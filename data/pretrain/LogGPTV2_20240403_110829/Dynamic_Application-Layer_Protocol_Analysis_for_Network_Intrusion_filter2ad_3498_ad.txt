### HTTP Prevalence and Protocol Analysis

HTTP is, unsurprisingly, the most prevalent of the four protocols. At the University of California, Berkeley (UCB) over a one-day period, 99% of the approximately 970,000 reported off-port connections were HTTP. Among these, 28% were attributed to Gnutella, 22% to Apache, and 12% to Freechal [15]. At the Max Planck Institute for Software Systems (MWN), 92% of the 250,000 reported connections were HTTP, with 7% being FTP (of which 70% were initiated by the same host). Of the HTTP connections, approximately 21% were attributed to BitTorrent, 20% to Gnutella, and 14% to SOAP.

The ability of protocol analyzers to extract protocol semantics not only for HTTP but also for other protocols is highly valuable. PIA-Bro generates detailed protocol-level log files for all connections. A quick review of an FTP log file, for example, can quickly reveal whether an FTP server requires closer attention. Figure 3 shows an excerpt from such a log file for a compromised host at MWN.

### Protocol Analysis and Intrusion Detection

PIA-Bro's capability to perform protocol-level analysis on non-standard ports is a significant advantage. For instance, we developed a detector for HTTP proxies that matches HTTP requests going into a host with those issued by the same system to external systems. With traditional setups, this can only be done for well-known ports. However, PIA-Bro correctly identified proxies running on different ports within the UCB and MWN networks, two of which were world-open.

Whether offering a service on a non-standard port is problematic depends on the site’s policy. Both university environments generally tolerate non-standard services. For the internal servers we identified, we verified that they meet at least basic security requirements. For example, we ensured that all SMTP servers do not allow arbitrary relaying. One such server at MWN was quickly closed after we reported it, as were the open HTTP proxies.

### Payload Inspection of FTP Data

According to network operators, attackers often install FTP servers on non-standard ports on compromised machines. PIA-Bro not only reliably detects such servers but can also examine the transferred files, a task impossible for traditional NIDSs due to the arbitrary port combinations used in FTP data transfers. Inspecting the transferred data for files exchanged via non-standard ports enables alerts on sensitive files, such as system database accesses or virus-infected files.

We introduced a new file analyzer to perform such analysis for FTP data connections and other file-transfer protocols. When PIA-Bro learns of an upcoming data transfer through its control session analysis, it adds the expected connection to the dynamic prediction table (see §4.2). Once the connection is seen, the system instantiates a file analyzer to examine the payload.

The file analyzer receives the file's full content as a reassembled stream and can use any file-based intrusion detection scheme. Our file-type identification for PIA-Bro leverages libmagic [25], which provides a large library of file-type characteristics. This allows PIA-Bro to log the file type's textual description and MIME type based on the payload at the beginning of the connection. The extended FTP analyzer logs—and potentially alerts on—the file's content type. Figure 3 shows the result of the file type identification in the ftp-data line, categorizing the data transfer as MIME type video/x-msvideo and more specifically as an AVI movie.

### Detecting IRC-based Botnets

Attackers often install trojans and bots for remote command execution on vulnerable systems, forming large botnets controlled by a human master. The IRC protocol is a popular means for communication within botnets due to its public and private channels suitable for holding commands.

Traditional NIDSs struggle to reliably detect members of IRC-based botnets, as bots often connect to non-standard IRC servers. PIA-Bro, however, can implement a reliable bot-detector. The detector operates on top of the IRC analyzer and uses three heuristics: checking if the client’s nickname matches known botnet patterns, examining channel topics for typical botnet commands, and flagging new clients connecting to already identified bot-servers. Figure 4 shows an excerpt of the list of known bots and bot-servers maintained by our operational detectors.

At MWN, the bot-detector quickly flagged a large number of bots, identifying more than 100 distinct local addresses. Manual verification confirmed the accuracy of our detection. At UCB, fewer compromised machines were detected, with only 15 internal hosts reported during a two-week period. The MWN operators installed a blocking system for NAT subnets, which automatically blocks reported bots. After initial implementation, the number of blocked hosts increased by 10-20 addresses, but after two weeks, it returned to the previous level, indicating the system's effectiveness in reducing the number of bots.

### Evaluation

To assess the performance impact of the PIA architecture, we conducted CPU measurements using both the unmodified Bro (Stock-Bro) and PIA-Bro on a 66 GB trace corresponding to 29 minutes of traffic. The environment consists of a dual-Opteron system with 2GB RAM, running FreeBSD 6.0.

Table 4 summarizes the CPU times for various configurations. Config-A includes basic analysis, while Config-A' pre-filters the trace to include only packets matched by Bro’s BPF filter. Config-B processes all TCP packets, and Config-C adds signature matching and reassembly. PIA-Bro-M4K restricts signature matching to the first 4KB, yielding a 16.2% performance gain. Adding reassembly has a small penalty of 2.1%.

Overall, the evaluation confirms that the PIA framework does not impose an undue performance overhead, making it a viable solution for enhanced protocol analysis and intrusion detection.