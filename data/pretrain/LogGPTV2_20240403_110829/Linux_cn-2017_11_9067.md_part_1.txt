---
author: Daniel Bryant
category: 容器与云
comments_data: []
count:
  commentnum: 0
  favtimes: 3
  likes: 0
  sharetimes: 0
  viewnum: 10566
date: '2017-11-18 11:31:28'
editorchoice: false
excerpt: 在这篇文章中，我们将使用以前的一个简单的基于 Java 的电子商务商店，我们将它打包进 Docker 容器内，并且在 Kubernetes 上运行它。
fromurl: https://www.oreilly.com/ideas/how-to-manage-docker-containers-in-kubernetes-with-java
id: 9067
islctt: true
largepic: /data/attachment/album/201711/18/113130tep9pppxn3cejt6e.jpg
permalink: /article-9067-1.html
pic: /data/attachment/album/201711/18/113130tep9pppxn3cejt6e.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 在这篇文章中，我们将使用以前的一个简单的基于 Java 的电子商务商店，我们将它打包进 Docker 容器内，并且在 Kubernetes 上运行它。
tags:
- Kubernetes
- 容器
thumb: false
title: 用 Kubernetes 和 Docker 部署 Java 应用
titlepic: true
translator: qhwdw
updated: '2017-11-18 11:31:28'
---
> 
> 大规模容器应用编排起步
> 
> 
> 
![](/data/attachment/album/201711/18/113130tep9pppxn3cejt6e.jpg)
通过《[面向 Java 开发者的 Kubernetes](https://www.nginx.com/resources/library/kubernetes-for-java-developers/)》，学习基本的 Kubernetes 概念和自动部署、维护和扩展你的 Java 应用程序的机制。[下载该电子书的免费副本](https://www.nginx.com/resources/library/kubernetes-for-java-developers/)
在 《[Java 的容器化持续交付](https://www.nginx.com/resources/library/containerizing-continuous-delivery-java/)》 中，我们探索了在 Docker 容器内打包和部署 Java 应用程序的基本原理。这只是创建基于容器的生产级系统的第一步。在真实的环境中运行容器还需要一个容器编排和计划的平台，并且，现在已经存在了很多个这样的平台（如，Docker Swarm、Apach Mesos、AWS ECS），而最受欢迎的是 [Kubernetes](https://kubernetes.io/)。Kubernetes 被用于很多组织的产品中，并且，它现在由[原生云计算基金会（CNCF）](https://www.cncf.io/)所管理。在这篇文章中，我们将使用以前的一个简单的基于 Java 的电子商务商店，我们将它打包进 Docker 容器内，并且在 Kubernetes 上运行它。
### “Docker Java Shopfront” 应用程序
我们将打包进容器，并且部署在 Kubernetes 上的 “Docker Java Shopfront” 应用程序的架构，如下面的图所示：
![](/data/attachment/album/201711/18/113134l77ym6v7p7fbvmjp.png)
在我们开始去创建一个所需的 Kubernetes 部署配置文件之前，让我们先学习一下关于容器编排平台中的一些核心概念。
### Kubernetes 101
Kubernetes 是一个最初由谷歌开发的开源的部署容器化应用程序的 编排器   orchestrator 。谷歌已经运行容器化应用程序很多年了，并且，由此产生了 [Borg 容器编排器](https://research.google.com/pubs/pub44843.html)，它是应用于谷歌内部的，是 Kubernetes 创意的来源。如果你对这个技术不熟悉，一些出现的许多核心概念刚开始你会不理解，但是，实际上它们都很强大。首先， Kubernetes 采用了不可变的基础设施的原则。部署到容器中的内容（比如应用程序）是不可变的，不能通过登录到容器中做成改变。而是要以部署新的版本替代。第二，Kubernetes 内的任何东西都是 声明式   declaratively 配置。开发者或运维指定系统状态是通过部署描述符和配置文件进行的，并且，Kubernetes 是可以响应这些变化的——你不需要去提供命令，一步一步去进行。
不可变基础设施和声明式配置的这些原则有许多好处：它容易防止配置 偏移   drift ，或者 “ 雪花   snowflake ” 应用程序实例；声明部署配置可以保存在版本控制中，与代码在一起；并且， Kubernetes 大部分都可以自我修复，比如，如果系统经历失败，假如是一个底层的计算节点失败，系统可以重新构建，并且根据在声明配置中指定的状态去重新均衡应用程序。
Kubernetes 提供几个抽象概念和 API，使之可以更容易地去构建这些分布式的应用程序，比如，如下的这些基于微服务架构的：
* [ 豆荚   Pod ](https://kubernetes.io/docs/concepts/workloads/pods/pod/) —— 这是 Kubernetes 中的最小部署单元，并且，它本质上是一组容器。  豆荚   Pod 可以让一个微服务应用程序容器与其它“挎斗” 容器，像日志、监视或通讯管理这样的系统服务一起被分组。在一个豆荚中的容器共享同一个文件系统和网络命名空间。注意，一个单个的容器也是可以被部署的，但是，通常的做法是部署在一个豆荚中。
* [服务](https://kubernetes.io/docs/concepts/services-networking/service/) —— Kubernetes 服务提供负载均衡、命名和发现，以将一个微服务与其它隔离。服务是通过[复制控制器](https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/)支持的，它反过来又负责维护在系统内运行期望数量的豆荚实例的相关细节。服务、复制控制器和豆荚在 Kubernetes 中通过使用“[标签](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)”连接到一起，并通过它进行命名和选择。
现在让我们来为我们的基于 Java 的微服务应用程序创建一个服务。
### 构建 Java 应用程序和容器镜像
在我们开始创建一个容器和相关的 Kubernetes 部署配置之前，我们必须首先确认，我们已经安装了下列必需的组件：
* 适用于 [Mac](https://docs.docker.com/docker-for-mac/install/) / [Windows](https://docs.docker.com/docker-for-windows/install/) / [Linux](https://docs.docker.com/engine/installation/linux/ubuntu/) 的 Docker - 这允许你在本地机器上，在 Kubernetes 之外去构建、运行和测试 Docker 容器。
* [Minikube](https://kubernetes.io/docs/tasks/tools/install-minikube/) - 这是一个工具，它可以通过虚拟机，在你本地部署的机器上很容易地去运行一个单节点的 Kubernetes 测试集群。
* 一个 [GitHub](https://github.com/) 帐户和本地安装的 [Git](https://git-scm.com/) - 示例代码保存在 GitHub 上，并且通过使用本地的 Git，你可以复刻该仓库，并且去提交改变到该应用程序的你自己的副本中。
* [Docker Hub](https://hub.docker.com/) 帐户 - 如果你想跟着这篇教程进行，你将需要一个 Docker Hub 帐户，以便推送和保存你将在后面创建的容器镜像的拷贝。
* [Java 8](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) （或 9） SDK 和 [Maven](https://maven.apache.org/) - 我们将使用 Maven 和附属的工具使用 Java 8 特性去构建代码。
从 GitHub 克隆项目库代码（可选，你可以 复刻   fork 这个库，并且克隆一个你个人的拷贝），找到 “shopfront” 微服务应用： 。
```
$ git clone PI:EMAIL:danielbryantuk/oreilly-docker-java-shopping.git
$ cd oreilly-docker-java-shopping/shopfront
```
请加载 shopfront 代码到你选择的编辑器中，比如，IntelliJ IDE 或 Eclipse，并去研究它。让我们使用 Maven 来构建应用程序。最终生成包含该应用的可运行的 JAR 文件位于 `./target` 的目录中。
```
$ mvn clean install
…
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 17.210 s
[INFO] Finished at: 2017-09-30T11:28:37+01:00
[INFO] Final Memory: 41M/328M
[INFO] ------------------------------------------------------------------------
```
现在，我们将构建 Docker 容器镜像。一个容器镜像的操作系统选择、配置和构建步骤，一般情况下是通过一个 Dockerfile 指定的。我们看一下，我们的示例中位于 shopfront 目录中的 Dockerfile：
```
FROM openjdk:8-jre
ADD target/shopfront-0.0.1-SNAPSHOT.jar app.jar
EXPOSE 8010
ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]
```
第一行指定了，我们的容器镜像将被 “ 从   from ” 这个 openjdk:8-jre 基础镜像中创建。[openjdk:8-jre](https://hub.docker.com/_/openjdk/) 镜像是由 OpenJDK 团队维护的，并且包含了我们在 Docker 容器（就像一个安装和配置了 OpenJDK 8 JDK的操作系统）中运行 Java 8 应用程序所需要的一切东西。第二行是，将我们上面构建的可运行的 JAR “ 添加   add ” 到这个镜像。第三行指定了端口号是 8010，我们的应用程序将在这个端口号上监听，如果外部需要可以访问，必须要 “ 暴露   exposed ” 它，第四行指定 “ 入口   entrypoint ” ，即当容器初始化后去运行的命令。现在，我们来构建我们的容器：
```
$ docker build -t danielbryantuk/djshopfront:1.0 .
Successfully built 87b8c5aa5260
Successfully tagged danielbryantuk/djshopfront:1.0
```
现在，我们推送它到 Docker Hub。如果你没有通过命令行登入到 Docker Hub，现在去登入，输入你的用户名和密码：
```
$ docker login
Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.
Username:
Password:
Login Succeeded
$
$ docker push danielbryantuk/djshopfront:1.0
The push refers to a repository [docker.io/danielbryantuk/djshopfront]
9b19f75e8748: Pushed 
...
cf4ecb492384: Pushed 
1.0: digest: sha256:8a6b459b0210409e67bee29d25bb512344045bd84a262ede80777edfcff3d9a0 size: 2210
```
### 部署到 Kubernetes 上
现在，让我们在 Kubernetes 中运行这个容器。首先，切换到项目根目录的 `kubernetes` 目录：
```
$ cd ../kubernetes
```
打开 Kubernetes 部署文件 `shopfront-service.yaml`，并查看内容：
```
---
apiVersion: v1
kind: Service
metadata:
  name: shopfront
  labels:
    app: shopfront
spec:
  type: NodePort
  selector:
    app: shopfront
  ports:
  - protocol: TCP
    port: 8010
    name: http
---
apiVersion: v1
kind: ReplicationController