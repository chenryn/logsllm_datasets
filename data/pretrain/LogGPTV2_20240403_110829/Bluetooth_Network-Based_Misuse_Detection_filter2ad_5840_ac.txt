Regular Expressions
Bluetooth attacks that require a stateful inspection can be
modeled using a deterministic ﬁnite automata (DFA). This
is illustrated in Figure 5. In this example, the ﬁnite state ma-
chine models an HIDattack that begins by accepting unau-
thenticated connections to the HID Control and Interrupt
Channels, followed by a series of HID events on the Blue-
tooth protocol.
Current Intrusion Detection Systems such as Snort allow
specifying attacks as regular expressions [29]. The IDS user
must convert the DFA into an equivalent regular expression.
Figure 5 depicts the same HIDAttack modeled as a regular
expression. The authors are currently expanding this work
to allow the implemented IDS to accept more complex reg-
ular expressions to detect attacks.
6 Implementation
6.1 Overview
This section explains the implementation and testing of
the Bluetooth intrusion detection system. First, the testbed
is described. Following that is a discussion of the practical
384384
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:55 UTC from IEEE Xplore.  Restrictions apply. 
       Defense  NodeAttack NodeResponse Node(3 CSR Bluetooth Radios)Protocol Analyzer(12 dBi Yagi Antenna)USB802.11g WiFiTarget Nodes802.15.1 Bluetooth(5 Bluetooth Radios)Attack
BlueBug Attack
BlueSnarf Attack
CarWhisperer Attack
HeloMoto Attack
Table 1. Targeted Devices
Target Description
Nokia 6310 Phone
Sony Ericsson T68i Phone
Plantronics M2500 Headset
Motorola v600 Phone
6.2.2 Target Nodes
The targets in the experiment included a variety of devices
with well documented design vulnerabilities. The experi-
ment conducted reconnaissance and denial of service on a
wide array of devices in order to establish a baseline of met-
rics to evaluate the implemented system. Furthermore, the
experiment implemented speciﬁc attacks on devices with
disclosed vulnerabilities. Table 1 outlines some attacks and
the respective target devices.
6.2.3 Defense Node
The defense node consisted of a hardware protocol analyzer
and a software IDS application. The Merlin LeCroy Pro-
tocol Analyzer nonintrusively captures, displays, and an-
alyzes Bluetooth piconet data. The Merlin Analyzer also
supports addressing the device via a scripting language. The
scripting language enabled the system to listen to devices on
a speciﬁc frequency or speciﬁc piconet. Further, it allowed
recording and logging of trafﬁc on all the Bluetooth proto-
col layers. Intended for Bluetooth developers, the analyzer
included the ability to connect an external antenna. For pur-
poses of this experiment, the system utilized a 12 dBI gain
antenna to record trafﬁc, with ranges up to 1 km.
The defense node also included a software application
that processed the captured trafﬁc, and ran a set of pre-
conﬁgured rules and plug-in modules to detect Bluetooth-
enabled attacks. The software application implemented the
Bluetooth IDS engine. Additionally, the application in-
cluded a graphical interface that provided the alert and visu-
alization interfaces. Furthermore, the application provides
the security administrator with the capability to conﬁgure
rules and write add-on modules for more complex attack
signatures.
6.2.4 Intrusion Response Node
To demonstrate response capabilities, an intrusion response
node was designed to distract, deter and terminate Bluetooth
attacks. The response node contained three Cambridge
Silicon Radio (CSR) chip-based USB Bluetooth dongles.
These devices contained ﬂash memory that permitted raw
access to the device. As such, the chipsets enabled writ-
ing false information to forge the identity of the Bluetooth
MAC devices. Forging the Bluetooth address proved essen-
tial since it enabled the response node to deploy honeypots
with false identities, disrupt ongoing attackers by spooﬁng
an address of an attacker, and prevent future attacks by forg-
ing the connection responses of vulnerable targets.
6.3 Practical Problems Faced
Implementing the ﬁrst network-based Bluetooth IDS in-
cluded some practical problems. The system relied on a
hardware protocol analyzer to capture and decode Bluetooth
packets. Therefore, the system faced some problems decod-
ing particular packets, and scheduling unique piconets.
6.3.1 Protocol Analyzer Packet Decoding
The hardware analyzer presented a problem in realtime test-
ing of three speciﬁc attacks,because of the version of the
analyzer. For the research, the authors utilized an older an-
alyzer that could decode Bluetooth trafﬁc compliant with
the 1.1 Core Speciﬁcation, but not for the most recent Blue-
tooth Core Speciﬁcation. Speciﬁcally, the analyzer required
speciﬁc channel decoding assignments to understand which
protocol layer had generated RFCOMM trafﬁc for some
packets during the BlueSnarfer, BlueBugger, and HeloMoto
attacks. Thus, the authors could only record these attacks
manually, because they required additional input to the an-
alyzer. The authors tested the remainder of the attacks au-
tonomously utilizing the scripting language of the analyz-
ers.
6.3.2 Scheduling Between Bluetooth Piconets
Additionally, the protocol analyzer presented a problem in
the fact that it could not simultaneously record all Blue-
tooth communication in a given area. Rather, it records
communication in only one unique piconet at a time.
In
theory, a Bluetooth IDS should simultaneously listen to 79
different frequencies and then assign each captured packet
to a particular piconet. Such a system would require 79
unique radios and a multiplexing scheme. Alternatively, a
user could attempt to synchronize with a unique piconet and
hop in sequence with that particular piconet. Alternating
between piconets provides an efﬁcient, although less than
optimal, picture of trafﬁc. The possibility does exist that
one could miss an attack during the alternation between pi-
conets. The testbed for this work employed a system that
scheduled unique piconets for recording in a round-robin
algorithm.
385385
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:55 UTC from IEEE Xplore.  Restrictions apply. 
7 Experimental Evaluation
7.1 Overview
This section evaluates the implemented intrusion detec-
tion system. The metrics for intrusion detection and re-
sponse are those recommended by the Defense Advanced
Research Projects Agency (DARPA).
7.2 Experiment Setup
The testbed described in the previous section was used
for the experiments. To test the probability of detection, the
authors generated trafﬁc as suggested by Mell et. al. [43]
Using 20 different attack tools, the attack node ran exploits
against the series of vulnerable target nodes. Each attack
was recorded by the Bluetooth Protocol Analyzer. Further-
more, A special analyzer recording options ﬁle reduced the
amount of trafﬁc uploaded to the IDS. To increase the efﬁ-
ciency of the system, the analyzer dropped all baseband and
radio trafﬁc. Additionally, decoding assignments for RF-
COMM AT trafﬁc were speciﬁed that the protocol analyzer
could not automatically decode (due to the limitations men-
tioned above). The IDS then analyzed the off-line packet
recordings using a complete set of signatures.
Following that, the attack node launched a set of 17 dif-
ferent attacks on the target nodes. Decoded packets were
streamed in realtime from the protocol analyzer to the IDS
preprocessor. During the on-line detection tests, the ana-
lyzer was instructed via the scripting language to upload
decoded packets to the IDS. During this experiment, the an-
alyzer only recorded data originating from the attack node,
instead of round robin scheduling.
To verify the probability of false alarms, the authors used
previously recorded benign trafﬁc provided by the LeCroy
Corporation. This trafﬁc was generated by 33 different
devices, including Bluetooth-enabled computers, headsets,
phones, HID devices, and handheld computers. The benign
trafﬁc contained over 26,000 previously recorded packets.
The IDS examined this collection of packets in less than 30
seconds.
To evaluate the response capability, the authors built a
response node based on Linux and the BlueZ protocol stack.
The IDS then contacted the response node via TCP sockets
and issued commands based on attack identiﬁcation. The
results were then veriﬁed by examining the output and data
recorded on the response node.
7.3 Evaluation of IDS Metrics
In 2007, DARPA deﬁned metrics for intrusion detec-
tion systems, including recording the Probability of False
Alarms, Probability of Detection, Resistance to Attacks Di-
rected at the IDS, Ability to Detect Never Before Seen At-
tacks, Ability to Identify an Attack, and Ability to Deter-
mine Attack Success.[43]
We used these metrics to determine the success of the
implemented intrusion detection system. The results show
the system has a low rate of false alarms, a high rate of de-
tection, a moderate resistance to IDS attacks, and the ability
to determine attack success.
7.3.1 Coverage
Coverage deﬁnes the attacks that an intrusion detection sys-
tem can detect under ideal conditions.[43] For signature-
based systems, coverage deﬁnes the set of known, deﬁned
signatures. The coverage of the implemented system con-
sists of 20 known attacks. However, because the system has
a conﬁgurable rule syntax and the user can add additional
modules, the coverage can grow as the number of discov-
ered Bluetooth attacks grows.
7.3.2 Response Time
Attack
Category
Table 2. Time Required for Attack Detection
Avg. Required
TWin (sec)
Reconnaissance
Reconnaissance
RFCOMM Scan
PSM Scan
HeaderOverFlow Denial of Service
Nasty vCard
Denial of Service
Information Theft
BlueSnarf
Information Theft
BlueBugger
Information Theft
CarWhisperer
HeloMoto
Information Theft
110.86
4.747
0.0006
1.1030
1.4696
3.2566
0.2277
3.2294
Figure 2 shows the average time required (Twin) to de-
tect different Bluetooth attacks recorded by the system.
Some attacks, such as the HeaderOverFlow attack, occur
very brieﬂy in 625 milliseconds. Other attacks that require
an inspection of multiple packets take a longer time to re-
port. Thus, some attacks such as an RFCOMM Scan occur
over a period of more than a minute. Based on these values,
the authors selected a sliding window value of 120 seconds
of trafﬁc to ensure that the IDS could always spot the pat-
terns for the known attacks. The system detects most attacks
within a matter of seconds. Near realtime detection allows
the system to direct a quick response to prevent, disrupt, or
deny ongoing attacks by a hacker.
386386
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:55 UTC from IEEE Xplore.  Restrictions apply. 
7.3.3 Probability of Detection
The probability of detection measures the rate of attacks de-
tected correctly by an IDS in a given environment during a
particular time frame.[43] To test the probability of detec-
tion, the authors attacked the target nodes with 20 differ-
ent attacks. The IDS used the previously calculated sliding
window of 120 seconds of trafﬁc. Furthermore, the authors
tested the system with both off-line and on-line detection,
with the exception of three attacks that could only be tested
ofﬂine. The IDS correctly identiﬁed each of the 20 attacks
in the tests.
7.3.4 Probability of False Alarms
False alarms incorrectly produce alerts on benign back-
ground trafﬁc.[43] To test the results of the system imple-
mented here, the benign trafﬁc described above was used.
The IDS processed these recordings of packets ofﬂine to
determine a rate of false positives. The system did not pro-
duce any false-negative alerts on any of the benign trafﬁc.
7.3.5 Resistance to Attacks Directed at the IDS
Common intrusion detection evasion techniques include
sending fragmented packets, crafting obfuscated payloads,
and overwhelming the IDS with alerts to disguise the ac-
tual attack.[43] All of these attacks attempt to overwhelm
the IDS with data in order to decrease its ability to make
an intelligent decision. Fortunately, the limited bandwidth
of Bluetooth decreases the likelihood and severity of such
attacks. The use of a protocol analyzer prevents fragmented
packets and obfuscated payloads from overwhelming the
IDS, as the protocol analyzer handles the decoding of Blue-
tooth packets. Fragmented packets are reassembled by the
protocol analyzer in a way that is transparent to the IDS en-
gine.
However, a separate problem exists if an attacker has ac-
cess to a large number of Bluetooth radios. The current pro-
posed system detects devices and listens in a round-robin
fashion to each device for a speciﬁed period. Knowing this,
an attacker could use several devices to conceal his actual
attack. However, this attack would have a limited range,
as an attacker would not likely have access to several long-
distance antennae. To avoid this problem, a system would
need to simultaneously record and multiplex all 79 frequen-
cies used by the Bluetooth protocol. This is strictly an issue
of cost, not technical feasibility.
7.3.6 Ability to Identify an Attack
Another metric is the ability to correctly identify an attack
with a speciﬁc common or vulnerability name. [43] In the
implemented IDS, the system correctly identiﬁes all deﬁned
attacks by name. Further, it can distinguish between differ-
ent tools implementing the attacks. For example, the sys-
tem correctly differentiates between BTScanner and Tbear
device reconnaissance tools. Both tools scan for Bluetooth
devices by continuously generating inquiry requests. How-
ever, the tools utilize a different inquiry response timeout
value. The IDS distinguished between these two tools per-
forming a similar attack on the basis of the inquiry timeout
value.
7.3.7 Ability to Determine Attack Success
The proposed system correctly identiﬁes the success of an
attack. This section presents two different examples to il-
lustrate the attack success determination.
In the ﬁrst example, the attack nodes crashed a Nokia
phone by sending a malicious packet. After the receipt
of the malicious packet, the Bluetooth radio of the Nokia
phone ceased working and stopped sending acknowledg-
ments for connection-oriented packets. Seeing that the
Bluetooth radio in the phone had ceased working, the IDS
identiﬁed the attack as successful. The authors repeated the
same experiment with a Motorola phone not vulnerable to
the attack. As expected, the Motorola phone did not crash
and continued to respond after the attack. The intrusion de-
tection system recorded the packets of the non-vulnerable
device and identiﬁed the attack as being unsuccessful.
Figure 7. Report of Data Stolen During Blue-
Bug Attack
In the second example, the attack node attempted to pull
data out of a phone by using a BlueBug attack. The data
consisted of a phonebook with the names of the top ten
wanted terrorists. First, the attack node connected to a vul-
nerable phone and issued the command to steal the phone-
book. The intrusion detection system correctly saw the
packets relevant to the connection and the data packets of
the stolen phonebook. Thus, it identiﬁed the attack as suc-
cessful. Figure 7 shows the GUI alert. The authors then
repeated the same experiment with a non-vulnerable phone.
The intrusion detection system saw the connection and at-
tempt to pull the phonebook. However, the attack failed to
387387
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:55 UTC from IEEE Xplore.  Restrictions apply. 
steal the phonebook, and the intrusion detection success-
fully reported an unsuccessful attack, since it did not see
any data for the phonebook.
7.3.8 Processing Speed
Table 3. Off-line Processing Time
Attack
BlueBugger
BSS
BlueSpam
PSM Scan
Trafﬁc
Length (sec)
30.02
367.20
358.88
47.85
Packets
189
973
1,756
2,187
Processing