### Source Code and Attack Vectors

SerialDetector relies on known gadgets to detect vulnerabilities, while other methods exploit well-known attack triggers, often referred to as "magic methods" in their context. An interesting future direction would be to integrate the complementary techniques by Dahse et al. for gadget generation into SerialDetector.

### Assembly-Level Analysis

Shahriar and Haddad [40] propose a lightweight approach using latent semantic indexing to identify keywords likely responsible for Object Injection Vulnerabilities (OIVs) and apply it systematically to PHP applications to uncover new vulnerabilities. Rasheed et al. [35] study Denial of Service (DoS) vulnerabilities in YAML libraries across different programming languages, discovering several new vulnerabilities. Recently, Lekies et al. [28] demonstrated that code-reuse attacks are feasible in client-side web applications by introducing a new attack vector that bypasses existing Cross-Site Scripting (XSS) mitigations through script gadgets. Cristalli et al. [10] present a dynamic approach to identify trusted execution paths during a training phase with benign inputs, leveraging this information to detect insecure deserialization via a lightweight sandbox. Hawkins and Demsky [23] introduce ZenIDS, a system that dynamically learns the trusted execution paths of an application during an online training period and reports execution anomalies as potential intrusions. Dietrich et al. [14] investigate deserialization vulnerabilities that exploit the topology of object graphs constructed from Java classes, leading to DoS attacks that exhaust stack memory, heap memory, and CPU time. SerialDetector focuses on generating OIV patterns targeting low-level features of frameworks and libraries. Our results complement these techniques and can enhance their precision. To our knowledge, none of the existing static analysis tools have been applied to complex production software such as Azure DevOps Server.

### Inspiration from Practitioners' Techniques

Our work draws inspiration from exploitation techniques developed by the practitioners' community [17], [18], [22], [32]. We leverage these results for the exploitation phase to match our patterns with existing gadgets [3]. For a comprehensive report on deserialization attacks in .NET and Java libraries, we refer to Muñoz and Mirosh [32]. Seacord [39] provides a thorough discussion on OIV defenses via type whitelisting. Our results complement gadget generation techniques and can help uncover unknown gadgets.

### Tool Support

Koutroumpouchos et al. [27] developed ObjectMap, a toolchain for detecting and testing OIVs in Java and PHP applications. While targeting different languages, ObjectMap shares similar goals with SerialDetector’s payload and exploit generation modules. Gadget Inspector [22] is a tool for discovering gadget chains that can be used to exploit deserialization vulnerabilities in Java applications. SerialKiller [33] is a Java deserialization library implementing look-ahead deserialization [16] to secure applications from untrusted input. It inspects Java classes during naming resolution and allows a combination of blacklisting and whitelisting.

### Injection Vulnerabilities and Code Reuse

Code reuse vulnerabilities have been extensively studied in the context of injection vulnerabilities in web applications [6], [9], [12], [24], [28]–[30], [43], [44], [47]. For the .NET domain, Fu et al. [19] propose a symbolic execution framework for .NET bytecode to identify SQL injection vulnerabilities. Doupé et al. [15] implement a semantics-preserving static refactoring analysis to separate code and data in .NET binaries, protecting legacy applications from server-side XSS attacks. Our work is exclusively focused on OIVs and provides in-depth results targeting such vulnerabilities. Despite significant engineering challenges with .NET assemblies, our taint-based data flow analysis follows the existing line of work targeting web and mobile application vulnerabilities at the bytecode level [4], [7], [21], [30], [43], [47].

### Conclusion

We have advanced the research on key challenges for OIVs in modern web applications. Based on these challenges, we identified the root cause of OIVs and proposed patterns based on the triplet: entry points, sensitive sinks, and attack triggers. We introduced SerialDetector, the first principled and practical tool implementing a systematic exploration of OIVs via taint-based static analysis. We used SerialDetector to test 15 serialization libraries and several vulnerable applications, performing an in-depth security analysis of the Azure DevOps Server, which led to the discovery of Remote Code Execution (RCE) vulnerabilities with three assigned CVEs.

### Acknowledgment

We thank the anonymous reviewers for their valuable feedback. This work was partly funded by the Swedish Research Council (VR) under the project JointForce and by the Swedish Foundation for Strategic Research (SSF) under the project TrustFull.

### References

[1] “dnlib,” https://github.com/0xd4d/dnlib.
[2] “Standard ECMA-335 Common Language Infrastructure (CLI),” https://www.ecma-international.org/publications/standards/Ecma-335.htm.
[3] “YSoSerial.Net,” https://github.com/pwntester/ysoserial.net.
[4] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel, “FlowDroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps,” in PLDI 2014, 2014, p. 29.
[5] B. A. Azad, P. Laperdrix, and N. Nikiforakis, “Less is more: Quantifying the security benefits of debloating web applications,” in USENIX Security 19, 2019, pp. 1697–1714.
[6] M. Backes, K. Rieck, M. Skoruppa, B. Stock, and F. Yamaguchi, “Efficient and flexible discovery of PHP application vulnerabilities,” in EuroS&P’17, 2017, pp. 334–349.
[7] M. Balliu, D. Schoepe, and A. Sabelfeld, “We are family: Relating information-flow trackers,” 2017, pp. 124–145.
[8] T. K. Bletsch, X. Jiang, V. W. Freeh, and Z. Liang, “Jump-oriented programming: a new class of code-reuse attack,” in ASIACCS 2011, 2011, pp. 30–40.
[9] C. Cifuentes, A. Gross, and N. Keynes, “Understanding caller-sensitive method vulnerabilities: A class of access control vulnerabilities in the Java platform,” in SOAP 2015, 2015, pp. 7–12.
[10] S. Cristalli, E. Vignati, D. Bruschi, and A. Lanzi, “Trusted Execution Path for Protecting Java Applications Against Deserialization of Untrusted Data,” in RAID 2018, 2018, pp. 445–464.
[11] J. Dahse and T. Holz, “Simulation of built-in PHP features for precise static code analysis,” in NDSS’14, 2014.
[12] ——, “Static detection of second-order vulnerabilities in web applications,” in USENIX Security 14, 2014, pp. 989–1003.
[13] J. Dahse, N. Krein, and T. Holz, “Code reuse attacks in PHP: Automated pop chain generation,” in CCS’14, 2014, pp. 42–53.
[14] J. Dietrich, K. Jezek, S. Rasheed, A. Tahir, and A. Potanin, “Evil Pickles: DoS Attacks Based on Object-Graph Engineering,” in ECOOP 2017, 2017, pp. 10:1–10:32.
[15] A. Doupé, W. Cui, M. H. Jakubowski, M. Peinado, C. Kruegel, and G. Vigna, “dedacota: toward preventing server-side XSS via automatic code and data separation,” in CCS’13, 2013, pp. 1205–1216.
[16] P. Ernst, “Look-ahead Java deserialization,” January 2013. [Online]. Available: https://www.ibm.com/developerworks/library/se-lookahead/
[17] S. Esser, “Utilizing code reuse/rop in PHP application exploits,” BlackHat USA, 2010.
[18] J. Forshaw, “Are you my Type? Breaking .NET Through Serialization,” BlackHat, 2012.
[19] X. Fu, X. Lu, B. Peltsverger, S. Chen, K. Qian, and L. Tao, “A static analysis framework for detecting SQL injection vulnerabilities,” in COMPSAC 2007, 2007, pp. 87–96.
[20] E. Gamma, R. Helm, R. Johnson, and J. Vlissides, Design Patterns: Elements of Reusable Object-Oriented Software. USA: Addison-Wesley Longman Publishing Co., Inc., 1995.
[21] M. I. Gordon, D. Kim, J. H. Perkins, L. Gilham, N. Nguyen, and M. C. Rinard, “Information flow analysis of Android applications in droidsafe,” in NDSS, 2015.
[22] I. Haken, “Automated Discovery of Deserialization Gadget Chains,” BlackHat, 2018.
[23] B. Hawkins and B. Demsky, “ZenIDS: introspective intrusion detection for PHP applications,” in ICSE 2017, 2017, pp. 232–243.
[24] P. Holzinger, S. Triller, A. Bartel, and E. Bodden, “An in-depth study of more than ten years of Java exploitation,” in CCS’16, 2016, pp. 779–790.
[25] J. Huang, Y. Li, J. Zhang, and R. Dai, “Uchecker: Automatically detecting PHP-based unrestricted file upload vulnerabilities,” in DSN 2019, 2019, pp. 581–592.
[26] V. Kanvar and U. P. Khedker, “Heap abstractions for static analysis,” ACM Comput. Surv., vol. 49, no. 2, June 2016.
[27] N. Koutroumpouchos, G. Lavdanis, E. Veroni, C. Ntantogian, and C. Xenakis, “ObjectMap: Detecting Insecure Object Deserialization,” in PCI’19, 2019, pp. 67–72.
[28] S. Lekies, K. Kotowicz, S. Groß, E. A. V. Nava, and M. Johns, “Code-reuse attacks for the web: Breaking cross-site scripting mitigations via script gadgets,” in CCS 2017, 2017, pp. 1709–1723.
[29] S. Lekies, B. Stock, and M. Johns, “25 million flows later: large-scale detection of DOM-based XSS,” in CCS 2013, 2013, pp. 1193–1204.
[30] W. Melicher, A. Das, M. Sharif, L. Bauer, and L. Jia, “Riding out DOMsday: Toward detecting and preventing DOM cross-site scripting,” in NDSS 2018, 2018.
[31] D. Mitropoulos, P. Louridas, M. Polychronakis, and A. D. Keromytis, “Defending against web application attacks: Approaches, challenges and implications,” IEEE Transactions on Dependable and Secure Computing, vol. 16, no. 2, pp. 188–203, 2019.
[32] A. Muñoz and O. Mirosh, “Friday the 13th JSON Attacks,” BlackHat, 2017.
[33] A. Muñoz and C. Schneider, “Serial Killer: Silently pwning your Java endpoints,” 2018.
[34] O. Peles and R. Hay, “One class to rule them all: 0-day deserialization vulnerabilities in Android,” in WOOT’15, 2015.
[35] S. Rasheed, J. Dietrich, and A. Tahir, “Laughter in the wild: A study into DoS vulnerabilities in YAML libraries,” in TrustCom/BigDataSE 2019, 2019, pp. 342–349.
[36] R. Roemer, E. Buchanan, H. Shacham, and S. Savage, “Return-oriented programming: Systems, languages, and applications,” ACM Trans. Inf. Syst. Secur., vol. 15, no. 1, pp. 2:1–2:34, 2012.
[37] D. Schoepe, M. Balliu, B. C. Pierce, and A. Sabelfeld, “Explicit secrecy: A policy for taint tracking,” in EuroS&P, 2016.
[38] E. J. Schwartz, T. Avgerinos, and D. Brumley, “All you ever wanted to know about dynamic taint analysis and forward symbolic execution (but might have been afraid to ask),” in IEEE S&P, 2010.
[39] R. Seacord, “Combating Java Deserialization Vulnerabilities with Look-Ahead Object Input Streams (LAOIS),” June 2017.
[40] H. Shahriar and H. Haddad, “Object injection vulnerability discovery based on latent semantic indexing,” in SAC, 2016, pp. 801–807.
[41] M. Shcherbakov and M. Balliu, “SerialDetector,” February 2021, software. [Online]. Available: https://github.com/yuske/SerialDetector
[42] Y. Smaragdakis, M. Bravenboer, and O. Lhoták, “Pick your contexts well: understanding object-sensitivity,” in POPL 2011, 2011, pp. 17–30.
[43] F. Spoto, E. Burato, M. D. Ernst, P. Ferrara, A. Lovato, D. Macedonio, and C. Spiridon, “Static identification of injection attacks in Java,” ACM Trans. Program. Lang. Syst., vol. 41, no. 3, pp. 18:1–18:58, 2019.
[44] C. Staicu and M. Pradel, “Freezing the web: A study of ReDoS vulnerabilities in JavaScript-based web servers,” in USENIX Security, 2018, pp. 361–376.
[45] L. Szekeres, M. Payer, T. Wei, and D. Song, “SoK: Eternal War in Memory,” in Security & Privacy, 2013, pp. 48–62.
[46] K. 2017, “OWASP TEAM, Top 10 - A8 Insecure Deserialization,” https://www.kiuwan.com/blog/A8-Insecure-Deserialization/
[47] O. Tripp, M. Pistoia, P. Cousot, R. Cousot, and S. Guarnieri, “Andromeda: Accurate and scalable security analysis of web applications,” in FASE, 2013, pp. 210–225.
[48] R. Vallée-Rai, P. Co, E. Gagnon, L. J. Hendren, P. Lam, and V. Sundaresan, “Soot - a Java bytecode optimization framework,” in CASCON, 1999.
[49] M. Wulftange, “CVE-2019-0604: Details of a Microsoft SharePoint RCE Vulnerability,” March 2019. [Online]. Available: https://www.thezdi.com/blog/2019/3/13/cve-2019-0604-details-of-a-microsoft-sharepoint-rce-vulnerability

### Appendix

#### A Primer on .NET Technologies

The .NET Framework is a managed execution environment for Windows, providing a variety of services to its running applications. It consists of two major components: the Common Language Runtime (CLR), which is the virtual machine that handles running applications, and the .NET Framework Class Library (FCL), which provides a library of reusable code that developers can call from their applications. The FCL implements a collection of reusable types for user interfaces (e.g., XAML serializer), data access, web application development (e.g., JSON serializer), network communications (e.g., SOAP serializer), and other features.

The .NET Framework implements the Common Language Infrastructure (CLI) specification, an ISO and Ecma standard that describes executable code and a runtime environment. Compilers for C# and F# generate code in the Common Intermediate Language (CIL) that can be executed in the CLI runtime. CIL is an object-oriented binary instruction set within the CLI specification. For our purposes, CIL provides a unified language for analyzing code from the .NET Framework and its applications in the absence of source code.

The .NET Framework allows for the dynamic instantiation of arbitrary objects based on user-provided types and data. This is typically achieved via reflection, which allows for examining the structure of types, creating instances of types, and invoking methods on types, all based on the description of a type. Alternatively, the .NET Framework can instantiate an object at runtime via dynamic code generation by getting a pointer to a method and generating the CIL code of that method at runtime.

### Operational Semantics of CIL

The operational semantics of CIL are defined by a set of rules that describe how the instructions are executed. These rules are essential for understanding the behavior of .NET applications at the assembly level. The following are some of the key CIL instructions and their operational semantics:

- **C-LDVAR**: Load a variable from the environment.
- **C-LDFLD**: Load a field from an object.
- **C-BR**: Unconditional branch.
- **C-STVAR**: Store a value into a variable.
- **C-STFLD**: Store a value into a field.
- **C-NEWOBJ**: Create a new object.
- **C-RET**: Return from a method.
- **C-BRTRUE**: Conditional branch if the value is true.
- **C-CALL**: Call a method.

These instructions form the basis for the execution of .NET applications and are crucial for the analysis and manipulation of .NET bytecode.

\[
\begin{array}{ll}
\textbf{C-LDVAR} & \langle pc, cs, E, h, s :: v \rangle \rightarrow \langle pc + 1, cs, E, h, s :: v \rangle \\
& \text{where } P(pc) = \text{ldvar } x \text{ and } v = E(x) \\
\textbf{C-LDFLD} & \langle pc, cs, E, h, s :: l \rangle \rightarrow \langle pc + 1, cs, E, h, s :: v \rangle \\
& \text{where } P(pc) = \text{ldfld } f \text{ and } v = h(l, f) \\
\textbf{C-BR} & \langle pc, cs, E, h, s \rangle \rightarrow \langle i, cs, E, h, s \rangle \\
& \text{where } P(pc) = \text{br } i \\
\textbf{C-STVAR} & \langle pc, cs, E, h, s :: v \rangle \rightarrow \langle pc + 1, cs, E', h, s \rangle \\
& \text{where } P(pc) = \text{stvar } x \text{ and } E' = E[x \mapsto v] \\
\textbf{C-STFLD} & \langle pc, cs, E, h, s :: v :: l \rangle \rightarrow \langle pc + 1, cs, E, h', s \rangle \\
& \text{where } P(pc) = \text{stfld } f \text{ and } h' = h[h(l, f) \mapsto v] \\
\textbf{C-NEWOBJ} & \langle pc, cs, E, h, s \rangle \rightarrow \langle pc + 1, cs, E, h', s :: l \rangle \\
& \text{where } P(pc) = \text{newobj } T \text{ and } l \in \text{Loc fresh and } h' = h[(l, f) \mapsto \bot] \\
\textbf{C-RET} & \langle pc, cs :: st, E, h, s :: v \rangle \rightarrow \langle pc', cs, E, h, s' \rangle \\
& \text{where } st = (pc', E', s') \text{ and } pc' = pc + 1 \\
\textbf{C-BRTRUE} & \langle pc, cs, E, h, s :: v \rangle \rightarrow \langle pc', cs, E, h, s \rangle \\
& \text{where } P(pc) = \text{brtrue } i \text{ and } pc' = (v ? i : pc + 1) \\
\textbf{C-CALL} & \langle pc, cs, E, h, s :: v \rangle \rightarrow \langle i, cs :: st, E', h, \epsilon \rangle \\
& \text{where } P(pc) = \text{call } i \text{ and } st = (pc, E, s) \text{ and } E' = E[\text{arg} \mapsto v] \\
\end{array}
\]

**Figure 12: Operational semantics of CIL**

This figure provides a concise overview of the operational semantics of CIL, which is essential for understanding and analyzing .NET applications.