### 优化后的文本

#### 代码段
```java
count++;
tail = (tail + 1) % buffer.length;
buffer[tail] = cake;

try {
    while (true) {
        wait();
    }
} catch (InterruptedException e) {
    // Handle the exception
}

// 清扫人员每隔1秒执行一次clear操作
class ClearThread extends Thread {
    public void run() {
        while (true) {
            try {
                Thread.sleep(1000);
                table.clear();
                System.out.println("ClearThread: " + getName() + " clears the table");
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
```

#### 主类 `Main`
```java
public class Main {
    public static void main(String[] args) {
        Table table = new Table(3); // 创建一个能放三个蛋糕的桌子

        // 启动线程
        new MakerThread("MakerThread-1", table, 31415).start();
        new MakerThread("MakerThread-2", table, 62643).start();
        new MakerThread("MakerThread-3", table, 92653).start();
        new EaterThread("EaterThread-1", table, 32384).start();
        new EaterThread("EaterThread-2", table, 58979).start();
        new EaterThread("EaterThread-3", table, 38327).start();
        new ClearThread("ClearThread-0", table).start();
    }
}
```

#### 问题5-6的解答
```java
public class Main {
    public static void main(String[] args) {
        Table table = new Table(3); // 创建一个能放三个蛋糕的桌子

        // 启动线程
        new MakerThread("MakerThread-1", table, 31415).start();
        new MakerThread("MakerThread-2", table, 62643).start();
        new MakerThread("MakerThread-3", table, 92653).start();
        new EaterThread("EaterThread-1", table, 32384).start();
        new EaterThread("EaterThread-2", table, 58979).start();
        new EaterThread("EaterThread-3", table, 38327).start();

        // 在约10秒后结束线程
        try {
            Thread.sleep(10000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        for (Thread thread : threads) {
            thread.interrupt();
        }
    }
}
```

#### 问题5-7的解答
```java
public class Main {
    public static void main(String[] args) {
        Thread executor = new Thread(() -> {
            for (int i = 0; i < 100; i++) {
                if (Thread.interrupted()) {
                    throw new InterruptedException();
                }
                System.out.println("doHeavyJob BEGIN");
                long start = System.currentTimeMillis();
                while (System.currentTimeMillis() - start < 10000) { // 进行约10秒的循环
                    // 忙等待
                }
                System.out.println("doHeavyJob END");
            }
        });

        executor.start();

        // 休息约15秒后取消
        try {
            Thread.sleep(15000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        executor.interrupt();
    }
}
```

#### 问题5-8的解答
```java
public class LazyThread extends Thread {
    private final Table table;

    public LazyThread(String name, Table table) {
        super(name);
        this.table = table;
    }

    @Override
    public void run() {
        while (true) {
            synchronized (table) {
                try {
                    table.wait();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println(getName() + " is notified!");
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Table table = new Table(3); // 创建一个能放三个蛋糕的桌子

        // 启动线程
        new MakerThread("MakerThread-1", table, 31415).start();
        new MakerThread("MakerThread-2", table, 62643).start();
        new MakerThread("MakerThread-3", table, 92653).start();
        new EaterThread("EaterThread-1", table, 32384).start();
        new EaterThread("EaterThread-2", table, 58979).start();
        new EaterThread("EaterThread-3", table, 38327).start();
        new LazyThread("LazyThread-1", table).start();
        new LazyThread("LazyThread-2", table).start();
        new LazyThread("LazyThread-3", table).start();
        new LazyThread("LazyThread-4", table).start();
        new LazyThread("LazyThread-5", table).start();
        new LazyThread("LazyThread-6", table).start();
        new LazyThread("LazyThread-7", table).start();
    }
}
```

#### 问题5-9的解答
```java
public class Main {
    public static void main(String[] args) {
        Something.method(); // 休息约3秒
    }
}

class Something {
    public static void method() {
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
```

#### 问题6-1的解答
- (1) `doWrite` 方法不会同时被多个线程执行。
- (2) `doRead` 方法可以被多个线程同时执行。

通过以上优化，文本变得更加清晰、连贯和专业。