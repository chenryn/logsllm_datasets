table related memory allocation. In contrast, the default allo-
cators always return a virtual address as a reference to newly
allocated page table memory. This small adjustment allows
us to obfuscate the location of page tables from user-level
attackers, because the kernel code operates on virtual addresses
when accessing page tables. Hence, at this stage, neither the
attacker nor the kernel itself can access the page tables. In
order to allow benign kernel code to still access the page tables,
we modify all kernel functions that access page table memory:
for each of these functions we convert the physical address to
a virtual address based on the randomization secret generated
in 1 .
However, during the early boot phase,
the kernel has
already saved references to the initial page tables in various
data structures. Since the initial tables were not allocated with
our modiﬁed allocator, the references contain obsolete virtual
addresses. To avoid a kernel crash, PT-Rand updates all these
references (virtual addresses) with the new physical address 3 .
To this end, every reference to page tables now contains
a physical address rather than a virtual address. Thus, the
attacker aiming to locate page tables by reading the designated
places of page table pointers [38] only retrieves physical
addresses. Since there is no direct correlation between physical
and virtual addresses, the attacker cannot use any leaked ref-
erences to infer the corresponding virtual address B . We also
implemented PT-Rand such that no intermediate computation
result that includes the randomization secret is ever written
into memory. Speciﬁcally, we instruct the compiler to keep
intermediate and the end result that include the randomization
secret in registers, and prevent them from getting spilled.
Our modiﬁed page table memory allocator also randomizes
any future page table allocations into the PT-Rand memory
Figure 2: Overview of the different components of PT-Rand.
region 4 . Further, we ensure that every physical memory
page that contains page table entries is unmapped from the 1:1
mapping. Hence, if the attacker discloses a physical address
of a page table pointer, she cannot exploit the 1:1 mapping
to read out page tables C . Finally, PT-Rand provides an
interface for the kernel to access and manage page tables 5 .
In particular, PT-Rand translates the physical addresses of page
table pointers to virtual addresses based on the randomization
offset.
C. Challenges
To enable PT-Rand we had to tackle a number of challenges
as we explain in the following. In Section V, we describe in
detail how we address each challenge.
Page Table Allocation. Page tables are data objects that are
dynamically allocated in the kernel. These objects are created
by the page allocator, which is a central, low-level service
in the kernel
that manages physical pages. To randomize
the memory pages where page tables are stored, we need to
determine and instrument all kernel functions that allocate page
tables.
Generating a Randomized Space. While the kernel needs
to be able to locate randomized pages for performing benign
changes, the attacker must not learn the new mapping. Con-
sequently, we need to provide high entropy to avoid simple
brute-force search. Furthermore, the new location of the page
tables must not collide with other existing mappings in the
virtual address space. This area must also be large enough to
hold the page tables of all the processes running on the system.
Page Table References. Memory disclosure vulnerabilities
allow the attacker to leak information about code and data
pointers. Even ﬁne-grained randomization schemes can be
undermined if the attacker can map a single pointer to an
instruction [48]. Hence, one of the main challenges in our
design is to ensure that all references to page tables and the
base address of the PT-Rand region are not leaked to the
attacker. For this, we need to locate all page table references
and replace them with physical addresses ( 3 in Figure 2).
Furthermore, we need to carefully handle benign page table
changes by the kernel. Typically, the kernel processes page
table pointers using virtual addresses on the kernel’s stack.
Since the stack is readable by the attacker, we need to provide
a new mechanism to prevent leakage of these pointers.
4
to physical addresses.
Handling of 1:1 Mapping. As we discussed in Section II,
the kernel maintains a 1:1 mapping for fast translation from
virtual
in Figure 2 removes the
page tables from this 1:1 mapping to prevent the attacker
from learning the page table location. However, removal of
page tables is not per-se possible. This is due to the fact that
the 1:1 mapping deploys so-called large pages of 2MB by
default. Hence, simply removing the page leads to deletion of
adjacent data not related to page tables. In addition, we need
to identify all functions that access page tables via the 1:1
mapping, and patch them to perform the translation based on
the randomization secret.
Translation of Physical Addresses. At run-time, the kernel
needs to repeatedly translate physical addresses to virtual
addresses, e.g., during a page walk or when creating a page
table entry. As we explained in Section II, this is efﬁciently
performed based on the 1:1 mapping. However, when PT-Rand
is in place, the kernel cannot use the 1:1 mapping anymore
to translate physical addresses of page tables, because PT-
Rand removed them from the 1:1 mapping. Consequently,
the kernel has to distinguish between physical addresses of
normal memory and physical addresses of page table memory
as each of them needs a different translation mechanism. This
distinction must be efﬁciently performed at run time to not
impede the system’s run-time performance.
V.
IMPLEMENTATION
Our design as presented in Section IV-B requires low-level
system modiﬁcations to the operating system kernel. We de-
cided to prototype PT-Rand for the open-source Linux kernel.
However, the concepts underlying our work on PT-Rand can
be integrated into other contemporary operating systems. To
this end, our kernel patch is comprised of 1382 insertions and
15 deletions across 45 source ﬁles.
Figure 3 shows how we integrate PT-Rand into the Linux
kernel. We create wrapper functions for the page table allocator
to randomize the virtual address of pages that contain page
table entries. If the wrapper function is called to allocate
memory which will be used to store page table entries, it
allocates the memory at a random address in the PT-Rand
region. The virtual address, pointing to this region, can only be
computed by adding the randomization secret, which is stored
in the third debug register. Pages for regular memory are still
allocated in the 1:1 mapping and their virtual addresses within
6
Random SourceVirtual MemoryPT-Rand Region1:1 MappingInitial Page Tables (constant address)Kernel DataPhysical AddressesABPT-RandAdversaryGenerate Randomization SecretBoot TimeRun TimeRelocate Existing Page TablesSubstitute Page Table PointersAllocate Page Table MemoryAccess Page Tables12345CCPUPriv-RegKernelFigure 3: We modify the virtual memory location of page
table pages by providing a randomization wrapper around
the standard page allocator in the kernel. While randomized
pages are removed from 1:1 mapping, regular page allocation
requests still fall within this region.
the 1:1 mapping are calculated by adding the base address
of the 1:1 mapping, called physmap in Linux, to the physical
address of the regular page.
We create wrapper functions for those kernel functions
that need to access page table memory. When the kernel
starts executing, the PT-Rand initialization function will ﬁrst
generate the randomization secret based on the standard kernel
function get_random_bytes(). We enable the kernel to
use the hardware-based random number generator (HW-RNG)
to avoid low entropy during boot time. Note, that since version
3.16 the Linux kernel incorporates the output of HW-RNGs for
generating random numbers by default1.
In the following, we present the implementation details
of PT-Rand according to the challenges we outlined in Sec-
tion IV-C.
A. Page Table Allocations
The main task of PT-Rand is to map memory which
contains page tables to a random location within the PT-Rand
region. Page table allocation involves two steps: (i) random-
ization of the initial pages, and (ii) randomization of memory
allocations which are used to store newly created page tables.
To complete the ﬁrst step, we need precise knowledge
of all existing references to the initial page tables, because
after randomization these references need to be updated. The
main challenge we faced is identifying all those references. To
tackle this challenge, we followed a pragmatic approach: we
reverse-engineered the kernel code execution after the location
of the initial page tables have been randomized. Since every
page table access based on an old reference leads to a kernel
crash, we could determine the point of execution and asso-
ciated kernel function which caused the crash. Thereafter, we
inspected the kernel’s source ﬁles and updated all references to
use our new base address. After updating all references, kernel
1 https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=
be4000
Figure 4: The x86_64 virtual memory map for Linux with four
level page tables.
execution continued normally. In our extensive evaluation on
different suites of benchmarks and complex software such
as the Chrome browser (see Section VI-B) we have not
experienced any kernel crashes.
To handle the second step, we extend the page table
management functions in the kernel. Speciﬁcally, we create a
wrapper function around the memory allocator for page tables.
This allows us to modify their return values, i.e., they return
physical addresses as a reference to the allocated memory
rather than virtual addresses. Since there is no relation between
physical and virtual memory addresses, the attacker cannot
infer the location in the virtual memory by leaking the physical
address.
We also create wrapper functions for every other kernel
function that interacts with page tables to translate page table
references (physical addresses) to virtual memory addresses
before accessing the page tables.
B. Generating a Randomized Area
In order to provide sufﬁcient protection against guessing
attacks we require a high randomization entropy. While 64 bit
architectures have a theoretical limit of 16EB of memory,
current hardware is limited to support 256TB resulting in 48 bit
randomization entropy.
The Linux kernel organizes the available virtual memory
into different regions. Figure 4 is taken from the Linux kernel
documentation [2] and reveals that the Linux kernel currently
does not use all of the available virtual memory. In particular,
we identiﬁed two memory holes of which each offers 1TB
(40 Bit) free memory. Our proof-of-concept implementation
of PT-Rand utilizes one of these holes for the PT-Rand region
to store the page tables. Note that such large holes will always
exist for 64 Bit systems due to the vast amount of available
virtual memory.
7
CPUDR3Virtual MemoryPT-Rand Region1:1 Mapping (physmap)Linux KernelPT-RandPage AllocatorMemory MapVirtual Memory ManagementRegular PagePage Table PagePhysical Address +Base Address of physmap (constant)Physical Address + DR3 (randomized)0x0000000000047 BitsAddressSizeUser SpacePurposehole caused by [48:63] sign extension0xffff800000043 BitsHypervisor0xffffc80000040 BitsPT-Rand (Hole)0xffffc90000045 Bitsvmalloc/ioremap0xffffe90000040 BitsHole0xffffea0000040 BitsMemory Mapunused hole0xffffec0000044 BitsKasanunused hole0xffffff0000039 BitsFixup Stacksunused hole0xffffffff800512MKernel Text0xffffffffa001525MModules0xffffffffff68Mvsyscalls0xffffffffffe2MHole0xffff880000043 Bits1:1 MappingC. Page Table References
E. Translation of Physical Addresses
As described in Section IV-A, the attacker can exploit
kernel vulnerabilities to read from and write to kernel memory.
However, these vulnerabilities do not allow the attacker to
access content stored in registers. Hence, we can securely
store the randomization secret into a dedicated register. For
our proof-of-concept, we chose the fourth debug register DR3.
We selected this register since it is only used for debugging
purposes. It is noteworthy to mention that application debug-
ging is still supported under PT-Rand. Typically, debuggers
can use software and hardware breakpoints. The former are
the default breakpoints and not affected by PT-Rand. For the
latter, we only use one of the four available hardware break-
points. Note that exploiting debugging facilities is a widely-
accepted strategy when building defenses, e.g., TRESOR [36]
or kBouncer [39]. Alternatively, we are currently exploring
the feasibility of deploying any of the so-called model-speciﬁc
registers (MSRs).
However, even though we store the base address in a
privileged register, certain events (e.g., function calls) can
spill temporary registers for several cycles to memory. As
recently shown, this short time window can be exploited to
undermine CFI checks [11]. PT-Rand tackles the attack by
instructing the compiler to never spill registers which contain
a randomized address. This is enabled by a GCC feature,
called explicit register variables, which will always keep local
variables in registers. However, given the complexity and many
optimization techniques deployed by modern compilers, we
can only guarantee that the above GCC compiler feature never
leaks accordingly ﬂagged variables, but not any intermediate
calculation results. As a consequence, we are currently work-
ing on a GCC compiler extension that explicitly clears any
intermediate results held in other registers.
D. Handling of 1:1 Mapping
The typical page size is 4KB. However, the kernel also
supports page sizes of 2MB or 1GB. In particular, for the Linux
kernel, the 1:1 mapping is conﬁgured to use 2MB pages by
default.
In PT-Rand, we rely on unmapping memory that contains
page tables from the 1:1 mapping. This becomes challenging
when 2MB pages are used because the page might contain
other data than page table memory that should not be removed
from the 1:1 mapping. We tackle this challenge by reconﬁgur-
ing the page size to 4KB pages at run time. However, in order
to split a 2MB page into 4KB pages, we need to previously
allocate 512 (i.e., 2MB divided by 4KB) new page table entries
within the 1:1 mapping. Note that the 4KB split up only affects
memory that contains page tables. For other memory parts,
the kernel will continue to use large pages. Our performance
evaluation in Section VI-B indicates that this change has no
impact on the overall performance. Next, we conﬁgure each
entry to map the corresponding memory of the 2MB page, and
adopt the permissions and other metadata. Finally, we update
the page table hierarchy to use the 4KB page tables entries
instead of the one 2MB entry. After the conversion, we can
relocate and delete only those 4KB pages that contained page
table entries.
Since the page tables are relocated by PT-Rand,
they
are no longer accessible through the 1:1 mapping. Hence,
as described in Section IV-C, the kernel has to utilize two
different mechanisms when translating physical addresses to
virtual addresses, namely one for physical addresses of pages
that contain page table entries, and another one to translate
physical addresses for non-page table related memory. Fortu-
nately, the kernel already keeps track of the properties of each
individual physical page in a dedicated data structure called