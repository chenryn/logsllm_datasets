apiVersion: apps/v1beta1
kind: Deployment
metadata:
 name: grafana
spec:
 replicas: 1
 template:
 metadata:
 labels:
 run: grafana
 spec:
 containers:
 - image: grafana/grafana
 name: grafana
 ports:
 - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
 name: grafana
spec:
 ports:
 - port: 80
 targetPort: 3000
 type: LoadBalancer
 selector:
 run: grafana
$ kubectl create -f grafana.yml 
deployment "grafana" created
service "grafana" created
$ kubectl get service
NAME         CLUSTER-IP       EXTERNAL-IP        PORT(S)        AGE
grafana      100.65.232.120   a5d97c8ef8575...   80:32111/TCP   11s
kubernetes   100.64.0.1                    443/TCP        13m
$ aws elb describe-load-balancers | grep a5d97c8ef8575 | grep DNSName
 "DNSName": "a5d97c8ef857511e7a6100edf846f38a-1490901085.us-east-1.elb.amazonaws.com",  
```
如你所见，ELB 已经被自动创建，域名系统是`a5d97c8ef857511e7a6100edf846f38a-1490901085.us-east-1.elb.amazonaws.com`，所以现在你可以在`http://a5d97c8ef857511e7a6100edf846f38a-1490901085.us-east-1.elb.amazonaws.com`访问格拉夫纳。
You may use `awscli` to update Route 53 to assign a `CNAME` such as `grafana.k8s-devops.net`. Alternatively, the Kubernetes incubator project `external-dns` ([https://github.com/kubernetes-incubator/external-dns)](https://github.com/kubernetes-incubator/external-dns)) can automate to update Route 53 in this situation.
![](img/00127.jpeg)
# L7 负载平衡器(输入)
从 kops 1 . 7 . 0 版本开始，它还没有开箱即用地设置入口控制器。但是，kops 提供了一些扩展 Kubernetes 特性的附加组件([https://github.com/kubernetes/kops/tree/master/addons](https://github.com/kubernetes/kops/tree/master/addons))。其中一个插件 ingress-nginx([https://github . com/kubernetes/kops/tree/master/addons/ingress-nginx](https://github.com/kubernetes/kops/tree/master/addons/ingress-nginx))使用 AWS ELB 和 nginx 的组合来实现 Kubernetes 入口控制器。
为了安装`ingress-nginx`插件，键入以下命令来设置入口控制器:
```
$ kubectl create -f https://raw.githubusercontent.com/kubernetes/kops/master/addons/ingress-nginx/v1.6.0.yaml
namespace "kube-ingress" created
serviceaccount "nginx-ingress-controller" created
clusterrole "nginx-ingress-controller" created
role "nginx-ingress-controller" created
clusterrolebinding "nginx-ingress-controller" created
rolebinding "nginx-ingress-controller" created
service "nginx-default-backend" created
deployment "nginx-default-backend" created
configmap "ingress-nginx" created
service "ingress-nginx" created
deployment "ingress-nginx" created
```
之后，使用节点端口服务部署 nginx 和 echoserver，如下所示:
```
$ kubectl run nginx --image=nginx --port=80
deployment "nginx" created
$ 
$ kubectl expose deployment nginx --target-port=80 --type=NodePort
service "nginx" exposed
$ 
$ kubectl run echoserver --image=gcr.io/google_containers/echoserver:1.4 --port=8080
deployment "echoserver" created
$ 
$ kubectl expose deployment echoserver --target-port=8080 --type=NodePort
service "echoserver" exposed
// URL "/" point to nginx, "/echo" to echoserver
$ cat nginx-echoserver-ingress.yaml 
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
 name: nginx-echoserver-ingress
spec:
 rules:
 - http:
 paths:
 - path: /
 backend:
 serviceName: nginx
 servicePort: 80
 - path: /echo
 backend:
 serviceName: echoserver
 servicePort: 8080
//check ingress
$ kubectl get ing -o wide
NAME                       HOSTS     ADDRESS                                                                 PORTS     AGE
nginx-echoserver-ingress   *         a1705ab488dfa11e7a89e0eb0952587e-28724883.us-east-1.elb.amazonaws.com   80        1m 
```
几分钟后，入口控制器将 nginx 服务和 echoserver 服务与 ELB 相关联。当您使用 URI“`/`”访问 ELB 服务器时，nginx 屏幕显示如下:
![](img/00128.jpeg)
另一方面，如果您访问同一个 ELB，但使用 URI“`/echo`”，它显示回声服务器如下:
![](img/00129.jpeg)
与标准的 Kubernetes 负载平衡器服务相比，一个负载平衡器服务消耗一个 ELB。另一方面，使用 nginx 入口插件，它可以将多个 Kubernetes 节点端口服务整合到单个 ELB 上。这将有助于更容易地构建您的 RESTful 服务。
# 存储类
正如我们在[第 4 章](04.html#3279U0-6c8359cae3d4492eb9973d94ec3e4f1e)、*中讨论的那样，使用存储和资源*，有一个`StorageClass`可以动态分配持久卷。Kops 将提供者设置为`aws-ebs`，它使用 EBS:
```
$ kubectl get storageclass
NAME            TYPE
default         kubernetes.io/aws-ebs 
gp2 (default)   kubernetes.io/aws-ebs 
$ cat pvc-aws.yml 
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 name: pvc-aws-1
spec:
 storageClassName: "default"
 accessModes:
 - ReadWriteOnce
 resources:
 requests:
 storage: 10Gi
$ kubectl create -f pvc-aws.yml 
persistentvolumeclaim "pvc-aws-1" created
$ kubectl get pv
NAME                                       CAPACITY   ACCESSMODES   RECLAIMPOLICY   STATUS    CLAIM               STORAGECLASS   REASON    AGE
pvc-94957090-84a8-11e7-9974-0ea8dc53a244   10Gi       RWO           Delete          Bound     default/pvc-aws-1   default                  3s  
```
这将自动创建 EBS 卷，如下所示:
```
$ aws ec2 describe-volumes --filter Name=tag-value,Values="pvc-51cdf520-8576-11e7-a610-0edf846f38a6"
{
 "Volumes": [
    {
      "AvailabilityZone": "us-east-1a", 
    "Attachments": [], 
      "Tags": [
       {
...
     ], 
    "Encrypted": false, 
    "VolumeType": "gp2", 
    "VolumeId": "vol-052621c39546f8096", 
    "State": "available", 
    "Iops": 100, 
    "SnapshotId": "", 
    "CreateTime": "2017-08-20T07:08:08.773Z", 
       "Size": 10
       }
     ]
   }
```
总体而言，AWS 的 Kubernetes 云提供商用于将 ELB 映射到 Kubernetes 服务，以及将 EBS 映射到 Kubernetes 持久卷。对 Kubernetes 使用 AWS 是一个很大的好处，因为不需要预先分配或购买物理负载平衡器或存储，只需随用随付；它为您的业务创造了灵活性和可扩展性。
# kops 维护 Kubernetes 集群
当您需要更改 Kubernetes 配置时，例如节点数量甚至 EC2 实例类型，kops 可以支持这种用例。例如，如果您想将 Kubernetes 节点实例类型从`t2.medium`更改为`t2.micro`，并且为了节省成本，还想将数量从 2 减少到 1，则需要修改 kops 节点实例组(`ig`)设置，如下所示:
```
$ kops edit ig nodes --name my-cluster.k8s-devops.net --state=s3://k8s-devops   
```
它启动 vi 编辑器，您可以按如下方式更改 kops 节点实例组的设置:
```
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
 creationTimestamp: 2017-08-20T06:43:45Z
 labels:
 kops.k8s.io/cluster: my-cluster.k8s-devops.net
 name: nodes
spec:
 image: kope.io/k8s-1.6-debian-jessie-amd64-hvm-ebs-2017- 
 05-02
 machineType: t2.medium
 maxSize: 2
 minSize: 2
 role: Node
 subnets:
 - us-east-1a  
```
在这种情况下，将`machineType`改为`t2.small`，将`maxSize` / `minSize`改为`1`，然后保存。之后，运行`kops update`命令应用设置:
```
$ kops update cluster --name my-cluster.k8s-devops.net --state=s3://k8s-devops --yes 
I0820 00:57:17.900874    2837 executor.go:91] Tasks: 0 done / 94 total; 38 can run
I0820 00:57:19.064626    2837 executor.go:91] Tasks: 38 done / 94 total; 20 can run
...
Kops has set your kubectl context to my-cluster.k8s-devops.net
Cluster changes have been applied to the cloud.
Changes may require instances to restart: kops rolling-update cluster  
```
正如您在前面的消息中看到的，您需要运行`kops rolling-update cluster`命令来反映现有的实例。将现有实例替换为新实例可能需要几分钟时间:
```
$ kops rolling-update cluster --name my-cluster.k8s-devops.net --state=s3://k8s-devops --yes
NAME              STATUS     NEEDUPDATE  READY MIN   MAX   NODES
bastions          Ready       0           1     1     1     0
master-us-east-1a Ready       0           1     1     1     1
nodes             NeedsUpdate 1           0     1     1     1
I0820 01:00:01.086564    2844 instancegroups.go:350] Stopping instance "i-07e55394ef3a09064", node "ip-10-0-40-170.ec2.internal", in AWS ASG "nodes.my-cluster.k8s-devops.net".  
```
现在 Kubernetes 节点实例已经从`2`减少到`1`，如下所示:
```
$ kubectl get nodes
NAME                          STATUS         AGE       VERSION
ip-10-0-36-157.ec2.internal   Ready,master   1h        v1.7.0
ip-10-0-58-135.ec2.internal   Ready,node     34s       v1.7.0  
```
# 摘要
在本章中，我们讨论了公共云。AWS 是最受欢迎的公共云服务，它提供了以编程方式控制 AWS 基础设施的应用编程接口。我们可以通过代码轻松实现自动化和基础设施。特别是，kops 让我们从头开始超快 AWS 和 Kubernetes 设置。Kubernetes 和 kops 开发都相当活跃。请继续监控这些项目，它们将在不久的将来有更多的功能和配置。
下一章将介绍**谷歌云平台** ( **GCP** )，这是另一种流行的公共云服务。**谷歌容器引擎** ( **GKE** )是托管的 Kubernetes 服务，使得使用 Kubernetes 变得更加容易。