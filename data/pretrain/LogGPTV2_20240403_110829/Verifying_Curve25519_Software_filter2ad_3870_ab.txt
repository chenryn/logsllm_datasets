Algorithm 2 Single Curve25519 Montgomery Ladderstep
function ladderstep(X1, X2, Z2, X3, Z3)
1
2
T1 ← X2 + Z2
T2 ← X2 − Z2
T7 ← T 2
T6 ← T 2
T5 ← T6 − T7
T3 ← X3 + Z3
T4 ← X3 − Z3
T9 ← T3 · T2
T8 ← T4 · T1
X3 ← (T8 + T9)
Z3 ← (T8 − T9)
3
3
X3 ← X 2
Z3 ← Z 2
Z3 ← Z3 · X1
X2 ← T6 · T7
Z2 ← 121666 · T5
Z2 ← Z2 + T7
Z2 ← Z2 · T5
return (X2, Z2, X3, Z3)
end function
The biggest diﬀerence between the two Curve25519 im-
plementations of Bernstein et al. presented in [13, 14] is
the representation of elements of F
2255−19. Both implemen-
tations have the core part, the Montgomery ladder step, in
fully inlined, hand-optimized assembly. These core parts are
what we target for veriﬁcation in this paper.
3. ARITHMETIC IN F2255−19 FOR AMD64
Arithmetic in F
2255−19 means addition, subtraction, mul-
tiplication and squaring of 255-bit integers modulo the prime
p = 2255 − 19. No mainstream computer architecture oﬀers
arithmetic instructions for 255-bit integers directly, so op-
erations on such large integers must be constructed from
instructions that work on smaller data types. The AMD64
architecture has instructions to add and subtract (with and
without carry/borrow) 64-bit integers, and the MUL instruc-
tion returns the 128-bit product of two 64-bit integers, al-
ways in general-purpose registers rdx (higher half) and rax
(lower half).
3013(cid:88)
Section 3 of [13] describes two diﬀerent approaches to
implement Fp arithmetic in AMD64 assembly. Both ap-
proaches use the 64-bit-integer machine instructions. They
are diﬀerent in the representation of elements of Fp, i.e.,
they decompose the 255-bit ﬁeld elements into smaller pieces
which ﬁt into 64-bit registers in diﬀerent ways. We now re-
view these approaches and highlight the diﬀerences that are
most relevant to veriﬁcation.
3.1 Arithmetic in radix-264 representation
The obvious representation of an element X ∈ Fp (or any
256-bit number) with 64 bit integers is radix 264. A 256-
bit integer X is represented by 4 64-bit unsigned integers
(x0, x1, x2, x3), where the limbs xi ∈ {0, . . . , 264 − 1} and
X =
xi264i = x0 + 264x1 + 2128x2 + 2192x3.
i=0
We will focus our description on the most complex Fp op-
eration in the Montgomery ladder step, which is multiplica-
tion. Squaring is like multiplying, except that some partial
results are known to be the same and computed only once.
Addition and subtraction are straight forward and multipli-
cation by a small constant simply foregoes computation of
results known to be zero. Multiplication in Fp consists of
two steps: multiplication of two 256-bit integers to produce
a 512-bit intermediate result S, and reduction modulo 2p to
obtain a 256-bit result R. Note that the software does not
perform a full reduction modulo p, but only requires that
the result ﬁts into 256 bits. Only the very ﬁnal result of the
Curve25519 computation has to be fully reduced modulo
2255 − 19.
Multiplication of 256-bit integers. The approach for
multiplication in radix-264 chosen by [13] is a simple school-
book approach. Multiplication of two 256-bit integers X and
Y can be seen as a 4-step computation which in each step
involves one limb of Y and all limbs of X as follows:
A0 = Xy0,
A1 = 264Xy1 + A0,
A2 = 2128Xy2 + A1,
S = A3 = 2192Xy3 + A2.
(1)
Each step essentially computes and accumulates the 5-
limb partial product Xyi with 4 64 × 64-bit multiplications
and several additions as (x0yi+264x1yi+2128x2yi+2192x3yi).
Note that “multiplications by 264” are free and only deter-
mine where to add when summing 128-bit products. For
example, the result of x0yi is in two 64-bit registers t0 and
t1 with x0yi = 264t0 + t1, therefore t1 needs to be added
to the lower result register of x1yi which in turn produces a
carry bit which must go into the register holding the higher
half of x1yi. Instructions adding Ai−1 into Ai also produce
carry bits that need to be propagated through the higher
limbs.
Handling the carry bits, which occur inside the radix-264
multiplication, incurs signiﬁcant performance penalties on
some microarchitectures as detailed in [13]. Sec. 6 will ex-
plain why integrated multiplication and handling of carry
bits also constitutes a major obstacle for formal veriﬁcation.
Modular reduction. The multiplication of the two 256-
4(cid:88)
bit integers X and Y produced a 512-bit result in S =
(s0, . . . , s7). As 2256 = 2p + 38, the [13] code repeatedly
reduces modulo 2p to ﬁt the result into 256 bits. The reduc-
tion begins by computing
S(cid:48) =
(s0 + 264s1 + 2128s2 + 2192s3)+
38(s4 + 264s5 + 2128s6 + 2192s7)
with a 5-limb result S(cid:48) = (s(cid:48)
2256s(cid:48)
bits. A subsequent step computes
4). Note that s(cid:48)
0 + 264s(cid:48)
1 + 2128s(cid:48)
3 +
4, the highest limb of S(cid:48), has at most 6
2 + 2192s(cid:48)
(cid:48)(cid:48)
S
= (s
(cid:48)
0 + 264s
(cid:48)
1 + 2128s
(cid:48)
2 + 2192s
(cid:48)
(cid:48)
3) + 38s
4.
The value S(cid:48)(cid:48) = (s(cid:48)(cid:48)
0 + 264s(cid:48)(cid:48)
still have 257 bits, i.e., s(cid:48)(cid:48)
4-limb result R is obtained as
1 + 2128s(cid:48)(cid:48)
4 ) may
4 is either zero or one. The ﬁnal
2 + 2192s(cid:48)(cid:48)
3 + 2256s(cid:48)(cid:48)
(cid:48)(cid:48)
0 + 264s
R = (s
(cid:48)(cid:48)
1 + 2128s
(cid:48)(cid:48)
(cid:48)(cid:48)
(cid:48)(cid:48)
2 + 2192s
3 ) + 38s
4 .
3.2 Arithmetic in radix-251 representation
Due to the performance penalties in handling carries, [13]
proposes to represent elements of Fp in radix 251, i.e., X ∈
Fp is represented by 5 limbs (x0, . . . , x4) as
X =
xi251i = x0 + 251x1 + 2102x2 + 2153x3 + 2204x4.
i=0
Every element of Fp can be represented with all xi ∈
[0, 251 − 1]; however, inputs, outputs, and intermediate re-
sults inside the ladder step have relaxed limb-size restric-
tions. For example, inputs and outputs of the ladder step
have limbs in [0, 251 + 215]. For the inputs to the ﬁrst it-
eration this is ensured by C code which is not part of the
veriﬁcation, but which has been extensively tested. The
inputs of all other iterations are outputs of the previous it-
eration, so we verify that this property holds for outputs of
the ladder step. Additions are done limbwise, e.g., after the
ﬁrst operation T1 ← X2 + Z2, the limbs of T1 have at most
53 bits. Subtractions are done by ﬁrst adding a multiple of
p guaranteed to exceed the subtrahend limbwise. For exam-
ple, all limbs of the inputs of the subtraction T2 ← X2 − Z2
are in [0, 251 + 215] (see above). Subtraction is performed by
ﬁrst adding 0xFFFFFFFFFFFDA to the lowest limb of X2 and
0xFFFFFFFFFFFFE to the four higher limbs of X2, and then
subtracting corresponding limbs of Z2. The value added is
2p, which does not change the result (as element of Fp), yet
ensures that all limbs of the result T2 are positive and have
at most 53 bits.
The most complex operation—multiplication—is split in
two parts, but these now diﬀer from those of Sec. 3.1. The
ﬁrst step performs multiplication and modular reduction;
the second step performs the delayed carries.
Multiply-and-Reduce. To multiply X = x0 + 251x1 +
2102x2 + 2153x3 + 2204x4 and Y = y0 + 251y1 + 2102y2 +
2153y3 + 2204y4, start by precomputing 19y1, 19y2, 19y3 and
19y4, then compute 5 intermediate values t0, . . . , t4, where
each ti =
is a pair of 64-bit
i + 264 t(h)
:= t(l)
, t(h)
(cid:16)
(cid:17)
i
t(l)
i
i
302registers, with
t0 := x0y0 + x1(19y4) + x2(19y3) + x3(19y2) + x4(19y1),
t1 := x0y1 + x1y0 + x2(19y4) + x3(19y3) + x4(19y2),
t2 := x0y2 + x1y1 + x2y0 + x3(19y4) + x4(19y3),
t3 := x0y3 + x1y2 + x2y1 + x3y0 + x4(19y4),
t4 := x0y4 + x1y3 + x2y2 + x3y1 + x4y0.
(2)
All partial results in this computation are signiﬁcantly smaller
than 128 bits. For example, when 0 ≤ xi, yi < 254 (input
limbs are at most 54-bits), 0 ≤ t0, t1, t2, t3, 19t4 < 95· 2108 <
2115. Accumulation of each multiplication result can thus be
achieved by two 64-bit adds (one ADD, one ADC carry) where
all carries are absorbed in the “free” bits in each t(h)
Now X · Y = T = t0 + 251t1 + 2102t2 + 2153t3 + 2204t4, but
the two-register values ti are still much too large to be used
in subsequent operations and need to be carried.
.
i
i
Delayed carry. Carrying from the 2-register value ti to
ti+1 is done as follows: Shift t(h)
to the left by 13 and shift
the 13 high bits of t(l)
into the 13 low bits of the result
i
(which is achieved in just one SHLD instruction). Now set
to zero (logical AND with 251 − 1).
the high 13 bits of t(l)
i
Now do the same shift-by-13 operation on t(h)
i+1 and t(l)
i+1, set
the high 13 bits of t(l)
to t(l)
i+1 and discard
t(h)
. This carry chain is performed from t0 through t4; then
i
t(h)
is multiplied by 19 (using a single-word MUL) and added
4
to t(l)
0 .
i+1 to zero, add t(h)
1 , t(h)
Note: To avoid losing bits in the shift-by-13, t(h)
2 ,
3 , and 19t(h)
t(h)
(note the the multiply by 19 at the end) must
all be at most 51 bits (that is, < 251) before that carrying
begins. This condition is met, guaranteeing no overﬂows, if
limbs of X and Y are at most 54 bits as noted above.
0 , t(h)
4
i
This ﬁrst step of carrying yields XY = t(l)
4 , but the values in t(l)
2102t(l)
too big as subsequent operands.
2 + 2153t(l)
3 + 2204t(l)
0 + 251t(l)
1 +
i may still be
The second round of carries starts by copying t(l)
0
register t, shifts t to the right by 51, adds t to t(l)
1
discards the upper 13 bits of t(l)
way from t(l)
1
t(l)
4 . Finally t(l)
4
is added to t(l)
0 . The ﬁnal result is thus obtained in
to a
and
0 . Carrying continues this
to t(l)
2 , from t(l)
to
is reduced in the same way except that 19t
3 , and from from t(l)
to t(l)
2
3
R = (t(l)
0 + 251t(l)
1 + 2102t(l)
2 + 2153t(l)
3 + 2204t(l)
4 ).
4. BACKGROUND
Recall that in our approach, a qhasm program annotated
with input assumptions and expected properties is split into
smaller programs with their own input assumptions and re-
quired properties. Such splits are based on compositional
reasoning in Hoare logic with the help of midconditions.
These smaller annotated qhasm programs are then translated
to SMT formulas and veriﬁed by the SMT solver Boolec-
tor. For algebraic properties such as modular congruence
that are hard for SMT solvers, we rely on the proof assistant
Coq. In the following of this section, we describe some back-
ground about qhasm, Hoare logic, Boolector, and Coq.
4.1 Portable assembly: qhasm
The software we are verifying has not been written directly
in AMD64 assembly, but in the portable assembly language
qhasm developed by Bernstein [9]. The aim of qhasm is to
reduce development time of assembly software by oﬀering a
uniﬁed syntax across diﬀerent architectures and by assisting
the assembly programmer with register allocation. Most im-
portantly for us, one line in qhasm translates to exactly one
assembly instruction. Also, qhasm guarantees that “register
variables” are indeed kept in registers. Spilling to memory
has to be done explicitly by the programmer.
Verifying qhasm code. The Curve25519 software we veri-
ﬁed is publicly available as part of the SUPERCOP bench-
marking framework [10], but does not include the qhasm
source ﬁles, which we obtained from the authors. Our veri-