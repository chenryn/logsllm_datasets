If more time is required, the process is probably too heavy.
小规模、频繁的部署将最大限度地降低破坏生产环境的风险。在某些特殊情况下，常规流程可能会很慢，应使用紧急程序。
# 紧急放行
让我们假设生产中有一个关键的 bug，需要尽快解决。对于这些特殊情况，事先定义一个应急流程是可以的。
这个紧急过程可能包括加快审核速度，甚至完全跳过审核。这可能包括跳过中间版本(例如不提前部署到演示环境)。确保明确定义何时需要该流程，并确保仅在紧急情况下使用。
If your regular deployment process is fast enough, then there's no need for an emergency process. This is an excellent reason to try to increase deployment times.
回滚是这种情况的一个很好的例子。恢复上一个版本中引入了关键错误的微服务的部署，只在生产中回滚并返回到上一个版本，而不影响其他任何东西，是一个合理的过程。
请注意，在这里，我们是如何在保证已回滚的版本之前已经部署的情况下降低进行快速更改的风险的。这是一个很好的例子，说明了紧急程序是如何工作和降低风险的。
在发现异常情况时，运用你的常识，并事先与你的团队讨论如何处理它们。我们将在[第 12 章](12.html)、*中讨论跨团队协作和沟通。*
# 频繁发布并添加功能标志
正如我们刚刚看到的，虽然回滚是可能的，但普遍的共识应该是每个新部署都向前推进。新版本的代码包含以前版本的代码，以及一些小的更改。按照 Git 的操作方式，我们在一个被推进的分支(主分支)上工作。
这意味着必须避免几个活跃的长寿命分支。这种模式被称为*基于主干的开发*，这是推荐的以持续集成为目标的工作方式。在基于主干的开发中，特征分支是短暂的，并且总是与主分支(或主干)合并，这在 Git 中通常被称为`master`。
Trunk-based development avoids issues when we have long-lived branches that diverge from the main one, thus making the integration of several components complicated. The basis for continuous integration is to be able to always have code that can be released in small increments. This model takes "trunk" as the reference for the releases.
在下图中，我们可以看到**特征 A** 是如何合并到**主**分支的，以及**特征 B** 是如何仍在进行的。任何发布将来自**主**分支:
![](img/2dab7dbb-586a-4dea-a959-14ba5beea981.png)
如果**特性 A** 引入了一个 bug，一个新的 bug 修复分支将从**主模块**分支出来，并将被合并回来。注意结构是如何继续前进的。
为了让这个系统工作，特性分支需要是短暂的——通常只有几天。这使得合并变得容易，并允许小的增量变化，这是持续集成的关键。
# 使用特征标志
有时候，有些特性，从设计上来说，需要一次完成大的/剧烈的改变，比如一个新的用户界面。持续集成提倡的那种缓慢添加小特性的快速迭代周期在这些频繁发布的情况下是行不通的。新界面需要一次性包含所有元素，否则看起来会很奇怪。
当您希望以小的增量方式继续工作时，您可以使用功能标志，同时将功能的激活延迟到它准备好之后。
功能标志是启用或禁用特定功能的配置元素。这允许您通过配置更改来更改微服务的行为，它充当开关。
In Kubernetes, we use the `deployment.yaml` file to describe the environment variables, as well as ConfigMaps. We will discuss ConfigMaps in [Chapter 11](11.html), *Handling Change, Dependencies, and Secrets in the System*.
配置与每个单独的环境相关联。这使得我们有可能在一个特定的环境中呈现一个特性，而不是在另一个环境中，同时代码库保持不变。
例如，一个新的接口可以在一个特性标志下慢慢开发和保护。有些环境，如演示环境，仍然可以是活动的，以便收集内部反馈，但这不会显示在生产环境中。
一旦新界面准备好，就可以进行小的修改；例如，我们可以更改配置参数来启用它。这在外部看起来可能是一个很大的变化，但是如果我们换回参数，它很容易被还原。
Feature flags are useful when we're dealing with externally accessible services. Internal services can add more features without any issue since they'll only be called by other microservices in the system.
Internal microservices are normally okay with adding new features. Here, backward compatibility is respected. Externally accessible features sometimes require us to replace a feature with another for reasons including interface changes or the deprecation of products.
一个相关的方法是将一个特性滚动到用户子集。这可以是一组预定义的用户，例如已经注册测试计划以获得对功能的早期访问权的用户，或者是一个随机样本，以便他们可以在全球发布之前及早发现问题。
Some big companies use regional access as well, where some features are enabled in certain countries first.
一旦特性标志被激活，任何不推荐使用的特性都可以被移除和清理，所以没有旧代码不会被使用。
# 处理数据库迁移
数据库迁移是对存储在特定环境(通常是一个或多个数据库)中的持久数据所做的更改。大多数情况下，这意味着更改数据库模式，但也有其他情况。
The data in a production environment is the most important asset in a running system. Extra care is advised for database migrations.
In certain cases, a migration may lock a table for a certain period of time, thereby rendering the system unusable. Ensure that you test your migrations properly in order to avoid or at least prepare for these cases.
虽然数据库迁移在技术上可能是可逆的，但是这样做在开发时间方面非常昂贵。例如，添加和删除列可能很简单，但是一旦该列开始运行，该列将包含不应删除的数据。
为了能够在数据迁移的情况下无缝工作，您需要将其从将要调用它的代码中分离出来，并按照以下步骤操作:
1.  以不干扰当前代码的方式设计数据库迁移。例如，向数据库添加表或列是安全的，因为旧代码会忽略它。
2.  执行数据库迁移。这将在现有代码保持不间断运行的同时进行所需的更改。
3.  现在，代码可以部署了。一旦部署完成，它将开始使用新数据库定义的优势。如果有问题，代码可以回滚到以前的版本。
这意味着我们需要创建两个部署:
*   一个用于迁移
*   另一个是使用这种迁移的代码
Migration deployment may be similar to code deployment. Maybe there's a microservice running the migrations, or maybe it's a script doing all the work. Most frameworks will have a way of making migrations to ensure that a migration isn't applied twice.
For example, for SQLAlchemy, there's a tool called Alembic ([https://alembic.sqlalchemy.org/en/latest/](https://alembic.sqlalchemy.org/en/latest/)) that we can use to generate and run migrations.
但是，还有一种替代操作:尝试将迁移应用到将使用它们的微服务。在处理生产环境时，这是一个坏主意，因为无论是否正在进行迁移，这都会减慢所有情况下的启动时间。此外，它不会检查代码是否可以安全地回滚并与数据库的早期版本一起工作。
使用两个独立的部署显然比自由地更改数据库要严格一些，但是它确保了每一步都是坚实的，并且服务是不间断的。比较刻意。例如，要重命名一个列，我们需要执行以下步骤:
1.  首先，我们将部署一个迁移，用新的列名创建一个新的列，从而复制旧列中的数据。代码从旧列读取和写入。
2.  然后，我们将部署从旧列读取并写入两者的新代码。在发布过程中，从旧代码到旧列的任何写入都将被正确读取。
3.  之后，我们将创建另一个迁移，将数据从旧的迁移复制到新的迁移。这可确保正确应用任何临时副本。此时，任何新数据仍会同时进入两列。
4.  然后，我们将部署读写新列的代码，忽略旧列。
5.  最后，我们将实现一个迁移来删除旧的列。此时，旧列不包含相关数据，可以安全删除。不会影响代码。
这是一个长过程的故意的例子，但是在大多数情况下，这样长的过程是不需要的。然而，在这些步骤中，没有任何一点是不一致的。如果其中一个阶段出现问题，我们可以回到上一个阶段——在修复到位之前，它仍然有效。
主要目标是避免数据库无法与当前部署的代码一起工作的短暂状态。
# 摘要
在本章中，我们讨论了团队的流程，从开始一项新功能到将其部署到生产环境中。
我们首先讨论了在微服务架构中工作时功能请求的要点。我们引入了影响多个微服务的请求，并学习了如何组织工作，以便服务不会被中断。
我们讨论了构成一个好的审查和批准过程的要素，以及 GitHub 拉取请求如何帮助我们做到这一点。使用 GitOps 实践来控制基础设施使得部署的审查变得简单明了。
然后，我们讨论了与 Kubernetes 和 GitOps 的合作如何帮助我们创建多个环境，以及在处理演示和试运行环境以测试部署以及在投入生产前在受控环境中展示功能时，我们如何利用它们来发挥我们的优势。
在这之后，我们讨论了如何让一个团队拥有整个生命周期的全局视图，从功能请求到部署，并能够快速遵循完整的路径。我们学习了如何阐明这些步骤，以及如何让团队负责审查和批准自己的代码，这允许开发人员完全掌控开发周期。
我们还讨论了在处理数据库迁移时可能出现的问题，并解释了如何继续这种不容易回滚的特殊部署。
在下一章中，我们将讨论实时系统，以及如何启用指标和日志等元素，以便我们能够检测生产环境中出现的问题和错误，并获得足够的信息来尽可能快速、主动地修复它们。
# 问题
1.  当一个新的业务特性被接收时，我们需要在微服务架构下的系统中执行什么分析？
2.  如果一个特性需要更改两个或更多的微服务，我们如何决定先更改哪个？
3.  Kubernetes 如何帮助我们设置多个环境？
4.  代码审查是如何工作的？
5.  代码评审的主要瓶颈是什么？
6.  在 GitOps 原则下，部署的评审和代码评审是不同的吗？
7.  为什么一旦一个特性准备好合并到主分支中，就要有一个清晰的部署路径？
8.  为什么数据库迁移不同于常规代码部署？
# 进一步阅读
要了解更多关于敏捷实践的知识并将其介绍给团队，请阅读以下书籍:
*   *敏捷开发人员手册*(T2)
*   *提炼出的敏捷技术实践*([https://www . packtpub . com/eu/business-other/Agile-技术实践-提炼出的](https://www.packtpub.com/eu/business-other/agile-technical-practices-distilled))
如果你在你的组织中使用 JIRA，阅读*与 JIRA 一起实践敏捷软件开发*([https://www . packtpub . com/eu/application-Development/Hands-Agile-Software-Development-jira](https://www.packtpub.com/eu/application-development/hands-agile-software-development-jira))可以帮助你在使用敏捷实践时更好地利用工具。