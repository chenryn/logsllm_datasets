title:Labeled PSI from Fully Homomorphic Encryption with Malicious Security
author:Hao Chen and
Zhicong Huang and
Kim Laine and
Peter Rindal
Labeled PSI from Fully Homomorphic Encryption
with Malicious Security
Hao Chen1, Zhicong Huang2, Kim Laine1, and Peter Rindal3
2 ´Ecole Polytechnique F´ed´erale de Lausanne, Lausanne, Switzerland
1 Microsoft Research, Redmond, WA
3 Oregon State University, Corvallis, OR
Abstract. Private Set Intersection (PSI) allows two parties, the sender and the receiver, to compute
the intersection of their private sets without revealing extra information to each other. We are interested
in the unbalanced PSI setting, where (1) the receiver’s set is signiﬁcantly smaller than the sender’s, and
(2) the receiver (with the smaller set) has a low-power device. Also, in a Labeled PSI setting, the sender
holds a label per each item in its set, and the receiver obtains the labels from the items in the inter-
section. We build upon the unbalanced PSI protocol of Chen, Laine, and Rindal (CCS 2017) in several
ways: we add eﬃcient support for arbitrary length items, we construct and implement an unbalanced
Labeled PSI protocol with small communication complexity, and also strengthen the security model us-
ing Oblivious Pseudo-Random Function (OPRF) in a pre-processing phase. Our protocols outperform
previous ones: for an intersection of 220 and 512 size sets of arbitrary length items our protocol has a
total online running time of just 1 second (single thread), and a total communication cost of 4 MB.
For a larger example, an intersection of 228 and 1024 size sets of arbitrary length items has an online
running time of 12 seconds (multi-threaded), with less than 18 MB of total communication.
1 Introduction
1.1 Private Set Intersection
Private Set Intersection (PSI) is a secure computation protocol that allows two parties, the sender
and the receiver, to compute the intersection of their private sets X and Y with pre-determined
sizes, such that the receiver only learns X ∩ Y from the interaction and the sender learns nothing.
PSI has a long history, and motivating use-cases have ranged from two companies ﬁnding com-
mon customers, to private contact discovery [37], and to validate password leaks [1].
Unbalanced PSI Most of the work on PSI has been designed for the balanced case, where the two sets
are roughly of equal size, and the two parties have similar computation and storage capabilities.
These protocols typically perform only marginally better when one of the sets is much smaller
than the other. In particular, their communication cost scales at least linearly with the size of
the larger set. In certain applications, however, the receiver’s set may be much smaller than the
sender’s. The receiver might be a mobile device with limited battery, computing power, and storage,
whereas the sender could be a high-end computing device. Moreover, the bandwidth between the
receiver and sender might be limited. This motivates the study of unbalanced PSI, where one set is
much larger than the other. There have recently been several proposals optimizing for unbalanced
PSI [12,44,47]. Among these works [12] achieves the smallest overall communication complexity,
namely O(|Y | log |X|), where X denotes the sender’s set and Y the receiver’s set, and |X| (cid:29) |Y |.
However, their results were limited to 32-bit items due to the signiﬁcant performance overhead
of extending to longer items. In this work we improve their protocol in terms of functionality,
performance, and the security model.
Labeled PSI In certain applications, the sender holds a label (cid:96)i for each item xi in its set, and
we wish to allow the receiver to learn the labels corresponding to the items in the intersection.
In other words, the receiver should learn {(xi, (cid:96)i) : xi ∈ Y } as a result of the protocol execution.
When the receiver’s set Y consists of a single element, this is equivalent to the (single-server variant
of) Private Information Retrieval (PIR) by keywords problem, considered ﬁrst by [18]. For ease of
exposition, we will stick to the concept of Labeled PSI in the rest of the paper, noting that it is
equivalent to a batched single-server symmetric PIR by keywords.
Labeled PSI has some immediate practical applications to private web service queries. For
example, querying stock prices, location speciﬁc information, travel booking information, or web
domain name information can reveal information to the service providers allowing them to conduct
highly targeted price discrimination [40], or to obtain sensitive personal or business information.
Another example is a variant the private contact discovery problem [37], where a user wishes to
retrieve a public key for every person in her contact list who has registered to an instant messaging
service for peer-to-peer communication. In this regard, Labeled PSI can provide the necessary
functionality while guaranteeing query privacy.
1.2 Fully Homomorphic Encryption
Fully Homomorphic Encryption (FHE) is a form of encryption that allows arbitrary (Boolean or
arithmetic) circuits to be evaluated directly on encrypted data without requiring access to the
decryption key [49,24,9,10,7,22,8,26,17,13]. The result of such an encrypted evaluation remains
encrypted, and can be recovered by the party holding the decryption key. While FHE is still far
from being a generic solution to computation over encrypted data, it can be possible to achieve
good performance in speciﬁc scenarios, e.g. evaluating the AES circuit [25], computing edit distance
on DNA sequences [16], and training logistic regression models [34].
One of the fundamental realizations on the path to improved performance was that in many
cases so-called leveled FHE suﬃces, where the parameters of the encryption scheme are chosen to
allow only circuits of a pre-determined multiplicative depth to be evaluated. Thus, for performance
reasons, we only use leveled FHE in this work, and for simplicity we will sometimes drop the
“leveled” preﬁx.
There are several FHE implementations that are publicly available. We chose to use the ho-
momorphic encryption library SEAL4, which implements the variant of [4] of the Brakerski/Fan-
Vercauteren (BFV) scheme [22].
FHE parameters and the cost model The core parameters of the BFV scheme are three integers:
n, q, and t.5 We set the parameters to always achieve at least a 128-bit security level according to
the recommendations provided in [11]. In order to compare diﬀerent parameter choices, we need
to provide some rough cost estimates for basic operations in SEAL. The size of each ciphertext
is 2n log q bits, and the size of the underlying plaintext is n log t bits. In terms of computation, a
multiplication between two ciphertexts takes O(n log n(log q)2) bit operations, whereas a ciphertext-
plaintext multiplication takes O(n log n log q) bit operations (see e.g. [4]),
1.3 Our Contributions
At a high level, our contributions can be summarized as follows:
4 Version 2.3.0-4 downloaded from http://sealcrypto.org
5 Another important parameter is the error width σ for which we use the SEAL default value 3.19.
– We use an OPRF preprocessing phase to achieve improved performance and security over [12].
In particular, We achieve full simulation-based security against a malicious receiver, improving
upon [12] which achieves security in the semi-honest model.
– We build upon [12] to support arbitrary length items by implementing a modiﬁed version of
the generalized SIMD encoding algorithm of [27].
– We extend our protocol to achieve Labeled PSI with small communication complexity. We then
apply Labeled PSI to provide improved security against a malicious sender.
First, we improve upon the protocol of [12] by leveraging a pre-processing phase, where the parties
apply an Oblivious PRF (OPRF) to their input items. This change has two eﬀects:
(i) The sender no longer needs to perform an expensive noise ﬂooding operation on the result ci-
phertexts, as was necessary in [12]. This allows the implementation to utilize more eﬃcient FHE
parameters, which further improves our performance and adds ﬂexibility to the parametrization.
(ii) The pre-processing phase allow us to argue that our protocol is secure against a malicious
receiver. In particular, we show that after the pre-processing phase the simulator can extract
the receiver’s set and successfully simulate the rest of the protocol. We show that this pre-
processing can either be performed using exponentiation [31,47] or oblivious transfer [42,36].
Crucially, the former allows the sender to perform the pre-processing only once and reuse it over
many protocol executions, which signiﬁcantly improves performance in an amortized setting,
e.g. in private contact discovery.
Second, all examples in [12] were limited to performing comparisons of 32-bit items, whereas
applications usually require longer items such as phone numbers, names, or public keys. The obvi-
ous extension of their protocol to ﬁt larger items has suboptimal performance due to the signiﬁcant
performance overhead from using larger FHE parameters. We overcome this limitation by imple-
menting a “lazy” version of the generalized SIMD encoding algorithm used in the HElib library [27],
which allows encrypting fewer but longer items into a single ciphertext without requiring the FHE
parameters to be increased.
Our third contribution is the design and implementation of a protocol for Labeled PSI. The
challenge in this setting is how to allow the receiver to learn a label (cid:96)i for each item xi ∈ X∩Y , while
still keeping the communication sublinear in |X|. Although many existing PSI protocols [47,44] can
perform this functionality with a simple modiﬁcation (encrypt the labels under their respective
OPRF value), all of them fall short on the requirement that the communication be sublinear in
the larger set. We propose a method which is similar to the original [12] protocol, except that
the sender evaluates an additional polynomial which interpolates the labels. When these labels are
appropriately masked, the receiver will be able to recover the label for exactly the items in the
intersection.
Fourth, we discuss how a variant of Labeled PSI can be leveraged to achieve a reasonable
notion of security against a malicious sender. For example, the protocol of [12] suﬀers from an
attack where the sender can force the receiver to output its full set Y . In our protocol the receiver
will output X∩Y ∩leakage((cid:98)Y ), where leakage is speciﬁed by the malicious sender and is constrained
in a reasonable way, and (cid:98)Y denotes a hashing of the set Y (see Section 7.3). The high-level idea
is to perform Labeled PSI where the label for an item z is H(z) for some hash function H. We
argue that the only eﬃcient way for the sender to return the expected label for a receiver’s item
y ∈ Y is to have the set X contain the item y. The exact assumption we make is that the sender
can not homomorphically compute an encryption of H(y) given an encryption of y and some pre-
determined list of encryptions of powers of y, when H is a suﬃciently complex hash function. The
validity of this assumption depends on the diﬃculty of using leveled FHE to evaluate a circuit of
depth higher than the pre-determined upper bound. Any eﬃcient attack on this assumption would
likely represent a very signiﬁcant advancement in the state-of-the-art.
Fifth, we demonstrate how the output of the PSI computation can be secret-shared between
the parties. This immediately allows for generic computation on the intersection using any general
purpose MPC protocol. The idea behind this extension is for the sender to add an additional random
value to all of the returned ciphertexts. When the receiver decrypts them the two parties will hold
an additive sharing of the comparison results. From such a sharing additional computation can be
performed on the intersection. For example, the cardinality of the intersection, or the sum of the
labels can be computed.
1.4 Related Work
Unbalanced PSI As previously described, our protocol can be seen as a descendant of the of the
FHE-based protocol of [12]. Due to the large overlap with our protocol, we delay a review of this
work to Section 2 where a detailed description is provided.
Another closely related work is that of Resende et al. [47], which optimizes the communica-
tion overhead of PSI when the sender has a signiﬁcantly larger set than the receiver. The cen-
tral technique of their protocol is to apply an OPRF to the receiver’s set to obtain a new set
Y (cid:48) = {OPRFk(Y ) : y ∈ Y }. Here the sender holds the key k and can locally apply the OPRF to
its set to obtain X(cid:48) = {OPRFk(x) : x ∈ X}. To reduce communication, the sender compresses the
set X(cid:48) before forwarding it to the receiver. While this compression does reduce the communication,
it remains linear in the size of the larger set, and can introduce false positives. That is, with high
compression rates the receiver outputs an element in Y \ X with non-negligible probability.
Another work following a similar framework as [47] is that of Kiss et al. [35]. The main diﬀerence
between these protocols is in the choice of the OPRF and the compression technique. [47] uses
a Diﬃe-Hellman based OPRF, while [35] uses garbled circuits to obliviously evaluate the AES
function. This alteration signiﬁcantly improves the computational work required by the sender to
apply the OPRF to its set at the expense of increased communication and computation when the
OPRF is applied to the receiver’s set. The second diﬀerence is that [35] uses a more conservative
compression technique and parameters, which do not introduce a signiﬁcant false positive rate.
PSI with Computation Being able to compute functions on the intersection without revealing
intermediate results, or even the intersection, is often a desirable property. For instance, [30] built
a PSI-SUM protocol, which returns a weighted sum of all items in the intersection. This protocol
is currently being used by Google to compute ad revenue conversion rates.
Pinkas et al. [44] presented a PSI protocol designed to perform arbitrary computation on the
intersection. While their protocol is highly eﬃcient, it has some limitations in the types of computa-
tions that can naturally be performed. Namely, a signiﬁcant overhead is introduced if the function
being computed is sensitive to the order of the inputs. Despite this limitation, several interesting
applications were considered such as threshold-PSI, which returns true or false based on whether
the intersection size reaches a certain threshold; [44,20] consider PSI cardinality, which returns the
size of the intersection. [39] considers a private friend-ﬁnding scenario. Ciampi and Orlandi [19]
also design a protocol that can compute an arbitrary function on the intersection. One limitation
all of these works have is that the communication complexity is at least linear in both set sizes,
whereas our approach remains sublinear in the sender’s set size.
1.5 PIR by Keywords
Private Information Retrieval (PIR) allows a user to retrieve an entry in some database held by
one or more servers. A variant called PIR by keywords was considered by Chor et al. in [18], where
the user query consists of a keyword instead of the address of the entry in the database. Our
Labeled PSI protocol can be viewed as a multi-query (single-server) PIR by keywords: we regard
the receiver’s set Y as a set of keywords, and the set of sender’s labels as the database.
In [23] Freedman et al. introduced a protocol for single-server PIR by keywords based on additive
homomorphic encryption. Our labeled PSI protocol in Section 5 uses the same interpolation polyno-
mial as they did. Meanwhile, using leveled FHE, our communication per keyword is O(σ log |X|+(cid:96)),
whereas [23] uses additive homomorphic encryption, and their communication is linear in the size
of the entire database, namely |X| · (cid:96). Our Labeled PSI protocol also handles multiple keywords
so it can be viewed as an improvement upon their single keyword search protocol. Labeled PSI
is also considered in [31], where the authors constructed a solution based on Diﬃe-Hellman type
assumptions, with communication linear in the larger set.
Angel et al. [3,2] used multi-query single-server PIR by keywords as the core component of an
anonymous communication protocol. In order to reduce PIR by keywords to PIR, they pushed a
Bloom ﬁlter representation of the index-to-keyword map to each client. They also optimized for
multi-query by using power-of-two choices and cuckoo hashing techniques.
Olumoﬁn and Goldberg [41] used information-theoretical PIR by keywords to protect the privacy
of client queries to a public database. Their reduction from PIR by keywords to PIR relies on B+
trees, and perfect hash functions.
Private queries to databases Wang et al. [51] used functional secret sharing instead of PIR
to achieve the same goal of protecting the query privacy to a public database. They model the
query as a function to be applied to the database. The client sends secret-shares of the function to
multiple servers, and later combines the responses to obtain the result. Query privacy is ensured
as long as at least one server does not collude with the others.
Boneh et al. [6] used FHE to allow private conjunction queries. The protocol returns indexes
of the matching records to the client, who can subsequently issue PIR queries in order to get the
records themselves. The communication is proportional to the size of the entire database.
Cheon et al. [14,15] presented techniques that allow a user to perform a private search-and-