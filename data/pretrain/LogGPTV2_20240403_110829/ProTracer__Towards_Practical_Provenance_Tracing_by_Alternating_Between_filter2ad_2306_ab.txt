audit 
daemon
Linux programs
User-space
syscall return
Kernel
netlink
syscall
Exit Filter
Exclude Filter
User Filter
Task Filter
System call 
processing
Matching engine
Fig. 3: Linux Audit system architecture.
(e.g. [15]) it is unfortunately built on the Linux Audit system
that has non-trivial run-time overhead by itself. According to
our experiment (Section V), the overhead can be as high as
43%.
A further inspection reveals that the Linux Audit logging
system is unnecessarily heavy-weight. Fig. 3 illustrates the
architecture of the Linux Audit logging system. It consists of
two main parts: a kernel module for system call processing
and a few audit applications that process/store auditing events,
managed by an dispatcher daemon audisp. The kernel mod-
ule receives syscalls from Linux programs. A syscall ﬁrst goes
through the user ﬁlter that decides if the syscall will be further
sent to the other kernel modules for further processing. The
user ﬁlter also forwards the syscall to the exclude ﬁlter to
determine if the syscall should be prevented from being sent
to the audit apps. After the syscall is processed (by other
modules), the return state needs to go through the exit ﬁlter and
then the exclude ﬁlter to determine if the state is interesting for
auditing. The control is only given back to the Linux program
after all these activities.
Note that most of the ﬁltering work is done on the kernel
side, which blocks the application execution for a long time.
Second, all types of syscalls have to go through ﬁlters even if
they are not interesting. It uses netlink to send data from the
kernel to the user-space daemon, which is slow. Finally, the
audit applications write to the log ﬁle, which also generates a
lot of events that need to go through the costly procedure.
In Hi-Fi [36], researchers have developed a more advanced
logging infrastructure with a substantially lower run-time over-
head (3% in a representative workload). They leverage the
Linux Security Modules (LSM) that allow adding light-weight
hooks before accesses to kernel objects such as inodes,
and use a high performance buffer to deliver kernel object
access events to a user space logging application. Despite
4
its low overhead, Hi-Fi does not perform event processing
on the ﬂy hence it records all events. Furthermore, kernel
object access events are at a level lower than syscalls. As a
result, some commonly used syscalls such as ﬁle read may
lead to many kernel object accesses, which induce additional
overhead. Finally, LSM hooks may have difﬁculty handling
customized syscalls introduced by BEEP as those syscalls do
not lead to any kernel object accesses. As such, the capability
of solving dependence explosion cannot be easily ported to
Hi-Fi.
The Basic Idea of ProTracer. We improve the practicality of
provenance tracing by the following two aspects.
In the ﬁrst aspect, We develop a lightweight kernel module.
We will leverage a kernel facility called Tracepoints [5]. A tra-
cepoint can be placed in both user and kernel code to provide
a hook to call a kernel function (probe). In ProTracer, we will
insert tracepoints to kernel functions that process provenance
related syscalls (e.g., sys_clone). The tracepoint driver is
extremely lightweight and simply stores the events to a ring
buffer, which will be processed by the user space daemon
through a pool of threads. More details can be found in
Section III.
In the second aspect, we avoid logging as much as possible
by alternating between tainting and logging. We only log
when ﬁles are written to the disk or packets are sent through
sockets for either IPC or real network communication. For
other syscalls that only lead to intra-process information ﬂow
such as ﬁle reads and network receives, we perform unit level
taint propagation. Tainting has the following beneﬁts:
(1) Avoid logging redundant events. Consider the dashed area
for Firefox in the middle of Fig. 2. At the entry point to
the area on the left, ProTracer will introduce a new taint to
represent the provenance of the hyper link, which is essentially
the sub-graph to the left of the area. The taint is further
propagated through the nodes inside the dashed area. Note
that since no external accesses are performed inside the area,
the taint remains the same until it gets out the area. As such,
we avoids logging events in that duration without losing any
provenance information. The same applies to the dashed box
for sendmail. Similarly, consider an FTP server. Each unit of
the server corresponds to processing a client request. Assume
the client request is to upload a large ﬁle, which entails many
network receive syscalls. In a pure logging system such as [27],
all the syscalls need to be logged. In ProTracer, logging these
events is avoided by taint propagation. In fact, all these syscalls
have the same taint and do not add to the taint set.
(2) Avoid logging dead events. Tainting also allows ProTracer
to handle the large number of syscalls that do not have any
permanent effects on the system. We call them the dead events.
For example, syscalls related to temporary ﬁles represent a
large portion of a raw audit log [28]. However, since these
ﬁles are just used internally and never accessed by others, their
taint propagation usually does not reach any other ﬁle writes
or network sends and hence does not trigger any logging.
Lets consider the FTP server example again. Assume during
the processing of the ﬁle upload request, the connection is
lost. The FTP server will eventually timeout and exit the
execution unit without writing any data. In this case, the taint
source representing the data session with the client IP is not
propagated to any updates on the storage. Thus nothing needs
to be logged.
Note that the aforementioned two kinds of reductions are
different from the reduction in LogGC [28], which is an
ofﬂine log garbage collection technique. LogGC is based on
reachability so that all the events in the dashed area of Fig. 2
cannot be pruned as they are reachable from the backdoor
process. Furthermore, it requires ﬁrst acquiring the entire log
ﬁle and then traversing the large ﬁle back and forth to identify
unreachable items, incurring high cost.
(3) Allow concurrent event processing. Introducing a new
taint to represent a provenance set allows out-of-order event
processing. For example, by introducing a new taint when
the dashed region of Firefox in Fig. 2 is entered,
the
processing of the Firefox events does not have to wait for
the processing of the events in the sub-graph on the left of the
shaded area. This maximizes the utilization of the thread pool.
More details can be found in Section IV.
Log File
User Space Process
with thread pool
5. Write records to log ﬁle
User Space
Kernel Space
4. Handle syscall events
Ring Buﬀer
2. Copy syscall information to buﬀer ring
ProTracer 
Kernel Module
1. syscall -> kernal functoin
3. kernal module -> syscall
Kernal functions with 
Tracepoints
Fig. 4: System architecture overview, dashed lines denote
control ﬂow, solid lines denote data ﬂow, and numbers denote
the order of the events.
III. SYSTEM ARCHITECTURE
The architecture of ProTracer is shown in Fig. 4. The
system consists of two main parts: a kernel module and a
user space daemon process. The kernel module is responsible
for collecting syscall events and writing them to the ring
buffer. The user space process fetches and handles these
events, including deciding to log the events or perform taint
propagation.
When a Linux application makes a syscall, the execution
is trapped to the kernel space and the application is blocked
5
until the kernel ﬁnishes processing the syscall. It is hence
critical to ensure the kernel module is lightweight. ProTracer
makes use of an existing lightweight Linux kernel trace facility,
Tracepoints [5]. In particular, we identify the set of kernel
functions that handle syscalls that can induce causality with
system objects or other processes. They mainly fall into the
following categories.
•
•
•
•
•
All syscalls that operate on ﬁle descriptors (represent-
ing regular ﬁles, network sockets, device ﬁles, pipes
and so on), including creation, read, write, and close.
Special syscalls that help trace taints on certain types
of objects. For example, sys bind for sockets.
IPC syscalls operating on pipes, semaphores, message
queues, shared memory, and UNIX domain sockets.
Process manipulation syscalls including process cre-
ation, termination, and privilege changes (escalation
or degradation).
Syscalls generated by program instrumentation to de-
note unit boundaries and inter-unit workﬂow.
The syscalls that are not monitored are mainly for time
management (e.g. timer create), fetching information from ﬁle
system or kernel (e.g. getpid), and those not implemented
(e.g. getpmsg). To our knowledge, the set is complete for
provenance tracing with certain assumptions. Detailed discus-
sion can be found in Section VI. Tracepoints are inserted at
the entry and exit points of the kernel functions. They are
lightweight hooks that can hand over the execution to our
kernel module so that the syscall and its context can be copied
to the ring buffer. The trace points at the entries are to collect
the parameters while those at the exits are to collect the syscall
results. We separate the two to allow better concurrency in
event processing. Our kernel module is also responsible for
managing the ring buffer to avoid any event loss.
ProTracer uses a user space daemon process to process the
syscall events. To increase throughput, the daemon process
uses a pool of worker threads, which is different from most
existing works. All events are time-stamped so that we do not
need to worry about the event order in the buffer and in the log
ﬁle. A general worker thread assignment policy is that syscalls
from the same application cannot be processed by more than
one worker thread. In other words, event processing is in order
for the same application. But it may be out-of-order for events
from different applications. For each event, the daemon process
needs to decide to log it or to perform taint propagation. More
details are discussed in Section IV. All threads share a log
buffer that stores the log records. The log records are written
to disk only when the buffer is nearly full or the system is in a
relatively idle state so that we can reduce the number of disk
I/O operations.
To achieve good performance, ProTracer uses a ring buffer
to share data between the kernel module and the user space
daemon. The ring buffer is similar to the high performance
buffer in Hi-Fi [36], which is also memory-mapped to the user
space so that it can be accessed without any copy operations.
However, we choose to use tracepoints for syscall interception
instead of LSM hooks, to support customized syscalls and to
trace at the syscall level instead of the lower kernel object
access level.
Fig. 5: An abstract diagram to illustrate the logging and tainting run-time. The numbers represent the order of the events. The
logging/tainting behavior is highlighted in red on edges.U T (u) and M T (a) are simpliﬁed representations of the taint set of a
unit u and address a, respectively. P denotes the current process and id0 an ID denoting a network session.
IV. TAINTING AND LOGGING IN THE USER SPACE
DAEMON
In this section, we explain the user space daemon that
alternates between tainting and logging. The basic scheme is
intuitively illustrated by Fig. 5. When receiving a syscall event,
the daemon checks if it is a syscall that makes permanent
changes to the external state (e.g., a ﬁle write or a socket
send). If so, it logs the current taint set of the event to disk,
which denotes the provenance of the associated object (e.g., the
logging action in red on edge 1). When a new unit starts (i.e.,
the event handling loop starts to process a new and independent
request), the taint set associated with the unit is reset to only
containing the process itself (e.g., U T [u2] = {P } to the left
of u2), meaning the provenance of the unit only contains the
current process.
Upon an input event, a new taint is created to denote the
current provenance set of the input object (e.g., the new taint
F1 on edge 2 denoting the current provenance set of F1 and
ID id1 on edge 3 denoting the network session). The taint
is then added to the taint set of the unit, denoting that now
the unit is causally related to the corresponding input source.
Input syscalls only trigger taint propagation instead of logging.
Upon a memory write representing workﬂow, the current unit
taint set is propagated to the memory (e.g., the highlighted
behavior on edge 8). Later, when another unit loads from the
same memory location, the memory taint set is propagated
to the unit (e.g., the behavior on edge 9). Eventually, when
unit u3 writes to F3, the provenance of F3 is the current unit
taint set. Note that F3’s provenance set contains F1, implying a
causal edge between this event and the previously logged event
about F1. In our implementation, we associate timestamps with
taints and events to facilitate recovery of such causality. It is
worth noting that although there are 10 syscall events, only
two entries are logged, which are sufﬁcient to disclose both
the what- and how-provenance of F1 and F3. In particular, the
how-provenance is represented by the causal graph.
Next, we discuss the details of our design using an abstrac-
tion of the system.
A. Deﬁnitions
The deﬁnitions related to our discussion are presented in
Fig. 6. To support tainting, three data structures are introduced
to store taints for objects, units, and memory, respectively. In
particular, we use an ObjectTaintStore structure to associate
a singleton taint to an object of two possible kinds: Inter-
Process Communication objects (IPCs) that are essentially a
special kind of sockets, and memory-mapped ﬁles. We use
a UnitTaintStore structure to associate a process with a set of
taints, denoting the taints of the current execution unit, which is
usually an iteration of the event handling loop. MemTaintStore
associates a set of taints with a memory address, which is to
support intra-process taint propagation. ProTracer selectively
instruments a very small number of critical memory reads and
writes that denote the inter-unit workﬂow (i.e., high level data
ﬂow [27]) of the application, e.g. the reads and writes of a
task queue that is used to pass user requests across execution
units. A taint can be a time-stamped IPC, ﬁle, or an ID that
represents a taint source, which can be either a network session
or an email received. In other words, we use IDs to denote
external sources. The mapping is maintained by a TaintSource
structure. In contrast, for objects internal to the system we
may use a taint consisting of the object and a timestamp ts to
denote the provenance of that object at ts, which may represent
a set of IDs (e.g., in event 2 in Fig. 5 F1 denotes the current
provenance of ﬁle F1, which contains P and id0).
As mentioned in Section I, we cannot capture all important
provenance by taint propagation alone, which does not record
the history of an object or a process. As such, in addition
to taint propagation, we also log important events. More
speciﬁcally, we log all the permanent changes to the system,
such as ﬁle writes, ﬁle deletes, outgoing network trafﬁc, and
process creation, together with their taints. LogBuffer is a
memory buffer to store these changes. We use a memory
buffer to avoid frequent disk accesses. More importantly, the
memory buffer allows us to easily avoid logging events related
to temporary ﬁles, which are often in a large number. More
discussion can be found later.
As mentioned in Section III, ProTracer intercepts all
syscalls related to provenance, including those related to units.
We abstract these syscalls to a few representatives as shown in
Fig. 6. In particular, they denote ﬁle, IPC, network session, pro-
cess spawn, memory reads/writes denoting inter-unit workﬂow,
unit enter/exit, and taint source related operations. The run-
time behavior corresponding to these events will be discussed
next. Note that although our implementation intercepts both the
entry and the exit of a kernel function that handles a syscall,
our abstraction combines the two events into one abstract event
for discussion simplicity.
6
OT ∈ ObjectT aintStore
U T ∈ U nitT aintStore
M T ∈ M emT aintStore
t ∈ T aint
T Src ∈ T aintSource
::= (IP C | F ile) → T aint
::= P rocess → P(T aint)
::= Address → P(T aint)
::= (IP C | F ile | ID) × T imeStamp
::= ID → (Session | Email)
LB ∈ LogBuf f er
::= (WRITE × (F ile | Session | IP C) × P(T aint) × T imeStamp |
e ∈ Event
DEL × F ile × P(T aint) × T imeStamp | FORK × P rocess × P(T aint) × T imeStamp)
::= F ileOpen(P rocess, F ile) | F ileRead(P rocess, F ile) | F ileW rite(P rocess, F ile) |
F ileDel(P rocess, F ile) |
IP CRead(P rocess, IP C) | IP CW rite(P rocess, IP C) |
SessionCreate(P rocess, Session) | SessionRead(P rocess, Session) |
SessionW rite(P rocess, Session) |
F ork(P rocess, P rocess) |
M emW rite(P rocess, Address) | M emRead(P rocess, Address) |
U nitEnter(P rocess) | U nitExit(P rocess) |
EmailRecv(P rocess, Email)
f ∈ F ile
c ∈ IP C a ∈ Address p ∈ P rocess x ∈ Session m ∈ Email
ts ∈ T imeStamp
Fig. 6: Deﬁnitions for Logging and Tainting.
TABLE I: Logging and Tainting Rules.
Rule #
Event
Action
1
2
3
4
5