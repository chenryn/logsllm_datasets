  startTime = startTime == null ? Date.now() : startTime;
  const p = (Date.now() - startTime) / T;
  const angle = startAngle + p * 360;
  block.style.transform = `rotate(${angle}deg)`;
  requestAnimationFrame(update);
}
update();
```
```js
p = p ** 2; // 匀加速
p = p * (2 - p); // 匀减速
const left = start * (1 - p) + end * p;
```
初速度为 0 的匀加速运动，运动的总时间为 T，总位移为 S，在 t 时刻的位移和加速度：
$$
α = \frac{2S}{T^2}\\
S_t = \frac{1}{2}αt^2 = S{(\frac{t}{T})}^2 = Sp^2
$$
匀减速:
$$
α = -\frac{2S}{T^2}\\
S_t = \frac{2S}{T}t- S{(\frac{t}{T})}^2 = Sp(2-p)
$$
贝塞尔曲线缓动：把 Px 作为时间参数 p，把 Py 作为 p 的映射
![三阶贝塞尔曲线](/assets/202212301531.gif)
### 3D物体绘制
3D 绘图的标准模型一共有四个矩阵：投影矩阵、视图矩阵（ViewMatrix）、模型矩阵（ModelMatrix）、法向量矩阵（NormalMatrix），前三个矩阵用来计算最终显示的几何体的顶点位置，第四个矩阵用来实现光照等效果
- 立方体：个立方体有 8 个顶点，这 8 个顶点能组成 6 个面。在 WebGL 中，我们就需要用 12 个三角形来绘制它
- 圆柱体：可以用割圆的方式对圆进行简单的三角剖分，然后把圆柱的侧面用上下两个圆上的顶点进行三角剖分
![202318134456](/assets/202318134456.webp)
法向量表示每个顶点所在的面的法线方向，可以通过法向量来计算光照、阴影、进行边缘检测等
假设在一个平面内，有向量 a 和 b，n 是它们的法向量，那我们可以得到公式：n = a X b
![202318134724](/assets/202318134724.webp)
根据物体漫反射模型，光照强度等于光线与法向量夹角的余弦
![20231813481](/assets/20231813481.webp)
#### 透视投影
- 正投影，又叫做平行投影。正投影是将物体投影到一个长方体的空间（又称为视景体），并且无论相机与物体距离多远，投影的大小都不变
- 透视投影，离相机近的物体大，离相机远的物体小
![正投影](/assets/202318135528.webp)
![透视投影](/assets/202318135551.webp)
#### 仿射变换
对于三维的仿射变换来说，平移和缩放都只是增加一个 z 分量，这和二维放射变换没有什么不同
欧拉角：
描述三维物体在空间中取向的标准数学模型，对于在三维空间里的一个参考系，任何坐标系的取向，都可以用三个欧拉角来表示
![20231814236](/assets/20231814236.webp)
使用欧拉角来操作几何体的方向，虽然很简单，但会有一个叫做万向节锁的缺陷：在特定的欧拉角情况下，姿态调整的自由度丢失，即本来有 x、y、z 三个自由度，但某个轴被固定后，只剩下两个自由度了
四元数：可以用单位四元数来描述 3D 旋转。所谓单位四元数，就是其中的参数满足 
$$x^2+y^2+z^2+w^2=1$$
#### 模拟光照
- 环境光（Ambient Light）
- 平行光（Directional Light）
- 点光源（Positional Light）
- 聚光灯（Spot Light）
环境光：
因为它在空间中均匀分布，所以在任何位置上环境光的颜色都相同。其次，它与物体的材质有关。如果物体的 RGB 通道反射率不同的话，那么它在相同的环境光下就会呈现出不同的颜色
物体在环境光中呈现的颜色，环境光的颜色为 L，材质对光的反射率为 R：
$$
C = LR = \begin{matrix}
  L_r \times R_r\\
  L_g \times R_g\\
  L_b \times R_b\\
\end{matrix}
$$
平行光漫反射：
有向光的漫反射在各个方向上的反射光均匀分布，反射强度与光的射入方向与法线的夹角的余弦成正比
![20231915106](/assets/20231915106.webp)
平行光镜面反射：
镜面反射需要同时考虑光的入射方向以及相机也就是观察者所在的方向
![202319153149](/assets/202319153149.webp)
1. 求出反射光线的方向向量
2. 根据相机位置计算视线与反射光线夹角的余弦
3. 使用系数和指数函数设置镜面反射强度。指数越大，镜面越聚焦，高光的光斑范围就越小
点光源：
点光源不仅有方向属性，还有位置属性。因此计算点光源的光照，要先根据光源位置和物体表面相对位置来确定方向，然后再和平行光一样，计算光的方向和物体表面法向的夹角，点光源的光照强度会随着空间的距离增加而衰减。所以，为了实现更逼真的效果，必须要把光线衰减程度也考虑进去
A、B、C 为常量，它们的取值会根据实际的需要随时变化，z 是当前位置到点光源的距离
$$
P = Az^2 + Bz + C\\
d = \frac{d_0}{P}
$$
聚光灯：
与点光源相比，聚光灯增加了方向以及角度范围，只有在这个范围内，光线才能照到
![202319152048](/assets/202319152048.webp)
Phong 反射模型：多个光照的计算结果相加，就能得到光照下几何体的最终颜色
#### 法线贴图
法线贴图是用一张图片来存储表面的法线数据。这张图片叫做法线纹理，它上面的每个像素对应一个坐标点的法线数据，要想使用法线纹理的数据，我们还需要构建 TBN 矩阵。这个矩阵通过向量、矩阵乘法将法线数据转换到世界坐标中
构建 TBN 矩阵有两个方法：
1. 根据几何体顶点数据来计算切线（Tangent）、副切线（Bitangent），然后结合法向量一起构建
2. 使用偏导数来计算，这样我们就不用预先在顶点中计算 Tangent 和 Bitangent
## 性能
影响 Canvas 和 SVG 渲染性能的因素：绘制图形的数量跟绘制图形的大小
1. 优化 canvas 指令：减少每次绘画需要执行的指令
2. 缓存：将图形缓存下来，保存到离屏的 Canvas（offscreen Canvas）中，然后在绘制的时候作为图像来渲染
3. 分层渲染：用两个 Canvas 叠在一起，将不变的元素绘制在一个 Canvas 中，变化的元素绘制在另一个 Canvas 中
4. 局部重绘：不需要清空 Canvas 的全局区域，而是根据运动的元素的范围来清空部分区域
5. 多线程：浏览器支持的 Canvas 可以在 WebWorker 中以单独的线程来渲染，可以避免阻塞主线程
WebGL 的性能并不直接与渲染元素的数量相关，而是取决于 WebGL 的渲染次数、着色器执行的次数、着色器运算的复杂度
1. 对于需要重复绘制的图形，使用批量绘制，叫做多实例绘制
2. 开启透明度与反锯齿都带来性能开销
## 数据
### 可视化处理
1. 从原始数据中过滤出有用的信息
2. 强化数据的展现形式让用户更好地感知
3. 将信息的特征具象化，用图形表达
```mermaid
stateDiagram-v2
  有什么数据 --> 想了解什么: 合适的数据
  想了解什么 --> 使用什么可视化方式: 有效的信息
  使用什么可视化方式 --> 发现了什么意义: 合适的图形
  发现了什么意义 --> 想了解什么: 有新的想法
  发现了什么意义 --> 使用什么可视化方式: 尝试不同的方式
```
做可视化项目的第一步，就是要先了解自己掌握的数据，而不同的数据要了解的内容不同
当确定了想要表达的信息之后，如果数据中有，就直接可以直接拿来用，如果没有，则需要自己加工处理的
把握住最希望被用户关注到的那些内容，然后用直观的、有趣的以及更加印象深刻的方式来进行表达，给数据增加直观性和趣味性，也能够让朴实的数据立刻生动起来
可视化数据之后，我们需要从中挖掘出一些有价值的信息，包括但不限于数据信息的规律（增加、减少、离群值等），以及数据信息的异常（明显差异、规律改变）等，这才是可视化的价值
多元数据的可视化：以用散点图表示变量的相关性。对于超过二维的数据，我们可以扩展散点图，调整颜色、大小、透明度等等手段表达额外的信息。除了散点图之外，我们还可以用晴雨表、平行坐标图、热力图、三维直方图、气泡图等等图表，来表示多维数据的相关性
### 可视化设计
学会了解人们是怎样看数据的，然后将数据呈现得符合人们的思维和理解习惯
1. 建立视觉层次，信息有主次之分，我们要把重要的信息突出显示，减少次要信息对比，以及干扰信息的存在感
2. 用合适的图表来直观地表达信息
3. 重视数据之间的比较，使用一些图形属性，比如更改图形颜色、形状等等，来强调数据之间的差异
原则：
1. 简单清晰：视化真正的价值是准确地表达信息内容
2. 视觉一致性：使用互补色还是同色系方案，想要突出数据项之间的差异，那么采用对比色方案；如果你想要让人长时间关注，尤其是一些复杂的大型图表，那么采用同色系方案
3. 信息聚焦：可以将相关的多元变量聚合在一张图表上，用来更聚焦地表达多元信息，但要确定我们需要的信息是否需要这些多元变量，并且它们彼此是有相关性的，否则只会是干扰
4. 高可访问性：无障碍原则，配色上要考虑到视觉障碍人士
## 地理信息可视化
### 墨卡托投影
也叫做等圆柱投影。它的实现思路就是把地球从南北两极往外扩，先变成一个圆柱体，再将世界地图看作是贴在圆柱侧面的曲面，经纬度作为 x、y 坐标
![2023112135642](/assets/2023112135642.webp)
![202311214529](/assets/202311214529.webp)
GeoJSON的格式：
```json
{
    "type":"FeatureCollection", 
    "features": [
        {
          "type":"Feature",
          "geometry":{
              "type":"Polygon",
              "coordinates":
              [
                  [[117.42218831167838,31.68971206252246],
                  [118.8025942451759,31.685801564127132],
                  [118.79961418869482,30.633841626314336],
                  [117.41920825519742,30.637752124709664],
                  [117.42218831167838,31.68971206252246]]
              ]
          },
          "properties":{"Id":0}
        }
    ]
}
```
它定义了一个地图上的多边形区域，坐标是由四个包含了经纬度的点组成的（代码中一共是五个点，但是首尾两个点是重合的）
TopoJSON 格式就是 GeoJSON 格式经过压缩之后得到的，它通过对坐标建立索引来减少冗余