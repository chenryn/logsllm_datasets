1, a
(cid:2)
2, ..., a
A sorting network is a boolean circuit which sorts an input
array (a1, a2, ..., an) into a monotonically increasing array
(cid:2)
n). The main building block of sorting networks is
(a
compare-and-swap circuits, which are binary operators taking
(cid:2)
as input a pair (a1, a2), and outputting the sorted pair (a
2)
with a
(cid:2)
1 = min(a1, a2) and a
(cid:2)
2 = max(a1, a2).
(cid:2)
1, a
Sorting networks can be used as data-oblivious sorting
algorithms for security purposes. The efﬁciency of a sorting
network can be measured by its complexity, i.e. the total num-
ber of compare-and-swap circuits it includes. A theoretically
optimal sorting network is the well-known AKS network that
achieves a complexity of O(n log n). However, being an im-
portant theoretical discovery, the AKS network has no practical
application due to a large constant. Therefore, in this paper,
we use the AKS network for theoretical analysis, while use
a practically efﬁcient sorting network, the Batcher’s odd-even
287
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:30 UTC from IEEE Xplore.  Restrictions apply. 
(cid:17)(cid:65)
(cid:65) (cid:65)
(cid:77)(cid:73)(cid:78)(cid:8) (cid:12)
(cid:17)
(cid:18)
(cid:18)(cid:65)
(cid:65) (cid:65)
(cid:77)(cid:65)(cid:88)(cid:8) (cid:12)
(cid:17)
(cid:11)(cid:68)(cid:12)(cid:3)(cid:38)(cid:82)(cid:80)(cid:83)(cid:68)(cid:85)(cid:72)(cid:16)(cid:68)(cid:81)(cid:71)(cid:16)(cid:86)(cid:90)(cid:68)(cid:83)
(cid:18)
(cid:9)
(cid:9)
(cid:7)
(cid:7)
(cid:17)(cid:65)
(cid:17)(cid:65)
(cid:18)(cid:65)
(cid:18)(cid:65)
(cid:19)(cid:65)
(cid:19)(cid:65)
(cid:20)(cid:65)
(cid:7)
(cid:20)(cid:65)
(cid:11)(cid:68)(cid:12)(cid:3)(cid:54)(cid:82)(cid:85)(cid:87)(cid:76)(cid:81)(cid:74)(cid:3)(cid:49)(cid:72)(cid:87)(cid:90)(cid:82)(cid:85)(cid:78)
(cid:7)
Fig. 3. Odd-even merge sorting network [15]: n = 4
merge network [14][15] in the experiments. Batcher’s sorting
network can be depicted as shown in Alg. 1. A compare-and-
swap circuit and an odd-even merge sorting network for n = 4
are illustrated in Fig. 3.
Algorithm 1 Odd-even Merge Sorting Network Algorithms
(a) oeSort(a, inc)
Input: a = {a1, a2,··· , an}, inc = 0 or 1
Output: c (inc = 0: non-increasing, inc = 1: non-decreasing)
1: if n > 1 then
m = n+1
2 ;
2:
oeSort(a[1..m], inc);
3:
oeSort(a[m + 1..n], inc);
4:
c =oeMerge(a[1..m], a[m + 1..n], inc);
5:
6: end if
return c;
or 1
(b) oeMerge(a, b, inc)
Input: a = {a1, a2,··· , am}, b = {b1, b2,··· , bn}, inc = 0
Output: c
1: if (m == 0 || n == 0) then
2:
3: else if (m == 1 && n == 1) then
4:
5:
6: else
7:
8:
9:
10:
11:
12:
13: end if
c = (cid:5)a, b(cid:6);
swap(a1, b1, inc == 1 ? [a1 > b1] : [a1  c[i+1]] : [c[i] < c[i+1]];
swap(c[i], c[i + 1], bl);
end for
return c;
D. Message Authentication Codes
Message authentication codes (MACs) are used to verify
the integrity of a message. MACs ensure that data received
are exactly as sent by, i.e., there is no modiﬁcation, insertion,
deletion, or replay. Formally, A MAC is a triple of efﬁcient
algorithms (G, S, V ) satisfying:
• Key-generator G gives the key k on input 1n, i.e., k ←
G(1n), where n is the security parameter.
• Signing algorithm S outputs a tag t given the key k and
the input string x, i.e., t ← S(k, x).
• Verifying algorithm V outputs accepted or rejected on
inputs including the key k, the string x and the tag t, i.e.,
V (k, x, t) = accepted|rejected.
288
TABLE I.
NOTATIONS FOR OUR PROTOCOL
M the SAI matrix, M = {mij}n×n
the SAI of square sij, mij = {
mij
ij
the SAI of channel k in square sij

Ck
k
the service contour of the kth spectrum channel
K the number of PUs or spectrum channels
Ns
lu
k }K
ij
the number of SUs or query requests
query location of SU u, lu = (iu − 1)n + ju indexing square
(iu, ju)
decoding information of SU u
the garbling function
SDM’s and CSP’s shares of x, where [x]s ⊕ [x]c = x
du
G(.)
[x]s, [x]c
Algorithms G, S and V must satisfy
P r[V (k, x, S(k, x)) = accepted|k ← G(1n)] = 1
The way to develop an efﬁcient MAC is to use crypto-
graphic hash functions which generally execute faster than
other cryptographic primitives, and the resulting MAC is called
HMAC. An HMAC can be expressed as
+ ⊕ ipad)||M ]]
+ ⊕ opad)||H[(K
HMAC(K, M ) = H[(K
where
- H is the embedded hash function (e.g., MD5, SHA-1).
- M is the message input to HMAC (including the padding
speciﬁed in the embedded hash function).
- K is the secret key, with a recommended length not less
than the security parameter n.
- K + is K padded with zeros on the left so that the result
is b bits in length.
- ipad = 00110110 (36 in hexadecimal) repeated b/8 times.
- opad = 01011100 (5C in hexadecimal) repeated b/8
times.
In the above, b is the number of bits in a block of the hash
function H. We will use HMAC-MD5 to detect the malicious
modiﬁcations in our experiments.
IV. SECURE AND VERIFIABLE DESIGN
In this section, we ﬁrst give the overview of our secure
database-driven spectrum sharing protocol. Then, the detailed
design of the protocol is presented step by step. Finally, we
augment the proposed protocol with correctness veriﬁcation,
defending against some common malicious attacks.
A. Protocol Overview
The protocol overview is shown in Fig. 4, where both
SDM and CSP perform the secure computations cooperatively.
Brieﬂy speaking, all sensitive data are secretly shared, update
operations are performed in the secret sharing form, and query
operations are performed using garbled circuits. Notations for
the protocol can be summarized in Tab. I.
More speciﬁcally,
in our protocol, we apply a hybrid
approach by combining garbled circuits and secret sharing.
We let both the SDM and the CSP secretly share the spectrum
available information (SAI) matrix M using the XOR secret
sharing. Each PU (resp. SU) splits its update (resp. query)
request into two shares in the same way, and sends one share
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:30 UTC from IEEE Xplore.  Restrictions apply. 
SDM
] }ij s n n
(cid:117)
{[
m
k (cid:27)
{( ,[
] )}K
(cid:32)1
k
k s
l
{[
] } sN
(cid:32)1
u s u
*
m
{[
G m
{ ([
G l
{ ([
] }ij s n n
(cid:117)
*
] )}
ij c
] )} sN
(cid:32)1
u
u c
(cid:117)
n n
(1,[
] )s(cid:27)
1
PU1:
(1,
)(cid:27)
1
(2,[
] )s(cid:27)
2
PU2:
(2,
)(cid:27)
2
U
p
d
a
t
e
l
1[
]s
l
2[
]s
G m
(
SU1:
1l
G m
(
)
*
i j
1 1
SU2:
2l
2d
)
*
i j
2 2
G m
{ ([
*
] )}
ij c
(cid:117)
n n
G l
{ ([
] )} sN
(cid:32)1
u
u c
Garbled Query Circuit
(1,[
] )c(cid:27)
1
(2,[
] )c(cid:27)
2
l
1[
]c
l
2[
]c
1d
CSP
m
] }ij c n n
(cid:117)
{[
k (cid:27)
{( ,[
] )}K
(cid:32)1
k
k c
U
p
d
a
t
e
l
{[
] } sN
(cid:32)1
u c u
{[
m
*
] }ij c n n
(cid:117)
*
] )}
ij c
] )} sN
(cid:32)1
u
u c
G m
{ ([
G l
{ ([
(cid:117)
n n
Query
{ } sN
u ud
(cid:32)1
Fig. 4. The overview of our secure database-driven spectrum sharing protocol: SAI matrix M is initially shared between SDM and CSP. Users submit one
share of requests to SDM and the other to CSP. Update operations are performed independently over its respective share by SDM or CSP, while query operations
are performed cooperatively by both of them using garbled circuits. Finally, each garbled query result and its decoding are sent to the corresponding SU.
to SDM and the other to CSP. To perform update operations,
either SDM or CSP can simply XOR up its shares of M
and update requests; To perform query operations, both SDM
and CSP apply the garbled circuit protocol, resulting that
SDM holds the garbled query results while CSP holds the
decoding information. The appropriate garbled query result and
its corresponding decoding information are then sent to each
SU, who can thus obtain its plain query result. The protocol
for each round of spectrum sharing is illustrated in Protocol 2.
Here, two points need to be emphasized as follows.
• Each PU needs to submit its update request at the be-
ginning of each round, even though it has nothing to
update (in this case, it submits a null update request).
This protects the privacy of operation time for each PU.
• Each SU submits its query request when necessary, since
only the privacy of location for each SU is concerned.
Thus, number of participant SU in each round is probably
different.
In the above, how to perform the update processing and
how to construct the query circuit are detailed in Sec. IV-B
and Sec. IV-D, respectively. Additionally, we assume that
all communication channels are authenticated (which can be
implemented using regular cryptographic ways), and mainly
focus on the secure computations during the spectrum sharing.
B. Update Processing
In this phase, SDM and CSP update their respective shares
of M, independently. More speciﬁcally, each of them can
simply XOR up its share of SAI matrix M with its share
of all update requests from PUs. To make this workable, each
PU has to prepare its update request properly.
Let us illustrate how to prepare an update request by a
simple example in Fig. 5. Given a value v shared by SDM
(holding share [v]s) and CSP (holding share [v]c), if a PU
wants to update v to get v1, it splits v1 into [v1]s and [v1]c,
Old value:
Update request:
Updated value:
SDM
[ ]sv
]sv
1[
v(cid:134)
[
1
v
[ ]
s
CSP
[ ]cv
v
v(cid:134)
1[
v
(cid:134) (cid:134)
]c
v
[
1
]
c
]
s
v