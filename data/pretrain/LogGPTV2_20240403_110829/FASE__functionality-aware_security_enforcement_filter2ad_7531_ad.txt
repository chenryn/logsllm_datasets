(cid:2)
(cid:3)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
0
2
1
1
3
0
1
0
2
0
4
1
0
0
1
2
2
0
0
3
0
2
1
1
3
0
1
0
2
0
1
1
0
0
0
0
2
0
0
3
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:4)(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
0
0
0
0
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
Crash:
Side Eﬀects: (cid:3) Major side eﬀects (cid:4)(cid:2) Minor side eﬀects
(cid:2) No side eﬀects
Table 2: Crashes, visual side eﬀects, and run-time errors observed when running the applications using the four conﬁgurations.
Coarse Tracking Object-level tracking, labeled strings are
replaced with arbitrary ones (even if only partially la-
beled).
No constraints Byte-level tracking, labeled characters are
replaced with arbitrary strings (without conforming to
functionality constraints).
Generic constraints Byte-level tracking, labeled strings
are replaced while satisfying the generic constraints
(but may violate application-speciﬁc constraints).
All functionality constraints Byte-level tracking, labeled
strings are replaced while satisfying both generic and
application-speciﬁc constraints.
A summary of which FASE features are used by each con-
ﬁguration is given in Table 1. The last conﬁguration uses
the full set of available features in the FASE system. For
this conﬁguration, we inspected the traces for each appli-
cation and wrote application constraints in the FASE DSL.
We inspected the sensitive information ﬂows observed when
running the application using the other three conﬁgurations,
and then examined their logs and run-time errors to derive
application-speciﬁc functional constraints.
To asses the robustness of each conﬁguration, we ran each
application using our user scripts and noted (i) whether
the application crashes or otherwise loads successfully; (ii)
whether there are major, minor or no visual side eﬀects; and
(iii) the number of unique run-time errors. We measure (i)
and (iii) by inspecting the trace for each application using
the Android adb tool. We used the methodology of [18]
to measure (ii): we capture screenshots between user com-
mand, automatically highlight visual diﬀerences, and man-
ually classify discrepancies into major (an essential visual
element is missing), minor (a nonessential visual element,
such as an ad, is missing) and none (the screenshots are
identical).
We present our results in Table 2. Using the coarse con-
ﬁguration, 40% of the applications crash, 50% show visual
side eﬀects, and 65% throw run-time errors. When ﬁne-
grained tracking is enabled, we observe fewer—but still a
signiﬁcant number of—problems. Remediation using generic
constraints further reduces the observed side eﬀects: 15%
of the applications crash, 45% have visual side eﬀects, and
50% throw run-time errors. Finally, using the all function-
ality constraints conﬁguration only one application throws
a run-time error while also exhibiting a minor visual side ef-
fect. Further analysis reveals, however, that this is not due
to the FASE algorithm, the problem being an authentica-
tion error with the Google Maps API caused by resigning
the application after instrumentation.
To gain better understanding of the results, we manually
inspected the crashes and visual side eﬀects. An example
of an application that crashes due to violation of a generic
constraint is Antsmasher, and we depict the relevant code
fragment in Figure 5. The constructor argument, s1, is re-
ceived from a JSON object, and if it is anonymized by re-
placing every character with "x", then the URL constructor
throws an exception, leaving the variable url uninitialized.
Later, when the doInBackground method is called, the appli-
cation throws a NullPointerException and crashes. Similar
crashes also occur due to changes to unsanitized strings that
represent ﬁle paths. All such paths must be sanitized to
prevent path traversal attacks [23]. However, unconstrained
modiﬁcations may result in invalid paths that then lead to
exceptions thrown by the constructor.
AccuWeather is an application where respecting only the
generic constraints is insuﬃcient; see Figure 6. This appli-
479extends AsyncTask  {
private URL url;
public DownloadManager ( String s1 ,
String s2 , AsyncTaskCompleteListener l) {
...
try {
} catch ( MalformedURLException e) {
this.url = new URL(s1);
return ;
1 public class DownloadManager
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21 }
e. printStackTrace ();
}
}
}
private String doInBackground ( String [] s) {
...
Connection c = this.url. openConnection ();
// crash: null pointer exception
InputStream i = c. getInputStream ();
Figure 5: The fragment from the Antsmasher application
which shows that violating a generic constraint can crash
the application.
(a) Coarse Tracking (b) Generic Constr.
(c) All Constraints
Figure 6: The generic constraint alone is insuﬃcient to avoid
major side eﬀects for the AccuWeather application.
cation transmits private data over the network as follows:
http://api.accuweather.com?apikey=..&lang=en&..
If the system modiﬁes the argument en with an invalid lan-
guage identiﬁer such as xx, then the application’s back-end
server returns an error as it fails to recognize the language, as
shown in Figure6b. Note, however, that the modiﬁed URL
string satisﬁes the generic sink constraint. To avoid this
problem, we wrote an application constraint that allows the
application to send this information to its back-end server,
resulting in absence of any visual side eﬀects, as Figure 6c
shows.
To summarize, our results provide evidence that FASE’s
key features—ﬁne-grained tracking, generic constraints, and
application-speciﬁc constraints—are necessary and suﬃcient
to secure applications while avoiding side eﬀects. The FASE
system therefore meets our robustness engineering require-
ment.
R2: Overhead. To check whether the FASE system meets
our second engineering requirement, we measured the over-
head incurred by the system.
To precisely measure the overhead, we measured the to-
3K
Stock Android
FASE
)
s
m
(
i
e
m
T
U
P
C
2K
1K
0K
20
Figure 7: CPU time for running the 20 applications, using
our user scripts, on a stock Android and a FASE device.
15
10
5
tal CPU time each application needs to complete all user
actions deﬁned in our user scripts. We deliberately mea-
sure CPU time, instead of measuring the time to complete
a task, to avoid the noise due to the scheduling of unrelated
events. For our experiments we used a stock Android device
alongside a modiﬁed Android device that features the FASE
tracking engine. We ran each application 10 times.
We plot the results in Figure 7. The data shows that the
average overhead for real-world applications is 11.7%. De-
spite the ﬁne granularity of the tracking engine, this over-
head is in line with state-of-the-art run-time security sys-
tems (e.g. TaintDroid [10] and [31]). We remark that as
mobile applications are event driven, this overhead is hardly
felt in practice.
R3: Constraint Conciseness. This requirement reﬂects
the usability of FASE. If the application constraints are large
and complex, then it may be hard for developers to write
them.
First, note that the generic constraints are already deﬁned
and are packaged into the FASE system. The developer
should therefore only write application-speciﬁc constraints.
Second, we have observed that for most applications a
single application constraint is suﬃcient to ﬁx one run-time
error. The average size of all application constraints among
the selected applications is 4. We spent much less than an
hour to write all constraints for an application. We there-
fore believe that a developer who is familiar with the FASE
syntax can write the constraints in several minutes.
Most the constraints were indeed intuitive to write. To il-
lustrate this, the constraint that prevents the run-time error
in the AccuWeather application shown in Figure 6 is:
sink java.net.URL(url)
if url.startsWith("api.accuweather.com") then
keep url(cid:6)Lang(cid:7)
We did not encounter application constraints that have com-
plex encoding in the FASE DSL.
Although developers may resort to more complex con-
straints to account for behaviors that we did not observe
in our experiments, the average number of application con-
straints is likely to be in the same range (i.e. approximately
10 rules). This suggests that it is feasible to write appli-
cation constraints for real-world applications in the FASE
DSL.
4807. RELATED WORK
There are numerous static and dynamic approaches for
information-ﬂow tracking. For static analyses, we refer the
reader to [2, 12] and the references therein. Several ap-
proaches, such as [26], use static data ﬂow trackers to aug-
ment applications with policy-enforcement capabilities. While
these approaches often feature eﬃcient enforcement, they
cannot enforce complex, dynamic policies, such as mask the
last six digits of the IMSI before it is sent to an unknown
server, due to the inherent imprecision of their static anal-
ysis. As for the dynamic approaches, the state-of-the-art
data ﬂow tracking system for Android, TaintDroid [10], ac-
counts for ﬂows through variables and methods, as well as
ﬁles and messages exchanged between applications. While
TaintDroid also features low overhead, it supports neither
ﬁne-grained tracking nor run-time remediation.
Extensions of TaintDroid include AppFence [18], which
(i) substitutes shadow data in place of conﬁdential data and
(ii) blocks network transmissions that contain private val-
ues; and Kynoid [29], which extends TaintDroid with user-
deﬁned security policies. These solutions are not sensitive
to the target application’s functionality, and inherit Taint-
Droid’s coarse-grained tracking.
∗
Several dynamic approaches enforce information-ﬂow se-
curity by computing policy-compliant values based on ex-
plicit high- and low-views of the sensitive values. The Jeeves
[5], enables devel-
system [32], and its extension Jeeves
opers to specify and enforce policies that describe which
views of the sensitive values should be exposed to a sink.
Approaches based on faceted values, such as [4], guarantee
policy-compliant outputs by simulating program executions
with diﬀerent views of the sensitive values. While oﬀering
strong security guarantees, these systems have more com-
plex tracking mechanisms: the Jeeves programming model
tracks symbolic constraints and relies on SMT solving to
enforce policies, while [4] simulates multiple executions. In
contrast to these approaches, the FASE approach relies only
on data ﬂow tracking which can be eﬃciently implemented.
In the area of automatic remediation, Livshits and Chong
propose a system for automated sanitizer placement [19].
To keep the run-time overhead low, the sanitizers are placed
statically whenever possible, and dynamically otherwise. Sim-
ilarly, ScriptGard [28] dynamically corrects instances of mis-
placed sanitization. The problem of sanitizer placement does
not address the challenge of correctly anonymizing/sanitiz-
ing data [30]. FASE addresses this issue with sensitivity to
application functionality, complementing existing work on
correct placement of endorsement functions.
BEK [15] is an expressive DSL for encoding sanitizers,
which are traditionally hard to get right. The language is
amenable to precise analysis for idempotence, commutativ-
ity, and equivalence properties. Unlike BEK, which develop-
ers use to specify how sensitive data is sanitized, the FASE
DSL expresses functionality constraints, which formalize re-
quirements made by the program that security enforcement
must respect.
Several works have presented character-level dynamic taint
tracking for Web applications [8, 13, 33] with comparable
overhead to the FASE tracking engine, which is also due to
instrumenting only the string library. Unlike our FASE sys-
tem, these systems do not account for primitive values, and
defend only against integrity threats. Also, run-time reme-
diation is limited to blocking operations without rewriting
values with sensitivity to functionality.
The FASE tracking engine for primitive values is similar
to BayesDroid [31], a dynamic system for detecting conﬁden-
tiality leaks using Bayesian reasoning. BayesDroid, however,
is designed speciﬁcally for privacy analysis; it does not per-
form online remediation.
Finally, for our string solver component, there are several
general-purpose solvers for string constraints [34, 11, 14, 16,
6]. These decide standard regular and CFL problems, in-
cluding language membership, intersection and equivalence.
Such solvers can compute the intersection between FASE’s
regular application constraints and context-free generic con-
straints (step 5 of Algorithm 1). The FASE solver extends
the solver of the ACLA framework [6] with support for de-
riving regular expressions from application constraints ex-
pressed in our DSL and (partially) labeled strings.
8. CONCLUSION AND FUTURE WORK
We presented functionality-aware security enforcement,
a lightweight approach for online information-ﬂow enforce-
ment without disrupting the functionality of applications.
FASE’s key components are:
(i) application and generic
constraints, which capture the intrinsic functional needs of
the applications and their libraries, (ii) a byte-level data
ﬂow engine tracking sensitive value at run time, and (iii)
an run-time synthesizer for repairing sensitive values using
constraint-compliant ones.
We presented a FASE implementation for Android and
reported on experiments over popular Android apps. Our
results show that the FASE system incurs an overhead of