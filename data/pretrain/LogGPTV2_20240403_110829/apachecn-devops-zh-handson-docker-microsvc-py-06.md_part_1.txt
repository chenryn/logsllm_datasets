# 六、Kubernetes 的本地开发
在本章中，您将学习如何定义集群，部署所有交互的微服务，以及如何在本地进行开发。我们将在前一章中介绍的概念的基础上进行构建，我们将描述如何在 Kubernetes 中以实用的术语配置整个系统，部署多个微服务，以及如何使其在您自己的本地计算机上作为一个整体工作。
在这里，我们将介绍另外两个微服务:前端和用户后端。它们在[第 1 章](01.html)、*行动——设计、计划和执行*中，在*打破巨石*部分的战略规划中进行了讨论。我们将在本章中看到它们需要如何配置才能在 Kubernetes 中工作。这是对[第 2 章](02.html)、*中介绍的用 Python 创建 REST 服务的思想后端的补充；* [第 3 章](03.html)、*使用 Docker* 构建、运行和测试您的服务，以及[第 4 章](04.html)、*创建管道和工作流*。我们将讨论如何正确配置这三个组件，并添加一些其他选项，以确保它们在生产环境中部署后能够顺利运行。
本章将涵盖以下主题:
*   实现多种服务
*   配置服务
*   在本地部署整个系统
到本章结束时，您将拥有一个工作正常的本地 Kubernetes 系统，三个微服务作为一个整体进行部署和工作。您将了解不同元素如何工作，以及如何配置和调整它们。
# 技术要求
对于本章，您需要运行一个本地 Kubernetes 实例，如前一章所述。记得安装入口控制器。
您可以查看我们将在 GitHub 存储库中使用的完整代码([https://GitHub . com/PacktPublishing/动手 Docker-for-micro service-with-Python/tree/master/chapter 06](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/tree/master/Chapter06))。
# 实现多种服务
在 GitHub repo 中，您可以找到我们将在本章中使用的三种微服务。它们基于[第 1 章](01.html)、*提出的整体——设计、计划和执行*，分为三个要素:
*   **思想后端**:如前一章所述，这处理思想的存储和对思想的搜索。
*   **用户后端**:存储用户，允许用户登录。根据认证方法的描述，这将创建一个可用于针对其他系统进行认证的令牌。
*   **前端**:这来自单块，但是它不是直接访问数据库，而是向用户和想法后端发出复制功能的请求。
Note that the static files are still being served by the Frontend, even though we described the final stage of the cluster serving them independently. This is done for simplicity and to avoid having an extra service.
上述服务以类似于思想后端在[第 3 章](03.html)、*中使用 Docker* 构建、运行和测试您的服务的方式进行了 Docker 化。让我们看看其他微服务的一些细节。
# 描述用户后端微服务
用户后端的代码可以在[https://github . com/packt publishing/动手操作 Python 微服务/tree/master/chapter 06/Users _ 后端](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/tree/master/Chapter06/users_backend)中找到。该结构与思想后端非常相似，思想后端是一个 Flask-RESTPlus 应用，它与 PostgreSQL 数据库通信。
它有两个端点，正如在它的斯瓦格界面中看到的:
![](img/b3fae995-d64e-42dd-90ab-e11643f75592.png)
端点如下:
|  | **终点** | **输入** | **返回** |
| `POST` | `/api/login` | `{username: , password: }` | `{Authorized: }` |
| `POST` | `/admin/users` | `{username: , password: }` | `` |
`admin`端点允许您创建新用户，登录 API 返回一个有效的头，可以用于思想后端。
用户以下列模式存储在数据库中:
| **场** | **格式** | **评论** |
| `id` | `Integer` | 主关键字 |
| `username` | `String (50)` | 用户名 |
| `password` | `String(50)` | 密码以纯文本存储，这是一个坏主意，但简化了示例 |
| `creation` | `Datetime` | 创建用户的时间 |
在 SQLAlchemy 模型定义中，使用以下代码描述该模式:
```
class UserModel(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50))
    # DO NOT EVER STORE PLAIN PASSWORDS IN DATABASES
    # THIS IS AN EXAMPLE!!!!!
    password = db.Column(db.String(50))
    creation = db.Column(db.DateTime, server_default=func.now())
```
Note that the creation date gets stored automatically. Also, note that we store the password in plain text. This is a *terrible, terrible idea in a production service*. You can check out an article called *How to store a password in the database?* ([https://www.geeksforgeeks.org/store-password-database/](https://www.geeksforgeeks.org/store-password-database/)) to get general ideas for encrypting passwords with a salt seed. You can use a package such as `pyscrypt` ([https://github.com/ricmoo/pyscrypt](https://github.com/ricmoo/pyscrypt)) to implement this kind of structure in Python.
用户*布鲁斯*和*斯蒂芬*被添加到`db`示例中，作为获取示例数据的一种方式。
# 描述前端微服务
前端代码可以在 GitHub repo 中找到。它基于在[第 1 章](01.html)、*采取行动-设计、计划和执行*中介绍的 Django 单块([https://github . com/packt publishing/动手-Python 微服务 Docker/tree/master/Chapter 01/单块](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/tree/master/Chapter01/Monolith))。
与整块的主要区别在于数据库不被访问。因此，Django ORM 没有任何用途。它们被对其他后端的 HTTP 请求所取代。为了发出请求，我们使用了神奇的`requests`库。
例如，`search.py`文件被转换成以下代码，该代码将搜索委托给思想后端微服务。注意客户的请求是如何转换成对`GET /api/thoughts`端点的内部应用编程接口调用的。结果在 JSON 中解码，并在模板中呈现:
```
import requests
def search(request):
    username = get_username_from_session(request)
    search_param = request.GET.get('search')
    url = settings.THOUGHTS_BACKEND + '/api/thoughts/'
    params = {
        'search': search_param,
    }
    result = requests.get(url, params=params)
    results = result.json()
    context = {
        'thoughts': results,
        'username': username,
    }
    return render(request, 'search.html', context)
```
整块等价代码可以在 repo 的`Chapter01`子目录中进行比较。
Note how we make a `get` request through the `requests` library to the defined search endpoint, which results in the `json` format being returned and rendered.
`THOUGTHS_BACKEND`根网址来自设置，以通常的姜戈方式。
这个例子很简单，因为不涉及认证。从用户界面捕获参数，然后将其发送到后端。请求在后端和获得结果后都得到正确的格式化，然后被呈现。这是两个微服务协同工作的核心。
一个更有趣的案例是`list_thought`([https://github . com/PacktPublishing/hand-On-Docker-for-micro-service-with-Python/blob/master/chapter 06/front/myth things/ideas . py # L18](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/blob/master/Chapter06/frontend/mythoughts/thoughts/thoughts.py#L18))视图。以下代码列出了登录用户的想法:
```
def list_thoughts(request):
    username = get_username_from_session(request)
    if not username:
        return redirect('login')
    url = settings.THOUGHTS_BACKEND + '/api/me/thoughts/'
    headers = {
        'Authorization': request.COOKIES.get('session'),
    }
    result = requests.get(url, headers=headers)
    if result.status_code != http.client.OK:
        return redirect('login')
    context = {
        'thoughts': result.json(),
        'username': username,
    }
    return render(request, 'list_thoughts.html', context)
```
这里，在做任何事情之前，我们需要检查用户是否登录。这是在`get_username_from_session`呼叫中完成的，如果他们没有登录，将返回`username`或`None`。如果他们没有登录，返回将被重定向到登录屏幕。
由于该端点需要认证，我们需要将用户的会话添加到请求的`Authorization`头中。用户的会话可以从`request.COOKIES`字典中获得。
作为保障，我们需要检查从后端返回的状态代码是否正确。对于这个调用，任何不是 200 (HTTP 调用正确)的结果状态代码都会产生一个到登录页面的重定向。
For simplicity and clarity, our example services are not handling different error cases. In a production system, there should be a differentiation between errors where the issue is that either the user is not logged in or there's another kind of user error (a 400 error), or the backend service is not available (a 500 status code).
Error handling, when done properly, is difficult, but worth doing well, especially if the error helps users to understand what happened.
`get_username_from_session`函数封装了对`validate_token_header`的调用，与上一章介绍的相同:
```
def get_username_from_session(request):
    cookie_session = request.COOKIES.get('session')
    username = validate_token_header(cookie_session,
                                     settings.TOKENS_PUBLIC_KEY)
    if not username:
        return None
    return username
```
`settings`文件包含解码令牌所需的公钥。
In this chapter, for simplicity, we copied the key directly into the `settings` file. This is not the way to go for a production environment. Any secret should be obtained through the Kubernetes environment configuration. We will see how to do this in the following chapters.
环境文件需要指定用户后端和想法后端的基本网址在哪里，以便能够连接到它们。
# 连接服务
仅通过`docker-compose`就可以测试服务的协同工作。检查用户后端和思想后端中的`docker-compose.yaml`文件是否对外公开了不同的端口。
思想后端公开端口`8000`，用户后端公开端口`8001`。这允许前端连接到它们(并暴露端口`8002`)。此图显示了该系统的工作原理:
![](img/1a463150-339d-4bf2-8a94-374bb6a34ec3.png)
您可以看到这三个服务是如何隔离的，因为`docker-compose`将创建自己的网络供它们连接。两个后端都有自己的容器，充当数据库。
前端服务需要连接到其他服务。服务的网址应添加到`environment.env`文件中，并应使用计算机的 IP 指示服务。
An internal IP such as localhost or `127.0.0.1` does not work, as it gets interpreted **inside the container. **You can obtain the local IP by running `ifconfig`.
例如，如果您的本地 IP 是`10.0.10.3`，则`environment.env`文件应包含以下内容:
```
THOUGHTS_BACKEND_URL=http://10.0.10.3:8000
USER_BACKEND_URL=http://10.0.10.3:8001
```
如果您在浏览器中访问前端服务，它应该会连接到其他服务。
A possibility could be to generate a bigger `docker-compose` file that includes everything. This could make sense if all the microservices are in the same Git repo, a technique known as **monorepo** ([https://gomonorepo.org/](https://gomonorepo.org/)). Possible problems include keeping both the internal `docker-compose` to work with a single system and the general one in sync so that the automated tests should detect any problems.
这个结构有点麻烦，所以我们可以把它转换成一个合适的 Kubernetes 集群，以本地开发为目标。
# 配置服务
要在 Kubernetes 中配置应用，我们需要为每个应用定义以下 Kubernetes 对象:
*   **部署**:部署将控制吊舱的创建，因此它们将始终可用。它还将根据映像创建它们，并在需要时添加配置。吊舱运行应用。
*   **服务**:该服务将使 RESTful 请求在集群内可用，名称简短。这将请求路由到任何可用的 pod。
*   **入口**:这使得服务在集群外可用，所以我们可以从集群外访问应用。
在这一节中，我们将详细地以思想后端配置为例。稍后，我们将看到不同部分是如何连接的。我们创建了一个 Kubernetes 子目录([https://github . com/PacktPublishing/hand-On-Docker-for-micro-service-with-Python/tree/master/chapter 06/thinks _ 后端/kubernetes](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/tree/master/Chapter06/thoughts_backend/kubernetes) )来存储带有每个定义的`.yaml`文件。
我们将使用`example`命名空间，因此请确保它已创建:
```
$ kubectl create namespace example
```
让我们从第一个 Kubernetes 对象开始。
# 配置部署
对于思想后端部署，我们将部署一个包含两个容器的 pod，一个包含数据库，另一个包含应用。这种配置使得在本地工作变得很容易，但是请记住，重新创建 pod 将重新启动两个容器。
这里的配置文件是完全可用的([https://github . com/PacktPublishing/hand-On-Docker-for-micro-service-with-Python/blob/master/chapter 06/thinks _ 后端/kubernetes/deployment.yaml](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/blob/master/Chapter06/thoughts_backend/kubernetes/deployment.yaml) )，所以我们来看看它的不同部分。第一个元素描述了它是什么及其名称，以及它所在的命名空间:
```
---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: thoughts-backend
    labels:
        app: thoughts-backend
    namespace: example
```
然后，我们生成`spec`。它包含了我们应该保留多少个豆荚以及每个豆荚的模板。`selector`定义监控哪些标签，应该与模板中的`labels`匹配:
```
spec:
    replicas: 1
    selector:
        matchLabels:
            app: thoughts-backend
```
`template`部分在自己的`spec`部分定义容器:
```
    template:
        metadata:
            labels:
                app: thoughts-backend
        spec:
            containers:
                - name: thoughts-backend-service
                  ...
                - name: thoughts-backend-db
                  ...
```
`thoughts-backend-db`比较简单。唯一需要的元素是定义容器和映像的名称。我们需要将拉取策略定义为`Never`，以指示映像在本地 Docker repo 中可用，并且没有必要从远程注册表中拉取它:
```
- name: thoughts-backend-db
  image: thoughts_backend_db:latest
  imagePullPolicy: Never
```
`thoughts-backend-service`需要定义服务的公开端口以及环境变量。变量值是我们之前在创建数据库时使用的值，除了`POSTGRES_HOST`，在这里我们有一个优势，即同一容器中的所有容器共享相同的 IP:
```
 - name: thoughts-backend-service
   image: thoughts_server:latest
   imagePullPolicy: Never
   ports:
   - containerPort: 8000
   env:
   - name: DATABASE_ENGINE
     value: POSTGRESQL
   - name: POSTGRES_DB
     value: thoughts
   - name: POSTGRES_USER
     value: postgres
   - name: POSTGRES_PASSWORD
     value: somepassword
   - name: POSTGRES_PORT
     value: "5432"
   - name: POSTGRES_HOST