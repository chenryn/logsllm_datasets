in fact, since it rounds up to the next power of two.  These
buckets will be retained even if you do \f(CW\*(C`%hash = ()\*(C'\fR, use \f(CW\*(C`undef
%hash\*(C'\fR if you want to free the storage while \f(CW%hash\fR is still in scope.
You can't shrink the number of buckets allocated for the hash using
\&\f(CW\*(C`keys\*(C'\fR in this way (but you needn't worry about doing this by accident,
as trying has no effect).
.Sp
See also \f(CW\*(C`each\*(C'\fR, \f(CW\*(C`values\*(C'\fR and \f(CW\*(C`sort\*(C'\fR.
.IP "kill \s-1SIGNAL\s0, \s-1LIST\s0" 8
.IX Item "kill SIGNAL, LIST"
Sends a signal to a list of processes.  Returns the number of
processes successfully signaled (which is not necessarily the
same as the number actually killed).
.Sp
.Vb 2
\&    $cnt = kill 1, $child1, $child2;
\&    kill 9, @goners;
.Ve
.Sp
If \s-1SIGNAL\s0 is zero, no signal is sent to the process.  This is a
useful way to check that a child process is alive and hasn't changed
its \s-1UID\s0.  See perlport for notes on the portability of this
construct.
.Sp
Unlike in the shell, if \s-1SIGNAL\s0 is negative, it kills
process groups instead of processes.  (On System V, a negative \fI\s-1PROCESS\s0\fR
number will also kill process groups, but that's not portable.)  That
means you usually want to use positive not negative signals.  You may also
use a signal name in quotes.
.Sp
See \*(L"Signals\*(R" in perlipc for more details.
.IP "last \s-1LABEL\s0" 8
.IX Item "last LABEL"
.PD 0
.IP "last" 8
.IX Item "last"
.PD
The \f(CW\*(C`last\*(C'\fR command is like the \f(CW\*(C`break\*(C'\fR statement in C (as used in
loops); it immediately exits the loop in question.  If the \s-1LABEL\s0 is
omitted, the command refers to the innermost enclosing loop.  The
\&\f(CW\*(C`continue\*(C'\fR block, if any, is not executed:
.Sp
.Vb 4
\&    LINE: while () {
\&        last LINE if /^$/;      # exit when done with header
\&        #...
\&    }
.Ve
.Sp
\&\f(CW\*(C`last\*(C'\fR cannot be used to exit a block which returns a value such as
\&\f(CW\*(C`eval {}\*(C'\fR, \f(CW\*(C`sub {}\*(C'\fR or \f(CW\*(C`do {}\*(C'\fR, and should not be used to exit
a \fIgrep()\fR or \fImap()\fR operation.
.Sp
Note that a block by itself is semantically identical to a loop
that executes once.  Thus \f(CW\*(C`last\*(C'\fR can be used to effect an early
exit out of such a block.
.Sp
See also \*(L"continue\*(R" for an illustration of how \f(CW\*(C`last\*(C'\fR, \f(CW\*(C`next\*(C'\fR, and
\&\f(CW\*(C`redo\*(C'\fR work.
.IP "lc \s-1EXPR\s0" 8
.IX Item "lc EXPR"
.PD 0
.IP "lc" 8
.IX Item "lc"
.PD
Returns a lowercased version of \s-1EXPR\s0.  This is the internal function
implementing the \f(CW\*(C`\eL\*(C'\fR escape in double-quoted strings.  Respects
current \s-1LC_CTYPE\s0 locale if \f(CW\*(C`use locale\*(C'\fR in force.  See perllocale
and perlunicode for more details about locale and Unicode support.
.Sp
If \s-1EXPR\s0 is omitted, uses \f(CW$_\fR.
.IP "lcfirst \s-1EXPR\s0" 8
.IX Item "lcfirst EXPR"
.PD 0
.IP "lcfirst" 8
.IX Item "lcfirst"
.PD
Returns the value of \s-1EXPR\s0 with the first character lowercased.  This
is the internal function implementing the \f(CW\*(C`\el\*(C'\fR escape in
double-quoted strings.  Respects current \s-1LC_CTYPE\s0 locale if \f(CW\*(C`use
locale\*(C'\fR in force.  See perllocale and perlunicode for more
details about locale and Unicode support.
.Sp
If \s-1EXPR\s0 is omitted, uses \f(CW$_\fR.
.IP "length \s-1EXPR\s0" 8
.IX Item "length EXPR"
.PD 0
.IP "length" 8
.IX Item "length"
.PD
Returns the length in \fIcharacters\fR of the value of \s-1EXPR\s0.  If \s-1EXPR\s0 is
omitted, returns length of \f(CW$_\fR.  Note that this cannot be used on
an entire array or hash to find out how many elements these have.
For that, use \f(CW\*(C`scalar @array\*(C'\fR and \f(CW\*(C`scalar keys %hash\*(C'\fR respectively.
.Sp
Note the \fIcharacters\fR: if the \s-1EXPR\s0 is in Unicode, you will get the
number of characters, not the number of bytes.  To get the length
in bytes, use \f(CW\*(C`do { use bytes; length(EXPR) }\*(C'\fR, see bytes.
.IP "link \s-1OLDFILE\s0,NEWFILE" 8
.IX Item "link OLDFILE,NEWFILE"
Creates a new filename linked to the old filename.  Returns true for
success, false otherwise.
.IP "listen \s-1SOCKET\s0,QUEUESIZE" 8
.IX Item "listen SOCKET,QUEUESIZE"
Does the same thing that the listen system call does.  Returns true if
it succeeded, false otherwise.  See the example in
\&\*(L"Sockets: Client/Server Communication\*(R" in perlipc.
.IP "local \s-1EXPR\s0" 8
.IX Item "local EXPR"
You really probably want to be using \f(CW\*(C`my\*(C'\fR instead, because \f(CW\*(C`local\*(C'\fR isn't
what most people think of as \*(L"local\*(R".  See
\&\*(L"Private Variables via \fImy()\fR\*(R" in perlsub for details.
.Sp
A local modifies the listed variables to be local to the enclosing
block, file, or eval.  If more than one value is listed, the list must
be placed in parentheses.  See \*(L"Temporary Values via \fIlocal()\fR\*(R" in perlsub
for details, including issues with tied arrays and hashes.
.IP "localtime \s-1EXPR\s0" 8
.IX Item "localtime EXPR"
Converts a time as returned by the time function to a 9\-element list
with the time analyzed for the local time zone.  Typically used as
follows:
.Sp
.Vb 3
\&    #  0    1    2     3     4    5     6     7     8
\&    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
\&                                                localtime(time);
.Ve
.Sp
All list elements are numeric, and come straight out of the C `struct
tm'.  \f(CW$sec\fR, \f(CW$min\fR, and \f(CW$hour\fR are the seconds, minutes, and hours of the
specified time.  \f(CW$mday\fR is the day of the month, and \f(CW$mon\fR is the month
itself, in the range \f(CW0..11\fR with 0 indicating January and 11
indicating December.  \f(CW$year\fR is the number of years since 1900.  That
is, \f(CW$year\fR is \f(CW123\fR in year 2023.  \f(CW$wday\fR is the day of the week, with
0 indicating Sunday and 3 indicating Wednesday.  \f(CW$yday\fR is the day of
the year, in the range \f(CW0..364\fR (or \f(CW0..365\fR in leap years.)  \f(CW$isdst\fR
is true if the specified time occurs during daylight savings time,
false otherwise.
.Sp
Note that the \f(CW$year\fR element is \fInot\fR simply the last two digits of
the year.  If you assume it is, then you create non\-Y2K\-compliant
programs\*(--and you wouldn't want to do that, would you?
.Sp
The proper way to get a complete 4\-digit year is simply:
.Sp
.Vb 1
\&        $year += 1900;
.Ve
.Sp
And to get the last two digits of the year (e.g., '01' in 2001) do:
.Sp
.Vb 1
\&        $year = sprintf("%02d", $year % 100);
.Ve
.Sp
If \s-1EXPR\s0 is omitted, \f(CW\*(C`localtime()\*(C'\fR uses the current time (\f(CW\*(C`localtime(time)\*(C'\fR).
.Sp
In scalar context, \f(CW\*(C`localtime()\*(C'\fR returns the \fIctime\fR\|(3) value:
.Sp
.Vb 1
\&    $now_string = localtime;  # e.g., "Thu Oct 13 04:54:34 1994"
.Ve
.Sp
This scalar value is \fBnot\fR locale dependent, see perllocale, but
instead a Perl builtin.  Also see the \f(CW\*(C`Time::Local\*(C'\fR module
(to convert the second, minutes, hours, ... back to seconds since the
stroke of midnight the 1st of January 1970, the value returned by
\&\fItime()\fR), and the \fIstrftime\fR\|(3) and \fImktime\fR\|(3) functions available via the
\&\s-1POSIX\s0 module.  To get somewhat similar but locale dependent date
strings, set up your locale environment variables appropriately
(please see perllocale) and try for example:
.Sp
.Vb 2
\&    use POSIX qw(strftime);
\&    $now_string = strftime "%a %b %e %H:%M:%S %Y", localtime;
.Ve
.Sp
Note that the \f(CW%a\fR and \f(CW%b\fR, the short forms of the day of the week
and the month of the year, may not necessarily be three characters wide.
.IP "lock \s-1THING\s0" 8
.IX Item "lock THING"
This function places an advisory lock on a shared variable, or referenced
object contained in \fI\s-1THING\s0\fR until the lock goes out of scope.
.Sp
\&\fIlock()\fR is a \*(L"weak keyword\*(R" : this means that if you've defined a function
by this name (before any calls to it), that function will be called
instead. (However, if you've said \f(CW\*(C`use threads\*(C'\fR, \fIlock()\fR is always a
keyword.) See threads.
.IP "log \s-1EXPR\s0" 8
.IX Item "log EXPR"
.PD 0
.IP "log" 8
.IX Item "log"
.PD
Returns the natural logarithm (base \fIe\fR) of \s-1EXPR\s0.  If \s-1EXPR\s0 is omitted,
returns log of \f(CW$_\fR.  To get the log of another base, use basic algebra:
The base-N log of a number is equal to the natural log of that number
divided by the natural log of N.  For example:
.Sp
.Vb 4
\&    sub log10 {
\&        my $n = shift;
\&        return log($n)/log(10);
\&    }
.Ve
.Sp
See also \*(L"exp\*(R" for the inverse operation.
.IP "lstat \s-1EXPR\s0" 8
.IX Item "lstat EXPR"
.PD 0
.IP "lstat" 8
.IX Item "lstat"
.PD
Does the same thing as the \f(CW\*(C`stat\*(C'\fR function (including setting the
special \f(CW\*(C`_\*(C'\fR filehandle) but stats a symbolic link instead of the file
the symbolic link points to.  If symbolic links are unimplemented on
your system, a normal \f(CW\*(C`stat\*(C'\fR is done.  For much more detailed
information, please see the documentation for \*(L"stat\*(R".
.Sp
If \s-1EXPR\s0 is omitted, stats \f(CW$_\fR.
.IP "m//" 8
.IX Item "m//"
The match operator.  See perlop.
.IP "map \s-1BLOCK\s0 \s-1LIST\s0" 8
.IX Item "map BLOCK LIST"
.PD 0
.IP "map \s-1EXPR\s0,LIST" 8
.IX Item "map EXPR,LIST"
.PD
Evaluates the \s-1BLOCK\s0 or \s-1EXPR\s0 for each element of \s-1LIST\s0 (locally setting
\&\f(CW$_\fR to each element) and returns the list value composed of the
results of each such evaluation.  In scalar context, returns the
total number of elements so generated.  Evaluates \s-1BLOCK\s0 or \s-1EXPR\s0 in
list context, so each element of \s-1LIST\s0 may produce zero, one, or
more elements in the returned value.
.Sp
.Vb 1
\&    @chars = map(chr, @nums);
.Ve
.Sp
translates a list of numbers to the corresponding characters.  And
.Sp
.Vb 1
\&    %hash = map { getkey($_) => $_ } @array;
.Ve
.Sp
is just a funny way to write
.Sp
.Vb 4
\&    %hash = ();
\&    foreach $_ (@array) {
\&        $hash{getkey($_)} = $_;
\&    }
.Ve
.Sp
Note that \f(CW$_\fR is an alias to the list value, so it can be used to
modify the elements of the \s-1LIST\s0.  While this is useful and supported,
it can cause bizarre results if the elements of \s-1LIST\s0 are not variables.
Using a regular \f(CW\*(C`foreach\*(C'\fR loop for this purpose would be clearer in
most cases.  See also \*(L"grep\*(R" for an array composed of those items of
the original list for which the \s-1BLOCK\s0 or \s-1EXPR\s0 evaluates to true.
.Sp
\&\f(CW\*(C`{\*(C'\fR starts both hash references and blocks, so \f(CW\*(C`map { ...\*(C'\fR could be either
the start of map \s-1BLOCK\s0 \s-1LIST\s0 or map \s-1EXPR\s0, \s-1LIST\s0. Because perl doesn't look
ahead for the closing \f(CW\*(C`}\*(C'\fR it has to take a guess at which its dealing with