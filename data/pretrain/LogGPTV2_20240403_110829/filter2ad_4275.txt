# Control-Flow Hijacking: Are We Making Progress?

## Author
Mathias Payer  
Purdue University  
Email: PI:EMAIL

## Abstract
Memory corruption errors in C and C++ programs remain the primary source of security vulnerabilities in modern systems. Over the past decade, the security community has developed several defenses, such as Data Execution Prevention (DEP), which effectively mitigates code injection attacks. However, control-flow hijacking and code reuse continue to pose significant challenges, even with the widespread adoption of Address Space Layout Randomization (ASLR) and stack canaries. These defenses are probabilistic and rely on information hiding, making attacks more difficult but not impossible.

Control-flow hijacking, which involves redirecting execution to an unintended location, remains a prevalent attack vector. Attackers often reuse existing code gadgets and exploit information disclosures to locate these gadgets. Despite the availability of strong defense mechanisms, their deployment has been slow due to factors such as the time required for implementation, incompatibility with specific features, and performance overhead. As a result, only a set of low-overhead but incomplete mitigations has been widely adopted in practice.

Control-Flow Integrity (CFI) and Code-Pointer Integrity (CPI) are two promising upcoming defense mechanisms aimed at protecting against control-flow hijacking. CFI ensures that the runtime control flow adheres to the statically determined control-flow graph, limiting attackers to valid transitions. CPI, on the other hand, enforces selective memory safety through bounds checks for code pointers by separating them from regular data.

In this paper, we compare a broad range of CFI mechanisms using a unified nomenclature. Our evaluation is based on:
1. A qualitative discussion of the conceptual security guarantees.
2. A quantitative security evaluation.
3. An empirical evaluation of performance in the same test environment.

For each mechanism, we assess:
1. The types of control-flow transfers protected.
2. The precision of protection for forward and backward edges.
3. For open-source compiler-based implementations, the generated equivalence classes and target sets.
4. The runtime performance.

## Keywords
Memory Safety, Control-Flow Hijacking, Control-Flow Integrity, Return-Oriented Programming

## Biography
Mathias Payer is a security researcher and an assistant professor in computer science at Purdue University, where he leads the HexHive group. His research focuses on protecting applications from vulnerabilities, particularly those related to memory corruption. His interests include system security, binary exploitation, software-based fault isolation, binary translation/recompilation, and (application) virtualization.

Before joining Purdue in 2014, Mathias spent two years as a Post-Doc in Dawn Songâ€™s BitBlaze group at UC Berkeley. He earned his Dr. sc. ETH from ETH Zurich in 2012, with a focus on low-level binary translation and security. His work has involved analyzing various exploit techniques and exploring methods to enforce integrity for subsets of data, such as code pointers. All prototype implementations of his research are open-source. In 2014, he founded the b01lers Purdue CTF team.

This material is based upon work supported, in part, by the National Science Foundation under Grant No. CNS-1513783, CNS-1464155, and CNS-1657711.

## References
[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-Flow Integrity. In Proceedings of the 12th ACM Conference on Computer and Communications Security, CCS '05, 2005.

[2] N. Burow, S. A. Carr, J. Nash, P. Larsen, M. Franz, S. Brunthaler, and M. Payer. Control-Flow Integrity: Precision, Security, and Performance. ACM Computing Surveys, 50(1), 2018, preprint: https://arxiv.org/abs/1602.04056.

[3] V. Kuzentsov, M. Payer, L. Szekeres, G. Candea, D. Song, and R. Sekar. Code Pointer Integrity. In OSDI: Symposium on Operating Systems Design and Implementation, 2014.

[4] L. Szekeres, M. Payer, L. Wei, D. Song, and R. Sekar. Eternal War in Memory. IEEE Security and Privacy Magazine, 2014.