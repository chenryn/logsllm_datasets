        // atomic free without locking if this is neither first or last slot
        //设置meta的avail_mask`freed_mask
        for (;;) {
            uint32_t freed = g->freed_mask;
            uint32_t avail = g->avail_mask;
            uint32_t mask = freed | avail;
            assert(!(mask&self));
            if (!freed || mask+self==all) break;
            if (!MT)
                g->freed_mask = freed+self;
            else if (a_cas(&g->freed_mask, freed, freed+self)!=freed)
                continue;
            return;
        }
        wrlock();
        struct mapinfo mi = nontrivial_free(g, idx);
        unlock();
        if (mi.len) munmap(mi.base, mi.len);
    }
meta、group、chunk的具体结构，以下通过debug进行分析。
## 分配释放
    store('a0a0', 'b0b0')
    store('a1a11', 'b1b1111')
    delete('a0a0')
`__malloc_context`是musl libc的全局管理结构指针，存放在libc.so的bss段
    gef➤  p __malloc_context
    $1 = {
      secret = 0x69448097523526a7,
      init_done = 0x1,
      mmap_counter = 0x0,
      free_meta_head = 0x0,
      avail_meta = 0x56042ee901f8,
      avail_meta_count = 0x59,
      avail_meta_area_count = 0x0,
      meta_alloc_shift = 0x0,
      meta_area_head = 0x56042ee90000,
      meta_area_tail = 0x56042ee90000,
      avail_meta_areas = 0x56042ee91000 ,
      active = {0x56042ee901d0, 0x0, 0x0, 0x56042ee901a8, 0x0, 0x0, 0x0, 0x56042ee900b8, 0x0, 0x0, 0x0, 0x56042ee90090, 0x0, 0x0, 0x0, 0x56042ee90068, 0x0, 0x0, 0x0, 0x56042ee90040, 0x0, 0x0, 0x0, 0x56042ee90018, 0x0 },
      usage_by_class = {0x1e, 0x0, 0x0, 0x7, 0x0 },
      unmap_seq = '\000' ,
      bounces = '\000' ,
      seq = 0x0,
      brk = 0x56042ee91000
    }
`active =
{0x56042ee901d0,0,0...`：堆管理器依据申请的size，将chunk分成48类chunk，由sizeclass指定。每类chunk由一个meta结构管理，meta管理的chunk个数有限，由`small_cnt_tab`指定。当申请个数超出一个meta所能管理的最大数量，堆管理器会再申请同类型meta管理更多的chunk，并且以双向链表结构管理这些相同类型的meta。  
`usage_by_class = {0x1e, 0x0, 0x0, 0x7,...`：表示当前各meta管理着的chunk个数。
`secret = 0x69448097523526a7`：在meta域每个page大小的首8个byte，都会存在一个校验key。
musl libc用以下的结构管理着meta、group以及chunk
分配了两个0x30的chunk，未释放。
    gef➤  p *(struct meta*)0x56042ee901a8
    $2 = {
      prev = 0x56042ee901a8,
      next = 0x56042ee901a8,
      mem = 0x7f79e1df5c50,
      avail_mask = 0x7c,
      freed_mask = 0x0,
      last_idx = 0x6,
      freeable = 0x1,
      sizeclass = 0x3,
      maplen = 0x0
    }
`prev`和`next`都指向本身，表示只有一个meta页，meta页由一个双向链表进行维护；  
`0x7f79e1df5c50`是`user data`域；  
`avail_mask = 0x7c = 0b1111100`表示第0、1个chunk不可用（已经被使用）；  
`freed_mask = 0x0`表示没有chunk被释放；  
`last_idx = 0x6`表示最后一个chunk的下标是0x6，总数是0x7个  
`sizeclass = 0x3`表示由`0x3`这个group进行管理。
`0x000056042ee901a8`指向meta结构的地址；  
后面8个byte表示chunk的头部结构：  
`0x0000`和`0x0001`表示当前chunk，距离group首地址`0x00007f79e1df5c58`的偏移为`0`和`0x40`；  
`0xa0`和`0xa1`表示当前chunk是group中的第0和1个chunk；  
再往后0x28个byte就是user data域，最多接收输入`0x28+4`个byte，占用下一个chunk的前4个byte。
同时，也分配了四个0x10的chunk，未释放
    gef➤  p *(struct meta*)0x56042ee901d0
    $3 = {
      prev = 0x56042ee901d0,
      next = 0x56042ee901d0,
      mem = 0x56042db99c50,
      avail_mask = 0x3ffffff0,
      freed_mask = 0x0,
      last_idx = 0x1d,
      freeable = 0x1,
      sizeclass = 0x0,
      maplen = 0x0
    }
`prev`和`next`都指向本身，表示只有一个meta页，meta页由一个双向链表进行维护；  
`0x56042db99c50`是`user data`域；  
`avail_mask = 0x3ffffff0 =
0b111111111111111111111111110000`表示第0、1、2、3个chunk不可用（已经被使用）；  
`freed_mask = 0x0`表示没有chunk被释放；  
`last_idx = 0x1d`表示最后一个chunk的下标是0x1d，总数是0x1e个  
`sizeclass = 0x3`表示由`0x3`这个group进行管理。
`0x0000`、`0x0001`、`0x0002`、`0x0003`表示距离group首地址偏移为`0`、`0x10`、`0x20`、`0x30`byte；  
`0xa0`、`0xa1`、`0xa2`、`0xa3`表示group中的chunk下标；  
往后8byte是user data，user data最多接收输入`8+4`个byte，占用下一个chunk
header的前4个byte（与x86的glibc类似）
释放两个0x10的chunk
    gef➤  p *(struct meta*)0x56042ee901d0
    $9 = {
      prev = 0x56042ee901d0,
      next = 0x56042ee901d0,
      mem = 0x56042db99c50,
      avail_mask = 0x3fffffe0,
      freed_mask = 0x3,
      last_idx = 0x1d,
      freeable = 0x1,
      sizeclass = 0x0,
      maplen = 0x0
    }
`freed_mask = 0x3 = 0b11`表示前两个chunk被释放；  
`avail_mask = 0x3fffffe0 =
0b111111111111111111111111100000`可以发现，此时前两个chunk仍然为不可分配的状态；
已释放的chunk会将chunk header的offset清零，并且将chunk下标置成`0xff`，不清空user data域。
释放一个0x30的chunk
    gef➤  p *(struct meta*)0x56042ee901a8
    $13 = {
      prev = 0x56042ee901a8,
      next = 0x56042ee901a8,
      mem = 0x7f79e1df5c50,
      avail_mask = 0x7c,
      freed_mask = 0x1,
      last_idx = 0x6,
      freeable = 0x1,
      sizeclass = 0x3,
      maplen = 0x0
    }
`freed_mask = 0x1`表示有1个已被释放的chunk。
同样，chunk header的offset清零，且chunk下标置`0xff`。
    const uint16_t size_classes[] = {
        1, 2, 3, 4, 5, 6, 7, 8,
        9, 10, 12, 15,
        18, 20, 25, 31,
        36, 42, 50, 63,
        72, 84, 102, 127,
        146, 170, 204, 255,
        292, 340, 409, 511,
        584, 682, 818, 1023,
        1169, 1364, 1637, 2047,
        2340, 2730, 3276, 4095,
        4680, 5460, 6552, 8191,
    };
    static const uint8_t small_cnt_tab[][3] = {
        { 30, 30, 30 },
        { 31, 15, 15 },
        { 20, 10, 10 },
        { 31, 15, 7 },
        { 25, 12, 6 },
        { 21, 10, 5 },
        { 18, 8, 4 },
        { 31, 15, 7 },
        { 28, 14, 6 },
    };
    static struct meta *alloc_group(int sc, size_t req)
    {
        size_t size = UNIT*size_classes[sc];
        int i = 0, cnt;
        unsigned char *p;
        struct meta *m = alloc_meta();///分配内存，用于建立一个group
        if (!m) return 0;
        size_t usage = ctx.usage_by_class[sc];
        size_t pagesize = PGSZ;
        int active_idx;
        if (sc  usage)
                i++;
            cnt = small_cnt_tab[sc][i];
        } else {
    ...
        ctx.usage_by_class[sc] += cnt;
    ...
几个有用的结构  
group分类表，由sc指定由哪个group管理：usage_by_class = {0,0,0,…}  
要申请的chunk大小，由这个大小计算出sc： req = 0x30 -> sc = 0x3  
malloc的chunk大小： UNIT _size_classes = 0x10_ 0x3 = 0x30  
设定该group最多有多少个chunk：ctx.usage_by_class[sc] = 30 = 0x1e
## 漏洞点（Info Leak）
0x30 chunk， malloc 6次，free 5次
    store('A', 'A')
    for _ in range(5):
        query('A' * 0x30)
`avail_mask = 0x40 = 0b1000000`除了最后一个chunk，其余chunk不可分配；  
`freed_mask = 0x3e = 0b111110`除第一个以及最后一个chunk，其余chunk已被释放
    gef➤  p *(struct meta*)0x55b9b0b551a8
    $2 = {
      prev = 0x55b9b0b551a8,
      next = 0x55b9b0b551a8,
      mem = 0x7fccf5fdcc50,
      avail_mask = 0x40,
      freed_mask = 0x3e,
      last_idx = 0x6,
      freeable = 0x1,
      sizeclass = 0x3,
      maplen = 0x0
    }
可以发现，free掉的chunk不会优先分配
chunk在被free后不会清空user data域
增加到malloc 8次，free 7次
    store('A', 'A')
    for _ in range(5):
        query('A' * 0x30)
    query('A' * 0x30)
    query('B' * 0x30)
`avail_mask = 0x7c =
0b1111100`被释放的chunk重新分配，也就是当耗尽该group的7个chunk时，堆管理器才会检查是否有已被free掉的chunk，将这些chunk的`avail_mask`置1，再重新分配。
    gef➤  p *(struct meta*)0x5575a83401a8
    $2 = {
      prev = 0x5575a83401a8,
      next = 0x5575a83401a8,
      mem = 0x7f54fbdeec50,
      avail_mask = 0x7c,
      freed_mask = 0x2,
      last_idx = 0x6,
      freeable = 0x1,
      sizeclass = 0x3,
      maplen = 0x0
    }
现在可以分配回先前已被释放的chunk，这样就有了uaf的利用机会。通过重新将带指针的结构体chunk分配回来，可leak出内存信息。
## 漏洞点（Hijack）
meta.h
    //line:90~100
    static inline void dequeue(struct meta **phead, struct meta *m)
    {
        if (m->next != m) {
            m->prev->next = m->next;
            m->next->prev = m->prev;
            if (*phead == m) *phead = m->next;
        } else {
            *phead = 0;
        }
        m->prev = m->next = 0;
    }
在审计源码时，可以发现这个经典的unsafe-unlink漏洞，跟早期glibc版本unlink宏出现的问题十分类似。
通过伪造fake meta，在删除该meta时，便会产生一次任意写，那么就有了劫持的机会。关于mooosl这道题的完整利用过程会在下篇文章中分析。