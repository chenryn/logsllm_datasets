### Participant Anonymity and Study Intent

Participants were asked to provide their comments in writing. In most cases, participants did not have official authorization from their employers to participate in the study, making anonymity crucial.

Initially, this effort was conceived as an internal project aimed at advocating for greater investment in software assurance. It was only after several interviews had been conducted and participants expressed interest in the results that we considered preparing a publishable report.

### Study Results

In this section, we discuss the results from each vendor in our sample. The terms "small," "medium," and "large" in the section titles refer to the approximate size of the vendor. For the purposes of this article, small means under US$100M in annual software sales, medium means US$100M to US$1B, and large means above US$1B. Sales volumes were estimated from [16].

Vendors were classified as "security" or "non-security" based on the predominance of their sales. This distinction is useful because companies perceived as security vendors face higher market expectations; customers assume that security vendors are less likely to have security flaws than non-security vendors.

#### A. Company M: Small Security Vendor

As a small security vendor, M has fewer resources to invest in software assurance and faces greater risks. The mantra is, "Small security companies get one chance." A serious security flaw in their product could ruin their reputation and potentially put them out of business. M does not have a dedicated software assurance team (although there is a substantial QA team), nor is there a single person with overall responsibility for software assurance other than the head of product development.

M employs several techniques to ensure software assurance:

- **Cryptography:** They use FIPS 140-validated cryptography (licensed from another vendor) in their products to reduce the risk of cryptographic flaws.
- **Operating System Hardening:** Because their product is primarily shipped in appliance form, they expend considerable effort in stripping down the underlying operating system to reduce the risk of vulnerabilities.
- **QA Emphasis:** The QA process places significant emphasis on finding security flaws.
- **Informal Training:** New employees are paired with more experienced staff for informal security training, fostering a culture of awareness. However, no formal training is provided.
- **Penetration Testing:** The primary focus for software assurance is penetration testing, performed by third parties hired by M and their customers.
- **Language Choice:** M's product is written entirely in Java, which insulates them from many common security flaws found in commercial software (e.g., buffer overflows, integer overflows).

Several of M's customers have conducted detailed penetration tests, in addition to the testing M performs. M conducts some manual source code reviews but finds this method expensive and relatively unproductive compared to other techniques. There is no formal threat modeling, but the design review includes approval by product management, the chief architect, and the quality assurance director. M has considered using a honeypot to learn about attacks on their product but has not done so due to resource limitations. They do not use automated scanning or fuzzing tools, although they have used generic scanners to find trivial flaws.

M believes that penetration testing provides the greatest value in reducing security flaws, followed by their emphasis on QA testing. M recognizes that bad publicity from a security exploit could lead to their failure as a company, and this motivates them more than regulation. While government customers inquire about Common Criteria [3] assurance, commercial customers rarely ask about software assurance, generally only inquiring about the hardening of the underlying operating system. M believes that customers assume their product is secure because they are a security vendor.

As a security vendor, software assurance has always been a concern for M. As the company has grown, it has increasingly focused on penetration testing.

#### B. Company W: Medium Security Vendor

As a medium security vendor, W knows its customers rely on their product to secure their systems. There is no single person responsible for software assurance at W; each product team has an informal structure for their own software assurance activities. Within each team, W has processes in place to prevent product releases if serious security vulnerabilities are found and to promptly release fixes for any product releases in use by customers.

W uses the following techniques to gain software assurance:

- **QA Team:** The QA team performs dynamic testing, source code analysis using proprietary tools, and penetration testing.
- **Third-Party Testing:** They perform FIPS 140-2 and Common Criteria [3] testing using third-party labs. Unlike many vendors, W finds CC evaluations useful, and reports that security flaws have been found during these evaluations.
- **Training:** Newly hired developers receive approximately two weeks of training, with much of it focused on software assurance. Refresher courses are provided to update developers on new threats.

While significant emphasis is placed on the QA team, W does not have a formal process for threat modeling. Designs are reviewed to ensure they meet security standards. W finds that training is the most important factor in ensuring their product is secure, and they place particular emphasis on hiring well-trained employees.

W's motivations differ from many other companies in this study. As a non-US company, their products are treated with some suspicion by the US government. Third-party testing, especially Common Criteria, helps allay those fears. W is less concerned with bad publicity and believes that investing in software assurance is the right thing to do for their customers. W's customers rarely ask about software assurance, probably because the brand name gives them confidence that W is doing a good job.

W's customers frequently perform their own security testing, including penetration testing, and can report results back to W. Independent third parties also test W's products, but identified issues are often due to misconfiguration. As a security company, W has been concerned with software assurance since its early days.

#### C. Company F: Small Security Vendor

As a small security vendor that has been in business for a long time, F recognizes the risks of security failures. While there is no single person responsible for software assurance (other than the head of engineering), software assurance has a significant influence at F and can stop releases if significant security flaws are found.

F uses the following software assurance techniques:

- **Penetration Testing:** The primary focus is on penetration testing during the development process. F has two full-time software assurance specialists on staff (out of a total R&D staff of about 100). Both have worked for F for many years and are familiar with all the products. This allows them to rotate between testing existing and new products and to build custom tools for use by QA and developers.
- **Manual Source Code Review:** The software assurance specialists also perform some manual source code reviews. Development teams conduct their own design reviews because they are aware of the issues involved in building security products.
- **Security Review Board:** A security review board, including the software assurance specialists, meets every two weeks to examine reported flaws and determine their severity. A separate bug-tracking system is used for security flaws to ensure access to vulnerability details is closely controlled.
- **Incident Response:** F has an incident response system that includes informing customers of severe problems without solutions, allowing them to be on alert for attacks even before a fix is available.
- **Government Compliance:** To satisfy government customers, F performs FIPS 140-2 and Common Criteria evaluations of their products.
- **Training:** The software assurance specialists offer training courses for developers and testers twice a year, designed to keep them up to date on threats. Much of the material comes from conferences and workshops the specialists attend, such as BlackHat. These two-hour courses are videotaped for internal use, and F has considered selling the training as an offering. Whenever possible, these sessions use flaws found in their own products to demonstrate the threats.

F has examined automated source code review tools but found them generally inadequate due to the number of false positives and high per-user cost. However, they have developed some custom tools to look for specific problems in their products. Software assurance is critical to maintaining their place in the market. Customers sometimes ask about software assurance in RFPs through questions such as, "Is your product ethically hacked?" or "What is your vulnerability and patch management process?" or "Are there third-party security reports available on your product?"

Security flaws in embedded third-party and open-source products have been a serious problem for F, as have products acquired through corporate acquisitions. While F does not do source code reviews of these products, they perform a brief search for malware before incorporating third-party software and subject it to penetration testing.

#### D. Company H: Large Security Vendor

Like many companies in the survey, H has grown through numerous acquisitions. A standardized software development process with security elements has been defined but is not uniformly applied or enforced. A centralized team of security evangelists in the office of the CTO provides technical assistance to all product development organizations.

Software assurance techniques used at H include:

- **Training:** Training throughout the company focuses on architectural reviews, secure coding, and testing processes. The training materials were initially licensed from a major university and have since been customized. H further customizes the training for product groups to maximize relevance to the staff. While training is usually a one-time event, organizational turnover is high enough that the training is repeated regularly in each location.
- **Threat Modeling:** In some cases, threat modeling is part of the design process.
- **Source Code Analysis Tool:** A company-wide license to use a source code analysis tool, along with training by the evangelist team on how to use the tool effectively.
- **Penetration Testing:** An in-house penetration testing team, coupled with third-party penetration testing when needed (e.g., when the in-house team is unavailable).
- **Acquisition Assessments:** Use of a third-party team to assess the security status of products being considered for OEM or acquisition, to minimize the risk of acquiring security vulnerabilities. This review team currently operates after the OEM arrangement or acquisition has been completed. The evangelist team believes it would be more effective before the deal is signed, but this change has not occurred.

H finds that training is the most effective method for ensuring software assurance, as it reduces problems before they occur. H has performed several Common Criteria evaluations of their products and has found that the paperwork-heavy process is largely orthogonal to their goals of improving software assurance.

A unique problem noted by H is geography. Like most large software vendors, H develops software worldwide, and most penetration testing is performed in one of their lower-cost locations. H considered and rejected locating their penetration testing team in China due to concerns by US government customers that a Chinese national might discover a vulnerability, conceal it, and later try to exploit it. For some products, H performs penetration testing in the US due to export limitations.

Several years ago, H was hit by a string of product vulnerability disclosures, resulting in angry customer calls to corporate executives and causing brand and image issues. Until then, executive management at H was not focused on software assurance. Thus, H's motivations are primarily to avoid a repetition of the bad publicity.