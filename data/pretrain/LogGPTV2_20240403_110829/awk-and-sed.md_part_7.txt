我们已经看过了表达式中的两个基本元素：
成排的字符
不匹配什么。
很明显使用元字符可以扩展或限制可能的匹配。你可以更多地控制匹配什么和
一个操作符。
以一个字面值或变量表示的值。
QQ群：
转义随后的特殊字符。
有 sed和grep 的一些非常旧的版本中不能使用）。
n 次出现，而且\In,m\}匹配 n 和m之间的任意次出现。
达式指定的字符）。\In\}将匹配n次出现，
匹配它前面某个范围内单个字符出现的次数（包括由正则表
行符。
尾。在 awk 中匹配字符串的结尾，即使字符串包含嵌入的换
如果作为正则表达式的最后一个字符，则表示匹配行的结
如果作为正则表达式的第一个字符，则表示匹配行的开始。
字符在被指定为类中的成员时都会失去它们原来的含义
匹配方括号中的字符类中的任意一个。如果方括号中第一个
达式指定的字符）
配换行符。
换
字
字符为右方括号（]）则表示它是类的成员。所有其他的
行符。连字符（-）用于表示字符的范围。如果类中的第一
类中列出的那些字符以外的所有字符。在awk 中，
符为脱字符号（）：
配除换行符以外的任意单个字符。在awk中，
途
50192241
43 -
第
三章
了解正则表达式语法
，\[n,\至少匹配
，句点也能匹
，也匹配
（只
元
---
## Page 44
在“\n”结构中的n表示从1到9之间的一个数字，在第五章“基本的 sed 命
另外，sed 使用反斜杠将一组普通字符被解释为元字符，如图3-2 所示。
搜索包含这个请求的行，
反斜杠常用于匹配以句点开始的troff 请求或宏。
的扩展集的一部分时才可用。在一下几节中我们将介绍每个元字符的用法，
特殊字符 
扩展的元字符（egrep 和 awk)
还
表达式匹配由3个空格跟随的句点。
是
它
元字符反斜杠（\）将元字符转换成普通字符（和将普通字符转换成元字符）
普遍存在的反斜杠
先从反斜杠开始介绍。
方
元字符在正则表达式中有特殊的含义，
O
+
还可以用反斜杠转义反斜杠。例如，troff中的字体改变请求是“\f”。为了
{n,m}
元字符，如果想匹配句点，
强制将任意元字符解释为普通文字，以便匹配该字符本身。例如，句点（.）
大多数awk实现仍然不支持这种表示法。
1\f
\.口□□
. nf
QQ群：
egrep 和 POSIX awk 而不是传统的 egrep 或 awk。）
匹配它前面某个范围内单个字符出现的次数（包括由正则表达式
对正则表达式分组
出现，
指定的字符）
指定可以匹配其前面的或后面的正则表达式 (替代方案)
匹配前面的正则表达式的零次或一次出现
匹配前面的正则表达式的一次或多次出现
用途
[n,m}匹配n和m之间的任意次出现。
50192241
可以使用下面的正则表达式：
那么就需要用反斜杠对其进行转义。下面的正则
[n}表示匹配n次出现，
 与+和*在算术表达式中具有特殊含义的
第三章 
了解正则表达式语法
［n,}至少匹配n次
（用于POSIX的
---
## Page 45
注
Chapter
you will find several examples in Chapter 9.
chapter 的序列：
字面字符或其他元字符的前面或后面。例如，下面编写的正则表达式搜索
将匹配包含序列“80286,
例
假定我们正在描述一个字符序列，使用通配符元字符可以指定任何字符都可以
通配符元字符或者句点（.）被认为是与变量等价的。
通配符
图3-2：转义sed中的元字符
令”中将解释它的用法。
不
该
S
式
它
只
匹
式
￥
（在 awk 中，句点甚至可以匹配嵌入式换行符）。
任
匹配换行符，
示列所搜
 grep 
行。然而，
有可能与固定的字符串模式“chapter”具有相同的匹配。请看下面的示列：
搜索
匹配模式开头或结尾处的任何字符没有什么用。因此，通配符字符通常放在
配小数点或句点，必须用反斜杠转义点。
充的一个位置
意值。
chapter.
80.86
如果要索索包含Intel系统微处理器的讨论文件，使用下面的正则表达
，在正则表达式中，
Ten
Chapter.
pentium系列微处理器打破了我们简单的模式匹配实验，破坏了其
’则匹配那一行。
与
趣味性。
有一种不同的情况----如果“chapter”出现在行尾。因为通配符
QQ群：
“chapter”相匹配的字符串，
 Chapter and Verse'
置。
，所以“chapter”不匹配那一行，而固定字符串模式
，更不必说最初的 8086了。
50192241
 sample
：
句点（.）是代表除换行符以外的任意字符的通配符
“80386,
 she said.
45-
”或“80486.”（注2）的行。为了
而使用“chapter”也将匹配同样
n
第三章
，在某些搜索中，
变量表示算术表达式中的
了解正则表达式语法
这个表达
---
## Page 46
Hits(击中)
表达式的理解。可以按下面的方式解析模式匹配的结果：
对匹配描述进行测试可以确保这个描述和所期待的一样。它通常揭示一些令人
满意为止。
理解要解决的问题以及如何解决它。步骤2类似于编写程序代码，而步骤3相
这个过程实质上与程序员开发程序的过程相似。
3
.7
编写正则表达式的过程涉及3个步骤：
获得某个语义的正确理解一样。
惊
况和上下文中。
的书（或者满足与不确定的选择过程）。
你拿一本书，而且如果摆在面前有很多书，那么就需要更加明确地描述你想要
也许你会认为，
需
有说明销售人员，
并知道这些变量的值，
味着程序总是如你所愿的那样正确地工作。
为了所有实用化的用途，
编写正则表达式
达
不
整
换
东
要
京奇的事。仔细检查测试的结果、比较输出和输入，这可以大大地提高对正则
于运行程序并根据规范测试它。步骤2和步骤3需重复进行，知道程序令人
测试模式来查看它匹配的内容。
式的元素也不难。正则表达式允许编写简单的或复杂的模式描述。而使编写
要重新用公式表示为：
或者公式表示得不正确。例如，如果程序计算机下面的表达式：
知道要匹配的内容以及它如何出现在文本中。
句话说，
西。
的输出，
编写一个模式来描述要匹配的内容。
PAY = WEEKLY_SALARY * 52 + COMMISSION
PAY = WEEKLY_SALARY * 52
，可以断定真正的问题（排除输入或语法错误）在于如何描述想要的
应该考虑纠正问题的地方是描述想要的结果的表达式。
QQ群：
复杂性是语言本身所固有的，就像你并不总能通过查询字典来
，编写第一个表达式的人没有完全理解问题所涉及的范围，
他也得到了一份佣金。所以为了描述这种情况，这个表达式
，它将计算出正确的结果。但是有人会反对，
50192241
你可以通过使用程序产生正确的结果。然而，并不意
9
多数情况下，
第三章 
，步骤1可以当作规范,
如果程序不能产生
了解正则表达式语法
，因为公式没
，表达式不完
，它反映
因此
---
## Page 47
UNIX shelI使用相同的语法，因此，可以使用字符类在UNIX命令中制定文件
这一模式匹配包含3个字符的字符串，最后一个字符是从1到5的任意数字。
用下面的正则表达式提取这些行中的任意一行：
如果一个文件中包含结构化的标题宏，
这个正则表达式可以匹配“what”或“What”。
大写或小写的形式出现，则可以指定：
字符类在处理大写和小写字母时非常有用。例如，如果“what”可能以首字母
占据一个位置。
字符类是对通配符概念的改进。我们可以列出要匹配的字符，
字符类
字面值或其他元字符组合使用可以扩展匹配的范围，同时也减少了不想匹配的
在扩大和缩小匹配范围方面，
“them”通常比字符串“the”产生的匹配更少。
要的匹配。给固定字符串模式添加每个字符都可能减少匹配数量。
模式是“hat”
还决定匹配“What”
当你必须使用固定的字符串描述模式时，困难尤其明显。
错假警报，通常扩展可能的匹配来试着捕获遗漏。
尝试完善模式的描述也可以从对立段解决；
Omissions（遗
Misses
“ somewhat "
串
范
的任意行，
置的任意字符。使用方括号元字符（’）将字符列表括起来，
围。
这是我不想匹配的行。
这是我不能匹配但想要匹配的行。
\. H[12345]
这是我不想匹配的但却匹配了的行，
这是我想要匹配的行。
[Ww] hat
（未击中）
QQ群：
第一个字符是“W”
，即两者共用的最长的字符串。显然，搜索“hat”
漏）
那么同时匹配“What”和“what”
50192241
在模式中使用元字符可以提供更大的灵活性。与
或“w”
，例如：.H1，.H2，.H3,等等，那么可以
可以试着通过限制可能的匹配来排
，它匹配包含这4个字符的字符
第三章
它可以匹配“Whatever”
”的惟一的固定字符
，从固定字符串的模式
了解正则表达式语法
，而不是匹配特殊
其中每个字符
将产生不想
字符串
或
---
## Page 48
L连字符（-）用于指定一个字符范围。例如，所有大写英文字面（注3）的范围
字符的范围
个或一个1。
反斜杠只在awk中是特殊的，因此可以使用字符类“[a\]1]”以匹配一个a、
表3-2：字符类中的特殊字符
但是第二个点解释为字面意义。在方括号中、标准的元字符会失去它们的含
时）。注意：在这个表达式中有3个点，第一个和最后一个点是通配符元字符，
句点，随后是两个空格和任意一个字符的字符“。
这个表达式匹配“任意后面有一个感叹号、问号、分号、冒号、逗号、引号或
例，假设想要指定不同的标点符合来结束句子：
由grep产生的输出为每个要打印的行都标识了文件名。作为字符类的另一个实
注意必须用引号引住其中的模式，以便把它传递给grep而不只是由shel解释。
ch02:.H2 "A Quick Tour"
ch02:.H1
ch01:. H2 
ch01:.h
ch01:.H2
ch01:.H1
ch01:. H1
$ grep’\.H[123]′ch0[12]
可以指定为：
的结束和另一个句子的开头之间有两个空格的地方（当一行中有这种情况
ch01:.H
ch01:. H1
名。例如，为了从一组由章组成的文件中提取标题可能要输入：
字符
字
义
符。
。因此，方括号中的点表示一个句点。表3-2列出了方括号中具有特殊含义的
.[!?;:,".]
1 "Getting Started"
1 "Contents of Distribution Tape"
"Specifying Printers"
"Using the Mouse"
"Specifying Input Devices"
"Configuring the System"
QQ群：
仅当在第一个位置时表示反转匹配
围。
当它不在第一个或最后一个位置时，表示一个范
转义任意特殊字符（只用于awk中）
功能
50192241
48
第
三章
了解正则表达式语法
---
## Page 49
在awk中，还可以使用反斜杠转义在范围中出现的连字符或闭方括号，但是语法
这个表达式匹配“任意后面跟有句点、问号或感叹号的小写或大些字面”
这个表达式将匹配“任意单个字符，
字符范围：
and chapter 12. 
我们在下面的示例中将连字符（-）放在第一位：
如果闭括号（]）是作为类中的第一个字符出现（或者是脱字符后的第一个字
根据这个任务，
注3：
它
该字符类有助于解决匹配文章引用的问题。请看下面的正则表达式：
一个数字的数字范围可以指定为：
是
符
定
点
空
第一个或最后一个字符，
多个类，
、分号、
空格来避免匹配两个数字。也可以指定不在那个位置匹配的字符类，
意单个数字
[-+*/]
[a-zA-Z][.?!]
[cC]hapter 
[0-9]
[A-Z]
冒号、单引号和引号”。
实际上当处理非ASCII字符集和/或非英语时，
可以描述多个连续的字符，例如：
标准解决了这个问题，后面会看到新的POSIX特征。
QQ群：