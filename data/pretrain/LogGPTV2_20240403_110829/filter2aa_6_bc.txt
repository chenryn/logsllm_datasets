字符串
  ""
  " 字符串 "
字符
  单个字符
  单个字符 字符序列
单个字符
  任意Unicode字符除了"\ 以及控制字符
  \" \\ \/ \b \f \n \r \t
  \u 4位16进制字符
数值
  整型
  整型分数
  整型指数
  整型分数指数
整型
  数值
  数值1～9 数字
  -数值
  -数值1～9 数字
分数
  . 数字
指数
  e数字
数字
  数值
  数值 数字
e
  e e+ e-
  E E+ E-
全局变量JSON为生成、解析JSON字符串提供了命名空间。
22.2 JSON.stringify(value, replacer?, space?)
JSON.stringify(value, replacer?, space?)将JavaScript值value转换成JSON字符串，它有2个可选参数。
可选参数replacer用于转换前替换参数value。具体如下。
节点访问函数（详见22.4“通过节点访问函数转换数据”），会在值被转为字符串之前转换树节点的值。例如：
调用replacer：
属性键白名单，用于隐藏那些非数组对象内属性不在这个列表中的所有属性。例如：
对数组来说属性键白名单是无效的：
可选参数space会影响输出格式。如果没有这个参数，字符串变换后的结果将会是单行的文本：
有了它，可以插入新行并且通过数组和对象的嵌套增加缩进。有两种方法可以指定如何缩进。
（1）数字
将数字乘以对应量级的缩进，并用对应多的空格来缩进。小于0解释成0；大于10解释成10。
（2）字符
使用给定的字符为每个层级缩进。只有前10个字符会被用到：
因此，以下对JSON.stringify()的调用会输出一个格式完美的对象树：
22.2.1 被JSON.stringify()忽略的数据
在一个对象中，JSON.stringify()只考虑自己的枚举属性（见17.8“属性特性和属性描述符”）。下面的例子证明JSON.stringify()忽略了对象自身的不可枚举属性obj.foo。
JSON.stringify()将一个不被JSON支持的值（例如函数和undefined）解析成什么取决于在哪里遇到它们。一个不被支持的值stringify()后返回的是一个undefined而不是string。
不被支持的属性直接被忽略：
不被支持的值在数组中被解析成null：
22.2.2 toJSON()方法
如果JSON.stringify()遇到一个对象，它具有toJSON方法，那么可以使用该方法来获得字符串化的值。例如：
Date对象已经有了ISO8601日期字符串的toJSON方法：
toJSON方法的完整签名如下：
关键的参数可以允许你根据上下文解析成不同的JSON。但是它始终是一个字符串，而且表示了它在父节点中所在的位置：
（1）根位置
空字符串
（2）属性值
属性键
（3）数组元素
元素的索引作为一个字符串
我会通过以下对象展示toJSON()：
如果你使用JSON.stringify()，每次出现obj都会被替换为0。当遇到obj在属性'foo'和第一个数组元素中作为值出现的时候toJSON()方法都会被通知到：
内置的toJSON()方法如下：
Boolean.prototype.toJSON()
Number.prototype.toJSON()
String.prototype.toJSON()
Date.prototype.toJSON()
22.3 JSON.parse(text, reviver?)
JSON.parse(text, reviver?)解析文本格式的JSON数据，然后返回相应的值。下面是一些例子：
reviver参数是可选的，它是一个节点访问函数（node visitor，详见22.4“通过节点访问函数转换数据”）。它可以用来转换解析后的数据，在下面的例子中，字符串表示的日期被转换成日期对象：
以下是执行结果：
22.4 通过节点访问函数转换数据
JSON.stringify()和JSON.parse()都可以通过传入一个函数转换数据。
JSON.stringify()可以在转换成JSON前改变数据。
JSON.parse()解析JSON，并可以后处理生成的结果数据。
JavaScript处理的数据是由数组、对象和其他的叶子节点属于基础类型（boolean、numbers、strings、null）的节点组成的树状数据。所以将传入的转换函数命名为节点访问函数（node visitor）。JSON.stringify()和JSON.parse()会遍历整个树，并且在访问每个节点时都会调用节点访问函数。节点访问函数结构如下：
参数有：
this表示当前节点的父元素。
key表示当前节点在父元素中的键值。key常为字符型。
value表示当前节点。
根节点root是不存在父元素的。当root被访问，一个伪父元素被创建，此时的参数值是：
this是{ '': root }。
key是''。
value是root。
节点访问函数返回值存在以下3种可能：
返回value，不做任何修改。
返回一个不同值，替换当前节点。
返回undefined，此时当前节点被删除。
下面是节点访问函数的一个例子，它将传参都打印出来了。
可以使用上面的函数检查JSON方法是如何遍历数据的。
22.4.1 JSON.stringify()
采用的是前序遍历算法（父元素先于子元素），首先访问的是那特殊的根节点，也称伪根节点。最后一行的结果是所有遍历之后，stringify()返回的字符串。
22.4.2 JSON.parse()
采用的是后序遍历算法（子元素先于父元素），叶节点先被访问，而伪根节点最后被访问。最后一行的结果是所有遍历之后，parse ()返回的值。
第23章 标准全局变量
本章参考的是ECMAScript规范中所描述的全局变量标准。Web浏览器有更多的全局变量，这些在MDN（https://developer.mozilla.org/en-US/docs/Web/API/Window）上面有罗列。所有的全局变量都是全局对象本身或者继承自全局对象（在浏览器中是window）的属性（全局对象的概念可以参考16.8“全局对象”）。
23.1 构造器
要详细了解构造器，可以参考对应的章节：
Array（18.2.1“数组构造函数”）
Boolean（8.4“原始值的包装对象”）
Date（20.1“Date构造函数”）
Function（23.4.2“通过new Function()执行代码”）
Number（8.4“原始值的包装对象”）
Object（17.2“把任意值转化为对象”）
RegExp（19.3“创建正则表达式”）
String（8.4“原始值的包装对象”）
23.2 Error构造器
要详细了解Error构造器，可以见第14章：
Error
EvalError
RangeError
ReferenceError
SyntaxError
TypeError
URIError
23.3 非构造器函数
不少全局函数都不是构造函数，我们会在本节中一一了解。
23.3.1 文字的编码和解码
以下函数可以用来处理URI的编码和解码。
encodeURI(uri)
在uri中我们用百分号来编码特殊字符。除了以下字符，其余的特殊字符都会被编码。
例如：
encodeURIComponent(uriComponent)
除了以下字符，所有的字符都会被百分号编码：
相比encodeURI，在url和文件名中的字符都被编码了。因此，你可以用这个函数来将任意的文字转化为一个合法的文件名和URL片段。例如：
decodeURI(encodedURI)
将一个由encodeURI编码的百分号编码的URI解码：
encodeURI并不会将URI字符进行编码，统一decodeURI也不会对URI字符解码，即便它们被正确编码：
decodeURIComponent(encodedURIComponent)
将一个有encodeURIComponent编码的百分号编码进行解码。相比于decodeURI，所有的百分号编码都会被解码：
以下函数被废弃了：
escape(str)对str进行百分号编码。由于该函数没有对非ASCII字符正确处理，因此建议使用encodeURIComponent()来代替。
unescape(str)对str进行百分号解码。同样由于不能正确地处理非ASCII字符，建议使用decodeURIComponent()来代替。
23.3.2 数值归类与数值转换
下面的方法用来归类和转换数值：
isFinite(number)（11.3.2“Infinity的检测”）；
isNaN(value)（11.3.1“陷阱：检查一个值是否为NaN”）；
parseFloat(string)（11.2.2“parseFloat()”）；
parseInt(string, radix)（11.7.4“通过parseInt()得到整数”）。
23.4 通过eval()和new Function()来动态执行JavaScript代码
本节将演示如何在JavaScript中动态执行代码。
23.4.1 使用eval()执行代码
其调用为：
如此将会执行str中的JavaScript代码。例如：
注意eval()语句（详见7.3“表达式和语句”）：
在严格模式中使用eval()
你应该在严格模式中使用eval()（详见7.8“严格模式”）。在非严格模式中，eval所执行的代码会在当前作用域下创建本地变量。
而这在严格模式中不会发生：
然而在严格模式中，eval所执行的代码仍然可以读写当前上下文中的变量。如果要防止这样的读写，你需要间接地调用eval()。
在全局作用域中间接调用eval()
执行eval()的方式有两种。
直接调用：直接调用eval函数。
间接调用：通过将eval()存储在另一个名称下并通过call()方法来调用，call是window对象的方法。
我们可以看到，以下是直接通过eval()在当前作用域执行代码：
相比之下，间接执行eval()则是在全局作用域下：