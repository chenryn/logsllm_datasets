Most challenging to emulate were calls to either yield con-
trol to the normal world or to store and use TZOS callback
vectors; these required careful saving and restoring of register
contexts. For QSEE and OP-TEE, we did not have to emulate
the secure monitor since we reuse the original secure monitor.
9.1.2 Hardware Emulation
QSEE required the most hardware emulation. QSEE runs
only on phones with a Qualcomm chipset, and hence expects
certain hardware components to exist. In contrast, the other
TZOSes may run on a variety of devices, and makes few
assumptions about hardware. Instead, it is the secure monitor
that interacts directly with most hardware.
Table 4 shows the number of types of registers we had to
emulate to boot up and run QSEE categorized by the access
patterns in Section 7.1. By default, we: (i) set the MMIO
region to behave like normal RAM (write-read) so that a
read gets the most recent value written, and (ii) initialize the
MMIO region to return zeros unless otherwise speciﬁed. In
total, there were 617 distinct MMIO addresses that required
798    29th USENIX Security Symposium
USENIX Association
emulation beyond these defaults. One observation further
simpliﬁed the emulation required. QSEE accessed certain
MMIO regions in the same way across different iterations of
a loop. We believe that these regions correspond to multiple
instances of the same hardware components. We were able
to repeat the same emulation for these regions. Discounting
these duplicates, we get only 232 unique MMIO registers that
we needed to emulate. For OP-TEE, we needed to emulate
only 3 MMIO registers.
Table 8 in Appendix A.2 quantiﬁes the amount of code
added or modiﬁed for PARTEMU’s core and for emulated
software and hardware components across all TZOSes. In
total, we had to add or modify around 14.5K lines of code.
9.1.3 Effort to Support TZOS Upgrades
We found that the upgrades we did only required incremental
modiﬁcations, and that we were able to re-use most of our
work for the previous version. In general, if there are dras-
tic changes to hardware or software components, we would
need to re-examine dependencies for the changed component.
However, we ﬁnd that such signiﬁcant changes are rare for
components that the TZOS depends on; they are more com-
mon for normal-world components. For Kinibi, we upgraded
from version 310B to 400A; the only component we needed
to change was the TEE driver. For QSEE, we upgraded be-
tween minor versions, and we only needed to add support for
3 additional MMIO registers.
9.2 Use Case: Fuzz Testing TAs
We collected TA binaries from 16 images across 12 lead-
ing Android smartphone vendors - Asus, Google, HTC, LG,
LeEco, Motorola, Nokia, OnePlus, Razer, Samsung, Sony, and
Xiaomi, and a leading IoT vendor. These are represented by
Images A to P in a random order in Table 5. These devices
run one of QSEE v4.0, Kinibi v400A, TEEGRIS v3.1, or
OP-TEE v3.1.0 as the TZOS. In total, we collected 273 TAs.
From their names, these TAs appear to encompass a wide
variety of functionality such as key management, authentica-
tion, maintaining device state for purposes such as attestation,
and monitoring device integrity. We found that several TAs
were common among images from different vendors. These
TAs either come bundled with the TZOS image itself, or are
drivers for shared hardware such as ﬁngerprint readers. After
de-duplication, we obtained 194 unique TAs.
TAs should protect themselves even if the normal world
is compromised. Consistent with this threat model, we wrote
simple normal world driver programs to fuzz test TAs. These
programs interact with the PARTEMU AFL module using the
API in Table 2. They run as a Linux kernel driver (TEEGRIS),
in userspace, or as a normal-world stub. The programs request
the TZOS to load a TA and set up shared memory, then fuzz
inputs to the TA, and ﬁnally yield control to the TA through
Build Date
Dec 2017
Jan 2019
Nov 2018
Dec 2018
Mar 2018
May 2018
Aug 2018
Sep 2018
Oct 2018
Oct 2018
Nov 2018
Oct 2018
Jun 2018
Sep 2018
Mar 2019
Mar 2019
Image
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Total
Unique
# TAs
# Crashing
13
3
9
15
17
13
14
22
44
11
4
38
26
24
22
2
273
194
1
0
3
3
4
0
2
4
7
2
0
12
8
5
5
0
56
48
# C
0
0
0
2
0
0
2
2
2
2
0
1
2
2
2
0
17
9
# I
0
0
1
0
0
0
0
0
0
0
0
4
4
2
1
0
12
12
# A
1
0
2
1
4
0
0
2
5
0
0
7
2
1
2
0
27
27
Table 5: Number of vulnerabilities found by image, catego-
rized as affecting TA conﬁdentiality (C), integrity (I), or avail-
ability (A). We ran AFL in non-deterministic mode on each
TA for a total of 5 million executions or until we found a
crash, whichever was earlier. We did not seed AFL with any
meaningful input.
an SMC. For Kinibi and QSEE, we set the contents of the
shared memory using fuzzed input from AFL. For OP-TEE
and TEEGRIS, which use the GlobalPlatform TEE Client
API [20]7, we use the ﬁrst few bytes of AFL’s input to select
the type of the 4 parameters - either a buffer or a value - and
the command, which is a 32-bit value. We then use the rest of
the input to determine the contents of the parameters. Crashes
are detected using return values from the TZOS; all TZOSes
indicate through speciﬁc return values that a TA has crashed.
Table 5 shows the results of fuzz testing TAs. AFL found
inputs that crashed 48 out of the 194 unique TAs. Surprisingly,
8 TAs crashed on single-byte inputs. All these single-byte
input crashes, however, were because the TAs were not allo-
cated sufﬁcient shared memory for the command, and the TA
tried to access unmapped pages. The GlobalPlatform TEE
Internal API speciﬁcation [21] does allow TAs to panic us-
ing a call to TEE_Panic on detecting exceptional conditions.
However, these TAs did not detect exceptional conditions and
relied on the TZOS to crash them if they accessed unmapped
memory. This is a security issue if the address of such mem-
ory is attacker-controlled; however, we did not ﬁnd this to be
the case. On the other hand, some other TAs required long,
speciﬁc sequences of inputs to crash them. For example, AFL
found a speciﬁc 40-byte input to crash one TA. Blind fuzz
testing has near-zero probability of ﬁnding such an input.
Next, we studied impact. AFL ﬁnds crashes which may or
may not be exploitable. For each crash, we manually reverse-
engineered the TA binary to determine how controllable pa-
7Kinibi also supports the GlobalPlatform TEE Client API [52]. However,
the TAs we analyzed used Kinibi’s own API.
USENIX Association
29th USENIX Security Symposium    799
Class
Availability
Conﬁdentiality
Integrity
Vulnerability Types
Null-pointer dereferences
Insufﬁcient shared memory crashes
Other[note a]
Read from attacker-controlled pointer
to shared memory
Read from attacker-controlled
OOB buffer length to shared memory
Write to secure memory using
attacker-controlled pointer
Write to secure memory using
attacker-controlled OOB buffer length
Crashes
9
10
8
8
0
11
2
Table 6: Crash classiﬁcation. [note a]The “Other” availability
type captures cases where attacker control of pointer or buffer
length was insufﬁcient to be exploitable, or if data read could
not be leaked back through shared memory.
rameters related to the crash were, and classiﬁed them ac-
cording to the descriptions in Table 6 as affecting TA conﬁ-
dentiality, integrity, or availability. In general, with vendors
increasingly opening up access to the secure world to Android
apps [25, 57], this could mean that a malicious Android app
could potentially crash or exploit these TAs.
First, the impact of unavailability of a TA depends on
whether each normal-world client gets its own instance of
the TA or not. In QSEE, all normal-world clients share the
same TA: the QSEE Linux kernel TEE driver does not launch
a TA if one with the same name is already running [37]. In
Kinibi, OP-TEE, and TEEGRIS, whether a single instance
of a TA exists or not is controlled by property ﬂags8. In the
single-instance case, the impact of unavailability is potentially
high: a client crashing a TA makes it unavailable to all other
clients. For example, a malicious Android app with access
to the secure world could crash a TA responsible for user
authentication, thus locking users out of their phones [64].
Whether null-pointer dereferences are exploitable depends on
what is mapped at low virtual TA addresses. None of the TAs
that crashed had such mappings, however, so we classiﬁed
them as availability issues.
Second, conﬁdentiality and integrity issues can be exploited
to leak or corrupt sensitive TA data depending on TA function-
ality. They can also be used as a step in privilege escalation to
the TZOS [7]. We believe that most, if not all, of the crashes
we found in these classes are exploitable. We were able to
demonstrate three scenarios. First, we could get arbitrary code
execution in a TA that controls access to the replay-protected
memory block (RPMB) [3], which is persistent storage that
increments a counter in hardware during writes to protect
against replay attacks. Security-critical values stored here,
such as minimum-allowed TA versions, are thus compromised.
Second, we were able to leak arbitrary data from a digital-
rights management (DRM) TA, thus compromising its keys.
8The GlobalPlatform TEE Internal API
property
(gpd.ta.singleInstance [21]) that speciﬁes whether a TA should
be single instance.
has
a
Third, we were able to compromise a one-time password TA,
again leaking its keys. One of the arbitrary pointer derefer-
ence vulnerabilities we found was also found in parallel by
another researcher, who developed an exploit to demonstrate
arbitrary TA code execution [8]. Except this vulnerability, all
other issues we found are previously unknown to the best of
our knowledge.
We identiﬁed three patterns of developer mistakes speciﬁc
to TrustZone development that caused several of these vulner-
abilities. Further, two of these are speciﬁc to the TZOS APIs
used. Such patterns highlight the need for TrustZone-speciﬁc
and TZOS-API-speciﬁc developer education.
Assumptions of Normal-World Call Sequence. To mini-
mize service time, TAs split work into small units; each unit
has a sub-command that clients can call in sequence to achieve
a bigger task. Thus, TAs are usually stateful: a typical session
starts with an initialization call followed by other requests,
and ﬁnally a close session call. TAs should not make any as-
sumptions about the order of these calls, since a compromised
normal world may issue these calls in any order. However,
we found several TAs assumed a particular call sequence, re-
sulting in using undeﬁned data when a call was made out
of sequence. While we only found null-pointer dereferences,
conﬁdentiality or integrity compromise is also possible.
Unvalidated Pointers from Normal World. Secure-
world TAs communicate with normal-world client applica-
tions (CAs) using shared memory. In general, the normal-
world CA does not know where such shared memory is
mapped in the TA’s virtual address space. However, Kinibi re-
turns the virtual address of the base of this shared memory in
the TA’s address space to the CA [52], whereas QSEE identity-
maps the shared memory. In both cases, the CA knows the
virtual address of the shared memory in the TA’s address
space. The CA then constructs pointers to speciﬁc data in
the shared memory that the TA can use. The TA developer
should validate that these pointers refer only to addresses in
shared memory before using them. However, we found such
validation missing in some TAs. Thus, a normal-world CA
can construct an arbitrary pointer into the TA’s private data,
call the TA, and have the TA either corrupt or leak this data de-
pending on the call’s functionality. While this issue is caused
by developers missing the required security checks, and does
not indicate a weakness in the TZOS itself, we found that this
issue is more common in Kinibi TAs than QSEE TAs. This is
perhaps because Kinibi requires such pointer construction to