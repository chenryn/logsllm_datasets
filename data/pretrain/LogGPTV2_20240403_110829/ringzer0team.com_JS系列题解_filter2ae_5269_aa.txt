# ringzer0team.com JS系列题解
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
ringzer0team.com是一个在线的CTF挑战平台，其中包含了前后端、逆向、编程、隐写、查证等多方面的题目，此次所写的writeup针对其中JavaScript系列题所做。
## 题解
## Client side validation is so secure?
###  预览
###  解题过程
映入眼帘的是一个登陆框，随意输入账号密码可看到`Wrong password
sorry.`的提示，且未有流量产生，由此可知是通过js判断账号密码的，并未向服务器发送查询请求。  
因此我们拦截鼠标点击事件，为了避免jQuery之类的js影响，我们将jQuery和其他不必要的js文件加入blackbox，然后重新测试登陆。  
点击后程序断在了这一块。
    // Look's like weak JavaScript auth script :)
    $(".c_submit").click(function(event) {
        event.preventDefault()
        var u = $("#cuser").val();
        var p = $("#cpass").val();
        if(u == "admin" && p == String.fromCharCode(74,97,118,97,83,99,114,105,112,116,73,115,83,101,99,117,114,101)) {
            if(document.location.href.indexOf("?p=") == -1) {   
                document.location = document.location.href + "?p=" + p;
            }
        } else {
            $("#cresponse").html("Wrong password sorry.");
        }
    });
我们可以看到，其中有一条判断语句，正是其分支产生了错误提示：
    if(u == "admin" && p == String.fromCharCode(74,97,118,97,83,99,114,105,112,116,73,115,83,101,99,117,114,101))
其中u来自id为cuser的文本框，p来自id为cpass的文本框，我们运行一下，即可得到密码：
提交即可得到flag  
[Link](https://ringzer0team.com/challenges/27)
## Is hashing more secure?
###  预览
###  解题过程
同样的，我们设置click事件断点，获取到相关验证代码如下：
    // Look's like weak JavaScript auth script :)
    $(".c_submit").click(function(event) {
        event.preventDefault();
        var p = $("#cpass").val();
        if(Sha1.hash(p) == "b89356ff6151527e89c4f3e3d30c8e6586c63962") {
            if(document.location.href.indexOf("?p=") == -1) {   
                document.location = document.location.href + "?p=" + p;
            }
        } else {
            $("#cresponse").html("Wrong password sorry.");
        }
    });
很显然，我们只要让`Sha1.hash(p) ==
"b89356ff6151527e89c4f3e3d30c8e6586c63962"`一句成立即可，查相关解密站点可知其明文为`adminz`，提交即可得到flag  
[Link](https://ringzer0team.com/challenges/30)
## Then obfuscation is more secure?
###  预览
###  解题过程
设置断点后，程序停在了第83行，js代码被压缩成一行，格式化后如下
    var _0xc360 = ["x76x61x6C", "x23x63x70x61x73x73", "x61x6Cx6Bx33", "x30x32x6Cx31", "x3Fx70x3D", "x69x6Ex64x65x78x4Fx66", "x68x72x65x66", "x6Cx6Fx63x61x74x69x6Fx6E", "x3Cx64x69x76x20x63x6Cx61x73x73x3Dx27x65x72x72x6Fx72x27x3Ex57x72x6Fx6Ex67x20x70x61x73x73x77x6Fx72x64x20x73x6Fx72x72x79x2Ex3Cx2Fx64x69x76x3E", "x68x74x6Dx6C", "x23x63x72x65x73x70x6Fx6Ex73x65", "x63x6Cx69x63x6B", "x2Ex63x5Fx73x75x62x6Dx69x74"];
    $(_0xc360[12])[_0xc360[11]](function () {
        var _0xf382x1 = $(_0xc360[1])[_0xc360[0]]();
        var _0xf382x2 = _0xc360[2];
        if (_0xf382x1 == _0xc360[3] + _0xf382x2) {
            if (document[_0xc360[7]][_0xc360[6]][_0xc360[5]](_0xc360[4]) == -1) {
                document[_0xc360[7]] = document[_0xc360[7]][_0xc360[6]] + _0xc360[4] + _0xf382x1;
            };
        } else {
            $(_0xc360[10])[_0xc360[9]](_0xc360[8]);
        };
    });
程序使用了大量的编码进行混淆，不过与前两题相同，在第5行有一个明显的判断语句，我们在第五行的位置设置断点，运行查看一下变量。
可以看到，实际上就是判断输入的值与`02l1alk3`是否相同，将`02l1alk3`作为密码输入，提交即可得到flag  
[Link](https://ringzer0team.com/challenges/31)
## Why not?
###  预览
###  解题过程
拦截到验证代码如下
    // Look's like weak JavaScript auth script :)
    $(".c_submit").click(function(event) {
        event.preventDefault();
        var k = new Array(176,214,205,246,264,255,227,237,242,244,265,270,283);
        var u = $("#cuser").val();
        var p = $("#cpass").val();
        var t = true;
        if(u == "administrator") {
            for(i = 0; i Wrong password sorry.");
                    t = false;
                    break;
                }
            }
        } else {
            $("#cresponse").html("Wrong password sorry.");
            t = false;
        }
        if(t) {
            if(document.location.href.indexOf("?p=") == -1) {
                document.location = document.location.href + "?p=" + p;
                   }
        }
    });
显然，我们要使`u == "administrator"`为真且`(u.charCodeAt(i) + p.charCodeAt(i) + i * 10)
!=
k[i]`为假，则用户名为`administrator`，至于密码，则是要求用户名的ascii和密码的ascii相加，再加上位权，与k对应值相等，根据判断代码，有解密代码如下
    var u = "administrator", z = "", k = new Array(176,214,205,246,264,255,227,237,242,244,265,270,283);
    for(i = 0; i Wrong password sorry.");
        }   
    }
输入的字串由`-`进行分割为数组，要求分割后的数组长度为5，随后使用`genFunc`方法映射。我们跟进`genFunc`方法
    function genFunc(_part) {
        if(!_part || !(_part.length) || _part.length !== 4)
            return function() {};
        return new Function(_part.substring(1,3), "this." + _part[3] + "=" + _part.slice(1,3) + "+" + (fn(function(y){return yWrong password sorry.");
            t = false;
        }
        if(t) {
            if(document.location.href.indexOf("?p=") == -1) {
                document.location = document.location.href + "?p=" + p;
                   }
        }
    });
代码将指定字符串用sha256计算一遍，赋值给k，然后进入判断用户名。  
我们将代码段选中运行一下
返回值为`h4x0r`，也就是说要求用户名为`h4x0r`。  
然后将密码部分使用AES进行加密，将运算结果与`ob1xQz5ms9hRkPTx+ZHbVg==`进行比较。  
加密流程大致如下
  * p作为参数1(消息)
  * k转为字符串→取其前32位→使用`CryptoJS.enc.Hex.parse`方法处理，作为参数2(密钥)
  * k转为字符串→取第33-64位→使用`CryptoJS.enc.Hex.parse`方法处理，作为参数3(密钥向量)
  * 使用以上参数进行AES加密
根据以上信息，我们得到了密文，密钥，密钥向量，四者得到三者，则可得到明文。  
我们使用`CryptoJS`自带的解密方法进行解密
运行结果为HEX编码，解码提交即可得到flag  
[Link](https://ringzer0team.com/challenges/67)
## Why not be more secure?
###  预览