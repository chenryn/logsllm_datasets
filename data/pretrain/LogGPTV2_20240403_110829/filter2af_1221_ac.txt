### 2.4.4 PostgreSQL数据库
PostgreSQL是一种特性非常齐全的自由软件的对象–关系型数据库管理系统，可以说是目前世界上最先进，功能最强大的自由数据库管理系统。包括kali系统中msf也使用这个数据库；[浅谈postgresql数据库攻击技术](http://lcx.cc/?i=1275)
大部分关于它的攻击依旧是sql注入，所以注入才是数据库不变的话题。
  * 默认端口：5432
  * 攻击方法：
    * 爆破：弱口令：postgres postgres
    * 缓冲区溢出：CVE-2014-2669
  * 参考：
    * 
    * 
### 2.4.5 MongoDB数据库
MongoDB，NoSQL数据库；攻击方法与其他数据库类似》
  * 默认端口：27017
  * 攻击方法：
    * 爆破：弱口令
    * 未授权访问；github有攻击代码；[请点击](https://github.com/yangbh/Hammer/blob/master/plugins/System/mongodb_unauth_access.py)
  * 参考：
    * 
    * 
### 2.4.6 Redis数据库
Redis是一个开源的使用c语言写的，支持网络、可基于内存亦可持久化的日志型、key-value数据库。关于这个数据库这两年还是很火的，暴露出来的问题也很多。特别是前段时间暴露的未授权访问。
  * 攻击方法：
    * 爆破：弱口令
    * 未授权访问+配合ssh key提权；
  * 参考：
    * 
### 2.4.7 SysBase数据库
  * 默认端口：服务端口5000；监听端口4100；备份端口：4200
  * 攻击方法：
    * 爆破：弱口令
    * 命令注入：
  * 参考
### 2.4.8 DB2 数据库
  * 默认端口：5000
  * 攻击方法：
    * 安全限制绕过：成功后可执行未授权操作（CVE-2015-1922）
  * 参考：
    * 
## 2.5 常见服务/协议
### 2.5.1 FTP 服务
FTP服务：ftp服务我分为两种情况，第一种是使用系统软件来配置，比如IIS中的FTP文件共享或Linux中的默认服务软件；第二种是通过第三方软件来配置，比如Serv-U还有一些网上写的简易ftp服务器等；  
默认端口：20（数据端口）；21（控制端口）；69（tftp小型文件传输协议）
  * 攻击方式：
  * 爆破：ftp的爆破工具有很多，这里我推荐owasp的[Bruter](https://sourceforge.net/projects/worawita/) 以及msf中ftp爆破模块；
  * 匿名访问：用户名：anonymous 密码：为空或任意邮箱
  * 嗅探：ftp使用明文传输技术（但是嗅探给予局域网并需要欺骗或监听网关）
  * 后门 vsftp
  * 远程溢出
  * 跳转攻击
### 2.5.2 NFS 服务
NFS（Network File
System）即网络文件系统，是FreeBSD支持的文件系统中的一种，它允许网络中的计算机之间通过TCP/IP网络共享资源。在NFS的应用中，本地NFS的客户端应用可以透明地读写位于远端NFS服务器上的文件，就像访问本地文件一样。如今NFS具备了防止被利用导出文件夹的功能，但遗留系统中的NFS服务配置不当，则仍可能遭到恶意攻击者的利用。
  * 攻击方法
    * 未授权访问
  * 参考
    * 
    * 
### 2.5.3 Samba服务
Samba是linux和unix系统上实现SMB/CIFS协议的一个免费软件，由服务器和客户端程序构成。而SMB是局域网支持共享文件和打印机的一种通信协议，为局域网内不同计算机之间提供文件及打印机等资源的共享服务。
  * 攻击方法
    * 远程代码执行
    * 弱口令
    * 未授权访问（public）
  * 参考
    * 
### 2.5.4 SSH 服务
SSH 是协议，通常使用 OpenSSH 软件实现协议应用。SSH 为 Secure Shell 的缩写，由 IETF 的网络工作小组（Network
Working Group）所制定；SSH 为建立在应用层和传输层基础上的安全协议。SSH
是目前较可靠，专为远程登录会话和其它网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。
  * 端口：22
  * 攻击方法：
    * 爆破
    * 后门
    * 漏洞：28退格漏洞、OpenSSL漏洞
  * 参考
    * 
### 2.5.5 Telnet 服务
Telnet协议是TCP/IP协议族中的一员，是Internet远程登陆服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的能力。在终端使用者的电脑上使用telnet程序，用它连接到服务器。终端使用者可以在telnet程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样。可以在本地就能控制服务器。
  * 默认端口：21
  * 攻击方法：
    * 爆破
    * 嗅探
### 2.5.6 Windows 远程连接
  * 默认端口：3389
  * 攻击方法
    * 爆破
    * Shift粘滞键后门：5次shift后门
    * 利用ms12-020攻击3389端口
### 2.5.7 VNC服务
VNC（Virtual Network
Computing），为一种使用RFB协议的显示屏画面分享及远程操作软件。此软件借由网络，可发送键盘与鼠标的动作及即时的显示屏画面。
  * 默认端口：5900+桌面ID（5901；5902）
  * 攻击方式：
    * 爆破：弱口令
    * 认证口令绕过：
    * 拒绝服务攻击：（[CVE-2015-5239](http://drops.wooyun.org/papers/9014)）
    * 权限提升：（CVE-2013-6886）
### 2.5.8 SMTP协议
smtp：邮件协议，在linux中默认开启这个服务，可以向对方发送钓鱼邮件！
  * 默认端口：25（smtp）、465（smtps）
  * 攻击方式：
    * 爆破：弱口令
    * 未授权访问
### 2.5.9 POP3协议
  * 默认端口：109（POP2）、110（POP3）、995（POP3S）
  * 攻击方式：
    * 爆破；弱口令
    * 未授权访问；
### 2.5.10 DNS服务
  * 默认端口：53
  * 攻击方式：
    * 区域传输漏洞
### 2.5.11 IMAP协议
  * 默认端口：143（imap）、993（imaps）
  * 攻击方式：
    * 爆破：弱口令
    * 配置不当
### 2.5.12 SNMP协议
  * 默认端口：161
  * 攻击方式:
    * 爆破：弱口令
### 2.5.13 DHCP服务
  * 默认端口：67&68、546（DHCP Failover做双机热备的）
  * 攻击方式：
    * DHCP劫持；
## 2.6 云环境
### 2.6.1 VMware
使用 VMware vCloud 可将现有数据中心内的虚拟基础架构资源池化，并将其作为基于目录的服务交付。通过与云计算基础架构的最佳平台 VMware
vSphere 配合使用，VMware vCloud Director 可为客户提供构建安全的私有云，从而改变 IT
部门交付和管理基础架构服务以及用户访问和使用这些服务的方式。  
一般组织中很多独立安装的 Esxi 形式的私有云，或独立部署的虚拟化系统。
  * 端口（很多）：
    * 
    * 
  * 漏洞
    * 主机逃逸
    * CVE-2017-5638
  * 参考：
    * 
    * 
    * 
    * 
    * 
    * [https://loudong.sjtu.edu.cn/?keyword=vmware&serverity=%E9%AB%98%E5%8D%B1&page=1](https://loudong.sjtu.edu.cn/?keyword=vmware&serverity=%E9%AB%98%E5%8D%B1&page=1)
    * 
### 2.6.2 OpenStack
OpenStack是基础设施即服务（IaaS）软件，让任何人都可以自行创建和提供云计算服务。此外，OpenStack也用作创建防火墙内的“私有云”（Private
Cloud），提供机构或企业内各部门共享资源。
  * 漏洞，有漏洞但是POC基本没有。检查时候可以参考安全的配置实践。
    * 权限绕过漏洞
    * 信息泄露
    * 代码执行漏洞
  * 参考：
    * [https://loudong.sjtu.edu.cn/?keyword=openstack&serverity=%E9%AB%98%E5%8D%B1](https://loudong.sjtu.edu.cn/?keyword=openstack&serverity=%E9%AB%98%E5%8D%B1)
    * 
    * 
### 2.6.3 Docker
Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制[1]。Docker利用Linux核心中的资源分脱机制，例如cgroups，以及Linux核心名字空间（name
space），来创建独立的软件容器（containers）。这可以在单一Linux实体下运作，避免引导一个虚拟机造成的额外负担。Linux核心对名字空间的支持完全隔离了工作环境中应用程序的视野，包括进程树、网络、用户ID与挂载文件系统，而核心的cgroup提供资源隔离，包括CPU、内存、block
I/O与网络。从0.9版本起，Dockers在使用抽象虚拟是经由libvirt的LXC与systemd -nspawn提供界面的基础上，开始包括libcontainer函数库做为以自己的方式开始直接使用由Linux核心提供的虚拟化的设施。
  * 安全问题（很少有漏洞的POC，安全检查也是基于最佳实践和官方安全建议进行）：
    * 内核漏洞（Kernel exploits） 容器是基于内核的虚拟化，主机（host）和主机上的所有容器共享一套内核。如果某个容器的操作造成了内核崩溃，那么反过来整台机器上的容器都会受到影响。
      * CVE-2015-3630 1.6.0 Docker Libcontainer 安全绕过漏洞
      * CVE-2015-3627 1.6.1 Libcontainer和Docker Engine 权限许可和访问控制漏洞
      * CVE-2015-3630 1.6.1 Docker Engine 安全绕过漏洞
      * CVE-2014-9358 1.3.3 Docker 目录遍历漏洞
      * CVE-2014-9357 1.3.2 Docker 权限许可和访问控制漏洞
      * CVE-2014-6408 1.3.1 Docker 权限许可和访问控制漏洞
      * CVE-2014-5277 1.3.0 Docker和docker-py 代码注入漏洞
    * 拒绝服务攻击（Denial-of-service attacks） 所有的容器都共享了内核资源，如果一个容器独占了某一个资源（内存、CPU、各种ID），可能会造成其他容器因为资源匮乏无法工作（形成DoS攻击）。
    * 容器突破（Container breakouts） Linux的namespace机制是容器的核心之一，它允许容器内部拥有一个PID=1的进程而在容器外部这个进程号又是不一样的（比如1234）。现在问题在于如果一个PID=1的进程突破了namespace的限制，那么他将会在主机上获得root权限。
    * 有毒镜像（Poisoned images） 主要是考虑到镜像本身的安全性，没太多好说的。
  * 参考：
    * 
    * 
    * 
    * 
    * [https://loudong.sjtu.edu.cn/?keyword=docker&serverity=%E9%AB%98%E5%8D%B1](https://loudong.sjtu.edu.cn/?keyword=docker&serverity=%E9%AB%98%E5%8D%B1)