Python 黑魔法指南 v3.0
作者：王炳明
版本：v3.0
v1.0发布时间：2020年05月12日
v2.0发布时间：2020年08月01日
v3.0发布时间：2021年05月23日
微信公众号：Python编程时光
联系邮箱：PI:EMAIL
Github：https://github.com/iswbm/magic-python
版权归个人所有，欢迎交流分享，不允许用作商业及为个人谋利等用途，违者必究。
本电子书半年左右更新一次，想最新版的电子书，可以扫描下方的二维码，回复 "黑魔法" 即可获
取。
第一章：魔法冷知识
1.1 默默无闻的省略号很好用
在Python中，一切皆对象，省略号也不例外。
在 Python 3 中你可以直接写 ... 来得到它
>>> ...
Ellipsis
>>> type(...)
而在 Python 2 中没有 ... 这个语法，只能直接写Ellipsis来获取。
>>> Ellipsis
Ellipsis
>>> type(Ellipsis)
>>>
它转为布尔值时为真
>>> bool(...)
True
最后，这东西是一个单例。
>>> id(...)
4362672336
>>> id(...)
4362672336
那这东西有啥用呢？
1. 它是 Numpy 的一个语法糖
2. 在 Python 3 中可以使用 ... 代替 pass
$ cat demo.py
def func01():
...
def func02():
pass
func01()
func02()
print("ok")
$ python3 demo.py
ok
1.2 使用 end 来结束代码块
有不少编程语言，循环、判断代码块需要用 end 标明结束，这样一定程度上会使代码逻辑更加清
晰一点。
但是其实在 Python 这种严格缩进的语言里并没有必要这样做。
如果你真的想用，也不是没有办法，具体你看下面这个例子。
__builtins__.end = None
def my_abs(x):
if x > 0:
return x
else:
return -x
end
end
print(my_abs(10))
print(my_abs(-10))
执行后，输出如下
[root@localhost ~]$ python demo.py
10
10
1.3 可直接运行的 zip 包
我们可以经常看到有 Python 包，居然可以以 zip 包进行发布，并且可以不用解压直接使用。
这与大多数人的认识的 Python 包格式不一样，正常人认为 Python 包的格式要嘛 是 egg，要嘛是
whl 格式。
那么这个zip 是如何制作的呢，请看下面的示例。
[root@localhost ~]# ls -l demo
total 8
-rw-r--r-- 1 root root 30 May 8 19:27 calc.py
-rw-r--r-- 1 root root 35 May 8 19:33 __main__.py
[root@localhost ~]#
[root@localhost ~]# cat demo/__main__.py
import calc
print(calc.add(2, 3))
[root@localhost ~]#
[root@localhost ~]# cat demo/calc.py
def add(x, y):
return x+y
[root@localhost ~]#
[root@localhost ~]# python -m zipfile -c demo.zip demo/*
[root@localhost ~]#
制作完成后，我们可以执行用 python 去执行它
[root@localhost ~]# python demo.zip
5
[root@localhost ~]#
1.4 反斜杠的倔强: 不写最后
\ 在 Python 中的用法主要有两种
1、在行尾时，用做续行符
[root@localhost ~]$ cat demo.py
print("hello "\
"world")
[root@localhost ~]$
[root@localhost ~]$ python demo.py
hello world
2、在字符串中，用做转义字符，可以将普通字符转化为有特殊含义的字符。
>>> str1='\nhello'
>>> print(str1)
hello
>>> str2='\thello'tab
>>> print(str2)
hello
但是如果你用单 \ 结尾是会报语法错误的
>>> str3="\"
File "", line 1
str3="\"
^
SyntaxError: EOL while scanning string literal
就算你指定它是个 raw 字符串，也不行。
>>> str3=r"\"
File "", line 1
str3=r"\"
^
SyntaxError: EOL while scanning string literal
1.5 如何修改解释器提示符
这个当做今天的一个小彩蛋吧。应该算是比较冷门的，估计知道的人很少了吧。
正常情况下，我们在 终端下 执行Python 命令是这样的。
>>> for i in range(2):
... print (i)
...
0
1
你是否想过 >>> 和 ... 这两个提示符也是可以修改的呢？
>>> import sys
>>> sys.ps1
'>>> '
>>> sys.ps2
'... '
>>>
>>> sys.ps2 = '---------------- '
>>> sys.ps1 = 'Python>>>'
Python>>>for i in range(2):
---------------- print (i)
----------------
0
1
1.6 简洁而优雅的链式比较
先给你看一个示例：
>>> False == False == True
False
你知道这个表达式为什么会会返回 False 吗？
它的运行原理与下面这个类似，是不是有点头绪了：
if 80 >> False == False and False == True
False
这个用法叫做链式比较。
1.7 and 和 or 的短路效应
and 和 or 是我们再熟悉不过的两个逻辑运算符，在 Python 也有它有妙用。
当一个 or 表达式中所有值都为真，Python会选择第一个值
当一个 and 表达式 所有值都为真，Python 会选择最后一个值。
示例如下：
>>>(2 or 3) * (5 and 6 and 7)
14 # 2*7
1.8 连接多个列表最极客的方式
>>> a = [1,2]
>>> b = [3,4]
>>> c = [5,6]
>>>
>>> sum((a,b,c), [])
[1, 2, 3, 4, 5, 6]
1.9 字典居然是可以排序的？
在 Python 3.6 之前字典不可排序的思想，似乎已经根深蒂固。
## Python2.7.10
>>> mydict = {str(i):i for i in range(5)}
>>> mydict
{'1': 1, '0': 0, '3': 3, '2': 2, '4': 4}
假如哪一天，有人跟你说字典也可以是有序的，不要惊讶，那确实是真的
在 Python3.6 + 中字典已经是有序的，并且效率相较之前的还有所提升，具体信息你可以去查询相
关资料。
## Python3.6.7
>>> mydict = {str(i):i for i in range(5)}
>>> mydict
{'0': 0, '1': 1, '2': 2, '3': 3, '4': 4}
1.10 哪些情况下不需要续行符？
在写代码时，为了代码的可读性，代码的排版是尤为重要的。
为了实现高可读性的代码，我们常常使用到的就是续行符 \ 。
>>> a = 'talk is cheap,'\
... 'show me the code.'
>>>
>>> print(a)
talk is cheap,show me the code.
那有哪些情况下，是不需要写续行符的呢？
经过总结，在这些符号中间的代码换行可以省略掉续行符： [] , () , {}
>>> my_list=[1,2,3,
... 4,5,6]
>>> my_tuple=(1,2,3,
... 4,5,6)
>>> my_dict={"name": "MING",
... "gender": "male"}
另外还有，在多行文本注释中 ''' ，续行符也是可以不写的。
>>> text = '''talk is cheap,
... show me code.'''
>>>
但是这种写法回车会自动转化为 \n
>>> text = '''talk is cheap,
... show me code.'''
>>> text
'talk is cheap,\nshow me code.'
1.11 用户无感知的小整数池
为避免整数频繁申请和销毁内存空间，Python 定义了一个小整数池 [-5, 256] 这些整数对象是提前
建立好的，不会被垃圾回收。
以上代码请在 终端Python环境下测试，如果你是在IDE中测试，由于 IDE 的影响，效果会有所不
同。
>>> a = -6
>>> b = -6
>>> a is b
False
>>> a = 256
>>> b = 256
>>> a is b
True
>>> a = 257
>>> b = 257
>>> a is b
False
>>> a = 257; b = 257
>>> a is b
True
问题又来了：最后一个示例，为啥是True？
因为当你在同一行里，同时给两个变量赋同一值时，解释器知道这个对象已经生成，那么它就会引
用到同一个对象。如果分成两行的话，解释器并不知道这个对象已经存在了，就会重新申请内存存
放这个对象。
1.12 神奇的 intern 机制
字符串类型作为Python中最常用的数据类型之一，Python解释器为了提高字符串使用的效率和使用
性能，做了很多优化.
例如：Python解释器中使用了 intern（字符串驻留）的技术来提高字符串效率，什么是intern机
制？就是同样的字符串对象仅仅会保存一份，放在一个字符串储蓄池中，是共用的，当然，肯定不
能改变，这也决定了字符串必须是不可变对象。
>>> s1="hello"
>>> s2="hello"
>>> s1 is s2
True
## intern
>>> s1="hell o"
>>> s2="hell o"
>>> s1 is s2
False
## 20intern
>>> s1 = "a" * 20
>>> s2 = "a" * 20
>>> s1 is s2
True
>>> s1 = "a" * 21
>>> s2 = "a" * 21
>>> s1 is s2
False
>>> s1 = "ab" * 10
>>> s2 = "ab" * 10
>>> s1 is s2
True
>>> s1 = "ab" * 11
>>> s2 = "ab" * 11
>>> s1 is s2
False
1.13 site-packages和 dist-packages
如果你足够细心，你会在你的机器上，有些包是安装在 site-packages 下，而有些包安装在 dist-
packages 下。
它们有什么区别呢？
一般情况下，你只见过 site-packages 这个目录，而你所安装的包也将安装在 这个目录下。
而 dist-packages 其实是 debian 系的 Linux 系统（如 Ubuntu）才特有的目录，当你使用 apt 去安装
的 Python 包会使用 dist-packages，而你使用 pip 或者 easy_install 安装的包还是照常安装在 site-
packages 下。
Debian 这么设计的原因，是为了减少不同来源的 Python 之间产生的冲突。
如何查找 Python 安装目录
>>> from distutils.sysconfig import get_python_lib
>>> print(get_python_lib())
/usr/lib/python2.7/site-packages
1.14 argument 和 parameter 的区别?
arguments 和 parameter 的翻译都是参数，在中文场景下，二者混用基本没有问题，毕竟都叫参数
嘛。
但若要严格再进行区分，它们实际上还有各自的叫法
parameter：形参（formal parameter），体现在函数内部，作用域是这个函数体。
argument ：实参（actual parameter），调用函数实际传递的参数。
举个例子，如下这段代码， "error" 为 argument，而 msg 为 parameter 。
def output_msg(msg):
print(msg)
output_msg("error")
1.15 /usr/bin/env python 有什么用？
我们经常会在别人的脚本或者项目的入口文件里看到第一行是下面这样
#!/usr/bin/python
或者这样
#!/usr/bin/env python
这两者有什么区别呢？
稍微接触过 linux 的人都知道 /usr/bin/python 就是我们执行 python 进入console 模式里的
python
而当你在可执行文件头里使用 #! + /usr/bin/python ，意思就是说你得用哪个软件 （python）
来执行这个文件。
那么加和不加有什么区别呢？
不加的话，你每次执行这个脚本时，都得这样： python xx.py ，
有没有一种方式？可以省去每次都加 python 呢？
当然有，你可以文件头里加上 #!/usr/bin/python ，那么当这个文件有可执行权限 时，只直接写
这个脚本文件，就像下面这样。
明白了这个后，再来看看 !/usr/bin/env python 这个 又是什么意思 ？
当我执行 env python 时，自动进入了 python console 的模式。
这是为什么？和 直接执行 python 好像没什么区别呀
当你执行 env python 时，它其实会去 env | grep PATH 里（也就是
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin ）这几个路径里去依次查找名为python的
可执行文件。
找到一个就直接执行，上面我们的 python 路径是在 /usr/bin/python 里，在 PATH 列表里倒数第
二个目录下，所以当我在 /usr/local/sbin 下创建一个名字也为 python 的可执行文件时，就会执
行 /usr/local/sbin/python 了。