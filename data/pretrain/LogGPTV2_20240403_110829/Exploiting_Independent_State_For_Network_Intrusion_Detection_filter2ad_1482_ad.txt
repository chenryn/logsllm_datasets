@01/21-12:11
@01/21-10:59
@01/21-11:00
@01/21-10:59
@01/21-12:11
}
[138.112.68.194, 108.45.144.114, 50]
[138.112.68.194, 108.45.144.114, 10000]
[138.112.68.194, 108.45.144.114, 1000]
[163.184.146.140, 146.74.170.189, 50]
[165.11.184.36, 148.126.197.84, 100]
[165.11.184.36, 148.126.197.84, 50]
[138.112.68.194, 108.45.144.114, 100]
[163.184.146.140, 146.74.170.189, 100]
@01/21-10:59
@01/21-11:01
@01/21-11:00
@01/21-13:16
@01/21-12:11
@01/21-12:11
@01/21-10:59
@01/21-13:16
(a) Subset of reported port scans at time T
(b) Subset of reported port scans at time T + 1.5 hr
}
[138.112.68.194, 108.45.144.114, 1000] @01/21-11:00
[138.112.68.194, 108.45.144.114, 100]
[138.112.68.194, 108.45.144.114, 50]
@01/21-10:59
@01/21-10:59
+ [163.184.146.140, 146.74.170.189, 100] @01/21-13:16
+ [163.184.146.140, 146.74.170.189, 50]
@01/21-13:16
[165.11.184.36, 148.126.197.84, 100]
[165.11.184.36, 148.126.197.84, 50]
@01/21-12:11
@01/21-12:11
ID check_hot = check_hot
(@01/21-12:23 #4715580)
{
local id = c$id;
local service = id$resp_p;
if (service in allow_services ||
c$service == "ftp-data")
(@01/21-12:23 #2932175)
return (F);
if (state == CONN_ATTEMPTED)
(@01/21-12:23 #1138955)
check_spoof(c);
[...]}
(c) diff of (a) and (b)
(d) Script function from scan.bro with timestamps.
table assignments of
full network packets. We omit the corresponding plots
here as they look similar to Figure 3(a).
For state
operations, we sent
the form
t[index]="string". We could send up to 58,000
such operations before the ping-times exceeded 0.1s. Again
it was the receiving main process which was not able to
keep up. To measure sending raw packets, we transfered a
trace captured in the MWN environment. The ping-times
began exceeding 0.1s when the transmission rate hit 16,000
packets per second. The data rate corresponded to more
than 11 MB/s, approaching the maximum bandwidth of the
link.
We repeated the benchmarks with SSL encrypted ses-
sions, ﬁnding that the amount of objects that could transmit
decreased noticeably. Figure 3(b) shows a fall-off to 11,000
events per second for when the ping-times crossed the 0.1s
limit.
To summarize, our architecture can transfer tens of thou-
sands of objects per second, and, therefore, seems suitable
for use in high-performance environments. However, we
note that these benchmarks represent a best-case: the Bro
system is concentrating solely on communication. Thus,
we now evaluate performance with additional packet input.
5.2 Performance on Realistic Data
The benchmarks presented in §5.1 suggest that the com-
munication framework is not going to be a bottleneck.
However, in a high-volume environment, the packet pro-
cessing itself is already a very demanding task. Thus, we
will now examine how well the communication blends in.
Pseudo-realtime: First, we need a methodology to per-
form reproducible measurements. A common approach to
evaluate the performance of a NIDS is to capture a packet
trace and run the NIDS ofﬂine on it with different conﬁgu-
rations. However, to evaluate communication performance,
this approach does not work well: the NIDS can process a
trace more quickly than the corresponding realtime. This
leads to its analysis time being “compressed” (we term this
trace time). Yet, the communication, located in a separate
process, is decoupled from trace time; it is performed in
realtime.
Nevertheless, we wanted to keep the trace-based evalu-
ation approach for its reproducibility. Hence, we needed
to synchronize network time and realtime. To this end, we
added a pseudo-realtime mode to Bro. If activated, the main
process reads packet input from a trace but deliberately in-
serts delays into its processing. These delays resemble the
inter-packet gaps observed when capturing the trace. That
is, the processing of a new packet is deferred until the cor-
responding amount of realtime has passed.
Given the same input, a pseudo-realtime Bro performs
the same operations as a live Bro, i.e., the two do not differ
in terms of detection. However, the times at which oper-
ations are performed could slightly vary, leading to differ-
ent system and network loads. To ensure that the pseudo-
realtime mode does indeed provide similar results in terms
of load as running on live trafﬁc, we performed an exper-
iment. We started a Bro process on live MWN input and
simultaneously captured the trafﬁc on the same machine,
using the same BPF ﬁlter as the Bro process. Then we re-
ran Bro ofﬂine on the trace in pseudo-realtime, conﬁguring
it to use its default set of analyzers (plus some reduced time-
outs and including UDP packets). To avoid losing packets,
we excluded two high-volume networks from the analysis.
The resulting 30-minute trace had a volume of 832MB, con-
sisting of 4.9M packets (61.0% TCP, 39.0% UDP). Based
on ports, HTTP and DNS were the most prevalent protocols
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:11:05 UTC from IEEE Xplore.  Restrictions apply. 
Figure 3: Propagating increasing number of events.
Figure 4: Pseudo-realtime
Number of events
Ping−times
0
50
100
150
200
250
run−time (sec)
(a) Plain connection.
Number of events
Ping−times
c
e
s
/
s
t
n
e
v
e
#
c
e
s
c
e
s
/
s
t
n
e
v
e
#
c
e
s
0
0
0
0
5
0
0
0
0
3
0
0
0
0
1
0
4
3
2
1
0
0
0
0
0
2
0
0
0
0
1
0
0
0
5
0
6
0
.
4
.
0
2
0
.
0
0
.
6
5
4
3
2
1
0
0
0
0
5
1
0
0
0
0
1
0
0
0
5
0
0
0
0
8
0
0
0
4
0
y
t
i
s
n
e
d
y
t
i
l
i
b
a
b
o
r
P
c
e
s
/
s
t
e
k
c
a
p
c
e
s
/
s
t
n
e
v
e
#
User−time
Events transmitted
Ping times
−1.0
−0.5
0.0
0.5
1.0
Relative error
(a) Bro running live vs. pseudo-realtime
Packets per second
All events
High−level events
0
20
40
60
80
100
0
1000
2000
3000
run−time (sec)
(b) SSL connection.
(b) Number of (ﬁltered) packets and events on trace.
run−time (sec)
(29.1% and 8.1% of the packets, respectively). The ﬁltered
trace contained 1.4M connections/ﬂows.
During the runs we logged the user-level CPU utilization
of the main process and the number of transmitted events,
both per one-second intervals. Additionally, we measured
ping-times once per second. Then we calculated the rela-
tive errors of the pseudo-realtime ﬁgures compared to the
live ﬁgures. Figure 4(a) shows the corresponding densities.
For user-time and number of transmitted events, we see a