:::
智能卡是一个物理设备，可使用卡中存储的证书提供个人验证。个人验证意味着，您可以象使用用户密码一样使用智能卡。
您可以将用户凭证以私钥和证书的形式存储在智能卡上。特殊软件和硬件用于访问它们。您可以将智能卡插入到读取器或
USB 套接字中，并为智能卡提供 PIN 代码，而不是提供您的密码。
Identity Management(IdM)支持智能卡验证：
::: itemizedlist
-   IdM 证书颁发机构发布的用户证书。详情请参阅
    [为智能卡验证配置身份管理](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_smart_card_authentication/configuring-idm-for-smart-card-auth_managing-smart-card-authentication){.link}。
-   由 Active Directory
    证书服务(ADCS)证书认证机构发布的用户证书.详情请查看 [为 IdM
    中的智能卡验证配置 ADCS
    发布的证书](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_smart_card_authentication/configuring-certificates-issued-by-adcs-for-smart-card-authentication-in-idm_managing-smart-card-authentication){.link}。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果要开始使用智能卡验证，请参阅 [RHEL8
中的硬件要求：智能卡支持](https://access.redhat.com/articles/4253861){.link}。
:::
:::
::: section
::: titlepage
# []{#configuring-smart-card-authentication-with-the-web-console_system-management-using-the-RHEL-8-web-console.html#installing-tools-for-managing-and-using-smart-cards_configuring-smart-card-authentication-with-the-web-console}安装用来管理和使用智能卡的工具 {.title}
:::
要配置智能卡，您需要一些工具来生成证书并将其保存在智能卡中。
您必须：
::: itemizedlist
-   安装 `gnutls-utils`{.literal} 软件包，帮助您管理证书。
-   安装 `opensc`{.literal} 软件包，它提供一组库和实用工具来使用智能卡。
-   启动与智能卡读取器通信的 `pcscd`{.literal} 服务。
:::
::: orderedlist
**流程**
1.  安装 `opensc`{.literal} 和 `gnutls-utils`{.literal} 软件包：
    ``` literallayout
    # dnf -y install opensc gnutls-utils
    ```
2.  启动 `pcscd`{.literal} 服务。
    ``` literallayout
    # systemctl start pcscd
    ```
:::
验证 `pcscd`{.literal} 服务是否已启动并在运行。
:::
::: section
::: titlepage
# []{#configuring-smart-card-authentication-with-the-web-console_system-management-using-the-RHEL-8-web-console.html#storing-a-certificate-on-the-smart-card_configuring-smart-card-authentication-with-the-web-console}在智能卡中存储证书 {.title}
:::
本节论述了使用 `pkcs15-init`{.literal} 工具配置智能卡，帮助您配置：
::: itemizedlist
-   擦除智能卡
-   设置新的 PIN 和可选的 PIN Unblocking Keys（PUKs）
-   在智能卡上创建新插槽
-   在插槽存储证书、私钥和公钥
-   锁定智能卡设置（有些智能卡需要这种类型）
:::
::: itemizedlist
**先决条件**
-   已安装 `opensc`{.literal} 软件包，其中包含 `pkcs15-init`{.literal}
    工具。
    详情请查看[安装用于管理和使用智能卡的工具](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_smart_card_authentication/configuring-idm-for-smart-card-auth_managing-smart-card-authentication#installing-tools-for-managing-and-using-smart-cards_configuring-idm-for-smart-card-auth){.link}。
-   该卡插入读卡器并连接到计算机。
-   您有可保存在智能卡中的私钥、公钥和证书。在此过程中，`testuser.key`{.literal}、`testuserpublic.key`{.literal}
    和 `testuser.crt`{.literal} 是用于私钥、公钥和证书的名称。
-   您当前的智能卡用户 PIN 和 Security Officer PIN（SO-PIN）
:::
::: orderedlist
**流程**
1.  擦除智能卡并使用您的 PIN 验证自己：
    ``` literallayout
    $ pkcs15-init --erase-card --use-default-transport-keys
    Using reader with a card: Reader name
    PIN [Security Officer PIN] required.
    Please enter PIN [Security Officer PIN]:
    ```
    这个卡已经被清除。
2.  初始化智能卡，设置您的用户 PIN 和 PUK，以及您的安全响应 PIN 和 PUK：
    ``` literallayout
    $ pkcs15-init --create-pkcs15 --use-default-transport-keys \
        --pin 963214 --puk 321478 --so-pin 65498714 --so-puk 784123
    Using reader with a card: Reader name
    ```
    `pcks15-init`{.literal} 工具在智能卡上创建新插槽。
3.  为插槽设置标签和验证 ID：
    ``` literallayout
    $ pkcs15-init --store-pin --label testuser \
        --auth-id 01 --so-pin 65498714 --pin 963214 --puk 321478
    Using reader with a card: Reader name
    ```
    标签设置为人类可读值，本例中为
    `testuser`{.literal}。`auth-id`{.literal}
    必须是两个十六进制值，在本例中设为 `01`{.literal}。
4.  在智能卡的新插槽中存储并标记私钥：
    ``` literallayout
    $ pkcs15-init --store-private-key testuser.key --label testuser_key \
        --auth-id 01 --id 01 --pin 963214
    Using reader with a card: Reader name
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您为 `--id`{.literal}
    指定的值在存储您的私钥和证书时必须相同。如果没有为 `--id`{.literal}
    指定值，则更复杂的值由工具计算，因此更易于定义您自己的值。
    :::
5.  在智能卡上的新插槽中存储并标记该证书：
    ``` literallayout
    $ pkcs15-init --store-certificate testuser.crt --label testuser_crt \
        --auth-id 01 --id 01 --format pem --pin 963214
    Using reader with a card: Reader name
    ```
6.  （可选）在智能卡上新插槽中保存并标记公钥：
    ``` literallayout
    $ pkcs15-init --store-public-key testuserpublic.key
        --label testuserpublic_key --auth-id 01 --id 01 --pin 963214
    Using reader with a card: Reader name
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果公钥与私钥和/或证书对应，您应该指定与私钥和/或证书相同的 ID。
    :::
7.  （可选）有些智能卡要求您通过锁定设置来完善卡：
    ``` literallayout
    $ pkcs15-init -F
    ```
    此时您的智能卡在新创建的插槽中包含证书、私钥和公钥。您还创建了您的用户
    PIN 和 PUK，以及安全响应 PIN 和 PUK。
:::
:::
::: section
::: titlepage
# []{#configuring-smart-card-authentication-with-the-web-console_system-management-using-the-RHEL-8-web-console.html#enabling-smart-card-authentication-for-the-web-console_configuring-smart-card-authentication-with-the-web-console}为 web 控制台启用智能卡验证 {.title}
:::
为了能够在 web 控制台中使用智能卡验证，在 `cockpit.conf`{.literal}
文件中启用智能卡验证。
另外，您还可以在同一文件中禁用密码身份验证。
::: itemizedlist
**先决条件**
-   RHEL 8 web 控制台已安装。
    详情请参阅 [安装 Web
    控制台](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_systems_using_the_rhel_8_web_console/index#getting-started-with-the-rhel-8-web-console_system-management-using-the-RHEL-8-web-console){.link}。
:::
::: orderedlist
**流程**
1.  使用管理员权限登录到 RHEL web 控制台。
    详情请参阅 [Web
    控制台的日志记录](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_systems_using_the_rhel_8_web_console/index#logging-in-to-the-web-console_getting-started-with-the-rhel-8-web-console){.link}。
2.  单击 [**Terminal**]{.strong}。
3.  在 `/etc/cockpit/cockpit.conf`{.literal} 中，将
    `ClientCertAuthentication`{.literal} 设置为 `yes`{.literal} ：
    ``` literallayout
    [WebService]
    ClientCertAuthentication = yes
    ```
4.  另外，还可在 `cockpit.conf`{.literal} 中禁用基于密码的验证：
    ``` literallayout
    [Basic]
    action = none
    ```
    此配置禁用密码验证，您必须始终使用智能卡。
5.  重启 Web 控制台以确保 `cockpit.service`{.literal} 接受更改：
    ``` literallayout
    # systemctl restart cockpit
    ```
:::
:::
::: section
::: titlepage
# []{#configuring-smart-card-authentication-with-the-web-console_system-management-using-the-RHEL-8-web-console.html#logging-in-to-the-web-console-with-smart-cards_configuring-smart-card-authentication-with-the-web-console}使用智能卡登录到 web 控制台 {.title}
:::
您可以使用智能卡登录到 web 控制台。
::: itemizedlist
**先决条件**
-   存储在智能卡中的有效证书，该证书与在 Active Directory 或 Identity
    Management 域中创建的用户帐户相关联。
-   pIN 可解锁智能卡。
-   已经将智能卡放入读卡器。
:::
::: orderedlist
**流程**
1.  打开 Web 浏览器，并在地址栏中添加 Web 控制台的地址。
    浏览器要求您添加 PIN 保护保存在智能卡中的证书。
2.  [**在\"密码需要**]{.strong} \"对话框中，输入 PIN
    [**并单击\"确定\"。**]{.strong}
3.  在 [**User Identification Request
    对话框中**]{.strong}，选择保存在智能卡中的证书。
4.  [**选择\"记住这一决定**]{.strong} \"。
    系统下次不会打开此窗口。
5.  点击 [**OK**]{.strong}。
:::
您现在已连接，Web 控制台会显示其内容。
:::
::: section
::: titlepage
# []{#configuring-smart-card-authentication-with-the-web-console_system-management-using-the-RHEL-8-web-console.html#limiting-user-sessions-and-memory-to-prevent-a-dos-attack_configuring-smart-card-authentication-with-the-web-console}限制用户会话和内存以防止 DoS 攻击 {.title}
:::
证书身份验证通过分离并隔离 `cockpit-ws`{.literal} Web
服务器的实例，使其免受希望模拟其他用户的攻击者进行保护。但是，这会引入一个潜在的服务
Denial 服务(DoS)攻击：远程攻击者可以创建大量证书，并为
`cockpit-w 发送大量 HTTPS 请求，每个`{.literal} 请求者都使用不同的证书。
为防止此 DoS，这些 Web
服务器实例的集中管理资源受到限制。默认情况下，连接数和内存用量限制设为
200 个线程和 75%(soft)/ 90%(hard)内存限值。
以下流程描述了通过限制连接和内存数量的资源保护。
::: orderedlist
**流程**
1.  在终端中，打开 `system-cockpithttps.slice`{.literal} 配置文件：
    ``` literallayout
    # systemctl edit system-cockpithttps.slice
    ```
2.  将 `TasksMax`{.literal} 限制为
    [*100*]{.emphasis}，`CPUQuota`{.literal} 限制为 [*30%*]{.emphasis}
    ：
    ``` literallayout
    [Slice]
    # change existing value
    TasksMax=100
    # add new restriction
    CPUQuota=30%
    ```
3.  要应用这些更改，重启系统：
    ``` literallayout
    # systemctl daemon-reload
    # systemctl stop cockpit
    ```
:::
现在，新的内存和用户会话限制可保护 `cockpit-ws`{.literal} Web 服务器免受
DoS 攻击。
:::
::: section
::: titlepage
# []{#configuring-smart-card-authentication-with-the-web-console_system-management-using-the-RHEL-8-web-console.html#_additional_resources_3}其它资源 {.title}
:::
::: itemizedlist
-   [为智能卡验证配置身份管理](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_identity_management/configuring-idm-for-smart-card-auth_configuring-and-managing-idm){.link}.
-   [为 IdM 中的智能卡验证配置 ADCS
    发布的证书](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_identity_management/configuring-certificates-issued-by-adcs-for-smart-card-authentication-in-idm_configuring-and-managing-idm){.link}。
-   [配置并导入本地证书到智能卡。：](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_authentication_and_authorization_in_rhel/index#configuring-and-importing-local-certificates-to-a-smart-card_configuring-authentication-and-authorization-in-rhel){.link}
    context: system-management-using-the-RHEL-8-web-console
:::
:::
:::