knowing X does not give any information about Y and vice versa,
so their mutual information is zero. At the other extreme, if X and
Y are identical then all information conveyed by X is shared with
Y : knowing X determines the value of Y and vice versa. As a
result, when X and Y are identical the mutual information is the
same as the uncertainty contained in Y (or X) alone, namely the
entropy of Y (or X—clearly if X and Y are identical they have
equal entropy).
Speciﬁcally, we consider three mutual information measures be-
tween e′ and d′. The ﬁrst one models the joint states {f (t) =
[e′(t)d′(t)]} as independent points for each t, and measures the
mutual information. This measures to what extend a load change
in e′(t) is correlated with a load change in d′(t). The second one
converts e′(t) and d′(t) into a binary series; this measures to what
extend the information of whether a load changes in e′(t) is cor-
related with whether a load change occurs in e′(t).
In the third
one, we mode joint states {f (t) = [e′(t)d′(t)]} as a ﬁrst-order
Markov chain and measure mutual information between e′(t) and
d′(t). Because of the time series nature of the data, the Markov
chain assumption is more realistic than the independence assump-
tion, and possibly can better measure the information leak from
e′(t) to d′(t). In the Appendix, we present formulas for computing
the mutual information measures.
4. ANALYZING EXISTING
ALGORITHMS
In this section, we present highly accurate methods to recover
load-change events from output produced by the Best Effort algo-
rithm in [20], and the NILL algorithm in [29].
4.1 The Best Effort Algorithm
Kalogridis et al. [20] proposed a best-effort algorithm, which we
call BE in this paper. This algorithm tries to avoid changing the
external load e(t) whenever possible, and when the actual demand
d(t) differs from e(t), we charge or discharge the battery to make
up the difference. There are four cases when the battery cannot
make up the difference, and e(t) has to change. After each change,
the algorithm tries to maintain the new external load until the next
time one of the four cases occurs. These four cases are given in
Table 2.
Cases 1 and 2 are due to battery capacity constraints. The
ﬁrst case is when maintaining the load will overcharge the battery.
When one keeps e(t) = e(t − 1), then the battery’s state at time
t will be C(t − 1) + e(t − 1) − d(t). If this is greater than CH,
then one cannot maintain e(t) = e(t − 1). Observe that because
C(t − 1) ≤ CH, when C(t − 1) + e(t − 1) − d(t) > CH, it
must be e(t − 1) > d(t). In this case e(t) is set to d(t); and thus
e(t) > d(t), and we have an observable load increase. The second
case is when maintaining the load will cause the battery’s state of
charge to be too low, i.e., when C(t−1)+e(t−1)−d(t)  d(t) + Bc. In this
case, BE drops the external load to the level of providing for the
demand while maximally charging the battery, i.e., e(t) is set to be
d(t) + βc. The fourth case is when maintaining the external load
cannot provide for the demand even when maximally discharging
the batter, i.e., e(t − 1)  e(t − 1)), we know that either e(t) = d(t) (case 2), or
e(t) = d(t) − βd (case 4).
Recall that we are concerned primarily with inference of load-
change information. Knowing d(t) at a single time point does
not leak load-change information. We need two consecutive load
changes to attempt to recover a load-change event. As it turns
out, in the external load produced by the BE algorithm, about
half of load changes occur after another change. Furthermore,
almost all consecutive changes have the same up or down direc-
tion. That is, they are of the form (up,up) or (down,down), as op-
posed to (up,down) or (down,up). Finally, when the two consecu-
tive changes are in the same direction, they are almost always from
the same case. That is, two (up,up) changes are either both due
to case 2, or both due to case 4. As a result, this yields a highly-
accurate method of predicting load-changes from the output pro-
duced by the BE algorithm. The algorithm looks for two consecu-
tive changes of the same direction, i.e., e(t − 1)  e(t) > e(t + 1), and then predicts that at time
t + 1 there is a load change in the demand load of the magnitude of
e(t + 1) − e(t).
These features are due to the following reasons. When an energy
event starts, there are often consecutive load increases in d(t), and
when the event ends, there are often consecutive load decreases in
d(t). When an increase in d(t) triggers case 2, an increase occurs
in e(t) and e(t) = d(t).
In this case, the battery is low, and a
further increase in d(t + 1) would thus also trigger an increase at
time t + 1 with e(t + 1) = d(t + 1). Similarly, when an increase
in d(t) triggers case 4, the demand d(t) is too high, and the BE
algorithm sets e(t) so that the battery is maximally discharging.
When d(t + 1) > d(t), then we again have case 4 occurring at time
t + 1, causing two consecutive increases of the same case.
We evaluate the effectiveness of this edge inference in Section 6.
4.3 The NILL Algorithm
The NILL algorithm in [29] has three states, and attempts to
maintain a different constant load for each state. The algorithm
is illustrated in Table 3, and described below.
The Stable (ST) State. The algorithm starts in this state. In this
state, the algorithm attempts to set the external load to KST when
possible, where KST is the algorithm’s guess of the average load
in the near future, and is adjusted with state changes.
The algorithm needs to leave the ST state when one of the follow-
ing two situations occurs. The ﬁrst is when maintaining KST will
overcharge the battery, in which case it goes to the High Recovery
(HR) State. The second is when maintaining KST will cause the
418Case
1 (batter full)
2 (battery low)
3 (demand drops)
4 (demand increases)
Condition for Changing e(t)
BE Behavior
C(t − 1) + e(t − 1) − d(t) > CH e(t) ← d(t)
C(t − 1) + e(t − 1) − d(t)  d(t) + βc
e(t − 1)  CH s ← HR; KH ← d(t) − 0.5AMP
C(t − 1) + KST − d(t)  KST + βd
d(t)  KH + 5AMP
C(t − 1) + KH − d(t) > CH KH ← d(t) − 0.5AMP; e(t) ← KH
s ← ST; KST ← 0.5KST + 0.5Avg
C(t − 1)  0.8CH+0.2CL
True
d(t) > βc
True
Observable Load Change
decrease to KH
increase to KL
e(t) > KST , leaks d(t)
e(t)  KL, leaks d(t)
ﬂat at KL = βc
Table 3: The NILL algorithm. At each time t, the algorithm follows the cases for the current state sequentially; if a state change
occurs, the algorithm follows the cases in the new state to determine e(t). Observe that in S3, S4, and L2, information about d(t) is
leaked.
battery to be too low, in which case it goes to the Low Recovery
(LR) State.
Even when the algorithm is in the ST state, it may be infeasible
to maintain the external load to be KST . The demand may be either
too high (Case S3), or too low (Case S4). In these cases, the exter-
nal load is set to be using the battery to the maximal possibility.
When the system returns to the ST state from either HR or LR,
the value KST is updated to be a weighted average of the most
recent KST and Avg, the average load during the most recent state.
That is, the new KST is set to be αAvg + (1 − α)KST , where α
is chosen to be 0.5 in the experiments in [29].
The High Recovery (HR) State. In this state, the system should
be drawing an external load lower than the demand, and gradually
discharging the battery. When entering the HR state, the NILL
algorithm sets e(t) to be KH , which is chosen to be 0.5Amp lower
than the most recent demand, and when this is lower than the new
demand, then it resets KH . The NILL algorithm returns to the ST
state when the demand load is 5Amp higher than the current KH
or when the battery is discharged to 50% of the capacity.
In this state, the system should
The Low Recovery (LR) State.
be drawing an external load that is higher than the demand d(t),
and gradually charging the battery. The NILL algorithm sets e(t)
to be the max charging rate Bc, and returns to the ST state when
the battery is charged to 80% of the capacity.
4.4 Information leakage in the NILL Algorithm
As can be seen from Table 3, in three cases the NILL algorithm’s
output e(t) depends on d(t): Cases S3, S4, and L2. Case S4 almost
never occurs, as unless the battery’s charging rate is really small
compared with the average load, we have KST − βc  βd + KST , and in this case e(t)
is set to d(t) − βd. In the lower recovery state, a demand d(t) is
a peak if it is higher than βc, and e(t) is set to d(t). Thus if we
can identify when these peaks occur and which state the system is
in, we can accurately recover the demand at these times. When we
can recover two consecutive e(t)’s, we can recover a load-change
event.
Identifying which state the system is in from the output is feasi-
ble. The KST values for each stable state period is easily identiﬁed,
since it is maintained for an extended period of time. Furthermore,
when the external load goes from KST up to the maximal charge
rate, this indicates that the battery enters the LR state. When the
external load goes down from KST , this indicates that the battery
enters the HR state.
Discovering peaks is also feasible. As the NILL algorithms tries
to maintain different stable loads in each state, every load higher
than the stable load for the current state is a peak. If we ﬁnd two
peak e(t) readings consecutive, then we can recover a load-change
event with accurate magnitude.
One issue that complicates the recovering is that a state change
from ST to LR may occur during a peak period. As a peak demand
load during the stable state draws maximum discharge rate from
the battery, a sustained peak period will cause the system to enter
the LR state. Before the state change, we have e(t) = d(t) − βd,
and after the state change we have e(t) = d(t). From observing
that the external load values before and after the peak period, we
can discover that such a state change has occurred during the peak
period; however, we do not know exactly when the state change
occurs. We observe that when we infer load-change events, not
accounting for the state change will result in only one inaccurate
load-change event prediction during the peak period, because we
are subtracting two consecutive predicted demand loads. Our algo-
rithm tries to predict the state change time when the conﬁdence is
high. When among all load changes during the peak period, only
419New Time series data
h(t) : e(t) = h(t)β; β = min(βc, βd)
s(t) = (cid:26) 1 if e(t) ≥ d(t)
0 otherwise
The series h(t) determines the external load e(t).
The charging signal.
Alg
LS1
LS2
LC
RC
Summary of algorithm
Keep e(t) = e(t − 1) if possible; otherwise, randomly chooses s(t) ← {0, 1}.
Keep e(t) = e(t − 1) if possible; otherwise, chooses s(t) ← 1 if and only if C(t)  βc, then when the battery is at CL and d(t) =
β +(β −βc)/2, setting e(t) to be β or lower is not feasible because
it requires to keep discharging the battery, and setting e(t) at 2β or
higher is not feasible because this requires charging the battery at a
rate at least (β + βc)/2 > βc. Similarly, when β > βd, then when
the battery is at CH, and d(t) = β − (β − βd)/2 cannot be feasibly
provided.
5.1 Different Stepping Algorithms
To satisfy the rate limit constraint, it sufﬁces to ensure that the
algorithm always chooses among the two adjacent levels that sand-
wich d(t) between them. Therefore, given a demand load, a step-
ping algorithm only needs to decide whether to choose the level
that is higher than the demand load (in which case the battery is
charging) or the level that is lower than the demand load (in which
case the battery is discharging). We use s(t) to denote whether the
battery is charging or not. That is s(t) = 1 when d(t) < h(i) ∗ β,
and s(t) = 0 when d(t) ≥ h(t) ∗ β. We call s(t) the charging
signal. We note that when d(t) is given, the charging signal s(t)
uniquely determines the external load e(t). When s(t) = 1, we
β m. When s(t) = 0, we have h(t) = j d(t)
β k
have h(t) = l d(t)
when d(t) is not a multiple of β, and h(t) = d(t)
β − 1 when d(t)
is a multiple of β. Therefore, an algorithm in the stepping frame-
work can be speciﬁed by describing how the charging signal s(t)
is determined.
Many algorithms are possible in the stepping framework. We
consider the following stepping algorithms.
Lazy_Stepping (LS1 and LS2). Lazy stepping algorithms try to
maintain e(t) unless it is pushed to change. There are three cases in
which changes must occur: (1) When maintaining the load results
in overcharging the battery, in which case s(i) must be set to 0; (2)
When maintaining the load results in low battery, in which case s(i)
must be set to 1; and (3) when d(t) is either too low or too high for
e(t−1), i.e., d(t) ≤ (h(t−1)−1)∗β or d(t) ≥ (h(t−1)+1)∗β.
We consider two alternatives, which we call LS1 and LS2. LS1 sets
s(i) to be 1 if the battery is below half, and 0 otherwise. LS2 sets
s(i) randomly to be 1 or 0.
Lazy_Charging (LC). In this algorithm, one tries to maintain the
charging signal s(t) unchanged unless the battery is either too low
or too high, in which case one changes s(t). One advantage of the
LC algorithm is that this reduces the number of charge/discharge
cycles for the battery, unlike all other algorithms we have seen so
far. One disadvantage of the LC algorithm is that it is generally
easy to predict s(t), reducing the possible range of d(t) from 2β to
β.
In this algorithm, one sets s(t) inde-
Random_Charging (RC).
pendent of d(t − 1) and s(t − 1). In RC, we set the probability
s(t) is set to 1 is determined by the battery’s state: Pr[s(t) = 0] =
C(t)−CL
CH−CL
.
5.2 Information Leakage of Stepping Algo-
rithms
One strength of the stepping framework is that no matter which
speciﬁc stepping algorithm one uses, one always obtains some de-
gree of privacy guarantee.
We observe that it is sometimes possible to predict s(t). A trivial
example is that observing e(t) = 0 one knows for sure that s(t) =
0. Accurately predicting s(t) is also possible in LC. However,
as argued below, even if one could accurately predict s(t), after
observing e(t), the possible range of d(t) is still of size β.
We note that the stepping algorithms differ from existing quanti-
zation algorithms used in signal processing because existing work
420aims at minimizing quantization error, and our privacy protection
goal means that we want to maximize such error, subject to the
restriction that one can quantize a value only to the upper or lower
integer values. One difference is as follows. When the demand load
is 2.9β, reducing quantization error implies choosing 3β. However,
none of the stepping algorithms proposed above would prefer 3β to
2β. As a result, when one observes that the load is 2β at time t, one
knows that the demand load is in (β, 3β). Even if one can predict
that the battery is currently discharging, the possible range of the
actual demand load at time t is still [2β, 3β). Furthermore, when
one observes that next time instant (t + 1) the external load is 4β,
one knows that a load increase event has occurred; however, even if
one could tell that the battery is still discharging, the possible range
of demand load at t + 1 is still [4β, 5β), thus the possible range for
the increase amplitude is (1β, 3β), and the observer’s uncertainty