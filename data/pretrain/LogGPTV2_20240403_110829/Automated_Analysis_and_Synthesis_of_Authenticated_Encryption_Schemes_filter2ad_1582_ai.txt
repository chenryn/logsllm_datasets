statistical distance at most 2/2n from a uniform string, independent of the prior ciphertexts. Hence the
chance of forgery is at most 2/2n + 2−τ.
Case 3: There is r ≤ m such that C2r−1C2r 6= C0
j for every j  4. If this happens then we can also launch the privacy attack in Case 1.
In the Enc graph, the values of the IN and INI nodes are 0n, and thus the value at the ﬁrst FIN node must
be 0n as well. Hence the output value of the Tag graph is also 0n. The adversary wins with advantage at
least 1 − 2−τ.
Case 3: (a1, a2) = (1, 1), meaning that that the output value of the Tag graph is always the same as the
XOR of the values at the two INI nodes. This is a vulnerability if this XOR value is a linear combination
of the plaintext blocks. We check if in the Enc graph, the representative vectors (b1, . . . , bs) and (c1, . . . , cs)
of the two FIN nodes satisfy bj = cj for every j > 4. If this happens then we can also launch the privacy
attack in Case 1. The adversary wins with advantage at least 1 − 2−τ.
In the second test, in lines 20–22 of Figure 3.6, we check if the output values are independent when we
evaluate the Tag graph twice on the same tweak but diﬀerent inputs. (Actually, in the test, the two inputs
must diﬀer only in the ﬁrst half.) Without loss of generality, assume that the Tag graph passes the test at
line 02–03. Then the representative vector (a1, a2, a3) of the OUT node must have a3 = 1. Let p be the parent
of the TBC node, and let (d1, d2, d3) be the representative vector of p. Then d3 = 0 because the Tag graph
has only a single TBC node, and this node is not an ancestor of p. We consider the following cases.
Case 1: d1 = 0, meaning that if we evaluate the Tag graph twice, on the same tweak, such that the inputs
agree on the second half, then the two results agree on the value at node p. We then check if a1 = 0. If this
happens then in the two evaluations above, they also agree on the value at the OUT node. We now give an
authenticity attack. First query 0n to get answer C k T, with |C| = n. (Note that this query is a fragmentary
string.) Next produce C∗ k T as a forgery, for any arbitrary C∗ 6= C. In both the encryption query and the
forgery query, the values at the second INI node of the Tag graph are 0n. Hence tag T is also a valid tag
for C∗, and thus the adversary wins with advantage 1.
Case 2: d1 = d2 = 1. We ﬁrst check if a1 ⊕ a1 = 0.
If this happens then the output value of the
Tag graph depends solely on the XOR of the values at the two INI nodes. This will be a vulnerability if
the XOR value can be linearly determined from the ciphertext blocks. We check if in the Dec graph, the
representative vectors (x1, . . . , xs) and (y1, . . . , ys) of the two FIN nodes satisfy xj = yj for every j > 4. If
this happens then we launch the following authenticity attack. First query 02n to get ciphertext C1C2 k T,
with |C1| = |C2| = n. Recall that (x3, x4) and (y3, y4) are coordinates corresponding to the ciphertext blocks
in the FIN nodes of the Dec graph. Let b = x3 ⊕ x4 ⊕ y3 ⊕ y4. If b = 0 then output (C1 ⊕1n)k(C2 ⊕1n)k T as
28
a forgery. Note that in the encryption query, the XOR of the values at the two INI nodes of the Tag graph
is x3 · C1 ⊕ x4 · C2 ⊕ y3 · C1 ⊕ y4 · C2, whereas its counterpart in the forgery query is
x3 · (C1 ⊕ 1n) ⊕ x4 · (C2 ⊕ 1n) ⊕ y3 · (C1 ⊕ 1n) ⊕ y4 · (C2 ⊕ 1n) = x3 · C1 ⊕ x4 · C2 ⊕ y3 · C1 ⊕ y4 · C2.
If b = 1 then one of x3 ⊕ y3 and x4 ⊕ y4 must be 0 while the other is 1. Without loss of generality, assume
that x3 ⊕ y3 = 0. Then output (C1 ⊕ 1n) k C2 k T as a forgery. Now in the forgery query, the XOR of the
values at the two INI nodes of the Tag graph is
x3 · (C1 ⊕ 1n) ⊕ x4 · C2 ⊕ y3 · (C1 ⊕ 1n) ⊕ y4 · C2 = x3 · C1 ⊕ x4 · C2 ⊕ y3 · C1 ⊕ y4 · C2.
Hence, regardless of the value of b, the encryption query and the forgery query always agree on the XOR of
the values at the two INI nodes of the Tag graph. The adversary thus wins with advantage 1.
Note that the case (d1, d2) = (1, 0) cannot happen, because it passes the test at line 20–22: if the two
inputs of the Tag graph diﬀer in the ﬁrst half then their values at the TBC node are independent random
strings and so are the values at the OUT nodes.
Attacks based on an Enc graph. There is a single test that Priv performs on an Enc graph. At lines
04–06 of Figure 3.6, we check if the output values of the graph are random and independent, for a fresh
TBC tweak. If the Enc graph fails this test, let (b1, . . . , bs) and (c1, . . . , cs) be the representative vectors of
the two OUT nodes of the Enc graph. We consider the following cases.
Case 1: bj = 0 for every j > 4, meaning that the value of the ﬁrst OUT node can be linearly determined from
the values at the IN and INI nodes. We launch the following privacy attack: query 02n to get the answer
C, and then output 1 if the ﬁrst n-bit block of C is 0n, and output 0 otherwise. The adversary wins with
advantage 1 − 2−τ.
Case 2: cj = 0 for every j > 4. This case is similar to Case 1.
Case 3: bj = cj for every j > 4. Then the XOR of the values at two OUT nodes can be linearly determined
from the values at the IN and INI nodes. We launch the following privacy attack. First query 02n to get the
answer C1C2T, with |C1| = |C2| = n. Next, output 1 if C1 = C2, and output 0 otherwise. The adversary
wins with advantage 1 − 2−τ.
Attacks based on a Dec graph. There are two tests that Auth performs on a Dec graph. First, in lines
14–16 of Figure 3.6, we evaluate the graph twice on the same tweak with distinct inputs that agree on the
values of the INI nodes to check if the values at the ﬁrst FIN node are random and independent.
A possible way to fail this test is that the value in the ﬁrst FIN node depends only on at most a single
IN node. We thus check if both IN nodes are ancestors of the ﬁrst FIN node. If this does not happen then
without loss of generality suppose that the ﬁrst IN node is not an ancestor of the ﬁrst FIN node. We can
launch the following authenticity attack. First query 02n to get C1C2T, with |C1| = |C2| = n. Next, output
(C1 ⊕ 1n) k C2 k T as the forgery attempt. The adversary wins with advantage 1.
Now suppose that both IN nodes are ancestors of the ﬁrst FIN node. An example of such a scheme that
still fails the test is the insecure variant of OTR as illustrated in Figure 3.8. We can exploit this if the Dec
graph satisﬁes the following additional constraints:
(i) There are b1, b2, c1, c2 ∈ {0, 1} such that (b1, b2) 6= (0, 0) and XORing b1 · ∆ and b2 · ∆ to the values
of the two IN nodes, respectively, while keeping the same values of the INI nodes, results in (c1 · ∆)-
and (c2 · ∆)-change in the values of the ﬁrst and second FIN nodes, respectively. For example, in the
insecure variant of OTR, (i) holds for b1 = c1 = 1 and b2 = c2 = 0.
(ii) There exist a1, a2 ∈ {0, 1} such that for any ∆ ∈ {0, 1}n, XORing c1 · ∆, c2 · ∆, a1 · ∆, a2 · ∆ to the
values of the INI nodes and IN nodes, respectively, will not change the value of the ﬁrst FIN node. For
example, in the insecure variant of OTR, (ii) holds for a1 = 1 and a2 = 0.
To check for these properties, we do the following:
29
• Consider all (r1, r2) ∈ {(1, 0), (0, 1), (1, 1)}. If all TBC ancestors (x1, . . . , xs) of at least one FIN node
satisfy x3r1 = x4r2 then let b1 = r1 and b2 = r2.
• Let (u1, . . . , us) and (w1, . . . , ws) be the representative vectors of the ﬁrst and second FIN nodes,
respectively. Let c1 = u3b1 ⊕ u4b2 and c2 = w3b1 ⊕ u4b2.
• Consider all t1, t2 ∈ {0, 1}. If c1u1 ⊕ c2u2 = t1u3 ⊕ t2u4, and all TBC ancestors (x1, . . . , xs) of the ﬁrst
FIN node satisfy c1x1 ⊕ c2x2 = t1x3 ⊕ t2x4, then let a1 = t1 and a2 = t2.
If in the ﬁrst check, there are multiple pairs (r1, r2) then we ﬁnd corresponding (t1, t2) for each such pair,
but only choose a tuple (r1, r2, t1, t2) to determine (a1, a2, b1, b2, c1, c2). If those checks pass, we launch the
following authenticity attack. Query 04n to get answer C1C2C3C4T, where |C1| = |C2| = |C3| = |C4| = n.
Then output (C1 ⊕ b1 · 1n) k (C2 ⊕ b2 · 1n) k (C3 ⊕ a1 · 1n) k (C4 ⊕ a2 · 1n) k T as the forgery attempt. The
adversary wins with advantage 1.
In the second test, in lines 20–22 of Figure 3.6, we evaluate the graph twice, on the same tweak, and
check if the values at the ﬁrst FIN node are random and independent, where in one input, the value at the
ﬁrst INI is chosen at random. If the Dec graph fails this test, we’ll determine if the value at the ﬁrst FIN
node can be computed from just the input and the tweak. To achieve this, initially, in the Dec graph, we
color the two IN nodes red while all other nodes are blue. Our goal is to recolor some blue nodes of the
graphs to red, so that the value of any red node can be computed from the tweak and the input without
knowing the values at the INI nodes. We’ll traverse the graph in an arbitrary topological order. At each
node, if it’s a FIN/OUT/DUP/TBC node and its parent is red then color it red. If it’s an XOR node then let
(y1, . . . , ys) be the representative vector of this node. If the corresponding nodes for all coordinates i such
that yi = 1 are red then color the current node red. When the algorithm terminates, if the ﬁrst FIN node
is red then we launch the following authenticity attack. First query 04n to get answer C1C2C3C4T, where
|C1| = |C2| = |C3| = |C4| = n. Next, query C∗
1 6= C1, as a forgery attempt. The
adversary wins with advantage 1.
1 C2C3C4T, for any C∗
30
Changelog
• Version 2.1.1 (August 11, 2016): Letter instead of A4 paper size.
• Version 2.1 (May 4, 2016): Major revision, ﬁxing some bugs in generating attacks.
• Version 2.0 (August 12, 2015): Major revision, with additional illustrations and an approach for gen-
erating concrete attacks on schemes not found secure by our analysis. The running time of OCB and
the three schemes in Figure 4.3 is updated: TurboBoost has to be disabled for accurate timing.
• Version 1.0 (June 23, 2015): First release.
31