cc1133..iinndddd 552211 88//1199//22001111 1122::1133::5599 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 522
522 Chapter 13 n Attacking Users: Other Techniques
Variable Assignment
Consider a social networking application that makes heavy use of asynchronous
requests for actions such as updating status, adding friends, and posting com-
ments. To deliver a fast and seamless user experience, parts of the user interface
are loaded using dynamically generated scripts. To prevent standard CSRF
attacks, these scripts include anti-CSRF tokens that are used when performing
sensitive actions. Depending on how these tokens are embedded within the
dynamic scripts, it may be possible for an attacker to capture the tokens by
including the relevant scripts cross-domain.
For example, suppose a script returned by the application on wahh-network
.com contains the following:
...
var nonce = ‘222230313740821’;
...
A simple proof-of-concept attack to capture the nonce value cross-domain
would be as follows:
In a different example, the value of the token may be assigned within a function:
function setStatus(status)
{
...
nonce = ‘222230313740821’;
...
}
In this situation, the following attack would work:
Various other techniques may apply in different situations with variable
assignments. In some cases the attacker may need to implement a partial replica
of the target application’s client-side logic to be able to include some of its scripts
and capture the values of sensitive items.
cc1133..iinndddd 552222 88//1199//22001111 1122::1133::5599 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 523
Chapter 13 n Attacking Users: Other Techniques 523
E4X
In the recent past, E4X has been a fast-evolving area, with browser behavior
being frequently updated in response to exploitable conditions that have been
identifi ed in numerous real-world applications.
E4X is an extension to ECMAScript languages (including JavaScript) that adds
native support for the XML language. At the present time, it is implemented in
current versions of the Firefox browser. Although it has since been fi xed, a classic
example of cross-domain data capture can be found in Firefox’s handling of E4X.
As well as allowing direct usage of XML syntax within JavaScript, E4X allows
nested calls to JavaScript from within XML:
var foo={prompt(‘Please enter the value of bar.’)};
These features of E4X have two signifi cant consequences for cross-domain
data-capture attacks:
n A piece of well-formed XML markup is treated as a value that is not
assigned to any variable.
n Text nested in a {...} block is executed as JavaScript to initialize the
relevant part of the XML data.
Much well-formed HTML is also well-formed XML, meaning that it can be
consumed as E4X. Furthermore, much HTML includes script code in a {...}
block that contains sensitive data. For example:
...
In earlier versions of Firefox, it was possible to perform a cross-domain script
include of a full HTML response like this and have some of the embedded
JavaScript execute within the attacker’s domain.
cc1133..iinndddd 552233 88//1199//22001111 1122::1133::5599 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 524
524 Chapter 13 n Attacking Users: Other Techniques
Furthermore, in a technique similar to the CSS injection attack described
previously, it was sometimes possible to inject text at appropriate points within
a target application’s HTML response to wrap an arbitrary {...} block around
sensitive data contained within that response. The whole response could then
be included cross-domain as a script to capture the wrapped data.
Neither of the attacks just described works on current browsers. As this pro-
cess continues, and browser support for novel syntactic constructs is further
extended, it is likely that new kinds of cross-domain data capture will become
possible, targeting applications that were not vulnerable to these attacks before
the new browser features were introduced.
Preventing JavaScript Hijacking
Several preconditions must be in place before a JavaScript hijacking attack can
be performed. To prevent such attacks, it is necessary to violate at least one
of these preconditions. To provide defense-in-depth, it is recommended that
multiple precautions be implemented jointly:
n As for requests that perform sensitive actions, the application should
use standard anti-CSRF defenses to prevent cross-domain requests from
returning any responses containing sensitive data.
n When an application dynamically executes JavaScript code from its own
domain, it is not restricted to using  tags to include the script.
Because the request is on-site, client-side code can use XMLHttpRequest to
retrieve the raw response and perform additional processing on it before it
is executed as script. This means that the application can insert invalid or
problematic JavaScript at the start of the response, which the client applica-
tion removes before it is processed. For example, the following code causes
an infi nite loop when executed using a script include but can be stripped
before execution when the script is accessed using XMLHttpRequest:
for(;;);
n Because the application can use XMLHttpRequest to retrieve dynamic script
code, it can use POST requests to do so. If the application accepts only POST
requests for potentially vulnerable script code, it prevents third-party
sites from including them using  tags.
The Same-Origin Policy Revisited
This chapter and the preceding one have described numerous examples of
how the same-origin policy is applied to HTML and JavaScript, and ways
in which it can be circumvented via application bugs and browser quirks.
cc1133..iinndddd 552244 88//1199//22001111 1122::1133::5599 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 525
Chapter 13 n Attacking Users: Other Techniques 525
To understand more fully the consequences of the same-origin policy for
web application security, this section examines some further contexts in
which the policy applies and how certain cross-domain attacks can arise in
those contexts.
The Same-Origin Policy and Browser Extensions
The browser extension technologies that are widely deployed all implement
segregation between domains in a way that is derived from the same basic
principles as the main browser same-origin policy. However, some unique
features exist in each case that can enable cross-domain attacks in some
situations.
The Same-Origin Policy and Flash
Flash objects have their origin determined by the domain of the URL from which
the object is loaded, not the URL of the HTML page that loads the object. As
with the same-origin policy in the browser, segregation is based on protocol,
hostname, and port number by default.
In addition to full two-way interaction with the same origin, Flash objects
can initiate cross-domain requests via the browser, using the URLRequest
API. This gives more control over requests than is possible with pure browser
techniques, including the ability to specify an arbitrary Content-Type header
and to send arbitrary content in the body of POST requests. Cookies from the
browser’s cookie jar are applied to these requests, but the responses from
cross-origin requests cannot by default be read by the Flash object that initi-
ated them.
Flash includes a facility for domains to grant permission for Flash objects from
other domains to perform full two-way interaction with them. This is usually
done by publishing a policy fi le at the URL /crossdomain.xml on the domain
that is granting permission. When a Flash object attempts to make a two-way
cross-domain request, the Flash browser extension retrieves the policy fi le
from the domain being requested and permits the request only if the requested
domain grants access to the requesting domain.
Here’s an example of the Flash policy fi le published by www.adobe.com:
cc1133..iinndddd 552255 88//1199//22001111 1122::1133::5599 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 526
526 Chapter 13 n Attacking Users: Other Techniques
HACK STEPS
You should always check for the /crossdomain.xml fi le on any web applica-
tion you are testing. Even if the application itself does not use Flash, if per-
mission is granted to another domain, Flash objects issued by that domain are
permitted to interact with the domain that publishes the policy.
n If the application allows unrestricted access (by specifying ), any other site can perform two-way
interaction, riding on the sessions of application users. This would allow
all data to be retrieved, and any user actions to be performed, by any
other domain.
n If the application allows access to subdomains or other domains used by
the same organization, two-way interaction is, of course, possible from
those domains. This means that vulnerabilities such as XSS on those
domains may be exploitable to compromise the domain that grants per-
mission. Furthermore, if an attacker can purchase Flash-based advertis-
ing on any allowed domain, the Flash objects he deploys can be used to
compromise the domain that grants permission.
n Some policy fi les disclose intranet hostnames or other sensitive informa-
tion that may be of use to an attacker.
A further point of note is that a Flash object may specify a URL on the target
server from which the policy fi le should be downloaded. If a top-level policy
fi le is not present in the default location, the Flash browser tries to download a
policy from the specifi ed URL. To be processed, the response to this URL must
contain a validly formatted policy fi le and must specify an XML or text-based
MIME type in the Content-Type header. Currently most domains on the web do
not publish a Flash policy fi le at /crossdomain.xml, perhaps on the assumption
that the default behavior with no policy is to disallow any cross-domain access.
However, this overlooks the possibility of third-party Flash objects specifying
a custom URL from which to download a policy. If an application contains any
functionality that an attacker could leverage to place an arbitrary XML fi le into
a URL on the application’s domain, it may be vulnerable to this attack.
The Same-Origin Policy and Silverlight
The same-origin policy for Silverlight is largely based on the policy that is
implemented by Flash. Silverlight objects have their origin determined by the
domain of the URL from which the object is loaded, not the URL of the HTML
page that loads the object.
cc1133..iinndddd 552266 88//1199//22001111 1122::1133::5599 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 527
Chapter 13 n Attacking Users: Other Techniques 527
One important difference between Silverlight and Flash is that Silverlight does
not segregate origins based on protocol or port, so objects loaded via HTTP can
interact with HTTPS URLs on the same domain.
Silverlight uses its own cross-domain policy fi le, located at /clientaccess-
policy.xml. Here’s an example of the Silverlight policy fi le published by www.
microsoft.com:
The same considerations as already discussed for the Flash cross-domain
policy fi le apply to Silverlight, with the exception that Silverlight does not allow
an object to specify a nonstandard URL for the policy fi le.
If the Silverlight policy fi le is not present on a server, the Silverlight browser
extension attempts to load a valid Flash policy fi le from the default location. If
the fi le is present, the extension processes that instead.
The Same-Origin Policy and Java
Java implements segregation between origins in a way that is largely based on
the browser’s same-origin policy. As with other browser extensions, Java applets
have their origin determined by the domain of the URL from which the applet
is loaded, not the URL of the HTML page that loads the object.
One important difference with the Java same-origin policy is that other
domains that share the IP address of the originating domain are considered
to be same-origin under some circumstances. This can lead to limited cross-
domain interaction in some shared hosting situations.
Java currently has no provision for a domain to publish a policy allowing
interaction from other domains.
cc1133..iinndddd 552277 88//1199//22001111 1122::1133::5599 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 528
528 Chapter 13 n Attacking Users: Other Techniques
The Same-Origin Policy and HTML5
As originally conceived, XMLHttpRequest allows requests to be issued only to
the same origin as the invoking page. With HTML5, this technology is being
modifi ed to allow two-way interaction with other domains, provided that the
domains being accessed give permission to do so.
Permission for cross-domain interaction is implemented using a range of new
HTTP headers. When a script attempts to make a cross-domain request using
XMLHttpRequest, the way this is processed depends on the details of the request:
n For “normal” requests, the kind that can be generated cross-domain using
existing HTML constructs, the browser issues the request and inspects
the resulting response headers to determine whether the invoking script
should be allowed to access the response from the request.
n Other requests that cannot be generated using existing HTML, such as
those using a nonstandard HTTP method or Content-Type, or that add
custom HTTP headers, are handled differently. The browser fi rst makes an
OPTIONS request to the target URL and then inspects the response headers
to determine whether the request being attempted should be permitted.
In both cases, the browser adds an Origin header to indicate the domain from
which the cross-domain request is being attempted:
Origin: http://wahh-app.com
To identify domains that may perform two-way interaction, the server’s
response includes the Access-Control-Allow-Origin header, which may include
a comma-separated list of accepted domains and wildcards:
Access-Control-Allow-Origin: *
In the second case, where cross-domain requests are prevalidated using an
OPTIONS request, headers like the following may be used to indicate the details
of the request that is to be attempted:
Access-Control-Request-Method: PUT
Access-Control-Request-Headers: X-PINGOTHER
In response to the OPTIONS request, the server may use headers like the fol-
lowing to specify the types of cross-domain requests that are allowed:
Access-Control-Allow-Origin: http://wahh-app.com
Access-Control-Allow-Methods: POST, GET, OPTIONS
Access-Control-Allow-Headers: X-PINGOTHER
Access-Control-Max-Age: 1728000
cc1133..iinndddd 552288 88//1199//22001111 1122::1133::5599 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 529
Chapter 13 n Attacking Users: Other Techniques 529
HACK STEPS
1. To test an application’s handling of cross-domain requests using
XMLHttpRequest, you should try adding an Origin header specifying a
different domain, and examine any Access-Control headers that are
returned. The security implications of allowing two-way access from any
domain, or from specified other domains, are the same as those described
for the Flash cross-domain policy.
2. If any cross-domain access is supported, you should also use OPTIONS
requests to understand exactly what headers and other request details