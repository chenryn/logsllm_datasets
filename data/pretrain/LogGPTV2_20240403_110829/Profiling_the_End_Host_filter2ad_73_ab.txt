### Variability Across Hosts
We observe significant variability in behavior across different hosts. For instance, scanning activities can be easily identified from graphlets. A port scan would manifest as an unusually large number of destination ports associated with a single destination address. Similarly, if a host initiates an address-space scan for a specific port (a behavior often seen in worm-like activity), it would appear as an excessively large number of destination IPs associated with a single destination port.

### Building Profiles
The information gathered from monitoring a host's communication traffic can result in a large and complex graphlet, known as the activity graphlet. As per our objectives outlined in the introduction, our goal is to capture "typical" or "persistent" behaviors in a compact manner that filters out transient noise. We now describe our methods for converting the activity graphlet into a profile graphlet through policies for compression (i.e., summarization) and adaptivity.

#### Method Overview
Our method, depicted in Fig. 3, employs policies designed based on the following observations:
- Activity graphlets vary dramatically from one host to another.
- Summary metrics, such as the number of nodes in the graphlet, are highly volatile.
- Common characteristics across many hosts, time intervals, and traces include a small number of high-degree nodes (referred to as "knots" in the graphlet). These nodes arise from flows that share at least one graphlet node (e.g., distinct web flows sharing port 80).
- Many paths in the activity graphlets consist of one-degree nodes, which typically correspond to ephemeral flows.

#### Significant Nodes
Based on these insights, we define the set of significant nodes in an activity graphlet as those nodes with an in-degree or out-degree greater than 1. The only nodes retained in our profile graphlets are these significant nodes. The process for populating the profile graphlets is outlined in Fig. 4. An example of an activity graphlet and the resulting profile graphlet is shown in Fig. 1. We refer to the group of significant nodes as the "significant set," and the profile graphlet consists of the union of all flows affiliated with these significant nodes. Thus, the profile graphlet is a subset of the initial activity graphlet, comprising two components: (a) the significant set and (b) the profile graphlet.

#### Adaptivity
To evolve, our profiles need to:
1. Remove stale information.
2. Add new content when it becomes relevant.

The timescale of this adaptivity affects both the stability and meaningfulness (i.e., utility) of the profile. If profiles evolve too quickly, they will be less stable (nodes will be added and removed frequently); if they evolve too slowly, they will be less meaningful (missing new important nodes and containing stale ones).

Let \( t \) denote the update period of the profile graphlet. Updating the profile means that the set of significant nodes at time \( t \) is the union of the sets at times \( t-1 \) and \( t \).

We use a delayed-accept policy to control the addition of new nodes. Significant nodes are not inserted into the graphlet profile unless they are active for at least two consecutive intervals \( t \). This mechanism is robust to ephemeral nodes introduced by the reuse of port numbers across flows.

We also employ an aging policy to remove obsolete information. A significant node is removed from a profile if it is inactive for a certain period. Our timeout period \( N \) is measured in days. Due to space constraints, we do not illustrate the stability and utility trade-offs observed for various values of \( t \) and \( N \). We found that using an update period \( t \) of 15 minutes and an aging threshold \( N \) of one week achieved a good balance between utility and stability.

### Properties of End-System Profiles
Here, we describe the properties that establish the robustness of significant nodes as a means of profiling end-user activity. We examine the extent to which our profiles meet the five goals mentioned in Section 1.

#### Goal 1 - Capturing Representative Information
We first examine the identities of the nodes that populate the user profiles. Intuitively, the nodes should depict the primary activities of each end-system and, if possible, reflect its functional role in the network (e.g., client vs. server).

Table 1 presents five profile instances for three randomly selected clients and two servers from our enterprise networks. We observe that all significant nodes in the client profiles are destination ports reflecting well-known services accessed by the clients. For example, Client 3 appears to run the BitTorrent peer-to-peer application, and the set of significant nodes reflects common ports used by this application. The significant nodes for the servers, however, reflect the ports where the offered services reside.

**Table 1: Profile Instances of Various End-Systems**

| Host           | Activity Graphlet Size | Significant Node Set in the Profile                                      |
|----------------|------------------------|-------------------------------------------------------------------------|
| Client1        | 104                    | dst ports: 22 (SSH), 443 (HTTPS), 80 (HTTP), 2233 (VPN)                |
| Client2        | 72                     | dst ports: 993 (IMAP), 137 (NETBIOS), 80 (HTTP), 995 (POP3)            |
| Client3        | 259                    | dst ports: 80 (HTTP), 6881, 6882, 6884, 6346, 16881 (P2P)              |
| NFS SERVER     | 31                     | src port: 2049 (NFS)                                                   |
| LDAP SERVER    | 309                    | src ports: 389 (LDAP), 139 (NETBIOS)                                   |

**Table 2: Most Popular Significant Nodes**

| Destination Port | Service   |
|------------------|-----------|
| 80               | WEB       |
| 5499             | CHAT      |
| 443              | HTTPS     |
| 2233             | VPN       |
| 53               | DNS       |
| 1863             | MSN       |
| 389              | LDAP      |
| 22               | SSH       |

To examine the identities of our profiles in a broader setting, we looked at the most popular significant nodes across all profiles. Table 2 presents the eight most popular nodes, which represent services at well-known ports. This initial data exploration indicates that our profiles are able to capture dominant and meaningful end-system behavior and discriminate its functional role in the network.

Note that while a number of significant nodes are common in host profiles, these significant nodes can be annotated with a variety of information, such as their average out-degree, to capture user variability, as shown in Fig. 2.

#### Goal 2 - Compact Representation
To assess the breadth and compactness of the profiles, we define two metrics:
- **Compression**: The ratio of the number of significant nodes over the total number of nodes in the activity graphlet.
- **Coverage**: The fraction of flows that the profile captures compared to the total number of flows generated by the host (a flow is defined here as a unique 5-tuple).

A good profile should achieve high coverage and high compression because the significant nodes should:
- Represent the majority of the activity of the edge-host (high coverage).
- Amount to only a small number of the total nodes in the graphlet (high compression).

Fig. 5(left) shows that abstracting the graphlet to a set of significant nodes leads to a compression greater than 80% compared to the activity graphlet. We also see that the significant nodes often cover more than 90% of the flows sourced at the host. By definition, "uncovered" flows correspond to those whose path comprises only one-degree nodes in the graphlet. We thus conclude that our set of significant nodes offers both high compression and coverage.

#### Goal 3 - Stability
Recall that our profiles are updated every 15 minutes. We now examine the amount and nature of changes occurring in the profile over time. For each end host, we examined the difference in the set of significant nodes from one time slot to the next. The difference is the ratio of the number of nodes present in both intervals divided by the average number of significant nodes in the two sets. In Fig. 5(right), we present the CDF of these ratios for all hosts over all time slots.

We observe that roughly 50% of the time there is no change at all from one time slot to the next. Also, less than 10% of the time does a node change by more than 70%. We conclude that while there appears to be a reasonable amount of stability from one 15-minute window to the next, every so often the profile can experience a large change. These initial results hint that perhaps over shorter time scales, these profiles can remain stable, yet over longer time periods, profiles can experience large amounts of change. This indicates that a notion of stability should perhaps be tied to the amount of evolution occurring in user behavior, a subject of our future research.

#### Goal 4 - Evolvability
Fig. 6(left) demonstrates the impact of the "delayed-accept" and "aging" policies on the total number of significant nodes for all hosts in the network. The upper line corresponds to the total number of significant nodes across all hosts when only "aging" is used, while the bottom line also incorporates the effect of "delayed-accept." During the first week of profiling, the number of significant nodes shows a constant increase in both cases. This is the "learning" stage of our approach and lasts approximately 1.5 weeks. While the effect of "delayed-accept" is evident across time, "aging" is observed after the first week due to our choice of "weekly" history. The sum of significant nodes appears not to vary significantly after approximately 2 weeks. Note that while the time interval on the x-axis spans a time period of a month, we only observe a few changes. These initial results indicate that our delayed-accept and aging policies do manage to filter transient behavior while balancing stability.

#### Goal 5 - Capturing Historical Information
Recall from Section 3 that each significant node in the profile can be annotated with various time-series information. Fig. 6(right) presents such an example in a box plot showing the out-degree of a common significant node (web) across two hosts. Such time-series can be further analyzed to provide insight regarding typical individual behavior (e.g., average number of TCP connections), a range of behavior (e.g., 90th percentile points), and outliers (denoted with the points outside the wedges in the figure). We postulate that this sort of information could be important for anomaly detection applications (benign or malicious).

### Conclusions and Discussion
In this paper, we present a novel approach to profile end-host systems based on their transport-layer behavior. We introduce the idea of using graphs to capture flow information and inter-flow dependencies. We illustrate that all of a host's flow data can be greatly compressed into a compact representation, capturing dominant user behavior. Initial results suggest that a user's behavior can undergo large changes over time, underscoring the need for adaptive profiling.

We envision our profiling methodology being used in various ways depending on the intended goal, such as:
- **Enterprise Network Management**: To understand user behavior for resource provisioning, load balancing, and allowing for user clustering based on similar profiles.
- **Anomaly Detection**: Monitoring the profile graphlet in comparison to the activity graphlet could be useful for detecting anomalies. Abrupt changes in either the normal range of behavior or outlier events could signal an anomaly, whether benign or malicious.
- **Scanning Attempts**: Monitoring the patterns in the out-degrees of protocol-nodes or other significant nodes could reveal scanning attempts.

### References
1. Intrusion Detection Systems (IDS) Part 2 - Classification; methods; techniques. [Online]. Available: <http://www.windowsecurity.com/articles/IDS-Part2-Classification-methods-techniques.html> (Accessed: 2004).
2. Arbor Networks. [Online]. Available: <http://www.arbor.net/>.
3. Graphviz. [Online]. Available: <http://www.graphviz.org/>.
4. J. Jung, B. Krishnamurthy, and M. Rabinovich. Flash crowds and denial of service attacks: Characterization and implications for CDNs and web sites. In Proceedings of the 11th International World Wide Web Conference, May 2002.
5. T. Karagiannis, K. Papagiannaki, and M. Faloutsos. BLINC: Multi-level Traffic Classification in the Dark. In ACM SIGCOMM, August 2005.
6. A. Lakhina, M. Crovella, and Christophe Diot. Mining Anomalies Using Traffic Feature Distributions. In Proc. of ACM SIGCOMM, August 2005.
7. P. McDaniel, S. Sen, O. Spatscheck, J. Van der Merwe, B. Aiello, and C. Kalmanek. Enterprise Security: A Community of Interest Based Approach. In Proc. of Network and Distributed System Security (NDSS), February 2006.
8. V. Padmanabhan, S. Ramabhadran, and J. Padhye. NetProfiler: Wide-Area Networks Using Peer Cooperation. In Proceedings of the Fourth International Workshop on Peer-to-Peer Systems (IPTPS), February 2005.
9. The CoMo Project. [Online]. Available: <http://como.intel-research.net/>.
10. G. Theocharous, S. Mannor, N. Shah, B. Kveton, S. Siddiqi, and C.-H. Yu. Machine Learning for Adaptive Power Management, 2006. Intel Technology Journal.
11. Mengjun Xie, Keywan Tabatabai, and Haining Wang. Identifying Low-Profile Web Server’s IP Fingerprint. In IEEE QEST, 2006.
12. K. Xu, Z.-L. Zhang, and S. Bhattacharyya. Profiling Internet Backbone Traffic: Behavior Models and Applications. In ACM Sigcomm, August 2005.