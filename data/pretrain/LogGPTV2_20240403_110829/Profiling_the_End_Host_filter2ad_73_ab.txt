Again we see considerable variability across hosts.
• Scanning behavior can be easily seen from graphlets. For example, port scan-
ning would appear as an excessively large number of destination ports associated
with a single destination address. Similarly if a host initiates an address-space
scan for a speciﬁc port (worm-like behavior) this would appear as an excessively
large number of destination IPs associated with a single destination port.
3.3 Building Proﬁles
All the information obtained from monitoring a host’s communication traﬃc
could lead to an enormous graphlet (called the activity graphlet). Recall that,
as per our goals described in the introduction, our aim is to capture “typical”
or “persistent” behaviors in a compact way that avoids transient noise. We now
describe our methods for converting the activity graphlet into a proﬁle graphlet
via policies for compression (i.e., summarization) and adaptivity.
Our method is depicted in Fig. 3. The policies used in this method were de-
signed as follows. The intuition behind our summarization policy comes from
observations on our trace data that activity graphlets do vary dramatically from
one host to another, and a summary metric such as number of nodes in the
graphlet is very volatile. Looking at activity graphlets across many hosts, time
intervals and traces, we did ﬁnd one common characteristic; namely that they
feature a small number of high degree nodes (“knots” in the graphlet). These
nodes result from ﬂows that share at least one graphlet node (e.g., distinct web
ﬂows that share port 80). At the same time, our activity graphlets featured a
number of paths comprising only one-degree nodes (ignoring protocol nodes).
192
T. Karagiannis et al.
See for example the middle two paths in Fig. 1(top left). Typically, those corre-
sponded to ephemeral ﬂows2.
Building on this insight, we deﬁne the set of signiﬁcant nodes in an activity
graphlet to be those nodes with an in-degree or out-degree larger than 1. The only
nodes we retain in our graphlet proﬁles are the signiﬁcant nodes. We populate our
graphlet proﬁles using the procedure outlined in Fig. 4. Fig. 1 gives an example
of an activity graphlet and the resulting proﬁle graphlet that it generates. We
use the term signiﬁcant set to refer to the group of signiﬁcant nodes of a
graphlet. The proﬁle graphlet consists of the union of all the ﬂows that are
aﬃliated with the signiﬁcant nodes. As such, the proﬁle graphlet is a subset of
the initial activity graphlet. Thus, we could say that our proﬁling consists of two
components: (a) the signiﬁcant set, and the (b) proﬁle graphlet.
In order to evolve, our proﬁles need to: 1) remove information when it be-
comes stale, and 2) add new content when it becomes relevant. The time scale
of this adaptivity aﬀects both the stability and meaningfulness (i.e., utility) of
the proﬁle. If the proﬁles evolve too quickly, they will be less stable (nodes will
be added and removed very frequently); whereas if they evolve too slowly, they
will be less meaningful (miss new important nodes and contain stale ones). Let
t denote the update period of the proﬁle graphlet. Updating the proﬁle means
that the set of signiﬁcant nodes at a time instance t is the union of the sets at
time t − 1 and t.
We employ a delayed-accept policy to control the addition of new nodes.
Signiﬁcant nodes are not inserted in the graphlet proﬁle unless they are active
for at least two consecutive intervals t. Such a mechanism is robust to ephemeral
nodes introduced by the reuse of port numbers across ﬂows.
We make use of an aging policy to remove obsolete information. A signiﬁcant
node is removed from a proﬁle if it is inactive for some period of time. Our time-
out period N is measured in days. Inactivity refers to nodes that are currently
not signiﬁcant but were in previous time intervals. Due to space constraints, we
do not illustrate the stability and utility tradeoﬀs we observed for various values
of t and N. In short, we found that using an update period t equal to 15 minutes,
and aging threshold N of one week achieved a good tradeoﬀ between utility and
stability.
4 Properties of the End-System Proﬁles
Here we describe the properties that establish the robustness of signiﬁcant nodes
as a means of proﬁling end-user activity. To this end, we examine the extent to
which our proﬁles meet the ﬁve goals mentioned in section 1.
Goal 1 - Capturing representative information: We ﬁrst examine the iden-
tities of the nodes that populate the user proﬁles. Intuitively, the nodes should
depict the primary activities of each end-system and if possible also reﬂect its
functional role in the network (e.g., client vs. server).
2 Note that ephemeral ﬂows refer to a whole path in the graphlet, while ephemeral
nodes only to the speciﬁc node.
Proﬁling the End Host
193
Table 1. Proﬁle instances of various end-systems
Host
activity
graphlet size
Client1
Client2
Client3
NFS SERVER
LDAP SERVER
104
72
259
31
309
signiﬁcant node set
in the proﬁle
dst ports: 22 (SSH), 443 (HTTPS), 80 (HTTP), 2233 (VPN)
dst ports: 993 (IMAP), 137 (NETBIOS), 80 (HTTP), 995 (POP3)
dst ports: 80 (HTTP), 6881, 6882, 6884, 6346, 16881 (P2P)
src port: 2049 (NFS)
src ports: 389 (LDAP), 139 (NETBIOS)
Table 1 presents ﬁve proﬁle instances for three randomly picked clients and
two servers from our enterprise networks. We observe that all signiﬁcant nodes in
the client proﬁles are destination ports reﬂecting well-known services accessed
by the clients. Note that client 3 appears to run the BitTorrent peer-to-peer
application and the set of signiﬁcant nodes reﬂects common ports used by this
application. The signiﬁcant nodes for the servers, however, reﬂect the ports where
the oﬀered services reside.
Table 2. Most popular signiﬁcant nodes
dstP = 80 dstP = 5499 dstP = 443 dstP = 2233 dstP = 53 dstP = 1863 dstP = 389 dstP = 22
WEB
CHAT
HTTPS
VPN
DNS
MSN
LDAP
SSH
To examine the identities of our proﬁles in a broader setting, we looked at
the most popular signiﬁcant nodes across all proﬁles. Table 2 presents the eight
most popular nodes which, similarly, represent services at well-known ports. This
initial data exploration indicates that our proﬁles are able to capture dominant
and meaningful end-system behavior and discriminate its functional role in the
network.
Note that while a number of signiﬁcant nodes are common in host proﬁles,
these signiﬁcant nodes can be annotated with a variety of information such as
their average out-degree to capture the user variability as shown in Fig. 2.
Goal 2 - Compact representation: To assess the breadth and compactness
of the proﬁles, we deﬁne two metrics. Compression is deﬁned as the ratio of
the number of signiﬁcant nodes over the total number of nodes in the activity
graphlet. Coverage is deﬁned as the fraction of ﬂows that the proﬁle captures
compared to the total number of the ﬂows generated by the host. (A ﬂow is
deﬁned here as a unique 5-tuple.) A good proﬁle should achieve high coverage
and high compression because the signiﬁcant nodes should: a) represent the
majority of the activity of the edge-host (high coverage), b) amount to only a
small number of the total nodes in the graphlet (high compression).
Fig. 5(left) shows that abstracting the graphlet to a set of signiﬁcant nodes leads
to a compression greater than 80% compared to the activity graphlet. We also see
that the signiﬁcant nodes often cover more than 90% of the ﬂows sourced at the
host. Recall that by deﬁnition, “uncovered” ﬂows correspond to those whose path
comprises only one-degree nodes in the graphlet. We thus conclude that our set of
signiﬁcant nodes oﬀers both high compression and coverage.
194
T. Karagiannis et al.
Hosts (15 minutes)
100
80
60
40
20
e
g
a
r
e
v
o
C
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
]
x
<
X
P
[
0
0
20
40
60
Compression
80
100
0
0
10
20
30
80
90
100
Percentage of change in the significant node set
40
50
60
70
Fig. 5. LEFT: Coverage vs. compression for hourly graphlets (LAB trace). RIGHT:
Similarity across consecutive intervals for the signiﬁcant node set. For approximately
50% of the intervals the signiﬁcant node set remains the same across time.
Goal 3 - Stability: Recall that our proﬁles are updated every 15 minutes. We
now examine the amount and nature of changes occurring in the proﬁle over
time. For each end host, we examined the diﬀerence in the set of signiﬁcant
nodes from one time slot to the next. The diﬀerence is the ratio of the number
of nodes present in both intervals divided by the average number of signiﬁcant
nodes in the two sets. In Fig. 5(right) we present the CDF of these ratios for all
hosts over all time slots.
We observe that roughly 50% of the time there is no change at all from one
time slot to the next. Also, less than 10% of the time does a node change by more
than 70%. We conclude that while there appears to be a reasonable amount of
stability from one 15 minute window to the next, every so often the proﬁle can
experience a large change. These initial results hint that perhaps over shorter
time scales these proﬁles can remain stable, yet over longer time periods, proﬁles
can experience large amounts of change. This indicates that a notion of stability
should perhaps be tied to the amount of evolution occurring in user behavior.
This is a subject of our future research.
Goal 4 - Evolvability: Fig. 6(left) demonstrates the impact of the “delayed-
accept” and “aging” policies on the total number of signiﬁcant nodes for all hosts
in the network. The upper line corresponds to the total number of signiﬁcant nodes
across all hosts when only “aging” is used, while the bottom line also incorporates
the eﬀect of “delayed-accept”. During the ﬁrst week of proﬁling the number of sig-
niﬁcant nodes shows a constant increase in both cases. This is the “learning” stage
of our approach and lasts approximately 1.5 weeks. While the eﬀect of “delayed-
accept” is evident across time, “aging” is observed after the ﬁrst week due to our
choice of “weekly” history. The sum of signiﬁcant nodes appears not to vary sig-
niﬁcantly after approximately 2 weeks. Note that while the time interval on the
x-axis spans a time period of a month, we only observe a few changes. These ini-
tial results indicate that our delayed-accept and aging policies do manage to ﬁlter
transient behavior while balancing the stability.
Proﬁling the End Host
195
200
150
e
e
r
g
e
D
t
u
O
100
50
0
1
Host
2
Fig. 6. LEFT: Total number of signiﬁcant nodes for all network hosts when we use
delayed-accept” and “aging”. RIGHT: Boxplot of the outdegree time-series for a com-
mon signiﬁcant node for two host proﬁles.
Goal 5 - Capturing historical information: Recall from section 3 that each
signiﬁcant node in the proﬁle can be annotated with various time-series informa-
tion. Fig. 6(right) presents such an example in a box plot showing the out-degree
of a common signiﬁcant node (web) across two hosts. Such time-series can be
further analyzed to provide insight regarding typical individual behavior (e.g.,
average number of TCP connections), a range of behavior (e.g., 90 percentile
points), and outliers (denoted with the points outside the wedges in the ﬁg-
ure). We postulate that this sort of information could be important for anomaly
detection applications (benign or malicious).
5 Conclusions–Discussion
In this paper, we present a novel approach to proﬁle end-host systems based on
their transport-layer behavior. We introduce the idea of using graphs to capture
ﬂow information and inter-ﬂow dependencies. We illustrate that all of a host’s
ﬂow data can be greatly compressed into a compact representation, that captures
dominant user behavior. Initial results suggest that a user’s behavior can undergo
large changes over time, and this underscores the need for adaptive proﬁling.
We envision our proﬁling methodology being used in many diﬀerent ways de-
pending on the intended goal. Examples include:
• For enterprise network management, to understand user behavior for resource
provisioning, load balancing, allowing for user clustering based on similar pro-
ﬁles, etc.
• Monitoring the proﬁle graphlet in comparison to the activity graphlet could
be useful for anomaly detection. Abrupt changes in either the normal range of
behavior, or outlier events, could signal an anomaly, whether benign or malicious.
• Monitoring the patterns in the out-degrees of protocol-nodes, or other signif-
icant nodes, could reveal scanning attempts.
196
T. Karagiannis et al.
References
1. Intrusion Detection Systems (IDS) Part 2 - Classiﬁcation; methods; tech-
In http://www.windowsecurity.com/articles/IDS-Part2-Classiﬁcation-
niques.
methods-techniques.html, 2004.
2. Arbor Networks. http://www.arbor.net/.
3. Graphviz. http://www.graphviz.org/.
4. J. Jung, B. Krishnamurthy, and M. Rabinovich. Flash crowds and denial of service
attacks: Characterization and implications for cdns and web sites. In Proceedings
of the 11th International World Wide Web Conference, May 2002.
5. T. Karagiannis, K. Papagiannaki, and M. Faloutsos. BLINC: Multi-level Traﬃc
Classiﬁcation in the Dark. In ACM SIGCOMM, August 2005.
6. A. Lakhina, M. Crovella, and Christophe Diot. Mining Anomalies Using Traﬃc
Feature Distributions. In Proc. of ACM SIGCOMM, August 2005.
7. P. McDaniel, S. Sen, O. Spatscheck, J. Van der Merwe, B. Aiello, and C. Kalmanek.
Enterprise Security: A Community of Interest Based Approach. In Proc. of Network
and Distributed System Security (NDSS), Feburary 2006.
8. V. Padmanabhan, S. Ramabhadran, and J. Padhye. NetProﬁler: Wide-Area Net-
works Using Peer Cooperation. In Proceedings of the Fourth International Work-
shop on Peer-to-Peer Systems (IPTPS), February 2005.
9. The CoMo Project. http://como.intel-research.net/.
10. G. Theocharous, S. Mannor, N. Shah, B. Kveton, S. Siddiqi, and C.-H. Yu. Machine
Learning for Adaptive Power Management, 2006. Intel Technology Journal.
11. Mengjun Xie, Keywan Tabatabai, and Haining Wang. Identifying Low-Proﬁle Web
Server’s IP Fingerprint. In IEEE QEST, 2006.
12. K. Xu, Z.-L. Zhang, and S. Bhattacharyya. Proﬁling Internet Backbone Traﬃc:
Behavior Models and Applications. In ACM Sigcomm, August 2005.