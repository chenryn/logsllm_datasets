Our protocols build upon the secret-sharing scheme
from SPDZ2k [17] based on additive secret-sharing with
information-theoretic MACs, and its subprotocols used for
computing on shares. The main idea behind this secret-
sharing scheme is that, to perform a secure computation on
additive shares modulo 2k with active security, the parties
will run a computation over a larger ring modulo 2k+s,
where σ = s − log(s) is a statistical security parameter,
but correctness is only guaranteed modulo 2k. The reason
for this is that in a ring with many zero-divisors, traditional
information-theoretic MACs cannot protect the integrity of
an entire ring element x(cid:2) ∈ Z2k+s, however, they can offer
integrity on the lower-order k bits, namely x = x(cid:2)
mod 2k.
Given x ∈ Z2k, we denote by [x]2k the situation in which
(cid:2)
the parties have additive shares x1, . . . , xn, m1, . . . , mn ∈
(cid:3)(cid:2)
Z2k+s and α1, . . . , αn ∈ Z2s such that x ≡k
j xj and
≡k+s mj. If there is no chance of
ambiguity we use [x] to denote [x]2k when k is a large
integer, e.g. k = 32 or 64.
(cid:3)(cid:2)
j αj
(cid:4)
·
(cid:4)
j xj
We now summarize the core protocols for manipulating
SPDZ2k shares, based on [17], which we use.
Input value. [x] ← Input(x, Pi), where x ∈ Z2k. Secret-
shares and authenticates a private input x from party
Pi.
Linear operations. [z] ← a[x]+[y]+b. Any linear function
or addition by a constant can be performed without
interaction, resulting in a sharing of z = ax + y + b
mod 2k. The shares zj, tj ∈ Z2k+s of z and its MAC
can be computes as follows. Let xj, mj ∈ Z2k+s be the
shares of x and the shares of its MAC for party Pj, and
let yj, hj ∈ Z2k+s be the analogous for y. Party P1 sets
z1 = ax1 + y1 + b mod 2k+s and, for j ≥ 2, party Pj
sets zj = axj + yj mod 2k+s. Finally, all parties Pj
compute tj = amj + hj + bαj mod 2k+s.
·
Secret-shared multiplication. [z] ← [x]
[y]. Given
a secret-shared multiplication triple,
that
is, shares
[a], [b], [c] for random a, b ∈ Z2k and c = a· b mod 2k,
a sharing of the product of any two sharings [x] and
[y] can be obtained with 1 round of interaction.
Open. x(cid:2) ← Openk(cid:2) ([x], Pi). Opens the sharing [x] modulo
towards party Pi, where k(cid:2) ≤ k, so that Pi learns
2k(cid:2)
only x(cid:2)
. The MAC on [x] is checked for
authenticity, although sometimes when opening many
values at once, the checks can be deferred and batched
for greater efﬁciency. If k(cid:2)
is omitted, we assume
k(cid:2)
= k. Furthermore, if the argument Pi is omitted,
we assume the share is opened towards all parties.
:= x mod 2k(cid:2)
(cid:18)(cid:18)(cid:17)(cid:22)
Remark II.1. We highlight the fact that Openk(cid:2) can even be
used when k(cid:2)  2. If x ∈ Z is such that x2 ≡(cid:3) 1,
then x is congruent mod 2(cid:3) to either 1,−1,−1 + 2(cid:3)−1 or
1 + 2(cid:3)−1.
(cid:2)
Our protocol is described in Fig. 4. At the end of the
execution the parties will get shares b1, . . . , bn ∈ Z2k+s and
t1, . . . , tn ∈ Z2k+s such that b1 + ··· + bn ≡k b and h1 +
··· + hn ≡k+s α · (
Proposition IV.1. If the protocol ΠRandBit does not abort,
then its output is a random shared bit [b].
B. Extraction of most signiﬁcant bit
i bi), where b is random in {0, 1}.
(cid:2)k−1
Here the parties have a shared value [a], with a =
i=0 ai2i ∈ Z2k, and they wish to compute shares of the
most signiﬁcant bit (MSB) of a, [ak−1]. This is achieved
by masking [a] with a random value [r] where the bits
are shared individually (using shared random bits) and then
opening c = a+r mod 2k. Since a = (c−r) mod 2k, shares
of a mod 2k−1 can be obtained together from c mod 2k−1
and the shares of r mod 2k−1 (obtained from the shares
of the bits of r), using a bitwise comparison procedure
Protocol ΠRandBit
OUTPUT: Random shared bit [b] over Z2k with MAC shares
over Z2k+s.
In the following the parties use an instance of SPDZ2k over
Z2k+2 with MAC shares over Z2k+s+1.
1) Pi samples ui ←R Z2k+2.
2) Each party inputs their share ui to to obtain a sharing of a
random element [u], where u = u1 +··· + un mod 2k+2.
3) Compute [a] ← 2[u] + 1.
4) Compute [a2] ← [a] · [a].
5) Let e = Open([a2]). If a is not odd then the parties abort.
−1
6) Let c be the smallest root modulo 2k+2 of e and let c
−1[a] + 1.
7) Let dj, tj ∈ Zk+s+1 be Pj’s shares of d and of its MAC,
be its inverse modulo 2k+2. Compute [d] ← c
2 and hj = tj
respectively. Each Pj sets bj = dj
2 .
8) Output [b], deﬁned by the shares bj and the MAC shares
hj above.
Figure 4: Protocol for obtaining authenticated shared bits
ΠBitLT to account for the sign of the difference (c mod
2k−1) − (r mod 2k−1). Finally, 2k−1ak−1 is computed as
a − (a mod 2k−1), and the factor 2k−1 is removed by
masking the k-th bit of [2k−1ak−1] with a shared random bit,