determination about whether Π is PPE circuit testable or not can
be concluded. This algorithm has one-sided correctness, where the
guarantee for this algorithm is that if it outputs that Π has testing
circuit Q this will be true.
The algorithm proceeds in a sequence of steps, wherein each
step it (attempts to) “reduce the complexity” of its input, by adding
a polynomial fi to the set Trusted. So far, this is similar to Au-
toPPE [45], however, here we must expand the number and type of
rules for when a polynomial can be moved to Trusted. In the end, if
we can obtain Trusted = [1, m], then we will have found a testing
circuit. If at any point, Trusted (cid:44) [1, m] but none of the move-
ment rules can be applied, the algorithm terminates and outputs
unknown.
4.1 Review on Computing Completion Lists for
a List of Polynomials
Our rules will make use of completion lists in the pairing setting as
described by Barthe et al. [18]. Consider any list f = [f1, . . . , fk] of
polynomials along with a sequence of identifiers α1,· · · , αk, where
αi ∈ I = {1, 2,T} for all i ≤ k. For any i ∈ I, let ti = { fj : αj = i}.
We now recall the notion of completion CL(f) = {s1, s2, sT } of the
list f of polynomials with respect to a group setting [18]. Intuitively,
CL(f) is the list of all polynomials that can be computed by an
adversary by applying pairing and isomorphism operations, when
he has access to the elements in group Gi corresponding to the
polynomials in ti for i ∈ I.
Reception List
Input: Pairing information G, Lengths |t1|, |t2|, |tT |
Output: Reception lists r1, r2, rT
fresh variables, i.e., let ri = {wi,1, · · · , wi,|ti | }
(1) for each i ∈ {1, 2, T }, initialize ri with |ti | number of
(2) If an isomorphism ψ : G1 → G2 exists, then r2 := r2 ∪ r1
(3) If an isomorphism ϕ : G2 → G1 exists, then r1 := r1 ∪ r2
(4) rT := rT ∪ {h1h2 : h1 ∈ r1, h2 ∈ r2}
Figure 1: Algorithm to find reception list of a list of polyno-
mialsWe now describe an algorithm to compute the completion CL(f),
which is taken from [18] and handles pairing groups. The algorithm
proceeds in two steps. In the first step, it computes the reception
lists {ri}i∈I. The elements of the reception lists are monomials
over variables wi, j for i ∈ I, j ∈ |ti| and are computed as shown
in Figure 1.
The monomials characterize which products of elements in t
the adversary can compute by applying pairing operations. The
result of the first step is independent of the elements in the lists t
and only depends on the lengths of the lists. In the second step, it
computes the actual polynomials from the reception lists as si =
[m1(t), . . . , m|ri |(t)] for [m1, . . . , m|ri |] = ri , where every mk is a
monomial over the variables wi, j and mk(t) denotes the result of
evaluating the monomial mk by substituting wi, j with ti[j] for
i ∈ I and j ∈ |ti|.
Session 2B: Applied Cryptography CCS '20, November 9–13, 2020, Virtual Event, USA395Description of Rule 1
Input: A PPE problem Π = (G, n, m, f, u, α , Trusted) and an
integer k ∈ [1, m].
Output: A PPE circuit C and a PPE problem Π′, or the symbol ⊥
(meaning could not apply rule).
Steps of Rule1(Π, k):
then abort and output ⊥.
(1) If k ∈ Trusted or fk ∈ f has variables not in InTrusted,
(2) Let the formal variables F1, F2, · · · , Fm represent group
elements of any PPE challenge corresponding to Π. These
formal variables also represent the input wires of the PPE
circuit C being constructed.
(3) Compute completion lists {s1, s2, sT } = CL(fTrusted).
For any i ∈ I and j ≤ |si |, let Si[j] = дsi[j]
, and let
αi
Ui[j] be the pairing product term computing Si[j] in
terms of formal variables F1, · · · , Fm.
(4) If there exists a constant vector a = (a1, · · · , a|sαk |)
· sαk [j],
with entries in Zp such that fk ≡ |sαk |
j =1 aj
then set the PPE
|sT |
j =1
A :=
UT [j]aj = Fk
(cid:40)
fk ≡|sT |
|sT |
(5) If αk ∈ {1, 2}, A is not set, and there exists a constant
vector a = (a1, · · · , a|sT |) with entries in Zp such that
j =1 aj · sT [j], then create the PPE
j =1
(6) If A is
e(Fk, д2)
e(д1, Fk)
if αk = 1
if αk = 2
A :=
UT [j]aj =
the PPE circuit C
set, output
=
MakeCircuit(G, m, α , A)
and the PPE problem
Π′ = (G, n, m, f, u, α , Trusted ∪ {k }), else output ⊥.
Note that for any i ∈ I, computing a coefficient vector a
j =1 aj · si[j] is equivalent to checking
if the polynomial 0 belongs to the span of polynomials
si ∪ {fk }.
such that fk ≡|si |
Figure 2: Procedure for moving certain polynomials fk with
all InTrusted variables to Trusted set
4.2 Rules for Moving Polynomials into the
Trusted Set
We now describe five rules for reducing the complexity of a PPE
instance, whereby we mean reducing the number of elements repre-
sented by polynomials not in the set Trusted. The first two rules are
closely derived from [45].The more complex third, fourth and fifth
rules are novel to this work and require the AND/OR/NOT/PPE
logic we introduced.
4.2.1 Rule 1: Simple move a polynomial with all InTrusted
variables to Trusted set. In Figure 2, we adapt Rule 1 from [45]
to output a PPE circuit. Given a PPE problem Π = (G,n, m, f,
u, α ,Trusted) and an index k ∈ [m], Rule 1 can possibly be ap-
plied if k (cid:60) Trusted and the polynomial fk ∈ f consists only of
variables ui ∈ InTrusted (these conditions are necessary, but not
sufficient).
Lemma 4.1 (Correctness of Rule 1). Let Π = (G, n, m, f, u,
α , Trusted) be a PPE problem instance as in Definition 3.1 and let
k ∈ [m]. Suppose ⊥(cid:44) (C, Π′) = Rule1(Π, k). Then, for every testing
circuit C′ for Π′, it holds that C AND C′ is a testing circuit for Π.
The proof of the lemma follows from the correctness of the simi-
lar Rule 1 in [45]. Although [45] proved the correctness property for
a weaker notion of PPE Testability, the proof can be easily adapted
to our setting. We include this proof in Appendix B.
4.2.2 Rule 2: Simple move of a polynomial with exactly one
non-InTrusted variable to Trusted set. In Figure 3, we recall Rule
2 from [45]; it does not need any changes for our purposes. Given a
PPE problem Π = (G, n, m, f, u, α , Trusted) and indices j ∈ [n] and
k ∈ [m], Rule 2 can possibly be applied if j (cid:60) InTrusted, k (cid:60) Trusted
and the polynomial fk ∈ f is of the form c·ud
+h, where the variable
uj ∈ u, the polynomial h contains only variables in InTrusted,
constant c ∈ Z∗
p, and constant d ∈ Zp s.t. d is relatively prime to
p − 1.
j
Description of Rule 2 [45]
Input: A PPE problem Π = (G, n, m, f, u, α , Trusted) and inte-
gers j ∈ [n] and k ∈ [m].
Output: A PPE problem Π′ or ⊥ (meaning could not apply the
rule).
Steps of Rule2(Π, j, k):
(1) If polynomial fk ∈ f is of the form c · ud
+ h, where
j
• j (cid:60) InTrusted, k (cid:60) Trusted,
• the polynomial h contains only variables in InTrusted,
• the constant c ∈ Z∗
• the constant d ∈ Zp is relatively prime to p − 1,
then proceed to the next step. Else, abort and output ⊥.
p and
(2) Output Π′ = (G, n, m, f, u, α , Trusted ∪ {k }).
Figure 3: Procedure for moving certain polynomials fk con-
taining exactly one non-InTrusted variable to Trusted
Lemma 4.2 (Correctness of Rule 2). Let Π = (G, n, m, f, u,
α , Trusted) be a PPE problem instance as in Definition 3.1, j ∈ [n]
and k ∈ [m]. Suppose ⊥(cid:44) Π′ = Rule2(Π, j, k). Then, every testing
circuit of Π′ is also a testing circuit for Π.
The proof follows from the correctness of the similar Rule 2
in [45]. For completeness, we include it in Appendix C.
Description of SubstituteZero Algorithm
Input: A PPE Problem Π = (G, n, m, f, u, α , Trusted) and poly-
nomial h.
Output: A PPE Problem Π′.
• Construct vector f′ of m polynomials as follows. For each
k ∈ [m], if fk = h1 · h + h2 for some polynomials h1
and h2, such that (1) h2 does not have h as a factor, and
(2) the number of monomials in h2 is less than fk when
expressed in canonical form, then set f ′
= h2. Otherwise,
set f ′
k
k
• Output Π′ = (G, n, m, f′, u, α , Trusted).
= fk .
Figure 4: Algorithm for updating a PPE problem instance
when a specified polynomial h is set to 0.
4.2.3 Rule 3: More general move of a polynomial with all
InTrusted variables to Trusted set. Rule 3 is a novel extension of
Session 2B: Applied Cryptography CCS '20, November 9–13, 2020, Virtual Event, USA3963
8
1, д
j=1 U2[j]bj) =|sT |
e(Fk ,|s2|
such that fk · (|sαk
j=1 bj · sαk [j]) ≡|sT |
circuit corresponding to PPE: e(Fk ,|s2|
|
e(Fk , д2) =|sT |
j=1 U2[j]bj) =|sT |
Rule 1 (see Figure 2) for moving an untrusted polynomial fk to the
trusted set. Let us first observe some drawbacks in Rule 1 when
the untrusted polynomial is in the group G1 or G2. For simplic-
ity, let us consider execution of Rule 1 on input (Π, k) such that
αk = 1. The Rule 1 algorithm explores a space of PPEs of the form
j=1 UT [j]aj where constants aj are in Zp. In other
words, Rule 1 only explores PPEs where the untrusted element Fk is
paired with the generator of G2. Hohenberger and Vusirikala [45]
observed that such a small class of PPEs appears insufficient to
validate the proofs of the Dodis VRF [34] or the private keys of the
Boyen-Waters IBE [30]. One could think of a natural extension of
Rule 1 which explores a larger space of PPEs, where Fk is paired
with some function of trusted polynomials, i.e., PPEs of the form
j =1 UT [j]aj , where constants aj , bj are in
Zp. Such an extended algorithm computes constant vectors a, b
j=1 aj · sT [j] and outputs the
j=1 UT [j]aj .
However, this extension introduces a technical issue. Consider
the PPE problem instance Π = (G, n = 2, m = 7, f = {1, 1, 1, x
, y, xy,
x}, α = {1, 2,T , 1, 2,T , 1}, u = {x, y}, Trusted = {1, 2, 3, 4, 5, 6}).
Here, x, y are InTrusted variables and the only untrusted polyno-
mial is x in group G1. On input (Π, k = 7), the above extended
rule outputs the PPE e(F7, F5) = F6 and moves the only untrusted
polynomial to the trusted set. Surprisingly, e(F7, F5) = F6 is not
a PPE testing circuit for the problem Π. Consider the following
PPE challenge (д1, д2, дT , д
1). This is clearly a NO chal-
0
0
5
T , д
2, д
3 = 8 and x = 5 simultaneously.
lenge, as there is NO x such that x
However, the challenge satisfies the PPE e(F7, F5) = F6. Intuitively,
0
2 and
the issue occurs because for the given PPE challenge F5 = д
therefore the PPE e(F7, F5) = F6 does not validate the element F7.
j=1 U2[j]bj)
j=1 U2[j]bj
0
evaluates to д
2, the PPE does not validate the correctness of Fk. To
resolve the issue, our Rule 3 computes a PPE (from a larger class of
PPEs than pairing only with a generator), and the resultant testing
circuit is designed so that whenever the exponent of the paired
element evaluates to zero, the logic of the testing circuit handles
it properly. In Section 5, we show that this generalization of Rule
1 is very useful for the automated verification of the Dodis VRF
proofs [34] and the Boyen-Waters IBE private keys [30].6
More generally, suppose the rule outputs e(Fk,|s2|
= |sT |
j=1 UT [j]aj . For the PPE challenges in which|s2|
Rule 3 is formally described in Figure 5, its correctness property
is captured in Lemma 4.3 and the proof of this lemma appears
in Appendix D.
Lemma 4.3 (Correctness of Rule 3). Let Π = (G, n, m, f, u,
α , Trusted) be a PPE problem instance as in Definition 3.1 and let
k ∈ [m]. Suppose ⊥(cid:44) (IsIdentity, C, Π′, Π′′) = Rule3(Π, k). Then,
for every pair of testing circuits C′ and C′′ for Π′ and Π′′ respectively,
the PPE circuit Z := ((NOT IsIdentity)∧ C ∧ C′) ∨(IsIdentity∧ C′′)
is a testing circuit for Π.
6The issue with verification not working due to an exponent evaluating to zero is
not a security issue in [30, 34], because this event happens with negligible probability
when the public parameters are honestly generated. However, our definition of a testing
circuit requires perfect correctness and therefore, we must check for and properly
address this “zero” case.
4.2.4 Rule 4: General move of a polynomial with multiple
non-InTrusted variables to the Trusted set. In Figure 6, we de-
scribe a new Rule 4, which is an extension of Rule 2 for moving an
untrusted polynomial fk which has a variable in InTrusted7 set to
the Trusted set of polynomials. Recall that in order to apply Rule 2
to a polynomial fk, the coefficient of the non-InTrusted variable uj
needs to be a non-zero constant. Hohenberger et al. [45] observed
that this restriction to a constant coefficient appears insufficient
to validate the private keys of the Boyen-Waters IBE [30]. One
could naturally think of extending Rule 2 by allowing the coeffi-
cient of variable uj to be an arbitrary polynomial h of InTrusted