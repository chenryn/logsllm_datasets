constraints cannot be satisﬁed, an alternate approach must
be adopted. This involves abusing the dynamic loader by
corrupting its internal data structures to alter the dynamic
resolution process.
4.3 Corrupting Dynamic Loader Data
parameter
to
dl runtime resolve is a pointer to a data struc-
ture of type link map. This structure contains information
about the ELF executable, and the contents of this structure
are implicitly trusted by the dynamic loader. Furthermore,
Leakless can obtain the address of this structure from the
second entry of the GOT of the vulnerable binary, whose
location is deterministically known.
recall
that
We
the
ﬁrst
Recall from Section 3.5 that the link map structure,
in the l info ﬁeld, contains an array of pointers to the
entries of the .dynamic section. These are the pointers
that the dynamic loader uses to locate the objects that are
used during symbol resolution. As shown in Figure 3,
by overwriting part of this data structure, Leakless can
make the DT STRTAB entry of the l info ﬁeld point to a
specially-crafted dynamic entry which, in turn, points to a
fake dynamic string table. Hence, the attacker can reduce
the situation back to the base case presented in Section 4.1.
This technique has wider applicability than the one
presented in the previous section, since there are no speciﬁc
constraints, and, in particular, it is applicable also against
small 64 bit ELF binaries using huge pages. However,
.dynstr
...
read\0
printf\0
...
.plt.got
got[0]
got[1]
got[2]
...
[heap]
...
...
p
a
m
k
n
i
l
l info[DT HASH]
l info[DT STRTAB]
l info[DT SYMTAB]
...
...
n
y
D
f
l
E
n
y
D
f
l
E
.dynamic
...
d tag: DT STRTAB
d val
...
.bss
d tag: DT STRTAB
d val
...
read\0
execve\0
...
Figure 3: Example of the attack presented in Section 4.3.
The attacker dereferences the second entry of the GOT
and reaches the link map structure. In this structure he
corrupts the entry of the l info ﬁeld holding a pointer
to the DT STRTAB entry in the dynamic table. Its value is
set to the address of a fake dynamic entry which, in turn,
points to a fake dynamic string table in the .bss section.
while in the previous attacks we were relying exclusively
on standard ELF features, in this case (and in the one
presented in the next section) we assume the layout of
a glibc-speciﬁc structure (link map) to be known. Each
dynamic loader implements this structure in its own way,
so minor modiﬁcations might be required when targeting
a different dynamic loader. Note that link map’s layout
might change among versions of the same dynamic loader.
However, they tend to be quite stable, and, in particular, in
glibc no changes relevant to our attack have taken place
since 2004.
4.4 The Full RELRO Situation
Leakless is able to bypass full RELRO protection.
When full RELRO is applied, all the relocations are
resolved at load-time, no lazy resolving takes place,
and the addresses of the link map structure and of
dl runtime resolve in the GOT are never initialized.
Thus, it is not directly possible to know their addresses,
which is what the general technique to bypass partial
RELRO relies upon.
However, it is possible to indirectly recover these two
values through the DT DEBUG entry in the dynamic table.
The value of the DT DEBUG entry is set by the dynamic
loader at load-time to point to a data structure of type
r debug. This data structure contains information used
by debuggers to identify the base address of the dynamic
loader and to intercept certain events related to dynamic
loading.
In addition, the r map ﬁeld of this structure
holds a pointer to the head of the linked list of link map
structures.
Leakless corrupts the ﬁrst entry of the list describing the
ELF executable so that the l info entry for DT STRTAB
points to a fake dynamic string table. This is presented in
USENIX Association  
24th USENIX Security Symposium  649
7
dl runtime resolve(l info, reloc index)
.plt.got
GOT[0]
GOT[1]
GOT[2]
...
.dynamic
...
n
y
D
f
l
E
d tag: DT PLTGOT
d val
...
l
i
n
k
m
a
p
.dynamic
...
n
y
D
f
l
E
d tag: DT DEBUG
d val
...
d tag: DT STRTAB
d val
...
.dynstr
...
read\0
printf\0
...
.dynsym
...
st name
st info
...
...
E
l
f
D
y
n
E
l
f
S
y
m
[heap]
...
r version
g
u
b
e
d
r
r map
...
...
...
l info[DT STRTAB]
...
l info[DT JMPREL]
...
l next
...
...
...
p
a
m
k
n
i
l
l info[DT PLTGOT]
...
...
n
y
D
f
l
E
.bss
d tag: DT JMPREL
d val
r info
r offset
reloc target
d tag: DT STRTAB
d val
...
read\0
execve\0
...
E
l
f
R
e
l
E
l
f
D
y
n
Figure 4: Example of the attack presented in Section 4.4. Shaded background means read only memory, white background
means writeable memory and bold or red means data crafted by the attacker. The attacker goes through the DT DEBUG
dynamic entry to reach the r debug structure, then, dereferencing the r map ﬁeld, he gets to the link map structure of
the main executable, and corrupts l info[DT STRTAB] as already seen in Section 3.
Since the .got.plt section is read-only due to full RELRO, the attacker also have to forge a relocation. To do so, he
corrupts l info[DT JMPREL] making it point to a fake dynamic entry in turn pointing to a relocation. This relocation
refers to the existing printf symbol, but has an r offset pointing to a writeable memory area.
Then the attacker also needs to recover the pointer to the dl runtime resolve function, which is not available in the
GOT of the main executable due to full RELRO, therefore he dereferences the l info ﬁeld of the ﬁrst link map structure
and gets to the one describing the ﬁrst shared library, which is not protected by full RELRO. The attacker accesses the
l info[DT PLTGOT] ﬁeld and gets to the corresponding dynamic entry (the .dynamic on the right), and then to the
.plt.got section (always on the right), at the second entry of which he can ﬁnd the address of dl runtime resolve.
Figure 4.
After this, Leakless must invoke dl runtime resolve,
passing the link map structure that it just corrupted as
the ﬁrst argument and an offset into the new .dynsym as
the second parameter. However, as previously mentioned,
dl runtime resolve is not available in the GOT due to
full RELRO. Therefore, Leakless must look for its address
in the GOT of another ELF object, namely, a library loaded
by the application that is not protected by full RELRO.
In most cases, only ELF executables are compiled with
full RELRO, and libraries are not. This is due to the
fact that RELRO is designed to harden, at the cost of
performance, speciﬁc applications that are deemed “risky”.
Applying full RELRO to a shared library would impact the
performance of all applications making use of this library,
and thus, libraries are generally left unprotected. Since the
order of libraries in the linked list is deterministic, Leakless
can dereference the l next entry in link map to reach
the entry describing a library that is not protected by full
RELRO, dereference the entry in l info corresponding
to the DT PLTGOT dynamic entry, dereference its value
(i.e., the base address of that library’s GOT), and read the
address of dl runtime resolve from this GOT.
a ﬁnal
Leakless must
then overcome
issue:
dl runtime resolve will not only call
the target
function, but will also try to write its address to the
appropriate GOT entry. If this happens, the program
will crash, as the GOT is read-only when full RELRO
is applied. We can circumvent this issue by faking the
DT JMPREL dynamic entry in the link map structure
that points to the .rel.dyn section. Leakless points it
to an attacker-controlled memory area and writes an
650  24th USENIX Security Symposium 
USENIX Association
8
Elf Rel structure, with a target (r offset ﬁeld) pointing
to a writeable memory area, referring to the symbol we
are targeting. Therefore, when the library is resolved,
the address will be written to a writeable location, the
program will not crash, and the requested function will be
executed.
5
Implementation
Leakless analyzes a provided binary to identify which
of its techniques is applicable, crafts the necessary data
structures, and generates a ROP chain that implements the
chosen technique. The discovery of the initial vulnerability
itself, and the automatic extraction of usable gadgets from
a binary are orthogonal to the scope of our work, and have
been well-studied in the literature and implemented in the
real world [6, 16, 19, 20, 34, 38]. We designed Leakless to
be compatible with a number of gadget ﬁnding techniques,
and have implemented a manual backend (where gadgets
are provided by the user) and a backend that utilizes
ROPC [22], an automated ROP compiler prototype built
on the approach proposed by Q [34].
We also developed a small test suite, composed of a
small C program with a stack-based buffer overﬂow com-
piled, alternatively, with no protections, partial RELRO,
and full RELRO. The test suite runs on GNU/Linux with
the x86, x86-64 and ARM architectures and with FreeBSD
x86-64.
5.1 Required Gadgets
Leakless comprises four different techniques that are
used depending on the hardening techniques applied to the
binary. These different techniques require different gadgets
to be provided to Leakless. A summary of the types of
gadgets is presented in Table 2. The write memory gadget
is mainly used to craft data structures at known memory
locations, while the deref write gadget to traverse and
corrupt data structures (in particular link map). The
deref save and copy to stack gadgets are used only
in the full RELRO case. The aim of the former is to
save at a known location the address of link map and
dl runtime resolve, while the latter is used to copy
link map and the relocation index on the stack before
calling dl runtime resolve, since using PLT0 is not a
viable solution.
For the interested reader, we provide in-depth examples
of executions of Leakless in the presence of two different
sets of mitigation techniques in the documentation of the
Leakless code repository [17].
6 Evaluation
We evaluated Leakless in four ways. First, we determined
the applicability of our technique against different dy-
namic loader implementations. We then analyzed the
binaries distributed by several popular GNU/Linux and
BSD distributions (speciﬁcally, Ubuntu, Debian, Fedora,
and FreeBSD) to determine the percentage of binaries
that would be susceptible to our attack. Then we applied
Leakless in two real-world exploits against a vulnerable
version of Wireshark and in a more sophisticated attack
against Pidgin. Finally we used a Turing-complete ROP
compiler to implement the approach used in Leakless and
two other previously used techniques, and compared the
size of the resulting chains.
6.1 Dynamic Loaders
To show Leakless’ generality, especially across different
ELF-based platforms, we surveyed several implementa-
tions of dynamic loaders. In particular, we found that
the dynamic loader part of the GNU C Standard Library
(also known as glibc and widely used in GNU/Linux dis-
tributions), several other Linux implementations such as
dietlibc, uClibc and newlib (widespread in embedded sys-
tems) and the OpenBSD and NetBSD implementations are
vulnerable to Leakless. Another embedded library, musl,
instead, is not susceptible to our approach since it does not
support lazy loading. Bionic, the C Standard Library used
in Android, is also not vulnerable since it only supports
PIE binaries. The most interesting case, out of all the
loaders we analyzed, is FreeBSD’s implementation. In
fact, it is the only one which performs boundary checks
on arguments passed to dl runtime resolve. All other
loaders implicitly trust input arguments argument. Fur-
thermore, all analyzed loaders implicitly trust the control
structures that Leakless corrupts in the course of most of
its attacks.
In summary, out of all of the loaders we analyzed, only
two are immune to Leakless by design: musl, which does
not support lazy symbol resolution, and bionic, which
only supports PIE executables. Additionally, because
the FreeBSD dynamic loader performs bounds checking,
the technique explained in Section 4.2 is not applicable.
However, the other techniques still work.