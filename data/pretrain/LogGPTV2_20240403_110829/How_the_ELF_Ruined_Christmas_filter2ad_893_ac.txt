### 4.3 Corrupting Dynamic Loader Data

When the constraints of the dynamic loader cannot be satisfied, an alternative approach must be adopted. This involves manipulating the dynamic loader by corrupting its internal data structures to alter the dynamic resolution process.

The `dl_runtime_resolve` function receives a pointer to a `link_map` structure as a parameter. This structure contains information about the ELF executable and is implicitly trusted by the dynamic loader. Leakless can obtain the address of this structure from the second entry of the GOT (Global Offset Table) of the vulnerable binary, whose location is deterministically known.

Recall from Section 3.5 that the `link_map` structure, in the `l_info` field, contains an array of pointers to the entries of the `.dynamic` section. These pointers are used by the dynamic loader to locate the objects needed during symbol resolution. By overwriting part of this data structure, Leakless can make the `DT_STRTAB` entry of the `l_info` field point to a specially crafted dynamic entry, which in turn points to a fake dynamic string table. This reduces the situation back to the base case presented in Section 4.1.

This technique is more widely applicable than the one presented in the previous section because it does not have specific constraints and can be applied even against small 64-bit ELF binaries using huge pages.

**Figure 3: Example of the attack presented in Section 4.3.**
- The attacker dereferences the second entry of the GOT and reaches the `link_map` structure.
- In this structure, the attacker corrupts the `l_info` field holding a pointer to the `DT_STRTAB` entry in the dynamic table.
- The value is set to the address of a fake dynamic entry, which points to a fake dynamic string table in the `.bss` section.

While previous attacks relied exclusively on standard ELF features, this attack assumes knowledge of the layout of a glibc-specific `link_map` structure. Each dynamic loader implements this structure differently, so minor modifications might be required when targeting a different dynamic loader. Note that the `link_map` layout can change among versions of the same dynamic loader, but it tends to be quite stable. In glibc, no changes relevant to our attack have occurred since 2004.

### 4.4 The Full RELRO Situation

Leakless is capable of bypassing full RELRO protection. When full RELRO is applied, all relocations are resolved at load-time, and lazy resolving does not occur. The addresses of the `link_map` structure and `dl_runtime_resolve` in the GOT are never initialized, making it impossible to directly know their addresses, which is what the general technique to bypass partial RELRO relies on.

However, these values can be indirectly recovered through the `DT_DEBUG` entry in the dynamic table. The `DT_DEBUG` entry is set by the dynamic loader at load-time to point to a `r_debug` data structure. This structure contains information used by debuggers to identify the base address of the dynamic loader and to intercept certain events related to dynamic loading. The `r_map` field of this structure holds a pointer to the head of the linked list of `link_map` structures.

Leakless corrupts the first entry of the list describing the ELF executable so that the `l_info` entry for `DT_STRTAB` points to a fake dynamic string table. This is illustrated in Figure 4.

**Figure 4: Example of the attack presented in Section 4.4.**
- Shaded background indicates read-only memory, white background indicates writable memory, and bold or red text indicates data crafted by the attacker.
- The attacker goes through the `DT_DEBUG` dynamic entry to reach the `r_debug` structure.
- Dereferencing the `r_map` field, the attacker gets to the `link_map` structure of the main executable and corrupts the `l_info[DT_STRTAB]` as seen in Section 3.

Since the `.got.plt` section is read-only due to full RELRO, the attacker must also forge a relocation. To do this, the attacker corrupts `l_info[DT_JMPREL]` to point to a fake dynamic entry, which in turn points to a relocation. This relocation refers to an existing symbol (e.g., `printf`), but has an `r_offset` pointing to a writable memory area.

The attacker then needs to recover the pointer to the `dl_runtime_resolve` function, which is not available in the GOT of the main executable due to full RELRO. The attacker dereferences the `l_info` field of the first `link_map` structure and gets to the one describing the first shared library, which is not protected by full RELRO. The attacker accesses the `l_info[DT_PLTGOT]` field and gets to the corresponding dynamic entry, and then to the `.plt.got` section, where the second entry contains the address of `dl_runtime_resolve`.

After this, Leakless must invoke `dl_runtime_resolve`, passing the corrupted `link_map` structure as the first argument and an offset into the new `.dynsym` as the second parameter. However, `dl_runtime_resolve` is not available in the GOT due to full RELRO. Therefore, Leakless must look for its address in the GOT of another ELF object, such as a library loaded by the application that is not protected by full RELRO. In most cases, only ELF executables are compiled with full RELRO, and libraries are not, due to performance considerations.

Since the order of libraries in the linked list is deterministic, Leakless can dereference the `l_next` entry in `link_map` to reach the entry describing a library that is not protected by full RELRO, dereference the `l_info` entry corresponding to the `DT_PLTGOT` dynamic entry, and read the address of `dl_runtime_resolve` from this GOT.

Finally, Leakless must overcome the issue that `dl_runtime_resolve` will try to write the target function's address to the appropriate GOT entry. If this happens, the program will crash because the GOT is read-only when full RELRO is applied. This can be circumvented by faking the `DT_JMPREL` dynamic entry in the `link_map` structure, pointing it to an attacker-controlled memory area, and writing an `Elf_Rel` structure with a target (`r_offset` field) pointing to a writable memory area. This ensures that the address is written to a writable location, preventing the program from crashing and allowing the requested function to be executed.

### 5. Implementation

Leakless analyzes a provided binary to determine which of its techniques is applicable, crafts the necessary data structures, and generates a ROP chain to implement the chosen technique. The discovery of the initial vulnerability and the automatic extraction of usable gadgets from a binary are outside the scope of this work and have been well-studied in the literature [6, 16, 19, 20, 34, 38]. Leakless is designed to be compatible with various gadget-finding techniques and includes a manual backend (where gadgets are provided by the user) and a backend that utilizes ROPC [22], an automated ROP compiler prototype built on the approach proposed by Q [34].

We also developed a small test suite, consisting of a C program with a stack-based buffer overflow, compiled with no protections, partial RELRO, and full RELRO. The test suite runs on GNU/Linux with x86, x86-64, and ARM architectures, and on FreeBSD x86-64.

#### 5.1 Required Gadgets

Leakless comprises four different techniques, each requiring different gadgets depending on the hardening techniques applied to the binary. A summary of the types of gadgets is presented in Table 2. The `write_memory` gadget is primarily used to craft data structures at known memory locations, while the `deref_write` gadget is used to traverse and corrupt data structures (particularly `link_map`). The `deref_save` and `copy_to_stack` gadgets are used only in the full RELRO case. The `deref_save` gadget saves the address of `link_map` and `dl_runtime_resolve` at a known location, while the `copy_to_stack` gadget copies `link_map` and the relocation index onto the stack before calling `dl_runtime_resolve`, as using PLT0 is not a viable solution.

For detailed examples of Leakless executions in the presence of different mitigation techniques, see the documentation in the Leakless code repository [17].

### 6. Evaluation

We evaluated Leakless in four ways:
1. **Applicability**: We determined the applicability of our technique against different dynamic loader implementations.
2. **Binary Analysis**: We analyzed binaries distributed by popular GNU/Linux and BSD distributions (Ubuntu, Debian, Fedora, and FreeBSD) to determine the percentage of binaries susceptible to our attack.
3. **Real-World Exploits**: We applied Leakless in two real-world exploits against a vulnerable version of Wireshark and in a more sophisticated attack against Pidgin.
4. **ROP Chain Size Comparison**: We used a Turing-complete ROP compiler to implement the approach used in Leakless and compared the size of the resulting chains with two other previously used techniques.

#### 6.1 Dynamic Loaders

To demonstrate the generality of Leakless across different ELF-based platforms, we surveyed several implementations of dynamic loaders. We found that the dynamic loader part of the GNU C Standard Library (glibc, widely used in GNU/Linux distributions), several other Linux implementations such as dietlibc, uClibc, and newlib (common in embedded systems), and the OpenBSD and NetBSD implementations are vulnerable to Leakless. Another embedded library, musl, is not susceptible to our approach because it does not support lazy loading. Bionic, the C Standard Library used in Android, is also not vulnerable because it only supports PIE binaries.

The most interesting case is FreeBSDâ€™s implementation, which is the only one that performs boundary checks on arguments passed to `dl_runtime_resolve`. All other loaders implicitly trust input arguments and the control structures that Leakless corrupts in the course of most of its attacks.

In summary, out of all the loaders we analyzed, only two are immune to Leakless by design: musl, which does not support lazy symbol resolution, and bionic, which only supports PIE executables. Additionally, because the FreeBSD dynamic loader performs bounds checking, the technique explained in Section 4.2 is not applicable. However, the other techniques still work.