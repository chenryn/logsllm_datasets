Table 1 and Table 2, respectively.
Comparison of Jamming Probabilities: Figure 7 shows the
maximum jamming probabilities of the four types of jammers against
the random seed with reasonable parameters. Recall that the size of
Cp is determined by parameter n (i.e., Cp = n2 + n + 1). Thus, we
use parameter n as the x-axis in this ﬁgure. To better see the im-
pact of ECC, we also include the maximum jamming probabilities
assuming an ECC is used in the seed to tolerate 1 bit error.

Ě
Ğ
Ğ
^
Ğ
Ś
ƚ

Ĩ
Ž
Ǉ
ƚ
ŝ
ů
ŝ


ď
Ă
ď
Ž
ƌ
W
Ő
Ŷ
ŵ
ŵ
Ă
:
ŝ
ϭ͘Ϭ
Ϭ͘ϵ
Ϭ͘ϴ
Ϭ͘ϳ
Ϭ͘ϲ
Ϭ͘ϱ
Ϭ͘ϰ
Ϭ͘ϯ
Ϭ͘Ϯ
Ϭ͘ϭ
Ϭ͘Ϭ
ϰ
ϴ
ϭϲ
ϯϮ
ϲϰ
ϭϮϴ
Ŷ
ƌĞĂůͲƚŝŵĞ
ϭďŝƚĚĞůĂǇ
ϮďŝƚƐĚĞůĂǇ
ŶŽŶͲĚĞƐƉƌĞĂĚŝŶŐ
ƌĞĂůͲƚŝŵĞ͕
ƚŽůĞƌĂƚĞϭďŝƚĞƌƌŽƌ
ϭďŝƚĚĞůĂǇ͕
ƚŽůĞƌĂƚĞϭďŝƚĞƌƌŽƌ
ϮďŝƚƐĚĞůĂǇ͕
ƚŽůĞƌĂƚĞϭďŝƚĞƌƌŽƌ
ŶŽŶͲĚĞƐƉƌĞĂĚŝŶŐ͕
ƚŽůĞƌĂƚĞϭďŝƚĞƌƌŽƌ
Figure 7: Maximum jamming probability against seed (n =
2 m)
4, 9, 25, 49, 81, 121, 169; ls = 64; |Ce| = l |Cp|
Ğ
Ő
Ă
ƚ
Ŷ
Ă
ǀ
Ě

ϭϬϬ͘Ϭ
ϭϬ͘Ϭ
ϭ͘Ϭ
Ϭ͘ϭ
ƌĞĂůͲƚŝŵĞ
ϭďŝƚĚĞůĂǇ
ϮďŝƚƐĚĞůĂǇ
ƌĞĐĞŝǀĞƌ
ϰ
ϴ
ϭϲ
ϯϮ
ϲϰ
ϭϮϴ
Ŷ
Figure 8: Advantage of receivers over jammers (n =
4, 9, 25, 49, 81, 121, 169; ls = 64; |Ce| = l |Cp|
2 m)
Figure 7 shows that the real-time jammer has the highest jam-
ming probability among all jammers. However, we would like to
point out that the real-time jammer is a strong assumption; such a
jammer may have to use special hardware (e.g., parallel computing
devices) to obtain the despreading results. As the jammer has to tol-
erate 1 or 2 bit delays, the maximum jamming probability decreases
signiﬁcantly. Not surprisingly, the non-despreading jammer has the
lowest jamming probability.
Figure 7 also shows that increasing n (and thus |Cp|) can quickly
reduce the maximum jamming probability for all types of jammers.
Moreover, the application of ECC can also reduce the jamming
probability effectively, though it introduces additional computa-
tional and communication overheads. For example, with an ECC
tolerating just 1 bit error, we can reduce the real-time jammer’s
maximum jamming probability from 0.31 to 0.05 when n = 169.
Further increasing n or the number of bit errors the ECC can tol-
erate can quickly reduce the maximum jamming probability to a
negligible level.
Comparison of Search Spaces: Now let us compare the num-
bers of candidate spreading codes that a normal receiver and a reac-
tive jammer have to consider, respectively. Such numbers represent
the computational costs they have to spend. Since a receiver buffers
the complete seed before despreading it, it can despread the last bit
of the seed ﬁrst to learn sidls, and then infer the indexes of sub-
sets for previous bits of the seed. The size of total search space
for a receiver is thus (ls − 1)(n + 1) + |Ce|. To show the advan-
tage of a receiver over a jammer, we compute function Adg = SSj
SSr
for real-time, one-bit-delay, two-or-more-bit-delay jammers, where
SSj and SSr are the sizes of the total search space for the jammer
and the receiver, respectively. The larger Adg is, the more advan-
tage the receiver has over the jammer.
Table 1: Jamming probabilities for jammers with different jamming capabilities (|Cp| = n2 + n + 1; Ce = l |Cp|
2 m; Pp0 = 1
n+1 ;
Pp1 =
2
(n+1)(n+2) ; Pe1 = Pe2 = 1
|Ce| ; Pp2 >
real time
1 bit delay
q bits delay (q ≥ 2)
non-despreading
real time, tolerate 1 bit error
1 bit delay, tolerate 1 bit error
q bits delay (q ≥ 2), tolerate 1
bit error
non-despreading, tolerate 1 bit
error
(1 − Pp1)ls−3 (1 − Pe1))
(1 − Pp2)ls−q−2(1 − Pe2)
2
(n+1)(n+2) )
n+1 )ls−1
|Ce|(cid:17)
|Cp |(cid:17) (1 − 1
|Cp |(cid:17)2
|Cp |(cid:17)q+1
|Cp |(cid:17)ls−1 (cid:16)1 − 1
1 − (cid:16)1 − 1
1 − (cid:16)1 − 1
1 − (cid:16)1 − 1
1 − (cid:16)1 − 1
1 − (1 − Pp0)ls−1 − (ls − 1) (cid:16)1 − 1
1 − (cid:16)1 − 1
Pp1)ls−4(1 − Pe1)
1 − (cid:16)1 − 1
2) (cid:16)1 − 1
1 − (cid:16)1 − 1
|Cp |(cid:17)q+1
|Cp |(cid:17)ls−1
|Cp|(cid:17)q+1
− (ls − 1) 1
|Cp |(cid:17)2
Pp2(1 − Pp2)ls−q−3(1 − Pe2)
Cp (cid:16)1 − 1
|Cp |(cid:17)ls−2 (cid:16)1 − 1
|Ce|(cid:17)
|Cp|(cid:17) Pp0(1 − Pp0)ls−2
(1 − Pp1)ls−3(1 − Pe1) − 2
|Cp| (cid:16)1 − 1
|Cp |(cid:17) (1 − Pp1)ls−3(1 − Pe1) − (ls − 3) (cid:16)1 − 1
|Cp |(cid:17)2
Pp1(1 −
(1 − Pp2)ls−q−2 − (q + 1) 1
|Cp| (cid:16)1 − 1
|Cp |(cid:17)q
(1 − Pp2)ls−q−2(1 − Pe2) − (ls − q −
Sender:
B1
Attacker:
B’1
B2
B’2
Bls
B’ls
Figure 9: Seed recovery in presence of bogus seed transmission
Figure 8 shows the advantage of a receiver over the jammers.
(The non-despreading jammer is not included, since she does not
despread at all.) All jammers have larger search space than the re-
ceiver, and the gap grows wider when n increases. The real-time
jammer remains the most powerful one; she can reduce the search
space for the next bit dramatically by despreading the current bit,
and thus has the smallest search space among all jammers, which
is close to the receiver’s search space. Nevertheless, Figure 8 con-
siders the lower bound of the jammers’ search space. Moreover,
there is still observable difference between the search spaces of the
real-time jammer and the receiver. The search spaces of the one-
bit-delay and two-or-more-bit-delay jammers have almost the same
size, which are signiﬁcantly larger than that of the receiver.
5.4.2 Effectiveness against DoS Attacks
As discussed in Section 4.4, a jammer can transmit bogus seeds
or even entire bogus messages. As long as the communication
channel is available to attackers, they can always inject bogus mes-
sages. Thus, in general, this is an unavoidable problem in presence
of compromised receivers. When these bogus seeds are not con-
currently transmitted and do not overlap with the sender’s normal
seed transmission, a receiver can ﬁlter them out using error detec-
tion coding and broadcast authentication (e.g., digital signature).
However, when the bogus seeds do overlap with the normal seed,
the receiver will have to consider all combinations of options for
each bit of the seed, thus suffering from serious DoS attacks.
2||...||B′
The proposed content-based code subset selection scheme can
effectively mitigate such situations by chaining the codes used to
spread different bits of the seed. To demonstrate the effectiveness
of this approach, we show the number of candidate seeds when
the jammer synchronizes with a sender and transmits a bogus seed
(B′
1||B′
ls ) to interfere with the transmission of the actual
seed (B1||B2||...||Bls ), as shown in Figure 9.
Intuition: During seed recovery, a receiver will attempt to re-
cover the seed starting with both Bls and B′
ls. The number of seed
candidates is the number of paths starting from Bls or B′
ls and end-
ing at B1 or B′
1. In the basic DSD-DSSS, the receiver will try all
possible paths shown in Figure 9. However, the content-based code
subset selection scheme can constrain the paths between two seeds
(dashed lines) during despreading. Intuitively, the jammer does not
know which code subset is used to spread each bit of the seed at
the time of her transmission, and thus cannot select the right code,
which will be considered valid by a receiver during despreading.
If the code for the i-th bit (1 ≤ i ≤ ls) of the bogus seed is not
in the subset for the i-th bit of the good seed, the receiver will not
consider it for despreading the i-th bit of the bogus seed. As a re-
sult, the path from the good seed to the bogus one (in black dashed
lines) will not exist. Similarly, if the code for i-bit of the good seed
is not in the subset for i-th bit of the bogus seed, the receiver will
not consider it for despreading the i-th bit of the good seed. Thus,
the path from the bogus seed to the good one (in red dashed lines)
will not exist.
During the analysis, we consider non-despreading, real-time,
one-or-more-bit-delay jammers to see the best-case scenarios for
the jammers when they can beneﬁt from knowing a part of the seed
and spreading codes. The capability of these jammers is the same
as discussed earlier during the analysis of jamming probabilities.
However, the objective of these jammers now is to trigger the re-
ceiver to have more seed candidates during despreading by inject-
ing bogus seeds. We assume these jammers can perform despread-
ing and transmitting operations at the same time, though they can
only use the despreading results of each bit for later bits.
Non-despreading Jammers: If the jammer follows the sender’s
procedure to send the seed, the probability of having a path from
from B′
i+1 to Bi (red dashed line) and the probability of having a
path from from Bi+1 to B′
n2+n+1 ,
because any pair of codes only exist in exactly one subset. Only one
among the n2 + n + 1 subsets can despread the i-th bit of both the
bogus and the good seeds. The expected number of seed candidates
|Cp| )ls−2 according to Theorem 4. The
is thus 2(1 + 1
proof of Theorem 4 is omitted due to the space limit.
i (black dashed line) are both
|Ce| )(1 + 1
1
THEOREM 4. When there is a non-despreading jammer launch-
ing the DoS attack against seed disclosure, the expected number of
seed candidates is 2(1 + p1)(1 + p2)ls−2. Among them, (1 +
p1)(1 + p2)ls−2 paths end at B1, and (1 + p1)(1 + p2)ls−2 paths
end at B′
1, where p1 = 1
|Ce| and p2 = 1
|Cp| .
Real-time and one-or-more-bit-delay Jammers: Similar to the
analysis for non-despreading jammer, we analyze the expected num-
ber of seed candidates caused by real-time and one-or-more-bit-
delay jammers. Due to the space limit, we simply list results and
omit proofs. The expected number of seed candidates caused by
(n+1)2 )ls−2,
real-time jammer is smaller than 2(1 + 1
|Cp| )(1 + n

Ĩ
Ž

ƌ
Ğ
ď
ŵ
Ƶ
E
Ě
Ğ
ƚ
Đ
Ğ
Ɖ
ǆ

ŝ
Ɛ
Ğ
ƚ
Ă
Ě
Ě
Ŷ
Ă

Ě
Ğ
Ğ