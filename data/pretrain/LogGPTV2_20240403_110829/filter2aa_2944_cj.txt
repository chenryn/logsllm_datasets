identity information and stored in a central directory such as LDAP, where they can be
accessed by API servers to authenticate and decrypt requests from clients or to encrypt
responses to be sent to those devices. The architecture is shown in figure 12.9. A hard-
ware security module (HSM) can be used to securely store the master encryption keys
inside the factory to prevent compromise.
 An alternative to generating completely random keys during manufacturing is to
derive device-specific keys from a master key and some device-specific information.
For example, you can use HKDF from chapter 11 to derive a unique device-specific
key based on a unique serial number or ethernet hardware address assigned to each
Factory
Key provisioning
Each device is supplied with a
unique key during manufacturing.
Device
Device
Device
HSM
Device directory
(LDAP)
Device details such as serial number
together with the encrypted key are
stored in a directory. APIs can access
the directory to retrieve device keys.
A hardware security module
(HSM) can be used to securely
store master encryption keys
and generate secure device keys.
Device details +
encrypted key
Figure 12.9
Unique device keys can be generated and installed on a device during 
manufacturing. The device keys are then encrypted and stored along with device 
details in an LDAP directory or database. APIs can later retrieve the encrypted device 
keys and decrypt them to secure communications with that device.
481
Key distribution and management
device. The derived key is stored on the device as before, but the API server can derive
the key for each device without needing to store them all in a database. When the
device connects to the server, it authenticates by sending the unique information
(along with a timestamp or a random challenge to prevent replay), using its device key
to create a MAC. The server can then derive the same device key from the master
key and use this to verify the MAC. For example, Microsoft’s Azure IoT Hub Device
Provisioning Service uses a scheme similar to this for group enrollment of devices
using a symmetric key; for more information, see http://mng.bz/gg4l.
12.4.2 Key distribution servers
Rather than installing a single key once when a device is first acquired, you can
instead periodically distribute keys to devices using a key distribution server. In this
model, the device uses its initial key to enroll with the key distribution server and then
is supplied with a new key that it can use for future communications. The key distribu-
tion server can also make this key available to API servers when they need to commu-
nicate with that device. 
LEARN MORE
The E4 product from Teserakt (https://teserakt.io/e4/) includes
a key distribution server that can distribute encrypted keys to devices over the
MQTT messaging protocol. Teserakt has published a series of articles on the
design of its secure IoT architecture, designed by respected cryptographers,
at http://mng.bz/5pKz.
Once the initial enrollment process has completed, the key distribution server can
periodically supply a fresh key to the device, encrypted using the old key. This allows
the device to frequently change its keys without needing to generate them locally,
which is important because constrained devices are often severely limited in access to
sources of entropy.
Remote attestation and trusted execution
Some devices may be equipped with secure hardware that can be used to establish
trust in a device when it is first connected to an organization’s network. For example,
the device might have a Trusted Platform Module (TPM), which is a type of hardware
security module (HSM) made popular by Microsoft. A TPM can prove to a remote
server that it is a particular model of device from a known manufacturer with a par-
ticular serial number, in a process known as remote attestation. Remote attestation
is achieved using a challenge-response protocol based on a private key, known as an
Endorsement Key (EK), that is burned into the device at manufacturing time. The TPM
uses the EK to sign an attestation statement indicating the make and model of the
device and can also provide details on the current state of the device and attached
hardware. Because these measurements of the device state are taken by firmware
running within the secure TPM, they provide strong evidence that the device hasn’t
been tampered with.
482
CHAPTER 12
Securing IoT communications
Rather than writing a dedicated key distribution server, it is also possible to distribute
keys using an existing protocol such as OAuth2. A draft standard for OAuth2 (cur-
rently expired, but periodically revived by the OAuth working group) describes how
to distribute encrypted symmetric keys alongside an OAuth2 access token (http://
mng.bz/6AZy), and RFC 7800 describes how such a key can be encoded into a JSON
Web Token (https://tools.ietf.org/html/rfc7800#section-3.3). The same technique
can be used with CBOR Web Tokens (http://mng.bz/oRaM). These techniques allow
a device to be given a fresh key every time it gets an access token, and any API servers
it communicates with can retrieve the key in a standard way from the access token
itself or through token introspection. Use of OAuth2 in an IoT environment is dis-
cussed further in chapter 13.
12.4.3 Ratcheting for forward secrecy
If your IoT devices are sending confidential data in API requests, using the same
encryption key for the entire lifetime of the device can present a risk. If the device key
is compromised, then an attacker can not only decrypt any future communications
but also all previous messages sent by that device. To prevent this, you need to use
cryptographic mechanisms that provide forward secrecy as discussed in section 12.2.
In that section, we looked at public key mechanisms for achieving forward secrecy, but
you can also achieve this security goal using purely symmetric cryptography through a
technique known as ratcheting.
DEFINITION
Ratcheting in cryptography is a technique for replacing a symmet-
ric key periodically to ensure forward secrecy. The new key is derived from
the old key using a one-way function, known as a ratchet, because it only moves
in one direction. It’s impossible to derive an old key from the new key so pre-
vious conversations are secure even if the new key is compromised.
There are several ways to derive the new key from the old one. For example, you can
derive the new key using HKDF with a fixed context string as in the following example:
var newKey = HKDF.expand(oldKey, "iot-key-ratchet", 32, "HMAC");
(continued)
Although TPM attestation is strong, a TPM is not a cheap component to add to your
IoT devices. Some CPUs include support for a Trusted Execution Environment (TEE),
such as ARM TrustZone, which allows signed software to be run in a special secure
mode of execution, isolated from the normal operating system and other code.
Although less resistant to physical attacks than a TPM, a TEE can be used to imple-
ment security critical functions such as remote attestation. A TEE can also be used
as a poor man’s HSM, providing an additional layer of security over pure software
solutions.
483
Key distribution and management
TIP
It is best practice to use HKDF to derive two (or more) keys: one is used
for HKDF only, to derive the next ratchet key, while the other is used for
encryption or authentication. The ratchet key is sometimes called a chain key
or chaining key.
If the key is not used for HMAC, but instead used for encryption using AES or another
algorithm, then you can reserve a particular nonce or IV value to be used for the
ratchet and derive the new key as the encryption of an all-zero message using that
reserved IV, as shown in listing 12.17 using AES in Counter mode. In this example, a
128-bit IV of all 1-bits is reserved for the ratchet operation because it is highly unlikely
that this value would be generated by either a counter or a randomly generated IV.
WARNING
You should ensure that the special IV used for the ratchet is never
used to encrypt a message.
private static byte[] ratchet(byte[] oldKey) throws Exception {
    var cipher = Cipher.getInstance("AES/CTR/NoPadding");
    var iv = new byte[16];               
    Arrays.fill(iv, (byte) 0xFF);        
    cipher.init(Cipher.ENCRYPT_MODE,
            new SecretKeySpec(oldKey, "AES"),     
            new IvParameterSpec(iv));             
    return cipher.doFinal(new byte[32]);       
}
After performing a ratchet, you should ensure the old key is scrubbed from memory
so that it can’t be recovered, as shown in the following example:
var newKey = ratchet(key);
Arrays.fill(key, (byte) 0);      
key = newKey;         
TIP
In Java and similar languages, the garbage collector may duplicate the
contents of variables in memory, so copies may remain even if you attempt to
wipe the data. You can use ByteBuffer.allocateDirect() to create off-heap
memory that is not managed by the garbage collector.
Ratcheting only works if both the client and the server can determine when a ratchet
occurs; otherwise, they will end up using different keys. You should therefore perform
ratchet operations at well-defined moments. For example, each device might ratchet
its key at midnight every day, or every hour, or perhaps even after every 10 messages.11
Listing 12.17
Ratcheting with AES-CTR
11
The Signal secure messaging service is famous for its “double ratchet” algorithm (https://signal.org/docs/
specifications/doubleratchet/), which ensures that a fresh key is derived after every single message.
Reserve a
fixed IV that is
used only for
ratcheting.
Initialize the cipher 
using the old key and 
the fixed ratchet IV.
Encrypt 32 zero bytes and use 
the output as the new key.
Overwrite the old 
key with zero bytes.
Replace the old key 
with the new key.
484
CHAPTER 12
Securing IoT communications
The rate at which ratchets should be performed depends on the number of requests
that the device sends, and the sensitivity of the data being transmitted. 
 Ratcheting after a fixed number of messages can help to detect compromise: if an
attacker is using a device’s stolen secret key, then the API server will receive extra mes-
sages in addition to any the device sent and so will perform the ratchet earlier than
the legitimate device. If the device discovers that the server is performing ratcheting
earlier than expected, then this is evidence that another party has compromised the
device secret key.
12.4.4 Post-compromise security
Although forward secrecy protects old communications if a device is later compro-
mised, it says nothing about the security of future communications. There have been
many stories in the press in recent years of IoT devices being compromised, so being
able to recover security after a compromise is a useful security goal, known as post-
compromise security.
DEFINITION
Post-compromise security (or future secrecy) is achieved if a device can
ensure security of future communications after a device has been compro-
mised. It should not be confused with forward secrecy which protects confiden-
tiality of past communications.
Post-compromise security assumes that the compromise is not permanent, and in
most cases it’s not possible to retain security in the presence of a persistent compro-
mise. However, in some cases it may be possible to re-establish security once the com-
promise has ended. For example, a path traversal vulnerability might allow a remote
attacker to view the contents of files on a device, but not modify them. Once the vul-
nerability is found and patched, the attacker’s access is removed.
DEFINITION
A path traversal vulnerability occurs when a web server allows an
attacker to access files that were not intended to be made available by
manipulating the URL path in requests. For example, if the web server pub-
lishes data under a /data folder, an attacker might send a request for
/data/../../../etc/shadow.12 If the webserver doesn’t carefully check paths,
then it may serve up the local password file.
If the attacker manages to steal the long-term secret key used by the device, then it can
be impossible to regain security without human involvement. In the worst case, the
device may need to be replaced or restored to factory settings and reconfigured. The
ratcheting mechanisms discussed in section 12.4.3 do not protect against compro-
mise, because if the attacker ever gains access to the current ratchet key, they can eas-
ily calculate all future keys.
12
Real path-traversal exploits are usually more complex than this, relying on subtle bugs in URL parsing routines.
485
Key distribution and management
 Hardware security measures, such as a secure element, TPM, or TEE (see sec-
tion 12.4.1) can provide post-compromise security by ensuring that an attacker never
directly gains access to the secret key. An attacker that has active control of the device
can use the hardware to compromise communications while they have access, but
once that access is removed, they will no longer be able to decrypt or interfere with
future communications.
 A weaker form of post-compromise security can be achieved if an external source
of key material is mixed into a ratcheting process periodically. If the client and server
can agree on such key material without the attacker learning it, then any new derived
keys will be unpredictable to the attacker and security will be restored. This is weaker
than using secure hardware, because if the attacker has stolen the device’s key, then,
in principle, they can eavesdrop or interfere with all future communications and inter-
cept or control this key material. However, if even a single communication exchange
can occur without the attacker interfering, then security can be restored.
 There are two main methods to exchange key material between the server and
the client:
 They can directly exchange new random values encrypted using the old key.
For example, a key distribution server might periodically send the client a
new key encrypted with the old one, as described in section 12.4.2, or both
parties might send random nonces that are mixed into the key derivation pro-
cess used in ratcheting (section 12.4.3). This is the weakest approach because
a passive attacker who is able to eavesdrop can use the random values directly
to derive the new keys.
 They can use Diffie-Hellman key agreement with fresh random (ephemeral) keys to
derive new key material. Diffie-Hellman is a public key algorithm in which the
client and server only exchange public keys but use local private keys to derive a
shared secret. Diffie-Hellman is secure against passive eavesdroppers, but an
attacker who is able to impersonate the device with a stolen secret key may still
be able to perform an active man-in-the-middle attack to compromise security. IoT
devices deployed in accessible locations may be particularly vulnerable to man-
in-the-middle attacks because an attacker could have physical access to network
connections.
DEFINITION
A man-in-the-middle (MitM) attack occurs when an attacker actively
interferes with communications and impersonates one or both parties. Proto-
cols such as TLS contain protections against MitM attacks, but they can still
occur if long-term secret keys used for authentication are compromised.
Post-compromise security is a difficult goal to achieve and most solutions come with
costs in terms of hardware requirements or more complex cryptography. In many IoT
applications, the budget would be better spent trying to avoid compromise in the first
place, but for particularly sensitive devices or data, you may want to consider adding a
secure element or other hardware security mechanism to your devices.
486
CHAPTER 12
Securing IoT communications
Answers to pop quiz questions
1
b. NEED_WRAP indicates that the SSLEngine needs to send data to the other
party during the handshake.
2
b. AES-GCM fails catastrophically if a nonce is reused, and this is more likely in
IoT applications.
3
False. Fresh keys are derived for each session by exchanging random values
during the handshake.
4
d. Diffie-Hellman key agreement with fresh ephemeral key pairs is used to
ensure forward secrecy.
5
b. MRAE modes are more robust in the case of nonce reuse.
6
False. SIV-AES is less secure if a nonce is reused but loses a relatively small amount
of security compared to other modes. You should still aim to use unique nonces
for every message.
7
False. Ratcheting achieves forward secrecy but not post-compromise security.
Once an attacker has compromised the ratchet key, they can derive all future keys.
Summary
 IoT devices may be constrained in CPU power, memory, storage or network
capacity, or battery life. Standard API security practices, based on web protocols
and technologies, are poorly suited to such environments and more efficient
alternatives should be used.
 UDP-based network protocols can be protected using Datagram TLS. Alterna-
tive cipher suites can be used that are better suited to constrained devices, such
as those using AES-CCM or ChaCha20-Poly1305.
 X.509 certificates are complex to verify and require additional signature valida-
tion and parsing code, increasing the cost of supporting secure communications.
Pre-shared keys can eliminate this overhead and use more efficient symmetric
cryptography. More capable devices can combine PSK cipher suites with ephem-
eral Diffie-Hellman to achieve forward secrecy.
 IoT communications often need to traverse multiple network hops employing
different transport protocols. End-to-end encryption and authentication can be
used to ensure that confidentiality and integrity of API requests and responses
are not compromised if an intermediate host is attacked. The COSE standards
provide similar capabilities to JOSE with better suitability for IoT devices, but
alternatives such as NaCl can be simpler and more secure.
Pop quiz
7
True or False: Ratcheting can provide post-compromise security.
The answer is at the end of the chapter.
487
Summary
 Constrained devices often lack access to good sources of entropy to generate ran-
dom nonces, increasing the risk of nonce reuse vulnerabilities. Misuse-resistant
authentication encryption modes, such as SIV-AES, are a much safer choice for
such devices and offer similar benefits to AES-CCM for code size.
 Key distribution is a complex problem for IoT environments, which can be
solved through simple key management techniques such as the use of key dis-
tribution servers. Large numbers of device keys can be managed through key
derivation, and ratcheting can be used to ensure forward secrecy. Hardware
security features provide additional protection against compromised devices.
488
Securing IoT APIs
In chapter 12, you learned how to secure communications between devices using
Datagram TLS (DTLS) and end-to-end security. In this chapter, you’ll learn how to
secure access to APIs in Internet of Things (IoT) environments, including APIs
provided by the devices themselves and cloud APIs the devices connect to. In its
rise to become the dominant API security technology, OAuth2 is also popular for
IoT applications, so you’ll learn about recent adaptations of OAuth2 for con-
strained devices in section 13.3. Finally, we’ll look at how to manage access control
decisions when a device may be disconnected from other services for prolonged
periods of time in section 13.4.
This chapter covers
 Authenticating devices to APIs
 Avoiding replay attacks in end-to-end device 
authentication
 Authorizing things with the OAuth2 device grant
 Performing local access control when a device 
is offline
489
Authenticating devices
13.1
Authenticating devices
In consumer IoT applications, devices are often acting under the control of a user, but
industrial IoT devices are typically designed to act autonomously without manual user
intervention. For example, a system monitoring supply levels in a warehouse would be
configured to automatically order new stock when levels of critical supplies become
low. In these cases, IoT devices act under their own authority much like the service-to-
service API calls in chapter 11. In chapter 12, you saw how to provision credentials to
devices to secure IoT communications, and in this section, you’ll see how to use those
to authenticate devices to access APIs.
13.1.1 Identifying devices
To be able to identify clients and make access control decisions about them in your
API, you need to keep track of legitimate device identifiers and other attributes of the
devices and link those to the credentials that device uses to authenticate. This allows
you to look up these device attributes after authentication and use them to make
access control decisions. The process is very similar to authentication for users, and
you could reuse an existing user repository such as LDAP to also store device profiles,
although it is usually safer to separate users from device accounts to avoid confusion.
Where a user profile typically includes a hashed password and details such as their
name and address, a device profile might instead include a pre-shared key for that
device, along with manufacturer and model information, and the location of where
that device is deployed. 
 The device profile can be generated at the point the device is manufactured, as
shown in figure 13.1. Alternatively, the profile can be built when devices are first deliv-
ered to an organization, in a process known as onboarding.
Factory
Device provisioning
Unique device identiﬁers and
credentials are deployed to the
device during manufacturing or
onboarding.
Device
Device
Device
Device directory
(LDAP)
Device details and identiﬁers are
combined into a device proﬁle and
stored in a central repository.
Device details +
encrypted PSK
Figure 13.1
Device details and unique identifiers are stored in a shared 
repository where they can be accessed later.
490
CHAPTER 13
Securing IoT APIs
DEFINITION
Device onboarding is the process of deploying a device and register-