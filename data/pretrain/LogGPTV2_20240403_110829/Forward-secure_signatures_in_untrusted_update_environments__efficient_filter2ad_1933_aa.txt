# Forward-Secure Signatures in Untrusted Update Environments: Efficient and Generic Constructions

**Authors:**
- Benoît Libert, UCL Crypto Group, Belgium
- Jean-Jacques Quisquater, UCL Crypto Group, Belgium
- Moti Yung, Columbia University, USA

## Abstract

Forward-secure signatures (FSS) are designed to prevent forgeries for past time periods even if an attacker gains full access to the signer’s storage. To facilitate the integration of these primitives into standard security architectures, Boyen, Shacham, Shen, and Waters introduced the concept of forward-secure signatures with untrusted updates, where private keys are protected by a second factor, such as a password. This allows key updates to be performed on encrypted versions of signing keys, ensuring that passwords are only used for signing messages.

The scheme proposed by Boyen et al. leverages bilinear maps and does not require the random oracle model. Their work also suggested integrating untrusted updates into the Bellare-Miner forward-secure signature, leaving open the challenge of extending this protection to other existing FSS systems.

This paper addresses this challenge by demonstrating how to adapt the efficient generic construction of Malkin, Micciancio, and Miner (MMM) to untrusted update environments. Our modified construction, which also avoids the random oracle model, transforms any 2-party multi-signature in the plain public key model into a forward-secure signature with untrusted updates. When combined with Bellare and Neven’s multi-signatures, our method yields implementations based on standard assumptions like RSA, factoring, or the hardness of computing discrete logarithms. Similar to the original MMM scheme, it does not require setting a bound on the number of time periods at key generation.

**Categories and Subject Descriptors:**
- E.3 [Data]: Data Encryption – Public Key Cryptosystems

**General Terms:**
- Design, Security, Performance

## 1. Introduction

Key exposures can undermine the efforts of the research community to develop more sophisticated and secure cryptographic systems. In the modern age of ubiquitous computing, with the increasing use of mobile and unprotected devices, it is often easier to break into users’ private storage than to decrypt their secrets using cryptanalytic techniques. Therefore, containing the damage when private keys are exposed is crucial.

In the public key setting, recent years have seen the exploration of various key-evolving protocols where public keys remain fixed while private keys are updated at discrete time intervals. Anderson’s suggestion of forward-secure mechanisms aimed to preserve the security of past time periods after a private key theft. Subsequent key-insulated and intrusion-resilient security paradigms strive to protect communications both before and after break-ins by storing part of the key material in a separate device.

Anderson’s key-evolving security was formalized by Bellare and Miner, who provided definitions and constructions for forward-secure signatures (FSS). Their first construction was a generic method with logarithmic complexity in the number of periods, built on any signature. The second scheme extended Fiat-Shamir signatures into a FSS scheme with constant-size signatures but linear cost in signature generation and verification. This was improved by Abdalla-Reyzin and Itkis-Reyzin, the latter achieving optimal signing and verification at the expense of slower key updates using Guillou-Quisquater signatures. Kozlov and Reyzin showed another method with fast updates and high online/offline efficiency. Meanwhile, forward security was also considered in special kinds of signature schemes, and non-trivial realizations of forward-secure public key encryption schemes were developed by Canetti, Halevi, and Katz, and later improved by Boneh, Boyen, and Goh.

Among generic FSS schemes, Anderson’s storage-demanding construction was improved by Krawczyk into a scheme requiring constant private storage. Using Merkle trees, Malkin, Micciancio, and Miner (MMM) described a system with an essentially unbounded number of time periods, outperforming previous generic constructions and number-theoretic schemes in at least one metric.

### Forward-Secure Signatures with Untrusted Updates

In many software environments, private keys are additionally protected by an extra secret, possibly derived from a password. To facilitate the integration of forward-secure primitives into such environments, Boyen, Shacham, Shen, and Waters suggested a new forward-secure signature where private keys are shielded by a second factor. This allows for automated updates of encrypted keys, with the user holding the second factor only needed for signing messages. Such a scheme prevents an adversary in possession of the encrypted key from forging signatures for past, current, and future periods.

While the usual model of forward security captures one aspect of key exposures, “untrusted updates” deal with potential exposures of the computing environment. In forward-secure signatures, a second factor protection strengthens signatures as evidence of the signer’s intentionality.

The implementation of forward-secure signatures with untrusted updates (FSS-UU) by Boyen et al. is provably secure in the standard model, offering constant-size signatures and log-squared complexity. However, it relies on bilinear maps, which are computationally expensive. Boyen et al. also showed how to achieve untrusted updates in the Bellare-Miner and Abdalla-Reyzin systems, but these methods suffer from linear complexities for signing and key generation. They left open the problem of efficiently achieving untrusted updates in other existing FSS schemes.

### Our Contribution

We describe generic forward-secure signatures with untrusted updates. We show that untrusted updates can be obtained from any traditional FSS by signing a message twice: once using a classical FSS scheme and a second time using a regular digital signature, with the private key re-derived from a second factor at each signing operation instead of being stored. While simple, this method induces overhead, so we seek more efficient constructions.

Extending this idea, we construct FSS-UU schemes from bipartite multi-signatures. Starting from any 2-party multi-signature satisfying appropriate security definitions, we apply the sum and product compositions of Malkin et al. to obtain FSS-UU schemes with more periods. When applied to a secure bipartite multi-signature in Boldyreva’s model, the iterated sum composition provides a FSS-UU system with logarithmic-size signatures. We also suggest efficiency trade-offs by combining this modified sum composition with non-generic FSS-UU schemes.

By adapting the sum-product composition, we obtain a generic construction of forward-secure signatures with untrusted updates for a practically unbounded number of periods. Combined with recently suggested multi-signatures built on Schnorr, Guillou-Quisquater, Fiat-Shamir, or Ong-Schnorr, our construction provides pairing-free schemes based on discrete logarithm, RSA, and factoring, with the same efficiency as traditional FSS signatures. These instantiations rely on the random oracle methodology only because underlying signatures do; our extension of MMM does not introduce additional random oracle assumptions. Standard model multi-signatures fitting the plain public key model would thus give rise to new FSS-UU schemes without random oracles, answering the open question raised in Boyen et al.

In the following sections, we recall definitions and security notions for FSS-UU schemes, detail the generic method for obtaining untrusted updates in any FSS scheme, and describe our efficient extension of the MMM method.

## 2. Definitions

A forward-secure signature scheme with untrusted updates (FSS-UU) consists of the following algorithms:

- **Keygen(λ, r, T):** On input of a security parameter λ, a random tape r, and a number of time periods T, this randomized algorithm returns a public key PK, the initial encrypted signing key EncSK0, and a random second factor decryption key DecK. The initial period number is set to 0.
- **CheckKey(t, T, EncSKt, PK):** An algorithm used to check the well-formedness of the private key EncSKt at period t. The output is 1 if the key was correctly generated and 0 otherwise.
- **Update(t, T, EncSKt, PK):** Given a period number t and the corresponding encrypted key EncSKt, this algorithm returns an encrypted key EncSKt+1 for the next period and erases EncSKt. It does not need the second factor decryption key.
- **Sign(t, T, EncSKt, DecK, M, PK):** Takes as input a message M, a period number t, the matching encrypted key EncSKt, and the second factor decryption key DecK. It returns a signature σ. The period number t is part of the signature.
- **Verify(t, T, PK, M, σ):** Takes as input the public key PK, a period number t, and a message M bearing an alleged signature σ. It outputs 1 if the signature is correct and 0 otherwise.

In practice, the validity test CheckKey ensures that a newly generated encrypted key is validated before the old key is erased. A check of EncSK by the signing algorithm is sufficient, and an additional validity test at each update should be performed at the signer’s discretion to ensure the signing process is not disrupted in the new period.

The completeness requirement mandates that properly generated signatures are always accepted by the verification algorithm.

The security model considers two orthogonal definitions inspired by chosen-message security. The first definition extends the usual notion of forward security as defined by Bellare-Miner. In the game that the adversary plays against her challenger, she should be unable to forge a signature for an unexposed stage even knowing the second factor decryption key DecK.

**Definition 1.** The forward security notion captures the negligible advantage of any PPT adversary in this game:
1. The challenger runs the key generation algorithm and gives the public key PK and the second factor decryption key DecK to the forger F. The initial period number t is set to 0.
2. F adaptively interacts with the following oracles:
   - **Sign:** At any time, the forger can ask for a signature on an arbitrary message M for the current time period t.
   - **Update:** Once she decides to move forward in time, the adversary queries the challenger that runs the update algorithm and increments the period number t.
   - **Break-in:** At some period, the forger enters the break-in phase and requests the challenger to reveal the current encrypted signing key EncSKt.
3. F comes up with a message M' and a signature σ' for some period t'. If t' denotes the time period where the break-in query was made, F is declared successful provided Verify(t', T, PK, M', σ') = 1 and t' < t.