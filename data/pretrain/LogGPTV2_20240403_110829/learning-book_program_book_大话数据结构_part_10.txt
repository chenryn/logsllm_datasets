坏时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度。
2.12算法空间复杂度
我们在写代码时，完全可以用空间来换取时间，比如说，要判断某某年是不是闰
年，你可能会花一点心思写了一个算法，而且由于是一个算法，也就意味着，每次给
一个年份，都是要通过计算得到是否是闺年的结果。还有另一个办法就是，事先建立
一个有2050个元素的数组（年数略比现实多一点），然后把所有的年份按下标的数字
对应，如果是闰年，此数组项的值就是1，如果不是值为0。这样，所谓的判断某一
年是否是闺年，就变成了查找这个数组的某一项的值是多少的问题。此时，我们的运
算是最小化了，但是硬盘上或者内存中需要存储这2050个0和1。
这是通过一笔空间上的开销来换取计算时间的小技巧。到底哪一个好，其实要看
你用在什么地方。
---
## Page 61
第2章算法
算法的空间复杂度通过计算算法所需的存储空间实现，算法空间复杂度的计算公
式记作：S（n）=O（f（n))，其中，n为问题的规模，f（n）为语句关于n所占存储空间的
函数。
一般情况下，一个程序在机器上执行时，除了需要存储程序本身的指令、常数、
变量和输入数据外，还需要存储对数据操作的存储单元。若输入数据所占空间只取决
于问题本身，和算法无关，这样只需要分析该算法在实现时所需的辅助单元即可。若
算法执行时所需的辅助空间相对于输入数据量而言是个常数，则称此算法为原地工
作，空间复杂度为0（1）。
通常，我们都使用“时间复杂度”来指运行时间的需求，使用“空间复杂度”指
空间需求。当不用限定词地使用“复杂度”时，通常都是指时间复杂度。显然我们这
本书重点要讲的还是算法的时间复杂度的问题。
2.13总结回顾
不容易，终于又到了总结的时间。
我们这一章主要谈了算法的一些基本概念。谈到了数据结构与算法的关系是相互
依赖不可分割的。
算法的定义：算法是解决特定问题求解步骤的描述，在计算机中为指令的有限序
列，并且每条指令表示一个或多个操作。
算法的特性：有穷性、确定性、可行性、输入、输出。
算法的设计的要求：正确性、可读性、健壮性、高效率和低存储量需求。
算法特性与算法设计容易混，需要对比记忆。
算法的度量方法：事后统计方法（不科学、不准确）、事前分析估算方法。
在讲解如何用事前分析估算方法之前，我们先给出了函数渐近增长的定义。
函数的渐近增长：给定两个函数f[n）和g（n），如果存在一个整数N，使得对于所
有的n>N，f（n）总是比g（n）大，那么，我们说f（n）的增长渐近快于g（n）。于是我们可
以得出一个结论，判断一个算法好不好，我们只通过少量的数据是不能做出准确判断
的，如果我们可以对比算法的关键执行次数函数的渐近增长性，基本就可以分析出：
某个算法，随着n的变大，它会越来越优于另一算法，或者越来越差于另一算法。
LE
---
## Page 62
大语数据结构
然后给出了算法时间复杂度的定义和推导大0阶的步骤。
推导大0阶：
■用常数1取代运行时间中的所有加法常数。
■在修改后的运行次数函数中，只保留最高阶项。
■如果最高阶项存在且不是1，则去除与这个项相乘的常数。
得到的结果就是大0阶。
通过这个步骤，我们可以在得到算法的运行次数表达式后，很快得到它的时间复
杂度，即大0阶。同时我也提醒了大家，其实推导大0阶很容易，但如何得到运行次
数的表达式却是需要数学功底的。
接着我们给出了常见的时间复杂度所耗时间的大小排列：
O（1）0）定义为线性表的长度，当n=0时，称为空表。
在非空表中的每个数据元素都有一个确定的位置，如a是第一个数据元素，an是
最后一个数据元素，a是第i个数据元素，称1为数据元素a在线性表中的位序。
我现在说一些数据集，大家来判断一下是否是线性表。
先来一个大家最感兴的，一年里的星座列表，是不是线性表呢？如图3-2-2所
示。
白金双巨狮处天射摩水双
羊牛子蟹子
女秤手羯瓶鱼
图3-2-2
当然是，星座通常都是用白羊座打头，双鱼座收尾，当中的星座都有前驱和后
继，而且一共也只有十二个，所以它完全符合线性表的定义。
43
---
## Page 68
大调数据结构
公司的组织架构，总经理管理几个总监，每个总监管理几个经理，每个经理都有
各自的下属和员工。这样的组织架构是不是线性关系呢？
不是，为什么不是呢？哦，因为每一个元素，都有不只一个后继，所以它不是线
性表。那种让一个总经理只管一个总监，一个总监只管一个经理，一个经理只管一个
员工的公司，俗称皮包公司，岗位设置等于就是在忽悠外人。
班级同学之间的友谊关系，是不是线性关系？哈哈，不是，因为每个人都可以和
多个同学建立友谊，不满足线性的定义。嗯？有人说爱情关系就是了。胡扯，难道每
个人都要有一个爱的人和一个被爱的人，而且他们还都不可以重复爱同一个人这样的
情况出现，最终形成一个班级情感人物串联？这怎么可能，也许网络小说里可能出
现，但现实中是不可能的。
班级同学的点名册，是不是线性表？是，这和刚才的友谊关系是完全不同了，因
为它是有限序列，也满足类型相同的特点。这个点名册（如表3-2-1所示）中，每一
个元素除学生的学号外，还可以有同学的姓名、性别、出生年月什么的，这其实就是
我们之前讲的数据项。在较复杂的线性表中，一个数据元素可以由若干个数据项组
成。
表3-2-1
学号姓名性别出生年月
家庭地址
1张三男19953
东街西巷1号203室
2事四女1994.8
北路4弄5号6室
3王五女1994.12
南大道789号
.
一群同学排队买演唱会门票，每人限购一张，此时排队的人群是不是线性表？
是，对的。此时来了三个同学要插当中一个同学A的队，说同学A之前拿着的三个书
包就是用来占位的，书包也算是在排队。如果你是后面早已来排队的同学，你们愿不
愿意？肯定不愿意，书包怎么能算排队的人呢，如果这也算，我浑身上下的衣服裤子
都在排队了。于是不让这三个人进来。
这里用线性表的定义来说，是什么理由？嗯，因为要相同类型的数据，书包根本
不算是人，当然排队无效，三个人想不劳而获，自然遭到大家的遣责。看来大家的线
性表学得都不错。
44
---
## Page 69
第3章线性表
3.3线性表的抽象数据类型
前面我们已经给了线性表的定义，现在我们来分析一下，线性表应该有一些什么
样的操作呢？
还是回到刚才幼儿园小朋友的例子，老师为了让小朋友有秩序地出入，所以就考
虑给他们排一个队，并且是长期使用的顺序，这个考虑和安排的过程其实就是一个线
性表的创建和初始化过程。
一开始没经验，把小朋友排好队后，发现有的高有的矮，队伍很难看，于是就让
小朋友解散重新排一这是一个线性表重置为空表的操作。
排好了队，我们随时可以叫出队伍某一位置的小朋友名字及他的具体情况。比如
有家长问，队伍里第五个孩子，怎么这么调皮，他叫什么名字呀，老师可以很快告诉
这位家长，这就是封清扬的儿子，叫封云下。我在旁就非常扭捏，看来是我给儿子的
名字没取好，儿子让班级“风云突变”了。这种可以根据位序得到数据元素也是一种
很重要的线性表操作。
还有什么呢，有时我们想知道，某个小朋友，比如麦兜是否是班里的小朋友，老
师会告诉我说，不是，麦兜在春田花花幼儿园里，不在我们幼儿园。这种查找某个元
素是否存在的操作很常用。
而后有家长问老师，班里现在到底有多少个小朋友呀，这种获得线性表长度的问
题也很普道。
显然，对于一个幼儿园来说，加入一个新的小朋友到队列中，或因某个小朋友生
病，需要移除某个位置，都是很正常的情况。对于一个线性表来说，插入数据和删除
数据都是必须的操作。
所以，线性表的抽象数据类型定义如下：
ADT线性表（List）
Data
线性表的数据对象集合为（a，a;a)，每个元素的类型均为DataType。其中，除第
一个元素a：外，每一个元素有丑只有一个直接前驱元素，除了最后一个元素a，外，每一个元
素有且只有一个直接后继元素。数据元素之间的关系是一对一的关系。
Operation
InitList（L）：初始化操作，建立一个空的线性表L
ListEmpty（L）：若线性表为空，返田true，否则返回false
45
---
## Page 70
大适数据结构
ClearList（*L）：将线性表清空。
GetElem（L,1,*e）：将线性表L中的第个位置元素值返回给e。
LocateElem（L，e）：在线性表L中壹我与给定值e相等的元素，如果查找成功，返回
该元素在表中序号表示成功：否则，遂回0表示失败。
ListInsert（*L，i，e）：在线性表L中的第1个位置插入新元素e
ListDelete（*L，i，*e）：删除线性表L中第i个位置元素，并用e返回其值。
ListLength（L）：返回线性表L的元素个数。