172
0.028
0.720
96
0.781
0.024
0.805
103
0.970 0.300 0.423
0.453 0.228
1.419 0.528 2.823
44 0.194 0.184
2.397
2.793
0.140
0.502
1.642
2144
0.127
0.180 50.758 25.552 13.719
0.790
0.970 52.992 28.360 16.526
0.055
96
2-MT N-MT OP-LUT SP-LUT
2.699
11.080
13.779
44
19.315
2.102
21.417
103
2.234
2.808
172
169
0.006
0.010
0.140
256
16,384
256
16,384
Network
AES Encryption
# Blocks
Protocol
Setup [s]
Online [s] 0.003
Total [s]
0.010 0.009
Sent [MB] 0.194 0.184
Private Set Intersection
Set Sizes
Protocol
Setup [s]
Online [s] 0.026
Total [s]
0.139 0.072
Sent [MB] 6.923 4.320
Yao 2-MT N-MT OP-LUT SP-LUT Yao 2-MT N-MT OP-LUT SP-LUT Yao 2-MT N-MT OP-LUT SP-LUT Yao
0.113 0.069
1.784
0.057
1.069
0.003
0.060
2.475
0.062
0.004
0.066
2.971
0.267 3.180 2.117
0.022 1.227
0.310 4.407 2.195
1.247 339.2 209.4
0.079
1.862
119.6
1.819
0.132
1.951
144.0
5.878 2.414 1.157
0.781 0.802
6.659 3.217 1.705
58.6 6.923 4.320
0.457
1.526
2.475
1.237
0.348
1.585
2.971
0.901 61.834 31.347 16.533
0.693 36.750
1.594 98.584 33.214 18.400
1.247
119.6
2-MT N-MT OP-LUT SP-LUT
9.857
4.789
14.089
58.6
18.730
1.742
20.472
144.0
339.2 209.4
1.867
TABLE VI.
SUMMARY OF OUR APPLICATION RESULTS ON AES AND PSI FOR YAO’S GARBLED CIRCUITS (§II-D), 2-MT (§II-E) AND OUR
N -MT (§III-E) FOR GMW, AND OUR OP-LUT (§IV-C) AND SP-LUT (§IV-D) PROTOCOLS. BEST RESULTS MARKED IN bold.
A. AES Encryption
One of the most widely used benchmark examples for se-
cure computation is AES, which has applications in encrypted
password authentication [Sec15]. We assume that a client holds
either one or 1,000 plaintexts, which should be encrypted with
an expanded key, held by a server. We use the Boolean AES
S-box circuit from [BP12] which has 34 AND gates and a
multiplicative depth of 4. The OP-LUT representation of the
S-box consists of a network of δ = 2 to σ = 1, δ = 3 to
σ = 2, and δ = 4 to σ = 4 LUTs which requires 795 bytes
of communication and has 3 communication rounds. The SP-
LUT representation of the AES S-box uses a δ = 8 input to
σ = 8 output LUT to evaluate an S-box.
From the results in Tab. VI, we can observe that no protocol
consistently performs best across all experiments. This can be
explained by a varying bottleneck, depending on the evaluated
function and the setting. In the AES(1,000) LAN setting, the
N-MT protocol performs best since it has a good balance
between computation and communication. In the AES(1) WAN
setting, Yao’s protocol performs best, since it has the lowest
number of communication rounds. Finally, in the AES(1,000)
WAN setting, the SP-LUT protocol performs best, since it has
the lowest communication. The 2-MT and N-MT approaches
have the same online phase but the setup phase of the N-MT
protocol is more efﬁcient due to the lower communication.
For AES(1000), Yao’s protocol performs worst since its com-
munication is uni-directional from garbler to the evaluator as
opposed to the other protocols, where the communication is
evenly divided between both parties.
B. Private Set Intersection
that
is not
In the private-set intersection (PSI) application, two parties
want to identify the intersection of their private sets without
revealing any element
in the intersection. PSI
can be used for computing the revenue of online advertise-
ment, for ﬁnding common contacts, or for genomic computa-
tions [PSSZ15]. For our experiments, we use the circuit-based
PSI protocol of [PSSZ15], which computes the intersection
between two sets by ﬁrst mapping the elements into hash tables
and then performing a pair-wise comparison between each bin
of the hash tables. We compute the intersection between two
sets of either 256 or 16,384 elements with length 32-bit. The
Boolean circuit for sets of 256 elements has 138,600 AND
gates and for sets of 16,384 elements has 6,724,062 AND
gates and both have a multiplicative depth of 5. The OP-LUT
circuit for 256 elements has 44,352 δ = 4 to σ = 1 LUTs
and 5,544 δ = 2 to σ = 1 LUTs and the circuit for 16,384
elements has 2,123,388 δ = 4 to σ = 1 LUTs and 353,898
δ = 2 to σ = 1 LUTs and both have a depth of 4. The SP-LUT
circuit for 256 elements has 16,632 δ = 8 to σ = 1 and 5,544
δ = 5 to σ = 1 LUTs and the circuit for 16,384 elements has
707,796 δ = 8 to σ = 1 and 353,898 δ = 6 to σ = 1 LUTs
and both have a depth of 3.
As shown in Tab. VI, the overall best performing protocol
for the PSI experiments in the LAN and PSI(256) WAN
settings is our N-MT generation. In the PSI(256) WAN setting,
our LUT protocols are only slightly slower, while in the
PSI(16,384) setting, our SP-LUT protocol achieves the best
performance. The reason for the poor performance of SP-
LUT in the LAN setting is its high computation overhead,
which is due to the high number of δ = 8 to σ = 1
LUTs, which is around factor 5 higher than for the N-MT
protocol. Nevertheless, in the WAN setting, where communi-
cation becomes the bottleneck, the computation overhead of
our SP-LUT protocol amortizes and it performs better than
the standard 2-MT generation. Yao’s garbled circuits protocol
performs poorly in the LAN and WAN settings, since it has
larger communication per AND gate than the other protocols
and the number of input wires to the circuit, which require
κ bit communication in the online phase, is as high as the
number of AND gates. Finally, the Boolean circuits protocols
have a fast online time in the LAN setting, since the number
of communication rounds is low, but OP-LUT achieves better
online time in the WAN setting, due to the higher latency.
VIII. RELATED WORK
In this section, we discuss related work on improving
secure computation (§VIII-A), secure computation protocols
that represent
the functionality as network of multi-input
gates (§VIII-B), and Boolean circuit compilers (§VIII-C).
A. Efﬁcient Secure Computation
One of the main reasons why secure computation was
believed to be inefﬁcient was the high number of symmetric
cryptographic primitive invocations. In particular,
in Yao’s
garbled circuits the circuit garbler requires 4 invocations to
garble an AND gate while for GMW, both parties require 6
invocations to generate a multiplication triple during OT exten-
sion. A dramatic improvement on the computation efﬁciency of
secure computation protocols has come with the introduction
12
of the AES-NI processor extensions [KSS12], [BHKR13],
[GLNP15]. Currently, the most efﬁcient instantiation is the
ﬁxed-key AES garbling of [BHKR13], which imposes an ideal
permutation assumption on AES. Alternative instantiations that
require weaker assumptions and use pipelining techniques to
improve efﬁciency have been given in [GLNP15]. In [ZRE15]
it was shown how to reduce the communication in Yao’s
garbled circuits to 2κ bits per AND gate and it was proven that
this matches the lower bound. In [KKS16] the authors utilize
the fact that AND gates in Yao’s garbled circuits where one
party knows the plaintext input can be garbled at lower cost
to reduce the communication for speciﬁc circuits.
One approach to circumvent the high cost for certain opera-
tions are mixed-protocols, which mix secure computation pro-
tocols that operate on arithmetic and Boolean circuits. Thereby,
a function can be divided in sub-blocks that are evaluated in
the secure computation protocol for which the representation is
more efﬁcient. The TASTY framework [HKS+10] combined
additively homomorphic encryption and Yao’s garbled circuits
protocol. The ABY framework [DSZ15] used OT instead of
homomorphic encryption to compute the multiplication. Our
work can be combined with these approaches to achieve
another degree of freedom when constructing mixed-protocols.
B. Multi-Input Gates in Secure Computation
The gate-evaluation secret
sharing approach (GESS)
[Kol05] is an information theoretic variant of garbled circuits
that can be based on OT and performs secure computation in
a constant number of rounds. The idea of GESS is to process
the circuit from the outputs to the inputs such that shares
on the output wires determine the shares on the input wires,
which leads to a quadratic size increase in circuit depth for
shares on the input wires. Sliced-GESS [KK12] efﬁciently
extends GESS to circuits with higher depth at the cost of an
increased number of communication rounds by slicing the
circuit into sub-circuits of constant depth, which are connected
via a string selection OT (security against a covert client can
be achieved using longer strings as selection bits in the OTs).
The efﬁciency of sliced-GESS is not experimentally evaluated
and its performance is highly affected by the topology of
the evaluated circuit and is best for rectangular circuits with
constant width where each gate has 2 outputs. According
to an unpublished full version2,
the best performance for
such a rectangular circuit is (112 + κ)/3 = 80-bit per gate,
where each slice has depth d(cid:48) = 3, κ = 128 and with the OT
extension optimization of [KK13], [ALSZ13], which reduces
the number of sent ciphertexts from two to one. In contrast
to GESS, the performance of our approach is less dependent
on the topology of the overall circuit and independent of the
function computed in the slices.
[IKM+13] outlines a scheme called one-time truth tables
(OTTTs), which relies on representing the whole function
as a single truth-table and allows the evaluation of an
arbitrary-size truth-table in a constant number of rounds and
with linear communication complexity in the input
length
during the online phase using correlated randomness that
is pre-computed in the setup phase. However, the scheme
scales poorly for functions with large input size as the
setup phase requires super-polynomial communication and
2Available at http://www.cs.technion.ac.il/∼ranjit/papers/slicegess.pdf.
13
concurrent
and
[DNNR16],
independent
a malicious
storage in the length of the function’s input. [DZ16] tailors
the pre-computed randomness to AES S-boxes to allow
an efﬁcient online evaluation of AES with security against
malicious adversaries. Their setup phase, however, becomes
very communication intensive, since all possible outcomes for
every AES S-box have to be pre-computed once. We present
and analyze the efﬁciency of [IKM+13] with pre-computation
using [DZ16] in §IV-B and give a protocol that improves on
the communication complexity in the setup phase for practical
input sizes in §IV-C.
FastGC [HEKM11] used Yao’s protocol to evaluate multi-input
gates. Using the garbled row reduction technique [NPS99],
this approach requires κσ · (2δ − 1) bits communication in
the setup phase for a LUT with δ input and σ output bits
and, in the online phase, requires constant rounds and no
communication. However, a traditional 2-input gate Boolean
circuit evaluation using Yao’s protocol is more efﬁcient than
a multi-input gate evaluation, since the communication for
multi-input garbled tables scales exponentially in δ.
A
introduces
TinyTable
computation
protocol that uses pre-computed tables for secure evaluation
of functions. TinyTable was shown to achieve better online
communication for 2-input AND gates in the semi-honest
model. For tables with more inputs,
its online phase was
evaluated only on the AES SBox. In order to pre-compute
the tables, [DNNR16] uses the same idea as [DZ16], outlined
in §IV-B, namely to pre-compute the circuit once for every
input combination, which results in a large communication
overhead in the setup phase.
A recent work [GLMY16] proposes to garble a circuit as
sub-components, which reduces
independent
smaller
the
communication cost
in the online phase but results in a
multi-round protocol and more overall communication.
An ongoing and independent work outlines a polynomial-
based garbling scheme in Yao’s protocol
[MPS15]. The
scheme requires the function to be represented as building
blocks with multiple inputs instead of 2-input gates. We view
their work as orthogonal to ours, since they focus on the
constant-round Yao’s protocol while our approach focuses on
multi-round secret-sharing based protocols.
The authors of [KKW16] showed how to efﬁciently overlay
a large number of switch branches in secure computation
and propose to evaluate switch statements in GMW using
(cid:1) OT protocol of [KK13]. This idea is similar to our
work
secure
the (cid:0)N
1
multi-input LUT protocols but speciﬁcally tailored to switch
statements, while our LUT protocols can be used to evaluate
generic functionalities.
New garbling techniques that allow Yao’s garbled circuits
protocol to evaluate several functions more efﬁciently than a
regular linear garbling scheme were given in [BMR16]. In
particular, the authors showed that their garbling techniques
allows a more efﬁcient evaluation of arithmetic circuits and
multi-input threshold gates in Boolean circuits. For general
Boolean circuit constructions, the authors give a construction