(cid:8)(cid:5)
mn
√
2s
(cid:6)L
.
(1)
The correctness constraint (1), which is derived using
the Central Limit Theorem, signiﬁcantly reduces bitwidth
requirements for modulus q (as compared to the analysis
in [1] for a multi-level directed encoding scheme; note also
that no correctness constraint for conjunction obfuscator was
derived in [1]). Hence, our correctness estimate is another
361
major improvement in this work. The details of deriving the
correctness constraint are provided in Appendix B.
C. Security
1) Ring dimension n: We utilize Ring-LWE for the trap-
door construction and a combination of small-secret Ring-
LWE and an entropic variant of small-secret Ring-LWE for
directed encoding. Since entropic small-secret Ring-LWE is
the strongest assumption, it should determine the value of
the ring dimension n. However, no experimental results for
entropic Ring-LWE are available and hence we assume that
we can use the same lower bounds for λ as for regular (non-
entropic) Ring-LWE. As the directed encoding Ring-LWE
instance uses the ternary distribution T to generate secret
polynomials, our lower-bound estimates of the number of
security bits λ are computed for this variant of Ring-LWE.
We run the LWE security estimator2 (commit 9302d42) [67]
to ﬁnd the lowest security levels for the uSVP, decoding, and
dual attacks following the standard homomorphic encryption
security recommendations [68]. We choose the least value of λ
for all 3 attacks on classical computers based on the estimates
for the BKZ sieve reduction cost model.
(cid:6)
write the public key A in Algorithm 1 as A =
where A ×(cid:5)
2) Dimension m: The dimension m can be written as ¯m+κ,
where ¯m is a security dimension determined by the Ring-LWE
trapdoor construction and κ is a functional parameter.
(cid:20)
(cid:19)
Consider the Ring-LWE construction constraint. Let us
(cid:20)
(cid:19)
¯A|gT − ¯AR
,
= gT . Here, ¯A is uniformly random and
¯A|gT − ¯AR
R is small. The pseudorandomness of A =
(required by our application) immediately follows from the
pseudorandomness of
, which is implied by the Ring-
LWE assumption.
¯A| ¯AR
(cid:19)
(cid:20)
R
I
More speciﬁcally, we use the Ring-LWE construction from
[44], [62], implying that ¯A is represented as [a, 1], i.e., a
1 × 2 matrix over the Ring-LWE ring. Then each column of
¯AR is of the form ci = aˆri + ˆei. The pseudorandomness of
(a, ci) follows from Ring-LWE. Since each ci uses a different
“secret” ri, the public value of a can be reused, and joint
pseudorandomness follows by a standard hybrid argument.
This means that the security dimension ¯m = 2, i.e., m = 2+κ,
can be used regardless of dimension κ.
3) Work factors tV BB and tRLW E: We consider two attack
models to learn the full conjunction pattern. The ﬁrst one
is based on VBB (input-output) analysis, independently of
the underlying cryptographic obfuscation construction. The
second model is based on lattice attacks on the obfuscated
program, i.e., requires solving multiple Ring-LWE problems.
We present here the attacks that result in lowest work factors
tV BB and tRLW E for the VBB and lattice models, respectively
(our analysis showed these attacks correspond to optimal lower
bounds for both models but the formal proofs are beyond the
scope of this paper). The work factors are expressed in terms of
the number of clock cycles to abstract from speciﬁc hardware
architectures.
2https://bitbucket.org/malb/lwe-estimator
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:30 UTC from IEEE Xplore.  Restrictions apply. 
VBB model. The work factor for a speciﬁc conjunction
pattern depends on the number of wildcard bits, denoted as
X. If we assume that the conjunction pattern has high entropy,
then the adversary can (on average) run 2L−X random-input
evaluation queries to ﬁnd a ﬁrst match, which is equivalent to a
point function with L − X bits. Once the ﬁrst match is found,
the adversary can run additional L evaluation queries to ﬁnd
the wildcard positions. Therefore, the VBB work factor can be
teval ≈ 2L−X teval, where
estimated as tV BB =
teval is the number of clock cycles for a single evaluation of
the obfuscated program.
2L−X + L
(cid:5)
(cid:6)
Lattice model. Our most efﬁcient lattice-based attack can
be described as follows:
1) Find all wildcard positions. For each word of w bits, solve
w×2×2 = 4w Ring-LWE problems, where the ﬁrst factor
of 2 corresponds to bits 0 and 1, and the second factor of
2 corresponds to each encoding matrix for si,b · ri,b and
ri,b, respectively (both ring elements are needed to ﬁnd
si,b). This procedure is repeated for each word, i.e., L/w
times (for simplicity, we assume w|L), which implies this
step requires a work factor of 2λ+2L.
2) For each word, solve additional 2 × 2w−Xi problems to
ﬁnd all si,b, where Xi is the number of wildcards in the
i-th word. Some solutions may have already been found
in Step 1 but we can expect their contribution to be small
(to simplify the analysis). The work factor of this step is
2λ+1
3) Solve Ring-LWE problems for rL+1 and rL+1
i=1 si,vi.
4) Steps 1–2 yield all values of si,b. Now compare 2L−X
i=1 si,vi found in step 3. The
i=1 si,b requires approxi-
teval, as can be seen
products
computation of one product
mately the work factor of
from Algorithm 8.
i=1 si,b with
2m2
(cid:3)L/w
i=1 2w−Xi.
(cid:4)L
(cid:4)L
(cid:5)
(cid:4)L
The Ring-LWE work factor can then be written as
tRLW E ≈ 2
λ+1
w−Xi + 2L
2
2L−X teval
2m2
.
(cid:4)L
(cid:6)−1
⎞⎠ +
⎛⎝L/w(cid:24)
i=1
For conjunction obfuscation with at least 80 bits of security,
the following constraints have to be satisﬁed: tRLW E ≥
tV BB ≥ 280. Note that for a 2.5 GHz core, 280 clock cycles
correspond to 1.4 × 107 core-years.
4) Small-Secret Ring-LWE vs Error-Secret Ring-LWE for
Directed Encoding: Our implementation also supports integer
Gaussian distribution DR,σ for short ring elements si,b, ri,b,
i.e., the error-secret Ring-LWE (Deﬁnition 1). This variant
√
increases the modulus q, more speciﬁcally the parameter Be in
γ (γ is explained in Section
expression (5), by a factor of σ
V-B), which is only 5 bits for our parameters.
According to our estimates using [67], error-secret and
small-secret Ring-LWE require almost the same bitwidth for
q to achieve the same level of security for practical ring
dimensions (the modulus q is at most 4 bits larger for small-
secret Ring-LWE). Hence, both small-secret and error-secret
Ring-LWE variants can be used without any major difference
362
in program size or runtimes (none of the performance metrics
increase by more than 15% for the error-secret case according
to our experimental analysis), achieving approximately the
same level of security according to LWE estimator [67].
We choose the small-secret Ring-LWE case for our main
experiments because it is slightly more efﬁcient than the error-
secret Ring-LWE scenario and is currently believed to be as
secure against known attacks.
D. Word Size w
The selection of word size w is governed by the tradeoff
between the decrease in multi-linearity degree (L + 1) and
increase in the number of encoding matrices.
To ﬁnd the optimal value of w, we introduce a formal
deﬁnition of theoretical program size Σtheor (in bytes):
Σtheor (Πv) =
1
4
w · L + 1) (2 + κ)2 nk.
(2
(2)
The ﬁrst multiplicand accounts for the number of encoding
matrices, the second multiplicand represents the number of
ring elements per encoding matrix, and the last
term nk
deals with the storage for each ring element. This theoretical
program size is generally slightly smaller than the actual stor-
age consumed in an implementation (due to storage overhead
related to the size of underlying native integers and extra data
members in C++ classes).
We consider the program size as the main practical limita-
tion of conjunction obfuscator due to the high size estimates
(in Terabytes) listed in Tables I and II, which are found
for the G-lattice base t of 2 (larger bases are discussed in
Section V-E) and all other parameters computed using the
input parameters and constraints described in Sections V-A–
V-C. These estimates imply that w = 4 and w = 8 produce
the smallest program sizes.
In addition to obfuscated program size, we should consider
the evaluation runtime as another optimization constraint. The
evaluation runtime is proportional to L (2 + κ)2 nk, which
implies that smaller L, n, and k reduce the runtime. Therefore,
the case of w = 8 is optimal for our experiments when the
combined effect of obfuscated program size and evaluation
runtime is considered.
Tables I and II suggest that the use of w = 8 instead
of w = 1 reduces the program size by more than 2 and 3
orders of magnitude for 32-bit and 64-bit conjunction patterns,
respectively. The proportionality of evaluation runtime to
L (2 + κ)2 nk suggests that the runtime is reduced by about
4 orders of magnitude when switching from w = 1 to w = 8
both for 32-bit and 64-bit conjunction programs.
E. G-Lattice Base t
of public key A0, encoding secret keys (cid:27)
Larger values of G-lattice base t decrease the dimension
Ti, and encoding
matrices Ri, where i corresponds to the level of directed
Ti, and Ri
encoding. More concretely,
are proportional to (2 + κ) nk, κnk, and (2 + κ)2 nk, respec-
tively. Here, κ = (cid:8)k/ log2 t(cid:9) and k is the number of bits in
the sizes of A0, (cid:27)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:30 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I: Program size as a function of word size for 32-bit
conjunctions (with λ > 80 bits and t = 2)
w
1
2
4
8
16
32
L
32
16
8
4
2
1
k
1041
505
248
127
70
45
n
Σtheor (Πv), Terabytes
32768
16384
8192
4096
2048
2048
617
36
5
3
42
294,900
TABLE II: Program size as a function of word size for 64-bit
conjunctions (with λ > 80 bits and t = 2)
w
1
2
4
8
16
32
L
64
32
16
8
4
2
k
2204
1049
505
248
127
70
n
Σtheor (Πv), Terabytes
65536
32768
16384
8192
4096
2048
22,200
1,230
142
77
792
2,730,000
modulus q. The program size, obfuscation time, and evaluation
time are determined by the size of Ri.
When t is increased,
the term (2 + κ)2 in the size of
Ri becomes smaller but the modulus bitwidth k and ring
dimension n grow as follows from expression (1) and security
analysis for n (Section V-C1). The correctness constraint (1)
L
, which means that k
suggests that q is proportional to (t + 1)
grows linearly with log2 t. This implies that the size of Ri, and
hence the obfuscation program size, is always reduced with
increase in t. The maximum practical value of t is reached
when one of the following conditions is met:
1) Evaluation runtime becomes inadequately slow (as it is
proportional to kn);
2) Implementation limitations of integer Gaussian sampling
are reached, for instance, the samples start exceeding the
bitwidth of a native integer data type;
3) The value of κ reaches 2 (m = 4), which is the smallest
value supported by our perturbation sampling procedure.
It should be pointed out that the choice of t also depends
on the value of the most signiﬁcant digit of modulus q with
respect to base t, which affects the value of dκ−1 in Algorithm
3. For the worst-case analysis, assume that qκ−1 = 1, then
dκ−1 ≈ 1/t. Once this value is substituted into SampleD,
zκ−1 is sampled using a distribution parameter ≈ σt. Then the
term q0zκ−1 in the expression for t0 in SampleG may reach
values that are proportional to σt2, which are much higher
than one would expect, i.e., comparable to σt.
To avoid this scenario, we introduce an additional constraint
qκ−1/t > 1/ζ, where ζ is a constant. In our experiments, we
set ζ = 2, which implies qκ−1 has at most one bit less than t.
We also performed a combined optimization analysis for
word size w and G-lattice base t, which conﬁrmed that w = 8
is still the optimal value for t > 2.
We use the highest value of t = 220 in our experiments