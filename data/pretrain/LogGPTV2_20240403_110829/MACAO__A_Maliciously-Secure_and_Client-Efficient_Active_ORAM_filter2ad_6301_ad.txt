i = xi ⊕ xi−1 and y(cid:48)
c) The client computes x(cid:48)
i = yi ⊕ yi−1.
i and y(cid:48)
j
j
j
j
j
2. The client interprets x(cid:48)
Output: The client outputs b.
Fig. 4: Authenticated XOR-PIR on additively shared database.
combination of opened values.
Corollary 1. In the (cid:96)-server setting, the matrix multiplication
protocol by SP DZ in Figure 3 is secure against a malicious
adversary corrupting ((cid:96)-1) servers.
2) Authenticated PIR in the Shared Setting: We construct
several PIR protocols in the shared setting with malicious
security that will be used in our ORAM framework. In contrast
to standard the PIR, where the database is public, the database
in our setting is shared with authenticated secret sharing in
Figure 1 and each server in the system stores one or multiple
shares of the database. In this setting, each database item is
split into m chunks as bi = (bi,1, . . . , bi,m), where bij ∈ Fp.
So a database with N items can be interpreted as a m × N
. Let (cid:104)B(cid:105) = ((cid:74)B(cid:75),(cid:74)αB(cid:75)) =
(cid:1) ∈ Fm×N
p
matrix B = (cid:0)bi
(cid:16)(cid:0)(cid:74)bi(cid:75)(cid:1),(cid:0)(cid:74)αbi(cid:75)(cid:1)(cid:17)
be the authenticated share of B. Our PIR
protocols are as follows.
• XOR-PIR: We extend the original XOR-PIR protocol [18] to
privately retrieve a block in the shared setting with malicious
security. In this paper, we consider the three-server case;
however it can be extended to the general (cid:96)-server setting.
In this setting, the client creates three authenticated shares
for database B as (cid:0)(cid:104)B(cid:105)0, . . . ,(cid:104)B(cid:105)2
(cid:1) ← AuthCreate(α, B, 3).
Each Si stores two out of three authenticated shares as
((cid:104)B(cid:105)i,(cid:104)B(cid:105)i+1). Our main idea is to harness the XOR-PIR
protocol in [18] to retrieve each authenticated share of the
database block, and then verify the integrity of the block from
the shares. Figure 4 presents our protocol in details.
Lemma 2. In the 3-server setting, the XOR-PIR protocol on
an authenticated shared database in Figure 4 is secure against
a malicious adversary corrupting an arbitrary server.
• RSS-PIR: We construct a PIR protocol with malicious
security based on the RSS matrix multiplication protocol
presented in §II-A. Similar to XOR-PIR, we consider the 3-
server setting, where each server Si stores two authenticated
shares ((cid:104)B(cid:105)i,(cid:104)B(cid:105)i+1) of database B. Figure 5 presents the
protocol in detail.
Corollary 2. In the 3-server setting, the RSS-PIR protocol on
Parameters: N denotes the number of shared items in the shared database.
Inputs: The client has inputs (idx, α) and each server Si has inputs
1. The client creates an indicator Q = (q0, . . . , qN−1) for the block to be
retrieved, i.e., qidx = 1 and qj = 0 for 0 ≤ j (cid:54)= idx < N. The client
creates shares of Q by executing Create algorithm on each qi, resulting
(cid:0)(cid:104)B(cid:105)i, (cid:104)B(cid:105)i+1,(cid:1).
in(cid:74)Q(cid:75)0, . . . ,(cid:74)Q(cid:75)(cid:96)−1. The client sends(cid:74)Q(cid:75)i to Si for 0 ≤ i ≤ 2.
responds with xi =(cid:74)Q(cid:75)i ×(cid:74)B(cid:75)i +(cid:74)Q(cid:75)i ×(cid:74)B(cid:75)i+1 +(cid:74)Q(cid:75)i+1 ×(cid:74)B(cid:75)i
3. The client computes b ←(cid:80)
and yi =(cid:74)Q(cid:75)i ×(cid:74)αB(cid:75)i +(cid:74)Q(cid:75)i ×(cid:74)αB(cid:75)i+1 +(cid:74)Q(cid:75)i+1 ×(cid:74)αB(cid:75)i.
2. Every Si executes step 1 of the matrix multiplication protocol based on
RSS scheme in Figure 2. Speciﬁcally, every Si locally computes and
i xi and t ←(cid:80)
i yi.
Output: If αb = t, the client outputs b as the correct block. Otherwise, the
client outputs ⊥.
Fig. 5: Authenticated RSS-PIR on additively shared database.
Parameters: N denotes the number of shared items in the shared database.
Inputs: The client has inputs (idx, α) and each server Si has input (cid:104)B(cid:105)i.
1. The client creates an indicator Q = (q0, . . . , qN−1) for the block to
be retrieved, i.e., qidx = 1 and qj = 0 for 0 ≤ j (cid:54)= idx < N. The
client creates the authenticated shares of Q by executing AuthCreate
algorithm on each qi, resulting in (cid:104)Q(cid:105)0, . . . , (cid:104)Q(cid:105)(cid:96)−1. The client sends
(cid:104)Q(cid:105)i to Si for 0 ≤ i < (cid:96).
2. The client and all servers jointly execute the SPDZ-based matrix multi-
plication protocol in Figure 3 to compute (cid:104)Q × B(cid:105). If the client does
not abort, every Si sends its output (cid:104)Q × B(cid:105)i to the client.
3. The client executes b ← AuthRecover(α, (cid:104)Q×B(cid:105)0, . . . , (cid:104)Q×B(cid:105)(cid:96)−1).
Output: The client outputs b as the retrieved block.
Fig. 6: Authenticated SPDZ-PIR on additively shared database.
an authenticated shared database in Figure 5 is secure against
a malicious adversary corrupting an arbitrary server.
• SPDZ-PIR: We construct a maliciously-secure PIR protocol
based on the SPDZ matrix multiplication (Figure 6). This
protocol works in the general (cid:96)-server setting, in which every
Si stores a single authenticated share of the database as (cid:104)B(cid:105)i.
Corollary 3. In the (cid:96)-server setting, the SPDZ-PIR protocol on
an authenticated shared database setting in Figure 6 is secure
against a malicious server corrupting up to ((cid:96) − 1) servers.
3) Oblivious Eviction via Permutation Matrix: As outlined
in §II-C, the core idea of the eviction in [66] is to maximize
the number of data blocks that can be pushed down in a
single block scan on the eviction path via strategic pick
and drop operations. To make these operations oblivious,
the client needs to download and upload the entire bucket
for each level scan, thereby suffering from the logarithmic
communication overhead. Inspired by [33], our framework
harnesses the permutation matrix concept to implement the
Circuit-ORAM eviction strategy in a more communication-
efﬁcient manner. Figure 7 presents our algorithm with the
highlights as follows. For each level h on the eviction path
v, we create a (Z + 1) × (Z + 1) matrix Ih initialized with
zeros. We consider the data to be computed with Ih as a
matrix Uh ∈ F(Z+1)×m
containing Z blocks from the bucket
at level h and the block supposed to be held by the client3.
h × Ih, where
The main objective is to perform V(cid:62)
Vh ∈ F(Z+1)×m
contains the new data for the bucket at level
h and the new block to be picked for deeper levels. Therefore,
to drop the holding block to an empty slot indexed x in the
h = U(cid:62)
p
p
3Remark that each database block is split into m chunks ci ∈ Fp.
7
(cid:0)b, (I0, . . . , IH )(cid:1) ← CreatePermMat(v):
else
if h = dest then
1: hold ← ⊥, dest ← ⊥, b ← {0}|b|
2: (deepest, deepestIdx) ← PrepareDeepest(v)
3: target ← PrepareTarget(v)
4: if target[0] (cid:54)= ⊥ then
hold ← deepestIdx[0]; dest ← target[0]
5:
b ← S[hold], S[hold] ← {}
6:
7: for h = 0 to H do
Ih[i, j] ← 0 for 0 ≤ i ≤ Z, 0 ≤ j ≤ Z
8:
if hold (cid:54)= ⊥ then
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21: return(cid:0)b, (I0, . . . , IH )(cid:1)
for each real block bid at level h do
Ih[x(cid:48)][Z] ← 1 where x(cid:48) ← deepestIdx[h]
hold ← x(cid:48), dest ← target[h]
if pm[bid].pIdx mod Z (cid:54)= deepestIdx[h] then
(cid:46) Drop the on-hold block to this level
hold ← ⊥, dest ← ⊥,
Ih[Z][x] ← 1 where xh is an empty slot index at level h
Ih[Z][Z] ← 1
if target[h] (cid:54)= ⊥ then
(cid:46) Move the on-hold block to the next level
(cid:46) Pick a block at this level
Ih[ˆx][ˆx] ← 1 where ˆx ← pm[bid].pIdx mod Z
(cid:46) Preserve existing blocks
Fig. 7: Permutation matrix for Circuit-ORAM eviction.
bucket at level h, the client sets Ih[Z, x] ← 1 (line 12). To pick
a block at slot x(cid:48), the client sets Ih[x(cid:48), Z] ← 1 (line 17). To
skip this level (no drop or pick), the client sets Ih[Z, Z] ← 1,
which moves the holding block to the next level (line 14).
To preserve an existing block at this level, the client sets
Ih[ˆx, ˆx] ← 1 where ˆx is the slot index of the block in the
bucket (lines 18-20).
C. MACAO Schemes
In this section, we construct two ORAM schemes in our
framework called Πrss and Πspdz by putting sub-protocols in
the previous section altogether. Our constructions follow the
general tree-ORAM access structure [59] outlined in §II-C,
which contains two main subroutines including retrieval and
eviction. At the high level idea, our ORAM schemes use multi-
server authenticated PIR protocols in §IV-B2 to implement the
retrieval. For the eviction, our ORAM schemes harness the
concept of permutation matrix in §IV-B3 and the homomorphic
matrix multiplication protocols in §IV-B1. We ﬁrst give the
storage layout at the client- and server-side, and then present
our ORAM schemes in detail.
Server layout. Our constructions follow the tree-ORAM
paradigm outlined in §II-C. In Πrss scheme, there are three
servers and each server Si ∈ {S0, S1, S2} stores two authen-
there are (cid:96) ≥ 2 servers, where each Si ∈ {S0, . . . , S(cid:96)−1} stores
an authenticated share (cid:104)T(cid:105)i and an additive share of the global
ticated shares of the tree as(cid:0)(cid:104)T(cid:105)i,(cid:104)T(cid:105)i+1
MAC key,(cid:74)α(cid:75)i.
(cid:1). In Πspdz scheme,
Client state. The client maintains the position map of the
form pm := (bid; pid, pIdx), where bid is the block ID, 0 ≤
pid < 2H is the path ID and 0 ≤ pIdx < ZH is the index of
the block in its assigned path. Notice that pm can be stored
remotely at the servers by recursive ORAM [64] and meta-
data construction as discussed in [33] (see §IV-E). For ease of
presentation, we assume that pm is locally stored. Since we
follow Circuit-ORAM eviction, the client needs to maintain the
stash component (S) to temporarily store blocks that cannot
be evicted back to the tree. This stash can also be stored at the
2: data(cid:48) ← Retrieve(cid:0)pid, pIdx(cid:1)
data(cid:48) ← Access(op, bid, data):
1: (pid, pIdx) ← pm[bid]
3: if data(cid:48) =⊥ then
return abort
4:
5: if op = write then
b ← data
6:
7: pm[bid].pid $← {0, . . . , 2H − 1}
8: Evict()
9: return data(cid:48)
b ← Πrss.Retrieve(cid:0)pid, pIdx(cid:1):
Fig. 8: MACAO access structure.
1. return b, where b ← The client executes either XOR-PIR protocol in
Figure 4 or RSSS-PIR protocol in Figure 5 with 3 servers, in which
the client has input (pIdx, α) and each Si has inputs as the blocks
along the path pid of (cid:104)T(cid:105)i, (cid:104)T(cid:105)i+1.
Fig. 9: Πrss retrieval.
server-side for reduced storage overhead (see §IV-E2). Finally,
the client stores the global MAC key α.
Figure 8 presents the general access structure of MACAO
schemes. In the following, we present in detail the retrieval
and eviction phases of each scheme.
1) Πrss Scheme: Our Πrss scheme operates on the speciﬁc
three-server setting. Πrss employs either XOR-PIR or RSS-PIR
protocol for oblivious retrieval, and RSS matrix multiplication
for eviction as follows.
Retrieval.
Figure 9 presents the retrieval phase of Πrss
scheme. Since we perform the PIR on the retrieval path, all
the buckets on the path are interpreted as the database input of
the PIR protocols. As a result, the length of the PIR query is
Z(H + 1) and the database input is interpreted as a matrix of
size Z(H +1)×m. Notice that we can use XOR-PIR and RSS-
PIR protocols interchangeably in this phase. The difference is
that XOR-PIR incurs less computation than RSS-PIR (XOR vs.
arithmetic operations) with the smaller size of the client queries
(binary string vs. ﬁnite ﬁeld vector). As a trade-off, it doubles
the number of data to be downloaded, and the computed blocks
(cid:1).
Πrss.Evict():
Parameters: ne denotes the number of eviction operations initialized at 0, H
denotes the height of ORAM tree, (cid:96) = 3 denotes the number of servers
in the system.
Inputs: The client has input α and every Si has inputs(cid:0)(cid:104)T(cid:105)i, (cid:104)T(cid:105)i+1
2. (cid:0)b, (I0, . . . , IH )(cid:1) ← CreatePermMat(v)
Client:
1. v ← DigitReverse2(ne mod 2H ), ne ← ne + 1
5. Send(cid:0)(cid:104)b(cid:105)i, ((cid:74)I0(cid:75)i, . . . ,(cid:74)IH(cid:75)i)(cid:1) to Si and Si−1 for 0 ≤ i < (cid:96)
4. ((cid:74)Ih(cid:75)0, . . . ,(cid:74)Ih(cid:75)(cid:96)−1) ← Create(Ih, (cid:96)) for 0 ≤ h ≤ H
3. ((cid:104)b(cid:105)0, . . . , (cid:104)b(cid:105)(cid:96)−1) ← AuthCreate(α, b, (cid:96))
where the client inputs α and every Si inputs(cid:0)(cid:74)Ih(cid:75)i, (cid:104)Bh(cid:105)i,(cid:74)Ih(cid:75)i+1,
(cid:1). Let (cid:104)Bh × Ih(cid:105)i, (cid:104)Bh × Ih(cid:105)i+1 be the output of Si.
forms authenticated shared matrices (cid:104)Bh(cid:105)i, (cid:104)Bh(cid:105)i+1 by
concatenating the bucket P(v, h) of (cid:104)T(cid:105)i, (cid:104)T(cid:105)i+1 with (cid:104)b(cid:105)i, (cid:104)b(cid:105)i+1,
respectively.
7. All parties execute RSS-based matrix multiplication protocol in Figure 2,
Server: For each level h of the eviction path v starting from the root:
6. Every Si
(cid:104)Bh(cid:105)i+1
8. Every Si interprets the last row of (cid:104)Bh × Ih(cid:105)i, (cid:104)Bh × Ih(cid:105)i+1 as the
holding blocks (cid:104)b(cid:105)i, (cid:104)b(cid:105)i+1 for the next level h + 1, respectively, and
updates the bucket P(v, h) of (cid:104)T(cid:105)i, (cid:104)T(cid:105)i+1 with the other rows.
Fig. 10: Πrss eviction.
8
b ← Πrss.Retrieve(cid:0)pid, pIdx(cid:1):
1. return b, where b ← The client executes SPDZ-PIR in Figure 6 with
(cid:96) servers, in which the client has input (pIdx, α) and each Si has
inputs as the blocks along the path pid of (cid:104)T(cid:105)i.
Fig. 11: Πspdz retrieval.
on the servers are in the form of XOR shares. This XOR-share
format does not allow for further (homomorphic) arithmetic
computations after being accessed once.
Eviction. Figure 10 presents the eviction protocol of Πrss
scheme in detail. We follow the deterministic eviction strategy
proposed in [28], where the eviction path is selected according
to the reverse-lexicographical order of the number of evictions
being performed so far (line 1). Intuitively, the client creates
the permutation matrices for Circuit-ORAM eviction plans
(line 2). The client creates authenticated shares for the block
fetched from the stash and the permutation matrices (lines 3,
4), and then distributes the shares to corresponding servers.
Notice that it is not necessary to create authenticated shares
of permutation matrices because RSS scheme only needs one
authenticated share to do the authenticated homomorphic mul-
tiplication. Once receiving all shares from the client, all servers
execute the RSS-based authenticated matrix multiplication
protocol in Figure 2 for each level h of the eviction path. The
servers form the authenticated shared matrices to be multiplied
with the shared permutation matrices by concatenating the
buckets at level h of the authenticated shared ORAM trees
with the authenticated shared blocks sent by the client. The
servers interpret the last row of the resulting matrices as the
authenticated shared blocks holding by the client for the next
level (h + 1), and update the h-leveled buckets of the shared