title:Why Johnny Can't Make Money With His Contents: Pitfalls of Designing
and Implementing Content Delivery Apps
author:Sze Yiu Chau and
Bincheng Wang and
Jianxiong Wang and
Omar Chowdhury and
Aniket Kate and
Ninghui Li
Why Johnny Can’t Make Money With His Contents:
Pitfalls of Designing and Implementing Content Delivery Apps
Sze Yiu Chau
Purdue University
PI:EMAIL
Omar Chowdhury
The University of Iowa
PI:EMAIL
Bincheng Wang
The University of Iowa
PI:EMAIL
Aniket Kate
Purdue University
PI:EMAIL
Jianxiong Wang
Purdue University
PI:EMAIL
Ninghui Li
Purdue University
PI:EMAIL
ABSTRACT
Mobile devices are becoming the default platform for multime-
dia content consumption. Such a thriving business ecosystem has
drawn interests from content distributors to develop apps that can
reach a large number of audience. The business-edge of content
delivery apps crucially relies on being able to eectively arbitrate
the purchase and delivery of contents, and govern the access of
contents with respect to usage control policies, on a plethora of
consumer devices. Content protection on mobile platforms, espe-
cially in the absence of Trusted Execution Environment (TEE), is
a challenging endeavor where developers often have to resort to
ad-hoc deterrence-based defenses. This work evaluates the eec-
tiveness of content protection mechanisms embraced by vendors
of content delivery apps, with respect to a hierarchy of adversaries
with varying real-world capabilities. Our analysis of 141 vulnerable
apps uncovered that, in many cases, due to developers’ unjustied
trust assumptions about the underlying technologies, adversaries
can obtain unauthorized and unrestricted access to contents of
apps, sometimes without even needing to reverse engineer the
deterrence-based defenses. Some weaknesses in the apps can also
severely impact app users’ security and privacy. All our ndings
have been responsibly disclosed to the corresponding app vendors.
CCS CONCEPTS
• Security and privacy → Digital rights management; Cryptanal-
ysis and other attacks; Access control; Authorization; Mobile and
wireless security; Software security engineering; • Applied comput-
ing → E-commerce infrastructure;
ACM Reference Format:
Sze Yiu Chau, Bincheng Wang, Jianxiong Wang, Omar Chowdhury, Aniket
Kate, and Ninghui Li. 2018. Why Johnny Can’t Make Money With His
Contents: Pitfalls of Designing and Implementing Content Delivery Apps
. In 2018 Annual Computer Security Applications Conference (ACSAC ’18),
December 3–7, 2018, San Juan, PR, USA. ACM, New York, NY, USA, Article 4,
16 pages. https://doi.org/10.1145/3274694.3274752
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for prot or commercial advantage and that copies bear this notice and the full citation
on the rst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specic permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6569-7/18/12...$15.00
https://doi.org/10.1145/3274694.3274752
1 INTRODUCTION
The ubiquity of mobile devices has encouraged content owners (e.g.,
publishing houses and record labels) to tap into the online business
ecosystem in an attempt to reach a larger number of audience. As
a result, they often retain the service of app-developing content dis-
tributors to adapt to this emerging trend of customer engagement.
The role of content distributors is focused on developing mobile
apps tailor-made to t the form of the contents and the business
model of content owners, and providing continuous technical sup-
port in updating and distributing digitized contents (e.g., magazines
and music). For maintaining their business edge it is crucial for the
content distributors to ensure that the end users cannot easily have
unfettered access to the raw, high-quality reproduction of contents
in their devices, even in the cases where the digital contents can
be consumed without Internet connectivity (e.g., oine playback).
The overarching goal of this paper is to systematically identify (and,
in the process, educate developers about) design weaknesses in content
delivery apps that can grant users unauthorized and unrestricted
access to the underlying content.
At a rst glance, it may seem that the design of an eective
content protection mechanism boils down to eectively enforcing
Digital Rights Management (DRM). We however argue that there is a
subtle distinction between the two. DRM enforcement is concerned
about regulating user’s access to the content after the content (and,
the corresponding usage control policy and other bootstrapping
information) has been securely delivered to the user’s device. On
the other hand, content protection mechanisms, especially in the
context of online content distribution, also have to guarantee reli-
able receipt of payments and secure delivery of contents (and the
accompanying control policies) to the user device.
In this paper, we demonstrate that, in many cases, an adversary
(the device owner in our context) can modify the enforcement pol-
icy 1 while it is being delivered to the device during bootstrapping,
to achieve unfettered access to raw contents.
The challenges of eective content protection enforcement is
further exacerbated by the fact that content distributors, to increase
their audience reach, often need to support a plethora of (legacy)
devices running various (legacy) versions of operating system (OS).
Even after successful bootstrap, eectively enforcing DRM, with-
out considering the analog loophole problem—the Achilles’ heel of
1 Readers may question the rationale of delivering the usage control policies during
app bootstrap, instead of having them hardcoded inside the apps. Delivering policies
during bootstrap allows for exible customization of various aspects of the policies
(for instance, number of free trials allowed), to better t the business decisions.
236
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
S. Chau et al.
any DRM systems–is a challenging ordeal and requires content
distributors to conceal secret states in a potentially hostile execu-
tion environment. In dierent systems, secret states manifest in
various aspects of the underlying mechanisms, for example the
content encryption keys, authorization tokens, subscription status,
or even the raw content itself. The general consensus is that ef-
fective DRM enforcement is feasible on a device equipped with a
trusted execution environment (TEE). Technologies like the ARM
TrustZone have been available on the hardware architecture level
for some years now. Nevertheless, various system-on-chip (SoC)
vendors have come up with dierent TEE implementations that do
not seem to conform to the same API standard [20]. Together with
the fact that TEE vendors often adopt a tight admission control
model, currently it is still somewhat dicult to develop widely
deployable apps that uses TEE for DRM needs, especially on rel-
atively low-end and legacy devices that do not have the trusted
images preloaded. Due to this lack of a generic secure solution that
is applicable to all hdevice, OSi pairs, developers often resort to a
best-eort, deterrence-based enforcement of DRM—specialized for
each hdevice, OSi pairs—where the main objective is to raise the
bar for mounting successful bypass attacks instead of providing
absolute enforcement guarantees. Since content protection is only
as strong as the weakest links (e.g., legacy hdevice, OSi pairs) in the
ecosystem, this presents an interesting trade-o between audience
reach and the strength of content protection.
Content Protection Enforcement Analysis. In this paper, we sys-
tematically identify the dierent attack surfaces a content delivery
app may expose, and how those can be exploited by adversaries to
bypass protection enforcement. In our analysis, we consider two
abstract classes of adversaries, namely, the network adversary (who
can observe and manipulate network trac) and the local adversary
(who can access internal states and possibly tamper with the execu-
tion environment). For each of the two classes, we further consider
varying degree of adversary capabilities, ranging from a normal
tech savvy user to more sophisticated ones like rooting the device
and TLS interception capabilities. With respect to our hierarchy
of adversaries, we present concrete attacks against 141 Android
content delivery apps, including some high-prole ones like the
Amazon Music, Bloomberg Businessweek+, and Forbes Magazine apps.
Our evaluation reveals a bleak state of the aair. We observed that
all the apps are susceptible to our attacks due to unjustied trust
assumption on the underlying technologies, e.g., insecure bootstrap-
ping and policy delivery, and bad practices like client-side policy
enforcement, and reuse of content encryption keys. Whenever pos-
sible, we further dissect the weaknesses that our attacks exploited
and categorize them using the Common Weakness Enumeration
(CWE) 2. We believe that, with the patterns provided by our con-
crete analysis, this paper lays a solid foundation for further research
on automated vulnerability detection and the development of more
robust apps.
Findings. In our evaluation of publication apps, a somewhat un-
charted territory for academic studies, many apps are not only
falling short in terms of content protection, but contain weaknesses
that allow remote exploits which threaten the app users’ security
and the privacy. Notable among our ndings is the purchase bypass
2 https://cwe.mitre.org/
attacks against the Forbes Magazine and Mother Earth News apps
which allows an adversary, with sucient lesystem permission,
to manipulate the purchase status for gaining unauthorized access
to all issues for free. Another example of relying only on client-
side enforcement of usage control policies was exhibited by the
Bloomberg Businessweek+ app, for which a network adversary
with TLS interception capability can rewrite the policies on the y
during app bootstrap, and obtain virtually unlimited free previews of
its subscription-only articles. We observed that the service of a con-
tent distributor often gets retained by a diverse group of publishers.
Since apps from the same distributor tend to be similar in their
designs, our attacks aect a large number of dierent publications.
One popular choice for DRM enforcement is to employ a crypto-
graphic cipher to encrypt the underlying content, in which case the
robustness of the enforcement hinges on the concealment of the
secret key, as the Kerckhos’s principle mandates. This approach
was embraced by the Amazon Music app, which was the most ro-
bust app analyzed in our evaluation. While the app seems to be
programmed with the good practice of minimizing exposure time
of cryptographic keys in memory, we were still able to devise a key
extraction attack to extract the underlying content encryption keys
by leveraging some non-complex binary instrumentation. To our
surprise, a closer inspection of the app revealed that against best
practices, the entire Amazon Music collection of 40 million songs
seems to be encrypted under one single content encryption key,
irrespective of accounts, device models, and subscription tiers. Our
successful key extraction attack hence puts their entire collection
in serious jeopardy.
Given that our ndings could potentially aect the business of
various stakeholders, we have engaged in responsible disclosure
(Section 5.1), and careful ethical considerations have been taken
during and after our experiments (Appendix A.1).
Contributions. In summary, this paper makes the following con-
tributions:
1) We identify attack surfaces and practical adversaries with vary-
ing degree of sophistication that vendors of content distribution
mobile apps should consider, in order to devise eective content
protection mechanisms, especially in the absence of a trusted exe-
cution environment (TEE) support from the underlying platform.
2) We systematically evaluate 141 content distribution apps de-
veloped for Android with respect to our identied hierarchy of
adversaries. Our evaluation uncovered that more often than not
developers of these apps make unjustied trust assumptions about
the underlying platform and design decisions that enable an adver-
sary to circumvent these protection mechanisms without having
to reverse engineer the apps to extract the underlying secret state.
3) We dissect and classify the weaknesses that our attacks ex-
ploited with respect to CWEs to help future developers avoid the
same pitfalls. We have responsibly shared our analyses with the
corresponding content distributors. With the understanding of var-
ious attack strategies, we discuss possible countermeasures, their
trade-os and implications.
2 SCOPE
We now discuss the attack surfaces, threat model, and platform that
we consider in this paper.
237
Why Johnny Can’t Make Money With His Contents:
Pitfalls of Designing and Implementing Content Delivery Apps
2.1 Attack Surfaces
Without loss of generality, in the following discussions, we consider
encryption is used to protect the underlying contents. The normal
operation of a content distribution app can be roughly broken down
into the following six phases: (1) Bootstrapping; (2) Storing autho-
rization token; (3) Content transmission and storage on the device;
(4) Playback preparation; (5) Content decryption; (6) Content play-
back. Each of the above steps presents opportunities for the attacker
to bypass content protection and thus corresponds to one of the
following attack surfaces. Depending on the actual implementation,
certain steps might be skipped or merged, and events might happen
in a slightly dierent order. In this paper we focus on (AS1–4).
(AS1) Bootstrapping. In the bootstrapping phase, the app authen-
ticates itself and the user to the content distributor’s back-end
server, obtains a list of available contents and their prices, as well
as authorization to access them. This step may involve monetary
transactions, if this is the rst time that a user subscribes to the
service, or purchases contents. Successful completion of the boot-
strapping process may result in the back-end server returning an
authorization token. Information inside the token can be as simple
as URLs of contents, or it could contain rich policy enforcement
details including expiration date and maximum playback times to
allow granular control. In some cases, it may also contain the con-
tent decryption key to allow future consumption of contents. One
might attack this surface in an attempt to get the content source
URLs or to trick the app with more permissive policies by rewriting
the authorization tokens.
(AS2) Authorization token storage. The token may need to be
stored on the device’s storage to accommodate content access, espe-
cially when the business model allows oine playback of contents
(without Internet connectivity). An adversary with adequate storage
access privilege might be able to retrieve and modify the authoriza-
tion tokens on the device’s storage and gain unauthorized access
to contents.
(AS3) Content transmission and storage. Upon receipt of an
authorized request, the back-end distribution server sends the con-
tent over the Internet. If the content is not adequately protected in
transit, an adversary might be able to intercept the communication
and duplicate the raw content.
Once the content arrives on the user side, it may get consumed
and removed almost immediately, or it might be stored for oine
consumption, which most services tend to oer for better user ex-
perience, but opens up the possibility for adversaries with sucient
storage access privilege to conduct content extraction attack.
(AS4) Playback preparation. When a user initiates playback of
an encrypted content from the device’s storage, the app might
perform certain control checks (e.g., authorization expiration) and
then load the relevant secret keys into the device’s memory, so
that content can be decrypted for consumption. This presents an
opportunity for adversaries who can inspect the device’s memory
to perform key extraction attacks.
(AS5) Content decryption. During actual playback, (fragments
of) the content would need to be decrypted in memory. An adver-
sary who has the capability of inspecting the device’s memory can
exploit this opportunity to extract the content fragments in clear,
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
and attempt to chain them back into the original content. An attack
against this surface given video contents of high entropy has been
demonstrated to be feasible [53]. Attacking this surface usually
requires real-time eort, that is, to extract 2 hours worth of content,
the attack needs to accommodate a 2-hour long playback.
(AS6) Analog loophole. One inevitable attack surface is the analog
loophole, where analog signals of protected contents are recaptured
during playback. For contents like publications and motion pictures,
it can be quite costly to produce high quality replicas. Similar to
(AS5), such an attack is also real-time in nature.
2.2 Platform and Test Setup
In our studies, we focus on the Android platform because 1) it is the
most popular operating system to date and is increasingly the plat-
form where most multimedia contents are being consumed; and 2)
there exists a wide range of legacy devices that lack new hardware-
enforced isolation and are running old versions of Android. For the
dierent levels of local adversary capabilities, we leverage rooted
Android phones running Android version 4.4 (Kitkat) and 5.0 (Lol-
lipop), whichever satises the minimum requirements of the studied
apps. To emulate network adversaries, we leverage a Linux setup
hosting a wireless AP and running MITMProxy 3. Note that since
this paper is not about the robustness of Android itself but the
content delivery apps that run atop of Android, we deliberately
choose older versions of Android devices that are representative of
the “weakest link” in the business ecosystem, as would a rational
attacker do. This allows us to demonstrate the perils of service
providers not excluding such devices from accessing their content
distribution services.
Since in all our evaluations, content distributors maintain the
back-end distribution servers and develop the Android apps that
interact with users and enforce content protection, in the rest of
the paper we use vendors, developers and content distributors in-
terchangeably. When we say attacks, we mean that an adversary
is able to obtain contents in a manner that violates the control
mechanisms in place.
2.3 Threat Model
Meaningful discussion on robustness of access control and protec-
tion mechanisms requires a well-dened adversary model which
bounds attackers’ capabilities. Here we discuss the two categories
of capabilities that we consider in this paper, focusing on software-
only attacks. An enumeration of successful attacks and the corre-
sponding adversary capabilities can be found in Figure 1.
2.3.1 Network Adversaries.
ANet(Sni) (Passive Eavesdropping of Network Trac). Such
an adversary enjoys the capability of passively observing the net-
work trac between the device and the back-end servers serving
the app. We also assume the adversary is capable of extracting
payloads out of the network packets being observed and parsing
messages of standard plaintext protocols (e.g., HTTP). This repre-
sents the lowest capability among all the ANet adversaries.
3 https://mitmproxy.org/
238
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
S. Chau et al.
Figure 1: Enumeration of possible weaknesses and attacks under various adversary capabilities in attack tree form
EVA
(Sect. 3.1)
yes
Raw Content
Transfer
in Clear
PBA
(Sect. 3.2)
yes
PBA
(Sect. 3.2)
yes
no
Direct Content
Source Transfer
no
Bootstrap Information
Transfer in Clear +
in Clear
Local Policy Enforcement
EVA
(Sect. 3.3)
yes
no
Raw Content
no
Transfer over TLS
PBA
(Sect. 3.4)
yes
PBA
(Sect. 4.1)
yes
Bootstrap Information
Transfer over TLS +
no
Direct Content