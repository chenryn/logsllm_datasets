# Why Johnny Can't Make Money With His Contents: Pitfalls of Designing and Implementing Content Delivery Apps

## Authors
- Sze Yiu Chau, Purdue University
- Bincheng Wang, The University of Iowa
- Jianxiong Wang, Purdue University
- Omar Chowdhury, The University of Iowa
- Aniket Kate, Purdue University
- Ninghui Li, Purdue University

## Abstract
Mobile devices have become the primary platform for multimedia content consumption, driving content distributors to develop apps that reach a broad audience. These apps must effectively manage the purchase and delivery of content while enforcing usage control policies on a variety of consumer devices. However, content protection on mobile platforms, especially in the absence of a Trusted Execution Environment (TEE), is challenging. Developers often rely on ad-hoc, deterrence-based defenses, which can be vulnerable to various attacks.

This study evaluates the effectiveness of content protection mechanisms in 141 vulnerable apps, revealing that developers' unjustified trust in underlying technologies can lead to unauthorized and unrestricted access to content. Some weaknesses also impact users' security and privacy. All findings have been responsibly disclosed to the respective app vendors.

## CCS Concepts
- **Security and Privacy**: Digital rights management, cryptanalysis and other attacks, access control, authorization, mobile and wireless security, software security engineering.
- **Applied Computing**: E-commerce infrastructure.

## ACM Reference Format
Sze Yiu Chau, Bincheng Wang, Jianxiong Wang, Omar Chowdhury, Aniket Kate, and Ninghui Li. 2018. Why Johnny Can’t Make Money With His Contents: Pitfalls of Designing and Implementing Content Delivery Apps. In 2018 Annual Computer Security Applications Conference (ACSAC ’18), December 3–7, 2018, San Juan, PR, USA. ACM, New York, NY, USA, Article 4, 16 pages. https://doi.org/10.1145/3274694.3274752

## 1. Introduction
The ubiquity of mobile devices has driven content owners, such as publishing houses and record labels, to engage with online business ecosystems to reach a larger audience. This trend has led to the development of mobile apps by content distributors, who tailor these apps to fit the content and business models of content owners. Ensuring that end users cannot easily access raw, high-quality content, even offline, is crucial for maintaining a business edge.

The goal of this paper is to systematically identify and educate developers about design weaknesses in content delivery apps that can grant unauthorized and unrestricted access to content. While effective content protection may seem to boil down to Digital Rights Management (DRM) enforcement, there are subtle distinctions. DRM focuses on regulating user access after content and policies are securely delivered, whereas content protection also involves ensuring reliable payment and secure content delivery.

We demonstrate that adversaries can often modify enforcement policies during bootstrapping, leading to unfettered access to content. Challenges are further compounded by the need to support a wide range of legacy devices and operating systems, making it difficult to develop widely deployable apps that use TEE for DRM needs.

## 2. Scope
### 2.1 Attack Surfaces
We consider six phases in the normal operation of a content distribution app:
1. **Bootstrapping**: Authentication, obtaining content lists and prices, and receiving authorization tokens.
2. **Authorization Token Storage**: Storing tokens on the device for offline playback.
3. **Content Transmission and Storage**: Receiving and storing content from the server.
4. **Playback Preparation**: Performing control checks and loading secret keys into memory.
5. **Content Decryption**: Decrypting content in memory for playback.
6. **Analog Loophole**: Recapturing analog signals during playback.

### 2.2 Platform and Test Setup
Our study focuses on the Android platform due to its popularity and the presence of legacy devices. We use rooted Android phones running versions 4.4 (Kitkat) and 5.0 (Lollipop) to simulate local adversaries and a Linux setup with MITMProxy to emulate network adversaries. This allows us to demonstrate the risks associated with supporting legacy devices.

### 2.3 Threat Model
We consider two categories of adversaries:
- **Network Adversaries**: Capable of passive eavesdropping and potentially intercepting and modifying network traffic.
- **Local Adversaries**: Capable of accessing internal states and tampering with the execution environment.

## 3. Contributions
1. **Identification of Attack Surfaces and Adversaries**: We identify attack surfaces and practical adversaries that content distribution app vendors should consider to develop effective content protection mechanisms.
2. **Systematic Evaluation**: We evaluate 141 Android content distribution apps, uncovering that developers often make unjustified trust assumptions, enabling adversaries to bypass protection without reverse engineering.
3. **Dissection and Classification of Weaknesses**: We dissect and classify the weaknesses using Common Weakness Enumeration (CWE) to help future developers avoid similar pitfalls. Our findings have been responsibly shared with content distributors, and we discuss possible countermeasures and their trade-offs.

## 4. Findings
Our evaluation reveals that many apps are not only falling short in terms of content protection but also contain weaknesses that allow remote exploits, threatening users' security and privacy. Notable examples include purchase bypass attacks against Forbes Magazine and Mother Earth News, and policy rewriting attacks against Bloomberg Businessweek+.

Even the most robust app, Amazon Music, was found to encrypt its entire collection of 40 million songs under a single key, making it vulnerable to key extraction attacks. Our responsible disclosure process and ethical considerations ensure that our findings are shared with stakeholders in a manner that minimizes potential harm.

## 5. Conclusion
This paper highlights the critical importance of robust content protection in mobile apps. By identifying and addressing the common pitfalls, developers can enhance the security and integrity of their content delivery apps, ensuring that content owners can effectively monetize their digital assets.