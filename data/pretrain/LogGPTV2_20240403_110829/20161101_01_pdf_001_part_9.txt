 RETURNS trigger
 LANGUAGE internal
 STRICT
 AS $function$suppress_redundant_updates_trigger$function$
 这个函数有什么用呢? 没有数据更新的更新操作不会产生新版本.
 test=# create table test (id int);
 test=# insert into test values (1),(2),(3);
 test=# select ctid,* from test where id=1;
 ctid | id
 (0,1) | 1
Functions and Operators
 触发器函数
 test=# update test set id=1 where id=1;
 test=# select ctid,* from test where id=1;
 ctid | id
 (0,4) | 1
 CREATE TRIGGER z_min_update
 BEFORE UPDATE ON test
 FOR EACH ROW EXECUTE PROCEDURE suppress_redundant_updates_trigger();
 test=# update test set id=1 where id=1;
 UPDATE 0
 test=# select ctid,* from test where id=1;
 ctid | id
 (0,4) | 1
Type Conversion
 The PostgreSQL scanner/parser divides lexical elements into five fundamental categories:
integers, non-integer numbers, strings, identifiers, and key words.
 强类型指定可以提高性能.
 以下4种SQL中的操作需要接受指定类型的数据
 Function
 PostgreSQL中不是根据函数名来区分函数, 而是函数名和函数的参数类型. 同一个
SCHEMA中允许重名但参数个数不同或类型不完全相同的多个函数同时存在.
 Operator
 操作符在schema中也允许重名, 只要操作符的操作数不同
 Value Storage
 INSERT, UPDATE
 UNION, CASE, ARRAY...
 合并(UNION)或选择性(CASE)多值输出时必须确保每列的输出类型一致, ARRAY也
必须保证元素类型一致.
 类型转换
 CAST(value AS target_type)
 value::target_type
Index
 Planner Methods
 #enable_bitmapscan = on
 #enable_hashagg = on
 #enable_hashjoin = on
 #enable_indexscan = on
 #enable_material = on
 #enable_mergejoin = on
 #enable_nestloop = on
 #enable_seqscan = on
 #enable_sort = on
 #enable_tidscan = on
 索引主要能干什么?
 加速TUPLE定位
 主键, 唯一约束
 排序
Index
 Index Type OR Access Method
 b-tree
 hash
 gist
 gin
 spgist (PostgreSQL 9.2)
 B-tree
 Operators
 >, =, , >>, , |>>, @>, , =, &&
 建立索引的语法
 注意, method, collation, opclass
 建立operator class的语法, 通过系统表查询当前支持哪些operator class已经operator class中
定义的operator和function, 是用于检索还是排序.
 pg_am, pg_amop, pg_amproc, pg_operator, pg_opclass, pg_opfamily
Index
 用索引和操作符快速检索与某point邻近的点举例
 如果在location上建了一个GiST索引
 那么可以通过这个索引快速的检索到离point '(101,456)'点最近的10个点的记录 如下:
 SELECT * FROM places ORDER BY location  point '(101,456)' LIMIT 10;
Index
 是否使用索引和什么有关?  遵循完CBO的选择, 还需要符合当前配置
的Planner 配置.
 首先是前面提到的Access Method, 然后是
使用的operator class, 以及opc中定义的  #enable_bitmapscan = on
operator或function.
 #enable_hashagg = on
 这些都满足后, 还要遵循CBO的选择.  #enable_hashjoin = on
 #seq_page_cost = 1.0  #enable_indexscan = on
 #random_page_cost = 4.0  #enable_material = on
 #cpu_tuple_cost = 0.01  #enable_mergejoin = on
 #cpu_index_tuple_cost = 0.005  #enable_nestloop = on
 #cpu_operator_cost = 0.0025  #enable_seqscan = on
 #effective_cache_size = 128MB  #enable_sort = on
 #enable_tidscan = on
Index
 Multicolumn Index
 only the B-tree, GiST and GIN index types support multicolumn indexes.
 Up to 32 columns can be specified. (This limit can be altered when building
PostgreSQL; see the file pg_config_manual.h.)
 B-tree
 Query conditions that involve any subset of the index's columns, but the index is
most efficient when there are constraints on the leading (leftmost) columns.
 GiST
 Query conditions that involve any subset of the index's columns. Conditions on
additional columns restrict the entries returned by the index, but the condition on
the first column is the most important one for determining how much of the index
needs to be scanned. A GiST index will be relatively ineffective if its first column
has only a few distinct values, even if there are many distinct values in additional
columns.
 GIN
 A multicolumn GIN index can be used with query conditions that involve any
subset of the index's columns. Unlike B-tree or GiST, index search effectiveness is
the same regardless of which index column(s) the query conditions use.
Index
 Multicolumn Index
 多列索引, 使用任何列作为条件, 只要条件中的操作符或函数能满足opclass的匹配,
都可以使用索引, 索引被扫描的部分还是全部基本取决于条件中是否有索引的第一
列作为条件之一.
 例子
 postgres=# create table test (c1 int,c2 int);
 postgres=# insert into test select 1,generate_series(1,100000);
 postgres=# create index idx_test_1 on test(c1,c2); 注意过滤条件
不是驱动列.
 postgres=# analyze test;
看似不能走索引
 postgres=# explain select * from test where c2=100;
 Seq Scan on test (cost=0.00..1693.00 rows=1 width=8)
 Filter: (c2 = 100)
 postgres=# set enable_seqscan=off;
 postgres=# explain analyze select * from test where c2=100;
 Index Scan using idx_test_1 on test (cost=0.00..1858.27 rows=1 width=8) (actual
time=0.104..7.045 rows=1 loops=1)
 Index Cond: (c2 = 100)
Index
 使用索引来排序可以减少CPU对排序的开销, 特别是仅需返回少量行时. 使用索引效率会
大大提高.
 例子
 postgres=# create table test (id int,info text);
 postgres=# insert into test select generate_series(1,100000),'digoal'||generate_series(1,100000);
 postgres=# explain analyze select * from test order by id limit 10;
 Limit (cost=3701.96..3701.99 rows=10 width=36) (actual time=37.372..37.375 rows=10 loops=1)
 -> Sort (cost=3701.96..3951.96 rows=100000 width=36) (actual time=37.370..37.371 rows=10 loops=1)
 Sort Key: id
 Sort Method: top-N heapsort Memory: 25kB
 -> Seq Scan on test (cost=0.00..1541.00 rows=100000 width=36) (actual time=0.016..17.711
rows=100000 loops=1)
 Total runtime: 37.405 ms
 postgres=# create index idx_test_id on test(id);
 postgres=# explain analyze select * from test order by id limit 10;
 Limit (cost=0.00..0.48 rows=10 width=36) (actual time=0.052..0.058 rows=10 loops=1)
 -> Index Scan using idx_test_id on test (cost=0.00..4768.26 rows=100000 width=36) (actual
time=0.050..0.053 rows=10 loops=1)
 Total runtime: 0.085 ms
Index
 加速reference 表的reference colum的更新和删除操作
 postgres=# create table t1 (id int primary key,info text);
 postgres=# insert into t1 select generate_series(1,100000),'digoal'||generate_series(1,100000);
 postgres=# create table t2 (id int references t1(id) on update cascade,info text);
 postgres=# insert into t2 select generate_series(1,100000),'digoal'||generate_series(1,100000);
 postgres=# explain analyze update t1 set id=100001 where id=100000;
 Update on t1 (cost=4.27..8.28 rows=1 width=17) (actual time=0.066..0.066 rows=0 loops=1)
 -> Bitmap Heap Scan on t1 (cost=4.27..8.28 rows=1 width=17) (actual time=0.021..0.022
rows=1 loops=1)
 Recheck Cond: (id = 100000)
 -> Bitmap Index Scan on t1_pkey (cost=0.00..4.27 rows=1 width=0) (actual
time=0.014..0.014 rows=1 loops=1)
 Index Cond: (id = 100000)
 Trigger for constraint t2_id_fkey on t1: time=21.082 calls=1
 Trigger for constraint t2_id_fkey on t2: time=0.094 calls=1
 Total runtime: 21.290 ms
Index
 postgres=# create index idx_t2_id on t2(Id);
 postgres=# explain analyze update t1 set id=100002 where id=100001;
 Update on t1 (cost=4.27..8.28 rows=1 width=17) (actual time=0.116..0.116 rows=0 loops=1)
 -> Bitmap Heap Scan on t1 (cost=4.27..8.28 rows=1 width=17) (actual time=0.031..0.032
rows=1 loops=1)
 Recheck Cond: (id = 100001)
 -> Bitmap Index Scan on t1_pkey (cost=0.00..4.27 rows=1 width=0) (actual
time=0.020..0.020 rows=1 loops=1)
 Index Cond: (id = 100001)
 Trigger for constraint t2_id_fkey on t1: time=0.516 calls=1
 Trigger for constraint t2_id_fkey on t2: time=0.058 calls=1
 Total runtime: 0.739 ms
Index
 唯一约束和主键字段创建唯一索引
 postgres=# create table test (id int primary key,info text unique);
 NOTICE: CREATE TABLE / PRIMARY KEY will create implicit index "test_pkey" for table
"test"
 NOTICE: CREATE TABLE / UNIQUE will create implicit index "test_info_key" for table
"test"
 postgres=# \d test
 Table "public.test"
 Column | Type | Modifiers
 --------+---------+-----------
 id | integer | not null
 info | text |
 Indexes:
 "test_pkey" PRIMARY KEY, btree (id)
 "test_info_key" UNIQUE CONSTRAINT, btree (info)
Index
 Combining Multiple Indexes
 src/backend/executor
 例如
Bitmap Index filter Bitmap,
Scan TupleAddr(s)
BitmapAn Bitmap
d | Or Heap Scan
Bitmap Index filter Bitmap,
Scan TupleAddr(s)
。。。。。。 。。。。。。 。。。。。。
Index
 Combining Multiple Indexes
 one index combining
 postgres=# create table test (id int primary key,info text unique);
 postgres=# insert into test select
generate_series(1,100000),'digoal'||generate_series(1,100000);
 postgres=# explain analyze select * from test where id=1 or id=1000;
 Bitmap Heap Scan on test (cost=8.54..16.20 rows=2 width=36) (actual
time=0.034..0.036 rows=2 loops=1)
 Recheck Cond: ((id = 1) OR (id = 1000))
 -> BitmapOr (cost=8.54..8.54 rows=2 width=0) (actual time=0.023..0.023
rows=0 loops=1)
 -> Bitmap Index Scan on test_pkey (cost=0.00..4.27 rows=1 width=0)
(actual time=0.012..0.012 rows=1 loops=1)
 Index Cond: (id = 1)
 -> Bitmap Index Scan on test_pkey (cost=0.00..4.27 rows=1 width=0)
(actual time=0.009..0.009 rows=1 loops=1)
 Index Cond: (id = 1000)
Index
 multiple index combining
 postgres=# explain analyze select * from test where id=1 or info='digoal1000';
 Bitmap Heap Scan on test (cost=8.55..16.22 rows=2 width=15) (actual
time=0.038..0.040 rows=2 loops=1)
 Recheck Cond: ((id = 1) OR (info = 'digoal1000'::text))
 -> BitmapOr (cost=8.55..8.55 rows=2 width=0) (actual time=0.029..0.029
rows=0 loops=1)
 -> Bitmap Index Scan on test_pkey (cost=0.00..4.27 rows=1 width=0)
(actual time=0.012..0.012 rows=1 loops=1)
 Index Cond: (id = 1)
 -> Bitmap Index Scan on test_info_key (cost=0.00..4.28 rows=1 width=0)
(actual time=0.017..0.017 rows=1 loops=1)
 Index Cond: (info = 'digoal1000'::text)
 Total runtime: 0.081 ms
Index
 collection
 例子
 CREATE TABLE test1c (
 id integer,
 content varchar COLLATE "x"
 );
 CREATE INDEX test1c_content_index ON test1c (content);
 SELECT * FROM test1c WHERE content > constant;
 -- 以下SQL不能使用索引test1c_content_index
 SELECT * FROM test1c WHERE content > constant COLLATE "y";
 -- 需建立与y COLLATE对应的索引, 以上这条SQL才会走索引.
 CREATE INDEX test1c_content_y_index ON test1c (content COLLATE "y");
Index
 partial index
 例子
 -- 部分约束
 --去除common值 id=1, 这个值有10W条, 走索引根本不合适. partial 索引很好的避免了此
类情况.
 postgres=# create table test(id int,info text);
 postgres=# insert into test select 1,'digoal'||generate_series(1,100000);
 postgres=# insert into test select
generate_series(1,1000),'digoal'||generate_series(1,1000);
 postgres=# create index idx_test_1 on test(id) where id<>1;
 postgres=# explain select * from test where id=1;