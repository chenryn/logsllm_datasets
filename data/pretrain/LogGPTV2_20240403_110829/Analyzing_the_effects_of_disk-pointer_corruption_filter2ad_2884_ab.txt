### NTFS Disk Pointers

| Pointer | Description |
|---------|-------------|
| MFTVCN0 | Master File Table (MFT) Volume Cluster Number 0 |
| MFTmirror | MFT Mirror |
| MFTclusters | MFT Clusters (pointing to itself) |
| MFTbitmap | MFT Bitmap |
| Logfile | Log File |
| Rootdirectory | Root Directory |
| Securitydescriptor | Security Descriptor |
| Rootdirectoryindexbuffers | Root Directory Index Buffers |
| $Securesecuritydescriptors | $Secure Security Descriptors |
| Indexofsecuritydescriptorshash | Index of Security Descriptors' Hash |
| Indexofsecuritydescriptorsids | Index of Security Descriptors' IDs |
| Upcasetable | Upcase Table |
| Adirectorysindexbuffer | A Directory's Index Buffer |
| Afilesdatacluster | A File's Data Cluster |

**Table 2. NTFS Disk Pointers.** This table presents the different on-disk pointers used by NTFS.

### Experimental Setup

For our experiments, we use NTFS and Linux 2.6.12 for ext3. Both file systems are run on top of VMware Workstation for ease of experimentation. The experiments utilize a separate 2GB IDE virtual disk. We believe that using a VMware virtual disk does not affect the results, as the corrupter layer is between the file system and the virtual disk, allowing us to observe all disk requests and responses without detecting any anomalies.

### NTFS

Although TAPC (Targeted Attack on Pointer Corruption) can be applied to any file system, the specific pointers to be corrupted and the interesting corruption values depend on the file system under test. Here, we describe how TAPC is applied to NTFS. Details for ext3 are not provided due to space constraints.

#### NTFS Data Structures

NTFS, the Windows NT File System, is the standard file system for Windows NT, 2000, XP, and Vista. It is a journaling file system that ensures the integrity of its metadata structures in case of a crash. All user data and metadata structures in an NTFS volume are contained in files, allowing NTFS to flexibly allocate disk space for its metadata. Table 1 defines important NTFS terms and data structures used in our descriptions and results. For example, a cluster is the NTFS term for a disk block.

#### NTFS Pointer Corruption

We corrupt 14 out of the 15 different pointer types that NTFS uses on disk. Table 2 summarizes these pointers. Each pointer is given a unique name based on its Targetoriginal, with name conflicts resolved by prefixing names with their container.

NTFS replicates important data structures like Boot and MFT VCN 0. Thus, pointers such as Boot-MFTO, Boot-MFTM, MFTO-MFT, MFTBitmap, MFTO-MFTM, and LogFile are replicated. Security descriptors are also replicated, and their indexes can be rebuilt, providing some redundancy for the pointers SDS, SDH, and SII.

To exercise each pointer, we run a specialized workload, as indicated in Table 3. Most workloads involve modifications to Targetoriginal, potentially creating the worst-case scenario if the corruption is not detected. The pointers are corrupted with 27 different types of values, including clusters of various NTFS data types, special-purpose clusters, unallocated clusters, and out-of-range values. Table 4 lists the different types of values used for Targetcorrupt. In most cases, the data structure used as Targetcorrupt is at a specific location, while for FileData, we create a file and use the location of its data block as the numerical value for corruption. Thus, we perform 360 experiments on NTFS, corrupting 14 different pointers with 27 different values.

### Results

This section discusses the results of our experiments. First, we describe the terminology, then our visual representation of the results. We then discuss NTFS behavior as observed by the experimenter, focusing on how NTFS handles pointer corruption. Next, we discuss the user-visible results of NTFS pointer corruption, which is important for end users concerned about data and system reliability. Finally, we present results for ext3. Our results are organized into observations, lessons for corruption-handling techniques, and potential design pitfalls.

#### Terminology for System Behavior

- **Detection:** The file system identifies that either the pointer or the disk block pointed to is corrupt.
- **Recovery:** The file system regenerates the lost data due to pointer corruption using redundant information, continuing execution without errors.
- **Report:** The file system informs the application or user of an error.
- **Retry:** The file system repeats the set of disk accesses needed for the mount operation.
- **Repair:** The file system modifies corrupt data structures to continue execution, though this may not lead to error-free execution.

Detection is essential for the rest of the actions to occur. Recovery is the ideal action the file system can perform. If recovery is not possible, repair is an alternative approach for continuing execution. If a file operation fails due to corruption, the file system is expected to report an error.

#### Visualization of Results

Figure 1 provides a visualization of the results. Each row in the figures represents the results of corrupting one pointer (e.g., Boot-MFTO). Each row is divided into 27 columns, each corresponding to different Targetcorrupt values used to corrupt the pointer (e.g., LogData). Each cell is marked with a symbol representing our observations when the pointer for its row is corrupted with the column value. A dot before the pointer name indicates that some form of redundancy exists for the pointer or for Targetoriginal.

#### NTFS Behavior

We discuss the behavior of NTFS when each of its pointers are corrupted. The detailed results are presented in Figure 1a and Table 5, summarized in Table 6. This subsection distills the results into higher-level observations on system behavior and lessons to be learned. The goal is to analyze whether NTFS effectively uses its type information and redundancy, and to understand why NTFS is or is not able to detect and recover from pointer corruption.

Out of 360 corruption experiments, NTFS detects corruption in 238 cases (66%) and recovers in only 51 cases (14%). Despite the availability of redundant information for recovery in most cases, NTFS either simply reports an error to the user or retries the mount operation. Additionally, despite detecting the corruption, NTFS causes further corruption in 42 cases (12%).

##### Detection

From our experiments, we find that NTFS uses type checking and sanity checking to detect pointer corruption:

- **Type Checking:** Verifies that a disk cluster conforms to the requirements for a data type. Type information for a cluster is typically encoded as a "magic" number and stored in the cluster. To perform type checking, the cluster pointed to should be read.
- **Sanity Checking:** Verifies that certain values in data structures follow constraints. A pointer can be compared with well-known values, such as locations of metadata like the boot sector or disk partition size, to ensure the pointer is not corrupt. Corruption can be detected even before the cluster pointed to is read.

**Observation 1: NTFS primarily detects corruption errors through type checking.**

We observe that NTFS detects corruption errors after reading Targetcorrupt for many pointers, including Boot-MFTO, MFTO-MFT, LogFile, RootlndxBuf, SII, and DirlndxBuf. An examination of the corresponding data structures shows that they contain "magic" numbers ("FILE" for MFT clusters, "RSTR" for log restart area, "INDX" for index buffers) that identify the clusters as a certain data type.

### Conclusion

Our experiments reveal that NTFS has a robust detection mechanism but struggles with recovery, often resorting to reporting errors or retrying operations. Further improvements in recovery mechanisms could enhance the overall reliability and user experience of NTFS.