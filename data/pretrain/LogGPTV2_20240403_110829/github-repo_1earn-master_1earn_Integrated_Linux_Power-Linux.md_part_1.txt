# Power-Linux
- `Linux 下各种常见服务的搭建/配置指南`
- `大部分环境在 Centos7,少部分 Ubuntu`
- `主要以安装搭建为主,近一步的配置请参考官方教程`
---
## 大纲
* **[🥩 常见工具](#常见工具)**
  * [Lvm](#lvm)
  * [Net](#net)
  * [RAID](#raid)
  * [Vim](#vim)
  * [Tmux](#tmux)
* **[🍜 网络服务](#网络服务)**
  * [AdguardTeam](#adguardteam)
  * [butterfly](#butterfly)
  * [Cacti](#cacti)
  * [Chrony](#chrony)
  * [clash](#clash)
  * [cloud-torrent](#cloud-torrent)
  * [code-server](#code-server)
  * [DHCP](#dhcp)
  * [DNS](#dns)
  * [focalboard](#focalboard)
  * [frp](#frp)
  * [Kicktart](#kicktart)
  * [nps](#nps)
  * [OpenVPN](#openvpn)
  * [PowerDNS](#powerdns)
    * [PowerDNS-Admin](#powerdns-admin)
  * [proxychains-ng](#proxychains-ng)
  * [ss5](#ss5)
  * [SSH](#ssh)
  * [ttyd](#ttyd)
  * [vnc4server](#vnc4server)
* **[🍦 web服务-中间件](#web服务-中间件)**
  * [ActiveMQ](#activemq)
  * [Apache_httpd](#apache_httpd)
  * [Caddy](#caddy)
  * [npm & Node](#npmnode)
  * [Nexus](#nexus)
  * [Nginx](#nginx)
  * [php-cli](#php-cli)
  * [phpMyAdmin](#phpmyadmin)
  * [RabbitMQ](#rabbitmq)
  * [searx](#searx)
  * [Tomcat](#tomcat)
  * [Wordpress](#wordpress)
  * [Mijisou](#mijisou)
* **[🍉 数据库](#数据库)**
  * [Relational](#relational)
    * [Oracle](#oracle)
    * [Mariadb](#mariadb)
    * [MySQL](#mysql)
    * [Postgresql](#postgresql)
  * [Document](#document)
    * [MongoDB](#mongodb)
  * [Key-value](#key-value)
    * [Redis](#redis)
    * [Memcached](#Memcached)
  * [图形](#图形)
    * [Neo4j](#neo4j)
* **[🍣 文件服务](#文件服务)**
  * [filebrowser](#filebrowser)
  * [NFS](#nfs)
  * [Samba](#samba)
  * [sharry](#sharry)
  * [Vsftp](#vsftp)
* **[🍗 编程语言](#编程语言)**
  * [C](#c)
  * [Go](#go)
  * [JDK](#jdk)
  * [Perl](#perl)
  * [PHP](#php)
  * [Python3](#python3)
    * [pip](#pip)
    * [jupyterlab](#jupyterlab)
  * [Ruby](#ruby)
  * [Rust](#rust)
* **[🍞 系统监管](#系统监管)**
  * [BaoTa](#baota)
  * [Jenkins](#jenkins)
  * [JumpServer](#jumpserver)
  * [Loganalyzer](#loganalyzer)
  * [Supervisor](#supervisor)
  * [Webmin](#webmin)
  * [Zabbix](#zabbix)
* **[🌭 容器 & 虚拟化](#容器&虚拟化)**
  * [Docker](#docker)
    * [Docker-Compose](#docker-compose)
    * [Docker-Portainer](#docker-portainer)
  * [Kubernetes](#kubernetes)
    * [kubectl](#kubectl)
  * [QEMU](#qemu)
* **[🥕 分布式](#分布式)**
  * [ZooKeeper](#zookeeper)
* **[🍯 安全服务](#安全服务)**
  * [ClamAV](#clamav)
  * [Fail2Ban](#fail2ban)
  * [OpenLDAP](#openldap)
    * [PhpLdapAdmin](#phpldapadmin)
  * [Snort](#snort)
  * [Suricata](#suricata)
  * [tripwire](#tripwire)
* **[🍷 设施配置](#设施配置)**
  * [f8x](#f8x)
  * [Terraform](#terraform)
* **[🍥 各种依赖和报错](#各种依赖和报错)**
  * [LuaJIT](#luajit)
---
## 常见工具
### Lvm
> LVM 是 Logical Volume Manager 的缩写，中文一般翻译为 "逻辑卷管理"，它是 Linux 下对磁盘分区进行管理的一种机制。LVM 是建立在磁盘分区和文件系统之间的一个逻辑层，系统管理员可以利用 LVM 在不重新对磁盘分区的情况下动态的调整分区的大小。如果系统新增了一块硬盘，通过 LVM 就可以将新增的硬盘空间直接扩展到原来的磁盘分区上。
```bash
fdisk -l		        # 查看磁盘情况
fdisk /dev/sdb	    # 创建系统分区
	n
	p
	1
	后面都是默认,直接回车
	t	  # 转换分区格式
	8e
	w   # 写入分区表
```
**卷组**
创建一个名为 datastore 的卷组,卷组的 PE 尺寸为 16MB;
```bash
pvcreate /dev/sdb1	                  # 初始化物理卷
vgcreate -s 16M datastore /dev/sdb1   # 创建物理卷
```
**逻辑卷**
逻辑卷的名称为 database 所属卷组为 datastore,该逻辑卷由 50 个 PE 组成;
```bash
lvcreate -l 50 -n database datastore
```
逻辑卷的名称为 database 所属卷组为 datastore,该逻辑卷大小为 8GB;
```bash
lvcreate -L 8G -n database datastore
lvdisplay
```
**格式化**
将新建的逻辑卷格式化为 XFS 文件系统,要求在系统启动时能够自动挂在到 /mnt/database 目录.
```bash
mkfs.xfs /dev/datastore/database
mkdir /mnt/database
```
添加挂载的配置
```diff
vim /etc/fstab
+ /dev/datastore/database /mnt/database/ xfs defaults 0 0
```
重启验证
```bash
shutdown -r now
mount | grep '^/dev'
```
**扩容**
将 database 逻辑卷扩容至 15GB 空间大小,以满足业务需求.
```bash
lvextend -L 15G /dev/datastore/database
lvs	    # 确认有足够空间
resize2fs /dev/datastore/database
lvdisplay
```
---
### Net
**centos 配置网卡**
```vim
vim /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE="enoXXXXXX"
BOOTPROTO=static  # 使用静态 IP,而不是由 DHCP 分配 IP
IPADDR=172.16.102.61
PREFIX=24
ONBOOT=yes
GATEWAY=172.16.102.254
HOSTNAME=dns1.abc.com
DNS1=223.5.5.5
```
**修改主机名**
```diff
vim /etc/hosts
+ 127.0.0.1  test localhost
# 修改 localhost.localdomain 为 test,shutdown -r now 重启使修改生效
```
**修改 DNS**
```diff
vim /etc/resolv.conf
- search localdomain
+ nameserver 8.8.8.8
```
```bash
service network restart
```
---
### RAID
**安装**
```bash
yum remove mdadm # 建议先把原本的卸掉重装
yum install -y mdadm
```
**分区**
```bash
fdisk /dev/sdb
n 创建
p 主分区
接下来一路回车选默认值
w 写入
fdisk /dev/sdc
n 创建
p 主分区
接下来一路回车选默认值
w 写入
```
**创建阵列**
- RAID1
	```bash
  mdadm -Cv /dev/md0 -a yes -l1 -n2 /dev/sd[b,c]1
  - -Cv: 创建一个阵列并打印出详细信息.
	- /dev/md0: 阵列名称.
	- -a : 同意创建设备,如不加此参数时必须先使用 mknod 命令来创建一个 RAID 设备,不过推荐使用 -a yes 参数一次性创建;
	- -l1 (l as in "level"): 指定阵列类型为 RAID-1 .
	- -n2: 指定我们将两个分区加入到阵列中去,分别为/dev/sdb1 和 /dev/sdc1
  ```
- RAID5
	```bash
  mdadm -Cv /dev/md0 -a yes -l5 -n3 /dev/sd[b,c,d]1
	cat /proc/mdstat    # 查看进度
	mdadm -D /dev/md0   # 获取阵列信息
  ```
**格式化为 xfs**
```bash
mkfs.xfs /dev/md0
```
**以 UUID 的形式开机自动挂载**
```bash
mkdir /data/ftp_data
blkid	/dev/md0    # 查 UUID 值
```
```diff
vim /etc/fstab
+ UUID=XXXXXXXXXXXXXXXXXXXXXXXXXX    /data/ftp_data  xfs defaults 0 0
```
```bash
shutdown -r now   # 重启验证
mount | grep '^/dev'
```
---
### Vim
> VIM 是 Linux 系统上一款文本编辑器，它是操作文本的一款利器。
**常用操作**
```bash
Normal 模式下 i 进入 insert 模式
:wq                       # 存盘+退出
dd                        # 删除当前行,并存入剪切板
p                         # 粘贴
:q!                       # 强制退出
:wq!                      # 强制保存退出
:w !sudo tee %            # 无 root 权限,保存编辑的文件
:saveas [path/to/file]    # 另存为
按下 / 即可进入查找模式,输入要查找的字符串并按下回车. Vim 会跳转到第一个匹配.按下 n 查找下一个,按下 N 查找上一个.
:%s/foo/bar               # 代表替换 foo 为 bar
:%!xxd                    # 十六进制编辑模式, :%!xxd -r 切回去
insert 模式按 ESC 键,返回 Normal 模式
```
**常用配置**
`vim /etc/vim/vimrc` 或 `vim /etc/vimrc` 最后面直接添加你想添加的配置,下面是一些常用的 (不建议直接复制这个或者网上的,要理解每个的含义及有什么用,根据自己需要来调整)
```bash
set number                # 显示行号
set nobackup              # 覆盖文件时不备份
set cursorline            # 突出显示当前行
set ruler                 # 在右下角显示光标位置的状态行
set shiftwidth=4          # 设定 > 命令移动时的宽度为 4
set softtabstop=4         # 使得按退格键时可以一次删掉 4 个空格
set tabstop=4             # 设定 tab 长度为 4(可以改)
set smartindent           # 开启新行时使用智能自动缩进
set ignorecase smartcase  # 搜索时忽略大小写,但在有一个或以上大写字母时仍 保持对大小写敏感
下面这个在代码多的时候会比较好
#set showmatch # 插入括号时,短暂地跳转到匹配的对应括号
#set matchtime=2 # 短暂跳转到匹配括号的时间
```
**使用 vim 对比文件**
```bash
vimdiff  FILE_LEFT  FILE_RIGHT
```
**解决 ssh 后 vim 中不能使用小键盘的问题**
- xshell
  更改的方法: 在终端设置中选择终端类型为 linux
- ubuntu
  ```bash
  apt-get remove vim-common
  apt-get install -y vim
  ```
**[SpaceVim](https://spacevim.org/cn/)** - 模块化的 Vim IDE
**[how-to-exit-vim](https://github.com/hakluke/how-to-exit-vim)** - 退出 vim 的多种方式
---
### Tmux
- https://github.com/tmux/tmux
**安装**
```bash
# Ubuntu 或 Debian
apt-get install -y tmux
# CentOS 或 Fedora
yum install -y tmux
```
**使用**
```bash
tmux  # 进入了 Tmux 窗口,底部有一个状态栏。状态栏的左侧是窗口信息（编号和名称），右侧是系统信息
# Ctrl+d 同下
exit  # 退出
tmux info                     # 列出当前所有 Tmux 会话的信息
tmux source-file ~/.tmux.conf # 重新加载当前的 Tmux 配置
```
**帮助信息**
```bash
Ctrl+b
? # 显示帮助信息
Ctrl+b
d # "最小化"tmux窗口
tmux list-commands            # 列出所有 Tmux 命令及其参数
tmux list-keys                # 列出所有快捷键，及其对应的 Tmux 命令
```
**新建会话**
```bash
tmux new -s test
tmux new-session -s 'test'
tmux new-session -s 'test' -d # 使用 -s 开关指定会话的名字为 test，使用 -d 开关使得创建后立即与其脱离。
```
**分离会话**
```bash
Ctrl+b
d                       # 将当前会话与窗口分离
tmux detach             # 将当前会话与窗口分离
```
**接入会话**
```bash
tmux attach -t 0        # 使用会话编号
tmux attach -t test     # 使用会话名称
```
**列出所有会话**
```bash
tmux ls
Ctrl+b
s
```
**杀死会话**
```bash
tmux kill-session -t 0  # 使用会话编号
tmux kill-session -t    # 使用会话名称
```
**切换会话**