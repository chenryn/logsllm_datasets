more detection features such as content inspection and
host level analysis, the detection system may make eva-
sion more difﬁcult.
Finally, we note that if botnets are used to perform
multiple tasks (in A-plane), we may still detect them
even when they can evade C-plane monitoring and anal-
ysis. By using the scoring algorithm described in Section
2.7, we can perform cross clustering analysis among
multiple activity clusters (in A-plane) to accumulate the
suspicious score needed to claim the existence of bot-
nets. Thus, we may even not require C-plane analysis if
there is already a strong cross-cluster correlation among
different types of malicious activities in A-plane. For
example, if the same set of hosts involve several types
of A-plane clusters (e.g., they send spams, scan others,
and/or download the same binaries), they can be reported
as botnets because those behaviors, by themselves, are
highly suspicious and most likely indicating botnets be-
haviors [19, 20].
4.2 Evading A-plane Monitoring and Clustering
Malicious activities of botnets are unlikely or relatively
hard to change as long as the botmaster wants the botnets
to perform “useful” tasks. However, the botmaster can
attempt to evade BotMiner’s A-plane monitoring and
clustering in several ways.
Botnets may perform very stealthy malicious activities
in order to evade the detection of A-plane monitors. For
example, they can scan very slowly (e.g., send one scan
per hour), send spam very slowly (e.g., send one spam
per day). This will evade our monitor sensors. However,
this also puts a limit on the utility of bots.
In addition, as discussed above, if the botmaster com-
mands each bot randomly and individually to perform
different task, the bots are not different from previous
generations of isolated, individual malware instances.
This is unlikely the way a botnet is used in practice. A
more advanced evasion is to differentiate the bots and
avoid commanding bots in the same monitored network
the same way. This will cause additional effort and
inconvenience for the botmaster. To defeat such an eva-
sion, we can deploy distributed monitors on the Internet
to cover a larger monitored space.
Note, if the botmaster takes the extreme action of
randomizing/individualizing both the C&C communica-
tions and attack activities of each bots, then these bots
are probably not part of a botnet according to our spe-
ciﬁc deﬁnition because the bots are not performing sim-
ilar/coordinated commanded activities. Orthogonal to
the horizontal correlation approaches such as BotMiner
to detect a botnet, we can always use complementary
systems like BotHunter [19] that examine the behavior
history of distinct host for a dialog or vertical correlation
based approach to detect individual bots.
4.3 Evading Cross-plane Analysis
A botmaster can command the bots to perform an ex-
tremely delayed task (e.g., delayed for days after re-
ceiving commands). Thus, the malicious activities and
C&C communications are in different days.
If only
using one day’s data, we may not be able to yield cross-
plane clusters. As a solution, we may use multiple-
day data and cross check back several days. Although
this has the hope of capturing these botnets, it may also
suffer from generating more false positives. Clearly,
there is a trade-off. The botmaster also faces the trade-
off because a very slow C&C essentially impedes the
efﬁciency in controlling/coordinating the bot army. Also,
a bot infected machine may be disconnected from the
Internet or be powered off by the users during the delay
and become unavailable to the botmaster.
In summary, while it is possible that a botmaster can
ﬁnd a way to exploit the limitations of BotMiner, the
convenience or the efﬁciency of botnet C&C and the
utility of the botnet also suffer. Thus, we believe that
our protocol- and structure-independent detection frame-
work represents a signiﬁcant advance in botnet detec-
tion.
5 Related Work
To collect and analyze bots, researchers widely utilize
honeypot techniques [4, 16, 32]. Freiling et al. [16] used
USENIX Association  
17th USENIX Security Symposium 
151
honeypots to study the problem of botnets. Nepenthes [4]
is a special honeypot tool for automatic malware sam-
ple collection. Rajab et al. [32] provided an in-depth
measurement study of the current botnet activities by
conducting a multi-faceted approach to collect bots and
track botnets. Cooke et al. [10] conducted several basic
studies of botnet dynamics. In [13], Dagon et al. pro-
posed to use DNS sinkholing technique for botnet study
and pointed out the global diurnal behavior of botnets.
Barford and Yegneswaran [6] provided a detailed study
on the code base of several common bot families. Collins
et al. [9] presented their observation of a relationship
between botnets and scanning/spamming activities.
Several recent papers proposed different approaches to
detect botnets. Ramachandran et al. [34] proposed using
DNSBL counter-intelligence to ﬁnd botnet members that
generate spams. This approach is useful for just certain
types of spam botnets. In [35], Reiter and Yen proposed
a system TAMD to detect malware (including botnets)
by aggregating trafﬁc that shares the same external des-
tination, similar payload, and that involves internal hosts
with similar OS platforms. TAMD’s aggregation method
based on destination networks focuses on networks that
experience an increase in trafﬁc as compared to a histor-
ical baseline. Different from BotMiner that focuses on
botnet detection, TAMD aims to detect a broader range
of malware. Since TAMD’s aggregation features are
different from BotMiner’s (in which we cluster similar
communication patterns and similar malicious activity
patterns), TAMD and BotMiner can complement each
other in botnet and malware detection. Livadas et al.
[29,40] proposed a machine learning based approach for
botnet detection using some general network-level trafﬁc
features of chat-like protocols such as IRC. Karasaridis
et al. [26] studied network ﬂow level detection of IRC
botnet controllers for backbone networks. The above two
are similar to our work in C-plane clustering but different
in many ways. First, they are used to detect IRC-based
botnet (by matching a known IRC trafﬁc proﬁle), while
we do not have the assumption of known C&C protocol
proﬁles. Second, we use a different feature set on a
new communication ﬂow (C-ﬂow) data format instead
of traditional network ﬂow. Third, we consider both
C-plane and A-plane information instead of just ﬂow
records.
Rishi [17] is a signature-based IRC botnet detection
system by matching known IRC bot nickname patterns.
Binkley and Singh [7] proposed combining IRC statistics
and TCP work weight for the detection of IRC-based
botnets.
In [19], we described BotHunter, which is a
passive bot detection system that uses dialog correla-
tion to associate IDS events to a user-deﬁned bot infec-
tion dialog model. Different from BotHunter’s dialog
correlation or vertical correlation that mainly examines
the behavior history associated with each distinct host,
BotMiner utilizes a horizontal correlation approach that
examines correlation across multiple hosts. BotSniffer
[20] is an anomaly-based botnet C&C detection system
that also utilizes horizontal correlation. However, it
is used mainly for detecting centralized C&C activities
(e.g., IRC and HTTP).
The aforementioned systems are mostly limited to
speciﬁc botnet protocols and structures, and many of
them work only on IRC-based botnets. BotMiner is a
novel general detection system that does not have such
limitations and can greatly complement existing detec-
tion approaches.
6 Conclusion & Future Work
Botnet detection is a challenging problem. In this pa-
per, we proposed a novel network anomaly-based botnet
detection system that is independent of the protocol and
structure used by botnets. Our system exploits the essen-
tial deﬁnition and properties of botnets, i.e., bots within
the same botnet will exhibit similar C&C communication
patterns and similar malicious activities patterns.
In
our experimental evaluation on many real-world network
traces, BotMiner shows excellent detection accuracy on
various types of botnets (including IRC-based, HTTP-
based, and P2P-based botnets) with a very low false
positive rate on normal trafﬁc.
It is likely that future botnets (especially P2P botnets)
may utilize evasion techniques to avoid detection, as
discussed in Section 4.
In our future work, we will
study new techniques to monitor/cluster communication
and activity patterns of botnets, and these techniques
are intended to be more robust to evasion attempts. In
addition, we plan to further improve the efﬁciency of the
C-ﬂow converting and clustering algorithms, combine
different correlation techniques (e.g., vertical correlation
and horizontal correlation), and develop new real-time
detection systems based on a layered design using sam-
pling techniques to work in very high speed and very
large network environments.
Acknowledgments
We would like to thank David Dagon and Yan Chen for
their help in providing some of the evaluation data in our
experiments. We thank Robert Edmonds for his support
on using fcapture.
In addition, we thank Angelos
Stavrou, Rachna Dhamija, and anonymous reviewers for
their insightful comments and feedback. This material
is based upon work supported in part by the National
Science Foundation under Grants CCR-0133629, CNS-
0627477, and CNS-0716570, by the U.S. Army Re-
search Ofﬁce under Grant W911NF0610042, and by
the Air Force Research Laboratory (AFRL) under Grant
FA8750-08-2-0141. Any opinions, ﬁndings, and conclu-
152 
17th USENIX Security Symposium 
USENIX Association
sions or recommendations expressed in this material are
those of the author(s) and do not necessarily reﬂect the
views of the National Science Foundation, the U.S. Army
Research Ofﬁce, and the Air Force Research Laboratory.
References
[1] A guide to understanding covert channel analysis
of trusted systems, version 1. NCSC-TG-030, Li-
brary No. S-240,572, National Computer Security
Center, November 1993.
[2] Overnet.
http://en.wikipedia.org/
wiki/Overnet, 2008.
[3] P. Bacher, T. Holz, M. Kotter, and G. Wicherski.
Know your enemy: Tracking botnets. http://
www.honeynet.org/papers/bots/, 2005.
[4] P. Baecher, M. Koetter, T. Holz, M. Dornseif, and
F. Freiling. The nepenthes platform: An efﬁcient
approach to collect malware.
In Proceedings of
International Symposium on Recent Advances in
Intrusion Detection (RAID’06), Hamburg, Septem-
ber 2006.
[5] M. Bailey, J. Oberheide, J. Andersen, M. Mao,
F. Jahanian, and J. Nazario. Automated clas-
siﬁcation and analysis of internet malware.
In
Proceedings of International Symposium on Recent
Advances in Intrusion Detection (RAID’07), 2007.
[6] P. Barford and V. Yegneswaran. An Inside Look at
Botnets. Special Workshop on Malware Detection,
Advances in Information Security, Springer Verlag,
2006.
[7] J. R. Binkley and S. Singh. An algorithm for
anomaly-based botnet detection. In Proceedings of
USENIX SRUTI’06, pages 43–48, July 2006.
[8] K. Chiang and L. Lloyd. A case study of the rustock
rootkit and spam bot. In Proceedings of USENIX
HotBots’07, 2007.
[9] M. Collins, T. Shimeall, S. Faber, J. Janies,
R. Weaver, M. D. Shon, and J. Kadane. Using
uncleanliness to predict future botnet addresses,.
In Proceedings of ACM/USENIX Internet Measure-
ment Conference (IMC’07), 2007.
[10] E. Cooke, F. Jahanian, and D. McPherson. The
zombie roundup: Understanding, detecting, and
disrupting botnets.
In Proceedings of USENIX
SRUTI’05, 2005.
[11] Cyber-TA.
tion Page.
BotHunter, 2008.
BotHunter Free Internet Distribu-
http://www.cyber-ta.org/
[12] D. Dagon, G. Gu, C. Lee, and W. Lee. A
taxonomy of botnet structures.
In Proceedings
of the 23 Annual Computer Security Applications
Conference (ACSAC’07), 2007.
[13] D. Dagon, C. Zou, and W. Lee. Modeling botnet
propagation using timezones.
In Proceedings of
the 13th Annual Network and Distributed System
Security Symposium (NDSS’06), January 2006.
[14] N. Daswani and M. Stoppelman. The anatomy of
clickbot.a. In Proceedings of USENIX HotBots’07,
2007.
[15] P. Fogla, M. Sharif, R. Perdisci, O. M. Kolesnikov,
and W. Lee. Polymorphic blending attack. In Pro-
ceedings of the 15th USENIX Security Symposium
(Security’06), 2006.
[16] F. Freiling, T. Holz, and G. Wicherski. Botnet
Tracking: Exploring a Root-cause Methodology to
Prevent Denial of Service Attacks. In Proceedings
of 10th European Symposium on Research in
Computer Security (ESORICS’05), 2005.
[17] J. Goebel and T. Holz.
Identify bot
contaminated hosts by irc nickname evaluation. In
Proceedings of USENIX HotBots’07, 2007.
Rishi:
[18] J. B. Grizzard, V. Sharma, C. Nunnery, B. B. Kang,
and D. Dagon. Peer-to-peer botnets: Overview and
case study. In Proceedings of USENIX HotBots’07,
2007.
[19] G. Gu, P. Porras, V. Yegneswaran, M. Fong, and
W. Lee. BotHunter: Detecting malware infection
through ids-driven dialog correlation.
In Pro-
ceedings of the 16th USENIX Security Symposium
(Security’07), 2007.
[20] G. Gu, J. Zhang, and W. Lee.
BotSniffer:
Detecting botnet command and control channels
in network trafﬁc.
In Proceedings of the 15th
Annual Network and Distributed System Security
Symposium (NDSS’08), 2008.
[21] M. Halkidi, Y. Batistakis, and M. Vazirgiannis. On
clustering validation techniques. J. Intell. Inf. Syst.,
17(2-3):107–145, 2001.
[22] T. Holz, C. Gorecki, K. Rieck, and F. C. Freiling.
Detection and mitigation of fast-ﬂux service net-
works.
In Proceedings of the 15th Annual Net-
work and Distributed System Security Symposium
(NDSS’08), 2008.
USENIX Association  
17th USENIX Security Symposium 
153
[23] T. Holz, M. Steiner, F. Dahl, E. Biersack, and
F. Freiling. Measurements and mitigation of peer-
to-peer-based botnets: A case study on storm
worm.
the First USENIX
Workshop on Large-Scale Exploits and Emergent
Threats (LEET’08), 2008.
In Proceedings of
Ianelli
[24] N.
as
http://www.cert.org/archive/pdf/Botnets.pdf,
2005.
and A. Hackworth.
vehicle
online
Botnets
crime.
a
for
[25] A. K. Jain, M. N. Murty, and P. J. Flynn. Data
ACM Computer Survey,
clustering:
a review.
31(3):264–323, 1999.
[26] A. Karasaridis, B. Rexroad, and D. Hoeﬂin. Wide-
In
scale botnet detection and characterization.
Proceedings of USENIX HotBots’07, 2007.
[27] B. Krebs.
Storm worm dwarfs world’s
http://blog.
supercomputers.
top
washingtonpost.com/securityfix/
2007/08/storm_worm_dwarfs_worlds_
top_s_1.html, 2007.
[28] R. Lemos. Bot software looks to improve peer-
Http://www.securityfocus.com/
age.
news/11390, 2006.
[29] C. Livadas, R. Walsh, D. Lapsley, and W. T. Strayer.
Using machine learning techniques to identify
botnet trafﬁc.
In Proceedings of the 2nd IEEE
LCN Workshop on Network Security (WoNS’2006),
2006.
[30] P. Maymounkov and D. Mazieres. Kademlia: A
peer-to-peer information system based on the XOR
metric.
In Proceedings of the 1st International
Workshop on Peer-to-Peer Systems (IPTPS’02),
2002.
[31] D. Pelleg and A. W. Moore. X-means: Extending
k-means with efﬁcient estimation of the number
of clusters.
In Proceedings of the Seventeenth
International Conference on Machine Learning
(ICML’00), pages 727–734, San Francisco, CA,
USA, 2000. Morgan Kaufmann Publishers Inc.
[32] M. Rajab, J. Zarfoss, F. Monrose, and A. Terzis.
A multi-faceted approach to understanding the
botnet phenomenon.
In Proceedings of ACM
SIGCOMM/USENIX Internet Measurement Con-
ference (IMC’06), Brazil, October 2006.
[33] A. Ramachandran and N. Feamster. Understanding
In
the network-level behavior of spammers.
Proceedings of ACM SIGCOMM’06, 2006.
[34] A. Ramachandran, N. Feamster, and D. Dagon. Re-
vealing botnet membership using DNSBL counter-
intelligence. In Proceedings of USENIX SRUTI’06,
2006.
[35] M. K. Reiter and T.-F. Yen. Trafﬁc aggregation
for malware detection. In Proceedings of the Fifth
GI International Conference on Detection of Intru-
sions and Malware, and Vulnerability Assessment
(DIMVA’08), 2008.
[36] M. Roesch. Snort - lightweight intrusion detection
for networks. In Proceedings of USENIX LISA’99,
1999.
[37] P. Royal, M. Halpin, D. Dagon, R. Edmonds, and
Polyunpack: Automating the hidden-
W. Lee.
code extraction of unpack-executing malware.
In
Proceedings of the 22nd Annual Computer Security
Applications Conference (ACSAC’06), pages 289–
300, Washington, DC, USA, 2006. IEEE Computer
Society.
[38] M. G. Schultz, E. Eskin, E. Zadok, and S. J.
Stolfo. Data mining methods for detection of new
malicious executables. In Proceedings of the 2001
IEEE Symposium on Security and Privacy, 2001.
[39] SecureWorks.
Bobax
trojan
analysis.
http://www.secureworks.com/research/threats/bobax/,
2004.
[40] W. T. Strayer, R. Walsh, C. Livadas, and D. Lapsley.
Detecting botnets with tight command and control.
In Proceedings of the 31st IEEE Conference on
Local Computer Networks (LCN’06), 2006.
[41] S. Wehner. Analyzing worms and network trafﬁc
using compression. Journal of Computer Security,
15(3):303–320, 2007.
[42] T. Werner. PE Hunter. http://honeytrap.
mwcollect.org/pehunter, 2007.
[43] L. Zhuang, J. Dunagan, D. R. Simon, H. J. Wang,
I. Osipkov, G. Hulten, and J. Tygar. Characterizing
botnets from email spam records. In Proceedings
of the First USENIX Workshop on Large-Scale
Exploits and Emergent Threats (LEET’08), 2008.
[44] J. Zhuge, T. Holz, X. Han, J. Guo, and W. Zou.
Characterizing the irc-based botnet phenomenon.
Peking University & University of Mannheim
Technical Report, 2007.
154 
17th USENIX Security Symposium 
USENIX Association