In this section, we describe the P2P botnets that we study
in this paper, ordered by the date of their introduction.
1) Nugache: Nugache was a P2P botnet based on a cus-
tom protocol, which ﬁrst appeared in the beginning of 2006
[25]. Its main purpose was DDoS attacks. Earlier versions
used IRC for C&C, but over time the C&C infrastructure
was migrated to a P2P-based protocol. The Nugache botnet
was one of the ﬁrst to use strong cryptography to protect its
communication. Some messages were signed with a 4096-
bit RSA key to prevent unauthorized control. Parts of the
inter-peer communication were encrypted using a hybrid
RSA/Rijndael scheme.
2) Storm: Storm (a.k.a. Peacomm) was a structured P2P
botnet based on Overnet, a Kademlia implementation. Storm
appeared in the wild in January 2007. The ﬁrst version of
Storm was built upon an existing Overnet network used
for ﬁle sharing, which the Storm bots shared with benign
clients. Storm bots retrieved commands by using a time-
based algorithm to compute the IDs under which new
commands would be published by the botmaster, and then
searching for these IDs in the DHT. Holz et al. [9] showed
that in principle Storm could be mitigated by overwriting
the command IDs in the DHT.
3) Sality P2P: The P2P version of Sality ﬁrst appeared in
early 2008 and is a variant of the centralized Sality malware
downloader. Sality uses a pull-based unstructured P2P net-
work to spread URLs where payloads are to be downloaded.
Peers regularly contact their neighbors to exchange new
URLs. We distinguish two disjoint Sality botnets, denoted
as version three and version four. Both networks share the
same P2P protocol, but version four of Sality ﬁxes a critical
vulnerability in the ﬁle downloading mechanism [7].
4) Waledac: Waledac originated in December 2008, and
is assumed to be the successor of Storm [23]. The Waledac
network used a tiered infrastructure, with an upper layer of
centralized nodes providing commands and spam templates
to a middle layer of router nodes. Nodes at
the router
1A later added XOR encryption separated the Storm botnet from Overnet.
2Bots can trigger pulls at other peers, which are effectively pushes.
99
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:41 UTC from IEEE Xplore.  Restrictions apply. 
layer were responsible for relaying messages to a lower
network layer consisting of regular P2P worker bots. Bots
at the worker layer formed the majority of the nodes in the
Waledac P2P network, and were connected via a pull-based
unstructured P2P network to the router layer.
5) Kelihos: Kelihos (a.k.a. Hlux) is an unstructured P2P
botnet mainly used for spamming and ID theft [3]. Kelihos
ﬁrst appeared in late 2010, and is assumed to be the succes-
sor of Waledac. Researchers successfully sinkholed the ﬁrst
two variants of Kelihos using peer list manipulation attacks.
The two sinkholing attacks took place in September 2011
and March 2012, respectively. A subsequent third Kelihos
variant is still operational, and is similar in architecture to
the ﬁrst two Kelihos variants [29].
6) ZeroAccess: ZeroAccess (a.k.a. Sirefef) is a malware
downloader which uses an unstructured P2P architecture. It
exists in two variants and is organized into seven disjoint
networks. The two variants, ZeroAccess v1/v2, appeared in
mid 2009 and early 2012, respectively. ZeroAccess bots
regularly query their neighbors for new malware payloads.
Lists of new peers are pushed to all bots using a broadcast
mechanism [15, 30].
7) Miner: Miner was an unstructured P2P botnet which
appeared in August 2011, and included facilities for gener-
ating (“mining”) a digital currency called Bitcoins [18]. The
Miner botnet consisted of two disjoint networks contain-
ing around 38.000 non-NATed peers according to Kasper-
sky [28]. Miner ceased to operate in March 2012.
8) Zeus P2P: The ﬁrst two variants of Zeus were central-
ized, and were extensively tracked and attacked by malware
researchers3. The development of Zeus forked into multiple
variants, including a new P2P variant of Zeus, which ap-
peared in the wild in September 2011. This P2P variant
of Zeus appears to be designed to withstand the attacks
routinely executed against traditional Zeus botnets. Note that
while the centralized variant of Zeus typically forms several
distinct botnets, the P2P variant spans one coherent botnet.
The P2P variant of Zeus uses an unstructured push/pull-
based P2P network to relay commands, stolen data, and
conﬁguration/binary updates. Zeus is designed to steal cre-
dentials (particularly for ﬁnancial institutions) from infected
systems. This stolen data is sent to dropzones via frequently
changing proxy bots, the locations of which are gossiped via
the Zeus P2P network.
III. A FORMAL MODEL FOR P2P BOTNETS
This section presents a formal model
to capture the
fundamental characteristics of all previously described P2P
botnets. We deﬁne a non-routable peer as a peer that cannot
be reached by other peers, but has the ability to contact one
or more peers (e.g., the peer is behind a NAT or proxy). We
deﬁne a routable peer as a peer that can also be contacted
3https://zeustracker.abuse.ch
by other peers (via an ingress connection). Furthermore, we
deﬁne an unreachable peer as a peer that cannot be reached
by any peers nor contact other peers (e.g., the peer is ofﬂine),
but is still known to one or more peers.
Deﬁnition 1. A peer-to-peer (P2P) botnet is a directed graph
G := (V, E), where V is a set of peers and E ⊆ V ×V edges
˙∪Vu is
(u, v) with u, v ∈ V . The set of peers V := Vr
the disjoint union of routable peers Vr, non-routable peers
Vn and unreachable peers Vu.
˙∪Vn
Note that the graph is not required to be a connected
digraph4 and that several disjoint connected components
are in accordance with Deﬁnition 1. This conforms with
our deﬁnition of P2P botnets as we consider two machines
infected with the same bot to be part of the same botnet,
even if they belong to separate partitions of the P2P graph
at a given point in time.
All P2P botnets implement the concept of peer lists to
keep track of neighboring peers. From Deﬁnition 1, we can
now describe a peer list as follows:
Deﬁnition 2. Let G = (V, E) denote a P2P botnet. The set
of edges Ev := {(v, u) ∈ E} for a peer v ∈ V is called the
peer list of v.
A peer list expresses relationships of neighboring peers in
the graph at a given time. In reality, peer lists can be highly
dynamic and do not necessarily have to be stored explicitly.
Note that a peer list may contain edges to routable, non-
routable and unreachable peers.
Deﬁnition 3. We call deg+(v) := |Ev| the out-degree of v.
deg−(v) := |{(u, v) ∈ E}| is called in-degree of v.
For P2P botnets, G is hardly complete, i.e., ∃u, v ∈ V :
(u, v) /∈ E. This follows from changes in the network (peers
joining or leaving the network) that would otherwise require
expensive operations to maintain the graph topology. In fact,
botnets usually implement sparse graphs, i.e., ∀v ∈ V :
deg+(v) (cid:7) |V |. Since peer lists are usually limited in
size, the maximum possible out-degree is normally restricted
as well. The in-degree of a peer is not easily determined.
One would have to explore the entire graph and count the
edges (u, v) ∈ E for a peer v. However, the in-degree is an
important measure for the popularity of a peer. The more
popular a peer is in a botnet, the more inﬂuence it has on
the process of propagating information, like commands.
Using our formal model as a tool, we can express several
operations. The deletion of an edge (u, v) in the graph
is represented by a transformation D : G → G(cid:2) with
G(cid:2) := (V, E (cid:2)) and E (cid:2) := E \ (u, v). This operation occurs,
for instance, when a peer performs its regular maintenance
for peer connectivity, and removes unreachable peer entries
4For simplicity reasons, we call a digraph G connected if its undirected
i.e., ∀v1, vn ∈ V ∃(v1, v2, ..., vn) with
representation is connected,
(vi, vi+1) ∈ E, i = 1..(n − 1).
100
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:41 UTC from IEEE Xplore.  Restrictions apply. 
from its peer list. D∗ = Dn ◦ Dn−1 ◦ . . . ◦ D1 denotes the
composition of multiple delete operations. The insertion of
a new edge (u, v) in the graph (the introduction of a new
peer-to-peer relationship) can be phrased as a transformation
I : G → G(cid:2) with G(cid:2) := (V (cid:2), E (cid:2)) where V (cid:2) := V ∪ {v} and
E (cid:2) := E∪{(u, v)}. I ∗ is the composition of multiple inserts.
A restriction of our model is that edge updates (modifying
existing peer list entries with more recent information) can-
not be expressed directly. This would require the ability to
parametrize and distinguish edges and signiﬁcantly increase
the complexity of our model. However, if we regard edge
updates as part of a protocol logic at a higher level, we can
alter our model to include an update operation U := I ◦ D,
deﬁned as an edge deletion followed by an edge insertion.
U ∗ denotes multiple subsequent updates.
The insert, update and delete operations on a P2P botnet
graph provide us with the primitives necessary to describe
the reconnaissance and mitigation strategies discussed in the
following section.
IV. ATTACKS AGAINST P2P BOTNETS
This section presents generic attacks against P2P botnets
and presents a formal description thereof. The attacks are
based on the following two observations: (1) In order for
a P2P botnet to be functional, participating peers must be
cooperative, i.e., they must communicate with other peers.
(2) Peers cannot be authenticated, as a secure authentication
scheme (which would involve a central trusted authority)
conﬂicts with the dynamic, self-organizing nature of P2P
networks. In summary, P2P botnets rely on the cooperation
of untrusted parties, two weaknesses that can be exploited.
In this section, we deﬁne generic attack methods, which
can be applied to any P2P botnet that is compliant with
our model. Then, we introduce classes of attacks against
the two intrinsic weaknesses that build on these methods:
Intelligence Gathering and Disruption and Destruction.
A. Attack Methods
The more basic attacks are represented by the Insert, Up-
date, and Delete primitives deﬁned in the previous section.
For example, deleting an edge from a P2P graph results in
reduced overall connectivity and potentially has an inﬂuence
on the speed at which information propagates. Below, we
discuss four more advanced attack methods.
1) Graph Search: Many attacks rely on knowledge about
the P2P topology of a botnet. One approach to reconstruct
the P2P graph is visiting all nodes, requesting their peer
lists, and enumerating all edges. This can be achieved
through a graph search. We call the result a crawl graph of
G = (V, E) and denote it as GC = (V C ⊆ V, E C ⊆ E).
Peers v ∈ V : deg−(v) = 0 are invisible during the
graph search. This is a signiﬁcant limitation of a graph
search. Furthermore, only routable peers can be contacted.
Consequently, the best possible graph search result is a
in the optimal case,
graph GC with E C = {(u, v) : u ∈ Vr, v ∈ V }. In
other words,
the graph search has
explored the peer lists of all routable peers. This is hard in
practice, since most P2P botnet topologies are so dynamic
that they change during the graph search, which leads to
inaccurate results. Also depending on the seed peer list,
some peers may not be explorable via graph search: Let
V = V (cid:2) ∪ V (cid:2)(cid:2) and the graph search start with a peer in
V (cid:2). Peers in V (cid:2)(cid:2) cannot be explored during graph search if
∀v ∈ V (cid:2) ∩ V (cid:2)(cid:2) : v ∈ Vr ⇒ (cid:2)(v, u ∈ V (cid:2)(cid:2)) ∈ E.
r
Algorithm 1 describes a generic P2P botnet graph search
algorithm. In line 1, it is initialized with a set of seed
peers, which can be obtained through reverse engineering
bot samples or dynamic analysis. Peers that reply to peer list
requests are added to the set of cached routable peers V C
in
line 5. Next, their neighboring peers are added to the peer
cache V C . The list of edges is updated in line 7. One can
obtain a snapshot of the P2P botnet’s state by stopping the
search process if it has not explored any new edges during a
pass over the peer cache. Better performance generally leads
to more accurate exploration results, because the longer a
cycle takes, the higher the chance that the topology changes
in the meantime. Another parameter is the peer selection
strategy (line 9). Most searches are performed breadth-ﬁrst
by implementing V C as a queue to prioritize exploration of
local environments in rapidly changing topologies. Using a
stack instead would change it into a depth-ﬁrst search.
Algorithm 1 P2P Botnet Graph Search
1: V C ← seed peer list
2: E C ← ∅
3: while true do
4:
if peer list Lu ⊆ Eu received then
r ∪ u
r ← V C
V C
V C ← V C ∪ {v : (u, v) ∈ Lu}
E C ← E C ∪ Lu
5:
6:
7:
8:
9:
10:
else
select u ∈ V C
request peer list from u
2) Peer Injection: Most attacks against P2P botnets are
based on changes of the graph topology by manipulating
the set of edges or the set of vertices. The latter alone is not
reasonable, as a newly added peer can not affect the topology
as long as it is unknown to other peers. So in order to affect
the topology, manipulations of E are mandatory. If we let
I(v) : G → G(cid:2) = (V (cid:2), E (cid:2)) denote a parametrized insert
operation with V (cid:2) = V ˙∪ v, E (cid:2) = E ˙∪ {(u, v)}, u ∈ V ,
we can deﬁne the injection of a peer v as a composition
I ∗(v) := In(v) ◦ In−1(v) ◦ . . . ◦ I1(v). It follows that
deg−(v) ≥ 1. Note that v does not have to be routable.
3) Peer List Destruction: In contrast to peer injection,
peer list destruction describes “corrupting changes” to a
peer’s peer list. The context here is an individual peer,
101
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:41 UTC from IEEE Xplore.  Restrictions apply. 
not the entire P2P graph. To destroy a peer list, entries
can either be deleted or replaced with invalid (unreach-
able or non-routable) entries, i.e., peers from V \ Vr. We
(v) denote the out-degree of v in G and deﬁne
let deg+
D(v) : G → G(cid:2) = (V, E (cid:2)) as a parametrized delete
operation with E (cid:2) = E \ (v, u), u ∈ V . D∗(v) is the
parametrized composition thereof, U (v) and U ∗(v) are the
equivalent update operations. The destruction of v’s peer
:
list
G → G(cid:2) = (V (cid:2), E (cid:2)). Note that updates may create new
vertices, thus the set of peers may change. It follows that
(v) (reduced out-degree if edges were
deg+
deleted) and |{(v, u)} ∩ E (cid:2)| < |{(v, u)} ∩ E|, u ∈ Vr (fewer
edges to routable peers through invalidation).
is a transformation R(v)
G(cid:2) (v) ≤ deg+
:= U ∗(v)
◦ D∗(v)
G
G
B. Class I: Intelligence Gathering
Attacks against P2P botnets are often preceded by at-
tempts to enumerate the infected hosts and collect infor-
mation about
them. We distinguish two complementary
approaches, crawling and sensor nodes, and deﬁne attacks in
these categories based on the previously discussed methods.
1) Crawling: A standard approach for analyzing P2P
botnets is to visit as many peers as possible and collect
information about them. The collected information can be
anything that is accessible to other peers, which depends
on the speciﬁc communication protocol. For example, one
protocol may exhibit the operating system version, another
might include the current local time. Crawling is based
on graph search and represents an efﬁcient way to gather
intelligence. However, the coverage that can be reached with
this approach depends heavily on the P2P protocol details.
If, for example, only routable peers are included in local
peer lists, the crawler’s view is very limited.
2) Sensor Nodes:
If knowledge about
the peers has
priority over graph reconstruction, an alternative strategy can
be used. Kang et al. introduced a method for enumerating
structured P2P botnets [12]. The authors proposed special
sensor nodes in the DHT space of a botnet. We generalize
this idea based on the observation that in current P2P botnets
peers are periodically contacted by their neighboring peers,
e.g., during regular peer list veriﬁcation cycles. Introducing
a sensor can be achieved through peer injection. Sensors
can also be contacted by non-routable peers v ∈ Vn, which
potentially overcomes some of the shortcomings of crawling.
However, a sensor’s coverage depends on its popularity. The
in-degree deg−(s) of a sensor can be increased, for example,
by crawling the P2P graph and injecting s into any visited
peer’s peer list. Depending on the botnet protocol, s may
then be propagated further due to communication between
is
peers,
necessary to continuously announce the sensor to maintain
its popularity, or peer list entries are long-lived and automat-
ically propagate, depends on the botnet’s peer list dynamics.
thereby also reaching peers in Vn. Whether it
Thus, the characteristics of a botnet’s P2P protocol are vital
for the coverage achieved with this approach.
C. Class II: Disruption and Destruction
Reconnaissance is often only the ﬁrst step in a series
of attacks that aim to render a botnet
inoperable. We
further distinguish three disruptive attacks, of which two
are performed on the infrastructure layer (partitioning and
sinkholing) and one affects both the infrastructure and the
communication layer (poisoning).
1) Partitioning: One generic attack against a P2P botnet’s
infrastructure tries to prohibit the distribution of information
by partitioning the graph. For example, if certain nodes can