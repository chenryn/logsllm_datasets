图20-14 CARP重定向
如图20-14所示，作为客户端和代理服务器中间人的缓存代理可以在各个代理服务
器之间分配负载，但这项功能也可以由客户端自身提供。可以配置Internet Explorer
和网景公司的Navigator这样的商用浏览器，以插件的形式计算散列函数，来确定
应该把请求发送给哪个代理服务器。
CARP对代理服务器做出的确定性解析说明它无须向所有邻居发送查询，这也就意
味着这种方法所需发送的缓存间报文会比较少。随着越来越多的代理服务器添加到
配置系统中来，缓存系统集群的规模会变得相当大。但CARP的一个缺点就是，如
果某个代理服务器不可用了，就要重新修改散列表以反映这种变化，而且必须重新
配置现存代理服务器上的内容。如果代理服务器经常崩溃的话，这么做的开销可能 476
会很高。相反，ICP代理服务器中存在的冗余内容就表示它不需要重新配置。另一
个潜在的问题是，由于CARP是个新协议，CARP集群中可能不会包含那些现存的、
只运行ICP协议的代理服务器。
介绍了CARP和ICP间的区别之后，我们来详述一下CARP。CARP重定向方法要
完成下列任务。
• 保存一个参与CARP的代理服务器列表。周期性地查询这些代理服务器，看看它
们是否仍然活跃。
• 为每个参与的代理服务器计算一个散列函数。散列函数的返回值要考虑此代理所
能处理的负载量。
重定向与负载均衡 ｜ 499
• 定义一个独立的散列函数，这个函数会根据所请求Web对象的URL返回一个数字。
• 将URL散列函数的结果代入代理服务器的散列函数，得到一个数字阵列。这些
数字中的最大值决定了要为这个URL使用的代理服务器。由于算出来的值是确
定的，所以对同一个Web对象的后继请求会被转发给同一台代理服务器。
以上4项任务可以由浏览器、插件执行，也可以在一个中间服务器上计算。
为每个代理服务器集群创建一个表，表中列出了集群中的所有服务器。表中的每个
条目都应该包含全局参数的相关的信息，比如，负载因子、生存时间（TTL）、倒计
数值和应该以何频率查询成员之类的全局参数。负载因子说明机器可以处理多少负
载，这取决于那台机器的CPU速度和硬盘容量。可以通过RPC接口对此表进行远
程维护。只要表中的字段被RPC修改了，就可以使其对下游的客户端和代理可见，
或将其发布给它们。这项发布工作是在HTTP中进行的，这样，所有的客户端或代
理服务器就都可以在不引入另一种代理间协议的基础上消化表格信息了。客户端和
代理服务器只用了一个知名URL来获取这张表。
所使用的散列函数必须能够确保Web对象在参与的代理服务器间是统计分布的。应
该用代理服务器的负载因子来确定分配给那台代理的Web对象的统计概率。
总之，CARP协议允许将一组代理服务器看成单个的集群缓存，而不是（像ICP中
那样的）一组相互合作但又相互独立的缓存服务器。确定的请求解析路径会在一跳
477 内找到某个特定的Web对象的家。这样会降低ICP在一组代理服务器中查找Web
对象时常会产生的代理间流量。CARP还可以避免在不同的代理服务器上存储Web
对象的多个副本的问题，这样做的优点是缓存系统集群的Web对象存储容量较大，
缺点是任意一个代理的故障都要改写现存代理的部分缓存内容。
20.9 超文本缓存协议
之前我们讨论了ICP，这个协议允许代理缓存向兄弟缓存查询文件是否存在。但设
计ICP时考虑的是HTTP/0.9协议，因此，向兄弟缓存查询资源是否存在时，只允
许缓存发送URL。HTTP版本1.0和1.1引入了很多新的请求首部，这些首部可以
和URL一起用来确定文件是否匹配。因此，只在请求中发送URL可能无法得到精
确的响应。
HTCP（超文本缓存协议）允许兄弟缓存之间通过URL和所有的请求及响应首部
来相互查询文档是否存在，以降低错误命中的可能。而且HTCP允许兄弟缓存监
视或请求在对方的缓存中添加或删除所选中的文档，并修改对方已缓存文档的缓存
策略。
500 ｜ 第20章
图20-13说明了一个ICP事务，此图也可以用来说明HTCP事务，后者是另一个对
象发现协议。如果附近的缓存中有这个文档，发起请求的缓存可以打开一条到此缓
存的HTTP连接，以获取那个文档的副本。ICP和HTCP事务之间的区别体现在请
求和响应细节上。
HTCP报文的结构如图20-15所示。首部中包含了报文的长度和报文版本。数据部
分开始是数据长度，包含了opcode、响应代码、一些标记及ID，最后是实际的数
据。可选的认证部分跟在Data小节的后面。
0 31
报文长度
主要版本 次要版本 数据长度
Opcode 响应代码 保留 F1RR
事务ID
Opcode数据
认证部分长度 签名时间
签名时间 签名过期时间
签名过期时间 密钥名称
密钥名称
签名
图20-15 HTCP报文格式
报文字段的详细内容如下所述。
• 首部
Header部分包含32位的报文长度， 8位的主要协议版本和8位的次要协议版本。
报文长度包含所有首部、数据和认证部分的长度。
• 数据
Data部分包含了HTCP报文，结构如图20-15所示。数据组件如表20-6所示。 478
重定向与负载均衡 ｜ 501
表20-6 HTCP数据组件
组 件 描 述
数据长度 16位的Data部分字节数，包含Length字段自身的长度
Opcode HTCP事务的4位操作代码。表20-7列出了Opcode的完整内容
响应代码 说明事务成功或失败的4位键值。可能的值有：
0——没有进行认证，但需要进行认证；
1——需要进行认证，但没有得到满足；
2——未实现的Opcode；
3——不支持主要版本；
4——不支持次要版本；
5——不合适、不允许或非预期的Opcode。
F1 F1是重载的——如果报文是一条请求，F1就是请求端设置的1位标记，说明需要响
应（F1=1）；如果报文是一条响应，F1就是一个1位标记，用来说明应该将响应作
为对整条报文的响应来解释（F1=1），还是将其作为对Opcode数据字段的响应来解
释（F1=0）
RR 用来说明报文是请求（RR=0）还是响应（RR=1）的1位标记
事务ID 32位的值，与请求端的网络地址组合在一起可以唯一地标识HTCP事务
479 Opcode数据 Opcode数据与Opcode有关。参见表20-7
表20-7列出了HTCP Opcode代码及其相应的数据类型。
表20-7 HTCP Opcode
Opcode 值 描 述 响应代码 Opcode数据
NOP 0 本质上是一个ping操作 总是0 无
TST 1 如果有实体，就为0，如果没 在请求中包含URL和
有提供实体，就为1 请求首部，在响应中
只包含响应首部
MON 2 接受就为0，拒绝就为1
SET 3 SET报文允许缓存请求修改 接受就为0，忽略就为1
缓存策略。可以用于SET
报文的首部参见表20-9
CLR 4 如果曾经有过，但现在没有
了，就为0；如果曾经有过，
而且现在还有，就为1；如
果从未有过，就为2
20.9.1 HTCP认证
HTCP报文的认证部分是可选的。其结构如图20-15所示，表20-8列出了它的认证
组件。
502 ｜ 第20章
表20-8 HTCP认证组件
组 件 描 述
认证部分长度 16位的报文认证部分字节数，包含了长度字段自身的长度
签名时间 32位数，表示从格林尼治标准时间1970年1月1日00:00:00开始，到产生签名的
时间之间的秒数
签名过期时间 32位数，表示从格林尼治标准时间1970年1月1日00:00:00开始，到签名过期时
所经历的秒数
密钥名称 用来表示共享密钥名称的字符串。密钥字段有两个部分：用来说明后面那个字符串
长度的16位的字节数，后面跟着的字符串是未经解释的字节流
签名 HMAC-MD5摘要，它是B值为64（表示源IP地址和目的IP地址及端口）、报文
的主要及次要HTCP版本、签名时间和签名过期值，完整的HTCP数据以及密钥的
摘要。签名也包含两个部分：16位长的字符串字节数，后面跟着这个字符串
20.9.2 设置缓存策略
SET报文允许缓存请求对已缓存文档的缓存策略进行修改。表20-9中给出了可以在
SET报文中使用的首部。 480
表20-9 修改缓存策略的缓存首部列表
首 部 描 述
Cache-Vary 请求端已经知道内容会随一组首部的变化而变化，这组首部与响应Vary首部
中的那一组不同。这个首部会覆盖响应的Vary首部
Cache-Location 可能有此对象副本的代理缓存的列表
Cache-Policy 关于此对象的缓存策略，请求端已经了解到的比响应首部中指定的更详细。可
能的值包括：no-cache，说明响应是不可缓存的，但可以在多个同时发起
请求的请求端之间共享；no-share，说明对象是不可共享的； no-cache-
cookie，说明内容可能会随cookie而发生变化，不推荐缓存
Cache-Flags 请求端修改了对象的缓存策略，可能要对它进行特别的处理，不一定要根据其
实际的策略进行处理
Cache-Expiry 发送端了解到的文档实际过期时间
Cache-MD5 请求端计算出来的对象的MD5校验和，可能与Content-MD5首部的值有所不
同，也可能在对象没有Content-MD5首部的情况下提供
Cache-to-Origin 请求端测量的到原始服务器的往返时间。此首部值的格式为
HTCP允许通过查询报文将请求和响应首部发送给兄弟缓存，这样可以降低缓存查
询中的错误命中率。通过进一步允许在兄弟缓存间交换策略信息，HTCP还可以提
高兄弟缓存之间的合作能力。
重定向与负载均衡 ｜ 503
20.10 更多信息
更多信息可参考下列文献。
• DNS and Bind 3（《DNS与BIND》）
Cricket Liu、Paul Albitz和Mike Loukides著，O'Reilly & Associates公司出版。
• http://www.wrec.org/Drafts/draft-cooper-Webi-wpad-00.txt
“Web Proxy Auto-Discovery Protocol”（“Web代理自动发现协议”）。
• http://home.netscape.com/eng/mozilla/2.0/relnotes/demo/proxy-live.html
“Navigator Proxy Auto-Config File Format”（“Navigator代理自动配置文件格式”）。
• http://www.ietf.org/rfc/rfc2186.txt
IETF RFC 2186，“Intercache Communication Protocol (ICP) Version2”（“缓存间
的通信协议，版本2”），D. Wessels和K. Claffy编写。
• http://icp.ircache.net/carp.txt
“Cache Array Routing Protocol v1.0”（“缓存阵列路由协议v1.0”）。
• http://www.ietf.org/rfc/rfc2756.txt
481 IETF RFC 2756，“Hyper Text Caching Protocol(HTCP/0.0)”（“超文本缓存协议
（HTCP/0.0）”），P. Vixie和D. Wessels编写。
• http://www.ietf.org/internet-drafts/draft-wilson-wrec-wccp-v2-00.txt
“Web Cache Communication Protocol v2.0”（“Web缓存通信协议v2.0”），M. Cieslak、
D. Forster、G. Tiwana和R. Wilson编写。
• http://www.ietf.org/rfc/rfc2131.txt?number=2131
“Dynamic Host Configuration Protocol”（“动态主机配置协议”）。
• http://www.ietf.org/rfc/rfc2132.txt?number=2132
“DHCP Options and BOOTP Vendor Extensions”（“DHCP选项与BOOTP厂商扩展”）。
• http://www.ietf.org/rfc/rfc2608.txt?number=2608
“Service Location Protocol,Version2”（“服务定位协议，版本2”）。
• http://www.ietf.org/rfc/rfc2219.txt?number=2219
482 “Use of DNS Aliases for Network Services”（“为网络服务使用DNS别名”）。
注3： 本书中译本已由中国电力出版社出版。（编者注）
504 ｜ 第20章
第21章
日志记录与使用情况跟踪
505
几乎所有的服务器和代理都会记录下它们所处理的HTTP事务摘要。这么做出
于一系列的原因：跟踪使用情况、安全性、计费、错误检测，等等。本章简要介绍
了日志记录，研究了通常会记录HTTP事务哪些方面的信息以及一些常见日志格式
中所包含的内容。
21.1 记录内容
大多数情况下，日志的记录出于两种原因：查找服务器或代理中存在的问题（比如，
哪些请求失败了），或者是生成Web站点访问方式的统计信息。统计数据对市场营
销、计费和容量规划（比如，决定是否需要增加服务器或带宽）都非常有用。
可以把一个HTTP事务中所有的首部都记录下来，但对每天要处理数百万个事务的
服务器和代理来说，这些数据的体积超大，很快就会失控。不应该记录实际上你并
不感兴趣，甚至从来都不会去看一眼的数据。
通常，只记录事务的基本信息就行了。通常会记录下来的几个字段示例为：
• HTTP方法；
• 客户端和服务器的HTTP版本；
• 所请求资源的URL；
• 响应的HTTP状态码；
• 请求和响应报文的尺寸（包含所有的实体主体部分）；
• 事务开始时的时间戳；
483 • Referer首部和User-Agent首部的值。
HTTP方法和URL说明了请求试图做些什么——比如，GET某个资源或POST某个
定单。可以用URL来记录Web站点上页面的受欢迎程度。