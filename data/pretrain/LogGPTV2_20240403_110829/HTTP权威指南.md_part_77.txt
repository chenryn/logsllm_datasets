### 20.14 CARP重定向

**图20-14：CARP重定向**

如图20-14所示，缓存代理作为客户端和代理服务器之间的中间人，可以在各个代理服务器之间分配负载。然而，这种功能也可以由客户端自身提供。例如，Internet Explorer和Netscape Navigator等商用浏览器可以通过插件计算散列函数，以确定应将请求发送给哪个代理服务器。

CARP通过确定性解析来选择代理服务器，从而避免了向所有邻居发送查询的需求，减少了缓存间报文的传输量。随着更多代理服务器被添加到配置系统中，缓存系统集群的规模会逐渐扩大。但是，CARP的一个缺点是，如果某个代理服务器不可用，则需要重新修改散列表并重新配置现有代理服务器上的内容。若代理服务器频繁崩溃，这样的开销可能会非常高。相比之下，ICP代理服务器中的冗余内容则不需要重新配置。此外，由于CARP是一个较新的协议，现有的只运行ICP协议的代理服务器可能无法加入CARP集群。

#### CARP与ICP的区别

在介绍了CARP和ICP之间的区别后，我们详细讨论CARP的工作机制。CARP重定向方法主要包括以下任务：

1. **维护参与CARP的代理服务器列表**：定期查询这些代理服务器，确保它们仍然活跃。
2. **为每个参与的代理服务器计算散列函数**：散列函数的结果应考虑该代理服务器的负载能力。
3. **定义一个独立的散列函数**：该函数根据所请求Web对象的URL返回一个数字。
4. **将URL散列函数的结果代入代理服务器的散列函数**：生成一个数字数组，其中的最大值决定了用于该URL的代理服务器。由于结果是确定性的，因此对同一Web对象的后续请求将被转发到同一台代理服务器。

上述四项任务可以由浏览器、插件或中间服务器执行。

#### 负载均衡表

为每个代理服务器集群创建一个表，列出集群中的所有服务器及其全局参数（如负载因子、生存时间TTL、倒计数值和查询频率）。负载因子取决于机器的CPU速度和硬盘容量。该表可通过RPC接口进行远程维护，并通过HTTP发布给下游的客户端和代理服务器。客户端和代理服务器只需访问一个知名URL即可获取此表。

#### 散列函数

使用的散列函数必须确保Web对象在参与的代理服务器之间均匀分布。代理服务器的负载因子决定了分配给其的Web对象的概率。

总之，CARP协议允许将一组代理服务器视为单一的集群缓存，而不是像ICP那样的一组相互独立的缓存服务器。确定性的请求解析路径在一跳内找到特定Web对象的位置，减少了ICP在多个代理服务器中查找Web对象时产生的流量。CARP还可以避免在不同代理服务器上存储多个副本的问题，从而提高了缓存系统的整体存储容量，但单个代理服务器的故障会导致部分缓存内容需要重新配置。

### 20.9 超文本缓存协议 (HTCP)

之前我们讨论了ICP协议，它允许代理缓存在兄弟缓存之间查询文件是否存在。然而，ICP的设计基于HTTP/0.9协议，仅允许缓存发送URL。而HTTP/1.0和HTTP/1.1引入了新的请求首部，这些首部可以与URL一起使用，以更精确地匹配文件。因此，仅发送URL可能无法获得准确的响应。

**HTCP（超文本缓存协议）** 允许兄弟缓存之间通过URL和所有的请求及响应首部来相互查询文档是否存在，从而减少错误命中的可能性。此外，HTCP还允许兄弟缓存监视或请求在对方缓存中添加或删除选定的文档，并修改已缓存文档的缓存策略。

#### HTCP事务

图20-13展示了ICP事务，同样适用于HTCP事务。如果附近的缓存中有该文档，发起请求的缓存可以打开一条到该缓存的HTTP连接，以获取文档副本。ICP和HTCP事务之间的主要区别在于请求和响应的细节。

#### HTCP报文结构

HTCP报文的结构如图20-15所示，包括首部、数据部分和可选的认证部分。

- **首部**：包含报文长度、主版本号、次版本号和数据长度。
- **数据部分**：包含Opcode、响应代码、标记、事务ID和实际数据。
- **认证部分**：包含认证部分长度、签名时间、签名过期时间和密钥名称等。

**表20-6** 和 **表20-7** 列出了HTCP数据组件和Opcode代码。

#### HTCP认证

HTCP报文的认证部分是可选的，其结构如图20-15所示。认证组件包括认证部分长度、签名时间、签名过期时间和密钥名称等。

#### 设置缓存策略

SET报文允许缓存请求修改已缓存文档的缓存策略。表20-9列出了可在SET报文中使用的首部。

HTCP通过允许在兄弟缓存之间交换详细的请求和响应首部，降低了缓存查询中的错误命中率，并增强了兄弟缓存之间的合作能力。

### 20.10 更多信息

更多信息可参考以下文献：

- **DNS and BIND 3**（《DNS与BIND》），Cricket Liu、Paul Albitz和Mike Loukides著，O'Reilly & Associates公司出版。
- **Web Proxy Auto-Discovery Protocol**（“Web代理自动发现协议”）: [http://www.wrec.org/Drafts/draft-cooper-Webi-wpad-00.txt](http://www.wrec.org/Drafts/draft-cooper-Webi-wpad-00.txt)
- **Navigator Proxy Auto-Config File Format**（“Navigator代理自动配置文件格式”）: [http://home.netscape.com/eng/mozilla/2.0/relnotes/demo/proxy-live.html](http://home.netscape.com/eng/mozilla/2.0/relnotes/demo/proxy-live.html)
- **Intercache Communication Protocol (ICP) Version2**（“缓存间的通信协议，版本2”），D. Wessels和K. Claffy编写: [http://www.ietf.org/rfc/rfc2186.txt](http://www.ietf.org/rfc/rfc2186.txt)
- **Cache Array Routing Protocol v1.0**（“缓存阵列路由协议v1.0”）: [http://icp.ircache.net/carp.txt](http://icp.ircache.net/carp.txt)
- **Hyper Text Caching Protocol (HTCP/0.0)**（“超文本缓存协议（HTCP/0.0）”），P. Vixie和D. Wessels编写: [http://www.ietf.org/rfc/rfc2756.txt](http://www.ietf.org/rfc/rfc2756.txt)
- **Web Cache Communication Protocol v2.0**（“Web缓存通信协议v2.0”），M. Cieslak、D. Forster、G. Tiwana和R. Wilson编写: [http://www.ietf.org/internet-drafts/draft-wilson-wrec-wccp-v2-00.txt](http://www.ietf.org/internet-drafts/draft-wilson-wrec-wccp-v2-00.txt)
- **Dynamic Host Configuration Protocol**（“动态主机配置协议”）: [http://www.ietf.org/rfc/rfc2131.txt?number=2131](http://www.ietf.org/rfc/rfc2131.txt?number=2131)
- **DHCP Options and BOOTP Vendor Extensions**（“DHCP选项与BOOTP厂商扩展”）: [http://www.ietf.org/rfc/rfc2132.txt?number=2132](http://www.ietf.org/rfc/rfc2132.txt?number=2132)
- **Service Location Protocol, Version 2**（“服务定位协议，版本2”）: [http://www.ietf.org/rfc/rfc2608.txt?number=2608](http://www.ietf.org/rfc/rfc2608.txt?number=2608)
- **Use of DNS Aliases for Network Services**（“为网络服务使用DNS别名”）: [http://www.ietf.org/rfc/rfc2219.txt?number=2219](http://www.ietf.org/rfc/rfc2219.txt?number=2219)

注3：本书中译本已由中国电力出版社出版。（编者注）

### 第21章 日志记录与使用情况跟踪

几乎所有服务器和代理都会记录处理的HTTP事务摘要，出于多种原因：跟踪使用情况、安全性、计费、错误检测等。本章简要介绍日志记录，研究通常会记录哪些HTTP事务信息以及一些常见日志格式的内容。

#### 记录内容

大多数情况下，日志记录有两个主要目的：一是查找服务器或代理存在的问题（如哪些请求失败），二是生成Web站点访问方式的统计信息。统计数据对于市场营销、计费和容量规划（如决定是否需要增加服务器或带宽）非常有用。

虽然可以记录所有HTTP事务的首部，但对于每天处理数百万个事务的服务器和代理来说，数据量巨大且难以管理。因此，通常只记录基本的信息，如HTTP方法、客户端和服务器的HTTP版本、所请求资源的URL、响应的HTTP状态码、请求和响应报文的大小、事务开始的时间戳、Referer首部和User-Agent首部的值。

HTTP方法和URL说明了请求的目的（如GET某个资源或POST某个订单），URL可以用来记录Web站点上页面的受欢迎程度。