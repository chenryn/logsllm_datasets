exiting from the evaluation of all the alternatives inside the group, the
atomic group usually provides a significant gain in performance while
evaluating a largely sized text with multiple options in alternation.
Lookahead assertions
Positive and negative lookahead assertions are zero-width assertions that allow for certain
regular expression-based checks to be performed on the text that is ahead (or on the right-
hand side) of the current position. The regex engine holds on to the current position after
evaluating the lookahead pattern. We can chain multiple lookahead expressions one after
another, but the regex engine does not move the control after checking all the lookaheads.
Lookahead assertions can help solve some complex regex problems, which are not possible
or are very difficult to solve without lookahead support. The Java regular expression
engine, like many other regular expression flavors, allows the use of variable-length
quantifiers such as * and + in lookahead patterns.
There are two types of lookahead assertions: positive lookahead and negative lookahead.
Positive lookahead
A positive lookahead assertion asserts true if the pattern inside the lookahead is matched.
The following is its syntax:
(?=...)
For example, \d+(?=##) asserts that there must be a string, ##, immediately after matching
one or more digits.
[ 97 ]
Exploring Zero-Width Assertions, Lookarounds, and Atomic Groups
Negative lookahead
A negative lookahead assertion asserts true if the pattern inside the lookahead is not
matched.
The following is its syntax:
(?!...)
For example, abc(?!xyz) asserts that there cannot be a string, xyz, immediately after
matching the string abc.
Lookbehind assertions
Positive and negative lookbehind assertions are zero-width assertions that allow for certain
regex-based checks to be performed on the text that precedes (or is on the left-hand side) of
the current position. The regex engine holds on to the current position after evaluating the
lookbehind pattern. We can chain multiple lookbehind expressions one after another, but
the regex engine does not move the control after checking all the lookbehind assertions.
Lookbehind assertions can also help solve some complex problems that are not possible or
are very difficult to solve without lookbehind support. Up to Java version 8, the Java
regular expression engine didn't allow the use of variable-length quantifiers such as * and +
in lookbehind patterns. With Java 9, the Java regex engine now allows the use of these
quantifiers in lookbehind assertions.
There are two types of lookbehind assertions: positive lookbehind and negative lookbehind.
Positive lookbehind
A positive lookbehind assertion asserts true if the pattern inside the lookbehind is matched.
Here is its syntax:
(? %s%n", s, m.replaceAll(":"));
}
}
}
After running this code, we'll get the following output:
abcd98732 => abc:d98:732
pqrn => p:qrn
qwerty12345678xyz => qw:ert:y12:345:678:xyz
123 => 123
As you can see, this code places a colon in every third position, going from right to left. Let's
see what happens during the matching of the regular expression:
(?!^) is a negative lookahead to avoid matching at the position.
(?=(.{3})+$) is a positive lookahead that finds all the positions that have one
or more three-character sets, ahead of the current position. This will first match
the position where the first : has to be inserted, then the second, and so on. This
may at first seem like something contradicting with atomic groups and the non-
backtracking behaviour of a lookahead group. But it essentially is not. It is not
contradicting because the lookahead itself is not backtracking. The regular
expression matching is backtracking and evaluates the lookahead assertion again
and again for each and every character position.
Now, suppose that we have to replace all the commas that are outside the innermost
parentheses with a semi-colon, assuming all the parentheses are balanced, not nested, and
unescaped in the input text.
To solve this problem, we can use a negative lookahead expression, such as this one:
,(?![^()]*\))
[ 102 ]
Exploring Zero-Width Assertions, Lookarounds, and Atomic Groups
This one matches a comma followed by a negative lookahead assertion that asserts false
when we have a right ) following zero or more characters and not containing ( and ).
Since we know that ( and ) are balanced, this check ensures that we match a comma that is
outside ( and ).
Here is the full code listing to see this regex in action:
package example.regex;
import java.util.regex.*;
class LookAroundExample2
{
public static void main (String[] args)
{
String input = "var1,var2,var3 (var1,var2,var3) var4,var5,var6
(var4,var5,var6)";
final Pattern p = Pattern.compile(",(?![^()]*\\))");
Matcher m = p.matcher(input);
System.out.printf("%s%n", m.replaceAll(";"));
}
}
When we run the preceding code, it gives the following output, replacing all the commas
outside the parentheses:
var1;var2;var3 (var1,var2,var3) var4;var5;var6 (var4,var5,var6)
Next, suppose that we need to validate a password string with the following constraints:
At least one uppercase English letter
At least one lowercase English letter
At least one digit
At least one special character (non-word character)
Minimum six and maximum twelve in length
No whitespace allowed anywhere
Here is the solution:
To check for six to twelve non-whitespace characters, we can use the following:
^\S{6,12}$
For the remaining conditions, we need to use multiple lookahead expressions, one for each
condition. Let's build the lookahead patterns one by one.
[ 103 ]
Exploring Zero-Width Assertions, Lookarounds, and Atomic Groups
To ensure that there is at least one uppercase letter in the input, we can use this lookahead
assertion:
(?=.*[A-Z])
This means that we have to check for the presence of an uppercase letter after zero or more
characters.
Similarly, to ensure that there is at least one lowercase letter in the input, we can use this
lookahead assertion:
(?=.*[a-z])
Similarly, to ensure there is at least one digit in the input, we can use the following:
(?=.*\d)
Similarly, to ensure there is at least one non-word character in the input, we can use the
following:
(?=.*\W)
As mentioned earlier, the order of these lookahead patterns does not matter, so we keep
them in any order in our regular expression. Putting it all together, our final regular
expression will be as follows:
^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*\W)\S{6,12}$
Here is the full Java code to make this regex work:
package example.regex;
import java.util.regex.*;
class LookAroundPasswordValidation
{
public static void main (String[] args)
{
// build a Pattern using our regex
final Pattern p = Pattern.compile(
"^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*\\W)\\S{6,12}$" );
// input strings to be tested against our regex
String[] inputs = { "abZ#45", "$$$f5P###", "abc123", "xyz-7612",
"AbC@#$qwer", "xYz@#$ 1278" };
for (String s: inputs)
{
Matcher m = p.matcher( s );
System.out.printf( "%s => %s%n", s, m.matches() );
[ 104 ]
Exploring Zero-Width Assertions, Lookarounds, and Atomic Groups
}
}
}
After compiling and running this code, we will get the following output:
abZ#45 => true
$$$f5P### => true
abc123 => false
xyz-7612 => false
AbC@#$qwer => false
xYz@#$1278 => false
This output basically shows a true value for all the strings that pass all our password rules
and false, otherwise.
Capturing text from overlapping matches
Lookahead patterns are also very useful for situations where we want to match and capture
text from overlapping matches.
Let's consider the following input string as an example:
thathathisthathathatis
Suppose that we need to count the occurrence of the string, that, in this input, including all
overlapping occurrences.
Note that there are three independent that substrings in the input string, but there are two
additional overlapping matches that we need to match and count. Here are the start-end
positions of overlapping the substring that:
Positions 0-3 3-6 10-13 13-16 16-19
A simple search using the regex that will give us a match count of three because we miss
out all the overlapping matches. To be able to match the overlapping matches, we need to
use the lookahead pattern because lookahead patterns are zero-length. These patterns don't
consume any characters; they just assert the presence of the required text ahead, based on
the patterns used inside the lookahead, and the current position doesn't change. So, the
solution is to use a lookahead regex as follows:
(?=that)
[ 105 ]
Exploring Zero-Width Assertions, Lookarounds, and Atomic Groups
Here is the full code to see this regex working in action:
package example.regex;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
class LookaheadOverlapping
{
public static void main (String[] args)
{
final String kw = "that";
final String regex = "(?=" + kw+ ")";
final String string = "thathathisthathathatis";
final Pattern pattern = Pattern.compile(regex);
final Matcher matcher = pattern.matcher(string);
int count = 0; while (matcher.find())
{
System.out.printf("Start: %d\tEnd:%d%n",
matcher.start(), matcher.start() + kw.length() -1);
count++;
}
System.out.printf("Match count: %d%n", count);
}
}
Once we run and compile the preceding class, we will get the following output:
Start: 0 End:3
Start: 3 End:6
Start: 10 End:13
Start: 13 End:16
Start: 16 End:19
Match count: 5
You can see from this output that all the Start, End positions of the overlapping matches
and, more importantly, the count of the overlapping matches, which is 5.
Here is another code listing that finds all the three character strings that have 'a' as the
middle letter and the same word character before and after the letter 'a'. For example, bab,
zaz, kak, dad, 5a5, and _a_ should be matched:
package example.regex;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
class LookaheadOverlappingMatches
{
public static void main(String[] args)
{
final String regex = "(?=(\\w)a\\1)";
[ 106 ]
Exploring Zero-Width Assertions, Lookarounds, and Atomic Groups
final String string = "5a5akaktjzazbebbobabababsab";
final Matcher matcher = Pattern.compile(regex)
.matcher(string);
int count = 0; while (matcher.find())
{
final int start = matcher.start();
final int end = start + 2;
System.out.printf("Start: %2d\tEnd:%2d %s%n",
start, end, string.substring(start,end+1));
count++;
}
System.out.printf("Match count: %d%n", count);
}
}
This code generates the following output:
Start: 0 End: 2 5a5
Start: 4 End: 6 kak
Start: 9 End:11 zaz
Start: 17 End:19 bab