        {
            if (encrypt)
            {
                do
                {
                    cur_dword = (int *)((unsigned char*)ctx->sn + offset);
                    tmp_key = &ctx->key_table[31];
                    block_size = 16;
                    *cur_dword -= ctx->key_d;
                    cur_dword[2] -= ctx->key_e;
                    do
                    {
                        fourth_dword = cur_dword[3];
                        cur_dword[3] = cur_dword[2];
                        cur_dword[2] = cur_dword[1];
                        cur_dword[1] = *cur_dword;
                        *cur_dword = fourth_dword;
                        v10 = shrl(cur_dword[1] * (2 * cur_dword[1] + 1), 8); //调换前8个比特与后24个比特
                        v14 = shrl((DWORD)cur_dword[3] * (2 * (DWORD)(cur_dword[3]) + 1), 8);
                        *cur_dword = v10 ^ shlr(*cur_dword - *(tmp_key - 1), inner_log(v14));
                        cur_dword[2] = ((DWORD)v14) ^ shlr(cur_dword[2] - *tmp_key, inner_log(v10));;
                        tmp_key -= 2;
                        v18 = block_size-- == 1;
                    } while (!v18);
                    offset += 16;
                    cur_dword[1] -= ctx->key_a;
                    cur_dword[3] -= ctx->key_b;
                } while (offset len);
            }
            else
            {
                do
                {
                    cur_dword = (int *)((unsigned char*)ctx->sn + offset);
                    tmp_key = &ctx->key_table[-1];
                    block_size = 16;
                    cur_dword[1] += ctx->key_a;
                    cur_dword[3] += ctx->key_b;
                    do
                    {
                        tmp_key += 2;
                        v10 = shrl(cur_dword[1] * (2 * cur_dword[1] + 1), 8); //调换前8个比特与后24个比特
                        v14 = shrl((DWORD)cur_dword[3] * (2 * (DWORD)(cur_dword[3]) + 1), 8);
                        int y = *cur_dword ^v10;
                        int x = shrl(y, inner_log(v14));
                        *cur_dword = x + *(tmp_key - 1);
                        int n = cur_dword[2] ^ ((DWORD)v14);
                        int m = shrl(n, inner_log(v10));
                        cur_dword[2] = m + *tmp_key;
                        fourth_dword = *cur_dword;
                        *cur_dword = cur_dword[1];
                        cur_dword[1] = cur_dword[2];
                        cur_dword[2] = cur_dword[3];
                        cur_dword[3] = fourth_dword;
                        v18 = block_size-- == 1;
                    } while (!v18);
                    *cur_dword += ctx->key_d;
                    cur_dword[2] += ctx->key_e;
                    offset += 16;
                } while (offset len);
            }
        }
    }
    char sn[64] = "11111111111111111111111111111111";
    unsigned char g_data[64] = {243, 56, 159, 56, 241, 33, 111, 152, 99, 239, 107, 106, 185, 26, 56, 181, 116, 137, 164, 250, 121, 22, 144, 200, 113, 46, 201, 99, 13, 223, 111, 77, 114, 127, 192, 105, 61, 118, 63, 238, 201, 35, 52, 118, 45, 183, 28, 56, 120, 247, 197, 41, 106, 19, 12, 188, 94, 179, 174, 182, 98, 188, 10, 56};
    int main(int argc, char* argv[])
    {
        int i;
        context ctx = { 0 };
        ctx.sn = (unsigned int*)sn;
        ctx.len = 64;
        ctx.key_a = 0x5bf76637;
        ctx.key_b = 0x4748da7a;
        memcpy(ctx.key_table, data, 4 * 32);
        ctx.key_d = 0x7faf076d;
        ctx.key_e = 0x9bd7fa4c;
        encrypt(&ctx, 1);
        encrypt(&ctx, 0);
        ctx.sn = (unsigned int*)g_data;
        for(i=0;iTypeIdx->ClassDefItem->ClassDataItem
    ->MethodIdx + ClassDataItem
    ->EncodeMethod---->code_off
关于dex的具体结构大家可以在源码dalviklibdexDexClass.h 和 dalviklibdexDexFile.h 中找到。
接下来是代码修改逻辑，有个坑点在这：这里用了随机数决定代码修改后的逻辑，由于是伪随机，所以结果可预测，需要根据原有指令码修改成可执行代码。(没有给足提示，后来被改掉了)
之后我们就知道了
    MathMethod_4 -> add;
    MathMethod_1 -> mod;
原版本是:MathMethod_4-> mod MathMethod_1->mul
//顺便说下，在某些特定API版本随机数是可以得到上面结果的不需要改(我的API18就行233333
接下来就剩下payload了
因为变换比较复杂，可以选择暴力破解。这里有两种思路，一是根据代码：将字符的ASCII码个位数和十位数分离，然后打表爆破；二是直接爆破可见字符串。
这里给出爆破可见字符串代码：
    def get_pwd(str, num):
        if(num == 1):
            for x in str:
                yield x
        else:
            for x in str:
                for y in get_pwd(str, num-1):
                    yield x + y
    def flag():
        i = 0
        for flag_1 in get_pwd(code_4,3):
            result_1 = ''
            result_2 = ''
            for i in range(32):
                a = i % len(flag_1)
                b = i % len(code_3)
                c = b + (ord(flag_1[a]) % 10)
                d = c % ord(code_3[b])
                e = c * d
                f = d ^ ord(code_3[a])
                g = e + f
                result_1 += chr(g & 0xff)
            for i in range(32):
                result_2 += code_2[int(ord(flag_1[ i % len(flag_1)]) / 10 % 10 + ord(result_1[i])) % 16]
            if (code_1 == result_2):
                print ('good')
                print (result_2)
                print (flag_1)
**I Need a Waiter**
Category:RE
题目是用 TypeScript 写的, 可以用 Generator is already executing. 报错信息搜索得知. 因此安装
TypeScript 随意编译一个带有 async/await 语法的程序即可推出程序原结构.
整个程序使用 async/await 编写, 目前的 js 调试器对这种程序都不好调试(如单步调试等方法). 所以可以使用在每个函数的开始结尾打 log
或者改写 Array.prototype.push 之类函数的进行行为分析.
使用 tsc 直接编译程序即可得到未混淆的 js 代码. (见 dist/ts1.js)
**MyDriver2**
Category:RE Score:392
一个简单的Inlinehook，hook NtCreateFile 函数。
在任意路径打开文件名为 P_giveMe_flag_233.txt 的文件超过8次，在第9次打开 P_giveMe_flag_233.txt
的时候就会在里面写入flag。 文件名进过简单的加密，加密的 key 是自己构造的一段 win64 的汇编生成。
    the flag is A_simple_Inline_hook_Drv
**uwp**
Category:RE Score:454
安装uwp需要开启开发者模式，以及开启powershell的运行权限 用powershell运行Add-AppDevPackage.ps1，安装应用。
安装后可以在windows的菜单中找到应用，打开发现一个输入框和一个按钮getflag，输入数字可以得到返回。 逆向uwp可以使用Telerik
JustDecompile这款软件，.appxbundle后缀的文件是程序主体，不能直接托进入逆，
这是打包过的程序，直接解压可以发现arm，x64，x86版的appx，可以选择x86的appx放入Telerik
JustDecompile中，找到MainPage，可以看待代码逻辑，代码非常简单，只是一个数据库查询，但数据库内容使用aes加密，密钥是
Package.get_Current().get_Id().get_FamilyName().Substring(0, 16)， 这是uwp的
Package Family
Name，是每个uwp应用独一无二的身份id，可以在安装后在C:Users(username)AppDataLocalPackages(packagename)
可以找到，或者继续解压appx在AppxManifest.xml中找到,或者。
之后解压appx中找到sqlite，解密遍历一遍，找到'RCTF{'开头的明文即flag
MainPage.xaml
    MainPage.xaml.cs
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices.WindowsRuntime;
    using Windows.Foundation;
    using Windows.Foundation.Collections;
    using Windows.UI.Xaml;
    using Windows.UI.Xaml.Controls;
    using Windows.UI.Xaml.Controls.Primitives;
    using Windows.UI.Xaml.Data;
    using Windows.UI.Xaml.Input;