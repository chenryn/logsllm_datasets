3.对象池
以上介绍的堆管理方法是最为基本的两种，实际上在一些场合，被分配对象的大小是
较为固定的几个值，这时候我们可以针对这样的特征设计一个更为高效的堆算法，称为对
程序员的自我修养一链接、装载与库
---
## Page 338
10.4本章小结
315
象池。
对象池的思路很简单，如果每一次分配的空间大小都一样，那么就可以按照这个每次请
求分配的大小作为一个单位，把整个堆空间划分为大量的小块，每次请求的时候只需要找到
一个小块就可以了。
对象池的管理方法可以采用空闲链表，也可以采用位图，与它们的区别仅仅在于它假定
了每次请求的都是一个固定的大小，因此实现起来很容易。由于每次总是只请求一个单位的
内存，因此请求得到满足的速度非常快，无须查找一个足够大的空间。
实际上很多现实应用中，堆的分配算法往往是采取多种算法复合而成的。比如对于glibc
来说，它对于小于64字节的空间申请是采用类似于对象池的方法：而对于大于512字节的
空间申请采用的是最佳适配算法：对于大于64字节而小于512字节的，它会根据情况采取
上述方法中的最佳折中策略：对于大于128KB的申请，它会使用mmap机制直接向操作系
统申请空间。
10.4本章小结
在这一章中，我们首先回顾了i386体系结构下程序的基本内存布局，并且对程序内存
结构中非常重要的两部分栈与堆进行了详细的介绍。
在介绍栈的过程中，我们学习了栈在函数调用中所发挥的重要作用，以及与之伴生的调
用惯例的各方面的知识。最后，还了解了函数传递返回值的各种技术细节。
在介绍堆的过程中，首先了解了构造堆的主要算法：空闲髓表和位图，此外，还介绍了
Windows和Linux的系统堆的管理内幕。
程序员的自我修养一链接、装载与库
---
## Page 340
运行库
11.1入口函数和程序初始化
11.2C/C++运行库
11.3运行库与多线程
11.4C++全局构造与析构
11.5fread实现
11.6本章小结
程序员的自我修养—链接、装载与库
---
## Page 341
318
第11章运行库
如果把一个程序比作一个世界，那么程序的启动无疑就是“创世”，在本章里，我们将
从程序的创世开始，接触到在程序背后另一类默默服务的团体。它们能够使得程序正常地启
动，能够使得各种我们熟悉的函数发挥作用，它们就是应用程序的运行库。
11.1入口函数和程序初始化
11.1.1程序从main开始吗
正如基督徒认为世界的诞生起于7天创世一样，任何一个合格的C/C++程序员都应该知
道一个事实：程序从main函数开始。但是事情的真相真是如此吗？如果你善于观察，就会
发现当程序执行到main函数的第一行时，很多事情都已经完成了：
【铁证1】下面是一段C语言代码：
#include 
#include 
int a = 3:
int main(int argc, char* argv[1)
int * p = (int *)malloc(sizeof(int))
printE(*ad*, a + *p) :
scanf (*sd*, p) ;
free (p) 1
从代码中我们可以看到，在程序刚刚执行到main的时候，全局变量的初始化过程已经
结束了（a的值已经确定），main函数的两个参数（argc和argv）也被正确传了进来。此外，
在你不知道的时候，堆和栈的初始化悄悄地完成了，一些系统VO也被初始化了，因此可以
放心地使用printf 和 malloc.
【铁证2】而在C++里，main之前能够执行的代码还会更多，例如如下代码：
#include 
using namespace std;
string v;
double foo[)
return 1.0;
double g = foo() :
int main()()
在这里，对象v的构造函数，以及用于初始化全局变量g的函数foo都会在main之前
程序员的自我修养—链接、装载与库
---
## Page 342
11.1入口函数和程序初始化
319
调用。
【铁证3】atexit也是一个特殊的函数。atexit接受一个函数指针作为参数，并保证在程序正
常退出（指从main里返回或调用exit函数）时，这个函数指针指向的函数会被调用。例如：
(ptOA)OO}PtOA
printf (*bye1\n*)1
inc nain()
printf (*endof main\n*);
atexit(&foo);
用atexit函数注册的函数的调用时机是在main结束之后，因此这段代码的输出是：
1eAqg
endof main
所有这些事实都在为“main创论”提供不利的证据：操作系统装载程序之后，首先运
行的代码并不是main的第一行，而是某些别的代码，这些代码负责准备好main函数执行所
需要的环境，并且负责调用main函数，这时候你才可以在main函数里放心大胆地写各种代
码：申请内存、使用系统调用、触发异常、访问IO。在main返回之后，它会记录main 函
数的返回值，调用atexit注册的函数，然后结束进程。
运行这些代码的函数称为入口函数或入口点（EntryPoint），视平台的不同而有不同的
名字。程序的人口点实际上是一个程序的初始化和结束部分，它往往是运行库的一部分。一
个典型的程序运行步骤大致如下：
·操作系统在创建进程后，把控制权交到了程序的入口，这个入口往往是运行库中的某
个入口函数。
·入口函数对运行库和程序运行环境进行初始化，包括堆、IVO、线程、全局变量构造，
·入口函数在完成初始化之后，调用main函数，正式开始执行程序主体部分。
main函数执行完毕以后，返回到入口函数，入口函数进行清理工作，包括全局变量析
构、堆销毁、关闭IVO等，然后进行系统调用结束进程。
11.1.2入口函数如何实现
大部分程序员在平时都接魅不到入口函数，为了对入口函数进行详细的了解，本节我们
将深入剖析glibc和MSVC的入口函数实现。
程序员的自我修养一链接、装载与库
---
## Page 343
320
第11章运行库
GLIBC入口函数
glibc的启动过程在不同的情况下差别很大，比如静态的glibe 和动态的glibc的差别，
glibc用于可执行文件和用于共享库的差别，这样的差别可以组合出4种情况，这里只选取
最简单的静态glibc用于可执行文件的时候作为例子，其他情况诸如共享库的全局对象构造
和析构跟例子中稍有出入，我们在本书中不一一详述了，有兴趣的读者可以根据这里的介绍
自己阅读glibc和gcc的源代码，相信能起到举一反三的效果。下面所有关于Gibc和MSVC
CRT的相关代码分析在不额外说明的情况下，都默认为静态/可执行文件链接的情况。
读者可以免费下载到Linux下glibc的源代码，在其中的子目录libc/esu里，有关于程序
启动的代码。glibc的程序入口为_start（这个入口是由ld链接器默认的链接脚本所指定的，
我们也可以通过相关参数设定白己的入口），_star由汇编实现，并且和平台相关，下面可以
单独看i386的_start 实现：
1ibc\8ysdeps\i386\e1f\Start S:
_start :
xor1 tebp. $ebp
novl tesp, tecx
popl tesi
push1 slibc_csu_finf
push1 %ecx
puebl kesi
cal1 _libc_start_main
pushl main
h1t
这里省略了一些不重要的代码，可以看到_start 函数最终调用了名为_lib_star_main 的
函数。加粗部分的代码是对该函数的完整调用过程，其中开始的7个压栈指令用于给函数传
递参数。在最开始的地方还有3条指令，它们的作用分别为：
·xor%ebp，%cbp：这其实是让ebp寄存器清零，xor的用处是把后面的两个操作数异或，
结果存储在第一个操作数里，这样做的目的表明当前是程序的最外层函数。
ebp设为0正好可以体现出这个最外层函数的尊贵地位。
栈中，按照其压栈的方法，实际上栈顶的元素是argc，而接着其下就是argv和环境变
量的数组。图11-1为此时的栈布局，其中虚线骼头是执行pop%esi之前的栈项（%esp），
而实线箭头是执行之后的栈顶（%esp）。
程序员的自我修养一链接、装载与库
---
## Page 344
11.1入口函数和程序初始化
321
old
找的增长方向
dso
esp
UAUS
AUE
图11-1环境变量和参数数组
pop %esi将argc存入了esi，而 mov %esp、%ecx将栈项地址（此时就是argv和环境变
量（env）数组的起始地址）传给%ecx，现在%esi指向argc，%ecx指向argv及环境变量数
组。
综合以上分析，我们可以把_start改写为一段更具有可读性的伪代码：
void _8tart ()
int argc  pop fron stack
tebp = 0;
_libe_atart_main( main, argc, argv, -_libc_csu_init, _libc_csu_fini,
char** argv = top of stack;
edx, top of stack 1;
F
其中argv除了指向参数表外，还隐含紧接着环境变量表，这个环境变量表要在
_libc_start_main 里从 argv 内提取出来。
环境变量
环境变量是存在于系统中的一些公用数据，任何程序都可以访问。通常来说，环境变量存
储的都是一些系统的公共信息，例如系统搜索路径，当前OS版本等。环境变量的格式为
key=value的字符串，C语言里可以使用getenv这个函数来获取环境变量信息。
在Windows里，可以直接在控制面板一系统一高级→环境变量查阅当前的环境变量，
而在Linux下，直接在命令行里输入export即可。
实际执行代码的函数是_libc_start_main，由于代码很长，下面我们一段一段地看：
_start -> _libc_start_main1
int _libc_start_nain (
int (*main)(int, char **, char **)。
int_arge,
char *
_typeof (main) init,
_unbounded *unbounded ubp_av,
void (*rtld_fini) (void),
void (*fini)(void),
void *_unbounded stack_end)
程序员的自我修养一链接、装载与库
---
## Page 345
322
第11章运行库
#i f
char **argv;
 @efine argv ubp_av
#else
lendif
int result;
这是_libc_start_main的函数头部，可见和_start 函数里的调用一致，一共有7个参数，
其中main 由第一个参数传入，紧接着是argc和argv（这里称为ubp_av，因为其中还包含了
环境变量表）。除了main的函数指针之外，外部还要传入3个函数指针，分别是：
·i
init：main 调用前的初始化工作。
fini：main 结束后的收尾工作。
rtld_fini：和动态加载有关的收尾工作，rtld 是runtime loader 的缩写。
最后的 stack_end 标明了栈底的地址，即最高的栈地址。
pq
GCC支持bounded类型指针（bounded指针用_bounded关键字标出，若默认为
bounded指针，则普通指针用_unbounded 标出），这种指针占用3个指针的空间，
在第一个空间里存储原指针的值，第二个空间里存储下限值，第三个空间里存储上限
值。ptrvalue、ptrlow、ptrhigh分别返国这3个值，有了3个值以后，内存越
界错误便很容易查出来了。并且要定义_BOUNDED_POINTERS_这个宏才有作用，
否则这3个宏定义是空的。
不过，尽管bounded指针看上去似乎很有用，但是这个功能却在2003年被去掉了。
因此现在所有关于bounded指针的关键字其实都是一个空的宏。鉴于此，我们接下来
在讨论libc代码时都默认不使用bounded指针即不定义_BOUNDED_POINTERS_l
接下米的代码如下：
char** ubp_ev  kubp_av[arge + 1];
__1ibc_stack_end ± stack_end;
INIT_ARGV_and_ENVIRON;
INIT_ARGV_and_ENVIRON这个宏定义于libc/sysdeps/generic/bp-start.h，展开后本段代
码变为：
char** ubp_ev = &ubp_av [arge + 11:
environ = ubp_ev;
_1ibc_stack_end - stack_end;
图11-2实际上就是我们根据从_start 源代码分析得到的栈布局，让_environ 指针指向
原来紧跟在argv数组之后的环境变量数组。
程序员的自我修养一链接、装载与库
---
## Page 346
11.1入口函数和程序初始化
323
_environ
栈的增长方向
。
U AUe
env 0
0