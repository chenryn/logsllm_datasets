plicative law, ∗∗ is the exponentiation operator based on this multi-
plication law (p ∗∗ x is px ). The operators % and − and < are standard
over natural integers. The little_bytes len v function returns the lit-
tle endian encoding of the integer value v on len bytes.
6 VERIFYING ELLIPTIC CURVE OPERATIONS
6.1 Curve25519
Curve25519 [2, 14] a Montgomery elliptic curve designed for use
in a Diffie-Hellman (ECDH) key exchange. The key operation over
this curve is the multiplication nP of a public curve point P by a
secret scalar n. A distinctive property of this family of curves is
only the x-coordinate of P is needed to compute the x-coordinate
of nP. This leads to both efficient computations and small keys.
The simplicity of the algorithm and its adoption in protocols
like TLS and Signal have made it a popular candidate for formal
verification. Several other works have been tackling Curve25519.
However, our implementation is, to the best of our knowledge, the
first implementation to verify the full byte-level scalar multiplica-
tion operation. Chen et al. [25] verified one step of the Montgomery
ladder for a qhasm implementation, but did not verify the ladder al-
gorithm or point encodings; Zinzindohoue et al. [37] implemented
and verified the Montgomery ladder for Curve25519 and two other
curves, but they did not verify the point encodings. Our Curve25519
implementation is verified to be fully RFC-compliant.
Figure 9 shows the F∗ specification for the point encoding and
decoding functions that translate between curve points and byte
arrays. Implementing and verifying these functions is not just a
proof detail. Compliance with encodePoint avoids the missing re-
duction bug that Adam Langley described in donna_c64. The first
line of encodePoint computes x as a result of the modular multi-
plication operation fmul (see §2). Hence, the result of encodePoint
is a little-endian encoding of a number strictly less than 2255 − 19.
Consequently, a Low∗ implementation of Curve25519 that forgets
to perform a modular reduction before the little-endian encoding
does not meet this specification and so will fail F∗ verification.
Ed25519. The Ed25519 signature scheme [3, 16] is an EdDSA
algorithm based on the twisted Edwards curve birationally equiva-
lent to Curve25519. Despite their close relation, the implementation
of Ed25519 involves many more components than Curve25519. It
uses a different coordinate system and different point addition
and doubling formulas. The signature input is first hashed using
the SHA-512 hash function, which we verify separately. The sig-
nature operation itself involves prime-field arithmetic over two
primes: the Curve25519 prime 2255−19 and a second non-Mersenne
prime 2252 + 27742317777372353535851937790883648493. This sec-
ond prime does not enjoy an efficient modulo operation, so we im-
plement and verify a slower but generic modulo function using the
Barrett reduction. We thus obtain the first verified implementation
of Ed25519 in any language. In terms of size and proof complexity,
Ed25519 was the most challenging primitive in HACL∗; implement-
ing and verifying the full construct took about 3 person-weeks,
despite our reuse of the Curve25519 and SHA-512 proofs.
Our implementation is conservative and closely follows the RFC
specification. It is faster than the naive Ed25519 reference imple-
mentation (ref) in TweetNaCl, but about 2.5x slower than the
optimized ref10 implementation, which relies on a precomputed
table containing multiples of the curve base point. Our code does
not currently use precomputation. Using precomputed tables in a
provably secret independent way is non-trivial; for example, [32]
demonstrate side-channel attacks on Ed25519 precomputations on
certain platforms. We leave the implementation and verification of
secure precomputation for Ed25519 as future work.
7 MEETING HIGH-LEVEL CRYPTO APIS
HACL∗ offers all the essential building blocks for real-world cryp-
tographic application: authenticated encryption, (EC)DH key ex-
change, hash functions, and signatures. The C code for each of our
primitives is self-contained and easy to include in C applications.
For example, we are currently engaged in transferring multiple
verified primitives into Mozilla’s and RedHat’s NSS cryptographic
library.
In the rest of this section, we describe three more advanced ways
of integrating our verified library in larger software developments.
NaCl. The APIs provided by mainstream cryptographic libraries
like OpenSSL are too complex and error-prone for use by non-
experts. The NaCl cryptographic API [17] seeks to address this
concern by including a carefully curated set of primitives and only
allowing them to be used through simple secure-by-default con-
structions, like box/box_open (for public-key authenticated encryp-
tion/decryption). By restricting the usage of cryptography to well-
understood safe patterns, users of the library are less likely to fall
into common crypto mistakes.
The NaCl API has several implementations including TweetNaCl,
a minimal, compact, portable library, and Libsodium, an up-to-date
optimized implementation. HACL∗ implements the full NaCl API
and hence can be used as a drop-in replacement for any application
that relies on just the NaCl functions in TweetNaCl or Libsodium.
Our code is as fast as libsodium’s unvectorized C code on 64-bit
Intel platforms, and is many times faster than TweetNaCl on all
platforms. Hence, we offer the first high-performance verified C
implementation of NaCl.
TLS 1.3. TLS 1.3 [4] will soon become the new standard for secure
communications over the internet. HACL∗ implements all the prim-
itives needed for one TLS 1.3 ciphersuite: IETF Chacha20Poly1305
authenticated encryption with associated data (AEAD), SHA-256
and HMAC-SHA-256, Curve25519 key exchange, and Ed25519 sig-
natures. We do not yet implement RSA or ECDSA signatures which
are needed for X.509 certificates.
OpenSSL implements the current TLS 1.3 draft and hence uses
many of these primitives; OpenSSL does not yet implement Ed25519.
Algorithm
Salsa20
Chacha20
Chacha20-Vec
SHA-256
SHA-512
HMAC
Bignum-lib
Poly1305
X25519-lib
Curve25519
Ed25519
AEAD
SecretBox
Box
Total
70
70
100
96
120
38
-
45
-
73
148
41
-
-
801
651
691
1656
622
737
215
1508
3208
3849
1901
7219
309
171
188
22,926
(C loc)
372
243
355
313
357
28
-
451
-
798
2479
100
132
270
7,225
(s)
280
336
614
798
1565
512
264
915
768
246
2118
606
62
43
9127
Spec
(F∗ loc)
Code+Proofs C Code Verification
(Low∗ loc)
Table 1: HACL∗ code size and verification times
OpenSSL allows other libraries to provide cryptographic implemen-
tations via an engine interface. We package HACL∗ as an OpenSSL
engine so that our primitives can be used within OpenSSL and
by any applications built on top of OpenSSL. We use this engine
to compare the speed of our code with the native implementa-
tions in OpenSSL. Our Curve25519 implementation is significantly
faster than OpenSSL, and our other implementations are as fast as
OpenSSL’s C code, but slower than its assembly implementations.
miTLS. A key advantage of developing HACL∗ in F∗ is that it
can be integrated into larger verification projects in F∗. For exam-
ple, the miTLS project is developing a cryptographically secure
implementation of the TLS 1.3 protocol in F∗. Previous versions
of miTLS relied on an unverified (OpenSSL-based) cryptographic
library, but the new version now uses HACL∗ as its primary cryp-
tographic provider. The functional correctness proofs of HACL∗
form a key component in the cryptographic proofs of miTLS. For
example, our proofs of ChaCha20 and Poly1305 are composed with
cryptographic assumptions about these primitives to build a proof
of the TLS record layer protocol [27]. In the future, we plan to build
simpler verified F∗ applications, that rely on HACL∗’s NaCl API.
8 EVALUATION AND DISCUSSION
In this section, we assess the coding and verification effort that
went into the HACL∗ library, and evaluate its performance relative
to state-of-the-art cryptographic libraries.
Coding and Verification Effort. Taking an RFC and writing a
specification for it in F∗ is straightforward; similarly, taking inspi-
ration from existing C algorithms and injecting them into the Low∗
subset is a mundane task. Proving that the Low∗ code is memory
safe, secret independent, and that it implements the RFC specifi-
cation is the bulk of the work. Table 1 lists, for each algorithm,
the size of the RFC-like specification and the size of the Low∗ im-
plementation, in lines of code. Specifications are intended to be
read by experts and are the source of “truth” for our library: the
smaller, the better. The size of the Low∗ implementation captures
both the cost of going into a low-level subset (meaning code is more
imperative and verbose) and the cost of verification (these include
lines of proof). We also list the size of the resulting C program, in
lines of code. Since the (erased) Low∗ code and the C code are in
close correspondence, the ratio of C code to Low∗ code provides a
good estimate of code-to-proof ratio.
One should note that a large chunk of the bignum verified code
is shared across Poly1305, Curve25519 and Ed25519, meaning that
this code is verified once but used in three different ways. The
sharing has no impact on the quality of the generated code, as
we rely on KreMLin to inline the generic code and specialize it
for one particular set of bignum parameters. The net result is that
Poly1305 and Curve25519 contain separate, specialized versions
of the original Low∗ bignum library. Chacha20 and Salsa20, just
like SHA-256 and SHA-512, are very similar to each other, but the
common code has not yet been factored out. We intend to leverage
recent improvements in F∗ to implement more aggressive code
sharing, allowing us to write, say, a generic SHA-2 algorithm that
can be specialized and compiled twice, for SHA-256 and SHA-512.
Our estimates for the human effort are as follows. Symmetric
algorithms like Chacha20 and SHA2 do not involve sophisticated
math, and were in comparison relatively easy to prove. The proof-
to-code ratio hovers around 2, and each primitive took around one
person-week. Code that involves bignums requires more advanced
reasoning. While the cost of proving the shared bignum code is
constant, each new primitive requires a fresh verification effort. The
proof-to-code ratio is up to 6, and verifying Poly1305, X25519 and
Ed25519 took several person-months. High-level APIs like AEAD
and SecretBox have comparably little proof substance, and took on
the order of a few person-days.
Finally, we provide timings, in seconds, of the time it takes to
verify a given algorithm. These are measured on an Intel Xeon
workstation without relying on parallelism. The total cost of one-
time HACL∗ verification is a few hours; when extending the library,
the programmer writes and proves code interactively, and may wait
for up to a minute to verify a fragment depending on its complexity.
The HACL∗ library is open source and is being actively devel-
oped on GitHub. Expert users can download and verify the F∗ code,
and generate the C library themselves. Casual users can directly
downloaded the generated C code. The full C library is about 7Kloc
and compresses to a 42KB zip file. Restricting the library to just
the NaCl API yields 5Kloc, which compresses to a 25KB file. For
comparison, the TweetNaCl library is 700 lines of C code and com-
presses to 6Kb, whereas Libsodium is 95Kloc (including 24K lines of
pure C code) and compresses to a 1.8MB distributable. We believe
our library is quite compact, auditable, and easy to use.
Measuring Performance. We focus our performance measure-
ments on the popular 64-bit Intel platforms found on modern lap-
tops and desktops. These machines support 128-bit integers as well
as vector instructions with up to 256-bit registers. We also measured
the performance of our library on a 64-bit ARM device (Raspberry
Pi 3) running both a 64-bit and a 32-bit operating system.
On each platform, we measured the performance of the HACL*
library in several ways. First, for each primitive, we uses the CPU
performance counter to measure the average number of cycles
needed to perform a typical operation. (Using the median instead of
libsodium TweetNaCl OpenSSL (asm)
12.00
8.06
8.41
6.96
12.46
15.28
-
-
Algorithm
SHA-256
SHA-512
Salsa20
ChaCha20
Poly1305
Curve25519
Ed25519 sign
Ed25519 verify
AEAD
SecretBox
Box
HACL*
13.43
8.09
6.26
6.37 (ref)
2.87 (vec)
2.19
154,580
63.80
57.42
8.56 (ref)
5.05 (vec)
8.23
21.24
OpenSSL
16.11
10.34
-
7.84
2.16
358,764
-
-
8.55
-
-
2.48
162,184
24.88
32.27
9.60
11.03
21.04
32.65
2,108,716
286.25
536.27
-
47.75
148.79
7.77
5.28
-
1.24
0.67
-
-
-
2.00
-
-
Table 2: Intel64-GCC: Performance Comparison in cycles/byte on an Intel(R) Xeon(R) CPU E5-1630 v4 @ 3.70GHz running
64-bit Debian Linux 4.8.15. All measurements (except Curve25519) are for processing a 16KB message; for Curve25519 we
report the number of cycles for a single ECDH shared-secret computation. All code was compiled with GCC 6.3. OpenSSL
version is 1.1.1-dev, compiled with no-asm, which disables assembly code; Libsodium version is 1.0.12-stable, compiled with
–disable-asm, which disables assembly code and platform-specific optimizations; TweetNaCl version is 20140427.
the average yielded similar results.) Second, we used the SUPERCOP
benchmarking suite to compare HACL∗ with state-of-the-art as-
sembly and C implementations. Third, we used the OpenSSL speed
benchmarking tool to compare the speed of the HACL∗ OpenSSL
engine with the builtin OpenSSL engine. In the rest of this section,
we describe and interpret these measurements.
Performance on 64-bit Platforms. Table 2 shows our cycle mea-
surements on a Xeon workstation; we also measured performance
on other Intel processors, and the results were quite similar. We
compare the results from HACL∗, OpenSSL, and two implementa-
tions of the NaCl API: Libsodium and TweetNaCl. OpenSSL and
Libsodium include multiple C and assembly implementations for
each primitive. We are primarily interested in comparing like-for-
like C implementations, but for reference, we also show the speed
of the fastest assembly code in OpenSSL. In the Appendix, Table 4
ranks the top performing SUPERCOP implementations on our test
machine, and Table 8 displays the OpenSSL speed measurements.