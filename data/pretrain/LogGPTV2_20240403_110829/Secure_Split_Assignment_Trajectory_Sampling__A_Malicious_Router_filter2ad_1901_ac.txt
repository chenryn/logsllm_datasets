aggregated, C,,,, 
decreases beyond r3. 
C,,,, 
represents the number of  normal trajectories Sam- 
pled from each router.  Note that G,,,  is maintained in the 
backend engine, not in each router, and updated when trajec- 
tories are aggregated in the backend engine. 
Consecutive  Malicious  Routers:  Although  there  might  be 
other colluding routers before r, as shown in scenario 1, we 
first examine Ssuspzctous. Among all the consecutive collud- 
ing routers, the last one must be in Ssuspzcious. If the routers 
before r, continue to behave maliciously, they  will be even- 
tually detected one by  one.  In summary, if  there is a correct 
node at the end of the colluding routers, dl colluding routers 
are detected. 
4.5. Pinpointing Malicious Routers 
Once trajectories are aggregated, we check for inconsistent 
trajectories in each  aggregation and pinpoint a  set of  suspi- 
cious routers.  We  show the  algorithm in Figure 5.  To find 
inconsistent trajectories, we compare CpTi,'s  for two routers 
{ri, r j )  (i  1) 
nodes, from rbl to rb,,  if there are equal-cost multi-paths or 
routing changes.  In this case, we compare C,i, 
for ri with 
the sum of  the CPri,'s  for all the nodes branchtng from rj. 
Cprirn [lt][rbk]) > THprim)r 
Thus, if ((Cprirn[l~] [ri] - 
we suspect the set {ri) U {rbk : 1 5 k  5 n). Then, from each 
of  rbk, we resume the detection process.  Figure 8 shows an 
example where node 4 branches into node A and node D. The 
number below  a node represents the primary counter CDri, 
for the node. We assume that node 4,  A, and D have the same 
hash  value.  The  detection process  is running at node 4.  If 
(100 - (30 + 40) > THWim), both node A and D along with 
node 4 are reported as suspicious. We then resume the detec- 
tion process from node A and D. 
.  . 
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:59 UTC from IEEE Xplore.  Restrictions apply. 
Figure 8.  Suspicious  region  when  an  aggregation 
branches into two paths. 
5. Security Analysis 
In  this section, we address a variety of possible scenarios 
that could be used to circumvent or confuse SATS. For each 
scenario, we show how  SATS detects the attack and suggest 
some countermeasures, if necessary. 
5.1. Dropping of Report Packets and Misreporting 
Although report packets  are  sent to  the  backend  engine 
through  encrypted  and  authenticated channels,  a  malicious 
router may not forward the reports of  other routers.  This be- 
havior is detected as a normal packet drop as reports are trans- 
mitted in packets and can thus be sampled. In an extreme case 
(Figure I), a malicious router, r4, on the way  to the backend 
engine can drop all the report packets from a set of  routers, 
{rl: T Z ;  r3).  If  the backend  engine does not receive any re- 
port from a router ri, the routers on the  way  from ri to the 
backend engine are assumed to be suspicious and examined. 
In this example, {rl; r4}, (r2; r4} and { r s ,  r4} are in the sus- 
picious regions.  Among the routers in the suspicious regions, 
the router that overlaps the most, router T * ,  is examined first. 
If  r* keeps dropping report packets, it will be the first router 
to be examined and detected. 
If  a malicious router does not sample some of the packets 
in  its  sampling range,  or  samples wrong packets, the corre- 
sponding labels are not reported.  It results in  an inconsistent 
trajectory as well. 
5.2. Label Collision Attack 
A malicious router, r ,  can modify a packet p with label I 
into another packet p'  with the same label I, if r can find pf 
where  /zlabel  (p')  = hlabel (P) = 1.  Then, the trajectory of p 
will not end early at r. Thus, the trajectory appears complete, 
and r can go undetected.  In order to prevent this attack, we 
use a 2nd-preimage resistant hash function (for a given value 
x ,  it is computationally infeasible to find a x f  # x  such that 
h ( x f )  = IL(x).) to generate labels.  Popular checksum algo- 
rithms, such as MD-5  or a universal one-way hash function 
' ~ o t e  that 2nd-preimage resistance is different from collision resistance, 
where  x is  not  given,  and  both  of  x and  x f  are  to  be  chosen  such  that 
h(xf) = h(x). Although  MD-5 is  not collision  resistant,  it  is  still  2nd- 
preimage resistant. 
hashvaluesin sampling rangel 4.5) 
{1,2,3, 
.
.
.
{1.6,7,  :{2.6,10,i  {3,7,10,i{4,8,11,, f5,9,12: 
 . :   .  . :  
i  13.14)  i13.15)  i  14.151 i 
.
.
i  1 1 . 1 ~ ~  
.
.
i  8.9) 
.
.
.
.
.
.
.
1 
Trajectory 0 (8) 
........................................... 
; .............. 
i 
Trajectory 1 (8) 
........... _ 
.
.......................................................  i ................. i.... .............. + ........................... ; 
.
;
:
Trajectory 2 (8) 
i TTL.., 
.
i
:
.
1 
, 
i 
.
... 
Trajectory 3 (8) 
Primary Counter, cmm[sl/ WA 
.
.
; 
' - i i  
........ ': "....  ..........~ ...... i ...... f l  ...... i.. .............. ; 
'  3. .... '/ rn  i 
'5, 
: 
i 
, 
:
i  "<w~'i 
...  1  :  . . . .  
i 
... :  :...' 
.... 
i 
1  m 
i 
: 
i 
:
4 
. 
+ l  
,.J 
i 
i 
j 
+ ................. I-i 
i- 
i 
: 
1 
polnts where TTLs are wppDsed to @re 
Figure 9. Solution to reduce the false positives due 
to TTL adjusted packets. 
with  stronger security and  statistical properties  [I21 can be 
used.  Although we use a  cryptographic label hash function 
hlabel (), the selection hash function, h,,l,,ti,(), 
remains the 
same as that of TS. 
5.3. TTL Modification 
Changing  the  TTL  value  to  a  very  low  number  could 
cause a packet to be dropped by other legitimate downstream 
routers.  This behavior would divert attention away from the 
real  attacker.  Such changes would not be caught by  CFim 
as hlabel() does not operate over variant fields including TTL. 
This behavior can be prevented by  reporting the TTL value, 
along with a label, at each sampling node.  If  the difference 
between the TTL  values  from  two nodes are more  than  the 
number of hops between the nodes, these nodes are suspects. 
Some legitimate packets may  also be detected as anoma- 
lous, especially the packets where TTL is adjusted so that they 
can be dropped prematurely (e.g.,  traceroute packets).  If the 
ratio of these packets is high enough to cause false positives, 
we can compensate for the effect by incrementing the CPri,'s 
for the nodes after the point where the TTL is supposed to ex- 
pire.  Figure 9 illustrates such an example. We assume all the 
trajectories are sampled from the hash value 8. Thus, we only 
add to Cprim[8]'s.  Since trajectories  1 and 2 end where the 
TTL's  are supposed to expire, the additions to Cp,i,'s 
are the 
same as trajectory 0 when they are aggregated.  On the other 
hand, trajectory 3 indicates that it ended earlier. 
6. Evaluation 
We  evaluated the  detection rate  and  incremental deploy- 
ment property of  SATS using simulation and present the re- 
sults here.  We  used  14 topologies with various node degrees 
and network diameters: four are published by real networks, 
and the rest are generated by  Georgia Tech's  topology gen- 
erator using either random or Waxman models  [6].  We  did 
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:59 UTC from IEEE Xplore.  Restrictions apply. 
Table 1. Summary of topologies used in our evalua- 
tion. 
Topology 
ATT 
CENIC 
Berkeley 
CMU 
Waxmani 
Random1 
Random2 
Waxman2 
No.  of  No.  of 
Nodes 
Edges 
144 
54 
112 
250 
286 
374 
712 
1004 
54 
25 
43 
102 
100 
100 
100 
100 
Node 
Degree 
1, 1.5,6 
1,2,4 
1, 1,6.5 
1, 1,4.3 
1,3,5 
2,3,6 
4,7,10 
6, 10, 14 
No. Nodes on 
Link 
Shortest Path  Menic? 
5,7,9 
5 , 7 , 9  
4,5,6 
4 , 6 , 6  
4 , 6 , 8  
3,5,6 
3,4,4 
2,3,4 
No 
Yes 
Yes 
No 
No 
No 
No 
No 
not use the transit-stub model because this evaluation is for 
SATS in a single autonomous system. Eight of the 14 topolo- 
gies are summarized in Table 1. The three numbers under the 
"Node  Degree"  and "No.  Nodes on Shortest Path" columns 
denote  the  10th-percentile, median  and  90th-percentile val- 
ues,  respectively.  In  our simulation,  for each  topology,  we 
compute the shortest path between each pair of  edge routers 
to be the path taken between the routers.  If  link metrics are 
available for the topology, we use it in the shortest path calcu- 
lation. Otherwise, we assume all links have equal weights. 
6.1. Probability of Complete Avoidance 
In Single Range Assignment, a malicious router can com- 
pletely evade detection by targeting packets whose hashes fall 
outside one universal sampling range. In this section, we show 
that it is very difficult for such an attack to go undetected in 
Split Range Assignment. 