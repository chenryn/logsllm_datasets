### 优化后的文本

#### 聚合和减少
- \( C \) 的值在 \( r_3 \) 之后减少。
- \( C \) 表示从每个路由器采样的正常轨迹数量。请注意，\( G \) 是在后端引擎中维护的，而不是在每个路由器中，并且当轨迹在后端引擎中聚合时会更新。

#### 连续恶意路由器
尽管在 \( r \) 之前可能存在其他共谋路由器（如场景1所示），我们首先检查 \( S_{\text{suspicious}} \)。在所有连续共谋的路由器中，最后一个必须位于 \( S_{\text{suspicious}} \) 中。如果 \( r \) 之前的路由器继续表现出恶意行为，它们最终会被逐一检测出来。总之，如果在共谋路由器的末端存在一个正确的节点，则所有共谋路由器都会被检测到。

#### 精确定位恶意路由器
一旦轨迹被聚合，我们会检查每个聚合中的不一致轨迹，并精确定位一组可疑路由器。图5展示了该算法。为了找到不一致的轨迹，我们比较两个路由器 \( (r_i, r_j) \) 的 \( C_{\text{pri}} \) 值。如果存在等成本多路径或路由变化，我们将从 \( r_{b1} \) 到 \( r_{bn} \) 的节点进行比较。在这种情况下，我们将 \( r_i \) 的 \( C_{\text{pri}} \) 与从 \( r_j \) 分支的所有节点的 \( C_{\text{pri}} \) 之和进行比较。因此，如果 \( (C_{\text{pri}}[l][r_i] - \sum_{k=1}^{n} C_{\text{pri}}[l][r_{bk}]) > \text{TH}_{\text{pri}} \)，我们怀疑集合 \( \{r_i\} \cup \{r_{bk} : 1 \leq k \leq n\} \)。然后，从每个 \( r_{bk} \) 开始，我们继续进行检测过程。图8展示了一个例子，其中节点4分支成节点A和节点D。节点下方的数字表示该节点的主要计数器 \( C_{\text{pri}} \)。假设节点4、A和D具有相同的哈希值。检测过程正在节点4上运行。如果 \( (100 - (30 + 40)) > \text{TH}_{\text{pri}} \)，则节点A和D以及节点4将被报告为可疑。然后，我们从节点A和D继续进行检测过程。

#### 安全分析
本节讨论了可能用于规避或混淆SATS的各种情况。对于每种情况，我们将展示SATS如何检测攻击并提出必要的对策。

##### 报告包丢弃和错误报告
虽然报告包通过加密和认证通道发送到后端引擎，但恶意路由器可能不会转发其他路由器的报告。这种行为被视为正常的包丢失，因为报告是通过包传输的，可以被采样。在极端情况下（如图1所示），恶意路由器 \( r_4 \) 在通往后端引擎的路上可以丢弃来自一组路由器 \( \{r_1, r_2, r_3\} \) 的所有报告包。如果后端引擎没有收到某个路由器 \( r_i \) 的任何报告，则从 \( r_i \) 到后端引擎路上的路由器将被视为可疑并进行检查。在这个例子中，\( \{r_1, r_4\} \)、\( \{r_2, r_4\} \) 和 \( \{r_3, r_4\} \) 都在可疑区域。在可疑区域内的路由器中，重叠最多的路由器 \( r^* \) 将首先被检查。如果 \( r^* \) 继续丢弃报告包，它将是第一个被检查和检测的路由器。

如果恶意路由器在其采样范围内不采样某些包，或者采样错误的包，相应的标签将不会被报告。这也会导致不一致的轨迹。

##### 标签碰撞攻击
恶意路由器 \( r \) 可以将带有标签 \( l \) 的数据包 \( p \) 修改为另一个带有相同标签 \( l \) 的数据包 \( p' \)，前提是 \( r \) 可以找到 \( p' \)，使得 \( h_{\text{label}}(p') = h_{\text{label}}(p) = l \)。这样，\( p \) 的轨迹不会在 \( r \) 处提前结束，从而显得完整，使 \( r \) 无法被检测到。为了防止这种攻击，我们使用2nd-preimage抗性哈希函数来生成标签（给定值 \( x \)，计算上不可行找到 \( x' \neq x \) 使得 \( h(x') = h(x) \)）。常用的校验和算法，如MD-5或通用单向哈希函数，尽管不是碰撞抗性的，但仍然是2nd-preimage抗性的。

##### TTL修改
将TTL值改为非常低的数值可能会导致其他合法的下游路由器丢弃数据包。这种行为会转移对真正攻击者的注意力。这种行为不会被 \( C_{\text{prim}} \) 捕获，因为 \( h_{\text{label}} \) 不处理包括TTL在内的可变字段。可以通过在每个采样节点报告TTL值来防止这种行为。如果两个节点之间的TTL值差异大于节点之间的跳数，则这些节点被视为可疑。一些合法的数据包也可能被检测为异常，特别是那些调整TTL以便提前丢弃的数据包（例如，traceroute数据包）。如果这些数据包的比例足够高以至于引起误报，我们可以通过增加节点在TTL预期到期点之后的 \( C_{\text{prim}} \) 来补偿这种影响。图9展示了这样一个例子。假设所有轨迹都从哈希值8采样。因此，我们只增加 \( C_{\text{prim}}[8] \)。由于轨迹1和2在TTL预期到期的地方结束，因此在聚合时对 \( C_{\text{prim}} \) 的增加与轨迹0相同。另一方面，轨迹3表明它提前结束了。

#### 评估
我们通过模拟评估了SATS的检测率和增量部署特性，并在此呈现结果。我们使用了14个不同节点度和网络直径的拓扑：其中四个是真实网络发布的，其余的是由Georgia Tech的拓扑生成器使用随机模型或Waxman模型生成的 [6]。我们没有使用过境-存根模型，因为这次评估是针对单个自治系统中的SATS。表1总结了14个拓扑中的8个。"节点度"和"最短路径上的节点数"列下的三个数字分别表示第10百分位、中位数和第90百分位的值。在我们的模拟中，对于每个拓扑，我们计算每对边缘路由器之间的最短路径作为路由器之间的路径。如果拓扑中提供了链路度量，则在最短路径计算中使用它。否则，我们假设所有链路具有相等的权重。

##### 单一范围分配中的完全避免概率
在单一范围分配中，恶意路由器可以通过针对哈希值落在一个全局采样范围之外的数据包来完全逃避检测。在本节中，我们展示了在分裂范围分配中，这种攻击很难未被检测到。