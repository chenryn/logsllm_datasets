# Title: Implementing ACL-Based Policies in XACML

## Authors
Günter Karjoth, Andreas Schade, and Els Van Herreweghen

## Conference
2008 Annual Computer Security Applications Conference

## Abstract
XACML is widely used as a policy exchange mechanism, with decision engines available and verification tools under development. However, no support exists for legacy access control systems. To explore the feasibility of supporting such systems, we designed and implemented a mapping from the IBM Tivoli Access Manager (TAM) policy language to XACML. Despite TAM's simpler, ACL-based policy language, encoding its elements and decision logic within XACML proved to be non-trivial. We achieved this by employing novel uses of XACML features.

## 1. Introduction
The Extensible Access Control Markup Language (XACML), an OASIS standard ratified in 2005, defines both a policy language and an access control decision request/response language, both in XML [6]. It also includes a high-level architecture defining the roles and data flow between entities involved in making authorization decisions. Authorizations are expressed as positive or negative rules, possibly subject to conditions. Rules are combined into policies, and policies can be combined into policy sets. Various combining algorithms aggregate individual results from rules, policies, or policy sets, expressing logical operations on the results and supporting federated administration of policies on shared resources.

Recently, XACML has gained significant attention from both academia and industry. At the Burton Group’s 2007 Catalyst Conference North America, eight XACML vendors demonstrated fundamental interoperability in two usage scenarios: policy exchange and authorization decision processing [1].

While interest in and adoption of XACML continue to grow, not all application areas are fully identified. XACML is commonly used for policy exchange, and decision engines are being developed [10], but XACML policy editing tools are still lacking. Tools like Margrave [4] have been developed for verifying XACML policies, and in [14], XACML policies are derived from business process models. For wide market penetration, XACML must also support existing legacy access control systems, demonstrating platform independence. To manage access control policies in heterogeneous computing environments centrally, there is a need to import (translate) these policies into XACML. While several translations of XACML into other formats exist, mainly for verification, there is limited work in the reverse direction, with the exception of translating Java PolicyFile policies into XACML [1].

## 2. Tivoli Access Manager Policy Semantics
In this section, we describe the relevant aspects of Tivoli Access Manager (TAM) for translation into XACML. A detailed and formal description of TAM’s underlying access control model is provided in [8].

### 2.1 Access Control Elements
TAM uses access control lists (ACLs), protected object policies (POPs), and authorization rules (ARules) to control access. An ACL grants authorizations to subjects, which can be single users or groups. Groups are sets of individual users and cannot be nested, but a user may belong to multiple groups. Additionally, there are two special ACL entries: `any-other` for any authenticated user and `unauthenticated` for any unauthenticated user. A POP is a set of predefined conditions evaluated on attribute-value pairs, imposing restrictions on the request or providing information to the resource manager. For example, a POP may limit access to a specific time period or instruct the resource manager to enforce a certain audit level.

Objects are denoted by strings similar to absolute filenames in a hierarchical file system, with the slash character (`/`) delimiting hierarchical components. TAM’s object space is open, meaning any object without a specific policy inherits the policy from its nearest ancestor in the hierarchy.

### 2.2 Object Space and Inheritance
TAM gathers resources that require protection along with their associated policies into a domain. Resources within a domain are represented by objects in a hierarchical structure called the protected object space. If an object does not have an explicitly attached ACL, POP, or ARule, it inherits the policy from a higher-up object in the hierarchy. A policy attached to an object defines a region, with that object as the container object. The region includes the container object and all descendants without their own policies.

An object within a region is accessible if it is the container object or if the user (explicitly or implicitly) has the `Traverse` right on the container object. An object is accessible if all regions on the path from the root to the object are accessible. Thus, in checking for a primary authorization, Traverse authorizations on parent objects must be checked as auxiliary (or secondary) authorizations.

In summary, to determine whether an access request is permitted, TAM checks:
1. Whether the ACL of the container node grants the required permission(s).
2. Whether all regions on the path to the root are accessible (the `Traverse` permission is granted).
3. Whether the POP evaluates successfully.
4. Whether the ARule evaluates to true.

If any of these evaluations fail, the request is denied access.

## 3. XACML Policies
Each XACML policy contains exactly one `Policy` or `PolicySet` root XML element. A `PolicySet` is a container that can hold other `Policies` or `PolicySets`, as well as references to policies in remote locations. A `Policy` represents a single access control policy, expressed through a set of `Rules` with `Permit` or `Deny` effects. A `Policy` or `PolicySet` may contain multiple policies or rules, each of which may evaluate to different access control decisions. XACML provides combining algorithms to reconcile these decisions. There are `Policy Combining Algorithms` (used by `PolicySet`) and `Rule Combining Algorithms` (used by `Policy`). An example is the `Deny Overrides` algorithm, which states that if any evaluation returns `Deny`, or no evaluation permits, the final result is `Deny`.

A `Target` is a set of simplified conditions for `Subject`, `Resource`, and `Action`. These conditions use boolean functions to compare values in a request with those in the `Target`. If all conditions of a `Target` are satisfied, its associated `PolicySet`, `Policy`, or `Rule` applies to the request.

Once a `Policy` is found and verified to apply to a given request, its `Rules` are evaluated. `Rules` have an `Effect`—a value of `Permit` or `Deny` associated with successful evaluation. `Rules` may also have a condition. If the condition evaluates to true, the `Rule’s Effect` is returned. Evaluation of a condition can also result in an error (`Indeterminate`) or indicate that the condition does not apply to the request (`NotApplicable`). Conditions can be complex, built from nested functions and attributes.

Attributes are named values of known types, including an issuer identifier or issue date and time. They are characteristics of the `Subject`, `Resource`, `Action`, or `Environment` in which the access request is made. When a request is sent from a `Policy Enforcement Point (PEP)` to a `Policy Decision Point (PDP)`, the request is formed almost exclusively of attributes, and their actual values are compared to attribute values in a policy to make access decisions.

In summary, authorizations in XACML are expressed by access rules specifying the `subject`, `resource`, and `action` elements of an authorization. These elements may define applicable subjects, resources, and actions specifically, or they may be wildcard elements matching all specific elements in the corresponding category. For example, a rule expressing authorization for a user Alice to read a data object "Manuals" can be defined as follows (using some simplifications in the XML syntax):

```xml
<Policy>
  <Target>
    <Subjects>
      <Subject>
        <SubjectMatch MatchId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
          <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string">Alice</AttributeValue>
          <SubjectAttributeDesignator AttributeId="urn:oasis:names:tc:xacml:1.0:subject:subject-id" DataType="http://www.w3.org/2001/XMLSchema#string"/>
        </SubjectMatch>
      </Subject>
    </Subjects>
    <Resources>
      <Resource>
        <ResourceMatch MatchId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
          <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string">Manuals</AttributeValue>
          <ResourceAttributeDesignator AttributeId="urn:oasis:names:tc:xacml:1.0:resource:resource-id" DataType="http://www.w3.org/2001/XMLSchema#string"/>
        </ResourceMatch>
      </Resource>
    </Resources>
    <Actions>
      <Action>
        <ActionMatch MatchId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
          <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string">read</AttributeValue>
          <ActionAttributeDesignator AttributeId="urn:oasis:names:tc:xacml:1.0:action:action-id" DataType="http://www.w3.org/2001/XMLSchema#string"/>
        </ActionMatch>
      </Action>
    </Actions>
  </Target>
  <Rule Effect="Permit"/>
</Policy>
```

Groups of `Rules` can be combined via logical algorithms into `Policies`, and groups of `Policies` can be similarly combined into `PolicySets`. The overall access control policy data structure in XACML typically comprises multiple `PolicySets`, each specifying the logical algorithms to be applied by the decision logic to `Policies`, and, within those `Policies`, `Rules` that apply to particular combinations of `subject/resource/action` elements. In operation, the decision logic compares the `subject/resource/action` triple in an access query to the targets in the data structure to identify the applicable `PolicySets`, `Policies`, and `Rules`, and then evaluates these accordingly. This evaluation yields a `Permit` or `Deny` decision in response to the access request.

## 4. Translating Tivoli Access Manager Policy Elements
In Tivoli Access Manager (TAM), the accessibility of a resource depends on the permissions assigned by the ACL controlling the region of the resource, the reachability of that region, a protected object policy, and an authorization rule. Specifically, the TAM access decision function grants a user's request to perform a given action on a given resource if all of the following conditions are met:
1. The user has the required permissions on the resource as determined by the user’s permissions according to the ACL applying to the resource itself.
2. The user can access the resource’s region, as determined by `Traverse` permissions in the ACLs applying to the nodes between the resource and the root.
3. All conditions as expressed in the POP applying to the resource are fulfilled.
4. All authorization rules applying to the resource evaluate to true.

### 4.1 Access Control Lists
TAM grants authorizations to subjects, which are either single users or flat groups of users. The ACL applying to a resource determines the permissions of a user (authenticated or unauthenticated, with possible group memberships) to perform certain actions on that resource. An ACL has four entry types: user entries, group entries, and the special entries `any-other` and `unauthenticated`.

The `any-other` entry contains default permissions for all authenticated users, while the `unauthenticated` entry contains the permissions for unauthenticated users. The ACL shown in Figure 3, for example, gives user Alice the `read` (r) and `write` (w) permissions, whereas user Bob has only the `read` permission. The absence of a permission is indicated by the symbol `-`. Note that the `Traverse` (T) permission is only assigned to the `any-other` and `unauthenticated` entries, which are crucial for controlling the accessibility of nodes in the object space.

**Figure 3. Content of ACL ACL3.**

For a given client, determined by its user identifier and a possibly empty set of group identifiers, the set of permissions granted by a specific ACL is determined by performing a sequence of attempted matches against ACL entry types. First, it checks whether the user identifier matches one of the ACL’s user entries. If so, it returns the associated set of permissions. Otherwise, if any of the user’s group credentials match any of the ACL’s group entries, the algorithm returns the union of all permissions the user has across the matched groups.