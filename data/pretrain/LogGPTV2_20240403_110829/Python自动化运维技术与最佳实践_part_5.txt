 http://,dnspython,org/kits/1, 9.4/dnspython-1 .9.4.tar gz
 tar -zxvf dnspython-1,9.4.tar.gz
 cd dnspython-1 .9. 4
 python setup-py Lnsta11
1.3.1模块域名解析方法详解
dnspython 模块提供了大量的DNS 处理方法，最常用的方法是域名查询。dnspython 提
供了一个DNS解析器类一resolver，使用它的query方法来实现域名的查询功能。query方
法的定义如下：
query(self, qname, rdtype=1, rdclass=1, tcp=False, source=None, raise_on_no_
ansver=True, source_port=0)
其中，qname参数为查询的域名。rdtype参数用来指定RR资源的类型，常用的有以下几种：
口A记录，将主机名转换成IP地址；
口MX记录，邮件交换记录，定义邮件服务器的域名；
口CNAME记录，指别名记录，实现域名间的映射；
口NS记录，标记区域的域名服务器及授权子域；
口PTR记录，反向解析，与A记录相反，将IP转换成主机名；
口SOA记录，SOA标记，一个起始授权区的定义。
---
## Page 33
12第一部分基础篇
rdclass参数用于指定网络类型，可选的值有IN、CH与HS，其中IN为默认，使用最广泛。
tcp参数用于指定查询是否启用TCP协议。默认为False（不启用）。source与source_port参
数作为指定查询源地址与端口，默认值为查询设备IP地址和0。raise_on_no_answer参数用
于指定当查询无应答时是否触发异常，默认为True。
1.3.2常见解析类型示例说明
常见的 DNS 解析类型包括A、MX、NS、CNAME等。利用 dnspython 的 dns.resolver
query方法可以简单实现这些DNS类型的查询，为后面要实现的功能提供数据来源，比如对
一个使用DNS轮循业务的域名进行可用性监控，需要得到当前的解析结果。下面一一进行
介绍。
（1）A记录
实现A记录查询方法源码。
[ /home/test/dnspython/simple1.py 1
#1/usz/bin/env python
import dns,resolver
donain = rav_input (*PLease Lnput an domain1 *)
壁入域名地址
for 1in A,response.answer:通过response,ansver 方泌获取查询图应惠
A = dns.resolver . quezy(domain, 'A′)
指定查询类型为A记录
for j in i.itens1
逸历目应售息
printj.address
运行代码查看结果，这里以www.google.com域名为例：
 python simplel.py
Please input an donain: vvv.google,con
173.194.127,180
173.194,127,178
173.194.127,176
173.194.127,179
173.194.127,177
（2）MX记录
实现MX记录查询方法源码。
[ /home/test/dnspython/ simple2.py 1
1/usr/bin/env python
import dns.zesolver
---
## Page 34
第1章系统基础信息模块详解13
domain = rav_input (*Please input an domain: ')
MX = dns,resolver.query(donain, *Mx*)
指定叠询类型为MX记录
for 1 in MX:
遍历因应结果，输出 Mx 记录的preference 及exchanger 信息
efueuoxo′T *,= zebueuoxe treu, *oouaregeid*y *,= eouezegoad xx, qutxd
运行代码查看结果，这里以163.com城名为例：
 python simple2-py
Please input an domain: 163.com
MX preference = 10 mail exchanger = 163nx02,mxmail.netease,con.
（3）NS记录
实现NS记录查询方法源码。
[ /home/test/dnspython/ simple3.py ]
1/usr/bin/env python
inport dns.resolver
donain = rav_input ('Please Input an donain: ')
for i in ns.response.answer:
ns = dns,resolver-query(domain, *Ns′)
指定查询类型为NS记录
for 1 in 1.1tems:
print j.to_text()
只限输人一级域名，如baidu.com。如果输人二级或多级域名，如www.baidu.com，则
是错误的。
 python sinple3.py
Please input an domain: baidu.com
ns4.baidu. com.
dns.baidu, com.
ns2.baidu,com.
ns7.baidu, com,
ns3.baidu, con,
（4）CNAME记录
实现CNAME记录查询方法源码。
[ /home/test/dnspython/ simple4.py ]
1/usr/bin/env python
inport dns.resolver
---
## Page 35
14第一部分基础篇
domain = rav_input (*Please input an domain: *)
cnane = dns,resolver,query (domain,
‘CKAME′)
指定查询类型为CNAME记录
for i in cname,response.answer:
结果将国应cnane后的目标城书
for j in i.itens1
print j-to_text ()
结果将返回cname后的目标域名。
1.3.3实践：DNS域名轮循业务监控
大部分的DNS解析都是一个域名对应一个IP地址，但是通过DNS轮循技术可以做到
一个域名对应多个IP，从而实现最简单且高效的负载平衡，不过此方案最大的辨端是目标主
机不可用时无法被自动剔除，因此做好业务主机的服务可用监控至关重要。本示例通过分析
当前域名的解析IP，再结合服务端口探测来实现自动监控，在城名解析中添加、删除IP时，
无须对监控脚本进行更改。实现架构图如图1-1所示。
2
92, 168. 1. 10
1
192, 168 1.11
192, 168.1. 10
192, 168.1, 11
192, 168. 1. 12
192, 168, 1. 12
图1-1DNS多城名业务服务监控架构图
1.步骤
1）实现城名的解析，获取域名所有的A记录解析IP列表；
2）对IP列表进行HTTP级别的探测。
2.代码解析
本示例第一步通过dns.resolver.queryO方法获取业务城名A记录信息，查询出所有IP地
---
## Page 36
第1章系统基础信息模块详解15
址列表，再使用httplib模块的requestO方法以GET方式请求监控页面，监控业务所有服务
的IP是否服务正常。
[ /home/test/dnspython/simple5.py 1
1/usz/bin/pyt.hon
import dns.resolver
import os
import http1ib
iplist=[]
定义城名IP列表变量
appdomain=*www,google,com.hx"
定又业务城名
def get_iplist (domain=**) :
域名照析函数,解析成功 IP 将被进加到 ip1i.st
try:
A = dns.resolver.query(domain, *A*)
解析A记录类型
except Exception,e:
print "dns resolver error:*+str (e)
for i in A.response.ansver:
return
for ) in 1.items:
return True
iplist , append ( address)
追加到 ip1ist
def checkip (ip)1
08+d=xx
getcontent-**
httplib.socket,setdefaulttimeout (5)
定又http选接间时时则（5秒)
conn=http1ib.BrrPConnection (checkur1)
+创建http连接对象
try:
((uTewopdde 1,1sog。)= 8xapeau′_/。*L30_11sanbax*uuoo
发起URL请求，添
加host 主机头
(st1pea*=quaquo06
r=conn.getresponse ()
获取URL页面前15个字符，以便缴可用性校验
fina11y:
ifgetcontent="：显控URL页的内容一般是事先定义好的，比如
print ip+* [ok]*
else:
print ip+* [Error]*
死处可放告警程序，可以是部件、姐信通知
Lf
ureuoueu"
If get_ip1ist (appdonain) and Len (iplist)>0:
条件：域名解析正确且至少返团一个IP
for ip in iplist1
checkip (ip)
else1
print *dns resolver error,*
我们可以将此脚本放到crontab中定时运行，再结合告警程序，这样一个基于域名轮循
---
## Page 37
16第一部分基础篇
的业务监控已完成。运行程序，显示结果如下：
python simple5.py
74.125.31.94[08]
74.125.128.199 [08]
1.73.194.72,.94 [0K]
从结果可以看出，域名www.google.com.hk解析出3个IP地址，并且服务都是正常的。
---
## Page 38
Clqder2
业务服务监控详解
业务服务监控是运维体系中最重要的环节，是保证业务服务质量的关键手段。如何更
有效地实现业务服务，是每个运维人员应该思考的问题，不同业务场景需定制不同的监控策
略。Python在监控方面提供了大量的第三方工具，可以帮助我们快速、有效地开发企业级服
务监控平台，为我们的业务保驾护航。本章涉及文件与目录差异对比方法、HTTP质量监控、
部件告警等内容。
2.1文件内容差异对比方法
本节介绍如何通过dimib模块实现文件内容差异对比。dimib作为Python的标准库模块，
无需安装，作用是对比文本之间的差异，且支持输出可读性比较强的HTML文档，与Linux
下的dif命令相似。我们可以使用difmib对比代码、配置文件的差别，在版本控制方面是非
常有用。Python2.3或更高版本默认自带dimib模块，无需额外安装，我们先通过一个简单
的示例进行了解。
2.1.1示例1：两个字符串的差异对比
本示例通过使用dimib模块实现两个字符串的差异对比，然后以版本控制风格进行输出。
[ /home/test/diflib/simple1.py 】
#1/usx/bin/python
---
## Page 39
18第一部分基础篇
text1 = **"text1:
import difflib
定义字串1
Lneluding HTML and context and unifled diffs.
diffib document v7.4
add string
text1_lines = text1.splitlines ()
以行进行分展，以便进行对此
text2 = ***text2:
coouonbss burieduoaog suotouny pue seeeto reptaoad otapou stqa
定义字串2
Lncluding HTHL and context and umified diffs.
diffib document v7,5***
text2_lines = text2.split1ines ()
d = difnib.Differ ()
创建 DiEfer()对象
diff = d.compare (text1_lines, text2_lines)
采用compare方法对字将事进行此校
print *\n*-join (1iat (diff))
本示例采用DifferO类对两个字符串进行比较，另外difmib的SequenceMatcherO类支
持任意类型序列的比较，HtmIDifFO类支持将比较结果输出为HTML格式，示例运行结果如
图2-1所示。
[rootesNze13-a8-e2a difflib]# python simplel.py
textl:
A
This module provides classes and functions for Conp
difflibdocmet v7.4
Hifftib o
V7.5
图2-1示例运行结果
为方便大家理解差异关系符号，表2-1对各符号含义进行说明。
---
## Page 40
第2章业务服务监控详解19
表2-1符号含义说明
符号
含义
包含在第一个序列行中，但不但含在第二个序列行
包含在第二个序列行中，但不包含在第一个序列行
11
两个序列行一致
？
标志两个序列行存在增量差异
标志出两个序列行存在的差异字符
2.1.2生成美观的对比HTML格式文档
采用HtmIDifO类的make_fileO方法就可以生成美观的HTML文档，对示例1中代码
按以下进行修改：
d = diflib.Differ ()
diff = d.co=pare (text1_1ines, text2_1ines)
print *\n′,join (list (diff))
替换成：
d = difflib.HtnlDiff ()
print d.make_file (text1_1ines, text2_1ines)
将新文件命名为 simple2.py，运行#python simple2.py>diffhtml，再使用浏览器打开
diff.html文件，结果如图示2-2所示，HTML文档包括了行号、差异标志、图例等信息，可
读性增强了许多。
t v7.3
图2-2在测览器中打开diff.html文件
2.1.3示例2：对比Nginx配置文件差异
当我们维护多个Nginx配置时，时常会对比不同版本配置文件的差异，使运维人员更加
清晰地了解不同版本选代后的更新项，实现的思路是读取两个需对比的配置文件，再以换行
符作为分隔符，调用 dimib.HtmIDifO 生成HTML格式的差异文档。实现代码如下：
---
## Page 41
20第一部分基础篇
[ /home/test/difflib/simple3.py 1
1/usr/bin/python
inport diffib
Import sys
try:
textfile1=sys.argv[1]
第一个配里文件路径参数
textfle2=sys,argv [2]
第二个配置文件路径参数
except Exception,e:
print "Error:*+str (e)
print *Usage: simple3.py filenamel filename2"