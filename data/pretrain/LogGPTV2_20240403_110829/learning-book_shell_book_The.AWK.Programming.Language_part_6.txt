expr;?expr：expr}
First, expr; is evaluated. If it is true, that is, nonzero or nonnull, the value of
---
## Page 48
38THE AWK LANGUAGE
CHAPTER 2
the conditional expression is the value of expr2; otherwise, it is the value of
expr. Only one of expr and expr is evaluated.
The following program uses a conditional expression to print the reciprocal
of $1, or a warning if s1 is zero:
（（2.：/0=）x）
Assignment Operators. There are seven assignment operators that can be
used in expressions called assignments. The simplest assignment is an expres-
sion of the form
adxa = JDA
where var is a variable or field name, and expr is any expression.For example,
to compute the total population and number of Asian countries, we could write
$4 ooAsla（pop pop+$3；nn+1}
END
（print “Total population of the"，n,
"Asian countries is*， pop,“miilion.*
、
Applied to countries, the program produces
Total population of the 4 Asian countries i8 2173 mi1lion.
The first action contains two assignments, one to accumulate population, and
the other to count countries.The variables are not explicitly initialized,yet
string value "" and the numeric value 0.
We also use default initialization to advantage in the following program,
which finds the country with the largest population:
$3>maxpop（maxpop=$3;country $1)
END
country，maxpop
Note, however, that this program is correct only when at least one value of $3
is positive.
The other six assignment operators are +=, -=, +=, /=, %=, and ^=. Their
meanings are similar: v op= e has the same effect as v = v op e, except that v is
evaluated only once. The assignment
$ + dod = dod
can be written more concisely using the assignment operator +=;
t =+ dod
This statement has the same effect as the longer version - the variable on the
left is incremented by the value of the expression on the right - but += is
shorter and runs faster. As another example,
---
## Page 49
SECTION 2.2
ACTIONS
{$2/o 1000;print }
divides the second field by 1000, then prints the line.
An assignment is an expression; its value is the new value of the left side.
Thus assignments can be used inside any expression. In the multiple assignment
FS = OFS = "\t"
iss qen o os ne oeos pig inino on pue joess piay o qog
ment expressions are also common within tests, such as:
if (（n =length($0))> 0)..
Increment and Decrement Operators. The assignment
n = n + 1
is usually written ++n or n++ using the unary increment operator ++, which
adds 1 to a variable. The prefix form ++n increments n before delivering its
value; the postfix form n++ increments n after delivering its value. This makes
a difference when ++ is used in an assignment. If n is initially 1, then the
assignment i = ++n.increments n and assigns the new value 2 to i, while the
assignment i = n++ increments n but assigns the old value 1 to i. To just
increment n, however, there's no difference between n++ and ++n. The prefix
and postfix decrement operator --, which subtracts 1 from a variable, works the
same way.
Built-In Arithmetic Functions. The built-in arithmetic functions are shown
in Table 2-6. These functions can be used as primary expressions in all expres-
sions. In the table, x and y are arbitrary expressions.
TABLE 2-6. BUILT-IN ARITHMETIC FUNCTIONS
FUNCTION
VALUE RETURNED
atan2(y,x)
arctangent of y/x in the range =r to π
(x)800
cosine of x, with x in radians
exp(x)
exponential function of x, e*
int(x)
integer part of x; truncated towards 0 when x > 0
1og(x)
natural (base e) logarithm of x
rand()
random number r, where 0 ≤ r < 1
sin(x)
sine of x, with x in radians
sqrt(x)
square root of x
srand(x)
x is new seed for rand()
Useful constants can be computed with these functions: atan2(0, -1) gives
 and exp(1) gives e, the base of the natural logarithms. To compute the
base-10 logarithm of x, use 1og(x)/1og( 10).
---
## Page 50
40THE AWK LANGUAGE
CHAPTER 2
The function rand() returns a pseudo-random floating point number
greater than or equal to O and less than 1. Calling srand(x) sets the starting
point of the generator from x. Calling srand() sets the starting point from
the time of day. If srand is not called, rand starts with the same value each
time the program is run.
The assignment
randint = int(n +rand())+1
sets randint to a random integer between 1 and n inclusive. Here we are
using the int function to discard the fractional part. The assignment
x=int(x +0.5)
rounds the value of x to the nearest integer when x is positive.
String Operators. There is only one string operation, concatenation. It has
ables, fields, array elements, function values, and other expressions next to one
another. The program
(print NR *:* $0 }
prints each line preceded by its line number and a colon, with no blanks. The
number NR is converted to its string value (and so is $0 if necessary); then the
three strings are concatenated and the result is printed.
Strings as Regular Expressions. So far, in all of our examples of matching
cxpressions, the right-hand operand of - and 1- has bcen a regular expression
cnclosed in slashes. But, in fact, any expression can be used as the right
operand of these operators. Awk evaluates the expression, converts the value to
a string if necessary, and interprets the string as a regular expression. For
example, the program
BEGIN{digits ="^[0-9]+s"}
$2 - digits
will print all lines in which the second field is a string of digits.
Since expressions can be concatenated,a regular expression can be built up
from components. The following program echoes input lines that are valid float-
ing point numbers:
BEGIN(
sign ="[+-]?"
fraction=（.]（0-9]+"
[6-0][]+[6-0].=op
（+[6-0].ube（20]).-quouodxo
s0-number
---
## Page 51
SECTION 2.2
ACTIONS41
used interchangeably with a regular expression enclosed in slashes, such as
/[0-9]+s/. There is one exception, however. If the string in quotes is to
match a literal occurrence of a regular expression metacharacter, one extra
backslash is needed to protect the protecting backslash itself. That is,
$0-/(\+1-)[0-9]+/
and
$0-"(\\+1-)[0-9]+
are equivalent.
This bchavior may seem arcane, but it arises because one level of protecting
expression, then that backslash needs a preceding backslash to protect it in a
string. If the right operand of a matching operator is a variable or field vari-
able, as in
x-$1
then the additional level of backslashes is not needed in the first field because
backslashes have no special meaning in data.
As an aside, it's easy to test your understanding of regular expressions
interactively: the program
$1 - $2
lets you type in a string and a regular expression; it echoes the line back if the
string matches the regular expression.
Built-In String Functions. Awk provides the built-in string functions shown
or enclosed in slashes), s and r are string expressions, and n and p are integers.
The function index(s,) returns the leftmost position where the string 1
begins in s, or zero if r does not occur in s. The first character in a string is at
position 1:
index(“banana","an")
returns 2.
The function match(s ,) finds the leftmost longest substring in the string s
that is matched by the regular expression r. It returns the index where the sub-
string begins or O if there is no matching substring. It also sets the built-in
string-
variables RSTART to this index and RLENGTH to the length of the matched sub-
The function split(s,a fs) splits the string s into the array α according
to the separator fs and returns the number of elements. It is described after
arrays, at the end of this section.
---
## Page 52
THE AWK LANGUAGE
CHAPTER 2
TABLE 2-7. BUILT-IN STRING FUNCTIONS
FUNCTION
DESCRIPTION
gsub(r,s)
substitute s for r globally in $0,
return number of substitutions made
gsub(r,s,t)
substitute s for r globally in string ,
return number of substitutions made
index(s,1)
return first position of string t in s, or 0 if r is not present
length(s)
return number of characters in s
match(s,)
test whether s contains a substring matched by r,
return index or O; sets RSTART and RLENGTH
split(s,a)
split s into array α on PS, return number of fields
split(s,a,/s)
split s into array a on field separator fs,
return number of fields
sprintf (fmt,expr -list)
return expr -lisr formatted according to format string fmt
sub(r,s)
substitute s for the leftmost longest substring of $0
matched by 7; return number of substitutions made
sub(r,s,1)
substitute s for the leftmost longest substring of t
matched by r, return number of substitutions made
substr(s,p)
return suffix of s starting at position p
substr(s,p,n)
return substring of s of length n starting at position p
The string function sprintf(formar，expr，expr，…，expr）returns
(without printing) a string containing expr, expr2, , expr, formatted accord-
ing to the printf specifications in the string value of the expression format.
Thus, the statement
x=sprintf（"x10s %6d",$1,$2)
 s  s o s   ps  x o s
ten-character string and a decimal number in a field of width at least six. Sec-
tion 2.4 contains a complete description of the format-conversion characters.
The functions sub and gsub are patterned after the substitute command in
the Unix text editor ed. The function sub(r,s,) first finds the leftmost long-
       r    s 
replaces the substring by the substitution string s. As in ed, “leftmost longest”
means that the leftmost match is found first, then extended as far as possible.
In the target string banana, for example, anan is the leftmost longest sub-
string matched by the regular expression (an)+.
By contrast, the leftmost
longest match of (an) + is the null string before b.
The sub function returns the number of substitutions made. The function
sub(r,s) is a synonym for sub(r,s, $0).
The function gsub( ,s ,) is similar, except that it successively replaces the
---
## Page 53
SECTION 2.2
ACTIONS43
leftmost longest nonoverlapping substrings matched by  with s in r;it returns
where.) For example, the program
(gsub(/UsA/,“United States");print }
States". (In such examples, when $0 changes, the fields and NF change too.)
And
gsub(/ana/, “anda",“banana°)
In a substitution performed by either sub(r,s,) or gsub(r,3,),any
occurrence of the character & in s will be replaced by the substring matched by
r. Thus
gsub(/a/, "aba","banana*)
replaces banana by babanabanaba; so does
gsub(/a/,"&bs","banana°)
The special meaning of & in the substitution string can be turned off by preced-
ing it with a backslash, as in &.
The function substr (s ,p) returns the suffix of s that begins at position p.
If substx(s,p,n) is used, only the first n characters of the suffix are
returned; if the suffix is shorter than n, then the entire suffix is returned. For
example, we could abbreviate the country names in countries to their first
three characters by the program
($1 = substr（$1,1, 3）;print $0 }
to produce
USS 8649 275 Asia
Can 3852 25 North America
Chi
3705 1032 A81a
USA 3615 237 North Anerica
Ind 1267_746 Asia
Bra
3286 134 South America
Fra 211 55 Burope
Mex
762
78 North America
Jap 144 120 A8ia
Ger 96 61 Europe
Eng 94 56 Europe
Setting $1 forces awk to recompute $0 and thus the fields are now separated by
a blank (the default value of OFs), no longer by a tab.
expression. For cxamplc, on the countries file,
---
## Page 54
44
THE AWK LANGUAGE
CHAPTER 2
{s = s substr（$1,1， 3）")
END ( print s )
prints
USS Can Chi USA Bra Ind Nex Fra Jap Ger Eng
by building s up a piece at a time starting with an initially empty string. (If
you are worried about the extra blank on the end, use
print substr(s, 1,length(s)-1)
instead of print s in the END action.)
Number or String? The value of an expression may be automatically con-
verted from a number to a string or vice versa, depending on what operation is
applied to it. In an arithmetic expression like
pop + $3
the operands pop and $3 must be numeric, so their values will be forced or
coerced to numbers if they are not already. Similarly, in the assignment expres-
sion
pop += $3
pop and $3 must be numbers. In a string expression like
$1$2
the operands $1 and $2 must be strings to be concatenated, so they will be
coerced to strings if necessary.
In contexts where the same operator applies to both numbers and strings,
there are special rules. In the assignment v = e, both the assignment and the
variable v acquire the type of the expression e. In a comparison expression like
x == y
if both operands have a numeric type, the comparison is numeric; otherwise, any
numeric operand is coerced to a string and the comparison is made on the string
values.
Let us examine what this rule means for a comparison like
$1 == $2
that involves fields. Here, the type of the comparison depends on whether the
fields contain numbers or strings, and this can only be determined when the pro-
gram runs; the type of the comparison may differ from input line to input line.
addition, if the field contains a machine-representable number, it also gives the
field a numeric type.
For example, the comparison $1 == $2 will be numeric and succced if $1
and $2 have any of the values
---
## Page 55
SECTION 2.2
ACTIONS
45
11.0+1
1e00.1e+110E-1
001
because all these values are different representations of the number 1. How-
ever, this same expression will bc a string comparison and hence fail on each of
these pairs:
。
(null)
0.0
(null)
0a
1e500
1.0e500
In the first three pairs, the second field is not a number. The last pair will be
compared as strings on machines where the values are too large to be
represented as numbers.
The print statement
print $1
prints the string value of the first field; thus, the output is identical to the input.
Uninitialized variables are created with the numeric value O and the string
value "". Nonexistent fields and fields that are explicitly null have only the
string value ""; they are not numeric, but when coerced to numbers they
acquire the numeric value 0. As we will see at the end of this section, array
subscripts are strings.
There are two idioms for coercing an expression of one type to the other:
number **
concatenate a null string to mumber to coerce it to a string
string+0
add zero to string to coerce it to a number
Thus, to force a string comparison between two fields, coerce one field to string:
$1 "* ao $2
To force a numeric comparison, coerce both fields to numeric:
$1+0==$2+0
This works regardless of what the fields contain.
The numeric value of a string is the value of the longest prefix of the string
that looks numeric. Thus
yields
1001201
The string value of a number is computed by formatting the number with
the output format conversion OFNT.OFMT also controls the conversion of
numeric values to strings for concatenation, comparison, and creation of array
subscripts. The default value of OFMT is “%. 6g". Thus
BEGIN {print 1E2 "",12E-2 "",E12 "",1.23456789 *"}
gives
---
## Page 56
46
THE AWK LANGUAGE
CHAPTER 2
100 0.12 1.23457
The default value of OFMT can be changed by assigning it a new value.
.If
OFMT were changed to "%.2f", for example, numbers would be printed, and
coerced numbers would be compared, with two digits after the decimal point.
TABLE 2-8.EXPRESSION OPERATORS
OPERATION
OPERATORS
EXAMPLE
MEANING OF EXAMPLE
assignment
x += 2
x=x+2
/= %=
conditional
x11 y
x?y:z
if x is true then y else z
logical OR
11
1 if x or y is true,
1 if x and y are true,
0 otherwise
logical AND
66
x && y
0otherwise
array membership
in
1 in a
1 if a[1] exists, 0 otherwise
matching
$1-/x/
1 if the first field contains an x,
0 otherwise
relational
<=
e= y
1 if x is equal to y,
0 otherwise
concatenation
"a" "bc"
"abe"; there is no explicit
concatenation operator
add,subtract
x % y
x+y
sum of x and y
multiply, divide, mod
/%
remainder of x divided by y
unary plus and minus
=X
negated value of x
logical NOT
1$1
1 if $1 is zero or null,
0 otherwise
exponentiation
*y
x
increment,decrement
++
++x，x++
x 01 1 Ppe
field
$1+1
value of 1-th field, plus 1
grouping
（）
(81)++
add 1 to value of i-th field
tors to constants, variables, field names, array elements, functions, and other
expressions.
The operators are listed in order of increasing precedence.
Operators of
higher precedence are evaluated before lower ones; this means, for example, that
is evaluated before + in an expression. All operators are left associative
except the assignment operators, the conditional operator, and exponentiation,
which are right associative. Left associativity means that operators of the same