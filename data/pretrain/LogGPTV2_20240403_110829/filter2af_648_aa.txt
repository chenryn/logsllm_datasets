# 前言
XXE的防御来说，实现方法千奇百怪（这里指的是那些基础库，像apache-poi这种解析excel的XXE，内部还是调用的那些基础库，修复方式当然只要升级对应版本即可）
Owasp的修复文档
主要方式都是`setFeature`的方式来设置几个`features`，而且设置的都是一些无规律和章法的url常量，对于一个初学XXE的人来说，想要知道其中的原理，学习成本可能要比单纯的了解XXE要复杂的多。
由于具体的XML解析实现类比较多，这里就只挑一两个来分析，比较幸运的是，他们的最底层都是调用的同一个处理XML的库，应该就是位于`com.sun.org.apache.xerces.internal`之下的代码。
以下的漏洞实例代码来自 
# DocumentBuilderFactory
一个正常的可以被攻击的实例代码
    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
    DocumentBuilder builder = dbf.newDocumentBuilder();
    builder.parse(ResourceUtils.getPoc1());
设置`XMLConstants.FEATURE_SECURE_PROCESSING`（常量的值也就是`http://javax.xml.XMLConstants/feature/secure-processing`）
    FEATURE = XMLConstants.FEATURE_SECURE_PROCESSING;
    dbf.setFeature(FEATURE, true);
可以看到
或者设置`http://apache.org/xml/features/disallow-doctype-decl`
    FEATURE = "http://apache.org/xml/features/disallow-doctype-decl";
    dbf.setFeature(FEATURE, true);
报错也换了一种方式
## secure-processing
可以先来跟一下这部分的处理逻辑，由于是对`DocumentBuilderFactory`这个`Factory`设置的feature，最后造成XXE的是工厂生成的`DocumentBuilder`，所以features变量肯定也会跟着进入`DocumentBuilder`中。
跟进`dbf.setFeature(FEATURE, true);`可以看到
    if (features == null) {
        features = new HashMap<>();
    }
    if (name.equals(XMLConstants.FEATURE_SECURE_PROCESSING)) {
        if (System.getSecurityManager() != null && (!value)) {
            throw new ParserConfigurationException(
                SAXMessageFormatter.formatMessage(null,
                                                  "jaxp-secureprocessing-feature", null));
        }
        fSecureProcess = value;
        features.put(name, value ? Boolean.TRUE : Boolean.FALSE);
        return;
    }
可以看到这里只是将设置的feature存到了成员变量features中，那主要的传递逻辑就应该在`newDocumentBuilder`中
可以看到生成的时候，`DocumentBuilderFactory`将自己的features等一些属性传入了`DocumentBuilder`的初始化列表中
    return new DocumentBuilderImpl(this, attributes, features, fSecureProcess);
跟到`DocumentBuilderImpl`构造函数中，一开始时是对`domParser`进行了一系列的setFeature
    domParser = new DOMParser();
    domParser.setFeature(VALIDATION_FEATURE, dbf.isValidating());
    // "namespaceAware" == SAX Namespaces feature
    domParser.setFeature(NAMESPACES_FEATURE, dbf.isNamespaceAware());
    // Set various parameters obtained from DocumentBuilderFactory
    domParser.setFeature(INCLUDE_IGNORABLE_WHITESPACE,
                         !dbf.isIgnoringElementContentWhitespace());
    domParser.setFeature(CREATE_ENTITY_REF_NODES_FEATURE,
                         !dbf.isExpandEntityReferences());
    domParser.setFeature(INCLUDE_COMMENTS_FEATURE,
                         !dbf.isIgnoringComments());
    domParser.setFeature(CREATE_CDATA_NODES_FEATURE,
                         !dbf.isCoalescing());
    if (dbf.isXIncludeAware()) {
        domParser.setFeature(XINCLUDE_FEATURE, true);
    }
    fSecurityPropertyMgr = new XMLSecurityPropertyManager();
    domParser.setProperty(XML_SECURITY_PROPERTY_MANAGER, fSecurityPropertyMgr);
    fSecurityManager = new XMLSecurityManager(secureProcessing);
    domParser.setProperty(SECURITY_MANAGER, fSecurityManager);
跟到后面可以看到设置features的部分
    if (secureProcessing) {
        /**
                 * If secure processing is explicitly set on the factory, the
                 * access properties will be set unless the corresponding
                 * System Properties or jaxp.properties are set
                 */
        if (features != null) {
            Boolean temp = features.get(XMLConstants.FEATURE_SECURE_PROCESSING);
            if (temp != null) {
                if (temp && Constants.IS_JDK8_OR_ABOVE) {
                    fSecurityPropertyMgr.setValue(Property.ACCESS_EXTERNAL_DTD,
                                                  State.FSP, Constants.EXTERNAL_ACCESS_DEFAULT_FSP);
                    fSecurityPropertyMgr.setValue(Property.ACCESS_EXTERNAL_SCHEMA,
                                                  State.FSP, Constants.EXTERNAL_ACCESS_DEFAULT_FSP);
                }
            }
        }
    }
    ...
    setFeatures(features);
可以看到这里假如features中存在`XMLConstants.FEATURE_SECURE_PROCESSING`，就会将如下两个property设置为空
  * `Property.ACCESS_EXTERNAL_DTD`
  * `Property.ACCESS_EXTERNAL_SCHEMA`
然后后面的`setFeatures(features)`就是将features再依次存到`domParser`中
    private void setFeatures( Map features)
        throws SAXNotSupportedException, SAXNotRecognizedException {
        if (features != null) {
            for (Map.Entry entry : features.entrySet()) {
                domParser.setFeature(entry.getKey(), entry.getValue());
            }
        }
    }
到这里`DocumentBuilder`初始化就算完成了。之后就进入到`parse`的环节，在`com/sun/org/apache/xerces/internal/parsers/XML11Configuration.java:796`的`parse()`中
有一个比较需要注意的点，在真正的扫描节点之前，会有一个`resetCommon()`动作
在这里根据feature设置了很多`XMLEntityManager`中的参数`com/sun/org/apache/xerces/internal/impl/XMLEntityManager.java:1486`
    // sax features
    fValidation = componentManager.getFeature(VALIDATION, false);
    fExternalGeneralEntities = componentManager.getFeature(EXTERNAL_GENERAL_ENTITIES, true);
    fExternalParameterEntities = componentManager.getFeature(EXTERNAL_PARAMETER_ENTITIES, true);
    // xerces features
    fAllowJavaEncodings = componentManager.getFeature(ALLOW_JAVA_ENCODINGS, false);
    fWarnDuplicateEntityDef = componentManager.getFeature(WARN_ON_DUPLICATE_ENTITYDEF, false);
    fStrictURI = componentManager.getFeature(STANDARD_URI_CONFORMANT, false);
    fLoadExternalDTD = componentManager.getFeature(LOAD_EXTERNAL_DTD, true);
    // xerces properties
    fSymbolTable = (SymbolTable)componentManager.getProperty(SYMBOL_TABLE);
    fErrorReporter = (XMLErrorReporter)componentManager.getProperty(ERROR_REPORTER);
    fEntityResolver = (XMLEntityResolver)componentManager.getProperty(ENTITY_RESOLVER, null);
    fStaxEntityResolver = (StaxEntityResolverWrapper)componentManager.getProperty(STAX_ENTITY_RESOLVER, null);
    fValidationManager = (ValidationManager)componentManager.getProperty(VALIDATION_MANAGER, null);
    fSecurityManager = (XMLSecurityManager)componentManager.getProperty(SECURITY_MANAGER, null);
    entityExpansionIndex = fSecurityManager.getIndex(Constants.JDK_ENTITY_EXPANSION_LIMIT);
    //StAX Property
    fSupportDTD = true;
    fReplaceEntityReferences = true;
    fSupportExternalEntities = true;
    // JAXP 1.5 feature
    XMLSecurityPropertyManager spm = (XMLSecurityPropertyManager) componentManager.getProperty(XML_SECURITY_PROPERTY_MANAGER, null);
    if (spm == null) {
        spm = new XMLSecurityPropertyManager();
    }
    fAccessExternalDTD = spm.getValue(XMLSecurityPropertyManager.Property.ACCESS_EXTERNAL_DTD);
其实可以看到蛮多和XXE相关的参数`fSupportDTD`、`fLoadExternalDTD`、`fSupportExternalEntities`、`fAccessExternalDTD`
之后就继续回到解析XML的部分`fCurrentScanner.scanDocument(complete)`
可以跟到`com/sun/org/apache/xerces/internal/impl/XMLDocumentFragmentScannerImpl.java:436`这里的`scanDocument`，具体扫描的过程先不深究，跟到`next()`中开始开始解析Entity的部分
代码比较多，只挑出一些比较重要的部分`com/sun/org/apache/xerces/internal/impl/XMLEntityManager.java:1116`
    // should we skip external entities?
    boolean external = entity.isExternal();
    ...
    if (external) {
        staxInputSource = resolveEntityAsPerStax(externalEntity.entityLocation);
        /** xxx:  Waiting from the EG
                 * //simply return if there was entity resolver registered and application
                 * //returns either XMLStreamReader or XMLEventReader.
                 * if(staxInputSource.hasXMLStreamOrXMLEventReader()) return ;
                 */
        xmlInputSource = staxInputSource.getXMLInputSource() ;
        if (!fISCreatedByResolver) {
            //let the not-LoadExternalDTD or not-SupportDTD process to handle the situation
            if (fLoadExternalDTD) {
                String accessError = SecuritySupport.checkAccess(expandedSystemId, fAccessExternalDTD, Constants.ACCESS_EXTERNAL_ALL);
                if (accessError != null) {
                    fErrorReporter.reportError(this.getEntityScanner(),XMLMessageFormatter.XML_DOMAIN,
                                               "AccessExternalEntity",
                                               new Object[] { SecuritySupport.sanitizePath(expandedSystemId), accessError },
                                               XMLErrorReporter.SEVERITY_FATAL_ERROR);
                }
            }
        }
    }
    ...
可以看到这里就是解析外部实体的部分。如果有外部实体解析的话，就需要经过`SecuritySupport.checkAccess`的判断
    public static String checkAccess(String systemId, String allowedProtocols, String accessAny) throws IOException {
        if (systemId == null || (allowedProtocols != null &&
                                 allowedProtocols.equalsIgnoreCase(accessAny))) {
            return null;
        }
        String protocol;
        if (systemId.indexOf(":")==-1) {
            protocol = "file";
        } else {
            URL url = new URL(systemId);
            protocol = url.getProtocol();
            if (protocol.equalsIgnoreCase("jar")) {
                String path = url.getPath();
                protocol = path.substring(0, path.indexOf(":"));
            }
        }
        if (isProtocolAllowed(protocol, allowedProtocols)) {
            //access allowed
            return null;
        } else {
            return protocol;
        }
    }
可以看到`allowedProtocols`类似于一个白名单的参数，不在白名单内部的协议将被返回
动态调试可以看到，这里的`expandedSystemId`和`fAccessExternalDTD`分别是payload中的url，和空字符串
还记得之前`reset()`时候的一堆属性赋值么，其中就有`fAccessExternalDTD`
而且之前`DocumentBuilderImpl`初始化时设置的`XMLConstants.FEATURE_SECURE_PROCESSING`会在内部演变成两个属性的值为空
  * `Property.ACCESS_EXTERNAL_DTD`
  * `Property.ACCESS_EXTERNAL_SCHEMA`
也就是将这里安全检查时，允许的协议从`all`设置成了空，从而禁止解析外部实体。
这里的异常信息也正是设置了`XMLConstants.FEATURE_SECURE_PROCESSING`之后抛出的异常。
## disallow-doctype-decl
    FEATURE = "http://apache.org/xml/features/disallow-doctype-decl"; // 开启可挡回显xxe和blind-xxe
    dbf.setFeature(FEATURE, true);
这里前期`DocumentBuilderFactory`的内容也都是一致的，只是将feature值设存到工厂的features属性中
不过这里需要细跟一下`domParser`的`setFeature`部分
    if (featureId.equals(USE_ENTITY_RESOLVER2)) {
        if (state != fUseEntityResolver2) {
            fUseEntityResolver2 = state;
            // Refresh EntityResolver wrapper.
            setEntityResolver(getEntityResolver());
        }
        return;
    }
    fConfiguration.setFeature(featureId, state);
这里最后对`XIncludeAwareParserConfiguration`设置feature，最后可以一直跟到`XMLDocumentScannerImpl`的setFeature
    public void setFeature(String featureId, boolean state)
        throws XMLConfigurationException {