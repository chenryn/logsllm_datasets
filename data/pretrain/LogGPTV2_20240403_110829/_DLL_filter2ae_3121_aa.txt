# 【技术分享】DLL注入那些事
##### 译文声明
本文是翻译文章，文章来源：blog.deniable.org
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[shan66](http://bobao.360.cn/member/contribute?uid=2522399780)
预估稿费：260RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
在本文中，我们将向读者全面介绍各种DLL注入技术。所谓DLL注入，本来是软件用于向其他程序添加/扩展功能、调试或逆向工程的一种合法技术。不过，后来恶意软件也常用这种方式来干坏事。因此，这意味着从安全的角度来看，我们必须知道DLL注入是如何工作的。
之前，当我开始开发Red
Team的定制工具（为了模拟不同类型的攻击者）时，我完成了这个小项目的大部分代码，并将该项目命名为“injectAllTheThings”。如果你想看一些使用DLL注入的具体示例，请访问[这里](https://attack.mitre.org/wiki/Technique/T1055)。如果你想了解DLL注入，该项目也会很有帮助。实际上，我已经在一个单一的Visual
Studio项目中组合了多种DLL注入技术（实际上是7种不同的技术），它们都有32位和64位版本，并且非常便于阅读和理解：每种技术都有自己单独的源文件。
以下是该工具的输出，给出了所有已经实现的方法。
根据[@SubTee](https://twitter.com/subtee)的说法，DLL注入是“没什么大不了”的。我同意这种观点，但是，DLL注入远不止加载DLL这么简单。
你虽然可以使用经过Microsoft签名的二进制代码来加载DLL，但是却无法附加到某个进程来利用其内存。大多数渗透测试人员实际上不知道什么是DLL注入以及它是如何工作的，主要是因为[Metasploit](https://www.metasploit.com/)可以代劳的事情太多了。他们一直在盲目地使用它。我相信，学习这个“怪异的”内存操纵技术的最佳地点，不是安全论坛，而是黑客论坛。如果你加入了红队，你可能需要鼓捣这种东西，除非你安于使用他人提供的工具。
大多时候，我们首先会使用一项高度复杂的技术展开攻击，如果我们没有被发现，才会开始降低复杂程度。这就是说，我们会先将二进制文件丢到磁盘上，然后使用DLL注入。
这篇文章将全面介绍DLL注入，同时也是[GitHub](https://github.com/fdiskyou/injectAllTheThings)托管的该项目的“帮助文档”。
**概述**
****
DLL注入简单来说就是将代码插入/注入到正在运行的进程中的过程。我们注入的代码是动态链接库（DLL）的形式。为什么可以做到这一点？因为DLL（如UNIX中的共享库）是在运行时根据需要来进行加载。在这个项目中，我将只使用DLL，但是实际上还可以使用其他各种形式（任何PE文件、shellcode
/ assembly等）来“注入”代码，这些在恶意软件中非常常见。
此外，请记住，您需要具有适当级别的权限才能鼓捣其他进程的内存。但是，这里不会探讨受和[保护的进程](https://www.microsoftpressstore.com/articles/article.aspx?p=2233328&seqNum=2)、[Windows特权级别](https://msdn.microsoft.com/en-gb/library/windows/desktop/bb648648\(v=vs.85\).aspx)（由Vista引入）有关的内容——这是一个完全不同的主题。
如上所述，DLL注入可以用于合法目的。例如，防病毒和终端安全解决方案就需要使用这些技术将自己的软件代码/挂钩放置到系统上的“所有”运行的进程中。这使他们能够在运行过程中监视每个进程的行为，从而更好地保护我们。但是，该技术也可以用于恶意的目的。一般来说，常用技术是注入“lsass”进程以获取密码哈希值。恶意软件也广泛使用代码注入技术，例如，运行shellcode、运行PE文件或将DLL加载到另一个进程的内存中以隐藏自身，等等。
**基础知识**
我们将使用MS Windows
API完成各种注入，因为这个API提供了非常丰富的功能，允许我们连接和操纵其他进程。自从微软第一个版本的操作系统以来，DLL一直是MS
Windows的基石。事实上，MS Windows
所有API都涉及DLL。最重要的一些DLL有“Kernel32.dll”（其中包含用于管理内存、进程和线程的函数）、“User32.dll”（主要是用户界面函数）和“GDI32.dll”（用于绘制图形和文字显示）。
您可能奇怪为什么会提供这样的API，为什么微软给我们这么好的一套函数来操作进程的内存？实际上，它们的最初用途是扩展应用程序的功能。例如，一家公司创建一个了应用程序，并希望允许其他公司扩展或增强应用程序。所以，DLL最初是用于合法的目的。此外，DLL还可用于项目管理，节省内存，实现资源共享等。
下图讲解DLL注入技术的流程。
就像上面看到的那样，DLL注入分为四个步骤：
1.附加到目标/远程进程
2.在目标/远程进程内分配内存
3.将DLL路径或DLL复制到目标/远程进程内存中
4.让进程执行DLL
所有这些步骤都是通过调用一组API函数来实现的。每种技术都需要一定的设置和选项才能完成。实际上，每种技术都有自己的优点和缺点。
**技术详解**
****
我们有多种方法来让进程执行我们的DLL。最常见的方法就是使用“CreateRemoteThread()”和“NtCreateThreadEx()”。但是，我们无法将DLL作为参数传递给这些函数。我们必须提供一个保存执行起始点的内存地址。为此，我们需要完成内存分配，使用“LoadLibrary()”加载我们的DLL，复制内存等等。
这个项目我称之为'injectAllTheThings'（取这个名字，只是因为我讨厌‘injector’的名字，加上GitHub上已经有太多的‘injector’了），它有7种不同的技术。当然，这些技术都不是我发明的。我只是使用了这七种技术（是的，还有更多）。一些API具有详细的文档说明（如“CreateRemoteThread()”），有些API则没有相关的文档说明（如'NtCreateThreadEx()'）。以下是已经实现的技术的完整列表，它们全部适用于32位和64位。
CreateRemoteThread()
NtCreateThreadEx()
QueueUserAPC
SetWindowsHookEx()
RtlCreateUserThread()
通过SetThreadContext()获取代码洞
反射型DLL
其中，可能有一些是你早就接触过的技术。当然，这不是所有DLL注入技术的完整列表。如我所说，还有更多的技术，但是并没有包括在这里。这里给出的，是到目前为止，我在一些项目中使用过的技术。有些是稳定的，有些是不稳定的——当然，之所以不稳定，可能是由于我的代码的原因，而不是这些技术本身的原因。
**LoadLibrary()**
如[MSDN](https://msdn.microsoft.com/en-us/library/windows/desktop/ms684175\(v=vs.85\).aspx)所述，“LoadLibrary（）”函数的作用是将指定的模块加载到调用进程的地址空间中。而指定的模块可能会导致加载其他模块。
    HMODULE WINAPI LoadLibrary(
      _In_ LPCTSTR lpFileName
    );
lpFileName [in]
The name of the module. This can be either a library module (a .dll file) or
an executable module (an .exe file). (…)
If the string specifies a full path, the function searches only that path for
the module.
If the string specifies a relative path or a module name without a path, the
function uses a standard search strategy to find the module (…)
If the function cannot find the module, the function fails. When specifying a
path, be sure to use backslashes (), not forward slashes (/). (…)
If the string specifies a module name without a path and the file name
extension is omitted, the function appends the default library extension .dll
to the module name. (…)
换句话说，它只需要一个文件名作为其唯一的参数。也就是说，我们只需要为DLL的路径分配一些内存，并将执行起始点设置为“LoadLibrary()”函数的地址，将路径的内存地址作为参数传递就行了。
实际上，这里最大的问题是“LoadLibrary()”使用程序来将加载的DLL添加到注册表中。意思是它可以轻松被检测到，但是实际上许多终端安全解决方案仍然无法检测到它们。无论如何，正如我之前所说，DLL注入也有合法的使用情况，所以…另外，请注意，如果DLL已经加载了'LoadLibrary()'，它将不会被再次执行。如果使用反射型DLL注入，当然没有这个问题，因为DLL没有被注册。如果使用反射DLL注入技术而不是使用“LoadLibrary()”，会将整个DLL加载到内存中。然后找到DLL的入口点的偏移量来加载它。如果你愿意，还可以设法将其隐藏起来。取证人员仍然可以在内存中找到你的DLL，只是这不会那么容易而已。Metasploit使用了大量的DLL注入，但是大多数终端解决方案都能搞定这一切。如果你喜欢狩猎，或者你属于“蓝队”，可以看看[这里](https://www.defcon.org/html/defcon-20/dc-20-speakers.html#King)和[这里](https://www.defcon.org/html/defcon-20/dc-20-speakers.html#King)。
顺便说一句，如果你的终端安全软件无法搞定所有这一切…你可尝试使用一些[游戏反欺骗引擎](https://www.nostarch.com/gamehacking)。一些反欺诈游戏的反rootkit功能比某些AV更加先进。
**连接到目标/远程进程**
首先，我们需要得到要与之进行交互的进程的句柄。为此，我们可以使用API调用[OpenProcess()](https://msdn.microsoft.com/en-gb/library/windows/desktop/ms684320\(v=vs.85\).aspx)。
    HANDLE WINAPI OpenProcess(
      _In_ DWORD dwDesiredAccess,
      _In_ BOOL  bInheritHandle,
      _In_ DWORD dwProcessId
    );
如果您阅读MSDN上的文档，就会明白，为此需要具备一定的访问权限。访问权限的完整列表可以在[这里](https://msdn.microsoft.com/en-gb/library/windows/desktop/ms684880\(v=vs.85\).aspx)找到。
这些可能因MS Windows版本而异，不过几乎所有技术都需要用到以下内容。
    HANDLE hProcess = OpenProcess(
        PROCESS_QUERY_INFORMATION |
        PROCESS_CREATE_THREAD |
        PROCESS_VM_OPERATION |
        PROCESS_VM_WRITE,
        FALSE, dwProcessId);
**在目标/远程进程内分配内存**
为了给DLL路径分配内存，我们需要使用[VirtualAllocEx()](https://msdn.microsoft.com/en-us/library/windows/desktop/aa366890%28v=vs.85%29.aspx)。如MSDN所述，VirtualAllocEx()可以用来预留、提交或更改指定进程的虚拟地址空间内的内存区域的状态。该函数将其分配的内存初始化为零。
    LPVOID WINAPI VirtualAllocEx(
      _In_     HANDLE hProcess,
      _In_opt_ LPVOID lpAddress,
      _In_     SIZE_T dwSize,
      _In_     DWORD  flAllocationType,
      _In_     DWORD  flProtect
    );
我们需要完成类似下面的工作：
    // calculate the number of bytes needed for the DLL's pathname
    DWORD dwSize = (lstrlenW(pszLibFile) + 1) * sizeof(wchar_t);
    // allocate space in the target/remote process for the pathname
    LPVOID pszLibFileRemote = (PWSTR)VirtualAllocEx(hProcess, NULL, dwSize, MEM_COMMIT, PAGE_READWRITE);
此外，您还可以使用“[GetFullPathName()](https://msdn.microsoft.com/en-us/library/windows/desktop/aa364963%28v=vs.85%29.aspx)”API调用。但是，我不会在整个项目中使用这个API调用。不过，这只是个人偏好的问题。
如果要为整个DLL分配空间，则必须执行以下操作：
    hFile = CreateFileW(pszLibFile, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
    dwSize, = GetFileSize(hFile, NULL);
    PVOID pszLibFileRemote = (PWSTR)VirtualAllocEx(hProcess, NULL, dwSize, MEM_COMMIT, PAGE_READWRITE);
**  
**
**将DLL路径或DLL复制到目标/远程进程的内存中**
现在只需要使用[WriteProcessMemory()](https://msdn.microsoft.com/en-us/library/windows/desktop/ms681674%28v=vs.85%29.aspx)API调用将DLL路径或完整的DLL复制到目标/远程进程。
    BOOL WINAPI WriteProcessMemory(
      _In_  HANDLE  hProcess,
      _In_  LPVOID  lpBaseAddress,
      _In_  LPCVOID lpBuffer,
      _In_  SIZE_T  nSize,
      _Out_ SIZE_T  *lpNumberOfBytesWritten
    );
这就像：
    DWORD n = WriteProcessMemory(hProcess, pszLibFileRemote, (PVOID)pszLibFile, dwSize, NULL);
如果我们要复制完整的DLL，就像在反射DLL注入技术中那样，则还需要另外一些代码，因为这需要将其读入内存，然后再将其复制到目标/远程进程。
    lpBuffer = HeapAlloc(GetProcessHeap(), 0, dwLength);
    ReadFile(hFile, lpBuffer, dwLength, &dwBytesRead, NULL);
    WriteProcessMemory(hProcess, pszLibFileRemote, (PVOID)pszLibFile, dwSize, NULL);
如前所述，通过使用反射DLL注入技术，并将DLL复制到内存中，DLL就不会被注册到进程中。
这稍微有点复杂，因为需要在内存中加载DLL时取得它的入口点。作为反射DLL项目用到的“LoadRemoteLibraryR()”函数可以为我们完成这些工作。如果你想查看源码的话，可以访问这里。
需要注意的一点是，我们要注入的DLL需要使用适当的include和options进行编译，使其与ReflectiveDLLInjection方法相适应。'injectAllTheThings'项目包括名为'rdll_32.dll
/ rdll_64.dll'的DLL，您可以使用它来完成这些工作。
****
**让进程执行DLL**
**CreateRemoteThread()**
CreateRemoteThread()是一种经典和最受欢迎的DLL注入技术。另外，它的说明文档也是最全面的。