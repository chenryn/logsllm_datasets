we introduce the concept of an Obliviously Updatable
Index (OUI). As a proof of concept, we provide a new
construction for an OUI, with proof of security, which
offers a 94% savings compared to a naive implementation
using ORAM. We obtain our ﬁnal solution by combining
this with the state-of-the-art IO-efﬁcient SSE that indexes
the full blocks.
3) We evaluate our solution using real-world data from
100,000 mail users, showing we achieve a 99% reduction
in the IO cost vs. the state-of-the-art in SSE schemes such
4Because we need to know the content of an index entry to update it and
must read that from a server, we cannot use “write-only” [1] ORAM which
assumes reads are not observable.
3
f4f4f9f1f8f9k1k2k3Data centerFull Block Indexkeyword queriesf3f4f1f1f8k1k7k3overﬂow:f1, f5 ,f8,f12k1k4k1f4, f1 ,f3,f9f2, f3 ,f8,f11f3f3f5f7f9f1, f5 ,f8,f9Local DeviceObliviously Updatable Index…as that of Cash et al. which, for purely dynamic insertions,
write each document-keyword pair to a random location.
We also report the storage required for a typical mail user
both on the client side and the server side.
C. No free lunch
These improvements are, of course, not free. First, we must
allow for slightly more leakage in search than the scheme of [4],
since we leak when an entry in the OUI is full and needs to be
pushed to the full-block index. Second, we can only deal with
deletes from the OUI: once an entry is written to the static
index, it is stored until the index is rebuilt. Thus we do not
provide a fully dynamic index. Given the low cost of storage
relative to the size of emails and the fact that for the average
user emails are contained fully within the partial index for at
least 11 days, we believe this is an acceptable trade-off.
II. BACKGROUND
A. Hash Tables
A hash table is a data structure commonly used for mapping
keys to values. It often uses a hash function h that maps a key
to an index (or a set of indexes) in a memory array M where
the value associated with the key may be found. The keyword
is not in the table if it is not in one of those locations. More
formally, we deﬁne a hash table H = (hsetup, hlookup, hwrite)
using a tuple of algorithms.
• (h, M) ← hsetup(S): hsetup takes as input an initial set
S of keyword-value pairs and outputs a hash function h
and a memory array M storing the key-value pairs.
• M(cid:48) ← hwrite(key, value, M, h):
If (key, value) al-
ready exists in the table it does nothing, else it stores
(key, value) in the table. If M and h are known from the
context, we use the shorter notation hwrite(key, value).
• value ← hlookup(key, M, h): hlookup returns value if
(key, value) is in the table. Else it returns ⊥. If M and h
are known from the context, we use the shorter notation
hlookup(key).
B. Oblivious RAM
We recall Oblivious RAM (ORAM), a notion introduced
and ﬁrst studied in the seminal paper of Goldreich and
Ostrovsky [12]. ORAM can be thought of as a compiler that
encodes the memory into a special format such that accesses
on the compiled memory do not reveal the underlying access
patterns on the original memory. An ORAM scheme consists
of protocols (SETUP, OBLIVIOUSACCESS).
• (cid:104)(M[y], σ(cid:48)), EM
• (cid:104)σ, EM(cid:105) ↔ SETUP(cid:104)(1λ, M),⊥(cid:105): SETUP takes as input the
security parameter λ and a memory array M and outputs
a secret state σ (for the client), and an encrypted memory
EM (for the server).
(cid:48)(cid:105) ↔ OBLIVIOUSACCESS(cid:104)(σ, y, v), EM(cid:105):
OBLIVIOUSACCESS is a protocol between the client and
the server, where the client’s input is the secret state σ,
an index y and a value v which is set to null in case the
access is a read operation (not a write). Server’s input
is the encrypted memory EM. Client’s output is M[y]
and an updated secret state σ(cid:48), and the server’s output is
4
an updated encrypted memory EM
v (cid:54)= null.
(cid:48) where M[y] = v, if
Correctness Consider the following correctness experiment.
Adversary A chooses memory M. Consider the encrypted
database EM generated with SETUP (i.e., (cid:104)σ, EM(cid:105) ↔ SETUP(cid:104)
(1λ, M),⊥(cid:105)). The adversary then adaptively chooses mem-
ory locations to read and write. Denote the adversary’s
read/write queries by (y1, v1), . . . , (yq, vq) where vi = null
for read operations. A wins in the correctness game if
(cid:104)(Mi[yi], σi), EM
(cid:48)(cid:105) are not the ﬁnal outputs of the protocol
OBLIVIOUSACCESS(cid:104)(σi−1, yi, vi), EMi−1(cid:105) for any 1 ≤ i ≤ q,
where Mi, EMi, σi are the memory array, the encrypted memory
array and the secret state, respectively, after the i-th access
operation, and OBLIVIOUSACCESS is run between an honest
client and server. The ORAM scheme is correct if the probability
of A in winning the game is negligible in λ.
Security An ORAM scheme is secure if for any adversary
A, there exists a simulator S such that the following two
distributions are computationally indistinguishable.
• RealA(λ): A chooses M. The experiment
then runs
(cid:104)σ, EM(cid:105) ↔ SETUP(cid:104)(1λ, M),⊥(cid:105). A then adaptively makes
read/write queries (yi, v) where v = null on reads, for
which the experiment runs the protocol (cid:104)(M[yi], σi), EMi(cid:105)
↔ OBLIVIOUSACCESS(cid:104)(σi−1, yi, v), EMi−1(cid:105) . Denote
the full transcript of the protocol by ti. Eventually, the
experiment outputs (EM, t1, . . . , tq) where q is the total
number of read/write queries.
q) ↔
S(q,|M|, 1λ).
• IdealA,S(λ): The experiment outputs (EM, t(cid:48)
1, . . . , t(cid:48)
C. Path ORAM
Path ORAM [21] is a tree-based ORAM construction with
high practical efﬁciency. We use Path ORAM as a component
in our SSE construction. We only review the non-recursive
version of Path ORAM where the client stores the position
map locally and hence only a single binary tree T is needed
to store the data on the server.
Notations Let M be a memory array of size at most N = 2L
that we want to obliviously store on the server. We use M[i]
to denote the ith block in M. Let T denote a binary tree of
depth L on the server side that will be used to store M. The
client stores a position map position where x = position[i] is
the index of a uniformly random leaf in T . The invariant Path
ORAM maintains is that M[i] is stored in a node on the path
from the root to leaf x which we denote by P (x). We also
use P (x, (cid:96)) to denote the node at level (cid:96) on path P (x), i.e.
the node that has distance (cid:96) from the root. There is a bucket
associated with each node of the tree T , and each bucket can
at most ﬁt Z memory blocks.
The client holds a small local stash denoted by S, which
contains a set of blocks that need to be pushed into the server’s
tree.
ORAM Setup We assume that memory array M is initially
empty. Client’s stash S is empty. All the buckets in the tree
T are ﬁlled with encryptions of dummy data. The position
S ← S ∪ READBUCKET(P (x, (cid:96)))
OBLIVIOUSACCESS(cid:104)(σ, y, v), EM(cid:105):
1: x ← position[y]
2: position[y] R← {0, . . . , 2L}
3: for (cid:96) ∈ {0, . . . , L} do
4:
5: end for
6: data ← Read block y from S
7: if v (cid:54)= then
8:
9: end if
10: for (cid:96) ∈ {L, . . . , 0} do
11:
S ← (S − {(y, data)}) ∪ {(y, v)}
P (position[y(cid:48)], (cid:96))}
S(cid:48) ← {(y(cid:48), data(cid:48)) ∈ S : P (x, (cid:96)) =
S(cid:48) ← Select min(|S(cid:48)|, Z) blocks from S(cid:48).
S ← S − S(cid:48)
WRITEBUCKET(P (x, (cid:96)), S(cid:48))
12:
13:
14:
15: end for
Fig. 2: Read/Write Ops in path ORAM
map position is initialized with uniformly random values in
{0, . . . , 2L}. This encrypted tree is denoted by EM.
Read/Write Operations To read M[y] or to write a value v
at M[y], the client ﬁrst looks up the leaf position x from the
position map and reads all the buckets along the path P (x). It
then updates position[y] to a fresh random value in {0, . . . , 2L}.
If it is a read operation, the encryption of (y, v) will be found
in one of the buckets on P (x), which the client decypts to
output v. It also adds all the buckets on P (x) to its local stash.
If it is a write operation, the client also adds (y, v) to its local
stash.
The client encrypts all the blocks in the stash and inserts
as many as possible into the buckets along P (x), inserting
each block into the lowest bucket in the path possible while
maintaining the invariant that each block y(cid:48) remains on the
path P (position[y(cid:48)]).
Figure 2 describes the read/write operations in more detail.
The READBUCKET protocol has the server return the bucket
being read to the client who decrypts and outputs the blocks in
the bucket. The WRITEBUCKET protocol has the client encrypt
and insert all the blocks in its input set into a bucket and send
it to the server.
D. Searchable Symmetric Encryption
A database D is a collection of documents di each of
which consist of a set of keywords Wi. A document can be a
webpage, an email, or a record in a database, and the keywords
can represent the words in the document, or the attributes
associated with it. A symmetric searchable encryption (SSE)
scheme allows a client to outsource a database to an untrusted
server in an encrypted format and have the server perform
keyword searches that return a set of documents containing the
keyword. For practical reasons, SSE schemes often return a
set of identiﬁers that point to the actual documents. The client
can then present these identiﬁers to retrieve the documents and
decrypt them locally.
5
More precisely, a database is a set of document/keyword-set
i=1Wi be the universe of
pair DB = (di, Wi)N
keywords. A keyword search query for w should return all di
where w ∈ Wi. We denote this subset of DB by DB(w).
i=1. Let W = ∪N
A searchable symmetric encryption scheme Π consists of
protocols SSESETUP, SSESEARCH and SSEADD.
• (cid:104)EDB, σ(cid:105) ← SSESETUP(cid:104)(1λ, DB),⊥(cid:105): SSESETUP takes
as client’s input a database DB and outputs a secret state
σ (for the client) and an encrypted database EDB which
is outsourced to the server.
• (cid:104)(DB(w), σ(cid:48)), EDB
(cid:48)(cid:105) ← SSESEARCH(cid:104)(σ, w), EDB(cid:105):
• (cid:104)σ(cid:48), EDB
SSESEARCH is a protocol between the client and the
server, where the client’s input is the secret state σ and
the keyword w he is searching for. The server’s input is
the encrypted database EDB. The client’s output is the
set of documents containing w, i.e., DB(w) as well an
updated secret state σ(cid:48), and the server obtains an updated
encrypted database EDB
(cid:48)(cid:105) ← SSEADD(cid:104)(σ, d), EDB(cid:105): SSEADD is a
protocol between the client and the server, where the
client’s input is the secret state σ and a document d to
be inserted into the database. The server’s input is the
encrypted database EDB. The client’s output is an updated
secret state σ(cid:48), and the server’s output is an updated
(cid:48) which now contains the new
encrypted database EDB
document d.
(cid:48).
Correctness Consider the following correctness experiment.
An adversary A chooses a database DB. Consider the en-
crypted database EDB generated using SSESETUP (i.e. (cid:104)EDB,
K(cid:105) ← SSESETUP(cid:104)(1λ, DB),⊥(cid:105)). The adversary then adap-
tively chooses keywords to search and documents to add to
the database. Denote the searched keywords by w1, . . . , wt.
A wins in the correctness game if (cid:104)(DBi(wi), σi), EDBi(cid:105) (cid:54)=
SSESEARCH(cid:104)(σi−1, wi), EDBi−1(cid:105) for any 1 ≤ i ≤ t, where
DBi, EDBi are the database and encrypted database, respec-
tively, after the ith search, and SSESEARCH and SSEADD are
run between an honest client and server. The SSE scheme is
correct if the probability of A in winning the game is negligible
in λ.
Security Security of SSE schemes is parametrized by a leakage
function L, which explains what the adversary (the server) learns
about the database and the search queries, while interacting
with a secure SSE scheme.
An SSE Scheme Π is L-secure if for any PPT adversary
A, there exists a simulator S such that the following two
distributions are computationally indistinguishable.
• RealΠ
A(λ): A chooses DB. The experiment then runs
(cid:104)EDB, σ(cid:105) ← SSESETUP(cid:104)(1λ, DB),⊥(cid:105). A then adap-
tively makes search queries wi, which the experiment
answers by running the protocol (cid:104)DBi−1(wi), σi(cid:105) ←
SSESEARCH(cid:104)(σi−1, wi), EDBi−1(cid:105). Denote the full tran-
scripts of the protocol by ti. Add queries are handled
in a similar way. Eventually, the experiment outputs
(EDB, t1, . . . , tq) where q is the total number of search/add
queries made by A.
• IdealΠ
A,S,L(λ): A choose DB. The experiment
runs
, st0) ← S(L(DB)). On any search query wi from
(cid:48)
(EDB
A, the experiment adds (wi, search) to the history H,
and on an add query di it adds (di, add) to H. It then
i, sti) ← S(sti−1, L(DBi−1, H)). Eventually, the
runs (t(cid:48)
experiment outputs (EDB
q) where q is the total
number of search/add queries made bt A.
, t1, . . . , t(cid:48)
(cid:48)
III. OUR CONSTRUCTION
As discussed earlier, three important security/efﬁciency
requirements for any searchable symmetric scheme for email
to be practical are (1) dynamic updatability, (2) low latency
on search and hence high IO efﬁciency, and (3) no leakage on
updates (send/received email).
The SSE construction of [5] accommodates dynamic updates
and does not leak keyword patterns on updates as each new
keyword-document pair is added to the index using a freshly
random key generated by a PRF that takes a counter as input.
This meets requirements (1) and (3). They also address the
IO efﬁciency issue by storing document IDs in larger blocks
and hence retrieving many documents IDs using a single disk
access. This provides a partial solution to the IO efﬁciency and
fast search, but the solution is not suitable for a highly-dynamic
application such as mail.
In particular, the main challenge is to pack multiple updates
(i.e. a set of new keyword-document pairs) into a large block,
before pushing them into the encrypted index. The naive
solution of storing the partial blocks in the same index and
adding new keyword-document pairs on each update leaks the
update pattern which is a major drawback for an update-heavy
application such as email.
Our construction consists of two pieces: the obliviously
updatable index (OUI), a small dynamic encrypted index for
partial blocks, and the full-blocks index (FBI), a large append-
only encrypted index for full blocks.
The full-block index holds a mapping from an encrypted
keyword to a ﬁxed-size block containing document IDs. New