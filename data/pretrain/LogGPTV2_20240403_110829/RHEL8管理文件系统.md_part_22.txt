::: section
::: titlepage
# []{#checking-and-repairing-a-file-system_managing-file-systems.html#repairing-an-ext2-ext3-or-ext4-file-system-with-e2fsck_checking-and-repairing-a-file-system}使用 e2fsck 修复 ext2、ext3 或者 ext4 文件系统 {.title}
:::
这个过程使用 `e2fsck 工具修复损坏的 ext2`{.literal}、ext3 或 ext4
文件系统。
::: orderedlist
**流程**
1.  保存文件系统镜像以进行支持调查。如果损坏是由软件漏洞导致的，则预修复文件系统元数据映像对于支持调查非常有用。预修复镜像中存在的损坏模式有助于进行根本原因分析。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    严重损坏的文件系统可能会导致元数据映像创建出现问题。
    :::
    ::: itemizedlist
    -   如果要为测试目的创建镜像，请使用 `-r`{.literal}
        选项创建与文件系统本身大小相同的稀疏文件。然后
        `e2fsck`{.literal} 可以直接对生成的文件进行操作。
        ``` screen
        # e2image -r block-device image-file
        ```
    -   如果您要创建要存档或提供的诊断镜像，请使用 `-Q`{.literal}
        选项，该选项可创建适合传输的更精简的文件格式。
        ``` screen
        # e2image -Q block-device image-file
        ```
    :::
2.  通过重新挂载文件系统来重新显示日志：
    ``` screen
    # mount file-system
    # umount file-system
    ```
3.  自动修复文件系统。如果需要用户干预，`e2fsck`{.literal}
    指明其输出中未修复的问题，并在退出代码中反映此状态。
    ``` screen
    # e2fsck -p block-device
    ```
    ::: itemizedlist
    **其它资源**
    -   `e2image(8)手册页`{.literal}.
    -   `e2fsck(8)手册页`{.literal}.
    :::
:::
:::
:::
[]{#assembly_mounting-file-systems_managing-file-systems.html}
::: chapter
::: titlepage
# []{#assembly_mounting-file-systems_managing-file-systems.html#assembly_mounting-file-systems_managing-file-systems}第 14 章 挂载文件系统 {.title}
:::
作为系统管理员，您可以在系统上挂载文件系统以访问其上的数据。
::: section
::: titlepage
# []{#assembly_mounting-file-systems_managing-file-systems.html#the-linux-mount-mechanism_assembly_mounting-file-systems}Linux 挂载机制 {.title}
:::
这部分论述了在 Linux 中挂载文件系统的基本概念。
在 Linux、UNIX 和类似操作系统中，不同分区和可移动设备（例如，CD、DVD
或者 USB
闪存驱动器）上的文件系统可以附加到目录树中的某个点（挂载点），然后再次分离。虽然文件系统挂载到目录，但无法访问该目录的原始内容。
请注意，Linux 不会阻止您将文件系统挂载到已连接的文件系统的目录中。
挂载时，您可以通过以下方法识别该设备：
::: itemizedlist
-   通用唯一标识符(UUID)：
    `UUID=34795a28-ca6d-4fd8-a347-73671d0c19cb`{.literal}
-   卷标签：例如 `LABEL=home`{.literal}
-   到非持久性块设备的完整路径：例如 `/dev/sda3`{.literal}
:::
当您使用 `mount 命令挂载文件系统`{.literal}
时，无需所有必需信息，即设备名称、目标目录或文件系统类型，`挂载`{.literal}
程序会读取 `/etc/fstab`{.literal}
文件的内容，以检查是否列出了给定的文件系统。`/etc/fstab`{.literal}
文件包含设备名称列表、将所选文件系统设置为挂载的目录以及文件系统类型和挂载选项。因此，当挂载在
`/etc/fstab`{.literal} 中指定的文件系统时，以下命令语法就足够了：
::: itemizedlist
-   使用挂载点挂载：
    ``` screen
    # mount directory
    ```
-   使用块设备挂载：
    ``` screen
    # mount device
    ```
:::
::: itemizedlist
**其它资源**
-   `mount(8)`{.literal} man page
-   [如何列出永久命名属性，如
    UUID](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_file_systems/index#proc_listing-persistent-naming-attributes_assembly_overview-of-persistent-naming-attributes){.link}。
:::
:::
::: section
::: titlepage
# []{#assembly_mounting-file-systems_managing-file-systems.html#listing-currently-mounted-file-systems_assembly_mounting-file-systems}列出当前挂载的文件系统 {.title}
:::
这个步骤描述了如何在命令行中列出所有当前挂载的文件系统。
::: itemizedlist
**流程**
-   要列出所有挂载的文件系统，请使用 `findmnt`{.literal} 工具：
    ``` screen
    $ findmnt
    ```
-   要将列出的文件系统限制为特定的文件系统类型，请添加
    `--types`{.literal} 选项：
    ``` screen
    $ findmnt --types fs-type
    ```
    例如：
    ::: example
    []{#assembly_mounting-file-systems_managing-file-systems.html#idm139716122087040}
    **例 14.1. 只列出 XFS 文件系统**
    ::: example-contents
    ``` screen
    $ findmnt --types xfs
    TARGET  SOURCE                                                FSTYPE OPTIONS
    /       /dev/mapper/luks-5564ed00-6aac-4406-bfb4-c59bf5de48b5 xfs    rw,relatime
    ├─/boot /dev/sda1                                             xfs    rw,relatime
    └─/home /dev/mapper/luks-9d185660-7537-414d-b727-d92ea036051e xfs    rw,relatime
    ```
    :::
    :::
:::
::: itemizedlist
**其它资源**
-   `findmnt(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_mounting-file-systems_managing-file-systems.html#mounting-a-file-system-with-mount_assembly_mounting-file-systems}使用挂载挂载文件系统 {.title}
:::
这个步骤描述了如何使用 `mount 工具挂载文件系统`{.literal}。
::: itemizedlist
**先决条件**
-   确定在您选择的挂载点上还没有挂载文件系统：
    ``` screen
    $ findmnt mount-point
    ```
:::
::: orderedlist
**流程**
1.  要附加特定的文件系统，请使用 `mount`{.literal} 工具：
    ``` screen
    # mount device mount-point
    ```
    ::: example
    []{#assembly_mounting-file-systems_managing-file-systems.html#idm139716098825648}
    **例 14.2. 挂载 XFS 文件系统**
    ::: example-contents
    例如：要挂载由 UUID 识别的本地 XFS 文件系统：
    ``` screen
    # mount UUID=ea74bbec-536d-490c-b8d9-5b40bbd7545b /mnt/data
    ```
    :::
    :::
2.  如果 `挂载`{.literal} 无法自动识别文件系统类型，请使用
    `--types`{.literal} 选项指定它：
    ``` screen
    # mount --types type device mount-point
    ```
    ::: example
    []{#assembly_mounting-file-systems_managing-file-systems.html#idm139715985921376}
    **例 14.3. 挂载 NFS 文件系统**
    ::: example-contents
    例如：要挂载远程 NFS 文件系统：
    ``` screen
    # mount --types nfs4 host:/remote-export /mnt/nfs
    ```
    :::
    :::
:::
::: itemizedlist
**其它资源**
-   `mount(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_mounting-file-systems_managing-file-systems.html#moving-a-mount-point_assembly_mounting-file-systems}移动挂载点 {.title}
:::
这个步骤描述了如何将挂载的文件系统挂载点更改为不同的目录。
::: orderedlist
**流程**
1.  要更改挂载文件系统的目录：
    ``` screen
    # mount --move old-directory new-directory
    ```
    ::: example
    []{#assembly_mounting-file-systems_managing-file-systems.html#idm139716126103440}
    **例 14.4. 移动本地文件系统**
    ::: example-contents
    例如，将 `/mnt/userdirs/`{.literal} 目录中挂载的文件系统移动到
    `/home/`{.literal} 挂载点：
    ``` screen
    # mount --move /mnt/userdirs /home
    ```
    :::
    :::
2.  验证文件系统是否已如预期移动：
    ``` screen
    $ findmnt
    $ ls old-directory
    $ ls new-directory
    ```
:::
::: itemizedlist
**其它资源**
-   `mount(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_mounting-file-systems_managing-file-systems.html#unmounting-a-file-system-with-umount_assembly_mounting-file-systems}使用 umount 卸载文件系统 {.title}
:::
这个步骤描述了如何使用 `umount 工具卸载文件系统`{.literal}。
::: orderedlist
**流程**
1.  使用以下命令之一卸载文件系统：
    ::: itemizedlist
    -   通过挂载点：
        ``` screen
        # umount mount-point
        ```
    -   通过设备：
        ``` screen
        # umount device
        ```
    :::
    如果命令失败并显示类似如下的错误，这意味着文件系统正在使用，因为进程正在使用其中的资源：
    ``` screen
    umount: /run/media/user/FlashDrive: target is busy.
    ```
2.  如果使用文件系统，请使用 `fuser`{.literal}
    实用程序来确定正在访问哪个进程。例如：
    ``` screen
    $ fuser --mount /run/media/user/FlashDrive
    /run/media/user/FlashDrive: 18351
    ```
    之后，使用文件系统终止进程并尝试再次卸载它。
:::
:::
::: section
::: titlepage
# []{#assembly_mounting-file-systems_managing-file-systems.html#common-mount-options_assembly_mounting-file-systems}常用挂载选项 {.title}
:::
这部分列出了 `mount`{.literal} 实用程序的一些常用选项。
您可以使用以下语法使用这些选项：
``` screen
# mount --options option1,option2,option3 device mount-point
```
::: table
[]{#assembly_mounting-file-systems_managing-file-systems.html#idm139716092505248}
**表 14.1. 常用挂载选项**
::: table-contents
  选项                  描述
  --------------------- ------------------------------------------------------------------
  `async`{.literal}     在文件系统中启用异步输入和输出操作。
  `auto`{.literal}      允许使用 `mount -a`{.literal} 命令自动挂载文件系统。
  `默认值`{.literal}    为 `async,auto,dev,exec,nouser,rw,suid`{.literal} 选项提供别名。
  `exec`{.literal}      允许在特定文件系统中执行二进制文件。
  `loop`{.literal}      将镜像挂载为 loop 设备。