of the aforementioned shortcomings of the existing solutions
and has other desirable properties. Table I summarizes the
comparison of our construction to existing techniques.
Consider the following IA workﬂow. A system administrator
ﬁrst decides on a set of permissible transformations. Any
editor can apply a permissible transformation on an image
and generate a new proof, provided the image’s authentication
data is available either as a digital signature computed by the
camera or as a previous proof. Any viewer can then verify that
the proof is valid for this image.
PhotoProof fulﬁlls the above IA workﬂow, with additional
important properties, some of which have not been achieved
by any other technique:
1) Proofs are unforgeable. Not only does our method have
negligible error probability, either for falsely rejecting
or falsely accepting an image as authentic, it is also
provably secure against (computationally bounded) ad-
versaries that might try to pass manipulated images as
authentic.
2) Proofs are zero-knowledge, which ensures that no infor-
mation about the image, other then it being authentic,
can be learned from the proof. For example, one might
want to crop out or black out an embarrassing portion of
an image. The zero-knowledge property guarantees that
information edited out of the image (in an authenticity-
preserving way), and even the choice of transformations
that were applied to the image, remain secret.
3) Veriﬁcation is fast and proofs are of constant-size.
4) Authentication can include additional metadata, e.g, to
prevent change of author information or geographic data.
5) Finally, PhotoProof is unique in that it can naturally
be adjusted to include any set of image transformations.
In terms of performance, proof veriﬁcation takes mere mil-
liseconds, but at present the creation of proofs is too slow
for many applications and common image sizes. We discuss
possible performance enhancements in Section V.
D. Approach
Our approach is an application of the Proof-Carrying Data
paradigm, deﬁned by Chiesa and Tromer [11].
Consider the (informal) scenario of a distributed compu-
tation between multiple parties, with parties receiving inputs
from others, performing their own computation and outputting
their results to the next parties in the computation. PCD
transforms this computation into a secure one, by enabling
each party to attach to its output a proof. The PCD proof
certiﬁes not only the correctness of the last computation, but
also of its entire history. This means that in order to accept
the result of such a distributed computation as correct, only
the last proof is required (see Figure 1).
(cid:93) (cid:20)(cid:15)(cid:652)
(cid:20)
(cid:93)
(cid:20)(cid:15)(cid:652)
(cid:20)
(cid:36)
(cid:93)(cid:21)(cid:15)(cid:652)(cid:21)
(cid:15)(cid:652) (cid:22)
(cid:93)(cid:22)
(cid:93)(cid:23)(cid:15)(cid:652)(cid:23)
(cid:37)
(cid:38)
(cid:93)
(cid:25)(cid:15)(cid:652)
(cid:25)
(cid:93) (cid:24)(cid:15)(cid:652) (cid:24)
(cid:39)
(cid:40)
(cid:93)(cid:82)(cid:88)(cid:87)(cid:15)(cid:652)(cid:82)(cid:88)(cid:87)
(cid:41)
(cid:57)(cid:72)(cid:85)(cid:76)(cid:73)(cid:76)(cid:72)(cid:85)
Figure 1. A PCD computation transcript. Each node receives input messages
zi and proofs πi from previous nodes, and then computes its output and
generates a proof for it. Only the ﬁnal proof is needed to certify that the
entire computation was executed correctly.
PCD is known to be possible under various reasonable
assumptions [9], and was recently implemented, in the general
257257
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:41 UTC from IEEE Xplore.  Restrictions apply. 
case [7], and (more efﬁciently) in the special case of a single
hop, where it is called a SNARK [6]. We build on these prior
works and adapt them to the image authentication setting.
This work is also the ﬁrst application-speciﬁc use of PCD
(prior prototypes were either proofs-of-concept for generic
computation [7], [13] or used the special case of SNARKs
[3]).
We begin with the following high-level description of how
to use PCD to build an image authentication mechanism
(see Figure 2). Initially, an image is captured with a digital
camera. A user who wishes to edit
the image can apply
a permissible transformation on it, and — using the PCD
proving algorithm — generate a new proof for its authenticity.
Any number of such steps can follow, and may be performed
by different users. At any time, any viewer of the image may
check its proof by using the PCD veriﬁcation algorithm. The
proof guarantees that this latest step and all prior steps were
complied with the speciﬁcation (encoded via PCD) of the
predeﬁned set of permissible transformations. We propose a
digital signature produced inside the camera (as also proposed
in [21]) as the root of trust that speciﬁes the beginning of
the chain of permissible transformation steps, and with the
required precautions we discuss in Appendix A.
(cid:76)(cid:80)(cid:68)(cid:74)(cid:72)(cid:19)(cid:3)
(cid:86)(cid:76)(cid:74)(cid:81)(cid:68)(cid:87)(cid:88)(cid:85)(cid:72)
(cid:76)(cid:80)(cid:68)(cid:74)(cid:72)(cid:20)
(cid:83)(cid:85)(cid:82)(cid:82)(cid:73)(cid:20)
(cid:72)(cid:71)(cid:76)(cid:87)(cid:82)(cid:85)(cid:20)
(cid:86)(cid:76)(cid:74)(cid:81)(cid:76)(cid:81)(cid:74)(cid:3)
(cid:70)(cid:68)(cid:80)(cid:72)(cid:85)(cid:68)
(cid:44)(cid:80)(cid:68)(cid:74)(cid:72)(cid:76)
(cid:83)(cid:85)(cid:82)(cid:82)(cid:73)(cid:76)
(cid:76)(cid:80)(cid:68)(cid:74)(cid:72)(cid:21)
(cid:83)(cid:85)(cid:82)(cid:82)(cid:73)(cid:21)
(cid:72)(cid:71)(cid:76)(cid:87)(cid:82)(cid:85)(cid:21)
(cid:11)(cid:68)(cid:12)
(cid:87)(cid:85)(cid:68)(cid:81)(cid:86)(cid:73)(cid:82)(cid:85)(cid:80)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:83)(cid:85)(cid:82)(cid:89)(cid:72)(cid:3)
(cid:68)(cid:88)(cid:87)(cid:75)(cid:72)(cid:81)(cid:87)(cid:76)(cid:70)(cid:76)(cid:87)(cid:92)(cid:3)(cid:82)(cid:73)(cid:3)
(cid:81)(cid:72)(cid:90)(cid:3)(cid:76)(cid:80)(cid:68)(cid:74)(cid:72)
(cid:76)(cid:80)(cid:68)(cid:74)(cid:72)(cid:81)
(cid:83)(cid:85)(cid:82)(cid:82)(cid:73)(cid:81)
(cid:72)(cid:71)(cid:76)(cid:87)(cid:82)(cid:85)(cid:81)
(cid:89)(cid:72)(cid:85)(cid:76)(cid:73)(cid:92)(cid:76)(cid:81)(cid:74)(cid:3)
(cid:89)(cid:76)(cid:72)(cid:90)(cid:72)(cid:85)
(cid:44)(cid:80)(cid:68)(cid:74)(cid:72)(cid:76)(cid:14)(cid:20)
(cid:83)(cid:85)(cid:82)(cid:82)(cid:73)(cid:76)(cid:14)(cid:20)
(cid:72)(cid:71)(cid:76)(cid:87)(cid:82)(cid:85)(cid:76)(cid:14)(cid:20)
(cid:11)(cid:69)(cid:12)
Figure 2. The history of an image as a distributed computation (a) where in
each step a PCD-generated proof is appended (b).
In this work we present
the theoretical construction of
PhotoProof from PCD for any set of permissible trans-
formations, as well as an implementation of a PhotoProof
prototype, supporting small images and a diverse set of per-
missible transformations. Our prototype builds on the PCD
implementation of [7].
The rest of this paper is organized as follows. We begin by
formally deﬁning image authentication schemes in Section II.
In Section III we give some required background on PCD. We
present our theoretical construction and its proof of security in
Section IV and describe our prototype, challenges in instan-
tiation, and possible extensions in Section V. We summarize
and give future research directions in Section VI.
II. DEFINING IMAGE AUTHENTICATION
We consider the following image authentication workﬂow.
First, the IA scheme is constructed and implemented, along
with a library of implemented image transformations. A system
258258
administrator who wishes to integrate this IA scheme into his
or her system, chooses a set of permissible transformations
from the available collection. This set reﬂects what changes are
allowed to be made to the images. The system administrator
then runs the IA scheme’s generator algorithm to produce
the system keys: two public keys for proving and veriﬁca-
tion, which are encoded in editing and viewing applications
respectively, and a secret signing key, securely embedded in
the cameras.4 Photographers can then use the cameras to
produce digitally signed images. Any editor can use the editing
application to edit the image, by performing a permissible
transformation on it, and to generate a proof of authenticity for
the new image. The viewing application enables any viewer
to present images while verifying their authenticity using their
attached proofs.
Our goal is to construct such an IA scheme that applies
for any deﬁned set of permissible transformations. The proofs
must be succinct, as otherwise simply attaching a signed copy
of the image prior to the transformation to an altered one (and
letting the veriﬁer compare the two) would sufﬁce. We also
want the proofs to be recursive, i.e., it must be possible to
prove the authenticity of an image using another authenticated
copy, without having access to the original camera-signed
image. Moreover, the proofs must be cryptographically hard
to forge and must not reveal data about the image other than
its authenticity. We begin by deﬁning some basic terms, and
proceed to the formal deﬁnition of an IA scheme.
A. Basic deﬁnitions
Image.
An image I is a pair I = (B, M ) contain-
ing a pixel matrix B and metadata M. The pixel matrix
B ∈ {0, 1, ..., 255}3×N×N , for some integer N, represents an
N × N matrix of pixels, each containing 3 bytes for the red,
green and blue components.5 N is not the actual size of the
image, but merely the allocated size. The height and width of
the image are speciﬁed in the metadata and can be any integer
smaller or equal to N. Pixel values outside the real image area
should be 0.
The metadata for an image, denoted M, is a list of key-
value pairs, where the keys are unique and taken from some
predetermined set. We assume M is represented as a binary
string by some reasonable encoding (the precise encoding is
inconsequential for the ensuing discussion), and constrain the
length of this string to a ﬁxed length m. Let I [key] denote
the value in M with the key key, which we also call the key
ﬁeld. M must contain values for width and height keys that
specify an image’s real width and height.
Let I denote the set of all images, and let IN denote the
set of all N-images, i.e., with an N × N pixel matrix.
4For simplicity, we describe the scenario where the signing keys to be
embedded in cameras are created from scratch by the IA scheme. In reality,
existing signing keys embedded by camera manufacturers would probably be
used; see Section V-G for this natural extension.
5We consider here only square matrices and 8-bit RGB pixels for clarity.
This is trivially generalized.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:41 UTC from IEEE Xplore.  Restrictions apply. 
Remark 1. We distinguish the notion of image as deﬁned here
from the notion of image ﬁles (e.g., PNG or JPEG). When we
refer to image ﬁles we say so explicitly.
Transformation. An image transformation t is a function
t : I × {0, 1}(cid:2) → I such that for every N, if I ∈ IN , then
t (I, γ) ∈ IN for any γ. That is, an image transformation takes
an N-image and some parameters as input, and outputs an N-
image. We also require that for every N there is an upper
bound KN such that for all I ∈ IN , γ ∈ {0, 1}(cid:2) there is a
γ(cid:2) ∈ {0, 1}KN such that t (I, γ) = t (I, γ(cid:2)
). In other words,
the parameter string length is bounded for every N. Note
that an image transformation may work on both the image’s
pixel matrix and its metadata (e.g., a crop transformation
may change the width and height ﬁelds of an image). As
a default, a transformation leaves the metadata as is, unless
otherwise deﬁned. It is also possible to deﬁne transformations
that change only the metadata (e.g., edit an author ﬁeld).
Permissible transformation. Let T = (t1, ..., tn) denote
the set of permissible transformations, a set of n image
transformations that were deﬁned by the system administrator
as authenticity preserving.6
Provenance. For some N-image I, a provenance7 of I is
an N-image J, a ﬁnite series of transformations (u1, ..., um)
and a series of parameter strings Γ = (γ1, ..., γm) such that
if we take I1 = J and Ii+1 = ui (Ii, γi) for 1 ≤ i ≤ n,
then Im+1 = I. In this case we say that I has a provenance
originating in J. We call a provenance of I a permissible
provenance if all of the ui are permissible transformations.
Original image. Let S = (G
S) be an existentially
unforgeable digital signature scheme [24]. For an image I, a
S and a signature σ, we say that I is
signature veriﬁcation key p
, I, σ) = 1.
S according to σ if V
original with respect to p
When it is clear what key is relevant, we only say that I is
original according to σ, and if σ is speciﬁed in that context
too, we may just say that I is original.8
Authentic image. Given p
let e =
(O, (u1, .., um) , Γ) be a provenance and σ a signature. We say
an image I is authentic with respect to (T , p
S) according to
(e, σ) if e is a permissible provenance of I and O is original
S according to σ. (Note that every original
with respect to p
image is authentic, according to the provenance of length 0.)
S and T as before,
S (p
, S
S
, V
S
S
B. Image authentication
Given a set of permissible transformations T and a security
parameter λ, and given an existentially unforgeable signa-
ture scheme S = (G
S), an Image Authentication (IA)
scheme for T is a tuple IA = (S, G
IA is
6This is easily generalized to image relations that check conditions between
IA), where G
, S
S
, P
, V
, V
IA
IA
input and output images (e.g., each pixel value changes by at most 1).
7The word provenance is originally used for referring for a work of art’s
S
chronology of custody.
8A more general deﬁnition would be to use some originality decider that
decides whether a given image is original, according to some witness. This
way, the construction does not necessarily depend on a digital signature
scheme. We chose to stick with the more speciﬁc version, as it is more intuitive
and practical.
IA
IA
IA
IA
, sk
, vk
||p
IA is called
The generator G
(cid:3) → (pk
IA is called the prover, and V
called the generator, P
(cid:2)
the veriﬁer.
1N , 1λ
IA), given a
maximal image size N and security parameter λ, probabilisti-
cally generates a secret signing key sk
IA, a public veriﬁcation
IA, which also contains a public key that matches sk
key vk
IA,
S (here and everywhere else, || denotes
IA = vk(cid:2)
i.e. vk
string concatenation), and a public proving key pk
IA is
a preprocessing step and assumed to be executed once, in
advance, by a trusted party (e.g., the camera manufacturer).
, Iin, πin, t, γ) → (Iout, πout) , receives
IA, an N-image Iin, a proof πin and a pa-
a proving key pk
rameter string γ, and returns an edited image Iout = t (Iin, γ)
with a proof for its authenticity πout.
, I, π) → 0/1, receives a veriﬁcation
IA, an N-image I and a proof π and returns a decision
The veriﬁer V
The prover P
IA (vk
IA (pk
IA. G
IA
IA
key vk
whether I is authentic.
The signature scheme’s signing algorithm S
S is intended to
be executed by a trusted party (e.g., a secure camera). For