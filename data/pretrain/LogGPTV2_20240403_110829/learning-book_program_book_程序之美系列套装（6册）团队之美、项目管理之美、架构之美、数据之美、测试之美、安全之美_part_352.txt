### 优化后的文本

#### 玩具总动员（儿童片）
- **显示消息**：“添加成功”

#### 影片列表
| 片名         | 类别   | 拷贝数/库存数 |
|--------------|--------|---------------|
| 星球大战     | 科幻片 | 0             |
| 阿拉丁       | 儿童片 | 4/2           |
| 星际迷航     | 科幻片 | 3             |
| 玩具总动员   | 儿童片 | 0             |

#### 添加影片名（星球大战，科幻片）
- **提示消息**：“错误：名为星球大战的影片已存在”

### 行为驱动的说明
1. **假设**：目录包含“星球大战，科幻片”
2. **当**：添加片名“星球大战，科幻片”
3. **则**：目录保持不变，并显示消息“错误：名为星球大战的影片已存在”

### 面向易读的说明
创建一种领域特定的测试语言（Domain-Specific Testing Language, DSTL），使得脚本更加易读。这种语言使用的词汇更加清晰，并且用业务领域的目标和现实世界的对象加以表述。如图14-2所示，DSTL的第一行等价于测试脚本的前八行。尽管这种语言有了显著的提升，读者仍然必须将这些高级描述同业务逻辑结合起来理解。

通过向DSTL中再添加一些简单的结构描述，我们离完美的说明更进了一步。如图14-2所示的陈述性的、行为驱动的“假设...当...则...”结构（Given/When/Then）令业务逻辑十分清晰地表达了出来。这样的说明书可以从多种格式获得：表格、文本、图形（如UML符号）、工作流图板或者UI线图等。关键是寻找一种在业务领域内表达含义的最优方式。

### 持久化需求工件
实例是阐述需求的持久工件，场景则是用于细分、选择和规划系统增量开发的临时工件。我们面临的问题是如何寻找潜在的、小的、孤立的场景并将其组合成一整套连续的完整的系统需求。

#### 图14-3：需求工件的第一次迭代
- **需求**：添加影片名
- **用户场景**：为了吸引顾客，库存经理必须及时地在商品目录中加入最新的影片信息。
- **场景**：添加影片名——成功
  - **前提**：目录不包含该影片
  - **操作**：添加影片名
  - **结果**：目录包含了新影片

#### 图14-4：需求工件的两次迭代
- **更多细节**：
  - 如果添加了一个重复的影片名会怎样？
  - 目录中的影片信息必须是唯一的，影片名和影片类别共同确定了唯一的一部影片。
- **场景**：添加影片名——拒绝重复
  - **前提**：目录包含“星球大战，科幻片”
  - **操作**：添加影片“星球大战，科幻片”
  - **结果**：目录不改变，并显示消息“错误：名为星球大战的影片已存在”

### 易测的设计
与规格说明书的其他形式不同，TDD对软件设计有直接的影响：正常情况下，TDD确保设计是可测试的（Meszaros 2007）。一个可测试的系统便于人或工具完成如下工作：
- 设置系统/组件的初始状态及所有依赖的系统/组件
- 控制环境因素，如日期和时间
- 使系统/组件完全独立于其条件
- 在系统/组件上触发一系列动作
- 控制来自相关系统/组件的响应
- 得到所有直接或者间接（副作用）的结果

设计这样一种灵活、可控、独立、易用和便于重复的系统包含了若干新策略。

### 典型三层体系结构
典型的三层体系结构（图14-5）易于划分但难于测试。控制和确认操作仅限于UI层和数据库层。因为一些外部组件（操作系统或第三方系统）是直接从代码引入的，所以要想替代它们几乎不可能。相反地，从TDD方法中衍生出的设计是模块化的，有明显的接口以便于替代（如模拟对象）。只要给予支持跟踪技术的特性（如对输入、中间步骤和结果的记录）以足够的重视，系统自身就能够实现自动测试、探索性测试和产品支持。测试可以在任何层次上执行，这实际上是软件体系和设计之美的新标准。

### 工具支持
对于自动实例的批评主要是认为它们很少能用于发现新问题或者弥补被忽视的错误，因而算不上有效的测试。这就回到了TDD误称的问题上，也就是将其混同为了测试。TDD希望实例是自动化生成的，以确保需求值得信任；自动化的关键就是我们设法保证规格说明在系统的整个生命周期上准确无误。这同大多数其他规格说明有显著的不同，它们一般在开发开始后就和系统失去了同步。

#### 自动化实例的要求
相比产品代码，自动化实例必须做到：
- 更准确
- 维持更长时间
- 更易读
- 更易编写
- 更易维护和更安全
- 更容易定位

这些要求虽然很高，但全是事实。自动化实例必须比产品代码“更好”，而绝非当时间紧迫时的一种可有可无的工作。支撑自动化实例的工具也必须比开发工具或测试工具“做得更多”，以使我们能满足置于实例上的那些更高的标准。

### 敏捷联盟功能测试工具（AAFTT）
敏捷联盟功能测试工具（Agile Alliance Functional Testing Tools, AAFTT）工作组和讨论组参与到那些需要支撑TDD的工具的从业者社区中来。显然一个完美的TDD工具应该提供下述核心特性以支持参与到整个过程中的各类角色，如表14-2所示。

#### 完整的TDD过程
| 角色        | 任务                        |
|-------------|-----------------------------|
| 设计者      | 创建实例                    |
| 读者        | 执行实例                    |
| 实例自动化人员 | 版本控制实例                |
| 开发者      | 发现实例                    |
|             | 评审实例                    |
|             | 执行实例                    |
|             | 创建DSTL                    |
|             | 执行实例                    |
|             | 版本控制DSTL                |
|             | 评审实例和DSTL              |
|             | 执行实例                    |

希望以上优化后的文本能够帮助你更好地理解和使用相关信息。