0
0
玩具总动员儿童片
9.显示消息“添加成功”
0
0
10.影片列表如下
5.添加片名（星球大战，科幻片）
片名
类别
拷贝数库存数
6.提示添加片名消息
错误：名为星球大战
阿拉丁
儿童片
4
2
的影片已存在
星际迷航
科幻片
3.行为驱动的说明
星球大战
科幻片
0
0
玩具总动员儿童片
0
0
1.假如目录包含：星球大战，科幻片
11....
2.
当添加片名：星球大战，科幻片
12....
3.则目录保持不变
而且出现消息“错误：名为星球大战的
13....
影片已存在
图
14-2
面向易读的说明
创建一种领域特定的测试语言（Domain-SpecificTesting
Language,DSTL）使得脚本更加易读，这种语言使用的词汇更加清晰
并且用业务领域的目标和现实世界的对象加以表述。图14-2中，
DSTL的第一行等价于测试脚本的前八行。尽管这种语言有了显著的
提升，读者仍然必须将这些高级描述同业务逻辑结合起来一起理
解。
通过向DSTL中再添加一些简单的结构描述，我们离完美的说明更进
了一步。如图14-2所示的陈述性的、行为驱动的"假设....当...
则...."结构（Given/When/Then）令业务逻辑十分清晰地表达了出
来。这样的说明书可以从多种格式获得：表格、文本、图形（如
UML符号）、工作流图板或者UI线图等。关键是寻找一种在业务领
域内表达含义的最优方式。
持久化需求工件
实例是阐述需求的持久工件，场景则是用于细分、选择和规划系统
增量开发的临时工件。我们面临的问题是如何寻找一个个潜在的、
小的、孤立的场景并将其组合成为一整套连续的完整的系统需求。
2008
---
## Page 2010
在这个过程中，每个场景都可能形成新的实例或对旧有的实例作出
某种修止。
图14-3显示了在第一次选代中如何将一个特性成功实现。场景涂为
灰色用以表示其短暂性。图的右侧是持久化工件的第一次填充，包
括了特征描述（需求）以及对应的实例。
需求：添加影片名
用户场景
为了吸引顾客，库存经理必须及时地在商品
实例
目录中加入最新的影片信息
场景：添加影片名一一成功
成功实例
作为一个库存经理
假如：目录不包含
我想添加一个新的影片名
当：添加影片名
以便我们能吸引顾客的注意
则：目录包含了
图14-3需求工件的第一次选代
图14-4显示了逐渐地构建持久化规格说明书的过程（以Concordion支
持的形式[1]）。在最初的成功场景上引入了一些形如“如果...
则......”（Whatif）的问题，这些问题揭示了更多的业务逻辑和对应
的实例。无论在形成工作计划的过程中场景的规模和顺序如何，最
终的需求工件都需要将需求和实例重组为相同的形式。这实质上形
成了软件需求之美的新标准。
[11http://www.concordion.org/
易测的设计
与规格说明书的其他形式不同，TDD对软件设计有直接的影响：正
常情况下，TDD确保设计是可测试的（Meszaros2007）。一个可测
试的系统便于人或工具完成如下工作：
设置系统/组件的初始状态及所有依赖的系统/组件
控制环境因素，如日期和时间
令系统/组件完全独立于其条件
2009
---
## Page 2011
在系统/组件上触发一系列动作
控制来自相关系统/组件的响应
得到所有直接或者间接（副作用）的结果
设计这样一种灵活、可控、独立、易用和便于重复的系统包含了若
干新策略。
需求
需求：添加影片名
用户场景
为了吸引顾客，库存经理必须及时地在商品
实例
目录中加入最新的影片信息
场景：添加影片名一
成功实例
作为一个库存经理
假如：目录不包含
我想添加一个新的影片名
当：添加影片名.
以便我们能吸引顾客的注意
则：目录包含了
更多细节
如果添加了一个重复的影片名会怎样？
目录中的影片信息必须是唯一的，影片
名和影片类别共同确定了唯一的一部
影片
场景：添加影片名一一拒绝重复
作为一个库存经理
重复错误实例
我想添加一个唯一的影片名
假如：目录包含“星球大战科幻片
当：添加影片“星球大战，科幻片
以便根据影片名记录的租费
则：目录不改变
准确无误
而且：提示信息“错误
图14-4需求工件的两次迭代
典型的三层体系结构（图14-5）易于划分但是难于测试。控制和确
认操作仅限于UI层和数据库层。因为一些外部组件（操作系统或第
三方系统）是直接从代码引入的，所以要想替代它们几乎不可能。
相反地，从TDD方法中衍生出的设计是模块化的，有明显的接口以
便于替代（如模拟对象）。只要给予支持跟踪技术的特性（如对输
入、中间步骤和结果的记录）以足够的重视，系统自身就能够实现
2010
---
## Page 2012
自动测试、探索性测试和产品支持。测试可以在任何层次上执行，
这实际上是软件体系和设计之美的新标准。
工具支持
对于自动实例的批评主要是认为它们很少能用于发现新问题或者弥
补被忽视的错误，因而算不上有效的测试。这就回到了TDD误称的
问题上，也就是将其混同为了测试。TDD希望实例是自动化生成
的，以确保需求值得信任；自动化的关键就是我们设法保证规格说
明在系统的整个生命周期上准确无误。这同大多数其他规格说明有
显著的不同，它们一般在开发开始后就和系统失去了同步。
1.典型三层系统
2.高可测系统
作系
他系
操作系统
其他系统
图14-5面向易测的设计
自动化实例与一套高标准有关。相比产品代码，自动化实例必须做
到：
·更准确
·维持更长时间
更易读
·更易编写
·更易维护和更安全
·更容易定位
2011
---
## Page 2013
这些要求虽然很高，但全是事实。自动化实例必须比产品代码“更
好”，而绝非当时间紧迫时的一种可有可无的工作。支撑自动化实例
的工具也必须比开发工具或测试工具“做得更多”，以使我们能满足
置于实例上的那些更高的标准。
敏捷联盟功能测试工具（AgileAllianceFunctionalTesting
Tools.AAFTT）工作组和讨论组参与到那些需要支撑TDD的工具的从
业者社区中来。显然一个完美的TDD工具应该提供下述核心特性以
支持参与到整个过程中的各类角色，如表14-2所示。
表14-2：完整的TDD过程
设计者
读者
实例自动化人员
开发者
红
1.创建实例
2.执行实例
3.版本控制实例
4.发现实例
5.评审实例
6.执行实例
7.创建DSTL
8.执行实例
9.版本控制DSTL
10.评审实例和DSTL
11.执行实例