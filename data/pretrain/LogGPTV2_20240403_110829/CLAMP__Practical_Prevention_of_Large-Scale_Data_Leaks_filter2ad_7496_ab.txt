forwards all requests from that client to the same WebStack.
For web applications that use HTTPS (our primary focus),
the Dispatcher can use the SSL session ID to identify
which TCP connections originate from the same client’s
browser. A non-HTTPS Dispatcher might instead rely on
a cryptographic session cookie to achieve the same result.
To reduce load, the Dispatcher forwards requests for the
public portions of a site (e.g., non-HTTPS pages) to a single
WebStack that handles such requests on behalf of all users.
3.2.3. Virtual Web Servers (WebStacks). Each Web-
Stack is instantiated from a master image of the web-server
software stack and is dedicated to a single client or user.
If administrative changes are made to the web content
or conﬁguration, the master can be modiﬁed, and newly
instantiated WebStacks will reﬂect these changes. Since
data must not propagate from a user’s WebStack back to the
master image, work done on behalf of one user cannot be
cached to improve another user’s performance. However,
caching can be done proactively by updating the master
memory image to include, for example, the page displaying
a new product promotion.
CLAMP maintains an identity for each WebStack, which
must be a valid user’s identity to enable access to sensitive
information in the database. When ﬁrst instantiated by the
Dispatcher, WebStacks default to a restricted identity that
1. http://www.vmware.com/products/converter/
2. http://www.parallels.com/en/products/desktop/features/transporter/
can only access public information in the database. This
allows a user to, for example, browse products prior to
login. Section 4 describes these data access policies.
To acquire a user’s identity, a WebStack must authen-
ticate to the UA. This requires a small patch3 to the
web application’s code to forward the user’s authentication
credentials (e.g., user name and password) to the UA. Once
the UA veriﬁes the credentials, the WebStack is labeled
with the identity of the authenticated user.
When a WebStack determines that the user has ended her
interaction with the web application (e.g., when the user
clicks on a logout link or an inactivity timer expires), it
sends a termination notice to the QR. The QR removes the
mapping from WebStack to user identity, uses the Isolation
Layer’s management interface to destroy the WebStack, and
forwards the termination notice to the Dispatcher, which
closes its connection to the client and WebStack.
To preserve logging data, the web server in each Web-
Stack is conﬁgured to write its logs to an append-only
database. All major web servers provide this functionality.
3.2.4. User Authenticator (UA). Because the WebStacks
are untrusted, CLAMP uses a special-purpose module, the
UA, to authenticate users. When the WebStack provides
the UA with the user’s credentials, the UA performs the
same veriﬁcation check that the web server would normally
do. For instance, the UA may check that the hash of the
supplied password matches the user’s entry in the database,
which the UA accesses via the QR. Thus, creating the UA
for a particular LAMP application is straightforward. We
simply extract the existing user authentication logic from
the application and replace it with calls to the UA.
3.2.5. Query Restrictor (QR) + Database. The QR (see
Section 4 for details) ensures that a WebStack can only
access database content for which its identity is authorized.
Since only the UA can change a WebStack’s identity, even a
fully compromised WebStack (or a WebStack with a SQL-
injection vulnerability) cannot access unauthorized data.
4. The Query Restrictor
The Query Restrictor (QR) is a trusted module that re-
stricts virtual web servers’ (WebStacks’) access to sensi-
tive database content. In our implementation, the QR is
a specialized SQL proxy that interposes on all database
trafﬁc without requiring changes to the WebStacks. When
a WebStack acting on behalf of a user attempts to connect
to the database, the QR instead connects the client to a
separate restricted database tailored speciﬁcally to that
user. This restricted database has a schema identical to that
of the full database, but contains no sensitive data except
data available to that WebStack’s user. The QR builds a
restricted database by interpreting a web application’s data
3. For our applications (Section 6), the patch added 5-10 lines of code.
157
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:17:42 UTC from IEEE Xplore.  Restrictions apply. 
Table Name
Users
Orders
Shipments
Schema
cust id, email, pw hash
cust id, order id, cc num
order id, address
(a) Example Database Tables
Table
Users
Orders
Shipments
Access Predicate
cust id = UID
cust id = UID
Shipments.order id = Orders.order id
and Orders.cust id = UID
(b) Policy for the schema in Figure 3(a).
Figure 3. Example database with its access policy.
access policy, which enumerates sensitive tables in the
database and indicates, for a given user, what rows the user
can legitimately access. Using existing database function-
ality, CLAMP can provide these restricted databases efﬁ-
ciently, without the need to populate temporary databases
or perform expensive copies.
We now describe how to associate database entries with
speciﬁc users and how data access policies enable a generic
QR to protect sensitive data.
4.1. Identifying a User’s Sensitive Data
To construct a restricted database for a particular user,
the QR must be able to identify the data that belongs to
that user. Fortunately, any multi-user web application must
already explicitly or implicitly tag each user’s data so that
it can be retrieved when the user logs into the website.
For instance, database tables containing user information
typically include a user identiﬁer (UID) ﬁeld that enables
the application to differentiate one user’s data from an-
other’s. For example, the simpliﬁed online shopping cart
schema shown in Figure 3(a) uses the cust id value as a
UID. Even tables that do not explicitly contain a UID are
implicitly linked back to a single user. For instance, each
row in the ‘Shipments’ table links back to a single customer
via order id ﬁeld shared between the ‘Shipments’ table and
the ‘Orders’ table.
While this example is simple, in our sampling of real-
world schemas, we found the task of attributing sensi-
tive data to a system-wide UID value to be surprisingly
straightforward, even in large systems. Developers often
intentionally design database schemas to minimize the
complexity of the code to retrieve user data.
CLAMP, using data access policies as described below,
relies on this same UID value to identify what data a
WebStack acting on behalf of a particular user is permitted
to access. The QR learns of a new binding between a
WebStack and a UID from the UA, which reports each
successful authentication request made by a WebStack.
With this approach, CLAMP effectively implements ac-
cess control policies identical to those intended by the
application developer, but with two key improvements.
First, CLAMP provides a straightforward way to express
and audit access control policies using a single policy
ﬁle instead of using checks scattered throughout the code.
Second, CLAMP’s QR enforces access control in a small
isolated module that is robust to web-server compromises.
4.2. Data Access Policies
The QR uses a data access policy and the UID of a Web-
Stack to construct the user’s restricted database. The data
access policy encapsulates application-speciﬁc knowledge
of the database’s schema, and hence allows the QR’s imple-
mentation to be independent of the application’s schema.
The policy is parameterized based on the user’s UID and
describes which tables and potentially which rows within
those tables the user can access. More speciﬁcally, the data
access policy for a database consists of an access predicate
P for each table in the database. In other words, if access
predicate PT is applied to table T in the full database, then
the restricted database table TR will contain only the rows
that match the predicate.
Read Restrictions. Access to an entire table can be
permitted or denied using the predicates ‘True’ or ‘False’.
The more interesting case is when a WebStack is permitted
to access some, but not all, rows in a table. For example,
applying the predicate ‘cust id = UID’ to the ‘Orders’ table
indicates that the restricted database for a WebStack asso-
ciated with a particular UID contains only the rows of the
table where the value of column ‘cust id’ is equal to that
UID. Such a policy would prevent a malicious WebStack
from accessing sensitive credit card numbers (‘cc num’
values) stored with orders for other users. Figure 3(b) shows
a complete data access policy for the example schema.
In more complex schemas, a table may contain sensitive
data without having a column specifying a UID. Data
speciﬁc to a user is accessed with a SQL inner join.4 A
single “join” predicate could refer to many tables in the
worst case. Fortunately, the joins required by a CLAMP
access predicate directly map to joins the developer must
already implement in order to enforce those access controls
at the application layer. Since database schemas are often
created in tandem with the software, the developer has a
strong incentive to keep access control simple. The data ac-
cess policies for osCommerce, MyPhpMoney, and HotCRP
(see Section 6 and Appendices A and B) provide further
evidence that crafting access policies is straightforward for
anyone familiar with the database schema.
4. An SQL inner join combines two tables A and B into a new table
that has a row for each pair of rows in the original tables (i.e., A × B).
Inner joins are often subject to an SQL “where” clause requiring that the
value of a column X in A matches the value of a column Y in B.
158
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:17:42 UTC from IEEE Xplore.  Restrictions apply. 
Write Restrictions. CLAMP’s access policies also con-
trol whether a user may modify (update, insert, or delete)
rows in her restricted database, since modifying database
contents can have important conﬁdentiality implications.
For example, a malicious WebStack that could change
the passwords of other users could then authenticate as
those users and access their data. Thus, for each restricted
database, the CLAMP policy speciﬁes whether the database
is read-only (the default), fully modiﬁable, or modiﬁable
only in conformance with the restricted database’s access
predicate. The last option ensures that any user modi-
ﬁcations match the predicate that deﬁnes the restricted
database. For example, if the access predicate restricts the
database to only contain rows with the user’s UID, then
updates and inserts will only succeed if they include the
appropriate UID.
One additional complication arises if the schema con-
tains “link tables”. Link tables allow the database to express
many-to-many relationships. For example, a conference-
management application may need to associate multiple au-
thor accounts with a single paper entry. To do so, a database
designer might create a table (e.g., Author2Paper) with
two columns, one for author ID and one for paper ID. Each
author on a paper would have a single row in the table
associating their user ID with the paper’s ID. The access
restrictions on the paper table will then depend on the pres-
ence of an appropriate “link” entry in the Author2Paper
table associating the paper with its authors.
Unfortunately, if we apply the straightforward predicate-
based approach to link tables, an adversary can gain
access to other users’ sensitive data. For example,
the
Author2Paper table would normally have an access
predicate that forbids the insertion of rows unless those
rows have the current user’s UID. However, an adver-
sary could exploit this by inserting a new row into the
Author2Paper table with her own UID but with the ID
of someone else’s paper. The access predicate on the paper
table, which relies on the Author2Paper table, would
then allow the adversary to access that paper.
Fortunately, we can extend our basic predicates to protect
link tables by applying two simple rules. New links (i.e.,
entries in the link table) may only be added if 1) the
object of the link has no existing links (e.g., a new paper
entry was just inserted), or 2) the current user already
has an existing link to the object of the new link. The
second condition allows a user to associate other users with
an entry she created. For example, the author who ﬁrst
creates a paper entry may associate other users with that
paper. We can automatically identify link tables that require
these extended restrictions by searching for writable tables
that appear in the WHERE clause of another table’s read
restriction policy.
In our experiments (Section 6), we found that these
modiﬁcation restrictions sufﬁced to protect user data.
4.3. Authentication Classes
The above description assumes that database requests are
made on behalf of a user of the web application. This
assumption, however, is sometimes violated, e.g., by new
users registering for the ﬁrst time or by privileged admin-
istrative consoles that offer broad access to sensitive data
to special users identiﬁed as administrators.
CLAMP provides the ﬂexibility to handle these scenarios
by using authentication classes. WebStacks are tagged with
an authentication class identiﬁer (e.g., new, user, admin)
as well as a UID, and the QR enforces a different data
access policy depending on the class of the requesting
WebStack. For example, at a university, students should
only be permitted to access their own schedules, but
teaching assistants may be allowed to access the list of all
of the students in the particular class they are assisting with.
Meanwhile, a professor should be able to view and update
the grades for the students in her class, but not the grades
for other classes or other students. Each of these roles can
be encapsulated by a customized data access policy.
Authentication classes also permit WebStacks to access
the database prior to authentication, for example, to retrieve
generic data like product descriptions or promotions. For
this reason, the QR also has a special nobody policy that
denies access to all tables containing sensitive data. Users
registering with a web application for the ﬁrst time may
also be members of the nobody class until they have
registered as a user of the system, at which point their
WebStack can be upgraded to a user class and labeled
appropriately with the newly created UID.
4.4. Enforcing Data Access Control
WebStacks have neither network-level access
to the
database nor database login credentials, meaning that Web-
Stacks must communicate with the database through the
QR proxy or not at all.
For each valid authentication request seen by the UA,
the UA passes a (WebStackID, UID, class) triple to the
QR, which stores the mapping in its WebStack-associations
table (see Figure 2). When the QR receives a database
connection request from WebStacki,
the QR ﬁnds the
corresponding classi and U IDi values in its associations
table. The QR then uses the data access policy deﬁned for
classi to instantiate a temporary database containing only
data accessible by user U IDi.
The QR leverages standard database features—database
views and user permissions—to efﬁciently limit WebStack
access to sensitive data based on data access policies. Re-
lational databases already implement views using efﬁcient
mechanisms that automatically translate view queries into
queries on the full database. Thus, no temporary databases
or expensive copies are required for CLAMP to implement
data access policies. We discuss additional details, includ-
ing support for data modiﬁcations, in Section 6.2.
159
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:17:42 UTC from IEEE Xplore.  Restrictions apply. 
t
e
n
r
e
t
n
I
m
o
r
F
Internet
Dispatcher √
WebStacks
QR
UA
DB
To
s
M
V
b
e
W
r
e
h
c
t
a
p
s
i
D
√
√
√
√ √
R
Q
A
U
B
D
√ √
√
√