Static
Information
Without Permissions
Core attributes:
+ Package name
+ Component’s names
+ Resources
+ Icon, label
+ Developers’ signatures
Customizations:
(cid:63) Permissions
(cid:63) Themes
(cid:63) Phone conﬁgurations
Runtime
Information None
With Permissions
(*) See note
Default App Privilege Debugging Privilege (adb)
+ Package names
+ Package names
+ APK path
+ APK ﬁle
Dangerous Permissions:
(cid:63) Files in external storage
(cid:5) Network trafﬁc
Special Permissions:
(cid:5) Storage consumption
+ Running processes
- Layouts and their content
(cid:5) UI states†
(cid:5) Power consumption†
(cid:5) Memory footprints†
(cid:63) Files in external storage
(cid:63) System log
(cid:63) System diagnostic outputs
+ Running processes
(cid:5) Network consumption
- Screenshots
Table 1: Identifying information about installed apps that an app can learn, w.r.t. its permissions and privileges, through the Java
API framework and the Linux-layer kernel. Analysis was conducted on Android 8.0. Superscript † means that the information
can be learnt only in older versions of Android (e.g., Android 8.0 requires the calling app to have adb privilege). (*) Note:
Granting permissions to a zero-permission app does not enable it to obtain more static information about other installed apps.
The notations +, (cid:63) and (cid:5) indicate the resources that our system (HMA, see Section 8) can protect by default, by collaborating with
app developers or by randomizing runtime information of the container apps, respectively. Resources marked with the − sign
cannot be protected by HMA.
the PackageManager class, e.g., getPackageInfo(). Note
that this can be done even when apps are installed with the
forward-lock option enabled (option -l in the adb install
command). We tested this in Android 6.0; Android 8.0 threw
an exception for this -l option. A nosy app cannot retrieve
the list of intent ﬁlters declared by other apps. However, it
can learn the names of the components of installed apps that
can handle speciﬁc intent requests, by using methods such as
resolveActivity().
With Permissions.
granted with the
READ_EXTERNAL_STORAGE permission, a frequently re-
quested dangerous-permission, can inspect for unique folders
and ﬁles in a phone’s external storage (a.k.a. SD card). Apps
with VPN capabilities (permission BIND_VPN_SERVICE)
can intercept network trafﬁc of other apps; existing work
shows that network trafﬁc, even encrypted, can be used to
ﬁngerprint apps with good accuracy [50, 51, 54].
app
An
With special permissions, an app can obtain certain iden-
tifying information about other apps at their runtime. For
instance, the PACKAGE_USAGE_STATS permission permits
an app to obtain the list of running processes (method
getRunningAppProcesses()), and statistics about network
and storage consumption of all
installed apps, includ-
ing their package names, during a time interval (method
queryUsageStats()). In addition, accessibility services11
(with the BIND_ACCESSIBILITY_SERVICE permission) can
have access to the layouts and the layouts’ contents of other
apps.
With Default App-Privilege. An app can retrieve the list
of all package names on the phone. This can be done by ob-
taining the set of UIDs in the /proc/uid_stat folder and
using the getNameForUid() API call to map a UID to a pack-
age name. An app can also infer the UI states (e.g., knowing
that another app is showing a login screen) [26], memory
footprints (sequences of snapshots of the app’s data resident
size) [36] and power consumption [27] of other apps. Note
that access to this information has been restricted in recent
versions of Android (e.g., Android 8.0 requires the app to
have adb privilege).
With Debugging Privilege (adb). An app can retrieve the
list of package names (command pm list packages) and
learn the path to the APK ﬁle of a speciﬁc app (command
pm path [package name]). Moreover, the adb privilege en-
ables an app to retrieve the APK ﬁles of other apps (command
pull [APK path]); the app can then use API methods such
as getPackageArchiveInfo() to extract identifying infor-
mation from the APK ﬁles. Also an app can learn about run-
time behaviors of other apps by inspecting the system logs and
diagnostic outputs (commands logcat and dumpsys). More-
over, with the adb privilege, apps can directly retrieve the list
of running processes (command ps), take screenshots [38] or
gain access to statistics about network usage of other apps
(folder /proc/uid_stat/[uid]).
Our analysis shows that Android’s open design exposes
a signiﬁcant amount of information that facilitates app-
ﬁngerprinting attacks. App developers themselves cannot
obfuscate most of the aforementioned information for the
purpose of hiding sensitive apps. For example, by design, the
package name of an app is a global identiﬁer in the Google
Play Store. As a result, the obfuscation of apps’ package
714    28th USENIX Security Symposium
USENIX Association
names has to be done per user, i.e., for each user, the same app
needs to be uploaded to the Google Play Store with a different
package name. Similarly, the names of the app’s components
also need to be obfuscated per user, hence this approach is
not practical. To mitigate app-ﬁngerprinting attacks, Android
could follow an approach similar to iOS, i.e., to remove or
restrict API methods and OS resources that leak identifying
information of apps. However, such an approach would be
difﬁcult to implement in Android, as most of these methods
and resources have valid use cases and are widely used by
apps. For instance, methods getIA() and getIP(), are used
by many popular apps with millions of users, e.g., launcher,
security/antivirus, and storage/memory manager apps. Re-
moving or restricting such methods would break many apps
and anger both developers and users. Such an approach would
also negatively affect the competitive advantages of Android,
i.e., its customizability and rich set of features, over iOS. In
addition, restricting API methods would not solve the problem
completely, as more subtle ﬁngerprinting attacks would still
be possible. For example, in iOS, the canOpenURL() method
can be used to check if a particular app is on the phone. Since
iOS 9.0, in order to have an arbitrarily high number of calls to
this method, an app has to declare beforehand the set of apps
that it wants to check. Otherwise, it can only call this method
at most 50 times.12 This restriction reduces the risks of ﬁnger-
printing attacks, but negatively affects both developers and
users, e.g., apps need to be updated frequently to update the
list of apps. More importantly, even with 50 queries, a nosy
app can still check if a speciﬁc app or small set of apps are
installed on the phone.
A possibly better approach is for Android to include a new
"sensitive" ﬂag that enables users to hide sensitive apps from
other apps in the same phone, i.e., other apps will not be able
to use Android API methods to infer the existence of apps
ﬂagged as sensitive. Moreover, Android can include a new per-
mission that users can grant to certain apps in order to enable
these apps to detect apps ﬂagged as sensitive. This approach,
however, requires signiﬁcant modiﬁcations and testing of An-
droid’s APIs. Therefore, our goal is to design a solution that
does not require changes to Android or sensitive apps and that
can be available to users immediately.
5 Apps Inquiring about Other Apps
We analyze apps from the Google Play Store to estimate
how common it is for apps to inquiry about other installed
apps. Our analysis focuses on API calls that directly retrieve
the list of installed apps (hereafter called LIA): getIA() and
getIP(), because these two methods clearly show the intent
of developers to learn about other apps, whereas the other
methods presented in Section 4 can be used in valid use cases.
Therefore, the results presented in this section is a lower-
bound on the number of apps that ﬁngerprint other apps.
5.1 Data Collection
We gathered the following datasets for our analysis.
APK Dataset. We collected APK ﬁles of popular free apps
in the Google Play Store (US site). For each app category in
the store (55 total), we gathered the 60 most popular apps.
After eliminating duplicate entries, default Android apps, and
brand-speciﬁc apps, we were left with 2917 apps.
Privacy-Policy Dataset. We collected privacy policies that
corresponded to the apps in our dataset. Out of 2917 apps, we
gathered 2499 privacy policies by following the links included
in the apps’ Google Play Store pages.
5.2 Static Analysis
For our static analysis, by using Apktool,13 we decompiled the
APKs to obtain their smali code, a human-readable representa-
tion of the app’s bytecode. We searched in the smali code for
occurrences of two methods getIA() and getIP().14 API
calls can be located in three parts of the decompiled code:
in the code of Android/Google libs and SDKs, in the code
of third-party libs and SDKs, or in the code of the app itself.
To differentiate among these three origins, we applied the
following heuristic. First, methods found in paths contain-
ing the “com/google”, “com/Android” or “Android/support”
substrings, are considered part of Android/Google libs and
SDKs. Second, methods found in paths containing the name
of the app are considered part of the code of the app. We
believe this is a reasonable heuristics, because package names
of Android apps follow the Java package-name conventions
with the reversed internet domain of the companies, gener-
ally two words long. If the methods do not match the ﬁrst
two categories, then they are considered part of the code of
a third-party lib or SDK. Note that this approach, also used
in previous work [29], cannot precisely classify obfuscated
code or code in paths with no meaningful names. Such cases,
however, represent only a small fraction in our analysis (less
than 5%).
Table 2 shows the proportions of apps that invoke getIA()
and getIP() w.r.t. different call origins. Of the 2917 apps
evaluated, 1663 apps (57.0%) include at least one invocation
of these two methods in the code from third-party libs and the
apps. These results show a signiﬁcant increase in comparison
with the results presented in 2016 by Demetriou et al. [29].
These results also show that most sensitive requests come
from third-party libs or SDKs; app developers might not be
aware of this activity, as has been the case for other sensitive
data such as location.15
Static analysis has two main limitations. First, methods
appearing in the code might never be executed by the app.
Second, it is possible that the sensitive methods do not appear
in the code included in the APK, rather in the code loaded
dynamically at runtime. To address these issues, we also per-
formed a dynamic analysis of the apps in our dataset.
USENIX Association
28th USENIX Security Symposium    715
Analysis method
Call origin
getIA() (%)
getIP() (%) getIA() or getIP() (%)
Static
Static
Third-party libs + Apps
Apps only
Dynamic
Third-party libs + Apps
36.4
8.1
6.5
43.6
8.4
15.0
57.0
13.9
19.2
Table 2: Proportion of free apps that invoke getIA() and getIP(), to collect LIAs w.r.t. different call origins.
5.3 Dynamic Analysis
For our dynamic analysis, by using XPrivacy16 on a phone
with Android 6.0, we intercepted the API calls from apps.
For the analysis to scale, for each app, we installed it and
granted it all the permissions requested. Next, we launched
all the runnable activities declared by the app for 10 minutes.
Although this approach has limitations, as it only has a short
period of time per app and it cannot emulate all the activities
a user could do, it is sufﬁcient to estimate a lower-bound on
the number of apps that query for LIAs at runtime, as shown
in our results.
Our results, shown in Table 2, show that 190 apps (6.54%)
called getIA(), 436 apps (15.0%) called getIP(), and 19.2%
of the apps called at least one of these two methods. Because
XPrivacy does not provide information about the origin of
the request, we performed some additional steps. For each
app, we used the results of our static analysis and searched for
occurrences of getIA() and getIP() in the code belonging
to Google/Android libs. We found that most apps did not
include calls to these sensitive methods in the code belonging
to Google/Android libs: 181 out of 190 for getIA() and
412 out of 436 for getIP(). Hence, we conclude that these
sensitive requests came mainly from third-party libs or from
the code of the apps.
Interestingly, we found 49 apps that called at least one of
the two sensitive methods in our dynamic analysis, but not
in our static analysis. This could be because the decompiler
tool produced incorrect smali code, or because these requests
were dynamically loaded at runtime. Still, this represents only
a small number of the apps found through our analysis.
Our static and dynamic analysis shows that a signiﬁcant
number of free apps actively queries for LIAs: between 19.2%
(dynamic analysis) and 57% (static analysis) of the tested
apps.17 This shows that many third parties are interested in
knowing about the installed apps on users’ phones, and that,
if Android blocked getIA() and getIP(), they would likely
attempt to use other methods (see Section 4).
5.4 Analysis of Privacy Policies
Google’s privacy-policy guidelines require apps that handle
personal or sensitive user data to comprehensively disclose
how they collect, use and share the collected data. An example
of a common violation, shown in these guidelines, is “An
app that doesn’t treat a user’s inventory of installed apps as
personal or sensitive user data".18 Next, we explain what
developers understand about the guidelines.
As mentioned in Section 5.1, out of 2917 apps in our
dataset, we found 2499 privacy policies. From the 1674 nosy
apps found in the static and dynamic analysis, 1524 apps have
privacy policies. We semi-automated the policy analysis as
follows. We built a set of keywords consisting of nouns and
verbs that might be used to construct a sentence to express
the intention of collecting LIAs: retrieve, collect, fetch, ac-
quire, gather, package, ID, installed, app, name, application,
software, and list. For each privacy policy, we extracted the
sentences that contain at least one of the keywords. From
the extracted sentences, we manually searched for speciﬁc
expressions such as “installed app", “app ID" and “installed
software". Thereafter, we read the matched sentences and the
corresponding privacy policy.
From the set of 2499 policies, we found 162 policies that
explicitly mention the collection of LIAs. Among these, 129
belong to the set of 1674 nosy apps (7.7%). Some apps have
exactly the same privacy policies, even though they are from
different companies (e.g., [20] and [6]). 33 apps mentioned
the collection of LIAs, but we did not ﬁnd these apps in both
static and dynamic analyses. For these apps, we performed a
more thorough dynamic analysis: we used them as a normal
user would, while intercepting API calls. We did not capture,
however, any calls to the two sensitive methods. This might
be because developers copy the privacy policies from other
apps, or because the apps will make these calls in the future.
Besides the generic declared purposes of the collections of
LIAs by apps, e.g., for improving the service (e.g., [14, 21]),
some apps explicitly state that they collect LIAs for targeted
ads (e.g., [3, 12]), and targeted ads by third-party ad networks
(e.g., [15]). Unexpectedly, we found that of the 162 policies
that mention the collections of LIAs, 76 categorize LIAs as
non-personal, whereas Google deﬁnes this as personal infor-
mation. This shows a misunderstanding between developers
and Google’s guidelines.
6 Existing Protection Mechanisms