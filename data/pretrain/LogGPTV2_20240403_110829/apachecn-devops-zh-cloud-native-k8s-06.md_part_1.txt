# 六、Kubernetes 应用配置
本章描述了 Kubernetes 提供的主要配置工具。我们将从讨论将配置注入容器化应用的一些最佳实践开始。接下来，我们将讨论 ConfigMaps，这是一个 Kubernetes 资源，旨在为应用提供配置数据。最后，我们将介绍 Secrets，这是一种存储敏感数据并将其提供给运行在 Kubernetes 上的应用的安全方法。总之，本章将为您提供一个在 Kubernetes 上配置生产应用的很好的工具集。
在本章中，我们将涵盖以下主题:
*   使用最佳实践配置容器化应用
*   实现配置映射
*   使用机密
# 技术要求
为了运行本章中详细介绍的命令，您将需要一台支持`kubectl`命令行工具的计算机，以及一个工作正常的 Kubernetes 集群。查看 [*第 1 章*](01.html#_idTextAnchor016)*与 Kubernetes*交流，找到几种快速与 Kubernetes 一起起床跑步的方法，以及如何安装`kubectl`工具的说明。
本章使用的代码可以在本书的 GitHub 资源库中找到[https://GitHub . com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/chapter 6](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter6)。
# 使用最佳实践配置容器化应用
到目前为止，我们知道如何在 Kubernetes 上有效地部署(如 [*第 4 章*](04.html#_idTextAnchor106) 、*扩展和部署您的应用*)和公开(如 [*第 5 章*](05.html#_idTextAnchor127) 、*服务和入口*–*与外界通信*容器化的应用。这足以在 Kubernetes 上运行非平凡的无状态容器化应用。然而，Kubernetes 还为应用配置和机密管理提供了额外的工具。
由于 Kubernetes 运行容器，所以您总是可以配置您的应用来使用烘焙到您的 Dockerfile 中的环境变量。但这回避了像 Kubernetes 这样的管弦乐家的一些真正价值。我们希望能够在不重建 Docker 映像的情况下更改我们的应用容器。为此，Kubernetes 为我们提供了两个专注于配置的资源:配置映射和机密。让我们首先看看配置映射。
## 了解配置图
在生产中运行应用时，开发人员希望能够快速轻松地注入应用配置信息。有许多模式可以做到这一点——从使用单独的配置服务器进行查询，到使用环境变量或环境文件。这些策略在安全性和可用性方面各不相同。
对于容器化的应用，环境变量通常是最简单的方法，但是以安全的方式注入这些变量可能需要额外的工具或脚本。在 Kubernetes 中，ConfigMap 资源让我们能够以一种灵活、简单的方式完成这项工作。配置映射允许 Kubernetes 管理员指定和注入配置信息作为文件或环境变量。
对于密钥等高度敏感的信息，Kubernetes 给了我们另一个类似的资源——机密。
## 了解机密
机密指的是需要以稍微安全的方式存储的附加应用配置项，例如受限应用接口的主密钥、数据库密码等等。Kubernetes 提供了一个名为 Secret 的资源，它以编码的方式存储应用配置信息。这并没有从本质上使机密更加安全，但是 Kubernetes 尊重机密的概念，不会在`kubectl get`或`kubectl describe`命令中自动打印机密信息。这可以防止机密被意外打印到日志中。
为了确保机密实际上是机密的，必须在您的集群上为机密数据启用静态加密—我们将在本章稍后介绍如何做到这一点。该功能可从 Kubernetes 1.13 获得，它允许 Kubernetes 管理员防止机密未加密存储在`etcd`中，并限制`etcd`管理员的访问权限。
在深入探讨机密之前，让我们先讨论配置映射，它更适合非敏感信息。
# 实现配置映射
ConfigMaps 为运行在 Kubernetes 上的容器提供了一种简单的方法来存储和注入应用配置数据。
创建配置映射很简单，它们为实际注入应用配置数据提供了两种可能性:
*   作为环境变量注入
*   作为文件注入
虽然第一个选项简单地使用内存中的容器环境变量进行操作，但后一个选项涉及卷的某些方面——下一章将介绍 Kubernetes 存储介质。我们现在将保持简短的评论，并将其用作卷的介绍，这将在下一章中展开， [*第 7 章*](07.html#_idTextAnchor166)*Kubernetes 的存储*。
使用配置地图时，使用命令`Kubectl`命令可以更容易地创建它们。创建配置映射有几种可能的方法，这也会导致从配置映射本身存储和访问数据的方式不同。第一种方法是简单地从文本值创建它，正如我们接下来将看到的。
## 从文本值
根据命令中的文本值创建配置图的步骤如下:
```
kubectl create configmap myapp-config --from-literal=mycategory.mykey=myvalue 
```
前面的命令用一个名为`mycategory.mykey`的键创建了一个名为`myapp-config`的`configmap`，其值为`myvalue`。您还可以创建具有多个键和值的配置映射，如下所示:
```
kubectl create configmap myapp-config2 --from-literal=mycategory.mykey=myvalue
--from-literal=mycategory.mykey2=myvalue2 
```
上述命令在`data`部分产生一个带有两个值的配置图。
要查看配置图的外观，请运行以下命令:
```
kubectl get configmap myapp-config2
```
您将看到以下输出:
configmap 输出. yaml
```
apiVersion: v1
kind: ConfigMap
metadata:
  name: myapp-config2
  namespace: default
data:
  mycategory.mykey: myvalue
  mycategory.mykey2: myvalue2
```
当您的配置映射数据很长时，直接从文本值创建它没有多大意义。对于更长的配置，我们可以从文件中创建配置映射。
## 来自文件
为了使更容易创建具有许多不同值的配置图，或者重用您已经拥有的现有环境文件，您可以通过以下步骤从文件创建配置图:
1.  让我们从创建我们的文件开始，我们将把它命名为`env.properties` :
    ```
    myconfigid=1125
    publicapikey=i38ahsjh2
    ```
2.  然后，我们可以通过运行以下命令来创建配置映射:
    ```
    kubectl create configmap my-config-map --from-file=env.properties
    ```
3.  为了检查我们的`kubectl create`命令是否正确生成了我们的配置图，让我们使用`kubectl describe` :
    ```
    kubectl describe configmaps my-config-map
    ```
    来描述它
这将产生以下输出:
```
Name:           my-config-map
Namespace:      default
Labels:         
Annotations:    
Data
====
env.properties:        39 bytes
```
如您所见，这个配置映射包含我们的文本文件(和字节数)。在这种情况下，我们的文件可以是任何文本文件，但是如果您知道您的文件被正确格式化为环境文件，您可以让 Kubernetes 知道这一点，以便使您的配置图更容易阅读。让我们学习如何做到这一点。
## 来自环境文件
如果我们知道我们的文件被格式化为带有密钥对的普通环境文件，我们可以使用稍微不同的方法来创建我们的配置映射——环境文件方法。这种方法将使我们的数据在 ConfigMap 对象中更加明显，而不是隐藏在文件中。
让我们在特定于环境的创建中使用与之前完全相同的文件:
```
kubectl create configmap my-env-config-map --from-env-file=env.properties
```
现在，让我们使用以下命令来描述我们的配置映射:
```
> kubectl describe configmaps my-env-config-map
```
我们得到以下输出:
```
Name:         my-env-config-map
Namespace:    default
Labels:       
Annotations:  
Data
====
myconfigid:
----
1125
publicapikey:
----
i38ahsjh2
Events:  
```
如您所见，通过使用`-from-env-file`方法，当您运行`kubectl describe`时，可以轻松查看`env`文件中的数据。这也意味着我们可以将我们的配置映射直接作为环境变量装载，稍后将对此进行更多介绍。
## 将配置映射作为卷装入
要使用 Pod 中配置图的数据，您需要将其安装到规范中的 Pod。这反映了(原因很好，我们将会发现)在 Kubernetes 中装载卷的方式，Kubernetes 是一种提供存储的资源。然而，目前不要担心数量。
让我们看一下我们的 Pod 规范，它将我们的`my-config-map`配置图作为一个卷安装在我们的 Pod 上:
Pod 安装-cm.yaml
```
apiVersion: v1
kind: Pod
metadata:
  name: my-pod-mount-cm
spec:
  containers:
    - name: busybox
      image: busybox
      command:
      - sleep
      - "3600"
      volumeMounts:
      - name: my-config-volume
        mountPath: /app/config
  volumes:
    - name: my-config-volume
      configMap:
        name: my-config-map
  restartPolicy: Never
```
如您所见，我们的`my-config-map`配置映射作为一个卷(`my-config-volume`)安装在`/app/config`路径上，供我们的容器访问。在关于存储的下一章中，我们将进一步了解这是如何工作的。
在某些情况下，您可能希望在您的容器中装载一个配置映射作为环境变量，接下来我们将学习如何做到这一点。
## 将配置映射作为环境变量挂载
您也可以将配置图作为环境变量挂载。此过程与将配置映射作为卷装载非常相似。
让我们看看我们的 Pod 规格:
pod-mounting-cm-as-env.yaml
```
apiVersion: v1
kind: Pod
metadata:
  name: my-pod-mount-env
spec:
  containers:
    - name: busybox
      image: busybox
      command:
      - sleep
      - "3600"
      env:
        - name: MY_ENV_VAR
          valueFrom:
            configMapKeyRef:
              name: my-env-config-map
              key: myconfigid
  restartPolicy: Never
```
如您所见，不是将我们的配置图装载为卷，我们只是在容器环境变量–`MY_ENV_VAR`中引用它。为此，我们需要在我们的`valueFrom`键和中使用`configMapRef`来引用我们的配置映射的名称以及要在配置映射本身中查看的键。
正如我们在本章开头的*使用最佳实践*配置容器化应用一节中提到的，默认情况下，配置映射是不安全的，它们的数据以明文形式存储。为了增加一层安全性，我们可以使用机密来代替配置映射。
# 使用机密
机密的工作方式与配置映射非常相似，除了它们存储为编码文本(特别是 Base64)而不是明文。
因此，创建机密与创建配置映射非常相似，但有一些关键区别。首先，创建一个机密必须自动对机密中的数据进行 Base64 编码。首先，让我们看看如何从一对文件中创建一个机密。
## 来自文件
首先，让我们尝试从一个文件创建一个机密(这也适用于多个文件)。我们可以使用`kubectl create`命令来完成此操作:
```
> echo -n 'mysecretpassword' > ./pass.txt
> kubectl create secret generic my-secret --from-file=./pass.txt
```
这将产生以下输出:
```
secret "my-secret" created
```
现在，让我们使用`kubectl describe`来看看我们的机密是什么样子的:
```
> kubectl describe secrets/db-user-pass
```
该命令应产生以下输出:
```
Name:            my-secret
Namespace:       default
Labels:          
Annotations:     