这个示例应用程序提供了几个命令行参数，来启动程序的不同功能。只是启动程序，
没有命令行参数，或检查源代码，查看所有不同的选项。
Environment类定义了一组特殊的文件夹，来访问.NET 4.6的特殊文件夹。下面的代码
片段通过把枚举值SpecialFolder. 
MyDocuments传递给GetFolderPath方法，返回documents
文件夹。Environment类的这个特性不可用于.NET Core；因此在以下代码中，使用环境变
量HOMEDRIVE和HOMEPATH的值（代码文件WorkingWithFilesAndFolders 
/ 
Program.
cs）：
    private static string GetDocumentsFolder()
    {
    #if NET46
      return Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
    #else
      string drive = Environment.GetEnvironmentVariable("HOMEDRIVE");
      string path = Environment.GetEnvironmentVariable("HOMEPATH");
      return Path.Combine(drive, path, "documents");
    #endif
    }
Environment.SpecialFolder是一个巨大的枚举，提供了音乐、图片、程序文件、应用
程序数据，以及许多其他文件夹的值。
23.2.3 创建文件和文件夹
下面开始使用File、FileInfo、Directory和DirectoryInfo类。首先，方法CreateAFile创建
文件Sample1.txt，给文件添加字符串Hello, World!。创建文本文件的简单方式是调用File类
的WriteAllText方法。这个方法的参数是文件名和应该写入文件的字符串。一切都在一个
调用中完成（代码文件WorkingWithFilesAnd Folders / Program. cs）：
    const string Sample1FileName = "Sample1.txt";
    // etc.
    public static void CreateAFile()
    {
      string fileName = Path.Combine(GetDocumentsFolder(), Sample1FileName);
      File.WriteAllText(fileName, "Hello, World! ");
    }
要复制文件，可以使用File类的Copy方法或FileInfo类的CopyTo方法：
    var file = new FileInfo(@".\ReadMe.txt");
    file.CopyTo(@"C:\Copies\ReadMe.txt");
    File.Copy(@".\ReadMe.txt", @"C:\Copies\ReadMe.txt");
第一个代码片段使用FileInfo，执行的时间略长，因为需要实例化file对象，但是file已
经准备好，可以在同一文件上执行进一步的操作。使用第二个例子时，不需要实例化对象
来复制文件。
给构造函数传递包含对应文件系统对象的路径的字符串，就可以实例化FileInfo或
DirectoryInfo类。刚才是处理文件的过程。处理文件夹的代码如下：
    var myFolder = new DirectoryInfo(@"C:\Program Files");
如果路径代表的对象不存在，构建时不抛出一个异常；而是在第一次调用某个方法，
实际需要相应的文件系统对象时抛出该异常。检查Exists属性，可以确定对象是否存在，
是否具有适当的类型，这个功能由两个类实现：
    var test = new FileInfo(@"C:\Windows");
    WriteLine(test.Exists);
请注意，这个属性要返回true，相应的文件系统对象必须具备适当的类型。换句话
说，如果实例化FileInfo对象时提供了文件夹的路径，或者实例化DirectoryInfo对象时提供
了文件的路径，Exists的值就是false。如果有可能，这些对象的大部分属性和方法都返回
一个值——它们不一定会抛出异常，仅因为调用了类型错误的对象，除非它们要求执行不
可能的操作。例如，前面的代码片段可能会首先显示false（因为C:\Windows是一个文件
夹），但它还显示创建文件夹的时间，因为文件夹带有该信息。然而，如果想使用
FileInfo.Open（）方法打开文件夹，就好像它是一个文件那样，就会得到一个异常。
使用FileInfo和DirectoryInfo类的MoveTo（）和Delete（）方法，可以移动、删除文件
或文件夹。File和Directory类上的等效方法是Move（）和Delete（）。FileInfo和File类也
分别实现了方法CopyTo（）和Copy（）。但是，没有复制完整文件夹的方法——必须复
制文件夹中的每个文件。
所有这些方法的用法都非常直观。MSDN文档带有详细的描述。
23.2.4 访问和修改文件的属性
下面获取有关文件的一些信息。可以使用File和FileInfo类来访问文件信息。File类定
义了静态方法，而FileInfo类提供了实例方法。以下代码片段展示了如何使用FileInfo检索
多个信息。如果使用File类，访问速度将变慢，因为每个访问都意味着进行检查，以确定
用户是否允许得到这个信息。而使用FileInfo类，则只有调用构造函数时才进行检查。
示例代码创建了一个新的FileInfo对象，并在控制台上写入属性Name、
DirectoryName、IsReadOnly、Extension、Length、CreationTime、LastAccessTime和
Attributes的结果（代码文件WorkingWith FilesAndFolders / Program. cs）:
    private static void FileInformation(string fileName)
    {
      var file = new FileInfo(fileName);
      WriteLine($"Name: {file.Name
}");
      WriteLine($"Directory: {file.DirectoryName
}");
      WriteLine($"Read only: {file.IsReadOnly
}");
      WriteLine($"Extension: {file.Extension
}");
      WriteLine($"Length: {file.Length
}");
      WriteLine($"Creation time: {file.CreationTime:F
}");
      WriteLine($"Access time: {file.LastAccessTime:F
}");
      WriteLine($"File attributes: {file.Attributes
}");
    }
把当前目录中的Program.cs文件名传入这个方法：
        FileInformation("./Program.cs");
在某台机器上，输出如下：
    Name: Program.cs
    Directory: C:\Users\Christian\Source\Repos\ProfessionalCSharp6\FilesAndStream
s\F
    ilesAndStreamsSamples\WorkingWithFilesAndFolders
    Read only: False
    Extension: .cs
    Length: 7888
    Creation time: Friday, September 25, 2015 5:22:11 PM
    Access time: Sunday, December 20, 2015 8:59:23 AM
    File attributes: Archive
不能设置FileInfo类的几个属性；它们只定义了get访问器。不能检索文件名、文件扩
展名和文件的长度。可以设置创建时间和最后一次访问的时间。方法
ChangeFileProperties（）向控制台写入文件的创建时间，以后把创建时间改为2023年的一
个日期。
    private static void ChangeFileProperties()
    {
      string fileName = Path.Combine(GetDocumentsFolder(), Sample1FileName);
      var file = new FileInfo(fileName);
      if (! file.Exists)
      {
        WriteLine($"Create the file {Sample1FileName} before calling this method"
);
        WriteLine("You can do this by invoking this program with the -c argument"
);
        return;
      }
      WriteLine($"creation time: {file.CreationTime:F}");
      file.CreationTime = new DateTime(2023, 12, 24, 15, 0, 0);
      WriteLine($"creation time: {file.CreationTime:F}");
    }
    }
运行程序，显示文件的初始创建时间以及修改后的创建时间。将来可以用这项技术创
建文件（至少可以指定创建时间）。
    creation time: Sunday, December 20, 2015 9:41:49 AM
    creation time: Sunday, December 24, 2023 3:00:00 PM
  注意： 初看起来，能够手动修改这些属性可能很奇怪，但是它非常有用。例
如，如果程序只需要读取文件、删除它，再用新内容创建一个新文件，就可以有效地
修改文件，就可以通过修改创建日期来匹配旧文件的原始创建日期。
23.2.5 创建简单的编辑器
为了说明读写文件有多简单，可以使用WPF创建一个简单的Windows桌面应用程序。
该应用程序名为WPFEditor，允许打开文件，并再次保存它。
  注意： 本章后面将使用通用Windows平台创建一个类似的编辑器。
用户界面用XAML定义，给Open和Save命令使用MenuItem控件，再使用一个文本
框，通过设置AcceptsReturn属性允许输入多行文本（代码文件WPFEditor 
/
MainWindow.xaml）：
OnOpen（）方法打开一个对话框，在其中用户可以选择要打开的文件。设置
OpenFileDialog的属性，可以配置对话框，如下所示：
● 应该检查路径和文件是否存在？
● 哪个过滤器定义要打开什么类型的文件？
● 最初的目录是什么？
如果用户打开一个文件（且不取消对话框）, 
ShowDialog（）方法就返回true。然后
在文本框控件的Text属性中填充File.ReadAllText（）方法的结果。这个方法在一个字符串
内返回文本文件的完整内容（代码文件WPFEditor / MainWindow.xaml.cs）：
    private void OnOpen(object sender, ExecutedRoutedEventArgs e)
    {
      var dlg = new OpenFileDialog()
      {
        Title = "Simple Editor - Open File",
        CheckPathExists = true,
        CheckFileExists = true,
        Filter = "Text files (＊.txt)|＊.txt|All files|＊.＊",
        InitialDirectory = Environment.GetFolderPath(
        Environment.SpecialFolder.MyDocuments)
      };
      if (dlg.ShowDialog()
 == true)
      {
        text1.Text = File.ReadAllText(dlg.FileName);
      }
    }
运行应用程序的对话框如图23-2所示。如配置所示，打开了documents文件夹，Filter
属性的值显示在右下角的组合框中。
图23-2
为了保存文件，显示SaveFileDialog。可以使用File.WriteAllText从字符串中写入一个
文本文件，如下所示：
    private void OnSave(object sender, ExecutedRoutedEventArgs e)
    {
      var dlg = new SaveFileDialog()
      {
        Title = "Simple Editor - Save As",
        DefaultExt = "txt",
        Filter = "Text files (＊.txt)|＊.txt|All files|＊.＊",
      };
      if (dlg.ShowDialog() == true)
      {
        File.WriteAllText(dlg.FileName, text1.Text);
      }
    }
在字符串中读写文件适用于小型文本文件。然而，以这种方式读取、保存完整的文件
是有限制的。.NET字符串的限制是2 GB，对于许多文本文件而言，这已经足够了，但最
好不要让用户等待将1 
GB的文件加载到字符串中。还有其他的选择，参见“处理流”一
节。
23.2.6 使用File执行读写操作
通过File.ReadAllText和File.WriteAllText，引入了一种使用字符串读写文件的方法。
除了使用一个字符串之外，还可以给文件的每一行使用一个字符串。
不是把所有行读入一个字符串，而是从方法File.ReadAllLines中返回一个字符串数
组。使用这个方法，可以对每一行执行不同的处理，但仍然需要将完整的文件读入内存
（代码文件WorkingWithFilesAndFolders / Program.cs）：
    public static void ReadingAFileLineByLine(string fileName)
    {
      string[] lines = File.ReadAllLines(fileName);
      int i = 1;
      foreach (var line in lines)
      {
        WriteLine($"{i++}. {line}");
      }
      // etc.
    }
要逐行读取，无须等待所有行都读取完，可以使用方法File.ReadLines。该方法返回
IEnumerable，在读取完整个文件之前，就可以遍历它：
    public static void ReadingAFileLineByLine(string fileName)
    {
      // etc.
      IEnumerable lines = File.ReadLines(fileName)
;
      i = 1;
      foreach (var line in lines)
      {
        WriteLine($"{i++}. {line}");
      }
    }
要写入字符串集合，可以使用方法File.WriteAllLines。该方法接受一个文件名和
IEnumerable类型作为参数：
    public static void WriteAFile()
    {
      string fileName = Path.Combine(GetDocumentsFolder(), "movies.txt");
      string[] movies =
      {
        "Snow White And The Seven Dwarfs",
        "Gone With The Wind",
        "Casablanca",
        "The Bridge On The River Kwai",
        "Some Like It Hot"
      };
      File.WriteAllLines(fileName, movies);
    }
为了把字符串追加到已有的文件中，应使用File.AppendAllLines：
    string[] moreMovies =
    {
      "Psycho",
      "Easy Rider",
      "Star Wars",
      "The Matrix"
    };
    File.AppendAllLines(fileName, moreMovies);
23.3 枚举文件
处理多个文件时，可以使用Directory类。Directory定义了GetFiles（）方法，它返回
一个包含目录中所有文件的字符串数组。GetDirectories（）方法返回一个包含所有目录的
字符串数组。
所有这些方法都定义了重载方法，允许传送搜索模式和SearchOption枚举的一个值。
SearchOption通过使用AllDirectories或TopDirectoriesOnly值，可以遍历所有子目录，或留
在顶级目录中。搜索模式不允许传递正则表达式；它只传递简单的表达式，其中使用*表
示任意字符，使用？表示单个字符。
遍历很大的目录（或子目录）时，GetFiles（）和GetDirectories（）方法在返回结果
之前需要完整的结果。另一种方式是使用方法EnumerateDirectories（）和
EnumerateFiles（）。这些方法为搜索模式和选项提供相同的参数，但是它们使用
IEnumerable立即开始返回结果。
下面是一个例子：在一个目录及其所有子目录中，删除所有以Copy结尾的文件，以
防存在另一个具有相同名称和大小的文件。为了模拟这个操作，可以在键盘上按Ctrl
+A，选择文件夹中的所有文件，在键盘上按下Ctrl + C，进行复制，再在鼠标仍位于该文
件夹中时，在键盘上按下Ctrl + V，粘贴文件。新文件会使用Copy作为后缀。
DeleteDuplicateFiles（）方法迭代作为第一个参数传递的目录中的所有文件，使用选
项SearchOption. AllDirectories遍历所有子目录。在foreach语句中，所迭代的当前文件与上
一次迭代的文件做比较。如果文件名相同，只有Copy后缀不同，文件的大小也一样，就
调用FileInfo.Delete删除复制的文件（代码文件WorkingWithFilesAndFolders 
/
Program.cs）：
    private void DeleteDuplicateFiles(string directory, bool checkOnly)
    {
      IEnumerable fileNames = Directory.EnumerateFiles(directory,
        "＊", SearchOption.AllDirectories);
      string previousFileName = string.Empty;
      foreach (string fileName in fileNames)
      {
        string previousName = Path.GetFileNameWithoutExtension
(previousFileName);
        if (! string.IsNullOrEmpty(previousFileName) &&
          previousName.EndsWith("Copy") &&
          fileName.StartsWith(previousFileName.Substring(