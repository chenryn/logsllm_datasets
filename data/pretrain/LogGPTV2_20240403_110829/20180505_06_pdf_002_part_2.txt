developers fully embrace Object-Relation Mapping (ORM) tools to abstract their
code from the database and the code change needed are simply change the ORM
dialect to PostgreSQL instead of Oracle. This is the best case scenario and the one
time your DBAs will stop complaining about the SQL generated by an ORM. At the
other end of the spectrum is a C-based application that uses Oracle’s native OCI
library where all of the database calls need to be converted to use PostgreSQL’s
native libpq library. In reality most applications are somewhere in the middle.
Many times they are a Java or .NET application where the developers isolated the
database interaction to a few classes or functions. The tricky part is finding that
piece of code that does not follow that pattern.
Data Migration
Moving the data from Oracle to PostgreSQL is technically pretty simple. You can
do it in any number of ways from using ETL tools, exporting the data as files or
using the Oracle Foreign Data Wrapper in PostgreSQL to pull the data over. The
size of the database and the size of the outage window available for the migration
will determine the effort required to move the data. If you are moving 10GB of
data on a local network and you can take an outage for a few hours, things are
pretty simple. However, if your database is 10TB and you are migrating from on-
premise hardware to the cloud with a 1 hour maintenance window, things just got
Oracle to PostgreSQL Migrations 11
interesting. In these cases, replication is the answer. There are many tools that
replicate from Oracle to PostgreSQL, both commercial and open source.
Planning a Migration
Once a migration is identified and scoped, planning a migration project is a
comprehensive effort involving many people in your organization. Switching your
database is a major change. Many organizations went through similar changes 10
years ago as they switched from Unix to Linux. It involves your operations team,
your development team and your testing team.
Resource Identification
The key first step of any migration is to identify the project team. Even if you are
using a partner like OpenSCG to do the heavy lifting of the project, there are four
main roles every organization needs to provide for a successful migration.
Champion The main voice advocating for the migration internally.
Project This person is the initial point of contact for all migration related
Manager questions. The project manager’s main roles are to clear all
roadblocks for the migration team as well reporting status
internally.
Technical Depending on the application being migrated, the technical lead
Lead may be in one of two roles. If the application is something the
technical lead knows well, the role is to share that knowledge with
the migration team and then learn the new PostgreSQL
environment so it can be maintained going forward. For the more
common case where a legacy application is being migrated and the
team that built it has long since left the company, the technical
lead’s main role is to regain that institutional knowledge.
Testing The testing lead is the gatekeeper for the application. This person
Lead owns the user acceptance criteria and certifies that the unit test
scripts are comprehensive.
Oracle to PostgreSQL Migrations 12
Environment and Access
When migrating to Oracle, new development and test environments will be
needed at least temporarily. During the start of the project there will be a period
of time where the application will be very unstable. During this time the
environment where the application is being deployed will be mostly unusable. If
you are stopping all other development and maintenance on the application while
the migration is ongoing, you can use your existing development and testing
environments. However, most people need to continue moving their applications
forward so a temporary environment is needed until the migration is far enough
along that you are ready to point everything including your developers at
PostgreSQL instead of Oracle.
In higher security organizations, the process to get the migration team access to
the needed servers should start as soon as possible. The developers and testers
need access to the existing Oracle databases and the new PostgreSQL databases.
You also need to start thinking about how the data will move from Oracle to
PostgreSQL. If the data will be moved by any method other than exporting as
files, there needs to be a pipe between the Oracle and PostgreSQL databases.
That may mean firewall rule changes which in some organizations is a long
process.
Knowledge Transfer
The migration team needs a good understanding of what they are migrating. In
addition to a deep dive on the technology, a functional understanding is essential.
This is a great opportunity for primary users of the application to demo for the
team how they use the application to the team. This typically turns into a time for
the end users to vent about some frustrations with some slow screens or overly
difficult processes. Take notes and keep those areas in mind. A newly added index
as part of the migrated project may make all the difference in the world to your
end users and they will start telling everyone how great the migration to
PostgreSQL is.
Test Strategy
The full testing strategy needs to be planned at the start of a migration project.
With any database move, even if it is just a major upgrade of the same database,
the application needs to be fully tested. Bugs can manifest in a number of places
in a migration project so testing at the low level and working up the stack as
parts of the application are verified allows issues to efficiently be found and fixed.
Oracle to PostgreSQL Migrations 13
Data Testing Simple tests such as verifying the tables definitions
match and row counts are the same on Oracle and
PostgreSQL are the minimum. A full data comparison
really needs to do to ensure numeric precision or
essential whitespace are not lost by the data loads.
Unit Testing All database objects including procedures, packages,
triggers, views, and functions need positive and
negative unit test coverage.
Application Testing The full application needs to be thoroughly tested and
exercised.
Performance A performance benchmark needs to be established on
Testing the existing Oracle database to compare with the new
PostgreSQL database. Note: it is common that the first
time the performance test is run, PostgreSQL will be 2-
5 times slower that Oracle. When the performance
testing phase is over, PostgreSQL performance is
typically the same as Oracle.
Operations Testing The PostgreSQL configuration will be new so backups,
high availability and other maintenance routines need
to be tested.
User Acceptance Business and other end users need to sign off on the
migrated application to ensure the experience of the
application meets or exceeds the old Oracle
environment.
Migrating an Application
Once the planning phase is finished, the main phase of actually migrating the
application to PostgreSQL starts. Most people think this is the hardest and longest
part of a migration, but in reality, this phase is very mechanical and
straightforward. PostgreSQL is very similar to Oracle so by following a few
patterns, the actual technical migration moves quickly.
Object Migration
Some applications are fairly simple with the database objects just being some
tables and indexes, while others may have thousands of stored procedures and
functions. There are a number of tools that help with this particular task that
Oracle to PostgreSQL Migrations 14
minimize the monotony of conversions from Oracle to PostgreSQL. In the open
source world, there is a great tool called Ora2Pg that helps move the objects to
PostgreSQL. Amazon is also getting into the database migration game with their
Schema Migration Tool (SMT). The SMT is a free tool with a nice GUI that helps
move the database objects from Oracle to PostgreSQL. No matter what tool you
use to move your objects, the key is use a tool that gets you most of the way
there. PostgreSQL is similar enough to Oracle, that this phase can be largely
scripted.
Data Migration
Moving data from Oracle to PostgreSQL is a pretty simple process in a
development and test environment, but the production data transfer can be much
more complex. In a development environment where the data sizes are usually
smaller and maintenance windows can be as large as you need to be, the data
can be loaded to PostgreSQL from simple CSV files. You can even use the Oracle
Foreign Data Wrapper to pull the data into PostgreSQL.
For a production data move, you may be in a situation where you need to migrate
several terabytes of data with a maintenance window of one hour. The only way
to accomplish this is by pre-staging the data in some way. Using a replication tool
that allows Oracle to PostgreSQL migration like SymmetricDS, HVR or Amazon's
Database Migration Service allows you to move the data long before the
scheduled production cut-over. Thorough testing should be done on lower
environments to understand the timings needed to fully synchronize the
databases. Depending on the size of the database, data types in the tables and
bandwidth between the servers, it may take days or weeks to do the initial load
to PostgreSQL using replication. Some schedules can not accommodate that
timeline, so you may need to combine several techniques to fit around business
timetables and requirements.
Application Migration
In the migration phase, the code changes in the application are generally simple
and straightforward. The heavy lifting of finding all of the embedded SQL was
done in the previous analysis phase and changing the SQL to PostgreSQL syntax
Oracle to PostgreSQL Migrations 15
is fairly mechanical. The most common code fix required is changing the
references from SYSDATE to CURRENT_TIMESTAMP. There are several other
common changes depending on the number of “Oracle’isms” used frequently in
the code. The closer the developers stayed to the ANSI standard, the less code
fixes are necessary.
Testing the Application
The testing phase really starts in parallel with the migration phase. As the
database objects are converted, they should all have test cases associated with
them. This allows the testing team to validate the individual objects are
functioning properly in PostgreSQL before the full conversion is complete.
Unit Testing
Unit testing starts with the database developers creating the initial set of test
cases for each object that is migrated. Depending on the object, there may be
many test cases needed to fully test all lines of code. For example, a stored
procedure with 3 parameters will have at least 9 test cases to account for
different values of the parameters including “null” values. These test cases need
to run against the existing Oracle database to produce baseline results which
includes the results of exercising the object as well as the performance timing of
running the individual test. Once an object is migrated to PostgreSQL, the unit
tests need to be run to ensure the results are the same.
This test driven migration methodology focusing on unit tests has uncovered
many subtle and difficult to find issues if application testing was the only way to
test. Issues such as different row ordering or “null” handling may not be noticed
in application testing except in certain critical corner cases where root cause
analysis may be hard to pin down. By focusing on the testing of individual
objects, issues are found quickly reducing the overall risk of migration project.
Application Testing
A database migration is major surgery on an application so a full testing cycle
needs to be conducted on the application. Every test case that your testing team
Oracle to PostgreSQL Migrations 16
runs through for a major release, just needs to be run. This should include any
automated as well as manual testing.
Performance Testing
An initial performance test should be run pretty early in the testing cycle to start
highlighting how your application is using the database and how PostgreSQL
handles that type of workload. It is fairly common that the first time a
performance test is run against PostgreSQL, it will be 2 to 10 times slower than
Oracle, but do not worry. After a few rounds of performance testing and some
tuning, PostgreSQL will perform about the same as Oracle and maybe a little
faster.
Performance testing should start with timing the unit test case and progressively
growing in complexity to match as close to a real application load as possible.
After each round of testing, the bottlenecks need to be identified and passed back
to either development or operations. Development will need to create indexes,
rewrite queries, change data types or some other type of improvement.
Operations may need to modify the PostgreSQL configuration in some way.
Production Deployment
As the migration project starts to wind down from a development and testing
perspective, focus needs to shift toward rolling out to production. This may
require a fair amount of coordination across teams, partners and even customers.
Environment Setup
The amount of effort needed to setup a production environment varies greatly
depending on where the database is being deployed. On premise requires setting
up hardware, operating systems and more. The cloud simplifies the setup and if
you use a PostgreSQL cloud service like Amazon RDS, even high availability is
handled.
Where possible, a new environment should be setup so the old Oracle
environment can stay intact until the application has been fully vetted. In a cloud
or virtualized environment this can be as simple as starting up new instances, but
in a physical world, this can be more complex. If you decided to time your
Oracle to PostgreSQL Migrations 17
migration with upgrading your hardware, you may have a duplicate environment,
but if the only thing changing is the database, it needs to be coordinated
carefully.
Data Migration
If you have planned and tested your data migration in the previous stages, the
final data move will be a very predictable and straightforward process. In the
testing phases, the data migration would be run multiple times so the running
times will be know long before you try to move the data for the last time.
Production Cut-over
The final steps for going live with the new production application running on
PostgreSQL may be as simple as pointing the DNS entries or load-balancer at the
new production environment. It may be a bit more complicated if you are keeping
most of your existing environment, but things like switching the connection
strings would have been thoroughly tested in lower environments.
Training
Just before you move your newly migrated application to production, use idle
time for the team to be trained on how to administer PostgreSQL in a production
environment. Your operations team should at a minimum be skilled at:
• Backup and Recovery
• Performance Tuning
• Regular Maintenance
• Monitoring
Oracle to PostgreSQL Migrations 18
Conclusion
This white paper covers the process of migrating from Oracle to PostgreSQL.
Depending on your business needs, corporate culture and your migration
strategy, you likely will use a combination of methods and processes to migrate
your database. For a successful project, it is critical to plan appropriately and test
extensively.
About OpenSCG
OpenSCG is the leading provider of Oracle to PostgreSQL migration services. We
have been focused on heterogeneous database environments (PostgreSQL, SQL
Server, Oracle, Sybase, Cassandra) since starting in 2010. Today, with over 120
employees around the world, we help our customers get the most out of the Open
Source database.
We provide services covering all major steps of a typical migration project:
assessment, schema conversion, data migration, application conversion, testing,
integration, deployment, performance tuning, training, remote DBA, and support.
For more details, visit us at http://www.openscg.com, e-mail us at
PI:EMAIL, or call +1-732-339-3419.
Oracle to PostgreSQL Migrations 19