title:Faulty Point Unit: ABI Poisoning Attacks on Intel SGX
author:Fritz Alder and
Jo Van Bulck and
David F. Oswald and
Frank Piessens
Faulty Point Unit: ABI Poisoning Attacks on
Intel SGX
Fritz Alder
PI:EMAIL
David Oswald
imec-DistriNet, KU Leuven, Belgium
University of Birmingham, UK
PI:EMAIL
Jo Van Bulck
imec-DistriNet, KU Leuven, Belgium
PI:EMAIL
Frank Piessens
imec-DistriNet, KU Leuven, Belgium
PI:EMAIL
ABSTRACT
This paper analyzes a previously overlooked attack surface that al-
lows unprivileged adversaries to impact supposedly secure floating-
point computations in Intel SGX enclaves through the Application
Binary Interface (ABI). In a comprehensive study across 7 widely
used industry-standard and research enclave shielding runtimes, we
show that control and state registers of the x87 Floating-Point Unit
(FPU) and Intel Streaming SIMD Extensions (SSE) are not always
properly sanitized on enclave entry. First, we abuse the adversary’s
control over precision and rounding modes as a novel “ABI-level
fault injection” primitive to silently corrupt enclaved floating-point
operations, enabling a new class of stealthy, integrity-only attacks
that disturb the result of SGX enclave computations. Our analysis
reveals that this threat is especially relevant for applications that
use the older x87 FPU, which is still being used under certain con-
ditions for high-precision operations by modern compilers like gcc.
We exemplify the potential impact of ABI-level quality-degradation
attacks in a case study of an enclaved machine learning service
and in a larger analysis on the SPEC benchmark programs. Second,
we explore the impact on enclave confidentiality by showing that
the adversary’s control over floating-point exception masks can be
abused as an innovative controlled channel to detect FPU usage and
to recover enclaved multiplication operands in certain scenarios.
Our findings, affecting 5 out of the 7 studied runtimes, demonstrate
the fallacy and challenges of implementing high-assurance trusted
execution environments on contemporary x86 hardware. We re-
sponsibly disclosed our findings to the vendors and were assigned
two CVEs, leading to patches in the Intel SGX-SDK, Microsoft
OpenEnclave, the Rust compiler’s SGX target, and Go-TEE.
CCS CONCEPTS
• Security and privacy → Systems security; Operating sys-
tems security; Side-channel analysis and countermeasures.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC 2020, December 7–11, 2020, Austin, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8858-0/20/12...$15.00
https://doi.org/10.1145/3427228.3427270
1
KEYWORDS
Trusted execution, Intel SGX, FPU, ABI, side channels
ACM Reference Format:
Fritz Alder, Jo Van Bulck, David Oswald, and Frank Piessens. 2020. Faulty
Point Unit: ABI Poisoning Attacks on Intel SGX. In Annual Computer Security
Applications Conference (ACSAC 2020), December 7–11, 2020, Austin, USA.
ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/3427228.3427270
1 INTRODUCTION
In recent years, several Trusted Execution Environments (TEEs) [28]
have been developed as a new security paradigm to provide a
hardware-backed approach of securing software. Their promise
is that applications can be run in so called enclaves to be isolated
and protected from the surrounding, potentially untrusted Oper-
ating System (OS). This allows to radically reduce the size of the
Trusted Computing Base (TCB) to the point where only the enclave
application itself and the underlying processor need to be trusted.
TEEs hence offer the compelling potential of securely offloading
sensitive computations to untrusted remote platforms [2, 18, 29].
However, the isolation guarantees provided by any TEE only hold
in so far as the trusted in-enclave software properly scrutinizes
the untrusted interface that is exposed to the potentially hostile
environment. In the context of Intel SGX [10], a state-of-the-art
TEE widely available on recent Intel processors, the last years have
seen a considerable effort by academia and industry to develop
shielding runtimes that aid secure enclave development by trans-
parently protecting application binaries inside the TEE. Besides the
canonical open-source SGX-SDK [9] reference implementation by
Intel, several other mature enclave runtimes have been developed,
including Microsoft’s OpenEnclave [30], Fortanix’s Rust-EDP [13],
Graphene-SGX [38], and SGX-LKL [35].
Attacks on enclave shielding runtimes. A recent systematic
vulnerability assessment [43] of enclave runtimes has shown that
shielding requirements are not sufficiently understood in today’s
TEE runtimes. Particularly, it was shown that popular SGX shielding
systems suffered from a wide range of often subtle, yet crucial inter-
face sanitization oversights. From this analysis, we conclude that
the complex enclave shielding responsibility can be broken down
into two successive tiers of interface sanitizations, as illustrated
in Figure 1. In a first tier, immediately after entering the enclave
protection domain, the trusted runtime should sanitize low-level
machine state and establish a trustworthy ABI. This bootstrapping
phase is typically implemented in a minimal assembly stub that
ACSAC 2020, December 7–11, 2020, Austin, USA
Alder et al.
Figure 1: Enclaved application binaries are transparently
shielded by sanitizing untrusted ABI and API-level state.
sets up a trusted stack and initializes selected CPU registers before
calling second-stage code written in a higher-level language. At
this point, the trusted shielding runtime is responsible to provide
a secure Application Programming Interface (API) abstraction by
sanitizing untrusted arguments, such as pointers, before finally
handing over control to the shielded application binary written by
the enclave developer. Any sanitization oversight in either of the
phases of the trusted runtime, or in the application tier itself, may
nullify all of the enclave’s pursued security objectives.
This is especially apparent for a long line of confused-deputy
enclave attacks [5, 22, 34, 43] that abuse untrusted pointer pass-
ing in the shared address space to trick a victim enclave program
into inadvertently dereferencing secure memory locations chosen
by the attacker. Such API-level pointer sanitization vulnerabilities
have been traditionally widely studied, both in the context of con-
ventional user-to-kernel exploits [7] and more recently also TEE
scenarios [5, 22, 27, 34, 43]. However, as these vulnerabilities fully
manifest at the programmer-visible API level, principled solutions
have been developed to thwart this category of pointer poisoning
attacks, e.g., by means of developer annotations and automatic
code generation as in Intel’s edger8r [9], a secure type system as
in Fortanix’s Rust-EDP [13], or by automatically scrutinizing the
enclave API through symbolic execution [22] and even formal in-
terface verification efforts [45, 46]. Furthermore, prior work exists
to analyze enclave code via symbolic execution in order to reason
about API-level attack surfaces [8]. Another example for insuffi-
cient API-level sanitization is the lack of scrubbing of uninitialized
structure padding reported by [24], causing leakage of confidental
data from enclave memory.
ABI-level attacks. We argue that ABI-level vulnerabilities, on
the other hand, are generally more subtle and harder to reason
about as they do not manifest at the program level, but instead
exploit implicit assumptions made by the compiler regarding the
integrity of the low-level machine state, which may not always
hold in the enclave’s hostile environment. Due to their low-level
nature, this class of ABI-level vulnerabilities hence falls explicitly
out of the scope of established language-level security mechanisms
like memory-safe type systems. Prior work [11, 43] has for instance
exploited improper stack pointer initialization or insufficient sani-
tization of x86 flags to induce severe memory-safety issues in oth-
erwise perfectly secure applications. It remains unclear, however,
whether other ABI-level attack surfaces exist, to what extent they
endanger the enclave protection model, and if they are limited to
triggering evident memory-safety misbehavior or could also induce
more indirect and stealthier errors in enclaved computations.
2
In this paper, we analyze a subtle and previously overlooked
ABI-level attack surface arising from enclave interactions with
the processor’s underlying x87 FPU and SSE vector extensions.
Specifically, we show that insufficient FPU and SSE control reg-
ister initialization at the enclave boundary allows to adversely
impact the integrity, and to a certain extend even the confiden-
tiality, of enclaved floating-point operations executing under the
protection of a TEE. Our analysis of this attack surface in popular
Intel SGX shielding runtimes revealed re-occurring ABI-level saniti-
zation oversights in 5 different runtimes, including widely deployed
production-quality implementations such as Intel’s SGX-SDK [9],
Microsoft’s OpenEnclave [30], and Fortanix’s Rust-EDP [13]. This
lack of secure FPU initialization allows unprivileged adversaries to
influence the rounding and possibly even the precision of enclaved
floating-point operations, introduce indefinite values, and mask
or unmask selected floating-point exception types. Interestingly,
in contrast to prior research [11, 43] on ABI-level attacks which
induce direct memory corruptions in the victim program, uninitial-
ized FPU and SSE configuration registers pose a significantly less
straightforward threat and necessitate more insightful exploitation
methodologies. Our work therefore contributes novel attack tech-
niques that abuse the adversary’s control over FPU state from two
complementary angles.
First, we explore the use of rounding and precision control poi-
soning as an “ABI-level fault-injection” primitive to silently corrupt
supposedly secure enclaved floating-point operations. In several
case studies, we show that such subtle floating-point corruptions
can break the overall security objective of enclaved applications
that operate as a service in an untrusted cloud environment, with-
out ever breaking confidentiality. This threat is especially relevant
for legacy applications that employ the x87 FPU, which can be
maliciously downgraded from 64-bit double-extended precision
to a mere 24-bit single precision mode. We illustrate that such at-
tacks on the x87 FPU can lead to persistent misclassification in
an exemplary enclaved image recognition neural network, as well
as subtle, yet visible quality-degradation artifacts in 3D rendering
algorithms. To the best of our knowledge, these case studies for
the first time explore a new and stealthy class of integrity-only
attacks that purposefully disturb the end result of outsourced en-
clave computations without ever breaching confidentiality, thus
potentially defeating even severely reduced “transparent enclave
execution” paradigms [37]. This perspective represents a notable
change in direction compared to prior TEE attack research, which
has so far only focused on abusing enclaved execution integrity
flaws as a stepping stone to ultimately breach confidentiality, e.g.,
through memory-safety misbehavior [3, 23, 43], undervolting [33],
or incorrect transient-execution paths [6, 41, 42]. By contrast, our
work shows that, even when the processed data is not considered
secretive and the enclave binary is free from any application-level
vulnerabilities, current widely used shielding systems cannot al-
ways safeguard the correctness of outsourced computation results.
Controlled-channel attacks. In a second and complementary
angle, we explore the impact of ABI poisoning on the confidentiality
of enclaved floating-point operations by showing that attacker-
induced FPU or SSE exceptions can be abused as an innovative
new type of controlled-channel attack [48]. Using this technique,
enclave shielding runtimeEENTERTier 3APPTier 2APITier 1ABIFaulty Point Unit: ABI Poisoning Attacks on Intel SGX
ACSAC 2020, December 7–11, 2020, Austin, USA