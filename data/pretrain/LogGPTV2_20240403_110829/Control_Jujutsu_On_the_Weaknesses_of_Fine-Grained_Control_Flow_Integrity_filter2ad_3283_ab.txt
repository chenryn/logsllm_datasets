13
14
15
16
17
/* Spawn the piped logger process pl->program. */
static apr_status_t piped_log_spawn(piped_log *pl)
{
apr_procattr_t *procattr;
apr_proc_t *procnew = NULL;
apr_status_t status;
...
char **args;
apr_tokenize_to_argv(pl->program, &args, pl->p);
procnew = apr_pcalloc(pl->p, sizeof(apr_proc_t));
status = apr_proc_create(procnew,
args[0],
(const char * const *) args,
NULL, procattr, pl->p);
...
}
Figure 3: Target function piped_log_spawn in Apache
HTTPD
Next, Control Jujutsu searches the application for candidate tar-
get sites for the ACICS gadgets. Control Jujutsu identiﬁes target
functions that exercise behavior equivalent to a RCE (e.g. system
or exec calls).
In this example, the piped_log_spawn function meets and
exceeds all of our requirements. Apache allows a conﬁguration
ﬁle to redirect the Apache logs to a pipe rather than a ﬁle; this
is commonly used by system administrators to allow transparent
scheduled log rotation. This functionality involves Apache reading
its conﬁguration ﬁle, launching the program listed in the conﬁg-
uration ﬁle along with given arguments, and then connecting the
program’s standard input to Apache’s log output.
Figure 3 presents a simpliﬁed version of the example tar-
get function, piped_log_spawn. This target function ac-
cepts a pointer to the piped_log structure as an argument.
piped_log_spawn invokes an external process found in the
char *program ﬁeld of the piped_log structure.
The piped_log structure has a similar layout to many other
Apache structure types, which signiﬁcantly expands the number of
viable ACICS that can reach it without a crash. This is because
many Apache structs also have an entry with type apr_pool_t
as their ﬁrst ﬁeld, so that value will not need to be overwritten.
This also eliminates the need to leak valid memory values for the
apr_pool_t ﬁeld, which must be valid for our example attack to
succeed.
2.4 Exploit Generation:
Next, Control Jujutsu constructs the exploit as follows:
1. Use a heap memory corruption vulnerability to corrupt an en-
try in the _hooks structure’s link_dirwalk_stat ﬁeld
to point to piped_log_spawn.
2. Use the same vulnerability to corrupt the struct in the
request_rec->finfo ﬁeld such that, when viewed as
a piped_log struct, the ﬁelds read_fd and write_fd
are null, and the ﬁeld program points to a string with the
name and arguments of the program we intend to invoke
(e.g., “/bin/sh -c ...”).
2.5 CFG Construction
Next, Control Jujutsu examines the CFG to ensure that the
ACICS sites we identiﬁed using a tool described in Section 4 can be
redirected to the target site. In our example, the CFG constructed by
the DSA algorithm [31] allows the ICS located at dirwalk_stat
In the
to point to the target function piped_log_spawn.
1
2
3
4
5
6
7
8
9
10
11
void ap_hook_dirwalk_stat(ap_HOOK_dirwalk_stat_t *pf,
...) {
ap_LINK_dirwalk_stat_t *pHook;
//check the corresponding field of the global _hooks
if (!_hooks.link_dirwalk_stat)
_hooks.link_dirwalk_stat = apr_array_make(...);
// store the function pointer pf into the array
pHook = apr_array_push(_hooks.link_dirwalk_stat);
pHook->pFunc = pf;
...
}
for a functionality malicious, there are pairs of functions
ap_hook_malicious() and ap_run_malicious()
that are structurally similar to the code shown in Figure 1
and Figure 4. This imposes a signiﬁcant additional precision
requirement on the static analysis, as it needs to consider a
(potentially) large number of similar functions that can ma-
nipulate the data structures inside _hooks.
3.1 Static Analysis: Knobs and Trade-offs
Figure
snippet
ap_hook_dirwalk_stat() in Apache HTTPD
code
The
4:
for
next section, we describe why DSA, a context-sensitive and ﬁeld-
sensitive analysis, was not able to construct a CFG that can be used
by ﬁne-grained CFI to stop the attack.
3. BUILDING CONTROL FLOW GRAPHS
WITH STATIC ANALYSIS
4
a
The construction of a precise CFG requires a pointer analysis [6,
21, 22, 24, 31, 40, 43, 49, 57] to determine the set of functions to
which the pointer at each indirect call site (e.g., line 23 in Figure 1)
can point.
Figure
of
ap_hook_dirwalk_stat(), which registers
implemen-
tation functions that ap_run_dirwalk_stat() (shown in
Figure 1) can later invoke for the functionality of dirwalk_stat.
The intended behavior of the ICS shown at
line 23 in Fig-
ure 1 is to only call
implementation functions registered via
ap_hook_dirwalk_stat() in Figure 4.
simpliﬁed
presents
version
The ﬁrst argument pf of ap_hook_dirwalk_stat()
to an implementation function of
the function pointer
is
dirwalk_stat.
It has
the
type ap_HOOK_dirwalk_t,
which corresponds to the function signature for dirwalk_stat.
ap_hook_dirwalk_stat() stores
function pointer
to
_hooks.link_dirwalk_stat.
ap_LINK_dirwalk_stat_t (line 3 in Figure 1) represents the
type of each array entry.
array
APR
the
the
The function ap_run_dirwalk_stat() (line 7 in Figure 1)
iterates over the APR array _hook.link_dirwalk_stat and
runs each implementation function until an implementation func-
tion returns a value other than AP_DECLINED.
The example code in Figure 1 and Figure 4 highlights the fol-
lowing challenges for the static analysis:
• Global Struct:
The analysis has to distinguish between
different ﬁelds in global variables. _hooks in Figure 1
and Figure 4 is a global struct variable in Apache HTTPD.
Each ﬁeld of _hooks contains an array of function point-
ers to registered implementation functions for a correspond-
ing functionality. For example, the link_dirwalk_stat
ﬁeld contains function pointers to implementation functions
of the functionality dirwalk_stat.
• Customized Container API: The analysis has to capture
inter-procedural data ﬂows via customized container APIs.
The code in Figure 1 and Figure 4 uses customized array
APIs apr_array_push() and apr_array_make()
to store and manipulate function pointers.
• Macro Generated Code:
The code shown in Fig-
ure 1 and Figure 4 is generated from macro templates
found in Apache Portable Runtime library. For example,
Precise (sound and complete) pointer analysis is undecid-
able [41]. Unsound pointer analysis may generate a CFG that
misses legitimate indirect transfers, which may ultimately lead CFI
to report false positives. Breaking program functionality is typi-
cally undesirable (see Section 3.3).
Researchers instead focus on sound but incomplete pointer anal-
ysis algorithms [6, 21, 22, 24, 31, 40, 43, 49, 57] that conserva-
tively report more connections. For example, two pointers may
alias and an indirect call site may call a function. The hope is that
such imprecision could be controlled and that the analysis could be
accurate enough so that the generated CFG still does not contain
malicious connections.
Another important design decision for pointer analysis algo-
rithms is scalability [23]. Standard pointer analysis algorithms for
C programs have three important knobs that control the trade-offs
between accuracy and scalability: context-sensitivity, ﬁeld sensi-
tivity, and ﬂow sensitivity.
Context Sensitivity: A context-sensitive analysis [31, 49, 57] is
able to distinguish between different invocations of a function at
different call sites. It tracks local variables, arguments, and return
values of different function invocations, at different call sites sep-
arately. A context-insensitive analysis, in contrast, does not dis-
tinguish between different invocations of a function, i.e., analysis
results for local variables, arguments, and the return values from
different invocations of the function are merged together.
Previous work in the programming language community has
shown that context sensitivity is indispensable for obtaining precise
pointer analysis results in real world applications [23, 31, 49, 57],
because it eliminates a large set of unrealizable information prop-
agation paths where calls and returns do not match. Context sen-
sitivity is especially important for analyzing C programs that im-
plement customized memory management functions or manipulate
generic data structures with common interfaces, because otherwise
all pointer values returned by each memory management or data
structure function will be aliased (to each other).
the return value of different
For our example in Figure 4, context sensitivity is also im-
portant. A context-insensitive analysis will merge the anal-
ysis results of
invocations of
apr_array_push(). Therefore a context-insensitive analysis
will incorrectly determine that pHook at line 9 in Figure 4 may
alias to pHook in another implementation registration function
such as ap_hook_malicious() (recall that all implementa-
tion registration functions are generated with macro templates), be-
cause both are equal to a return value of apr_array_push()
(albeit from different invocations). Eventually, this imprecision
will cause the analysis to determine that the indirect call at line
23 in Figure 1 may call to an implementation function regis-
tered via ap_hook_malicious(), because the analysis con-
servatively determines that the function pointer argument value in
ap_hook_malicious() may ﬂow to pHook->pFunc via the
aliased pHook pointer.
Unfortunately, context-sensitive pointer analysis is expensive for
large real-world applications. Full context-sensitive analysis is also
undecidable for programs that contain recursions [42]. Standard
clone-based context-sensitive pointer analysis [57] duplicates each
function in a program multiple times to distinguish different invo-
cations of the function. This unfortunately will increase the size
of the analyzed program exponentially. The DSA algorithm uses
bottom-up and top-down algorithms to traverse the call graph of
a program and summarizes context-sensitive analysis results into
a uniﬁcation-based data structure graph [31]. It produces slightly
less accurate results than clone-based algorithms but avoids an ex-
ponential blow up on real world programs.
Field Sensitivity: A ﬁeld-sensitive analysis [31, 40] is able to
distinguish different ﬁelds of a struct in C programs, while a ﬁeld-
insensitive analysis treats the whole struct as a single abstract vari-
able. Modiﬁcations to different ﬁelds are transformed into weak
updates to the same abstract variable, where the analysis conserva-
tively assumes that each of the modiﬁcations may change the value
of the abstract variable.
For our example in Figure 1 and Figure 4, ﬁeld sensitivity is im-
portant. A ﬁeld insensitive analysis treats the global struct _hooks
as a single abstract variable, so that it cannot distinguish the ﬁeld
link_dirwalk_stat from other ﬁelds in _hooks such as
link_malicious. Therefore the analysis conservatively deter-
mines that the assignment at lines 16-17 in Figure 1 may retrieve
an array that contains function pointers for other functionalities like
malicious. This causes the analysis to eventually determine that the
indirect call at line 23 in Figure 1 may make call to any implemen-
tation function registered via ap_hook_malicious().
Field-sensitive pointer analysis is hard for C programs due to the
lack of type-safety. Pointer casts are ubiquitous, and unavoidable
for low-level operations such as memcpy(). Field-sensitive anal-
ysis algorithms [31, 40] typically have a set of hand-coded rules to
handle common code patterns of pointer casts. When such rules
fail for a cast of a struct pointer, the analysis has to conservatively
merge all ﬁelds associated with the struct pointer into a single ab-
stract variable and downgrade into a ﬁeld-insensitive analysis for
the particular struct pointer.
Flow Sensitivity: A ﬂow-sensitive analysis considers the execu-
tion order of the statements in a function [21, 24, 43], while a ﬂow-
insensitive analysis conservatively assumes that the statements in-
side a function may execute in arbitrary order. Flow sensitivity
typically improves pointer-analysis accuracy but when combined
with context-sensitive analysis it can lead to scalability issues. To
the best of our effort, we are unable to ﬁnd any publicly available
context-sensitive ﬂow-sensitive pointer analysis that can scale to
server applications such as Apache HTTPD. A common practice
to improve the accuracy of a ﬂow-insensitive analysis is to apply
single static assignment (SSA) transformation to a code before the
analysis [22].
3.2 DSA Algorithm
As discussed above, the combination of context sensitivity and
ﬁeld sensitivity is critical for generating a precise CFG that can stop
the attack described in Section 2. We next present the results of us-
ing the DSA algorithm [31] to generate a CFG for Apache HTTPD.
We chose the DSA algorithm because, to the best of our knowledge,
it is the only analysis that 1) is context-sensitive and ﬁeld-sensitive,
2) can scale to server applications like Apache HTTPD and Nginx,
and 3) is publicly available.
The DSA algorithm is available as a submodule of the LLVM
project [3] and is well maintained by the LLVM developers.
It
works with programs in LLVM intermediate representation (IR)
generated by the LLVM Clang compiler [2]. We use Clang to
compile Apache HTTPD together with the Apache Portable Run-
time(APR) library [1] into a single bitcode ﬁle that contains LLVM
IRs for the whole Apache HTTPD and APR library. We run the
LLVM mem2reg pass (SSA transformation pass) on the bitcode ﬁle
to improve the accuracy of the pointer analysis . We then construct
an LLVM pass that runs the DSA algorithm and queries the DSA
result to generate a CFG for the bitcode ﬁle.
Unfortunately, the DSA algorithm produces a CFG that cannot
stop the attack in Section 2. Speciﬁcally, the CFG speciﬁes that
the indirect call at line 26 in Figure 4 may call to the function
piped_log_spawn(). We inspected the debug log and the in-
termediate pointer analysis results of the DSA algorithm. We found
that although as a context-sensitive and ﬂow-sensitive analysis the
DSA algorithm should theoretically be able to produce a precise
CFG to stop the attack, the algorithm in practice loses context sen-
sitivity and ﬂow sensitivity because of convoluted C idioms and de-
sign patterns in Apache HTTPD and the APR library. As a result, it
produces an imprecise CFG. Fine-grained CFI systems that disal-
low the calling of functions whose address is not taken can prevent
the proposed attack through piped_log_spawn(). The attack
can succeed, however, by targeting piped_log_spawn() indi-
rectly through functions such as ap_open_piped_log_ex(),
whose address is directly taken by the application. Next, we de-
scribe some of the sources of imprecision in more detail.
Struct Pointer Casts: We found that struct pointer-cast operations
in Apache HTTPD cause the DSA algorithm to lose ﬁeld sensitiv-
ity on pointer operations. Pointer casts are heavily used at the in-
terface boundaries of Apache components. There are in total 1027
struct pointer conversion instructions in the generated bitcode ﬁle
of Apache HTTPD.
are
For
pointers
example,
from void*
cast
to
apr_LINK_dirwalk_stat_t * at
line 8 in Figure 4
when using the array container API apr_array_push().
Apache HTTPD also uses its own set of pool memory management
APIs and similar pointer casts happen when a heap object crosses
the memory management APIs. When the DSA algorithm detects
that a memory object is not accessed in a way that matches the
assumed ﬁeld layout of the object, the algorithm conservatively
merges all ﬁelds into a single abstract variable and loses ﬁeld
sensitivity on the object.
Integer to Pointer Conversion: Our analysis indicates that the
Clang compiler generates an integer to pointer conversion instruc-
tion (inttoptr) in the bitcode ﬁle for the APR library function
apr_atomic_casptr(), which implements an atomic pointer
compare-and-swap operation.
For such inttoptr instructions, the DSA algorithm has to con-
servatively assume that the resulting pointer may alias to any point-
ers and heap objects that are accessible at the enclosing context.