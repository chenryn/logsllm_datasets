n
enumeration.
For example,let’s focus on the relationship between stephanie and CLIENT74, which we saw in
i
our earlier enumeration. To get more information, we can hover the mouse over the string that
z
indicates the connection between the node to see what kind of connection it really is:
D
Figure 278: BloodHound Stephanie RDP
The small pop-up says AdminTo, and this indicates that stephanie indeed has administrative
privileges on CLIENT74. If we right-click the line between the nodes and click ? Help, BloodHound
will show additional information:
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 742
Made in Morocco
Penetration Testing with Kali Linux
y
k
s
o
Figure 279: BloodHound Help
n
As indicated in the information above, stephanie has administrative privileges on CLIENT74 and
has several ways to obtain code execution on it.
i
z
In the ? Help menu BloodHound also offers information in the Abuse tab, which
will tell us more abDout the possible attack we can take on the given path. It also
contains Opsec information as what to look out for when it comes to being
detected, as well as references to the information displayed.
After further reading of Figure {@fig:ad_enum_bh_DA_short}, and after further inspection of the
graph, we discover the connection jeffadmin has to CLIENT74. This means that the credentials
for jeffadmin may be cached on the machine, which could be fatal for the organization. If we are
able to take advantage of the given attack path and steal the credentials for jeffadmin, we should
be able to log in as him and become domain administrator through his Domain Admins
membership.
This plays directly into the second Shortest Path we’d like to show for this Module, namely the
Shortest Paths to Domain Admins from Owned Principals. If we run this query against corp.com
without configuring BloodHound, we receive a “NO DATA RETURNED FROM QUERY” message.
However, the Owned Principals plays a big role here, and refers to the objects we are currently in
control of in the domain. In order to analyze, we can mark any object we’d like as owned in
BloodHound, even if we haven’t obtained access to them. Sometimes it is a good idea to think in
the lines of “what if” when it comes to AD assessments. In this case however, we will leave the
imagination on the side and focus on the objects we in fact have control over.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 743
Made in Morocco
Penetration Testing with Kali Linux
The only object we know for a fact we have control over is the stephanie user, and we have partial
control over CLIENT75, since that is where we are logged in. We do not have administrative
privileges, so we may need to think about doing privilege escalation on the machine later, but for
now, let’s say that we have control over it.
In order for us to obtain an owned principal in BloodHound, we will run a search (top left), right
click the object that shows in the middle of the screen, and click Mark User as Owned. A principal
marked as owned is shown in BloodHound with a skull icon next to the node itself.
y
k
s
o
n
i
z
D
Figure 280: BloodHound Mark Owned
One thing to note here is that if we click the icon for the object we are searching, it will be placed
into the Node Info button where we can read more about the object itself.
We’ll repeat the process for CLIENT75 as well, however in this case we click Mark Computer as
Owned, and we end up having two owned principals. Now that we informed BloodHound about
our owned principals, we can run the Shortest Paths to Domain Admins from Owned Principals
query:
It’s a good idea to mark every object we have access to as owned to improve our
visibility into more potential attack vectors. There may be a short path to our
goals that hinges on ownership of a particular object.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 744
Made in Morocco
Penetration Testing with Kali Linux
Figure 281: BloodHound Shortest Path DA from Owned Principals
y
Note that we have rearranged the nodes in the Figure above to clarify our potential attack path.
k
Let’s read this by starting with the left-hand node, which is CLIENT75. As expected, stephanie has
a session there. The stephanie user should be able to connect to CLIENT74, where jeffadmin has
a session. jeffadmin is a part of the Domain Admins grosup, so if we are able to take control of his
account by either impersonating him or stealing the credentials on CLIENT74, we will be domain
administrators. o
BloodHound comes with a wealth of functions and options we cannot fully cover in this Module.
While we focused mostly on shortest pathns, we highly recommend getting accustomed to the
other BloodHound pre-built queries within the Challenge Labs.
In this particular domain, we werei able to enumerate most of the information using manual
methods first, but in a large-szcale production environment with thousands of users and
computers, the information may be difficult to digest. Although the queries from SharpHound
generate noise in the netwDork and will likely be caught by security analysts, it is a tool worth
running if the situation allows it, since it gives a nice visual overview of the environment at run
time.
21.5 Wrapping Up
In this Module, we explored several ways to enumerate Active Directory, each of which leveraged
LDAP as well as PowerShell .NET classes. Given that Active Directory contains a wealth of
information, enumerating it is a critical step during a penetration test.
The enumeration methods from this Module provide us with the basic skills required to perform
enumeration in a domain environment. While we cannot possibly cover all possible enumeration
techniques, it is critical to dive deeper in the labs and explore the .NET classes, PowerView
functions, and BloodHound queries.
In the upcoming Attacking Active Directory Authentication and Lateral Movement in Active
Directory Modules, we will use the information obtained from this Module and leverage it to attack
various Active Directory authentication methods as well as move laterally between targets.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 745
Made in Morocco
Penetration Testing with Kali Linux
22 Attacking Active Directory Authentication
In this Module, we will cover the following Learning Units:
• Understanding Active Directory Authentication
• Performing Attacks on Active Directory Authentication
Having enumerated user accounts, group memberships, and registered Service Principal Names
in the previous Module Active Directory Introduction and Enumeration, let’s now attempt to use
this information to compromise Active Directory.
In this Module, we’ll first explore authentication mechanisms of Active Directory (AD) and learn
where Windows caches authentication objects such as password hashes and tickets. Next, we’ll
y
get familiar with the attack methods targeting these authentication mechanisms. We can use
these techniques during different phases of a penetration test to obtain user credentials and
access to systems and services. For the purpose of this Mokdule, we’ll target the same domain
(corp.com) as in the previous Module.
s
22.1 Understanding Active Directory Authentication
o
This Learning Unit covers the following Learning Objectives:
• Understand NTLM Authentication n
• Understand Kerberos Authentication
Ai
• Become familiar with cached D Credentials
z
Active Directory supports multiple authentication protocols and techniques that implement
authentication to Windows computers as well as those running Linux and macOS.
D
Active Directory supports several older protocols including WDigest.1068 While
these may be useful for older operating systems like Windows 7 or Windows
Server 2008 R2, we will only focus on more modern authentication protocols in
this Learning Unit.
In this Learning Unit, we’ll discuss the details of NTLM1069 and Kerberos1070 authentication. In
addition, we’ll explore where and how AD credentials are cached on Windows systems.
22.1.1 NTLM Authentication
In Password Attacks, we briefly discussed what NTLM is and where to find its hashes. In this
section, we’ll explore NTLM authentication in the context of Active Directory.
1068 (Microsoft, 2003), https://technet.microsoft.com/en-us/library/cc778868(v=ws.10).aspx
1069 (Wikipedia, 2022), https://en.wikipedia.org/wiki/NT_LAN_Manager
1070 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Kerberos_(protocol)
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 746
Made in Morocco
Penetration Testing with Kali Linux
NTLM authentication is used when a client authenticates to a server by IP address (instead of by
hostname),1071 or if the user attempts to authenticate to a hostname that is not registered on the
Active Directory-integrated DNS server. Likewise, third-party applications may choose to use
NTLM authentication instead of Kerberos.
The NTLM authentication protocol consists of seven steps:
y
k
s
o
n
i
z
D
Figure 282: Diagram of NTLM authentication in Active Directory
In the first step, the computer calculates a cryptographic hash, called the NTLM hash, from the
user’s password. Next, the client computer sends the username to the server, which returns a
random value called the nonce or challenge. The client then encrypts the nonce using the NTLM
hash, now known as a response, and sends it to the server.
The server forwards the response along with the username and the nonce to the domain
controller. The validation is then performed by the domain controller, since it already knows the
NTLM hash of all users. The domain controller encrypts the nonce itself with the NTLM hash of
the supplied username and compares it to the response it received from the server. If the two are
equal, the authentication request is successful.
As with any other cryptographic hash, NTLM cannot be reversed. However, it is considered a fast-
hashing algorithm since short passwords can be cracked quickly using modest equipment.1072
1071 (Microsoft, 2013), https://blogs.msdn.microsoft.com/chiranth/2013/09/20/ntlm-want-to-know-how-it-works/
1072 (Jeremi M Gosney, 2017), https://gist.github.com/epixoip/ace60d09981be09544fdd35005051505
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 747
Made in Morocco
Penetration Testing with Kali Linux
By using cracking software like Hashcat1073 with top-of-the-line graphic
processors, it is possible to test over 600 billion NTLM hashes every second. This
means that eight-character passwords may be cracked within 2.5 hours and
nine-character passwords may be cracked within 11 days.
However, even with its relative weaknesses, completely disabling and blocking NTLM
authentication requires extensive planning and preparation1074 as it’s an important fallback
mechanism and used by many third-party applications. Therefore, we’ll encounter enabled NTLM
authentication in a majority of assessments.
Now that we’ve briefly covered NTLM authentication, in the next section we’ll begin exploring
Kerberos. Kerberos is the default authentication protocol in Active Directory and for associated
y
services.
22.1.2 Keberos Authentication k
The Kerberos authentication protocol used by Microsoft is adopted from Kerberos version 5
s
created by MIT. Kerberos has been used as Microsoft’s primary authentication mechanism since
Windows Server 2003. While NTLM authentication works via a challenge-and-response paradigm,
Windows-based Kerberos authentication uses a ticoket system.
A key difference between these two protocols (based on the underlying systems) is that with
n
NTLM authentication, the client starts the authentication process with the application server itself,
as discussed in the previous section. On the other hand, Kerberos client authentication involves
the use of a domain controller in thie role of a Key Distribution Center (KDC).1075 The client starts
the authentication process with the KDC and not the application server. A KDC service runs on
z
each domain controller and is responsible for session tickets and temporary session keys to
users and computers.
D
The client authentication process at a high level is shown in Figure 283.
1073 (Hashcat, 2022), https://hashcat.net/hashcat/
1074 (Microsoft Tech Community, 2019), https://techcommunity.microsoft.com/t5/ask-the-directory-services-team/ntlm-blocking-and-
you-application-analysis-and-auditing/ba-p/397191
1075 (Wikipedia, 2019), https://en.wikipedia.org/wiki/Key_distribution_center
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 748
Made in Morocco
Penetration Testing with Kali Linux
y
k
s
o
n
i
z
D
Figure 283: Diagram of Kerberos Authentication
Let’s review this process in detail. First, when a user logs in to their workstation, an Authentication
Server Request (AS-REQ) is sent to the domain controller. The domain controller, acting as a KDC,
also maintains the Authentication Server service. The AS-REQ contains a timestamp that is
encrypted using a hash derived from the password of the user1076 and their username.
When the domain controller receives the request, it looks up the password hash associated with
the specific user in the ntds.dit1077 file and attempts to decrypt the timestamp. If the decryption
process is successful and the timestamp is not a duplicate, the authentication is considered
successful.
If the timestamp is a duplicate, it could indicate evidence of a potential replay
attack.
1076 (Skip Duckwall, 2014), https://www.blackhat.com/docs/us-14/materials/us-14-Duckwall-Abusing-Microsoft-Kerberos-Sorry-You-
Guys-Don't-Get-It-wp.pdf
1077 (MITRE ATT&CK, 2022), https://attack.mitre.org/techniques/T1003/003/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 749
Made in Morocco
Penetration Testing with Kali Linux
Next, the domain controller replies to the client with an Authentication Server Reply (AS-REP).
Since Kerberos is a stateless protocol, the AS-REP contains a session key and a Ticket Granting
Ticket (TGT). The session key is encrypted using the user’s password hash and may be decrypted
by the client and then reused. The TGT contains information regarding the user, the domain, a
timestamp, the IP address of the client, and the session key.
To avoid tampering, the TGT is encrypted by a secret key (NTLM hash of the krbtgt1078 account)
known only to the KDC and cannot be decrypted by the client. Once the client has received the
session key and the TGT, the KDC considers the client authentication complete. By default, the
TGT will be valid for ten hours, after which a renewal occurs. This renewal does not require the
user to re-enter their password.
When the user wishes to access resources of the domain, such as a network share or a mailbox,
it must again contact the KDC.
y
This time, the client constructs a Ticket Granting Service Request (TGS-REQ) packet that consists
of the current user and a timestamp encrypted with the session key, the name of the resource,
k
and the encrypted TGT.
Next, the ticket-granting service on the KDC receives thse TGS-REQ, and if the resource exists in
the domain, the TGT is decrypted using the secret key known only to the KDC. The session key is
then extracted from the TGT and used to decrypt the username and timestamp of the request. At
o
this point the KDC performs several checks:
1. The TGT must have a valid timestamp.
n
2. The username from the TGS-REQ has to match the username from the TGT.
3. The client IP address needs to cioincide with the TGT IP address.
z
If this verification process succeeds, the ticket-granting service responds to the client with a
Ticket Granting Server Reply (TGS-REP). This packet contains three parts:
D
1. The name of the service for which access has been granted.
2. A session key to be used between the client and the service.
3. A service ticket containing the username and group memberships along with the newly-
created session key.
The service ticket’s service name and session key are encrypted using the original session key
associated with the creation of the TGT. The service ticket is encrypted using the password hash
of the service account registered with the service in question.
Once the authentication process by the KDC is complete and the client has both a session key
and a service ticket, the service authentication begins.
First, the client sends the application server an Application Request (AP-REQ), which includes the
username and a timestamp encrypted with the session key associated with the service ticket
along with the service ticket itself.
1078 (Active Directory Security, 2014), https://adsecurity.org/?p=483
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 750
Made in Morocco
Penetration Testing with Kali Linux
The application server decrypts the service ticket using the service account password hash and
extracts the username and the session key. It then uses the latter to decrypt the username from
the AP-REQ. If the AP-REQ username matches the one decrypted from the service ticket, the
request is accepted. Before access is granted, the service inspects the supplied group
memberships in the service ticket and assigns appropriate permissions to the user, after which
the user may access the requested service.
This protocol may seem complicated and perhaps even convoluted, but it was designed to
mitigate various network attacks and prevent the use of fake credentials.
Now that we have discussed the foundations of both NTLM and Kerberos authentication, let’s
explore various cached credential storage and service account attacks.
22.1.3 Cached AD Credentials
y
To lay the foundation for cached storage credential attacks and lateral movement vectors in the