### Enumeration and Analysis in BloodHound

Let's focus on the relationship between Stephanie and CLIENT74, as observed in our previous enumeration. To gather more information, hover the mouse over the connection string between the nodes to reveal the nature of the connection.

**Figure 278: BloodHound Stephanie RDP**

The small pop-up indicates "AdminTo," confirming that Stephanie has administrative privileges on CLIENT74. For additional details, right-click the line between the nodes and select "Help." BloodHound will then provide more information.

**PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 742**
**Made in Morocco**
**Penetration Testing with Kali Linux**

**Figure 279: BloodHound Help**

As indicated, Stephanie has administrative privileges on CLIENT74 and can execute code on it through several methods. The "Help" menu also includes an "Abuse" tab, which provides insights into potential attack vectors and operational security (Opsec) considerations.

Upon further examination of the graph, we discover a connection between JeffAdmin and CLIENT74. This suggests that JeffAdmin's credentials may be cached on the machine, posing a significant risk to the organization. If we can exploit this path and steal JeffAdmin's credentials, we could log in as him and gain domain administrator access through his membership in the Domain Admins group.

This scenario aligns with the second shortest path we want to highlight in this module: "Shortest Paths to Domain Admins from Owned Principals." Running this query against corp.com without configuring BloodHound results in a "NO DATA RETURNED FROM QUERY" message. However, marking owned principals in BloodHound is crucial, as it refers to the objects we currently control in the domain. We can mark any object as owned, even if we haven't accessed it, to explore hypothetical scenarios. For this exercise, we will focus on the objects we actually control.

The only object we know for certain that we control is the Stephanie user, and we have partial control over CLIENT75, where we are logged in. Although we lack administrative privileges, we will assume control over it for now.

To mark an owned principal in BloodHound, search for the object (top left), right-click the object in the center, and select "Mark User as Owned." An owned principal is indicated by a skull icon next to the node.

**Figure 280: BloodHound Mark Owned**

Clicking the object's icon places it in the "Node Info" button, providing more details about the object. Repeat the process for CLIENT75, selecting "Mark Computer as Owned." Now, with two owned principals, we can run the "Shortest Paths to Domain Admins from Owned Principals" query.

Marking all accessible objects as owned enhances visibility into potential attack vectors. There may be a short path to our goal that depends on the ownership of a specific object.

**Figure 281: BloodHound Shortest Path DA from Owned Principals**

In the figure above, we rearranged the nodes to clarify the potential attack path. Starting with the left-hand node, CLIENT75, we see that Stephanie has a session there. She should be able to connect to CLIENT74, where JeffAdmin has a session. Since JeffAdmin is a member of the Domain Admins group, gaining control of his account—either by impersonation or credential theft—will grant us domain administrator access.

BloodHound offers a wide range of functions and options that we cannot fully cover in this module. While we focused on shortest paths, we recommend familiarizing yourself with other pre-built queries in the Challenge Labs.

In this domain, we were able to enumerate most of the information manually. However, in a large-scale production environment with thousands of users and computers, manual enumeration can be challenging. Although SharpHound queries generate network noise and may be detected by security analysts, they provide a valuable visual overview of the environment when used appropriately.

### Wrapping Up

In this module, we explored various methods for enumerating Active Directory, leveraging LDAP and PowerShell .NET classes. Given the wealth of information in Active Directory, enumeration is a critical step in penetration testing.

The techniques covered provide the basic skills needed for domain enumeration. While we cannot cover all possible methods, it is essential to delve deeper into the labs, exploring .NET classes, PowerView functions, and BloodHound queries.

In the upcoming modules, "Attacking Active Directory Authentication" and "Lateral Movement in Active Directory," we will use the information obtained here to attack various Active Directory authentication methods and move laterally between targets.

**PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 745**
**Made in Morocco**
**Penetration Testing with Kali Linux**

### Attacking Active Directory Authentication

#### Learning Units:
- Understanding Active Directory Authentication
- Performing Attacks on Active Directory Authentication

Having enumerated user accounts, group memberships, and registered Service Principal Names in the previous module, we will now use this information to compromise Active Directory.

In this module, we will first explore the authentication mechanisms of Active Directory (AD) and learn where Windows caches authentication objects such as password hashes and tickets. We will then familiarize ourselves with attack methods targeting these authentication mechanisms. These techniques can be used during different phases of a penetration test to obtain user credentials and access to systems and services. We will target the same domain (corp.com) as in the previous module.

#### 22.1 Understanding Active Directory Authentication

**Learning Objectives:**
- Understand NTLM Authentication
- Understand Kerberos Authentication
- Become familiar with cached credentials

Active Directory supports multiple authentication protocols and techniques, including older ones like WDigest. However, we will focus on modern authentication protocols in this learning unit.

#### 22.1.1 NTLM Authentication

NTLM authentication is used when a client authenticates to a server by IP address or if the user attempts to authenticate to a hostname not registered on the AD-integrated DNS server. Third-party applications may also use NTLM instead of Kerberos.

The NTLM authentication protocol consists of seven steps:

1. The computer calculates the NTLM hash from the user’s password.
2. The client sends the username to the server, which returns a nonce or challenge.
3. The client encrypts the nonce using the NTLM hash and sends it to the server.
4. The server forwards the response, username, and nonce to the domain controller.
5. The domain controller encrypts the nonce with the NTLM hash of the supplied username and compares it to the received response.
6. If the two values match, the authentication request is successful.

NTLM is considered a fast-hashing algorithm, making it vulnerable to cracking. Using tools like Hashcat, it is possible to test over 600 billion NTLM hashes per second, allowing eight-character passwords to be cracked within 2.5 hours and nine-character passwords within 11 days.

Despite its weaknesses, disabling NTLM requires extensive planning and preparation, as it is an important fallback mechanism and is used by many third-party applications. Therefore, NTLM authentication is often enabled in assessments.

#### 22.1.2 Kerberos Authentication

Kerberos, adopted from Kerberos version 5 created by MIT, is the default authentication protocol in Active Directory. Unlike NTLM, which uses a challenge-and-response paradigm, Kerberos uses a ticket system. The client starts the authentication process with the Key Distribution Center (KDC) rather than the application server.

**Figure 283: Diagram of Kerberos Authentication**

1. When a user logs in, an AS-REQ containing a timestamp encrypted with the user’s password hash and username is sent to the domain controller.
2. The domain controller looks up the password hash, decrypts the timestamp, and checks for duplicates.
3. If successful, the domain controller replies with an AS-REP containing a session key and a TGT.
4. The TGT is encrypted with a secret key known only to the KDC and is valid for ten hours.
5. When accessing resources, the client constructs a TGS-REQ with the current user, a timestamp, and the resource name.
6. The KDC decrypts the TGT, extracts the session key, and verifies the TGS-REQ.
7. If verified, the KDC responds with a TGS-REP containing a service ticket and a session key.
8. The client sends an AP-REQ to the application server, which decrypts the service ticket and grants access based on the user’s group memberships.

This protocol is designed to mitigate various network attacks and prevent the use of fake credentials.

Now that we have discussed the foundations of both NTLM and Kerberos authentication, let's explore various cached credential storage and service account attacks.

#### 22.1.3 Cached AD Credentials

To lay the foundation for cached storage credential attacks and lateral movement vectors, we need to understand how Windows stores and manages credentials.