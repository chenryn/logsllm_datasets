再加上该顶点
点的实际距离，
所在顶点到起
---
## Page 118
述操作，直到到达终点为止。
将选好的顶点设为搜索完毕状态。之后重复上
计算搜索完毕的顶点到下一个顶点的权重。
选择一个权重最小的顶点，用橙色表示
搜索中.…·.
选择距离最短的一个顶点。
将选择的顶点设为搜索完毕状态
4
05
>*算法
9
---
## Page 119
106
图的搜索
第4章
搜索完毕。效率比狄克斯特拉算法的高了很多。
15
结合其他算法，或者根据具体的应用场景做出相应调整。
的计算量较大，所以可能会使游戏整体的运行速度变慢。因此在实际编程时，需要考虑
设定合适的距离估算值，效率会变差)。
还要低。如果差距再大一些，甚至可能无法得到正确答案。
来，如果距离估算值与实际值相差较大，那么该算法的效率可能会比狄克斯特拉算法的
使用 A*算法。
确的值）我们就能使用 A*算法。当然，有时这类信息是完全无法估算的，这时就不能
不过，当距离估算值小于实际距离时，是一定可以得到正确答案的（只是如果没有
应用示例
A*算法在游戏编程中经常被用于计算敌人追赶玩家时的行动路线等，但由于该算法
距离估算值越接近当前顶点到终点的实际值，A*算法的搜索效率也就越高；反过
如果我们能得到一些启发信息，即各个顶点到终点的大致距离（这个距离不需是准
解说
太远的区域。
会去计算离终点
可以看出基本不
图灵社区会员夏科(PI:EMAIL）专享尊重版权
A*
---
## Page 120
第
安全算法
S
章
---
## Page 121
108
安全算法
第5章
No
那里收到了消息，然而A也有可能是X冒充的。
假冒
窃听
■传输数据时的四个问题
各种算法和利用了这些算法的机制。
输过程中有可能会经过某些恶意用户的设备，从而导致内容被盗取。
互联网中不可或缺的安全技术
5-1
A以为向B发送了消息，然而B有可能是X冒充的（如下页上图）；反过来，B以为从A
因此，要想安全地使用互联网，安全技术是不可或缺的。本章将要学习的就是保障安全的
这种问题就叫作“假冒”。
A向B 发送的消息可能会在传输途中被X偷看（如右图）。这就是“窃听”
首先，介绍一下用互联网传输数据时可能会发生的四个主要问题。
通过互联网交换数据时，数据要经过各种各样的网络和设备才能传到对方那里。数据在传
安全和算法
A
abc
internet
abc
窃听
---
## Page 122
能对B抱有恶意，并在事后声称“这不是我发送的消息”
事后否认
信故障导致的数据损坏也可能会使消息内容发生变化。
这样，
篡改
参考下图)。
这种情况会导致互联网上的商业交易或合同签署无法成立。
B从A那里收到了消息，但作为消息发送者的A可
这种行为就叫作“篡改”。除了被第三者篡改外，
即便B 确实收到了 A 发送的消息，
，该消息的内容在途中就被X更改了。
abc
DOX
abc
abc
，但也有可能像右图
×
internet
假冒
abc
通
abc
事后否认
B
。这种行为便是“事后否认”
A
abc
abc
xyz
109
安全和算法
9
---
## Page 123
10
安全算法
第5章
■第5章的知识点
技术还可以用于预防第四个问题“事后否认”。
“，中“《，《，
认证码”（下图左）或“数字签名”（下图右）技术。
技术。
呢？来简单了解一下每个问题的应对方法吧。
■解决这些问题的安全技术
发生在用户浏览网页的时候。
为了应对第三个问题“篡改”，我们同样会使用
为了应对第二个问题“假冒”,
为了应对第一个问题“窃听”，我们会使用“加密”
问题和相应的解决方法可总结成如下页表格。
为了解决这些问题，我们需要使用哪些安全技术
四个主要问题到这里就介绍完毕了。这些问题不光发生在用户之间交流的时候，也有可能
abc
人证
internet
认证
abc
消息认证码
，我们会使用“消息
abc
签名
abc
internet
internet
签名
abc
数字签名
abc
B
.
加密
B
:
---
## Page 124
使用“数字证书”技术。
本章就将详细讲解这些安全技术。
“数字签名”技术存在“无法确认公开密钥的制作者”这一问题。要想解决这个问题，
③篡改
②假
①窃听
事后否认
冒
问题
数字签名
数字签名
消息认证码
加密
or
解决方法
，可以
安全和算法
5
---
## Page 125
2
安全算法
第5章
No
进行哪些处理呢？这一节我们将讲解加密技术的必要性和基本原理。
那里。如果像上图这样直接发送数据的话….
过互联网上各种各样的网络和设备才能到达B
S
假设A想通过互联网向B发送消息。数据要经
在现代互联网社会中，加密技术是不可或缺的。那么对数据进行加密和解密时，计算机会
abc
加密
internet
图灵社区会员夏科（PI:EMAIL）专享尊重版权
密文
加密的基础知识
abc
abc
internet
B
数据可能会被第三者恶意窃听。
8
A
abc
ihterhe
数据被称为“密文"。
密的数据加密。加密后的
因此，我们需要给想要保
abc
abc
B
---
## Page 126
像这样对数据进行加密，就不用担心会被人窃听了。
把密文发送给B。
D
D
B
把密文恢复为原本数据的操作就叫作
B收到密文后，
ab
abc
D
需要解除力
Ihterhet
密才
abc
D
原
的类
咪
解密
加密的基础知识
512
---
## Page 127
安全算法
第5章
考下图)。
计算机无法理解的无规律的数字罗列。
数据虽然有文本、音频、图像等不同的形式，但是在计算机中都是用二进制来表示的。
也就是说，加密就是数据经过某种运算后，变成计算机无法理解的数的过程（请参
对计算机来说，数据就是一串有意义的数字罗列。密文也是数字罗列，只不过它是
解说
在此基础上，我们来思考如何加密数据。
首先，计算机会用由0和1这两个数字表示的二进制来管理所有数据。如下图所示
在现代互联网社会中，加密技术变得十分重要。这里，我们再来说明一下加密的具体操作。
abc
abc
二18
H
---
## Page 128
的一系列操作就是加密技术。
过程。
变成第三者无法理解的形式的过程(请参考下图)。
像这样，将数据变成第三者的计算机无法理解的形式，然后再将其恢复成原本数据
反过来，解密就是像下图这样，通过密钥进行数值计算
在加密运算上会用到“密钥”。所以加密就是用密钥对数据进行数值运算，把数据
abc
abc
二
X
X
D
D
算，
把密文恢复成原本数据的
加密的基础知识
512
---
## Page 129
安全算法
第5章
No
数据摘要应用于各种各样的场景。
值就是“哈希值”。哈希值虽然是数字，但多用十六进制来表示。
输出固定长度的无规律数值。把哈希函数想像成搅拌数据的搅拌机就很容易理解了。输出的无规律数
为了便于理解，我们可以把哈希函数想像成搅拌机。
S
3
哈希函数可以把给定的数据转换成固定长度的无规律数值。转换后的无规律数值可以作为
Hash
7f0579bc2d
哈希函数
abc
来表示数据的一种方法。
字母a～f，总计十六个字符
十六进制是用数字0～9和
将数据输入到哈希函数后.….
O
2
abc
---
## Page 130
仍然相同。
同样地，不管输入的数据多小，哈希值的长度
第一个特征是输出的哈希值数据长度不变。
以此为前提，我们再来看看哈希函数的特征。
5
K
b37cf3c041
7f0579bc2d
Hash
Hash
abc
7f0579bc2d
4
abc
的哈希值也必定相同。
第二个特征是如果输入的数据相同，那么输出
度也保持不变。
即使输入了相当大的数据，输出的哈希值的长
8
7f0579bc2d7f0579bc2d
abcdefghijklmnop
Hash
abc
4f07fa9e12
部进行着某种运算的。
函数实际上是在计算机内
行管理。也就是说，哈希
内部同样要用二进制来进
但它也是数据，在计算机
值是用十六进制表示的，
理所有的数据。虽然哈希
个数字表示的二进制来管
计算机会用由0和1这两
Hash
abc
哈希函数
５１3
---
## Page 131
安全算法
第5章
据。输入和输出不可逆这一点和加密有很大不同。
第五个特征是不可能从哈希值反向推算出原本的数
出的哈希值也相似。
有很大的差异。输入相似的数据并不会导致输
们只有一比特的差别，那么输出的哈希值也会
第三个特征是即使输入的数据相似，但哪怕它
提示
0
6
7f0579bc2d  c8ed2af375
Hash
abc
三
参考：5-8消息认证码
参考：1-6 哈希表
中的应用。
哈希函数可以应用于各种各样的场景。本书详细讲解了哈希函数在哈希表和消息认证码
7f0579bc2d
abc
.11
abd
7f0579bc2d7f0579bc2d
最后一个特征是求哈希值的计算相对容易。
况的概率比较低。这种情况叫作“哈希冲突”。
出的哈希值也有可能是相同的，虽然出现这种情
第四个特征是即使输入的两个数据完全不同，输
2
abc
Hash
7f0579bc2d
abc
三
Hash
冲突
哈希
---
## Page 132
?
SHA 是 Secure Hash Algorithm 的缩写。
Message Digest Algorithm 5的缩写。
函数的第五个特征（输入输出不可逆)，第三者也无法得知原本的密码。
器中的哈希值进行比对。这样一来，就算保存的哈希值暴露了，鉴于上文中提到的哈希
值，并只存储哈希值。当用户输入密码时，先算出该输入密码的哈希值，再把它和服务
应用示例
到的哈希值也是不同的。
用同一个算法的前提下得出的结论。若使用的算法不同，那么就算输入的数据相同，得
才能生成哈希值。
在应用较为广泛的一个，而 MD5 和 SHA-1 存在安全隐患，不推荐使用。
虽然本节中讲过如果输入的数据相同，那么输出的哈希值也必定相同，但这是在使
不同算法的计算方式也会有所不同，比如 SHA-1 需要经过数百次的加法和移位运算
解说
就像这样，使用哈希函数可以更安全地实现基于密码的用户认证。
如果把密码直接保存到服务器，可能会被第三者窃听，因此需要算出密码的哈希