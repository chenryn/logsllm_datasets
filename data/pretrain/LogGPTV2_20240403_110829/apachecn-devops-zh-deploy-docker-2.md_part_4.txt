# being served up
COPY test.txt /srv/www/html/
```
这个 Dockerfile 可能看起来与第一个有很大不同，所以我们将花一些时间深入研究我们在这里做的事情。
# 用 FROM 扩展另一个容器
与我们上一个容器类似，我们的`FROM nginx:latest`行确保我们使用的是最新版本的基础映像，但是在这里，我们将使用 NGINX 作为我们的基础，而不是 Ubuntu。`latest`确保我们获得的映像具有最新的功能，并且通常也有补丁，但将来会有轻微的损坏和应用编程接口不兼容的风险。
在编写 Docker 容器时，您通常必须根据您的情况和稳定性要求做出这些权衡决定，但是 NGINX API 多年来一直非常稳定，因此在这种特定情况下，我们不需要命名标签提供的稳定性。如果我们想要这些标记版本中的一个，那么`latest`将会改变为我们想要的在 Docker Hub 上提供的版本，我们可以在[https://hub.docker.com/_/nginx/](https://hub.docker.com/_/nginx/)找到它，所以类似`FROM nginx:1.13`的东西也会非常好。
# 确保包含最新的修补程序
我们接下来的步骤`apt-get upgrade`和`apt-get dist-upgrade`在目前的 Docker 世界中有点争议，但我认为它们是一个很好的补充，我会解释为什么。在常规的`deb`基于包的 Linux 发行版(即 Debian、Ubuntu 等)上，这两个命令确保您的系统与您的系统版本的当前发布的包完全一致。这意味着任何不是最新版本的包都将被升级，任何过时的包都将被更新的包替换。由于 Docker 的一般准则是容器或多或少是一次性的，因此以这种方式更新您的容器似乎有些不受欢迎，但也不是没有缺点。
由于 Docker Hub 上的大多数 Docker 映像仅在基础源文件或 Dockerfile 本身发生更改时才构建，因此这些映像中有许多具有较旧的和/或未修补的系统库，因此当服务将它们用作动态库时，它可能容易受到此后已修复的任何错误的影响。为了确保我们不会在安全强化方面落后，我们确保在做任何其他事情之前更新系统。虽然由于系统应用编程接口可能发生变化而导致服务中断的风险很小，并且由于应用了额外的更改而导致映像大小增加，但在我看来，这种权衡还不足以让服务不受保护，但请随意使用您的最佳判断。
# 应用我们定制的 NGINX 配置
我们在系统更新(`RUN rm /etc/nginx/conf.d/default.conf`)后的指令是从容器中删除默认的 web 服务器配置。您可以通过我们上一篇技巧文章中的链接找到更多关于 NGINX 配置的信息，但就目前而言，可以说默认情况下，所有单独的站点配置文件都存储在`/etc/nginx/conf.d`中，NGINX Docker 映像开箱即用，附带一个名为`default.conf`的简单示例文件，我们绝对不想使用它。
虽然我们可以覆盖提到的文件，但我们会被名称`default`卡住，这不是很好的描述，所以对于我们的配置，我们将删除这个文件，并添加一个更好的文件名。
接下来，我们需要确保我们将提供文件的文件夹是可用的，并且可以被 web 服务器进程读取。使用`mkdir -p`的第一个命令创建了所有相关的目录，但是由于 NGINX 不是以 root 身份运行，我们需要知道进程将会以什么用户的身份读取我们想要提供的文件，否则我们的服务器将无法显示任何内容。通过在`/etc/nginx/nginx.conf`处显示映像中包含的系统范围 NGINX 配置的前几行，我们可以找到作为默认用户的原始配置:
```
$ # Print top 2 lines of main config file in NGINX image
$ docker run --rm \
             nginx /bin/head -2 /etc/nginx/nginx.conf
user nginx;
```
完美！好了，现在需要能够读取这个目录的用户是`nginx`，我们将用`chown nginx:nginx /srv/www/html`来改变我们目标文件夹的所有者，但是我们在试图找出这个的时候刚刚使用的新样式的`run` Docker 命令是怎么回事呢？如果在指定映像名称后包含一个命令，而不是映像中的`CMD`指令，Docker 会用这个新命令替换它。在前面的命令中，我们正在运行`/bin/head`可执行文件，传递参数告诉它我们只需要`/etc/nginx/nginx.conf`文件的前两行。由于该命令一完成就退出，容器停止并被完全移除，因为我们使用了`--rm`标志。
随着默认配置的消失和目录的创建，我们现在可以用`COPY nginx_main_site.conf /etc/nginx/conf.d/`将 NGINX 的主要配置复制到位。`COPY`参数做了非常明显的事情，将文件从当前构建目录复制到指定位置的映像中。
Be very careful with how you end the `COPY` directive argument, as leaving the slash off will put the source into a file at the destination even if the destination is a directory. To ensure that this doesn't happen, always end your target directory paths with a slash.
添加我们希望托管的主`test.txt`文件是最后一部分，它遵循与其他`COPY`指令相同的思路，但是我们将确保将这个文件放在我们的 NGINX 配置引用的文件夹中。由于我们为此端点打开了`autoindex`标志，因此不需要采取额外的步骤，因为文件夹本身是可浏览的。
# 构建和运行
现在我们已经检查了整个构建配置，我们可以创建自己的映像，看看我们刚刚制作了什么:
```
$ docker build -t web_server . 
Sending build context to Docker daemon 17.41kB
Step 1/6 : FROM nginx:latest
 ---> b8efb18f159b
Step 2/6 : RUN apt-get update -q && apt-get dist-upgrade -yq
 ---> Running in 5cd9ae3712da
Get:1 http://nginx.org/packages/mainline/debian stretch InRelease [2854 B]
Get:2 http://security.debian.org stretch/updates InRelease [62.9 kB]
Get:3 http://nginx.org/packages/mainline/debian stretch/nginx amd64 Packages [11.1 kB]
Get:5 http://security.debian.org stretch/updates/main amd64 Packages [156 kB]
Ign:4 http://cdn-fastly.deb.debian.org/debian stretch InRelease
Get:6 http://cdn-fastly.deb.debian.org/debian stretch-updates InRelease [88.5 kB]
Get:7 http://cdn-fastly.deb.debian.org/debian stretch Release [118 kB]
Get:8 http://cdn-fastly.deb.debian.org/debian stretch Release.gpg [2373 B]
Get:9 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 Packages [9497 kB]
Fetched 9939 kB in 40s (246 kB/s)
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
Calculating upgrade...
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
 ---> 4bbd446af380
Removing intermediate container 5cd9ae3712da
Step 3/6 : RUN rm /etc/nginx/conf.d/default.conf
 ---> Running in 39ad3da8979a
 ---> 7678bc9abdf2
Removing intermediate container 39ad3da8979a
Step 4/6 : RUN mkdir -p /srv/www/html && chown nginx:nginx /srv/www/html
 ---> Running in e6e50483e207
 ---> 5565de1d2ec8
Removing intermediate container e6e50483e207
Step 5/6 : COPY nginx_main_site.conf /etc/nginx/conf.d/
 ---> 624833d750f9
Removing intermediate container a2591854ff1a
Step 6/6 : COPY test.txt /srv/www/html/
 ---> 59668a8f45dd
Removing intermediate container f96dccae7b5b
Successfully built 59668a8f45dd
Successfully tagged web_server:latest
```
看起来容器构建很好；让我们运行它:
```
$ docker run -d \
             -p 8080:80 \
             --rm \
             web_server 
bc457d0c2fb0b5706b4ca51b37ca2c7b8cdecefa2e5ba95123aee4458e472377
$ docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
bc457d0c2fb0 web_server "nginx -g 'daemon ..." 30 seconds ago Up 29 seconds 0.0.0.0:8080->80/tcp goofy_barti
```
到目前为止，一切都很好，似乎一切都很好。现在我们将在`http://localhost:8080`用浏览器访问容器。
![](img/423696fe-2075-4572-bacc-965d3f5eba87.png)
正如我们所希望的那样，我们的服务器正在工作并向我们显示`/srv/www/html`的内容，但是让我们点击`test.txt`以确保它也在工作:
![](img/1b28c8ef-b7c6-46bb-a18d-715d6a1c66b0.png)
太好了，看起来我们的计划成功了，我们已经创建了一个高性能的静态网站托管服务器容器！当然，我们还可以添加许多其他东西，但是我们扩展示例映像以做一些有用的事情的主要目标是成功的！
# 从头开始服务
我们的最后一个例子相当全面，但它遗漏了一些我们也应该知道的重要 Docker 命令，所以我们将使用另一个例子，尽管以一种稍微不太优化的方式返工网络服务器解决方案，来展示它们的用途并解释它们的作用。在这个过程中，我们将更深入一点，看看我们是否可以自己制作尽可能多的服务部分。
我们将从创建一个干净的目录和创建我们之前使用的相同测试文件开始这个例子:
```
$ mkdir ~/python_webserver
$ cd ~/python_webserver
$ echo "Just a test file" > test.txt
```
现在，我们将通过在`Dockerfile`中放入以下内容来创建我们更复杂的基于 Python 的 web 服务器容器:
```
FROM python:3
# Add some labels for cache busting and annotating
LABEL version="1.0"
LABEL org.sgnn7.name="python-webserver"
# Set a variable that we will keep reusing to prevent typos
ENV SRV_PATH=/srv/www/html
# Make sure we are fully up to date
RUN apt-get update -q && \
 apt-get dist-upgrade -y
# Let Docker know that the exposed port we will use is 8000
EXPOSE 8000
# Create our website's directory, then create a limited user
# and group
RUN mkdir -p $SRV_PATH && \
 groupadd -r -g 350 pythonsrv && \
 useradd -r -m -u 350 -g 350 pythonsrv
# Define ./external as an externally-mounted directory
VOLUME $SRV_PATH/external