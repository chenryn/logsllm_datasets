### Situation Overview

In my Ubuntu environment, I previously had three versions of Python installed:

- Python 2.7 and 3.4.0, both installed by default in `/usr/bin`.
- Python 3.4.3, which I manually built from the official source code and placed in `/usr/local/bin`.

This setup allowed me to run all three versions of Python simultaneously.

### Current State

However, after some experimentation with PIP, the situation has changed:
- Python 2.7 remains in `/usr/bin`.
- Python 3.4.0 in `/usr/bin` has been upgraded to 3.4.3.
- The manually built Python 3.4.3 is still in `/usr/local/bin`.

Now, I have two installations of Python 3.4.3: one in `/usr/bin` and the other in `/usr/local/bin`.

### Questions

1. **Why did building Python 3.4.3 not upgrade the existing 3.4.0, but instead create a new installation in `/usr/local/bin`?**
2. **What do you think happened that upgraded the 3.4.0 to 3.4.3?**
3. **Is it acceptable to have two installations of the same version (3.4.3) of Python on my system?**

### Analysis

#### 1. Why Building Python 3.4.3 Did Not Upgrade the Existing 3.4.0

When you build Python from source, it typically installs in `/usr/local/bin` unless you specify a different prefix during the build process. This is a standard behavior to avoid overwriting system-managed files. The `make install` command uses the `prefix` specified in the `configure` step, which defaults to `/usr/local` if not otherwise specified.

#### 2. What Happened to Upgrade 3.4.0 to 3.4.3

The upgrade of Python 3.4.0 to 3.4.3 in `/usr/bin` likely occurred due to a package update or an unintended installation via a package manager like `apt`. When you use PIP, it might have updated the system's Python 3.4.0 to 3.4.3 if the package manager had a newer version available.

#### 3. Is It Okay to Have Two Installations of the Same Version (3.4.3) of Python?

Having two installations of the same version can lead to conflicts and inconsistencies, especially with the `site-packages` directories. Each installation will have its own `site-packages` directory:
- `/usr/lib/python3.4/site-packages` for the system-managed Python.
- `/usr/local/lib/python3.4/site-packages` for the manually built Python.

When you install packages, they will be placed in one of these directories, depending on which Python executable you used. This can cause issues where packages are not found or are duplicated.

### Recommendations

1. **Uninstall the Manually Built Python 3.4.3**:
   - Navigate to the source directory where you built Python 3.4.3.
   - Run `make uninstall` to remove the manually built version.

2. **Verify the Installation**:
   - Use `which python3` to check which Python 3.4.3 is being used.
   - Ensure that the remaining Python 3.4.3 in `/usr/bin` is functioning correctly.

3. **Manage Packages Carefully**:
   - Use virtual environments (e.g., `venv` or `virtualenv`) to manage project-specific dependencies and avoid conflicts with system-wide packages.

By following these steps, you can ensure a clean and consistent Python environment on your system.