title:MoonShine: Optimizing OS Fuzzer Seed Selection with Trace Distillation
author:Shankara Pailoor and
Andrew Aday and
Suman Jana
MoonShine: Optimizing OS Fuzzer Seed 
Selection with Trace Distillation
Shankara Pailoor, Andrew Aday, and Suman Jana, Columbia University
https://www.usenix.org/conference/usenixsecurity18/presentation/pailoor
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.MoonShine: Optimizing OS Fuzzer Seed Selection with Trace Distillation
Shankara Pailoor, Andrew Aday, and Suman Jana
Columbia University
Abstract
OS fuzzers primarily test the system-call interface be-
tween the OS kernel and user-level applications for secu-
rity vulnerabilities. The effectiveness of all existing evo-
lutionary OS fuzzers depends heavily on the quality and
diversity of their seed system call sequences. However,
generating good seeds for OS fuzzing is a hard problem
as the behavior of each system call depends heavily on
the OS kernel state created by the previously executed
system calls. Therefore, popular evolutionary OS fuzzers
often rely on hand-coded rules for generating valid seed
sequences of system calls that can bootstrap the fuzzing
process. Unfortunately, this approach severely restricts
the diversity of the seed system call sequences and there-
fore limits the effectiveness of the fuzzers.
In this paper, we develop MoonShine, a novel strat-
egy for distilling seeds for OS fuzzers from system call
traces of real-world programs while still preserving the
dependencies across the system calls. MoonShine lever-
ages light-weight static analysis for efﬁciently detecting
dependencies across different system calls.
We designed and implemented MoonShine as an
extension to Syzkaller, a state-of-the-art evolutionary
fuzzer for the Linux kernel. Starting from traces con-
taining 2.8 million system calls gathered from 3,220
real-world programs, MoonShine distilled down to just
over 14,000 calls while preserving 86% of the original
code coverage. Using these distilled seed system call
sequences, MoonShine was able to improve Syzkaller’s
achieved code coverage for the Linux kernel by 13% on
average. MoonShine also found 17 new vulnerabilities
in the Linux kernel that were not found by Syzkaller.
1
Introduction
Security vulnerabilities like buffer overﬂow and use-
after-free inside operating system (OS) kernels are par-
ticularly dangerous as they might allow an attacker to
completely compromise a target system. OS fuzzing is
a popular technique for automatically discovering and
ﬁxing such critical security vulnerabilities. Most OS
fuzzers focus primarily on testing the system-call inter-
face as it is one of the main points of interaction between
the OS kernel and user-level programs. Moreover, any
bug in system call implementations might allow an un-
privileged user-level process to completely compromise
the system.
OS fuzzers usually start with a set of synthetic seed
programs, i.e., a sequence of system calls, and itera-
tively mutate their arguments/orderings using evolution-
ary guidance to maximize the achieved code coverage.
It is well-known that the performance of evolutionary
fuzzers depend critically on the quality and diversity of
their seeds [31, 39]. Ideally, the synthetic seed programs
for OS fuzzers should each contain a small number of
system calls that exercise diverse functionality in the OS
kernel.
However, the behavior of each system call heavily de-
pends on the shared kernel state created by the previous
system calls, and any system call invoked by the seed
programs without the correct kernel state will only trig-
ger the shallow error handling code without reaching the
core logic. Therefore, to reach deeper into a system call
logic, the corresponding seed program must correctly set
up the kernel state as expected by the system call. As
user programs can only read/write kernel state through
other system calls, essentially the seed programs must
identify the dependent system calls and invoke them in
a certain system-call-speciﬁc order. For example, a seed
program using the read system call must ensure that the
input ﬁle descriptor is already in an "opened" state with
read permissions using the open system call.
Existing OS fuzzers [11, 37] rely on thousands of
hand-coded rules to capture these dependencies and use
them to generate synthetic seed programs. However, this
approach requires signiﬁcant manual work and does not
scale well to achieve high code coverage. A promising
alternative is to gather system call traces from diverse ex-
isting programs and use them to generate synthetic seed
programs. This is because real programs are required to
satisfy these dependencies in order to function correctly.
However, the system call traces of real programs are
large and often repetitive, e.g., executing calls in a loop.
Therefore, they are not suitable for direct use by OS
fuzzers as they will signiﬁcantly slow down the efﬁ-
ciency (i.e., execution rate) of the fuzzers. The system
call traces must be distilled while maintaining the correct
dependencies between the system calls as mentioned ear-
lier to ensure that their achieved code coverage does not
USENIX Association
27th USENIX Security Symposium    729
go down signiﬁcantly after distillation. We call this pro-
cess seed distillation for OS fuzzers. This is a hard prob-
lem as any simple strategy that selects the system calls
individually without considering their dependencies is
unlikely to improve coverage of the fuzzing process. For
example, we ﬁnd that randomly selecting system calls
from existing program traces do not result in any cover-
age improvement over hand-coded rules (see Section 5.4
for more details).
In this paper, we address the aforementioned seed dis-
tillation problem by designing and implementing Moon-
Shine, a framework that automatically generates seed
programs for OS fuzzers by collecting and distilling sys-
tem call traces from existing programs.
It distills sys-
tem call traces while still maintaining the dependencies
across the system calls to maximize coverage. Moon-
Shine ﬁrst executes a set a real-world programs and cap-
tures their system call traces along with the coverage
achieved by each call. Next, it greedily selects the calls
that contribute the most new coverage and for each such
call,
identiﬁes all its dependencies using lightweight
static analysis and groups them into seed programs.
We demonstrate that MoonShine is able to distill a
trace consisting of a total of 2.8 million system calls
gathered from 3,220 real programs down to just over
14,000 calls while still maintaining 86% of their origi-
nal coverage over the Linux kernel. We also demonstrate
that our distilled seeds help Syzkaller, a state-of-the-art
system call fuzzer, to improve its coverage achieved for
the Linux kernel by 13% over using manual rules for gen-
erating seeds. Finally, MoonShine’s approach led to the
discovery of 17 new vulnerabilities in Linux kernel, none
of which were found by Syzkaller while using its manual
rule-based seeds.
In summary, we make the following contributions:
• We introduce the concept of seed distillation, i.e.,
distilling traces from real world programs while
maintaining both the system call dependencies and
achieved code coverage as a means of improving
OS fuzzers.
• We present an efﬁcient seed distillation algorithm
for OS fuzzers using lightweight static analysis.
• We designed and implemented our approach as part
of MoonShine and demonstrated its effectiveness by
integrating it with Syzkaller, a state-of-the-art OS
fuzzer. MoonShine improved Syzkaller’s test cov-
erage for the Linux kernel by 13% and discovered
17 new previously-undisclosed vulnerabilities in the
Linux kernel.
The rest of the paper is organized as follows. Section 2
provides an overview of our techniques along with a mo-
tivating example. Section 3 describes our methodology.
We discuss the design and implementation of MoonShine
in Section 4 and present the results of our evaluation in
Section 5. Finally, we describe related work in Section 8
and conclude in Section 10.
2 Overview
2.1 Problem Description
Most existing OS fuzzers use thousands of hand-coded
rules to generate seed system call sequences with valid
dependencies. As such an approach is fundamentally
unscalable, our goal in this paper is to design and imple-
ment a technique for automatically distilling system calls
from traces of real existing programs while maintaining
the corresponding dependencies. However, system call
traces of existing programs can be arbitrarily large and
repetitive, and as a result will signiﬁcantly slow down
the performance of an OS fuzzer. Therefore, in this pa-
per, we focus on distilling a small number of system calls
from the traces while maintaining their dependencies and
preserving most of the coverage achieved by the com-
plete traces.
Existing test case minimization strategies like aﬂ-
tmin [12] try to dynamically remove parts of an input
while ensuring that coverage does not decrease. How-
ever, such strategies do not scale well to program traces
containing even a modest number of system calls due to
their complex dependencies. For example, consider the
left-hand trace shown in Figure 1. A dynamic test min-
imization strategy similar to that of aﬂ-tmin might take
up to 256 iterations for ﬁnding the minimal distilled se-
quence of calls.
To avoid the issues described above, we use
lightweight static analysis to identify the potential depen-
dencies between system calls and apply a greedy strategy
to distill the system calls (along with their dependen-
cies) that contribute signiﬁcantly towards the coverage
achieved by the undistilled trace. Before describing our
approach in detail, we deﬁne below two different types
of dependencies that we must deal with during the distil-
lation process.
Explicit Dependencies. We deﬁne a system call ci
to be explicitly dependent on another system call c j if
c j produces a result that ci uses as an input argument.
For example, in Figure 1, the open call in line 2 is an
explicit dependency of the mmap call in line 3 because
open returns a ﬁle descriptor (3) that is used by mmap as
its fourth argument. If open did not execute, then mmap
would not return successfully, which means it would take
a different execution path in the kernel.
Implicit Dependencies. A system call ci is deﬁned to
be implicitly dependent on c j if the execution of c j af-
fects the execution of ci through some shared data struc-
730    27th USENIX Security Symposium
USENIX Association
1: 0 = mlockall(MCL_FUTURE)
Implicit Dependency
2: 3 = open("tmpfile.txt, O_RDWR, 0600)
3: 0x7b43f2000 = mmap(NULL, PAGE_SIZE,...,3,0)
Explicit Dependency
4: 0x7b43f3000 = mmap(NULL, PAGE_SIZE,...,3,0)
5: 0x7b43f4000 = mmap(NULL, 2*PAGE_SIZE,...,3,0)
6: -EBUSY = msync(0x7b43f2000,...,MS_INVALIDATE)
7: 5 = write(1, "hello", 5)
8. 3 = write(1, "abc", 3)
1. mlockall(...)
2. open(...)
3. mmap(...)
6. msync(...)
7. write(...)
Figure 1: An example of seed distillation by MoonShine. On the left is an example trace before distillation and on the right are the
calls MoonShine identiﬁed as contributing the most new coverage along with their dependencies. The line numbers on the right
indicate their position in the original trace.
ture in the kernel, even though there is no overlap be-
tween c j’s output and ci’s input arguments.
In Figure
1, the mlockall call is an implicit dependency of the
msync call. The mlockall call instructs the kernel to
lock all memory pages that are mapped into the process’s
address space to avoid swapping. When msync is called
with the ﬂag MS_INVALIDATE on an mmap’d page to in-
validate all changes, msync fails with an -EBUSY error
because the pages were locked in memory. In this case,
the mlockall call affects the behavior of msync through
the vma->vm_flags as shown in Figure 2 even though
these calls do not share any arguments.
2.2 Motivating Example
MoonShine detects explicit and implicit dependencies by
statically analyzing the system call traces and the kernel
sources. We outline how MoonShine performs seed dis-
tillation by leveraging these dependencies below.
For distillation, MoonShine ﬁrst identiﬁes the calls
that contribute the most unique code coverage. Let us
assume that the mmap, msync, and write calls in lines 3,
6 and 7 respectively contribute most to the code cover-
age in this trace. For each such call, MoonShine uses
static analysis on the trace to identify the explicit depen-
dencies. For the mmap, MoonShine iterates over all its
arguments and looks for any upstream calls in the trace
where the argument was produced by a system call. In
this case, the only argument that matches the result of an
upstream call is the fourth argument: the ﬁle descriptor 3
matches the result of open in line 2. MoonShine applies
the same procedure for the msync call and it ﬁnds that
the ﬁrst argument of msync matches the result of mmap in
line 3 and so mmap is marked as an explicit dependency
of msync. When MoonShine applies the same procedure
to the write it ﬁnds that it does not have explicit depen-
dencies.
Next, MoonShine uses static analysis on the kernel
source code to identify any upstream calls that may
be implicit dependencies of msync, mmap, and write.
For msync, MoonShine discovers that mlockall’s exe-
cution can impact the coverage achieved by msync.
It
observes that msync checks the value of the struct
vma_struct->vma_flags ﬁeld and mlockall writes to
the same ﬁeld. Figure 2 shows the relevant code from
the implementations of mmap and msync in the ker-
nel. mlockall calls mlock_fixup which in turn sets the
vma_flags ﬁeld for every struct vma_struct in the
calling process (line 7). In this case, lock on line 6 is true
and newflags contains the bitﬂag VM_LOCKED. Without
the mlockall, the vm_flag ﬁeld would not be set, and
msync would not return -EBUSY, as highlighted on line 5.
MoonShine applies the same process to mmap and ﬁnds
that mlockall is also an implicit dependency of mmap. In
the case of the write, MoonShine again ﬁnds that it has
no upstream dependencies.
Finally, MoonShine recursively identiﬁes all the de-
pendencies of the system calls that are identiﬁed in the
last two steps described above. In this example, Moon-
Shine ﬁnds that the open and mlockall calls have no de-
pendencies in the trace. Therefore, MoonShine returns
all the dependencies of write, mmap and msync as the
distilled trace shown on the right in Figure 1.
3 Approach
We present MoonShine’s core seed distillation logic in
Algorithm 1. Starting from a list of system calls S
gathered from the program traces, MoonShine sorts the
system calls by their coverage from largest to smallest
(line 8). For each call in the list, MoonShine captures
both the explicit (line 11) and implicit dependencies (line
12). The dependencies, along with the system calls, are
merged (line 14) so that their ordering in the distilled
trace matches their ordering in the original trace. This
grouping of distilled calls is added to our collection of
seeds S (line 16) for OS fuzzing.
In Algorithm 1, we demonstrate that MoonShine con-
structs seeds from the calls that contribute the most new
coverage and captures those calls’ implicit and explicit
dependencies.
In this section we describe how Moon-
USENIX Association
27th USENIX Security Symposium    731
mlockall
msync
1: int m l o c k a l l (...) {
2: ...
3: void m l o c k _ f i x u p _ l o c k (...)
4: {
5:
6:
7:
8: }
...
if ( lock )
vma->vm_flags = newflags;
1: int msync (...)
2: {
3:
4:
5:
6:
7:
8: }
}
...
if (( flags & M S _ I N V A L I D A T E ) &&
(vma->vm_flags & VM_LOCKED) {
error = - EBUSY ;
Figure 2: This listing shows an implicit dependency between msync and mlockall. The conditional of msync on the right depends
on the value of the struct vma_struct which is set by mlockall on the left.
Algorithm 1 MoonShine’s seed distillation algorithm for
distilling trace S
1: procedure SEEDSELECTION(S)
2:
S = /0
C = /0
i = 1
for s ∈ S do
cov[i] = Coverage(s)
i = i + 1
sort(cov) // Sort calls by coverage
for i = 1 → |S| do
if cov[i] \ C 6= /0 then
expl_deps = GET_EXPLICIT(cov[i])