13.8 项目功能实现-完善退出确认功能（课后作业）
 功能说明：
要求用户在退出时提示 " 确认是否退出(Y/N)："，用户必须输入y/n, 否则循环提示。
 思路分析：
需要编写 customerView.go
 代码实现：
13.9 客户关系管理系统-课后练习
第 章文件操作
14
14.1 文件的基本介绍
 文件的概念
文件,对我们并不陌生,文件是数据源(保存数据的地方)的一种,比如大家经常使用的word文档,txt文
件,excel 文件...都是文件。文件最主要的作用就是保存数据,它既可以保存一张图片,也可以保持视频,声
音...
 输入流和输出流
 os.File封装所有文件相关操作，File 是一个结构体
总结：后面我们操作文件，会经常使用到 os.File 结构体.
14.2 打开文件和关闭文件
 使用的函数和方法
 案例演示
14.3 读文件操作应用实例
1) 读取文件的内容并显示在终端(带缓冲区的方式)，使用 os.Open, file.Close, bufio.NewReader(),
reader.ReadString 函数和方法.
代码实现：
package main
import(
"fmt"
"os"
"bufio"
"io"
)
funcmain() {
//打开文件
//概念说明: file 的叫法
//1.file 叫 file对象
//2.file 叫 file指针
//3.file 叫 file 文件句柄
file,err :=os.Open("d:/test.txt")
iferr!= nil {
fmt.Println("open fileerr=", err)
}
//当函数退出时，要及时的关闭file
defer file.Close() //要及时关闭file句柄，否则会有内存泄漏.
// 创建一个 *Reader ，是带缓冲的
/*
const (
defaultBufSize= 4096//默认的缓冲区为4096
)
*/
reader:=bufio.NewReader(file)
//循环的读取文件的内容
for{
str,err:=reader.ReadString('\n')// 读到一个换行就结束
iferr==io.EOF{//io.EOF表示文件的末尾
break
}
//输出内容
fmt.Print(str)
}
fmt.Println("文件读取结束...")
}
2) 读取文件的内容并显示在终端(使用ioutil一次将整个文件读入到内存中)，这种方式适用于文件
不大的情况。相关方法和函数(ioutil.ReadFile)
代码演示：
14.4 写文件操作应用实例
14.4.1 基本介绍-os.OpenFile 函数
14.4.2 基本应用实例-方式一
1) 创建一个新文件，写入内容 5句 "hello, Gardon"
代码实现：
2) 打开一个存在的文件中，将原来的内容覆盖成新的内容10句 "你好，尚硅谷!"
package main
import(
"fmt"
"bufio"
"os"
)
funcmain() {
//打开一个存在的文件中，将原来的内容覆盖成新的内容10句 "你好，尚硅谷!"
//创建一个新文件，写入内容 5句 "hello, Gardon"
//1.打开文件已经存在文件,d:/abc.txt
filePath :="d:/abc.txt"
file, err :=os.OpenFile(filePath, os.O_WRONLY|os.O_TRUNC,0666)
iferr!= nil {
fmt.Printf("open fileerr=%v\n", err)
return
}
//及时关闭 file 句柄
defer file.Close()
//准备写入 5句 "你好,尚硅谷!"
str:="你好,尚硅谷!\r\n"// \r\n 表示换行
//写入时，使用带缓存的 *Writer
writer :=bufio.NewWriter(file)
fori :=0; i = 'a' && v= 'A' && v= '0' && v 命令行参数
14.6.2 基本介绍
os.Args 是一个string 的切片，用来存储所有的命令行参数
14.6.3 举例说明
请编写一段代码，可以获取命令行各个参数
代码实现:
14.6.4 flag 包用来解析命令行参数
说明: 前面的方式是比较原生的方式，对解析参数不是特别的方便，特别是带有指定参数形式的命
令行。
比如：cmd>main.exe -f c:/aaa.txt -p 200 -u root 这样的形式命令行，go 设计者给我们提供了 flag
包，可以方便的解析命令行参数，而且参数顺序可以随意
请编写一段代码，可以获取命令行各个参数.
代码实现：
14.7 json 基本介绍
 概述
 应用场景(示意图)
14.8 json 数据格式说明
14.9 json 数据在线解析
https://www.json.cn/ 网站可以验证一个 json 格式的数据是否正确。尤其是在我们编写比较复杂的