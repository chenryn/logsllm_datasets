title:Committed to Trust: A Qualitative Study on Security &amp; Trust
in Open Source Software Projects
author:Dominik Wermke and
Noah W&quot;ohler and
Jan H. Klemmer and
Marcel Fourn&apos;e and
Yasemin Acar and
Sascha Fahl
2022 IEEE Symposium on Security and Privacy (SP)
Committed to Trust:
A Qualitative Study on Security & Trust
in Open Source Software Projects
6
8
6
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
Dominik Wermke∗, Noah Wöhler
∗
∗CISPA Helmholtz Center for Information Security, Germany, {dominik.wermke,noah.woehler,fahl}@cispa.de
†, Marcel Fourné‡, Yasemin Acar
∗, Jan H. Klemmer
§, and Sascha Fahl
†Leibniz University Hannover, Germany, PI:EMAIL
‡Max Planck Institute for Security and Privacy, Germany, PI:EMAIL
§George Washington University, United States, PI:EMAIL
Abstract—Open Source Software plays an important role
in many software ecosystems. Whether in operating systems,
network stacks, or as low-level system drivers, software we
encounter daily is permeated with code contributions from open
source projects. Decentralized development and open collabora-
tion in open source projects introduce unique challenges: code
submissions from unknown entities,
limited personpower for
commit or dependency reviews, and bringing new contributors
up-to-date in projects’ best practices & processes.
In 27 in-depth, semi-structured interviews with owners, main-
tainers, and contributors from a diverse set of open source
projects, we investigate their security and trust practices. For
this, we explore projects’ behind-the-scene processes, provided
guidance & policies, as well as incident handling & encountered
challenges. We find that our participants’ projects are highly
diverse both in deployed security measures and trust processes,
as well as their underlying motivations. Based on our findings,
we discuss implications for the open source software ecosystem
and how the research community can better support open source
projects in trust and security considerations. Overall, we argue
for supporting open source projects in ways that consider their
individual strengths and limitations, especially in the case of
smaller projects with low contributor numbers and limited access
to resources.
I. INTRODUCTION
Open Source Software (OSS) is an unavoidable component
in many of today’s software ecosystems. Whether as low-level
system drivers in operating systems, as tooling in daily jobs, or
simply as dependencies of hobby projects, OSS is an important
building block in our everyday software interactions.
In a 2020 report covering 45,000 repositories, GitHub
found that most projects on their platform rely on some form
of OSS [1]. In recent years, collaborative version control
platforms such as GitHub [2] and GitLab [3] introduced a
wide field of developers to open source projects. As the
complexity of modern software development
increased, so
did the number of dependencies and involved contributors.
Decentralized development and open collaboration of open
source projects introduce unique challenges: code submissions
from unknown entities, limited personpower for reviewing
commits and dependencies, and bringing new contributors up-
to-speed in projects’ best practices and processes.
Assessing vulnerabilities in components is a difficult task, as
the large number of dependencies required by today’s software
result in a complex software supply chain, including software
repositories, package managers, and package registries. The
median number of transitive dependencies in the npm ecosys-
tem was reported as 683 in a 2020 GitHub report [1]. In
addition to vulnerabilities in components, dependency sources
often lack basic security and trust controls due to historical
and economic reasons. Recent incidents in the npm ecosystem
highlight the large attack surface provided by such registries:
in late October 2021, versions of the npm package ua-
parser-JS with 7 million weekly downloads included malicious
code [4]. An attacker gained access to the maintainer’s account
and released three manipulated versions executing a Monero
cryptocurrency miner and password-stealing trojans [5]. Less
than a month later, GitHub reported an authorization vul-
nerability in npm, allowing attackers to publish manipulated,
authorized versions of their packages, which could actually be
applied to any npm package without authorization [6]. While
GitHub stated with “high confidence” that the vulnerability
had not been exploited maliciously, telemetry data was only
available from September 2020 onwards [7]. Analogous to a
2020 report from The Linux Foundation [8], we consider the
software supply chain in this work to include technical features
such as how the software is stored, how it can be retrieved,
and how it is analyzed during these processes.
The same holds true for commercial software: by building
their software as a wrapper or glue around open source compo-
nents, companies can leverage OSS as building blocks in their
processes and products, allowing them to focus their efforts on
features and faster delivery. In 2020, 95% of IT departments
and companies considered OSS as strategically important to
their organization’s overall enterprise infrastructure software
strategy [9]. By introducing open source components, compa-
nies inherit the same challenges and attack surfaces as open
source projects. They are now obligated to assess and mitigate
the impact of vulnerabilities from open source components
included in their products. As such, improving security and
trust in the open source ecosystem leads to positive effects
© 2022, Dominik Wermke. Under license to IEEE.
DOI 10.1109/SP46214.2022.00143
1880
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:27 UTC from IEEE Xplore.  Restrictions apply. 
down the whole dependency chain for both open source and
commercial software.
These chain effects make the open source ecosystem an
important field of research for the (security and privacy)
community. With the introduction of more developer-centered
research approaches arose the need for human-subject research
considerations. Recent conflicts between the research and open
source communities such as the “hypocrite commits” incident
in early 2021 highlight the need for more respectful research
approaches for investigating security and trust in open source
projects [10]. In this work, we propose a more cooperative
approach for researching open source, working together with
committers towards a more secure and trustworthy ecosystem,
instead of against them.
In addition to security, trust also plays an important role
in software development and especially the open source com-
munity, as was probably best described in Ken Thompson’s
Turing Award Lecture “Reflections on Trusting Trust”:
“To what extent should one trust a statement that
a program is free of Trojan horses? Perhaps it is
more important to trust the people who wrote the
software.” — K. Thompson [11].
As to err is only human, we consider contributors as trust-
worthy if they do not act with malicious intent, not necessarily
that they contribute error-free code.
In this work, we aim to shed light on security and trust
practices in open source projects — by exploring projects’
behind-the-scene processes, provided guidance and security
policies, as well as past security challenges and incident han-
dling. We are especially interested in processes that are often
not directly visible from the repository data, e. g., trust rela-
tionships, incident responses, and the handling of suspicious
or malicious contributors. For this, we conducted 27 in-depth,
semi-structured interviews with contributors, maintainers, and
owners from a diverse set of open source projects.
Our research approach investigates security measures and
trust processes in OSS based on the following research ques-
tions:
RQ1: “How are open source projects structured behind the
scenes?” Due to their community-driven nature, open source
projects include structures and processes that are not inherently
visible on a repository level. We investigate the why and how
of behind-the-scenes interactions and decisions, especially in
the context of security and trust.
RQ2: “If and what guidance and policies are provided by
open source projects?” Often changing contributors and loose
team structures lead to challenges in distributing project-
internal knowledge in open source projects. We examine
guidance and (security) policies provided by open source
projects of any size, as well as identify their established roles
and responsibilities.
RQ3: “How do open source projects approach security
and trust challenges?” Open source projects face unique
challenges in terms of security and trust due to their open
nature,
including code submissions from mostly unknown
entities. We investigate which organizational and technical
measures open source projects employ to establish trust
between contributors and how they react or plan to react to
arising security and trust challenges.
This work is structured as follows: After this general in-
troduction (Section I), we discuss related work in the areas
of repository research, interviews in a security context, and
open source security and trust (Section II). We then describe
our interview approach (Section III) and highlight our findings
(Section IV). Finally, we discuss our findings (Section V) and
draw a conclusion (Section VI).
A. Replication Package
In line with the effort to support replication of our work
and help other researchers build upon it, this publication has
a companion website with a full replication package1 and an
artifact repository available.
II. RELATED WORK
We present and discuss previous work in three areas: re-
search involving data and artifacts from software repositories,
interview studies in a security context, and investigations of
security and trust in the open source community. We also put
our work into context and illustrate the novel contributions of
our research.
Research with Repositories: Open source repositories are
an established data source in the (security and privacy) re-
search community. This is corroborated by the large number
of available datasets, e. g., of commits [12]–[14], contribu-
tors [15], and vulnerabilities [16], [17], as well as easy access
via torrents [18], [19]. Early work describes case studies
of then emerging open source projects such as Linux [20],
Mozilla [21], and FreeBSD [22]. Due to freely accessible
code and commits, open source repositories are a common
source for vulnerability research, e. g., by matching Common
Vulnerabilities and Exposures (CVEs) [23], [24],
tracking
vulnerability evolution over time or events [25]–[28], or for
evaluating static analysis tools [29]–[32]. Both Deligiannis et
al. and Bai et al. analyzed drivers in the Linux Kernel [33],
[34]. Fixes and patches are essential for ensuring a secure
codebase, motivating previous work to investigate fix patterns
and phases [35]–[37]. Piantadosi et al. linked 337 CVE entries
to the corresponding patches, finding that developers who
fix vulnerabilities are more experienced than average [38].
Related research focusing on social aspects investigated col-
laboration [39]–[41], gamification [42], donations [43], and