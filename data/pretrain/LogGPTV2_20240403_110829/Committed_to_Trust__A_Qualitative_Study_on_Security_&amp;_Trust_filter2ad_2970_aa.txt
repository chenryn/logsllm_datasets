# Title: Committed to Trust: A Qualitative Study on Security & Trust in Open Source Software Projects

## Authors:
- Dominik Wermke
- Noah Wöhler
- Jan H. Klemmer
- Marcel Fourné
- Yasemin Acar
- Sascha Fahl

### Publication:
2022 IEEE Symposium on Security and Privacy (SP)

---

## Abstract
Open source software (OSS) is a critical component of many software ecosystems, ranging from operating systems and network stacks to low-level system drivers. Decentralized development and open collaboration in OSS projects introduce unique challenges, such as code submissions from unknown entities, limited resources for reviewing commits and dependencies, and the need to onboard new contributors to project best practices and processes.

In this study, we conducted 27 in-depth, semi-structured interviews with owners, maintainers, and contributors from a diverse set of OSS projects. We explored their security and trust practices, including behind-the-scenes processes, provided guidance and policies, and incident handling. Our findings reveal significant diversity in deployed security measures and trust processes, as well as their underlying motivations. Based on these insights, we discuss implications for the OSS ecosystem and how the research community can better support OSS projects in trust and security considerations. We advocate for supporting OSS projects in ways that consider their individual strengths and limitations, especially for smaller projects with limited resources.

---

## I. Introduction

Open source software (OSS) is an indispensable component of today's software ecosystems. Whether as low-level system drivers in operating systems, tools in daily jobs, or dependencies in hobby projects, OSS is a fundamental building block in our everyday software interactions.

A 2020 GitHub report covering 45,000 repositories found that most projects on their platform rely on some form of OSS [1]. Collaborative version control platforms like GitHub [2] and GitLab [3] have introduced a wide range of developers to OSS projects. As the complexity of modern software development has increased, so has the number of dependencies and contributors. This decentralized development and open collaboration introduce unique challenges, such as code submissions from unknown entities, limited resources for reviewing commits and dependencies, and the need to bring new contributors up to speed with project best practices and processes.

Assessing vulnerabilities in components is a challenging task due to the large number of dependencies required by today's software, resulting in a complex software supply chain. The median number of transitive dependencies in the npm ecosystem was reported as 683 in a 2020 GitHub report [1]. Dependency sources often lack basic security and trust controls due to historical and economic reasons. Recent incidents in the npm ecosystem highlight the large attack surface provided by such registries. For example, in late October 2021, versions of the npm package `ua-parser-js` with 7 million weekly downloads included malicious code [4]. An attacker gained access to the maintainer’s account and released three manipulated versions executing a Monero cryptocurrency miner and password-stealing trojans [5]. Less than a month later, GitHub reported an authorization vulnerability in npm, allowing attackers to publish manipulated, unauthorized versions of packages [6].

The same challenges apply to commercial software. By leveraging OSS as building blocks in their processes and products, companies can focus on features and faster delivery. In 2020, 95% of IT departments and companies considered OSS as strategically important to their organization’s overall enterprise infrastructure software strategy [9]. However, they also inherit the same challenges and attack surfaces as OSS projects and are obligated to assess and mitigate the impact of vulnerabilities from OSS components included in their products.

These chain effects make the OSS ecosystem an important field of research for the (security and privacy) community. With the introduction of more developer-centered research approaches, there is a need for human-subject research considerations. Recent conflicts between the research and OSS communities, such as the “hypocrite commits” incident in early 2021, highlight the need for more respectful research approaches [10]. In this work, we propose a more cooperative approach, working together with committers towards a more secure and trustworthy ecosystem.

In addition to security, trust plays a crucial role in software development, particularly in the OSS community. Ken Thompson’s Turing Award Lecture “Reflections on Trusting Trust” aptly describes this: “To what extent should one trust a statement that a program is free of Trojan horses? Perhaps it is more important to trust the people who wrote the software.” — K. Thompson [11]. We consider contributors as trustworthy if they do not act with malicious intent, even if they contribute error-free code.

In this work, we aim to shed light on security and trust practices in OSS projects by exploring behind-the-scenes processes, provided guidance and security policies, and past security challenges and incident handling. We are particularly interested in processes that are not directly visible from repository data, such as trust relationships, incident responses, and the handling of suspicious or malicious contributors. We conducted 27 in-depth, semi-structured interviews with contributors, maintainers, and owners from a diverse set of OSS projects.

Our research approach investigates security measures and trust processes in OSS based on the following research questions:

**RQ1:** How are OSS projects structured behind the scenes? We investigate the why and how of behind-the-scenes interactions and decisions, especially in the context of security and trust.

**RQ2:** What guidance and policies are provided by OSS projects? We examine the guidance and (security) policies provided by OSS projects of any size, as well as identify their established roles and responsibilities.

**RQ3:** How do OSS projects approach security and trust challenges? We investigate the organizational and technical measures employed by OSS projects to establish trust between contributors and how they react or plan to react to arising security and trust challenges.

This paper is structured as follows: After this general introduction (Section I), we discuss related work in the areas of repository research, interviews in a security context, and OSS security and trust (Section II). We then describe our interview approach (Section III) and highlight our findings (Section IV). Finally, we discuss our findings (Section V) and draw a conclusion (Section VI).

### A. Replication Package
To support replication of our work and help other researchers build upon it, this publication includes a companion website with a full replication package and an artifact repository.

---

## II. Related Work

We present and discuss previous work in three areas: research involving data and artifacts from software repositories, interview studies in a security context, and investigations of security and trust in the OSS community. We also contextualize our work and illustrate its novel contributions.

**Research with Repositories:** OSS repositories are a well-established data source in the (security and privacy) research community. This is evidenced by the large number of available datasets, such as those for commits [12]–[14], contributors [15], and vulnerabilities [16], [17], as well as easy access via torrents [18], [19]. Early work describes case studies of emerging OSS projects such as Linux [20], Mozilla [21], and FreeBSD [22]. Due to freely accessible code and commits, OSS repositories are a common source for vulnerability research, e.g., by matching Common Vulnerabilities and Exposures (CVEs) [23], [24], tracking vulnerability evolution over time or events [25]–[28], or evaluating static analysis tools [29]–[32]. Both Deligiannis et al. and Bai et al. analyzed drivers in the Linux Kernel [33], [34]. Fixes and patches are essential for ensuring a secure codebase, motivating previous work to investigate fix patterns and phases [35]–[37]. Piantadosi et al. linked 337 CVE entries to the corresponding patches, finding that developers who fix vulnerabilities are more experienced than average [38].

**Interview Studies in Security Contexts:** Related research focusing on social aspects investigated collaboration [39]–[41], gamification [42], donations [43], and other factors. These studies provide valuable insights into the human elements of software development and security practices.

**Security and Trust in OSS Community:** Previous work has examined the unique challenges faced by OSS projects in terms of security and trust. These include code submissions from unknown entities, limited resources for reviews, and the need to onboard new contributors. Our work builds on these foundations by providing a deeper, qualitative understanding of the security and trust practices in OSS projects.

---

This revised version of the text aims to be more coherent, clear, and professional, with a logical flow and improved readability.