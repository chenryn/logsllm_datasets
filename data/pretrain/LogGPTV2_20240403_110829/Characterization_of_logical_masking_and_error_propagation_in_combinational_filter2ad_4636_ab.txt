Krishnaswamy et al. [5] present a signature-based soft
error analysis methodology to quantify the impact of logical
masking in a combinational block. A similar approach is
presented in [6]. Both works use heuristics to identify
vulnerable nodes in a given circuit, which are then selec-
tively strengthened by restructuring in order to increase the
effect of logical masking at those nodes. The intent of their
approach is to determine at the circuit-level, which nodes are
vulnerable in order to redesign and strengthen them. While
[5] and [6] assess the vulnerability of a combinational block,
they do not provide detailed analyses about how faults at a
lower level propagate to higher levels and impact system-
level vulnerability, as is demonstrated by the work presented
in this paper.
IV. METHODOLOGY FOR CIRCUIT-LEVEL
VULNERABILITY ESTIMATION
This section describes the tool that was developed as
part of this work to estimate the inherent fault masking
characteristics of combinational circuits. At the heart of the
tool chain is a compiler that takes as input the description of
a combinational circuit in the form of a netlist and converts
it into a functional simulator capable of performing random
statistical fault injection. Multiple iterations of the simulator
for each circuit produce a statistically signiﬁcant estimate of
the circuit’s vulnerability.
A. FIsim Compiler
A tool that is capable of evaluating a vulnerability metric
for a circuit can be extremely valuable for directing early
design time decisions about inclusion or exclusion of fault
tolerance in a design. While circuits at early stages in a
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:27 UTC from IEEE Xplore.  Restrictions apply. 
325representation is referred to as the intermediate code and
is a language syntax independent sequential list of logical
expressions. The code generator converts the intermediate
code into a PERL program (fisim.pl) that sets up random
inputs to the circuit and evaluates the logical expressions to
produce the output of the circuit for the chosen random input
combination.
The code generator also inserts saboteur modules (benign
by default) at locations corresponding to every internal net
that represents an internal gate output. One execution of
fisim.pl corresponds to one random pattern applied to
the circuit inputs and evaluation of the circuit output in
the presence of an error at an internal net in the circuit,
introduced by activation of a single saboteur module that
corresponds to the location where an error is to be injected.
This emulates the situation where a fault occurring some-
where within the circuit produces an incorrect logic level at
an internal net. Statistical signiﬁcance may be achieved by
running a long campaign that iterates fisim.pl a sufﬁcient
number of times, because each iteration chooses a different
random input sequence and picks a random saboteur to
activate a fault in a random location within the circuit.
fisim.pl may be executed in a second mode where the
chosen saboteur is ﬁxed for a campaign. This mode can be
used to study the effect of errors on speciﬁc nets or regions
of nets so that the vulnerability of different regions in the
circuit may be characterized.
B. FIsim Results
The results obtained from FIsim simulations for various
combinational circuits are shown in Figure 2. Each plot
shows all the internal nets in a circuit on the x-axis and
corresponding vulnerability on the y-axis (i.e. the probability
that there is an error at the output of the combinational block,
given that there is a soft error on that net). The nets in each
graph shown in Figure 2 do not include input nets as they are
assumed to be fed by sequential elements such as latches or
ﬂip ﬂops. The experiments presented here emulate faults in
combinational logic gates and their output nets. Therefore,
the nets shown in Figure 2 include output nets, all of which
have 100% vulnerability. The nets are ordered on the x-axis
based on their distance in terms of number of gate hops
from input. Nets that have equal distance from the input are
ordered arbitrarily. Therefore, all of the output nets are not
necessarily grouped together on the right.
1) ISCAS85 Circuits: The ISCAS85 benchmark circuits
[7] comprise ten combinational circuits that include func-
tions such as decode, multiply, ALU operations, ALU con-
trol, and error detection and correction. Table I shows the
number of internal nets and output nets in each of the circuits
as determined by the FIsim compiler. The number of internal
nets can be used as a relative measure of circuit size. A
front end for the FIsim compiler capable of interpreting the
ISCAS85 netlist format was written as a formal grammar
Figure 1. FIsim compiler components and operation
design ﬂow are often represented as netlists, there is no
single accepted netlist format (e.g. EDIF, SPICE (Cadence)).
In order for such a tool to be useful to a broad community
it should have the capability to interpret different netlist
formats and be easily extendable to new netlist formats. This
tool was therefore designed using principles of complier
design so that the only effort required to enable use with
a different netlist format would be the development of a
new front-end that takes as input the netlist grammar and
produces an input-format-independent intermediate repre-
sentation of the netlist. The rest of the compiler tool chain
can be reused.
A schematic of the FIsim compiler is shown in Figure
1. The entire tool chain was written using PERL. The
front end comprises the grammar deﬁnition of the chosen
netlist format and a parser generated using YAPP (yet
another PERL parser compiler) from the grammar. The
parser together with a lexical analyzer parses the input netlist
and produces an intermediate representation. Two front-ends
capable of interpreting SPICE and ISCAS85 netlist formats
were developed for the results presented in this paper. The
only assumption FIsim makes is that the netlist provided
as input to it is one that is mapped to a synthesis-ready
library of gates. This requirement is complemented by a
user input – the expressions library. This is a collection
of logical expressions (in C-like format) that correspond to
various operations that gates in the library evaluate. Such a
library can easily be compiled from user manuals of standard
cell libraries.
After simple translation of gates in the intermediate
representation into logical expressions using rules in the
expressions library, the back end reorders the expressions to
maintain sequential consistency and to avoid hazards. This
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:27 UTC from IEEE Xplore.  Restrictions apply. 
intermediate codecode generatorfisim.plback endvulnerabilityestimateintermediatereprsentation# iterationsparserparser generatornetlist format grammarFRONT ENDanalyzerlexicalnetlistexpressionslibrary326(a) ISCAS85 c-432
(b) ISCAS85 c-499
(c) ISCAS85 c-880
(d) ISCAS85 c-1355
(e) ISCAS85 c-1908
(f) ISCAS85 c-2670
(g) ISCAS85 c-3540
(h) ISCAS85 c-5315
(i) ISCAS85 c-6288
(j) ISCAS85 c-7552
(k) ARITH 16-bit multiplier
(l) ARITH 8-bit KSA
(m) ARITH 16-bit KSA
(n) ARITH 32-bit KSA
(o) ARITH 64-bit KSA
Figure 2. Results from fault injection on various combinational circuits. X-axis for all graphs indicates internal nets of each circuit (see Section IV-B for
details). The corresponding vulnerability (i.e. the % of fault injections performed on that net that resulted in errors at the circuit output) is plotted on the
y-axis, as is the average circuit vulnerability. All graphs have been rendered using scalable graphics; details may be visualized when enlarged.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:27 UTC from IEEE Xplore.  Restrictions apply. 
16002040608010012014010001020304050607080908.13202020406080100120140160180100010203040506070809036.10383050100150200250300350100010203040506070809023.6754604080120160200240280320360400440480100010203040506070809014.6488007515022530037545052560067575010001020304050607080904.21126902004006008001000100010203040506070809020.531669020040060080010001200140010001020304050607080905.3523070200400600800100012001400160018002000100010203040506070809017.912416040080012001600200010001020304050607080903.163351405001000150020002500300010001020304050607080907.62115501002003004005006007008009001000100010203040506070809089.282740102030405060100010203040506070809073.882194020406080100120140160180100010203040506070809069.622482050100150200250300350400100010203040506070809067.551115401002003004005006007008009001000100010203040506070809066.131327Circuit
c-432
c-880
c-1908
c-3540
c-6288
#Nets
160
383
880
1669
2416
#Outs
7
26
25
22
32
Circuit
c-499
c-1355
c-2607
c-5315
c-7552
#Nets
202
546
1269
2307
3513
#Outs
32
32
140
123
108
Table I
ISCAS85 CIRCUITS TESTED
Circuit
Input width (# bits)
# Nets
Kogge-Stone adder
Kogge-Stone adder
Kogge-Stone adder
Kogge-Stone adder
Multiplier
8+8
16+16
32+32
64+64
16×16
74
194
482
1154
1154
Table II
VERILOG-SPICE CIRCUITS TESTED
combined with a lexical analyzer. Using the fault injection
simulator generated by the compiler, 1000 fault injections
per net were conducted for each circuit. For example, a total
of ∼3.5 million fault simulations were run for the circuit c-
7552. Results of these experiments are shown in Figures 2(a)
– 2(j).
A fault simulation on a particular net is counted vulnerable
if the output of the circuit had an error given that there
was an error on that net for a random input combination.
The height of each point (net) on the graphs corresponds to
the percentage of observed vulnerable experiments among
the 1000 conducted on that net. The dashed line in each
plot shows an aggregate estimate of vulnerability assuming
that an error on each net is equally likely. This is obviously
not the case, but simply a generalization. This can further
be reﬁned based on area of each gate that feeds each net
and the inherent vulnerability of the gate. An approach to
incorporate this into the analysis process is demonstrated in
Section V.
It can be seen that different circuits exhibit vulnerability
in very different ways. For example, in Figures 2(d) and
2(e), most of the nets have a vulnerability of 0 and a
few nets towards the output of the circuit have a high
vulnerability. Closer examination of these circuits revealed
that they contained a number of wide AND gates (e.g. 8
or 9 inputs). These can be considered sinks with respect
to error propagation because for most input combinations,
the AND gate produces an output of 0 (i.e. if at least one
input is 0). This could imply that conducting just 1000
fault experiments on these nets is not sufﬁcient to encounter
experiments where input conditions are suitable to propagate
errors. So these circuits were reevaluated with 10,000 fault
experiments per net. The results, however, largely remained
the same except for a few nets, which produced a few
(1-2) vulnerable cases per 10,000 experiments conducted.
Therefore, those nets that show a vulnerability of 0 do not
imply that their vulnerability is exactly 0 (indeed, the net
would then serve no purpose), but is very small, precisely,
less than one in one or ten thousand.
2) Cadence SPICE Circuits: Verilog descriptions of cir-
cuits such as adders of various input widths and a multiplier
obtained from the Arithmetic Module Generator (AMG,
ARITH) [8] were used to demonstrate utility of the FIsim
compiler tool chain in a design ﬂow. These example circuits
(downloaded as structural Verilog) were converted to a
design implementation using the Cadence RTL compiler
by mapping onto gates in a 120nm process standard cell
library. The mapped verilog circuits were then imported into
Cadence schematic editor and exported into SPICE netlists
by associating the circuit with a technology library.
A second front end to the FIsim compiler capable of
interpreting SPICE netlists was developed to demonstrate
practical application in the design ﬂow. The netlists were
provided as inputs to the FIsim compiler to generate fault
injection simulators for these circuits. The number of nets
identiﬁed by the FIsim compiler for the different circuits is
shown in Table II. Each circuit’s fault simulator was iterated
1000 times for each net in the circuit. The total amount of
time required to run this experiment for the largest circuit
tested, comprising 1.154M experiments was about 25 hours.
Results of this experiment for Kogge-Stone adders of various
input widths and a 16-bit multiplier are shown in Figures
2(k) – 2(o).
It is clear that the general position of nets in Kogge-Stone
adders of different widths exhibit similar vulnerabilities.
This is evident from the fact
that Figures 2(l) – 2(o)
progressively appear to be more crowded versions of each
other. Even though the vulnerability reduces with increasing
bit width, it quickly settles.
V. DEVELOPMENT OF A FAULT TO ERROR MODEL
As was deﬁned in Section II-D, the vulnerability of a
top-level circuit is the probability that there is an error
at its output in the presence of faults that are capable of
producing errors within it. To evaluate it, we propose a
hierarchical approach, which deﬁnes it recursively in terms
of the vulnerabilities of its constituent components, thus
avoiding the tremendous combinational complexity of a
ﬂat design. Even though we demonstrate the model using
two levels in the design hierarchy (top and block; cell
vulnerability is not reﬁned here), it can be extended to an
arbitrary number of levels. The following equations deﬁne
the model.