⑦实施变更 Schedule and implement。
⑧验证 Validation
⑨记录/版本更新和基线 Document。
—241—
A.5 综合性产品团队（例如： 开发运营）
也有翻译成“集成产品团队”的，也就是 XX 课题攻关小组。Integrated product team。
集成产品和过程开发（IPPD）Integrated Product and Process Development，是一种管
理技术，通过 1 个综合性的团队来优化设计、生产和服务的过程，包括必须的采购活动。IPPD
的一个关键原则是：通过综合性产品团队（IPTs）来实现多学科团队协同工作。（中国的单位
经常为了应对某一任务临时抽组各部门的人员成立的专项工作小组）
1.DevOps 方法
DevOps 是用于提高软件开发效率的一种项目管理方法及过程（一个模型）。软件工程一
般存在软件开发、质量保证和技术操作（Software development、Quality assurance、IT
operations）这些重要职能之间严重脱节的情况，不同团队的个人，各司其职，往往相互矛盾，
导致了在创建代码、测试和部署到生产环境之中的环节产生冗长的时间延迟。当问题出现的时
候，他们不是一起合作解决问题，团队之间常常将问题抛给对方，导致反复地官僚主义。DevOps
方法旨在通过将三种职能融合在在一个单一的运作模式下来解决这些问题。DevOps 这个词是
开发 Development 和运行 Operations 的组合体，标着着这些功能必须合并和合作去满足业务
需求。DevOps 模型与敏捷开发方法关系紧密，目的都是为了减少开发所需的时间、以及测试
和部署软件的变更。使用 DevOps 模型可以很轻松的在 1 天时间内多次部署代码。
①支撑 DevOps 构件的核心公共原则（考点）：
*对原型系统进行开发和测试。
*使用可重复的、可靠的流程进行部署，促使开发和运营以迭代的方式稳步发展。
*实时智能地监控和验证运营质量。
*形成闭环管理：企业建立对接机制，让所有利益主体掌握并及时有效处置各种反馈。也
称为放大反馈环，这项原则呼吁组织建立沟通渠道，让所有利益相关者访问并对反馈采取行动。
②目标：
流程的自动化。
③最终目的：
提高客户响应能力。
B.在开发环境中执行安全控制
B.1 软件环境的安全
软件开发在需求阶段进行安全策略设计是最节约成本的。（越早做安全越好）
1.Web 安全
由于 web 系统和应用的可访问性，输入验证是关键，应用代理防火墙在这方面最适合，但
要确保代理可以处理缓冲区溢出问题，身份认证问题，编码问题(例如 Unicode)，和 URL 编码
和转换等。
①开放 Web 应用安全项目(OWASP)/如何确保网站安全（必考）
在第八域 B.1 章节也讲了。OWASP 是一个致力于提高软件安全性的非营利机构。OWASP 开
发了大量免费的实用产品，其中包括：
—242—
①OWASP 十大项目：基于 Web 应用存在的十大缺陷给出抑制它们的方法。
②OWASP 指南项目：一部说明如何设计出安全的 Web 应用和服务的全面手册。
③OWASP 软件保障成熟度模型(SAMM)：SAMM 是一个框架，用于针对机构面临的具体风险量
体裁衣地设计软件。
④OWASP 移动项目：为开发人员和架构师开发和维护安全移动应用提供了资源。
有鉴于基于 Web 和基于云的解决方案使用得非常普遍，OWASP 提供了一个带 Web 应用安全
流程的可访问全面框架。你应该对 OWASP 的作品有一个全面的了解，搞清如何将其应用到自己
的任务中。OWASP 识别出的 10 大顶级风险有：
A1：注入；A2：跨站脚本攻击(XSS)；A3：无效的认证和会话管理；
A4：不安全的直接对象引用；A5：跨站请求伪造(CSRF)；
A6：安全配置错误；A7：不安全的加密存储；A8：URL 访问限制失败；
A9：薄弱的传输层保护；A10：未经验证的重定向和转发。
②Web 应用安全联盟(WASC)
Web 应用安全联盟(WASC)是一个组织，它为 Wor1d Wide Web 和组成万维网的基于 Web 的
软件提供了最佳安全实践标准。这个组织提供了一系列的资源、工具和信息，可以通过它们了
解这些基于 Web 的软件开发中常见的安全问题以及如何避免它们。该组织拥有一个 Web 应用程
序扫描评估标准，可用于评估各种厂家的产品和实践。它提供了 Web 应用程序的安全指标和威
胁分类，并维护着蜜罐进行实时超文本传输协议(HTTP)的 Web 威胁流量分析。这个组织阐述的
最常见的顶级攻击方法有：
①跨站请求伪造（CSRF）；②跨站攻击（XSS）；③拒绝服务攻击（DOS）；
④已知漏洞；⑤暴力攻击；⑥隐藏参数操作；⑦网银木马；⑧点击劫持。
③关于输入验证的攻击
客户端都要通过发送指令、表单什么的请求 WEB 服务，必须要对 WEB 输入的内容进行验证，
不然会因为输入一些特殊字符而被攻击。如：
1.路径/目录遍历(Path or directory traversal)：这个攻击又被称为“点-点-斜线”、
“../”dot dot slash；在 URL 中接入几个“../”就可以访问上级的文件目录了。
2.统一代码编码(Unicode encoding)：Unicode 是一种行业标准，开发他的目的是为了以
标准的编码格式来表示世界上的 10 万多个文本字符。Web 服务器通过 Unicode 来支持不同的
字符，在 Unicode 下，攻击者不用“../”来攻击，而使用 Unicode 的“%C1%lc，%c0%9v，and %C0%af”
来攻击。
3.网址编码(URL encoding)：在 URL 中，“空格“表示为“%20”，其实其它字符也可以
在 URL 里用特殊的方式来发送。
4.客户端验证(Client-side validation )：是指将指令发送到服务器之前在客户端进行
验证，如果黑客劫持攻击者环境，插入恶意数据，也就绕过了这个验证了。
还有缓冲区溢出(buffer overflow)、SQL 注入、XSS 什么的，后面的应用程序安全里讲，
这里不解释了。
2.开源
开源的不好就是，它的漏洞问题可以更广泛、更容易的被其它人发现。
—243—
开源的开放性能促进快速的识别和修复任何问题，包括那些与安全相关的问题。有一种安
全称为“隐晦安全”的想法，即如果一个系统不为人知，它被人找到如何攻破的可能性就会降
低。也就是越小众的系统，暴露的漏洞也越少。
全面披露：指发现安全漏洞的个人应公开的传播此信息。
3.Java 安全
在字节码被解释的时候，Java 检查应用使用的变量和内存。这种检查对于安全可能是好
事，或坏事。通常，这是件好事，因为程序正确的使用内存且不超出设定的边界。但是，过分
依赖这些功能，如果开发者不在他们的代码中使用额外的安全检查，可能引起马虎的作风以致
引起其它安全问题。例如，Java 通常被认为非常善于垃圾收集，自动的内存单元的检查，和
不再需要的内存的取消分配。这是好事，它确保程序不会充满所有可用内存然后运行遇到问题。
但是，这个语言没有办法决定信息的敏感性，它可能存储于那些内存单元。因此，它可能导致
敏感信息被不正当的泄露。不提供垃圾收集服务的语言要求程序员关于内存分配做出自觉的选
择，并且这种选择可能提示程序员在其返回可用内存池之前，覆盖内存单元。
Java 安全方法的三个部分(有时被称为层)是（考点）：
①验证器(或翻译器)interpreter：有助于确保类型安全；它主要负责内存和边界检查
②类加载器：从 Java 运行时环境动态地加载和卸载类
③安全管理器：作为安全的看护者防止恶意功能
沙箱（Sanddox）：
Java 最初是为一个分布式应用环境设计，因此安全模型建立了一个沙箱，其对分布式 Java
程序可以做什么和不可以做什么进行严格控制。一个不同于沙箱方法处理动态代码的方法是只
允许可信代码运行。例如，ActiveX 控件只有在你完全信任控件签名的实体时，才可以执行。
不幸的是，ActiveX 系统的设计和实现都有问题。ActiveX 没有沙箱来限制一个 ActiveX 控件
的活动，它可以对可用的可执行程序执行任何行动或功能，不存在对程序的可靠性或边界限制
的运行时检查。
针对是沙箱的攻击是：延时木马（在沙箱完成检验后，沙箱重置后运行）。
4.分布式面向对象系统
（没内容可考）
很多通过使用基于分布式对象的软件系统构建，例如公共对象请求代理体系架构(CORBA)，
Java 远程方法调用(JRMI)，企业 JavaBean（EJB)，和分布式组件对象模型(DCOM)。分布式面
向对象系统允许系统的组件位于网络内分开的很多多计算机上。
对象如何相互通讯是复杂的，尤其是因为对象可能不是驻留在同一台机器上，而是可能位
于跨网络的机器上。为了使这个过程标准化，对象管理组织(OMG)创建了一套标准来发现对象，
初始化对象，和给对象发送请求。这个标准就是对象请求代理（ORB)，它是公共对象请求代理
体系架构(CORBA)的一部分。
①公共对象请求代理体系架构(CORBA)
公共对象请求代理体系架构(CORBA)是一套由对象管理组织OMG(Object Management Group)
定义的工业标准，它解决硬件和软件产品之间的互操作需求。包括 2 部分：
面向系统组件(对象请求代理 ORB+对象服务 OS)，system-oriented components (object
—244—
request brokers and objectservices)；
面向应用组件(应用对象 AO+通用设施 CF)，application-oriented components
(application objects and common facilities)。
对象请求代理 ORB 是中间件，管理组件中的所有通信，建立了对象之间一个客户-服务器
关系，使他们能在异构和分布式环境中交互，且与运行的平台无关，提高互操性。ORB 依赖于
Object Service，以提供访问控制、跟踪、重定位对象和建立对象。ORB 就是中间件。CORBA
安全服务支持四种类型的策略：访问控制，数据保护，抗抵赖和审计。
EJB 是 Sun Microssystem 的模型，提供了构建可扩展，分布式，多层，基于组件的应用
的 API 规范。EJB 使用 Java 的 RMI 实现通信。EJB 服务器提供了事务，安全和资源共享的标准
服务集合。EJB 的优点之一是允许人员组装组件来控制访问。不是通过组件开发人员硬编码策
略，最终用户(即，系统管理员或安全员)可以指定安全策略。其它安全功能也提供给最终用户。
EJB 的一个脆弱性是 RMI 的著名的弱点。例如，RMI 通常配置为允许用户在代码不存在的情况
下自动地从服务器下载。因此，在客户可以建立安全的连接之前，依然能够下载代码或者一个
恶意的攻击者可以伪装成服务器的客户并下载代码。虽然己经做了改进，增加了 RMI 的安全性，
所有的现都必须对安全功能进行评审。
②分布式计算环境（Distributed Computing Environment,DCE），
DCE 由 OSF(Open Software Foundation)开发，也被称为 Open Group，是行内第一个尝试
分布式计算的框架，是一个基于 RPC 通信层的管理服务。他是 C/S 框架并被多家厂商采用。DCE
提供远程过程调用（Remote Procedure Call (RPC)）服务，安全服务、目录服务、时间服务
以及分布式文件支持等。DCE 是通过客户端/服务器模型标准化异质系统通信的首个尝试，它
为后来的 CORBA、DCOM 和 J2EE 等分布式计算技术提供了多个基础性概念。
DCE 使用通用唯一标识符 UUID(Universal Unique Identifier)来唯一标识环境内的用户、
资源和组件。下面的 DCOM 则使用全球唯一标识符 GUID(Globally Unique Identifier)。
③分布式组件对象模型(Distributed Component Object Model，DCOM)
DCOM 支持程序中的组件交互，定义了组件内的交互关系，为简单的交互处理通信提供一
个体系结构，支持分布式进程通信(IPC—InterProcess Communication)，支持应用访问网络
中不同位置的对象。他类似功能的组件还有：面向消息的中间件 MOM (message-oriented
middleware)、开放数据库连接 ODBC (Open Database Connectivity)等。
COM/组件对象模型(Component Object Model)是由微软发的一套标准化 API、组件命名机
制和通信标准，允许同一应用内的进程间或相同计算机系统内不同应用的进程之间的通信。
DCOM 已经淘汰，被.NET Ramework 取代。
④对象链接和嵌入(Object Linking and Embedding,OLE)
程序调用另一个程序的能力称为链接。将一段数据放入外部程序或文档的能力称为嵌入。
对象链接和嵌入 OLE 为在本地个人计算机上其事对象提供了一种方式，并使用 COM 作为其
基础。OLE 使对象(如图形、图片和电子表格)可以嵌入文档中。OLE 还允许链接不同的对象和
文档。例如，当你创建一个包含 URL 的文档时，URL 会变成带下划线的蓝色字符，指示用户可
以单击 URL 转到相应的 Web 站点；这是链接能力的一个示例。如果你在文档中增加一个电子
表格，那么就是嵌入的例子。如果你需要编辑这个电子表格，那么只要双击该表格，操作系统
—245—
就会打开正确的环境(可能是 Excel)让她进行编辑修改。
在万维网(Wor1d Wide Web)中应用的 OLE 技术称为 ActiveX。ActiveX 组件与其他组件一
样，但是可以进行移植。ActiveX 组件可以运行在任何支持 DCOM(使用 COM 模型)或者使用 DCOM
服务进行通信的平台上。
在前面“数据库和数据仓库”里也讲过 OLE。
5.库和工具集
软件库是由预先写好的代码，类，过程，脚本，和配置数据组成。一个开发者可能手动地
为程序添加一个软件库以获得更多的功能或者自动化一个过程而不用从头开始编写代码。在计
算机编程中，标准库是跨编程语言实现可用的库。标准库通常包括常用算法的定义，数据结构，
和输入和输出机制。常见的编程语言库有：
*C 标准库，为 C 语言提供；
*C++标准库，为 C 一语言使用；
*框架类库(FCL)，为.NET 框架使用；
*Java 类库(JCL)，为 Java 编程语言和 Java 平台使用；
*Ruby 标准库，为 Ruby 编程语言使用。
6.集成开发环境 IDE
集成开发环境把很多工具的功能组合到一个软件程序，供开发人员使用。集成开发环境的
设计，提供带有相似的用户界面的紧密的组件，以最大限度地提高程序员的工作效率。IDE 展