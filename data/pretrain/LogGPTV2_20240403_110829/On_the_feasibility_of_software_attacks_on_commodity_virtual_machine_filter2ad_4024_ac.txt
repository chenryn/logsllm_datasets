NEW
NC
NC
NC
C**
Interrupt Attacks
NMI
-
NEW
h(cid:9)
h(cid:9)
h(cid:9)
h(cid:9)
h(cid:9)
h(cid:9)
h(cid:9)
g(cid:9)
NA
g(cid:9)
NA
g(cid:9)
g(cid:9)
g(cid:9)
g(cid:9)
g(cid:9)
g(cid:9)
g(cid:9)
g(cid:9)
g(cid:9)
g(cid:9)
g(cid:9)
g(cid:9)
g(cid:9)
g(cid:9)
g(cid:9)
g(cid:9)
g(cid:9)
g(cid:9)
g(cid:9)
g(cid:9)
h(cid:9)
h(cid:9)
-
h(cid:9)
h(cid:9)
h(cid:9)
g(cid:9)
g(cid:9)
g(cid:9)***
g(cid:9)
g(cid:9)
g(cid:9)
g⇒vmm g⇒vmm g⇒vmm g⇒vmm
g⇒vmm g⇒vmm
Table 2: Overview of the results of the attacks implemented in our study.
* The attack was previously conﬁrmed as h(cid:9), g⇒h, and g⇒vmm against an old version of Xen.
** The attack was previously conﬁrmed as h⇒vmm, against an old version of Xen without DMA remapping hardware.
*** KVM detects the port overlapping and kills the guest. The state of CPU registers is also dumped in the Host OS.
Each cell in the table lists the results of a given attack against a
particular conﬁguration of Xen and KVM, according to the abbrevi-
ations introduced above. Whenever the attack was not applicable,
it is marked as NA. Finally, we mark in red color the most criti-
cal results, i.e., any successful guest-to-host or guest-to-VMM at-
tacks. We do not highlight here the unexpected hardware behavior
we discovered while carrying out interrupt attacks. The unexpected
behaviors are described in Section 6.
The next three sections present an in-depth analysis of the three
classes of attacks and the result of our experiments.
4. DEVICE MEMORY COLLISION ATTACKS
In this section, we systematically examine how a VM can ac-
cess the conﬁguration space of directly assigned devices, and what
security risks are associated to these actions. In particular, by re-
conﬁguring a device, an attacker can create a conﬂict with another
device. Therefore, without enforcing the proper PCI/PCIe conﬁg-
uration space access restrictions, an attacker could ex-ﬁltrate data
from one virtual machine to another that is under her control. More-
over, unmediated PCI/PCIe conﬁguration space accesses can re-
sult in either privilege escalation [31] or DoS attack against the
host/privileged VM. All the attacks we present are implemented
by modifying the e1000e device driver of an Intel 82579LM PCIe
network card.
PIO Attack against the PCI/PCIe Conﬁguration Space
Duﬂot et al. [31] described the dangers of enabling a VM to directly
access the conﬁguration registers of a PCI device via the PIO space.
The authors showed that delegating PIO access to userspace or a
guest virtual machine can lead to several attacks, such as privilege
escalation between isolated virtual machines.
According to the literature, KVM emulates PIO accesses (us-
ing QEMU code [32]), thus, accessing directly the conﬁguration
space I/O ports is not possible in normal circumstances. Xen orig-
inally allowed direct access to the PIO conﬁguration space from
Dom0, but this was eventually emulated as well [33]. However, di-
rect access can still be allowed to fully virtualized guests (HVM)
via a guest conﬁguration option. There is no clear conclusion still
(e.g.,[34]) whether certain guest VM conﬁgurations are insecure if
direct PCI/PCIe conﬁguration space accesses are enabled for pass-
through devices.
For this reason, we decided to test this condition to show what
the real risks are in a practical scenario. In our experiments, we
modiﬁed the e1000e network driver to overwrite the PIO Base Ad-
dress Register (BAR) in the conﬁguration address space of arbitrary
309devices (identiﬁed by their source-id) by writing to the 0xcf8 I/O
port. The goal of our test was to address PCI devices that were
invisible from our VM. We tested our attack in various setups as
shown in Table 2, but all cases turned out to be ineffective on cur-
rent Xen and KVM versions. The reason is that PIO conﬁguration
space accesses are always emulated, no matter what conﬁgurations
we used. In other words, we could access only the devices of our
VM, therefore restricting the attack to an intra-guest or intra-host
scenario.
MMIO Attack against the PCIe Conﬁguration Space
PCI Express (PCIe) devices have an extended conﬁguration space
that can be accessed via traditional memory operations (i.e., MMIO).
To test this situation, we implemented a new device conﬁguration
space attack that can be launched via the MMIO with the goal of
manipulating the memory mapped registers of the target device.
Similarly to the PIO access attack, we addressed the PCIe conﬁg-
uration space of the targeted devices by using their source-id [35],
and then tried to modify some of their conﬁguration registers (e.g.,
BAR). Again, we were not able to address devices that were not in
the scope of our VM, thus the attack is limited to an intra-guest or
intra-host scenario.
PIO Overlapping Attack
Zhou et al. [30] proposed several device-related attacks that could
affect already compromised operating systems. For example, PIO
overlapping is similar to the PIO conﬁguration space attack, but in
this case the attacker can only reconﬁgure the conﬁguration space
of a speciﬁc device she controls. In particular, by changing the PIO
BAR register of a directly assigned PCI/PCIe device, an attacker
can overwrite the BAR value with the one of another device at-
tached to another VM. In this way, the device memory of the two
devices will overlap, leading to data ex-ﬁltration from one device
to the other.
To test this attack, we modiﬁed our e1000e PCIe network card
driver by changing the PIO BAR value of the card with the value
of the keyboard. We observed unresponsive keyboard and mouse
under Xen both in case of Dom0 (with dom0-passthrough mode
enabled) and HVM guests. On a KVM host, however, the port
overlapping was successful but without any apparent effect.
In-
terestingly, when the attack was launched from the KVM guest
(HVM-1), the host kernel detected our overlap attempt, and killed
the guest VM instantly. Additionally, the host OS provided a clear
debug message about a hardware error that occurred during the reg-
istration of the I/O port read operation for the keyboard.
MMIO Overlapping Attack
In an MMIO overlapping attack (Figure 1), an attacker controlling
one guest VM with an assigned passthrough device can access the
device memory space of another device attached to another VM.
The attack was implemented by changing the MMIO BAR val-
ues of our PCIe passthrough network card to overlap with the BAR
value of a graphics card. In all conﬁgurations, we observed that
the Ethernet card became unresponsive inside the attacker VM. In
contrast with the previous attack, we did not ﬁnd any mechanisms
implemented in Xen and KVM to notify users about these overlap-
ping I/O memories.
To summarize the results, all the conﬁgurations that we tested are
protected against PIO/MMIO conﬁguration space manipulations in
both Xen and KVM.
Figure 1: MMIO overlapping attack. An attacker on VM1 sets the
MMIO Base Address Register (BAR) value of a passthrough device
(PT device1) to that of another device (PT device 2), assigned to
VM2. As a result of this manipulation, the attacker can get access
to the device memory of PT device 2.
5. UNAUTHORIZED MEMORY ACCESS
In this section, we describe two types of attacks to access pro-
tected memory regions via unauthorized memory device requests.
These attacks can be used to steal and ex-ﬁltrate information in a
cloud environment, or to control devices assigned to other VMs.
Unauthorized MMIO Region Access
A device can be accessed through physical memory in two ways:
using MMIO and using Direct Memory Access (DMA). As the au-
thors mention in [30], an attacker can manipulate the device be-
havior by writing into these memory regions. The attack can be
accomplished in two steps: 1) the attacker remaps an MMIO re-
gion, belonging to a victim device, into a new virtual address by
using ioremap_nocache Linux kernel function, 2) she injects
malicious code/data into the remapped memory region by using the
iowrite32() Linux kernel function. By doing so, the memory
of the victim device is manipulated and can be controlled by the
attacker.
In order to test the protection mechanisms offered by Xen and
KVM, we implemented a proof-of-concept attack in which we over-
wrote the entire MMIO address space of a second network adapter
by modifying the e1000e driver of the attacker network card. As
the second adapter, which had Internet connection, was assigned
to the same VM as the attacker network card, we could access its
MMIO space. In our tests on Xen and KVM guests, the second
adapter’s Internet connection was lost and the guests became iso-
lated from the network.
The same experiment was also performed on our KVM host,
and it completely crashed the operating system. Therefore, we can
conclude that none of the tested VMMs implemented a detection
technique for checking these types of unauthorized memory region
modiﬁcations. However, these attacks only work in intra-guest and
intra-host scenarios.
DMA Attack
User-space processes are prevented from accessing protected mem-
ory regions by a memory controller known as Memory Manage-
310card’s internal TX buffer, and then into the RX buffer thanks to the
loopback mode. Finally, another DMA transaction moves the con-
tent of RX buffer to the receiver buffer in the VM (RXb), making
the data accessible to the driver (and therefore to the attacker). A
similar approach can also be used to perform an arbitrary memory
write operation.
We implemented our DMA attacks by extending the e1000e net-
work driver. It is important to note that DMA remapping was al-
ways turned on during our attack, otherwise we could not have put
the network card into passthrough mode.
We were able to successfully run intra-guest and intra-host DMA
attacks on both VMMs to retrieve the code of the kernel pages of
the guest OS. Considering the guest-to-guest case, we verify that
both VMMs implement DMA remapping correctly and does not
allow inter-guest DMA operations. We obtained the same results
for guest-to-host attacks, as the protection isolated the host address
space, and the guest was redirected to its own address space.
6.
INTERRUPT ATTACKS
In this section, we present a number of interrupt-related attacks.
In particular, we introduce a novel attack that evades all currently
available hardware and software protection mechanisms. After re-
porting this attack to vendors, we concluded that the problem stems
from a misunderstanding between the hardware and software, and
cannot be resolved by existing technologies without limiting plat-
form capabilities. We also describe other unexpected hardware
conditions that we discovered by fuzzing DMA operations.
Interrupt attacks could be used to DoS a VMM or a privileged
VM, or, in more severe cases, even to execute arbitrary code inside
them.
6.1 Abusing Message Signalled Interrupts
Recent PCIe devices generate interrupts by using the Message
Signalled Interrupt (MSI) technology. Wojtczuk et al. [9] demon-
strated that MSIs can also be generated by enforcing a device’s
scatter-gather mechanism during a DMA transaction by writing to
a speciﬁc MMIO space that belongs to the LAPIC (0xfeexxxxx). In
this case, the passthrough device writes speciﬁc information (e.g.,
interrupt vector, and delivery mode) to that predeﬁned interrupt ad-
dress range, which results in an interrupt generation with the preset
interrupt vector. From an attacker’s point of view, MSIs are advan-
tageous as they can be generated without the need to compromise
the ﬁrmware of a device: only the device driver has to be under her
control. Practical interrupt attacks via passthrough devices have
already been discussed in previous works [9], where the authors
showed how an attacker could execute arbitrary code with VMM
privileges by invoking Xen hypercalls from a guest OS.
However, interrupt remapping introduced remappable-format
MSIs, which prevent an attacker from generating MSI interrupts
with arbitrary interrupt vectors (i.e., compatibility-format MSI) as
the numerical path on Figure 3 shows it. The only way to entirely
forbid the generation of compatibility-format MSIs is to switch on
the x2APIC mode (Section 2.4). In our experiments, we observed
that x2APIC mode is turned on by default in KVM, but needs to
be manually selected in older versions of Xen. This is considered
to be the most secure conﬁguration. To the best of our knowledge,
we present here the ﬁrst attack that succeeds when both interrupt
remapping and x2APIC mode are enabled.
Fuzzing the Interrupt Generation
To test for the presence of low-level problems in the interrupt gen-
eration and handling phase, we designed and implemented a tool
called PTFuzz, by extending Intel’s e1000e network driver. PT-
Figure 2: Intra-guest DMA attack. An attacker, controlling VM1,
can read/write arbitrary intra-guest memory locations by a loop-
back mode passthrough device (PT device).
ment Unit (MMU). However, drivers that communicate to PCI/PCIe
devices can directly access any physical memory address space by
using Direct Memory Access (DMA) operations. Since the physi-
cal address space includes the whole system memory, a malicious
driver could potentially read and write the entire memory of the
system. To prevent this from happening, hardware vendors de-
signed an hardware protection mechanism (called IOMMU). As we
already explained in Section 2, IOMMU is a memory management
unit that maps I/O bus addresses to physical memory addresses for
all DMA memory transactions on the bus. The role of the IOMMU
is similar to that of a traditional MMU: 1) it translates the memory
I/O address range of one device to the corresponding real physi-
cal address, and 2) it prevents any unauthorized access from one
device address space to another. Even though the IOMMU es-
tablishes memory barriers among different device address spaces,
which parts of the memory should be assigned to which devices
remains an open research problem [36]. Since it is not clear how
different VMMs deploy such a protection mechanism, we imple-
mented and tested different DMA attacks under three main threat
models: intra-guest, guest-to-guest and guest-to-host.
To launch the attack, we put our passthrough network card into
loopback mode similarly to Wojtczuk [10] to directly connect the
card’s internal transmission buffer (TX) to the receiving buffer (RX)
(i.e., to receive all the packets that were sent by the card). We then