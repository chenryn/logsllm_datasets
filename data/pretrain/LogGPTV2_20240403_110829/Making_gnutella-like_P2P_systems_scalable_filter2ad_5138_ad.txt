0.0005
0.00015
0.00015
CP
0.00025
0.00025
0.00025
0.00025
CP
0.015
0.015
0.015
0.015
Table 3: A search for k responses at r% replication is equivalent
to one for a single answer at r
k % replication.
Table 2 shows the CP for all four system models for a 10,000 node
system at a replication factor of 1%. For RWRT and GIA, higher
values of MAX RESPONSES imply that the query needs to search
through the network longer before it ends. This results in a higher
effective hop-count for each query and as a result causes each query
to utilize more of the available system capacity. As shown by the
CP values in the table, this effectively reduces the overall system
capacity. As expected, varying MAX RESPONSES has no effect on
the SUPER and FLOOD models.
As seen earlier in Figure 3, the collapse point also depends on the
replication factor. When ﬁles are replicated at fewer nodes, queries
must on average visit more nodes to ﬁnd them. As a result, the col-
lapse point drops with decreasing replication factors. In fact, we ﬁnd
that the performance of a query for k MAX RESPONSES at a repli-
cation factor of r is equivalent to that of a query for a single response
at a correspondingly lower replication factor of r
k . This is depicted
in Table 3. With all four system models, searching for 10 answers
at a replication factor of 1.0% yields a CP almost identical to that
obtained by searching for a single answer at a replication factor of
0.1%. Likewise, searching for 20 answers at 1% replication yields
the same CP as searching for a single answer at 0.05% replication.
Given this result, we model the rest of our GIA and RWRT sim-
ulations for simplicity with searches that terminate after ﬁnding the
ﬁrst answer for their queries. This does not change the nature of our
results but makes it simpler to analyze the system and is sufﬁcient to
bring out the signiﬁcant differences between the various designs.
4.5 Factor Analysis
Our results in Section 4.3 indicate that GIA outperforms RWRT,
SUPER and FLOOD by several orders of magnitude in terms of the
query load that it can successfully sustain. We now turn our attention
to looking at how the individual components of GIA (topology adap-
tation, ﬂow control, one-hop replication, and biased random walks)
inﬂuence this performance gain. Many researchers have proposed
schemes for improving Gnutella’s scalability that use one or more
of the GIA components. What distinguishes GIA from most other
schemes is the combination of all of the components into a com-
prehensive system design that, unlike previous work, adapts each
component to be “capacity-sensitive”.
In this section, we show that it is not any single component, but in
fact, the combination of them all that provides GIA this large perfor-
mance advantage. We show that each of GIA’s design components
is vital to its performance, and yet, the addition of any single GIA
component to RWRT does not signiﬁcantly close the performance
gap between GIA and RWRT. We do not consider FLOOD since the
primary design leap from FLOOD to GIA is in the transition from
the use of ﬂoods to the use of random walks, the effect of which is
already captured by the basic RWRT. Similarly, SUPER is just one
step toward the GIA design that includes some amount of one-hop
replication and an ad-hoc awareness of node heterogeneity. Here,
we instead examine the performance of GIA upon removing each of
its four design components one at a time and compare it to the be-
havior of RWRT if we were to add those design components to it one
at a time.
Table 4 shows the result of this factor analysis for 10,000 nodes
at a replication of 0.1%. At ﬁrst glance, one may conclude that
GIA gets most of its performance gain from the one-hop replication,
since removing one-hop replication from GIA severely impacts its
performance. However, adding one-hop replication to RWRT only
improves the CP by a single order of magnitude while GIA as a whole
offers a CP that is over four orders of magnitude greater than with
RWRT. It is the combination of topology adaptation, biased-random
walks and ﬂow-control in addition to the one-hop replication that
gives GIA its enormous performance gain over RWRT.
Biasing the random walk appears to be of little consequence to
GIA’s performance. This is because at high query loads (i.e., close to
CP), the ﬂow-control component serves to divert load towards any
available capacity (which is typically in the high capacity nodes),
and thus functions akin to the biased walks. However, under lower
query loads, when all nodes are lightly loaded, it is the biased walk
that helps to direct queries rapidly to high capacity nodes.
4.6 Effect of Heterogeneity
Since GIA is explicitly designed to be sensitive to node capaci-
ties, we now examine the impact of heterogeneity on system perfor-
mance. Table 5 compares the performance of GIA and RWRT with
node capacities drawn from the Gnutella-like capacity distribution
to the case where all nodes have identical capacities equal to the av-
Algorithm
Collapse Point Hop-count
GIA w/ Gnutella
capacity distribution
GIA w/ uniform
capacity distribution
RWRT w/ Gnutella
capacity distribution
RWRT w/ uniform
capacity distribution
7
2
0.0005
0.0525
15.0
46.0
978
987
Table 5: Impact of heterogeneity; 10,000 nodes, 0.1% replication
erage node capacity from the Gnutella distribution. The CP in GIA
improves when nodes have heterogeneous capacities. In contrast, we
see that RWRT is not tolerant of heterogeneity and the CP drops by
over two orders of magnitude relative to the uniform capacity case.
While the CP-HC remains the same for RWRT in both cases (as one
would expect), the hop-count for GIA drops since the biased random
walks start directing queries towards the high-capacity nodes.
4.7 Robustness
Our results so far have shown that Gia performs signiﬁcantly bet-
ter than previous unstructured P2P ﬁle sharing systems. In this sec-
tion, we show that Gia can sustain this performance in the face of
node failures.
Node failure model. We model node failures by assigning each
node an up-time picked uniformly at random from [0, MAXLIFE-
TIME] where MAXLIFETIME is a simulation parameter. When a
node’s up-time expires, the node resets. That is, it disconnects from
its neighbors, shuts down, and immediately rejoins the system by
connecting initially to a random number of neighbors. This is simi-
lar to modeling existing nodes shutting down and leaving the system
while other new nodes are simultaneously joining the system. When
a node shuts down, any queries it has queued locally are dropped and
resumed by the nodes that had originally generated them.10 Finally,
as nodes join and leave the system, the topology adaptation over-
head is captured by the fact that each node’s adaptation operations
consume capacity within the node.
Figures 5 and 6 plot the CP and CP-HC, respectively, for a 10,000
node Gia system under increasing MAXLIFETIME. We see that, rel-
ative to the static case, the CP drops by approximately an order of
magnitude as the MAXLIFETIME is reduced to 10.0 time units, while
the hop-count rises by approximately a factor of ﬁve. Note that at
a MAXLIFETIME of 10 time units, approximately 20% of the nodes
reset in every time unit.11 Even under this extremely stressful test,
GIA’s performance drops only by less than one order of magnitude.
This is still an improvement of 2-4 orders of magnitude over RWRT,
SUPER and FLOOD under static conditions.
4.8 File Downloads
The results presented above indicate that Gia can support signif-
icantly higher query loads than previously proposed approaches for
distributed ﬁle searching and can maintain this performance advan-
tage even in the face of high node churn. Gia’s dramatic perfor-
mance improvement stems from its unique combination of design
components and its ability to funnel work to high capacity nodes in
the system.
Our results thus lead us to conclude that search in decentralized
10The exact mechanisms for implementing query restart in a real sys-
tem are discussed in Section 5.3.
11Compare this to typical Gnutella node life-times of 60 min-
utes [22].
i
)
s
p
q
(
t
n
o
P
e
s
p
a
l
l
o
C
100
10
1
0.1
10.0
replication rate=1.0%
replication rate=0.5%
replication rate=0.1%
100.0
1000.0
Maxlife (seconds)
no failures
Figure 5: Collapse Point under increasing MAXLIFETIME for a
10,000 node GIA system
i
t
n
o
P
e
s
p
a
l
l
o
C
t
a
t
n
u
o
C
p
o
H
 60
 50
 40
 30
 20
 10
 0
replication rate=1.0%
replication rate=0.5%
replication rate=0.1%
10.0
100.0
1000.0
Maxlife (seconds)
no failures
Figure 6: Hop Count under increasing MAXLIFETIME for a
10,000 node GIA system
P2P systems need no longer pose insurmountable scaling problems.
If so, we conjecture that the next bottleneck limiting scalability is
likely to be the ﬁle download process. This will be particularly true
if, as recent measurement studies indicate, ﬁle sizes continue to in-
crease [21]. We believe that Gia’s ability to harness capacity in a
manner that is sensitive to the constraints of individual nodes can
have a beneﬁcial impact on downloads as well. Even as is, Gia aids
downloads to the extent that users are typically directed to a high-
capacity copy of a ﬁle if one exists. However this advantage is un-
likely to be signiﬁcant unless high capacity nodes also store more
ﬁles. Thus, for Gia to be able to assist in ﬁle downloads, we would
have to extend the one-hop replication used in Gia to allow the ac-
tive replication of the ﬁles themselves (rather than simply pointers
to ﬁles). A simple form of active replication would be for over-
loaded low capacity nodes to replicate popular ﬁles at the higher
capacity nodes in their one-hop neighborhood. This can be done in
an on-demand fashion where the high-capacity nodes replicate con-
tent only when they receive a query and a corresponding download
request for that content.
To gauge the extent to which such active replication might be use-
ful, we did a simple calculation of the total capacity of all the nodes
at which a given ﬁle is available with and without this active repli-
cation scheme. The resultant numbers are listed in Table 6. We see
that active replication increases the total capacity of nodes serving a
given ﬁle by a factor of between 38 to 50. This appears promising,
although one would need signiﬁcant more analysis and simulations
to validate the usefulness of this approach.
5.
IMPLEMENTATION AND PRACTICAL
DETAILS
We implemented a prototype Gia client that incorporates all of the
algorithms presented in Section 3. The client, which was written in
% Replication
Gia
Gia with active
0.1%
0.5%
1.0%
965
4,716
9,218
replication
48,682
213,922
352,816
Table 6: Total capacity of all the nodes offering a given ﬁle with
and without active replication for a 10,000 node GIA network
Let Ci represent capacity of node i
if num nbrsX  1.0 or num nbrsX ≥ max nbrs then
S ←1.0
return S
total ←total +
num nbrsN
CX
CN
Algorithm 2: satisf action level(X)
Computes how “satisﬁed” node X is. Returns value between 0.0 and
1.0. 1.0 ⇒ node X is fully satisﬁed, while 0.0 ⇒ it is completely
dissatisﬁed. Values in between represent the extent of satisfaction.
C++, provides a command-line-based ﬁle sharing interface. In this
section, we discuss some of the systems issues that our prototype
implementation addresses.
5.1 Capacity settings
In our discussion so far, we have assumed that a node’s capacity
is a quantity that represents the number of queries that the node can
handle per second. For low-bandwidth clients, query processing ca-
pacity is limited by the client’s access bandwidth. On the other hand,
for nodes with high-speed access connections, other issues such as
the speed of the CPU, disk latencies, etc. may affect the capacity.
Our prototype implementation ignores the effects of CPU speed and
disk latency on query capacity. We assume that capacity is a di-
rect function of the access bandwidth. A node can either have its
end-user conﬁgure its access bandwidth (via a user interface, as is
done in many Gnutella clients), or automatically determine the ac-
cess bandwidth by executing a conﬁguration script that downloads
large chunks of data from well-known sites around the Internet and
measures the bandwidth based upon the average time taken for the
downloads.
In addition, the advertised capacity of nodes can be
weighted by how long the node has been in the system. This ensures
that the well-connected high-capacity core of the network is com-
posed of mostly stable nodes. In future implementations, we plan
to experiment with auto-conﬁguration scripts that take into account
other factors in addition to network bandwidth and node life-times
in order to determine client capacity.
5.2 Satisfaction Level: Aggressiveness of Adap-
tation
In Section 3.2.1, we introduced the notion of satisfaction level
for a client. The satisfaction level determines not only whether
or not to perform topology adaptation, but also how frequently it
should be executed. It is a function of pre-conﬁgured min nbrs and
max nbrs parameters, the node’s current set of neighbors, their ca-
pacities and their degrees. Neighbors exchange capacity information
when they initially connect to each other, and periodically update
each other with information about their current degree. Algorithm 2
shows the steps involved in calculating the satisf action level(). It
is essentially a measure of how close the sum of the capacities of all
)
s
d
n
o
c
e
s
(
l
a
v
r
e
t
n
I
n
o
i
t
a
t
p
a
d
A
10
8
6
4
2