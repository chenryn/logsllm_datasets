### Transformation of Grammar Families into Generalized Grammars

These families of grammars are transformed into generalized grammars, each corresponding to a non-terminal node in the ontology for all intentions. It is assumed that if the value of the production condition is not determined at the moment of production selection, all available productions may be used at the respective step of attack simulation. Additionally, it is supposed that the terminal actions generated by these productions are associated with the probabilities of successful realization of those actions (attacks) and the host response.

### Example: Grammars for the Intention "Users and Groups Enumeration" (UE)

#### Level “Network Attack”
- **Non-Terminal Symbols (VN)**: {A, A1}
- **Terminal Symbols (VT)**: {R}
- **Start Symbol (S)**: {A}
- **Productions (P)**:
  - \( A \rightarrow A1 \) (probability: 1)
  - \( A1 \rightarrow R \) (probability: 0.3)

#### Level “Reconnaissance”
- **Non-Terminal Symbols (VN)**: {R, R1}
- **Terminal Symbols (VT)**: {UE}
- **Start Symbol (S)**: {R}
- **Productions (P)**:
  - \( R \rightarrow R1 \) (probability: 1)
  - \( R1 \rightarrow UE \) (probability: 0.7)
  - \( R1 \rightarrow UE \, R1 \) (probability: 0.3)

#### Level “Users and Groups Enumeration”
- **Non-Terminal Symbols (VN)**: {UE, UE1, UE2, UE3, UE4}
- **Start Symbol (S)**: {UE}
- **Terminal Symbols (VT)**: {DNNT, EUE, PIUD, IAUS, SNMPE, FUE, UTFTP}
- **Productions (P)**:
  - For Windows 9x, Me, NT, 2000:
    - \( UE1 \rightarrow SNMPE \) (probability: 0.25)
    - \( UE1 \rightarrow SNMPE \, UE1 \) (probability: 0.05)
    - \( (NS)UE1 \rightarrow UE2 \, UE1 \) (probability: 0.05)
    - \( (&)UE2 \rightarrow CNS \, UE3 \) (probability: 1)
    - \( UE3 \rightarrow DNNT \) (probability: 0.2)
    - \( UE3 \rightarrow DNNT \, UE4 \) (probability: 0.05)
    - \( UE3 \rightarrow IAUS \) (probability: 0.35)
    - \( UE3 \rightarrow EUE \) (probability: 0.2)
    - \( UE3 \rightarrow PIUD \) (probability: 0.2)
    - \( UE4 \rightarrow DNNT \, UE4 \) (probability: 0.1)
    - \( UE4 \rightarrow DNNT \) (probability: 0.9)
  - For Unix/Linux:
    - \( (Unix, Linux)UE \rightarrow UE1 \) (probability: 1)
    - \( UE1 \rightarrow FUE \) (probability: 0.3)
    - \( UE1 \rightarrow SNMPE \) (probability: 0.2)
    - \( UE1 \rightarrow UTFTP \) (probability: 0.1)
    - \( UE1 \rightarrow FUE \, UE1 \) (probability: 0.1)
    - \( UE1 \rightarrow SNMPE \, UE1 \) (probability: 0.1)
    - \( UE1 \rightarrow UTFTP \, UE1 \) (probability: 0.2)

#### Level “Identifying Accounts with user2sid/sid2user”
- **Non-Terminal Symbols (VN)**: {IAUS, IAUS1, IAUS2}
- **Terminal Symbols (VT)**: {ISU, IAS}
- **Start Symbol (S)**: {IAUS}
- **Productions (P)**:
  - \( (NT)IAUS \rightarrow IAUS1 \) (probability: 1)
  - \( (&)IAUS1 \rightarrow ISU \, IAS \) (probability: 0.8)
  - \( IAUS1 \rightarrow IAUS1 \, IAUS2 \) (probability: 0.2)
  - \( (&)IAUS2 \rightarrow ISU \, IAS \) (probability: 1)

### Denotations
- **A**: Network Attack
- **R**: Reconnaissance
- **UE**: Users and Groups Enumeration
- **DNNT**: Dumping the NetBIOS Name Table with nbtstat and nbtscan
- **EUE**: Enumerating Users with enum
- **PIUD**: Providing Information about Users with DumpSec (DumpACL)
- **IAUS**: Identifying Accounts with user2sid/sid2user
- **SNMPE**: SNMP Enumeration with snmputil or IP Network Browser
- **FUE**: Finger Users Enumeration
- **UTFTP**: Use of Trivial File Transfer Protocol for Unix enumerating by stealing /etc/passwd and (or) /etc/hosts.equiv and (or) ˜/.rhosts
- **ISU**: Identifying SID with user2sid
- **IAS**: Identifying Account with sid2user using user’s RID
- **A1, R1, UE1, UE2, UE3, UE4, IAUS1, IAUS2**: Auxiliary symbols

### Algorithmic Interpretation
The algorithmic interpretation of the attack generation, specified as formal generalized grammars, is implemented by a family of state machines. Each state machine consists of states, transition arcs, and explanatory texts for each transition. States are categorized into three types: initial, intermediate, and final (marked as "End"). Initial and intermediate states include non-terminal, terminal, and auxiliary states. Transition arcs are identified with the productions of the grammars. The model of each state machine is defined by specifying the following elements: diagram, main parameters, transition parameters, executable scripts, and transition conditions.

### Formal Model of the Attacked Computer Network
The development of an attack depends on the attacker's skill, information about network characteristics, and other attributes. The attack is an interactive process where the network reacts to the attacker's actions. The computer network serves as the environment for the attacker, and its model is a part of the attack simulation tool.

The attacker's strategy evolves based on the results of intermediate actions, making it impossible to generate the complete sequence of actions from the beginning. The proposed context-free grammar syntax allows the model to generate no more than a single terminal symbol at each inference step, which can be interpreted as an attacker's action. The network returns the result (success or failure), and the attacker's model generates the next action based on this feedback.

The model of the attacked computer network is represented as a quadruple \( M_A = (MCN, \{MHi\}, MP, MHR) \), where:
- **MCN**: Model of the computer network structure
- **{MHi}**: Models of the host resources
- **MP**: Model of computation of the attack success probabilities
- **MHR**: Model of the host reaction in response to the attack

### Implementation of the Attack Simulator
A software prototype of the attack simulator has been implemented for validating the formal framework. It consists of three components: the model of the attacker, the model of the attacked computer network, and a background traffic generator. The common traffic generated by integrating data from these components can be used for evaluating and training Intrusion Detection Systems (IDSs).

Each component of the attack simulator is built as an agent in a multi-agent system (MAS). The design and implementation are based on MASDK, a Multi-Agent System Development Kit. All agents have the same architecture, with differences in their data and knowledge bases. Agents interact with each other, the environment, and the user through an interface.

The meta-state machine manages the semantic processing of input messages, directing them to the appropriate state machines. The basic computations are executed by a set of state machines, and the output result depends on the input message content and the inner state of the state machine. The inner state of the state machine reflects the prehistory of its performance, which is stored in the agent's knowledge base and database.

The screen visualization of the attack development for the intention "Gaining Access to Resources" (GAR) is depicted, showing the reconnaissance stage after the execution of the action "Enumerating Users with enum" (EUE). The information is divided into four groups: attack task specification units, attack generation tree, strings of the attacker's actions, and tags of success (failure) with data obtained from the attacked host.

From an implementation perspective, a computer network attack can be considered a sequence of coordinated actions by spatially distributed attackers. Each attacker is modeled as an intelligent agent with similar functionality. During the attack, these agents interact via message exchange to coordinate their activities. Messages are represented in KQML (DARPA standard) and XML.

We are currently developing a teamwork interpretation of the attackers' activity for performing distributed attacks based on joint intention theory. For complex coordinated attacks, a special meta-agent will form the common scenario and assign areas of responsibility to other agents based on the general attack goal set by the simulation tool user. Agents responsible for specific steps can employ other agents or perform operations independently.