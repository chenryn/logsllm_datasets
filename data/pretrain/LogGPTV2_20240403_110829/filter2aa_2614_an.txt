查看相关信息，比如请求的URL路径、请求参数、响应状态码以及
ReadyAPI发送的payloads信息。如图5-18所示为XSS检测时所发送的某
一条攻击向量内容。
●图5-18 XSS检测时的攻击向量
为什么要做特殊场景的验证呢？这要从API技术特性和SoapUI安全
扫描的自身弱点说起。在API技术栈中，服务器端和客户端通信使用的
数据格式大多数是XML和JSON。这类具有对象性质的数据结构比传统
的URL请求参数的结构要复杂得多，面对这样的结构，很多自动化扫描
工具无法做正确的分析，SoapUI虽然能支持，但也并不是十分理想。如
果请求参数的数据格式为JSON格式，在SoapUI提供的若干安全能力
中，各个能力下的JSON数据格式支持的效果也是不一样的。
以JSON Fuzz能力为例，SoapUI能识别JSON对象中的各个属性和属
性值，并把属性值替换为payloads；但在SQL注入中，同样的JSON格
式，SQL注入的payloads往往仅添加在第一个属性的属性值，其他的属
性或属性值为子JSON对象时，将无法设置payloads，这就导致扫描不充
分，存在遗漏的情况。又如，针对授权认证的自动化检测，SoapUI过多
地关注于会话级的认证（比如sessionID、cookie值），而缺少API认证
授权中特有的认证授权协议的安全分析（比如OAuth 1.0或OAuth 2.0协
议），这就存在遗漏的情况。再如，SoapUI的敏感信息泄露检测，更多
的还是基于传统的安全扫描思路，检测.htaccess、.ssh的文件、.svn的文
件，而对API消息中的敏感数据、API认证的apikey等敏感数据缺失有效
的检测手段，面对这些场景，就需要使用Burp 
Suite来进行特殊场景的
验证。
上一章中介绍了很多Burp 
Suite的插件，这些插件有助于安全人员
快速地分析问题。对于API认证与授权的检测是自动化渗透测试的一个
难点，如果是使用facebook.com、live.com、live.net、contoso.com、
persona.org这几个域名做的SSO认证，推荐使用EsPReSSO插件，它支持
OpenID、OAuth、SAML等认证协议分析，同时支持WS-Attacker、
DTD-Attacker、XML-Encryption-Attacker三种攻击类型的检测。
水平越权和垂直越权的检测也是自动化渗透测试中的难点，在API
安全中按照OWASP API安全风险的划分可以映射到API1-失效的对象级
授权和API5-失效的功能级授权。这类场景的渗透，推荐Autorize插件和
Autorepeater插件联合使用。Autorize插件的功能是分别使用两个不同权
限的账号（比如一个高权限账号，一个低权限账号）来对比分析，检测
是否存在越权问题；而Autorepeater插件则充当自动化发起请求验证的
功能，代替不断的手工验证，从而加快检测效率。
在API技术中，每一种不同的技术实现也对应多种不同的特殊场
景，例如REST 
API中的JSON数据格式、SOAP 
API中的XML数据格
式、GraphQL API的自省查询等，这些在Burp Suite都提供了很好的功能
支持。而对应Burp 
Suite的使用，网络上有很多公开的资料，感兴趣的
读者可以自行搜索学习。
除了SoapUI+Burp Suite的组合外，Postman+Burp Suite的组合也常
常在渗透测试中使用到，但考虑到使用方法十分类似，在此不再赘述，
感兴趣的读者请自行尝试。
5.4.2 Astra工具使用介绍
Astra是API安全工具中的后起之秀，因其集成了SQLMAP、
OWASP 
ZAP两个工具以及其自身的多个安全检测模块，在API安全检
测方面也很受用户青睐。在上一章中已经做了简要介绍，本节将从工具
安装、主要参数说明、典型场景验证三个方面为读者详细地讲解其使用
方式。
1.工具安装
Astra是Python运行环境的工具软件，在安装Astra之前需要先安装
Python和MongoDB，默认版本Python 2.7。Python和MongoDB的安装在
这里就不为读者讲述了，这里主要介绍Linux环境下安装Astra的安装过
程。
Astra的安装方式可分为普通文件安装和Docker安装，下面的讲述以
普通文件安装为例。Astra的安装分为以下几个步骤。
1）安装依赖，此操作的目的是安装Astra运行所需要的依赖类库。
安装时，直接输入的命令行为：
当执行安全依赖的命令后，其界面如图5-19所示。
●图5-19 Astra依赖库安装
2）启动MongoDB，查看MongoDB启用情况，如图53-20所示，
MongoDB已启动27017端口监听。
●图5-20 启动MongoDB
3）执行astra.py，验证安装是否成功，其命令行如下。
如果读者看到命令执行后出现图5-21所示的提示界面，则表示Astra
已安装成功。这个时间，如果使用管理控制台，则执行如下命令行，如
图5-22所示。
●图5-21 Astra安装验证
●图5-22 Astra启动控制台
控制台启动完成后，访问当前主机的9084端口，即
http://127.0.0.1:8094，进入控制台管理界面，如图5-23所示。
●图5-23 Astra控制台管理界面
以上就是Astra普通文件方式的安装过程，操作非常简单，但在安装
和使用过程中仍需注意以下事项。
■ 因为Astra程序是23018年公开的，考虑程序的兼容性，在可以使
用Python2.7.13版本的情况下尽量使用此版本。
■ 使用pip时，pip的版本尽量低于10.0.0，以减少pip版本升级带来的
找不到main函数的问题。
■ Astra的功能、易用性与商业化的API产品还是存在不小的差距，
作为一款替代性的开源产品，安装使用过程中遇到的各种问题仍需要读
者自己动手去解决。
2.主要参数说明
当读者在Astra目录下，执行python astra.py -help命令时，会自动显
示Astra的主要参数，如图5-24所示。
Astra命令行的基本用法为：
●图5-24 Astra使用帮助说明
各个参数的含义分别介绍如下。
■ -h或--help，此参数的作用是命令行帮助，使用此参数可以显示
所有命令行参数及具体使用描述，如图5-24所示。
■ -c或--collection_type，此参数用来标识需要解析的API规范描述
文件的类型，默认值为postman。这里的类型是指Postman工具导出文
件、Swagger文件、WSDL文件等，目前Astra仅实现了对Postman工具的
支持，仅支持默认值，其他值是无效的。
■ -n或--collection_name，此参数后跟需要解析的Postman文件名，
即从Postman工具中导出的文件名，在这里为当前文件的全路径或相对
路径。比如文件名为postman.json的文件存放在与astra.py相同的目录
下，则命令行为python astra.py-n postman.json。
■ -u或--URL，此参数与大多数扫描器一样，参数后跟URL地址，
标明需要扫描的请求路径。
■ -headers，此参数用于需要添加HTTP Header字段时使用，参数
后跟的字段值为JSON格式。例如，-headers{"token":"123"}。
■ -method，此参数表示请求使用的HTTP方法，默认为GET方法，
可以使用此参数设置为GET、POST、PUT、DELETE等。
■ -b或--body，此参数用于标识API请求时Body的数据值。
■ -l或 --loginurl，此参数用于API扫描时需要登录的场景，参数后
跟登录的URL地址。
■ -H或--loginheaders，此参数通常用于存放HTTP Header字段中
的登录标识，例如，{"accesstoken":"axzvbqdadf"}。
■ -d或--logindata，此参数与--loginurl对应，用于登录URL时需要
携带的参数值，比如登录需要的用户名和密码。
从参数的定义可以看出，-c和 -method参数具有默认值，只有在非
默认值才需要设置。-n和 
-u参数是使用最为广泛的，用户可以通过
Postman文件和URL两种方式启动扫描。最后三个参数都与登录相关，
只有在登录的场景下才会使用到。对于Astra的这些命令行参数，在渗透
测试中，通常都会组合使用，少数情况下会单独使用某一个参数，接下
来将为读者演示特殊场景下组合参数的使用。
3.典型场景验证
使用Astra进行API安全扫描有两个入口方式：命令行界面和Web网
页界面。命令行方式在前文已对所有参数作了详细介绍，而Web网页方
式目前仅支持单个URL地址的请求提交，使用十分简单，读者可以自行
操作，这里重点讲述命令行方式下特殊场景的使用。
Astra的扫描执行过程和其他扫描类似，当启动命令行后，扫描引擎
首先加载和解析配置信息，接着对API列表调用不同的检测方法，比如
SQL注入检测、XSS检测、XXE检测等，最后扫描结果存入数据库，用
户可以访问Web网页进行查看。当然，在命令行的控制台或logs扫描日
志中也可以查看扫描结果。下面从典型的业务场景演示Astra命令行的使
用。
■ 使用Postman文件扫描。在启动命令行之前，需要将从Postman中
导出的文件放到Astra所安装的机器上，然后使用 
-n参数，指定文件路
径，执行命令行如下所示：
■ 设置http header字段值，扫描某个指定API。其命令行如下：
■ 扫描某个登录后的指定API，比如创建用户，需要输入用户名、
邮箱、国籍，其命令行如下：
除了上面演示的三种常用使用方法外，Astra还有一些关键的配置，
主要有扫描配置和系统配置两个属性配置文件，这两个属性配置文件对
应的配置文件相对路径分别为Astra\utils\scan.property和
Astra\utils\config.property。scan.property属性配置文件中的内容包含扫描
是否启用配置模块和扫描关键字模块，这里主要来看看扫描功能是否
启用配置模块，因它涉及具体场景下使用哪些功能来进行扫描。其包含
的属性配置项如下：
每一个属性配置项是由键值对构成，key值为扫描功能，value值为y
或n，如果设置为y表示启用此扫描功能，如果设置为n表示不启用此扫
描功能。这个属性配置文件是使用时需要关注的一个点。
对于系统属性配置文件config.property，重点需要关注OWASP ZAP
攻击代理zap配置模块和登录login配置模块两块。zap配置模块由ZAP代
理IP地址、ZAP代理端口以及ZAP的apikey三个属性配置构成；login配
置模块包含内容比较多，例如，登录方式、登录URL、登录认证成功的
Token等。默认情况下，OWASP ZAP攻击代理功能是不启用的，如果需
要启用此功能，需要打开scan.property中的zap配置项，并设置
config.property文件中的zap配置项，这是使用时需要关注的第二个点。
5.5 小结
本章主要为读者介绍了API渗透测试的基本流程，与普通的Web渗
透测试流程相比，API渗透测试并没什么不同，至于差异更多的是在技
术细节上。通过API渗透测试特点章节中对RESTful 
API、GraphQL
API、SOAP API、Protobuf等常用API技术渗透测试中的关键特性介绍，
更好地帮助读者理解为什么更多的是技术细节上的差异。在本章的最
后，介绍了API渗透测试过程中几种安全工具的典型使用方法，给渗透
测试人员提供了自动化渗透测试的导入思路。