between 
these 
extensions thus literally cannot exist in a server that lacks 
the  extension.  We  called  these  “dialect-specific” bugs. 
For example, Interbase bug 217138 [8] uses the UNION 
operator in views, which PostgreSQL 7.0.0 views do not 
offer,  and  thus  cannot  be  run  in  PostgreSQL:  it  is  a 
dialect-specific bug. 
Another  “reproducibility”  issue  arises  when  a  bug 
script  does  not  cause  failure  in  the  server  for  which  the 
bug  was  reported.  We  called  these  bugs  Heisenbugs, 
borrowing Gray’s terminology [10]. We intend to run the 
Heisenbugs  again 
simulated 
environment [21] (with multiple clients and large number 
of  transactions)  to  see  whether  repeated  trials  will  give 
incorrect results.  
in  a  more 
stressful 
4. Quantitative results
4.1. Detailed results
In  total  we  included  in  the  study  181  bug  reports:  55 
for Interbase, 57 for PostgreSQL, 51 for MSSQL and 18 
for  Oracle.  Out  of  these  181  bugs,  76  were  “dialect-
specific” (could be run in only one of the four servers); 47 
could  be  run  in all four servers; 26 could be run in only 
two servers and 32 in only three servers.    
Each  bug  was first run on the server for which it was 
reported,  and  (after  translating  the  script  into  the  SQL 
dialect of the respective server) on the other servers.  The 
bugs were classified into dialect-specific and non-dialect-
specific  bugs;  the  latter  were  then  further  classified  into 
Bohrbugs  or  Heisenbugs  as  explained  previously.  The 
failures  were  also  classified  into  different  categories 
according to their effects, as different failure types require 
different recovery mechanisms:
Engine Crash failures: crashes or halts of the core engine. 
Incorrect Result failures: incorrect outputs without engine 
crashes:  the  outputs  do  not  conform  to  the  server’s 
specification or to the SQL standard.  
Performance  failures:  correct  output,  but  with  an 
unacceptable time penalty for the particular input. 
Other failures. 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:18:53 UTC from IEEE Xplore.  Restrictions apply. 
the  failures  according 
We  also  classified 
detectability by a client of the database servers:  
Self-Evident failures: engine crash failures, cases in which 
the server signals an internal failure as an exception (error 
message) and performance failures. 
Non-Self-Evident
without server exceptions within an accepted time delay. 
incorrect 
failures: 
failures, 
to 
their 
result 
Table  1  contains  the  results  of  this  step  of  the  study. 
Each  grey  column  lists  the  results  produced  when  the 
bugs reported for a certain server were run on that server. 
For  example,  we  collected  55  known  Interbase  bugs,  of 
which,  when  run  on  our  installation  of  the  Interbase 
server,  8  did  not  cause  failures  (possible  Heisenbugs). 
The  47  bugs  that  caused  failures  are further classified in 
the  part  of  the  column  below  the  double  vertical  lines, 
after  the  “Failure  observed”  row.  All  the  performance 
failures  and  all  the  engine  crashes  are  self-evident. 
Incorrect Result failures and “Other” failures can be self-
evident  or  non-self-evident  depending  on  whether  the 
server gives an error message.  
The three columns to the right of the grey one present 
the results of running the Interbase bugs on the other three 
servers. For example, we can see that 23 of the Interbase 
bugs cannot be run in PostgreSQL (dialect-specific bugs). 
Then  we  have  the  bugs  that  “require  further  work”:  this 
means that we have not managed yet to translate the bug 
script  in  the  PostgreSQL dialect of SQL, or are listed as 
“performance  bugs”  but  we  could  not  decide  whether 
performance  improves  by  changing  servers.  We  plan  to 
resolve this uncertainty via a testing infrastructure [21] to 
measure the precise execution times of the queries. 
Out  of  55  Interbase  bugs  we  managed  to  run  27  in 
PostgreSQL;  only  one  caused  a  failure  in  both  Interbase 
and  PostgreSQL.  This  particular  failure  was  a  non-self-
evident incorrect result as can be seen from the table.  
As  for  the  failure  types,  we  can  see  that  most  of  the 
bugs cause incorrect result failures. This will be discussed 
further in the Section 6. 
We  observed  a  higher  number  of  Heisenbugs  in 
MSSQL  and  Oracle  than  in  the  other  servers.  This  was 
documented by some of the bug reports, which indicated: 
“may cause a failure”. 
Table 1. Results of running the bug scripts on all four servers. IB stands for Interbase, PG
for PostgreSQL, OR for Oracle and MS for MSSQL 
Total bug scripts 
55
55 
55 
55 
57
57 
57 
57 
18
18 
18 
18 
51
51 
51 
51 
IB PG  OR MS PG IB OR MS OR IB MS PG  MS IB OR PG 
Bug script cannot be run 
(Functionality Missing) 
Further Work 
Total bug scripts run 
No failure observed 
Failure observed 
n/a  23 
n/a 
55
8
47
5 
27 
26 
1
s
e
r
u
l
i
a
f
f
o
s
e
p
y
T
 Poor Performance 
Engine Crash 
Incorrect 
Result 
3
7
4
Self-evident 
Non-self-evident 23
2
Self-evident 
8
Non-self-evident
Other 
0 
0 
0 
1
0 
0 
20 
4 
31 
31 
0
0 
0 
0 
0
0 
0 
16  n/a  32 
6 
33 
31 
2
n/a 
57
5
52
2 
23 
23 
0 
0 
0 
1
1
0 
0 
0
11
14
20
2
5
0 
0 
0 
0 
0 
0 
27 
0 
30 
30 
0 
0 
0 
0 
0 
0 
0 
24  n/a  13 
13 
12  n/a  36 
0 
33 
31 
2
n/a 
18
4
14
0 
0 
1
1
0 
0 
1
3
3
7
0
0
1 
4 
4 
0 
0 
0 
0 
0 
0 
0 
1 
4 
4 
0 
0 
0 
0 
0 
0 
0 
2 
4 
3 
1
0 
0 
0 
1
0 
0 
n/a 
51
12
39
3 
12 
11 
1
6
5
10
17
1
0
0 
0 
0 
1
0 
0 
32 
7 
12 
12 
0
0 
0 
0 