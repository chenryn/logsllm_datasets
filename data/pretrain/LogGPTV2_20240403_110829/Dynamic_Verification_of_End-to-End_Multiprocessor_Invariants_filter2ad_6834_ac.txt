(
) … S N 1–
,
∑
,(
S i nT c
false, otherwise
=
,
i
)
]
nT c
)
0≠
(EQ 2)
y
r
o
m
e
m
r
e
l
l
o
r
t
n
o
c
ReqForExclusive
WritebackExclusive O,M
address not at home
The update function, UCL, should be commutative since
this invariant does not consider ordering of upgrades and
downgrades. We just care that the system meets the coher-
ence invariants within the checkpoint interval, but there are
no ordering requirements within the interval
itself. The
update function, UCL, is a function of the address of the
coherence request, Addr(E), i.e., Addr(E) is the constant that
is added/subtracted for each upgrade/downgrade event.3 An
upgrade adds Addr(E) to S(i,k-1), and a downgrade subtracts
and
Addr(E)
WritebackExclusive coherence requests, the update process
is simple, since there is one upgrader and one downgrader.
For a RequestForShared, the owner who satisﬁes the request,
which could be memory, is the downgrader. However, since a
single RequestForExclusive upgrade can cause multiple
downgrades, we would need to multiply the added address
by the number of controllers that should downgrade.
For RequestForShared
from S(i,k-1).
The challenge in developing this checker is that
the
upgrader does not necessarily know how many downgraders
exist. Temporarily ignoring the possibility of silent down-
grades from Shared (WritebackShared requests), we can
solve this problem by having the response from the owner to
the upgrader (i.e., the data or the acknowledgment) include
3. To avoid inherent aliasing due to situations in which Addr(E)=0, we can
use more sophisticated constants, such as Addr(E) recoded to have an equal
number of zeros and ones. To simplify notation, though, we simply use
Addr(E) in this discussion.
a. Shaded entries are updates with no effect, i.e., S(i,k) = S(i,k-1).
the number of downgraders, since the owner can keep track
of this number. However, most current protocols do allow
silent WritebackShared requests, so we solve this problem
differently. Our solution to not knowing the number of
downgraders for a RequestForExclusive is to assume that all
other cache controllers and the home memory controller are
downgraders. As shown in Table 1, a RequestForExclusive
requestor increments by the request’s address multiplied by
the number of nodes in the system (P), and the other P-1
cache controllers and the home memory controller decre-
ment by the address (regardless of whether they have the
block). A RequestForShared requestor increments by the
address, and the owner who satisﬁes the RequestForShared
request (either the memory controller or a cache controller in
O or M) decrements by the address. A WritebackExclusive
requestor decrements by the address and the memory con-
troller increments by the address now that it is the owner. All
of these transactions sum to zero if no errors occur, as shown
in the equation for CCL.
The primary cost of this signature analysis scheme is
extra hardware, since the latency of performing the signature
analysis is hidden. A controller holds the current value of its
signature in an additional register. Each controller also
requires hardware for re-computing the signature upon the
arrival of every coherence request. Thus, they each need an
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:12:52 UTC from IEEE Xplore.  Restrictions apply. 
adder and a multiplier, but the multiplier need only multiply
by P and therefore is not a full 64-bit multiplier.
Summary. This signature analysis scheme detects all single
instances in which a coherence transaction incurs a mis-
matched number of coherence upgrades and downgrades.4
For example, it can detect if a sharer did not downgrade per-
mission to a block after receiving an invalidation. Without
global information, a system cannot detect this fault. It also
detects many multiple error situations, although not all. For
example, a byzantine fault that caused an upgrader to down-
grade and a downgrader to upgrade would go undetected.
6  Checking Message-Level Invariants
In this section, we develop a signature analysis scheme
for detecting message-level errors. The end-to-end invariant
we check is that every cache and memory controller observes
the same total order of broadcast requests. We will show that
this invariant checker can detect corrupted, dropped, or reor-
dered messages.
We ﬁrst develop a simpliﬁed update function, UML, and
we will gradually describe a more sophisticated example that
reduces inherent aliasing. A simple update function, UML,
adds the address of the kth coherence request, Addr(E), to the
current value of the signature, S(i,k-1).
[
1–,(
) E,
]
1–,(
S i k
) Addr E(
+
=
U ML S i k
The check function, CML, detects if any of the N coher-
ence controllers (N=2P) did not observe the same sequence
of broadcasts as the rest of the components:
(EQ 3)
)
CML S 0 nT c
[
,(
(
) … S N 1–
,(
) S 1 nT c
,
,
,
,
) … S N 1–
)
,(
,(
,
=
=
false if S 0 nT c
S 1 nT c
tr ue ,  otherwise
nT c
=
)
]
(
,
=
(EQ 4)
)
nT c
Combining CML with this simple UML detects corrupted
messages, some lost messages, but not reordered messages.
First, we discuss inherent aliasing that hides lost messages.
Imagine the case in which a fault causes cache controller i to
lose an incoming address message for address 22, and this
th message. Moreover, the Tc+1th message is also
was the Tc
for address 22. At this point, cache controller i computes the
“correct” signature and sends it to the centralized checker,
and the check does not detect this error due to aliasing. A
simple solution to this problem is to compute UML based on
more ﬁelds of the message than just the address, such as the
requestor (Req(E)) and requestor’s transaction ID (ID(E))5,
for example. We denote concatenation with a vertical line.
[
U ML' S i k
]
1–,(
) E,
)
1–,(
S i k
=
(
Addr E(
) Req E(
) ID E(
)
)
+
(EQ 5)
The scheme described thus far still suffers from inherent
aliasing that may not detect reordered messages, an error that
was discussed earlier as being possible due to switched inter-
connects. An update function based on addition, which is
commutative, will not detect these errors, since adding Mes-
sage A before Message B produces the same signature as
adding them in the other order. To avoid this form of inherent
aliasing requires a non-commutative function UML, such as:
U ML'' S i k
S×
]
1–,(
i k
1–,(
(
) Req E(
Addr E(
) ID E(
(EQ 6)
) E,
+
=
2
[
)
)
(
)
)
We have established two necessary qualities for UML:
• The input per message must be more than just the
address, since otherwise repeated addresses can mask
dropped messages.
• UML must be non-commutative, since otherwise the
check will not detect re-ordered messages.
The function that we choose, UML’’’, is a variant of UML’’
that is easier to implement in hardware. UML’’’ rotates S(i,k-
1) one bit to the left (denoted by S(i,k-1) << 1) and then
Exclusive-ORs (XORs) the address, requestor, and ID of the
incoming coherence request:
[
1–,(
U ML''' S i k
1–,(
S i k
) E,
]
) 1«
=
[
]
⊕
[
Addr E(
) Req E(
) ID E(
)
]
(EQ 7)
This function satisﬁes our two requirements and is also
easy to implement in hardware. Similarly, we could have
implemented a function using an LFSR, since signature anal-
ysis based on LFSRs is non-commutative and thus detects
reordering errors, as well as corrupted or lost messages.
The primary cost of this signature analysis scheme is
extra hardware, since SafetyNet hides the latency of per-
forming the signature analysis. Each controller requires a
shift register to hold S(i,k) as well as hardware for perform-
ing the update function, UML’’’. Since the signature resides in
a shift register, computation of the new signature only
requires XOR logic.
Summary. This message-level checker detects all single
instances of corrupted messages, dropped messages, and
reordered messages.6 It detects many multiple fault situa-
tions, although any fault that affects the reception of the mes-
sage at every node in the same way will elude detection.
Moreover, it detects errors that a system could not detect
4. Recall that we are ignoring ﬁnite resource aliasing and signature analysis
fault aliasing.
5. A processor can generate a transaction ID by simply counting the num-
ber of requests it has made.
6. Recall that we are ignoring ﬁnite resource aliasing and signature analysis
fault aliasing.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:12:52 UTC from IEEE Xplore.  Restrictions apply. 
TABLE 2. Target System Parameters
L1 Cache (I and D)
L2 Cache
Memory
Miss From Memory
Checkpoint Log Buffer
Interconnect
Checkpoint Interval
128 KB, 4-way set associative
4 MB, 4-way set-associative
2 GB, 64 byte blocks
180 ns (uncontended)
512 kB total, 72 byte entries
bcast tree, link b/w=6.4 GB/s
300 broadcast requests