例如，在有一些安全的错误信息处理的情况下，SQL 注入更难成功执行。它减少了攻
击的痕迹，并且攻击者将不得不求助于使用“盲 SQL 注入”，这更加困难和耗时。 
安全的错误/异常处理指南在公司中非常重要，原因有三: 
1. 良好的错误处理不会向攻击者提供任何信息，这是攻击应用程序的一种手段 
2.  一个适当的集中错误策略更容易维护，并减少任何未捕获的错误出现到应用程序前
端的机会。 
3.  信息泄漏可能会导致社会工程漏洞，例如，托管公司的名称被泄露，或者一些员工
的姓名被泄露。 
 不管开发语言是否提供审计过的异常，审计者应该记住: 
并非所有错误都是例外。不要依赖异常处理作为处理错误的唯一方法，处理所有 case
语句“default”部分，确保所有“if”语句都包含“else”子句，确保函数的所有出口(例
如，返回语句、异常等）被覆盖。RAII 概念(例如，自动指针等)是一个优势。在像 Java 和
C#这样的语言中，记住错误不同于异常(不同的层次)应该被安全处理。 
240 
 捕捉异常并不是自动处理它。你发现了你的异常，那么你是如何处理的呢？根据您的
业务逻辑，对于许多情况来说，这应该足够了，但是对于某些情况(例如，内存不足、数组
索引超出界限等）处理起来没有那么简单。 
 不要抓到更多你能抓到的东西。捕捉所有子句(例如，Java & C#中的 catch(Exception 
e)'或' C++中的 catch(...))应该避免，因为你不知道你正在处理什么类型的异常，如果你不
知道异常类型，你如何准确地处理它？这可能是因为下游服务器没有响应，或者用户可能超
过了他们的配额，或者您可能内存不足，这些问题应该以不同的方式处理，因此应该在特定
的异常子句中进行处理。 
 当抛出异常或错误时，我们还需要记录这种情况。有时这是由于糟糕的开发造成的，
但也可能是攻击或应用程序依赖的其他服务失败的结果。这在生产场景中是可以想象的，如
果您的应用程序通过向客户端返回一个错误响应来处理“安全失败”，并且由于我们不想泄
露该错误是一般性的信息，我们需要有某种方法来识别失败发生的原因。如果您的客户报告
昨晚发生了 1000 个错误，您知道客户会想知道为什么。如果应用程序中没有适当的日志记
录和可追溯性代码，那么在处理特定类型的错误时，您将无法确定这些错误是否是由于某种
企图的黑客攻击，或者是业务逻辑中的错误。 
所有可能导致引发异常的代码路径都应该审计是否成功，以便不引发异常。对于手动代
码审计来说，这很难做到，尤其是对于大量的代码。然而，如果存在代码的调试版本，那么
模块/函数可能抛出相关的异常/错误，并且自动化工具可以确保来自模块的状态和错误响应
是预期的。这意味着代码审计者有责任确保所有相关的异常/错误都在调试代码中得到测试。 
241 
4.4.2 审计什么 
在审计代码时，建议您从错误/异常处理的角度来评估应用程序的通用性。框架有错误
处理资源，可以利用这些资源来帮助安全编程，并且应该审计框架中的这些资源，以评估错
误处理是否“正确连接”。如果可能的话，应该为所有异常使用一个通用的错误页面，因为
这可以防止攻击者识别对错误状态的内部响应。这也使得自动化工具更难识别成功的攻击。 
对于 JSP struts 来说，这可以在 struts-config.xml 文件中进行控制，这是查看连接的
struts 环境时的一个关键文件: 
 示例： 
为了处理未处理的异常，可以在 web.xml 中对 JSP 进行规范。当发生未处理的异常，
但未被代码捕获时，用户将被转发到一般错误页面: 
示例： 
UnhandledException 
GenericError.jsp 
此外，在审计过程中，如果出现 HTTP 404 或 HTTP 500 错误，您可能会发现: 
示例： 
242 
500 
GenericError.jsp 
对于 IIS 开发，“Application_Error()”处理程序将允许应用程序捕获所有未捕获的异
常，并以一致的方式处理它们。请注意这一点很重要，否则您的异常信息可能会在响应中被
发送回客户端。 
 对于 Apache 开发，从处理程序或模块返回失败可能会阻止 Apache 引擎的进一步处
理，并导致服务器的错误响应。响应头、正文等可以由处理程序/模块设置，也可以使用“错
误文档”配置进行配置。我们应该在每个异常中使用本地化的描述字符串，友好的错误原因，
如“系统错误-请稍后再试”。当用户看到错误消息时，它将从抛出的异常的描述字符串中
派生出来，而决不会从异常类中派生出来，异常类可能包含堆栈跟踪、错误发生的行号、类
名或方法名。 
 不要公开敏感信息，如异常消息，本地文件系统上的路径，任何内部系统信息。如前
所述，攻击者可以利用这些信息从组成应用程序的应用程序或组件中收集私人用户信息。 
 不要把人的名字或任何内部联系信息放在错误消息中。不要放任何“人”的信息，这
将导致一定程度的泄露并可能被社会工程利用。 
4.4.2.1 安全地失败 
应用程序失败的原因可能有很多，例如: 
⚫ 
不满足业务逻辑条件的结果。 
243 
⚫ 
业务逻辑所在环境的审计失败。 
⚫ 
应用所依赖的上游或下游系统的结果失败。 
⚫ 
技术硬件/物理故障。 
失败就像西班牙宗教裁判所；一般来说，没有人预料到西班牙宗教裁判所(见 Monty 
Python)。但在现实生活中，西班牙人知道宗教裁判所何时会发生，并为此做好了准备，类
似地，在应用程序中，虽然您不希望出现错误，但您的代码应该为它们的发生做好准备。在
失败的情况下，重要的是不要让应用程序的“door”开着，应用程序中其他“room”的钥
匙放在桌子上。在基于需求设计的逻辑工作流过程中，可能会出现可以通过编程方式处理的
错误，例如连接池不可用，或者下游服务器返回故障。 
 这些失败的地方应该在代码审计的过程中进行审计。应该审计是否应该释放资源，如
内存、连接池、文件句柄等。 
 代码审计还应该包括确定用户会话应该终止或无效的区域。有时可能会出现从业务逻
辑角度或技术角度来看没有任何逻辑意义的错误，例如，登录的用户希望访问未注册到该用
户的帐户。这种情况反映了可能的恶意活动。在这里，我们应该审计代码是否以任何方式防
御并杀死用户的会话对象，并将用户转发到登录页面。(请记住，应该在每个 HTTP 请求时
审计会话对象)。 
4.4.2.2 潜在的易受攻击的代码 
JAVA 
在 Java 中，我们有错误对象的概念：异常对象。这存在于 Java 包 java.lang 中，并且
244 
是从 Throwable 对象派生的。当异常发生时抛出异常。另一个从 Throwable 派生的对象是
Error 对象，当更严重的事情发生时抛出。错误对象可以在 catch 子句中被捕获，但不能被
处理，您能做的最好的事情就是记录一些关于错误的信息，然后重新抛出它。 
 当开发人员使用一些异常方法时，可能会发生信息泄漏，由于错误处理策略不佳，这
些方法会出现到用户界面。方法如下: 
• printStackTrace() 
• getStackTrace() 
同样重要的是要知道，这些方法的输出是在系统控制台中打印的，与System.out相同，
在有意外的地方打印。请确保不要将输出流重定向到 JSP 的 PrintWriter 对象，按照惯例称
为“输出”，例如: 
printStackTrace(out);  
 请注意，可以更改 system.err 和 system.out 的写入位置(比如在 bash 或 C/C++中
修改 fd 1 & 2)，使用 java.lang.system 包: 
• setErr() for the System.err feld.  
• setOut() for the System.out feld. 
 这可以在整个流程的基础上使用，以确保没有输出被写入标准错误或标准输出(可以反
回客户端)，而是写入配置的日志文件。 
 C# 
245 
. NETc
存 在 一 个
System.Exception
对 象 ， 并 有 常 用 的 子 对 象 ， 如
ApplicationException 和 SystemException。不建议您抛出或捕捉 SystemException，这
是由运行时抛出的。 
发生错误时，系统或当前执行的应用程序都会抛出一个包含错误信息的异常来报告错误，
类似于 Java。一旦抛出，异常将由应用程序或默认异常处理程序处理。该异常对象包含类
似于 Java 实现的方法，例如: 
StackTrace 
来源 
信息 
帮助链接 
在. NET 中，我们需要从全局错误处理和意外错误处理的角度来看错误处理策略。这可
以通过多种方式实现，本文并不是一个详尽的列表。首先，当引发未处理的异常时，会引发
错误事件。 
这是 TemplateControl 类的一部分，请参见参考资料: 
http://msdn.microsoft.com/library/default.asp? URL 
=/library/enus/cpref/html/frlrfSystemWebUITemplateControlClassErrorTopic.asp 
错误处理可以通过三种方式完成.NET，按以下顺序执行: 
在页面_错误中的 aspx 或相关代码隐藏页面上。 
246 
在 global.asax 文件的 Application_Error 中(如前所述)。 
在 web.config 文件的客户错误部分。 
建议查看这些区域，了解应用程序的错误策略。 
经典 ASP 
不像 Java 和.NET 中，经典的 ASP 页面在 try-catch 块中没有结构化的错误处理。相
反，他们有一个特定的对象叫做“err”。这使得经典 ASP 页面中的错误处理变得困难，并
且容易在错误处理程序上出现设计错误，从而导致竞争条件和信息泄漏。此外，由于 ASP
使用 VBscript(Visual Basic 老版本)，像“出错时转到标签”这样的句子是不可用的。在经
典的 ASP 中，有两种方法来处理错误，第一种是使用带有“出错时继续下一步”和“出错
时转到 0”的 err 对象。 
 示例： 
Public Function IsInteger (ByVal Number) 
Dim Res, tNumber 
Number = Trim(Number) 
tNumber=Number 
On Error Resume Next ‘If an error occurs continue execution 
Number = CInt(Number) ‘if Number is a alphanumeric string a Type Mismatch error will occur 
Res = (err.number = 0) ‘If there are no errors then return true 
On Error GoTo 0 ‘If an error occurs stop execution and display error 
re.Pattern = “^[\+\-]? *\d+$” ‘only one +/- and digits are allowed 
IsInteger = re.Test(tNumber) And Res 
End Function 
247 
第 二 种 是 在 错 误 页 面 上 使 用 错 误 处 理 程 序 (http://support 
. 
Microsoft .com/kb/299981)。 
示例： 
Dim ErrObj 
set ErrObj = Server.GetLastError() 
‘Now use ErrObj as the regular err object 
C++ 
在 C++语言中，可以抛出任何对象或内置类型。然而，有一个 STL 类型 std::exception
应该被用作任何用户定义的异常的父类型，事实上，这个类型在 STL 和许多库中被用作所
有异常的父类型。 
 与 Java 不同，即使您出现无法恢复的错误（例如 std :: bad_alloc 表示内存不足）它
也源自 std :: exception，因此'catch（std :: exception＆e）'与'catch（ ...）”，不同之
处在于它允许您访问异常，因此您可以知道发生了什么，并可能使用 e.what（）打印一些
错误信息。 
 C++有很多日志库，所以如果你的代码库使用一个特定的日志类，在任何敏感信息可
以写入日志的地方寻找该日志的用法。 
 审计的内容:IIS 中的错误处理 
页面错误是在服务器端运行的页面级处理。下面是一个例子，但错误信息太多，因此是
不好的做法。 
 示例： 
248 
上面例子中的代码有许多问题。 
首先，它以请求的形式向用户显示 Request.Url.ToString()。假设在此之前没有数据验
证，我们很容易受到跨站点脚本攻击。 
其次，使用服务器向用户显示错误消息和 Server.GetLastError().ToString()泄露关于应
用程序的内部信息。调用 Page_Error 后，调 Application_Error。 
 当出现错误时，将调用 Application_Error 函数。在这种方法中，我们可以记录错误
并重定向到另一个页面。事实上，在 Application_Error 中捕获错误而不是在 Page_Error
中捕获错误是前面描述的集中错误的一个例子。 
示例： 
void Application_Error(Object sender, EventArgs e) { 
String Message = “\n\nURL: http://localhost/” + Request.Path 
+ “\n\nMESSAGE:\n “ + Server.GetLastError().Message 
+ “\n\nSTACK TRACE:\n” + Server.GetLastError().StackTrace; 
// Insert into Event Log 
EventLog Log = new EventLog(); 
Log.Source = LogName; 
Log.WriteEntry(Message, EventLogEntryType.Error); 
Server.Redirect(Error.htm) // this shall also clear the error 
} 