postgres@digoal-> vi t.sql  
\setrandom id 1 100  
update t1 set info=now()::text where id=:id;  
postgres@digoal-> pgbench -M prepared -n -r -P 1 -f ./t.sql -c 8 -j 8 -T 10000 up  
progress: 1.0 s, 30818.6 tps, lat 0.243 ms stddev 0.414  
progress: 2.0 s, 32295.2 tps, lat 0.246 ms stddev 0.328  
......  
```  
在下游节点定于上游节点的up数据库。  
```  
postgres@digoal-> psql -h 127.0.0.1 -p 1922 down  
psql (9.4.4)  
Type "help" for help.  
down=# select bdr.bdr_subscribe(local_node_name:='down_1922', subscribe_to_dsn:='hostaddr=127.0.0.1 port=1921 dbname=up user=postgres', node_local_dsn:='hostaddr=127.0.0.1 port=1922 dbname=down user=postgres');  
 bdr_subscribe   
---------------  
(1 row)  
```  
查看订阅状态  
```  
down=# select * from bdr.bdr_nodes;  
     node_sysid      | node_timeline | node_dboid | node_status |      node_name       |                     node_local_dsn                     |                  node_init_from_dsn                    
---------------------+---------------+------------+-------------+----------------------+--------------------------------------------------------+------------------------------------------------------  
 6177143025216388117 |            10 |      70522 | r           | down_1922            |                                                        |   
 6177143025216388117 |            10 |      81996 | i           | down_1922-subscriber | hostaddr=127.0.0.1 port=1922 dbname=down user=postgres | hostaddr=127.0.0.1 port=1921 dbname=up user=postgres  
(2 rows)  
i表示正在初始化.  
```  
在上游节点可以查看到对应的slot已经被创建了  
```  
postgres=# select * from pg_replication_slots ;  
                slot_name                 | plugin | slot_type | datoid | database | active | xmin | catalog_xmin | restart_lsn   
------------------------------------------+--------+-----------+--------+----------+--------+------+--------------+-------------  
 bdr_70522_6177143025216388117_10_83065__ | bdr    | logical   |  70522 | up       | t      |      |    661974801 | 2B/22A50A70  
(1 row)  
postgres=# select * from pg_stat_replication ;  
 pid  | usesysid | usename  |             application_name             | client_addr | client_hostname | client_port |         backend_start         | backend_xmin |  state  | sent_location | write_location | flush_location | replay_loca  
tion | sync_priority | sync_state   
------+----------+----------+------------------------------------------+-------------+-----------------+-------------+-------------------------------+--------------+---------+---------------+----------------+----------------+------------  
-----+---------------+------------  
 6170 |       10 | postgres | bdr (6177143025216388117,10,83065,):init | 127.0.0.1   |                 |       50711 | 2015-10-09 23:09:54.935301+08 |              | startup | 0/0           |                |                |              
     |             0 | async  
(1 row)  
```  
一会，我们可以看到数据已经拷贝到下游节点的down库了。  
```  
down=# \dt  
        List of relations  
 Schema | Name | Type  |  Owner     
--------+------+-------+----------  
 public | t1   | table | postgres  
 public | t2   | table | postgres  
 public | tb   | table | postgres  
(3 rows)  
down=# \dv  
        List of relations  
 Schema | Name | Type |  Owner     
--------+------+------+----------  
 public | v1   | view | postgres  
(1 row)  
down=# \df f1  
                        List of functions  
 Schema | Name | Result data type | Argument data types |  Type    
--------+------+------------------+---------------------+--------  
 public | f1   | void             |                     | normal  
(1 row)  
down=# \dT   
          List of data types  
 Schema |     Name      | Description   
--------+---------------+-------------  
 public | dt            |   
```  
测试DDL，上游节点加了event，禁止直接使用DDL，所以我们需要通过函数来执行DDL。  
```  
postgres@digoal-> psql -h 127.0.0.1 -p 1921  
psql (9.4.4)  
Type "help" for help.  
postgres=# \c up  
up=# select * from bdr.bdr_replicate_ddl_command('create table public.new(id int)');  -- 注意必须制定schema  
 bdr_replicate_ddl_command   
---------------------------  
(1 row)  
```  
bdr对应的表，管理函数。查看：  
http://bdr-project.org/docs/0.9.0/functions.html  
http://bdr-project.org/docs/0.9.0/catalogs-views.html  
## 删除订阅的方法  
1\. 在上游节点删除slot，处理DDL队列，例如truncate bdr_queued_commands, bdr_queued_drops队列中的数据。  
2\. 在下游节点，注释shared_preload_library，重启数据库，去bdr_supervisordb 库删除下游节点的订阅库信息。  
3\. 在下游节点，改回shared_preload_library，重启数据库，删除原订阅库的bdr extension。  
解决下游节点异常，例如无法添加订阅，可能由于之前没有正确的删除订阅。  
注释shared_preload，重启数据库，去bdr_supervisordb 库修复。然后解除注释，重启数据库。  
```  
postgres=# \l  
                                List of databases  
       Name       |  Owner   | Encoding | Collate | Ctype |   Access privileges     
------------------+----------+----------+---------+-------+-----------------------  
 bdr_supervisordb | postgres | UTF8     | C       | C     |   
 postgres         | postgres | UTF8     | C       | C     |   
 template0        | postgres | UTF8     | C       | C     | =c/postgres          +  
                  |          |          |         |       | postgres=CTc/postgres  
 template1        | postgres | UTF8     | C       | C     | =c/postgres          +  
                  |          |          |         |       | postgres=CTc/postgres  
 up               | postgres | UTF8     | C       | C     |   
(5 rows)  
```  
解决订阅异常，  
```  
2015-10-09 23:41:59.756 CST,,,7785,,5617e047.1e69,1,,2015-10-09 23:41:59 CST,3/0,0,ERROR,55000,"previous init failed, manual cleanup is required","Found bdr.bdr_nodes entry for bdr (6203671810517003626,1,16385,) with state=i in remote bdr.bdr_nodes","Remove all replication identifiers and slots corresponding to this node from the init target node then drop and recreate this database and try again",,,,,,"bdr_init_replica, bdr_init_replica.c:899","bdr (6203671810517003626,1,16385,): perdb"  
```  
链接到上游节点，删除slot  
删除下游节点数据库，重新创建下游节点数据库，重新订阅。  
## 小结  
1\. 如果上游节点产生XLOG非常频繁，下游节点初始化订阅的时间会非常漫长。  
2\. 如果上游节点产生XLOG非常频繁，下游节点的延迟可能会很大。  
3\. 由于udr和bdr是在一个插件中共用的，只是编译参数使用udr的编译选项，包含了BDR的功能后使用起来显得非常混乱。  
4\. 文档中存在一些BUG，例如删除UDR订阅的函数bdr.bdr_unsubscribe(local_node_name)不存在。  
PostgreSQL的udr插件还有很多可以改进的地方，包括管理方面的，性能方面的。PGSQL又将多一个杀手锏。  
如果担心目前还不够完善，在加入PG内核前，我们用它来做跨数据库大版本的增量迁移，跨硬件架构，或者不同数据块大小的增量数据迁移，是个不错的选择。  
## 参考  
1\. http://2ndquadrant.com/en/resources/bdr/  
2\. http://bdr-project.org/docs/0.9.0/index.html  
3\. https://github.com/2ndQuadrant/bdr/tree/bdr-plugin/REL0_9_STABLE  
4\. http://www.postgresql.org/docs/9.5/static/test-decoding.html  
5\. http://www.postgresql.org/docs/9.5/static/functions-admin.html#FUNCTIONS-REPLICATION  
6\. http://www.postgresql.org/docs/9.5/static/warm-standby.html#STREAMING-REPLICATION-SLOTS  
7\. http://www.postgresql.org/docs/9.5/static/protocol-replication.html  
8\. http://www.cybertec.at/en/products/walbouncer-enterprise-grade-partial-replication/  
9\. http://blog.163.com/digoal@126/blog/static/1638770402014101715715991  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")