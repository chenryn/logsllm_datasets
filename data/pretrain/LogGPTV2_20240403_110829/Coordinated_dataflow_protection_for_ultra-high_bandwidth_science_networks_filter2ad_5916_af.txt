and the tag bit count required to represent these policies. We
compare our approach with traditional tagging mechanisms (i.e.,
bit segmentation and Alpaca [20]). Both the traditional approaches
allocate a bit per network attribute.
Consider SDMZ Campus Net1 with following policy attributes:
6 projects (3 bits), 3000 users (12 bits), 890 hosts (10 bits), 24
application (5 bits), 4 security states (2 bits), 28 services (5 bits), and
19 experiments (5 bits). With naive attribute-based tagging, the total
number of bits required is 42 bits. As we plan to use IPv6 flow-label
bits (20 bits), and considering other dynamic parameters such as data
outcomes and attributes, such approaches can not be directly used.
Tag Optimization: Alpaca effectively prefixes or masks bits,
reducing the number of tags that are required by each network. Its
tags are not dependent on the number of policies, but rather depend
on the number of attributes present in the network [20]. In contrast,
our approach relies on the composed policy graph (i.e., number
of policies) and hence requires fewer bits. Figure 10a shows that
for SDMZ Campus Net 1 and SDMZ Campus Net 2 (i.e., PS-1), our
approach requires ≈4– 5× fewer bits than bit segmentation and ≈3–
4× fewer than Alpaca and FlowTags. Our approach required around
7-11 bits, while the other approaches needed ≈24-42 bits. With
synthetic policy set (PS-2), which is built from policy attributes of
PS-1, the tag bits required linearly increased with the number of
attributes that are used in policy specification, while our approach
required only ≈15 bits. Similarly, FlowTags requires ≈2.2 – 3× more
number of tags when compared to our approach. With the addition
of more dynamic policy attributes the number of tag bits required
with Alpaca and FlowTags will gradually increase. Our approach
allows us to reuse the tag bits: (i) in case of temporal and dynamic
security policies, and (ii) tags used across different sites (see §5.2).
Rule Optimization: Figure 10b compares the efficiency of our tag-
based rule optimization to Alpaca [20] and to bit segmentation (BS),
9
(a) Average tag space alloca-
tion latency with increasing #
adjacent sites.
(b) Average tag space allocation
latency with constant # adjacent
sites per site.
Figure 11: Inter-site tag allocation performance.
using policy sets PS-1 and PS-2. Compared to actual high-level poli-
cies (i.e., as specified for device groups), the set of rules enforced are
ordersofmagnitudeslarger.Thepolicyset PS-1fromtwoSDMZcam-
pus networks having≈150 and≈400 policies required approximately
≈5.3K and ≈7.9K rules respectively, and the 20k synthetic policies
required ≈130k rules. We evaluate the number of rules required
after translating the policies into enforceable rules per approach.
Alpaca, FlowTags and bit segmentation exhibit rule set reduc-
tions, as these approaches group rules using tag-bit masking or
wild-card matching. They achieve an improvement of ≈40 – 47% in
the rule space over the original rule set (for both PS-1 and PS-2). Our
policy specification mechanism allows each policy tag to capture
attributes along multiple dimensions, resulting in higher rule-space
optimization. Compared to Alpaca, FlowTags and BS our approach
achieved a ≈46% – 55% rule-space improvement for SDMZ Campus
Net 1 policy set, and ≈40% – 52% rule-space improvement for the
SDMZ Campus Net 2 policy set. Similarly, for policy set PS-2 (i.e.,
20k policies) our approach achieved ≈49% rule-size improvements
over Alpaca.
Tag-Space Allocation: We examined the inter-site tag space allo-
cation mechanism using DS-1. Using the DS-1 graph, we randomly
chooseonenodeandselectalladjacentnodesinabreadth-firstsearch
approximately until a total of 100 nodes are reached. We then assign
anaverageofuptofiveprojectspersite,thenexecuteouredge-graph-
coloring algorithm and plot the latency incurred with tag-space allo-
cation for these 100 sites. We repeat the same procedure 10 times, by
randomly choosing a first site each time. We repeat this procedure
by assigning different number of average projects per site and by in-
creasing the number of sites from 200 to 1000. At times, we randomly
add edges between nodes (i.e., sites) to control the average number
of projects per site to (5, 10, 15 and 20) in each experimental iteration.
Figure 11a illustrates the average tag-space allocation latency
with increasing number of sites (n). Each time the number of adjacent
sites for each site is maintained proportional to n. For experiments
adjacency size is maintained as n/c, where c = 20. Assigning colors
to projects with 1000 sites, with an average number of projects per
site being 5, 10, 15 and 20, requires ≈1.9, 8.2, 41.9 and 76.8 seconds,
respectively. We observed that the dominant computation cost was
attributable to optimum color selection for each project within a
site (steps 11–13 of Algorithm 2). Next, we maintain the number
of adjacent sites constantly at five for conducting the same above ex-
periments (Figure 11b). For 1000 sites with an average of 20 projects
per site, the total tag space allocation mechanism took less than ≈14
seconds to complete the edge-color assignment. We assert that this
Campus Net 1Campus Net 2Synthesized Campus Net 1020406080100# Tag BitsBit SegmentAlpacaFlowtagsCoordiNetZCampus Net 1Campus Net 20.0k1.0k2.0k3.0k4.0k5.0k6.0k7.0k8.0k# RulesSynthesized Campus Net 10.0k20.0k40.0k60.0k80.0k100.0k120.0k140.0k160.0kOriginalBit SegAlpacaFlowTagsCoordiNetZ02004006008001000# Sites020406080Tag Allocation Latency (sec)Avg. Projects/Site = 5Avg. Projects/Site = 10Avg. Projects/Site = 15Avg. Projects/Site = 2002004006008001000# Sites05101520Tag Allocation Latency (sec)Avg. Projects/site = 5Avg. Projects/site = 10Avg. Projects/site = 15Avg. Projects/site = 20policy intents of network administrators and enforce these
policies in multi-tenant, multi-project and multi-administrative
environments, such as the SDMZ network. This paper focuses on
the development of a unified policy framework that captures and
enforces the conflict-free dataflow policy intents in multi-site and
multi-administrative domains.
As SDMZ networks primarily emphasize performance, they rely
on simple router and switch ACLs, coarse-grained filtering and
limited offline-DPI using clustered NIDS (e.g., BroIDS) for threat
detection [5, 9, 44]. Recent efforts from the community to design
firewall and monitoring solutions that could handle the traffic at line
rate [27, 47] or selectively bypass the SDMZ flows, offer first-steps
towards realizing the objectives of the SDMZ [40]. Our architecture
extends these efforts along two key dimensions: (i) providing
improved context for offline security enforcement and (ii) inline
microservice-based security network functions that form specific
SDMZ security services for elephant flows. A preliminary vision
of our proposed framework was presented in a workshop paper [4].
Tagging is a widely used technique to steer network traffic (e.g.,
MPLS, VLANs). In the SDN context, tagging has been applied in
prior work such as FlowTags [41], to control flow traversal using
tags generated by middleboxes. FlowTags are not transferable to the
SDMZ network, as it caters to single-site administrative environ-
ments. Secondly, the temporal optimizations suggested in FlowTags
are ill-suited for long-lived elephant flows, which may last for hours.
Similarly, the recent efforts on tag-based policies allow net-
works to optimize the number of flow rules [20, 46] and exploit
commonality between different forwarding equivalence classes
(FEC) [22]. Although such techniques could be implemented at
the SDMZ core, they provide rule-space optimization at the cost
of tag size [22]. Furthermore, such solutions based on group-policy
attributes, are unidimensional, target single-enterprise scenarios,
and do not support joint optimization of tag sizes with rule-space
requirements. CoordiNetZ addresses the multi-dimensional policy
problem (e.g., temporal dynamics, security states, spatial attributes)
by assigning tags to policies, and allowing them to be aggregated
and implemented as multi-site rules.
8 Conclusion
The CoordiNetZ framework facilitates advancements in cross-
domain security enforcement by providing a dataflow-based policy
framework with necessary tools for policy specification, deconflic-
tion, and tag-based enforcement. CoordiNetZ helps bridge a critical
gap between applied security research and science experiments on
real near-production infrastructure at scale, maximizing the benefits
of SDN. This is effectively achieved in CoordiNetZ by extracting the
necessary contextual information from the host systems at the gran-
ularity of process specific details pertaining to its file and network IO
and distributing it to the network through SDN and CNZ Controller
entities for enforcing it as tag-based policies. Our initial step towards
building security-based microservices specific to SDMZ networks,
such as spoof-protection, tag-based filtering, and connection track-
ing modules performed within 92-99% of line-rate throughputs.
This initial foray into SDMZ security has simply scratched the
surface of a deep problem domain, with practical and unexplored sub-
problems. While this paper has focused on the SDMZ network, the
10
Figure 12: Flow processing performance for various SDMZ-
specific security modules built as microservices (i.e.,
represented as % drop in their throughput). Note “0” on
y-axis indicates actual line rate.
edge-color assignment cost is reasonable given the infrequency of
this procedure and slack tag space assigned to each project (see §5.2).
Flow-Processing Performance: Figure 12 captures the percent-
age drop in throughput for various security-based microservices
implemented for SDMZ security use cases. We compare the perfor-
mance of our security modules with maximum possible throughput
that is achieved by simply routing the IPv6 elephant flows generated
at line rate (40 Gbps) across two different SDMZ sites. Evaluations
are carried with SDMZ sites that are configured with policy set PS-1
with security modules deployed at the edge of each SDMZ site. We
evaluate following filtering schemes: (i) tag-based filtering, (ii) host-
based data exfiltration protection, (iii) rate limiting, (iv) connection
tracking (i.e., both IP and tag-based), and (v) spoof protection.
Simple tag-based filtering outperforms traditional stateless
IPv6 ACL-based (e.g., source and destination IPs, port, protocol,
traffic class) filtering with ≈8 – 12% difference in throughput: a
difference of ≈4.2 million packets per second (mpps) at 128-bytes
packet size and ≈0.04 mpps throughput difference at the 9000-bytes
packet size. Tag-based filtering achieved 92% of the actual line rate
with 128-byte packets and ≈99% throughput for packets of size
9000-bytes. The overhead of performing data-exfiltration protection
from host DTNs, using the SciMon module, is minimal as this does
not require complete on-data-path analysis. Hence, the performance
of exfiltration protection is comparable to tag-based filtering.
As shown in Figure 15 (Appendix A.2), the spoof protection
module built in OVS involves two tag-based lookups: 1) tagID to