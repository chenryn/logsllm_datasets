printf(str2):
printf(
pri
char
const
const char 
intf(p)
str2[5] =
(strl);
char
char *p = "abcd";
*p =
‘..
""abcd";
"abcd";
"abcd";
全国嵌入式人才培训基地
 做右值使用时自动转换成指向首元素的指针，这种指针应
字符串字面值通常分配在.rodata段,
起始页
上一级
，这个指针应该是const char*型，如果
而在第4节“字符
5.指针与结构体
下一页
---
## Page 407
要通过指针p访问结构体成员可以写成(*p）.c和(*p).num，为了书写方便，C语言提供了->运算符，
首先定义一个结构体类型，然后定义这种类型的变量和指针：
5.指针与结构体请点评
4.指针与const限定符
页
struct
struct unit 
int num;
char c;
全国嵌入式人才培训基地
全国嵌入式人才培训基地
5.指针与结构体
第23章指针
起始页
上一级
6.指向指针的指针与指针数组
---
## Page 408
的首元素。数组中每个元素都是char*指针，指向一
则pa[0]和a[0]取的是同一个元素，唯一比原来复杂的地方在于这个元素是一个int*指针，而不是
组a由10个元素组成，每个元素都是int*指针：
数组中的每个元素可以是基本类型，也可以复合类型，因此也可以是指针类型。例如定义一个数
很自然地，也可以定义指向"指向指针的指针"的指针，但是很少用到：
6.指向指针的指针与指针数组 请点评
示指针而不表示数组,
个数。而argv是一个指向指针的指针，为什么不是指针数组呢？因为前面讲过,
基本类型。
这样定义之后,
的指针。
指针可以指向基本类型，也可以指向复合类型，
上一页
例 23.2.打印命令行参数
int *a[10];
int
int
int
***p;
**ppi
int main(int argc, char *argv[］)
#include 
、表达式*ppi取pi的值，表达式**ppi 取i的值。请读者自己画图理解i、pi、ppi这三
"&a[0];
 &pi;
6.指向指针的指针与指针数组
全国嵌入式人才培训基地
第23章指针
，因此也可以指向另外一个指针变量，称为指向指针
个命令行参数字符串。
而是指向一
，函数原型中的表
一个指针数组
下一页
---
## Page 409
习题 请点评
实最终都是在执行/bin/busybox，
同的文件列表,
在这个例子中我们还看到，如果给程序建立符号链接，
为Sentinel，NULL就像一
NULL标识着argv的结尾，
由于argv[4]是NULL，我们也可以这样循环遍历argv：
注意程序名也算一个命令行参数，所以执行./a.out a b c这个命令时，argc是4，argv如下图所
项目Busybox，
编译执行:
图 23.4.argv指针数组
for(i=O; argv[i] != NULL; i++)
argv[i]=a
 in'-s a.out printargv
 gcc main.c
/printargv
 将各种Linux命令裁剪后集于
=d
1=b
./printargv
./a.out
NULL
一个哨兵守卫着数组的边界。
，这个循环碰到NULL就结束，
return 0;
for(i 
int i;
程序会根据不同的命令行参数做不同的事情，
/a.out0
'= O; i 
 say_hello是-
!(S‘u\S% 0TH.)uTId
1
return 0;
void (*f)(const char *) = say_hello;
，如上面的f("Guys"),
一种函数类型,
8.函数类型和函数指针类型
全国嵌入式人才培训基地
第 23 章指针
，就不需要自动类型转换了。
 而函数类型和数组类型类似，做右值使用时自动
也可以先用*取出它所指的函数类型，
，正好是这种函数，
，下面看一个简单的例子：
，指针变量的内存单元存放
D
 所以是指向这种函
因此f可以指
........
所
413
下一页
再
---
## Page 414
码是不够理想的，现在我用函数指针给出一种实现：
现在类型字段有两种取值，
类型标志"的习题1，由于结构体中多了一
通过函数指针调用函数和直接调用函数相比有什么好处呢？我们研究一个例子。回顾第3节“数据
这样声明了一个函数指针，而不是声明一个函数。fp也可以这样声明：
但如果把*号也套在括号里就不一样了：
函数e返回一个r*类型的函数指针。如果给e多套几层括号仍然表示同样的意思：
类型。而下面这个函数声明是正确的：
因为函数可以返回voia类型、标量类型、结构体、联合体，但不能返回函数类型，也不能返回数组
相当于声明：
下面这个函数声明是错误的：
E
M
double rect_img_part(struct complex_struct z)
double real_part(struct complex_struct z)
int (*fp)(void);
司
F h(void);
int 
int f(void)
*fpi
*((e))(void);
*e(void);
g(void);
return z.b;
return z.a;
else
if (z.t == RECTANGULAR)
return z.a * cos(z.b);
 return z.a;
一个类型字段,
你当时是怎么实现的？大概是这样吧：
需要重新实 
..........
---
## Page 415
7. 指向数组的指针与多维数组
以不加改动地复用。
类型字段z.t又多了
Cohesion）是程序设计的一条基本原则，
互相独立，
来调用，
情
而不必用if 
derine
#define
pol_angie };
double
double (*real_part_tbl[l)(struct complex_struct) = { rect_real_part,
double pol_real_part(struct complex_struct z)
double rect_angle(struct complex_struct z)
double rect_magnitude(struct complex_struct z)
也可以达到if，
#define 
double
pol
Too
double pol_angle(struct complex_struct z)
double
double
而不必把它们的代码都耦合到一个函数中。
_magnitude
real
pol_magnitude(struct 
pol_img_part(struct complex_struct z)
 return sqrt(z.a * z.a + z.b * z.b);
angle(z) angle_tbl[z.t](z)
magnitude(z)
img_part(z)
real _part(z) real_part_tbl[z.t](z)
(*angle_tbl[])(struct complex_struct) = { rect_angle,
return z.b;
return
return
return 
else
H
double PI = acos(-l.0);
了一种取值，
... else
用类型字段z.t做索引，
N
z.a
z.a * cos(z.b);
return atan(z.b / z.a) + PI;
return atan(z.b / z.a);
.a;
只需要添加一组新的函数，
.兼顾好几件事情，
'img_part_
 magnitude_
 sin(z.b);
全国嵌入式人才培训基地
 这样可以更好地复用现有代码，
 complex_struct z)
起始页
，但相比之下这种实现更好，
[z.t](2)
从指针数组real_part_tbi中取出相应的函数指针
“低耦合，
 修改函数指针数组，
高内聚”
9.不完全类型和复杂声明
使代码更容易维护。如果
，每个函数都只做一件事
原有的函数仍然可
415
下一页
---
## Page 416
不知道这种类型该占几个字节的存储空间，例如：
C语言的类型分为函数类型、
9.不完全类型和复杂声明 遣点评
表达式，NULL指针表示假，
型。指针类型属于标量类型,
地总结一下C语言的类型。下图出自[Standard C]。
在第1节“复合类型与结构体"讲过算术类型、标量类型的概念，现在又学习了几种类型，我们完整
上一页
shar st[16] , 
inocplete
funotion
图 23.5.C语言类型总结
unionu;
struct s;
1
potnter
，非NULL指针表示真。不完全类型是暂时没有完全定义好的类型，编译器
void
 对象类型和不完全类型三大类。
integer
tloatiry
9.不完全类型和复杂声明
全国嵌入式人才培训基地
第 23 章指针
to
enumeration types
uras i grzed
a251g2ed
or2g
lorzg
it
。对象类型又分为标量类型和非标量类
416
下一页
---
## Page 417
这些结构体称为链表的节点（Node）。
元，如链表、
以上是两个结构体构成的递归定义，
因为不知道它该占几个字节。所以结构体中可以递归地定义指针成员，
这样的类型定义是错误的:
struct s和struct t各有一个指针成员指向另一种类型。编译器从前到后依次处理，
类型，next也成了
*next;时，认为next是一个指向不完全类型的指针,
型了，pt的类型就组合成-
不完全的结构体类型有重要作用：
长度，只改.c文件就行了，头文件可以不用改。
有一定的理由，
会想，
，如果编译器处理到程序文件的末尾仍然无法把str组合成一
图23.6.链表
struct s 
struct t {
.
struct t {
struct 
二叉树等，我们将在后面详细介绍。
，比如第一个声明是写在头文件里的，
 struct s os;
 struct s *ps;
struct t *pt;