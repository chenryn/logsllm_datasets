    [-28,-10,22,9]
    [-27,11,22,-17]
    [-27,26,-3,-11]
    [-27,30,29,-6]
    [-26,11,-7,-25]
    [-25,12,7,-27]
    [-23,-4,24,-11]
    [-23,32,-4,19]
    [-22,-28,11,-2]
    [-22,-3,18,-29]
    [-22,3,17,-29]
    [-22,3,18,-30]
    [-22,26,11,-29]
    [-21,20,11,-1]
    [-19,12,-2,-31]
    [-19,12,17,-7]
    [-18,-32,11,10]
    [-18,-24,11,24]
    [-18,-7,12,24]
    [-18,11,31,10]
    [-17,-32,1,1]
    [-17,-32,11,10]
    [-17,-23,21,10]
    [-17,-4,21,-9]
    [-17,15,31,-8]
    [-16,3,18,-7]
    [-15,-4,24,-11]
    [-12,26,-3,-31]
    [-12,31,11,-6]
    [-11,25,7,8]
    [-11,31,29,8]
    [-11,32,-2,-15]
    [-10,-4,10,-31]
    [-10,-4,17,-31]
    [-10,-4,27,-31]
    [-8,-6,28,-8]
    [-8,31,8,-11]
    [-6,-3,4,2]
    [-6,12,1,-7]
    [-5,8,29,-24]
    [-5,30,29,-15]
    [-4,-25,17,11]
    [-4,-11,-1,10]
    [-3,25,23,-30]
    [-2,-3,27,14]
    [-2,22,23,8]
    [-2,23,16,17]
    [-1,2,10,-26]
    [-1,18,17,-26]
    [-1,18,17,-12]
    [1,11,8,6]
    [3,-4,21,-31]
    [5,18,31,-6]
    [7,21,11,-14]
    [8,16,23,-16]
    [9,-31,31,-11]
    [11,-13,17,-23]
    [11,-5,27,11]
    [11,25,-2,19]
    [12,26,17,-29]
    [14,18,-5,8]
    [15,27,-3,-30]
    [16,12,7,-23]
    [17,2,30,32]
    [19,19,15,-18]
    [20,16,11,-23]
    [21,26,-5,10]
    [22,-4,11,-15]
    [22,21,-2,-4]
    [24,-23,17,21]
    [24,-23,17,30]
    [24,8,32,-28]
    [24,11,-2,9]
    [24,20,29,-29]
    [25,-31,31,-23]
    [25,-4,31,11]
    [25,15,1,-12]
    [27,-2,16,17]
    [27,28,12,-30]
    [29,5,-2,10]
    [30,-20,32,-6]
    [30,26,22,-29]
    [31,-4,31,13]
    [31,4,18,-11]
    [31,8,12,-23]
    [31,12,1,-18]
    [31,12,8,-13]
    [31,20,32,-2]
再通过python检查一遍这些key：
    s = '''[-32,10,11,7]
    [-32,20,11,-31]
    [-32,20,20,-31]
    [-32,25,1,-21]
    [-31,-5,27,-18]
    [-31,25,24,-27]
    [-30,11,27,-13]
    [-28,-10,22,9]
    [-27,11,22,-17]
    [-27,26,-3,-11]
    [-27,30,29,-6]
    [-26,11,-7,-25]
    [-25,12,7,-27]
    [-23,-4,24,-11]
    [-23,32,-4,19]
    [-22,-28,11,-2]
    [-22,-3,18,-29]
    [-22,3,17,-29]
    [-22,3,18,-30]
    [-22,26,11,-29]
    [-21,20,11,-1]
    [-19,12,-2,-31]
    [-19,12,17,-7]
    [-18,-32,11,10]
    [-18,-24,11,24]
    [-18,-7,12,24]
    [-18,11,31,10]
    [-17,-32,1,1]
    [-17,-32,11,10]
    [-17,-23,21,10]
    [-17,-4,21,-9]
    [-17,15,31,-8]
    [-16,3,18,-7]
    [-15,-4,24,-11]
    [-12,26,-3,-31]
    [-12,31,11,-6]
    [-11,25,7,8]
    [-11,31,29,8]
    [-11,32,-2,-15]
    [-10,-4,10,-31]
    [-10,-4,17,-31]
    [-10,-4,27,-31]
    [-8,-6,28,-8]
    [-8,31,8,-11]
    [-6,-3,4,2]
    [-6,12,1,-7]
    [-5,8,29,-24]
    [-5,30,29,-15]
    [-4,-25,17,11]
    [-4,-11,-1,10]
    [-3,25,23,-30]
    [-2,-3,27,14]
    [-2,22,23,8]
    [-2,23,16,17]
    [-1,2,10,-26]
    [-1,18,17,-26]
    [-1,18,17,-12]
    [1,11,8,6]
    [3,-4,21,-31]
    [5,18,31,-6]
    [7,21,11,-14]
    [8,16,23,-16]
    [9,-31,31,-11]
    [11,-13,17,-23]
    [11,-5,27,11]
    [11,25,-2,19]
    [12,26,17,-29]
    [14,18,-5,8]
    [15,27,-3,-30]
    [16,12,7,-23]
    [17,2,30,32]
    [19,19,15,-18]
    [20,16,11,-23]
    [21,26,-5,10]
    [22,-4,11,-15]
    [22,21,-2,-4]
    [24,-23,17,21]
    [24,-23,17,30]
    [24,8,32,-28]
    [24,11,-2,9]
    [24,20,29,-29]
    [25,-31,31,-23]
    [25,-4,31,11]
    [25,15,1,-12]
    [27,-2,16,17]
    [27,28,12,-30]
    [29,5,-2,10]
    [30,-20,32,-6]
    [30,26,22,-29]
    [31,-4,31,13]
    [31,4,18,-11]
    [31,8,12,-23]
    [31,12,1,-18]
    [31,12,8,-13]
    [31,20,32,-2]'''
    s = s.split('\n')
    import json
    start = 14682254609762378035
    for each in s:
        key = json.loads(each)
        print(long_to_bytes(convert(convert(start, key), key) ^ cipher1[-1]))
        print(key)
看到当key=[-12, 26, -3, -31]时输出是正常的，其他的都不对，因此就得到了key，iv也能解了，flag就出了。
    # -*- coding: utf-8 -*-    
    def inverse_right_mask(res, shift, mask, bits=64):
        tmp = res
        for i in range(bits // shift):
            tmp = res ^ tmp >> shift & mask
        return tmp
    def inverse_left_mask(res, shift, mask, bits=64):
        tmp = res
        for i in range(bits // shift):
            tmp = res ^ tmp > (-k) & c
        return m ^ m << k & c
    def _shift(cipher, k, c):
        if k < 0:
            return inverse_right_mask(cipher, -k, c, 64)
        return inverse_left_mask(cipher, k, c, 64)
    def convert(m, key):
        c_list = [0x37386180af9ae39e, 0xaf754e29895ee11a, 0x85e1a429a2b7030c, 0x964c5a89f6d3ae8c]
        for t in range(4):
            m = shift(m, key[t], c_list[t])
        return m
    def _convert(c, key):
        c_list = [0x37386180af9ae39e, 0xaf754e29895ee11a, 0x85e1a429a2b7030c, 0x964c5a89f6d3ae8c]
        for t in range(3, -1, -1):
            c = _shift(c, key[t], c_list[t])
        return c
    key = [-12, 26, -3, -31]
    iv = 16476971533267772345
    flag = b''
    last = iv
    for each in cipher1:
        cur_c = convert(last, key)
        flag += long_to_bytes(cur_c ^ each)
        last = cur_c
    last = iv
    for each in cipher2:
        cur_c = _convert(each, key)
        flag += long_to_bytes(cur_c ^ last)
        last = each
    print(flag)