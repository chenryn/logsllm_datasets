0000100 100015b8 100015be 100015c4 100015ca 
0000120 100015d0 100015e0 100016b0 10001760 
0000140 10001766 1000176c 10001780 100017b0 
0000160 100017d0 100017e0 10001810 10001816 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
838 
逆向工程权威指南（下册） 
0000200 10002000 10002004 10002008 1000200c 
0000220 10002010 10002014 10002018 1000201c 
0000240 10002020 10002024 10002028 1000202c 
0000260 10002030 10002034 10002038 1000203c 
0000300 10002040 10002044 10002048 1000204c 
0000320 10002050 100020d0 100020e4 100020f8 
0000340 1000210c 10002120 10003000 10003004 
0000360 10003008 1000300c 10003098 1000309c 
0000400 100030a0 100030a4 00000000 00000008 
0000420 00000012 0000001b 00000025 0000002e 
0000440 00000038 00000040 00000048 00000051 
0000460 0000005a 00000064 0000006e 0000007a 
0000500 00000088 00000096 000000a4 000000ae 
0000520 000000b6 000000c0 000000d2 000000e2 
0000540 000000f0 00000107 00000110 00000116 
0000560 00000121 0000012a 00000132 0000013a 
0000600 00000146 00000153 00000170 00000186 
0000620 000001a9 000001c1 000001de 000001ed 
0000640 000001fb 00000207 0000021b 0000022a 
0000660 0000023d 0000024e 00000269 00000277 
0000700 00000287 00000297 000002b6 000002ca 
0000720 000002dc 000002f0 00000304 00000321 
0000740 0000033e 0000035d 0000037a 00000395 
0000760 000003ae 000003b6 000003be 000003c6 
0001000 000003ce 000003dc 000003e9 000003f8 
0001020 
这里有 132 个值，是 66×2 的阵列。字符串的总量正好是 66。那么，到底是每个字符串符号对应了 2
个 32 位数据，还是说这 2 个 32 位数据完全就是两个互不相干数组呢？我们继续分析。 
以 0x1000 开头的值可能是某种地址。毕竟.SYM 文件是为.DLL 文件服务的，而且 Win32 DLL 文件的
默认基址是 0x10000000，代码的起始地址通常是 0x10001000。 
使用 IDA 工具打开 orawtc8.dll 文件，可以看到它的基址不是默认地址。尽管如此，我们可以看到它的
第一个函数的对应代码为： 
.text:60351000 sub_60351000     proc near 
.text:60351000 
.text:60351000 arg_0              = dword ptr  8 
.text:60351000 arg_4              = dword ptr  0Ch 
.text:60351000 arg_8              = dword ptr  10h 
.text:60351000 
.text:60351000                     push     ebp 
.text:60351001                     mov       ebp, esp 
.text:60351003                     mov       eax, dword_60353014 
.text:60351008                     cmp       eax, 0FFFFFFFFh 
.text:6035100B                     jnz       short loc_6035104F 
.text:6035100D                     mov       ecx, hModule 
.text:60351013                     xor       eax, eax 
.text:60351015                     cmp       ecx, 0FFFFFFFFh 
.text:60351018                     mov       dword_60353014, eax 
.text:6035101D                     jnz       short loc_60351031 
.text:6035101F                     call     sub_603510F0 
.text:60351024                     mov       ecx, eax 
.text:60351026                     mov       eax, dword_60353014 
.text:6035102B                     mov       hModule, ecx 
.text:60351031 
.text:60351031 loc_60351031:                                 ; CODE XREF: sub_60351000+1D 
.text:60351031                     test     ecx, ecx 
.text:60351033                     jbe       short loc_6035104F 
.text:60351035                     push     offset ProcName ; "ax_reg" 
.text:6035103A                     push     ecx                ; hModule 
.text:6035103B                     call     ds:GetProcAddress 
... 
喔，我们好像见过字符串“ax_reg”！它不就是在.SYM 文件的字符串区里的第一个字符串嘛！可见，
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 86 章  Oracle 的.SYM 文件 
839 
这个函数的名字应该就是“ax_reg”。 
上述 DLL 文件的第二个函数是： 
.text:60351080 sub_60351080     proc near 
.text:60351080 
.text:60351080 arg_0              = dword ptr  8 
.text:60351080 arg_4              = dword ptr  0Ch 
.text:60351080 
.text:60351080                     push     ebp 
.text:60351081                     mov      ebp, esp 
.text:60351083                     mov      eax, dword_60353018 
.text:60351088                     cmp      eax, 0FFFFFFFFh 
.text:6035108B                     jnz      short loc_603510CF 
.text:6035108D                     mov      ecx, hModule 
.text:60351093                     xor      eax, eax 
.text:60351095                     cmp      ecx, 0FFFFFFFFh 
.text:60351098                     mov      dword_60353018, eax 
.text:6035109D                     jnz      short loc_603510B1 
.text:6035109F                     call     sub_603510F0 
.text:603510A4                     mov      ecx, eax 
.text:603510A6                     mov      eax, dword_60353018 
.text:603510AB                     mov      hModule, ecx 
.text:603510B1 
.text:603510B1 loc_603510B1:                                 ; CODE XREF: sub_60351080+1D 
.text:603510B1                     test     ecx, ecx 
.text:603510B3                     jbe      short loc_603510CF 
.text:603510B5                     push     offset aAx_unreg ; "ax_unreg" 
.text:603510BA                     push     ecx             ; hModule 
.text:603510BB                     call     ds:GetProcAddress 
... 
“ax_unreg”是字符串区域里的第二个字符串。第二个函数的起始地址是 0x60351080，而在 SYM 文件
里二进制区域的第二个数值正是 10001080。据此推测，文件里的这个值应该就是相对地址，只不过，这个相
对地址的基地址不是默认的 DLL 基址罢了。 
简短截说，在.SYM 文件中那个 66×2 的数据里，前半部分 66 个数值是 DLL 文件里的函数地址。它
们也可能是函数里某个标签的相对地址。那么，由 0x0000 开头的、余下的 66 个值表达的是什么信息呢？
这些数据的取值区间是［0，0x3f8］。它不像是位域的值，只是某种递增序列。关键问题是：每个值的最后
一个数之间没有什么明确关系，它也不像是某种地址信息—地址的值应该是 4、8 或 0x10 的整数倍。 
不妨直接问问您自己：如果您是研发人员，还要在这个文件里写什么数据？即便是瞎猜，也会猜得八
九不离十：目前还缺少文本字符串（函数名）在文件里的地址信息。简单验证可知，的确如此，这些数值
与字符串的第一个字母的地址存在对应关系。 
大功告成。 
此外，我还写了一段把.SYM 文件中的函数名加载到 IDA 脚本的程序，以便.idc 脚本文件自动解析函
数的函数名： 
#include  
#include  
#include  
#include  
#include  
#include  
#include  
int main (intargc, char *argv[]) 
{ 
          uint32_t sig, cnt, offset; 
          uint32_t *d1, *d2; 
          int      h, i, remain, file_len; 
          char    *d3; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
840 
逆向工程权威指南（下册） 
          uint32_t array_size_in_bytes; 
          assert (argv[1]); // file name 
          assert (argv[2]); // additional offset (if needed) 
          // additional offset 
          assert (sscanf (argv[2], "%X", &offset)==1); 
          // get file length 
          assert ((h=open (argv[1], _O_RDONLY | _O_BINARY, 0))!=-1); 
          assert ((file_len=lseek (h, 0, SEEK_END))!=-1); 
          assert (lseek (h, 0, SEEK_SET)!=-1); 
          // read signature 
          assert (read (h, &sig, 4)==4); 
          // read count 
          assert (read (h, &cnt, 4)==4); 
          assert (sig==0x4D59534F); // OSYM 
          // skip timedatestamp (for 11g) 
          //_lseek (h, 4, 1); 
          array_size_in_bytes=cnt*sizeof(uint32_t); 
          // load symbol addresses array 
          d1=(uint32_t*)malloc (array_size_in_bytes); 
          assert (d1); 
          assert (read (h, d1, array_size_in_bytes) == array_size_in_bytes); 
          // load string offsets array 
          d2=(uint32_t*)malloc (array_size_in_bytes); 
          assert (d2); 
          assert (read (h, d2, array_size_in_bytes) ==array_size_in_bytes); 
          // calculate strings block size 
          remain=file_len-(8+4)-(cnt*8); 
          // load strings block 
          assert (d3=(char*)malloc (remain)); 
          assert (read (h, d3, remain)==remain); 
          printf ("#include \n\n"); 
          printf ("static main() {\n"}; 
          for (i=0; i 
static main() { 
          MakeName(0x60351000, "_ax_reg"); 
          MakeName(0x60351080, "_ax_unreg"); 
          MakeName(0x603510F0, "_loaddll"); 
          MakeName(0x60351150, "_wtcsrin0"); 
          MakeName(0x60351160, "_wtcsrin"); 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 86 章  Oracle 的.SYM 文件 
841 
          MakeName(0x603511C0, "_wtcsrfre"); 
          MakeName(0x603511D0, "_wtclkm"); 
          MakeName(0x60351370, "_wtcstu"); 
... 
}  
如需下载本章用到的 oracle 文件，请访问：http://beginners.re/examples/oracle/SYM/。 
此外，我们来研究一下 Win64 下的 64 位 oracle RDBMS。64 位程序的指针肯定就是 64 位数据了吧！
这种情况下，8 字节数据的数据特征就更为明显了。如图 86.5 所示。 
图 86.5  RDBMS for Win64 的.SYM 文件（示例） 
可见，数据表的所有元素都是 64 位数据，字符串偏移量也不例外。此外，大概是为了区别不同的操作
系统，文件的签名改成了 OSYMAM64。 
如需让 IDA 自动加载.SYM 文件中的函数名，可参考我的样本程序：https://github.com/dennis714/porg/ 
blob/master/oracle_sym.c。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 8877 章
章    O
Orraaccllee 的
的..M
MSSDDBB 文
文件
件  
在解决问题时，如果解是已知的，
那么你总会有章可循。 
—————————————— 
《墨菲定律－精确的法则》 
Oracle 的.MSDB 文件是一种含有错误信息和相应错误编号的二进制文件。本章将与您共同研究它的文
件格式，尝试解读其中的原始数据。 
虽然 Oracle RDBMS 提供专门的、文本格式的错误信息文件，但是并非每个.MSB 文件里都有相应的、
文本格式的错误信息文件，所以有时需要把二进制文件和信息文本进行关联分析。 
过滤掉 ORAUS.MSG 的注释以后，文件开头部分的内容如下所示： 
00000, 00000, "normal, successful completion" 
00001, 00000, "unique constraint (%s.%s) violated" 
00017, 00000, "session requested to set trace event" 
00018, 00000, "maximum number of sessions exceeded" 
00019, 00000, "maximum number of session licenses exceeded" 
00020, 00000, "maximum number of processes (%s) exceeded" 
00021, 00000, "session attached to some other process;cannot switch session" 
00022, 00000, "invalid session ID; access denied" 
00023, 00000, "session references process private memory;cannot detach session" 
00024, 00000, "logins from more than one process not allowed in single-process mode" 
00025, 00000, "failed to allocate %s" 
00026, 00000, "missing or invalid session ID" 
00027, 00000, "cannot kill current session" 
00028, 00000, "your session has been killed" 
00029, 00000, "session is not a user session" 
00030, 00000, "User session ID does not exist." 
00031, 00000, "session marked for kill" 
... 
其中，第一个数字是错误编号，第二个数字可能是某种特殊的标识信息。 
现在，我们打开 ORAUS.MSB 的二进制文件，然后找到这些字符串，如图 87.1 所示。 
文本字符串之间掺杂着二进制的数据。简单分析之后，可知文件的主体部分可分为多个固定长度的信息
块，每个信息块的大小是 0x200（512）字节。 
首先查看第一个信息块的数据，如图 87.2 所示。 
可以看到第一条错误信息的文本内容。此外，我们还注意到错误信息之间没有零字节；也就是说，这些
字符串不是以零字节分割的 C 语言字符串。作为一种替代机制，文件中必须有某个数据记录字符串的长度。 
然后我们来找找它的错误代码。参照 ORAUS.MSG 文件起始部分的错误编号，我们在.msb 文件中找到
取值为错误编号的几个字节：0，1，17（0x11），18（0x12），19（0x13），20（0x14），21（0x15），22（0x16），
23（0x17），24（0x18）……笔者在这个信息块里找到了这些数字，并且在图 87.2 里用红线标出它们。相
邻两个错误代码之间的空间周期是 6 个字节。这意味着每条错误信息可能都占用 6 个字节。 
第一个 16 位值（0xA 即 10）代表着每个信息块包含的错误信息的总数—其他信息块的调查结果印
证了这一猜想。稍微想一下就知道错误信息（文本字符串）的长度不会是一致的。这种字符串有长有短，
但是信息块的尺寸却是固定的。所以，程序无法事先知道每个信息块装载了多少个文本字符串。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 87 章  Oracle 的.MSDB 文件 
843 
图 87.1  Hiew：第一个消息块 
图 87.2  Hiew：第一个消息块 
刚才讲过，这些字符串不是以零字节分割的 C 语言字符串，其字符串长度肯定位于文件中的其他什么
地方。字符串“normal，successful completion”有 29（0x1D）字节，另一个字符串“unique constraint（%s.%s）
violated”有 34 个（0x22）字节。但是在这个信息块里，我们找不到 0x1d 或者 0x22。 
一般来说，Oracle RDBMS 应当需要确定每个字符串在信息块之中的相对位置。第一个字符串“normal，
successful completion”在整个文件中的绝对位置是 0x1444，在信息块中的相对位置是 0x44。同理可得第二
个字符串“unique constraint（%s.%s）violated”的位置 0x1461 和 0x61。这两个数（0x44 和 0x61）并不陌
生！在信息块中的前几个字节里就有这些数字。 
综上所述，我们分析出了各个信息块里 6 字节非文本信息的格式： 
 16 位错误代码。 
 16 位的零（可能含有其他的标识信息）。 
 16 位的字符串地址信息，用于标记字符串在当前信息块的相对位置。 
这些猜想可以被事实验证。在信息块中的最后一个 6 字节的、错误信息为“dummy”的信息块，它的
异步社区会员 dearfuture(15918834820) 专享 尊重版权
844 
逆向工程权威指南（下册） 
错误编号为零、起始位置指向最后一个错误信息的最后一个字符之后的位置。或许这个凑数的字符串偏改
量用于标记上一个字符串的结束符？至此为止，我们可以根据 6 字节数据的信息，索引指定的错误编号，
从而获取文本字符串的起始位置。我们还知道源程序会根据下一个 6 字节数据块推算本字符串的文本长度。
这样一来，我们可以确定字符串的界限。这种文件格式不必存储字符串的长度，因而十分节省空间。我们
可能无法判断它最终能压缩多少文件空间，但是这无疑是一种不错的思路。 
此后，我们返回来分析.MSB 文件的文件头信息。信息的总数如图 87.3 中红线部分所示。 
图 87.3  Hiew：文件头 
对其他.MSB 文件进行了验证之后，我确信所有的推测都准确无误。虽然文件头中还富含其他信息，
但是我们的目标（供调试工具调用）已经达成，故而本文不再分析那些数据。除非我们要编写一个.MSB
文件的封装程序，否则就不需要理解其他数据的用途。 
如图 87.4 所示，在文件头之后还有一个 16 位数值构成的数据表。 
图 87.4  Hiew：last_errnos 表 
如图 87.4 中的红线所示，这些数据的数据宽度可以直接观察出来。在导出这些数据时，我发现这些 16
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 87 章  Oracle 的.MSDB 文件 
845 
位数据就是每个信息块里最后一个错误信息的错误编号。 
可见，Oracle RDBMS 通过这部分数据进行快速检索的过程大体如下： 
 加载 last_errnos（随便起的名字）数据表。这个数据表包含每个信息块里的错误信息总数。 
 依据错误编号找到相应的信息块。此处假设各信息块中的信息以错误代码的增序排列。 
 加载相应的信息块。 
 逐一检索 6 字节的索引信息。 
 通过当前 6 字节数据找到字符串的第一个字符的位置。 
 通过下一个 6 字节数据找到最后一个字符的位置。 
 加载这个区间之内的全部字符。 
我编写了一个展开.MSB 信息的 C 语言程序，有兴趣的读者可通过下述网址下载：http://beginners.re/ 
examples/oracle/MSB/oracle_msb.c。 
本例还用到了 Oracle RDBMS 11.1.06 的两个文件，如需下载请访问： 
 go.yurichev.com/17214。 
 go.yurichev.com/17215。 
总结 
对于现在的计算机系统来说，本章介绍的这种方法可能已经落伍了。恐怕只有那些在 20 世纪 80 年代中
期做过大型工程、时刻讲究内存和磁盘的利用效率的老古董才会制定这样严谨的文件格式。无论怎样，这
部分内容颇具代表性。我们可以在不分析 Oracle RDBMS 代码的前提下理解它的专用文件的文件格式。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第十
十部
部分
分  
其
其他
他  
异步社区会员 dearfuture(15918834820) 专享 尊重版权
848 
逆向工程权威指南 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 8888 章
章    nnppaadd  
“npad”指令是一种汇编宏，用于把下一个指令标签的首地址向指定边界对齐。 
被 npad 指令对齐的标签，通常都是需要被多次跳转到的地址标签。例如，在各种循环体起始地址处的
标签之前，我们经常可以看到 npad 指令。它可通过对齐内存地址、内存总线或缓存线等手段，提高 CPU
加载数据（或指令代码）的访问效率。 
下面这段代码摘自 MSVC 的文件 listing.inc。 
顺便提一下，这都是 NOP 指令的变种。虽然这些指令没有实际的操作意义，但是它们可以占用不同的
空间。 
出于 CPU 性能的考虑，下述代码没有使用多条 NOP 指令，而是使用了单条指令。 