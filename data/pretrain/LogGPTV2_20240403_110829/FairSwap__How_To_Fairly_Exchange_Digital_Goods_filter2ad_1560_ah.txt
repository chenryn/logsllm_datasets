cfe
GL,H
coins in the ledger L and outputs (sold , id ) to ˜S∗. If instead π = 1, SimS
a complaint. He does this by running (not sold , id ) ← GL,H
terminate normally. Then SimS
1 outputs (not sold , id ) to ˜S∗ and terminates.
(ﬁnalize, id ) and send (abort, id ) to F L
jc
jc
4. If π = ⊥, SimS
jc
The output (bought, id , x) of R in step (3) is is identical to the real world execution, since it
is computed in the same way, as the extraction of z using key k. The same holds for the outputs
36
jc
1 makes sure to simulate messages of GL,H
to ˜S∗ in round (1), (2) and (4) since they are generated by the simulation of GL,H
, which the
honestly generated inputs of R. The environment Z will only be able to distinguish the real world
execution from the execution of Game 1 if messages are sent in diﬀerent rounds or coins are frozen/
unfrozen diﬀerently in L. SimS
cfe in the same
round as Z instructs him on the inﬂuence port. Only in the case where an honest receiver would
send the ﬁnalize message, SimS makes sure that the abort is received by F L
cfe in the same round
as it unfreezes the coins for S. This is necessary, since the input to F L
cfe is not correct and upon
cfe would not assign the coins to S. But by immediately aborting and triggering the
checking, F L
unfreeze, SimS can successfully simulate the case of no complaint.
1 further to
work in the F L
cfe world. Mainly, it must not be able to control inputs and outputs of honest parties
like depicted in Figure 10. Instead it needs to utilize the observability functions of the random
oracle and learn the witness x from the messages send by S in the ﬁrst round of the protocol and
input this witness to the ideal functionality F L
cfe. Instead of constructing a new simulator we will
only highlight the diﬀerences to the previous simulator SimS
1 .
Since Game 1 does not capture the full functionality of SimS, we need to adapt SimS
and F L
jc
Simulator SimS for corrupted sender
1. Upon receiving message (sell , id , z, φ, c) over ˜S∗ in the ﬁrst round, SimS learns Qid from
querying H(observe) and checks if (k||d, c) ∈ Qid . If such a query exists in Q SimS runs
(x, π) = Extract(φ, z, k). If no such query exists, or ˜S∗ never send sell , set x = 1n×λ.
receiving
(init, id , p, q, c, rz, rφ)
Upon
(init, id , φ, p, q, x) to F L
cfe.
sending (initialized , p, c, rφ, rz) = GL,H
If ˜S∗ did not send both messages sell and init, SimS aborts the simulation.
send
Simulate the execution of the hybrid functionality by
(init, id , p, c, rz, rφ) to ˜S∗.
through
round,
ﬁrst
the
in
jc
˜S∗
2. When SimS receives (buy, id ,R) from F L
(accept, id ). If no message from F L
simulate that this was performed by the judge smart contract, SimS
GL,H
simulation.
cfe, it means that the p coins were frozen in L. To
1 runs (active, id ) =
cfe was received until round 3, SimS
1 terminates the
jc
3. Upon receiving (reveal , id , d, k) from ˜S∗ in round 3, such that Open(c, d, k) = 1, SimS
1 runs (revealed , id , d, k) ←
cfe to output of x∗ to R. Additionally SimS
triggers F L
GL,H
If no message (reveal , id , d, k) from ˜S∗ is received, send (abort, id ) to F L
S∗ and simulate the refund in the hybrid world by running GL,H
(reveal , id , d, k) to simulate the execution of Π.
cfe in the name of
until it terminates.
jc
1
jc
4. Upon receiving (sold , id )from F L
cfe, SimS simulates the execution of GL,H
jc
by outputting
(sold , id ) ← GL,H
(ﬁnalize, id ) to ˜S∗. Then SimS terminates.
jc
from F L
cfe,
SimS
runs
(not sold , id ) ←
If
GL,H
instead he
(complain, id , π) and terminates.
receives
(not sold , id )
jc
Since SimS cannot control the output of R anymore, it needs to guarantee that F L
cfe outputs
(bought, id , x) in step (3) to the honest receiver R. Therefore, SimS has to input x to F L
cfe in the
ﬁst step of the execution. But since SimS does not know x he has to learn it from the inputs of S∗.
Speciﬁcally, he uses the observability property of the global random oracle H to get a list Qid of all
37
(Gjc,L,H)-Hybrid World
Ideal World
leakage
inﬂuence
H
GL,H
jc
A
secure channel
R
e
c
n
e
u
ﬂ
n
i
e
g
a
k
a
e
l
S
S
n
i
S
t
u
o
outS
inS
˜S
SimR
F L
cfe
inR
outR
˜R∗
e
c
n
e
u
ﬂ
n
i
e
g
a
k
a
e
l
Z
Z
(a) (Gjc,L,H)-hybrid world execution of Π with
S,R∗ and A
(b) Execution of F L
˜R∗ and SimR
cfe with dummy parties ˜S and
Figure 11: Simulation against Z with honest sender S and malicious receiver R∗
queries to H that were made by the environment (directly or over some adversary). We distinguish
the following cases now: (a) Either the commitment is not correct, in this case SimS cannot learn
k from Qid (this is identical to the case that k was programmed, which makes the commitment
invalid), or (b) the commitment was done correctly. In case (a) the execution of the real world
protocol will fail just as the simulation with overwhelming probability, since Z will not be able to
provide a opening to commitment c, such that the opening is accepted by GL,H
, except if Z guesses
c, d such that later H upon being queried k||d responds with exactly with c. Since H selects the
query response randomly from {0, 1}µ this only happens with probability 1
2µ , which is negligible
for large µ. Case (b) occurs when the tuple (k||d, c) is stored in the set Qid . This allows SimS to
run the extraction algorithm, just like the honest sender will and recover x. If the commitment is
opened correctly in step (3), the honest receiver in the real world would output x, just as in the
cfe in our case. It is only possible to distinguish these two cases if Z managed to
interaction with F L
ﬁnd a collision, i.e, Z must commit to one key and open to another key, i.e., ﬁnd a (k, d), (k(cid:48), d(cid:48))
such that Open(c, d, k) = Open(c, d(cid:48), k(cid:48)) = 1 But from the binding property of the commitment
scheme follows that this is not possible except with negligible probability. Thus, we have shown
that the hybrid and ideal world are indistinguishable to the environment Z if the commitment of
the key is binding. This concludes the proof for the case of a malicious sender.
jc
C.3 Simulation with a malicious receiver
Next, we will show security against malicious receivers (denoted as R∗). The setup of the simulation
is symmetrical to the one with malicious sender and is depicted in Figure 11.
Claim 3. There exists a eﬃcient algorithm SimR such that for all ppt environments Z, that only
corrupt the receiver it holds that the execution of Π in the (Gjc,L,H)-hybrid world in presence
of adversary A is computationally indistinguishable from the ideal world execution of F L
cfe with the
38
ideal adversary SimR.
Proof. The main challenge for SimR in this proof is to provide the encoding z without knowledge
of the witness x in the ﬁrst round and to present key k in the third step such that the decryption
of z yields x. Additionally, the key he provides during the reveal phase has to correctly open a
commitment c, which SimR has to output in the ﬁrst step. In order to construct this simulator,
we will mainly utilize the programmability property of the global random oracle H. Again, we
construct the simulator using multiple experiments Game 1, Game 2 and Game 3, which represents
the ideal world execution with F L
cfe.
We start with the ﬁrst experiment Game 1, in which we give the adversary SimR
1 the extra power
to learn all inputs and give all outputs to honest parties. In our case we require that it can read the
input of the dummy party ˜S in the ﬁrst round, which is the message (sell , id , φ, p, x). Speciﬁcally
SimR
1 learns x in this round, which he would not know otherwise. Now we sketch the algorithm of
our simulator SimR
1 with knowledge of x
Simulator SimR
1
1. The simulation starts when ˜S sends (sell , id , φ, p, x) to F L
1 simulates the execution of
Π by randomly sampling a key k, encoding φ(x) to z and sending (sell , id , z∗, φ, c∗) to R∗.
When the functionality outputs (sell , id , φ, p,S) to the corrupted receiver SimR internally
runs GL,H
and outputs (init, id , p, c∗, rφ, rz) instead (where c is the commitment and rφ and
rz are the Merkle root hashes as deﬁned in the protocol).
cfe. SimR
jc
2. If the corrupt receiver accepts the exchange, SimR
1 sends message (buy, id , φ, p) to F L
1 receives a message (accept, id ) from ˜R∗
cfe and simulates the judge
in round 2. In this case SimR
contract by sending (active, id ) ← GL,H
jc
(accept, id ) to R∗.
3. In the reveal phase SimR
(reveal , id , d, k) to R∗.
GL,H
jc
1 simulates the honest sender by outputting (revealed , id , d, k) ←
4. In the payout phase the corrupt sender can either accept the ﬁle, complain or abort the
1 waits for the message of ˜R∗ in the next round. If he
protocol execution altogether. SimR
receives a message (complain, id , π) where π is a valid complain, SimR
cfe continue,
cfe and GL,H
this way the output of F L
(complain, id , π) will be identical, namely (sold , id ) if
If SimR instead receives a message (ﬁnalize, id ), he
φ(x) = 1 or (not sold , id ) otherwise.
sends (abort,R∗) to F L
cfe and immediately triggers the unfreezing of p coins. This way the
output of (sold , id ) and the unfreezing of coins will be indistinguishable to Z, even when
the sent witness is false, i.e., φ(x) = 1. The third case occurs when SimR
1 does not receive
any valid message from ˜R∗ in round 4. In this case, he sends (abort,R∗) to F L
cfe and waits
one round before he triggers the unfreezing of coins. This way, the behavior of F L
cfe will be
indistinguishable from the judge smart contract of input of (ﬁnalize, id ), which an honest
sender would always send in round 5.
1 lets F L
jc