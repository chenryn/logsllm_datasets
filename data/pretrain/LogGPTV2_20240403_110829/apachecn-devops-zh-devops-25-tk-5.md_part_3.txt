  "resources": [
    {
      "name": "namespaces/http_req_per_second_per_replica",
      "singularName": "",
      "namespaced": false,
      "kind": "MetricValueList",
      "verbs": [
        "get"
      ]
    },
    {
      "name": "ingresses.extensions/http_req_per_second_per_replica",
      "singularName": "",
      "namespaced": true,
      "kind": "MetricValueList",
      "verbs": [
        "get"
      ]
    },
    {
      "name": "ingresses.extensions/http_req_per_second",
      "singularName": "",
      "namespaced": true,
      "kind": "MetricValueList",
      "verbs": [
        "get"
      ]
    },
    {
      "name": "namespaces/http_req_per_second",
      "singularName": "",
      "namespaced": false,
      "kind": "MetricValueList",
      "verbs": [
        "get"
      ]
    }
  ]
}
```
我们可以看到有四个指标可用，两个`http_req_per_second`和两个`http_req_per_second_per_replica`。我们定义的两个指标中的每一个都可以用作`namespaces`和`ingresses`。现在，我们不关心`namespaces`，我们将专注于`ingresses`。
我假设自从我们发送了一百个请求以来，至少过了五分钟(或更长时间)。如果没有，你是一个快速的读者，你将不得不等待一段时间，然后我们再发送一百个请求。我们即将根据自定义指标创建我们的第一个 HPA，我想确保您看到它在激活前后的表现。
现在，让我们来看看 HPA 的定义。
```
 1  cat mon/go-demo-5-hpa-ing.yml
```
输出如下。
```
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: go-demo-5
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: go-demo-5
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Object
    object:
      metricName: http_req_per_second_per_replica
      target:
        kind: Namespace
        name: go-demo-5
      targetValue: 50m
```
定义的前半部分应该很熟悉，因为它与我们以前使用的没有什么不同。它将在`3`和`10`之间维护`go-demo-5`部署的副本。新东西在`metrics`区。
过去我们用`spec.metrics.type`设置为`Resource`。通过这种类型，我们定义了 CPU 和内存目标。然而这一次，我们的类型是`Object`。它指的是描述单个 Kubernetes 对象的度量，在我们的例子中，它恰好是来自 Prometheus 适配器的自定义度量。
如果我们浏览一下 *ObjectMetricSource v2beta1 自动缩放*([https://kubernetes . io/docs/reference/generated/kubernetes-API/v 1.12/# ObjectMetricSource-v2 beta 1-自动缩放](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.12/#objectmetricsource-v2beta1-autoscaling))文档，我们可以看到`Object`类型的字段与我们之前使用`Resources`类型时的字段不同。我们将`metricName`设置为我们在普罗米修斯适配器(`http_req_per_second_per_replica`)中定义的度量。
请记住，它不是一个度量，而是我们定义了一个表达式，适配器使用该表达式从普罗米修斯获取数据，并将其转换为自定义度量。在本例中，我们得到了进入入口资源的请求数，并除以部署的副本数。
最后将`targetValue`设置为`50m`或每秒 0.05 个请求。我有意将其设置为一个非常低的值，以便我们可以轻松到达目标并观察发生了什么。
我们来`apply`一下定义。
```
 1  kubectl -n go-demo-5 \
 2      apply -f mon/go-demo-5-hpa-ing.yml
```
接下来，我们将描述新创建的 HPA，看看我们是否可以观察到任何有趣的东西。
```
 1  kubectl -n go-demo-5 \
 2      describe hpa go-demo-5
```
输出限于相关部分，如下所示。
```
...
Metrics:         ( current / target )
  "http_req_per_second_per_replica" on Namespace/go-demo-5: 0 / 50m
Min replicas:    3
Max replicas:    10
Deployment pods: 3 current / 3 desired
...
```
我们可以看到`Metrics`部分只有一个条目。HPA 正在使用基于`Namespace/go-demo-5`的自定义指标`http_req_per_second_per_replica`。此时，当前值为`0`，`target`设置为`50m`(每秒 0.05 个请求)。如果`current`值是`unknown`，请稍等片刻，然后重新运行命令。
再往下，我们可以看到部署吊舱的`current`和`desired`数量都设置为`3`。
总之，没有达到目标(有`0`的请求)，所以 HPA 没有必要做任何事情。它保持最小数量的副本。
让我们通过产生一些流量来增加一点趣味。
```
 1  for i in {1..100}; do
 2      curl "http://$GD5_ADDR/demo/hello"
 3  done
```
我们向入口发送了一百个请求。
我们再`describe`一下 HPA，看看有没有变化。
```
 1  kubectl -n go-demo-5 \
 2      describe hpa go-demo-5
```
输出限于相关部分，如下所示。
```
...
Metrics:                                                   ( current / target )
  "http_req_per_second_per_replica" on Ingress/go-demo-5:  138m / 50m
Min replicas:                                              3
Max replicas:                                              10
Deployment pods:                                           3 current / 6 desired
...
Events:
  ... Message
  ... -------
  ... New size: 6; reason: Ingress metric http_req_per_second_per_replica above target
```
我们可以看到度量的`current`值增加了。我的情况是`138m`(每秒 0.138 个请求)。如果您的输出仍然显示`0`，您将不得不等待直到普罗米修斯提取度量，直到适配器获取它们，直到 HPA 刷新它的状态。换句话说，等待几分钟，然后重新运行前面的命令。
考虑到`current`值高于`target`，在我的情况下，HPA 将`Deployment pods`的`desired`号更改为`6`(您的号码可能会因公制值而异)。因此，HPA 通过更改其副本数量来修改部署，我们应该会看到更多 Pods 正在运行。通过`Events`部分，这一点变得更加明显。应该会有一条新消息说明`New size: 6; reason: Ingress metric http_req_per_second_per_replica above target`。
为了安全起见，我们将在`go-demo-5`名称空间中列出 Pods，并确认新的 Pods 确实正在运行。
```
 1  kubectl -n go-demo-5 get pods
```
输出如下。
```
NAME           READY STATUS  RESTARTS AGE
go-demo-5-db-0 2/2   Running 0        19m
go-demo-5-db-1 2/2   Running 0        19m
go-demo-5-db-2 2/2   Running 0        10m
go-demo-5-...  1/1   Running 2        19m
go-demo-5-...  1/1   Running 0        16s
go-demo-5-...  1/1   Running 2        19m
go-demo-5-...  1/1   Running 0        16s
go-demo-5-...  1/1   Running 2        19m
go-demo-5-...  1/1   Running 0        16s
```
我们可以看到现在有六个`go-demo-5-*`吊舱，其中三个比其余的要年轻得多。
接下来，我们将探索当流量下降到百帕以下时会发生什么。我们暂时什么都不做就能做到。因为只有我们向应用发送请求，所以我们所要做的就是静止五分钟，或者更好的是，利用这段时间去取咖啡。
我们需要等待至少五分钟的原因在于 HPA 用于放大和缩小的频率。默认情况下，只要`current`值高于`target`，HPA 将每三分钟放大一次。缩小规模需要五分钟。只有当`current`值自上次放大后低于目标至少三分钟时，HPA 才会缩小。
总之，我们需要等待五分钟或更长时间，才能看到相反方向的缩放效果。
```
 1  kubectl -n go-demo-5 \
 2      describe hpa go-demo-5
```
输出限于相关部分，如下所示。
```
...
Metrics:         ( current / target )
  "http_req_per_second_per_replica" on Ingress/go-demo-5:  0 / 50m
Min replicas:    3
Max replicas:    10
Deployment pods: 3 current / 3 desired
...
Events:
... Age   ... Message