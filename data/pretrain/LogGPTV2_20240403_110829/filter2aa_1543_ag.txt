Click on the Create Role button. It will create this new role.
8.
There are the following four types of IAM roles available in AWS for various use cases:
AWS service role
There are scenarios where an AWS service such as Amazon EC2 needs to perform actions
on your behalf, for example, an EC2 instance would need to access S3 buckets for uploading
some files, so we'll create an AWS Service Role for EC2 service and assign this role to the
EC2 instance. While creating this service role, we'll define all the permissions required by
the AWS service to access other AWS resources and perform all actions.
The following figure shows various AWS service roles available in IAM:
Figure 4 - AWS Service Role types
AWS Identity and Access Management
[ 50 ]
AWS SAML role
SAML 2.0 (Security Assertion Markup Language 2.0) is an authentication protocol that is
most commonly used between an identity provider and service provider. AWS allows you
to create roles for SAML 2.0 providers for identity federation. So, if your organization is
already using identity provider software that is compatible with SAML 2.0, you can use it to
create trust between your organization and AWS as service provider. This will help you
create a single sign on solution for all users in your organization.
You can also create your own custom identity provider solution that is compatible with
SAML 2.0 and associate it with AWS.
The following figure shows the AWS SAML 2.0 role available in IAM dashboard:
Figure 5 - AWS SAML Role
AWS Identity and Access Management
[ 51 ]
Role for cross-account access
This role supports two scenarios, the first enabling access between your multiple AWS
accounts and the second enabling access to your AWS account by resources in other AWS
accounts that are not owned by you. Roles are the primary way to support scenarios for
cross-account access and enabling delegation. You can use this role to delegate permissions
to another IAM user.
The following figure shows the various options available for cross-account access:
Figure 6 - AWS cross-account access roles
AWS Identity and Access Management
[ 52 ]
Role for Web Identity Provider
There are times when you will have a requirement to provide access to resources in your
AWS account for users who are not authorized to use AWS credentials; instead they use
either web identity providers such as Facebook, Amazon, and so on, for sign in or any
identity provider compatible with OpenID Connect (OIDC). When users are authenticated
by these external web identity providers, they will be assigned an IAM role. These users
will receive temporary credentials required to access AWS resources in your AWS account.
The following figure the shows various options available for creating roles for Identity
provider access:
Figure 7 - AWS identity provider access roles
Let us also look at the other terms used with reference to IAM roles.
AWS Identity and Access Management
[ 53 ]
Identity Provider and Federation
As we have seen earlier, we can manage user identities for our IAM users either in AWS or
outside of AWS by using IAM identity providers. You can give access to your AWS
resources to the user whose identities are managed by AWS or outside of AWS. This
functionality supports scenarios where your users are already managed by your
organization's identity management system, such as Microsoft Active Directory. It also
supports use cases where an application or a mobile app needs to access your AWS
resources.
Identity providers help keep your AWS account secure because your credentials are not
embedded in your application. To use an identity provider, you will need to create an IAM
identity provider entity to establish a trust relationship between your AWS account and the
identity provider. AWS supports two types of identity providers:
OpenID Connect Compatible
SAML 2.0 Compatible
You can create an identity provider from the IAM dashboard. This creates trust between
your AWS account and identity provider. For more information on how to create identity
providers, please visit the following URL:
http:/​/​docs.​aws.​amazon.​com/​IAM/​latest/​UserGuide/​id_​roles_​providers_​create.​html
Alternatively, if you have users of a mobile application that need access to your AWS
resources, you can use the web identity federation. These users can sign in using the already
established and popular identity providers such as Facebook, Amazon, Google, and so on
and receive an authorization token. This token can be exchanged for temporary security
credentials. These credentials will be mapped to an IAM role that will have permissions to
access AWS resources.
AWS, however, recommends that for most scenarios, Amazon Cognito should be used
instead of web identity federation as it acts as an identity broker and does much of the
federation work for you. We will look at Amazon Cognito in the subsequent chapters.
AWS Identity and Access Management
[ 54 ]
Delegation
Delegation means granting permission to users in another AWS account to allow access to
resources that you own in your AWS account. It involves setting up a trust relationship
between two AWS accounts. The trusting account owns the resource and the trusted
account contains users needing access for resources. The trusted and trusting accounts can
be any of the following:
The same account
Two accounts that are both under your (organization's) control
Two accounts owned by separate organizations
For delegation, you start by creating an IAM role with two policies, a permissions policy
and a trust policy. The permissions policy takes care of permissions required to perform
actions on an AWS resource and the trust policy contains information about trusted
accounts that are allowed to grant its users permissions to assume the role.
A trust policy for roles can't have a wildcard (*) as a principal. The trust policy on the role in
the trusting account is one-half of the permissions. The other half is a permissions policy
attached to the user in the trusted account that allows that user to switch to, or assume the
role. A user who assumes a role temporarily gives up his or her own permissions and
instead takes on the permissions of the role. The original user permissions are restored
when the user stops using the role or exits. An additional parameter external ID helps
ensure secure use of roles between accounts that are not controlled by the same
organization.
Temporary security credentials
When you have a requirement to create temporary security credentials instead of persistent,
long term security credentials, you will use the AWS Security Token Service (STS) to
create temporary security credentials for users to access your AWS resources. AWS
recommends using these credentials over persistent ones as these are more secure and are
managed by AWS. Temporary credentials are useful in scenarios that involve identity
federation, delegation, cross-account access, and IAM roles. These credentials are almost
similar to access key credentials that are created for IAM users except for few a differences
as mentioned in the following:
AWS Identity and Access Management
[ 55 ]
As the name implies, temporary security credentials are short lived. You can
configure them to be valid from a minimum of 15 minutes to a maximum of 36
hour in case of configuring custom identity broker; the default value is 1 hour.
Once these credentials expire, AWS no longer recognizes them and all requests
for access are declined.
Unlike access keys that are stored locally with the user, temporary security
credentials are not stored with the user. Since they are managed by AWS, they
are generated dynamically and provided to the user when requested, following
the principle of last minute credential. The user can request these credentials
when they expire or before they expire as long as this user has permissions to
request them.
These differences give the following advantages for using temporary credentials:
You do not have to distribute or embed long-term AWS Security credentials with
an application. So, you do not risk losing security credentials if your application
is compromised.
You can provide access to your AWS resources to users without creating an AWS
identity for them. It helps keep your user management lean. Temporary
credentials are the basis for roles and identity federation.
The temporary security credentials have a limited lifetime and they are not
reusable once they expire. You don't have to worry about defining a credentials
policy or ensure if they are rotated periodically, as these tasks are taken care of by
AWS internally. You also don't have to plan on revoking them as they are short
lived.
AWS Security Token Service
The AWS STS is a web service that enables you to request temporary, limited privilege
credentials for IAM users or for users that you authenticate (federated users) to use.
Essentially, temporary security credentials are generated by AWS STS.
By default, AWS STS is a global service with a single endpoint at https:/​/​sts.​amazonaws.
com, this endpoint points to the US-East-1 (Northern Virginia) region. You can use STS in
other regions as well that support this service. This will help you to reduce latency by
sending requests to regions closer to you/your customers. Credentials generated by any
region are valid globally. If you don't want any region to generate credentials, you can
disable it.
AWS Identity and Access Management
[ 56 ]
AWS STS supports AWS CloudTrail, so you can record and analyze information about all
calls made to AWS STS, including who made requests, how many were successful, and so
on.
When you activate a region for an account, you enable the STS endpoints in that region to
issue temporary credentials for users and roles in that account when a request is made to an
endpoint in the region. The credentials are still recognized and are usable globally. It is not
the account of the caller, but the account from which the temporary credentials are
requested that must activate the region.
AWS STS is offered to all AWS users at no additional charge. You are charged only for
services accessed by users having temporary security credentials that are obtained through
AWS STS.
The account root user
The account root user is a user that is created when you first create an AWS account using
an email id and password. This user has complete access to all AWS services and all
resources for this AWS account. This single sign-in identity is known as the root user.
AWS strongly recommends that you do not use the root user for your everyday tasks, even
the administrative ones. Instead, use the root account to create your first IAM user and use
this first IAM user for all the tasks such as creating additional users or accessing AWS
services and resources. AWS recommends that you should delete your root access keys and
activate MFA for root user. Root user should be used for performing handful of tasks that
specifically require you to use root user. Following are some of such tasks:
Changing your root account information, such as changing the root user
password
Updating your payment information
Updating your support plan
Closing your AWS account
You can find detailed lists of all tasks at http:/​/​docs.​aws.​amazon.​com/​general/​latest/
gr/​aws_​tasks-​that-​require-​root.​html.
AWS Identity and Access Management
[ 57 ]
The following figure shows the IAM dashboard along with recommendations for the
account root user:
Figure 8 - AWS account root user recommendations
IAM Authorization
When you create an AWS account, it has a user known as root user. This user has, by
default, access to all AWS service and resources. No other user (or any IAM entity) has any
access by default and we have to explicitly grant access for all users. In this section, we'll
talk about authorization in IAM or access management, it is made up of the following two
components:
Permissions
Policy
Permissions
Permissions let you take actions on AWS resources. It allows your users (AWS identities) to
perform tasks in AWS. When you create a new user (except for the root user), it has no
permission to take any action in AWS. You grant permissions to the user by attaching a
policy to that user. So, for example, you can give permission to a user to access certain S3
buckets or to launch an EC2 instance.
AWS Identity and Access Management
[ 58 ]
Permissions can be assigned to all AWS identities such as users, groups, and roles. When
you give permission to a group, all members of that group get that permission and if you
remove a permission from a group, it is revoked from all members of that group.
You can assign permissions in couple of ways:
Identity-based: These permissions are assigned to AWS identities such as users,
groups, and roles. They can either be managed or inline (we'll talk about
managed and inline in our Policies section).
Resource-based: These permissions are assigned to AWS resources such as
Amazon S3, Amazon EC2. Resource-based permissions are used to define who
has access to an AWS resource and what actions they can perform on it.
Resource-based policies are inline only, not managed.
Let us look at examples for each of them:
Identity-based: These permissions are given to identities such as IAM users or
groups. For example, there are two IAM users, Albert and Mary. Both have
permissions to read S3 buckets and provision EC2 instances.
Resource-based: These permissions are given to AWS resources, such as S3
buckets or EC2 instances. For example, an S3 buckets has allowed access for
Albert and Mary; an EC2 service is allowing access for Albert and Mary to
provision EC2 instances.
Note that resource-based and resource level permissions are different.
Resource-based permissions can be attached directly to a resource whereas
resource level goes a level deeper by giving you the ability to manage
what actions can be performed by users as well as which resources those
actions can be performed upon.
Some AWS services lets you specify permissions for actions such as list, read, write and so
on, but they don't let you specify the individual resources such as EC2, S3, RDS and so
on. There are a handful of AWS services that support resource-based permissions such as
EC2, Virtual Private Cloud (VPC) and so on.
The following are six IAM permission types that are evaluated for integration with each
AWS service:
Action-level permissions: The service supports specifying individual actions in a
policy's action element. If the service does not support action-level permissions,
policies for the service use wildcard (*) in the Action element.
AWS Identity and Access Management
[ 59 ]
Resource-level permissions: The service has one or more APIs that support
specifying individual resources (using ARNs) in the policy's resource element. If
an API does not support resource-level permissions, then that statement in the
policy must use * in the Resource element.
Resource-based permissions: The service enables you to attach policies to the
service's resources in addition to IAM users, groups, and roles. The policies
specify who can access that resource by including a Principal element.
Tag-based permissions: The service supports testing resource tags in a condition
element.
Temporary security credentials: The service lets users make requests using
temporary security credentials that are obtained by calling AWS STS APIs like
AssumeRole or GetFederationToken.
Service linked roles: The service requires that you use a unique type of service
role that is linked directly to the service. This role is pre-configured and has all
the permissions required by the service to carry out the task.
A detailed list of all services that IAM integrates with is available at the following URL:
http:/​/​docs.​aws.​amazon.​com/​IAM/​latest/​UserGuide/​reference_​aws-​services-​that-
work-​with-​iam.​html
Many AWS services need to access other AWS services, for example, EC2 might need to
access a bucket on S3 or EC2 might need to access an instance on RDS. They need to
configure permissions to perform such access, this configuration is provided in detail in the
documentation of AWS services.
Policy
A policy is a document listing permissions in the form of statements. It is a document in
JavaScript Object Notation (JSON) format. It is written according to the rules of the IAM
policy language which is covered in the next section. A policy can have one or more
statements, with each statement describing one set of permissions. These policies can be
attached to any IAM identities such as users, roles, or groups. You can attach more than one
policy to an entity. Each policy has its own Amazon Resource Name (ARN) that includes
the policy name and is an entity in IAM.
AWS Identity and Access Management
[ 60 ]
Fundamentally, a policy contains information about the following three components:
Actions: You can define what actions you will allow for an AWS service. Each
AWS service has its own set of actions. So, for example, you allow the describe-
instances action for your EC2 instances, that describes one or more instances
based on the instance-id passed as a parameter. If you do not explicitly define
an action it is denied by default.
Resources: You need to define what resources actions can be performed on. For
example, do you want to allow the describe-instances action on one specific
instance or range of instances or all instances. You need to explicitly mention
resources in a policy, by default, no resources are defined in a policy.
Effect: You define what the effect will be when a user is going to request access,
and there are two values that you can define: allow or deny. By default, access to
resources are denied for users, so you would normally specify allow for this
component.
The following is a sample policy used to allow all describe actions for all EC2 instances:
{
 "Version": "2012-10-17",
 "Statement": [
 {
 "Effect": "Allow",
 "Action": "ec2:Describe*",
 "Resource": "*"
 }
]
}
Let us look at the following important elements of a policy.
Statement
The Statement element is the most important and required element for a policy. It can
include multiple elements and it can also have nesting of elements. The Statement element
contains an array of individual statements. Each individual statement is a JSON block
enclosed in braces { }.
AWS Identity and Access Management
[ 61 ]
Effect
This element is required as well. It specifies if an action is allowed or denied; it has only two
valid values, allow, and deny. As mentioned earlier, by default, the value is deny, you have
to explicitly allow it.
Principal
A Principal element is used to define the user. A user can be an IAM user, federated user,
role using user, any AWS account, any AWS service, or any other AWS entity that is
allowed or denied access to a resource and that can perform actions in your AWS account.
You use the Principal element in the trust policies for IAM roles and in resource-based
policies.
A Principal element should not be used while creating policies that are attached to IAM
users or groups and when you are creating an access policy for an IAM role. This is because
in these policies a principal is a user or role that is going to use the policy. Similarly, for a
group, a principal is an IAM user making the request from that group. A group cannot be
identified as a principal because a group is not truly an identity in IAM. It provides a way
to attach policies to multiple users at one time.
A principal is specified by using the ARN of the user (IAM user, AWS account, and so on).
You can specify more than one user as the Principal as shown in the following code:
"Principal": {
 "AWS": [
"arn:aws:iam::AWS-account-ID:user/user-name-1",
 "arn:aws:iam::AWS-account-ID:user/UserName2"
 ]
}
Action
The Action element defines an action or multiple actions that will either be allowed or
denied. The statements must include either an Action or NotAction element. This should
be one of the actions each AWS service has; these actions describe tasks that can be
performed with that service. For example: Action": "ec2:Describe*, is an action.
AWS Identity and Access Management
[ 62 ]
You can find a list of actions for all AWS services in the API reference documentation
available at the following URL:
https:/​/​aws.​amazon.​com/​documentation/​
Resource
The Resource element describes an AWS resource that the statement cover. All statements
must include either a Resource or NotResoruce element. Every AWS service comes with
its own set of resources and you define this element using ARN.
Condition
The Condition element also known as condition block lets you provide conditions for a
policy. You can create expressions with Boolean condition operators (equal, not equal, and
so on.) to match the condition in the policy against values in the request. These condition