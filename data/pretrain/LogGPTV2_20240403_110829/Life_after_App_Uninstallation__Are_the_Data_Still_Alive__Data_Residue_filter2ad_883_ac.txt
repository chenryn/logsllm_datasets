installed app has the same UID as the one uninstalled, it may
be able to get the Keypair.
Experiment Design
Android Lollipop does clean up the
Keypair residue correctly, but its inline comments lead us to
believe that the cleanup was incorrectly implemented in prior
versions. To conﬁrm that, we switched to KitKat. We ﬁrst in-
stalled Microsoft Remote Desktop app on the device,
which has Microsoft Azure Active Directory Authentication
Library (ADAL) embedded [2]. ADAL provides the support for
Work Accounts to third-party Android apps. Internally, the app
relies on Android Keystore to save app speciﬁc self-signed
certiﬁcates and uses asymmetric cryptography to protect the
session key for encryption and keyed hash. The Keypair gen-
eration is triggered when users sign in to Microsoft Azure. We
then uninstalled Microsoft Remote Desktop. It turns
out that KitKat does not delete the Keypair. After rebooting
Fig. 2: Android’s Protection on Accounts and Keypairs
To avoid asking the user to type his/her credentials re-
peatedly, authenticators often save the user credentials in
AccountManager. For future authentication requests, au-
thenticators directly retrieve the saved user credentials from
AccountManager without
launching the login activity
again. The authenticator that saves the credentials for a
particular account
is considered as that account’s owner.
AccountManager only gives the credentials to their rightful
account owner, not to others. In Figure 2, although App B
declares the required permissions and even the same account
type as App A, its UID does not match with the account
owner’s UID record in AccountManager, so if B tries to
get the credentials of the account “XYZ”, AccountManager
will deny it.
A-1. Individual Authenticator - No Residue
Because
sensitive
user
it
are
credentials
saved
the authenticator,
by
is
AccountManager on behalf of
to know how the authenticator saves account
important
credentials and whether they will be cleaned up after the
authenticator is uninstalled. We designed our experiment
targeting a popular app called myMail, which has millions of
downloads from GooglePlay. This app provides authenticators
for a number of accounts, such as Microsoft Exchange
and Yahoo. We have observed that passwords for
these
accounts are saved in plaintext inside AccountManager.
Many other apps,
such as MeetMe (with 10 million
downloads), have a similar behavior. This is not a concern
since AccountManager is trusted and the credentials are
protected. Moreover, when the authenticator app is uninstalled,
the credential data are cleaned up. AccountManager does
so by checking whether the account type still has a valid
owner, and if not, the related data will be deleted. Therefore,
it seems that there is no residue problem.
A-2. Duplicated Account Type - Successful Attack
AccountManager only deletes the credential residue
if its associated account type does not have a valid owner.
The interesting question is whether two unrelated apps could
declare the same account type, and if so, whether that can
prevent AccountManager from removing user credentials.
Experiment Design We still targeted the myMail app, which
declares an account type called com.my.mail. We wrote a
malicious authenticator app, which declares the same account
type. We installed myMail ﬁrst and then our malicious app.
Interestingly, at this stage, only the ﬁrst installed authenticator
(myMail) is considered as the owner of that account type,
and will be in charge of future requests to that account type.
6
App	
  A	
  UID	
  =	
  10050 FRAMEWORK	
  Permission	
  RM UID	
  RM XYZ	
  :	
  account 10050_keytype_ABC.pem XYZ	
  :	
  10050 XYZ ABC App	
  B	
  UID	
  =	
  10051 XYZ ABC Residue XYZ account	
  type ABC Keypair	
  alias 12the device, we installed our malicious app and were able to
get the same UID as the one uninstalled. As a result, our app
is able to steal the Keypair left by Microsoft Remote
Desktop. Similarly, if our malicious app is installed ﬁrst and
then uninstalled, followed by the installation of Microsoft
Remote Desktop, ADAL will always use the Keypair that
the malicious app intentionally left inside Keystore.
Discussion The attack above requires the malicious app and
its target one to share the same UID after device reboots.
However, since the Keypair residue will be kept on the device
unless user resets the phone, the incubation period can be quite
long. Moreover, Android does not requrie any permissions
from the apps to use the Keystore feature, allowing apps
to easily hide their malicious intention.
B. Capability Intruding
it
To provide richer user experiences,
is necessary for
apps to share resources and functionalities. However, the UID-
based access control makes such sharing difﬁcult, because an
app’s privilege is decided by its UID, which does not change.
Capability-based access control is a better choice for achieving
sharing. A capability is a token/ticket, which allows its holder
to conduct an operation on a particular object, regardless of
who the holder is, as long as it is a rightful holder. Because
a capability does not bind to any speciﬁc subject, it can be
delegated to another app, and therefore achieves the sharing
purpose. File descriptors are examples of capabilities enabling
the holder to conduct operations on ﬁles. File descriptors can
be passed from a process to its child process, or from one
process to another unrelated process using the Unix Domain
Socket.
Building upon the capability mechanisms provided by the
underlying Linux kernel, Android introduces two types of
capabilities at the framework level, one for data sharing and
the other for functionality sharing. (1) The most common way
to share data on Android is via content provider. Content
providers manage the access to a structured set of data, and
they are the standard interface that connects data in one process
with code running in another process. Underneath the imple-
mentation, the sharing is achieved using ﬁle descriptors, passed
to another process via the Unix Domain Socket. However, at
the framework level, Android abstracts out the low-level details
and presents content provider data to external apps with URI
references. Each URI reference consists of two parts: authority
and path. Authority uniquely identiﬁes the content provider
on the device, and path points to a speciﬁc table inside the
database. Therefore, URI reference serves as the framework-
level capability. (2) Functionality sharing enables one app to
interact with another app, allowing the ﬁrst app to leverage the
functionality of the second one. Android uses binder token as
the capability to enable such interactions. Direct use of binder
token is allowed but not easy inside apps, so Android provides
a framework-level abstraction called Intent, which is built on
top of binder and more convenient to use.
Just having capabilities is not sufﬁcient for sharing; An-
droid needs a convenient way to delegate them. Instead of
using the low-level Unix Domain Socket mechanism, Android
implements three high-level delegation channels. (1) Intent
is the most common carrier for capability delegation, and
7
it encapsulates the capability inside its payload section. (2)
Binder token itself can also be used for delegation. (3) Another
way is Android Clipboard, which allows an app to share the
URI capability with multiple recipients.
The extensive usage of capability delegation in Android
can potentially lead to data residues, i.e., the capability held by
the recipients may remain inside the system even if its owning
app has been uninstalled. Handling these capability residues
correctly is extremely important; if not carefully handled, these
seemingly “dead” capabilities may be “revived” by malicious
apps, and used to escalate their privileges. We systematically
examined six combinations of two capability types (URI and
binder token) and three delegation channels (Intent, binder
token and Clipboard). Two combinations are invalid: Android
does not support putting binder token on Clipboard, and
sending URI reference via binder token does not actually
delegate the capability. Among the four valid combinations,
one of them is subject to the data residue attack. Even for the
failed ones, we would like to answer why they failed, because
such information is beneﬁcial to future development.
B-1. URI on Clipboard - Successful Attack
Android provides a clipboard-based framework called Clip-
board for copying and pasting. It supports both simple and
complex data types. During the copying, simple text data are
copied directly to Clipboard; complex data must be stored in a
content provider, and its URI reference is copied to Clipboard.
Basically, by placing a URI reference on Clipboard, an app can
share its data with other apps. An interesting question is what
will happen to that URI reference after the app that owns the
data is uninstalled. As mentioned before, a capability contains
an object ID that identiﬁes the resource associated with the
capability. In the URI case, the object ID is authority, which
is the ID for identifying content providers. Android ensures
that an app can only place a URI on Clipboard if it can access
the content provider. After the owner of the content provider
is uninstalled, obviously, the content provider is deleted as
well, so the URI capability refers to a content provider ID
that does not exist anymore. Our hypothesis is that if a newly
installed app uses the same provider ID as the one that has just
been uninstalled, the URI residue on Clipboard may be used to
access the content provider in this new app. If this hypothesis
is true, it can be used to attack newly installed apps.
It should be noted that Android does not allow two apps
to declare the same content provider ID on the same device,
so the ID is unique. However, if the one who declares an ID
is uninstalled, the newly installed app can declare that ID.
Thus, the uniqueness is maintained at any point of time, but
not throughout a duration. This fact will be the basis for our
attack experiment.
Experiment Design
In our experiment design, we tar-
get
the email content provider inside Yahoo Mail app,
which has more than 100 million installs from Google-
Play. The app sets its email provider as private, but with
grantUriPermissions ﬂag set to true. This means other
apps cannot directly access the email provider, but Yahoo
Mail can create a URI capability, and pass it to the authorized
apps, allowing them to access the emails inside the provider.
Our objective is to forge a capability, so we can access the
emails in Yahoo Mail, without being authorized.
bound to UID, so it only consists of the content provider ID,
making re-association to different UIDs possible. Therefore,
to succeed in the attack using the Intent channel, the Yahoo
Mail app has to be assigned the same UID as App A. As we
mentioned before, this is possible, but it requires a system
reboot. Naturally, the URI capability, which only exists in
memory, will be naturally cleaned up when system reboots.
We further ﬁnd out that Android supports persistent URI
capability, which is saved on disk, and can thus persist after
rebooting. Android does a good job cleaning up this form of
capability when its owner is uninstalled.
B-3. Binder Token in Intent - Failed Attack
Apps usually do not pass binder
tokens directly via
Intent, unless the token is a PendingIntent. By giv-
ing a PendingIntent to another app,
the grantee al-
lows
the receiver app to perform the speciﬁed opera-
tion using the grantee’s permissions and identity. Basically,
PendingIntent serves as a capability for delegating priv-
ileges. PendingIntent is quite useful in Android’s notiﬁ-
cation framework: apps need to provide a PendingIntent
when sending a notiﬁcation to the system; upon user’s click on
the notiﬁcation, Android ﬁres an intent using the app’s identity
(not its own), avoiding potential privilege escalation.
After an app sends a PendingIntent to another app,
and it gets uninstalled, the PendingIntent will become
capability residue. It is interesting to see whether the residue
can be used for attacking newly installed apps, like what we
did in the Clipboard case. It turns out that although the residue
is still left in the system, Android disables the capability when
its owner is uninstalled. Therefore, the attack fails.
B-4. Nested Binder Tokens - Failed Attack
In Android, apps can also pass a binder token (a form of
capability) directly through the existing binder channel. Our
investigation question is whether the binder token remains
effective even if the creator has been uninstalled. We designed
an experiment with App A binding to App B’s service, and thus
establishing a binder transaction channel. After that, another
binder token created by App A is passed through the channel.
However, as we ﬁnd out, as soon as App A is uninstalled,
the binder token becomes invalid. Android does a good job
in cleaning up all the binder tokens that are delegated by the
uninstalled app.
C. Settings Impersonating
As an open platform, Android offers a variety of extensible
frameworks for third-party apps to provide system-level func-
tionalities. An example is the Spelling Checker Framework,
which can collect user keystrokes and then rely on a thrid-party
app to provide spelling suggestions. As shown in Figure 4,
App ABC provides the spell checking functionality using the
internal service “xyz”.
Since multiple apps providing the same functionality can
coexist on the device, the user must explicitly choose one (i.e.,
setting the preferences) through the Settings app. Preferences
are saved in a persistent storage in the form of name-value
pair. In Figure 4, when the user chooses App ABC as the
Fig. 3: Yahoo Mailbox Intruding
Our experiment involves two malicious apps, App A and
its companion App B. App A needs to be installed before
the Yahoo Mail app is installed. In App A, we create a
content provider that has the same authority (i.e., ID) as the one
used in the Yahoo Mail app. App A then constructs a URL
capability for this content provider, and places the capability on
the Clipboard. At this moment, whoever retrieves the capability
from the Clipboard can access App A’s content provider. This
step is depicted in Figure 3 using solid lines with a sample URI
value on the Clipboard. Now, App A’s job is to keep annoying
the user, so eventually it is uninstalled by the user. However,
the capability residue is still on the Clipboard.
We then installed the Yahoo Mail app. After the in-
stallation, inside the companion app B, we retrieve the URI
from the Clipboard and resolve it. Interestingly, we are able to
successfully access the emails inside the Yahoo Mail app,
as shown in Figure 3 using dash lines. This is because the
ID for Yahoo Mail’s email provider is exactly the same as
the one used in App A, and Clipboard mistakenly associates
the capability residue with the newly installed content provider.
This is a security breach; essentially, a capability can be forged
with the help of Clipboard.
Discussion There are two preconditions for this attack to suc-
ceed. First of all, a malicious app and its companion app have
to be installed on the device before the target one. Although
this requirement seems to be relatively strong, it still has the
chance to be met in practice, as Android Clipboard is publicly
accessible with no permission requirements. Moreover, the
malicious app can also declare multiple authorities to increase
the target scope. The second precondition is that, the target
app must be installed on the device after the malicious one
is uninstalled. Its likelihood depends on the lifespan of the
residue data on Android Clipboard. As long as the installation
of the target app happens before another copy operation is
performed or the device is rebooted, this precondition can be
true. Despite all exploit efforts involved, the existence of such
capability residue endangers users’ privacy.
B-2. URI in Intent - Failed Attack
URI reference can also be passed to another app using
Intent. Therefore, it is intriguing to see whether the above
attack works for this delegation channel. We repeated the
previous experiment on the Yahoo Mail app, but this time,
the capability residue is the URI reference sent from App A to
App B. Interestingly, the attack failed. A further investigation
reveals the subtle but signiﬁcant difference between these two
delegation channels. When a URI capability is sent using
Intent, the capability will be bound to the UID of the sender.
Namely, the object ID on the capability consists of a tuple: UID
and content provider ID. In the Clipboard case, capability is not
8
Android	
  Clipboard	
  URI	
  =	
  “content://YahooMail/account_id/folder_id/message_id”	