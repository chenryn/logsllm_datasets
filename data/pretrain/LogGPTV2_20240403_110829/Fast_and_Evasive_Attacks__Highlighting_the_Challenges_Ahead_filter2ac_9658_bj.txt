of the conversation is known, during emulation since the future state is unknown
it is not possible to continue the dialog with the source. The proxying algorithm
will allow ScriptGen to rely on a real host to continue the conversation, using
the proxied conversation to build training samples to perform the reﬁnement.
One of the most critical aspects in the update phase consists in the choice of
the matching function. At ﬁrst, our choice had been to try to be as robust as
possible to new activities or to imprecise state machines generated from an in-
suﬃcient number of samples. So we accepted imperfect matches, that is requests
whose content did not completely match with the output of region analysis. But
this leads to two major drawbacks. First of all, tolerating imperfect matches be-
tween the incoming request and the known transitions might lead to the choice
of a wrong transition generating a completely wrong answer, corrupting the con-
versation. Also, distinguishing imperfect matches from new activities becomes
impossible. For this reason we moved to a much more conservative choice, consist-
ing of requiring an exact match of all the ﬁxed regions, transforming the output
of the region analysis in a regular expression. If multiple transitions match the
same incoming request, the most reﬁned one is chosen: that is, the transition
Automatic Handling of Protocol Dependencies
197
Fig. 6. Iterative reﬁnement
having the maximum number of matching ﬁxed bytes. This is necessary to cor-
rectly handle microclustering, in which recurring values of the mutating parts
are transformed into ﬁxed regions. The previous policy will give preference to the
reﬁned microcluster, having more ﬁxed bytes, rather than the generic transition.
Reﬁnement phase. During the reﬁnement phase, ScriptGen inspects state
buckets in order to search for possible reﬁnements. If a bucket is not empty,
ScriptGen runs the region analysis algorithm over the unmatched requests pres-
ent in the bucket. If the number of samples is enough to generate macroclusters
of suﬃcient size, one or more transitions are generated reﬁning the existing ones.
After having generated all the possible edges, the update phase will be repeated
on the reﬁned state machine.
Figure 6 shows an simple example of iterative reﬁnement. For each state in
the diagram, the label corresponds to the number of training conversations in
the bucket. A training ﬁle consisting of 10 training ﬂows is used to update an
empty state machine. Since the state machine is empty, none of the initial client
requests contained in the samples will match an existing transition. Thus all
the samples will be put in the initial bucket, as shown in ﬁgure at step 1. The
reﬁnement phase will then pick the training samples contained in the bucket, and
apply the region analysis algorithm to the samples. Region analysis generates
a diﬀerent transition for each set of sample client requests believed to have a
diﬀerent semantic meaning. In this ﬁrst step, a single transition is generated.
After the reﬁnement phase, the update phase is then triggered and the training
ﬂows are matched with the newly created transition. Since the state machine
is still incomplete, the training samples do not ﬁnd a match in the following
state, and are thus stored in the corresponding bucket for the next reﬁnement
iteration (step 2). The process repeats until the reﬁnement phase is not able to
generate other transitions: this happens at step 4, in which the sample ﬂows do
not contain any further interaction between the attacking source and the server
198
C. Leita, M. Dacier, and F. Massicotte
(client closes connection after having sent 3 requests to the server). The state
machine is then complete.
Proxying algorithm. The previous sections showed how, through the concept
of buckets and the separation between update and reﬁnement phase, we are able
to handle in a uniform way the training performed with real sample conversations
and the interaction with real sources during emulation. As mentioned before,
there is still a major diﬀerence between these two cases. While during training
the whole conversation is already known, this is not true during emulation. In the
second case in fact, when receiving a request for which no matching transition
exists, we do not have a way to make the client continue its conversation with the
server. However we need the continuation of the conversation to train ScriptGen
to reﬁne the state machine.
To acquire this information, when encountering unmatched requests we tunnel
the client conversation to another host able to handle it, such as a high inter-
action honeypot. Focusing for conciseness only on the TCP case, the proxying
algorithm works as follows:
– Every source initiates a certain number of connections with the ScriptGen
honeypot. The emulator keeps track of all of them, buﬀering all the received
requests.
– When receiving an unmatched request from host Hi at time tu, the emulator
triggers the proxy initialization. At time tu the source will have a certain
number of open connections CO
1...CO
p.
– The emulator will search for an available host in its pool of servers and will
allocate it to the source. It will then initialize it, replaying all the buﬀered re-
quests received from host Hi before time tu. If the initialization is successful,
it will end up with p open connections between the emulator and the allo-
p. For each of them, the ScriptGen emulator will setup
cated server P O
i . Every message received from one
an application-level association CO
i
of the two ends,will be forwarded to the other end. The message content will
be stored, building the training sequence to be used in the reﬁnement.
↔ P O
1...P O
– Every incoming connection from the same source after the proxy initializa-
tion at time tu will directly generate an application-level association with the
allocated server, and the application level payloads will be used to update
and eventually reﬁne the existing state machines.
– After a certain time of inactivity, the source will expire and the allocated
server will be freed. The emulator will use the retrieved conversations to run
the update and reﬁnement phase.
This algorithm allows the emulator to promptly react in a completely automated
way to requests that the state machine is not able to parse. Through proxying,
the emulator is able to build its own training set and use this training set to
update its protocol knowledge. Assuming that the state machine represents the
whole set of known activities going on in a certain network, this algorithm oﬀers
valuable properties. It allows us to go much further than just sending alerts for
Automatic Handling of Protocol Dependencies
199
new activities. We can automatically build a training set and use it to infer se-
mantics. This output can therefore be used to automatically generate signatures
for the newly observed activities.
5 Testing
In order to retrieve signiﬁcant information about the real quality of the emula-
tion, we have run a set of experiments to evaluate ScriptGen’s behavior when
dealing with a real client.
To perform our tests, we took advantage of the ﬂexibility of the controlled
virtual network presented in [15]. This network provides a secure environment
to run completely automated attack scenarios. Thanks to a huge database of
attack scripts and virtual machine conﬁgurations, this setup allows an extreme
ﬂexibility and can be considered as the ideal testbed for our emulators. A dis-
cussion of the exhaustive test of ScriptGen behavior using all the available
attack scripts is left as a future work. For the scope of this paper we want
to provide an in-depth analysis of ScriptGen’s behavior in a single interesting
case.
Among all the used exploits, for the sake of conciseness we chose to focus in
this paper on a speciﬁc vulnerability exploited by a Metasploit Project1 mod-
ule. The vulnerability is the Microsoft Windows LSASS Remote Overﬂow [16]
(used by the Sasser worm). This vulnerability exploits a validation failure on the
LSARPC named pipe and, through a specially crafted packet, allows an attacker
to execute arbitrary code on the attacked host. In the speciﬁc implementation of
the exploit at our disposal, the attack consists of 41 requests and 40 answers on
a single TCP connection targeting port 139. This is therefore a clear example of
“long” activity whose analysis would greatly beneﬁt from the increased verbosity
oﬀered by ScriptGen. We chose this exploit for several reasons:
– This exploit opens a shell on port 4444 on the attacked host. Also, the
exploit checks if the port is open before starting the attack: if the port is
already open, it does not proceed further. This is a clear case in which session
dependencies are needed in order to emulate the correct behavior. If the port
is always open, the honeypot will never observe the attack on port 139 and
will instead observe only a connection attempt on port 4444. If the port is
always closed, the attack will always fail. Using dependencies, we are able
to send a signal only when the last state of the attack path is reached. The
state machine for port 4444 waits for that signal before opening the port.
– This exploit targets the NetBIOS Session Service. Its protocol semantic is
rather complex, and oﬀers many examples of content dependencies. If the
content dependencies are not handled correctly, the client aborts the con-
nection after the second answer from the honeypot as shown in [10]. This
shows the importance of this kind of dependencies, that greatly inﬂuences
the length of the conversation.
1
http://www.metasploit.org
200
C. Leita, M. Dacier, and F. Massicotte
Table 1. Attack output
[*] Starting Bind Handler.
[*] Detected a Windows 2000 target ()
[*] Sending 32 DCE request fragments...
[*] Sending the final DCE fragment
[*] Exiting Bind Handler.
Due to the complexity of the NetBIOS Session Service protocol, this case is
representative of the upper bounds of the complexity that might be faced in
protocol emulation.
5.1 Emulation Quality
In order to assess the emulation quality of the produced emulators, we have
used our virtual network infrastructure to generate a training sample consisting
of 100 samples of the attack against a real Windows 2000 target. After every run
of the attack, the target was reverted to its initial state and the experiment was
repeated. In order to maximize variability (with special attention to timestamps)
the various runs of the attack have been spaced in time by an interval of 5
minutes. All the interaction was collected in a tcpdump ﬁle, and was then used
to automatically train ScriptGen and produce two state machines: one for TCP
port 139, the other for TCP port 4444.
Analysis of the state machine. Before analyzing the behavior of the emulator
in a network test, it might be interesting to inspect the content of the state
machine generated by ScriptGen. As expected, the state machine is a sequence
of 42 states. There is only one leaf, and therefore a single path: all the states,
except for the last one, have exactly one child. Thanks to the consolidation
algorithm, there is always a unique server answer bound to each state. Also,
ScriptGen has correctly identiﬁed session dependencies, associating a signal to
the last state of the state machine for port 139. When that state is reached, the
signal triggers a transition for port 4444, opening it.
Looking at these client requests more in depth, we can see that after an initial
session request (whose content is always the same) ScriptGen generates more com-
plex sequences of ﬁxed and mutating regions. More speciﬁcally, we can notice that
most requests share two mutating regions of size 2 respectively at bytes 30-31 and
34-35. Looking at the protocol speciﬁcation, these ﬁelds correspond to the proces-
sID and the multiplexID of the SMB header. These two ﬁelds are chosen by the
client and must be repeated in the following answers given by the server. Inspect-
ing the server answers, we can indeed note that content dependency handling has
correctly generated the correct links to handle those dependencies.
Experimental evaluation. We deployed a ScriptGen based host in our testing
virtual network, and we ran the attack script against the honeypot.
The emulator handled perfectly all the content and session dependencies,
traversing the whole path of the state machine.
Automatic Handling of Protocol Dependencies
201
Fig. 7. Test scenario
The output of the attack script is indistinguishable from the one of a successful
attack against a real host (table 1), proving the quality of the emulation.
It is important to notice that this is a complete validation of the region analysis
approach. It started from a rich training set, without any kind of additional
information, and successfully handled a conversation with same structure, but
with partially diﬀerent content (diﬀerent process IDs, diﬀerent timestamps).
5.2 Reaction to Unknown Activities
In this section we want to experiment with ScriptGen’s capability to react to new
activities and to automatically reﬁne existing state machines retrieving training
information through proxying. We know from the previous experimental results
that, given a suﬃcient number of training samples, ScriptGen is able to carry
on a complete conversation with a client. Here we want to inspect the ability of
the emulator to produce its own training set to reﬁne the state machine, and its
ability to reliably identify new activities.
The experiments have been run in a very simple test scenario, shown in Figure
7. The attack is run against a ScriptGen honeypot, that is allowed to rely on a Win-
dows 2000 virtual machine using the proxying algorithm described in Section 4.3.
Learning. The ﬁrst aspect that we want to inspect is ScriptGen’s ability to
reliably reﬁne the state machine. Given a certain activity, initially unknown,
ScriptGen should take advantage of proxying to build its own training set and
reﬁne the state machine. After the reﬁnement, ScriptGen must be able to cor-
rectly handle the activity, without contacting the proxy any more.
For reﬁnement to be reliable, the training set must be diverse enough to allow
a correct inference of its semantics. If the training set is not diverse enough,
coincidental matches of mutable values may lead to wrong deductions on their
nature. If this happens, following instances of the same activity may not match
the generated transitions. This may generate erroneous alerts for new activities
(false positives). Therefore the reﬁnement condition, that triggers the reﬁnement
202
C. Leita, M. Dacier, and F. Massicotte
Table 2. Experimental results
N # false alerts # critical requests
3
5
10
20
50
3
3
0
2
0
3
3
0
1
0
of the state machine when the samples are considered to be diverse enough,
becomes critical.
In this ﬁrst scenario, the ScriptGen honeypot has been deployed with an
empty state machine for port 139. We used diﬀerent reﬁnement conditions, and
then ran 100 times the same activity (the same exploit used to study the em-
ulation quality). Since the diﬀerent runs of the activities are spaced in time by
approximately 10 seconds, we considered as a good measure of diversity (also
from a temporal point of view) diﬀerent thresholds on the number of available
training samples. When the number of samples retrieved through proxying is
equal to N, ScriptGen reﬁnes the state machine and then continues emulation.
Running the experiment in the same conditions using diﬀerent values of N and
then inspecting the resulting state machines will give a measure of the sensitivity
of ScriptGen to the lack of diversity of the samples.
Table 2 shows the relevant characteristics of the generated state machines. If
the training sample is not diverse enough, ScriptGen will generate false alerts.
That is, after the ﬁrst reﬁnement of the state machine the emulator will not be
able to correctly match successive requests, interpreting them as a new activity.
The number of false alerts is therefore connected to the quality of the training
samples. We expect a decreasing number of false alerts when increasing the value
of N. After each alert ScriptGen will again use proxying to collect a training
sample, and reﬁne the existing state machine with one or more functional paths.
It is also important to understand whether or not these unmatched requests
are observed at a critical point of the state machine: there might be a particularly
complex request for which region analysis is not able to generate a reliable transi-
tion. For this reason we count the number of nodes that triggered an unmatching
transition, which therefore corresponds to the number of critical requests in the
protocol state machine.
Figure 8 gives a visual explanation of the two concepts previously explained.
While the ﬁrst case can be considered as a symptom of a general lack of variabil-
ity, the second case is probably due to a more speciﬁc problem in a given request.
Referring to Table 2, we can map the ﬁrst case to low values of N (N=3,N=5)
while we can ﬁnd an example of the second case for N=20.
A ﬁrst striking result is the fact that in all cases, ScriptGen has been able to gen-
erate a complete state machine at the ﬁrst time the reﬁnement condition has been
triggered. But since some of the protocol variability is linked to time-dependent
ﬁelds (timestamps, and as we will see process IDs), the produced reﬁnements in-
corporate false deductions that lead to unmatched requests after some time.
Automatic Handling of Protocol Dependencies
203
Fig. 8. Diﬀerent reﬁnement cases
When N is equal to 20 we can experience a rather strange artifact. For the
second request in the conversation, 2 false alerts are generated. Inspecting the
transitions, we can notice that the artifact is due to the last byte of the process
ID: it is considered as a ﬁxed region. Since this value is stored following the
little-endian convention in the NetBIOS protocol, it actually corresponds to the
high part of the process identiﬁer of the attacking client. Since process identiﬁers
are often assigned sequentially, and since the attacking host was not reverted to
initial conditions during the experiment, this is not surprising. It is a clear case
in which the lack of variability of the samples leads ScriptGen to make wrong
assumptions. Only with N equal to 50 we have enough variability to correctly
classify the byte as part of a mutating region. In the case N equal to 10, the
problem was not raised only by a fortunate sequence of 100 process IDs having
all the same high part.
It is important to understand that some of the lack of diversity that we en-
countered in this experiment is due to speciﬁc artifacts of the chosen scenario.
We are running every attack instance from the same host in an iterative way.
This means that the process ID in the SMB header, usually appearing as a ran-
dom ﬁeld, here has incremental values. In a real attack scenario in which the
honeypot is contacted by many diﬀerent hosts, the diversity of this ﬁeld would