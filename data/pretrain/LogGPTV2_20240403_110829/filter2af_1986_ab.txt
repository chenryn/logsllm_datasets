我们将使用默认的ES用户名和密码 : admin/admin，其他问题直接默认：
#### 6.1.3 API server配置
`/etc/elastalert-server/config/config.json`中使用如下配置去配置API server：
  * elastalertPath(配置成你的elastalert目录的绝对路径)：`/etc/elastalert`
  * es_host(你的elasticsearch实例地址)：`elasticsearch`
  * writeback_index(与config.yaml中一样)：`elastalert_status`
**(1) Alert Logs的相关问题排除（没有数据）：**
该问题的原因是：日志告警回写索引的元数据处理程序正在搜索带有_type的elastalert文件。自 7.x 以来，不会返回任何结果，因为所有文件都有一个
_doc的 _type。
因此，在您的Alert Logs中（后期在Praeco界面），看不到任何数据。  
所以必须执行如下命令：
    cd /etc/elastalert-server/src/handlers/metadata/
    nano get.js
删除包含`type: 'elastalert'`的行。现在应该能够在praeco界面上看到告警日志。
**(2) Elastalert-Server安装：**
    sudo npm install
    sudo npm run start
如果成功启动，应该看到下图的这一行（有个warning警告是因为不安全的连接`SSL_verify = False`产生的）。
#### 6.1.4 Praeco配置
**(1) 更改配置文件：**
    cd /etc/praeco/config
    nano api.config.json
    nano elastalert.yml
**(2) 安装Praeco:**
    sudo npm install
`export PRAECO_ELASTICSEARCH=localhost`
**(3) 复制BaseRule.cfg:**
在开始服务之前，需要执行如下命令：
    cp /etc/praeco/rules/BaseRule.config /etc/elastalert/rules/
此文件包含Slack、SMTP和Telegram的设置，这里我们将添加0x03章节中使用的Slack Webhook URL。
    cd /etc/elastalert/rules/
    nano BaseRule.config
添加Webhook URL：
**(4) 启动Praeco:**
    npm run serve
现在，您应该在  上看到正在运行的页面，这是你的Praeco界面。
### 6.2 规则创建
#### 6.2.1 使用Praeco界面创建规则，并将其发送到slack webhook
Navigate to Rules -> Add Rule:
现在，可以看到创建规则非常类似于Open Distro告警工具，我们将过滤告警并指定目的地。
点击 "UNFILTERED"，手动或使用预建工具指定过滤器。然后单击 "Close"。
我们将使用Slack进行通知，使用与0x03章节中使用的Webhook URL，以及相同的频道( #test)。
点击'Save'。你的告警默认启用。
我们可以检查告警是否成功发送到Slack。
在我们的slack频道中：
#### 6.2.2 从ElastAlert向TheHive发送告警
不过遗憾的是，Praeco无法直接将告警输出到 TheHive，所以我们得手动编辑我们的规则，并使用elastalert-server发送。有了这个变通方法（使用Elastalert-server），规则将在后台正常工作，也将出现在Praeco界面上。但是，我们将无法使用Praeco界面编辑或配置它们。
**(1) 创建一个规则：“User_creation”：**
首先，我们将像之前一样从Praceo界面创建我们的规则，在HTTP输出中我们先指定 **any URL** ，之后会删除。  
完成后点击Save。
**(2) 发送告警到Thehive:**
添加TheHive配置，保存并重启Elastalert-Server，进入/etc/elastalert/rules目录:
    nano User_creation.yml
**(3) 在Praeco中检查告警：**
告警已经成功发送到TheHive。但是遗憾的是，正如我们之前所提到的，Praeco界面无法编辑该规则，必须在/etc/elastalert/rules中手动编辑。
**(4) 在TheHive界面中检查告警：**
### 6.3 获得Sigma工具的帮助，以创建规则
如前文所述，Sigma工具帮助我们将sigma规则转换成多种格式，包括Elastalert。  
项目URL与详细步骤见如下链接：
**(1) 下载Sigma**
    cd ~
    git clone https://github.com/Neo23x0/sigma.git
**(2) 使用Sigma创建告警**
    cd ~/sigma/tools
    pip3 install -r requirements.txt
执行命令如下（用示例规则举例）：
    ./sigmac -t elastalert -c winlogbeat 
    ../rules/windows/builtin/win_user_creation.yml
遗憾的是，由于缺少几个字段，此规则不能被 ( Praeco/Elastalert-Server )
直接使用。因此，您可以从该规则（查询字符串）中选择关键字，并使用这些关键字信息在 Praeco
界面创建自己的规则。这个工具非常重要，因为它可以帮助我们收集大量规则及其查询字符的关键字。
注意：有时必须在（Kibana →
Discover页面）中检查日志及其字段，以确保日志中的名称字段与Sigma规则中的名称字段相匹配。如果你的字段显示黄色错误，进入索引模式，选择匹配的索引，然后点击刷新字段。
### 6.4 发送Wazuh的告警到TheHive
我们将使用前文提到的相同方法来处理wazuh告警，首先我们使用praeco界面创建wazuh-alerts，然后我们手动编辑规则文件来添加theHive
输出。
**(1) 创建一个wazuh规则并保存：**
我们已经使用rule.id来过滤规则（可以选择任何其他字段），可以在wazuh → Overview → Security events下获取规则id。
**(2) 编辑规则然后重启elastalert-server：**
    nano /etc/elastalert/wazuh-alert-TEST.yaml
**(3) 检查告警：**
## 0x07 报告
为了减轻企业网络威胁和攻击，应时常在系统上执行漏洞测试并修复安全问题。因此，您可以想象，“报告”工作在任何SOC中都非常重要，因为可以概述系统中可能存在的漏洞。
在本节中，我们将提供有关我们在“报告”工作和漏洞扫描中使用的工具及相关见解。本节包括以下几个部分：
  * 相关介绍
  * 安装Nessus essentials版本
  * VulnWhisperer的安装
### 7.1 介绍
我们将使用到的工具：
  * **VulnWhisperer** ：VulnWhisperer是一个漏洞管理工具和报告聚合工具。将从不同漏洞扫描工具中提取报告，并为每个文件创建一个唯一文件名。
项目地址：
  * **Nessus essentials** ：Nessus Essentials(以前称作Nessus家庭版)，是Nessus主机漏洞扫描的一个免费版本。
### 7.2 安装Nessus essentials
#### 7.2.1 下载
从官网（www.tenable.com）下载，在我们的项目中，使用下图标记的这个版本：
#### 7.2.2 Nessus安装
    dpkg -i Nessus-8.10.0-ubuntu910_amd64.deb
    /etc/init.d/nessusd start
    service nessusd start
浏览器访问 Essentials**”：
#### 7.2.3 激活Nessus
复制邮箱中的activation code(激活码)，创建一个账户，随后等待Nessus准备完成。
7.2.4 运行第一次扫描
点击New Scan → 选择Basic Network Scan，
选择你要扫描的目标，保存随后运行。
### 7.3 安装VulnWhisperer
#### 7.3.1 使用Python2.7
VulnWhisperer基于Python2.7，所以我们需要更改系统的Python默认版本。
#### 7.3.2 配置VulnWhisperer
    cd /etc/
    git clone https://github.com/HASecuritySolutions/VulnWhisperer
    cd VulnWhisperer/
    sudo apt-get install zlib1g-dev libxml2-dev libxslt1-dev
    pip install -r requirements.txt
    python setup.py install
    nano configs/ frameworks_example.ini
配置文件中选择你想启用的模块（在我们的项目中就仅启用了Nessus），虽有填写你的Nessus账户凭据：
#### 7.3.3 检查Nessus是否联通及报告下载
    vuln_whisperer -F -c configs/frameworks_example.ini -s nessus
    # 报告将以csv拓展名格式保存，在如下目录中检查报告：
    /opt/VulnWhisperer/data/nessus/My\ Scans/
如果不是新报告，命令运行后显示内容如下图所示：
#### 7.3.4 配置Vulnwhisperer定时任务
为了使Vulnwhisperer检查Nessus数据库并定期下载报告，我们将添加一个定时任务。因此，我们就不用再手动执行命令了，将最新的报告直接自动添加到Kibana。
    crontab -e
添加以下内容：
    SHELL=/bin/bash
    * * * * * /usr/local/bin/vuln_whisperer -c /etc/VulnWhisperer/configs/frameworks_example.ini >/dev/null 2>&1
#### 7.3.5 导入Elasticsearch模板
到kibana Dev Tools，随后点击add template：
模板文件下载链接：
>
>  vulnwhisperer-template_elk7.json>
完成后，现在Index Templates中应该已经有了一个模板。
#### 7.3.6 导入Kibana可视化文件
点击 Kibana → Management → saved object →
Import，导入kibana.json配置文件：在`VulnWhisperer/resources/elk6/kibana.json`下，文件下载链接如下：
>
> 
现在在Dashboards，应该可以看到如下两项：
#### 7.3.7 添加Nessus Logstash配置文件
将Nessus Logstash文件复制到`/etc/logstash/conf.d/`中：
    cd /etc/VulnWhisperer/resources/elk6/pipeline/
    cp 1000_nessus_process_file.conf /etc/logstash/conf.d/
    cd /etc/logstash/conf.d/
    nano 1000_nessus_process_file.conf