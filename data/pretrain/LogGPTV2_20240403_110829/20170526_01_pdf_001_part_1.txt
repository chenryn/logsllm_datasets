# PL/CUDA: Fusion of HPC Grade Power with In-Database Analytics

## The PG-Strom Project / NEC OSS Promotion Center
### KaiGai Kohei

#### 自我介绍
- **KaiGai Kohei**
  - Twitter: @kkaigai
  - GitHub: [https://github.com/kaigai](https://github.com/kaigai)
- **PostgreSQL 贡献**
  - SELinux, FDW, CustomScan 等
- **PG-Strom**
  - 使用 GPU 加速 PostgreSQL 的模块作者
- **工作经历**
  - NEC 开源软件推进中心
  - 软件开发与业务拓展

## PGconf.ASIA - PL/CUDA: Fusion of HPC Grade Power with In-Database Analytics

### PG-Strom 概要 (1/2) – 架构
- **功能**
  - 从 SQL 自动生成 GPU 代码。
  - 利用 GPU 进行异步/超并行执行。
  - 支持 WHERE 子句、JOIN、GROUP BY 和 Projection。
- **优势**
  - 利用数千个计算核心进行透明加速。
  - 针对分析型工作负载的低成本解决方案。

### GPU (图形处理器) 特性
| 特性       | GPU (NVIDIA Tesla P100) | CPU (Intel Xeon E5-2699v4) |
|------------|-------------------------|----------------------------|
| 架构       | Pascal                  | Broadwell                   |
| 发布时间   | Q2-2016                 | Q1-2016                     |
| 晶体管数量 | 150亿                   | 7.2亿                       |
| 核心数     | 3584                    | 22                          |
| 核心频率   | 1.126GHz                | 2.20GHz                     |
| 最大频率   | ~1.303GHz               | ~3.60GHz                    |
| FP32性能   | 9.3 TFLOPS              | 1.2 TFLOPS                  |
| 内存容量   | 16GB (HBM2)             | 最大1.5TB (DDR4)            |
| 内存带宽   | 732GB/s                 | 76.8GB/s                    |
| 功耗       | 250W                    | 145W                        |

### PG-Strom 概要 (2/2) – 自动生成 GPU 二进制文件
- **查询示例**: `SELECT cat, count(*), avg(x) FROM t0 WHERE x BETWEEN y AND y + 20.0 GROUP BY cat;`
- **过程**:
  - 将 WHERE 子句中的表达式转换为 CUDA 程序。
  - 使用 Just-in-time 编译器 (如 nvrtc) 在运行时编译 CUDA 代码。
  - 并行执行 SQL 表达式在 CUDA 源代码中。

### GPU 对 SQL 执行的加速示例
- **基准测试**: 
  - CPU: Xeon E5-2670v3
  - GPU: GTX1080
  - RAM: 384GB
  - OS: CentOS 7.2
  - DB: PostgreSQL 9.5 + PG-Strom v1.0
- **测试查询**:
  ```sql
  SELECT cat, count(*), avg(x)
  FROM t0 NATURAL JOIN t1 [NATURAL JOIN t2 ...]
  GROUP BY cat;
  ```
  - t0 包含 1 亿行，t1...t8 各包含 10 万行（类似星型模式）

### 用户反馈
- **计算密集型工作负载**
  - 内置数据库分析 (In-database Analytics)
  - 科学技术计算和市场营销（通过 PL/CUDA 和 Matrix-Array）
- **I/O 密集型工作负载**
  - 通用的大规模 OLAP
  - ETL 和报表（通过 SSD 到 GPU 的 P2P DMA）

### PL/CUDA 介绍

### 从失败中学习 (1/3) – 用 SQL 描述算法
- **时间**: 2016年4月

### 从失败中学习 (2/3) – 性能优势 (?)
- **时间**: 2016年4月

### 从失败中学习 (3/3) – 问题点
- **问题①**: 很少有人会用 SQL 描述算法。大多数算法是基于过程性语言开发的。
- **问题②**: 性能上的优势真的存在吗？在 Min-Max 法的距离计算中，PG-Strom 的性能确实远超 PostgreSQL，但这种计算是否真的有必要在 PostgreSQL 中进行？

### 解决方案 – PL/CUDA + Array-Matrix
- **PL/CUDA**:
  - 允许用户定义的 CUDA 代码块。
  - 结果集写回。
- **Array-Matrix**:
  - 将非 NULL 的二维数组解释为“矩阵”。
  - 示例函数定义:
    ```sql
    CREATE OR REPLACE FUNCTION knn_gpu_similarity(int, int[], int[])
    RETURNS float4[]
    AS $$
    #plcuda_begin
    cl_int k = arg1.value;
    MatrixType *Q = (MatrixType *) arg2.value;
    MatrixType *D = (MatrixType *) arg3.value;
    MatrixType *R = (MatrixType *) results;
    :
    nloops = (ARRAY_MATRIX_HEIGHT(Q) + (part_sz - k - 1)) / (part_sz - k);
    for (loop=0; loop < nloops; loop++) {
      // CUDA 代码块
    }
    #plcuda_end
    $$ LANGUAGE 'plcuda';
    ```

希望这些优化后的文本能够帮助您更好地传达信息。如果需要进一步的调整或补充，请告诉我！