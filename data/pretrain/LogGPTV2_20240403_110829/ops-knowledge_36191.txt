User: I'm creating a program in python that auto-runs for an embedded system and want to handle program interruptions gracefully. That is if possible close resources and signal child processes to also exit gracefully before actually exiting.  At which point my watchdog should notice this and respawn everything.
What signals can/should I expect to receive in a non-interactive program from linux?  I'm using try/except blocks to handle i/o errors.
Is the system shutting down an event that is signaled?  In addition to my watchdog I will also have an independent process monitoring a hardware line that gets set when my power supply detects a brownout.  I have a supercap to provide some run-time to allow a proper shutdown.
Assistant: Trap sigint, sigterm and make sure to clean up anything like sockets, files, locks, etc.
Trap other signals based on what you are doing. For instance if you have open pipes you might trap sigpipe. 
Just remember signal handling opens you to race conditions. You probably want to use sigprocmask to disable signals while handling them.