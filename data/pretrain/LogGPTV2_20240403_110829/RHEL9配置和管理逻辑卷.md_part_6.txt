使用 `lvconvert`{.literal} 命令和 `--merge`{.literal}
选项将快照合并到原始（原始）卷中。如果您丢失了数据或文件，或者必须将其系统恢复到以前的状态，您可以执行系统回滚。合并快照卷后，得到的逻辑卷的名称、副号码和
UUID。在合并过程中，对原始卷的读取和写入将会被指向要合并的快照。当合并完成后，会删除合并的快照。
如果原始卷和快照卷没有打开并激活，则合并会立即启动。否则，合并会在激活原始卷或快照后开始，且两者都已关闭。在激活原始卷后，您可以将快照合并到无法关闭的原始卷中（如
`root`{.literal} 文件系统）。
::: orderedlist
**步骤**
1.  合并快照卷。以下命令将快照卷 [*vg001/snap*]{.emphasis} 合并到原始卷
    [*中*]{.emphasis} ：
    ``` literallayout
    # lvconvert --merge vg001/snap
    Merging of volume vg001/snap started.
      vg001/origin: Merged: 100.00%
    ```
2.  查看原始卷：
    ``` literallayout
    # lvs -a -o +devices
      LV      VG    Attr       LSize  Pool Origin Data% Meta% Move Log Cpy%Sync Convert Devices
      origin vg001  owi-a-s---  1.00g                                                  /dev/sde1(0)
    ```
:::
::: itemizedlist
**其他资源**
-   `lvconvert(8)`{.literal} man page
:::
:::
:::
[]{#creating-and-managing-thinly-provisioned-volumes_configuring-and-managing-logical-volumes.html}
::: chapter
::: titlepage
# []{#creating-and-managing-thinly-provisioned-volumes_configuring-and-managing-logical-volumes.html#creating-and-managing-thinly-provisioned-volumes_configuring-and-managing-logical-volumes}第 7 章 创建和管理精简配置的卷（精简卷） {.title}
:::
Red Hat Enterprise Linux 支持精简配置的快照卷和逻辑卷。
逻辑卷和快照卷可以被精简置备：
::: itemizedlist
-   使用精简配置的逻辑卷，您可以创建大于可用物理存储的逻辑卷。
-   使用精简配置的快照卷，您可以将更多虚拟设备存储在同一个数据卷中
:::
::: section
::: titlepage
# []{#creating-and-managing-thinly-provisioned-volumes_configuring-and-managing-logical-volumes.html#overview-of-thin-provisioning_creating-and-managing-thinly-provisioned-volumes}精简配置概述 {.title}
:::
许多现代存储堆栈现在提供在密集置备和精简置备之间进行选择的功能：
::: itemizedlist
-   thick 调配提供了块存储的传统行为，无论其实际使用情况如何分配块。
-   精简配置可以调配更大的块存储池，其大小可能大于存储数据的物理设备，从而造成过度配置。可能会进行过度配置，因为在实际使用单个块前不会分配各个块。如果您有多个共享同一池的精简配置设备，则可以过度置备这些设备。
:::
通过使用精简配置，您可以过量使用物理存储，而是可以管理称为精简池的空闲空间池。当应用程序需要时，您可以将这个精简池分配给任意数量的设备。您可以在需要时动态扩展精简池，以便有效分配存储空间。
例如，如果 10 个用户为每个应用程序请求一个 100GB
文件系统，则可以为每个用户创建一个 100GB
文件系统，但其支持的实际存储较少。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在使用精简配置时，务必要监控存储池，并在可用物理空间耗尽时添加更多容量。
:::
以下是使用精简配置的设备的一些优点：
::: itemizedlist
-   您可以创建大于可用物理存储的逻辑卷。
-   您可以将更多虚拟设备存储在同一数据卷中。
-   您可以创建可逻辑地增长的文件系统来支持数据要求，并且返回未使用的块供池中任意文件系统使用
:::
以下是使用精简配置的设备的潜在缺陷：
::: itemizedlist
-   精简配置的卷存在可用物理存储的固有风险。如果您过度置备底层存储，则可能因为缺少可用的物理存储会导致停机。例如，如果您创建了一个只为支持
    1T 的精简配置存储 10T，则该卷将在 1T 耗尽后不可用或不可写入。
-   如果在精简配置的设备后没有向层发送丢弃卷，那么使用量的核算就不准确。例如，在没有
    `-o discard 挂载选项`{.literal}
    的情况下放置文件系统，且不会在精简配置的设备之上定期运行
    `fstrim`{.literal}
    永远不会取消分配之前使用的存储。在这种情况下，即使您实际上没有使用它，您还会使用整个配置的时间。
-   您必须监控逻辑和物理使用情况，以便不用尽可用空间。
-   在带有快照的文件系统上复制 Write(CoW)操作可能会较慢。
-   数据块在多个文件系统之间占有力，导致底层存储的随机访问限制，即使它没有向最终用户显示这种方式。
:::
:::
::: section
::: titlepage
# []{#creating-and-managing-thinly-provisioned-volumes_configuring-and-managing-logical-volumes.html#creating-thinly-provisioned-logical-volumes_creating-and-managing-thinly-provisioned-volumes}创建精简配置的逻辑卷 {.title}
:::
使用精简配置的逻辑卷，您可以创建大于可用物理存储的逻辑卷。创建精简配置的卷集合允许系统分配使用的内容，而不是分配请求的完整存储量。
使用 `lvcreate`{.literal} 命令的 `-T`{.literal} 或 `--thin`{.literal}
选项，您可以创建一个精简池或精简卷。您也可以使用 `lvcreate`{.literal}
命令的 `-T`{.literal}
选项，通过单个命令同时创建精简池和精简卷。这个步骤描述了如何创建和增大精简置备逻辑卷。
::: itemizedlist
**先决条件**
-   您已创建了卷组。如需更多信息，请参阅[创建 LVM
    卷组](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_and_managing_logical_volumes/managing-lvm-volume-groups_configuring-and-managing-logical-volumes#creating-lvm-volume-group_managing-lvm-volume-groups){.link}。
:::
::: orderedlist
**步骤**
1.  创建精简池：
    ``` literallayout
    # lvcreate -L 100M -T vg001/mythinpool
      Thin pool volume with chunk size 64.00 KiB can address at most 15.81 TiB of data.
      Logical volume "mythinpool" created.
    ```
    请注意：由于您要创建物理空间池，您必须指定池的大小。`lvcreate`{.literal}
    命令的 `-T`{.literal}
    选项不使用参数；它确定要从添加的其他选项中创建哪种设备类型。您还可以使用额外参数创建精简池，如下例所示：
    ::: itemizedlist
    -   您还可以使用 `lvcreate`{.literal} 命令的 `--thinpool`{.literal}
        参数创建精简池。与 `-T`{.literal} 选项不同，\--
        `thinpool`{.literal}
        参数要求您指定您要创建的精简池逻辑卷的名称。以下示例使用
        `--thinpool`{.literal} 参数在卷组 [*vg001*]{.emphasis}
        中创建名为 [*mythinpool*]{.emphasis} 的精简池，大小为
        [*100M*]{.emphasis} ：
        ``` literallayout
        # lvcreate -L 100M --thinpool mythinpool vg001
          Thin pool volume with chunk size 64.00 KiB can address at most 15.81 TiB of data.
          Logical volume "mythinpool" created.
        ```
    -   随着条带的创建支持，您可以使用 `-i`{.literal} 和 `-I`{.literal}
        选项创建条带。以下命令在卷组 [*vg001*]{.emphasis} 中创建一个名为
        [*thinpool*]{.emphasis} 的 [*100M*]{.emphasis}
        精简池，其中有两个 [*64 kB*]{.emphasis} 条带，块大小为 [*256
        kB*]{.emphasis}。它还创建一个名为
        [*vg001/thinvolume*]{.emphasis} 的 [*1T*]{.emphasis} 精简卷。
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        确定卷组中有两个有足够可用空间的物理卷，或者您无法创建精简池。
        :::
        ``` literallayout
        # lvcreate -i 2 -I 64 -c 256 -L 100M -T vg001/thinpool -V 1T --name thinvolume
        ```
    :::
2.  创建精简卷：
    ``` literallayout
    # lvcreate -V 1G -T vg001/mythinpool -n thinvolume
      WARNING: Sum of all thin volume sizes (1.00 GiB) exceeds the size of thin pool vg001/mythinpool (100.00 MiB).
      WARNING: You have not turned on protection against thin pools running out of space.
      WARNING: Set activation/thin_pool_autoextend_threshold below 100 to trigger automatic extension of thin pools before they get full.
      Logical volume "thinvolume" created.
    ```
    在这种情况下，您要为大于包含它的卷指定虚拟大小。您还可以使用额外参数创建精简卷，如下例所示：
    ::: itemizedlist
    -   要创建精简卷和精简池，请使用 `lvcreate`{.literal} 命令的
        `-T`{.literal} 选项并指定大小和虚拟大小参数：
        ``` literallayout
        # lvcreate -L 100M -T vg001/mythinpool -V 1G -n thinvolume
          Thin pool volume with chunk size 64.00 KiB can address at most 15.81 TiB of data.
          WARNING: Sum of all thin volume sizes (1.00 GiB) exceeds the size of thin pool vg001/mythinpool (100.00 MiB).
          WARNING: You have not turned on protection against thin pools running out of space.
          WARNING: Set activation/thin_pool_autoextend_threshold below 100 to trigger automatic extension of thin pools before they get full.
          Logical volume "thinvolume" created.
        ```
    -   要使用剩余的可用空间来创建精简卷和精简池，请使用
        `100%FREE`{.literal} 选项：
        ``` literallayout
        # lvcreate -V 1G -l 100%FREE -T vg001/mythinpool -n thinvolume
        Thin pool volume with chunk size 64.00 KiB can address at most <15.88 TiB of data.
          Logical volume "thinvolume" created.
        ```
    -   要将现有逻辑卷转换为精简池卷，请使用 `lvconvert`{.literal}
        命令的 `--thinpool`{.literal} 参数。您还必须使用
        `--poolmetadata`{.literal} 参数和 `--thinpool`{.literal}
        参数将现有逻辑卷转换为精简池卷的元数据卷。
        以下示例将卷组 [*vg001*]{.emphasis} 中的现有逻辑卷
        [*lv1*]{.emphasis} 转换为精简池卷，并将卷组 [*vg001*]{.emphasis}
        中现有逻辑卷 [*lv2*]{.emphasis} 转换为那个精简池卷的元数据卷：
        ``` literallayout
        # lvconvert --thinpool vg001/lv1 --poolmetadata vg001/lv2
          Converted vg001/lv1 to thin pool.
        ```
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        将逻辑卷转换成精简池卷或精简池元数据卷会破坏逻辑卷的内容，因为
        `lvconvert`{.literal} 不会保留设备的内容，而是覆盖其内容。
        :::
    -   默认情况下，`lvcreate`{.literal}
        命令根据以下公式设置精简池元数据逻辑卷的大小：
        ``` literallayout
        Pool_LV_size / Pool_LV_chunk_size * 64
        ```
        如果您有大量快照，或者您的精简池有小的块大小，以后需要增加精简池的大小，则可能需要使用
        `lvcreate`{.literal} 命令的 `--poolmetadatasize`{.literal}
        参数增加精简池元数据卷的默认值。精简池元数据逻辑卷所支持的值在
        2MiB 到 16GiB 之间。
        以下示例演示了如何增加精简池元数据卷的默认值：
        ``` literallayout
        # lvcreate -V 1G -l 100%FREE -T vg001/mythinpool --poolmetadatasize 16M -n thinvolume
        Thin pool volume with chunk size 64.00 KiB can address at most 15.81 TiB of data.
           Logical volume "thinvolume" created.
        ```
    :::
3.  查看创建的精简池和精简卷：
    ``` literallayout
    # lvs -a -o +devices
      LV                 VG    Attr       LSize   Pool       Origin Data%  Meta%  Move Log Cpy%Sync Convert Devices
      [lvol0_pmspare]    vg001 ewi-------   4.00m                                                           /dev/sda(0)
      mythinpool         vg001 twi-aotz-- 100.00m                   0.00   10.94                            mythinpool_tdata(0)
      [mythinpool_tdata] vg001 Twi-ao---- 100.00m                                                           /dev/sda(1)
      [mythinpool_tmeta] vg001 ewi-ao----   4.00m                                                           /dev/sda(26)
      thinvolume         vg001 Vwi-a-tz--   1.00g mythinpool        0.00
    ```
4.  可选：使用 `lvextend`{.literal}
    命令扩展精简池的大小。但是您无法缩小精简池的大小。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果您在创建精简池和精简卷时使用 `-l 100%FREE`{.literal}
    参数，则此命令会失败。
    :::
    下面的命令调整了大小为 [*100M*]{.emphasis}
    的现有精简池，方法是将其扩展另一个 [*100M*]{.emphasis} ：
    ``` literallayout
    # lvextend -L+100M vg001/mythinpool
      Size of logical volume vg001/mythinpool_tdata changed from 100.00 MiB (25 extents) to 200.00 MiB (50 extents).
      WARNING: Sum of all thin volume sizes (1.00 GiB) exceeds the size of thin pool vg001/mythinpool (200.00 MiB).
      WARNING: You have not turned on protection against thin pools running out of space.
      WARNING: Set activation/thin_pool_autoextend_threshold below 100 to trigger automatic extension of thin pools before they get full.
      Logical volume vg001/mythinpool successfully resized
    ```
    ``` literallayout
    # lvs -a -o +devices
      LV                 VG    Attr       LSize   Pool       Origin Data%  Meta%  Move Log Cpy%Sync Convert Devices
      [lvol0_pmspare]    vg001 ewi-------   4.00m                                                           /dev/sda(0)
      mythinpool         vg001 twi-aotz-- 200.00m                   0.00   10.94                            mythinpool_tdata(0)
      [mythinpool_tdata] vg001 Twi-ao---- 200.00m                                                           /dev/sda(1)
      [mythinpool_tdata] vg001 Twi-ao---- 200.00m                                                           /dev/sda(27)
      [mythinpool_tmeta] vg001 ewi-ao----   4.00m                                                           /dev/sda(26)
      thinvolume         vg001 Vwi-a-tz--   1.00g mythinpool        0.00
    ```
5.  可选：要重命名精简池和精简卷，请使用以下命令：
    ``` literallayout
    # lvrename vg001/mythinpool vg001/mythinpool1
      Renamed "mythinpool" to "mythinpool1" in volume group "vg001"
    # lvrename vg001/thinvolume vg001/thinvolume1
      Renamed "thinvolume" to "thinvolume1" in volume group "vg001"
    ```
    重命名后查看精简池和精简卷：
    ``` literallayout
    # lvs
      LV          VG       Attr     LSize   Pool       Origin Data%  Move Log Copy%  Convert
    mythinpool1 vg001   twi-a-tz 100.00m                     0.00
    thinvolume1 vg001   Vwi-a-tz   1.00g mythinpool1         0.00
    ```
6.  可选：要删除精简池，请使用以下命令：
    ``` literallayout
    # lvremove -f vg001/mythinpool1
      Logical volume "thinvolume1" successfully removed.
      Logical volume "mythinpool1" successfully removed.
    ```
:::
::: itemizedlist
**其他资源**
-   `lvcreate(8`{.literal} )、`lvrename(8)、`{.literal}
    `lvs(8)`{.literal} 和 `lvconvert(8)`{.literal} man page
:::
:::