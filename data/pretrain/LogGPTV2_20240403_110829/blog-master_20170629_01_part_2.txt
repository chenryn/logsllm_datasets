```  
so one symbol (letters or digits) is base 32 (8 bits) Each first bit is used for high or low window,   
then subsequent bits divide the precision by 2.   
(so divide by 8 in the best case) but there is an alternance between lat and long precision,   
so it ends up dividing by 4 and 8 alternatively.  
#   km        
1   ±2500  
2   ±630  
3   ±78  
4   ±20  
5   ±2.4  
6   ±0.61  
7   ±0.076  
8   ±0.019  
9   ±0.0024  
10  ±0.00060  
11  ±0.000074  
Note that, as mentioned on the Wiki page, those values come from a location near the equator,   
where a degree has nearly the same lenght in X and Y.   
For a more accurate information, you should start from the lat and long errors,   
and compute the km precision along X-axis based on the latitude of your position.  
```  
### 预计算 - 滑动空间窗口(点辐射)  
空间维度的滑动窗口，实现方法和时间维度的滑动窗口类似，例如我们可以对8位编码的geohash进行统计，然后我们可以按5位geohash编码进行二次聚合透视。  
![pic](20170629_01_pic_010.jpg)  
空间滑动和时间滑动窗口一样，使用预计算都会有一定的失真。（因为边界无法做到完全清晰。）  
如果用户在意这样的失真，可以考虑实时计算。  
业务维度的预计算与时间、空间维度类似，就不赘述了。  
## 六、透视设计  
### 透视需求 - 固定时间  
```  
select sum,avg,count,min,max,hll,....   
  from result   
where   
  ts =   
  and val1 =   
  and ...;  
```  
### 透视需求 - 滑动窗口  
通过预计算实现的滑动，需要进行二次聚合。方法如下：  
```  
sum = sum(sum)  
count = sum(count)  
min = min(min)  
max = max(max)  
avg = sum(sum)/sum(count)  
hll = hll_union_agg(hll)  
```  
```  
select sum(sum),sum(count),hll_union_agg(hll),...  
  from result   
where   
  ts between ? and ?  
  and val1 =   
  and ...;  
```  
### 透视需求 - 固定行政区  
```  
select sum,avg,count,min,max,hll,....   
  from result   
where   
  loc_id = ?  
  and val1 =   
  and ...;  
```  
### 透视需求 - 滑动空间窗口(点辐射)  
```  
sum = sum(sum)  
count = sum(count)  
min = min(min)  
max = max(max)  
avg = sum(sum)/sum(count)  
hll = hll_union_agg(hll)  
```  
```  
select sum(sum), sum(count), hll_union_agg(hll), ...  
  from result   
where   
  substring(geohash_val, 1, 5) = ?   
  and val1 =   
  and ...;  
```  
## 七、结合OSS  
实际上，如果用户不需要查询明细，或者用户不需要频繁的要求低延迟的查询少量明细的话，明细数据是不需要进入数据库的，导入OSS即可。  
![pic](20170629_01_pic_002.jpg)    
用户可以使用RDS PG或HDB PG，并发的访问OSS，从而达到实时透视，或者预计算的目的。  
## 八、流计算，lambda  
[《流计算风云再起 - PostgreSQL携PipelineDB力挺IoT》](../201612/20161220_01.md)    
流计算的模式，用户根据数据结构创建流，并对流创建统计视图，然后激活这个统计视图，将数据实时写入数据库，数据库对流过的数据进行实时的统计，生成统计结果。  
如果统计结果本身也非常庞大，那么我们可以使用TTL统计视图，定期将统计结果转移到HDB即可。  
![pic](20170629_01_pic_011.jpg)  
例子  
定义流  
```  
create stream s1 (  
  sid int,       -- 传感器ID  
  pos geometry,  -- 传感器位置  
  ts timestamp,  -- 时间  
  val1 int,      -- 传感器探测到的属性1值  
  val2 float,    -- 传感器探测到的属性2值   
  val3 text      -- 传感器探测到的属性3值  
  ......   
);  
```  
定义TTL统计视图，保留1周  
```  
CREATE CONTINUOUS VIEW v1 WITH (ttl = '7 day', ttl_column = 'crt_time') AS  
select date(crt_time) crt_time,col1,col2,col3,...,agg_func1(),agg_func2(),...   
from table  
  group by date(crt_time),GROUPING SETS(col1,col2,col3,...);  
```  
激活统计视图  
```  
ACTIVATE v1;   
```  
定期数据转移  
```  
insert into result  
  select * from v1 where crt_time = '昨天';  
```  
数据透视  
```  
select * from result ....;  
```  
## 九、小结  
1、为什么不使用时间、空间复合索引？  
当用户需要查询某个时间区间，某个点附近N公里的数据时，有什么快速定位到目标明细数据的方法？  
在实际维度建索引、在空间维度建索引，只能快速的收敛到一个维度，另一维度需要通过HEAP得到TUPLE后进行RECHECK和过滤。  
为什么不建立时间、空间两个字段的复合索引呢？因为都是连续查询，所以这类复合索引都需要扫描驱动列的所有索引ENTRY。  
复合索引对于驱动列为等值的查询效率是很高的。  
对于时间、空间双维度数据查询，建议使用分区的方法，分区是最有效的可以缩小数据范围的方法。  
空间维度的分区，建议使用GEOHASH的range分区。  
2、毫秒级任意维度透视的核心，预计算。  
3、数据估算类型：HLL。有助于用户快速的查询唯一值数量，新增值数量。  
4、如果用户需要对明细VALUE进行聚合，可以使用数组、JSONB等字段存储聚合明细。  
5、阿里云 **RDS PG、HDB for PG、OSS、流计算插件、云端ETL调度任务服务** , 为毫秒级的时间、空间任意维度数据透视提供了一个完整的大数据实时计算的解决方案。  
- [RDS PostgreSQL](https://www.aliyun.com/product/rds/postgresql)   
- [HDB PostgreSQL](https://www.aliyun.com/product/gpdb)   
- [OSS](https://www.aliyun.com/product/oss)   
6、对于空间数据，除了使用GiST索引，我们还有一个更省成本的索引BRIN索引，按st_geohash规整数据后，过滤性非常棒。建议一定要看一下，你会开阔更多的优化思路的：
[《PostGIS空间索引(GiST、BRIN、R-Tree)选择、优化 - 阿里云RDS PostgreSQL最佳实践》](../201708/20170820_01.md) 
[《PostgreSQL BRIN索引的pages_per_range选项优化与内核代码优化思考》](../201708/20170824_01.md)
[《Greenplum 空间(GIS)数据检索 b-tree & GiST 索引实践 - 阿里云HybridDB for PostgreSQL最佳实践》](../201708/20170824_02.md)
[《通过空间思想理解GiST索引的构造》](../201708/20170825_01.md)  
## 参考  
http://docs.pipelinedb.com/sliding-windows.html  
[《PostgreSQL\GPDB 多维数据透视典型案例分享》](../201706/20170625_01.md)   
[《(流式、lambda、触发器)实时处理大比拼 - 物联网(IoT)\金融,时序处理最佳实践》](../201705/20170518_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")