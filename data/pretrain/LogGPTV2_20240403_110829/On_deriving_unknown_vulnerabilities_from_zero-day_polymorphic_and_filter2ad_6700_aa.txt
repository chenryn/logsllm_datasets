# Title: Deriving Unknown Vulnerabilities from Zero-Day Polymorphic and Metamorphic Worm Exploits

## Authors:
- Jedidiah R. Crandall
- Zhendong Su
- Shyhtsun Felix Wu
- Frederic T. Chong

### Abstract
Vulnerabilities that allow worms to hijack the control flow of each host they infect are typically discovered months before the worm outbreak, often by third-party researchers. A determined attacker could discover these vulnerabilities and create zero-day worms, exploiting them before network defenses are aware. It is crucial for an analysis tool to generalize from a new exploit and derive protection for the underlying vulnerability.

Many researchers have noted that certain predicates in the exploit vector must be present for the exploit to work, thus limiting the amount of polymorphism and metamorphism available to the attacker. We formalize this idea and subject it to quantitative analysis using a symbolic execution tool called DACODA. Our empirical analysis covers 14 exploits (seven of which were actual worms or attacks caught by Minos with no prior knowledge of the vulnerabilities and no false positives over six months) across four operating systems.

Our results indicate that single contiguous byte string signatures are not effective for content filtering, and token-based byte string signatures composed of smaller substrings are only semantically rich enough for content filtering if the vulnerability lies in a less commonly used part of a protocol. Additionally, practical exploit analysis must account for multiple processes, multithreading, and kernel processing of network data, necessitating a focus on primitives rather than specific vulnerabilities.

### Introduction
Zero-day worms that exploit unknown vulnerabilities pose a significant threat. Typically, vulnerabilities are discovered by "white hat" hackers using fuzz testing, reverse engineering, or source code analysis, and then reported to software vendors. However, "black hat" hackers can employ the same techniques, especially as computer criminals increasingly seek profit. None of the 14 exploits analyzed in this paper were for vulnerabilities discovered by the software vendors.

A vulnerability provides the attacker with a primitive, such as the ability to write an arbitrary value to an arbitrary location in a process' address space. The attacker can then build different exploits using this primitive. The host contains information about the vulnerability and primitive that cannot be determined from network traffic alone. An automated analysis tool must be able to generalize one instance of an exploit and derive protection for the exploited vulnerability, as a worm can build multiple exploits for the same vulnerability from primitives.

#### 1.1 The Need for Vulnerability-Specific Signatures
If a honeypot or network technology generated an exploit-specific signature for every exploit, the worm author could trivially subvert content filtering by generating a new exploit for each infection attempt. One approach to mitigate this is to compare multiple exploits and find common substrings. This can be done in the network or from TCP dumps of different honeypots. Our results show that contiguous byte string signatures are not semantically rich enough for effective content filtering of polymorphic and metamorphic worms. Token-based byte strings are only effective if the vulnerability is in a less commonly used part of a protocol.

#### 1.2 DACODA: The Davis Malcode Analyzer
Complicating the problem of deriving the vulnerability from a single exploit is the fact that many exploits involve multiple network connections, processes, and significant kernel processing. We developed two models to discuss polymorphism and metamorphism: the Epsilon-Gamma-Pi (ε, γ, π) model for control flow hijacking attacks and the PD-Requires-Provides model for exploits. Both models take a "from-the-architecture-up" view, treating context switches and interprocess communication as physical data transfers.

We developed DACODA, a tool that uses full-system symbolic execution to analyze attacks. DACODA tracks data from the attacker's network packets to the hijacking of control flow and discovers strong, explicit equality predicates about the exploit vector. Using Minos as an oracle, DACODA has been analyzing attacks exploiting unknown vulnerabilities with zero observed false positives over the past six months.

#### 1.3 Related Work
The details of the Epsilon-Gamma-Pi model are summarized in another paper [14]. For categorizing related work, we state that ε maps the exploit vector from the attacker’s network packets onto the trace of the machine being attacked, γ maps the bogus control data used for hijacking control flow, and π maps the payload executed after control flow has been hijacked.

##### 1.3.1 Vulnerability Specificity
Vigilante [10, 11] captures worms using a mechanism similar to Minos but based on binary rewriting of a single process and dynamic dataflow analysis to generate a vulnerability signature. Binary rewriting does not capture interprocess communication, inter-thread communication, or kernel space data processing, and it modifies the address space of the process, potentially breaking the exploit. DACODA, a full-system implementation, does not modify the system and distinguishes between data on the network and processed data on the host.

TaintCheck [29] is also based on binary rewriting and proposed dynamic slicing techniques for generating vulnerability-specific signatures. DACODA, however, uses symbolic execution of every machine instruction in the entire system. RIFLE [41] augmented an Itanium architecture simulator with dataflow analysis capabilities, but its aim was to enforce confidentiality policies, unlike DACODA, which focuses on analyzing worm exploits.

Newsome et al. [28] proposed three types of signatures based on tokens, which can be ordered or scored. Polygraph, unlike EarlyBird [37], Autograph [21], or Honeycomb [24], relies on a flow classifier to sort worm traffic from benign traffic. The invariant bytes used for tokens were typically from protocol framing (ε) or the bogus control data (γ). Protocol framing describes a valid part of a protocol, such as “HTTP GET” in HTTP. γ permits too much polymorphism due to register springs, a technique where the bogus function pointer points to an instruction in a library or static program that jumps to a register pointing into the buffer containing π.

##### 1.3.2 Modeling Polymorphism
Ideas similar to our PD-Requires-Provides model for exploit polymorphism and metamorphism are presented in Rubin et al. [34, 35]. Our model is at a lower level of abstraction and distinguishes between what the exploit looks like on the network and when processed on the host. These works were intended for generating exploits based on known vulnerabilities, not for analyzing zero-day exploits to derive protection for unknown vulnerabilities. Recent work [44] generates vulnerability-specific signatures for unknown exploits but requires a detailed protocol specification. DACODA, through symbolic execution, needs no such specification.

##### 1.3.3 Polymorphic Worm Detection
Many researchers have studied polymorphic techniques and detection mechanisms in π [1, 6, 8, 23, 25, 31, 40]. Several proposed mechanisms are based on the existence of a NOP sled, which is not applicable to Windows exploits, nearly all of which use register springs [14]. Other works focused on γ, which can be highly polymorphic. We argue that π and γ permit too much polymorphism, motivating a closer look at ε. This paper focuses on the polymorphism and metamorphism of ε.

##### 1.3.4 Our Main Contributions
Our main contributions are:
1. A tool for whole-system symbolic execution of remote exploits.
2. A detailed and quantitative analysis of polymorphism and metamorphism for the exploit vector mapped by ε.
3. Insights into the limitations of current signature-based approaches and the need for more sophisticated analysis tools.

### Conclusion
This paper presents a comprehensive analysis of zero-day polymorphic and metamorphic worm exploits, emphasizing the importance of deriving unknown vulnerabilities from observed exploits. Our tool, DACODA, provides a robust framework for this analysis, and our findings highlight the need for more advanced and flexible defense mechanisms.