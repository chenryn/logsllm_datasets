2
2
three heuristics is meant to work in conjunction with the Dirty Page Execution
heuristic.
We apply a set of packers to a set of test binaries, run these packed binaries
under Justin, and measure the number of end-of-unpacking detections. Table 2
shows the average number of end-of-unpacking detections for each of these four
heuristics. Used together, the three additional heuristics in Justin successfully
reduces the number of spurious end-of-unpacking detections to the same level
as Martignoni et al. [18], but in a way that still preserves the original program’s
entry point information.
Although the number of spurious end-of-unpacking detections produced by
Unpacker Memory Avoidance is higher than the other two heuristics, it is more
reliable and resilient to evasion. If Justin mistakes a normal page as an unpacker
page, it will not monitor this page, and the worst that can happen is that Justin
loses the original program’s entry point if this page happens to contain the
original entry point. If Justin mistakes an unpacker page as a normal page, it
will monitor this page, and the worst that can happen is additional spurious end-
of-unpacking detections. Currently, Justin is designed to err on the conservative
side and therefore is tuned to treat unpacker pages as normal pages rather than
the other way around.
We test the Stack Pointer Check heuristic using the packers listed in Table 2.
Column 4 of Table 2 shows the average number of end-of-unpacking detections for
each packer tested is decreased to just one or two for most packers. Unfortunately,
112
F. Guo, P. Ferrie, and T.-c. Chiueh
this heuristic generates false negatives but no false positive. A false positive
occurs when a certain execution point passes the stack pointer check but it is not
the end of unpacking. This happens when the unpacker intentionally manipulates
the stack pointer to evade this heuristic. None of the packers we tested exhibit
this evasion behavior. A false negative happens when Justin thinks an execution
point is not the end of unpacking when in fact it is. This happens when the
unpacker does not clean up the stack to the exactly same state when the unpacker
starts. The unpacker in ASProtect-packed binaries doesn’t completely clean up
the stack before transferring control to the original binary. It is possible to loosen
up the stack pointer check, i.e., as long as the stack pointers are roughly the same,
to mitigate this problem, but this is not a robust solution and may cause false
positives.
The key idea in Command-Line Argument Access is that when the original
binary embedded in a packed binary starts execution, there is a piece of compiler-
generated code that will prepare the stack by fetching command-line arguments.
Therefore, if at an execution point the command-line arguments supplied to a
packed binary’s run are already put on the stack, that execution point must
have passed the end of unpacking. This command-line argument access behavior
exists event if the original binary is not designed to accept any command-line ar-
guments. Because Justin gets to choose the values for command-line arguments,
it detects command-line argument access by searching the stack for pointers that
point to values that it chooses as command-line arguments.
We test the Command-Line Argument Access heuristic using the packers listed
in Table 2. Column 5 of Table 2 list the average number of end-of-unpacking
detections for each packer tested, which is generally higher than the Stack Pointer
Check heuristic for the following reason. To put command-line arguments on
the stack, the original program needs to execute a couple of new generated code
pages. The execution of the new generated pages causes one or two more end-
of-unpacking detections. Even though its reported number of end-of-unpacking
detections is slightly higher, the Command-Line Argument Access heuristic does
not generate any false positive or false negative. For example, it can accurately
detect the end of unpacking for ASProtect-packed binaries, but the Stack Pointer
Check heuristic cannot.
4.3 Performance Overhead of Justin
Justin is designed to work with an AV scanner to monitor the execution of
binaries. Its performance penalty comes from two sources: (1) additional virtual
memory protection exceptions that are triggered during dirty page tracking, and
(2) AV scans invoked when potential ends of unpacking are detected. We packed
Microsoft Internet Explorer, whose binary size is 91KB, with a set of packers,
ran the packed version, and measured its start-up delay with and without Justin
on a 3.2GHz Pentium-4 machine running Windows XP. The start-up delay is
deﬁned as the interval between when the IE process is created and when it calls
the Win32 API CreateWindowEx function, which creates the ﬁrst window. The
start-up time excludes the program load time, which involves disk access, so
A Study of the Packer Problem and Its Solutions
113
Table 3. The average additional start-up delays for Microsoft Internet Explorer (IE)
when it is packed by a set of packers and run under Justin and an AV scanner. The
additional delay is dominated by AV scanning, which is mainly determined by the
number of AV scans invoked during a packed binary’s run.
Packers Number of Original Delay Extra Delay Extra
AV Scans
(msec)
(msec) Delay %
ACProtect
ASProtect
eXPressor
FSG
Molebox
NsPack
Obsidium
PECompact
UPX
2
3
2
2
2
2
6
3
2
46
62
62
62
31
46
31
62
31
4.2
9.0
5.5
4.2
4.2
4.5
12.1
5.8
4.1
9.1
14.6
8.8
6.8
13.5
9.9
38.7
9.3
13.1
that we can focus on the CPU overhead. After the ﬁrst window is created, a
packed GUI application must have been fully unpacked, and there will not be
any additional protection exceptions or AV scans from this point on. The AV
scanner used in this study runs at 40 MB/sec on the test machine, and is directly
invoked as a function call.
Table 3 shows the base start-up delay and the additional start-up delay for
IE when it is packed by a set of packers and runs under Justin and an AV
scanner. Overall, the absolute magnitude of the additional start-up delay is quite
small. Justin only introduces several milliseconds of additional delay under most
packers. The largest additional delay occurs under Obsidium and is only around
12 msec. At least for IE, the additional start-up delay that Justin introduces is
too small to be visible to the end user.
Most of the additional start-up delay comes from AV scanning, because the
additional delay becomes close to zero when the AV scan operation is turned into
a no-op. This is why the additional start-up delay correlates very well with the
number of AV scans invoked. More speciﬁcally, the additional start-up delay for
a packer is the product of the AV scanning speed, the number of scans, and the
size of the memory being scanned. Because the amount of memory scanned in
each AV scan operation may be diﬀerent for binaries packed by diﬀerent packers,
the additional delay is diﬀerent for diﬀerent packers even though they invoke the
same number of AV scans.
We also try other GUI programs such as Microsoft NetMeeting, whose binary
is around 1 MB, and the additional delay results are consistent with those asso-
ciated with IE. The performance overhead associated with additional protection
exceptions is still negligible. Because of a larger binary size, the performance
cost of each AV scan is higher. On a typical Windows desktop machine, more
than 80% of its executable binaries is smaller than 100 KB. This means that
the additional start-up delay when they are packed and run under Justin will be
114
F. Guo, P. Ferrie, and T.-c. Chiueh
similar to that of IE and thus not noticeable. Finally, for legitimate programs
that are not packed, no AV scanning will be triggered when they run under
Justin, so there is no performance overhead at all.
5 Conclusion
Packer poses a serious problem for the entire AV industry because it signiﬁ-
cantly raises the bar for signature-based malware detection. Existing solutions
to the packer problem do not scale because they require either expensive manual
reverse engineering eﬀorts or creation of separate signatures for variants of the
same malware. In this paper, we report the result of a detailed study of the
packer problem and its various solutions described in the literature, taking into
account practical requirements and design considerations when integrating such
solutions with commercial AV products. In particular, we describe a solution to
the packer problem called Justin (JUST-IN-time AV scanning), which aims to
detect the end of unpacking during the execution of a packed binary in a packer-
independent way and invoke AV scanning against the binary’s run-time image
at that moment. Towards that end, Justin incorporates the following heuristics:
ﬁrst control transfer to dirty pages, avoiding tracking unpacker pages, checking
for stack unwinding, and detection of command-line input argument access. More
concretely, this paper makes the following contributions to the ﬁeld of malware
detection:
– A detailed analysis of the extent of the packer problem and the packing and
evasion technologies underlying state-of-the-art packers,
– A set of heuristics that collectively can eﬀectively detect the end of unpacking
during the execution of packed binaries without any a priori knowledge about
their packers,
– A comprehensive set of countermeasures against anti-unpacking evasion tech-
niques built into modern packers, and
– A fully working Justin prototype and a thorough evaluation of its eﬀective-
ness and performance overhead.
Overall, Justin’s eﬀectiveness at detecting packed malware is excellent and its
performance overhead for packed goodware is minimal. However, this paper will
not be the ﬁnal chapter on the packer problem. If anything, experiences tell us
that the packer community will sooner or later shift to a diﬀerent set of tactics
to evade Justin’s detection techniques. So the search for better solutions to the
packer problem is expected to continue for the next few years.
References
1. Oberhumer, M.F., Moln´ar, L., Reiser, J.F.: UPX: the Ultimate Packer for eXe-
cutables (2007), http://upx.sourceforge.net/
2. ASPACK SOFTWARE, ASPack for Windows, (2007),
http://www.aspack.com/aspack.html
A Study of the Packer Problem and Its Solutions
115
3. bart, FSG: [F]ast [S]mall [G]ood exe packer, (2005),
http://www.xtreeme.prv.pl/
4. Dwing, WinUpack 0.39ﬁnal, (2006), http://dwing.51.net/
5. Oreans Technology, Themida: Advanced Windows Software Protection System,
(2008), http://www.oreans.com/themida.php
6. Silicon Realms, Armadillo/SoftwarePassport (2008),
http://www.siliconrealms.com/
7. Blinkinc,Shrinker 3.4, (2008), http://www.blinkinc.com/shrinker.htm
8. Ferrie, P.: Attacks on Virtual Machines. In: Proceedings 9th Annual AVAR Inter-
national Conference (2006)
9. VMProtect, VMProtect (2008), http://www.vmprotect.ru/
10. Symantec Corporation (2008), http://www.symantec.com/
11. Lyda, R., Hamrock, J.: Using entropy analysis to ﬁnd encrypted and packed mal-
ware. IEEE Security and Privacy 5(2), 40–45 (2007)
12. Prakash, C.: Design of X86 Emulator for Generic Unpacking. In: Proceedings of
10th Annual AVAR International Conference (2007)
13. Tan, X.: Anti-unpacker Tricks in Malicious Code. In: Proceedings of 10th Annual
AVAR International Conference (2007)
14. Royal, P., Halpin, M., Dagon, D., Edmonds, R., Lee, W.: Polyunpack: Automat-
ing the hidden-code extraction of unpack-executing malware. In: ACSAC 2006:
Proceedings of the 22nd Annual Computer Security Applications Conference on
Annual Computer Security Applications Conference, pp. 289–300 (2006)
15. Kang, M.G., Poosankam, P., Yin, H.: Renovo: A hidden code extractor for packed
executables. In: Proceedings of the 5th ACM Workshop on Recurring Malcode
(WORM) (Oct. 2007)
16. Stewart, J.: OllyBonE v0.1, Break-on-Execute for OllyDbg (2006),
http://www.joestewart.org/ollybone/
17. Quist, D., Valsmith,: Covert Debugging: Circumventing Software Armoring. In:
Proceedings of Black Hat USA (2007)
18. Martignoni, L., Christodorescu, M., Jha, S.: OmniUnpack: Fast, Generic, and Safe
Unpacking of Malware. In: 23rd Annual Computer Security Applications Confer-
ence (ACSAC) (2007)
19. Nanda, S., Li, W., chung Lam, L., cker Chiueh, T.: BIRD: Binary Interpretation
using Runtime Disassembly. In: Proceedings of the 4th IEEE/ACM Conference on
Code Generation and Optimization (CGO 2006) (2006)
20. NX bit, http://en.wikipedia.org/wiki/NX bit