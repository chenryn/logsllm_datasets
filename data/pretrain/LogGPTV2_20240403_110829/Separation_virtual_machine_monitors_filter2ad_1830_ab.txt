all VMMs. We would like to have rules that cover equiva-
lent resources, without being expressed in terms of speciﬁc
resources.
Security in conventional Xen is enforced primarily by its
Xen Security Module (XSM) but also by other small pieces
of code at key points in the hypervisor. The XSM security
model is based on SELinux (in turn based on Flask [29])
which provides ﬂexible ﬁne-grained type enforcement on in-
dividual resources. This ﬂexibility comes at a price: the
policies require many rules and it is diﬃcult to translate
the policy into an intuitive abstraction of what protection
421
workload A
workload B
workload C
Separation
VMM
u
n
t
r
u
s
t
e
d
V
M
u
n
t
r
u
s
t
e
d
V
M
d
e
v
c
e
i
d
r
i
v
e
r
V
M
u
n
t
r
u
s
t
e
d
V
M
u
n
t
r
u
s
t
e
d
V
M
Type 1 VMM
d
e
v
c
e
i
d
r
i
v
e
r
V
M
l
o
g
g
e
r
X
e
n
b
u
s
c
o
n
t
r
o
l
l
p
a
n
e
platform hardware (CPUs, memory, I/0)
workload A workload B
workload C
trusted driver
VM
Conventional
VMM
u
n
t
r
u
s
t
e
d
V
M
u
n
t
r
u
s
t
e
d
V
M
u
n
t
r
u
s
t
e
d
V
M
u
n
t
r
u
s
t
e
d
V
M
Type 1 VMM
platform hardware (CPUs, memory, I/0)
Figure 1: Separation VMM Security Mechanisms
Are Simpler Because They Support Simpler Policies
a given policy speciﬁes. The current practice for Xen is
to enable security in a passive mode and record the viola-
tions, then create rules to address the violations one-by-one.
While this approach yields a working policy, it cannot be
used to construct a policy that is veriﬁably a reﬁnement of
a previously chosen high-level abstraction.
Xenon security policies are separation VMM policies with
limited communication between guests. Xenon does not con-
form to the Xen code base. For these reasons we were able
to replace Xen’s security implementation with an order of
magnitude smaller implementation (269 versus 6665 lines of
code) that protects all of the Xen code paths protected by
Xen, but also provides additional VMM security features.
As shown in Figure 1, Xenon virtual machine system conﬁg-
urations do not include trusted guests, e.g. a trusted device
driver domain that serves guests whose information is sup-
posed to be separated.
In the example of Figure 1, there are 3 workloads A, B,
and C that are to be separated. While a conventional hy-
pervisor can be conﬁgured to this same arrangement, it can
also be conﬁgured as shown in the lower part of the ﬁg-
ure, with a single driver domain that is trusted not to share
anything contrary to the conﬁgured policy. The Xenon pro-
totype does not support trusted guest conﬁgurations and
thus its security mechanism is much simpler.
Security in Xenon is enforced entirely by a single module
named MSM that replaces both the XSM security module
and other code located at various places in the Xen internals.
Like Xen, Xenon’s MSM enforces a policy described by a
speciﬁcation. The policy speciﬁcation is written in XML
and is compiled into a binary policy that is loaded into the
VMM’s memory at boot time.
The number of rules in a speciﬁcation is relatively small.
For example, suppose that the workloads A, B, and C shown
in the top of Figure 1 each run on a diﬀerent kind of guest
operating system. The workload A’s guest is conﬁgured for
direct pass through of the underlying I/O hardware and pro-
422
vides its own device drivers. The single workload B guest
has its own device driver domain that is conﬁgured to only
access workload B resources, i.e. the device driver VM is
untrusted. The 2 workload C guests are supported by a sin-
gle untrusted driver VM. There are two additional service
VMs: one for security logging and another to separate the
Xenbus service [8, 33] from the domain 0 control plane. A
complete policy for this conﬁguration would require only 11
rules.
An MSM security policy contains rules describing
• domains,
• communication allowed between domains,
• rules for domain labels, and
• hypercalls allowed for each domain.
c
o
n
t
r
o
l
l
p
a
n
e
The XML for the rules includes features for aliases, proﬁles
to collect frequently used sets of rules, domain rules, and
domain sets to collect domains into a single named group.
In the following, we explain each of these MSM features.
4.1 Domain Policy
A domain deﬁnes the virtual hardware environment that
a guest operating system runs in, just as Xen does. Unlike
Xen, Xenon always assigns the same domain id to the same
domain. Security enforcement in Xen is based on an SSID
that is generated from a domain’s UUID. To simplify from
this design, Xenon assigns a ﬁxed domain id that always
corresponds to speciﬁc domain. MSM then uses the simple
domain id as the security identiﬁer. This design simpliﬁca-
tion is typical of our approach; since Xenon does not have
to conform to the Xen code base we are free to implement
direct solutions without getting sign oﬀ from the entire com-
munity.
The following policy fragment shows a single domain rule
that deﬁnes a security logging domain. The proﬁle deﬁnes
the hypercalls that a security logging domain may make; the
label is a mandatory access control label; and the UUID ﬁeld
is used to map the running VM back to its installed image.
To provide greater ﬂexibility during the installation and
conﬁguration of a Xenon VM system, the domain policy al-
lows execution of anonymous unprotected domains that are
not deﬁned in the policy. Unprotected domains are assigned
domain ids starting at 10000. MSM will allow creation of
VMs in unprotected domains, as long as no protected (i.e.
deﬁned in the policy) domains are executing their VMs. This
allows an administrator to install, test, or otherwise pro-
vision VMs without security enforcement. When the VM
system is otherwise ready for operational use, domains can
be incrementally added to the security policy and tested as
protected domains.
4.2 Communication Policy
MSM enforces communication between guests as a simple
(upper triangular) communication matrix that deﬁnes which
domains are allowed to communicate. Xenon’s communica-
tion policy is a simple all-or-nothing policy that is easy to
understand and verify: any 2 domains in a policy are either
allowed to communicate and otherwise share resources, or
they are not allowed to share anything. This is consistent
with the separation VMM concept of using a small number
of communication paths between domains. In the XML pol-
icy, communication rules are expressed as connections from
domains to sets of domains. If a domain does not appear
in any connection, then it can only connect to itself. This
is a good example of how the separation kernel principle in-
ﬂuences and simpliﬁes the design of a separation VMM: we
assume that most domains will not communicate with other
domains and thus the default is easily described by the lack
of a rule. The other type of communication pattern for a
separation VMM is a driver domain pattern where a driver
domain is allowed to connect to a set of domains that have
the same workload or other security attributes.
The following is an example policy based on the top of
Figure 1. There are no connection rules for the workload A
guest or the logger VM because they do not connect to any
other domain except the control plane, and follow the default
pattern. The control plane VM rule says that it is allowed to
connect to guests in the special domain set All, which allows
it to connect to any domain, even those that do not appear
in the policy and are thus otherwise unconnected. The 2
workload driver rules allow the appropriate driver VMs to
connect to their respective domains.
4.3 Label-Based Domain Policy
Xenon’s MSM provides mandatory access control (MAC)
labels for enforcement of coarse-grained per-virtual-machine
policies. Labels can be deﬁned and applied to domains and
also to the domain’s associated disk and network interfaces.
MSM labels are not limited to lattice-based information ﬂow
policies; they can be used by Xenon to enforce a variety
of rules including Chinese Wall conﬂict sets [7, 27], type
enforcement [5, 34], and time-based rules. An example of
the latter would be a domain label that restricted a domain
to running only during normal working hours.
MAC labels are a key component of simpliﬁed security
enforcement in the Xenon prototype, but their use is well
understood, so we do not discuss them at length. Further
discussion of label-based mandatory access control policy in
VMMs can be found in Sailer, et al. [27].
4.4 Hypercall Policy
Labels provide a MAC policy in the Xenon prototype,
at the granularity of a domain. We gain extra ﬂexibility
over domain-level MAC policies through management of in-
dividual resources. Xenon and Xen can enforce policies over
exactly the same set of resources, but Xenon enforces less
ﬁne grained separation of resources than Xen.
Instead of
the Flask-style per-individual-resource rules of Xen, Xenon
enforces resource control on a per-hypercall basis. Xenon’s
resource policies supplement its label-based domain access
control. For example, supplementary rules can be useful
when MAC labels are being used for Chinese Wall conﬂict
sets. Two domains that are allowed to execute together ac-
cording to a MAC Chinese Wall policy can still be separated
in other ways, e.g. USB port restrictions, by resource policy
rules.
In Xenon each guest is given a proﬁle deﬁning which hy-
percalls and hypercall subcommands the guest is allowed to
make. (Xen hypercalls are organized into primary hypercalls
with subcommands in order to reduce the size of the hyper-
call page [8].) If a guest attempts to make a hypercall that
is not in its proﬁle then its request is rejected and logged