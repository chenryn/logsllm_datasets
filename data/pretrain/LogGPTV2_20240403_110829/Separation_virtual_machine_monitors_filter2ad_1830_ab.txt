### Simplified and Enhanced Security Mechanisms in Xenon VMM

#### 1. Introduction
In conventional Xen, security is primarily enforced by the Xen Security Module (XSM), which is based on SELinux (itself derived from Flask [29]). XSM provides fine-grained type enforcement on individual resources, but this flexibility comes with a cost: the policies require numerous rules, making it challenging to translate the policy into an intuitive abstraction of the desired protection.

#### 2. Conventional Xen Security
- **Primary Enforcement**: Xen Security Module (XSM) and other small pieces of code at key points in the hypervisor.
- **Policy Model**: Based on SELinux, providing flexible, fine-grained type enforcement.
- **Challenges**: Policies are complex, requiring many rules, and it is difficult to create an intuitive high-level abstraction.
- **Current Practice**: Enable security in passive mode, record violations, and address them one-by-one. This approach, while functional, does not support verifiable refinement of high-level abstractions.

#### 3. Xenon Security Implementation
Xenon's security policies are designed for separation VMMs with limited communication between guests. Xenon does not conform to the Xen code base, allowing for a more streamlined and efficient implementation.

- **Code Reduction**: Xenon's security implementation is significantly smaller (269 lines of code vs. 6665 lines in Xen).
- **Security Features**: Provides all the security features of Xen and additional VMM security features.
- **No Trusted Guests**: Xenon configurations do not include trusted guests, such as a trusted device driver domain, simplifying the security mechanism.

#### 4. Xenon Security Mechanism
- **Single Module**: Enforced entirely by a single module called MSM, which replaces both XSM and other scattered code in Xen.
- **Policy Specification**: Written in XML and compiled into a binary policy loaded at boot time.
- **Simplified Rules**: A complete policy for a configuration with multiple workloads (e.g., A, B, C) requires only 11 rules.

#### 5. MSM Security Policy Components
- **Domains**: Define the virtual hardware environment for guest operating systems.
- **Communication**: Allowed between domains, defined by a simple communication matrix.
- **Labels**: Provide mandatory access control (MAC) for coarse-grained per-virtual-machine policies.
- **Hypercalls**: Enforce resource control on a per-hypercall basis, supplementing label-based domain access control.

#### 6. Domain Policy
- **Fixed Domain IDs**: Xenon assigns fixed domain IDs, simplifying the design.
- **Flexibility**: Allows execution of anonymous unprotected domains for installation and testing.
- **Example**: A policy fragment defining a security logging domain, including hypercalls, MAC labels, and UUID mapping.

#### 7. Communication Policy
- **Simple Matrix**: Defines allowed communication between domains.
- **Default Pattern**: Domains that do not appear in any connection can only connect to themselves.
- **Driver Domain Pattern**: Allows a driver domain to connect to a set of domains with the same workload or security attributes.

#### 8. Label-Based Domain Policy
- **Mandatory Access Control (MAC)**: Labels enforce coarse-grained policies, applicable to domains and their associated interfaces.
- **Versatility**: Supports various rules, including Chinese Wall conflict sets, type enforcement, and time-based restrictions.

#### 9. Hypercall Policy
- **Per-Hypercall Basis**: Enforces resource control, supplementing label-based domain access control.
- **Profile Definition**: Each guest has a profile defining allowed hypercalls and subcommands.
- **Violation Handling**: Requests for unauthorized hypercalls are rejected and logged.

By adopting these simplified and enhanced security mechanisms, Xenon achieves a more manageable and effective security framework compared to conventional Xen.