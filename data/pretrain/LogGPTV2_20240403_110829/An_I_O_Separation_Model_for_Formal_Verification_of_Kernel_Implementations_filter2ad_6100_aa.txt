# Title: An I/O Separation Model for Formal Verification of Kernel Implementations

# Authors:
Miao Yu, Virgil D. Gligor, and Limin Jia

# Publication Information:
2021 IEEE Symposium on Security and Privacy (SP)

# Abstract
Commodity I/O hardware often fails to separate I/O transfers of isolated OS and application code. Even with the best I/O hardware, commodity systems sometimes trade off separation assurance for increased performance. Remarkably, device firmware need not be malicious; any malicious driver, even if isolated in its own execution domain, can manipulate its device to breach I/O separation. To prevent such vulnerabilities with high assurance, a formal I/O separation model and its use in the automatic generation of secure I/O kernel code are necessary.

This paper presents a formal I/O separation model that defines a separation policy based on authorization of I/O transfers and is hardware-agnostic. The model, its refinement, and instantiation in the Wimpy kernel design are formally specified and verified in Dafny. We then specify the kernel implementation and automatically generate verified-correct assembly code that enforces the I/O separation policies. Our formal modeling enables the discovery of previously unknown design and implementation vulnerabilities in the original Wimpy kernel. Finally, we outline how the model can be applied to other I/O kernels and conclude with key lessons learned.

# Index Terms
- I/O separation
- Access control and authorization
- Trustworthy computing
- Security architectures

# 1. Introduction
An important goal of security architectures is to separate I/O transfers of isolated applications and retain application protection from compromised operating systems and other applications, with high assurance. To achieve this without enlarging the underlying trusted code base (e.g., micro-kernels, micro-hypervisors, separation kernels), existing designs rely on dedicated I/O kernels. These designs de-privilege device drivers, export them to isolated applications to separate them from each other, and authorize them to access only their own devices. This also helps eliminate applications' exposure to unneeded drivers, which continue to comprise a large portion of modern OS kernels and account for many security flaws.

To ensure that an isolated but malicious driver cannot compromise another isolated application by manipulating its own device, I/O kernels rely on the underlying I/O hardware (e.g., I/O controllers and IOMMUs) to enforce the association of an I/O device with an object of an isolated application/driver and authorize each I/O transfer. Unfortunately, hardware vendors have produced commodity hardware that focuses primarily on improved performance, increased connectivity, and lower cost, at the expense of fine-grained I/O device associations with isolated-application/driver objects and transfer authorization. For example, early PCI buses and more recent CAN buses allow unauthorized peer-to-peer device transfers, which can be leveraged by a malicious driver to access device registers of another isolated application. Other designs can only associate buses with isolated-application objects and enforce read-write permissions for buses but not individual devices. For instance, IOMMUs authorize accesses at the granularity of PCI bus controllers via PCIe-to-PCI bridges instead of individual PCI devices, allowing malicious drivers to breach isolation. Additionally, insecure performance optimizations, such as deferred IOTLB clearing, designed to counter significant performance degradation caused by frequent switches between authorized transfers, can also lead to breaches of application isolation.

This shows that the security guarantees of I/O kernels are intimately connected to the choice of underlying I/O hardware: a poor choice often leads to security vulnerabilities. However, neither a formal model nor a high-assurance design and implementation of I/O separation exists to date. As a result, current I/O kernels cannot match the high assurance of their underlying trusted code base, leading to isolated-application vulnerabilities where a malicious application can exploit flawed I/O transfer authorization to breach the isolation of other applications.

Our goal is to formalize I/O separation and develop an abstract model that can be used as the blueprint for high-assurance I/O kernel design and implementations, making explicit the assumptions about underlying hardware-authorization properties. Our model does not preclude hardware designs with inadequate authorization, like PCI, PCIe-to-PCI bridges, or USB host controllers, as they occupy a large fraction of the marketplace. Instead, it makes explicit the kernel design and implementation requirements for high assurance if such hardware were to be used.

We define an abstract I/O separation kernel model in Dafny (Section IV), after outlining the need for its four-layer refinement for real system use (Section III). We define key components and operations of I/O devices and drivers, specify transfer authorizations, and formalize two desired security properties: no transfer across an I/O separation boundary and no object reuse in on-demand I/O. We prove the abstract I/O separation model satisfies these two properties. We then define a concrete I/O model that includes more detailed notions of separation and I/O transfers (Section V).

# 2. Common I/O Vulnerabilities and Threats
We review the different ways I/O hardware authorizes accesses, summarize vulnerabilities caused by inadequate I/O hardware authorization, and present the threats countered.

## A. I/O Transfer Authorization and Separation
An I/O transfer is informally viewed as an ordered association of one or more devices to one or more I/O objects of an isolated application/driver. In the simplest case, the association is one-to-one; e.g., a USB device can exclusively transfer data to a buffer of an isolated driver in an application. A single device can also be associated with objects of several isolated drivers; e.g., a single GPU device can display output of several isolated application drivers concurrently. Several devices can be associated on demand with a single I/O buffer of an isolated application sequentially shared by several drivers; e.g., several USB devices. In all cases, the device-object order of the association indicates whether the I/O object is read or written.

An I/O transfer is authorized if a driver cannot 1) bypass or modify its deviceâ€™s association with the isolated-driver object, and 2) perform the transfer without the permissions (i.e., write, read) required by the association order. Failure to enforce 1) or 2) by inadequate hardware can enable isolated but malicious drivers to breach I/O separation of isolated applications. Conversely, high-assurance authorization requires formal analysis of both 1) and 2).

Note that merely enforcing memory address-space separation for drivers and applications, while useful, is insufficient for transfer authorization. For example, on-demand activation of a device/driver from one isolated application to another can cause use-after-free violations without breaching address-space separation. Similarly, a peer-to-peer device transfer crossing different applications can violate their isolation without breaching address space separation. Also, a malicious driver executing a single instruction that broadcasts data to the registers of multiple devices can violate application isolation without breaching address-space separation.

## B. Inadequacy of Existing Hardware
Existing hardware that authorizes I/O transfers at different levels of granularity is summarized in Figure 1.

| No Authorization | Non-Selective Authorization | Selective Authorization |
|------------------|----------------------------|-------------------------|
| - PCI, no ACS    | - PCIe-to-PCI bridge with IOMMU | - PCIe with IOMMU & ACS  |
| - SMBus          | - AXI-to-AHB bridge with SMMU   | - AXI with SMMU         |
| - AHB, no ACS    | - TZ within normal or secure world | - TZ normal vs. secure world |
| - Early ASB      | - PCIe-to-PCI bridge with IOMMU | - PCIe with IOMMU/CAPI & ACS |

**Figure 1. Examples of authorization levels of I/O hardware.**

This figure illustrates the varying levels of I/O transfer authorization provided by different hardware components, highlighting the inadequacies of some existing solutions.