### Optimized Text

**Defense Mechanisms and Security Enhancements for SGX Enclaves**

T-SGX [53] proposes a defense mechanism based on Intel Transactional Synchronization Extensions (TSX) to conceal page faults from the untrusted kernel. Additionally, improper use of SGX instructions or memory access-related bugs within the enclave can expose enclave programs to vulnerabilities. To address this, Moat [56] introduces a new programming model that verifies services crucial to the security of SGX programs, such as remote attestation and cryptographic sealing. This model not only ensures the confidentiality of enclave programs but also checks for potential data leaks. Rohit et al. [55] present a runtime library that provides a secure interface for communication with external entities outside the enclave. The library also offers core services for secure memory management and runtime verification.

**Commodity TEEs and Software-Based Solutions**

While many commodity hardware platforms, including Intel SGX [30, 39] and ARM TrustZone [8], provide Trusted Execution Environments (TEEs), Sancus [43] designs a specific hardware architecture for TEEs. To our knowledge, the Secure OS in ARM TrustZone does not support Address Space Layout Randomization (ASLR) and software Data Execution Prevention (DEP) [51]. However, integrating ASLR and DEP into ARM TrustZone presents unique research challenges, such as addressing different side-channel attacks, compared to those faced by SGX-Shield.

Several software-based approaches aim to protect applications from untrusted privileged software. Minibox [35] ensures mutual distrust between the program code and the operating system on top of a trusted hypervisor with a small Trusted Computing Base (TCB). CloudVisor [63] secures customer virtual machines by separating resource management from the virtualization layer. InkTag [25] defends against compromised system call interfaces to protect persistent storage, while Virtual Ghost [22] uses compiler instrumentation to protect memory from the host OS.

**ASLR and Runtime Re-Randomization**

ASLR is widely used in commodity operating systems [3, 44] to defend against return-to-libc [42] and return-oriented-programming (ROP) attacks [49] by obfuscating the locations of code gadgets. However, several methods to bypass ASLR have been reported [36, 48, 50, 58], often due to low entropy in randomness [36, 50] and memory disclosures [48, 58]. To mitigate the low entropy issue, fine-grained ASLR techniques [13, 23, 24, 32, 45, 59] propose randomizing code at various granularities, such as basic blocks or instruction levels. Studies [10, 21, 38] show that encrypting visible pointers and non-readable executable pages can prevent attackers from exploiting memory disclosures.

Runtime re-randomization [14, 34, 37] is a robust defense mechanism against both brute-force attacks and memory disclosure exploits. Specifically, RUNTIMEASLR [37] and Oxymoron [11] aim to protect against attacks by performing random memory corruption tests during process forks [16]. By re-randomizing the memory layout of child processes, attackers cannot predict the memory layout of the parent process. Similarly, in the Android system, the address space of user processes is copied from a pre-initialized process called Zygote, making the initial memory layouts of user processes identical. Morula [34] re-randomizes the child process to mitigate this issue.

**Software DEP**

The software DEP design in SGX-Shield is inspired by Native Client (NaCl) [47, 62]. NaCl [62] proposes an efficient Software Fault Isolation (SFI) mechanism using masked instructions and x86 memory segments. The goal is to sandbox a memory region in a user process to run untrusted third-party components. The next version of NaCl [47] extends this to ARM and x86-64 architectures. The instrumentation of software DEP in SGX-Shield is similar to NaCl on x86-64, but it does not assume that the base address of data pages is aligned with 4GB, unlike NaCl. This limitation necessitates an additional sub instruction for instrumentation.

**Conclusion**

In this paper, we identified fundamental challenges in enabling ASLR for the SGX environment. We analyzed real-world examples, such as Linux and Windows SDKs for Intel SGX, and highlighted their critical security limitations. We also proposed SGX-Shield, a new ASLR implementation for SGX programs. SGX-Shield includes a secure in-enclave loader, software DEP, and software fault isolation to provide secure ASLR for SGX. Our evaluation on real Intel SGX hardware demonstrates SGX-Shield's effectiveness in both security and performance.

**Acknowledgment**

We thank the anonymous reviewers and our proofreader, Tricia Grindel, for their valuable feedback. This work was supported in part by BSRP (NRF-2015R1D1A1A01058713), Office of Naval Research Global (ONRG), IITP (B0101-15-0557) funded by the Korea Government (MEST), KAIST Venture Research Program for Graduate & Ph.D. students, and NSF awards DGE-1500084, CNS-1563848, and CRI-1629851.

**References**

[1]â€“[63] (References remain unchanged)

---

This optimized text is more coherent, professional, and structured, making it easier to read and understand.