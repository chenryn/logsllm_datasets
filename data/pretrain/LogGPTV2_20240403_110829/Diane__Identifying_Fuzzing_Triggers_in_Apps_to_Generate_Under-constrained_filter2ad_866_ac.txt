public boolean sendToDevice(byte[] c) {/* ... */}
Fig. 3. Example of a simple Transformation Data Chains found on the
August Smart Lock.
and vi) unlock: Lines 1 and 2. For brevity, in the following
we only consider the relevant function scopes: ii) encrypt, iii)
sendCommand, and vi) unlock. Their sets of live variables are:
encrypt: Lif = {b}, Lof = {enc}; sendCommand: Lif =
{cmd}, Lof ={cmd}; and unlock: Lif ={}, Lof ={cmd}.
Once we identify the function scopes in the slice, we run the app
and compute the entropy of the data assigned to each of their live
variables. Then, we calculate the amount of entropy introduced
by each function scope and check whether its value exceeds a
threshold Tf.
The function unlock does not introduce any entropy, as the
set Lif is empty. In the cases where the set Lif is empty, we
do not consider the function f as a candidate data-transforming
function, since it does not take any input.
For the function encrypt, the entropy of the data stored
in b is 5.94, whereas the entropy of the data returned in
enc is 53.16. Since the entropy delta de is greater than our
threshold (de =53.16/5.94>2.0), we consider encrypt as a
data-transforming function. Also, the function sendCommand
introduces a low amount of entropy (de = 1.03), and, therefore,
it is not considered a data-transforming function. Finally, as the
function encrypt dominates the function sendToDevice,
encrypt is the only top-chain function, and it is used as the
only fuzzing trigger.
UI Stimulation. Our approach executes the same app multiple
times, being consistent across the different runs. Thus, ideally, we
want the app to follow always the same execution paths. To achieve
this goal, we require the analyst to run the app once, while DIANE
records the generated UI inputs. Then, we automatically replay the
same inputs in the subsequent runs, by leveraging RERAN [40].
We do not explicitly handle other sources non-determinism [29],
as we found them to not significantly affect our approach.
Fuzzing Intermediate Data-Transforming Functions.
In
principle, transformation data chains might be arbitrary long. As
DIANE’s goal is to stimulate the core functionality of IoT devices,
our approach ignores intermediate data-transforming functions
(i.e., data-transforming functions dominated by a top-chain
function) as they generate messages that would likely be discarded
by the IoT device. However, as IoT devices might contain bugs
also in the procedures used to decode a received message, we
provide DIANE with the option to fuzz also all the intermediate
data-transforming functions. Likewise, DIANE provides an option
to fuzz the sendMessage functions directly even when dominated
by top-chain functions. In Section IV-C, we empirically show that
fuzzing the sendMessage functions does not lead to the discovery
of new bugs, while it slows down the execution of our tool.
B. Fuzzing
After the first phase of our approach, we obtain a set of fuzzing
triggers, which are the inputs to our fuzzer.
Test Case Generation. For each fuzzing trigger, we generate a set
of test cases by mutating the parameters of the identified fuzzing
triggers, which eventually modify the data sent by a sendMessage
function. We fuzz the different fuzzing triggers one at the time,
in a round-robin fashion. To mutate the values of their parameters,
we use the following strategies:
• String lengths: We change the length of strings in order
to trigger buffer overflows and out-of-bound accesses. We
generate random strings with different lengths.
• Numerical values: We change the values of integer, double
or float values to cause integer overflows or out-of-bound
accesses. We generate very large values, negative values, and
the zero value.
• Empty values: We provide empty values, in the attempt to
cause misinterpretation, uninitialized variable vulnerabilities,
and null pointer dereferences.
• Array lengths: We modify the content of arrays by removing
or adding elements.
It is important to specify that we do not only fuzz primitive
variables (e.g., int, float), but we also fuzz objects (as
explained in Appendix B), by fuzzing their member variables.
Identifying Crashes. As shown by a recent study [61], identifying
all crashes of network-based services of IoT devices without
invasive physical access to the devices is challenging. At the
same time, getting invasive physical access to IoT devices needs
considerable engineering effort [9], since vendors usually prevent
this type of access [10], [11].
For these reasons, while fuzzing a device, DIANE automatically
analyzes its responses to identify crashes. Specifically, DIANE
first performs a normal run of the app and monitor how the device
responds during normal activity. Then, while fuzzing, DIANE
monitors the network traffic between the app and the device again,
and considers an input to be potentially crash-inducing, if any one
of the following conditions is satisfied.
• Connection dropped. If the device abruptly ends an
ongoing connection, we consider it as an indication that
something wrong happened to the device. Specifically, for
TCP connections, we look for cases where the app sent a
FIN packet and received no response (FIN + ACK), and
then sent a sequence of two or more SYN packets.
• HTTP Internal Server Error (500). Instances where the app
and the device communicate through HTTP, and the device re-
turns an Internal Server Error [1] (status code 500), are con-
sidered as a signal that the device has entered in a faulty state.
• Irregular network traffic size. If the amount of data
exchanged between the app and the device overcomes a
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
489
threshold Se, we save the current crash-inducing input. Our
intuition is that, when a device enters a faulty state (e.g., due
to a crash) it usually becomes temporarily unavailable for the
app, thus drastically reducing the amount of data exchanged.
In our experiments, we empirically verified that when the
amount of exchanged data was less than 50% (compared to a
regular run), something unusual happened to the device. For
this reason, we set Se to be 50%.
• Heartbeat Monitoring. While fuzzing a given device, we
continuously ping it and monitor its response time. We report
any crash-inducing inputs causing the response time to be
above a certain threshold Tp. In our experiments, we set Tp
to 10 seconds, as we empirically verified that the average
response time of an IoT device falls within 1 second under
normal conditions.
Finally, we use an additional Android smartphone, which we
refer to as the watchdog device, to monitor the status of the IoT
device from a neutral standpoint (i.e., we do not instrument the
companion app on this device). We run the companion app on the
watchdog device and automatically replay the previously recorded
UI inputs to exercise the different IoT device functionality at regular
intervals. A human analyst can then observe whether the functional-
ity exercised by the watchdog device (e.g., pressing the light switch
UI button) causes the desired effect on the IoT device (e.g., turning
the light on) or not. If an undesired effect is detected, it means that
Diane was able to bring the analyzed device into an invalid state.
IV. EXPERIMENTAL EVALUATION
In this section, we answer two research questions:
1) Is DIANE able to find both previously-known and previously-
unknown vulnerabilities in IoT devices effectively?
2) Is DIANE needed to find vulnerabilities in IoT devices
effectively, or can existing (app-based or network-level)
fuzzers achieve similar results?
To answer the first research question, we first evaluated DIANE
precision in detecting fuzzing triggers (Section IV-B) and then we
used it to fuzz 11 different IoT devices (Section IV-C). Our system
found 11 bugs in 5 devices, including 9 zero-day vulnerabilities,
running, in all cases, for less than 10 hours (Section IV-H).
To answer the second research question, we first compared our
tool with IoTFuzzer [25] by running it on the 11 analyzed devices
(Section IV-D). Our experiment shows that DIANE outperformed
IoTFuzzer in 9 devices, and performs as well as IoTFuzzer for the
remaining 2 devices. Then, we performed a larger-scale automated
study (Section IV-E) to measure how often companion apps
perform app-side validation, which would limit the efficiency
of approaches like IoTFuzzer. Our experiment revealed that
51% of the analyzed apps contain, indeed, app-side sanitization.
Finally, we compared DIANE with existing network-level fuzzers
(Section IV-F), and showed that network-level fuzzers are unable
to find bugs in the analyzed devices.
We conclude this section by presenting a detailed case study
about two zero-day bugs DIANE found in one of the analyzed
devices (Section IV-G).
A. Dataset & Environment Setup
To evaluate DIANE, we used popular real-world IoT devices of
different types and from different brands. Specifically, in October
2018 we searched for “smart home devices” on Amazon and
obtained the list of the top 30 devices. Among these, we excluded 5
expensive devices (price higher than 200 USD), 1 device that does
not communicate directly with the companion app (the communica-
tion passes through a Cloud service), and other 13 devices because
they require other appliances (e.g., a smart ceiling fan controller).
Our dataset contains the remaining 11 devices, which are
listed in Table I. This dataset encompasses devices of different
types (cameras, smart sockets, bulbs, smart locks). Note that the
respective companion apps of these devices are quite complex
as they contain, on average, over 9 thousand classes, 56 thousand
functions, and 766 thousand statements. The complexity of these
apps is in line with the complexity of the apps used by the related
work [79], which contains the largest dataset of validated IoT apps.
We installed the IoT devices in our laboratory, we deployed
DIANE on an 8-core, 128GB RAM machine running Ubuntu
16.04, and we ran the Android companion apps on a Google Pixel
and a Google Nexus 5X running Android 8.0. The smartphones,
the IoT devices, and the machine running DIANE were connected
to the same subnet, allowing DIANE to capture the generated
network traffic. To configure each device, we manually performed
its initial setup phase, such as registering an account on the device
and on the Android companion app.
B. Fuzzing Trigger Identification
Table II shows the results of each step of DIANE’s fuzzing trig-
gers identification phase: For each IoT device, we report the proto-
cols in use to communicate with the companion app, whether or not
the app contains native code, if it sanitizes user inputs, the number
of candidate sendMessage functions found by DIANE, the number
of validated sendMessage functions, and the number of fuzzing
triggers. For each intermediate result, we calculated the number of
true positives and false positives, and investigated false negatives.
Since there is no available ground truth, we validated our
ability to identify sendMessage functions and fuzzing triggers by
manually reversing (both statically and dynamically) the Android
companion apps in our dataset. Specifically, an expert analyzed
each app for an average of five hours.
Reverse engineering of real-world apps is known to be difficult.
Therefore, while we did our best to fully comprehend the
dynamics of these apps, in a few cases we could not verify our
results completely, as indicated in the following sections. We
also acknowledge that this manual evaluation cannot completely
exclude the presence of false negatives.
To measured DIANE’s ability to find sendMessage functions
precisely, we manually analyzed the sendMessage functions
returned by the first two steps of our analysis. Specifically, we
classified each function returned by the sendMessage candidates
identification step (Step 1 in Section III-A) and by the sendMessage
function validation step (Step 2 in Section III-A) as either true
positive or false positive (TP and FP in the fifth and sixth columns
of Table II). To perform this classification, we hooked each of these
functions and manually exercised the IoT device’s functionality
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
490
SUMMARY OF OUR DATASET OF IOT DEVICES (* ACCOUNT REQUIRED TO OPERATE THE DEVICE).
TABLE I
Type
Vendor
Model
Firmware
Vers.
Android App
Package Name
App
Vers.
Online
Account*
Setup Time
[Seconds]
Smart Socket
Camera
Camera
Camera
Camera
Smart Socket
Bulb
Smart Socket
Camera
Bulb
Smart Lock
Wansview
Insteon
TP-Link
FOSCAM
FOSCAM
Belkin
iDevices
iDevices
Belkin
LIFX
August
720P X Series WiFi
HD Wifi Camera
Wemo Smart Socket
HS110
FI9821P
FI9831P
IDEV0002
IDEV0001
NetCam
Z
August Smart Lock
00.20.01
2.2.200
1.2.5
1.5.3.16
1.5.3.19
2.0.0
1.9.4
1.9.4
Unknown
2.76
1.12.6
wansview.p2pwificam.client
com.insteon.insteon3
com.tplink.kasa_android
com.foscam.foscam
com.foscam.foscam
com.belkin.wemoandroid
com.idevicesllc.connected
com.idevicesllc.connected
com.belkin.android.androidbelkinnetcam
com.lifx.lifx
com.august.luna
1.0.10
1.9.8
2.2.0.784
2.1.8
2.1.8
1.20
1.6.95
1.6.95
2.0.4
3.9.0
8.3.13











219
427
311
406
403
211
274
276
1,040
313
213
Device
ID
1
2
3
4
5
6
7
8
9
10
11
SUMMARY AND FEATURES OF OUR DATASET OF IOT COMPANION APPS. TP INDICATES A TRUE POSITIVE RESULT, FP A FALSE POSITIVE
RESULT, AND NC A RESULT WE WERE NOT ABLE TO CLASSIFY EITHER AS TRUE POSITIVE NOR FALSE POSITIVE. ? INDICATES THAT WE COULD
NOT VERIFY WHETHER AN APP APPLIED DATA SANITIZATION. THE LAST THREE COLUMNS INDICATE THE COMPLEXITY OF THE APPS IN TERMS
OF NUMBER OF CLASSES, FUNCTIONS, AND STATEMENTS RESPECTIVELY.
TABLE II
Device
ID
Network
Protocol
Native
Code
Sanity
Checks
No. Candidate
sendMessage
No.
sendMessage
No. Fuzzing
Triggers
No.
Classes
No.
Functions
No.
Statements
HTTP + SOAP
UDP
HTTP
TCP + JSON
UDP
TCP
TCP
TCP
TCP
UDP
Bluetooth