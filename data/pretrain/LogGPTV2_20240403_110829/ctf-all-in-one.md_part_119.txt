| |`==== 0x00000e80 lea rdi, str.There_are_too_much_proj
ects ; 0x12a2 ; "There are too much projects!"
| | : 0x00000e87 call sym.imp.puts
; int puts(const char *s)
| | `=== 0x00000e8e call sym.imp.__stack_chk_fail
; void __stack_chk_fail(void)
通过上面的分析可以得到 project 结构体和 projects 数组：
struct project {
int length;
char name[length];
int check;
int price;
int area;
int capacity;
} project;
struct project *projects[0x10];
projects 位于 0x00202040 ，proj_num 位于 0x002020c0 。
1194
6.1.18 pwn HITBCTF2017 Sentosa
用户输入的 length 必须小于 0x59，使用 malloc(length+0x15) 分配一块堆空间作为
project，然后调用 read_buf0() 读入 name 到栈上。读入 name 后将其复制到
project 中，然后将 check 置为 1，最后再依次读入 price、area 和 capacity。
程序自己实现的 read_bf0() 函数如下：
[0x00000a30]> pdf @ sub.read_bf0
/ (fcn) sub.read_bf0 148
| sub.read_bf0 ();
| ; var int local_0h @ rbp-0x0
| ; CALL XREF from 0x00000d8c (sub.There_are_too_much_
projects_ca0)
| 0x00000bf0 push r14
| 0x00000bf2 push r13
| 0x00000bf4 push r12
| 0x00000bf6 push rbp
| 0x00000bf7 mov r12, rdi
; r12 存储 buffer 地址
| 0x00000bfa push rbx
| 0x00000bfb sub rsp, 0x10
| 0x00000bff mov rax, qword fs:[0x28]
; [0x28:8]=0x2138 ; '('
| 0x00000c08 mov qword [rsp + 8], rax
| 0x00000c0d xor eax, eax
| 0x00000c0f sub esi, 1
; length 减 1
| ,= 0x00000c28 add ebx, 1
1195
6.1.18 pwn HITBCTF2017 Sentosa
; i = i + 1
| :|| 0x00000c2b mov byte [rbp], al
; 将字符放到 [rbp]
| :|| 0x00000c2e add rbp, 1
; rbp = rbp + 1
| :|| 0x00000c32 cmp ebx, r13d
| ,==== 0x00000c37 xor edi, edi
; i 不等于 length 时循环继续
| |: | 0x00000c39 xor eax, eax
| |: | 0x00000c3b mov edx, 1
| |: | 0x00000c40 mov rsi, r14
| |: | 0x00000c43 call sym.imp.read
; read(0, rsp+7, 1) 每次读入一个字节
| |: | 0x00000c48 movzx eax, byte [rsp + 7]
; [0x7:1]=0
| |: | 0x00000c4d cmp al, 0xa
; 判断是否为 '\n'
| |`=== 0x00000c59 mov rax, qword [rsp + 8]
; [0x8:8]=0
| | :| 0x00000c5e xor rax, qword fs:[0x28]
| |,=== 0x00000c80 movsxd rbx, ebx
| |:| ; JMP XREF from 0x00000c8c (sub.read_bf0)
| .----> 0x00000c83 mov byte [r12 + rbx], 0
| :|`== 0x00000c8a xor ebx, ebx
| `==== 0x00000c8e call sym.imp.__stack_chk_fail
; void __stack_chk_fail(void)
正如我们一开始猜测的，这个函数是有问题的，如果输入 0 作为 length，则
length-1（能读入的实际长度） 后得到一个负数，在循环判断时，负数永远不会等
于一个正数，于是将读入任意长度的字符串（以 \n 结尾），造成缓冲区溢出。
字符串末尾会被加上 \x00 ，且开启了 Canary，暂时还没想到如何利用，继续往
下看。另外特别注意 malloc 后得到的 project 的地址存放在 rsp + 0x6a 的位
置。
View all projects
[0x00000a30]> pdf @ sub.Project:__s_ea0
/ (fcn) sub.Project:__s_ea0 191
| sub.Project:__s_ea0 (int arg_4h, int arg_8h, int arg_ch);
| ; arg int arg_4h @ rbp+0x4
| ; arg int arg_8h @ rbp+0x8
| ; arg int arg_ch @ rbp+0xc
| ; CALL XREF from 0x00001102 (sub.__isoc99_scanf_80 +
130)
| 0x00000ea0 push r12
| 0x00000ea2 push rbp
| 0x00000ea3 lea r12, [0x002020c0]
; 取出 &proj_num
| 0x00000eaa push rbx
| 0x00000eab lea rbx, [0x00202040]
; 取出 &projects
| 0x00000eb2 sub rsp, 0x10
| 0x00000eb6 mov rax, qword fs:[0x28]
1197
6.1.18 pwn HITBCTF2017 Sentosa
; [0x28:8]=0x2138 ; '('
| 0x00000ebf mov qword [rsp + 8], rax
| 0x00000ec4 xor eax, eax
| 0x00000ec6 nop word cs:[rax + rax]
| ; JMP XREF from 0x00000f3f (sub.Project:__s_ea0)
| .-> 0x00000ed0 mov rdx, qword [rbx]
; 取出此时开头的 project
| : 0x00000ed3 test rdx, rdx
| ,==check
| |: 0x00000eeb add rdx, 4
; rdx = project->name
| |: 0x00000eef xor eax, eax
| |: 0x00000ef1 call sym.imp.__printf_chk
; 打印出 project->name
| |: 0x00000ef6 mov edx, dword [arg_4h]
; rdx = project->price
| |: 0x00000ef9 lea rsi, str.Price:__d
; 0x136f ; "Price: %d\n"
| |: 0x00000f00 mov edi, 1
| |: 0x00000f05 xor eax, eax
| |: 0x00000f07 call sym.imp.__printf_chk
; 打印出 project->price
| |: 0x00000f0c mov edx, dword [arg_8h]
; rdx = project->area
| |: 0x00000f0f lea rsi, str.Area:__d
; 0x137a ; "Area: %d\n"
| |: 0x00000f16 mov edi, 1
| |: 0x00000f1b xor eax, eax
| |: 0x00000f1d call sym.imp.__printf_chk
; 打印出 project->area
| |: 0x00000f22 mov edx, dword [arg_ch]
; rdx = project->capacity
| |: 0x00000f25 lea rsi, str.Capacity:__d
1198
6.1.18 pwn HITBCTF2017 Sentosa
; 0x1384 ; "Capacity: %d\n"
| |: 0x00000f2c mov edi, 1
| |: 0x00000f31 xor eax, eax
| |: 0x00000f33 call sym.imp.__printf_chk
; 打印出 project->capacity
| |: ; JMP XREF from 0x00000ed6 (sub.Project:__s_ea0)
| `--> 0x00000f38 add rbx, 8
; rbx += 8，即 projects 向后移一个
| : 0x00000f3c cmp rbx, r12
| `= 0x00000f5a call sym.imp.__stack_chk_fail
; void __stack_chk_fail(void)
该函数用于打印出所有存在的 project 的信息。
Cancel a project
[0x00000a30]> pdf @ sub.There_are_no_project_to_cancel_f60
/ (fcn) sub.There_are_no_project_to_cancel_f60 207
| sub.There_are_no_project_to_cancel_f60 ();
| ; CALL XREF from 0x000010e2 (sub.__isoc99_scanf_80 +
98)
| 0x00000f60 push rbx
| 0x00000f61 sub rsp, 0x10
| 0x00000f65 mov rax, qword fs:[0x28]
; [0x28:8]=0x2138 ; '('
| 0x00000f6e mov qword [rsp + 8], rax
1199
6.1.18 pwn HITBCTF2017 Sentosa
| 0x00000f73 xor eax, eax
| 0x00000f75 mov eax, dword [0x002020c0]
; 取出 proj_num
| 0x00000f7b test eax, eax
| ,=check 是否为 1
| ,==== 0x00000fe5 mov rax, qword [rsp + 8]
; [0x8:8]=0
| ::|||| 0x00000fea xor rax, qword fs:[0x28]
| ,======= 0x00001000 lea rdi, str.Invalid_number
; 0x13af ; "Invalid number!"
| |::| | 0x00001007 call sym.imp.puts
; int puts(const char *s)
| |`====== 0x00001010 lea rdi, str.There_are_no_project_to
_cancel ; 0x1218 ; "There are no project to cancel!"
| | :| 0x00001017 call sym.imp.puts