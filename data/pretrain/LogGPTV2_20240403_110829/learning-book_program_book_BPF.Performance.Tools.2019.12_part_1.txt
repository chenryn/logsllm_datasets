# OCR Output
## Page 1
BPF
Performance Tools
LinuxSystemand
Application Observability
FESSIONALCOMPUTINGSERIES
ForewordbyAlexeiStarovoitov,
creator of the new BPF
---
## Page 2
BPFPerformance
Tools
---
## Page 3
ThePearsonAddison-Wesley
Professional ComputingSeries
Brian W.Kernighan,ConsultingEditor
Mhancod
Design Paterns
TheGO
The Praeice of
Programming
Progamming
thieUNIX
ironment
Visit informit.com/series/professionalcomputing for a complete list of
available publications.
he Pearson Addison-Wesley Professional ComputingSerieswas
 created in 1990 to provide serious programmers and networking
professionals with well-written and practical reference books. Pearson
Addison-Wesley is renowned for publishing accurate and authoritative
books on current and cutting-edge technology, and the titles in this
series will help you understand the state of the art in programming
languages, operating systems, and networks.
Tabe
inect with us!
informit.com/socialconnect
Pearson
informr.com
Addison-Wesley
---
## Page 4
BPFPerformance
Tools
LinuxSystemandApplication
Observability
Brendan Gregg
Addison-Wesley
---
## Page 5
BPF Performance Tools
Editor-in-Chief
Mark L. Taub
 Many of the designations used by manufacturers and sellers to distinguish their products
Series Editor
are claimed as trademarks. Where those designations appear in this book, and the
Brian Kernighan
publisher was aware of a trademark claim, the designations have been printed with initial
Greg Doench
Executive Editor
capital letters or in all capitals.
Linux* is the registered trademark of Linus Torvalds in the U.S. and other countries.
Managing Editor
The author and publisher have taken care in the preparation of this book, but make no
Sandra Schroeder
expressed or implied warranty of any kind and assume no responsibility for errors or
Senior Project Editor
omissions. No liability is assumed for incidental or consequential damages in connection
Lori Lyons
with or arising out of the use of the information or programs contained herein.
Produsction Manager
For information about buying this title in bulk quantities, or for special sales opportunities
CodeMantra
Aswini Kumar/
(which may include electronic versions:; custom cover designs; and content particular to your
odoo ino peuo aseald (sjsuaui Bupueaq jo *snooy Bunaau *sieo Suuea *ssaursng
Indexer
rate sales department at PI:EMAIL or (800) 382-3419.
Proofreader
Ken Johnson
For govermment sales inquiries, please contact governmentsales@pearsoned.com.
For questions about sales outside the U.S., please contact intlcs@pearson.com.
Abigail Manheim
Cover Designer
Visit us on the Web: informit.com/aw
Chuti Prasertsith
Library of Congress Control Number: 2019951981
Compositor
Copyright @ 2020 Pearson Education, Inc.
CodeMantra
3q snu uosssad pue *uguidos fq papeqoud sl uogeond su pauasau sulu I
obtained from the publisher prior to any prohibited reproduction, storage in a retrieval
Adooooud (eueupu *ouonoaja *sueow Aue fq jo woy ue u uosswsue.n ao wags(s
ing, recording, or likewise. For infomation regarding pemissions, request forms and the
appropriate contacts within the Pearson Education Global Rights & Permissions Department,
please visit www.pearson.com/permissions/.
ISBN-13: 978-0-13-655482-0
ISBN-10: 0-13-655482-2
ScoutAutomatedPrintCode
---
## Page 6
ContentsataGlance
Preface xxvi
Part I: Technologies
1 Introduction 1
2 Technology Background 15
 3 Performance Analysis 67
4 BCC85
5 bpftrace 129
Part Il: Using BPF Tools
6 CPUs 181
7 Memory 243
8 File Systems 277
9 Disk 1/0 341
11 Security 489
12 Languages  517
13 Applications 589
14 Kemel 635
15 Containers 671
16 Hypervisors 689
Part Ill: Addlitional Topics
17 Other BPF Performance Tools 709
18 Tips, Tricks, and Common Problems 727
Part IV: Appendixes
A bpftrace One-Liners 741
B bpftrace Cheat Sheet 745
---
## Page 7
Contents at a Glance
C BCC Tool Development 747
D C BPF763
E BPF Instructions 783
Glossary789
Bibliography795
Index805
---
## Page 8
Contents
Part I: Technologies
1 Introduction 1
1.1 What Are BPF and eBPF? 1
1.2 What Are Tracing, Snooping, Sampling, Profiling, and
Observability?2
1.3 What Are BCC, bpftrace, and IO Visor? 3
1.4  A First Look at BCC: Quick Wins 4
1.5 BPF Tracing Visibility  6
1.6 Dynamic Instrumentation: kprobes and uprobes 8
1.7
 Static Instrumentation: Tracepoints and USDT 9
1.8  A First Look at bpftrace: Tracing open()  10
1.9Back to BCC: Tracing open() 12
1.10 Summary 14
2 Technology Background 15
2.1  BPF llustrated 15
2.2  BPF 16
2.3 Extended BPF (eBPF) 17
2.3.1 Why Performance Tools Need BPF 19
2.3.2 BPF Versus Kernel Modules 21
2.3.3 Writing BPF Programs  22
2.3.4 Viewing BPF Instructions: bpftool 23
2.3.5 Viewing BPF Instructions: bpftrace 30
2.3.6 BPF API 31
2.3.7 BPF Concurrency Controls 35
2.3.8 BPF sysfs Interface 36
2.3.9 BPF Type Format (BTF) 37
2.3.10 BPF CO-RE 37
2.3.11 BPF Limitations 38
2.3.12 BPF Additional Reading 38
2.4  Stack Trace Walking 39
2.4.1 Frame PointerBased Stacks 39
2.4.2 debuginfo 40
2.4.3 Last Branch Record (LBR) 40
2.4.4ORC40
---
## Page 9
rii
Contents
2.4.5 Symbols 41
2.4.6 More Reading 41
2.5 Flame Graphs 41
2.5.1 Stack Trace 41
2.5.2 Profiling Stack Traces 41
2.5.3 Flame Graph 42
2.5.4 Flame Graph Features 44
2.5.5 Variations 44
2.6 Event Sources 45
2.7 kprobes 46
2.7.1 How kprobes Work 46
2.7.2 kprobes Interfaces 47
2.7.3 BPF and kprobes 48
2.7.4 kprobes Additional Reading 49
2.8uprobes 49
2.8.1 How uprobes Work 49
2.8.2 Uprobes Interfaces 51
2.8.3 BPF and uprobes 51
2.8.4 uprobes Overhead and Future Work 52
2.8.5 uprobes Addlitional Reading 52
2.9  Tracepoints 53
2.9.1 Adding Tracepoint Instrumentation 53
2.9.2 How Tracepoints Work 55
2.9.3 Tracepoint Interfaces 56
2.9.4 Tracepoints and BPF 56
2.9.5 BPF Raw Tracepoints 57
2.9.6 Additional Reading 58
2.10 USDT 58
2.10.1 Adding USDT Instrumentation 58
2.10.2 How USDT Works 60
2.10.3 BPF and USDT 61
2.10.4 USDT Additional Reading 61
2.11 Dynamic USDT 61
2.12 PMCs 63
2.12.1 PMC Modes 63
2.12.2 PEBS 64
2.12.3 Cloud Computing 64
---
## Page 10
Contents
2.13 perf_events 64
2.14 Summary 65
3 Performance Analysis 67
3.1 0verview 67
3.1.1 Goals 68
3.1.2 Activities 68
3.1.3 Mulitple Performance Issues 69
3.2 Performance Methodologies 69
3.2.1 Workload Characterization 70
3.2.2 Drill-Down Analysis 71
3.2.3 USE Method 72
3.2.4 Checklists 72
3.3 Linux 60-Second Analysis 73
3.3.1 uptime 73
3.3.2 dmesg | tail 74
3.3.3 vmstat 1 74
3.3.4  mpstat -P ALL 1 75
3.3.5 pidstat 1 75
3.3.6 iostat xz 1 76
3.3.7 free -m 77
3.3.8 sar -n DEV 1 77
3.3.9 sar -n TCeETCP 1 78
3.3.10  top 78
3.4 BCC Tool Checklist 79
3.4.1 execsnoop 80
3.4.2 opensnoop
80
3.4.3 ext4slower
80
3.4.4 biolatency
81
3.4.5 biosnoop 81
3.4.6 cachestat
82
3.4.7 tcpconnect
82
3.4.8 tcpaccept
82
3.4.9 tcpretrans 83
3.4.10 runqlat 83
3.4.11 profile 84
3.5 Summary 84
---
## Page 11
Contents
4BCC85
4.1 BCC Components 86
4.2 BCC Features 86
4.2.1 Kemel-Level Features 87
4.2.2 BCC User-Level Features 87
4.3 BCC Installation 88
4.3.1 Kemel Requirements 88
4.3.2 Ubuntu 88
4.3.3 RHEL 89
4.3.4 Other Distributions 89
4.4BCC Tools 89
4.4.1 Highlighted Tools 90
4.4.2 Tool Characteristics 91
4.4.3 Single-Purpose Tools 91
4.4.4 MultiPurpose Tools 93
4.5 funccount 94
4.5.1 funccount Examples 94
4.5.2 funccount Syntax 97
4.5.3 funccount One-Liners 97
4.5.4 funocount Usage 98
4.6 stackcount 99
4.6.1 stackcount Example 99
4.6.2 stackcount Flame Graphs  100
4.6.3 stackcount Broken Stack Traces 101
4.6.4 stackcount Syntax 102
4.6.5 stackcount One-Liners 102
4.6.6 stackcount Usage 103
4.7 trace 104
4.7.1 trace Example 104
4.7.2 trace Syntax 105
4.7.3 trace One-Liners 106
4.7.4 trace Structs 107
4.7.5 trace Debugging File Descriptor Leaks 107
4.7.6 trace Usage 109
4.8argdist 110
4.8.1 argdist Syntax 111
4.8.2 argdist One-Liners 112
4.8.3 argdist Usage 113
---
## Page 12
Contents
4.9 Tool Documentation 114
4.9.1 Man Page: opensnoop 115
4.9.2 Examples File: opensnoop118
4.10 Developing BCC Tools 119
4.11 BCC Internals 120
4.12 BCC Debugging 121
4.12.1 printf0 Debugging 122
4.12.2 BCC Debug Output 124
4.12.3 BCC Debug Flag 125
4.12.4 bpflist 126
4.12.5  bpftool127
4.12.6 dmesg127
4.12.7 Resetting Events 127
4.13Summary 128
5 bpftrace 129
5.1 bpftrace Components 130
5.2 bpftrace Features 131
5.2.1 bpftrace Event Sources  131
5.2.2 bpftrace Actions 131
5.2.3 bpftrace General Features 132
5.2.4 bpftrace Compared to Other Observability Tools 132
5.3 bpftrace Installation 133
5.3.1 Kemel Requirements 133
5.3.2 Ubuntu  134
5.3.3 Fedora 134
5.3.4 Post-Build Steps 134
5.3.5 Other Distributions 135
5.4 bpftrace Tools 135
5.4.1 Highlighted Tools 136
5.4.2 Tool Characteristics 136
5.4.3 Tool Execution 137
5.5 bpftrace One-Liners 137
5.6 bpftrace Documentation 138
5.7  bpftrace Programming 138
5.7.1 Usage 139
5.7.2 Program Structure 140
5.7.3 Comments 140
---
## Page 13
xii
Contents
5.7.4 Probe Format 141
5.7.5 Probe Wildcards 141
5.7.6 Filters 142
5.7.7 Actions 142
5.7.8 Hello, Worid! 142
5.7.9 Functions  143
5.7.10 Variables 143
5.7.11 Map Functions 144
5.7.12 Timing vfs_read0 145
5.8  bpftrace Usage 147
5.9  bpftrace Probe Types 148
5.9.1 tracepoint 148
5.9.2 usdt 150
5.9.3 kprobe and kretprobe  151
5.9.4 uprobe and uretprobe 151
5.9.5 software and hardware 152
5.9.6 profile and interval 153
5.10 bpftrace Flow Control 154
5.10.1 Filter 154
5.10.2 Ternary Operators 154
5.10.3 I Statements 155
5.10.4 Unrolled Loops 155
5.11 bpftrace Operators 155
5.12 bpftrace Variables 156
5.12.1 Built-in Variables  156
5.12.2 Built-ins: pid, comm, and uid  157
5.12.3 Built-ins: kstack and ustack 157
5.12.4 Built-ins: Positional Parameters 159
5.12.5 Scratch 160
5.12.6 Maps 160