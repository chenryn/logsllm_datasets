    void DexCache::Fixup(ArtMethod* trampoline, size_t pointer_size) {
      // Fixup the resolve methods array to contain trampoline for resolution.
      CHECK(trampoline != nullptr);
      CHECK(trampoline->IsRuntimeMethod());
      auto* resolved_methods = GetResolvedMethods();
      for (size_t i = 0, length = resolved_methods->GetLength(); i GetElementPtrSize(i, pointer_size) == nullptr) {
          resolved_methods->SetElementPtrSize(i, trampoline, pointer_size);
        }
      }
    }
这个被指向的ArtMethod是runtime的resolution_method_，其作用便是解析得到方法的实际ArtMethod。当callee第一次被调用时，由数组dex_cache_resolved_methods_获取并执行的是resolution_method_。待解析完成，得到callee的实际ArtMethod后，再去执行实际的代码；此外，还会将解析得到的ArtMethod填充到数组dex_cache_resolved_methods_的相应位置。这样，之后callee再被调用时，便无需再次进行方法解析。
这种方式与ELF的got.plt极为相似，如果研究过ELF的方法调用机制，应该对这里的dex_cache_resolved_methods_不会感到陌生。
##
## 主流hook框架
在介绍YAHFA之前，有必要对目前ART环境下主要的hook框架进行一个简要的介绍
### Xposed
相比其他框架，Xposed的代码量相当大，这主要是因为为了适配ART环境，Xposed[重新实现了libart.so等重要系统库](https://github.com/rovo89/android_art)。
具体地，Xposed是替换了方法的入口点entry_point_from_quick_compiled_code_，并将原方法等信息备份在entry_point_from_jni_中。替换后的入口点
，会重新准备栈和寄存器，执行方法artQuickProxyInvokeHandler，并最终进入InvokeXposedHandleHookedMethod，完成hook的执行。
### AndFix
AndFix的替换思路很简单：找到目标方法后，将其`ArtMethod`结构体的内容全部替换成为hook的内容：
    void replace_6_0(JNIEnv* env, jobject src, jobject dest) {
        art::mirror::ArtMethod* smeth =
                (art::mirror::ArtMethod*) env->FromReflectedMethod(src);
        art::mirror::ArtMethod* dmeth =
                (art::mirror::ArtMethod*) env->FromReflectedMethod(dest);
        reinterpret_cast(dmeth->declaring_class_)->class_loader_ =
        reinterpret_cast(smeth->declaring_class_)->class_loader_; //for plugin classloader
        reinterpret_cast(dmeth->declaring_class_)->clinit_thread_id_ =
        reinterpret_cast(smeth->declaring_class_)->clinit_thread_id_;
        reinterpret_cast(dmeth->declaring_class_)->status_ = reinterpret_cast(smeth->declaring_class_)->status_-1;
        //for reflection invoke
        reinterpret_cast(dmeth->declaring_class_)->super_class_ = 0;
        smeth->declaring_class_ = dmeth->declaring_class_;
        smeth->dex_cache_resolved_methods_ = dmeth->dex_cache_resolved_methods_;
        smeth->dex_cache_resolved_types_ = dmeth->dex_cache_resolved_types_;
        smeth->access_flags_ = dmeth->access_flags_ | 0x0001;
        smeth->dex_code_item_offset_ = dmeth->dex_code_item_offset_;
        smeth->dex_method_index_ = dmeth->dex_method_index_;
        smeth->method_index_ = dmeth->method_index_;
        smeth->ptr_sized_fields_.entry_point_from_interpreter_ =
        dmeth->ptr_sized_fields_.entry_point_from_interpreter_;
        smeth->ptr_sized_fields_.entry_point_from_jni_ =
        dmeth->ptr_sized_fields_.entry_point_from_jni_;
        smeth->ptr_sized_fields_.entry_point_from_quick_compiled_code_ =
        dmeth->ptr_sized_fields_.entry_point_from_quick_compiled_code_;
        LOGD("replace_6_0: %d , %d",
             smeth->ptr_sized_fields_.entry_point_from_quick_compiled_code_,
             dmeth->ptr_sized_fields_.entry_point_from_quick_compiled_code_);
    }
这样做存在两点问题：
  * 原方法的信息全部被替换，所以无法再执行原方法了。在逆向分析时，我们有时并不是要完全替换原方法，而是类似于插桩等措施，获取方法执行过程中的一些关键的信息，所以必须要对原方法进行备份以执行。
  * 原方法所属的对应dex信息也被替换了。如前文所述，这些信息在通过反射机制获取方法时会被使用，所以原方法和hook方法的名称、签名必须完全一致。对于热修复来说，这点也许影响不大，但对于逆向分析则略显不便。此外，由于这些信息在解析方法时会被使用，所以有时也会发生NoSuchMethodError的问题。
### Legend
Legend和AndFix基本上采取的是完全一样的手段，即直接将目标方法的`ArtMethod`结构体内容全部替换：
    artOrigin.setEntryPointFromQuickCompiledCode(hookPointFromQuickCompiledCode);
    artOrigin.setEntryPointFromInterpreter(hookEntryPointFromInterpreter);
    artOrigin.setDeclaringClass(hookDeclaringClass);
    artOrigin.setDexCacheResolvedMethods(hookDexCacheResolvedMethods);
    artOrigin.setDexCacheResolvedTypes(hookDexCacheResolvedTypes);
    artOrigin.setDexCodeItemOffset((int) hookDexCodeItemOffset);
    artOrigin.setDexMethodIndex((int) hookDexMethodIndex);
与AndFix不同的是，Legend在替换前，对原方法进行了备份保存。随后就可以通过调用这个备份方法来执行原方法。不过，这种执行原方法的手段，带来的额外开销比较大：
  * 首先需要通过在map中查找的方式动态获取原方法的备份，即备份方法的结构体必须在运行时动态获取
  * 随后再通过反射机制Method.invoke()来执行，如前文所述，需要再次通过`art_quick_invoke_stub`准备调用环境，重新进入ART。
此外，与AndFix一样，由于`ArtMethod`的内容全部被替换，所以如果原方法是通过反射调用的，那么hook方法必须具有相同的方法名和签名；另外，对于静态方法这类可能在调用时解析的方法，有时也会出现问题。
### 其他
上述介绍的hook框架，包括将要介绍的YAHFA，都属于”Native派”，其本质是修改`ArtMethod`结构体的内容；而其他hook框架，如Tinker,
Nuwa等大都是”Java派”，例如修改DexPathList等手段。由于Java派实现方式与Native派完全不同，这里就不再介绍了。
关于Native派和Java派，可参考[这篇文章](https://github.com/WeMobileDev/article/blob/master/ART%E4%B8%8B%E7%9A%84%E6%96%B9%E6%B3%95%E5%86%85%E8%81%94%E7%AD%96%E7%95%A5%E5%8F%8A%E5%85%B6%E5%AF%B9Android%E7%83%AD%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88%E7%9A%84%E5%BD%B1%E5%93%8D%E5%88%86%E6%9E%90.md)的介绍。
## YAHFA工作原理
### 方法替换
作为Native派的一员，YAHFA也是通过修改目标方法的`ArtMethod`结构体内容，来实现执行流程的变更。更具体地，是与Xposed相似，修改了entry_point_from_quick_compiled_code_和entry_point_from_jni_字段。
再次回忆方法调用的calling
convention，我们发现，调用原方法和调用hook方法，两者唯一不同点就是callee。也就是说，如果我们将保存callee的`eax`替换成为hook方法的`ArtMethod`，同时保持栈结构和其他寄存器的内容不变，再跳转到hook方法的entry_point_from_quick_compiled_code_，就实现了调用hook方法。
由此启发，我们将hook方法的`ArtMethod`地址保存在原方法的entry_point_from_jni_，并修改原方法的entry_point_from_quick_compiled_code_，使其指向一段辅助代码，在这里完成`eax`的设置和跳转：
    mov 32(%eax), %eax ; 将eax设置为entry_point_from_jni_(偏移为32)的内容
    push 36(%eax) ; entry_point_from_quick_compiled_code_在偏移为36处
    ret ; 跳转到hook方法的entry_point_from_quick_compiled_code_
通过这三条简单的指令，便完成了从原方法到hook方法的跳转。相比Xposed更为简洁，可以直接进入hook方法的入口而无需再准备调用环境；相比AndFix和Legend，由于未修改原方法的其他字段，即使hook和原方法的方法名不同，在解析和查找时也不会出现NoSuchMethodError了。
####
## 原方法调用
为了能够在hook方法中调用原方法，我们必须要在修改原方法之前，对其进行备份。Legend在调用原方法时，是通过反射调用备份的方法，其开销相对比较大。那么如何能够减少这些额外的开销呢？
假设在hook方法中有这样一段调用：
    origin("Hooked", msg);
那么如果我们在这里也做一次”hook”，将方法`origin`替换为我们要执行的原方法，那么hook方法在执行到这里时，实际调用的不就是我们的原方法了么？由于这里是直接调用而非反射，我们减少了开销，而且可以采用Legend与AndFix那种方式进行hook，即将`origin`的`ArtMethod`全部替换为原方法的`ArtMethod`。某种意义上讲，这里的`origin`其实是一个placeholder，它的实现可以为空，完全不用考虑，因为最终它会被替换成原方法。
当然，为了控制传入的参数，我们的hook方法和`origin`方法都是静态方法。另外，由于采取了完全替换`ArtMethod`进行原方法的备份，需要首先保证`origin`方法已经解析完成。我们在备份之前，手工更新dex_cache_resolved_methods_数组对应项，确保hook在调用`origin`时无需再进行方法解析。
####
## 再论hook
前面讲了这么多，那么究竟什么是hook？hook是做什么的？可能不同人会有不同的侧重点，但从本质上来讲，hook就是在运行时，动态改变原有的执行流程。
然而，要做到hook，就必须存在一个注入代码的窗口。这可以大致分为以下两类：
  * 应用自带一个这样的窗口，可以接收外部提供的代码，这便是热修复所使用的。通常来说，热修复框架都需要应用在初始化时加载补丁代码。由于窗口是应用自带的，我们并不需要root权限
  * 应用本身并没有这样的窗口，或者我们并不知道是否有这样的窗口，这便是逆向分析时经常遇到的。Xposed的解决方式，是替换系统库，为所有应用添加了一个加载外部代码的窗口，而这就必须有root权限
YAHFA作为一个hook框架，其实际上就是实现了这样一个窗口，可以加载外部代码并替换原有执行流程。如果是用于热修复，那么与其他hook框架类似；如果是在逆向分析时使用，那么还需要通过其他手段将这个窗口添加到应用中，YAHFA本身并不像Xposed那样是具有这种能力的。
设计YAHFA的出发点，是为了便于安全研究和逆向分析，热修复并不是其主要目的。所以，YAHFA并没有过多地考虑稳定性和适配，目前完成了Android
5.1和6.0的测试，包括主要的架构(x86和armeabi)。
## 总结
YAHFA的代码可见 _ **[这里](https://github.com/rk700/YAHFA)**_
。其主要功能是通过C实现，主要是作为思路验证和PoC，因此还有不完善之处。Repo中还包含了一个demoApp用于示例，如果有问题欢迎提issue。
## 参考资料
  * 
  * 
  * 