eﬃciency to applicability. For example, most of the performance
overheads that we measured in our experiments in Section 5 were
due to ineﬃciencies of the library-based DSTM2 system. Also,
as an extreme data point, TMI may not be not compatible with
some limited, hardware-only transactional memory proposals, such
as [19, 20]. More commonly, TMI-based enforcement must take
into account any gaps in complete mediation that may arise as
a result of the limited, weak atomicity provided by many STM
can commitsuccessfailureRead and write setsAuthorization policy(eager validation or authorization possible)validateAbort,no retrylost conflictroll back work and retryExecutionValidationAuthorizationCommitContention managerAuthorization checksCommit logicTX bodysystems. For example, in server software, this may entail placing
transaction{. . .} code sections around all handling of requests,
since any request processing might access a security-relevant,
shared resource.
A TMI reference monitor is best built on an STM system with
comprehensive support for I/O and external state, since security
policies often aim to constrain externally-observable eﬀects. For
example, some STM systems extend transactional semantics to
I/O in transaction{. . .} code sections using the support for dis-
tributed transactions provided by an increasing number of I/O sys-
tems (e.g., the NTFS ﬁle system [45] and MySQL database [44]).
Techniques for extending STM semantics to I/O and external state
are an active area of research [21, 42, 48]. For this paper, we
have extended an STM implementation to provide transactional
ﬁle and database I/O, using oﬀ-the-shelf transactional I/O packages
(e.g., [38, 44, 45]).
3.2 Example of TMI-based policy enforcement
As a concrete example of using a TMI reference monitor to en-
force authorization policies on client requests, consider Figure 5,
which shows a snippet of code taken from GradeSheet, a Java-
based multi-threaded server to manage student grades. For our ex-
periments in Section 5, we modiﬁed GradeSheet to make use of the
object-based STM system DSTM2.
The key data structure in GradeSheet is sheet, a two-dimensional
array of GradeCell objects, each of which stores the details of a
student, a project, and a granted grade or an average grade. The
sheet table can be accessed by multiple principals and each access
must be properly authorized. For instance, GradeSheet may enforce
that a teaching assistant can only access/modify the student grades
in projects that she supervised. GradeSheet parses commands is-
sued by clients in the top-level function doRequest, which dis-
patches requests; Figure 5 shows how getGrade and setGrade
are dispatched and access the sheet table.
The GradeSheet code must be changed in three ways to make
use of DSTM2 and TMI-based enforcement; Figure 5 shows the
relevant code in bold. First, GradeSheet code that may access
shared resources is wrapped in a transaction{. . .} code section
that correctly identiﬁes the acting principal. Second, with TMI-
based enforcement, server code must correctly handle a transac-
tion abort because of authorization failure; for GradeSheet, upon
an authorization exception no code needed to be executed since
doRequest already indicated failure with return null. Third,
DSTM2 requires shared objects to be especially marked (accom-
plished by the @sensitive annotation before the GradeCell def-
inition); it also requires reads and writes to these shared objects to
happen via accessor functions such as set grade and get grade.
Aside from these changes, a separate authorization manager
must also be provided to enable TMI-based enforcement. We
have speciﬁed GradeSheet authorization policy using XACML;
the policy details are given in Section 5.1. Parts of the autho-
rization manager are shown in the lower half of Figure 5. The
TMI reference monitor is invoked on each read or write of a
GradeCell object, since those objects are the security-relevant
resources. The GradeSheet authorization manager speciﬁes how
xacml getdecision checks must be invoked based upon the type
of access that was performed. For example, a read access to the
grade ﬁeld indicates that the getGrade security-relevant opera-
tion is being performed, which triggers the relevant check in the
authorization manager.
3.3 Enhancements
The basic TMI reference monitor architecture presented above can
be augmented in several ways, as discussed below.
(1) Eager, lazy and overlapped enforcement. With eager en-
forcement, authorization checks happen immediately upon each
security-relevant update to the STM read/write sets of a transaction;
each authorization check must be fully completed before the trans-
action continues execution. Explicit authorization queries, e.g., as
described in the tar utility example in Section 3.1, always trigger
eager enforcement.
In contrast, with lazy enforcement, only the inputs to autho-
rization checks are evaluated, or copied, when the TMI reference
monitor is invoked. Validation and authorization happens at the end
of the transaction, when all security-relevant operations performed
during the transaction are authorized en masse. If any of the opera-
tions is not authorized, the entire transaction fails.
With overlapped enforcement, each transaction may spawn an
auxiliary thread to perform policy evaluation. Subsequently, when
the transaction performs a security-relevant operation, the inputs
for authorization checks are dispatched in a message to this aux-
iliary thread, which then performs the authorization checks con-
currently. During validation, transaction execution joins with the
auxiliary thread, and the transaction is aborted if any authoriza-
tion checks failed. Our experimental evaluation in Section 5 shows
that overlapped enforcement is eﬀective in improving performance
when both the transaction body and policy evaluation have high
latency, or are computationally expensive.
With lazy and overlapped TMI-based enforcement, transactions
are speculatively executed with optimistic assumptions. Like other
speculative security enforcement, such as that of [46, 61], this may
beneﬁt performance but may also expose new side channels and
increase the risk of leaking information. (Also, like all substantial
runtime mechanisms, the STM system itself may add new covert
channels.) For example, given an STM runtime system that pro-
vides weak atomicity and updates memory in-place (e.g., that in
[3]), lazy and overlapped TMI-based enforcement will expose in-
formation to non-transactional activity. Thus, lazy and overlapped
TMI-based enforcement is more suited for policies for integrity,
auditability, etc., than for policies where conﬁdentiality is critical.
(2) Stateful authorization policies. In stateful authorization poli-
cies, such as those expressed using security automata [17, 50], each
security-relevant operation potentially alters the state of the policy.
Enforcing such policies requires two enhancements to the basic de-
sign of the TMI reference monitor.
First, the order in which security-relevant operations happen
decides how the state of the policy changes, and must therefore
be recorded. This is achieved by building a TMI introspection log
on top of the STM read/write sets. Each read/write to an object in
a transaction is added to the end of this log, thereby preserving the
order in which these operations happen. During enforcement, the
introspection log is used to update the state of the authorization
policy. Second, for stateful policies, it is also important to have
transactional semantics on the state of the policy. This is because
upon an authorization failure, the state of the policy may also have
to be restored.
(3) Fingerprints. A security-relevant operation on a resource may
often consist of several low-level accesses to that resource. A ﬁn-
gerprint maps each such security-relevant operation to the low-
level resource accesses that constitute the operation [27]. For ex-
ample, in FreeCS, a chat server that we evaluated (Section 5.3), the
security-relevant operation of a user joining a chat room involves
writing the ﬁeld usrList of an object called Group, followed by
writing to a ﬁeld grp of an object called User. Prior work pre-
sented techniques to automatically mine such ﬁngerprints by ana-
lyzing server source code [27].
For each security-relevant operation that consists of multiple
resource accesses, we supply the TMI reference monitor with its
/* @sensitive */ class GradeCell {
StudentID sid;
ProjectID pid;
int grade;
};
/* Other class declarations omitted for brevity */
GradeCell[][] sheet;
return "" + sheet[ s ][ p ].get grade();
String getGrade(int s, int p)
{
}
String setGrade(int s, int p, int g) {
sheet[ s ][ p ].set grade( g );
return "" + g;
}
/* Server handling of a command for a client principal */
String doRequest(Object principal, String command)
{
try transaction[ principal ] {
Tokenizer st = new Tokenizer( command );
String action = st.nextToken();
int student = st.nextInt();
int project = st.nextInt();
if (action.equals("getGrade")) {
return getGrade(student, project);
} else if (action.equals("setGrade")) {
int grade = st.nextInt();
return setGrade(student, project, grade);
} ...
} catch(AccessDeniedException) { }
return null;
}
XACML GradeSheet authorization manager: if xacml getdecision evaluates to “permission denied”, TMI aborts the transaction.
switch ()
case (resource=GradeCell G/ﬁeld accessed is grade, access type=read) −→ xacml getdecision(principal, G, getGrade);
case (resource=GradeCell G/ﬁeld accessed is grade, access type=write) −→ xacml getdecision(principal, G, setGrade);
Figure 5. Code fragment showing the GradeSheet changes needed for TMI-based enforcement in our DSTM2 implementation.
ﬁngerprint. The reference monitor matches the resource accesses
speciﬁed in the ﬁngerprint against updates to the read/write sets to
determine when security-relevant operations are performed during
the transaction. In some cases, such as the FreeCS example dis-
cussed above, the ﬁngerprint may consist of a sequence of resource
accesses (rather than a set). Thus, the TMI reference monitor must
be extended to support an introspection log, and ﬁngerprints must
be matched against this log to determine when a corresponding
security-relevant operation is performed.
IMPLEMENTATION
4.
We implemented a TMI reference monitor by extending Sun’s
Dynamic Software Transactional Memory (DSTM2) package [34].
Although not described here, we have also implemented TMI in
Haskell, where TMI beneﬁts from the static guarantees and strong
atomicity of Haskell STM [33]; a technical report contains a formal
semantics and other details of this implementation [7]. Below, we
describe the details of our DSTM2 implementation.
DSTM2 provides a framework for Java object-based STM
systems, along with some concrete STM runtime mechanisms.
DSTM2 supports STM fundamentals but not uncommon fea-
tures (e.g., nested transactions). Thus, DSTM2 mechanisms track
read/write sets, perform validation and contention management,
and commit/abort transactions. In particular, DSTM2 contains two
mature, substantial STM mechanisms for detecting and resolving
conﬂicts (the obstruction-free and shadow @atomic shared object
factories; those factories are described in detail in the DSTM2 pa-
per [34]).
Our implementation is compatible with any STM mechanism
that ﬁts into the DSTM2 framework; in particular, we have applied
TMI-based enforcement with several diﬀerent DSTM2 contention
managers and both types of @atomic objects. Our implementation
also allows TMI reference monitors to make use of other, existing
security mechanisms; for our experiments, we have integrated TMI
with XACML [23] and Java Stack Inspection [30].
Our implementation extends DSTM2 by interposing on up-
dates to read/write sets and on the transaction commit/abort logic.
Security-relevant, shared objects are identiﬁed with a @sensitive
annotation that is synonymous with @atomic. A TMI reference
monitor is invoked at the start and end of transactions (just before
commit or abort), as well as on each access that may change a
transaction’s read/write set (e.g., on all accesses to @sensitive
objects). These invocations trigger the application-speciﬁc autho-
rization manager, which ﬁlters out access to security-relevant ob-
jects and performs authorization checks. These invocations may
also copy relevant metadata; for example, if the authorization
policy is speciﬁed using security labels of subjects and objects
(e.g., as in SELinux), those labels may be copied for use in au-
thorization checks. If an access is not authorized, the transac-
tion is aborted and an AccessDeniedException is thrown. (This
is the only exception a transaction can throw: for other excep-
tions, DSTM2 implements a fail-stop model.) The handler for the
AccessDeniedException can optionally be used to specify com-
pensating actions that must be executed upon an authorization fail-
ure.
In our implementation, most authorization checks can be de-
ferred by copying all security-relevant metadata into an introspec-
tion log. Security-relevant information can change during a trans-
action, so the introspection log must contain immutable copies of
this metadata for input to authorization checks. Our implementa-
tion supports both lazy-until-commit and overlapped enforcement
of deferred authorization checks. (Explicit, functional checks may
not be deferred, as discussed in Section 3.1, and are always eagerly
evaluated.) In our experiments, we have also used the introspection
log to enforce history-based authorization that detects the ﬁnger-
prints of security-relevant operations.
We also extended DSTM2 to support transactional I/O, by
adding to the commit/abort logic support for two-phase distributed
transactions [31]. Using this support and the Apache Commons li-
brary [38], we extended STM semantics to ﬁle I/O. We also added
partial DSTM2 support for transactional modiﬁcations to back-end
databases using java.sql.Connections.
Overall, not counting library code, our implementation adds
less than 500 lines of Java code to DSTM2; each application-
speciﬁc authorization manager is between 100 and 200 lines. We
also created transactional (@atomic) versions of standard Java data
structures and containers; these, and other modiﬁcations comprise
a few thousand lines of code changes.
Our TMI reference monitor implementation applies only to
DSTM2 server software—just as the TMI architecture applies only
to software that uses declarative concurrency control. Because no
such software existed, we ﬁrst had to retroﬁt DSTM2 onto server
software in order to experimentally validate our implementation.
This porting involved three changes (the ﬁrst two, substantial
changes would not be required with a language-integrated STM
system, such as [3, 32]).
First, all shared objects had to be identiﬁed, and their class re-
placed with an equivalent, transactional class, annotated with the
@atomic or @sensitive keywords. For this, we had to imple-
ment transactional versions of common data structures, such as
java.util.HashMap and java.util.Vector; for simpler data
structures, containing only scalar values or strings, we could use
DSTM2 support for automatic generation of @atomic classes. Sec-
ond, the reads and writes of ﬁelds in transactional objects had to
be changed to use DSTM2 accessor functions. For example, the
statement sheet[s][p].grade = g in GradeSheet’s setGrade
method had be modiﬁed to sheet[s][p].set grade(g) as
shown in Figure 5, where the set grade method is a DSTM2
accessor function to set the ﬁeld grade of a GradeCell object.
Third, and most simply, a transaction{. . .} block had to be intro-
duced around the handling of client requests, as well as other code
that accesses shared resources.
Given the above modiﬁcations, adding TMI-based enforcement
of authorization policy was easy for the server software in our ex-
periments. First, the principals had to be identiﬁed and exposed
for each transaction{. . .} code section. (In our implementa-
tion, principals are transaction arguments, as shown in Figure 5,
where the principal variable contains the principal.) Second, an
application-speciﬁc authorization manager had to be written for
instantiation at the start of server execution. This task primarily in-
volved understanding the server’s authorization policy, the server’s
security-relevant resources, and what metadata to copy into the
introspection log. Finally, for some experiments, we had to inter-
face the authorization manager with external security mechanisms
(namely, XACML [23] and Java Stack Inspection [30]).
5. EVALUATION
This section reports on the retroﬁtting of four servers, comprising
nearly 55,000 lines of Java code, with TMI-based authorization
using our DSTM2-based implementation. Our intent with these
experiments was to evaluate whether the TMI beneﬁts held in
practice.
The results of our evaluation conﬁrm that TMI-based enforce-
ment is practical, and can be easily adopted by STM servers to
facilitate the writing of simple, correct authorization code. Further-
more, our results conﬁrm that TMI can be integrated with existing
security mechanisms, that TMI has acceptable enforcement over-
head, and that TMI can adapt enforcement and overhead to each
workload—in some cases allowing absolute performance improve-