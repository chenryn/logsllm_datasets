address = base + (index × scale) + offset, where base means the base
address. By tracking the movement of root pointers, we can identify
the pointer on which base depends as the root pointer.
Correlating Input Fields. We leverage multi-tag taint propaga-
tion results to establish the correlation between memory objects
and input fields. For each tainted operand, we first determine its
taint tags. If the operand is a register, we backtrack the execution
trace to obtain the dependent memory operand. Second, we extract
the root pointer, and the offset from the root pointer to the base
address of the memory operand. Third, we construct the correlation
between the referenced memory object and inputs with taint tags.
For an input field that contains multiple bytes such as a buffer or a
string, a program generally allocates an array and manipulate them
in a loop or C-string library function [57]. Within a loop, a program
Figure 4: Reverse-engineered memory objects and their cor-
related input fields for the vulnerable and patched ghttpd.
in the heap is straightforward. We directly use a static variable’s
memory address, which will not be reused, to represent its root
pointer. For dynamic variables in the heap, we hook related memory
allocation functions and take the return value as the root pointer.
In Figure 4(b), eax holds the return value of malloc. Thus eax refers
to the root pointer of the allocated memory object.
Identifying the root pointer for a local variable is a little trickier.
Typically, a function stack frame holds the set of local variables,
and programs address a local variable with the base pointer ebp.
Thus, the root pointer of a local variable is indicated by the offset
from ebp, such as ebp-0x4. For example, the first instruction (lea
-0x172(%ebp), %edi) in Figure 4(a) indicates a root pointer with the
address ebp-0x172, because it is in the current stack frame and is not
derived from any other root pointers. The tricky issue here is a local
variable can also be addressed via the stack pointer esp, which may
lead to false positives on memory object identification. Our solution
is to normalize these two possible local variable access ways only
via ebp. Specifically, the concrete execution state that is recorded
during execution enables us to examine whether two pointers are
aliased. In Figure 4(a), the destination operand of mov $0x804b108,
0x4(%esp) is a parameter of sprintf. Function parameters are often
pushed into stack first. However, due to compiler optimization,
the parameter here is directly addressed by 0x4(%esp). After our
normalization, we regard esp+0x4 as ebp-0x24c by calculating the
offset of 0x4(%esp) from ebp.
An exception happens when the compiler optimization option
“- fomit-frame-pointer” is enabled, in which the generated binary
code will not keep the frame pointer ebp for a function call. At the
beginning of the function, there are no stack balance instructions
such as push ebp; mov esp, ebp. This optimization avoids the instruc-
tions to save, set up, and restore frame pointers, but it complicates
Function Call Stack IdentificationReverse-engineering Data Structures & Input FieldsPoC ExploitSmith-Waterman AlgorithmContext-Rich Patch DifferencesPP’Vulnerability Root Cause Buggy Patch...lea     -0x172(%ebp) ,  %edimov   %edi,(%esp)call    vsprintflea     -0x23a(%ebp) ,  %esimovl  $0x804b108,0x4(%esp)mov   %esi,(%esp)call    sprintfcall   mallocmov  %eax    ,  -0x1b0(%ebp)mov  -0x1b0(%ebp),%edimov  %edi,(%esp)call    vsnprintfcall     mallocmov   %eax   ,   %esimovl   $0x804b4e8,0x4(%esp)mov    %eax,(%esp)call     sprintfsize: 38taint tags:[4-29]size: 101taint tags:[4-29]size: 200taint tags:[4-29]size: 200taint tags:[4-29](a) vulnerable ghttpd(b) patched ghttpdStackHeapGET/imag…input:taint tags: [4-29] eHeaptypically manipulates consecutive input bytes via corresponding
memory cells with the same root pointer and consecutive offsets.
Based on the heuristics, we further group memory accesses that
manipulate input fields (such as a string) via the same memory
object (such as an array). Specifically, we first identify memory cells
that belong to the same memory object. If two memory cells with
consecutive offsets from the root pointer are used to manipulate
consecutive input bytes, then we can group them into one memory
object access.
4.5 MOAS Construction
After we excavated memory objects and correlated input fields, we
have confirmed three items, mobj, cc, and α, for a memory object
access as Definition 2, leaving op and optype undecided.
For a data movement instruction, we track the memory load/store
for its tainted operands. The optype of read or write for the related
memory object is decided by whether the tainted operand is loaded
from or stored into memory.
Dealing with arithmetic instructions is a bit more complicated,
because it is likely that only register operands are involved in an
arithmetic instruction. We first identify whether a tainted register
is a copy of a memory object. If yes, we take the arithmetic opcode
as the op and identify optype by whether the tainted register is a
source or destination operand.
For a C library call instruction that also propagates taint tags,
we have optimized it using function summary at run time. Here we
update the related memory object’s op and optype according to the
function summary’s semantics.
Till now, we construct a memory object access with the root
pointer of such memory object, the calling context, data-flow-
related opcode, access type, and the correlated input field bytes that
are addressed by the same root pointer. Then, we form a sequence
with all the constructed memory object accesses in temporal order.
4.6 MOAS Alignment
To identify patch differences, we explore sequence alignment algo-
rithms. The longest common subsequence (LCS) algorithm looks
at the entire sequence, but it does not always deliver the most
meaningful alignment in our context. In this study, we leverage the
Smith-Waterman algorithm [58], which tends to find similar local
regions between two sequences.
A challenge in MOAS alignment is that memory objects are
represented as root pointers, which could be different for the same
memory objects. To address the challenge, we treat a memory object
access as a vector and measure two vectors’ similarity. In detail,
both memory object and memory object access can be represented
as vectors according to Definition 1 and Definition 2. For a pair
of memory object accesses, we first calculate the similarity between
two corresponding memory objects and then quantize the similarity
between two memory object accesses. The details about how we
apply the Smith-Waterman algorithm are presented in Appendix D.
5 EVALUATION
The prototype of PatchScope includes a total of 2, 070 lines of C
and Python code. 560 lines of C code is used to extend DECAF [28]
for multi-tag taint analysis and execution monitoring. Our offline
analysis, including memory object excavation and local sequence
alignment, is implemented with 1, 510 lines of Python code.
We conduct our experiments with three objectives. First, we
did a comparative evaluation to demonstrate that PatchScope is
particularly fit for capturing security patch differences. Second, to
demonstrate that differences identified by PatchScope have rich
semantics, we present the patch impacts on memory object accesses
and input manipulations, by inspecting different items identified by
PatchScope. Third, we perform case studies to show that Patch-
Scope can assist reverse-engineers in further patch analysis.
5.1 Experiment Setup
Our experiment platform contains two Intel Xeon Gold 6134 pro-
cessors, two GeForce GTX 1080 Ti 11GB graphic cards, and 256G
memory, running Ubuntu 18.04 LTS.
Datasets and Ground Truth Collection. We select real-world
vulnerabilities for evaluation considering several factors, including
the vulnerability type, the patch complexity, and the patch patterns
reported in Table 1.
Considering these factors, we select vulnerable applications from
the datasets [37, 41, 46, 65, 68] according to the following criteria:
1) the vulnerable program, the security patch, and a PoC are all
available; 2) types of vulnerabilities include stack overflow, heap
overflow, integer-to-buffer overflow, off-by-one, use-after-free, and
double free; 3) patches cover all types listed in Table 1. Besides, we
exclude vulnerable applications (such as 64-bits and interpreted
language engines) that cannot be supported by our prototype. In
this way, we select 37 applications in total from these datasets.
For each application, we use the same compiling options to gener-
ate two binaries, an unpatched one, and a patched one, respectively.
To collect the ground truth, we manually identify patch differences
between each pair of binaries with the assistance of patches.
Besides the 37 applications of which the patch source is avail-
able, we also select 8 applications of which the patches are not
available. That is, the vulnerabilities in these applications are fixed
in the new release versions instead of patches. This patching type
represents a more challenging case for patch analysis, because the
update version may contain security patches, general bug fixes, and
functionality changes. As a result, it is difficult to identify and dis-
tinguish security patch differences. These 8 applications are listed
in the last eight rows in Table 2. Through these applications, we
aim to demonstrate that PatchScope can facilitate patch analysis
with the assistance of rich information from identified differences.
To collect ground truth for these eight applications, we manually
identify their patched code in binaries by debugging PoCs.
Baseline Techniques. We select both prominent static and dy-
namic diffing approaches as baseline techniques.
We select three industry-standard binary diffing tools: BinDiff [27],
Diaphora [34], and DarunGrim [49]. We also select an AI-powered
binary diffing technique, DeepBinDiff [19], which is recently pub-
lished and open-source. These four techniques work on static bi-
naries directly. For a fair comparison, we setup dynamic execution
comparisons by leveraging binary diffing techniques to compare
execution traces caused by PoCs. For all different items identified
by binary diffing, we regard an item as a difference only if it is
Table 2: Comparative evaluation results. “OF” is short for “overflow”.
Vulnerability
Security Patch
Time(s)
Program
CVE
Type
LOC
Type
Trace
Diff
BinDiff
(Inst.)
Diaphora
(Inst.)
Result (Number of different items detected)
BLEX
(Inst.)
CoP
(BB.)
BinSim PatchScope
(Syscall)
(MOA)
147
141
99
108
291
138
117
110
222
129
179
81
79
135
103
1537
444
208
178
277
119
69
52
101
405
157
189
88
111
116
309
455
97
163
193
125
643
339
312
137
358
284
252
203
209
10209
123
92
81
88
135
84
104
116
148
91
111
104
99
151
138
189
163
157
125
148
135
110
82
90
106
143
130
97
91
91
173
187
131
149
127
113
190
176
131
159
168
141
111
126
125
5729
static
0
4
15
5
11
1
25
33
3
2
2
22
13
2
7
10
2
52
37
0
97
21
9
76
0
107
11
49
5
111
15
6
0
48
32
40
275
675
31
2483
198
7
16
56
1144
5758
trace
0
2050
14
5
6
1
17
1579
2
2
4082
22
11264
1
2
3072
2
45
2948
0
4588
8
9
27
0
32
2
12
5
47
8
3
0
11
23
16
35
63
2
436