资源，完全可以不用保护。实际上，在Python的发展历史中，确实出现过这样的解决方
我们似乎只需要将可能被多个线程共享的资源保护起来即可，对于不会被多个线程共享的
权，即使这些线程的下一条指令并不会互相影响。初看上去，这样的保护机制粒度太大了，
在一个线程拥有了解释器的访问权之后，其他的所有线程都必须等待它释放解释器的访问
中的Interpreter，本章中，我们会以解释器来称呼虚拟机—级的互斥机制，也就是说，
互斥实现，正如它的名字所暗示的，GIL是一个解释器（Interpreter）——为了呼应GIL
斥，Pyton也不例外，这正是引入GIL的根源所在。Python中的GIL是一个非常霸道的
的动作。这样的结局是什么？只有天知道。
初的1。按照约定，傻乎乎的A开始再一次地对已经销毁的对象进行对象销毁和内存释放
调度打断，而是顺利地完成了接下来的第二个动作，将对象销毁，内存释放。好了，现在
多的实现细节透露出来。
程之间通过IPC的方式进行通信。当然，Guido也仅仅是提出了这么一个想法，并没有太
决方案，在多处理器的情况下，完全可以创建多个Pyhon进程，充分使用多处理器，进
5月份Python3000的邮件列表上，Python的创造者，Guido，提出了一个比较可行的的解
GIL仍然是多线程机制的基石，而我们也仍然将视线集中在单处理器上。实际上，在去年
护，编写Python扩展模块的难度大大增加。所以，到目前Python的最新版本2.5为止，
而加锁、解锁对于操作系统来说，是一个比较重量级的动作：另一方面，没有了GIL的保
有使用GL的Python的一半左右。因为细粒度的锁机制会导致大量的加锁、解锁的操作
年的时候，GregStein和MarkHammond两位老兄基于Python 1.5创建了一份去除GIL的
不可能并行的，但是对于多处理器，情形就完全不同了，同一时间，确实可以有多个线程
所提供的API。注意这里的同一时间对于单处理器是毫无意义的，因为单处理器的本质是
好。所以现在Python中的多线程机制是在GIL的基础上实现的。
案，但是令人惊奇的，这样的方案在单处理器上的多线程实现的效率上却没有GL的方案
第15章Python多线程机制
为了支持多线程机制，一个基本的要求就是需要实现不同线程对共享资源访问的互
图15-1显示了我们对Pyhon的多线程机制所建立的一个粗略的模型。
当然，这样的方案也意味着，无论如何，在同一时间，只能有一个线程能访问Pyton
深度探索动态语言核心技术
8
---
## Page 423
始进行进程的调度。同样，Py山on中也是通过软件模拟了这样的时钟中断，来激活线程的
当一个进程执行了一段时间之后，发生了时钟中断，操作系统响应时钟中断，并在这时开
线程调度的问题，是由Pyhon自身决定的。考虑一下操作系统是如何进行进程的切换的，
问的，Python拥有一套线程的调度机制。
味着，并行的计算退化为了串行的计算，要这样的多线程机制有什么意义呢？所有毫无疑
也需要通过GIL进行互斤。关于这一点，我们将在后面详细阐述。
CAPI，在C/C++和Python的混合开发中，在涉及到原生线程和Python线程的相互协作时，
算，实际上，Python的GIL背后所保护的不仅仅是Pyhon的解释器，同样还有Python的
其他的两个线程（B，C）只能等待A释放GIL之后，然后才能进入解释器，执行一些计
获得GIL，因为GIL把守着通往字节码解释器的大门。当某个线程（A）获得了GIL之后
A，B和C都需要使用解释器来执行字节码，以完成某种计算，但是在这之前，它们必须
所以Pyton通过GIL来互斥不同线程对解释器的使用。在图15-1中，三个拟人化的线程
那么A在何时释放GIL呢？如果等到A使用完了解释器之后才释放GIL，这也就意
在Pyhon的多线程机制中，这两个问题是分别由不同的层次解决的。对于何时进行
对于线程调度机制而言，同操作系统的进程调度一样，最关键的是要解决两个问题：
在众多的处于等待状态的候选线程中，选择激活哪一个线程？
在何时挂起当前线程，选择处于等待状态的下一个线程？
从之前的分析中，我们知道，对于Python而言，字节码解释器是Python的核心所在。
图15-1Python线程机制的粗略模型
Interpreter
不个
GIL
Python源码剖析
15.1
GIL与线程调度
一深度探索动态语言核心技术
393
---
## Page 424
394
Python源码剖析
15.2初见PythonThread
builtinmodule，用C实现。在threadmodule的基础上，Python提供了一个更高层的
module：thread 以及在其之上的threading。
程，而并非如坊间所流传的那样：Python的线程并非原生线程，而是模拟出来的。Pyhon
Pyhon借用了底层操作系统所提供的线程调度机制来决定下一个进入Python解释器的线
错，对于这个问题，Pyuon完全没有插手，而是交给了底层的操作系统来解决。也就是说，
动，当这个线程执行了100条指令之后，Pyuhon解释器将强制挂起当前线程，开始切换到
Pyhon解释器的所必须的GIL并进入Pyhon解释器后，Python内部的监测机制就开始启
heckinterval（）来调节这个值。
也使用它来检查是否有异步的事件（event）发生，需要处理。我们可以通过sy6.setc-
令以后启动线程调度机制。实际上，这个值不仅仅是用来进行线程调度的，在内部，Pyhon
得Pyhon内部默认设定的这个值。
意味着Python在执行了N条指令以后应该立即启动线程调度机制，图15-2显示了如何获
Python内部维护着一个数值，这个数值就是Python内部的时钟，如果这个数值为N，则
调度。我们知道，Pyhon字节码解释器的工作原理是按照指令的顺序一条一条地顺序执行，
用Python语言实现，为用户提供了更方便的多线程机制接口。
多线程机制接口，即thredingmodule。threadingmodule是一个标准库中的module，
机制，给Pyhon的使用者一个非常简单而方便的多线程工具箱，这就是Python中的两个
同的实现，然而最终，在各不相同的原生线程的基础之上，Pyhon提供了一套统一的抽象
中的多线程机制正是建立在操作系统的原生线程的基础之上，对应不同的操作系统，有不
程究竟是谁。
下一个处于等待状态的进程。
第15章Python多线程机制
Python所提供的最基础的多线程机制的接口是threadmoduie。这个module是一个
这一点至关重要，这就意味着Pyhon中的线程实际上就是操作系统所支持的原生线
那么究竞Python会在众多的等待线程中选择哪一个幸运儿呢？答案是，不知道。没
现在我们知道了，Python控制着什么时候进行线程调度，当一个线程获得了访问
图15-2显示的结果意味着，在当前的2.5中，Pyton的默认行为是在执行了100条指
一深度探索动态语言核心技术
图15-2Python2.5内部的“时钟中断”间隔值
100
sys.getcheckinterval()
impart
SAE
---
## Page 425
请参阅Python文档
少得可怜。在我们的threadl.py中我们使用了其中两个接口。关于这两个接口的详细介绍，
“start_new_thread”和“start_new”，实际上在Python 内部，对应的都是thread
的所有多线程机制接口。
在threadmodule的实现文件threadmodule.c中，threadmodule为Python使用者提供
[threadmodule.c]
当然，也正因为如此，才使Pyhon中的多线程编程变得非常的简单而方便。我们来看看
对操作系统的原生线程机制所做的精巧的包装。
何进行多线程编程，所以重点会放在threadmodule上。通过这个module，看一看Python
static PyMethodpef thread_methods
whileTmue
thread.start_new_thread(threadProc. O)
printmainthreadid:
def threadProc():
[threadl.py]
我们发现，threadmoaule中有的接口居然以不同的形式出现了两次，比如
我们通过下面所示的threadl.py开始充满趣味的多线程之旅。
在threadmodule中，Python向用户提供的多线程机制的接口其实可以说少得可怜，
print
我们的目标是要剖析Pyhon中的多线程机制是如何实现的，而非学习在Pyhon中如
(NULL,
(stack_sizen
"startnew"
while True:
autad
exiEa
exit_thread",
print
time
thread
subthreada
new.thneae"
"Hello from sub thread ,thread.get_ident()
NULL)
(PyCFunction)thread_PyThread
(PyCFu
(PycFumction)thread_PyThre
(PyCFunct
(Pycrunction)thread PyThread_allocate_lock,
(PyCFuncE
thread.get_ident ()
thraad.get_ident ()
sentinel
Python源码剖析
PyThread_allocate_lock,
15.2初见PythonThread395
ident,
一深度探索动态语言核心技术
thread,
---
## Page 426
15.3
396
Python源码剖析
thzead，看看Python是如何进行创世纪的工作的（见代码清单15-1）。
倘若没有这个接口，生活还有什么意义呢？在上面的threadl.py中，我们正是通过其提
完成一个线程的创建。
statie Pyobject*thread PyThread_start_new_thread(Pyobject *self,PyObjeet
代码清单15-1
[threadmodule.c]
Python线程的创建
fargs)
第15章Python多线程机制
在Python的threadmodule所提供的接口中，一定不能少的肯定是创建线程的接口，
如图15-3展示了thread1.py的运行结果。
在thread_PyThreadstart_new_thread中，Python虚拟机通过三个主要的动作，
Pyeval_InteThreads();/* Start the interpreter's thread-awareness */
PyArg_UnpackTuple(fargs,)
//[3】:创建线程
（/[2]：初始化多线程环境
boot
boot->interp
boot
&keywl
=:PyThnead_start_new_thread(c_bootstrap
PyMem_New(struct
创建bootstate结构
一深度探索动态语言核心技术
*func,
Hello from sub thread 1132
main threadid:3288
FAPythonBookISrcthread>python threadlpy
Hellofrommain thread 3288
Hellofrom sub thread 1132
sub threadid:1132
1
keyw:
PyThreadstate_GEm()->interp;
args.
图15-3
IN=MAOX*
bootstate,
start_new_thread,23,&func,&args.
thread1.py的运行结果
1）：
(void*)boot);
---
## Page 427
15.3.1
的多线程机制的重要意义，然而这个GIL到底是如何实现的呢，，这是一个很有趣的问
线程机制需要的数据结构、环境以及那个至关重要的GIL。
线程，Pyhon就能意识到用户需要多线程的支持，这个时候，Pyhon虚拟机会自动建立多
持单线程，一旦用户调用thread.start_new_thread，明确指示Python虚拟机创建新的
户激活多线程机制的策略。在Pyhon虚拟机启动时，多线程机制并没有被激活，它只支
Pyhon程序中并没有多线程，那么在100条指令之后，Python虚拟机同样会激活线程的调
的代码，我们一定都会抓狂的。
多线程的支持。假如一个简单地统计词频的Pyton脚本中居然出现了多线程，面对这样
所有的thread都会共享这些全局信息。
preterState对象，这个对象中携带了Python的modulepool这样的全局信息，Python中
度。而如果不激活多线程，Pyhon虚拟机则不用做这些无用功。所以Pyhon选择了让用
及GIL都是没有创建的，Python之所以有这种行为是因为大多数的Pyuon程序都不需要
代码清单15-1的[1]、[2]和[3]分别有如下含义：
staticlong main_thread=
static PyThread_type_lock intexpreter_lock =0;/*This is the GIL */
typedaf void *PyThread_type_lock;
[pythread.h]
题。
void PyEval_InitThreads(void)
[ceval.c]
对多线程的支持并非是没有代价的，最简单的一点，如果激活多线程机制，而执行的
Python启动时，是并不支持多线程的。换句话说，Python中支持多线程的数据结构以
关于代码清单15-1的[2]处所示的多线程环境的初始化动作，有一点需要特别说明，
多线程环境的建立，说得直白一点，主要就是创建GIL。我们已经知道GL对于Pyhon
if(interpreter_lock)
建立多线程环境
在代码清单15-1的[1]中，我们注意到boot->initerp中保存了Python的pyInter-
[3]
山
[2]
以boot为参数，创建操作系统的原生线程。
创建并初始化bootstate结构boot，在boot中，将保存关于线程的一切信息，
return;
初始化Py山on的多线程环境。
如：线程过程，
线程过程的参数等。
Python源码剖析
15.3Python线程的创建
一深度探索动态语言核心技术
397
---
## Page 428
Python源码剖析
398
中
PyThread_init_threaa的唯一作用就是设置initialized变量；
统可能需要不同的初始化动作。在Win32平台下，不需要任何的初始化动作，所以
作是否完成。这些必须的初始化动作通常都是底层操作系统所提供的API，不同的操作系
这个initialized变量就指示着为了使用底层平台所提供的原生山read，必须的初始化动
代码剖析中，还会有大量与平台相关的代码，我们都以Win32平台为例。
一个接口。我们这里的thread_nt.h中包装的是Wm32平台的原生thread，在本章中后面的
程，并通过统一的接口暴露给Pyhon，比如这里的PyThreadal Locate_lock就是这样
录下，有一大批thread**h这样的文件，在这些文件中，包装了不同操作系统的原生线
成，我们来看一看这个GLL到底是何方神圣。
任何动作，否则，就会创建这个GIL。创建GIL的工作由PyThreadallocate_lock完
ryEval_InitThreads的开始，Python会检查GIL是否已经被创建，如果是，测不再进行
static void PyThread_init_thread(void))
能容器啊。
个简单的voia*。但是转念一想，在C中voia儿乎可以是任何东西，这家伙，可是个万
[thread_nt.h]
void Pymhread_Init_thread(voia)
[thread.c]
一个nitialized的变量，如果说GIL指示着Pyhon的多线程环境是否已经建立，那么
ByTnread_type_lock PyThread_allocate_lock(void)
[thread nt.h]
第15章Python多线程机制
在pyThreadallocate_lock中，与PyEval_InitThreads非常类似的，它会检查
在这里，我们终于看到了Python中多线程机制的平台相关性，在Python25VPython目
可以看到，无论创建多少个线程，Python建立多线程环境的动作只会执行一次。在
终于见识到了神秘的GL（interpreter_lock），没想到吧，万万没想到，它居然指示一
PyThread
if（initialized)
return
alock
PNRMUTEX aLock;
PyThread_acquire_
interpreter_lock= PyThread allocate_lock();
initfalfzed
PyThread_init_thread():
(linitialized)
一深度探索动态语言核心技术
(PyThread_type_lock)
init_Ehread()
lock(interpreter_
aLock;
lock,
---
## Page 429
前线程就开始遵循Python的多线程机制的规则：在调用任何PythonCAPI之前，必须首先
的，必定有一个waitPorSingleobject。
下的Event来实现了线程的互斥，熟悉Win32的朋友马上就可能想到，与这个Event对应
这个内核对象，而其中的山read_id将记录任一时刻获得GIL的线程的id。
RecursiveMutex究竟为这个hevent准备了什么。
和thread id都很普通，而其中的 HANDLE hevent 却值得注意，我们来看看A1locNon-
interperter_lock（GI）。原来GI就是这个家伙，我们来看一看它的真身。
这个结构体是函数的返回值，实际上也就是PyEval_InitThread中需要创建的那个
Int Pymhread_acquire_loek(Pythread_type_lock aLock,int waitflag)
[thread nt.h]