title:System-level Non-interference for Constant-time Cryptography
author:Gilles Barthe and
Gustavo Betarte and
Juan Diego Campo and
Carlos Daniel Luna and
David Pichardie
System-level Non-interference for Constant-time
Cryptography
Gilles Barthe, Gustavo Betarte, Juan Diego Campo, Carlos Luna, David
Pichardie
To cite this version:
Gilles Barthe, Gustavo Betarte, Juan Diego Campo, Carlos Luna, David Pichardie.
System-
level Non-interference for Constant-time Cryptography. ACM SIGSAC Conference on Computer
and Communications Security, CCS’14, Nov 2014, Scottsdale, United States.
pp.1267 - 1279,
10.1145/2660267.2660283. hal-01101950
HAL Id: hal-01101950
https://hal.inria.fr/hal-01101950
Submitted on 10 Jan 2015
HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.
L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.
System-level non-interference for constant-time
cryptography
Gilles Barthe
Gustavo Betarte
Juan Diego Campo
IMDEA Software Institute,
Universidad de la República,
Universidad de la República,
Spain
Uruguay
Uruguay
Carlos Luna
David Pichardie
Universidad de la República,
ENS Rennes/IRISA/INRIA,
Uruguay
France
ABSTRACT
Cache-based attacks are a class of side-channel attacks that
are particularly eﬀective in virtualized or cloud-based en-
vironments, where they have been used to recover secret
keys from cryptographic implementations. One common ap-
proach to thwart cache-based attacks is to use constant-time
implementations, i.e. which do not branch on secrets and do
not perform memory accesses that depend on secrets. How-
ever, there is no rigorous proof that constant-time implemen-
tations are protected against concurrent cache-attacks in
virtualization platforms with shared cache; moreover, many
prominent implementations are not constant-time. An alter-
native approach is to rely on system-level mechanisms. One
recent such mechanism is stealth memory, which provisions
a small amount of private cache for programs to carry po-
tentially leaking computations securely. Stealth memory in-
duces a weak form of constant-time, called S-constant-time,
which encompasses some widely used cryptographic imple-
mentations. However, there is no rigorous analysis of stealth
memory and S-constant-time, and no tool support for check-
ing if applications are S-constant-time.
We propose a new information-ﬂow analysis that checks
if an x86 application executes in constant-time, or in S-
constant-time. Moreover, we prove that constant-time (resp.
S-constant-time) programs do not leak conﬁdential infor-
mation through the cache to other operating systems exe-
cuting concurrently on virtualization platforms (resp. plat-
forms supporting stealth memory). The soundness proofs
are based on new theorems of independent interest, includ-
ing isolation theorems for virtualization platforms (resp. plat-
forms supporting stealth memory), and proofs that constant-
time implementations (resp. S-constant-time implementa-
tions) are non-interfering with respect to a strict information
ﬂow policy which disallows that control ﬂow and memory ac-
cesses depend on secrets. We formalize our results using the
Coq proof assistant and we demonstrate the eﬀectiveness of
our analyses on cryptographic implementations, including
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are not
made or distributed for proﬁt or commercial advantage and that copies bear
this notice and the full citation on the ﬁrst page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior speciﬁc permission and/or a fee. Request
permissions from permissions@acm.org.
Copyright 20XX ACM X-XXXXX-XX-X/XX/XX ...$15.00.
PolarSSL AES, DES and RC4, SHA256 and Salsa20.
Keywords
Non-interference, cache-based attacks, constant-time cryp-
tography, stealth memory, Coq
1.
INTRODUCTION
Cache-based attacks are side-channel attacks in which a
malicious party is able to obtain conﬁdential data through
observing cache accesses of programs. They are particularly
eﬀective in cloud-based environments, where hardware sup-
port is virtualized and shared among tenants. In such set-
tings, a malicious tenant can manage that an operating sys-
tem under its control co-resides with the operating system
which executes the program that the attacker targets. This
allows the attacker to share the cache with its victim and to
make ﬁne-grained observations about its own cache hits and
misses; using this knowledge, the attacker can then success-
fully retrieve conﬁdential data of the program. Cache-based
attacks are widely applicable, but are specially devastating
against cryptographic implementations that form the secu-
rity backbone of many Internet protocols (e.g. TLS) or
wireless protocols (e.g. WPA2). Known targets of cache-
based attacks include widely used implementations of AES,
DES, ECDSA and RC4.
Simple approaches for protecting oneself against cache-
based attacks are ﬂushing the cache on every context switch
and disabling the cache mechanism for critical computa-
tions. The ﬁrst one was formally analyzed in [11]. In addi-
tion, both approaches suﬀer from severe performance penal-
ties [17, 48].
Another approach is to build implementations that do not
leak information through the cache. One common strategy is
to make implementations constant-time 1, i.e. do not branch
on secrets and do not perform memory accesses that which
depend on secrets. There exist constant-time implemen-
tations of many cryptographic algorithms, including AES,
1The terminology is inherited from cryptography, where it is
generally used for source level programs that do not branch
on secrets and do not perform array accesses with indices
that depend on secrets. Because the property intends to
characterize the behavior of program executions on concrete
architectures, rather than in abstract operational models, we
focus on low-level languages, and on a variant of constant-
time expressed in terms of addresses (which consist of base
addresses plus oﬀsets) instead of arrays.
DES, RC4, SHA256, TEA, and Salsa20, and even RSA,
as well as general techniques for turning implementations
of cryptographic algorithms constant-time. However, and
quite astonishingly, there is no rigorous proof that constant-
time algorithms are protected against cache-based attacks
when executed concurrently on virtualization platforms with
shared cache. Moreover, many cryptographic implementa-
tions such as PolarSSL AES, DES, and RC4 make array
accesses that depend on secret keys and are not constant-
time.
A diﬀerent more permissive approach is to allow imple-
mentations that are not constant-time, but to deploy system-
level countermeasures that prevent an attacker from drawing
useful observations from the cache. Some of these mecha-
nisms are transparent to applications, but sacriﬁce perfor-
mance: instances include ﬂushing the cache at each context
switch [48] or randomizing its layout [50]. Other mechanisms
are not transparent, and must be used correctly, either via
APIs or via compilers that enforce their correct usage. One
lightweight such mechanism is stealth memory [29, 34]; in
contrast to many of its competitors, stealth memory can be
implemented in software, does not require any speciﬁc hard-
ware and does not incur a signiﬁcant performance overhead.
Informally, stealth memory enforces a locking mechanism
on a small set of cache lines, called stealth cache lines, saves
them into (protected) memory and restores them upon con-
text switches, thereby ensuring that entries stored in stealth
cache lines are never evicted, and do not leak information.
From an abstract perspective, memory accesses to stealth
addresses, i.e addresses that map to stealth cache lines, be-
come “hidden” and have no visible eﬀect. Thus, applica-
tions can perform memory accesses that depend on secrets
without revealing conﬁdential information, provided these
accesses are done on stealth addresses. This induces a re-
laxation of constant-time, which we call S-constant-time: an
implementation is S-constant-time if it does not branch on
secrets and only memory accesses to stealth addresses may
depend on secrets. Although early work on stealth memory
suggests that several prominent cryptographic implementa-
tions meet the requirements of S-constant-time, this class
has not been considered formally before, and in particular,
there is no rigorous security analysis of S-constant-time al-
gorithms, and no mechanism to ensure that assembly code
makes a correct usage of stealth addresses.
Our contributions. We undertake the ﬁrst rigorous study
of constant-time and S-constant-time implementations. We
prove that such implementations are protected against cache-
based attacks in virtualized platforms where their support-
ing operating system executes concurrently with other, po-
tentially malicious, operating systems. Moreover, we pro-
vide support for deploying constant-time or S-constant time
applications, in the form of type-based enforcement mech-
anisms on x86 implementations; the mechanisms are inte-
grated into CompCert, a realistic veriﬁed compiler for C [38].
Finally, we experimentally validate our approach on a set of
prominent cryptographic implementations. To achieve these
goals, we make the following contributions:
1. We deﬁne an analysis for checking if x86 applications
are constant-time. Our analysis is based on a type system
that simultaneously tracks aliasing and information ﬂow.
For convenience, we package our analysis as a certifying com-
piler for CompCert. Our certifying compiler takes as input
Example LoC CT SCT Stealth cache (KB)
Salsa20
SHA256
TEA
AES
Blowﬁsh
DES
RC4
Snow
X
1077 X
419
X
70
744
279
836
164
757
X
X
X
X
X
4
4
2
0.25
6
A check in the CT or SCT column respectively indicates
whether programs are constant-time or S-constant-time. For
the latter, the last column gives the amount of stealth cache
required to run the application. All constant-time applica-
tions are also S-constant-time with 0KB stealth cache.
Figure 1: Selected experimental results
a C program whose conﬁdential data is tagged with an an-
notation High, and transforms the program into annotated
x86 assembly code, which can be checked for constant-time.
2. We provide the ﬁrst formal proof that constant-time
programs are protected against cache-based attacks in vir-
tualization platforms. The proof contemplates a very strong
threat model with a malicious operating system that controls
the scheduler, executes concurrently with the operating sys-
tem on which the victim application runs, and can observe
how the shape of the cache evolves throughout execution.
3. As a ﬁrst key step in the proof, we prove that constant-
time programs is non-interfering with respect to an informa-
tion ﬂow policy which mandates that the control ﬂow and
the sequence of memory accesses during program execution
do not depend on secrets. The policy is captured using an
operational semantics of x86 programs where transitions are
labelled with their read and write eﬀects.
4. As a second key step in the proof, we prove isolation
between operating systems in virtualization platforms. The
proof is based on a model of virtualization that accounts
for virtual addresses, physical and machine addresses, mem-
ory mappings, page tables, TLBs, and cache, and provides
an operational semantics for a representative set of actions,
including reads and writes, allocation and deallocation, con-
text and mode switching, and hypercalls. The isolation the-
orem states that an adversary cannot distinguish between
two execution traces of the platform in which the victim op-
erating system performs two sequences of actions that have
the same visible eﬀects.
5. We extend our analysis and formal proofs to S-constant-
time. As a signiﬁcant contribution of the extension, we ob-
tain the ﬁrst rigorous security analysis of stealth memory.
6. We formalize our results in the Coq proof assistant
(over 50,000 lines of Coq). The formalization is based on
the ﬁrst formal model of stealth memory. The model is a
signiﬁcant development in itself (over 10,000 lines of Coq)
and is of independent interest.
7. We successfully evaluate the eﬀectiveness of our frame-
work on several cryptographic implementations, including
AES, DES, and RC4 from the PolarSSL library, and SHA256,
Salsa20. Figure 1 provides a selection of results.
Full version. Additional details are available in the full
version of the paper [12].
2. SETTING
Our ﬁrst step is to deﬁne static analyses for enforcing
constant-time (and variants) on x86 programs. Our anal-
ysis is built on top of CompCert [38], a formally veriﬁed,
optimizing C compiler that generates reasonably eﬃcient
assembly code for x86 platforms (as well as PowerPC and
ARM). In addition to being a signiﬁcant achievement on
its own, CompCert provides an excellent platform for devel-
oping veriﬁed static analyses. We take speciﬁc advantage
of two features of CompCert:
i. its memory model, which