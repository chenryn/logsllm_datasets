ing per PPI network. We find that PPI operators rapidly
churn through distribution pages, likely to avoid un-
wanted software warnings from Safe Browsing due to
an increasingly negative reputation. During the eight
months from June 1, 2015–January 7, 2016, we observed
191,372 distribution pages involved in hosting PPI down-
loaders. We estimate the lifetime of these pages by mea-
suring the time between the first client that reports a
download attempt to Safe Browsing and the last reported
download attempt, irrespective of Safe Browsing raising
a warning. We find the median lifetime of an Amonetize
distribution page is 7 hours, compared to 0.75 hours for
Outbrowse. These two stand in contrast to InstallMon-
etizer and OpenCandy, where distribution pages remain
operational for a median of 152 days and 220 days (the
entire monitoring window) respectively. This longer life-
time results in part from Safe Browsing not warning on
all OpenCandy installs as they do not fall under Google’s
unwanted software policy, and in part due to Outbrowse
and Amonetize controlling distribution pages, simplify-
ing the process of churning through domains.
6.4 Evasion & Cloaking
Even if PPI operators rapidly cycle through distribution
pages, there is a risk that Safe Browsing will scan and
detect the PPI downloader itself. We find anecdotal ev-
idence that PPI networks work to actively evade this
scanning process. For example, when Safe Browsing
first launched its unwanted software detection, it cov-
Site Category
Freeware & Shareware
Video Games
File Sharing & Hosting
Online Video
Operating Systems
Mobile Apps & Add-Ons
Hacking & Cracking
Photo & Video Software
Game Cheats & Hints
Antivirus & Malware
Other
Fraction of Sites
11.8%
10.6%
7.3%
7.0%
4.3%
3.7%
2.7%
2.3%
2.1%
1.9%
46.4%
Table 8: Categorization of the top 15,000 pages driving traffic
to PPI downloaders based on topic modeling.
ered only executable files. Shortly after, PPI networks
switched to distributing .zip compressed binaries to avoid
scanning. When Safe Browsing expanded its scanning
coverage, PPI networks moved to more esoteric com-
pression formats including .rar and .ace or doubly com-
pressed files. We also observed PPI networks exploiting
a limitation in Chrome, where files downloaded through
Flash were not subject to Safe Browsing scans. After
a recent Chrome patch to address this, PPI networks
switched to password protecting their compressed files,
providing instructions for victims on how to access the
contents. We provide screenshots of each of these tech-
niques in action in the Appendix. This arms race illus-
trates that PPI networks opt to actively circumvent user
protections rather than ceasing to distribute harmful un-
wanted software. This behavior likely stems from an in-
centive structure within PPI where remaining profitable
entails racing to the bottom of deceptive install tactics.
6.5 Promotional Tools
For affiliates that do not operate download portals or
peer to peer sharing sites, PPI resellers provide decep-
tive “promotional tools” that socially engineer web visi-
tors into running PPI downloaders. These tools fall into
four flavors: butterbars, ad banners, landing pages, and
content unlockers.
Butterbars: PPI resellers like NetCashRevenue provide
a JavaScript stub to website operators that generates a
yellow bar at the top of a page alerting a victim that their
“Flash player is out of date!”. This bar can either initiate
an auto-download upon visiting the page, or require a
victim to click. Either way, the victim receives a PPI
downloader.
Content Lockers: Content lockers present victims with
an enticing video, song, or PDF. In order to view this
content however, a victim must first install a “codec” that
USENIX Association  
25th USENIX Security Symposium  733
13
is in fact a PPI downloader. Resellers simplify this pro-
cess by providing a drop-in script that handles spoofing
a fake video player and codec alert.
Ad banners & Landing Pages: Resellers will provide
webmasters with ad banners or entire customized landing
pages that spoof popular software downloads including
uTorrent, Java, Flash, and Firefox that are in fact PPI
downloaders.
These techniques highlight that even if the software de-
livered by a PPI downloader appears benign, the distri-
bution practices of affiliates add an additional layer into
the determination of whether software is ultimately un-
wanted. Consequently, advertisers, publishers, and PPI
networks all bear responsibility for the current state of
commercial pay-per-install and its ties to unwanted soft-
ware.
7 Related Work
Blackmarket Pay-Per-Install: Our work is influenced
in part by prior explorations of the blackmarket pay-per-
install ecosystem that sells access to compromised hosts.
Industry reports initially qualitatively described these un-
derground markets as early as 2009 [10,33]. Caballero et
al. performed the first in-depth investigation by infiltrat-
ing the markets and tracking the malware families pay-
ing for installs [4]. Prices per install ranged from $0.02–
$0.18, an order of magnitude less than the prices we ob-
served for commercial PPI. These low rates make black-
market PPI a better bargain for malware distribution over
commercial PPI, though evidence exists of cross-over,
such as the commercial PPI network iBario recently dis-
tributing Sefnit [35]. Other studies have explored the re-
lationships between blackmarket PPI networks and par-
ticular malware families [23, 30]. However, all of these
studies were limited to establishing a link between the
most notorious malware families and their simultane-
ous distribution in blackmarket PPI; none determined
whether PPI was the primary distribution mechanism (as
opposed to social engineering or drive-bys). Our study
went one step further, establishing the volume of weekly
download attempts to commercial PPI downloaders.
Unwanted Software: Unwanted software is not a new
threat.
In 2004, Saroiu et al. found at least 5% of
computers connected to the University of Washington’s
campus network were infected with some form of spy-
ware [32].
In 2005, Edelman tracked multiple pur-
ported spyware and adware companies including Claria,
WhenU, and 180Solutions to identify their deceptive in-
stallation methods and their monetization model [11,12].
More recently, Thomas et al. found that 5% of unique
IPs accessing Google websites exhibited symptoms of
ad injection [34], while Jagpal et al. identified millions
of browsers laden unwanted extensions performing ad
injection, search hijacking, and user tracking [17]. Re-
searchers have also explored some of the distribution
techniques involved. In 2006, Moshchuk et al. crawled
and analyzed 21,200 executables from the Internet and
found 13.4% contained spyware [25]. Kammerstetter et
al. repeated a similar study limited to sites purportedly
hosting cracks and key generators, though they found the
majority bundled malware, not unwanted software [19].
Our work explored the commercialization of these dis-
tribution practices as simplified by commercial pay-per-
install affiliate networks.
More recently, Kotzias et al. explored code-signing
techniques of unwanted software that may lead to re-
duced detection [21]. We rely on a similar technique
for clustering advertiser binaries, though we note that
only 58% of the 1,809 unique offer digests we identi-
fied contained a signature; similarly, only 50% of 1.5
million PPI downloaders distributed by publishers con-
tained a signature. This may lead to a bias in analysis
that focus solely on signed unwanted software. Contem-
poraneous with our own study, Kotzias et al. explored
the download graph of unwanted software via Syman-
tec’s WINE database and identified 54% of users were
affected by unwanted software [20]. Similarly, Nelms et
al. explored the role of deceptive advertising in enticing
victims into running PPI downloaders [26]. Combined
with our own work, these three studies present a broad
perspective of the number of users affected by unwanted
software, an insider perspective of how advertisers, af-
filiate networks, and publishers coordinate, and the de-
ceptive practices used to entice downloads via advertise-
ments or free software sites.
8 Conclusion
Our work presented the first deep dive into the busi-
ness practices underpinning the commercial pay-per-
install ecosystem that sells access to user systems for
prices ranging from $0.10–$1.50 per install. Our study
illustrated that PPI affiliate networks supported and dis-
tributed unwanted software ranging from ad injectors,
browser settings hijackers, and system utilities—many
of the top families that victims proactively purge from
their machines with the aid of the Chrome Cleanup Tool.
In aggregate, the PPI ecosystem drove over 60 million
weekly download attempts, with tens of million installs
detected in the last year. As anti-virus and browsers
move to integrate signatures of unwanted software into
their malware removal tools and warning systems, we
showed evidence that commercial PPI networks actively
attempted to evade user protections in order to sustain
their business model. These practices demonstrate that
734  25th USENIX Security Symposium 
USENIX Association
14
PPI affiliate networks operated with impunity towards
the interests of users, relying on a user consent dialogue
to justify their actions—though their behaviors may have
changed since the conclusion of our study. We hope that
by documenting these behaviors the security community
will recognize unwanted software as a major threat—one
that affects three times as many users as malware.
In response to deceptive behaviors within the com-
mercial PPI ecosystem, members of the anti-virus in-
dustry, software platforms, and parties profiting from
commercial PPI have formed the Clean Software Al-
liance [6]. The consortium aims to “champions sus-
tainable, consumer-friendly practices within the software
distribution ecosystem.” This includes defining indus-
try standards around deceptive web advertisements, user
consent, software functionality disclosure, and software
uninstallation. These goals reflect a fundamental chal-
lenge of protecting users from unwanted software:
it
takes only one deceptive party in a chain of web adver-
tisements, publishers, affiliate networks, and advertisers
for abuse to manifest.
It remains to be seen whether
the approach taken by the Clean Software Alliance will
yield the right balance between software monetization
and user advocacy.
Acknowledgments
We thank the Safe Browsing and Chrome Security
team for their insightful feedback in the development
of our study on unwanted software and pay-per-install.
This work was supported in part by the National Sci-
ence Foundation under grants 1619620 and by a gift from
Google. Any opinions, findings, and conclusions or rec-
ommendations expressed in this material are those of the
authors and do not necessarily reflect the views of the
sponsors.
References
[1] AVG. Become an AVG affiliate. http://www.avg.com/
affiliate/us-en/become-an-avg-affiliate,
2016.
[2] Ulrich Bayer, Paolo Milani Comparetti, Clemens Hlauschek,
Christopher Kruegel, and Engin Kirda. Scalable, behavior-based
malware clustering.
In Proceedings of the Network and Dis-
tributed System Security Conference, 2009.
[3] Business Wire.
Perion partners with lenovo to create
http://www.businesswire.
lenovo browser guard.
com/news/home/20140618005930/en/Perion-
Partners-Lenovo-Create-Lenovo-Browser-
Guard, 2014.
[4] Juan Caballero, Chris Grier, Christian Kreibich, and Vern Paxson.
Measuring pay-per-install: The commoditization of malware dis-
tribution.
In Proceedings of the USENIX Security Symposium,
2011.
[5] Chrome. Chrome cleanup tool. https://www.google.
com/chrome/cleanup-tool/, 2016.
[6] Clean Software Alliance. Sustainable, consumer-friendly prac-
tices. http://www.cs-alliance.org/, 2016.
[7] Comodo. Consumer affiliate. https://www.comodo.com/
partners/consumer-affiliate.php, 2016.
[8] CrunchBase.
InstallMonetizer.
https://
www.crunchbase.com/organization/
installmonetizer#/entity, 2016.
[9] CrunchBase. OpenCandy. https://www.crunchbase.
com/product/opencandy#/entity, 2016.
[10] Nishant Doshi, Ashwin Athalye, and Eric Chien.
Pay-
The New Malware Distribution Network.
Per-Install
https://www.symantec.com/content/en/
us/enterprise/media/security_response/
whitepapers/pay_per_install.pdf, 2010.
[11] Ben Edelman.
Claria’s misleading installation methods -
ezone.com. http://www.benedelman.org/spyware/
installations/ezone-claria/, 2005.
[12] Ben Edelman. Pushing spyware through search. http://www.
benedelman.org/news/012606-1.html, 2006.
[13] gensim.
models.ldamodel – Latent Dirichlet Allocation.
https://radimrehurek.com/gensim/models/
ldamodel.html, 2015.
[14] Chris Grier, Lucas Ballard, Juan Caballero, Neha Chachra, Chris-
tian J Dietrich, Kirill Levchenko, Panayiotis Mavrommatis, Da-
mon McCoy, Antonio Nappa, Andreas Pitsillidis, et al. Manu-
facturing compromise: the emergence of exploit-as-a-service. In
Proceedings of the Conference on Computer and Communica-
tions Security, 2012.
[15] Orr Hirschauge.
valley’.
Conduit diversifies away from ’down-
load
http://www.wsj.com/articles/
SB10001424052702304547704579563281761548844,
2014.
[16] HowToGeek.
Here’s what happens when you install
the
http://www.howtogeek.
top 10 download.com apps.
com/198622/heres-what-happens-when-you-
install-the-top-10-download.com-apps/, 2014.
[17] Nav Jagpal, Eric Dingle, Jean-Philippe Gravel, Panayiotis
Mavrommatis, Niels Provos, Moheeb Abu Rajab, and Kurt
Thomas. Trends and lessons from three years fighting malicious
extensions. In Proceedings of the USENIX Security Symposium,
2015.
[18] Java. What are the ask toolbars? https://www.java.com/
en/download/faq/ask_toolbar.xml, 2015.
[19] Markus Kammerstetter, Christian Platzer, and Gilbert Won-
dracek. Vanity, cracks and malware: Insights into the anti-copy
protection ecosystem. In Proceedings of the ACM Conference on
Computer and Communications Security, 2012.
[20] Platon Kotzias, Leyla Bilge, and Juan Caballero. Measuring
PUP Prevalence and PUP Distribution through Pay-Per-Install
Services.
In Proceedings of the USENIX Security Symposium,
2016.
[21] Platon Kotzias, Srdjan Matic, Richard Rivera, and Juan Ca-
ballero. Certified PUP: Abuse in Authenticode Code Signing.
In Proceedings of the 22nd ACM Conference on Computer and
Communication Security, 2015.
[22] Christian Kreibich, Nicholas Weaver, Chris Kanich, Weidong
Cui, and Vern Paxson. Gq: Practical containment for measuring
modern malware systems. In Proceedings of the ACM SIGCOM
Internet Measurement Conference, 2011.
[23] Bum Jun Kwon, Jayanta Mondal, Jiyong Jang, Leyla Bilge, and
Tudor Dumitras. The Dropper Effect: Insights into Malware Dis-
tribution with Downloader Graph Analytics. In Proceedings of
the 22Nd ACM SIGSAC Conference on Computer and Communi-
cations Security, CCS ’15, pages 1118–1129, 2015.
USENIX Association  
25th USENIX Security Symposium  735
15
Appendix
[24] LavaSoft. LavaSoft affiliate program. http://affiliates.
lavasoft.com/, 2016.
[25] Alexander Moshchuk, Tanya Bragin, Steven D. Gribble, and
Henry M. Levy. A crawler-based study of spyware in the web.
In Proceedings of the Network and Distributed System Security
Symposium, NDSS 2006, San Diego, California, USA, 2006.
[26] Terry Nelms, Roberto Perdisci, Manos Antonakakis, and Mus-
taque Ahamad. Towards Measuring and Mitigating Social En-
gineering Malware Download Attacks.
In Proceedings of the
USENIX Security Symposium, 2016.
[27] Niels Provos.
All
about
safe browsing.
http:
//blog.chromium.org/2012/01/all-about-
safe-browsing.html, 2012.
[28] Moheeb Abu Rajab. Year one: progress in the fight against
unwanted software. https://googleonlinesecurity.
blogspot.com/2015/12/year-one-progress-in-
fight-against.html, 2015.
[29] Moheeb Abu Rajab, Lucas Ballard, No´e Lutz, Panayiotis
Mavrommatis, and Niels Provos. Camp: Content-agnostic mal-
ware protection. In Proceedings of the Network and Distributed
System Security Conference, 2013.
[30] Christian Rossow, Christian Dietrich, and Herbert Bos. Large-
scale analysis of malware downloaders. In Detection of Intrusions
and Malware, and Vulnerability Assessment: 9th International
Conference, DIMVA 2012, Heraklion, Crete, Greece, July 26-27,
2012, Revised Selected Papers, pages 42–61, 2013.
[31] Ben Fox Rubin.
Perion sees soaring 2014 earnings follow-
ing merger.
http://www.wsj.com/news/articles/
SB10001424052702304815004579417252707242262,
2014.
[32] Stefan Saroiu, Steven D. Gribble, and Henry M. Levy. Measure-
ment and analysis of spywave in a university environment.
In
Proceedings of the 1st Conference on Symposium on Networked
Systems Design and Implementation - Volume 1, NSDI’04, pages
11–11, 2004.
[33] Kevin Stevens. The Underground Economy of the Pay-Per-
Install (PPI) Business. http://www.secureworks.com/
cyber-threat-intelligence/threats/ppi/, 2009.
[34] Kurt Thomas, Elie Bursztein, Chris Grier, Grant Ho, Nav Jagpal,
Alexandros Kapravelos, Damon McCoy, Antonio Nappa, Vern
Paxson, Paul Pearce, Niels Provos, and Moheeb Abu Rajab. Ad
injection at scale: Assessing deceptive advertisement modifica-
tions.
In Proceedings of the IEEE Symposium on Security and
Privacy, 2015.
[35] TrendMicro.
On the Actors Behind MEVADE/SEFNIT.
http://www.trendmicro.com/cloud-content/us/
pdfs/security-intelligence/white-papers/
wp-on-the-actors-behind-mevade-sefnit.pdf,
2014.
[36] VirusTotal. VirusTotal. https://www.virustotal.com/,
2016.
[37] China Internet Watch. Qihoo 360 launched its own affiliate
network.
http://www.chinainternetwatch.com/
7960/qihoo-360-launched-its-own-affiliate-
network/, 2014.
[38] Carsten Willems, Thorsten Holz, and Felix Freiling. Toward au-
tomated dynamic malware analysis using cwsandbox.
In Pro-
ceedings of the IEEE Symposium on Security and Privacy, 2007.
736  25th USENIX Security Symposium 
USENIX Association
16
USENIX Association  
25th USENIX Security Symposium  737
(a)Browsingsettingshijackerthatoverridesavictim’sdefaultsearch,supplyingthetraffictoBing.Thesearchpagealsodisplaysadsformoreunwantedsoftware.(b)Scarewarethatscansavictim’smachineandreportsthousandsofurgentsystemhealthissues.Fixingtheserequiresthatvictimspayasubscriptionfee.(c)Adinjectorthatinsertsadvertisementsintopagesavictimvisits.Inthiscase,theadsdirecttomoreunwantedsoftware.Sampleofuserexperiencesforthesoftwarebundledviapay-per-install.17738  25th USENIX Security Symposium 
USENIX Association
(a)PPInetworkspreviouslyinstructedvictimstodownloadapplicationsviaaFlashdialogueinordertoabuseabuginChromethatpreventedSafeBrowsingfrominspectingthedownloadedfile.(b)PPInetworkpreviouslyinstructedvictimstodownloadpassword-protectedcompressedexecutablesinordertopreventinspectionofthedownloadedfilebySafeBrowsing.SampleofnowdefuncttechniquesemployedbyPPInetworkstodeliverPPIdownloaderswhileevadingSafeBrowsing.18