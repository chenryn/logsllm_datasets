# Database Compatibility for Oracle® Developers
## Built-in Package Guide
### EDB Postgres™ Advanced Server 11
**Publication Date:** February 11, 2019  
**Publisher:** EnterpriseDB® Corporation  
**Copyright:** © 2007 - 2019 EnterpriseDB Corporation. All rights reserved.  
**Address:** 34 Crosby Drive, Suite 201, Bedford, MA 01730, USA  
**Contact:**  
- **Phone:** +1 781 357 3390  
- **Fax:** +1 978 467 1307  
- **Email:** [PI:EMAIL](mailto:PI:EMAIL)  
- **Website:** [www.enterprisedb.com](http://www.enterprisedb.com)

---

## Table of Contents
1. **Introduction**  
   1.1 What’s New  
   1.2 Typographical Conventions Used in this Guide
2. **Packages**  
   2.1 Package Components  
     2.1.1 Package Specification Syntax  
     2.1.2 Package Body Syntax  
   2.2 Creating Packages  
     2.2.1 Creating the Package Specification  
     2.2.2 Creating the Package Body  
   2.3 Referencing a Package  
   2.4 Using Packages With User-Defined Types  
   2.5 Dropping a Package
3. **Built-In Packages**  
   3.1 DBMS_ALERT  
   3.2 DBMS_AQ  
   3.3 DBMS_AQADM  
   3.4 DBMS_CRYPTO  
   3.5 DBMS_JOB  
   3.6 DBMS_LOB  
   3.7 DBMS_LOCK  
   3.8 DBMS_MVIEW  
   3.9 DBMS_OUTPUT  
   3.10 DBMS_PIPE  
   3.11 DBMS_PROFILER  
   3.12 DBMS_RANDOM  
   3.13 DBMS_REDACT  
   3.14 DBMS_RLS  
   3.15 DBMS_SCHEDULER  
   3.16 DBMS_SESSION  
   3.17 DBMS_SQL  
   3.18 DBMS_UTILITY  
   3.19 UTL_ENCODE  
   3.20 UTL_FILE  
   3.21 UTL_HTTP  
   3.22 UTL_MAIL  
   3.23 UTL_RAW  
   3.24 UTL_SMTP  
   3.25 UTL_URL
4. **Acknowledgements**

---

## 1. Introduction
Database compatibility for Oracle means that an application can run in both an Oracle environment and the EDB Postgres Advanced Server (Advanced Server) environment with minimal or no changes to the application code. This guide focuses on the package support provided by Advanced Server.

For more information about other compatibility features offered by Advanced Server, please refer to the complete set of Advanced Server guides available at:
[https://www.enterprisedb.com/resources/product-documentation](https://www.enterprisedb.com/resources/product-documentation)

---

### 1.1 What’s New
The following database compatibility for Oracle features have been added to Advanced Server 10 to create Advanced Server 11:

- **SPL Standalone Procedure Overloading:** Advanced Server now supports overloading standalone procedures in SPL. Note that this feature is not compatible with Oracle databases. For more information, see the *Database Compatibility for Oracle Developer’s Guide*.
- **PRAGMA AUTONOMOUS_TRANSACTION Directive:** Advanced Server now supports the `PRAGMA AUTONOMOUS_TRANSACTION` directive within any SPL block to provide autonomous transaction capability. For more information, see the *Database Compatibility for Oracle Developer’s Guide*. Affected SPL programs are discussed in Section 2.1.2.

---

### 1.2 Typographical Conventions Used in this Guide
Certain typographical conventions are used in this manual to clarify the meaning and usage of various commands, statements, programs, and examples. This section provides a summary of these conventions.

- **Italic Font:** Introduces a new term, typically in the sentence that defines it for the first time.
- **Fixed-Width (Mono-Spaced) Font:** Used for terms that must be given literally, such as SQL commands, specific table and column names used in the examples, programming language keywords, etc. For example, `SELECT * FROM emp;`
- **Italic Fixed-Width Font:** Used for terms for which the user must substitute values in actual usage. For example, `DELETE FROM table_name;`
- **Vertical Pipe (|):** Denotes a choice between the terms on either side of the pipe. A vertical pipe is used to separate two or more alternative terms within square brackets (optional choices) or braces (one mandatory choice).
- **Square Brackets [ ]:** Denote that one or none of the enclosed term(s) may be substituted. For example, `[ a | b ]`, means choose one of “a” or “b” or neither of the two.
- **Braces { }:** Denote that exactly one of the enclosed alternatives must be specified. For example, `{ a | b }`, means exactly one of “a” or “b” must be specified.
- **Ellipses (...):** Denote that the preceding term may be repeated. For example, `[ a | b ] ...` means that you may have the sequence, “b a a b a”.

---

## 2. Packages
This chapter discusses the concept of packages in Advanced Server. A package is a named collection of functions, procedures, variables, cursors, user-defined record types, and records that are referenced using a common qualifier—the package identifier.

### 2.1 Package Components
Packages consist of two main components:

- **Package Specification:** This is the public interface, containing elements that can be referenced outside the package. It declares all database objects that are part of the package.
- **Package Body:** This contains the actual implementation of all the database objects declared within the package specification. The body includes implementation details and private declarations that are invisible to the application.

#### 2.1.1 Package Specification Syntax
The package specification defines the user interface for a package (the API). The specification lists the functions, procedures, types, exceptions, and cursors that are visible to a user of the package.

The syntax used to define the interface for a package is:

```sql
CREATE [ OR REPLACE ] PACKAGE package_name
[ authorization_clause ]
{ IS | AS }
[ declaration; ] ...
[ procedure_or_function_declaration ] ...
```

--- 

This structure and formatting should make the document more organized, clear, and professional. If you need further adjustments or additional sections, please let me know!