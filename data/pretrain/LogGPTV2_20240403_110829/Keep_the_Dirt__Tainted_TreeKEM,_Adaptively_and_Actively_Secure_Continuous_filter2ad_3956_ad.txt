groups secrets independent). In particular, we deﬁne a state
as the triple γ(ID) = (M,T ,H), where M denotes the set
of group members (i.e. ID’s that are part of the group); T
denotes a binary tree as above, with each group member’s
their credential associated to a leaf node; and H denotes the
hash of the group transcript so far, to ensure consistency. Each
user also has a, typically empty, pending state γ(cid:48)(ID) which
stores the updated group state resulting from the last issued
group operation while they wait for conﬁrmation.
As mentioned, a user will generally not have knowledge of
the secret keys associated to all tree nodes. However, if they
add or remove parties, they will potentially gain knowledge of
secret keys outside their path. We observe that this will not
be a problem as long as we have a mechanism to keep track
of those nodes and refresh them when necessary, towards this
end we introduce the concept of tainting.
7For efﬁciency reasons one could use a Merkle-Damg˚ard hash so that from
the hash of a (potentially long) string T we can efﬁciently compute the hash
of T concatenated with a new operation t.
a) Tainting.: Whenever party IDi refreshes a node not
lying on their path to the root, that node becomes tainted by
IDi. Whenever a node is tainted by a party IDi, that party has
potentially had knowledge of its current secret in the past. So,
if IDi was corrupted in the past, the secrecy of that value is
considered compromised (even if IDi deleted that value right
away and is no longer compromised). Even worse, all values
that were encrypted to that node are compromised too. We will
assign a tainter ID to all nodes. This can be empty, i.e. the node
is untainted, or corresponds to a single party’s ID, that who
last generated this node’s secret but is not supposed to know
it. The tainted ID of a node is determined by the following
simple rule: after ID issues an operation, all refreshed nodes
on ID’s path become untainted; in turn, all refreshed nodes not
on ID’s path become tainted by ID.
b) Hierarchical derivation of updates.: When refreshing
a whole path we sample a seed ∆0 and derive all the secrets
for that path from it. This way, we reduce the number of
decryptions needed to process the update, as parties only need
to recover the seed for the “lowest” node that concerns them,
and then can derive the rest locally. To derive the different
new secrets we follow the speciﬁcation of TreeKEMv9 [6].
Essentially, we consider a hash function H, ﬁx two tags x1 and
x2 and consider the two hash functions H1, H2 with Hi(·) =
H(·, xi). Together with a Gen function that outputs a secret-
public key pair, we derive the keys for the nodes as∆i+1 :=
H1(∆i) and (ski, pki) ← Gen(H2(∆i)) where ∆i is the seed
for the ith node (the leaf being the 0th node, its child the 1st
etc.) on the path and (ski, pki) its new key pair. For the proof
in the standard model we only require Hi to be pseudorandom
functions, with ∆i the key and xi the input.
With the introduction of tainting, it is no longer the case that
all nodes to be refreshed lie on a path. Hence, we partition
the set of all the nodes to be refreshed into paths and use
a different seed for each path. Any unambiguous ordered
optimal partition will sufﬁce. The only condition required is
that the updating of paths is done in a particular common order
that allows for encryptions to to-be-refreshed nodes to be done
under the respective updated public key (one cannot hope for
PCS otherwise). An example is provided in the appendix.
Let us stress that a party processing an update involving
tainted nodes might need to retrieve and decrypt more than
one encrypted seeds, as the refreshed nodes on its path might
not all be derived hierarchically. Nonetheless, party needs to
decrypt at most log n ciphertexts in the worst case.
C. TTKEM Dynamics
Whenever a user IDi wants to perform a group operation,
she will generate the appropriate Initialize, Update, Add
or Remove message, store the updated state resulting from
processing such message in γ(cid:48), and send the appropriate
information to the delivery server, which will then respond
with a conﬁrm or reject, prompting IDi to move to state γ(cid:48)
(i.e. set γ ← γ(cid:48)) or to delete γ(cid:48) respectively. If the (honest)
delivery server conﬁrms an operation, it will also deliver it to
all the group members, who will process it and update their
states accordingly. Messages should contain the identity of the
sender, the operation type, encryptions of the new seeds, any
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:47 UTC from IEEE Xplore.  Restrictions apply. 
274
operation issued by himself, he updates the current state γ to
γ(cid:48) or simply deletes γ(cid:48), respectively
D. Comparison with Blanking
In terms of security there is little difference between what
is achieved using tainting and using blanking. Updates have
the same function: they refresh all known secrets, allowing for
FS and PCS through essentially the same mechanism in both
approaches. However, as mentioned before, tainting seems to
be a more natural approach: it maintains the desired tree struc-
ture, and its bookkeeping method gives us a more complete
intuition of the security of the tree. It also corresponds to a
more ﬂexible framework: since blanking simply forbids parties
to know secrets outside of their path, it leaves little ﬂexibility
for how to handle the init phase.
With regards to efﬁciency, the picture is more complicated.
TTKEM and TreeKEM9 are incomparable in the sense that
there exist sequences of operations where either one or the
other is more efﬁcient. Thus, which one is to be preferred de-
pends on the distribution of operation sequences. We observe
that there are two major differences in how blank and tainted
nodes affect efﬁciency. The ﬁrst one is in the set of affected
users: a blank node degrades the efﬁciency of any user whose
copath contains the blank. Conversely, a tainted node affects
only one user; that who tainted it, but on the down side, it
does so no matter where in the tree this tainted node is. The
second difference is the healing time: to “unblank” a node v
it sufﬁces that some user assigned to a leaf in the tree rooted
at v refreshes it (thereby overwriting the blank with a fresh
key). However, to “untaint” v, simply overwriting it this way
is necessary but not sufﬁcient. In addition, it must also hold
that no other node in the tree rooted at v is tainted.
Thus,
intuitively,
in settings where the tendency is for
Adds and Remove operations (i.e. those that produce blanks
or taintings) to be performed by a small subset of group
members it is more efﬁcient to use the tainting approach.
Indeed, only Update operations done by that subset of users
will have a higher cost. As mentioned in the introduction, such
a setting can arise quite naturally in practice – e.g. when group
membership is managed by a small number of administrators.
To test this, we ran simulations comparing the number of
ciphertexts (cost) users need to compute on average as a conse-
quence of performing Updates, Adds and Removes. Ideally, we
would like to sample a sequence of group operations, execute
them in both protocols and compare the total cost. However,
this seems infeasible: in TreeKEM operations are collected
into Commits, whereas in TTKEM these are applied one by
one, separately. Hence, we compared TTKEM (referred to as
tainted in the graphs) against two different simpliﬁed versions
of TreeKEM, between which real TreeKEM lies efﬁciency-
wise. The ﬁrst version (TKEM), more efﬁcient than actual
TreeKEM, ignores Commits and just executes operations one
by one, without the Update that would follow every Commit.
The second version (TKEM commit), less efﬁcient than the
real TreeKEM, enforces that every operation is committed
separately, essentially performing an extra Update operation
after every Add or Remove.
9We compare TTKEM with the most recent version TreeKEMv9.
Fig. 2: Path partition resulting from an update by Charlie (3rd leaf node),
with nodes tainted by him shown in black. To process it the grey node must
be updated before the green path and the blue path before Charlie’s (in red).
new public keys, and a hash of the transcript so far, ensuring
consistency. A more detailed description, as well as pseudo-
code for the distinct operations is presented in B1.
a) Initialize.: To create a new group with parties M =
{ID1, . . . , IDn}, a user ID1 generates a new tree T , where the
leaves have associated the init keys corresponding to the group
members. The group creator then samples new key pairs for all
the other nodes in T (optimizing with hierarchical derivation)
and crafts welcome messages for each party. These welcome
messages should include an encryption of the seed that allows
the computation of the keys of the appropriate path, together
with M and the public part of T .
b) Add.: To add a new member IDj to the group, IDi
identiﬁes a free spot for them, hashes her secret key together
with some freshly sampled randomness to obtain a seed ∆8,
and derives seeds for the nodes along the path to the root.
She then encrypts the new seeds to all the nodes in the co-
path (one ciphertext per node sufﬁces given the hierarchical
derivation) and sends them over together with the identity IDj
of the added party. IDi will also craft a welcome message for
the added party containing an encryption of the appropriate
seed, M, H and the public part of T .
c) Update.: To perform an Update, a user computes a
path partition for the set nodes not on her path that need to be
refreshed (nodes tainted or with a tainted ancestor), samples
a seed per such path, plus a seed for their path, and derives
the new key-pairs for each node, as described above. She then
encrypts the secret keys under the appropriate public keys in
the copaths and sends this information to the server.
d) Remove.: To remove IDj, user IDi performs an Update
as if it was IDj, refreshing all nodes in IDj’s path to the root,
as well as all her tainted nodes (which will become tainted
by IDi after the removal). Note that a user cannot remove
itself. Instead, we imagine a user could request for someone
to remove her and delete her state.
e) Process.: When a user receives a protocol message
T, it identiﬁes which kind of message it is and performs
the appropriate update of their state, by updating the list of
participants if necessary, overwriting any keys, and updating
the tainted ID’s. If it is a conﬁrm or a reject, i.e. it was an
8This way the new keys will be secure against an adversary that does
not have either knowledge of IDi’s secret key or control/knowledge of the
randomness used.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:47 UTC from IEEE Xplore.  Restrictions apply. 
275
We simulated groups of sizes between 23 and 215 members.
Trees of size 2i were initialized with 2i−1 members and
sequences of 10 ∗ 2i Update/Remove/Add operations were
sampled according to a 8 : 1 : 1 ratio. One would expect
for many more Updates than Add/Removes to take place; but
also, the more common updates are, the closer that efﬁciency
is going to be to that of na¨ıve TreeKEM for both TreeKEM
and TTKEM. Thus, this seems a reasonable ratio that also
highlights the differences between the protocols - it is also
the ratio used by R. Barnes in the simulation of TreeKEM
with blanking posted in the IETF MLS mailing list10. We test
two different scenarios. In the ﬁrst one we limit the ability
of adding and removing parties to a small subset of users, the
administrators. In the second, we make no assumption on who
performs Adds and Removes and sample the authors of these
uniformly at random.
To simulate the administrator setting (ﬁgures 3, 4 and
5), we set a small (1 per group in groups of size less tan
128 and 1 per every 64 users in bigger groups) random set
of users to be administrators. Adds and Removes are then
performed by one of those administrators sampled uniformly
at random. The removed users, as well as the authors of the
updates were also sampled uniformly at random. Figures 3
and 4 illustrate that TTKEM allows for an interesting trade-
off, where non-administrators enjoy more efﬁcient Updates at
the expense of potentially more work for administrators. This
would be favourable in settings where administrators have
more bandwidth or computational power. When considering
the average cost incurred by group member, admins or non-
admins (ﬁgure 5), all three protocol perform similarly for
smaller groups, with TTKEM behaving better asymptotically.
In the second scenario (ﬁgures 6 and 7), where Adds
and Removes are performed by users sampled uniformly,
the results are similar: all protocols perform comparably on
smaller groups, with TTKEM behaving more efﬁciently on
larger groups. Here, we distinguish two further situations
depending on the distribution on Update authors (or updaters
for short). Figure 6 shows the results of sampling updaters
uniformly at random. This would reﬂect scenarios where
Updates are executed periodically, as in e.g. devices that are
always online and where a higher level policy stipulates to
update daily. In contrast, ﬁgure 7 shows the results of sampling
updaters following a Zipf distribution. The Zipf distribution is
used widely to model human activity in interactive settings.
Recently, a study on messages sent on internet communities
shows that the growth of messages sent per individual over
time follows Gibrat’s law [22]. This in turn implies that the
distribution of the number of messages sent per individual at
a point in time converges asymptotically to a Zipf distribution
[23]. Thus, the latter scenario models a setting where Updates
are correlated with the level of activity of the users, e.g. when
the devices used are not always online.
Overall, while we cannot say TTKEM will be more efﬁcient
than TreeKEM in every setting, it is clear that it constitutes
a promising CGKA candidate, which can bring efﬁciency
10[MLS] Cost of the partial-tree approach. Richard Barnes {PI:EMAIL}
https://mailarchive.ietf.org/arch/msg/mls/hhl0q-
October
01
OgnGUJS1djdmH1JBMqOSY/
2018
improvements over TreeKEM in different realistic scenarios.
Moreover, we would also like to point out that to improve
the efﬁciency of these protocols, different policies can be
implemented, such as strategically placing users on the tree:
e.g. distributing administrators or frequent updaters closer to
the right side of the tree, where more new users will be added.
III. SECURITY
We will prove security for TTKEM against fully adaptive,
partially active adversaries, even when group members are in
inconsistent states. In section III-A we present the security
game we consider and in section III-B we present a simple
predicate which allows to determine for which group keys
we can guarantee security. The latter predicate incorporates
the intuition that Updates allow a party to heal her state.
It should be noted that we consider initialization keys as
representing identities, as otherwise we would neglect some
other cases which we would intuitively also consider secure,
such as removing a corrupted party and adding them again
once uncorrupted (this is secure per our predicate as they
would be treated as a new identity, generated at the time the
init key was).
Throughout our proofs, we only consider a single challenge
per game for simplicity; a standard hybrid argument allows
us to extend security to multiple challenges, with a loss
linear in the number of challenges. In order to simulate extra
challenges, an extra oracle that reveals group keys would be
needed, but this would have no effect on the security proof -
in particular GSD-like proofs already allow for the corruption
of individual keys.
A. Security Model
Deﬁnition 2 (Asynchronous CGKA Security). The security for
CGKA is modelled using a game between a challenger C and
an adversary A. At the beginning of the game, the adversary
queries create-group(G) and the challenger initialises the
group G with identities (ID1, . . . , ID(cid:96)). The adversary A can
then make a sequence of queries, enumerated below, in any
arbitrary order. On a high level, add-user and remove-user
allow the adversary to control the structure of the group,
whereas the queries conﬁrm and process allow it to control
the scheduling of the messages. The query update simulates
the refreshing of a local state. Finally, start-corrupt and
end-corrupt enable the adversary to corrupt the users for
a time period. The entire state (old and pending) and random
coins of a corrupted user are leaked to the adversary during
this period.