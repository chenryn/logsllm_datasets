// }
// return polygon;
// }
public Polygon getPolygon(Geometry geom, boolean setSrsName) {
Polygon polygon = null;
if (geom != null && geom.getType() == Geometry.POLYGON) {
polygon = new PolygonImpl();
int dimensions = geom.getDimension();
if (geom.getValue() == null)
34
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
return null;
org.postgis.Polygon polyGeom = (org.postgis.Polygon) geom;
for (int i = 0; i  values = new ArrayList();
if (dimensions == 2)
for (int j = 0; j  0) {
obj.write(buf, 0, s);
tl = tl + s;
}
// Close the large object
obj.close();
*/
// psInsert.setLong(1, oid); // for large object
psInsert.setBinaryStream(1, in, in.available()); // for bytea
psInsert.setLong(2, xlink.getId());
psInsert.execute();
in.close()
externalFileConn.commit();
return true;
de.tub.citydb.modules.citygml.importer.database.xlink.resolver.XlinkLibraryObject
74 // psPrepare = externalFileConn.prepareStatement(
// "update IMPLICIT_GEOMETRY set LIBRARY_OBJECT=empty_blob() where ID=?");
// psSelect = externalFileConn.prepareStatement(
// "select LIBRARY_OBJECT from IMPLICIT_GEOMETRY where ID=? for update");
psInsert = externalFileConn.prepareStatement(
"update IMPLICIT_GEOMETRY set LIBRARY_OBJECT=? where ID=?");
80+ // // first step: prepare BLOB
// psPrepare.setLong(1, xlink.getId());
// psPrepare.executeUpdate();
//
// // second step: get prepared BLOB to fill it with contents
// psSelect.setLong(1, xlink.getId());
// OracleResultSet rs = (OracleResultSet)psSelect.executeQuery();
// if (!rs.next()) {
// LOG.error("Database error while importing library object: " +
objectFileName);
//
// rs.close();
// externalFileConn.rollback();
// return false;
// }
//
// BLOB blob = rs.getBLOB(1);
// rs.close();
126+ // OutputStream out = blob.setBinaryStream(1L);
//
// int size = blob.getBufferSize();
40
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
// byte[] buffer = new byte[size];
// int length = -1;
//
// while ((length = in.read(buffer)) != -1)
// out.write(buffer, 0, length);
//
// in.close();
// blob.close();
// out.close();
// externalFileConn.commit();
// return true;
/* // insert large object (OID) data type into database
// All LargeObject API calls must be within a transaction block
externalFileConn.setAutoCommit(false);
// Get the Large Object Manager to perform operations with
LargeObjectManager lobj =
((org.postgresql.PGConnection)externalFileConn).getLargeObjectAPI();
// Create a new large object
long oid = lobj.createLO(LargeObjectManager.READ |
LargeObjectManager.WRITE);
// Open the large object for writing
LargeObject obj = lobj.open(oid, LargeObjectManager.WRITE);
// Copy the data from the file to the large object
byte buf[] = new byte[2048];
int s, tl = 0;
while ((s = in.read(buf, 0, 2048)) > 0){
obj.write(buf, 0, s);
tl = tl + s;
}
// Close the large object
obj.close();
*/
// insert bytea data type into database
// psInsert.setLong(1, oid); // for large object
psInsert.setBinaryStream(1, in, in.available()); // for bytea
psInsert.setLong(2, xlink.getId());
psInsert.execute();
in.close();
externalFileConn.commit();
return true;
41
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
6.2 Export of textures
Textures Import 1. Insert 4.
Appearance InputStream
setBinaryStream setORAData
3.
loadDataFrom
InputStream get Select for 2.
Update
ORAData
getDataInFile Factory
ORDImage.java init
OutputStream Prepare 1.
getBytes
BYTEA ORDImage
Export
3D-CityDB
Fig. 3: Im- und Export of textures (Kunde 2012 [2])
de.tub.citydb.modules.citygml.exporter.database.xlink.DBXlinkExporterTextureImage
de.tub.citydb.modules.citygml.exporter.database.xlink.DBXlinkExporterLibraryObject
128 // OracleResultSet rs = (OracleResultSet)psTextureImage.executeQuery();
rep+ ResultSet rs = (ResultSet)psTextureImage.executeQuery();
143 // // read oracle image data type
rep+ // OrdImage imgProxy = (OrdImage)rs.getORAData(
// 1, OrdImage.getORADataFactory());
// rs.close();
//
// if (imgProxy == null) {
// LOG.error("Database error while reading texture file: " + fileName);
// return false;
// }
//
// try {
// imgProxy.getDataInFile(fileURI);
// } catch (IOException ioEx) {
// LOG.error("Failed to write texture file " + fileName + ": " +
// ioEx.getMessage());
// return false;
// } finally {
// imgProxy.close();
// }
Used method:
byte[] imgBytes = rs.getBytes(1);
try {
FileOutputStream fos = new FileOutputStream(fileURI);
fos.write(imgBytes);
fos.close();
} catch (FileNotFoundException fnfEx) {
LOG.error("File not found " + fileName + ": " + fnfEx.getMessage());
} catch (IOException ioEx) {
42
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
LOG.error("Failed to write texture file " + fileName + ": " +
ioEx.getMessage());
return false;
}
Alternative way:
InputStream imageStream = rs.getBinaryStream(1);
if (imageStream == null) {
LOG.error("Database error while reading texture file: " + fileName);
return false;
}
try {
byte[] imgBuffer = new byte[1024];
FileOutputStream fos = new FileOutputStream(fileURI);
int l;
while ((l = imageStream.read(imgBuffer)) > 0) {
fos.write(imgBuffer, 0, l);
}
fos.close();
} catch (FileNotFoundException fnfEx) {