= 1 −
𝑗=1
The parity bit 𝑝(𝑟 𝑗) is always zero when 𝑣 = 0𝑘 and it is one with
probability half when 𝑣 ≠ 0𝑘. Therefore, when 𝑁 (𝜀) random variables
𝑟𝑖 are selected, the error probability of RS-OR is:
𝑃𝑟(cid:2)OR(𝑣[1], . . . , 𝑣[𝑘]) ≠ RS-OR(𝑣[1], . . . , 𝑣[𝑘])(cid:3)  𝑏), for 𝑎, 𝑏 ∈
{0, 1}𝜇, is:
IsGrt𝜇(𝑎, 𝑏) =

(cid:0)(𝑎[𝑖] · (𝑏[𝑖] + 1))
· IsEqual𝜇−𝑖(suffix𝑖(𝑎), suffix𝑖(𝑏))(cid:1)
+(cid:0)𝑎[𝜇] · (𝑏[𝜇] + 1)(cid:1) mod 2
𝑖∈[𝜇−1]

𝑖∈[𝜇]
with degree 𝜇 + 1 and 2𝜇 overall multiplications.
4 OUR SECURE SEARCH SCHEME (LEAF)
We introduce LEAF in this section. For ease of description, all of
our operations are done by default under homomorphic encryption,
unless otherwise specified.
Following previous works [1, 2], we mainly focus on locating
the first non-zero item, and once it is done, all the matches can be
retrieved via similar processing. We defer the details on how to
retrieve all records to Appendix A for completeness. Further, we
only focus on the algorithm of returning the index 𝑖 instead of the
value array(𝑖). As shown in Section 4.4, with the encrypted index 𝑖
we just need to pay 𝑂(𝑛) multiplications and without incrementing
the depth to get the encrypted value.
4.1 Overview
We will briefly introduce the three main steps of the algorithm, i.e.,
Localization, Extraction, and Reconstruction, following which we
obtain an encrypted array with only a single 1 whose coordinate
locates the first non-zero term. For completeness, we explain how
to get the encrypted binary representation of the non-zero term’s
index in this encrypted array without increasing the number of
multiplications in Section 4.2.4.
In the Localization step, our goal is to find the interval contain-
ing the first non-zero item. We divide the original array 𝑣 into
𝑡 smaller intervals, each of which has length 𝑘, we create a new
array ind to indicate whether the first 𝑖 intervals contain a non-
zero item, which could be implemented as follows: Let 𝑖𝑛𝑑[1] =
RS-OR(𝑣[1], 𝑣[2], . . . , 𝑣[𝑘]), 𝑖𝑛𝑑[2] = RS-OR(𝑣[1], 𝑣[2], . . . , 𝑣[2𝑘]),
and so on. Suppose that the first non-zero item in the original ar-
ray has coordinate between ( 𝑗 − 1)𝑘 + 1 and 𝑗𝑘, then we have
𝑖𝑛𝑑[1] = 𝑖𝑛𝑑[2] = · · · = 𝑖𝑛𝑑[ 𝑗 − 1] = 0 and 𝑖𝑛𝑑[ 𝑗] = 𝑖𝑛𝑑[ 𝑗 + 1] =
· · · = 𝑖𝑛𝑑[𝑡] = 1 for any 𝑗 ∈ [𝑡], by computing pairwise differences
of adjacent indexes, we can get an array 𝑓 𝑙𝑎𝑔 ∈ {0, 1}𝑡 with only
one 1 at 𝑓 𝑙𝑎𝑔[ 𝑗], which indicates that the first non-zero item’s index
in the original array 𝑣 is between ( 𝑗 − 1)𝑘 + 1 and 𝑗𝑘.
In the Extraction step, our goal is to extract the interval that
contains the first non-zero item. The difficulty of the problem is
that although we have coordinates of the target interval, these
coordinates are homomorphically encrypted, so we cannot directly
use these coordinates to get the target interval. The good news is
that we can use PIR to solve this problem without further interaction
with the client under this situation, but using PIR will introduce an
additional log 𝑛 degrees. In this paper, we propose a new technique
for extracting complete interval, which only increases the depth
by 1 to get the target interval. The basic idea of this technique is
to make use of the richer position information in the interval than
the encrypted coordinates. More specifically, we can change all the
elements in the non-target interval to 0 through a method we put
forward. Finally, we add the elements in the corresponding position
to get the target interval. See Section 4.2.2 for details.
In the Reconstruction step, our goal is to integrate the position
information from the two steps above into one final output. The
above two steps output the starting coordinate of the target interval
(index1) in which the first non-zero item is located and the offset of
the non-zero item within the target interval (index2), respectively.
In theory, we can output the two position information to the client,
and then calculate the coordinate of the first non-zero item in the
original array by the client after decrypting (index = (index1 −
1)𝑘 + index2). However, we want to output the final result directly
for two purposes:
1
0
0
0
0
0
1
0
1
0
1
0
0
0
0
1
0
𝑣
Degree : 𝑑
Step 1
𝑖𝑛𝑑
Degree : 𝑑 · log 𝑛
𝜀
Step 2
𝑓 𝑙𝑎𝑔
Degree : 𝑑 · log 𝑛
𝜀
0
0
1
1
1
0
1
0
Figure 5: Localization step: divide the array to be searched
into many intervals to determine the specific interval in
which the first non-zero entry occurs
one 1 indicating the interval where the first non-zero item appears.
Step 2: For a stepped array containing only 0s and 1s (they’re all
0 before the first 1 and 1 after the first 1), we do the difference
operation on the array, that is, we change the value of the 𝑖-th
element in the array to the value at 𝑖 minus the value at 𝑖 − 1:
∀𝑖 ∈ [2, 𝑡] : 𝑓 𝑙𝑎𝑔[𝑖] ← 𝑖𝑛𝑑[𝑖] − 𝑖𝑛𝑑[𝑖 − 1]
𝑓 𝑙𝑎𝑔[𝑡 + 1] ← 1 − 𝑖𝑛𝑑[𝑡]
After this operation, 𝑓 𝑙𝑎𝑔 only have one 1. If its index is 𝑗(≠ 𝑡 +1),
it means that the first 1 is located in (𝑣[( 𝑗 − 1) · 𝑘 + 1], . . . , 𝑣[ 𝑗 · 𝑘]),
if its index is 𝑡 + 1, it means there is no 1 in the original array.
Through this process, we locate the position of the first non-zero
item in a smaller interval.
(1) We hope the client only needs to decrypt, thus reducing
the requirement of the protocol on the client’s computing
power;
(2) Output the coordinate of the output non-zero item in the
whole array can increase the compatibility of our algorithm,
as this output could be adapted to any existing retrieval
algorithm.
4.2 Algorithm Description
Localization. The goal of this step is to locate the target item
4.2.1
into a smaller interval, then we can ignore non-target intervals and
only apply search operation on target interval, thereby reducing
the number of RS-OR operations, which is the main source of
multiplication operation.
Step 1: The process is shown in Figure 5. We first divide the original
array into 𝑡 smaller intervals, the size of the partition interval is 𝑘
(determined by the parameter in section 5.2). By calculating RS-OR
result of all elements in one chunk, we can determine whether this
chunk contains the non-zero element. Specifically, we apply the
RS-OR method to the first 𝑖𝑘 elements in array 𝑣 and put the result
at the position of the 𝑖-th element in array 𝑖𝑛𝑑.
𝑖𝑛𝑑[𝑖] ← RS-OR(𝑣[1], 𝑣[2], . . . , 𝑣[𝑖 × 𝑘])
Depending on the nature of the RS-OR operation, if the 𝑖-th
element in 𝑖𝑛𝑑 is 1, all elements after this element are 1 (Because
the result of 1 OR any number is 1). We don not calculate OR of
each interval separately since we want to derive an array with only
4.2.2 Extraction. The purpose of this subroutine is to extract the
interval containing the first non-zero element for subsequent search
operations on the interval. The reason for this step is that the loca-
tion information obtained in the previous step is homomorphically
encrypted, so we need an extraction method while increasing the
computing depth as less as possible.
Step 1: The second part is shown in Figure 6, the result of the
previous step is the output of a new array 𝑓 𝑙𝑎𝑔, this array only
contains one 1 represents the interval in which the first non-zero
element located, the purpose of step 1 is to use the array 𝑓 𝑙𝑎𝑔 to
build a new array 𝑠ℎ𝑖𝑒𝑙𝑑 of the same length as the original array 𝑣,
where all the elements in the interval without the first non-zero item
are 0, and all the elements in the interval where the first non-zero
element appears are 1:
∀𝑗 ∈ [𝑡],∀𝑖 ∈ [𝑘] 𝑠ℎ𝑖𝑒𝑙𝑑[( 𝑗 − 1) · 𝑘 + 𝑖] ← 𝑓 𝑙𝑎𝑔[ 𝑗]
We call this new array "𝑠ℎ𝑖𝑒𝑙𝑑", as we’ll see later, it acts as a shield.
Step 2: We multiply array 𝑠ℎ𝑖𝑒𝑙𝑑 and initial array 𝑣 bit by bit:
∀𝑖 ∈ [𝑛], 𝑣[𝑖] ← 𝑣[𝑖] · 𝑠ℎ𝑖𝑒𝑙𝑑[𝑖]
It is like covering a newspaper with a piece of paper with a hole
in it, all we can see is the text under the hole. That is, after this
operation, only the interval contained the first 1 in 𝑣 is not all 0′𝑠.
Step 3: In order to extract the target interval, we define a new array
𝑓 𝑖𝑛 ∈ {0, 1}𝑘:
∀𝑗 ∈ [𝑘], 𝑓 𝑖𝑛[ 𝑗] ← 𝑣[ 𝑗] + 𝑣[𝑘 + 𝑗] + · · · + 𝑣[(𝑡 − 1) · 𝑘 + 𝑗]
𝑓 𝑙𝑎𝑔
Degree : 𝑑 · log 𝑛
𝜀
0
1
0
0
Step 1
𝑠ℎ𝑖𝑒𝑙𝑑
Degree : 𝑑 · log 𝑛
𝜀
𝑣
Degree : 𝑑
0
×
0
0
×
0
0
0
× . . .
0
0
1
0
Step 2
. . .
𝑣
Degree : 𝑑 · (log 𝑛
𝜀 + 1)
Step 3
𝑓 𝑖𝑛
Degree : 𝑑 · (log 𝑛
𝜀 + 1)
0
0
0
0
0
0
1
1
1
1
1
0
0
0
1
1
1
1
0
0
0
1
0
0
0