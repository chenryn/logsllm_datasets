hardware’s state visible by all parallel code paths being ex-
plored. Cost also becomes a factor, as each analyst wishing to
explore a set of devices must purchase and instrument the de-
vices, which raises the barrier to entry for ﬁrmware analysis.
While hardware-in-the-loop techniques do allow for inter-
active, relatively low-effort analyses, they are by no means
adequate for thorough program analyses of arbitrary ﬁrmware.
Interactive. A re-hosting solution should be responsive
to new program input. While deﬁning the notion of input
on an embedded ﬁrmware is itself a nuanced problem, the
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 137remaining hardware (not used as the source of input) should
react accordingly. Trace replay-based solutions, such as
PANDA [10], while quite ﬂexible and useful for certain
analyses, are not interactive and cannot be used to implement
fuzzing or symbolic execution, which rely on this primitive.
Abstraction-less. An ideal re-hosting solution should not
rely on a software abstraction that greatly limits the kinds
of ﬁrmware on which it can be used. Recently, advances have
been made in re-hosting ﬁrmware based on the abstractions
provided by the Linux OS [3, 8]. Using such an abstraction,
when it exists, is advantageous, but it naturally limits the
scope of ﬁrmware to those that do not have a signiﬁcant
coupling between their primary function and the underlying
hardware. Relying on an OS precludes the analysis of, for
example, the blob ﬁrmware we explore in this work.
Automatic. An ideal re-hosting solution should not require
a signiﬁcant effort per-device to use. The diversity in on-chip
and external peripherals is so severe, that it is highly unlikely
that any ﬁrmware can be emulated out-of-the-box with a
commercial or open-source emulation package. While some
commercial systems provide the ability to rehost completely
custom hardware architectures (e.g., Simics [17]), these sys-
tems still require the hardware models to be programmed man-
ually. This is made worse by customizable CPU cores, and the
diverse array of electronics components that the electronics
industry continues to support. Even static and symbolic anal-
ysis tools [9, 12, 22] heavily rely on the manual speciﬁcation
of hardware behavior, particularly around IO and interrupts.
While there is little useful data able to quantify embedded
CPU diversity, and documentation from vendors is not
in a comparable form, we managed to locate a dataset of
555 CMSIS System View Description (SVD) ﬁles [21],
which are XML ﬁles describing chipsets based on Cortex-M
microcontrollers. They detail the on-chip peripheral locations
and layouts of 463 distinct chips across 13 different chip
vendors. This collection is by no means complete (it does
not even include all of the chips used in our experiments in
Section 4), but it shows the complexity and the scale of this
problem. In this dataset alone, we could identify 1592 unique
implementations of peripherals demonstrating the immense
variety of peripheral and chip designs.
This complexity increases even more when considering
external peripherals connected to the chip via on-chip buses
and interrupt controllers. Hence, emulators such as QEMU [2]
have to include carefully and—up to now—manually crafted
implementations of peripherals and align them at the right
location. In fact, the upstream version of QEMU only exposes
implementations for three different Cortex-M chips, none of
them present in the above dataset. As a result, analysts end
up creating their own peripheral and board implementations
and maintaining them in separate forks of the project, such
as QEMU STM32 [1] or GNU MCU Eclipse [13]. A different
approach is taken by LuaQEMU [5] and avatar2 [19], which
provide an interface for the analyst to deﬁne the peripheral
Figure 1: The memory layout for a simple 32 bit memory-mapped
timer on the STM32 embedded processor.
layout. While these may be preferable to languages such as
C used by QEMU itself, the analyst is still required to obtain
and understand the full documentation for the particular CPU
model used, and this effort may not transfer entirely to other
similar CPUs, even from the same vendor. Therefore, it is
very clear that an automated solution is needed to be able to
make ﬁrmware analysis tractable.
While we, of course, do not claim to have achieved the
goal of ideal re-hosting in this work, in the following sections,
we will showcase a proof-of-concept approach that has all of
the above properties, with limitations discussed in Section 5.
3 Methodology
In this section, we present PRETENDER, a step toward
automating the modeling of MMIO and interrupt-driven
hardware peripherals to enable re-hosting. The goal is to
gather data on, and build models of, these peripherals, such
that the ﬁrmware under analysis can later be independently
executed in a CPU emulator. We present our solution in the
context of its use to support dynamic analysis of ﬁrmware,
although the generated models have other possible uses,
which we will discuss in more detail in Section 5.
The success metric we adopt to evaluate the completeness
of the extracted models is what we call survivable execution,
which we deﬁne as the ability for the ﬁrmware to execute the
same regions of code as it would if the original hardware were
present, without faulting, stalling, or otherwise impeding this
process. We include in this deﬁnition the need for our program
to be interactive, as this is a requirement for many analyses.
That is, the ﬁrmware and our hardware models need to be able
to operate on inputs and execute code paths that were not
observed during the recording and model-generation phase.
Assumptions and Prerequisites. We make a few basic
0x000000000xFFFFFFFF0x400000000xB0000000MMIO Region0x40000C000xC0000FFF...Timer 5 (32 bit)TIM5_CR1TIM5_CR2TIM5_SMCRTIM5_DIERTIM5_SRTIM5_EGR04080C1014TIM5_CCMR118TIM5_CCMR2TIM5_CCER20TIM5_CNT24TIM5_PSC281CTIM5_ARR2CRESERVEDTIM5_CCR134TIM5_CCR238TIM5_CCR33CTIM5_CCR440RESERVEDTIM5_DCR48TIM5_DMAR4CTIM2_OR50TIM3_OR50138          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX AssociationFigure 2: Overview of the functionality of PRETENDER
assumptions in the implementation of PRETENDER.
• We assume that a CPU emulator is available for the target
device, and that this emulator supports all CPU features that
can impact control ﬂow, including the interrupt controller.
• We assume the analyst has the ability to observe memory
accesses and the occurrence of interrupts in the device in
real-time. We will present a method for accomplishing this
on any device with a basic debugging interface, lowering
the requirement to the ability to read and write the device’s
memory.
• We assume that the basic memory layout of the target
device is known, particularly the location of code and data
in the memory space. More generally, we need to know
where these areas are not located, as we can assume that
the remaining areas are interesting locations we wish to
model, including the MMIO regions.
• We assume that a human or automated process is able to
interact with the hardware and that it achieves sufﬁcient
code coverage during the recording phase to reveal enough
hardware interactions to generate a model. The more
complete the code coverage is, the more detailed the
extracted model will be.
A discussion of these assumptions can be found in Section 5.
PRETENDER works in the following phases:
1. Recording. We instrument the device to obtain a trace
of accesses to the MMIO regions, and any interrupt that
occurs during the execution.
2. Peripheral Clustering. We locate the boundaries of each
distinct peripheral within the device’s memory space,
and divide the recording into sub-recordings for each
peripheral.
3. Interrupt Inference. Based on the interleaving of
interrupts with MMIO, we assign each numbered interrupt
event to a peripheral group. We then infer which bits in
which memory location in the peripheral control interrupts,
and create timing patterns to be used during emulation.
4. Memory Model Training. In this step, we attempt
to select and train known models for each memory
location within the identiﬁed peripheral regions. Any
unidentiﬁed memory locations will be modeled using
State Approximation.
5. Test Harness Creation. Finally, the analyst must decide
how input should be introduced into the system, through
the creation of a simple test harness. This is the only
manual step in the process, as the decision depends on the
analyst’s needs.
A complete overview of PRETENDER and the interplay
between its different parts can be seen in Figure 2. In the
remainder of this section, we will discuss the individual
phases of the system in detail.
3.1 Recording
On ARM-based platforms, MMIO accesses occur through nor-
mal load or store instructions from the CPU, and take place
across the CPU’s internal memory buses. Since we cannot ob-
serve this activity directly, or either via a debugger or through
physical access, we can instead effectively extend the memory
bus outside the chip where the data required for modeling can
be recorded. To this end, we leverage a hardware-in-the-loop
execution approach, where the ﬁrmware is deployed in an em-
ulator, and the MMIO requests are forwarded to the original
hardware, which allows recording in-transit. We built upon the
avatar2 framework [19], which allows for the simultaneous
control and orchestration of emulators and hardware. Avatar2
supports an event-based callback infrastructure, which al-
lowed us to implement the recording of memory events. All
extensions and modiﬁcations to avatar2 developed during this
Emulated CPU(QEMU)Real CPUMMIOLogInterruptLogEmulated EnvironmentReal Embedded SystemUnmodified FirmwareMMIOMemoryInterrupt ControllerInterrupt ControllerMMIO MappingMachine Learning EngineRecord Forwarded InteractionsHardware ModelsReplace Hardware with ModelsUSENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 139the chip, which has its own concept of state, control interrupts,
and so on. For example, writing a byte to the data register of
a serial port may cause the “transfer in progress” or “busy”
ﬂag to become active in the same peripheral’s status register.
Therefore, a major prerequisite to the future modeling steps is
to group all memory accesses by their associated peripherals.
To do this, we rely on the intuition that each MMIO periph-
eral is typically associated with a block of contiguous memory
addresses (e.g., 0xC00-0xCFF in Figure 1) . While we cannot
be sure exactly what the boundaries between the peripherals
are, we assume there is some ﬁxed alignment for—and the
minimal gap between—them, likely due to the underlying
details of the peripheral buses that serve MMIO peripherals.
These details are supported by the SVD data explored in Sec-
tion 2, as well as the manuals for all of the devices explored in
Section 4. We can, therefore, ﬁnd our peripheral boundaries
through clustering techniques. For this work, we take the
set of accessed addresses and employ the Density-based
Spatial Clustering of Applications with Noise (DBSCAN)
algorithm [11] to recover the peripheral groupings.
The intuition behind this choice is that each peripheral will
appear as a small cluster of accesses in a relatively sparse
memory space. For example, in Figure 1, while an entire page
of memory (0x1000) is allocated to the timer, only a small
portion (0x00-0x50) of that memory space is actually used,
meaning that subsequent peripherals in memory will likely
have large gaps between their relative clusters. DBSCAN
is able to quickly discern these clusters, providing us with
the capability to efﬁciently group the various accesses. In
our work, we set our maximum gap between any of the
addresses in a cluster (i.e., epsilon) to be 0x100 and the
minimum cluster size to be one. Almost any reasonable value
for epsilon (e.g., 0x8-0x100) would likely produce identical
and useful clusters, and our minimum cluster size of one
ensures that we will not exclude simple or infrequently-used
peripherals from our models.
3.3 Interrupt Inference
In order to model interrupts correctly, we need to establish a
reasonable approximation for when to ﬁre each interrupt and
which MMIO event triggered it. First, we ﬁnd the association
between the interrupt number and the peripheral ﬁring the
interrupt, which is a property of the hardware that varies
widely between chip models. Then, we discern which MMIO
register is used to enable and disable each interrupt, so that
we do not ﬁre it too soon or too late in the execution. Finally,
we determine how often to ﬁre interrupts when they are
eventually enabled.
To associate an interrupt with a peripheral, we examine
the interleaved interrupt and MMIO traces and locate all
of the MMIO operations that occur during an Interrupt
Service Routine (ISR) (e.g., between an interrupt event
and the emulator returning from the ISR). We leverage the
Figure 3: State diagram of interrupt recording in PRETENDER. *
indicates the initial state.
work will be released as open-source alongside with the code
of PRETENDER upon the publication of this paper.
Recording Interrupts In order to fully model on-chip
hardware peripherals, we must observe the interrupts that
they generate, in the context of the MMIO activity of the
ﬁrmware.2 Figure 3 shows how interrupts are recorded in
PRETENDER. As interrupts are generated on the real device,
we should have the Real CPU running. Hence, we always
have the Real CPU execute an inﬁnite loop. Furthermore,
we replace the ISR of all the interrupts with a recording stub
(shown in dotted box in the Figure 3).
When an interrupt occurs (Step 1), the recording stub is
triggered, which immediately reports the interrupt number
to PRETENDER (i.e., the Emulated CPU), and halts the Real
CPU (Step 2). The emulated CPU then starts executing the
actual ISR for the corresponding interrupt, and directs the
real CPU to run a loop in the interrupt’s context to mimic the
execution of the interrupt (Step 3). Once the ISR completes
execution on the emulated CPU (Step 4), PRETENDER
redirects the execution of the Real CPU to the default inﬁnite
loop, and the Emulated CPU to continue executing the
ﬁrmware (Step 5). This ensures that both the hardware and
emulated interrupt controllers are synchronized.
3.2 Peripheral Clustering
With the combined MMIO and interrupt recording collected,
we can now proceed to reason about and model the peripherals
themselves. In the end, we need to construct a model, such that
each MMIO location that the ﬁrmware accesses returns a rea-
sonable value. However, these locations are not independent;
multiple locations represent one logical device in the silicon of
2Recording interrupts is a particularly complex matter, requiring precise
synchronization of the emulator and hardware to avoid incorrect behavior.
We detail the problem and the rationale behind our approach in Appendix A.
Infinite loopReportLoopEmulated CPUReal CPUredirectISR1Interrupt OccursFirmware**23453140          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Associationintuition that the purpose of most interrupts is to trigger the
ﬁrmware to communicate with the interrupting peripheral,
by executing the code in the ISR. Therefore, we associate an
interrupt number with a peripheral if that peripheral’s MMIO
addresses were accessed the most during the ISR’s execution.
We then locate the memory location containing the
interrupt’s trigger, which is a location in the peripheral
which, when a certain bit pattern is written, causes interrupts
to be enabled. The location can be determined by ﬁnding
the very ﬁrst interrupt for a given interrupt number, and
seeking backward in the MMIO/interrupt trace until a write
to the associated peripheral is found. This is intuitively
the conﬁguration, or interrupt-enable register, as it is best
practice to enable interrupts as the ﬁnal step during peripheral
conﬁguration, as, after this point, any operation could be
interrupted. However, this memory location may be shared
with other functions, and many bit patterns may be written
to it during an execution which have no effect on interrupts.
The next step is therefore to reﬁne the bit pattern which can
enable interrupts in the model, based on which writes appear
to control interrupt behavior in the hardware. We start with
the assumption that all bits in the trigger location control
the interrupts. For each write to the detected trigger location,
if a bit is set to 0 when interrupts occur, it is unlikely to be
the interrupt trigger bit, and is removed from consideration.
The remaining bits are considered the ﬁnal interrupt trigger;
during emulation, when these bits are set in the trigger
location, interrupt events will be ﬁred by the model.
Finally, we must determine how often to ﬁre interrupts
when they are enabled. There are various kinds of interrupts:
pulse interrupts occur once for every event they represent,
and level interrupts occur repeatedly until some MMIO action
disables them. While level interrupts would be easy to model
based on the state of the peripheral, we cannot reliably distin-
guish these two types in the recording data. As a result, the
most general, ﬂexible approach is to use interrupt timings. In-
terrupts can also be very frequent. Since these are the timings
seen during PRETENDER’s recording, we can be sure that the
emulator can at least support interrupts at this speed. We col-
lect the timings between an interrupt return and the beginning
of the next interrupt (as well as between the trigger and the
ﬁrst interrupt) and create a repeating sequence. As long as in-
terrupts are enabled via the correct bits in the interrupt trigger
location, they will be ﬁred repeatedly until they are disabled.
The result is a peripheral model for which interrupts can
be enabled and disabled by the program in a realistic manner,
and with timing intervals that the emulator can support. We
ﬁnd that these intuitive heuristics both align well with the
design of peripherals, and also work well in practice, as we
show in Section 4.
3.4 Memory Model Training
In this step, we select a model for each memory location in a
peripheral. We ﬁrst look for common memory access patterns,
which allow us to train accurate models for these common
types of interactions. For some memory locations, where more
complex, stateful, functionality is implemented, we employ
a state approximation mechanism, able to provide known-
valid sequences of observed values for that speciﬁc memory
location, based on what state we infer the peripheral to be in.
There are a few basic types of MMIO registers common
to many peripherals (e.g., conﬁguration registers, status
registers, and counters). By using simpliﬁed models for these,
we can allow this part of our model to maintain ﬂexibility, and
operate as independently as possible from the circumstances
of the recording. We identify and model a number of classes
of MMIO:
• the Simple Storage Model is used for memory locations
that were observed to always act like normal memory. That
is, the value returned for a read from a location was always
identical to the most recent value written to that location;
• the Pattern Model is used for memory locations whose
read values appear to follow some repeating pattern (e.g.,
0,1,1,0,1,1,...), including locations that always return a
static value;
• the Increasing Model is used for values that are eventually
monotonically increasing (i.e., the last half of the obser-
vations were increasing), which is typically indicative of
a timer or counter;
• and the Write-only Model is used for memory locations that
were only ever observed to be written to, which are effec-
tively ignored from a modeling perspective, but interesting
for our state approximation, as they are likely conﬁguration
registers that directly affect the state of the peripheral.