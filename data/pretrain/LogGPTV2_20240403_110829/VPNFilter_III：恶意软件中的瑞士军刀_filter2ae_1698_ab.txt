该模块中还存在负责处理SSDP、CDP以及LLDP函数的代码，但我们分析的样本并没有调用这些函数，因此上图文件中并没有包含这部分数据。
nm模块会请求3个命令行参数来正常运行，但实际上只用到了第1个参数。与其他几个模块一样，第1个参数为一个文件夹，用来永久保存数据信息。nm模块所执行的最后一个任务是将包含扫描结果的.bin临时文件移动到第1个参数所指定的目录，为VPNFilter主进程的后续渗透操作提供服务。
###  netfilter（拒绝服务工具）
netfilter模块需要接受来自命令行的3个参数，前面2个参数并没有使用，第3个参数为带引号的一个字符串，具体格式为 ，其中# of
minutes代表netfilter在退出之前所需要运行的时间长度，如果用到了block参数，那么netfilter就会将如下规则加入iptables中：
    Chain FORWARD (policy ACCEPT)
    target     prot opt source         destination
    DROP        tcp -- anywhere        anywhere       tcpflags: PSH/PSH
添加上述规则后，netfilter会等待30秒，然后删除这条规则。如果参数指定的# of
minutes值仍有富余时间，那么就会再次执行这个过程。通过这种添加及删除循环操作，即便设备删除了该规则，这个模块仍可以确保该规则被再次添加。
一旦超过参数设定的分钟数，程序就会退出。netfilter程序开头处会安装信号处理程序，一旦程序收到SIGINT或者SIGTERM信号，就会删除iptables规则然后退出。通过这种方式，如果有人手动结束netfilter程序，设备也能正常工作。
最后，unblock参数用来删除先前block参数所添加的iptables规则。
虽然我们没有在程序中找到其他代码路径，但有迹象表明该模块包含（或者可能包含）其他功能。
第一个线索，Talos分析的不同netfilter模块样本（MIPS、PPC以及Tile-GX）都包含同一个CIDR
IP地址及范围列表（总共168个元素），这些地址与如下公司/服务有关：
    31.13.64.51 - WhatsApp
    169.44.36.0/25 - WhatsApp
    203.205.167.0/24 - Tencent
    52.0.0.0/16 - Amazon.com, Inc. (有多个加密应用的IP地址位于这个地址段中，这些应用为Wikr、Signal、Dust以及Confide)
这意味着netfilter模块可能用来拦截对某类加密应用的访问，尝试将受害者的通信数据引到攻击者容易处理其他服务。有趣的是，这份清单中缺少一个非常受欢迎的加密聊天应用：Telegram。
然而，我们无法在代码中找到与这些字符串有关的任何引用。我们分析的所有版本的netfilter样本虽然都包含同样一份IP范围列表，却没有用到这些信息，可能我们收集到的样本并不完整。
netfilter模块所添加的iptables规则会丢弃带有PUSH标志的TCP报文。如果攻击者的目的是使用已控制的设备发起拒绝服务攻击，那么他们可能会使用这条规则来拦截所有报文，而不单单是带有PUSH标志的TCP报文。通常情况下，这类规则对中间人攻击（man-in-the-middle）场景非常有用，可以帮助具备设备访问权限的攻击者拦截中转的流量、修改流量然后再转发流量。这样就可能解释为什么程序中会存在CIDR
IP地址范围。在已分析的所有样本中，我们无法找到这类功能存在的任何线索。
我们可以证实攻击者并没有用到这些IP，可能这些IP是旧版本netfilter模块的遗留信息，也有可能是相关功能尚未实现，或者是我们尚未发现的被恶意软件作者修改的iptables静态链接库。VPNFilter作者之前也修改过开源代码（比如ndbr模块），因此他们也有可能会修改netfilter模块中链接的libiptc代码。
###  portforwarding（转发流量至攻击者的基础设施）
portforwarding模块所使用的命令行参数如下所示：
    ./portforwarding   "start    "
传入这些参数后，portforwarding模块可以安装如下iptables规则，将来自特定端口及IP的流量转发到另一个端口及IP地址：
    iptables -t nat -I PREROUTING 1 -p tcp -m tcp -d  --dport  -j DNAT --to-destination :
    iptables -t nat -I POSTROUTING 1 -p tcp -m tcp -d  --dport  -j SNAT --to-source 
这些规则会导致流经已感染设备的、目的地为IP1:PORT1的所有流量被重定向到IP2:PORT2地址处。第二条规则会修改重定向流量中的源地址，将其改为已感染设备的地址，确保响应数据可以回到被感染设备。
为了确保规则切实可用，在安装这些iptables规则之前，portforwarding模块首先会检查IP2的确可用，具体操作是创建连接至IP2:PORT2的一个socket连接，然而关闭socket前该模块并不会发送任何数据。
与修改iptables的其他模块类似，portforwarding模块也会进入一个循环过程，不断添加规则、等待一段时间、删除规则然后再重新添加规则，确保这些规则在被手动删除的情况下，依然可以保留在设备上。
###  socks5proxy（在被控设备上创建SOCKS5代理）
socks5proxy模块是一个SOCKS5代理服务器，基于[shadowsocks](https://shadowsocks.org/en/index.html)开源项目开发。服务器没有使用身份认证方案，在硬编码的TCP
5380端口上监听。在服务器运行之前，socks5proxy会执行fork操作，连接至传入参数中指定的某个C2服务器。如果C2服务器在几秒钟内没有响应，则fork进程会结束父进程（原始服务器）然后退出。C2服务器可以返回一些命令，让服务器正常运行或终止运行。
该某块包含如下使用帮助字符串，但这些字符串实际上并非socks5proxy模块所使用的参数，并且无法通过命令行参数来修改这些设置：
    ssserver
        --username  username for auth
        --password  password for auth
        -p, --port  server port, default to 1080
        -d run in daemon
        --loglevel  log levels: fatal, error, warning, info, debug, trace
        -h, --help help
实际上socks5proxy模块所使用的命令行参数如下所示：
    ./socks5proxy   "start  "
socks5proxy模块会验证参数数量是否大于1，但如果输入2个参数则会导致该进程收到SIGSEV信号而崩溃，这表明这款恶意软件工具链的某些研发阶段中的代码质量控制并不理想，或者非常有限。
###  tcpvpn（在被控设备上创建反向TCP VPN连接）
tcpvpn模块是一个反向TCP（Reverse-TCP）VPN模块，允许远程攻击者访问已感染设备后面的内部网络。该模块与远程服务器通信，后者可以创建类似TunTap之类的设备，通过TCP连接转发数据包。连接请求由网络设备发出，因此可能帮助该模块绕过某些简单的防火墙或者NAT限制。该模块在概念上类似于Cobalt
Strike这款渗透测试软件的[VPN Pivoting](https://www.cobaltstrike.com/help-covert-vpn)功能。
发送的所有数据包都经过RC4加密处理，密钥通过硬编码的字节来生成，如下所示：
    213B482A724B7C5F4D77532B45212D215E79433D794A54682E6B653A56796E457A2D7E3B3A2D513B6B515E775E2D7E533B51455A68365E6A67665F34527A7347
密钥两端分别为当前连接的端口号（比如58586!;H*rK|_MwS+E!-!^yC=yJTh.ke:VynEz-~;:-Q;kQ^w^-~S;QEZh6^jgf_4RzsG80）。
tcpvpn模块所使用的命令行语法如下所示：
    ./tcpvpn   "start  "
## 四、MikroTik研究
###  Winbox协议解析器
在研究VPNFilter的过程中，我们需要确定攻击者如何攻破其中某些设备。在检查MikroTik系列设备时，我们注意到设备上开放了一个端口（TCP
8291），而Winbox这款配置工具会使用该端口来通信。
来自这些设备的流量均为大量的二进制数据，因此我们无法在不使用协议解析器的情况下来分析该协议所能触及的访问路径（根据我们先前了解的情况，网上并没有公开相关研究内容）。我们决定自己开发协议解析器，以便与[Wireshark](https://www.wireshark.org/)等数据包分析工具配合使用，进一步了解该协议的更多信息，这样我们就能设计有效的规则，以便未来在发现潜在的攻击向量时能够阻止感染路径。
典型的攻击向量为[CVE-2018-14847](https://arstechnica.com/information-technology/2018/09/unpatched-routers-being-used-to-build-vast-proxy-army-spy-on-networks/)，攻击者可以利用该漏洞在未通过身份认证的情况下执行路径遍历攻击。在编写适配该漏洞的规则时（[Snort SID:
47684](https://www.snort.org/rule-docs/1-31977)），协议解析器发挥了非常关键的作用。虽然官方已发布了修复该漏洞的[更新](https://blog.mikrotik.com/security/winbox-vulnerability.html)，我们认为专业的安全人员必须能够监控这类流量，以识别其他任何潜在的恶意流量。
此时我们依然能够保证用户的隐私，只要用户使用“安全模式（secure
mode）”来加密通信，或者下载最新版的Winbox客户端（该客户端只会使用加密通道来传输数据）即可。这款工具不会解密已加密的通信数据。我们测试的最新版的MikroTik
CCR固件版本为6.43.2版，该版本会强制使用较新版的Winbox客户端，但这种限制条件只应用于客户端。这意味着我们仍然可以使用自定义的客户端，通过不安全的通道进行通信。因此，我们认为这个Wireshark解析器依然可用，因为攻击者仍然可以投递漏洞利用载荷，无需满足前面提到的安全通信条件。
###  何为“Winbox协议”
Winbox这个名词来自于MikroTik提供的Winbox客户端，用来作为Web GUI的替代方案。
根据官方文档，Winbox是一个小型工具，可以使用快速且简单的GUI来管理MikroTik
RouterOS。这是一个原生的Win32程序，但也可以通过Wine（一个开源兼容层解决方案）运行在Linux以及MacOS上。所有的Winbox接口函数都尽可能与控制台函数靠拢，这也是为什么手册中不存在Winbox内容的原因所在。Winbox无法修改某些高级以及关键系统配置，比如无法修改某个接口的MAC地址。
据我们所知，“Winbox协议”并非官方名词，因为这个名词与官方客户端匹配，因此我们选择使用这个说法。
###  使用解析器
解析器安装起来非常简单，由于这是一个基于LUA的解析器，因此无需重新编译。只需要将Winbox_Dissector.lua文件放入/$HOME/.wireshark/plugins目录即可。默认情况下，只要我们安装了这个解析器，就能正确解析来自或者发往TCP
8291端口的所有流量。
来自客户端/服务器的单条消息解析起来更加方便，然而实际环境中总会遇到各种各样的情况。观察实时通信数据后，我们证实Winbox消息可以使用各种格式进行发送。
我们捕获过的Winbox通信数据具备各种属性，比如：
1、在同一个报文中发送多条消息；
2、消息中包含1个或多个2字节的“chunks”数据，我们在解析之前需要删除这些数据；
3、消息过长，无法使用单个报文发送——出现TCP重组情况；