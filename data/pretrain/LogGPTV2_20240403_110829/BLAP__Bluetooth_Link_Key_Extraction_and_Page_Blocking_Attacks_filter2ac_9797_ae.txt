(cid:70)(cid:82)(cid:81)(cid:73)(cid:76)(cid:85)(cid:80)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:90)(cid:75)(cid:72)(cid:87)(cid:75)(cid:72)(cid:85)(cid:3)(cid:87)(cid:82)(cid:3)(cid:83)(cid:68)(cid:76)(cid:85)(cid:3)
(cid:82)(cid:81)(cid:3)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:3)(cid:37)(cid:17)(cid:3)(cid:39)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:3)(cid:37)(cid:3)(cid:71)(cid:82)(cid:72)(cid:86)(cid:3)(cid:81)(cid:82)(cid:87)(cid:3)
(cid:86)(cid:75)(cid:82)(cid:90)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)(cid:70)(cid:82)(cid:81)(cid:73)(cid:76)(cid:85)(cid:80)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:89)(cid:68)(cid:79)(cid:88)(cid:72)(cid:17)(cid:3)
(cid:49)(cid:88)(cid:80)(cid:72)(cid:85)(cid:76)(cid:70)(cid:3)(cid:38)(cid:82)(cid:80)(cid:83)(cid:68)(cid:85)(cid:76)(cid:86)(cid:82)(cid:81)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)
(cid:68)(cid:88)(cid:87)(cid:82)(cid:80)(cid:68)(cid:87)(cid:76)(cid:70)(cid:3)(cid:70)(cid:82)(cid:81)(cid:73)(cid:76)(cid:85)(cid:80)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:82)(cid:81)(cid:3)
(cid:69)(cid:82)(cid:87)(cid:75)(cid:3)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:86)(cid:17)(cid:3)
(b) IO capability mapping on version 5.0 and higher
Fig. 7: (Partially displayed) IO capability mapping for authen-
tication stage 1
shown in Fig. 7, the validation depends on IO capabilities of
the pairing initiator and responder. Speciﬁcally, when either
the initiator or responder is a NoInputNoOutput device, Just
Works shall be launched due to the automatic conﬁrmation.
In Bluetooth version 4.2 or lower,
there is no mandated
guideline for the conﬁrmation popup, so most implementations
automatically conﬁrm the pairing without any user conﬁrma-
tion when working as the initiator. Whereas, when they are
working as the responder, most implementations ask for users’
conﬁrmation through a notiﬁcation to prevent silent pairing by
Just Works associations. In version 5.0 or higher, displaying
a conﬁrmation popup is mandated on DisplayYesNo devices.
However, the conﬁrmation in every version only asks if users
would accept the pairing or not, thus it is difﬁcult for users
to determine whether the pairing is actually being performed
between legitimate devices.
Consequently, A can establish the connection and perform
pairing with M. During the Just Works pairing, M will accept
the pairing automatically without any user conﬁrmation in
case of version 4.2 or lower. For version 5.0 or higher, M
will require user conﬁrmation for the pairing. Nonetheless, the
victim user will highly likely accept the conﬁrmation since:
(1) the pairing was intended by the victim user, (2) popup
is immediately displayed after the intended pairing initiation,
and (3) there is no way to determine whether the pairing is
actually conducted between C and M.
VI. IMPLEMENTATION & EVALUATION
In this section, we describe how to implement link key
extraction and page blocking attacks, and demonstrate their
efﬁcacy with real-world implementation.
[.(cid:18)(cid:76)(cid:81)(cid:70)(cid:79)(cid:88)(cid:71)(cid:72)(cid:18)(cid:69)(cid:87)(cid:66)(cid:87)(cid:68)(cid:85)(cid:74)(cid:72)(cid:87)(cid:17)(cid:75)(cid:64)(cid:3)
(cid:35)(cid:35)(cid:3)(cid:16)(cid:23)(cid:25)(cid:23)(cid:15)(cid:26)(cid:3)(cid:14)(cid:23)(cid:25)(cid:23)(cid:15)(cid:26)(cid:3)(cid:35)(cid:35)(cid:3)
(cid:6)(cid:76)(cid:73)(cid:81)(cid:71)(cid:72)(cid:73)(cid:3)(cid:37)(cid:55)(cid:36)(cid:66)(cid:39)(cid:48)(cid:66)(cid:38)(cid:50)(cid:39)(cid:3)
-(cid:6)(cid:71)(cid:72)(cid:73)(cid:76)(cid:81)(cid:72)(cid:3)(cid:37)(cid:55)(cid:36)(cid:66)(cid:39)(cid:48)(cid:66)(cid:38)(cid:50)(cid:39)(cid:3)(cid:94)(cid:19)(cid:91)(cid:24)(cid:36)(cid:15)(cid:3)(cid:19)(cid:91)(cid:19)(cid:21)(cid:15)(cid:3)(cid:19)(cid:91)(cid:19)(cid:38)(cid:96)(cid:3)
+(cid:6)(cid:71)(cid:72)(cid:73)(cid:76)(cid:81)(cid:72)(cid:3)(cid:37)(cid:55)(cid:36)(cid:66)(cid:39)(cid:48)(cid:66)(cid:38)(cid:50)(cid:39)(cid:3)(cid:94)(cid:19)(cid:91)(cid:22)(cid:70)(cid:15)(cid:3)(cid:19)(cid:91)(cid:19)(cid:23)(cid:15)(cid:3)(cid:19)(cid:91)(cid:19)(cid:23)(cid:96)(cid:3)
 (cid:6)(cid:72)(cid:81)(cid:71)(cid:76)(cid:73)(cid:3)
Fig. 8: Snippet for COD modiﬁcation
[.(cid:18)(cid:86)(cid:87)(cid:68)(cid:70)(cid:78)(cid:18)(cid:69)(cid:87)(cid:88)(cid:18)(cid:69)(cid:87)(cid:88)(cid:66)(cid:75)(cid:70)(cid:76)(cid:73)(cid:17)(cid:70)(cid:64)(cid:3)
(cid:35)(cid:35)(cid:3)(cid:16)(cid:21)(cid:21)(cid:25)(cid:15)(cid:26)(cid:3)(cid:14)(cid:21)(cid:21)(cid:26)(cid:15)(cid:26)(cid:3)(cid:35)(cid:35)(cid:3)(cid:89)(cid:82)(cid:76)(cid:71)(cid:3)(cid:69)(cid:87)(cid:88)(cid:66)(cid:75)(cid:70)(cid:76)(cid:73)(cid:66)(cid:83)(cid:85)(cid:82)(cid:70)(cid:72)(cid:86)(cid:86)(cid:66)(cid:72)(cid:89)(cid:72)(cid:81)(cid:87)(cid:11)(cid:273)(cid:12)(cid:3)
 (cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:69)(cid:87)(cid:88)(cid:66)(cid:75)(cid:70)(cid:76)(cid:73)(cid:66)(cid:83)(cid:76)(cid:81)(cid:66)(cid:70)(cid:82)(cid:71)(cid:72)(cid:66)(cid:85)(cid:72)(cid:84)(cid:88)(cid:72)(cid:86)(cid:87)(cid:66)(cid:72)(cid:89)(cid:87)(cid:3)(cid:11)(cid:83)(cid:12)(cid:30)(cid:3)
 (cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:69)(cid:85)(cid:72)(cid:68)(cid:78)(cid:30)(cid:3)
 (cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:70)(cid:68)(cid:86)(cid:72)(cid:3)(cid:43)(cid:38)(cid:44)(cid:66)(cid:47)(cid:44)(cid:49)(cid:46)(cid:66)(cid:46)(cid:40)(cid:60)(cid:66)(cid:53)(cid:40)(cid:52)(cid:56)(cid:40)(cid:54)(cid:55)(cid:66)(cid:40)(cid:57)(cid:55)(cid:29)(cid:3)
-(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:69)(cid:87)(cid:88)(cid:66)(cid:75)(cid:70)(cid:76)(cid:73)(cid:66)(cid:79)(cid:76)(cid:81)(cid:78)(cid:66)(cid:78)(cid:72)(cid:92)(cid:66)(cid:85)(cid:72)(cid:84)(cid:88)(cid:72)(cid:86)(cid:87)(cid:66)(cid:72)(cid:89)(cid:87)(cid:3)(cid:11)(cid:83)(cid:12)(cid:30)(cid:3)
+(cid:18)(cid:18)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:69)(cid:87)(cid:88)(cid:66)(cid:75)(cid:70)(cid:76)(cid:73)(cid:66)(cid:79)(cid:76)(cid:81)(cid:78)(cid:66)(cid:78)(cid:72)(cid:92)(cid:66)(cid:85)(cid:72)(cid:84)(cid:88)(cid:72)(cid:86)(cid:87)(cid:66)(cid:72)(cid:89)(cid:87)(cid:3)(cid:11)(cid:83)(cid:12)(cid:30)(cid:3)
 (cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:69)(cid:85)(cid:72)(cid:68)(cid:78)(cid:30)(cid:3)
Fig. 9: Snippet for ignoring HCI Link Key Request event
A. Experiment Setup
We use a Nexus 5x Android device as A in this evaluation.
In order to install our attack implementation on it, we need
to alter the host stack library (bluedroid) and BDADDR ﬁles.
However, because they are stored in read-only ﬁle systems,
we need to ﬁrst remount the Android system partition. Re-
mounting the system partition can be accomplished by ﬂashing
locally built boot.img to the device. To generate and ﬂash
a locally built image, we execute the following steps using
Android open-source android-6.0.1 r8 [25] as the base code:
1) Flash an MMB29P Google factory image to Nexus 5x to
avoid any boot failure caused by the mismatch between
the OS version and locally built boot.img,
2) Download and build android-6.0.1 r8 source code as
user-debug mode,
3) Unlock the OEM locking menu in Nexus 5x’s developer
options to enable ﬂashing boot.img,
4) Launch the Android bootloader and ﬂash locally built
boot.img to the device, and
5) Lock the OEM locking state using the bootloader com-
mand ‘fastboot oem locking’, and then reboot the An-
droid OS.
After ﬂashing locally built boot.img to the device, we can
get Android superuser privilege and then remount the system
partition to writable mode. The host stack library (bluedroid)
and BDADDR ﬁles can then be altered in the Nexus 5x.
for spooﬁng a device, we need to acquire the attributes of
the target device and write them to the Nexus 5x, such as
BDADDR and Class Of Device (COD). For the BDADDR,
Nexus 5x uses a persistent ‘/persist/bdaddr.txt’ ﬁle to store
the local BDADDR information in ASCII string format. Thus,
we can simply change local BDADDR by modifying it.
Likewise, the COD of Nexus 5x can be easily changed by
simply modifying ‘system/bt/in-clude/bt target.h’, which is a
deﬁnition ﬁle of the host stack library, for the settings of the
local Bluetooth system. Fig. 8 shows the process of changing
COD from mobile device type (0x5A020C) to hands-free
device type (0x3c0404). By building and pushing the host
stack library ‘bluetooth.default.so’ into ‘/system/lib/hw/’, we
can alter the host stack in the Nexus 5x.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:30 UTC from IEEE Xplore.  Restrictions apply. 
233
B. Attack Implementation
1) Link Key Extraction Attack: We conduct the attack in
two different environments. First, we implement the attack on
various Android devices and leverage HCI dump to extract
link keys from them. Second, we implement the attack on
Windows 10 and Linux ubuntu 20.04 and extract HCI data
from the physical
interface of HCI, speciﬁcally via USB
snifﬁng. The attacks are implemented based on the attack
procedure given in Section IV-C. To allow A to discon-
nect the link at the beginning of LMP authentication (step
5), we modify the host stack as shown in Fig. 9; calling
function btu hcif link key request evt() required to process
HCI Link Key Request event is skipped, disconnecting the
link due to timeout. Speciﬁcally, when C initiates the LMP
authentication, HCI Link Key Request events are delivered
from the controllers to the hosts on both C and A. At that time,
our attack code makes A wait indeterminately, and thereby
link would be disconnected by the timeout of the session,
while the host in C replies with a corresponding link key to
its controller. Therefore, the target link key would be logged
by HCI dump in C and the connection will be disconnected
without authentication failure which may cause the expiration
of the existing link key on C.
Link key extraction via HCI dump. We use Nexus 5x
running Android 8, LG V50 and Galaxy S8 running Android
9, Pixel 2 XL, LG VELVET and Galaxy s21 running Android
11 as the role of C, Nexus 5x running Android 6 as the role
of A, and LG VELVET as the role of M. Since they are
running Android, all testing devices in C provide the ‘Enable
Bluetooth HCI snoop log’ menu which allows recording of
the Bluetooth HCI dump log in the background. However,
the recorded logs are stored in an inaccessible folder such as
‘data/misc/bluedroid/logs.’ Thus, instead of directly accessing
the location, we leveraged an Android developer option, ‘bug
report’ [22]. Because the bug report allows users to extract the
HCI dump logs, we could pull the recorded HCI dump logs
from C devices without any obstacle. From the logs, we could
conﬁrm that all of C left their link keys associated with M in
the HCI dump logs, and could extract them successfully.
link key for M on A,
the extracted link keys through the following steps:
After extracting the link keys, we veriﬁed the validity of
1) Change BDADDR of A to that of C,
2) Install fake bonding information, including the extracted
3) Turn off and then turn on Bluetooth on A, and
4) Establish a Bluetooth tethering connection between A
and M, and check whether following LMP authentica-
tion succeeds with the fake bonding information—they
do not start a new pairing procedure if the key is correct.
To install fake bonding information, we modify the de-
vice management ﬁle ‘/data/misc/bluedroid/bt conﬁg.conf’
in Nexus 5x. The fake bonding information includes the
BDADDR of M, extracted link key, and a list of proﬁle
services supported in M. Fig. 10 shows the fake bonding
information we added to bt conﬁg.conf, where the link key
(cid:62)(cid:23)(cid:27)(cid:29)(cid:28)(cid:19)(cid:29)(cid:91)(cid:91)(cid:29)(cid:91)(cid:91)(cid:91)(cid:29)(cid:91)(cid:91)(cid:29)(cid:91)(cid:91)(cid:64)(cid:3)
(cid:49)(cid:68)(cid:80)(cid:72)(cid:3)(cid:32)(cid:3)(cid:57)(cid:40)(cid:47)(cid:57)(cid:40)(cid:55)(cid:3)
(cid:273)(cid:3)
(cid:54)(cid:72)(cid:85)(cid:89)(cid:76)(cid:70)(cid:72)(cid:3)(cid:32)(cid:3)(cid:19)(cid:19)(cid:19)(cid:19)(cid:20)(cid:20)(cid:20)(cid:24)(cid:16)(cid:19)(cid:19)(cid:19)(cid:19)(cid:16)(cid:20)(cid:19)(cid:19)(cid:19)(cid:16)(cid:27)(cid:19)(cid:19)(cid:19)(cid:16)(cid:19)(cid:19)(cid:27)(cid:19)(cid:24)(cid:73)(cid:28)(cid:69)(cid:22)(cid:23)(cid:73)(cid:69)(cid:3)(cid:19)(cid:19)(cid:19)(cid:19)(cid:20)(cid:20)(cid:20)(cid:25)(cid:16)
(cid:19)(cid:19)(cid:19)(cid:19)(cid:16)(cid:20)(cid:19)(cid:19)(cid:19)(cid:16)(cid:27)(cid:19)(cid:19)(cid:19)(cid:16)(cid:19)(cid:19)(cid:27)(cid:19)(cid:24)(cid:73)(cid:28)(cid:69)(cid:22)(cid:23)(cid:73)(cid:69)(cid:3)
(cid:47)(cid:76)(cid:81)(cid:78)(cid:46)(cid:72)(cid:92)(cid:3)(cid:32)(cid:3)(cid:26)(cid:20)(cid:68)(cid:26)(cid:19)(cid:28)(cid:27)(cid:20)(cid:73)(cid:22)(cid:19)(cid:71)(cid:25)(cid:68)(cid:73)(cid:28)(cid:72)(cid:21)(cid:19)(cid:68)(cid:71)(cid:72)(cid:72)(cid:27)(cid:68)(cid:68)(cid:73)(cid:72)(cid:22)(cid:21)(cid:25)(cid:23)(cid:3)
Fig. 10: Fake bonding information for M
‘71a70981f3...’ is an example of extracted bonded key from
the HCI of C. The service is the list of universally unique
identiﬁers (UUID) that are supported in the corresponding
device M; 0x00001115 and 0x00001116 are the UUIDs of
Bluetooth tethering (PAN proﬁle). Since the roles of both PAN
server and client are supported in the Android platform, we
leverage the PAN proﬁle to make a proﬁle connection and
therefore trigger LMP authentication subsequently in step 5.
During the authentication, if the link key is incorrect, the LMP
authentication will fail and a new pairing procedure must be
initiated; otherwise, the LMP authentication will succeed and
the proﬁle connection will be established. Thus, by check-
ing whether the PAN connection is successfully established
without any additional pairing procedure, we can validate the
correctness of extracted link key.
Link key extraction via USB sniff. We test two Bluetooth
systems as C running Windows 10 on two PCs. One system
consists of CSR harmony host stack and QSENN CSR V4.0
(a USB type Bluetooth controller), and another one consists of
Microsoft Bluetooth Driver host stack [26] and QSENN CSR
V4.0. Thus, the physical interfaces of HCI of both systems
are USB.
The attack procedure is the same as the ﬁrst experiment,
that we extract HCI data by snifﬁng the physical
except
interface of HCI (which is USB) using ‘Free USB Analyzer’
[16] rather than a HCI dump log. When snifﬁng, the raw
data of USB trafﬁc is captured in a binary stream. We thus
develop a converter in C that converts the binary stream
into a string of hex codes in ASCII format [27]. From the
converted data, we found that the USB dump comprises lots
of HCI and NULL data. However, as the converted data is in
ASCII format, we can simply ﬁnd the hex data corresponding
to the HCI Link Key Request Reply HCI command. For
example, since the command always starts with ‘0b 04 16’
where the ﬁrst two bytes (0x0b04) indicate the opcode of
HCI Link Key Request Reply and the rest one byte (0x16)
is the length value of its payload, we can extract the target link
key by searching ‘0b 04 16’ in the converted data as Fig. 11a
shows. In the ﬁgure, we can see the link key follows six bytes
(indicating the address of the peer device) after ‘0b 04 16’,
which is ‘0xc4f16e949f...89c324’ in big-endian byte order.
To validate the correctness of the link key extracted from
USB snifﬁng, we compared the link key extracted by USB
snifﬁng on C and that
logged by HCI dump in M. For
example, as Fig. 11a and 11b show, we can check the link
key from USB sniff on C and that from HCI dump on M
are the same, thereby we can conﬁrm the link key is correctly
extracted.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:30 UTC from IEEE Xplore.  Restrictions apply. 
234
(cid:49)(cid:50)(cid:37)(cid:49)(cid:38)(cid:39)(cid:3)(cid:94)(cid:3)(cid:46)(cid:39)(cid:48)(cid:41)(cid:54)(cid:42)(cid:3)
(cid:46)(cid:75)(cid:80)(cid:77)(cid:3)(cid:45)(cid:71)(cid:91)(cid:3)
(a) Link key in USB sniff from C
(a) HCI dump for normal pairing
(b) Corresponding link key from M