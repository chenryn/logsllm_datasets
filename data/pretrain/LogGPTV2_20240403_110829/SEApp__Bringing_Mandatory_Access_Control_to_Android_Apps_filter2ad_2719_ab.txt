In Appendix A.3 we give a demonstration of how the show-
case app can support the execution of media components
relying on a native library in a dedicated process. We also
describe how the developer can leverage SEApp to prevent
the code of the library from the execution of unwanted or
unintended operations, like opening a network connection.
3.2 Modular app compartmentalization
The motivations presented above become more frequent as
apps increase their size and complexity, and several important
apps see a continuous increase in these parameters. For in-
stance, Facebook Messenger version 285 contains more than
500 components and WhatsApp Messenger version 2.20 more
than 300. This increase in size and the need to manage it is
testiﬁed by the development of App Bundles [4], Android’s
new, ofﬁcial publishing format that offers a more efﬁcient
way to build and release modular applications.
In these large and modular apps, developers ﬁnd it difﬁcult
to fully control which components of an app are using sensi-
tive data3. The availability of a solution such as SEApp can
greatly reduce such risk. A better compartmentalization can
reduce the impact of internal vulnerabilities in modular apps,
since each module can be associated with a dedicated policy
fragment. From a security and software engineering stand-
point, SEApp permits to separate the activities of security
policy maintenance and development of new features.
3.3 Compatibility with Android design
Looking at the evolution of Android, it is clear that our pro-
posal is consistent with the evolution of the operating system
and the desire of its designers to let app developers have ac-
cess to an extensive and ﬂexible collection of security tools.
The major obstacles, as perceived by OS developers, on offer-
ing to app developers the use of MAC services are: weakening
of the protection of system components; performance impact;
usability by app developers. The work we did solves these
concerns: our approach guarantees that app policies do not
have an impact on the system policy (Section 4.3); the app
policy can be speciﬁed declaratively and attention has been
paid to let developers adopt the approach in a convenient way
(Section 5.2); and, experiments demonstrate the acceptable
performance impact, with a quite limited overhead at app
installation time, and a negligible runtime impact (Section 7).
3.4 Compatibility with other proposals
As presented in Section 3.1, SEApp by itself provides pro-
tection against a broad spectrum of attacks (see Appendix),
but its merit does not end there. As multiple literature pro-
posals (e.g., [35, 55, 71]) build upon process isolation and use
it to accomplish separation of privileges at the application
layer, SEApp could be used as building block to enforce such
restrictions at the MAC layer too, enabling defense in depth.
Moreover, SEApp could also work in conjunction with other
solutions that work at MAC level such as FlaskDroid [37], to
beneﬁt of its Userspace Object Managers (USOMs) coverage
of the Android system services and provide ﬁner granularity
in access to services.
4 SEApp policy language
To support the use cases presented in Section 3, we want the
developer to have control of the SELinux security context of
subjects and objects related to her security enhanced app. To
each of them is assigned a type (also called domain when it
labels processes). As types directly relate to groups of permis-
sions, the evaluation of security contexts is the foundation of
each security decision. Since apps may offer many complex
functions, the policy language has to provide the ﬂexibility of
3The topic was explicitly considered in [30], an interview with Android’s
VP of Engineering.
3616    30th USENIX Security Symposium
USENIX Association
Table 1: Application policy module CIL syntax
Policy module syntax
→ (block blockId cilStmt∗)
→ typeStmt | typeAttrStmt | typeAttrSetStmt | typeBoundsStmt | typeTransStmt | macroStmt | allowStmt
→ (type typeId)
→ (typeattribute typeAttrId)
blockStmt
cilStmt
typeStmt
typeAttrStmt
typeAttrSetStmt → (typeattributeset typeAttrId ((cid:104)typeId | typaAttrId(cid:105)+))
typeBoundsStmt → (typebounds parentTypeId childTypeId)
typeTransStmt → (typetransition sourceTypeId targetTypeId classId [objectName] defaultTypeId)
macroStmt
allowStmt
→ (call macroId (typeId))
→ (allow (cid:104)sourceTypeId | sourceTypeAttrId(cid:105) (cid:104)targetTypeId | targetTypeAttrId | self(cid:105) classPermissionId+)
deﬁning multiple domains with distinct privileges so that the
app, according to the task it has to do, may switch to the least
privileged domain needed to accomplish the job.
The app policy is speciﬁed in a module, provided by the
app to describe its own types. The policy module is processed
at app installation time by a component of the system, called
SEApp Policy Parser, responsible to verify that the policy is
correct and does not introduce vulnerabilities into the system.
The addition of a policy module is managed by combining
the new module with the platform policy and the previous
installed ones, producing after policy compilation a single
binary representation of the global policy.
In this section we provide a description of the SEApp
policy language and the restrictions each module is subject
to. Policy conﬁguration is detailed in Section 5, while policy
compilation and runtime support are discussed in Section 6.
4.1 Choice of policy language
SEAndroid supports two languages for policies, Type En-
forcement (TE) [67] and Common Intermediate Language
(CIL) [57]. TE was the language available in the early im-
plementations of SELinux, while CIL was later introduced to
offer an easy to parse syntax that avoids the pervasive use of
general purpose macro processors (e.g., M4 [48]). Another
aspect that differentiates them is that, in Android, TE rep-
resentations are internally converted into CIL before being
compiled into the SELinux binary policy. To avoid the addi-
tional translation step being performed at each policy module
installation, we decided to use CIL over TE.
4.2 Deﬁnition of types and type-attributes
CIL offers a multitude of commands to deﬁne a policy, but
only a subset has been selected for the deﬁnition of an app
policy module. This was done to control the impact of the
policy module on the system and it may, as a side effect,
facilitate the work of the app developer writing the policy.
The syntax is described in Table 1. To declare a type, the
type statement can be used. This permits to declare the types
involved in an access vector (AV) rule, which grants to a
source type a list of permissible actions over a target type. AV
rules are deﬁned through the allow statement.
When writing a policy, there is frequently the need to assign
the same set of authorizations to multiple types. To avoid the
repetition of multiple allow declarations, it is convenient to
refer to multiple types using a single entity, the type-attribute.
Using the typeattributeset statement we associate with a
typeattribute a set of types and type-attributes. Each type-
attribute essentially represents the set of types that is produced
by the (possibly multi-step) expansion of its deﬁnition. The
semantics is that each of the types that directly or indirectly
(using type-attributes) appears as the source of an allow rule
will be authorized to operate with the speciﬁed permission on
each of the types directly or indirectly appearing as the target.
This improves the conciseness and readability of the policy.
After deﬁning the domains with the least group of per-
missions necessary to fulﬁll the task, the developer can also
conﬁgure the domain transitions using the typetransition
statement. By doing so, it is possible to ensure that impor-
tant native processes run in dedicated domains with limited
privileges, leading to intra-app compartmentalization.
4.3 Policy constraints
The introduction of dedicated modules for apps raises the
need to carefully consider the integration of apps and system
policies. The ﬁrst requirement is that an app policy must
not change the system policy and can only have an impact
on processes and resources associated with the app itself.
To preserve the overall consistency of the SELinux policy,
each policy module must respect some constraints. Since
Android supports the side-loading of apps [3], we cannot
rely on app markets to verify app policies. Therefore, the
enforcement of constraints is done on the device, by both the
SEApp Policy Parser and the SELinux environment. If any of
these components raises an exception, during the veriﬁcation
or compilation of the policy, app installation is stopped.
To ensure that policy modules do not interfere with the
system policy and among each other, a ﬁrst necessity is that
USENIX Association
30th USENIX Security Symposium    3617
policy modules are wrapped in a unique namespace obtained
from the package name. This is done through the block CIL
statement, which prevents the deﬁnition of the same SELinux
type twice, as the resulting global identiﬁer is formed by the
concatenation of the namespace and the local type identiﬁer.
Also, the use of a namespace speciﬁc for the policy module
permits to discriminate between local types or type-attributes
TA (namespace equal to the current app package name), types
or type-attributes of other modules TA(cid:48)(cid:54)=A (namespace equal to
some other app package), and system types or type-attributes
TS (system namespace). At installation time, the SEApp Pol-
icy Parser determines the origin of each type, with an explicit
prohibition for policies to refer to types or type-attributes de-
ﬁned by other policy modules, while use of system types or
type-attributes is subject to restrictions.
With regard to the allow statement, a dedicated analysis
is performed by the SEApp Policy Parser. For each rule, the
global origin of source and target types is determined. We
refer to system origin S, when the type is directly or indirectly
associated with a system type in the expansion of its deﬁnition,
while to local origin A otherwise. Based on the origin of
source and target of each rule, there are four cases. The case
AllowSS, i.e., a permission with system origin both as source
and target, is prohibited, as it represents a direct platform
policy modiﬁcation. The case AllowAA is always permitted,
as it only deﬁnes access privileges internal to the app module.
The cases AllowAS and AllowSA are more delicate.
An AllowAS originates when a local type needs to be
granted a permission on a system type. A concrete exam-
ple is shown in Section 3, where the :media process needs
access to the camera_service. The case cannot be decided
locally by the SEApp Policy Parser, therefore it is delegated to
the SELinux decision engine during policy enforcement. This
crucial postponed restriction depends on the constraint that
all app types have to appear in a typebounds statement [32],
which limits the bounded type to have at most the access
privileges of the bounding type. As Android 11 assigns to
generic third-party apps the untrusted_app domain, this is
the candidate we use to bound the app types. If the AllowAS
rule gives to the local type more privileges than those asso-
ciated with untrusted_app, and at runtime these privileges
are used, the SELinux decision engine identiﬁes the policy
violation and prohibits the action.
AllowSA rules are the key to regulate how system compo-
nents access internal types. To be compliant with Android,
the local types introduced by the app policy module must
ensure interoperability with system services crucial to the
app lifecycle. As an example Zygote [29], the native service
which spawns and conﬁgures new app processes, can only ex-
ecute processes labeled with the type-attribute domain, which
is assigned by default to untrusted_app. However, giving
app developers the freedom to directly deﬁne AllowSA rules
would lead to two major issues: (i) the rules would depend
on system policy internals, leading to a solution with lim-
Table 2: SEApp macros to grant permissions to local types
Macro
md_appdomain
md_netdomain
md_bluetoothdomain
md_untrusteddomain
mt_appdataﬁle
Usage
to label app domains
to access network
to access bluetooth
to get full untrusted app permissions
to label app ﬁles
ited abstraction and modularity; (ii) explicit AllowSA rules
could lead to violations of the security assumptions of a sys-
tem service, with the risk of introducing vulnerabilities (e.g.,
leading to a confused deputy attack [36]). For these reasons
we prohibit their explicit use. To limit system types to only
those already dealing with untrusted content and simplify-
ing the policy, we rely on CIL macros, a set of function-like
statements that, when invoked by the SEApp policy module,
produce a predeﬁned list of policy statements. This approach
permits to retain control on the rules produced, ensuring no
violation of the default system policy. Also, it makes the work
of the developer easier, by abstracting away system policy
internal details. To preserve the interoperability with system
services, third-party app functionality has been broken down
into the CIL macros listed in Table 2. This list has been iden-
tiﬁed looking at the internal structure of the untrusted_app
domain. With this design philosophy, the developer can grant
a basic set of permissions to a type (by calling one or more
macros), and then add to it ﬁne-grained authorizations with
AllowAS rules.
With regard to the typeattributeset statement, the
SEApp Policy Parser uses a veriﬁcation strategy similar to the
one used for allow rules. First, the global origin of the type-
attribute and of the set expression of types and type-attributes
is determined. All statements that directy or indirectly relate
to system types are blocked. This avoids implicit permission
propagation from system and local types.
Similarly, for the typetransition statement, the SEApp
Policy Parser veriﬁes the origin of the types involved, with a
prohibition for all the statements that relate to system types,
as they may lead to an escalation of privileges.
5 Policy conﬁguration
In this section we explore the structure of application policy
modules. Before describing the content of SEApp conﬁgu-
ration ﬁles, we give a short description of how SEAndroid
deﬁnes the security contexts of processes, ﬁles and system
services. There are strong similarities between the structure of
system and app policies. Indeed, we designed our solution as
a natural extension of the approach used to protect the system.
Also, our design maintains full backward compatibility. De-
velopers who are not interested in taking advantage of MAC
capabilities do not have to change their apps.
3618    30th USENIX Security Symposium
USENIX Association
5.1 SEAndroid policy structure
Compared to a traditional Linux implementation, Android
expands the set of conﬁguration ﬁles where SELinux [18]
security contexts are described, because a wider set of entities
is supported. SEAndroid complements the common SELinux
ﬁles (i.e., file_contexts and genfs_contexts) with 4
additional ones: property_contexts, service_contexts,
seapp_contexts and mac_permissions.xml. Also, the im-
plementation of the SELinux library (libselinux) [68] has
been modiﬁed introducing new functions (to assign domains
to app processes and types to their dedicated directory). We
concisely describe the role of SEAndroid context ﬁles.
5.1.1 Processes
With reference to app processes, Android assigns the security
context based on the class the app falls in. The speciﬁca-
tion of the classes and their security labels are deﬁned in the
seapp_contexts policy ﬁle. Most classes state two security
contexts: one for the process (domain property) and the other
one for the app dedicated directory (type property). A num-
ber of input selectors determine the association of an app with
a class. Among these, seinfo ﬁlters on the tag associated
with the X.509 certiﬁcate used by the developer to sign the
app. The mapping between the certiﬁcate and the seinfo tag
is achieved by the mac_permissions.xml conﬁguration ﬁle.
Since the enumeration of all third-party app certiﬁcates is
not possible a priori, all third-party apps are labeled with the
untrusted_app domain by default.
5.1.2 Files
SELinux splits the conﬁguration of security contexts of ﬁles
between file_contexts and genfs_contexts, with the for-
mer used with ﬁlesystems that support extended ﬁle attributes
(e.g., /data), while the latter with the ones that do not (e.g.,
/proc). To apply file_contexts updates, two approaches
are available: either rebuild the ﬁlesystem image, or run re-
storecon operation on the ﬁle or directory to be relabeled (this
is the default method used by permissioned system processes).
Conversely, to apply genfs_contexts changes, a reboot of
the device or a sequence of ﬁlesystem un-mount and mount
operations has to be performed.
Figure 3: SEApp policy structure
ﬁle, it is then possible to control which processes can register
(add) and lookup (ﬁnd) a Binder reference for the service, and
therefore connect to it. However, since Binder handles resem-
ble tokens with almost unconstrained delegation, denying a
process to get the Binder through the servicemanager does
not prevent the process from obtaining it by other means (e.g.,
by abusing other processes that already hold it). Furthermore,
preventing a process from obtaining a Binder reference pre-
vents the process from using any functionality exposed by the