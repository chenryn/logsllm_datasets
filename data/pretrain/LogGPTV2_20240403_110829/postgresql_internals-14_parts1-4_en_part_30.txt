Sort (cost=21.03..21.04 rows=1 width=128)
Sort Key: c.relname
−> Nested Loop Left Join (cost=0.00..21.02 rows=1 width=128)
Join Filter: (n.oid = c.relnamespace)
−> Seq Scan on pg_class c (cost=0.00..19.93 rows=1 width=72)
Filter: ((relkind = ANY ('{r,p}'::"char"[])) AND (pg_g...
−> Seq Scan on pg_namespace n (cost=0.00..1.04 rows=4 wid...
(7 rows)
SeqScannodesshowninthequeryplancorrespondtoreadingthetable,whilethe p.
NestedLoopnoderepresentsthejoinoperation. p.
PLANNEDSTMT
SORT
TARGETENTRY NESTLOOP
SEQSCAN SEQSCAN OPEXPR
TARGETENTRY
pg_class pg_namespace n.oid=c.relnamespace
OPEXPR
relkind=ANY('r,p'::"char"[])ANDpg_get_userbyid(relowner)='postgres'::name
Plansearch. Postgreusesacost-basedoptimizer;1itgoesoverpotentialplans
andestimatestheresourcesrequiredfortheirexecution(suchas/operationsor
cycles).Normalizedtoanumericvalue,thisestimationiscalledthecostofthe
plan.Ofalltheconsideredplans,theonewiththelowestcostisselected.
1 backend/optimizer/README
293
Chapter16 QueryExecutionStages
Theproblemisthatthenumberofpotentiallyavailableplansgrowsexponentially
withthenumberofjoinedtables,soitisimpossibletoconsiderthemall—evenfor
relativelysimplequeries.Thesearchistypicallynarroweddownusingthedynamic
programmingalgorithmcombinedwithsomeheuristics. Itallowstheplannerto
findamathematicallyaccuratesolutionforquerieswithalargernumberoftables
withinacceptabletime.
Anaccuratesolutiondoesnotguaranteethattheselectedplanisreally theoptimalone,
astheplannerusessimplifiedmathematicalmodelsandmaylackreliableinputdata.
Managing the order of joins. A query can be structured in a way that limits the
searchscopetosomeextent(atariskofmissingtheoptimalplan).
v. • Commontableexpressionsandthemainquerycanbeoptimizedseparately;
toguaranteesuchbehavior,youcanspecifytheclause.1
• Subqueries run within non- functions are always optimized separately.
(Sfunctionscansometimesbeinlinedintothemainquery.2)
• Ifyousetthejoin_collapse_limitparameteranduseexplicitclausesinthe
query,theorderofsomejoinswillbedefinedbythequerysyntaxstructure;
thefrom_collapse_limitparameterhasthesameeffectonsubqueries.3
Thelatterpointmayhavetobeexplained.Let’stakealookatthequerythatdoes
notspecifyanyexplicitjoinsfortableslistedintheclause:
SELECT ...
FROM a, b, c, d, e
WHERE ...
Heretheplannerwillhavetoconsiderallthepossiblepairsofjoins. Thequeryis
representedbythefollowingpartoftheparsetree(shownschematically):
1 postgresql.org/docs/14/queries-with.html
2 wiki.postgresql.org/wiki/Inlining_of_SQL_functions
3 postgresql.org/docs/14/explicit-joins.html
294
16.2 SimpleQueryProtocol
FROMEXPR
A B C D E
Inthenextexample,joinshaveacertainstructuredefinedbytheclause:
SELECT ...
FROM a, b JOIN c ON ..., d, e
WHERE ...
Theparsetreereflectsthisstructure:
FROMEXPR
A JOINEXPR D E
B C
Theplannertypicallyflattensthejointree,sothatitlooksliketheoneinthefirst
example. Thealgorithmrecursivelytraversesthetreeandreplaceseach
nodewithaflatlistofitselements.1
However, such collapsing is performed only if the resulting flat list has no more
thanjoin_collapse_limitelements. Inthisparticularcase,thenodewould 8
notbecollapsedifthejoin_collapse_limitvaluewerelessthanfive.
Fortheplanner,itmeansthefollowing:
• Tablemustbejoinedwithtable(orviceversa,mustbejoinedwith;the
orderofjoinswithinapairisnotrestricted).
• Tables,,andtheresultofjoiningandcanbejoinedinanyorder.
1 backend/optimizer/plan/initsplan.c,deconstruct_jointreefunction
295
Chapter16 QueryExecutionStages
Ifthejoin_collapse_limitparameterissettoone,theorderdefinedbyexplicit
clausesispreserved.
Asforoperands,theyarenevercollapsed,regardlessofthevalueof
thejoin_collapse_limitparameter.
8 The from_collapse_limit parameter controls subquery flattening in a similar way.
Althoughsubqueriesdonotlooklikeclauses,thesimilaritybecomesapparent
attheparsetreelevel.
Hereisasamplequery:
SELECT ...
FROM a,
(
SELECT ... FROM b, c WHERE ...
) bc,
d, e
WHERE ...
Thecorrespondingjointreeisshownbelow. Theonlydifferencehereisthatthis
treecontainsthenodeinsteadof(hencetheparametername).
FROMEXPR
A FROMEXPR D E
B C
Genetic query optimization. A flattened tree may contain too many elements at
one level—either tables or join results, which have to be optimized separately.
Planningtimedependsexponentiallyonthenumberofdatasetsthathavetobe
joined,soitcangrowbeyondallreasonablelimits.
on Ifthegeqoparameterisenabledandthenumberofelementsatonelevelexceeds
12 thegeqo_thresholdvalue,theplannerwillusethegeneticalgorithmtooptimizethe
296
16.2 SimpleQueryProtocol
query.1 Thisalgorithmismuchfasterthanitsdynamicprogrammingcounterpart,
butitcannotguaranteethatthefoundplanwillbeoptimal. Sotheruleofthumb
istoavoidusingthegeneticalgorithmbyreducingthenumberofelementsthat
havetobeoptimized.
Thegeneticalgorithmhasseveralconfigurableparameters,2butIamnotgoingto
coverthemhere.
Choosing the best plan. Whether the plan can be considered optimal or not de-
pendsonhowaparticularclientisgoingtousethequeryresult.Iftheclientneeds
thefullresultatonce(forexample,tocreateareport),theplanshouldoptimize
retrieval of all the rows. But if the priority is to return the first rows as soon as
possible(forexample,todisplaythemonscreen),theoptimalplanmightbecom-
pletelydifferent.
Tomakethischoice,Postgrecalculatestwocomponentsofthecost:
=> EXPLAIN
SELECT schemaname, tablename
FROM pg_tables
WHERE tableowner = 'postgres'
ORDER BY tablename;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Sort (cost=21.03..21.04 rows=1 width=128)
Sort Key: c.relname
−> Nested Loop Left Join (cost=0.00..21.02 rows=1 width=128)
Join Filter: (n.oid = c.relnamespace)
−> Seq Scan on pg_class c (cost=0.00..19.93 rows=1 width=72)
Filter: ((relkind = ANY ('{r,p}'::"char"[])) AND (pg_g...
−> Seq Scan on pg_namespace n (cost=0.00..1.04 rows=4 wid...
(7 rows)
Thefirstcomponent(thestartupcost)representsthepriceyoupaytopreparefor
nodeexecution,whilethesecondcomponent(thetotalcost)comprisesalltheex-
pensesincurredbyfetchingtheresult.
1 postgresql.org/docs/14/geqo.html
backend/optimizer/geqo/geqo_main.c
2 postgresql.org/docs/14/runtime-config-query#RUNTIME-CONFIG-QUERY-GEQO.html
297
Chapter16 QueryExecutionStages
It is sometimes stated that the startup cost is the cost of retrieving the first rowof the
resultset,butitisnotquiteaccurate.
Tosingleoutthepreferredplans,theoptimizercheckswhetherthequeryusesa
cursor (either via the  command provided in  or declared explicitly in
/pg).1 Ifnot,theclientisassumedtoneedthewholeresultatonce,andthe
optimizerchoosestheplanwiththeleasttotalcost.
If the query is executed with a cursor, the selected plan must optimize retrieval
0.1 ofonlycursor_tuple_fractionofallrows.Tobemoreexact,Postgrechoosesthe
planwiththesmallestvalueofthefollowingexpression:2
startupcost+cursor_tuple_fraction(totalcost−startupcost)
Anoutlineofcostestimation. Toestimatethetotalcostofaplan,wehavetoget
costestimationsforallitsnodes. Thecostofanodedependsonitstype(itisob-
vious that the cost of reading heap data is not the same as the sorting cost) and
on the amount of data processed by this node (larger data volumes typically in-
cur higher costs). While node types are known, the amount of data can only be
projectedbasedontheestimatedcardinalityofinputsets(thenumberofrowsthe
nodetakesasinput)andtheselectivityofthenode(thefractionofrowsremaining
p. attheoutput).Thesecalculationsrelyonthecollectedstatistics,suchastablesizes
anddatadistributionintablecolumns.
Thus,theperformedoptimizationdependsoncorrectnessofstatisticaldatathat
isgatheredandupdatedbyautovacuum.
Ifcardinalityestimationisaccurateforeachnode,thecalculatedcostislikelyto
adequately reflect the actual cost. The main planning flaws usually result from
incorrectestimationofcardinalityandselectivity,whichcanbecausedbyinaccu-
rateoroutdatedstatistics,inabilitytouseit,or—toalesserextent—byimperfect
planningmodels.
Cardinalityestimation. Tocalculatethecardinalityofanode,theplannerhasto
recursivelycompletethefollowingsteps:
1 backend/optimizer/plan/planner.c,standard_plannerfunction
2 backend/optimizer/util/pathnode.c,compare_fractional_path_costsfunction
298
16.2 SimpleQueryProtocol
 Estimate the cardinality of each child node and assess the number of input
rowsthatthenodewillreceivefromthem.
 Estimatetheselectivityofthenode,thatis,thefractionofinputrowsthatwill
remainattheoutput.
Thecardinalityofthenodeistheproductofthesetwovalues.
Selectivityis represented bya number from  to . The smaller the number,the higher
theselectivity,andviceversa,anumberthatisclosetoonedenoteslowselectivity.Itmay
seemillogical,buttheideaisthatahighlyselectiveconditionrejectsalmostalltherows,
whiletheonethatdismissesonlyafewhaslowselectivity.
First, the planner estimates cardinalities of leaf nodes that define data access
methods. Thesecalculationsrelyonthecollectedstatistics,suchasthetotalsize
ofthetable.
Selectivity of filter conditions depends on their types. In the most trivial case,
itcanbeassumedtobeaconstantvalue,althoughtheplannertriestouseallthe
availableinformationtorefinetheestimation.Ingeneral,itisenoughtoknowhow
toestimatesimplefilterconditions;ifaconditionincludeslogicaloperations,its
selectivityiscalculatedbythefollowingformulas:1
sel =sel sel
xandy x y
sel =1−(1−sel )(1−sel )=sel +sel −sel sel
xory x y x y x y
Unfortunately, these formulas assume that predicates x and y do not depend on p.
eachother.Forcorrelatedpredicates,suchestimationswillbeinaccurate.
To estimate the cardinality of joins,the planner has to get the cardinality of the
Cartesian product (that is, the product of cardinalities of two data sets) and es-
timate the selectivity of join conditions, which is again dependent on condition
types.
Cardinalityofothernodes(suchassortingoraggregation)isestimatedinasimilar
manner.
Itisimportanttonotethatincorrectcardinalityestimationforlowerplannodes
affectsallthesubsequentcalculations,leadingtoinaccuratetotalcostestimation
1 backend/optimizer/path/clausesel.c,clauselist_selectivity_ext&clauselist_selectivity_orfunctions
299
Chapter16 QueryExecutionStages
andapoorplanchoice.Tomakethingsworse,theplannerhasnostatisticsonjoin
results,onlyontables.
Costestimation. Theprocessofestimatingthecostisalsorecursive.Tocalculate
thecostofasubtree,itisrequiredtocalculateandsumupthecostsofallitschild
nodesandthenaddthecostoftheparentnodeitself.
Toestimatethecostofanode,Postgreappliesthemathematicalmodelofthe
operationperformedbythisnode,usingthealreadyestimatednodecardinalityas
input.Foreachnode,bothstartupandtotalcostsarecalculated.
Someoperationshavenoprerequisites,sotheirexecutionstartsimmediately;such
nodeshavezerostartupcost.
Other operations, on the contrary, need to wait for some preliminary actions to
complete. For example, a sort node usually has to wait for all the data from its
childnodesbeforeitcanproceedtoitsowntasks. Thestartupcostofsuchnodes
isusuallyhigherthanzero: thispricehastobepaideveniftheabovenode(orthe
client)needsonlyonerowofthewholeoutput.
Allcalculationsperformedbytheplanneraresimplyestimations,whichmayhave
nothingtodowiththeactualexecutiontime.Theironlypurposeistoenablecom-
parisonofdifferentplansforthesamequeryinthesameconditions.Inothercases,
itmakesnosensetocomparequeries(especiallydifferentones)intermsoftheir
cost. Forexample,thecostcouldhavebeenunderestimatedbecauseofoutdated
statistics;oncethestatisticsarerefreshed,thecalculatedfiguremayrise,butsince
theestimationbecomesmoreaccurate,theserverwillchooseabetterplan.
Execution
Theplanbuiltduringqueryoptimizationnowhastobeexecuted.1
Theexecutoropensaportal inthebackend’smemory;2 itisanobjectthatkeeps
thestateofthequerycurrentlybeingexecuted.Thisstateisrepresentedasatree
1 postgresql.org/docs/14/executor.html
backend/executor/README
2 backend/utils/mmgr/portalmem.c
300
16.2 SimpleQueryProtocol
SORT
NESTLOOP
SEQSCAN SEQSCAN
pg_class pg_namespace
thatrepeatsthestructureoftheplantree. Thenodesofthistreeoperatelikean
assemblyline,requestingandsendingrowsfromoneanother.
Queryexecutionstartsattheroot. Therootnode(whichrepresentstheop-
erationinthisexample)pullsthedatafromitschildnode.Havingreceivedallthe
rows,itsortsthemandpassesthemontotheclient.
Some nodes (like the  node shown in this illustration) join data sets re-
ceived from different sources. Such a node pulls the data from two child nodes,
and,having received a pair of rows that satisfy the join condition,passes the re-
sultingrowupwardsrightaway(unlikesorting,whichhastogetalltherowsfirst).
Atthispoint,theexecutionofthenodeisinterrupteduntilitsparentrequeststhe
nextrow. Ifonlyapartialresultisrequired(forexample,thereisaclausein
thequery),theoperationwillnotbeperformedinfull.
Thetwoleafnodesofthetreeareresponsiblefortablescans. Whenthe
parent node requests the data from these nodes, they fetch the subsequent row
fromthecorrespondingtable.
Thus,somenodesdonotstoreanyrows,passingthemupwardsimmediately,but
others(suchas)havetokeeppotentiallylargevolumesofdata. Forthispur-
pose,awork_memchunkisallocatedinthebackend’smemory;ifitisnotenough, 4MB
theremainingdataisspilledintotemporaryfilesondisk.1
Aplancanhaveseveralnodesthatneedadatastorage,soPostgremayallocate
severalmemorychunks,eachofthework_memsize. Thetotalsizeofthata
querycanuseisnotlimitedinanyway.
1 backend/utils/sort/tuplestore.c
301
Chapter16 QueryExecutionStages
16.3 Extended Query Protocol
Whenusingthesimplequeryprotocol,eachcommand(evenifitisbeingrepeated
multipletimes)hastogothroughalltheaforementionedstages:
 parsing
 transformation
 planning
 execution
However,thereisnopointinparsingoneandthesamequerytimeandagain. Re-
peatedparsingofqueriesthatdifferonlyinconstantsdoesnotmakemuchsense
either—theparsetreestructurestillremainsthesame.
Anotherdownsideofthesimplequeryprotocolisthattheclientreceivesthewhole
resultatonce,regardlessofthenumberofrowsitmaycontain.
Ingeneral,itispossibletogetovertheselimitationsusingcommands.Todeal
withthefirstone,youcanthequerybeforerunningthecommand;
thesecondconcerncanbeaddressedbycreatingacursorwithandreturn-
ingrowsvia. Butinthiscase,namingofthesenewlycreatedobjectsmust
behandledbytheclient,whiletheservergetsadditionaloverheadofparsingextra
commands.
Theextendedclient-serverprotocolprovidesanalternativesolution,enablingpre-
cisecontroloverseparateoperatorexecutionstagesatthecommandlevelofthe
protocolitself.
Preparation
Duringthepreparationstage,thequeryisparsedandtransformedasusual,butthe
resultingparsetreeiskeptinthebackend’smemory.
Postgrehasnoglobalcacheforqueries. Thedisadvantageofthisarchitecture
isobvious: eachbackendhastoparsealltheincomingqueries,evenifthesame
query has been already parsed by another backend. But there are some benefits
302
16.3 ExtendedQueryProtocol
too.Globalcachecaneasilybecomeabottleneckbecauseoflocks.Aclientrunning p.
multiplesmallbutdifferentqueries(liketheonesvaryingonlyinconstants)gen-
erates much traffic and can negatively affect performance of the whole instance.