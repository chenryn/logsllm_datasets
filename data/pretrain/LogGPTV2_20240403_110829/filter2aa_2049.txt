# Razorback Overview

## What is Razorback?

Razorback is an open-source framework (GPLv2) designed to enable advanced data processing and event detection. It can capture and analyze data as it traverses the network, after it has been received by a server, and perform sophisticated event correlation. Razorback is our response to the evolving threat landscape.

## The Challenge

- **Shift in Attack Vectors**: Attacks have transitioned from targeting servers to targeting clients.
- **Obfuscation Techniques**: Common attack vectors are easily obfuscated using scripting languages, compression, and other methods.
- **Complex File Formats**: Modern file formats are increasingly complex and difficult to parse.
- **Back-Channel Systems**: These systems are becoming more challenging to detect.

## Real-Time Processing Challenges

- **Emulation Requirements**: Inline systems must emulate the processing of thousands of desktops.
- **Statistical Evaluation**: Detecting backchannels often requires statistical analysis of network traffic.
- **Deep File Inspection**: This process is time-consuming and resource-intensive.

## Filling the Gap

Razorback addresses these challenges by providing:
- A flexible system that can handle various detection needs.
- An extensible, open, and scalable architecture.
- Facilitation of incident response, not just triggering alerts.

# Architecture

## Framework Goals

- **Data Entry**: Support for any arbitrary data type.
- **Routing**: Efficient routing of input data to relevant processors.
- **Alerting**: Integration with any framework-capable system.
- **Logging**: Detailed and verbose logging.
- **Data Utilization**: Intelligent use of all available data.

## System Components

### Dispatcher
- Manages communication between nuggets.
- Handles database interactions.
- Database-driven with APIs for easy nugget development.

### Database
- Stores configuration, event, contextual, and metadata information.
- Provides a rich source of data for event correlation and analysis.

### Nuggets
- **Collection Nugget**: Captures data from the network, devices, or log files.
- **Detection Nugget**: Analyzes incoming data, splits it into sub-blocks, and provides alert feedback.
- **Output Nugget**: Receives alert notifications and sends output data to relevant systems.
- **Intelligence Nugget**: Generates data for trending and event correlation.
- **Correlation Nugget**: Detects trends, identifies hosts of interest, and tracks intrusions.
- **Defense Update Nugget**: Dynamically updates network devices.
- **Workstation Nugget**: Authenticates analysts and provides management capabilities.

## Concept of Operations

### Registration Phase
- Nuggets register with the dispatcher, providing details about their capabilities and the data types they handle.
- The dispatcher assigns a unique ID and maintains a routing table.

### Data Flow
1. **Data Collection**: Collectors capture data and send it to the dispatcher.
2. **Detection**: The dispatcher routes the data to the appropriate detection nuggets.
3. **Alert Generation**: Detection nuggets generate alerts, which are sent to the dispatcher.
4. **Output**: Output nuggets receive and process the alert data, sending it to the relevant systems.

### Caching
- To avoid reprocessing, MD5 and size of files and subcomponents are stored.
- After a detection nugget update, known-good entries are marked as "tainted" to allow for retroactive alerts.

## Case Study: SMTP Traffic

- **Scenario**: An email with a malicious PDF attachment.
- **Process**:
  - The collection nugget captures the email.
  - The detection nugget analyzes the PDF and embedded EXE.
  - The output nugget generates an alert and sends it to the relevant system.

## Current Capabilities

### Collection Nuggets
- **Snort-as-a-Collector (SaaC)**: Captures SMTP, web, and DNS traffic.
- **Custom Post-Mortem Debugger**: Traps crashing applications and sends relevant data to the dispatcher.

### Detection Nuggets
- **Zynamics PDF Dissector**: Deobfuscates and normalizes PDF objects.
- **JavaScript Analyzer (w/ Zynamics)**: Searches for shellcode and heap spray.
- **Shellcode Analyzer (w/ libemu)**: Detects and executes shellcode.
- **Office Cat Nugget**: Parses Office files and detects known threats.
- **SWF Nugget**: Decompresses and analyzes Flash files.
- **ClamAV Nugget**: Performs signature- and pattern-based detection on any format.

### Output Nuggets
- **Deep Alerting System**: Provides comprehensive logging and normalized document views.
- **Maltego Interface**: Transforms data for visualization and analysis.

### Workstation Nuggets
- **CLI Functionality**: Allows analysts to query alerts, events, and nugget status.

## Programming Interfaces

### Custom API
- **API Functions**:
  - `registerNugget()`: Registers a new nugget.
  - `registerHandler()`: Specifies handler functions.
  - `sendData()`, `sendMetaData()`, `sendAlert()`: Send data, metadata, and alerts.
- **Language Support**: Nuggets can be written in any language, with wrappers provided for Ruby, Python, and Perl.

## Conclusion

Razorback is an extensible, open, and modular framework with limitless possibilities. All functions are separated and distributed, and the core is written in C with APIs available for other languages.

## How to Contribute

- **Write a Nugget**: If you see a need, write a nugget and submit it.
- **Source Code**: Available on Sourceforge.
- **Bug Tracking**: Via Sourceforge Trac.

## Contact Information

- **Patrick Mullen**
  - Email: [PI:EMAIL]
  - Twitter: @phoogazi
- **Ryan Pentney**
  - Email: [PI:EMAIL]
- **Sourcefire VRT**
  - Website: labs.snort.org
  - Blog: vrt-sourcefire.blogspot.com
  - Twitter: @VRT_Sourcefire

**Razorback Team**:
- Alex Kambis
- Alex Kirk
- Alain Zidouemba
- Christopher McBee
- Kevin Miklavcic
- Lurene Grenier
- Matt Olney
- Matt Watchinski
- Nigel Houghton
- Patrick Mullen
- Ryan Pentney
- Sojeong Hong