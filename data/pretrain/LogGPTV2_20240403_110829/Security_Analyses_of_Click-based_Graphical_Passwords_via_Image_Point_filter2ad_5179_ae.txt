passwords  and  their  effective  space,  and  to  compare  PCCP’s 
strength with other click-based passwords and with text passwords.  
7.1  Building Personalized Attack Dictionaries 
In PCCP, a next image is determined by a deterministic function of 
the  user  ID,  the  current  image,  and  the  clicked  tolerance  square. 
This results in different next images for different accounts even if 
the same point is clicked on an image. Therefore different accounts 
have different password spaces, but these password spaces have the 
same  size.  We  need  to  build  personalized  dictionaries  for  each 
account in dictionary attacks on PCCP. This is very different from 
dictionary attacks on PassPoints, wherein a single attack dictionary 
is applicable for all accounts.  
A  PCCP  password  comprises  5  click-points.  A  password  guess, 
referred to as a word, should also comprise of 5 points. Each word 
is assigned an M-index to measure its relative memorability. Since 
click-points in a PCCP password are independent of each other, the 
M-index of a word is empirically the sum of the M-indices of its 
constituent points.  
For each account, a personalized dictionary is built recursively by 
guessing one click-point at a time. More specifically, we start by 
guessing  the  first  click-point  of  the  password.  Distinguishable 
points  of  the  first  image  are  found  and  grouped  into  different 
tolerance squares. If there is more than one distinguishable point in 
a  tolerance  square,  the  one  with  the  smallest  M-index  (i.e.,  most 
memorable)  is  kept  while  the  others  are  deleted.  Each  survived 
distinguishable point is a guess of the first click-point. They form a 
dictionary 4(cid:6) of words; each word contains one point. 
(cid:6)  in 
Then  we  guess  the  second  click-point.  For  every  word  5&
(cid:6) ∈ 4(cid:6), we get the next image for 
dictionary 4(cid:6) obtained above, 5&
(cid:6) ,  find  and  process  distinguishable  points  of  the  image  as 
5&
described for the first image. Each survived distinguishable point is 
(cid:6),  resulting  in  a 
a  guess  of  the  second  click-point  and  added  to 5&
word containing 2 points, which is added to a new dictionary 47 
for  the  current  stage.  After  processing  all  the  words  in 4(cid:6) ,  we 
obtain a dictionary 47 of words; each word contains 2 points.  
The  above  process  is  repeated  until  all  the  five  click-points  have 
been  guessed,  resulting  in  a  dictionary  48 .  M-index  is  then 
calculated for each word in 48, and all the words in 48 are rank-
ordered from low to high M-index (i.e., the most memorable word 
first). The sorted dictionary, possibly truncated to a specific size, is 
the sought attack dictionary for the account. 
7.2  Experimental Setting  
PCCP was implemented for Web applications according to [7,19]. 
A total of 1200 images with a similar structural complexity as those 
used in [15-18] were collected from the Internet, including the two 
images  used  in  [18].  They  were  cropped,  if  necessary,  to 451 ×
331, the same size as in [15-18]. Hash function MD5 was used as 
the deterministic function to select the next image: the MD5 hash 
value was divided by 1200, the total number of images; the image 
1225indexed by the remainder was selected. The viewport size was set 
to 75 (cid:7) 75, the same as in [7,8].  
Like [18], we used the centered discretization proposed in [30] and 
the  tolerance  square  size 19 (cid:7) 19,  that  is,  a  tolerance  of  9  pixels 
along  both  horizontal  and  vertical  directions  from  a  click-point. 
Passwords  were  of  5  click-points,  resulting  in  a  theoretical 
password space of about 43 bits for each account: an image contains 
 (cid:2) 391  grid-squares; 
> (cid:7) <331 19⁄
there 
7.3  Password Collection 
We recruited 96 experienced computer users, who were high school 
or college students, or staff members. They included 51 males and 
45 females, and their age ranges from 16 to 48. Before password 
collection, they were trained for the tasks to perform. Each used a 
Web  browser  on  his/her  computer  to  create  a  password  with  and 
log into a remote authentication server.  
Each participant was asked to create a password of 5 click-points 
for a fictitious bank account. The participants were encouraged to 
shuffle less to create more random and thus more secure passwords. 
A  created  password  was  confirmed  immediately.  After  password 
enrollment, each participant was  required to pass two login tests, 
namely 1-day and 7-day recalls. Each test allowed up to three trials. 
A  participant  who  failed  either  test  was  required  to  re-create  a 
password  and  to  repeat  the  above  procedure.  Only  passwords 
successfully passing both tests were collected. This was to ensure 
that collected passwords were all memorable for a reasonable time. 
We collected 96 passwords, one from each participant. They were 
created  with  on  average  0.45  shuffles  per  click-point  and  a 
maximum of 2 shuffles per click-point.  
7.4  Experimental Results 
For each participant, we built personalized dictionaries of 35 bits 
(i.e.  2(cid:5)8  entries)  as  described  in  Section  7.1.  Words  in  a 
personalized dictionary were tested one by one in the order of their 
M-indices from low to high until either the password was found (a 
success) or the dictionary was exhausted (a failure). 
Figure 5 shows the number of passwords found at n-th bit range of 
guesses (i.e., found at the order of 2’ guesses but not at or before 
the order of 2’$(cid:6) guesses) for dictionaries built with the automated 
memorability  and  with  the  human-assisted  memorability.  The 
human-assisted  memorability  found  passwords  with  much  fewer 
guesses than the automated memorability. For example, the former 
found 2 passwords at the 25th bit range of guesses, and one more 
password at the 26th bit range of guesses, whereas the latter did not 
find any passwords until at the 32nd bit range of guesses. Figure 5 
also shows success rates with dictionaries of different sizes. Note 
that our 35-bit dictionaries could be truncated to any smaller size 
since dictionary entries were fully ordered.  
Figure 5: No. of found passwords at each bit range of guesses 
and success rate with dictionaries of different sizes. 
7.5  Analyses and Comparison 
To  evaluate  the  attack  efficiency,  we  adopt  the  partial  guessing 
metric  α-work-factor  AB  recently  introduced  in  [32],  which 
measures  the  fixed  minimum  number  of  guesses  per  account 
needed to achieve success rate (cid:29). This metric can be converted to 
an effective key-length, denoted by ACB, which is the size of a space 
of  uniformly  distributed  passwords  that  would  produce  the  same 
value of (cid:29)-work-factor [32], and defined in this paper as the size of 
the effective password space (SEPS) at success rate (cid:29).  
SEPS ACB has following properties. If an attack has a correct guess 
of the probability distribution of passwords and tests guesses in the 
order  of  their  probabilities  from  high  to  low,  then ACB  estimated 
from attack results increases with (cid:29): ACB D ACBEF, where G H 0. For 
a  random  guess  attack,  ACB  estimated  from  attack  results  is 
independent of (cid:29), i.e., a constant with respect to (cid:29). In addition, if 
the probability distribution of passwords is a uniform distribution, 
ACB, calculated from either attack results or the password probability 
distribution, is always independent of (cid:29). 
40
30
20
10
)
s
t
i
b
(
α
µ
r
o
t
c
a
f
-
k
r
o
w
-
α
Human-Assisted (PCCP)
Automatic (PCCP)
Automatic (PassPoints)
Human-Seeded (PassPoints)
0
0.00
10.00
20.00
30.00
40.00
50.00
60.00
Success Rate α (%)
Figure 6: Attack efficiency: number of guesses. 
Figure  6  shows  attack  efficiency  of (cid:29)-work-factor AB vs.  success 
rate (cid:29) for both the automated memorability (in red circle) and the 
human-assisted  memorability  (in  blue  diamond).  It  also  shows 
attack  efficiency  of  two  most  efficient  attacks  on  PassPoints:  the 
automated  attacks  reported  in  [18]  (in  green  triangle)  and  the 
human-seeded attacks reported in [15,16] (in purple cross), wherein 
the average of success rates on the two representative images was 
used as the success rate, and the highest success rate  was used if 
multiple  success  rates  were  reported  for  a  given  bit  range  of 
1226guesses.  Figure  7  shows  sizes  of  effective  password  spaces  at 
different success rates for each attack shown in Figure 6. Note that 
the  results  of  PCCP  and  PassPoints  shown  in  both  figures  were 
obtained with the same setting. Their theoretical password spaces 
were all 43 bits, and thus they are comparable.  
)
s
t
i
b
(
e
c
a
p
S
d
r
o
w
s
s
a
P
e
v
i
t
c
e
f
f
E
f
o
e
z
i
S
40
30
20
10
0
0.00
Human-Assisted (PCCP)
Automatic (PCCP)
Automatic (PassPoints)
Human-Seeded (PassPoints)
10.00
20.00
30.00
40.00
50.00
60.00
Success Rate α (%)
Figure 7: Attack efficiency: size of effective password space. 
7.5.1  Analyses of PCCP Attack Results  
With 35-bit dictionaries, the success rate is 55.21% for the human-
assisted memorability and 45.83% for the automated memorability, 
and  their  effective  password  spaces  are  35.86  and  36.13  bits, 
respectively.  
When  success  rate  (cid:29)  decreases,  the  effective  password  space 
remains nearly a constant size, varying within the range from 36.13 
to  36.58  bits,  with  an  average  of  36.31  bits,  for  the  automated 
memorability. However, the effective password space reduces from 
35.86  bit  at  (cid:29) = 55.21%  to  30.58  bits  at  (cid:29) = 2.08%  for  the 
human-assisted  memorability.  Meanwhile,  the  attack  efficiency 
with respect to a random guess attack remains nearly at a constant 
improvement  of  2@(cid:5)$(cid:5)J.(cid:5)(cid:6) = 103  times  for 
the  automated 
memorability  and  improves  from 2@(cid:5)$(cid:5)8.KJ = 141 to 2@(cid:5)$(cid:5)L.8K =
5480  times  for  the  human-assisted  memorability.  The  latter  is 
substantially more efficient than the former. 
The  human-assisted  memorability  attack  results  imply  that  the 
PCCP passwords were not uniformly distributed. The trial order of 
words in this attack was positively correlated to the probability of 
PCCP  passwords:  passwords  of  higher  probabilities  were  likely 
tested  before  passwords  of  lower  probabilities.  This  indicates 
efficacy of our memorability model.  
The  automated  memorability  attack  results,  on  the  other  hand, 
suggest that words in a 35-bit dictionary had the same probability 
to be the password – this is equivalent to random guesses. That is 
to  say,  the  M-index  ranking  order  calculated  with  the  automated 
memorability  is  irrelevant  to  the  probability  distribution  of 
passwords. This is unsurprising since the automated memorability 
approximates 
salience  and 
distinguishability, but largely ignoring semantics of both points and 
objects.  
IPM  model  with  only 
the 
The  automated  memorability  attack  results  also  suggest  that 