### References

1. FOCS'85.
2. A. Kate, G. M. Zaverucha, and I. Goldberg, "Constant-Size Commitments to Polynomials and Their Applications," in ASIACRYPT'10.
3. T. P. Pedersen, "A Threshold Cryptosystem without a Trusted Party," in EUROCRYPT'91.
4. R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin, "Secure Distributed Key Generation for Discrete-Log Based Cryptosystems," *Journal of Cryptology*, vol. 20, no. 1, 2007.
5. A. Kate, "Distributed Key Generation and Its Applications," Ph.D. dissertation, University of Waterloo, Ontario, Canada, 2010.
6. C. Cachin, K. Kursawe, and V. Shoup, "Random Oracles in Constantinople: Practical Asynchronous Byzantine Agreement Using Cryptography," *Journal of Cryptology*, vol. 18, no. 3, Jul 2005.
7. A. Kate and I. Goldberg, "Distributed Key Generation for the Internet," in IEEE ICDCS'09.
8. D. R. Stinson and R. Strobl, "Provably Secure Distributed Schnorr Signatures and a (t, n) Threshold Scheme for Implicit Certificates," in ACISP'01.
9. R. Gennaro, S. Goldfeder, and A. Narayanan, "Threshold-Optimal DSA/ECDSA Signatures and an Application to Bitcoin Wallet Security," in ACNS'16.
10. A. Herzberg, S. Jarecki, H. Krawczyk, and M. Yung, "Proactive Secret Sharing or: How to Cope with Perpetual Leakage," in CRYPTO'95.
11. A. Herzberg, M. Jakobsson, S. Jarecki, H. Krawczyk, and M. Yung, "Proactive Public Key and Signature Systems," in ACM CCS'97.
12. R. Gennaro, M. O. Rabin, and T. Rabin, "Simplified VSS and Fast-Track Multiparty Computations with Applications to Threshold Cryptography," in ACM PODC'98.
13. I. Cascudo and B. David, "SCRAPE: Scalable Randomness Attested by Public Entities," in ACNS'17.
14. P. Feldman, "A Practical Scheme for Non-interactive Verifiable Secret Sharing," in IEEE FOCS'87.
15. J. von zur Gathen and J. Gerhard, "Fast Polynomial Evaluation and Interpolation," in *Modern Computer Algebra*, 3rd ed., Cambridge University Press, 2013, ch. 10.
16. R. Canetti, R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin, "Adaptive Security for Threshold Cryptosystems," in CRYPTO'99.
17. M. Abe and S. Fehr, "Adaptively Secure Feldman VSS and Applications to Universally-Composable Threshold Cryptography," in CRYPTO'04.
18. Y. Frankel, P. MacKenzie, and M. Yung, "Adaptively-Secure Distributed Public-Key Systems," in *Algorithms - ESA'99*.
19. S. Jarecki and A. Lysyanskaya, "Adaptively Secure Threshold Cryptography: Introducing Concurrency, Removing Erasures," in EUROCRYPT'00.
20. P. Schindler, A. Judmayer, N. Stifter, and E. Weippl, "ETHDKG: Distributed Key Generation with Ethereum Smart Contracts," *Cryptology ePrint Archive*, Report 2019/985, 2019, https://eprint.iacr.org/2019/985.
21. Y. Desmedt, "Society and Group Oriented Cryptography: A New Concept," in CRYPTO'87.
22. Y. Desmedt and Y. Frankel, "Shared Generation of Authenticators and Signatures," in CRYPTO'91.
23. L. Harn, "Group-oriented (t, n) Threshold Digital Signature Scheme and Digital Multisignature," *IEE Proceedings - Computers and Digital Techniques*, vol. 141, no. 5, Sep. 1994.
24. C. Park and K. Kurosawa, "New ElGamal Type Threshold Digital Signature Scheme," 1996.
25. R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin, "Robust Threshold DSS Signatures," in EUROCRYPT'96.
26. Chia Network, "BLS Signatures in C++ Using the RELIC Toolkit," https://github.com/Chia-Network/bls-signatures, Accessed: 2019-05-06.
27. DFINITY, "go-dfinity-crypto," https://github.com/dfinity/go-dfinity-crypto, Accessed: 2019-05-06.
28. Mitsunari Shigeo, "BLS Threshold Signature," https://github.com/herumi/bls/, Accessed: 2019-05-06.
29. E. Syta, I. Tamas, D. Visher, D. I. Wolinsky, P. Jovanovic, L. Gasser, N. Gailly, I. Khoffi, and B. Ford, "Keeping Authorities 'Honest or Bust' with Decentralized Witness Cosigning," in IEEE S&P'16.
30. M. Stadler, "Publicly Verifiable Secret Sharing," in EUROCRYPT'96.
31. B. Schoenmakers, "A Simple Publicly Verifiable Secret Sharing Scheme and Its Application to Electronic Voting," in CRYPTO'99.
32. S. Basu, A. Tomescu, I. Abraham, D. Malkhi, M. K. Reiter, and E. G. Sirer, "Efficient Verifiable Secret Sharing with Share Recovery in BFT Protocols," in ACM CCS'19.
33. I. Ingemarsson and G. J. Simmons, "A Protocol to Set Up Shared Secret Schemes Without the Assistance of a Mutually Trusted Party," in EUROCRYPT'90.
34. W. Neji, K. Blibech, and N. Ben Rajeb, "Distributed Key Generation Protocol with a New Complaint Management Strategy," in SCN'16.
35. J. Canny and S. Sorkin, "Practical Large-Scale Distributed Key Generation," in EUROCRYPT'04.
36. Philipp Schindler, "Ethereum-Based Distributed Key Generation Protocol," https://github.com/PhilippSchindler/ethdkg, Accessed: 2019-05-07.
37. "Orbs Network: DKG for BLS Threshold Signature Scheme on the EVM Using Solidity," https://github.com/orbs-network/dkg-on-evm, 2018, Accessed: 2019-02-15.
38. DFINITY, "Distributed Key Generation in JS," https://github.com/dfinity/dkg, Accessed: 2019-05-07.
39. GNOSIS, "Distributed Key Generation," https://github.com/gnosis/dkg, Accessed: 2019-05-07.
40. Heiko Stamer, "Distributed Privacy Guard," https://www.nongnu.org/dkgpg/, Accessed: 2019-05-07.
41. Y. Desmedt and Y. Frankel, "Threshold Cryptosystems," in CRYPTO'89.
42. A. Menezes, S. Vanstone, and T. Okamoto, "Reducing Elliptic Curve Logarithms to Logarithms in a Finite Field," in ACM STOC'91.
43. V. Goyal, "Reducing Trust in the PKG in Identity-Based Cryptosystems," in CRYPTO'07.
44. T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein, *Introduction to Algorithms*, 3rd ed., The MIT Press, 2009.
45. J. von zur Gathen and J. Gerhard, "Newton Iteration," in *Modern Computer Algebra*, 3rd ed., Cambridge University Press, 2013, ch. 9.
46. J. Berrut and L. Trefethen, "Barycentric Lagrange Interpolation," *SIAM Review*, vol. 46, no. 3, 2004.
47. R. L. Rivest, A. Shamir, and L. Adleman, "A Method for Obtaining Digital Signatures and Public-key Cryptosystems," *Commun. ACM*, vol. 21, no. 2, Feb. 1978.
48. C. P. Schnorr, "Efficient Identification and Signatures for Smart Cards," in CRYPTO'89.
49. R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin, "Secure Applications of Pedersen's Distributed Key Generation Protocol," in CT-RSA'03.
50. T. Elgamal, "A Public Key Cryptosystem and a Signature Scheme Based on Discrete Logarithms," *IEEE Transactions on Information Theory*, vol. 31, no. 4, July 1985.
51. D. Boneh, B. Lynn, and H. Shacham, "Short Signatures from the Weil Pairing," in ASIACRYPT'01.
52. D. Boneh and X. Boyen, "Short Signatures Without Random Oracles and the SDH Assumption in Bilinear Groups," *Journal of Cryptology*, vol. 21, no. 2, pp. 149–177, 2008.
53. A. Shamir, "How to Share a Secret," *Commun. ACM*, vol. 22, no. 11, Nov. 1979.
54. G. R. Blakley, "Safeguarding Cryptographic Keys," in International Workshop on Managing Requirements Knowledge (AFIPS), 1979. [Online]. Available: doi.ieeecomputersociety.org/10.1109/AFIPS.1979.98
55. J. Camenisch and M. Stadler, "Proof Systems for General Statements about Discrete Logarithms," ETH Zurich, Tech. Rep., 1997.
56. VMware, "threshsign Library," https://github.com/vmware/concord-bft/tree/master/threshsign, Accessed: 2019-05-06.
57. Wikipedia Contributors, "Bit-Reversal Permutation — Wikipedia, The Free Encyclopedia," [Online]. Available: https://en.wikipedia.org/w/index.php?title=Bit-reversal_permutation&oldid=883335942, Accessed: 2019-07-24.
58. L. Law and B. J. Matt, "Finding Invalid Signatures in Pairing-Based Batches," in *Cryptography and Coding*, S. D. Galbraith, Ed., 2007.
59. P. S. L. M. Barreto and M. Naehrig, "Pairing-Friendly Elliptic Curves of Prime Order," in *Selected Areas in Cryptography*, 2006.
60. SCIPR Lab, "libff," https://github.com/scipr-lab/libff, 2016, Accessed: 2018-07-28.
61. SCIPR Lab, "libfqfft," https://github.com/scipr-lab/libfqfft, 2016, Accessed: 2018-07-28.
62. D. J. Bernstein, N. Duif, T. Lange, P. Schwabe, and B.-Y. Yang, "High-Speed High-Security Signatures," *Journal of Cryptographic Engineering*, vol. 2, no. 2, Sep 2012.
63. S. Bowe, A. Gabizon, and M. D. Green, "A Multi-Party Protocol for Constructing the Public Parameters of the Pinocchio zk-SNARK," in FC'18, 2018.
64. S. Bowe, A. Gabizon, and I. Miers, "Scalable Multi-Party Computation for zk-SNARK Parameters in the Random Beacon Model," *Cryptology ePrint Archive*, Report 2017/1050, 2017, https://eprint.iacr.org/2017/1050.
65. D. Hopwood, S. Bowe, T. Hornby, and N. Wilcox, "Zcash Protocol Specification," https://github.com/zcash/zips/blob/master/protocol/protocol.pdf, Accessed: 2017-11-17.
66. J. Groth, "Short Pairing-Based Non-Interactive Zero-Knowledge Arguments," in ASIACRYPT'10.
67. D. Catalano and D. Fiore, "Vector Commitments and Their Applications," in PKC'13.
68. A. Chepurnoy, C. Papamanthou, and Y. Zhang, "Edrax: A Cryptocurrency with Stateless Transaction Validation," *Cryptology ePrint Archive*, Report 2018/968, 2018, https://eprint.iacr.org/2018/968.
69. D. Boneh, B. Bünz, and B. Fisch, "Batching Techniques for Accumulators with Applications to IOPs and Stateless Blockchains," in CRYPTO'19.
70. A. Kate, G. M. Zaverucha, and I. Goldberg, "Polynomial Commitments," Tech. Rep., 2010. [Online]. Available: https://pdfs.semanticscholar.org/31eb/add7a0109a584cfbf94b3afaa3c117c78c91.pdf

### Appendix A: AMT Prover Time and Proof Sizes

We will restrict ourselves to the setting where \( n = 2^m \) and \( \deg \phi = t-1 < n \). We first show that computing our optimized, roots-of-unity-based AMT takes \( O(n \log t) \) time (see §III-B3).

The key observation is that, when computing the AMT, divisions at higher levels (i.e., closer to the root) in the tree are trivial and need not be performed. Specifically, at sufficiently high levels, the degree of the divisors (i.e., accumulators) are larger than the degrees of the dividends (i.e., remainders), and always give quotients equal to zero. Since zero quotients can be easily recreated by verifiers, their commitments need not be included in the proof. We expand on this next.

Let us number levels differently, from \( \log n \) (the root) to 0 (the leaves), so that level \( i \) has \( n/2^i \) nodes, each with an accumulator of degree \( 2^i \). Now, let \( k \) be the smallest value such that \( 2^k \leq \deg \phi < 2^{k+1} \). In other words, \( k \) is the level at which accumulator degrees are \( \leq \deg \phi \) and thus divisions are non-trivial. Put differently, each node on level \( k \) will be the root node of an (authenticated) multipoint evaluation (sub)tree.

We argue that the time to compute any one such subtree is \( O(2^k \log 2^k) \) and, since there are \( n/2^k \) such subtrees, the final AMT takes \( O(n \log 2^k) = O(n \log t) \) time since \( 2^k \leq t-1 = \deg \phi \). We prove this inductively next.

At the root node of a level \( k \) subtree, the dividend \( d_k = \phi \) has \( \deg d_k < 2^{k+1} \) (by definition of \( k \) above). The accumulator \( a_k \) has \( \deg a_k = 2^k \). Thus, the quotient \( q_k = d_k / a_k \) will have \( \deg q_k = \deg d_k - \deg a_k < 2^{k+1} - 2^k = 2^k \) and the remainder \( r_k = d_k \mod a_k \) will have \( \deg r_k < \deg a_k = 2^k \). The division at this level will only take \( O(\deg d_k) = O(2^{k+1}) \) time, thanks to the \( (x^{2^k} + c) \) form of \( a_k \). Committing to the quotient will take \( O(2^k) \) time. To summarize, at level \( k \) we are doing \( O(2^{k+1}) \) work and \( \deg d_k < 2^{k+1} \), \( \deg a_k = 2^k \), \( \deg q_k < 2^k \), \( \deg r_k < 2^k \).

Next, we argue that the amount of work per node on level \( k-1 \) is half the work per node at level \( k \). This is because:
1. The dividend \( d_{k-1} \) is set to the remainder \( r_k \) from the parent, so \( \deg d_{k-1} < 2^k \).
2. \( \deg a_{k-1} = 2^{k-1} \).
3. \( \deg q_{k-1} = \deg d_{k-1} - \deg a_{k-1} < 2^k - 2^{k-1} = 2^{k-1} \).
4. \( \deg r_{k-1} < \deg a_{k-1} = 2^{k-1} \).

Thus, at level \( k-1 \), the division takes \( O(2^k) \) time and committing to the quotient takes \( O(2^{k-1}) \) time. As a result, the time to compute the subtree can be expressed as \( T(2^{k+1}) = 2T(2^{k+1}/2) + O(2^{k+1}) = O(2^k \log 2^k) \).

Finally, an AMT proof is \( O(\log t) \)-sized. Recall that quotients in the AMT are non-zero only at levels \( k \) and below, where \( 2^k \leq t-1 < 2^{k+1} \). Thus, an AMT proof will only have non-zero quotients at levels \( k, k-1, k-2, \ldots, 1, 0 \). Since \( k = \lfloor \log_2(t-1) \rfloor \), the exact proof size is \( \lfloor \log_2(t-1) \rfloor + 1 \) group elements.

### Appendix B: Cryptographic Assumptions

Let \( \text{poly}(\cdot) \) denote any function upper-bounded by some univariate polynomial.

**Definition A.1 (Bilinear pairing parameters)**. Let \( G(\cdot) \) be a randomized polynomial algorithm with input a security parameter \( \lambda \). Then, \( \langle G, G_T, p, g, e \rangle \leftarrow G(1^\lambda) \) are called bilinear pairing parameters if \( G \) and \( G_T \) are cyclic groups of prime order \( p \) where discrete log is hard, \( G \) has generator \( g \), and if \( e \) is a bilinear map, \( e : G \times G \rightarrow G_T \) such that \( G_T = \langle e(g, g) \rangle \).

**Definition A.2 ((\(\ell\))-Strong Bilinear Diffie-Hellman (SBDH) Assumption)**. Given as input security parameter \( 1^\lambda \), bilinear pairing parameters \( \langle G, G_T, p, g, e \rangle \leftarrow G(1^\lambda) \), public parameters \( PP_q(g; \tau) = \langle g, g^\tau, g^{\tau^2}, \ldots, g^{\tau^\ell} \rangle \) where \( \ell = \text{poly}(\lambda) \) and \( \tau \) is chosen uniformly at random from \( \mathbb{Z}_p^* \), no probabilistic polynomial-time adversary can output a pair \( \langle c, e(g, g)^{\tau+c} \rangle \) for some \( c \in \mathbb{Z}_p \), except with probability negligible in \( \lambda \).

**Definition A.3 ((\(\ell\))-Polynomial Diffie-Hellman (polyDH) Assumption)**. Given as input security parameter \( 1^\lambda \), bilinear pairing parameters \( \langle G, G_T, p, g, e \rangle \leftarrow G(1^\lambda) \), public parameters \( PP_q(g; \tau) = \langle g, g^\tau, g^{\tau^2}, \ldots, g^{\tau^\ell} \rangle \) where \( \ell = \text{poly}(\lambda) \), no probabilistic polynomial-time adversary can output a pair \( \langle c, e(g, g)^{\tau+c} \rangle \) for some \( c \in \mathbb{Z}_p \), except with probability negligible in \( \lambda \).

Here \( T = \{x_i\}_{i \in [0,d]} \) and recall that \( L_T(x_i)(\tau) = \prod_{j \in T, j \neq i} \frac{\tau - x_j}{x_i - x_j} \) (see §II-4). To summarize, \( B \) "embeds" the \( (g, ga) \) challenge in an (unknown-to-\( B \)-but-determined) polynomial \( \phi \) with commitment \( c = g^{\phi(\tau)} \).

Next, \( B \) has to simulate AMT proofs \( \pi_i \) for \( y_i = \phi(x_i), \forall i \in [d] \). To do this, recall that at each node \( w \) in the AMT, we have quotient and remainder polynomials \( q_w, r_w \) such that \( r_{\text{parent}(w)} = q_w a_w + r_w \) (see Figure 1). Also, recall that \( B \) knows \( \tau \) so he can compute accumulator evaluations \( a_w(\tau), \forall \) nodes \( w \) in the AMT. Now, \( B \) can simulate proofs as follows.