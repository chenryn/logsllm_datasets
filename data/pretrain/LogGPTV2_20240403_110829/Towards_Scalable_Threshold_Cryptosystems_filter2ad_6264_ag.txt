FOCS’85.
[14] A. Kate, G. M. Zaverucha, and I. Goldberg, “Constant-Size Commit-
ments to Polynomials and Their Applications,” in ASIACRYPT’10.
[15] T. P. Pedersen, “A Threshold Cryptosystem without a Trusted Party,” in
EUROCRYPT’91.
[16] R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin, “Secure Distributed
Key Generation for Discrete-Log Based Cryptosystems,” Journal of
Cryptology, vol. 20, no. 1, 2007.
[17] A. Kate, “Distributed Key Generation and Its Applications,” Ph.D.
dissertation, Waterloo, Ontario, Canada, 2010.
[18] C. Cachin, K. Kursawe, and V. Shoup, “Random Oracles in Constantino-
ple: Practical Asynchronous Byzantine Agreement Using Cryptography,”
Journal of Cryptology, vol. 18, no. 3, Jul 2005.
[19] A. Kate and I. Goldberg, “Distributed Key Generation for the Internet,”
in IEEE ICDCS’09.
[20] D. R. Stinson and R. Strobl, “Provably Secure Distributed Schnorr
Signatures and a (t, n) Threshold Scheme for Implicit Certiﬁcates,” in
ACISP’01.
[21] R. Gennaro, S. Goldfeder, and A. Narayanan, “Threshold-Optimal
DSA/ECDSA Signatures and an Application to Bitcoin Wallet Security,”
in ACNS’16.
[22] A. Herzberg, S. Jarecki, H. Krawczyk, and M. Yung, “Proactive Secret
Sharing Or: How to Cope With Perpetual Leakage,” in CRYPT0’95.
[23] A. Herzberg, M. Jakobsson, S. Jarecki, H. Krawczyk, and M. Yung,
“Proactive Public Key and Signature Systems,” in ACM CCS’97.
[24] R. Gennaro, M. O. Rabin, and T. Rabin, “Simpliﬁed VSS and Fast-track
Multiparty Computations with Applications to Threshold Cryptography,”
in ACM PODC’98.
[25] I. Cascudo and B. David, “SCRAPE: Scalable Randomness Attested
[26] P. Feldman, “A Practical Scheme for Non-interactive Veriﬁable Secret
by Public Entities,” in ACNS’17.
Sharing,” in IEEE FOCS’87.
[27] J. von zur Gathen and J. Gerhard, “Fast polynomial evaluation and
Cambridge
interpolation,” in Modern Computer Algebra, 3rd ed.
University Press, 2013, ch. 10.
[28] R. Canetti, R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin, “Adap-
tive Security for Threshold Cryptosystems,” in CRYPTO’99.
[29] M. Abe and S. Fehr, “Adaptively Secure Feldman VSS and Applications
to Universally-Composable Threshold Cryptography,” in CRYPTO’04.
[30] Y. Frankel, P. MacKenzie, and M. Yung, “Adaptively-Secure Distributed
Public-Key Systems,” in Algorithms - ESA’99.
[31] S. Jarecki and A. Lysyanskaya, “Adaptively Secure Threshold Cryp-
tography: Introducing Concurrency, Removing Erasures,” in EURO-
CRYPT’00.
[32] P. Schindler, A. Judmayer, N. Stifter, and E. Weippl, “ETHDKG: Dis-
tributed Key Generation with Ethereum Smart Contracts,” Cryptology
ePrint Archive, Report 2019/985, 2019, https://eprint.iacr.org/2019/985.
[33] Y. Desmedt, “Society and Group Oriented Cryptography: A New Con-
[34] Y. Desmedt and Y. Frankel, “Shared generation of authenticators and
cept,” in CRYPTO’87.
signatures,” in CRYPTO’91.
[35] L. Harn, “Group-oriented (t, n) threshold digital signature scheme
and digital multisignature,” IEE Proceedings - Computers and Digital
Techniques, vol. 141, no. 5, Sep. 1994.
[36] C. Park and K. Kurosawa, “New ElGamal Type Threshold Digital
Signature Scheme,” 1996.
[37] R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin, “Robust Threshold
DSS Signatures,” in EUROCRYPT’96.
[38] Chia Network, “BLS signatures in C++ using the RELIC toolkit,” https:
//github.com/Chia-Network/bls-signatures, Accessed: 2019-05-06.
[39] DFINITY,
“go-dﬁnity-crypto,”
https://github.com/dﬁnity/go-dﬁnity-
[40] Mitsunari Shigeo, “BLS threshold signature,” https://github.com/herumi/
crypto, Accessed: 2019-05-06.
bls/, Accessed: 2019-05-06.
[41] E. Syta, I. Tamas, D. Visher, D. I. Wolinsky, P. Jovanovic, L. Gasser,
N. Gailly, I. Khofﬁ, and B. Ford, “Keeping Authorities “Honest or Bust”
with Decentralized Witness Cosigning,” in IEEE S&P’16.
[42] M. Stadler, “Publicly Veriﬁable Secret Sharing,” in EUROCRYPT’96.
[43] B. Schoenmakers, “A Simple Publicly Veriﬁable Secret Sharing Scheme
and Its Application to Electronic Voting,” in CRYPTO’99.
[44] S. Basu, A. Tomescu, I. Abraham, D. Malkhi, M. K. Reiter, and E. G.
Sirer, “Efﬁcient Veriﬁable Secret Sharing with Share Recovery in BFT
Protocols,” in ACM CCS’19.
[45] I. Ingemarsson and G. J. Simmons, “A Protocol to Set Up Shared
Secret Schemes Without the Assistance of a Mutually Trusted Party,”
in EUROCRYPT’90.
[46] W. Neji, K. Blibech, and N. Ben Rajeb, “Distributed key generation
protocol with a new complaint management strategy,” SCN’16.
[47] J. Canny and S. Sorkin, “Practical large-scale distributed key genera-
tion,” in EUROCRYPT’04.
[48] Philipp Schindler, “Ethereum-based Distributed Key Generation Proto-
col,” https://github.com/PhilippSchindler/ethdkg, Accessed: 2019-05-07.
[49] “Orbs Network: DKG for BLS threshold signature scheme on the EVM
using Solidity,” https://github.com/orbs-network/dkg-on-evm, 2018, Ac-
cessed: 2019-02-15.
[50] DFINITY, “Distributed Key Generation in JS,” https://github.com/
dﬁnity/dkg, Accessed: 2019-05-07.
[51] GNOSIS, “Distributed Key Generation,” https://github.com/gnosis/dkg,
[52] Heiko Stamer, “Distributed Privacy Guard,” https://www.nongnu.org/
Accessed: 2019-05-07.
dkgpg/, Accessed: 2019-05-07.
[53] Y. Desmedt and Y. Frankel, “Threshold cryptosystems,” in CRYPTO’89.
[54] A. Menezes, S. Vanstone, and T. Okamoto, “Reducing Elliptic Curve
Logarithms to Logarithms in a Finite Field,” in ACM STOC’91.
[55] V. Goyal, “Reducing Trust in the PKG in Identity Based Cryptosystems,”
in CRYPTO’07.
[56] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein, Introduction
to Algorithms, 3rd ed. The MIT Press, 2009.
[57] J. von zur Gathen and J. Gerhard, “Newton iteration,” in Modern
Computer Algebra, 3rd ed. Cambridge University Press, 2013, ch. 9.
[58] J. Berrut and L. Trefethen, “Barycentric Lagrange Interpolation,” SIAM
Review, vol. 46, no. 3, 2004.
[59] R. L. Rivest, A. Shamir, and L. Adleman, “A Method for Obtaining
Digital Signatures and Public-key Cryptosystems,” Commun. ACM,
vol. 21, no. 2, Feb. 1978.
[60] C. P. Schnorr, “Efﬁcient Identiﬁcation and Signatures for Smart Cards,”
in CRYPTO’89.
[61] R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin, “Secure Applica-
tions of Pedersen’s Distributed Key Generation Protocol,” in CT-RSA’03.
[62] T. Elgamal, “A public key cryptosystem and a signature scheme based on
discrete logarithms,” IEEE Transactions on Information Theory, vol. 31,
no. 4, July 1985.
[63] D. Boneh, B. Lynn, and H. Shacham, “Short Signatures from the Weil
Pairing,” in ASIACRYPT’01.
[64] D. Boneh and X. Boyen, “Short signatures without random oracles and
the SDH assumption in bilinear groups,” Journal of Cryptology, vol. 21,
no. 2, pp. 149–177, 2008.
[65] A. Shamir, “How to Share a Secret,” Commun. ACM, vol. 22, no. 11,
Nov. 1979.
[66] G. R. Blakley, “Safeguarding cryptographic keys,” in International
Workshop on Managing Requirements Knowledge (AFIPS), 1979.
[Online]. Available: doi.ieeecomputersociety.org/10.1109/AFIPS.1979.
98
[67] J. Camenisch and M. Stadler, “Proof Systems for General Statements
about Discrete Logarithms,” ETH Zurich, Tech. Rep., 1997.
[68] VMware, “threshsign library,” https://github.com/vmware/concord-bft/
tree/master/threshsign, Accessed: 2019-05-06.
[69] Wikipedia
contributors,
Free Encyclopedia,”
“Bit-reversal permutation — Wikipedia,
[On-
The
line]. Available: https://en.wikipedia.org/w/index.php?title=Bit-reversal
permutation&oldid=883335942
2019, Accessed:
2019-07-24.
[70] L. Law and B. J. Matt, “Finding Invalid Signatures in Pairing-Based
Batches,” in Cryptography and Coding, S. D. Galbraith, Ed., 2007.
[71] P. S. L. M. Barreto and M. Naehrig, “Pairing-Friendly Elliptic Curves
of Prime Order,” in Selected Areas in Cryptography, 2006.
[72] SCIPR Lab, “libff,” https://github.com/scipr-lab/libff, 2016, Accessed:
[73] ——, “libfqfft,” https://github.com/scipr-lab/libfqfft, 2016, Accessed:
2018-07-28.
2018-07-28.
[74] D. J. Bernstein, N. Duif, T. Lange, P. Schwabe, and B.-Y. Yang, “High-
speed high-security signatures,” Journal of Cryptographic Engineering,
vol. 2, no. 2, Sep 2012.
[75] S. Bowe, A. Gabizon, and M. D. Green, “A Multi-party Protocol for
Constructing the Public Parameters of the Pinocchio zk-SNARK,” in
FC’18, 2018.
[76] S. Bowe, A. Gabizon, and I. Miers, “Scalable Multi-party Computation
for zk-SNARK Parameters in the Random Beacon Model,” Cryptology
ePrint Archive, Report 2017/1050, 2017, https://eprint.iacr.org/2017/
1050.
[77] D. Hopwood, S. Bowe, T. Hornby, and N. Wilcox, “Zcash Pro-
tocol Speciﬁcation,” https://github.com/zcash/zips/blob/master/protocol/
protocol.pdf, Accessed: 2017-11-17.
[78] J. Groth, “Short Pairing-Based Non-interactive Zero-Knowledge Argu-
[79] D. Catalano and D. Fiore, “Vector Commitments and Their Applica-
ments,” in ASIACRYPT’10.
tions,” in PKC’13.
[80] A. Chepurnoy, C. Papamanthou, and Y. Zhang, “Edrax: A Cryptocur-
rency with Stateless Transaction Validation,” Cryptology ePrint Archive,
Report 2018/968, 2018, https://eprint.iacr.org/2018/968.
[81] D. Boneh, B. B¨unz, and B. Fisch, “Batching Techniques for Accu-
mulators with Applications to IOPs and Stateless Blockchains,” in
CRYPTO’19.
[82] A. Kate, G. M. Zaverucha, and I. Goldberg, “Polynomial commitments,”
Tech. Rep., 2010. [Online]. Available: https://pdfs.semanticscholar.org/
31eb/add7a0109a584cfbf94b3afaa3c117c78c91.pdf
A. AMT Prover Time and Proof Sizes
APPENDIX
We will restrict ourselves to our n = 2m and deg φ =
t−1 < n setting. We ﬁrst show that computing our optimized,
roots-of-unity-based AMT takes O(n log t) time (see §III-B3).
The key observation is that, when computing the AMT,
divisions at higher levels (i.e., closer to the root) in the tree are
trivial and need not be performed. Speciﬁcally, at sufﬁciently
high levels, the degree of the divisors (i.e., accumulators) are
larger than the degrees of the dividends (i.e., remainders), and
always give quotients equal to zero. Since zero quotients can
be easily recreated by veriﬁers, their commitments need not
be included in the proof. We expand on this next.
Let us number levels differently, from log n (the root) to
0 (the leaves), so that level i has n/2i nodes, each with an
accumulator of degree 2i. Now, let k be the smallest value
such that 2k ≤ deg φ < 2k+1. In other words, k is the level at
which accumulator degrees are ≤ deg φ and thus divisions are
non-trivial. Put differently, each node on level k will be the
root node of an (authenticated) multipoint evaluation (sub)tree.
We argue that the time to compute any one such subtree is
O(2k log 2k) and, since there are n/2k such subtrees, the ﬁnal
AMT takes O(n log 2k) = O(n log t) time since 2k ≤ t− 1 =
deg φ. We prove this inductively next.
At the root node of a level k subtree, the dividend dk = φ
has deg dk < 2k+1 (by deﬁnition of k above). The accumulator
ak has deg ak = 2k. Thus, the quotient qk = dk/ak will have
deg qk = deg dk−deg ak < 2k+1−2k = 2k and the remainder
rk = dk mod ak will have deg rk < deg ak = 2k. The divi-
sion at this level will only take O(deg dk) = O(2k+1) time,
thanks to the (x2k
+c) form of ak. Committing to the quotient
will take O(2k) time. To summarize, at level k we are doing
O(2k+1) work and deg dk < 2k+1, deg ak = 2k, deg qk <
2k, deg rk < 2k. Next, we argue that the amount of work per
node on level k − 1 is half the work per node at level k. This
is because (1) the dividend dk−1 is set to the remainder rk
from the parent, so deg dk−1 < 2k, (2) deg ak−1 = 2k−1, (3)
deg qk−1 = deg dk−1 − deg ak−1 < 2k − 2k−1 = 2k−1 and
(4) deg rk−1 < deg ak−1 = 2k−1. Thus, at level k − 1, the
division takes O(2k) time and committing to the quotient takes
O(2k−1) time. As a result, the time to compute the subtree
can be expressed as T (2k+1) = 2T (2k+1/2) + O(2k+1) =
O(2k log 2k).
Finally, an AMT proof is O(log t)-sized. Recall that quo-
tients in the AMT are non-zero only at levels k and below,
where 2k ≤ t − 1 < 2k+1. Thus, an AMT proof will only
have non-zero quotients at levels k, k−1, k−2, . . . , 1, 0. Since
k = (cid:98)log2(t − 1)(cid:99) the exact proof size is (cid:98)log2(t − 1)(cid:99) + 1
group elements.
B. Cryptographic Assumptions
Let poly(·) denote any function upper-bounded by some
univariate polynomial.
Deﬁnition A.1 (Bilinear pairing parameters). Let G(·) be a
randomized polynomial algorithm with input a security pa-
rameter λ. Then, (cid:104)G, GT , p, g, e(cid:105) ← G(1λ) are called bilinear
pairing parameters if G and GT are cyclic groups of prime
order p where discrete log is hard, G has generator g and if e
is a bilinear map, e : G × G → GT such that GT = (cid:104)e(g, g)(cid:105).
Deﬁnition A.2 ((cid:96)-Strong Bilinear Difﬁe-Hellman (SBDH)
Assumption). Given as input security parameter 1λ, bilinear
pairing parameters (cid:104)G, GT , p, g, e(cid:105) ← G(1λ), public parame-
, . . . , gτ (cid:96)(cid:105) where (cid:96) = poly(λ) and
ters PPq(g; τ ) = (cid:104)g, gτ , gτ 2
τ is chosen uniformly at random from Z∗
p, no probabilistic
τ +c(cid:105)
polynomial-time adversary can output a pair (cid:104)c, e(g, g)
for some c ∈ Zp, except with probability negligible in λ.
Deﬁnition A.3 ((cid:96)-Polynomial Difﬁe-Hellman (polyDH) As-
sumption). Given as input security parameter 1λ, bilinear
pairing parameters (cid:104)G, GT , p, g, e(cid:105) ← G(1λ), public param-
eters PPq(g; τ ) = (cid:104)g, gτ , gτ 2
, . . . , gτ (cid:96)(cid:105) where (cid:96) = poly(λ)
1
i (τ ) =(cid:81)
1
1
Here T = {xi}i∈[0,d] and recall that LT
j∈T,j(cid:54)=i(τ −
xj)/(xi − xj) (see §II-4). To summarize, B “embeds” the
(g, ga) challenge in an (unknown-to-B-but-determined) poly-
nomial φ with commitment c = gφ(τ ).
Next, B has to simulate AMT proofs πi for yi = φ(xi),∀i ∈
[d]. To do this, recall that at each node w in the AMT, we
have quotient and remainder polynomials qw, rw such that
rparent(w) = qwaw + rw (see Figure 1). Also, recall that B
knows τ so he can compute accumulator evaluations aw(τ ),∀
nodes w in the AMT. Now, B can simulate proofs as follows.