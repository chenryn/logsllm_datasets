CR4[9]
操作系统使用，表示操作系统对FXSAVE、
FXRSTOR及SSE/SSE2/SSE3指令的支持，以
保证较老的操作系统仍然可以运行在较新的
CPU上
OSXMMEXCPT（Operating
System Support for
Unmasked SIMD Floating-
Point Exceptions）
CR4[10]
操作系统使用，表示操作系统对奔腾III处理
器引入的SIMD浮点异常（#XF）的支持。如
果该位为0表示操作系统不支持#XF异常，那
么CPU会通过无效指令异常（#UD）来报告
#XF异常，以防止针对奔腾III以前处理器设计
的操作系统在奔腾III或更新的CPU上运行时
出错
MOV CRn命令用来读写控制寄存器的内容，只有在0特权级才能执
行这个指令。
2.4.5 其他寄存器
除了上面介绍的寄存器，IA-32 CPU还有如下寄存器。
CS、DS、SS、ES、FS和GS是6个16位的段寄存器，当CPU工作在
实模式下时，其内容代表的是段地址的高16位，也就是将其乘以16（或
左移4位，或者说将十六进制表示的值末位加0）便可以得到该段的基地
址。例如，如果ES=2000H，那么指令MOV AL，ES:[100H]就是把地址
2000H*10H+100H=20100H处的一个字节放入AL寄存器中。在保护模式
下，段寄存器内存放的是段选择子，详见2.6节对保护模式的介绍。
1个32位的程序指针寄存器EIP（Extended Instruction Pointer），指
向的是CPU要执行的下一条指令，其值为该指令在当前代码段中的偏移
地址。如果一条指令有多个字节，那么EIP指向的是该指令的第一个字
节。
8个128位的向量运算寄存器XMM0～XMM7，供SSE/SSE2/SSE3指
令使用以支持对单精度浮点数进行SIMD计算。
8个80位的FPU和MMX两用寄存器ST0～ST7，当执行MMX指令
时，其中的低64位用作MMX数据寄存器MM0～MM7；当执行x87浮点
指令时，它们被用作浮点数据寄存器R0～R7。
1个48位的中断描述符表寄存器IDTR，用于记录中断描述符表
（IDT）的基地址和边界（limit），详见3.5节。
1个48位的全局描述符表寄存器GDTR，用于描述全局描述符表
（GDT）的基地址和边界，详见2.6节。
1个16位的局部描述符表（LDT）寄存器LDTR，存放的是局部描述
符表的选择子。
1个16位的任务寄存器TR，用于存放选取任务状态段（Task State
Segment，简称TSS）描述符的选择子。TSS用来存放一个任务的状态信
息，在多任务环境下，CPU在从一个任务切换到另一个任务时，前一个
任务的寄存器等状态被保存到TSS中。
1个64位的时间戳计数器（Time Stamp Counter，TSC），每个时钟
周期其数值加1，重启动时清零。RDTSC指令用来读取TSC寄存器，但
是只有当CR4寄存器的TSD位为0时，才可以在任何优先级执行该指
令，否则，只有在最高优先级下（级别0）才可以执行该指令。
内存类型范围寄存器（Memory Type and Range Register，
MTRR），定义了内存空间中各个区域的内存类型，CPU据此知道相应
内存区域的特征，比如是否可以对其做高速缓存等。
我们将在第5章中讨论性能监视寄存器。
调试寄存器DR0～DR7，用于支持调试，我们将在第4章中讨论。
2.4.6 64位模式时的寄存器
当支持64位的IA-32 CPU工作在64位模式（IA-32e）时，所有通用
寄存器和大多数其他寄存器都延展为64位（段寄存器始终为16位），并
可以使用RXX来引用它们，例如RAX、RBX、RCX、RFLAGS、RIP
等。此外，64位模式增加了如下寄存器。
8个新的通用寄存器R8～R15：可以分别使用RnD、RnW、RnL（n
= 8～15）来引用这些寄存器的低32位、低16位或低8位。
8个新的SIMD寄存器XMM8～XMM15。
控制寄存器CR8，又称为任务优先级寄存器（Task Priority
Register）。
Extended-Feature-Enable Register（EFER）寄存器：用来启用扩展
的CPU功能，其作用与标志寄存器类似。
关于每个寄存器的细节，读者需要时可以参考IA手册的第1卷和第3
卷。大多数调试器都提供了读取和修改寄存器的功能，比如在WinDBG
中可以使用r命令来显示或修改普通寄存器，使用rdmsr和wrmsr命令来
读取和编辑MSR寄存器。二者的工作原理是有所不同的，r命令操作的
是在中断到调试器时被调试程序保存在内存中的寄存器上下文，而
rdmsr和wrmsr操作的是CPU内部的物理寄存器。
2.5 理解保护模式
大多数现代操作系统（包括Windows 9X/NT/XP和Linux等）都是多
任务的，CPU的保护模式是操作系统实现多任务的基础。了解保护模式
的底层原理对学习操作系统和本书后面的章节有着事半功倍的作用。
保护模式是为实现多任务而设计的，其名称中的“保护”就是保护多
任务环境中各个任务的安全。多任务环境的一个基本问题就是当多个任
务同时运行时，如何保证一个任务不会受到其他任务的破坏，同时也不
会破坏其他任务，也就是要实现多个任务在同一个系统中“和平共处、
互不侵犯”。所谓任务，从CPU层来看就是CPU可以独立调度和执行的
程序单位。从Windows操作系统的角度来看，一个任务就是一个线程
（thread）或者进程（process）。
 老雷评点 
“任务”乃模糊用语，其含义视语境来定。
进一步来说，可以把保护模式对任务的保护机制划分为任务内的保
护和任务间的保护。任务内的保护是指同一任务空间内不同级别的代码
不会相互破坏。任务间的保护就是指一个任务不会破坏另一个任务。简
单来说，任务间的保护是靠内存映射机制（包括段映射和页映射）实现
的，任务内的保护是靠特权级别检查实现的。
2.5.1 任务间的保护机制
任务间的保护主要是靠虚拟内存映射机制来实现的，即在保护模式
下，每个任务都被置于一个虚拟内存空间之中，操作系统决定何时以及
如何把这些虚拟内存映射到物理内存。举例来说，在Win32（泛指
Windows的32位版本，例如Windows 95/98、Windows XP、Windows NT
和Windows Server 2003等）下，每个任务都被赋予4GB的虚拟内存空
间，可以用地址0～0xFFFFFFFF来访问这个空间中的任意地址。尽管不
同任务可以访问相同的地址（比如0x00401010），但因为这个地址仅仅
是本任务空间中的虚拟地址，不同任务处于不同的虚拟空间中，不同任
务的虚拟地址可以被映射到不同的物理地址，这样就可以很容易防止一
个任务内的代码直接访问另一个任务的数据。IA-32 CPU提供了两种机
制来实现内存映射：段机制（segmentation）和页机制（paging），我们
将在2.6节和2.7节做进一步介绍。
2.5.2 任务内的保护
任务内的保护主要用于保护操作系统。
操作系统的代码和数据通常被映射到系统中每个任务的内存空间
中，并且对于所有任务其地址是一样的。例如，在Windows系统中，操
作系统的代码和数据通常被映射到每个进程的高2GB空间中。这意味着
操作系统的空间对于应用程序是“可触及的”，应用程序中的指针可以指
向操作系统所使用的内存。
任务内保护的核心思想是权限控制，即为代码和数据根据其重要性
指定特权级别，高特权级的代码可以执行和访问低特权级的代码和数
据，而低特权级的代码不可以直接执行和访问高特权级的代码和数据。
高特权级通常被赋予重要的数据和可信任的代码，比如操作系统的数据
和代码。低特权级通常被赋予不重要的数据和不信任的代码，比如应用
程序。这样，操作系统可以直接访问应用程序的代码和数据，而应用程
序虽然可以指向系统的空间，但是不能访问，一旦访问就会被系统所发
现并禁止。在Windows系统中，我们有时会看到图2-5所示的应用程序错
误对话框，导致这种情况的一个典型原因就是应用程序有意或无意地访
问了禁止访问的系统空间（access violation），而被系统发现。
图2-5 应用程序试图访问系统使用的内存时遭到系统禁止
清单2-1列出了导致图2-5所示错误的应用程序（AccKernel）的源代
码。
清单2-1 AccKernel程序的源代码
int main(int argc, char* argv[])
{
    printf("Hi, I want to access kernel space!\n");
    *(int *)0xA0808080=0x22;
    printf("I would never reach so far!\n");
    return 0;
}
以上分析说明，尽管应用程序可以指向系统的内存，但是访问时会
被系统发现并禁止。我们将在第12章中进一步讨论应用程序错误。
事实上，应用程序只能通过操作系统公开的接口（API）来使用操
作系统的服务，即所谓的系统调用。系统调用相当于在系统代码和用户
代码之间开了一扇有人看守的小门。我们将在第8章对此做进一步的介
绍。
 老雷评点 
《中庸》有言，“万物并育而不相害，道并行而不相悖。”保
护模式是这一道理在计算机世界之体现。感叹少有人思考如此之
深。
2.5.3 特权级
IA-32处理器定义了4个特权级，又称为环（ring），分别用0、1、
2、3表示。0代表的特权级最高，3 代表的特权级最低。最高的特权级
通常是分配给操作系统的内核代码和数据的。比如Windows操作系统的
内核模块是在特权级0（ring 0）运行的，Windows下的各种应用程序
（例如MS Word、Excel等）是在特权级3运行的。因为特权级0下运行
的通常都是内核模块，所以人们便把在特权级0运行说成在内核模式
（kernel mode）运行，把在特权级3运行说成在用户模式（user mode）
运行，并因此把编写内核模式下执行的程序称为内核模式编程，把为内
核模式编写的驱动程序称为内核模式驱动程序等。
进一步说，处理器通过以下3种方式来记录和监控特权级别以实现
特权控制。
描述符特权级别（Descriptor Privilege Level，DPL），位于段描述
符或门描述符中，用于表示一个段或门（gate）的特权级别。
当前特权级别（Current Privilege Level，CPL），位于CS和SS寄存
器的位0和位1中，用于表示当前正在执行的程序或任务的特权级
别。通常CPL等于当前正被执行的代码段的DPL。当处理器切换到
一个不同DPL的段时，CPL会随之变化。但有一个例外，因为一致
代码段（conforming code segment）可以被特权级别与其相等或更
低（数值上大于或等于）的代码所访问，所以当CPU访问DPL大于
CPL（数值上）的一致代码段时，CPL保持不变。
请求者特权级别（Requestor Privilege Level，RPL），用于系统调
用的情况，位于保存在栈中的段选择子的位0和位1，用来代表请求
系统服务的应用程序的特权级别。在判断是否可以访问一个段时，
CPU既要检查CPL，也要检查RPL。这样做的目的是防止高特权级
的代码代替应用程序访问应用程序本来没有权力访问的段。举例来
说，当应用程序调用操作系统的服务时，操作系统会检查保存在栈
中的来自应用程序的段选择子的RPL，确保它与应用程序代码段的
特权级别一致，IA-32 CPU专门设计了一条指令ARPL（Adjust
Requested Procedure Level）用来辅助这一检查。而后，当操作系统
访问某个段时，系统会检查RPL。此时如果只检查CPL，那么因为
正在执行的是操作系统的代码，所以CPL反映的不是真正发起访问
者的特权级。
以访问数据段为例，当CPU要访问位于数据段中的操作数时，CPU
必须先把指向该数据段的段选择子加载到数据段寄存器（DS、ES、
FS、GS）或栈段寄存器（SS）中。在CPU把一个段选择子加载到段寄
存器之前，CPU会进行特权检查。具体来说就是比较当前代码的
CPL（也就是当前正在执行的程序或任务的特权级）、RPL和目标段的
DPL。仅当CPL和RPL数值上小于或等于DPL时，即CPL和RPL对应的权
限级别等于或大于DPL时，加载才会成功，否则便会抛出保护性异常。
这样便保证了一段代码仅能访问与它同特权级或特权级比它低的数据。
访问不同特权级的代码段时的权限检查更为复杂，我们将在第8章
讨论系统调用时略加介绍，有兴趣的读者请参考IA-32手册中有关门描
述符、调用门和一致代码段等内容。
2.5.4 特权指令
为了防止低特权级的应用程序擅自修改权限等级和重要的系统数据
结构，某些重要的指令只可以在最高特权级（ring 0）下执行，这些指
令被列为特权指令（priviliged instruction）。表2-3列出了IA-32处理器目
前定义的大多数特权指令。
表2-3 特权指令列表
指  令
含  义
CLTS
清除CR0寄存器中的Task Switched标志
HLT
使CPU停止执行指令进入HALT状态，中断、调试异常或BINIT#、
RESET#等硬件信号可以使CPU脱离HALT状态