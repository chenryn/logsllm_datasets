**作者：dre4merp  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
## 写在前面
本文更多的是根据调试Windows Server 2003，分析漏洞成因。
阅读本文需要一定的 **Kerberos基础知识** 、 **Windows源码阅读调试能力**
。单纯的阅读可能并不能完全理解其中的关键点，需要进行调试理解。
## 背景
漏洞编号为：`CVE-2021-42278` 和 `CVE-2021-42287`
CVE-2021-42278：通常情况下，机器账户应以$结尾，即`DC$`。
但是AD域并没有对其进行强校验。通过建立与域控同名却不以$结尾的机器账户，即`DC`，对域控进行欺骗。
  * [MSRC CVE-2021-42278](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-42278)
  * [KB5008102 CVE-2021-42278](https://support.microsoft.com/en-us/topic/kb5008102-active-directory-security-accounts-manager-hardening-changes-cve-2021-42278-5975b463-4c95-45e1-831a-d120004e258e)
CVE-2021-42287：利用上述漏洞进行欺骗，请求到DC的TGT后，修改自身的机器账号。之后，利用Kerberos的S4U2Self机制，请求对于“自己”（`DC`）的ST，但是由于此时机器名已经被修改而无法找到`DC`，域控将会用`DC$`的Key进行加密，并向其中添加请求的账户名的PAC。至此便得到了高权限ST。
  * [MSRC CVE-2021-42287](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-42287)
  * [KB5008102 CVE-2021-42287](https://support.microsoft.com/en-gb/topic/kb5008380-authentication-updates-cve-2021-42287-9dafac11-e0d0-4cb8-959a-143bd0201041)
## 环境配置
域控：Windows Server 2003 Debug版
攻击机：Windows 7 x64 SP1
武器化工具：
## 详细分析
### Active Directory 目录树
使用SysinternalsSuite中的ADExplorer64工具查看域内的所有机器账户
![
](https://images.seebug.org/content/images/2022/05/71c9b115-5506-470c-ad26-81152970b0c6.png-w331s)
从上图中可以很明确的看到域控的机器名为`WINSRVSERVER$`，之后会使用`WINSRVSERVER`作为机器账户名进行欺骗。
### 攻击准备工作
相关准备工作不是本文重点，可以在noPac项目中学习
    //new machine account
    NewMachineAccount(argContainer, argDistinguishedName, argDomain, argDomainController, argMachineAccount, argMachinePassword, argVerbose, argRandom, credential);
    //clean spn
    SetMachineAccountAttribute(argContainer, argDistinguishedName, argDomain, argDomainController, "serviceprincipalname", argMachineAccount, "", false, true, argVerbose, credential);
    //set samaccountname
    SetMachineAccountAttribute(argContainer, argDistinguishedName, argDomain, argDomainController, "samaccountname", argMachineAccount, argDomainController.Split('.')[0], false, false, argVerbose, credential);
### 申请TGT
申请TGT时是根据修改后的机器账号`WINSRVSERVER`进行申请的。
域控调用`I_GetASTicket`处理`AS_REQ`消息
首先会调用`KdcNormalize`获得账户的相关信息包括`UserInfo`、`ClientTicketInfo`等
！！！请谨记这个函数，之后的漏洞利用过程会展开分析！！！
    KerbErr = KdcNormalize(
                    ClientName,
                    NULL,
                    RequestRealm,
                    NULL,           // no source ticket
                    NameFlags | KDC_NAME_CLIENT | KDC_NAME_FOLLOW_REFERRALS | KDC_NAME_CHECK_GC,
                    FALSE,          // do not restrict user accounts (user2user)
                    &ClientReferral,
                    ClientRealm,
                    &ClientTicketInfo,
                    pExtendedError,
                    &UserHandle,
                    WhichFields,
                    0L,
                    &UserInfo,
                    &GroupMembership
                    );
通过上面获得的`ClientTicketInfo`调用`BuildTicketAS`生成TGT，堆栈如下
    kd> kc
    # 
    00 KDCSVC!BuildTicketAS
    01 KDCSVC!I_GetASTicket
    02 KDCSVC!KdcGetTicket
    03 KDCSVC!KdcAtqIoCompletion
    04 NTDSATQ!ATQ_CONTEXT::IOCompletion
    05 NTDSATQ!AtqpProcessContext
    06 NTDSATQ!AtqPoolThread
    07 kernel32!BaseThreadStart
查看参数ClientTicketInfo和ClientName可以看到此次是以`WINSRVSERVER`的身份去申请TGT。
    kd> dt ClientTicketInfo
    Local var @ 0x332fa00 Type _KDC_TICKET_INFO*
    0x0332fcb4 
       +0x000 AccountName      : _UNICODE_STRING "WINSRVSERVER"
       +0x008 TrustedForest    : _UNICODE_STRING ""
       +0x010 PasswordExpires  : _LARGE_INTEGER 0x7fffffff`ffffffff
       +0x018 fTicketOpts      : 0x7b
       +0x01c UserAccountControl : 0x80
       +0x020 UserId           : 0x472
       +0x024 TrustType        : 0
       +0x028 TrustAttributes  : 0
       +0x02c Passwords        : 0x0015eab8 _KERB_STORED_CREDENTIAL
       +0x030 OldPasswords     : 0x001522d0 _KERB_STORED_CREDENTIAL
       +0x034 TrustSid         : (null) 
       +0x038 PasswordVersion  : 1
       +0x03c LockoutThreshold : 0
    kd> dt ClientName
    Local var @ 0x332fa04 Type KERB_PRINCIPAL_NAME*
    0x00084c44 
       +0x000 name_type        : 0n1
       +0x004 name_string      : 0x000c3360 KERB_PRINCIPAL_NAME_name_string_s
    kd> dx -id 0,0,89c47a68 -r1 ((KDCSVC!KERB_PRINCIPAL_NAME_name_string_s *)0xc3360)
    ((KDCSVC!KERB_PRINCIPAL_NAME_name_string_s *)0xc3360)                 : 0xc3360 [Type: KERB_PRINCIPAL_NAME_name_string_s *]
        [+0x000] next             : 0x0 [Type: KERB_PRINCIPAL_NAME_name_string_s *]
        [+0x004] value            : 0xb45d8 : "WINSRVSERVER" [Type: char *]
上述函数工作完成后，查看生成的Ticket，即`TGT`
    kd> dt KERB_ENCRYPTED_TICKET 0x332fabc
    KDCSVC!KERB_ENCRYPTED_TICKET
       +0x000 bit_mask         : 0xc0
       +0x000 o                : [1]  "???"
       +0x004 flags            : tagASN1bitstring_t
       +0x00c key              : KERB_ENCRYPTION_KEY
       +0x018 client_realm     : 0x000c5098  "WINTESTYU03.COM"
       +0x01c client_name      : KERB_PRINCIPAL_NAME
       +0x024 transited        : KERB_TRANSITED_ENCODING
       +0x030 authtime         : tagASN1generalizedtime_t
       +0x03e starttime        : tagASN1generalizedtime_t
       +0x04c endtime          : tagASN1generalizedtime_t
       +0x05a renew_until      : tagASN1generalizedtime_t
       +0x068 client_addresses : (null) 
       +0x06c authorization_data : (null) 
此时还没有向其中添加PAC，会通过之前获得的`UserInfo`调用`KdcGetPacAuthData`生成所需的PAC
此时的PAC为`WINSRVSERVER`的PAC，属于正常流程
    kd> dt AuthorizationData
    Local var @ 0x332f9d0 Type PKERB_AUTHORIZATION_DATA_s
       +0x000 next             : (null) 
       +0x004 value            : PKERB_AUTHORIZATION_DATA_Seq
    kd> dx -id 0,0,89c47a68 -r1 (*((KDCSVC!PKERB_AUTHORIZATION_DATA_Seq *)0x332f9d4))
    (*((KDCSVC!PKERB_AUTHORIZATION_DATA_Seq *)0x332f9d4))                 [Type: PKERB_AUTHORIZATION_DATA_Seq]
        [+0x000] auth_data_type   : 128 [Type: long]
        [+0x004] auth_data        [Type: tagASN1octetstring_t]
    kd> dx -id 0,0,89c47a68 -r1 (*((KDCSVC!tagASN1octetstring_t *)0x332f9d8))
    (*((KDCSVC!tagASN1octetstring_t *)0x332f9d8))                 [Type: tagASN1octetstring_t]
        [+0x000] length           : 0x260 [Type: unsigned long]
        [+0x004] value            : 0x16c828 : 0x4 [Type: unsigned char *]
    kd> db 0x16c828 l 260
    0016c828  04 00 00 00 00 00 00 00-01 00 00 00 c0 01 00 00  ................
    0016c838  48 00 00 00 00 00 00 00-0a 00 00 00 22 00 00 00  H..........."...
    0016c848  08 02 00 00 00 00 00 00-06 00 00 00 14 00 00 00  ................
    0016c858  30 02 00 00 00 00 00 00-07 00 00 00 14 00 00 00  0...............
    0016c868  48 02 00 00 00 00 00 00-01 10 08 00 cc cc cc cc  H...............
    0016c878  b0 01 00 00 00 00 00 00-00 00 02 00 c2 dd c3 d9  ................
    0016c888  0f f7 d7 01 ff ff ff ff-ff ff ff 7f ff ff ff ff  ................
    0016c898  ff ff ff 7f 56 b9 d8 d7-0f f7 d7 01 56 79 42 02  ....V.......VyB.
    0016c8a8  d9 f7 d7 01 ff ff ff ff-ff ff ff 7f 18 00 18 00  ................
    0016c8b8  04 00 02 00 00 00 00 00-08 00 02 00 00 00 00 00  ................
    0016c8c8  0c 00 02 00 00 00 00 00-10 00 02 00 00 00 00 00  ................
    0016c8d8  14 00 02 00 00 00 00 00-18 00 02 00 01 00 00 00  ................
    0016c8e8  72 04 00 00 03 02 00 00-01 00 00 00 1c 00 02 00  r...............
    0016c8f8  20 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00   ...............
    0016c908  00 00 00 00 18 00 1a 00-20 00 02 00 16 00 18 00  ........ .......
    0016c918  24 00 02 00 28 00 02 00-00 00 00 00 00 00 00 00  $...(...........
    0016c928  80 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    0016c938  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    0016c948  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    0016c958  00 00 00 00 0c 00 00 00-00 00 00 00 0c 00 00 00  ................
    0016c968  57 00 49 00 4e 00 53 00-52 00 56 00 53 00 45 00  W.I.N.S.R.V.S.E.
    0016c978  52 00 56 00 45 00 52 00-00 00 00 00 00 00 00 00  R.V.E.R.........
    0016c988  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    0016c998  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    0016c9a8  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    0016c9b8  00 00 00 00 01 00 00 00-03 02 00 00 07 00 00 00  ................
    0016c9c8  0d 00 00 00 00 00 00 00-0c 00 00 00 57 00 49 00  ............W.I.
    0016c9d8  4e 00 53 00 52 00 56 00-53 00 45 00 52 00 56 00  N.S.R.V.S.E.R.V.
    0016c9e8  45 00 52 00 0c 00 00 00-00 00 00 00 0b 00 00 00  E.R.............
    0016c9f8  52 00 45 00 4e 00 50 00-45 00 4e 00 47 00 59 00  W.I.N.T.E.S.T.Y.
    0016ca08  55 00 30 00 33 00 00 00-04 00 00 00 01 04 00 00  U.0.3...........
    0016ca18  00 00 00 05 15 00 00 00-db ac e2 f8 a5 b2 f3 d1  ................
    0016ca28  a1 c4 3e 10 00 00 00 00-00 b4 a3 e5 0f f7 d7 01  ..>.............
    0016ca38  18 00 57 00 49 00 4e 00-53 00 52 00 56 00 53 00  ..W.I.N.S.R.V.S.
    0016ca48  45 00 52 00 56 00 45 00-52 00 00 00 00 00 00 00  E.R.V.E.R.......
    0016ca58  76 ff ff ff c1 fc e6 ad-46 30 3f 05 5e ed 74 c0  v.......F0?.^.t.
    0016ca68  20 7d c9 54 00 00 00 00-76 ff ff ff 42 e1 22 e3   }.T....v...B.".
    0016ca78  3b 44 cd ee b7 d7 50 5f-2d f9 44 ab 00 00 00 00  ;D....P_-.D.....
之后便是将PAC放入TGT中，将其打包并使用`krbtgt`密钥进行加密，通过`AS_REP`消息传递回Client
关键代码如下，不再展开分析
    KerbErr = BuildReply(
                &ClientTicketInfo,
                (Nonce != 0) ? Nonce : RequestBody->nonce,
                &Ticket.server_name,
                Ticket.realm,
                ((RequestBody->bit_mask & addresses_present) != 0) ? RequestBody->addresses : NULL,
                &Ticket,
                &ReplyBody
                );
    ...  
    KerbErr = KerbPackTicket(
                &Ticket,
                ServerKey,
                ServiceTicketInfo.PasswordVersion,
                &Reply.ticket
                );
    ...
    KerbErr = KerbPackKdcReplyBody(
            &ReplyBody,
            (EncryptionKey.keyvalue.value != NULL) ? &EncryptionKey : ClientKey,
            (EncryptionKey.keyvalue.value != NULL) ? KERB_NO_KEY_VERSION : ClientTicketInfo.PasswordVersion,
            KERB_TGS_REP_SALT,
            KERB_ENCRYPTED_AS_REPLY_PDU,
            &Reply.encrypted_part
            );
### 还原机器账户名
还原机器账户名的目的是使得域控处理`TGS_REQ`请求的时候，找不到账户从而是用自己的Key加密