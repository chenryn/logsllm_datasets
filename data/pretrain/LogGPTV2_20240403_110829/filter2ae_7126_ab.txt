    --------------------------------------------------------------------------
在解析vmlinux
rela重定位表的时候需要做过滤，当需要被重定位的符号是绝对地址时，如果不在白名单内就要报错，提醒内核开发者需要将绝对地址的引用代码进行修改。
    static const char * const sym_regex_kernel[S_NSYMTYPES] = {
            [S_ABS] =
            "^(xen_irq_disable_direct_reloc$|"
            "xen_save_fl_direct_reloc$|"
            "VDSO|"
            "__crc_)",
白名单中的这些值都是经过内核开发者人工review过的，确认即使内核加载在不同的地址，这些符号地址仍然是不变的，
因此连接器生成的重定位表中包含这些符号时，可过滤掉，不进行重定位处理。
还有一些符号虽然被连接器标记为绝对地址，但是内核开发者人工review过也是相对地址引用的， 所以这些符号是需要被重定位的。
     [S_REL] =
            "^(__init_(begin|end)|"
            "__x86_cpu_dev_(start|end)|"
            "(__parainstructions|__alt_instructions)(|_end)|"
            "(__iommu_table|__apicdrivers|__smp_locks)(|_end)|"
            "__(start|end)_pci_.*|"
            "__(start|end)_builtin_fw|"
            "__(start|stop)___ksymtab(|_gpl|_unused|_unused_gpl|_gpl_future)|"
            "__(start|stop)___kcrctab(|_gpl|_unused|_unused_gpl|_gpl_future)|"
            "__(start|stop)___param|"
            "__(start|stop)___modver|"
            "__(start|stop)___bug_table|"
            "__tracedata_(start|end)|"
            "__(start|stop)_notes|"
            "__end_rodata|"
            "__initramfs_start|"
            "(jiffies|jiffies_64)|"
    #if ELF_BITS == 64
            "__per_cpu_load|"
            "init_per_cpu__.*|"
            "__end_rodata_hpage_align|"
    #endif
            "__vvar_page|"
            "_end)$"
还有一个需要特别处理的是内核.data..percpu这个section，当在x86_64
SMP下，连接器给这个section生成的虚拟地址是0，因此在解析重定位表时，如果碰到对.data..percpu的引用，需要首先修正引用的值，.data..percpu
可以通过定义在text段的__per_cpu_load变量进行修正，它的符号值在链接时是确定的。
    static void percpu_init(void)
    {
            int i;
            for (i = 0; i st_value;
                    return;
            }
    }
    static int do_reloc64(struct section *sec, Elf_Rel *rel, ElfW(Sym) *sym,
                          const char *symname)
    {
            if (sec->shdr.sh_info == per_cpu_shndx)
                    offset += per_cpu_load_addr;
    }
## 2.4 bootloader 的重定位流程
### 2.4.1 随机偏移值的选取
内核被加载的物理地址起始值为PHYSICAL_START
0x1000000，随机化的意思是基于这个起始地址在向后偏移一段随机地址。而这个随机值不能为任意值，因为：
X86处理器内存分页机制有几种模式，每个模式定义的物理内存页的大小也不一样。
如果一段内存由于没有基于物理页对齐的话，它会产生于两个物理页之间，而这两个物理页可能具有不同的权限，不如一个只读，一个可写，这样原本只想可读的那段内存就有一部分具有了可写的权限。Linux为了保持兼容性，64位下选择了2mb对齐，32位选择了8k对齐。
### 2.4.2 重定位处理逻辑
Bootloader在选取合适的偏移值后，会将内核二进制中的text和data段拷贝到PHYSICAL_START+offset的物理地址上，然后执行重定位处理，前面讲过vmlinuz中保存着vmlinux.relocs文件，它里面包含的就是需要重定位的地址，因此bootloader从个文件中提取出要重定位的地址。
    arch/x86/boot/compressed/misc.c
    static void handle_relocations(void *output, unsigned long output_len)
    {
            int *reloc;
            unsigned long delta, map, ptr;
            unsigned long min_addr = (unsigned long)output;
            unsigned long max_addr = min_addr + output_len;
            delta = min_addr - LOAD_PHYSICAL_ADDR;
            if (!delta) {
                    debug_putstr("No relocation needed... ");
                    return;
            }
            debug_putstr("Performing relocations... ");
            map = delta - __START_KERNEL_map;
            for (reloc = output + output_len - sizeof(*reloc); *reloc; reloc--) {
                    int extended = *reloc;
                    extended += map;
                    ptr = (unsigned long)extended;
                    if (ptr  max_addr)
                            error("32-bit relocation outside of kernel!\n");
                    *(uint32_t *)ptr += delta;
            }
    #ifdef CONFIG_X86_64
            while (*--reloc) {
                    long extended = *reloc;
                    extended += map;
                    ptr = (unsigned long)extended;
                    if (ptr  max_addr)
                            error("inverse 32-bit relocation outside of kernel!\n");
                    *(int32_t *)ptr -= delta;
            }
            for (reloc--; *reloc; reloc--) {
                    long extended = *reloc;
                    extended += map;
                    ptr = (unsigned long)extended;
                    if (ptr  max_addr)
                            error("64-bit relocation outside of kernel!\n");
                    *(uint64_t *)ptr += delta;
            }
前面提到vmlinux.relocs的文件结构有三段，所以上面有三个循环来分别解析处理，我们已64位reloc信息的处理为例：
    for (reloc--; *reloc; reloc--) {
                    long extended = *reloc;
                    extended += map;
                    ptr = (unsigned long)extended;
                    *(uint64_t *)ptr += delta;
            }
笔者认为这段代码写的比较隐晦难懂，
_reloc保存的是vmlinux链接后的虚拟地址，本来内核是链接在PHYSICAL_START这个物理地址，虚拟地址和物理地址的映射关系是： 物理地址 =
虚拟地址 - START_KERNEL_map
START_KERNEL_map是内核起始的虚拟地址，在重定位阶段，内核还没启用分页机制，所以对地址的引用都是物理地址，而_
reloc保存的是链接后的虚拟地址，因此要利用上面的公式进行转换，同时也要把随机偏移值加上。 _ptr为最终要修正的物理地址：_`reloc` \-`START_KERNEL_map` \+ `delta`, 这个物理地址保存的值为**`reloc`+`delta`, delta为随机偏移值。
* * *