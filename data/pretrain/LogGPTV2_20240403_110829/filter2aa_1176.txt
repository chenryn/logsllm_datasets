1
2
● Who are we
● Background
● Picking our battles
● The web vuln
● Intermission
● Telematics
○ What is it
○ Local vulnerabilities discovered 
○ Writing a blind exploit
○ Remote vulnerability 
● Conclusion
● Public statements 
● Questions
Jesse                @jessemichael
Mickey              @HackingThings
Alex                  @ABazhaniuk 
https://www.mcafee.com/us/threat-center/advanced-threat-research/index.aspx
3
4
● After we were done with our previous hackary, we wanted to 
try something new
● We want to deepen our knowledge and experience with 
automotive security
● Actual car hacking experience is at 0%
5
● Autonomous vehicles
○ Tesla Autopilot
○ Comma.io
○ Google self driving car
○ UBER
● Connected cars
○ Autonomous
○ V2X
○ V2V
● Drive by wire systems, how does it work?
6
● Charlie Miller and Chris Valasek 
● Troy Hunt and Scott Helme - Nissan web API hack
● Kevin Mahaffey and Marc Rogers (Tesla hack 2015)
● Keen Labs Tesla hack
● And more...
7
● Budget?
● Where do we start?
● We already pwned an after market IVI , what is next?
*IVI = In-Vehicle Infotainment System
● Ok, Lets go the wrecking yard and look around
8
● Funny story about the wrecking yard. 
○ Looking for a late model OEM IVI.
○ “What do you have?”
■ An F150 that got into a brawl with a wall and lost
■ and more squashed cars
● A junk yard != wrecking yard.
9
● Nice car!
● Can you spot what caused 
it to be “Totaled”?
10
● GIMME THAT DASHBOARD!
11
● 1 week later
● carception
12
● A trip to Lowe’s and a few hours later
13
● Once it is fully assembled it kinda works
● A “few” errors appear on the instrument panels.
● We need to get this thing on the table somewhat functional
● NissanConnect℠ EV
14
● NissanConnectSM EV (formerly known as CARWINGS®) is designed to help you 
manage your Nissan LEAF® and control a host of convenient features. The best 
part: you don’t have to be in or even near your car to do it. It all works through your 
smartphone or computer. [*]
● NissanConnect EV is complimentary for three years. You just need to download the 
companion app to run all the features listed below. 
WITH THE NISSANCONNECTSM EV APP, YOU CAN:
● Find a nearby charging station
● Check on the state of your battery charge
● Remotely start a charging session
● Get notified when your battery is fully charged
● See your estimated driving range
● Heat up or cool down your LEAF® to the comfortable temperature it was when you 
left it
● Set a reminder to plug in your car
-
Source:https://www.nissanusa.com/connect/features-app/system-requirements/nissan-connect-ev
15
● Next step, switch owners in the backend
● Go ask nicely for the title from wrecking yard, ahh….. No. 
Wrecking guy reaction:
● junk title can’t be moved.
● Bill of sale, wrecking yard receipt?
● ask nissan nicely and you shall receive
16
17
● We already pwned one in the past, seems like the best place 
to start.
● Looking at the IVI attack surface:
18
● The IVI is running windows automotive 7 , no source, 
requires license.
● That’s too hard!, we want to hack this but...
● Maybe there is something simpler to hack in our sights, let's 
keep looking
19
20
● Getting any kind of info from the IVI
● Getting any kind of info from the IVI
- Navigation system debug data
- contacts
- way points
- SRAM dump
21
● Getting any kind of info from the IVI
- Navigation system debug data
- contacts
- way points
- SRAM dump
- Flash dumps
22
23
After running strings on the debug files we discovered this url:
“http://biz.nissan-gev.com/WARCondelivbas/it-m_gw10/”
● Let’s do a WHOIS
● no one owns it, let’s buy it for the lulz!
● setting up an EC2 instance and running a generic honey pot 
● Let's see who comes knocking
24
- The Web vulnerability 
- First knock comes from japan
25
26
- The Web vulnerability 
- First knock comes from japan
- The Web vulnerability 
- First knock comes from japan
- but then we start getting more knocks on the door and these 
are not your usual automated tools.
27
POST /WARCondelivbas/it-m_gw10/ HTTP/1.1
Host: biz.nissan-gev.com
Connection: Keep-Alive
User-Agent: NISSAN CARWINGS
Content-Type: application/x-carwings-nz
Content-Length: 614
^@^@^Cä^@^@^BZx:6%?¢sdd^TQæL0^Rí^P¡(
¤äsdx¤¿ÓßêÇtHÙId^HZrwggg×I^\$É»
^?)cÙIx^XÉæó|¶óïõíÝ/ÜOðâ¼?=ôÒ:ÕÂA4eS)³)
èÝïÕQNóÂTB7F^VÔ4ôüìð´^Tv^P÷M2èè^UW^U ßÐ¡ÄK]Pi-%UYG^?
Æ²4:glRj¸ÍOò%c×s¶LÓ°X.èÙét^GB÷ng¸µßZ^N^^±xcfAW
«ÕQÊ²ð¦AødÐ^B^GJjÑ^V±E$PÐÙíEp§Ùq@^?^Bl_jâÚjÏÖ^HÇA^xNWPç
^Rë`^B«´¶ 
- The Web vulnerability 
- First knock comes from japan
- but then we start getting more knocks on the door and these 
are not your usual automated tools.
28
- The Web vulnerability 
- First knock comes from japan
- but then we start getting more knocks on the door and these 
are not your usual automated tools.
29
- The Web vulnerability 
- First knock comes from japan
- but then we start getting more knocks on the door and these 
are not your usual automated tools.
- We got cars connecting to our server?!?
30
- The Web vulnerability 
- First knock comes from japan
- but then we start getting more knocks on the door and these 
are not your usual automated tools.
31
The cars sent us plenty of data, including location, let's look at 
one of them a bit closer.
32
33
The cars sent us plenty of data, including location, let's look at 
one of them a bit closer.
34
The cars sent us plenty of data, including location, let's look at 
one of them a bit closer.
Who owns this car? we have the VIN, lets google...
35
36
Who owns this car? we have the VIN, lets google...
37
Why is this happening?
● Owner replacing the SIM card in their car.
● The Jasper network.
38
39
● Continental made Telematics Control Unit (TCU)
● Used as the conduit for the car to connect to the backend.
● Older model , buy it on eBay for cheap.
40
● Uses a cellular 2G modem
41
● Uses a cellular 2G modem
● Yes
42
● Uses a cellular 2G modem
● Yes
● 2G
43
44
Connected to the rest of the car like this
Gathering Intel from the board
- Exploring the TCU - TOP
45
46
Gathering Intel from the board
- Exploring the TCU - Bottom
Exploring the TCU
Freescale 
chip   CAN
2G Cellular complex    
USB
Small 
connector 
(USB)
Big connector
ANT
47
UART 
CAN
ANT
48
Freescale 
chip   CAN
Small 
connector 
(USB)
Big connector
2G Cellular complex    
USB
UART 
CAN
Exploring the TCU
Gathering Intel from the board
● Freescale chip debug header, lets get firmware
49
Gathering Intel from the board
● Its USB right? lets mitm it! CARLAPTOPTCU
50
51
Gathering Intel from the board
● Its USB right? lets mitm it! CARLAPTOPTCU
● This looks familiar...
52
Gathering Intel from the board
● Its USB right? lets mitm it! CARLAPTOPTCU
● This looks familiar...
Gathering Intel from the board
● Its USB right? lets mitm it!
● This looks familiar...
53
● Oh, look at that!
● I know this chip! Do you?
54
● Here are a few hints
55
56
Infineon PMB 8876 
Functional diagram
57
Gathering Intel from the board
● It’s a USB system.  We know this…
● Lets connect to it and explore
Telematics vulnerabilities
● Ok, now that we have gathered our senses together, let's 
check for known vulnerabilities...
58
59
Telematics vulnerabilities
● Ok, now that we have gathered our senses together, let's 
check for known vulnerabilities...
60
Telematics vulnerabilities
● Ok, now that we have gathered our senses together, let's 
check for known vulnerabilities...
61
Telematics vulnerabilities
● Ok, now that we have gathered our senses together, let's 
check for known vulnerabilities...
62
Telematics vulnerabilities
● Ok, now that we have gathered our senses together, let's 
check for known vulnerabilities...
Telematics vulnerabilities
● Ok, now that we have gathered our senses together, let's 
check for known vulnerabilities.
● confirmed local vector
○ AT+STKPROF
○ AT+XAPP
○ AT+XLOG
○ AT+FNS
63
Telematics vulnerabilities
● After confirming the local vulns, let’s check for remote ones…
● oh wait!
● Thanks to the amazing Dr. Ralf-Philipp Weinmann we know 
this baseband FW is vulnerable to an Over-The-Air TMSI 
buffer overflow.
64
Telematics vulnerabilities
● Confirming the TMSI vulnerability
○ The good book has PoC code in it, yay!
○ OpenBTS has moved on from testcall functionality 
(“security” reasons) 
○ this will take a while, better get a faraday cage
65
Telematics vulnerabilities
● Confirming the TMSI vulnerability
66
Telematics vulnerabilities
● Confirming the TMSI vulnerability
● After many many days of attempts and trying to get OpenBTS 
to work, Jesse confirms remote buffer overflow!
○ Thank you Jared Boone! 
67
Telematics vulnerabilities
● Exploiting
○ We don’t have a copy of the firmware, how do we fix this?
○ Getting the firmware out of the device requires semi-blind 
exploitation
○ It’s not quite that bad, we have some basic exception 
logging that includes:
■ Register state at time of crash
■ 178 dwords of stack values upwards from SP at time 
of crash
○ We can work with that
68
Telematics vulnerabilities
● Exploiting
○ No DEP
○ No ASLR
69
Telematics vulnerabilities
● Exploiting
○ We’ll just use AT command buffer overflow to inject 
payload to:
■ Write tag to signify start of data block
■ Copy 512 bytes from arbitrary location into stack 
frame
■ Write tag to signify completed copy of data block
■ Jump to hardcoded invalid location to force a crash at 
specific location
■ Wait for device to reboot
■ Read exception log using AT+XLOG and extract data 
from between tags in stack dump
■ … and then do it again 13 thousand times …
70
Telematics vulnerabilities
● Once firmware is accessible we can work on reversing and 
jumping from the baseband to the CAN bus
71
72
73
74