node i (known to BS and node i).
1. Base station simulates the operation of HT on the leaf vertex
deﬁnitions Li = (P Ki, i, T ), computes root vertex r.
2. Base station authentically broadcasts (r, T ).
3. Each node, on reception, discards old root vertex and updates
its current root vertex to r.
4. Veriﬁcation conﬁrmation functionality is used to ensure all
nodes received the broadcast. If not, stop.
5. Each node releases Li = (P Ki, i, T ).
6. Nodes collaborate to implement HT functionality, recomput-
ing the hash tree with root r.
7. As per HT functionality, veriﬁcation paths Pi are dissemi-
Figure 6: Use of HT as a Public Key distribution primitive
network which also remembers or can verify that r is a valid root
vertex from the base station. To ensure that all nodes receive their
respective proofs of validity for their labels, one ﬁnal round of the
veriﬁcation conﬁrmation functionality is performed. The algorithm
is summarized in Algorithm 2.
If we desire to use the method of Section 5 for the authenticated
broadcast portion of this protocol, the two protocols can be merged
in a straightforward way. Let the leaves of the hash tree contain
both Li and a MAC computed on a non-reusable nonce N. Specif-
ically, the leaf value for node i would now be Li(cid:6)MACKi(Li(cid:6)N ).
This makes the pair (r, N ) self-authenticating as long as N is fresh.
To create an acceptable pair (r, N ) where N is a new nonce (that
no node has yet used or seen), the adversary would need to compute
new MACs for all nodes in the network including those for which
it does not know the secret MAC key – this is computationally in-
feasible. To prevent the adversary from ﬂooding the network with
invalid nonces, the hash chain method of Section 5.1 may be used.
6.3 Analysis
The protocol involves the dissemination of a hash tree through-
out the network with an authenticated root hash value. Correctness
thus follows from the observation that, for each hash tree T with a
root hash value r, it is computationally infeasible for an adversary
to ﬁnd another hash tree T (cid:4) (cid:5)= T that also has root hash value r. If
the protocol is completed successfully, then every unrevoked node
will have received its certiﬁcate and can compute the sequence of
hashes to the publicly-known root r; revoked nodes are not part of
the tree and cannot produce any sequence of hashes to r.
The public key dissemination method described in this section
incurs O(log n) congestion overhead, and can be used to either re-
fresh keys periodically or as needed to revoke old keys. The HT
method of public key management has two advantages over con-
ventional mechanisms:
1. The certiﬁcate-veriﬁcation attack is negated because authen-
ticating a public key only requires O(log n) hash function
evaluations, which is signiﬁcantly faster than a public key
signature veriﬁcation.
2. Public key revocation is greatly simpliﬁed: each time a node
is revoked, the base station reforms the topology around the
revoked node (via a series of authenticated unicasts to the
nodes affected by the change) and then repeats the public key
binding algorithm for a total of O(log n) congestion over-
head. Given that node revocations are infrequent occurrences,
this is a signiﬁcantly lower overhead than periodically uni-
nated back to the nodes after hash tree is computed.
8. Each node i veriﬁes that Li is a leaf vertex in the hash tree with
root r.
9. Veriﬁcation conﬁrmation functionality used to check that all
nodes received their correct veriﬁcation paths successfully. If
not, stop.
Public Key Authentication Procedure:
1. When node i declares its public key certiﬁcate Li =
(P Ki, i, T ) to another node j, node i authenticates Li by in-
cluding the information to recompute veriﬁcation path Pi.
2. Node j can authenticate that P Ki is a valid key by recom-
puting the path Pi and checking that it terminates in the most
recent root vertex r.
casting newly signed certiﬁcates to each node, and also does
not require the use of node revocation lists.
One potential drawback of using the HT functionality in this man-
ner is its vulnerability to denial of service attacks. Speciﬁcally, a
malicious node in the CPS algorithm can sabotage the hash tree dis-
semination process causing the veriﬁcation of legitimate nodes to
fail. However, such an attack is much less severe than the certiﬁcate-
revocation attack because (a) it is easily detectable (via the veriﬁ-
cation conﬁrmation functionality in the algorithm) and, once de-
tected, countermeasures can then be taken to locate and revoke the
malicious node; (b) the attacker can only disrupt one round of the
algorithm per attack, with no lasting impact on the network, instead
of being able to completely drain the physical battery reserves of
a given node; (c) the attacker can only perform the attack from in-
side the network using a compromised node instead of being able
to freely perform the attack from an external device outside of the
network.
Hence, using the information-binding functionality in this man-
ner to perform public key management addresses a difﬁcult prob-
lem in a highly efﬁcient manner.
6.4 Further Applications
Public key management is only one example of the usefulness of
the HT structure in authoritatively binding information to a spe-
ciﬁc node. In general, the same algorithm can be applied to create
a publicly veriﬁable attestation to the veracity of any determinis-
tic node property. We call the general property the “information-
binding functionality”. We include a short list of some brieﬂy de-
scribed examples to highlight its generality and usefulness.
Network access prioritization. In certain applications, nodes with
tighter requirements on latency or bandwidth may need prioritized
access to the network. For example, more aggressive MAC layer
access, or prioritized trafﬁc queues. The information binding func-
tionality can be used to efﬁciently bind priority levels to nodes such
that any neighbor node can readily verify the authorized priority
level of a node.
Local topology control. The only topology that is required to be
static for the purposes of applying the HT functionality is the ag-
gregation tree structure; nodes may be free to associate with other
nodes within their immediate neighborhood to exchange sensed in-
formation or for coordination functions such as sleep scheduling.
Topology control may be necessary in such situations to prevent
a given node from associating with nodes outside of its designated
neighbor set. This can be implemented with an authorized neighbor
list bound to each node.
Node type credentials. Nodes should not be able to masquerade as
entities that they are not. For example, a light switch should not be
allowed to claim that it is a ﬁre alarm. Credentials binding nodes to
their roles can be used to prevent this kind of unauthorized claims
by malicious nodes.
Coordination schedules. Deterministic schedules can be bound to
nodes. For example, to ensure a fair rotation as cluster head node,
to ensure sensor coverage in sleep scheduling, and to ensure even
power consumption. Publicly veriﬁable bindings of speciﬁc sched-
ules to nodes can allow local groups to work out fair schedules
without fear of cheating. For example, if a deterministic random
sequence is bound to each node, this can be used to arbitrate which
node gets to be cluster head at any given time.
7. NODE-TO-NODE SIGNATURES
The HT functionality can be further applied to create a node-to-
node signature scheme requiring only each node to share a secret
key with the (univerally trusted) base station.
The problem is deﬁned as follows: suppose each node i in the
network has a message Li (where Li could be arbitrarily chosen by
i itself, with the base station unaware of this choice). We wish to
provide the capability for each node i create a single tag (signature)
indicating that i was responsible for Li. This signature should be
veriﬁable by any other node in the network, i.e. it should have the
nonrepudiation property (given the signature as evidence, i cannot
deny that it was responsible for Li).
Consider the following simple solution: for each node i, the node
sends its message Li (authentically, using the secret key shared
with the base station) to the base station. When node i wants to
prove the authenticity of Li to another node j, it just instructs j to
check with the base station. Since the base station is completely
trusted to tell the truth, we achieve all the properties we require.
Unfortunately having every authentication go directly through the
base station is prohibitively expensive in terms communication con-
gestion.
Our observation is that, through the use of a hash tree, the base
station can efﬁciently “batch authenticate” the origin of an entire set
of messages L1, . . . , Ln by just authenticating the root vertex r of
the hash tree constructed over these messages. The veriﬁcation path
of each Li to the root vertex r then acts as a proof of authenticity
which can be veriﬁed by any node that also knows the veracity of
the root vertex r.
7.1 Algorithm Description
Before the algorithm can be executed, we must ﬁrst bind each
node identity to a speciﬁc veriﬁcation path of the hash tree. We as-
sume that the node topology is static and known to the base station.
For a given HT algorithm operating on a ﬁxed topology, assum-
ing that each node contributes exactly one vertex to the hash tree,
each node must have a ﬁxed path from its vertex to the root of the
hash tree constructed by HT . The base station can compute this
veriﬁcation path from its knowledge of the topology and the HT
algorithm, and can thus bind the path to the node identity using the
protocol of Section 6. Note that this path is constant regardless of
the data value contributed by the node to the HT functionality; in a
network with (mostly) ﬁxed topology this binding only needs to be
performed each time the topology is changed. We assume that each
topological binding b has an identiﬁer sb (e.g., a sequence number
that increases by one each time the topology changes and a new
binding is issued to the nodes). This identiﬁer is embedded into the
binding of nodes to paths; speciﬁcally, in binding b for each node
with identiﬁer IDi, we bind the tuple (cid:2)sb, Pi, IDi(cid:3) indicating that
in the topological binding sb, node IDi has path Pi.
As mentioned, the intuition behind the algorithm is that the base
station performs a “batch authentication”. The algorithm proceeds
in the following steps: (1) HT constructs a hash tree over the set
of values to be authenticated; (2) each node i self-validates that Li
is in the correct position in the hash tree and (3) the base station
conﬁrms this to all nodes using an additional broadcast.
We make the standard assumption that the messages Li have
some property that makes them useless for replay (e.g., timestamp,
or sequence number, or application-level message idempotency).
The details of the algorithm are as follows: each sensor node
i reports its Li to the HT functionality, which then constructs
the hash tree in the usual way. The root r of this hash tree is
reported to the base station. The base station then authentically
broadcasts to all nodes the message (cid:2)r, sb, h(N(cid:4)
)(cid:3) where sb is the
identiﬁer for the current topological binding, N(cid:4)
is a randomly
chosen nonce and h is pre-image resistant. Note that the method
of Section 5 can be used for the authenticated broadcast. The
HT functionality provides the requisite information to the sen-
sor nodes for each node to perform distributed veriﬁcation (i.e.,
each node i recomputes the hash tree vertices from its leaf vertex
Li to the authenticated root vertex r). An important additional
step is performed during this veriﬁcation: each node i must check
that the veriﬁcation path computed in this process is exactly the
authenticated veriﬁcation path Pi that is bound to its ID prior to
the algorithm. Veriﬁcation conﬁrmations are collected from all
nodes with the veriﬁcation conﬁrmation message from node i be-
ing MACKi(r||sb||h(N(cid:4)
If the base station determines
that all distributed veriﬁcation has succeeded, then it broadcasts the
value N(cid:4)
) was part
of an earlier authenticated broadcast). This means that r should
be considered valid and can be used to verify the authenticity of
messages from other nodes. Once the value N(cid:4)
is received by a
node, a ﬁnal round of veriﬁcation conﬁrmations is performed using
MACKi(r||sb||N(cid:4)||OK) as the conﬁrmation message.
(this message is self-authenticating since h(N(cid:4)
)||OK).
After this process, a node i can authenticate its message Li to
node j as follows. As a signature over Li, Node i transmits to node
j all the verifying information it used in the distributed veriﬁcation
step it performed (i.e., j gets enough information to reconstruct
the path from Li to r). Node i also transmits the binding of its
veriﬁcation path to its identity (for the topological binding with
identiﬁer sb). Upon reception, Node j checks that the value r is a
valid root vertex, i.e. in some earlier phase, the hash pre-image N(cid:4)
was released by the base station indicating that all nodes (including
i) must have successfully completed distributed veriﬁcation over r
prior to this. Node j also checks that when r was broadcast by the
base station, the topological binding identiﬁer associated with r is
sb. Node j then veriﬁes Li using the information provided by Node
i, conﬁrming that the veriﬁcation path is indeed the one bound to
node i’s identity (in the topological binding sb) and that the ﬁnal
root vertex computed is r. If the checks complete successfully then
Node j knows that Li must have been originated from node i. Since
the veriﬁcation process is identical for all nodes, node j can retain
all the veriﬁcation information it used and use it to prove the origin
of Li to any third-party node j(cid:4)
. This shows the non-repudiable
quality of the signature, i.e. once i proves to j that it originated
Li, it cannot retract that claim since the proof that j now holds is
publicly veriﬁable. The algorithm is summarized in Algorithm 3.
involves the use of public-key cryptography; our scheme uses only
symmetric key cryptography. More signiﬁcantly, the protocol does
not involve any kind of prior key establishment algorithm to pro-
vide this authenticity: each node only needs a single unique key
shared with the base station.
Algorithm 3 Signature Scheme using HT Functionality
Input: Replay-resistant messages Li for each node i
Input: Each node i bound to a ﬁxed veriﬁcation path topology
with a proof P (cid:4)
i and a binding identiﬁer sb (See Section 6)
1. Each node releases Li.
2. Nodes collaborate to implement HT functionality, recomput-
3. Root vertex r is reported to the base station. Base station picks
)) using authenti-
and disseminates (r, sb, h(N(cid:4)
ing the hash tree with root vertex r.
a random N(cid:4)
cated broadcast.
4. As per HT functionality, veriﬁcation paths Pi are dissemi-
nated back to the nodes after hash tree is computed.
5. Each node i veriﬁes that Li is a leaf vertex in the hash tree with
6. Veriﬁcation
root r via its ﬁxed, known veriﬁcation path.
functionality
MACKi(r||sb||h(N(cid:4)
succeeded in veriﬁcation. If not, stop.
conﬁrmation
=
)||OK)) used to check that all nodes
(with Ci
7. Base station broadcasts N(cid:4)
8. Upon receipt of N(cid:4)
, nodes store r as being usable for authenti-
functionality
conﬁrmation
9. Veriﬁcation
cation.
=
MACKi(r||sb||N(cid:4)||OK)) is used to ensure all nodes re-
ceived the broadcast. If not, stop.
Message Authentication Procedure:
Input: Sender i, Receiver j, Message Li
1. Node i transmits Li, r along with information to recompute its
veriﬁcation path Pi and proof of correct path topology P (cid:4)
i .
(with Ci
2. Node j checks that r is a valid root vertex, recalls the topo-
logical binding identiﬁer sb that was associated with r, then
veriﬁes that Li is a descendant of r in the position expected of
i as established by P (cid:4)
i for binding identiﬁer sb.
7.2 Analysis
A proof sketch of unforgeability follows. Suppose for contra-
diction that an adversary has a non-negligible probability of being
i (cid:5)= Li purportedly from some legiti-