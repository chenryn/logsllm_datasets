**作者：天融信阿尔法实验室  
公众号： **
### 前言
FastJson是alibaba的一款开源JSON解析库，可用于将Java对象转换为其JSON表示形式，也可以用于将JSON字符串转换为等效的Java对象。近几年来fastjson漏洞层出不穷，本文将会谈谈近几年来fastjson
RCE漏洞的源头：17年fastjson爆出的1.2.24反序列化漏洞。以这个漏洞为基础，详细分析fastjson漏洞的一些细节问题。
关于Fastjson
1.2.24反序列化漏洞，自从17年以来已经有很多人分析过了，一些基础内容本文就不再陈述了。此次漏洞简单来说，就是Fastjson通过parseObject/parse将传入的字符串反序列化为Java对象时由于没有进行合理检查而导致的
本文将着重分析一下这个漏洞没有被详细介绍过的细节问题，如下：
1、parseObject(String text) 、parse (String text)、 parseObject(String text,
Class\ clazz)三个方法从代码层面上来看，究竟有何不同？
2、使用TemplatesImpl攻击调用链路构造poc时，为什么一定需要构造`_tfactory`以及`_name`字段？
3、`_outputProperties`与其getter方法getOutputProperties()方法名字并不完全一致是如何解决的？
除此之外，本文在介绍TemplatesImpl攻击调用链路时，以模拟寻找漏洞利用链的思路，从最终的执行点开始向上寻找入口，模拟还原出挖掘这个TemplatesImpl利用链的完整过程。
### 漏洞分析
关于parse (String text) 、parseObject(String text)、 parseObject(String text,
Class\ clazz)三个方法，我们进行一个测试
FastJsonTest类中变量以及其setter/getter关系如下表
| public String t1 | private int t2 | private Boolean t3 | private Properties
t4 | private Properties t5  
---|---|---|---|---|---  
setter | 有 | 有 | 无 | 无 | 有  
getter | 有 | 有 | 有 | 有 | 有  
接下来，我们分别使用下图三种方式分别将JSON字符串反序列化成Java对象
1、Object obj = JSON.parse(jsonstr);
2、Object obj = JSON.parseObject(jsonstr, FastJsonTest.class);
3、Object obj = JSON.parseObject(jsonstr);
首先我们运行一下Object obj = JSON.parse(jsonstr);这种方式
结果：
setT1() 、setT2() 、getT4() 、setT5() 被调用
JSON.parse(jsonstr)最终返回FastJsonTest类的对象
接着我们运行下Object obj = JSON.parseObject(jsonstr, FastJsonTest.class);
结果：
与JSON.parse(jsonstr);这种方式一样setT1() 、setT2() 、getT4() 、setT5() 被调用
JSON.parse(jsonstr)最终返回FastJsonTest类的对象
最后我们运行下Object obj = JSON.parseObject(jsonstr);
结果：
这次结果与上两次大不相同，FastJsonTest类中的所有getter与setter都被调用了，并且`JSON.parseObject(jsonstr);`返回一个JSONObject对象
通过上文运行结果，不难发现有三个问题
  1. 使用JSON.parse(jsonstr);与JSON.parseObject(jsonstr, FastJsonTest.class);两种方式执行后的返回结果完全相同，且FastJsonTest类中getter与setter方法调用情况也完全一致，parse(jsonstr)与parseObject(jsonstr, FastJsonTest.class)有何关联呢？
  2. 使用JSON.parse(jsonstr);与JSON.parseObject(jsonstr, FastJsonTest.class);两种方式时，被调用的getter与setter方法分别为setT1()、setT2()、setT5()、getT4()。FastJsonTest类中一共有五个getter方法，分别为getT1()、getT2()、getT3()、getT4()、getT5()，为什么仅仅getT4被调用了呢?
  3. JSON.parseObject(jsonstr);为什么返回值为JSONObject类对象，且将FastJsonTest类中的所有getter与setter都被调用了
#### 问题一解答
经过调试可以发现，无论使用JSON.parse(jsonstr);或是JSON.parseObject(jsonstr,FastJsonTest.class);方式解析json字符串，程序最终都会调用位于com/alibaba/fastjson/util/JavaBeanInfo.java中的JavaBeanInfo.build()方法来获取并保存目标Java类中的成员变量以及其对应的setter、getter
首先来看下`JSON.parse(jsonstr)`这种方式，当程序执行到JavaBeanInfo.build()方法时情景如下图
此时的调用链如下图
此时传入`JavaBeanInfo.build()` 方法的参数值如下图
再来看下`JSON.parseObject(jsonstr,FastJsonTest.class)`这种方式，当程序执行到`JavaBeanInfo.build()`
方法时情景如下图
此时的调用链如下图
此时传入`JavaBeanInfo.build()` 方法的参数值如下图
二者执行到`JavaBeanInfo.build()` 方法时调用链对比如下
可见二者后面的调用链是完全一样的。二者不同点在于调用`JavaBeanInfo.build()` 方法时传入clazz参数的来源不同：
`JSON.parseObject(jsonstr, FastJsonTest.class)`在调用`JavaBeanInfo.build()`
方法时传入的clazz参数源于parseObject方法中第二个参数中指定的“FastJsonTest.class”。
`JSON.parse(jsonstr);`这种方式调用`JavaBeanInfo.build()`方法时传入的clazz参数获取于json字符串中\@type字段的值。
关于`JSON.parse(jsonstr);`从json字符串中\@type字段获取clazz参数，具体代码如下
程序通过解析传入的json字符串的\@type字段值来获取之后传入JavaBeanInfo.build()方法的clazz参数
因此，只要Json字符串的\@type字段值与JSON.parseObject(jsonstr,FastJsonTest.class);中第二个参数中类名一致，见下图
`JSON.parse(jsonstr)`与`JSON.parseObject(jsonstr,FastJsonTest.class)`这两种方式执行的过程与结果是完全一致的。二者唯一的区别就是获取clazz参数的途径不同
#### 问题二解答
> 使用JSON.parse(jsonstr)与JSON.parseObject(jsonstr,
> FastJsonTest.class)两种方式时，被调用的getter与setter方法分别为setT1() 、setT2()、setT5()
> 、getT4()。FastJsonTest类中一共有五个getter方法，分别为getT1()、getT2()、getT3()、getT4()、getT5()，为什么仅仅getT4被调用了呢?
这个问题要从`JavaBeanInfo.build()` 方法中获取答案：
通过上文的分析可以发现，程序会使用`JavaBeanInfo.build()`方法对传入的json字符串进行解析。在`JavaBeanInfo.build()`方法中，程序将会创建一个fieldList数组来存放后续将要处理的目标类的
setter 方法及某些特定条件的
getter方法。通过上文的结果可见，目标类中所有的setter方法都可以被调用，但只有getT4()这一个getter被调用，那么到底什么样的getter方法可以满足要求并被加入fieldList数组中呢？
在`JavaBeanInfo.build()` 方法可见如下代码
程序从clazz（目标类对象）中通过getMethods获取本类以及父类或者父接口中所有的公共方法，接着进行循环判断这些方法是否可以加入fieldList中以便后续处理
条件一、方法名需要长于4
条件二、不是静态方法