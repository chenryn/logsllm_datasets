A Locator object apparently can be resolved to several elements, so can
represent a list.  
And there are some useful methods to use in this case (e.g. `Locator.first()`
`Locator.nth()` etc).  
Same time, If I need to iterate several locators, the only way I see (please
correct me if I'm wrong) is to get the count first, and then take each new
item by index from locator list manually:
    let itemsCount = await this.pickLkistItem.count() // find the count
    for (let index = 0; index  { arr.push(await it.textContent()) });
    this.pickLkistItem.reduce((result, item) => { . . . }
I guess that the count of the locator items should be frozen at the point of
the iterable function start, so if it increases, additional iterations are
ignored. Otherwise, a 'missing element' error should be thrown if the count
decreased
Or I'm missing something and this is already supported somehow?