2不放了）中生成器函数华丽丽的可以return了，顺带来了个yield from，解决了旧yield的短板。
#### asyncio/yield from
这算第二阶段，Python 3.3引入yield from（PEP
380），Python3.4引入asyncio。其实本质上来说，asyncio是一个事件循环，干的活和libev差不多，用来调度协程，同时使用@asyncio.coroutine来把函数打扮成协程，搭配上yield
from实现基于协程的异步并发。
与yield相比，yield
from进化程度明显高了很多，不仅可以用于重构简化生成器，进而把生成器分割成子生成器，还可以像一个双向管道一样，将send的信息传递给内层协程，获取内层协程yield的值，并且处理好了各种异常情况，`return
(yield from xxx)`也是溜溜的。
接下来看一个yield from Future的例子，其实就是asyncio.sleep(1)：
#### async/await
这是第三个阶段。Python 3.5引入了async/await，没错，我们就是抄C#的，而且还抄出了具有Python特色的`async
with`和`async for`。某种程度上看，async/await是asyncio/yield
from的升级版，这下好了，从语言层面得到了的支持，我们是名正言顺的协程了，再也不用寄人篱下，委身于生成器了（提裤子不认人啊，其实还不是asyncio帮衬着）。也是从这一版本开始，生成器与协程的界限要逐渐开始划清。
对比下async/await和asyncio/yield from，如此相似，不过还是有一些区别的，比如await和yield
from接受的类型，又比如函数所属类型等，所以二者是不能混用的：
不过话说回来，最近几个版本的Python引入的东西真不少，概念一个一个的，感觉已经不是原来那个单纯的Python了。悲剧的是用的人却不多，周边生态一片贫瘠，社区那帮人都是老司机，您车开这么快，我等赶不上啊，连Python界的大神爱民（Armin
Ronacher，我是这么叫的，听着接地气）都一脸蒙逼，狂吐槽（  ），眼看着就要跑去搞rust了。不过，吐槽归吐槽，这个毕竟是趋势，总归是要了解的，技多不压身，乱世出英雄，祝你好运。
题外话，搞安全么，难免写个爬虫、发个http请求什么的，还在用requests吗，去试试aiohttp，谁用谁知道。
#### greenlet/gevent与tornado
除了官方的协程实现外，还有一些基于协程的框架或网络库，其中比较有名的有gevent和tornado，我个人强烈建议好好学学这两个库。
gevent是一个基于协程的异步网络库，基于libev与greenlet。鉴于Python 2中的协程比较残疾，greenlet基本可以看作是Python
2事实上的协程实现了。与官方的各种实现不同，greenlet底层是C实现的，尽管stackless
python基本上算失败了，但是副产品greenlet却发扬光大，配合libev也算活的有声有色，API也与标准库中的线程很类似，分分钟上手。同时猴子补丁也能很大程度上解决大部分Python库不支持异步的问题，这时候nodejs的同学一定在偷笑了：Python这个渣渣。
tornado则是一个比较有名的基于协程的网络框架，主要包含两部分：异步网络库以及web框架。东西是好东西，相比twisted也挺轻量级，但是配套不完善啊，到现在我都没找到一个好用的MySQL驱动，之前用的Redis驱动还坑的我不要不要的。我觉得用作异步网络库还是相当不错的，但是作为web框架吧...就得看人了，我见过很多人直接用普通的MySQLdb，还告我说tornado性能高，你在逗我吗，用普通的MySQL驱动配合异步框架，这尼玛当单线程在用啊，稍有差错IOLoop
Block到死，我要是tornado我都火大。随着Python的发展，tornado现在也已经支持asyncio以及async/await，不过我很久没用了，具体如何请参考文档。
对比gevent与tornado，本质上是相同的，只是二者走了不同的道路，gevent通过给标准库的socket、thread、ssl、os等打patch，采用隐式的方式，无缝的把现有的各种库转换为支持异步，避免了为支持异步而重写，解决了库的问题，性能也是嗖嗖的，随随随便跑万儿八千个patch后的线程玩一样，然而，我对这种隐藏细节、不可掌控的黑魔法总是有一丝顾虑；另一方的tornado则采用显示的方式，把调度交给用户来完成，清晰明了，结果就是自成一套体系，没法很好的利用现有的很多库，还得显示的调用IOLoop，单独使用异常别扭，你可以试试nsq的官方Python库，都是泪。
本文只是对Python中并发编程的一个全局性的介绍，帮助不了解这方面的同学有一个概念，方便去针对学习，若要展开细节，恐怕三天三夜也讲不完，而我的碗还没洗，所以这次就到此为止。其实，作为一门通用胶水语言，我觉得，无论工作是哪个方向，好好学习一下Python是有必要的。知道requests那哥们吗，写完requests后就从路人大胖子变成了文艺摄影小帅哥，而且还抱得美人归，你还等什么。退一步讲，万一安全搞不好，还可以考虑进军目前火热的机器学习领域。
所以，人生苦短，我用Python。