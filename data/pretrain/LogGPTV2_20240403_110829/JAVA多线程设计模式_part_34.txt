相关
使同时执行的线程保持在只有一条的情况。这样来，就能保护住实例的安全性。
解决方式
背景
ImmutablePattern（第2章）
实现
首先，仔细找出实例状态不稳定的范围（临界区间），并对临界区问加以防护，
想要将引用实例状态的线程与改变实例状态的线程拆开，以提高throughput 时，
当实例的状态不会改变时，为了提升 throughput，可使目Immutable Patterm（第2章）。
Java 语言里，可使用 synchronized 来实现出临界区间。
多个线程共享--个实例，实例的状态不会改变。
这就是 Single Threaded Execution Pattern。
若多个线程都擅白史改实例的状态，实例会丧失安全性。
一想破坏它也没办法
为了使读者能更直觉地掌握线程的操作，
多个线程其享一个实例。
我们以漫画图解如下：
---
## Page 343
别名 
Pattem（第6章）。
关联
用 final。
并不简单。记得在帮助文件中也注明这是-个 immutable 的类。
实例里所有用来更新状态的方法（setter）。引用实例状态用的方法（getter）就无妨。
实现
Pattern（第1）了，
解决方式
Guarded Suspension Pattern（第 3 章）
在 Java中使用 privale 来隐藏字段，此外由于无法确保不可更改，因此还要使
为了避免失误造成更改了实例的状态，故将类写成无法由线程更改。另外，删除
● Spin Lock
对多个线程进行共享互斥，可使用SingleThreadedExecutionPattern（第1章）。
使用Immutable Pattem，可提高 thoughput.但是要持续保证不变性（immutablity）
这就是 Immutable Pattern。
当实例建立后状态就不会再变化时，就要停I止使用 Single Threaded Execution
当修改用的线程数量比用来读取的线程数量多时，可考虑使用Read-WriteLock
● Guarded Wait
问矗
等到我准备好
多线程程序设计的模式语言
藏绪
329
---
## Page 344
背景
Execution（第1章）。
相美
实现
警戒条件一直不成立，线程会永远等待下去，会使程序丧失生命性。
否警戒条件满足。如果警戒条件不成立，就要求线程等待到成立为止。
件”来表示实例的“适当的状态”。并且在进行有安全性疑虑的操作前，都要检查是
解决方式
方法。并使川 notify/notifyAll通知警戒条件的改变。检验、修改警戒条件时，会使
间题
背景
330
Balking Pattern（第4章)
当实例的状态不恰当时，就要求线程等待到适合的状态时。首先，以“警戒条
多个线程共亨－个实例。
Guarded Suspension Pattern中检验、更改警戒条件的部分，会用到 Single Thread
Java 语言中，检验警戒条件时使用while 语句，而要让线程等待时则使用 wait
使用 Guarded Suspcnsion Pattcrn，能以警戒条件限制方法的执行。不过，如果
若多个线程都擅自更改实例的状态，实例会丧失安全性。
多个线程共享-一个实例。
当警戒条件不成立时想要马上退出，就使用 Balking Patterm（第4章）。
这就是 Guarded Suspension Pattern。
一不需要的话，就算了吧
---
## Page 345
问题
背景
美联
Execution Pattem（第1章）。
方法，或使用 throw 抛出异常、检验、修改警戒条件时，会使用到 Single Threaded
实现
条件。只有在警戒条件成立时，才会继续执行；如果警戒条件不成立，就直接中断
实例的“适当的状态”，并且在进行有安全性疑虑的操作前，都要检否是否满足警戒
解决方式
时机，义会使程序响应性降低。
问题
（第1章）。
（balk）执行，马上退出。
Producer-Consumer Pattern（第 5 章）
Java 语言中，检验警戒条件时要使用if语句。当要 balk 时，可使月 returm 退出
要从某个线程（Producer参与者）将数据传给其他线程（Consumer参与者）时。
Balking Pattern 中检验、更改警戒条件的部分，会用到 Single Thread Execution
当实例的状态不适合时，就中断掉处理的进行。首先，以“警戒条件”来表示
当 Producer 参与者与jConsumer 参与者处理的速度不同时，速度慢的会扯速度
当想要等到警成条件成立再执行时，可使用Guarded Suspension Pattem（第3章）。
若多个线程都擅自史改实例的状态，实例会丧失安全性。可以直等待安全的
这就是 Balking Patterm。
你来做，我来用
多线程程序设计的模式语言
展结
---
## Page 346
注1：更正确的说法是：
别名
章）。
相英
全地传送数据。
斥，数据就不会丧失安全性。于是throughput 可以不降低，义可在多个线程之间安
Consumer 参与者之间处理速度的差异。另外，只要在Channel 参与者里进行共享.
片让Channel 参与者存放多条数据。这样·-来，就可以缓冲 Producer 参与者与
解快方式
Consumer 参与者若同时读取数据，数据会失去安全性。
快的后腿，
Read-Write Lock Pattern（第 6 章）
● Reader Writer
Worker Pattern（第8章）在传递请求的时候，使用了Producer-ConsumerPatterm。
Future Patterm( 第9章）在传递返同值的时候，使用了Producer-Consumer Pattern.
Channel参与者安全传递数据的部分，使用了Guarded Suspension Patterm（第3
这就是Producer-Consumer Pattern。
在Producer 参与者与Consumer 参与者之间，加上中继用的 Channel 参与者。
不过实在太长而无法当作标语了。
●可以写的只有一·个人，写的时候就不能看啰
·人家想看就看吧，不过看的时候不能写喔
而降低程序的 throughput。另外，半Producer 参与者要写入数据时，
---
## Page 347
相关
进行共享与斥，这样可以在不影响安全性的前提下提高throughput。
加入ReadWriteLock 参与者，以提供两种不同的锁定。ReadWriteLock 参与者会对
解快方式
Pattem（第1章）会使程序throughput 降低
问题
改变实例状态的线程（Writer 参与者）。
背景
“Writer参与者一Writer参与者”、“Reader参与者一Writcr参与者”进行互斥控制。
Read-Write Lock Pattern 中，ReadWriterLock 参与者进行共享互斥的地方，用到
完余没有Writer 参与者的时候，可便用Immutable Patlerm（第2章）。
Java语言可以使用finally块避免忘记解除锁定。
实现
这就是 Read-Write Lock Pattern;
首先，将“控制Reader参与者的锁定”’“控制Writer 参与者的锁定”分开，
若线程之间不进行共享互斥，会丧失安全性。但使用 Single Threaded Execution
多条线程共享·个实例，并有会参考实例状态的线程（Reader 参与者），与会
●Readers/Writer Lock
● Reader/Writer Lock
B
多线程程序设计的模式语言
333
---
## Page 348
相关
实现
Client 参与者的程序代码，并能提高程序的响应性。
线程。这样Client 参与者的线程就可以继续执行下一个操作了。这样做，不用更改
剃名 
解决方式
性很花费时间，程疗的响应性会降低。
问题
梦景
2
Worker Thread Pattern（第8章）
● Thread Pool
——这个工作交给你了
Java 语言中，为了简化启动线程的程序，可使用名内部类。
这就是 Thread-Per-Message Patterm。
在Host参与者里，启动新的线程。并且将方法应该进行的工作，交给这个新的
在方法的属性处理完之前，控制权不会从 Host参与者退出，如果方法的处理属
线程（Clicnt参与者）要调用实例（Host参与者）的方法。
想要将处理的结果返[回给Client 参!与者时，可以使用Future Patterm（第9章）。
想节省启动线程所花费的时间时，可以使用Worker Thread Pattern（第8章）。
一等到工作来，来了就工作
---
## Page 349
理的结果。
背景
例传给1人线程。这样就不需要每次都重新片动新的线程了，
解决方式
出的请求太多时，会启动过多的线程，这会使承载量变差。
问盘
背景
（第5章）。
FuturePattern（第9章）
多相关
线程（Client 参与者）会将工作委托给其他线程，而Client 参与者希望得到处
想要将代表请求的实例传递给工人线程时，可使用 Producer-Consumer Pattern
首先，我们事先启动-些用来进行处理的线程（工人线程）。并将代表请求的实
想要获取工人线程的处理结果时，可以使用Future Pattern（第9章）。
如果方法的处理属性很花时间，程序的响应性会降低。为了提高响应性，而启
这就是 Worker Thread Pattem。
线程（Client 参与者）要调用实例（Host 参与者）的方法。
● Background Thread
一先给您这张提货单
0
多线程程序设计的模式语言
335
---
## Page 350
解决方武
背景
参与者就可以在适当的时机，通过Funure参与者，获取（等待）处理的结果。
先把Future 参与者当作返回值返回。处理的结果事后再设置给Future参与者。这样Client
解决方武
问题
336
问题
Two-Phase Termination Pattern（第 10 章）
相美
这就是Future Patterm:
首先，建立-个与处理结果其有相同接口（API）的Future 参与者。在处理开始时，
想要结束运行中的线程。
将工作委托给别人时，如果又等待执行结果，会使响应性降低。
首先，适合进行终止的时机，还是要交给线程白己判断。所以，定义一个送出
从外部忽然结束掉线程，会丧失安全性。
Future Pattem可用在Worker Thread Pattcm（第8章）想要获取处理结果时。
Future Pattern 可川在 Thread-Per-Message Pattem（第7章）想要获取处理结果时。
等待Client 参与者的处理结果时，会使用Guarded Suspension Patterm（第3章）.
一快把玩具收拾好，去睡觉吧
---
## Page 351
剃名
相关
查终止请求，必须特别小心，
InterruptedException 以后，就不是中断状态了，所以若是使用 isInterupted 方法米检
断掉wait、slccp、join 的等待状态。因为线程到wait、sleep、join 抛出
实现
的结果为真，就正始进行终止处理。
请求”而记.
“终止请求”的方法川来结束线程：这个方法事实上只会将标识设置成“收到终止
Thread-Specific Storage Pattern (第 11 章)
为了有执行时发生异常也能确实进行终止处理，所以要使用finally块，
Java语市中，不们要设曾表示收到终止请求的标识，还要使用interrupt 方法小
这就是 Two-Phasc Ternination Pattern:
● Thread-Spccific Data
● Per-Thrcad Attribute
为了确实进行终止处理，使i了Before/After Patterm。
进行终止处理中时，为了禁止其他操作，可使用 Balking Patern（巢4章）。
● Thread-Specifie Field
Thread-Local Storage
-每个线程的保管箱
：线程要在每个可以开始终止处理的地方自巴检查这个标识。如果检查
?
多线程程序设计的模式语言
---
## Page 352
338
实现
有程序的可读件可能变差的危险性。
TSObjectCollction参与者里了。另外，TSObject 参与者的接口（API）也不必修改。
TSObjccl参与者不需要进行共享可斥，关于多线程的部分，都隐藏在
TSObjectProxy参与者米代替TSObject参与者使川。
的TSObject 参与者，并将I.作委托给TSObject 参与者。Client 参与者会拿
的对照关系。
与者，并建.TSObjectCollection参与者，管理“Client参与者→TSObjeet 参与者‘
解决方法
也不想修改TSObject参与者的接（API）。
而我们也不想改写使用TSObjcct 参与者的对象（Clienl 参与者）的程序代码，所以
问题
下使用。
背景
TSObjectProxy 参与者会通过TSObjectCollection 参与者，获取当前线程所对应
不过，使用Thread-Specific Storage Pattern，等于是在程序里加.上隐性的 context，
这就是 Thread-Specific Storage Patterm
想要使用TSObject参与者并不简单。要将TSObjcct参与者改写成支持多线程
想要将假定在单线程环境下运行的对象（TSObject 参与者），在多线程的环境
Java 语言中，使用 java.lang.ThreadLocal 类担任 TSObjectCollction 参与者。
首先，建立一个与TSObject 参与者具有相同接I（API）的TSObjectProxy参
建立线程独有的空间，并管理这些空间与线程之间的对照关系。
70-
0a
---
## Page 353
是 Scheduler 参与者决定的.
换成个对象，并使用Producer-Consumer Pattcrm（第5章），传给Scheduler参与者。这
调用的.这是只有个I人线程的Workcr Thread Pattern（第8章）这样米，Servant
的线程，
解决方式
个。
问题
参与者），可是Servamt 参!与者是假定在单线程坏境下运行开发出来的，
背景
◆别名
相关
与者就不需要支持多线程，也能处理多个Client 参与者的请求。
，就算 Servant 参与者进行处理高要花些时间，也不会拖慢Client参与者的响应性。
Cliemt 参与者送H请求的操作实现时是调用 Proxy参与者，Proxy参与者会将请求转
肖先，在这里加入个 Scheduler 参与者。Servant 参与者是由 Scheduler 参与者
我们在此建立“个可接受异步消息的主动对象，让他拥有独立于Client参与者
这里有送出请求的线和（Client参与者）与实际川来进行处理的对象（Servant
Active Object Pattern（第 12章）
●Concurrent Object
● Actor
要对多数的线程进行共字工斥时，要使用 Single Thrcaded Exccution Paltcm（第1草）。
这就是 Active Object Pattern.
执行结果可使用Futurc Pattem（第9阜）返国给Client 参与者。
接下来，认择要执行的请求。则是 Schcduler 参与者的1.作。执行请求的顺序
处理的结果会返回 Client 参与者.
处理的请求顺序与执行顺序并不定致，
如果Servant 参与者处即的操作很花费时间，还会拖垮Client 参与者的响应性。
想要以多个Client 参与者使用 Servant 参与者，而 Servant 参与者又不是线程安
一接受异步消息的主动对象
多线程程序设计的模式语言
8
---
## Page 354
次相见。
议读名尝试使用。
能获取 util.concurrent 包。这是Java 多线程程序设计的实月类链接库。在此特别建
考附录E[Lca]）··。另外，从 Doug Lea 的网页上（参考附录E[LeaWeb]），还可
编织未来故事的L作，在这里就交给您了，
Pattern（第5章）。
感谢读者沿着线程这－·条线，阅读本书到了这里。期待有朝一日，我们有缘再
尾声
从单线程这一-条线肝始的故事，编织出了许多的Patcrm，终于走到了这里、
对Client 参与者返回执行结果时，使用了Future Pattem（第9竞）。
相关
public class Main i
从Proxy参与名将请水传给Scheduler参与者的部分，使用了Producer-Consumer
实现Scheduler 参！者的部分，使川了Worker Thread Pattern（第&竞）。
public static vcid main(stcingi] args) ↑
).²art();
new Thread(){
pubiic vcid run(） 
Systen.out-print-n("Enjoy mult'threadirg!");
31
---
## Page 355
练习问题的解答
附录A
---
## Page 356
问题|1-1的解答
问题11-2的解答
342
旁等待。
Introduction 1
也就是说，一个线程在显示 Goodl这个字符串时，显示 Nice!的其他线程就会在
这是因为在类链接库中进行了线程的共享瓦斥（exclusive control）的原因。
O（10）notifyAll方法就是java.lang.Object 类的实例方法。
×（9）调用wait 的诺句-·定要写在 sychronized 方法中才行。
×（8）执行 sleep 方法后，该线程只有在指定的时间内才会进入 wait sete
×（7）某个线程在执行 synchronized 方法时，其他的所有线程都会停止执
×（6）执行sleep 方法后，在指定的时间内所有的线程都会暂停执行。