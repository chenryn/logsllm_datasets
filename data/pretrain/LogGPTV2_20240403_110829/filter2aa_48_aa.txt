Battery Firmware Hacking
Charlie Miller
Accuvant Labs
PI:EMAIL
@0xcharlie
About me
Former US National Security Agency researcher
First to hack the iPhone and G1 Android phone
Winner of CanSecWest Pwn2Own: 2008, 2009, 2010, 2011
Author
Fuzzing for Software Security Testing and Quality 
Assurance
The Mac Hacker’s Handbook
PhD, CISSP, GCFA, etc.
Something different
http://www.youtube.com/watch?v=jjAtBiTSsKY
Agenda
Basics on smart batteries systems
A journey into a MacBook’s battery’s (lack of) security 
mechanisms
Potential impact
Smart battery
“Safety is a primary design goal in the Smart Battery System 
speciﬁcations. The central concept behind the Smart Battery 
speciﬁcations is locating the primary intelligence of the system 
inside the battery pack itself. This enables the system to be 
much more accurate in measurement of battery parameters such 
as remaining capacity and design voltage, and also allows the 
charging algorithm and parameters to be tuned to the battery 
pack’s speciﬁc chemistry. By relying on the battery pack’s 
intelligence, a properly designed Smart Battery system will safely 
charge and discharge any expected battery chemistry.”
- Smart Battery System Speciﬁcations document
Smart batteries
Have an embedded controller which communicate with 
the charger and host
Has a responsibility to maintain safety
Can be conﬁgured for different parameters/chemistries
Possible Battery Attacks
Brick battery on victim
Reprogram to remove safety features and allow 
explosion (thermal runaway)???
Persistent DOS to OS
Persistent backdoor to OS (requires kernel bug)
TPM, BIOS sniffer
Spoiler
I didn’t blow up batteries
Didn’t do too much twiddling of parameters in my 
house
Would like to continue to take my laptop on airplanes
Might be able to take this work and do it
How to start
I suck at hardware, so look for associated software
Battery updater
Lots of calls to a function 
that basically wraps 
IOConnectMethodStructure
IsStructure
This is a function which 
passes data to a driver
The driver in this case is 
AppleSmartBatteryManager
AppleSmartBattery
Is part of PowerManagement package
source code available, but won’t compile
missing many things, but lots of nice info in headers
More battery updater
It does things like read the device name and compare 
to a list of devices to update or not (DeviceNameCmd)
Read and check ﬁrmware version and pack lot code 
(ManufactureDataCmd)
And some other ones that aren’t deﬁned in the header 
ﬁle
One odd thing
What’s up with 0x3672 and 0x0414?
Google!
Double win!
We now know its some kind of Texas Instruments chip
We also know Apple used the default Unseal key
We can verify that Apple also used the default Full-
Access key
Thanks!
Which chip?
Its a long story...
Each chip returns slightly different data ﬂash lengths 
for each “subclass”
I wrote a script to get these values and then manually 
looked for this “ﬁngerprint” in all the TI design docs
Eventually found one that matched
Note: I really don’t like to mess with hardware!
Data ﬂash signature
0: 22
1: 25
2: 10
3: 1
...
Behaves like a 
TI bq20z80
The right way to do it
Step 2
Step 3
Lithium Polymer cells
Electronics
Step 4
Chips 
and stuff
Step 5
TI bq29312
Step 6
TI bq20z80
TI bq29412
Another clue I missed
From AppleSmartBatteryCommands.h
Sigh, I suck
Digression
We now know what kind of hardware is on the battery
We can get data sheets for it
We can see how to talk to the driver which talks to the 
battery
What kinds of things can we say to it and how does it 
work?
Smart Battery System (SBS)
SMBus
Communicate via System Management Bus (SMBus)
Two-wire interface based on i2c
Format of data outlined in Smart Battery Data 
Speciﬁcation
Mac OS X
Apple provides a kernel module, 
AppleSmartBatteryManager, which allows writing to the 
SMBus
Access is not raw
I developed an API to document this and make it easier
Releasing it after this talk
SMBus API example usage
SLUU276
Document outlines all 
SBS commands
Documents DataFlash
For bq20z80-V100 + 
bq29312A chipset
That’s us!
Lots to do!
There are many 
interesting writable 
conﬁguration values
Design capacity
FET control
Design voltage
Device chemistry
Cell overvolt threshold
Pack overvolt threshold
Overcharge threshold
Overtemp threshold
2nd level voltage 
threshold
2nd level charge 
threshold
2nd level temp theshold
Impedance table
Temp model
Twiddle-twiddle
I played with these values but 
nothing too interesting happened
It still stopped charging when it 
was really supposed to do so
Needed to dig deeper
unseal
full access
Boot ROM
Different modes
Sealed
Unsealed
Full Access
Conﬁguration
BootROM
Sealed
From the factory
Only standard (not extended) SBS commands available
Standard commands only have read access
Unsealed
Access to Data Flash space
Access to some extended SBS commands
Some SBS commands have read/write access
Apple battery ﬁrmware updates enter this mode
Full access mode
All SBS commands
All commands have read/write access
Can enter BootROM and Conﬁguration mode
Apple ﬁrmware updates do not enter this mode
Conﬁguration mode
By issuing SMBus commands (see slua355b) you tell 
the battery what levels of current, voltage, temp it is 
currently receiving
It then makes internal changes to align itself with these 
values
write_word(0, 0x40);     //enter calibrate mode from full access mode
write_word(0x63, n);    //n = number of cells
write_word(0x60, n);  
//n = current
write_word(0x61, n);  
//n = voltage
write_word(0x62, n);  
//n = temp
write_word(0x51, 0xc0d5); //calibrate device.
read_word(0x52, y); 
//y = bit field, whats calibrated.  (poll with this)
send_byte(0x72); 
   //transfer results to data flash
send_byte(0x73); 
   //exit Calibration mode.
Other calibrations?
Yes, I’m a prodigy
Boot ROM mode
Allows low level access to device, direct access to data 
ﬂash and ﬁrmware
bq20z80-V110 + bq29312A Chipset Technical 
Reference Manual does not document it
Time to buy some hardware, sigh
bq20z80evm-001
An evaluation system for the bq20z80/bq2312a/
bq29400 smart battery chipset
Almost exactly the chipset on the Apple Macbook 
battery
Comes with Windows software to interact with it via 
USB
My test rig
The software
Read/write SBS
Data ﬂash
Pro
Hell yea
Raw SMBus commands
Firmware ﬂash
EVM
It can ﬂash the ﬁrmware with a “srec” ﬁle which comes 
with the kit
Need to sniff what it’s doing so we can ﬁgure out 
bootROM mode and copy it
senc ﬁles
“encrypted” SREC ﬁle
Where encryption = fancy xor magic
SREC ﬁles contain
Some header stuff
Full data ﬂash
Instruction ﬂash
Checksums
Introspection
Wrote a PyDbg script 
which intercepted data 
before going over USB
Could compare this data 
to the raw read/writes on 
Pro screen
Interpret data during 
reprogramming
Some analysis
SMBus command
Read word: 0x8
Write word: 0x4
Read block: 0x2
Write block: 0x5
Google again
Googling these types of commands, numbers revealed 
the bq803xx ROM API v3.0 User’s Guide
This documents the layout of the ﬁrmware as well as all 
the Boot ROM routines
EVM Programming SENC
(0200)
(0201)
...
(023e)
// program flash data
(00)
(01)
...
(1a)
(30)
(31)
...
(37)
// program flash code
(0002)
(0002)
(0003)
(0003)
...
(02ff)
(02ff)
(0000)
(0000)
(0001)
(0001)
Erase everything
Program 0x38 rows of ﬂash data
Program 0x300 rows 
of instruction ﬂash
Boot ROM - mostly ok
See how to write to Boot ROM - except what’s up with the 
checksums and stuff...
Can probably ﬁgure out how to read from Boot ROM from the 
doc, although no live examples
Can also probably get all data ﬂash, not just the SBS 
accessible stuff
Can see what the instruction ﬂash looks like by recording the 
SMBus writes during EVM reprogramming
Need to know what kind of machine code is in there!
Battery chemistry
Smart battery chipsets should be able to work with 
battery cells of various chemistries
Settings on the device can be conﬁgured for different 
(or unique) chemistries
No documentation of what values these are or how to 
set them
Evaluation kit can do it
!
Sniff the chemistry change
Write 0x52 bytes to subclass 83 (undocumented)
Write 0x50 bytes to subclass 84 (undocumented)
Write 0x1e bytes to subclass 85 (undocumented)
Write 0x20 bytes to subclasses 88-95 (R_a tables)
Cell impedance
Write 0x40 bytes to subclass 80 (IT Cfg)
Impedance Track algorithm parameters
Subclass 83
Seems to be a bunch of signed shorts
First is chemistry ID
Rest are decreasing values, presumably a voltage 
graph of some kind
3500$
3600$
3700$
3800$
3900$
4000$
4100$
4200$
4300$