A wireless signal is typically represented as a stream of discrete com-
plex numbers [24]. To transmit a packet over the wireless channel, the
transmitter maps the bits into complex symbols, in a process called
modulation. For example, the BPSK modulation (used in 802.11
at low rates) maps a “0” bit to e jπ = −1 and a “1” bit to e j0 = 1.
The transmitter generates a complex symbol every T seconds. In
this paper, we use the term x[n] to denote the complex number that
represents the nth transmitted symbol.
The received signal is also represented as a stream of complex
symbols spaced by the sampling interval T . These symbols differ,
however, from the transmitted symbols, both in amplitude and phase.
In particular, if the transmitted symbol is x[n] the received symbol
can be approximated as:
y[n] = Hx[n] + w[n],
(1)
where H = heγ is also a complex number, whose magnitude h refers
to channel attenuation and its angle γ is a phase shift that depends on
the distance between the transmitter and the receiver, and w[n] is a
random complex noise.2
ZigZag also exploits collision patterns that arise from capture ef-
2This models ﬂat-fading quasi-static channels.
If Alice and Bob transmit concurrently their signals add up, and
the received signal can be expressed as:
y[n] = yA[n] + yB[n] + w[n],
where yA[n] = HAxA[n] and yB[n] = HBxB[n] refer to Alice’s and
Bob’s signals after traversing their corresponding channels to the AP.
Note that the above does not mean that we assume the nth symbol
from Alice combines with the nth symbol from Bob. The notation is
only to keep the exposition clear.
4.1 Practical Issues
A few practical issues complicates the process of estimating the
transmitted symbols from the received symbols: frequency offset,
sampling offset, and inter-symbol interference. Typically, a decoder
has built-in mechanisms to deal with these issues [24].
(a) Frequency Offset and Phase Tracking: It is virtually impossi-
ble to manufacture two radios centered at the same exact frequency.
Hence, there is always a small frequency difference, δ f , between
transmitter and receiver. The frequency offset causes a linear dis-
placement in the phase of the received signal that increases over time,
i.e.,
y[n] = Hx[n]e j2πnδ f T + w[n].
Typically, the receiver estimates δ f and compensates for it.
(b) Sampling Offset: The transmitted signal is a sequence of com-
plex samples separated by a period T . However, when transmitted
on the wireless medium, these discrete values have to be interpolated
into a continuous signal. The continuous signal is equal to the orig-
inal discrete samples, only if sampled at the exact same positions
where the discrete values were. Due to lack of synchronization, a
receiver cannot sample the received signal exactly at the right posi-
tions. There is always a sampling offset, µ. Further, the drift in the
transmitter’s and receiver’s clocks results in a drift in the sampling
offset. Hence, decoders have algorithms to estimate µ and track it
over the duration of a packet.
(c) Inter-Symbol Interference (ISI) While Eq. 1 makes it look
as if a received symbol y[n] depends only on the corresponding
transmitted symbol x[n], in practice, neighboring symbols affect each
other to some extent. Practical receivers apply linear equalizers [22]
to mitigate the effect of ISI.
5 ZigZag Decoding
We explain ZigZag decoding using the hidden terminal scenario in
Fig. 6, where Alice and Bob, not able to sense each other, transmit
simultaneously to the AP, creating repeated collisions. Later in §8,
we extend our approach to a larger number of colliding senders.
Like current 802.11, when a ZigZag receiver detects a packet it
tries to decode it, assuming no collision, and using a typical decoder.
If decoding fails (e.g., the decoded packet does not satisfy the check-
sum), the ZigZag receiver will check whether the packet has suffered
a collision, and proceed to apply ZigZag decoding.
aligns these L samples with the ﬁrst L received samples, computes the
correlation, shifts the alignment by one sample and re-computes the
correlation. The AP repeats this process until the end of the packet.
The preamble is a pseudo-random sequence that is independent of
shifted versions of itself, as well as Alice’s and Bob’s data. Hence the
correlation is near zero except when the preamble is perfectly aligned
with the beginning of a packet. Fig. 5 shows the correlation as a
function of the position in the received signal. The measurements are
collected using GNURadios (see §10). Note that when the correlation
spikes in the middle of a reception, it indicates a collision. Further,
the position of the spike corresponds to the beginning of the second
packet, and hence shows ∆, the offset between the colliding packets.
The above argument is only partially correct because the frequency
offset can destroy the correlation, unless the AP compensates for it.
Assume that Alice’s packet starts ﬁrst and Bob’s packet collides with
it starting at position ∆. To detect Bob’s colliding packet, the AP
has to compensate for the frequency offset between Bob and itself.
The frequency offset does not change over long periods, and thus the
AP can maintain coarse estimates of the frequency offsets of active
clients as obtained at the time of association. The AP uses these
estimates in the computation.
Mathematically, the correlation is computed as follows. Let y
be the received signal, which is the sum of the signal from Alice,
yA, the signal from Bob, yB, and the noise term w. Let the samples
s[k], 1 ≤ k ≤ L, refer to the known preamble, and s∗[k] be the complex
conjugate. The correlation, Γ, at position ∆ is:
Γ(∆) =
=
L
∑
k=1
L
∑
k=1
s∗[k]y[k + ∆]
s∗[k](yA[k + ∆] + yB[k] + w[k])
The preamble, however, is independent of Alice’s data and the noise,
and thus the correlation between the preamble and these terms is
about zero. Since Bob’s ﬁrst L samples are the same as the preamble,
we obtain:
Γ(∆) =
s∗[k]yB[k]
L
∑
k=1
=
L
∑
k=1
= HB
s∗[k]HBs[k]e j2πkδ fBT
L
∑
k=1
|s[k]|2e j2πkδ fBT
Since a frequency offset exists between Bob and the AP, i.e.,
δ fB 6= 0, the terms inside the sum have different angles and may
cancel each other. Thus, the AP should compute the value of the
correlation after compensating for the frequency offset, which we
call Γ′. At position ∆ this value becomes:
Γ′(∆) = HB
= HB
L
∑
k=1
L
∑
k=1
|s[k]|2e j2πkδ fBT × e− j2πkδ fBT
|s[k]|2.
5.1
Is It a Collision?
To detect a collision, the AP exploits that every 802.11 packet starts
with a known preamble [34]. The AP detects a collision by correlat-
ing the known preamble with the received signal. Correlation is a
popular technique in wireless receivers for detecting known signal
patterns [7]. Say that the known preamble is L samples. The AP
The magnitude of Γ′(∆) is the sum of energy in the preamble,
and thus it is signiﬁcantly large, i.e., after compensating for the
frequency offset, the magnitude of the correlation spikes when the
preamble aligns with the beginning of Bob’s packet, as shown in
Fig. 5. Imposing a threshold enables us to detect whether the AP
received a collision signal and where exactly the second packet starts.
∆
Pa
Pb
Moving correlation
n
o
i
t
l
a
e
r
r
o
C
 50
 45
 40
 35
 30
 25
 20
 15
 10
 5
 0
 0
 1000
 2000
 3000
 4000
 5000
 6000
Position in Received Signal
Figure 5: Detecting Collisions by Correlation with the Known Pream-
ble. The correlation spikes when the correlated preamble sequence
aligns with the preamble in Bob’s packet, allowing the AP to detect the
occurrence of a collision and where it starts.
1
3
Pa
∆1
2’
4’
Pb
1’
3’
Pa
∆2
2
4
Pb
Figure 6: ZigZag decodes then re-encodes a chunk. Before subtracting
a decoded chunk, like chunk 1, ZigZag needs to re-encode the bits to
create an image of chunk 1’, as received in the second collision.
5.2 Did the AP Receive Two Matching Collisions?
Now that it is clear that the received signal is the result of collision,
the AP searches for a matching collision, i.e., a collision of the
same two packets. The AP stores recent unmatched collisions (i.e.,
stores the received complex samples). It is sufﬁcient to store the
few most recent collisions because, in 802.11, colliding sources
try to retransmit a failed transmission as soon as the medium is
available [34].
1, P′
We use the same correlation trick to match the current collision
against prior collisions. Assume the AP is trying to match two
collisions (P1, P2), and (P′
2). Without loss of generalization, let
us focus on checking whether P2 is the same as P′
2. The AP already
knows the offset in each collision, i.e., ∆ and ∆′. The AP aligns
the two collisions at the positions where P2 and P′
2 start. If the two
packets are the same, the samples aligned in such a way are highly
dependent (they are the same except for noise and the retransmission
ﬂag in the 802.11 header), and thus the correlation spikes. If P2 and
P′
2 are different, their data is not correlated and the correlation does
not spike at that alignment.
them from the other collision. For example, in Fig. 6, the AP decodes
chunk 1 from the ﬁrst collision, re-encodes the symbols in chunk 1
to create an image of chunk 1’, which it subtracts from the second
collision to obtain chunk 2. The AP iterates on the rest of the chunks
as it did on chunk 1, until it is done decoding all chunks in the
colliding packets.
(a) The Decoder. ZigZag can use any standard decoder as a black
box. Speciﬁcally, the decoder operates on a chunk after it has been rid
from interference, and hence can use standard techniques. This char-
acteristic allows ZigZag to directly apply to any modulation scheme
as it can use any standard decoder for that modulation as a black
box. Further, the two colliding packets may use different modulation
(different bit rates) without requiring any special treatment.
(b) Re-Encoding a Chunk. Now that the AP knows the symbols
that Alice sent in chunk 1, it uses this knowledge to create an estimate
of how these symbols would look after traversing Alice’s channel
to the AP, i.e., to create an image of chunk 1’, which it can subtract
from the second collision.
In §5.4 we explain how the AP computes channel parameters, but
for now, let us assume that the AP knows Alice’s channel, i.e., HA,
δ fA, and µA. Denote the symbols in chunk 1 by xA[n] . . . xA[n + K].
A symbol that Alice sends, xA[n], is transformed by the channel to
yA[n] where:
yA[n] = HAxA[n]e j2πδ fAT .
The AP would have received yA[n] had it sampled the signal ex-
actly at the same locations as Alice. Because of sampling offset,
the AP samples the received signal µA seconds away from Alice’s
samples. Thus, given the samples yA[n] . . . yA[n + K], the AP has to
interpolate to ﬁnd the samples at yA[n + µA] . . . yA[n + K + µA].
To do so, we leverage the fact that we have a band-limited signal
sampled according to the Nyquist criterion. Nyquist says that un-
der these conditions, one can interpolate the signal at any discrete
position, e.g., n + µA, with complete accuracy, using the following
equation [24]:
yA[n + µA] =
yA[i]sinc(π(n + µA − i)),
∞
∑
i=−∞
where sinc is the sinc function. In practice, the above equation is
approximated by taking the summation over few symbols (about 8
symbols) in the neighborhood of n.
Now that the AP has an image of chunk 1’ as received, it subtracts
it from the second collision to obtain chunk 2, and proceeds to repeat
the same process on this latter chunk.
5.3 How Does the AP Decode Matching Collisions?
5.4 Estimating and Tracking System Parameters
Say that the AP found a pair of matching collisions like those in
Fig. 6. Note that Fig. 6 is the same as Fig. 2 in the introduction
except that we distinguish between two images of the same chunk
that occur in different collisions, e.g., chunk 1 and chunk 1’. By now
the AP knows the offsets ∆1 and ∆2, and hence it can identify all
interference-free symbols and decode them using a standard decoder.
Next, the AP performs ZigZag decoding, which requires iden-
tifying a bootstrapping chunk, i.e., a sequence of symbols marred
by interference in one collision and interference-free in the other.
Say that the ﬁrst collision has the larger offset, i.e., ∆1 > ∆2, the
bootstrapping chunk then is located in the ﬁrst collision starting at
position ∆2 and has a length of ∆1 − ∆2 samples. This is chunk 1 in
Fig. 6.
The rest of the decoding works iteratively. In each iteration, the
AP decodes a chunk, re-encodes the decoded symbols and subtract
The receiver estimates the system’s parameters using the preamble in
Alice’s and Bob’s packets. Without loss of generality, we focus on
Bob, i.e., we focus on the sender that starts second. This is the harder
case since the preamble in Bob’s packet, typically used for channel
estimation, is immersed in noise. We need to learn HB, µB, and δ fB.
(a) Channel. Again we play our correlation trick, i.e., we correlate
the received samples with the known preamble. Recall that the
correlation at the peak is:
Γ′(∆) = HB
|s[k]|2.
L
∑
k=1
The AP knows the magnitude of the transmitted preamble i.e., it
knows |s[k]|2. Hence, once it ﬁnds the maximum value of the correla-
tion over the collision, it substitutes in the above equation to compute
HB.
yB
y
yA
+1
- 60o
yB
-1
Figure 7: Errors Die Exponentially Fast. The error causes the AP
to sum yA instead of subtracting it. Hence, the error propagates from
yA to the estimate ˆyB, i.e., from one chunk to the next, only when the
angle between the two vectors is smaller than 60o, which occurs with
probability 1
3 .
(b) Frequency Offset. The frequency offset does not change sig-
niﬁcantly. Since decoders already estimate the frequency offset, an
initial coarse estimate can be computed using any prior interference
free packet from the client (e.g., the association packet).
This coarse estimate, however, is not sufﬁcient since any residual
errors in estimating δ f translate into linear displacement in the phase
that accumulates over the duration of a packet. Any typical decoder
tracks the signal phase and corrects for the residual errors in the
frequency offset. Since ZigZag uses a typical decoder as a black box,
it need not worry about tracking the phase while decoding. However,
as it reconstructs an image of a received chunk, ZigZag tracks the
phase. Consider as an example, reconstructing an image of chunk
1’. First we reconstruct the image using the current estimate of the
frequency offset, as explained in §5.3(b). Next we subtract that image
from the second collisions to get chunk 2. Now, we reconstruct chunk
2 and subtracted from the second collision, creating an estimate of
chunk 1’, which we term chunk 1”. We compare the phases in chunk
1’ and chunk 1”. The difference in the phase is caused by the residual
error in our estimate of the frequency offset. We update our estimate
of the frequency offset as follows:
δ f = δ f + αδ φ /δ t,
where α is just a small multiplier, δ φ is the phase error which accu-
mulated over a period δ t.
(c) Sampling Offset. The procedure used to update and track the
sampling offset is fairly similar to that used to update and track the
frequency offset. Namely, the black-box decoder tracks the sampling
offset when decoding a chunk. When reconstructing the image of a
chunk, like chunk 1’, we use the differences between chunk 1’ and 1”
to estimate the residual error in the sampling offset and track it.3
(d) Inter-Symbol Interference. When we reconstruct a chunk to
subtract it from the received signal, we need to create as close an
image of the received version of that chunk as possible. This includes
any distortion that the chunk experienced because of multipath effects,
hardware distortion, ﬁlters, etc. To do so, we need to invert the linear
ﬁlter (i.e., the equalizer) that a typical decoder uses to remove these
effects. The ﬁlter takes as input the decoded symbols before removing
ISI, and produces their ISI-free version, as follows:
x[i] =
L
∑
l=−L
hl xISI[i + l],
where the hl ’s are known as the ﬁlter taps. For our purpose, we
can take the ﬁlter from the decoder and invert it. We apply the inverse
ﬁlter to the symbols x[n] before using them in Eq. 5.3 to ensure that
our reconstructed image of a chunk incorporates these distortions.
n
o
i
t
u
b
i
r
t
s
D
y
t