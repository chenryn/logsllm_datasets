11/16
---
## Page 171
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
19595538
图3-3-17
state[i]=state[i-3]+state[i-31]
此外，在每次调用mtrand时，PHP都会检查是否已经插种。如果已经播种，就直接产生随机数，否
则自动播种。自动插种时，使用的种子范围为0~232，而且在每个PHP处理的进程中，只要进行了自
动播种，就会一直使用这个种子，直到该进程被回收。所以，我们可以在保持连接keep-alive时，根
据前几次随机数生成的结果，使用php_mt_seed工具对种子进行爆破，从而达到预测随机数的目的。
虽然我们只对PHP的伪随机数进行了说明，但是实际上，其他语言中也存在伪随机数的强竭的问题，
如Python中，见图3-3-18。
在应对此类题目的时候可以查阅相关的官方文档中相关函数的介绍，如果生成的伪随机数可以被预
测，则会有相关该伪随机函数不适合加密之类的提示，见图3-3-19和图3-3-20
1
图3-3-18
artion
图3-3-19
图3-3-20
3.3.1.8密码学小结
上文介绍的几种密码学的攻击方式和例子只是少部分Web与Crypto结合的产物，但是密码学重点不
止这些，如分组加密模式中依然有可以被重放攻击的CFB模式，可以被位反转攻击影响的CTR模式，
甚至其他流加密算法。虽然没有与Web相结合的例子，但是依然可以成为以后出题人的关注点，出现
在题目中。所以，Web参赛者也要懂得一些密码学的知识，识别一个加密算法是否易受到攻击，并将
题目中获取的数据和需要构造的字符串即时交给队内的密码学大佬，最终达到题目中的要求。
3.3.2Web中的逆向工程
3.3.2.1Python
在CTF比赛时，一些目标可能存在任意文件下载漏洞但对可以下载的文件类型进行了限制，如Python
中禁止下载.py文件。Python在运行时为了加速程序运行，因此会将.py文件编译为-pyc或pyo文件，
通过恢复这些文件中的字节码信息，同样可以获得原程序的代码。
https:/weread.qq.com/web/reader/77d32500721a485577d8eeekb6d32b90216b6d767d2f0dc
12/16
---
## Page 172
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
比如，在LCTF2018的Lplayground2中，关键代码见图3-3-21，文件下载的接口限制了不能直接下
载.py文件，但可以下载相应的.pyc文件进行反编译，获得源代码，见图3-3-22
def parse_f1le(path):
fllename = os.path. joine(sandbox_fir, path)
f *./° In filenaee or ".." In filename
[n uT 1uluos psteT。 unau
If not filenane,startsvith(base_die) :
IT+uT uPTeT.na
If os.path.Isdie(f1lename) :
fi1e_1ist - os.listdir(fllename)
returm *, *.join(ffle_1ist) 
elif os.path.isfi1e(fllename) :
content = f-read()
returm content
else:
retun *can't find f11e"
图3-3-21
服
图3-3-22
3.3.2.2 PHP
CTFWeb比赛中很可能碰到对代码进行加密的情况。为了理解PHP加密，我们需知道PHP在运行时不
会被直接执行，而是经过一次编译，执行编译后的Opcode，其中有三个重要的函数，分别是zend
file、zend_compile_string、zend_execute。常见的加密方法有对问文件进行加密、对代码
ompille
进行加密、实现虚拟机等方式，由于加密方式的不同解密时也会根据不同算法，调用解密插件修改后
的编译或执行函数。
传统的PHP加密方案只是在PHP代码的基础上，通过代码混淆的方式破坏其可读性，通过壳对最终执
行代码进行解密，再通过eval将解密的结果执行。对于这类题目，既然我们知道它最终通过eval将代
码进行解密，那么直接通过hookeval执行过程。在PHP的扩展中，在初始化时将zend_compile_file
替换为我们自行编写的函数，在每次执行的时候输出其参数，就能将解密的结果输出。
例如，phpjiami就采取了这种方法。在PWNHUB中，“傻fufu的工作日”一题就采用了这种加密方
式。题目源代码网址为https://github.com/CTFTraining/pwnhub_2017_open_weekday。题
目提供了由phpjiami处理后的备份文件，可以直接下载加密后的代码，见图3-3-23。
图3-3-23
网络上有很多编写好的hookeva插件源代码，如https://github.com/bizonix/evalhook，只需
https:/weread.qq.com/web/reader/77d32500721a485577d8eeekb6d32b90216b6d767d2f0dc
131e
---
## Page 173
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
编译并加载到PHP中，再运行我们的源码，就可以得到真正的源代码，见图3-3-24
除了使用这种方式进行代码混淆，使用插件对代码进行加密也是一种方式。这种加密方式通过对PHP
底层的zend_compile_进行hook，在hook后的函数中进行解密操作，再将解密后的源代码传给PHP
的相关执行函数。对于这种类型的加密，我们仍然可以使用hookeval类似的方式进行解密。
比如，在SCTF 2018的Simple PHP Web中。 源代码地址如下: https://github.com/CTFTraining/
2018_babysyc.git。通过文件包含漏洞直接读取indexphp源代码发现是乱码，怀疑代码进行过
加密。通过对phpinfo.php的观察，我们发现服务器启动了encrypt_php插件，那么在指定插件目录
下下载该插件。分析该加密插件，该加密对zend_compile_file进行了hook，见图3-3-25.
再观察encrypt_compile_file中的逻辑。在函数执行的最后，加密程序直接将解密后的结果传回了最
开始的zend_compile_file，见图3-3-26，此时只需调整hook插件与解密插件的位置，让hook函数
在解密函数后被调用，就可以输出解密后的代码，见图3-3-27.
图3-3-24
zm_startup_encrypt_php()
compiller_globals[135]|=1u;
return eLL;
图3-3-25
（）
]+13，+4}1+83
r ), ss
图3-3-26
https:/weread.qq.com/web/reader77d32500721a485577d8eeekb6d32b90216b6d767d2f0dc
---
## Page 174
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
8lu2') {
f (B$mgso[°ade] * 1) {
图3-3-27
另一种加密方式是对已经输译后的Opcode进行处理，此时监控zend_compile_*并不会有任何效果，
因为加密根本没有使用PHP进行编译，而是直接解密得到Opcode并执行。由于编译的过程没有起作
用，因此只能hook函数zend_execute，甚至其中真正执行代码的zend_execute_ex，从中得到
后再进行分析。PHP的vld扩展提供了对Opcode进行分析的工具，需要修改vld的源代码，将
Opcode
OpCode的代码加到vld_execute_ex中，然后人工分析opcode，就能逐步分析出加密的结果。
dump
例如，RCTF2019中的sourceguardian一题，我们看到sg_load函数和题目名字的提示可知，代码使
用sourceguardian加密，见图3-3-28，使用修改后的vld，可以将Opcode导出。
图3-3-28
图3-3-28(续)
对Opcode进行分析后，即可逐步恢复源代码，见图3-3-29.
1
图3-3-29
https:/weread.qq.com/web/reader/77d32500721a485577d8eeekb6d32b90216b6d767d2f0dc
---
## Page 175
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
还有一种最复杂的加密方式，即重新实现一个VM，将PHP的源代码编译生成的opcode加密，混滑为
仅能被自定义的VM理解的样式，交给自定义的VM进行解析。其中典型的例子如VMP，由于需要完
成对虚拟机、代码的共同分析，工作量巨大，故很难实现解密。
3.3.2.3 JavaScript
不管怎样，JavaScript加密最终会将解密后的结果交给JavaScript引引擎来执行，由此我们只需像解密。
一样，为其中的关键函数加入hook，就可以完成解密了。
PHP
如在大多数情况下。加密的代码在进行解密后，如果想再次被执行，只能通过调用eval等函数，那么
我们可以将eval函数修改为打印的函数，不让其执行，而是输出，就可以得到其中的关键代码。
 4(: 
一些代码可能对开发者工具进行检测，对于这种反调试方式，我们可以通过BurpSuite的代理功能，
删除其中反调试部分的代码。JavaScript代码加密实现的难度太大，所以很多时候只是采用混淆的方
式进行处理。而混滑仅仅对变量名和代码结构进行了调整，可以通过代码美化工具，将其结构进行优
化，甚至通过PartialEvaluation技术解决。现在网络上有很多开源的工具能对代码进行优化，如
的Closure Compiler、FaceBook的Prepack，JStillery。虽然大多数应用是对代码进行优化，但
是在优化的过程中会在编译期重构AST、计算函数、初始化对象等，最终呈现可读的代码。
下一章
https://weread.qq.com/web/reader/77d32500721a485577d8eeekb6d32b90216b6d767d2f0dc
16/1
---
## Page 176
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
3.4逻辑漏洞
逻辑漏洞是指在程序开发过程中，由于对程序处理逻辑未进行严密的考虑，导致在到达分支逻辑功能
时，不能进行正常的处理或导致某些错误，进而产生危害。
一般而言，功能越复杂的应用，权限认证和业务处理流程越复杂，开发人员要考虑的内容会大幅增
加。因此对于功能越复杂的应用，开发人员出现疏忽的可能性就越大，当这些出现疏忽的点会造成业
务功能的异常执行时，逻辑漏洞使形成了。由于逻辑漏洞实际依托于正常的业务功能存在，因此业务
功能的不同直接导致每个逻辑漏洞的利用都不相同，也就无法像SQL注入漏洞总结出一个通用的利用
流程或绕过方法，而这对于测试人员在业务逻辑梳理方面使有着更高的要求。
与前面的SQL注入、文件上传等传统漏洞不同，如果仅从代码层面分析，逻辑漏洞通常是难以发现
的。因此，传统的基于“输入异常数据一得到异常响应”的漏洞扫描器对于逻辑漏洞的发现通常也是
无力的。目前，对于逻辑漏洞的挖掘方法仍以手工测试为主，并且由于与业务功能密切相关，也就与
测试人员的经验密切相关。
3.4.1常见的逻辑漏洞
由于逻辑漏洞实际依托于正常的业务功能存在，无法总结出一个对所有逻辑漏洞行之有效的利用方
法，但是对于这些逻辑漏洞而言，导致其发生的原因存在一定共性，凭此可以将这些逻辑漏洞进行
个粗略的分类，归结为两种：权限间题、数锯问题
1.与权限相关的逻辑漏洞
我们先了解什么是权限相关的逻辑漏洞。在正常的业务场景中，绝大多数操作需要对应的权限才能进
行。而常见的用户权限如瞪名访客、普通登录用户、会员用户、管理员等，都拥有其各自所特有的权
限操作。匿名访客权限可执行的操作如浏览信息、搜索特定内容等，而登录权限则可以确认订单支
付，会员权限可以提前预约等，这些操作与用户所拥有的权限息息相关。
当权限的分配。确认、使用这些过程出现了问题，导致某些用户可执行他本身权限所不支持的特权操
作，此时便可标为发生了与权限相关的逻辑漏洞
权限逻辑漏洞中常见的分类为未授权访问、越权访问、用户验证缺陷。
未授权访间是指用户在未经过授权过程时，能直接获取原本需要经过授权才能获取的文本内容或页面
等信息。其实质是由于在进行部分功能开发时，未添加用户身份校验步骤，导致在未授权用户访问相
应功能时，没有进行有效的身份校验。从而浏览了他原有权限不支持查看的内容，也就是导致了未授
权访问（见图3-4-1）。
越权访间主要为横向越权和纵向越权。横向越权漏洞指的是权限同级的用户之间发生的越权行为，在
这个过程中，权限始终限制在同一个级别中，因此被称为横向。与之相对，纵向越权漏洞则指在权限
不同级的用户之间发生了越权行为，并且通常是用来描述低级权限用户向高级权限用户的越权行为。
管理员
https:/weread.qq.com/web/reader/77d32500721a485577d8eeek37632od021737693cfc7149
---
## Page 177
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
正第澜作
越权行为
查看文章草稿内容
匿名用户
查看商家认证信息
管理员专属操作
图3-4-1
假设存在两个用户A和B，各自拥有3种行为的权限，见图3-4-2。
管理员
会员身份继予
商户销售权限控制
首页推荐编辑
管理员
普通用户
查看历史订单
修改头像
用户B
用户A
修改个人信息
图3-4-2
普通用户→普通用户”（见图3-4-3），本质的权限等级未变化
普通用户
普通用户
用户8专属报作
查看历史订单
修改头像
修改个人信息
图3-4-3
么权限变更过程为“普通用户→高级权限用户”，本质的权限等级发生了变化。
用户验证缺陷通常会涉及多个部分，包括登录体系安全、密码找回体系、用户身份认证体系等。通常
码一致校验，验证码防护，Cookie（Session）身份校验，密码找回。例如，Cookie（Session）身
份校验，当用户通过一个配对的用户名与密码登录至业务系统后，会被分配一个Cookie（Session）
https:/weread.qq.com/web/reader/77d32500721a485577d8eeek37632od021737693cfc7149