by the input validation. Additionally, in many cases the input
language cannot be modeled by simpler formalisms such as
CFGs.
C2: Independence from corpora. Current fuzzers often need
an initial corpus of inputs, i.e., a set of seed Ô¨Åles. Even with
well-known software, where a corpus is usually available,
acquiring a corpus which targets the new and obscure parts
of the application is hard. Acquiring a corpus for internal
it
whether new paths can still be explored, the scheduler will
either trigger mutation of existing inputs 6 or derivation of
a new input
7 . For inputs in the queue, mutations based
on the grammar are applied. The mutation methods include
techniques like replacing subtrees with newly generated ones
or combining trees that found different interesting features of
the target application. After mutation, the input is added to
the queue 8 and used in subsequent analysis runs 9 . This
architecture allows us to combine the strength of both grammar
fuzzing and feedback fuzzing to recombine existing interesting
inputs into more semantically interesting inputs. In the follow-
ing, we explain the process of generation, minimization, and
mutation process in more detail.
A. Generation
The generation algorithm should produce inputs which
use distinct aspects of the grammar in order to maximize
coverage (Challenge C3). Our fuzzer internally only uses the
tree representation instead of the unparsed string representation
of the word. This allows us to operate on the tree and to deÔ¨Åne
custom unparsing routines. We use the grammar rules to derive
random trees from the set derivation trees. If there are multiple
rules for one non-terminal, there are multiple ways to select
a rule for further derivation. In this paper we evaluate two
different approaches: naive generation and uniform generation.
The naive generation approach is to randomly pick one of
the applicable rules. As shown below in Example IV.1, this
can lead to a lot of similar inputs being generated. For this
reason, we augmented this generation approach with a Ô¨Ålter
that checks whether the generated input was already generated
in the recent past.
Example IV.1 (Naive Generation). When generating a tree
from grammar G1 from Example II.1, there are two rules
for the STMT non-terminal. If rule 3 is picked, the generation
immediately terminates. If rule 4 is chosen, the generation
continues, and multiple different trees can be generated. If both
rules are picked with 50% probability, half of the generated
inputs are return 1.
Our other approach, uniform generation, is able to uni-
formly draw trees from the set of all possible trees as proposed
by McKenzie [39]. This approach avoids the strong bias
introduced by the structure of the grammar. This algorithm
takes a CFG and an integer n ‚â• 0 and returns strings of
length n, derived uniformly from the given input grammar.
This algorithm picks the rules based on the number of distinct
subtrees that
they can generate: for each non-terminal n,
for each possible length l, for each production rule r of n
the amount of possible subtrees p(n, l, r) is calculated. As
an example, a rule that can generate four different subtrees
is picked twice as often as a rule which can generate two
subtrees.
B. Minimization
After an interesting input was found, NAUTILUS tries to
produce a smaller input that triggers the same new coverage.
Minimized inputs have the advantage of a shorter execution
time and a smaller set of potential mutations during further
processing. We use two different approaches to minimize
inputs that found new paths:
Fig. 1: High-level overview of NAUTILUS.
techniques that
or unreleased software is even harder. Hence, presence of a
(proper) corpus should not be required to fuzz the application.
However, many software projects have a speciÔ¨Åcation of al-
lowed inputs (or a grammar) that can be leveraged instead.
In addition,
try to combine seed corpora
with input speciÔ¨Åcations typically need to restrict their input
languages to enable parsing, hence, reducing the usefulness of
seed corpora when using input speciÔ¨Åcations.
C3: High coverage of target functionality. Achieving a high
coverage in the target application is desirable to Ô¨Ånd a higher
number of bugs. This mainly relates to two aspects: (1) passing
input processing, and (2) steering analysis to explore new
paths.
C4: Good performance. Fast testing cycles, which imply a
high number of tested inputs per fuzzing window, is one of the
key aspects to increase effectiveness of fuzzers. To ensure high
execution rates, the inputs need to be small and the generation
method needs to be fast.
We designed NAUTILUS with these challenges in mind:
grammar-only input derivation tackles C1 and C2, while
we use feedback-driven input generation to address C3, and
steering input derivation length as well as minimization of
interesting inputs to take on C4. In the following section, we
explain the design of these high-level concepts.
IV. DESIGN OF NAUTILUS
A high-level overview of the approach is shown in Figure 1.
The Ô¨Årst step required to use NAUTILUS is to compile the
source code of the target application using our instrumen-
to give feedback on coverage information while
tation 1
running. Then, the fuzzer process itself is started, parses the
grammar the user provided 2 , then generates a small amount
(1000) of random initial inputs from scratch 3 and passes
them to the scheduler. Then, NAUTILUS tests whether that
newly generated input triggers any new coverage by executing
the instrumented binary 4 . If it did, NAUTILUS minimizes
it using the grammar, and adds it to the queue 5 . Based on
4
InstrumentedBinaryParserInput GenerationMinimizationMutationSchedulerQueuetriggertriggerGrammarùëÜ‚Üíùë•ùê¥|ùë¶ùëÜùê¥‚Üíùë¶ùê¥|ùëßùêµùêµ‚ÜíùëßFeedbackNAUTILUS23547689InstrumentationSource1PROG
STMT
PROG
STMT
VAR
=
EXPR
return 1
a
NUM
1
Example IV.2 (Subtree Minimization). The Subtree Minimization is executed
on a = 1, replacing the subtree of STMT with a smaller one.
PROG
STMT
PROG
STMT
VAR
=
EXPR
VAR
=
EXPR
a
EXPR
+ EXPR
a
NUM
NUM
1
2
NUM
1
Example IV.3. Recursive Minimization is executed on a = 1 + 2,
which contains a recursive EXPR: both the whole right-hand side, as
well as the individual numbers, are derivable from EXPR. Using either
of the two numbers instead of the addition yields a valid minimized
tree.
Subtree Minimization aims to make subtrees as short as pos-
sible while still triggering new path transitions. For each
nonterminal, we generate the smallest possible subtree.
Then, we sequentially replace each node‚Äôs subtree with
the smallest possible subtree at this position, and check
if the new transitions are still triggered by the changed
input. If the transitions are still taken, the changed input
replaces the original one, otherwise the changed input is
discarded (see Example IV.2).
Recursive Minimization This strategy is applied after Sub-
tree Minimization. Its goal is to reduce the amount of
recursions by identifying recursions and replacing them
one at a time. Example IV.3 displays how a nested
expression is minimized.
C. Mutation
After an input was minimized, NAUTILUS uses multiple
mutation methods to generate new tests. Unless speciÔ¨Åed
otherwise, whenever we pick some element randomly, we pick
uniformly amongst all options.
Random Mutation picks a random node of a tree and re-
places it with a randomly-generated new subtree rooted
in the same nonterminal. The size is chosen randomly
and the maximum size of the subtree is a conÔ¨Åguration
parameter.
Rules Mutation sequentially replaces each node of the input
tree with one subtree generated by all other possible rules.
PROG
STMT
PROG
STMT
VAR
=
EXPR
VAR
=
EXPR
a
EXPR
+ EXPR
a
EXPR
+
EXPR
NUM
NUM
NUM
EXPR
+
EXPR
1
2
1
NUM
EXPR
+ EXPR
1
NUM
NUM
1
2
Example IV.4. This tree contains a recursion (an EXPR node has
EXPR child nodes). Random Recursive Mutation randomly repeats this
subtree recursion (two times in the example) and inserts the result in
the already existing recursion. This turns the simple a = 1 + 2 into
the more complex a = 1 + (1 + (1 + (1 + 2))).
This mutation resembles the deterministic phase used by
AFL.
Random Recursive Mutation picks a random recursion of a
tree and repeats that recursion 2n times (1 ‚â§ n ‚â§ 15).
This creates trees with higher degree of nesting. An
example application of this mutation can be seen in
Example IV.4.
Splicing Mutation combines inputs that found different paths
by taking a subtree from one interesting input and placing
it in another input: it replaces one of the subtrees with a
‚ÄúÔ¨Åtting‚Äù subtree from another tree in the queue. To do so,
it picks a random internal node, which becomes the root
of the subtree to be replaced. Then it picks from a tree
in the queue a random subtree that is rooted in the same
nonterminal to replace the old subtree.
AFL Mutation performs mutations that are also used by AFL
such as bit Ô¨Çips or interesting integers. The AFL Mutation
operates on strings, so subtrees are converted into text
form before this mutation is applied. This mutation can
produce invalid trees which are sometimes interesting to
discover parser bugs. This mutation consists of several
different sub-mutations:
Bit Flips Ô¨Çip single or multiple bits at once;
Arithmetic Mutations add or subtract interesting values
to numeric values in the string;
Interesting Values replaces parts of the string with in-
teresting values.
Afterwards, the mutated terminal string is stored as a new
Custom Rule with the same originating non-terminal and
added to the tree, replacing the original subtree. Custom
Rules are not added to the grammar, they are saved locally
with the tree. This process is depicted in Example IV.5.
D. Unparsing
After NAUTILUS obtained a candidate derivation tree,
NAUTILUS needs to generate an actual input from it. This
step of turning the derivation tree into a binary Ô¨Åle is typically
5
PROG
STMT
PROG
STMT
VAR
=
EXPR
VAR
=
EXPR
a
EXPR
+ EXPR
a
1xf
NUM
NUM
1
2
Example IV.5. In this example, AFL Mutation alters the terminal
string of the subtree of the topmost EXPR by Ô¨Çipping some bits from
1 + 2 to 1xf (not valid according to the grammar). Then, a custom
rule EXPR ‚Üí "1xf" is created which replaces the subtree, resulting
in the input a = 1xf;
called unparsing. For true CFGs, this process is straightfor-
ward. The unparsing function is recursively deÔ¨Åned to concate-
nate all unparsed subtrees. However, many real-world input
grammars are not context free, as mentioned earlier. Hence,
we extend rule deÔ¨Ånitions by an additional unparsing script
that can perform arbitrary computation on the results of all
unparsed subtrees. Scripting support is one of the big strengths
of our generative approach, as there is no need to parse inputs.
Therefore, we can freely venture beyond decidable grammars
without any disadvantages. Approaches such as SkyÔ¨Åre [49]
or IFuzzer [47] are restricted to grammars which support
parsing. Example IV.6 shows how this technique can produce
syntactically and semantically valid XML documents.
Example IV.6. Assume that
the grammar for XML con-
tains a rule that speciÔ¨Åes a simpliÔ¨Åed tag. Each tag has
an ID and a BODY. The corresponding rule is: T AG ‚Üí
BODY  In CFGs the opening and the closing ID
are independent. Therefore, we might produce inputs such as
"foo" by performing the concatenation on the chil-
dren: ["","foo",""]. By extending
CFGs with unparsing scripts, the rule turns into T AG ‚Üí
ID,BODY with the unparsing function lambda |id,body
| ""+body+"". Thus, we are able to
reuse the ID twice to produce a valid XML tag.
V.
IMPLEMENTATION
NAUTILUS is implemented in Rust and its overall archi-
tecture is similar to AFL. We use the mruby interpreter to
execute the scripts embeddable in our extended grammars.
Similar to AFL, NAUTILUS requires the target program to be
instrumented. It fuzzes the target in a number of phases. The
following sections describe those processes in more detail.
A. Target Application Instrumentation
NAUTILUS shares the concept of AFL‚Äôs source-code in-
strumentation: a 64 KB bitmap is shared with the application.
A custom compiler pass adds Instrumentations which updates
this bitmap based on information about basic blocks transitions
performed in the target application. Additionally, the compiler
pass adds some code that runs the application in a forkserver
to increase the rate at which inputs can be executed.
B. ANTLR Parser
NAUTILUS accepts grammar inputs as either JavaScript
Object Notation (JSON), the natural grammar representation
used by NAUTILUS, or grammars written for ANother Tool
for Language Recognition (ANTLR) [1], since more than 200
ANTLR grammars for a number of programming languages
are already publicly available [6]. In order to support ANTLR
grammars, we integrate an ANTLR Parser component that
converts the ANTLR grammar into the native NAUTILUS
format. The parser can convert most grammars automatically.
In some cases, ANTLR grammars do not specify whitespace,
since it is not relevant during parsing; however, whitespace is
relevant during input generation. Thus, one typically has to
add spaces in a few key rules in those grammars.
C. Preparation Phase
NAUTILUS precomputes some data based on the grammar
provided before the fuzzing begins. This data includes:
min(n) for each non-terminal n, the minimum number of
rules that need to be applied to generate a string which
uses n as the start non-terminal. This data is used by the
Rules Mutation (Section IV-C).
p(n, l, r) For each non-terminal n, for each possible length
l, for each production rule r of n, the number of possible