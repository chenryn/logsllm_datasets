26353
1835
GnuTLS 3.3.8
GnuTLS 3.3.12
mbed TLS 1.3.10
OpenSSL 1.0.1g +
OpenSSL 1.0.1j +
OpenSSL 1.0.1l +
OpenSSL 1.0.2 +
JSSE 1.8.0_25
JSSE 1.8.0_31
miTLS 0.1.3
NSS 3.17.4
RSA BSAFE for Java 6.1.1
RSA BSAFE for C 4.0.4
nqsb-TLS 0.4.0 +
+ Without heartbeat extension
Table 2: Results of the automated analysis of server implementations for the regular alphabet of inputs using our
modiﬁed W-method with depth 2
Alphabet Algorithm
regular
full
full
modiﬁed W-method
modiﬁed W-method
original W-method
Time (hh:mm)
0:09
0:27
4:09
#states Membership queries Equivalence queries
7
9
9
1347
4126
68578
456
1573
1573
Table 3: Analysis of the GnuTLS 3.3.12 server using different alphabets and equivalence algorithms
This bug can be exploited to effectively bypass the in-
tegrity check that relies on comparing the keyed hashes
of the messages in the handshake: when also resetting
this buffer on the client side (i.e. our test harness) at the
same time we were able to successfully complete the
handshake protocol, but then no integrity guarantee is
provided on the previous handshake messages that were
exchanged.
By learning the state machine of a GnuTLS client
we conﬁrmed that the same problem exists when using
GnuTLS as a client.
This problem was reported to the developers of
GnuTLS and is ﬁxed in version 3.3.9. By learning mod-
els of newer versions, we could conﬁrm the issue is no
longer present, as can be seen in Fig. 3.
To exploit this problem both sides would need to reset
the buffer at the same time. This might be hard to achieve
as at any time either one of the two parties is computing a
response, at which point it will not process any incoming
message. If an attacker would successfully succeed to
exploit this issue no integrity would be provided on any
message sent before, meaning a fallback attack would be
possible, for example to an older TLS version or weaker
cipher suite.
4.2 mbed TLS
For mbed TLS, previously known as PolarSSL, we tested
version 1.3.10. We saw several paths leading to a suc-
cessful exchange of data. Instead of sending a regular
ApplicationData message, it is possible to ﬁrst send one
empty ApplicationData message after which it is still
possible to send the regular ApplicationData message.
Sending two empty ApplicationData messages directly
USENIX Association  
24th USENIX Security Symposium  199
7
after each other will close the connection. However, if in
between these message an unexpected handshake mes-
sage is sent, the connection will not be closed and only
a warning is returned. After this it is also still possible
to send a regular ApplicationData message. While this is
strange behaviour, it does not seem to be exploitable.
4.3 Java Secure Socket Extension
For Java Secure Socket Extension we analysed Java ver-
sion 1.8.0_25. The model contains several paths leading
to a successful exchange of application data and contains
more states than expected (see Fig. 4). This is the result
of a security issue which we will discuss below.
As long as no Finished message has been sent it is ap-
parently possible to keep renegotiating. After sending a
ClientKeyExchange, other ClientHello messages are ac-
cepted as long as they are eventually followed by another
ClientKeyExchange message. If no ClientKeyExchange
message was sent since the last ChangeCipherSpec, a
ChangeCipherSpec message will result in an error (state
7). Otherwise it either leads to an error state if sent di-
rectly after a ClientHello (state 8) or a successful change
of keys after a ClientKeyExchange.
Accepting plaintext data More interesting is that the
model contains two paths leading to the exchange of ap-
plication data. One of these is a regular TLS protocol
run, but in the second path the ChangeCipherSpec mes-
sage from the client is omitted. Despite the server not
receiving a ChangeCipherSpec message it still responds
with a ChangeCipherSpec message to a plaintext Fin-
ished message by the client. As a result the server will
send its data encrypted, but it expects data from the client
to be unencrypted. A similar problem occurs when trying
to negotiate new keys. By skipping the ChangeCipher-
Spec message and just sending the Finished message the
server will start to use the new keys, whereas the client
needs to continue to use its old keys.
This bug invalidates any assumption of integrity or
conﬁdentiality of data sent to the server, as it can be
tricked into accepting plaintext data. To exploit this issue
it is, for example, possible to include this behaviour in a
rogue library. As the attack is transparent to applications
using the connection, both the client and server applica-
tion would think they talk on a secure connection, where
in reality anyone on the line could read the client’s data
and tamper with it. Fig. 5 shows a protocol run where
this bug is triggered. The bug was report to Oracle and is
identiﬁed by CVE-2014-6593. A ﬁx was released in their
Critical Security Update in January 2015. By analysing
JSSE version 1.8.0_31 we are able to conﬁrm the issue
was indeed ﬁxed.
Client
Server
ClientHello
ServerHello;
Certiﬁcate;
ServerHelloDone
ClientKeyExchange;
Finished
ChangeCipherSpec;
{Finished}
ApplicationData
{ApplicationData}
Figure 5: A protocol run triggering a bug in the JSSE,
causing the server to accept plaintext application data.
This issue was identiﬁed in parallel by Beurdouche et
al. [6], who also reported the same and a related issue for
the client-side. By learning the client, we could conﬁrm
that the issue was also present there. Moreover, after re-
ceiving the ServerHello message, the client would accept
the Finish message and start exchanging application data
at any point during the handshake protocol. This makes
it possible to completely circumvent both server authen-
tication and the conﬁdentiality and integrity of the data
being exchanged.
4.4 miTLS
MiTLS is a formally veriﬁed TLS implementation writ-
ten in F# [8]. For miTLS 0.1.3, initially our test har-
ness had problems to successfully complete the hand-
shake protocol and the responses seemed to be non-
deterministic because sometimes a response was delayed
and appeared to be received in return to the next message.
To solve this, the timeout had to be increased consider-
ably when waiting for incoming messages to not miss
any message. This means that compared to the other im-
plementations, miTLS was relatively slow in our setup.
Additionally, miTLS requires the Secure Renegotiation
extension to be enabled in the ClientHello message. The
learned model looks very clean with only one path lead-
ing to an exchange of application data and does not con-
tain more states than expected.
4.5 RSA BSAFE for C
The RSA BSAFE for C 4.0.4 library resulted in a model
containing two paths leading to the exchange application
data. The only difference between the paths is that an
200  24th USENIX Security Symposium 
USENIX Association
8
Figure 4: Learned state machine model for JSSE 1.8.0_25
empty ApplicationData is sent in the second path. How-
ever, the alerts that are sent are not very consistent as they
differ depending on the state and message. For exam-
ple, sending a ChangeCipherSpec message after an ini-
tial ClientHello results in a fatal alert with reason ‘Ille-
gal parameter’, whereas application data results in a fatal
alert with ‘Unexpected message’ as reason. More cu-
rious however is a fatal alert ‘Bad record MAC’ that is
returned to certain messages after the server received the
ChangeCipherSpec in a regular handshake. As this alert
is only returned in response to certain messages, while
other messages are answered with an ‘Unexpected mes-
sage’ alert, the server is apparently able to successfully
decrypt and check the MAC on messages. Still, an error
is returned that it is not able to do this. This seems to be
a non-compliant usage of alert messages.
At the end of the protocol the implementation does
not close the connection. This means we cannot take any
advantage from a closed connection in our modiﬁed W-
method and the analysis therefore takes much longer than
for the other implementations.
4.6 RSA BSAFE for Java
The model for RSA BSAFE for Java 6.1.1 library looks
very clean, as can be seen in Fig. 6. The model again
contains only one path leading to an exchange of appli-
cation data and no more states than necessary. In gen-
eral all received alerts are ‘Unexpected message’. The
only exception is when a ClientHello is sent after a suc-
cessful handshake, in which case a ‘Handshake failure’
is given. This makes sense as the ClientHello message is
not correctly formatted for secure renegotiation, which is
required in this case. This model is the simplest that we
learned during our research.
USENIX Association  
24th USENIX Security Symposium  201
9
Figure 6: Learned state machine model for RSA BSAFE for Java 6.1.1
4.7 Network Security Services
The model for NSS that was learned for version 3.17.4
looks pretty clean, although there is one more state than
one would expect. There is only one path leading to a
successful exchange of application data. In general all
messages received in states where they are not expected
are responded to with a fatal alert (‘Unexpected mes-
sage’). Exceptions to this are the Finished and Heart-
beat messages:
these are ignored and the connection
is closed without any alert. Other exceptions are non-
handshake messages sent before the ﬁrst ClientHello:
then the server goes into a state where the connection
stays open but nothing happens anymore. Although the
TLS speciﬁcation does not explicitly specify what to
do in this case, one would expect the connection to be
closed, especially since it’s not possible to recover from
this. Because the connection is not actually closed in this
case the analysis takes longer, as we have less advantage
of our modiﬁcation of the W-method to decide equiva-
lence.
4.8 OpenSSL
Fig. 7 shows the model inferred for OpenSSL 1.01j. In
the ﬁrst run of the analysis it turned out that Heartbeat-
Request message sent during the handshake phase were
‘saved up’ and only responded to after the handshake
phase was ﬁnished. As this results in inﬁnite models we
had to remove the heartbeat messages from the input al-
phabet. This model obtained contains quite a few more
states than expected, but does only contain one path to
successfully exchange application data.
The model shows that it is possible to start by sending
two ClientHello messages, but not more. After the sec-
ond ClientHello message there is no path to a successful
exchange of application data in the model. This is due
to the fact that OpenSSL resets the buffer containing the
handshake messages every time when sending a Client-
Hello, whereas our test harness does this only on initial-
isation of the connection. Therefore, the hash computed
by our test harness at the end of the handshake is not ac-
cepted and the Finished message in state 9 is responded
to with an alert. Which messages are included in the hash
differs per implementation: for JSSE all handshake mes-
sages since the beginning of the connection are included.
In state 8 we see some unexpected be-
Re-using keys
haviour. After successfully completing a handshake, it is
possible to send an additional ChangeCipherSpec mes-
sage after which all messages are responded to with a
‘Bad record MAC’ alert. This usually is an indication of
wrong keys being used. Closer inspection revealed that
at this point OpenSSL changes the keys that the client
uses to encrypt and MAC messages to the server keys.
This means that in both directions the same keys are used
from this point.
We observed the following behaviour after the addi-
tional ChangeCipherSpec message. First, OpenSSL ex-
pects a ClientHello message (instead of a Finished mes-
sage as one would expect). This ClientHello is responded
to with the ServerHello, ChangeCipherSpec and Fin-
ished messages. OpenSSL does change the server keys
then, but does not use the new randoms from the Client-
Hello and ServerHello to compute new keys. Instead the
old keys are used and the cipher is thus basically reset
(i.e. the original IVs are set and the MAC counter reset
to 0). After receiving the ClientHello message, the server
does expect the Finished message, which contains the
keyed hash over the messages since the second Client-
Hello and does make use of the new client and server
randoms. After this, application data can be send over
the connection, where the same keys are used in both di-
rections. The issue was reported to the OpenSSL team
and was ﬁxed in version 1.0.1k.
202  24th USENIX Security Symposium 
USENIX Association
10
Figure 7: Learned state machine model for OpenSSL 1.0.1j
Figure 8: Learned state machine model for OpenSSL 1.0.1g, an older version of OpenSSL which had a known security
ﬂaw [27].
USENIX Association  
24th USENIX Security Symposium  203
11
Early ChangeCipherSpec The state machine model
of the older version OpenSSL 1.0.1g (Fig. 8) reveals a
known vulnerability that was recently discovered [27],
which makes it possible for an attacker to easily com-
pute the session keys that are used in the versions up to
1.0.0l and 1.0.1g, as described below.
As soon as a ChangeCipherSpec message is received,
the keys are computed. However, this also happened
when no ClientKeyExchange was sent yet, in which case
an empty master secret is used. This results in keys that
are computed based on only public data. In version 1.0.1
it is possible to completely hijack a session by sending
an early ChangeCipherSpec message to both the server
and client, as in this version the empty master secret is
also used in the computation of the hash in the Finished
message.
In the model of OpenSSL version 1.0.1g in
Fig. 8 it is clear that if a ChangeCipherSpec message is
received too early, the Finished message is still accepted
as a ChangeCipherSpec is returned (see path 0, 1, 6, 9, 12
in the model). This is an indication of the bug and would
be reason for closer inspection. The incoming messages
after this path cannot be decrypted anymore however, be-
cause the corresponding keys are only computed by our
test harness as soon as the ChangeCipherSpec message is
received, which means that these keys are actually based
on the ClientKeyExchange message. A simple modiﬁ-