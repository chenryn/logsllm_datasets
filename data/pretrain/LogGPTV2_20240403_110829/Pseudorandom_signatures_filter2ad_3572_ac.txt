(1λ) :
(sk, m) :
Output (sk, pk) ← KGen(1λ).
σ ← Sign(sk, m). Output σ(cid:48) := (σ, last(m)).
(pk, m, σ(cid:48)) : Parse σ(cid:48) as (σ, b). Return 1 iﬀ(cid:0)Ver(pk, m, σ) = 1 ∧ last(m) = b(cid:1).
KGen
(cid:48)
Sign
(cid:48)
Ver
To see that S(cid:48) is not conﬁdential, consider the following conﬁdentiality adversary A = (A1,A2). A1 outputs
(m0, t0) (resp. (m1, t1)), where mi = (Mi) for Mi ∈R {0, 1}λ, and ti = last(Mi). A2 parses σ∗ as σ∗ =
((σ, b)) and outputs b. So AdvCONF
To show anonymity of S(cid:48), consider any adversary A = (A1,A2) against ANON of S(cid:48). Flip a coin β ∈R {0, 1}
and deﬁne ANON adversary B = (B1,B2) against S as follows: On input pk0, pk1, B1 runs A1(pk0, pk1) as
a black-box and receives a message m. If last(m) = β, m is output, otherwise the simulation aborts
which is modeled by letting B’s simulator output 0, i.e. Pr[ExpANON,b
(λ) = 1|A] = 0 for b ∈ {0, 1}. The
2 . Now, on input pk0, pk1, σ, algorithm B2 appends β to σ, runs
“abort” event A will occur with probability 1
d ← A2(pk0, pk1, (σ, β)) and outputs d. Then
S(cid:48),A (λ) = 1]| =(cid:12)(cid:12)1 − 1
(cid:12)(cid:12) = 1
S(cid:48),A (λ) = |Pr[ExpCONF,0
S(cid:48),A (λ) = 1] − Pr[ExpCONF,1
S,B
2 .
2
Pr[ExpANON,b
S,B
(λ) = 1] = Pr[ExpANON,b
= Pr[ExpANON,b
S,B
S(cid:48),A (λ) = 1] · 1
2 + 0 · 1
2
(λ) = 1|¬A] · Pr[¬A] + Pr[ExpANON,b
(λ) = 1|A] · Pr[A]
S,B
and hence AdvANON
assumption.
S,B (λ) = 1
2 · AdvANON
S(cid:48),A (λ). Thus S(cid:48) is anonymous, as the left hand side is negligible by
(cid:117)(cid:116)
3 Digital Signatures with Information Recovery
The following deﬁnition of ‘information recovery’, where in the veriﬁcation procedure signer’s public key
is used together with the signature to compute some information that is then compared to information
determined by the public key and the message, generalizes the known concept of ‘message recovery’.
Deﬁnition 5 (Information Recovering Signatures). A digital signature scheme S = (KGen, Sign, Ver)
is called information recovering if there exist two polynomial-time algorithms Inf and Rec such that for all
(sk, pk) ← KGen(1λ), m ∈ {0, 1}∗, and σ ← Sign(sk, m), the veriﬁcation algorithm Ver(pk, m, σ) outputs 1
if and only if Inf(pk, m) = Rec(pk, σ).
Remark 1. Note that information recovering signature schemes with Inf(pk,·) = pk = Rec(pk,·) might be
correct, but are necessarily forgeable. More precisely, if Inf(pk, m0) = Inf(pk, m1) happens with noticeable
probability (for independently drawn m0, m1 ∈R {0, 1}λ), an adversary A against unforgeability can be
constructed by letting A request a signature σ0 on a random message m0 and output (m1, σ0), for random
m1, as a forgery. To see that A has non-negligible success probability, observe that σ0 will verify successfully
for m1 if we have Rec(pk, σ0) = Inf(pk, m1) = Inf(pk, m0), what happens with non-negligible probability by
assumption.
8
3.1 Examples of Schemes with Information Recovery
Classical examples of information recovering schemes include “text-book” RSA and Nyberg-Rueppel [21],
whose signatures can be used to recover messages. Observe that if the “hash-then-sign” approach is used,
e.g. FDH-RSA [4], then signatures computed on hash values H(m) (rather than on messages m) are still
information recovering, even if H is modeled as a random oracle, i.e. the corresponding algorithm Inf(pk, m)
would simply output H(m). This property can also be found amongst signature schemes that are not message
recovering or where messages need not be hashed to compute (unforgeable) signatures, as shown in the
following.
1, σ(cid:48)
Cramer-Shoup (CS) [15]. The Strong RSA-based CS scheme outputs signatures of the form σ =
(e, s, σ(cid:48)
2) and its veriﬁcation algorithm checks whether e is an odd integer of certain length, followed
1 ≡ thH(s) mod N and σ(cid:48)˜e
2 ≡ shm mod N with ˜e, t, h, and N being part of the
by two checks of the form σ(cid:48)e
public key pk. These equation can be rewritten to Inf(pk, m) = Rec(pk, σ) using Inf(pk, m) that outputs a
1 · h−H(s), σ(cid:48)˜e
2 · s−1 mod N ) after verifying the appro-
pair (t, hm mod N ) and Rec(pk, σ) returning a pair (σ(cid:48)e
priate form for e. The equality of the outputs of Inf and Rec can then be tested component-wise to verify
the signature.
Camenisch-Lysyanskaya (CL) [11]. The Strong RSA-based CL scheme outputs signatures of the form
σ = (e, s, σ(cid:48)) and its veriﬁcation algorithm checks if e is in the appropriate range and σ(cid:48)e ≡ ambsc mod N with
a, b, c, and N being part of the public key pk. By rewriting the veriﬁcation equation to am ≡ σ(cid:48)e/(bsc) mod N
we can deﬁne algorithm Inf(pk, m) to output am mod N and Rec(pk, σ) to output σ(cid:48)e · (bsc)−1 mod N if e is
in the appropriate range.
Boneh-Lynn-Shacham (BLS) [7]. The pairing-based BLS scheme, which can be initialized for example
in cyclic groups G = (cid:104)g(cid:105) of prime order q with a suitable bilinear map e : G × G (cid:55)→ GT , outputs signatures
q (cid:55)→ G is a random oracle and x is a secret key. Its veriﬁcation equation
of the form σ = H(m)x where H : Z∗
e(H(m), y) = e(σ, g) with g, y belonging to pk, immediately deﬁnes Inf(pk, m) and Rec(pk, σ).
3.2
Information Recovery Limits Privacy
The property of information recovery of a scheme can be immediately used to break the scheme’s conﬁ-
dentiality by including information derived via algorithm Inf from messages in m into t, as shown in the
following lemma.
Lemma 3. There is no unforgeable information recovering signature scheme that provides conﬁdentiality.
Proof. Let S = (KGen, Sign, Ver) be an information recovering signature scheme. Consider the following
adversary A = (A1,A2) against conﬁdentiality of S: A1 on input pk picks a random λ-bit message m,
computes t ← Inf(pk, m), and outputs (m, t). A2 on input (pk, σ∗) outputs t(cid:48) ← Rec(pk, σ∗). In this setting,
we observe that correctness of S and the construction of Ver from Inf and Rec implies Pr[ExpCONF,0
(λ) =
(λ), where we use σ1 to denote the challenge signature σ∗ ← Sign(sk, m1).
1] = 1. We now consider ExpCONF,1
Note that by construction of A2 we have t(cid:48) = Rec(pk, σ1). We see that
S,A
S,A
Pr[ExpCONF,1
S,A
(λ) = 1] = Pr[t(cid:48) = t0] = Pr[Rec(pk, σ1) = Inf(pk, m0)] = Pr[Inf(pk, m1) = Inf(pk, m0)],
which, as S is unforgeable, is negligible (cf. Remark 1). For A we thus proved non-negligible advantage
(cid:117)(cid:116)
AdvCONF[-FKE]
(λ) against conﬁdentiality of signature scheme S.
S,A
9
4 Indistinguishable Signatures
The independence of the notions of anonymity and conﬁdentiality of digital signature schemes places these
concepts at the bottom level of our privacy hierarchy and puts forward the question on the existence of
a more general privacy property that implies both of them. We call this property indistinguishability and
formalize it in Deﬁnition 6. We use a simulation-based approach, following the intuition that anonymity and
conﬁdentiality are implied if all information that can be extracted from a real signature can also be extracted
from a ‘signature’ that was simulated without knowledge of keys and messages.10
Deﬁnition 6 (Indistinguishable Signatures). A signature scheme S is indistinguishable (IND), possibly
with full key exposure (IND-FKE), if there exists a PPT simulator Sim such that for all PPT adversaries
A = (A1,A2) the following advantage function
(cid:105)(cid:12)(cid:12)(cid:12)
(cid:104)
(cid:12)(cid:12)(cid:12)Pr
(cid:105) − Pr
(cid:104)
AdvIND[-FKE]
S,Sim,A (λ) :=
ExpIND[-FKE],0
S,Sim,A
(λ) = 1
ExpIND[-FKE],1
S,Sim,A
(λ) = 1
(λ), b ∈ {0, 1}, are the indistinguishability experiments from Figure 4,
is negligible in λ, where ExpIND[-FKE],b
and where the following high entropy constraint holds: The function µ(λ) = maxM∈{0,1}∗ Pr[M ∈ m :
(m, t) ← A1] is negligible in λ, assuming A1 is provided with all admissible inputs and oracles as speciﬁed
in the resp. indistinguishability experiment. The minimum entropy of A is given by − log2 µ(λ).
S,Sim,A
ExpIND,b
(pk)
1
S,Sim,A(λ) :
(sk, pk) ← KGen(1λ)
(m, t) ← ASign(sk,·)
σ0 ← Sign(sk, m)
σ1 ← Sim(1λ,|m|)
(cid:48) ← ASign(sk,·)
t
if t
(cid:48)
2
(pk, σb)
= t then output 1, else output 0
ExpIND-FKE,b
S,Sim,A (λ) :
(sk, pk) ← KGen(1λ)
(m, t) ← A1(sk, pk)
σ0 ← Sign(sk, m)
σ1 ← Sim(1λ,|m|)
(cid:48) ← A2(sk, pk, σb)
t
if t
(cid:48)
= t then output 1, else output 0
Fig. 4. Indistinguishability Experiments (without and with Full Key Exposure).
Lemmas 4 and 5 conﬁrm the intuition that indistinguishable signatures are also anonymous and conﬁ-
∗
S,Sim,A(λ), which is like ExpANON,0
dential (even in presence of full key exposure).
Lemma 4 (IND ⇒ ANON, IND-FKE ⇒ ANON-FKE). Every indistinguishable signature scheme is anony-
mous. The same implication holds in presence of full key exposure.
Proof. Let S be an indistinguishable signature scheme with simulator Sim. For an ANON-adversary A consider
(λ), except that challenge signature σ is computed as σ ←
experiment Exp
Sim(1λ, 1). Construct IND-adversary B by generating random (sk(cid:48), pk(cid:48)) ← KGen(1λ) and deﬁning B1 and B2
as follows: B1, on input pk and having oracle access to Sign(sk,·), runs m ← ASign(sk,·),Sign(sk(cid:48),·)
(pk, pk(cid:48)) as a
black-box, relaying oracle queries to Sign(sk,·), and answering Sign(sk(cid:48),·) queries itself. After receiving m,
B1 outputs (m, t) = ((m), 1) and stops. B2, on input pk and challenge signature σ = (σ), feeds σ into A2
10 Since our IND deﬁnition involves a simulator Sim that generates signatures in σ without knowledge of (sk, m),
one may ask about the relationship to zero-knowledge proofs, which also, by deﬁnition, are simulatable without
knowledge of the secret. We observe that indistinguishable signatures are not zero-knowledge proofs — simulated
IND signatures need not to be convincing (as opposed to simulated proofs), i.e. they do not need to pass the regular
signature veriﬁcation.
S,A
1
10
(together with pk and pk(cid:48)). Value d output by A2 is used as return value t(cid:48) of B2. Careful inspection results
in
S,Sim,B(λ) = 1(cid:3) − Pr(cid:2)ExpIND,1
S,Sim,B(λ) = 1(cid:3)(cid:12)(cid:12)(cid:12)
(λ) = 1(cid:3) − Pr(cid:2)Exp
(cid:12)(cid:12)(cid:12)Pr(cid:2)ExpANON,0
Equality(cid:12)(cid:12)Pr[ExpANON,1
S,A
∗
(cid:12)(cid:12)(cid:12)Pr(cid:2)ExpIND,0
S,Sim,A(λ) = 1(cid:3)(cid:12)(cid:12)(cid:12) =
S,Sim,A(λ) = 1](cid:12)(cid:12) = AdvIND
= AdvIND
S,Sim,B(λ).
(λ) = 1]−Pr[Exp
∗
S,A
S,A (λ) ≤ 2 · AdvIND
S,Sim,B(λ) can be shown similarly (by swapping