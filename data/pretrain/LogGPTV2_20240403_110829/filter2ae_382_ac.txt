实际上，我们还没有确认这个潜在的漏洞是否有效，但无论如何，我们都想分享这个想法，因为我们发现它的设置很有趣。最终，我们从未试图利用它，因为在我们准备采取此处需要的复杂的设置之前，我们使用下一节中描述的方法实现了完全的RCE。
我们的想法是将上述部分中的`--host rules`和`--inspect`开关与`--disable web security`
Chromium开关结合起来，这将允许我们利用对Chromium Javascript上下文的控制来连接到节点。js调试器并执行任意命令：
我们的想法是将上述部分中的`--host rules`和`--inspect`开关与`--disable web security`
Chromium开关结合起来，这样我们就可以利用对Chromium Javascript上下文的控制来连接到 Node.js调试器并执行任意命令：
  1. MS team 是通过恶意网站发起的，注入以下参数:
  2. `--host-rules="MAP "`
  3. `--ignore-certificate-errors`
  4. `--inspect=1337`
  5. `--disable-web-security`
  6. 在启动期间，``上的恶意反向代理或web服务器修改了组成Team UI的合法资源文件，以包含恶意Javascript负载，该负载将在嵌入Electron的Chromium浏览器上下文中执行。
  7. Electron Chromium浏览器中的恶意Javascript请求位于`http://127.0.0.1:1337/json/list`的Node.js调试器元数据终结点，检索调试器连接所需的``。`--disable web security`开关应禁用[同源策略](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy)，使响应对恶意Javascript上下文可见。
  8. 3.Electron Chromium浏览器中的恶意Javascript连接到调试端点，地址为`ws://127.0。0.1:1337/`,用来控制Node.js进程并执行一个OS命令。
### Teams 通过`--gpu-launcher`命令注入执行代码
在开始编写报告之前，我们发现了最后一个问题，我们最终通过恶意的`ms
officecmd:`URI执行了任意代码。此PoC的先决条件是安装MSTeams，但不运行它。
我们的恶意负载基于[利用CVE-2018-1000006的漏洞](https://www.exploit-db.com/exploits/44357)，它利用`--gpu
launcher`参数注入任意命令，该命令在Electron应用程序启动时执行。要使该漏洞与我们的参数注入和MS Teams协同工作，我们需要：
  1. 使用1个字符的URI方案启动`filename`参数以传递`AppBridge.dll`验证，但也没有运行到CVE-2018-1000006的Electron修复程序中（Electron仍然允许在Windows文件名之后添加其他参数，如“C:”）
  2. 注入额外的 `--disable-gpu-sandbox` 参数
  3. 通过删去字符 `.` 或将 字符`/`附加到恶意的`filename`值,绕过`AppBridge.dll` 的文件扩展名检查
  4. 添加一个shell指令，该指令可用于在注入的命令末尾链接像`&&`这样的命令，以保留有效的语法
通过MS Edge和MS Teams 执行任意代码
有效负载如下所示：
    ms-officecmd:{
       "LocalProviders.LaunchOfficeAppForResult": {
           "details": {
               "appId": 5,
               "name": "irrelevant",
               "discovered": {
                   "command": "irrelevant"
               }
           },
           "filename": "a:/b/ --disable-gpu-sandbox --gpu-launcher=\"C:\\Windows\\System32\\cmd /c calc && \""
       }
    }
Skype预先安装在Windows
10上，通过在其启动命令中添加`---secondary`参数，可以并行启动多个Skype实例。因此，如果通过Skype应用程序发现有效负载可利用此问题进行攻击，则它应在默认Windows
10安装上生效，无需任何先决条件。我们试图为Skype找到有效的负载，但未成功。可能在Skype被发现易受[CVE-2018-1000006攻击](https://www.securityfocus.com/bid/102796)时对其采取了额外的安全措施.
### Teams 利用IE11/Edge遗留的漏洞进行驱动，借助`--gpu-launcher` 命令注入
此时，我们对我们的发现非常满意，并开始为微软编写bug报告。就在我们即将提交报告时，我们注意到MSRC报告流包含一个强制下拉选择，以指定报告的漏洞是否可以发在最新Windows版本的“Windows
Insider Dev
Channel”上。由于微软为此类问题提供了相当可观的5万美元奖金，并且我们设想尽职调查强制表单字段将提高我们报告的质量评级，因此我们很高兴从该发布渠道安装最新版本的Windows
10，并验证我们的漏洞利用也能在该渠道起效。
MSRC报告流程询问“是否在Windows Insider Dev渠道上发布？”
令我们惊讶的是，该漏洞不仅有效，而且通过简单地添加一些点击恶意链接的JavaScript，预装的Internet Explorer 11和“旧”版本的MS
Edge可能会任意用来触发代码执行，而无需浏览恶意网站以外的任何用户操作。由于我们最初的动机是改进以前的攻击场景，即桌面应用程序打开任意URI，因此我们没有过多考虑浏览器攻击，只是假设所有现代浏览器在处理诸如`ms
officecmd`之类的模糊scheme时都有一些有用的安全默认设置。然而这一假设是错误的，如MS Edge Legacy所示：
Windows 10借助MS Edge在上通过RCE驱动
这是上面视频中使用的有效载荷:
    Exploit in progress 
有了这段视频，我们提交了报告。
* * *
## MSRC 回应
### 分类时缺乏技术上的理解
我们的初次报告在提交后一天因不适用而被错误地结束。
> […] 不幸的是，您的报告似乎依赖于社会工程来完成，这不符合安全漏洞的定义。[…]
只有在我们提出上诉后，该问题才重新开放，并被归类为“关键，RCE”。
### 不情愿的，缓慢的沟通
我们的第一封电子邮件在一周后才被回复。之后的任何沟通尝试通常会需要数周的等待，需要我们跟进。（见[时间表](https://positive.security/blog/ms-officecmd-rce#timeline)下）
### 补救不足
本文中描述的参数注入漏洞仍然存在于完全修补后的Windows
10和11系统上。5个月后发布的补丁似乎只照顾到了Teams和Skype。虽然它确实阻止了这里描述的RCE
POC的漏洞，但我们认为可能还有其他方法利用参数注入来实现代码执行。
在我们请微软注意这一点后，他们说他们已经准备了另一个补丁来解决这个参数注入问题，并允许我们另外发布这篇文章。在发布这篇博文时，我们仍然可以注入任意参数，并在修补后的Windows
10/11系统上执行Outlook钓鱼攻击。
### 与公众缺乏沟通
尚未指派CVE或发布任何咨询意见，以告知公众该风险，微软对此的解释如下：
> out through Windows
> Update.不幸的是，在本案例中，没有与报告相关的CVE或咨询。我们创建的大多数CVE都是为了向用户解释为什么Windows
> Update要发送某些修补程序，以及为什么应该安装它们。对网站的更改、通过Defender或通过商店下载通常不会以相同的方式关联CVE。在本案例中，修复程序不会通过Windows
> Update发出。
### 误导性悬赏广告
虽然他们为这份报告支付了5000美元，但MS宣传了他们的漏洞赏金计划基于某些标准，还设立了特别
_[攻击场景奖](https://www.microsoft.com/en-us/msrc/bounty-windows-insider-preview)_
。我们认为，我们的报告应符合第二种描述的场景，即“在很少或没有用户交互的情况下，未经验证和未经授权访问私人用户数据”，最高奖励为50000美元。
微软一定有人同意我们的观点，因为这份报告为我们赢得了180个 _[研究员认可计划](https://www.microsoft.com/en-us/msrc/researcher-recognition-program)_ 点数，我们的想法就是，这个点数是适用于“合格攻击场景”的60点再乘3倍。
当我们询问悬赏金额时，我们被提示提供一份PoC，该PoC不要求受害者确认额外的“此站点正在尝试打开LocalBridge”对话框：
>
> 至于第二种攻击场景（远程（假设没有事先执行）、演示的未经验证和未经授权访问私人用户数据（用户交互很少或没有），此场景不需要事先执行，而您案例中演示的信息泄漏需要交互才能执行代码。
> 如果您可以提供一个在不提示我们的产品的情况下产生RCE的示例，我们很乐意重新审查该案例，以帮助您获得可能的攻击场景赏金奖励。
我们遵从并回复了演示视频，其中显示了IE 11上的驱动漏洞，尽管：
  * 我们不认为“此站点正在尝试打开LocalBridge”对话框应取消第二个攻击场景中的问题，因为该场景明确允许很少的用户交互。
  * 我们的初始报告中已经包含了一个PoC视频，该视频显示了Edge浏览器上的驱动器利用漏洞攻击，而当时最新发布的Windows 10 insider Dev频道中是没有提示的。当时我们意识到，['Microsoft Edge Legacy'于2021-03-09被宣布为EOL](https://blogs.windows.com/msedgedev/2021/03/09/microsoft-edge-legacy-end-of-support/)，正好在我们于2021-03-10提交原始MSRC报告的前一天。
MS最终拒绝了对赏金金额的另外调整：
> […] 本案例仍在一般判断的范围内。只有Internet Explorer才能访问的漏洞不在我们今天的赏金计划的范围内[…]
这一说法令人惊讶，因为
[IE在2022-06-15年之前仍然“受支持”](https://blogs.windows.com/windowsexperience/2021/05/19/the-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge/)。
### 时间线
`2021-03-10` 通过https://msrc.microsoft.com/首次披露 `2021-03-11`
微软关闭我们的初始报告，因为"[..] 你的报告似乎依赖于社会工程 [..]" `2021-03-11` 我们向上诉委员会提交第二份报告
`2021-03-17` 微软重开我们的原始报告 `2021-03-27` MS证实了报告的行为 `2021-04-07` 微软确认了5000美元的奖励
`2021-04-07` 我们询问悬赏金额 `2021-04-08` 我们获得180点数 `2021-04-26`
我们从2021-04-07开始跟进我们的电子邮件 `2021-05-17` 我们再次跟进 `2021-05-18`
MS要求我们“提供一个在没有提示自家产品的情况下导致RCE的示例” `2021-05-18` 我们用IE 11驱动 PoC视频回应 `2021-06-07`
我们从2021年5月18日开始跟进我们的电子邮件 `2021-06-24` 我们再次跟进 `2021-06-24`
MS拒绝对赏金进行调整，因为“只有Internet Explorer才能访问的漏洞不在我们赏金计划的范围内” `2021-08-31`
我们对现在“完整”的报告进行的重新测试表明，我们的RCE PoC 不再有效，但参数注入没有修补 `2021-08-31`
我们敦促微软参数论点注入，并给他们4周时间要求推迟这篇文章的计划发布日期 `2021-09-16` 微软表示，应该在未来几天内推出一个补丁来修正这一参数注入
`2021-12-07` 我们发表这篇博文
* * *
[1] https://support.microsoft.com/en-us/office/command-line-switches-for-microsoft-office-products-079164cd-4ef5-4178-b235-441737deb3a6
[2] https://www.electronjs.org/blog/protocol-handler-fix
[3] [https://github.com/electron/electron/blob/
master/shell/app/command_line_args.cc#L18-L20](https://github.com/electron/electron/blob/master/shell/app/command_line_args.cc#L18-L20)
[4] List of launchable applications: Access, Delve, Skype, Teams, Excel,
SkypeForBusiness, OfficeLens, OneNote, Outlook, Powerpoint, Project,
Publisher, Sway, Visio, Word, Office, Office Hub
* * *