2−qN · 2q!
(2q − x)! (cid:19)
≥ (cid:16)1 − 2q(x−N )(cid:17)l−q+1
.
Fixing the number of bundles x and a false positive
probability ǫ, we obtain the following inequality for the
number of dumps N :
(cid:16)1 − 2−(N −x)q(cid:17)l−q+1
> 1 − ǫ.
Thus
N >
−1
q
log2(cid:16)1 − (1 − ǫ)
1
l−q+1(cid:17) + x.
This formula can be used in two ways. If we know the
length q of the encoding, we ﬁx a number of bundles x
and a false positive probability ǫ and compute the num-
ber of dumps N needed for convergence. If we do not
know the length of q, we set it to log2(x) and perform
the same computation. For instance, for dumps of length
l = 1024, false positive probability of ǫ = 0.05, number
of bundles x = 4, and length q = log2(x) = 2 we get
N > 11.14. This means that to have convergence with
probability 0.95 we need to analyze 12 dumps compris-
ing 4 different attribute values.
8 Case study: The E-go system
We illustrate our methodology by reverse engineering
part of the memory structure of the Luxembourg public
transportation card.
8.1 The E-go system
The fare collection system for public transportation in
Luxembourg, called e-go, is based on radio frequency
identiﬁcation (RFID) technology. The RFID system con-
sists of credit-card shaped RFID tags that communicate
wirelessly with RFID readers. Readers communicate
with a central back-end system to synchronize their data.
Travelers can buy e-go cards with, for instance, a book
of 10 tickets loaded on it. Upon entering a bus, the user
swipes his e-go card across a reader and a ticket is re-
moved from the card.
Since most RFID readers of the e-go system are de-
ployed in buses the e-go is an off-line RFID system [5].
Readers do not maintain a permanent connection with
the back-end system, but synchronize their data only in-
frequently. Since readers may have data that is out-of-
date and tags may communicate with multiple readers,
the e-go system has to store information on the card.
The RFID tags used for the e-go system are, in fact,
MIFARE classic 1k tags. These tags have 16 sectors that
each contain 64 bytes of data, totaling 1 kilobyte of mem-
ory. Sector keys are needed to access the data of each
sector. Garcia et al. [4, 6] recently showed that these
keys can be efﬁciently obtained with off-the-shelf hard-
ware. Therefore, it is easy to create a memory dump of
an e-go card.
8.2 Data collection
Over a period of 2 months, we collected 68 dumps for
7 different e-go cards of different types. Four cards are
of type 10-rides/2nd-class, two of type 1-ride/2nd-class
and one of type 1-ride/1st-class. According to informa-
tion published by the transportation companies, a card
can contain up to 6 products of the same type. We con-
sidered two classes of events that change the state of a
card: (1) charging the card with a new product (including
the purchase of a new, charged card), and (2) validating
a ride by swiping the card. After each event we dumped
the memory of the card as a binary ﬁle. This gave a se-
quence of consecutive events for each card.
Because the e-go system is an off-line system, we ex-
pected to ﬁnd several attributes encoded on the card. For
each event we therefore collected some contextual in-
formation, which we attributed to the dump following
the event. For charge events we collected the following
attributes: card id (the decimal number printed on the
card); charged product; date, time and location of charg-
ing; card charger id (as printed on the coupon). For val-
idation events we collected: card id; date and time of
swiping; expiration time of the ride; card reader id (be-
cause the card readers have no visible identiﬁcation we
collected the license plate number of the bus and the lo-
cation of the reader within the bus); rides left; bus num-
ber; bus stop.
These are the attributes that one would expect to ﬁnd
on the card and that are easy to observe. Most of these
attributes can be obtained by reading the sales slips or
the display of the reader. Since cards are purchased
anonymously, no personal identifying information, such
as name, address, or date-of-birth can be stored on the
card.
In addition to our basic set of dumps, we had access
shell sector
product
sectors
transaction
sectors
empty
sectors
= constant 0
= constant 1
= variant
Figure 7: E-go memory layout (applying common to a unique attribute).
to 47 dumps from earlier experiments which were less
structured and less documented. We used these dumps to
validate the results of the experiments with our main set
of dumps.
It is important to note that our analysis is entirely pas-
sive: no data on the card needs to be modiﬁed and no
data needs to be written to the card.
8.3 Data analysis
Using our tools, we veriﬁed the presence of three classes
of attributes: (1) external attributes (i.e., the observable
attributes mentioned above); (2) internal attributes (re-
lated to the organization of the data within the card’s
memory, such as a pointer to the active sector); and (3)
attributes with high entropy (such as CRCs and crypto-
graphic checksums). We also searched for cyclic ver-
sions of these attributes.
Memory layout. The ﬁrst step in our analysis is to de-
termine the general memory layout of an e-go card. For
this purpose we apply the commonalities algorithm to
the constant attribute, i.e., an attribute that has a con-
stant value for every dump. The result of this operation is
shown in Figure 7. The card’s memory is displayed in 64
lines of 128 bits, giving a total of 8192 bits (1kB). Bits
that have a constant value in all dumps are colored dif-
ferently from bits that vary in value. The recurring struc-
tures immediately suggest a partitioning of the memory
into 16 sectors of 4 lines each. There seem to be four dif-
ferent types of sectors. The structure of the ﬁrst sector is
unique. We call this sector the shell sector. Lines 2 and
3 of the shell sector are identical. Next there are seven
sectors with a similar appearance (three of these look a
bit less dense than the others because they are used less
frequently in our dump set). We call these sectors the
product sectors. The next ﬁve sectors are similar. We call
them transaction sectors. Finally, there are three empty
sectors, which we will ignore for the rest of our analysis.
They are probably reserved for future extensions of the
e-go system.
Further inspection shows that the last line of each sec-
tor is constant (over all dumps). This is the 16 byte sector
key. Because the last lines of each of the sectors (except
the empty sectors) are equal, we can conclude that the
same key is used for all sectors.1
External attributes. The second step in our analysis is
to carve the external attributes. This step only revealed
the card ID. We can conclude that the other external at-
tributes are either not represented on the card or not at
a static location. Figure 8 shows for each sector type
which attributes were discovered with our tool. The card
ID, which is located in the shell sector in Figure 8, is de-
tected as follows. The output of our tool on the card ID
attribute consists of a number of intervals between bits 0
to 37 plus the interval 35 to 108. Clearly, the last interval
is too large to contain the card ID, so we can consider that
interval a false positive. We conclude that bits 0 to 37 are
1In order to not reveal sensitive data, we display keys that are dif-
ferent from those used in the e-go system.
card-id
(0–31)
bcc card-id
(32–39)
Shell sector
psec-ptr-A
(146–148)
tsec-ptr
(165–167)
psec-ptr-B
(149–151)
next-psec-ptr
(168–170)
seal
(176–239)
card type
(19–23)
Product sector
rides left 2
(72–75)
CRC
(240–255)
CRC
(112–127)
rides left
(206–209)
exp-time
(221–231)
CRC
(240–255)
date
time
(128–141)
(142–152)
Transaction sector
reader id
(256–271)
date 2
time 2
(277–290)
(291–301)
CRC
(240–255)
CRC
(368–383)
Figure 8: Attributes located in the three sector types.
related to the card ID. Indeed, the MIFARE standard de-
scribes that identiﬁcation numbers are hard-coded in the
ﬁrst 32 bits (4 bytes). If we reverse these 4 bytes and in-
terpret them as a decimal number, we obtain the number
printed on the card. The fact that bits 32 to 37 relate to
the card ID is also consistent with the MIFARE standard
because bits 32 to 39 contain the checksum of the card
ID.
sector (next-psec-ptr, bits 168-170). Two other pointers
with cycle 2 are only revealed when carving well cho-
sen subsets of the collection of dumps. In the ﬁgure they
are labelled with psec-ptr-A and psec-ptr-B. When step-
ping through the dumps, it becomes clear that after each
validation event the values of next-psec-ptr and one of
psec-ptr-A or psec-ptr-B are swapped. When charging
the card, psec-ptr-A and psec-ptr-B change roles.
Internal attributes. The tool can be used to step
through a sequence of dumps and observe the changes
between consecutive dumps. In this way, one can step
through the “history” of a particular card and observe re-
curring patterns. This process indicates a periodicity in
the updates of the transaction sectors of the e-go card.
Successive validation events write to successive transac-
tion sectors, thereby cycling back from the ﬁfth transac-
tion sector to the ﬁrst. One would expect a similar pe-
riodicity in the product sectors, but that is not the case.
Writing to the product sectors occurs in an alternating
way between two selected sectors. Based on the hypoth-
esis that there is a notion of a “current” sector, we carve
for pointers with cycle lengths 2 to 7. By making a selec-
tion of those sequences of dumps that showed the cyclic
behaviour, we can locate a pointer to the currently active
transaction sector (see tsec-ptr in the shell sector of Fig-
ure 8). This 3-bit pointer has a cycle of length 5 from 000
to 100. In a similar way one obtains a pointer with cycle
2, located at bit 169. Inspection of dumps reveals that
this concerns a 3-bit pointer to the next active product
Cyclic external attributes. After having been able to
locate only a single static external attribute, we continue
by searching for dynamically stored external attributes.
By using cycle length 5, we can ﬁnd two locations in
each of the transaction sectors related to the date of the
most recent validation In Figure 8 these locations are la-
belled with “date” and “date 2”. By stepping through a
sequence of dumps swiped on consecutive days, it be-
comes clear that the date ﬁeld is a counter. It counts the
number of days since 1/1/1997. In our dump set the two
dates are always identical. In a similar way we can ﬁnd
two ﬁelds related to the time of the most recent validation
event. They count the number of minutes since midnight.
The ﬁrst and second time are different, but, surprisingly,
their difference is not constant, which would have indi-
cated a relation to the expiration time. The last attribute
that can be located in the transaction sector is the reader
ID. As explained, we use the license plate of the bus and
the location of the reader within the bus to identify each
card reader. By combining these two attributes we obtain
a new attribute that relates to the reader ID. Surprisingly,
this new attribute does not occur in the dumps, but the
license plate attribute does. This means that all readers
in a given bus have the same id. When interpreting the
reader as a decimal number, one typically obtains num-
bers in the range from 1 to 150 for readers in a bus and
from 10150 to 10200 for readers in a train station. This
is consistent with carving for the attribute “bus-or-train”,
which points at the higher bits of the reader id.
These attributes were found by reducing cyclic at-
tributes to static attributes as described in Section 5. With
this approach an attribute of cycle 5 will change its value
only every 5 dumps. As a consequence, this attribute has
a rather slow convergence rate. Convergence can be im-
proved, however, by focusing on the active transaction
sector. In order to do this we created a new set of dumps,
each of which only contained the active transaction sec-
tor of the old dump. Carving for the static external at-
tributes in this new set of dumps results in the same ﬁnd-
ings, but the attributes can be located with signiﬁcantly
fewer dumps.
Using this approach we can easily locate three more
attributes in the product sectors: the card type, the num-
ber of rides left on the card and the expiration time of
the current product. A second ﬁeld related to the number
of rides left was also located (rides left 2 in the ﬁgure),
which equals 12 minus rides left for 10-rides cards and 3
minus rides left for 1-ride cards.
Finding high entropy attributes. While using the
tool, one quickly observes that the diss function returns
intervals of varying widths sliding through the index set
of the dumps. Heuristically, one expects the width of
these sliding windows to be shorter over intervals cor-
responding to high-entropy attributes than over indexes
corresponding to low entropy attributes. Furthermore,
the step size or distance between two such windows is
expected to be smaller for high-entropy intervals.
The observation of short-step narrow sliding windows
led to the conjecture that the cards contain cryptographic
data.
To conﬁrm the existence of high-entropy attributes, the
MD5 hash of the dumps was computed and added as an
attribute. The hash serves as a quick indicator for equal-
ity or inequality of two dumps and is a more robust ap-
proach to labeling distinct dumps with different attribute
values than simply enumerating all dumps in a set. Carv-
ing for this artiﬁcial MD5 attribute amounts to looking
for attribute values which change whenever the contents
of the dump change. The tool thus revealed an 80-bit
string in the shell sector. The same method applied to
dumps of the product and transaction sectors revealed
16-bit strings which only change when the data in the
corresponding sector changes.
Whereas an 80-bit string was expected to be a cryp-
tographic hash, the 16-bit strings were suspected to be
checksums such as CRCs. By trying out a list of com-
monly used CRCs to the data in the product and transac-
tion sectors, the CRC-16-ANSI with polynomial x16 +
x15 + x2 + 1 was found to produce the observed values.
This step led to the suspicion that a CRC might also
be part of the 80 bit string in the shell sector, which was
indeed found to be the case. The remaining 64 bits are
expected to be a cryptographic hash protecting the in-
tegrity of the card’s data.
Evaluation. Our tool performed quite well in this case
study. We located the attributes as displayed in Figure 8
and have been able to infer the encoding scheme for most
of them. On the other hand, we have not been able to lo-
cate all collected attributes. We did not ﬁnd the date,