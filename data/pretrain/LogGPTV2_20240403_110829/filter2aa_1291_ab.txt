### The Possibility of Hiding Data in Timestamps

The possibility of hiding data in timestamps is not discussed. We believe that embedding data in the channels identified here would be insufficient to hide data from an adversary who suspects that data might be hidden in the TCP stream.

### IP Checksum Covert Channels and Selected Hash Collisions

In "IP Checksum Covert Channels and Selected Hash Collisions," the idea of using internet protocol checksums for covert communication is explored. This paper discusses techniques for detecting covert channels, as well as possible places to hide data within the TCP stream, such as sequence numbers, duplicate packets, TCP window size, and the urgent pointer. These concepts are also mentioned in the meeting notes of the UC Davis Denial of Service (DoS) Project.

### Timing Information for Covert Channels in Hardware

The use of timing information for covert channels in hardware is described in "Countermeasures and Trade-offs for a Class of Covert Timing Channels." A more generalized use of timing channels for sending covert information is detailed in "Simple Timing Channels." Covert channels are discussed more broadly in various papers. A comprehensive survey of information-hiding techniques is provided in "Information Hiding: A Survey." Theoretical issues in information hiding are considered in several other works. John McHugh provides extensive information on analyzing systems for covert channels in "Covert Channel Analysis," primarily focusing on classified systems. These papers focus on preventing covert channels in system design and detecting existing ones rather than exploiting them.

### GJ Simmons' Research on Subliminal Channels

GJ Simmons has conducted extensive research into subliminal channels. He was the first to formulate the problem of covert communication in terms of the prisoners' problem and did substantial work on the history of subliminal communication, particularly in relation to compliance with the SALT treaty. He also identified a covert channel in the DSA.

### Goals of the System

The goal of this system is to covertly send data from one host to another. There are two important aspects to this goal:
1. **Data Transmission**: We must send data.
2. **Covert Operation**: We must do so in a manner that our adversary cannot detect.

It is important to note that these two goals are at odds with each other. To send data, we must perform actions that the receiving host can detect. However, to remain covert, we must avoid any actions that an eavesdropper can detect. We approach this problem by presuming the existence of a covert channel that meets as few requirements as possible. We then describe a protocol to use such a channel to send data and identify a covert channel that meets the proposed requirements.

### Characteristics of the Channel

In designing our covert channel protocol, we seek to identify the minimum requirements for a channel that would allow us to send useful data. In the worst-case scenario, the channel would be bit-wise lossy and unacknowledged, and the bits sent would need to pass certain statistical tests. By "bit-wise lossy," we mean that the channel can drop and reorder individual bits. By "unacknowledged," we mean that the sender does not know which bits, if any, were dropped or in what order they arrived. Using such a channel to send data is extremely difficult. However, if we relax these restrictions in reasonable ways, the problem becomes more tractable.

For simplicity, we will assume that the only statistical test the bits must pass is one of randomness, as this will be convenient for embedding encrypted data. This is reasonable because it is not prohibitively difficult to identify covert channels that, when not being used to send covert data, contain an equal distribution of ones and zeros. We will also assume that each bit has a nonce attached to it and that if the bit is delivered, it arrives with its nonce intact. This condition is both sufficient to make the channel usable for sending data and likely to be met by many covert channels in network protocols. This condition is easy to meet because most covert channels in network protocols involve embedding one or more bits of covert data in a packet of innocuous data. Thus, the innocuous data, or some portion thereof, can serve as the nonce.

### Assumptions

We presume that we have a channel with the above characteristics. We further presume that the adversary cannot detect our use of that channel. Lastly, we presume that a shared secret exists between the sender and receiver. The first two presumptions will be justified in subsequent sections. The third presumption is justified on the grounds that it is impossible to solve the problem without it. If the sender and receiver did not have a shared secret, there would be nothing to distinguish the receiver from the adversary. Any message the sender could produce that was detectable by the receiver could be detected by the adversary in the same manner. Note that public-key cryptography is no help here because any key negotiation protocol would still require sending a message to the receiver that anyone could detect.

We also assume that it is sufficient to implement a best-effort datagram service, such as that provided non-covertly by the Internet Protocol. In such a service, packets of data are delivered with high probability. Packets may still be dropped or reordered, but if a packet reaches its destination, all the bits in the packet reach the destination, and the order of the bits within the packet is preserved. This level of service is sufficient because the techniques to implement reliability over unreliable datagrams are well understood, and in some applications, reliability may not be required.

### Protocol

To send messages over this channel, we send one bit of our message block \( M \) per bit of the channel, rather than sending some function of multiple bits. This way, each bit of the data is independent, and if one bit is lost or reordered, it will not affect the sending of any of the other bits. We choose which bit of the message block to send based on a keyed hash of the nonce. Specifically, for a message block of size \( l \) and a key \( K \), on the packet with nonce \( t \), we send bit number \( n \), where:

\[ n = H(t, K) \mod l \]

The hash function \( H \) should be a cryptographic hash function that is collision-free and one-way. Because the nonce \( t \) varies with time, which bit we send will be a random distribution over the \( l \) bits in the block. We can keep track of which bits have been sent in the past to know when we have sent all the bits. The expected number of channel bits \( x \) it takes to send the \( l \) bits of the block will be:

\[ x = l \times \left( \sum_{i=1}^{l} \frac{1}{i} \right) \]

Of course, because our channel loses bits, this is not sufficient. We thus send each bit multiple times to ensure that all bits are eventually delivered.