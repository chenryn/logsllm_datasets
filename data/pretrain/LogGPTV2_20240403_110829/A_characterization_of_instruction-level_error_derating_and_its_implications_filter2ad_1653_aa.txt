title:A characterization of instruction-level error derating and its implications
for error detection
author:Jeffrey J. Cook and
Craig B. Zilles
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
A Characterization of Instruction-level Error Derating
and its Implications for Error Detection
Jeffrey J. Cookl
Craig Zilles2
1Department ofElectrical and Computer Engineering 2Department of Computer Science
University ofIllinois at Urbana-Champaign
{jjcook, zilles} @uiuc.edu
Abstract
Ox10 (r10)
Ox20 (r12)
~
Ox41 0 (r10)
Ox20 (r12)
In this work, we characterize a significant source of
software derating that we call instruction-level derating.
Instruction-level derating encompasses the mechanisms by
which computation on incorrect values can result in cor(cid:173)
rect computation. We characterize the instruction-level
derating that occurs in the SPEC CPU2000 INT bench(cid:173)
marks, classifying it (by source) into six categories: value
comparison, sub-word operations, logical operations, over(cid:173)
flow/precision, lucky loads, and dynamically-dead values.
We also characterize the temporal nature of this derating,
demonstrating that the effects of a fault persist in archi(cid:173)
tectural state long after the last time they are referenced.
Finally, we demonstrate how this characterization can be
used to avoid unnecessary error recoveries (when a fault
will be masked by software anyway) in the context ofa dual
modular redundant (DMR) architecture.
Keywords: Dual modular redundancy, error detection, fault
injection, instruction-level derating, software derating.
1. Introduction
Transient faults are an important concern in modem mi(cid:173)
croprocessor design. As we continue to scale transistors to
smaller dimensions and pack wires closer together, they be(cid:173)
come increasingly susceptible to transient faults due to a
number of factors, including radiation [21], crosstalk [10],
parameter variation [5] and transistor wear-out [23]. Mech(cid:173)
anisms to tolerate transient faults continue to be an active
area of research.
Recently, in light of the power constraint and the end of
the exponential growth in processor frequencies, there has
been a trend to unify reliability and perfonnance/power op(cid:173)
timization [3,9, 12, 17,24]. With the goal of maximizing
clock frequency or minimizing power consumption, these
approaches eschew the timing and voltage safety margins
traditionally used to make systems robust to faults; a robust
branch taken
branch taken
(a) error-free execution
(b) execution with incorrect values
Figure 1: An example of instruction-level derating: value
comparison. Even with a bit flipped in r 10, the value com(cid:173)
parison in (b) has the same outcome as the error-free execu(cid:173)
tion in (a).
error detection and correction mechanism is used to ensure
correct execution in the presence of the relatively frequent
occurance of transient faults (e.g., 1 per 104-106 clock cy(cid:173)
cles) that occur when a design is just barely making timing.
One well documented aspect of transient faults is that
only a fraction that occur manifest themselves as errors;
the remaining faults are derated at various levels of the
hardware-software hierarchy. At the circuit and micro(cid:173)
architectural level, previous work has both measured the
fraction of circuit-level fault injections that manifest in ar(cid:173)
chitectural state [20,28], as well as proposing an intuition
for why micro-architectural derating occurs in the fonn of
the Architectural Vulnerability Factor (AVF) metric [19],
which is derived in part by the fraction of time that various
state elements contain/contribute to producing architectural
state.
Researchers have also explored software derating by in(cid:173)
jecting errors into architectural state and observing how
many result in incorrect execution [4, 13-15,25,26,28]. In
this way, the derating effect of software has been estimated
but there has been little work to understand these mecha(cid:173)
nisms, perhaps in part because the mechanisms were viewed
to be application specific.
In particular, no work that we are aware of has
characterized the sources of instruction-level derating of
1-4244-2398-9/08/$20.00 ©2008 IEEE
482
DSN 2008: Cook &Zilles
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:33 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
architecturally-visible faults,
that is the mechanisms by
which an instruction can compute using incorrect data and
still produce correct results. An example of this instruction(cid:173)
level derating is shown in Figure 1. The main goal of this
paper is to provide a characterization of instruction-level de(cid:173)
rating, considering both its mechanisms and temporal be(cid:173)
havior.
In our characterization in Section 4, we demonstrate the
following:
1. we demonstrate that there are six major mechanisms
leading to instruction-level derating,
2. we find in our experiments that, despite taking a rather
conservative view of the opportunity for instruction(cid:173)
level derating, 36% of fault injections into architectural
state are derated,
3. we show that roughly half of the derated faults propa(cid:173)
gate to other instructions before they are masked, and
4. we show that, even when a fault does not affect the pro(cid:173)
gram's outcome, incorrect temporary values can per(cid:173)
sist in architectural registers significantly past the last
use of any incorrect value.
The practical relevance of these results is that they in(cid:173)
dicate error detection schemes can be designed to avoid
reporting self-correcting architecturally-exposed faults,
thereby avoiding the performance and power penalties of
recovery for systems where recoveries are not uncommon.
We first quantitatively demonstrate the behavior difference
between error detection schemes (in Section 5): systems
that check architectural state at every instruction boundary
will always report architecturally-exposed faults as errors,
eliminating any opportunity for instruction-level derating,
whereas a periodic check will not. We continue by demon(cid:173)
strating an optimization, which exploits the temporal be(cid:173)
havior of instruction-level derating, to further reduce the
number of reported self-correcting errors by not checking
registers known by the compiler to contain dead values.
Before the characterization of instruction-level derating,
we first provide background/terminology on faults, errors,
and their derating that provides the context for this paper
(Section 2) and a description of the experimental method
employed in these studies (Section 3). We conclude in Sec(cid:173)
tion 6 with a discussion of other potential opportunities for
exploiting knowledge of these derating mechanisms.
2. Background
In this section, we discuss the context for our study on
instruction-level derating. As illustrated in Figure 2, faults
occur at the circuit level but must reach the application level
by changing the program's output or causing an unrecover(cid:173)
able exception (e.g., a memory protection fault) to actually
application level
derate faults
in this context
architectural level
faults
faults
Figure 2: Scope of instruction-level derating. Error de(cid:173)
rating can occur at many levels; in this work, we focus on
the software derating of faults that manifest at the archi(cid:173)
tecturallevel, before they corrupt control flow or memory
state or propagate to the application-level to cause a crash
or silent data corruption.
be considered as an error. Along the way, there are many
points at which faults can be derated (i.e., used without pro(cid:173)
ducing faulty output) and masked (i.e., eliminating faulty
state) before they cause an error.
Faults originate at the circuit level, either altering the re(cid:173)
sult of combinational logic or flipping latched state [21]. If
left uncorrected by circuit- or logic-level techniques [18],
level which
faults propagate to the micro-architectural
includes potential architectural state.
At
the micro(cid:173)
architectural level, it has been shown that many injected
faults fail to reach architectural state. Two main mecha(cid:173)
nisms lead to this result: 1) many bits of micro-architectural
state are dead, in that they will be written before being refer(cid:173)
enced, and 2) some micro-architectural state affects perfor(cid:173)
mance but not correctness, with predictor state being the ob(cid:173)
vious example. Previous work has characterized the relative
error vulnerability of micro-architectural structures by ob(cid:173)
serving what fraction of their bits are necessary for an archi(cid:173)
tecturally correct execution (ACE, where architecturally(cid:173)
visible state never contains an incorrect value) [27] and
by injecting micro-architectural faults and observing which
fraction lead to program crashes and incorrect program out(cid:173)
puts [20,28].
There are discrepancies in the numbers computed by
these two approaches because an architecturally correct ex(cid:173)
ecution is not explicitly required to compute the correct
program output without program crashes; some derating
can occur in the software itself. Previous work has mea(cid:173)
sured the rates of software derating [4, 13-15,25,28], but
little work has demonstrated the mechanisms involved in
software derating. One notable exception, is the work of
Wang et at. that characterized y-branches: branches whose
outcome can be reversed without changing the program's
1-4244-2398-9/08/$20.00 ©2008 IEEE
483
DSN 2008: Cook &lilies
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:33 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
outcome [26]; the only permanent change is in terms of the
program's execution time. Y-branches typically result from
the structure of the program or its control-flow graph (e.g.,
taking early exits from loops that end up not having a side
effect, and if statements based on multiple predicates where
one predicate determines the overall control flow even if an(cid:173)
other one is computed incorrectly).
In addition, some ar(cid:173)
chitectural state (like microarchitectural state) is dead and,
therefore, will not affect the program's final results because
it is never read by future instructions.
These sources of derating, however, are difficult to ex(cid:173)
ploit if our goal is providing high reliability. While previ(cid:173)
0us work on software derating shows that a non-trivial num(cid:173)
ber of architectural-level faults are masked, it provides little
consolation for the faults that lead to damaging situations
like silent data corruption. Generally, systems that provide
fault tolerance check control flow and values before they
are released to the memory system, because doing so sim(cid:173)
plifies the checking and reduces the recovery effort, respec(cid:173)
tively. For example, a commonly proposed approach for
a bandwidth efficient implementation of checking in dual
modular redundancy (DMR) is to compare three pieces of
information between the processors:
the stream of branch
outcomes, a hash of the register values, and the store ad(cid:173)
dresses and values [11].
For these reasons, we focus in this paper on the
instruction-level mechanisms of software error derating,
where faults potentially propagate through register state, but
are derated/masked before they affect control flow or are
exposed to the memory system. These sources of derating,
which occur within the dashed region in Figure 2, do not
rely on understanding the program's control flow structure
or its memory access behavior to allow such faults to be
naturally masked without risking a silent data corruption.
In doing so, we consider an error model (described in Sec(cid:173)
tion 3.3) that abstracts but closely resembles those proposed
for modem DMR systems.
3. Experimental Method
To study instruction-level derating, we performed a se(cid:173)
ries of fault-injection experiments. Because we were con(cid:173)
cerned with software derating, these experiments were per(cid:173)
formed with a functional simulator that only models the ar(cid:173)
chitectural behavior of the machine. In this section, we de(cid:173)
scribe our simulation infrastructure (Section 3.1), how we
performed fault injection (Section 3.2), and the error model
that we used to decide whether an injected fault was derated
or not (Section 3.3).
3.1. Experimental Framework
We used a functional simulator derived from the Sim(cid:173)
pleScalar tool set [2] that models the user-level architectural
state and ISA of the Alpha AXP architecture; system calls
are emulated. In this model, no micro-architectural or tim(cid:173)
ing modeling is performed because it is not necessary to
observe software error derating.
Our experiments were performed using the SPEC
CINT2000 benchmark suite, running each benchmark with
its full reference inputs. To ensure that the behaviors that
we observed were not merely due to the idiosyncrasies of
a particular compiler, we performed our experiments us(cid:173)
ing two compilers and three optimization levels: fullyopti(cid:173)
mized OSF binaries, and binaries generated with gcc with
no (-00), standard (-02), and aggressive (-03) optimiza(cid:173)
tions. We used the OSF binaries that are provided with Sim(cid:173)
pleScalar which were compiled using the DEC C compiler
under OSF/l V4.0 operating system for peak performance,
using at least the -04 optimization level. The gcc bina(cid:173)
ries were compiled on Linux using gcc 4.0.2. Only nine
of the gcc-compiled benchmarks run to completion; gap,
perl, and vpr fail to complete due to unsupported system
calls invoked within GNU glibc. In Section 5, we use the
LLVM [1] compiler v1.8 in experiments where we add an
additional compiler pass to collect live register information.
3.2. Fault Injection
To achieve a representative set of fault injection experi(cid:173)
ments without having to simulate the whole benchmark, we
selected 100 evenly distributed points in the program. At
each of these points we perform a series of fault injection
experiments in each of the first 100 instructions, giving us
10,000 dynamic instructions to study from each benchmark
input. For each of these 10,000 instructions, we perform
one fault injection trial for each bit of: the 32-bit instruction
word, each of the 64-bit input register values (up to two),
and the 64-bit output register value (if any), resulting in up
to 224 trials per dynamic instruction. Each trial consists of
flipping a single bit, as we assume architectural manifesta(cid:173)
tion of faults to coincide with the results by Cha et al. [7].
Bit flips in the instruction change the opcode, register spec(cid:173)
ifiers, and immediate values based on the instruction encod(cid:173)
ing. Bit flips to register inputs are as if they were errors
in reading the value; the copy stored in the register file is
unchanged.
In contrast, bit flips to the instruction output
directly affect the value stored in the register file.
To evaluate a fault injection trial, two parallel execu(cid:173)