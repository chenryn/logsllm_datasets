RAT木马。攻击过程中下载的多个中间文件都进行了代码变形、数据加密和垃圾数据填充，这样处理后的文件能在很大程度上绕过Web应用防火墙、入侵检测系统等网络安全设备的检测。
我们将最新攻击的整个流程绘制成如图16所示：攻击者将带有恶意附件的钓鱼邮件发送给美国阿拉巴马州亨茨维尔市公共事业公司“Huntsville
Utilities”的员工，钓鱼成功后，附件中的恶意宏代码便会执行；恶意宏代码执行后会解密执行一个Powershell脚本，该脚本是一个下载器，其会从远程服务器下载一个恶意VBS文件；VBS文件执行后，同样会解密执行一个Powershell脚本，该脚本也是一个下载器，其会从远程服务器下载一个后缀为“.jpg”的恶意文件；该恶意文件并不是一个jpg格式的图片文件，而是经过字符变形和垃圾代码填充的Powershell脚本文件，该脚本文件执行后，会解密出内嵌在其中的两个PE文件并执行它们。这两个PE文件一个是Remcos
RAT木马，一个是用C#编写的经过混淆的Dll注入器文件，负责把Remcos
RAT木马注入到“RegAsm.exe”进程中执行。可以看到，攻击者使用了多阶段的嵌套下载和解密执行将木马植入到了受感染主机上，木马上线后会从攻击者控制的C&C服务请求指令来执行恶意操作。
图16 恶意攻击流程图
#### 3.1 诱饵邮件投递
此次攻击始于一封将来源伪装成“美国银行”的钓鱼邮件（见图17），此邮件是发送给美国阿拉巴马州亨茨维尔市公共事业公司“Huntsville
Utilities”的员工的。整个邮件看起来像是一个付款通知账单邮件：邮件以“美国银行美林付款通知”为主题，“电子转账付款账单-00130820”为诱饵文档名称，正文中简单描述了账单的支付方式和需要支付的金额，在邮件的末尾还提示这封邮件是发送给该公司的应收账款部门。
图17 钓鱼邮件
该诱饵文档被伪装成该公司8月份的付款通知账单，从诱饵文档打开后的内容（如图18所示）可以看到，整个excel表格仅包括一张图片，图片中的文字大意为：要想看到被保护的内容，需要启用宏选项。一旦受害者被诱骗启用了宏选项，恶意宏代码便会立即执行。
图18 恶意的邮件附件
#### 3.2 恶意宏代码执行
恶意代码被加密保存在诱饵文档excel表格的D500单元格的批注中（见图19）。在以往的此类攻击中，攻击者大多将恶意代码或数据存放在excel电子表格的单元格内容中隐藏显示,或者隐藏到VBA工程中的用户控件里，也有黑客将恶意代码放入文档的内建属性中。而在本次攻击中，攻击者将恶意代码加密存放在了电子表格空白单元格的批注内容里，这种恶意代码隐藏方式在此类攻击中还是首次出现。
图19 以文档批注形式存放的恶意代码
恶意宏代码执行后，会首先使用“.ActiveSheet.Range("D500").Comment.Text”函数读取D500单元格批注里面的恶意代码，然后调用自定义的“Reverse”函数逆序排列该恶意代码，最后调用自定义函数“eZoKg”启动Powershell进程执行该恶意代码（见图20）。
图20 恶意宏代码
最后执行的恶意代码是图21所示的一个Powershell脚本，不过该脚本执行的命令做了字符混淆处理。脚本在执行时先是将混淆过的字符串转换成字符数组，然后调用Reverse函数逆序排列该字符数组，再将逆序后的字符数组拼接成字符串，后面的操作是将字符串中的填充字符‘&’去掉再转化成16进制编码。经过这样的几步处理，执行命令就被还原出来了（见图22），从图22中我们可以看到该Powershell脚本实际上是一个下载器，它会从远程服务器上下载一个VBS文件来执行。
图21 执行的恶意Powershell脚本
图22 还原后的执行命令
#### 3.3 恶意VBS文件执行
托管在远程服务器的VBS文件的部分内容见图23，可以看到该文件经过了字符混淆和代码加密。
图23 VBS文件
VBS文件经过字符去混淆和代码解密，最终执行的Powershell见图24，我们可以看到这段Powershell也是一个下载器。其先是使用ping
google.com的方式确定自身所在的受感染主机能够正常联网，然后调用Net.WebClient.DownloadString函数从远程服务器“http://185.172.110.214/dkhh/wit.jpg”上下载一个名为“wit.jpg”的文件。
图24 去混淆和解密后到Powershell
我们抓包得到的“wit.jpg”文件的部分内容见图25。可以看到文件数据经过了字符变形和混淆处理，这在很大程度上能够绕过Web应用防火墙、入侵检测系统等网络安全设备的检测，同时也增加了安全研究人员的分析成本。
图25 抓包得到的服务器返回的恶意代码
#### 3.4 恶意“jpg”文件执行
名为“wit.jpg”的文件并不是一个jpg格式的图片文件，而是经过字符编码和加密混淆后的Powershell脚本文件。图26是该脚本文件还原后的部分内容，我们可以看到，经过混淆和变形后的可执行PE文件数据是以字符串的形式存储在脚本代码中的。脚本执行后会解密出内嵌在其中的两个PE文件并执行它们。这两个PE文件一个是Remcos
RAT木马，另一个是C#编写的经过混淆的Dll注入器文件，其会将Remcos RAT木马注入到“RegAsm.exe”进程中执行，我们下文将对Remcos
RAT木马进行分析说明。
图26 还原后的Powershell脚本文件
#### 3.5 Remcos RAT木马分析
自2016年在暗网上的地下黑客社区开始出售以来，Remcos
RAT非常活跃，基本上每个月都会发布两个左右的新版本。其具有键盘记录、屏幕记录、调用摄像头和麦克风进行录像录音、远程执行Shell命令、远程执行脚本、上传文件以及下载文件等功能。该工具由一家名为Breaking
Security的公司发行出售，图27是Remcos RAT的官网界面。通过公开的信息可以发现，其已被黑客频繁地使用在各种攻击活动中。
图27 Remcos RAT的官网界面
此次攻击活动释放的Remcos RAT版本为Remcos Professional
2.6.0(见图28),该版本发布于2020年7月10日，目前Remcos RAT官网上最新的版本为2.7.1，发布于2020年9月14日。
图28 Remcos RAT的版本信息
Remcos
RAT木马将其“工作”需要用到的配置信息包括C&C服务器地址、网络通信加密的key、互斥对象名、licence编号，以及和截屏、录音操作等相关的其他信息，使用RC4算法加密存储在其PE资源名为“SETTINGS”的数据块中（见图29）。数据块由三部分组成，分别是key的长度、key和密文数据，图29中第一个字节0x66为key的长度，紧接着被选中蓝底的数据为key，最后是密文数据。
图29 资源中加密存储的配置信息
Remcos RAT木马运行后会提取并使用RC4算法解密这些配置信息，图30是Remcos RAT木马提取SETTINGS数据的代码部分。
图30 提取SETTINGS数据的代码部分
RC4算法中sbox的初始化操作代码见图31。
图31 RC4算法的sbox初始化操作代码
解密出来的配置信息如图32所示，配置信息包括C&C服务器地址“boyflourish.myq-see.com:46617”、网络通信加密的key“C4C3E3D83BE2B509C679E52AD999FFF8”、互斥对象名“Buddha-UL8D7Q”、licence编号“DCB9C483DA3351BB8231C303CAA1CA0F”以及和截屏、录音操作等相关的一些其他信息。
图32 解密出来的配置信息
Remcos RAT木马会创建互斥体对象“Buddha-UL8D7Q”（互斥对象名称来自上面解密出的配置文件），以保证受感染主机当前只运行一份自身的实例（见图33）。
图33 创建互斥体
Remcos
RAT木马会启动键盘记录线程来窃取受感染主机的键盘输入信息和剪切板数据。木马将窃取的这些信息保存在本地文件“%Appdata%\remcos\logs.dat”中。在以前的有些版本中logs.dat文件是加密的，不过在此次我们分析的这个版本中log.dat文件没有加密，数据的记录格式和之前的版本基本类似（如图34），木马后续会将收集到的这些记录日志发送到C&C服务器。
图34 记录日志文件内容
Remcos
RAT木马会收集受感染主机设备信息用于上线。收集的设备信息包括：受感染主机的用户名、CPU信息、操作系统名称、键盘记录日志完整路径、木马的完整路径和版本等等（如图35所示），木马会将收集到的以上信息加密发送到攻击者控制的C&C服务器进行上线，通信使用的加密算法为同为RC4，密钥为“C4C3E3D83BE2B509C679E52AD999FFF8”（来自前文解密出的配置文件）。
图35 收集感染主机信息上线
成功上线后，木马则等待C&C服务器下发控制指令以执行恶意功能。木马解析C&C服务器控制指令的代码片段见图36。这些控制指令的功能包括执行文件管理、进程管理、键盘记录、屏幕记录、调用摄像头和麦克风进行录像录音、远程执行Shell命令、远程执行脚本、上传下载文件，注册表操作、安装卸载远控等,我们将主要的控制命令和功能描述列在表4中。
图36 木马解析控制指令的代码片段
控制命令 | 功能描述  
---|---  
0x01 | 获取受感染主机最顶端程序标题  
0x03 | 收集受感染主机所有已安装软件的相关信息，包括其软件供应商信息、版本信息、安装的路径信息、安装的日期等  
0x04 | 从给定的URL下载文件并执行  
0x05 | 接收从C&C服务器发送的文件并执行  
0x06 | 收集受感染主机所有正在运行的进程信息  
0x07 | 结束指定的进程  
0x08 | 枚举所有的窗口并获取窗口标题  
0x09 | 关闭指定的窗口  
0x0A, 0x0B, 0xAD | 显示/隐藏指定的窗口  
0x0C | 获取指定窗口的PID  
0x0D | 执行指定的命令行命令  
0x10 | 处理jpeg数据  
0x11 | 关闭socket  
0x12 | 收集键盘信息  