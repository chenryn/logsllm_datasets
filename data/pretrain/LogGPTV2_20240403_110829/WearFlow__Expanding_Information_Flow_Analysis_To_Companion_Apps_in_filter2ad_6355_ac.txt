### Ecosystem Integration and Data Flow Analysis

To enhance the ecosystem as a whole, we integrate callbacks from the Wear OS libraries into our model. This enables data flow analysis across devices (see Section 2.3). Notably, we incorporate sources and sinks that are not detected by state-of-the-art, well-maintained Android projects [2, 3]. More importantly, we introduce data wrappers to capture how data flows propagate through objects in the Data Layer. Existing data flow frameworks like FlowDroid [3] often use simplified wrapper models that only abstract the semantics of the Android framework for well-known cases, which can be a limitation.

### Call Graph Computation and Taint Tracking

The next step involves computing the call graph for both mobile and wearable apps and performing taint tracking analysis in a single context. We achieve this by initially running the taint analysis separately on each app and then matching the results using instrumented APIs as connectors between data flows. Specifically, we designate APIs that send data as sinks (wearable-sinks) and those that receive data as sources (wearable-sources). These wearable-sources and wearable-sinks are added to the list of sources and sinks.

WearFlow then reports the results of the taint tracking, focusing on data flows involving wearable-sources or wearable-sinks. It is important to note that while taint analysis may still detect data flows ending in non-wearable sinks, these are irrelevant to the matching step. Our approach is agnostic to the underlying method used to compute data flows. For implementation details, refer to Section 6.1.

### Matching Analysis

The final step in the process is to match exit points with entry points, specifically pairing wearable-sinks with wearable-sources. We use three values for matching: channel path, API method, and key. If the path or key cannot be calculated during context extraction, we use a wildcard value that matches any value. To match API methods, we have developed a semantic table that provides information to pair wearable-sinks with their corresponding wearable-sources. A summary of this table is provided in Table 2, with the full list available in the project repository.

### Evaluation and Results

We evaluate WearFlow against other Android information flow analysis tools and perform a large-scale analysis of 3.1K Android APKs with wearable components to identify sensitive data leaks. Our evaluation uses a specifically crafted set of apps that present different data exfiltration cases using the Data Layer API. The experiments were conducted on a machine with 24 cores Intel Xeon CPU E5-2697 v3 @ 2.60GHz and 32 GB of memory.

#### Implementation

WearFlow leverages the Soot framework [29] for de-obfuscation, context extraction, and app instrumentation (Phases 2, 3.1, and 3.3). Our implementation uses FlowDroid [3] with an 8-minute timeout per app for information flow analysis (Phase 4) and Violist [19] for string analysis (Phase 3.2). We chose FlowDroid and Soot because previous works report they provide a good balance between accuracy and performance on real-world apps [6, 24, 25]. We customized FlowDroid for wearable apps by adding callbacks from the Wear OS libraries and extending the SuSi [2] sources and sinks. Additionally, we optimized Violist to reduce execution time while maintaining accuracy for the relevant APIs. Overall, WearFlow adds approximately 6,000 lines of code to these frameworks. The implementation is open-source and available at https://gitlab.com/s3lab-rhul/wearflow/.

#### Evaluation Results

Given the lack of a test suite that includes Mobile-Wear information flows for Android, we created WearBench. WearBench consists of 15 Android apps with 23 information flows between the mobile app and the wearable companion, 18 of which are sensitive. Our test suite covers all APIs from the Data Layer and includes challenges such as field sensitivity, object sensitivity, and branch sensitivity for listeners.

Our test suite is inspired by Droid-Bench and ICC-Bench, which are standard benchmarks for evaluating data flow tools. However, these benchmarks focus on taint analysis and some Inter-App communication cases using ICC methods. In contrast, we evaluate Inter-App communication between mobile and wearable apps using the Data Layer API. Therefore, we compare our results against FlowDroid, adding the Data Layer APIs as sources and sinks, and looking for matches. We run FlowDroid with a context-sensitive algorithm twice: first with high precision (access path length set to 3) and then with reduced precision (access path set to 1).

Table 3a shows the results of our evaluation against the test suite. WearFlow detects all 18 exfiltration attempts with two false positives, stemming from a branching sensitivity issue in FlowDroid. Conversely, FlowDroid with high precision detects only 6 out of 18 exfiltrations, limited to the MessageClient API. Reducing the precision, FlowDroid identifies matches with MessageClient and DataClient but fails to identify sensitive flows with the ChannelClient API, producing 12 false positives.

These results demonstrate that WearFlow significantly outperforms FlowDroid, highlighting the benefits of our modeling, instrumentation, and matching analysis in improving information flow analysis in wearable applications.

### Analysis of Real-World Apps

We used WearFlow to search for potential data leaks in approximately 3.1K real-world APKs available in the Google Play Store (downloaded from AndroZoo [1]). From an initial set of 8K APKs, around 5K were standalone (only wear) APKs, and 3.1K included both mobile and wearable components. We executed WearFlow against this set, which corresponds to 220 different package names. Table 3b summarizes the results, noting that the dataset contains multiple versions of the same app.

Figure 4 provides a summary of the different APIs used as exit/entry points of sensitive data flows. Although the ChannelClient API was found in the dataset, it was not used to send sensitive information. WearFlow identified sensitive information flows including the transmission of device contacts, location, activities, and HTTP traffic. In several instances, sensitive data ended up in device logs (17% of overall sinks) or SharedPreference files (20%).

WearFlow found 4,896 relevant data flows in the analyzed APKs, with 388 relating to Mobile-Wear sensitive information flows in 6 apps (or 50 APKs, considering all versions and platforms). The results indicate that 70% of the flows are from the mobile to the wear platform, while 30% are from wear to mobile.

### Applicability

We also evaluated the performance of WearFlow in handling obfuscation and its runtime overhead.

**Obfuscation:** WearFlow detected 282 obfuscated APKs in the dataset, successfully deobfuscating all of them. We found 71 data flows using the Data Layer within these APKs. WearFlow did not find relevant APIs in 651 APKs, possibly due to more complex obfuscation techniques. For non-obfuscated APKs, WearFlow instruments 4.8 components on average per APK, with 48% being DataClient APIs, 51% MessageClient APIs, and less than 1% ChannelClient APIs.

**Running Time:** Running WearFlow on the real-world dataset took 115 hours, analyzing over 95% of the APKs before the 8-minute timeout. The average time per APK is 3.1 minutes, with most wearable apps evaluated in less than 1 minute. The time distribution per phase is as follows: pre-processing 13%, string analysis 9%, deobfuscation and instrumentation 2%, and data flow analysis 76%.

WearFlow failed to complete the analysis for a small number of APKs due to unexpected bytecode, errors parsing APK resources, or extended timeouts. Overall, WearFlow extracted data flows for an additional 282 Mobile-Wear APKs, which would not have been possible without the deobfuscation phase. The deobfuscation phase only takes 2% of the running time.

### Case Studies

This section describes specific issues found by WearFlow in relation to the threat model presented in Section 3.

**Companion Leak:** We studied the case of Wego (com.wego.android), a travel app with over 10 million downloads. We found a sensitive flow starting on the watch with the source `getLatitude()` from the Location API, sent to the mobile app via the MessageClient API using the path "request-network-flights." The mobile app then sends this data through a URL using the `HttpURLConnection` object and writes it to the file system using `java.io.OutputStream`. Both the wearable and mobile declare the location permission in the Manifest, but this alone does not comply with guidelines. The wear app must send the user to the phone to accept the permission, showing that the permission system can be bypassed using Data Layer APIs.

**Permission Re-delegation:** Venom (fr.thema.wear.watch.venom) is a Watch Face customized for a watch user interface. The mobile version uses the `android.database.Cursor` class to store sensitive information such as call history and unread messages in a database. The app aggregates this information in a DataItem and synchronizes it with the wearable app, which does not declare the relevant permissions. The string analysis was crucial in uncovering the type of information retrieved from the database and tracing it back to API sources related to sensitive information.

**Sensitive Data Exposed:** Finally, we observed evidence of apps exposing sensitive data through various sinks, including the Android Broadcast system and Shared Preferences. For example, Talent (il.talent.parking), used for car parking, reads data related to the last parking place and its duration from a database and synchronizes it with the watch using a DataItem. The wearable app then writes the data to Shared Preferences. Another example is com.mobispector.bustimes, which shows bus and tram timetables and has over 4 million downloads. The app reads data from an HTTP response, sends it to the wearable via the MessageClient API, and finally executes a system Broadcast, exposing the content of the HTTP response.

These cases highlight how developers leverage the Data Layer API to send sensitive information. While it is unclear whether these cases intentionally use Google Play services to hinder the detection of data leakages, WearFlow effectively exposes bad practices that can pose a threat to security and privacy.

### Limitations

This section outlines the limitations of our work, which may arise from WearFlow's implementation or the dataset used.

**Data Transfer Mechanisms:** WearFlow inherits the limitations of static analysis, failing to match data flows with native code, advanced reflection, or dynamic code loading. However, it can be used with other frameworks [22, 31] to improve accuracy.

**Obfuscation:** WearFlow considers obfuscation in the analysis of apps. According to a large-scale study of obfuscation in Android [17], there are four trivial and seven non-trivial techniques commonly used. WearFlow's type-signature deobfuscator is resilient to all trivial techniques and five non-trivial ones but fails to deobfuscate APKs with renamed classes or packages and reflection. As mentioned, WearFlow did not find relevant APIs in 20% (651) of the APKs, many of which correspond to APKs with these obfuscation techniques.