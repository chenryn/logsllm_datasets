### 使用PROPFIND请求传输任意数据

#### PROPFIND 请求示例
首先，让我们看一个典型的PROPFIND请求示例：

```http
PROPFIND / HTTP/1.1
Connection: Keep-Alive
User-Agent: Microsoft-WebDAV-MiniRedir/10.0.14393
Depth: 0
translate: f
Content-Length: 0
Host: 10.211.55.2
```

需要注意的是，在此阶段，客户端硬盘上没有任何实际文件被传输或缓存。

如果WebDAV客户端需要获取远程目录中所有文件的列表，它会发出另一个PROPFIND请求，其中`Depth`设置为1：

```http
PROPFIND / HTTP/1.1
Connection: Keep-Alive
User-Agent: Microsoft-WebDAV-MiniRedir/10.0.14393
Depth: 1
translate: f
Content-Length: 0
Host: 10.211.55.2
```

WebDAV服务器将返回当前目录中存在的所有文件的XML格式列表及其元数据信息（如大小、创建日期等）。例如：

```http
HTTP/1.1 207 Multi-Status
Server: nginx/1.6.2
Date: Thu, 07 Sep 2017 10:27:23 GMT
Content-Length: 8084
Proxy-Connection: Keep-Alive
Connection: Keep-Alive
/
2017-09-07T10:27:23Z
filename
4096
Thu, 07 Sep 2017 10:27:23 GMT
HTTP/1.1 200 OK
[...]
```

此时，仍然没有实际文件被传输到客户端硬盘上。

当WebDAV客户端想要访问特定文件时，它会发送一个GET请求来实际传输文件：

```http
GET /calc.hta HTTP/1.1
Cache-Control: no-cache
Connection: Keep-Alive
Pragma: no-cache
User-Agent: Microsoft-WebDAV-MiniRedir/10.0.14393
translate: f
Host: 10.211.55.2
```

WebDAV服务器将以包含请求文件的标准HTTP响应进行回复。此时，文件会被传输并缓存在客户端驱动器上的某个位置（例如：`C:\Windows\ServiceProfiles\LocalService\AppData\Local\Temp\TfsStore\Tfs_DAV`）。

#### 仅使用PROPFIND请求传输数据

我们希望实现的目标是仅使用PROPFIND请求来传输任意数据。以下是具体步骤：

1. **文件名作为信息载体**：在列出目录中的文件时，文件名本身可以携带信息。
2. **文件数量**：目录中可以有尽可能多的文件（可能会有某些限制，但通常可以处理）。
3. **文件名长度**：每个文件名可以支持大约250个字符。
4. **字符限制**：文件名只能支持一定数量的字符（例如，`/`和`<`不支持）。

基于这些特性，我们可以设计以下方法来传递Payload：

1. **Base64编码**：对要传递的数据进行Base64编码。
2. **字符替换**：将文件名中不支持的字符替换为允许的字符（例如，用`_`替换`/`）。
3. **分块**：将编码后的字符串切成250个字符的块。
4. **目录名**：将这些块作为目录名。

在远端，我们需要执行以下操作：

1. **列出虚拟目录**：只列出虚拟目录上的文件（不进行GET请求）。
2. **重组块**：将这些块重新组合起来。
3. **字符替换**：将替换的字符恢复回来。
4. **解码**：将Base64结果解码回初始Payload。

这种方法虽然会带来性能和通信开销，但可以避免实际文件传输带来的问题。

#### 实现示例

为了实现这一点，我编写了一个简单的Python脚本，该脚本充当一个非常简约的WebDAV服务器，仅支持OPTIONS和PROPFIND请求。这个脚本足够满足我们的需求。通过提供有效载荷文件和Base64编码类型作为参数，可以在端口80上启动WebDAV服务器。

在客户端，有许多方法可以发送适当的请求。我创建了一些示例，包括VBA宏和Powershell脚本，它们都依赖于WebClient服务。这样做的好处包括：

1. **规避检测**：网络外围防御系统（如IPS和杀毒软件）不会检测到传输的Payload。
2. **无磁盘写入**：没有文件被写入WebDAV客户端缓存中，即磁盘上。

WebDav传输工具和一些客户端stager示例托管在此gist页面上：
[https://gist.github.com/Arno0x/5da411c4266e5c440ecb6ffc50b8d29a](https://gist.github.com/Arno0x/5da411c4266e5c440ecb6ffc50b8d29a)

#### 完整的C&C通信

基于相同的原因，为什么只传递有效载荷？为什么不通过WebDAV PROPFIND请求/响应创建一个完整的C&C双向通信通道？

因此，我创建了一个极简代理和C&C服务器作为概念验证（PoC）。代理是一个可独立执行的.NET程序集，也可以加载到PowerShell进程中。所有通信都基于UNC路径的PROPFIND请求，利用了WebClient服务及其相关优点。

主要特点包括：

1. **Stager生成**：创建各种stager以避免杀毒软件检测，下载并加载Agent到PowerShell进程内存中。
2. **命令执行**：在v0.1版本中，代理只需执行本地“cmd.exe”子进程，并通过WebDAV PROPFIND请求代理来自C2服务器的stdin/stdout/stderr。

WebDavC2可以从这里下载：
[https://github.com/Arno0x/WebDavC2](https://github.com/Arno0x/WebDavC2)

该代理是从我的另一个工具DBC2启发的，将其功能扩展到与DBC2代理能力相当的程度相对容易。