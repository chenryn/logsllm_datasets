MalRank’s efficiency and accuracy, we decided to compare it with
the Hewlett Packard’s implementation of Belief Propagation imple-
mented in Apache Spark [2]. BP is the most popular algorithm used
throughout the literature as a graph-based inference algorithm in
the context of security, See Section 5.
Figure 6 shows the ROC plot for 9 iterations of MR vs. 9 iterations
of BP on the same knowledge graph with the same testing set.
Table 4 and 3 shows BP and MR algorithm configuration for this
experiment respectively. It is also worth to note that due to the fact
that MalRank utilizes only one class label (maliciousness) whereas
BP requires at least two class labels (maliciousness and benignness),
we decided to configure BP by initializing all unknown and benign
nodes with 0.5 as the probability of maliciousness (i.e., P(xmal) =
0.00.20.40.60.81.0False Positive Rate0.00.20.40.60.81.0True Positive Rate1st Run (AUC = 0.96)2nd Run (AUC = 0.96)3rd Run (AUC = 0.96)4th Run (AUC = 0.96)0.00.20.40.60.81.0Recall0.00.20.40.60.81.0Precision1st Run2nd Run3rd Run4th RunTable 3: MalRank configuration for the experiment
MR Parameter
xy(t) = ωo
yx(t) = 0.5
∀t ∈ Txy : ωo
∀x , smo(x) = 0.8
(cid:40)0.9,
k = 0.7
Mo(x) =
if x ∈ {Xmal}
0.0001, otherwise
Description
All edge weights initialized
with 0.5 in both directions
Prior strength (TI source trust
score) for all sources initial-
ized with 0.8
Maximizer factor for ˆω(t)
Node x initial score depend-
ing on whether it was ob-
served in TI
Table 4: Node and edge Potential configuration for Belief Propaga-
tion experiment.
Edge Potential
Node Potential
ψij(xi , xj)
xi = ben
xi = mal
xj = ben
0.5 + ϵ
0.5 − ϵ
xj = mal Node
0.5 − ϵ Malicious
0.5 + ϵ
Benign
P(mal)
0.99
0.5
P(ben)
0.01
0.5
Figure 6: ROC curve for 9 iterations of MalRank vs. Belief Propaga-
tion.
P(xben) = 0.5) and 1 for those previously known malicious nodes
(i.e., P(xmal) = 1, P(xben) = 0.5) .
As shown in the Figure 6, MR is outperforming BP not only
in terms of accuracy but also the run-time. In this regard with
almost an identical implementation in GraphX, MalRank finishes
9 iterations within 20 minutes, whereas BP takes about 2 hours.
It is worth to mention that BP memory utilization was almost 6
times higher than MalRank. It is also important to note that while
BP shows high accuracy, this is not true in all cases. The main
reason for this accuracy in this experiment is that the majority of
the testing set were nodes with a low-degree. Due to numerical
instability of multiplication, BP starts introducing errors when a
node’s degree increases. This was observed mostly in our next
experiment when investigating previously unknown threats.
4.5 Case Studies of Previously Unknown
Malicious
ROC and PR curves are useful to evaluate a threat detection tech-
nique. Nevertheless, plotting such curves requires a testing set, and
as mentioned before the choice of the testing set for our approach is
a challenging task. More specifically, our approach is not a generic
classifier that can classify any arbitrarily given entity as malicious
or non-malicious. Instead, it is an inference model designed to in-
crease the quantity and the quality of our threat intelligence by dis-
covering new malicious entities associated with previously known
malicious entities. Therefore, the most relevant validation for us is
the evaluation of previously unknown and inferred maliciousness.
In this regard, we decided to manually investigate top high Mal-
Rank scored nodes which did not have a prior (not observed in our
TI). For this manual investigation, we utilized ThreatCrowd, Virus-
Total, ThreatMiner, URLVoid, AlienVault, Robtex and MXToolBox. We
categorized our investigation depending on the type of the entity.
When investigating the top 200 Domains/IP, we were able to
find an indicator for 67% of those. While the majority of those
were result of maliciousness inference on resolvesTo relationship,
there were those high degree nodes that were scored mostly due
to mailServerFor, isInRange, and referedTo. As a result we were
able to identify large number of previously unknown malicious
domains and IPs. We were also able to identify surprising number
of pornographic domains that were ranked high. We assume this
is due to malvertising, clickjacking techniques widely adopted by
such domains.
When investigating the top high scored X.509 certificates we
were mostly capable of identifying parking domains (i.e., domains
registered solely for the purpose of displaying web advertisements
with typically no real content [27]) and rogue web hosters (e.g.,
*.000webhostapp.com whom its subdomains are regularly misused
by cybercriminals to host scams). Hence allowing us to capture
further potentially unknown malicious Domains/IPs.
We had the same observation when investigating top malicious
organization, as one of the top MalRanks scored ones, was the
organization responsible for *.000webhostapp.com. We were also
able to identify number of self signed certificates associated with an
organization which lead us to find associated Domains/IPs which
were in fact classified as malicious by VirusTotal.
We didn’t investigate MAC address, ASN nor User Agent (UA) as
the majority of nodes did not come up with high scores (less than
0.2). This was reasonable considering we had only access to two
days of data (i.e., low chance of major outliers)
Lastly, we investigated a set of malicious domains which was
identified by the enterprise’s SOC analysts to be associated with mal-
ware beaconing on a number of clients. More specifically these were
domain starting with imp (i.e., ^imp\\..+) such as imp.searchlff.com12.
When we checked the MalRank score of these previously unknown
malicious domain, we noticed that the algorithm scored them as
malicious (0.6 - 0.7) due to association with TI (through IP address
and range sharing).
Interestingly, when we investigated the BP score for the above
findings, we could verify our initial intuition, i.e., BP’s limitation
to infer maliciousness for high-degree nodes with unbiased labeled
12https://www.threatcrowd.org/domain.php?domain=imp.searchlff.com
neighbours. In this regard, the majority above previously unknown
malicious entities were scored between 0.51-0.56 which makes it
susceptible to missclassification by BP.
In summary, although we were unable to validate all high score
nodes, according to our investigations MalRank proved to be an
effective method to increase the quality and the quantity of threat
intelligence. While one could argue, that these were low-hanging-
fruits, we still see the value in our approach. Furthermore, It is
also worth to note that the SIEM logs used within this research
were from an international enterprise that already utilizes various
security measures and practices (e.g., IDS, AV, Proxy/DNS black-
listing, signature checking, and etc.) therefore making it rare to
encounter various threats, yet MalRank was capable of detecting
valuable previously unknown malicious entity, i.e., the detection of
a potential malware beaconing case.
It is worth to note that, throughout our investigation, we came
across a number of nodes and cases in which the nodes were scored
high (malicious) but we could not validate the maliciousness as it
seemed harmless (e.g., parked domains, link farms, and other dubi-
ous domains/IPs). Even though such entities seemed non-malicious
(FPs), we argue that blocking them at the enterprise level should not
have a drastic effect, as the main reason for their false classification
was having a number of association with high scored nodes.
5 RELATED WORK
This section provides an overview of the most relevant and influen-
tial work in the context of graph-based inference for cybersecurity.
Chau et al. [11] introduce Polonium as one of the first and ar-
guably the most successful works that tackles the problem of mal-
ware detection using large-scale graph inference with the intuition
that good applications are typically used by many users, whereas,
unknown (i.e., potentially malicious) applications tend to only ap-
pear on few computers. The authors achieve this by running an
adopted version of belief propagation on an undirected, unweighted
bipartite machine-file graph. In similar research, Tamersoy et al.
[46] propose Aesop, which tackles the same problem using locality
sensitive hashing to measure the similarity between files to even-
tually construct a file-file bipartite graph and running BP to infer
files’ goodness based on its neighbors.
Manadhata et al. [32] address the problem of detecting mali-
cious domains by using enterprise HTTP proxy logs to construct a
host-domain bipartite graph capturing workstations’ connection
to external domains, then running BP to discover malicious do-
mains based on a set of seed malicious nodes. The intuition in this
research is that infected hosts are more likely to visit various mali-
cious domains whereas user behavior on benign hosts should result
in benign domain access.
Khalil et al. [23] address the same problem using passive DNS
data focusing on a domain-IP bipartite graph with the intuition
that a domain/IP is malicious if it has strong association to a pre-
viously known malicious domain/IP. While the authors evaluate
BP as part of their evaluation, their main proposal takes a differ-
ent approach. In this regard, the authors formulate the problem
as a similarity measure between a pair of domains based on the
number of IPs shared to derive a domain-domain similarity graph
and use a path-based algorithm to infer a maliciousness score for
each domain according to their topological connection to known
malicious domains. In a later research Khalil et al. [24] discuss the
limitations of their previous work [23] which is the computational
complexity leading them to adopt belief propagation again on an
adjusted graph while emphasizing on ASN.
Zou et al. [50] takes a similar approach focusing on DNS logs.
In this regard, the authors focus on three main relationships ex-
tractable from DNS logs: 1) connection request from an enterprise’s
workstation to a domain, 2) resolves to relationship (DNS record
type A) which indicates a domain resolving to an IPv4 address, and
3) CNAME DNS RRs which indicates a domain being an alias for
another domain.
Najafi et al. [35] also tackle the problem of malicious domain/IP
detection using BP on a property graph focusing on domain to IP
resolution (DNS record type A), domain to domain referral (proxy
log referer header) and sub-domain relationship.
Other works include, Huang et al. [20] investigating the con-
nection between domain, IP, and URL. Oprea et al. [36] addressing
the early-stage APT detection using BP on host-domain graph ex-
tracted from proxy logs. Rahbarinia et al. [41] proposing Segugio
to detect new malware-control domains based on DNS traffic anal-
ysis with a very similar intuition to Manadhata et al. [32]. Mishsky
et al. [34] explore the same issues with the slightly different an-
gle. Simeonovski et al. [43] approach the problem using taint-style
techniques for propagation of labels in a property graph built from
nodes consisting of domains, organizations, and ASNs. Finally, Peng
et al. [39] build a domain-domain graph using DNS CNAME RRs
with the intuition that domains connected by DNS CNAME RRs
share intrinsic relations and are likely to be in a homophilic state.
While the majority of the previous works focus on single edge
type isolated (i.e., a bipartite graph), we construct a comprehensive
knowledge graph which incorporates various types of nodes and
edges. To the best of our knowledge, this is the first work exploring
knowledge graphs at this scale within the security domain. Fur-
thermore, in contrast to other works, while we evaluate BP, we
introduce a much more effective and efficient algorithm that allows
us to better infer maliciousness in knowledge graphs.
6 LIMITATION AND FUTURE WORK
The biggest limiting factor in our work was the quality of the
threat intelligence which was also the main factor for the high false
positive rate. MalRank is designed to infer maliciousness using
a small set of previously known malicious nodes as seeds. These
seeds are expected to be validated TI. However, the majority of the
publicly available TI sources are low quality with a large number of
false positives, and inference based on false TI results in further false
positives. Although MalRank has a mechanism to incorporate the
quality of threat intelligence, throughout our experiments we did
not have any approach to rate the sources of the TI. In this regard,
the majority of our false positives were due to bad TI ingestion
from a source. In our future work, we would like to utilize a better
quality TI (perhaps at the cost of API limitation) and introduce an
approach to evaluate our TI sources to derive trust scores for each
source.
Despite the algorithms capability to support directional edge
weights, throughout our experiments, we decided to rely on naive
expert knowledge for edge weights by specifying all edges as bidi-
rectional with 0.5 as their weight on each direction. Although,
MalRank has a mechanism to adjust the weights within each it-
eration (depending on the source maliciousness score), therefore
allowing us to not worry too much about the exact weights, it is
expected that one defines the initial edge weights with more pre-
cision. However. deciding the initial edge weights is an extremely
challenging task which we would like to explore in our future work.
We would also like to explore MalRank algorithmic improve-
ments. More specifically, first, finding the closed formula in terms
of matrix operation which should improve its efficiency and better
reason about its convergence. Second, expansion to support incre-
mental updates in streaming mode. Last experimenting with other
aggregator functions such as LSTM and Pooling [18] as opposed to
weighted average.
It is also interesting to combine our approach with previous
works that focused on local features. In this regard, one can utilize
those local features to derive a prior (initial score) for each node
(e.g., 0.5) and then run MalRank and look back at the nodes. If the
MR score was increased further, one can conclude maliciousness
with a higher confidence as the node was marked malicious based
on not only its local features but also global. Alternatively, one can
also use MalRank score as a local feature to combine with other
features to train another ML classifier to further improve detection
accuracy. We expect that one could drastically reduce the false
positive rate by ensembling MalRank with other approaches.
Lastly, we only covered three sources of event logs within SIEMs,
however, today’s SIEMs collect much more than just proxy, DNS,
and DHCP. It would be also interesting to extend our knowledge
graph with more event logs and perhaps more OSINT (e.g., regis-
trar). In that case, it would also be interesting to experiment with
different graph schemas.
7 CONCLUSION
In this paper, we first introduced the intuition behind global features
for threat detection. Next, we presented the SIEM-based knowledge
graph which is constructed from entities and relationships observed
within data captured by an enterprise’s SIEM. We also covered the
most relevant OSINT and TI that can be collected at scale. We for-
mulated threat detection as a large-scale graph inference problem.
This led us to the introduction of our proposed algorithm named
MalRank, a scalable graph-based inference algorithm designed to
infer a node’s maliciousness score based on its association to other
nodes. We also discussed MalRank’s unique characteristics that sets
it apart from other graph-based inference algorithms.