    - A lot of elements: You can't archive parts of checklists, so as you complete elements, they will still be shown diverting your attention from the things you can actually act upon or making you loose time scrolling to find where they are.
    In these cases it makes sense to promote the first level of headings to subprojects:
    ```org
    * TODO Improve task management system
      * DOING Read David Allen's GTD book
        - [x] Read chapters 6 and 7
        - [ ] Read chapters 8 and 9
      * TODO up the book in the blue book
    ```
    That way when `Read David Allen's GTD book` is done, you can archive it and forget about it.
    If the project starts having many subprojects, it may help to have a section "Outcomes" to define what do you want to achieve with the project. It can be accompanied with a "Next Steps" section to add any subproject or action that doesn't match the defined outcomes, and once you finish the project, you can refile them into new projects.
* New: [The NEXT state.](gtd.md#the-next-state)
    It's useful to have a `NEXT` state to track the first next action you need to deal with for each project. That way when you open the file, you can go to the top of it and search for `NEXT` and it will lead you directly to where you need to work on.
* New: [Define how to manage tags.](gtd.md#tag-management)
    As explained in the [todo list](gtd.md#todo-list) section, you can use tags to filter your tasks. I'm using the next ones:
    - Area: Broad categories where the element falls in: `activism`, `caring`, `self-caring`, `home`, `digital services`, ...
    - Type: I like to separate the tasks that are meant to survive (`maintenance`) from the ones that are meant to improve things (`improvement`). I use these only in the big projects.
    - `:long_break:`: I'm using this tag to track the small projects that can be done in the [long pomodoro breaks](life_planning.md). Depending on the kind of long break that I need I then filter for the next tags:
      - `brainless`: If I want to keep on thinking on what I was doing, an example could be emptying the dishwasher, watering the plants, ...
      - `call`: If I want to completely change context and want some social interaction. For example call mom.
* New: [Define how to manage waiting tasks.](gtd.md#waiting-tasks)
    Waiting actions are elements that are blocked for any reason. I use the `WAITING` TODO keyword to track this state. Under each element you should add that reason and optionally the process you want to follow to unblock it.
    If you need to actively track the evolution of the WAITING status, leave it on the top of your `todo`. Otherwise set the date you want to check its status and move it to the `ticker.org` file.
* New: [Define how to use the tickler.](gtd.md#tickler-management)
    The tickler is a system where you postpone actions to a specific date, but not with a calendar mindset where the action **needs** to be done at that date. With the tickler you schedule the action to enter your inbox that day to decide what are you going to do with it.
    To implement this in orgmode you can add the `:tickler:` tag to any element that is tracked in the agenda files and once a day you can look at the day's agenda and decide what to do with the action. It's important though that whatever you do with it, you have to remove it from the agenda view in order to only keep the elements that you need to do in the day. You can follow this workflow by:
    - Opening the agenda view `gaa`
    - Go to the view of the day `vd`
    - Go to today `.`
    - Search by tickler `/tickler`
    It can also help to review in the weeklies all the ticklers of the week to avoid surprises.
    If you want to make the project go away from your `todo` or `someday` until the tickler date, move it to the `tickler.org` file.
* Correction: [Keep on defining steps to capture all your stuff.](gtd.md#capture-all-your-stuff)
    As you engage in the capturing step, you may run into one or more of the following problems:
    * An item is too big to go in the in-tray: create a post it that represents it or add it as an entry in your digital inbox. If you can, add the date too
    * The pile is too big to fit the in-tray: Create visually distinct stacks around the in-tray, even on the floor.
    * Doubts whether to trash something: When in doubt keep it, you'll decide about it later when you process the in-tray. What you need to avoid is to get caught up in deciding what to do with the element. That's going to be the next step in the process, let's go one at a time.
    * Getting caught up in cleaning and organizing: If it doesn't take that long it's fine but remember the purpose of this process and the fact that we want to finish it as soon as possible. If you discover things you want to change, add them to the in-tray.
    * If you encounter stuff that is already on lists and organizers, treat them as everything else in the "in".
    Now that the process it's clear let's start.
    Start with the space where you actually do stuff, scan the place centimeter by centimeter with the mindset defined above, check your desk, drawers, floors, walls, shelves, equipment, furniture, fixtures...Then repeat the process with each room of your home.
* New: [Explain how to capture all your mental stuff.](gtd.md#mental-gathering)
    Once you already have a nice pile of stuff, think of what has your attention that isn’t represented by something already in your in-tray and record each thought, each idea, each project or thing that occurs you and add it to the inbox.
    To assist in clearing your head, you may want to review the [following the next trigger list](gtd.md#mental-gathering), item by item, to see if you’ve forgotten anything.
* New: Define priorities from A to D.
    I feel more comfortable with these priorities:
    - `A`: Critical
    - `B`: High
    - `C`: Normal
    - `D`: Low
    This gives you room to usually work on priorities `B-D` and if something shows up that is really really important, you can use `A`. You can set this setting with the next snippet:
    ```lua
    require('orgmode').setup({
      org_priority_highest = 'A',
      org_priority_default = 'C',
      org_priority_lowest = 'D',
    })
    ```
* New: Warn against using DEADLINE.
    Using too many tasks with a `DEADLINE` will clutter your agenda. Use it only for the actions that you need to have a reminder, instead try to using [appointment](#appointments) dates instead.
    If you need a different warning period for a special task, you can specify it. For example setting a warning period of 5 days `DEADLINE: `. To configure the default number of days add:
    ```lua
    require('orgmode').setup({
      org_deadline_warning_days = 10,
    })
    ```
* Correction: [Improve how to use tags.](orgmode.md#tags)
    When you press the tag key binding you can type:
    * `tag1`: It will add `:tag1:`.
    * `tag1:tag2`: It will add `:tag1:tag2:`.
    * Press `ESC`: It will remove all tags from the item.
    Tags make use of the hierarchical structure of outline trees. If a heading has a certain tag, all subheadings inherit the tag as well. For example, in the list
    ```
    * Meeting with the French group      :work:
    ** Summary by Frank                  :boss:notes:
    *** TODO Prepare slides for him      :action:
    ```
    The final heading has the tags `work`, `boss`, `notes`, and `action` even though the final heading is not explicitly marked with those tags. You can also set tags that all entries in a file should inherit just as if these tags were defined in a hypothetical level zero that surrounds the entire file. Using a line like the next one:
    ```
     #+FILETAGS: :Peter:Boss:Secret:
    ```
* New: [How to use links.](orgmode.md#links)
    One final aspect of the org file syntax are links. Links are of the form `[[link][description]]`, where link can be an:
    * [Internal reference](orgmode.md#internal-document-links)
    * [External reference](orgmode.md#external-links)
    A link that does not look like a URL refers to the current document. You can follow it with `gx` when point is on the link (Default `oo`) if you use the next configuration.
    ```lua
    org = {
      org_open_at_point = 'gx',
    }
    ```
* New: [Internal document links.](orgmode.md#internal-document-links)
    Org provides several refinements to internal navigation within a document. Most notably:
    * `[[*Some section]]`: points to a headline with the name `Some section`.
    * `[[#my-custom-id]]`: targets the entry with the `CUSTOM_ID` property set to `my-custom-id`.
    When the link does not belong to any of the cases above, Org looks for a dedicated target: the same string in double angular brackets, like `>`.
    If no dedicated target exists, the link tries to match the exact name of an element within the buffer. Naming is done, unsurprisingly, with the `NAME` keyword, which has to be put in the line before the element it refers to, as in the following example
    ```org
     #+NAME: My Target
    | a  | table      |
    |----+------------|
    | of | four cells |
    ```
    Ultimately, if none of the above succeeds, Org searches for a headline that is exactly the link text but may also include a `TODO` keyword and tags, or initiates a plain text search.
    Note that you must make sure custom IDs, dedicated targets, and names are unique throughout the document. Org provides a linter to assist you in the process, if needed, but I have not searched yet one for nvim.
* New: [How to use properties.](orgmode.md#properties)
    Properties are key-value pairs associated with an entry. They live in a special drawer with the name `PROPERTIES`. Each property is specified on a single line, with the key (surrounded by colons) first, and the value after it:
    ```org
    * CD collection
    ** Classic
    *** Goldberg Variations
        :PROPERTIES:
        :Title:     Goldberg Variations
        :Composer:  J.S. Bach
        :Publisher: Deutsche Grammophon
        :NDisks:    1
        :END:
    ```
    You may define the allowed values for a particular property `Xyz` by setting a property `Xyz_ALL`. This special property is inherited, so if you set it in a level 1 entry, it applies to the entire tree. When allowed values are defined, setting the corresponding property becomes easier and is less prone to typing errors. For the example with the CD collection, we can pre-define publishers and the number of disks in a box like this:
    ```org
    * CD collection
      :PROPERTIES:
      :NDisks_ALL:  1 2 3 4
      :Publisher_ALL: "Deutsche Grammophon" Philips EMI
      :END:
    ```
    If you want to set properties that can be inherited by any entry in a file, use a line like:
    ```org
     #+PROPERTY: NDisks_ALL 1 2 3 4
    ```
    This can be interesting for example if you want to track when was a header created:
    ```org
    *** Title of header
       :PROPERTIES:
       :CREATED: 
       :END:
    ```
* New: [How to do Agenda searches.](orgmode.md#agenda-searches)
    When using the search agenda view you can:
    * Search by TODO states with `/WAITING`
    * Search by tags `+home`. The syntax for such searches follows a simple boolean logic:
      - `|`: or
      - `&`: and
      - `+`: include matches
      - `-`: exclude matches
      Here are a few examples:
      - `+computer&+urgent`: Returns all items tagged both `computer` and `urgent`.
      - `+computer|+urgent`: Returns all items tagged either `computer` or `urgent`.
      - `+computer&-urgent`: Returns all items tagged `computer` and not `urgent`.
      As you may have noticed, the syntax above can be a little verbose, so org-mode offers convenient ways of shortening it. First, `-` and `+` imply `and` if no boolean operator is stated, so example three above could be rewritten simply as:
      ```
      +computer-urgent
      ```
      Second, inclusion of matches is implied if no `+` or `-` is present, so example three could be further shortened to:
      ```
      computer-urgent
      ```
      Example number two, meanwhile, could be shortened to:
      ```
      computer|urgent
      ```
      There is no way (as yet) to express search grouping with parentheses. The `and` operators (`&`, `+`, and `-`) always bind terms together more strongly than `or` (`|`). For instance, the following search
      ```
      computer|work+email
      ```
      Results in all headlines tagged either with `computer` or both `work` and `email`. An expression such as `(computer|work)&email` is not supported at the moment. You can construct a regular expression though:
      ```
      +{computer\|work}+email
      ```
    * [Search by properties](https://orgmode.org/worg/org-tutorials/advanced-searching.html#property-searches): You can search by properties with the `PROPERTY="value"` syntax. Properties with numeric values can be queried with inequalities `PAGES>100`. To search by partial searches use a regular expression, for example if the entry had `:BIB_TITLE: Mysteries of the Amazon` you could use `BIB_TITLE={Amazon}`
* New: [How to use Capture in orgmode.](orgmode.md#capture)
    Capture lets you quickly store notes with little interruption of your work flow. It works the next way:
    - Open the interface with `;c` (Default `oc`) that asks you what kind of element you want to capture.
    - Select the template you want to use. By default you only have the `Task` template, that introduces a task into the same file where you're at, select it by pressing `t`.
    - Fill up the template.
    - Choose what to do with the captured content:
      - Save it to the configured file by pressing `;w` (Default `c`)
      - Refile it to a file by pressing `;r` (Default `or`).
      - Abort the capture `;q` (Default `ok`).
    ```lua
    mappings = {
      global = {
        org_capture = ';c',
        },
      capture = {
        org_capture_finalize = ';w',
        org_capture_refile = ';r',
        org_capture_kill = ';q',
      },
    }
    ```
* New: [Configure the capture templates.](orgmode.md#configure-the-capture-templates)
    Capture lets you define different templates for the different inputs. Each template has the next elements:
    * Keybinding: Keys to press to activate the template
    * Description: What to show in the capture menu to describe the template
    * Template: The actual template of the capture, look below to see how to create them.
    * Target: The place where the captured element will be inserted to. For example `~/org/todo.org`. If you don't define it it will go to the file configured in `org_default_notes_file`.
    * Headline: An [optional headline](https://github.com/nvim-orgmode/orgmode/issues/196) of the Target file to insert the element.
    For example:
    ```lua
    org_capture_templates = {
      t = { description = 'Task', template = '* TODO %?\n  %u' }
    }
    ```
    For the template you can use the next variables:
    - `%?: `Default cursor position when template is opened
    - `%t`: Prints current date (Example: ``)
    - `%T`: Prints current date and time (Example: ``)
    - `%u`: Prints current date in inactive format (Example: `[2021-06-10 Thu]`)
    - `%U`: Prints current date and time in inactive format (Example: `[2021-06-10 Thu 12:30]`)
    - `%`: Insert current date/time formatted according to lua date format (Example: `%` produces `2021-07-02 Friday`)
    - `%x`: Insert content of the clipboard via the "+" register (see `:help clipboard`)
    - `%^{PROMPT|DEFAULT|COMPLETION...}`: Prompt for input, if completion is provided an `:h inputlist` will be used
    - `%(EXP)`: Runs the given lua code and inserts the result. NOTE: this will internally pass the content to the lua `load()` function. So the body inside `%()` should be the body of a function that returns a string.
    - `%f`: Prints the file of the buffer capture was called from.
    - `%F`: Like `%f` but inserts the full path.
    - `%n`: Inserts the current `$USER`
    - `%a`: File and line number from where capture was initiated (Example: `[[file:/home/user/projects/myfile.txt +2]]`)
    For example:
    ```lua
    {
      T = {
        description = 'Todo',
        template = '* TODO %?\n %u',
        target = '~/org/todo.org'
      },
     j = {
        description = 'Journal',
        template = '\n*** %\n**** %U\n\n%?',
        target = '~/sync/org/journal.org'
      },
      -- Nested key example:
      e =  'Event',
      er = {
        description = 'recurring',
        template = '** %?\n %T',
        target = '~/org/calendar.org',
        headline = 'recurring'
      },
      eo = {
        description = 'one-time',
        template = '** %?\n %T',
        target = '~/org/calendar.org',
        headline = 'one-time'
      },
      -- Example using a lua function
      r = {
        description = "Repo URL",
        template = "* [[%x][%(return string.match('%x', '([^/]+)$'))]]%?",
        target = "~/org/repos.org",
      }
    }
    ```
* New: [Synchronize with external calendars.](orgmode.md#synchronize-with-external-calendars)
    You may want to synchronize your calendar entries with external ones shared with other people, such as nextcloud calendar or google.