### RRC Security Establishment Model

The primary process (line 26) executes some initialization steps and then forks an unbounded number of sessions in parallel, representing three processes: a User Equipment (UE), a Mobility Management Entity (MME), and an eNodeB (eNB). The initialization steps, which are not shown in the figure, set up the parameters established earlier, such as user capabilities and the KASME key, similar to the model in Fig. 4.

An additional parameter, `nasulcount`, represents the NAS protocol message counter. This counter is used to derive the KeNB key (lines 5 and 12), which is provisioned to the eNB (lines 13 and 16). The counter is incremented for each message exchange between the UE and MME. For example, this increment occurs during the send and receive operations on lines 3 and 11.

We model the counter by introducing a fresh variable (line 2) and ensure it is synchronized by including it in the first NAS message (line 11). According to the specification [1] (TS 33.401), when the counter, which is bounded, is about to wrap around, a new AKA run can be triggered to generate a new KASME key, thus preventing KeNB key reuse.

#### Security Properties

For security properties, we consider secrecy and sanity queries similarly to previous models. For correspondence assertions, we focus on the agreement on the established KeNB key and the chosen algorithm between the UE and the eNB. ProVerif resolves all queries as expected, except one injective correspondence assertion (see Table 1).

### Mobility Management

An eNB may detect that another eNB is better suited to serve an active terminal, for example, due to better radio conditions. The source or serving eNB (S-eNB) hands over the terminal to the target eNB (T-eNB). There are two compound procedures for handover: S1 handover (core network assisted) and X2 handover (without core network assistance). The names come from the primary network interfaces used during the handover execution.

#### X2 Handover

X2 handover (Fig. 6) is initiated after the terminal has completed all necessary procedures to activate RRC and NAS security. The S-eNB calculates the KeNB* from the current KeNB and sends it, along with the terminal's security capabilities, to the T-eNB in a handover request message (REQ). The T-eNB responds with the required configuration information for the terminal connection, including the chosen algorithms (CMD). The S-eNB forwards the reply to the terminal, which confirms the handover with a completion message (CPL). Finally, the T-eNB retrieves a new key called the Next Hop key (NH) from the MME. The NH, derived from the KASME, is used as the basis for the KeNB* calculation in the next handover event [1] (TS 33.401).

#### S1 Handover

In an S1 handover (Fig. 7), the S-eNB and T-eNB are not directly connected. The S-eNB sends a handover required message (RQD) to the MME, containing the terminal's security capabilities. The MME derives the NH key and sends it to the T-eNB, along with the UE capabilities. The T-eNB uses the NH key to derive the KeNB for communication with the terminal and sends a handover command (CMD) containing the chosen algorithms to the S-eNB. The S-eNB forwards the message to the terminal, which replies to the T-eNB with a handover completed message (CPL).

### Formal Models and Analysis

Both handover procedures involve four agents: a UE, a source S-eNB, a target T-eNB, and an MME. The procedures are similar but provide slightly different security guarantees. The ProVerif models of the protocols are provided in Fig. 8 and Fig. 9. The declaration parts have been omitted as they are very similar to previous models, except for some types and constants.

In the X2 handover model (Fig. 8), the main process performs the required initialization steps and forks unbounded sessions of the processes defined in lines 1, 6, 9, and 12, representing a UE, an MME, an S-eNB, and a T-eNB, respectively. The initialization steps include defining the UE capabilities (lines 22-24), the KASME key shared between the UE and the MME (line 25), and the KeNB.

```plaintext
let UE(ue_caps: caps, kenb: key, cellid: bitstring) =
  in(secch, (=CMD, a: alg));
  if mem(a, ue_caps) then
    let kenbstar: key = kdf(cellid, kenb);
    out(pubch, (CPL, senc((a, mac((CPL, a), kenbstar)), kenbstar))).

let MME(nh2: key) =
  in(secch, =PSR);
  out(secch, (ACK, nh2)).

let SeNodeB(ue_caps: caps, kenb: key, cellid: bitstring) =
  let kenbstar: key = kdf(cellid, kenb);
  out(secch, (REQ, kenbstar, ue_caps));
  in(secch, (=CMD, a: alg));
  in(pubch, (=CPL, msg: bitstring));
  let rrcmac: bitstring = sdec(msg, kenbstar);
  if rrcmac = mac((CPL, a), kenbstar) then
    out(secch, PSR);
    in(secch, (=ACK, nh2: key)).

let TeNodeB() =
  in(secch, (=REQ, kenbstar: key, ue_caps: caps));
  let a: alg such that mem(a, ue_caps);
  out(secch, (CMD, a)).

process
  consset(a2, emptyset);
  new a1: alg; new a2: alg;
  let ue_caps = consset(a1, a2);
  out(pubch, ue_caps);
  new kasme: key; new nasulcount: bitstring; out(pubch, nasulcount);
  let kenb: key = kdf(nasulcount, kasme);
  let nh1: key = kdf(to_bitstring(kenb), kasme);
  let nh2: key = kdf(to_bitstring(nh1), kasme);
  new cellid: bitstring; out(pubch, cellid);
  (!SeNodeB(ue_caps, kenb, cellid) | !UE(ue_caps, kenb, cellid) | !TeNodeB() | !MME(nh2)).
```

This optimized text provides a clear and structured explanation of the RRC security establishment model and the handover procedures, ensuring clarity and coherence.