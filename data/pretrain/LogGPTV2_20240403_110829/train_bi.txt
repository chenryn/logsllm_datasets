and xfs.
.\" commit e1d8fb88a64c1f8094b9f6c3b6d2d9e6719c970d
.ss zeroing file space
specifying the
.br falloc_fl_zero_range
flag (available since linux 3.15)
.\" commit 409332b65d3ed8cfa7a8030f1e9d52f372219642
in
.i mode
zeros space in the byte range starting at
.i offset
and continuing for
.i len
bytes.
within the specified range, blocks are preallocated for the regions
that span the holes in the file.
after a successful call, subsequent
reads from this range will return zeros.
.pp
zeroing is done within the filesystem preferably by converting the range into
unwritten extents.
this approach means that the specified range will not be physically zeroed
out on the device (except for partial blocks at the either end of the range),
and i/o is (otherwise) required only to update metadata.
.pp
if the
.b falloc_fl_keep_size
flag is additionally specified in
.ir mode ,
the behavior of the call is similar,
but the file size will not be changed even if
.ir offset + len
is greater than the file size.
this behavior is the same as when preallocating space with
.b falloc_fl_keep_size
specified.
.pp
not all filesystems support
.br falloc_fl_zero_range ;
if a filesystem doesn't support the operation, an error is returned.
the operation is supported on at least the following filesystems:
.ip * 3
xfs (since linux 3.15)
.\" commit 376ba313147b4172f3e8cf620b9fb591f3e8cdfa
.ip *
ext4, for extent-based files (since linux 3.15)
.\" commit b8a8684502a0fc852afa0056c6bb2a9273f6fcc0
.ip *
smb3 (since linux 3.17)
.\" commit 30175628bf7f521e9ee31ac98fa6d6fe7441a556
.ip *
btrfs (since linux 4.16)
.\" commit f27451f229966874a8793995b8e6b74326d125df
.ss increasing file space
specifying the
.br falloc_fl_insert_range
flag
(available since linux 4.1)
.\" commit dd46c787788d5bf5b974729d43e4c405814a4c7d
in
.i mode
increases the file space by inserting a hole within the file size without
overwriting any existing data.
the hole will start at
.i offset
and continue for
.i len
bytes.
when inserting the hole inside file, the contents of the file starting at
.i offset
will be shifted upward (i.e., to a higher file offset) by
.i len
bytes.
inserting a hole inside a file increases the file size by
.i len
bytes.
.pp
this mode has the same limitations as
.br falloc_fl_collapse_range
regarding the granularity of the operation.
if the granularity requirements are not met,
.br fallocate ()
fails with the error
.br einval .
if the
.i offset
is equal to or greater than the end of file, an error is returned.
for such operations (i.e., inserting a hole at the end of file),
.br ftruncate (2)
should be used.
.pp
no other flags may be specified in
.ir mode
in conjunction with
.br falloc_fl_insert_range .
.pp
.b falloc_fl_insert_range
requires filesystem support.
filesystems that support this operation include
xfs (since linux 4.1)
.\" commit a904b1ca5751faf5ece8600e18cd3b674afcca1b
and ext4 (since linux 4.2).
.\" commit 331573febb6a224bc50322e3670da326cb7f4cfc
.\" f2fs also has support since linux 4.2
.\"     commit f62185d0e283e9d311e3ac1020f159d95f0aab39
.sh return value
on success,
.br fallocate ()
returns zero.
on error, \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.b ebadf
.i fd
is not a valid file descriptor, or is not opened for writing.
.tp
.b efbig
.ir offset + len
exceeds the maximum file size.
.tp
.b efbig
.i mode
is
.br falloc_fl_insert_range ,
and the current file size+\filen\fp exceeds the maximum file size.
.tp
.b eintr
a signal was caught during execution; see
.br signal (7).
.tp
.b einval
.i offset
was less than 0, or
.i len
.\" fixme . (raise a kernel bug) probably the len==0 case should be
.\" a no-op, rather than an error. that would be consistent with
.\" similar apis for the len==0 case.
.\" see "re: [patch] fallocate.2: add falloc_fl_punch_hole flag definition"
.\" 21 sep 2012
.\" http://thread.gmane.org/gmane.linux.file-systems/48331/focus=1193526
was less than or equal to 0.
.tp
.b einval
.i mode
is
.br falloc_fl_collapse_range
and the range specified by
.i offset
plus
.i len
reaches or passes the end of the file.
.tp
.b einval
.i mode
is
.br falloc_fl_insert_range
and the range specified by
.i offset
reaches or passes the end of the file.
.tp
.b einval
.i mode
is
.br falloc_fl_collapse_range
or
.br falloc_fl_insert_range ,
but either
.i offset
or
.i len
is not a multiple of the filesystem block size.
.tp
.b einval
.i mode
contains one of
.b falloc_fl_collapse_range
or
.b falloc_fl_insert_range
and also other flags;
no other flags are permitted with
.br falloc_fl_collapse_range
or
.br falloc_fl_insert_range .
.tp
.b einval
.i mode
is
.br falloc_fl_collapse_range
or
.br falloc_fl_zero_range
or
.br falloc_fl_insert_range ,
but the file referred to by
.i fd
is not a regular file.
.\" there was an inconsistency in 3.15-rc1, that should be resolved so that all
.\" filesystems use this error for this case. (tytso says ex4 will change.)
.\" http://thread.gmane.org/gmane.comp.file-systems.xfs.general/60485/focus=5521
.\" from: michael kerrisk (man-pages 
.\" subject: re: [patch v5 10/10] manpage: update falloc_fl_collapse_range flag in fallocate
.\" newsgroups: gmane.linux.man, gmane.linux.file-systems
.\" date: 2014-04-17 13:40:05 gmt
.tp
.b eio
an i/o error occurred while reading from or writing to a filesystem.
.tp
.b enodev
.i fd
does not refer to a regular file or a directory.
(if
.i fd
is a pipe or fifo, a different error results.)
.tp
.b enospc
there is not enough space left on the device containing the file
referred to by
.ir fd .
.tp
.b enosys
this kernel does not implement
.br fallocate ().
.tp
.b eopnotsupp
the filesystem containing the file referred to by
.i fd
does not support this operation;
or the
.i mode
is not supported by the filesystem containing the file referred to by
.ir fd .
.tp
.b eperm
the file referred to by
.i fd
is marked immutable (see
.br chattr (1)).
.tp
.b eperm
.i mode
specifies
.br falloc_fl_punch_hole
or
.br falloc_fl_collapse_range
or
.br falloc_fl_insert_range
and
the file referred to by
.i fd
is marked append-only
(see
.br chattr (1)).
.tp
.b eperm
the operation was prevented by a file seal; see
.br fcntl (2).
.tp
.b espipe
.i fd
refers to a pipe or fifo.
.tp
.b etxtbsy
.i mode
specifies
.br falloc_fl_collapse_range
or
.br falloc_fl_insert_range ,
but the file referred to by
.ir fd
is currently being executed.
.sh versions
.br fallocate ()
is available on linux since kernel 2.6.23.
support is provided by glibc since version 2.10.
the
.br falloc_fl_*
flags are defined in glibc headers only since version 2.18.
.\" see http://sourceware.org/bugzilla/show_bug.cgi?id=14964
.sh conforming to
.br fallocate ()
is linux-specific.
.sh see also
.br fallocate (1),
.br ftruncate (2),
.br posix_fadvise (3),
.br posix_fallocate (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2002 andries brouwer 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" this replaces an earlier man page written by walter harms
.\" .
.\"
.th qecvt 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
qecvt, qfcvt, qgcvt \- convert a floating-point number to a string
.sh synopsis
.nf
.b #include 
.pp
.bi "char *qecvt(long double " number ", int " ndigits \
", int *restrict " decpt ,
.bi "            int *restrict " sign );
.bi "char *qfcvt(long double " number ", int " ndigits \
", int *restrict " decpt ,
.bi "            int *restrict " sign );
.bi "char *qgcvt(long double " number ", int " ndigit ", char *" buf );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br qecvt (),
.br qfcvt (),
.br qgcvt ():
.nf
    since glibc 2.19:
        _default_source
    in glibc up to and including 2.19:
        _svid_source
.fi
.\" fixme . the full ftm picture looks to have been something like the
.\" following mess:
.\"    glibc 2.20 onward
.\"        _default_source
.\"    glibc 2.18 to glibc 2.19
.\"        _bsd_source || _svid_source
.\"    glibc 2.10 to glibc 2.17
.\"        _svid_source || (_xopen_source >= 500 ||
.\"            (_xopen_source && _xopen_source_extended) &&
.\"                ! (_posix_c_source >= 200809l))
.\"    before glibc 2.10:
.\"        _svid_source || _xopen_source >= 500 ||
.\"            (_xopen_source && _xopen_source_extended)
.sh description
the functions
.br qecvt (),
.br qfcvt (),
and
.br qgcvt ()
are identical to
.br ecvt (3),
.br fcvt (3),
and
.br gcvt (3)
respectively, except that they use a
.i "long double"
argument
.ir number .
see
.br ecvt (3)
and
.br gcvt (3).
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br qecvt ()
t}	thread safety	mt-unsafe race:qecvt
t{
.br qfcvt ()
t}	thread safety	mt-unsafe race:qfcvt
t{
.br qgcvt ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
svr4.
not seen in most common unix implementations,
but occurs in sunos.
.\" not supported by libc4 and libc5.
supported by glibc.
.sh notes
these functions are obsolete.
instead,
.br snprintf (3)
is recommended.
.sh see also
.br ecvt (3),
.br ecvt_r (3),
.br gcvt (3),
.br sprintf (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 1993 by thomas koenig (PI:EMAIL)
.\" and copyright (c) 2014 by michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" modified sat jul 24 17:51:15 1993 by rik faith (PI:EMAIL)
.\" modified 11 may 1998 by joseph s. myers (PI:EMAIL)
.\" modified 14 may 2001, 23 sep 2001 by aeb
.\" 2004-12-20, mtk
.\"
.th system 3  2021-03-22 "" "linux programmer's manual"
.sh name
system \- execute a shell command
.sh synopsis
.nf
.b #include 
.pp
.bi "int system(const char *" "command" );
.fi
.sh description
the
.br system ()
library function uses
.br fork (2)
to create a child process that executes the shell command specified in
.i command
using
.br execl (3)
as follows:
.pp
.in +4n
.ex
execl("/bin/sh", "sh", "\-c", command, (char *) null);
.ee
.in
.pp
.br system ()
returns after the command has been completed.
.pp
during execution of the command,
.b sigchld
will be blocked, and
.b sigint
and
.b sigquit
will be ignored, in the process that calls
.br system ().
(these signals will be handled according to their defaults inside
the child process that executes
.ir command .)
.pp
if
.i command
is null, then
.br system ()
returns a status indicating whether a shell is available on the system.
.sh return value
the return value of
.br system ()
is one of the following:
.ip * 3
if
.i command
is null, then a nonzero value if a shell is available,
or 0 if no shell is available.
.ip *
if a child process could not be created,
or its status could not be retrieved,
the return value is \-1 and
.i errno
is set to indicate the error.
.ip *
if a shell could not be executed in the child process,
then the return value is as though the child shell terminated by calling
.br _exit (2)
with the status 127.
.ip *
if all system calls succeed,
then the return value is the termination status of the child shell
used to execute
.ir command .
(the termination status of a shell is the termination status of
the last command it executes.)
.pp
in the last two cases,
the return value is a "wait status" that can be examined using
the macros described in
.br waitpid (2).
(i.e.,
.br wifexited (),
.br wexitstatus (),
and so on).
.pp
.br system ()
does not affect the wait status of any other children.
.sh errors
.br system ()
can fail with any of the same errors as
.br fork (2).
.sh attributes