# house-of-husk学习笔记
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
在BUU群里看到`glzjin`师傅的每日推送，看到了一个有趣的glibc新型攻击方式，自己实践了一下，感觉还是挺好用的，在某些情况下比传统攻击更方便，这里结合源码和自己的调试和大家分享一下，如果有哪里不对恳请师傅们斧正。该攻击链发现者的博文如下:[House
of Husk (仮)](https://ptr-yudai.hatenablog.com/entry/2020/04/02/111507)。本文用到的代码等文件在这里[文件](https://github.com/xmzyshypnc/xz_files)
## 攻击原理
这种攻击方式主要是利用了`printf`的一个调用链，应用场景是只能分配较大chunk时(超过fastbin)，存在或可以构造出UAF漏洞。
首先从源码角度简单分析攻击背后的原理。在使用`printf`类格式化字符串函数进行输出的时候，该类函数会根据我们格式化字符串的种类不同而采取不同的输出格式进行输出，在glibc中有这样一个函数`__register_printf_function`，为格式化字符为`spec`的格式化输出注册函数，这个函数是`__register_printf_specifier`函数的封装。
跟进__register_printf_specifier函数，如果格式化符超过0xff或小于0，即不在ascii码则返回-1，如果__printf_arginfo_table为空就通过calloc分配堆内存存放__printf_arginfo_table以及__printf_function_table。两个表空间都为0x100，可以为0-0xff的每个字符注册一个函数指针，第一个表后面紧接着第二个表。
    /* Register FUNC to be called to format SPEC specifiers.  */
    int
    __register_printf_function (int spec, printf_function converter,
                    printf_arginfo_function arginfo)
    {
      return __register_printf_specifier (spec, converter,
                          (printf_arginfo_size_function*) arginfo);
    }
    /* Register FUNC to be called to format SPEC specifiers.  */
    int
    __register_printf_specifier (int spec, printf_function converter,
                     printf_arginfo_size_function arginfo)
    {
      if (spec  (int) UCHAR_MAX)
        {
          __set_errno (EINVAL);
          return -1;
        }
      int result = 0;
      __libc_lock_lock (lock);
      if (__printf_function_table == NULL)
        {
          __printf_arginfo_table = (printf_arginfo_size_function **)
        calloc (UCHAR_MAX + 1, sizeof (void *) * 2);
          if (__printf_arginfo_table == NULL)
        {
          result = -1;
          goto out;
        }
          __printf_function_table = (printf_function **)
        (__printf_arginfo_table + UCHAR_MAX + 1);
        }
      __printf_function_table[spec] = converter;
      __printf_arginfo_table[spec] = arginfo;
     out:
      __libc_lock_unlock (lock);
      return result;
    }
`__printf_function_table`spec索引处的类型为`printf_function`的函数指针是我们为chr(spec)这个格式化字符注册的输出函数的函数指针，这个函数在`printf->vfprintf->printf_positional`中被调用。
    /* Type of a printf specifier-handler function.
       STREAM is the FILE on which to write output.
       INFO gives information about the format specification.
       ARGS is a vector of pointers to the argument data;
       the number of pointers will be the number returned
       by the associated arginfo function for the same INFO.
       The function should return the number of characters written,
       or -1 for errors.  */
    typedef int printf_function (FILE *__stream,
                                 const struct printf_info *__info,
                                 const void *const *__args);
    //glibc-2.27/vfprintf.c:1985
    extern printf_function **__printf_function_table;
          int function_done;
          if (spec vfprintf->printf_positional->__parse_one_specmb`中被调用。可以看到其返回值为格式化字符消耗的参数个数，猜测其功能是根据格式化字符做解析。
    /* Type of a printf specifier-arginfo function.
       INFO gives information about the format specification.
       N, ARGTYPES, *SIZE has to contain the size of the parameter for
       user-defined types, and return value are as for parse_printf_format
       except that -1 should be returned if the handler cannot handle
       this case.  This allows to partially overwrite the functionality
       of existing format specifiers.  */
    typedef int printf_arginfo_size_function (const struct printf_info *__info,
                                              size_t __n, int *__argtypes,
                                              int *__size);
    //glibc-2.27/printf-parsemb.c:307
    /* Get the format specification.  */
      spec->info.spec = (wchar_t) *format++;
      spec->size = -1;
      if (__builtin_expect (__printf_function_table == NULL, 1)
          || spec->info.spec > UCHAR_MAX
          || __printf_arginfo_table[spec->info.spec] == NULL
          /* We don't try to get the types for all arguments if the format
         uses more than one.  The normal case is covered though.  If
         the call returns -1 we continue with the normal specifiers.  */
          || (int) (spec->ndata_args = (*__printf_arginfo_table[spec->info.spec])
                       (&spec->info, 1, &spec->data_arg_type,
                        &spec->size)) ndata_args = 1;
    struct printf_spec
      {
        /* Information parsed from the format spec.  */
        struct printf_info info;
        /* Pointers into the format string for the end of this format
           spec and the next (or to the end of the string if no more).  */
        const UCHAR_T *end_of_fmt, *next_fmt;
        /* Position of arguments for precision and width, or -1 if `info' has
           the constant value.  */
        int prec_arg, width_arg;
        int data_arg;                /* Position of data argument.  */
        int data_arg_type;                /* Type of first argument.  */
        /* Number of arguments consumed by this format specifier.  */
        size_t ndata_args;
        /* Size of the parameter for PA_USER type.  */
        int size;
      };
此外，在vfprintf函数中如果检测到我们注册的table不为空，则对于格式化字符不走默认的输出函数而是调用`printf_positional`函数，进而可以调用到表中的函数指针。
至此，两个调用链的分析就完成了，我们再来结合poc分析一下今天要谈论的攻击方式是如何和printf结合的。
    //glibc-2.27/vfprintf.c:1335
    /* Use the slow path in case any printf handler is registered.  */
      if (__glibc_unlikely (__printf_function_table != NULL
                || __printf_modifier_table != NULL
                || __printf_va_arg_table != NULL))
        goto do_positional;