ysis technique such as unpacking to handle these issues,
but this often involves manual efforts (e.g., patching anti-
debugging code) and is not scalable. More importantly, we ob-
serve that apps developed by large companies (e.g., Microsoft,
Alibaba, Tencent, Baidu) seldom adopt code protection due
to stability and compatibility requirements. Therefore we
leave the analysis of protected apps as a future work and
only focus on those unprotected apps.
AUTH-EYE identified 1069 (78.3%) with declared login Ac-
tivities in successfully analyzed 1,364 apps, and the top-10
commonly used login Activity names are listed in Table 1.
It is clear from the list that developers do prefer to use the
word “login” to describe a login Activity. Given the list of
apps with identified login Activities, AUTH-EYE then further
identified how many implement OTP authentication. In to-
tal, 544 (58.2%) app adopt OTP authentication. Among these
544 apps, 354 use two-factor authentication (both password
authentication and OTP authentication), while 190 apps only
contain OTP authentication. In this study, we only discuss
the validation OTP authentication and leave the evaluation
of password authentication protocols as future work. Hence,
our discussion focuses only on the apps in the OTP list, i.e.,
544 apps implementing SMS OTP authentication. Note that
for apps with password authentication involved, we manu-
ally registered an accounts in those apps and typed in the
combination of username and password.
5.3 Results
5.3.1 Rules Violations. Table 2 lists the number of apps
that violate the OTP rules (see Section 2). Only eight apps
out of the 544 apps did not violate any of the OTP rules. We
now discuss the detected violations of OTP rules in the order
of their prevalence.
Table 2: Violations of OTP rules
OTP Rules
R6: OTP Renewal Interval
R3: Retry Attempts
R2: OTP Length
R4: OTP Consumption
R1: OTP Randomness
R5: OTP Expiration
# of apps
536
324
209
106
71
40
R6: OTP Renewal Interval. A large number of apps, 536
in total, violated this rule, making it the most frequently
violated OTP rule. Only eight apps follow the requirement
proposed by R6. Further inspection revealed that in 165 apps,
the OTP validation systems did not require OTP values to
be renewed. For the remaining failed apps (i.e., 371 apps),
the intervals to renew OTP values set by their validation
systems are shown in Figure 2. Most validation systems (122
apps) are set to renew OTP values at intervals between 5
minutes to 10 minutes. The validation systems of 112 apps
generate new OTP values within the time interval of one
minute to five minutes. Even worse, AUTH-EYE identified
that the validation systems in 15 apps accept OTPs that have
been delayed for 24 hours. This design results in the TOTP
authentication protocol behaving no better than a normal
OTP authentication protocol. The developers of these apps
might deliberately choose this option since accepting a large
range of delays as valid is much more user-friendly.
R3: Retry Attempts. This rule limits the number of retry
attempts allowed by validation systems. It is the second most
violated OTP rule. AUTH-EYE identified 324 (59.6%) apps out
of 544 apps violating this rule, i.e., allowing more than five
attempts.
Figure 3 shows the number of attempts allowed by valida-
tion systems. Only 220 (40.44%) apps have OTP validation
systems complying with the rule, and most of these apps
(77.2%) are from the category of Shopping and a few are from
the Social category.
For the other apps that violate R3 (i.e., 324 apps), 111
apps allow 6 to 10 retry attempts, and 31 apps allow 11 to
An Empirical Study of SMS OTP Authentication in Android Apps
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Figure 3: Number of retry attempts allowed in apps
Figure 2: OTP renewal interval (Minutes)
20 attempts. Because AUTH-EYE was set to send a fake OTP
at most 20 times for each app, it identified that the OTP
validation systems in 126 apps still work after 20 times of
retry. We surmised that these validation systems may not
implement any limitation and are thus vulnerable to brute
force attacks.
Additionally, AUTH-EYE identified the delay protection im-
plemented in the OTP validation systems of 97 apps. In these
apps, the user has to wait for a specific period if an incorrect
OTP value is entered. The waiting period set in these apps is
usually one minute.
R2: OTP Length. The third most violated OTP rule is setting
the length of OTP values at fewer than six digits. As men-
tioned in Section 2, generating an OTP with short length
(i.e., length 1440(24h)020406080100120140160180200# of AppsRenewal Interval33.46%5.7%20.4%40.44% 0-5 6-10 11-20 >20  ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Siqi et al.
Table 3: Violation of multiple OTP rules
# of apps multiple-rules violated
65
13
9
2
R2 & R4
R1 & (R2 or R3)
R4 & R5
R2 & R3
such as loginFail and thirdLogin, have higher semantic
similarity scores.
5.3.2 Results for Multiple-Rules Violations. We also in-
vestigated the status of multiple OTP rules violation in our
tested apps, and listed the cases that severely threat to the
security of OTP authentication in Table 3. As shown in the
table, the most frequently occurred situation is the violation
of both R2 and R4 (65 apps). In this situation, an attacker
could guess the OTP through a brute force attack, since the
number of legal OTPs is limited and the server also accept
a used OTP. Another common mistake is that 13 apps not
only used an immutable OTP, but also violate other rules
such as allowing an attack to guess the OTP, or always reuse
the immutable OTP if a legal user does not enforce a new
login request. There are also nine apps violate both R4 and
R5, and two apps violate R2 and R3 simultaneously. All
those apps that violate multiple OTP rules are considered
as highly vulnerable, and we have contacted the developers
and reported these issues.
Note that we found all “potential vulnerable” apps vio-
lated R6 (i.e., the valid time window exceeds 30 seconds).
Compared with a single rule violation, violations of both R6
and other rules will increase the risk. However, the violation
of R6 often does not directly lead to an attack. Therefore,
we do not consider this issue in our multiple rules violation
investigation.
5.4 Case Studies
This section aims to highlight insights from case studies
based on our manual inspections.
Matchless Functionality. We found some apps whose val-
idation systems do not match with the responses.
–Expiration. We investigated a game manager app with
more than 100,000 downloads. It transmits messages in se-
cure ciphertext formats and the server responses suggest that
authentication protocols (i.e., password authentication and
OTP authentication) are correctly implemented. However,
AUTH-EYE flagged this app because its validation system still
accepts “expired” OTPs. By parsing the server responses,
AUTH-EYE discovered that each OTP expired after 30 sec-
onds. However, when AUTH-EYE consumed each OTP after 1
minute and 10 minutes, it passed the validation. We agree
that remembering and validating OTP values for all login
requests consume a large amount of storage and memory
on the server side; but app security makes it essential to
implement an efficient reset method for clearing expired
values.
–Consumption. Users commonly use finance apps to man-
age their investments. It is crucial that financial information
is protected at all times. However, we found that the val-
idation systems in three financial apps accept previously
consumed OTPs. The OTP authentication of a financial app
was labeled by AUTH-EYE as vulnerable. By checking its re-
sponses, we found that this app violates almost all OTP rules
except for R1 (OTP Randomness) and R5 (Retry Attempts).
The only protection scheme implemented is that its valida-
tion system blocks the user’s account and does not generate
any OTP values if the user keeps sending requests more than
five times. While verifying user identity, this app not only
accepts consumed OTP values, but also transmits mobile
phone numbers and OTP values in plaintext. This means
that users’ private information (i.e., login information and
private data) is exposed to attackers.
Deceptive Randomness. Apps violating R1 (OTP Random-
ness) are from the categories of Beauty, Finance, News &
Magazine, Photography and Video Players & Editors. The
percentage from each category with violations is 11%, 7%,
33%, 3%, and 46%, respectively. We investigated these apps in
details. For 6 of the 15 apps which generate static values for
OTP authentication, the OTP value is only renewed when
the previous one is consumed. The other apps keep sending
the same value to users.
Exposed Transmission. As well as analyzing server re-
sponses, AUTH-EYE monitored traffic messages to identify
whether an error occurred. From traffic messages, AUTH-EYE
identified that most messages containing OTP values are not
well-protected. The validation systems of 188 apps transmit
the OTP values in plaintext over the unsecured network. 36
apps protect OTP values by using only an MD5 hash without
salt, which is considered insecure [19]. With respect to mes-
sage transmission, we found that the most secure category is
Travel & Local, where 98.7% apps encrypt their transmitted
messages. The categories of Shopping and Social perform
the worst with only 72% and 74.6% apps being secure. We ob-
served that a Music app (10,070,000 downloads) only uses the
user’s mobile phone number as the password no matter what
user password and OTP are provided, and only the mobile
phone number is transmitted to the validation system.
An Empirical Study of SMS OTP Authentication in Android Apps
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
5.5 Discussion
We have demonstrated through an experimental evaluation
that AUTH-EYE is effective in assessing the design and imple-
mentation of OTP authentication protocols in Android apps.
However, it has some drawbacks, outlined as follows.
6 RELATED WORK
This section provides a brief review of related work.
6.1 Security Analysis of One-Time
Password Authentication Protocols
• Discovering Vulnerabilities. AUTH-EYE executes each
app for SMS OTP validation and points out OTP rules
violated by the validation system. However, it is diffi-
cult for AUTH-EYE to discover what vulnerabilities exist
in the implementation and where they are located Con-
sider a case that violates R1 (i.e., OTP randomness).
The most popular way of implementing this in Android
is to invoke the function SecureRandom(.), a pseudo-
random number generator. In practice, it should not be
seeded with a constant number; otherwise, the func-
tion will produce a predictable output sequence across
all implementations. However, some developers still
use seeds as “000000” or “123456” [31]. Such details
cannot be inferred in general by only analyzing the
server responses.
• Vulnerability Certainty. Currently, all the imple-
mentations that violate any of the OTP rules are tagged
as vulnerable. There might be other protection mecha-
nisms implemented in the validation system, beyond
those known to AUTH-EYE. For example, we discovered
that some Finance apps transmitted mobile phone num-
bers and OTPs in ciphertext or over a secure connect.
These protection schemes confirm that transmissions
are under secure circumstances, as long as the crypto-
graphic primitives or secure connection are correctly
implemented. This is, however, outside the scope of
this work.
• Black Box Analysis. AUTH-EYE treats the validation
system as a black box, and only analyzes server re-
sponses. We assume that such responses reflect func-
tionalities implemented in the code. However, this as-
sumption does not always hold as our manual inspec-
tions described in Section 5 found, such as in the case
of the Finance app discussed in Section 5.4. Based on a
given response, one may conclude that the implemen-
tation complies with the implementation rules, but
nevertheless functionalities defined in the validation
system may actually not be correctly implemented.
• Field Identification. AUTH-EYE identifies the required
information from the server responses through key-
words match only. Nonetheless, the formats of the re-
sponses are not always shown as the same. AUTH-EYE
might miss some responses in other format or identify
an incorrect information from the responses.
Several vulnerability detection approaches and protection
schemes are proposed to defend against attacks on the steps