only if a forensic investigation is properly authorized [9].
In this paper, we also do not focus on how to efﬁciently store
the recorded traces to minimize storage use. However, we note that
storage costs have been decreasing sharply, and that many enter-
prise networks already use commercial solutions to store full net-
work packet traces for considerable periods of time [19], for secu-
rity and compliance reasons. WebCapsule has the ability to ofﬂoad
the recorded data in real-time from the browser to a storage appli-
cation. Thus, it may be possible to adapt current enterprise-level
storage solutions to accommodate the recording of WebCapsule’s
browsing traces. In addition, in our future work we plan to study
how the recorded data could be “aged” to reduce the granularity of
historic traces, and measure the trade-off between the granularity
of the recorded data and replay accuracy.
3. APPROACH AND CHALLENGES
Approach Overview. To make WebCapsule portable, we imple-
ment it by injecting lightweight instrumentation shims around
Google’s Blink web rendering engine [3] and the V8 JavaScript
engine [28] without altering their application and platform APIs
135(see Figure 2). This allows us to inherit the portability of Blink and
V8, effectively making WebCapsule platform agnostic. In addition,
because Blink and V8 are at the core of several modern browsers
(e.g., Chrome, Opera, Amazon Silk, etc.) and of Android Web-
View [31], WebCapsule can be readily integrated with minor or no
code changes in a wide variety of web-rendering software.
Our design and implementation of WebCapsule aims to mini-
mize the amount of instrumentation code added into Blink. To this
end, our record and replay capabilities are implemented in large
part by extending Chrome’s DevTools [7], which provide access
to the internals of Blink (see Section 4 for more details). This al-
lows us to inject only thin instrumentation shims at critical points in
Blink’s code without modifying any API, code interfaces (i.e., the
members of Blink’s classes) or data structures already implemented
in Blink, thus obtaining a cleaner and more lightweight (e.g., low
overhead) implementation of WebCapsule’s functionalities.
It is worth noting that WebCapsule could be used to indepen-
dently record and replay web content rendered in different browser
tabs. More speciﬁcally, a browser that embeds Blink can spawn
a new instance of the rendering engine for each separate tab, as it
is done for example by Chromium’s default process model1 [22].
Consequently, each tab will also use its own independent instance
of WebCapsule, and could therefore be recorded and replayed inde-
pendently from other tabs. This is important for forensic analysis
purposes, because the analyst may want to replay only a subset of
the web content (i.e., only some tabs) visited by the user within a
given time window.
Challenges. The design and implementation choices outlined above
impose a number of hard constraints that we had to address. For
instance, events such as a user’s click on the “back button” on the
browser toolbar cannot directly be recorded, because the “raw” in-
put event is handled outside of Blink (by the browser’s chrome).
Instead, we had to reconstruct the series of side effects (in this ex-
ample, navigation history manipulation) that are communicated to
Blink, and record each of these effects at the location in Blink’s
code where the rendering engine “meets” the embedder browser
application.
In addition, Blink is highly multi-threaded, making the correct
replay of complex browsing traces challenging (e.g., the main Blink
thread, HTML parser, and JavaScript WebWorker threads could be
scheduled differently during replay). To compensate for these prob-
lems, we implement a number of mechanisms to “re-synchronize”
Blink’s clock (e.g., by adjusting the result of calls to current-
Time()) and to precisely pair network requests with the correct
response drawn from the recorded traces (we discuss these mecha-
nisms in more detail in Section 5).
It is important to notice that any state information kept outside of
Blink, such as the browsers’ cache, cookie store, etc., do not rep-
resent a signiﬁcant challenge, as they do not need to be explicitly
recorded. In fact, such state information is accessed by Blink via
well-deﬁned web-rendering and platform APIs. Because WebCap-
sule can already record these API calls, it can reconstruct “external”
state without a special record and replay component.
4. RECORDING: DESIGN AND IMPLEMEN-
TATION
In order to implement WebCapsule’s replay functionality, we
must ﬁrst provide the ability to record non-deterministic inputs into
Blink/V8. For the sake of brevity, in the following we will refer to
a function (or class method) as being non-deterministic if it ac-
1In some corner cases, Chromium may still use the the same Blink
instance to render content within inter-dependent tabs.
Figure 3: Extending DevTools:
InspectorInstrumentation.idl).
instrumentation example (from
cepts a non-deterministic argument (e.g., a user input event), or if
it returns a non-deterministic value (e.g., a network response, the
current system time, etc.). Otherwise, we say the function is deter-
ministic. Notice, however, that these deﬁnitions are not intended to
be rigorous, and simply provide a way to conveniently refer to func-
tions that are used to pass non-deterministic events to the rendering
engine, or that return non-deterministic values after an explicit call
from the engine is made.
The non-deterministic inputs we record can be divided into three
categories, as follows:
- Inputs that are injected by the embedder software (e.g., a
browser) directly into Blink via the web-rendering API (see
Figure 2). This category of non-deterministic inputs includes
page control messages, such as scroll or resize the web page,
as well as any user interaction and gestures via mouse, key-
board, or touchscreen interface.
- Information requested by Blink/V8 via synchronous calls to
the underlying system. This information is requested via the
platform API (see Figure 2) which abstracts the details of
the underlying system upon which the embedder software is
executing. Information in this category includes the current
system time, the user-agent string describing the embedding
software, total available memory, etc.
- Lastly, Blink can also request information from the platform
API to be returned asynchronously via callback interfaces.
Requests for remote resources, including network requests,
are primarily handled using this functionality.
Recording Components. WebCapsule’s recording functionality
is implemented using two primary components, namely a special
DevTools InspectorAgent (which we named Inspector-
ForensicsAgent in our code), and wrappers for the platform
API of both Blink and V8. In the following, we discuss in detail
how these components can be used to record a user’s browsing ac-
tivities.
4.1 Extending DevTools
As mentioned in Section 3, one of our design goals is to cre-
ate our instrumentation shims with as small a footprint as possible
on the original codebase of Blink and V8. To this end, we im-
plement a signiﬁcant portion of WebCapsule’s functionalities by
extending Blink’s built-in instrumentation facility known as Dev-
Tools [7]. This allows us to leverage existing quality code and at
the same time minimize performance overhead.
DevTools is designed to provide developers with detailed insight
into the execution of Blink/V8. The information DevTools provides
is divided into categories based on functionality, including infor-
mation about DOM elements, network trafﬁc, and Javascript exe-
cution. The collection and presentation of information from each
category is implemented via an InspectorAgent. Users can re-
trieve the desired information collected by DevTools using either a
graphical interface (called ‘Developer Tools’ in Chromium), or via
a JSON-based protocol over a WebSocket connection.
[WebCapsule]void handleInputEvent ( Page*, const WebInputEvent& );[WebCapsule]void handlePageScroll ( Page*, const WebSize& size,  double delta );[WebCapsule]void handleResize ( Page*, const WebSize& size );136It is possible to extend the existing DevTools functionalities by
“hooking” events one would like to listen to. As shown in the ex-
ample in Figure 3, this can be done by modifying InspectorIn-
strumentation.idl, which is written using a mix of IDL and
C++ code. This allows us to deﬁne a special InspectorAgent,
which we use to add WebCapsule’s instrumentation shims around
the web-rendering API, as explained below.
During the recording process, WebCapsule continuously ofﬂoads
the recorded events to an external data collection agent, thus greatly
reducing memory overhead for the rendering process. To allow for
the communication between WebCapsule and the external agent,
we extend the DevTools JSON-based network protocol2.
4.2 Recording User Input
Most user inputs (e.g., mouse movements, gestures, and key
presses) are sent to Blink via its WebViewImpl::handle-
InputEvent() API. A WebInputEvent parameter is passed
to this function carrying high-level information describing the in-
put instance, such as its type and location on the page. To record
the input, we deﬁne an instrumentation shim called handleIn-
putEvent, with WebCapsule’s InspectorAgent declared as
the shim handler agent. Consequently, during execution our shim
is called for each user input event. When WebCapsule is running in
record mode the WebInputEvent passed to the shim is copied
and stored, so that it can be re-injected as is during replay (see
Section 5). On the other hand, when WebCapsule is not set to op-
erate in recording (or replay) mode, then all of its shims perform
no operation, letting Blink function as if WebCapsule was not at all
present.
Target Element and DOM Snapshots. One of WebCapsule’s
goals is to provide the forensic analyst with a detailed recording
of the state of the page at critical moments during the user’s brows-
ing experience. To this end, every time an input event occurs we
also record the URL of the page where the event occurred. In ad-
dition, for all key presses and mouse clicks, we record the HTML
representation of the element in the DOM tree that is the target of
the user input. Furthermore, for events that are the main “cause”
of a page transition, such as a mouse click or an “Enter” key-
press (which may trigger a form data submission), we also take
a full snapshot of the page DOM, including the DOM of all nested
frames embedded within the page. We do so in a “blocking” fash-
ion, so that the user input event is not propagated to any other soft-
ware module, such as V8, that may alter the DOM itself before it’s
recorded (we intercept these events by injecting thin instrumenta-
tion shims within WebCore::EventHandler). While taking
a snapshot of the DOM imposes some overhead, in Section 6 we
show that in average the overhead is acceptable and does not sig-
niﬁcantly affect the user’s experience.
4.3 Non-Deterministic Platform Calls
During the rendering of a web page, Blink and V8 may issue a
number of different system calls to the underlying platform. For
example, the rendering and JavaScript engines may initiate calls
to currentTime() to synchronize rendering events (e.g., ani-
mations or other dynamic content). Additionally, the engines may
issue system calls to obtain random values from the runtime envi-
ronment. The values returned to Blink/V8 by such platform calls
are non-deterministic, and we therefore need to record them so
that they can be later replayed. In the following, we describe how
we place instrumentation shims around the Blink and V8 platform
APIs to achieve our goals while minimizing performance overhead.
2deﬁned in Blink within protocol.json.
Figure 4: Simpliﬁed view of WebCapsule’s platform wrapper in
record mode. PlatformImpl is the actual implementation of the
current underlying system platform.
Instrumenting Blink’s Platform API
4.3.1
Blink provides a Platform interface that abstracts the provided
platform API from its actual underlying implementation. To es-
tablish what speciﬁc Platform it is currently running on, Blink
ﬁrst calls a Platform::current() function, which returns a
pointer to a static singleton instance of Platform. We leverage
this “platform discovery” mechanism to our advantage. Speciﬁ-
cally, WebCapsule includes a PlatformWrapper class, which
implements the Platform interface and internally stores a ref-
erence to the true underlying platform returned by Platform::
current(), as shown in Figure 4.
When recording is initiated, WebCapsule’s InspectorAgent
initializes the platform wrapper in the following manner. First, the
InspectorAgent retrieves the pointer to the current platform
instance. Next, the agent instantiates a new PlatformWrapper.
Lastly, it replaces the value of the Platform::current()
pointer with the address of the newly created PlatformWrap-
per. From this point on, every time Blink performs a call to any
platform API, it will actually use WebCapsule’s PlatformWrap-
per as its platform (see Figure 4). This design allows WebCap-
sule to seamlessly instrument Blink’s entire Platform API while
conﬁning all instrumentation code exclusively within the Plat-
formWrapper class. Furthermore, the platform API instrumenta-
tion is completely transparent from the point of view of its callers.
Our PlatformWrapper implements the Platform interface
as follows. For deterministic functions, the parameters passed to
the wrapper’s function call are simply forwarded to the same func-
tion of the wrapped (true) platform instance. The return value, if
there is one, is then directly passed back to the caller. However, for
non-deterministic platform functions, their implementation within
PlatformWrapper is slightly different. When WebCapsule is in
record mode, we make copies of both the parameters passed to and
the return value generated from the call to the wrapped platform
instance. The recorded values are then stored in a data structure
that allows them to be retrieved and later replayed (we explain in
more detail how the PlatformWrapper operates during replay
in Section 5).
4.3.2
Blink depends upon V8 for running JavaScript code. Effectively,
Blink allows V8 to control the DOM of each page, thus provid-
ing the ability for JavaScript code to manipulate pages rendered by
Blink. V8’s access to the DOM tree is enabled by a set of dynamic
bindings generated at compile time.
Platform Calls in V8 vs. Blink. To allow for accurate record-
ing and replay, WebCapsule must capture non-determinism intro-
duced by JavaScript that could affect page rendering within Blink.
It turns out that because of how V8 is coupled to Blink, some
of the Blink instrumentations described earlier allow us to also
Instrumenting V8’s Platform API
BlinkPlatformWrappercurrentPlatformPtrcurrentTime()Rendering EnginecurrentTime()BlinkPlatformcurrentTime()currentTime()timetimerecord valueBlinkWebCapsuleBlink137record certain JavaScript-driven web events. For instance, Java-
Script XMLHttpRequest network transactions are actually satis-
ﬁed by Blink and utilize the same network functionality that We-
bCapsule already instruments. Therefore, we can record XML-
HttpRequest transactions as any other network request (see Sec-
tion 4.4). Furthermore, many of Blink’s platform API functions
are passed to V8 as function pointers during initialization. There-
fore, some of V8’s platform API calls are actually calls to Blink’s
platform API, which we already record via WebCapsule’s Plat-
formWrapper, as discussed earlier. However, there are also a
number of sources of non-determinism that reside solely within V8,
and that could indirectly affect Blink’s rendering. These sources in-
clude V8’s own platform API and certain JavaScript functions, such
as Math.random().
Wrapping V8’s Platform API. V8’s platform API is implemented
quite differently from Blink’s, because it does not utilize a “clean”
object-oriented design, and there is no single instance of a Plat-
form object within V8 that we can easily “wrap”. With the above
complications in mind, we took the following approach. We create
an (independent) platform within V8, which we refer to as JS-
PlatformWrapper in the remainder of this paper. We then
modify the call sites within V8’s code related to non-deterministic
platform API calls to use our JSPlatformWrapper instead. For
example, when JavaScript Date() objects are instantiated to re-
trieve the current system time, V8 calls OS::TimeCurrent-
Millis() (via a call to RuntimeDateCurrentTime). We
slightly modify V8 to call WebCapsule’s platform wrapper ﬁrst, so
that we can record the current time value, and transparently pass it
back to V8. This design does require that several call sites for non-
deterministic platform API calls within V8 be identiﬁed and instru-
mented. However, it has the advantage that we can choose not to
instrument a call site if the resulting non-determinism is known not
to affect page rendering or Javascript execution.
Leveraging JS-to-C++ Calls. Let us now consider JavaScript’s
Math.random(). The random number generator exposed by
Math.random() is
of
non-determinism internal to V8. Unlike, Date(), V8 internally
implements random() entirely in JavaScript. However, V8 de-
ﬁnes several C++ preprocessor macros, which are used to deﬁne
C++ functions callable from JavaScript code. We implement a new
function called HandleMathRandomVals, which takes the re-
turn value of random() as a parameter. We then altered ran-
dom() to call HandleMathRandomVals before returning,
which in turn passes the values to be recorded to our V8 platform
wrapper, (see function calls starting with ‘%’ in Figure 5).
primary
sources
one
of
the
4.4 Recording Network Events
Asynchronous Requests. Network requests are primarily served
in an asynchronous way, and responses are returned via a callback
interface. With this design, the response is constructed piecemeal
over the course of several callbacks. The asynchronous network
request interface within Blink is deﬁned by two classes, WebURL-
Loader and WebURLLoaderClient. The WebURLLoader
abstracts the underlying network and caching functionality pro-
vided by the platform API. The WebURLLoaderClient com-