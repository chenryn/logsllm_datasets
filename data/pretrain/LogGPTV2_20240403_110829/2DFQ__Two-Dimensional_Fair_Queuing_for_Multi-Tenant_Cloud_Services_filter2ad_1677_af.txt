dictable and expensive tenants, keeping them away from pre-
dictable tenants with small requests. We examine a single
workload in detail; in §@.z.z we give aggregate results across
a suite of experiments. We show that zDFQE improves ser-
vice for those tenants compared to WFQE and WFzQE, which
deteriorate under the same conditions.
We examine a workload of h§§ randomly selected tenants
plus T¸ . . .T¸z as in §@.¸.z. We repeat the experiment three
times. Initially, most tenants in the workload are predictable,
and zDFQE provides little, if any, improvement over WFQE
153
WFQEWF²QE2DFQE0100200300051015x1030100200300051015x103x103ServiceReceived0100200300051015x103x103x103Time(s)0123456789101112131415161718192021222324252627282930310%01234567891011121314151617181920212223242526272829303133%051015Time(s)01234567891011121314151617181920212223242526272829303166%100103104105106107RequestSizeFigure ¸z: Request latencies as the overall server workload mix is increasingly unpredictable. Top row: latency distributions for T¸ . . .T¸z with ¸% and (cid:146)(cid:146)%
whiskers; each cluster of three bars shows the latency distribution for one tenant under WFQE, WFzQE, and zDFQE respectively. zDFQE mitigates the impact
of unpredictable tenants and signißcantly improves latencies for predictable tenants with small requests, such as T¸. Bottom le(cid:22): CDFs of service lag standard
deviation. Bottom right: latency boxplots for ßxed-cost tenants t¸ . . . t6.
and WFzQE. However, for the second and third repetitions of
the experiment, we make hh% and @@% of these tenants explic-
itly unpredictable, by sampling each request pseudo-randomly
from across all production traces disregarding the originating
server or account. _e resulting tenants lack predictability in
API type and cost that is common to real-world tenants as
shown in §h.z, and as the workload becomes unpredictable,
WFQE and WFzQE rapidly deteriorate.
for T¸ . . .T¸z (top row), with whiskers highlighting ¸st and
(cid:146)(cid:146)th percentile latencies. Each cluster of three bars shows
the latency distribution under WFQE, WFzQE, and zDFQE
respectively for one tenant in one experiment. For the baseline
workload (§% Unpredictable) median and tail latencies under
WFQE and zDFQE are comparable. WFzQE has similar me-
dian latencies, but higher (cid:146)(cid:146)th percentile latencies for small
requests because of the blocking e(cid:242)ects outlined in §z.
However, with hh% and @@% unpredictable tenants present,
latencies under WFQE and WFzQE increase nearly uniformly
across all tenants, to approximately ¸ second (cid:146)(cid:146)th percentile
latency. _e relative increase in latency is most noticeable for
tenants with smaller requests (T¸ . . .T(cid:13)), with median and (cid:146)(cid:146)th
percentile latencies increasing by a factor of more than ¸§§×.
latencies increasing by a maximum factor of ¸§× among ex-
provides a (cid:146)(cid:146)th percentile latency speedup of up to ¸§§× over
By contrast with zDFQE these tenants are signißcantly less
impacted by the unpredictable tenants, with (cid:146)(cid:146)th percentile
periments. With @@% of the workload unpredictable, zDFQE
WFQE for tenants such as T¸ with small, predictable requests.
On the other hand, tenants such as T¸§ do not experience
signißcant latency improvements. Recall Figure (cid:13)c from §z:
T¸§’s requests vary widely in cost, by more than h orders of
magnitude. zDFQE does not improve T¸§’s service because it
is an example of the expensive and unpredictable tenants that
must be isolated from others.
Despite some tenants being more predictable than others,
T¸ . . .T¸z nonetheless have variation in request costs. To more
precisely understand how zDFQE a(cid:242)ects latencies for tenants
based on request size, we repeat the experiment to include the
ßxed-cost tenants t¸ . . . t6 as described in §@.¸.z. Figure ¸z (bot-
tom right) shows boxplot latency distributions for t¸ . . . t6, and
illustrates how the relative latency degradation disproportion-
ately a(cid:242)ect tenants t¸ . . . t(cid:13), whose requests are the smallest.
Across all tenants, as the workload becomes less predictable,
Figure ¸¸a plots a time series of the service received by T¸
under WFQE, WFzQE, and zDFQE. _e top ßgure shows that
with the baseline workload, WFQE provides service with the
most oscillations; WFzQE provides service with occasional
spikes, and zDFQE provides consistently smooth service. Os-
cillations under WFQE are lower than they were in experi-
ment @.¸.z since a side e(cid:242)ect of EMA averaging is to make
costs more uniform across tenants: for tenants with any varia-
tion in request size, small requests are perceived to be larger
than they are and large requests are perceived to be smaller.
_e middle and bottom ßgures demonstrate how the service
deteriorates with increasingly unpredictable workloads (hh%
middle; @@% bottom). WFQE and WFzQE produce large scale
oscillations in service, while zDFQE has occasional spikes of
service.
Figure ¸¸b illustrates the schedules produced by zDFQE for
the three experiments. _e ßgure shows how zDFQE initially
partitions requests accurately according to cost, but as more
unpredictable tenants are present, the partitioning becomes
more coarse grained. _is occurs when a request is estimated
to be large but it is small, or vice versa. It can be observed by
small requests interspersed among large requests, and vice
versa. Each of the brief spikes in service experienced by T¸ in
Figure ¸¸a can be correlated with an temporary imbalance of
expensive requests.
Oscillations in service can have a profound e(cid:242)ect on re-
quest latencies. Figure ¸z shows boxplot latency distributions
154
10-410-310-20.1110T1T2T3T4T5T6T7T8T9T10T11T120% UnpredictableLatency [s]10-410-310-20.1110T1T2T3T4T5T6T7T8T9T10T11T1233%UnpredictableLatency[s]10-410-310-20.1110T1T2T3T4T5T6T7T8T9T10T11T1266%UnpredictableLatency[s] 0 0.5 1  10-4   10-3   10-2    10-1110  0%Cumulative Frequency  10-4   10-3   10-2    10-1110  33%σ(Service Lag) Per Tenant  10-4   10-3   10-2    10-1110  66%66%   WFQE   WF²QE   2DFQE10-310-20.1110Latency [s]t1t2t3t4t5t6t70% Unpredictablet1t2t3t4t5t6t733% Unpredictablet1t2t3t4t5t6t766% Unpredictablelatencies converge towards the latency of the most expensive
requests in the system.
Figure ¸z (bottom le(cid:22)) plots CDFs of the service lag stan-
dard deviation across all tenants. It shows the successive in-
crease in the proportion of tenants with high standard devi-
ation – this corresponds to the unpredictable tenants. _e
remaining predictable tenants experience approximately ¸§ to
¸(cid:254)× reduced standard deviation under zDFQE compared to
WFQE and WFzQE.
6.2.2 Production Workloads
Finally, we run a suite of ¸(cid:254)§ experiments derived from pro-
duction workloads of Azure Storage. We simulate the service
received by tenants under WFQE, WFzQE, and zDFQE, as
we randomly vary several parameters: the number of worker
threads (z to @(cid:13)); the number of tenants to replay (§ to (cid:13)§§);
the replay speed (§.(cid:254)-(cid:13)×); the number of continuously back-
logged tenants (§ to ¸§§); the number of artißcially expensive
tenants (§ to ¸§§); and the number of unpredictable tenants
(§ to ¸§§). To compare between experiments, we also include
T¸ . . .T¸z.
We measure the (cid:146)(cid:146)th percentile latency of tenants in each
experiment and calculate the relative speedup of zDFQE com-
pared to WFQE and WFzQE. As an example, in the “§% Unpre-
dictable” experiment of §@.z.¸, T¸’s (cid:146)(cid:146)th percentile latency was
h.hms under zDFQE, (cid:13).(cid:254)ms under WFQE, and z˙ms under
WFzQE, giving zDFQE a speedup of ¸.(cid:13)× over WFQE and ˙.(cid:254)×
over WFzQE.
Figure ¸ha (le(cid:22)) plots the distribution of zDFQE’s speedup
over WFQE and WFzQE. Across the experiments, zDFQE sig-
nißcantly improves (cid:146)(cid:146)th percentile latency for tenants such
as T¸, whose requests are small and predictable (illustrated in
§z). T¸ has a median improvement of h.˙× over WFQE and
¸(cid:13)z× over WFzQE. However, zDFQE does not improve (cid:146)(cid:146)th
percentile latency as much for tenants with large and/or un-
predictable requests, such as T¸§ and T¸z. Figure ¸ha (right)
plots the (cid:146)(cid:146)th percentile latencies across all experiments for
T¸§, comparing zDFQE to WFQE (top) and WFzQE (bottom).
zDFQE resulted in worse (cid:146)(cid:146)th percentile latency for T¸§ in @(cid:13)
of the experiments for WFQE and (cid:13)6 for WFzQE. However,
when zDFQE did improve latencies for T¸§, it was by signif-
icantly larger factors (up to @¸×) than when latencies were
worse (up to (cid:254)×).
To better understand how zDFQE improves latencies for
tenants with smaller requests, we repeat the experiment suite
to include the ßxed-cost tenants t¸ . . . t6 as described in §@.¸.z.
Figure ¸hb plots the distribution of zDFQE’s speedup over
WFQE and WFzQE for t¸ . . . t6, and illustrates how latency
is primarily improved for tenants with small requests (t¸).
Conversely, tenants with very expensive requests such as t6
and T¸z see little, if any improvement.
Overall, the experiments where WFQE and WFQE per-
formed best correlated with low numbers of both unpredictable
and expensive tenants, for which request cost estimates were
accurate and there was little chance for thread pool blocking.
On the other hand, the experiments where zDFQE performed
best correlated with high numbers of either unpredictable
or expensive tenants, with most speedups occurring when
(a) (cid:146)(cid:146)th percentile latency speedups for T¸ . . .T¸z comparing zDFQE to
WFQE (top row) and WFzQE (bottom row). Scatter plots show T¸§’s (cid:146)(cid:146)th
percentile latencies in detail, each point representing one experiment.
(b) Results for t¸ . . . t6 from repeated experiment suite.
Figure ¸h: Comparison of (cid:146)(cid:146)th percentile latencies across ¸(cid:254)§ experiments
based on production workloads. Whiskers extend to min and max values.
both were true. WFQE and WFzQE rapidly deteriorate as
the workload becomes unpredictable, increasing the relative
improvement of zDFQE. For example, in §@.z.¸, the initial
workload (§% Unpredictable) was more predictable than a
typical workload, and zDFQ only improved (cid:146)(cid:146)th percentile
latency for T¸ by a factor of approximately ¸.(cid:254)× over WFQE.
¸§§×. _e suite of ¸(cid:254)§ experiments presented here similarly
On the other hand, the ßnal workload (@@% Unpredictable)
was less predictable than a typical workload, and T¸’s (cid:146)(cid:146)th
percentile latency improvement over WFQE was more than
vary in how predictable they are, and the range of (cid:146)(cid:146)th per-
centile latency speedups illustrated in Figure ¸ha (le(cid:22)) re(cid:6)ect
this range.
7. DISCUSSION
zDFQ Intuition zDFQ improves service compared to WFQ
and WFzQ primarily due to the manageable mix of predictable,
unpredictable, cheap and expensive requests in real workloads.
Consider the illustration in Figure ¸(cid:13). At one extreme we have
predictable workloads with low variation in request cost or
workloads that are preemptible (). _is scenario is repre-
sentative of packet scheduling on network links, and WFQ,
WFzQ and zDFQ would provide similarly good quality of
service because little, if any, blocking can occur. At the other
extreme lie workloads with hugely varying request costs and
completely unpredictable tenants (). In this scenario, all
schedulers would behave poorly because blocking would be
155
-100x-10x010x100x1000xT1T2T3T4T5T6T7T8T9T10T11T12WFQE2DFQE 99% Speedup0.11101000.1110100T10WFQE  99% Latency (s)2DFQE  99% Latency (s)-100x-10x010x100x1000xT1T2T3T4T5T6T7T8T9T10T11T12WF²QE2DFQE 99% Speedup0.11101000.1110100T10WF²QE  99% Latency (s)2DFQE  99% Latency (s)-100x-10x010x100x1000xt1t2t3t4t5t6t72DFQE99% SpeedupWFQE-100x-10x010x100x1000xt1t2t3t4t5t6t7E2DFQE99% SpeedupWF²QEis the preferred approach in cloud services [¸(cid:254)] for eıciency
and to keep low-level resource queues (e.g., disk) short.
_e challenges presented in this paper are the result of wide
cost variation in cloud services. An alternative approach is
to reduce cost variation by splitting up long requests into
shorter ones [¸(cid:254)]. For example, a(cid:22)er ¸§§ms of work a request
could pause and re-enter the scheduler queue. However, this
approach implies more overhead on the developer; it can be
applied only to certain request types; and it a(cid:242)ects execution ef-
ßciency because of, e.g., data loaded in various system caches.
8. RELATED WORK
We discuss related work based on the core challenges ad-
dressed in this paper.
Packet Scheduling Fair queue scheduling has been devel-
oped in the context of packet scheduling [@,zh,(cid:13)@,(cid:254)§], where
packets are sent sequentially across a single link. Because of
this, the majority of papers in this area only consider sequen-
tial execution. An exception is, for example, MSFzQ [˙], where
the authors consider scheduling packets across multiple ag-
gregated links. While this setting is very close to ours, the
scheduler is a direct extension of WFzQ and we found that it
produces near identical behavior in the presence of large re-
quests. Single-link schedulers such as WFQ [(cid:13)@] or WFzQ [@]
require packet size to schedule because they order (cid:6)ows based
on their ßnish tag. SFQ [zh] does not need the packet size be-
fore scheduling the packet because it selects packets based on
their start tag, which is computed based on sizes of previous
packets. When a packet completes, its observed cost is used
to update the start tag of its (cid:6)ow. When applied to request
scheduling where multiple requests of the same tenant can
execute concurrently, this approach, however, does not work
because we would have to execute each tenant sequentially.