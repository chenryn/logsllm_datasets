1.16
1.06
1.01
1.03
1.00
1.29
1.58
1.21
48.50
2.89
2.95
2.40
5.99
4.96
2.32
255.00
120.00
Avg= 537.11×
Avg= 88.56×
Avg= 1.15× Avg= 49.45×
Table 1: The performance (no. of equivalence and membership queries) of the SFA learning algorithm with
and without initialization for diﬀerent rules from two WAFs (ModSecurity OWASP CRS and PHPIDS).
OS
OSX Yosemite (version 14.5.0)
Debian Linux (Kernel v3.2.0)
FreeBSD 10.3
States Queries
7
9
9
858
1100
1100
Table 2: Results for diﬀerent TCP implementations:
Number of states in each model and number of mem-
bership queries required to infer the model.
Input
S, S
S, A, F
S, RA, A
Linux
SA, RA
SA, A, FA
SA, R
OSX
FreeBSD
SA, RA, RA
SA
SA, R
SA
SA
SA
Table 3: Some example ﬁngerprinting packet se-
quences found by SFADiff across diﬀerent TCP im-
plementations. The TCP ﬂags that are set for the
input packets are abbreviated as follows: SYN(S),
ACK(A), FIN(F), and RST(R).
mulates a membership query, our client implementation cre-
ates a sequence of TCP packets corresponding to the sym-
bols and sends them to the server.
Our server module is a simple python script which works
as follows: The script is listening for new connections on a
predeﬁned port. Once a connection is established our server
module makes a single recv call and then actively close the
connection. In addition, for each diﬀerent membership query
we spawn a new server process on a diﬀerent port to ensure
that packets belonging to diﬀerent membership queries will
not be mixed together.
The learning algorithm handles the sequence and acknowl-
edgement numbers in the outgoing TCP packets in the fol-
lowing way: a random sequence number is used as long as no
SYN packet is part of a membership query; otherwise, after
sending a SYN packet we set the sequence and acknowledge-
ment numbers of the following packets in manner consistent
with the TCP protocol speciﬁcation. In case the learning
algorithm receives a RST packet during the execution of a
membership query, we also reset the state of the sequence
numbers, i.e. we start sending random sequence numbers
again until the next SYN packet is send.
After sending each packet from a membership query, the
learning algorithm waits for the response for each packet us-
ing a time window. If the learning algorithm receives any re-
transmitted packets during that time, it ignores those pack-
ets. We detect re-transmitted packets by checking for du-
plicate sequence/acknowledgement numbers.
Ignoring the
re-transmitted packets is crucial for the convergence of the
learning algorithm as it helps us avoid any non-determinism
caused by the timing of the packets.
Initialization. As TCP membership queries usually out-
puts more information in terms of packets than one bit, our
algorithm worked eﬃciently for the TCP implementations
even without any initialization. Therefore, for the TCP ex-
periments, we start the learning algorithm without any ini-
tial model.
Results. We used SFADiff in order to infer models for the
TCP implementations of three diﬀerent operating systems:
Debian Linux, Mac OSX and FreeBSD. The inferred models
contain all state transitions that are necessary to capture a
full TCP session. Figure 4 shows the inferred state machine
for Mac OSX. States in green color are part of a normal
TCP session while states in red color are reached when an
invalid TCP packet sequence is sent by the client. The path
q0 → q1 → q3 is where the TCP three-way handshake takes
place and it is leading to state q3 where the connection is es-
tablished, while the path q3 → q6 → q0 close the connection
and returns to the initial state (q0). Table 2 shows that the
inferred model for Mac OSX contain fewer states than the
respective FreeBSD and Linux models. Manual inspection
of the models revealed that these additional states are due
to diﬀerent handling of invalid TCP packet sequences. Fi-
nally, in Table 3, we present some sample diﬀerences found
by SFADiff. Note that, even though the state machines
of Linux and FreeBSD contain the same number of states,
they are not equivalent, as we can see in Table 3, since the
two implementations produce diﬀerent outputs for all three
inputs.
5.3 Web Application Firewalls and Browsers
In this setting, we perform two sets of experiments: (i)
we use SFADiff to explore diﬀerences in HTML/JavaScript
signatures used by diﬀerent WAFs for detecting XSS attacks;
and (ii) we use SFADiff to ﬁnd diﬀerences in the JavaScript
parsing implementation of the browsers and the WAFs that
can be exploited to launch XSS attacks while bypassing the
WAFs.
For these tests, we conﬁgure the WAFs to run as a server
and the learning algorithm executes as a client on the same
machine. The browser instance is also running on the same
machine. The learning algorithm communicates with the
browser instance through WebSockets. The learning algo-
to allow/block the payload, and communicates the decision
back to SFADiff. SFADiff caches the results of the mem-
bership queries in order to be reused in the future.
Equivalence queries. We perform equivalence queries in
two ways: ﬁrst, whenever an equivalence query is sent ei-
ther to the browser or to a WAF, we check that the model
complies to the answers of all membership queries made so
far. This ensures that simple model errors will be corrected
before we perform more expensive operations such as cross-
checking the two models against each other. Afterwards,
we proceed to collect candidate diﬀerences and verify them
against the actual test programs as described in Section 4.
Initialization. We initialize the observation tables for both
the browser and the WAF using a small subset of ﬁlters that
come bundled with PHPIDS and ModSecurity, two open-
source WAFs in our test set. However, in the case of the
browser we slightly modify the ﬁlters in order to execute
our JavaScript function call if they are successfully parsed
by the browser.
Fingerprinting WAFs. In order to evaluate the eﬃciency
of our ﬁngerprint generation algorithm we selected 4 diﬀer-
ent WAFs. Furthermore, To demonstrate the ability of our
system to generate ﬁne-grained ﬁngerprints we also include
4 diﬀerent versions of PHPIDS in our test set. As an ad-
ditional way to avoid blowup in the ﬁngerprint tree size we
employ the following optimization: Whenever a ﬁngerprint
is found for a pair of ﬁrewalls, we check whether this ﬁnger-
print is able to distinguish any other ﬁrewalls in the set and
thus further reduce the remaining possibilities. This simple
heuristic signiﬁcantly reduces the size of the tree: Our basic
algorithm creates a full binary tree of height 8 while this
heuristic reduced the size of the tree to just 4 levels.
Figure 5.3 presents the results of our experiment. The re-
sulting ﬁngerprinting tree also provides hints on how restric-
tive each ﬁrewall is compared to the others. An interesting
observation is that we see the diﬀerent versions of PHPIDS
to be increasingly restrictive in newer versions, by rejecting
more of the generated ﬁngerprint strings. This is natural
since newer versions are usually patching vulnerabilities in
the older ﬁlters. Finally, we would like to point out that
some of the ﬁngerprints are also suggesting potential vulner-
abilities in some ﬁlters. For example, the top level string,
union select from, is accepted by all versions of PHPIDS up
to 0.6.5, while being rejected by all other ﬁlters. This may
raise suspicion since this string can be easily extended into
a full SQL injection attack.
Evading WAFs through browser parser inference.
For our last experiment we considered the setting of evaluat-
ing the robustness of WAFs against evasion attacks. Recall,
that, in the context of XSS attacks, WAFs are attempting to
reimplement the parsing logic of a browser in order to detect
inputs that will trigger JavaScript execution. Thus, ﬁnd-
ing discrepancies between the browser parser and the WAF
parser allows us to eﬀectively construct XSS attacks that
will bypass the WAF. In order to accomplish that, we used
the setup described previously. However, instead of cross-
checking the WAFs against each other, we cross-checked
WAFs against the web browser in order to detect inputs
which are successfully executing JavaScript in the browser,
however they are not considered malicious by the WAF.
Table 4 shows the result of a sample execution of our sys-
tem in the setting of detecting evasions. The execution time
of our algorithm was about 6 minutes, in which 53 states
Figure 5: The setup for SFADiff ﬁnding diﬀer-
ences between the HTML/JavaScript parsing in
Web browsers and WAFs.
Figure 6: The implementation of membership
queries for Web browsers.
rithm can test whether an HTML page with some JavaScript
code is correctly parsed by the browser and if the embedded
JavaScript is executed or not by exchanging messages with
the browser instance. The overall setup is shown in Figure 5.
Alphabet. We used an alphabet of 92 symbols containing
most printable ASCII characters. This allows us to encode
a wide range of Javscript attack vectors.
Membership queries to the browser. In order to allow
the learning algorithm to drive the browser, we make the
browser connect to a web server controlled by the learning
algorithm. Next, the learning algorithm sends a message to
the browser over WebSockets with the HTML/JavaScript
content corresponding to a membership query as the mes-
sage’s payload. Upon receiving such a message, the browser
sets the query payload as the innerHTML of a DOM element
and waits for the DOM element to be loaded. The user’s
browser dispatches a number of events (such as “click”) on
the DOM element and examines if the provided string led
to JavaScript execution. These events are necessary for trig-
gering the JavaScript execution in certain payloads. In order
to examine if the JavaScript execution was successful, the
browser monitors for any change in the value of a JavaScript
variable located in the page. The payload, when executed,
changes the variable value in order to notify that the exe-
cution was successful. Furthermore, in order to cover more
cases of JavaScript execution, the user’s browser also moni-
tors for any JavaScript errors that indicate JavaScript exe-
cution. After testing the provided string, the user’s browser
sends back a response message containing a boolean value
that indicates the result. The results of the membership
queries are cached by the learning algorithm in order to be
reused in the future. The details of our implementation of
membership queries for the browsers is shown in Figure 3.
Membership queries to the WAF. SFADiff sends an
HTTP request to the WAFs containing the corresponding
HTML/JavaScript string as payload to perform a member-
ship request, The WAF analyzes the request, decides whether
Web	browser	WAF	SFADiﬀ	HTTP		request/	response	Web	Sockets	Membership	queries	Membership	queries	Ini>alize	SFA	for		Web	Browser	&	WAF	True%/%False%Membership%%query%DOM%Element%Insert%string%in%a%DOM%element%Trigger%Events%JS%Variable%Check%%JS%variable%Payload%manipulates%%JS%variable%Web%browser%x ∈ {=}
qp
1
qp
0
x ∈ \w
x (cid:54)∈ {=}
x (cid:54)∈ \w
qp
2
true
Figure 7: PHPIDS 0.7 parser (simpliﬁed version).
x (cid:54)∈ {;,-,!} ∪ \w
x ∈ \w
PHPIDS 0.4
Permits
Blocks
PHPIDS 0.6.4
case(
Permits
” background=a
Blocks
Permits
PHPIDS 0.5.0
Permits
union distinct (select
x ∈ {=}
x ∈ {;,-,!}
qc
2
qc
1
qc
0
x ∈ \w
x (cid:54)∈ {=}
x (cid:54)∈ \w
qc
3
true
) when 1 then
Blocks
Permits
Blocks
PHPIDS 0.6.3
PHPIDS 0.6.5
WebCastellum 1.8.4
union select from
Permits
Figure 8: Google Chrome parser (simpliﬁed ver-
sion).
were discovered in the browser parser and 36 states in PH-
PIDS. Our system converged fast into a vulnerability after
improving the generated SFA models using the cached mem-
bership queries. This optimization was very important in
order to correct invalid transitions generated by the learn-
ing algorithm in the inferred models. The number of invalid
attacks that were attempted was 4. Each failed attack led
to the reﬁnement of the SFA models and the generation
of new candidate diﬀerences. At some point the vector “” was reported as a diﬀerence by SFAD-
iff.
We were able to detect the same vulnerability using all
major browsers and furthermore, the same problem was
found to aﬀect the continuation of PHPIDS, the Expose
WAF. Finally, we point out that our algorithm also found
three more variations of the same attack vector, using the
characters “!”, and “;”.
Evasion analysis. Figures 7 and 8 shows simpliﬁed mod-
els of the parser implemented by the WAF and the browser
respectively. These models contain a minimal number of
states in order to demonstrate the aforementioned evasion
attack. Notice that, intuitively, the cause for the vulnera-
bility is the fact that from state qp
1 the parser of PHPIDS