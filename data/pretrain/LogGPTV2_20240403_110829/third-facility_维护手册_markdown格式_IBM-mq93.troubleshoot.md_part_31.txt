### Initial Checks on IBM i (Page 20)

Before delving into detailed problem determination on IBM i, it is advisable to first consider whether there is an obvious cause of the issue or an area of investigation that is likely to yield useful results. This approach can often save significant time and effort by quickly identifying simple errors or narrowing down the range of possible causes.

#### Related References
- **Messages and Reason Codes**
- **Application Balancing Troubleshooting**

### Troubleshooting Application Balancing

This section provides guidance on troubleshooting issues related to application balancing. Many symptoms can be diagnosed using the `DISPLAY APSTATUS` command in various ways.

#### Symptom: The Expected Application is Not Listed
**Solution:**
- Verify that the `APPLTAG` field is set correctly, either in the code or when the application is started.
- Investigate other listed applications in the `DIS APSTATUS(*)` output to check for unexpected entries due to incorrect naming or defaulting.
- Run the command `DIS APSTATUS(X) TYPE(LOCAL) where(MOVABLE eq NO)` on each queue manager in the uniform cluster to identify non-distributable application instances.

#### Symptom: The Expected Total Number of Applications Are Not Listed
**Solution:**
- Ensure that the expected number of instances are being launched to connect to the uniform cluster.
- Confirm that the uniform cluster is communicating correctly and all queue managers are reporting application counts in `DIS APSTATUS(X) TYPE(QMGR)`.

#### Symptom: The Expected Total Number of Applications Are Listed, but Some Are Flagged as Not Movable
**Solution:**
- On each queue manager in the uniform cluster, use `DIS APSTATUS(X) TYPE(LOCAL) where(MOVABLE equals NO)` and investigate the `IMMREASN` field.

#### Symptom: The Balanced State is UNKNOWN
**Solution:**
- This is a temporary state and will resolve itself shortly. Retry the command after a short while.

#### Symptom: The Balanced State is NOTAPPLIC
**Solution:**
- If the queue manager is not part of a uniform cluster, the balance state will always be `NOTAPPLIC` as nothing can be rebalanced.
- In a uniform cluster, this indicates that no application with this name has ever connected as movable. Use `DIS APSTATUS(X) TYPE(LOCAL) where(MOVABLE eq NO)` to investigate the `IMMREASN` field.

#### Symptom: The Balanced State is NO
**Solution:**
- Monitor the output over a period of time. If applications are constantly connecting and disconnecting, this might be the appropriate answer as instances do not have the chance to rebalance.
- Use `DIS APSTATUS(X) TYPE(QMGR)` to investigate the numbers on each queue manager, which can indicate surplus or deficit instances. Continue the investigation on those queue managers.

#### Symptom: Not All Queue Managers in the Uniform Cluster Are Listed
**Solution:**
- Verify that the `BALSTATE` is not `NOTAPPLIC`, as this prevents information from being distributed around the uniform cluster.
- Use `DIS APSTATUS(X) TYPE(LOCAL)` to look at the `IMMREASN` field.
- Ensure that any missing queue managers are running.
- Verify the state of clustering and that channels are running between the queue managers.

#### Symptom: A Queue Manager is Listed as ACTIVE(NO)
**Solution:**
- Verify that any missing queue managers are running.
- Check the state of clustering and ensure that channels are running between the queue managers.

#### Symptom: A Queue Manager Has Some Immoveable Instances of an Application
**Solution:**
- On that queue manager in the uniform cluster, use `DIS APSTATUS(X) TYPE(LOCAL) where(MOVABLE eq NO)` and investigate the `IMMREASN` field.

#### Symptom: The BALSTATE is Unexpected
**Solution:**
- Monitor the `BALSTATE` over time, as it reflects the state when the queue manager last attempted to rebalance applications, which happens periodically.
- Determine if applications are continually connecting and disconnecting, which might prevent stable rebalancing.
- If the `BALSTATE` remains unbalanced, check the error logs on queue managers with `BALSTATE(HIGH)` and `BALSTATE(LOW)` to see if they are requesting application instances and how many were permitted to move.
- Verify `DIS APSTATUS(X) TYPE(LOCAL) where(IMMCOUNT gt 1)` to see if there are instances failing to move when requested.

### Using `DIS APSTATUS(X) TYPE(LOCAL)`

This display command can help diagnose issues that prevent an application from rebalancing as expected. First, check the `IMMDATE` and `IMMTIME` fields to see if the application is only temporarily marked as immovable.

#### IMMREASN Actions
- **NOTCLIENT**: The application uses server bindings and cannot be moved. Modify the application to use a client connection, which may require rebuilding depending on the language and library versions.
- **NOTRECONN**: The application connection is not marked as 'reconnectable'. This might be a design decision or a configuration error. For application balancing, `RECONNECT_QMGR` must allow reconnection to different queue managers.
- **APPNAMECHG**: The application makes multiple connections on the same TCP connection with different application names, preventing reliable separation and rebalancing.
- **MOVING**: This is a temporary status indicating that the application instance has been identified for rebalancing.
- **INTRANS**: The application is in a transaction, so rebalancing is avoided to prevent rollback. If rollbacks are acceptable, modify the application or configuration settings.
- **REPLY**: The application is waiting for a response to a request message. Marking the application as type 'SIMPLE' or configuring the timeout can prevent this wait.

### Applications Continually Connect or Disconnect

A symptom and solution associated with applications continually connecting or disconnecting, or failing to reach the expected balance.

#### Symptom: All Application Instances Appear Movable, but Instances Are Continually Rebalancing and Failing to Reach Equilibrium
**Solution:**
- Ensure that all members of the uniform cluster are represented in the CCDT provided to client applications, including temporarily inactive members.
- Correct any errors in the CCDT and redeploy the file to all clients. No need to restart client applications, as they will locate the modified entries during the next reconnect attempt.
- If CCDT entries are correct, check for issues with the listener or SRVCONN channel definitions on some cluster members.

### Issues During REFRESH CLUSTER

Issuing `REFRESH CLUSTER` can disrupt the cluster, making cluster objects temporarily invisible. This can affect running applications. The following reason codes might be seen:

- **2189 MQRC_CLUSTER_RESOLUTION_ERROR**
- **2085 MQRC_UNKNOWN_OBJECT_NAME**
- **2041 MQRC_OBJECT_CHANGED**
- **2082 MQRC_UNKNOWN_ALIAS_BASE_Q**
- **2270 MQRC_NO_DESTINATIONS_AVAILABLE**

These reason codes indicate name lookup failures, which are expected during the `REFRESH CLUSTER` operation. They are usually temporary and retry-able conditions. For a modest-sized cluster, completion should be quick.

#### Multi-Hop Scenarios
In multi-hop scenarios, a name lookup failure caused by `REFRESH CLUSTER` can occur on a remote queue manager. The application receives a success return code, but the name lookup failure prevents the message from being routed to the destination queue, leading to dead letter queue operations.

#### Detailed Reason Code Explanations
- **2189 (MQRC_CLUSTER_RESOLUTION_ERROR)**: Local queue manager did not receive a response from full repositories within 10 seconds.
- **2085 (MQRC_UNKNOWN_OBJECT_NAME)**: Full repositories do not know about the queue name. This condition will clear once internal mechanisms complete.
- **2041 (MQRC_OBJECT_CHANGED)**: Local queue manager knows about the queue but the record of the queue manager is being updated. Retrying the operation will succeed.
- **2082 (MQRC_UNKNOWN_ALIAS_BASE_Q)**: Similar to `MQRC_UNKNOWN_OBJECT_NAME`, but for local aliases.
- **2001 (MQRC_ALIAS_BASE_Q_TYPE_ERROR)**: Seen in queue manager error logs, indicating an alias processing issue.
- **2270 (MQRC_NO_DESTINATIONS_AVAILABLE)**: Occurs when destination objects are temporarily unavailable during `REFRESH CLUSTER`.

### Additional Considerations
- **Clustered Publish/Subscribe Activity**: `REFRESH CLUSTER` can temporarily lose subscriptions, causing missed messages.
- **Best Practices for REFRESH CLUSTER**: Refer to best practices for minimizing disruptions.

#### Related Concepts
- **REFRESH CLUSTER Considerations for Publish/Subscribe Clusters**
- **Clustering: Using REFRESH CLUSTER Best Practices**

#### Related References
- **MQSC Commands Reference: REFRESH CLUSTER**

### Cluster-Sender Channel Continually Trying to Start
**Symptom:**
- Check that the queue manager and listener are running.
- Verify that the cluster-sender and cluster-receiver channel definitions are correct.