lower in the dtrack dataset (52%), possibly due to dtrack’s detec-
tion of shorter-lived border changes that Atlas traceroutes are not
frequent enough to observe. Sibyl’s patching improves over peri-
odic traceroutes but is inferior to dtrack and signals. The figure
shows vertical lines indicating the average per-path probing rate for
CAIDA’s Ark [12] and RIPE Atlas when configured to monitor 5500
paths, as in our dataset. The results show that signals would pro-
vide significant benefit for these systems, even if they ran dtrack
instead of periodic traceroutes. Optimal signals outperform all ap-
proaches until the probing budget is enough to remap all signals,
at which point optimal signals flatlines due to limited coverage.
Although the optimal line shows there is room for improvement,
our proposed signal-generation techniques and public data already
capture most of the changes in the dtrack dataset.
5.4 Impact of Load Balancing
Paths with load balancing can cause traceroutes to change over
time, even without an underlying path change, potentially intro-
ducing false positive staleness prediction signals. Recent work found
that 81% of load balanced paths diverged and reconverged within
the same AS [77]. These instances of intradomain load balancing do
not impact our staleness prediction signal techniques, since we focus
on detecting path changes that occur at AS borders. So, we evaluate
how our techniques act in the uncommon case of interdomain load
balancing [3, 77], where the load balanced paths diverge in one AS
and reconverge in another AS. We obtained the divergence and
convergence IP addresses of interdomain load balanced paths de-
tected by Diamond Miner [77]. The set of load balanced alternatives
between a divergence and convergence point is called a diamond.
The authors of Diamond Miner provided us with 81, 581 inter-
domain diamonds collected in August 2019. The diamonds include
3, 627 divergence IP addresses and 58, 647 convergence IP addresses
between 5, 567 AS pairs (644 divergence ASes and 3, 197 conver-
gence ASes). We collected public RIPE Atlas traceroutes between
2019/08/1-14 that traverse the same pairs of divergence and con-
vergence addresses. In total we found 3, 181, 062 traceroutes that
traverse 1, 711 diamonds that involve 635 divergence and 1, 583
convergence IPs. We computed staleness prediction signals as de-
scribed in Sections 4.2.1 and 4.2.2 (using a 12-hour window). Our
techniques did not detect any staleness prediction signals (false or
otherwise) overlapping 91.2% of the 1, 711 diamonds.
10−410−310−2Average Per-Path Probing Rate [pps/path]0.00.20.40.60.81.0Fraction of BorderChanges DetectedCAIDA ArkRIPE Atlas  @5500    pathsSignals (optimal)SignalsDTrack + SignalsDTrackRound-robin + SibylRound-robinIMC ’20, October 27–29, 2020, Virtual Event, USA
Vasileios Giotsas et al.
Figure 10: Precision of staleness prediction signals for load-
balanced and non-load-balanced paths.
To give context to the performance of our techniques on the
168 diamonds (9.8%) where we detect overlapping staleness pre-
diction signals, we collected the set of RIPE Atlas traceroutes that
passed through the same AS pair as one of the 1, 711 diamonds
but did not include a divergence IP address (i.e., did not include
a known load balancer, although for simplicity we will refer to
them as non-load-balanced paths). In total, our techniques detected
staleness prediction signals for 7.1% of the non-load-balanced seg-
ments for the same time period, which we compare to the staleness
prediction signals detected for the segments overlapping the 168
diamonds. Figure 9 compares the distribution of staleness prediction
signals (i.e., number of changes predicted) per interdomain segment
that are load-balanced (diamonds) versus segments that are not load-
balanced. The graph shows that our techniques detect a similar
number of staleness prediction signals for the two types of segments,
with non-load-balanced paths predicted to change slightly more
often. This result suggests that our techniques are able to account
for the varying paths observed by traceroutes across a load bal-
ancer without falsely inferring many path changes. Figure 10 shows
the distribution of the precision of these signals. Whereas signals
for non-load-balanced segments have a median precision of 84%,
signals for path segments with load balancers exhibit a median
precision of 68%, suggesting that load balancers sometimes trick
our techniques into falsely inferring a path has changed.
The precision of our traceroute-based techniques is 82% over-
all (Table 2), and this analysis suggests that one source of errors
is interdomain load balancing, which is only known to occur in a
small fraction of ASes (representing 19% of diamonds according
to Diamond Miner’s lenient definition of interdomain [77] that in-
cludes some diamonds that end at but do not cross a border, or 4.7%
according to a more conservative definition [3]). Even for paths
traversing load balancers, our precision remains high. In the future,
we can investigate how to incorporate Diamond Miner results into
our techniques, perhaps by not considering as an outlier changes
that may just represent shifts across branches of a diamond.
6 EVALUATION OF USE CASES
Our techniques (i) improve a state-of-the-art measurement tool (§6.1);
(ii) enable efficient (re)use of rate-limited traceroutes (§6.2); and (iii)
improve a system that relies on a traceroute corpus (Appendix D).
6.1 Integration with dtrack
We integrate our techniques into an extended version of dtrack,
dtrack+signals, that checks for path changes whenever our tech-
niques generate a signal. We match signals and route changes as
described in §5.3. For traceroute-based signals, dtrack+signals
sends a detection probe to one of the hops inferred as changed by the
Figure 11: Number of fresh and stale RIPE Atlas traceroutes
accumulated from 01–15 May 2020. Signals identify which
traceroutes remain fresh and safe to use.
signal; for BGP-based signals that identify the AS-border where the
change occurred, dtrack+signals sends a detection probe to the
far end of the border link that triggered the signal; for BGP-based
signals that identify a set of ASes that might have triggered the
change, dtrack+signals sends a detection probe to the last hop in
each AS. If a probe confirms the change, a remap is triggered. These
single-probe checks for path changes integrate seamlessly into
dtrack’s change detection, allowing dtrack+signals to spend
one or a few probes to identify and ignore incorrect signals (false
positives). Our signals help dtrack+signals target paths that have
likely changed, increasing probe utility and detecting more changes.
Our signals require dtrack+signals to invest probes into verifying
changes; however, signal verification takes one or a few probes, and
signal precision is high (Table 2), resulting in improved detection.
Figure 8 shows that dtrack+signals performs similarly to sig-
nals alone when the probing budget is low, but it is not limited
by coverage as the budget increases as the excess budget can be
used by “vanilla” dtrack’s detection probes allocated according
to its predictions of which paths are least stable. For example, at
Ark’s probing budget, dtrack+signals detects 24% more border
changes than dtrack. As the probing budget increases, the rel-
ative benefit of signals and the difference between dtrack and
dtrack+signals decreases. However, signals still provide gains
even at high probing budgets as signals help dtrack+signals de-
tect when paths become unstable after long stability periods, a
transition that is particularly hard to predict [19]. With a probing
budget of 0.003 pps/path, vanilla dtrack misses changes after 25%
of true positive staleness prediction signals (not shown).
6.2 Reusability of Archival Traceroutes
In addition to keeping an individual system’s corpus fresh, our
staleness detection techniques can be applied to the huge corpus of
publicly accessible traceroutes, enabling two related applications.
First, by identifying traceroutes collected over a long time window
that are still valid, these traceroutes can be used to generate a set of
usable traceroutes vastly larger than the probing budget allocated
to individual experiments. Second, they can be applied to requests
for new traceroutes to identify those that can be safely served by an
existing traceroute, giving requesters an option to reduce system
load and preserve their budgets for other measurements.
Repurposing Existing Measurements to Identify Stale Traceroutes
IMC ’20, October 27–29, 2020, Virtual Event, USA
This section evaluates those two use cases on the 1.15 billion
public RIPE Atlas traceroutes issued in the first two weeks of May
2020. We classify a traceroute as “stale” if our techniques detect at
least one staleness prediction signal after it is issued. If we detect no
signals of change for a traceroute, we characterize it as “fresh” if our
techniques and vantage points suffice to monitor every border-level
interconnection, or “unknown” if they can monitor only a subset
(or none). We use all public RIPE traceroutes for our techniques, to
understand the full potential of reusing archived traceroutes.
Figure 11 shows that, at the end of our measurement period,
RIPE Atlas has executed over 690 million traceroutes (60%) that are
still fresh in terms of border-level IP hops and therefore reusable.
As a point of comparison, RIPE Atlas limits a user to 1M credits per
day at a cost of 10-30 credits per traceroute, so a user can issue up to
1.4 million traceroutes in two weeks. The set of available RIPE Atlas
Probes changes over time, and 4% of the reusable traceroutes cannot
be remeasured because the source Probe stopped being available
(“fresh, dead Probe”). While proportionally small, the number of
“fresh” traceroutes that can be safely used but not measured again
is over 27 million. While stale traceroutes also increase over time,
RIPE Atlas accumulates new traceroutes at a faster rate.
We next investigate the benefit that this high degree of reusability
can have on preserving measurement budget and reducing system
load. Of the 1.15 billion traceroutes, 985 million are user-defined
measurements (UDMs) rather than RIPE’s built-in measurements.5
We consider a use case of needing the border-level path from (any
Probe in) a particular ⟨AS, city⟩ to a particular destination prefix.
We find that 90.3% of the UDMs (a median of 66 million traceroutes
per day) can be satisfied by an already measured traceroute. How-
ever, such a drastic reduction of the number of public traceroutes
will also affect our ability to detect stale traceroutes. To estimate
the actual fraction of UDMs that can be avoided, we assume that
a UDM traceroute that can be satisfied by an existing traceroute
is not measured and exclude it from the traceroutes that our tech-
niques use to generate staleness prediction signals. The reduction
in available traceroutes also reduces coverage and requires more
UDMs. Under these conditions we find that 68.6% of the UDMs can
be avoided (median of 48.2 million measurements per day).
7 RELATED WORK
Section 2 discussed research which is most closely related to and
motivates ours. This section summarizes other work.
Reducing number and cost of traceroute measurements. Given re-
stricted budget constraints in measurement platforms, researchers
have proposed techniques to reduce the number of traceroute mea-
surement and the cost of individual measurements. Approaches
include avoiding redundant TTL-limited probes to routers close
to measurement sources and destinations [19, 22], pruning mea-
surement sources and destinations without sacrificing network
coverage [7, 71], or reducing the cost of route measurements [4, 78].
Our techniques are complementary to these approaches.
IGP/iBGP/eBGP dynamics. Teixeira et al. [73, 74] studied the im-
pact of hot-potato changes on BGP dynamics, and found that up to
5We consider a measurement a UDM if it has ID greater than 1,000,000 and is not an
Anchoring measurement [66].
5% of the externally-visible BGP updates of a backbone AS were
triggered by IGP events. These results have been confirmed by
follow-up work on the same network by Wu et al. [80]. Similarly,
Agarwal et al. [2] showed that local IGP engineering caused up to
25% of traffic with neighboring ASes to shift egress points. Park et
al. [62] investigated the root causes of BGP update duplicates, and
proposed a methodology to correlate duplicate updates with iBGP
dynamics. In particular, they observed that 96% of duplicate eBGP
updates were caused by an intradomain routing change which up-
dated a non-transitive BGP attribute, such as Cluster-ID and MED
values. Our work builds on these insights to detect IP-level changes
that generate BGP activity without AS-path changes.
Correlating changes across measurements. Fazzion et al. [25] pro-
posed techniques to verify if a change observed in a traceroute also
impact traceroutes from that source to other destinations. Their
techniques require active measurements to verify inferences.
Sibyl [18] is most similar to this paper. In addition to traceroute
patching described and evaluated in §5.3, Sibyl also converts each
traceroute to AS granularity, then monitors BGP route collectors for
overlapping paths to the destination. If the BGP feed later reveals a
change in the overlapping portion, but the first AS in the overlap
remains in the new AS path, Sibyl infers that the traceroute is out
of date. We build on this AS path monitoring (§4.1), and our other
techniques significantly extend Sibyl’s, allow detection of more
changes (§5.3), and require no active measurements.
8 CONCLUSION
In recent years, the number of available traceroute vantage points
has greatly increased, thanks to platforms such as RIPE Atlas. This
increase enables expanded coverage of the Internet, but the vantage
points are severely resource constrained and rate limited. These
rate limits make it challenging for systems and studies that use
large sets of traceroutes to reason about the Internet: accumulating
measurements over a longer time period increases coverage at
the expense of increased staleness, with path changes during the
measurement interval affecting the results.
Our work overcomes this tradeoff by inferring which traceroutes
in a corpus have gone stale due to path changes, allowing other
traceroutes to be safely used for long periods of time and avoiding
wasting measurements on unchanged paths. Our techniques use
patterns in BGP updates as signals for changes not explicitly visible
in the updates, and they monitor publicly available traceroutes to
look for changes that overlap the corpus. Combined, they detect 81%
of path changes. By recycling publicly available data, our techniques
enable the safe reuse of traceroutes known to be unchanged and
reduce the measurement budget needed to keep a corpus fresh.
Acknowledgements. This paper has been partially funded by a
RIPE NCC Community Projects Fund, NSF grant 1836872, CAPES,
CNPq, and FAPEMIG. We would like to thank the anonymous
reviewers and our shepherd Cristel Pelsser for their insightful com-
ments, and Kevin Vermeulen for aiding in the evaluation of the
impact of interdomain load balancers on our techniques.
IMC ’20, October 27–29, 2020, Virtual Event, USA
Vasileios Giotsas et al.
A PROCESSING TRACEROUTES
IP-to-ASN mapping. We map IP-level hops to ASNs using longest
prefix matching on BGP prefix advertisements received by the
RouteViews and RIPE RIS collectors. If a prefix is missing in global
routing tables, or in the case of Multi-Origin AS (MOAS) prefixes, we
use prefix assignment and delegation data from RIR databases. We
use traIXroute to correctly map IXP interfaces to ASNs [59]. When
mapping traceroute IPs to ASes, we merge consecutive identical AS
hops into one; if two hops that map to the same AS are separated
by one or more unmapped hops, we also merge them together. We
ignore all traceroutes whose AS mapping contains AS loops.
Mapping AS boundaries. To infer the AS boundaries in trace-
routes, we use bdrmapIT if the source of the traceroute data is
compatible with it [51]. Otherwise we use MAP-IT [52]. MAP-
IT may not be able to infer AS interconnections that do not ap-
pear in an adequate number of traceroutes. If for an interconnec-
tion ⟨IPASx , IPASy⟩ MAP-IT did not pinpoint the border IP and
bdrmapIT did not apply, we assume that both IPs are part of the
border unless IPASy
belongs to an IXP, which we then consider as
the border. We identify IP addresses that belong to the same router
by performing alias resolution using MIDAR [47]. By combining
the output of border mapping and alias resolution, we represent