51
Table 1. Logit Analysis of Multiple HoneyStat Events.
-17463.185 2696276.445
Variable β
port 80
.967
port 135 3.114
port 139 1869.151
303.517
port 445 -1495.040 281.165
port 3128 -18727.568 9859594.820
port 8080 10907.922 10907.922
constant
Signiﬁcance
Standard Error Wald
.995
.000
.001
10.377
.000
37.925
.000
28.274
.998
.000
6919861.448 .999
.210
1.089
.068
1.568
prior to Blaster’s outbreak on port 135, there were numerous scans being directed at
ports 139 and 445. The port 135 exploit eventually became more popular, since only a
few machines were vulnerable on 445 and 139. We are aware of no statistical test that
could focus on port 135 alone, given the high rate of probing being conducted on ports
139 and 445. This required human insight and domain knowledge to sort out.
One complicating factor occurs when two zero-day worms attack at the same time,
using different ports. For example, consider in the example what would happen if traf-
ﬁc to port 80 were a worm after all. In such a case, more data observations will be
required to separate out which events support a leading theory of causation. The logit
analysis will eventually select a pattern for one of the worms, and with the removal of
those observations, the second worm can be identiﬁed. (Recall that once identiﬁed, the
“explained” data is removed from the analysis queue.) Future work will explore the use
of Best Subsets logistic regression models[HL00], to avoid the linear identiﬁcation of
multiple worms.
The number of observations required for logistic regression appears to be a matter
of some recent investigation. In [HL00], the authors (eminent in the ﬁeld) note “there
has been surprisingly little work on sample size for logistic regression”. Some rough
estimates have been supplied. They note that at least one study show a minimum of 10
events per parameter are needed to avoid over/under estimations of variables [HL00].
Since each honeypot activity observation is paired with a corresponding inactivity ob-
servation, HoneyStat would need to generate ﬁve HoneyStat events to meet this require-
ment. Section 7 notes how waiting for this many observations potentially affects worm
detection time.
Since each event involves an actual compromise of a system, one could also report
alerts with a lower conﬁdence level. While we might want more samples and certainty,
we can at the very least rank likely ports in an alert.
6.2 Beneﬁts of HoneyStat
HoneyStat provides the following beneﬁts to local networks: (a) It provides a very ac-
curate data stream for analysis. Every event is the result of a successful attack. This
signiﬁcantly reduces the amount of data that must be processed, compared to Kalman
ﬁlter, and other traditional scan-based algorithms. (b) Since HoneyStat uses complete
operating systems, it detects zero day worms, for which there is no known signature.
(c) HoneyStat is agnostic about the incoming and outgoing ports for attack packets, as
52
David Dagon et al.
well as their origin. In this way, it can detect worms that enter on port Pa, and exit on
port Pb.
Thus, HoneyStat reports an explanation of worm activation, and not merely the
presence of a worm. Other information, such as rate of scans, can be obtained from
the trafﬁc logs captured for the logit analysis. [Kre03] has already suggested a simple
method of quickly extracting a binary signature, in a manner compatible with Honey-
Stat.
6.3 False Positive Analysis
Analyzing the false positive rate for HoneyStat is subtle. Since honeypot events always
involve breakins and successful exploits, it might seem that honeypot-based alert sys-
tems would produce no false positives. This is not the case. Although the underlying
data stream consists of serious alerts (successful attacks on honeypots), we still need
to analyze the potential for the logit analysis to generate a false positive. Two types of
errors could occur. First, normal network trafﬁc could be misidentiﬁed as the source
of an attack. That is, a worm could be present, but the analysis may identify other,
normal trafﬁc as the cause. Second, repeated human breakins could be identiﬁed as a
worm. We do not consider this second failure scenario, since in such a case, the manual
breakins are robotic in nature, and (for all practical purposes) indistinguishable from,
and potentially just as dangerous as any worm.
Model Failure. It is not feasible to test HoneyStat on the Internet. This would require
waiting for the outbreak of worms, and dedicating a large IP space to a test project. We
can instead perform an retrospective analysis of a traceﬁle to estimate the chance of a
false positive.
Using a honeypot activity log, dating from July 2002 to March 2004, we used uni-
form random sampling to collect background trafﬁc samples, and injected a worm at-
tack. The intuition is this: we wish to see if a HoneyStat logit analysis were to cause
a false positive. This could occur if normal non-malicious background trafﬁc occurs
in such a pattern that random sampling produces a candidate solution to the logistic
regression.
The data we use for the background sampling came from the Georgia Tech Hon-
eynet project. We have almost two years of network data captured from the Honeynet.
The ﬁrst year of data was captured on a Generation I Honeynet, which is distinguishable
by the use of a reverse ﬁrewall serving as the gateway for all the Honeypots. The second
year of data was captured from a Generation II Honeynet, which is distinguishable by
the use of a packet ﬁltering bridge between all of the Honeypots and their gateway. The
data is available to other researchers in a sanitized form.
A random sampling of over 250 synthetic honeypot events did not produce a false
positive. This certainly does not prove that HoneyStat is incapable of producing a false
positive. Rather, this may reﬂect the limited range of the data. A much larger data set
is required to fully explore the potential of logistic regression to misidentify variables.
Even if false positives are found, it should be noted that these are not the usual false
positives, or type I errors found in IDS. Instead, a false positive with a HoneyStat node
is half right: there are breakins to honeypots, even if the algorithm were to misidentify
the cause.
HoneyStat: Local Worm Detection Using Honeypots
53
7 HoneyStat as an IDS Tool
The previous sections have shown that HoneyStat can detect worm attacks with a low
false positive rate. This shows that it could be incorporated into a local intrusion de-
tection system. A more important question is whether this strategy can detect worm
outbreaks early. In this section, we present an analytical model.
A HoneyStat deployment can effectively detect worms that use random scan tech-
niques. The work in [WPSC03] presents a complete taxonomy of worms. In [QDG+],
we discussed how a detection algorithm with a suitably low false positive can protect lo-
cal networks. Accordingly, we evaluate HoneyStat against worms that use only random
scanning strategies [ZGGT03]. Since we are interested in local network protections,
the results should apply to other types of scanning worms [QDG+]. Realistically we
assume the vulnerable hosts are uniformly distributed in the real assigned IPv4 space
(all potential victims are located in this space, denoted as T = 109), not the whole IPv4
space (denoted as Ω = 232). Assume N is the total number of vulnerable machines on
the Internet, ni is the number of whole Internet victims at time tick i and s is the scan
rate of worm (per time tick). So the scans entering space T at time tick i + 1 should be
ki+1 = sni
T )ki+1.
Then we have worm propagation equation Eq. ( 2).
Ω . Within this space, the chance of one host being hit is 1 − (1 − 1
T
ni+1 = ni + [N − ni]
(cid:2)
1 − (1 − 1
T
(cid:3)
)sni
T
Ω
(2)
T )sni
T
Ω
.= 1
T
T sni
Ω = sni
In fact because T and Ω are very big, (1 − (1 − 1
Ω . So the
spread rate is almost the same as seen in previous models (e.g., Analytical Active Worm
Propagation (AAWP) model [CGK03], epidemic model [KW93,KCW93,SPN02] etc.)
Now suppose we have a honeypot network with size D (D ⊆ T ). The initial num-
ber of vulnerable hosts is u0. Generally a network with size D has DN/T vulnerable
hosts on average. But with HoneyStat, each network has its own mix of vulnerable OS
distributions. Since most worms target Windows, we can intentionally let most of our
honeypots run Windows so that we present a higher number of initially vulnerable hosts
to the worm. Without loss of generality we suppose u0 = Dα. We let α be the min-
imum ratio for vulnerable hosts. The number of local victims at time tick i is vi and
v0 = 0 which means initially there is no victim in our honeypot network. The time for
the ﬁrst HoneyStat node to become active is t1 (clearly t1 is the ﬁrst time tick i when
vi ≥ 1). We have
(cid:2)
vi+1 = u0
1 − (1 − 1
T
(cid:4) i
)
j=0 snj
T
Ω
(cid:3)
when i + 1 = t1 + tr
(4)
Here u1 = Dγ. We can calculate the time (in terms of the whole Internet infection
percentage) when our ﬁrst HoneyStat node is infected. Table 2 and Figure 5 use the
effect of different α and D. For example, we can see that using D = 210 and α = 10%,
the ﬁrst victim is found when only 0.9786% Internet vulnerable hosts are infected.
Table 2. Time (infection percentage) when HoneyStat network has a ﬁrst victim.
α D = 28 D = 29 D = 210 D = 211 D = 212 D = 213 D = 214 D = 215 D = 216
10% 3.9141% 1.9558% 0.9786% 0.4895% 0.2448% 0.1223% 0.0613% 0.0307% 0.0155%
25% 1.5634% 0.7825% 0.3910% 0.1959% 0.0981% 0.0491% 0.0247% 0.0124% 0.0063%
50% 0.7825% 0.3910% 0.1959% 0.0981% 0.0491% 0.0247% 0.0124% 0.0063% 0.0033%
75% 0.5210% 0.2606% 0.1305% 0.0655% 0.0328% 0.0165% 0.0083% 0.0043% 0.0022%
100% 0.3910% 0.1959% 0.0981% 0.0491% 0.0247% 0.0124% 0.0063% 0.0033% 0.0017%
)
%
t
(
e
g
a
n
e
c
r
e
P
n
o
i
t
c
e
n
f
I
t
e
n
r
e
n
t
I
0.03
0.025
0.02
0.015
0.01
0.005
0
D=216,tr=10,γ=0.7 
D=216,tr=10,γ=0.9 
D=216,tr=100,γ=0.7
D=216,tr=100,γ=0.9
2.5
2
1.5
1
0.5
)
%
(
e
g
a
t
n
e
c
r
e
P
n
o
i
t
c
e
f
n
I
t
e
n
r
e
t
n
I
4