/*
注释内容
*/
 举例说明
 使用细节
1) 对于行注释和块注释，被注释的文字，不会被Go 编译器执行。
2) 块注释里面不允许有块注释嵌套 [注意一下]
2.12 规范的代码风格
2.12.1 正确的注释和注释风格：
1) Go 官方推荐使用行注释来注释整个方法和语句。
2) 带看Go 源码
2.12.2 正确的缩进和空白
1) 使用一次tab操作，实现缩进,默认整体向右边移动，时候用shift+tab 整体向左移
看老师的演示：
2) 或者使用 gofmt 来进行格式化 [演示]
3) 运算符两边习惯性各加一个空格。比如：2+4*5。
4) Go 语言的代码风格.
package main
import"fmt"
funcmain() {
fmt.Println("hello,world!")
}
上面的写法是正确的.
package main
import"fmt"
funcmain()
{
fmt.Println("hello,world!")
}
上面的写法不是正确，Go语言不允许这样编写。 【Go 语言不允许这样写，是错误的！】
Go设计者思想: 一个问题尽量只有一个解决方法
5) 一行最长不超过80个字符，超过的请使用换行展示，尽量保持格式优雅
 举例说明
2.13 Golang 官方编程指南
 说明： Golang 官方网站 https://golang.org
 点击上图的tour-> 选择 简体中文就可以进入中文版的 Go 编程指南 。
 Golang 官方标准库API文档， https://golang.org/pkg 可以查看Golang 所有包下的函数和使用
 解释术语：API
api ： application program interface:应用程序编程接口。
就是我们Go的各个包的各个函数。
2.14 Golang 标准库 API 文档
1) API （Application Programming Interface,应用程序编程接口）是 Golang 提供的基本编程接口。
2) Go 语言提供了大量的标准库，因此 google 公司 也为这些标准库提供了相应的 API 文档，用于告
诉开发者如何使用这些标准库，以及标准库包含的方法。
3) Golang 中文网 在线标准库文档： https://studygolang.com/pkgdoc
4) Golang 的包和源文件和函数的关系简图
5) 有一个离线版的 Golang_Manual_By_AstaXie_20120522.chm
2.15 Dos 的常用指令(了解)
2.15.1 dos 的基本介绍
Dos： Disk OperatingSystem 磁盘操作系统, 简单说一下windows 的目录结构
2.15.2 dos 的基本操作原理
2.15.3 目录操作指令
 查看当前目录是什么
 切换到其他盘下：盘符号 F盘
案例演示：
 切换到当前盘的其他目录下 (使用相对路径和绝对路径演示)
案例演示：
 切换到上一级：
案例演示：
 切换到根目录：
案例演示：
 新建目录md （make directory）
新建一个目录：
新建多个目录：
 删除目录
删除空目录
删除目录以及下面的子目录和文件，不带询问
删除目录以及下面的子目录和文件，带询问
2.15.4 文件的操作
 新建或追加内容到文件
案例演示：
 复制或移动文件
复制
移动
 删除文件
删除指定文件
删除所有文件
2.15.5 其它指令
 清屏
cls [苍老师]
 退出dos
exit
2.15.6 综合案例
2.16 课后练习题的评讲
1) 独立编写Hello,Golang!程序[评讲]
2) 将个人的基本信息（姓名、性别、籍贯、住址）打印到终端上输出。各条信息分别占一行
3) 在终端打印出如下图所示的效果
2.17 本章的知识回顾
 Go语言的SDK是什么?
SDK 就是软件开发工具包。我们做Go开发，首先需要先安装并配置好sdk.
 Golang 环境变量配置及其作用。
GOROOT: 指定go sdk 安装目录。
Path: 指令 sdk\bin 目录：go.exe godoc.exe gofmt.exe
GOPATH: 就是golang 工作目录：我们的所有项目的源码都这个目录下。
 Golang 程序的编写、编译、运行步骤是什么? 能否一步执行?
编写：就是写源码
编译：go build 源码 =》 生成一个二进制的可执行文件
运行：1. 对可执行文件运行 xx.exe ./可执行文件 2.go run 源码
 Golang 程序编写的规则。
1) go 文件的后缀 .go
2) go 程序区分大小写
3) go 的语句后，不需要带分号
4) go 定义的变量，或者import 包，必须使用，如果没有使用就会报错
5) go 中，不要把多条语句放在同一行。否则报错
6) go 中的大括号成对出现，而且风格
funcmain() {
//语句
}
 简述：在配置环境、编译、运行各个步骤中常见的错误
对初学者而言，最容易错的地方拼写错误。比如文件名，路径错误。拼写错误
第 章 变量
3 Golang
3.1 为什么需要变量
3.1.1一个程序就是一个世界
3.1.2变量是程序的基本组成单位
不论是使用哪种高级程序语言编写程序,变量都是其程序的基本组成单位，比如一个示意图：
比如上图的sum,sub 都是变量。
3.2 变量的介绍
3.2.1变量的概念
变量相当于内存中一个数据存储空间的表示，你可以把变量看做是一个房间的门
牌号，通过门牌号我们可以找到房间，同样的道理，通过变量名可以访问到变量
(值)。
3.2.2变量的使用步骤
1) 声明变量(也叫:定义变量)
2) 非变量赋值
3) 使用变量
3.3 变量快速入门案例
看一个案例：
输出：
3.4 变量使用注意事项
1) 变量表示内存中的一个存储区域
2) 该区域有自己的名称（变量名）和类型（数据类型）
示意图：
3) Golang 变量使用的三种方式
(1) 第一种：指定变量类型，声明后若不赋值，使用默认值
(2) 第二种：根据值自行判定变量类型(类型推导)
(3) 第三种：省略var, 注意 :=左侧的变量不应该是已经声明过的，否则会导致编译错误
4) 多变量声明
在编程中，有时我们需要一次性声明多个变量，Golang 也提供这样的语法
举例说明:
如何一次性声明多个全局变量【在go 中函数外部定义变量就是全局变量】：
5) 该区域的数据值可以在同一类型范围内不断变化(重点)
6) 变量在同一个作用域(在一个函数或者在代码块)内不能重名
7) 变量=变量名+值+数据类型，这一点请大家注意，变量的三要素
8) Golang 的变量如果没有赋初值，编译器会使用默认值, 比如 int 默认值 0 string 默认值为空串，
小数默认为0
3.5 变量的声明，初始化和赋值
3.6 程序中 +号的使用
1) 当左右两边都是数值型时，则做加法运算
2) 当左右两边都是字符串，则做字符串拼接
3.7 数据类型的基本介绍
3.8 整数类型
3.8.1基本介绍
简单的说，就是用于存放整数值的，比如 0,-1, 2345等等。
3.8.2案例演示
3.8.3整数的各个类型
int的无符号的类型：
int的其它类型的说明:
3.8.4整型的使用细节
1) Golang 各整数类型分：有符号和无符号，intuint 的大小和系统有关。
2) Golang 的整型默认声明为 int 型
3) 如何在程序查看某个变量的字节大小和数据类型 （使用较多）
4) Golang 程序中整型变量在使用时，遵守保小不保大的原则，即：在保证程序正确运行下，尽量
使用占用空间小的数据类型。【如：年龄】
5) bit: 计算机中的最小存储单位。byte:计算机中基本存储单元。[二进制再详细说]1byte = 8bit
3.9 小数类型/浮点型
3.9.1基本介绍
小数类型就是用于存放小数的，比如 1.20.23-1.911
3.9.2案例演示
3.9.3小数类型分类
对上图的说明:
1) 关于浮点数在机器中存放形式的简单说明,浮点数=符号位+指数位+尾数位
说明：浮点数都是有符号的.
2) 尾数部分可能丢失，造成精度损失。 -123.0000901
说明：float64 的精度比float32 的要准确.
说明：如果我们要保存一个精度高的数，则应该选用float64
3) 浮点型的存储分为三部分：符号位+指数位+尾数位 在存储过程中，精度会有丢失
3.9.4浮点型使用细节
1) Golang 浮点类型有固定的范围和字段长度，不受具体OS(操作系统)的影响。
2) Golang 的浮点型默认声明为float64 类型。
3) 浮点型常量有两种表示形式
十进制数形式：如：5.12 .512 (必须有小数点）
科学计数法形式:如：5.1234e2 =5.12*10的2次方 5.12E-2 =5.12/10的2次方
4) 通常情况下，应该使用 float64 ，因为它比float32 更精确。[开发中，推荐使用 float64]
3.10 字符类型
3.10.1 基本介绍
Golang 中没有专门的字符类型，如果要存储单个字符(字母)，一般使用byte 来保存。
字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。也
就是说对于传统的字符串是由字符组成的，而Go的字符串不同，它是由字节组成的。
3.10.2 案例演示
对上面代码说明
1) 如果我们保存的字符在ASCII 表的,比如[0-1, a-z,A-Z..]直接可以保存到byte
2) 如果我们保存的字符对应码值大于255,这时我们可以考虑使用int类型保存
3) 如果我们需要安装字符的方式输出，这时我们需要格式化输出，即 fmt.Printf(“%c”,c1)..
3.10.3 字符类型使用细节
1) 字符常量是用单引号('')括起来的单个字符。例如：var c1 byte = 'a' var c2 int = '中' var c3
byte = '9'
2) Go 中允许使用转义字符 '\’来将其后的字符转变为特殊字符型常量。例如：var c3 char =‘\n’
//'\n'表示换行符
3) Go 语 言 的 字 符 使 用 UTF-8 编 码 ， 如 果 想 查 询 字 符 对 应 的 utf8 码 值
http://www.mytju.com/classcode/tools/encode_utf8.asp
英文字母-1 个字节 汉字-3 个字节
4) 在Go 中，字符的本质是一个整数，直接输出时，是该字符对应的UTF-8编码的码值。
5) 可以直接给某个变量赋一个数字，然后按格式化输出时%c，会输出该数字对应的unicode 字符
6) 字符类型是可以进行运算的，相当于一个整数，因为它都对应有Unicode 码.
3.10.4 字符类型本质探讨
1) 字符型 存储到 计算机中，需要将字符对应的码值（整数）找出来
存储：字符--->对应码值---->二进制-->存储
读取：二进制----> 码值 ----> 字符 --> 读取
2) 字符和码值的对应关系是通过字符编码表决定的(是规定好)
3) Go 语言的编码都统一成了utf-8。非常的方便，很统一，再也没有编码乱码的困扰了
3.11 布尔类型
3.11.1 基本介绍
1) 布尔类型也叫bool类型，bool 类型数据只允许取值true 和false
2) bool类型占1个字节。
3) bool 类型适于逻辑运算，一般用于程序流程控制[注：这个后面会详细介绍]：
 if条件控制语句；
 for循环控制语句
3.11.2 案例演示
3.12 string 类型
3.12.1 基本介绍
字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go
语言的字符串的字节使用UTF-8编码标识 Unicode 文本
3.12.2 案例演示
3.12.3 string 使用注意事项和细节
1) Go 语言的字符串的字节使用 UTF-8 编码标识Unicode 文本，这样Golang 统一使用UTF-8 编码,中文
乱码问题不会再困扰程序员。
2) 字符串一旦赋值了，字符串就不能修改了：在Go 中字符串是不可变的。
3) 字符串的两种表示形式
(1) 双引号, 会识别转义字符
(2) 反引号，以字符串的原生形式输出，包括换行和特殊字符，可以实现防止攻击、输出源代码等效果
【案例演示】
4) 字符串拼接方式
5) 当一行字符串太长时，需要使用到多行字符串，可以如下处理
3.13 基本数据类型的默认值
3.13.1 基本介绍
在 go 中，数据类型都有一个默认值，当程序员没有赋值时，就会保留默认值，在 go 中，默认值
又叫零值。
3.13.2 基本数据类型的默认值如下
案例:
3.14 基本数据类型的相互转换
3.14.1 基本介绍
Golang 和 java / c 不同，Go 在不同类型的变量之间赋值时需要显式转换。也就是说 Golang 中数
据类型不能自动转换。
3.14.2 基本语法
表达式 T(v) 将值 v 转换为类型 T
T: 就是数据类型，比如 int32，int64，float32 等等
v: 就是需要转换的变量
3.14.3 案例演示
3.14.4 基本数据类型相互转换的注意事项
1) Go 中，数据类型的转换可以是从 表示范围小-->表示范围大，也可以 范围大--->范围小
2) 被转换的是变量存储的数据(即值)，变量本身的数据类型并没有变化！
3) 在转换中，比如将 int64 转成 int8 【-128---127】 ，编译时不会报错，只是转换的结果是按
溢出处理，和我们希望的结果不一样。 因此在转换时，需要考虑范围.
3.14.5 课堂练习
 练习1
如何修改上面的代码，就可以正确.
 练习2
3.15 基本数据类型和 string 的转换
3.15.1 基本介绍
在程序开发中，我们经常将基本数据类型转成string,或者将string 转成基本数据类型。
3.15.2 基本类型转 string 类型
 方式1：fmt.Sprintf("%参数", 表达式) 【个人习惯这个，灵活】
函数的介绍：
参数需要和表达式的数据类型相匹配
fmt.Sprintf().. 会返回转换后的字符串
 案例演示
 方式2：使用strconv 包的函数
 案例说明
3.15.3 string 类型转基本数据类型
 使用时strconv 包的函数
 案例演示
 说明一下
3.15.4 string 转基本数据类型的注意事项
在将String 类型转成 基本数据类型时，要确保 String 类型能够转成有效的数据，比如 我们可以
把 "123" , 转成一个整数，但是不能把 "hello" 转成一个整数，如果这样做，Golang 直接将其转成 0 ，
其它类型也是一样的道理.float => 0bool =>false
案例说明：
3.16 指针
3.16.1 基本介绍
1) 基本数据类型，变量存的就是值，也叫值类型
2) 获取变量的地址，用&，比如： var num int, 获取num 的地址：&num
分析一下基本数据类型在内存的布局.
3) 指针类型，指针变量存的是一个地址，这个地址指向的空间存的才是值
比如：varptr *int=&num
举例说明：指针在内存的布局.
4) 获取指针类型所指向的值，使用：*，比如：varptr*int, 使用*ptr获取ptr指向的值
5) 一个案例再说明
3.16.2 案例演示
1) 写一个程序，获取一个int变量num 的地址，并显示到终端
2) 将num的地址赋给指针 ptr, 并通过ptr去修改num 的值.