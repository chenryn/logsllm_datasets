n
e
s
Network
r
e
v
r
e
s
y
t
i
l
i
t
U
Smart Meter
Figure 1: In this paper, we discuss and formalize the ﬁrst
two execution paths of the smart meter, shown in this ﬁgure.
communications unit of the meter also periodically checks
for any input commands that may be sent from the utility
server. The meter parses and veriﬁes any incoming com-
mand from the server, and executes them.
We explain the formal model for two parts of the smart
meter mentioned above (due to space limitations, we can-
not describe the formal model of the entire meter). These
parts include: 1) passing the consumption data from the mi-
crocontroller to the communication unit the meter, and 2)
storing data on the ﬂash memory before submitting it to the
utility server. These paths are shown in Fig.1. For clarity
and simplicity, we omit some details of the models.
4.1.1 Passing consumption data to the storage com-
ponent
A smart meter has a number of sensor channels. A mi-
crocontroller periodically reads each of these channels in a
loop, calculates the consumption data associated with them,
and produces a stream of sensor data. Below we discuss the
formal model for production of a stream of sensor data re-
sulting from sensor channels in the meter. The illustration
of sensor data is presented in Fig. 2. Sensors produce data
tuples that indicate the index of the sensor and its value. A
list of data is formed by putting these tuples together.
The formal model of sensor data is shown in Fig. 3. In
line 2 of Fig. 3, we deﬁne SensorElement, SensorList, Sen-
sorNumber, and SensorValue. These are the data types that
we use to formally deﬁne sensor data and the operations on
In Maude1, each of these types is called a sort. Each
it.
sensor element is a tuple  (as shown in Fig. 2),
which is the result of the operations of the microcontroller
on sensor channels. s indicates the channel index, which is
of type SensorNumber, and v indicates its value, which is
of type SensorValue. This tuple is formally deﬁned in line
3, by putting two natural numbers (indicated as ’Nat’) to-
gether. A stream of these tuples forms SensorList, which
is deﬁned in line 4. SensorList is simply built by putting
a series of SensorElements together. In line 8 of Fig. 3, we
deﬁne a common operation on the sensor data: hasSensor.
This operation veriﬁes whether a stream of sensorElements
(i.e., sensorList), contains data associated with a speciﬁc
sensor index, and is deﬁned recursively.
After deﬁning the sensor data in a smart meter, we present
the rules that deﬁne their production in Fig. 4. We deﬁne
the production of sensor data using a recursive rule. At each
step of the recursion, we either create a tuple of sensor data
for a new sensor channel (line 6), or create a new value for
1We present a brief primer on Maude in Appendix B.
s
r
o
s
n
e
S
r
e
l
l
o
r
t
n
o
c
o
r
c
i
M
SensorList
… (cid:3407)(cid:1871)(cid:3036)(cid:3117),(cid:1874)(cid:3036)(cid:3117)(cid:3408)	(cid:3407)(cid:1871)(cid:3036)(cid:3118),(cid:1874)(cid:3036)(cid:3118)(cid:3408)	(cid:3407)(cid:1871)(cid:3036)(cid:3119),(cid:1874)(cid:3036)(cid:3119)(cid:3408)	…
SensorElement
Figure 2: SensorList is a series of SensorElements and is the
result of microcontroller operations.
SENSOR-DATA
1. fmod SENSOR-DATA is
2. sort SensorElement SensorList SensorNumber
        SensorValue.
3. op sensorElement : Nat Nat —> SensorElement.
4. op __  : SensorList SensorList —> SensorList.
5. op hasSensor : SensorList Nat—> Bool.
6. var r n t : Nat.
7. var dataList : SensorList.
8. eq hasSensor(sensorElement(r, n) dataList, t) = 
      if r==t then true else hasSensor(dataList,t) fi.
9. endfm
Figure 3: Formal model of sensor data in Maude.
an existing sensor channel (line 7). Line 5 is simply the
base case of recursion representing a tuple of sensor data for
channel 0. The model lets us deﬁne a limit for the number
of sensor channels, which is not shown here. The number of
sensor channels depends on the speciﬁc model of the meter.
4.1.2 Receiving and storing sensor data
After a stream of sensor data is produced by the microcon-
troller, it is received by another process which is in charge of
storing them. This communication is via a serial interface.
The receiver process sends a data request message to the mi-
crocontroller, and waits for a response. If there is any sensor
data available, the microcontroller sends the data, otherwise
no data is sent and the request times out.
The state diagram of this procedure is based on the ab-
stract model and is shown in Fig. 6. The formal model
for receiving sensor data corresponding to the state dia-
gram is shown in Fig. 5. First, the receiver process creates
a socket to communicate with the microcontroller (line 6).
This corresponds to states 1 and 2 of Fig. 6. Next, a request
is sent (via askForData operation) to notify the microcon-
troller that it is expecting to receive sensor data (line 7).
This step corresponds to state 4 of Fig. 6. Then the receiver
SENSOR-STATES
1.mod SENSOR-STATES is
2.op getSensorDataList : —> SensorDataList.
3.var dataList : SensorDataList.
4.var r n : Nat.
5.rl [r1]:getSensorDataList —> sensorDataElement(0,0).
6.crl[r2]:sensorDataElement(r,n) —> 
   sensorDataElement(r,n) sensorDataElement(r+1, 0) 
   if r 
   sensorDataElement(r,n+1) if n  createSocket.
7. rl [l2]: s —> askForData.
8. rl [l3]: request —> waitForSensorData.
9. rl [l4]: waitForSensorData —> dataList.
10.rl [l5]: waitForSensorData —> timeoutSensorData.
11.endm
Figure 5: Formal model of receiving sensor data from the
microcontroller.
Successful
1-Start 
receiving 
sensor 
data
Failed
2-Create 
a socket
3-Quit
4-
Request 
for data
5-Wait 
for data
6-
Timeout
7- Receive 
sequence 
of data
Figure 6: SensorList is a series of SensorElements and is the
result of microcontroller operations.
process waits for data (line 8). This corresponds to state
5 of Fig. 6. Eventually, either a stream of sensor data is
received (line 9), or the request times out (line 10). These
steps correspond to states 6, and 7 of Fig. 6.
After sensor data is received, it will be stored in the ﬂash
memory. We model this process by changing the state of
each tuple of sensor data (known as sensorDataElement), to
a new tuple, namely storedDataElement. Similarly, a stream
of storedDataElements will form storedDataList. We present
the formal model for representing data storage in Fig. 7. In
this ﬁgure, we deﬁne the types StoredDataElement which
is a tuple similar to sensorData and StoredDataList, which
is a stream of StoredDataElements (lines 2-5). In line 8 of
Fig. 7, the transition of the state of data is deﬁned. The
way this transition works is that in the sequence of received
sensor data, we change the state of each tuple of sensor data
to a tuple of stored data. Eventually, the meter will have a
sequence of stored data that it has received and not yet sent
to the server (in the absence of attacks).
4.2 Attacker model
A classiﬁcation of security attacks is presented in recom-
STORE-SENSOR-DATA
1.mod STORE-SENSOR-DATA is
2.sort StoredDataElement.
3.sort StoredDataList.
4.op storedDataElement : Nat Nat —> StoredDataElement.
5.op __ : StoredDataElement StoredDataList —>
          StoredDataList.
6.var r n : Nat.
7.var l : StoredDataList.
8.rl [r1] : sensorDataElement(r,n) l —>
            storedDataElement(r,n) l.
9.endm
Figure 4: Formal model of states of sensor data in Maude.
Figure 7: Formal model of storing sensor data received from
the microcontroller.
ATTACKER-ACTIONS
1. mod ATTACKER-ACTIONS is
2. op crash : —> state.
3. var num : NodeNumber.
4. var val : Nat.
5. var element : SensorDataElement.
6. var list : SensorDataList.
7. var s c p : State.
8. rl [DropMessage] : element list —> list.
9. rl [Reboot] : s —> reboot.
10.rl [Replay] : c —> p if before(c, p).
11.endm
Figure 8: Formal model of the attacker actions.
mendation X.8002, and RFC 49493, which divide the attacks
into passive attacks and active attacks. Passive attacks in-
volve gaining information about the system, but do not af-
fect the system resources. Active attacks modify system
resources or its operations. We focus on active attacks.
We formally deﬁne actions for dropping messages, reboot-
ing and restarting the system (to interrupt data ﬂow and
message processing), and replaying a message. These ac-
tions are simple and can be done by ordinary users of smart
meters (see Sec.3.2). It is possible to extend the set of at-
tacker actions to more sophisticated ones.
We present the formal rules for the attackers’ action in
Fig. 8. Dropping a message is deﬁned in line 8 of Fig. 8 for
dropping SensorDataElements. The complete set of rules
include other communication protocols of the meter. As a
result of this rule, any element of sensor data, at random,
may be dropped by an attacker.
Line 9 presents the general rule for rebooting the system.
This action may correspond to simply rebooting the meter
by unplugging it from power and plugging it back in. To
deﬁne this action, we deﬁne an extra operation reboot. At
any state s, we can transition to a reboot state from the
current state s. For instance, while the system is generating
a series of sensor data tuples, transitioning to the reboot
state will interrupt the normal execution path as the rules
for generating sensor data cannot be applied anymore. This
action can hence lead to data loss.
Line 10 presents a rule that lets the system go from cur-
rent state c to a previous state p. This transition is not
part of the legitimate ﬂow of the system. p is replaced by
any state in the system that involves communication. By
transitioning back to such a state, the model can re-execute
the communication procedure. This rule models an attacker
that replays messages sent between components of the me-
ter via its interfaces, e.g, serial interface. Equation before in
line 10, will return true, if state p is a prior state.
By adding these extra actions to the rules of the system,
we are able to search through the execution steps and verify
whether we can reach unsafe states. Examples of unsafe
states are those in which produced sensor data are not stored
on ﬂash, and transitioning to a data submission state while
the socket is closed. Note that not all the unsafe states
produced necessarily represent a feasible attack on the real
smart meter. We discuss this in more detail in Sec. 5.
2Security architecture for Open Systems Interconnection for
CCITT applications
3Internet Security Glossary Version 2
Mapping the results of formal analysis to the code:
We need to map the results of the formal model back to
the meter’s code to mount the attacks. To facilitate the
process of mapping the results of the formal model to the
code, we developed a semi-automated tool. The input to
the tool is L = (r1, r2, ..., rn), a sequence of rewrite rules
ri, 1  i  n that lead to an unsafe state. The output of the
tool is the execution paths of the code that may represent L.
The process is semi-automated at present, as the the user
of the tool needs to manually match the ﬁrst and the last
rewrite rules (r1 and rn) to two nodes of the control ﬂow
graph, v1 and v2. This can be done by providing the id of
the rewrite rule and the corresponding function name in the
code that implements the rule. The tool performs simple
graph traversal and generates the paths between v1 and v2
in the control ﬂow graph. These represent the viable paths
corresponding to the input L, and are returned to the user.
We used this semi-automated tool to translate the results of
formal analysis to the meter’s code.
5. EVALUATION
In this section we present the attacks found by the model
checker, and the results of mounting the attacks on a real
smart meter. We address the following research questions:
• RQ1 (Practicality): How applicable are the attacks
discovered by the model checker on a real smart meter?
• RQ2 (Performance): How long does it take for the
model checker to discover the attacks?
5.1 Testbed
Formal analysis testbed: Our test machine on which
we run our Maude model checker [15] consists of a 3.4GHz
Intel CPU and 16GB of RAM. It runs Ubuntu Linux.
Smart meter testbed: To evaluate the results of the
formal analysis, we use SEGMeter, an open source smart
meter from smart energy groups [55] (Fig. 9). SEGMeter is
used by home users and businesses to monitor energy con-
sumption [3].
SEGMeter consists of two main boards: 1) an Arduino
board [7] with an ATMEGA32x series microcontroller, which
is connected to a set of sensors and calculates consumption
information and, 2) a gateway board which has LAN and
wiﬁ network interfaces, and communicates with the utility
server. The boards communicate with each other through a
serial interface. The meter software is split between the two