Inter-enterprise System and Application Integration:
A Reality Check
Jorge Cardoso1, Wil van der Aalst2, Christoph Bussler3, Amit Sheth4,
and Kurt Sandkuhl5
1 SAP Research, Dresden, Germany
2 Eindhoven University of Technology, The Netherlands
3 Merced Systems, Inc., CA, U.S.A.
4 Kno.e.sis Center, Wright State University, Ohio, U.S.A.
5 Jönköping University, Sweden
Abstract. This paper structures the summary of the panel held at the 9th
International Conference on Enterprise Information Systems, Funchal, Madeira,
12-16 June 2007 that addressed the following question: “Are you still working
on Inter-Enterprise System and Application Integration?” The panel aggregated
distinguished experts from the areas of process management, workflow, Web
services, SOA, and Semantic Web.
Keywords: Inter-enterprise integration, business process management, workflow,
Web service, SOA, semantic Web.
Wil van der Aalst
Eindhoven University of Technology, The Netherlands
We Are Creating Our Own Problems, e.g., Current
Standardization Efforts Are Only Increasing Complexity!
The problem of building enterprise systems (and the glue between these systems) is
the overwhelming complexity. To set up a contemporary middleware platform is a
complex task which is further complicated if software from different vendors needs to
work together. The fundamental idea of web services is sound and promising.
However, the abundance of overlapping standards for web services composition is
overwhelming. In fact, the collection of competing and complementary web services
standards is creating a new Tower of Babel. Standards are proposed without clear
semantics and before a standard is adopted there are already new standards which
build on it. The acronym WSAH (Web Services Acronym Hell) coined in [1] nicely
illustrates the problem. Focus should be on a few good standards; otherwise we are
creating our own problems. The "Not Invented Here" syndrome reflects the
unwillingness to adapt standards and products to best practices and sound theories.
This phenomenon results in people intentionally differentiating things from one
J. Filipe, J. Cordeiro, and J. Cardoso (Eds.): ICEIS 2007, LNBIP 12, pp. 3–15, 2008.
© Springer-Verlag Berlin Heidelberg 2008
4 J. Cardoso et al.
another rather than using solid, scientifically proven, foundations. For example, new
process modeling languages are proposed on a daily basis by people unaware of
foundational concepts such as bismulation, true concurrency, Turing completeness,
Petri nets, etc.
Find Out What Is Really Going on Before (re)Designing a System!
Reality is often very different from what is modeled or what people think. Whatever
representation is used (Petri nets, BPMN, UML or any other modeling language), the
model is an abstraction (i.e., things are left out) and may not reflect reality. The first
observation (abstraction) is unavoidable and should be accepted as a fact of life.
However, the second observation is more problematic and should be addressed urgently.
As long as managers and system designer take a “PowerPoint” reality as starting
point, information systems will remain to have serious alignment problems.
Therefore, it is vital that more efforts are invested into finding out what is actually
happening. If it is not possible to “catch” reality in a model, then it does not make any
sense to develop or try to improve enterprise systems. Process mining [4] can be a
valuable tool here. The omnipresence of event logs is an important enabler of process
mining, i.e., analysis of run-time behavior is only possible if events are recorded.
Already today systems ranging from cross-organizational systems to embedded
systems provide detailed event logs.
Do Not Specify More Than Strictly Needed!
Both organizations and people are autonomous entities that in general behave in a
reasonable way. However, many systems and standards do not acknowledge this.
There is a tendency to over-specify things, i.e., to describe in a detailed and procedural
way what should happen. A nice example is the role of BPEL. Whilst being a powerful
language, BPEL is of a procedural nature and not very different from classical
workflow languages e.g., the languages used by systems such as Staffware, COSA,
SAP Workflow, and IBM WebSphere MQ Workflow. Hence, it is not clear why
organizations need to agree on the use of BPEL. When an organization subcontracts
part of it work to other organizations, it seems odd to require that the other parties need
to enact specific BPEL models for their internal processes. Yet most of the languages
proposed for orchestration are of a procedural nature, while it seems obvious that a
more declarative language is needed [3]. Thrust in people and organizations implies an
under-specification rather than an over-specification of processes.
Let’s Make Fuzziness Explicit!
Related to the above point is the gap between high-level modeling languages and
executable languages. As an illustration, let us look at the SAP reference model. Of the
more than 600 process models in the SAP reference model, about 20 percent is incorrect
in the sense that there are possible deadlocks, livelocks, etc. These models intend to
describe how the SAP system works and how it should be used. However, the number
Inter-enterprise System and Application Integration: A Reality Check 5
of errors shows that there is a complete disconnect between the actual software and
these models. This nicely illustrates the general problem of going from “PowerPoint
diagrams” to executable models/software. One of the problems is that today’s languages
are either informal or have some executable interpretation. Therefore, the modeling
process of going from an imprecise model to an executable model cannot be supported
adequately. It would be good to have single language to specify both things that are
precise and executable and things that are still vague and left open. Making fuzziness
explicit in models is important to avoid costly misinterpretations.
Christoph Bussler
Merced Systems, Inc., CA, U.S.A.
If you are still working on Inter-Enterprise System and Application Integration,
then you should re-evaluate and re-assess your research agenda, because …
The World Moved on
One current development in the software industry is that the notion of ‘application’ is
changing in the sense that an application (or software system) does not necessarily
have to be licensed and locally installed at an organization any more for the sole
purpose of this one organization. The notion of application service provider (ASPs),
who installed a software system and made its interfaces available over the Web, also
changes as software vendors provide the hosting themselves, opening up a very
different model of software as services (SaaS), see below.
A second current development integrates existing Web interfaces in new forms
providing new functionality that has not been available before. The term ‘mash-up’ is
used for this development and gains significant momentum at this point, see the
discussion below. The wider development is captured in the term ‘Web 2.0’ that clearly
departs from the notion of simply providing the user interfaces for a single software
system, but instead becomes the integration point for several types of functions from
different software systems available remotely over the Web infrastructure.
From an academic research viewpoint the topic of ‘integration’ (application
integration or inter-enterprise integration) completely failed from the angle of a clear
conceptual and working model that is agreed upon by the research community (and
industry for that matter). Unlike in the database research community with the
relational database management system success, the research community around
integration did never arrive at all to a sound foundation in terms of an appropriate
conceptual model as basis for further research and industrial development.
SaaS (Software as a Service)
SaaS is very distinct from application hosting or making functionality available as
Web Services. In a first characterization, SaaS is a specific engineering aspect for
software systems that allows multiple tenants be present in the same installation of a
software system. In fundamental terms, the software system is aware of several
6 J. Cardoso et al.
organizations that have their functionality and data implemented in a single
installation of the software system. Traditionally this meant that the functionality is
the same across tenants, only their particular data is different. Examples of this are
www.ebay.com where each customer shares the same functionality, but their data
(e.g. bids, offers, financial power, etc.) is different. In addition to end user
functionality, middleware services are available in this mode, too, in the meanwhile,
e.g. Amazon S3 or Amazon SQS by www.amazon.com.
This multi-tenant awareness starts extending into the design-time domain where
the software system configuration can be different for each tenant, but still in the
same installation of the software system. An example is www.salesforce.com that
allows customers (tenants) to modify the design-time configuration. So the same
software system in a single installation supports tenant-specific modification of
design-time data.
However, the industry does not stop here. The notion of community is coming into
the picture in different ways. One is the community of tenants. For example,
www.xeequa.com allows tenants to form a community, i.e., they are aware of each other
for mutual benefit. While all share the same functionality, they cooperate at the same
time. Xeequa pushes further by providing a clear model of ‘data ownership’ that goes
beyond corporate boundaries following the insight that each person has a corporate life
as well as a professional and private life (and data associated with those roles).
A second way of community, the developer community, is cultivated by
www.salesforce.com where the development of the software system functionality is
not limited to their own employees any more, but opened up to any developer who
wishes to contribute. The developer goes to www.salesforce.com to develop, test and
offer to the tenants. This clearly shows that the classical distinction of develop –
install –use starts changing in fundamental ways.
In my mind, the community aspect will make all the difference, analogous to
the effects that can be seen in other Web applications like www.amazon.com or
www.hotels.com where the community provides ratings or other Web sites where the
community starts adding meta-data for the community’s mutual benefit.
Web 2.0
Still outside the corporate software system world, but for sure coming into it sooner or
later, the Web 2.0 development addresses the integration of existing functionality
available of the Web. For example, www.trulia.com or www.zillow.com integrates
various sources like real estate offerings, spatial maps and financial information into
one Web site. This combination is termed mash-up following the insight that the sum
is greater then the individual parts.
www.programmableweb.org is tracking mash-up developments and the number is
constantly increasing, making this a very important ‘movement’.
Furthermore, the explicit notion of social networks like www.linkedin.com start to
appear in this space as they can offer new type of functionality because of their
explicit knowledge of social relationships. www.linkedin.com, for example, does not
only have static forward links (i.e., who is related to me and whom can I reach?), but
also dynamic backward links (i.e., who looked at my social network profile)?
Inter-enterprise System and Application Integration: A Reality Check 7
The World Really Moved on
In summary, the world really moved on from various viewpoints. In terms of integration
this means that the entities that require integration changed in their nature quite a bit (as
in fundamentally) requiring new thoughts and developments around it. The idea that an
entity represents one organization is left behind completely as well as the notion that
there is one location for integration for a given company or organization.
Of course, like all developments in IT and computer science, it takes time for all
software systems to follow the SaaS and Web 2.0 model. And some of those software
systems will never embark on this paradigm. However, the fact that this paradigm is
picked up in all domains like sales, real estate, human resources, finance, and so on
makes me believe that it will continue to grow and become main stream.
Meaning of ‘Integration’
So, if your heart is still in the world of integration, which is not necessarily a bad
place to be, you need to ask yourself, what does ‘Inter-enterprise’ and ‘application’
integration mean in this changing world and how the notion of ‘integration’ will
change going foward? And you need to ask yourself if maybe this time around it
might be worth-while to put effort into a common conceptual model in the academic
research community to achieve a similar success as the database research community
achieved with relational database management systems.
Amit Sheth
Kno.e.sis Center, Wright State University, Ohio, U.S.A.
New World Order for Interactions Across Enterprise Information
Systems in the Flat World
As the world has become flat (“The World Is Flat” [5]), the dominance of agriculture
and then of manufacturing has given way to the dominance of services. Businesses have
changed correspondingly and nowhere more than in their interdependence. A company
may, for example, outsource not only the non-critical back office operations, the
production of the components, or even a subassembly, but also the logistics of its entire
supply chain, which is critical to its operations. Increasing interdependence has also led
to myriad ways a company’s operations, competitive-ness, and profitability are tied to
those of its suppliers and partners. In terms of business models, many have changed
from selling products to providing services, even when underlying materials and
intellectual property are about the same.
In spite of these drastic changes in businesses, entrenched legacy enterprise
application systems have evolved slowly, whereas newly developed enterprise
applications have leapt ahead. We feel that interactions among the applications have
changed significantly and that the underlying reliance on and realization of processes
has changed the most and will continue the do so. In 1999 (“Processes Driving the
8 J. Cardoso et al.
Networked Economy” [6]), we noted “So far, most of the attention in Information
Systems has gone to data. We believe that this attention will increasingly shift to
information and knowledge on one hand and processes on the other. The first deals with
service and product, the second deals with how to effectively support or render it.”
In the area of data and data interoperability, we often need to revisit the same
challenges we addressed a long time ago. For example, recently we revisited work on
data mapping [7] more than a decade old to address data mediation in Web Services
[8]. And, interestingly, we found that while using SAWSDL, the newly developed
Semantic Web Services standard, we were able to reuse the earlier work on data
mapping with little or no fundamental advances. We can reduce unnecessary revising
and rehashing of earlier work if we understand the four aspects or levels of
interoperability: system, syntax, structure, and semantics [9]. Although these levels
have been well discussed (and we hope well understood) in the context of data and
data interoperability, two difference can be noted: (a) data mediation in the context of
more dynamic processes (such as dynamic trading processes or adaptive web
processes referred to in this note) present new challenges not encountered above and
require increasingly sophisticated use of semantics; and (b) these levels of
interoperability also apply to processes and process interoperability issues. Our view
is that Web Services is NOT “old wine in new bottles.” Clearly some of the old
problems, such as those related to data mediation, resurface in the context of newer
infrastructure for supporting interoperability when adapting Service Oriented
Architecture and Web Services. However, as we argued in [10], low initial
complexity, its use of XML, and support for an intrinsic loose coupling architecture,
etc. provide just the right incremental advances in software componentry to make
them practically useful, that has now resulted in wide adoption.
In [6], we also outlined three types of inter-organizational workflows (processes)—
process portal, process vortex, and dynamic trading processes. For non-technical
reasons there are few examples of process portals and process vortexes, but with the
highly interdependent and dynamic nature of businesses and their interactions with
global partners and suppliers, we see the increasing importance and relevance of and
research in dynamic trading processes. This has involved recognizing the events that
affect a process [11] and how optimally to adapt a process once an event relevant to it
has been identified (“Adaptive Web Processes” [12]).
Let us now turn our attention to the role of humans in enterprise information
systems and inter-organizational processes. Although automation and process
technologies have reduced the role of humans in repetitive and mundane tasks,
humans as well as organizations play integral and increasingly sophisticated roles in
managing processes. Consider a supply chain process that has technical capabilities to
adapt to relevant events such as currency fluctuation or a fire at a supplier’s
fabrication plant. In addition to the challenges of adapting to optimize cost and time
factors, the business also needs to keep a keen eye on risks associated with different
choices. This requires decision makers to be integral to the inter-organizational
process. And for a process in service business, allocation of human resources needs an
integral model of the organizational structures of both the enterprise and its partners.
IBM has recently outlined the notion of Services Science, which emphasizes the need
to model not only technical but also human and organizational aspects of systems
(including enterprise information systems and processes) that support services.
Inter-enterprise System and Application Integration: A Reality Check 9
In the context of Services Science, we have outlined a Semantic Services Science