to true. If we call Bad6 such event, we observe that occurrence of Bad6 immediately implies
a collision in the function ˆH. Therefore, it is possible to show that the probability Pr[Bad6]
is negligible under the collision resistance of the function ˆH. The reduction is straightforward
once observed that one can simulate the computations of ˆH in Game 6 (for both ProbGen and
Verify queries) by using the public key of ˆH.
To complete the proof of the theorem below in the following Claim we show that Pr[Bad5] is
negligible.
27
Claim 1 For any PPT adversary making at most Q veriﬁcation queries in Game 5 it holds
Pr[Bad5] ≤ 2Q
q−2Q .
Proof. The basic idea of the proof is that in Game 5 the secret value a remains information-
theoretically hidden to the adversary. For every new authentication query, indeed notice that the
pairs (Xi, Yi) generated in ProbGen (in Game 5) are uniformly distributed over the set of pairs
(X, Y ) such that e(X, h) = e(g, Y ). Hence, a is only used to answer veriﬁcation queries and more
precisely to check equation (12).
(cid:80)Q
For every veriﬁcation query i = 1 to Q, let Bi be the event that bad is set to true in the
i-th query but not before. By deﬁnition of Bi and by a union bound we have that Pr[Bad5] ≤
i=1 Pr[Bi|¬B1 ∧ ··· ∧ ¬Bi−1]. Now, observe that at the ﬁrst veriﬁcation query a is uniformly
distributed over Zq, and thus Pr[B1] ≤ 2/q. Then, at every query, if bad is not set true it means
that equation (12) was not satisﬁed. Namely, one can exclude at most two possible values of a, and
assume to add such values to a set A(cid:48). At the i-th query, if we condition on that Bj never occurred
in the previous queries we have that a is uniformly distributed over Zq \ A(cid:48), and A(cid:48) contains at
most 2(i − 1) elements. Hence, we have that Pr[Bi|¬B1 ∧ ··· ∧ ¬Bi−1] ≤
q−2(i−1) . Therefore, we
(cid:117)(cid:116)
ﬁnally obtain that Pr[Bad5] ≤ 2Q
q−2Q .
2
Finally, input privacy follows by deﬁning a series of hybrid games in which we progressively
modify the output of ProbGen queries in such a way that every ciphertext µi returned by the
ProbGen oracle in the privacy game is replaced by an encryption of 0. By the semantic security
of the HE encryption scheme, every two consecutive pairs of games are indistinguishable to a PPT
adversary. Moreover, note that in this proof the veriﬁcation oracle can be easily simulated without
(cid:117)(cid:116)
the knowledge of the HE decryption key.
To obtain this construction, the scheme VCquad is modiﬁed into VC∗
quad as follows. Let f : Ft
A Variant with Function Privacy. In this section we show that the previous scheme for multi-
variate quadratic polynomials can be modiﬁed in order to achieve function privacy. Precisely, if we
p → Zp as an arithmetic circuit, we can hide all the constants c occurring
see the polynomial f : Zt
in multiplication-by-constant gates that take inputs of degree 1.
p →
Fp be a degree-2 arithmetic circuit. For every gate fg in f which is a multiplication by a constant
c ∈ Fp, compute γ $← HE.Encpk(c), νc←Hκ(γ) and (Tc, Uc)← ˆHK(γ). Then we deﬁne the function
q → Zq as the same as f except that every multiplication by a constant c is replaced by a
fpri : Zt
multiplication by the corresponding νc ∈ Zq computed as described above. fpub : Zt
q → Zq is the
same as f except that every multiplication by a constant c is replaced by the corresponding (Tc, Uc)
computed as above.
from fpri, i.e., ωf←CFEvaloﬀ
diﬀerence is that we slightly modify GateEval for multiplication-by-constant gates as follows:
Multiplication by constant. Let σ = (T (1), U (1), X (1), Y (1), Λ(1)) ∈ (G1×G2)2×GT with Λ(1) =
1, and recall that the constant c ∈ Zp is (publicly) encoded as (Tc, Uc) ∈ G1 × G2. We compute
σ = (T, U, X, Y, Λ) as:
quad, KeyGen(f, λ) algorithm proceeds as before except that the value ωf is computed
τ (K, fpri), and EK contains fpub instead of f . In ComputeP K(σx) the
In VC∗
T = e(T (1), Uc), U = e(Tc, U (1)), X = e(X (1), Uc), Y = e(Tc, Y (1))
28
Theorem 7. Let F be the class of arithmetic circuits in which multiplication by constants occur
only for inputs of degree 1. If F is a pseudorandom function, ˆH is a collision-resistant homomorphic
hash function and HE is a semantically secure homomorphic encryption scheme, then VC∗
quad is
correct, adaptively secure, input private and function private with respect to F.
The proof of correctness, adaptive security and input privacy is essentially the same as in Theorem
6. Function privacy easily follows by deﬁning a series of hybrid games in which in KeyGen we pro-
gressively replace every ciphertext γ encrypting a constant c by an encryption of 0. By the semantic
security of the HE encryption scheme, every two consecutive pairs of games are indistinguishable
to a PPT adversary.
6 Computing Polynomials of Large Degree
We now look at the simpler task of delegation of univariate polynomials of large degree t, evaluated
on values x ∈ Zp that do not need to be private.
the BV encryption of the coeﬃcient gi, and g(x) =(cid:80)t
We still use BV [20] for q prime, but without using its full power: we only need its additive
homomorphic property. We then apply the technique of [12] on the hashing Hκ(γi), where γi is
i=0 gi · xi is the function to compute. Again,
acceptance or rejection by the client depends only on the correct execution of the computation over
the ciphertexts. No useful decryption query is performed. In detail, we assume that, as in [12], the
client and the server agreed on a group G of prime order q in which the discrete logarithm problem
is hard, and on a generator g for G.
Before the speciﬁcations of the scheme, we shall make a ﬁnal observation: due to the noise
growth of the BV scheme summarized in lemma 1 (for D = 1), in order to achieve correctness of
the result to be decoded by the client, we need q to be larger than 2 · p · xt · σ · n1.5, where x is
the evaluation point of the scheme. In the worst case, x = p, but we prefer to separate x and p, to
state a more general result, that can ﬁt better for applications in which x is smaller than p.
The scheme VCpoly is speciﬁed as follows:
KeyGen(g0, . . . , gt, λ) → (P K, SK):
– Specify a group (G,·) of order q and a generator g.
– Sample a uniform MAC key c $← Zq, uniform k0, k $← Zq,
– Run HE.ParamGen(λ) to get the description of parameters for the somewhat homomorphic
encryption scheme HE using the same q as above. Let D = {µ ∈ Zq[X][Y ] : degX (µ) ≤
n − 1, degY (µ) ≤ 1}. Run (pk, dk) ← HE.KeyGen().
– Generate a random member of the hash function family H : D → Zq by running κ $←
– Compute γi ← HE.Encpk(gi), Ti ← c · Hκ(γi) + ki · k0, GT,i ← gTi,
– Set P K = (pk, G, g, γ0, GT,0, . . . , γd, GT,t) and SK = (pk, G, g, dk, c, α, β, k, k0).
H.KeyGen.
ProbGenSK(x) → σx, τx:
– Set σx = x, and τx = x.
ComputeP K(σx = x) → σy:
– Compute γ ←(cid:80)t
i=0 xi · γi, and GT ←(cid:81)t
– Set σy = (γ, Gt)
VerifySK(σy = γ, GT , τx = x) → (acc, a(cid:48)):
29
i=0 (GT,i)xi
,
– Compute the element X in Zq such that:
X =(cid:0)(x · k)t+1 − 1(cid:1) · (x · k − 1)
– If GT (cid:54)=(cid:0)gHκ(γ)(cid:1)c ·(cid:0)gk0(cid:1)X , reject. Otherwise, accept and compute a(cid:48) ← BV.Decdk(γ).
−1 ,
GT =
i=0
=
t(cid:88)
Theorem 8. The scheme VCpoly is correct, adaptively secure, and function private.
Proof. For correctness, when both the client and the server are honest the veriﬁcation step passes,
because of the following reasoning. Notice that:
by construction and using the fact that Hκ is an homomorphism of rings (last step). Notice now
that:
= g
=
i=0
= g
(GT,i)xi
i=0 ki·k0·xi
(cid:0)gTi(cid:1)xi
t(cid:89)
t(cid:89)
(cid:80)t
(cid:80)t
i=0(c·Hκ(γi)+ki·k0)·xi
i=0 Ti·xi
= gc·Hκ(γ) · gk0·(cid:80)t
i=0 Hκ(γi)·xi+(cid:80)t
= gc·(cid:80)t
t(cid:88)
(k · x)i =(cid:0)(x · k)t+1 − 1(cid:1) · (x · k − 1)
(cid:32) t(cid:88)
(cid:32) t(cid:88)
−1 = X,
i=0(k·x)i
(cid:33)
(cid:33)
,
so GT = gc·Hκ(γ) · gk0·X =(cid:0)gHκ(γ)(cid:1)c · gk0·X , therefore the check in the veriﬁcation step passes.
i=0
Moreover, the client retrieves the correct value of the computation, because
HE.Decdk(γ) = HE.Decdk
γi · xi
= HE.Decdk
HE.Encpk(gi) · xi
=
gi · xi.
Notice that the bound on x makes the last equality hold, since that bound respects the inequality
in Theorem 1 (for D = 1).
i=0
i=0
i=0
For adaptive security, notice that σx = x, therefore the scheme is split. Moreover, adaptive
security reduces to regular security, as the adversary has full knowledge on the encodings that
can be queried in the adaptive game, even before seeing the public key of the veriﬁcation scheme.
Regular security can be proven in a game-based fashion, using a similar approach to the one in [12,
Section 5.2]:
Game1: As Game0, but in the veriﬁcation the value X is computed via X ←(cid:80)t
correspondingly to GT (cid:54)=(cid:0)gHκ(γ)(cid:1)c · g
Game0: The experiment in Deﬁnition 2.
Game2: As Game1, but replacing the value ki · k0 by a uniform ri ∈ Zq, and the veriﬁcation check
(cid:80)t
i=0 ri·xi, which maintains correctness.
i=0 (k · x)i.
As in [12], the change between Game1 and Game0 is merely syntactical, so the advantage of a
cheating server is the same. Moreover, the advantage of a cheating prover in Game2 is negligibly
close to the one in Game1, since the function ϕk0,k : i (cid:55)→ gki·k0 is a pseudorandom function (based
on the Strong Diﬃe-Helmann assumption), for uniform k0, k ∈ Zq.
HE.Decdk(γ(cid:48)) (cid:54)= HE.Decdk(γ). By the correctness of the scheme, γ(cid:48)
0 (cid:54)= δ ∈ Rq[Y ]. Moreover, let G(cid:48)
T that pass the veriﬁcation check, but such that
(cid:54)= γ. Let γ(cid:48) = γ + δ, with
An adversary Game2 if it provides γ(cid:48) and G(cid:48)
T = GT · gd, for d ∈ Zq. Since the veriﬁcation check passes, then
Gt · gd =
gHκ(γ+δ)(cid:17)c · g
(cid:80)t
i=0 ri·xi
(cid:16)
.
30
i=0 ri·xi = gc·Hκ(γ)+c·Hκ(δ)+(cid:80)t
Notice that the right hand side is equal to gc·Hκ(γ+δ)+(cid:80)t
i=0 ri·xi, since Hκ
is a ring homomorphism. This means that the right hand side equals Gt· gc·Hκ(δ), by the correctness
of the scheme, so the above equality holds if and only if gd = gc·Hκ(δ). There are two scenarios in
which this happens:
1. d (cid:54)= 0. In this case the adversary has to provide a polynomial γ(cid:48) = γ + δ, where Hκ(δ) = d/c,
which happens with negligible probability, since d/c is uniform (because all the information
about c given to the adversary is hidden by the ri).
2. d = 0. In this case, the adversary has to provide γ(cid:48) = γ +δ, where Hκ(δ) = 0, which is equivalent
to breaking the universal one-wayness of H, and happens with negligible probability.
Combining the two scenarios, and the various games, we get that any adversary wins the security
game with negligible probability.
Function privacy is guaranteed by a reduction to the semantic security of the scheme, similar
(cid:117)(cid:116)
to the reduction done in the proof of Theorem 9.
7 Computing Linear Combinations
described by g0, . . . gd ∈ Rp, and on an input x0, . . . , xd ∈ Rp, g outputs(cid:80)d
In this section we give a specialized construction for a particular setting. Namely, we are interested
in getting an input private and function private split scheme that is not necessarily outsourceable,
but that works in the streaming model. Our scheme is focused on the delegation of the computation
of secret linear functions on encrypted data – linearity over Rp, i.e. a function g to be computed is
i=0 gi · xi. Again, we use
again the HE homomorphic encryption scheme, but this time we require its somewhat homomorphic
property for polynomials of degree D = 2 (see lemma 1 for the parameter choice). The scheme VCLC
is speciﬁed as follows.
KeyGen(g = g0, . . . gt, λ) → (P K, SK):
– Run HE.ParamGen(λ) by choosing q to be a prime of λ bits, and run (pk, dk) ← HE.KeyGen().
Let D = {µ ∈ Zq[X][Y ] : degX (µ) ≤ 2(n − 1), degY (µ) ≤ 2}.
H.KeyGen.
and compute ri ← PRFK(i).
– Generate a random member of the hash function family H : D → Zq by running κ $←
– Sample a uniform MAC key c $← Zq, a key K for a pseudorandom function PRF : [t] → Zq,
– Compute γi ← HE.Encpk(gi), and Ti ← c · Hκ(γi) + ri ∈ Zq.
– Set P K = (pk, γ0, T0, . . . , γt, Tt), and SK = (pk, dk, c, K, κ).
ProbGenSK(x = x0, . . . , xt) → σx, τx: for i = 0, . . . , t
– If σx, τx are not deﬁned: initialize σx as the zero vector in Rt+1
– Compute µi ← HE.Encpk(xi).
– Compute ri ← PRFK(i), as in the keygen algorithm.
– Set the i + 1th entry of σx as µi.
– Update τx by adding ri · Hκ(µi) to its previous value (i.e. τx+ = ri · Hκ(µi)).