1.2 
1 
0.8 
0.6 
0.4 
0.2 
0 
backprop 
lud 
kmeans 
lavaM D 
heartwall 
btree 
LIB 
gaussian 
bfs 
M U M 
hotspot 
g
Fig. 13: DMR mode performance overhead
pathfinder 
lbm 
cutcp 
srad 
Benchmarks 
p
sgem m  CP 
sad 
mri-q 
nw 
IR_warps 
IL_warps 
IR+IL_warps 
100% 
80% 
60% 
40% 
20% 
0% 
backprop 
lud 
heartwall 
btree 
kmeans 
lavaM D 
gaussian 
LIB 
bfs 
M U M 
hotspot 
Fig. 14: Opportunistic DMR breakdown
pathfinder 
lbm 
cutcp 
srad 
Benchmarks 
sgem m  CP 
sad 
mri-q 
nw 
NN  W P 
Average 
Average 
NN  WP 
surpass the performance overhead of redundant execution. This
is true for srad, lbm, and sgemm benchmarks. For example,
sgemm experiences 12% performance improvements because
the memory contention stalls are reduced by a factor of three.
In order to quantify the effectiveness of inherent redun-
dancy and idle SIMT lanes to achieve opportunistic DMR, we
classiﬁed the warps that are opportunistically DMR-ed into
three categories: inherent redundancy warps (IR warps), idle
lanes warps (IL warps), and IR + IL warps. IR warps
represent warps that exclusively leverage inherent redundancy
to achieve opportunistic DMR. IL warps represent the warps
that exclusively leverage idle SIMT lanes and thread replica-
tion to achieve opportunistic DMR. IR + IL warps are the
warps which exploit both inherent redundancy and idle SIMT
lanes to become opportunistically DMR-ed. The results are
presented in Figure 14. For all benchmarks, except MUM and
NN, more than 50% of the opportunistically DMR-ed warps
are IR warps. On average, 78% of the opportunistically
DMR-ed warps are IR warps as shown in the last bar in
Figure 14. MUM and NN benchmarks have limited inherent
redundancy to exploit. However, these two benchmarks have
few active threads within each warp instruction which allow
them to utilize idle SIMT lanes to force redundancy. For
example, 96% of the warp instructions in the NN benchmark
have only one active thread as shown in Figure 1.
B. TMR Mode Evaluation
While running in the TMR mode, Warped-RE framework
can tolerate one non-transient error in every cluster of three
SIMT lanes. In other words, if there is one SIMT lane that
is continuously producing incorrect results within each cluster
then Warped-RE framework guarantees functional correctness
by running in TMR mode. Warped-RE framework continues
to guarantee functional correctness until a second SIMT lane
within a cluster becomes faulty due to a non-transient error.
Figure 15 plots the execution time while running in TMR mode
relative to the baseline architecture without error detection
and correction support. The weighted average performance
overhead for all benchmark is 29%. Again, this is much less
than the expected overhead of triple redundant execution which
340340
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:52:38 UTC from IEEE Xplore.  Restrictions apply. 
i
e
m
T
n
o
i
t
u
c
e
x
E
e
v
i
t
a
l
e
R
2.5 
2 
1.5 
1 
0.5 
0 
backprop 
kmeans 
lavaM D 
btree 
gaussian 
LIB 
bfs 
heartwall 
M U M 
hotspot 
Fig. 15: TMR mode performance overhead
lbm 
cutcp 
Benchmarks 
pathfinder 
srad 
sgem m  CP 
sad 
mri-q 
lud 
nw 
IR_warps 
IL_warps 
IR+IL_warps 
e
g
a
t
n
e
c
r
e
P
p
r
a
W
100% 
80% 
60% 
40% 
20% 
0% 
backprop 
nw 
lud 
heartwall 
btree 
kmeans 
lavaM D 
bfs 
hotspot 
gaussian 
Fig. 16: Opportunistic TMR breakdown
cutcp 
srad 
pathfinder 
Benchmark 
sgem m 
sad 
mri-q 
lbm 
CP 
LIB 
M U M 
NN  W P 
Average 
Average 
NN  WP 
may reach up to 200% and this reduction is attributed to the
same three factors discussed in subsection VII-A.
We also measured the effectiveness of inherent redundancy
and idle SIMT lanes to achieve opportunistic TMR. The results
are given in Figure 16 and they are very similar to the results
in DMR mode. As shown, across all benchmarks 77% of
the opportunistically TMR-ed warps are IR warps. On the
other hand, only 7% of the opportunistically TMR-ed warps
are IL warps and 16% are IR + IL warps. Hence, we
deduce that inherent redundancy is also the main contributor
to opportunistic TMR execution.
C. Design Space Exploration
As discussed before, when a non-transient error is detected
in a SIMT lane, Warped-RE framework will be running in
the TMR mode and will not switch back to the DMR mode
from then on. While this approach looks conservative, our
exploration for different design alternatives shows that the
current procedure provides the best trade offs between the
design complexity and performance overhead. One of the
design alternatives proposals that we studied allows different
clusters to concurrently operate in different modes (i.e faulty
clusters operate in TMR mode and error-free clusters operate
in DMR mode). While such design is effective in enabling the
TMR mode only on the faulty SIMT lanes, it will complicate
the design of the control logic because the SIMT lanes are
overlapped between the neighboring clusters. For example, L2
is part of the 2nd DMR cluster during the DMR mode and the
1st TMR cluster during the TMR mode. Hence we may force
some error-free neighboring clusters to operate in TMR mode
to overcome the overlapping effect and we will end up having
a very slight improvement in the performance. Other design
that we explored allows the threads assigned to a faulty cluster
to run on different clusters as part of a different sub-warp. This
design requires each warp to be split into two sub-warps where
the second warp will have the threads assigned to the faulty
clusters. Due to the use of warp deformation almost all the
time, this design has 10% more performance overhead than
our proposed procedure.
D. Area and Power Evaluation
To evaluate the area and power overheads of the Warped-
RE framework we implemented the additional logic described
in section VI in RTL using Synopsis Design Compiler and
synthesized the RTL implementation using NCSU PDK 45nm
library [12]. The area consumed by the additional
three
pipeline stages including the wiring is estimated by 0.5mm2.
Notice that the total area of the SIMT lanes is 32mm2; thus,
the area overhead of the Warped-RE framework is 1.5%.
Traditional DMR and TMR executions require 100% and
200% power overheads, respectively. By exploiting inherent
redundancy between threads within the same warp, Warped-
RE framework reduces the power overheads of DMR and TMR
executions to 58% and 60%, respectively. The total dynamic
power consumed by the additional three stages is 632mW .
This represents the power consumed every cycle the stages
are activated. We measured the dynamic power consumed by
the GPU baseline using GPUWattch [7]. The results show that
the power overhead of the additional stages is around 10.6%.
VIII. RELATED WORK
[5]
[15]
reliability
processors
the
DMR
[13]
the
have
[16]. At
the authors in [15] and
using
Improving
of
been
widely
TMR
and
techniques
the CPUs and
studied [4]
[14]
embedded systems front,
[16]
proposed to run two copies of the same thread to guarantee
correctness. One of the threads runs ahead of the other and
their outputs are compared before committing the results of
the trailing thread to memory. The heading and trailing threads
can run on the same processor or on different processors. In
addition, the authors in [17] proposed to run in DMR mode
only during samples of the execution time. This sampling
DMR approach can only detect permanent errors. In addition,
the error detection latency can be high and might require
sophisticated recovery mechanism. Alternatively, our uniﬁed
Warped-RE framework can detect and correct transient and
non-transient errors instantaneously.
Hardware-based and software-based DMR techniques have
been proposed to improve GPUs reliability [4] [5] [6]. At the
hardware level, the authors in [4] proposed to leverage the
underutilization in threads activity to enable intra-warp DMR.
However, if the underutilization opportunities are not available
the entire warp will be re-executed to detect errors. Warped-
DMR [4] provides error detection only and assumes that error
correction is in place. The authors in [6] proposed Warped-
Shield framework to tolerate hard faults in GPUs SIMT lanes.
The authors assumed that error detection is in place and used
techniques like warp deformation to avoid the faulty lanes. On
the other hand, the Warped-RE framework exploits inherent
redundancy in GPU workloads to enable opportunistic error
detection (DMR mode) and correction (TMR mode) at low
cost.
At the software level, the authors in [5] proposed using
software based DMR by running the code two times in order
to verify the correctness of the computation. The authors
in [18] proposed the blockwatch technique which relies on the
compiler to deﬁne the control data similarities in the program
and augment the code with run-time checks to detect any
deviation from the expected control path. Also, the authors
341341
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:52:38 UTC from IEEE Xplore.  Restrictions apply. 
[8]
“Nvidias next generation cuda compute architecture: Fermi,” Nvidia,
Tech. Rep., 2009.
[9] A. Bakhoda, G. Yuan, W. Fung, H. Wong, and T. Aamodt, “Analyzing
cuda workloads using a detailed gpu simulator,” in IEEE International
Symposium on Performance Analysis of Systems and Software, April
2009, pp. 163–174.
“Parboil benchmark suite,” http://impact.crhc.illinois.edu/parboil.php.
[10]
[11] S. Che, M. Boyer, J. Meng, D. Tarjan, J. Sheaffer, S.-H. Lee, and
K. Skadron, “Rodinia: A benchmark suite for heterogeneous comput-
ing,” in IEEE International Symposium on Workload Characterization.,
Oct 2009, pp. 44–54.
process
“The
freepdk
http://www.eda.ncsu.edu/wiki/FreePDK.
J. Hopkins, A.L., I. Smith, T.B., and J. Lala, “Ftmp;a highly reli-
able fault-tolerant multiprocess for aircraft,” Proceedings of the IEEE,
vol. 66, no. 10, pp. 1221–1239, Oct 1978.
design
[12]
[13]
kit,”
[14] P. Meaney, S. Swaney, P. Sanda, and L. Spainhower, “Ibm z990 soft
error detection and recovery,” Device and Materials Reliability, IEEE
Transactions on, vol. 5, no. 3, pp. 419–427, Sept 2005.
[15] S. K. Reinhardt and S. S. Mukherjee, “Transient fault detection via
simultaneous multithreading,” in Proceedings of the 27th Annual Inter-
national Symposium on Computer Architecture, 2000, pp. 25–36.
[16] M. Gomaa, C. Scarbrough, T. Vijaykumar, and I. Pomeranz, “Transient-
fault recovery for chip multiprocessors,” in 30th Annual International
Symposium on Computer Architecture, June 2003, pp. 98–109.
[17] S. Nomura, M. D. Sinclair, C.-H. Ho, V. Govindaraju, M. de Kruijf,
and K. Sankaralingam, “Sampling + dmr: Practical and low-overhead
permanent fault detection,” SIGARCH Comput. Archit. News, vol. 39,
no. 3, pp. 201–212, Jun. 2011.
J. Wei and K. Pattabiraman, “Blockwatch: Leveraging similarity in
parallel programs for error detection,” in Dependable Systems and Net-
works (DSN), 2012 42nd Annual IEEE/IFIP International Conference
on, June 2012, pp. 1–12.
[18]
[19] K. S. Yim, C. Pham, M. Saleheen, Z. Kalbarczyk, and R. Iyer,
“Hauberk: Lightweight silent data corruption error detector for gpgpu,”
in Parallel Distributed Processing Symposium (IPDPS), 2011 IEEE
International, May 2011, pp. 287–300.
in [19] proposed the Hauberk technique that relies on the
compiler to insert veriﬁcation code by duplicating instruction.
Along with the code duplication, the warp scheduler within
the GPU must be augmented to guarantee that the original and
the duplicate instructions will execute on two different lanes.
While these techniques are able to provide high coverage, they
are agnostic to the inherent redundancy opportunities that exist
in the GPU workloads. In addition, the applied techniques will
not be able to deﬁne and/or locate the error as soon as it
happens. Also, running the code twice will consume higher
power, 100% in case of DMR and 200% in case of TMR. On
the other hand, our proposed techniques are able to detect the
error as soon as it happens and reduce the power overhead of
the DMR and the TMR techniques by taking advantage of the
inherent redundancy.
IX. CONCLUSION
In this paper we propose Warped-RE a uniﬁed framework
to provide low cost error detection and correction for SIMT
lanes in GPUs. The Warped-RE framework takes advantage
of the inherent redundancy between threads within the same
warp and the underutilization in the SIMT lanes to achieve
opportunistic redundant execution. The Warped-RE framework
runs in DMR mode by default, when an error is detected
the framework switches to run in TMR mode to correct the
faulty computation. After the error is corrected, the execution
returns to run in DMR mode when the error is transient. On
the other hand, when the error is non-transient the execution
continues to run in TMR mode to guarantee correctness.
When opportunistic redundant execution is not sufﬁcient, the
framework depends on the warp deformation technique to
cover all the executed instructions. The proposed Warped-
RE framework incurs 8.4% and 29% average performance
overhead during DMR and TMR modes, respectively.
ACKNOWLEDGEMENTS
This work was supported by the following grants: DARPA-
PERFECT-HR0011-12-2-0020 and NSF-CAREER-0954211,
NSF-0834798.
REFERENCES
[1] S. Nassif, K. Bernstein, D. Frank, A. Gattiker, W. Haensch, B. Ji,
E. Nowak, D. Pearson, and N. Rohrer, “High performance cmos
variability in the 65nm regime and beyond,” in IEEE International
Electron Devices Meeting, Dec 2007, pp. 569–571.
[2] R. Huang, “Nbti and dynamic variability in highly-scaled planar and
gate-all-around mosfets,” in IEEE International Integrated Reliability
Workshop Final Report, Oct 2012, pp. 53–53.
[3] W. McMahon, A. Haggag, and K. Hess, “Reliability scaling issues
for nanoscale devices,” Nanotechnology, IEEE Transactions on, vol. 2,
no. 1, pp. 33–38, Mar 2003.
[4] H. Jeon and M. Annavaram, “Warped-dmr: Light-weight error detection
for gpgpu,” in 45th Annual IEEE/ACM International Symposium on
Microarchitecture, Dec 2012, pp. 37–47.
[5] M. Dimitrov, M. Mantor, and H. Zhou, “Understanding software ap-
proaches for gpgpu reliability,” in Proceedings of 2Nd Workshop on
General Purpose Processing on Graphics Processing Units, 2009, pp.
94–104.
[6] W. Dweik, M. Abdel-Majeed, and M. Annavaram, “Warped-shield: Tol-
erating hard faults in gpgpus,” in 44th Annual IEEE/IFIP International
Conference on Dependable Systems and Networks (DSN), June 2014,
pp. 431–442.
J. Leng, T. Hetherington, A. ElTantawy, S. Gilani, N. S. Kim, T. M.
Aamodt, and V. J. Reddi, “Gpuwattch: Enabling energy optimizations
in gpgpus,” in Proceedings of the 40th Annual International Symposium
on Computer Architecture, 2013, pp. 487–498.
[7]
342342
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:52:38 UTC from IEEE Xplore.  Restrictions apply.