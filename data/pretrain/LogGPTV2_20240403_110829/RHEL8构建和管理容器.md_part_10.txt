    ``` literallayout
    $ echo "module load mpi/openmpi-x86_64" >> .bashrc
    ```
4.  要组合 `mpirun`{.literal} 和
    `podman`{.literal}，请使用以下定义创建一个容器：
    ``` literallayout
    $ cat Containerfile
    FROM registry.access.redhat.com/ubi8/ubi
    RUN yum -y install openmpi-devel wget && \
        yum clean all
    RUN wget https://raw.githubusercontent.com/open-mpi/ompi/master/test/simple/ring.c && \
        /usr/lib64/openmpi/bin/mpicc ring.c -o /home/ring && \
        rm -f ring.c
    ```
5.  构建容器：
    ``` literallayout
    $ podman build --tag=mpi-ring .
    ```
6.  启动容器。在有 4 个 CPU 的系统上,这个命令会启动 4 个容器：
    ``` literallayout
    $ mpirun \
       --mca orte_tmpdir_base /tmp/podman-mpirun \
       podman run --env-host \
         -v /tmp/podman-mpirun:/tmp/podman-mpirun \
         --userns=keep-id \
         --net=host --pid=host --ipc=host \
         mpi-ring /home/ring
    Rank 2 has cleared MPI_Init
    Rank 2 has completed ring
    Rank 2 has completed MPI_Barrier
    Rank 3 has cleared MPI_Init
    Rank 3 has completed ring
    Rank 3 has completed MPI_Barrier
    Rank 1 has cleared MPI_Init
    Rank 1 has completed ring
    Rank 1 has completed MPI_Barrier
    Rank 0 has cleared MPI_Init
    Rank 0 has completed ring
    Rank 0 has completed MPI_Barrier
    ```
    `mpirun`{.literal} 会启动 4 个 Podman 容器，每个容器都运行一个
    `ring`{.literal} 二进制的实例。所有 4 个进程都通过 MPI 进行沟通。
:::
::: itemizedlist
**其它资源**
-   [HPC 环境中的
    podman](https://podman.io/blogs/2019/09/26/podman-in-hpc.html){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_using-podman-in-hpc-environment_building-running-and-managing-containers.html#con_the-mpirun-options_assembly_using-podman-in-hpc-environment}mpirun 选项 {.title}
:::
following `mpirun`{.literal} 选项用于启动容器：
::: itemizedlist
-   `--mca orte_tmpdir_base /tmp/podman-mpirun line`{.literal} 告诉 Open
    MPI 在 `/tmp/podman-mpirun`{.literal} 中创建所有临时文件，而不是在
    `/tmp`{.literal}
    中创建。如果使用多个节点，则在其他节点上这个目录的名称会不同。这需要将完整的
    `/tmp`{.literal} 目录挂载到容器中，而这更为复杂。
:::
`mpirun`{.literal} 命令指定要启动的命令（ `podman`{.literal}
命令）。以下 `podman`{.literal} 选项用于启动容器：
::: itemizedlist
-   `运行`{.literal} 命令运行容器。
-   `--env-host`{.literal} 选项将主机中的所有环境变量复制到容器中。
-   `-v /tmp/podman-mpirun:/tmp/podman-mpirun`{.literal} 行告诉 Podman
    挂载 Open MPI 创建其在容器中可用的临时目录和文件的目录。
-   `--userns=keep-id`{.literal} 行可确保容器内部和外部的用户 ID 映射。
-   `--net=host --pid=host --ipc=host`{.literal} 行设置相同的网络、PID
    和 IPC 命名空间。
-   `mpi-ring`{.literal} 是容器的名称。
-   `/home/ring`{.literal} 是容器中的 MPI 程序。
:::
::: itemizedlist
**其它资源**
-   [HPC 环境中的
    podman](https://podman.io/blogs/2019/09/26/podman-in-hpc.html){.link}
:::
:::
:::
[]{#assembly_creating-and-restoring-container-checkpoints_building-running-and-managing-containers.html}
::: chapter
::: titlepage
# []{#assembly_creating-and-restoring-container-checkpoints_building-running-and-managing-containers.html#assembly_creating-and-restoring-container-checkpoints_building-running-and-managing-containers}第 6 章 创建并恢复容器检查点 {.title}
:::
Checkpoint/Restore in
Userspace（CRIU）是一个软件，可让您在正在运行的容器或独立应用程序中设置检查点，并将它的状态保存到磁盘中。您可以在重启时同时使用保存的数据来恢复容器。
::: section
::: titlepage
# []{#assembly_creating-and-restoring-container-checkpoints_building-running-and-managing-containers.html#proc_creating-and-restoring-a-container-checkpoint-locally_assembly_creating-and-restoring-container-checkpoints}本地创建并恢复容器检查点 {.title}
:::
这个示例基于 Python 的 web
服务器，该服务器会返回一个整数，它会在每个请求后递增。
::: orderedlist
**流程**
1.  创建基于 Python 服务器：
    ``` literallayout
    # cat counter.py
    #!/usr/bin/python3
    import http.server
    counter = 0
    class handler(http.server.BaseHTTPRequestHandler):
        def do_GET(s):
            global counter
               s.send_response(200)
               s.send_header('Content-type', 'text/html')
               s.end_headers()
               s.wfile.write(b'%d\n' % counter)
               counter += 1
    server = http.server.HTTPServer(('', 8088), handler)
    server.serve_forever()
    ```
2.  使用以下定义创建容器：
    ``` literallayout
    # cat Containerfile
    FROM registry.access.redhat.com/ubi8/ubi
    COPY counter.py /home/counter.py
    RUN useradd -ms /bin/bash counter
    RUN yum -y install python3 && chmod 755 /home/counter.py
    USER counter
    ENTRYPOINT /home/counter.py
    ```
    容器基于通用基础镜像（UBI 8）并使用基于 Python 的服务器。
3.  构建容器：
    ``` literallayout
    # podman build . --tag counter
    ```
    文件 `counter.py`{.literal} 和 `Containerfile`{.literal}
    是容器构建过程（`podman 构建）的输入。`{.literal}构建的镜像存储在本地，并使用标签
    `计数器`{.literal} 进行标记。
4.  以 root 用户身份启动容器：
    ``` literallayout
    # podman run --name criu-test --detach counter
    ```
5.  要列出所有正在运行的容器，请输入：
    ``` literallayout
    # podman ps
    CONTAINER ID  IMAGE  COMMAND  CREATED   STATUS  PORTS NAMES
    e4f82fd84d48  localhost/counter:latest  5 seconds ago  Up 4 seconds ago  criu-test
    ```
6.  显示容器的 IP 地址：
    ``` literallayout
    # podman inspect criu-test --format "{{.NetworkSettings.IPAddress}}"
    10.88.0.247
    ```
7.  将请求发送到容器：
    ``` literallayout
    # curl 10.88.0.247:8080
    0
    # curl 10.88.0.247:8080
    1
    ```
8.  为容器创建一个检查点：
    ``` literallayout
    # podman container checkpoint criu-test
    ```
9.  重启系统：
10. 恢复容器：
    ``` literallayout
    # podman container restore --keep criu-test
    ```
11. 将请求发送到容器：
    ``` literallayout
    # curl 10.88.0.247:8080
    2
    # curl 10.88.0.247:8080
    3
    # curl 10.88.0.247:8080
    4
    ```
    现在，这个结果不会在 `0`{.literal} 再次启动，而是继续前面的值。
:::
这样，您可以通过重新引导轻松保存完整的容器状态。
::: itemizedlist
**其它资源**
-   [为 Podman
    添加检查点/恢复支持](https://podman.io/blogs/2018/10/10/checkpoint-restore.html){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_creating-and-restoring-container-checkpoints_building-running-and-managing-containers.html#proc_reducing-startup-time-using-container-restore_assembly_creating-and-restoring-container-checkpoints}使用容器恢复减少启动时间 {.title}
:::
您可以使用容器迁移来减少容器的启动时间，这需要一定时间进行初始化。通过使用检查点，您可以在同一个主机上或不同的主机上多次恢复容器。本例基于本地
[创建和恢复容器检查点的容器](#assembly_creating-and-restoring-container-checkpoints_building-running-and-managing-containers.html#proc_creating-and-restoring-a-container-checkpoint-locally_assembly_creating-and-restoring-container-checkpoints "本地创建并恢复容器检查点"){.link}。
::: orderedlist
**流程**
1.  创建容器的检查点，并将检查点镜像导出到 `tar.gz`{.literal} 文件中：
    ``` screen
    # podman container checkpoint criu-test --export /tmp/chkpt.tar.gz
    ```
2.  从 `tar.gz`{.literal} 文件中恢复容器：
    ``` screen
    # podman container restore --import /tmp/chkpt.tar.gz --name counter1
    # podman container restore --import /tmp/chkpt.tar.gz --name counter2
    # podman container restore --import /tmp/chkpt.tar.gz --name counter3
    ```
    name `(`{.literal}
    `-n`{.literal})选项为从导出的检查点恢复的容器指定一个新名称。
3.  显示每个容器的 ID 和名称：
    ``` screen
    # podman ps -a --format "{{.ID}} {{.Names}}"
    a8b2e50d463c counter3
    faabc5c27362 counter2
    2ce648af11e5 counter1
    ```
4.  显示每个容器的 IP 地址：
    ``` screen
    #️ podman inspect counter1 --format "{{.NetworkSettings.IPAddress}}"
    10.88.0.248
    #️ podman inspect counter2 --format "{{.NetworkSettings.IPAddress}}"
    10.88.0.249
    #️ podman inspect counter3 --format "{{.NetworkSettings.IPAddress}}"
    10.88.0.250
    ```
5.  将请求发送到每个容器：
    ``` screen
    #️ curl 10.88.0.248:8080
    4
    #️ curl 10.88.0.249:8080
    4
    #️ curl 10.88.0.250:8080
    4
    ```
    请注意，`在所有情况下`{.literal} 结果都是
    4，因为您正在使用从同一检查点恢复的不同容器。
:::
使用这种方法，您可以快速启动初始检查点容器的有状态副本。
::: itemizedlist
**其它资源**
-   [在 RHEL 中使用 Podman
    进行容器迁移](https://www.redhat.com/en/blog/container-migration-podman-rhel){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_creating-and-restoring-container-checkpoints_building-running-and-managing-containers.html#proc_migrating-containers-among-systems_assembly_creating-and-restoring-container-checkpoints}在系统间迁移容器 {.title}
:::
此流程显示运行的容器从一个系统迁移到另一个系统，而不会丢失容器中运行的应用程序的状态。本例基于
[本地创建和恢复容器检查点的容器](#assembly_creating-and-restoring-container-checkpoints_building-running-and-managing-containers.html#proc_creating-and-restoring-a-container-checkpoint-locally_assembly_creating-and-restoring-container-checkpoints "本地创建并恢复容器检查点"){.link}。使用
`计数器`{.literal} 标记的部分。
::: title
**先决条件**
:::
如果容器推送到注册表，则不需要执行下列步骤，因为 Podman
将自动从注册表下载容器（如果本地不可用）。本例不使用
registry，您必须导出之前构建并标记的容器（请参阅
[本地创建和恢复容器检查点](#assembly_creating-and-restoring-container-checkpoints_building-running-and-managing-containers.html#proc_creating-and-restoring-a-container-checkpoint-locally_assembly_creating-and-restoring-container-checkpoints "本地创建并恢复容器检查点"){.link}
）。
::: itemizedlist
-   导出之前构建的容器：
    ``` screen
    # podman save --output counter.tar counter
    ```
-   将导出的容器镜像复制到目标系统(`other_host)`{.literal}：
    ``` literallayout
    # scp counter.tar other_host:
    ```
-   在目的系统中导入导出的容器：
    ``` literallayout
    # ssh other_host podman load --input counter.tar
    ```
:::
现在，此容器迁移的目标系统会将相同的容器镜像存储在其本地容器存储中。
::: orderedlist
**流程**
1.  以 root 用户身份启动容器：
    ``` screen
    # podman run --name criu-test --detach counter
    ```
2.  显示容器的 IP 地址：
    ``` screen
    # podman inspect criu-test --format "{{.NetworkSettings.IPAddress}}"
    10.88.0.247
    ```
3.  将请求发送到容器：
    ``` screen
    # curl 10.88.0.247:8080
    0
    # curl 10.88.0.247:8080
    1
    ```
4.  创建容器的检查点，并将检查点镜像导出到 `tar.gz`{.literal} 文件中：
    ``` literallayout
    # podman container checkpoint criu-test --export /tmp/chkpt.tar.gz
    ```
5.  将 checkpoint 归档复制到目标主机：