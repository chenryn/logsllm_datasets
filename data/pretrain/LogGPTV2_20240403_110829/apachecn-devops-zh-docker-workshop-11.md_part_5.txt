我们可以开始使用 AppArmor，因为它提供了一些易于使用的命令行工具。您将使用的第一个命令是`aa-status`命令，它提供了系统上运行的所有配置文件的状态。这些位于您系统的`/etc/apparmor.d`目录中:
```
aa-status
```
如果我们的系统上安装了概要文件，我们至少应该有`docker-default`概要文件；它可以通过`docker run`命令的`--security-opt`选项应用于我们的 Docker 容器。在以下示例中，您可以看到我们正在将`--security-opt`值设置为`apparmor`配置文件，或者您可以使用`unconfined`配置文件，这意味着没有与映像一起运行的配置文件:
```
docker run --security-opt apparmor= 
```
为了生成我们的配置文件，我们可以使用`aa-genprof`命令来进一步了解需要设置什么作为配置文件。当您执行一些示例命令时，AppArmor 将扫描日志，然后在系统上为您创建一个配置文件，并将其放入默认配置文件目录:
```
aa-genprof 
```
一旦你对你的个人资料感到满意，你就需要把它们加载到你的系统中，然后你才能开始在你的图片中使用它们。您可以使用带有`-r`(替换，如果已经设置)和`-W`(写入缓存)选项的`apparmor_parser`命令。然后，这些概要文件可以与您的运行容器一起使用:
```
apparmor_parser -r -W 
```
最后，如果您希望从 AppArmor 中删除一个配置文件，您可以使用带有`-R`选项的`apparmor_parser`命令来完成:
```
apparmor_parser -R 
```
AppArmor 看起来很复杂，但希望通过下面的练习，您应该对应用感到舒适，并在生成自定义配置文件时获得额外的信心。
## 练习 11.05:开始使用 AppArmor 安全配置文件
以下练习将向您介绍 AppAmor 安全配置文件，并帮助您在运行的 Docker 容器中实现新规则:
1.  如果您运行的是 Docker Engine 版本 19 或更高版本，AppArmor 应该已经作为应用的一部分进行了设置。运行`docker info`命令，确认其正在运行:
    ```
    docker info
    …
    Security Options:
      apparmor
    …
    ```
2.  在本章前面，我们通过创建用户`20002`来更改容器运行时的用户。我们将暂时停止这种情况，来演示 AppArmor 在这种情况下是如何工作的。用你的文本编辑器打开`Dockerfile`，这一次，评论*第 9 行*如下代码所示:
    ```
      8 
      9 #USER 20002
    ```
3.  Build the `Dockerfile` again and verify the user the image is once running as the root user again:
    ```
    docker build -t security-app . ; docker run --rm security-app whoami
    ```
    以上命令将建立`Dockerfile`，然后返回如下输出:
    ```
    root
    ```
4.  Use the AppArmor `status` command by running `aa-status` in the command line:
    ```
    aa-status
    ```
    注意
    如果拒绝运行`aa-status`命令，使用`sudo`。
    这将显示与下面类似的输出，并将提供加载的配置文件和加载的配置文件类型。您会注意到，输出包括了运行在 Linux 系统上的所有 AppArmor 配置文件:
    ```
    apparmor module is loaded.
    15 profiles are loaded.
    15 profiles are in enforce mode.
        /home/vinces/DockerWork/example.sh
        /sbin/dhclient
        /usr/bin/lxc-start
        /usr/lib/NetworkManager/nm-dhcp-client.action
        /usr/lib/NetworkManager/nm-dhcp-helper
        /usr/lib/connman/scripts/dhclient-script
        /usr/lib/lxd/lxd-bridge-proxy
        /usr/lib/snapd/snap-confine
        /usr/lib/snapd/snap-confine//mount-namespace-capture-helper
        /usr/sbin/tcpdump
        docker-default
        lxc-container-default
        lxc-container-default-cgns
        lxc-container-default-with-mounting
        lxc-container-default-with-nesting
    0 profiles are in complain mode.
    1 processes have profiles defined.
    1 processes are in enforce mode.
        /sbin/dhclient (920) 
    0 processes are in complain mode.
    0 processes are unconfined but have a profile defined.
    ```
5.  在后台运行`security-app`容器，帮助我们测试 apparemor:
    ```
    docker run -dit security-app sh
    ```
6.  As we didn't specify a profile to use, AppArmor uses the `docker-default` profile. Verify this by running `aa-status` again:
    ```
    aa-status
    ```
    您将看到，在输出的底部，它现在显示两个进程在`enforce mode`中，一个显示`docker-default`:
    ```
    apparmor module is loaded.
    …
    2 processes are in enforce mode.
        /sbin/dhclient (920) 
        docker-default (9768)
    0 processes are in complain mode.
    0 processes are unconfined but have a profile defined.
    ```
7.  移除我们正在运行的当前容器，以便您在本练习的后面不会感到困惑:
    ```
    docker kill $(docker ps -a -q)
    ```
8.  使用`-–security-opt` Docker 选项，指定`apparmor=unconfined`，在不使用 AppArmor 配置文件的情况下启动容器。此外，使用`–-cap-add SYS_ADMIN`功能确保您可以完全访问正在运行的容器:
    ```
    docker run -dit --security-opt apparmor=unconfined --cap-add SYS_ADMIN security-app sh
    ```
9.  访问容器，看看可以运行什么类型的命令。使用带有`CONTAINER ID`的`docker exec`命令来访问容器，但是请注意您的`CONTAINER ID`值将不同于以下值:
    ```
    docker exec -it db04693ddf1f sh
    ```
10.  Test out the permissions you have by creating two directories and mounting them as a bind mount with the following command:
    ```
    mkdir 1; mkdir 2; mount --bind 1 2
    ls -l
    ```
    能够在容器上装载目录是一种提升的特权，因此，如果您能够做到这一点，很明显，没有配置文件阻止我们，我们可以像这样装载文件系统:
    ```
    total 8
    drwxr-xr-x    2 root     root          4096 Nov  4 04:08 1
    drwxr-xr-x    2 root     root          4096 Nov  4 04:08 2
    ```
11.  使用`docker kill`命令退出容器。您应该看到默认的 AppArmor 配置文件是否会限制对这些命令的访问:
    ```
    docker kill $(docker ps -a -q)
    ```
12.  Create a new instance of the `security-app` image. In this instance, use the `–-cap-add SYS_ADMIN` capability, as well, to allow the default AppArmor profile to be loaded:
    ```
    docker run -dit --cap-add SYS_ADMIN security-app sh
    ```
    该命令将在创建新容器时返回提供给用户的随机散列。
13.  Test the changes by accessing the new running container using `exec` command, and see whether you can perform a bind mount, as in the earlier step:
    ```
    docker exec -it  sh 
    mkdir 1; mkdir 2; mount --bind 1 2
    ```
    你应该有希望看到`Permission denied`:
    ```
    mount: mounting 1 on 2 failed: Permission denied
    ```
14.  Exit the container again. Delete the original container using the `docker kill` command:
    ```
    docker kill $(docker ps -a -q)
    ```
    在本练习的下一部分，您将查看是否可以为 Docker 容器实现我们的自定义概要文件。
15.  Use AppArmor tools to gather information about the resource needed to be tracked. Use the `aa-genprof` command to track details of the `nmap` command:
    ```
    aa-genprof nmap
    ```
    注意
    如果没有安装`aa-genprof`命令，请使用以下命令安装，然后再次运行`aa-genprof nmap`命令:
    `sudo apt install apparmor - utils`
    我们已经减少了命令的输出，但是如果它成功了，您应该会看到一个输出，显示它正在分析`/usr/bin/nmap`命令:
    ```
    …
    Profiling: /usr/bin/nmap
    [(S)can system log for AppArmor events] / (F)inish
    ```
    注意
    如果系统中没有安装`nmap`，运行以下命令:
    `sudo apt-get update`
    `sudo apt-get install nmap`
16.  在单独的终端窗口中运行`nmap`命令，为`aa-genprof`提供应用的详细信息。使用`-u root`选项作为`docker run`命令的一部分，以 root 用户身份运行`security-app`容器，以便它能够运行`nmap`命令:
    ```
    docker run -it -u root security-app sh -c 'nmap -sS -p 443 localhost'
    ```
17.  Move back to the terminal you have been running the `aa-genprof` command from. Press *S* to scan the system logs for events. Once the scan finishes, press *F* to finish the generation:
    ```