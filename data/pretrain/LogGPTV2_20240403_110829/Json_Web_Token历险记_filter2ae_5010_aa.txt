# Json Web Token历险记
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
##
## 前记
最近国赛+校赛遇到两次json web token的题，发现自己做的并不算顺畅，于是有了这篇学习文章。
## 为什么要使用Json Web Token
Json Web Token简称jwt  
顾名思义，可以知道是用于身份认证的  
那么为什么要有身份认证？  
我们知道HTTP是无状态的，打个比方：  
有状态：  
A：你今天中午吃的啥？  
B：吃的大盘鸡。  
A：味道怎么样呀？  
B：还不错，挺好吃的。
无状态：  
A：你今天中午吃的啥？  
B：吃的大盘鸡。  
A：味道怎么样呀？  
B：？？？啊？啥？啥味道怎么样？  
那么怎么样可以让HTTP记住曾经发生的事情呢？  
这里的选择可以很多：cookie,session,jwt  
对于一般的cookie，如果我们的加密措施不当，很容易造成信息泄露，甚至信息伪造，这肯定不是我们期望的。  
那么对于session呢？  
对于session:客户端在服务端登陆成功之后，服务端会生成一个sessionID，返回给客户端，客户端将sessionID保存到cookie中，例如phpsessid，再次发起请求的时候，携带cookie中的sessionID到服务端，服务端会缓存该session（会话），当客户端请求到来的时候，服务端就知道是哪个用户的请求，并将处理的结果返回给客户端，完成通信。  
但是这样的机制会存在一些问题：  
1、session保存在服务端，当客户访问量增加时，服务端就需要存储大量的session会话，对服务器有很大的考验；  
2、当服务端为集群时，用户登陆其中一台服务器，会将session保存到该服务器的内存中，但是当用户的访问到其他服务器时，会无法访问，通常采用缓存一致性技术来保证可以共享，或者采用第三方缓存来保存session，不方便。  
所以这个时候就需要jwt了  
在身份验证中，当用户使用他们的凭证成功登录时，JSON Web
Token将被返回并且必须保存在本地（通常在本地存储中，但也可以使用Cookie），而不是在传统方法中创建会话服务器并返回一个cookie。  
无论何时用户想要访问受保护的路由或资源，用户代理都应使用承载方案发送JWT，通常在授权header中。header的内容应该如下所示：
    Authorization: Bearer 
这是一种无状态身份验证机制，因为用户状态永远不会保存在服务器内存中。服务器受保护的路由将在授权头中检查有效的JWT，如果存在，则允许用户访问受保护的资源。由于JWT是独立的，所有必要的信息都在那里，减少了多次查询数据库的需求。  
这使我们可以完全依赖无状态的数据API，无论哪些域正在为API提供服务，因此跨源资源共享（CORS）不会成为问题，因为它不使用Cookie。
## Json Web Token结构
那么一般jwt长什么样子呢？  
我们随便挑一个看看：
    eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiYWRtaW5za3kiLCJwcml2Ijoib3RoZXIifQ.AoTc1q2NAErgqk6EeTK4MGH7cANVVF9XTy0wLv8HpgUfNcdM-etmv0Y9XmOuygF_ymV1rF6XQZzLrtkFqdMdP0NaZnTOYH35Yevaudx9bVpu9JHG4qeXo-0TXBcpaPmBaM0V0GxyZRNIS2KwRkNaxAQDQnyTN-Yi3w8OVpJYBiI
不妨解密一下
    {"alg":"RS256","typ":"JWT"}{"name":"adminsky","priv":"other"}乱码
不难看出，jwt解码后分为3个部分，由三个点（.）分隔  
分别为：
    Header
    Payload
    Signature
###  Header
通常由两部分组成：令牌的类型，即JWT和正在使用的散列算法，如HMAC SHA256或RSA。  
正如json所显示
    {
        "alg":"RS256",
        "typ":"JWT"
    }
alg为算法的缩写，typ为类型的缩写  
然后，这个JSON被Base64编码，形成JSON Web Token的第一部分。
###  Payload
令牌的第二部分是包含声明的有效负载。声明是关于实体（通常是用户）和其他元数据的声明。  
这里是用户随意定义的数据  
例如上面的举例
    {
        "name":"adminsky",
        "priv":"other"
    }
然后将有效载荷Base64进行编码以形成JSON Web Token的第二部分。  
但是需要注意对于已签名的令牌，此信息尽管受到篡改保护，但任何人都可以阅读。除非加密，否则不要将秘密信息放在JWT的有效内容或标题元素中。
###  Signature
要创建签名部分，必须采用header，payload，密钥  
然后利用header中指定算法进行签名  
例如HS256(HMAC SHA256),签名的构成为：
    HMACSHA256(
      base64Encode(header) + "." +
      base64Encode(payload),
      secret)
然后将这部分base64编码形成JSON Web Token第三部分
## Json Web Token攻击手段
既然JWT作为一种身份验证的手段，那么必然存在伪造身份的恶意攻击，那么我们下面探讨一下常见的JWT攻击手段
###  算法修改攻击
我们知道JWT的header部分中，有签名算法标识alg  
而alg是用于签名算法的选择，最后保证用户的数据不被篡改。  
但是在数据处理不正确的情况下，可能存在alg的恶意篡改  
例如由于网站的不严谨，我们拿到了泄露的公钥pubkey  
我们知道如果签名算法为RS256，那么会选择用私钥进行签名，用公钥进行解密验证  
假设我们只拿到了公钥，且公钥模数极大，不可被分解，那么如何进行攻击呢？  
没有私钥我们是几乎不可能在RS256的情况下篡改数据的，因为第三部分签名需要私钥，所以我们可以尝试将RS256改为HS256  
此时即非对称密码变为对称加密  
我们知道非对称密码存在公私钥问题  
而对称加密只有一个key  
此时如果以pubkey作为key对数据进行篡改，则会非常简单，而如果后端的验证也是根据header的alg选择算法，那么显然正中下怀。  
下面以一道实战为例进行说明：  
拿到题目
    http://pastebin.bxsteam.xyz
一开始不知道是要做什么，所以先查看源码  
发现
    http://pastebin.bxsteam.xyz/static/js/common.js
其中几个点引人注目  
关注点1：
    auth = "Bearer " + token;
    $.ajax({
        url: '/list',
        type: 'GET',
        headers:{"Authorization":auth},
    })
存在web token  
关注点2:
    function getpubkey(){
        /* 
        get the pubkey for test
        /pubkey/{hash}
        */
    }
发现有一个存放公钥的目录  
所以立刻想到了json web token  
于是我抓包查看token
    Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiYWRtaW5za3kiLCJwcml2Ijoib3RoZXIifQ.AoTc1q2NAErgqk6EeTK4MGH7cANVVF9XTy0wLv8HpgUfNcdM-etmv0Y9XmOuygF_ymV1rF6XQZzLrtkFqdMdP0NaZnTOYH35Yevaudx9bVpu9JHG4qeXo-0TXBcpaPmBaM0V0GxyZRNIS2KwRkNaxAQDQnyTN-Yi3w8OVpJYBiI
使用`https://jwt.io/`  
得到3段：
    {
      "alg": "RS256",
      "typ": "JWT"
    }
    {
      "name": "adminsky",
      "priv": "other"
    }