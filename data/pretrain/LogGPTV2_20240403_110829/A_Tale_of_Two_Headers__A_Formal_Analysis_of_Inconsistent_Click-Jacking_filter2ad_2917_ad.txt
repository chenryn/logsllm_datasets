### 5.3.2 Inadequate Compatibility-Oriented Policies

The adoption of a compatibility-oriented policy is often unjustified, as it is possible to write an XFO header that enforces the same restrictions with minimal effort and expertise from web developers, without resorting to Referer sniffing. Our analysis revealed that this was the case for 105 policies (13%), where protection could be improved with little additional work. This indicates that the current bleak security landscape can be significantly enhanced with relatively minor adjustments, yet such improvements are not being implemented in practice.

### 5.3.3 Unduly Inconsistent Policies

Next, we focus on the 415 inconsistent policies that do not fall into either the security-oriented or compatibility-oriented categories. These policies are difficult to justify as secure or even as intended, as discussed in Section 3. The distribution of these policies is as follows:

- **76% (315 policies)**: Interpreted differently by at least two legacy browsers.
- **69% (289 policies)**: Interpreted differently by at least two modern browsers.
- **7% (29 policies)**: Given the same interpretation by all legacy and modern browsers, but these interpretations are incomparable.

Alarmingly, 92% (380 policies) of these inconsistent policies do not enforce any framing restriction on at least one of the browsers in our study, confirming the significant security risk posed by such inconsistencies. For example, the website https://es.sprint.com sets an XFO header to `ALLOW-FROM https://www.sprint.com` but does not include a companion CSP, leaving browsers without `ALLOW-FROM` support unprotected. Another example is https://whois.web.com, which sends two XFO headers, one set to `SAMEORIGIN` and one to `DENY`, resulting in inconsistent framing behavior across different browsers.

### 5.3.4 Root Causes of Inconsistencies

To understand the origins of these undue inconsistencies, we analyzed the main practices leading to policy inconsistency (Table 6). We found that the `ALLOW-FROM` directive is a major contributor, as 69% (322 out of 465) of policies using `ALLOW-FROM` do not come with any CSP and thus offer no protection on most modern browsers. Additionally, we identified 53 policies where both XFO and CSP are syntactically correct but express incomparable policies. For instance, https://gfp.sd.gov deploys an XFO header set to `SAMEORIGIN`, while its CSP allows framing from every subdomain of arcgis.com, soundcloud.com, and flipsnack.com. While we cannot provide a definitive explanation for such policies, it is plausible that XFO was deployed for a legacy version of the website and never updated.

### 5.3.5 Security Impact Summary

We summarize the security impact of our findings by calculating the number of policies that fail to offer any level of protection to at least one browser, and separately for modern browsers (Table 7). These numbers confirm that while not all inconsistencies are necessarily dangerous, a majority (64%) are. Specifically, almost every inconsistent policy that is not security-oriented is completely ineffective on at least one browser. However, users of modern browsers generally enjoy a higher level of protection, as only 16% of inconsistencies void any form of security enforcement in modern browsers, with undue inconsistencies being the primary threat.

### 5.4 The Role of Browsers

Our assessment of inconsistencies across popular browsers raises the question of how the choice of browsers affects our results. To address this, we conducted a secondary analysis excluding Internet Explorer and Opera Mini, which do not support CSP. This reduced the total number of inconsistent policies from 1,800 to 289, a significant improvement. However, 96% (278 out of 289) of these remaining policies still do not enforce any restrictions in at least one modern browser, confirming that the adoption of modern browsers mitigates but does not entirely solve the problem of inconsistencies. The primary causes remain the use of `ALLOW-FROM` and the adoption of comma-separated directives in XFO.

Recent changes in Firefox, which dropped support for `ALLOW-FROM` in version 70, and Microsoft's announcement that Edge will move to the Chromium architecture in 2020, suggest a trend toward reducing inconsistencies in modern browsers. Unfortunately, 69% (322 out of 465) of policies using `ALLOW-FROM` do not have a CSP, indicating that these changes may weaken click-jacking protection on the web.

### 5.5 Limitations

While we quantified the security impact of detected policy inconsistencies, we cannot definitively show that policies failing to provide framing control in some browsers lead to exploitable vulnerabilities. Identifying such pages at scale requires accounts for all tested sites and a deep understanding of application semantics. However, the widespread adoption of framing control (33% of all crawled URLs, spread across 58% of sites) suggests that click-jacking is perceived as a significant security threat. Our analysis serves as a cautionary tale, highlighting potential issues arising from policy inconsistencies.

Additionally, our study focuses on the 10,000 most popular sites, which may not fully represent the entire web. However, prior research indicates that the popularity of domains often correlates with security measures, suggesting that our results likely represent a lower bound of the actual problems in the wild.

### 6. Recommendations and Countermeasures

Based on our analysis, we provide recommendations for web developers and browser vendors to improve the situation.

#### 6.1 Recommendations for Web Developers

1. **Use Both XFO and CSP**: For effective framing control, both XFO and CSP should be used. XFO alone is insufficient due to double framing attacks and lack of support for `ALLOW-FROM`. Conversely, using only CSP leaves legacy browser users unprotected. Only 8% of collected policies use both mechanisms, and 54% of these are inconsistent.
2. **Single XFO Header**: Ensure that at most one XFO header is sent with each web page, as multiple headers can lead to inconsistent interpretations. There is no practical reason to deploy more than one XFO header.
3. **Avoid Comma-Separated Values**: Do not use comma-separated values in XFO headers, as they are parsed inconsistently across browsers and can void protection.

#### 6.2 Recommendations for Browser Vendors

1. **Informative Messages**: Provide more informative messages in the JavaScript console to guide web developers. For example, when encountering an `ALLOW-FROM` directive, browsers should explicitly warn about the need to use CSP and provide a candidate value for `frame-ancestors`.
2. **Clear Specifications**: Implement only client-side security mechanisms with clear and precise specifications. The inconsistent implementation of XFO across browsers highlights the importance of well-defined standards.

#### 6.3 Retrofitting Security

To help web developers, we developed a server-side proxy that ensures consistency in framing control policies. The proxy, available at https://github.com/cispa/framing-control-proxy, inspects HTTP traffic and automatically fixes framing control headers to ensure consistent protection across all browsers.