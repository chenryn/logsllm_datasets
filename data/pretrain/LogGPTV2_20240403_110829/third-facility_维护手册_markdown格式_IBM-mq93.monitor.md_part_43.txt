### 14 E Integer 2 QWS50R1N: Number of Instances of QCST

#### Instrumentation Standard Header (QWHS)
The format of the QWHS is defined in the C programming language header file `thlqual.SCSQC370(CSQDSMFC)` and in the assembler macro `thlqual.SCSQMACS(CSQDQWHS)`. The key fields relevant to channel initiator SMF 116 records are as follows:

**Table 49. Key Fields in the QWHS**

| Name        | Length  | Description                                                                 |
|-------------|---------|-----------------------------------------------------------------------------|
| QWHSNDA     | 1 byte  | Number of self-defining sections                                            |
| QWHSSSID    | 4 bytes | Subsystem name                                                              |
| QWHSSMFC    | 1 bit   | Indicates whether there are multiple SMF records for this interval. If set, information for this interval continues in subsequent SMF records. If not set, this is the last or only record. |
| QWHSTIME    | 8 bytes | Local time of the start of the interval in STCK format                       |
| QWHSDURN    | 8 bytes | Duration from the start to the end of the interval in STCF format            |
| QWHSSTCK    | 8 bytes | End of the interval in UTC in STCK format                                   |

### Channel Accounting Data Records
This section serves as a reference for channel accounting data records. The format is described in the assembler macro `thlqual.SCSQMACS(CSQDQCST)` and in the C programming language header file `thlqual.SCSQC370(CSQDSMFC)`. Note that field names in C are in lowercase, e.g., `qcst`.

Channel accounting data provides information about the status and statistics of each channel instance, including:

- **Average Network Time (qcstntav)**
- **Average Time on Exit (qcstetav)**
- **Channel Batch Data Limit (qcstcbdl)**
- **Channel Batch Interval (qcstcbit)**
- **Channel Batch Size (qcstcbsz)**
- **Channel Dispatcher Number (qcstdspn)**
- **Channel Disposition (qcstchdp)**
- **Channel Name (qcstchnm)**
- **Channel State (qcstchst)**
- **Channel Started Time (qcststrt)**
- **Channel Status Collected Time (qcstcltm)**
- **Channel Stopped Time (qcstludt)**
- **Channel Type (qcstchty)**
- **Common Name (CN) from SSLCERTI (qcstslcn)**
- **Compression Rate (qcstcpra)**
- **Connection Name (qcstcnnm)**
- **Current Shared Conversations (qcstcscv)**
- **DNS Resolution Time (qcstdnrt)**
- **Effective Value of STATCHL Parameter (qcststcl)**
- **Last Message Time (qcstlmst)**
- **Maximum Network Time (qcstntmx)**
- **Maximum Time on Exit (qcstetmx)**
- **Minimum Network Time (qcstntmn)**
- **Minimum Time on Exit (qcstetmn)**
- **Name of the Remote Queue Manager or Application (qcstrqmn)**
- **Number of Batches (qcstbatc)**
- **Number of Bytes for Message Data (qcstnbyt)**
- **Number of Bytes for Persistent Message Data (qcstnpby)**
- **Number of Bytes Received for Both Message Data and Control Information (qcstbyrc)**
- **Number of Bytes Sent for Both Message Data and Control Information (qcstbyst)**
- **Number of Full Batches (qcstfuba)**
- **Number of Messages, or Number of MQI Calls (qcstnmsg)**
- **Number of Persistent Messages (qcstnpmg)**
- **Number of Put Retries (qcstptrc)**
- **Number of Transmission Queue Becoming Empty (qcstqetc)**
- **Number of Transmission Buffers Received (qcstbfrc)**
- **Number of Transmission Buffers Sent (qcstbfst)**
- **Serial Number from SSLPEER (qcstslsn)**
- **SSL CipherSpec (Zero Means TLS Not Used) (qcstslcs)**
- **Date and Time of Maximum Network Time (qcstntdt)**
- **Date and Time of Maximum Time on Exit (qcstetdt)**

Note: The fields `qcstetmn` (Minimum Time on Exit) and `qcstntmn` (Minimum Network Time) are initialized to the hexadecimal value `8FFFFFFF` when unused.

This information can be used to analyze the throughput of a channel, batch limits, network latency, remote end details, and performance of user exits.

### Example of Channel Accounting Data
The following example is formatted using IBM MQ SupportPac MP1B:

- **SMF Interval Start**: 2014/03/26, 02:30:00
- **SMF Interval End**: 2014/03/26, 02:45:00
- **SMF Interval Duration**: 899.997759 seconds

**Information about the Channel:**
- **Connection Name**: 9.20.4.159
- **Channel Disp**: PRIVATE
- **Channel Type**: RECEIVER
- **Channel Status**: CLOSING
- **Channel STATCHL**: HIGH
- **Start Date & Time**: 2014/03/26, 02:44:58
- **Channel Status Collect Time**: 2014/03/26, 02:45:00
- **Last Status Changed**: 1900/01/01, 00:00:00
- **Last Msg Time**: 2014/03/26, 02:44:59
- **Batch Size**: 50
- **Messages/Batch**: 3.3
- **Number of Messages**: 1,102
- **Number of Persistent Messages**: 1,102
- **Number of Batches**: 335
- **Number of Full Batches**: 0
- **Number of Partial Batches**: 335
- **Buffers Sent**: 337
- **Buffers Received**: 1,272
- **Message Data**: 5,038,344 (4 MB)
- **Persistent Message Data**: 5,038,344 (4 MB)
- **Non-Persistent Message Data**: 0 (0 B)
- **Total Bytes Sent**: 9,852 (9 KB)
- **Total Bytes Received**: 5,043,520 (4 MB)
- **Bytes Received/Batch**: 15,055 (14 KB)
- **Bytes Sent/Batch**: 29 (29 B)
- **Batches/Second**: 1
- **Bytes Received/Message**: 4,576 (4 KB)
- **Bytes Sent/Message**: 8 (8 B)
- **Bytes Received/Second**: 28,019 (27 KB/sec)
- **Bytes Sent/Second**: 54 (54 B/sec)
- **Compression Rate**: 0
- **Remote Qmgr/App**: MQPH
- **Put Retry Count**: 0

### Tuning Your IBM MQ Network
Use the tuning tips in this section to improve the performance of your queue manager network.

#### Tuning Client and Server Connection Channels
The default setting for `SHARECNV` is 10, allowing up to 10 client conversations per channel instance. However, different settings may be more optimal depending on your configuration.

- **Set `SHARECNV` to 1** if you do not need shared conversations. This eliminates contention for the receiving thread and improves performance.
- **Set `SHARECNV` to 0** if existing client applications do not run correctly with `SHARECNV` set to 1 or greater.

**Procedure:**
1. **Monitor channels with the default `SHARECNV` value of 10**. This setting works well in many scenarios but may not be optimal for all. For distributed servers, it can be 15% slower than channels without shared conversations.
2. **Set `SHARECNV` to 2 or more**. You can set `SHARECNV` from 2 to 999999999. Monitor the channel's performance with the new setting.
3. **Set `SHARECNV` to 1**. This setting eliminates contention and improves performance, especially for distributed servers.
4. **Set `SHARECNV` to 0**. Use this only if existing client applications do not run correctly with `SHARECNV` set to 1 or greater.

**Note:** If the client-connection `SHARECNV` value does not match the server-connection `SHARECNV` value, the lowest value is used.

#### Tuning Distributed Publish/Subscribe Networks
Use the tuning tips in this section to improve the performance of your IBM MQ distributed publish/subscribe clusters and hierarchies.

**Related Concepts:**
- **Monitoring Clusters**: Page 311
- **Direct Routed Publish/Subscribe Cluster Performance**: In direct routed publish/subscribe clusters, information such as clustered topics and proxy subscriptions is pushed to all members, creating additional load. To reduce this, perform updates at off-peak times, define a smaller subset of queue managers, or switch to topic host routing.

**Performance Characteristics of Direct Routed Clusters:**
- **Point-to-Point Clusters**: Load is related to message traffic and not directly to the size of the cluster.
- **Direct Routed Publish/Subscribe Clusters**: Load grows with the number of queue managers, clustered topics, and changes to subscriptions, irrespective of local use.

**Reducing the Effect of Direct Routed Publish/Subscribe on Performance:**
- Perform cluster, topic, and subscription updates at off-peak times.
- Define a smaller subset of queue managers involved in publish/subscribe.
- Consider using topic host routing.

**Topic Host Routed Publish/Subscribe Cluster Performance:**
- Provides precise control over which queue managers host each topic.
- Reduces the number of connections between queue managers and the amount of information passed.
- Benefits include improved scalability and more control over physical configuration.
- Constraints include more planning for system configuration and maintenance, and potential single points of failure.

**Topic Host Routing with Centralized Publishers or Subscribers:**
- Configure publishers or subscriptions on the same queue manager that hosts the topic to remove extra hops and reduce unnecessary sharing of subscription knowledge.

**Related Concepts:**
- **Direct Routed Publish/Subscribe Cluster Performance**
- **Balancing Producers and Consumers in Publish/Subscribe Networks**
- **Subscription Performance in Publish/Subscribe Networks**