needed to encode the time, because timestamps always have
exactly (cid:96)2 components. For example, suppose that a princi-
pal sends a message to a/b on June 8, 2017 at 6 AM. The
2JEDI does not govern how the key set is transferred to the recipient, as
there are existing solutions for this. One can use an existing protocol for
one-to-one communication (e.g., TLS) to securely transfer the key set. Or,
one can encrypt the key set with the recipient’s (normal, non-WKD-IBE)
public key, and place it in a common storage area.
Figure 4: Pattern S used to encrypt message sent to a/b on
June 08, 2017 at 6 AM. The ﬁgure uses 8 slots for space
reasons; JEDI is meant to be used with more slots (e.g., 20).
message is encrypted with the pattern in Fig. 4.
3.5 Producing a Key Set for Delegation
Now, we explain how to produce a key set corresponding to
a URI preﬁx and time range. To express a URI preﬁx as a
pattern, we do the same thing as we did for URIs, without the
terminator symbol $. For example, a/b/* is encoded in a pat-
tern S as S(1) = H("a"), S(2) = H("b"), and all other slots
free. Given the private key for S, one can use WKD-IBE’s
KeyDer to ﬁll in slots 3 . . . (cid:96)1. This allows one to generate the
private key for a/b, a/b/c, etc.—any URI for which a/b is a
preﬁx. To grant access to only a speciﬁc resource (a full URI,
not a preﬁx), the $ is included as before.
In encoding a time range into a pattern, single timestamps
(e.g., granting access for an hour) are done as before. The
hierarchical structure for time makes it possible to succinctly
grant permission for an entire day, month, or year. For exam-
ple, one may grant access for all of 2017 by ﬁlling in slot
(cid:96)2 with H("2017") and leaving the ﬁnal (cid:96)2 − 1 slots, which
correspond to month, day, and year, free. Therefore, to grant
permission over a time range, the number of keys granted is
logarithmic in the length of the time range. For example, to
delegate access to a URI from October 29, 2014 at 10 PM
until December 2, 2014 at 1 AM, the following keys need
to be generated: 2014/Oct/29/23, 2014/Oct/29/24, 2014/
Oct/30/*, 2014/Oct/31/*, 2014/Nov/*, 2014/Dec/01/*,
and 2014/Dec/02/01. The tree can be chosen differently to
support longer time ranges (e.g., additional level representing
decades), change the granularity of expiry (e.g., minutes in-
stead of hours), trade off encryption time for key size (e.g.,
deeper/shallower tree), or use a more regular structure (e.g.,
binary encoding with logarithmic split). For example, our im-
plementation uses a depth-6 tree (instead of depth-4), to be
able to delegate time ranges with fewer keys.
In summary, to produce a key set for delegation, ﬁrst de-
termine which subtrees in the time hierarchy represent the
time range. For each one, produce a separate pattern, and
encode the time into the last (cid:96)2 slots. Encode the URI preﬁx
in the ﬁrst (cid:96)1 slots of each pattern. Finally, generate the keys
corresponding to those patterns, using keys in the key store.
3.6 Optimizations for Low-Power Devices
On low-power embedded devices, performing a single WKD-
IBE encryption consumes a signiﬁcant amount of energy.
Therefore, we design JEDI with optimizations to WKD-IBE.
1524    28th USENIX Security Symposium
USENIX Association
H("𝚊")H("𝚋")H($)⊥H("𝟷𝟽")H("𝙹𝚞𝚗")H("𝟶𝟾")H("𝟶𝟼")12345678iS(i)=4 slots for URI Hierarchyℓ1=4 slots for Time Hierarchyℓ23.6.1 Hybrid Encryption and Key Reuse
JEDI uses WKD-IBE in a hybrid encryption scheme. To
encrypt a message m in JEDI, one samples a symmetric key
k, and encrypts k with JEDI to produce ciphertext c1. The
pattern used for WKD-IBE encryption is chosen as in §3.4 to
encode the rendezvous point. Then, one encrypts m using k to
produce ciphertext c2. The JEDI ciphertext is (c1,c2).
For subsequent messages, one reuses k and c1; the new
message is encrypted with k to produce a new c2. One can
keep reusing k and c1 until the WKD-IBE pattern for encryp-
tion changes, which happens at the end of each hour (or other
interval used for expiry). At this time, JEDI performs key rota-
tion by choosing a new k, encrypting it with WKD-IBE using
the new pattern, and then proceeding as before. Therefore,
most messages only incur cheap symmetric-key encryption.
This also reduces the load on subscribers. The JEDI cipher-
texts sent by a publisher during a single hour will all share
the same c1. Therefore, the subscriber can decrypt c1 once
for the ﬁrst message to obtain k, and cache the mapping from
c1 to k to avoid expensive WKD-IBE decryptions for future
messages sent during that hour.
Thus, expensive WKD-IBE operations are only performed
upon key rotation, which happens rarely—once an hour (or
other granularity chosen for expiry) for each resource.
3.6.2 Precomputation with Adjustment
Even with hybrid encryption and key reuse to perform WKD-
IBE encryption rarely, WKD-IBE contributes signiﬁcantly to
the overall power consumption on low-power devices. There-
fore, this section explores how to perform individual WKD-
IBE encryptions more efﬁciently.
Most of the work to encrypt under a pattern S is in com-
puting the quantity QS = g3 · ∏(i,ai)∈ﬁxed(S) hai
i , where g3 and
the hi are part of the WKD-IBE public parameters. One may
consider computing QS once, and then reusing its value when
computing future encryptions under the same pattern S. Un-
fortunately, this alone does not improve efﬁciency because
the pattern S used in one WKD-IBE encryption is different
from the pattern T used for the next encryption.
(i,bi)∈ﬁxed(T )
JEDI, however, observes that S and T are similar; they
match in the (cid:96)1 slots corresponding to the URI, and the re-
maining (cid:96)2 slots will correspond to adjacent leaves in the time
tree. JEDI takes advantage of this by efﬁciently adjusting the
precomputed value QS to compute QT as follows:
· ∏
QT = QS· ∏
(i,ai)∈ﬁxed(S)
(i,bi)∈ﬁxed(T )
i∈free(S)
ai(cid:54)=bi
i · ∏
hbi
i∈free(T )
This requires one G1 exponentiation per differing slot be-
tween S and T (i.e., the Hamming distance). Because S and
T usually differ in only the ﬁnal slot of the time hierarchy,
this will usually require one G1 exponentiation total, sub-
stantially faster than computing QT from scratch. Additional
exponentiations are needed at the end of each day, month, and
year, but they can be eliminated by maintaining additional
(i,ai)∈ﬁxed(S)
h−ai
i
hbi−ai
i
precomputed values corresponding to the start of the current
day, current month, and current year.
The protocol remains secure because a ciphertext is dis-
tributed identically whether it was computed from a precom-
puted value QS or via regular encryption.
3.7 Extensions
Via simple extensions, JEDI can support (1) wildcards in the
middle of a URI or time, and (2) forward secrecy. We describe
these extensions in the appendix of our extended paper.
3.8 Security Guarantee
We formalize the security of JEDI’s encryption below.
Theorem 1. Suppose JEDI is instantiated with a Selective-ID
CPA-secure [1, 16], history-independent (deﬁned in our ex-
tended paper [57]) WKD-IBE scheme. Then, no probabilistic
polynomial-time adversary A can win the following security
game against a challenger C with non-negligible advantage:
Initialization. A selects a (URI, time) pair to attack.
Setup. C gives A the public parameters of the JEDI instance.
Phase 1. A can make three types of queries to C:
1. A asks C to create a principal; C returns a name in {0,1}∗,
which A can use to refer to that principal in future queries. A
special name exists for the authority.
2. A asks C for the key set of any principal; C gives A the
keys that the principal has. At the time this query is made, the
requested key may not contain a key whose URI and time are
both preﬁxes of the challenge (URI, time) pair.
3. A asks C to make any principal delegate a key set of A’s
choice to another principal (speciﬁed by names in {0,1}∗).
Challenge. When A chooses to end Phase 1, it sends C two
messages, m0 and m1, of the same length. Then C chooses a
random bit b ∈ {0,1}, encrypts mb under the challenge (URI,
time) pair, and gives A the ciphertext.
Phase 2. A can make additional queries as in Phase 1.
Guess. A outputs b(cid:48) ∈ {0,1}, and wins the game if b = b(cid:48).
The advantage of an adversary A is(cid:12)(cid:12)Pr[A wins]− 1
(cid:12)(cid:12).
2
Integrity in JEDI
We prove this theorem in our extended paper [57]. Al-
though we only achieve selective security in the standard
model (like much prior work [1, 17]), one can achieve adap-
tive security if the hash function H in §3.5 is modeled as
a random oracle [1]. It is sufﬁcient for JEDI to use a CPA-
secure (rather than CCA-secure) encryption scheme because
JEDI messages are signed, as detailed below in §4.
4
To prevent an attacker from ﬂooding the system with mes-
sages, spooﬁng fake data, or actuating devices without per-
mission, JEDI must ensure that a principal can only send
a message on a URI if it has permission. For example, an
application subscribed to buildingA/floor2/roomLHall/
sensor0/temp should be able to verify that the readings it is
receiving are produced by sensor0, not an attacker. In addi-
tion to subscribers, an intermediate party (e.g., the router in a
USENIX Association
28th USENIX Security Symposium    1525
publish-subscribe system) may use this mechanism to ﬁlter
out malicious trafﬁc, without being trusted to read messages.
4.1 Starting Solution: Signature Chains
A standard solution in the existing literature, used by
SPKI/SDSI [31], Vanadium [77], and bw2 [5], is to include
a certiﬁcate chain with each message. Just as permission to
subscribe to a resource is granted via a chain of delegations
in §3, permission to publish to a resource is also granted via a
chain of delegations. Whereas §3 includes WKD-IBE keys in
each delegation, these integrity solutions delegate signed cer-
tiﬁcates. To send a message, a principal encrypts it (§3), signs
the ciphertext, and includes a certiﬁcate chain that proves that
the signing keypair is authorized for that URI and time.
4.2 Anonymous Signatures
The above solution reveals the sender’s identity (via its pub-
lic key) and the particular chain of delegations that gives the
sender access. For some applications this is acceptable, and its
auditability may even be seen as a beneﬁt. For other applica-
tions, the sender must be able to send a message anonymously.
See §1.1.3 for an example. How can we reconcile access
control (ensuring the sender has permission) and anonymity
(hiding who the sender is)?
4.2.1 Starting Point: WKD-IBE Signatures
Our solution is to use a signature scheme based on WKD-IBE.
Abdalla et al. [1] observe that WKD-IBE can be extended
to a signature scheme in the same vein as has been done for
IBE [18] and HIBE [46]. To sign a message m ∈ Z∗
p with a
key for pattern S, one uses KeyDer to ﬁll in a slot with m, and
presents the decryption key as a signature.
This is our starting point for designing anonymous signa-
tures in JEDI. A message can be signed by ﬁrst hashing it to
Z∗
p and signing the hash as above. Just as consumers receive
decryption keys via a chain of delegations (§3), publishers of
data receive these signing keys via chains of delegations.
4.2.2 Anonymous Signatures in JEDI
The construction in §4.2.1 has two shortcomings. First, sig-
natures are large, linear in the number of ﬁxed slots of the
pattern. Second, it is unclear if they are truly anonymous.
Signature size. As explained in §3, we use a construction of
WKD-IBE based on BBG HIBE [17]. BBG HIBE supports
a property called limited delegation in which a secret key
can be reduced in size, in exchange for limiting the depth
in the hierarchy at which subkeys can be generated from it.
We observe that the WKD-IBE construction also supports
this feature. Because we need not support KeyDer for the
decryption key acting as a signature, we use limited delegation
to compress the signature to just two group elements.
Anonymity. The technique in §4.2.1 transforms an encryp-
tion scheme into a signature scheme, but the resulting signa-
ture scheme is not necessarily anonymous. For the particular
construction of WKD-IBE that we use, however, we prove
that the resulting signature scheme is indeed anonymous. Our
insight is that, for this construction of WKD-IBE, keys are
history-independent in the following sense: KeyDer, for a
ﬁxed Params and PatternB, returns a private key KeyPatternB
with the exact same distribution regardless of KeyPatternA
(see §3.1 for notation). Because signatures, as described in
§4.2.1, are private keys generated with KeyDer, they are also
history-independent; a signature for a pattern has the same
distribution regardless of the key used to generate it. This is
precisely the anonymity property we desire.
4.3 Optimizations for Low-Power Devices
As in §3.6.1, we must avoid computing a WKD-IBE signature
for every message. A simple way to do this is to sample a
digital signature keypair each hour, sign the verifying key with
WKD-IBE at the beginning of the hour, and sign messages
during the hour with the corresponding signing key.
Unfortunately, this may still be too expensive for low-
power embedded devices because it requires a digital signa-
ture, which requires asymmetric-key cryptography, for every
message. We can circumvent this by instead (1) choosing a
symmetric key k every hour, (2) signing k at the start of each
hour (using WKD-IBE for anonymity), and (3) using k in an
authenticated broadcast protocol to authenticate messages
sent during the hour. An authenticated broadcast protocol,
like µTESLA [70], generates a MAC for each message using
a key whose hash is the previous key; thus, the single signed
key k allows the recipient to verify later messages, whose
MACs are generated with hash preimages of k. In general,
this design requires stricter time synchronization than the one
based on digital signatures, as the key used to generate the
MAC depends on the time at which it is sent. However, for
the sense-and-send use case typical of smart buildings, sen-
sors anyway publish messages on a ﬁxed schedule (e.g., one
sample every x seconds), allowing the key to depend only on
the message index. Thus, timely message delivery is the only
requirement. Our scheme differs from µTESLA because the
ﬁrst key (end of the hash chain) is signed using WKD-IBE.
Additionally, we use a technique similar to precomputation
with adjustment (§3.6.2) for anonymous signatures. Concep-
tually, KeyDer, which is used to produce signatures, can be
understood as a two-step procedure: (1) produce a key of the
correct form and structure (called NonDelegableKeyDer),
and (2) re-randomize the key so that it can be safely delegated
(called ResampleKey). Re-randomization can be accelerated
using the same precomputed value QS that JEDI uses for en-
cryption (§3.6.2), which can be efﬁciently adjusted from one
pattern to the next. The result of NonDelegableKeyDer can
also be adjusted to obtain the corresponding result for a simi-
lar pattern more efﬁciently. We fully explain our adjustment
technique for signatures in our extended paper [57].
Finally, WKD-IBE signatures as originally proposed
(§4.2.1) are veriﬁed by encrypting a random message un-