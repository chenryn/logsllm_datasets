}
exit(0);
}
Figure 944. Implementation of the descriptor-passing client
// fd_receiver.c
#include "fd_common.h"
int receive_fd_using_sockfd(int *fd, int sockfd);
int
receive_fd_using_sockfd(int *fd, int sockfd)
{
ssize_t ret;
u_char c;
int errcond = 0;
struct iovec iovec[1];
struct msghdr msg;
struct cmsghdr *cmsghdrp;
cmsghdr_msg_control_t cmsghdr_msg_control;
iovec[0].iov_base = &c;
iovec[0].iov_len = 1;
msg.msg_name = (caddr_t)0;
msg.msg_namelen = 0;
msg.msg_iov = iovec;
msg.msg_iovlen = 1;
msg.msg_control = cmsghdr_msg_control.msg_control;
msg.msg_controllen = sizeof(cmsghdr_msg_control.msg_control);
msg.msg_flags = 0;
if ((ret = recvmsg(sockfd, &msg, 0)) cmsg_len != CMSG_LEN(sizeof(int)))
errcond++;
if (cmsghdrp->cmsg_level != SOL_SOCKET)
errcond++;
if (cmsghdrp->cmsg_type != SCM_RIGHTS)
errcond++;
if (errcond) {
fprintf(stderr, "%d errors in received message\n", errcond);
*fd = -1;
} else
*fd = *((int *)CMSG_DATA(cmsghdrp));
return ret;
}
int
main(int argc, char **argv)
{
char buf[512];
int fd = -1, sockfd, len, ret;
struct sockaddr_un server_unix_addr;
bzero((char *)&server_unix_addr, sizeof(server_unix_addr));
strcpy(server_unix_addr.sun_path, SERVER_NAME);
server_unix_addr.sun_family = AF_LOCAL;
len = strlen(SERVER_NAME) + 1;
len += sizeof(server_unix_addr.sun_family);
if ((sockfd = socket(AF_LOCAL, SOCK_STREAM, 0))  0)
write(1, buf, ret);
exit(0);
}
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 97 of 153
Let us now test our descriptor-passing client and server.
$ gcc -Wall -o fd_sender fd_sender.c
$ gcc -Wall -o fd_receiver fd_receiver.c
$ echo "Hello, Descriptor" > /tmp/message.txt
$ ./fd_sender /tmp/message.txt
...
$ ./fd_receiver# from another shell prompt
received file descriptor (fd = 10)
Hello, Descriptor
9.12. XSI IPC
The Single UNIX Specification defines a set of IPC interfaces as part of the X/Open System Interface
(XSI) extensions. The XSI IPC interfaces are essentially the same as the (erstwhile) System V IPC
interfaces, which have been widely supported across most Unix systems, even though they were not part
of any standard for a long time. Mac OS X provides system calls for the System V IPC mechanisms,
namely, message queues, semaphores, and shared memory.
XSI is a superset of the mandatory requirements for conformance to POSIX.1.
9.13. POSIX IPC
The POSIX 1003.1b-1993 (POSIX93) standard introduced a set of IPC interfaces as part of the POSIX
Real-time Extensions. Collectively known as POSIX IPC, these interfaces define functions for message
queues, semaphores, and shared memory. The POSIX IPC functions are rather different from their XSI
counterparts.
Mac OS X 10.4 does not provide POSIX message queues. It does, however, provide the POSIX
semaphore and shared memory interfaces.
In contrast to XSI IPC, which uses keys as IPC identifiers, POSIX IPC uses string names for IPC objects.
The Single UNIX Specification specifies several things about IPC names but leaves several other things
unspecified and therefore open to implementation-specific behavior, as shown in the following examples.
It is unspecified whether an IPC name appears in the file system. Mac OS X does not require the
name to be present in the file system, and if it is, its presence does not affect the behavior of POSIX
IPC calls.
 Mac OS X allows an IPC name to be at most 31 characters long (including the terminating NUL
character).
If an IPC name begins with the slash character, any caller of an IPC open function (such as
sem_open() or shm_open()) with the same name refers to the same IPC object, as long as that
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 98 of 153
name has not been removed.
If an IPC name does not begin with the slash character, the effect is implementation-defined. Mac
OS X treats this case identically to the case when the name does begin with a slash character.
The interpretation of slash characters other than the leading slash character in a name is
implementation-defined. Mac OS X treats a slash character in an IPC name as any other character.
In particular, unlike file system pathnames, it does not canonicalize multiple slash characters. For
example, the following IPC names are valid and different on Mac OS X:
ipcobject, /ipcobject, //ipcobject, and /ipcobject/.
9.13.1. POSIX Semaphores
A named POSIX semaphore is created using sem_open() and deleted using sem_unlink(). sem_open()
is also used to connect the calling process to an existing semaphore. sem_close() closes an open
semaphore. These functions resemble the open(), unlink(), and close() functions for files. In fact, like
open(), sem_open() accepts the O_CREAT and O_EXCL flags to determine whether the named object is
only being accessed or also being created. However, instead of integer-based file descriptors, the
semaphore functions deal with pointers to sem_t structures.
POSIX semaphores are counting semaphores: A lock operation on a semaphore decrements its value by
one, whereas an unlock operation increments its value by one. In the simplest sense, a POSIX semaphore
is an integer variable that is accessed through two atomic operations: sem_wait() and sem_post().
Given an open semaphore, sem_wait() and sem_post() perform lock and unlock operations,
respectively, on the semaphore. If the semaphore value is zero when sem_wait() is called, the caller
blocks. Such blocking can be interrupted by a signal.
Figure 945 shows the source for the following four simple programs, which demonstrate the working of
POSIX semaphores on Mac OS X.
 sem_create creates a named semaphore if it does not already exist.
 sem_unlink deletes an existing named semaphore.
 sem_post unlocks an existing named semaphore.
 sem_wait locks an existing named semaphore, blocking until it can do so.
The programs all include a common header file (sem_common.h).
Figure 945. Working with POSIX semaphores
// sem_common.h
#ifndef _SEM_COMMON_H_
#define _SEM_COMMON_H_
#include 
#include 
#include 
#define CHECK_ARGS(count, msg) { \
if (argc != count) { \
fprintf(stderr, "usage: %s " msg "\n", PROGNAME); \
exit(1); \
} \
}
#endif
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 99 of 153
// sem_create.c
#include "sem_common.h"
#define PROGNAME "sem_create"
int
main(int argc, char **argv)
{
int val;
sem_t *sem;
CHECK_ARGS(3, " ");
val = atoi(argv[2]);
sem = sem_open(argv[1], O_CREAT | O_EXCL, 0644, val);
if (sem == (sem_t *)SEM_FAILED) {
perror("sem_open");
exit(1);
}
sem_close(sem);
exit(0);
}
// sem_unlink.c
#include "sem_common.h"
#define PROGNAME "sem_unlink"
int
main(int argc, char **argv)
{
int ret = 0;
CHECK_ARGS(2, "");
if ((ret = sem_unlink(argv[1])) ");
sem = sem_open(argv[1], 0);
if (sem == (sem_t *)SEM_FAILED) {
perror("sem_open");
exit(1);
}
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 100 of 153
if ((ret = sem_post(sem)) ");
sem = sem_open(argv[1], 0);
if (sem == (sem_t *)SEM_FAILED) {
perror("sem_open");
exit(1);
}
if ((ret = sem_wait(sem)) 
#include 
#include 
#include 
#include 
#define CHECK_ARGS(count, msg) { \
if (argc != count) { \
fprintf(stderr, "usage: %s " msg "\n", PROGNAME); \
exit(1); \
} \
}
#endif
// shm_create.c
#include "shm_common.h"
#include 
#define PROGNAME "shm_create"
int
main(int argc, char **argv)
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007