items near the root have been more likely recently accessed as
compared to items near the leaves. The catastrophic adversary
can observe all the ORAM structure, and such leakage breaks
perfect history independence. We show a formal lower bound
for the amount of leakage in Section III.
Experiments and efﬁciency of our scheme.
In order to
empirically measure the performance of our construction, we
ﬁrst performed an analysis to determine the smallest constant
factor overhead to achieve high performance with negligible
likelihood of failure. Following this, we implemented our
system in the cloud with Amazon Web Services as the cloud
provider and compared it to alternatives that provide some,
but not all of the desired security properties. To the best of
our knowledge, there has been no previous work that imple-
ments and tests any ODS system in the actual cloud setting.
As argued in Bindschaedler et al. [12], who independently
compared various ORAM systems in the cloud, it is important
to see how systems work in the actual intended setting. As
comparison points, we compare our system with the following
implementations:
• ORAM+AVL: We reimplemented the ODS map by Wang
et al. [11] that provides obliviousness but not secure
deletion nor history independence.
• SD-B-Tree: We implemented a remotely stored block-
level, encrypted B-Tree (as recommend by the secure
deletion community [17]) that provides secure deletion
but not history independence nor obliviousness.
• Naive approach: We implemented a naive approach that
achieves all the security properties by transferring and
re-encrypting the entire database on each access.
In all cases the remotely stored B-Tree is the fastest
as it requires the least amount of communication cost (no
obliviousness). For similar reasons, vORAM+HIRB is much
faster than the baseline as the number of items grows (starting
from 214 items), since the baseline requires communication
that is linear in the number of items. We also describe a
number of optimizations (such as concurrent connections and
caching) that enables vORAM+HIRB to be competitive with
the baseline even when storing as few as 29 items. It should be
noted, without optimizations, the access time is on the order
of a few seconds, and with optimizations, access times are less
than one second.
Surprisingly, however, the vORAM+HIRB is 20x faster than
ORAM+AVL, irrespective of the number of items, even though
ORAM+AVL does not support history independence or secure
deletion. We believe this is mainly because vORAM+HIRB
requires much smaller round complexity. Two factors drive
the round complexity improvement:
181181
Much smaller height: While each AVL tree node contains
only one item, each HIRB node contains β items on
average, and is able to take advantage of slightly larger
buckets which optimize the bandwidth to remote cloud
storage by storing the same amount of data in trees with
smaller height.
Much less padding: AVL tree operations sometimes get com-
plicated with balancing and rotations, due to which each
operation should be padded up to 3 · 1.44 lg n node
accesses. However, HIRB operations are simple, do not
require rotations, and thus, each operation accesses at
most 2 logβ n nodes.
Although the Path-ORAM bucket for ORAM+AVL is four
times smaller than the vORAM bucket in our implementation,
it affects bandwidth but not the round complexity. The fully
optimized vORAM+HIRB protocol is about 100x faster than
ORAM+AVL. We describe the details of our experiments in
Section VI.
Summary of our contributions. To summarize, the contri-
butions of this paper are:
• New security deﬁnitions of history independence and
secure deletion under a catastrophic attack.
• The design and analysis of an oblivious RAM with
variable size blocks, the vORAM;
• The design and analysis of a new history independent and
randomized data structure, the HIRB tree;
• A lower bound on history independence for any ORAM
construction with sub-linear bandwidth;
• Improvements to the performance of mapped data struc-
tures stored in ORAMs;
• An empirical measurement of the settings and perfor-
• The
mance of the vORAM in the actual cloud setting;
of
vORAM+HIRB system in the actual cloud setting.
and measurement
implementation
the
II. RELATED WORK
We discuss related work in oblivious data structures, history
independence, and secure deletion. Our system builds upon
these prior results and combines the security properties into a
uniﬁed system.
ORAM and oblivious data structures. ORAM protects the
access pattern from an observer such that it is impossible
to determine which operation is occurring, and on which
item. The seminal work on the topic is by Goldreich and
Ostrovsky [4], and since then, many works have focused on
improving efﬁciency of ORAM in both the space, time, and
communication cost complexities (for example [5]–[10] just
to name a few; see the references therein).
There have been works addressing individual oblivious
data structures to accomplish speciﬁc tasks, such as prior-
ity queues [20], stacks and queues [21], and graph algo-
rithms [22]. Recently, Wang et al. [11] achieved oblivious
data structures (ODS) for maps, priority queues, stacks, and
queues much more efﬁciently than previous works or naive
implementation of the data structures on top of ORAM.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:59 UTC from IEEE Xplore.  Restrictions apply. 
Our vORAM construction builds upon the non-recursive
Path ORAM [11] and allows variable sized data items to be
spread across multiple ORAM buckets. Although our original
motivation was to store differing-sized B-tree nodes from the
HIRB, there may be wider applicability to any context where
the size (as well as contents and access patterns) to data needs
to be hidden.
Interestingly, based on our experimental results, we believe
the ability of vORAM to store partial blocks in each bucket
may even improve the performance of ORAM when storing
uniformly-sized items. However, we will not consider this
further in the current investigation.
the current organization of
History independence. History independence of data struc-
tures requires that
the data
within the structure reveals nothing about the prior opera-
tions thereon. Micciancio [23] ﬁrst considered history inde-
pendence in the context of 2-3 trees, and the notions of
history independence were formally developed in [24]–[26].
The notion of strong history independence [24] holds if for
any two sequences of operations,
the distributions of the
memory representations are identical at all time-points that
yield the same storage content. Moreover, a data structure is
strongly history independent if and only if it has a unique
representation [25]. There have been uniquely-represented
constructions for hash functions [27], [28] and variants of
a B-tree (a B-treap [29], and a B-skip-list [30]). We adopt
the notion of unique representation for history independence
when developing our history independent, randomized B-tree,
or HIRB tree.
We note that history independence of these data structures
considers a setting where a single party runs some algorithms
on a single storage medium, which doesn’t correctly capture
the actual cloud setting where client and server have separate
storage, execute protocols, and exchange messages to maintain
the data structures. Therefore, we extend the existing history
independence and give a new, augmented notion of history
independence for the cloud setting with a catastrophic attack.
Independently, the recent work of [31] also considers a
limited notion of history independence, called Δ-history inde-
pendence, parameterized with a function Δ that describes the
leakage. Our deﬁnition of history independence has a similar
notion, where the leakage function Δ captures the number
of recent operations which may be revealed in a catastrophic
attack.
Secure deletion. Secure deletion means that data deleted
cannot be recovered, even by the original owner. It has been
studied in many contexts [32], but here we focus on the cloud
setting, where the user has little or no control over the physical
media or redundant duplication or backup copies of data. In
particular, we build upon secure deletion techniques from the
applied cryptography community. The approach is to encrypt
all data stored in the cloud with encryption keys stored locally
in erasable memory, so that deleting the keys will securely
delete the remote data by rendering it non-decryptable.
Boneh and Lipton [33] were the ﬁrst to use encryption to
securely remove ﬁles in a system with backup tapes. The
challenge since was to more effectively manage encrypted
content and the processes of re-encryption and erasing de-
cryption keys. For example, Di Crescenzo et al. [34] showed a
more efﬁcient method for secure deletion using a tree structure
applied in the setting of a large non-erasable persistent medium
and a small erasable medium. Several works considered secure
deletion mechanisms for a versioning ﬁle system [35], an
inverted index in a write-once-read-many compliance stor-
age [36], and a B-tree (and generally a mangrove) [17].
III. PRELIMINARIES
We assume that readers are familiar with security notions
of standard cryptographic primitives [37]. Let λ denote the
security parameter.
Modeling data structures. Following the approach from the
secure deletion literature, we use two storage types: erasable
memory and persistent storage. Contents deleted from erasable
memory are non-recoverable, while the contents in persistent
storage cannot be fully erased. We assume the size of erasable
memory is small while the persistent storage has a much larger
capacity. This mimics the cloud computing setting where cloud
storage is large and persistent due to lack of user control, and
local storage is more expensive but also controlled directly.
We deﬁne a data structure D as a collection of data that
supports initialization, insertion, deletion, and lookup, using
both the erasable memory and the persistent storage. Each
operation may be parameterized by some operands (e.g.,
lookup by a label). For a data structure D stored in this model,
let D.em and D.ps denote the contents of the erasable memory
and persistent storage, respectively. For example, an encrypted
graph structure may be stored in D.ps while the decryption key
resides in D.em. For an operation op on D, let acc←D.op()
denote executing the operation op on the data structure D
where acc is the access pattern over the persistent storage
−→
during the operation. The access pattern to erasable memory
−→
is assumed to be hidden. For a sequence of operations
op =
op() denote applying the opera-
(op1, . . . , opm), let
tions on D, that is, acc1←D.op1(),
, accm←D.opm(),
−→
−→
acc = (acc1, . . . , accm). We note that the access pattern
with
acc completely determines the state of persistent storage D.ps.
Obliviousness and history independence. Obliviousness
requires that the adversary without access to erasable memory
cannot obtain any information about actual operations per-
formed on data structure D other than the number of oper-
ations. This security notion is deﬁned through an experiment
obl-hi, given in Figure 1, where D, λ, n, h, b denote a data
structure, the security parameter, the maximum number of
items D can contain, history independence, and the challenge
choice.
−→
acc←D.
. . .
In the experiment, the adversary chooses two sequences
of operations on the data structure and tries to guess which
sequence was chosen by the experiment with the help of access
182182
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:59 UTC from IEEE Xplore.  Restrictions apply. 
λ, n);
EXPobl-hiA1,A2 (D, λ, n, h, b)
acc0←D.Init(1
op(0),−→
−→
op(1), ST)←A1(1
−→
acc←D.−→
(
op(b)
return A2(ST,−→
if h = 1:
return A2(ST,−→
();
acc,D.em);
acc);
else
λ, acc0);
λ, n);
EXPsdelA1,A2,A3 (D, λ, n, b)
acc0 ← D.Init(1
d0 ← A1(1
λ, 0);
d1 ← A1(1
λ, 1);
−→
opd0,d1 , S)←A2(acc0, d0, d1);
−→
−→
(
acc←D.(
return A3(acc0,−→
opd0,d1 (cid:2)(cid:3)S db)();
acc,D.em);
Figure 1: Experiments for security deﬁnitions
patterns. The data structure provides obliviousness if every
polynomial-time adversary has only a negligible advantage.
Deﬁnition 1. For a data structure D, consider the experiment
obl-hiA (D, λ, n, 0, b) with adversary A = (A1,A2). We
EXP
call the adversary A admissible if A1 always outputs two
sequences with the same number of operations storing at most
n items. We deﬁne the advantage of the adversary A in this
experiment as:
AdvoblA (D, λ, n) =
We say that D provides obliviousness if for any sufﬁciently
large λ, any n ∈ poly(λ), and any PPT admissible adversary
A, we have AdvoblA (D, λ, n) ≤ negl(λ).
obl-hiA (D, λ, n, 0, 0) = 1]
obl-hiA (D, λ, n, 0, 1) = 1]
(cid:2)(cid:2)(cid:2)(cid:2) Pr[EXP
− Pr[EXP
(cid:2)(cid:2)(cid:2)(cid:2) .
Now we deﬁne history independence. As we will see,
perfect history independence is inherently at odds with obliv-
iousness and sub-linear communication cost. Therefore, we
deﬁne parameterized history independence instead that allows
for a relaxation of the security requirement. The parameter de-
termines the allowable leakage of recent history of operations.
One can interpret a history-independent data structure with
leakage of (cid:2) operations as follows: Although the data structure
may reveal some recent (cid:2) operations applied to itself, it does
not reveal any information about older operations, except that
the total sequence resulted in the current state of data storage.
The experiment in this case is equivalent to that for obliv-
iousness, except that (1) the two sequences must result in
the same state of the data structure at the end, (2) the last
(cid:2) operations in both sequences must be identical, and (3) the
adversary gets to view the local, erasable memory as well as
the access pattern to persistent storage.
Deﬁnition 2. For a data structure D, consider the experiment
obl-hiA (D, λ, n, 1, b) with adversary A = (A1,A2). We call
EXP
the adversary A (cid:2)-admissible if A1 always outputs sequences
−→
−→
op(0) and
op(1) which have the same number of operations and
result in the same set storing at most n data items, and the last
(cid:2) operations of both are identical. We deﬁne the advantage of
an adversary A in this experiment above as:
AdvhiA(D, λ, n) =
obl-hiA (D, λ, n, 1, 0) = 1]
(cid:2)(cid:2)(cid:2)(cid:2) Pr[EXP
(cid:2)(cid:2)(cid:2)(cid:2) .
say
We
history independence with leakage of
that
the
− Pr[EXP
data
obl-hiA (D, λ, n, 1, 1) = 1]
structure D provides
if
(cid:2) operations
for any sufﬁciently large λ, any n ∈ poly(λ), and any PPT (cid:2)-
admissible adversary A, we have AdvhiA(D, λ, n) ≤ negl(λ).
Lower bound on history independence. Unfortunately,
the history independence property is inherently at odds with
the nature of oblivious RAM. The following lower bound
demonstrates that there is a linear tradeoff between the amount
of history independence and the communication bandwidth of
any ORAM mechanism.
Theorem 1. Any oblivious RAM storage system with a
bandwidth of k bytes per access achieves at best history
independence with leakage of Ω(n/k) operations in storing
n blocks.
The intuition behind the proof2 is that, in a catastrophic
attack, an adversary can observe which persistent storage
locations were recently accessed, and furthermore can decrypt
the contents of those locations because they have the keys from
erasable memory. This will inevitably reveal information to the
attacker about the order and contents of recent accesses, up to
the point at which all n elements have been touched by the
ORAM and no further past information is recoverable.
Admittedly this lower bound limits what may be achievable
in terms of history independence. But still, leaking only a