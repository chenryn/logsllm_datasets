10
12th USENIX Security Symposium 
USENIX Association
l
s
e
c
y
c
U
P
C
n
i
n
o
i
t
a
i
r
a
v
e
m
T
i
 1.5e+07
 1e+07
 5e+06
 0
-5e+06
-1e+07
-1.5e+07
-2e+07
Apache+modSSL
Stunnel
Simple RSA server
 0
 50
 100
 150
 200
 250
Bits guessed of factor q
l
s
e
c
y
c
U
P
C
n
i
n
o
i
t
a
i
r
a
v
e
m
T
i
 2e+07
 1.5e+07
 1e+07
 5e+06
 0
-5e+06
-1e+07
-1.5e+07
-2e+07
Apache+mod_SSL - campus backbone
Apache+mod_SSL - one switch
 0
 50
 100
 150
 200
 250
Bits guessed of factor q
(a) The zero-one gaps when attacking Apache+mod SSL
and stunnel separated by one switch.
(b) The zero-one gap when attacking Apache+mod SSL
separated by several routers and a network backbone.
Figure 7: Applications using OpenSSL 0.9.7 are vulnerable, even on a large network.
Inter-network attacks allow an attacker to also take ad-
vantage of faster CPU speeds for increasing the accu-
racy of timing measurements. Consider machine 1 with
a slower CPU than machine 2. Then if machine 2 at-
tacks machine 1, the faster clock cycle allows for ﬁner
grained measurements of the decryption time on ma-
chine 1. Finer grained measurements should result in
fewer queries for the attacker, as the zero-one gap will
be more distinct.
5.7 Experiment 6 - Attacking SSL Applications
on the Local Network
We show that OpenSSL applications are vulnerable to
our attack from the network. We compiled Apache
1.3.27 + mod SSL 2.8.12 and stunnel 4.04 per the re-
spective “INSTALL” ﬁles accompanying the software.
Apache+mod SSL is a commonly used secure web
server. stunnel allows TCP/IP connections to be tun-
neled through SSL.
We begin by showing servers connected by a single
switch are vulnerable to our attack. This scenario is rel-
evant when the attacker has access to a machine near
the OpenSSL-based server. Figure 7(a) shows the result
of attacking stunnel and mod SSL where the attacking
client is separated by a single switch. For reference, we
also include the results for a similar attack against the
simple RSA decryption server from the previous experi-
ments.
Interestingly,
for
Apache+mod SSL than either the simple RSA de-
zero-one
larger
gap
the
is
cryption server or stunnel. As a result, successfully
attacking Apache+mod SSL requires fewer queries
than stunnel. Both applications have a sufﬁciently large
zero-one gap to be considered vulnerable.
To show our timing attacks can work on larger net-
works, we separated the attacking client from the
Apache+mod SSL server by our campus backbone. The
webserver was hosted in a separate building about a half
mile away, separated by three routers and a number of
switches on the network backbone. Figure 7(b) shows
the effectiveness of our attack against Apache+mod SSL
on this larger LAN, contrasted with our previous experi-
ment where the attacking client and server are separated
by only one switch.
This experiment highlights the difﬁculty in determining
the minimum number of queries for a successful attack.
Even though both stunnel and mod SSL use the exact
same OpenSSL libraries and use the same parameters for
negotiating the SSL handshake, the run-time differences
result in different zero-one gaps. More importantly, our
attack works even when the attacking client and applica-
tion are separated by a large network.
6 Defenses
We discuss three possible defenses. The most widely
accepted defense against timing attacks is to perform
RSA blinding. The RSA blinding operation calculates
x = reg mod N before decryption, where r is random,
e is the RSA encryption exponent, and g is the ciphertext
USENIX Association
12th USENIX Security Symposium 
11
to be decrypted. x is then decrypted as normal, followed
by division by r, i.e. xe/r mod N. Since r is random,
x is random and timing the decryption should not reveal
information about the key. Note that r should be a new
random number for every decryption. According to [17]
the performance penalty is 2% 10%, depending upon
implementation. Netscape/Mozilla’s NSS library uses
blinding. Blinding is available in OpenSSL, but not en-
abled by default in versions prior to 0.9.7b. Figure 8
shows that blinding in OpenSSL 0.9.7b defeats our at-
tack. We hope this paper demonstrates the necessity of
enabling this defense.
tions must take the maximum time of any decryption,
otherwise, timing information can still be used to leak
information about the secret key.
Currently, the preferred method for protecting against
timing attacks is to use RSA blinding. The immedi-
ate drawbacks to this solution is that a good source of
randomness is needed to prevent attacks on the blinding
factor, as well as the small performance degradation. In
OpenSSL, neither drawback appears to be a signiﬁcant
problem.
Apache with blinding (bit=0)
Apache with blinding (bit=1)
7 Conclusion
We devised and implemented a timing attack against
OpenSSL — a library commonly used in web servers
and other SSL applications. Our experiments show that,
counter to current belief, the timing attack is effective
when carried out between machines separated by multi-
ple routers. Similarly, the timing attack is effective be-
tween two processes on the same machine and two Vir-
tual Machines on the same computer. As a result of this
work, several crypto libraries, including OpenSSL, now
implement blinding by default as described in the previ-
ous section.
8 Acknowledgments
This material is based upon work supported in part
by the National Science Foundation under Grant No.
0121481 and the Packard Foundation. We thank the re-
viewers, Dr. Monica Lam, Ramesh Chandra, Constan-
tine Sapuntzakis, Wei Dai, Art Manion and CERT/CC,
and Dr. Werner Schindler for their comments while
preparing this paper. We also thank Nelson Bolyard, Ge-
off Thorpe, Ben Laurie, Dr. Stephen Henson, Richard
Levitte, and the rest of the OpenSSL, mod SSL, and
stunnel development teams for their help in preparing
patches to enable and use RSA blinding.
References
[1] Matt Blaze.
Quantize wrapper
library.
http://islab.oregonstate.edu/
documents/People/blaze.
l
s
e
c
y
c
U
P
C
n
i
e
c
n
e
r
e
f
f
i
d
e
m
T
i
 3e+06
 2e+06
 1e+06
 0
-1e+06
-2e+06
-3e+06
-4e+06
-5e+06
-6e+06
-7e+06
-8e+06
 0
 50
 100
 150
 200
 250
Bits guessed of factor q
Figure 8: Our attack against Apache+mod SSL using
OpenSSL 0.9.7b is defeated because blinding is enabled
by default.
Two other possible defenses are suggested often, but are
a second choice to blinding. The ﬁrst is to try and make
all RSA decryptions not dependent upon the input ci-
phertext. In OpenSSL one would use only one multipli-
cation routine and always carry out the extra reduction
in Montgomery’s algorithm, as proposed by Schindler
in [18].
If an extra reduction is not needed, we carry
out a “dummy” extra reduction and do not use the result.
Karatsuba multiplication can always be used by calcu-
lating c mod pi ∗ 2m, where c is the ciphertext, pi is one
log2 (c mod pi).
of the RSA factors, and m = log2 pi
After decryption, the result is divided by 2md mod q to
yield the plaintext. We believe it is harder to create and
maintain code where the decryption time is not depen-
dent upon the ciphertext. For example, since the result is
never used from a dummy extra reduction during Mont-
gomery reductions, it may inadvertently be optimized
away by the compiler.
Another alternative is to require all RSA computations
to be quantized, i.e. always take a multiple of some pre-
deﬁned time quantum. Matt Blaze’s quantize library [1]
is an example of this approach. Note that all decryp-
12
12th USENIX Security Symposium 
USENIX Association
[2] Dan Boneh, Richard A. DeMillo, and Richard J.
Lipton. On the importance of checking crypto-
graphic protocols for faults. Lecture Notes in Com-
puter Science, 1233:37–51, 1997.
[3] D. Coppersmith. Small solutions to polynomial
equations, and low exponent RSA vulnerabilities.
Journal of Cryptology, 10:233–260, 1997.
[4] Jean-Francois Dhem, Francois Koeune, Philippe-
Alexandre Leroux, Patrick Mestre, Jean-Jacques
Quisquater, and Jean-Louis Willems. A practical
implementation of the timing attack. In CARDIS,
pages 167–182, 1998.
[5] Peter Gutmann. Cryptlib. http://www.cs.
auckland.ac.nz/˜pgut001/cryptlib/.
[18] Werner Schindler. A timing attack against RSA
In CHES
with the chinese remainder theorem.
2000, pages 109–124, 2000.
[19] Werner Schindler. A combined timing and power
Lecture Notes in Computer Science,
attack.
2274:263–279, 2002.
[20] Werner Schindler.
Optimized timing attacks
against public key cryptosystems. Statistics and
Decisions, 20:191–210, 2002.
[21] Werner Schindler, Franois Koeune, and Jean-
Jacques Quisquater. Improving divide and conquer
attacks against cryptosystems by better error detec-
tion/correction strategies. Lecture Notes in Com-
puter Science, 2260:245–267, 2001.
[6] Intel.
Vtune performance analyzer for linux
v1.1. http://www.intel.com/software/
products/vtune.
[22] Werner Schindler, Franois Koeune, and Jean-
Jacques Quisquater. Unleashing the full power of
timing attack. Technical Report CG-2001/3, 2001.
[7] Intel. Using the RDTSC instruction for perfor-
mance monitoring. Technical report, 1997.
[23] stunnel Project.
stunnel.org.
stunnel.
http://www.
[8] Intel.
Ia-32 intel architecture optimization refer-
ence manual. Technical Report 248966-008, 2003.
[9] P. Kocher, J. Jaffe, and B. Jun. Differential power
In Crypto 99, pages
analysis: Leaking secrets.
388–397, 1999.
[10] Paul Kocher. Timing attacks on implementations
of difﬁe-hellman, RSA, DSS, and other systems.
Advances in Cryptology, pages 104–113, 1996.
[11] Alfred Menezes, Paul Oorschot, and Scott Van-
stone. Handbook of Applied Cryptography. CRC
Press, October 1996.
[12] mod SSL Project. mod ssl.
http://www.
modssl.org.
[13] Peter Montgomery. Modular multiplication with-
out trial division. Mathematics of Computation,
44(170):519–521, 1985.
[14] GNU Project.
libgcrypt. http://www.gnu.
org/directory/security/libgcrypt.
html.
[15] OpenSSL Project. Openssl.
http://www.
openssl.org.
[16] Rao, Josyula, Rohatgi, and Pankaj. Empowering
side-channel attacks. Technical Report 2001/037,
2001.
[17] RSA Press Release. http://www.otn.net/
onthenet/rsaqa.htm, 1995.
USENIX Association
12th USENIX Security Symposium 
13