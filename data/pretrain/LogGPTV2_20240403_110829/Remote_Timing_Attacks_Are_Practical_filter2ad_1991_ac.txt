# 12th USENIX Security Symposium
## USENIX Association

### Figure 7: Applications using OpenSSL 0.9.7 are vulnerable, even on a large network.
- **(a) The zero-one gaps when attacking Apache+mod_SSL and stunnel separated by one switch.**
- **(b) The zero-one gap when attacking Apache+mod_SSL separated by several routers and a network backbone.**

#### Timing Attack Vulnerabilities in SSL Applications
Inter-network attacks allow an attacker to take advantage of faster CPU speeds to increase the accuracy of timing measurements. For example, if Machine 2 has a faster CPU than Machine 1, Machine 2 can make finer-grained measurements of the decryption time on Machine 1, leading to fewer queries for the attacker as the zero-one gap will be more distinct.

### Experiment 6: Attacking SSL Applications on the Local Network
We demonstrate that OpenSSL applications are vulnerable to our attack from the network. We compiled Apache 1.3.27 with mod_SSL 2.8.12 and stunnel 4.04 according to their respective installation instructions. Apache+mod_SSL is a commonly used secure web server, and stunnel allows TCP/IP connections to be tunneled through SSL.

#### Single Switch Scenario
First, we show that servers connected by a single switch are vulnerable to our attack. This scenario is relevant when the attacker has access to a machine near the OpenSSL-based server. Figure 7(a) shows the results of attacking stunnel and mod_SSL where the attacking client is separated by a single switch. For reference, we also include the results for a similar attack against a simple RSA decryption server from previous experiments.

Interestingly, the zero-one gap for Apache+mod_SSL is larger than for either the simple RSA decryption server or stunnel. As a result, successfully attacking Apache+mod_SSL requires fewer queries than stunnel. Both applications have a sufficiently large zero-one gap to be considered vulnerable.

#### Large Network Scenario
To show that our timing attacks can work on larger networks, we separated the attacking client from the Apache+mod_SSL server by our campus backbone. The web server was hosted in a separate building about half a mile away, separated by three routers and several switches on the network backbone. Figure 7(b) shows the effectiveness of our attack against Apache+mod_SSL on this larger LAN, contrasted with our previous experiment where the attacking client and server were separated by only one switch.

This experiment highlights the difficulty in determining the minimum number of queries required for a successful attack. Even though both stunnel and mod_SSL use the same OpenSSL libraries and the same parameters for negotiating the SSL handshake, the run-time differences result in different zero-one gaps. More importantly, our attack works even when the attacking client and application are separated by a large network.

### Defenses
We discuss three possible defenses:

1. **RSA Blinding**: The most widely accepted defense against timing attacks is to perform RSA blinding. The RSA blinding operation calculates \( x = r^e \cdot g \mod N \) before decryption, where \( r \) is random, \( e \) is the RSA encryption exponent, and \( g \) is the ciphertext to be decrypted. \( x \) is then decrypted as normal, followed by division by \( r \), i.e., \( x^d / r \mod N \). Since \( r \) is random, \( x \) is random, and timing the decryption should not reveal information about the key. Note that \( r \) should be a new random number for every decryption. According to [17], the performance penalty is 2% to 10%, depending on the implementation. Netscape/Mozilla’s NSS library uses blinding. Blinding is available in OpenSSL but not enabled by default in versions prior to 0.9.7b. Figure 8 shows that blinding in OpenSSL 0.9.7b defeats our attack. We hope this paper demonstrates the necessity of enabling this defense.

2. **Constant-Time Decryption**: Another defense is to try and make all RSA decryptions independent of the input ciphertext. In OpenSSL, one would use only one multiplication routine and always carry out the extra reduction in Montgomery's algorithm, as proposed by Schindler in [18]. If an extra reduction is not needed, a "dummy" extra reduction is performed, and the result is not used. Karatsuba multiplication can always be used by calculating \( c \mod p_i \cdot 2^m \), where \( c \) is the ciphertext, \( p_i \) is one of the RSA factors, and \( m = \log_2(p_i) \). After decryption, the result is divided by \( 2^{md} \mod q \) to yield the plaintext. It is harder to create and maintain code where the decryption time is not dependent on the ciphertext. For example, since the result from a dummy extra reduction during Montgomery reductions is never used, it may inadvertently be optimized away by the compiler.

3. **Quantized Computation**: A third alternative is to require all RSA computations to be quantized, i.e., always take a multiple of some predefined time quantum. Matt Blaze’s quantize library [1] is an example of this approach. Note that all decryptions must take the maximum time of any decryption; otherwise, timing information can still be used to leak information about the secret key.

### Conclusion
We devised and implemented a timing attack against OpenSSL, a library commonly used in web servers and other SSL applications. Our experiments show that, contrary to current belief, the timing attack is effective when carried out between machines separated by multiple routers. Similarly, the timing attack is effective between two processes on the same machine and two Virtual Machines on the same computer. As a result of this work, several crypto libraries, including OpenSSL, now implement blinding by default as described in the previous section.

### Acknowledgments
This material is based upon work supported in part by the National Science Foundation under Grant No. 0121481 and the Packard Foundation. We thank the reviewers, Dr. Monica Lam, Ramesh Chandra, Constantine Sapuntzakis, Wei Dai, Art Manion, and CERT/CC, and Dr. Werner Schindler for their comments while preparing this paper. We also thank Nelson Bolyard, Geoff Thorpe, Ben Laurie, Dr. Stephen Henson, Richard Levitte, and the rest of the OpenSSL, mod_SSL, and stunnel development teams for their help in preparing patches to enable and use RSA blinding.

### References
[1] Matt Blaze. Quantize wrapper library. http://islab.oregonstate.edu/documents/People/blaze.

[2] Dan Boneh, Richard A. DeMillo, and Richard J. Lipton. On the importance of checking cryptographic protocols for faults. Lecture Notes in Computer Science, 1233:37–51, 1997.

[3] D. Coppersmith. Small solutions to polynomial equations, and low exponent RSA vulnerabilities. Journal of Cryptology, 10:233–260, 1997.

[4] Jean-Francois Dhem, Francois Koeune, Philippe-Alexandre Leroux, Patrick Mestre, Jean-Jacques Quisquater, and Jean-Louis Willems. A practical implementation of the timing attack. In CARDIS, pages 167–182, 1998.

[5] Peter Gutmann. Cryptlib. http://www.cs.auckland.ac.nz/~pgut001/cryptlib/.

[6] Intel. VTune performance analyzer for Linux v1.1. http://www.intel.com/software/products/vtune.

[7] Intel. Using the RDTSC instruction for performance monitoring. Technical report, 1997.

[8] Intel. IA-32 Intel Architecture Optimization Reference Manual. Technical Report 248966-008, 2003.

[9] P. Kocher, J. Jaffe, and B. Jun. Differential power analysis: Leaking secrets. In Crypto 99, pages 388–397, 1999.

[10] Paul Kocher. Timing attacks on implementations of Diffie-Hellman, RSA, DSS, and other systems. Advances in Cryptology, pages 104–113, 1996.

[11] Alfred Menezes, Paul Oorschot, and Scott Vanstone. Handbook of Applied Cryptography. CRC Press, October 1996.

[12] mod_SSL Project. mod_ssl. http://www.modssl.org.

[13] Peter Montgomery. Modular multiplication without trial division. Mathematics of Computation, 44(170):519–521, 1985.

[14] GNU Project. libgcrypt. http://www.gnu.org/directory/security/libgcrypt.html.

[15] OpenSSL Project. OpenSSL. http://www.openssl.org.

[16] Rao, Josyula, Rohatgi, and Pankaj. Empowering side-channel attacks. Technical Report 2001/037, 2001.

[17] RSA Press Release. http://www.otn.net/onthenet/rsaqa.htm, 1995.

[18] Werner Schindler. A timing attack against RSA with the Chinese Remainder Theorem. In CHES 2000, pages 109–124, 2000.

[19] Werner Schindler. A combined timing and power attack. Lecture Notes in Computer Science, 2274:263–279, 2002.

[20] Werner Schindler. Optimized timing attacks against public key cryptosystems. Statistics and Decisions, 20:191–210, 2002.

[21] Werner Schindler, Franois Koeune, and Jean-Jacques Quisquater. Improving divide and conquer attacks against cryptosystems by better error detection/correction strategies. Lecture Notes in Computer Science, 2260:245–267, 2001.

[22] Werner Schindler, Franois Koeune, and Jean-Jacques Quisquater. Unleashing the full power of timing attack. Technical Report CG-2001/3, 2001.

[23] stunnel Project. stunnel. http://www.stunnel.org.

---

This version of the text is more structured, clear, and professional, making it easier to read and understand.