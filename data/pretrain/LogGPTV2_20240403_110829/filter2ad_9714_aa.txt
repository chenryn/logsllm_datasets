**作者：heeeeen  
公众号：[OPPO安全应急响应中心](https://mp.weixin.qq.com/s/SAhXsCHvAct_2SxCXd2w0Q
"OPPO安全应急响应中心")**
系列阅读：  
\- [Android 中的特殊攻击面（一）——邪恶的对话框](https://paper.seebug.org/1174/ "Android
中的特殊攻击面（一）——邪恶的对话框")  
\- [Android 中的特殊攻击面（二）——危险的deeplink](https://paper.seebug.org/1175/ "Android
中的特殊攻击面（二）——危险的deeplink")
### 0x00 简介
6月，Google在Android AOSP Framework中修复了OPPO子午互联网安全实验室发现的高危提权漏洞CVE-2020-0144 [1]
，这个漏洞允许手机上没有权限的恶意应用以SystemUI 的名义发送任意Activity Intent
，可以静默拨打紧急电话，打开许多受权限保护的Activity。该漏洞也是自retme大神所分析的BroadcastAnyWhere经典漏洞[2]以来的又一个PendingIntent劫持漏洞，尽管无法以System
UID的权限发送任意广播，但由于SystemUI 同样拥有大量权限，该提权漏洞仍然具有很大的利用空间。
本文将对CVE-2020-0144进行分析，不过重点倒不在于PendingIntent漏洞利用，而是介绍该漏洞中PendingIntent的获取，这涉及到ContentProvider的一个比较隐蔽的函数——call
。
### 0x01 ContentProvider call
call函数的其中一个原型如下
    public Bundle call (String method, String arg, Bundle extras)               Bundle extras)
与其他基于数据库表的query/insert/delete等函数不同，call提供了一种针对Provider的直接操作接口，支持传入的参数分别为：方法、String类型的参数和Bundle类型的参数，并返回给调用者一个Bundle
类型的参数。
call函数的使用潜藏暗坑，开发者文档特意给出警示[3]：Android框架并没有针对call函数进行权限检查，call函数必须实现自己的权限检查。这里的潜在含义是：AndroidManifest文件中对ContentProvider的权限设置可能无效，必须在代码中对调用者进行权限检查。文章[4]对这种call函数的误用进行了描述，并给出了漏洞模型，感兴趣的读者可以去深究。
### 0x02 双无PendingIntent
CVE-2020-0144位于SystemUI的KeyGuardSliceProvider，该Provider包含一个构造自空Intent的PendingIntent。这是一个双无PendingIntent，既没有指定Intent的Package,也没有指定Intent的Action。普通App如果可以拿到这个PendingIntent，就可以填充这些内容，并以SystemUI的名义发送出去。
`frameworks/base/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardSliceProvider.java`
    public boolean onCreateSliceProvider() {
                ...
                mPendingIntent = PendingIntent.getActivity(getContext(), 0, new Intent(), 0);
                ...
            }
    return true;
        }
关键是普通App，如何拿到这个PendingIntent？要回答这个问题，必须从KeyGuardSliceProvider的父类SliceProvider说起。
### 0x03 SliceProvider
SliceProvider是自Android
P开始引入的一种应用程序间共享UI界面的机制，其架构如下图所示。在默认使用场景下，Slice的呈现者（SlicePresenter)，可以通过Slice
URI和Android系统提供的bindSlice等API来访问另一个App通过SliceProvider分享出来的Slice。
简而言之，Slice是可共享的UI界面，包括图标、文本和动作(action)，Slice通过URI来唯一标识。比如Settings中打开NFC开关的这个界面
可以通过SettingsSliceProvider中content://android.settings.slices/action/toggle_nfc这个URI共享给别的应用使用，用户不必打开Settings，就可以在其他应用界面中对NFC开关进行操作。除了显示文字和图标，上述界面也包含两个action：
点击文字：跳转到Settings中的NFC设置界面；
点击按钮：直接打开或关闭NFC选项。
这两个提供给用户触发的action实质都是通过PendingIntent来实现的。
关于SliceProvider的详细介绍参见[5]、[6]，尽管Android框架层提供了一系列API供App来使用SliceProvider，但更底层的call函数提供了一种直接操纵SliceProvider的捷径。
仔细观察SliceProvider，实现了call函数，根据不同的调用方法，返回一个包含Slice对象的Bundle。
`frameworks/base/core/java/android/app/slice/SliceProvider.java`
     @Override
        public Bundle call(String method, String arg, Bundle extras) {
            if (method.equals(METHOD_SLICE)) {
                Uri uri = getUriWithoutUserId(validateIncomingUriOrNull(
                        extras.getParcelable(EXTRA_BIND_URI)));
                List supportedSpecs = extras.getParcelableArrayList(EXTRA_SUPPORTED_SPECS);
                String callingPackage = getCallingPackage();
                int callingUid = Binder.getCallingUid();
                int callingPid = Binder.getCallingPid();
                Slice s = handleBindSlice(uri, supportedSpecs, callingPackage, callingUid, callingPid);
                Bundle b = new Bundle();
                b.putParcelable(EXTRA_SLICE, s);
                return b;
            } else if (method.equals(METHOD_MAP_INTENT)) {
                ...
            } else if (method.equals(METHOD_MAP_ONLY_INTENT)) {
                ...
            } else if (method.equals(METHOD_PIN)) {
                ...
            } else if (method.equals(METHOD_UNPIN)) {
                ...
            } else if (method.equals(METHOD_GET_DESCENDANTS)) {
                ...
            } else if (method.equals(METHOD_GET_PERMISSIONS)) {
                ...
            }
            return super.call(method, arg, extras);
        }
我们观察第一个分支，当传入的方法为METHOD_SLICE时，调用链为SliceProvider.handleBindSlice-->onBindSliceStrict-->onBindSlice，中间若通过了Slice访问的权限检查，最终就会进入onBindSlice方法，在SliceProvder中这个方法为空，因此具体实现在派生SliceProvider的子类。
### 0x04 KeyguardSliceProvider
SystemUI
所使用的KeyguardSliceProivder派生自SliceProvider，可以将锁屏上的日期、勿扰图标以及闹钟等展示界面分享给其他App使用。
针对KeyguardSliceProvider的URI
content://com.android.systemui.keyguard使用call函数，传入METHOD_SLICE，最终进入下面的onBindSlice方法。
`frameworks/base/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardSliceProvider.java`
    @AnyThread
    @Override
    public Slice onBindSlice(Uri sliceUri) {
            Trace.beginSection("KeyguardSliceProvider#onBindSlice");
            Slice slice;
    synchronized (this) {
                ListBuilder builder = new ListBuilder(getContext(), mSliceUri, ListBuilder.INFINITY);
    if (needsMediaLocked()) {
                    addMediaLocked(builder);
                } else {
                    builder.addRow(new RowBuilder(mDateUri).setTitle(mLastText));
                }
                addNextAlarmLocked(builder);
                addZenModeLocked(builder);
                addPrimaryActionLocked(builder);
                slice = builder.build();
            }
            Trace.endSection();
    return slice;
        }
这个方法返回给调用方KeyGuardSliceProvider的Slice对象，该对象通过addPrimaryActionLocked(builder)函数添加内部的action。
`frameworks/base/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardSliceProvider.java`
    protected void addPrimaryActionLocked(ListBuilder builder) {
    // Add simple action because API requires it; Keyguard handles presenting
    // its own slices so this action + icon are actually never used.
            IconCompat icon = IconCompat.createWithResource(getContext(),
                    R.drawable.ic_access_alarms_big);
            SliceAction action = SliceAction.createDeeplink(mPendingIntent, icon,
                    ListBuilder.ICON_IMAGE, mLastText);
            RowBuilder primaryActionRow = new RowBuilder(Uri.parse(KEYGUARD_ACTION_URI))
                    .setPrimaryAction(action);
            builder.addRow(primaryActionRow);
        }
注意上面那个mPendingIntent，也就是我们在前文所说的那个双无PendingIntent，该对象会被层层包裹到call函数返回的Slice对象中。因此，通过call函数，经过SliceProvider与KeyguardSliceProvider，有可能拿到SystemUI
生成的一个双无PendingIntent。
### 0x05 SliceProvider授权
但是使用下面的代码去call KeyguardSliceProvider会触发第一次访问Slice的授权。