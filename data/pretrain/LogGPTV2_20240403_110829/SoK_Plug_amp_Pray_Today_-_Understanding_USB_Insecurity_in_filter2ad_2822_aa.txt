title:SoK: "Plug &amp; Pray" Today - Understanding USB Insecurity in
Versions 1 Through C
author:Jing (Dave) Tian and
Nolen Scaife and
Deepak Kumar and
Michael Bailey and
Adam Bates and
Kevin R. B. Butler
SoK: “Plug & Pray” Today – Understanding USB
2018 IEEE Symposium on Security and Privacy
Insecurity in Versions 1 through C
Dave (Jing) Tian∗, Nolen Scaife∗, Deepak Kumar†, Michael Bailey†, Adam Bates†, Kevin R. B. Butler∗
∗University of Florida
{daveti, scaife, butler}@uﬂ.edu
†University of Illinois at Urbana-Champaign
{dkumar11, mdbailey, batesa}@illinois.edu
Abstract—USB-based attacks have increased in complexity in
recent years. Modern attacks now incorporate a wide range of
attack vectors, from social engineering to signal injection. To
address these challenges, the security community has responded
with a growing set of
fragmented defenses. In this work,
we survey and categorize USB attacks and defenses, unifying
observations from both peer-reviewed research and industry.
Our systematization extracts offensive and defensive primitives
that operate across layers of communication within the USB
ecosystem. Based on our taxonomy, we discover that USB attacks
often abuse the trust-by-default nature of the ecosystem, and
transcend different layers within a software stack; none of
the existing defenses provide a complete solution, and solutions
expanding multiple layers are most effective. We then develop
the ﬁrst formal veriﬁcation of the recently released USB Type-
C Authentication speciﬁcation, and uncover fundamental ﬂaws
in the speciﬁcation’s design. Based on the ﬁndings from our
systematization, we observe that while the spec has successfully
pinpointed an urgent need to solve the USB security problem, its
ﬂaws render these goals unattainable. We conclude by outlining
future research directions to ensure a safer computing experience
with USB.
I. INTRODUCTION
Since its introduction in the 1990s, the Universal Serial
Bus (USB) protocol has increased in popularity as a means
of facilitating communication between peripheral devices and
hosts. New USB device features have paved the way for
widespread adoption in nearly every computing device [35].
The newest
iteration of USB, Type-C, has strong support
from popular vendors—Type-C is now the exclusive means of
peripheral interaction with Apple MacBooks and new Google
smartphones [76].
Unfortunately, USB innovation has largely left security as
an afterthought. New speciﬁcations rarely mention security,
and until recently, USB designers placed the onus of security
onto the consumers and vendors of USB devices [123]. As a
result, USB devices are often a ripe target for attackers.
We begin this work with a systematic analysis of the attacks
present in the USB ecosystem. We ﬁnd that many USB attacks
appear at varying communication layers, ranging from the
human layer (social engineering) down to the physical layer
(signal injection). In addition, all attacks abuse the trust-by-
default nature of the USB ecosystem.
In spite of the evolving USB threat landscape, defenses
against such attacks are fragmented and not widely adopted. In
systematizing the defenses present in the USB ecosystem, we
ﬁnd that most defenses often focus on protecting a single layer,
which proves ineffective against a suite of attacks that appear
at many communication layers. In addition, misaligned goals
between industry and academia further fragment the defense
space. Commercial solutions focus on the prevention of data
loss and anti-malware without regard for emerging attack
vectors, while research prototypes vary and are hamstrung by
the lack of built-in security building blocks in the existing
USB speciﬁcations. As a result, research solutions often rely
on new host and peripheral architectures that are unlikely to
be incorporated into commercial systems.
After years of USB insecurity, the USB Implementers Fo-
rum (USB-IF) incorporated security features into the most re-
cent speciﬁcation, USB Type-C. The new speciﬁcation enables
Type-C authentication, which is intended to provide a way to
authenticate a USB device before interacting with it. However,
it is unclear whether authentication is sufﬁcient to defend
against all existing attacks, and what can be done for legacy
devices that do not support the new spec. To investigate these
questions, we formally verify the USB Type-C authentication
protocol. Though the spirit of the speciﬁcation highlights
long-awaited attention to security by USB designers, we
ﬁnd multiple attacks that can break its underlying security
guarnatees. We argue that had the USB Type-C designers
learned from the attacks and defenses of the past, many
speciﬁcation ﬂaws could have been mitigated. We further
leverage our systematization to pinpoint what security issues
the new protocol addresses, and more importantly, where it
still fails.
We conclude with a discussion of future directions for USB
security, leveraging our taxonomy and systematization to focus
attention on the problems that remain. We hope our results
prove useful to the security community as we work towards a
safer USB computing ecosystem.
II. BACKGROUND
We ﬁrst outline the evolution of the USB speciﬁcation and
highlight key features that inform the present state of USB
security.
© 2018, Jing Tian. Under license to IEEE.
DOI 10.1109/SP.2018.00037
1032
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:49 UTC from IEEE Xplore.  Restrictions apply. 
A. The Evolution of USB
Introduced in 1996, USB 1.0 [32] was designed to replace
disparate peripheral connecting interfaces and reduce the com-
plexity of both hardware design and software conﬁguration.
USB 1.x [32], [33] features a polled bus, meaning that the USB
host controller initiates all data transfers. It provides two data
transfer rates, which are known as Low Speed (1.5 Mbit/s)
and Full Speed (12 Mbit/s). USB 1.x additionally provides
a limited amount of power over the cable for “bus-powered”
devices. The term “security” does not appear at all in the USB
1.x speciﬁcation; the closest related topic is error detection in
the cable during transmission.
In 2000, the USB 2.0 protocol speciﬁcation was released.
USB 2.0 provided increased peripheral support and a High
Speed (480 Mbit/s) data transfer rate. Peripheral support was
expanded to include digital cameras, video cards, CD writers,
and network adapters (in particular, 802.11 and Bluetooth).
USB 2.0 also paved the way for the popularity of “ﬂash
drives”—portable devices that enabled physically transferring
data on the go. Like the 1.x speciﬁcations, the security of USB
devices is not stressed in the 650 page document. The lone
exception is the introduction of a new peripheral class called
Content Security [122], which attempts to provide limited
support for securing sensitive content, for example, readings
from ﬁngerprint scanners.
USB 3.0 [54] was published in 2008, and offers a Super-
Speed (5 Gbit/s) data transfer rate. Like 2.0 before it, USB
3.0 offered expanded support for new classes of peripherals,
such as USB Vision [8] for controlling cameras and external
USB-based graphics processing [36]. USB 3.0 also replaced
the downstream trafﬁc broadcast mechanism with a unicast
protocol, enabling internal routing within hubs. The 2013
release of USB 3.1 [55] brought about SuperSpeed+ (10
Gbit/s) as well as an updated USB Power Delivery (PD)
speciﬁcation [124]. This speciﬁcation, which supports up to
a 100W power supply over USB, paved the way for laptop
charging via USB. Unfortunately, security remained absent
from the 3.x speciﬁcation. USB Type-C [53] was introduced
as a part of USB 3.1 as a new connector type, unifying PD,
USB 3.x, Thunderbolt, DisplayPort and HDMI using a 24-pin
connector/cable. In 2017, USB 3.2 [13] was released, doubling
the data transfer rate of previous generations (20 Gbit/s).
Throughout the evolution of the USB protocol, security
was rarely given consideration. As recently as 2014, the USB
Implementors Forum (USB-IF) explicitly stated that security
falls outside the scope of the USB speciﬁcation. In an ofﬁcial
statement [123], the USB-IF asserted that security is not a
legitimate concern because “In order for a USB device to be
corrupted, the offender would need to have physical access to
the USB device.” They place the onus of security onto both
the consumers of USB products and the original equipment
manufacturers (OEMs), stating:
1)
2)
“OEMs decide whether or not to implement these
[security] capabilities in their products.”
“Consumers should always ensure their devices are
Figure 1: A USB device containing two conﬁgurations. Con-
ﬁguration 1 contains two interfaces, and conﬁguration 2 con-
tains one interface. Each interface supports two unidirectional
communication channels (In/Out) with the host machine. Each
channel may contain more than one endpoint (EP), which is
the sink of the communication.
from a trusted source and that only trusted sources
interact with their devices.”
By 2016, the USB-IF could not ignore security for much
longer. In response to the threat of rogue power chargers and
cables [18] enabled by the USB Type-C speciﬁcation, the USB
3.0 Promoter Group and the USB-IF introduced the USB Type-
C Authentication speciﬁcation [121] to Type-C products.
B. USB Protocol
The true ﬂexibility of USB comes from composite devices,
which can contain multiple conﬁgurations and interfaces, each
of which is a standalone entity. For instance, a USB headset
may contain one conﬁguration, which in turn contains four
interfaces, including a keyboard (for volume control), a micro-
phone, and two speakers. An example of a two-conﬁguration
USB device is shown in Figure 1. Two mechanisms are
necessary to accomplish composite devices, one to deﬁne
different kinds of peripherals, and another to connect to them.
1) Common Class Speciﬁcations: Beginning in USB 1.0,
the notion of Common Class Speciﬁcations [111], [115] was
introduced to codify different kinds of peripherals. A USB
class is a grouping of one or more interfaces that combine to
provide more complex functionality. Examples of classes that
feature a single interface include the Human Interface Device
(HID) class that enables the USB host controller to interact
with keyboards and mice, and the USB Mass Storage Class
[126], [125] that deﬁnes how to transfer data between the host
and storage devices. A composite device can then combine
different classes to create a useful product, such as a USB
headset leveraging both the HID class and Audio class. As
we will see, the notion of designing USB peripherals through
a composition of multiple functionalities continues to affect
on the state of USB security today.
the USB host controller detects
2) Device Enumeration: After a device is plugged into
the host machine,
its
presence and speed by checking the voltage change on
data pins. Enumeration then begins (shown in Figure 2)
with the GetDeviceDescriptors command, whereby
the host asks the device for its identifying information in-
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:49 UTC from IEEE Xplore.  Restrictions apply. 
1033
2
USB DeviceConﬁguration 1EP 0Conﬁguration 2Interface 1Interface 0EP 0EP 0EP 0EP 0EP 0EP 1EP 1EP 1EP 1EP nEP nInInInOutOutOutInterface 0highest level, the human layer involves actions and communi-
cations between human stakeholders. The application layer
represents user-level programs on the host and capabilities
on the device. The transport layer encompasses both device
ﬁrmware and host operating systems containing the USB stack.
Finally, the physical layer represents the communication over
the USB bus.
By grouping functionality into layers, we can more eas-
ily identify commonalities in approaches and derive sub-
groupings, called primitives. In the case of attacks, these prim-
itives encompass both the mechanism (i.e., how the attack is
accomplished) and the outcome (e.g., forgery, eavesdropping,
or denial of service). In the case of defenses, discussed in
Section IV, these primitives likewise encompass mechanism,
but instead highlight security guarantees (e.g., integrity, con-
ﬁdentiality, or availability).
A. Abuse of Human Layer
Abuse at the human layer involves social engineering or
human error, as performed by outsiders as well as privileged
members within an organization.
1) Outsider Threats: USB attacks rely on plugging in
a peripheral in order to damage a host or compromise its
security, leading security practitioners to warn of the dangers
of inserting suspicious devices into computers. Social engi-
neering frequently involves tricking a user into plugging an
untrusted device into their machine and interacting with its
contents; in practice, this is not a challenging task. Stasiukonis
reports that in a 2006 penetration test, compromise of the
organization was made easy as 75% of USB drives scattered
near the workplace had been plugged into company computers
within three days [109]. The US Department of Homeland Se-
curity [91] replicated this result in a similar experiment where
60% of drives dropped found their way onto a government
computer; this number increased to 90% when drivers were
branded with a government logo, suggesting that users’ low
bar for electronic trust can be manipulated by attackers.
Wagenaar et al.’s 2011 “USB Baiting” experiment [129],
also demonstrated that users plugged in USB drives and
explored their reasons for doing so. Though one would expect
general security awareness to increase over the years, recent
work demonstrates empirically that users are still plugging in
the USB drives they ﬁnd [119], [60]. Extending other exper-
iments, Tischer et al. planted appearance-modiﬁed drives to
instigate different human motivation, such as altruism or self-
interest. The researchers found 98% of drives were picked up
from the drop site and that ﬁles on 45% of drives were actually
opened. The ease of executing such attacks make USB-based
social engineering attacks both realistic and dangerous.
2) Insider Threats: The ease of use and rapidly declining
cost of USB storage devices enables both companies and
consumers to use them for storing and transferring sensitive
data. Like any physical device, they can be damaged, or worse,
lost, due to human error. Although not directly exploiting USB
vulnerabilities, such mishandling can often lead to detrimental
results. In 2011, Ponemon Institute released a study that
Figure 2: USB Enumeration Procedure.
Figure 3: USB vulnerabilities can be classiﬁed by the ab-
stracted communications layer at which they operated. A
successful attack involves violating an design assumption or
implementation error at a given layer.
cluding manufacturer, Vendor ID (VID), Product ID (PID),
and serial number. The host controller resets the device
and assigns an address to it for future communication. A
GetConfigDescriptors request obtains all conﬁgura-
tions available within the device. USB devices can have one
or more conﬁgurations, though only one may be active at a
time. Each conﬁguration can include one or more interfaces,
which are obtained with the GetInterfaceDescriptors
request and represent the essential functional entities served
by different drivers within the operating system. Af-
ter GetInterfaceDescriptors completes, drivers are
loaded on behalf of the device and class-speciﬁc subsets of
the USB protocol (e.g., HID, Storage) begin operation.
III. UNDERSTANDING USB ATTACK VECTORS
In this section, we explore current attacks against USB.
Given the myriad work in this space, we ﬁrst classify existing
attacks in terms of the functionality that
they target. We
thus categorize USB functionality into abstract communication
layers. As seen in Figure 3, the layers represent the various
entities involved across both the host and peripherals. At the
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:49 UTC from IEEE Xplore.  Restrictions apply. 
1034
3