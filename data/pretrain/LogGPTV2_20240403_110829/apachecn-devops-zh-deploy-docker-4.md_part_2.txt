这里需要注意几件事——有些比其他更明显:
*   你用`docker swarm init`创造一个群体
*   你用`docker swarm join`加入一个集群，机器可以是一个工作节点，一个管理节点，或者两者都有
*   使用令牌(需要匹配的唯一字符串)管理身份验证
*   如果管理器节点发生意外，例如重启或电源重启，并且您已经设置了群的自动锁定，则需要解锁密钥来解锁 TLS 密钥
到目前为止，一切都很好，所以让我们看看我们是否可以建立一个群，让我们的机器既充当经理又充当工人，看看这是如何工作的。
# 初始化 Docker 集群
要创建我们的群，我们首先需要实例化它:
```
$ docker swarm init 
Swarm initialized: current node (osb7tritzhtlux1o9unlu2vd0) is now a manager.
To add a worker to this swarm, run the following command:
 docker swarm join \
 --token SWMTKN-1-4atg39hw64uagiqk3i6s3zlv5mforrzj0kk1aeae22tpsat2jj-2zn0ak0ldxo58d1q7347t4rd5 \
 192.168.4.128:2377
To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.
$ # Make sure that our node is operational
$ docker node ls
ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS
osb7tritzhtlux1o9unlu2vd0 *  feather2  Ready   Active        Leader
```
我们已经使用该命令创建了一个群，并且我们被自动注册为管理节点。如果您看一下输出，添加工作节点的命令只是`docker swarm join --token  `，但是我们现在对单节点部署感兴趣，所以我们不需要担心。假设我们的管理器节点也是一个工作节点，我们可以直接使用它，在它上面抛出一些服务。
# 部署服务
我们最初需要的大多数命令都可以通过`docker services`命令访问:
```
$ docker service
Commands:
 create      Create a new service
 inspect     Display detailed information on one or more services
 logs        Fetch the logs of a service or task
 ls          List services
 ps          List the tasks of one or more services
 rm          Remove one or more services
 scale       Scale one or multiple replicated services
 update      Update a service
```
As you might be suspecting, given how similar these commands are to some of the ones for managing containers, once you move to an orchestration platform as opposed to fiddling with containers directly, the ideal management of your services would be done through the orchestration itself. I would probably expand this and go as far as to say that if you are working with containers too much while having an orchestration platform, you did not set something up or you did not set it up correctly.
我们现在将尝试在我们的 Swarm 上运行某种服务，但是由于我们只是在探索所有这些是如何工作的，我们可以使用来自[第 2 章](2.html)、*卷起袖子*的非常精简(并且非常不安全)的 Python web 服务器版本。创建一个新文件夹，并将其添加到新的`Dockerfile`中:
```
FROM python:3
ENV SRV_PATH=/srv/www/html
EXPOSE 8000
RUN mkdir -p $SRV_PATH && \
 groupadd -r -g 350 pythonsrv && \
 useradd -r -m -u 350 -g 350 pythonsrv && \
 echo "Test file content" > $SRV_PATH/test.txt && \
 chown -R pythonsrv:pythonsrv $SRV_PATH
WORKDIR $SRV_PATH
CMD [ "python3", "-m", "http.server" ]
```
让我们构建它，以便在定义我们的服务时，我们的本地注册中心有一个映像可供提取:
```
$ docker build -t simple_server .
```
映像就绪后，让我们将其部署到群中:
```
$ docker service create --detach=true \
 --name simple-server \
 -p 8000:8000 \
 simple_server 
image simple_server could not be accessed on a registry to record
its digest. Each node will access simple_server independently,
possibly leading to different nodes running different
versions of the image.
z0z90wgylcpf11xxbm8knks9m
$ docker service ls
ID           NAME          MODE       REPLICAS IMAGE         PORTS
z0z90wgylcpf simple-server replicated 1/1      simple_server *:8000->8000/tcp
```
The warning shown is actually very important: our service is only available on our local machine's Docker registry when we built it, so using a Swarm service that is spread between multiple nodes will have issues since other machines will not be able to load the same image. For this reason, having the image registry available from a single source to all of the nodes is mandatory for cluster deployments. We will cover this issue in more detail as we progress through this and following chapters.
如果我们查看`http://127.0.0.1:8000`，我们可以看到我们的服务正在运行！让我们看看这个:
![](img/d8112cbe-bdb9-4ce3-8f2d-e237efead055.png)
如果我们将此服务扩展到三个实例，我们可以看到我们的编排工具是如何处理状态转换的:
```
$ docker service scale simple-server=3 
image simple_server could not be accessed on a registry to record
its digest. Each node will access simple_server independently,
possibly leading to different nodes running different
versions of the image.
simple-server scaled to 3
$ docker service ls
ID           NAME          MODE       REPLICAS IMAGE         PORTS
z0z90wgylcpf simple-server replicated 2/3      simple_server *:8000->8000/tcp
$ # After waiting a bit, let's see if we have 3 instances now
$ docker service ls
ID           NAME          MODE       REPLICAS IMAGE         PORTS
z0z90wgylcpf simple-server replicated 3/3      simple_server *:8000->8000/tcp
$ # You can even use regular container commands to see it
$ docker ps --format 'table {{.ID}}  {{.Image}}  {{.Ports}}'
CONTAINER ID  IMAGE  PORTS
0c9fdf88634f  simple_server:latest  8000/tcp
98d158f82132  simple_server:latest  8000/tcp
9242a969632f  simple_server:latest  8000/tcp
```
您可以看到这是如何调整容器实例以适应我们指定的参数的。如果我们现在在现实生活中会发生的事情中加入一些东西——容器死亡:
```
$ docker ps --format 'table {{.ID}}  {{.Image}}  {{.Ports}}'
CONTAINER ID  IMAGE  PORTS
0c9fdf88634f  simple_server:latest  8000/tcp
98d158f82132  simple_server:latest  8000/tcp
9242a969632f  simple_server:latest  8000/tcp
$ docker kill 0c9fdf88634f
0c9fdf88634f
$ # We should only now have 2 containers
$ docker ps --format 'table {{.ID}}  {{.Image}}  {{.Ports}}'
CONTAINER ID  IMAGE  PORTS
98d158f82132  simple_server:latest  8000/tcp
9242a969632f  simple_server:latest  8000/tcp
$ # Wait a few seconds and try again
$ docker ps --format 'table {{.ID}}  {{.Image}}  {{.Ports}}'
CONTAINER ID  IMAGE  PORTS
d98622eaabe5  simple_server:latest  8000/tcp
98d158f82132  simple_server:latest  8000/tcp
9242a969632f  simple_server:latest  8000/tcp
$ docker service ls
ID           NAME          MODE       REPLICAS IMAGE         PORTS
z0z90wgylcpf simple-server replicated 3/3      simple_server *:8000->8000/tcp
```
如您所见，群集会像什么都没发生一样反弹，这就是容器化如此强大的原因:我们不仅可以在许多机器之间分散处理任务并灵活地扩展吞吐量，而且对于相同的服务，我们真的不太在乎一些(希望很小)百分比的服务是否死亡，因为框架将使它对客户端完全无缝。借助 Docker Swarm 的内置服务发现，负载平衡器会将连接转移到任何正在运行/可用的容器，因此任何试图连接到我们服务器的人都不会看到太大的不同。
# 清理
就像我们已经完成的任何服务一样，我们需要确保清理到目前为止已经用完的所有资源。在 Swarm 的情况下，我们可能应该删除我们的服务并销毁我们的集群，直到我们再次需要它。您可以使用`docker service rm`和`docker swarm leave`来完成这两件事:
```
$ docker service ls
ID           NAME          MODE       REPLICAS IMAGE         PORTS
z0z90wgylcpf simple-server replicated 3/3      simple_server *:8000->8000/tcp
$ docker service rm simple-server
simple-server
$ docker service ls
ID           NAME          MODE       REPLICAS IMAGE         PORTS
$ docker swarm leave --force
Node left the swarm.
```
The reason why we had to use the `--force` flag here is due to the fact that we are a manager node and we are the last one in the cluster, so by default, Docker will prevent this action without it. In a multi-node setup, you will not generally need this flag.
有了这个动作，我们现在回到了我们开始的地方，并准备好用真正的服务来做到这一点。
# 使用 Swarm 来编排我们的文字服务