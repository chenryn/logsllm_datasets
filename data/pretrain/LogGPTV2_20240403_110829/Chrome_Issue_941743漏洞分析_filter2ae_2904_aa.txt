# Chrome Issue 941743漏洞分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
Issue
941743是2019年的一个v8方面的历史漏洞，其漏洞发生在对Array.prototype.map函数的Reduce过程，之前介绍过Array.prototype.map的一个回调漏洞，本文将介绍其在JIT层的一个优化漏洞。
## 0x01 前置知识
###  Array.prototype.map()
Array.prototype.map()函数用于从一个数组中根据函数关系创建一个映射，其语法如下
> var new_array = arr.map(function callback(currentValue[, index[, array]]) {  
>  // Return element for new_array  
>  }[, thisArg])
基本用法如下
    var a = [1,2,3];
    var b = a.map((value,index)=>{
       print("index="+index+" value=" + value);
       return value+1;
    });
    print("b=",b);
输出如下
    index=0 value=1
    index=1 value=2
    index=2 value=3
    b= 2,3,4
###  Array()函数调用链及JIT优化分析
####  源码分析
当我们执行`var a = Array(1)`时，首先调用的是`ArrayConstructor`，该函数位于`src/builtins/builtins-array-gen.cc`，按照源码分析，其调用链为`ArrayConstructor -> ArrayConstructorImpl ->
GenerateArrayNArgumentsConstructor -> TailCallRuntime`  
GenerateArrayNArgumentsConstructor函数如下，其结尾使用了`TailCallRuntime`去调用某个函数
    void ArrayBuiltinsAssembler::GenerateArrayNArgumentsConstructor(
        TNode context, TNode target, TNode new_target,
        TNode argc, TNode maybe_allocation_site) {
      // Replace incoming JS receiver argument with the target.
      // TODO(ishell): Avoid replacing the target on the stack and just add it
      // as another additional parameter for Runtime::kNewArray.
      CodeStubArguments args(this, ChangeInt32ToIntPtr(argc));
      args.SetReceiver(target);
      // Adjust arguments count for the runtime call: +1 for implicit receiver
      // and +2 for new_target and maybe_allocation_site.
      argc = Int32Add(argc, Int32Constant(3));
      TailCallRuntime(Runtime::kNewArray, argc, context, new_target,
                      maybe_allocation_site);
    }
而`TailCallRuntime`函数在不同指令架构上有不同的实现，这里我们看`x64`架构的实现
    void MacroAssembler::TailCallRuntime(Runtime::FunctionId fid) {
      // ----------- S t a t e -------------      //  -- rsp[0]                 : return address
      //  -- rsp[8]                 : argument num_arguments - 1
      //  ...
      //  -- rsp[8 * num_arguments] : argument 0 (receiver)
      //
      //  For runtime functions with variable arguments:
      //  -- rax                    : number of  arguments
      // -----------------------------------    
      const Runtime::Function* function = Runtime::FunctionForId(fid);
      DCHECK_EQ(1, function->result_size);
      if (function->nargs >= 0) {
        Set(rax, function->nargs);
      }
      JumpToExternalReference(ExternalReference::Create(fid));
    }
通过`Runtime::FunctionForId(fid)`找到函数对象，在源码文件中`src/runtime/runtime.cc`中有定义
    const Runtime::Function* Runtime::FunctionForId(Runtime::FunctionId id) {
      return &(kIntrinsicFunctions[static_cast(id)]);
    }
其中`kIntrinsicFunctions`的定义如下
    static const Runtime::Function kIntrinsicFunctions[] = {
        FOR_EACH_INTRINSIC(F) FOR_EACH_INLINE_INTRINSIC(I)};
宏定义`FOR_EACH_INTRINSIC`如下
    #define FOR_EACH_INTRINSIC_IMPL(F, I)       \
      FOR_EACH_INTRINSIC_RETURN_PAIR_IMPL(F, I) \
      FOR_EACH_INTRINSIC_RETURN_OBJECT_IMPL(F, I)
    #define FOR_EACH_INTRINSIC_RETURN_OBJECT_IMPL(F, I) \
      FOR_EACH_INTRINSIC_ARRAY(F, I)                    \
      FOR_EACH_INTRINSIC_ATOMICS(F, I)                  \
      FOR_EACH_INTRINSIC_BIGINT(F, I)                   \
      FOR_EACH_INTRINSIC_CLASSES(F, I)                  \
      FOR_EACH_INTRINSIC_COLLECTIONS(F, I)              \
      FOR_EACH_INTRINSIC_COMPILER(F, I)                 \
      FOR_EACH_INTRINSIC_DATE(F, I)                     \
      FOR_EACH_INTRINSIC_DEBUG(F, I)                    \
      FOR_EACH_INTRINSIC_FORIN(F, I)                    \
      FOR_EACH_INTRINSIC_FUNCTION(F, I)                 \
      FOR_EACH_INTRINSIC_GENERATOR(F, I)                \
      FOR_EACH_INTRINSIC_IC(F, I)                       \
      FOR_EACH_INTRINSIC_INTERNAL(F, I)                 \
      FOR_EACH_INTRINSIC_INTERPRETER(F, I)              \
      FOR_EACH_INTRINSIC_INTL(F, I)                     \
      FOR_EACH_INTRINSIC_LITERALS(F, I)                 \
      FOR_EACH_INTRINSIC_MODULE(F, I)                   \
      FOR_EACH_INTRINSIC_NUMBERS(F, I)                  \
      FOR_EACH_INTRINSIC_OBJECT(F, I)                   \
      FOR_EACH_INTRINSIC_OPERATORS(F, I)                \
      FOR_EACH_INTRINSIC_PROMISE(F, I)                  \
      FOR_EACH_INTRINSIC_PROXY(F, I)                    \
      FOR_EACH_INTRINSIC_REGEXP(F, I)                   \
      FOR_EACH_INTRINSIC_SCOPES(F, I)                   \
      FOR_EACH_INTRINSIC_STRINGS(F, I)                  \
      FOR_EACH_INTRINSIC_SYMBOL(F, I)                   \
      FOR_EACH_INTRINSIC_TEST(F, I)                     \
      FOR_EACH_INTRINSIC_TYPEDARRAY(F, I)               \
      FOR_EACH_INTRINSIC_WASM(F, I)                     \
      FOR_EACH_INTRINSIC_WEAKREF(F, I)
其中，我们较为关注的`kNewArray`函数在`FOR_EACH_INTRINSIC_ARRAY`里被注册
    #define FOR_EACH_INTRINSIC_ARRAY(F, I) \
      F(ArrayIncludes_Slow, 3, 1)          \
      F(ArrayIndexOf, 3, 1)                \
      F(ArrayIsArray, 1, 1)                \
      F(ArraySpeciesConstructor, 1, 1)     \
      F(GrowArrayElements, 2, 1)           \
      I(IsArray, 1, 1)                     \
      F(NewArray, -1 /* >= 3 */, 1)        \
      F(NormalizeElements, 1, 1)           \
      F(TransitionElementsKind, 2, 1)      \
      F(TransitionElementsKindWithKind, 2, 1)
由此可以知道`Array(1)`最终调用的是`NewArray`函数，该函数位于`src/runtime/runtime-array.cc`文件
    RUNTIME_FUNCTION(Runtime_NewArray) {
      HandleScope scope(isolate);
      DCHECK_LE(3, args.length());
      int const argc = args.length() - 3;
      // argv points to the arguments constructed by the JavaScript call.
      JavaScriptArguments argv(argc, args.address_of_arg_at(0));
      CONVERT_ARG_HANDLE_CHECKED(JSFunction, constructor, argc);
      CONVERT_ARG_HANDLE_CHECKED(JSReceiver, new_target, argc + 1);
      CONVERT_ARG_HANDLE_CHECKED(HeapObject, type_info, argc + 2);
      // TODO(bmeurer): Use MaybeHandle to pass around the AllocationSite.
      Handle site = type_info->IsAllocationSite()
                                        ? Handle::cast(type_info)
                                        : Handle::null();
      Factory* factory = isolate->factory();
      // If called through new, new.target can be:
      // - a subclass of constructor,
      // - a proxy wrapper around constructor, or
      // - the constructor itself.
      // If called through Reflect.construct, it's guaranteed to be a constructor by
      // REFLECT_CONSTRUCT_PREPARE.
      DCHECK(new_target->IsConstructor());
      bool holey = false;
      bool can_use_type_feedback = !site.is_null();
      bool can_inline_array_constructor = true;
      if (argv.length() == 1) {
        Handle argument_one = argv.at(0);
        if (argument_one->IsSmi()) {
          int value = Handle::cast(argument_one)->value();
          if (value heap(), value)) {
            // the array is a dictionary in this case.
            can_use_type_feedback = false;
          } else if (value != 0) {
            holey = true;
            if (value >= JSArray::kInitialMaxFastElementArray) {
              can_inline_array_constructor = false;
            }
          }
        } else {
          // Non-smi length argument produces a dictionary
          can_use_type_feedback = false;
        }
      }
      ...............................省略线......................
    if (!site.is_null()) {
        if ((old_kind != array->GetElementsKind() || !can_use_type_feedback ||
             !can_inline_array_constructor)) {
          // The arguments passed in caused a transition. This kind of complexity
          // can't be dealt with in the inlined optimized array constructor case.
          // We must mark the allocationsite as un-inlinable.
          site->SetDoNotInlineCall();
        }
      } else {
        if (old_kind != array->GetElementsKind() || !can_inline_array_constructor) {
          // We don't have an AllocationSite for this Array constructor invocation,
          // i.e. it might a call from Array#map or from an Array subclass, so we
          // just flip the bit on the global protector cell instead.
          // TODO(bmeurer): Find a better way to mark this. Global protectors
          // tend to back-fire over time...
          if (Protectors::IsArrayConstructorIntact(isolate)) {
            Protectors::InvalidateArrayConstructor(isolate);
          }
        }
以上代码，仅保留了我们较为关注的地方，从中可以看出，如果数组元素类型为`Smi`类型，并且`value >=
JSArray::kInitialMaxFastElementArray`成立，也就是数组长度大于`JSArray::kInitialMaxFastElementArray`值的时候，`can_inline_array_constructor`被标记为`false`，最终，因为该标记,`site->SetDoNotInlineCall()`函数被调用。该标记最终将会在`src/compiler/js-create-lowering.cc`文件中的`ReduceJSCreateArray`函数中使用
        if (length_type.Maybe(Type::UnsignedSmall()) && can_inline_call) {
          return ReduceNewArray(node, length, *initial_map, elements_kind,
                                allocation, slack_tracking_prediction);
        }
        ...........省略线...............
        if (values_all_smis) {