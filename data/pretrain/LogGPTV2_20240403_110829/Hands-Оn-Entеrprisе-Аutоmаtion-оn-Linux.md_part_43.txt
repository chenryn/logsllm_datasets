Other Books You May Enjoy
Hands-On Linux for Architects
Denis Salamanca, Esteban Flores
ISBN: 978-1-78953-410-8
Study the basics of infrastructure design and the steps involved
Expand your current design portfolio with Linux-based solutions
Discover open source software-based solutions to optimize your architecture
Understand the role of high availability and fault tolerance in a resilient design
Identify the role of containers and how they improve your continuous
integration and continuous deployment pipelines
Gain insights into optimizing and making resilient and highly available designs
by applying industry best practices
[ 473 ]
Other Books You May Enjoy
Leave a review - let other readers know what
you think
Please share your thoughts on this book with others by leaving a review on the site that you
bought it from. If you purchased the book from Amazon, please leave us an honest review
on this book's Amazon page. This is vital so that other potential readers can see and use
your unbiased opinion to make purchasing decisions, we can understand what our
customers think about our products, and our authors can see your feedback on the title that
they have worked with Packt to create. It will only take a few minutes of your time, but is
valuable to other potential customers, our authors, and Packt. Thank you!
[ 474 ]
Index
A one-off tasks, running with 452, 453, 454, 455,
456
Active Directory (AD) 277 packages, installing 126, 127, 128, 129
Advanced Intrusion Detection Environment (AIDE) process management 338, 339, 340, 341
about 335 roles 42, 43, 44, 45
installing 357 security policies, building up 378, 380, 381,
Amazon Web Services (AWS) 95, 117 382, 383, 384, 385
Ansible configuration file security policy, testing 394, 395, 396
reference link 31 used, for adding user account 270, 271, 272,
Ansible documentation 273, 274, 275, 276
installation link 29 used, for auditing user accounts 286, 287, 288
Ansible dynamic inventories used, for automating MariaDB data loading 306,
working with 445, 446, 447, 448 307, 308, 309, 310, 311, 312, 313, 315, 316,
Ansible Galaxy 45 317
Ansible module 32 used, for building template 120, 121
Ansible playbook structure used, for creating configuration changes 184,
exploring 29, 30, 32, 33, 34, 35 185, 186
Ansible security policies used, for installing databases 291
writing 374 used, for installing MariaDB server 291, 292,
Ansible templates 52, 54, 55 293, 294, 295, 296, 297, 298, 299, 300
Ansible variables 47, 48, 50, 51, 52 used, for installing PostgreSQL Server 300, 301,
Ansible 302, 303, 304, 305
application of enterprise-wide policy 390, 391, used, for managing sudoers 284, 285
392, 393, 394 used, for modifying user account 270, 271, 272,
build, cleaning up 139, 140 273, 274, 275, 276
combining, with SOE 56, 57 used, for performing routine maintenance on
complex security benchmarks, implementing PostgreSQL 318, 319, 320, 321, 322
385, 386, 387 used, for process management 337
configuration files, editing 130, 131, 132, 133 used, for removing users 276, 277
configuration integrity, maintaining 187, 188, used, for rolling updates 342, 343, 344, 345
189 used, for standardizing template 120, 121
configuration, auditing 284 AWX API
configuration, enforcing 284 reference link 64
files, transferring into image 121, 122, 123, 125 AWX
image build, validating 133, 134, 135, 136, 137 about 60
integrating, with Git 436, 437, 438 benefits 61, 62, 63, 64
inventories, exploring 35, 36, 37, 38, 40, 41 credentials, setting up 71
installing 64, 65, 66, 67, 68, 70 D
inventories, creating 72, 73, 74
playbook, executing from 70, 80, 81, 82, 83, 84 data
project, creating 75, 76, 77, 78, 79 exporting 306
routine tasks, automating with 84, 85, 86 importing 306
template, creating 79, 80 Database Administrator (DBA) 76
databases
B installing, with Ansible 291
DEB-based patching
bare-metal environments
used, with Pulp 230, 231, 232, 233, 234
deploying 92, 93
DEB-based repositories
builds
building, in Pulp 220, 221, 222, 223
cleaning up, with Ansible 139, 140
DEB-based systems
efficient processes, creating 103
patching, with Katello 261, 263, 264, 265, 266
enhancing 100, 101, 102
Disaster Recovery (DR) 206
securing 102
disk space
C clearing 325, 326, 327, 328, 329, 330, 331
Docker deployments 98, 99
CIS Benchmark scripts
executing, from remote location 368, 369, 371 E
CIS Benchmarks
enterprise scale
about 350, 351, 352
configuration, managing 189
exploring 352, 354
eXtensible Configuration Checklist Description
reference link 352
Format (XCCDF) 408, 410
CIS Service benchmarks 358
cloud environments F
deploying 95, 96, 98
Cobbler dynamic inventory Fedora project web site
working with 448, 449, 450, 451, 452 URL 110
Community for Internet Security (CIS) 351 filesystems
complex security benchmarks mounting 356, 357
implementing, in Ansible 385, 386, 387 FreeIPA
configuration changes about 281, 283, 284
creating, with Ansible 184, 185, 186 reference link 282
configuration drift
G
monitoring 331, 332, 333, 334, 335
configuration integrity Git
maintaining 187, 188, 189 Ansible, integrating with 436, 437, 438
Configuration Management Database (CMDB) 64 Google Cloud Platform (GCP) 95
Configuration Management System (CMS) 448 Graphical User Interface (GUI) 207
credentials
H
setting up, in AWX 71
custom scripts Hammer 237
adding, to unattended boot configuration 171 HEAD 76
with kickstart 171, 172 hosts
with Ubuntu pre-seed file 172 allowing, by network 358, 359
[ 476 ]
I Linux environment scaling, challenges
about 9
initial build addressing 11
performing 109 Linux environment scaling, requisites
inventories ease of use 16
about 444, 445 longevity 14, 15
creating, in AWX 72, 73, 74 reliability 13
exploring, in Ansible 35, 36, 37, 38, 40, 41 scalability 13, 14
inventory host variables security 12, 13
reference link 41 supportability 15, 16
Linux images
J
consistency, ensuring 103, 105, 106
Java Runtime Environment (JRE) 407 Linux infrastructure
Jinja2 templating 54 scanning, with OpenSCAP tools 412, 413, 414,
Just enough Operating System (JeOS) 19 415, 416, 417, 418, 419, 420, 422
local firewalls 359
K
M
Katello 3.12 documentation
reference link 239 MariaDB data loading
Katello documentation, for Activation Keys automating, with Ansible 306, 307, 308, 309,
reference link 259 310, 311, 312, 313, 315, 316, 317
Katello server MariaDB server
installation, preparing 239, 241, 242 installation link 292
installing 239 installing, with Ansible 291, 292, 293, 294, 295,
Katello 296, 297, 298, 299, 300
about 237, 238 Microsoft AD 278, 279, 280, 281
Candlepin 237
N
Capsule 237
DEB-based systems, patching 261, 263, 264, Nagios Cross-Platform Agent (NCPA) 19
265, 266 network boot
Foreman 237 performing 152, 153, 154, 155, 156, 157, 158
patching 242, 243 network installation images
Pulp 237 obtaining 149, 150, 151
RPM-based systems, patching 243, 244, 245, Network Operations Center (NOC) 60
247, 248, 249, 250, 251, 252, 253, 254, 255, non-native packages
256, 257, 258, 259, 260, 261 installing 182, 183
kickstart 158 non-standard environments
kickstart files challenges 9
used, for performing unattended builds 158, early growth 9
159, 161, 163, 164, 165, 166 impacts 10
scaling up 10
L
O
LDAP
used, for centralizing user account management one-off tasks
277
running, with Ansible 452, 453, 454, 455, 456
[ 477 ]
open source software (OSS) 35 process management
Open Vulnerability and Assessment Language with Ansible 337, 338, 339, 340, 341
(OVAL) 408, 410 project
OpenSCAP Base tool creating, in AWX 75, 76, 77, 78, 79
executing 401, 402 Pulp Consumer 223
OpenSCAP Daemon Pulp
installing 402, 403 DEB-based repositories, building 220, 221, 222,
used, for executing scans 422, 423, 424, 425, 223
426 installing 207, 208, 209, 210, 211, 212, 213
OpenSCAP policies installing, for patch management 206, 207
installing 410, 411 repositories, building 214
OpenSCAP server RPM-based repositories, building 214, 215, 216,
installing 400 217, 218, 219, 220
OpenSCAP tools used, for patching processes 223
considering 404, 405 used, in RPM-based patching 224, 225, 227,
used, for scanning Linux infrastructure 412, 413, 228, 229
414, 415, 416, 417, 418, 419, 420, 422 used, with DEB-based patching 230, 231, 232,
OpenSCAP 233, 234
used, for scanning enterprise 412 PXE booting
operating system default repositories about 144, 145
package, installing 177, 179, 181 network boot, performing 152, 153, 154, 155,
organizational unit (OU) 280 156, 157, 158
OSSEC project network installation images, obtaining 149, 150,
reference link 357 151
PXE-related services, configuring 145, 146,
P
148, 149
PXE-related services, installing 145, 146, 148,
package
149
installing, from operating system default
PXE-related services
repositories 177, 179, 181
configuring 145, 146, 148, 149
patch management
installing 145, 146, 148, 149
Pulp, installing 206, 207
Payment Card Industry (PCI) 410 Q
playbook design
appropriate decisions, making 388, 389, 390 Quick Copy On Write (QCOW2) 113
playbook
R
about 30
executing, from AWX 70, 80, 81, 82, 83, 84 ready-made template images
PostgreSQL Server using 110, 111, 112
installing, with Ansible 300, 301, 302, 303, 304, Red Hat Enterprise Linux (RHEL) 178, 281, 292
305 Red Hat Subscription Management (RHSM) 237
Pre-eXecution Environment (PXE) 93, 144 remote root login
pre-seed files disability, ensuring 375, 376, 378
used, for performing unattended builds 167, Role-Based Access Control (RBAC) 76
168, 169, 170, 171 roles and directory structure
process IDs (PIDs) 337 reference link 45
[ 478 ]
roles scripts
version control, in Ansible 440, 441, 442, 443, version control 435, 436
444 Secure Shell (SSH) 332
rolling updates security policy
with Ansible 342, 343, 344, 345 applying 355
routine maintenance building up, in Ansible 378, 380, 381, 382, 383,
performing 318 384, 385
performing, on PostgreSQL with Ansible 318, evaluating 405
319, 320, 321, 322 selecting 405
routine tasks testing, with Ansible 394, 395, 396
automating, with AWX 84, 85, 86 SELinux security policy
RPM-based patching applying 356
used, with Pulp 224, 225, 227, 228, 229 Serial-Over-LAN (SOL) 155
RPM-based repositories server hardening
building, in Pulp 214, 215, 216, 217, 218, 219, scripted deployment 360
220 SOE benefits
RPM-based systems exploring 20
patching, with Katello 243, 244, 245, 247, 248, SOE, in Linux environment
249, 250, 251, 252, 253, 254, 255, 256, 257, benefits 20, 21, 22
258, 259, 260 software
installing 176
S
Spacewalk software tool 238
scalable dynamic configuration changes special variables
creating 196, 197, 200, 201, 202 reference link 50
scalable static configuration changes ssh-agent, with Ansible
creating 190, 191, 192, 193, 194, 196 reference link 41
scan reports Standard Operating Environment (SOE), benefits
interpreting 428, 430, 431 to software testing 22, 23
scans Standard Operating Environment (SOE)
executing, with OpenSCAP Daemon 422, 423, about 16, 17, 18, 19, 158
424, 425, 426 combining, with Ansible 56, 57
SCAP Security Guide (SSG) 406 deviations 24
SCAP Security Guide maintenance 25, 26
installing 406, 407, 408 sudoers
SCAP Workbench managing, with Ansible 284, 285
about 403 Surveys 321
executing 403, 404 system preparation (sysprep) 118
scanning with 426, 427, 428
T
SCAPTimony 404
scoring 359 template
scripted approaches, CIS Benchmark application creating, in AWX 79, 80
packet redirect sending, ensuring 365, 366, 367, tower-cli command
368
reference link 64
SSH root login, disabling 360, 361, 362, 363,
traditional virtualization environments
365
deploying 93, 94, 95
[ 479 ]
Trivial File Transfer Protocol (TFTP) 144 V
U variable precedence
reference link 47
Ubuntu repositories
Vault
reference link 221
about 52
unattended boot configuration
reference link 52
custom scripts, adding 171
version control
unattended builds
for scripts 435, 436
performing 158
repositories, organizing 438, 439
performing, with kickstart files 158, 159, 161,
virtual machine images
163, 164, 165, 166
creating 112, 113, 114, 116, 117, 118, 119,
performing, with pre-seed files 167, 168, 169,
120
170, 171
Virtualmin 183
unique identification number (UID) 270
unpackaged software W
installing 183
Windows Subsystem for Linux (WBL) 29
user account management
centralizing, with LDAP 277 X
tasks, performing 269
user accounts X Windows 358
auditing, with Ansible 286, 287, 288 Y
removing, with Ansible 276, 277
YAML Ain't Markup Language (YAML) 31