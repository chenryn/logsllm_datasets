XML是一种数据存储格式，如果服务器在修改或查询时没有进行转义处理，直接输入或输出数据，将会导致XML注入漏洞。攻击者可以篡改XML数据格式，增加新的XML节点，对服务端数据处理流程造成影响。
    Input: 2
    Computer
    2
    200$
上述XML中，我们可以在服务器应答包中的“count”节点找到请求中的输入值。
如果我们修改输入值，那么我们可以看到返回结果中，“price”节点的值已经被成功篡改。
    Input: 20$
    Computer
    20$
    ...
**5.1.4 XXE注入漏洞**
XXE（XML External Entiry
Injection，XML外部实体注入）漏洞是在对非安全的外部实体数据进行处理时所引发的安全问题。实体是XML文档结构中定义的一个概念，可以通过预定义在文档中调用。利用XML提供的实体特性，攻击者可以使用XXE漏洞读取本地文件。
XXE注入漏洞中，发往服务器的XML载荷如下所示：
    ]>&xxe;
我们以 “QIWI.ru”网站的SOAP型Web Service为例，分析其中的XXE漏洞（该漏洞由某位安全研究人员发现，具体研究报告可以参考此处资料）。
攻击者发往“https://send.qiwi.ru/soapserver”地址的载荷为：
    POST /soapserver/ HTTP/1.1
    Host: send.qiwi.ru
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 254
    ]>
    &xxe;
关于XXE漏洞的更多信息，读者可以参考这里的相关资料。
**5.2 Web Service中的控制问题**
**5.2.1 未授权访问冲突**
当我们统计渗透测试的结果时，我们会发现未授权访问漏洞在Web Service中非常常见。主要的原因在于开发人员不认为未授权用户是攻击者，且理所当然认为Web
Service是一个足够安全的环境。
为了避免这类漏洞存在，发往服务器的请求中必须包含令牌值或令牌信息（如用户名及密码信息）。
此外，与Web Service有关的所有函数都应该要求请求报文中包含用户会话信息。
**5.2.2 未限制函数使用范围**
Web Service中常见的一个问题就是不对函数的使用范围进行限制。这会导致以下问题存在：
1、暴力破解攻击
2、填充篡改数据库
3、滥用服务器赋予用户的权限
4、消耗服务器资源造成DDoS攻击
**5.3 Web Service中的业务逻辑漏洞**
此类漏洞的存在原因在于Web应用缺乏标准，每个开发人员所开发的Web应用各不相同。
因此，这是个漫长且无止境的话题。我们可以通过几个例子来稍加说明。
比如，我们来研究一下Twitter的RESTful Web Service中存在的漏洞（具体细节可以参考这个报告）。
某个用户删除了Twitter上的一条私信（Direct
Message，DM）。当他查看DM信息时，发现这条信息已不再存在。然而，通过Twitter提供的REST命令行接口，我们发现只要提供已删除DM的id，我们就可以读取这条DM信息，然而根据业务处理流程，这条DM此时并不应该存在。
Web Service中经常存在的另一类问题就是，在服务器的最终应答报文中，包含客户端先前请求报文中的某些信息，这种情况在手机或平板应用中经常存在。
开发者之所以将密码保存在设备本地中，就是希望用户在每次登录应用时，都向本地数据库发起查询，以避免因为网络原因导致登录失败。
BGA团队对移动或平板应用渗透测试时，发现某个服务器的密码重置功能在返回给客户端的响应报文中包含密码信息，且该密码会被存储在设备本地中。
我们对土耳其某个著名电子商务网站进行测试时，找到了移动和平板应用所使用的WSDL地址以及某个存在用户信息泄露的函数。通过该函数接口，客户端不仅能够获取目标用户的邮件地址，甚至还能在响应消息中找到用户的密码信息。利用这种漏洞，攻击者可以窃取任何已知用户的凭证。
这种敏感信息不应该在Web Service的应答报文中存在。有时候虽然攻击者无法从攻击网站中获取任何信息，他们却可以借助移动或平板应用中Web
Service漏洞，对整个系统造成危害。
**5.4 Web Service中的会话重放漏洞**
此类漏洞的存在原因在于攻击者对同一网络上的用户实施MITM（中间人）攻击，从拦截的数据中嗅探用户会话信息。
不安全的协议（比如基于HTTP的Web Service广播）中会存在此类漏洞。Web Service可以为每个用户提供一个会话ID（Session
ID，SID）来规避这种漏洞，另一种解决办法就是在允许用户登录的所有发往服务器的请求中都捎带用户会话信息。
对于没有使用SSL的Web Service，如果会话的SID值被网络中的其他人获取，则可能会受到会话重放攻击影响。
**5.5 Web Service中的SSRF漏洞**
SSRF（Server-Side Request
Forgery，服务端请求伪造）漏洞指的是攻击者通过在服务端创建伪造的请求，以间接方式执行那些无法从外部直接执行的操作。
例如，攻击者可以利用SSRF漏洞，探测服务器上某些无法从外部扫描发现的端口信息。此外，攻击者也可以利用SSRF漏洞读取服务器的本地文件、向另一台服务器发起DDoS攻击、发起DNS查询请求等。
以“https://github.com/snoopythesecuritydog/dvws/”为例，我们可以利用该地址中存在的XXE漏洞，向某些内部地址发起请求并对响应报文进行分析。
当我们点击下图中的“Print Greeting”按钮时，我们会收到服务器返回的一条信息。
通过BurpSuite，可以看到我们往服务器发送了一个带有XML数据的请求。
我们可以用XXE攻击载荷替换其中的XML数据，判断服务器网络中是否存在某台主机。
在如下的攻击载荷中，我们使用了“192.168.1.10”地址，服务器本地网络中并不存在使用该IP地址的主机。我们将攻击载荷发往存在SSRF漏洞的服务器。
    ]>&xxe;
因为无法访问此IP地址，服务器返回如下错误信息：
然而，如果我们将载荷中的IP修改为“192.168.1.2”，服务器不会返回任何错误页面，表明服务器可以访问该IP地址。
    ]>&xxe;
**5.6 Web Service中的拒绝服务（DoS）漏洞**
客户端发送的XML数据会由服务端的XML解析器进行解析和处理。目前有两类XML解析器，分别为基于SAX（Simple API for
XML）的XML解析器以及基于DOM（Document Object Model）的XML解析器。
基于SAX的解析器在工作时，内存中最多容纳2个元素。在这种情况下，基于SAX的解析器不会存在拒绝服务问题。
基于DOM的解析器会一次性读取客户端存储的所有XML数据。因此会导致内存中存在庞大的对象数据。这种情况下，我们难以避免拒绝服务器攻击。导致这种漏洞存在的原因在于我们没有检查XML中节点的大小和数量。
例如，攻击者可以使用如下载荷发起针对元素名称的攻击。
攻击者可以使用如下载荷发起针对元素属性的攻击。
攻击者可以使用如下载荷发起针对元素个数的攻击（也可以通过重复某个特定元素达到同样效果）。
当XXE攻击奏效时，也可以引发服务拒绝漏洞。
攻击者可以使用如下载荷发起DDoS攻击。
    ]>
    &bga6;
从载荷中可知，攻击者定义了一些XML实体，并在最后引用了bga6实体。bga6实体引用了6次bga5实体，同样，每个bga5实体也引用了6次bga4实体，以此类推。
当发往服务端的载荷中这类实体的数量和引用次数非常巨大时，服务端的XML解析器负载将大大提高，导致服务器在一段时间内无法响应客户端请求，最终达到拒绝服务攻击效果。