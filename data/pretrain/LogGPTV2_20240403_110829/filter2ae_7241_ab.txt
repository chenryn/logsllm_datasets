    import java.util.StringTokenizer;
    /**
     * Processes a cookie header and attempts to obfuscate any cookie values that
     * represent session IDs from other web applications. Since session cookie names
     * are configurable, as are session ID lengths, this filter is not expected to
     * be 100% effective.
     *
     * It is required that the examples web application is removed in security
     * conscious environments as documented in the Security How-To. This filter is
     * intended to reduce the impact of failing to follow that advice. A failure by
     * this filter to obfuscate a session ID or similar value is not a security
     * vulnerability. In such instances the vulnerability is the failure to remove
     * the examples web application.
     */
    public class CookieFilter {
        private static final String OBFUSCATED = "[obfuscated]";
        private CookieFilter() {
            // Hide default constructor
        }
        public static String filter(String cookieHeader, String sessionId) {
            StringBuilder sb = new StringBuilder(cookieHeader.length());
            // Cookie name value pairs are ';' separated.
            // Session IDs don't use ; in the value so don't worry about quoted
            // values that contain ;
            StringTokenizer st = new StringTokenizer(cookieHeader, ";");
            boolean first = true;
            while (st.hasMoreTokens()) {
                if (first) {
                    first = false;
                } else {
                    sb.append(';');
                }
                sb.append(filterNameValuePair(st.nextToken(), sessionId));
            }
            return sb.toString();
        }
        private static String filterNameValuePair(String input, String sessionId) {
            int i = input.indexOf('=');
            if (i == -1) {
                return input;
            }
            String name = input.substring(0, i);
            String value = input.substring(i + 1, input.length());
            return name + "=" + filter(name, value, sessionId);
        }
        public static String filter(String cookieName, String cookieValue, String sessionId) {
            if (cookieName.toLowerCase(Locale.ENGLISH).contains("jsessionid") &&
                    (sessionId == null || !cookieValue.contains(sessionId))) {
                cookieValue = OBFUSCATED;
            }
            return cookieValue;
        }
    }
### 2.2 idea
将项目导入idea，修改`Language level`为当前jdk版本，并把`catalina-home`文件夹标记为`Sources`、`test`
文件夹标记为`Tests`
确保jdk版本与环境一致
添加maven国内镜像
            alimaven
            central
            aliyun maven
            http://maven.aliyun.com/nexus/content/repositories/central/
            repo1
            central
            Human Readable Name for this Mirror.
            http://repo1.maven.org/maven2/
            repo2
            central
            Human Readable Name for this Mirror.
            http://repo2.maven.org/maven2/
创建项目执行入口
    org.apache.catalina.startup.Bootstrap
    -Dcatalina.home=catalina-home
    -Dcatalina.base=catalina-home
    -Djava.endorsed.dirs=catalina-home/endorsed
    -Djava.io.tmpdir=catalina-home/temp
    -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager
    -Djava.util.logging.config.file=catalina-home/conf/logging.properties
修改`org/apache/jasper/compiler/JDTCompiler.java`内容，有两处
修改`org.apache.catalina.startup.ContextConfig` 文件的 `configureStart()`方法，初始化 JSP
解析器的代码
    context.addServletContainerInitializer(new JasperInitializer(), null);
配置完成，启动项目，访问tomcat
    http://127.0.0.1:8080
## 三、过程分析
### 3.1 tomct连接器
tomcat中有connector和container两个核心组件，前者对外处理socket连接，后者对内加载和管理servlet，当用户发起请求时，connector收到请求并调用protocolhandler的processor组件解析应用层协议并生成request对象，adaptor再把生成的request对象传递到container做下一步处理
### 3.2 调试分析
url解析受位于`java/org/apache/catalina/connector/CoyoteAdapter`的`parsePathParameters()`和`normalize()`两个函数影响，打下断点，向`/123;456/../index.jsp`路径发起请求
#### 01 parsePathParameters
进入parsePathParameters函数，先判断url中是否含有`;`号，不存在时返回`-1`并且`return`，存在则向下继续执行代码，此时返回分号编号为4
    / 1 2 3 ; 4 5 6 / .  .  /  i  n  d  e  x  .  j  s  p
    0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
进入循环，将第二个斜杠后的数据与分号后、斜杠前的`pv`数据依次做覆盖操作，然后取前17位数得到处理后的数据`uriBC`，函数结束
    / 1 2 3 / .  .  /  i  n  d  e  x  .  j  s  p  .  j  s  p
    0 1 2 3 8 9 10 11 12 13 14 15 16 17 18 19 20
    1 2 3 4 5 6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21
#### 02 normalize
进入normalize函数，可以看到对`\`、`//`、`/./`、`/../`四种情况进行处理
  1. 将反斜杠替换为斜杠，`\ ==> /`
  1. 将双斜杠替换为单斜杠，`// ==> /`
  1. 去掉`/./`中的点
  1. 对`/../`进行跨目录操作
进入循环，每出现一个`/../`就向上层目录回溯一次，类似parsePathParameters函数处理分号的逻辑，将`/../`之后的数据与`/../`之前的数据做覆盖操作，然后取前10位数的到处理后的`uriBC`，函数结束
    / 1 2 3 / . . / i n  d  e  x  .  j  s  p
    0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
    / i n d e x . j s p d e x . j s p 
    1 2 3 4 5 6 7 8 9 10
### 3.3 小结
先parsePathParameters处理分号，再normalize处理斜杠、反斜杠、点
    //aaa;bbb/./../  ==> parsePathParameters()  ==> //aaa/./../
    //aaa/./../  ==> normalize()  ==> /
        -->  /aaa/./../
        -->  /aaa/../
        -->  /
normalize函数对参数进行了一次`decodedURI()`操作，所以支持传入url编码后数据，但parsePathParameters函数是直接传入参数，以下地址经过均可访问到主页：
    //
    /./
    /.;/
    /aaa/../
    /;aaa
    /aaa;bbb/../
    /aaa;bbb/.././
    /aaa/..;./
    /aaa;../..;/
    /.;/aaa/../
    /%2e;/
## 四、利用场景
### 4.1 绕过安全设备
某些安全设备存在白名单，对后缀为白名内的请求完全放行，如果服务器使用tomcat作为web容器，则可能存在安全设备绕过风险，如：
  1. 攻击者向服务器`/sql_vuln/id=1+and+1=1;favicon.ico`发起请求
  2. 安全设备收到请求，发现到后缀为`ico`，在白名单内不做检测并放行
  3. 服务器收到请求后对url解析，得到`/sql_vuln/id=1+and+1=1`
  4. 绕过安全设备，成功注入
### 4.2 绕过访问限制
当后端服务器通过用户当前请求路径来判断权限时，可能存在绕过风险，如：
  1. 攻击者使用a账户访问admin文件路径，`/;/admin`或`/aaa/../admin`
  2. 服务器通过路径来判断当前用户是否具备admin文件访问权限，此时`HttpServletRequest.getRequestURI()`取得的值是原生地址：即`/;/admin`，判断不等于`/admin`，可以访问
  3. tomcat对url解析，最终值为`/admin`，攻击者便成功访问`/admin`文件
案例：
  * Shiro 
  * 
  * 
  * 
  * 