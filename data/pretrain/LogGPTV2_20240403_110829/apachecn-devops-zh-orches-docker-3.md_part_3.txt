*   `--net`:此选项允许您设置容器的网络模式。它可以有四个值:
    *   `bridge`:这为 docker 桥上的容器创建了一个网络栈。
    *   `none`:不会为此容器创建网络栈。它将被完全隔离。
    *   `container:`:这使用了另一个容器的网络栈。
    *   `host` : This uses the host's network stack.
        ### 类型
        这些值有副作用，例如可以从容器访问本地系统服务。这个选项被认为是不安全的。
*   `--expose`:这个暴露容器的端口，不在主机上发布。
*   `--publish-all`:这个将所有暴露的端口发布到主机的接口。
*   `--publish`:这个以下面的格式向主机发布一个容器的港口:`ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort | containerPort`。
### 类型
如果没有给出`--dns`或`--dns-search`，那么容器的`/etc/resolv.conf`文件将与守护进程运行的主机的`/etc/resolv.conf`文件相同。
然而，当您运行`docker`守护进程时，也可以给它一些配置。它们被提及如下:
### 注
这些选项只能在启动`docker`守护程序时提供，一旦运行就不能调整。这意味着您必须提供这些参数以及`docker -d`命令。
*   `--ip`:这个选项允许我们在面向容器的`docker0`界面设置主机的 IP 地址。因此，这将是绑定容器端口时使用的默认 IP 地址。例如，该选项可以显示如下:
    ```
    $ docker -d --ip 172.16.42.1
    ```
*   `--ip-forward`: This is a `Boolean` option. If it is set to `false`, the host running the daemon will not forward the packets between containers or from the outside world to the container, completely isolating it (from a network perspective).
    ### 注
    可以使用`sysctl`命令检查该设置:
    ```
    $ sysctl net.ipv4.ip_forward
    net.ipv4.ip_forward = 1
    .
    ```
*   `--icc`: This is another `Boolean` option that stands for `inter-container communication`. If it is set to `false`, the containers will be isolated from each other, but will still be able to make general HTTP requests to package managers and so on.
    ### 注
    如何只在需要的两个容器之间实现通信？通过链接。我们将在*链接容器*部分详细探讨链接。
*   `-b or --bridge`:你可以让 Docker 用一个自定义的桥来代替`docker0`。(桥的创建不在本讨论范围内。不过，如果你好奇的话，可以在[上找到更多信息](http://docs.docker.com/articles/networking/#building-your-own-bridge)。)
*   `-H or --host`:这个选项可以接受多个参数。Docker 有一个 RESTful API。守护进程充当服务器，当你运行`run`和`ps`等客户端命令时，它会向服务器发出`GET`和`POST`请求，服务器执行必要的操作并返回响应。`-H`标志用于告诉`docker`守护程序它必须监听的客户端命令通道。论据可以如下:
    *   TCP 套接字，以`tcp://:`的形式表示
    *   `unix:///path/to/socket`形式的 UNIX 插座
## 配置容器和主机之间的端口转发
容器无需任何特殊配置即可与外界连接，但外界不允许窥视。这是一种安全措施，并且相当明显，因为容器都通过虚拟桥连接到主机，从而有效地将它们放置在虚拟网络中。但是如果你在一个你想对外公开的容器中运行一个服务会怎么样？
端口转发是公开在容器中运行的服务的最简单方法。在映像的摘要文件中提及需要暴露的端口总是明智的。在 Docker 的早期版本中，可以在 Dockerfile 本身中指定 Dockerfile 应该绑定到哪个主机端口，但这被放弃了，因为有时主机中已经运行的服务会干扰容器。现在，您仍然可以在 Dockerfile 中指定想要公开的端口(使用`EXPOSE`指令)，但是如果您想要将其绑定到您选择的端口，您需要在启动容器时这样做。
有两种方法可以启动容器并将其端口绑定到主机端口。解释如下:
*   `-P or --publish-all`:使用带有`-P`选项的`docker run`启动一个容器，将会发布使用映像的 Dockerfile 中的`EXPOSE`指令暴露的所有端口。Docker 将通过暴露的港口，并将其绑定到`49000`和`49900`之间的随机港口。
*   `-p or --publish`:这个选项可以让你明确告诉 Docker 上的哪个端口哪个 IP 应该绑定到一个容器上的一个端口(当然主机中的一个接口应该有这个 IP)。多次使用选项可以完成多个绑定:
    1.  `docker run -p ip:host_port:container_port`
    2.  `docker run -p ip::container_port`
    3.  `docker run -p host_port:container_port`
## 自定义 IP 地址范围
我们已经看到了如何将容器的端口绑定到主机的端口，如何配置容器的 DNS 设置，甚至如何设置主机的 IP 地址。但是如果我们想自己设置容器和主机之间的网络子网呢？Docker 在 RFC 1918 提供的一个可用私有 IP 地址范围内创建了一个虚拟子网。
设置自己的子网范围非常容易。`docker`守护程序的`--bip`选项可用于设置网桥的 IP 地址以及它将在其中创建容器的子网:
```
$ docker -d --bip 192.168.0.1/24
```
在这种情况下，我们已经将`192.168.0.1`的 IP 地址设置为`docker`守护进程，并提到它必须为子网范围`192.168.0.0/24`中的容器分配 IP 地址(即从`192.168.0.2`到`192.168.0.254`，总共 252 个可能的 IP 地址)。
就这样！在[https://docs.docker.com/articles/networking/](https://docs.docker.com/articles/networking/)有更高级的网络配置和示例。一定要去看看。
# 连接容器
将容器端口绑定到主机端口是完全可以的，如果你只是有一个普通的 web 服务器，你想公开给互联网。然而，大多数生产系统是由许多不断相互通信的独立组件组成的。诸如数据库服务器之类的组件不能绑定到公共可见的 IP，但是运行前端应用的容器仍然需要发现数据库容器并连接到它们。在应用中硬编码容器的 IP 地址既不是一个干净的解决方案，也行不通，因为 IP 地址是随机分配给容器的。那么我们如何解决这个问题呢？答案如下。
## 链接同一主机内的容器
使用`--link`选项启动容器时，可以指定链接:
```
$ docker run --link CONTAINER_IDENTIFIER:ALIAS . . .
```
这是如何工作的？当给出一个链接选项时，Docker 向容器的`/etc/hosts`文件添加一个条目，将`ALIAS`命令作为名为`CONTAINER_IDENTIFIER`的容器的主机名和 IP 地址。
### 注
`/etc/hosts`文件可以用来覆盖 DNS 定义，也就是说，将主机名指向某个 IP 地址。在主机名解析过程中，在向域名系统服务器发出请求之前，会检查`/etc/hosts` 。
例如，命令行代码如下所示:
```
$ docker run --name pg -d postgres
$ docker run --link pg:postgres postgres-app
```
前面的命令运行一个 PostgreSQL 服务器(其 Dockerfile 公开端口 5432，PostgeSQL 的默认端口)，第二个容器将使用`postgres`别名链接到它。
### 注
PostgreSQL 是一个完全符合 T2 的强大开源对象关系数据库系统。
## 使用大使容器的跨主机链接
当所有容器都在同一个主机内时，链接容器工作正常，但是 Docker 的容器可能经常分布在不同的主机上，在这些情况下链接失败，因为在不同主机上运行的容器的 IP 地址不被当前主机上运行的`docker`守护程序所知。此外，链接是静态的。这意味着，如果一个容器重新启动，它的 IP 地址会改变，所有链接到它的容器都将失去连接。一个便携的解决方案是使用大使容器。
下图显示了大使容器:
![Cross-host linking using ambassador containers](img/4787OS_03_02.jpg)
在这种体系结构中，一台主机中的数据库服务器暴露给另一台主机。这里也是，如果数据库容器发生变化，只需要重启`host1`阶段的大使容器。
### 用例——多主机 Redis 环境
让我们使用`progrium/ambassadord`命令设置一个多主机 Redis 环境。还有其他映像也可以用作大使容器。可以使用`docker search`命令或在[https://registry.hub.docker.com](https://registry.hub.docker.com)搜索它们。
### 注
Redis 是一个开源的、网络化的、内存中的、键值数据存储，具有可选的持久性。它以读写速度快而闻名。
在这个环境中，有两个主机，`Host` `1`和`Host` `2`。`Host` `1`的 IP 地址为`192.168.0.100`，为私有(不对外公开)。`Host` `2`位于 192.168.0.1，绑定到公共 IP。这是运行您的前端 web 应用的主机。
### 注
要尝试此示例，请启动两台虚拟机。如果你使用游民，我建议使用安装了 Docker 的 Ubuntu 镜像。如果你有游民 v1.5，可以通过运行`$ vagrant init phusion/ubuntu-14.04-amd64`来使用 Phusion 的 Ubuntu 镜像。
#### 主机 1
在第一台主机上，运行以下命令:
```
$ docker run -d --name redis --expose 6379 dockerfile/redis
```
该命令启动一个 Redis 服务器，并公开端口`6379`(这是 Redis 服务器运行的默认端口)，但不将其绑定到任何主机端口。
下面的命令启动一个大使容器，链接到 Redis 服务器，并将端口 6379 绑定到其专用网络 IP 地址的端口 6379(在本例中恰好是 192.168.0.100)。这仍然不是公共的，因为主机是私有的(不暴露给公共互联网):
```
$ docker run -d --name redis-ambassador-h1 \
 -p 192.168.0.100:6379:6379 --link redis:redis \
 progrium/ambassadord --links
```
#### 主机 2
在另一个主机(如果您在开发中使用的是 host，则是另一个虚拟机)中，运行以下命令:
```
$ docker run -d --name redis-ambassador-h2 --expose 6379 \
progrium/ambassadord 192.168.0.100:6379
```
这个大使容器监听目的 IP 的端口，在这个例子中是主机 1 的 IP 地址。我们已经公开了端口 6379，这样它就可以被我们的应用容器连接到:
```
$ docker run -d --name application-container \--link redis-ambassador-h2:redis myimage mycommand
```
这将是在互联网上向公众公开的容器。由于 Redis 服务器运行在私有主机上，因此无法从私有网络之外进行攻击。
# 总结
在本章中，我们看到了如何在 Docker 容器中调配资源，如 CPU、RAM 和存储。我们还讨论了如何使用卷和卷容器来管理容器中应用产生的持久数据。我们了解了 Docker 使用的交换存储驱动程序、各种网络配置及其相关用例。最后，我们看到了如何在主机内部和主机之间链接容器。
在下一章中，我们将看看当我们考虑使用 Docker 部署我们的应用时，哪些工具和方法会有所帮助。我们将关注的一些事情是多个服务的协调、服务发现和 Docker 的远程 API。我们还将介绍安全注意事项。