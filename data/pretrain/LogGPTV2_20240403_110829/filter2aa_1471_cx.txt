sp
ac
e
Description
Activ
e 
Direc
tory 
provi
der
d
s
p
r
o
v.
dl
l
ro
ot\
dir
ect
or
y\l
da
p
Maps Active Directory objects to WMI
Event 
Log 
provi
der
nt
e
vt
.d
ll
ro
ot\
ci
mv
2
Manages Windows event logs—for example, read, 
backup, clear, copy, delete, monitor, rename, 
compress, uncompress, and change event log settings
Perfo
rman
ce 
Coun
ter 
w
b
e
m
p
ro
ot\
ci
mv
2
Provides access to raw performance data
provi
der
er
f.
dl
l
Regis
try 
provi
der
st
d
p
r
o
v.
dl
l
ro
ot\
def
aul
t
Reads, writes, enumerates, monitors, creates, and 
deletes registry keys and values
Virtu
alizat
ion 
provi
der
v
m
m
s
p
r
o
x.
dl
l
ro
ot\
vir
tua
liz
ati
on\
v2
Provides access to virtualization services 
implemented in vmms.exe, like managing virtual 
machines in the host system and retrieving 
information of the host system peripherals from a 
guest VM
WD
M 
provi
der
w
m
ip
r
o
v.
dl
l
ro
ot\
w
mi
Provides access to information on WDM device 
drivers
Win3
2 
ci
m
ro
ot\
Provides information about the computer, disks, 
peripheral devices, files, folders, file systems, 
provi
der
w
in
3
2.
dl
l
ci
mv
2
networking components, operating system, printers, 
processes, security, services, shares, SAM users and 
groups, and more
Wind
ows 
Instal
ler 
provi
der
m
si
p
r
o
v.
dl
l
ro
ot\
ci
mv
2
Provides access to information about installed 
software
Ntevt.dll, the Event Log provider DLL, is a COM server, registered in the
HKLM\Software\Classes\CLSID registry key with the {F55C5B4C-517D-
11d1-AB57-00C04FD9159E} CLSID. (You can find it in the MOF
descriptor.) Directories beneath %SystemRoot%\System32\Wbem store the
repository, log files, and third-party MOF files. WMI implements the
repository—named the CIMOM object repository—using a proprietary
version of the Microsoft JET database engine. The database file, by default,
resides in SystemRoot%\System32\Wbem\Repository\.
WMI honors numerous registry settings that the service’s
HKLM\SOFTWARE\Microsoft\WBEM\CIMOM registry key stores, such as
thresholds and maximum values for certain parameters.
Device drivers use special interfaces to provide data to and accept
commands—called the WMI System Control commands—from WMI. These
interfaces are part of the WDM, which is explained in Chapter 6 of Part 1.
Because the interfaces are cross-platform, they fall under the \root\WMI
namespace.
WMI security
WMI implements security at the namespace level. If a management
application successfully connects to a namespace, the application can view
and access the properties of all the objects in that namespace. An
administrator can use the WMI Control application to control which users can
access a namespace. Internally, this security model is implemented by using
ACLs and Security Descriptors, part of the standard Windows security model
that implements Access Checks. (See Chapter 7 of Part 1 for more
information on access checks.)
To start the WMI Control application, open the Control Panel by typing
Computer Management in the Cortana search box. Next, open the Services
And Applications node. Right-click WMI Control and select Properties to
launch the WMI Control Properties dialog box, as shown in Figure 10-30. To
configure security for namespaces, click the Security tab, select the
namespace, and click Security. The other tabs in the WMI Control Properties
dialog box let you modify the performance and backup settings that the
registry stores.
Figure 10-30 The WMI Control Properties application and the Security tab
of the root\virtualization\v2 namespace.
Event Tracing for Windows (ETW)
Event Tracing for Windows (ETW) is the main facility that provides to
applications and kernel-mode drivers the ability to provide, consume, and
manage log and trace events. The events can be stored in a log file or in a
circular buffer, or they can be consumed in real time. They can be used for
debugging a driver, a framework like the .NET CLR, or an application and to
understand whether there could be potential performance issues. The ETW
facility is mainly implemented in the NT kernel, but an application can also
use private loggers, which do not transition to kernel-mode at all. An
application that uses ETW can be one of the following categories:
■    Controller A controller starts and stops event tracing sessions,
manages the size of the buffer pools, and enables providers so they
can log events to the session. Example controllers include Reliability
and Performance Monitor and XPerf from the Windows Performance
Toolkit (now part of the Windows Assessment and Deployment Kit,
available for download from https://docs.microsoft.com/en-
us/windows-hardware/get-started/adk-install).
■    Provider A provider is an application or a driver that contains event
tracing instrumentation. A provider registers with ETW a provider
GUID (globally unique identifiers), which defines the events it can
produce. After the registration, the provider can generate events,
which can be enabled or disabled by the controller application
through an associated trace session.
■    Consumer A consumer is an application that selects one or more
trace sessions for which it wants to read trace data. Consumers can
receive events stored in log files, in a circular buffer, or from sessions
that deliver events in real time.
It’s important to mention that in ETW, every provider, session, trait, and
provider’s group is represented by a GUID (more information about these
concepts are provided later in this chapter). Four different technologies used
for providing events are built on the top of ETW. They differ mainly in the
method in which they store and define events (there are other distinctions
though):
■    MOF (or classic) providers are the legacy ones, used especially by
WMI. MOF providers store the events descriptor in MOF classes so
that the consumer knows how to consume them.
■    WPP (Windows software trace processor) providers are used for
tracing the operations of an application or driver (they are an
extension of WMI event tracing) and use a TMF (trace message
format) file for allowing the consumer to decode trace events.
■    Manifest-based providers use an XML manifest file to define events
that can be decoded by the consumer.
■    TraceLogging providers, which, like WPP providers are used for fast
tracing the operation of an application of driver, use self-describing
events that contain all the required information for the consumption
by the controller.
When first installed, Windows already includes dozens of providers, which
are used by each component of the OS for logging diagnostics events and
performance traces. For example, Hyper-V has multiple providers, which
provide tracing events for the Hypervisor, Dynamic Memory, Vid driver, and
Virtualization stack. As shown in Figure 10-31, ETW is implemented in
different components:
■    Most of the ETW implementation (global session creation, provider
registration and enablement, main logger thread) resides in the NT
kernel.
■    The Host for SCM/SDDL/LSA Lookup APIs library (sechost.dll)
provides to applications the main user-mode APIs used for creating an
ETW session, enabling providers and consuming events. Sechost uses
services provided by Ntdll to invoke ETW in the NT kernel. Some
ETW user-mode APIs are implemented directly in Ntdll without
exposing the functionality to Sechost. Provider registration and events
generation are examples of user-mode functionalities that are
implemented in Ntdll (and not in Sechost).
■    The Event Trace Decode Helper Library (TDH.dll) implements
services available for consumers to decode ETW events.
■    The Eventing Consumption and Configuration library (WevtApi.dll)
implements the Windows Event Log APIs (also known as Evt APIs),
which are available to consumer applications for managing providers
and events on local and remote machines. Windows Event Log APIs
support XPath 1.0 or structured XML queries for parsing events
produced by an ETW session.
■    The Secure Kernel implements basic secure services able to interact
with ETW in the NT kernel that lives in VTL 0. This allows trustlets
and the Secure Kernel to use ETW for logging their own secure
events.
Figure 10-31 ETW architecture.
ETW initialization
The ETW initialization starts early in the NT kernel startup (for more details
on the NT kernel initialization, see Chapter 12). It is orchestrated by the
internal EtwInitialize function in three phases. The phase 0 of the NT kernel
initialization calls EtwInitialize to properly allocate and initialize the per-silo
ETW-specific data structure that stores the array of logger contexts
representing global ETW sessions (see the “ETW session” section later in
this chapter for more details). The maximum number of global sessions is
queried from the
HKLM\System\CurrentControlSet\Control\WMI\EtwMaxLoggers registry
value, which should be between 32 and 256, (64 is the default number in case
the registry value does not exist).
Later, in the NT kernel startup, the IoInitSystemPreDrivers routine of
phase 1 continues with the initialization of ETW, which performs the
following steps:
1. 
Acquires the system startup time and reference system time and
calculates the QPC frequency.
2. 
Initializes the ETW security key and reads the default session and
provider’s security descriptor.
3. 
Initializes the per-processor global tracing structures located in the
PRCB.
4. 
Creates the real-time ETW consumer object type (called
EtwConsumer), which is used to allow a user-mode real-time
consumer process to connect to the main ETW logger thread and the
ETW registration (internally called EtwRegistration) object type,
which allow a provider to be registered from a user-mode application.
5. 
Registers the ETW bugcheck callback, used to dump logger sessions
data in the bugcheck dump.
6. 
Initializes and starts the Global logger and Autologgers sessions,
based on the AutoLogger and GlobalLogger registry keys located
under the HKLM\System\CurrentControlSet\Control\WMI root key.
7. 
Uses the EtwRegister kernel API to register various NT kernel event
providers, like the Kernel Event Tracing, General Events provider,
Process, Network, Disk, File Name, IO, and Memory providers, and
so on.
8. 
Publishes the ETW initialized WNF state name to indicate that the
ETW subsystem is initialized.
9. 
Writes the SystemStart event to both the Global Trace logging and
General Events providers. The event, which is shown in Figure 10-32,
logs the approximate OS Startup time.
10. 
If required, loads the FileInfo driver, which provides supplemental
information on files I/O to Superfetch (more information on the
Proactive memory management is available in Chapter 5 of Part 1).
Figure 10-32 The SystemStart ETW event displayed by the Event Viewer.
In early boot phases, the Windows registry and I/O subsystems are still not
completely initialized. So ETW can’t directly write to the log files. Late in
the boot process, after the Session Manager (SMSS.exe) has correctly
initialized the software hive, the last phase of ETW initialization takes place.
The purpose of this phase is just to inform each already-registered global
ETW session that the file system is ready, so that they can flush out all the
events that are recorded in the ETW buffers to the log file.
ETW sessions
One of the most important entities of ETW is the Session (internally called
logger instance), which is a glue between providers and consumers. An event
tracing session records events from one or more providers that a controller
has enabled. A session usually contains all the information that describes
which events should be recorded by which providers and how the events
should be processed. For example, a session might be configured to accept all
events from the Microsoft-Windows-Hyper-V-Hypervisor provider (which is
internally identified using the {52fc89f8-995e-434c-a91e-199986449890}
GUID). The user can also configure filters. Each event generated by a
provider (or a provider group) can be filtered based on event level
(information, warning, error, or critical), event keyword, event ID, and other
characteristics. The session configuration can also define various other details
for the session, such as what time source should be used for the event
timestamps (for example, QPC, TSC, or system time), which events should
have stack traces captured, and so on. The session has the important rule to