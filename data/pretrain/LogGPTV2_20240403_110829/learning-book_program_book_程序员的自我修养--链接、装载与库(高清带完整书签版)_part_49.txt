---
## Page 276
9.1DLL简介
253
件，很明显“Math.dll”就是我们需要的DLL文件，“Math.obj”是编译的目标文件，“Math.exp”
和“Math.lib”将在后面作介绍。我们可以通过dumpbin工具看到DLL的导出符号：
dumpbin /BXPORTS Hath,d11
ordinal hint RVA
name
0 00001000 Add
1 00001020 Mu1
3
2 00001010 Sub
很明显，我们可以看到DLL有3个导出函数以及它们的相对地址。
9.1.6使用DLL
程序使用DLL的过程其实是引用DLL中的导出函数和符号的过程，即导入过程。对于
从其他DLL导入的符号，我们需要使用“_declspec（dllimport）”显式地声明某个符号为导
入符号。这与ELF中的情况不一样，在ELF中，当我们使用一个外部模块的符号的时候，
我们不需要额外声明该变量是从其他共享对象导入的。
我们来看一个使用Math.dll的例子：
/*TestMath.c */
include 
_declspec (dllinport) double Sub(double a, double b) :
int main (int argc, char **argv)
double resu1t = Sub(3.0. 2.0) ;
printf(*Result = f\n*, result) ;
return 0;
在编译时，我们通过下面的命令行：
link TestMath.oby Math.lib
c1/c TeatMath.c
第一行使用编译器将TestMath.c编译成TestMath.obj，然后使用链接器将TestMath.obj
和Math.lib链接在一起产生一个可执行文件TestMath.exe。整个过程如图9-1所示。
形成最终的可执行文件。在静态链接的时候，我们介绍过“Jib”文件是一组目标文件的集
合，在动态链接里面这一点仍然没有错，但是“Math.lib”里面的目标文件是什么呢？
程序员的自我修养一链接、装载与库
---
## Page 277
254
第9章Windows下的动态链接
水"代码，以便于将程序与DLL粘在一起。像“Math.lib"这样的文件又被称为导入库（Import
Library），我们在后面介绍导入导出表的时候还会再详细分析。
TestMathexe
图9-1MSVC静态库链接
9.1.7使用模块定义文件
声明DLL中的某个函数为导出函数的办法有两种，一种就是前面我们演示过的使用
"_declspec（dllexport）”扩展：另外一种就是采用模块定义（.def）文件声明。实际上.def
文件在MSVC链接过程中的作用与链接脚本文件（Link Script）文件在Id链接过程中的作
用类似，它是用于控制链接过程，为链接器提供有关链接程序的导出符号、属性以及其他信
息。不过相比于ld的链接脚本文件，.def文件的语法要简单的多，而且功能也更少。
假设我们在前面例子的Math.c中将所有的“_declspec（dlexport)”去掉，然后创建一个
Math.def文件，以下面作为内容：
LIBRARY Kath
Add
EXPORTS
Sub
Mu1
Div
然后使用下面的命令行来编译Math.c：
cl Math.c/LD /DEP Math.def
这样编译器（更准确地讲是link链接器）就会使用Math.def文件中的插述产生最终输
程序员的自我修养一链接、装载与库
---
## Page 278
9.1DLL 简介
255
出文件。那么使用.def文件来描述DLL文件的导出属性有什么好处呢？
首先，我们可以控制导出符号的符号名。很多时候，编译器会对源程序里面的符号进行
修饰，比如C++程序里面的符号经过编译器的修饰以后，都变得面目全非，这一点我们在本
书的前面已经领教过了，除了C++程序以外，C语言的符号也有可能被修饰，比如MSVC
）
详细介绍各种函数调用规范之间的区别），默认情况下MSVC把C语言的函数当作“_cdecl”
类型，这种情况下它对该函数不进行任何符号修饰，但是一旦我们使用其他的函数调用规范
时，MSVC编译器就会对符号名进行修饰，比如使用“_stdcall调用规范的函数Add就会
占堆栈空间的大小.使用.der文件可以将导出函数重新命名，比如当Add 函数采用"_stdcall"
时，我们可以使用如下的def文件：
LIBRARY Kath
Add=_Add916
EXPORTS
Sub
Mu1
Di v
当我们使用这个.def文件来生产Math.dll 时，可以看到：
c1/LD /DEF Math.def Math.c
dumpbin /EXPORrs Math.d11
ordinal hint RVA
nane
000001000 Add
ATC 0E0T0000 1
4
2 00001020 Mu1
5
4 00001000 _Add916
3 00001010 Sub
2
Add作为一个与_Add@16等价的导出函数被放到了Math.dl的导出函数列表中，实际
上有些类似于“别名”。当一个DLL被多个语言编写的模块使用时，采用这种方法导出一个
函数往往会很有用。比如微软的 Visual Basic采用的是“_stdcall的函数调用规范，实际
上“_stdcall”调用规范也是大多数Windows下的编程语言所支持的通用调用规范，那么作
为一个能够被广泛使用的DLL最好采用“_sdcall”的函数调用规范。而MSVC默认采用
的是“_cdecl”调用规范，否则它就会使用符号修饰，经过修饰的符号不便于维护和使用，
于是采用.def文件对导出符号进行重命名就是一个很好的方案。我们经常看到Windows 的
的宏。微软以 DLL 的形式提供 Windows 的API，面每个 DLL中的导出函数又以这种
“_stdcall”的方式被声明。但是我们可以看到，Windows 的 API 中从来没有_Add@16 这
程序员的自我修养——链接、装载与库
---
## Page 279
256
第9章Windows下的动态链接
种古怪的命名方式，可见它也是采用了这种导出函数重命名的方法。
与ld的链接控制脚本类似，使用.def文件的另外一个优势是它可以控制一些链接的过
程。在微软提供的文档中，除了前面例子中用到的“LIBRARY”、“EXPORTS”等关键字以
为，还可以发现.def支持一些诸如“HEAPSIZE”、“NAME”、“SECTIONS”、“STACKSIZE”、
“VERSION”等关键字，通过这些关键字可以控制输出文件的默认堆大小、输出文件名、
各个段的属性、默认堆栈大小、版本号等。具体请参照MSDN中关于.def文件的介绍，我
们这里就不详细展开了。
9.1.8DLL显式运行时链接
与ELF类似，DLL也支持运行时链接，即运行时加载。Windows 提供了3个API为：
·LoadLibrary（或者LoadLibraryEx），这个函数用来装载一个DLL到进程的地址空间，
它的功能跟dlopen类似。
·GetProcAddress，用来查找某个符号的地址，与dlsym类似。
·FreeLibrary，用来卸载某个已加载的模块，与dlclose类似。
我们来看看Windows下的显式运行时链接的例子；
#include 
include 
typedef double (*Punc) (double, double);
int main(int argc, char **argv)
Fune function;
double result;
/ / Load DLL
if (hinstLib == NULL) {
printf(*ERROR: unable to load DLL\n*);
return 1;
function = (Func)GetProcAddress (hinstLib, *Add*) ;
// Get function address
if(function ss NULL)(
printf(*ERROR: unable to find DLL function\n*);
PreeLibrary (hinstLib) :
return 1;
// Call function.
result - function(1.0, 2.0):
程序员的自我修养一链接、装载与库
---
## Page 280
9.2符号导出导入表
257
// Unload DLL file
FreeLibrary (hinstLib) :
// Display result
printf(*Result = f\n*, result):
return 0;
9.2
符号导出导入表
9.2.1导出表
当一个PE需要将一些函数或变量提供给其他PE文件使用时，我们把这种行为叫做符
号导出（SymbolExporting），最典型的情况就是一个DLL将符号导出给EXE文件使用。
在前面介绍ELF动态连接时，我们已经接触过了符号导出的概念，ELF将导出的符号保存
在“.dynsym”段中，供动态链接器查找和使用。在Windows PE中，符号导出的概念也是
类似，所有导出的符号被集中存放在了被称作导出表（ExportTable）的结构中。事实上导
出表从最简单的结构上来看，它提供了一个符号名与符号地址的映射关系，即可以通过某个
符号查找相应的地址。基本上这些每个符号都是-个ASCI字符串，我们知道符号名可能
跟相应的函数名或者变量名相同，也可能不同，因为有符号修饰这个机制存在。
注
很多时候，在讨论到PE的导入导出时，经常把函数和符号混淆在一起，因为PE在绝大
量
部分时候只导入导出函数，而很少导入导出变量，所以类似于导出符号和导出函数这种
叫法很多时候可以相互替换使用。
我们在前面介绍过，PE文件头中有一个叫做DataDirectory的结构数组，这个数组共有
的地址和长度，导出表是一个IMAGE_EXPORT_DIRECTORY的结构体，它被定义在
"Winnt.h” 中：
typedef struCt _IMAGE_EXPORT_DIRECTORY (
DWORD
Characteristics;
DWORD
TimeDateStanp;
WORD
WORD
MajorVersion;
DWORD
MinorVersion;
DWORD
Ba8e
Name:
DWORD
NumberOfFunct ion8;
DWORD
AddressOfFunctions1
NumberOfNames;
DWORD
// RVA from base of image
DWORD
AddressOfNames;
// RVA from base of image
// RVA from base of image
DWORD
AddressOfNameOrdinals;
1IMAGE_EXPORT_DIRECTORY
程序员的自我修养一—链接、装载与库
---
## Page 281
258
第9章Windows下的动态随接
导出表结构中，最后的3个成员指向的是3个数组，这3个数组是导出表中最重要的结
构，它们是导出地址表（EAT，ExportAddressTable）、符号名表（Name Table）和名字序号
对应表（Name-Ordinal Table）。对于“Math.dll”来说，这个导出表的结构将会如图9-2所示。
Characteristics
Name
“Math.dll'
Base = 1
NumberOfFunctions= 3
NumberOINames = 3
100010201010
AddressOfFunctions
AddressOfNames
AddMuSub
AddressOINameOrdinals
23
Export Table of Math.dll
图9-2Math.dll 导出表结构
这3个数组中，前两个比较好理释。第一个叫做导出地址表EAT，它存放的是各个导
出函数的RVA，比如第一项是0x1000.它是Add函数的RVA：第二个表是函数名表，它保
存的是导出函数的名字，这个表中，所有的函数名是按照ASCII顺序排序的，以使于动态
链接器在查找函数名字时可以速度更快（可以使用二分法查找），那么函数名表和EAT之间
有什么关系呢？是不是一一对应呢？在上面的例子中似乎是这样的，比如Add对应0x1000，
Mul 对应 0x1020，Sub对应0x1010，这样看起来很简单，但实际上并非如此，因为还有一
个叫做序号的概念夹在这两个表之间：第三个名字序号对应表就有点另类了，导出一个函数
序号（Ordinals）
这还得从很早以前说起，早期的 Windows是16位的，当时的16位Windows 没有很好
的虚拟内存机制，而且当时的硬件条件也不好，内存一般只有几个MB。而函数名表对于当
时的 Windows来说，其实是很奢侈的。比如一个 user.dll有600多个导出函数。如果把这些
函数的函数名表全部故在内存中的话，将会消耗儿十KB的空间。除了uscr.dll之外，程序
还会用到其他DLL，对于内存空间以KB计的年代来说，这是不可以容忍的。于是当时DLL
的函数导出的主要方式是序号（Ordinals）。其实序号的概念很简单，一个导出函数的序号
就是函数在EAT中的地址下标加上一个Base值（也就是IMAGE_EXPORT_DIRECTORY中
的Base，默认情况下它的值是1)。比如上面的例子中，Mul的RVA为0x1020，它在EAT
程序员的自我修养一链接、装载与库
---
## Page 282
9.2符号导出导入表