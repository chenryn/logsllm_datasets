malicious inline scripts, which would then execute as
part of the privileged core extension page.
Implications
5.4
The isolated worlds mechanism is so effective at protect-
ing content scripts from websites that privilege separa-
tion is rarely needed. As such, privilege separation is
used to address a threat that almost does not exist, at
the cost of increasing the complexity and performance
overhead of extensions. (Privilege separation requires an
extra process for each extension, and communication be-
tween content scripts and core extensions is IPC.) We
ﬁnd that network attackers are the real threat to core ex-
tension security, but privilege separation does not miti-
gate or prevent these attacks. This shows that although
privilege separation can be a powerful security mecha-
nism [23], its placement within an overall system is an
important determining factor of its usefulness.
Our study also has implications for the use of privi-
lege separation in other contexts. All Chrome extension
developers are required to privilege separate their exten-
sions, which allows us to evaluate how well developers
who are not security experts use privilege separation. We
ﬁnd that privilege separation would be fairly effective at
preventing web attacks in the absence of isolated worlds:
privilege separation would fully protect 62% of core ex-
tensions. However, in more than a third of extensions,
developers created message passing channels that allow
low-privilege code to exploit high-privilege code. This
demonstrates that forcing developers to privilege sepa-
rate their software will improve security in most cases,
but a signiﬁcant fraction of developers will accidentally
or intentionally negate the beneﬁts of privilege separa-
tion. Mandatory privilege separation could be a valuable
line of defense for another platform, but it should not be
relied on as the only security mechanism; it should be
coupled with other lines of defense.
6 Evaluation of the Permission System
The Chrome permission system is intended to reduce
the severity of core extension vulnerabilities. If a web-
site or network attacker were to successfully inject mali-
cious code into a core extension, the severity of the at-
tack would be limited by the extension’s permissions.
However, permissions will not mitigate vulnerabilities
in extensions that request many dangerous permissions.
We evaluate the extent to which permissions mitigate the
core extension vulnerabilities that we found.
Table 5 lists the permissions that the vulnerable ex-
tensions request. Ideally, each permission should be re-
quested infrequently. We ﬁnd that 70% of vulnerable ex-
tensions request the tabs permission; an attacker with
access to the tabs API can collect a user’s browsing his-
tory or redirect pages that a user views. Fewer than half
of extensions request each of the other permissions.
Permissions
tabs (browsing history)
all HTTP domains
all HTTPS domains
speciﬁc domains
notiﬁcations
bookmarks
no permissions
cookies
geolocation
context menus
unlimited storage
Times Requested
Percentage
19
12
12
10
5
4
4
3
1
1
1
70%
44%
44%
37%
19%
15%
15%
11%
4%
4%
4%
Table 5: The permissions that are requested by the 27
extensions with core extension vulnerabilities.
Figure 2: The 27 extensions with core vulnerabilities,
categorized by the severity of their worst vulnerabilities.
To summarize the impact of permissions on extension
vulnerabilities, we categorized all of the vulnerabilities
by attack severity. We based our categorization on the
Firefox Security Severity Ratings [1], which has been
previously used to classify extension privileges [4]:
• Critical: Leaks the permission to run arbitrary code
on the user’s system
• High: Leaks permissions for the DOM of all
HTTP(S) websites
• Medium: Leaks permissions for private user data
(e.g., history) or the DOM of speciﬁc websites that
contain ﬁnancial or important personal data (e.g.,
https://*.google.com/*)
• Low: Leaks permissions for the DOM of spe-
ciﬁc websites that do not contain sensitive data
(e.g., http://*.espncricinfo.com) or permis-
sions that can be used to annoy the user (e.g., ﬁll up
storage or make notiﬁcations)
• None: Does not leak any permissions
We did not ﬁnd any critically-vulnerable extensions.
This is a consequence of our extension selection method-
ology: we did not review any extensions with binary plu-
gins, which are needed to obtain critical privileges.
Figure 2 categorizes the 27 vulnerable extensions by
their most severe vulnerabilities. In the absence of a per-
mission system, all of the vulnerabilities would give an
attacker access to all of the browser’s privileges (i.e., crit-
ical privileges). With the permission system, less than
half of the vulnerable extensions yield access to high-
severity permissions. As such, our study demonstrates
that the permission system successfully limits the sever-
ity of most vulnerabilities.
We hypothesized that permissions would positively
correlate with vulnerabilities. Past work has shown that
many extensions are over-permissioned [12, 14], and we
thought that developers who are unwilling to follow se-
curity best practices (e.g., use HTTPS) would be unwill-
ing to take the time to specify the correct set of permis-
sions. This would result in vulnerable extensions re-
questing dangerous permissions at a higher rate. How-
ever, we do not ﬁnd any evidence of a positive correlation
between vulnerabilities and permissions. The 27 exten-
sions with core vulnerabilities requested permissions at
a lower rate than the other 73 extensions, although the
difference was not statistically signiﬁcant. Our results
show that developers of vulnerable extensions can use
permissions well enough to reduce the privileges of their
insecure extensions, even though they lack the expertise
or motivation required to secure their extensions.
Permissions are not only used by the Google Chrome
extension system. Android implements a similar permis-
sion system, and future HTML5 device APIs will likely
be guarded with permissions. Although it has been as-
sumed that permissions mitigate vulnerabilities [10, 12,
14], our study is the ﬁrst to evaluate whether this is true
for real-world vulnerabilities or measure quantitatively
how much it helps mitigate these vulnerabilities in prac-
tice. Our ﬁndings indicate that permissions can have a
signiﬁcant positive impact on system security and are
worth including in a new platform as a second line of
defense against attacks. However, they are not effective
enough to be relied on as the only defense mechanism.
7 Defenses
Despite Google Chrome’s security architecture, our se-
curity review identiﬁed 70 vulnerabilities in 40 exten-
sions. Based on the nature of these vulnerabilities, we
propose and evaluate four additional defenses. The de-
fenses are bans on unsafe coding practices that lead to
vulnerabilities. We advocate mandatory bans on unsafe
coding practices because many developers do not fol-
low security best practices when they are optional (Sec-
tion 3.3). We quantify the security beneﬁts and com-
patibility costs of each of these defenses to determine
whether they should be adopted. Our main ﬁnding is that
a combination of banning HTTP scripts and banning in-
line scripts would prevent 94% of the core extension vul-
nerabilities, with only a small amount of developer effort
to maintain full functionality in most cases.
None15%Low11%Medium30%High44%In concurrent work, Google Chrome implemented
Content Security Policy (CSP) for extensions. CSP can
be used to enforce all four of these defenses. Initially,
the use of CSP was wholly optional for developers. As
of Chrome 18, extensions that take advantage of new fea-
tures will be subject to a mandatory policy; this change
was partially motivated by our study [5].
7.1 Banning HTTP Scripts
Scripts fetched over HTTP are responsible for half of the
vulnerabilities that we found. All of these vulnerabili-
ties could be prevented by not allowing extensions to add
HTTP scripts to their core extensions [15] or to HTTPS
websites. Extensions that currently violate this restric-
tion could be easily modiﬁed to comply by packaging the
script with the extension or using a HTTPS URL. Only
vulnerable extensions would be affected by the ban be-
cause any extension that uses HTTP scripts will be vul-
nerable to man-in-the-middle attacks.
Core Extension Vulnerabilities. Banning HTTP scripts
from core extensions would remove 28 core extension
vulnerabilities (56% of the total core extension vulner-
abilities) from 15 extensions. These 15 extensions load
HTTP scripts from 13 domains, 10 of which already offer
the same script over HTTPS. The remaining 3 scripts are
static ﬁles that could be downloaded once and packaged
with the extensions.
Website Vulnerabilities. Preventing extensions from
adding HTTP scripts to HTTPS websites would re-
move 8 website vulnerabilities from 8 extensions (46%
of the total website vulnerabilities). These vulnerabili-
ties allow a network attacker to circumvent the protec-
tion that HTTPS provides for websites. The extensions
load HTTP scripts from 7 domains, 3 of which offer an
HTTPS option. The remaining 4 scripts are static scripts
that could be packaged with the extensions.
7.2 Banning Inline Scripts
Untrusted data should not be added to pages as
HTML because it can contain inline scripts (e.g., in-
line event handlers, links with embedded JavaScript, and
 tags). For example, untrusted data could
contain an image tag with an inline event handler:
. We ﬁnd that 40%
of the core extension vulnerabilities are caused by adding
untrusted data to pages as HTML. These vulnerabilities
could be prevented by not allowing any inline scripts to
execute: the untrusted data will still be present as HTML,
but it would be static. JavaScript will only run on a page
if it is in a separate .js ﬁle that is stored locally or loaded
from a trusted server that the developer has whitelisted.
Banning inline scripts from extension HTML would
eliminate 20 vulnerabilities from 15 extensions. All of
these vulnerabilities are core extension vulnerabilities.
Content script vulnerabilities cannot be caused by inline
scripts, and we cannot prevent extensions from adding
inline scripts to HTTPS websites because existing en-
forcement mechanisms cannot differentiate between a
website’s own inline scripts and extension-added scripts.
However, banning inline scripts has costs. Developers
use legitimate inline scripts for several reasons, such as
to deﬁne event handlers. In order to maintain function-
ality despite the ban, all extensions would need to delete
their inline scripts from HTML and move them to sepa-
rate .js ﬁles. Inline event handlers (e.g., onclick) can-
not simply be copied and pasted; they need to be rewrit-
ten as programmatically using the DOM API.
We reviewed the 100 extensions to determine what
changes would be needed to comply with a ban on in-
line scripts. Applying this ban breaks 79% of the exten-
sions. However, all of the extensions could be retroﬁtted
to work without inline scripts without signiﬁcant changes
to the extension. Most of the compatibility costs pertain
to moving the extensions’ inline event handlers. The ex-
tensions contain an average of 7 event handlers, with a
maximum of 98 and a minimum of 0 event handlers.
7.3 Banning Eval
Dynamic code generation converts strings to code, and
its use can lead to vulnerabilities if the strings are un-
trusted data. Disallowing the use of dynamic code gen-
eration (e.g., eval and setTimeout) would eliminate
three vulnerabilities: one core extension vulnerability,
and two vulnerabilities that are both content script and
core extension vulnerabilities.
We reviewed the 100 extensions and ﬁnd that dynamic
code generation is primarily used in three ways:
1. Developers
static
strings
sometimes pass
to
setTimeout instead of functions. This coding pat-
tern cannot be exploited. It would be easy to alter
instances of this coding pattern to comply with a
ban on dynamic code generation; the strings simply
need to be replaced with equivalent functions.
2. Some developers use eval on data instead of
JSON.parse. We identiﬁed one vulnerability that
was caused by this practice. In the absence of dy-
namic code generation, developers could simply use
the recommended JSON.parse.
3. Two extensions use eval to run user-speciﬁed
scripts that extend the extensions.
In both cases,
their error is that they fetch the extra scripts over
HTTP instead of HTTPS. For these two extensions,
a ban on eval would prevent the vulnerabilities but
irreparably break core features of the extensions.
Restriction
No HTTP scripts in core
No HTTP scripts on HTTPS websites
No inline scripts
No eval
No HTTP XHRs
All of the above
No HTTP scripts and no inline scripts
Chrome 18 policy
Security
Beneﬁt
15%
8%
15%
3%
17%
35%
32%
27%
Broken,
But Fixable
Broken And
Unﬁxable
15%
8%
79%
30%
29%
86%
80%
85%
0%
0%
0%
2%
14%
16%
0%
2%
Richards et al. present additional uses of eval in a large-
scale study of web applications [24].
Table 6: The percentage of the 100 extensions that would be affected by the restrictions. The “Security Beneﬁt”
column shows the number of extensions that would be ﬁxed by the corresponding restriction.
7.5 Recommendations
Table 6 summarizes the beneﬁts and costs of the de-
fenses. If the set of 100 extensions were subject to all
four bans, only 5 vulnerable extensions would remain,
and 16 extensions would be permanently broken. Based
on this evaluation, we conclude:
We ﬁnd that 32 extensions would be broken by a ban
on dynamic code generation. Most instances can easily
be replaced, but 2 extensions would be permanently bro-
ken. Overall, a ban on eval would ﬁx three vulnerabili-
ties at the cost of fundamentally breaking two extensions.
• We strongly recommend banning HTTP scripts and
inline scripts; together, they would prevent 47 of the
50 core extension vulnerabilities, and no extension
would be permanently broken. The developer effort
required to comply with these restrictions is modest.
• Banning eval would have a neutral effect: neither
the security beneﬁts nor the costs are large. Conse-
quently, we advise against banning eval.
• We do not recommend banning HTTP XHRs, given
the number of extensions that would be permanently
disabled by the ban. Of the 20 vulnerabilities that
the ban on HTTP XHRs would prevent, 70% could
also be prevented by banning inline scripts. We do
not feel that the ban on HTTP XHRs adds enough
value to justify breaking 14% of extensions.
Starting with Chrome 18, extensions will be subject to
a CSP that enforces some of these bans [13]. Our study
partially motivated their decision to adopt the bans [5],
although the policy that they adopted is slightly stricter
than our recommendations. The mandatory policy in
Chrome 18 will ban HTTP scripts in core extensions, in-
line scripts, and dynamic code generation. Due to tech-
nical limitations, they are not adopting a ban on adding
HTTP scripts to HTTPS websites. The policy will re-
move all of the core extension vulnerabilities that we
found. The only extensions that the policy will perma-
nently break are the two extensions that rely on eval.
7.4 Banning HTTP XHR
Network attacks can occur
if untrusted data from
an HTTP XMLHttpRequest is allowed to ﬂow to a
JavaScript execution sink. 30% of the 70 vulnerabilities
are caused by allowing data from HTTP XHRs to exe-
cute. One potential defense is to disallow HTTP XHRs;
all XHRs would have to use HTTPS. This ban would re-
move vulnerabilities from 17 extensions.
However, banning HTTP XHRs would have a high
compatibility cost. The only way to comply with an
HTTPS-only XHR policy is to ensure that the server sup-
ports HTTPS; unlike scripts, remote data cannot be pack-
aged with extensions. Developers who do not control
the servers that their extensions interact with will not be
able to adapt their extensions. Extension developers who