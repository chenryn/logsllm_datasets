    PUT _template/test
    {
      "template": "i*",
      "settings": {
        "analysis": {
          "analyzer": {
            "custom": {
              "type": "custom",
              "tokenizer": "keyword"
            }
          }
        }
      }
    }
    PUT /_template/test1
    {
      "template": "index*",
      "mappings": {
        "type": {
          "properties": {
            "message": {
              "type": "text",
              "analyzer": "custom"
            }
          }
        }
      }
    }
The first template, which can be thought of as the parent template, defines
something that is used by the second template: a custom analyzer. The template
validator appears to only consider the template as a standalone one, which
means that the analyzer does not exist, thus returning:
    {
      "error": {
        "root_cause": [
          {
            "type": "mapper_parsing_exception",
            "reason": "analyzer [custom] not found for field [message]"
          }
        ],
        "type": "mapper_parsing_exception",
        "reason": "Failed to parse mapping [type]: analyzer [custom] not found for field [message]",
        "caused_by": {
          "type": "mapper_parsing_exception",
          "reason": "analyzer [custom] not found for field [message]"
        }
      },
      "status": 400
    }
The template validation should combine matching templates like normal index
creation works, which would to ensure that the _entire_ chain is valid or
invalid.
**Workaround**
There is a workaround, which is to manually apply necessary pieces to the sub-
template (e.g., duplicating the analyzer in it, which will be only appear once
in the resulting index).