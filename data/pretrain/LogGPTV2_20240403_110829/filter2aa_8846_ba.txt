它会执行一系列旨在摧毁连接到西门子控制器离心机的动作。震网标志
恶意代码世界里的两个主要演变：使用蠕虫对设施造成严重的物理损坏，
以及在国家之间的战争中使用恶意代码。
18、间谍软件（Spyware）会监控你的动作，并且向暗中监视你活动的远
程系统传送重要的细节。例如，将你的银行用户名和密码传送给间谍软
件的创作者。
19、广告软件（adware）与间谍软件极为相似，只是具有不同的目的。
广告软件使用多种技术在被感染的计算机上显示广告。最恶毒的广告软
件可能会监控你的购物行为并将你重定向至竞争者的 Web	站点。
20、注意：广告软件和恶意软件的作者通常利用流行的Web	浏览器第三
方插件来传播，他们发现插件已经具有强大的用户基础，这些插件被授
予权限在他们的浏览器内运行和或获取他们的信息。然后他们用原始插
件代码补充恶意代码。
21、反病毒：至少要在三个关键区域考虑反病毒是非常明智的：客户端、
服务器、内容过滤器（是指对入站和出站以及web流量进行内容过滤）
22、大多数反病毒软件都是特征型过滤器，所以，从病毒出现到能够发
现有一个延迟。针对这个问题，有两种常用的解决方案：
1.使用完整性检查软件（如Tripwire）扫᧿文件系统中意外的更改并定
期报告。
2.应当严格地维护和实施访问控制，从而限制恶意代码破坏数据和在网
络上传播的能力。
23、下列三种额外的技术能够防止受到活动内容内嵌的恶意代码的感染：
Java沙箱技术：为 applet	ᨀ供了一个隔离的环境，在这个环境中，
applet	不需要访问关键的系统资源就能够安全地运行。
ActiveX	控件签名技术：利用数字签名来确保代码的来源可信。
操作系统级别的应用程序白名单：要求管理员指定批准的应用程序。仅
允许已知的良好应用程序运行。
24、零日漏洞最大的问题是：厂商出补丁慢、用户打补丁慢。
25、口令攻击：口令猜测、字典攻击。口令猜测表中815个口令中有300
个名字，其中70%是女性的名字。字典攻击有很多工具：JohntheRipper、
Cain&	Abel、Ophcrack、Brutus、THC	Hydra、L0phtCrack、Pwdump 和
RainbowCrack。每个工具都有专门的不同的操作系统和密码类型。
26、攻击者用John	the	Ripper把字典文件每个词汇都加密，然后在密码文
件中查找与加密字典相匹配的加密值。查找到某个匹配时，John	the	
Ripper程序会报告用户名和密码（明文形式）。
27、社会工程学：攻击者常常可以通过与计算机用户、办公室中的饶舌
者和行政管理人员的“闲谈”获得敏感的个人信息。此外，攻击者有时
可以获得敏感的网络拓扑图或配置数据。
28、过分热心的管理员最常见错误是建立一系列强密码，并且将它们分
发给用户（并且禁止用户改变这个密码！），这是一个听起来十分安全
的策略。然而，用户在收到像 lmfOA8ft这样的密码时，他们将要做的第
一件事是将密码写在便签上并将其粘贴在计算机键盘的下面。这下可好！
29、很多版本的Unix和Linux都使用影子密码文件/etc/shadow.	这个文件包
含每个用户的实际加密密码，但是除了管理员外，任何人都不能访问这
个文件。公共可访问的文件/etc/passwd只是包含用户名的列表，它并不
包含发起字典攻击所需的必要数据。
30、防止缓冲区溢出漏洞：用户输入的值的长度不能超过任何存放它的
缓冲区的大小；不能输入类型无效的值（例如，将一个字符输入到一个
数字型变量中）；不能超出参数范围（例如，用“也许”来回答结果只
能为“是”或“否的问题）。绝大多数缓冲区溢出漏洞都通过补丁来缓
解，软件供应商或操作系统供应商ᨀ供。
31、TOCTOU是时间性漏洞，是指计算机系统的资料与权限等状态的检查
与使用之间，因为某特定状态在这段时间已改变所产生的软件漏洞。不
要在check和Use之间留太多时间，避免你检查时他是有效的，但在他真
正使用的时候，他的权限是不对的。比如在这个时间中，他的权限被管
理员修改了，或者攻击者把自己的ID改成这个ID。这本质上是一种race	
condition问题，Check就是赋权的时候，用户被赋权后，有可能发生了变
化，Use时已经突破了预期的权限。
32、后门：后门是没有被记录到文档中的命令和接口，本来是在开发和
调试过程中，方便程序开发人员调试用的。但在生产中仍然留下后门，
一是可以在故障时方便排错，二是偷看敏感数据。除了开发商做的后门，
许多恶意代码创建后门，允许远程访问受感染的系统。如果后门未被记
录到文档中，就很麻烦！因为开发人员可能会离开公司，那么他们就可
以利用后门访问系统或搞破坏。
33、攻击者权限ᨀ升：最常见方法之一是通过使用 rootkit。rootkit	可以
从互联网上免费获得，能够利用各种操作系统的已知漏洞。攻击者经常
通过使用密码攻击或社会工程学攻击获得普通的系统用户账号，然后使
用 rootkit	将他们的访问权限ᨀ高到 root（或系统管理员）级别。所以
要经常打补丁。
34、跨站脚本（XSS）的原理：当 Web	应用程序包含“反射”式输入类
型时，就容易出现跨站脚本（XSS）攻击。例如Web	应用程序只包含一个
请求输入name的文本框，然后返回页面“Hello,	name’，如果攻击者输入
下面的文本:Mike。XSS 攻击的关键在于能
够将表单输入嵌入一个链接。恶意攻击者可以创建一个链接，他也确实
是First	Bank	Web的站点，也能通过有效的SSL认证，但这个站点随后会执
行恶意攻击者在表单输入中嵌入的脚本。
34、XSS最典型的一个场景：通过XSS脚本让用户点击，然后让用户把自
己的cookie，以及其中的sessionID发给攻击者的服务器，然后攻击者就可
以获取受害者会话了。持久性XSS通常是存储在数据库或其他任何地方
（如论坛、留言板、意见簿等），攻击者的论坛帖子中有恶意JavaScript
脚本，其他用户浏览这些帖子时，它们的浏览器会执行攻击者的
JavaScript。
35、防御跨站脚本攻击：必须执行输入验证。最基本的做法是：一定不
允许用户在可反射输入字段中输入标记。这种做法并不能完全
解决问题，总有一些巧妙的方法来绕过。最佳的解决方案应当是：首先
确定许可的输入类型，然后通过验证实际输入来确保其与指定模式匹配。
例如，一个允许用户输入年龄的文本框，那么应当只接受一到三位数字
作为输入。
36、SQL注入攻击：比如一段业务逻辑在后台是：SELECT	*	FROM	
transactions	WHERE	account_	number	=	'		‘，是客户在
Web	表单中输入的账户号码。如果应用程序并不执行输入验证，用户完
全可以插入自己的SQL代码。
例如用户的账户号码为 145249,	那么可以输入下面的语句：
145249';	DELETE	*	FROM	transactions	WHERE	'a'='a	
应用程序组合起来后，删掉了所有记录！
37、SQL注入防御方法：输入验证；限制用户特权；使用存储过程。
限制用户特权：Web服务器使用的数据库账户应当具有尽可能最小的
权限集。如果账户只具有SELECT权限，那么DELETE命令就会失败。
使用存储过程：使用存储过程，SQL语句驻留在数据库服务器上并且仅
仅可由数据库管理员修改。调用存储过程的 Web	应用程序可以传递参数，
但不改变 SQL	语句的基本结构。
38、侦查攻击（Reconnaissance	attck）：IP探测、端口扫᧿、漏洞扫᧿。
Nmap 工具是一个用来对 IP	和端口进行扫᧿的最常见工具，漏洞扫᧿有
许多比较流行的工具，包括 Nessus、OpenVAS、Qualys、Core	Impact 和
Nexpose。
39、垃圾搜寻（dumpster	diving）：文件不要轻易扔进垃圾箱，比如，特
殊部门员工的生日列表可能被用于社工攻击；随便丢弃的U盘可能有重要
数据；著名的社会工程师Kevin	Mitnick曾经被允许使用公司的简报作为攻
击的关键组件。他很快注意到包含新员工列表的部分，并且意识到这些
人是最合适的受害者：这些新员工在接到来自“高层”对机密信息的电
话请求时都会十分热情。
40、针对垃圾搜索的防御：为主要部门购买碎纸机。将垃圾保存在一个
安全的地方，直到收拾垃圾的人到来。这些小细节的培养需要经历漫长
的过程。
41、伪装攻击（Masquerading	attack）：主要有：IP欺骗、会话劫持。
42、你会惊奇地发现 IP	欺骗非常有效。系统管理员应该在每个网络边界
进行过滤，至少符合下列标准：
具有内部源 IP	地址的包不能从外部进入网络。
具有外部源 IP	地址的包不能从内部离开网络。
具有私有 IP	地址的包不能从任何一个方向通过路由器（除非被允许作
为内部配置的一部分）。
这三条简单的过滤规则能阻止绝大多数的 IP	欺骗攻击并大大ᨀ高网络
的安全性。
43、会话劫持攻击：攻击者中途拦截已授权用户与资源之间通信数据的
一部分，然后使用劫持技术接管这个会话并伪装成已授权用户的身份。
下面列出了一些常见的技术：
1.捕获受害者客户端与服务器之间身份认证的详细信息，并使用这些信
息伪装成客户端的身份；
2.中间人攻击:在客户端与服务器建立合法连接时作为中间人，然后断
开服务器与客户端的连接
3.使用没有正常关闭连接的用户的 cookie	数据访问 Web	应用程序。
防御：使用防重放身份认证技术、应用程序控制措施（如在一段适当
的时间内使 cookie	数据过期）。
结 束！
卫剑钒	2018.12.16
软件保证成熟度模型
 将软件的安全融入到软件开发过程的指导手册
 版本－1.0
 2
欲获得最新版本和其他信息，请访问项目网页 http://www.opensamm.org
鸣谢
软件保证成熟度模型（SAMM）最初是由独立软件安全顾问：Pravir Chandra
（PI:EMAIL）开创、设计、并编写的。该文档初稿的创作由Fortify软件公司赞助。
该文档目前由Pravir Chandra所领导的OpenSAMM项目进行维护和更新。自SAMM最初版
本的发布以来，这个项目已成为开放Web应用安全项目（OWASP）的一部分。另外，感谢
那些列举在封底上给予我们支持的组织。
贡献者和审核者
如果没有那么多的审核人员和专家所给予的支持以及重要的反馈，这项工作就不会完
成。他们是（以姓的英文首字母排序）：
Fabio Arciniegas Brian Chess Matteo Meucci John Steven
Matt Bartoldus Dinis Cruz Jeff Payne Chad Thunberg
Sebastien Deleersnyder Justin Derry Gunnar Peterson Colin Watson
Jonathan Carter Bart De Win Jeff Piper Jeff Williams
Darren Challey James McGovern Andy Steingruebl
该中文版本参与人员
翻译及审核:王颉
（因笔者水平有限，欢迎大家指出存在的翻译错误。在以后发布的正式版本中，将修正指出
的错误。）
该中文版发布说明
本文档为“Software Assurance Maturity Model (Version 1.0)”的中文Alpha版发布。该版
本尽量提供原英文版本中的图片，并与原版本尽量保持相同的风格。存在的差异，尽情谅解。
这是一个OWASP的项目
开放Web应用安全项目（OWASP）是一个致力于改善应用软件安全的自由和开放的全
球性社区。我们的任务是使应用程序的安全能够“看得见”，所以使人和机构可以针对应用安
全的风险作出明智的决策。每个人都可以免费加入OWASP，我们所有的材料都基于免费和
开放的软件许可证。OWASP基金会是一家501（c）3非营利的慈善机构，以确保持续的可
用性和支持我们的工作。在线访问OWASP的网站http://www.owasp.org。
 许可证
本文档的发布基于Creative Commons Attribution ShareAlike3.0许可
证。欲查看该许可证，请访问
http://creativecommons.org/licenses/by-sa/3.0/ 或将信件寄往
Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105,
USA。
3
执行摘要
软件保证成熟度模型（SAMM）是一个开放的框架，用以帮助组织制定并实