the parameter setting). Moreover, we assume that the time cost
of generating one PoR proof and evaluating one hash function
is much smaller than t (thus, it can essentially be ignored),
and our construction guarantees that the largest time interval
between two PoRs is less than t(cid:48) + 2δT ≤ t.
The PoSt works as follows:
•
PoSt.Kg(λ, t, T ): Use PoR.Kg to generate a PoR
public-private key pair (PoR.pk, PoR.sk). t(cid:48) is the
largest number of ITM steps such that t(cid:48) ≤ t − 2δT
and k = T /t(cid:48) is an integer. Use VDF.Setup (λ, t(cid:48)) to
generate the public parameter VDF.pp for VDF where
the time cost is at least t(cid:48). The public key pk of PoSt
is (PoR.pk, VDF.pp, T, k) and the secret key sk is
PoR.sk.
PoSt.Store(pk, sk, D): Take a secret key sk and a
ﬁle D ∈ {0, 1}∗ as input. Use PoR.Store to process
D and output D∗ and a tag tg = PoR.tg.
PoSt .V = (PoSt.Vcha, PoSt.Vvalid):
◦
◦
PoSt.Vcha(pk, tg): Use PoR.Vcha to generate
a challenge c0 and set its timer to 0.
PoSt.Vvalid(pk, tg, c0, p): When the PoSt proof
p is received from the prover, PoSt.Vvalid ﬁrst
check the current timer T (cid:48). If the timer T (cid:48) is
smaller than T or larger than (1 + δ)T , output
reject, otherwise run Algorithm 2 with input
p, tag tg and processed data D∗ and release its
output. Intuitively, the veriﬁer needs to check
all hash evaluations, all PoR proofs, and all
VDF evaluations.
PoSt.P(pk, tg, D∗, c0): Deﬁned as Algorithm 1. In-
tuitively, the prover sequentially computes PoR in-
stances where the next PoR challenge is generated
from the previous PoR proofs via hash functions and
VDF.
1) Correctness: Note that the ﬁnal PoSt proof procedure
includes k VDF evaluations where k = T /t(cid:48). Since we assume
8
Algorithm 1 The PoSt prove algorithm PoSt.P
Require: The initial challenge c0, the stored data D∗, the
public key pk = (POR.pk, VDF.pp, k, T ) and the tag
tg = PoR.tg
Ensure: The PoSt proof p
1: for i = 0 to k − 1 do
2:
3:
4:
PoR proof.
vi ← PoR.P (ci, D∗, PoR.pk, PoR.tg) // Generate a
ui = G(vi)
(di, πi) ← VDF.Eval(ui, VDF.pp)
ci+1 = H(di)
// Compute VDF
while generate its proof.
7: p =(cid:0){ci, vi}k
5:
6: vk ← PoR.P(ck, D∗, PoR.pk, PoR.tg)
8: return p
i=0,{ui, πi, di}k−1
(cid:1)
i=0
(cid:1)
Algorithm 2 PoSt Veriﬁcation Algorithm
Require: The PoSt proof p,
the public key pk =
1: parse p as(cid:0){ci, vi}k
(POR.pk, VDF.pp), and the tag tg = (PoR.tg, k, T )
i=0
Ensure: The veriﬁcation result b
2: for i = 0 to k − 1 do
3:
4:
5:
i=0,{ui, πi, di}k−1
if ui (cid:54)= G(vi) then return reject
if ci (cid:54)= H(di) then return reject
if 0 ← PoR.Vvalid(PoR.pk, PoR.tg, ci, vi)
then re-
if 0 ← VDF.Verify(VDF.pp, di, ui, πi) then return
turn reject
6:
7: if 0 ← PoR.Vvalid(PoR.pk, PoR.tg, ck, vk) then
8:
9: else
10:
return reject
return accept
reject
that the time spent evaluating one VDF (with δ-evaluation
time) is shorter than (1 + δ)t(cid:48), and the time cost for PoRs and
evaluating hash is comparatively negligible, the total time for
an honest prover to generate a PoSt proof is less than (1+δ)T .
Hence the correctness of our PoSt directly follows from those
of the PoR and the VDF schemes.
2) Soundness: Our goal is to prove that the largest time
interval between two PoRs is less than t. Therefore, for an
admissible prover, any successive conﬁgurations of any time
epoch with length t must contain at least one PoR. Ideally,
one can use the PoR extractor to recover the data from the
partial conﬁgurations and the transition function. However,
one problem is that since the strategy of a malicious prover
cannot be predicted,
the extractor access
each PoR’s challenge and response. To solve this problem,
our soundness proof fully exploits the unpredictability of the
random oracle. Speciﬁcally, since an admissible prover must
inevitably query the random oracle, the challenge and response
for each PoR can be located via querying the random oracle
G and H respectively, hence we can extract the data via the
PoR extractor.
is hard to let
it
Theorem 1: PoR is a stateless PoR scheme with -
soundness and unpredictability. VDF is a VDF scheme with
δ-evaluation time. The time cost of PoR and evaluating a hash
9
function is negligible w.r.t. t. The time cost of s0 sequential
steps on the server processor is t(cid:48). If t(cid:48) + 2δT  t(cid:48)+2δT chosen by PoSt.Extr1 must contain at least
one interval [Ti, Ri) for some i. This is because T1, . . . , Tk−1
divides the whole execution time of PoR.Extr into k slots
whose lengths are all shorter than t. So any epoch with length
t must contain some Ti. Since t > t(cid:48) + 2δT , the epoch must
contain either Ti−1 or Ri, otherwise the length of the interval
[Ti−1, Ri) is longer than t. So either the interval [Ti−1, Ri−1)
or [Ti, Ri) is contained in this epoch.
Next we prove the above claims one by one.
Claim 1). We show that each di−1 must be ﬁrstly queried to
the random oracle H before di. We prove it by contradiction.
If not, PoSt.P(cid:48) must be able to either generate the PoR
challenge ci before di−1, which violates the unpredictability of
the random oracle H; or generate the PoR response vi before
ci, which violates the unpredictability of PoR; or generate the
VDF input ui before vi, which violates the unpredictability of
the random oracle G; or generate the VDF output di before
ui, which violates the sequentiality of VDF.
Claim 2). We prove that the length of each time slot [Ti, Ti+1)
is longer than t(cid:48). By the unpredictability of the random oracle,
the output of the VDF di must be generated before the time
point Ti+1. On the other hand, the PoR response vi must be
generated via the PoR on the challenge ci after the time point
Ti. Therefore, a VDF function must be evaluated within the
time slot [Ti, Ti+1). According to the sequentiality of VDF,
the length of [Ti, Ti+1) must be longer than t(cid:48).
Claim 3). We prove that the length of each time slot [Ti, Ti+1)
is shorter than t(cid:48) + δT . Let us denote the execution time of
PoSt.P(cid:48) as T (cid:48). By the correctness of the veriﬁcation algorithm,
T (cid:48)  t(cid:48) + 2δT . Here T , t and t(cid:48) are all measured by the unit
steps of a Turing machine, which corresponds to the CPU
clock. See Section VI-B for more detailed discussions.
The compact PoSt scheme is as follows.
•
cPoSt.Kg(λ, t, T ): Invoke PoR.Kg(λ) to generate a
PoR key pair PoR.pk and PoR.sk. Also generate
a secret key SE.sk for symmetric encryption via
SKg(λ). Choose t(cid:48) as the largest number of ITM
steps such that t(cid:48) < t − 2δT and k = T /t(cid:48) is an
integer. Run TDF.Setup(λ, s0) to generate the TDF’s
public parameter TDF.pp and trapdoor TDF.tr where
the time cost on the server processor is t(cid:48). The public
key pk = (PoR.pk, TDF.pp, T, k), while the secret
key sk = (PoR.sk, SE.sk, TDF.tr).
cPoSt.Store(pk, sk, l, D): Take as input the public
key pk, the secret key sk, the expected storage time
T , the bounded number l and a ﬁle D ∈ {0, 1}∗,
then run Algorithm 3 to generate the encoded ﬁle D∗
and the tag tg. Intuitively, the data owner sequentially
computes PoR instances where the next PoR challenge
•
10
•