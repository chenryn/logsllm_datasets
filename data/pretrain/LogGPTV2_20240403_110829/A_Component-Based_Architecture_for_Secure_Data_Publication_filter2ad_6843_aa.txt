# A Component-Based Architecture for Secure Data Publication

## Authors
- Piero A. Bonatti<sup>1</sup>
- Ernesto Damiani<sup>1</sup>
- Sabrina De Capitani di Vimercati<sup>2</sup>
- Pierangela Samarati<sup>1</sup>

### Affiliations
- <sup>1</sup> Dipartimento di Tecnologie dell’Informazione, Università degli Studi di Milano, Via Bramante 65, 2601 Crema - Italy
- <sup>2</sup> Dipartimento di Elettronica per l’Automazione, Università degli Studi di Brescia, Via Branze 38, 25123 Brescia - Italy

### Contact
- Email: {bonatti, damiani, samarati}@dti.unimi.it

## Abstract
This paper introduces an approach for controlling access to data publishers within the context of Web-based information services. We present a model for enforcing access control regulations, an XML core schema and namespace for expressing such regulations, and the architecture of an Access Control Unit (ACU), an autonomous software component based on the proposed model. The ACU supports both standard authorizations and those based on user profiles and dynamic conditions, such as the acceptance of written agreements and/or payment.

## 1. Introduction
Many financial, industrial, and banking operations worldwide use the World Wide Web to distribute structured or semi-structured data, available for download and/or remote analysis and graphical representation. This Web-based interchange of information is critical for data producers in both private and public sectors, including government agencies and research institutions. Historically, each data producer made their own data available for external release. Today, innovative Web-based information services are being developed where producers leverage the mediation of information brokers, known as data publishers, which collect and distribute data from various sources.

For example, a data producer might make a survey available under the condition that it can only be accessed for research purposes or by academic institutions. Additional protection requirements, such as privacy or legal regulations specific to the country of operation, may also be specified by the data publisher. This layered scenario presents new challenges for access control systems, including:

- **Interchangeable Policy Format**: Data producers need to specify protection requirements using a format that is both human- and machine-readable, easy to inspect and interchange.
- **Interactive Enforcement**: Traditional access control operates in two phases: evaluation and enforcement. In Web-based services, enforcement often requires more than a simple yes or no decision. It should support interactive evaluation of access restrictions, such as the acceptance of written agreements and online payments.
- **Metadata Support**: Semi-structured metadata formats are increasingly important for Web-based services and can be used to provide access control by selectively releasing data based on metadata conditions.
- **Scalability**: Access control systems must be scalable to handle growing user communities. This requires clean separation of enforcement functionality from storage and publishing systems, and easy integration into various server environments.

Several approaches have been proposed to address these challenges, but our model, developed within the EU-funded FASTER project, aims to cover the need for enriched functionalities in the context of Web-based data dissemination. Our model supports access rules that reference properties of the requester or the data, and dynamic conditions that can be satisfied at runtime through user interaction. The model is expressed via an XML Schema and namespace, aligning with ongoing standardization efforts for XML-based access control languages.

## 2. Elements of the Access Control Model
Developing an access control model requires defining the entities to be protected (authorization objects), the entities against which access must be controlled (authorization subjects), and the operations that subjects can request on objects (actions).

### 2.1 Objects: Datasets and Metadata
In our model, authorization objects include both datasets and metadata. Datasets can be any type of data units, such as tagged documents, reports, or tables, collected from data publishers for distribution. They can be organized into groups, reflecting file system organization and/or common characteristics. These groups form a partial order, introducing a natural hierarchy. Figure 1 illustrates an example of a dataset hierarchy (DH) and a metadata hierarchy (MDH).

**Figure 1. An example of dataset (DH) and metadata (MDH) hierarchies**

Besides actual datasets, data publishers maintain collections of metadata, which provide additional information about datasets. Metadata can be in the form of textual or semi-structured documents, such as XML or DDI. While no explicit hierarchy is defined for metadata, the dataset hierarchy implicitly defines a metadata hierarchy (MDH). A bijective function META() associates a dataset (or group) with its metadata (or group of metadata).

For metadata browsing and evaluating access conditions, we allow referencing finer-grained content at the level of properties. For example, a protection requirement can state that a subject can access all datasets produced in the current year, where the production year is a property in the metadata. Properties are referenced using path expressions, such as XPath.

**Figure 2. An example of a portion of an XML metadata document**

### 2.2 Actions
Both datasets and their metadata can be accessed via different actions, which can be grouped into classes. Flexibility in expressing and enforcing authorizations on these actions is a key requirement. Possible action classes include:

- **Browse Metadata**: Users can navigate through metadata to choose datasets.
- **Analyze Online**: Includes predefined data analysis operations, such as graphic representation.
- **Download Data**: Allows users to save datasets locally for offline analysis.

Further abstractions can be defined to specialize actions or group them into sets, such as an "Access" set that includes all three classes.

This paper extends our previous work by considering "dynamic conditions" and presenting an XML-based language for expressing protection requirements. We also describe a component-based approach to designing and developing an Access Control Unit (ACU) based on the proposed model.