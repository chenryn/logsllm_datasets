### 4. Configuring Tomcat Users

1. Open the `tomcat-users.xml` file located in `[TOMCAT_HOME]\conf\`.
2. Add the following configuration under the root element to define a role and a user for Tomcatâ€™s default file-based user store:

```xml
<role rolename="myRole"/>
<user username="myUser" password="myPassword" roles="myRole"/>
```

### 5. Invoking the API with cURL

To invoke the API, use the following cURL command. The `--digest -u username:password` option generates the password in digest mode and adds it to the HTTP request. Replace `username:password` with the appropriate values:

```sh
curl -k -v --digest -u username:password https://localhost:8443/recipe
```

---

## Appendix F: Basic/Digest Authentication

### Overview

This section discusses the basics of Basic and Digest authentication in the context of securing APIs.

---

## Appendix G: OAuth 2.0 MAC Token Profile

### Introduction

The OAuth 2.0 core specification does not mandate any specific token type, allowing for extensions such as the Bearer Token Profile and the Message Authentication Code (MAC) Token Profile. The Bearer Token Profile is widely used and documented in RFC 6750. Eran Hammer, who led the development of the OAuth 1.0 and 2.0 specifications, introduced the MAC Token Profile. However, its adoption has been slow, primarily due to the working group's focus on bearer tokens.

### OAuth 2.0 and the Road to Hell

Eran Hammer, the lead editor of the OAuth 2.0 specification, resigned from the IETF working group in July 2012, citing concerns about the protocol's direction. In his blog post titled "OAuth 2.0 and the Road to Hell," he criticized OAuth 2.0 for being overly complex and less secure compared to OAuth 1.0. Hammer's main concerns were:

- **Unbounded Tokens**: In OAuth 1.0, clients had to present both token and client credentials. In OAuth 2.0, this requirement was removed, making tokens less secure.
- **Bearer Tokens**: OAuth 2.0 relies solely on TLS for security, eliminating signatures and cryptography at the protocol level.
- **Expiring Tokens**: OAuth 2.0 introduces token expiration, requiring clients to manage token state.
- **Grant Types**: OAuth 2.0 adds more specialized grant types, increasing complexity.

Despite these criticisms, OAuth 2.0 has become the de facto standard for API security, and its extensibility has proven valuable.

### Bearer Token vs. MAC Token

- **Bearer Tokens**: These are like cash; whoever possesses the token can use it. They do not require proof of ownership, making them vulnerable if stolen.
- **MAC Tokens**: These are similar to credit cards, requiring a signature (or MAC) for each use. This provides an additional layer of security, as the token secret is never transmitted over the wire.

### Obtaining a MAC Token

The OAuth 2.0 flows for obtaining a MAC token are similar to those for other token types. The key difference is the inclusion of the `audience` parameter in the token request.

#### Example: Authorization Code Grant

1. Redirect the resource owner to the authorization server:
   ```sh
   https://authz.server.com/oauth2/authorize?response_type=code&client_id=0rhQErXIX49svVYoXJGt0DWBuFca&redirect_uri=https%3A%2F%2Fmycallback
   ```

2. Exchange the authorization code for a MAC token:
   ```sh
   curl -v -X POST --basic \
       -u 0rhQErXIX49svVYoXJGt0DWBuFca:eYOFkL756W8usQaVNgCNkz9C2D0a \
       -H "Content-Type: application/x-www-form-urlencoded;charset=UTF-8" \
       -k -d "grant_type=authorization_code&code=9142d4cad58c66d0a5edfad8952192&redirect_uri=https://mycallback&audience=https://resource-server-URI" \
       https://authz.server.com/oauth2/token
   ```

   The response includes the MAC token and related parameters:
   ```json
   {
       "access_token": "eyJhbGciOiJSU0ExXzUiLCJlbmMiOiJBM",
       "token_type": "mac",
       "expires_in": 3600,
       "refresh_token": "8xLOxBtZp8",
       "kid": "22BIjxU93h/IgwEb4zCRu5WF37s=",
       "mac_key": "adijq39jdlaska9asud",
       "mac_algorithm": "hmac-sha-256"
   }
   ```

### OAuth 2.0 Audience Information

The `audience` parameter identifies the intended audience of the access token. This ensures that the token is valid only for specific resource servers. The parameter is included in the access token request and must be validated by the resource server.

### Invoking an API Protected with the OAuth 2.0 MAC Token Profile

Before invoking a protected API, the client must construct an authenticator, which is added to the HTTP `Authorization` header. The authenticator is constructed using the following parameters:

- **kid**: Key identifier from the authorization response.
- **ts**: Timestamp in milliseconds since January 1, 1970.
- **seq-nr**: Initial sequence number for message exchange.
- **access_token**: Value of the access token.
- **mac**: Value of the MAC for the request.
- **h**: Colon-separated header fields used to calculate the MAC.
- **cb**: Channel binding (e.g., `tls-unique:9382c93673d814579ed1610d3`).

#### Example Request

```http
GET /patient?name=peter&id=10909 HTTP/1.1
Host: medicare.com
Authorization: MAC kid="22BIjxU93h/IgwEb4zCRu5WF37s=", ts="1336363200", seq-nr="12323", access_token="eyJhbGciOiJSU0ExXzUiLCJlbmMiOiJBM", mac="bhCQXTVyfj5cmA9uKkPFx1zeOXM=", h="host", cb="tls-unique:9382c93673d814579ed1610d3"
```

### Calculating the MAC

The MAC is calculated using HMAC-SHA1 or HMAC-SHA256. The input string for the MAC calculation includes the HTTP request line, timestamp, sequence number, and concatenated header fields.

#### Example Calculation

- **HMAC-SHA1**:
  ```sh
  mac = HMAC-SHA1(mac_key, input-string)
  ```
- **HMAC-SHA256**:
  ```sh
  mac = HMAC-SHA256(mac_key, input-string)
  ```

For an API invocation request, the `input-string` is the HTTP request line, timestamp, sequence number, and concatenated header fields.

### HTTP Request-Line

The HTTP Request-Line is defined in Section 5 of the HTTP RFC, available at [www.w3.org](http://www.w3.org).

---

This revised text aims to provide a clear, coherent, and professional overview of the topics discussed.