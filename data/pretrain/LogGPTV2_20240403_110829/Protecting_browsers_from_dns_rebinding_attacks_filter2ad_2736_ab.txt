• Internet Explorer 7 pins DNS bindings for 30 minutes.1
Unfortunately, if the attacker’s domain has multiple A
records and the current server becomes unavailable,
the browser will try a diﬀerent IP address within one
second.
• Internet Explorer 6 also pins DNS bindings for 30 min-
utes, but an attacker can cause the browser to release
its pin after one second by forcing a connection to the
current IP address to fail, for example by including the
element .
1The duration is set by the registry keys DnsCacheTimeout
and ServerInfoTimeOut in
HKEY CURRENT USER\SOFTWARE\Microsoft Windows\
CurrentVersion\Internet Settings
• Firefox 1.5 and 2 cache DNS entries for between 60 and
120 seconds. DNS entries expire when the value of the
current minute increments twice. 2 Using JavaScript,
the attacker can read the user’s clock and compute
when the pin will expire. Using multiple A records, an
attacker can further reduce this time to one second.
• Opera 9 behaves similarly to Internet Explorer 6. In
our experiments, we found that it pins for approxi-
mately 12 minutes but can be tricked into releasing its
pin after 4 seconds by connecting to a closed port.
• Safari 2 pins DNS bindings for one second. Because
the pinning time is so low, the attacker may need to
send a “Connection: close” HTTP header to ensure
that the browser does not re-use the existing TCP con-
nection to the attacker.
Flash 9. The Flash 9 plug-in permits Flash movies to open
TCP sockets to arbitrary hosts, provided the destination
serves an XML policy authorizing the movie’s origin [2].
According to Adobe, Flash 9 is installed on 55.8% of web
browsers (as of December 2006) [1]; according to our own
experiments, Flash 9 was present in 86.9% of browsers. The
Flash plug-in is vulnerable to the following rebinding attack:
1. The client’s web browser visits a malicious web site
that embeds a Flash movie.
2. The Flash movie opens a socket on a port less than
1024 to attacker.com, bound to the attacker’s IP ad-
dress. Flash sends .
3. The attacker responds with the following XML:
4. The Flash movie opens a socket to an arbitrary port
number on attacker.com, which the attacker has re-
bound to the target’s IP address.
The policy XML provided by the attacker in step 3 in-
structs the Flash plug-in to permit arbitrary socket access
to attacker.com. The Flash plug-in permits the socket con-
nections to the target because it does not pin host names to
a single IP address. If the attacker were to serve the policy
ﬁle from a port number ≥ 1024, the Flash plug-in would
authorize only ports ≥ 1024.
3.2 Multi-Pin Vulnerabilities
Current browsers use several plug-ins to render web pages,
many of which permit direct socket access back to their ori-
gins. Another class of rebinding attacks exploit the fact
that these multiple technologies maintain separate DNS pin
databases. If one technology pins to the attacker’s IP ad-
dress and another pins to the target’s IP address, the at-
tacker can make use of inter-technology communication to
circumvent the same-origin restrictions on network access.
Some of these attacks have been discussed previously in the
full-disclosure community [4].
Java. Java, installed on 87.6%3 of web browsers [1], can also
open TCP connections back to their origins. The Java Vir-
tual Machine (JVM) maintains DNS pins separately from
the browser, opening up the possibility of DNS rebinding
vulnerabilities. Java applets themselves are not vulnerable
because the JVM retrieves applets directly from the net-
work, permitting the JVM to pin the origin of the applet to
the correct IP address. Java is vulnerable, however, to the
following attacks.
• LiveConnect bridges JavaScript and the JVM in Fire-
fox and Opera, permitting script access to the Java
standard library, including the Socket class, without
loading an applet. The browser pins to the attacker’s
IP address, but the JVM spawned by LiveConnect
does a second DNS resolve and pins to the target’s
IP address. The attacker’s JavaScript can exploit this
pin mismatch to open and communicate on a socket
from the client machine to an arbitrary IP address on
an arbitrary destination port, including UDP sockets
with a source port number ≥ 1024.
• Applets with Proxies are also vulnerable to a multi-
pin attack, regardless of which browser the client uses.
If the client uses an HTTP proxy to access the web,
there is yet another DNS resolver involved—the proxy.
When the JVM retrieves an applet via a proxy, it re-
quests the applet by host name, not by IP address.
If the applet opens a socket, the JVM does a second
DNS resolve and pins to the target’s IP address.
• Relative Paths can cause multi-pin vulnerabilities. If
a server hosts an HTML page that embeds an applet
using a relative path with the parameter mayscript
set to true, that machine can be the target of a multi-
pin attack. The browser pins to the target, retrieves
the HTML page, and instructs the JVM to load the
applet. The JVM does a second DNS resolve, pins
to the attacker, and retrieves a malicious applet. The
applet instructs the browser, via JavaScript, to issue
XMLHttpRequests to the target’s IP address.
Flash. Flash would still be vulnerable to multi-pin attacks
even if it pinned DNS bindings. The Flash plug-in does not
retrieve its movies directly from the network. Instead, the
browser downloads the movie and spawns Flash, transfer-
ring the movie’s origin by host name. When the attacker’s
movie attempts to open a socket, Flash does a second DNS
resolution and would pin to the target’s IP address. The
URLLoader class is not vulnerable to multi-pin attacks be-
cause it uses the browser to request the URL and thus uses
the browser’s DNS pins, but the Socket class could still be
used to read and write on arbitrary TCP sockets.
Other Plug-ins. Other browser plug-ins permit network
access, including Adobe Acrobat and Microsoft Silverlight.
Acrobat restricts network communication to the SOAP pro-
tocol but does not restrict access by document origin. Of-
ten, the Acrobat plug-in will prompt the user before access-
ing the network. Silverlight permits network access through
BrowserHttpWebRequest, which uses the browser to make
the request (like URLLoader in Flash) and thus uses the
browser’s DNS pins.
2The duration is set by network.dnsCacheExpiration.
3We observed 98.1% penetration in our experiment.
4. ATTACKS USING DNS REBINDING
An attacker can exploit the DNS rebinding vulnerabili-
ties described in Section 3 to mount a number of attacks.
For some of these attacks, the attacker requires the direct
socket access aﬀorded by DNS rebinding with Flash and
Java, whereas others require only the ability to read HTTP
responses from the target. The attacks fall into two broad
categories, according to the attacker’s goal:
• Firewall Circumvention. The attacker can use DNS re-
binding to access machines behind ﬁrewalls that he or
she cannot access directly. With direct socket access,
the attacker can interact with a number of internal
services besides HTTP.
• IP Hijacking. The attacker can also use DNS rebinding
to access publicly available servers from the client’s IP
address. This allows the attacker to take advantage of
the target’s implicit or explicit trust in the client’s IP
address.
To mount these attacks, the attacker must ﬁrst induce the
client to load some active content. This can be done by a
variety of techniques discussed in Section 4.4. Once loaded
onto the client’s machine, the attacker’s code can communi-
cate with any machine reachable by the client.
4.1 Firewall Circumvention
A ﬁrewall restricts traﬃc between computer networks in
diﬀerent zones of trust. Some examples include blocking
connections from the public Internet to internal machines
and mediating connections from internal machines to Inter-
net servers with application-level proxies. Firewall circum-
vention attacks bypass the prohibition on inbound connec-
tions, allowing the attacker to connect to internal servers
while the user is visiting the attacker’s Internet web page
(see Figure 1).
Spidering the Intranet. The attacker need not specify
the target machine by IP address.
Instead, the attacker
can guess the internal host name of the target, for example
hr.corp.company.com, and rebind attacker.com to a CNAME
record pointing to that host name. The client’s own recur-
sive DNS resolver will complete the resolution and return
the IP address of the target. Intranet host names are often
guessable and occasionally disclosed publicly [30, 9]. This
technique obviates the need for the attacker to scan IP ad-
dresses to ﬁnd an interesting target but does not work with
the multiple A record technique described in Section 3.1.
Having found a machine on the intranet, the attacker can
connect to the machine over HTTP and request the root
document. If the server responds with an HTML page, the
attacker can follow links and search forms on that page,
eventually spidering the entire intranet. Web servers inside
corporate ﬁrewalls often host conﬁdential documents, rely-
ing on the ﬁrewall to prevent untrusted users from accessing
the documents. Using a DNS rebinding attack, the attacker
can leverage the client’s browser to read these documents
and exﬁltrate them to the attacker, for example by submit-
ting an HTML form to the attacker’s web server.
Compromising Unpatched Machines. Network admin-
istrators often do not patch internal machines as quickly
as Internet-facing machines because the patching process is
time-consuming and expensive. The attacker can attempt
to exploit known vulnerabilities in machines on the internal
network. In particular, the attacker can attempt to exploit
the client machine itself. The attacks against the client it-
self originate from localhost and so bypass software ﬁre-
walls and other security checks, including many designed to
protect serious vulnerabilities.
If an exploit succeeds, the
attacker can establish a presence within the ﬁrewall that
persists even after clients close their browsers.
Abusing Internal Open Services.
Internal networks
contain many open services intended for internal use only.
For example, network printers often accept print jobs from
internal machines without additional authentication. The
attacker can use direct socket access to command network
printers to exhaust their toner and paper supplies.
Similarly, users inside ﬁrewalls often feel comfortable cre-
ating ﬁle shares or FTP servers accessible to anonymous
users under the assumption that the servers will be avail-
able only to clients within the network. With the ability to
read and write arbitrary sockets, the attacker can exﬁltrate
the shared documents and use these servers to store illicit
information for later retrieval.
Consumer routers are often installed without changing the
default password, making them an attractive target for re-
conﬁguration attacks by web pages [40]. Firmware patches
have attempted to secure routers against cross-site scripting
and cross-site request forgery, in an eﬀort to prevent recon-
ﬁguration attacks. DNS rebinding attacks allow the attacker
direct socket access to the router, bypassing these defenses.
4.2
IP Hijacking
Attackers can also use DNS rebinding attacks to target
machines on the public Internet. For these attacks, the at-
tacker is not leveraging the client’s machine to connect to
otherwise inaccessible services but instead abusing the im-
plicit or explicit trust public services have in the client’s IP
address. Once the attacker has hijacked a client’s IP ad-
dress, there are several attacks he or she can perpetrate.
Committing Click Fraud. Web publishers are often paid
by web advertisers on a per-click basis. Fraudulent publish-
ers can increase their advertising revenue by generating fake
clicks, and advertisers can drain competitors’ budgets by
clicking on their advertisements. The exact algorithms used
by advertising networks to detect these “invalid” clicks are
proprietary, but the IP address initiating the click is widely
believed to be an essential input. In fact, one common use
of bot networks is to generate clicks [7].
Click fraud would appear to require only the ability to
send HTTP requests to the advertising network, but adver-
tisers defend against the send-only attacks, permitted by the
same-origin policy, by including a unique nonce with every
advertising impression. Clicks lacking the correct nonce are
rejected as invalid, requiring the attacker to read the nonce
from an HTTP response in order to generate a click.
This attack is highly cost-eﬀective, as the attacker can
buy advertising impressions, which cost tens of cents per
thousand, and convert them into clicks, worth tens of cents
each. The attack is suﬃciently cost-eﬀective that the at-
tacker need not convert every purchased impression into a
click. Instead, the fraudster can use most of the purchased
impressions to generate fake impressions on the site, main-
taining a believable click-through rate.
Sending Spam. Many e-mail servers blacklist IP addresses
known to send spam e-mail [39]. By hijacking a client’s
IP address, an attacker can send spam from IP addresses
with clean reputations. To send spam e-mail, the attacker
need only write content to SMTP servers on port 25, an
action blocked by most browsers but permitted by Flash
and Java. Additionally, an attacker will often be able to use
the client’s actual mail relay. Even service providers that
require successful authentication via POP3 before sending
e-mail are not protected, because users typically leave their
desktop mail clients open and polling their POP3 servers.
Defeating IP-based Authentication. Although discour-
aged by security professionals [10], many Internet services
still employ IP-based authentication. For example, the ACM
Digital Library makes the full text of articles available only
to subscribers, who are often authenticated by IP address.
After hijacking an authorized IP address, the attacker can
access the service, defeating the authentication mechanism.
Because the communication originates from an IP address
actually authorized to use the service, it can be diﬃcult,
or even impossible, for the service provider to recognize the
security breach.
Framing Clients. An attacker who hijacks an IP address
can perform misdeeds and frame the client. For example,
an attacker can attempt to gain unauthorized access to a
computer system using a hijacked IP address as a proxy.
As the attack originates from the hijacked IP address, the
logs will implicate the client, not the attacker, in the crime.
Moreover, if the attacker hosts the malicious web site over
HTTPS, the browser will not cache the page and no traces
will be left on the client’s machine.
4.3 Proof-of-Concept Demonstration
We developed proof-of-concept exploits for DNS rebinding
vulnerabilities in Flash 9, LiveConnect, Java applets with
proxy servers, and the browser itself. Our system consists of
a custom DNS server authoritative for dnsrebinding.net,
a custom Flash policy server, and a standard Apache web
server. The various technologies issue DNS queries that en-
code the attacker and target host names, together with a
nonce, in the subdomain. For each nonce, the DNS server
ﬁrst responds with the attacker’s IP address (with a zero
TTL) and thereafter with the target’s IP address. Our
proof-of-concept demo, http://crypto.stanford.edu/dns,
implements wget and telnet by mounting a rebinding at-
tack against the browser.
4.4 Experiment: Recruiting Browsers
Methodology. We tested DNS rebinding experimentally
by running a Flash 9 advertisement on a minor advertising
network targeting the keywords “Firefox,” “game,” “Inter-
net Explorer,” “video,” and “YouTube.” The experiment
used two machines in our laboratory, an attacker and a tar-
get. The attacker ran a custom authoritative DNS server
for dnsrebinding.net, a custom Flash policy server, and
an Apache web server hosting the advertisement. The tar-
get ran an Apache web server to log successful attacks. The
Flash advertisement exploited the vulnerability described in
Section 3.1 to load an XML document from the target server
in our lab. The attack required only that the client view the
ad, not that the user click on the ad.
Vulnerability
Impressions
Flash 9
LiveConnect
Java+Proxy
Total Multi-Pin