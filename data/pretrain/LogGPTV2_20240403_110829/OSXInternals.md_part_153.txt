// create a new ACL entry in the given ACL
ret = acl_create_entry(&acl, &acl_entry);
EXIT_ON_ERROR("acl_create_entry", ret);
// retrieve descriptor to the permission set in the given ACL entry
ret = acl_get_permset(acl_entry, &acl_permset);
EXIT_ON_ERROR("acl_get_permset", ret);
// a permission
acl_perm = ACL_DELETE;
// add the permission to the given permission set
ret = acl_add_perm(acl_permset, acl_perm);
EXIT_ON_ERROR("acl_add_perm", ret);
// set the permissions of the given ACL entry to those contained in this set
ret = acl_set_permset(acl_entry, acl_permset);
EXIT_ON_ERROR("acl_set_permset", ret);
// set the tag type (we want to deny delete permissions)
ret = acl_set_tag_type(acl_entry, ACL_EXTENDED_DENY);
EXIT_ON_ERROR("acl_set_tag_type", ret);
// set qualifier (in the case of ACL_EXTENDED_DENY, this should be a uuid_t)
ret = acl_set_qualifier(acl_entry, (const void *)uu);
EXIT_ON_ERROR("acl_set_qualifier", ret);
// associate the ACL with the file
ret = acl_set_file(argv[1], ACL_TYPE_EXTENDED, acl);
EXIT_ON_ERROR("acl_set_file", ret);
// free ACL working space
ret = acl_free((void *)acl);
EXIT_ON_ERROR("acl_free", ret);
exit(0);
}
$ gcc -Wall -o aclset aclset.c
$ touch /tmp/file.txt
$ ls -le /tmp/file.txt
-rw-r--r-- + 1 amit wheel 0 Oct 22 01:49 /tmp/file.txt
0: user:amit deny delete
$ rm /tmp/file.txt
rm: /tmp/file.txt: Permission denied
$ sudo rm /tmp/file.txt
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 72 of 90
$
Figure 1129 illustrates numerous steps involved in manipulating ACLs. However, you can achieve the
same effect as the program with a single chmod command line:
$ chmod +a ' deny delete' 
The acl_set_file() function, which is implemented in the system library, internally uses an extended
version of the chmod() system call to set the ACL. Given an ACL, it performs the following operations:
 Creates a file security descriptor object (filesec_t) by calling filesec_init()
 Adds the ACL to the security descriptor by calling filesec_set_security()
 Calls chmodx_np() with the security descriptor as an argument (note that np stands for
nonportablechmodx_np() invokes the extended chmod() system call)
Besides chmod(), several other system calls were extended in Mac OS X 10.4 to add support for ACLsfor
example, there are extended versions of open(), umask(), stat(), lstat(), fstat(), fchmod(), mkfifo
(), and mkdir(). The following code excerpt shows how the program from Figure 1129 might be modified
to create a file with an ACL.
...
// assuming the ACL has been set up at this point
// create a file security object
filesec = filesec_init();
// set the ACL as the file security object's property
filesec_set_property(filesec, FILESEC_ACL, &acl);
if ((fd = openx_np(argv[1], O_CREAT | O_RDWR | O_EXCL, filesec)) 
#include 
#include 
typedef struct {
UInt32 pid;
UInt32 action;
enum vtype v_type;
enum vtagtype v_tag;;
char p_comm[MAXCOMLEN + 1];
char path[MAXPATHLEN];
} VnodeWatcherData_t;
enum {
kt_kVnodeWatcherUserClientOpen,
kt_kVnodeWatcherUserClientClose,
kt_kVnodeWatcherUserClientNMethods,
kt_kStopListeningToMessages = 0xff,
};
#define VNW_LOG_FILE "/private/tmp/VnodeWatcher.log"
#ifdef KERNEL
#include 
#include 
#include 
#include 
#include 
// the I/O Kit driver class
class com_osxbook_driver_VnodeWatcher : public IOService
{
OSDeclareDefaultStructors(com_osxbook_driver_VnodeWatcher)
public:
virtual bool start(IOService *provider);