events shown in our assumed fault model in Figure 2. De(cid:173)
rating can be calculated by dividing the sum of C and F
events by the total number of faults injected. It should be
noted that our simulator has the ability to accurately model
both logical and timing window, but not electrical mask(cid:173)
ing effects. We chose not to model electrical masking ef(cid:173)
fects in this work because the amount of electrical masking
that occurs is primarily dependent on the delays of individ(cid:173)
ual gates. This implies that the effects would be similar
in both our baseline and protected simulations and would
be canceled out when a relative comparison is performed.
For each particle strike simulated, a gate, charge deposition
value, and an offset into the clock cycle is chosen. The time
during the clock cycle is randomly chosen, and the gate and
charge deposition values are chosen based on the gate area
estimates, and charge deposition probability density func(cid:173)
tion, respectively.
5.2 Benchmarks
In order to create benchmark circuits for evaluation, Ver(cid:173)
ilog behavioral representations of different functional units
were first synthesized to elementary logic gates using Syn(cid:173)
opsis Design Compiler. The resulting net lists were then
converted to the ATPG net list format used by our gate level
simulator. Area estimates were taken from the correspond(cid:173)
ing standard cells in the LSI Logic gflxp 0.11 um library.
These area estimates were used during fault injection to de(cid:173)
termine the probability of a particle strike occurring on a
particular gate.
Ideally this area characterization needs to
only be done once, as the relative differences of areas be(cid:173)
tween standard cells should remain constant across technol(cid:173)
ogy generations.
6. Evaluation
In this section, we present the results of several experi(cid:173)
ments designed to explore the degree of error tolerance that
can realistically be achieved by placing soft error detectors
in the manner described previously. In particular the trade(cid:173)
off between the number of soft error detectors employed
and the time skew used to detect errors within each detector
is studied. Additionally, the performed experiments serve
to validate the CDFs shown in Figures 11 and 12.
The previously mentioned gate level simulator was used
to evaluate an integer and a floating point multiplier unit.
Each unit was synthesized from a Verilog behavioral rep(cid:173)
resentation and pipelined into 4 stages. We felt that these
benchmarks are representative of the type of logic units that
would be present in a conventional microprocessor. Char(cid:173)
acteristics of each benchmark circuit are shown in Table 1.
Clock Period (ps)
702
2460
Table 1. Information on Benchmark Circuits
In each experiment, 100,000 faults were injected into
each benchmark circuit. Randomized vectors were used for
input stimulus. Experiments were performed using detec(cid:173)
tors that took data samples skewed by 20, 50, 100, and 200
picoseconds, and protecting 5, 10, 25, 50, and 100 percent
of flip-flops in each unit. Flip-flops were assigned detec(cid:173)
tors according to the ranking produced by CDF creation de(cid:173)
scribed in Section 4, but different random seeds were used
to drive fault injection. The results of these experiments
are plotted in Figures 16 and 17 for the floating point and
integer multipliers, respectively. The y axis in each figure
represents the achieved error coverage and the x axis rep(cid:173)
resents the fraction of flip-flops in the circuit that are aug(cid:173)
mented with detection logic. The bold vertical line in each
graph represents the threshold of 10% area overhead, which
was suggested as a target for academic reliability solutions
[1 ].
Both of these figures show that the achievable amount
of error coverage increases progressively as both the num(cid:173)
ber of detectors and time skew within detectors increases.
This affords logic designers increased flexibility during the
design cycle, as units can be augmented with more detec(cid:173)
tors with less skew if clock cycle time is important, or con(cid:173)
versely fewer detectors with larger skew if area is an issue.
The error coverage achievable is also significantly different
for each unit studied. Looking at Figure 16 adding detec(cid:173)
tors to 40% of the flipflops (corresponding to a 10% area in(cid:173)
crease) results in higher than 95% error coverage (over 20X
reduction in the SER). In contrast, for the same amount of
overhead in the integer multiplier, there is only 65% error
1-4244-2398-9/08/$20.00 ©2008 IEEE
134
DSN 2008: Hill et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:17:55 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
1.20
1.00 +----~~~=""--..---___i
reo f~== ==~=====~~~=~j
I
0.40 +flll---------if----------i
8 0.60
_---
~/
-Skew_200
-
-Skew_100
-
-skew_50
-
--skew_20
-cdf
0.20 # - - - - - -+ - - - - - - - - - -1
j
0.00 +------,-----+--------.---_______.---;
0.00
0.20
0.40
0.60
0.80
1.00
fnK:tIon of protected fIIpftop
Figure 16. Error coverage vs number of pro(cid:173)
tected flip-flops in floating point multiplier.
line represents a 10% increase
The vertical
in area.
1.20 T · · · · · · · · · · · ·
r················
t 0.80
I 0.80 +---------,,4LJ!1-------:;;;,.....-...:=-==------------------;-
I 0.40 +---,~......=t-----=-==-=-=.....---..---.-
_....-----
0.2O+--I-!--,.::.'---t--------------'
--. ...200
--skew 100
--..:50
--sllew_20
-edt
0.00 ~--,-L------r---____r_-_______.-___;
0.00
0.20
0.40
0.60
0.80
1.00
frKtIon of protec:ted tllptIops
Figure 17. Error coverage vs number of pro(cid:173)
tected flip-flops in integer multiplier. The ver(cid:173)
tical line represents a 100/0 increase in area.
coverage (slightly less than 3X reduction the the SER). De(cid:173)
pending on the particular unit being considered, our tech(cid:173)
nique alone may be enough to meet reliability goals, or it
may need to be complemented with other mitigation tech(cid:173)
niques. Additionally, designers also must consider the uti(cid:173)
1ization of the functional unit being hardened, which can
vary depending on the target applications ofthe system. The
results shown in Figure 16 and 17 also serve to validate the
CDF generated by our heuristic. The solid CDF line in both
figures tracks closely with the results for 200 ps of skew,
which is the maximum transient width used for our fault
injection experiments.
7. Related Work
There have been numerous prior works proposing tech(cid:173)
niques designed to mitigate the effects ofsoft errors in logic.
At the device level, there have been several proposals which
reduce vulnerability in logic nodes by increasing the sizes
of transistors [15][13]. This raises the critical charge de(cid:173)
posited (Qcrit) needed to induce a single event effect, effec(cid:173)
tively meaning that a larger fraction of particle strikes don't
result in errors. As this class of techniques takes a different
approach to handling particle strikes, these proposals are
complementary to our work. In addition to this, we feel that
flipflop based solutions have a significantly greater potential
to reduce the number of errors seen in logic. While resizing
transistors in a particular CMOS gate will affect particles
which strike that gate, augmenting a flipflop with a SET de(cid:173)
tector can potentially catch any SET that occurs within the
fan-in cone of that flipflop.
Another class of techniques, focusing on modifying flip(cid:173)
flops to mitigate soft errors, is more closely related to this
work. Rao et al.
[9] present a combined approach where
both transistors are resized (to increase Qcrit) and flip-flops
on paths with timing slack are replaced with flip-flops with
larger setup times (to amplify the effects of timing window
masking). This work differs from our proposal in that it
deals with soft errors by detecting them, rather than increas(cid:173)
ing the amount of masking. Additionally, approaches that
adjust gate or path delays essentially balance all paths in a
circuit, resulting in a design that is more susceptible to de(cid:173)
lay faults which may occur as a result of process variation
or wearout.
Blome et al.
[4] present a low cost approach to hard(cid:173)
ening an embedded ARM microprocessor from soft errors
through a combination of duplicating a subset of frequently
accessed registers, and selectively utilizing time-delayed
shadow latches (as soft error detectors). This work also
presents a statistical methodology for placing these detec(cid:173)
tors. This work differs from our work in several ways.
First, our work focuses on individual units rather than the
entire microprocessor pipeline. We feel that our unit-based
approach to hardening components is a good fit for indus(cid:173)
trial design teams, as multiple analyses can be conducted in
parallel. Second, our presented heuristic considers a more
detailed fault model, which fully considers the behavior of
SETs in pipelined circuits. The use of this model gives our
heuristic greater accuracy, and allows for CDF construction
with a single simulation pass. Lastly, our study explores
trade-offs associated with implementing the SET detectors
themselves.
Mitra et al. [10] explore the efficient placement of soft
error detectors through the use of formal verification tools.
This work is targeted towards control logic, which in gen(cid:173)
eral is finite state machine-based. In contrast, our technique
is best suited for data path units (like adders and multipliers)
and is complementary to this method that deals with control
logic.
1-4244-2398-9/08/$20.00 ©2008 IEEE
135
DSN 2008: Hill et a!.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:17:55 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
[11] P. Shivakumar, M. Kistler, S. W. Keckler, D. Burger, and
L. Alvisi. Modeling the effect of technology trends on the
soft error rate of combinational logic. In DSN '02: Proceed(cid:173)
ings of the 2002 International Conference on Dependable
Systems and Networks, pages 389-398, Washington, DC,
USA, 2002. IEEE Computer Society.
[12] M. Zhang and N. Shanbhag. A soft error rate analysis (sera)
In International Conference on Computer
methodology.
Aided Design, November 2004.
[13] M. Zhang and N. Shanbhag. A cmos design style for logic
In Proc. IEEE International Reliability
circuit hardening.
Physics Symposium, pages 223-229, April 2005.
[14] M. Zhang and N. Shanbhag. An energy-efficient circuit tech(cid:173)
nique for single event transient noise-tolerance. In IEEE In(cid:173)
ternational Symposium on Circuits and Systems, pages 636(cid:173)
639, May 2005.
[15] Q. Zhou and K. Mohanram. Cost-effective radiation hard(cid:173)
In ICCAD '04:
ening technique for combinational logic.
Proceedings of the 2004 IEEE/ACM International confer(cid:173)
ence on Computer-aided design, pages 100-106, Washing(cid:173)
ton, DC, USA, 2004.
8. Conclusion
In this work, a novel statistical methodology for reduc(cid:173)
ing logic soft error rates is presented. Our methodology in(cid:173)
volves selectively adding temporal redundancy to flip-flops
within a pipelined circuit to detect soft errors. This work
is unique in that the heuristic used for placement takes ad(cid:173)
vantage of the previously studied SER peaking phenomena,
and that it is done in the context of pipelined units. Our
experimental results show reductions in the logic soft error
rate of up to 20X with less than 10% area overhead.
9. Acknowledgments
This work was supported in part by NSF Grant CCF(cid:173)
0702272 and donations from Intel and IBM.
References
[1] Design Panelfor SELSE Workshop 2006.
[2] HSPICE PTM - http://www.eas.asu.edu/ptm.
[3] A. Biswas, P. Racunas, R. Cheveresan, 1. S. Emer, S. S.
Mukherjee, and R. Rangan. Computing architectural vulner(cid:173)
ability factors for address-based structures. In ISCA, pages
532-543, 2005.
[4] 1. Blome, S. Gupta, S. Feng, S. Mahlke, and D. Bradley.
Cost-efficient soft error protection for embedded micropro(cid:173)
cessors. In International Conference on Compilers Archi(cid:173)
tecture Synthesis for Embedded Systems, October 2006.
[5] H. Deogun, D. Sylvester, and D. Blaauw. Gate-level mit(cid:173)
igation techniques for neutron-induced soft error rate.
In
ACM/IEEE International Symposium on Quality Electronic
Design, March 2005.
[6] D. Ernst, N. S. Kim, S. Das, S. Pant, T. Pham, R. Rao,
C. Ziesler, D. Blaauw, T. Austin, and T. Mudge. Razor:
A low-power pipeline based on circuit-level timing specula(cid:173)
In ACM/IEEE International Symposium on Microar(cid:173)
tion.
chitecture (MICRO), November 2003.
[7] S. Mitra, M. Zhang, N. Seifert, B. Gill, S. Waqas, and K. S.
Kim. Combinational logic soft error correction. In Interna(cid:173)
tional Test Conference, November 2006.
[8] S. Mukherjee, 1. Emer, and S. Reinhardt. The soft error
problem: an architectural perspective. High-Performance
Computer Architecture, 2005. HPCA-11. 11th International
Symposium on, pages 243-247,12-16 Feb. 2005.
[9] R. Rao, D. Blaauw, and D. Sylvester. Soft error reduction in
combinational logic using gate resizing and flip-flop selec(cid:173)
In Proceedings of the ACM/IEEE International Con(cid:173)
tion.
ference on Computer-Aided Design (ICCAD). ACM/IEEE
International Conference on Computer-Aided Design (IC(cid:173)
CAD), November 2006.
[10] S. A. Seshia, W. Li, and S. Mitra. Verification-guided soft
In Proc. Design Automation and Test in
error resilience.
Europe (DATE), April 2007.
1-4244-2398-9/08/$20.00 ©2008 IEEE
136
DSN 2008: Hill et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:17:55 UTC from IEEE Xplore.  Restrictions apply.