### Events in the Fault Model

In Figure 2, the events depicted in our assumed fault model are categorized as C and F. The derating can be calculated by dividing the sum of C and F events by the total number of faults injected. It is important to note that our simulator can accurately model both logical and timing window effects but does not account for electrical masking effects. We chose not to model electrical masking effects in this work because their occurrence is primarily dependent on the delays of individual gates. This implies that the effects would be similar in both our baseline and protected simulations and would cancel out when a relative comparison is performed.

For each simulated particle strike, a gate, charge deposition value, and an offset into the clock cycle are chosen. The time during the clock cycle is randomly selected, while the gate and charge deposition values are determined based on gate area estimates and the charge deposition probability density function, respectively.

### Benchmarks

To create benchmark circuits for evaluation, Verilog behavioral representations of different functional units were first synthesized into elementary logic gates using Synopsys Design Compiler. The resulting netlists were then converted to the ATPG netlist format used by our gate-level simulator. Area estimates were taken from the corresponding standard cells in the LSI Logic gflxp 0.11 Î¼m library. These area estimates were used during fault injection to determine the probability of a particle strike occurring on a particular gate. Ideally, this area characterization needs to be done only once, as the relative differences in areas between standard cells should remain constant across technology generations.

### Evaluation

In this section, we present the results of several experiments designed to explore the degree of error tolerance that can realistically be achieved by placing soft error detectors as described previously. Specifically, we study the trade-off between the number of soft error detectors employed and the time skew used to detect errors within each detector. Additionally, the experiments validate the cumulative distribution functions (CDFs) shown in Figures 11 and 12.

The previously mentioned gate-level simulator was used to evaluate an integer and a floating-point multiplier unit. Each unit was synthesized from a Verilog behavioral representation and pipelined into four stages. We believe these benchmarks are representative of the type of logic units present in a conventional microprocessor. Characteristics of each benchmark circuit are shown in Table 1.

| Benchmark Circuit | Clock Period (ps) |
|-------------------|-------------------|
| Integer Multiplier | 702               |
| Floating-Point Multiplier | 2460              |

In each experiment, 100,000 faults were injected into each benchmark circuit, with randomized vectors used for input stimulus. Experiments were performed using detectors that took data samples skewed by 20, 50, 100, and 200 picoseconds, and protecting 5, 10, 25, 50, and 100 percent of flip-flops in each unit. Flip-flops were assigned detectors according to the ranking produced by CDF creation, as described in Section 4, but different random seeds were used to drive fault injection. The results of these experiments are plotted in Figures 16 and 17 for the floating-point and integer multipliers, respectively. The y-axis in each figure represents the achieved error coverage, and the x-axis represents the fraction of flip-flops in the circuit that are augmented with detection logic. The bold vertical line in each graph represents the threshold of 10% area overhead, which was suggested as a target for academic reliability solutions [1].

Both figures show that the achievable amount of error coverage increases progressively as both the number of detectors and the time skew within detectors increase. This provides logic designers with increased flexibility during the design cycle, as units can be augmented with more detectors with less skew if clock cycle time is important, or conversely, fewer detectors with larger skew if area is an issue. The error coverage achievable is also significantly different for each unit studied. For example, adding detectors to 40% of the flip-flops (corresponding to a 10% area increase) in the floating-point multiplier results in higher than 95% error coverage (over 20X reduction in the SER). In contrast, for the same amount of overhead in the integer multiplier, there is only 65% error coverage (slightly less than 3X reduction in the SER). Depending on the particular unit being considered, our technique alone may be enough to meet reliability goals, or it may need to be complemented with other mitigation techniques. Additionally, designers must consider the utilization of the functional unit being hardened, which can vary depending on the target applications of the system. The results shown in Figures 16 and 17 also serve to validate the CDF generated by our heuristic. The solid CDF line in both figures tracks closely with the results for 200 ps of skew, which is the maximum transient width used for our fault injection experiments.

### Related Work

There have been numerous prior works proposing techniques designed to mitigate the effects of soft errors in logic. At the device level, several proposals aim to reduce vulnerability in logic nodes by increasing the sizes of transistors [15][13]. This raises the critical charge deposited (Qcrit) needed to induce a single event effect, effectively meaning that a larger fraction of particle strikes do not result in errors. As this class of techniques takes a different approach to handling particle strikes, these proposals are complementary to our work. In addition, we feel that flip-flop-based solutions have a significantly greater potential to reduce the number of errors seen in logic. While resizing transistors in a particular CMOS gate will affect particles that strike that gate, augmenting a flip-flop with a SET detector can potentially catch any SET that occurs within the fan-in cone of that flip-flop.

Another class of techniques focuses on modifying flip-flops to mitigate soft errors, which is more closely related to this work. Rao et al. [9] present a combined approach where both transistors are resized (to increase Qcrit) and flip-flops on paths with timing slack are replaced with flip-flops with larger setup times (to amplify the effects of timing window masking). This work differs from our proposal in that it deals with soft errors by detecting them rather than increasing the amount of masking. Additionally, approaches that adjust gate or path delays essentially balance all paths in a circuit, resulting in a design that is more susceptible to delay faults due to process variation or wearout.

Blome et al. [4] present a low-cost approach to hardening an embedded ARM microprocessor from soft errors through a combination of duplicating a subset of frequently accessed registers and selectively utilizing time-delayed shadow latches (as soft error detectors). This work also presents a statistical methodology for placing these detectors. This work differs from our work in several ways. First, our work focuses on individual units rather than the entire microprocessor pipeline. We believe that our unit-based approach to hardening components is a good fit for industrial design teams, as multiple analyses can be conducted in parallel. Second, our presented heuristic considers a more detailed fault model, which fully considers the behavior of SETs in pipelined circuits. The use of this model gives our heuristic greater accuracy and allows for CDF construction with a single simulation pass. Lastly, our study explores trade-offs associated with implementing the SET detectors themselves.

Mitra et al. [10] explore the efficient placement of soft error detectors through the use of formal verification tools. This work is targeted towards control logic, which is generally finite state machine-based. In contrast, our technique is best suited for data path units (like adders and multipliers) and is complementary to this method that deals with control logic.

### Conclusion

In this work, we present a novel statistical methodology for reducing logic soft error rates. Our methodology involves selectively adding temporal redundancy to flip-flops within a pipelined circuit to detect soft errors. This work is unique in that the heuristic used for placement takes advantage of the previously studied SER peaking phenomena and is done in the context of pipelined units. Our experimental results show reductions in the logic soft error rate of up to 20X with less than 10% area overhead.

### Acknowledgments

This work was supported in part by NSF Grant CCF-0702272 and donations from Intel and IBM.

### References

[1] Design Panel for SELSE Workshop 2006.
[2] HSPICE PTM - http://www.eas.asu.edu/ptm.
[3] A. Biswas, P. Racunas, R. Cheveresan, J. S. Emer, S. S. Mukherjee, and R. Rangan. Computing architectural vulnerability factors for address-based structures. In ISCA, pages 532-543, 2005.
[4] J. Blome, S. Gupta, S. Feng, S. Mahlke, and D. Bradley. Cost-efficient soft error protection for embedded microprocessors. In International Conference on Compilers Architecture Synthesis for Embedded Systems, October 2006.
[5] H. Deogun, D. Sylvester, and D. Blaauw. Gate-level mitigation techniques for neutron-induced soft error rate. In ACM/IEEE International Symposium on Quality Electronic Design, March 2005.
[6] D. Ernst, N. S. Kim, S. Das, S. Pant, T. Pham, R. Rao, C. Ziesler, D. Blaauw, T. Austin, and T. Mudge. Razor: A low-power pipeline based on circuit-level timing speculation. In ACM/IEEE International Symposium on Microarchitecture (MICRO), November 2003.
[7] S. Mitra, M. Zhang, N. Seifert, B. Gill, S. Waqas, and K. S. Kim. Combinational logic soft error correction. In International Test Conference, November 2006.
[8] S. Mukherjee, J. Emer, and S. Reinhardt. The soft error problem: an architectural perspective. High-Performance Computer Architecture, 2005. HPCA-11. 11th International Symposium on, pages 243-247, 12-16 Feb. 2005.
[9] R. Rao, D. Blaauw, and D. Sylvester. Soft error reduction in combinational logic using gate resizing and flip-flop selection. In Proceedings of the ACM/IEEE International Conference on Computer-Aided Design (ICCAD). ACM/IEEE International Conference on Computer-Aided Design (ICCAD), November 2006.
[10] S. A. Seshia, W. Li, and S. Mitra. Verification-guided soft error resilience. In Proc. Design Automation and Test in Europe (DATE), April 2007.