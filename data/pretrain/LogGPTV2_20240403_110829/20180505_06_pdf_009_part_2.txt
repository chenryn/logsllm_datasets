# 递归公用表表达式 (Recursive CTE) 示例

## 递归 CTE 示例：步骤 4
```sql
WITH RECURSIVE st (id, name, manager_id) AS (
    SELECT id, name, manager_id FROM staff WHERE name = 'John'
    UNION ALL
    SELECT cur.id, cur.name, cur.manager_id 
    FROM staff cur, st prev 
    WHERE cur.manager_id = prev.id
)
SELECT * FROM st;
```
**结果:**
| ID | NAME  | MANAGER_ID |
|----|-------|------------|
| 1  | John  | 1          |
| 2  | Paul  | 1          |
| 3  | Anna  | 2          |

**最终结果:**
- `('John', 'Paul', 'Anna')`

## 递归 CTE 示例：步骤 5
```sql
WITH RECURSIVE st (id, name, manager_id) AS (
    SELECT id, name, manager_id FROM staff WHERE name = 'John'
    UNION ALL
    SELECT cur.id, cur.name, cur.manager_id 
    FROM staff cur, st prev 
    WHERE cur.manager_id = prev.id
)
SELECT * FROM st;
```
**结果:**
| ID | NAME  | MANAGER_ID |
|----|-------|------------|
| 1  | John  | 1          |
| 2  | Paul  | 1          |
| 3  | Anna  | 2          |
| 4  | Peter | 4          |

**最终结果:**
- `('John', 'Paul', 'Anna', 'Peter')`

## 递归 CTE 示例：完成
```sql
WITH RECURSIVE st (id, name, manager_id) AS (
    SELECT id, name, manager_id FROM staff WHERE name = 'John'
    UNION ALL
    SELECT cur.id, cur.name, cur.manager_id 
    FROM staff cur, st prev 
    WHERE cur.manager_id = prev.id
)
SELECT * FROM st;
```
**结果:**
| ID | NAME  | MANAGER_ID |
|----|-------|------------|
| 1  | John  | 1          |
| 2  | Paul  | 1          |
| 3  | Anna  | 2          |
| 4  | Peter | 4          |
| 5  | Steve | 4          |

**最终结果:**
- `('John', 'Paul', 'Anna', 'Peter', 'Steve')`

## CONNECT BY 与 CTEs 的比较
### Oracle
```sql
SELECT name FROM staff
START WITH name = 'John'
CONNECT BY manager_id = PRIOR id;
```

### PostgreSQL
```sql
WITH RECURSIVE st (id, name, manager_id) AS (
    SELECT id, name, manager_id FROM staff WHERE name = 'John'
    UNION ALL
    SELECT cur.id, cur.name, cur.manager_id 
    FROM staff cur, st prev 
    WHERE cur.manager_id = prev.id
)
SELECT * FROM st;
```

## 搜索顺序差异
### Oracle (深度优先)
- `(John, Paul, Peter, Steve, Anna)`

### PostgreSQL (广度优先)
- `(John, Paul, Anna, Peter, Steve)`

## Oracle 中的 LEVEL 和 PATH
```sql
SELECT ID, NAME, LEVEL, SYS_CONNECT_BY_PATH(name, '/') "PATH" 
FROM staff
START WITH NAME = 'John' 
CONNECT BY PRIOR ID = MANAGER_ID;
```
**结果:**
| ID | NAME  | LEVEL | PATH                     |
|----|-------|-------|--------------------------|
| 1  | John  | 1     | /John                    |
| 2  | Paul  | 2     | /John/Paul               |
| 4  | Peter | 3     | /John/Paul/Peter         |
| 5  | Steve | 4     | /John/Paul/Peter/Steve   |
| 3  | Anna  | 2     | /John/Anna               |

## PostgreSQL 中的 LEVEL 和 PATH
```sql
WITH RECURSIVE org AS (
    SELECT id, name, 1 as level, ARRAY[name] AS path FROM staff
    UNION ALL
    SELECT next.id, next.name, prev.level + 1 as level, prev.path || next.name as path
    FROM org prev, staff next 
    WHERE org.id = staff.manager_id
)
SELECT id, name, level, '/'||array_to_string(path, '/') as path from org;
```
**结果:**
| ID | NAME  | LEVEL | PATH                     |
|----|-------|-------|--------------------------|
| 1  | John  | 1     | /John                    |
| 2  | Paul  | 2     | /John/Paul               |
| 3  | Anna  | 2     | /John/Anna               |
| 4  | Peter | 3     | /John/Paul/Peter         |
| 5  | Steve | 4     | /John/Paul/Peter/Steve   |

## 匹配 Oracle 的搜索顺序
```sql
WITH RECURSIVE org AS (
    SELECT id, name, 1 as level, ARRAY[name] AS path FROM staff
    UNION ALL
    SELECT next.id, next.name, prev.level + 1 as level, prev.path || next.name as path
    FROM org prev, staff next 
    WHERE org.id = staff.manager_id
)
SELECT id, name, level, '/'||array_to_string(path, '/') as path from org ORDER BY path;
```
**结果:**
| ID | NAME  | LEVEL | PATH                     |
|----|-------|-------|--------------------------|
| 1  | John  | 1     | /John                    |
| 2  | Paul  | 2     | /John/Paul               |
| 4  | Peter | 3     | /John/Paul/Peter         |
| 5  | Steve | 4     | /John/Paul/Peter/Steve   |
| 3  | Anna  | 2     | /John/Anna               |

## 检测循环
### Oracle
```sql
SELECT ID, NAME, LEVEL, SYS_CONNECT_BY_PATH(name, '/') "PATH" 
FROM staff
START WITH NAME = 'John' 
CONNECT BY NOCYCLE PRIOR ID = MANAGER_ID;
```

### PostgreSQL
```sql
WITH RECURSIVE org AS (
    SELECT id, name, 1 as level, ARRAY[name] AS path, FALSE as cycle FROM staff
    UNION ALL
    SELECT next.id, next.name, prev.level + 1 as level, prev.path || next.name as path, next.name = ANY(prev.path) as cycle
    FROM org prev, staff next 
    WHERE org.id = staff.manager_id
)
SELECT id, name, level, '/'||array_to_string(path, '/') as path FROM org WHERE cycle = FALSE;
```

## 更多 Oracle CONNECT BY 功能（未涵盖）
- `CONNECT_BY_ISCYCLE`
- `CONNECT_BY_ISLEAF`
- `CONNECT_BY_ROOT`
- `ORDER SIBLINGS`

## 转换 Oracle 函数
- **Orafce**: [orafce.projects.pgfoundry.org](http://orafce.projects.pgfoundry.org/)
- **PL/SQL to PL/pgSQL**: [PostgreSQL 文档](http://www.postgresql.org/docs/current/static/plpgsql-porting.html)

## 转换 instr
- **Orafce**
- **PostgreSQL 文档**
- **特殊情况**:
  - **Oracle**:
    ```sql
    SELECT instr('foo', 'f', 0) FROM dual;
    -- 结果: 0
    ```
  - **PostgreSQL**:
    ```sql
    SELECT instr('foo', 'f', 0) FROM dual;
    -- 结果: 2
    ```

## sysdate vs now()
- `sysdate` - 服务器时区
- `now()` - 会话时区
- 在 PostgreSQL 中实现 `sysdate` 作为硬编码时区的 `now()`

## 确保其工作
- 数百个文件，每个文件包含 1 到 10 个查询
- 缺乏跨数据库查询测试框架
- 使用 Python 进行测试

## Python 数据库驱动程序
- `psycopg2`
- `cx_Oracle 4.4.1`（带有自定义补丁）
- 32 位版本以连接到 Oracle 8i

## 测试应用程序工作流程
- 建立数据库连接
- 从测试文件中读取查询
- 对两个数据库运行查询
- 比较结果
- 清理并退出

## 连接到数据库
```python
import cx_Oracle
import psycopg2

conn_string_pg = "dbname=pgdb host=pghost user=slon password=secret"
conn_string_ora = "slon/secret@oracledb"

def establish_db_connections(self, conn_string_ora, conn_string_pg):
    try:
        self._connora = cx_Oracle.connect(conn_string_ora)
        self._connpg = psycopg2.connect(conn_string_pg)
    except Exception as e:
        if isinstance(e, cx_Oracle.Error):
            raise Exception("Oracle: %s" % (e,))
        elif isinstance(e, psycopg2.Error):
            raise Exception("Postgres: %s" % (e,))
        else:
            raise
```

## 读取查询
- 查询文件解析
- 变量替换
- Python 是灵活的（可以轻松处理嵌入在 XML 中的查询）

## 运行查询
```python
def get_query_result(self, conn, query, limit=0):
    result = []
    rows = 0
    try:
        cur = conn.cursor()
        cur.execute(str(query))
        for row in cur:
            result.append(row)
            rows += 1
            if rows == limit:
                break
    except Exception as e:
        if isinstance(e, cx_Oracle.Error):
            raise Exception(("Oracle: %s" % (e,)).rstrip('\n\r'))
        elif isinstance(e, psycopg2.Error):
            raise Exception(("Postgres: %s" % (e,)).rstrip('\n\r'))
        else:
            raise
    finally:
        conn.rollback()
    return result
```

## 更快地运行查询
- 每个数据库连接一个线程
- 异步 I/O

## 从 PostgreSQL 获取结果行
- `SELECT` 语句很容易
- `INSERT`/`UPDATE`/`DELETE` + `RETURNING`:
  ```sql
  INSERT INTO pgconf(year, city) values(2012, 'Prague') RETURNING *;
  ```

## 从 Oracle 获取结果行
- `SELECT` 语句很容易
- `INSERT`/`UPDATE`/`DELETE` - 动态包装成匿名 PL/SQL 块
- `INSERT...SELECT` 是特殊情况

## 匿名 PL/SQL 块示例
```python
cur = con.cursor()
result = []
result.append(cur.arrayvar(ora.NUMBER, 1000))
result.append(cur.arrayvar(ora.STRING, 1000))
cur.execute("""
begin
insert into pgconf(year,city) values(2012, 'Prague') returning year, city bulk collect into :1, :2;
end;""", result)
rows = zip(*(x.getvalue() for x in result))
cur.close()
```

## 从 Oracle 获取表信息
```sql
SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_PRECISION, DATA_SCALE, CHAR_COL_DECL_LENGTH
FROM ALL_TAB_COLUMNS
WHERE TABLE_NAME='pgconf'
ORDER BY COLUMN_ID ASC
```

## Oracle 8i 不支持的功能
- 标量子查询
- `LONG RAW` 列
- `CASE...WHEN` 块

## 问题？
- Twitter: @alexeyklyukin
- Email: PI:EMAIL

## 参考资料
- [Ora2pg 主页](http://ora2pg.darold.net/index.html)
- [使用 Oracle FDW 从 8i 迁移](http://keithf4.com/oracle_fdw)
- [将 PL/SQL 代码移植到 PostgreSQL 的文档章节](http://www.postgresql.org/docs/8.3/interactive/plpgsql-porting.html)
- [Orafce 主页](http://orafce.projects.postgresql.org/)
- [cx_Oracle 文档](http://cx-oracle.sourceforge.net/html/index.html)
- [psycopg2 文档](http://www.initd.org/psycopg/docs/)
- [Python SQL 解析器库](http://code.google.com/p/python-sqlparse/)
- [Python 库处理结构化数据标记](http://docs.python.org/library/markup.html)

感谢您的关注！
反馈: [2012.pgconf.eu/feedback/](http://2012.pgconf.eu/feedback/)