`perf 记录`{.literal} 命令对性能数据进行抽样，并将这些数据存储在
`perf 报告命令的 perf`{.literal}.data``{=html}
文件中。`perf 记录`{.literal} 命令始终记录执行哪些 CPU 样本。您可以将
`perf 报告`{.literal} 配置为显示此信息。
::: itemizedlist
**先决条件**
-   您已安装 `perf`{.literal} 用户空间工具，如 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}
    所述。
-   当前目录中创建了 `perf.data`{.literal} 文件，该文件含有
    `perf 记录`{.literal}。如果 `perf.data`{.literal} 文件是使用 root
    访问权限创建的，则您需要使用 root 访问权限运行
    `perf 报告`{.literal}。
:::
::: itemizedlist
**流程**
-   显示 `perf.data`{.literal} 文件的内容，以便在按 CPU
    排序时进一步分析：
    ``` screen
    # perf report --sort cpu
    ```
    ::: itemizedlist
    -   您可以按 CPU 和命令排序，以显示 CPU 时间所花位置的更多详细信息：
        ``` screen
        # perf report --sort cpu,comm
        ```
        本示例将列出所有受监控 CPU
        的命令，按开销使用量降序排列所有受监控 CPU
        的命令，并确定运行命令所针对的 CPU。
    :::
:::
::: itemizedlist
**其它资源**
-   [使用 perf
    记录和分析性能配置集](#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance.html "第 21 章 使用 perf 记录和分析性能配置集"){.link}
:::
:::
::: section
::: titlepage
# []{#investigating-busy-cpus-with-perf_monitoring-and-managing-system-status-and-performance.html#displaying-specific-cpus-during-profiling-with-perf-top_investigating-busy-cpus-with-perf}在使用 perf top 分析时显示特定的 CPU {.title}
:::
您可以将 `perf top`{.literal} 配置为显示特定 CPU
及其相对使用情况，同时实时分析系统。
::: itemizedlist
**先决条件**
-   您已安装 `perf`{.literal} 用户空间工具，如 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}
    所述。
:::
::: itemizedlist
**流程**
-   在按 CPU 排序时启动 `perf 个接口`{.literal} ：
    ``` screen
    # perf top --sort cpu
    ```
    本示例将实时按开销使用量降序列出 CPU 及其对应的开销。
    ::: itemizedlist
    -   您可以按 CPU 和命令排序，以获取有关 CPU
        时间所花位置的更多详细信息：
        ``` screen
        # perf top --sort cpu,comm
        ```
        本示例将按开销使用量降序排列命令列出命令，并确定实时执行该命令的
        CPU。
    :::
:::
:::
::: section
::: titlepage
# []{#investigating-busy-cpus-with-perf_monitoring-and-managing-system-status-and-performance.html#monitoring-specific-cpus-with-perf-record-and-perf-report_investigating-busy-cpus-with-perf}使用 perf 记录和 perf 报告监控特定 CPU {.title}
:::
您可以将 `perf 记录`{.literal} 配置为仅对感兴趣的特定 CPU
进行抽样，并使用
`perf 报告分析所生成的 perf`{.literal}.data``{=html}
文件，以进行进一步分析。
::: itemizedlist
**先决条件**
-   您已安装 `perf`{.literal} 用户空间工具，如 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}
    所述。
:::
::: orderedlist
**流程**
1.  示例并在特定 CPU 中记录性能数据，生成 `perf.data`{.literal} 文件：
    ::: itemizedlist
    -   使用以逗号分隔的 CPU 列表：
        ``` screen
        # perf record -C 0,1 sleep seconds
        ```
        先前示例按照 `sleep`{.literal} 命令的规定，在 CPU 0 和 1 中
        `以秒为单位`{.literal} 样本和记录数据。
    -   使用一组 CPU:
        ``` screen
        # perf record -C 0-2 sleep seconds
        ```
        前面的示例按照使用 `sleep`{.literal} 命令的规定，在 CPU 0 到
        `2`{.literal} 的所有 CPU 中样本并记录数据。
    :::
2.  显示 `perf.data`{.literal} 文件的内容，以进一步分析：
    ``` screen
    # perf report
    ```
    此示例将显示 `perf.data`{.literal} 的内容。如果您正在监控多个
    CPU，并想了解哪个 CPU 数据被抽样，请参阅 [显示使用 perf 报告进行的
    CPU
    样本](#investigating-busy-cpus-with-perf_monitoring-and-managing-system-status-and-performance.html#displaying-which-cpu-samples-were-taken-on-with-perf-report_investigating-busy-cpus-with-perf "显示使用 perf 报告进行的 CPU 样本"){.link}。
:::
:::
:::
[]{#monitoring-application-performance-with-perf_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#monitoring-application-performance-with-perf_monitoring-and-managing-system-status-and-performance.html#monitoring-application-performance-with-perf_monitoring-and-managing-system-status-and-performance}第 23 章 使用 perf 监控应用程序性能 {.title}
:::
本节论述了如何使用 `perf`{.literal} 工具监控应用程序性能。
::: section
::: titlepage
# []{#monitoring-application-performance-with-perf_monitoring-and-managing-system-status-and-performance.html#attaching-perf-record-to-a-running-process_monitoring-application-performance-with-perf}将 perf 记录附加到正在运行的进程 {.title}
:::
您可以将 `perf 记录`{.literal} 附加到正在运行的进程。这将指示
`perf 记录`{.literal} 仅对指定进程中的示例和记录性能数据进行说明。
::: itemizedlist
**先决条件**
-   安装 `perf`{.literal} 用户空间工具。如需更多信息，请参阅 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}。
:::
::: itemizedlist
**流程**
-   将 `perf 记录`{.literal} 附加到正在运行的进程：
    ``` screen
    $ perf record -p ID1,ID2 sleep seconds
    ```
    前面的示例示例并记录了进程 ID 为 ID `1`{.literal} 和 `ID2`{.literal}
    的进程的性能数据（根据使用 `sleep`{.literal} 命令的规定，时间间隔为
    `秒`{.literal} ）。您还可以配置 `perf 以`{.literal}
    记录特定线程中的事件：
    ``` screen
    $ perf record -t ID1,ID2 sleep seconds
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    当使用 `-t`{.literal} 标志并强制处理线程 ID 时，`perf`{.literal}
    默认禁用继承。您可以通过添加 `--inherit`{.literal} 选项来启用继承。
    :::
:::
:::
::: section
::: titlepage
# []{#monitoring-application-performance-with-perf_monitoring-and-managing-system-status-and-performance.html#capturing-call-graph-data-with-perf-record_monitoring-application-performance-with-perf}使用 perf 记录捕获调用图形数据 {.title}
:::
您可以配置 `perf 记录`{.literal}
工具，以便它可以记录哪些功能正在调用性能配置集中的其他功能。这有助于识别多个进程调用同一功能时的瓶颈。
::: itemizedlist
**先决条件**
-   安装 `perf`{.literal} 用户空间工具。如需更多信息，请参阅 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}。
:::
::: itemizedlist
**流程**
-   使用 `--call-graph`{.literal} 选项的示例和记录性能数据：
    ``` screen
    $ perf record --call-graph method command
    ```
    ::: itemizedlist
    -   使用您要 `在其中`{.literal} 的示例数据的命令替换
        command。如果您没有指定命令，则 `perf 记录`{.literal}
        会对数据进行抽样，直到您通过按
        [**Ctrl**]{.keycap}+[**C**]{.keycap} 手动停止它。
    -   使用以下解压缩方法之一替换 [*方法*]{.emphasis} ：
        ::: variablelist
        [`fp`{.literal}]{.term}
        :   使用帧指针方法。根据编译器优化，例如使用 GCC
            选项构建的二进制文件
            `--fomit-frame-pointer`{.literal}，这可能无法解压堆栈。
        [`dwarf`{.literal}]{.term}
        :   使用 DWARF 调用信息来取消堆栈。
        [`lbr`{.literal}]{.term}
        :   在 Intel 处理器上使用最后一个分支记录硬件。
        :::
    :::
:::
::: itemizedlist
**其它资源**
-   `perf-record(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#monitoring-application-performance-with-perf_monitoring-and-managing-system-status-and-performance.html#analyzing-perf-data-with-perf-report_monitoring-application-performance-with-perf}使用 perf 报告分析 perf.data {.title}
:::
您可以使用 `perf 报告`{.literal} 来显示和分析 `perf.data`{.literal}
文件。
::: itemizedlist
**先决条件**
-   安装 `perf`{.literal} 用户空间工具。如需更多信息，请参阅 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}。
-   当前目录中有一个 `perf.data`{.literal} 文件。
-   如果 `perf.data`{.literal} 文件是使用 root
    访问权限创建的，则您需要使用 root 访问权限运行
    `perf 报告`{.literal}。
:::
::: itemizedlist
**流程**
-   显示 `perf.data`{.literal} 文件的内容，以进一步分析：
    ``` screen
    # perf report
    ```
    这个命令会显示类似如下的输出：
    ``` screen
    Samples: 2K of event 'cycles', Event count (approx.): 235462960
    Overhead  Command          Shared Object                     Symbol
       2.36%  kswapd0          [kernel.kallsyms]                 [k] page_vma_mapped_walk
       2.13%  sssd_kcm         libc-2.28.so                      [.] memset_avx2_erms 2.13% perf [kernel.kallsyms] [k] smp_call_function_single 1.53% gnome-shell libc-2.28.so [.] strcmp_avx2
       1.17%  gnome-shell      libglib-2.0.so.0.5600.4           [.] g_hash_table_lookup
       0.93%  Xorg             libc-2.28.so                      [.] memmove_avx_unaligned_erms 0.89% gnome-shell libgobject-2.0.so.0.5600.4 [.] g_object_unref 0.87% kswapd0 [kernel.kallsyms] [k] page_referenced_one 0.86% gnome-shell libc-2.28.so [.] memmove_avx_unaligned_erms
       0.83%  Xorg             [kernel.kallsyms]                 [k] alloc_vmap_area
       0.63%  gnome-shell      libglib-2.0.so.0.5600.4           [.] g_slice_alloc
       0.53%  gnome-shell      libgirepository-1.0.so.1.0.0      [.] g_base_info_unref
       0.53%  gnome-shell      ld-2.28.so                        [.] _dl_find_dso_for_object
       0.49%  kswapd0          [kernel.kallsyms]                 [k] vma_interval_tree_iter_next
       0.48%  gnome-shell      libpthread-2.28.so                [.] pthread_getspecific 0.47% gnome-shell libgirepository-1.0.so.1.0.0 [.] 0x0000000000013b1d 0.45% gnome-shell libglib-2.0.so.0.5600.4 [.] g_slice_free1 0.45% gnome-shell libgobject-2.0.so.0.5600.4 [.] g_type_check_instance_is_fundamentally_a 0.44% gnome-shell libc-2.28.so [.] malloc 0.41% swapper [kernel.kallsyms] [k] apic_timer_interrupt 0.40% gnome-shell ld-2.28.so [.] _dl_lookup_symbol_x 0.39% kswapd0 [kernel.kallsyms] [k] raw_callee_save___pv_queued_spin_unlock
    ```
:::
::: itemizedlist
**其它资源**
-   `perf-report(1)`{.literal} man page
:::
:::
:::
[]{#creating-uprobes-with-perf_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#creating-uprobes-with-perf_monitoring-and-managing-system-status-and-performance.html#creating-uprobes-with-perf_monitoring-and-managing-system-status-and-performance}第 24 章 使用 perf 创建 uprobe {.title}