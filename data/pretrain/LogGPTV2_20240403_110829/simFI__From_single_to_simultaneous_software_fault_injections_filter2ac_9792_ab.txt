For the example foo(a,b), 2bitlength(a) + 2bitlength(b)
possible FZ injections and 2bitlength(a)+bitlength(b) possible
FuzzFuzz injections exist. Even for the FZ model an exhaustive
evaluation covering all possible input combinations is impracti-
cable. We restrict ourselves to 30 experiments for each parame-
ter targeted by FZ and each parameter combination targeted by
FuzzFuzz. This restriction is based on a stability ﬁnding from
Johansson et al. [4], who report error propagation measures
to stabilize for the considered CUE after approximately 10
injections.
2) The Simultaneous FuzzBF Model: Johansson et al. re-
port the fuzzing and bit ﬂip models to perform well in robust-
ness evaluations of the considered CUE [4]. We combine these
models for injection experiments in a simultaneous model:
Upon invocation of services with two or more parameters,
FZ is applied to one parameter value and BF to another.
The spatial resolution of the FuzzBF simultaneity is, as for
the FuzzFuzz model, different parameters of the same service
call. The considered temporal usage sequence is an individual
service invocation.
a
For
service
invocation foo(a,b) there
exist
2bitlength(a) + 2bitlength(b) possible test cases for individual
fuzzing injections and bitlength(a) + bitlength(b) possible
individual bit ﬂips. For
the amount
to (2bitlength(a) − 1) ∗
of possible test cases expands
bitlength(b) + (2bitlength(b) − 1) ∗ bitlength(a). This
considers that all single bit ﬂip cases for a parameter are
contained in the number of possible Fuzzing values.
the FuzzBF model
3) The Simultaneous SimBF Model: As opposed to the
FuzzFuzz and FuzzBF models, the SimBF model has a spatial
resolution of individual data elements of which a parameter
value in a service invocation is composed: We are ﬂipping
two bits in the binary value of the same parameter.
2
2
a
For
service
(cid:1) + (cid:0)bitlength(b)
invocation foo(a,b) there
exist
bitlength(a) + bitlength(b) possible single bit ﬂips and
(cid:0)bitlength(a)
(cid:1) possible SimBF test cases. This
may still result
in large (polynomial) test case numbers,
but exhaustive testing is feasible. Although multi-bit fault
models have been applied in previous work before (e.g.,
[30]), they have not been discussed as simultaneous single-bit
faults and their efﬁciency has, therefore, not been assessed
comparatively.
From the differing applicability of the fuzzing and bit ﬂip
models to different spatial resolutions, we observe that the
fault type and the fault location are not independent from each
other. These dimensions have often been considered orthogo-
nal in the literature. If the spatial resolution (i.e., the considered
location) of an injection is an individual parameter, simultane-
ous fuzzing would not differ from non-simultaneous fuzzing
as previously discussed. For bit ﬂips instead, it is possible
to differentiate between simultaneous and non-simultaneous
injections into the same parameter value. The reason is that the
non-simultaneous fuzzing and bit ﬂip fault models are deﬁned
according to different spatial resolutions.
C. Evaluation Criteria
To evaluate the efﬁciency of the simultaneous fault models,
we utilize four previously proposed metrics [29] and add
a discussion of simultaneous fault interactions in terms of
masking and ampliﬁcation compared to single faults.
Coverage and unique coverage: We deﬁne the coverage
of a fault model as the fraction of services in the interface
under evaluation that the fault model identiﬁes as vulnerable
or faulty. In order to distinguish between distinct sets of
identiﬁed services that comprise equal numbers of services,
unique coverage is deﬁned as the fraction of services that no
other model identiﬁes as vulnerable or faulty among the set of
compared models.
Injection efﬁciency: The fraction of experiments that
resulted in a failure of a speciﬁc class (AE, AH, SC).
Average execution time: The amount of time required for
one injection run.
Implementation complexity: The effort required to im-
plement the model measured as delivered source instructions
(DSI; the number of physical source lines of code excluding
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:56:01 UTC from IEEE Xplore.  Restrictions apply. 
comments and test code) and the accumulated cyclomatic
complexity [31] of all code speciﬁc to the model.
In order to analyze masking and ampliﬁcation effects of
simultaneously injected faults relative to single fault injections,
we investigate where the combination of two individual faults
leads to an outcome that differs from the outcomes for the
individual injections (C4).
Masking and ampliﬁcation: To measure the amount of
masking and ampliﬁcation due to simultaneous injections, we
investigate the failure class distributions for each spatial entity,
for which simFI experiments are conducted. We compare the
obtained distributions against the failure class distributions of
experiments with the single faults, from which the simultane-
ous faults have been composed. If fewer failures are observed
for the simultaneous cases than for any of the corresponding
single faults, masking has taken place. If we observe higher
failure rates in the simultaneous cases, ampliﬁcation has taken
place.
In order to obtain reliable results for the masking and
ampliﬁcation analyses of models that
involve fuzzing, we
additionally perform single injection experiments for each
random value used in a simultaneous fuzzing experiment and
compare the outcomes. This is necessary, as the application of
fuzzing may result in different random values for the single
and simultaneous injections, which would lead to incomparable
results and, hence, render the proposed approximations of
masking and ampliﬁcation invalid.
D. Experimental Results: Exploring Simultaneous Injections
We compare the effects of all fault models targeting inter-
actions of a serial port driver and the OS kernel. We have per-
formed a number of additional experiments using an Ethernet
driver, evaluating all fault models except for the SimBF model.
As previously mentioned, we performed exhaustive testing
with this model. However, this resulted in more than 34000
individual injection runs taking up two months of experiment
run-time for only this model and for only the serial driver.
Thus, we have restricted our experiments with this model to
the serial port driver. Despite this restriction, we are only able
to discuss a fraction of our extensive experimental results to
illustrate our ﬁndings due to space limitations. Supplemental
experimental results are made available on our web page [32].
1) Coverage and unique coverage: Figures 4 to 6 show
the coverage and unique coverage measures for the three
considered failure classes (AE, AH, SC) obtained from a
comparative evaluation of all six fault models (grouped by
the three targeted interfaces) using the serial port driver. The
unique coverage is indicated as a fraction of the coverage in
the bar diagrams. Neither the FuzzFuzz model nor the FuzzBF
model achieve particularly high coverages. This occurs as
these models target injections into two distinct parameters and
therefore (by deﬁnition) cannot cover any service taking less
than two input parameters, while the other evaluated models
can. For the same reason, FuzzFuzz and FuzzBF cannot cover
any services of the export interface. Data communicated to
the kernel via this interface are return values of services
offered by the driver. As return values are considered as a
single parameter, FuzzFuzz and FuzzBF cannot be applied for
injections in the export interface.
Unique Fraction
e
g
a
r
e
v
o
C
 1
 0.8
 0.6
 0.4
 0.2
 0
B
D
F
F
F
B
D
F
F
F
B
D
F
F
F
F
T
Z
u
u
F
T
Z
u
u
F
T
Z
u
u
S
i
z
z
z
z
m
B
F
B
u
F
F
z
z
S
i
z
z
z
z
m
B
F
B
u
F
F
z
z
S
i
z
z
z
z
m
B
F
B
u
F
F
z
z
COREDLL
CEDDK
Export
Fig. 4: (Unique) coverage of AE vulnerabilities using the serial
driver
Unique Fraction
e
g
a
r
e
v
o
C
 1
 0.8
 0.6
 0.4
 0.2
 0
B
D
F
F
F
B
D
F
F
F
B
D
F
F
F
F
T
Z
u
u
F
T
Z
u
u
F
T
Z
u
u
S
i
z
z
z
z
m
B
F
B
u
F
F
z
z
S
i
z
z
z
z
m
B
F
B
u
F
F
z
z
S
i
z
z
z
z
m
B
F
B
u
F
F
z
z
COREDLL
CEDDK
Export
Fig. 5: (Unique) coverage of AH vulnerabilities using the serial
driver
Unique Fraction
e
g
a
r
e
v
o
C
 1
 0.8
 0.6
 0.4
 0.2
 0
B
D
F
F
F
B
D
F
F
F
B
D
F
F
F
F
T
Z
u
u
F
T
Z
u
u
F
T
Z
u
u
S
i
z
z
z
z
m
B
F
B
u
F
F
z
z
S
i
z
z
z
z
m
B
F
B
u
F
F
z
z
S
i
z
z
z
z
m
B
F
B
u
F
F
z
z
COREDLL
CEDDK
Export
Fig. 6: (Unique) coverage of SC vulnerabilities using the serial
driver
Error Model
FuzzFuzz
FZ(cid:13)
e
g
a
r
e
v
o
C
e
u
q
i
n
U
 1
 0.8
 0.6
 0.4
 0.2
 0
AE
AH
SC
Failure Class
Fig. 7: Unique coverages of FuzzFuzz & FZ evaluating the
COREDLL interface using the serial driver
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:56:01 UTC from IEEE Xplore.  Restrictions apply. 
e
g
a
r
e
v
o
C
e
u
q
i
n
U
 1
 0.8
 0.6
 0.4
 0.2
 0
Error Model
FuzzBF
FZ