# 恶意软件逆向分析：Burp Suite 序列号生成器后门剖析
##### 译文声明
本文为翻译文章，原作者 lkw，来源：0x00sec.org。译文仅供参考，具体内容和含义以原文为准。
> **免责声明**：本文中包含病毒样本的处理存在一定的安全风险，后果自负。建议在条件允许的情况下使用虚拟机来运行该样本。

### 特别鸣谢
感谢吾爱破解论坛提供无后门的安全版本。
- **Burp Suite Pro Loader & Keygen By surferxyz（附带v1.7.31原版）**
- **链接**：[https://www.52pojie.cn/thread-691448-1-1.html](https://www.52pojie.cn/thread-691448-1-1.html)
- **出处**：吾爱破解论坛

## 一、前言
一位昵称为 @the_heat_man 的新用户多次在多个论坛上发布了一些文件（由于多次被删除），声称这些文件是 Burp Suite 的序列号生成器（Keygen）。许多用户怀疑这些文件可能是恶意软件。我和 @Leeky、@dtm、@Cry0l1t3 以及 @L0k1 决定对这款软件进行逆向分析，验证我们的猜测。令人惊讶的是，尽管该工具确实包含了一个远程访问木马（RAT, Remote Access Trojan），但也确实包含了一个可用的序列号生成器。因此，出于法律考虑，本文不会提供原始文件的具体链接。

## 二、木马分析
接下来我们将详细分析这个 RAT。

### 文件结构
在 keygen 中包含一个名为 `virus.txt` 的文件，其内容是一个指向 VirusTotal 对 keygen JAR 文件扫描结果的网页链接。然而，VirusTotal 上显示的哈希值与实际文件不匹配，表明该网站实际上扫描的是另一个文件。

- **VirusTotal 哈希值**：
  - SHA-256: 6530b29367de2b0fa42c411f94ae734d745443256431aee0fe221acb7a75c103
- **实际文件哈希值**：
  - SHA-256: 1bf764e77a543def4c623e6e207b1b72999f6550cf49651b88d53f80ae10e4d7

JAR 文件本质上是 ZIP 文件，因此我们可以使用 `unzip` 命令解压它：

```bash
cp burp-loader-keygen1.7.31.jar burp-loader-keygen1.7.31.zip
unzip burp-loader-keygen1.7.31.zip
```

解压后的目录结构如下：

- META-INF/
  - MANIFEST.MF
- burploader/
  - Burploader.class
  - Data.bin

### 反编译分析
我们使用 `jad` 工具反编译 `Burploader.class` 文件。以下是反编译后的关键 Java 代码片段：

```java
// 反编译后的关键代码
```

在这部分代码之前，有一个经过 Base64 编码的另一个 JAR 文件，其中包含序列号生成器。编码后的文件存储在变量 `m` 中，解码函数将其写入 `Data.jar` 文件。

此外，代码中还包含一些 PowerShell 命令，用于下载并执行一个 PowerShell 脚本，脚本地址为 `http://imonty.cn/wp-includes/pomo/script/dcss/js.js`（虽然扩展名为 `.js`，但实际上是一个 PowerShell 脚本）。

### 下载并分析脚本
我们可以下载这个脚本，并查看其内容。脚本的主要功能是将两个新文件释放到新创建的 `C:\ProgramData\WindowsNT` 目录中：

1. `WindowsNT.ini`
2. `WindowsNT.vbs`

随后，恶意代码会运行 VBScript `co.vbs`。我们来看一下这个脚本的内容：

```vb
' 经过混淆的 VBScript 代码
```

为了去混淆这段代码，我们可以将执行语句替换为打印语句。显然，这段代码中的执行语句是 `EVAL(ExEcUTE(www))`。通过将 `EVAL(ExEcUTE(www))` 替换为 `wscript.echo www`，我们可以打印出字符串。

### 解析 PowerShell 脚本
脚本的功能是使用 PowerShell 运行另一个文件 `co.js`（保存为 `WindowsNT.ini`）。我们来看一下 `co.js` 的内容。

由于文件较大，我将其上传到了 GitHub 上：

- **链接**：[GitHub Gist](https://gist.githubusercontent.com/lkw657/f2dfae7f73267c8114de039a60efcb51/raw/e7b622c0385b48a3f727cb9b97fbf2b34966a5d5/co.ps1.gz.b64)

在上传之前，我对文件进行了 gzip 和 Base64 处理。你可以使用以下命令恢复原始代码：

```bash
cat co.ps1.gzip.b64 | base64 -d | gunzip > co.ps1
```

此外，我将 `co.js` 重命名为 `co.ps1`，以便在 PowerShell 中使用 `./` 方式运行。

`iex`（全称 `invoke-expression`）函数可以用来执行 PowerShell 代码，因此我们需要使用 `write-output` 来替换该函数，打印出结果，再次运行该文件。

修改后的代码如下所示：

```powershell
# 修改后的 PowerShell 代码
```

由于我在新的虚拟机环境中运行这段代码，因此我需要允许执行不受信任的 PowerShell 脚本。以管理员身份运行 PowerShell：

```powershell
PS E:\burp\burploader> ./co.ps1 > co.2.ps1
```

我也将生成的文件上传到了 GitHub 上：

- **链接**：[GitHub Gist](https://gist.githubusercontent.com/lkw657/aa4cb19b3b7b5ccd55c846a59b3c07bf/raw/572ae9cff6747c45c2880f655139c4aebe0ff266/co.2.ps1.gz.b64)

生成的文件同样经过混淆处理。该文件的开头部分如下所示：

```powershell
# 生成的 PowerShell 代码
```

这一次代码没有使用 `iex`，而是调用 `Invoke-Expression`，我们同样可以使用 `write-output` 来替换该函数。再次运行这个文件：

```powershell
PS E:\burp\burploader> ./co.2.ps1 > co.3.ps1
```

大家可以访问 [此处](https://gist.githubusercontent.com/lkw657/bbbf4df3c2aa92f59cdd856643409d0f/raw/171f282ad627db264f279ca10644cda285acb284/co.3.ps1.gz.b64) 获取生成的文件。

### 代码分析
首先需要注意的是，新的文件包含三个部分，由空行分开。我将其分成三个小文件，逐一处理这些文件。

#### 第一部分
该部分的结尾处如下所示：

```powershell
# 结尾代码
```

这一次我们并没有看到熟悉的 `invoke-expression`，但由于代码会在最后执行，因此调用操作很可能出现在结尾处。在这种情况下，由于左侧只包含一个括号，我们来分析一下管道右侧的语句，即 `.( $PsHOmE[21]+$PShOMe[30]+'X')`。

我们看一下 `$PsHOmE[21]+$PShOMe[30]+'X'` 的执行结果：

```powershell
PS E:\burp\burploader> $PsHOmE[21]+$PShOMe[30]+'X'
ieX
```

因此，我们需要使用 `write-output` 来替换 `.( $PsHOmE[21]+$PShOMe[30]+'X')`。生成的结果更加复杂，我们需要重复类似操作。

#### 第二部分
第二部分的开头为 `[String]::JoIN('',( [Char[]]( 127 ,105 ...`。

我们将继续深入分析每个部分，逐步揭开恶意代码的真实面目。