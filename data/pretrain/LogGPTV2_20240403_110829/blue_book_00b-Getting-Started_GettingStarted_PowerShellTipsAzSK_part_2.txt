```PowerShell
PS C:\> Get-Command -Name *Subscription* -Module AzSK
CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        Get-AzSKSubscriptionSecurityStatus                 3.11.0     AzSK
Function        Remove-AzSKSubscriptionRBAC                        3.11.0     AzSK
Function        Remove-AzSKSubscriptionSecurity                    3.11.0     AzSK
Function        Repair-AzSKSubscriptionSecurity                    3.11.0     AzSK
Function        Set-AzSKSubscriptionRBAC                           3.11.0     AzSK
Function        Set-AzSKSubscriptionSecurity                       3.11.0     AzSK
Function        Update-AzSKSubscriptionSecurity                    3.11.0     AzSK  
```
###### Get all commands from *any* available module (not just AzSK) that start with 'Backup'
```PowerShell
PS C:\> Get-Command -name Backup*
CommandType     Name                                               Version    Source               
-----------     ----                                               -------    ------               
Function        Backup-BitLockerKeyProtector                       1.0.0.0    BitLocker
Function        BackupToAAD-BitLockerKeyProtector                  1.0.0.0    BitLocker             
Cmdlet          Backup-AzApiManagement                             1.0.0      Az.ApiManagement     
Cmdlet          Backup-AzKeyVaultCertificate                       1.0.0      Az.KeyVault              
Cmdlet          Backup-AzKeyVaultKey                               3.1.0      Az.KeyVault     
Cmdlet          Backup-AzKeyVaultManagedStorageAccount             4.1.0      Az.KeyVault              
Cmdlet          Backup-AzKeyVaultSecret                            4.1.0      Az.KeyVault  
```
[Back to top...](GettingStarted_PowerShellTipsAzSK.md#list-of-tips)
### Use Get-Help
You can use the 'Get-Help' command to get help about any command. Usually specifying the "-Detailed" parameter is a good idea. 
```PowerShell
PS C:\> Get-Help Update-AzSKContinuousAssurance -Detailed
NAME
    Update-AzSKContinuousAssurance
SYNOPSIS
    This command would help in updating user configurable properties of Continuous Assurance 
    Automation Account in your subscription
SYNTAX
    Update-AzSKContinuousAssurance -SubscriptionId  -TargetSubscriptionIds  
    [-ResourceGroupNames ] [-LAWSId ] [-LAWSSharedKey ] 
    [-AzureADAppName ] [-FixRuntimeAccount] [-FixModules] [-DoNotOpenOutputFolder] 
    [-LoggingOption {Central | Self | Both}] -Preview []
    Update-AzSKContinuousAssurance -SubscriptionId  [-ResourceGroupNames ] 
    [-LAWSId ] [-LAWSSharedKey ] [-AzureADAppName ] 
    [-FixRuntimeAccount] [-FixModules] [-DoNotOpenOutputFolder] []
DESCRIPTION
    This command is helpful if you want to update any of the following properties. 1. App Resource 
    Groups 2. Log Analytics Workspace ID 3. Log Analytics Workspace Shared Key
    4. Connection in Run as Account 5. Update/Renew Certificate in Run as Account
PARAMETERS
    -SubscriptionId 
        Subscription id in which Automation Account exists
    -TargetSubscriptionIds 
...
...
...
```
[Back to top...](GettingStarted_PowerShellTipsAzSK.md#list-of-tips)
### Avoid Module Version Conflicts
PowerShell works on the simple notion of sessions (mostly) text-based script modules loaded in memory. 
Each PS console you open is an independent session. By default, whenever you use some command, PS looks 
for the module that supports it and loads the newest version of the module available in the PS module path ($env:PSModulePath).
You can see the modules that are loaded in the current session using "Get-Module"
```PowerShell
PS C:\> Get-Module
ModuleType Version    Name                                ExportedCommands                       
---------- -------    ----                                ----------------                       
Script     3.11.0     AzSK                                {Clear-AzSKSessionState, Get-AzSKAcc...
Script     1.2.1      Az.Accounts                         {Add-AzEnvironment, Clear-AzContext,...
Script     1.0.0      Az.AnalysisServices                 {Add-AzAnalysisServicesAccount, Expo...
Script     1.0.0      Az.ApiManagement                    {Add-AzApiManagementApiToProduct, Ad...
Script     1.0.0      Az.ApplicationInsights              {Get-AzApplicationInsights, Get-AzAp...
Script     1.0.0      Az.Automation                       {Export-AzAutomationDscConfiguration...
Script     1.0.0      Az.Batch                            {Disable-AzBatchAutoScale, Disable-A...        
Script     1.0.0      Az.Cdn                              {Confirm-AzCdnEndpointProbeURL, Disa...             
Script     1.1.0      Az.Compute                          {Add-AzContainerServiceAgentPoolProf...             
Script     1.0.0      Az.ContainerInstance                {Get-AzContainerGroup, Get-AzContain...                          
Script     1.0.0      Az.ContainerRegistry                {Get-AzContainerRegistry, Get-AzCont...
Script     1.0.0      Az.DataFactory                      {Get-AzDataFactory, Get-AzDataFactor...                
Script     1.0.0      Az.DataLakeAnalytics                {Add-AzDataLakeAnalyticsDataSource, ...
Script     1.0.1      Az.DataLakeStore                    {Add-AzDataLakeStoreFirewallRule, Ad...
Script     1.0.0      Az.EventHub                         {Get-AzEventHub, Get-AzEventHubAutho...        
Script     1.0.0      Az.HDInsight                        {Add-AzHDInsightClusterIdentity, Add...
Script     1.0.0      Az.KeyVault                         {Add-AzKeyVaultCertificate, Add-AzKe...   
Script     1.1.0      Az.LogicApp                         {Get-AzIntegrationAccount, Get-AzInt...
Script     1.0.0      Az.Monitor                          {Add-AzAutoscaleSetting, Add-AzLogPr...                               
Script     1.0.0      Az.Network                          {Add-AzApplicationGatewayAuthenticat...
Script     1.0.0      Az.NotificationHubs                 {Get-AzNotificationHub, Get-AzNotifi...
Script     1.0.0      Az.OperationalInsights              {Disable-AzOperationalInsightsIISLog...
Script     1.0.0      Az.PolicyInsights                   {Get-AzPolicyEvent, Get-AzPolicyReme...                               
Script     1.0.0      Az.RedisCache                       {Export-AzRedisCache, Get-AzRedisCac...                              
Script     1.1.0      Az.Resources                        {Add-AzADGroupMember, Export-AzResou...                               
Script     1.0.0      Az.ServiceBus                       {Complete-AzServiceBusMigration, Get...
Script     1.0.0      Az.ServiceFabric                    {Add-AzServiceFabricApplicationCerti...
Script     1.0.1      Az.Sql                              {Add-AzSqlDatabaseToFailoverGroup, A...
Script     1.0.1      Az.Storage                          {Add-AzRmStorageContainerLegalHold, ...
Script     1.0.0      Az.StreamAnalytics                  {Get-AzStreamAnalyticsDefaultFunctio...
Script     1.0.0      Az.TrafficManager                   {Add-AzTrafficManagerCustomHeaderToE...
Script     1.0.1      Az.Websites                         {Edit-AzWebAppBackupConfiguration, E... 
Script     1.0.0.0    ISE                                 {Get-IseSnippet, Import-IseSnippet, ...
Manifest   3.1.0.0    Microsoft.PowerShell.Management     {Add-Computer, Add-Content, Checkpoi...
Manifest   3.0.0.0    Microsoft.PowerShell.Security       {ConvertFrom-SecureString, ConvertTo...
Manifest   3.1.0.0    Microsoft.PowerShell.Utility        {Add-Member, Add-Type, Clear-Variabl...
Manifest   3.0.0.0    Microsoft.WSMan.Management          {Connect-WSMan, Disable-WSManCredSSP...
Binary     1.1.0.0    PSScheduledJob                      {Add-JobTrigger, Disable-JobTrigger,...
Manifest   2.0.0.0    PSWorkflow                          {New-PSWorkflowExecutionOption, New-...
```
You can also check for a specific module using "Get-Module 'module-name'"
```PowerShell
PS C:\> Get-Module AzSK
ModuleType Version    Name                                ExportedCommands                       
---------- -------    ----                                ----------------                       
Script     3.11.0     AzSK                                {Get-AzSKAccessToken, Get-AzSKAzur...
```
Version conflicts happen if, due to some action, multiple versions of the same module get loaded within a single session.
For example, you may notice that a new version of AzSK is available (based on a warning from a scan command)
and use "iwr..." to install the latest AzSK module from the **same** session. Because, towards the end of 
the installation, we actually load the latest installed module, we will have 2 different versions of AzSK
loaded in memory. This causes type conflicts (a new command is run, it looks for some classes and finds them
in memory - only that they are from the previous version and may not have the same type definitions that 
the new command is banking on.) This usually manifests itself with a message such as:
```
PS C:\>
Error: The property 'Xyz' cannot be found on this object. Verify that the property exists.
```
The remedy for this is to run a fresh installation using the "iwr" command in a *fresh* PS session. 
Another common version conflict happens if you have many (old) versions of Az installed. Az is 
a core dependency for AzSK. If a different version of Az is loaded in a session and an AzSK command is
run, it may struggle to find the type information it is counting on for one or more Azure resource types. (For e.g., 
a Storage object from an old Az version will not have the fileEncryption property exposed.) 
An easy way you can get into this situation is if you are using the 'Command Add-on' pane. It often shows many
options for basic commands like 'Connect-AzAccount'. You may choose any one of them thinking they are
the same thing. Even if that may be the case, choosing to run one of them will cause the corresponding version
of Az to get loaded into your session. If that's not the version AzSK needs, then the same type conflict
issue will pop up as soon as you start using AzSK commands.
An easy remedy for this is to ensure that the correct version of Az gets loaded by using any of these options: 
1) Do an "Import-Module AzSK" first thing after opening a new PS session. This will internally load the correct Az.
2) Else, run any AzSK command (e.g., Get-AzSKSubscriptionSecurityStatus). This will trigger the Azure login flow and cause the correct Az to get loaded.
3) Else, explicitly load the Az version required for AzSK (currently it is 1.1.0) using 'Import-Module Az -Version 1.1' first thing in a new session.
[Back to top...](GettingStarted_PowerShellTipsAzSK.md#list-of-tips)
### Listing your subscriptions
A lot of AzSK commands need you to specify subscription ID. To get the subscription ID for any particular subscription
you needn't go to the portal. The following command can quickly list all subscriptions by their name and subscription ID.
```PowerShell
PS C:\> Get-AzSubscription | FT Name, Id
Name                                        Id                                  
----                                        --                                  
MSFT-SRA-05                                 0e2abcde-f012-3456-7890-abcdef01234f
MSFT-SRA-04                                 2fedc012-3456-7890-abcd-ef0123456479
MSFT-SRA-06                                 8feabcde-f012-3456-7890-abcdef012345
MSFT-SRA-02                                 afeabcde-f012-3456-7890-abcdef012348
DSRE-DevTest-Subscription-01                cfeabcde-f012-3456-7890-abcdef01234d
...
...
```
Note that the pipe character "|" is used to send the output of the Get-AzSubscription command to a formatting helper "FT".
Here FT is short for "Format-Table" which lets us pick specific fields to display in tabular form. So the overall command means
"Get a list of subscriptions I have access to and show them in tabular form, only displaying the Name and Id fields for each."
If you do not specify the "| FT Name, Id" part, you will get the output in a list format as below:
```PowerShell
PS C:\> Get-AzSubscription
Name     : MSFT-SRA-05
Id       : 0feabcde-f012-3456-7890-abcdef01234f
TenantId : 7fedcba0-1234-8765-abcd-f01234567897
State    : Enabled
Name     : MSFT-SRA-04
Id       : 2feabcde-f012-3456-7890-abcdef012349
TenantId : 7fedcba0-1234-8765-abcd-f01234567897
State    : Enabled
Name     : MSFT-SRA-06
Id       : 8feabcde-f012-3456-7890-abcdef012345
TenantId : 7fedcba0-1234-8765-abcd-f01234567897
State    : Enabled
```
Note that because we did not specify any field selectors, all default fields of each subscription are displayed in the list.
If we were interested only in the name and tenant id in *list* format, we would run "Get-AzSubscription | FL Name, TenantId".
The "| FT" and "| FL" options are very handy in many other situations. We will see some more examples below.
[Back to top...](GettingStarted_PowerShellTipsAzSK.md#list-of-tips)
### Switching to another subscription
Normally, the AzSK command that you run will switch your context to the subscription ID you specified. If you explicitly want
to switch to some subscription (e.g., to run Az commands to examine resources in that subscription), you can do so using either of
the Select-AzContext or Set-AzContext commands (both take either subscriptionName or subscriptionId as a parameter).
```PowerShell
PS C:\> Select-AzContext -Name 'MSFT-SRA-04'