# Title: JGRE: An Analysis of JNI Global Reference Exhaustion Vulnerabilities in Android

## Authors
Yacong Gu<sup>∗†</sup>, Kun Sun<sup>‡</sup>, Purui Su<sup>∗§</sup>, Qi Li<sup>†</sup>, Yemian Lu<sup>∗</sup>, Dengguo Feng<sup>∗</sup>, Lingyun Ying<sup>∗§</sup>

- <sup>∗</sup>Institute of Software, Chinese Academy of Sciences
- <sup>†</sup>Graduate School at Shenzhen, Tsinghua University
- <sup>‡</sup>Department of Information Sciences and Technology, George Mason University
- <sup>§</sup>University of Chinese Academy of Sciences

Contact: {guyacong, luyemian, feng}@tca.iscas.ac.cn, {purui, lingyun}@iscas.ac.cn

## Abstract
The Android system employs a permission-based security model to restrict unauthorized apps from accessing system services. However, this model cannot prevent authorized apps from sending excessive service requests, thereby exhausting the limited system resources allocated to each service. As references from native code to Java objects, JNI Global References (JGR) are prone to memory leaks since they are not automatically garbage collected. JGR exhaustion can lead to process aborts or even Android system reboots when the victim process cannot handle the JGR requests triggered by malicious apps through inter-process communication (IPC).

In this paper, we conduct a systematic study of JGR exhaustion (JGRE) attacks against all system services in Android. Our experimental results show that out of 104 system services in Android 6.0.1, 32 services have 54 vulnerabilities. Notably, 22 services can be successfully attacked without any permissions. After reporting these vulnerabilities to the Android security team and receiving confirmation, we analyze the existing ad hoc countermeasures. Surprisingly, among the 10 protected services, 8 are still vulnerable to JGRE attacks. Finally, we develop an effective defense mechanism to mitigate all identified JGRE attacks by leveraging Android's low memory killer (LMK) mechanism.

## I. Introduction
Smartphones play an increasingly important role in our daily lives. Android, one of the two most popular mobile operating systems, is used by over one billion users. Due to its popularity and open-source nature, Android has become a target for various malicious attacks, such as private data leakage, application repackaging, and component hijacking.

Android adopts a permission-based security model to restrict unauthorized access to critical system services. However, this model only provides coarse-grained access control, allowing or denying app access to system resources, but it does not enforce fine-grained control over the amount of resources an app may consume. This limitation makes Android susceptible to resource exhaustion-based Denial of Service (DoS) attacks.

Java Native Interface (JNI) enables Java code to call and be called by native applications and libraries written in other languages like C, C++, or assembly. JNI uses two types of references: local references, which are valid for the duration of a native method call and are automatically freed, and global references (JGR), which remain valid until explicitly freed. Malicious apps can exhaust JGR via IPC, leading to process aborts or system reboots when the number of JGR exceeds a system threshold (i.e., 51200).

The Android team has addressed some JGRE vulnerabilities in specific services, but these ad hoc defenses are insufficient. In this paper, we perform a comprehensive analysis of JGRE vulnerabilities in Android, develop a four-step JGRE analysis method, and propose a real-time defense mechanism.

## II. JGRE Attacks
### A. Background
JNI is part of the Java SDK, allowing Java code to use native code and vice versa. JNI divides references into local and global references. Local references are valid for the duration of a native method call, while global references remain valid until explicitly freed.

System services in Android provide IPC interfaces, and many of these interfaces create new JGR entries after receiving service requests. Each process has a dedicated Android runtime with a JGR threshold of 51200. When a malicious app causes a process to exceed this threshold, the process aborts. We term this type of DoS attack as a JGRE attack.

Most system services run as threads within the system server process, sharing a single JGR table. If a vulnerable interface in any service exhausts the JGR, the entire system crashes and reboots. For example, the clipboard service, running as a thread in the system server, has a vulnerable IPC interface `addPrimaryClipChangedListener()`. A malicious app can invoke this interface multiple times to exhaust the JGR, causing a system reboot.

### B. Challenges in Defending Against JGRE
The Android permission-based security model lacks fine-grained control over process resources, making it ineffective against JGRE attacks. The Android team has fixed some JGRE vulnerabilities, but a systematic approach to identify and mitigate all potential JGRE attacks is lacking.

There are three main challenges in discovering JGRE vulnerabilities:
1. **Identifying IPC Methods**: Finding all IPC methods accessible by third-party apps.
2. **Tracing Attack Paths**: Identifying all operations on JGR in both Java and native code.
3. **Narrowing Down Vulnerabilities**: Developing a mechanism to identify real JGRE vulnerabilities.

Existing solutions are ad hoc and specific to certain services, lacking a generic countermeasure against all JGRE attacks.

## III. JGRE Analysis Methodology
Figure 1 outlines our methodology for analyzing JGRE vulnerabilities in Android. We aim to identify all vulnerable IPC methods that can be exploited by malicious apps to launch DoS attacks. Our analysis consists of four components: IPC Method Extractor, JGR Entry Extractor, Vulnerable IPC Detector, and JGRE Verification.

### A. IPC Method Extractor
This component finds all IPC methods provided by system services and prebuilt apps. We use SOOT to analyze the compiled class files of AOSP version 6.0.1, extracting all classes' hierarchies and methods. We identify system services that register IPC interfaces through `addService` and `publishBinderService` methods, and also discover native system services that provide IPC interfaces.

### B. JGR Entry Extractor
This component identifies all calls to the JGR add method in both Java and native code. The method `IndirectReferenceTable::Add(uint32_t cookie, mirror::Object* obj)` is used to add JGR entries. Most IPC methods are implemented in Java code, which calls the `IndirectReferenceTable::Add()` method through JNI. For example, the JNI method `android.os.Parcel.readStrongBinder()` calls `Parcel.nativeReadStrongBinder()`, which in turn calls `IndirectReferenceTable::Add()`.

## IV. Conclusion
In summary, we make the following contributions:
- **Systematic Study of JGRE Vulnerabilities**: We analyze the latest Android system, discovering 54 JGRE vulnerabilities in 32 system services and 3 in 2 pre-built apps.
- **Analysis of Current Defenses**: We find that current Android defenses are ad hoc and insufficient.
- **New Defense Mechanism**: We develop a real-time defense mechanism that leverages Android's LMK to mitigate JGRE attacks, demonstrating its effectiveness through experiments.

---

**Note**: The figure and additional sections (e.g., related work, experimental results) are not included in this optimized text. Please ensure to include them in the final document.