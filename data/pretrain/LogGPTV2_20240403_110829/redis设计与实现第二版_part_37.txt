源Sentinel在接收到目标Sentinel返回的命令回复之后，会检查回复中leader
参数分别记录了目标 Sentinel的局部领头 Sentinel的运行ID和配置纪元。
源 Sentinel 返回一条命令回复，回复中的 leader_runid 参数和 leader_epoch
目标 Sentinel 在接收到 SENTINEL is-master-down-by-addr 命令之后，将向
要求都会被目标Sentinel拒绝。
求的源 Sentinel 将成为目标 Sentinel 的局部领头 Sentinel，而之后接收到的所有设置
部领头Sentinel。
Sentinel的运行ID时，这表示源Sentinel要求目标Sentinel将前者设置为后者的局
is-master-down-by-addr 命令，并且命令中的 runid 参数不是*符号而是源
当一个 Sentinel（源Sentinel）向另一个Sentinel（目标 Sentinel）发送 SENTINEL
部领头 Sentinel。
每个发现主服务器进人客观下线的Sentinel都会要求其他Sentinel将自己设置为局
Sentinel的机会，并且局部领头一旦设置，在这个配置纪元里面就不能再更改。
在一个配置纪元里面，所有 Sentinel都有--次将某个 Sentinel设置为局部领头
什么特别的。
（configuration epoch）的值都会自增一次。配置纪元实际上就是一个计数器，并没有
第 16章 
 Sentinel
+239
---
## Page 244
240·第三部分多机数据库的实现
时，它就会成为新的主服务器的从服务器。
主服务器。
作，该操作包含以下三个步骤：
领头Sentinel的选举，然后这个领头Sentinel就可以开始对主服务器执行故障转移操作了。
master-down-by-addr 命令比起其他 Sentinel发送的相同命令都更快到达，并最终胜出
设置成了局部领头 Sentinel。
的 Sentinel 设置为自己的局部领头 Sentinel，并返回类似以下的命令回复：
Sentinel还没有设置局部领头
Sentinel 自已的运行 ID，例如：
16.9
Sentinel 这次发送的命令会带有
down-by-addr 命 令不 同,
送 的 SENTINEL is-master-
如图16-21所示。
master-down-by-addr 命令,
Sentinel 发送 SENTINELis-
三个Sentinel将再次向其他
16-20所示。
SENTINEL
1）在已下线主服务器属下的所有从服务器里面，挑选出一个从服务器，并将其转换为
根据命令请求发送的先后顺序不同，可能会有某个 Sentinel 的 SENTINELis-
和检测客观下线状态时发
那么为了选出领头Sentinel,
3）将已下线主服务器设置为新的主服务器的从服务器，当这个旧的主服务器重新上线
2）让已下线主服务器属下的所有从服务器改为复制新的主服务器。
在选举产生出领头 Sentinel之后，领头Sentinel将对已下线的主服务器执行故障转移操
然后接收到命令回复的 Sentinel 就可以根据这一回复，统计出有多少个 Sentinel 将自己
如果接收到这个命令的
d5e828dbed4fa
955b4c85598ef5b5f055bc7ebf
 SENTINEL is-master-down
3
e955b4c85598ef5b5f055bc7ebfd5e828dbed4fa
故障转移
is-master-down-by-addr 命令确认主服务器进人了客观下线状态，如图
63790
图16-20三个 Sentinel都发现主服务器已经进人了客观下线状态
SENTINEL ...
图16-21
Sentinel A
Sentinel再次向其他 Sentinel发送命令
/SENTINEL ..-
Sentinel C
Sentinel A
主服务器
SENTINEL ..JSENTINEL ...
一
---
## Page 245
利升级为主服务器了。
Sentinel就知道被选中的从服务器已经顺
从原来的 slave变为 master时，领头
色（role）信息，当被升级服务器的role
发送INFO命令，并观察命令回复中的角
时是每十秒一次），向被升级的从服务器
领头Sentinel会以每秒一次的频率（平
server2发送SLAVEOF noone命令的情形。
中，领头Sentinel向被选中的从服务器
从服务器转换为主服务器。
状态良好、数据完整的从服务器，然后向这个从服务器发送 SLAVEOF no one命令，将这个
16.9.1选出新的主服务器
在发送 SLAVEOF no one命令之后，
按照运行ID 对这些从服务器进行排序，并选出其中运行ID 最小的从服务器。
的从服务器（复制偏移量最大的从服务器就是保存着最新数据的从服务器)。
复制偏移量，对具有相同最高优先级的所有从服务器进行排序，并选出其中偏移量最大
并选出其中优先级最高的从服务器。
剩余的从服务器保存的数据都是比较新的。
可以保证列表中剩余的从服务器都没有过早地与主服务器断开连接，换句话说，列表中
时间，而删除断开时长超过 down-after-milliseconds  10 毫秒的从服务器，则
毫秒的从服务器：down-after-milliseconds 选项指定了判断主服务器下线所需的
这可以保证列表中剩余的从服务器都是最近成功进行过通信的。
从服务器都是正常在线的。
以下规则，一项一项地对列表进行过滤：
故障转移操作第一步要做的就是在已下线主服务器属下的所有从服务器中，挑选出一个
之后，领头Sentinel将根据从服务器的优先级，对列表中剩余的从服务器进行排序
图 16-22展示了在一次故障转移操作
最后，如果有多个优先级最高、复制偏移量最大的从服务器，那么领头 Sentinel 将
如果有多个具有相同最高优先级的从服务器，那么领头 Sentinel 将按照从服务器的
3）删除所有与已下线主服务器连接断开超过 down-after-milliseconds10
2 ）删除列表中所有最近五秒内没有回复过领头 Sentinel 的 INFO 命令的从服务器,
1）删除列表中所有处于下线或者断线状态的从服务器，这可以保证列表中剩余的
领头 Sentinel会将已下线主服务器的所有从服务器保存到一个列表里面，然后按照
新的主服务器是怎样挑选出来的
server2
server1
图16-22将 server2升级为主服务器
已下线
server3
SLAVEOF no one
领头 Sentinel
发送命令
server4
第16章 Sentinel
监视
监视
·241
---
## Page 246
242◆第三部分多机数据库的实现
Sentinel 的样子。
从服务器 server3和 server4发送SLAVEOF命令，让它们复制新的主服务器 server2的例子。
实现。
的所有从服务器去复制新的主服务器，这一动作可以通过向从服务器发送SLAVEOF命令来
16.9.2
服务器和领头Sentinel的样子。
功升级为主服务器了。
server2返回的命令回复从：
图16-24 展示了在故障转移操作中，领头 Sentinel向已下线主服务器 serverl 的两个
当新的主服务器出现之后，领头 Sentinel下一步要做的就是，让已下线主服务器属下
图16-23展示了server2升级成功之后，各个
图16-25 展示了server3和 server4成为 server2的从服务器之后，各个服务器以及领头
的时候，领头Sentinel就知道 server2已经成
变为：
# Replication
例如，在图16-22 展示的例子中，领头 Sentinel会一直向 server2 发送 INFO 命令，当
# Other 
role:master
#Replication
# Other sections
role:slave
修改从服务器的复制目标
sections
server3
图16-24让从服务器复制新的主服务器
包下线
server2
server4
监视
领头 Sentinel
SLAVEOF
发送命令
图16-23server2成
serverl
server3
SLAVEOF
发送命令
包下线
领头 Sentinel
 server2
成功升级为主服务器
server4
监视
监视”监视
---
## Page 247
16.10
服务器。
当 server1 重新上线时，Sentinel就会向它发送 SLAVEOF 命令，让它成为 server2 的从
比如说，图 16-26 就展示了被领头 Sentinel 设置为从服务器之后，服务器 server1 的样子。
16.9.3
 Sentinel只是一个运行在特殊模式下的Redis 服务器，它使用了和普通模式不同的命
图 16-26server1 被设置为新主服务器的
因为旧的主服务器已经下线，所以这种设置是保存在server1对应的实例结构里面的，
例如，
故障转移操作最后要做的是，将已下线的主服务器设置为新的主服务器的从服务器。
server2
serverl
1
监视
将旧的主服务器变为从服务器
，图16-27就展示了 server1重新上线并成为 server2的从服务器的例子。
重点回顾
从服务器
Sentinel系统
server3
已下线监视
图16-25server3和 server4成为 server2的从服务器
serverl
 server4
监视
已下线
server2
领头Sentinel
server3
监视
图 16-27server1 重新上线并成为 server2 的
监视
serverl
server2
监视
监视
Sentinel系统
从服务器
server3
监视监视
第16章Sentinel·243
server4
监视
---
## Page 248
244
show/id_XNjQxOTk5MTk2.html，或者 Raft 算法的论文。
●第三部分多机数据库的实现
16.11
Sentinel系统选举领头Sentinel的方法是对Raft算法的领头选举方法的实现，关于这一
口当 Sentinel收集到足够多的主观下线投票之后，它会将主服务器判断为客观下线，并
口当Sentinel将一个主服务器判断为主观下线时，它会向同样监视这个主服务器的其他
口 Sentinel以每秒一次的频率向实例（包括主服务器、从服务器、其他 Sentinel）发送
口 Sentinel只会与主服务器和从服务器创建命令连接和订阅连接，Sentinel与 Sentinel
口对于监视同一个主服务器和从服务器的多个 Sentinel来说，它们会以每两秒一次
口在一般情况下，Sentinel以每十秒一次的频率向被监视的主服务器和从服务器发送
口Sentinel通过向主服务器发送INFO命令来获得主服务器属下所有从服务器的地址信
口Sentinel会读人用户指定的配置文件，为每个要被监视的主服务器创建相应的实例结
Sentinel进行询问，看它们是否同意这个主服务器已经进人主观下线状态。
发起一次针对主服务器的故障转移操作。
定的时长中连续向Sentinel发送无效回复时，Sentinel会将这个实例判断为主观下线，
PING命令，并根据实例对PING 命令的回复来判断实例是否在线，当一个实例在指
之间则只创建命令连接。
并根据这些信息为其他 Sentinel 创建相应的实例结构，以及命令连接。
每个 Sentinel 也会从_sentinel_
Sentinel 宣告自己的存在。
操作时，Sentinel向从服务器发送INFO命令的频率会改为每秒一次。
INFO命令，当主服务器处于下线状态，或者Sentinel正在对主服务器进行故障转移
订阅连接。
送命令请求，而订阅连接则用于接收指定频道的消息。
息，并为这些从服务器创建相应的实例结构，以及连向这些从服务器的命令连接和
构，并创建连向主服务器的命令连接和订阅连接，其中命令连接用于向主服务器发
令表，所以 Sentinel 模式能够使用的命令和普通 Redis 服务器能够使用的命令不同。
参考资料
_:hello频道中接收其他Sentinel发来的信息
---
## Page 249
里面：
已一个节点：
客户端连上节点 7000，通过发送CLUSTER NODE命令可以看到，集群目前只包含7000 自
127.0.0.1：7002（下文省略IP地址，直接使用端口号来区分各个节点），我们首先使用
添加到 node 节点当前所在的集群中。
的节点进行握手（handshake），当握手成功时，node节点就会将ip 和 port 所指定的节点
各个独立的节点连接起来，构成一个包含多个节点的集群。
立的，它们都处于一个只包含自己的集群当中，要组建一个真正可工作的集群，我们必须将
17.1节点
面进行介绍。
享，并提供复制和故障转移功能。
举个例子，假设现在有三个独立的节点127.0.0.1:7000、127.0.0.1：7001，
127.0.0.1:7000> CLUSTER MEET 127.0.0.1 7001
通过向节点7000发送以下命令，我们可以将节点7001添加到节点7000所在的集群
本节将对集群的节点、槽指派、命令执行、重新分片、转向、故障转移、消息等各个方
127.0.0.1:7000> CLUSTER NODES
$ redis-cli
向一个节点 node 发送 CLUSTER MEET命令，可以让 node 节点与ip 和 port 所指定
连接各个节点的工作可以使用CLUSTERMEET命令来完成，该命令的格式如下：
CLUSTER MEET  
一个Redis 集群通常由多个节点（node）组成，在刚开始的时候，每个节点都是相互独
Redis 集群是Redis 提供的分布式数据库方案，集群通过分片（sharding）来进行数据共
集
第17章
群
---
## Page 250
246·第三部分多机数据库的实现
三个节点进行握手的整个过程。
所在的集群里面：
现在，这个集群里面包含了7000、7001和7002三个节点，图17-1至17-5展示了这
图17-2节点 7000和7001进行握手
51549e625cfda318ad27423a31e7476fe3cd2939 :0
9dfb4c4e016e627d9769e4c9bb0d4fa208e65c26
127.0.0.1:7000> CLUSTER NODES
OK
127.0.0.1:7000> CLUSTER MEET 127.0.0.1 7002
继续向节点7000发送以下命令，我们可以将节点7002也添加到节点7000和节点7001
51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master - 0 0 0 connected
68eef66df23420a5862208ef5b1a7005b806f2ff 127.0.0.1:7001 master - 0 1388204746210
127.0.0.1:7000> CLUSTER NODES
图17-4节点7000与节点7002
myself,master - 0 0 0 connected 
connected
000L
7002
Uconnected
7000
响应握手
进行握手
握手
握手
雄道
┌一
7002
7001
7001
图17-5握手成功的三个节点处于
图17-3握手成功的7000与7001
一