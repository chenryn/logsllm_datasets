码是正确的并且得到合通的构建。
代码覆盖度比较像测试“有效
性”的数据，而不是测试的数量。
7
第10章的内容都是英于第三方的代码，你
TOO使你专注于系统的功能性。
都学含了什么原则？
自动化测试使得代码重构更加安全
诚实地对待你的客户，尤其是有不
如果破怀什么，你马上就金发现。
好的消息通报时。
软件可运行高于一切。
良好的代码覆盖率在TDD方法中比较
有可能达成。
紧随其后的是代码的可读性和易理
解性。
第
如果某段代码没有被测试，那么就
假定它不能运行。
1章
开发结环是一种设定中间期限的方
修正功能。
法，一定要送绝。
为你编写的代码而自素。
总是以团队成员的平均能力作估计。
软件中所有的代码，哪怕有小量不
在计划开发继环时，心中爱保持一
一那可能包括系统的外
章
是你写的，也都属于你的职责括图。
个整体图像
部测试。
优秀的开发人员开发款件，伟大的
逐过开发继环回顾反复收善你的流
开发人员交付款件。
程。
优秀的开发人员通常能充服不家的
流程。
12章
良好的流程能引导你的团队走向成
功。
目前位置
447
---
## Page 484
家
---
## Page 485
数字
Branching code （分支代码）208-209
15-day rule (十五天规则) 54
Bug fix estimate（修正错误估计）358
Bug fix tasks（修正错误的任务）
A
Bugs (程序错误)383-416
Bug fixing represented as user story（把修正程序错误表示成
Allocating(配置) 118
使用情节）358
Arguments（自变量、变元、参数）
Bugzilla（一个著名的缺陷跟踪管理系统）336
Assigning (指派) 118
Building projects（构建项目）221, 392
Association（关联）435
Build script （构建脚本）227,232
Agile Alliance （敏捷联盟）427
Build tool（构建工具）233
Ant (妈奴）222
Bullet points (要点)26
Adding JUnit to build (增加、构建）254
Bum down char （工作量完成情况图）115
Approval.nextiteration （同意，下一轮开发循环）
Burm down graph（工作量完成情况图）102,104
Assumptions (假设)
Burm down rate （工作量完成比例）323,346
Auditing (审i) 240
Astomted testing (自动化艇试）302, 333
C
Changing features （改变功能）
B
Checking（检查）179
Baseline functionality (基本功能) 75, 79
Checking in and cout（调入和调出）191
Batch files （批文件）227
Classes （类）183
Best practices （最佳实务）418
Clean target（请晰的目标）229
Better-han-besl-case estimate（比最佳情况还要好的估计）90
ClearQuest（个删试管理工具）336
Big bang developmem（大露雳式开发）4-6
Code （代码）181
Big picture and smallertasiks (大图像小任务） 136
Cohesion（内聚性。内聚度）161
Bin, dist, and sre directory names (bin, -dist和usrc日录名) 227
Compiling（编译）212
Black box(黑箱）238
Commi changes （提交变更）197
Black-box testing (黑箱册f)239
Commiting changes（确认变更）
Blueskying requirements (愿景需求）34,36
Com
unication，key to most problems （沟通，多数问题的关
Bootstrap script (引导期本) 231
健)330
Boundary cases （边界情况）239
Co
mication and iteration（沟通与开发循环）329-330,333
Brainstorming（头脑风暴（妙主意））34
Compilation，continuous integration（编译，连续黛成）253
Branching（分支）206,210
Compiled code（已编译的代码）188
Conficting （冲奖）193
这是索引
449
---
## Page 486
索引
Conficting code （冲突代码） 193,194
Evaluation（评估、评价）418
Configuration management （CM）（配置管理）188
Evolutionary design （演进式设计）425
Continuous integration (CI)（连续集成）252-253,270
Controlled and buildable code(可控的和可构建的代码）
Convergence （收敛） 57, 58
Features (功能) 178
Copy command（复制命令）210
Flexible design (柔性设计) 165
Coverage report （覆盖率报告）408
Figuring out what functionality works（开清楚什么功能可运
Customer approval （客户同意） 365
行) 396, 399
Customer feedback（客户反错）41
Fixing (修E) 199
Customer’s perspective （客户的想法）39
Fixing functionality (修正功能性) 394-395
Fixing while continuing working （在继续工作时，修正软件
D
错误）
Frameworks (框架)250
Dashboard（仅表盘）100-101
Functionality (功能性) 395
Delivering software （交付软件）73
Delivering what's needed（交付所需要的东西）73
G
Demo （演示程序）167
Demo failure（演示程序失败）185，187
Genet
ating documemtation（生成文档说明）210
Good enough (足够好) 168-169
Dependencies（关联性、关联件）293-295,391
Grey box（灰箱）238
Dependency injection (关联性注入）308, 310
Grey-box testing（灰箱测试）240
Descriptive message (描述性信息)
GUI（图形用户接口）216
Design documentation （设计文档）425
Developer testing（开发人员删试）325
H
Development Principles (开发原则)
Development time（开发时间）76
Documenting （文件编制）391
Documenting code （编制代码说明）391
Inheritance（能承）435
Documenting tests （编制测试说明）243
In-progress（在进行中）200
Documentatioe， testing （文档，测试）243
Input and output（输入与输出）239
DRY（don’trepeat yourself）（不要自身重复） 160
In released software （在已发布的软件中）
Integrating code (集成代码）369
3
Interdependencies （相互依存）295
Eliminating (朗除) 43, 99
Iteration（开发循环）10-15,19,84
Equals method（等效的方）308
Interfaces, multiple implementation of a single (接口l,单
Error handling（错误处理）243
接口的多重实施）296
interface
Estimates （估计、估计值)43,99
Estimation (姑)
450
索引
---
## Page 487
索引
On-time developmemt（按时完成的开发）9
Java’s cquals method(Java等同的方法）308
Output results （输出结果）239
Java programming (Java编程) 181
Overpromising（过度承诺）99
Java projects (Java项目) 227
Overworking stafr（加班工作的人员）103
JUnit （Java测试枢架）247,250-251
P
K
Packaging complied version （打包编译过的版本）391
Keeping in loop（保持在其中）383
Perfect design（完美设计）168-169
Keeping test code with tests (让期试代码限上湖试）299
Planning poker （划扑克）48
Priority setting （优先级设定）72,73,78,80,338,341
L
Prioritizing（划分优先级）
Process （流程、过程）9
Last-minute requests （最后一刺提出的需求）
Prodactive (生产力)149
Leaming time (学习时间）344
Productive design (有生产力的设计） 165
Logging (记录。日志) 240
Project board (项日白板) 100-101, 106, 116-117, 164
Loosely coupled code (松散耦合的代码） 300, 303
Project estimates (项目估计) 63
M
Projects (项目） 149
Properies（属性）223
Mantis（—个缺陷管理软件的名称）336
Milestones（里程碑）99
Q
Mock objects（模拟对象）308
Qualiative data（定性数据）403
Mock object framework （模拟对象框架）304-308
Quantitative data（定量数据）403
Multiple responsibilities（多重资任）156
R
N
Rational Unified Process（Rational统过程）427
Nerworking code（网络通信代码）184
Reality check （真实性检查）87,89
Nice-to-haves (锦上添花) 73
at each ieration（在每轮开发循环结束后，重新计）
Not being able to meet deadine （不能符合最后期限）75
Refactoring (董构) 441
0
Reference libraries（泰考程序库）230
Refining (提炼) 40
Object stand ins（对象替代物）303-308
Regression testing(湖试）248
Observation （观察）37
Releasing software（发布的软件）25
Off-by-ome errors (差—错误） 239
Reprioritizing（重新划分优先级）75.78
Offce polities（办公董政治）34
Repository location（存储目录位置）190,207,210
On-budget development（符合预算的开发）9
Reports (报告)
目前位置
451
---
## Page 488
索引
Requirement（需求）9
Team comfidence (团队倍心) 403405, 414
Resource constraints（资源限制）243
Team size （团队规模）77
Reusing code（董用代码）365
Test driven developmemt （溯试驱动开发）275-316
Reverse-engineering code (连向工程代码） 391,408
Tester testing（测试人员的测试）325
Reworking plans （重新计划、重新规划）
Testing （测试）370
Risks (风险) 51
Testing bad habits (润试的坏习惯)309
Role playing （角色演）37
Third-party code （第三方代码） 370
Rules of Thumb (经胎) 120
Threading（线程技术）181
Runnable（可运行）181
Tightly coupled code (紧钢合代码）295, 300
S
Tracking（眼踪、记录）205
Trunk directory (主干目录) 197, 201-212
Security audit （安全审计）391
Sequence diagrams (序列|图) 436-437
V
Setters and getters （存储器）287
UML diagrams (UMLI图) 434
Shell script（外壳脚本程序）227
Unexpected tasks （未预期的任务）141,166
Short project（时间短的项目）12
Unit testing （单元测试）440
Software development dashboard（软件开发仪表盘）100-101
Unplanned tasks（计划外的任务）141
Software development process（软件开发流程、软件开发过
Use case（用户案例）438-439
程) 418-419
Source code（源代码）188
User input validation（用户输入验证）239
Spike testing (峰值溯试）400-402
User story（使用情节）33-40,43,53
User story estimates greater than 15 days（使用情节的估计值
SRP versus DRY (SRP3/DRY)
大于15天）
Standup meeting （碰头会议）199
State transitioes（状态转移）239
V
Strategy pattem (策略模式）296,303, 310
Velocity（速度）144
Subversion (子版本) 189-191, 194-197, 202-206, 210
Suite of tests（测试套件）248
Version control（版本控制）188-218
System-added information (添加信息的系统)240
W
System docum
entation（系统文档资料）333
System testing （系统湖试）324-337
White box（白箱）238
White box testing（白箱测试）243
T
Working sofware（可运行的软件）350-351
Tags （标记、标识）205
Z
Targets (目标) 223
Tasks （任务）223
Zen of good branching（良好分支之道）
Task estimate （任务估计） 113, 114
452
索引
---
## Page 489
HeadFirst软件开发（中文版）
Software Developm
ent/Progra
您将从本书学会什么？
《Head First软件开发》看
你可曾想过测试驱动开发的真正含义吗？你又曾想过高级顾问是如何运用最
本座默清的书，但实
佳实践赚取高额钟点费的吗？或许，你正准备进行自动化的构建，使代码在
为一本精心铺设的丛书，全
版本控制之中，为软件进行重构，并将一些设计模式集成到你的软件系统之
书充满实用的信息、有趣的
中。在你完成本书阅读之时，你将能跟踪工作量完成状况，解释开发团队中
图解和精的说明，意图是
把宝贵的知识正确且清晰
开发人员的编码能力与时间效率值，并且为项目反复进行需求、设计，开发
地植入你的大脑，它完全是
与部暑等工作
让你耳目一新的书。
利用大台板帮助
SoltHanseb
你组项0.
掌反式开
F发E
软件开发者
发的艺术
发言人.作家
Computer Zen
（HeadFirst软件开发》处
理了课堂上极少教授的知
识，但这些又是你真正需要
的知识
建立使用情节卡件，播提
教得必须握供的功组，
通过计划扑充牌游践，相脉在做
时用信计时隐含的所有假设，
Krith Wirhn
SO.A架构师
的作业用环
约翰霍普金斯大学
让你成为测试
应用物理研究室
阳动开能方面
的号家
不管你已经从事软件开发工
作有多久、《Head First软
这本书为何与众不同？
件开发》将给你一些基本工
具，它们将有助于从始至终
我们认为你的时间宝贵，不应该浪费在努力理解新概念之中，利用最新的认
开发出成功的项目。
知科学与学习理论的研究成果，《HeadFirst软件开发》采取专为大脑工作面
设计的丰富视觉化风格，而不是令人昏昏欲睡的赞叙述。
软件项目经理
美国海军研究实验室
O'REILLY
O'Relly MediaInc.投权中国电力出版社出版
www.oreilly.com
www.headfirstlabs.com
定价：68.00元
此简体中文版仅限于在中华人民共和国境内（但不允许在中国香港、澳门特别行政区和中国台湾地区）销售发行
This Authorized Editionforsale only inthe territory ofPeoplesRepublic of China (excluding Hong KongMacao andTaiwan）
---