# cat /proc/meminfo |grep -i -E "dirt|back"  
Dirty:                 0 kB  
Writeback:             0 kB  
WritebackTmp:          0 kB  
==============================================================  
dirty_background_bytes  
Contains the amount of dirty memory at which the background kernel  
flusher threads will start writeback.  
If dirty_background_bytes is written, dirty_background_ratio becomes a function  
of its value (dirty_background_bytes / the amount of dirtyable system memory).  
==============================================================  
dirty_background_ratio  
Contains, as a percentage of total system memory, the number of pages at which  
the background kernel flusher threads will start writing out dirty data.  
==============================================================  
dirty_bytes  
Contains the amount of dirty memory at which a process generating disk writes  
will itself start writeback.  
If dirty_bytes is written, dirty_ratio becomes a function of its value  
(dirty_bytes / the amount of dirtyable system memory).  
Note: the minimum value allowed for dirty_bytes is two pages (in bytes); any  
value lower than this limit will be ignored and the old configuration will be  
retained.  
==============================================================  
dirty_expire_centisecs  
This tunable is used to define when dirty data is old enough to be eligible  
for writeout by the kernel flusher threads.  It is expressed in 100'ths  
of a second.  Data which has been dirty in-memory for longer than this  
interval will be written out next time a flusher thread wakes up.  
==============================================================  
dirty_ratio  
Contains, as a percentage of total system memory, the number of pages at which  
a process which is generating disk writes will itself start writing out dirty  
data.  
==============================================================  
dirty_writeback_centisecs  
The kernel flusher threads will periodically wake up and write `old' data  
out to disk.  This tunable expresses the interval between those wakeups, in  
100'ths of a second.  
Setting this to zero disables periodic writeback altogether.  
```  
现在暂且增加一个空闲时间自动FREE的脚本.  
```  
/usr/share/doc/kernel-doc-2.6.32/Documentation/sysctl/vm.txt  
drop_caches  
Writing to this will cause the kernel to drop clean caches, dentries and  
inodes from memory, causing that memory to become free.  
To free pagecache:  
        echo 1 > /proc/sys/vm/drop_caches  
To free dentries and inodes:  
        echo 2 > /proc/sys/vm/drop_caches  
To free pagecache, dentries and inodes:  
        echo 3 > /proc/sys/vm/drop_caches  
As this is a non-destructive operation and dirty objects are not freeable, the  
user should run `sync' first.  
crontab -e  
30 4 * * * /usr/local/bin/free.sh >>/tmp/free.log 2>&1  
# cat /usr/local/bin/free.sh  
#!/bin/bash  
. /root/.bash_profile  
. /etc/profile  
echo "`date +%F%T` start drop cache."  
free  
sync  
echo 3 > /proc/sys/vm/drop_caches  
echo "`date +%F%T` end drop cache."  
free  
```  
## 最终调整的参数如下  
负载恢复正常.  
减少脏数据比例, 提高脏数据刷新频率  
将ARC改成只存储metadata, 不存储page.  
```  
sysctl -w vm.zone_reclaim_mode=1  
sysctl -w vm.dirty_background_bytes=102400000  
sysctl -w vm.dirty_bytes=102400000  
sysctl -w vm.dirty_expire_centisecs=10  
sysctl -w vm.dirty_writeback_centisecs=10  
sysctl -w vm.swappiness=0  
sysctl -w vm.vfs_cache_pressure=80  
# vi /etc/sysctl.conf  
vm.zone_reclaim_mode=1  
vm.dirty_background_bytes=102400000  
vm.dirty_bytes=102400000  
vm.dirty_expire_centisecs=10  
vm.dirty_writeback_centisecs=10  
vm.swappiness=0  
vm.vfs_cache_pressure=80  
# cd /sys/module/zfs/parameters/  
# cat zfs_arc_max   
10240000000  
```  
查看arc统计信息/proc/spl/kstat/zfs/arcstats, 可以看到metadata使用了不到2G, 所以给10G差不多了.  
不够的话, 以后可以再调整.  
```  
meta_size                       4    1952531968  
# cat /etc/modprobe.d/zfs.conf   
options zfs zfs_arc_max=10240000000  
options zfs zfs_dirty_data_max=800000000  
options zfs zfs_vdev_async_write_active_min_dirty_percent=10  
options zfs zfs_vdev_async_write_active_max_dirty_percent=30  
options zfs zfs_delay_min_dirty_percent=60  
options zfs zfs_arc_shrink_shift=11  
```  
设置为metadata, 因为LINUX本身也带cache, 没有必要多重cache.   
zfs 和 PostgreSQL 一样有这个多重cache问题, 除非使用directIO.  
```  
# zfs set primarycache=metadata zp1  
# zfs set primarycache=metadata zp1/data_a0  
# zfs set primarycache=metadata zp1/data_a1  
# zfs set primarycache=metadata zp1/data_b0  
# zfs set primarycache=metadata zp1/data_b1  
# zfs set primarycache=metadata zp1/data_c0  
# zfs set primarycache=metadata zp1/data_c1  
# zfs set primarycache=metadata zp1/data_ssd0  
# zfs set primarycache=metadata zp1/data_ssd1  
```  
设置为与数据库块大小一致.  
```  
# zfs set recordsize=16k zp1/data_a0  wal_block_size=16k  
# zfs set recordsize=8k zp1/data_a0  block_size=8k  
```  
## 参考  
1\. http://blog.163.com/digoal@126/blog/static/163877040201392641033482  
2\. http://constantin.glez.de/blog/2010/04/ten-ways-easily-improve-oracle-solaris-zfs-filesystem-performance  
3\. https://github.com/zfsonlinux/zfs/issues/258  
4\. http://blog.163.com/digoal@126/blog/static/163877040201462204333503  
5\. https://github.com/spacelama  
6\. https://github.com/mharsch  
7\. https://pthree.org/2012/12/07/zfs-administration-part-iv-the-adjustable-replacement-cache/  
8\. man zfs-module-parameters  
    rpm -ql zfs  
9\. http://dtrace.org/blogs/brendan/2014/02/11/another-10-performance-wins/  
10\. https://www.cupfighter.net/2013/03/default-nexenta-zfs-settings-you-want-to-change-part-2  
11\. /proc/spl/*  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")