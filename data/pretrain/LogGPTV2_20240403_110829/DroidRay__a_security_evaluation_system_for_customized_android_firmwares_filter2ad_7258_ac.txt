# 恶意固件与预装应用

表4展示了包含预装恶意应用的固件信息。以下是部分数据示例：

| MD5 | 文件路径 | 设备型号 | 数量 |
| --- | --- | --- | --- |
| F893F4BE1A0A280BD62887A2BF2C36C6 | /optional/other/digua/preload/digua.apk | GT-I9300 | 244 |
| FD2EA6A845A86AAB0122BB2ADF90F2C1 | /system/framework/framework.jar | ZTE U970 | 83 |
| ... | ... | ... | ... |

这些固件中的恶意软件类型包括Agent、JSmsHider、Hippo等。

## 5.1 系统签名漏洞检测

如第4节所述，开发者不应使用Android开源项目（AOSP）默认的密钥对来构建发布的应用程序，因为任何人都可以从AOSP获取这些密钥对。对于Android固件，也存在两种签名机制以进行完整性验证和系统级权限控制。然而，我们的实验结果显示，许多Android固件是用AOSP默认密钥对签名的，这将导致两类默认签名安全问题：

### (1) Android固件默认签名问题
Android固件的签名机制类似于其他Android应用程序。签名程序首先计算固件中每个文件的SHA1值，然后使用私钥加密这些SHA1值。签名程序会将加密后的SHA1值和公钥放入固件的“META-INF”文件夹中。在固件可以刷入Android设备之前，恢复分区会使用加密的SHA1值及其公钥检查每个文件的完整性和验证固件的签名。需要注意的是，一些制造商的产品（例如三星）的恢复分区会检查公钥是否确实是自己的密钥。如果不是，则无法将固件刷入闪存。然而，许多用户可能会选择关闭签名验证过程，以便安装第三方固件。
通过对所有250个下载的固件进行分析，我们发现有206（82.4%）个固件使用了相同的公钥，即AOSP提供的默认密钥对的测试密钥。我们的分析结果如表5所示。例如，表中的第五行显示了AOSP的公钥信息，有206个固件使用了这对密钥。如果恶意软件作者使用AOSP默认密钥对创建固件，会给人们造成一种错觉，认为该Android固件是由官方Android开源项目创建的。

### (2) Android系统默认签名问题
系统签名信息存储在“/system/framework/framework-res.apk/META-INF/CERT.RSA”。通过使用“openssl”库的pkcs7函数，系统可以从“CERT.RSA”中解析出签名信息。需要注意的是，Android系统签名与Android固件签名不同。Android固件签名用于检查固件中文件的完整性，而系统签名则用于权限控制。如果某个应用程序具有与系统相同的公钥，它可以使用系统级权限。
通过对所有250个下载的固件进行分析，我们发现有142（56.8%）个Android固件使用了AOSP提供的默认密钥对[10]。这是令人担忧的，因为如果恶意软件作者使用AOSP密钥对签署他们的恶意软件，那么恶意软件就可以获得系统级权限。拥有系统级权限后，恶意软件可以静默地安装新应用程序并修改其他应用程序。我们的分析结果如表6所示（由于篇幅限制，完整列表可访问https://www.dropbox.com/s/8fbl0yujqoaja1h/SystemSign.xls）。例如，表中的第一行显示了AOSP的公钥信息，有134个Android固件使用了这对密钥。

## 5.2 网络安全漏洞检测
Android基于修改版的Linux 2.6，并带有Java编程接口，因此它具有类似于Linux的组件（如hosts和iptables）来控制网络过滤和转发。在本小节中，我们将介绍这些组件的安全问题。

### (1) hosts文件安全
hosts文件是一个纯文本文件，操作系统用它来将主机名映射到IP地址。例如，如果用户想要访问“www.google.com”，并且“/etc/hosts”文件中有相应的映射记录，系统将不会向DNS服务器请求IP查找，而是直接使用hosts文件中记录的IP地址。因此，如果黑客修改此文件并添加恶意重定向信息，将会非常危险。例如，如果用户想要访问“/etc/hosts”文件中列出的一些合法网站，被破坏的系统将不会连接到合法服务器，而是将用户重定向到恶意站点。

希望以上优化能够帮助你更好地理解和传达这些信息。如果有任何进一步的需求或问题，请随时告知。