        exit(0);
    }
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr))  30) || (fast == 0)){
            send(sock,"train", 5,0);
            fast = 1;
            printf("fast stage\n");
        }
        else{
            send(sock,"sloww",5,0);
            fast = 0;
            printf("slow stage\n");
    }
####  1.3.4 parse_array
这个就是将梯度文件中的一行转化为数组
    /* parse one line of gradient string into array */
    void parse_array(char * str, int * array){   
        int i=0;  
        char* token = strtok(str,",");  
        while(token != NULL){
            array[i]=atoi(token);
            i++;
            token = strtok(NULL, ",");
        }
        return;
    }
####  1.3.5 gen_mutate
这里就是根据梯度指导信息进行突变产生新的测试样例种子
我们可以发现NEUZZ实现的第一种变异操作就是flip，在14次迭代中翻转有趣的位置
    /* flip interesting locations within 14 iterations */
    for(int iter=0 ;iter up_step)
                up_step = cur_up_step;
            cur_low_step = (u8)(out_buf[loc[index]]);
            if (cur_low_step > low_step)
                low_step = cur_low_step;
        }
        else
        {
            cur_up_step = (u8)out_buf[loc[index]];
            if (cur_up_step > up_step)
                up_step = cur_up_step;
            cur_low_step = (255 - (u8)out_buf[loc[index]]);
            if (cur_low_step > low_step)
                low_step = cur_low_step;
        }
    }
首先时定义了初始化了目前现在的`cur_up_step`与`cur_low_step`游标的值，然后体现梯度指引最关键的一行代码就是：
    if (sign[index] == 1)
    {
        cur_up_step = (255 - (u8)out_buf[loc[index]]);
        if (cur_up_step > up_step)
            up_step = cur_up_step;
        cur_low_step = (u8)(out_buf[loc[index]]);
        if (cur_low_step > low_step)
            low_step = cur_low_step;
    }
`sign`就是我们获得的梯度信息，因为我们之前在模型的最后一层采用的是sigmoid激活函数，sigmoid函数因为输出范围(0,1)，所以二分类的概率常常用这个函数。然后我们的`num_classes
= MAX_BITMAP_SIZE`，最后的分类情况是根据`MAX_BITMAP_SIZE`来分类的，就可以表示某个`BITMAP`的重要性
如果原来的测试样例`sign[index] ==
1`，意思就是这个位置根据模型判定变异这个位置的重要性特别大，就对这个位置的输入字符就行变异，变异的具体操作就是
    cur_up_step = (255 - (u8)out_buf[loc[index]]);
之后还有一个变异也是根据模型判定进行类似于AFL的arithmetic变化，在AFL中arithmetic就是整数加/减算术运算，在bitflip变异全部进行完成后，便进入下一个阶段：arithmetic
    for (int step = 0; step  255)
              out_buf1[loc[index]] = 255;
            else
              out_buf1[loc[index]] = mut_val;
        }
然后就是将产生的新种子写入待测样例中，通知`fork_server`产生一个子进程去以该seed为输入执行被测程序，具体而言是使用`run_target`函数，然后将能够产生新Crash和提高边缘覆盖率的测试样例保存下来
接下来是去实现了AFL变异操作中的interest，这里就是通过随机的插入或删除一些byte产生新的seed,
      /* random insertion/deletion */
      int cut_len = 0;
      int del_loc = 0;
      int rand_loc = 0;
      for (int del_count = 0; del_count < 1024; del_count = del_count + 1)
      {
        del_loc = loc[del_count];
        if ((len - del_loc) <= 2)
          continue;
        cut_len = choose_block_len(len - 1 - del_loc);
        /* random deletion at a critical offset */
        memcpy(out_buf1, out_buf, del_loc);
        memcpy(out_buf1 + del_loc, out_buf + del_loc + cut_len, len - del_loc - cut_len);
        write_to_testcase(out_buf1, len - cut_len);
        int fault = run_target(exec_tmout);
        if (fault != 0)
        {
          if (fault == FAULT_CRASH)
          {
            char *mut_fn = alloc_printf("%s/crash_%d_%06d", "./crashes", round_cnt, mut_cnt);
            int mut_fd = open(mut_fn, O_WRONLY | O_CREAT | O_EXCL, 0600);
            ck_write(mut_fd, out_buf1, len - cut_len, mut_fn);
            free(mut_fn);
            close(mut_fd);
            mut_cnt = mut_cnt + 1;
          }
          else if ((fault = FAULT_TMOUT) && (tmout_cnt < 20))
          {
            tmout_cnt = tmout_cnt + 1;
            fault = run_target(1000);
            if (fault == FAULT_CRASH)
            {
              char *mut_fn = alloc_printf("%s/crash_%d_%06d", "./crashes", round_cnt, mut_cnt);
              int mut_fd = open(mut_fn, O_WRONLY | O_CREAT | O_EXCL, 0600);
              ck_write(mut_fd, out_buf1, len - cut_len, mut_fn);
              free(mut_fn);
              close(mut_fd);
              mut_cnt = mut_cnt + 1;
            }
          }
        }
####  1.3.6 write_to_testcase
将修改后的数据写入文件以进行测试。如果设置了out_file，则旧文件取消链接并创建一个新的链接。否则，将倒退out_fd并被截断
    static void write_to_testcase(void *mem, u32 len)
    {
      int fd = out_fd;
      unlink(out_file); /* Ignore errors. */
      fd = open(out_file, O_WRONLY | O_CREAT | O_EXCL, 0600);
      if (fd < 0)
        perror("Unable to create file");
      ck_write(fd, mem, len, out_file);
      close(fd);
    }
## 二、参考文献
  * [sakuraのAFL源码全注释（二）](https://www.anquanke.com/post/id/213431)
  * [AFL源代码阅读](https://migraine-sudo.github.io/2020/04/15/AFL-v8/)
  * [AFL afl_fuzz.c 详细分析](https://bbs.pediy.com/thread-254705.htm)
  * [AFL(American Fuzzy Lop)实现细节与文件变异](https://paper.seebug.org/496/#havoc)