suspicious-list  exploiters  (Figure  5)  and  the  popular-list 
exploiters  (Figure  8).  First,  there  is  not  a  single  pair  of 
exploit  sites  in  the  popular-list  data  that  are  doing  two-
way traffic redirection, which appears to be unique in the 
malicious pornography community. Second, while it is not 
uncommon  to  see  web  sites  redirecting  traffic  to  more 
than 10 or even 20 sites in the suspicious-list, sites in the 
popular-list  data  redirect  traffic  to  at  most  4  sites.  This 
traffic  selling 
suggests 
is  also  a 
phenomenon  unique 
the  malicious  pornography 
community.  
that  aggressive 
to 
Finally, the top four exploit providers in the popular-
list clearly stand out. None of them have any URLs in the 
original  list  of  one  million  URLs,  but  all  of  them  are 
behind  a  large  number  of  exploit  pages  which  redirect 
traffic  to  them.  The  #1  site  provides  exploits  to  75  web 
sites  primarily  in  the  following  five  categories:  (1) 
celebrities, (2) song lyrics, (3) wallpapers, (4) video game 
cheats, and (5) wrestling. The #2 site receives traffic from 
72  web  sites,  the  majority  of  which  are  located  in  one 
particular  country.  The  #3  site  is  behind  56  related  web 
sites that serve cartoon-related pornographic content. The 
#4  site  appears  to  be  an  advertising  company  serving 
exploiting 
that  overlap 
significantly with those covered by the #1 site. 
through  web 
links 
sites 
Site ranking based on number of hosted exploit-URLs 
Figure 9 illustrates the top 122 sites hosting more than 
one  exploit  URL.  Unlike  Figure  6,  which  highlights 
 Number of sites from which traffic is received
 Number of sites with two-way redirection
 Number of sites to which traffic is redirected
80
70
60
50
40
30
20
10
0
s
e
t
i
s
d
e
t
c
e
n
n
o
c
y
l
t
c
e
r
i
d
f
o
r
e
b
m
u
N
Site #1
Site #2
Site #3
Site #4
Site #5
Site #6
Site #7
Site #8
Site #9
Site #10
Site #11
Site #12
Site #13
Site #14
Site #15
Figure 8. Top 15 exploit sites ranked by connection counts, among the 426 SP1-UP exploit sites 
t
i
o
l
p
x
e
d
e
t
s
o
h
f
o
r
e
b
m
u
N
s
L
R
U
70
60
50
40
30
20
10
0
0
20
40
60
80
100
120
Site ranking based on number of hosted exploit URLs
Figure 9. Top 122 sites ranked by the number of exploit-URLs, among the 426 SP1-UP exploit sites 
mostly  exploit  provider  sites,  Figure  9  highlights  many 
content provider sites that host a large number of exploit 
pages containing a similar type of content. Again, the top 
four  sites  stand  out:  the  #1  site  is  a  content  provider  of 
video  game  cheats 
information  for  multiple  game 
consoles.  The  #2  site  (which  also  appears  as  the  third 
entry in Figure 8) hosts a separate URL for each different 
web  site  from  which  it  receives  traffic.  The  #3  site  is  a 
content  provider  that  has  a  separate  entry  page  for  each 
celebrity figure. The #4 site is a content provider of song 
lyrics with one entry page per celebrity singer.  
5.  Discussions 
to 
start 
adopting 
techniques 
Now  that  the  effectiveness  of  the  HoneyMonkey 
system is widely known [HM], it is expected that exploit 
sites  will 
evade 
HoneyMonkey  detection.  We  discuss  three  types  of 
potential  evasion  techniques  and  our  countermeasures. 
Since  it  has  become  clear  that  a  weakness  of  the 
HoneyMonkey  is  the  time  window  between  a  successful 
exploit  that  allows  foreign  code  execution  and  the 
subsequent  execution  of 
the  HoneyMonkey  exploit 
detection  code,  we  have  developed  and  integrated  a  tool 
called  Vulnerability-Specific  Exploit  Detector  (VSED), 
which allows the HoneyMonkey to detect and record the 
first  sign  of  an  exploit.  Such  a  detector  only  works  for 
known vulnerabilities though; detecting zero-day exploits 
of  totally  unknown  vulnerabilities  remains  a  challenge. 
The VSED tool will be discussed in Section 5.4. 
5.1.  Identifying HoneyMonkey Machines 
There  are  three  ways  for  an  exploit  site  to  identify 
HoneyMonkey machines and skip exploits.  
is 
to  black-list 
(1)  Targeting  HoneyMonkey  IP  addresses:  The 
the  IP  addresses  of 
easiest  way 
HoneyMonkey  machines.  We  plan 
the 
HoneyMonkey  network  behind  multiple  ISPs  with 
dynamically assigned IP addresses. If an exploit site wants 
to  black-list  all  IP  addresses  belonging  to  these  ISPs,  it 
will  need  to  sacrifice  a  significant  percentage  of  its 
infection  base.  One  market  research  study  of  ISP  client 
membership [ISP] shows that the top 10 US ISPs service 
over 62% of US Internet users. 
run 
to 
(2)  Performing  a  test  to  determine  if  a  human  is 
present:  Currently,  HoneyMonkeys  do  not  click  on  any 
dialog  box.  A  malicious  web  site  could  introduce  a  one-
time dialog box that asks a simple question; after the user 
clicks  the  OK  button  to  prove  he’s  human,  the  web  site 
drops a cookie to suppress the dialog box for future visits. 
More sophisticated web sites can replace the simple dialog 
box  with  a  CAPTCHA  Turing  Test  [ABL04]  (although 
this  would  raise  suspicion  because  most  non-exploiting 
sites  do  not  use  such  tests).  We  will need  to  incorporate 
additional  intelligence  into  the  HoneyMonkeys  to  handle 
dialog boxes and to detect CAPTCHA tests when we see 
web  sites  starting  to  adopt  such  techniques  to  evade 
detection. 
(3)  Detecting  the  presence  of  a  VM  or  the 
HoneyMonkey code: Malicious code  could detect a VM 
by  executing  a  series  of 
instructions  with  high 
virtualization overhead and comparing the elapsed time to 
some external reference [VMC+05]; by detecting the use 
of  reserved  x86  opcodes  normally  only  used  by  specific 
VMs  [L05];  by 
leaked  by 
sensitive,  non-privileged 
[RP];  and  by 
observing  certain  file  directory  contents  known  to  be 
associated with UML (User-Mode Linux) [CDF+04] or a 
specific hardware configuration, default MAC address, or 
I/O backdoor associated with VMware [HR05]. 
information 
instructions 
leveraging 
Most  VM-detection  techniques  arise  due  to  the  fact 
that  the  x86  processors  are  not  fully  virtualizable. 
Fortunately,  both  Intel  [VT]  and  AMD  [PVT]  have 
proposed  architecture  extensions  that  would  make  x86 
processors  fully  virtualizable,  and  thus  make  detecting  a 
VM  more  difficult.  In  the  meantime,  we  can  adopt  anti-
detection  techniques  that  target  known  VM-detection 
methods  [CDF+04,VMC+05].  As  VMs  are  increasingly 
used  as  general  computing  platforms,  the  approach  of 
detecting HoneyMonkeys  by detecting VMs will become 
less effective. 
support 
implemented 
implemented 
Alternatively, we developed techniques that allow us 
to also run HoneyMonkey on non-virtual machines so that 
the results  can  be  cross-checked  to  identify  sophisticated 
attackers.  We 
to  efficiently 
checkpoint our system (both memory and disk state) when 
it  is  in  a  known-good  state,  and  roll  back  to  that 
checkpoint  after  an  attack  has  been  detected.  To 
checkpoint  memory,  we  utilized 
the  hibernation 
functionality  already  present  in  Windows  to  efficiently 
store  and  restore  memory  snapshots.  To  support  disk 
checkpoints,  we 
copy-on-write  disk 
functionality  by  modifying  the  generic  Windows  disk 
class driver which is used by most disks today. Our copy-
on-write  implementation  divides  the  physical  disk  into 
two equally sized partitions. We use the first partition to 
hold  the  default  disk  image  that  we  roll  back  to  when 
restoring  a  checkpoint,  and  the  second  partition  as  a 
scratch partition to store all disk writes made after taking a 
checkpoint.  We  maintain  a  bitmap  in  memory  to  record 
which  blocks  have  been  written  to  so  we  know  which 
partition  contains  the  most  recent  version  of  each 
individual block. As a result, no extra disk reads or writes 
are  needed  to  provide  copy-on-write  functionality  and  a 
rollback  can  be  simply  accomplished  by  zeroing  out  the 
bitmap.  To  provide  further  protection,  we  can  adopt 
resource-hiding 
the  driver  from 
techniques 
to  hide 
sophisticated attackers who are trying to detect the driver 
to identify a HoneyMonkey machine. 
Some  exploit  sites  may  be  able  to  obtain  the 
“signatures”  of  the  HoneyMonkey  logging  infrastructure 
and build a detection mechanism to allow them to disable 
the  logging  or  tamper  with the  log.  Since  such  detection 
code  can  only  be  executed  after  a  successful  exploit,  we 
can  use  VSED  to  detect  occurrences  of  exploits  and 
highlight  those  that  do  not  have  a  corresponding  file-
creation  log.  Additionally,  we  are  incorporating  log 
signing  techniques  to  detect  missing  or  modified  log 
entries. 
We note that some classes of exploits require writing 
a  file  to  disk  and  then  executing  that  file  for  running 
arbitrary code. These exploits cannot escape our detection 
by  trying  to  identify  a  HoneyMonkey  machine  because 
our  file-based  detection  actually  occurs  before  they  can 
execute code. 
5.2.  Exploiting without Triggering HoneyMonkey 
Detection 
Currently,  HoneyMonkey  cannot  detect  exploits  that 
do  not  make  any  persistent-state  changes  or  make  such 
changes  only  inside  browser  sandbox.  Even  with  this 
limitation,  the  HoneyMonkey  is  able  to  detect  most  of 
today’s  Trojans,  backdoors,  and  spyware  programs  that 
rely  on  significant  persistent-state  changes  to  enable 
automatic restart upon reboot. Again, the VSED tool can 
help address this limitation. 
HoneyMonkeys only wait for a few minutes for each 
URL.  So  a  possible  evasion  technique  is  to  delay  the 
exploit.  However,  such  delays  reduce  the  chance  of 
successful  infections  because  real  users  may  close  the 
browser  before  the  exploit  happens.  We  plan  to  run 
HoneyMonkeys  with  random  wait  times  and  highlight 
those  exploit  pages  that  exhibit  inconsistent  behaviors 
across runs for more in-depth manual analysis. 
5.3.  Randomizing the Attacks 
Exploit  sites  may  try  to  inject  nondeterministic 
behavior to complicate the HoneyMonkey detection. They 
may randomly exploit one in every N browser visits. We 
consider  this  an  acceptable  trade-off:  while  this  would 
require multiple scans by the HoneyMonkeys to detect an 
exploit, it forces the exploit sites to reduce their infection 
rates  by  N  times  as  well.  If  a  major  exploit  provider  is 
behind  more  than  N  monitored  content  providers,  the 
HoneyMonkey  can  still  detect  it  through  redirection 
tracking in one round of scans. 
Exploit sites may try to randomize URL redirections 
by  selecting  a  random  subset  of  machines  to  forward 
traffic to each time, from a large set of infected machines 
that  are  made  to  host  exploit  code.  Our  node  ranking 
algorithm  based  on  connection  counts  should  discourage 
this  because  such  sites  would  end  up  prioritizing 
themselves higher for investigation. Also, they reveal the 
identities  of  infected  machines,  whose  owners  can  be 
notified to clean up the machines. 
5.4.  Vulnerability-Specific 
(VSED) 
Exploit  Detector 
called  VSED, 
To  address  some  of  the  limitations  discussed  above 
and  to  provide  additional  information  on  the  exact 