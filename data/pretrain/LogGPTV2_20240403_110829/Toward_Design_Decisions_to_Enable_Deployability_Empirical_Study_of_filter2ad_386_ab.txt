Goal 2:  Promote the habit of frequent and automated means 
of deploying 
Project C Goals: 
Goal 1:  Enable CI and delivery 
Goal 2:  Enable extensive test automation to include unit, 
functional, acceptance, and other types of testing 
Goal 3:  Automate deployment and increase frequency and 
comfort with deployment 
Goal 4:  Reduce  the  gap  between  environments  to  keep them 
reduce  deployment  errors  and 
consistent  and 
complexity 
To  synthesize  this  information  in  Table  II,  we  affinity 
grouped  the  goals  into  more  general  goals  (as  shown  in  the 
middle column of Table II). We then mapped these generalized 
goal names to the specific project goals to show which projects 
are focused on which goals. 
TABLE II.  
DEPLOYABILITY GOALS SUMMARY 
Generalized Name of 
Deployability Goal 
Mapping of Project Goals 
to Generalized Goal 
G1  Enable Build and Continuous 
PA-G1, PB-G1, PC-G1 
Integration  
G2  Enable Test Automation  
G3  Enable  Deployment 
and 
PA-G2, PB-G2, PB-G2 
PA-G3, PB-G2, PB-G3 
Robust Operations  
G4  Enable  Synchronized  and 
PC-G3, PC-G4 
Flexible Environments  
B.  Examples of Design Decisions to Support Deployability 
In  this  section,  we  provide  a  summary  of  the  raw-data 
design decisions that we gathered from Projects A, B, and C in 
response  to  IQ2:  What  are  some  examples  of  architecture 
decisions that have enabled these goals?  
For  each  design  decision,  we  suggest  a  generalizable 
architectural tactic that the decision instantiates. The tactics are 
drawn either from our existing work on architecture tactics [4], 
a  variation  of  an  existing  tactic  (beyond  the  instantiation),  or 
new tactics.  
Project  A  is  a  financial  application  that  has  several 
customized  variants  of  the  software  deployed  to  eight  client 
sites. The architecture for Project A is a thick client written in 
C#  with  a  C++  and  Java  back  end,  which  is  currently  being 
ported  to  Java.  Examples  of  Project  A’s  design  decisions  are 
summarized below: 
x  PA-D1:  Integrated  test  framework.  Project  A  built 
an  integrated  test  framework  to  allow  the  team  to 
simulate the performance of the system under varying 
conditions.  For  example,  as  part  of  the  nightly  build, 
they  used  the  framework  to  process  batches  of 
transactions and monitor performance to see if it falls 
below  an  established  threshold.  The  integrated  test 
framework  supports  testing  of  distributed  message 
communication  (e.g.,  message  queues  and  backend 
processes). 
Initial  Tactic  Assessment: Integrated test framework 
is  an  instance  or  a  variation  of  the  Testability  tactic 
Specialized Access Routines/Interfaces. 
x  PA-D2:  Script-driven  process  shutdown.  The 
Caching  tactic  was  used  to  improve  performance. 
However,  this  change  made  it  difficult  to  put  the 
system in an appropriate state to run a clean test (i.e., 
to clear the cache). As a result, often the team  would 
have to shut down the system several times during the 
nightly  build  to  obtain  a  clean  test  state.  To  enable 
automated performance testing using the integrated test 
framework, the team built “hooks” into the application 
to  allow  for  stopping  and  restarting  processes.  This 
allowed  the  team  to  ensure  that  all  tests  begin  in  a 
good, known state. 
Initial  Tactic  Assessment:  Stopping  and  starting  of 
processes for testing is an instance or variation of the 
Testability  tactic  Record/Playback.  Caching  is  an 
instance  of  the  Performance  tactic  Maintain  Multiple 
Copies. 
x  PA-D3:  Web  service  consolidation.  The  application 
has a C# thick client, and updating the software on the 
client side required configuration of four web services. 
The  customer  organization  found  this  to  be  a  time-
consuming and error-prone deployment process. So the 
team  consolidated  the  four  web  services  to  a  single 
web service. To make this change, additional interfaces 
were  created  in  the  single  web  service,  and  the 
addresses of the calls in the front end of the application 
were modified to reflect the new URLs for the existing 
interfaces. The interfaces in the combined web service 
had  much  in  common,  such  as  shared  data  (database 
tables)  and  shared  classes,  so  the  change  resulted  in 
increased semantic cohesion. A problem with the prior 
704
service 
some 
still  had 
implementation was that each web service had its own 
set of database connection pools, so one service could 
potentially  run  out  of  database  connections  while 
another 
available. By 
consolidating  to  a  single  web  service,  they  were  also 
able  to  have  a  single,  larger  pool  of  database 
connections. 
Initial  Tactic  Assessment:  Combining  web  services 
into  one  web  service  with  several  interfaces  is  an 
instance  of the  Modifiability  tactic Increase  Semantic 
Cohesion.  The  connection-pooling  decision  is  an 
instance of the Modifiability tactic Abstract Common 
Services  as  well  as  the  Performance  tactic  Reduce 
Overhead. 
We  note  that  there  is  a  trade-off  being  made  in  this 
example  (PA-D3).  The  team  is  decreasing  semantic 
coherence  and  increasing  coupling,  which  can  reduce 
modifiability,  to  reduce  deployment  time/complexity 
and minimize performance overhead. 
x  PA-D4:  Parameterization.  The  team  made  use  of 
parameterization  for  environment  variables  such  as 
database and server names. This allowed the client to 
change these as needed without changing the build. 
Initial  Tactic  Assessment:  Use  of  Parameterization 
and  Use  of  Configuration  Files  are  subtactics  or 
variations  of  the  Modifiability  tactic  Defer  Binding 
Time. 
x  PA-D5:  Self-monitoring. The team added alerting to 
monitor 
team 
employed  proactive  internally  and  externally  driven 
logging.  For  some  critical  components,  they  have 
incorporated  the  capability  for  components  to  do  a 
self-check  to  detect  internal  component  faults  or 
failures. In other cases they use a polling approach to 
detect failures that must be checked externally (e.g., to 
check that the message exchange state is functioning as 
expected).  Based  on  the  output  of  the  detection 
mechanisms  captured  in  the  logs,  alerts  can  be 
configured to send emails and messages or customized 
to be integrated with client systems. 
Initial  Tactic  Assessment:  Polling  and  component 
self-checks  are  instances  of  the  Availability  tactics 
Monitor, 
or  Heartbeat. 
Notification  can  be  considered  part  of  Availability 
tactics Exception Detection and Exception Handling. 
the  system  during  operation.  The 
Ping/Echo, 
Self-test, 
Project  B  is  a  virtual  training  environment  with  an  e-
learning system and virtual lab capability. The architecture for 
Project  B  is  a  cloud  platform  (software  as  a  service)  with 
virtualization to provide a training sandbox. Languages used on 
Project  B  include  .NET,  C#,  Java,  HTML,  CFS,  jQuery,  and 
Javascript. Examples of Project B design decisions gathered in 
response to IQ2 are summarized below: 
x  PB-D1:  Adapter  container.  Project  B  leveraged 
automated  deployment  scripting,  deployment-focused 
configuration  management  tools  (e.g.,  Chef),  and 
virtualized 
(e.g., 
Vagrant).  The  team  described  use  of  an  adapter 
container that lives within specific environments, or on 
a  specific  virtual  machine  environment,  which  allows 
them  to  run  the  same  Chef  scripts  in  multiple 
environment  generation 
tools 
and 
staging, 
(e.g.,  development, 
environments 
production). This promotes environment consistency. 
Initial  Tactic  Assessment:  Configuration  Files  are 
subtactics  or  variations  of  the  Modifiability  tactic 
Defer  Binding  Time.  The  adapter  container  has 
similarity  with 
tactic  Sandbox; 
however,  in  this  usage  context  the  container  enables 
rapid and consistent deployment. Virtualization is used 
to  create  and  manage  the  environments  in  which  the 
applications run. 
the  Testability 
to 
test 
the 
team 
x  PB-D2: 
principle 
to  access 
Single-responsibility 
and 
distributed service architecture. The team described 
use  of  the  single-responsibility  principle,  which  is  an 
instance of the Increase Semantic Coherence tactic, to 
support  unit  testing  and  rapid  deployment.  They 
designed methods and classes as isolated services with 
very small responsibilities and well-defined interfaces. 
This  allows 
individual  units 
independently  and  to  write  (mocks  of) the  inputs and 
outputs of each interface. It also allows them to test the 
interfaces  in  isolation  without  having  to  interact  with 
the  entire  system.  They  also  use  services 
to 
communicate independently (e.g., Web server APIs or 
RPCs),  so  they  can  have  the  individual,  fine-grained 
permissions 
the  database  and  specific 
services. They added that modularizing features, lower 
coupling,  and  increased  cohesion  enable  deployment 
and  continuous  delivery,  explaining,  “otherwise  you 
may  have  to  push  the  whole  three  million  lines  of 
application  every  time  a  change  is  made  and  if  you 
have to do that you are in a world of hurt.” 
Initial  Tactic  Assessment:  The  single-responsibility 
principle is another way of describing the Modifiability 
tactic  Increase  Semantic  Coherence.  Writing  small, 
encapsulated  unit 
the 
tactic  Encapsulation  and  Maintain 
Modifiability 
Existing Interface. 
x  PB-D3: Managing and reproducing state. Project B 
suggested that it  is  helpful  to  design  the  system  such 
that it is possible to inject the state easily for automated 
testing  (e.g.,  a  database  or  cache  rather  than  RAM). 
This  required  making  changes  to  the  architecture  to 
reproduce the  state. They  suggested that  management 
of state to support testing is a design consideration that 
must be considered early because of implications over 
scope  of  control  for  development  artifacts  such  as 
containers, application, and data. An approach Project 
B says they have observed in practice, but that they do 
not subscribe to, is pushing shared services logic into 
the 
and 
authorization). This is not preferred because the teams 
says  their  developers  have  less  control  to  debug  and 
run  automated  tests  when  they  can’t  work  within 
isolated environments. 
Initial  Tactic  Assessment:  State  injection  to  support 
automated testing is a variant of the Testability tactic 
Record/Playback.  The  changes  made  to  support  state 
injection  are  an  instance  of  the  Testability  tactic 
Specialized Access Routines/Interfaces. 
is  an  example  of 
authentication 
container 
(e.g., 
tests 
Java 
705
x  PB-D4:  Self-initiating  version  update  (supports 
Version Control. Project B described challenges with 
the client site database version getting out of sync with 