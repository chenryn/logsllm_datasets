# Optimized Text

## Handling Large Preferences Files
- **What if the preferences file is too large?**
  - Open the file and return the file descriptor.
- **What if the preferences file changes?**
  - Clone the file and open it.
  - Return the file descriptor.

### Implementation of Preferences File Read
```c
char __str[1032];
plist_path = [CFPDSource cacheActualPath];
if (!lstat(plist_path, &stat_buf) && stat_buf.st_size >= 0x100000) {
    snprintf(__str, 0x400uLL, "%s.cfp.XXXXXXX", plist_path);
    tmp_plist_path = mktemp(__str);
    if (tmp_plist_path) {
        if (!clonefile(plist_path, tmp_plist_path, 0)) {
            v4 = open(tmp_plist_path, 0);
            // Further processing...
        }
    }
}
```

### Steps for Cloning and Opening the Property List
1. Get the preferences file path.
2. Check the file size.
3. Clone the preferences file.

### Implementation of File Cloning
```c
clonefile(plist_path, tmp_path);
snprintf(__str, 0x400uLL, "%s.cfp.XXXXXXX", plist_path);
dst_path = mktemp(__str);
```
- **Random file name at the same directory of the preferences file:**
  - The trailing `X`s are replaced with a unique alphanumeric combination.
- **Handling potential overflow:**
  - If `strlen(plist_path) + strlen(".cfp")` equals `0x400-1`, `snprintf` will overflow and generate `__str` without `X`.
  - `mktemp` will return a fixed filename without any randomness.

### Time of Check and Time of Use
- **File check and open:**
  - Controllable `plist_file`.
  - `file_check(plist_path)` to verify the file.
  - `mktemp("{plist_path}.cfp")` to create a temporary file.
  - `mktemp` will fail if the expected file already exists.

### Arbitrary File Operations
- **Arbitrary File Read:**
  - Any file can be stolen and cloned to `{plist_path}.cfp`.
- **Arbitrary File Write:**
  - `plist_path` can be written to any path.

### Patch for CVE-2021-1740
- **Replace temp path with symbolic link:**
  - No more fixed file.
  - Predicted/fixed temp path needs to overflow `snprintf`.
  - Random temp file will not be created unless `clonefileat` is called successfully, so there is no time window to replace it.
```c
int ret = snprintf(__str, 0x400uLL, "%s.cfp.XXXXXXX", plist_path);
if (ret >= 0x400) {
    goto FAIL;
}
char *temp_path = mktemp(__str);
if (!clonefileat(dirfd, plist_file, AT_FDCWD, temp_path)) {
    int fd = open(temp_path, 0);
    // Further processing...
    return fd;
}
```

### Writing Preferences Data
- **Preferences Write Logic:**
  - Parse key, value from XPC message.
  - Read data from the target preferences file.
  - Generate new data.
  - Write data to a temp file.
  - Rename temp file back to the target preferences file.

### Client Permission Validation
```c
bool -[CFPDSource validateAccessToken:accessType:] {
    char fd_path[1024];
    xpc_fd = xpc_dictionary_dup_fd(xpc_msg, "CFPreferencesAccessToken");
    if (fcntl(xpc_fd, F_GETPATH, fd_path) != -1) {
        if (!strcmp(fd_path, plist_path) &&
            ((fcntl(xpc_fd, F_GETFL, 0LL) & 3) == 2)) {
            return true; // Check success
        }
    }
    return false; // Check failed
}
```
- **Client needs to pass the file descriptor to `cfprefsd` to prove write permission to the preferences file.**

### Implementation of Preferences File Write
```c
int64 _CFPrefsWritePlistToFDThenClose() {
    tmp_file_fd = _CFPrefsTemporaryFDToWriteTo(v3, v4);
    fcntl(tmp_file_fd, F_GETPATH, tmp_file_path);
    while (...) {
        write(tmp_file_fd, plist_data, plist_size);
    }
    close(tmp_file_fd);
    rename(tmp_file_path, plist_path);
}
```
- **Steps:**
  1. Generate a temp file.
  2 - Write preferences data to the temp file.
  3. Rename the temp file to the target `plist` file.

### Symbolic Link Handling
- **Symbolic link in the source or target path:**
  - `rename` will first delete the symbolic link if it exists.
  - “If the final component of the target is a symbolic link, the symbolic link is renamed, not the file or directory to which it points.”

### Middle Component as Symbolic Link
- **Example:**
  - `/tmp/test/hello.plist`
  - Final component: `hello.plist`
  - Middle component: `/tmp/test`
  - Create a symbolic link: `ln -s /Library/LaunchDaemons /tmp/test`
  - `rename(tmp_file_path, plist_path)` will handle the symbolic link appropriately.

### Patch for CVE-2021-1739
- **Use `renameat` instead of `rename`:**
  - The target file of `renameat` will be created based on `dir_fd`.
  - Symbolic links (middle component of the target path) will not be followed.
```c
int renameat(
    AT_FDCWD,   tmp_file_path, 
    dir_fd,     file_name
)
```

### Demo and References
- **Demo of Preferences Vulnerabilities:**
  - [YouTube Video](https://www.youtube.com/watch?v=Kh6sEcdGruU)
  - [Apple Support](https://support.apple.com/en-us/HT212011)

### NSXPC Server
- **com.apple.storedownloadd.daemon:**
  - Path: `/System/Library/PrivateFrameworks/CommerceKit.framework/Versions/A/Resources/storedownloadd`
  - Root privilege, but sandboxed.
  - Sandbox Profile: `/System/Library/Sandbox/Profiles/com.apple.storedownloadd.sb`
  - Allowed to write to sensitive paths like `/Applications`, `/Library/Keychains/`.

### Storedownloadd Interfaces
```objc
@protocol ISDownloadService
- (void)setStoreClient:(ISStoreClient*)storeClient;
- (void)performDownload:(SSDownload*)download withOptions:(NSUInteger)options replyBlock:(void (^)(NSUInteger, NSError*))reply;
@end
```

### SSDownload and SSDownloadAsset
- **SSDownload:**
  ```objc
  @interface SSDownload : NSObject
  @property(copy, nonatomic) NSArray *_assets;
  @end
  ```
- **SSDownloadAsset:**
  ```objc
  @interface SSDownloadAsset : NSObject
  @property NSString * _customDownloadPath;
  @property NSURL * _urlRequest;
  @property NSArray * _hashes;
  @end
  ```

### Serialization and Unserialization
- **SSDownloadAsset:**
  - Fully controllable by the attacker.
  - Methods: `encodeWithCoder:` and `initWithCoder:`.

### Exploit of CVE-2020-27903
- **Vulnerable Code:**
  - Request to download a file from a URL, verify its hash, and write it to a specified path.
- **Patch:**
  - Remove the vulnerable code.
  - No more `com.apple.storedownloadd.daemon`.

### Other Logic Vulnerabilities
- **XPC Service Implementation Flaw:**
  - [CVE-2020-9971](https://xlab.tencent.com/en/2021/01/11/cve-2020-9971-abusing-xpc-service-to-elevate-privilege/)
- **NSXPC Vulnerabilities in Adobe Acrobat Reader:**
  - [Security Flaws in Adobe Acrobat Reader](https://rekken.github.io/2020/05/14/Security-Flaws-in-Adobe-Acrobat-Reader-Allow-Malicious-Program-to-Gain-Root-on-macOS-Silently/)

### Advantage of IPC Logic Vulnerability
- **Easy to exploit and stable.**
- **One exploit to rule them all.**
- **Logic bugs in core frameworks allow ruling all Apple platforms, Intel and Apple Silicon alike, without changing one line of the exploit.**

### State of Apple IPC Security
- **Reduce IPC attack surfaces.**
- **More restricted sandbox rules.**
- **Delete unnecessary high-privilege services.**
- **Add more private entitlements.**
- **Limit the damage:**
  - Sandbox IPC servers.
  - Rootless.

### Conclusion
- **Latest IPC Mechanisms on Apple Platforms:**
  - XPC, NSXPC.
- **Interesting Apple IPC Logic Vulnerabilities:**
  - Three logic vulnerabilities in Preferences.
  - One logic vulnerability in the App Store.

### Special Thanks
- **Csaba Fitzl (@theevilbit)**
- **Ian Beer (@i41nbeer)**
- **Zhi Zhou (@CodeColorist)**

**Tencent Security Xuanwu Lab**
- Website: [xlab.tencent.com](https://xlab.tencent.com)