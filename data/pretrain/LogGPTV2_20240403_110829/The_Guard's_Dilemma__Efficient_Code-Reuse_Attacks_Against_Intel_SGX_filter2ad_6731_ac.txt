the layout of this structure. The second argument (ms) is
not relevant for our attack. An attacker able to control the
OCALL frame can set all the registers mentioned; more-
over, the new instruction pointer (rip) can also be set.
Since the attacker can control rdi (which contains the ﬁrst
argument) and the instruction pointer, she can execute the
CONT primitive from ORET. This capability is important
for the ORET+CONT loop, and additionally allows to
bootstrap our attack from a stack overﬂow vulnerability,
as will be shown towards the end of this section.
The exact values of rsp and rip after asm oret de-
pend on the SGX SDK version. For versions earlier than
2.0, the stack pointer is set to point to the ocall ret ﬁeld
before issuing a ret instruction, which simply pops the
return address from the stack and loads it into the instruc-
tion pointer rip. Hence, the new instruction pointer will
be the value of ocall ret, and the new stack pointer will
point to the memory location immediately following the
OCALL frame. From version 2.0, a more traditional epi-
logue is used: the base pointer (rbp) is moved into rsp,
1
2
3
4
5
6
7
8
9
10
11
12
13
typedef struct _ o c a l l _ c o n t e x t _ t {
/* ... */
u i n t p t r _ t r15 ;
u i n t p t r _ t r14 ;
u i n t p t r _ t r13 ;
u i n t p t r _ t r12 ;
u i n t p t r _ t xbp ; // rbp
u i n t p t r _ t xdi ; // rdi
u i n t p t r _ t xsi ; // rsi
u i n t p t r _ t xbx ; // rbx
/* ... */
u i n t p t r _ t o c a l l _ r e t ;
} o c a l l _ c o n t e x t _ t ;
Listing 1: Context structure for asm oret. Fields not
relevant to our attack are omitted.
then rbp is popped from the stack, and ﬁnally a ret is is-
sued. Therefore, rbp in the OCALL frame has to point to a
memory area containing two 64-bit words: the new value
for rbp, and the return address (i.e., the new instruction
pointer). After returning, rsp will point 16 bytes past the
rbp in the OCALL frame. Note that those addresses do
not necessarily have to point to stack memory, nor to en-
clave memory, as enclaves can access untrusted memory.
The ﬁrst operation done by asm oret is shifting the
stack pointer to the sp argument, i.e., the top of the
OCALL frame. Subsequent references to the OCALL
frame are made through the stack pointer. As a result, an
attacker can jump to the code after the function prologue
that sets up the stack and let asm oret believe that the
OCALL frame is at the top of the current stack. On
SGX SDK versions earlier than 2.0, the stack pointer
is shifted with a single instruction, mov rsp, rdi, at
the beginning of asm oret. This can be easily skipped
by calling the second instruction instead of the real
beginning of asm oret. Starting with version 2.0 of the
SDK, the code is more complex, as it also handles other
USENIX Association
27th USENIX Security Symposium    1219
tasks (such as restoring the extended processor state)
before restoring the registers we are interested in. Simply
skipping the stack shifting instruction would cause a
crash because of other temporary registers that are set up
in the meantime. However, it is still possible to skip the
more complex ﬁrst part and jump directly to the part that
restores registers without inducing any side-effects. As
such, it is always possible to abuse asm oret to restore
a fake OCALL frame at the top of the stack, without
the need to control the ﬁrst argument, by jumping to an
appropriate instruction inside asm oret.
In the rest of
this paper we will assume the attacker to always skip the
initial part when reusing asm oret.
An attacker who has control over the stack contents
can reuse asm oret to set the registers mentioned in
ocall context t. An example is depicted in Figure 5.
The application is vulnerable to a buffer overﬂow error
on the stack. The attacker exploits this to overwrite the
function’s return address with the address of asm oret,
properly adjusted to account for skipped instructions.
Moreover, she places a fake ocall context t immedi-
ately after the return address. Once the function returns,
control is transferred to asm oret with the fake OCALL
frame at the top of stack, since the return address has
been popped by the return instruction. Finally, asm oret
restores the fake context, thus granting control of those
registers to the attacker.
6.2.2 CONT Primitive
is
The
based
CONT
primitive
on
continue execution, a function used in the ex-
ception handling mechanism to restore a CPU context
from an exception information structure, thus allowing
exception handlers to change CPU register values. As
such, it can be abused in a similar way to asm oret. In
comparison, continue execution provides more con-
trol than asm oret as the context it restores encompasses
all general-purpose CPU registers.
The
prototype
of
void
continue execution(sgx exception info t *info),
function
this
is
1 Before overﬂow
2 After overﬂow
Buﬀer
···
rsp before
return
Return addr.
&asm oret
···
Fake OCALL
context
rsp after
return
r
e
d
r
o
y
r
o
m
e
M
where info is a pointer to the exception information
structure that contains the CPU context
to restore.
The only ﬁeld used by continue execution is
cpu context, of
type sgx cpu context t, which
contains all sixteen general-purpose registers and the
instruction pointer. Listings 2 and 3 show the deﬁnitions
of those structures. continue execution is an ideal
target for a memory corruption attack as it grants control
of all CPU registers. Notably, the stack pointer (rsp) and
the instruction pointer (rip) are part of this context. Since
the attacker can control the stack pointer, she can hijack it
to attacker-controlled memory (the fake stack). The code
will now believe that the attacker-controlled memory is
the real stack, so the attacker gets control over the stack
contents. This technique is known as stack pivoting.
Since the attacker also controls the instruction pointer,
all the requirements for executing an ORET primitive are
met. Therefore, it is possible to chain the ORET primitive
to the CONT primitive. This is an essential ingredient for
our ORET+CONT loop.
We noticed an issue in continue execution on SDK
versions prior to 1.6, which results in registers r8-r15 not
being restored and rsi being restored with the value of
1
2
3
4
5
6
7
typedef struct _ e x c e p t i o n _ i n f o _ t {
s g x _ c p u _ c o n t e x t _ t c p u _ c o n t e x t ;
s g x _ e x c e p t i o n _ v e c t o r _ t
e x c e p t i o n _ v e c t o r ;
s g x _ e x c e p t i o n _ t y p e _ t
e x c e p t i o n _ t y p e ;
} s g x _ e x c e p t i o n _ i n f o _ t ;
Listing 2:
continue execution.
Exception information structure
for
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
typedef struct _ c p u _ c o n t e x t _ t {
u i n t 6 4 _ t rax ;
u i n t 6 4 _ t rcx ;
u i n t 6 4 _ t rdx ;
u i n t 6 4 _ t rbx ;
u i n t 6 4 _ t rsp ;
u i n t 6 4 _ t rbp ;
u i n t 6 4 _ t rsi ;
u i n t 6 4 _ t rdi ;
u i n t 6 4 _ t r8 ;
u i n t 6 4 _ t r9 ;
u i n t 6 4 _ t r10 ;
u i n t 6 4 _ t r11 ;
u i n t 6 4 _ t r12 ;
u i n t 6 4 _ t r13 ;
u i n t 6 4 _ t r14 ;
u i n t 6 4 _ t r15 ;
u i n t 6 4 _ t rflags ;
u i n t 6 4 _ t rip ;
} s g x _ c p u _ c o n t e x t _ t ;
Figure 5: Stack layout when launching the ORET
primitive from a stack overﬂow.
Listing 3: CPU context
continue execution.
information structure for
1220    27th USENIX Security Symposium
USENIX Association
r15. Since rsi can be controlled anyway (through r15),
and r8-r15 are temporary registers that are not typically
of interest to an attacker, this issue does not reduce the
power of continue execution reuse signiﬁcantly.
As an example, continue execution can be reused
by corrupting a function pointer and hijacking it to
point to continue execution. Moreover, the attacker
the memory
needs to control rdi or, equivalently,
pointed to by rdi. Given those preconditions,
the
attacker can call continue execution with a fake
sgx exception info t structure and gain full CPU
context control.
In another scenario, the attacker only has stack control,
for example because of a stack overﬂow vulnerability. In
that case, she can apply the ORET primitive ﬁrst. Since
that primitive grants control of rdi and of the instruction
pointer, the attacker can chain continue execution to
get full register control.
6.2.3 Putting the Pieces Together
In this section, we ﬁnally put the primitives together
to create the ORET+CONT loop to mount a code-reuse
attack. The loop workﬂow is depicted in Figure 6. The
steps of an iteration are as follows:
1. The CONT primitive is used to pivot the stack
pointer into the fake stack and execute the gadget
with controlled registers.
2. When the gadget returns, it will do so through the
fake stack. Hence, the gadget returns to asm oret,
launching an ORET primitive.
3. The ORET primitive restores the context from the
fake stack. The context is crafted to launch a CONT
primitive for the next gadget to continue the loop.
Using the ORET+CONT combination is necessary
because the attacker might want to control rdi, or the
gadget might corrupt it; therefore, chaining CONT to
CONT directly might not be possible. We discuss this
aspect further in Section 6.2.4.
We now describe in detail the fake structures that
the attacker needs to set up beforehand. Those can be
constructed anywhere in memory, as long as they are
accessible to the enclave and located at known locations.
Fake stack. The fake stack is used to chain CONT to
ORET. It is composed of a sequence of frames. Each
frame consists of the address of asm oret (properly
adjusted) followed by an ocall context t structure.
The CONT in the loop invokes a gadget with the stack
pointer set to the top of a frame in the fake stack. Just
before the gadget returns,
the address of asm oret
will be at the top of the stack and will be used as the
return address. The gadget will return to asm oret,
launching an ORET primitive that will restore the context
from the frame, which is at the top of the stack after
returning. The situation is very similar to the stack layout
in Figure 5, except that stack control is achieved with
pivoting instead of a stack overﬂow. The context is set up
so that rdi points to the exception information structure
for the next gadget’s CONT, and the instruction pointer
is set to continue execution. This will result in a
call to continue execution which will execute the
next gadget. Note that from SDK version 2.0, the ORET
context has to set rbp properly as detailed in Section 6.2.1
to control the instruction pointer.
Fake exception information. For each gadget,
the
attacker sets up a fake sgx exception info t structure
with the desired register values and the instruction pointer
set to the gadget’s address. The stack pointer is set
to the top of the next frame in the fake stack. After
continue execution is called,
the gadget will be
executed with the desired register context. The return
instruction at the end of the gadget will transfer control
through the fake stack back to an ORET primitive, which
will in turn execute the next gadget’s CONT.
6.2.4 Optimizations
Gadget execution is handled by the CONT primitive,
while ORET just acts as glue to chain multiple CONTs.
However, it is possible to chain CONT to CONT directly,
without ORET, and obtain the same effect. To do this,
the attacker points rdi in the ﬁrst CONT to the fake
exception information for the second CONT, and returns
to continue execution from the gadget via the fake
stack, as shown in Figure 7. The beneﬁt is that ORETs
are no longer needed. The fake stack only contain
copies of the address of continue execution to use
them as return addresses for the gadgets. However, this
optimization ties up the rdi register: the gadget must not
use or corrupt it. Whether this optimization is applicable
depends on the gadgets that are used. For example, it
applies to the SGX-Shield exploit in Section 7.
On the other hand, if all registers needed by the gadgets
can be set via the ORET primitive, it is possible to chain
exclusively ORET primitives. In this case, the attacker
just sets up a fake stack which runs each gadget from
an ORET and makes each gadget return to asm oret.
Note that, as explained in Section 6.2.1, ORET might
or might not be able to pivot the stack depending on the
SDK version. In SDKs from 2.0 onwards, it is possible
to manipulate rsp through rbp. On earlier versions, the
stack pointer cannot be manipulated in a single call. This
is problematic when exploiting a buffer overﬂow: if the
stack cannot be pivoted, the whole fake stack has to be
USENIX Association
27th USENIX Security Symposium    1221
continue
execution
First CONT
&asm oret
ORET ctx
rip
rdi
&asm oret