### Table II: Bounded Verification of Constant-Time Cryptographic Implementations

- **#I**: Number of static instructions
- **#Iu**: Number of unrolled instructions
- **T**: Execution time in seconds (timeout or exhaustive exploration)
- **S**: Status ( for timeout,  for exhaustive exploration)

| #I | #Iu | T (s) | S |
|---|---|---|---|
| 16.8k | 2.8 | 4.3 |  |
| 31.8k | 3.5k | .6 |  |
| 33.9 | 38.5k | 35.7k |  |
| 406 | 22.7M | 3154 |  |

**Observations:**
- Clang with -O3 introduces a secret-dependent conditional jump, violating constant-time.
- Functions `ct_sort` and `ct_sort_mult`, verified by `ct-verif` (LLVM bytecode compiled with Clang), are vulnerable when compiled with GCC -O0 or Clang -O3 -m32 -march=i386.

### Table III: Bug-Finding in Constant-Time Cryptographic Implementations

- **#I**: Number of static instructions
- **#Iu**: Number of unrolled instructions
- **T**: Execution time in seconds
- **CT src**: Indicates if the source is constant-time
- **S**: Status ( for insecure program)
- **Utility**: Number of bugs

| #I | #Iu | T (s) | CT src | S | Utility |
|---|---|---|---|---|---|
| 767 | ≈ #I | .29 | Y | 21× | 21 |
| 735 | 3600 | 7513 | 13.3 | Y | 18× | 44 |
| 375 | 873 | 1574 | N | 8 |
| 365 | 10421 | 9.4 | N | 950 | 11372 | 2574 | N | 5 |
| 6025 | 30946 | 4172 | - | 42× | 110 |

**Total:**

- **BearSSL**
- **OpenSSL tls-rempad-luk13**

### Effects of Compiler Optimizations on Constant-Time (RQ1, RQ2)

Simon et al. [12] manually analyzed whether Clang optimizations break the constant-time property for five different versions of a selection function. We reproduced their analysis automatically and extended it significantly, adding:

- 29 new functions
- A newer version of Clang
- The ARM architecture
- The GCC compiler
- ARM-linux-gnueabi-gcc version 5.4.0 for ARM

**Total Executables: 408 (192 in the initial study)**

### Table IV: Constant-Time Analysis of Several Functions Compiled with GCC or Clang

- **O0/O3**: Optimization levels
- **Status**: Secure ( ) or Insecure ( )

| Function | cl-3.9 O0 | cl-3.9 O3 | gcc-5.4 O0 | gcc-5.4 O3 | arm-gcc O0 | arm-gcc O3 |
|---|---|---|---|---|---|---|
| ct_select_v1 |  |  |  |  |  |  |
| ct_select_v2 |  |  |  |  |  |  |
| ct_select_v3 |  |  |  |  |  |  |
| ct_select_v4 |  |  |  |  |  |  |
| select_naive (insecure) |  |  |  |  |  |  |
| ct_sort |  |  |  |  |  |  |
| ct_sort_mult |  |  |  |  |  |  |
| sort_naive (insecure) |  |  |  |  |  |  |
| hacl_utility (×11) |  |  |  |  |  |  |
| openssl_utility (×13) |  |  |  |  |  |  |
| tea_encrypt |  |  |  |  |  |  |
| tea_decrypt |  |  |  |  |  |  |

**Conclusions:**
- Clang is more likely to optimize away constant-time protections as the optimization level increases.
- Newer versions of Clang are not necessarily more likely than older ones to break constant-time (e.g., `ct_sort` is non-constant-time with Clang-3.9 but not with Clang-7.1).
- GCC optimizations tend to remove branches, reducing the likelihood of introducing vulnerabilities in constant-time code. Specifically, GCC for ARM produces secure binaries from insecure source codes like `sort_naive` and `select_naive`.

### Conclusion (RQ1, RQ2)

- **Analysis**: 338 samples of representative cryptographic primitives compiled with different versions and options of Clang and GCC over x86 and ARM.
- **Results**:
  - Proved 296 binaries to be CT-secure.
  - Found 3 new vulnerabilities that slipped through previous analyses.
  - Extended and automated a previous study on the effects of compilers on constant-time.
  - Demonstrated that GCC optimizations help enforce constant-time, even producing secure binaries from insecure sources on ARM.

### Comparisons (RQ3, RQ4, RQ5)

#### Comparison vs. Standard Approaches (RQ3)

- **Metrics**: Total number of unrolled instructions (#I), number of instructions explored per second (#I/s), total number of queries sent to the solver (#Q), number of exploration (resp. insecurity) queries (#Qe, #Qi), total execution time (T), timeouts ( ), programs proven secure ( ), programs proven insecure ( ), unknown status (∼).

| Method | #I | #I/s | #Q | #Qe | #Qi | T (s) |  |  | ∼ |
|---|---|---|---|---|---|---|---|---|---|
| SC | 16k | 154k | 65473 | 15 | 282 | 41 | 15 | 3.9 | 170k |
| RelSE | 78k | 59316 | 14 | 283 | 42 | 13 | 97k | 19k | 5.4 |
| BINSEC/REL | 22.8M | 3861 | 1.3k | 0 | 296 | 42 | 5895 | 0 |  |

**Conclusion:**
- RelSE performs slightly better than SC (×1.38 speedup) but both are inefficient on binary code.
- BINSEC/REL outperforms both, especially in reducing the number of queries sent to the solver (×60 less insecurity queries than RelSE).

#### Performances of Simplifications (RQ4)

- **Simplifications**: On-the-fly read-over-write (FlyRow), untainting (Unt), and fault-packing (fp).

| Version | #I | #I/s | #Q | #Qe | #Qi | T (s) |  |  | ∼ |
|---|---|---|---|---|---|---|---|---|---|
| Standard RelSE |  |  |  |  |  |  |  |  |  |
| RelSE + Unt |  |  |  |  |  |  |  |  |  |
| RelSE + fp |  |  |  |  |  |  |  |  |  |
| BINSEC/REL (RelSE + FlyRow + Unt + fp) | 22.8M | 3075 | 4018 | 2688 | 5.4 | 96919 | 19058 | 77861 | 59316 |
| RelSE + FlyRow + Unt | 22.8M | 3078 | 4018 | 2688 | 8.4 | 48071 | 20929 | 27142 | 44195 |
| RelSE + FlyRow + fp | 22.8M | 3861 | 3980 | 2688 | 10.5 | 33929 | 21649 | 12280 | 37372 |

**Conclusion:**
- FlyRow is the major improvement, drastically reducing the number of queries and achieving a ×569 speedup.
- Untainting and fault-packing have a positive impact, but their effect is modest once FlyRow is activated.

#### Comparison vs. Standard SE (RQ5)

- **Standard SE**: Models a single execution of the program with exploration queries but without insecurity queries.
- **PostRow**: Recent implementation of read-over-write as a formula pre-processing, posterior to SE.

| Method | #I | #I/s | #Q | T (s) |  |  | ∼ |
|---|---|---|---|---|---|---|---|
| SE | 440k | 15.1 | 23453 | 29122 | 7 | 7 | 0 |
| SE + PostRow [66] | 509k | 18.5 | 27252 | 27587 | 14 | 16 | 0 |
| SE + FlyRow | 22.8M | 6804 | 2688 | 3346 | 7 | 7 | 0 |
| RelSE | 22.8M | 3861 | 3980 | 5895 | 0 | 296 | 42 |

**Conclusion:**
- SE with FlyRow outperforms standard SE and SE with PostRow.
- BINSEC/REL achieves significant performance improvements over standard methods.