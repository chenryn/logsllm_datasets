### 3.3.1. Machine Types

The `Machine` field in the COFF (Common Object File Format) header specifies the target CPU architecture for the executable or object file. The image file can only be executed on the specified machine or a system that emulates it. Below are the defined values for the `Machine` field:

| Constant | Value | Description |
| --- | --- | --- |
| `IMAGE_FILE_MACHINE_UNKNOWN` | 0x0 | Contents assumed to be applicable to any machine type. |
| `IMAGE_FILE_MACHINE_ALPHA` | 0x184 | Alpha AXP™. |
| `IMAGE_FILE_MACHINE_ARM` | 0x1c0 | ARM processor. |
| `IMAGE_FILE_MACHINE_ALPHA64` | 0x284 | Alpha AXP™ 64-bit. |
| `IMAGE_FILE_MACHINE_I386` | 0x14c | Intel 386 or later, and compatible processors. |
| `IMAGE_FILE_MACHINE_IA64` | 0x200 | Intel IA64™. |
| `IMAGE_FILE_MACHINE_M68K` | 0x268 | Motorola 68000 series. |
| `IMAGE_FILE_MACHINE_MIPS16` | 0x266 | MIPS with 16-bit instructions. |
| `IMAGE_FILE_MACHINE_MIPSFPU` | 0x366 | MIPS with FPU. |
| `IMAGE_FILE_MACHINE_MIPSFPU16` | 0x466 | MIPS16 with FPU. |
| `IMAGE_FILE_MACHINE_POWERPC` | 0x1f0 | Power PC, little-endian. |
| `IMAGE_FILE_MACHINE_R3000` | 0x162 | MIPS R3000. |
| `IMAGE_FILE_MACHINE_R4000` | 0x166 | MIPS R4000, little-endian. |
| `IMAGE_FILE_MACHINE_R10000` | 0x168 | MIPS R10000. |
| `IMAGE_FILE_MACHINE_SH3` | 0x1a2 | Hitachi SH3. |
| `IMAGE_FILE_MACHINE_SH4` | 0x1a6 | Hitachi SH4. |
| `IMAGE_FILE_MACHINE_THUMB` | 0x1c2 | ARM Thumb instruction set. |

### 3.3.2. Characteristics

The `Characteristics` field in the COFF header contains flags that indicate various attributes of the object or image file. The following flags are currently defined:

| Flag | Value | Description |
| --- | --- | --- |
| `IMAGE_FILE_RELOCS_STRIPPED` | 0x0001 | Indicates that the file does not contain base relocations and must be loaded at its preferred base address. If the base address is not available, the loader reports an error. |
| `IMAGE_FILE_EXECUTABLE_IMAGE` | 0x0002 | Indicates that the image file is valid and can be run. If this flag is not set, it generally indicates a linker error. |
| `IMAGE_FILE_LINE_NUMS_STRIPPED` | 0x0004 | COFF line numbers have been removed. |
| `IMAGE_FILE_LOCAL_SYMS_STRIPPED` | 0x0008 | COFF symbol table entries for local symbols have been removed. |
| `IMAGE_FILE_AGGRESSIVE_WS_TRIM` | 0x0010 | Aggressively trim working set. |
| `IMAGE_FILE_LARGE_ADDRESS_AWARE` | 0x0020 | Application can handle addresses greater than 2 GB. |
| `IMAGE_FILE_16BIT_MACHINE` | 0x0040 | Reserved for future use. |
| `IMAGE_FILE_BYTES_REVERSED_LO` | 0x0080 | Little-endian: LSB precedes MSB in memory. |
| `IMAGE_FILE_32BIT_MACHINE` | 0x0100 | Machine based on 32-bit-word architecture. |
| `IMAGE_FILE_DEBUG_STRIPPED` | 0x0200 | Debugging information removed from the image file. |
| `IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP` | 0x0400 | If the image is on removable media, copy and run from the swap file. |
| `IMAGE_FILE_SYSTEM` | 0x1000 | The image file is a system file, not a user program. |
| `IMAGE_FILE_DLL` | 0x2000 | The image file is a dynamic-link library (DLL). Such files are considered executable for most purposes, although they cannot be directly run. |
| `IMAGE_FILE_UP_SYSTEM_ONLY` | 0x4000 | File should be run only on a uniprocessor (UP) machine. |
| `IMAGE_FILE_BYTES_REVERSED_HI` | 0x8000 | Big-endian: MSB precedes LSB in memory. |

### 3.4. Optional Header (Usually Image Only)

Every image file includes an Optional Header, which provides essential information to the loader. This header is also known as the PE (Portable Executable) Header. While it is optional for some files (e.g., object files), it is required for image files. For object files, the optional header typically has no function except to increase the file size.

#### 3.4.1. Optional Header Standard Fields (Image Only)

The first eight fields of the Optional Header are standard and defined for all implementations of COFF. These fields contain general information useful for loading and running an executable file and remain unchanged for the PE32+ format.

| Offset | Size | Field | Description |
| --- | --- | --- | --- |
| 0 | 2 | `Magic` | Unsigned integer identifying the state of the image file. The most common value is 0x10B, indicating a normal executable file. 0x107 identifies a ROM image. |
| 2 | 1 | `MajorLinkerVersion` | Linker major version number. |
| 3 | 1 | `MinorLinkerVersion` | Linker minor version number. |
| 4 | 4 | `SizeOfCode` | Size of the code (text) section, or the sum of all code sections if there are multiple sections. |
| 8 | 4 | `SizeOfInitializedData` | Size of the initialized data section, or the sum of all such sections if there are multiple data sections. |
| 12 | 4 | `SizeOfUninitializedData` | Size of the uninitialized data section (BSS), or the sum of all such sections if there are multiple BSS sections. |
| 16 | 4 | `AddressOfEntryPoint` | Address of the entry point, relative to the image base, when the executable file is loaded into memory. For program images, this is the starting address. For device drivers, this is the address of the initialization function. An entry point is optional for DLLs; if none is present, this field should be 0. |
| 20 | 4 | `BaseOfCode` | Address, relative to the image base, of the beginning of the code section when loaded into memory. |
| 24 | 4 | `BaseOfData` | Address, relative to the image base, of the beginning of the data section when loaded into memory. (PE32 only, absent in PE32+) |

#### 3.4.2. Optional Header Windows NT-Specific Fields (Image Only)

The next twenty-one fields are extensions to the COFF Optional Header format and contain additional information needed by the linker and loader in Windows NT.

| Offset (PE32/PE32+) | Size (PE32/PE32+) | Field | Description |
| --- | --- | --- | --- |
| 28 / 24 | 4 / 8 | `ImageBase` | Preferred address of the first byte of the image when loaded into memory; must be a multiple of 64K. The default for DLLs is 0x10000000. The default for Windows CE EXEs is 0x00010000. The default for Windows NT, Windows 95, and Windows 98 is 0x00400000. |
| 32 / 32 | 4 | `SectionAlignment` | Alignment (in bytes) of sections when loaded into memory. Must be greater than or equal to `FileAlignment`. Default is the page size for the architecture. |
| 36 / 36 | 4 | `FileAlignment` | Alignment factor (in bytes) used to align the raw data of sections in the image file. The value should be a power of 2 between 512 and 64K inclusive. The default is 512. If `SectionAlignment` is less than the architecture’s page size, this must match `SectionAlignment`. |
| 40 / 40 | 2 | `MajorOperatingSystemVersion` | Major version number of the required OS. |
| 42 / 42 | 2 | `MinorOperatingSystemVersion` | Minor version number of the required OS. |
| 44 / 44 | 2 | `MajorImageVersion` | Major version number of the image. |
| 46 / 46 | 2 | `MinorImageVersion` | Minor version number of the image. |
| 48 / 48 | 2 | `MajorSubsystemVersion` | Major version number of the subsystem. |
| 50 / 50 | 2 | `MinorSubsystemVersion` | Minor version number of the subsystem. |
| 52 / 52 | 4 | `Reserved` | Reserved. |
| 56 / 56 | 4 | `SizeOfImage` | Size, in bytes, of the image, including all headers; must be a multiple of `SectionAlignment`. |
| 60 / 60 | 4 | `SizeOfHeaders` | Combined size of the MS-DOS stub, PE Header, and section headers, rounded up to a multiple of `FileAlignment`. |
| 64 / 64 | 4 | `CheckSum` | Image file checksum. The algorithm for computing is incorporated into IMAGHELP.DLL. The following are checked for validation at load time: all drivers, any DLL loaded at boot time, and any DLL that ends up in the server. |
| 68 / 68 | 2 | `Subsystem` | Subsystem required to run this image. See “Windows NT Subsystem” below for more information. |
| 70 / 70 | 2 | `DLL Characteristics` | See “DLL Characteristics” below for more information. |
| 72 / 72 | 4 / 8 | `SizeOfStackReserve` | Size of stack to reserve. Only the Stack Commit Size is committed; the rest is made available one page at a time until the reserve size is reached. |
| 76 / 80 | 4 / 8 | `SizeOfStackCommit` | Size of stack to commit. |
| 80 / 88 | 4 / 8 | `SizeOfHeapReserve` | Size of local heap space to reserve. Only the Heap Commit Size is committed; the rest is made available one page at a time until the reserve size is reached. |
| 84 / 96 | 4 / 8 | `SizeOfHeapCommit` | Size of local heap space to commit. |
| 88 / 104 | 4 | `LoaderFlags` | Obsolete. |
| 92 / 108 | 4 | `NumberOfRvaAndSizes` | Number of data-dictionary entries in the remainder of the Optional Header. Each describes a location and size. |

### Windows NT Subsystem

The `Subsystem` field in the Optional Header determines the required Windows NT subsystem to run the image. The following values are defined:

| Constant | Value | Description |
| --- | --- | --- |
| `IMAGE_SUBSYSTEM_UNKNOWN` | 0 | Unknown subsystem. |
| `IMAGE_SUBSYSTEM_NATIVE` | 1 | Used for device drivers and native applications. |

This structured and detailed format ensures clarity and coherence in the documentation, making it easier for readers to understand and reference.