4 
NumberOfSymbols 
Number of entries in the symbol table. This 
data can be used in locating the string table, 
which immediately follows the symbol table. 
16 
2 
SizeOfOptionalHeader 
Size of the optional header, which is required 
for executable files but not for object files. An 
object file should have a value of 0 here. The 
format is described in the section “Optional 
Header.” 
18 
2 
Characteristics 
Flags indicating attributes of the file. See 
Section 3.3.2, “Characteristics,” for specific 
flag values. 
3.3.1. Machine Types 
The Machine field has one of the following values, defined below, which specify its machine 
(CPU) type. An image file can be run only on the specified machine, or a system emulating it. 
Constant 
Value 
Description 
IMAGE_FILE_MACHINE_UNKNOWN 
0x0 
Contents assumed to be applicable to any 
machine type. 
IMAGE_FILE_MACHINE_ALPHA 
0x184 
Alpha AXP™. 
IMAGE_FILE_MACHINE_ARM 
0x1c0 
IMAGE_FILE_MACHINE_ALPHA64 
0x284 
Alpha AXP™ 64-bit. 
IMAGE_FILE_MACHINE_I386 
0x14c 
Intel 386 or later, and compatible processors. 
IMAGE_FILE_MACHINE_IA64 
0x200 
Intel IA64™ 
IMAGE_FILE_MACHINE_M68K 
0x268 
Motorola 68000 series. 
IMAGE_FILE_MACHINE_MIPS16 
0x266 
IMAGE_FILE_MACHINE_MIPSFPU 
0x366 
MIPS with FPU 
IMAGE_FILE_MACHINE_MIPSFPU16 
0x466 
MIPS16 with FPU 
IMAGE_FILE_MACHINE_POWERPC 
0x1f0 
Power PC, little endian. 
IMAGE_FILE_MACHINE_R3000 
0x162 
IMAGE_FILE_MACHINE_R4000 
0x166 
MIPS® little endian. 
IMAGE_FILE_MACHINE_R10000 
0x168 
IMAGE_FILE_MACHINE_SH3 
0x1a2 
Hitachi SH3 
IMAGE_FILE_MACHINE_SH4 
0x1a6 
Hitachi SH4 
IMAGE_FILE_MACHINE_THUMB 
0x1c2 
3.3.2. Characteristics 
The Characteristics field contains flags that indicate attributes of the object or image file. The 
following flags are currently defined: 
Flag 
Value 
Description 
IMAGE_FILE_RELOCS_STRIPPED 
0x0001 
Image only, Windows CE, Windows 
NT and above. Indicates that the file 
does not contain base relocations 
and must therefore be loaded at its 
preferred base address. If the base 
address is not available, the loader 
reports an error. Operating systems 
running on top of MS-DOS 
(Win32s™) are generally not able to 
use the preferred base address and 
so cannot run these images. 
However, beginning with version 4.0, 
Windows will use an application’s 
preferred base address. The default 
behavior of the linker is to strip base 
relocations from EXEs. 
IMAGE_FILE_EXECUTABLE_IMAGE 
0x0002 
Image only. Indicates that the image 
file is valid and can be run. If this flag 
is not set, it generally indicates a 
linker error. 
IMAGE_FILE_LINE_NUMS_STRIPPED 
0x0004 
COFF line numbers have been 
removed. 
IMAGE_FILE_LOCAL_SYMS_STRIPPED 
0x0008 
COFF symbol table entries for local 
symbols have been removed. 
IMAGE_FILE_AGGRESSIVE_WS_TRIM 
0x0010 
Aggressively trim working set. 
IMAGE_FILE_LARGE_ADDRESS_AWARE 
0x0020 
App can handle > 2gb addresses. 
IMAGE_FILE_16BIT_MACHINE 
0x0040 
Use of this flag is reserved for future 
use. 
IMAGE_FILE_BYTES_REVERSED_LO 
0x0080 
Little endian: LSB precedes MSB in 
memory. 
IMAGE_FILE_32BIT_MACHINE 
0x0100 
Machine based on 32-bit-word 
architecture. 
IMAGE_FILE_DEBUG_STRIPPED 
0x0200 
Debugging information removed 
from image file. 
IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP 
0x0400 
If image is on removable media, 
copy and run from swap file. 
IMAGE_FILE_SYSTEM 
0x1000 
The image file is a system file, not a 
user program. 
IMAGE_FILE_DLL 
0x2000 
The image file is a dynamic-link 
library (DLL). Such files are 
considered executable files for 
almost all purposes, although they 
cannot be directly run. 
IMAGE_FILE_UP_SYSTEM_ONLY 
0x4000 
File should be run only on a UP 
machine. 
IMAGE_FILE_BYTES_REVERSED_HI 
0x8000 
Big endian: MSB precedes LSB in 
memory. 
3.4. Optional Header (Usually Image Only) 
Every image file has an Optional Header that provides information to the loader. This header is 
also referred to the PE Header. This header is optional in the sense that some files (specifically, 
object files) do not have it. For image files, this header is required. An object file may have an 
optional header, but generally this header has no function in an object file except to increase size.  
Note that the size of the optional header is not fixed. The Optional Header Size in the COFF 
Header (see Section 3.3 COFF File Header (Object & Image)) must be used in conjunction with 
the Optional Header’s Number of Data Directories field to accurately calculate the size of the 
header. In addition, it is important to validate the Optional Header’s Magic number for format 
compatibility. 
The Optional Header’s Magic number determines whether an image is a PE32 or PE32+ 
executable: 
Magic Number 
PE Format 
0x10b 
PE32 
0x20b 
PE32+ 
PE32+ images allow for a 64-bit address space while limiting the image size to 4 Gigabytes. Other 
PE32+ modifications are addressed in their respective sections. 
The Optional Header itself has three major parts: 
Offset 
(PE32/PE32+) 
Size 
(PE32/PE32+) 
Header part 
Description 
0 
28/24 
Standard fields 
These are defined for all implementations 
of COFF, including UNIX®. 
28/24 
68 / 88 
Windows specific 
fields 
These include additional fields to support 
specific features of Windows (for 
example, subsystem). 
96/112 
Variable 
Data directories 
These fields are address/size pairs for 
special tables, found in the image file and 
used by the operating system (for 
example, Import Table and Export Table). 
3.4.1. Optional Header Standard Fields (Image Only) 
The first eight fields of the Optional Header are standard fields, defined for every implementation 
of COFF. These fields contain general information useful for loading and running an executable 
file, and are unchanged for the PE32+ format. 
Offset 
Size 
Field 
Description 
0 
2 
Magic 
Unsigned integer identifying the state of the 
image file. The most common number is 
0413 octal (0x10B), identifying it as a normal 
executable file. 0407 (0x107) identifies a 
ROM image. 
2 
1 
MajorLinkerVersion 
Linker major version number. 
3 
1 
MinorLinkerVersion 
Linker minor version number. 
4 
4 
SizeOfCode 
Size of the code (text) section, or the sum of 
all code sections if there are multiple 
sections. 
8 
4 
SizeOfInitializedData 
Size of the initialized data section, or the sum 
of all such sections if there are multiple data 
sections. 
12 
4 
SizeOfUninitializedData 
Size of the uninitialized data section (BSS), 
or the sum of all such sections if there are 
multiple BSS sections. 
16 
4 
AddressOfEntryPoint 
Address of entry point, relative to image 
base, when executable file is loaded into 
memory. For program images, this is the 
starting address. For device drivers, this is 
the address of the initialization function. An 
entry point is optional for DLLs. When none 
is present this field should be 0. 
20 
4 
BaseOfCode 
Address, relative to image base, of beginning 
of code section, when loaded into memory. 
PE32 contains this additional field, absent in PE32+, following BaseOfCode: 
24 
4 
BaseOfData 
Address, relative to image base, of 
beginning of data section, when loaded into 
memory. 
3.4.2. Optional Header Windows NT-Specific Fields (Image Only) 
The next twenty-one fields are an extension to the COFF Optional Header format and contain 
additional information needed by the linker and loader in Windows NT. 
Offset 
(PE32/PE32+) 
Size 
(PE32/PE32+) 
Field 
Description 
28 / 24 
4 / 8 
ImageBase 
Preferred address of first byte of 
image when loaded into memory; 
must be a multiple of 64K. The default 
for DLLs is 0x10000000. The default 
for Windows CE EXEs is 
0x00010000. The default for Windows 
NT, Windows 95, and Windows 98 is 
0x00400000. 
32 / 32 
4 
SectionAlignment 
Alignment (in bytes) of sections when 
loaded into memory. Must greater or 
equal to File Alignment. Default is the 
page size for the architecture. 
36 / 36 
4 
FileAlignment 
Alignment factor (in bytes) used to 
align the raw data of sections in the 
image file. The value should be a 
power of 2 between 512 and 64K 
inclusive. The default is 512. If the 
SectionAlignment is less than the 
architecture’s page size than this 
must match the SectionAlignment. 
40 / 40 
2 
MajorOperatingSystemV
ersion 
Major version number of required OS. 
42 / 42 
2 
MinorOperatingSystemV
ersion 
Minor version number of required OS. 
44 / 44 
2 
MajorImageVersion 
Major version number of image. 
46 / 46 
2 
MinorImageVersion 
Minor version number of image. 
48 / 48 
2 
MajorSubsystemVersion 
Major version number of subsystem. 
50 / 50 
2 
MinorSubsystemVersion 
Minor version number of subsystem. 
52 / 52 
4 
Reserved 
dd 
56 / 56 
4 
SizeOfImage 
Size, in bytes, of image, including all 
headers; must be a multiple of 
Section Alignment. 
60 / 60 
4 
SizeOfHeaders 
Combined size of MS-DOS stub, PE 
Header, and section headers rounded 
up to a multiple of FileAlignment. 
64 / 64 
4 
CheckSum 
Image file checksum. The algorithm 
for computing is incorporated into 
IMAGHELP.DLL. The following are 
checked for validation at load time: all 
drivers, any DLL loaded at boot time, 
and any DLL that ends up in the 
server. 
68 / 68 
2 
Subsystem 
Subsystem required to run this image. 
See “Windows NT Subsystem” below 
for more information. 
70 / 70 
2 
DLL Characteristics 
See “DLL Characteristics” below for 
more information. 
72 / 72 
4 / 8 
SizeOfStackReserve 
Size of stack to reserve. Only the 
Stack Commit Size is committed; the 
rest is made available one page at a 
time, until reserve size is reached. 
76 / 80 
4 / 8 
SizeOfStackCommit 
Size of stack to commit. 
80 / 88 
4 / 8 
SizeOfHeapReserve 
Size of local heap space to reserve. 
Only the Heap Commit Size is 
committed; the rest is made available 
one page at a time, until reserve size 
is reached. 
84 / 96 
4 / 8 
SizeOfHeapCommit 
Size of local heap space to commit. 
88 / 104 
4 
LoaderFlags 
Obsolete. 
92 / 108 
4 
NumberOfRvaAndSizes 
Number of data-dictionary entries in 
the remainder of the Optional Header. 
Each describes a location and size. 
Windows NT Subsystem 
The following values are defined for the Subsystem field of the Optional Header. They determine 
what, if any, Windows NT subsystem is required to run the image. 
Constant 
Value 
Description 
IMAGE_SUBSYSTEM_UNKNOWN 
0 
Unknown subsystem. 
IMAGE_SUBSYSTEM_NATIVE 
1 
Used for device drivers and native 