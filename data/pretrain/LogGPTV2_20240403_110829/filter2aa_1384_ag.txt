nmap scan report for 10.0.10.204
Host is up (0.0023s latency).
nmap scan report for 10.0.10.205
Host is up (0.0041s latency).
nmap scan report for 10.0.10.206
Host is up (0.0040s latency).
nmap scan report for 10.0.10.207
Host is up (0.0037s latency).
nmap scan report for 10.0.10.220
Host is up (0.25s latency).
nmap scan report for nail.lan (10.0.10.225)
Host is up (0.0051s latency).
nmap scan report for HPEE5A60.lan (10.0.10.239)
Host is up (0.56s latency).
nmap scan report for pentestlab01.lan (10.0.10.160)
Host is up.
nmap done: 256 IP addresses (22 hosts up) scanned in 2.29 second
This command uses four Nmap command-line flags. The help command output is
very useful for explaining what these flags do. The first one tells Nmap to run a ping
scan and not to check for open ports. The second flag is used to specify the location of
the input file, which in this case is discovery/ranges.txt. The third flag tells Nmap to
use all three of the major output formats, which I’ll explain later, and the fourth flag
says to use an ICMP echo discovery probe:
-sn: Ping Scan - disable port scan
-iL : Input from list of hosts/networks
-oA : Output in the three major formats at once
-PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes
2.3.1
Primary output formats
Now, if you change into the discovery/hosts directory where you told Nmap to write
the pingsweep output, you should see three files: pingsweep.nmap, pingsweep.gnmap,
and pingsweep.xml. Go ahead and cat out each of these three files to familiarize your-
self with what they look like. The XML output file will come in handy once you begin
scanning individual targets for listening ports and services. For the sake of this chap-
ter, you need to pay attention to only the pingsweep.gnmap file. This is the “greppable
Nmap” file format that conveniently places all the useful information on a single line
so you can quickly use grep to find what you are looking for. You can grep for the
string “Up” to get the IP address of all the hosts that responded to your ICMP echo
discovery probe.
31
Discovering hosts with Nmap
 This is useful because you want to create a target list containing just the IP
addresses of live targets within your scoped IP address ranges. Run the following com-
mand to see output similar to what is shown in the next listing:
grep "Up" pingsweep.gnmap
Host: 10.0.10.1 (amplifi.lan)  Status: Up
Host: 10.0.10.27 (06FEC82.lan)  Status: Up
Host: 10.0.10.88 (VMB4000.lan) Status: Up
Host: 10.0.10.90 ()   Status: Up
Host: 10.0.10.95 ()   Status: Up
Host: 10.0.10.125 (AFi-P-HD.lan) Status: Up
Host: 10.0.10.138 (AFi-P-HD2.lan) Status: Up
Host: 10.0.10.151 (rdc01.lan)  Status: Up
Host: 10.0.10.181 (android.lan)    Status: Up
Host: 10.0.10.188 (bookstack.lan)    Status: Up
Host: 10.0.10.200 ()  Status: Up
Host: 10.0.10.201 ()  Status: Up
Host: 10.0.10.202 ()  Status: Up
Host: 10.0.10.203 ()  Status: Up
Host: 10.0.10.204 ()  Status: Up
Host: 10.0.10.205 ()  Status: Up
Host: 10.0.10.206 ()  Status: Up
Host: 10.0.10.207 ()  Status: Up
Host: 10.0.10.220 ()  Status: Up
Host: 10.0.10.225 (nail.lan)  Status: Up
Host: 10.0.10.239 (HPEE5A60.lan)    Status: Up
Host: 10.0.10.160 (pentestlab01.lan)  Status: Up    
Just like in the ping example, the cut command can be used to create a targets.txt file.
I prefer to place the targets.txt file in the discovery/hosts directory, but that’s just a
matter of personal preference. The following command places all the IP addresses
from hosts that are up in the file called targets.txt:
~$ grep "Up" pingsweep.gnmap | cut -d " " -f2 > targets.txt
In some cases, you may feel that the results of your pingsweep scan do not accurately
represent the number of hosts you expected to find. In many cases, this is due to sev-
eral or all the hosts within your target scope refusing to send ICMP echo replies. If this
is true, it’s likely because the system administrator configured them this way on pur-
pose due to a false sense that doing so would make the organization more secure. In
reality, this in no way prevents hosts from being discovered; it just means you have to
use an alternative method. One such method is what I refer to as the remote manage-
ment interface (RMI) port-detection method. 
Listing 2.4
Using grep to sort Nmap output for live hosts
My IP address, as 
shown in listing 2.1
32
CHAPTER 2
Discovering network hosts
2.3.2
Using remote management interface ports
The philosophy here is simple. If a host exists on the network, it exists for a purpose.
This host presumably has to be remotely accessible to the IT and network administra-
tion team for maintenance purposes, so some type of RMI port needs to be open on
that host. The standard ports for most RMIs are commonly known, and you can use
this fact to create a small port-scan list that can be used to perform host detection
across a broad range. 
 You can experiment with this as much as you want and include as many RMI ports
as you like, but keep in mind that the goal is to identify hosts in a timely fashion—and
scanning too many ports per IP address defeats the purpose. At some point, you might
as well just perform service discovery on the entire range, which works fine but, depend-
ing on the number of live hosts versus non-active IPs, could take 10 times longer than
necessary. Because most clients pay by the hour, I don’t recommend doing this. 
 I find that a simple five-port list of what I consider to be the top five RMIs can do
wonders to discover tricky hosts that are configured to ignore ICMP probes. I use the
following five ports:
 Microsoft Remote Desktop (RDP): TCP 3389
 Secure Shell (SSH): TCP 22
 Secure Shell (SSH): TCP 2222
 HTTP/HTTPS: TCP 80, 443
Of course, I wouldn’t be so bold as to claim that every single host on any network is
going to have one of these five ports open no matter what. I will claim, however, that if
you scanned these five ports on any enterprise network in the world, you’d absolutely
identify lots of targets, and it wouldn’t take you long. To illustrate this concept, I’ll run
a discovery scan against the same IP address range as before, but this time I’ll target
the five TCP ports I listed. Feel free to do the same on your target network:
~$ nmap -Pn -n -p 22,80,443,2222,3389 -iL discovery/ranges.txt 
➥ -oA discovery/hosts/rmisweep
TIP
This type of discovery scan is useful when your pingsweep scan returns
nothing, such as if your client has configured all systems to ignore ICMP echo
requests. The only reason anyone would configure a network this way is if
someone once told them it would be more secure. You now know how silly
that is (assuming you didn’t already).
Here there are a couple of new flags that I will explain before moving on. The first
one tells Nmap to skip pinging the IP address to see if it’s up before scanning for open
ports. The second flag says not to waste time performing DNS name resolution, and
the third new flag specifies the five TCP ports we want to scan on each IP address:
-Pn: Treat all hosts as online -- skip host discovery
-n/-R: Never do DNS resolution/Always resolve [default: sometimes]
-p : Only scan specified ports
33
Discovering hosts with Nmap
Before looking at the output of this scan, I hope you have noticed that it took quite a
bit longer than the previous one. If not, run it again and pay attention. You can rerun
Nmap commands, and they will simply overwrite the output file with the data from the
most recent run. In my case, the scan took just over 28 seconds to sweep the entire
/24 range, as you can see from the following small snippet.
nmap scan report for 10.0.10.255
Host is up (0.000047s latency).
PORT   STATE  SERVICE
22/tcp  filtered ssh
80/tcp  filtered http
443/tcp filtered https
2222/tcp filtered EtherNetIP-1
3389/tcp filtered ms-wbt-server
nmap done: 256 IP addresses (256 hosts up) scanned in 28.67 seconds    
The scan took more than 10 times as long as the previous scan. Why do you think that
is? It’s because Nmap had to check 256 IP addresses for a total of 5 TCP ports each,
thereby making 1,280 individual requests. Additionally, if you were watching the out-
put in real time, you may have noticed that Nmap chunks the /24 range into four
groups of 64 hosts. This is the default behavior, but it can be altered if you know how.
2.3.3
Increasing Nmap scan performance
I won’t profess to know why the default settings for Nmap are the way they are, but I’m
sure there is a good reason. That said, Nmap is capable of moving much faster, which
is often necessary when dealing with large networks and short timespans. Also, mod-
ern networks have come a long way in terms of bandwidth and load capacity, which I
suspect was an original factor when these low-performing default thresholds were
determined by the Nmap project. With two additional flags, the exact same scan can
be sped up drastically by forcing Nmap to test all 256 hosts at a time instead of in
64-host groups, as well as by setting the minimum packets-per-second rate to 1,280. To
take a look for yourself, go ahead and rerun the command from section 2.3.3, but this
time add --min-hostgroup 256 min-rate 1280 to the end of the command:
~$ nmap -Pn -n -p 22,80,443,3389,2222 -iL discovery/ranges.txt 
➥ -oA discovery/hosts/rmisweep --min-hostgroup 256 --min-rate 1280
nmap scan report for 10.0.10.255
Host is up (0.000014s latency).
PORT   STATE  SERVICE
Listing 2.5
Trimmed output from the finished Nmap scan
Listing 2.6
Using --min-hostgroup and --min-rate to speed up Nmap
The scan took 28
seconds to complete.
34
CHAPTER 2
Discovering network hosts
22/tcp  filtered ssh
80/tcp  filtered http
443/tcp filtered https
2222/tcp filtered EtherNetIP-1
3389/tcp filtered ms-wbt-server
nmap done: 256 IP addresses (256 hosts up) scanned in 2.17 seconds   
As you can see, that’s a significant time savings from the previous scan. I was a profes-
sional pentester for over a year conducting routine engagements for mid-size compa-
nies before somebody showed me that trick; I definitely wish I had known about it
sooner. 
WARNING
This technique to speed up scans isn’t magic, and it does have lim-
itations on how far you can go. But I’ve used a --min-rate setting of up to
50,000 before, and despite several error messages from nmap, I was able to
quickly and successfully scan 5 ports on 10,000 hosts or 50 ports on 1,000
hosts. If you adhere to that maximum threshold, you’ll likely see consistent
results. 
You can check the results of your RMI sweep by grepping for the “open” string in the
rmisweep.gnmap file like this:
~$ cat discovery/hosts/rmisweep.gnmap |grep open | cut -d " " -f2
10.0.10.1
10.0.10.27
10.0.10.95
10.0.10.125
10.0.10.138
10.0.10.160
10.0.10.200
10.0.10.201
10.0.10.202
10.0.10.203
10.0.10.204
10.0.10.205
10.0.10.206
10.0.10.207
10.0.10.225
10.0.10.239
Of course, this method doesn’t discover all the network targets; it only displays systems
that have one of the five ports listening. You could certainly increase the number of
hosts to discover by adding more ports, but keep in mind that there is a directly cor-
related relationship between the number of additional ports you add and a noticeable
increase in the amount of time it will take for your discovery scan to complete. I recom-
mend using this method only when the ICMP echo discovery probe fails to return any
hosts. That is a tell-tale sign that the system administrator at your target network read
a book on security from the 1980s and decided to deny ICMP echo replies explicitly.
This time the scan
completed in two seconds.
35
Additional host-discovery methods
2.4
Additional host-discovery methods
There are many other methods for identifying network hosts—too many to discuss in
detail in a single chapter. Nine times out of 10, a simple ICMP echo discovery probe
will do the trick. I will, however, point out a few techniques that are worth mention-
ing because I’ve had to use them at one time or another during an engagement, and
you might find yourself in a similar situation. The first method I want to bring up is
DNS brute-forcing.
2.4.1
DNS brute-forcing
Although this exercise is more common in external network penetration than internal,
it still has its uses from time to time on an INPT. The concept of DNS brute-forcing is
pretty simple to understand. You take a giant wordlist containing common subdomains
such as vpn, mail, corp, intranet, and so on, and make automated hostname resolution
requests to a target DNS server to see which names resolve to an IP address. In doing
so, you might find out that mail.companydomain.local resolves to 10.0.20.221 and
web01.companydomain.local resolves to 10.0.23.100. This would tell you that, at the
very least, there are hosts located within the 10.0.23.0/24 and 10.0.20.0/24 ranges.
 There is one obvious challenge to this method: clients can name their systems
whatever they want, so this technique is really only as good as the size and accuracy of
your wordlist. For example, if your client has a fascination with Star Trek characters,
prime numbers, and the game of chess, they likely have exotic hostnames like
“spockqueen37,” which is unlikely to appear in your list of subdomains to brute-force. 
 That said, most network administrators tend to stick with easy-to-remember host-
names because it makes sense and provides for easier documentation. So, with the
right wordlist, this method can be a powerful way to discover lots of hosts or IP
address ranges using nothing but DNS requests. My friend and colleague Mark Baseg-
gio created a powerful tool for DNS brute-forcing called aiodnsbrute, which is short for
Async DNS Brute. You should check out his GitHub page, download the code, and
play around with it: https://github.com/blark/aiodnsbrute.
2.4.2
Packet capture and analysis
This topic is a bit out of scope for an introductory book on network pentesting, so
there is no point in getting into details. I will instead simply explain the process and
why you would want to use it. The process of packet capture and analysis is straightfor-
ward to conceptualize. You simply open a packet-capture program such as Wireshark
or tcpdump and place your network interface card into monitor mode, creating what
is referred to in some circles as a packet sniffer. 
 Your sniffer listens for any and all packets traveling throughout your local broad-
cast range and displays them to you in real time. Making sense of the information in
these packets requires a great deal of understanding of various network protocols, but
even a novice can pick out IP addresses contained in the source and destination fields
36
CHAPTER 2
Discovering network hosts
of every network packet. It’s possible to log a lengthy packet capture to a single file
and then parse through the output for all unique IP addresses.
 The only logical reason someone would use this method would be to execute a
stealth engagement such as a red team pentest where they had to remain undetected
for as long as possible; even something as harmless as an ICMP sweep would be out-
side the scope of the engagement because it could potentially be detected. These
types of engagements are a lot of fun. But realistically, only the most mature organiza-
tions that have conducted several traditional pentests and remediation cycles should
consider such an exercise.
2.4.3
Hunting for subnets
Often while on a black-box engagement I’ll notice that the client has IP addresses all
over the place within a large /8 network such as 10.0.0.0/8. That’s over 16 million pos-
sible IP addresses. Even with performance-enhancing flags, scanning that many IP
addresses will be painful. Provided your engagement scope is opportunistic in nature
and your focus is less on discovering every single system and more on identifying as
many possible attack vectors as you can in a short time, I’ve come up with a neat trick;
it’s helped me cut down the time it takes to perform discovery against large ranges
more times than I can remember. This will definitely work for you, should you find
yourself on a similarly scoped engagement.
 The trick requires that the following assumption is correct: each subnet being used
contains a host on the .1 IP address. If you’re the type of person who is inclined to
think in absolutes, you might decide that because this won’t be the case every single
time, it might as well not ever be the case. Many people have responded this way when
I try to explain this method. They say, “But what if .1 isn’t in use? Then you’ve missed
an entire subnet.” To that I say, “So be it.” The point is that in my experience, 9 out of
10 usable subnets do contain a host on .1. This is because humans are predictable. Of
course, there are outliers here and there, but the majority of folks behave predictably.
So, I create an Nmap scan that looks as follows.
~$ sudo nmap -sn 10.0-255.0-255.1 -PE --min-hostgroup 10000 --min-rate 10000
Warning: You specified a highly aggressive --min-hostgroup.
Starting Nmap 7.70SVN ( https://nmap.org ) at 2019-05-03 10:15 CDT
Nmap scan report for amplifi.lan (10.0.10.1)    
Host is up (0.0029s latency).
MAC Address: ##:##:##:##:##:## (Unknown)
Nmapnmap done: 65536 IP addresses (1 host up) scanned in 24.51 seconds
This scan takes less than a minute to ping the .1 node on all 65,536 possible /24
ranges within a giant /8 range. For each IP address that I get back, I place the corre-
sponding /24 range for that IP in my ranges.txt file and then perform my normal
methods of discovering network hosts. It goes without saying that this method is not
Listing 2.7
Nmap scan to identify potential IP address ranges
Only one subnet was identified, 
which was expected in this case.
37
Summary
complete and will miss subnets that do not contain a host on the .1 node. But I cannot
tell you how many times I’ve impressed a client who has hosts all over the globe when
I send an email 15 minutes after the on-site kick-off meeting, stating that I have com-
pleted discovery on their /8 and have identified 6,482 hosts (an arbitrary number I
just made up), which I will now begin testing for services and vulnerabilities.
Summary
 The information-gathering phase begins with host discovery.
 ICMP is the preferred method to use when discovering network hosts.
 Nmap supports multiple IP ranges and provides more useful output than ping.
 When ICMP is disabled, hosts can be discovered using common RMI ports.
 Nmap scan speed can be improved using --min-hostgroup and --min-rate.
Exercise 2.1: Identifying your engagement targets
Create a directory in your pentest VM that will serve as your engagement folder
throughout this book. Place the IP address range(s) for your engagement in the dis-
covery folder in a file called ranges.txt. Use nmap and the host-discovery techniques
you learned in this chapter to discover all the live targets in your ranges.txt file, and
place the IP addresses in a file called targets.txt.
When you’re finished, you should have a directory tree that looks like this example:
 pentest
 documentation