load3
xor
xor
(ciphertext)
Figure 5: Signature detection: for the two steps of the parsing process we recall the DFG and the signature
that is being searched. The signature match is drawn in black and the rest of the DFG in light gray.
Function. Symmetric cryptographic algorithms are usually
implemented in a single function that does not call any
sub function. Based on this observation we can extract
every function which maps to a vertex with no direct
successor in the call graph.
Constant. As previously stated constants can be used to
identify cryptographic code. Code regions surround-
ing identiﬁed constants are good candidates for imple-
menting cryptographic primitives.
Mnemonic. The DFG normalization may modify some in-
struction’s mnemonic. Nevertheless most of them will
remain unmodiﬁed (or at least will be changed in an
easily predictable way). A ﬁrst and eﬀective step would
be to ﬁlter code regions based on the mnemonics of
their instructions.
From an implementation perspective the straight line code
requirement is obtained using DBI. During a program exe-
cution, every executed instruction is recorded and then an-
alyzed statically by our prototype.
In this section we present the results we obtained for three
cryptographic primitives: the XTEA block cipher, the MD5
hash function and the AES block cipher. For each of them
two groups of tests were performed. The ﬁrst group is de-
signed to extensively evaluate the inﬂuence of the compiler
and its options on the primitive detection. Given a pub-
licly available reference source code, we compiled it using
several compilers and multiple optimization levels. The sec-
ond group of tests is aimed at assessing the eﬃciency of
our method on real cryptographic binary code and to show
its resilience to source code variations. To do so we cre-
ated synthetic samples that use well known cryptographic
libraries that were used as distributed in their respective
Debian package.
Finally we discuss the performance of our approach.
8.1 Results on Samples Testing
We will try to justify here why our method does not pro-
duce any false positive. First, the normalization process
preserves the semantics. This is mandatory since semantics
discrepancies ampliﬁed by the whole set of rewriting rules
could have dramatic eﬀects on both the false positive and
the false negative ratio. Second, Ullmann algorithm for the
subgraph isomorphism problem returns exact solutions and
not approximations. Thence when a signature is detected,
the code fragment does implement the mechanism described
by the signature. Of course we do not deny that if the sig-
nature is not distinctive enough, it will appear in the DFG
of other algorithms.
XTEA
The ﬁrst algorithm we have tested is XTEA (a reminder
on XTEA and its implementation is given in Appendix C).
We used one signature for the encryption algorithm and one
signature for the decryption algorithm. They are composed
of approximately 500 vertices each and cover the 32 cycles
of a classical implementation. We evaluated the resilience to
variations in the compilation process by using the C source
code given on the Wikipedia page of XTEA 1. The results
are presented in Table 1.
We use three diﬀerent compilers with four optimization
levels ranging from −o0 (not optimized) to −o3 (fully op-
timized). Only two levels have been used for MSVC (Mi-
crosoft Visual Studio Compiler), they correspond to the
standard settings of the debug and release mode. Our pro-
totype was able to correctly identify the algorithm in every
case for both encryption and decryption.
The second testing phase involved three cryptographic li-
braries: Crypto++ [2], LibTomCrypt [10] and Botan [1].
1http://en.wikipedia.org/w/index.php?title=XTEA&
oldid=618892433
210Table 1: XTEA signature detection for diﬀerent con-
ditions of compilation.
GCC 4.9.1
(Linux 32-bit)
Clang 3.5.0
(Linux 32-bit)
MSVC 17.00
(Windows 32-bit)
ok
ok
ok
ok
ok
ok
ok
ok
ok
-
ok
-
−o0
−o1
−o2
−o3
The identiﬁcation was successful for these three libraries.
The only diﬃculty we faced was about the key scheduling.
The XTEA key scheduling is fairly simple, thus it can either
be performed in an early initialization phase resulting in a
round key buﬀer (as in LibTomCrypt) or it can be directly
computed within the main encryption/decryption loop (as
in Crypto++ or Botan). This diﬀerence cannot be removed
by the normalization step, hence it should be dealt with at
the signature level. The option we chose was to remove the
key scheduling from the signature to keep a unique signature
for both versions. Even though the key remains unidentiﬁed
it is acceptable since at least, the round key buﬀer (ﬁrst ver-
sion) or the key scheduling ﬁnal operations (second version)
are identiﬁed as part of the signature input variables.
MD5
The second algorithm we have tested is MD5 (a reminder
on MD5 and its implementation is given in Appendix B).
For reasons that will soon become apparent we used macro
signatures. Let us assume for the moment the following lay-
out for the signatures: one signature for each diﬀerent round
functions and a macro signature that congregates the round
signatures to form the 64 rounds of the Feistel network. For
the ﬁrst series of tests we took the C implementation given
in the appendices of the RFC [24] and we recompiled it us-
ing diﬀerent compilers and optimization levels. The results
are presented in the Table 2.
Table 2: MD5 signature detection for diﬀerent con-
ditions of compilation.
GCC 4.9.1
(Linux 32-bit)
Clang 3.5.0
(Linux 32-bit)
MSVC 17.00
(Windows 32-bit)
ok
ok
ok
ok
ok
ok
ok
ok
Partial
-
Partial
-
−o0
−o1
−o2
−o3
The identiﬁcation of the ﬁnal macro signature represent-
ing the Feistel network was successful except for MSVC. In
the case of MSVC not all of the 64 round signatures were cor-
rectly detected for the second message chunk. Consequently
the ﬁnal signature, that depends on the correct identiﬁca-
tion of every round, was not detected for the second message
chunk. This problem can be explained in two points that are
detailed as follows.
mizations performed later by MSVC and to our own rewrite
rules (particularly distributing left shifts over additions for
constant operand, refer to Section 5.3) it would have been
challenging to design a rewrite rule to detect and replace
the expanded form by a single rotation vertex. We choose
to tackle this problem at the signature level.
It is a per-
fect example to illustrate the interest of macro signatures.
Each round, after the normalization process, can still be
implemented in two diﬀerent ways: either with the rotation
operation or with the expanded form. The overall number of
combinations for the 64 rounds is 264. It is obviously impos-
sible to test 264 signatures. Instead, with macro signatures
we only have to double the number of round signatures (from
4 to 8).
Constant state. For the ﬁrst message chunk the state is
initialized with constant values. Because of the rewrite rules
designed to promote numeric simpliﬁcation (Section 5.3) op-
erations involving the initial state are merged with surround-
ing operations. It happens in the case of MSVC for the ex-
panded form of the rotation at the beginning of the second
chunk, scrambling the expected signature pattern. This is-
sue is still being investigated and we believe that a more
complete common subexpression elimination algorithm (ca-
pable of removing common subexpression distributed over
several vertices and not only two) might be able to solve
this issue.
We based our second testing phase on the following li-
braries: Crypto++, LibTomCrypt and OpenSSL [3]. The
result were successful and we faced none of the previously de-
scribed diﬃculties since rotations were always implemented
by the x86 instruction and the initial state was never per-
ceived as constant due to the API design which is such that
the initialization is performed in another function outside
the code fragment.
AES
The last algorithm we tested is the table implementation of
AES (a reminder on AES and its implementation is given
in Appendix A). We built three signatures, one for each
key size. The signatures are the same for encryption and
decryption, only the look up tables change. We choose the
source code provided by Gladman on his website for the ﬁrst
series of test. The results are presented in the Table 3.
Table 3: AES signature detection for diﬀerent con-
ditions of compilation.
GCC 4.9.1
(Linux 32-bit)
Clang 3.5.0
(Linux 32-bit)
MSVC 17.00
(Windows 32-bit)
ok
ok
ok
ok
ok
ok
ok
ok
ok
-
ok
-
−o0
−o1
−o2
−o3
Rotation. Every round function includes a rotation. Be-
cause there is no rotation operator in the C language, it
has to be implemented using two shift and an or operator.
Some compilers recognize this speciﬁc pattern and trans-
late it to the rotation instruction of the x86 instructions set.
However MSVC does not always perform this translation
and sometimes keeps the expanded form. Due to the opti-
Our prototype was able to successfully detect the signa-
ture in every case. For the second testing phase involv-
ing well known cryptographic libraries we used Crypto++,
LibTomCrypt and Botan. We were only able to test the
decryption for the Crypto++ library, since the encryption
uses MMX and SSE2 instructions which were not supported
by our DFG creation routine at the time when the tests
211were done. Aside from Crypto++’s encryption algorithm
the identiﬁcation was successful in every cases.
8.2 Performance
The subgraph isomorphism problem is a well known NP-
complete problem, but it can be solved eﬃciently in the
majority of the cases encountered in our context. Table 4
presents some of the execution times we obtained with our
prototype for the subgraph isomorphism step on a common
laptop computer. Each column corresponds to a code frag-
ment (taken from the LibTomCrypt library) and each row
corresponds to a signature.
Table 4: Execution times for the signature matching
step, on a common laptop computer.
TEA
MD5
AES256
753 vertices
904 vertices
1687 vertices
5ms
< 1ms
< 1ms
102ms
< 1ms
< 1ms
< 1ms
9ms
< 1ms
< 1ms
26ms
< 1ms
< 1ms
< 1ms
442ms
< 1ms
< 1ms
2.22s
TEA 1 cycle
(16 vertices)
TEA 32 cycles
(450 vertices)
MD5 1 round
(10 vertices)
MD5 64 rounds
(372 vertices)
AES 1 round
(76 vertices)
AES 14 rounds
(1012 vertices)
When the signature was not detected, the cell is colored
in gray. We ﬁrst notice that our prototype quickly (< 1ms)
eludes cases where the code fragment does not match the
signature. It is a reassuring result, since it will be the most
common scenario while testing large databases of signatures
with weak fragment selection heuristics. Second, we observe
that large signatures (the ones covering several rounds) take
signiﬁcantly more time than smaller ones (covering just one
round). Based on that observation, it may be tempting to
use macro signatures to reduce the signature’s size and thus
to achieve better performances. For instance if we split the
AES 14-round signature into two signatures: the ﬁrst one
covering one round (approximatively 70 vertices) and the
second one linking the 14 rounds together (approximatively
130 vertices), the execution time is reduced: 1.3s instead of