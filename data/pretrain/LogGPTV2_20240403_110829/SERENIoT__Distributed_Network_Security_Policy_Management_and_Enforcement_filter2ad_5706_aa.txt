title:SERENIoT: Distributed Network Security Policy Management and Enforcement
for Smart Homes
author:Corentin Thomasset and
David Barrera
SERENIoT: Distributed Network Security Policy
Management and Enforcement for Smart Homes
Corentin Thomasset
PI:EMAIL
Polytechnique Montréal
Montréal, Canada
David Barrera
PI:EMAIL
Carleton University
Ottawa, Canada
ABSTRACT
Selectively allowing network traffic has emerged as a dominant
approach for securing consumer IoT devices. However, determining
what the allowed behavior of an IoT device should be remains an
open challenge. Proposals to date have relied on manufacturers and
trusted parties to provide allow lists of network traffic, but these
proposals require manufacturer involvement or placing trust in an
additional stakeholder. Alternatively, locally monitoring devices
can allow building allow lists of observed behavior, but devices
may not exhaust their functionality set during the observation
period, and the behavior may change following a software update
which requires re-training. This paper proposes a blockchain-based
system for determining whether an IoT device is behaving like other
devices of the same type. Our system, SERENIoT, overcomes the
challenge of initially determining the correct behavior for a device.
Nodes in the SERENIoT public blockchain submit summaries of the
network behavior observed for connected IoT devices and build
allow lists of behavior observed by the majority of nodes. Changes
in behavior through software updates are automatically added to
the allow list once the update is broadly deployed. Through a proof-
of-concept implementation of SERENIoT on a small IoT network
and a large-scale Amazon EC2 simulation, we evaluate the security,
scalability, and performance of our system.
CCS CONCEPTS
• Security and privacy → Intrusion detection systems.
KEYWORDS
IoT security, traffic filtering, intrusion detection, blockchain
ACM Reference Format:
Corentin Thomasset and David Barrera. 2020. SERENIoT: Distributed Net-
work Security Policy Management and Enforcement for Smart Homes. In
Annual Computer Security Applications Conference (ACSAC 2020), Decem-
ber 7–11, 2020, Austin, USA. ACM, New York, NY, USA, 14 pages. https:
//doi.org/10.1145/3427228.3427235
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC 2020, December 7–11, 2020, Austin, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8858-0/20/12...$15.00
https://doi.org/10.1145/3427228.3427235
1 INTRODUCTION
The rapid adoption of the Internet of Things (IoT) challenges well-
established computer security strategies. Due to their deployment
scale, IoT devices cannot be secured using traditional techniques
such as anti-malware or network intrusion detection systems (NIDS).
The diversity in IoT hardware and software combined with the de-
ployment volume makes it difficult to design security systems that
are effective yet not overburdened with management complexity.
This is of particular importance in smart homes, where users are
typically not security experts.
IoT devices are pervasive [21] and always connected. They are
manufactured to be low-cost, so security is often not the primary
design goal. As expected, numerous papers [4, 9, 29, 30] studying
the security of IoT devices have found a steady stream of vulnera-
bilities (e.g., the Mirai botnet [5]) that pose a threat to users, to their
environments, and to the broader global Internet infrastructure.
While IoT devices are diverse, one unifying characteristic is that
their feature-set is generally simple; a device may sense its envi-
ronment and submit readings to a cloud service (e.g., a humidity
sensor), listen for inbound requests to perform some action (e.g.,
a WiFi light switch), or some combination of both. IoT devices by
definition are not general purpose computers1, and as such they do
not require the network privileges of a general purpose system to
perform their primary task. However, IoT devices are often treated
indifferently from mobile phones, laptops, and other general pur-
pose systems on networks, allowing any network communication
that originates from the device to reach any host on the Internet.
This over privilege allows compromised devices to directly attack
remote hosts and services, or to act as steppingstones in more
sophisticated attacks.
To prevent these attacks, existing NIDS systems could be used,
but these require the user to configure operating parameters and
tune the detection logic to avoid being overwhelmed by false pos-
itives. A conceptually simpler approach is the idea of allowing
only a small set of network traffic to flow to/from an IoT device
as needed. By allowing only the types of network activity that a
device can generate or accept (which should roughly match the
functional requirements of the device’s primary task), the device
can be constrained without requiring the modification of its on-
board software. This is of particular interest in IoT, where devices
may have long lifespans sometimes outlasting the manufacturer
or software update support period. Moreover, false positives (i.e.,
blocking legitimate outbound connections) should be few and far
between if the device can be accurately profiled.
1We note, however, that some IoT devices may be built on top of general purpose
operating systems such as Linux.
542ACSAC 2020, December 7–11, 2020, Austin, USA
Corentin Thomasset and David Barrera
Manufacturer Usage Descriptions (MUD [22]) standardize the
policy language in which IoT network security policies can be writ-
ten, so that the device manufacturer or a trusted third party can
encode device behavior into a machine-readable policy. This policy
can be enforced at the network edge, protecting all devices in the
local network. The open question that remains is: what network
behavior should be included in the list of allowed traffic? Requiring
manufacturers to provide allow lists may not scale; there are too
many unique IoT vendors, some of which simply re-brand devices
manufactured by another vendor. A trusted third party could ana-
lyze devices and generate allow lists, but the business incentives
(including user willingness to pay for such a service) aren’t clear.
Users themselves could analyze local device behavior and generate
profiles, but this approach may not scale to households with large
number of IoT devices.
In this paper we propose a blockchain-based network security
policy management and enforcement system for home IoT environ-
ments. Our system, SERENIoT (pronounced Serenity), characterizes
IoT device behavior locally and uses a decentralized ledger to de-
termine whether the local behavior matches that observed by other
peers in the network. Policies of allowed behavior2 are the result
of a consensus algorithm identifying network behavior observed
by the majority of nodes in the network. Network connections that
are unique to a device are blocked until they are observed by most
nodes, preventing the spread of Mirai-style botnets.
SERENIoT is designed to run on network appliances such as
home routers. The system analyses IP traffic between local IoT
devices and their cloud companion services, making it compatible
with all IP-based IoT devices and hubs. Since these appliances are
usually already present in home networks (e.g., ISP-provided home
routers), our system does not require any drastic network topology
changes. SERENIoT extends the security features of home gateways
by adding network policy enforcement for IoT devices.
Our contributions are:
(1) The design and implementation of a novel approach to build
behavioral allow lists of IoT device traffic. The approach is
based on blockchain and requires no opt in by manufactur-
ers or trust in third parties. SERENIoT’s public blockchain
provides new data sources to audit IoT device behaviors at
scale and assists in the detection of new threats.
(2) The evaluation of our system through large-scale simulations
with 53 devices and 1000 nodes and on a small-scale testbed
with real world devices.
The remainder of the paper is structured as follows. Section 2
reviews IoT security background and related work and gives a
brief overview of relevant blockchain concepts. Section 3 presents
the technical details of SERENIoT. Section 4 evaluates scalability,
performance and security. Sections 5 and 6 present the limitations
of our implementation and discuss related deployment issues. We
conclude in Section 7.
2Security policies that permit only allowed behavior are more often referred to as
whitelists. Throughout the paper we deliberately avoid this term in favor of the more
descriptive allow lists.
2 RELATED WORK AND BLOCKCHAIN
REVIEW
2.1 IoT security
One common solution to protect IoT networks is to deploy a signature-
based Network Intrusion Detection System (NIDS) [13, 20, 24] on
IoT networks. NIDS monitor network traffic and look for known
attack signatures. These solutions are therefore only efficient if the
attack is already known and require constant updates to have the
latest signature base. Although these solutions might be workable
for industrial IoT networks with dedicated security teams, complex
IDS solutions are not suited for home environment where experts
are likely unavailable to monitor, maintain, and configure them.
IDSes can be augmented by using machine learning to detect previ-
ously unseen attacks. However, this introduces uncertainty as false
positives can be exploited by attackers [33]. The accuracy issue is
also present when identifying device types [26]. The similarity in
behavior of distinct devices makes it difficult to determine which
device generated the traffic, or what policy to apply to a particular
device.
An alternative approach is to permit traffic based on policies
describing the devices’ expected behavior. This approach is some-
times referred to as specification-based intrusion detection, where
the policy is a narrowly defined list of allowed behavior. The poli-
cies can be provided by the manufacturers or trusted parties as
proposed by the IETF in RFC8520 [22] or generated by local device
observation [7]. Yet another approach is to classify devices into
controllers (e.g., smart phones and IoT hubs) and non-controllers
(e.g., light bulbs), and prevent non-controllers from connecting to
other devices. Non-controllers are given fewer network privileges,
and are only allowed to connect to their cloud endpoints [12].
Anomaly detection capabilities can also be embedded into de-
vices themselves [31]. The idea here is that the firmware on the
device is updated to include an anomaly detection agent which
monitors the system for malicious activity. Since this approach
requires changes to software running on every IoT device, it is
largely incompatible with devices that are currently deployed and
no longer maintained. Moreover, it requires strong cooperation
with manufacturers for adoption.
2.2 Blockchain review
We briefly review the key concepts of blockchain technology. A
deeper treatment can be found in [32]. Blockchain technology ad-
dresses use cases where multiple distrusting parties want to jointly
participate in a system. Blockchain provides shared governance
where participants collaboratively decide what gets added to the
chain and ensures that the protocol is being followed correctly by
all the participants. Participation may be open (anyone can join, pos-
sibly without registration) or closed (only authorized participants
can contribute).
A major aspect of blockchains is their verifiable sate: the data
in a blockchain reflects the output of its consensus protocol which
has been verified by all the participants. That is, only data that has
been agreed upon through consensus can be added to the chain,
leading the chain to contain only verifiable data. Once data has been
verified by participants in the network, a new block containing this
543SERENIoT
ACSAC 2020, December 7–11, 2020, Austin, USA
data is added to the chain. This data includes a cryptographic link
to the previous block, allowing all parties to verify the continuity
of the chain in addition to the validity of each block.
The consensus algorithm is thus a key aspect of every blockchain.
It ensures that the chain of blocks containing the data is kept syn-
chronized between participants so that they all have an identical
copy of it at any time. It also prevents the blockchain from grow-
ing too rapidly by introducing a delay between the creation of
new blocks. Multiple consensus algorithms exist [8]. The proof
of work (PoW) [6, 17] algorithm is widely used by popular permi-
sionless (open) blockchains such as Bitcoin3 and Ethereum4 and
requires block hashes to be smaller than a defined target. In PoW
blockchains, the weight of each participant’ vote in the validation
process is thus determined by its capacity to compute hashes and
this mechanism ensures that participants are randomly selected to
create new blocks. However, this approach is very costly from an
energy and computational perspective. Indeed, all the effort has no
utility beyond randomly delaying participants’ capacity to produce
valid blocks. Another approach is the proof of stake [19] which does
not rely on computing hashes and thus avoids the massive energy
requirements. With this algorithm, the creator of a new block is
chosen within a pool of participants who have staked a certain
amount of cryptocurrency. The penalty to harm the network is
then the cost of losing the staked amount of cryptocurrency. For
major blockchains this can amount to tens of thousands of dollars.
A participant trying to take over the network would also need to
own 51% of the cryptocurrency supply on that blockchain. That
amounts to billions of dollars for major cryptocurrencies at the
time of writing. It is thus less likely to happen than controlling half
of the network hash power for proof of work [23]. However, this
consensus mechanism requires a built-in cryptocurrency to work.
Both of these consensus algorithms are widely used and provide a
probabilistic way to verify the validity of blocks.
Finally, another feature of blockchains is data loss prevention.
The decentralized nature of blockchains means that data in the
chain is replicated across participants which allows recovery in
case of data loss. At any time a participant can ask for a copy of the
full chain and verify its contents.
Through these properties, Blockchain provides a tamper-proof
decentralized ledger that can be used beyond cryptocurrencies in
applications requiring accountability, transparency and trust in
data [32].
2.3 IoT security and blockchain
Most closely to our work, Golomb et al. [10] propose CIoTA as a
blockchain based anomaly detection system. CIoTA aims to build
collaborative models of IoT devices’ behavior at the device firmware
level. Models are computed locally and validated by the consensus
of the blockchain. The blockchain’s ledger is then used to inform
a client-side intrusion detection system producing alerts when
anomalous firmware events are detected. While a preliminary secu-
rity evaluation of CIoTA appears promising, it requires modification
of the devices firmware to embed a software agent. SERENIoT learns
device behavior at the network layer (see Section 3.3), and thus
3https://bitcoin.org/
4https://ethereum.org/
does not require any changes to the firmware enabling greater
compatibility with existing devices.
Mendez Mena et al. [25] built and evaluated a blockchain based
network filtering system for home networks. Their work focuses
on the implementation of middleboxes called “gatekeepers” that
enforce an allow list of actions on the network level. The allow list
is computed based on the information stored in an Ethereum smart
contract but their work does not detail how the smart contract is
populated. While their study focuses on the enforcement aspects,
SERENIoT presents a solution for both allow list enforcement and
generation.
3 SERENIOT INTRUSION DETECTION
SYSTEM
3.1 Overview
SERENIoT is a distributed specification-based intrusion detection
system for home IoT networks. It monitors the network traffic
to/from IoT devices to detect and block anomalous packets and
connections. It relies on a decentralized ledger that characterizes
devices’ behavior and hosts a list of allowed packet signatures.
SERENIoT nodes (called Sentinels) are designed to be deployed on
network appliances or middleboxes such as routers. A typical set-up
would see one Sentinel deployed per smart home (see Figure 1),
collaborating with other remote Sentinels to determine the correct
network behavior of IoT devices. Sentinels advertise a WiFi network
to which IoT devices connect, thus allowing mediation and filtering
of all network connectivity between the devices and the Internet.
The wireless network operates as a network bridge to the home local
area network (LAN), so all traffic entering or leaving the Sentinel is
monitored. Through its use of a distributed ledger and peer-to-peer
communication, SERENIoT can operate with little-to-no user input.
Moreover, compared to other network security solutions such as
signature-based intrusion detection systems, SERENIoT’s Sentinels
are implicitly always up to date.
Figure 1: SERENIoT Network topology. Sentinels acts as mid-
dleboxes between IoT devices and the network gateway, en-
abling blocking of connections that are outside the device
specification.
Concretely, Sentinels only forward packets that are defined in an
allow list. Any network connection that is not specified in the list
is discarded by the Sentinel. The allow list specifies network packet
signatures characterizing the behavior of a specific IoT device as
observed by the majority of Sentinels on the network. Allow lists