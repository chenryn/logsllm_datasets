还没有清理时又发生了一个错误。当CPU在报告错误时，如果发现
目标IA32_MCi_STATUS寄存器的VAL位为1，说明已经有错误信
息在寄存器中，那么CPU会根据以下规则决定是否覆盖寄存器中的
错误信息——启用的错误可以覆盖没有启用的错误；不可纠正的错
误可以覆盖可以纠正的错误；不可纠正的错误不可以覆盖还有效的
上一个不可纠正的错误。如果可以覆盖，那么处理器会用新的错误
信息覆盖前一个错误信息，并将此位置为1，软件负责清除此位。
VAL（MCi_STATUS register valid）（位63）：表示本寄存器中的
信息是否有效。处理器在写入错误信息后设置此位，软件在读取该
寄存器后应该清除此位。
IA32_MCi_ADDR（地址寄存器，P6称为MCi_ADDR）用来记录产
生错误的代码地址或数据地址。只有当IA32_MCi_STATUS的ADDRV
位为1时，该寄存器中的内容才有效。
该寄存器中的地址因错误情况不同，可能是段内的偏移地址、线性
地址或36位的物理地址。
IA32_MCi_MISC（附加信息寄存器，P6称为MCi_MISC）用来记录
与错误相关的附加信息。只有当IA32_MCi_STATUS的MISCV位为1
时，该寄存器中的内容才有效。
6.2.4 扩展的机器检查状态寄存器
从奔腾4和至强处理器开始，IA-32处理器还包含了数量不等的MCA
扩展状态寄存器，用来进一步记录机器检查异常发生时的处理器状态。
具体实现情况和数量可以通过读取IA32_MCG_CAP寄存器的
MCG_EXT_P位和MCG_EXT_CNT位域获得。如果支持扩展的机器检查
状态寄存器，那么这些寄存器的起始地址是180H，见表6-1。
表6-1 MCA扩展状态寄存器
MSR
地址
描  述
IA32_MCG_EAX
180H
机器检查错误发生时EAX寄存器的值
IA32_MCG_EBX
181H
机器检查错误发生时EBX寄存器的值
IA32_MCG_ECX
182H
机器检查错误发生时ECX寄存器的值
IA32_MCG_EDX
183H
机器检查错误发生时EDX寄存器的值
IA32_MCG_ESI
184H
机器检查错误发生时ESI寄存器的值
IA32_MCG_EDI
185H
机器检查错误发生时EDI寄存器的值
IA32_MCG_EBP
186H
机器检查错误发生时EBP寄存器的值
IA32_MCG_ESP
187H
机器检查错误发生时ESP寄存器的值
IA32_MCG_EFLAGS
188H
机器检查错误发生时EFLAGS寄存器的值
IA32_MCG_EIP
189H
机器检查错误发生时EIP寄存器的值。
IA32_MCG_MISC
18AH
只使用1位（位0），如果为1，则表示在操作调
试存储区（Debug Store）时发生了内存页错误
（或Page Assist）
IA32_MCG_RESERVED1
～
IA32_MCG_RESERVEDn
18BH～
18AH+n 保留供将来使用
需要说明的是，以上寄存器属于读或写零（read/write zero）寄存
器，意思是软件可以读这些寄存器，或者向这些寄存器写零。如果软件
企图向这些寄存器写入非零值，那么将导致一般性保护异常（#GP）。
当硬件重启（开机或RESET）时这些寄存器会被清零，但是当软件重启
（INIT）时，这些寄存器的值会被保持不变。
对于64位模式，表6-1略有变化，地址0x180～0x189，对应的是同
名的64位寄存器，IA32_MCG_RAX等。地址0x190～0x197对应的是64
位新增的8个寄存器R8～R15。
6.2.5 MCA错误编码
当处理器检测到机器检查错误时，它会向对应的
IA32_MCi_STATUS寄存器的低16位写入一个错误代码（MCA Error
Code），并将该寄存器的VAL位置为1。视错误情况的不同，处理器还
可能向16～31位写入一个与处理器型号有关的错误码。这里我们介绍一
下MCA错误码的编码和解析方法。MCA错误代码的含义对于所有IA-32
处理器都是一致的。
首先，所有错误码被分为简单错误码和复合错误码两种。简单错误
码的位编码及含义见表6-2。
表6-2 IA32_MCi_STATUS寄存器的MCA简单错误码
错  误
位 编 码
含  义
无错误
0000 0000
0000 0000
没有错误
未分类的错误
0000 0000
0000 0001
还没有分类的错误
微指令（microcode）ROM
奇偶校验错误
0000 0000
0000 0010
处理器内部的微指令ROM中存在奇偶
校验错误
外部错误
0000 0000
0000 0011
来自其他处理器的BINIT#信号导致该处
理器进入机器检查
FRC错误
0000 0000
0000 0100
FRC（Functional Redundancy Check）错
误
内部未分类错误
0000 01××
×××× ××××
处理器内部的未分类错误
复合错误码用来描述某一类型的错误，同一类型中又使用不同的位
域来进一步分类。例如1××××是TLB错误，××××这4位又分为TTLL两个
位域，TT用来代表事务类型（Transaction Type），LL用来代表缓存级
别（memory hierarchy level）。详情见表6-3～表6-7。
表6-3 MCA复合错误码的编码规则
类  型
模  式
译  码
TLB错误
0000 0000 0001 TTLL
{TT}TLB{LL}_ERR
memory hierarchy error 0000 0001 RRRR TTLL {TT}CACHE{LL}_{RRRR}_ERR
内部时钟
0000 0100 0000 0000
总线或互连错误
0000 1PPT RRRR IILL
BUS{LL}{PP}{RRRR}{II}{T}_ERR
表6-4 TT（Transaction Type）位域的编码
事 务 类 型
助 记 符
二进制编码
指令
I
00
数据
D
01
通用（generic）
G
10
表6-5 LL（Memory Hierarchy Level）位域的编码
Hierarchy Level
助 记 符
二进制编码
0级
L0
00
1级
L1
01
2级
L2
10
通用（generic）
LG
11
表6-6 RRRR（Request）位域的编码
请 求 类 型
助 记 符
二进制编码
一般错误（generic error）
ERR
0000
一般读（generic read）
RD
0001
续表
请 求 类 型
助 记 符
二进制编码
一般写（generic write）
WR
0010
读数据（data read）
DRD
0011
写数据（data write）
DWR
0100
取指（instruction fetch）
IRD
0101
预取（prefetch）
PREFETCH
0110
Eviction
EVICT
1111
Snoop
SNOOP
1000
表6-7 PP（Participation）、T（Time-out）和II（Memory or I/O）位域的编码