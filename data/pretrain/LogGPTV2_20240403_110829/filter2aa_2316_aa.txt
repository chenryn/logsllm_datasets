作者：白帽汇安全研究院@kejaly
校对：白帽汇安全研究院@r4v3zn
前言
在研究高版本 JDK 反序列化漏洞的时候，往往会涉及到 JEP 290 规范。但是网上公开针对 JEP 290 规范
原理研究的资料并不是很多，这就导致在研究高版本 java 反序列化的时候有些无能为力，所以最近对 
JEP 290 规范好好的研究的一番，输出这篇文章，希望和大家一起交流学习。
简介
官方描述： Filter Incoming Serialization Data ，即过滤传入的序列化数据。
主要内容有：
Provide a flexible mechanism to narrow the classes that can be deserialized from any class 
available to an application down to a context-appropriate set of classes.【提供了一个灵活的
机制，将可以反序列化的类从应用程序类缩小到适合上下文的类集（也就是说提供一个限制反序列
化的类的机制，黑白名单方式）。】
Provide metrics to the filter for graph size and complexity during deserialization to validate 
normal graph behaviors.（限制反序列化深度和复杂度）
Provide a mechanism for RMI-exported objects to validate the classes expected in 
invocations.【为 RMI 导出的对象设置了验证机制。（ 比如对于 RegistryImpl , DGCImpl 类内置
了默认的白名单过滤）】
The filter mechanism must not require subclassing or modification to existing subclasses of 
ObjectInputStream.
Define a global filter that can be configured by properties or a configuration file.（提供一个全
局过滤器，可以从属性或者配置文件中配置）
JEP 290  在 JDK 9 中加入，但在 JDK 6,7,8 一些高版本中也添加了：
官方文档：https://openjdk.java.net/jeps/290
JEP 290 核心类
JEP 290 涉及的核心类有： ObjectInputStream  类， ObjectInputFilter  接口， Config  静态类以
及 Global  静态类。其中 Config  类是 ObjectInputFilter 接口的内部类， Global  类又是 Config
类的内部类。
ObjectInputStream 类
JEP 290 进行过滤的具体实现方法是在 ObjectInputStream  类中增加了一个 serialFilter 属性和一
个 filterChcek  函数，两者搭配来实现过滤的。
构造函数
有两个构造函数，我们需要关注的是在这两个构造函数中都会赋值 serialFilter  字段为 
ObjectInputFilter.Config.getSerialFilter() :
 ObjectInputFilter.Config.getSerialFilter()  返回 ObjectInputFilter#Config  静态类中的 
serialFilter 静态字段
Java™ SE Development Kit 8, Update 121 (JDK 8u121)
Java™ SE Development Kit 7, Update 131 (JDK 7u131)
Java™ SE Development Kit 6, Update 141 (JDK 6u141)
serialFilter 属性
serialFilter  属性是一个 ObjectInputFilter  接口类型，这个接口声明了一个 checkInput  方法
（关于 ObjectInputFilter  后面会更细致的讲解）。
filterCheck 函数
filterCheck  函数逻辑可以分三步。
第一步，先会判断 serialFilter  属性值是否为空，只有不为空，才会进行后续的过滤操作。
第二步，将我们需要检查的 class  ，以及 arryLength 等信息封装成一个 FilterValues 对象，
传入到 serialFilter.checkInput  方法中，返回值为 ObjectInputFilter.Status  类型。
最后一步，判断 status  的值，如果 status  是 null  或者是 REJECTED  就会抛出异常。
ObjectInputStream 总结
到这里可以知道， serialFilter  属性就可以认为是 JEP 290 中的"过滤器"。过滤的具体逻辑写到 
serialFilter  的 checkInput  方法中，配置过滤器其实就是设置 ObjectInputStream  对象的 
serialFilter 属性。并且在 ObjectInputStream  构造函数中会赋值 serialFilter  为 
ObjectInputFilter#Config  静态类的 serialFilter  静态字段。
ObjectInputFilter 接口
是 JEP 290  中实现过滤的一个最基础的接口，想理解 JEP 290 ，必须要了解这个接口。
在低于 JDK 9  的时候的全限定名是 sun.misc.ObjectInputFIlter ， JDK 9  及以上是 
java.io.ObjectInputFilter  。
另外低于 JDK 9  的时候，是 getInternalObjectInputFilter  和 
setInternalObjectInputFilter ， JDK 9  以及以上是  getObjectInputFilter  和 
setObjectInputFIlter  。
先来看一下 ObjectInputFilter 接口的结构：
有一个 checkInput  函数，一个静态类 Config  ，一个 FilterInfo  接口，一个 Status  枚举类。
函数式接口
@FunctionalInterface  注解表明， ObjectInputFilter  是一个函数式接口。对于不了解函数式接
口的同学，可以参考：https://www.runoob.com/java/java8-functional-interfaces.html 以及 https://
www.jianshu.com/p/40f833bf2c48 ， https://juejin.cn/post/6844903892166148110 。
在这里我们其实只需要关心函数式接口怎么赋值，函数式接口的赋值可以是： lambda 表达式或者是方
法引用，当然也可以赋值一个实现了这个接口的对象。
lambda 赋值：
使用函数引用赋值，比如 RMI 中 RegistryImpl  使用的就是函数引用赋值：
Config 静态类
Config  静态类是 ObjcectInputFilter  接口的一个内部静态类。
Config#configuredFilter 静态字段
configuredFilter  是一个静态字段，所以调用 Config  类的时候就会触发 configuredFilter  字段
的赋值。
可以看到会拿到 jdk.serailFilter  属性值，如果不为空，会返回 createFilter(var0) 的结果
（ createFilter  实际返回的是一个 Global  对象）。
jdk.serailFilter  属性值获取的方法用两种，第一种是获取 JVM 的 jdk.serialFilter  属性，第二
种通过在  %JAVA_HOME%\conf\security\java.security   文件中指定 jdk.serialFilter  来设置。
另外从代码中可以看到，优先选择第一种。
Config#createFilter 方法
Config#createFilter  则会进一步调用 Global.createFilter 方法，这个方法在介绍 Global  类的
时候会说，其实就是将传入的 JEP 290 规则字符串解析到 Global 对象的 filters  字段上，并且返回这
个 Global  对象。
Config 类的静态块
Config 类的静态块，会赋值 Config.configuredFilter  到 Config.serialFilter  上。
Config#getSerialFilter 方法
返回 Config#serialFilter 字段值。
Config 静态类总结
Config  静态类在初始化的时候，会将 Config.serialFilter  赋值为一个 Global 对象，这个 Global  
对象的 filters 字段值是 jdk.serailFilter 属性对应的 Function  列表。（关于 Global  对象介绍
下面会说到，大家先有这么一个概念）
而 ObjectInputStream  的构造函数中，正好取的就是 Config.serialFilter  这个静态字段 ， 所以
设置了 Config.serialFilter 这个静态字段，就相当于设置了 ObjectInputStream 类全局过滤器。
比如可以通过配置 JVM 的 jdk.serialFilter  或者 %JAVA_HOME%\conf\security\java.security  
文件的 jdk.serialFilter  字段值，来设置 Config.serialFilter  ，也就是设置了全局过滤。
另外还有就是一些框架，在开始的时候设置也会设置 Config.serialFilter  ，来设置 
ObjectInputStream  类的全局过滤。 weblogic 就是，在启动的时候会设置 Config.serialFilter  
为 WebLogicObjectInputFilterWrapper  对象。
Global 静态类
Global  静态类是 Config 类中的一个内部静态类。
Global  类的一个重要特征是实现了 `ObjectInputFilter  接口，实现了其中的 checkInput  方法。
所以 Global  类可以直接赋值到 ObjectInputStream.serialFilter  上。
Global#filters 字段
是一个函数列表。
Global#checkInput 方法
Global  类的 checkInput  会遍历 filters  去检测要反序列化的类。
Global 中的构造函数
Global  中的构造函数会解析 JEP 290 规则。 Global  中的构造函数的作用用一句话总结就是：解析 JEP 
290 规则为对应的 lambda  表达式，然后添加到 Global.filters  。
JEP 290 的规则如下：
Global  类的构造函数：
具体就是通过 filters  add  添加 lambdd  表达式到 filters 中，也就是说对 Global  的 filters  赋值
的是一个个 lambada  函数。
Global#createFilter 方法
传入规则字符串，来实例化一个 Global  对象。
Global 类的总结
 Global  实现了 ObjectInputFilter 接口，所以是可以直接赋值到 
ObjectInputStream.serialFilter  上。
Global#filters  字段是一个函数列表。
Global  类中的 chekInput  方法会遍历 Global#filters  的函数，传入需要检查的 FilterValues
进行检查（ FilterValues  中包含了要检查的 class , arrayLength ，以及 depth  等）。
过滤器
在上面总结 ObjectInputStream  类的中说过，配置过滤器其实就是设置 ObjectInputStream  类中的 
serialFilter  属性。
过滤器的类型有两种，第一种是通过配置文件或者 JVM  属性来配置的全局过滤器，第二种则是来通过改
变 ObjectInputStream  的 serialFilter  属性来配置的局部过滤器。
全局过滤器
设置全局过滤器，其实就是设置 Config 静态类的 serialFilter  静态字段值。
具体原因是因为在 ObjectInputStream  的两个构造函数中，都会为 serialFilter  属性赋值为 
ObjectInputFilter.Config.getSerialFilter()  。
而 ObjectInputFilter.Config.getSerialFilter  就是直接返回 Config#serialFilter ：
jdk.serailFilter
在介绍 Config  静态类的时候说到， Config  静态类初始化的时候，会解析 jdk.serailFilter  属性
设置的 JEP 290 规则到一个 Global  对象的 filters  属性，并且会将这个 Global  对象赋值到 
Config  静态类的 serialFilter  属性上。
所以，这里 Config.serialFilter  值默认是解析 jdk.serailFilter  属性得到得到的 Global  对
象。
weblogic 全局过滤器
在 weblogic 启动的时候，会赋值 Config.serialFilter  为 WebLogicObjectInputFilterWrapper  
。
具体流程如下：
首先在 weblogic 启动的时候，先调用 WeblogicObjectInputFilter.initializeInternal  方法，在 
initializeInternal  方法中会先  new 一个 JreFilterApiProxy  对象，这个对象是一个进行有关 
JEP 290 操作的代理对象（具体原理是通过反射来调用的）。
随后 new  一个  WeblogicFilterConfig   对象。
在创建 WeblogicFilterConfig  对象的时候中会对 weblogic 黑名单进行整合，最后得到 
WeblogicFilterConfig 中 serailFilter ， golbalSerailFilter ，以及 
unauthenticatedSerialFilter 属性如下：
接着调用 filterConfig.getWebLogicSerialFilter 取出上面赋值的
WeblogicFilterConfig#serailFilter ,并调用  filterApliProxy.createFilterForString   方法
把 filter  字符串转化为 Object  类型，并且封装到 WebLogicObjectInputFilterWrapper  对象中。
最后会取出刚刚设置的 filter ，传入 filterApiProxy.setGlobalFilter 方法中对 Config  的 
serialFilter  属性赋值：
调用完之后我们利用 filterApiProxy.methodConfigGetSerialFilter.invoke(null)  来查看 
Config  的 serailFilter  字段值， 可以看到 Config.serialFilter 成功被设置为一个 
WeblogicObjectInputFilterWrapper  对象。
查看 pattern  正是打了 7 月份补丁的全局反序列化黑名单：
用一段话来阐述 weblogic 中 全局过滤器赋值的流程就是：
weblogic 启动的时候，会调用 WeblogicObjectInputFilter  的 initializeInternal  方法进行初
始化，首先会 new  JreFilterApiProxy  对象，这个对象相当于JEP 290 有关操作的代理对象，里面封
装了操作 Config  静态类的方法。然后会 new  一个 WeblogicFilterConfig  对象，这个对象在 new  
的时候会把 weblogic 的黑名单赋值到 WeblogicFilterConfig  对象的属性中。之后，会从
WeblogicFilterConfig  对象属性中取 serialFilter  ，调用 JreFilterApiProxy  对象的 
setGlobalFilter  来赋值 Config.serailFilter  。
局部过滤器
设置局部过滤器的意思是在 new  objectInputStream  对象之后，再通过改变单个 
ObjectInputStream  对象的 serialFilter 字段值来实现局部过滤。
改变单个 ObjectInputStream  对象的 serialFilter  字段是有两种方法：
1.通过调用  ObjectInputStream  对象的 setInternalObjectInputFilter  方法：
注：低于 JDK 9  的时候，是 getInternalObjectInputFilter  和 
setInternalObjectInputFilter ， JDK 9  以及以上是  getObjectInputFilter  和 
setObjectInputFIlter  。
2.通过调用 Config.setObjectInputFilter  ：
局部过滤器典型的例子是 RMI 中针对 RegsitryImpl  和 DGCImpl 有关的过滤。
RMI 中采用了局部过滤
RMI 简单介绍
RMI 分为客户端和服务端，官方文档：https://docs.oracle.com/javase/tutorial/rmi/overview.html
下面是对 RMI 官方文档介绍的理解：
另外 RMI 中其实并不一定要 RegistryImpl  ,也就是我们熟称的注册中心，RMI 完全可以脱离注册中心
来运行。可以参考：https://www.jianshu.com/p/2c78554a3f36 。个人觉得之所以使用注册中心是因
为注册中心的 Registry_Stub  以及 Registry_Skel  会为我们自动进行底层的协议数据通信（JRMP 
协议），能让使用者可以不关心底层的协议数据交流，而专注在远程对象的调用上。