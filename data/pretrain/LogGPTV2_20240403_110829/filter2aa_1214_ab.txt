to continue, albeit under control. The content of the replacement file can be anything however 
including something similar to the code snippet in Fig 1 allows for the replacement file to blindly 
mirror the functions in a file it is replacing when it is called from other areas of code. 
So getting in process is easy, from here it is simple to be able to do dynamic runtime analysis, but 
sourcecode is the end goal being strived for. 
Fig 1. Code snippet to blindly mirror a renamed module at runtime 
import renamed_module 
for x in dir(renamed_module): 
    if x[:2] == "__": 
        continue 
    print "%s mirroring %s.%s"%(x, renamed_module.__file__, x) 
    exec("%s = renamed_module.%s"%(x,x)) 
 5.2 Evaluating instantiated objects 
 Now access to the running context of the application is available the objects in memory can be 
evaluated. In Python all method and function objects have a func_code object that contains a 
wealth of data about its operation and implementation. It is this object that the inspectxviii module 
uses when it is providing information about objects. The co_code member of the func_code 
object contains the bytecode of the function; such bytecode could be dumped and decompiled in 
the traditional way (albeit a function at a time).  
To be able to construct the content of an entire module, the various components have to be 
traversed and reconstructed into a whole. There are a couple of different general method to do 
this a ʻmemory relationalʼ approach and a ʻfilesystem relationalʼ approach.  
 The memory relational approach takes an imported module object and inspects its attributes, 
each attribute is then recursively inspected until a leaf node is reached. During this traversal each 
method, function and generator have their code objects interrogated for bytecode with the 
sourcecode hierarchy being based on the memory hierarchy.  
 The filesystem relational approach differs in that the filesystem location of the obfuscated 
application is traversed looking for Python modules, once located they are imported and their 
attributes inspected as with the previous approach. The sourcecode produced is reconstructed in 
hierarchy based on that of the filesystem rather than running application. Fig 2 shows how the 
different object types in Python relate to each other and to a bytecode representation. In general 
the filesystem approach is more use, but only when access to the filesystem is available (see 
section 6). 
Fig 2. Python types and their relations 
method: 
              im_func ->  function: 
                                                  func_code -> code: 
                                                                                  co_code ->   bytecode 
                                                  gi_code     -> code: 
                                 generator: 
This approach works against all of the obfuscation techniques discussed except for the opcode 
remapping approach. How to get access to usable bytecode that has been subject to opcode 
remapping is discussed in the next section.  
 5.3 Opcode remapping circumvention 
When opcode remapping has been used the content of the co_code object is obfuscated in the 
same way as the bytecode on disk. Runtime access to the object has been achieved but this 
does not actually gain very much leverage as the operations to which the bytecode pertains are 
still opaque. To get to the point of being able to decompile such bytecode back to source a 
slightly more complex approach is required. 
As of Python 2.6.4 there are 119 defined opcode values from which all Python applications are 
constructed. In order to be able to successfully decompile the remapped bytecode, the value of 
each remapped Python opcodes needs to be deduced. As runtime access to the modified Python 
has been achieved it can be used to help achieve the task of decoding via use as an oracle. 
An opcode remapped runtime ships with the set of stdlib Python relied on by the application, and 
possibly others. All of these files when compiled from the .py to .pyc also then have the 
obfuscated bytecode in addition to any other obfuscation applied. However the advantage that is 
available here is that they came from an already known source that is freely available. 
This means that if two sets of bytecode can be produced for the same sourcecode, one standard 
and one obfuscated, they can be diffed to yield the value to which each opcode has been 
remapped. Of course it is unlikely that every Python opcode will be contained within a single 
module so the exercise needs to be repeated across multiple modules until all opcodes have 
been seen or there are no more stdlib modules left. 
If opcode remapping has been used by itself the marshalled code objects in the .pyc files on disk 
can be diffed for this purpose, if however other obfuscation has been used such a remarshalling 
or encryption then the streams of bytecode need to be generated from a runtime context. 
It is fairly straightforward to produce two equivalent streams of bytecode for diff analysis, the 
following simplified process must be done twice – once in a stdlib runtime and once in the 
modified runtime: 
1. import a stdlib module 
2. get access to an ordered list of its functions/methods/generators through the dir() 
function 
3. dump the bytecode from the co_code of each function 
4. concatenate the function bytecode in the order of the dir() list 
Even though such streams are not identical to the unmarshalled code object in a .pyc this does 
not matter, all that matters are that the streams represent the bytecode in standard and 
obfuscated form for the same functions. For the sake of clarity such ordered concatenations of a 
modules functions bytecode will be termed .pyb files. 
Once both sets of .pyb files have been generated it is simple to compare them one byte at a time. 
As it is only the values of the opcodes themselves that have been remapped if the bytes 
compared are the same it can be assumed that the byte represents an argument value to an 
opocde. If the compared bytes differ it can be assumed that the values represent the remapping 
of one opcode value to another. Fig 3 illustrates this with a simple example. The obvious caveat is 
that if opcode remapping has been performed across only a subset of the opcodes some will 
have the same values in both the standard and obfuscated opcode sets. In practise this is fairly 
easy to detect and compensate for when the new opcode map is being created looking at the 
bytes which follow the bytes being evaluated.  
Once a new opcode value map has been created a new opcode.py can be created with the new 
values. The obfuscated bytecode in the co_code objects is now able to be 
disassembled/decompiled at will. 
Fig 3. Simple worked example of bytecode streams with remapped opcodes being diffed 
Take for example the following Python expression: 
              print “bugs” 
In standard Python this compiles to the following series of Python Assembly instructions: 
              0 LOAD_CONST               0 ('bugs') 
              3 PRINT_ITEM           
              4 PRINT_NEWLINE        
              5 LOAD_CONST               1 (None) 
              8 RETURN_VALUE 
These instructions in turn are represented by the following byte stream: 
                              0x64, 0x0, 0x0, 0x47, 0x48, 0x64, 0x1, 0x0, 0x53 
The bytecode produced by an opcode remapped modified runtime using the same sourcecode 
input would produce a different byte stream, for example: 
              0x28, 0x0, 0x0, 0x19, 0x2e, 0x28, 0x1, 0x0, 0x12 
Now if both of these byte streams are compared byte by byte, then it is easy to see that the 
opcodes identify themselves as the bytes that are different and the arguments to the opcodes are 
the bytes that are the same: 
              LOAD_CONST      0x64 -> 0x28 
              [ARG]           0x0 
              [ARG]           0x0 
              PRINT_ITEM      0x47 -> 0x19 
              PRINT_NEWLINE   0x48 -> 0x2e 
              LOAD_CONST      0x64 -> 0x28 
              [ARG]           0x1 
              [ARG]           0x0 
              RETURN_VALUE    0x53 -> 0x12 
From this is it easy to see the values to which the 4 different opcodes have been remapped. 
Continuing this process for other byte streams that are known to have been produced from the 
same underlying source means that the opcode map can be built up to a point where a new 
opcode.py can be produced for use by disassemblers and decompilers. 
6. Reversing in ʻThe Cloudʼ 
 Software that is delivered as a service is a trend that has been increasing over the last few 
years, the term ʻcloudʼ has also been increasingly (mis)used to describe many of the systems and 
services providing such software. While a general discussion about this trend and the associated 
hype and spin is beyond the scope of this paper, general points about the impact of this on 
reverse engineer may not be. 
As the separation between user and software continues to increase, it is not inconceivable to 
imagine a time when a user will not have access to the application they are using files. At this 
point of the traditional approaches to reverse engineering fall down and the understanding of the 
inner workings of an application take on the form of a blackbox web assessment. However, being 
able to take an object from running memory and get to a sourcecode representation of it helps to 
shift things back into the domain of the reverse engineer. This is where the memory relational 
reconstruction approach becomes useful, as there is no filesystem structure to relate things to. 
Granted the usefulness of this depends on the role of the application and how the application is 
exposed in ʻa cloudʼ, as well as the amount of access a user has to interact with it. The higher-
level takeaway from this though is that even if an applicationʼs files are not available to a user, it 
may be possible in high interaction services that allow for programmatic interaction through a 
language such as Python that the source will be obtainable. This is an area that is interesting and 
will hopefully be explored more fully in future. For now consider this an interesting side benefit of 
techniques developed to solve a different set of problems. 
7. pyREtic – a proof of concept toolkit 
/paɪˈrɛt ɪk/ - [pahy-ret-ik] 
defn: –adjective 
of, pertaining to, affected by, or producing fever. 
 The principles & techniques that have been described in this paper have been embodied into a 
proof of concept toolset named pyREtic that will be released at Black Hat. The decompilation part 
of the toolset relies on a modified version of the freely available UnPyciii decompiler that is able to 
take unmarshalled bytecode from memory or dumped .pyb files and produce .py sourcecode. It 
also includes a number of bug fixes to the UnPyc project that will be contributed back into the 
project. However the techniques discussed should be just as applicable to any Python decompiler 
which can be modified to expect .pyb style bytecode rather than the marshalled .pyc format.  
Tools to be able to determine the values of remapped opcodes in modified runtimes are also 
included. There are also various extensions to the standard pdb module that make it more use for 
dynamic analysis and reverse engineering when the sourcecode files are not available. This will 
enable people to analyse Python applications that were previously opaque to them in order to 
make assessments about their security. 
The toolkit will be made available from the Immunity Inc websitexix. 
8. Future Directions 
The work discussed will be extended in future to address any new anti-reversing techniques that 
may develop. The toolkit will be developed to both improve the accuracy of decompilation that is 
provided by UnPyc, as well as the intelligence with which the constituent parts of an in memory 
module are reconstructed into a whole in the form of sourcecode. The toolkit will be freely 
available, with members of the community being encouraged to modify it as required to meet their 
needs. 
Up until now only CPython in the 2.x branch has been examined with respect to reverse 
engineering, as this is the currently most popular choice with application developers and where 
the need for such abilities lay. There is no reason however that as and when the need arises the 
concepts discussed should not be extended to the CPython 3.x branch, or indeed another Python 
implementation entirely such as Jythonxx or IronPythonxxi etc. 
A general area of interesting research is also how to evaluate software and reverse it back to 
source when its files are not locally accessible, this is as true for other languages as well as 
Python. Future work will be conducted into the various systems where limited access to Python or 
a subset of it is provided to work with on a remote computing resource. The possibilities regarding 
the reversing and assessment of such environments will be looked at in light of the work 
discussed and the possibilities it raises for the acquisition of sourcecode from an instantiated 
object. 
9. Conclusion 
 A generic set of techniques has been discussed, and a proof of concept embodiment of them 
implemented to bypass the anti-reversing techniques for Python applications that were commonly 
found at the time of writing. The problem of decompilation of bytecode back to sourcecode was 
moved from the traditional static approach where files on disk were analysed, to a dynamic 
approach where the application in its running state was interrogated. This created a situation 
where the application itself had already removed the protections it had put in place, or through 
access to its running context provided a means to defeat those that were remaining. Through the 
use of the proof of concept implementation a user is now able to go from an in-memory object to 
Python sourcecode representation of that object in a relatively easy manner. 
 Not only have the mechanisms in common use for protecting downloadable closed source and 
commercial Python applications from being reverse engineered been reduced, but an important 
first step taken into reversing Python ʻsoftware as a serviceʼ applications delivered even without 
access to their files. 
Code that was once opaque to its users is now open to inspection, evaluation and risk analysis – 
so stop reading, go forth and find the bugs! 
Revision History:  
1.0 - 30 June 2010 – Initial version for BlackHat Vegas 2010 & Defcon 18 
References: 
i	
  http://www.python.org	
ii	
  http://docs.python.org/library/dis.html#bytecodes	
iii	
  http://unpyc.sourceforge.net	
  &	
  http://code.google.com/p/unpyc/	
iv	
  http://users.cs.cf.ac.uk/J.P.Giddy/python/decompiler/decompiler.html	
v	
  http://sourceforge.net/projects/decompyle/	
vi	
  http://www.crazy-­‐compilers.com/decompyle/	
vii	
  http://depython.net/	
viii	
  http://docs.python.org/library/dis.html	
ix	
  http://docs.python.org/library/pdb.html	
x	
  http://www.py2exe.org/	
xi	
  http://svn.pythonmac.org/py2app/py2app/trunk/doc/index.html	
xii	
  http://cx-­‐freeze.sourceforge.net/	
xiii	
  http://docs.python.org/library/marshal.html	
  (Paragraph	
  1)	
xiv	
  http://nedbatchelder.com/blog/200804/the_structure_of_pyc_files.html	
xv	
  http://svn.python.org/view/python/trunk/Python/import.c?view=markup	
xvi	
  http://bitboost.com/#Python_obfuscator	
  &	
  http://pawsense.com/python..obfuscator/	
  (online	
  demo)	
xvii	
  http://code.python.org/hg/trunk/file/a9ad497d1e29/Lib/opcode.py	
xviii	
  http://docs.python.org/library/inspect.html	
xix	
  http://www.immunityinc.com/resources-­‐freesoftware.shtml	
xx	
  http://www.jython.org/	
xxi	
  http://ironpython.net/