User: How to use Nginx reverse proxy to achieve load balancing of HTTP requests?
Assistant: To use Nginx reverse proxy to achieve load balancing of HTTP requests, you can follow the steps below: 1. Install Nginx and configure reverse proxy After Nginx is installed, you need to configure it to configure it as a reverse proxy server. To do this, add the following to your Nginx configuration file: ``` http { upstream backend { server backend1.example.com weight=5; server backend2.example.com; } server { listen 80; server_name example.com; location / { proxy_pass http://backend; } } } ``` Among them, the upstream directive in the http block defines the backend server of the proxy server, including its address and weight. The location directive in the server block forwards all requests to the http://backend address. 2. Test load balancing After completing the configuration of Nginx, you can use tools such as curl to test whether the reverse proxy server is working normally. When testing, you can first use a specified url as the request address. For example, suppose the reverse proxy server is listening on port 80, and there are two backend servers with addresses 192.168.1.1 and 192.168.1.2 respectively, then you can use the following command to test: ``` curl http://example.com ` `` If the reverse proxy server is properly configured, you should get a response from one of the backend servers. 3. Adjust the load balancing strategy After completing the basic configuration of load balancing, you can also adjust the load balancing strategy of Nginx to better meet different needs. For example, you can change the proportion of request forwarding by specifying different weights, or use the ip_hash module to assign requests from the same client to the same backend server, etc. To do this, you can specify different weights in the upstream directive, for example: ``` upstream backend { server backend1.example.com weight=5; server backend2.example.com; } ``` The above configuration will forward the request to backend1 The ratio is 5:1. In addition, you can also implement a more fine-grained load balancing strategy by specifying the hash module or ip_hash module. For example: ``` upstream backend { ip_hash; server backend1.example.com; server backend2.example.com; } ``` The above configuration will assign requests to the corresponding backend server according to the client IP address. In short, using Nginx reverse proxy can easily achieve load balancing of HTTP requests, and it can also be customized and optimized as needed.