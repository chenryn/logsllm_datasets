### Table 2: Success Probabilities per Byte for 3DES, with Various Attack Parameters

| m | 1280 | 1456 | 128 | 256 |
|---|-------|-------|------|------|
| 0.99 | 0.91 | 0.89 | 0.92 | 0.89 |
| 0.01 | 0.03 | 0.07 | 0.08 | 0.09 |
| 0.15 | 1.00 | 0.93 | 0.93 | 0.81 |
| 0.77 | 0.68 | 1.00 | 0.93 | 0.94 |
| 0.81 | 0.77 | 0.68 | 0.13 | 0.18 |
| 0.02 | 0.04 | 0.07 | 0.05 | 0.93 |
| 0.92 | 0.83 | 0.57 | 0.54 | 0.59 |
| 0.93 | 0.92 | 0.83 | 0.57 | 0.54 |
| 0.59 | 0.00 | 0.03 | 0.03 | 0.04 |
| 0.14 | 0.04 | 0.12 | 0.12 | 0.20 |
| 0.17 | 0.10 | 0.08 | 1.00 | 1.00 |
| 1.00 | 1.00 | 1.00 | 0.99 | 0.99 |
| 0.99 | 0.99 | 0.97 | 0.98 | 1.00 |
| 1.00 | 1.00 | 1.00 | 0.99 | 0.99 |
| 0.99 | 0.99 | 0.98 | 0.98 | 0.99 |

### DTLS Implementation and Security Concerns

The DTLS implementation in OpenSSL highlights several security concerns. The lack of truly expert code review in the OpenSSL project is a significant issue, given the widespread use and importance of OpenSSL. This is understandable, however, considering the project's volunteer-led nature. In contrast, GnuTLS's implementation shares common code for both TLS and DTLS packet decryption, ensuring that countermeasures implemented for TLS are also applied to DTLS. Despite this, even GnuTLS was not fully protected against the type of attack described in this paper.

### Possible Explanations for Missing Countermeasures

1. **Lack of Error Messages**: DTLS does not provide explicit error messages, which may have led implementers to believe that previous attacks were not possible against DTLS. We demonstrated otherwise by exploiting DTLS Heartbeat request and response messages to obtain timing information. This approach could be more broadly applicable beyond DTLS.

2. **Specification by Diff**: The DTLS specification heavily relies on cross-references to the TLSv1.1 specification, providing details only where TLS and DTLS differ. Implementers must be familiar with both specifications, which can lead to important details being overlooked. This "specification by diff" approach is not ideal for secure protocols.

3. **Error Tolerance and Unreliable Transport**: DTLS connections are more tolerant of errors and do not tear down connections upon encountering an error, unlike TLS. This tolerance, combined with the use of an unreliable transport protocol, makes DTLS more vulnerable to certain types of attacks. Additionally, the anti-replay feature in DTLS is optional, further complicating security.

### Comparison with Previous TLS Attacks

Our attacks on DTLS are more challenging due to the lack of explicit error messages but are also easier to carry out because of DTLS's error tolerance. This tolerance means that DTLS connections are not torn down when an error is encountered, as they are in TLS. This difference highlights how non-security features of lower-layer protocols can significantly impact security at higher layers, an area that is underexplored in the literature.

### References

[1] P. Calhoun, M. Montemurro, and D. Stanley. Control and Provisioning of Wireless Access Points (CAPWAP) Protocol Specification. RFC 5415, Internet Engineering Task Force, March 2009.
[2] Brice Canvel, Alain P. Hiltgen, Serge Vaudenay, and Martin Vuagnoux. Password Interception in a SSL/TLS Channel. In Dan Boneh, editor, CRYPTO, volume 2729 of Lecture Notes in Computer Science, pages 583–599. Springer, 2003.
[3] Scott A. Crosby, Dan S. Wallach, and Rudolf H. Riedi. Opportunities and Limits of Remote Timing Attacks. ACM Trans. Inf. Syst. Secur., 12(3), 2009.
[4] Jean Paul Degabriele and Kenneth G. Paterson. Attacking the IPsec standards in encryption-only configurations. In IEEE Symposium on Security and Privacy, pages 335–349, 2007.
[5] Jean Paul Degabriele and Kenneth G. Paterson. On the (in)security of IPsec in MAC-then-encrypt configurations. In ACM Conference on Computer and Communications Security, pages 493–504, 2010.
[6] T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.1. RFC 4346, Internet Engineering Task Force, April 2006.
[7] Thai Duong and Juliano Rizzo. Cryptography in the Web: The Case of Cryptographic Design Flaws in ASP.NET. In IEEE Symposium on Security and Privacy. IEEE Computer Society, May 2011.
[8] W. Hardaker. Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP). RFC 5953, Internet Engineering Task Force, August 2010.
[9] S. Kent and R. Atkinson. IP Authentication Header. RFC 2402, Internet Engineering Task Force, November 1998.
[10] Nagendra Modadugu and Eric Rescorla. The Design and Implementation of Datagram TLS. In NDSS. The Internet Society, 2004.
[11] E. Rescorla and N. Modadugu. Datagram Transport Layer Security. RFC 4347, Internet Engineering Task Force, April 2006.
[12] Juliano Rizzo and Thai Duong. Practical Padding Oracle Attacks. In 4th USENIX Workshop on Offensive Technologies (WOOT’10), August 2010.
[13] J. Salowey, T. Petch, R. Gerhards, and H. Feng. Datagram Transport Layer Security (DTLS) Transport Mapping for Syslog. RFC 6012, Internet Engineering Task Force, October 2010.
[14] R. Seggelmann and M. Williams. (TLS) Transport Layer Security and Datagram Transport Layer Security (DTLS) Heartbeat Extension. Internet Engineering Task Force. http://tools.ietf.org/html/draft-ietf-tls-dtls-heartbeat-02. Draft RFC.
[15] Serge Vaudenay. Security Flaws Induced by CBC Padding - Applications to SSL, IPSEC, WTLS... In Lars R. Knudsen, editor, EUROCRYPT, volume 2332 of Lecture Notes in Computer Science, pages 534–546. Springer, 2002.

### Appendix: Timing and Packet Processing

This appendix provides a detailed look at how a receiver processes packets, with the aim of building a simple model of how Round-Trip Times (RTTs) are affected by attack parameters. Figures 9 and 10 show simplified timelines for packets with valid and invalid padding, respectively.

#### Key Time Points
- **ti,0**: Time at which packet i arrives in the OpenSSL buffer.
- **ti,1**: Time at which decryption and padding check are completed for packet i.
- **ti,2**: Time at which the MAC check is completed for packet i.
- **ti,3**: Time at which OpenSSL is ready to process the next DTLS packet, packet i + 1.
- **OSt**: Additional time spent by the operating system, assumed to be constant.

For packets with invalid padding, the MAC verification is not performed, so ti,2 = ti,1.

#### RTT Analysis
- **Ts**: Time at which the adversary sends the first DTLS packet.
- **Tf**: Time at which the Heartbeat response packet is sent by the receiver.
- **Te**: Time at which the Heartbeat response packet is received by the adversary.
- **t1,0 − Ts**: Time it takes for packet 1 to reach the receiver.
- **Te − Tf**: Time it takes for the Heartbeat response packet to reach the adversary after being sent.
- **Te − Ts**: RTT for the packet train.

Figures 11, 12, and 13 illustrate different scenarios for packet trains with valid and invalid padding, including buffering effects. The goal is to select attack parameters such that the receiver's buffer always contains some (but not too many) packets, maximizing the accumulation of MAC processing time across the packet train.

We experimentally verified the model by measuring the difference in RTTs (δ) between trains with valid and invalid padding. Figure 14 shows the results, confirming that adding small artificial delays can increase the time difference δ, making it easier for the adversary to detect.

#### Figures
- **Figure 9**: Packet processing timeline for valid padding.
- **Figure 10**: Packet processing timeline for invalid padding.
- **Figure 11**: Timeline for a train with n = 2.
- **Figure 12**: Timeline for packet train with valid padding and packet buffering.
- **Figure 13**: Timeline for packet train with invalid padding and packet buffering.
- **Figure 14**: Value of δ against artificial delay.