return nil
}
func (t *Arith) Divide(args *Args, quo *Quotient) error {
if args.B == 0 {
return errors.New("divide by zero")
}
quo.Quo = args.A / args.B
quo.Rem = args.A % args.B
return nil
}
func main() {
arith := new(Arith)
rpc.Register(arith)
tcpAddr, err := net.ResolveTCPAddr("tcp", ":1234")
checkError(err)
listener, err := net.ListenTCP("tcp", tcpAddr)
checkError(err)
/* This works:
rpc.Accept(listener)
*/
/* and so does this:
*/
for {
conn, err := listener.Accept()
if err != nil {
continue
}
rpc.ServeConn(conn)
}
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
Note that the call to Accept is blocking, and just handles client
connections. If the server wishes to do other work as well, it should call
this in a goroutine.
留心一点，对于 Accept 的调用是阻塞式的，用来处理客户端连接。如果服务端希望也做
点别的事情，那么就应该在 goroutine 中调用它。
TCP RPC client TCP RPC 客户端
A client that uses the TCP server and calls both functions of the arithmetic
server is
一个使用 TCP 连接，调用在远端计算服务器的两个函数的客户端是这样的。
/**
* TCPArithClient
*/
package main
import (
"net/rpc"
"fmt"
"log"
"os"
)
type Args struct {
A, B int
}
type Quotient struct {
Quo, Rem int
}
func main() {
if len(os.Args) != 2 {
fmt.Println("Usage: ", os.Args[0], "server:port")
os.Exit(1)
}
service := os.Args[1]
client, err := rpc.Dial("tcp", service)
if err != nil {
log.Fatal("dialing:", err)
}
// Synchronous call
args := Args{17, 8}
var reply int
err = client.Call("Arith.Multiply", args, &reply)
if err != nil {
log.Fatal("arith error:", err)
}
fmt.Printf("Arith: %d*%d=%d\n", args.A, args.B, reply)
var quot Quotient
err = client.Call("Arith.Divide", args, ")
if err != nil {
log.Fatal("arith error:", err)
}
fmt.Printf("Arith: %d/%d=%d remainder %d\n", args.A, args.B, quot.Quo,
quot.Rem)
}
Matching values
数据值匹配
We note that the types of the value arguments are not the same on the client
and server. In the server, we have used Values while in the client we
used Args. That doesn't matter, as we are following the rules
of gob serialisation, and the names an types of the two structures' fields
match. Better programming practise would say that the names should be the
same!*
我们注意到在 server 端和 client 端的数据类型并不相同。在服务器端，我们用的是
Values 而在客户端我们用了 Args。这并不成问题，因为我们按照了 gob 串行化规则，而
且在两个结构体字段中的名称能匹配。但更好的编程实践却告诉我们，名字也应该相同。
*
However, this does point out a possible trap in using Go RPC. If we change
the structure in the client to be, say,
然而，这指出了 go 中可能存在的陷阱的可能性。要是我们改变了 client 端的结构体，
比方说，
type Values struct {
C, B int
}
then gob has no problems: on the server-side the unmarshalling will ignore
the value of C given by the client, and use the default zero value for A.
而这对于 gob 来说却没有什么疑问: 在server端解编组的时候会忽略来自client的C,
然后将默认值零值赋给 A.
Using Go RPC will require a rigid enforcement of the stability of field
names and types by the programmer. We note that there is no version control
mechanism to do this, and no mechanism in gob to signal any possible
mismatches.
用 Go RPC 会要求对字段名称和类型的一致性都进行严格加强。我们注意到，没有任何的
版本控制机制或是 gob 本身，都没有任何提示数据不匹配的保护机制。
13.3 JSON
This section adds nothing new to the earlier concepts. It just uses a
different "wire" format for the data, JSON instead of gob. As such, clients
or servers could be written in other language that understand sockets and
JSON.
这部分每增加什么新的概念。只是用了另一种数据的 "电报" 格式，用 JSON 来代替 gob。
由于这样做了，那么 client 端和 server 端要用另一种语言来来理解 socket 和 JSON。
JSON RPC client
JSON RPC 客户端
A client that calls both functions of the arithmetic server is
客户端调用计算服务器的两个函数如下
/* JSONArithCLient
*/
package main
import (
"net/rpc/jsonrpc"
"fmt"
"log"
"os"
)
type Args struct {
A, B int
}
type Quotient struct {
Quo, Rem int
}
func main() {
if len(os.Args) != 2 {
fmt.Println("Usage: ", os.Args[0], "server:port")
log.Fatal(1)
}
service := os.Args[1]
client, err := jsonrpc.Dial("tcp", service)
if err != nil {
log.Fatal("dialing:", err)
}
// Synchronous call
args := Args{17, 8}
var reply int
err = client.Call("Arith.Multiply", args, &reply)
if err != nil {
log.Fatal("arith error:", err)
}
fmt.Printf("Arith: %d*%d=%d\n", args.A, args.B, reply)
var quot Quotient
err = client.Call("Arith.Divide", args, ")
if err != nil {
log.Fatal("arith error:", err)
}
fmt.Printf("Arith: %d/%d=%d remainder %d\n", args.A, args.B, quot.Quo,
quot.Rem)
}
JSON RPC server
JSON RPC 服务器
A version of the server that uses JSON encoding is
JSON 版的服务器代码如下
/* JSONArithServer
*/
package main
import (
"fmt"
"net/rpc"
"net/rpc/jsonrpc"
"os"
"net"
"errors"
)
//import ("fmt"; "rpc"; "os"; "net"; "log"; "http")
type Args struct {
A, B int
}
type Quotient struct {
Quo, Rem int
}
type Arith int
func (t *Arith) Multiply(args *Args, reply *int) error {
*reply = args.A * args.B
return nil
}
func (t *Arith) Divide(args *Args, quo *Quotient) error {
if args.B == 0 {
return errors.New("divide by zero")
}
quo.Quo = args.A / args.B
quo.Rem = args.A % args.B
return nil
}
func main() {
arith := new(Arith)
rpc.Register(arith)
tcpAddr, err := net.ResolveTCPAddr("tcp", ":1234")
checkError(err)
listener, err := net.ListenTCP("tcp", tcpAddr)
checkError(err)
/* This works:
rpc.Accept(listener)
*/
/* and so does this:
*/
for {
conn, err := listener.Accept()
if err != nil {
continue
}
jsonrpc.ServeConn(conn)
}
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
13.4 Conclusion 总结
RPC is a popular means of distributing applications. Several ways of doing
it have been presented here. What is missing from Go is support for the
currently fashionable (but extremely badly enginereed) SOAP RPC mechanism.
RPC 是一个流行的分布应用的方法。这里展示了许多实现它的方法。Go 所不支持的实现
下很火的(却也是实现地很不好的) SOAP RPC 机制。
Copyright Jan Newmarch, PI:EMAIL
版权属于 Jan Newmarch, PI:EMAIL
If you like this book, please contribute using Flattr
or donate using PayPal
如果你喜欢这本书，请用我 Flattr 支持我
或者用 PayPal 捐助我。
Chapter 14 第十四章
Network channels 网络 channels
Warning
警告
The netchan package is being reworked. While it was in earlier versions
of Go, it is not in Go 1. It is available in the old/netchan package if you
still need it. This chapter describes this old version. Do not use it for
new code.
现在 netchan 包正在重新设计。出于对 Go 1 之前版本的兼容性考虑，可以在 old/netchan
下找到它。这一章描述的是旧版本的使用。请不要在新代码中使用它.
14.1 Introduction 简介
There are many models for sharing information between communicating
processes. One of the more elegant is Hoare's concept of channels. In this,
there is no shared memory, so that none of the issues of accessing common
memory arise. Instead, one process will send a message along a channel to
another process. Channels may be synchronous, or asynchronous, buffered
or unbuffered.
关于进程间共享信息有过许多模型。其中较为优美的是 Hoare 提出的 channels 模型。在
这一模型中，不需要共享内存，因此读取共享内存引起的问题都可以避免。取而代之的是
使用 channel 传递消息：一个进程通过一个 channel 向另一个进程发送消息，channels
可以是同步的，也可以是异步的，可以是带缓冲的，也可以是不带缓冲的。
Go has channels as first order data types in the language. The canonical
example of using channels is Erastophene's prime sieve: one goroutine
generates integers from 2 upwards. These are pumped into a series of channels
that act as sieves. Each filter is distinguished by a different prime, and
it removes from its stream each number that is divisible by its prime. So
the '2' goroutine filters out even numbers, while the '3' goroutine filters
out multiples of 3. The first number that comes out of the current set of
filters must be a new prime, and this is used to start a new filter with
a new channel.
Go 内建 channel 作为第一等数据类型。一个使用 channel 的经典例子是 Erastophene
的素数筛选器：使用一个 goroutine 从 2 开始生成整数，将这些数字送入一系列作为过
滤器的 channel，每一个过滤器由一个不同的素数标识，它们把能被自身代表素数整除的
数从流中删除，所以“2”goroutine 过滤掉所有偶数，“3”goroutine 过滤掉所有 3 的倍
数。第一个从这一系列过滤器中走出来的必然是一个新的素数，然后再开启新的 channel，
用新素数生成一个新的过滤器，循环往复。
The efficacy of many thousands of goroutines communicating by many
thousands of channels depends on how well the implementation of these
primitives is done. Go is designed to optimise these, so this type of program
is feasible.
大量goroutine之间通过channel通信的效率取决于原语设计的好坏。Go天生为此优化，
所以这种程序是可行的
Go also supports distributed channels using the netchan package. But
network communications are thousands of times slower than channel
communications on a single computer. Running a sieve on a network over TCP
would be ludicrously slow. Nevertheless, it gives a programming option that
may be useful in many situations.
Go 也通过 netchan 包支持分布式 channel。但是网络间 channel 通信的效率远比单一电
脑上 channel 间通信的效率低。在网络上通过 TCP 协议运行一个筛选器更是慢的可怕。
然而，这还是给程序员多了一个选择，而且这在某些情况下十分有用。
Go's network channel model is somewhat similar in concept to the RPC model:
a server creates channels and registers them with the network channel API.
A client does a lookup for channels on a server. At this point both sides
have a shared channel over which they can communicate. Note that
communication is one-way: if you want to send information both ways, open
two channels one for each direction.
Go 的网络 channel 模型某种意义上和 RPC 模型类似：服务器创建 channel 然后用网络
channel API 注册它们，客户端在服务器上查询 channel。这样服务器和客户端就有了
一个可以相互通信的共享 channel。注意这种通信是单向的，如果你想要双向发送信息，
为每个方向单独创建一个 channel。
14.2 Channel server 服务器端 Channel
In order to make a channel visible to clients, you need to export it. This
is done by creating an exporter using NewExporter with no parameters. The
server then calls ListenAndServe to lsiten and handle responses. This takes
two parameters, the first being the underlying transport mechanism such
as "tcp" and the second being the network listening address (usually just
a port number.
要让一个 channel 对客户端可见，你需要导出它。这可以通过不带参数 NewExporter 创建
一个新的导出，之后服务器调用 ListenAndServe监听、处理请求。ListenAndServe 带有
两个参数，第一个是底层的传输机制，比如“tcp”；第二个是监听地址（通常只是一个端
口号）。
For each channel, the server creates a normal local channel and then
calls Export to bind this to the network channel. At the time of export,
the direction of communication must be specified. Clients search for
channels by name, which is a string. This is specified to the exporter.
对每个 channel，服务器创建一个普通的本地 channel，然后调用 Export 将它绑定到网
络 channel 上。在导出的同时，必须指定通信的方向。客户端可以通过名字（一个字符
串）搜寻 channel。
The server then uses the local channels in the normal way, reading or writing
on them. We illustrate with an "echo" server which reads lines and sends
them back. It needs two channels for this. The channel that the client writes
to we name "echo-out". On the server side this is a read channel. Similarly,
the channel that the client reads from we call "echo-in", which is a write