# 前言
周末分析了两处旧版本中 `phpMyAdmin` 的文件包含漏洞，分享一下。
# 4.8.1 文件包含漏洞
## 漏洞分析
我们先来看看 `payload`：
>
> payload:index.php?target=db_sql.php%253F/../../../../../../../../../../../../a.txt
我们可以看到是 `index.php` 的 `target` 参数，在 `index.php` 的 `55` 行左右，我们可以看到这堆代码：
    $target_blacklist = array (
        'import.php', 'export.php'
    );
    // If we have a valid target, let's load that script instead
    if (! empty($_REQUEST['target'])
        && is_string($_REQUEST['target'])
        && ! preg_match('/^index/', $_REQUEST['target'])
        && ! in_array($_REQUEST['target'], $target_blacklist)
        && Core::checkPageValidity($_REQUEST['target'])
    ) {
        include $_REQUEST['target'];
        exit;
    }
这里就有我们的参数 `target`，有五个条件，我们一个一个分析：
  1. `target` 不能为空
  2. `target` 是字符串类型
  3. `target` 不能以 `index` 开头
  4. `target` 不能是 `$target_blacklist` 里的值
  5. 将 `target` 传入 `Core::checkPageValidity`，返回 `true` 则包含文件
可以发现前四条是很容易过的，我们跟进最后一个函数 `checkPageValidity` 看看，这个函数的代码不长，完整的函数：
    public static $goto_whitelist = array(
            'db_datadict.php',
            'db_sql.php',
            'db_events.php',
            ...
        );
        public static function checkPageValidity(&$page, array $whitelist = [])
        {
            // 判断 $whitelist 是否为空，如果为空则取默认的一组
            if (empty($whitelist)) { // 当从 index.php 传进来时会进入这里
                $whitelist = self::$goto_whitelist;
            }
            if (! isset($page) || !is_string($page)) {
                return false;
            }
            // 判断 $page 是否在白名单
            if (in_array($page, $whitelist)) {
                return true;
            }
            // 分割 $page 的参数，取 ? 前的文件名，判断是否在白名单内
            $_page = mb_substr(
                $page,
                0,
                mb_strpos($page . '?', '?')
            );
            if (in_array($_page, $whitelist)) {
                return true;
            }
            // url 解码后执行和上一步相同的操作
            $_page = urldecode($page);
            $_page = mb_substr(
                $_page,
                0,
                mb_strpos($_page . '?', '?')
            );
            if (in_array($_page, $whitelist)) {
                return true;
            }
            return false;
        }
有三种返回 `true` 的方式，我们可以尝试构造一下 `payload`，
举个例子，比如我们想包含 `a.txt`：
  1. 当我们的 `$page` 是 `a.txt` 时，因为不在白名单内，`page` 中又没有参数（问号），所以会一直执行到最后，默认返回 `false`
  2. 白名单中第一项为 `db_datadict.php`，拿这个举例，我们传入 `db_datadict.php?/../a.txt`，因为还是不在白名单内，会执行到这里：
    fixPmaTables($GLOBALS['db']);
    }
    ...
这里的 `GLOBALS['db']` 其实就是我们 `GET` 传递的。
跟进 `fixPmaTables` 函数。
    public function fixPmaTables($db, $create = true)
    {
        // 数据表的数组
        $tablesToFeatures = array(
            'pma__bookmark' => 'bookmarktable',
            'pma__relation' => 'relation',
            'pma__table_info' => 'table_info',
           ...
        );
        # 根据函数名 getTables 可得知应该是 获取指定数据库的数据表
        $existingTables = $GLOBALS['dbi']->getTables($db, DatabaseInterface::CONNECT_CONTROL);
        foreach ($tablesToFeatures as $table => $feature) {
            if (! in_array($table, $existingTables)) { //判断表是否存在于指定数据库中
                if ($create) { //函数的参数，默认是 true
                    //创建数据表
                    if ($createQueries == null) {
                        $createQueries = $this->getDefaultPmaTableNames();
                        $GLOBALS['dbi']->selectDb($db);
                    }
                    $GLOBALS['dbi']->tryQuery($createQueries[$table]);
                    ...            }
                ...
            }
            else{
                ...
            }
        }
        ...
        $GLOBALS['cfg']['Server']['pmadb'] = $db;
        $_SESSION['relation'][$GLOBALS['server']] = $this->checkRelationsParam();
        ...
    }
上面部分是创建数据表，所以我们访问后才会多出一些数据表出来。
下面我单独列出了两句话，这里是重点，我们跟进 `checkRelationsParam` 函数：