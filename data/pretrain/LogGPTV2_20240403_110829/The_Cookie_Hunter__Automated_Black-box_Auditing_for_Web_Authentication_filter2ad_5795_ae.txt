source as it can facilitate various research projects, especially those
focused on Web security. However, publicly releasing our auto-
mated account creation modules poses a significant risk, as they
are directly applicable to a plethora of real world attacks and could
be misused for malicious purposes; the capabilities of our system
far surpass the capabilities of such tools typically found in under-
ground markets [68]. To that end, and to further contribute to the
community, we have opted to make these modules available to
vetted researchers upon request.
6 RELATED WORK
Cookies and sessions. Several prior studies have explored cer-
tain aspects of authentication and authorization flaws in web apps.
Sivakorn et al. [77] manually audited 25 popular domains (and
their respective mobile apps and browser extensions). Calzavara et
al. [30] recently implemented black-box strategies for identifying
session integrity flaws using a browser extension, and audited 20
popular websites where they found several vulnerabilities under
different threat models. However, the most challenging parts of the
process are not automated and app-agnostic (e.g. account creation,
status oracles), rendering large-scale deployment and analysis infea-
sible. Neither of these studies included the JavaScript-based threats
that we explore. In another work, Calzavara et al. [27] conducted
a large-scale study on TLS vulnerabilities that can enable session
hijacking. Kwon et al. [56] exploited the shortcomings of a specific
TLS cipher suite and proved that, under certain assumptions, it
is possible to disable cookie attributes in HTTPS traffic. Finally,
Jonker et al. [46] proposed a system for automated login that can
enable post-login studies. However, their system does not handle
account creation which is the most challenging process.
While these studies provide useful insights, they are inherently
small-scale, require significant manual effort, or are complimentary
to our work as they focus on different problems that enable session
hijacking (e.g. TLS vulnerabilities). In contrast, our work achieves
orders of magnitude larger coverage of audited domains, analyzes
the root causes of such attacks and further explores the use of
other defense mechanisms, as well as the privacy leakage users face.
Orthogonal to our work are prior studies that proposed defenses
against session hijacking attacks [17, 23, 28, 29, 34, 66, 87].
Cookies and browsers. Singh et al. [75] built a framework for
analyzing the usage of browser features in the wild and detecting
browsers’ access-control flaws, e.g., secure cookies being sent over
HTTP. Franken et al. [43] evaluated how different browsers and anti-
tracking extensions handle third party requests and showed that
cookie-bearing third party requests can be leaked by all browsers,
even in the presence of protection mechanisms like sameSite cookies.
Zheng et al. [94] studied how cookie integrity can be diminished by
various adversaries due to specification violations in browser and
server-side implementations, and demonstrated practical attacks
on popular websites. Cookies are also commonly used for tracking,
and Cahn et al. [25] explored their use through empirical large-
scale measurements and reported the prevalence of third party
cookies. Moreover, Englehardt et al. [41] showed that a passive
eavesdropper can exploit third-party cookies to reconstruct up to
74% of a user’s browsing history. These studies are orthogonal to
Session 6D: Web Security CCS '20, November 9–13, 2020, Virtual Event, USA1963our work since we do not examine browser shortcomings in terms
of leaking cookies that can lead to session hijacking; instead, we
explore the effects of developer malpractices which, however, can
be exacerbated by browsers’ inability to properly handle cookies.
Security headers and policies. Chen et al. [32] examined the
CORS specification, and browser/server-side implementations, and
found security issues in all cases, several previously unknown,
which could even lead to data theft and account hijacking. Kranch
et al. [52], performed the first in-depth study on HSTS and HPKP,
identifying various misconfigurations in preloaded domains as well
as Alexa’s Top 1M. Mendoza et al. [63] examined HTTP header
inconsistencies between websites and their mobile counterparts,
and reported cases of mismatches in set cookie flags. Stock et al. [83]
presented a longitudinal study on the Web’s evolution and, among
other things, measured the adoption of security mechanisms. While
we leverage certain aspects of these studies [52], our goal is not
to evaluate these mechanisms in a generic context; instead, we
evaluate the deployment of the relevant mechanisms and how they
either enable or prevent session hijacking specifically.
SSO and sessions. Several studies have focused on SSO-related
vulnerabilities. Zhou and Evans [96] implemented SSOScan, a tool
that detected vulnerabilities in Facebook’s SSO scheme and found
that of the 1,660 audited websites, 146 leaked credentials and 202
misused them. While SSOScan handles SSO authentication flows,
several issues render it unsuitable for our study; however, we do in-
corporate one of their heuristics in our framework. Mainly, our sys-
tem needs to handle non-SSO websites, which account for the vast
majority of sites we audit (∼92%); this necessitates more advanced
and robust form-handling capabilities to address the more complex
and diverse nature of non-SSO registration. For instance, SSOScan
only uses an input element’s id and name attributes to infer its type,
while we leverage all of its attributes, dedicated label elements,
as well as the input’s preceding text as possible labels. Also, since
SSOScan processes all input elements of a page at once, there is a
chance that it uses an unrelated submit button; we avoid this by
processing each form separately. Finally, if SSOScan is not able to
locate a conventional submit button it will not be able to submit the
form, while our system attempts to do so via Selenium’s submit
method. For SSO workflows, we identified several challenges that
SSOScan was not able to handle. For instance, SSOScan’s oracle
relies on the SSO login button not being displayed after logging in,
which, as aforementioned, is not always the case. We address this
by separating our SSO and SSO Login oracles. In addition, SSOScan
operates only on the homepage for locating candidate elements,
while we employ a crawling approach to obtain better coverage.
Finally, their tool only considers English sites.
Fett et al. [42] proposed and evaluated a formal model of the
OAuth 2.0 protocol. Wang et al. [90] employed differential testing
to identify logic flaws in SSO implementations and found several
popular IdPs and RPs to be vulnerable. Calzavara et al. [26] im-
plemented a lightweight browser-side monitor for web protocols
(e.g., OAuth) that uses formalized protocol specifications to enforce
confidentiality and integrity checks. Yang et al. [93] used symbolic
execution to audit SSO SDK libraries and discovered seven classes
of vulnerabilities in 10 SDKs. Zuo et al. [98] proposed a tool to
identify vulnerable authorization implementations in mobile apps,
which relied on differential traffic analysis for identifying fields of
interest in exchanged messages. They used Facebook’s SSO to audit
∼5K apps (306 were vulnerable). They also explored data leakage
in mobile apps [97] that use a cloud-based back-end, stemming
from key misuse and authorization flaws. However, their leakage
exploration focuses on a very limited set of information and they
manually setup an account on only 30 apps. Ghasemisharif et al. [44]
demonstrated that SSO magnifies the scale and stealthiness of ac-
count hijacking, while rendering remediation impossible in most
cases. While we use SSO as an alternative way for registering test
accounts, identifying flaws in SSO implementations and specifica-
tions is not our objective. Nonetheless, these studies shed light on
a different problem that can lead to session hijacking.
7 CONCLUSIONS
We developed a completely automated auditing framework for web
apps that detects authentication and authorization flaws that re-
volve around the handling of cookies and stem from the incorrect,
incomplete, or non-existent deployment of appropriate security
mechanisms. Our framework is comprised of a series of modules
that include novel mechanisms to differentially analyze web apps,
assess the deployment of security mechanisms, and detect what user
data is exposed. At the heart of our framework lies a custom browser
automation tool designed for robust and fault-tolerant black-box
interaction with web apps. We used our framework to conduct the
largest study on session hijacking to date and audit 25K domains,
leading to a series of alarming findings. Despite the increasing
adoption of HTTPS, HSTS is rarely deployed (correctly or at all),
and ∼11K domains are vulnerable to eavesdropping attacks that
enable partial or full access to users’ accounts. Furthermore, 23% of
domains are susceptible to cookie hijacking through JavaScript, the
majority of which also include third party scripts that execute in
the first party origin. We also demonstrated how hijacked cookies
allow access to sensitive and personal user information though var-
ious avenues of exposure. Our study reveals that cookie hijacking
remains a severe and pressing threat, as adoption of appropriate
security mechanisms remains limited and developers continue to
struggle with correct deployment. In an effort to shed light on the
scale of this threat, guide remediation efforts, and further incen-
tivize the adoption of security mechanisms, we have managed to
directly notify ∼43% of the affected domains and will also deploy a
service for providing reports.
ACKNOWLEDGEMENTS.
We would like to thank the anonymous reviewers, and our shep-
herd Giancarlo Pellegrino, for their valuable feedback. This work
was partially supported by the National Science Foundation un-
der contract CNS-1934597. Any opinions, findings, conclusions,
or recommendations expressed herein are those of the authors,
and do not necessarily reflect those of the US Government. This
work has also received funding from the European Union’s Horizon
2020 research and innovation programme under grant agreement
No 830927 (CONCORDIA) and under grant agreement No 833456
(GUARD).
REFERENCES
[1] 2017. Open Web Application Security Project - The OWASP Top 10. https:
//www.cloudflare.com/learning/security/threats/owasp-top-10/.
Session 6D: Web Security CCS '20, November 9–13, 2020, Virtual Event, USA1964[2] 2018. Dashlane - World Password Day: How to Improve Your Passwords. https:
//blog.dashlane.com/world-password-day/.
[3] 2018.
Four cents to deanonymize: Companies reverse hashed email ad-
dresses. https://freedom-to-tinker.com/2018/04/09/four-cents-to-deanonymize-
companies-reverse-hashed-email-addresses/.
[4] 2018. WIRED - a new Google+ blunder exposed data from 52.5 million users. https:
//www.wired.com/story/google-plus-bug-52-million-users-data-exposed/.
[5] 2018. WIRED - the Facebook hack exposes an Internet-wide failure.
//www.wired.com/story/facebook-hack-single-sign-on-data-exposed/.
[6] 2019. Ars Technica - DHS: Multiple US gov domains hit in serious DNS hijacking
wave. https://arstechnica.com/information-technology/2019/01/multiple-us-
gov-domains-hit-in-serious-dns-hijacking-wave-dhs-warns/.
[7] 2019. Cisco Talos - DNS Hijacking Abuses Trust In Core Internet Service. https:
https:
//blog.talosintelligence.com/2019/04/seaturtle.html.
[8] 2019. Email addresses harvester. https://github.com/maldevel/EmailHarvester.
[9] 2019. Google / Harris Poll - Online Security Survey. https://services.google.com/
fh/files/blogs/google_security_infographic.pdf.
[10] 2020. https://securitytxt.org/.
[11] 2020. ChromeDriver - WebDriver for Chrome.
chromium.org/chromedriver/downloads.
https://sites.google.com/a/
[12] 2020. The Chromium Projects - HTTP Strict Transport Security. https://www.
[13] 2020. Geckodriver. https://github.com/mozilla/geckodriver.
[14] 2020. McAfee - Customer URL Ticketing System. https://trustedsource.org/en/
chromium.org/hsts.
feedback/url.
[15] 2020. MDN Web Docs - Subresource Integrity. https://developer.mozilla.org/en-
US/docs/Web/Security/Subresource_Integrity.
[16] 2020. Puppeteer. https://developers.google.com/web/tools/puppeteer.
[17] Ben Adida. 2008. Sessionlock: Securing Web Sessions Against Eavesdropping. In
Proceedings of the 17th International Conference on World Wide Web.
[18] Pieter Agten, Steven Van Acker, Yoran Brondsema, Phu H Phung, Lieven Desmet,
and Frank Piessens. 2012. JSand: complete client-side sandboxing of third-party
JavaScript without browser modifications. In Proceedings of the 28th Annual
Computer Security Applications Conference. ACM, 1–10.
[19] Furkan Alaca and Paul C Van Oorschot. 2016. Device fingerprinting for augment-
ing web authentication: classification and analysis of methods. In Proceedings of
the 32nd Annual Conference on Computer Security Applications. ACM, 289–301.
[20] Abeer Alhuzali, Rigel Gjomemo, Birhanu Eshete, and VN Venkatakrishnan. 2018.
NAVEX: Precise and Scalable Exploit Generation for Dynamic Web Applications.
In 27th USENIX Security Symposium (USENIX Security ’18). 377–392.
[21] Leyla Bilge, Thorsten Strufe, Davide Balzarotti, and Engin Kirda. 2009. All your
contacts are belong to us: automated identity theft attacks on social networks. In
Proceedings of the 18th international conference on World wide web. ACM, 551–560.
[22] Kevin Bock, Daven Patel, George Hughey, and Dave Levin. 2017. unCaptcha: A
Low-Resource Defeat of reCaptcha’s Audio Challenge. In 11th USENIX Workshop
on Offensive Technologies (WOOT 17).
[23] Michele Bugliesi, Stefano Calzavara, Riccardo Focardi, and Wilayat Khan. 2015.
CookiExt: Patching the browser against session hijacking attacks. Journal of
Computer Security (2015).
[24] Elie Bursztein, Borbala Benko, Daniel Margolis, Tadek Pietraszek, Andy Archer,
Allan Aquino, Andreas Pitsillidis, and Stefan Savage. 2014. Handcrafted fraud
and extortion: Manual account hijacking in the wild. In Proceedings of the 2014
conference on internet measurement conference. ACM, 347–358.
[25] Aaron Cahn, Scott Alfeld, Paul Barford, and S. Muthukrishnan. 2016. An Empirical
Study of Web Cookies. In Proceedings of the 25th International Conference on World
Wide Web (WWW ’16).
[26] Stefano Calzavara, Riccardo Focardi, Matteo Maffei, Clara Schneidewind, Marco
Squarcina, and Mauro Tempesta. 2018. WPSE: Fortifying Web Protocols via
Browser-Side Security Monitoring. In 27th USENIX Security Symposium (USENIX
Security 18). USENIX Association.
[27] Stefano Calzavara, Riccardo Focardi, Matúš Nemec, Alvise Rabitti, and Marco
Squarcina. 2019. Postcards from the Post-HTTP World: Amplification of HTTPS
Vulnerabilities in the Web Ecosystem. In 2019 IEEE Symposium on Security and
Privacy.
[28] Stefano Calzavara, Riccardo Focardi, Marco Squarcina, and Mauro Tempesta.
2017. Surviving the Web: A Journey into Web Session Security. Comput. Surveys
(2017).
[29] Stefano Calzavara, Alvise Rabitti, and Michele Bugliesi. 2018. Sub-session hijack-
ing on the web: Root causes and prevention. In Journal of Computer Security.
[30] Stefano Calzavara, Alvise Rabitti, Alessio Ragazzo, and Michele Bugliesi. 2019.
Testing for Integrity Flaws in Web Sessions. In Computer Security - th European
Symposium on Research in Computer Security, ESORICS 2019.
[31] Bertil Chapuis, Olamide Omolola, Mauro Cherubini, Mathias Humbert, and
Kévin Huguenin. 2020. An Empirical Study of the Use of Integrity Verification
Mechanisms for Web Subresources. In Proceedings of The Web Conference 2020
(WWW ’20). Association for Computing Machinery.
[32] Jianjun Chen, Jian Jiang, Haixin Duan, Tao Wan, Shuo Chen, Vern Paxson, and
Min Yang. 2018. We Still Don’t Have Secure Cross-Domain Requests: an Empirical
Study of CORS. In 27th USENIX Security Symposium (USENIX Security 18). USENIX
Association.
[33] Sandy Clark, Stefan Frei, Matt Blaze, and Jonathan Smith. 2010. Familiarity
breeds contempt: The honeymoon effect and the role of legacy code in zero-day
vulnerabilities. In Proceedings of the 26th annual computer security applications
conference. ACM, 251–260.
[34] Italo Dacosta, Saurabh Chakradeo, Mustaque Ahamad, and Patrick Traynor.
2012. One-time Cookies: Preventing Session Hijacking Attacks with Stateless
Authentication Tokens. ACM Trans. Internet Technol. (2012).
[35] Michael Dalton, Christos Kozyrakis, and Nickolai Zeldovich. 2009. Nemesis:
Preventing Authentication & Access Control Vulnerabilities in Web Applications.
In Proceedings of the 18th Conference on USENIX Security Symposium. USENIX
Association, 267–282.
[36] Joe DeBlasio, Stefan Savage, Geoffrey M Voelker, and Alex C Snoeren. 2017.
Tripwire: inferring internet site compromise. In Proceedings of the 2017 Internet
Measurement Conference. ACM, 341–354.
[37] Levent Demir, Amrit Kumar, Mathieu Cunche, and Cedric Lauradoux. 2017. The
pitfalls of hashing for privacy. IEEE Communications Surveys & Tutorials 20, 1
(2017), 551–565.
[38] Lieven Desmet, Frank Piessens, Wouter Joosen, and Pierre Verbaeten. 2006. Bridg-
ing the gap between web application firewalls and web applications. In Proceed-
ings of the fourth ACM workshop on Formal methods in security. ACM, 67–77.
[39] Adam Doupé, Ludovico Cavedon, Christopher Kruegel, and Giovanni Vigna.
2012. Enemy of the State: A State-Aware Black-Box Web Vulnerability Scan-
ner. In Presented as part of the 21st USENIX Security Symposium (USENIX Secu-
rity 12). USENIX, Bellevue, WA, 523–538. https://www.usenix.org/conference/
usenixsecurity12/technical-sessions/presentation/doupe
[40] Steven Englehardt and Arvind Narayanan. 2016. Online tracking: A 1-million-site
measurement and analysis. In Proceedings of ACM CCS 2016.
[41] Steven Englehardt, Dillon Reisman, Christian Eubank, Peter Zimmerman,
Jonathan Mayer, Arvind Narayanan, and Edward W. Felten. 2015. Cookies That
Give You Away: The Surveillance Implications of Web Tracking. In Proceedings of
the 24th International Conference on World Wide Web. International World Wide
Web Conferences Steering Committee.
[42] Daniel Fett, Ralf Küsters, and Guido Schmitz. 2016. A Comprehensive Formal
Security Analysis of OAuth 2.0. In Proceedings of the 2016 ACM SIGSAC Conference
on Computer and Communications Security.
[43] Gertjan Franken, Tom Van Goethem, and Wouter Joosen. 2018. Who Left Open
the Cookie Jar? A Comprehensive Evaluation of Third-Party Cookie Policies. In
27th USENIX Security Symposium (USENIX Security 18). USENIX Association.
[44] Mohammad Ghasemisharif, Amrutha Ramesh, Stephen Checkoway, Chris Kanich,
and Jason Polakis. 2018. O Single Sign-Off, Where Art Thou? An Empirical
Analysis of Single Sign-On Account Hijacking and Session Management on
the Web. In 27th USENIX Security Symposium (USENIX Security 18). USENIX
Association.
[45] Shashank Gupta and Brij Bhooshan Gupta. 2017. Cross-Site Scripting (XSS)
attacks and defense mechanisms: classification and state-of-the-art. International
Journal of System Assurance Engineering and Management 8, 1 (2017), 512–530.
[46] B. Krumnow H. Jonker, S. Karsch and M. Sleegers. 2020. Shepherd: A Generic
Approach to Automating Website Login. In Proceedings of the 2020 Workshop on
Measurements, Attacks, and Defenses for the Web.
[47] Boyuan He, Vaibhav Rastogi, Yinzhi Cao, Yan Chen, VN Venkatakrishnan, Run-
qing Yang, and Zhenrui Zhang. 2015. Vetting SSL usage in applications with
SSLint. In 2015 IEEE Symposium on Security and Privacy. IEEE, 519–534.
[48] Markus Huber, Martin Mulazzani, Edgar Weippl, Gerhard Kitzler, and Sigrun
Goluch. 2010. Exploiting social networking sites for spam. In Proceedings of the
17th ACM conference on Computer and communications security. ACM, 693–695.
[49] Muhammad Ikram, Rahat Masood, Gareth Tyson, Mohamed Ali Kaafar, Noha
Loizon, and Roya Ensafi. 2019. The chain of implicit trust: An analysis of the
web third-party resources loading. In The World Wide Web Conference. ACM,
2851–2857.
[50] Hugo Jonker, Benjamin Krumnow, and Gabry Vlot. 2019. Fingerprint Surface-