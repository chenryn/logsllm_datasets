-   `kpatch(1)`{.literal} 手册页
-   [*[[配置基本系统设置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#managing-services-with-systemd_configuring-basic-system-settings){.link}]{.citetitle}*]{.emphasis}
    Red Hat Enterprise Linux
:::
:::
:::
[]{#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel}第 18 章 为应用程序设置限制 {.title}
:::
您可以使用 [*控制组*]{.emphasis} (`cgroup`{.literal})
内核功能来设置限值、排列优先级或隔离进程的硬件资源。这样，您可以精细地控制应用的资源使用，从而更有效地使用它们。
::: section
::: titlepage
# []{#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#understanding-control-groups_setting-limits-for-applications}了解控制组群 {.title}
:::
[*控制组*]{.emphasis} 是一种 Linux
内核功能，可让您将进程分级组织为分层组 -
`cgroups`{.literal}。层次结构（控制组树）通过为 `cgroup`{.literal}
虚拟文件系统提供结构来定义，该结构默认挂载到 `/sys/fs/cgroup/`{.literal}
目录。它通过在 `/sys/fs/cgroup/ 中`{.literal}
创建和删除子目录手动完成。或者，使用 `systemd`{.literal}
系统和服务管理器。
资源控制器（内核组件）随后通过限制、排列或分配系统资源（如 CPU
时间、内存、网络带宽或各种组合）来修改 `cgroup`{.literal} 中进程的行为。
`cgroups`{.literal}
的增值值是流程聚合，允许在应用程序和用户之间划分硬件资源。因此可以提高总体的效率、稳定性以及用户环境的安全。
::: variablelist
[控制组群版本 1]{.term}
:   [*控制组版本 1*]{.emphasis} (`cgroups-v1`{.literal})
    提供按资源控制器层次结构。这意味着，每个资源（如 CPU、内存、I/O
    等）都有自己的控制组层次结构。可以组合不同的控制组层次结构，从而使一个控制器可以在管理各自资源时相互协调。但是，这两个控制器可能属于不同的进程层次结构，不允许它们进行适当的协调。
    `cgroups-v1`{.literal}
    控制器在很长的时间跨度开发，因此其控制文件的行为和命名不一致。
[控制组群版本 2]{.term}
:   源自层次结构灵活性的控制器协调问题导致了[*控制组版本 2*]{.emphasis}
    的开发。
    [*控制组版本 2*]{.emphasis}
    (`cgroups-v2`{.literal})提供单一控制组层次结构，用于挂载所有资源控制器。
    控制文件行为和命名在不同控制器之间保持一致。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    RHEL 8 将 `cgroups-v2`{.literal}
    作为技术预览提供，包含有限数量的资源控制器。有关相关资源控制器的更多信息，请参阅
    [*[[cgroups-v2
    发行注记。](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/8.1_release_notes/index#technology-preview_kernel){.link}]{.citetitle}*]{.emphasis}
    :::
:::
这个子部分基于 Devconf.cz 2019
演示。[^\[1\]^](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#ftn.idm139694374005216){#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#idm139694374005216
.footnote}
::: itemizedlist
**其它资源**
-   [内核资源控制器](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#what-kernel-resource-controllers-are_setting-limits-for-applications "内核资源控制器"){.link}
-   `cgroups(7)`{.literal} 手册页
-   [控制组群中的 systemd
    角色](#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html#role-of-systemd-in-control-groups-version-1_using-control-groups-version-1-with-systemd "控制组群版本 1 中的 systemd 角色"){.link}
:::
:::
::: section
::: titlepage
# []{#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#what-kernel-resource-controllers-are_setting-limits-for-applications}内核资源控制器 {.title}
:::
控制组群的功能由内核资源控制器启用。RHEL 8 支持 [*控制组群版本
1*]{.emphasis} (`cgroups-v1`{.literal} )和 [*控制组版本 2*]{.emphasis}
(`cgroups-v2`{.literal}) 的各种控制器。
资源控制器也称为控制组子系统，是一个代表单一资源的内核子系统，如 CPU
时间、内存、网络带宽或磁盘 I/O。Linux 内核提供由 `systemd`{.literal}
系统和服务管理器自动挂载的一系列资源控制器。在 `/proc/cgroups`{.literal}
文件中查找当前挂载的资源控制器的列表。
`cgroups-v1`{.literal} 有以下控制器可用：
::: itemizedlist
-   `blkio`{.literal} - 可以设置块设备对输入/输出访问的限制。
-   `CPU`{.literal} - 调整完全公平调度程序 (CFS)
    调度程序的参数，以用于控制组的任务。它与 `cpuacct`{.literal}
    控制器一起挂载在同一挂载上。
-   `cpuacct`{.literal} - 创建控制组中任务使用的 CPU 资源自动报告。它与
    `cpu`{.literal} 控制器一起挂载在同一挂载上。
-   `cpuset`{.literal} - 可用于将控制组任务限制为仅在指定 CPU
    子集上运行，并指示任务仅在指定内存节点上使用内存。
-   `devices`{.literal} - 可以为控制组中的任务控制对设备的访问。
-   `freezer`{.literal} - 可用于暂停或恢复控制组中的任务。
-   `memory`{.literal} -
    可用于设置控制组中任务的内存使用限值，并对这些任务使用的内存资源生成自动报告。
-   `net_cls`{.literal} - 使用类标识符 (`classid`{.literal})
    标记网络数据包，使 Linux 流量控制器（ `tc`{.literal}
    命令）能够识别源自特定控制组任务的数据包。`net_cls`{.literal} 子系统
    `net_filter`{.literal} (iptables)
    也可使用此标签对此类数据包执行操作。`net_filter`{.literal}
    使用防火墙标识符 (`fwid`{.literal}) 标记网络套接字，允许 Linux
    防火墙（通过 `iptables`{.literal}
    命令）识别源自特定控制组任务的数据包。
-   `net_prio`{.literal} - 设置网络流量的优先级.
-   `pids`{.literal} - 可以为控制组中的多个进程及其子进程设置限值.
-   `perf_event`{.literal} - 可以通过 `perf`{.literal}
    性能监控和报告实用程序对任务进行分组，以进行监控。
-   `rdma`{.literal} - 可以在控制组中设置远程直接内存访问/InfiniBand
    特定资源的限值。
-   `hugetlb`{.literal} -
    可用于根据控制组群中的任务限制大量虚拟内存页面的使用。
:::
以下控制器可用于 `cgroups-v2`{.literal}：
::: itemizedlist
-   `io`{.literal} - `cgroups-v1`{.literal} 的`blkio`{.literal} 的后续。
-   `memory`{.literal} - `cgroups-v1`{.literal} 的 `memory`{.literal}
    的后续.
-   `pids`{.literal} - 与 `cgroups-v1`{.literal} 中的 `pids`{.literal}
    相同。
-   `rdma`{.literal} - `cgroups-v1`{.literal} `中的`{.literal} 相同.
-   `cpu`{.literal} - `cgroups-v1`{.literal} 的 `cpu`{.literal} 和
    `cpuacct`{.literal} 的后续。
-   `cpuset`{.literal} - 仅支持带有新分区功能的核心功能
    (`cpus{,.effective}`{.literal},
    `mems{,.effective}`{.literal})，带有一个新的分区特性。
-   `perf_event`{.literal} - 支持是继承的，没有显式控制文件。您可以将
    `v2 cgroup`{.literal} 指定为 `perf`{.literal} 命令的参数，以分析该
    `cgroup`{.literal} 中的所有任务。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
资源控制器可以在 `cgroups-v1`{.literal} 层次结构或
`cgroups-v2`{.literal} 层次结构中使用，不能同时在两者中使用。
:::
::: itemizedlist
**其它资源**
-   `cgroups(7)`{.literal} 手册页
-   `/usr/share/doc/kernel-doc-/Documentation/cgroups-v1/`{.literal}
    目录中的文档
:::
:::
::: section
::: titlepage
# []{#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#what-namespaces-are_setting-limits-for-applications}命名空间是什么 {.title}
:::
命名空间是整理和识别软件对象的最重要的方法之一。
命名空间将全局系统资源（如挂载点、网络设备或主机名）嵌套在抽象中，从而使它出现在命名空间内具有自己隔离的全局资源实例中的进程。使用命名空间的最常用的技术是容器。
对特定全局资源的更改仅对该命名空间中的进程可见，不影响系统或其他命名空间的其余部分。
要检查进程所属的命名空间，您可以在 `/proc//ns/`{.literal}
目录中检查符号链接。
下表显示了它们隔离支持的命名空间和资源：
::: informaltable
  命名空间                        Isolates
  ------------------------------- ----------------------------
  [**Mount**]{.strong}            挂载点
  [**UTS**]{.strong}              主机名和 NIS 域名
  [**IPC**]{.strong}              系统 V IPC, POSIX 消息队列
  [**PID**]{.strong}              进程 ID
  [**Network**]{.strong}          网络设备、堆栈、端口等
  [**User**]{.strong}             用户和组群 ID
  [**Control groups**]{.strong}   控制组群根目录
:::
::: itemizedlist
**其它资源**
-   `namespaces(7)`{.literal} 和 `cgroup_namespaces(7)`{.literal} 手册页
-   [了解控制组群](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#understanding-control-groups_setting-limits-for-applications "了解控制组群"){.link}
:::
:::
::: section
::: titlepage
# []{#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#setting-cpu-limits-to-applications-using-cgroups-v1_setting-limits-for-applications}使用 cgroups-v1 为应用程序设置 CPU 限制 {.title}
:::
有时应用会占用大量 CPU
时间，这可能会对环境的整体健康状况造成负面影响。使用
`/sys/fs/`{.literal} 虚拟文件系统，利用 [*控制组版本 1*]{.emphasis}
(`cgroups-v1`{.literal}) 为应用配置 CPU 限制。
::: itemizedlist
**先决条件**
-   您要限制其 CPU 使用情况的应用程序。
-   验证 `cgroups-v1`{.literal} 控制器是否已挂载：
    ``` literallayout
    # mount -l | grep cgroup
    tmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,seclabel,mode=755)
    cgroup on /sys/fs/cgroup/systemd type cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,xattr,release_agent=/usr/lib/systemd/systemd-cgroups-agent,name=systemd)
    cgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,cpu,cpuacct)
    cgroup on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,perf_event)
    cgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,pids)
    ...
    ```
:::
::: orderedlist
**流程**
1.  在 CPU 消耗中识别您要限制的应用程序的进程 ID (PID)：
    ``` literallayout
    # top
    top - 11:34:09 up 11 min,  1 user,  load average: 0.51, 0.27, 0.22
    Tasks: 267 total,   3 running, 264 sleeping,   0 stopped,   0 zombie
    %Cpu(s): 49.0 us,  3.3 sy,  0.0 ni, 47.5 id,  0.0 wa,  0.2 hi,  0.0 si,  0.0 st
    MiB Mem :   1826.8 total,    303.4 free,   1046.8 used,    476.5 buff/cache
    MiB Swap:   1536.0 total,   1396.0 free,    140.0 used.    616.4 avail Mem
      PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
     6955 root      20   0  228440   1752   1472 R  99.3   0.1   0:32.71 sha1sum
     5760 jdoe      20   0 3603868 205188  64196 S   3.7  11.0   0:17.19 gnome-shell
     6448 jdoe      20   0  743648  30640  19488 S   0.7   1.6   0:02.73 gnome-terminal-
        1 root      20   0  245300   6568   4116 S   0.3   0.4   0:01.87 systemd
      505 root      20   0       0      0      0 I   0.3   0.0   0:00.75 kworker/u4:4-events_unbound
    ...
    ```
    `top`{.literal} 程序的输出示例显示 `PID 6955`{.literal} （应用
    `sha1sum`{.literal}）消耗了大量 CPU 资源。
2.  在 `cpu`{.literal} 资源控制器目录中创建子目录：
    ``` literallayout
    # mkdir /sys/fs/cgroup/cpu/Example/
    ```
    上面的目录代表控制组，您可以在其中放置特定进程并将某些 CPU
    限制应用到进程。同时，目录中将创建一些 `cgroups-v1`{.literal}
    接口文件和 `cpu`{.literal} 控制器特定的文件。
3.  （可选）检查新创建的控制组群：
    ``` literallayout
    # ll /sys/fs/cgroup/cpu/Example/
    -rw-r—​r--. 1 root root 0 Mar 11 11:42 cgroup.clone_children
    -rw-r—​r--. 1 root root 0 Mar 11 11:42 cgroup.procs
    -r—​r—​r--. 1 root root 0 Mar 11 11:42 cpuacct.stat
    -rw-r—​r--. 1 root root 0 Mar 11 11:42 cpuacct.usage
    -r—​r—​r--. 1 root root 0 Mar 11 11:42 cpuacct.usage_all
    -r—​r—​r--. 1 root root 0 Mar 11 11:42 cpuacct.usage_percpu
    -r—​r—​r--. 1 root root 0 Mar 11 11:42 cpuacct.usage_percpu_sys
    -r—​r—​r--. 1 root root 0 Mar 11 11:42 cpuacct.usage_percpu_user
    -r—​r—​r--. 1 root root 0 Mar 11 11:42 cpuacct.usage_sys
    -r—​r—​r--. 1 root root 0 Mar 11 11:42 cpuacct.usage_user
    -rw-r—​r--. 1 root root 0 Mar 11 11:42 cpu.cfs_period_us
    -rw-r—​r--. 1 root root 0 Mar 11 11:42 cpu.cfs_quota_us
    -rw-r—​r--. 1 root root 0 Mar 11 11:42 cpu.rt_period_us
    -rw-r—​r--. 1 root root 0 Mar 11 11:42 cpu.rt_runtime_us
    -rw-r—​r--. 1 root root 0 Mar 11 11:42 cpu.shares
    -r—​r—​r--. 1 root root 0 Mar 11 11:42 cpu.stat
    -rw-r—​r--. 1 root root 0 Mar 11 11:42 notify_on_release
    -rw-r—​r--. 1 root root 0 Mar 11 11:42 tasks
    ```
    示例输出中显示的文件，如
    `cpuacct.usage`{.literal}、`cpu.cfs._period_us`{.literal}，它们代表特定配置和/或限制，可以为
    `Example`{.literal}
    控制组中的进程设置。请注意，对应的文件名前缀为它们所属的控制组控制器的名称。
    默认情况下，新创建的控制组继承对系统整个 CPU
    资源的访问权限，且无限制。
4.  为控制组群配置 CPU 限制：
    ``` literallayout
    # echo "1000000" > /sys/fs/cgroup/cpu/Example/cpu.cfs_period_us
    # echo "200000" > /sys/fs/cgroup/cpu/Example/cpu.cfs_quota_us
    ```
    `cpu.cfs_period_us`{.literal}
    文件表示以微秒为单位（这里表示为\"us\"）的时段，用于控制组对 CPU
    资源的访问权限应重新分配的频率。上限为 1 秒，下限为 1000 微秒。
    `cpu.cfs_quota_us`{.literal}
    文件表示以微秒为单位的总时间量，控制组中的所有进程都可以在一个期间（如
    `cpu.cfs_period_us`{.literal}
    定义）。当控制组中的进程在单个期间内使用配额指定的所有时间时，就会在句点的其余部分内进行限流，并且不允许在下一个期间内运行。下限为
    1000 微秒。
    上面的示例命令设定 CPU 时间限值，使得 `Example`{.literal}
    控制组中的所有进程仅能每 1 秒（ `cpu.cfs_quota_us`{.literal}
    定义）每 1 秒（由 `cpu.cfs_period_us`{.literal} 定义）运行 0.2 秒。
5.  另外，还可验证限制：
    ``` literallayout
    # cat /sys/fs/cgroup/cpu/Example/cpu.cfs_period_us /sys/fs/cgroup/cpu/Example/cpu.cfs_quota_us
    1000000
    200000
    ```