    _WriteStatusReg(APDBKeyLo_EL1, 0xFEEDFACEFEEDFAD0);     // 3, 0, 2, 2, 2
    _WriteStatusReg(APDBKeyHi_EL1, 0xFEEDFACEFEEDFAD0);     // 3, 0, 2, 2, 3
    _WriteStatusReg(S3_4_C15_C1_0, 0xFEEDFACEFEEDFAD1);     // ????
    _WriteStatusReg(S3_4_C15_C1_1, 0xFEEDFACEFEEDFAD1);     // ????
    _WriteStatusReg(APIAKeyLo_EL1, 0xFEEDFACEFEEDFAD2);     // 3, 0, 2, 1, 0
    _WriteStatusReg(APIAKeyHi_EL1, 0xFEEDFACEFEEDFAD2);     // 3, 0, 2, 1, 1
    _WriteStatusReg(APDAKeyLo_EL1, 0xFEEDFACEFEEDFAD3);     // 3, 0, 2, 2, 0
    _WriteStatusReg(APDAKeyHi_EL1, 0xFEEDFACEFEEDFAD3);     // 3, 0, 2, 2, 1
    _WriteStatusReg(APGAKeyLo_EL1, 0xFEEDFACEFEEDFAD4);     // 3, 0, 2, 3, 0
    _WriteStatusReg(APGAKeyHi_EL1, 0xFEEDFACEFEEDFAD4);     // 3, 0, 2, 3, 1
    _WriteStatusReg(SCTLR_EL1, 0xFC54793D);                 // 3, 0, 1, 0, 0
    __isb(0xF);
    _WriteStatusReg(CPACR_EL1, 0x300000);                   // 3, 0, 1, 0, 2
    _WriteStatusReg(TPIDR_EL1, 0);                          // 3, 0, 13, 0, 4
很有意思的是，看起来像是 common_start 在每次内核启动时都会给 PAC 的密钥赋一个固定值。
考虑到这可能是因为反编译的关系，我检查了反编译的过程:
    common_start+A8
       LDR        X0, =0xFEEDFACEFEEDFACF ;; x0 = pac_key
       MSR        #0, c2, c1, #2, X0      ;; APIBKeyLo_EL1
       MSR        #0, c2, c1, #3, X0      ;; APIBKeyHi_EL1
       ADD        X0, X0, #1
       MSR        #0, c2, c2, #2, X0      ;; APDBKeyLo_EL1
       MSR        #0, c2, c2, #3, X0      ;; APDBKeyHi_EL1
       ADD        X0, X0, #1
       MSR        #4, c15, c1, #0, X0     ;; ????
       MSR        #4, c15, c1, #1, X0     ;; ????
       ADD        X0, X0, #1
       MSR        #0, c2, c1, #0, X0      ;; APIAKeyLo_EL1
       MSR        #0, c2, c1, #1, X0      ;; APIAKeyHi_EL1
       ADD        X0, X0, #1
       MSR        #0, c2, c2, #0, X0      ;; APDAKeyLo_EL1
       MSR        #0, c2, c2, #1, X0      ;; APDAKeyHi_EL1
    ...
    pac_key
       DCQ 0xFEEDFACEFEEDFACF      ; DATA XREF: common_start+A8↑r
还真的不是因为反编译，common_start 的确是每次初始化 PAC
密钥时都会给一个固定值。这很令人吃惊，我不相信苹果不知道，使用固定值给密钥赋值会导致所有的 PAC 安全机制的失效。所以我想 PAC
密钥肯定还会在其他地方被初始化为它们真正的运行时值。
但是在多次搜索之后，这似乎是 kernelcache 中唯一设置 A 密钥和通用密钥的位置。尽管如此，B 密钥似乎在其他地方有过重新的赋值:
    machine_load_context+A8
       LDR        X1, [X0,#0x458]
       ...
       MSR        #0, c2, c1, #2, X1      ;; APIBKeyLo_EL1
       MSR        #0, c2, c1, #3, X1      ;; APIBKeyHi_EL1
       ADD        X1, X1, #1
       MSR        #0, c2, c2, #2, X1      ;; APDBKeyLo_EL1
       MSR        #0, c2, c2, #3, X1      ;; APDBKeyHi_EL1
    Call_continuation+10
       LDR        X5, [X4,#0x458]
       ...
       MSR        #0, c2, c1, #2, X5      ;; APIBKeyLo_EL1
       MSR        #0, c2, c1, #3, X5      ;; APIBKeyHi_EL1
       ADD        X5, X5, #1
       MSR        #0, c2, c2, #2, X5      ;; APDBKeyLo_EL1
       MSR        #0, c2, c2, #3, X5      ;; APDBKeyHi_EL1
    Switch_context+11C
       LDR        X3, [X2,#0x458]
       ...
       MSR        #0, c2, c1, #2, X3      ;; APIBKeyLo_EL1
       MSR        #0, c2, c1, #3, X3      ;; APIBKeyHi_EL1
       ADD        X3, X3, #1
       MSR        #0, c2, c2, #2, X3      ;; APDBKeyLo_EL1
       MSR        #0, c2, c2, #3, X3      ;; APDBKeyLo_EL1
    Idle_load_context+88
       LDR        X1, [X0,#0x458]
       ...
       MSR        #0, c2, c1, #2, X1      ;; APIBKeyLo_EL1
       MSR        #0, c2, c1, #3, X1      ;; APIBKeyHi_EL1
       ADD        X1, X1, #1
       MSR        #0, c2, c2, #2, X1      ;; APDBKeyLo_EL1
       MSR        #0, c2, c2, #3, X1      ;; APDBKeyHi_EL1
除了开始的赋值，上面这是内核中唯一一处对 PAC 密钥赋值的地方了。并且他们都是用了相同的模式：在偏移量为 0x458 处向某个数据结构中载入 64
比特。然后将APIBKey设置为与自身串接的值，并将APDBKey设置为APIBKey加上1
此外，所有这些位置的代码都时用来处理线程之间的上下文切换; 显然，没有任何迹象表明，PAC
密钥在异常级别切换时被更改，同样在内核进入(syscall)或内核进出(ERET*)时也没有被更改。
这很有可能表示，PAC的密钥实际上是在用户态和内核态之间共享的！！！
如果我的理解是正确的，这似乎表明了三件非常可怕的事情：
首先，与所有密码学规则相反，内核似乎对A密钥和通用密钥使用了固定值。
其次，由于128位密钥的前半部分和后半部分是相同的，因此密钥实际上是64位的。
第三，PAC密钥似乎在用户空间和内核之间共享，这意味着用户空间可以伪造内核PAC签名。
然而，苹果的的安全机制真的会那么糟糕吗?还是有什么我们不知道的问题?
###  研究运行过程中的行为
为了进一步研究，我们做了一个小小的实验：我读取了的一个函数指针的值，这个指针是被 PACIZA 签名过的，位于 **DATA_CONST.** const
段中，记录每次 kASLR slide 的值。由于内核 slide
的可能值是非常少的，用不了多久，我就会在内存同一个位置得到两次不同的内核引导。这意味着指针的原始非pac值两次都是相同的。然后，如果A密钥确实是常量，那么PACIZA
签名后的指针的值在两个引导中应该是相同的，因为签名算法是确定性的，而且被签名的指针和上下文值在两次引导中都是相同的。
作为一个目标，我选择去读取 sysclk_ops.c_gettime， sysclk_ops.c_gettime 是一个指向
rtclock_gettime() 的指针。下面是30次实验的结果，有 slide 相同的两次实验已经内标注出来了。
我们可以看到，尽管我们认为A密钥是相同的，但是在不同的引导中生成相同指针的PACIZA 是不同的。
我认为最有可能的是 iBoot 或者内核会在引导时用一个随机值覆盖 pac_key 的值。所以 PAC 的值在每次启动时确实是不一样的。即使 pac_key
保存在 **TEXT_EXEC.** text 中，通过 KTRR 保护它不被改写，但是仍然可以在 KTRR 锁定前对其进行修改。然而，在运行过程中读取
pac_key， 它的值仍然是 0xfeedfacefeedfacf，因此一定还有什么机制在影响 pac_key。
接下来，我又做了一个实验，以确定 PAC 密钥是否真的像代码里写的那样在用户空间和内核之间共享。我在用户空间中对 rtclock_gettime()
函数的指针执行 PACIZA 操作，然后与 PACIZA 签名后的的 sysclk_ops.c_gettime
指针进行比较。然而，这两个值时不同的，尽管我们预想它应该是相同，因此 A12 似乎又使用了什么黑科技。
到现在位置，我仍然不太相信 pac_key 的值在运行时没有被修改，我尝试枚举系统上所有线程的 B 密钥，看看它们是否是代码中写的
0xfeedfacefeedfacf。通过查看[osfmk/arm64/cswitch.s](https://opensource.apple.com/source/xnu/xnu-4903.221.2/osfmk/arm64/cswitch.s.auto.html)中
Switch_context 的代码。我明白了用作计算 B 密钥的种子是从 struct thread 的偏移 0x458 装载的，这个位置在 XNU
中是没有被公开的，所以我决定命名它为 pac_key_seed。因此，我准备便利所有线程并且读取所有线程的 pac_key_seed。
实验完成后，我发现所有内核线程实际上都在使用0xfeedfacefeedfacf作为PAC密钥的种子，而用户空间的线程使用的是另一个随机的种子:
    pid   0  thread ffffffe00092c000  pac_seed feedfacefeedfacf
    pid   0  thread ffffffe00092c550  pac_seed feedfacefeedfacf
    pid   0  thread ffffffe00092caa0  pac_seed feedfacefeedfacf
    ...
    pid 258  thread ffffffe003597520  pac_seed 51c6b449d9c6e7a3
    pid 258  thread ffffffe003764aa0  pac_seed 51c6b449d9c6e7a3
因此，似乎内核线程的 PAC 密钥在每次引导时都被初始化为相同的，但是签名后的指针在不同的引导下是不同的。这又是为什么呢？
###  尝试绕过
接下来，我将我关注的重点之前在“面对内核层攻击者的设计缺陷”一节中提到的三个设计缺陷上。
由于在不同的引导下，使用相同的 PACIZA 指令，对于相同的指针，使用相同的 PAC
密钥，生成的结果是不同的，因此在每次引导后一定会产生一个随机的值。这基本上意味着 “在用户空间中实现QARMA-64算法并手动计算PAC”
这种方法的无效，但我还是决定尝试一下。不出所料，这没有奏效。
接下来，我向看看是否可以将自己线程的PAC密钥设置为内核PAC密钥，并在用户空间中伪造内核指针。理想情况下，这意味着我将把我的 IA 密钥设置为内核的 IA
密钥，即0xfeedfacefeedfad2。然而，正如前面所讨论的，内核中似乎只有一个地方(common_start)对A密钥赋值，但是用户空间和内核的PAC是不同的。因此，我决定将这种方法与
PAC 密钥交叉对称的缺点结合起来，将线程的 IB 密钥设置为内核的IA密钥，这应该允许我通过在用户空间中执行 PACIZB 来伪造内核 PACIZA
指针签名。
不幸的是，这种简单的方法(通过覆盖当前线程中的pac_key_seed字段)可能会导致系统异常崩溃，因为在线程的生命周期中更改 PAC 密钥会破坏线程现有的
PAC 签名。PAC 签名的检查是覆盖整个县城周期的。这意味着，想要更改线程的 PAC
密钥而不会使其崩溃，只能确保在更改密钥时线程不会调用函数或从任何函数返回。
最简单的方法是生成一个线程，该线程在用户空间中无限循环执行 PACIZB 并将结果存储到一个全局变量中。然后我们可以覆盖线程的 pac_key_seed
强制线程离开内核; 一旦离开内核的线程被重新调度，它的 B 密钥将通过 Switch_context 设置，然后开始伪造 PAC。
然而，实验结果再次失败:
    gettime       = fffffff0161f2050
    kPACIZA       = faef2270161f2050
    uPACIZA       = 138a8670161f2050
    uPACIZB forge = d7fd0ff0161f2050
为了了解的更深入一点，我设计了一个专门针对密钥交叉的伪造 PAC 的测试。我将的线程的 IB 密钥设置为 DB 密钥，并检查 PACIZB 和 PACDZB
的输出是否相似，如果相似，就代表生成了相同的 PAC。因为 IB 和 DB
密钥是由相同的种子生成的，不能单独设置，所以这实际上涉及两个试验:第一个试验使用种子值0x11223344，第二个试验使用种子值0x11223345:
    IB = 0x11223344  uPACIZB = 0028180100000000
    DB = 0x11223345  uPACDZB = 00679e0100000000
    IB = 0x11223345  uPACIZB = 003ea80100000000
    DB = 0x11223346  uPACDZB = 0023c58100000000
中间两行显示了使用相同密钥从用户空间对相同值执行 PACDZB 和 PACIZB 的结果。根据指针验证的标准 ARMv8.3 中，我们认为两个 PAC
应该是一样的。然而，这两个 PAC 似乎完全不同，这表明A12确实已经做了防御。
###  理论上的实现方案
由于最初考虑的三个弱点明显不再适用于 A12， 现在我们需要考虑到底是什么导致的。
首先很明显，苹果意识到了在白皮书中定义的指针验证机制不能够抵抗读写内核的攻击者，因此他们实现了更高强度的防御。如果不对芯片进行逆向工程，我们不可能知道他们到底做了什么，但是我们可以根据观察到的行为进行推测。
我的第一个想法是，苹果重新加入了 secure monitor 机制，就像它在之前的设备上所做的那样，用 Watchtower 来防止内核补丁。如果
secure monitor 能够捕获 EL 之间的转换，并捕获对 PAC 密钥寄存器的写入，那么它就可以向内核隐藏真正的 PAC