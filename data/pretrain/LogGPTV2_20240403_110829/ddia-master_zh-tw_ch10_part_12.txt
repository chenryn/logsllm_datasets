在本章中，我们探索了批处理的主题。我们首先看到了诸如 awk、grep 和 sort 之类的 Unix 工具，然后我们看到了这些工具的设计理念是如何应用到 MapReduce 和更近的资料流引擎中的。一些设计原则包括：输入是不可变的，输出是为了作为另一个（仍未知的）程式的输入，而复杂的问题是透过编写 “做好一件事” 的小工具来解决的。
在 Unix 世界中，允许程式与程式组合的统一介面是档案与管道；在 MapReduce 中，该介面是一个分散式档案系统。我们看到资料流引擎添加了自己的管道式资料传输机制，以避免将中间状态物化至分散式档案系统，但作业的初始输入和最终输出通常仍是 HDFS。
分散式批处理框架需要解决的两个主要问题是：
* 分割槽
  在 MapReduce 中，Mapper 根据输入档案块进行分割槽。Mapper 的输出被重新分割槽、排序并合并到可配置数量的 Reducer 分割槽中。这一过程的目的是把所有的 **相关** 资料（例如带有相同键的所有记录）都放在同一个地方。
  后 MapReduce 时代的资料流引擎若非必要会尽量避免排序，但它们也采取了大致类似的分割槽方法。
* 容错
  MapReduce 经常写入磁碟，这使得从单个失败的任务恢复很轻松，无需重新启动整个作业，但在无故障的情况下减慢了执行速度。资料流引擎更多地将中间状态储存在记忆体中，更少地物化中间状态，这意味著如果节点发生故障，则需要重算更多的资料。确定性运算元减少了需要重算的资料量。
我们讨论了几种 MapReduce 的连线演算法，其中大多数也在 MPP 资料库和资料流引擎内部使用。它们也很好地演示了分割槽演算法是如何工作的：
* 排序合并连线
  每个参与连线的输入都透过一个提取连线键的 Mapper。透过分割槽、排序和合并，具有相同键的所有记录最终都会进入相同的 Reducer 呼叫。这个函式能输出连线好的记录。
* 广播杂凑连线
  两个连线输入之一很小，所以它并没有分割槽，而且能被完全载入进一个杂凑表中。因此，你可以为连线输入大端的每个分割槽启动一个 Mapper，将输入小端的散列表载入到每个 Mapper 中，然后扫描大端，一次一条记录，并为每条记录查询散列表。
* 分割槽杂凑连线
  如果两个连线输入以相同的方式分割槽（使用相同的键，相同的杂凑函式和相同数量的分割槽），则可以独立地对每个分割槽应用散列表方法。
分散式批处理引擎有一个刻意限制的程式设计模型：回拨函式（比如 Mapper 和 Reducer）被假定是无状态的，而且除了指定的输出外，必须没有任何外部可见的副作用。这一限制允许框架在其抽象下隐藏一些困难的分散式系统问题：当遇到崩溃和网路问题时，任务可以安全地重试，任何失败任务的输出都被丢弃。如果某个分割槽的多个任务成功，则其中只有一个能使其输出实际可见。
得益于这个框架，你在批处理作业中的程式码无需操心实现容错机制：框架可以保证作业的最终输出与没有发生错误的情况相同，虽然实际上也许不得不重试各种任务。比起线上服务一边处理使用者请求一边将写入资料库作为处理请求的副作用，批处理提供的这种可靠性语义要强得多。
批处理作业的显著特点是，它读取一些输入资料并产生一些输出资料，但不修改输入 —— 换句话说，输出是从输入衍生出的。最关键的是，输入资料是 **有界的（bounded）**：它有一个已知的，固定的大小（例如，它包含一些时间点的日志档案或资料库内容的快照）。因为它是有界的，一个作业知道自己什么时候完成了整个输入的读取，所以一个工作在做完后，最终总是会完成的。
在下一章中，我们将转向流处理，其中的输入是 **无界的（unbounded）** —— 也就是说，你还有活儿要干，然而它的输入是永无止境的资料流。在这种情况下，作业永无完成之日。因为在任何时候都可能有更多的工作涌入。我们将看到，在某些方面上，流处理和批处理是相似的。但是关于无尽资料流的假设也对我们构建系统的方式产生了很多改变。
## 参考文献
1.  Jeffrey Dean and Sanjay Ghemawat: “[MapReduce: Simplified Data Processing on Large Clusters](http://research.google.com/archive/mapreduce.html),” at *6th USENIX Symposium on Operating System Design and Implementation* (OSDI), December 2004.
1.  Joel Spolsky: “[The Perils of JavaSchools](http://www.joelonsoftware.com/articles/ThePerilsofJavaSchools.html),” *joelonsoftware.com*, December 25, 2005.
1.  Shivnath Babu and Herodotos Herodotou: “[Massively Parallel Databases and MapReduce Systems](http://research.microsoft.com/pubs/206464/db-mr-survey-final.pdf),” *Foundations and Trends in Databases*, volume 5, number 1, pages 1–104, November 2013. [doi:10.1561/1900000036](http://dx.doi.org/10.1561/1900000036)
1.  David J. DeWitt and Michael Stonebraker: “[MapReduce: A Major Step Backwards](https://homes.cs.washington.edu/~billhowe/mapreduce_a_major_step_backwards.html),” originally published at *databasecolumn.vertica.com*, January 17, 2008.
1.  Henry Robinson: “[The Elephant Was a Trojan Horse: On the Death of Map-Reduce at Google](http://the-paper-trail.org/blog/the-elephant-was-a-trojan-horse-on-the-death-of-map-reduce-at-google/),” *the-paper-trail.org*, June 25, 2014.
1.  “[The Hollerith Machine](https://www.census.gov/history/www/innovations/technology/the_hollerith_tabulator.html),” United States Census Bureau, *census.gov*.
1.  “[IBM 82, 83, and 84 Sorters Reference Manual](http://www.textfiles.com/bitsavers/pdf/ibm/punchedCard/Sorter/A24-1034-1_82-83-84_sorters.pdf),” Edition A24-1034-1, International Business Machines Corporation, July 1962.
1.  Adam Drake: “[Command-Line Tools Can Be 235x Faster than Your Hadoop Cluster](https://adamdrake.com/command-line-tools-can-be-235x-faster-than-your-hadoop-cluster.html),” *aadrake.com*, January 25, 2014.
1.  “[GNU Coreutils 8.23 Documentation](http://www.gnu.org/software/coreutils/manual/html_node/index.html),” Free Software Foundation, Inc., 2014.
1.  Martin Kleppmann: “[Kafka, Samza, and the Unix Philosophy of Distributed Data](http://martin.kleppmann.com/2015/08/05/kafka-samza-unix-philosophy-distributed-data.html),” *martin.kleppmann.com*, August 5, 2015.
1.  Doug McIlroy:[Internal Bell Labs memo](http://cm.bell-labs.com/cm/cs/who/dmr/mdmpipe.pdf), October 1964. Cited in: Dennis M. Richie: “[Advice from Doug McIlroy](https://www.bell-labs.com/usr/dmr/www/mdmpipe.html),” *cm.bell-labs.com*.
1.  M. D. McIlroy, E. N. Pinson, and B. A. Tague: “[UNIX Time-Sharing System: Foreword](https://archive.org/details/bstj57-6-1899),” *The Bell System Technical Journal*, volume 57, number 6, pages 1899–1904, July 1978.
1.  Eric S. Raymond: *The Art of UNIX Programming*. Addison-Wesley, 2003. ISBN: 978-0-13-142901-7
1.  Ronald Duncan: “[Text File Formats – ASCII Delimited Text – Not CSV or TAB Delimited Text](https://ronaldduncan.wordpress.com/2009/10/31/text-file-formats-ascii-delimited-text-not-csv-or-tab-delimited-text/),” *ronaldduncan.wordpress.com*, October 31, 2009.
1.  Alan Kay: “[Is 'Software Engineering' an Oxymoron?](http://tinlizzie.org/~takashi/IsSoftwareEngineeringAnOxymoron.pdf),” *tinlizzie.org*.
1.  Martin Fowler: “[InversionOfControl](http://martinfowler.com/bliki/InversionOfControl.html),” *martinfowler.com*, June 26, 2005.
1.  Daniel J. Bernstein: “[Two File Descriptors for Sockets](http://cr.yp.to/tcpip/twofd.html),” *cr.yp.to*.
1.  Rob Pike and Dennis M. Ritchie: “[The Styx Architecture for Distributed Systems](http://doc.cat-v.org/inferno/4th_edition/styx),” *Bell Labs Technical Journal*, volume 4, number 2, pages 146–152, April 1999.
1.  Sanjay Ghemawat, Howard Gobioff, and Shun-Tak Leung: “[The Google File System](http://research.google.com/archive/gfs-sosp2003.pdf),” at *19th ACM Symposium on Operating Systems Principles* (SOSP), October 2003. [doi:10.1145/945445.945450](http://dx.doi.org/10.1145/945445.945450)