next facet. Both functions also use a mask byte to either determine
which bit value should be stored in the facet (for the EncodeByte
function) or to reflect the decoded bit value in the return byte (for
the DecodeByte function).
The encoding/decoding of an individual byte can in turn provide
a building block for the encoding/decoding of other data types, such
as double word integers or binary byte arrays. The latter can be
used to encode a raw byte stream, an approach that can be used in a
strong attack with a block cipher over the proposed steganographic
STL channel. Similarly, the bit encoding/decoding combined with
272RAID ’21, October 6–8, 2021, San Sebastian, Spain
Yampolskiy et al.
(a) Encoding Approach
f n S e c r e t ,
fnSTLdest )
EncodeFileInSTL ( fnSTL ,
{
s e c r e t B y t e s = R e a d F i l e B y t e s ( f n S e c r e t ) ;
s e c r e t S i z e
= s i z e o f ( s e c r e t B y t e s ) ;
c a r r i e r S T L
s t l C a p a c i t y = FacetCount ( c a r r i e r S T L ) / 8 ;
= LoadSTL ( fnSTL ) ;
( s t l C a p a c i t y >= s e c r e t S i z e +4)
i f
{
STLSeek2Facet ( SEEK_SET ,
0 ) ;
EncodeLong ( c a r r i e r S T L ,
EncodeBytes ( c a r r i e r S T L ,
s e c r e t S i z e ) ;
s e c r e t B y t e s ,
s e c r e t S i z e ) ;
SaveSTL ( c a r r i e r S T L ,
}
fnSTLdest ) ;
}
(b) Encoding Function, Pseudo-Code
Figure 5: Encoding Single Binary File into an STL File
sufficient capacity to encode the secret message together with the
size field. If the capacity is sufficient, the encoding is conducted on
the loaded STL mesh. The call to function STLSeek2Facet positions
the seek pointer on the first facet in the carrier STL file. Four bytes
indicating the secret size are encoded at this position, offset 0. The
secret is then encoded starting at an offset of 4 encoded bytes. In
the pseudo-code, all encoding functions are assumed to advance
the facet pointer, similar to the common behavior of file write
functions. After the encoding is completed, the mesh is saved to
the destination file indicated by fnSTLdest.
Conceptually, before decoding can start, the STLM file received
from the Internet might also need to go through firewall and IDS/IPS
checks (see Figure 6a). The decoding of the message is also a two
stage process. It starts with the decoding of the first four bytes from
STLM at offset 0, which represent the size field. Then the size bytes
of secret are decoded, starting at an offset of 4 encoded bytes in the
encoded message. All decoding operations are conducted byte by
byte and bit by bit, mirroring the encoding procedure.
(a) Decoding Approach
DecodeFileFromSTL ( fnSTL_M ,
{
c a r r i e r S T L = LoadSTL ( fnSTL_M )
f n S e c r e t )
STLSeek2Facet ( SEEK_SET ,
s e c r e t S i z e
= DecodeLong ( c a r r i e r S T L ) ;
s e c r e t B y t e s = DecodeBytes ( c a r r i e r S T L ,
0 ) ;
s e c r e t S i z e ) ;
S a v e I n F i l e ( f n S e c r e t ,
s e c r e t B y t e s ,
s e c r e t S i z e ) ;
}
(b) Decoding Function, Pseudo-Code
Figure 6: Decoding Single Binary File from an STL File
The decoding function DecodeFileFromSTL closely follows the
outlined process (see 6b). It takes two parameters: an STL file name
that contains encoded secret information, fnSTL_M, and a name for
a binary file in which the decoded secret will be saved, fnSecret. To
start decoding, the mesh of the STL_M file is loaded. Then, at offset
0, the four bytes indicating secret size are decoded. At an offset of 4
encoded bytes, the remaining bytes are read and decoded to extract
the secret. Finally, the extracted byte stream is saved in the binary
file indicated by fnSecret.
5 STRONG ATTACK: FULLY-ENCRYPTED
STEGANOGRAPHIC COVERT CHANNEL
A strong attack can use the raw steganographic covert channel
defined in Section 4 as a carrier, similar to how higher level network
protocols are transported over the underlying network layers. For
a strong attack, several more factors have to be taken into account.
First, classical bi-directional key exchange protocols might not
be possible, for example because transfer of STL files (used as a
carrier) may be permitted only in one direction. Furthermore, bi-
directional communication, implemented via consecutive sending
and receiving of STL files, might be identified as a suspicious activity
and lead to the discovery of the communication channel. Thus the
communication channel should be unidirectional.
Organizational BoundaryMSTLMEnc.STLsizesecretsizeofSECRET (sequence of bytes)Firewall, IDS/IPSInternetSTLMDec. (0, 4)SECRET Dec. (4, size)sizeRetrieve encoded Secret – size bytes starting at the offset 4 bytes in M Firewall, IDS/IPSInternetObtain size (in bytes) of encoded Secret – 4 bytes at the offset 0 of the encoded M273What Did You Add to My Additive Manufacturing Data?
RAID ’21, October 6–8, 2021, San Sebastian, Spain
Figure 7: Strong Attack, Encoding Approach (Padding: pad1
is used to increase length of size||secret to a multiple of a
block size in used symmetric encryption (128 bits for AES);
pad2 increases the length of DEM, so that together with KEM
it overwrites all bits in the carrier STL file)
Figure 8: Strong Attack, Decoding Approach (Padding: pad2*
is a multiple of block size (128 bits for AES), and corresponds
to the part of pad2 that could be encoded in the carrier STL
file)
Second, while encryption using a symmetric key stored in mal-
ware is possible, the detection and reverse engineering of the mal-
ware would recover this key. This will degrade the cryptographic
channel to the level of the weak attack, and eventually allow iden-
tification of secretly transmitted data if transmitted STL files are
logged in their entirety.
To address these concerns, we argue that the strong attack should
build upon public key technology, and the KEM/DEM approach in
particular. In this approach, for every new transmitted message a
new session key is generated. In the Data Encapsulation Mechanism
(DEM), this key is used to encrypt the exfiltrated message with
a state-of-the-art symmetric encryption algorithm, such as AES
(Advanced Encryption Standard) based method. In general, the
encoded payload will be larger than the block size of AES (which is
128 bits). Therefore, modes of operation, such as a variant of Cipher
Block Chaining (CBC), have to be used, or other modes like GCM.
A Key Encapsulation Mechanism (KEM) generates information that
a recipient can use to recover the session key, e.g., by encrypting
it with a public key (stored in malware) of the recipient. A state-
of-the-art asymmetric encryption algorithm, such as Elliptic Curve
Cryptography (ECC), e.g., EC-DH, can be used. The results of both
KEM and DEM are concatenated and together (i.e., KEM||DEM)
constitute the transmitted message. The local malware erases both
his random choice for the session and the keys derived from it.
The selection of a KEM/DEM approach has an immediate impact
on the size of the secret message that can be transported. As the
STL files describing different models have different amounts of
vertices, so too will their encoding capacity vary. This encoding
capacity should be sufficient to incorporate the entire KEM||DEM
outcome. The size of KEM depends on the selected approach, but
for the purpose of discussion we can consider it fixed. Similar to the
discussion of the weak attack (see Section 4), the message processed
by DEM should consist of at least the fields size and secret, so that
the recipient can extract the secret. The DEM can be based on stream
cipher or a block cipher mode and may include an authentication
field as well.
A carrier STL suitable to transport the message will generally
have encoding capacity exceeding the combined KEM||DEM size.
This raises the concern of distinguishability of the encoded KEM/-
DEM from the rest of the file. Should the distinction be possible,
it could act as an indicator of the covert message’s presence and
simplify cipher extraction for the analysis. To prevent this from
happening, all remaining bits in the carrier STL should be encoded
with an extended DEM part. This can be achieved by padding the
input of the DEM encryption (size||secret padded by pad1 to a mul-
tiple of the block size) with additional padding pad2 of the length
sufficient to extend the encrypted random blocks till the end of the
file; in general, not all bits of the final cipher block will be encoded.
Our proposal for KEM and DEM are as follows. The KEM can be
realized using either off-the-shelf implementation of state of the
art asymmetric encryption, such as Elliptic Curve Cryptography
(ECC), or with custom-made derivatives. ECC is using an elliptic
curve as a generator of a group, and exponentiation as an oper-
ation on the group elements known as “multiplication along the
MSTLMEnc.STLsizesecretsizeofSECRET pad1pad2EncryptCBC-AES 256GranduK = YuZ = GuSHA 256KSession Key k = SHA256(K)Constraints:• sizeof(size||secret||pad1) =           n1 * BlockSize, n1 = 1, 2, …• sizeof(size||secret||pad1||pad2) =           (n1+n2) * BlockSize, n2 = 0, 1, …• sizeof(Z) + sizeof(size||secret||pad1) =           EncodingCapacity(STL)Y (= Gx)G, Y stored in MalwareG, Y stored in MalwareDEM (= e_AES(k, size||secret||pad1||pad2)KEM (= Z)EncodingCapacity(STL), bits...randp0c0kivAESpncnkAESp1c1kAES............sizesecretsaveSECRETpad1pad2*DecryptCBC-AES 256GK = ZxSHA 256KSession Key k = SHA256(K)Padding in Decrypted DEM:• sizeof(size||secret||pad1||pad2*) =           n3 * BlockSize, n3 = 1, 2, …• sizeof(pad2**) < BlockSizeFor AES: BlockSize = 128 bitsxG, x stored by RecipientG, x stored by RecipientDEM (= e_AES(k, size||secret||pad1||pad2*)KEM (= Z)sizeof(DEM) = n3 * BlockSizeSTLMDec. (0, KEM)Dec. (KEM, DEM)EncodingCapacity(STL), bitspad2**Recovery of Session Key:• Zx = (Gu)x = (Gu)x = Gu*x = Gx*u = (Gx)u = Yu = K...p0c0kivAESpncnkAESp1c1kAES............274RAID ’21, October 6–8, 2021, San Sebastian, Spain
Yampolskiy et al.
curve.” The group generator and the operations on the group are
shared by both the attacker (on the receiving end of the message)
and the malware (that sends out the message). Given that G is a
generator in the right group, an attacker can generate a public
key as Y=Gx, where x is only known to the attacker and Y can
be integrated in the malware. At the time when malware needs
to send a secret message, it randomly chooses a value u and uses
it to compute Z=Gu and K=Yu. The value Z is embedded in the
channel as a result of the KEM mechanism. The attacker who re-
ceives the message can use it to recover the value of K as follows:
Zx=(Gu)x=Gu·x=Gx·u=(Gx)u=Yu=K.
(a) Secret: Selected Liberator
Design Files in a Password-
Protected ZIP File
(b) Stanford Lucy used as a
“Carrier” STL File
(c) Exfil3Dtion - Encoding, Console Output
Figure 9: Encoding Secret in STL Carrier File, before Sending
to a Recipient over Internet or Covertly Storing on PC
attacker and to innocent recipients will be indistinguishable, as
they all contain the secret message look-alike part. Distinguish-
ing dummy-cipher from cipher with any advantage higher than
1/2+ϵ for non-negligible ϵ means that the Decisional Diffie-Hellman
problem DDH in the group is violated or the symmetric encryption
semantic security is violated (i.e., the encryption is distinguishable
from a random string, violating its Pseudo-random function prop-
erty). After the embedding when the keys are erased, the address of
the intended receiver is erased as well. Namely, in compromised sys-
tems operating this way, we cannot tell to where stolen information
is being sent (the thief is hidden in the crowd).
The above can be described in a formal proof essentially follow-
ing the security proof of the original KEM/DEM hybrid encryption
system.
6 EXPERIMENTAL EVALUATION: HIDING
LIBERATOR GUN DESIGN FILES
We implemented the described weak attack approach for embedding
and extracting a single binary file as a Python script, calling the
program exfil3Dtion. To demonstrate the feasibility of our method
with a real-life application, we simulated a malicious actor scenario
in which “restricted” files were encrypted, password protected,
and hidden inside a benign STL file. As our restricted content we
selected a few Liberator gun [28] design files.
In the DEM, a session key k for the data encryption can be derived
by what is called KDF (Key Derivation Function) which is based on
cryptographic hash functions K: k=KDF(K). The result is a (say, 256
bit random looking) value that can be used as keys by encrypting the
payload with AES in some mode: cipher=eAES(k, message). As K can
be recovered by the recipient of the message, so can the session key
k, and the message can be decrypted. After the message is encoded
in the carrier STL file, the malware erases K and k, preventing
recovery of the sent message at the compromised site, even if the
malware is discovered and reverse-engineered. This attack follows
the malicious cryptographic approach of Adam Young and Moti
Yung [70, 72]. To get the key one has to break the Decisional Diffie-
Hellman assumption.
Encoding and decoding in this way are summarized in Figures 7
and 8, respectively, with some concrete functions choices. Encod-
ing a message in an STL file can be easily implemented with the
functions defined in Section 4; that pseudo-code is omitted here. In
Figures 7, pad1 expands size||secret to a multiple of the block size
in the symmetric encryption algorithm, while pad2 does the same
to ensure that the cipher overrides all bits in the carrier file; both
pads are generated randomly. In Figure 8, the encoded portion of
encrypted pad2 is indicated by two fields pad2* and pad2**. The
first indicates the portion of encrypted pad2 that resulted in the
cipher blocks encoded in their entirety; the second is the very last
cipher block generated over pad2 which could be only partially
encoded in the carrier STL file. This is just a demonstration, and
we can employ other DEM methods (e.g. GCM which takes care of
encryption and authentication). The decoding approach presented
in Figure 8 simplifies its visualization, i.e., the decryption is con-
ducted over size||secret||pad1||pad2*. The decoding performance can
be optimized by first extracting and decrypting the very first cipher
block of DEM and then, based on the value of secret, determine how
many further blocks should be decoded and decrypted; this will
reduce the operation to size||secret||pad1.
Lastly, while the description above defines a fully-encrypted
steganographic channel over STL files, one concern remains - the
ability of a defender to distinguish between STL files containing
secret messages and those that don’t. Even without the ability to
decrypt the embedded information, defenders might identify an
attacker’s e-mail or IP address (this is akin to "traffic analysis"
methods). To establish indistinguishability, automated malware can
generate a random bit sequence r composed of a group element
and a random string, and embed a new version in each STL files
on the compromised system using the above described method.
This way, all STL files sent from the compromised system to both
275What Did You Add to My Additive Manufacturing Data?
RAID ’21, October 6–8, 2021, San Sebastian, Spain
The Liberator gun is a 3D printed handgun whose manufacturing
and design file distribution has been controversial [9, 12]. Although
file distribution by the designer is currently blocked, the files were
previously available online and were downloaded over 100,000
times in a two-day period [25]. Given the popularity and continued
online presence of the files [52], it is reasonable to assume that
interested parties might attempt clandestinely distributing the files
using the exfiltration approach presented in Section 4.
To begin, we selected two of the Liberator design files and com-
pressed them into a single .zip file. The .zip file was encrypted using
password PW123, with a resulting file size of 36,004 bytes. Figure 9a
depicts the files.
For the benign carrier file, we used the Stanford_Lucy_ASCII.stl
file depicted in Figure 9b. The file contained 68,646 facets. Based
on our usage of the vertex order encoding primitive, the maximum
capacity of the carrier file was 46,080 bytes. Considering the reser-