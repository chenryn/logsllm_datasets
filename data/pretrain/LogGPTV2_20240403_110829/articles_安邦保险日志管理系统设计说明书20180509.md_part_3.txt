### SourceGroup管理
SourceGroup表示一个Token下的逻辑分组，用于限定可以访问的日志源。一个SourceGroup可以通过hostname、appname和tag三个字段的任意组合来定义。每个字段可以设置多个值，使用英文逗号`,`分隔，同一字段内的多个值表示“或”关系。

#### 示例
- `hostname=192.168.1.10`：表示只能访问hostname为192.168.1.10的日志。
- `hostname=192.168.1.10 & appname=nginx_access`：表示只能访问hostname为192.168.1.10并且appname为nginx_access的日志。
- `appname=nginx_access & tag=clicklog,ad-search`：表示只能访问appname为nginx_access，并且tag为clicklog或ad-search的日志。

管理员用户可以为其他用户（除了所有者）指定SourceGroup。一个用户可以拥有多个SourceGroup，一个SourceGroup也可以被指派给多个用户。用户只能访问分配给他们的SourceGroup。

系统存储所有设定的SourceGroup，并可以根据token或用户名快速定位SourceGroup列表。

#### 数据结构
```json
{
  "mappings": {
    "source_groups": {
      "properties": {
        "id": {"type": "string", "index": "not_analyzed", "store": "yes"},
        "name": {"type": "string", "index": "not_analyzed", "store": "yes"},
        "description": {"type": "string", "index": "not_analyzed", "store": "yes"},
        "owner_id": {"type": "string", "index": "not_analyzed", "store": "yes"},
        "domain": {"type": "string", "index": "not_analyzed", "store": "yes"},
        "accounts": {"type": "string", "index": "not_analyzed", "store": "yes"},
        "hostname": {"type": "string", "index": "no", "store": "yes"},
        "appname": {"type": "string", "index": "no", "store": "yes"},
        "tag": {"type": "string", "index": "no", "store": "yes"}
      }
    }
  }
}
```

#### API接口
- **创建SourceGroup**
  - 请求: `act=create_source_group & token=xx & name=xx & hostname=xx & appname=xx & tag=xx & description=xx & owner_id=xx`
  - 成功响应: `{"result": true}`
  - 失败响应: `{"result": false, "error": "xxx"}`

- **更新SourceGroup**
  - 请求: `act=update_source_group & token=xx & id=xx & hostname=xx & appname=xx & tag=xx & description=xx`
  - 成功响应: `{"result": true}`
  - 失败响应: `{"result": false, "error": "xxx"}`

- **删除SourceGroup**
  - 请求: `act=delete_source_group & token=xx & id=xx`
  - 响应: 同上

- **检查SourceGroup名称是否已存在**
  - 请求: `act=check_source_group_existed & name=xx`
  - 成功响应: `{"result": "true"}`
  - 失败响应: `{"result": "false"}`

- **获取SourceGroup**
  - 请求: `act=get_source_group & token=xx & name=xx & account=xx`
  - 成功响应: 返回列表
  - 失败响应: `{"result": "false", "error": "xxx"}`

- **为用户指定SourceGroup**
  - 请求: `act=assign_source_group & token=xx & id=xx & owner_id=xx`
  - 成功响应: `{"result": "true"}`
  - 失败响应: `{"result": "false", "error": "xxx"}`

- **取消用户的SourceGroup**
  - 请求: `act=cancel_source_group & token=xx & id=xx & owner_id=xx`
  - 成功响应: `{"result": "true"}`
  - 失败响应: `{"result": "false", "error": "xxx"}`

### SavedSearch
SavedSearch用于保存用户设定的检索请求，需要指定检索串、sourcegroup和时间区间。SavedSearch有两种创建方式：用户主动创建和用户创建Alert时生成的匿名SavedSearch。每个SavedSearch都有一个唯一的名字，在Token下是唯一的。

#### 数据结构
```json
{
  "mappings": {
    "saved_searches": {
      "properties": {
        "id": {"type": "string", "index": "not_analyzed", "store": "yes"},
        "name": {"type": "string", "index": "not_analyzed", "store": "yes"},
        "domain": {"type": "string", "index": "not_analyzed", "store": "yes"},
        "anonymous": {"type": "boolean", "index": "yes", "store": "yes"},
        "like": {"type": "boolean", "index": "yes", "store": "yes"},
        "owner_id": {"type": "string", "index": "no", "store": "yes"},
        "query": {"type": "string", "index": "no", "store": "yes"},
        "time_range": {"type": "string", "index": "no", "store": "yes"},
        "source_groups": {"type": "string", "index": "no", "store": "yes"},
        "filters": {"type": "string", "index": "no", "store": "yes"}
      }
    }
  }
}
```

#### API接口
- **创建SavedSearch**
  - 请求: `act=create_saved_search & token=xx & owner_name=xx & name=xx & query=xx & time_range=xx & source_groups=xx & filters=xx`
  - 成功响应: `{"result": "true"}`
  - 失败响应: `{"result": "false", "error": "xx"}`

- **检查SavedSearch名称是否已存在**
  - 请求: `act=check_existed_saved_search & token=xx & name=xx`
  - 成功响应: `{"result": "true"}`
  - 失败响应: `{"result": "false", "error": "xx"}`

- **根据ID获取SavedSearch**
  - 请求: `act=get_saved_search & token=xx & id=xx`
  - 响应: 返回SavedSearch信息

- **更新SavedSearch**
  - 请求: `act=update_saved_search & token=xx & id=xx & query=xx & time_range=xx & source_groups=xx & filters=xx & like=xx`
  - 成功响应: `{"result": "true"}`
  - 失败响应: `{"result": "false", "error": "xx"}`

- **删除SavedSearch**
  - 请求: `act=delete_saved_search & token=xx & id=xx`
  - 成功响应: `{"result": "true"}`
  - 失败响应: `{"result": "false", "error": "xx"}`

- **获取SavedSearch列表**
  - 请求: `act=get_all_saved_search & token=xx`
  - 响应: 返回列表信息

### Alert
Alert用于保存用户设定的警报列表，每个警报都必须与一个SavedSearch关联。

#### 数据结构
```json
{
  "mappings": {
    "alerts": {
      "properties": {
        "id": {"type": "string", "index": "not_analyzed", "store": "yes"},
        "name": {"type": "string", "index": "not_analyzed", "store": "yes"},
        "domain": {"type": "string", "index": "not_analyzed", "store": "yes"},
        "saved_search_id": {"type": "string", "index": "not_analyzed", "store": "yes"},
        "owner_id": {"type": "string", "index": "no", "store": "yes"},
        "email": {"type": "string", "index": "no", "store": "yes"},
        "description": {"type": "string", "index": "no", "store": "yes"},
        "interval": {"type": "long", "index": "no", "store": "yes"},
        "condition": {"type": "string", "index": "no", "store": "yes"},
        "enabled": {"type": "boolean", "index": "no", "store": "yes"},
        "last_run_timestamp": {"type": "string", "index": "no", "store": "yes"},
        "run_results": {"type": "string", "index": "no", "store": "yes"}
      }
    }
  }
}
```

#### API接口
- **创建Alert**
  - 请求: `act=create_alert & token=xx & owner_name=xx & name=xx & saved_search_id=xx & email=xx & description=xx & interval=xx & condition=xx & enabled=xx & query=xx & filters=xx`
  - 成功响应: `{"result": "true"}`
  - 失败响应: `{"result": "false", "error": "xx"}`

- **检查Alert名称是否已存在**
  - 请求: `act=check_alert_existed & token=xx & name=xx`
  - 成功响应: `{"result": "true"}`
  - 失败响应: `{"result": "false", "error": "xx"}`

- **更新Alert**
  - 请求: `act=update_alert & token=xx & id=xx & saved_search_id=xx & email=xx & description=xx & condition=xx & interval=xx & enabled=xx`
  - 成功响应: `{"result": "true"}`
  - 失败响应: `{"result": "false", "error": "xx"}`

- **删除Alert**
  - 请求: `act=delete_alert & token=xx & id=xx`
  - 成功响应: `{"result": "true"}`
  - 失败响应: `{"result": "false", "error": "xx"}`

- **获取所有Alert列表**
  - 请求: `act=get_all_alert & token=xx`
  - 响应: 返回所有Alert列表

- **根据ID获取某个Alert**
  - 请求: `act=get_alert & token=xx & id=xx`
  - 响应: 返回Alert信息

- **获取Alert所有者的数量**
  - 请求: `act=get_alert_owner_count & token=xx & saved_search_id=xx`
  - 成功响应: `{"result": "true", "total": xx}`
  - 失败响应: `{"result": "false", "error": "xx"}`

### Dashboard
Dashboard用于管理用户设置的仪表板，每个用户可以设置多个Dashboard，每个Dashboard有且仅有一个所有者。

#### 数据结构
```json
{
  "mappings": {
    "dashboards": {
      "properties": {
        "id": {"type": "string", "index": "not_analyzed", "store": "yes"},
        "name": {"type": "string", "index": "not_analyzed", "store": "yes"},
        "owner_id": {"type": "string", "index": "not_analyzed", "store": "yes"},
        "domain": {"type": "string", "index": "not_analyzed", "store": "yes"},
        "contents": {"type": "string", "index": "no", "store": "yes"}
      }
    }
  }
}
```

`contents`是一个JSON格式的字符串数组，每个JSON对象描述一个model，每个model使用name作为唯一标识。

#### API接口
- **创建Dashboard**
  - 请求: `act=create_dashboard & token=xx & owner_id=xx & name=xx`
  - 成功响应: `{"result": true}`
  - 失败响应: `{"result": false, "error": "xx"}`

- **为Dashboard添加一个model**
  - 请求: `act=add_dashboard_model & token=xx & id=xx -d $model_content`
  - 成功响应: `{"result": true}`
  - 失败响应: `{"result": false, "error": "xx"}`

- **更新Dashboard model**
  - 请求: `act=update_dashboard_model & token=xx & id=xx -d $model_content`
  - 成功响应: `{"result": true}`
  - 失败响应: `{"result": false, "error": "xx"}`

- **删除一个model**
  - 请求: `act=delete_dashboard_model & token=xx & id=xx & model_name=xx`
  - 成功响应: `{"result": "true"}`
  - 失败响应: `{"result": "false", "error": "xx"}`

- **删除Dashboard**
  - 请求: `act=delete_dashboard & token=xx & id=xx`
  - 成功响应: `{"result": true}`
  - 失败响应: `{"result": false, "error": "xx"}`

- **获取Dashboard列表**
  - 请求: `act=get_all_dashboard & token=xx & owner_id=xx`
  - 成功响应: 
    ```json
    {
      "result": "true",
      "owner": "",
      "contents": [model1, model2, ...]
    }
    ```
  - 失败响应: `{"result": "false", "error": "xx"}`

### 数据备份与恢复
在备份机上启动一个服务，用于接收并执行备份和恢复请求，以及查询当前工作进度。该服务会访问检索集群，拉取索引并备份到本地，或者从本地取出索引推送到检索集群。

- **热索引**：检索集群中的索引文件，可检索。
- **冷索引**：备份后的索引文件，不可检索，需要恢复成热索引才可检索。冷索引可以存于硬盘、磁带库、SAN等设备。
- **压缩**：冷索引压缩后，存储大小约为热索引的1/5~1/3。

#### 查询
前端可以请求归档或恢复的状态。

| 列名     | 显示         | 说明                                      |
|----------|--------------|-------------------------------------------|
| index    | 索引名称     | 索引                                      |
| type     | 应用名       | 用户指定的appname                         |
| status   | 状态         | 索引的状态                                |
| elastic  | 在线索引个数 | 在Elasticsearch中的索引条数               |
| dir      | 磁盘索引个数 | 在目录中的索引条数                        |
| size     | 占用空间     | 索引在磁盘中占用的空间大小，单位为byte    |
| message  | 详细信息     | 索引附加的信息，包括错误信息、备份信息等  |

#### 状态具体含义
| 状态              | 含义                                           |
|-------------------|------------------------------------------------|
| elastic           | 只在Elasticsearch中存在，可以进行手动归档操作   |
| waitAutoBackup    | 等待自动归档，可以进行手动归档操作              |
| waitBackup        | 等待归档                                       |
| backuping         | 正在归档                                       |
| backupFailed      | 归档失败                                       |
| sync              | 归档或恢复完成，在目录和Elasticsearch中都存在   |
| dir               | 只在目录中存在，可以进行恢复操作                |
| waitRestore       | 等待恢复                                       |
| restoring         | 正在恢复                                       |
| restoreFailed     | 恢复失败                                       |

#### 进度计算
- **备份**：总量是索引的数量，`dir`是已归档的数量。
- **恢复**：总量是`dir`的数量，`elastic`是已恢复的数量。

#### message定义
| 含义                     | 状态             | 具体内容                                   |
|--------------------------|------------------|--------------------------------------------|
| 备份成功                 | sync             | backup success in 10s                      |
| 恢复成功                 | sync             | restore success in 10s                     |
| 从Elasticsearch中发现索引 | elastic          | load from cluster                          |
| 从磁盘中发现索引         | elastic          | load from disk                             |
| 从sync状态之后Elasticsearch索引过期导致索引被删除 | dir            | expired or deleted from cluster            |
| 从sync状态之后磁盘中索引被删除 | elastic          | delete from disk                           |
| 等待自动归档             | waitAutoBackup   | 10s left for scheduled backup              |
| 备份失败                 | backupFailed     | backup failed: error_message               |
| 恢复失败                 | restoreFailed    | restore failed: error_message              |

#### 查询请求
- **查询备份状态**
  - URL: `/query/indextype?action=query&condition=all&pageno=0&limit=100`
  - 返回:
    ```json
    {
      "result": true,
      "total": 34834734,
      "match": [
        ...
      ]
    }
    ```