belonging to either gadget addresses or data operands. They
may, however, attempt analyses that look for byte sequences
resembling addresses from code regions (i.e., plausible gad-
gets) and try to speculatively execute the chain from there [10],
[66]. By trying it at every plausible point, this may eventually
reveal some chain portions, nonetheless short thanks to P1-2.
This is when gadget confusion enters the picture. Firstly, we
can transform data operands in the chain to look like gadget
addresses, having then gadgets recover the desired values at
3Example: notZero(n) := ∼(∼n & (n + ∼0))(cid:29)31 for 32-bit data types.
4To this end we use the symbolic execution capabilities of angr [50].
run time (e.g., subtracting two addresses to obtain a constant,
applying bitmasks, shifting bits, etc.). This is possible as we
control both the layout of the binary (for the addresses) and
the pool of artiﬁcial gadgets (for the manipulations). Now that
virtually every 8-byte chain stride looks like a gadget address,
we introduce unaligned RSP updates at random program
points, adding a quantity η s.t. η mod 8 != 0. In the end, the
attacker may have to execute speculatively at every possible
chain offset, obtaining instructions that may or may not be part
of the intended execution sequence. We believe such gadget
confusion makes pattern attacks on our chains even harder.
E. Further Remarks
The instantiation of P1-2-3 is naturally entwined with RSP
dispatching: directly for P1-2, and indirectly for P3 through
array updates. In the rewriter, P1 replaces the RSP update
sequence we showed in §IV-B2, while P2 operates on the
fall-through and target blocks of a branch. Finally, the rewriter
can apply either P3 variant to a user-deﬁned fraction k of the
original program points when lowering the associated roplets.
Each predicate targets a main attack surface, but positive
externalities are also present. P2 can protect against possible
linear/recursive disassembly algorithms for ROP (A1), but will
not withstand SE-based disassembly. In §VII-C we discuss
how P1 can slow down state exploration (A3) by indirectly
putting pressure on the memory model of a SE or DSE engine.
Finally, with the second P3 variant we used ROP control
transfer dynamics to introduce also fake control dependencies.
VI. OTHER RELATED WORKS
Prior research explored ROP for software protection goals
orthogonal to obfuscation: tamper checking of selected code
regions through chains that use gadgets from such regions [3],
covert watermark encoding [67], and steganography of short
code [68]. Each of them could complement our design, espe-
cially [3] for checking code integrity of non-obfuscated parts.
ROPOB [41] is a lightweight obfuscation method to rewrite
transfers between CFG basic blocks using ROP gadgets. It
considers standard disassembly algorithms as adversary (a
“lighter” A1 case), and does not withstand static attacks like
SE (A1) or ROPDissector (A2), nor dynamic ones like DSE
or TDS (A3). ROPOB leaves data manipulation instructions in
plain sight, whose rewriting poses several challenges (§IV-B).
VM deobfuscation attacks like Syntia [8] and VMHunt [40]
intercept and simplify (A3) dispatching and opcode handling
sequences. They do not apply directly to ROP chains, and
embody ﬂavors of the agnostic and general approach of TDS.
movfuscator [69] is an extreme instance of the weird
machine concept, rewriting programs using only the Turing-
complete mov instruction. Kirsch et al. present [70] a custom
linear-sweep algorithm (A1) that recovers the CFG by targeting
logic dispatching elements used for the very encoding.
VII. EVALUATION
We arrange our experimental analysis in three parts. We
ﬁrst study the efﬁcacy of our techniques against prominent
SETTING
ROPk
nVM
nVM-IMPx
DESCRIPTION
ROP obfuscation with P3 inserted at a fraction of
program points k∈{0, 0.05, 0.25, 0.50, 0.75, 1.00}
and with P1 instantiated with n=4, s=n, p=32
n layers of VM obfuscation with n∈{1, 2, 3}
n layers of VM obfuscation with implicit ﬂows used
for every VPC load at layer(s) x∈ {ﬁrst, last, all}
TABLE I: Terminology for obfuscation conﬁgurations.
solutions for A1-2-3 (§VII-A), conﬁrming the theoretical ex-
pectations. We then study the resource usage of viable de-
obfuscation attacks using a methodology adopted in previous
works [14], [38], and put such numbers into perspective with
VM-obfuscated5 counterparts (§VII-B). Finally, we analyze
the applicability of our method to real-world code (§VII-C).
We ran the tests on a Debian 9.2 server with two Xeon
E5-4610v2 and 256 GB of RAM. Appendix §A contains the
settings we used to generate our 72 test functions and the VM
variants with Tigress, and more implementation details. The
rewriter currently consists of ˜3K Python LOC.
Table I details conﬁguration naming for the main ROP and
VM experiments. For the latter we try multiple layers of nested
virtualization as this is known to slow down SE and DSE-
based attacks [14], [23], and use a Tigress predicate that adds
implicit ﬂows to virtual program counter (VPC) loads: those
frustrate taint analysis-based simpliﬁcations and also create
many redundant states whenever VPC becomes symbolic.
A. Efﬁcacy of ROP Strengthening Transformations
The techniques presented in §V should intuitively raise
the bar to existing automated attacks, and hinder symbiotic
combinations between them. We now study how each auto-
mated approach feels the effects of each technique individually
already on small program instances, discussing also design-
aware enhancements we tried for ROP tools. In the end, DSE
emerges as the one and only viable option for our attacker.
We leverage the Tigress framework [55] to generate func-
tions appropriate as reverse engineering targets with a desired
complexity and structure. Tigress will also annotate CFG split
and join points with probes to help us measure code coverage.
1) General Attacks: In the context of general-purpose au-
tomated attacks, we consider angr [50] as SE engine, S2E [71]
for DSE, and the TDS implementation released by its authors.
Let us start with SE. For P1 we consider a function with
control structure [55] for (if (bb 4) (bb4)) having 4
mathematical computations per block, 15 loop iterations, and a
single int as input. In a “ROP-P1” version we encode in the
array for P1 n=4 δ-offsets, with no garbage entries (s = n) and
p = 32 repetitions, for a total of 128 cells populated statically.
To explore enough paths to hit all coverage points (G2),
angr took a time in the order of seconds for the native function,
and over 4500 seconds for ROP-P1. The aliasing P1 induces
on RSP updates for branching slows angr down signiﬁcantly
5We do not consider commercial tools like VMProtect for two reasons: they
offer little control over the transformations (but may rather combine many at
once), and add tricks and bombs [7] to break deobfuscation solutions by
targeting implementation gaps instead of their methodological shortcomings.
9
already for little code, as the SMT solver sees increasingly
complex expressions over RSP. Aliasing reverberates on secret
ﬁnding (G1) too: with a simpler for (for (bb 4)) code,
angr cracked the secret in the order of seconds for the original
code, and over 5 hours for ROP-P1. Other conﬁgurations of
variable complexity conﬁrmed these trends. When we tested
P3 shielding a single program point per basic block, 24 hours
were not sufﬁcient for angr to crack the secret. These results
suggest SE may not be readily suitable against our approach.
As for DSE, in the experiments P1 impacted it slightly and
only for G2: the reason is that S2E beneﬁts from concrete
input values when picking the next path to execute. For
P3 we obtained two conﬁrmations:
its two variants bring
similar time increases, and while higher k fractions of shielded
program points inﬂate the state space possibly more, code with
small input space may not always offer sufﬁcient independent
sources (i.e., symbolic registers) for optimal composition of
P3 instances. We postpone a detailed analysis of the induced
overheads to §VII-B as we consider larger code instances.
P1 and P3 resist TDS by design. The tested output traces
kept non-simpliﬁable (§V-C) implicit control dependencies
from having a tainted input value determine a jump target:
as those are pivotal to put pressure on DSE, combining DSE
with TDS-simpliﬁed input traces [7] would not ease attacks.
Summarizing, P1 and P3 effectively raise the bar for A1 and
A3 attacks, respectively: SE and TDS look no longer useful
already for little code. P2 and gadget confusion target syntactic
approaches, unlike the semantics-aware attacks we considered
above: we address them next in the ROP-aware domain.
2) ROP-Aware Attacks: To analyze ROP payloads we use
and extend ROPDissector to start from a memory dump of
the program taken when entering the chain of interest: in this
conﬁguration it operates as a hybrid static-dynamic analysis
and surpasses ROPMEMU in branch analysis and ﬂipping
capabilities. With ROPDissector now embodying a full-ﬂedged
ROP-A2 approach, we test if it can help with G2, while G1 is
out of scope as A2 recovers code but neglects data constraints.
Backing our expectations, shielding branches with P2 in the
rewriting makes ROPDissector fail in revealing any basic block
other than those the input used for the test reveals. We tried
to further extend ROPDissector by using its gadget guessing
technique (a ROP-educated form of pattern matching [10]) to
reveal new blocks by executing the chain at different start
offsets. Our gadget confusion however makes such analysis
explode, with many short and unaligned candidate blocks that
are difﬁcult to distinguish from P2-protected true positives.
We conclude this part by stressing the importance of con-
ceiving all of our protections. P1 impacts ROPDissector only if
no dump is supplied, and P3 does not affect it directly. Hence,
without P2 an attacker could have used ROPDissector or a
similar tool to aid semantic attacks in code coverage scenarios.
B. Measuring Obfuscation Resilience
We now measure the amount of resources required to
carry automated attacks for secret ﬁnding (G1) and code
coverage (G2) over synthetic functions from an established
10
SECRET FINDING
AVG TIME
CODE COVERAGE
100% POINTS
OBFUSCATION
CONFIGURATION
NATIVE
ROP0.05
ROP0.25
ROP0.50
ROP0.75
ROP1.00
1VM-IMPall
2VM
2VM-IMPﬁrst
2VM-IMPlast
2VM-IMPall
3VM
3VM-IMPﬁrst
3VM-IMPlast
3VM-IMPall
FOUND
70/72
19/72
10/72
9/72
5/72
1/72
61/72
62/72
62/72
61/72
62/72
62/72
54/72
62/72
0/72
65.2s
907.9s
568.4s
884.0s
775.3s
3028.7s
85.8s
71.6s
100.4s
104.1s
160.6s
119.2s
899.2s
240.3s
-
72/72
34/72
11/72
9/72
7/72
6/72
68/72
67/72
66/72
65/72
64/72
69/72
56/72
61/72
0/72
TABLE II: Successful attacks in the 1h-budget per program.
Fig. 5: Run-time overhead for clbg benchmarks of different
ROPk settings with 2VM-IMPlast used as baseline.
methodology. We ask Tigress to generate 72 non-cryptographic
hash functions with 6 control structures analogous to the most
complex ones from an inﬂuential obfuscation work [39], input
sizes of {1, 2, 4, 8} bytes, and three seeds (details in §§A).
In light of all
We exclude techniques that were ineffective on smaller
inputs like SE, and restrict our focus to DSE (recently [14]
makes a similar choice). DSE allows us to set up controlled
and accurate experiments for measuring G1 and G2, as S2E
typically succeeds in either goal in about one minute for
each of the 72 functions. This makes measuring obfuscation
overheads feasible, with a 1-hour budget per experiment
sufﬁcient to capture a slowdown of ∼50x or higher. With 15
conﬁgurations and 2 goals, the tests took > 2000 CPU hours.
the considerations made in §VII-A, we
use a ROPk setup with P1 and P3 enabled (P2 and gadget
confusion are disabled as they do not affect DSE), with the
same {s, n, p} settings mentioned there for P1, and with P3
instantiated in its ﬁrst variant and applied at different fractions
k of program points (Table I). As state exploration strategy for
S2E we use class-uniform path analysis [72] as it consistently
yielded the best results across all ROP and VM conﬁgurations:
its state grouping seems to work effectively for reducing bias
towards picking hot spots involved in path explosion, which
could be the case with P3 instances under other strategies.
1) Secret Finding: Column two and three of Table II sum-
marize the results for the differently obfuscated conﬁgurations:
for each class we report for how many functions S2E found the
secret, and the average time for successful attempts. For 2 of
the 72 non-obfuscated functions S2E failed also with a 3-hour
budget, likely due to excessively complex path constraints.
Coherently with insights from previous works [14], [23],
 0 0.5 1 1.5 2 2.5 3 3.5 4b-treesfannkuchfastafasta-reduxmandelbrotn-bodypidigitsregexrev-compsp-normRun-time slowdownROP0.05ROP0.25ROP0.50ROP0.75ROP1.00applying one or two layers of VM obfuscation does not prevent
S2E from solving the majority of the secrets (the same sets
of 61-62 functions over 72) even when using implicit VPC
loads6, with average overheads as high as 1.6x when applied
to either the inner or the outer VPC, and 2.46x when to both.
For 3VM implicit VPC loads are signiﬁcantly more effective
in slowing down S2E when applied on the innermost VPC
than on the outermost one, while when used at all the three
layers S2E found zero secrets within the 1-hour budget.
The fraction of successful attacks to ROPk is lower
than for VM conﬁgurations already for k = 0.05, except for
3VM-IMPall that however, as we see in §VII-C2, may bring
a destructive impact on program running time. The fraction
of ROPk-protected functions that S2E can crack decreases
with k: while we cannot compare average times computed for
different sets, individual ﬁgures reveal that S2E can crack only