我们可以重定义一下，输出想要的结果，简单如下：
```
# rpm -qa --last | head -n 2
```
上面的命令中，-n 代表数目，后面接一个常数值。该命令是打印2个最近安装的软件的列表。
### 9. 安装一个包之前，你如果要检查其依赖。你会怎么做？
**回答**：检查一个 rpm 包（XYZ.rpm）的依赖，我们可以使用选项 -q（查询包），-p（指定包名）和 -R（查询/列出该包依赖的包，嗯，就是依赖）。
```
# rpm -qpR gedit-3.16.1-1.fc22.i686.rpm 
/bin/sh
/usr/bin/env
glib2(x86-32) >= 2.40.0
gsettings-desktop-schemas
gtk3(x86-32) >= 3.16
gtksourceview3(x86-32) >= 3.16
gvfs
libX11.so.6
...
```
### 10. rpm 是不是一个前端的包管理工具呢？
**回答**：**不是！**rpm 是一个后端管理工具，适用于基于 Linux 发行版的 RPM （此处指 Redhat Package Management）。
[YUM](http://www.tecmint.com/20-linux-yum-yellowdog-updater-modified-commands-for-package-mangement/)，全称 Yellowdog Updater Modified，是一个 RPM 的前端工具。YUM 命令自动完成所有工作，包括解决依赖和其他一切事务。
最近，[DNF](/article-5718-1.html)（YUM命令升级版）在Fedora 22发行版中取代了 YUM。尽管 YUM 仍然可以在 RHEL 和 CentOS 平台使用，我们也可以安装 dnf，与 YUM 命令共存使用。据说 DNF 较于 YUM 有很多提高。
知道更多总是好的，保持自我更新。现在我们移步到前端部分来谈谈。
### 11. 你如何列出一个系统上面所有可用的仓库列表。
**回答**：简单地使用下面的命令，我们就可以列出一个系统上所有可用的仓库列表。
```
# yum repolist
或
# dnf repolist
Last metadata expiration check performed 0:30:03 ago on Mon Jun 22 16:50:00 2015.
repo id       repo name                      status
*fedora       Fedora 22 - x86_64             44,762
ozonos        Repository for Ozon OS         61
*updates      Fedora 22 - x86_64 - Updates   
```
上面的命令仅会列出可用的仓库。如果你需要列出所有的仓库，不管可用与否，可以这样做。
```
# yum repolist all
或
# dnf repolist all
Last metadata expiration check performed 0:29:45 ago on Mon Jun 22 16:50:00 2015.
repo id           repo name                       status
*fedora           Fedora 22 - x86_64              enabled: 44,762
fedora-debuginfo  Fedora 22 - x86_64 - Debug      disabled
fedora-source     Fedora 22 - Source              disabled
ozonos            Repository for Ozon OS          enabled:     61
*updates          Fedora 22 - x86_64 - Updates    enabled:  5,018
updates-debuginfo Fedora 22 - x86_64 - Updates - Debug
```
### 12. 你如何列出一个系统上所有可用并且安装了的包？
**回答**：列出一个系统上所有可用的包，我们可以这样做：
```
# yum list available
或
# dnf list available
ast metadata expiration check performed 0:34:09 ago on Mon Jun 22 16:50:00 2015.
Available Packages
0ad.x86_64                 0.0.18-1.fc22                   fedora 
0ad-data.noarch            0.0.18-1.fc22                   fedora 
0install.x86_64            2.6.1-2.fc21                    fedora 
0xFFFF.x86_64              0.3.9-11.fc22                   fedora 
2048-cli.x86_64            0.9-4.git20141214.723738c.fc22  fedora 
2048-cli-nocurses.x86_64   0.9-4.git20141214.723738c.fc22  fedora 
....
```
而列出一个系统上所有已安装的包，我们可以这样做。
```
# yum list installed
或
# dnf list installed
Last metadata expiration check performed 0:34:30 ago on Mon Jun 22 16:50:00 2015.
Installed Packages
GeoIP.x86_64                    1.6.5-1.fc22       @System
GeoIP-GeoLite-data.noarch       2015.05-1.fc22     @System
NetworkManager.x86_64           1:1.0.2-1.fc22     @System
NetworkManager-libnm.x86_64     1:1.0.2-1.fc22     @System
aajohan-comfortaa-fonts.noarch  2.004-4.fc22       @System
....
```
而要同时满足两个要求的时候，我们可以这样做。
```
# yum list
或
# dnf list
Last metadata expiration check performed 0:32:56 ago on Mon Jun 22 16:50:00 2015.
Installed Packages
GeoIP.x86_64                    1.6.5-1.fc22       @System
GeoIP-GeoLite-data.noarch       2015.05-1.fc22     @System
NetworkManager.x86_64           1:1.0.2-1.fc22     @System
NetworkManager-libnm.x86_64     1:1.0.2-1.fc22     @System
aajohan-comfortaa-fonts.noarch  2.004-4.fc22       @System
acl.x86_64                      2.2.52-7.fc22      @System
....
```
### 13. 你会怎么在一个系统上面使用 YUM 或 DNF 分别安装和升级一个包与一组包？
**回答**：安装一个包（假设是 nano），我们可以这样做，
```
  # yum install nano
```
而安装一组包（假设是 Haskell），我们可以这样做，
```
  # yum groupinstall 'haskell'
```
升级一个包（还是 nano），我们可以这样做，
```
  # yum update nano
```
而为了升级一组包（还是 haskell），我们可以这样做，
```
# yum groupupdate 'haskell'
```
### 14. 你会如何同步一个系统上面的所有安装软件到稳定发行版？
**回答**：我们可以一个系统上（假设是 CentOS 或者 Fedora）的所有包到稳定发行版，如下，
```
 # yum distro-sync      [在 CentOS/ RHEL]
 或
 # dnf distro-sync      [在 Fedora 20之后版本]
```
似乎来面试之前你做了相当不多的功课，很好！在进一步交谈前，我还想问一两个问题。
### 15. 你对 YUM 本地仓库熟悉吗？你尝试过建立一个本地 YUM 仓库吗？让我们简单看看你会怎么建立一个本地 YUM 仓库。
**回答**：首先，感谢你的夸奖。回到问题，我必须承认我对本地 YUM 仓库十分熟悉，并且在我的本地主机上也部署过，作为测试用。
1、 为了建立本地 YUM 仓库，我们需要安装下面三个包：
```
# yum install deltarpm  python-deltarpm  createrepo
```
2、 新建一个目录(假设 /home/$USER/rpm)，然后复制 RedHat/CentOS DVD 上的 RPM 包到这个文件夹下
```
# mkdir /home/$USER/rpm
# cp /path/to/rpm/on/DVD/*.rpm /home/$USER/rpm
```
3、 新建基本的库头文件如下。
```
# createrepo -v /home/$USER/rpm
```
4、 在路径 /etc/yum.repo.d 下创建一个 .repo 文件（如 abc.repo):
```
cd /etc/yum.repos.d && cat 
作者：[Avishek Kumar](http://www.tecmint.com/author/avishek/) 译者：[wi-cuckoo](https://github.com/wi-cuckoo) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](https://linux.cn/) 荣誉推出