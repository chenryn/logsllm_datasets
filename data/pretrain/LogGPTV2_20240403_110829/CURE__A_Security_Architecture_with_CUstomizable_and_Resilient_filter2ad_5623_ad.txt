For microbenchmarks (Table 3), we measured important key
aspects individually: setting up and tearing down an enclave,
context switching with the OS, dynamic memory allocation,
and communication via shared memory. We implement an
application which performs the required tasks (without any
additional logic) and run it as a normal Linux process, a user-
space enclave and a kernel-space enclave (single core). The
enclave setup is triggered by a host app in Linux which is the
only purpose of the app. The enclave binary sizes therefore
mainly correspond to the overhead produced by the enclave
types, i.e., 10KB for the user-space enclave and around 3MB
for the kernel-space enclave.
For the enclave setup, our results show that most of the
time (91.3% for user-space, 52.1% for kernel-space enclaves)
is spent on binary veriﬁcation. The Others measurement
USENIX Association
30th USENIX Security Symposium    1085
1086    30th USENIX Security Symposium
USENIX Association
Benchmark
rv8.aes
rv8.miniz
rv8.norx
rv8.primes
rv8.qsort
rv8.dhrystone
rv8.bigint
CoreMark
GeoMean
Cycles # for 16/16
ways (baseline)
29,754,631,670
42,040,536,353
30,899,386,564
21,731,621,683
24,355,792,115
19,865,586,529
65,512,466,917
394,664,199
-
Cycles # for 1/16
ways (worst-case)
32,175,733,155
45,063,752,315
32,702,249,193
21,770,731,965
25,280,228,818
20,289,555,571
71,487,944,568
402,293,814
-
Overhead
(+%)
8.1%
7.2%
5.8%
0.18%
3.8%
2.1%
9.1%
1.9%
3.09%
Table 5: Performance impact of L2 cache strict way-based par-
titioning for kernel-space enclaves on different benchmarks.
that the kernel-space enclave has a higher performance impact
on the OS than the user-space enclave. Based on these results,
we demonstrate that CURE also fulﬁlls FR.4 and achieves a
moderate performance overhead.
L2 cache partitioning. We evaluate the performance impact
of partitioning the L2 cache (CP-STRICT mode) for kernel-
space enclaves and show our results in Table 5. For our
cycle-accurate experiments, we conﬁgure the core with 64KB
8-way set-associative L1 data and instructions caches and
2048KB 16-way set-associative shared L2 cache. The im-
pact of way-based cache partitioning on performance is very
application-dependent (besides the caches conﬁguration and
caches and main memory access latencies), as demonstrated
by our experiments where the performance overhead ranges
from a little under 0.2%, as for the prime benchmark, to a
little over 9% for the bigint benchmark, for example. We
measure a geometric mean of 3.09%. We note that the over-
heads reported are performance hits where the baseline is a
best-case scenario where the only workload utilizing the cache
resources (all 16 ways of the L2 cache) is the kernel-space
enclave under test. Furthermore, we observe that performance
signiﬁcantly improves once more than 1 way is allocated per
enclave, which is the likely scenario for enclaves that run
applications with larger working sets and can beneﬁt more
from increased L2 cache resources.
9 Related Work
The existing works mostly related to CURE are TEE archi-
tectures which focus on modern high-performance computer
systems. In contrast to capability systems or memory tagging
extensions [30, 82, 88, 95, 100], TEE architectures protect
sensitive services in security contexts (enclaves) against priv-
ileged software adversaries. We do not further discuss TEE
architectures focusing on embedded systems [8, 47, 66, 98].
We compare CURE to other TEE architectures in Table 6.
All presented architectures provide a single type of enclave
which, on an abstract level, resemble either the user-space or
kernel-space enclaves provided by CURE.
Intel SGX [64] offers user-space enclaves on Intel proces-
sors. The untrusted OS provides memory management and
other OS services, e.g. exception handling, to the enclaves.
SGX does not protect against cache side-channel [11, 50] and
controlled side-channel attacks [91, 92, 101]. Many exten-
sions to SGX were proposed in order to mitigate side-channel
attacks [1, 2, 7, 15, 69, 79], however, these solutions are all
ad-hoc approaches that do not ﬁx the underlying design short-
comings of SGX, but instead leverage costly data-oblivious
algorithms [1, 2, 7], or exploit not commonly available hard-
ware in an unintended way [15, 79].
Sanctum [22], which also provides user-space enclaves, ad-
dresses both, cache side-channels through page coloring, and
controlled side-channels by storing the enclave page tables in
the enclave memory, like CURE. However, page coloring is
not practical as it inﬂuences the whole OS memory layout and
cannot be efﬁciently changed at run time. CURE’s cache par-
titioning instead allows dynamic assignment of cache ways,
and also mechanisms to mitigate interrupt-based side-channel
attacks. Sanctum and SGX only provide user-space enclaves
which are inherently limited as they cannot provide secure
I/O, but only protect from simple DMA attacks.
Similar to SGX, AMD SEV [38], which isolates complete
VMs in the form of kernel-space enclaves, does not consider
any side-channel attacks. VM data in the CPU cache is pro-
tected by an access control mechanism relying on Address
Space Identiﬁers which, however, does not protect against
cache side-channel attacks. As the memory management and
I/O services are provided by the untrusted hypervisor, SEV
is also vulnerable to controlled side-channel attacks [65] and
cannot provide secure peripheral binding [51].
ARM TrustZone [3] separates the system into normal and
secure world, a single kernel-space enclave which does not
rely on the OS and thus, is protected from controlled side-
channel attacks. TrustZone does not provide cache side-
channels protection, only by using additional hardware [106].
Further, TrustZone’s major design shortcoming is provid-
ing only a single enclave, thus, sensitive services cannot be
strongly isolated with TrustZone, hence, access to TrustZone
is highly limited in practice by device vendors. Extensions
building upon TrustZone mostly tried to enable multi-enclave
support for TrustZone [10, 18, 33, 85] with workarounds that
either rely on ARM IP [10], block the hypervisor [18, 33], or
massively impact performance [85]. Since multiple enclaves
were not considered in the TrustZone design from the begin-
ning, even the proposed extensions cannot provide binding
peripherals directly and exclusively to single enclaves.
Keystone [48] provides kernel-space enclaves on RISC-
V. Moreover, Keystone uses a cache-way based partition-
ing against cache side-channel attacks, comparable to CURE.
However, Keystone provides a coarse-grained cache ways
assignment per CPU core, whereas CURE assigns cache ways
to enclaves with freely conﬁgurable boundaries. Thus, the
Keystone design is limited to a single enclave type which
prevents Keystone from isolating the ﬁrmware from the ac-
tual TCB and demands adapting the sensitive services to the
USENIX Association
30th USENIX Security Symposium    1087
Name
SGX [64]
Sanctum [22]
SEV(-ES) [38]
TrustZone [3]
Keystone [48]
CURE
Extensions
User-Space Kernel-Space
Sub-Space
Side-Channel Resilience
Channel Resilience
Binding
Enclave Type
Dynamic Cache
Controlled Side-
Enclave-to-Peripheral
[1, 2, 7, 15, 69, 79]
-
-
[10, 18, 27, 32, 33, 57, 85, 106]
-
-
●∗
●∗
○∗
○∗
○∗
●∗
○∗
○∗
●∗
●∗
●∗
●∗
○∗
○∗
○∗
○∗
○∗
●∗
◐∗
◐∗
○∗
◐∗
●∗
●∗
◐∗
●∗
○∗
●∗
●∗
●∗
○∗
○∗
○∗
◐∗
○∗
●∗
Table 6: Comparison of major TEE architectures with respect to provided enclave types, dyn. cache-side channel and controlled-
side channel resilience, and enclave-to-peripheral binding, i.e., MMIO/DMA protection with exclusive enclave assignment.
● indicates full support, ◐ for support with limitations, ○ for no support, ∗ if resilience can only be achieved through extensions.
predeﬁned enclave. Moreover, in contrast to CURE, Keystone
does not support enclave-to-peripheral binding.
10 Conclusion
We presented CURE, a novel TEE architecture which provides
strongly-isolated enclaves that can be adapted to the function-
ality and security requirements of the sensitive services which
they protect. CURE offers different types of enclaves, rang-
ing from sub-space enclaves, over user-space enclaves, to
self-sustained kernel-space enclaves which can execute priv-
ileged software. CURE’s protection mechanisms are based
on new hardware security primitives on the system bus, the
shared cache and the CPU. We instantiate CURE on a RISC-V
system. The evaluation of our prototype indicates minimal
hardware overhead for the security primitives and a moderate
overall performance overhead.
Acknowledgments
We thank our anonymous reviewers for their valuable and
constructive feedback. This work was funded by the Deutsche
Forschungsgemeinschaft (DFG) – SFB 1119 – 236615297.
Moreover, this project has received funding from Huawei
within the OpenS3 lab.
References
[1] A. Ahmad, B. Joe, Y. Xiao, Y. Zhang, I. Shin, and B. Lee. Obfuscuro:
A commodity obfuscation engine on intel sgx. In NDSS, 2019.
[2] A. Ahmad, K. Kim, M. I. Sarfaraz, and B. Lee. Obliviate: A data
oblivious ﬁlesystem for intel sgx. In NDSS, 2018.
[3] ARM Limited.
Security technology: building a secure system
using TrustZone technology.
http://infocenter.arm.com/
help/topic/com.arm.doc.prd29-genc-009492c/PRD29-GENC-
009492C_trustzone_security_whitepaper.pdf, 2008.
[4] K. Asanovic, R. Avizienis, J. Bachrach, S. Beamer, et al. The rocket
chip generator. EECS Department, University of California, Berkeley,
Tech. Rep. UCB/EECS-2016-17, 2016.
[5] A. Baumann, M. Peinado, and G. Hunt. Shielding applications from
an untrusted cloud with haven. TOCS, 33(3):1–26, 2015.
[6] I. Biehl, B. Meyer, and V. Müller. Differential fault attacks on elliptic
curve cryptosystems. In CRYPTO, pages 131–146. Springer, 2000.
[7] F. Brasser, S. Capkun, A. Dmitrienko, T. Frassetto, K. Kostiainen,
and A. Sadeghi. Dr. sgx: automated and adjustable side-channel
protection for sgx using data location randomization.
In ACSAC,
pages 788–800, 2019.
[8] F. Brasser, B. El Mahjoub, A. Sadeghi, C. Wachsmann, and P. Koeberl.
Tytan: tiny trust anchor for tiny devices. In DAC, pages 1–6. IEEE,
2015.
[9] F. Brasser, T. Frassetto, K. Riedhammer, A. Sadeghi, T. Schneider,
and C. Weinert. Voiceguard: Secure and private speech processing.
In Interspeech, pages 1303–1307, 2018.
[10] F. Brasser, D. Gens, P. Jauernig, A. Sadeghi, and E. Stapf. Sanctuary:
Arming trustzone with user-space enclaves. In NDSS, 2019.
[11] F. Brasser, U. Müller, A. Dmitrienko, K. Kostiainen, S. Capkun, and
A. Sadeghi. Software grand exposure: Sgx cache attacks are practical.
In WOOT, 2017.
[12] C. Canella, D. Genkin, L. Giner, D. Gruss, et al. Fallout: Leaking
data on meltdown-resistant cpus. In CCS, pages 769–784, 2019.
[13] S. Checkoway and H. Shacham. Iago attacks: why the system call
api is a bad untrusted rpc interface. In ASPLOS, volume 13, pages
253–264, 2013.
[14] G. Chen, S. Chen, Y. Xiao, Y. Zhang, Z. Lin, and T. H. Lai. Sgxpectre:
Stealing intel secrets from sgx enclaves via speculative execution. In
EuroS&P, pages 142–157. IEEE, 2019.
[15] S. Chen, X. Zhang, M. K. Reiter, and Y. Zhang. Detecting privileged
side-channel attacks in shielded execution with déjá vu. In Asia CCS,
pages 7–18. ACM, 2017.
[16] H. D. Chirammal, P. Mukhedkar, and A. Vettathu. Mastering KVM
virtualization. Packt Publishing Ltd, 2016.
[17] D. Chisnall. The deﬁnitive guide to the xen hypervisor. Pearson
Education, 2008.
[18] Y. Cho, J. Shin, D. Kwon, M. Ham, Y. Kim, and Y. Paek. Hardware-
assisted on-demand hypervisor activation for efﬁcient security critical
code execution on mobile devices. In USENIX ATC, pages 565–578,
2016.