-   现在,一个与其他版本冲突的软件包可以被设置为使用替代选项的单个版本,以便可以相互安装单个软件包的多个版本。
-   如果安装的软件包列出另一个软件包已过时，则不会安装第二个软件包。
-   过时的规则现在包括所有匹配的软件包,而不考虑其它属性,如架构。
-   依赖项计算不再考虑没有安装的文件或已被替换的文件，例如
    `--nodocs`{.literal}、`--noconfig`{.literal} 或 `--force`{.literal}
    选项。
-   当重建一个崩溃的（`DB_RUNRECOVER`{.literal}）RPM Package Manager
    数据库时，不再需要手动执行 `rm -f /var/lib/rpm/__db.`{.literal}。
-   不再支持通过 OpenPGP 3 创建的公钥。
-   `--info`{.literal}
    选项现在每行输出单独的标签值对，以提高人类可读性。任何依赖之前
    `--info`{.literal} 格式的脚本都需要被重写。
-   现在，spec 解析程序更为严格且更为准确，因此一些之前被接受的 spec
    文件可能无法解析或会出现警告。
-   `%license`{.literal} 现在可以用来将 spec 文件的 `%files`{.literal}
    部分中的文件标记为必需安装的许可证，即使指定了 `--nodocs`{.literal}
    也是如此。
-   版本比较现在支持 dpkg 风格的 `~`{.literal}
    操作符以便更好地处理预发布软件。例如： `foo-2.0~beta1`{.literal}
    被视为比 `foo-2.0`{.literal} 旧,使用 Release
    字段删除对操作的操作,以处理这些常见的上游版本实践。
-   在过滤中构建的自动依赖性生成器已被改写为一个可扩展的、可定制的基于规则的系统。
:::
这个版本还包括以下改进：
::: itemizedlist
-   现在,可以查询软件包(`INSTFILENAMES`{.literal})安装的文件、到文件(`FILENLINKS`{.literal})、软件包版本控制系统详情(`VCS`{.literal})和格式化依赖字符串快捷键（`PROVIDENEVRS`{.literal}、`REQUIRENEVRS`{.literal}、`CONFLICTNEVRS`{.literal}、`OBSOLETENEVRS`{.literal}）的硬链接数。
-   提供了很多新命令，其中包括：
    ::: itemizedlist
    -   `rpmkeys`{.literal}
    -   `rpmdb`{.literal}
    -   `rpmspec`{.literal}
    -   `rpmsign`{.literal}
    :::
-   RPM Package Manager
    现在包含多个新的参数用于脚本，以启用运行时的宏扩展或者运行时查询格式扩展。
-   现在,可以使用 `Requires(pretrans)`{.literal} 和
    `Requires(posttrans)`{.literal} 正确显示预传输脚本和转换后的
    scriptlet 依赖项。
-   RPM Package Manager 现在包含 `OrderWithRequires`{.literal}
    标签,以便用户提供额外的排序信息。这个新标签使用与 Requires tag
    相同的语法,但不会生成依赖项。如果同一事务中有上述软件包,在计算事务顺序时,顺序提示会像
    `Requires`{.literal} 一样对待。
-   spec 文件中的行持续和宏扩展不再限制在指定长度。
-   RPM Package Manager 现在允许用户指定上游版本控制存储库信息。
-   RPM Package Manager 现在包含一个 `%autosetup`{.literal}
    宏，以帮助自动化应用补丁的过程。
:::
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-System_Management-New_Format_in_ifconfig}ifconfig 的新格式 {.title}
:::
在 Red Hat Enterprise Linux 7 中，已弃用的
[**[ifconfig]{.application}**]{.strong} 工具的输出格式已改变。解析
[**[ifconfig]{.application}**]{.strong}
输出的脚本可能会受到这些更改的影响，可能需要重写。
红帽建议您使用 [**[ip]{.application}**]{.strong}
实用程序及其子命令（`ip addr`{.literal}、`ip link`{.literal}）而不是弃用的
[**[ifconfig]{.application}**]{.strong} 工具。
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-System_Management-Changes_to_Control_Groups}控制组群更改 {.title}
:::
内核使用控制组群来对进程进行分组以进行系统资源管理。Red Hat Enterprise
Linux 7 对控制组群引进了大量更改。
::: itemizedlist
-   控制组现在挂载到 `/sys/fs/cgroup`{.literal} 而不是
    `/cgroup`{.literal}。
-   现在默认挂载一些文件系统。
-   `systemd`{.literal} 尚未完全支持从 `libcgroup`{.literal} 迁移到
    `systemd`{.literal} 的迁移。因此, `cgred`{.literal}
    服务应只用于将进程移动到不是由 `systemd`{.literal}
    管理的组中。`cgconfig.conf`{.literal} 文件应该用来为不是由
    `systemd`{.literal}
    管理的文件系统或者文件控制器配置控制组群层次结构。
:::
有关这些更改的详情，请参考 [*[Red Hat Enterprise Linux 7 Resource
Management
Guide]{.citetitle}*]{.emphasis}（[http://access.redhat.com/site/documentation/Red_Hat_Enterprise_Linux/](http://access.redhat.com/site/documentation/Red_Hat_Enterprise_Linux/){.link}）。
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-System_Management-Changes_to_Kernel_Crash_Collection_Kdump}对 Kernel Crash Collection(Kdump)的更改 {.title}
:::
内核崩溃收集工具（[**[kdump]{.application}**]{.strong}）以前使用自定义
`mkdumprd`{.literal} 脚本为 [**[kdump]{.application}**]{.strong}
捕获内核生成初始 RAMDisk（`initrd`{.literal}）。在 Red Hat Enterprise
Linux 7 中,初始 RAMDisk 使用 dracut 生成,从而更轻松地维护生成初始
RAMDisk 的过程。
因此,对 [**[kdump]{.application}**]{.strong}
及其配置文件进行了以下更改。
::: itemizedlist
-   不再支持 `net`{.literal} 指令。用户现在必须明确定义 `ssh`{.literal}
    或 `nfs`{.literal}。
-   不再支持 `blacklist`{.literal} 选项。相反，用户可以在捕获内核的
    `/etc/sysconfig/kdump`{.literal} 文件中使用参数指定
    `rd.driver.blacklist`{.literal}。
-   默认 `mount_root_run_init`{.literal}
    操作（在转储到预期目标失败时执行）已被 `dump_to_rootfs`{.literal}
    操作替代。这个新操作会挂载 root 文件系统,并立即将 vmcore
    保存到它,而不是挂载真实 root 文件系统,并在 `kdump`{.literal}
    服务启动时尝试保存 vmcore。
-   新的指令 `dracut_args`{.literal} 允许您在配置 kdump 时指定附加
    dracut 参数。
-   [**[kdump]{.application}**]{.strong} 不再包含
    `debug_mem_level`{.literal} 选项。这个功能已移至
    dracut。用户可以通过在捕获内核的 `/etc/sysconfig/kump`{.literal}
    文件中指定 `rd.memdebug`{.literal} 作为参数来达到相同的功能。
-   `options`{.literal} 指令之前用来在初始 ram
    文件系统(`initramfs`{.literal})中包含特定于内核模块的参数。Red Hat
    Enterprise Linux 7 不支持这个方法。用户可以在捕获内核的
    `/etc/sysconfig/kdump`{.literal} 文件中指定相关参数。
-   因为 dracut 包含
    `udev`{.literal}，这会处理之前需要这些参数的用例，所以不再需要
    `link_delay`{.literal} 和 `disk_timeout`{.literal} 参数。
-   在启动 [**[kdump]{.application}**]{.strong} 服务并创建初始 RAMDdisk
    镜像前，所有文件系统后端转储目标都必须挂载到崩溃的内核中。您可以将目标添加到
    `/etc/fstab`{.literal}，以便在引导时自动挂载这些目标。
-   如果您指定了路径,但没有指定目标,且您指定的路径中的任何目录都是独立设备的挂载点,则
    vmcore
    保存到路径中,而不是在该路径上挂载设备。因此,当系统重启且设备挂载时,
    vmcore 无法访问,因为该设备已挂载到其位置顶部。Red Hat Enterprise
    Linux 7 现在会在没有指定目标的情况下指定一个路径时警告这个问题。
:::
有关 [**[kdump]{.application}**]{.strong} 的详情，请参阅 [*[Red Hat
Enterprise Linux 7 Kernel Crash
转储指南]{.citetitle}*]{.emphasis}（[http://access.redhat.com/site/documentation/Red_Hat_Enterprise_Linux/](http://access.redhat.com/site/documentation/Red_Hat_Enterprise_Linux/){.link}）
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-System_Management-Changes-in-usermod-g-behavior}usermod 行为的更改 {.title}
:::
在 Red Hat Enterprise Linux 6 中, `usermod`{.literal} 命令的
`-g`{.literal} 选项不会操作组群所有权。从 Red Hat Enterprise Linux 7.0
到 Red Hat Enterprise Linux 7.2，`-g`{.literal} 选项修改了
`/home`{.literal} 目录树中文件的组所有权。从 Red Hat Enterprise Linux
7.3 开始，`usermod`{.literal} 只有在主目录用户 ID 与要修改的用户 ID
匹配时，才会更改用户目录中文件的组群所有权。
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-System_Management-Changes-to-system-accounts}系统帐户的更改 {.title}
:::
Red Hat Enterprise Linux 7
发行版本中更改了系统用户、普通用户和组群的默认 ID 范围,如下所示：
::: table
[]{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#tbl-ID-layout}
**表 2.4. ID 布局**
::: table-contents
  范围       Red Hat Enterprise Linux 6   Red Hat Enterprise Linux 7
  ---------- ---------------------------- ----------------------------
  系统帐户   0-499                        0-999
  用户帐户   500-60,000                   1,000-60,000
:::
:::
因为这个变化，当迁移到 Red Hat Enterprise Linux 7 时，如果有用户的 UID
和 GID 在 500 到 999 之间，则可能会造成问题。可在
`/etc/login.defs`{.literal} 文件中手动更改默认的 UID 和 GID 范围。
:::
:::
::: section
::: titlepage
# []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-File_System_Formats}文件系统格式 {.title}
:::
本部分提供了在 Red Hat Enterprise Linux 6 和 Red Hat Enterprise Linux 7
间对文件系统格式支持的更改概述。
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-File_System_Formats-New_Default_File_System_XFS}新默认文件系统： XFS {.title}
:::
XFS
是一个高性能，可扩展的文件系统，它通常会在负载要求高的应用程序中使用。在
Red Hat Enterprise Linux 7 中, XFS 是默认文件系统,在所有构架中都被支持。
ext4（无法扩展到 XFS
相同的大小）在所有构架中仍被完全支持，并将继续会有活跃的开发和支持。
红帽对 XFS 的支持限制详情，请参考
[https://access.redhat.com/site/articles/rhel-limits](https://access.redhat.com/site/articles/rhel-limits){.link}。
有关使用和管理 XFS 文件系统的详情,请查看 [*[Red Hat Enterprise Linux 7
存储管理指南]{.citetitle}*]{.emphasis}（[http://access.redhat.com/site/documentation/Red_Hat_Enterprise_Linux/](http://access.redhat.com/site/documentation/Red_Hat_Enterprise_Linux/){.link}）。
::: section
::: titlepage
### []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-New_Default_File_System_XFS-Changes_to_mount_options}对挂载选项的更改 {.title}
:::
与 ext3 和 ext4 不同, XFS 文件系统默认启用 `user_xattr`{.literal} 和
`acl`{.literal} 挂载选项。这意味着,如果您在命令行或者
`/etc/fstab`{.literal} 中包含了这些选项,则会遇到类似如下的错误。
``` literallayout
$ mount -o acl /dev/loop0 test
mount: wrong fs type, bad option, bad superblock on /dev/loop0,
    missing codepage or helper program, or other error
    In some cases useful info is found in syslog - try
    dmesg | tail or so.
```
ext3 和 ext4 文件系统默认不启用这些属性,在使用 `mount`{.literal}
命令或者使用 `/etc/fstab`{.literal} 挂载它们时接受这些选项。
:::
:::