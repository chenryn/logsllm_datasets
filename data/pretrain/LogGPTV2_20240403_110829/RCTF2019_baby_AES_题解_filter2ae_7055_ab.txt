    def main():
        K = b"x01x23x45x67x89xabxcdxefxfexdcxbax98x76x54x32x10"
        Ke = init(K)
        backend = default_backend()
        key = os.urandom(16)
        iv = encrypt(key, Ke)
        cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)
        decryptor = cipher.decryptor()
        try:
            print("Input a hexstr to decrypt:")
            data = sys.stdin.readline().strip()
            ciphertext = binascii.unhexlify(data)
            plaintext = decryptor.update(ciphertext) + decryptor.finalize()
            print("Decrypted result:")
            print(binascii.hexlify(plaintext).decode())
        except Exception as e:
            pass
        with open("flag", 'rb') as f:
            flag = f.read()
            padder = padding.PKCS7(128).padder()
            flag_padded = padder.update(flag) + padder.finalize()
            encryptor = cipher.encryptor()
            flag_encrypted = encryptor.update(flag_padded) + encryptor.finalize()
            print("Your encrypted flag is:")
            print(binascii.hexlify(flag_encrypted).decode())
    if __name__ == '__main__':
        main()
## 题目分析
题目流程如下：
  1. 每次连接随机生成 `key` 并使用自己实现的加密函数加密得到 `iv`;
  2. 使用上面的 `key` ,`iv` 生成AES对象，加密模式使用 `CBC`；
  3. 接受一个用户输入，返回AES解密结果；
  4. 提供 `flag` 加密的结果。
也就是说，只要我们得到 `iv` 和 `key`，即可得到 `flag`。
其中获取 `iv` 是很常见的基本操作，所以这个题的主要工作量在于分析 `encrypt` 函数。
目测 `encrypt` 函数和AES查表实现流程相似，当然如果之前不了解AES查表实现通过题目名也能找到。
## 解题过程
###  获取iv
获取 `iv` 是一个相对简单的工作，注意到对 `CBC` 模式，有：
  * m[0] = dec(c[0]) xor iv
  * m[i] = dec(c[i]) xor c[i-1]
那么我们可以构造:
  * c[0] = c[1] = cipher
则:
  * m[0] = dec(cipher) xor iv
  * m[1] = dec(cipher) xor cipher
可以推出：
  * iv = cipher xor m[1] xor m[0]
代码实现：
    from pwn import *
    from Crypto.Util.number import *
    r = remote("207.148.68.109",20002)
    r.recv()
    cipher = "00"*16
    r.sendline(cipher*2)
    r.recv()
    # Out :Decrypted result: d34c206fb1906727f10155a953d5978d9d876914c0ab817a736ab80663f34e27
    #      Your encrypted flag is:
    #      7f015db80352a325cacdac4bb25d8ac9494e468fb0aa514d6c916df1b8a0fafe46e9c3aad6fca5f109c414f2f99ffb81
    m = "d34c206fb1906727f10155a953d5978d9d876914c0ab817a736ab80663f34e27"
    m0,m1 = m[:32],m[32:]
    iv = long_to_bytes(bytes_to_long(cipher.decode('hex')) ^ bytes_to_long(m1.decode('hex')) ^ bytes_to_long(m0.decode('hex')))
    # In : iv
    # Out: 'NxcbI{q;xe6]x82kxedxaf0&xd9xaa'
###  分析加密函数
上一步中我们已经得到了 `iv` 而 `key = decrypt(iv)`，因此我们需要分析加密函数。
**AES查表实现:**
> 因为AES的临界时间函数(字节代换, ShiftRow,
> MixColumn)都作用于单个字节，最直接的AES实现方式比较适合8位处理器，而在现代32位或64位处理器中这种实现方式是非常低效的。
>
>
> AES查表实现由AES(Rijndael)的设计者提出，其核心思想是创建四个256*32bits的查找表，通过16次查表完成每轮操作，在消耗一定内存的情况下有效提高AES吞吐量(相比直接的软件实现)。
观察题目给的函数特征，发现和AES查表实现流程相似。想起以前读过一个查表实现AES的源码[1](https://github.com/ricmoo/pyAES)，
对比后发现过程基本一致。但是代码中的Sbox，Tbox均不同。