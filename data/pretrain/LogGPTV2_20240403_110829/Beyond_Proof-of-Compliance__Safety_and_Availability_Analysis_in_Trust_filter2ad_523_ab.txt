The sub-language LRT can be viewed as a simpliﬁed yet
expressively equivalent version of SDSI. SDSI allows long
linked names, which, as observed in [16], can be broken up
by introducing new role names and statements. With the ex-
ception of thresholds, the delegation relationships (though,
not the s-expression-based representation of permission) in
SPKI’s 5-tuples, can be captured by using type-1 statements
and a restricted form of type-2 statements. A SPKI 5-tuple
in which A delegates a permission r to B can be represented
as A.r ←− B. A SPKI 5-tuple in which A delegates r to B
and allows B to further delegate r can be represented as two
SRT statements: A.r ←− B and A.r ←− B.r. Threshold
structures in SPKI can be implemented by intersections, as
noted in [12]. Similar analogies can be drawn for KeyNote.
Although SRT is limited in that role names are con-
stants, extending role names in SRT to have internal struc-
tures does not change the nature of security analysis. As we
will see, security analysis is mostly affected by the structure
of the delegation relationships. We believe that many re-
sults and techniques developed for SRT can be carried over
to more expressive languages, e.g., RT1 [15], which adds
to RT0 the ability to have parameterized roles, RT C
1 [13],
which further adds constraints to RT1, and, to a certain ex-
tent, SPKI/SDSI and KeyNote.
The security analysis problem in SRT is quite nontriv-
ial. Semantics and inferencing of SDSI, which is essen-
tially the sub-language LRT , has been extensively stud-
ied [1, 4, 8, 10, 12, 16]. Some of these works only consider
answering queries in a ﬁxed state. Some considered univer-
sal queries where no restriction is placed on how the state
may grow [1, 8]. The most interesting case of security anal-
ysis, i.e., answering queries with restrictions placed on state
changes, has not been studied in these previous works.
2.2 Semantics of the TM Language
We give a formal characterization of the meaning of a
set P of policy statements by translating each policy state-
(Datalog is a restricted form
ment into a datalog clause.
of logic programming (LP) with variables, predicates, and
constants, but without function symbols.) We call the re-
sulting program the semantic program of P. We use the LP-
based approach to deﬁne semantics because we will formu-
late safety computation rules by using a similar approach,
and the LP-based approach generalizes easily to the case in
which role names contain parameters (see [15]).
Deﬁnition 2 (Semantic Program) Given a set P of policy
statements, the semantic program, SP(P), of P, has one
ternary predicate m. Intuitively, m(A, r, D) represents that
D is a member of the role A.r. SP(P) is constructed as
follows. (Symbols that start with “?” represent logical vari-
ables.)
For each A.r←− D in P, add
m(A, r, D)
For each A.r←− B.r1 in P, add
m(A, r, ?Z) :− m(B, r1, ?Z)
For each A.r←− A.r1.r2 in P, add
m(A, r, ?Z) :− m(A, r1, ?Y ), m(?Y, r2, ?Z)
(m3)
For each A.r←− B1.r1 ∩ B2.r2 in P, add
m(A, r, ?Z) :− m(B1, r1, ?Z), m(B2, r2, ?Z) (m4)
A datalog program is a set of datalog clauses. Given a
datalog program, LP, its semantics can be deﬁned through
several equivalent approaches. The model-theoretic ap-
proach views LP as a set of ﬁrst-order sentences and uses
the minimal Herbrand model as the semantics. We write
SP(P) |= m(X, u, Z) when m(X, u, Z) is in the minimal
Herbrand model of SP(P). This semantics corresponds ex-
actly to the set-theoretic semantics of RT0 in [16].
(m1)
(m2)
We now summarize a standard ﬁxpoint characterization
of the minimal Herbrand model, which we will use in the
proofs in this paper. Given a datalog program LP, let
LP inst be the ground instantiation of LP using constants in
LP; the immediate consequence operator, TLP, is deﬁned
as follows. Given a set of ground logical atoms K, TLP(K)
consists of all logical atoms, a, such that a :− b1, . . . , bn ∈
LP inst, where n ≥ 0, and either n = 0 or bj ∈ K
for 1 ≤ j ≤ n. The least ﬁxpoint of TLP, denoted by
TLP↑ω, can be constructed as follows. Deﬁne TLP↑0= ∅
and TLP↑i+1= TLP(TLP↑i) for i ≥ 0. This deﬁnes an in-
creasing sequence of subsets of a ﬁnite set. Thus there exists
an N such that TLP(TLP↑N ) = TLP↑N. TLP↑N is easily
shown to be TLP↑ω, which is identical to the minimal Her-
brand model of LP [18]; therefore, SP(P) |= m(X, u, Z)
if and only if m(X, u, Z) ∈ TSP(P)↑ω.
It has been shown that the minimal Herbrand model of
LP can be computed in time linear in the size of LP inst [5].
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
4
If the total size of LP is M, then there are O(M) con-
stants in LP. Assuming that the number of variables in each
clause is bounded by a constant, v, the number of instances
of each clause is therefore O(M v), so the size of LP inst is
O(M v+1). Thus, the worst-case complexity of evaluating
SP(P) is O(|P|3), since |SP(P)| = O(|P|) and each rule
in SP(P) has at most two variables.
2.3 Queries
In this paper, we consider the following three forms of
query Q:
•
•
•
A.r (cid:20) {D1, . . . , Dn}
all
Form-1:
Intuitively,
the principals
D1, . . . , Dn are members of A.r.
Formally,
P (cid:1) A.r (cid:20) {D1, . . . , Dn} if and only if
{Z | SP(P) |= m(A, r, Z)} ⊇ {D1, . . . , Dn}.
this means
that
Form-2:
{D1, . . . , Dn} (cid:20) A.r
Intuitively, this means that the member set of A.r is
bounded by the given set of principals. Formally, P (cid:1)
A.r (cid:20) {D1, . . . , Dn} if and only if {D1, . . . , Dn} ⊇
{Z | SP(P) |= m(A, r, Z)}.
Form-3 (role inclusion):
X.u (cid:20) A.r
Intuitively, this means that all the members of A.r are
also members of X.u. Formally, P (cid:1) X.u (cid:20) A.r
if and only if {Z | SP(P) |= m(X, u, Z)} ⊇ {Z |
SP(P) |= m(A, r, Z)}.
Simple safety and simple availability queries are special
cases of form-1 queries; they have the form A.r (cid:20) {D}.
Simple safety queries are existential, and simple availability
queries are universal. Bounded safety queries are universal
form-2 queries. Containment queries are universal form-3
queries.
2.4 Restriction Rules on State Changes
Before discussing how we model restrictions on changes
in policy state, we consider one possible motivating sce-
nario. Suppose that the users within an organization control
certain principals, and that these principals delegate partial
control to principals outside the organization. By using se-
curity analysis, the organization can ensure that these dele-
gations do not violate desired security properties, which are
speciﬁed by a collection of security analysis queries. In this
usage of the analysis, roles deﬁned by principals within the
organization can be viewed as unchanging, since the anal-
ysis will be repeated before any future candidate change is
made to those roles. Roles deﬁned by principals outside the
organization, however, may change in arbitrary ways, since
they are beyond the organization’s control.
To model such control over roles, we use restriction rules
of the form R = (GR,SR), which consist of a pair of ﬁnite
sets of roles. (In the rest of the paper we drop the subscripts
from G and S, as R is clear from context.)
• Roles
in G are called growth-restricted (or g-
restricted); no policy statements deﬁning these roles
can be added. Roles not in G are called growth-
unrestricted (or g-unrestricted).
• Roles in S are called shrink-restricted (or s-restricted);
policy statements deﬁning these roles cannot be re-
moved. Roles not in S are called shrink-unrestricted
(or s-unrestricted).
One example of R is (∅,∅), under which every role is
g/s-unrestricted, i.e., both g-unrestricted and s-unrestricted.
Under this R, all three forms of queries have trivial an-
swers. Another example is R = (∅, Roles(P)), i.e., ev-
ery role may grow with out restriction, and no statement
deﬁning roles in Roles(P) can be removed. This models
the case of having incomplete knowledge of a ﬁxed policy
state. A third example, corresponding to the scenario dis-
cussed above, is R = (G,S), where G = S = {X.u |
X ∈ {X1, . . . , Xk}, u ∈ Names(P)}, i.e., X1, . . . , Xk
are trusted (controlled); therefore, every role X.u such that
X ∈ {X1, . . . , Xk} is restricted, all other roles are unre-
stricted. If a principal X does not appear in R, then for ev-
ery role name r, by deﬁnition X.r is g/s-unrestricted. This
models the fact that the roles of unknown principals may be
deﬁned arbitrarily.
We allow some roles controlled by one principal to be
g-restricted while other roles controlled by the same prin-
cipal to be g-unrestricted. This provides more ﬂexibility
than simply identifying principals as trusted and untrusted,
and permits one in practice to perform security analysis only
when changing certain roles. Similarly, we allow a role to be
both g-restricted and s-unrestricted, which has the effect of
making a safety check necessary when modifying the deﬁ-
nition of the role only if adding a new statement.
The above kinds of restrictions are static in the sense that
whether or not a state-change step is allowed by R does not
depend on the current state. A dynamic restriction could,
for instance, have B.r2 be g-restricted if B is a member of
A.r1, which depends on the current state. Security analy-
sis with dynamic restrictions is potentially interesting future
work.
2.5 An Example
Example 1 The system administrator of a company, SA,
controls access to some resource, which we abstractly de-
note by SA.access. The company policy is the following:
managers always have access to the resource, managers can
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
5
delegate the access to other principals, but only to employ-
ees of the company. HR is trusted for deﬁning employees
and managers. The state P consists of the following state-
ments:
SA.access ←− SA.manager
SA.access ←− SA.delegatedAccess ∩ HR.employee
SA.manager ←− HR.manager
SA.delegatedAccess ←− SA.manager.access
HR.employee ←− HR.manager
HR.employee ←− HR.programmer
HR.manager ←− Alice
HR.programmer ←− Bob
HR.programmer ←− Carl
Alice.access ←− Bob
Given the above P, Alice and Bob have access, Carl does
not. One possible restriction rule has G = { SA.access,
SA.manager, SA.delegatedAccess, HR.employee } and
S = { SA.access, SA.manager, SA.delegatedAccess,
HR.employee, HR.manager }. We now list some example
queries, together with the answers:
A simply safety query:
Is “SA.access (cid:20) {Eve}” possible? (Yes.)
A simple availability query:
Is “SA.access (cid:20) {Alice}” necessary? (Yes.)
A bounded safety query:
Is “{Alice, Bob} (cid:20) SA.access” necessary. (No.)
A containment query:
Is “HR.employee (cid:20) SA.access” necessary? (Yes.)
3 Answering Form-1 and Form-2 Queries
SRT and its sub-languages are all monotonic in the sense
that more statements will derive more role memberships
(i.e., logical atoms of the form m(A, r, D)). This follows
from the fact that the semantic program is a positive logic
program. Form-1 queries are monotonic; given a form-1
such that P ⊆ P(cid:2)
query Q, if P (cid:1) Q, then for every P(cid:2)
,
P(cid:2) (cid:1) Q. Form-2 queries are anti-monotonic; given a form-
2 query Q, if P (cid:1) Q, then for every P(cid:2) ⊆ P, P(cid:2) (cid:1) Q.
Intuitively, universal form-1 (simple availability) queries
and existential form-2 queries can be answered by consid-
ering the lower bound of role memberships. A role’s lower
bound is the set of principals that are members of the role
in every reachable state. Because R is static, there exists
a minimal state that is reachable from P and R, which is
obtained from P by removing all statements deﬁning s-
unrestricted roles. We denote this state by P|R. Clearly,
P|R is reachable; furthermore, P|R ⊆ P(cid:2)
for every reach-
able P(cid:2)
. Since SRT is monotonic, one can compute the
lower bound by computing the role memberships in P|R.
Similarly, existential form-1 (simple safety) queries and
universal form-2 (bounded safety) queries can be answered
by computing an “upper bound” of role memberships. The
upper bound of a role is the set of principals that could be-
come a member of the role in some reachable state.
In-
tuitively, such bounds can be computed by considering a
“maximal reachable state”. However, such a “state” is not
well-deﬁned since it would contain an inﬁnite set of policy
statements, and we only allow a state to contain a ﬁnite set
of policy statements. We will show that one can simulate
the “maximal reachable state” by a ﬁnite state and derive
correct answers.
3.1 The Lower Bound
Deﬁnition 3 (The Lower Bound Program) Given P and
R, the lower bound program for them, LB(P,R), is con-
structed as follows: