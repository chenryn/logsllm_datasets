       round:  14 f9 70 1a e3 5f e2 8c 44 0a df 4d 4e a9 c0 26
         mix:  c5 7e 1c 15 9a 9b d2 86 f0 5f 4b e0 98 c6 34 39
       shift:  b4 58 12 4c 68 b6 8a 01 4b 99 f8 2e 5f 15 55 4c
         sub:  b4 15 f8 01 68 58 55 2e 4b b6 12 4c 5f 99 8a 4c
       state:  c6 2f e1 09 f7 5e ed c3 cc 79 39 5d 84 f9 cf 5d
     Round 6:
       input:  c6 2f e1 09 f7 5e ed c3 cc 79 39 5d 84 f9 cf 5d
       round:  5e 39 0f 7d f7 a6 92 96 a7 55 3d c1 0a a3 1f 6b
         mix:  98 16 ee 74 00 f8 7f 55 6b 2c 04 9c 8e 5a d0 36
       shift:  e8 da b6 90 14 77 d4 65 3f f7 f5 e2 e7 47 dd 4f
         sub:  e8 47 f5 65 14 da dd e2 3f 77 b6 4f e7 f7 d4 90
       state:  c8 16 77 bc 9b 7a c9 3b 25 02 79 92 b0 26 19 96
     Round 5:
       input:  c8 16 77 bc 9b 7a c9 3b 25 02 79 92 b0 26 19 96
       round:  3c aa a3 e8 a9 9f 9d eb 50 f3 af 57 ad f6 22 aa
         mix:  f4 bc d4 54 32 e5 54 d0 75 f1 d6 c5 1d d0 3b 3c
       shift:  36 33 9d 50 f9 b5 39 26 9f 2c 09 2d c4 40 6d 23
         sub:  36 40 09 26 f9 33 6d 2d 9f b5 9d 23 c4 2c 39 50
       state:  24 72 40 23 69 66 b3 fa 6e d2 75 32 88 42 5b 6c
     Round 4:
       input:  24 72 40 23 69 66 b3 fa 6e d2 75 32 88 42 5b 6c
       round:  47 f7 f7 bc 95 35 3e 03 f9 6c 32 bc fd 05 8d fd
         mix:  63 85 b7 9f fc 53 8d f9 97 be 47 8e 75 47 d6 91
       shift:  2d 6d 7e f0 3f 33 e3 34 09 36 02 dd 5b fb 12 c7
         sub:  2d fb 02 34 3f 6d 12 dd 09 33 7e c7 5b 36 e3 f0
       state:  fa 63 6a 28 25 b3 39 c9 40 66 8a 31 57 24 4d 17
     Round 3:
       input:  fa 63 6a 28 25 b3 39 c9 40 66 8a 31 57 24 4d 17
       round:  b6 ff 74 4e d2 c2 c9 bf 6c 59 0c bf 04 69 bf 41
         mix:  4c 9c 1e 66 f7 71 f0 76 2c 3f 86 8e 53 4d f2 56
       shift:  3b d9 22 68 fc 74 fb 73 57 67 cb e0 c0 59 0e 2d
         sub:  3b 59 cb 73 fc d9 0e e0 57 74 22 2d c0 67 fb 68
       state:  49 15 59 8f 55 e5 d7 a0 da ca 94 fa 1f 0a 63 f7
    Round 2:
       input:  49 15 59 8f 55 e5 d7 a0 da ca 94 fa 1f 0a 63 f7
       round:  b6 92 cf 0b 64 3d bd f1 be 9b c5 00 68 30 b3 fe
         mix:  ff 87 96 84 31 d8 6a 51 64 51 51 fa 77 3a d0 09
       shift:  a7 be 1a 69 97 ad 73 9b d8 c9 ca 45 1f 61 8b 61
         sub:  a7 61 ca 9b 97 be 8b 45 d8 ad 1a 61 1f c9 73 69
       state:  89 d8 10 e8 85 5a ce 68 2d 18 43 d8 cb 12 8f e4
     Round 1:
       input:  89 d8 10 e8 85 5a ce 68 2d 18 43 d8 cb 12 8f e4
       round:  d6 aa 74 fd d2 af 72 fa da a6 78 f1 d6 ab 76 fe
         mix:  5f 72 64 15 57 f5 bc 92 f7 be 3b 29 1d b9 f9 1a
       shift:  63 53 e0 8c 09 60 e1 04 cd 70 b7 51 ba ca d0 e7
         sub:  63 ca b7 04 09 53 d0 51 cd 60 e0 e7 ba 70 e1 8c
       state:  00 10 20 30 40 50 60 70 80 90 a0 b0 c0 d0 e0 f0
     Round 0:
       input:  00 10 20 30 40 50 60 70 80 90 a0 b0 c0 d0 e0 f0
       round:  00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
       state:  00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff
    Output:
       plain:  00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff
**  
**
**算法设计思想**
**加密算法的一般设计准则**
混淆 (Confusion)
最大限度地复杂化密文、明文与密钥之间的关系，通常用非线性变换算法达到最大化的混淆。
扩散 (Diffusion)
明文或密钥每变动一位将最大化地影响密文中的位数，通常采用线性变换算法达到最大化的扩散。
**AES评判要求**
NIST在征集算法的时候就提出了几项硬性要求：
分组加密算法：支持128位分组大小，128/192/256位密钥
安全性不低于3DES，但实施与执行要比3DES的更高效
优化过的ANSI C的实现代码
KAT(Known-Answer tests)及MCT(Monte Carlo Tests)测试及验证
软件及硬件实现的便捷
可抵御已知攻击
**Rijndael设计思想**
安全性（Security）
算法足够强，抗攻击
经济性（Efficiency）
算法运算效率高
密钥捷变（Key Agility）
更改密钥所引入的损失尽量小，即最小消耗的密钥扩展算法
适应性 （Versatility）
适用于不同的CPU架构，软件或硬件平台的实现
设计简单（Simplicity）
轮函数的设计精简，只是多轮迭代
**S盒设计**
S盒是由一个有限域GF(256)上的乘法求逆并串联线性仿射变换所构造出来的，不是一个随意构造的简单查询表。因其运算复杂，众多的AES
软件及硬件实现直接使用了查找表(LUP, Look-up
table)，但查询表的方式并不适合所有场景，针对特定的硬件最小化面积设计需求，则要采用优化的组合逻辑以得到同价的S盒替换。
**  
**
**工作模式**
分组加密算法是按分组大小来进行加解密操作的，如DES算法的分组是64位，而AES是128位，但实际明文的长度一般要远大于分组大小，这样的情况如何处理呢？
这正是"mode of operation"即工作模式要解决的问题：明文数据流怎样按分组大小切分，数据不对齐的情况怎么处理等等。
早在1981年，DES算法公布之后，NIST在标准文献FIPS 81中公布了4种工作模式：
电子密码本：Electronic Code Book Mode (ECB)
密码分组链接：Cipher Block Chaining Mode (CBC)
密文反馈：Cipher Feedback Mode (CFB)
输出反馈：Output Feedback Mode (OFB)
2001年又针对AES加入了新的工作模式：
计数器模式：Counter Mode (CTR)
后来又陆续引入其它新的工作模式。在此仅介绍几种常用的：
**ECB：电子密码本模式**
ECB模式只是将明文按分组大小切分，然后用同样的密钥正常加密切分好的明文分组。
ECB的理想应用场景是短数据（如加密密钥）的加密。此模式的问题是无法隐藏原明文数据的模式，因为同样的明文分组加密得到的密文也是一样的。
举例来说明，下图为明文图片：
经ECB模式加密的图片：
图中也正好验证了AES的扩散效果：作为局部图案的叶子，其红颜色在加密后扩散到了整张图片上。
经CBC模式加密的图片：
**CBC：密码分组链接模式**
此模式是1976年由IBM所发明，引入了IV（初始化向量：Initialization
Vector）的概念。IV是长度为分组大小的一组随机，通常情况下不用保密，不过在大多数情况下，针对同一密钥不应多次使用同一组IV。
CBC要求第一个分组的明文在加密运算前先与IV进行异或；从第二组开始，所有的明文先与前一分组加密后的密文进行异或。[区块链(blockchain)的鼻祖！]
CBC模式相比ECB实现了更好的模式隐藏，但因为其将密文引入运算，加解密操作无法并行操作。同时引入的IV向量，还需要加、解密双方共同知晓方可。
实现代码：
    int aes_encrypt_cbc(AES_CYPHER_T mode, uint8_t *data, int len,
                        uint8_t *key, uint8_t *iv)
    {
        uint8_t w[4 * 4 * 15] = {0}; /* round key */
        uint8_t s[4 * 4] = {0}; /* state */
        uint8_t v[4 * 4] = {0}; /* iv */
        int nr, i, j;
        /* key expansion */
        aes_key_expansion(mode, key, w);
        memcpy(v, iv, sizeof(v));
        /* start data cypher loop over input buffer */
        for (i = 0; i < len; i += 4 * g_aes_nb[mode]) {
            /* init state from user buffer (plaintext) */
            for (j = 0; j < 4 * g_aes_nb[mode]; j++)
                s[j] = data[i + j] ^ v[j];
            /* start AES cypher loop over all AES rounds */