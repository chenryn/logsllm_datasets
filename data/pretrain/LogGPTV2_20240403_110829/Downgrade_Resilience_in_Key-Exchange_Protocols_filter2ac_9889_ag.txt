∗([cert 1, . . . , cert m])
SCR
log 1
log 2
SHD
∗(cert I )
CC
CKE(gx)
∗(sign(sk I , hash2(log 1)))
CCV
log 1
log 2
(ms, k1, k2) = kdf(gxy, nI | nR)
(ms, k1, k2) = kdf(gxy, nI | nR)
log 3
[CFIN(mac(ms, hash(log 2)))]k1
[SFIN(mac(ms, hash(log 3)))]k2
log 3
[Data]k1
[Data]k2
(a)
Client I
Server R
m1 = (nI , F (cfg I ))
= (nI , nR)
uid
mode = nego(F (cfg I ), cfg R)
= (v, aR, GR, pk R, hash1)
m2 = (nR, v, aR, GR, pk R, sign(sk R, hash1(nI | nR | GR | gy)))
uid = (nI , nR)
mode = (v, aR, GR, pk R, hash1)
Check (cfg I , mode)
ms = kdf(gxy, nI | nR)
ms = kdf(gxy, nI | nR)
m3 = (gx, mac(ms, H(m1, m2, gx,−)))
(cid:2)(m1, m2, m3,−)))
m4 = (mac(ms, H
complete = true
complete = true
(b)
Fig. 12: TLS 1.0–1.2 with (EC)DHE key exchange (a), where messages labeled with * occur only when client authentication
is enabled, and (b) its downgrade protection sub-protocol
Client I
Server R
CH(nI , maxI , [a1, . . . , an], [(G1, gx1 )])
Retry(G2)
log 1
CH(nI , maxI , [a1, . . . , an], [(G1, gx1 ), (G2, gx2 )])
log 1
SH(nR, v, aR, (G2, gy))
(k1, k2) = kdf(gx2y, log 1)
(k1, k2) = kdf(gx2y, log 1)
log 2
log 3
[SC(cert R)]k2
[SCV(sign(sk R, hash1(hash(log2))))]k2
log 2
log 3
ms = kdf(gx2y, log 3)
ms = kdf(gx2y, log 3)
log 4
[SFIN(mac(ms, hash(log 3)))]k2
[CFIN(mac(ms, hash(log 4)))]k1
log 4
[Data]k1
[Data]k2
(a)
Client I
Server R
m1 = (nI , F (cfg I ))
= (nI , nR)
uid
mode = nego(F (cfg I ), cfg R)
= (v, aR, GR, pk R, hash1)
m2 = (nR, v, aR, GR, pk R)
2 = sign(sk R, hash1(H(m1, m2,−)))
(cid:2)
m
uid = (nI , nR)
mode = (v, aR, GR, pk R, hash 1)
check (cfg I , mode)
complete = true
complete = true
(b)
Fig. 13: TLS 1.3 1-RTT mode with server-only authentication (a) and its downgrade protection sub-protocol (b)
messages. This foils most of the downgrade attacks on TLS
1.2; as long as the client only accepts strong signature and
hash algorithms and honest public keys from the server, it
cannot be downgraded to a weaker ciphersuite, and moreover,
it yields agreement on the chosen ciphersuite.
Although Draft 10 of TLS 1.3 provides strong downgrade
protection for the ciphersuite, downgrade attacks remain,
in particular, because clients and servers will continue to
support lower protocol versions for backward compatibility.
Considering that TLS 1.2 does not provide strong downgrade
protections, this unfortunately means that all the downgrade
attacks on TLS 1.2 will be inherited by TLS 1.3.
There are three downgrade attacks possible on TLS 1.3 as
described in Draft 10. One, an attacker downgrades the con-
nection to TLS 1.2 or lower and mounts any of the downgrade
attacks mentioned before. This will succeed as long as the
attacker can forge the ﬁnished MACs. Second, an attacker uses
the TLS fallback mechanism to stop TLS 1.3 connections and
allows only TLS 1.2 connections to go through. Even if the
endpoints implement the fallback protection mechanism [38],
the attacker can use one of the downgrade attacks in TLS
1.2 to break the connection. Third, in Draft 10 of the TLS 1.3
protocol, the handshake hashes restart upon receiving a Retry
message and hence, the attacker can downgrade the Difﬁe-
Hellman group for some classes of negotiation functions.
We can prevent all of these attacks by two countermeasures,
both of which have been incorporated into TLS 1.3 Draft 11.
See Fig. 14a. First, we continue the handshake hashes over
521521
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
retries. Second, TLS 1.3 servers always include their highest
supported version number in the server nonce, even when they
choose a lower version such as TLS 1.0.
Including the maximum version number into the server
nonce of all versions yields version downgrade protection
for clients. It is a simple patch (For the server, it amounts
to changing how nonces are generated. The client needs to
implement an equality check.) that can be incorporated into
TLS versions without making them incompatible with TLS
versions that do not implement the patch. If a server and
a client both implement the patch, the client gets version
downgrade protection.
We proceed in three steps: We show that when hashes
continue over Retry, clients that interact with servers that
just support TLS 1.3 achieve downgrade security. We then
show that embedding the version number into the server’s
nonce yields version downgrade protection from the client’s
perspective. We then put the two results together and show that
servers supporting TLS 1.0–1.3 with these countermeasures
yield the same client-side downgrade protection as when
servers just support TLS 1.3.
(cfg, cfg
The downgrade protection sub-protocol uses the same ses-
sion variables as TLS 1.0–1.2, but deﬁnes Nego using the func-
tion nego from Fig. 14a. Let M be the set of modes supported
by TLS and M(cid:3) = {Negocfg.role
(cid:2))|PS(cfg)} be the
modes negotiated between any pair of conﬁgurations for which
the ﬁrst guarantees partnering security. Let Ps = {p | s, p =
mode.sig∧mode ∈ M} be the signature agility parameters for
peer signature scheme s, H be the set of all hash algorithms
supported by TLS, and H(cid:3) = {mode.hash | mode ∈ M(cid:3)}
be the hash algorithms used by partnering secure modes. We
now prove partnering security for TLS 1.0–1.3 and downgrade
security for clients speaking to servers that implement the
ﬁx described in Fig. 14a. We then deﬁne version downgrade
security and show that the ﬁxes in Fig. 14a (TLS 1.3) and
Fig. 14b (TLS 1.0–1.2) prevent version downgrade.
In all of our theorems we consider a universe of conﬁgu-
rations that support subsets of TLS 1.0, 1.1, 1.2 and 1.3 and
that enable only (EC)DHE. Note that RSA keys are thus used
for signing only.
Theorem 7 (Partnering security of TLS 1.0–1.3): Let PS be
such that PS(cfg) implies that cfg.role = I and that all public
keys in the range of cfg.PKsR are honest. Given an adversary
A against the partnering security of our sub-protocol, we
construct adversaries Bs,p and Bh running in about the same
(cid:4)
time as A such that Advpartnering
(A) is at most
(cid:4)
TLS1.0-1.3-sub, PS
AdvCR
h, H(Bh) +
ns AdvEUF-CMA
s, p, Ps
(Bs,p) ,
h∈H(cid:2)
(s,p)∈sig(M(cid:2))
where ns keys are generated for signing scheme s.
For downgrade security, we deﬁne Nego, M, Ps, and H
as before. However, we redeﬁne M(cid:3), H(cid:3) to use DP instead
(cid:2))} and
of PS, i.e., M(cid:3) = {Negocfg.role
H(cid:3) = {mode.hash | mode ∈ M(cid:3)}.
Theorem 8 (Downgrade security of TLS 1.3): Let DP be
(cid:2)) implies that cfg.role = I, that all public
(cid:2)) | DS(cfg, cfg
such that DP(cfg, cfg
(cfg, cfg
(cid:2)
keys in the range of cfg.PKsR are honest and such that: (a)
cfg supports at least TLS 1.3 and implements the counter-
only supports TLS 1.3 and implements the
measure. (b) cfg
countermeasure. Given an adversary A against the downgrade
security of TLS 1.3 sub-protocol, we construct adversaries
Bs,p and Bh running in about the same time as A such that
Advdowngrade
TLS1.3-sub, DP
(A) is at most
h, H(Bh) +
AdvCR
(cid:4)
(cid:4)
h∈H(cid:2)
(s,p)∈sig(M(cid:2))
n2
2|nR|+1
+
nsAdvEUF-CMA
s, p, Ps
(Bs,p) ,
where n is the number of sessions, ns is the number of keys
generated for signing scheme s, and |nR| is the size of the
servers contribution to the unique identiﬁers. (The current
proposal is 24 bytes.)
We deﬁne version downgrade security similarly to down-
grade security via a function Versionr that maps two opposite-
role conﬁgurations (which include the version numbers) to the
version number negotiated (if any) in the absence of active
(cid:2)
adversaries. Formally, if a session π talking to a session π
completes, it must be the case that π.v = Versionr(cfgr, cfg¯r).
Akin to downgrade security, our deﬁnition of version down-
grade security is parameterized by a version downgrade
protection predicate VDP on pairs of conﬁgurations. When
VDP(cfgr, cfg¯r) holds, we expect that the local session r is
protected. For TLS, we will only consider version downgrade
protection from the client’s perspective.
Π, VDP(A) of A against
(cid:2) such that VDP(π.cfg, π
(cid:2)
.cfg).
Deﬁnition 12 (Version downgrade security): The advan-
tage Advversion
the version downgrade
security of Π is the probability that, when A terminates
after interacting with protocol Π through its oracles, there
exists a session π such that π.complete = true and there
.cfg) but
is a partnered session π
π.v (cid:5)= Versionπ.role(π.cfg, π
Theorem 9 (Version downgrade security of TLS 1.0–1.3):
(cid:2)) implies that cfg.role = I
Let VDP be such that VDP(cfg, cfg
and that all public keys in the range of cfg.PKsR are honest
(cid:2)
support at least TLS 1.3 and
and such that both cfg and cfg
activate the countermeasure.
Given an adversary A against the version downgrade se-
curity of our sub-protocol, we construct adversaries Bs,p
the same time as A such that
and Bh running in about
Advversion
(cid:4)
TLS1.0-TLS1.3-sub, VDP(A) is at most
n2
(cid:4)
(cid:2)
AdvCR
h, H(Bh) +
nsAdvEUF-CMA
s, p, Ps
(Bs,p) ,
2|nR|+1
+
h∈H(cid:2)
(s,p)∈sig(M(cid:2))
where n is the number of sessions, ns is the number of keys
generated for signing scheme s, and |nR| is the size of the
servers contribution to the unique identiﬁers.
For predicates DP and VDP such that DP ⊆ VDP, let
DP+VDP be the predicate that holds for pairs of conﬁgurations
in DP, with server conﬁgurations extended to support conﬁg-
urations of lower version protocols that by VDP should never
be negotiated. Putting Theorems 8 and 9 together, we get that
when both client and server implement the countermeasures,
then clients supporting multiple versions including TLS 1.3 are
522522
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
Client I
Server R
Client I
Server R
m0 = (nI , F0(cfg I ))
(cid:2)
0 = GR
m
m1 = (nI , F1(cfg I , GR))
= (nI , nR)
= maxR | nR
uid
(cid:2)
n
R
mode = nego(F1(cfg I , GR), cfg R)
= (v, aR, GR, pk R, hash1)
m2 = (n
(cid:2)
R, v, aR, GR, pk R)
verifyVersion(n
uid = (nI , nR)
(cid:2)
R, v, cfg I )
0, m1, m2,−)))
(cid:2)
(cid:2)
2 = sign(sk R, hash1(H(m0, m
m
mode = (v, aR, GR, pk R, hash1)
check (cfg I , mode)
complete = true
complete = true
m1 = (nI , F (cfg I ))
= (nI , nR)
= maxR | nR
uid
(cid:2)
n
R
mode = nego(F (cfg I ), cfg R)
= (v, aR, pk R, G, hash1)
m2 = (n