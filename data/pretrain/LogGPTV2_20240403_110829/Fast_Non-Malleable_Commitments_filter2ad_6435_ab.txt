Unfortunately, the requirements needed on the Vi for the
proof to work mean that, for example, the size of Vi+1 is at
least a constant multiple of the size of Vi for each i. Since
in [GRRV14], each Vi ⊂ Zq, this and other requirements on
the Vi necessitate q = 2Ω(k2). The main advantage of our
new protocol is that for us each Vi will be a subset of the
vector space Z(cid:96)
q for some (cid:96) which may be controlled. This
allows us to keep q ﬁxed to a small value and still make sure
(cid:12)(cid:12) is large.
that(cid:12)(cid:12)Z(cid:96)
q
The proof of non-malleability in [GRRV14] is delicate
enough to where even this small change threatens to de-
stroy the proof and much care is needed. The key is setting
the Vi ⊂ Z(cid:96)
q to be vector subspaces rather than just proper
subsets. This allows most of the algebraic ideas in the proof
to carry over unchanged. Instead of the fi(·), we use maps
vi (cid:55)→ (cid:104)zi, vi(cid:105) where the vector zi = (m, ri) ∈ Z(cid:96)
q. Our proof
uses similar ideas such as collinearity testing, though our
setting is more complicated as we work in vector spaces of
high dimension.
2. PRELIMINARIES
let [n] = {1, . . . , n}. A function
ε : N → R+ is negligible if it tends to 0 faster than any in-
verse polynomial i.e., for all constants c there exists nc ∈ N
such that for every n > nc it holds that ε(n)  ˜ti).
The tags are generated according to the “DDN trick”,
namely ti = 2i + idi where idi is the i−th bit of C’s identity.
This ensures that if id (cid:54)= ˜id that ti (cid:54)= ˜ti for some i. To
arrange that ti > ˜ti for some i, we deﬁne a ﬁnal tag tk+1 =
2(k + 1) − |id| where |id| is the Hamming weight of id. Our
ﬁnal parameters therefore, are n = k + 1 and (cid:96) = 2(k + 1).
3. THE BASIC PROTOCOL
In this section, we describe our protocol given a large
prime q ≈ 2160 and vector spaces V1, . . . , Vn ⊂ Zq as de-
scribed in Section 2.4. We use Naor’s two round, statisti-
cally binding bit commitment scheme [Nao91] as a building
block.2. We use boldface to denote vectors, and (cid:104)·,·(cid:105) to
In particular we denote
denote inner product of vectors.
our challenge vector set as {vi}i=1,...,n and our response set
{wi}. We write Com for the entire ﬁrst commitment mes-
sage. Our non-malleable commitment scheme (cid:104)C, R(cid:105)BASIC
shown in Figure 1. The decommitment phase is done by
having the committer C send m and the randomness it used
during the protocol.
Proposition 1. The commitment scheme (cid:104)C, R(cid:105)BASIC is
computationally hiding and statistically binding.
Proof. Computational hiding follows from the hiding of
Com, the ZK property and having having n + (cid:96)− 1 variables
and only n equations, where each equation has an indepen-
dent, random component. Statistical binding follows from
2Brieﬂy recall Naor’s scheme: 1) R sends random initial-
ization message σ, and 2) C responds with Comσ(m; s), a
commitment to m ∈ {0, 1} using randomness s (we will feel
free to just write Com(m), surpressing σ and s for simplic-
ity)
1052Public Parameters: A large prime q, an integer (cid:96) and
vector spaces V1, . . . , Vn ⊂ Z(cid:96)
q obtained from identities as
described in Section 2.4.
Commiter’s Private Input: m ∈ Z(cid:96)−1
to.
to be committed
q
Commit Phase:
1. R → C: Send the ﬁrst message σ of the Naor
commitment scheme.