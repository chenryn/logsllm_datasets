---
author: Marin Todorow
category: 系统运维
comments_data:
- date: '2015-07-03 10:21:55'
  message: SCF(Config Server Firewall) 此处简写出错。
  postip: 218.93.230.166
  username: 来自 - 江苏宿迁 的 Firefox/Linux 用户
count:
  commentnum: 1
  favtimes: 23
  likes: 0
  sharetimes: 0
  viewnum: 20571
date: '2015-07-03 10:04:00'
editorchoice: false
excerpt: 毋庸置疑，对于系统管理员，提高服务器的安全性是最重要的事情之一。因此，也就有了许多针对这个话题而生的文章、博客和论坛帖子。 一台服务器由大量功能各异的部件组成，这一点使得很难根据每个人的需求去提供定制的解决方案。这篇文章尽可能涵盖一些有所裨益的小技巧来帮助管理员保证服务器和用户安全。
  有一些常识是每个系统管理员都应该烂熟于心的，所以下面的几点在本文将不会提及：  务必保证系统是最新的 经常更换密码 - 使用数字、字母和非字母的符号组合 给予用户最小的权限，满足他们日常使用所需即可
  只安装那些真正需要的软件
fromurl: http://www.linuxveda.com/2015/06/03/secure-linux-server/
id: 5748
islctt: true
largepic: /data/attachment/album/201507/03/100435cuo93k1715ekhvxo.jpg
permalink: /article-5748-1.html
pic: /data/attachment/album/201507/03/100435cuo93k1715ekhvxo.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 毋庸置疑，对于系统管理员，提高服务器的安全性是最重要的事情之一。因此，也就有了许多针对这个话题而生的文章、博客和论坛帖子。 一台服务器由大量功能各异的部件组成，这一点使得很难根据每个人的需求去提供定制的解决方案。这篇文章尽可能涵盖一些有所裨益的小技巧来帮助管理员保证服务器和用户安全。
  有一些常识是每个系统管理员都应该烂熟于心的，所以下面的几点在本文将不会提及：  务必保证系统是最新的 经常更换密码 - 使用数字、字母和非字母的符号组合 给予用户最小的权限，满足他们日常使用所需即可
  只安装那些真正需要的软件
tags:
- 服务器
- 安全
thumb: false
title: Linux 服务器安全技巧
titlepic: false
translator: KayGuoWhu
updated: '2015-07-03 10:04:00'
---
毋庸置疑，对于系统管理员，提高服务器的安全性是最重要的事情之一。因此，也就有了许多针对这个话题而生的文章、博客和论坛帖子。
一台服务器由大量功能各异的部件组成，这一点使得很难根据每个人的需求去提供定制的解决方案。这篇文章尽可能涵盖一些有所裨益的小技巧来帮助管理员保证服务器和用户安全。
有一些常识是每个系统管理员都应该烂熟于心的，所以下面的几点在本文将不会提及：
* 务必保证系统是**最新的**
* 经常更换密码 - 使用数字、字母和非字母的符号组合
* 给予用户**最小**的权限，满足他们日常使用所需即可
* 只安装那些真正需要的软件包
![](/data/attachment/album/201507/03/100435cuo93k1715ekhvxo.jpg)
下面是一些更有意思的内容：
### 更改SSH默认端口
在搭建好一台全新的服务器后要做的第一件事情就是更改SSH的默认端口。这个小小的改动能够使你的服务器避免受到成千上万的暴力攻击（LCTT 译注：不更改默认端口相当于黑客们知道你家的门牌号，这样他们只需要一把一把的试钥匙就可能打开你家的锁）。
要更改默认的SSH端口，先打开sshd\_config文件：
```
sudo vim /etc/ssh/sshd_config
```
找到下面这行：
```
#Port 22
```
“#”号表示这行是注释。首先删除#号，然后把端口号改成目的端口。端口号不能超过65535，确保要指定的端口号没有被系统或其它服务占用。建议在[维基百科]上查看常用端口号列表。在本文中，使用这个端口号：
```
Port 16543
```
然后保存并关闭文件。
接下来的一步是：
### 使用SSH密钥认证
在通过SSH访问服务器时，使用SSH密钥进行认证是尤其重要的。这样做为服务器增加了额外的保护，确保只有那些拥有密钥的人才能访问服务器。
在本地机器上运行下面命令以生成SSH密钥：
```
ssh-keygen -t rsa
```
你会看到下面的输出，询问要将密钥写到哪一个文件里，并且设置一个密码：
```
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa): my_key
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in my_key.
Your public key has been saved in my_key.pub.
The key fingerprint is:
SHA256:MqD/pzzTRsCjZb6mpfjyrr5v1pJLBcgprR5tjNoI20A
```
完成之后，就得到两个文件：
my\_key
my\_key.pub
接下来把my\_key.pub拷贝到~/.ssh/authorized\_key中
```
cp my_key.pub ~/.ssh/authorized_keys
```
然后使用下面命令将密钥上传到服务器：
```
scp -P16543 authorized_keys user@yourserver-ip:/home/user/.ssh/
```
至此，你就可以从这台本地机器上无密码地访问服务器了。
### 关闭SSH的密码认证
既然已经有了SSH密钥，那么关闭SSH的密码认证就会更安全了。再次打开并编辑sshd\_config，按如下设置：
```
ChallengeResponseAuthentication no
PasswordAuthentication no
UsePAM no
```
### 关闭Root登录
下面关键的一步是关闭root用户的直接访问，而使用sudo或su来执行管理员任务。首先需要添加一个有root权限的新用户，所以编辑这个路径下的sudoers文件：
```
/etc/sudoers/
```
推荐使用如**visudo**这样的命令编辑该文件，因为它会在关闭文件之前检查任何可能出现的语法错误。当你在编辑文件时出错了，这就很有用了。
接下来赋予某个用户root权限。在本文中，使用用户**sysadmin**。确保在编辑后这个文件时使用的用户是系统已有的用户。找到下面这行：
```
root ALL=(ALL) ALL
```
拷贝这行，然后粘贴在下一行，然后把root更改为“sysadmin”，如下所示：
```
root ALL=(ALL) ALL
sysadmin ALL=(ALL) ALL
```
现在解释一下这行的每一个选项的含义：
```
(1) root  (2)ALL=(3)(ALL) (4)ALL
```
(1) 指定用户
(2) 指定用户使用sudo的终端
(3) 指定用户可以担任的用户角色