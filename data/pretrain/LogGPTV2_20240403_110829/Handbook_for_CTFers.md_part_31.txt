#include 
#include 
#include 
#include 
File OpenAndReadHagic (const char+ filename, uint32_t* magic, std: :
string* error_msg) {
File fd (filename, O_RDoNLY, /* check_usage */ false) ;
CHEcK (magic 1= nu11ptr) ;
if (fd.rd() == -1) {
+error_msg = StringPrintf (*Unable to open '$s' : $s", filename
strerror (errno)l ;
return File [1 ;
ppe / /
f/
// let 's limit processing file list
struct stat st;
if (strstz (filename, */data/data*) 1= NULL) {
char* fn_out = nev char [PATH_MAX] :
strcpy (fn_out, filename) ;
strcat (fn_out, *_unpacked_dex") ;
int fd_out = open (fn_out, O_WRONLY | O_CREAT | O_EXCL, S_IRUSR |
S_IWUSR | S_IRGRP |S_IROTH) ;
if (1fstat [fd.rd(l, sst)) (
char+ addx = (char*)mmap (NULL, st . st_size, PROr_READ,
NAP_PRIVATE, fd.Fd (1 , 0) ;
int ret = write (fd_out, addr, st.st_size) ;
ret = 0 ;
// no use
munmap (addr, st.st_size) ;
delete []fn_out;
close (fd_out) ;
---
## Page 302
4.4 APK Unpacking
287
/ /
//
11///////////
int n = TENP_FAILURE_RETRY (zead (fd Fd (1 , magic, sizeof [*magic) >) ;
/ / art/runtime /dex_file.cc
////////////
DexFile: :DexFile (const uint8_t* base,
const std: :strings location,
size_t size,
uint32_t location_checksum,
const CatDexFile* oat_dex_file)
oat_dex_file_(oat_dex_file) {
/ / add
/ /
/ / let's limit processing file 1ist
if (location.find (*/data/data/*) 1= std: :string: :npos) {
std: :ofstream dst (location + *__unpacked_oat", std : : 1os : :binary) :
dst .wzite (zeinterpret_cast (base) , size) ;
dst.close () ;
//
/ /end
/////////
CHEck (begin_ 1= nul1ptr)  Open FUPK3 on your phone, click the icon, select the app you want to unpack,
and then click UPK to unpack it.
 The current shelling information is displayed in Logcat, and the Filter is
LOG TAG: F8LEFT.
 In the information interface, the DEXs successfully unshelled are shown in
blue, otherwise they are shown in red.
 There may be some DEX files that cannot be unshelled completely at one time,
so click UPK several times.
 The DEX file dumped is located in the /data/data/pkgname/.fupk3 directory.
 Click CPY and copy the unshelled DEX file to the temporary directory /data/
local/tmp/.fupk3.
 Export DEX: adb pull /data/local/tmp/.fupk3 localFolder.
 Reconstruct the DEX file using FUnpackServer: java -jar upkserver.jar
localFolder.
4.5 APK in CTFs
4.5.1OLLVM Obfuscated Native App Reverse (NJCTF 2017)
NJCTF 2017 has a Native App writen purely in native codes, whose
AndroidManifest.xml content is shown in Fig. 4.15.
It can be seen that the app has only one main activity class: android.app.
NativeActivity. Using JEB we can see that no implementation exists on the Java
layer, as shown in Fig. 4.16. This app contains a library(so), which has used
OLLVM to obfuscate its core logic, as shown in Fig. 4.17.
Diving into the core logic of the library, we can see that the program gets the x,y,z
coordinates of the current device from the accelerometer. Then it makes a calculation
and spits out the flag only when x.y,z meet certain conditions. Since the library is
heavily obfuscated, it’s extremely hard to figure out the satisfying condition, so we
might need to consider a new way out.
We can notice that a function named fig seems very suspicious:
char *_fastca11 flg (int a1, char a2)
rdivedre
15anrete:ta
dt
Fig, 4.15  AndroidManifest.xml content
---
## Page 304
4.5 APK in CTFs
289
Fig, 4.16 JEB
由android
册com
 geekerchina
册an
> BuildCon
R
shile ( 1 )
vh51e # 4 
int j_j_modsi3 (int a, int b) (
return atb;
int j_j_divsi3 (int a, int b) (
return a/b;
---
## Page 305
290
4 APK
char fig (int al, char +out) {
char *v2 ;
// sToC_4@1
// r6@1
int v3 ;
int v4 ;
/ / r4@1
int v5 ;
// r0@1
int v6 ;
int v7;
// sr08_4@1
// r5@1
int v8;
// r0@1
int v9 ;
// r0@1
char v10;
// ST10_1@1
int v11;
// x501
/ / r0@1
int v12;
int v13;
// r0@1
int v14 ;
int v15;
// sT18_4@1
int v16 ;
// r0@1
// r0@1
char v17;
// r0@1
char v18 ;
// ST04_1@1
int v19;
// r0@1
char v2 0 ;
// r0@1
int v21;
// r1@1
int v22 ;
// r5@1
int v23 ;
/ / r0@1
char v24 ;
// r0@1
v2 = out ;
v3 = a1 ;
v5 = 3_3
v4 = a1 ;
v6 = v5:
nodsi3 [a1, 10) ;
5A + 0Z = A
 = 8A
5A + 0Z = ZA
_divsi3 (v4, 100) ;
v9 = j_3.
nodsi3 (v8, 10) ;
v11 = 19 * v9 + v7;
6△ = 0TA
v2 [1] = v11;
v2 [2] = v11 - 4 ;
v12 = v4 ;
v13 = j_
divsi3 (v4, 10) ;
 = STA
v14 = j_J.
divsi3 (v4, 1000000) ;
nodsi3 (v13, 10) ;
v2 [3] = j_
_divsi3 (v4, 1000) ;
_modsi3 (v15, 10) + 11 + v14;
v16 = j_
v17 = j_j.
nodsi3 (v16, 10) ;
/ / LOBYTB (v4) = v17;
v4 = v17 ;
T△ = 8tA
v19 = j_.
_divsi3 (v12, 10000) ;
v20 = j_
_nodsi3 (v19, 10) ;
v2 [4] = 20 * v4 + 60 - v20 - 60;
v21 = -v6 - v14;
---
## Page 306
4.5 APK in CTFs
291
v2 [5] = - (char) v21 * v4 ;
v22 = -v21 ;
v2 [6] = v14 * v4  v20;
v23 = j_
v24 - 33_nodai3 (v23, 10) ;
_divsi3 (v3, 100000) ;
0 - A + 0z = []zA
v2 [8] = 10 + v18 ∣ 1;
v2 [10] = v6 + v14 + v10 + v10 - 4;
 - △ + △ = [6] △
v2 [11] = (v10 + v14) * v24 - 5;
v2 [12] = 0 ;
return v2;
int main (1 {
char out [256] , flag = 0;
fox {unsigned int I = 0 ; I = 10) (
flg (1, out) ;
for [int j=0; j= a′ & out [j] = *A && out [j] = *0 && out [j]  The user takes a set of source code written in a high-level language to the
compiler.
 The compiler parses the input and generates the assembly code for source code.
 The assembler receives the assembly code generated by the compiler and
assemble it to machine code. Then temporarily storing the machine code in each
object file.
 Now several object files have been generated, but the goal is to generate a
single executable file. The linker is involved, connected the scattered object files
with each other into a complete program. Then the executable file format is filled
with various parameters that specify the environment the program will run.
Finally, we get a complete executable file.
In the actual environment, we have to consider the size of the generated executable
file, the performance of the executable file, the protection of information and so