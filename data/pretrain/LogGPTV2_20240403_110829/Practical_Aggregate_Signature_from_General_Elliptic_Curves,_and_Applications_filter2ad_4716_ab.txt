Γ-protocol into a signature scheme in the random oracle model.
The resultant signature is named Γ-signature. Below, we briefly re-
view the Γ-signature scheme based on discrete logarithm problem
(DLP), and its security result. The reader is referred to [70] for more
details.
q be two cryptographic hash functions,
and m ∈ {0, 1}∗ be the message to be signed, the DLP-based Γ-
signature scheme is briefly reviewed in Table 2 (page 6). Here, for
presentation simplicity, checking z (cid:44) 0 in signature generation,
and checking d, z ∈ Z∗
q and A (cid:44) ∞ in signature verification, are
not explicitly specified. In the actual implementation, it is also
suggested in [70] that d = Hd(A) is replaced with d = xA mod q,
where xA is the x-coordinate of A. To ease signature verification,
we can replace d in σ with d−1. In this case, d−1 is not needed to
computed in signature verification, and the signature is rejected if
Hd(A)d−1 (cid:44) ∞.
Let Hd , He : {0, 1}∗ → Z∗
der concurrent interactive attacks for a signature scheme =
Security of Γ-Signature. Strong existential unforgeability un-
(KeyGen, Siдn, V eri f y), where a signature can be divided into two
parts (d, z), is defined using the following game between a chal-
lenger and a forger adversary F .
Setup On the security parameter l, the challenger runs(PK, SK) ←
KeyGen(1l). The public-key PK is given to adversary F
(while the secret-key SK is kept private).
Concurrent interactive oracle access On the security pa-
rameter l, suppose F makes at most qs signature queries
to the signing oracle Siдn(SK,·), where qs is polynomial in
l. Suppose F makes at most qs signature queries. Each sig-
nature query consists of the following steps: (1) F sends
“Initialize" to the signer. The i-th initialization query is de-
noted as Ii, 1 ≤ i ≤ qs. (2) Upon the i-th initialization query,
the signer responds back di. (3) F adaptively chooses the
message mi to be signed, and sends mi to the signer. (4)
The signer sends back zi, where (di , zi) is the signature on
message mi. F is allowed to adaptively and concurrently
interact with the signer in arbitrary interleaved order. As a
special case, F can first make qs initialization queries, and
get all the values in ¯D = {d1,· · · , dqs } before presenting
any message to be signed.
Output Finally, F outputs a pair of m and (d, z), and wins
the game if (1) V eri f y(PK, m, d, z) = 1 and (2) (m, d, z) (cid:60)
{(m1, d1, z1),· · · ,(mqs , dqs , zqs)}.
We define AdvSigsuf-cia, F (1l) to be the probability that F wins
the signature scheme is strongly existential unforgeable, if Ad-
vSigsuf-cia, F (·) is a negligible function for every PPT forger F .
in the above game, taken over the coin tosses of KeyGen, F , and
the signer (and the random choice of the random oracle). We say
It is proved in [70] that the above Γ-signature scheme is strongly
existential unforgeable under the DLP assumption, assuming Hd
is a random oracle while He is target one-way as defined in [70].
Roughly speaking, He is target one-way w.r.t. an e-condition Re,
He,A(1l) =
if for any PPT algorithm A = (A1, A2) it holds that Advtow
Pr[Re(d, e = He(m), d′, e′ = He(m′)) = 0 : d ← Z∗
q;(m, s) ←
A1(He , d); d′ ← Z∗
q; m′ = A2(He , d, m, d′, s)] is negligible, where
s is some state information passed from A1 to A2. Here, the e-
condition is defined as Re(d, e, d′, e′) = 0 iff d−1
e′ mod q.
Introducing target one-wayness in [70] is to mitigate the depen-
dency of provable security on random oracles. Specifically, for the
two hash functions Hd and He used for Γ-signature, only Hd is
assumed to be a random oracle. Detailed discussions on target one-
way hash, including clarifications on the relations among target
one-wayness, collision resistance and preimage resistance, are pre-
sented in [70], which show target one-wayness is a natural and
realistic property for cryptographic hash functions. In particular,
target one-wayness is implied by random oracle [70].
e = d′−1
As a part in the security proof of Γ-signature [71], we have the
following corollary:
Corollary 2.1. The signing oracle Siдn(SK,·) in the stage of
“concurrent interactive oracle access" can be statistically simulated
by a PPT algorithm S in the random oracle model. Specifically, the
view of A when concurrently interacting with the signing oracle
Siдn(SK,·) is statistically close to that under the simulation of S.
3 AGGREGATE SIGNATURE AND
MOTIVATION
An aggregate signature (AS) scheme is a tuple(KeyGen, Siдn, V eri f y,
Aдд, AддV eri f y), where the last three are deterministic, while the
first three algorithms constitute a standard signature scheme. Given
multiple individual signatures {σ1,· · · , σn}, where σi is a signature
on message mi under public-key pki, 1 ≤ i ≤ n and n ≥ 2, the ag-
gregation algorithm Aдд condenses them into a compact aggregate
signature siд. Here, in general, for any i, j such that 1 ≤ i (cid:44) j ≤ n,
it is assumed that (pki , mi) (cid:44) (pkj , mj); but it might be the case
that pki = pkj or mi = mj. The completeness of an AS scheme
says that AддV eri f y({(pk1, m1),· · · ,(pkn, mn)}, siд) returns “AC-
CEPT", whenever V eri f y(pki , mi , σi) outputs “ACCEPT" for any i,
1 ≤ i ≤ n. Roughly speaking, the security of an AS scheme says
that it is infeasible for any PPT adversary A to produce a valid
forged aggregate signature involving an honest signer, even when
Session 6B: Applied CryptographyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand531it can play the role of all the other signers (in particular choosing
their public keys), and can mount a chosen-message attack on the
target honest signer.
Definition 3.1 (security of aggregate signature). Let (pk, sk) ←
KeyGen(1l) be the public and secret key pair of the target honest
signer. The advantage of the attacker A against the AS scheme is de-
A
AS(1l) = Pr[AддVeri f y({(pk1,m1),··· ,(pkn,mn)},siд) = ACCEPT] ,
fined as Adv
where n is polynomial in l and pk ∈ {pk1,· · · , pkn}. The probabil-
ity is taken over the random coins used by KeyGen and A in the
following experiment:
(pk, sk) ← KeyGen(1l);(pk1, ...,pkn,m1, ...,mn, siд) ← ASiдn(sk,)(1l ,pk) .
To make the security definition meaningful, we only consider ad-
versaries that are legitimate in the sense that, supposing pk = pki
for some i, 1 ≤ i ≤ n, A must never have queried mi to its sign-
ing oracle. Then, an AS scheme is said to be secure if for any PPT
A
AS(1l) is negligible in l. Note that
adversary A its advantage Adv
A can choose pk1, ..., pkn as it wishes, in particular as a function
of the target public key pk. There is also no requirement that the
adversary “knows” the secret key corresponding to a public key it
produces.
There were some discussions on deploying the pairing-based
AS scheme proposed in [18] in the Bitcoin system [47], which are
briefly summarized below.
• System complexity. Deploying pairing-based aggregate sig-
nature schemes requires the replacement of not only the
EC-DSA algorithm but also the underlying elliptic curve. It
makes a deployment in practice (such as Bitcoin) much more
invasive than simply shifting algorithms.
• Bilinear group vs. general group. Intractability problems
in groups with bilinear maps are weaker than the discrete
logarithm problem in general EC groups.
• Verification speed. As an individual signature scheme, the
verification of the pairing-based BLS signature is signifi-
cantly slower than that of EC-DSA. Note that the miners still
need to verify the correctness of individual BLS signatures
before aggregating them into a block. Some survey indicates
that on a concrete hardware it can verify 70,000 secp256k1
signatures per second, while it could only verify about 8,000
BLS signatures per second [47]. And the situation may be
much further worsen, because according to the latest work
[6], the size of element in G1 is suggested to be 460-bit to
satisfy 128-bit security, for the pairing G1 ∗ G2 → GT based
on the popular BN curve.
It is thus highly desirable to develop aggregate signatures, with
the following features simultaneously:
• It can be built from general elliptic curves (without bilinear
maps), in the plain public-key model with fully asynchronous
communications.
• The underlying signature scheme has provable security, and
moreover, is more efficient and flexible than EC-DSA.
4 SUBTLETY AND WARM-UP FOR
ACHIEVING AS FROM GENERAL ELLIPTIC
CURVES
Recently, there is renewed interests in deploying Schnorr’s sig-
nature in the Bitcoin system, for its efficiency and flexibility. In
comparison with EC-DSA used in Bitcoin, the linear combination of
ephemeral secret-key and static secret-key with Schnorr’s signature
brings more desirable advantages, e.g., multi-signature, scriptless
scripts (specifically, privacy-preserving smart contracts). However,
we show the subtlety of aggregating Schnorr’s signatures. This
is demonstrated by a concrete fatal attack, which actually works
against the natural implementations of aggregate signature based
upon almost all the variants of DSA and Schnorr’s.
We first present the aggregate signature based on Schnorr’s
scheme. Suppose there are n signers, n ≥ 2, and each has the
public and secret key pair (Xi , xi) where Xi = xi P and xi ← Z∗
q,
1 ≤ i ≤ n. Denote by σi = (ei , zi) the signature by user i on mes-
sage mi ∈ {0, 1}∗. After receiving {(X1, m1, σ1),· · · ,(Xn, mn, σn)},
the miner first verifies the correctness of each individual signature
(Xi , mi , σi), during which it gets Ri = zi P−ei Xi. If all the individual
signatures are correct, the miner finally outputs ˆR = {R1,· · · , Rn}
i =1 zi as the resultant aggregate signature. On input
(X1,· · · , Xn, m1,· · · , mn, ˆR, z), AддV eri f y works as follows: com-
i =1 ei Xi.
The above aggregate signature scheme looks fine. But a careful
examination divulges the following subtle yet fatal attack. With-
out loss of generality, suppose the index of the attacker is 1, who
possesses the public and secret key pair (X1, x1) and acts as follows.
and z = n
putes ei = H(Xi , Ri , mi), and accepts if zP =n
i =1 Ri +n
j=2 Rj −n
• For any j, 2 ≤ j ≤ n, the attacker selects mj and arbitrary
Rj (from the underlying EC group) on behalf of Xj, and
computes ej = H(Xj , Rj , mj). Note that the attacker does
not necessarily know the discrete logarithm of either Xj or
Rj for 2 ≤ j ≤ n.
• The attacker chooses its own message m1, sets the ephemeral
j=2 ejXj), and computes e1 =
H(X1, R1, m1) and z = e1x1.
• Finally, it outputs (R1,· · · , Rn, z) as the forged aggregate
signature.
rogue-key R1 = (−n
Note that zP = e1x1P = e1X1 = e1X1+R1+(n
n
i =1 Ri +n
j=2 ei Xi) =
i =1 ei Xi. Thus, the forged aggregate signature is valid,
the attacker can sign arbitrary messages on behalf of the victim
users (X2,· · · , Xn). There is no doubt that such an attack is really
fatal, particularly for a cryptocurrency system like Bitcoin. To stop
such an attack, one approach is to require proof of possession of the
discrete logarithms for all the Rj’s, 1 ≤ j ≤ n [58]. But this voids
the advantage of signature aggregation.
We suggest that the above ephemeral rogue-key attack might
implicitly account for the reason why no previous AS scheme was
built from general elliptic curve groups, though we are unaware of
any explicit presentation of such an attack to the best of our knowledge.
Nevertheless, it indeed serves as a good illustration of the subtlety of,
as well as warm-up for, achieving AS from general groups without
bilinear maps.
j =2 Ri +n
Session 6B: Applied CryptographyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand532q, and the checking of d, z ∈ Z∗
5 AGGREGATE Γ-SIGNATURE
The aggregate Γ-signature scheme is described in Table 2, where in
the specification of Aдд algorithm Ai is generated when computing
V eri f y(Xi , mi , σi). Here, the algorithms (KeyGen, Siдn, V eri f y)
just constitute the Γ-signature scheme presented in Section 2.3.
For presentation simplicity, we use a single cryptographic hash
function H : {0, 1}∗ → Z∗
q, mi (cid:44) λ
and A (cid:44) ∞ is omitted in the specification of verification algorithms,
where λ represents the empty string. The completeness property
can checked directly.
Given a list of individual signatures {(X1, m1, σ1 = (d1, z1)),· · · ,
(Xn, mn, σn = (dn, zn))}, where n ≥ 2, the aggregation algorithm
discards (Xi , mi , σi) if the signature verification fails, or any one of
(Xi , mi) or Ai is repeated, where Ai is generated when computing
V eri f y(Xi , mi , σi), 1 ≤ i ≤ n. The latter checking is for provable
security, as we shall see. But it still might be the case that, for
some i (cid:44) j, Xi = Xj or mi = mj (this case occurs with Bitcoin
P2SH multi-signature transactions). We assume that the elements
in ˆT and those in ˆA output by Aдд are sorted to ease verification
of aggregate signature. More details about the implementations
are discussed in the next subsection. Observe that ˆT and ˆA are
output and treated separately, and AддV eri f ier actually does not
care about the correspondence between the elements in ˆA and those
in ˆT . This flexibility allows for implementations more friendly to
SegWit and to being resistant to transaction malleability attacks,
as we shall discuss in Section 6.