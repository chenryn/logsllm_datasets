CensorSpoofer without incurring unacceptable costs (e.g.,
having to block all oversea Email communication).
Unobservability: The censor should not be able to tell
whether a user is using CensorSpoofer without incurring un-
acceptable costs.
Perfect resistance to insider attacks: The censor should
not be able to break unblockability or unobservability of
CensorSpoofer even if nearly all users are compromised.
Low latency: CensorSpoofer should be able to fetch and
deliver the web pages for users with low latency. For clarity,
CensorSpoofer does not aim to support highly interactive
web applications, such as Javascript.
Deployability: CensorSpoofer should be deployable by peo-
ple with limited resources, without requiring any support
from network infrastructure.
4. CENSORSPOOFER FRAMEWORK
4.1 Overview
In censored countries, users cannot visit blocked websites
directly and have to connect to some external proxies to ac-
cess these websites. These proxies’ IP addresses are exposed
to users who connect to them, and therefore can be easily
blocked by the censor who colludes with corrupt users. A
natural solution to this is to employ indirect channels to
hide the proxy’s IP address. For example, MailMyWeb [5]
and FOE [6] use Email as the indirect channel for which the
intermediate nodes are Email servers.
To carry voluminous downstream traﬃc (e.g., web con-
tent), the indirect channel must have high bandwidth. This
requirement excludes steganographic indirect channels, such
as steganographic IM/Email. As a result, the circumvention
system has to rely on an encrypted indirect channel so as
to utilize full capacity of the indirect channel while ensuring
unobservability of the transmission of censored data. This
requires the intermediate nodes of the indirect channel to
support encryption (e.g., TLS/SSL) and reside outside the
censor’s network (to avoid eavesdropping by corrupt inter-
mediate nodes). Currently, only a few Email providers (in-
cluding Gmail, and Hotmail) can meet these requirements.
However, due to their limited user base in the censored coun-
try, the censor could simply block them altogether, as wit-
nessed by Gmail being blocked in China in 2011 [35].
Our insights. We notice that for web browsing, the up-
stream traﬃc (e.g., URLs) is much lighter-weight than the
downstream traﬃc.
If an indirect channel is only used to
send upstream messages, high bandwidth is no longer re-
quired for the indirect channel. This allows us to use any
indirect channel with steganography to transmit upstream
data. Besides, by using steganography, users can even use
local IM or Email providers that potentially collude with
the censor to access our circumvention system without be-
ing detected. The elimination of requiring special servers to
construct the indirect channel makes it substantially harder
123Figure 1: The CensorSpoofer framework. The user pretends to communicate with an external dummy host legitimately, and
sends URLs to the spoofer via a low-bandwidth indirect channel (e.g., steganographic IM/Email). The spoofer fetches blocked
webpages, and injects censored data into the downstream ﬂow towards the user by spooﬁng the dummy host’s IP.
for the censor to block our circumvention system as all over-
seas Email and IM communication has to be prohibited.
As for the downstream channel, since the proxy’s IP (i.e.,
source IP) is not used in packet routing, we can adopt IP
spooﬁng to conceal the proxy’s IP address. This eliminates
the need for an indirect channel to hide the proxy’s IP, allow-
ing us to use direct channels, which are more common and
higher-bandwidth, to send voluminous downstream traﬃc.
Our design. Based on these insights, we design a new cir-
cumvention framework for web browsing, which uses asym-
metric communication with separate upstream/downstream
channels. In particular, a user who requires circumvention
service ﬁrst starts or pretends to start a legitimate com-
munication session (e.g., a VoIP call) with a dummy host
residing outside the censor’s network, and the proxy (called
spoofer) injects censored data into the downstream ﬂow to-
wards the user by spooﬁng the dummy host’s IP, so that
the censor believes the user is legitimately communicating
with the dummy host only.
It is important to note that
the dummy host does not need to cooperate with the user
or the spoofer, but it should look legitimate to the censor,
e.g., its port for VoIP should “seem open” if the cover ses-
sion is a VoIP call. Meanwhile, the user sends URLs to the
spoofer through a low-bandwidth indirect channel, such as
steganographic IM/Email. An illustration of the framework
is provided in Figure 1.
Next, we discuss the downstream and upstream channels
in more details.
4.2 Downstream Channel
1) To conceal the spoofer’s IP address, we apply IP spoof-
ing in the downstream ﬂow. Then, the ﬁrst question is what
kind of traﬃc (TCP or UDP) is suitable for IP spooﬁng?
Generally, hijacking TCP with IP spooﬁng is diﬃcult. In
TCP, end hosts maintain connection state and acknowledge
received data. Suppose the client has established a TCP
connection with the dummy host, and the spoofer knows the
dummy host’s IP address and sequence number and tries to
inject packets containing censored data into the downstream
ﬂow. First of all, the TCP connection with the dummy host
must be kept alive; otherwise, the dummy host will send
RST packets in response to the client’s packets, which can
be easily detected by the censor. In addition, if the spoofer
sends more data to the client than the dummy host (i.e.,
the sequence number of the spoofer is higher than that of
the dummy host), the censor can detect the inconsistency of
the sequence numbers as long as the dummy host sends any
packet to the client2. Thus, the spoofer has to use the se-
quence numbers that have already been used by the dummy
host (i.e., injecting packets as “resent packets”). However,
in this case a censor with packet-recording capability can
detect the injected packets by comparing the contents of
packets with the same sequence number.
In contrast, UDP is a connectionless protocol and easier
to hijack. Unlike TCP, end hosts of UDP do not maintain
any connection state or acknowledge received data. Hence, if
the dummy host keeps “quiet” and the client and the spoofer
cooperate closely, it is feasible to deceive a smart censor
into believing that the client is legitimately communicating
with the dummy host over a duplex UDP channel. In this
work, we focus on UDP traﬃc for IP spooﬁng. We present
a concrete example of hijacking UDP in Section 5.
2) To ensure unobservability, the communication between
the client and the spoofer (and the dummy host) should look
like a normal UDP session of a legitimate Internet applica-
tion. So, the second question is what carrier applications
should be used?
UDP is mainly used for time-sensitive applications, such
as VoIP, video conferencing, multi-player online games, we-
bcam chat, online TV, etc. These applications usually have
high-bandwidth channels. Other UDP applications, such as
DNS and SNMP, have very limited bandwidth and thus are
not suitable to carry voluminous downstream traﬃc.
We can further divide these applications into two classes
based on their communication manner: (i) client-to-server
communication, e.g., multi-players online games and online
TV, and (ii) client-to-client communication, e.g., VoIP and
video chat. To achieve better robustness to blocking, we
prefer the applications in the second class, since for these
applications the pool of dummy hosts is signiﬁcantly larger
(e.g., the dummy hosts could be any VoIP client on the
Internet), making it much harder to block them altogether.
3) In CensorSpoofer, we use a dummy host as a cover to
stealthily transmit censored data. The third question is how
to select plausible dummy hosts?
2An active censor can check the dummy host’s current se-
quence number by replaying a client’s packet that is out-
side the dummy host’s receiving window; in this case the
dummy host will reply an ACK packet containing its cur-
rent sequence number.
124The selection of dummy hosts is decided by the carrier
application. For example, if the carrier application is VoIP,
then each dummy host should be a potential VoIP client.
Note that an active censor can use port scanning (e.g., us-
ing nmap [17]) to check if a dummy host is actually running
the application, i.e., listening on a particular port (e.g., port
5060 for SIP-based VoIP). In response, we can use port scan-
ning as well to obtain the list of dummy hosts. According
to our experience, a dummy host is “quiet” (i.e., not sending
any reply packet) to incoming UDP packets sent to a spe-
ciﬁc port, as long as this port is not “closed” on the dummy
host. In many cases, port scanning is unable to determine
whether a particular application is running on a target ma-
chine, since the target machine could be behind a ﬁrewall
that is conﬁgured to ﬁlter probe packets. For example, nmap
returns “open|ﬁltered” or “closed|ﬁltered” when it cannot tell
whether the port is open/closed or the probe is ﬁltered. This
ambiguity plays in our favor as it makes a larger number of
hosts appear to be plausible VoIP endpoints.
4) Finally, we note that not all Internet hosts can launch
IP spooﬁng. Some ASes apply ingress and/or egress ﬁltering
to limit IP spooﬁng. The MIT ANA Spoofer project [18] has
collected a wide range of IP spooﬁng test results, showing
that over 400 ASes (22%) and 88.7M IPs (15.7%) can be
used to launch IP spooﬁng. Therefore, we need to deploy
our spoofer in the ASes where IP spooﬁng is not prohibited.
We can utilize some tools, such as nmap and the spooﬁng
tester developed by the Spoofer project [18], to test whether
a host can perform IP spooﬁng.
4.3 Upstream Channel
To send upstream messages, each user uses a stegano-
graphic channel embedded in indirect communications such
as IM and Email. Note that URLs are typically quite short
and can be easily embedded into a small number of messages.
Communication requirements can be further reduced by us-
ing a pre-agreed list of censored URLs and sending just the
index of the desired site. Likewise, navigation within a site
can use relative link numbering, requesting, e.g., the 3rd link
from the front page of www.cnn.com. Note that steganography
requires the use of a secret encoding key to remain invisible;
this process can be made resilient to insider attacks by hav-
ing each user register a separate pairwise key when joining
the system. Speciﬁc steganographic constructions and their
security are beyond the scope of this work. An important
challenge that we must address, however, is the possibility
that the censor will perform blocking based on the recipi-
ent’s IM identiﬁer or Email address; we discuss a solution in
Section 5.2.
5. A DESIGN OF CENSORSPOOFER
The CensorSpoofer framework can be instantiated using
a number of protocol choices. In this section, we present a
concrete design based on VoIP. We start with some back-
ground about VoIP systems.
5.1 Background of SIP-based VoIP
VoIP is an Internet service that transmits Voice over IP-
based networks. It employs session control protocols, such as
SIP, MGCP, and H.323, to setup and tear down calls. SIP is
one of the most widely used VoIP signal protocols, because
of its light weight. In this work, we focus on SIP-based VoIP
systems.
Alice
atlanta.com
proxy
biloxi.com
proxy
Bob
INVITE M1
Trying M3
Ringing M8
OK M11
ACK M12
INVITE M4
Ringing M6
OK M9
ACK M14
INVITE M2
Trying M5
Ringing M7
OK M10
ACK M13
Media Session
BYE M15
OK M16
Figure 2: An example of a SIP session (registrars and loca-
tion services are not shown).
SIP is an application layer protocol. It can run on either
UDP or TCP. There are three main elements in SIP systems:
user agents, location services, and servers.
• User agents are the end devices in a SIP network. They
originate SIP requests to establish media session, and
send and receive media. A user agent can be a phys-
ical SIP phone or SIP client software running on a
computer (also called softphone). A user agent needs
a SIP ID, which is signed up at a SIP provider, in order
to make and receive SIP calls.
• Location service is a database that contains informa-
tion about users, such as SIP IDs, the latest login IP
addresses, preferences, etc. Location services generally
do not interact directly with user agents.
• Servers are intermediary devices that are located within
the SIP network and assist user agents in session estab-
lishment. There are two types of SIP servers: registrar
and proxy. A registrar receives SIP registration re-
quests and updates the user agent’s information (e.g.,
login IP address) into the location service. A SIP proxy
receives SIP requests from a user agent or another
proxy and forwards the request to another location.
Here is an example to show how a user (Alice) calls an-
other user (Bob). Suppose Alice has signed up a SIP ID
PI:EMAIL at the SIP provider atlanta.com, and
Bob got his SIP ID PI:EMAIL from biloxi.com, and
Alice knows Bob’s SIP ID. When Bob comes online, he ﬁrst
sends a registration request to the registrar of biloxi.com
with its current IP address. So does Alice to register herself
at the registrar of atlanta.com.
The SIP call initialization process is shown in Figure 2.
First, Alice sends an INVITE message (M1), which contains
her SIP ID and IP address, Bob’s SIP ID, her supported
media codecs, etc., to the proxy of atlanta.com (note that
at this point Alice does not know Bob’s IP address). The
local proxy performs a DNS lookup to ﬁnd the IP address of
the proxy serving Bob’s domain, i.e., biloxi.com, and then
125forwards the INVITE message (M2) to the remote proxy. At
the meantime, the local proxy sends a Trying response (M3)
back to Alice, indicating that the INVITE has been received
and is being routed to the destination. Upon receiving the
INVITE message, the proxy of biloxi.com sends a query
to its location service to look up the registered IP address
of Bob, and then it forwards the INVITE message (M4)
to Bob. The user agent of Bob sends a Ringing response
(M6) to the proxy indicating that Bob’s phone is ringed. If
Bob decides to answer the phone, an OK message containing
Bob’s current IP (M9) is sent towards Alice; otherwise, a
Reject response is returned (not shown in the ﬁgure). From
the received OK message, Alice learns Bob’s IP address, and
sends an ACK message towards Bob (M12, M13, M14). At
this point, the SIP initialization session is done, and Alice
and Bob start the media session by sending each other audio
data directly. At the end of the media session, either party
can send a BYE message (M15) to close the call.
The media session uses Real-time Transport Protocol (RTP)
to transmit audio data, and Real-time Transport Control
Protocol (RTCP) to provide out-of-band statistic and con-
trol information for the RTP ﬂow. Both RTP and RTCP run
on top of UDP. VoIP clients can use SRTP/SRTCP [28]—
an encrypted version of RTP/RTCP—to encrypt their voice
communication. SRTP/SRTCP only requires the user to in-
stall a user agent that has encryption features, and does not
require VoIP servers to support encryption. This implies
that the user can use any VoIP provider, including local
providers that collude with the censor, to access our cir-
cumvention system. The encryption key for SRTP/SRTCP
can be either established beforehand, e.g., via MIKEY [25],
or negotiated on the ﬂy using ZRTP [31]. In this work, we
consider using pre-established keys for SRTP/ SRTCP.
5.2 Censorship Circumvention
A sketch of the circumvention procedure is as follows. The
client ﬁrst initializes a SIP session with the spoofer by send-
ing out a normal INVITE message. Upon receiving the
INVITE message, the spoofer randomly selects a dummy
host and replies with a manipulated OK message that looks
like originating from the dummy host. When the OK mes-
sage arrives, the client starts to send encrypted RTP/RTCP
packets with random content to the dummy host, and the