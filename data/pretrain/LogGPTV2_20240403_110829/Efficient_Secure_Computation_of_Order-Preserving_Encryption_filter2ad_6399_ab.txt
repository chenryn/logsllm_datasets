queries problems on encrypted outsourced data. Each protocol uses
an encoding phase to compute an encoding of the endpoints of
a query q and the query phase to actually run q on the database.
While our query phase is actually independent of OOPE, Poddar et
al. [37] replaces all GCs used during the query and Ishai et al. [23]
selects each matching data individually using PIR. Finally, Poddar
et al. is faster, but is 2-party and requires larger garbled circuits;
Ishai et al. is more secure but requires a DO storage which depends
on the database size.
3 PRELIMINARIES
In this section, we describe our problem statement, a machine
learning application and a related use case found in the literature.
We conclude the section with an overview of our solution.
3.1 Problem Statement
Our work is motivated by the following scenario. Assume a data
owner (DO) encrypts its data with an OPE, stores the encrypted
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
Anselme Tueno and Florian Kerschbaum
Table 1: Comparison of Range Query Protocols: d
is the depth of the search tree.⋃︀Rq⋃︀ is the size of the result set
Rq.⋃︀C⋃︀ is the size of the used garbled circuit which is small
for us and [23], but large for [37].
Number
of Parties
Us
[37]
[23]
3
2
3
data in a cloud database held by a cloud service provider (CSP), and
retains the encryption key. We also assume that the underlying
OPE scheme is stateful, the state of the encryption is stored in the
same database with the data, however in separated tables, and is
only used while encrypting new data. The data itself is stored in
a relational database management system, where each plaintext
is replaced by its OPE encoding. Then range queries are run by
first computing the OPE encoding then running an SQL-query as
usual, where the plaintexts in the SQL-query are replaced by their
corresponding OPE encoding.
Later, assume a data analyst (DA) wants to query the encrypted
data. Since OPE is necessarily symmetric, only the DO can encrypt
and decrypt the data stored on the cloud server. To query the data,
the DA can send the plaintext query to the DO. However, if the
query contains sensitive information which the DA wants to re-
main protected, then this free sharing of information is no longer
possible. The goal of OOPE is to allow the DA to efficiently query
the encrypted data without revealing any sensitive information on
the query and without learning more than allowed by the DO.
3.2 Application
As an application, we consider private machine learning model
involving comparisons (e.g., a decision tree [42, 44, 45]). In a supply
chain scenario, the DA could be a supplier (manufacturer) wanting
to optimize its manufacturing process based on data owned by its
buyer (another supplier or distributor). For instance, we assume
the model to be a decision tree as pictured in Figure 1, where the xi
to corresponding columns in the DO’s database) to be classified.
In order to use the model for classification the DA transforms the
decision tree into range queries, e.g., for class c1 we have the query
are the thresholds and(X1, X2, X3) is the input vector (that maps
(X1 respectively. Let P={0, . . . , 2l−
1} (e.g., l= 32) and O={0, . . . , M} (M positive integer) be plaintext
and order3 range resp., i.e.: D⊆ P. Let Ope denote any stateful OPE
● (pk, sk)← Ope.KeyGen(λ): Given λ, this algorithm returns
Ahe.KeyGen(λ).
● S′
,∐︀⎜x⨆︁, ỹ︀← Ope.Encrypt(S, x, pk): Given the state S, a
the ciphertext∐︀⎜x⨆︁, ỹ︀ and updates the state S to S′, where
⎜x⨆︁← Ahe.Encrypt(x, pk), and y← Ope.Encode(S, x) is
the order of x with y∈ O.
● x← Ope.Decrypt(∐︀⎜x⨆︁, ỹ︀ , sk): Given a ciphertext∐︀⎜x⨆︁, ỹ︀
Definition 4.2. An order-preserving encryption (OPE) consists
plaintext x and the public key pk, this algorithm computes
of the three following algorithms:
and the private key sk, this algorithm computes the plaintext
x← Ahe.Decrypt(⎜x⨆︁, sk).
′′.
′ and if r
Definition 4.5. For a data set D, Ope.Encrypt generates the
The OPE-table is sent to the server and used to generate the
following search tree during the oblivious order-preserving encryp-
tion protocol.
Definition 4.4. An OPE-tree is a tree𝒯 = (r,ℒ,ℛ), where
′ is a node
r=⎜x⨆︁ for some x,ℒ andℛ are OPE-trees such that: If r
′′ is a node in the right
in the left subtreeℒ then r ⪰ r
subtreeℛ, then r⪯ r
Data Owner state, the set of all∐︀xi , yĩ︀ such that xi ∈ D and yi is
the order of xi. The server state is the pair S=∐︀𝒯 , T̃︀ consisting of
the OPE-tree𝒯 and the OPE-table T.
Definition 4.6 (Correctness). Let D be the data set and S=
∐︀𝒯 , T̃︀, x∈ P, sk be the protocol’s inputs of the CSP, DA and DO
for its input x the output y such that y is the order of x in D∪{x}.
The Cloud Provider obtains∐︀⎜x⨆︁, ỹ︀ that is added to the OPE-table.
● OOPE(S, x, sk)=(∐︀⎜x⨆︁, ỹ︀ , y,∅)
respectively. At the end of the protocol the Data Analyst obtains
The Data Owner obtains nothing:
The encryption scheme is correct if:
Ope.Decrypt(Ope.Encrypt(S, x, pk), sk)= x
For a data set D the encryption scheme generates an ordered set
for any valid state S and x. It is order-preserving if the order is
preserved, i.e. yi< yj⇒ xi≤ xj for any i and j.
Definition 4.3. Let j1, j2, . . . be the ordering of D (i.e., xj1 ≤
xj2≤ . . .) then the OPE scheme generates an OPE-Table which is an
ordered set T=∐︁⎜xj1⨆︁, yj1̃︁ ,∐︁⎜xj2⨆︁, yj2̃︁ , . . ., where yjk ∈ O is the
of ciphertexts.
order of xjk
.
2Secret shares are random values that add up to the plaintext.
3We will use order and OPE encoding interchangeably.
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
● Ope.Decrypt(∐︀⎜x⨆︁, ỹ︀ , sk)= x
● For all∐︀⎜x1⨆︁, y1̃︀ ,∐︀⎜x2⨆︁, y2̃︀∈ T
learn⎜x⨆︁, is only for completeness with respect to the fact that the
y1< y< y2⇒⎜x1⨆︁⪯⎜x⨆︁⪯⎜x2⨆︁.
Remark 4.7. Updating the server state, i.e., allowing the server to
encryption depends on the state and the underlying OPE requires
the state update after any insertion. However, as DA’s data is only
used in the queries and not inserted in the database, the update can
be omitted without affecting the correctness of the DA’s queries.
Remark 4.8. Allowing or preventing the DA to learn the order
information y doesn’t have any impact on the efficiency. In fact,
the server can store a key-value pair, where the key is a random
string and the value is y, and reveals only the key to the DA. The
DA would still be able to submit its query to the server by replacing
the sensitive plaintexts with their corresponding key.
We say that two distributions𝒟1 and𝒟2 are computationally
indistinguishable (denoted𝒟1 c≡𝒟2) if no probabilistic polynomial
time (PPT) algorithm can distinguish them except with negligible
probability. In SMC protocols the view of a party consists of its
input and the sequence of messages that it has received during
the protocol execution [19]. The protocol is said to be secure if for
each party, one can construct a simulator that given only the input
and the output can generate a distribution that is computationally
indistinguishable to the party’s view.
view view Π
Definition 4.9 (Semi-honest Security). Let D be the data set
with cardinality n and the inputs and outputs be as previously
defined. Then a protocol Π securely implements the functionality
OOPE in the semi-honest model with honest majority if the following
conditions hold:
DO given n and the private key sk only,
DA given n, the input x and the output y only,
● there exists a PPT algorithm SDO that simulates the DO’s
● there exists a PPT algorithm SDA that simulates the DA’s
● there exists a PPT algorithm SCSP that simulates the CSP’s
CSP given the state S and the output∐︀⎜x⨆︁, ỹ︀ only.
SDO(n, sk,∅)
SDA(n, x, y)
SCSP(S,∐︀⎜x⨆︁, ỹ︀)
DO(S, x, sk),
DA(S, x, sk),
CSP(S, x, sk).
c≡ view Π
c≡ view Π
c≡ view Π
Formally:
view view Π
view view Π
(4)
(5)