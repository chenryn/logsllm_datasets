title:Misbinding Attacks on Secure Device Pairing and Bootstrapping
author:Mohit Sethi and
Aleksi Peltonen and
Tuomas Aura
Misbinding Attacks on Secure Device Pairing and Bootstrapping
Mohit Sethi∗†, Aleksi Peltonen†, Tuomas Aura†
∗NomadicLab, Ericsson Research, Finland
†Aalto University, Finland
{mohit.sethi,aleksi.peltonen,tuomas.aura}@aalto.fi
ABSTRACT
In identity misbinding attacks against authenticated key-exchange
protocols, a legitimate but compromised participant manipulates
the honest parties so that the victim becomes unknowingly as-
sociated with a third party. These attacks are well known, and
resistance to misbinding is considered a critical requirement for
security protocols on the Internet. In the context of device pairing,
on the other hand, the attack has received little attention outside
the trusted-computing community. This paper points out that most
device pairing protocols are vulnerable to misbinding. Device pair-
ing protocols are characterized by lack of a-priory information,
such as identifiers and cryptographic roots of trust, about the other
endpoint. Therefore, the devices in pairing protocols need to be
identified by the user’s physical access to them. As case studies for
demonstrating the misbinding vulnerability, we use Bluetooth and a
protocol that registers new IoT devices to authentication servers on
wireless networks. We have implemented the attacks. We also show
how the attacks can be found in formal models of the protocols with
carefully formulated correspondence assertions. The formal analy-
sis yields a new type of double misbinding attack. While pairing
protocols have been extensively modelled and analyzed, misbinding
seems to be an aspect that has not previously received sufficient
attention. Finally, we discuss potential ways to mitigate the threat
and its significance to security of pairing protocols.
CCS CONCEPTS
• Security and privacy → Systems security; Network secu-
rity; Formal methods and theory of security; • Networks → Net-
work protocol design.
KEYWORDS
Device pairing; IoT security; misbinding attack; Bluetooth; EAP-
NOOB; DPP; ProVerif; formal modelling
ACM Reference Format:
Mohit Sethi, Aleksi Peltonen and Tuomas Aura. 2019. Misbinding Attacks
on Secure Device Pairing and Bootstrapping. In ACM Asia Conference on
Computer and Communications Security (AsiaCCS ’19), July 9–12, 2019, Auck-
land, New Zealand. ACM, New York, NY, USA, 12 pages. https://doi.org/10.
1145/3321705.3329813
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
© 2019 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-6752-3/19/07.
https://doi.org/10.1145/3321705.3329813
1 INTRODUCTION
Secure device pairing is a process that bootstraps secure communi-
cation between two physical devices. It is a type of authenticated
key-exchange, but with the special characteristic that the endpoints
are physical devices which the user can see or touch directly. Un-
like most security protocols, secure device pairing does not require
pre-established cryptographic credentials or security infrastructure.
Instead, the user acts as an out-of-band communications channel
or a trusted party that provides the initial security.
The focus of this paper is on identity-misbinding [33] or unknown-
key-share attacks [9] where the wrong endpoints are paired with
each other. These attacks depend on one of the user’s devices being
compromised, and they do not violate the basic secrecy goals. Nev-
ertheless, such vulnerabilities have been considered unacceptable
and avoidable in network security protocols. Our main message is
that most device-pairing protocols are vulnerable to the misbinding
attacks. As we will argue, the vulnerability is not caused by tech-
nical errors in the protocol design; rather, it arises from the lack
of verifiable identifiers in situations where the endpoint identity is
defined by the user’s physical access to the device.
This paper is not intended to sound alarm but rather to bring clar-
ity and understanding to a previously ignored question about device
authentication. Our contributions are the following: (i) bringing
attention to identity-misbinding vulnerabilities in device-pairing
and bootstrapping protocols, (ii) detailed analysis and characteriza-
tion of the vulnerabilities, (ii) examples of concrete, implemented
attacks against Bluetooth Secure Simple Pairing and the proposed
EAP-NOOB protocol for registering new devices to a network, (iii)
formal specification of the violated security property as a corre-
spondence assertion that takes into account the user intention, and
(iv) balanced discussion of the impact of these attacks and poten-
tial countermeasures. The significance of our work arises from the
wide deployment of the vulnerable pairing protocols in everyday
applications.
The rest of the paper is structured as follows. Section 2 dis-
cusses the relevant state of the art in security protocols and attacks.
Section 3 explains the misbinding attack against device-pairing
protocols and a similar attack when registering new IoT devices to
an authentication server. In Section 4, we show how to model the
attack and the related security properties. We also discover a new
variant of the misbinding attack. Section 5 considers the potential
solutions. Section 6 discusses the significance of the results, and
Section 7 concludes the paper.
Session 6A: IoT SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand4532 BACKGROUND
2.1 Security protocol attacks and
correspondence assertions
The goal of authenticated key exchange is to establish a shared
cryptographic key between two or more communication endpoints,
which then use the shared key for protecting communication in-
tegrity and confidentiality. Authenticated key-exchange protocols
should be secure against the so-called Dolev-Yao attacker [19], which
is able to spoof, intercept and modify messages in the network in
arbitrary ways, except when it lacks the necessary cryptographic
keys. The attacker may impersonate one of the communication
endpoints or set itself as a man in the middle (MitM) between them.
Even carefully designed protocols have been found to be vulnerable
to forwarding and interleaving attacks [2][36], in which the attacker
itself is a legitimate participant in the protocol but can mislead
others by cleverly replaying messages. In closed systems, such in-
sider attacks could sometimes be tolerated, but in large systems
and open networks such as the Internet and the Internet of Things,
there always are some malicious “insiders”. Thus, modern security
protocols are required to be immune to these attacks.
The authentication goals of key-exchange protocols can be de-
fined in terms of matching or agreement between the records made
by different endpoints on the protocol execution [15, 37]. The same
goals can be stated as correspondence assertions [45]. These asser-
tions define relations between later and earlier events in the pro-
tocol execution. For example, a common assertion is that, if Alice
accepts a session key to be used with Bob, both Alice and Bob must
have previously declared an intent to create such a session key. This
way, we can make global assertions about the events that should
or should not take place in a distributed system. Injective corre-
spondence further requires that each such declaration of intent can
result in at most one accepted session key. The assertions are typi-
cally parameterized with all the knowledge of protocol inputs and
parameters which should match between the events and endpoints.
An advantage of specifying security properties as correspon-
dence assertions is that, in addition to basic authentication proper-
ties, the assertions capture the protocol designer’s implicit expecta-
tions about its execution and, thus, can help to detect subtle flaws
that might otherwise go unnoticed.
Figure 1: Identity misbinding against signed Diffie-Hellman
the authentication. A and C have different understanding of who
they are communicating with, which violates a correspondence
property that an authenticated key exchange intuitively should
have.
The above attack was identified by Diffie et al. [15] and it has been
given many names including unknown-key-share [9] and identity
misbinding [33]. In different versions of the attacks, the misled
party may be the initiator or the responder or both. Diffie et al.
initially presented the attack to motivate the station-to-station
(STS) protocol. In basic STS, the signatures are encrypted with the
Diffie-Hellman session key, and the paper also suggests another
variant where a message authentication code (MAC) replaces the
encryption. The function of the encryption or MAC is to bind the
session key to the signatures, which prevents the attacker, who
does not know the session key, from replacing the signatures.
The STS protocol, including both the encryption and MAC vari-
ants, is still vulnerable to misbinding attacks if the attacker B man-
ages to register A’s or C’s public signature key as its own. This
vulnerability is well known and caused by failure of the certification
authority to verify that the subject possesses the private key. Never-
theless, the dependence on the CA following best practices can and
should be avoided. The SIGMA protocol family by Krawczyk [33]
computes the MAC explicitly on the message sender’s identifier,
rather than its signature. The SIGMA protocols are highly influ-
ential because they include the IKEv2 key exchange [31] and its
predecessors in the IPsec protocol suite. As a consequence, resis-
tance to the misbinding attacks is considered one of the critical
requirements for key-exchange protocols designed for the Internet.
2.2 Identity misbinding
Figure 1 shows an attack on a badly authenticated key exchange.
In the figure, the two communication endpoints A and C perform a
Diffie-Hellman (DH) key exchange, and the endpoints sign both key
shares in order to reach agreement on them. However, a man-in-the-
middle attacker B is located between the endpoints and manipulates
the messages. In messages travelling from A to C, it replaces A’s
identifier and signature with its own. This leads to an inconsistency
in the states of A and C: A correctly thinks that it shares the session
key дxy with C, but C has the non-matching belief that it shares the
key дxy with B. The attack does not compromise secrecy of data
because B does not learn the session key. Moreover, one could argue
that A has correctly authenticated C, and more controversially, that
C has correctly authenticated B because B is entitled to choose any
key share it likes. Nevertheless, something clearly is amiss about
2.3 Device pairing and relay attack
Secure device pairing is a bootstrapping process that establishes
a secure channel between two previously unassociated devices.
These devices often communicate over a short-range wireless chan-
nel such as Bluetooth [43], Wi-Fi [28], or Zigbee [6]. While the
goals of device pairing are similar to those of any authenticated
key-exchange protocol, there is one major difference: the devices
typically have no prior security context, such as knowledge of each
other’s public keys or certificates and identifiers. They may not
even have identifiers or an assigned owner before the pairing es-
tablishes those. Additionally, the devices may not be able to rely
on the availability of trusted infrastructure due to the ad-hoc and
local nature of the short-range wireless communication.
Typical device pairing protocols perform a Diffie-Hellman (DH)
or an Elliptic Curve Diffie-Hellman (ECDH) key exchange over the
in-band wireless channel and then use a human-assisted out-of-band
Session 6A: IoT SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand454(OOB) channel to thwart potential impersonation and man-in-the-
middle attackers in the in-band channel. Several researchers have
studied the security and usability of device pairing protocols in
significant detail [22, 26, 30, 42]. The existing literature assumes a
powerful Dolev-Yao type attacker on the in-band wireless channel
and an OOB channel that provides some inherent protection for
the confidentiality and/or integrity of the data exchanged over it.
Bluetooth (see Section 3.1) is one of the most widely deployed
and analyzed wireless technologies. Modern Bluetooth devices use
the Simple Secure Pairing (SSP) [43] protocols, although some may
be backward compatible with the less secure Legacy Pairing meth-
ods. Wireless devices have different input and output capabilities,
which is why SSP supports multiple different user interactions
and is actually a family of key-exchange protocols. In the numeric-
comparison mode, the user is asked to compare six-digit codes on
two device displays while, in the out-of-band mode, the user de-
livers similar verification information securely from one device to
another. Either way, the out-of-band communication by the user
prevents man-in-the-middle attacks on the ECDH key exchange
that takes place over the in-band wireless channel. There is also a
just-works mode for devices that support neither output nor input
of six-digit codes. Obviously, this mode lacks secure authentication.
Research literature on Bluetooth security discusses several at-
tacks that are relevant to pairing protocols in general. It may be
possible to spy on the OOB channel or to misrepresent the device
capabilities so that the devices negotiate the insecure just-works
mode [24]. The attacker can trick remote devices into believing
that they are in direct communication by relaying unmodified pro-
tocol messages between their locations [35]. In the legacy version
of Bluetooth where session encryption was not mandatory, relay-
ing of the authentication messages could result in pairing of the
wrong devices. In modern protocols, this attack is relevant when
the primary goal is the device authentication and not the follow-
ing communication, for example, when a Bluetooth device is used
as a door key or as a location beacon. The Bluetooth just-works
mode can lead to accidental or maliciously induced association with
a wrong peer device, as noted among others by Suomalainen et
al. [44]. If the device supports multiple simultaneous key exchanges,
there can be confusion between the resulting sessions [14]. The
end result in these attacks is akin to identity misbinding because
the reality of the created security associations does not correspond
to the device’s or user’s perception.
Poorly designed internal architecture of a Bluetooth endpoint,
such as a mobile phone, may also lead to attacks. Naveed et al. [38]
describe how malicious applications on an Android smartphone
can hijack connections from attached Bluetooth (medical) devices
in order to steal data. The problem arises from the fact that the
Android permission and security model allows any application
with the Bluetooth permission to communicate with all external