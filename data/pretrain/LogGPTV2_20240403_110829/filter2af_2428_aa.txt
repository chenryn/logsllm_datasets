对于mimikatz的利用方式：封装，打包，进程注入，powershell化，现在又出现了内存转储的利用方式，真可谓无所不用其极。无他，就因为Mimikatz仍然是从
Windows系统lsass上提取凭据时的首选工具。当然，这是由于当Microsoft引入了每个新的安全控制措施，GentilKiwi总是袖手旁观。如果您曾经研究过Mimikatz所做的工作，那么你会发现，这并不是一件容易的事，因为它支持Windows
x86和x64的所有版本（最近还增加了支持ARM
arch架构的Windows）。当然，随着Mimikatz多年来的成功，蓝队现在非常善于检测其多种形式的用途。本质上，在主机上执行Mimikatz，如果环境完全成熟，你的行为可能会被标记。
通过线上线下采访别人，现在的我对红队的想法是：不仅可以执行脚本，还可以理解他们所使用的工具。而且，我们发现mimikatz出新姿势的速度，永远比不上安全供应商打压的速度。因此，了解mimikatz特定技术如何作用于API调用，可以在防护严密的环境中避免被发现。
话虽这么说，Mimikatz是一种以各种形式附带在大多数后开发工具套件的工具。并且，尽管一些安全供应商正在监视与lsass的进程交互，但更多安全厂商决定尝试识别Mimikatz本身。
我一直在考虑剥离Mimikatz以进行某些活动（主要是那些不可行或不允许进行内存转储的活动），但很长一段时间内我都很困扰，因为平时对它接触比较少，所以我花了很长时间来研究。
因此，在未来几篇博文中，我想探索一下它的神奇之处，从一切开始的地方开始：`WDigest`。具体来说，探索在lsass中明文凭证是如何被缓存的，以及如何使用将该凭证从内存中将`sekurlsa::wdigest`提取出来。这将意味着涉及拆卸和调试过程，故而，虽然很难复制Mimikatz所做的工作，但是如果仅使用一小部分可用功能，还是值得根据Mimikatz源代码diy出一个小工具。
最后，我还将探讨在lsass中加载任意DLL的一些方法，希望可以将其与演示的代码示例结合使用。
注意：这篇文章大量使用了Mimikatz的源代码，其开发人员投入了大量的时间。向他们致敬。
**那么，神奇的`sekurlsa :: wdigest`实际上是如何工作的呢？**
如前所述，在本文中，我们将讨论的是`WDigest`，这可以说是Mimikatz最著名的功能了。`WDigest`凭据缓存默认情况下处于启用状态，直到Windows
Server 2008 R2，此后版本禁用了纯文本凭据缓存。
反编译操作系统组件时，我通常喜欢附加调试器，并查看其在运行时如何与操作系统交互。不幸的是，在这种情况下，mimikatz不会像将WinDBG附加到lsass一样那么简单，因为很快Windows会停止运行，然后警告您有待重启。相反，我们必须将之附加到内核并从Ring-0切换到lsass进程。如果你以前从来没有附加过WinDBG内核，可以看看我以前的博客，里面提及了如何去建立一个内核调试器。[传送门]（
附加了内核调试器后，我们需要获取lsass进程的`EPROCESS`地址，该地址可通过以下`!process 0 0 lsass.exe`命令找到：
`EPROCESS`地址（上图是`ffff9d01325a7080`）被标记之后，我们可以请求将调试会话切换到lsass进程上下文：
一个简单lm的例子将表明我们现在可以访问WDigest DLL内存空间：
如果此时您发现字符没有被正确处理，可以使用命令`.reload /user`，通常会有所帮助。
附加了调试器后，就可以深入研究WDigest了。
## 深入研究wdigest.dll（涉及lsasrv.dll）
如果查看Mimikatz源代码，可以看到内存中识别凭据的进程是扫描签名。使用时下流行的工具`Ghidra`，看看Mimikatz在寻找什么。
我的计算机版本是Windows 10 x64，因此我将重点介绍`PTRN_WIN6_PasswdSet`签名，如下图：
将此搜索签名提供给Ghidra之后，我们发现。Mimikatz扫描内存以查找的内容为：
上图出现了`LogSessHandlerPasswdSet`函数。具体来说，签名引用仅在`l_LogSessList`指针之外。该指针是从WDigest中提取凭证的关键，但是在行动之前，先做一个备份，然后通过检查交叉引用来弄清楚到底是什么调用了此函数，然后来到了这里：
在这里，我们从`WDigest.dll`中导出了一个函数`SpAcceptCredentials`，但这是做什么的呢？
这看起来很有搞头，因为凭证是通过此回调函数传递的。为了确认没有找错地方，在WinDBG中添加一个断点：`bp
wdigest!SpAcceptCredentials`，然后使用`runas`命令在Windows上生成外壳程序：
这应该足以触发断点。检查调用的参数，可以看到传入的凭据：
如果继续执行并在`wdigest!LogSessHandlerPasswdSet`上添加另一个断点，则会发现，尽管传递了用户名，但看不到代表密码的参数。但是，如果我们在调用`LogSessHandlerPasswdSet`之前看一下，我们会发现：
这实际上是用于`Control Flow Guard`的存根（Ghidra
9.0.3看起来对显示CFG存根有改进），但后续是在调试器中,该调用实际上是针对`LsaProtectMemory`的：
预料之中，因为我们知道凭据是加密存储在内存中的。不幸的是，`LsaProtectMemory`函数没有在lsass之外公开，因此我们需要知道如何重新创建这个函数来解密提取的凭证。接下来的反汇编程序显示此调用实际上只是一个针对`LsaEncryptMemory`的封装：
并且`LsaEncryptMemory`实际上是`BCryptEncrypt`的封装调用：
有趣的是，加解密函数是基于所提供的要加密的数据块长度来选择的。如果提供的缓冲区长度可以被8整除（由上图中的`param_2＆7`按位操作提供），则使用`AES`。如果失败，则使用`3Des`。
现在，我们知道我们的密码由`BCryptEncrypt`加密，但是密钥呢？上图中，我们可以看到对`lsasrv!h3DesKey`和`lsasrv!hAesKey`的引用。跟踪对这些地址的引用发现，地址`lsasrv!LsaInitializeProtectedMemory`用于为每个地址分配一个初始值。具体来说，每个键都是基于对`BCryptGenRandom`的调用生成的：
这意味着，每次lsass启动时都会随机生成一个新密钥，在解密任何缓存的WDigest凭据之前，必须先提取新密钥。
回到Mimikatz源代码，我们看到，确实存在对`LsaInitializeProtectedMemory`函数的搜寻，并再次提供了针对不同Windows版本和体系结构的完整签名列表：
如果我们在`Ghidra`中进行搜索，我们会发现它位于此处：
由上图可以看到对`hAesKey`地址的引用。因此，类似于上述签名搜索，Mimikatz会寻找内存中的加密密钥。
接下来，我们需要了解Mimikatz如何将密钥从内存中取出。为此，需要使用Mimikatz中的`kuhl_m_sekurlsa_nt6_acquireKey`，高亮处显示了该工具在支持不同OS版本方面所需要的长度。我们看到`hAesKey`和`h3DesKey`（实际上是从`BCRYPT_KEY_HANDLE`返回的类`BCryptGenerateSymmetricKey`）指向内存中的一个结构，该结构由包含所生成的对称`AES`和`3DES`密钥的字段组成。可以在Mimikatz中找到该结构的文档：
    typedef struct _KIWI_BCRYPT_HANDLE_KEY {
        ULONG size;
        ULONG tag;  // 'UUUR'
        PVOID hAlgorithm;
        PKIWI_BCRYPT_KEY key;
        PVOID unk0;
    } KIWI_BCRYPT_HANDLE_KEY, *PKIWI_BCRYPT_HANDLE_KEY;
通过检查上面引用的`UUUR`标记，可以将其与WinDBG相关联，以确保我们不会出错：
在偏移量`0x10`处，我们看到Mimikatz正在引用`PKIWI_BCRYPT_KEY`，它具有以下结构：
    typedef struct _KIWI_BCRYPT_KEY81 {
        ULONG size;
        ULONG tag;  // 'MSSK'
        ULONG type;
        ULONG unk0;
        ULONG unk1;
        ULONG unk2; 
        ULONG unk3;
        ULONG unk4;
        PVOID unk5; // before, align in x64
        ULONG unk6;
        ULONG unk7;
        ULONG unk8;
        ULONG unk9;
        KIWI_HARD_KEY hardkey;
    } KIWI_BCRYPT_KEY81, *PKIWI_BCRYPT_KEY81;
毫无疑问，下图内容与WinDBG使用相同的引用标记：
该结构的最后一个成员是对Mimikatz的引用，名为`KIWI_HARD_KEY`，包含以下内容：
    typedef struct _KIWI_HARD_KEY {
        ULONG cbSecret;
        BYTE data[ANYSIZE_ARRAY]; // etc...
    } KIWI_HARD_KEY, *PKIWI_HARD_KEY;
该结构由`cbSecret`键的大小组成，其后是`data`字段中的实际键。这意味着我们可以使用WinDBG通过以下方式提取此密钥：
由上图可知，`h3DesKey`长为0x18字节，内容为：
    b9 a8 b6 10 ee 85 f3 4f d3 cb 50 a6 a4 88 dc 6e ee b3 88 68 32 9a ec 5a。
知道了这一点，我们可以遵循相同的过程来提取`hAesKey`：
现在我们了解了密钥的提取方式，需要寻找WDigest缓存的实际凭据。回到之前讨论的`l_LogSessList`指针。此字段对应于一个链表，我们可以使用WinDBG命令`!list