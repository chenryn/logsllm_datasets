pose a linear PCP and a linear commitment primitive that
forces the prover to act like an oracle.
Specify and compute. V transforms its desired compu-
tation, Ψ, into a set of equivalent constraints, C. V sends
Ψ (or C) to P, or P may come with them installed.
To gain from outsourcing, V must amortize the costs of
compiling Ψ to C and generating queries. Thus, V veriﬁes
computations in batches [45] (although they need not be
Figure 1—The PEPPER protocol [45], which is GINGER’s base.
Though not depicted, many of the protocol steps happen in par-
allel, to facilitate batching.
executed in a batch). A batch (of size β) refers to a set of
computations in which Ψ is the same but the inputs are
different; a member of the batch is called an instance.
In the protocol, V has inputs x1, . . . , xβ that it sends to
P (not necessarily all at once), which returns y1, . . . , yβ;
for each instance i, yi is supposed to equal Ψ(xi).
For each instance i, an honest P stores a proof vector
wi that encodes a satisfying assignment to C(X = xi, Y =
yi); wi is constructed as described in Section 2.2. Being a
vector, wi can also be regarded as a linear function πi—or
an oracle of the kind described above.
Extract commitment. V cannot inspect {πi} directly
(they are functions; written out, they would have an en-
try for each value in a huge domain). Instead, V extracts a
commitment to each πi. To do so, V randomly generates a
commitment vector r ∈ Fn. V then homomorphically en-
crypts each entry of r under a public key pk to get a vector
Enc(pk, r) = (Enc(pk, r1), Enc(pk, r2), . . . , Enc(pk, rn)).
We emphasize that Enc(·) need not be fully homomor-
phic encryption [27] (which remains unfeasibly expen-
sive); PEPPER uses ElGamal [23, 45].
V sends (Enc(pk, r), pk) to P. If P is honest, then πi is
linear, so P can use the homomorphism of Enc(·) to com-
pute Enc(pk, πi(r)) from Enc(pk, r), without learning
r. P replies with (Enc(pk, π1(r)), . . . , Enc(pk, πβ(r))),
which is P’s commitment to {πi}. V then decrypts to get
(π1(r), . . . , πβ(r)).
Verify. V now generates PCP queries q1, . . . , qµ ∈ Fn,
as described in Section 2.2. V sends these queries to P,
j=1 αj·qj, where
each αj is randomly chosen from F (here, · represents
scalar multiplication).
along with a consistency query t = r+(cid:80)µ
For ease of exposition, we focus on a single proof πi;
however, the following steps happen β times in parallel,
using the same queries for each of the β instances. If P
is honest, it returns (πi(q1), . . . , πi(qµ), πi(t)). V checks
j=1 αj · πi(qj); this is known as
that πi(t) = πi(r) +(cid:80)µ
3
  xyEnc(r)y ←Ψ(x) q1, q2, ..., qµ, tprover (P) Enc(π(r))consistency testπ(q1), …, π(qµ), π(t)linear PCP verifierlinearity testπ(q1), …, π(qµ)q1, q2, ..., qµrπ(r)tπ(t)quad. testcircuit testverifier (V) πthe consistency test. If P is honest, then this test passes,
by the linearity of π. Conversely, if this test passes then,
regardless of P’s honesty, V can treat P’s responses as the
output of an oracle (this is shown in previous work [35,
45]). Thus, V can use {πi(q1), . . . , πi(qµ)} in the PCP
tests described in Section 2.2.
2.4 PCPs and arguments deﬁned more formally
The deﬁnitions of PCPs [5, 6] and argument systems [19,
32] below are borrowed from [35, 45].
A PCP protocol with soundness error  includes a
probabilistic polynomial time veriﬁer V that has access to
a constraint set C. V makes a constant number of queries
to an oracle π. This process has the following properties:
• PCP Completeness. If C is satisﬁable, then there ex-
ists a linear function π such that, after V queries π,
Pr{V accepts C as satisﬁable} = 1, where the proba-
bility is over V’s random choices.
If C is not
• PCP Soundness.
then
Pr{V accepts C as satisﬁable} <  for all purported
proof functions ˜π.
satisﬁable,
An argument (P, V) with soundness error  comprises P
and V, two probabilistic polynomial time (PPT) entities
that take a set of constraints C as input and provide:
• Argument Completeness. If C is satisﬁable and P has
access to a satisfying assignment z, then the interac-
tion of V(C) and P(C, z) makes V(C) accept C’s satis-
ﬁability, regardless of V’s random choices.
• Argument Soundness. If C is not satisﬁable, then for
every malicious PPT P∗, the probability over V’s ran-
dom choices that the interaction of V(C) and P∗(C)
makes V(C) accept C as satisﬁable is less than .
3 Protocol reﬁnements in GINGER
In principle, PEPPER solves the problem of veriﬁed com-
putation. The reality is less attractive: PEPPER’s com-
putational burden is high, its network costs are absurd,
and its applicability is limited (to straight line numeri-
cal computations). Our system, GINGER, mitigates these
issues: it lowers costs through protocol reﬁnements (pre-
sented in this section), and it applies to a much wider
class of computations (as we discuss in Section 4).
GINGER’s reﬁnements eliminate many queries, by re-
lying on a new analysis of the base commitment primi-
tive. To motivate this analysis, we note that there is some-
thing seemingly redundant in the base machinery (see
Figure 1): why does the linear PCP require a linearity
test (§2.2) if an honest prover depends on the linear-
ity of its function π to pass the linear commitment pro-
tocol’s consistency test (§2.3)? Can we remove one of
these tests, or combine them somehow? The reason that
4
PEPPER appears to need both tests is that their guarantees
are (so far) subtly different:
• Consistency test (§2.3): First, an honest prover is
guaranteed to pass this test. Second, if the prover—
even a cheating one—passes this test, then it is very
likely bound to some function (as shown in [35, 45]).
• Linearity test (§2.2): This test is needed in case the
prover cheats—it establishes that π is linear (as re-
quired by the rest of the PCP protocol). More accu-
rately, if π is far from being linear, the test is some-
what likely to catch that case.
Yet, it seems unsatisfying that both tests are required
when composing linear commitment and the linear PCP:
can a prover really pass the consistency test systemati-
cally with a function that the linearity test would reject?
In fact, our intuitive dissatisfaction is well-founded: this
paper proves that the commitment primitive (which in-
cludes the consistency test) is far stronger than the linear-
ity test. Put simply, even a cheating prover is very likely
bound to a function that is linear, or almost so.
Practically, this result saves query generation and re-
sponse costs. For one thing, we can eliminate linearity
tests from the protocol. More signiﬁcantly, we eliminate
ampliﬁcation: PEPPER needed to repeat the protocol to
turn the linearity test’s guarantee of “somewhat likely”
into “very likely”. In contrast, our result already gives a
guarantee of “very likely”, so no repetition is required.
More broadly, this result means that the commit-
ment primitive is considerably more powerful
than
was realized—it efﬁciently commits an untrusted en-
tity to a linear function and extracts evaluations of that
function—and may apply elsewhere.
Details. The protocol
reﬁnements are rooted in a
strengthened soundness analysis. Soundness error (for
example,  in Section 2.4) refers to the probability that
a protocol or test succeeds when the condition that it is
verifying or testing is actually false. The ideal is to have
a small upper-bound on soundness error.
The soundness of the PCP protocol in Section 2.2 and
Appendix A.1 is connected to the soundness of linearity
testing [16]. Speciﬁcally, the base analysis proves that if
the prover returns y (cid:54)= Ψ(x), then the prover survives all
tests (linearity, quadratic correction, circuit) with prob-
ability less than 7/9 (requiring ρ runs to make (7/9)ρ
small). The 7/9 derives from a result [8] that if the proof
oracle is not “somewhat close” to linear, then the linear-
ity test passes with probability < 7/9 (though fascinat-
ing, this result is inconveniently weak in our context).
Our analysis, detailed in Appendix A.2, establishes
that the commitment protocol binds the prover to a func-
tion that is extremely close to linear (otherwise, the
prover could break the semantic security of the homo-
PCP encoding size (n)
V’s per-instance CPU costs
Issue commit queries
Process commit responses
Issue PCP queries
Process PCP responses
P’s per-instance CPU costs
Issue commit responses
Issue PCP responses
Network cost (per instance)
PCP soundness error
Overall soundness error
PEPPER [45]
s2 + s, in general
GINGER
s2 + s, in general
(e + 2c) · n/β
d
ρ·(χ·f +(cid:96)(cid:48)·f +5c)·n/β
ρ · (2(cid:96)(cid:48) + |x| + |y|) · f
(e + 2c) · n/β
d
(χ·f + (cid:96)·f +2c)·n/β
(2(cid:96) + |x| + |y|) · f
h · n
(ρ · (cid:96)(cid:48) + 1) · f · n
((ρ·(cid:96)(cid:48)+1)·|p|+|ξ|)·n/β
(7/9)ρ = 2.3 · 10−8
2.4 · 10−8
h · n
((cid:96) + 1) · f · n
(((cid:96)+1)·|p|+|ξ|)·n/β
κ = 2.6 · 10−6
4.5 · 10−6
|x|,|y|: # of elements in input, output
n: # of components in linear function π (§2.2)
s: # of variables in constraint set (§2.1)
χ: # of constraints in constraint set (§2.1)
(cid:96) = 3: # of high-order PCP queries in
(cid:96)(cid:48) = 7: # of high-order PCP queries in
GINGER (§A.2, §A.3)
PEPPER (§A.1)
ρ = 70: # of PCP reps. in base scheme (§A.1)
β: batch size (# of instances) (§2.3)
e: cost of encrypting an element in F
d: cost of decrypting an encrypted element
f : cost of multiplying in F
h: cost of ciphertext add plus multiply
c: cost to generate 192-bit pseudorandom #
|p|: length of an element in F
|ξ|: length of an encrypted element in F
Figure 2—High-order costs and error in GINGER, compared to its base (PEPPER [45]), for a computation represented as χ constraints
over s variables (§2.1). The soundness error depends on ﬁeld size (Appendix A.2); the table assumes |F| = 2128. Many of the
cryptographic costs enter through the commitment protocol (see Section 2.3 or Figure 12); Section 6 quantiﬁes the parameters. The
“PCP” row include the consistency query and check. The network costs slightly underestimate by not including query responses.
morphic encryption used by GINGER and PEPPER). This
results in the PCP soundness error improving from 7/9
to κ, where κ ≈ 4 6(cid:112)1/|F|; this analysis does not depend
on linearity tests, so they can be dropped.
The soundness error is somewhat
low by crypto-
graphic standards, but in practice, a failure rate (when
the prover is malicious) of 1 in 200,000 is reasonable.
A further optimization. GINGER reuses some queries
across the quadratic correction and circuit tests; this re-
ﬁnement is detailed and justiﬁed in Appendix A.3.
Savings. Most signiﬁcantly, V can take advantage of the
lower soundness error to run ρ = 1 instead of ρ = 70
repetitions of the PCP protocol. Also, per repetition,
V’s work to generate pseudorandom queries decreases
by 3/5 (2/5 coming from the elimination of linearity
tests and 1/5 from reusing queries). These gains are de-
picted in Figure 2, most notably in the reduction from
ρ · (cid:96)(cid:48) ≈ 500 to (cid:96) = 3 total PCP queries.
The total savings for the veriﬁer depend on the relative
cost of pseudorandom number generation (encapsulated
by c) and encryption (encapsulated by e). These savings
show up in β∗, the minimum batch size (§2.3) at which
V gains from outsourcing. As shown in Section 6.1, the
reduction in β∗ can be several orders of magnitude (when
e is small). Finally, taking |p| = 128 bits and |ξ| = 2 ·
1024 bits, the savings in network costs are 1–2 orders of
magnitude (holding β constant).
4 Broadening the space of computations
GINGER extends to computations over ﬂoating-point
fractional quantities and to a restricted general-purpose
programming model that includes inequality tests, log-
ical expressions, conditional branching, etc. To do so,
GINGER maps computations to the constraint-over-ﬁnite-
ﬁeld formalism (§2.1), and thus the core protocol in Sec-
tion 3 applies. In fact, our techniques3 apply to the many
protocols that use the constraint formalism or arithmetic
circuits. Moreover, we have implemented a compiler (de-
rived from Fairplay’s [39]) that transforms high-level
computations ﬁrst into constraints and then into veriﬁer
and prover executables.
The challenges of representing computations as con-
straints over ﬁnite ﬁelds include: the “true answer” to the
computation may live outside of the ﬁeld; sign and or-
dering in ﬁnite ﬁelds interact in an unintuitive fashion;
and constraints are simply equations, so it is not obvi-
ous how to represent comparisons, logical expressions,
and control ﬂow. To explain GINGER’s solutions, we ﬁrst
present an abstract framework that illustrates how GIN-
GER broadens the set of computations soundly and how
one can apply the approach to further computations.
Framework to map computations to constraints. To
map a computation Ψ over some domain D (such as the