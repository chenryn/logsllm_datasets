### Agnostic to the Method of Acquisition

Today, programmable networks are typically implemented using Software-Defined Networking (SDN) [23, 37]. SDN decouples the control plane from the data plane and necessitates a method for the control plane to communicate with the data plane programmatically. The most prominent API for this interaction is OpenFlow [42]. Eden focuses on implementing functionality at the network edges with a broader and more versatile data-plane interface, further leveraging application-specific knowledge.

### P4: A Language for Packet Processor Programming

P4 [14] proposes a language for programming packet processors, thus generalizing OpenFlow [42]. P4 targets modern switching chips, such as those in [15], and is tailored to a specific abstract forwarding model that includes parsing, matching, and action stages. This results in a constrained programming model that limits its expressivity; for instance, it can only encode policies through exact matches. Encoding a policy involving comparison operations, like the flow scheduling example used throughout this paper, would be challenging with P4.

### End Host Participation in Network Functionality

The concept of end hosts participating in network functionality has been explored in enterprise and data center networks [49, 16, 21, 34, 59, 57]. For example, Open vSwitch [50] extends the OpenFlow [42] programming model to end hosts. However, even in these proposals, the data-plane interface is limited—it can be programmed to match primarily on packet headers and apply a fixed set of actions. These systems can implement application-agnostic network functions operating at coarse time scales. In contrast, Eden can accommodate dynamic network functions that require application semantics and operate at per-packet time scales.

### Incorporating Application Semantics

Network exception handlers [34] were one of the first proposals to incorporate application semantics into management policies. Similar to program exception handlers, end hosts register exception conditions with network controllers, which then notify the end hosts when exceptions occur. Corresponding actions at the end hosts are parameterized with application context. In Eden, applications are also a primary focus, but Eden goes beyond static actions like rate limiting by allowing functions to be evaluated at end hosts with minimal controller involvement.

### Network Function Virtualization (NFV)

Network function virtualization (NFV) aims to virtualize arbitrary network functions traditionally implemented on specialized physical devices. Eden can be seen as a pragmatic and reasoned approach within the NFV space, focusing on end-host functionalities.

### Click Modular Router

The Click software router [36] allows the construction of modular data-plane processing pipelines, emphasizing the flexible chaining of building blocks called elements. Eden operates in the data plane but leverages application information to enable application-level, message-oriented policies. The enclaves in Eden share similarities with Click's elements but offer a higher-level environment for network policy developers. Click’s elements, however, are more suitable for performance-critical tasks, such as rate limiting.

### Rapid Prototyping and Data Plane Innovation

Eden enables rapid prototyping of network functions in the data plane. Other efforts to drive innovation in the data plane include PLUG [20] and SwitchBlade [7], which focus on implementing full protocols like IPv6 on programmable hardware like FPGAs.

### Eden Interpreter and Metadata Handling

Similar to packet filters [43, 41], the Eden interpreter processes packets in a constrained execution environment inside the kernel according to user-defined programs. However, the Eden interpreter supports richer packet processing to accommodate more expressive action functions. The idea of associating metadata with network traffic as it is processed in the network stack is similar to Mbuf tags [35]. This work also proposes a user-level mechanism to attach metadata to packets. Eden aims to extend the interface to higher-level libraries and applications.

### Concluding Remarks

This paper introduces Eden, an architecture for implementing network functions at end hosts. Eden involves applications (stages) classifying application data into messages and annotating them with metadata. Enclaves use this message and metadata information to apply generic stateful actions on network packets. Network operators express desired actions in a high-level language based on F# code quotations, which are compiled to bytecode suitable for execution by an interpreter in the enclave. The enclave compiler and runtime manage any state in the enclave, allowing network programmers to focus on the functionality to be achieved. The combination of stages, enclaves, and the interpreted action language allows for the natural expression of a variety of functions with minimal performance overhead.

### Acknowledgments

We are grateful to our colleague Andy Slowey for providing technical support with our experimental setup. We also thank Rolf Neugebauer, Stuart Wray, and their colleagues at Netronome for their assistance with the NFP3240 NICs. Finally, we thank Dimitrios Vytiniotis, Z. Morley Mao, and the anonymous SIGCOMM reviewers for their valuable feedback.

### References

[1] M. Alizadeh, T. Edsall, S. Dharmapurikar, R. Vaidyanathan, K. Chu, A. Fingerhut, V. T. Lam, F. Matus, R. Pan, N. Yadav, and G. Varghese. CONGA: Distributed Congestion-aware Load Balancing for Datacenters. In: SIGCOMM. ACM, 2014.
...
[65] J. Zhou, M. Tewari, M. Zhu, A. Kabbani, L. Poutievski, A. Singh, and A. Vahdat. WCMP: Weighted Cost Multipathing for Improved Fairness in Data Centers. In: EuroSys. ACM, 2014.