is agnostic to how it is obtained.
Today, programmable networks are implemented us-
ing Software-Deﬁned Networking (SDN) [23, 37]. SDN
decouples the control plane from the data plane and
requires a way for the control plane to communicate
with the data plane programmatically. The most promi-
nent API for such control- and data-plane interaction
is OpenFlow [42]. Eden focuses on implementing func-
tionality at the ends with a wider and richer data-plane
interface, and goes one step further to take advantage
of application knowledge.
P4 [14] proposes a language for programming packet
processors, hence, generalizing OpenFlow [42]. P4 tar-
gets modern switching chips, e.g., [15], and is tailored to
a speciﬁc abstract forwarding model comprising parse,
match and action. This results in a restricted program-
ming model that limits its expressivity; for example,
to policies that can be encoded through exact matches.
Using P4 to encode a policy involving comparison oper-
ations, like the ﬂow scheduling example used through-
out this paper, would be challenging.
The idea of end hosts participating in network func-
tionality has been explored in enterprise and data cen-
ter networks [49, 16, 21, 34, 59, 57]. For example, Open
vSwitch [50] extends the OpenFlow [42] programming
model to end hosts. However, even in these propos-
als, the data-plane interface is narrow—it can be pro-
grammed to match (mostly) on packet headers and ap-
ply a ﬁxed set of actions. They can thus implement
application-agnostic network functions that operate at
coarse time-scales.
Instead, Eden can accommodate
network functions that are dynamic, require application
semantics, and operate even at per-packet time-scales.
Network exception handlers [34] was one of the ﬁrst
proposals to incorporate application semantics into man-
agement policies. Akin to program exception handlers,
end hosts register exception conditions with network
controllers, which in turn inform end hosts when excep-
tions trigger. Corresponding actions at end hosts would
then be parameterized with application context. Appli-
cations are a ﬁrst-order citizen in Eden as well; however,
Eden goes beyond static actions such as rate limiting,
by allowing for functions to be evaluated at end hosts
with minimal controller involvement.
Network function virtualization (NFV) targets vir-
tualizing arbitrary network functions, traditionally im-
plemented at specialized physical devices. Eden can be
seen as an end host pragmatic and reasoned point in
the NFV space.
The Click software router [36] allows the construction
of modular data-plane processing pipelines. It empha-
505sizes the ﬂexible chaining of building blocks called ele-
ments. Eden also operates in the data-plane, but lever-
ages application information to enables application-level
message-oriented policies. The enclaves share similar-
ities with Click’s elements. Eden’s enclave oﬀers the
convenience of a higher-level environment to network
policy developers. The elements, however, are more ap-
propriate for performance critical tasks (e.g., rate lim-
iting functionality).
Eden enables rapid prototyping of network functions
in the data plane. Other eﬀorts to enable innovation in
the data plane include PLUG [20] and SwitchBlade [7].
These eﬀorts focus on implementing full protocols like
IPv6 on programmable hardware like FPGAs.
Similarly to packet ﬁlters [43, 41], the Eden inter-
preter processes packets in a constrained execution envi-
ronment inside the kernel according to user-deﬁned pro-
grams. However, the Eden interpreter supports richer
packet processing to accommodate more expressive ac-
tion functions.
The idea of associating metadata with network traf-
ﬁc as it gets processed in the network stack is simi-
lar to Mbuf tags [35]. This work also proposes a user-
level mechanism to attach metadata to packets. Eden
aims to start the discussion of extending the interface
to higher level libraries and applications.
8 Concluding remarks
This paper proposes Eden, an architecture for imple-
menting network functions at end hosts. This involves
applications (stages) classifying application data into
messages and annotating the messages with meta-data.
Enclaves use the message and meta-data information to
apply generic stateful actions on network packets.
Network operators express desired actions in a high-
level language based on F# code quotations; their pro-
grams are compiled to bytecode suitable for execution
by an interpreter that operates in the enclave. The en-
clave compiler and runtime takes care of managing any
state in the enclave, freeing the network programmer
to focus on the functionality to be achieved. The com-
bination of stages, enclave and the interpreted action
language allows expressing a variety of functions in a
natural way and with a small performance penalty.
Acknowledgments
We are indebted to our colleague Andy Slowey for pro-
viding technical support with our experimental setup.
We are also grateful to Rolf Neugebauer, Stuart Wray,
and their colleagues at Netronome for their help with
the NFP3240 NICs. Finally, we thank Dimitrios Vytin-
iotis, Z. Morley Mao and the anonymous SIGCOMM
reviewers for their feedback.
References
[1] M. Alizadeh, T. Edsall, S. Dharmapurikar,
R. Vaidyanathan, K. Chu, A. Fingerhut, V. T. Lam,
F. Matus, R. Pan, N. Yadav, and G. Varghese
CONGA: Distributed Congestion-aware Load Balancing
for Datacenters. In: SIGCOMM. ACM, 2014.
[2] M. Alizadeh, A. Greenberg, D. A. Maltz, J. Padhye,
P. Patel, B. Prabhakar, S. Sengupta, and
M. Sridharan Data Center TCP (DCTCP). In:
SIGCOMM. ACM, 2010.
[3] K. G. Anagnostakis, M. W. Hicks, S. Ioannidis,
A. D. Keromytis, and J. M. Smith Scalable Resource
Control in Active Networks. In: IWAN. Springer-Verlag,
2000.
[4] G. Ananthanarayanan, S. Kandula, A. Greenberg,
I. Stoica, Y. Lu, B. Saha, and E. Harris Reining in
the Outliers in Map-reduce Clusters Using Mantri. In:
OSDI. USENIX, 2010.
and B. Thomas LDP Speciﬁcation. RFC 3036. 2001.
[5] L. Andersson, P. Doolan, N. Feldman, A. Fredette,
[6] S. Angel, H. Ballani, T. Karagiannis, G. O(cid:48)Shea, and
E. Thereska End-to-end Performance Isolation Through
Virtual Datacenters. In: OSDI. USENIX, 2014.
[7] M. B. Anwer, M. Motiwala, M. b. Tariq, and
N. Feamster SwitchBlade: A Platform for Rapid
Deployment of Network Protocols on Programmable
Hardware. In: SIGCOMM. ACM, 2010.
[8] W. Bai, K. Chen, H. Wang, L. Chen, D. Han, and
C. Tian Information-Agnostic Flow Scheduling for
Commodity Data Centers. In: NSDI. USENIX, 2015.
[9] H. Ballani, P. Costa, T. Karagiannis, and
[10] H. Ballani, K. Jang, T. Karagiannis, C. Kim,
A. Rowstron Towards Predictable Datacenter
Networks. In: SIGCOMM. ACM, 2011.
D. Gunawardena, and G. O(cid:48)Shea Chatty Tenants and
the Cloud Network Sharing Problem. In: NSDI. USENIX,
2013.
[11] P. Barham, A. Donnelly, R. Isaacs, and R. Mortier
Using Magpie for Request Extraction and Workload
Modelling. In: OSDI. USENIX, 2004.
[12] S. Bhattacharjee, K. L. Calvert, and E. W. Zegura
An Architecture for Active Networking. In: HPN.
Chapman & Hall, Ltd., 1997.
[13] G. Bianchi, M. Bonola, A. Capone, and C. Cascone
OpenState: Programming Platform-independent Stateful
Openﬂow Applications Inside the Switch. SIGCOMM
Comput. Commun. Rev. 44, 2 (2014).
[14] P. Bosshart, D. Daly, G. Gibb, M. Izzard,
N. McKeown, J. Rexford, C. Schlesinger,
D. Talayco, A. Vahdat, G. Varghese, and D. Walker
P4: Programming Protocol-independent Packet
Processors. SIGCOMM Comput. Commun. Rev. 44, 3
(2014).
[15] P. Bosshart, G. Gibb, H.-S. Kim, G. Varghese,
N. McKeown, M. Izzard, F. Mujica, and M. Horowitz
Forwarding Metamorphosis: Fast Programmable
Match-action Processing in Hardware for SDN. In:
SIGCOMM. ACM, 2013.
[16] M. Casado, T. Koponen, S. Shenker, and
A. Tootoonchian Fabric: A Retrospective on Evolving
SDN. In: HotSDN. ACM, 2012.
[17] M. Chowdhury, S. Kandula, and I. Stoica Leveraging
Endpoint Flexibility in Data-intensive Clusters. In:
SIGCOMM. ACM, 2013.
[18] M. Chowdhury, Y. Zhong, and I. Stoica Eﬃcient
Coﬂow Scheduling with Varys. In: SIGCOMM. ACM,
2014.
[19] Cisco Snort. 2015. url: https://www.snort.org/ (visited
on 06/03/2015).
[20] L. De Carli, Y. Pan, A. Kumar, C. Estan, and
K. Sankaralingam PLUG: Flexible Lookup Modules for
Rapid Deployment of New Protocols in High-speed
Routers. In: SIGCOMM. ACM, 2009.
[21] C. Dixon, H. Uppal, V. Brajkovic, D. Brandon,
T. Anderson, and A. Krishnamurthy ETTM: A
Scalable Fault Tolerant Network Manager. In: NSDI.
USENIX, 2011.
[22] F. R. Dogar, T. Karagiannis, H. Ballani, and
A. Rowstron Decentralized Task-aware Scheduling for
Data Center Networks. In: SIGCOMM. 2014.
506[27] C. Gkantsidis, T. Karagiannis, P. Key, B. Radunovic,
[48]
[23] N. Feamster, J. Rexford, and E. Zegura The Road to
SDN: An Intellectual History of Programmable Networks.
SIGCOMM Comput. Commun. Rev. 44, 2 (2014).
[24] A. D. Ferguson, A. Guha, C. Liang, R. Fonseca, and
S. Krishnamurthi Participatory Networking: An API
for Application Control of SDNs. In: SIGCOMM. ACM,
2013.
[25] N. Foster, R. Harrison, M. J. Freedman,
C. Monsanto, J. Rexford, A. Story, and D. Walker
Frenetic: A Network Programming Language. In: ICFP.
ACM, 2011.
[26] R. Gandhi, H. H. Liu, Y. C. Hu, G. Lu, J. Padhye,
L. Yuan, and M. Zhang Duet: Cloud Scale Load
Balancing with Hardware and Software. In: SIGCOMM.
ACM, 2014.
E. Raftopoulos, and D. Manjunath Traﬃc
Management and Resource Allocation in Small
Wired/Wireless Networks. In: CoNEXT. ACM, 2009.
[28] M. P. Grosvenor, M. Schwarzkopf, I. Gog,
R. N. M. Watson, A. W. Moore, S. Hand, and
J. Crowcroft Queues Don(cid:48)t Matter When You Can
JUMP Them! In: NSDI. USENIX Association, 2015.
[29] H. Han, S. Shakkottai, C. V. Hollot, R. Srikant, and
D. Towsley Multi-path TCP: A Joint Congestion
Control and Routing Scheme to Exploit Path Diversity in
the Internet. IEEE/ACM Trans. Netw. 14, 6 (2006).
[30] C.-Y. Hong, M. Caesar, and P. B. Godfrey Finishing
Flows Quickly with Preemptive Scheduling. In:
SIGCOMM. ACM, 2012.
[31] D. F. Hooper Using IXP2400/2800 Development Tools.
A Hands-on Approach to Network Processor Software
Design. 1st ed. Intel Press, 2005.
[32] V. Jeyakumar, M. Alizadeh, C. Kim, and D. Mazi`eres
Tiny Packet Programs for Low-latency Network Control
and Monitoring. In: HotNets-XII. ACM, 2013.
[33] V. Jeyakumar, M. Alizadeh, D. Mazi`eres,
B. Prabhakar, C. Kim, and A. Greenberg EyeQ:
Practical Network Performance Isolation at the Edge. In:
NSDI. USENIX, 2013.
[34] T. Karagiannis, R. Mortier, and A. Rowstron
Network Exception Handlers: Host-network Control in
Enterprise Networks. In: SIGCOMM. ACM, 2008.
[35] A. D. Keromytis Tagging Data in the Network Stack:
Mbuf Tags. In: BSDC’03. USENIX Association, 2003.
[36] E. Kohler, R. Morris, B. Chen, J. Jannotti, and
M. F. Kaashoek The Click Modular Router. ACM
Trans. Comput. Syst. 18, 3 (2000).
[37] D. Kreutz, F. Ramos, P. Esteves Verissimo,
C. Esteve Rothenberg, S. Azodolmolky, and S. Uhlig
Software-Deﬁned Networking: A Comprehensive Survey.
Proceedings of the IEEE 103, 1 (2015).
[38] V. T. Lam, S. Radhakrishnan, R. Pan, A. Vahdat, and
[44]
J. Mudigonda, P. Yalagandula, M. Al-Fares, and
J. C. Mogul SPAIN: COTS Data-center Ethernet for
Multipathing over Arbitrary Topologies. In: NSDI.
USENIX, 2010.
[45] A. Munir, G. Baig, S. M. Irteza, I. A. Qazi, A. X. Liu,
and F. R. Dogar Friends, Not Foes: Synthesizing
Existing Transport Strategies for Data Center Networks.
In: SIGCOMM. ACM, 2014.
[46] Netronome Netronome FlowNICs. 2015. url:
http://netronome.com/product/ﬂownics/ (visited on
06/03/2015).
[47] P. Patel, D. Bansal, L. Yuan, A. Murthy,
A. Greenberg, D. A. Maltz, R. Kern, H. Kumar,
M. Zikos, H. Wu, C. Kim, and N. Karri Ananta: Cloud
Scale Load Balancing. In: SIGCOMM. ACM, 2013.
J. Perry, A. Ousterhout, H. Balakrishnan, D. Shah,
and H. Fugal Fastpass: A Centralized ”Zero-queue”
Datacenter Network. In: SIGCOMM. ACM, 2014.
[49] B. Pfaff, J. Pettit, T. Koponen, K. Amidon,
M. Casado, and S. Shenker Extending Networking into
the Virtualization Layer. In: HotNets-VIII. ACM, 2009.
[50] B. Pfaff, J. Pettit, T. Koponen, E. Jackson, A. Zhou,
J. Rajahalme, J. Gross, A. Wang, J. Stringer,
P. Shelar, K. Amidon, and M. Casado The Design and
Implementation of Open vSwitch. In: NSDI. USENIX,
2015.
[51] L. Popa, A. Krishnamurthy, S. Ratnasamy, and
I. Stoica FairCloud: Sharing the Network in Cloud
Computing. In: HotNets-X. ACM, 2011.
[52] L. Popa, P. Yalagandula, S. Banerjee, J. C. Mogul,
Y. Turner, and J. R. Santos ElasticSwitch: Practical
Work-conserving Bandwidth Guarantees for Cloud
Computing. In: SIGCOMM. ACM, 2013.
[53] C. Raiciu, C. Paasch, S. Barre, A. Ford, M. Honda,
F. Duchene, O. Bonaventure, and M. Handley How
Hard Can It Be? Designing and Implementing a
Deployable Multipath TCP. In: NSDI. USENIX, 2012.
[54] M. Reitblatt, M. Canini, A. Guha, and N. Foster
FatTire: Declarative Fault Tolerance for Software-Deﬁned
Networks. In: HotSDN. ACM, 2013.
[55] M. Reitblatt, N. Foster, J. Rexford, C. Schlesinger,
and D. Walker Abstractions for Network Update. In:
SIGCOMM. ACM, 2012.
[56] B. Schwartz, A. W. Jackson, W. T. Strayer,
W. Zhou, R. D. Rockwell, and C. Partridge Smart
Packets: Applying Active Networks to Network
Management. ACM Trans. Comput. Syst. 18, 1 (2000).
[57] A. Shieh, S. Kandula, and E. G. Sirer SideCar:
Building Programmable Datacenter Networks Without
Programmable Switches. In: Hotnets-IX. ACM, 2010.
[58] D. Shue, M. J. Freedman, and A. Shaikh Performance
Isolation and Fairness for Multi-tenant Cloud Storage. In:
OSDI. USENIX, 2012.
[59] R. Soul´e, S. Basu, R. Kleinberg, E. G. Sirer, and
N. Foster Managing the Network with Merlin. In:
HotNets-XII. ACM, 2013.
[60] D. L. Tennenhouse, and D. J. Wetherall Towards an
Active Network Architecture. SIGCOMM Comput.
Commun. Rev. 26, 2 (1996).
[61] E. Thereska, H. Ballani, G. O’Shea, T. Karagiannis,
A. Rowstron, T. Talpey, R. Black, and T. Zhu
IOFlow: A Software-deﬁned Storage Architecture. In:
SOSP. ACM, 2013.
[62] A. Voellmy, J. Wang, Y. R. Yang, B. Ford, and
P. Hudak Maple: Simplifying SDN Programming Using
Algorithmic Policies. SIGCOMM Comput. Commun.
Rev. 43, 4 (2013).
[63] D. Wetherall, J. V. Guttag, and D. Tennenhouse
ANTS: a toolkit for building and dynamically deploying
network protocols. In: OPENARCH. IEEE, 1998.
[64] C. Wilson, H. Ballani, T. Karagiannis, and
A. Rowtron Better Never Than Late: Meeting Deadlines
in Datacenter Networks. In: SIGCOMM. ACM, 2011.
J. Zhou, M. Tewari, M. Zhu, A. Kabbani,
L. Poutievski, A. Singh, and A. Vahdat WCMP:
Weighted Cost Multipathing for Improved Fairness in
Data Centers. In: EuroSys. ACM, 2014.
[65]
[39]
G. Varghese Netshare and Stochastic Netshare:
Predictable Bandwidth Allocation for Data Centers.
SIGCOMM Comput. Commun. Rev. 42, 3 (2012).
J. Lee, Y. Turner, M. Lee, L. Popa, S. Banerjee,
J.-M. Kang, and P. Sharma Application-driven
Bandwidth Guarantees in Datacenters. In: SIGCOMM.
2014.
[40] A. Likhtarov, R. Nishtala, R. McElroy, H. Fugal,
A. Grynenko, and V. Venkataramani Introducing
mcrouter: A memcached protocol router for scaling
memcached deployments. Facebook. 2014. url:
http://bit.ly/1TpNKo0 (visited on 06/16/2015).
[41] S. McCanne, and V. Jacobson The BSD Packet Filter:
A New Architecture for User-level Packet Capture. In:
USENIX Winter Conf. USENIX, 1993.
[42] N. McKeown, T. Anderson, H. Balakrishnan,
G. Parulkar, L. Peterson, J. Rexford, S. Shenker,
and J. Turner OpenFlow: Enabling Innovation in
Campus Networks. SIGCOMM Comput. Commun. Rev.
38, 2 (2008).
J. Mogul, R. Rashid, and M. Accetta The Packer
Filter: An Eﬃcient Mechanism for User-level Network
Code. In: SOSP ’87. ACM, 1987.
[43]
507