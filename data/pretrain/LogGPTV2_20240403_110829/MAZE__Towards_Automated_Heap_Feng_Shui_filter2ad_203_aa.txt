title:MAZE: Towards Automated Heap Feng Shui
author:Yan Wang and
Chao Zhang and
Zixuan Zhao and
Bolun Zhang and
Xiaorui Gong and
Wei Zou
Maze: Towards Automated Heap Feng Shui
Yan Wang, {CAS-KLONAT, BKLONSPT}, Institute of Information Engineering, 
Chinese Academy of Sciences; WeiRan Lab, Huawei Technologies; Chao Zhang, 
BNRist & Institute for Network Science and Cyberspace, Tsinghua University; 
Tsinghua University-QI-ANXIN Group JCNS; Zixuan Zhao, Bolun Zhang, 
Xiaorui Gong, and Wei Zou, {CAS-KLONAT, BKLONSPT,} Institute of 
Information Engineering, Chinese Academy of Sciences; School of 
Cyber Security, University of Chinese Academy of Sciences
https://www.usenix.org/conference/usenixsecurity21/presentation/wang-yan
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.MAZE: Towards Automated Heap Feng Shui
Yan Wang1,2, Chao Zhang3,4 , Zixuan Zhao1,5, Bolun Zhang1,5, Xiaorui Gong1,5, Wei Zou1,5
1 {CAS-KLONAT ∗, BKLONSPT †}, Institute of Information Engineering, Chinese Academy of Sciences 2WeiRan Lab, Huawei Technologies
3BNRist & Institute for Network Science and Cyberspace, Tsinghua University
4Tsinghua University-QI-ANXIN Group JCNS
5School of Cyber Security, University of Chinese Academy of Sciences
PI:EMAIL, PI:EMAIL, PI:EMAIL, {zhangbolun, gongxiaorui, zouwei}@iie.ac.cn
Abstract
A large number of memory corruption vulnerabilities, e.g.,
heap overﬂow and use after free (UAF), could only be ex-
ploited in speciﬁc heap layouts via techniques like heap feng
shui. To pave the way for automated exploit generation (AEG),
automated heap layout manipulation is demanded.
In this paper, we present a novel solution MAZE to manip-
ulate proof-of-concept (POC) samples’ heap layouts. It ﬁrst
identiﬁes heap layout primitives (i.e., input fragments or code
snippets) available for users to manipulate the heap. Then,
it applies a novel Dig & Fill algorithm, which models the
problem as a Linear Diophantine Equation and solves it de-
terministically, to infer a primitive operation sequence that is
able to generate target heap layout.
We implemented a prototype of MAZE based on the analy-
sis engine S2E, and evaluated it on the PHP, Python and Perl
interpreters and a set of CTF (capture the ﬂag) programs, as
well as a large micro-benchmark. Results showed that MAZE
could generate expected heap layouts for over 90% of them.
1 Introduction
Automated exploit generation (AEG) is playing an impor-
tant role in software security. Software vendors could utilize it
to quickly evaluate the severity of security vulnerabilities and
allocate appropriate resources to ﬁx critical ones. Defenders
could learn from synthetic exploits to generate IDS (Intrusion
Detection System) rules and block potential attacks.
Existing AEG solutions [1, 2, 3, 4, 5] are effective at ex-
ploiting stack-based or format string vulnerabilities, which
are rare in modern systems [6]. Few could handle heap-based
vulnerabilities, which are more common. Heap-based vul-
nerabilities in general can only be exploited in speciﬁc heap
layouts. For instance, a common way to exploit a heap over-
ﬂow is placing another object with sensitive code pointers (e.g.
VTable or function pointer) after the overﬂow object. How-
ever, heap objects’ lifetime and heap layouts are dynamic and
†Key Laboratory of Network Assessment Technology, CAS
‡Beijing Key Laboratory of Network Security and Protection Technology
hard to determine or manipulate. In practice, it requires abun-
dant human efforts and techniques, e.g., heap feng shui [7].
To manipulate heap layouts, in general we have to ﬁnd
primitives that are able to interact with heap allocators ﬁrst,
and then assemble them in a speciﬁc way by (de)allocating
objects of speciﬁc sizes in a speciﬁc order.
1.1 Recognize Heap Layout Primitives
A heap layout operation primitive is a building block for
heap layout manipulation, which can be (re)used by users
to interact with target programs’ underlying heap allocators.
Programs usually do not expose such primitives directly.
SHRIKE [8] and Gollum [9] focus on generating exploits
for language interpreters (e.g., Python and PHP), and mark
statements in input scripts (a group of input bytes) as heap
layout manipulation primitives. SLAKE [10] generates ex-
ploits for Linux kernels, and marks system calls as heap lay-
out manipulation primitives. These primitives trigger heap
(de)allocation operations and can be assembled freely. But
they are not applicable to most other applications. For in-
stance, ﬁle processing applications neither accept freely as-
sembled input ﬁles nor provide APIs for users to invoke.
Furthermore, to precisely manipulate heap layouts, we also
need to understand (1) the semantics of primitives, e.g., the
count and size of (de)allocations performed in each primitive;
and (2) the dependencies between primitives, e.g., the order
between them. Failing to do so would cause further primitives
assembly process ineffective, as shown in SHRIKE [8].
Our solution: Note that, most applications are driven by a
certain form of events, including messages, user interactions,
data fragments, and network connections etc.. Code snippets
dispatched in the event processing loops usually are reentrant
and could be utilized to manipulate heap layouts. We therefore
extend primitives to such reentrant code snippets, and use
static analysis to recognize them, and analyze their semantics
and dependencies accordingly.
1.2 Assemble Heap Layout Primitives
To generate expected layouts, we further need to assemble
the set of recognized heap layout primitives in a speciﬁc way.
USENIX Association
30th USENIX Security Symposium    1647
SHRIKE [8] applies a random search algorithm, which
is inefﬁcient and undecidable, to ﬁnd primitive sequences
that could place two speciﬁc objects next to each other. Gol-
lum [9] further improves the efﬁciency with an evolutionary
algorithm. SLAKE [10] utilizes the characteristics of kernel
heap allocators, and proposes a customized algorithm to place
victim objects after vulnerable objects.
However, they fail to address several challenges. First, in-
stead of relative offsets between two objects, the expected
heap layout could be too complicated to model. For instance,
to perform an unsafe unlink attack [11], two chunks are
needed to allocate before and after the overﬂowed chunk, and
therefore offsets between three objects are required. Second,
each heap operation primitive may allocate and deallocate
multiple objects at the same time, and even interfere with other
primitives. Therefore, primitives may have side effects (i.e.,
noises), and make it challenging to assemble. For instance,
the success rate of SHRIKE [8] drops dramatically when the
number of noises grows. Lastly, different heap allocators have
different heap management algorithms, causing different heap
layouts even with the same sequence of heap operation prim-
itives. Therefore, allocator-speciﬁc solutions (e.g., SLAKE)
cannot be simply extended to other applications.
Our solution: We reduce the heap layout manipulation
problem to a basic problem of placing a speciﬁc object O at
a speciﬁc position P, and propose a Dig & Fill algorithm.
At the time of allocating O, if the location P is occupied by
other objects, then we will dig proper holes in advance to
accommodate them. Otherwise, if P is empty but O still falls
into other holes, then we will fill those holes in advance.
Each heap layout operation primitive may yield a num-
ber of dig and fill operations. Thus, we setup a Linear
Diophantine Equation [12], to calculate the count of each
primitive required. By solving this equation deterministically,
we infer the heap interaction primitive sequence that could
generate the target layout.
1.3 Results
In this paper, we presented an automated heap layout ma-
nipulation solution MAZE to address the aforementioned chal-
lenges. We built a prototype based on the binary analysis
engine S2E [13], and evaluated it in three different settings:
(1) 23 vulnerable CTF (Capture The Flag) programs, (2) the
PHP interpreter with 5 known vulnerabilities, targeting 10
different heap layouts respectively, as well as the Python and
Perl interpreter with 10 vulnerabilities, and (3) 3000 randomly
generated test cases with large primitive noises.
Results showed that, MAZE has a high success rate and
efﬁciency. It successfully converted 16 CTF programs’ heap
layouts into exploitable states, efﬁciently generated expected
heap layouts for the PHP, Python and Perl in all cases, and
generated expected heap layouts for the random test cases
with a success rate of over 90%.
In summary, we have made the following contributions:
• We proposed a novel automated heap layout manipulation
solution MAZE, able to generate complicated heap layouts
(e.g., with multi-object constraints) for a wide range of
heap allocators, facilitating automated exploit generation.
• We proposed a new and general type of heap layout opera-
tion primitives, and proposed a solution to recognize and
analyze such primitives.
• We proposed a novel Dig & Fill algorithm to assemble
primitives to generate expected heap layouts, by solving a
Linear Diophantine Equation deterministically.
• We pointed out primitive noise is not the primary bottle-
neck of automated heap feng shui, and made MAZE robust
against primitive noises.
• We implemented a prototype of MAZE 1, and demonstrated
its effectiveness in CTF programs, language interpreters,
and synthetic benchmarks.
2 Background
2.1 Automated Exploit Generation (AEG)
AEG for Stack-based Vulnerabilities: Early AEG solu-
tions rely on deterministic recipes, e.g., the classical methods
to exploit stack-based or format string vulnerabilities, to au-
tomatically generate exploits. Heelan et al.[1] proposed to
utilize dynamic taint analysis to generate control-ﬂow-hijack
exploits when given crashing POC inputs. Avgerinos et al.
coined the term AEG [2] and developed an end-to-end system
to discover vulnerabilities and exploit them with symbolic
execution. They further extended the solution to support bi-
nary programs in Mayhem [3]. Similarly, starting from the
crashing point, CRAX [5] symbolically executes the program
to ﬁnd exploitable states and generate exploits.
AEG for Heap-based Vulnerabilities: Unlike stack-
based vulnerabilities, heap-based vulnerabilities in general are
harder to exploit. Repel et al. [14] utilizes symbolic execution
to ﬁnd exploit primitives that are derived from heap chunk
metadata corruption, and then tried to generate exploits using
a SMT solver. Revery [15] utilizes a layout-oriented fuzzing
and a control-ﬂow stitching solution to explore exploitable
states when given a non-crashing POC. HeapHopper [16] uti-
lizes symbolic execution to discover exploitation techniques
for heap allocators in a driver program. PrimGen [17] utilizes
symbolic execution to ﬁnd a path from the crashing point to a
potentially useful exploit primitive. Most of these solutions
can not manipulate heap layouts, and only work when the
given POC sample’s heap layout is good to go.
AEG for Various Targets: FUZE [18] utilizes fuzzing to
ﬁnd different dereference sites of dangling pointers in system
calls, and facilitates the process of kernel UAF exploitation.
Kepler [19] facilitates kernel exploit generation by automat-
ically generating a “single-shot” exploitation chain. The so-
lution teEther [20] extends AEG to vulnerabilities in smart
1We open source MAZE at https://github.com/Dirac5ea/Maze to facili-
tate the research in this area.
1648    30th USENIX Security Symposium
USENIX Association
Figure 1: Example vulnerability and the heap layout manipulation solution. Hexagons with dashed edges are primitives to insert.
contracts. FLOWSTITCH [21] aims to generate data-oriented
exploits, which could reach information disclosure without
breaking the control ﬂow. Ispoglou et al. [22] proposed the
BOP, which could utilize basic blocks as gadgets along valid
execution paths to generate data-oriented exploits.
2.2 Automated Heap Layout Manipulation
Heap layout manipulation is a critical challenge of AEG,
recognized as the heap likelihood inference issue in [23, 24].
Several solutions have been proposed in recent two years.
SHRIKE [8] randomly assembles program input fragments
(script statements) to search for inputs that could generate ex-
pected layouts. Gollum [9] applies an evolutionary algorithm
to improve efﬁciency. However, many applications’ input
fragments cannot be freely assembled together to yield valid
inputs. Besides, different primitives (input fragments) could
have dependencies and side effects (noises), greatly lowering
the success rate and efﬁciency of SHRIKE and Gollum.
SLAKE [10] is another solution able to manipulate heap
layouts. It targets only Linux kernel vulnerabilities, and ap-
plies an algorithm speciﬁc to the simple and deterministic
Linux slab allocator to assemble system calls. However, it has
a narrow application scope. Most applications neither have
direct interaction interfaces like system calls, nor have simple
heap allocators. It also suffers from the primitive noise issue.
2.3 Problem Scope
2.3.1 Applicable Programs
Our solution MAZE is only applicable to event loop driven
programs. Most programs are driven by user input events or
messages, and usually have function dispatchers enclosed in
loops to handle these events. For example, network interaction
programs are driven by commands in connections, language
interpreters are driven by sentences in scripts.
2.3.2 Applicable Heap Allocators
Our solution MAZE can be applied to multiple allocators
as long as they obey four rules as below:
Rule 1: Deterministic Behavior. A same sequence of
heap operations will yield a same heap layout, if a same ini-
tial heap layout is provided. The majority of allocators are
deterministic, such as ptmalloc[25] and dlmalloc[26]. Some
allocators are deterministic under some conditions, such as
jemalloc[27] in single thread environment.
Note that, the allocator can have non-deterministic initial
state. MAZE will utilize heap spraying [28] to ﬁll all holes in
the initial state and reach a deterministic state. After that, new
chunks could be (de)allocated as if they are in an empty heap.
Rule 2: Freed memory areas ﬁrst. Allocators reuse one
of the recently freed areas to serve the allocation request,
rather than ﬁnding a new area from inventory. This strategy
can improve memory utilization efﬁciency and is adopted by
most allocators, such as ptmalloc, dlmalloc and jemalloc.
Rule 3: Freed areas of same size ﬁrst. Allocators prefer
to choosing the freed areas of same size to serve the alloca-
tion request. This strategy is usually used to reduce memory
fragments and widely adopted.
Rule 4: Re-allocation order is deterministic. Freed
memory chunks are usually kept in linked lists, and re-
allocated to new objects in certain order. Some allocators
use the lastly freed chunk to serve the new allocation request,
i.e., following the LIFO (Last-In-First-Out) policy, e.g. fastbin
in ptmalloc[25], while some others follow the FIFO (First-In-
First-Out) policy, e.g. normal chunk in ptmalloc[25].
3 Motivation Example
We will introduce the overview of our heap layout manip-
ulation solution MAZE, with a running example shown in
Figure 1. There is a UAF vulnerability, where the Switch
object is freed at line 17 but its pointer is kept in the global
list and referenced again at line 21.
3.1 Expected Memory Layout Generation
First, we need to analyze the vulnerability in POC automat-
ically, there are many sanitizers [15, 29, 30, 31, 32] proposed
for this purpose. As mentioned in Revery[15], dynamic anal-
ysis can be used to identify the vulnerability point and excep-
tional object. In this example, we can know the vulnerability
is a UAF and the Switch object is the exceptional object.
Then, the expected memory layout can be generated ac-
cording to the properties of the vulnerability. In this example,
a controllable object (e.g. switch->name) should take the
freed exceptional object’s position, to hijack the reference
of the freed object s at line 21, and drive it to write to an
USENIX Association
30th USENIX Security Symposium    1649
MemoryMemory1  void main(void){2    while(1){ switch(c){           //(cid:73)(cid:88)(cid:81)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:71)(cid:76)(cid:86)(cid:83)(cid:68)(cid:87)(cid:70)(cid:75)(cid:72)(cid:85)3    case 1: Create_Router();    (cid:18)(cid:18)(cid:83)(cid:85)(cid:76)(cid:80)(cid:76)(cid:87)(cid:76)(cid:89)(cid:72)(cid:3)(cid:20)4    case 2: Create_Switch();    (cid:18)(cid:18)(cid:83)(cid:85)(cid:76)(cid:80)(cid:76)(cid:87)(cid:76)(cid:89)(cid:72)(cid:3)(cid:21)5   case 3: Delete_Switch();    (cid:18)(cid:18)(cid:83)(cid:85)(cid:76)(cid:80)(cid:76)(cid:87)(cid:76)(cid:89)(cid:72)(cid:3)(cid:22)6    case 4: Edit_name(); }      (cid:18)(cid:18)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3) }}7  Router Create_Router(){...8    Router *router   = malloc(0x160);9    router->protocol = malloc(0x160);10    router->r_table  = malloc(0x160); ...}11 Switch Create_Switch(){...12    Switch *switch   = malloc(0x160);13    switch->name     = malloc(0x160); 14    glist[count++]   = switch;       ...}15 void Delete_Switch(int index){...16    if (glist[index]!=Null) {..17    free(glist[index]);18    free(glist[index]->name); }..    ...}19 void Edit_name(int index){...20    Switch *s  = glist[index];               21    read(0, s->name, 0x60)           ...}(before)create_switchcreate_switchdelete_switchcreate_routeredit_name(cid:81)(cid:68)(cid:80)(cid:72)(cid:54)(cid:90)(cid:76)(cid:87)(cid:70)(cid:75)(cid:81)(cid:68)(cid:80)(cid:72)(cid:54)(cid:90)(cid:76)(cid:87)(cid:70)(cid:75)(cid:81)(cid:68)(cid:80)(cid:72)(cid:54)(cid:90)(cid:76)(cid:87)(cid:70)(cid:75)(cid:81)(cid:68)(cid:80)(cid:72)(cid:54)(cid:90)(cid:76)(cid:87)(cid:70)(cid:75)create_ switch * 2delete_ switch * 2(cid:81)(cid:68)(cid:80)(cid:72)(cid:83)(cid:85)(cid:82)(cid:87)(cid:82)(cid:70)(cid:82)(cid:79)(cid:53)(cid:82)(cid:88)(cid:87)(cid:72)(cid:85)(cid:85)(cid:66)(cid:87)(cid:68)(cid:69)(cid:79)(cid:72)(cid:54)(cid:90)(cid:76)(cid:87)(cid:70)(cid:75)(after)1. Create_Switch() 2. Delete_Switch(0)3. Create_Switch() 4. Edit_name(0)POC-- Create_Switch()-- Create_Switch() 1. Create_Switch() -- Delete_Switch()-- Delete_Switch()2. Delete_Switch(0)-- Create_Router()3. Create_Switch()4. Edit_name(0)EXPFigure 2: Overview of Maze
address s->name controlled by the attacker, yielding arbitrary
memory writes. For other types of vulnerabilities, e.g. the
buffer overﬂow, an exploitable object should be placed next to
the overﬂowed object. Using existing solutions, the expected
exploitable memory layout can be generated. And it will be
an input for MAZE.
3.2.2 Heap Layout Primitives Assembly
The inputs of this part are heap primitives, POC info, path
constraints and expected layout. MAZE will utilize heap prim-
itives to manipulate POC’s layout (infered from the POC
info) to the expected layout and generate an exploit using a
constraint solver.