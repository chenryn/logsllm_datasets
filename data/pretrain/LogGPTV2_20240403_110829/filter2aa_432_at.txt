        semval = semctl(sid, member, GETVAL, 0);
第四章  进程间通信
- 109 -
        printf("semval for member %d is %d\n", member, semval);
}
void usage(void)
{
        fprintf(stderr, "semtool - A utility for tinkering with semaphores\n");
        fprintf(stderr, "\nUSAGE:  semtool4 (c)reate \n");
        fprintf(stderr, "                 (l)ock \n");
        fprintf(stderr, "                 (u)nlock \n");
        fprintf(stderr, "                 (d)elete\n");
        fprintf(stderr, "                 (m)ode \n");
        exit(1);
}
4.9  共享内存(Shared Memory)
共享内存，简单的说就是被多个进程共享的内存。它在各种进程通信方法中是最快的，
因为它是将信息直接映射到内存中，省去了其它 IPC 方法的中间步骤。
4.9.1  有关的数据结构
下面我们来介绍几个和共享内存有关的数据结构：
1．shmid_ds
和前面介绍的两个 IPC 对象一样，共享内存也有一个给系统内存用来保存相关信息的
结构，就是 shmid_ds。它在 linux/shm.h 中的定义是这样的：
struct shmid_ds {
        struct ipc_perm         shm_perm;       /* operation perms */
        int                     shm_segsz;      /* size of segment (bytes) */
        __kernel_time_t         shm_atime;      /* last attach time */
        __kernel_time_t         shm_dtime;      /* last detach time */
        __kernel_time_t         shm_ctime;      /* last change time */
        __kernel_ipc_pid_t      shm_cpid;       /* pid of creator */
        __kernel_ipc_pid_t      shm_lpid;       /* pid of last operator */
        unsigned short          shm_nattch;     /* no. of current attaches */
        unsigned short          shm_unused;     /* compatibility */
        void                    *shm_unused2;   /* ditto - used by DIPC */
        void                    *shm_unused3;   /* unused */
};
其中，
shm_perm 成员储存了共享内存对象的存取权限及其它一些信息。
shm_perm 成员定义了共享的内存大小（以字节为单位）。
shm_atime 成员保存了最近一次进程连接共享内存的时间。
shm_dtime 成员保存了最近一次进程断开与共享内存的连接的时间。
- 110 -
Linux网络编程
shm_ctime 成员保存了最近一次 shmid_ds 结构内容改变的时间。
shm_cpid 成员保存了创建共享内存的进程的 pid。
shm_lpid 成员保存了最近一次连接共享内存的进程的 pid。
shm_nattch 成员保存了与共享内存连接的进程数目。
剩下的三个成员被内核保留使用，这里就不介绍了。
4.9.2  有关的函数
接下来我们介绍和共享内存有关的函数：
1．sys_shmget()函数
使用 shmget()函数来创建新的或取得已有的共享内存。它在 Linux 系统库 linux/shm.h
中的定义是这样的：
系统调用：
shmget()
函数声明：
int shmget ( key_t key, int size, int shmflg);
返回值：
shared memory segment identifier on success
-1 on error: errno = EINVAL (Invalid segment size specified)
                EEXIST (Segment exists, cannot create)
                EIDRM (Segment is marked for deletion,
                        or was removed)
                ENOENT (Segment does not exist)
                EACCES (Permission denied)
                ENOMEM (Not enough memory to create segment)
和前面两个 IPC 对象的对应函数一样，shmget()函数的第一个参数 key 是共享内存的关
键字；第二个参数 size 是创建的共享内存的大小，以字节为单位。第三个参数 shmflg 是控
制函数行为的标志量，其取值的含义和作用和 msgget()及 semget()函数的对应参数都是相同
的，这里不再赘述。
如果操作成功，函数返回共享内存的标识符。
下面的代码示范了 shmget()函数的使用：
int open_shm( key_t keyval, int segsize )
{
        int     shmid;
        if((shmid = shmget( keyval, segsize, IPC_CREAT | 0660 )) == -1)
        {
                return(-1);
        }
        return(shmid);
}
2．shmat()函数
当一个进程使用 shmget()函数得到了共享内存的标识符之后，就可以使用 shmat()函数
来将共享内存映射到进程自己的内存空间内。shmat()函数在 Linux 系统函数库 linux/shm.h
中的函数声明如下：
系统调用：
shmat()
函数声明：
int shmat ( int shmid, char *shmaddr, int shmflg);
返回值：
address at which segment was attached to the process, or
-1 on error: errno = EINVAL (Invalid IPC ID value or attach address
第四章  进程间通信
- 111 -
                         passed)
                ENOMEM (Not enough memory to attach segment)
                EACCES (Permission denied)
第一个参数是共享内存的标识符。
第二个参数 shmaddr 指定了共享内存映射的地址。因为这样必须要预先分配内存，十
分不便，所以我们在使用时常常将这个参数置零，这样系统会自动为映射分配一块未使用
的内存。如果指定了地址，可以给第三个参数 shmflg 指定 SHM_RND 标志来强迫将内存大
小设定为页面的尺寸。
如果指定了 SHM_RDONLY 参数，共享内存将被映射成只读。
映射成功后，函数返回指向映射内存的指针。
下面的这段代码演示了 shmat()函数的使用：
char *attach_segment( int shmid )
{
        return(shmat(shmid, 0, 0));
}
得到了映射内存的指针之后，我们就可以像读写普通内存一样对共享内存进行读写了。
3．shmctl()函数
和前两个 IPC 对象一样，共享内存也有一个直接对其进行操作的函数，就是 shmctl()
函数。它在 Linux 系统函数库 linux/shm.h 中的函数声明是这样的：
系统调用：
shmctl()
函数声明：
int shmctl ( int shmqid, int cmd, struct shmid_ds *buf );
返回值：
0 on success
-1 on error: errno = EACCES (No read permission and cmd is IPC_STAT)
                EFAULT (Address pointed to by buf is invalid with
                         IPC_SET and IPC_STAT commands)
                EIDRM  (Segment was removed during retrieval)
                EINVAL (shmqid invalid)
                EPERM (IPC_SET or IPC_RMID command was
                        issued, but calling process does not have
                        write (alter) access to the segment)
这个函数和 msgget()函数十分相似，用法也相同。它支持的操作有：
IPC_STAT  获得共享内存的信息。
IPC_SET  设定共享内存的信息。
IPC_RMID  删除共享内存。
需要说明的是，当执行 IPC_RMID 操作时，系统并不是立即将其删除，而只是将其标
为待删，然后等待与其连接的进程断开连接。只有当所有的连接都断开以后系统才执行真
正的删除操作。当然，如果执行 IPC_RMID 的时候没有任何的连接，删除将是立即的。
4．shmdt()函数
当一个进程不再需要某个共享内存的映射时，就应该使用 shmdt()函数断开映射。它在
linux/shm.h 中的函数声明如下：
系统调用：
shmdt()
函数声明：
int shmdt ( char *shmaddr );
返回值：
-1 on error: errno = EINVAL (Invalid attach address passed)
shmdt()函数唯一的参数是共享内存映射的指针。怎么样，是不是想起了 malloc()/free()
函数呢？
- 112 -
Linux网络编程
4.9.3  共享内存应用举例——shmtool,交互式的共享内存使用工具
1．背景知识
shmtool 工具通过命令行参数来决定它的行为，这样它可以被方便的应用于 shell 脚本
中。shmtool 提供了和共享内存有关的全部功能，包括创建、删除共享内存以及对其的读写
等。和前面的例子一样，在任何操作中，只要共享内存不存在，它就自动被创建。
2．shmtool 的命令行语法
向共享内存写入字符串：
shmtool w "text"
从共享内存中读出字符串：
shmtool r
改变共享内存的权限：
shmtool m (mode)
删除共享内存：
shmtool d
3．共享内存使用举例
shmtool  w   test
shmtool  w   "This is a test"
shmtool  r
shmtool  d
shmtool  m   660
4．shmtool 的源码
#include 
#include 
#include 
#include 
#define SEGSIZE 100
main(int argc, char *argv[])
{
        key_t key;
        int   shmid, cntr;
        char  *segptr;
        if(argc == 1)
                usage();
        /* Create unique key via call to ftok() */
        key = ftok(".", 'S');
        /* Open the shared memory segment - create if necessary */
        if((shmid = shmget(key, SEGSIZE, IPC_CREAT|IPC_EXCL|0666)) == -1)
        {
第四章  进程间通信
- 113 -
                printf("Shared memory segment exists - opening as client\n");
                /* Segment probably already exists - try as a client */
                if((shmid = shmget(key, SEGSIZE, 0)) == -1)
                {
                        perror("shmget");
                        exit(1);
                }
        }
        else
        {
                printf("Creating new shared memory segment\n");
        }
        /* Attach (map) the shared memory segment into the current process */
        if((segptr = shmat(shmid, 0, 0)) == -1)
        {
                perror("shmat");
                exit(1);
        }
        switch(tolower(argv[1][0]))
        {
                case 'w': writeshm(shmid, segptr, argv[2]);
                          break;
                case 'r': readshm(shmid, segptr);
                          break;
                case 'd': removeshm(shmid);
                          break;
                case 'm': changemode(shmid, argv[2]);
                          break;
                 default: usage();
        }
}
writeshm(int shmid, char *segptr, char *text)
{
        strcpy(segptr, text);
        printf("Done...\n");
}
readshm(int shmid, char *segptr)
{
- 114 -
Linux网络编程
        printf("segptr: %s\n", segptr);
}
removeshm(int shmid)
{
        shmctl(shmid, IPC_RMID, 0);
        printf("Shared memory segment marked for deletion\n");
}
changemode(int shmid, char *mode)
{
        struct shmid_ds myshmds;
        /* Get current values for internal data structure */
        shmctl(shmid, IPC_STAT, &myshmds);
        /* Display old permissions */
        printf("Old permissions were: %o\n", myshmds.shm_perm.mode);
        /* Convert and load the mode */
        sscanf(mode, "%o", &myshmds.shm_perm.mode);
        /* Update the mode */
        shmctl(shmid, IPC_SET, &myshmds);
        printf("New permissions are : %o\n", myshmds.shm_perm.mode);
}