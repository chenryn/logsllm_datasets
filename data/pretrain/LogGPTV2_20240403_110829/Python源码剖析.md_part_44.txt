mp_subscript和sq_item选择的结果。可以看到确实list_subscript被选中了，至于
我们可以在两者中输出信息，来查看在这场宫廷选秀中，究竟花落谁家。结果如图12-7
运，PyList_Type正是这样的—个pyTypeObject，在PyList_Type中，tp_as_mapping
item，那么Python虚拟机将选择mp_subscript与“getitem”建立联系。非常幸
中的Pyobject*，所以最终计算出的偏移存在如下的关系：offset（mp_subscripE）
其实定义中各个域的顺序是相当关键的，在顺序中隐含着操作优先级的信息。比如在
行排序。回顾一下前面列出的ryHeapTypeobject的代码，它与一般的struct定义不同，
为什么之后还会输出一个调用1ist_item的信息，答案非常简单，也非常诡异，因为在
所示：
static void init_slotdefs(void)
[typeobject.c]
为了解决这个问题，就需要利用slot中的offset信息对slot（也就是对操作）进
for
if
//init_slotdefs只会进行一次
statio int
slotdef
整个对slotdefs的排序在init_slotaefs中完成：
因为Python对1ist的索引元素的操作有优化，所以我们必须从1ist派生出一个自
(initialized)
p->name_strobj =PyString_InternFromString(p->name）;
return:
填充slotdef结构体中的name_strobj
slotdefst
initialized =:0:
图12-7探测list中_getitem_对应的操作
call list item
call list_subscript
>>a=A()
22
a.append(1)
[o]e
A(list)
Python源码剖析
12.2从type对象到class 对象
一深度探索动态语言核心技术
271
---
## Page 302
12.2.3.2
272
Python源码剖析
slot的pyobject，在Python中，这是一个我们称之为descriptor的东西。
tp_cal1了，所以slot是无论如何也不能满足前面描述的Pyton中的“可调用”这个概
也不会被调用。既然slot不是一个pyobject，那么它就没有type，也就无从谈起什么
Pyobject，它不能存放在dict对象中。当然，如果我们再深入地思考一下，会发现，slot
操作排序的关键所在。
static int slotdef_cmp(const voia *aa
//slot排婷的比较策略
typedef struct
[descrobjeot.h]
第12章Python虚拟机中的类机制
const slotdef *a =(const slotdef *)aa,
Initialized =1:
PyWrapperDescrobject::
getitem
在slot的排序策略函数slotdef_cmp中，可以清晰地看到，slot中的offset正是
else
//对slotdefs中的slotde进行排序
前面我们说过，Pyhon虚拟机在tp_dict找到“getitem
在slot中，包含了很多关于一个操作的信息，但是很可惜，在tp_aict中，
void *d_wrapped;
PyDesor_
从slot到descriptor
return c;
slotdef
returh
深度探索动态语言核心技术
COMMON;
”关联在一起的，一定不会是一个slot。原因很简单，slot不是一个
（a>b）21:(aoffset;
This can be any function pointer t/
(size_t)(p-slotdefs):sizeof(slotdef),
const
*b三
void *bb)
(constslotdef*)bb;
”对应的“操作”后，
---
## Page 303
12.2.3.3
wrapperdescr_call.
descr_new(RyTypeobject
static PyDescrobjeet
PyDescr_Newwrapper(PyTypeohject*type,struct
Byobject*
[descrobject.c]
[typeobject.c]
(wrapped)
排序后的结果仍然存放在alotdefs中，Python虚拟机这下就可以从头到尾遍历
return (Pyobject *)descr;
descr->d_wrapped
descr=
return descr,
descr-
descr-sd_type=type;
deacr
//申请空间
PyDescrobject
Byobjectdict=type->tp_diet
init_slotdefs():
建立联系
->d_name
>d base
(PyDescrobject *）PyType_GenericAlloe（descrtype,0）
*descri
*desor;
。对于descriptor的“调用”过程，我们将在以后详细剖析。
pystring_Internpromstring(name）;
base:
wrapped;
*descrtype PyTypeobject *type,char name)
*desor;
Python源码剖析
12.2
从type对象到class对象
wrapperbase *base, void
base->name):
一深度探索动态语言核心技术
273
---
## Page 304
Python源码剖析
274
以会先从pyTypeObject 对象中获得asmapping指针p，然后在P的基础上进行偏移就
中存储的这个关于操作的offset对于PyTypeObject来说，不可能直接使用，必须通过
PyNumberMethods结构体，而ryTypeObject中只包含了PyNumberMethods。所以slot
Object的偏移，而操作的真实函数指针则在PyTypeobject 中指定。更不幸的是
知道，在slot中存放着操作的offset，但是很不幸，这个offset是相对于PyHeaprype
这个函数中。它的功能是完成从slot到s1ot对应操作的真实函数指针的转换。我们已经
选择优先级最高的操作。
是否已经存在，如果已经存在，则不会再次建立从操作名到操作的关联。正是这种检查机
slotptr获得该slot对应的操作在pyTypeobject中的函数指针，并接着创建descriptor，
转换。
然后遍历排序完成后的slotaefs结构体数组，对其中的每一个slot（slotdef），通过
[typeobject.c]
delta=offset（PyHeapTypeObject,mp_subscripte)=otfset（PyHeapPypeObject,
可以得到实际的函数的地址，而偏移量delta为：
(ibutddeu Be
与上一节的排序机制相结合，使得Pyton虚拟机能够在拥有相同操作名的多个操作中
这个复杂的转换过程就在slotptr中完成：
举个例子，假如说调用slotptr（&PyList_Type，offset（PyHeapTypeObject，mp
在ada_operators中，上面描述的动作都很直观、简单。而最难的动作隐藏在slotptr
需要注意的是，在创建descriptor之前，Python虚拟机会检查在tp_dict中操作名
在add_operatoxs中，首先会调用前面剖析过的init_slotdefs对操作进行排序，
第12章Python虚拟机中的类机制
retunnn0;
RyDict_SetItem(dict,D->name_strobj,descr）;
descr
//创建descriptor
7/获得slot对应的提作在ByTypeObject中的函数指针
一深度探索动态语言核心技术
contirue;
continue;
PyDescr_MewWrapper(cype
Rptr）
---
## Page 305
确定好了的，而从tp_dict中延伸出去的部分是在Pyhon运行时环境初始化时才建立的。
里讨论的descriptor和slot：
后向前进行判断，才能解决这个问题。
as_number在pyNumberMethoais的偏移量，那么我们还是没有办法确认这个操作是属于
PyNumberMethods开始判断，如果一个操作的offset大于在PyHeapTypeObject 中
然后向前，依次判断pyMappingMethods和PyNumberMethods 呢？假设我们首先从
么手脚了。
在图12-8中，从pyList_Type.tp_as_mapping中延伸除去的部分是在编译时就已经
好了，现在我们终于能够摸清楚Python在改造PyTypeobject时对tp_aict做了什
为什么判断必须首先从PyHeapTypeObject中排在后面的PySequenceMethods开始，
elseif (offset
else if(offset
char
return
PyList_Type
asmappin
tpdict
(ptrI=NULD)
ptr
ptr
offsetnoffsetof （PyHeapTypeobject,asmapping）:
offset= offsetof(PyHeapTypeObject,as_sequence)
(offset
。图12-8显示了PyList_Type完成初始化之后的整个布局。其中包括了我们这
(void*)type)
Sudleu se
op_subscrip
getitem
offsetof(FyHeapTypeObject,
图12-8add_operators完成后的PyList_Type
>=offsetof(PyHeapTypeobject,as_number） I
offsetof（PyHeapTypeobject,as_mapping)（
list_subseaript
dname=
PyObject_Heade
(deseriptor)
dwrapped
Python源码剖析
12.2从type对象到class对象
getitem
as_sequence))
深度探索动态语言核心技术
slotder
offset
Sottem
faRz
gxtitem
275
---
## Page 306
Python源码剖析
276
气
slot_tp_repr（见代码清单12-2）。
中指定的&slottp_xepr。所以当Python虚拟机后来A.tp_repr时，实际上执行的是
虚拟机会检测到它的存在。一旦检测到“_repr
写了_repr_这个操作，所以在A.tp_dict中，“
在后面剖析用户自定义的class对象的创建时，我们会看到，因为在定义classA时重
进行特殊处理呢？答案还是在slot身上。
在初始化A时，对tp_repr进行了特殊处理。为什么Python虚拟机会知道要对tp_repr
样的，Python虚拟机最终调用的是我们在A中重写之后的repr。这意味着Pyhon
代码清单12-2
示的布局，并且对照pyList_Type，那么就应该调用1ist_repr这个函数，但并不是这
虚拟机执行表达式“a=%s8A（）”时，会最终调用A.tp_repr，如果按照图12-8所
图12-9显示的例子：
PyGetSetDescrobject.
与add_operators 类似，不过最后添加到tpdict中的descriptor就不再是
[typeobject.c]
static Pyobjectslot_tp_repr(Fyobject self)
图12-8所显示的class对象大部分都正确了，但是可惜，它还不是完全正确。考虑
第12章Python虚拟机中的类机制
在slotdefs中，有一条slat为TPsLoT（"repr"，tp_repr,slot_tp_repr..…)
熟悉Python的读者都知道，repr是一个Python中的 specialmethod。当Python
Pyobject *func.
一深度探索动态语言核心技术
V5.=S>clasa
'Python"
图12-9覆盖list特殊操作的类
A(IISt)8
(self):
"Python"
repr
”存在，Pyhon虚拟机就会根据
一开始就会存在，Python
---
## Page 307
12.2.3.4
图12-11显示了在Visual Studio中观察到的fixup_slot_aispatchers前后tp_repr的变
对象时的动作，这里为了完整地介绍初始化结束后的class对象的布局，特提前在此叙述。
成的，对于内置class对象，不会进行这个操作。这个操作实际上是属于创建自定义class
PyList_Type中指定的函数，比如tp_iter还是会指向list_iter。
存布局则会如图12-10所示：
来，就完成了对默认的list的repr行为的替换。所以对于A来说，其初始化结束后的内
的定义中重写的函数，后面会看到，
对于A来说，这个变化是在fixup_slot_dispatchers（ByTypeobject*type）中完
所谓的MRO，即是指Method ResolveOrder，更一般地，也是一个class对象的属性
当然，并不是A中所有的操作都会有这样的变化。A中其他操作还是会指向
在slot_tp_repr中，会寻找“
res=PyEval_Callobiect（func,NuLu):
确定MRO
Func=lookup_method(self,
slot_tp_repr
lixup
图12-11
slot dispatcher
p-repr
ane
tp_conparo
对应的对象
fixup_slot_dispatcher前后的tp_repr
图12-10
，这个对象实际上是一个PyFunctionobject。这样一
xlee（y
PyWrapperDescrObject
trepr
repr.
0x00000000
Value
初始化完成后的A
dname=
PyObject_Header
repr",&tepr_str)
0503
(descriptor)
dwrapped
dyPe=A
10000
dbase
Python源码剖析
属性对应的对象，正好就会找到我们在A
12.2从type对象到class对象
repr
一深度探索动态语言核心技术