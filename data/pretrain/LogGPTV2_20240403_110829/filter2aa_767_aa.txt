# Resilience Despite Malicious Participants
**Speaker: Radia Perlman, EMC**

## Overview
In this talk, I will present several examples to illustrate the diverse types of problems and solutions related to system resilience in the presence of malicious participants.

## Byzantine Failures
- **Fail-stop**: A component works perfectly until it halts.
- **Byzantine**: A component continues to operate but behaves incorrectly, such as:
  - Sending incorrect information
  - Performing incorrect computations

The term "Byzantine" originates from a famous paper by Lamport, Shostak, and Pease (1982) titled "The Byzantine Generals Problem," published in the ACM Transactions on Programming Languages and Systems. This paper discusses a scenario where multiple processors must agree on a single value (e.g., "attack" or "retreat") despite some processors potentially behaving maliciously.

Misbehavior can cause significant issues even if it is not intentionally malicious, such as due to bugs, misconfiguration, or hardware errors.

## Malicious Participants
Even a small number of malicious participants can subvert various systems. For example, the article "How a Lone Hacker Shredded the Myth of Crowdsourcing" (https://medium.com/backchannel/how-a-lone-hacker-shredded-the-myth-of-crowdsourcing-d9d0534f1731) highlights the potential for a single individual to disrupt crowdsourced platforms. However, some systems, like Wikipedia and eBay, have managed to function effectively despite these challenges.

## Examples of Resilient Systems
### Public Key Infrastructure (PKI) Model Resilient to Malicious CAs
#### What is PKI?
- **Public Key Infrastructure (PKI)**: A framework for managing public key encryption and digital certificates.
- **Purpose**: To enable secure communication by verifying the identity of entities through their public keys.

#### Trust Models for PKI
- **Monopoly**: A single trusted organization (e.g., Monopolist.org) issues all certificates.
  - **Pros**: Simple to understand and implement.
  - **Cons**: No universally trusted organization, monopoly pricing, difficulty in changing the CA key, and the risk of a single point of failure.
  
- **Oligarchy**: Multiple trusted Certificate Authorities (CAs) issue certificates.
  - **Pros**: Eliminates monopoly pricing.
  - **Cons**: Any of these organizations can impersonate anyone, reducing security.

- **Anarchy**: Users personally configure trust anchors, and anyone can sign certificates for anyone else.
  - **Pros**: Highly decentralized.
  - **Cons**: Does not scale, no practical way to determine trust, and anyone can impersonate anyone.

- **Recommended Model (Bottom-Up)**: Each node in the namespace represents a CA, and trust is hierarchical.
  - **Pros**: Security within an organization is controlled by that organization, easy to compute paths, and damage from a compromised CA is contained.
  - **Cons**: Requires a well-defined hierarchical structure.

### Networks Resilient to Malicious Switches
- **Traditional Routing**: Distributed computation of forwarding tables using link state protocols.
- **Malicious Switches**: Can provide false routing information, flood the network with garbage data, forward packets in random directions, or selectively drop traffic.

- **Proposed Solution (Byzantinely Robust Flooding)**:
  - **Memory Management**: Reserve buffers for each source.
  - **Bandwidth Management**: Use round-robin scheduling through buffers.
  - **Packet Integrity**: Sign packets and include sequence numbers to prevent tampering and replay attacks.
  - **Configuration**: Use a trusted node (TN) to distribute public keys and link state information, reducing configuration complexity.

## Conclusion
Resilience in the face of malicious participants requires robust and flexible designs. By understanding and addressing the different types of failures and misbehaviors, we can create systems that are both secure and functional.