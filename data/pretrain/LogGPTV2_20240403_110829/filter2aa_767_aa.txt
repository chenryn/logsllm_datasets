Resilience Despite Malicious 
Participants
Radia Perlman
PI:EMAIL
EMC
1
This talk
• I’ll give a few examples to show the wildly 
different types of problems and solutions
2
Byzantine Failures
• Fail-stop:  Something works perfectly, then halts
• Byzantine: Where something stops doing the right thing, 
but doesn’t halt, for instance
– Sends incorrect information
– Computes incorrectly
• The term came from a famous paper where a bunch of 
processors try to agree on the value of a bit (“attack” or 
“retreat”)
– Lamport, L., Shostak, R., Pease, M. (1982). “The Byzantine 
Generals Problem”, ACM Transactions on Programming 
Languages and System
• Misbehavior can cause problems even if not consciously 
malicious (bugs, misconfiguration, hardware errors)
3
Malicious Participants
• All sorts of things can be subverted with a 
small number of malicious participants
– “How a Lone Hacker Shredded the Myth of 
Crowdsourcing”
• https://medium.com/backchannel/how-a-lone-hacker-
shredded-the-myth-of-crowdsourcing-d9d0534f1731
4
Malicious Participants
• All sorts of things can be subverted with a 
small number of malicious participants
– “How a Lone Hacker Shredded the Myth of 
Crowdsourcing”
• https://medium.com/backchannel/how-a-lone-hacker-
shredded-the-myth-of-crowdsourcing-d9d0534f1731
• However…Things that shouldn’t work (but do)
– Wikipedia
– Ebay
5
I’ll talk about different examples
• PKI model resilient to malicious CAs
• Networks resilient to malicious switches
• Resilient and nonresilient designs for data 
storage with assured delete
• Human
6
Example 1: PKI
7
What’s PKI?
• “Public Key Infrastructure”
• A way for me to know your public key
8
Next topic: Trust Models for PKI
• Where damage from dishonest or confused CAs can 
be limited
9
Quick review of public keys, 
certificates, PKI, CAs
• Certification Authority (CA) signs “Certificates”
10
Alice’s Certificate, signed by CA
11
Name=Alice
Public key= 489024729
CA’s signature
Communication using certs
Alice
Bob
“Alice”, [Alice’s key is 24789]CA
“Bob”, [Bob’s key is 34975]CA
mutual authentication, etc.
12
What people do think about
• Academics worry about the math
• Standards Bodies worry about the format of the 
certificate
13
What people do think about
• Academics worry about the math
• Standards Bodies worry about the format of the 
certificate
• Both are important, but people should also worry 
about the trust model
– I will explain what that means
14
PKI Models
• Monopoly
• Oligarchy
• Anarchy
• Top-down, name constraints
• Bottom-up
15
Monopoly
• Choose one organization, for instance, “Monopolist.org”
• Assume Monopolist.org is trusted by all companies, 
countries, organizations
• Everything is configured to trust Monopolist.org’s public 
key
• All certificates must be issued by them
• Simple to understand and implement
16
Monopoly
17
Alice
Bob
Trust Monopolist.org
[This number is Bob’s key] signed by Monopolist.org
Monopoly: What’s wrong with 
this model?
• No such thing as “universally trusted” organization
• Monopoly pricing
• More widely it’s deployed, harder to change the CA 
key to switch to a different CA, or even to roll-over 
the key
• That one organization can impersonate everyone
18
Oligarchy of CAs
• Everything (say browsers) configured with 100 or so 
trusted CA public keys
• A certificate signed by any of those CAs is trusted
• Eliminates monopoly pricing
19
Oligarchy
20
Alice
Bob
Trust any of {CA1, CA2, CA3, …CAn}
[This number is Bob’s key] signed by CAi
What’s wrong with oligarchy?
• Less secure!
– Any of those organizations can impersonate 
anyone
21
Important Enhancement: Certificate 
Chains
• Instead of presenting a certificate signed by a CA Alice 
knows and trusts, Bob presents a chain of certs, starting 
with X1, which Alice trusts
22
Certificate chains
23
Alice
Bob
Trust X1
[X1 says a is X2’s key] signed by X1’s key
[X2 says b is X3’s key] signed by a
[X3 says d is Bob’s key] signed by b
Certificate chains
24
Alice
Bob
Trust X1
[X1 says a is X2’s key] signed by X1’s key
[X2 says b is X3’s key] signed by a
[X3 says d is Bob’s key] signed by b
Next model: Anarchy
25
Anarchy
•
User personally configures trust anchors
•
Anyone signs certificate for anyone else
•
Public databases of certs (read and write)
•
Alice tries to find a path from a key her machine knows, to the target 
name, by piecing together a chain
26
Unstructured certs, public database
27
Alice configured
with these
Alice wants Bob’s key
Unstructured certs, public database
28
Alice configured
with these
This cert says a is
Bob’s key
Alice wants Bob’s key
Unstructured certs, public database
29
Alice configured
with these
This cert says b is
Bob’s key
Alice wants Bob’s key
This cert says a is
Bob’s key
Anarchy
•
Problems
– won’t scale (too many certs, computationally too difficult to find 
path)
– no practical way to tell if path should be trusted
– (more or less) anyone can impersonate anyone
30
Now I’ll talk about how I think it 
should work
31
Now getting to recommended model
•
Important concept:
– CA trust isn’t binary: “trusted” or “not”
•
CA only trusted for a portion of the namespace
– The name by which you know me implies who you trust to certify my key
• Radia.perlman.emc.com
• Roadrunner279.socialnetworksite.com
• Creditcard#8495839.bigbank.com
– Whether these identities are the same carbon-based life form is irrelevant
32
Need hierarchical name space
• Yup!  We have it (DNS)
• Each node in namespace represents a CA
33
Top-down model (almost what we 
want)
a.com
x.a.com
y.a.com
PI:EMAIL
PI:EMAIL
PI:EMAIL
34
Root
Top-down model
• Everyone configured with root key
• Easy to find someone’s public key (just follow namespace)
35
Top-down model
• Everyone configured with root key
• Easy to find someone’s public key (just follow namespace)
• Problems:
– Still monopoly at root
– Root can impersonate everyone
– Every CA on path from Root to target can impersonate target node
36
Bottom-Up Model (what I 
recommend)
37
Two-way certificates (up and down)
• Each arc in name tree has parent certificate (up) 
and child certificate (down)
38
a.com
x.a.com
No need to start at the Root
a.com
x.a.com
y.a.com
PI:EMAIL
PI:EMAIL
PI:EMAIL
39
Root
Could start here
No need to start at the Root
a.com
x.a.com
y.a.com
PI:EMAIL
PI:EMAIL
PI:EMAIL
40
Root
Or here
No need to start at the Root
a.com
x.a.com
y.a.com
PI:EMAIL
PI:EMAIL
PI:EMAIL
41
In subtree below x.a.com, fewer CAs to trust
(a.com, and Root, aren’t on path to nodes in subtree) 
Root
Another enhancement: “Cross-
certificates”
• Cross-cert: Any node can certify any other node’s key
• Two reasons:
– So you don’t have to wait for PKI for whole world to be created first
– Can bypass hierarchy for extra security
42
Cross-links to connect two 
organizations
a.com
xyz.com
43
Nodes in a.com and xyz.com subtrees can find each other’s key.
No need for Root, or entire connected PKI
Cross-link for added security
a.com
xyz.com
root
44
Cross-link for added security
a.com
xyz.com
root
45
Nodes in this subtree can bypass root, and a.com
Navigation Rules
• Start somewhere (your “root of trust” .. could be your 
own public key)
• If you’re at an ancestor of the target node, follow down-
links
• Else, look for cross-link to ancestor, and if so, follow that
• Else, go up a level
46
Note: Crosslinks do not create anarchy 
model
• You only follow a cross-link if it leads to an 
ancestor of target name
47
Advantages of Bottom-Up
• Security within your organization is controlled by your 
organization (CAs on path are all yours)
• No single compromised key requires massive 
reconfiguration
• Easy to compute paths; trust policy is natural, and makes 
sense
• Malicious CA’s can be bypassed, and damage contained
48
Example 2: Network Routing
49
Traditional Router/switch
50
packet
Router/switch
Forwarding table
Computing the Forwarding Table
• Distributed computation of forwarding tables 
with link state protocol
51
52
A
B
C
D
E
F
G
6
2
5
1
2
1
2
2
4
Link State Routing
A network
53
A
B
C
D
E
F
G
6
2
5
1
2
1
2
2
4
A
B/6
D/2
B
A/6
C/2
E/1
C
B/2
F/2
G/5
D
A/2
E/2
E
B/1
D/2
F/4
F
C/2
E/4
G/1
G
C/5
F/1
Link State Routing
What about malicious switches?
• They can
– Give false info in the routing protocol
– Flood the network with garbage data
– Forward in random directions, resetting the hop 
count on packets to look new
– Do everything perfectly, but throw away traffic 
from a particular source
54
All sorts of traditional different 
approaches
• Try to agree who the bad guy(s) are
– Reputation (problems: who do you believe, bad guys 
can create arbitrarily many identities, what if bad guy 
is only bad to one source?)
– Troubleshooting (can be well-behaved when testing)
• Enforce routing protocol correctness
– 2-way links
– S-BGP
– But that’s just routing protocol.  Who cares about 
that?  You want your packets delivered.
55
My thesis (1988)
• Want to guarantee A and B can talk provided 
at least one honest path connects them
– With reasonably fair share of bandwidth
– “Honest path” means all switches on that path are 
operating properly
56
57
Flooding
• Transmit each packet to each neighbor except 
the one from which it was received
• Have a hop count so packets don’t loop 
infinitely
• This works! Pkts between A and B flow, if 
there is at least one nonfaulty path…
58
Flooding
• Transmit each packet to each neighbor except 
the one from which it was received
• Have a hop count so packets don’t loop 
infinitely
• This works! Pkts between A and B flow, if 
there is at least one nonfaulty path…
• If there is infinite bandwidth….whoops!
59
So, just a resource allocation problem
• The finite resources are
– computation in switches
• assume we can engineer boxes to keep up with wire 
speeds
– memory in switches
– bandwidth on links
60
Byzantinely Robust Flooding
•
Memory
–
reserve a buffer for each source
•
Bandwidth
–
round-robin through buffers
61
Byzantinely Robust Flooding
•
Source signs packet
–
(prevent someone occupying source’s buffer) 
•
Put sequence number in packet
–
(prevent old packets reinjected, starving new 
one)
62
Configuration
• Every node needs other nodes’ public keys; 
would be a lot of configuration
• So instead have “trusted node” TN (similar 
function to a CA)
– TN knows all other nodes’ public keys
– All other nodes need their own private key, and the 
trusted node public key
• Since everyone knows TN’s public key, TN can 
flood
– Info it floods:  all nodes’ public keys
63
Inefficient to send data with flooding
• So, we’ll do something else for unicast
• But we will use robust flooding for two things
– easing configuration (advertising public keys)
– distributing link state information
64
A
B
C
D
E
F
G
6
2
5
1
2
1
2
2
4
A
B/6
D/2
B
A/6
C/2
E/1
C
B/2
F/2
G/5
D
A/2