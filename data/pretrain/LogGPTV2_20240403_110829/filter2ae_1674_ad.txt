                wait_for_signal(dbg);
                brk_enable(bp);
            }else{
                ptrace(PTRACE_SINGLESTEP, dbg->d_pid, NULL, NULL);
                wait_for_signal(dbg);            
            }
        }
        show_UI(dbg);
    }
步过主要用在函数调用上，在使用步过时主要考虑以下几种情况：
  * pc触发了需要步过的call指令上的断点，即pc执行了0xcc
  * pc即将步过的call指令上被插入了断点
  * 其他就是单步情况
这里步过一个call采用的方式是在call指令下一条指令下断点然后PTRACE_CONT。同样使用capstone计算call指令长度然后断下后面一条指令，这样需要考虑如果被step
over的函数如果没有中断那么将触发call指令后面一条指令， **那么INT3被执行还需让pc-1**
    /**
     * This function invoked in 4 situation:
     * 1.Just work as step in
     * 2.jump over a call but has triggered an breakpoint(0xcc)
     * 3.jump over a call but no breakpoint in current call instruction
     * 4.jump over a call but there is 0xcc in current call instruction
     * we can show UI here
    */
    void dbg_step_over(Debugger *dbg){
        uint64_t possible_pc_prev = get_pc(dbg) - 1;        /*if this is breakpoint int 3 executed*/
        uint64_t possible_pc_currn = possible_pc_prev + 1;   /*if current instruction is breakpoint*/
        Breakpoint *bp_prev = NULL;
        Breakpoint *bp_currn = NULL;
        uint64_t data;
        uint64_t next_addr;
        /*Maybe stoped for triggered a breakpoint*/
        /*previous instruction. Jump over a call but has triggered an breakpoint(0xcc)*/
        HASH_FIND_PTR(dbg->d_brks, &possible_pc_prev, bp_prev);
        if(bp_prev != NULL && bp_prev->b_enabled && bp_prev->b_saved_data == 0xE8){     /*call`s op code is 0xE8*/
            /*call instruction has been triggered*/
            brk_disable(bp_prev);
            data = ptrace(PTRACE_PEEKDATA, dbg->d_pid, possible_pc_prev, NULL);
            csh handle = 0;
            cs_insn* insn;
            size_t count;
            int child_status;
            if (cs_open(CS_ARCH_X86, CS_MODE_64, &handle)) {
                printf("[error]: Failed to initialize capstone engine!\n");
                exit(-1);
            }
            cs_disasm(handle, (unsigned char*)&data, 8, possible_pc_prev, 1, &insn);
            next_addr = possible_pc_prev + insn->size;
            dbg_set_breakpoint_at_address(dbg, next_addr);
            set_pc(dbg, possible_pc_prev);
            continue_execution(dbg);                        /*Probably trigger another breakpoint in the function. So we need to disable it when stop*/
            brk_enable(bp_prev);
            HASH_FIND_PTR(dbg->d_brks, &next_addr, bp_prev);
            if(bp_prev != NULL && bp_prev->b_enabled){
                brk_disable(bp_prev);                       /*disable it*/
            }
            if((get_pc(dbg) - 1) == next_addr){             /*we stoped maybe because of triggering int3 below the call. So after continue we should check executed int3*/
                set_pc(dbg, next_addr);          
            }
            cs_free(insn, 1);
            cs_close(&handle);
            return;
        }else if(bp_prev != NULL && bp_prev->b_enabled && bp_prev->b_saved_data != 0xE8){
            /*normal instruction has been triggered. Just work as step in*/
            dbg_step_in(dbg);
            return;
        }
        /*stoped for PTRACE_SINGLESTEP*/
        /*current instruction. Jump over a call but there is 0xcc in current call instruction*/
        HASH_FIND_PTR(dbg->d_brks, &possible_pc_currn, bp_currn);
        if(bp_currn != NULL && bp_currn->b_enabled && bp_currn->b_saved_data == 0xE8){
            /*current instruction is breakpoint and it`s a function invoking*/
            brk_disable(bp_currn);
            data = ptrace(PTRACE_PEEKDATA, dbg->d_pid, possible_pc_currn, NULL);
            csh handle = 0;
            cs_insn* insn;
            size_t count;
            int child_status;
            if (cs_open(CS_ARCH_X86, CS_MODE_64, &handle)) {
                printf("[error]: Failed to initialize capstone engine!\n");
                exit(-1);
            }
            cs_disasm(handle, (unsigned char*)&data, 8, possible_pc_currn, 1, &insn);
            next_addr = possible_pc_currn + insn->size;
            dbg_set_breakpoint_at_address(dbg, next_addr);
            continue_execution(dbg);                        /*Probably trigger another breakpoint in the function. So we need to disable it when stop*/
            brk_enable(bp_currn);
            HASH_FIND_PTR(dbg->d_brks, &next_addr, bp_currn);
            if(bp_currn != NULL && bp_currn->b_enabled){
                brk_disable(bp_currn);                      /*disable it*/
            }
            if((get_pc(dbg) - 1) == next_addr){             /*we stoped maybe because of triggering int3 below the call. So after continue we should check executed int3*/
                set_pc(dbg, next_addr);          
            }
            cs_free(insn, 1);
            cs_close(&handle);
            return;
        }else if(bp_currn != NULL && bp_currn->b_enabled && bp_currn->b_saved_data != 0xE8){
            /*current instruction is a breakpoint but not a calling so we could just step over. Just work as step in */
            dbg_step_in(dbg);
            show_UI(dbg);
            return;
        }
        /*not breakpoint in current invoking OR current normal instruction*/
        data = ptrace(PTRACE_PEEKDATA, dbg->d_pid, possible_pc_currn, NULL);
        if((data & 0xff) == 0xE8){          
            /*Current instruction is a call.Set breakpoint at next instruction then continue*/
            csh handle = 0;
            cs_insn* insn;
            size_t count;
            int child_status;
            if (cs_open(CS_ARCH_X86, CS_MODE_64, &handle)) {
                printf("[error]: Failed to initialize capstone engine!\n");
                exit(-1);
            }
            cs_disasm(handle, (unsigned char*)&data, 8, possible_pc_currn, 1, &insn);
            next_addr = possible_pc_currn + insn->size;
            dbg_set_breakpoint_at_address(dbg, next_addr);
            continue_execution(dbg);
            HASH_FIND_PTR(dbg->d_brks, &next_addr, bp_currn);
            if(bp_currn != NULL && bp_currn->b_enabled){
                brk_disable(bp_currn);
            }
            if((get_pc(dbg) - 1) == next_addr){             /*we stoped maybe because of triggering int3 below the call. So after continue we should check executed int3*/
                set_pc(dbg, next_addr);          
            }
            cs_free(insn, 1);
            cs_close(&handle);
            return;
        }else
            dbg_step_in(dbg);           /*Current instruction is normal. Just work as step in*/
    }
到这里已经具备基本功能了，可以在`dbg_handle_command`中添加命令支持：
    void dbg_handle_command(Debugger *dbg, char *cmd){
        char *lcmd = strdup(cmd);
        char *argv[8] = { 0 };    
        char *command;
        argv[0] = strtok(lcmd, " ");
        for(int i = 1; i d_pid, get_register_from_name(argv[2])));
            }else if(is_prefix(argv[1], "write")){
                set_register_value(dbg->d_pid, get_register_from_name(argv[2]), strtoul(argv[3], NULL, 16));
            }
        }else if(is_prefix(command, "memory")){     /*memory/m read [addr] OR write [addr] [value]*/
            if(is_prefix(argv[1], "read")){
                printf("value:\t0x%08lx\n", dbg_read_memory(dbg, strtoul(argv[2], NULL, 16)));
            }
            else if(is_prefix(argv[1], "write")){
                printf("0x%08lx\t->\t", dbg_read_memory(dbg, strtoul(argv[2], NULL, 16)));
                dbg_write_memory(dbg, strtoul(argv[2], NULL, 16), strtoul(argv[3], NULL, 16));
                printf("0x%08lx\n", dbg_read_memory(dbg, strtoul(argv[3], NULL, 16)));
            }
        }else if(is_prefix(command, "step")){       /*step in OR step over*/
            if(is_prefix(argv[1], "in")){
                dbg_step_in(dbg);
            }else if(is_prefix(argv[1], "over")){
                dbg_step_over(dbg);
            }else{
                puts("Usage: step in / step over");
            }
        }
        else{
            fprintf(stderr, "Unkown command: %s.\n", command);
        }
        return free(lcmd);
    }
这些是目前完成的功能，还有进程和线程支持还未完成
### 汇编
一般debugger是要支持显示汇编的，这里实现的只是在每次单步和触发断点时打印寄存器信息和汇编。可以在每次单步或者触发断点时读取当前pc处的机器码借助capstone反汇编，
**但需要注意的是对于x86_64架构最长汇编指令为15字节但很少出现比较长的指令** ，所以实现汇编打印的时候每次仅读取16个字节进行反汇编并打印指令
    /**
     * consider of the longest instruction is 15bytes(x86_64) then we read 16bytes everytime
     * and disassemble it with capstone engine
     * befor invoking show_asm the caller should make sure current pc is not a breakpoint
    */
    void show_asm(Debugger *dbg){
        csh handle;
        cs_insn *insn;
        size_t count;
        uint8_t *code;
        size_t size = 15;
        uint64_t address;
        if(cs_open(CS_ARCH_X86, CS_MODE_64, &handle)){
            printf("[error] cs_open(%d, %d, 0x%08lx)\n", CS_ARCH_X86, CS_MODE_64, &handle);
            exit(-1);
        }
        code = calloc(1, 16);
        address = get_pc(dbg);
        *(uint64_t *)code = ptrace(PTRACE_PEEKDATA, dbg->d_pid, address, NULL);
        *((uint64_t *)code + 1) = ptrace(PTRACE_PEEKDATA, dbg->d_pid, address + 8, NULL);
        /*before we show assembly after pc we should consider if there is breakpoint in machine code behind*/
        Breakpoint *bp = NULL;
        for(uint64_t i = 0, tmp = address; i d_brks, &tmp, bp);
            if(bp != NULL && bp->b_enabled){    
                *((uint8_t *)code + i) = bp->b_saved_data;
            }
            tmp++;
        }
        puts("-------------------------[Assembly]-------------------------");
        insn = cs_malloc(handle);
        while(cs_disasm_iter(handle, (const uint8_t **)&code, &size, &address, insn)){
            if(size + insn->size == 15)
                printf("\e[96m0x%08lx:\t%s\t%s\taddress, insn->mnemonic, insn->op_str);
            else
                printf("0x%08lx:\t%s\t%s\n", insn->address, insn->mnemonic, insn->op_str);  
        }
        cs_free(insn, 1);
        cs_close(&handle);
    }
还有就是如果读取的15个字节中 **有断点(0xcc)那么反汇编结果是不准确的** ，因此先遍历是否存在断点并resotre原来的数据再进行反汇编。
## 效果
这里还没有实现多线程/进程调试的功能，[源码](https://github.com/squarepants0/minidbg)，但也算有个调试器的架子了
## 参考
  * 
  * [Writing a Linux Debugger Part 1: Setup (tartanllama.xyz)](https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/)：作者讲解非常详细，还涉及源码调试功能，这里就没有加入该功能
  * [一文看懂 | GDB底层实现原理](https://mp.weixin.qq.com/s?__biz=MzA3NzYzODg1OA==&mid=2648465474&idx=2&sn=52dfd43e8f376e1ff16b2f81c3c002a7&scene=21#wechat_redirect)
  * [自己动手写一个GDB｜基本功能](https://mp.weixin.qq.com/s?__biz=MzA3NzYzODg1OA==&mid=2648466708&idx=1&sn=fd765d1e3c958c194010f35728e46fb0&scene=21#wechat_redirect)
  * [squarepants0/minidbg: Writing a minidbg on Linux with C (github.com)](https://github.com/squarepants0/minidbg)
  * [troydhanson/uthash: C macros for hash tables and more (github.com)](https://github.com/troydhanson/uthash)
  * [antirez/linenoise: A small self-contained alternative to readline and libedit (github.com)](https://github.com/antirez/linenoise)
* * *