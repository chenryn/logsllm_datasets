tionally consider only batch-processing applications, so that
we can fully automate the benchmarking process. For each
program, we also select a naturally-occurring input to ac-
company the program.
To proﬁle the performance of our optimization procedure
against history-based access control policies of various struc-
tural characteristics, we designed a stochastic procedure for
generating benchmarking policies. Given a program P and
an input I, an instance of the experimental conﬁguration
EC[pnode , peﬀ , ppre ] (where pnode , peﬀ and ppre are proba-
bilities) is an operator assignment op[·] stochastically con-
structed as follows:
1. Select a set N of program points from P as targets
of operator injection. Each program point is selected
with probability pnode . Operator assignment op[n] will
remain h∅, ∅i for n 6∈ N .
2. Fix a set Π of ten propositions (i.e., boolean variables).
For each n ∈ N , set op[n] to h∅, eﬀ ni, where each eﬀ n
is constructed independently as follows: Select a subset
P of Π, such that each p ∈ Π is selected independently
with probability peﬀ . Then, construct eﬀ n such that,
for each p ∈ P , with equal probability either p or ¬p
appears in eﬀ n.
3. Instrument P with op[·] and then execute P on input
I. Record the traversed control ﬂow path.
4. For each program point n ∈ N that appears on the
recorded path, compute the set GUAin [n] of literals
guaranteed to be satisﬁed at n whenever n is visited
during the above execution.
d
e
v
o
m
e
r
d
a
e
h
r
e
v
o
f
o
e
g
a
t
n
e
c
r
e
P
)
%
(
n
o
i
t
a
z
m
i
i
t
p
o
y
b
 100
 80
 60
 40
 20
 0
B
C
E
L
B
c
V
e
r
pre (empty)
pre (inferred)
eff (empty)
eff (inferred)
P
r
o
G
u
a
r
d
S
a
blc
C
C
J
a
v
a
J
a
v
a
C
C
T
a
r
Figure 7: Optimization eﬀectiveness with and with-
out method interfaces.
5. For each n ∈ N , select a subset pre n of literals from
GUAin [n], such that each member of GUAin [n] is se-
lected with probability ppre .
6. Set op[n] to hpre n, eﬀ ni for each n ∈ N . This is the
operator assignment we seek to construct.
The construction procedure guarantees that, on input I, pro-
gram P honors the policy represented by op[·], and thus
benchmarking will not be interrupted by security exceptions.
The probability pnode measures operator density , while the
probabilities peﬀ and ppre measure eﬀect density and pre-
condition density respectively.
Given a program P, an input I, and an operator assign-
ment op[·], the eﬀectiveness of an optimization procedure
is measured as follows. First, P is instrumented with op[·],
and the instrumented program is executed with input I. The
overhead of execution (as deﬁned in Sect. 4) is recorded. To
better assess the relative eﬀectiveness of precondition and
eﬀect elimination, we record the number of preconditions
pre , and the number of eﬀects checked as Oorg
checked as Oorg
eﬀ .
Second, the process is repeated with an optimized operator
assignment obtained by applying Ω to op[·]. The overhead of
execution as incurred by precondition checks and eﬀect as-
sertions are recorded as Oopt
eﬀ . Optimization eﬀec-
tiveness is then expressed as the ratios Rpre = 1 − Oopt
pre /Oorg
pre
and Reﬀ = 1 − Oopt
eﬀ . More eﬀective optimization pro-
cedures have larger Rpre and Reﬀ .
pre and Oopt
eﬀ /Oorg
Our experiments were conducted on an IntelCore 2 Duo
2.33GHz iMac with 2GB of RAM, running Mac OS X 10.4.9,
JDK 1.6.0 Update 3, Soot 2.2.5 and Jasmin 2.2.5.
7.1 Experiment 1: Optimization With and
Without Optimization Directives
In a ﬁrst experiment, two instantiations of the revised op-
timization procedure (Sect. 5) were considered. In the ﬁrst
instantiation, all method interfaces are set to h∅, ∅, ∅, ∅, ∅, Πi.
Adopting an (almost) empty method interface reduces the
revised optimization procedure to the basic version reported
in Sect. 4, except that by setting dead fail to Π we avoid
confusing the optimization algorithm with the overly con-
servative control ﬂow analysis built into Soot for analyzing
exception ﬂow. In the second instantiation, we employed the
method interface generation algorithm [41, Appendix A] to
generate conservative method interfaces for all methods, and
then set dead fail uniformly to Π for the same reason. This
d
e
v
o
m
e
r
d
a
e
h
r
e
v
o
f
o
e
g
a
t
n
e
c
r
e
P
)
%
(
n
o
i
t
a
z
m
i
i
t
p
o
y
b
d
e
v
o
m
e
r
d
a
e
h
r
e
v
o
f
o
t
e
g
a
n
e
c
r
e
P
)
%
(
n
o
i
t
a
z
m
i
i
t
p
o
y
b
 100
 80
 60
 40
 20
 0
 100
 80
 60
 40
 20
 0
BCEL
BcVer
JavaCC
JavaTar
ProGuard
SableCC
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1
 100
 80
 60
 40
 20
 0
BCEL
BcVer
JavaCC
JavaTar
ProGuard
SableCC
0
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9
1
 100
 80
 60
 40
 20
 0
BCEL
BcVer
JavaCC
JavaTar
ProGuard
SableCC
0
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9
1
(a)
(b)
(c)
Figure 5: Rpre with diﬀerent (a) peﬀ (b) ppre (c) pnode .
BCEL
BcVer
JavaCC
JavaTar
ProGuard
SableCC
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1
 100
 80
 60
 40
 20
 0
BCEL