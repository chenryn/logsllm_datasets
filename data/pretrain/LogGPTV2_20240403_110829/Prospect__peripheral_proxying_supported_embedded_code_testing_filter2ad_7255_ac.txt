system call, as its exact behavior can frequently not be in-
ferred prior to the actual execution.
3.2 IOCTL Mechanism and its Shortcomings
The IOCTL (I/O control) mechanism allows more ﬂexi-
bility in the communication with underlying device ﬁles. In
general, there are two types of IOCTLs: Well-formed and
unrestrictive IOCTLs. The diﬀerence is that well-formed
IOCTLs have information about the type of the call en-
coded in the request number, whereas unrestricted IOCTLs
do not provide this kind of information.
\
#d e f i n e
( ( d i r << IOC DIRSHIFT ) | ( t y p e << IOC TYPESHIFT )|\
| ( s i z e << IOC SIZESHIFT ) )
( nr << IOC NRSHIFT )
IOC ( d i r , type , nr , s i z e )
Listing 1: Encoding for well-formed IOCTLs
Listing 1 shows how information such as the direction
(e.g. read, write or none/execute), the request number or
the amount of data (size) are encoded in the ioctl request
parameter. By decoding this parameter prior to the actual
ioctl call, it is possible to determine the direction of the
data transfer and whether the provided parameter is a con-
stant or a pointer to memory.
In this case, PROSPECT
could forward the request to the target system.
However, for unrestricted IOCTLs and prior to the ac-
tual ioctl execution, PROSPECT would have no way to
determine the direction of the data, how much data should
be transferred and whether a provided parameter is sup-
posed to be a pointer or not. Since unrestricted IOCTLs are
commonly used for device driver communication, we had to
address this issue in the design of PROSPECT. We solved
the challenge by introducing a concept we denote Dynamic
Memory Tunneling which is described in Section 4.3.
4.
IMPLEMENTATION
Figure 3: Peripheral Character Device Forwarding
As sketched in Sections 2.2 and 2.5, we assume that the
analyst would like to dynamically instrument a binary on an
embedded system that heavily accesses peripheral devices.
While infeasible without PROSPECT, the application can
now be executed inside an arbitrary analysis environment.
Figure 3 provides a schematic overview of PROSPECT. On
the left side, the application that should be analyzed is be-
ing executed within an arbitrary state-of-the-art debugger.
However, instead of directly accessing the peripheral hard-
ware through a character device, the application actually
interacts with the virtual character devices that were gener-
ated through PROSPECT. At this point, PROSPECT in-
tercepts the system calls deﬁned in file_operations and
forwards them to the userspace PROSPECT client. The
client decides whether the system call should be executed
locally or on the remote system. If remote execution is re-
quired, it communicates with the lightweight PROSPECT
3333) with multiple synchronization mechanisms. On the tar-
get system, there is a single PROSPECT server that can
handle multiple incoming connections. Each client repre-
sents a character device that is forwarded to the target
system, whereas each client can handle concurrent devices
accesses by multiple threads and/or processes (Figure 4).
PROSPECT relies on POSIX thread synchronization mech-
anisms (i.e. mutexes) to sustain the order of all accesses
throughout the system.
4.2 File Descriptor Tracking
PROSPECT needs to keep track of ﬁle descriptors. Essen-
tially, there are three cases we need to consider: (1) single
processes, (2) child processes (i.e. created with fork()) and
(3) threads. As ﬁle descriptors work on a per-process basis,
they are only unique within the context of a process. When-
ever a new process is spawned, new ﬁle descriptors returned
by open() typically start at 3 (as 0,1 and 2 are already
used for stdin, stdout and stderr, respectively). Considering
two diﬀerent processes, both processes may receive the same
ﬁle descriptor (i.e. 3), but it may correspond to completely
diﬀerent ﬁles with diﬀerent properties (e.g. ﬁle oﬀsets or
permissions). If a process uses fork() to spawn a child pro-
cess, it will inherit all open ﬁle descriptors from its parent,
but any new ﬁle descriptors it receives at a later point will
be unique to the child process. In contrast, threads behave
much like a single process, as all ﬁle descriptors they receive
are shared between them. As a result, both the PROSPECT
client as well as the server would need to be aware of the type
of process or thread in order to emulate normal operating
system behavior.
PROSPECT tackles this challenge by taking a diﬀerent
approach. Instead of emulating the behavior of a real sys-
tem, it uses globally unique ﬁle descriptors on the server
side and supplies them in a synchronized way to all clients.
More speciﬁcally, we implemented the PROSPECT server
as a single process but with multiple threads to handle dif-
ferent connections. For that reason, all ﬁle descriptors it
receives from the target’s OS kernel are unique within the
server and, ultimately, within all PROSPECT clients and all
processes and/or threads accessing virtual character devices
as well.
4.3 Dynamic Memory Tunneling
In Section 3.2, we explained how the IOCTL mechanism
is used for more ﬂexible device driver communication. How-
ever, unlike well-formed IOCTLs, their unrestricted coun-
terparts do not provide any data exchange information (i.e.
information on direction and the amount of data that should
be exchanged with the driver). As unrestricted IOCTLs are
frequently used, we considered diﬀerent approaches to ad-
dress this challenge in PROSPECT.
Both, the userspace application(s) accessing a character
device as well as the character device driver are aware of the
parameters for unrestricted IOCTLs. A userspace applica-
tion may not use all unrestricted IOCTLs the driver sup-
ports. However, the driver implementation always includes
all supported unrestricted IOCTLs as well as the informa-
tion on how data can be exchanged with them. Even better,
device driver code is typically structured in a known way
so that it can be loaded by the operating system. For that
reason, we could extract the kernel image and device drivers
from the target system and employ static (or even dynamic)
Figure 4: Concurrent Device Access
server on the target system. The server has very low sys-
tem requirements and can thus be executed on a wide range
of embedded systems. Once the system call has been exe-
cuted on the target system, any results are fed back into the
software application under analysis.
In order to generate virtual character devices and inter-
cept system calls, parts of PROSPECT need to run in kernel
context. While we could have realized all parts of PRO-
SPECT in kernel space, we decided that the major part
of our implementation should be in user space.
In com-
parison to a full kernel space implementation, a user space
centric implementation has the advantage of increased sys-
tem stability, security and, most of all, more ﬂexibility. We
implemented PROSPECT from scratch and our overall im-
plementation consists of roughly 7, 500 lines of C code. In
summary, PROSPECT comprises:
• A lightweight kernel driver utilizing the FUSE [15] ker-
nel framework.
• A userspace driver combined with the PROSPECT
client
• A lightweight server component running on the target
system.
The PROSPECT lightweight server needs to be executed
on the target system. Assuming that the security analyst
typically has full physical access to the embedded device
under test, we believe that this is a viable option. For in-
stance, the analyst could use the bootloader console to get
root level access to the operating system and then simply
copy the PROSPECT statically linked binary to the device
by using an attached storage medium or a networked remote
machine as source.
Since our lightweight kernel driver utilizes the FUSE ker-
nel framework, PROSPECT has the advantage that it is
applicable to a wide range of operating systems, including
Linux, FreeBSD, NetBSD, OpenSolaris, Android and OS X.
4.1 Concurrent Device Accesses
On typical embedded systems, a character device might
be accessed by multiple threads or processes concurrently.
Likewise, a single process or thread might interact with mul-
tiple devices at the same time. PROSPECT can handle
these scenarios by using a client/server architecture (Figure
/dev/chardev [virtual]PROSPECTServerPROSPECTClient InstanceProcessProcessProcessThreadThread/dev/chardev [real]VMTargetPROSPECTDriver334code analysis techniques on the binaries to extract a data ex-
change rule-set for all available unrestricted IOCTLs. The
drawback of this approach is that PROSPECT would need
to be aware of operating system speciﬁcs (such as architec-
ture, kernel version, kernel conﬁguration, etc.). Thus, it
would be hard to use PROSPECT on a wide range of dif-
ferent systems without major modiﬁcations. On the other
side, extracting a rule-set from the userspace application,
the analyst wants to work with, might be a challenge on its
own (i.e. due to code size, program obfuscation or required
manual code analysis).
Another approach we considered is that instead of extract-
ing a rule set, PROSPECT could dynamically observe any
unrestricted IOCTLs during program execution and learn
from them. However, this is not always feasible, as the anal-
ysis would need to take place on the target system that does
not necessarily support dynamic analysis in the ﬁrst place.
In fact, one of the goals of PROSPECT is to enable dynamic
analysis on embedded systems, that might not support it for
the reasons mentioned in Section 2.5.
Since any analysis required to gain information on unre-
stricted IOCTL parameters should not depend on the capa-
bilities of the target system, we implemented dynamic mem-
ory tunneling. The key idea of dynamic memory tunneling
is to always transfer a memory buﬀer to the target system
if the IOCTL parameter is a possible pointer to a memory
location. Accordingly, for each unrestricted IOCTL call, we
need to answer the following questions:
• Is the parameter a valid pointer?
• How much data should be transferred to/from the tar-
get?
To determine whether the IOCTL parameter is a valid
pointer, we use a heuristic. For each unrestricted IOCTL
call, our system retrieves the PID (process ID) of the pro-
gram that currently accesses the character device. For that
PID it retrieves all mapped memory regions from the OS
kernel (i.e. through /proc/PID/maps) and ﬁlters out any re-
gions that are not suitable for a buﬀer (i.e. memory regions
that are not read- and writable at the same time). If the
parameter value is in one of the remaining memory regions,
PROSPECT assumes that the parameter is a pointer and a
data transfer with the target is initiated.
The question remains how much memory should be trans-
ferred to and from the target system. During our experi-
ments we observed that the amount of data exchanged with
unrestricted IOCTLs was below the page size (typically 4096
bytes on Linux) in all cases. To allow exceptions with larger
buﬀer sizes, we experimentally limited the maximum size
to 3∗PAGESIZE = 12KiB. However, PROSPECT can be
easily reconﬁgured with increased limits. Besides the con-
ﬁgured limit, the amount of memory that is actually trans-
ferred, can be limited through the mapped memory region
boundaries as well.
During execution, for any unrestricted IOCTL call with a
valid pointer as parameter, PROSPECT takes the following
steps:
1. Given the pointer address ADDR and the PID of the
calling process, use the kernel driver to read up to
3∗PAGESIZE bytes from the mapped memory region
of the corresponding userspace process.
2. Transfer the buﬀer to the PROSPECT server on the
target system and execute the unrestricted IOCTL call
on a local copy of the transferred buﬀer.
3. Once ioctl() returns, compare the transferred buﬀer
with the potentially modiﬁed local copy of the buﬀer
to determine how many bytes were changed in the local
copy.
4. In addition to the ioctl() return and errno values,
send back the content of the local copy buﬀer to the
corresponding client. The size of the transfer is limited
through the last byte in the buﬀer that has actually
changed (see Step 3).
5. Given the pointer address ADDR and the PID of the
calling process, use the kernel driver to overwrite the
corresponding memory region of the userspace process
(i.e. starting at ADDR) with the content of the re-
sponse buﬀer.
6. Return the ioctl() return and errno values to the
calling process.
Through dynamic memory tunneling, PROSPECT can
forward unrestricted IOCTLs with arbitrary read, write and
execute operations.
5. EVALUATION
To provide a well-founded discussion of our system, we
evaluated PROSPECT in two ways. First, we collected sys-
tem call timing information to determine the performance
impact PROSPECT causes in comparison with the native
system. Second, we conducted a case study over more than
6 months by running a full-scale security audit of a widely
used commercial ﬁre alarm system in the building automa-
tion domain.
5.1 Evaluation of Performance Impact
On a 324 MHz embedded Linux MIPS system with 16MiB
RAM, we used the strace tool to collect timing information
for the system calls that are used for basic character device
access (see Table 3 in Section 3.1 for details). Table 4 shows
the userspace system calls we monitored.
Operation
close()
ioctl()
lseek()
_newselect()
open()
read()
write()
Function
Close device
I/O Control mechanism
Seek to a given position
System call used for poll()
Open device
Read data from device
Write data to device
Table 4: System Calls used for Character Device
Access
To collect timing information, we ran a userspace applica-
tion that makes heavy use of all of the system calls in Table
4.
In order to determine how much longer the forwarded
system calls take, we ran the application with PROSPECT
in our analysis environment (qemu-system-mips) as well as
natively on the embedded MIPS system. For both execu-
tions we used strace to create system call logs with timing
335system implementation. The userspace programs make heavy
use of multi-threading (pthreads) and the fork mechanism.
In the running state, there is a total of 29 multi-threaded
ﬁre-alarm system speciﬁc processes, spawning multiple threads
depending on the handled networking communication.
In
total, there are 5 diﬀerent hardware peripherals that are ac-
cessed concurrently by the diﬀerent processes and threads.
As soon as the whole system is up and running, any network
communication is processed. The system resources are very
limited and the ﬁre alarm implementation consumes nearly
all available resources.
Due to the resource constraints, it is not possible to run
a debugger on the system. Thus, dynamic analysis on the
device is not possible either and the code that handles the
network communication cannot be analyzed in another en-
vironment, as the device speciﬁc peripheral hardware would
be missing there. As a result, the software application(s)
would not start up in the ﬁrst place. In this case, the an-
alyst would be limited to static analysis and/or very basic
security testing techniques.
To conduct a security audit of the ﬁre alarm system im-
plementation that handles the network communication, we
employed PROSPECT to run the ﬁre alarm system soft-
ware implementation inside a virtual analysis environment.
In this case, we utilized qemu, an open source virtualization
environment that also supports the MIPS architecture. The
center of Figure 6 shows the multi threaded userspace appli-
cation with all connected installations for a complete anal-
ysis.
It concurrently interacts with 5 diﬀerent peripheral
devices which are handled by multiple PROSPECT client
instances, each handling exactly one character device. For
automated fuzz testing of the network protocol implementa-
tion, we set up three diﬀerent machines. On the left, there
is the Fire Alarm Control VM that runs the manufacturer’s
software to communicate with the ﬁre alarm system over
a network connection. We used this machine to generate
network traﬃc and capture it (Packet Capture) to obtain
packets that can be used as input data for our fuzzer. Ac-
cordingly, the fuzzer can generate randomized traﬃc that
looks very similar to the original communication protocol by
taking packets from the captured network traﬃc, random-
izing a single byte at a random position within the packet
each test run and replaying the communication towards the
userspace application under test. This allows us to use a
single fuzzer implementation for a broad range of propri-
etary network protocols without the need to know protocol
speciﬁcs or the requirement to develop a new fuzzer for each
protocol. The downside of this approach is the limitation
of the test cases to the captured network communication: If
feasible protocol states are not captured during the capture
phase, our fuzzer will not be able to test them. At the same
time, we used a debug server to run the userspace applica-
tions we want to analyze. Through the Debugger VM (with
a state-of-the-art debugger), the fuzzer can thus monitor the
state of the software application and whether the test pack-
ets it sent, caused an exception such as a memory access
violation. In this case, the fuzzer stores the network packets
that led to the exception for later (manual) analysis.
Figure 5: Proprietary Fire Alarm System
information. For our measurements we collected timing in-
formation for 196, 075 system calls on the analysis environ-
ment and for 166, 972 system calls on the embedded MIPS
system. To compare the execution time of the system calls,
we created custom analysis scripts to keep track of the ﬁle
descriptors. This way, we were able to consider only timing
information for calls made on character devices that are for-