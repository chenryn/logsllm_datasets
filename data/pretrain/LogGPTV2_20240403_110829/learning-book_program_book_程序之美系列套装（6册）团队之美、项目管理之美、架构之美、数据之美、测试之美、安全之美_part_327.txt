顾虑不愿回答这些要求。即使在他们提供正确的文件时，报告缺陷
的人或许会忘记引发缺陷的步骤。这样就会使开发人员对问题的真
正本质陷入迷范。
虽然模糊测试不能防止或替代所有这些缺陷报告，但它可以在困扰
用户之前就发现那些令人讨厌的导入错误、崩溃和停止，从而使整
个过程大大简化。否则，由于这些问题很难避免或绕开，用户的业
务会因此陷入停顿，直至有修复公布。模糊测试把负担从用户移还
给测试和开发人员，有助于降低这些事故的频率，简化报告这些错
误的过程。同样，它给开发人员提供必要的文档和引发缺陷的准确
步骤，让他们不必作任何猜测。采用模糊测试有助于开发紧密无缝
的办公软件，使用户不再需要与复杂的缺陷表格打交道，以保持简
约软件的形象。
增强安全性
通过生成无效和变化的输入，模糊测试还可以增强格式过滤器的稳
定性和安全性，包括对开发和测试较少侧重的过时文档格式。事实
上，当微软Ofice团队发布Ofice2003ServicePack3时，他们默认地
停止了对几个旧格式的支持，以防止在多数用户从不使用的一些过
1870
---
## Page 1872
滤器中存在的安全隐患。口虽然这或许是保护用户和减少测试负担
最简单的策略，但你也可以设法让那些少数用户需要的输入器及输
出器像常用的那些一样稳定和可靠。即使你下结论，那样做所需的
工作量不值得，你也可以如上所述地模糊测试一小组样本文档来模
拟更大范围的文件，以快速取得可观的改进。
现代的办公软件都包含可被恶意用户瞄准的入口点一一从前述的几
十种格式到功能强大的为应用和文档提供控制的宏语言。由于这些
应用的很多输入出自未知的来源，用户仅打开一个文件就可能不知
不觉地暴露给病毒和恶意软件。为了应付这种威胁以及O币ce2003
中发现的大量安全漏洞，微软在开发它的下一版本时更加强调模糊
测试。“Ofice2007，特别是它的文件格式，在开发中广泛地用了模
糊测试。”[2]
如上述微软的例子所显示，模糊测试可在功能向公众发布之前就发
现安全问题。这样的防御性测试不但使用户受益，不再需要那么经
常地为修补安全漏洞而升级，也使开发者收益，他们无须紧急发布
修补漏洞的信息。模糊测试有助于更稳定和安全的发布，更容易预
防漏洞溜进发布，第一时间让开发者和用户都满意。
[1] http://support.microsoft.com/kb/938810/en-us.
[2]http:/www.computerworld.com/action/article.do?
command=viewArticleBasic&articleld=9038198
模糊测试
虽然模糊测试严格来说不需任何安装，但一些准备工作可使这一技
术更有效。
准备
为取得模糊测试的最佳效果，你需要准备一组有代表性的样本。如
果你还没有一组全面的文档，你应该从你的缺陷跟踪库里找样本。
这些文档很重要，毕竞它们是附在缺陷报告中的，因此很可能过去
普引起过问题。经过简单的模糊，它们很可能还会发现新问题。
另外，这些文档早为开发人员熟知，可以不费力地取出或引用。比
如，如果你在用Bugzilla，你在报告新问题时可以对原来的文件加以
简短说明，就像这样：“下面这个文档是缺陷123的附件456的模糊
1871
---
## Page 1873
有的文件链接起来，使开发人员更容易在需要时以它们为参考获取
进一步的信息。
用模糊测试来进行这种自动管理也是一种便捷的方法，避免离线式
的样本储存及跟踪所造成的问题。每个上传到缺陷数据库的文件得
到一个唯一的号码，可以用来清楚和统一地查询。由于这些文档早
已在数据库，你不必为任何隐私或保密问题烦恼。这些问题常发生
在用户和公司专送给开发人员的文档。这些文档通常只限于少数开
发人员的手中，这使得对它们的跟踪和查阅很困难。上传到数据库
后，即使你已寻遍了你自己的缺陷库，你还可以转向其他缺陷库，
尤其是相似产品的那些。你可以转向支持文件类型或扩展名的搜索
引擎。你也可创造一些自己的样本来测试新的或不常用的功能，以
保证合理的测试覆盖。
用现有的缺陷文件只是用模糊对现有测试方法进行补充的许多有创
意和简便的方法之一。比如，用这些样本你可生成引发缺陷的模糊
文件，然后写单元测试来防止回归并捕捉相似代码中的缺陷。模糊
测试很容易设置，尤其你如果已有容易自动化的功能测试框架或命
令行模式，你就无须对你的核心应用作许多改动。你也可以把这种
技术与代码覆盖的努力相结合来扩大你测试的范围。
常规模糊
只要配备了一个模糊器和一些样本文档，你就可很快开始生成各种
不同的文件，模拟其他办公应用软件的行为和随机的损害。我用zzuf
山开始模糊测试。这是一种多用途输入的模糊器，可以改变一个文
件中随机的数位，以满足许多模拟需要。我把它用于Gnumeric，一
个类似于MicrosoftExcel的开源电子表格软件，还用了我的程序员同
事用来测试这个程序的几种电子表格文件。只需用两步：
1 zzuffuzzed_spreadsheet.xls
2 gnumeric fuzzed_spreadsheet.xls
我就可以模糊一个现有的文档，并看到Gmumeric如何处理不同的输
入。这是最基本的模糊测试的方式：取得某个输入，把它损坏或更
1872
---
## Page 1874
改，然后把它用于测试。当然，这是个简单的例子，没有考虑文件
格式的复杂性，但这是一个快捷有效的开端。比如，第一条命令将
随机模糊0.4%（默认比例）的文件，无需保证某些结构的完整性，
如说文件标题。用这一测试方法，我得以引发了好儿个缺陷。当
然，要有效地模拟数十种应用和版本，你需要用更复杂的技术和更
多的样本文档。正如好的办公软件那样，zuf自动地隐藏其复杂性，
让你轻而易举地写出简单而有效的测试。
在你进一步测试时，你可以开始使用zzuif之类的多用途模糊器的高级
功能，以更好地控制模糊的输出。比如，为了解决上述的文件标题
问题，你可以保护一定的字节范围，以保证文档被适当的输入例程
检测。与此相似，你可以防止某些字符被改动，并且不让其他某些
字符插入输入数据，以通过代码中的健全性检查。默认比例0.4%也
是可配置的，让你可对想要引入文件的损坏和改动进行各种试验。
我已通过这些功能以及从缺陷数据库和网上收集到的各种文档，用
成千上万修改过的文件测试Gmumeric。Zzuf简洁与强大的美丽结合，
让我得以用极少的样本生成那成千上万个文件。为了把这一测试自
动化，我用一个shell脚本来调用模糊及输入输出命令，同时对退出
码及错误消息进行基本的监视，以发现缺陷。对激发Gmumeric格式
过滤器，特别是MicrosoftExcel（.xls）插件中的类型众多的缺陷，
这种被证明是行之有效的测试方法。
我发现和报告的第一批模糊缺陷中，有些是发生在Excel导人器开始
阶段基本表和行代码中的崩溃。用zuif的默认设置，我找到了好几个
种。这种技术的一个好处在于它不费很多测试的努力就能有很快的
收益。当你把这些普遍问题解决后，你的软件就开始具有一定的可
靠性，可以防止更多的普遍性错误，使在现有的设置下引发缺陷更
加困难。以这样美丽的方式，zuif通过从提供合理的默认值过渡到更
复杂的方法及功能，以此快速地递进。测试人员运行这些模糊器时
能像办公软件的用户一样，先很快掌握基本命令，再转向更高级的
技术，以进一步提高生产效率。当你的模糊测试不再发现缺陷时，
那正是你应开始采用你的模糊器的更高级功能之时，让你的测试重
新变得有效。
当许多普遍性缺陷被纠正后，我通过减少模糊比在更局部的功能中
发现缺陷。这种变化使发现更特殊的缺陷变得很容易。这些缺陷包
括那些在次要电子表格元素如图表错误条和特定的绘制类型中的。
1873
---
## Page 1875
这些缺陷的发现很令人振奋，因为它表明你的代码正变得更稳定，
允许各种输入在输入器和输出器中走得更远。通过监视模糊测试的
结果，你可以得到关于你所测试代码的稳定性和模糊测试有效性的
反馈。这些反馈有助于指导进一步的测试努力，并提醒你看到那些
已失效的技术。在分析测试日志时，我注意到zzuif用以设置和恢复位
的默认xor模糊不再像原先那样有效。为找到剩下的缺陷，我加了
zzuf对特殊设置和恢复方法的支持，结果得以发现了几个在xor测试
中未出现的几个缺陷。
虽然我找到了各种电子表格格式中的缺陷，但我的测试对Excel格式
最有效。这是由于Excel的复杂性和二进制结构。相反，OfficeOpen
XML（.xlsx）和OpenDocument Spreadsheet（.ods）等更现代的文件格
式用ZIP压缩把基于XML的文件存档。这些容器格式使测试更困难
些，需要在有效地测试它们前执行额外的步骤。例如，为避开压缩
问题，你要用解压缩工具或解压缩代码在运行模糊器前把存档的文
件解压缩。你也需要更注意保护组成标记的字符以及避免对XML无
效的字符。当你开始发现类似这样的特殊情况时，或许就该把你的
测试精力从常规模糊转向对针对这些更复杂的格式及功能的自定义
模糊了。
自定义模糊
一旦你的常规模糊测试的作用开始减弱，你该开始写自定义的模糊
器并更深入地检查格式和功能了。自定义模糊让你可以突破常规模
糊的局限，把有关应用和文件格式的特殊知识结合到测试程序中。
但是，在你写自己的模糊器前，你应该找一下是否已经有别的模糊
器能达到同样的目的，至少是那种可以作为你的基础的模糊器。比
如，以Mozilla著称的JesseRuderman写过的一个JavaScript模糊器
(jsfunfuzz）就发现了Firefox和Opera中的一些安全漏洞。[2]
受isfumfuzz成功的鼓舞，我写了我自己的自定义模糊器，来测试
Gmumeric的公式和函数分析器，确保它能处理尽可能多的有效及无
效的组合。从一列内置函数名（例如sum和pi）和操作符（例如
+和-）开始，我写了一个程序，用随机化的数值和函数参数生成数
千个以Tab分隔的单元。这一模糊器发现了数十个缺陷一一从崩溃、
挂起到内存泄漏，其中许多可浓缩成精炼并很美观的测试用例。这
种模糊的很大优点是，可以通过对输出的简单规则和限制，生成范
围很广的人工不可能产生的输入。
1874
---
## Page 1876
利用这一模糊器，我发现了自己最为得意的缺陷之一：由仅仅三个
字符=引起的一个崩溃。由于漏了某些错误检测，这一貌似无害的
表达式足以崩溃Gmumeric的强大和复杂的分析器。发现这一缺陷有
些出乎预料，因为插入那对花括号的函数是为生成随机字符串而非
数学符号而设计的。可见，结合简单的规则及元素，你可以创造一
个模糊器，用来产生复杂得很美的输出，以出人意料的方式发现缺
陷。
这种自定义测试的另一优点是，有些缺陷在无意中就能被发现。例
如，由于粘贴的高使用率，可以保险地假定随机的文字会在某个时
候不经意地插入某个单元或公式。同样，在使用电子表格时，新手
与高手都将按各自的需要使用编辑方式。
新手在学用恰当的语法时可能会用错函数或传人无效的参数。我在
易被打错字或忘记填入函数参数值的用户碰到：
=countblank({1)
=ddb(,2^50,)
=r.phyper(1.0e+65,)
我应该指出，我在把这些测试用例送到缺陷跟踪系统前对它们作了
整理，但它们原先都是被自定义模糊器发现的。
与无经验的用户相比，熟练的用户更可能试着把各种函数混合起来
创造出功能很强的函数组合。以下测试用例是用不同组件创造复杂
函数调用而导致失败的儿个代表性例子：
=areas(sumx2py20)
·=harmean(transpose(D144:E222)[差闭括号]
=opt_rgw(0,35/45,-1,2/5/2008,F182,2/5/2008,K36)
1875
---