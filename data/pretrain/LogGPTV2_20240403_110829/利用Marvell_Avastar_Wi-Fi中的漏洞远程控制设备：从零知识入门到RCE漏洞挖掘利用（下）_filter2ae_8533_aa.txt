# 利用Marvell Avastar Wi-Fi中的漏洞远程控制设备：从零知识入门到RCE漏洞挖掘利用（下）
|
##### 译文声明
本文是翻译文章，文章原作者 embedi，文章来源：embedi.org
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 前文回顾
在上一篇的文章中介绍了关于无线设备如何工作和启动，Wi-Fi SoC与驱动程序之间的交互以及Marvell Avastar Wi-Fi固件文件的静态动态分析的内容，本文将介绍漏洞的挖掘和利用方法
## 寻找漏洞
尽管我们在固件内存转储和Wi-Fi
SoC上使用了各种类型的二进制分析方法对其进行了剖析（静态和动态），但是我们依然难以直接通过上面的分析来找到漏洞，我们还需要进行一些测试来发现漏洞
###  模糊测试
fuzz是我们常用的一种漏洞挖掘手法，在这里也不例外。  
我们进行两方面的fuzz尝试
  1. 无线环境下的随机fuzz
  2. 对仿真环境中的固件进行fuzz
第一种类型的模糊测试可以直接对Wi-Fi
SoC进行fuzz。这种类型的测试的缺点在于：由于边缘覆盖不足使得输入帧变异算法无法达到极致。[注:边缘覆盖不足指测试过程中对于控制流图中的每条边的测试不足，没有全覆盖到]通常，我们可以通过使用JTAG(Joint
Test Action Group)，ARM ETM(Embedded Trace Macrocell)或Intel Process
Tracing技术等CPU的功能来实现收集边缘覆盖的目标。但是，这需要芯片本身的硬件和对于硬件的黑客技能来支持我们在工业级设备中使用硬件调试功能。这是一项非常重要的工程任务。
第二种类型的模糊测试依赖于固件仿真，因此在一些反馈驱动算法的帮助下收集突变输入的边缘覆盖较为容易。这对于无线设备来说是一种较为智能的fuzz方法。但是会让你感到惊讶的事实是，应用这种方法的fuzz工具已经被实现了。请看这里：afl-unicorn() ,这是原始的AFL
fuzzer和Unicorn(独角兽公司)的CPU仿真器集成的，最初由Nathan
Voss所创建的。你应该看一下它的源代码来理解它如何进行fuzz。要使用afl-unicorn工具来fuzz Wi-Fi固件，你需要识别解析例程（例如，使用我们的Wi -Fi SoC DBI工具）并编写一个将突变输入（Wi-Fi帧）输入到这些例程中的fuzzer（fuzz器）。基本上，你的fuzzer应该可以做到：
  1. 使用Unicorn的修改版本映射必要的内存区域。
  2. 设置寄存器上下文。
  3. 读取突变的输入文件并将其映射到仿真器的内存​​中。
  4. 开始执行代码。
  5. 通过发送适当的信号正确模拟固件的崩溃。
这是一种简单有效的技术，但仍存在一些缺点。最应该引起注意的是，该技术效果的好坏依赖于在创建Wi-Fi
SoC内存转储时捕获的全局状态。该状态可以包含一些已保存的全局变量，这些变量可能会阻止fuzzer访问某些执行路径。除此之外，该技术没有动态内存访问清理，很难找到和删除校验和验证代码，无法实现RTOS任务之间的通信。因此这也会导致无法访问某些执行路径。但是使用这种fuzz技术可以获得一些结果：
通过这种技术，我在固件的某些部分分析出大约4个总内存损坏问题。尽管如此，因为AFL的输入可能会因为某种方式被改变而无法传递给fuzzed
function模糊函数（比如，在调用模糊函数之前进行了对输入的过滤整形等），因此很难研究可能由此引起的潜在影响。这些问题。我还尝试在不同版本的固件和不同版本的无线SoC上复现这些错误，这里面看起来有很多漏洞
## 最有意思的漏洞
其中一个漏洞是ThreadX块池溢出的特例。在扫描可用网络期间，无需用户交互即可触发此漏洞。无论设备是否连接到某个Wi-Fi网络，此过程每5分钟启动一次。这就是为什么我认为这个漏洞最有意思，并且该漏洞可在任何无线连接状态下（即无论是否连上wifi或没有）都可以不需要任何交互来控制设备（也就是说你只要点一下启动设备按钮就好了）。例如，只需启动三星Chromebook即可完成RCE。总结一下这个漏洞：
  1. 它不需要任何用户交互。
  2. 在GNU/Linux操作系统下，它可以每5分钟触发一次。
  3. 它不需要知道Wi-Fi网络名称或密码/密钥。
  4. 即使设备未连接到任何Wi-Fi网络，只需打开电源即可触发。  
在这里，我将描述如何在Wi-Fi SoC上实现这个RCE攻击。
###  基本ThreadX块池溢出利用
ThreadX块池只是一个连续的内存区域，分成较小的块。每个块池都由运行时结构表示，可以在上面描述的IDA脚本的帮助下在内存转储中找到它。在每个块的开头，有一个指向下一个空闲块的指针。在最后一个空闲块之前，NULL指针驻留。第一个空闲指针存储在ThreadX块池管理结构中。指向此结构的指针用于块池分配和销毁功能。
TX-BP
很容易注意到，攻击者可以覆盖指向下一个空闲块和控制位置的指针，下一个块将被分配。通过控制下一个块分配的位置，攻击者可以将此块放置到某些关键运行时结构或指针所在的位置，从而实现攻击者的代码执行。
###  Marvell Avastar ThreadX块池溢出利用
Marvell
Avastar固件中的大多数内存管理例程都依赖于特殊的包装函数。此函数在每个ThreadX块的开头使用特殊元数据头。通过对此函数进行逆向工程，可以发现这些头可以包含特殊指针，这些指针在释放块之前被调用。因此，对于Marvell
Avastar的固件，攻击者可以轻松地在无线SoC上执行任意代码。下图是允许执行任意指针的块解除分配器的伪代码：
为了执行代码，攻击者只需要覆盖下一个块的更多额外空间
###  综合两种利用方法