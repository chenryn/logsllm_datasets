http://mdsec.net/updates/57/
http://mdsec.net/updates/59/
http://mdsec.net/updates/66/
http://mdsec.net/updates/69/
Addition of an Absolute Prefix
The application may form the target of the redirect by appending the user-
controllable string to an absolute URL prefi x:
GET /updates/72/?redir=/updates/update29.html HTTP/1.1
Host: mdsec.net
HTTP/1.1 302 Object moved
Location: http://mdsec.net/updates/update29.html
In this situation, the application may or may not be vulnerable. If the prefi x
used consists of http:// and the application’s domain name but does not include
a slash character after the domain name, it is vulnerable. For example, the URL:
http://mdsec.net/updates/72/?redir=.mdattacker.net
causes a redirect to:
http://mdsec.net.mdattacker.net
This URL is under the attacker’s control, assuming that he controls the DNS
records for the domain mdattacker.net.
However, if the absolute URL prefi x includes a trailing slash, or a subdirectory
on the server, the application probably is not vulnerable to a redirection attack
cc1133..iinndddd 554455 88//1199//22001111 1122::1144::0022 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 546
546 Chapter 13 n Attacking Users: Other Techniques
aimed at an external domain. The best an attacker can probably achieve is to
frame a URL that redirects a user to a different URL within the same applica-
tion. This attack normally does not accomplish anything, because if the attacker
can induce a user to visit one URL within the application, he can presumably
just as easily feed the second URL to the user directly.
TRY IT!
http://mdsec.net/updates/72/
In cases where the redirect is initiated using client-side JavaScript that queries
data from the DOM, all the code responsible for performing the redirect and any
associated validation typically are visible on the client. You should review this
closely to determine how user-controllable data is being incorporated into the
URL, whether any validation is being performed, and, if so, whether any bypasses
to the validation exist. Bear in mind that, as with DOM-based XSS, some addi-
tional validation may be performed on the server before the script is returned
to the browser. The following JavaScript APIs may be used to perform redirects:
n document.location
n document.URL
n document.open()
n window.location.href
n window.navigate()
n window.open()
TRY IT!
http://mdsec.net/updates/76/
http://mdsec.net/updates/79/
http://mdsec.net/updates/82/
http://mdsec.net/updates/91/
http://mdsec.net/updates/92/
http://mdsec.net/updates/95/
Preventing Open Redirection Vulnerabilities
The most effective way to avoid open redirection vulnerabilities is to not incor-
porate user-supplied data into the target of a redirect. Developers are inclined
to use this technique for various reasons, but alternatives usually are available.
For example, it is common to see a user interface that contains a list of links,
cc1133..iinndddd 554466 88//1199//22001111 1122::1144::0022 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 547
Chapter 13 n Attacking Users: Other Techniques 547
each pointing to a redirection page and passing a target URL as a parameter.
Here, possible alternative approaches include the following:
n Remove the redirection page from the application, and replace links to it
with direct links to the relevant target URLs.
n Maintain a list of all valid URLs for redirection. Instead of passing the
target URL as a parameter to the redirect page, pass an index into this
list. The redirect page should look up the index in its list and return a
redirect to the relevant URL.
If it is considered unavoidable for the redirection page to receive user-con-
trollable input and incorporate this into the redirect target, one of the following
measures should be used to minimize the risk of redirection attacks:
n The application should use relative URLs in all its redirects, and the redi-
rect page should strictly validate that the URL received is a relative URL.
It should verify that the user-supplied URL either begins with a single
slash followed by a letter or begins with a letter and does not contain a
colon character before the fi rst slash. Any other input should be rejected,
not sanitized.
n The application should use URLs relative to the web root for all its redi-
rects, and the redirect page should prepend http://yourdomainname.com
to all user-supplied URLs before issuing the redirect. If the user-supplied
URL does not begin with a slash character, it should instead be prepended
withhttp://yourdomainname.com/.
n The application should use absolute URLs for all redirects, and the redi-
rect page should verify that the user-supplied URL begins with http://
yourdomainname.com/ before issuing the redirect. Any other input should
be rejected.
As with DOM-based XSS vulnerabilities, it is recommended that applications
not perform redirects via client-side scripts on the basis of DOM data, because
this data is outside of the server’s direct control.
Client-Side SQL Injection
HTML5 supports client-side SQL databases, which applications can use to store
data on the client. These are accessed using JavaScript, as in the following example:
var db = openDatabase(‘contactsdb’, ‘1.0’, ‘WahhMail contacts’, 1000000);
db.transaction(function (tx) {
tx.executeSql(‘CREATE TABLE IF NOT EXISTS contacts (id unique, name,
email)’);
tx.executeSql(‘INSERT INTO contacts (id, name, email) VALUES (1, “Matthew
Adamson”, “PI:EMAIL”)’);
});
cc1133..iinndddd 554477 88//1199//22001111 1122::1144::0022 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 548
548 Chapter 13 n Attacking Users: Other Techniques
This functionality allows applications to store commonly used data on the
client side and retrieve this quickly into the user interface when required. It also
allows applications to work in “offl ine mode,” in which all data processed by
the application resides on the client, and user actions are stored on the client for
later synchronization with the server, when a network connection is available.
Chapter 9 described how SQL injection attacks into server-side SQL databases
can arise, where attacker-controlled data is inserted into a SQL query in an
unsafe way. Exactly the same attack can arise on the client side. Here are some
scenarios in which this may be possible:
n Social networking applications that store details of the user’s contacts in
the local database, including contact names and status updates
n News applications that store articles and user comments in the local
database for offl ine viewing
n Web mail applications that store e-mail messages in the local database
and, when running in offl ine mode, store outgoing messages for later
sending
In these situations, an attacker may be able to perform client-side SQL injec-
tion attacks by including crafted input in a piece of data he controls, which the
application stores locally. For example, sending an e-mail containing a SQL
injection attack in the subject line might compromise the local database of the
recipient user, if this data is embedded within a client-side SQL query. Depending
on exactly how the application uses the local database, serious attacks may be
possible. Using only SQL injection, an attacker may be able to retrieve from the
database the contents of other messages the user has received, copy this data
into a new outgoing e-mail to the attacker, and add this e-mail to the table of
queued outgoing messages.
The types of data that are often stored in client-side databases are likely to
include SQL metacharacters such as the single quotation mark. Therefore, many
SQL injection vulnerabilities are likely to be identifi ed during normal usabil-
ity testing, so defenses against SQL injection attacks may be in place. As with
server-side injection, these defenses may contain various bypasses that can be
used to still deliver a successful attack.
Client-Side HTTP Parameter Pollution
Chapter 9 described how HTTP parameter pollution attacks can be used in some
situations to interfere with server-side application logic. In some situations, these
attacks may also be possible on the client side.
Suppose that a web mail application loads the inbox using the following URL:
https://wahh-mail.com/show?folder=inbox&order=down&size=20&start=1
cc1133..iinndddd 554488 88//1199//22001111 1122::1144::0022 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 549
Chapter 13 n Attacking Users: Other Techniques 549
Within the inbox, several links are displayed next to each message to perform
actions such as delete, forward, and reply. For example, the link to reply to mes-
sage number 12 is as follows:
reply
Several parameters within these links are being copied from parameters in
the inbox URL. Even if the application defends robustly against XSS attacks, it
may still be possible for an attacker to construct a URL that displays the inbox
with different values echoed within these links. For example, the attacker can
supply a parameter like this:
start=1%26action=delete
This contains a URL-encoded & character that the application server will
automatically decode. The value of the start parameter that is passed to the
application is as follows:
1&action=delete
If the application accepts this invalid value and still displays the inbox, and
if it echoes the value without modifi cation, the link to reply to message number
12 becomes this:
reply
This link now contains two action parameters—one specifying delete, and
one specifying reply. As with standard HTTP parameter pollution, the applica-
tion’s behavior when the user clicks the “reply” link depends on how it handles
the duplicated parameter. In many cases, the fi rst value is used, so the user is
unwittingly induced to delete any messages he tries to reply to.
In this example, note that the links to perform actions contain an rnd param-
eter, which is in fact an anti-CSRF token, preventing an attacker from easily
inducing these actions via a standard CSRF attack. Since the client-side HPP
attack injects into existing links constructed by the application, the anti-CSRF
tokens are handled in the normal way and do not prevent the attack.
In most real-world web mail applications, it is likely that many more actions
exist that can be exploited, including deleting all messages, forwarding indi-
vidual messages, and creating general mail forwarding rules. Depending on
how these actions are implemented, it may be possible to inject several required
parameters into links, and even exploit on-site redirection functions, to induce
the user to perform complex actions that normally are protected by anti-CSRF
defenses. Furthermore, it may be possible to use multiple levels of URL encod-
ing to inject several attacks into a single URL. That way, for example, one action
cc1133..iinndddd 554499 88//1199//22001111 1122::1144::0033 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 550
550 Chapter 13 n Attacking Users: Other Techniques
is performed when the user attempts to read a message, and a further action is
performed when the user attempts to return to the inbox.
Local Privacy Attacks
Many users access web applications from a shared environment in which an
attacker may have direct access to the same computer as the user. This gives
rise to a range of attacks to which insecure applications may leave their users
vulnerable. This kind of attack may arise in several areas.
NOTE Numerous mechanisms exist by which applications may store
potentially sensitive data on users’ computers. In many cases, to test
whether this is being done, it is preferable to start with a completely clean
browser so that data stored by the application being tested is not lost in
the noise of existing stored data. An ideal way to do this is using a virtual
machine with a clean installation of both the operating system and any
browsers.
Furthermore, on some operating systems, the folders and fi les containing
locally stored data may be hidden by default when using the built-in fi le sys-
tem explorer. To ensure that all relevant data is identifi ed, you should confi g-
ure your computer to show all hidden and operating system fi les.
Persistent Cookies
Some applications store sensitive data in a persistent cookie, which most brows-
ers save on the local fi le system.
HACK STEPS
1. Review all the cookies identified during your application mapping exer-
cises (see Chapter 4). If any Set-cookie instruction contains an expires
attribute with a date that is in the future, this will cause the browser to
persist that cookie until that date. For example:
UID=d475dfc6eccca72d0e expires=Fri, 10-Aug-18 16:08:29 GMT;
2. If a persistent cookie is set that contains any sensitive data, a local
attacker may be able to capture this data. Even if a persistent cookie con-
tains an encrypted value, if this plays a critical role such as reauthenticat-
ing the user without entering credentials, an attacker who captures it can
resubmit it to the application without actually deciphering its contents
(see Chapter 6).
cc1133..iinndddd 555500 88//1199//22001111 1122::1144::0033 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 551
Chapter 13 n Attacking Users: Other Techniques 551
TRY IT!
http://mdsec.net/auth/227/
Cached Web Content
Most browsers cache non-SSL web content unless a website specifi cally instructs
them not to. The cached data normally is stored on the local fi le system.
HACK STEPS
1. For any application pages that are accessed over HTTP and that contain
sensitive data, review the details of the server’s response to identify any
cache directives.
2. The following directives prevent browsers from caching a page. Note that
these may be specified within the HTTP response headers or within HTML
metatags:
Expires: 0
Cache-control: no-cache
Pragma: no-cache
3. If these directives are not found, the page concerned may be vulnerable to
caching by one or more browsers. Note that cache directives are processed on
a per-page basis, so every sensitive HTTP-based page needs to be checked.
4. To verify that sensitive information is being cached, use a default instal-
lation of a standard browser, such as Internet Explorer or Firefox. In the
browser’s configuration, completely clean its cache and all cookies, and
then access the application pages that contain sensitive data. Review the
files that appear in the cache to see if any contain sensitive data. If a large
number of files are being generated, you can take a specific string from a
page’s source and search the cache for that string.
Here are the default cache locations for common browsers:
n Internet Explorer—Subdirectories of C:\Documents and Settings\
username\Local Settings\Temporary Internet Files\
Content.IE5
Note that in Windows Explorer, to view this folder you need to enter this
exact path and have hidden folders showing, or browse to the folder just
listed from the command line.
n Firefox (on Windows)—C:\Documents and Settings\username\
Local Settings\Application Data\Mozilla\Firefox\
Profiles\profile name\Cache
n Firefox (on Linux)—~/.mozilla/firefox/profile name/Cache
cc1133..iinndddd 555511 88//1199//22001111 1122::1144::0033 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 552
552 Chapter 13 n Attacking Users: Other Techniques
TRY IT!
http://mdsec.net/auth/249/
Browsing History
Most browsers save a browsing history, which may include any sensitive data
transmitted in URL parameters.
HACK STEPS
1. Identify any instances within the application in which sensitive data is
being transmitted via a URL parameter.
2. If any cases exist, examine the browser history to verify that this data has
been stored there.
TRY IT!
http://mdsec.net/auth/90/
Autocomplete
Many browsers implement a user-confi gurable autocomplete function for text-
based input fi elds, which may store sensitive data such as credit card numbers,
usernames, and passwords. Internet Explorer stores autocomplete data in the
registry, and Firefox stores it on the fi le system.
As already described, in addition to being accessible by local attackers, data in
the autocomplete cache can be retrieved via an XSS attack in certain circumstances.
HACK STEPS
1. Review the HTML source code for any forms that contain text fields in
which sensitive data is captured.
2. If the attribute autocomplete=off is not set, within either the form
tag or the tag for the individual input field, data entered is stored within
browsers where autocomplete is enabled.
TRY IT!
http://mdsec.net/auth/260/
cc1133..iinndddd 555522 88//1199//22001111 1122::1144::0033 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 553
Chapter 13 n Attacking Users: Other Techniques 553
Flash Local Shared Objects
The Flash browser extension implements its own local storage mechanism called
Local Shared Objects (LSOs), also called Flash cookies. In contrast to most other
mechanisms, data persisted in LSOs is shared between different browser types,
provided that they have the Flash extension installed.
HACK STEPS
1. Several plug-ins are available for Firefox, such as BetterPrivacy, which can
be used to browse the LSO data created by individual applications.