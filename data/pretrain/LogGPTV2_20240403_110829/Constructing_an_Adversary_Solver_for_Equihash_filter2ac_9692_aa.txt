title:Constructing an Adversary Solver for Equihash
author:Xiaofei Bai and
Jian Gao and
Chenglong Hu and
Liang Zhang
Constructing an Adversary Solver for Equihash
Xiaofei Bai, Jian Gao, Chenglong Hu and Liang Zhang
School of Computer Science, Fudan University
Shanghai Key Laboratory of Data Science, Fudan University
Shanghai Institute of Intelligent Electronics & Systems
{16210240001, 16210240009, 17210240104, lzhang}@fudan.edu.cn
Abstract—Blockchain networks, especially cryptocurrencies,
rely heavily on proof-of-work (PoW) systems, often as a basis
to distribute rewards. These systems require solving speciﬁc
puzzles, where Application Speciﬁc Integrated Circuits (ASICs)
can be designed for performance or efﬁciency. Either way, ASICs
surpass CPUs and GPUs by orders of magnitude, and may harm
blockchain networks. Recently, Equihash is developed to resist
ASIC solving with heavy memory usage. Although commercial
ASIC solvers exist for its most popular parameter set, such
solvers do not work under better ones, and are considered
impossible under optimal parameters. In this paper, we inspect
the ASIC resistance of Equihash by constructing a parameter-
independent adversary solver design. We evaluate the product,
and project at least 10x efﬁciency advantage for resourceful
adversaries. We contribute to the security community in two
ways: (1) by revealing the limitation of Equihash and raising
awareness about its algorithmic factors, and (2) by demonstrating
that security inspection is practical and useful on PoW systems,
serving as a start point for future research and development.
I. INTRODUCTION
Proof-of-work (PoW) systems were initially designed to
combat spam and some denial of service (DoS) attacks. The
basic idea, where anyone requesting service has to solve a
computationally-hard puzzle before being veriﬁed and served,
was proposed as early as 1992 [8], and was later formalized
and named in 1999 by Jakobsson [14]. These systems pro-
viding quantized fairness are easy to depend on, and quickly
gained popularity since the adoption in Bitcoin [18].
Public blockchain applications typically utilize PoW sys-
tems in their consensus protocols, where users compete solving
PoW puzzles to create blocks (and get corresponding rewards).
For an honest user, more computing power (often referred to as
hash power by cryptocurrency miners) will bring more chance
to create blocks, therefore more rewards. In the same way,
adversaries can accumulate hash power to gain control on the
consensus, eventually launching attacks or even taking over
the system [18].
By design, massive hash power should come with signiﬁcant
cost, dominated by the power consumption of solvers (often
called mining rigs). With commodity hardware like CPUs
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23337
www.ndss-symposium.org
and GPUs, the unit price of hash power stays roughly the
same, and the system is fair to everyone. However, dedicated
ASIC solvers are more energy-efﬁcient, yielding much higher
proﬁtability for their owners. Products like [23] work faster by
orders of magnitude but draw very little power. When these
products are available to some users but not to others, the
system is no longer fair, and is exposed to various risks.
Existing studies [1], [5], [19], [20] have issued the problem
and provided decent solutions [10] for cryptographic hashing,
but additional factors divert PoW systems from the track,
namely (1) PoW systems require stronger ASIC-resistance
than message hashing: a 2-3 times efﬁciency advantage can
considerably centralize and weaken blockchain systems, but
is too small to cause any problem elsewhere; and (2) PoW
systems can utilize additional puzzles that do not have hash-
like semantics.
Once open to the public, PoW schemas in blockchain
networks are hard to modify, and applying ﬁxes becomes
especially difﬁcult. Almost any change to the system would
require a successful hard fork, demanding support from most
its users and/or miners. Therefore any vulnerability within a
PoW schema has to be disclosed to the public before being
patched, which is the opposite to common security practices.
To this end, PoW schemas must be carefully inspected and
hardened beforehand.
Equihash [4] is one of the state-of-the-art PoW schemas
achieving considerable ASIC-resistance. It uses the memory-
hard approach [7], and when parameters are properly set, is
sufﬁcient to eliminate single-chip ASIC solvers. However, we
have found a set of weaknesses, allowing efﬁcient multi-chip
solvers to be built under all parameters. In this paper, we
analyze its software solving algorithm from an adversary’s
viewpoint, and construct a solver design to exploit the weak-
nesses. We also work around limitations to make the design
as practical as possible, but skipping ﬁne-grained engineering
decisions not relevant to the subject.
In general, Equihash provides reasonable memory require-
ments on both capacity and bandwidth, but its memory usage
can be dissected into subroutines with different characteristics
and handled accordingly. These subroutines can be separately
optimized and then implemented onto a small chip, making
full use of its connected memory but consuming very little
power. Simulation results with a 28nm library show up to
90% reduction in computation power compared to latest GPUs
(under 12nm process), making it safe to project at least 10x
efﬁciency advantage for resourceful adversaries.
As Equihash is already deployed in practical applications 1
2, we decide to present and evaluate our solver design without
actually building any miner. Going through the production
cycle might allow commercial products to harm the systems
before maintainers have time to understand the risks. These
applications are more or less moving (or have already moved)
to larger parameter sets, where existing ASIC solvers fail [15]
but our construction remains effective.
The direct goal of our study is to explore the interaction
between PoW schemas and efﬁcient ASIC solver designs,
so future systems can achieve better fairness and thus better
protection. We also intend to raise the awareness that efﬁcient
multi-chip ASIC solvers are possible for Equihash, and that
the assets protected by its deployments should be carefully
valued. However, this paper is not to criticize Equihash. In
fact, Equihash is one of the most ASIC-resistant PoW schemas
already put into production, and remains so even with our
projected ASIC efﬁciency advantage.
We list our methodology and contributions below:
• We propose a method to inspect PoW systems, by analyz-
ing the algorithm and constructing an adversary solver.
Introducing hardware design strategies to the process
reveals hidden factors.
• We apply the method on Equihash, especially targeting
parameter sets with large memory capacity requirements.
At the time of writing, there is no witness of similar
designs or implementations.
• We evaluate the produced solver design, estimating its
efﬁciency using simulation results of its core compo-
nents and power usage of commodity hardware. We
then compare it to the best results on CPUs and GPUs,
projecting a 10x ASIC advantage as a reference for
system deployments and further research.
• We list the factors encountered when constructing the
design and discuss their effect on ASIC-resistance.
We start this paper by brieﬁng existing studies including the
theories of PoW, ASIC solvers, ASIC-resistant approaches,
and Equihash itself. In section III we propose our strategy
as an adversary. We apply it
to Equihash in section IV
and construct a design, using multiple on-chip modules to
complete Equihash subroutines. In section V we evaluate
the performance and resource usage of our product, proving
its practicality and projecting an advantage of resourceful
adversaries. We conclude the paper with discussion on our
methodology and algorithmic factors affecting the design
construction.
II. BACKGROUND
In this section, we summarize the current status of PoW
systems, its major applications, some revelant facts and the
dynamics within. We hope to reach a sound basis, concluding
some research efforts and known facts, before proceeding with
our method and construction.
A. PoW systems and blockchains
The principle of PoW systems is that users requesting
something need to demonstrate some computational efforts
in a (sometimes implicitly) speciﬁed interval of time. The
results can be quickly veriﬁed by server-side programs to fairly
distribute resources, based on the computational cost guaran-
teed by the PoW schema. Through quantitative control of this
cost, service providers can have ﬁne-grained control over the
resource distribution, making PoW an effective approach to
preventing resource abuse.
Blockchain networks deploy PoW as a critical component,
but with some minor changes. In blockchain networks, results
are checked by all users instead of servers. We take Bitcoin
[18] as an example throughout this section, as it is currently
the most signiﬁcant PoW-protected system both in headcount
and in computing resources.
PoW activities within the Bitcoin network can be summa-
rized into the following sequence:
• Miners (a majority of users) try to ﬁnd a string nonce,
such that hash result Hash(block||nonce) is less than
a dynamic threshold, forming a PoW proof, where ||
represents string concatenation.
• A valid PoW proof allows a miner to generate a block,
contributing to Bitcoin’s functionality and earning a re-
ward (ie. newly generated Bitcoins).
• The network adjusts the threshold (referred to as difﬁ-
culty) to control global block generation rate, binding the
reward to the computing resources consumed in mining,
therefore backing Bitcoin’s value.
Naturally miners mine for proﬁt, and seek energy efﬁciency
rather than performance. If presented with a slow but efﬁcient
conﬁguration and a performant but less efﬁcient one, they
would prefer the former, and deploy more to compensate for
the performance loss. To this end, energy efﬁciency becomes
the dominant parameter for mining rigs, as it
is directly
connected to overall proﬁtability.
In the Bitcoin scenario, the PoW schema consists of massive
amounts of SHA256 calls. These simple and repetitive oper-
ations are not the intended workloads of CPUs, so dedicated
mining rigs soon take over with much higher efﬁciency. The
more specialized they are, the better they are at repeating the
hashing task, and the less energy they take to complete the
same PoW proof: GPUs overtake CPUs by reducing control
ﬂow; Field Programmable Gate Arrays (FPGAs) overpower
GPUs by improving parallelism; and the mining business is
eventually dominated by ASICs, driving all its competitors un-
proﬁtable. For example, decent software produces 24 Mhash/s
on CPUs using 100 Watts3, and around 150 Mhash/s on GPUs
at around 300 Watts4, while a typical ASIC mining rig can
perform 18 Thash/s but only drawing 1620 Watts [23].
With more users and powerful mining rigs, Bitcoin’s mining
difﬁculty eventually reached a point where it
is virtually
impossible for individual miners to create blocks alone. Miners
1Zcash, https://z.cash/
2Bitcoin Gold, https://bitcoingold.org/
3Pooler’s cpuminer on Intel Core i7-2600.
4Cgminer on Nvidia GTX580.
2
join mining pools to gather hash power and split the awards
according to their shares. Mining pools have two major forms:
(1) physical pools funded economically, and (2) online pools
that process PoW puzzles into easier ones, to be solved by
individual miners. In either form, the pool is presented to the
network as a single user, and controls all the blocks it creates.
Here, a vulnerability arise within the network’s economy.
Users tend to switch to more proﬁtable mining pools, which
can gradually accumulate hash power to launch attacks. These
attacks have already been stated in the original Bitcoin paper
[18], but their practicality has greatly increased due to the
massive efﬁciency advantage of ASIC solvers. In fact, a
Bitcoin mining pool literally reached 51% hash power of the
whole network [3], enough to alter the blockchain to its own
interest. Bitcoin eventually mitigated the risk by holding a
conference and having the top mining pools discuss a plan,
distributing hash power. Most other blockchain systems are
still vulnerable, but are not mature enough to have this option.
B. ASIC solvers and ASIC resistance
The blockchain communities have been debating about the
effects of efﬁcient ASIC solvers and whether or not to resist
them. In this section we list major claims from both sides,
to show that ASIC resistance is a reasonable concern for
blockchain systems. Note that the list may not be complete
and some claims may be biased.
In all, ASIC solvers give users more hash power and
proﬁtability at higher difﬁculties, eventually raising network
difﬁculties. Miners with commodity hardware (CPUs and
GPUs) tend to quit, and manufacturers optimize their products
for better efﬁciency.
ASIC mining rigs are highly proﬁtable but costly to design
and produce, so they sell at incredibly high prices, and are
beyond the reach of most
individual users from the very
beginning. To make matters worse, manufacturers often limit
their production and sales to maintain mining proﬁtability.
Some models are even deployed directly and never sold at
all.
Those supporting ASIC solvers think high difﬁculties lead
to high attack costs, and can prevent botnets from impacting
blockchain applications. Those against ASIC solvers state
that these products are beyond the reach of many, making
blockchains more or less controlled by ASIC miners and solver
designers.
In this paper, we do not directly support either of the two
sides. For now, ASIC resistance is a reasonable security factor,
but its importance is yet to be studied. However, it is safe for
us to base our impact on the following facts:
• Efﬁcient ASIC solvers can be used to carry out attacks,
and it is believed that some products are involved in past
attacks [17].
• Claiming to resist ASIC solvers but failing to do so (in
this case Equihash under (144, 5) and larger parameter
sets) is a vulnerability on its own.
C. Memory hardness and Equihash
Later PoW systems use memory-bound functions [1], [5],
[19], [20] to achieve ASIC resistance, by requiring large mem-
ory capacity and intense memory access. Because fast, on-
chip memory has limited capacity; and large, off-chip memory
is relatively slow, memory restricts the mass parallelism of
ASICs and limits their advantage [19].
Equihash is one of the state-of-the-art approaches in this
category, guarding multiple cryptocurrency networks including
Bitcoin Gold and Zcash, with a billion-dollar market. At the
time of writing, it is one of the two ASIC-resistant PoW
schemes 5 that, under any parameter set practically deployed,
has the ability to eliminate efﬁcient single-chip ASIC solvers
[12].
There are ASIC solvers available, but they are all designed
for the popular (yet suboptimal) (n, k) = (200, 9) parameter
set. None of them claim or have been witnessed to work
on better parameters like (144, 5), and the most known one
has even been proved otherwise. Tromp physically inspected
the product [15], and did not ﬁnd enough memory to handle
(144, 5), either (1) on a large enough solver core chip, or (2)
off-chip memory components.
Equihash uses a modiﬁed version of Wagner’s Generalized
Birthday Problem (GBP) [21] as its puzzle, and then binds
solvers to Wagner’s algorithm by asking for intermediate
results [4]. Alcock [2] detailed the difference between the
Equihash puzzle and Wagner’s GBP and analyzed its effect.
For convenience, we’ll refer to the Equihash puzzle as
Single List Generalized Birthday Problem (SLGBP) because
it has only one list as input.
Single List Generalized Birthday Problem: Alcock deﬁned
the single list generalized birthday problem as follows [2]:
Given a list L of (pseudo-)random n-bit strings {xi}, ﬁnd 2k
distinct indices i such that(cid:76)
i xi = 0, where(cid:76) is the XOR
operator.
Equihash’s algorithm: Equihash’s algorithm can be seen
as a single-list variation of Wagner’s algorithm, where k
rounds of join operations are performed, each taking the
k+1 bits
list and produces another, canceling out the next
in every element in every output element. The algorithm in
ﬁgure 1 shows the exact algorithm steps before applying any
optimizations. The join operation is the core subroutine of
Equihash. It is typically implemented by ﬁrst sorting the items
and then going through the result, generating further index sets
and calculating XOR values on the ﬂy 6.
the expectation of list size |L(i)| before the ﬁnal round.
Equihash sets the initial list size at N = 21+ n
k+1 , to maintain
n
In the original Equihash paper [4], the authors implemented
and tested (n, k) = (144, 5) as their proof of concept.
However, this parameter set is not widely used, due to the
longer time it
takes to solve a single puzzle. The most
popular Equihash adopter, Zcash, uses (200, 9) instead [13].
5The other one is EtHash.
6Some software solvers accomplish this step with hashing, but they are
somewhat equivalent to bucket sort.
3
join
join
: list L of N n-bit strings (N (cid:28) 2n)
Input
begin
Enumerate L(0) as {(xi,{i})|i = 1, 2, ..., N}
r ← 1