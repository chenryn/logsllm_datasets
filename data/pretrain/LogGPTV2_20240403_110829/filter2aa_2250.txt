代码审计
代码审计(一
一) 熊海
熊海cms V1.0
最近在学习代码审计，试着将这些东西记录下来，也是当做一种总结吧。今天我进行这款cms的代码审计叫熊海cms V1.0，它是一款小型的网站内容管
理系统，非常适合个人建站使用。因为年代久远了，所以这款cms漏洞还是比较多的，审计起来难度不难，非常适合我这种小菜鸡入门学习的。话不多
说，我们先来看看它的源代码目录分布吧。
admin//管理员后台
css//css样式
files//功能函数
images//图片文件
inc//配置信息
install//安装目录文件
seacmseditor//seacms编辑器
template//模板文件
upload//文件上传
index.php//网站入口
phpinfo.php//显示PHP的当前信息
使用说明.txt//使用说明
现在我们就大概清楚了它的目录信息，对它的目录结构有了大体掌握，现在我们就开始进行代码审计吧。这个cms靶场漏洞网上能找出一堆writeup，
所以我打算讲解一些不一样的东西。重分析，轻演示。这里我主要介绍代码审计思路，不会对每处漏洞都一一讲解，有兴趣的小伙伴就可以下载下来
细细审计。
代码审计常见方法
代码审计常见方法
1、通读全文代码
2、定向功能审计
3、敏感函数回溯
1、通读全文代码
、通读全文代码
首先我们打开熊海cms中的index.php文件:
在这里我们可以得知，它是先接收一个r参数然后用addslashes函数进行过滤，然后再跳转到r.php文件，变成files/$file.php。如果为空的话，则包含
files/index.php。这样的话，我们在这里就很清楚的知道，这里就是一个很经典的包含漏洞，r参数只是经过了addslashes函数进行过滤(几乎相当于没
过滤)后被incluede包含。同时因为在当前目录下有就存在phpinfo文件，我们可以直接在url输入?r=../phpinfo，可以发现程序产生了文件包含漏洞。
http://127.0.0.1:9999/?r=../phpinfo
然后我们根据它的正确思路，接着我们应该是跳转到file目录下的index.php文件。
    " />
    " />
    Oh,Perfect
    个人免费开源程序倡导者
    '' AND xs=1 ORDER BY id DESC  LIMIT 1";
    $resul = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    $toutiaoimg = mysql_fetch_array($resul);
    ?>
    " title="">
在这里我们可以看到它是夹带着inc/301.php、inc/conn.php、inc/time.class.php这三处文件，我看了一下没有什么敏感操作，忽略不看。其次我们发
现这前面一大段也是div标签也快速跳过，之后我们可以明显看见一个关键点
href="?r=content&cid=" ​
进行它进行了a标签的跳转，利用index.php的参数r=content，说明这里也是夹带着content.php文件，这时候我们再来跳转分析。
再这里我们可以看到,它get方式获取的cid参数使用了addslashes方法简单地过滤赋值给id变量，然后再代入sql语句操作。这就可以存在注入的可能性
了，因为你只是用addslashes简单过滤一下，会不会存在绕过的可能性呢。
$query = "SELECT * FROM content WHERE id='$id'";
$query = "UPDATE content SET hit = hit+1 WHERE id=$id";
这里我们可以找出两处$id代入sql语句中查询，很明显我们可以看到，下面没有将双引号包裹update语句可以更好地注入，不用考虑引号闭合的问题。
这里我们可以使用经典的updatexml报错语句进行测试。
http://www.xy.com:9999/?r=content&cid=1 and updatexml(1,concat(0x7e,(select @@version),0x7e),1)
这里只是简单测试，后面注入过程你们一一尝试。
之后我们继续往下审计，发现下面
→ 和谐网络，文明发言！发表评论：
">
"/>
昵称" />
邮箱"/>
网址"/>
验证码 
 记住我的个人信息
 回复后邮件通知我
在此处我们看见表单请求跳转提交到了submit.php当中,我们接着它进行分析。
查询用户头像数据
$query = "SELECT * FROM interaction WHERE( mail = '$mail')";
$result = mysql_query($query) or die('SQL语句有误：'.mysql_error());
$tx = mysql_fetch_array($result);
if (!mysql_num_rows($result)){  
$touxiang = mt_rand(1,100);
}else{
$touxiang = $tx['touxiang'];
}
这处我们依旧可以看到，这里的main参数也是没有进行过滤，直接代入到sql查询语句，存在注入点。这里就不演示重复了。
这里我们使用了通读全文代码的方法，从index.php作为入口，一步步代码审计追溯跳转，在其后的file目录下index.php->content.php->submit.php，
跟进它调用的函数和文件，一步步理清它的整体框架思路。下面我们来看看第二种代码审计的方法。
2、定向功能审计
、定向功能审计
这里我们就以admin管理员目录作为栗子。
首先我们先来到了login.php(登陆模块)，一般的话我们后台管理员登陆模块，常见注入都是sql注入、xss、越权访问等。我们就是针对这些功能模块，
定向地查找它功能常见可能出现的漏洞。
在admin目录index.php中，我们发现它包含着/inc/checklogin.php配置文件。
这是检测管理员登陆模块的inc配置，对cookie的user参数进行判断，若admin参数为空，则跳转到login.php页面。这样的话，我们就很好继续利用
了，我们随便在一个admin管理员权限的页面wzlist.php，burpsuite抓包在cookie中添加user参数即可，从而进行越权漏洞的访问。
之后我再真正返回login.php页面，看不看会不会也存在后台登陆常见出现的sql注入的漏洞呢。
""){
$query = "SELECT * FROM manage WHERE user='$user'";
$result = mysql_query($query) or die('SQL语句有误：'.mysql_error());
$users = mysql_fetch_array($result);
if (!mysql_num_rows($result)) {  
echo "";
exit;
}else{
$passwords=$users['password'];
if(md5($password)<>$passwords){
echo "";
exit;   
    }
//写入登录信息并记住30天
if ($checkbox==1){
setcookie('user',$user,time()+3600*24*30,'/');
}else{
setcookie('user',$user,0,'/');
}
echo "";
exit;
}
exit;
ob_end_flush();
}
?>
分析得知,此处是先用post方式提交接收我们传递的参数，提交的user参数没有进行任何过滤带入sql语句进行查询，同时用户名存在才继续对password
继续进行检测。这里我们很明显存在了post的sql注入，但我们常说的万能密码在这里却是无效的。
if(md5($password)<>$passwords)
原因就出现在这个语句当中,它先对我们的传递的password参数进行MD5散列值计算，然后将这串MD5散列值放入到后台数据库进行检验核对，所以我
们常用的万能密码是无效的。不过我们却可以通过报错注入来进行检测测试。
1' or updatexml(1,concat((select concat(0x7e,password,0x7e) from manage)),0) #
在这里，我们对admin登陆功能模块进行特定功能点尝试，后台登陆功能常常出现的sql注入和越权访问都一一检测成功。
3、敏感函数回溯
、敏感函数回溯
根据敏感函数来追踪函数使用传递的过程，逐一溯源进行分析。这也是很多人喜欢使用的一种方法，因为我们很多常规漏洞都是因为使用敏感函数不
当所造成的的。
因为在前面我们审计过程中，发现很多漏洞都是addslashes函数使用不当过滤不充分所造成的，这里我就直接使用全局搜索来查找addslashes函数出
现的位置，然后对其逐一分析。
 $page=addslashes($_GET['page']);
 if ($page<>""){
 if ($page<>1){
 $pages="第".$page."页 - ";
 }
 }
 ?>
这里我们找到了一处在路径\files\contact.php中，点击查看之后分析，这里的$page参数只是仅仅进行了特殊字符转义，然后直接代入以下的html代码
里。此处我们可以构造xss代码来进行反射型xss。
这篇文章主要是以熊海cms为例，使用三种常见代码审计方法，让大家了解代码审计的思路分析，选择适合自己的代码审计方法。第一次写这种文章，
写的不好请多多谅解~~~