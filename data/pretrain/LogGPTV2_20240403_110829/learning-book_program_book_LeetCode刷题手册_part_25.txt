true，否则输出false。
代码
---
## Page 187
package leetcode
var dir = [][]int{
[]int{-l, 0},
[]int{0, 1},
[]int{1, 0},
[]int{0, -1},
func exist(board [][]byte, word string) bool {
visited := make([][]bool, len(board))
for i := 0; i = 0 && x = 0 && y  finder {
startFinder = finder
if finder == 1en(nums)-1 {
break
finder++
if finder-startFinder >= 2 & nums[finder-1] == nums[last]&& nums [finder]
!= nums[last] {
---
## Page 190
nums[1ast+1]  = nums[finder-1]
nums[1ast+2] = nums[finder]
last += 2
}else{
nums[1ast+1]  = nums[finder]
1ast++
if finder == 1en(nums)-1 {
if nums[finder]  = nums[1ast-1]{
nums [1ast] = nums[finder]
return last + 1
return last + 1
81.SearchinRotatedSortedArrayll
题目
nof o umouxun jonid awos te paseo, sl Japuo Supuaose ul paquos feue ue asoddns
beforehand.
(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2] ).
You are given a target value to search. If found in the array return true, otherwise return
false.
Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
output: true
Example 2:
Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
Follow up:
●This is a follow up problem to Search in Rotated Sorted Array, where nums may contain
dluplicates.
● Would this affect the run-time complexity? How and why?
题目大意
---
## Page 191
假设按照升序排序的数组在预先未知的某个点上进行了旋转。（例如，数组[0,0,1,2,2,5,6]可能变为
[2,5,6,0,0,1,2] )。
编写一个函数来判断给定的目标值是否存在于数组中。若存在返回true，否则返回false。
进阶：
·这是搜索旋转排序数组的延伸题目，本题中的nums可能包含重复元素。
·这会影响到程序的时间复杂度吗？会有怎样的影响，为什么？
解题思路
·给出一个数组，数组中本来是从小到大排列的，并且数组中有重复数字。但是现在把后面随机一段
有序的放到数组前面，这样形成了前后两端有序的子序列。在这样的一个数组里面查找一个数，设
计一个O（logn)的算法。如果找到就输出true，如果没有找到，就输出false。
·这一题是第33题的加强版，实现代码完全一样，只不过输出变了。这一题输出true和false
了。具体思路见第33题。
代码
package leetcode
func search(nums []int, target int) bool {
if 1en(nums) == 0 {
return false
1ow, high := 0, 1en(nums)-1
for low >1
if nums[mid]== target {
return true
}elseifnums[mid]>nums[1ow]{//在数值大的一部分区间里
if nums[low]2=>3=>3=>4=>4=>5
Output: 1->2->5
Example 2:
Input: 1->1->1->2->3
Output: 2->3
题目大意
删除链表中重复的结点，只要是有重复过的结点，全部删除。
解题思路
按照题意做即可。
代码
package leetcode
☆
* Definition for singly-linked list.
type ListNode struct {
valint
Next *ListNode
---
## Page 193
*/
func deleteDuplicatesl(head *ListNode) *ListNode {
if head == nil {
return ni1
if head.Next == nil {
return head
newHead := &ListNode{Next: head, Va1: -999999}
Cur := newHead
last := newHead
front := head
for front.Next != nil {
if front.val == cur.val {
//fmt.Printf("相同节点front =%v丨cur=%v丨last=%v\n"，front.Val，
cur.val, last.va1)
front = front.Next
continue
}else{
if cur.Next != front {
//fmt.Printf（"删除重复节点front=%v|cur=%v|1ast=%v\n"，
front.val, cur.val, last.val)
last.Next = front
if front.Next 1= nil && front.Next.val != front.val{
last = front
cur = front
front = front.Next
}else{
//fmt.Printf（"常规循环前front=%v|cur=%v|1ast=%v\n"，
front.Val, cur.Val, last.Val)
1ast = cur
cur = cur.Next
front = front.Next
//fmt.Printf（"常规循环后front=%v|cur=%v|1ast=%v\n"，
front.Val, cur.Val, last.Val)
if front.val == cur.val {
//fmt.Printf("相同节点front=%v|cur =%v|last=%v\n"，front.val，
cur.val, last.val)
last.Next = ni1
}else{
if cur.Next != front {
1ast.Next = front
---
## Page 194
return newHead.Next
func deleteDuplicates2(head *ListNode) *ListNode {
if head == nil{
return ni1
if head.Next != nil && head.val == head.Next.Val {
for head.Next != nil && head.val == head.Next.val {
head = head.Next
return deleteDuplicates (head.Next)
head.Next = deleteDuplicates (head.Next)
return head
83.RemoveDuplicatesfromSortedList
题目
Given a sorted linked list, delete all duplicates such that each element appear only once.
Example 1:
Input: 1->1->2
output: 1->2
Example 2:
Input: 1->1->2->3->3
Output: 1->2->3
题目大意
删除链表中重复的结点，以保障每个结点只出现一次。
解题思路
按照题意做即可。
代码
---
## Page 195
package leetcode
☆
* Definition for singly-linked list.
type ListNode struct {
valint
Next *ListNode
func deleteDuplicates(head *ListNode) *ListNode {
cur := head
if head == nil {
return ni1
if head.Next == nil {
return head
for cur.Next != nil {
if cur.Next.Val == cur.val {
cur.Next = cur.Next.Next
}else{
cur = cur.Next
return head
84.LargestRectangleinHistogram
题目
Given n non-negative integers representing the histogram’s bar height where the width of each
bar is 1, find the area of largest rectangle in the histogram.
6
---
## Page 196
Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3]
6
The largest rectangle is shown in the shaded area, which has area = 10 unit.
Example:
Input: [2,1,5,6,2,3]
Output: 10
题目大意
给出每个直方图的高度，要求在这些直方图之中找到面积最大的矩形，输出矩形的面积。
解题思路
用单调栈依次保存直方图的高度下标，一旦出现高度比栈顶元素小的情况就取出栈顶元素，单独计算一
下这个栈顶元素的矩形的高度。然后停在这里（外层循环中的--，再++，就相当于停在这里了），继续取
出当前最大栈顶的前一个元素，即连续弹出2个最大的，以稍小的一个作为矩形的边，宽就是2计算面
积..如果停在这里的下标代表的高度一直比栈里面的元素小，就一直弹出，取出最后一个比当前下
标大的高度作为矩形的边。宽就是最后一个比当前下标大的高度和当前下标1的差值。计算出面积以后
不断的更新maxArea即可。
代码
package leetcode
import “fmt"
func largestRectangleArea(heights []int) int {
maxArea， stack, height := 0, []int{}，0
for i:= 0; i = heights[stack[len(stack)-1]] {
stack = append(stack,i)
}else{
tmp := stack[1en(stack)-1]
fmt.Printf("1. tmp = %v stack = %v\n", tmp, stack)
stack = stack[:len(stack)-1]
length := 0
if len(stack) == 0 {
length = i
}else {
length = i - 1 - stack[len(stack)-1]
fmt.Printf("2. 1ength = %v stack = %v i = %v\n", 1ength, stack,i)
maxArea = max(maxArea, heights [tmp]*1ength)
fmt.Printf("3. maxArea = %v heights[tmp]*length = %v\n", maxArea,
heights [tmp]1ength)
i --
3
return maxArea
86.Partition List
题目
Given a linked list and a value x, partition it such that all nodes less than x come before nodes
greater than or equal to x.
You should preserve the original relative ordler of the nodes in each of the two partitions.
Example:
Input: head = 1->4=>3->2->5->2, × = 3
0utput: 1->2->2->4->3->5
题目大意
给定一个数×，比×大或等于的数字都要排列在比×小的数字后面，并且相对位置不能发生变化。由于
相对位置不能发生变化，所以不能用类似冒泡排序的思想。
解题思路
---
## Page 198
这道题最简单的做法是构造双向链表，不过时间复杂度是O（n^2)。
（以下描述定义，大于等于×的都属于比×大）
更优的方法是新构造2个链表，一个链表专门存储比×小的结点，另一个专门存储比×大的结点。在原
链表头部开始扫描一边，依次把这两类点归类到2个新建链表中，有点入栈的意思。由于是从头开始扫
描的原链表，所以原链表中的原有顺序会依旧被保存下来。最后2个新链表里面会存储好各自的结果，
把这两个链表，比×小的链表拼接到比×大的链表的前面，就能得到最后的答案了。
代码
package leetcode
/★
* Definition for singly-linked list.
号
type ListNode struct {
valint
Next *ListNode
*}
*/