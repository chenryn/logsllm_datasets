### 9. 性能

表1总结了Montgomery点乘法算法在三种有限域GF(2^163)、GF(2^193)和GF(2^233)上的硬件和软件实现的性能数据。对于命名曲线，硬件性能数据是通过使用带有硬连线约简电路的乘法和平方操作获得的。对于通用曲线，我们在相同的曲线上测量了使用全约简（如图5所示）和部分约简（如图6所示）的性能。为了比较，我们还实现了并测试了C语言编写的通用曲线软件库。第一个实现使用全约简，并假设不可约多项式为三项式或五项式。它使用可变数量的字来表示不同的有限域度，并针对64位处理器进行了编译。第二个实现使用部分约简，并允许不可约多项式具有任意数量的项。它使用固定数量的八个32位字，并针对32位处理器进行了编译。执行时间是在一台900 MHz的Sun Fire 280R服务器上测量的。

| 硬件 | 软件 |
| --- | --- |
| 操作/秒 (ops/s) | 毫秒/操作 (ms/op) | 操作/秒 (ops/s) | 毫秒/操作 (ms/op) |
| 命名曲线 |  |  |  |
| GF(2^163) | 6987 | 0.14 | 322 | 3.11 |
| GF(2^193) | 5359 | 0.19 | 294 | 3.40 |
| GF(2^233) | 4438 | 0.23 | 223 | 4.48 |
| 通用曲线 (全约简) |  |  |  |
| GF(2^163) | 1075 | 0.93 | 50 | 20.11 |
| GF(2^193) | 911 | 1.10 | 42 | 23.83 |
| GF(2^233) | 757 | 1.32 | 35 | 28.87 |
| 通用曲线 (部分约简) |  |  |  |
| GF(2^163) | 163 |  |  |  |
| GF(2^193) | 193 |  |  |  |
| GF(2^233) | 233 |  |  |  |

**表1：硬件和软件性能**

尽管硬件中的硬连线约简提供了大约6倍于部分约简的速度提升，但部分约简比全约简实现快约1.7倍。与全约简相比，部分约简不仅减少了每次约简迭代所需的乘法次数，还更好地利用了寄存器。对于我们使用的处理器，这导致代码更高效，内存操作更少。

对于软件性能数据，使用全约简的实现优于部分约简。这可以解释为大操作数乘法的高成本，我们用它来实现部分约简。然而，部分约简允许紧凑的实现，使得完整的点乘法实现能够适用于任意有限域度（最高可达m = 255），并且可以在一张A4纸上完全展示。

点乘法kP的执行时间取决于GF(2^m)中算术操作的执行时间和整数k的位数，后者通常与有限域度m相同。在我们的硬件实现中，带有硬连线约简的加法和平方操作可以在一个时钟周期内完成，而与m无关。乘法操作需要三个时钟周期（当m ≤ 192时）或四个时钟周期（当m > 192时），另外还需要一个时钟周期用于硬连线约简。除法操作需要2m个时钟周期。由于使用投影坐标的Montgomery点乘法只需要一次除法，因此命名曲线上的点乘法执行时间主要由乘法次数决定，并且随着k的位数线性增长，在1 ≤ m ≤ 192和193 ≤ m ≤ 256区间内近似线性增长。

使用部分约简时，平方和乘法都需要i + 1次多项式乘法和i次加法，如第6节所示。乘法和平方操作占点乘法执行时间的大部分。对于通用曲线，点乘法的执行时间随i的增长和k的位数增加而增加。

**表2：SECG推荐曲线的约简迭代次数**

特定有限域GF(2^m)的约简迭代次数i取决于有限域度m、不可约多项式M和寄存器大小n。表2显示了SECG在[6]中推荐的曲线的i值，寄存器大小等于有限域度或固定的256位。在命名曲线中，只有最小的两个需要三次约简迭代，而其他所有曲线都可以用两次迭代计算。根据公式(18)，通过选择接近最大有限域度m的寄存器大小n和具有较大距离的不可约多项式（即较大的m - k），可以优化部分约简的性能。

### 10. 结论

部分约简允许在任意二元多项式有限域上计算ECC点乘法，最大度n通常由实现可以处理的最大操作数大小定义。部分约简既适用于软件实现也适用于硬件实现。它可以作为通用ECC软件库或参考实现的基础，用于验证优化后的实现。此外，包含对特定曲线优化支持的实现可以选择使用部分约简作为备选方案，以实现其他未优化的曲线和在实现时未知的曲线。

我们提出了一种ECC硬件加速器，该加速器为有限数量的命名曲线提供优化性能，并支持任意有限域GF(2^m)（m ≤ 255）上的通用曲线。虽然许多已报道的实现使用可重构逻辑来处理不同的曲线，但我们的方法非常适合在ASIC技术中实现。这种实现对于使ECC硬件加速商业化成功是必要的，因为它们在大批量生产时成本更低，功耗更低，时钟频率更高，并且更容易提供防篡改保护。

### 参考文献
[略]

### 致谢
我们要感谢Edouard Goupy和Daniel Finchelstein在硬件加速器上使用不同约简方案实现点乘法的工作。我们还要感谢André Weimerskirch审阅我们的论文，并对我们的想法提出正式表示的建议。