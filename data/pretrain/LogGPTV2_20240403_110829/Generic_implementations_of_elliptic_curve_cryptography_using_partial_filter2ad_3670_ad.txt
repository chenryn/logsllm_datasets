MHz. An image of the ﬂoorplan is shown in Figure 10.
Figure 10: FPGA Floorplan.
114·
·
9. PERFORMANCE
Table 1 summarizes performance numbers for hardware
and software implementations of Montgomery’s point mul-
tiplication algorithm over three (cid:12)elds GF (2163), GF (2193)
and GF (2233). The hardware numbers for named curves
were obtained by using multiplication and squaring opera-
tions with hardwired reduction circuitry. The numbers for
generic curves were measured for the same curves with mul-
tiplication and squaring operations implemented with full
reduction as shown in Figure 5 and with partial reduction as
shown in Figure 6, respectively. For comparison, we imple-
mented and benchmarked software libraries in C for generic
curves. The (cid:12)rst implementation uses full reduction and as-
sumes the irreducible polynomials to be either trinomials or
pentanomials. It uses a variable number of words to repre-
sent di(cid:11)erent (cid:12)eld degrees and was compiled for 64-bit pro-
cessors. The second implementation uses partial reduction
and allows an arbitrary number of terms in the irreducible
polynomials. It uses a (cid:12)xed number of eight 32-bit words
and was compiled for 32-bit processors. Execution times
were measured on a 900MHz Sun Fire280R server.
Hardware
Software
ops/s ms/op
ops/s ms/op
Named
Curves
163
GF (2
)
193
GF (2
)
233
GF (2
)
Generic
Curves
(full)
GF (2
)
GF (2
)
GF (2
)
Generic
Curves
(partial)
GF (2
)
GF (2
)
GF (2
)
163
193
233
163
193
233
6987
5359
4438
644
544
451
1075
911
757
0.14
0.19
0.23
1.55
1.84
2.22
0.93
1.10
1.32
322
294
223
50
42
35
3.11
3.40
4.48
20.11
23.83
28.87
Table 1: Hardware and Software Performance.
Although hardwired reduction in hardware o(cid:11)ers approx-
imately a 6-fold speedup over partial reduction, partial re-
duction is about 1.7 times faster than an implementation
using full reduction. Compared to full reduction, partial
reduction not only reduces the number of multiplications
needed for a reduction iteration, but also allows for a better
usage of the registers. For our processor, this results in more
e(cid:14)cient code with fewer memory operations.
As for the software numbers, the implementation using
full reduction outperforms partial reduction. This can be ex-
plained by the high cost of multiplications of large operands,
which we used to implement partial reduction. However,
partial reduction allows for compact implementations such
that a complete implementation of point multiplication for
arbitrary (cid:12)eld degrees up to m = 255 (cid:12)ts onto one letter-
sized sheet of paper.
The execution time of a point multiplication kP depends
on the execution times of the arithmetic operations in GF (2m)
and the size of the integer k in bits, which is in the order
of the (cid:12)eld degree m. In our hardware implementation, ad-
dition and squaring with hardwired reduction can be per-
formed in one clock cycle independent of m. A multipli-
cation requires three cycles for m (cid:20) 192 and four cycles
for m > 192 with an additional cycle for hardwired reduc-
tion. A division can be computed in 2m cycles. Since Mont-
gomery point multiplication using projective coordinates re-
quires only one division, the execution time of a point mul-
tiplication on named curves is dominated by the number of
multiplications and grows approximately linearly to number
of bits in k in the intervals 1 (cid:20) m (cid:20) 192 and 193 (cid:20) m (cid:20) 256.
Using partial reduction, both squaring and multiplication
require i + 1 polynomial multiplications and i additions as
shown in Section 6. Both multiplications and squarings ac-
count for the bulk of the execution time of a point multi-
plication. The execution time of a point multiplication for
generic curves increases with both the growth of i and the
number of bits in k.
Named
Curve
Irreducible
Polynomial
i for n=
m 256
x131
x163
sect113r1/r2
sect131r1/r2
sect163k1/r1/r2
sect193r1/r2
sect233k1/r1
sect239k1
+ x8
+ x7
x113
+ x3
+ x6
x193
x233
x239
+ x9
+ x2
+ x3
+ x15
+ x74
+ x36
+ 1
+ 1
+ 1
+ 1
+ 1
+ 1
2
2
2
2
2
2
3
3
2
2
2
2
Table 2: Reduction Iterations for SECG-Recommended
Curves.
The number of reduction iterations i for a particular (cid:12)eld
GF (2m) depends on the (cid:12)eld degree m, the irreducible poly-
nomial M and the register size n. Table 2 shows values of
i for curves recommended by SECG in [6] for a register size
equal to the (cid:12)eld degree and a (cid:12)xed register size of n = 256
bit. Among the named curves, only the two smallest re-
quire three reduction iterations, whereas all others can be
computed with two iterations. Referring to Equation (18),
the performance of partial reduction can be optimized by
choosing a register size n close to the maximal (cid:12)eld degree
m and irreducible polymials with a large distance between
the two highest terms, i.e. a large m − k.
10. CONCLUSIONS
Partial reduction allows for computing ECC point multi-
plication on arbitrary elliptic curves over binary polynomial
(cid:12)elds up to a maximum degree n where n is typically de(cid:12)ned
by the maximum operand size that the implementation can
handle. Partial reduction is applicable to software as well
as hardware implementations. It can serve as the basis of
a generic ECC software library or a reference implementa-
tion used to verify optimized implementations. In addition,
implementations containing optimized support for speci(cid:12)c
curves may choose to use partial reduction as a backup so-
lution for realizing other non-optimized curves and curves
not known at implementation time.
We presented an ECC hardware accelerator that provides
optimized performance for a limited number of named curves
and support for generic curves over arbitrary (cid:12)elds GF (2m),
m (cid:20) 255. While many reported implementations make use
of recon(cid:12)gurable logic to address di(cid:11)erent curves, our ap-
proach is well suited for implementations in ASIC technol-
ogy. Such implementations are needed to make ECC hard-
ware acceleration commercially successful as they o(cid:11)er lower
cost at high volumes, lower power consumption, higher clock
frequencies and an easier way to provide tamper resistance.
115Workshop on Cryptographic Hardware and Embedded
Systems, Lecture Notes in Computer Science 1965.
Springer-Verlag, August 2000.
[13] T. Itoh and S. Tsujii. A fast algorithm for computing
multiplicative inverses in gf (2m) using normal bases.
Information and Computation, (78):171{177, 1988.
[14] A. Karatsuba and Y. Ofman. Multiplication of
many-digital numbers by automatic computers.
Doklady Akad. Nauk, (145):293{294, 1963. Translation
in Physics-Doklady 7, 595-596.
[15] J. L(cid:19)opez and R. Dahab. Fast multiplication on elliptic
curves over gf(2m) without precomputation. In CHES
’99 Workshop on Cryptographic Hardware and
Embedded Systems, Lecture Notes in Computer
Science 1717. Springer-Verlag, August 1999.
[16] G. Orlando and C. Paar. A high-performance
recon(cid:12)gurable elliptic curve processor for gf (2m). In
CHES ’2000 Workshop on Cryptographic Hardware
and Embedded Systems, Lecture Notes in Computer
Science 1965. Springer-Verlag, August 2000.
[17] R. Schroeppel, H. Orman, and S. O’Malley. Fast key
exchange with elliptic curve systems. In Advances in
Cryptography, Crypto ’95, Lecture Notes in Computer
Science 963. Springer-Verlag, 1995.
[18] L. Song and K. K. Parhi. Low-energy
digit-serial/parallel (cid:12)nite (cid:12)eld multipliers. IEEE
Journal of VLSI Signal Processing Systems,
(19):149{166, 1998.
[19] U.S. Department of Commerce and National Institute
of Standards and Technology. Digital signature
standard (dss). Federal Information Processing
Standards Publication FIPS PUB 186-2, January
2000.
[20] A. D. Woodbury, D. V. Bailey, and C. Paar. Elliptic
curve cryptography on smart cards without
coprocessors. In The Fourth Smart Card Research and
Advanced Applications (CARDIS2000) Conference,
September 2000. Bristol, UK.
[21] T. Yan(cid:16)k, E. Sava(cid:24)s, and C(cid:24) . K. Ko(cid:24)c. Incomplete
reduction in modular arithmetic. IEE Proceedings:
Computers and Digital Technique, 149(2), March 2002.
Sun, Sun Microsystems, the Sun logo and Sun Fire are trademarks
in the United
or registered trademarks of Sun Microsystems, Inc.
States and other countries.
An analysis of the execution times of point multiplication
algorithms for named and generic curves shows that in the
latter case multiplication and squaring operations are much
more costly due to reduction. It is particularly noteworthy
that squaring operations become as expensive as multiplica-
tion operations.
As for future work, we want to look into e(cid:14)ciently inte-
grating partial reduction into the multiplier circuit of our
accelerator architecture.
Acknowledgments
We would like to acknowledge Edouard Goupy and Daniel
Finchelstein for implementing point multiplication on the
hardware accelerator using di(cid:11)erent reduction schemes. We
would also like to thank Andr(cid:19)e Weimerskirch for reviewing
our paper and for his suggestions regarding the formal rep-
resentation of our ideas.
11. REFERENCES
[1] G. B. Agnew, R. C. Mullin, and S. A. Vanstone. An
implementation of elliptic curve cryptosystems over
f2155 . In IEEE Journal on Selected Areas in
Communications, 11(5):804{813, June 1993.
[2] M. Bednara, M. Daldrup, J. von zur Gathen, and
J. Shokrollahi. Recon(cid:12)gurable implementation of
elliptic curve crypto algorithms. Recon(cid:12)gurable
Architectures Workshop, 16th International Parallel
and Distributed Processing Symposium, April 2002.
[3] Berlekamp. Algebraic Coding Theory. Aegan Park
Press, 1984.
[4] I. Blake, G. Seroussi, and N. Smart. Elliptic Curves in
Cryptography. Cambridge University Press, 1999.
London Mathematical Society Lecture Note Series 265.
[5] S. Blake-Wilson, D. Brown, Y. Poeluev, and
M. Salter. Additional ECC Groups For IKE. IETF
Internet Draft, July 2002.
[6] Certicom Research. Sec 2: Recommended elliptic
curve domain parameters. Standards for E(cid:14)cient
Cryptography Version 1.0, September 2000.
[7] S. Chang-Shantz. From euclid’s gcd to montgomery
multiplication to the great divide. Technical report,
Sun Microsystems Laboratories TR-2001-95, June
2001.
[8] J. Goodman and A. P. Chandrakasan. An
energy-e(cid:14)cient recon(cid:12)gurable public-key cryptography
processor. IEEE Journal of Solid-State Circuits,
36(11):1808{1820, November 2001.
[9] V. Gupta, S. Blake-Wilson, B. M¨oller, and C. Hawk.
ECC Cipher Suites for TLS. IETF Internet Draft,
August 2002.
[10] N. Gura, H. Eberle, and S. C. Shantz. An end-to-end
systems approach to elliptic curve cryptography. In
CHES ’2002 Workshop on Cryptographic Hardware
and Embedded Systems, Lecture Notes in Computer
Science. Springer-Verlag, August 2002.
[11] A. Halbuto(cid:20)gullar(cid:16) and C(cid:24) . K. Ko(cid:24)c. Mastrovito
multiplier for general irreducible polynomials. IEEE
Transactions on Computers, 49(5):503{518, May 2000.
[12] D. Hankerson, J. L. Hernandez, and A. Menezes.
Software implementation of elliptic curve
cryptography over binary (cid:12)elds. In CHES ’2000
116