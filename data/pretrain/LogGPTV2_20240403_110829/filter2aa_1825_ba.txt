ULONG info = 0;
switch (dic.IoControlCode) {
case IOCTL_MELODY_PLAY:
if (dic.InputBufferLength == 0 ||
dic.InputBufferLength % sizeof(Note) != 0) {
status = STATUS_INVALID_BUFFER_SIZE;
break;
}
auto data = (Note*)Irp->AssociatedIrp.SystemBuffer;
if (data == nullptr) {
status = STATUS_INVALID_PARAMETER;
break;
}
status = g_State->AddNotes(data,
dic.InputBufferLength / sizeof(Note));
if (!NT_SUCCESS(status))
break;
info = dic.InputBufferLength;
break;
}
return CompleteRequest(Irp, status, info);
}
CompleteRequest is a helper that we’ve seen before that completes the IRP with the given status and
information:
Chapter 8: Advanced Programming Techniques (Part 1)
245
NTSTATUS CompleteRequest(PIRP Irp,
NTSTATUS status = STATUS_SUCCESS, ULONG_PTR info = 0);
//...
NTSTATUS CompleteRequest(PIRP Irp, NTSTATUS status, ULONG_PTR info) {
Irp->IoStatus.Status = status;
Irp->IoStatus.Information = info;
IoCompleteRequest(Irp, IO_NO_INCREMENT);
return status;
}
PlaybackState::AddNotes needs to iterate over the provided notes. Here is the beginning of the
function:
NTSTATUS PlaybackState::AddNotes(const Note* notes, ULONG count) {
KdPrint((DRIVER_PREFIX "State::AddNotes %u\n", count));
for (ULONG i = 0; i Link);
}
Locker is the same type we looked at in chapter 6. The notes are inserted at the back of the list
with InsertTailList. This is where we must provide a pointer to a LIST_ENTRY object, which is why
FullNote objects are used instead of just Note. Finally, when the loop is completed, the semaphore must
be incremented by the number of notes to indicate there are more count more notes to play:
Chapter 8: Advanced Programming Techniques (Part 1)
246
//
// make the semaphore signaled (if it wasn't already) to
// indicate there are new note(s) to play
//
KeReleaseSemaphore(&m_counter, 2, count, FALSE);
KdPrint((DRIVER_PREFIX "Semaphore count: %u\n",
KeReadStateSemaphore(&m_counter)));
The value 2 used in KeReleaseSemaphore is the temporary priority boost a driver can provide to a
thread that is released because of the semaphore becoming signaled (the same thing happens with the
second parameter to IoCompleteRequest). I’ve chosen the value 2 arbitrarily. The value 0 (IO_NO_-
INCREMENT) is fine as well.
For debugging purposes, it may be useful to read the semaphore’s count with KeReadStateSemaphore
as was done in the above code. Here is the full function (without the comments):
NTSTATUS PlaybackState::AddNotes(const Note* notes, ULONG count) {
KdPrint((DRIVER_PREFIX "State::AddNotes %u\n", count));
for (ULONG i = 0; i Link);
}
KeReleaseSemaphore(&m_counter, 2, count, FALSE);
KdPrint((DRIVER_PREFIX "Semaphore count: %u\n",
KeReadStateSemaphore(&m_counter)));
return STATUS_SUCCESS;
}
The next part to look at is handling IRP_MJ_CREATE and IRP_MJ_CLOSE. In earlier chapters, we just
completed these IRPs successfully and that was it. This time, we need to create the playback thread when
the first client opens a handle to our device. The initialization in DriverEntry points both indices to
the same function, but the code is slightly different between the two. We could separate them to different
functions, but if the difference is not great we might decide to handle both within the same function.
For IRP_MJ_CLOSE, there is nothing to do but complete the IRP successfuly. For IRP_MJ_CREATE, we
want to start the playback thread the first time the dispatch routine is invoked. Here is the code:
Chapter 8: Advanced Programming Techniques (Part 1)
247
NTSTATUS MelodyCreateClose(PDEVICE_OBJECT DeviceObject, PIRP Irp) {
auto status = STATUS_SUCCESS;
if (IoGetCurrentIrpStackLocation(Irp)->MajorFunction == IRP_MJ_CREATE) {
//
// create the "playback" thread (if needed)
//
status = g_State->Start(DeviceObject);
}
return CompleteRequest(Irp, status);
}
The I/O stack location contains the IRP major function code we can use to make the distinction as required
here. In the Create case, we call PlaybackState::Start with the device object pointer that would be
used to keep the driver object alive as long as the thread is running. Let’s see what that method looks like.
NTSTATUS PlaybackState::Start(PVOID IoObject) {
Locker locker(m_lock);
if (m_hThread)
return STATUS_SUCCESS;
return IoCreateSystemThread(
IoObject,
// Driver or device object
&m_hThread,
// resulting handle
THREAD_ALL_ACCESS,
// access mask
nullptr,
// no object attributes required
NtCurrentProcess(),
// create in the current process
nullptr,
// returned client ID
PlayMelody,
// thread function
this);
// passed to thread function
}
Acuqiring the fast mutex ensures that a second thread is not created (as m_hThread would already be non-
NULL). The thread is created with IoCreateSystemThread, which is preferred over PsCreateSys-
temThread because it ensures that the driver is not unloaded while the thread is executing (this does
require Windows 8 or later).
The passed-in I/O object is the device object provided by the IRP_MJ_CREATE handler. The most common
way of creating a thread by a driver is to run it in the context of the System process, as it normally should
not be tied to a user-mode process. Our case, however, is more complicated because we intend to use the
Beep driver to play the notes. The Beep driver needs to be able to handle multiple users (that might be
connected to the same system), each one playing their own sounds. This is why when asked to play a note,
the Beep driver plays in the context of the caller’s session. If we create the thread in the System process,
which is always part of session zero, we will not hear any sound, because session 0 is not an interactive
user session.
Chapter 8: Advanced Programming Techniques (Part 1)
248
This means we need to create our thread in the context of some process running under the caller’s session
- Using the caller’s process directly (NtCurrentProcess) is the simplest way to get it working. You may
frown at this, and rightly so, because the first process calling the driver to play something is going to have
to host that thread for the lifetime of the driver. This has an unintended side effect: the process will not die.
Even if it may seem to terminate, it will still show up in Task Manager with our thread being the single
thread still keeping the process alive. We’ll find a more elegant solution later in this chapter.
Yet another consequence of this arrangement is that we only handle one session - the first one where one
of its processes happens to call the driver. We’ll fix that as well later on.
The thread created starts runniing the PlayMelody function - a static function in the PlaybackState
class. Callbacks must be global or static functions (because they are directly C function pointers), but in
this case we would like to access the members of this instance of PlaybackState. The common trick
is to pass the this pointer as the thread argument, and the callback simply invokes an instance method
using this pointer:
// static function
void PlaybackState::PlayMelody(PVOID context) {
((PlaybackState*)context)->PlayMelody();
}
Now the instance method PlaybackState::PlayMelody has full access to the object’s members.
There is another way to invoke the instance method without going through the intermediate
static by using C++ lambda functions, as non-capturing lambdas are directly convertible to C
function pointers:
IoCreateSystemThread(..., [](auto param) {
((PlaybackState*)param)->PlayMelody();
}, this);
The first order of business in the new thread is to obtain a pointer to the Beep device using IoGetDe-
viceObjectPointer:
#include 
void PlaybackState::PlayMelody() {
PDEVICE_OBJECT beepDevice;
UNICODE_STRING beepDeviceName = RTL_CONSTANT_STRING(DD_BEEP_DEVICE_NAME_U);
PFILE_OBJECT beepFileObject;
auto status = IoGetDeviceObjectPointer(&beepDeviceName, GENERIC_WRITE,
&beepFileObject, &beepDevice);
if (!NT_SUCCESS(status)) {
KdPrint((DRIVER_PREFIX "Failed to locate beep device (0x%X)\n",
Chapter 8: Advanced Programming Techniques (Part 1)
249
status));
return;
}
The Beep device name is \Device\Beep as we’ve seen in chapter 2. Conveniently, the provided header
ntddbeep.h declares everything we need in order to work with the device, such as the DD_BEEP_DEVICE_-
NAME_U macro that defines the Unicode name.
At this point, the thread should loop around while it has notes to play and has not been instructed to
terminate. This is where the semaphore and the event come in. The thread must wait until one of them is
signaled. If it’s the event, it should break out of the loop. If it’s the semaphore, it means the semaphore’s
count is greater than zero, which in turn means the list of notes is not empty:
PVOID objects[] = { &m_counter, &m_stopEvent };
IO_STATUS_BLOCK ioStatus;
BEEP_SET_PARAMETERS params;
for (;;) {
status = KeWaitForMultipleObjects(2, objects, WaitAny, Executive,
KernelMode, FALSE, nullptr, nullptr);
if (status == STATUS_WAIT_1) {
KdPrint((DRIVER_PREFIX "Stop event signaled. Exiting thread...\n"));
break;
}
KdPrint((DRIVER_PREFIX "Semaphore count: %u\n",
KeReadStateSemaphore(&m_counter)));
The required call is to KeWaitForMultipleObjects with the event and semaphore. They are put in an
array, since this is the requirement for KeWaitForMultipleObjects. If the returned status is STATUS_-
WAIT_1 (which is the same as STATUS_WAIT_0 + 1), meaning index number 1 is the signaled object,
the loop is exited with a break instruction.
Now we need to extract the next note to play:
PLIST_ENTRY link;
{
Locker locker(m_lock);
link = RemoveHeadList(&m_head);
NT_ASSERT(link != &m_head);
}
auto note = CONTAINING_RECORD(link, FullNote, Link);
KdPrint((DRIVER_PREFIX "Playing note Freq: %u Dur: %u Rep: %u Delay: %u\n",
note->Frequency, note->Duration, note->Repeat, note->Delay));
Chapter 8: Advanced Programming Techniques (Part 1)
250
We remove the head item from the list, and doing so under the fast mutex’ protection. The assert ensures
we are in a consistent state - remember that removing an item from an empty list returns the pointer to
its head.
The actual FullNote pointer is retrieved with the help of the CONTAINING_RECORD macro, that moves
the LIST_ENTRY pointer we received from RemoveHeadList to the containing FullNode that we are
actually interested in.
The next step is to handle the note. If the note’s frequency is zero, let’s consider that as a “silence time”
with the length provided by Delay:
if (note->Frequency == 0) {
//
// just do a delay
//
NT_ASSERT(note->Duration > 0);
LARGE_INTEGER interval;
interval.QuadPart = -10000LL * note->Duration;
KeDelayExecutionThread(KernelMode, FALSE, &interval);
}
KeDelayExecutionThread is the rough equivalent of the Sleep/SleepEx APIs from user-mode. Here
is its declaration:
NTSTATUS KeDelayExecutionThread (
_In_ KPROCESSOR_MODE WaitMode,
_In_ BOOLEAN Alertable,
_In_ PLARGE_INTEGER Interval);
We’ve seen all these parameters as part of the wait functions. The most common invocation is with
KernelMode and FALSE for WaitMode and Alertable, respectively. The interval is the most important
parameter, where negative values mean relative wait in 100nsec units. Converting from milliseconds
means multiplying by -10000, which is what you see in the above code.
If the frequency in the note is not zero, then we need to call the Beep driver with proper IRP.
We already know that we need the IOCTL_BEEP_SET control code (defined in ntddbeep.h) and the
BEEP_SET_PARAMETERS structure. All we need to do is build an IRP with the correct information using
IoBuildDeviceIoControlRequest, and send it to the beep device with IoCallDriver:
Chapter 8: Advanced Programming Techniques (Part 1)
251
else {
params.Duration = note->Duration;
params.Frequency = note->Frequency;
int count = max(1, note->Repeat);
KEVENT doneEvent;
KeInitializeEvent(&doneEvent, NotificationEvent, FALSE);
for (int i = 0; i Duration;
KeDelayExecutionThread(KernelMode, FALSE, &delay);
Finally, if Repeat is greater than one, then we might need to wait between plays of the same note:
// perform the delay if specified,
// except for the last iteration
//
if (i Delay != 0) {
delay.QuadPart = -10000LL * note->Delay;
KeDelayExecutionThread(KernelMode, FALSE, &delay);
}
}
}
At this point, the note data can be freed (or just returned to the lookaside list) and the code loops back to
wait for the availability of the next note:
ExFreeToPagedLookasideList(&m_lookaside, note);
}
The loop continues until the thread is instructed to stop by signaling stopEvent, at which point it breaks
from the infinite loop and cleans up by dereferecning the file object obtained from IoGetDeviceOb-
jectPointer:
ObDereferenceObject(beepFileObject);
}
Here is the entire thread function for convenience (comments and KdPrint removed):