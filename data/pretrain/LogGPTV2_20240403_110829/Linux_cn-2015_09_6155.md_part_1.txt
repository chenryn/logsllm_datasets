---
author: Gabriel Cánepa
category: 技术
comments_data:
- date: '2015-09-06 13:45:50'
  message: 还是这篇比较好
  postip: 115.224.75.191
  username: 妙正灰 [Chrome 45.0|Windows 10]
- date: '2015-09-24 17:23:37'
  message: 把英文版全能翻译到这个地步，不错，辛苦了
  postip: 117.32.132.75
  username: mefirst_love [Internet Explorer 11.0|Windows 8.1]
- date: '2015-10-22 10:10:02'
  message: "例6：归档时同时保存原始权限和所有权\r\n# tar cJf ApacheLogs-$(date +%Y%m%d).tar.xz
    /var/log/httpd/* --same-permissions --same-owner\r\n这个好像写错了 应该使用p tar cpf
    ……"
  postip: 180.168.208.234
  username: i1zhuxian [Chrome 42.0|Windows 10]
- date: '2015-10-22 11:19:20'
  message: -p 参数相当于—same-permissions and —same-owner 。这里的代码高亮错误可能让你误会了。
  postip: 106.120.220.78
  username: linux [Chrome 46.0|Mac 10.11]
- date: '2015-10-22 13:04:41'
  message: 汗 后面的我以为是注释呢……
  postip: 180.168.208.234
  username: i1zhuxian [Chrome 42.0|Windows 10]
count:
  commentnum: 5
  favtimes: 13
  likes: 0
  sharetimes: 0
  viewnum: 10063
date: '2015-09-06 09:30:00'
editorchoice: false
excerpt: 在本篇中，我们将回顾一些系统管理员日常任务需要的技能。  RHCSA： 运行文件以及进行文件夹管理 - 第二部分 创建、删除、复制和移动文件及目录
  文件和目录管理是每一个系统管理员都应该掌握的必备技能。它包括了从头开始的创建、删除文本文件（每个程序的核心配置）以及目录（你用来组织文件和其它目录），以及识别已有文件的类型。
  touch 命令 不仅仅能用来创建空文件，还能用来更新已有文件的访问时间和修改时间。  touch 命令示例 你可以使用 file 来判断一个文件的类型 (在你用文本编辑器编辑之前，判断类型将会更方便编辑)。  file
fromurl: http://www.tecmint.com/file-and-directory-management-in-linux/
id: 6155
islctt: true
largepic: /data/attachment/album/201509/06/013356u0ow1qg1go5wc1d0.png
permalink: /article-6155-1.html
pic: /data/attachment/album/201509/06/013356u0ow1qg1go5wc1d0.png.thumb.jpg
related:
- displayorder: 0
  raid: 6133
reviewer: ''
selector: ''
summary: 在本篇中，我们将回顾一些系统管理员日常任务需要的技能。  RHCSA： 运行文件以及进行文件夹管理 - 第二部分 创建、删除、复制和移动文件及目录
  文件和目录管理是每一个系统管理员都应该掌握的必备技能。它包括了从头开始的创建、删除文本文件（每个程序的核心配置）以及目录（你用来组织文件和其它目录），以及识别已有文件的类型。
  touch 命令 不仅仅能用来创建空文件，还能用来更新已有文件的访问时间和修改时间。  touch 命令示例 你可以使用 file 来判断一个文件的类型 (在你用文本编辑器编辑之前，判断类型将会更方便编辑)。  file
tags:
- RHCSA
thumb: false
title: 'RHCSA 系列（二）: 如何进行文件和目录管理'
titlepic: false
translator: bestony
updated: '2015-09-06 09:30:00'
---
在本篇中，我们将回顾一些系统管理员日常任务需要的技能。
![RHCSA: Perform File and Directory Management – Part 2](/data/attachment/album/201509/06/013356u0ow1qg1go5wc1d0.png)
*RHCSA： 运行文件以及进行文件夹管理 - 第二部分*
### 创建、删除、复制和移动文件及目录
文件和目录管理是每一个系统管理员都应该掌握的必备技能。它包括了从头开始的创建、删除文本文件（每个程序的核心配置）以及目录（你用来组织文件和其它目录），以及识别已有文件的类型。
[`touch` 命令](/article-2740-1.html) 不仅仅能用来创建空文件，还能用来更新已有文件的访问时间和修改时间。
![touch command example](/data/attachment/album/201509/06/013356wxotbox68gpvyx8d.png)
*touch 命令示例*
你可以使用 `file [filename]`来判断一个文件的类型 (在你用文本编辑器编辑之前，判断类型将会更方便编辑)。
![file command example](/data/attachment/album/201509/06/013356es3rm4kn6nlxnnlf.png)
*file 命令示例*
使用`rm [filename]` 可以删除文件。
![Linux rm command examples](/data/attachment/album/201509/06/013357nfyt1h21f2ixpt5f.png)
*rm 命令示例*
对于目录，你可以使用`mkdir [directory]`在已经存在的路径中创建目录，或者使用 `mkdir -p [/full/path/to/directory]`带全路径创建文件夹。
![mkdir command example](/data/attachment/album/201509/06/013357pwzrczafjjfd8zb6.png)
*mkdir 命令示例*
当你想要去删除目录时，在你使用`rmdir [directory]` 前，你需要先确保目录是空的，或者使用更加强力的命令(小心使用它！)`rm -rf [directory]`。后者会强制删除`[directory]`以及它的内容，所以使用这个命令存在一定的风险。
### 输入输出重定向以及管道
命令行环境提供了两个非常有用的功能：允许重定向命令的输入和输出为另一个文件，以及发送命令的输出到另一个命令，这分别称为重定向和管道。
为了理解这两个重要概念，我们首先需要理解三个最重要的字符输入输出流类型，以 \*nix 的话来说，它们实际上是特殊的文件。
* 标准输入 (即 stdin)，默认连接到键盘。 换句话说，键盘是输入命令到命令行的标准输入设备。
* 标准输出 (即 stdout)，默认连接到屏幕。 找个设备“接受”命令的输出，并展示到屏幕上。
* 标准错误 (即 stderr)，默认是命令的状态消息出现的地方，它也是屏幕。
在下面的例子中，`ls /var`的结果被发送到stdout(屏幕展示)，ls /tecmint 的结果也一样。但在后一种情况下，它显示在标准错误输出上。
![Linux input output redirect](/data/attachment/album/201509/06/013358i0jhq211hjvh1pv2.png)
*输入和输出命令实例*
为了更容易识别这些特殊文件，每个文件都被分配有一个文件描述符，这是用于访问它们的抽象标识。主要要理解的是，这些文件就像其它的一样，可以被重定向。这就意味着你可以从一个文件或脚本中捕获输出，并将它传送到另一个文件、命令或脚本中。这样你就可以在磁盘上存储命令的输出结果，用于稍后的分析。
要重定向 stdin (fd 0)、 stdout (fd 1) 或 stderr (fd 2)，可以使用如下操作符。
|  |  |
| --- | --- |
| **转向操作** | **效果** |
| **>** | 重定向标准输出到一个文件。如果目标文件存在，内容就会被重写。 |
| **>>** | 添加标准输出到文件尾部。 |
| **2>** | 重定向标准错误输出到一个文件。如果目标文件存在，内容就会被重写。 |
| **2>>** | 添加标准错误输出到文件尾部。 |
| **&>** | 重定向标准错误和标准输出到一个文件。如果目标文件存在，内容就会被重写。 |
| **** | 使用特定的文件做标准输入和标准输出。 |
与重定向相比，管道是通过在命令后和另外一个命令前之间添加一个竖杠`(|)`。
记得:
* *重定向*是用来定向命令的输出到一个文件，或把一个文件发送作为到一个命令的输入。
* *管道*是用来将命令的输出转发到另一个命令作为其输入。
#### 重定向和管道的使用实例
**例1：将一个命令的输出到文件**
有些时候，你需要遍历一个文件列表。要做到这样，你可以先将该列表保存到文件中，然后再按行读取该文件。虽然你可以直接遍历ls的输出，不过这个例子是用来说明重定向。
```
# ls -1 /var/mail > mail.txt
```
![Redirect output of command tot a file](/data/attachment/album/201509/06/013358el0mtmngtvmw0lum.png)
*将一个命令的输出重定向到文件*
**例2：重定向stdout和stderr到/dev/null**
如果不想让标准输出和标准错误展示在屏幕上，我们可以把这两个文件描述符重定向到 `/dev/null`。请注意对于同样的命令，重定向是如何改变了输出。