title:English shellcode
author:Joshua Mason and
Sam Small and
Fabian Monrose and
Greg MacManus
English Shellcode
Joshua Mason, Sam Small
Johns Hopkins University
{josh, sam}@cs.jhu.edu
Baltimore, MD
University of North Carolina
Fabian Monrose
Chapel Hill, NC
PI:EMAIL
Greg MacManus
iSIGHT Partners
Washington, DC
PI:EMAIL
ABSTRACT
History indicates that the security community commonly
takes a divide-and-conquer approach to battling malware
threats:
identify the essential and inalienable components
of an attack, then develop detection and prevention tech-
niques that directly target one or more of the essential com-
ponents. This abstraction is evident in much of the litera-
ture for buﬀer overﬂow attacks including, for instance, stack
protection and NOP sled detection. It comes as no surprise
then that we approach shellcode detection and prevention
in a similar fashion. However, the common belief that com-
ponents of polymorphic shellcode (e.g., the decoder) can-
not reliably be hidden suggests a more implicit and broader
assumption that continues to drive contemporary research:
namely, that valid and complete representations of shellcode
are fundamentally diﬀerent in structure than benign pay-
loads. While the ﬁrst tenet of this assumption is philosoph-
ically undeniable (i.e., a string of bytes is either shellcode or
it is not), truth of the latter claim is less obvious if there exist
encoding techniques capable of producing shellcode with fea-
tures nearly indistinguishable from non-executable content.
In this paper, we challenge the assumption that shellcode
must conform to superﬁcial and discernible representations.
Speciﬁcally, we demonstrate a technique for automatically
producing English Shellcode, transforming arbitrary shell-
code into a representation that is superﬁcially similar to
English prose. The shellcode is completely self-contained—
i.e., it does not require an external loader and executes as
valid IA32 code)—and can typically be generated in under
an hour on commodity hardware. Our primary objective in
this paper is to promote discussion and stimulate new ideas
for thinking ahead about preventive measures for tackling
evolutions in code-injection attacks.
Categories and Subject Descriptors
K.6.5 [Security and Protection]: Invasive software
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’09, November 9–13, 2009, Chicago, Illinois, USA.
Copyright 2009 ACM 978-1-60558-352-5/09/11 ...$10.00.
General Terms
Security, Experimentation
Keywords
Shellcode, Natural Language, Network Emulation
1.
INTRODUCTION
Code-injection attacks are perhaps one of the most com-
mon attacks on modern computer systems. These attacks
are used to deliver and run arbitrary code on victims’ ma-
chines, often enabling unauthorized access and control of
system resources, applications, and data. Typically, the vul-
nerabilities being exploited arise due to some level of neglect
on the part of system and application developers to properly
deﬁne and reject invalid program input. Indeed, the canon-
ical consequences of such neglect, which include buﬀer and
heap overﬂow attacks, format string attacks, and (more re-
cently) heap spray attacks, categorically demonstrate some
of the most popular code-injection techniques.
Generally speaking, an attacker’s ﬁrst objective in a code-
injection attack is to gain control of a machine’s program
counter. The program counter is a special purpose ma-
chine register that identiﬁes the next instruction scheduled
for execution. By gaining control of the program counter,
an attacker is able to redirect program execution and dis-
rupt the intended behavior of the program. With the abil-
ity to manipulate the program counter, attackers sometimes
redirect a victim’s machine to execute (already present) ap-
plication or system code in a manner beneﬁcial to an at-
tacker’s intent. For instance, return-to-libc attacks provide
a well-documented example of this kind of manipulation.
In a code-injection attack, however, attackers redirect the
program counter to execute code delivered by the attack-
ers themselves. Depending on the details of the particu-
lar vulnerability that an attacker is targeting, injected code
can take several forms including source code for an inter-
preted scripting-language engine, intermediate byte-code, or
natively-executable machine code.
Despite diﬀerences in the style and implementation of dif-
ferent exploits, e.g., buﬀer overﬂow versus format string at-
tacks, all code-injection attacks share a common compo-
nent: the injected code. This payload typically provides
attackers with arbitrary control over a vulnerable machine.
Frequently (though not always), attackers deliver a payload
that simply launches a command shell. It is for this reason
that many in the hacking community generically refer to the
payload portion of a code-injection attack as shellcode.
524Among those less familiar with code-injection attacks, there
is sometimes a subtle misconception that shellcode is nec-
essarily delivered in tandem with whichever message ulti-
mately exploits a vulnerability and grants an attacker con-
trol of the program counter. While this assumption typ-
ically holds in more traditional buﬀer overﬂow vulnerabil-
ities, modern attacks demonstrate that attackers have de-
veloped numerous techniques to covertly deliver (and ulti-
mately store into memory) shellcode separately from and
prior to triggering the exploit. For instance, if an attacker
can manipulate memory at a known heap address, they may
store their shellcode there, using its address later when over-
writing a return address on the stack [10]. We draw atten-
tion to this distinction because our use of the term shellcode
in this paper speciﬁcally denotes the injected code irrespec-
tive of individual attacks or vulnerabilities.
Typically, shellcode takes the form of directly executable
machine code, and consequently, several defensive measures
that attempt to detect its presence, or prevent its execution
altogether, have been proposed. Indeed, automated inspec-
tion of user input, system memory, or network traﬃc for
content that appears statistically or superﬁcially executable
are now common (e.g., [23, 1, 16, 15, 27]). However, as ex-
pected, a number of techniques have been developed that
circumvent these protective measures, or make their job far
more diﬃcult (e.g., polymorphism [5, 7]).
Recently, it has been suggested that even polymorphic
shellcode is constrained by an essential component: the de-
coder. The argument is that the decoder is a necessary and
executable companion to encoded shellcode, enabling the
encoded portion of the payload to undergo an inverse trans-
formation to its original and executable form. Since the
decoder must be natively executable, the prevailing thought
is that we can detect its presence assuming that this portion
of the payload will bear some identiﬁable features not com-
mon to valid or non-executable data. It is this assumption—
that shellcode is fundamentally diﬀerent in structure than
non-executable payload data—that continues to drive some
avenues of contemporary research (e.g., [27, 16, 15, 26]).
By challenging the assumption that shellcode must con-
form to superﬁcial and discernible representations, we ques-
tion whether protective measures designed to assume oth-
erwise are likely to succeed. Speciﬁcally, we demonstrate
a technique for automatically producing English Shellcode
— that is, transforming arbitrary shellcode into a repre-
sentation that is statistically similar to English prose. By
augmenting corpora-based natural-language generation with
additional constraints uniquely dictated by each instance of
shellcode, we generate encodings complete with decoder that
remain statistically faithful to the corpus and yield identical
execution as the original shellcode. While we in no way claim
that instantiations of this encoding are irrefutably indistin-
guishable from authentic English prose—indeed, as shown
later, it is clear they are not—the expected burden associ-
ated with reliably detecting English-encoded shellcode vari-
ants in juxtaposition to genuine payloads at line speed raises
concerns about current preventative approaches.
Similar to the goal of Song et al. [20], our objective in
this paper is to promote discussion and stimulate new ideas
for thinking about how to tackle evolutions in code-injection
attacks. Although most of the attacks observed today have
used relatively na¨ıve shellcode engines [17, 26], exploit code
will likely continue to evade intrusion detection and preven-
tion systems because malcode developers do not follow the
“rules”. As this cat and mouse game plays on, it is clear that
the attackers will adapt. So should we, especially as it per-
tains to exploring new directions for preventitive measures
against code-injection attacks.
2. ON THE ARMS RACE
In this paper, we focus on natively-executable shellcode
for x86 processors. In this case, machine code and shellcode
are fundamentally identical; they both adhere to the same
binary representation directly executable by the processor.
Shellcode developers are often faced with constraints that
limit the range of byte-values accepted by a vulnerable ap-
plication. For instance, many applications restrict input to
certain character-sets (e.g., printable, alphanumeric, MIME),
or ﬁlter input with common library routines like isalnum
and strspn. The diﬃculty in overcoming these restrictions
and bypassing input ﬁlters depends on the range of accept-
able input. Of course, these restrictions can be bypassed
by writing shellcode that does not contain restricted byte-
values (e.g., null-bytes). Although such restrictions often
limit the set of operations available for use in an attack,
attackers have derived encodings to convert unconstrained
shellcode honoring these restrictions by building equivalency
operations from reduced instruction sets (e.g., [25, 11]).
Of special note are the alphanumeric encoding engines [18]
present in Metasploit (see www.metasploit.com). These en-
gines convert arbitrary payloads to representations composed
only of letters and numerical digits. These encodings are sig-
niﬁcant for two reasons. First, alphanumeric shellcode can
be stored in atypical and otherwise unsuspected contexts
such as syntactically valid ﬁle and directory names or user
passwords [18]. Second, the alphanumeric character set is
signiﬁcantly smaller than the set of characters available in
Unicode and UTF-8 encodings. This means that the set of in-
structions available for composing alphanumeric shellcode is
relatively small. To cope with these restrictions, patching or
self-modiﬁcation is often used. Since alphanumeric engines
produce encodings automatically, a decoder is required. The
challenge then is to develop an encoding scheme and de-
coder that use only alphanumeric characters (and hence, a
restricted instruction set), yet are together capable of en-
coding arbitrary payloads. The top three rows in Figure 1
show examples using the Metasploit framework.
ENCODING
HEX
ASCII
None
PexAlphaNum
Alpha2
English
31DB5343536A ...
515A56545836 ...
374949515A6A ...
546865726520 ...
1#SCSj#jfX######CRfh\fS##jfXPQV####...
QZVTX630VX4A0B6HH0B30BCVX2BDBH4A2AD...
7IIQZjJX0B1PABkBAZB2BA2AA0AAX8BBPux...
There is a major center of economic...
Figure 1: Example encodings of a Linux IA32 Bind Shell. The
PexAlphaNum and Alpha2 encodings were generated using the
Metasploit Framework. A hash symbol in the last column repre-
sents a character that is either unprintable or from the extended
ASCII character set.
We note that much of the literature describing code in-
jection attacks (and prevention) assumes a standard attack
template consisting of the basic components found tradition-
ally in buﬀer-overﬂow attacks: a NOP sled, shellcode, and one
525or more pointers to the shellcode [1, 12, 23, 27]. Not surpris-
ingly, the natural reaction has been to develop techniques
that detect such structure or behavior [20, 23, 16, 15, 27,
14]. While emulation and static analysis have been success-
ful in identifying some of the failings of advanced shellcode,
in the limit, the overhead will likely make doing so improb-
able. Moreover, attacks are not constrained to this layout
and so attempts at merely detecting this structure can be
problematic; infact, identifying each component has its own
unique set of challenges [1, 13], and it has been suggested
that malicious polymorphic behavior cannot be modeled ef-
fectively [20].
In support of that argument, we provide a
concrete instantiation that shows that the decoder can share
the same properties as benign data.
3. RELATED WORK
Defensive approaches against code-injection attacks tend
to fall into three broad categories. The ﬁrst centers around
tools and techniques to both limit the spoils of exploita-
tion and to prevent developers from writing vulnerable code.
Examples of such approaches include automatic bounds pro-
tection for buﬀers [4] and static checking of format strings
at compile-time, utilizing “safe” versions of system libraries,
and address-space layout randomization [19], etc. While
these techniques reduce the attack surface for code-injection
attacks, no combination of such techniques seems to system-
atically eliminate the threat of code-injection [6, 21].
In light of persistent vulnerabilities, the second category
of countermeasures focuses on preventing the execution of
injected code. In this realm, researchers have demonstrated
some success using methods that randomize the instruction-
set [22] or render portions of the stack non-executable. Al-
though these approaches can be eﬀective,
instruction-set
randomization is considered too ineﬃcient for some work-
loads. Additionally, recent work by Buchanan et al. demon-
strates that without better support for constraining program
behavior, execution-redirection attacks are still possible [3].
The third category for code-injection defense consists of
content-based input-validation techniques. These approaches
are either host or network-based and are typically used as
components in intrusion detection systems. User-input or
network traﬃc is considered suspicious when it appears exe-
cutable or anomalous as determined by heuristic, signature,
or simulation.
In this area, Toth and Kruegel detect some buﬀer overﬂow
exploits by interpreting network payloads as executable code
and analyzing their execution structure [23]. They divide
machine instructions into two categories separated by those
that modify the program counter, i.e., jump instructions,
and others that do not. Their experiments show that, under
some circumstances, it is possible to identify payloads with
executable code by evaluating the maximum length of in-
struction sequences that fall between jump instructions, and
ﬁnd that payloads with lower maximum execution lengths
are typically benign. However, their evaluation does not in-
clude an analysis of polymorphic code, and Kolesnikov et al.
show that polymorphic blending attacks evade this detection
approach [9].
Several approaches have been suggested for identifying
self-decrypting shellcode using emulation [15, 27, 2] or dy-
namic taint analysis [26]. However, these detection methods
are based on a number of assumptions that do not neces-
sarily need to be so. For instance, they detect decryption
routines in polymorphic code by scanning network traﬃc for
GetPC code. Essentially, this includes any instructions that
provide an attacker with the value of the instruction pointer
(e.g., using the fstenv instruction). They reason that some
form of GetPC code is necessary for determining the location
of an exploit’s encrypted payload. However, many exploits
do not follow this convention and attackers can often deter-
mine the location of their payload by simply understanding
how a particular exploit aﬀects machine state or by manipu-
lating it themselves as part of the attack. Furthermore, these
emulation techniques are incomplete because they cannot
accurately reproduce the behavior of execution candidates
without register and ﬂag information – information that is
unavailable to network-based intrusion detection systems.
Polychronakis et al. address some of these limitations
by examining shellcode without GetPC code, coined non-
self-contained polymorphic shellcode [16]. By developing a
number of behavioral heuristics, they were able to identify
polymorphic shellcode by emulating execution from data in
numerous network traces. While their approach signiﬁcantly
improves upon previous detection methods, the contents of
memory and registers are still unknown, making accurate
emulation a challenge. For instance, an attacker may know
the value of registers (e.g., EFLAGS) or memory accessible
from the vulnerable process prior to shellcode execution.
This means that an attacker can use conditional jumps or
other operations to obfuscate the execution path of the shell-
code.
In particular, self-modifying shellcode that is laced
with conditional operations raises challenges for emulation-
based techniques as they must execute all possible execution
paths. While path enumeration can be tractable in certain
shellcode encodings where conditional statements are rare,
the English letters “p” through “z” are all conditional jumps.
Therefore, when it comes to English, shellcode designed in
tandem with the exploit makes current emulation particu-
larly diﬃcult.
Lastly, Song et al. examine popular polymorphic shell-
code engines to assess their strengths and weaknesses [20].
Our work supports their observations in that while today’s
polymorphic engines do generate observable artifacts, these
artifacts are not intrinsically symptomatic of polymorphic
code. However, while they advise that modeling acceptable
content or behavior may lead to a better long-term solu-
tion for preventing shellcode delivery, we argue that even
modeling acceptable content will be rife with its own set of
challenges, as exempliﬁed by English shellcode. Speciﬁcally,
by generating malicious code that draws from a language
model built using only benign content, statistical measures
of intent become less accurate and the signal-to-noise ratio
between malicious code and valid network data declines.
4. TOWARDS ENGLISH SHELLCODE
Shellcode, like other compiled code, is simply an ordered
list of machine instructions. At the lowest level of represen-
tation, each instruction is stored as a series of bytes signify-
ing a pattern of signals that instruct the CPU to manipulate
data as desired. Like machine instructions, non-executable
data is represented in byte form. Coincidentally, some char-
acter strings from the ASCII character and native machine
instructions have identical byte representations. Moreover,
it is even possible to ﬁnd examples of this phenomenon that
parse as grammatically correct English sentences. For in-
stance, ASCII representation of the phrase “Shake Shake
526Shake!” is byte-equivalent to the following sequence of Intel
instructions: push %ebx; push "ake "; push %ebx; push
"ake "; push %ebx; push "ake!".
However, it is unlikely that one could construct mean-
ingful code by simply concatenating English phrases that
exhibit this property. Abiding by the rules of English gram-
mar simply excludes the presence of many instructions and
signiﬁcantly limits the availability and placement of others.
For example, add, mov, and call instructions cannot be con-
structed using this method. Therefore, while it may be pos-
sible to construct some instances of shellcode with coherent
objectives in this manner, the versatility of this technique is