### 变量与系统策略
全局变量 `BlVsmpSystemPolicy` 存储了相应的值。如果 UEFI 锁开启，该 EFI 变量将被设置，并且无法通过 `winload.efi` 禁用（只能使用自定义的 EFI 代码来移除）。函数 `OslpPrepareTarget` 会调用 `OslpProcessSIPolicy` 两次，第一次直接从 `OslInitializeCodeIntegrity` 函数中调用。`OslpProcessSIPolicy` 使用三个 EFI 变量池来校验 SI 策略签名。每个池包含三个 EFI 变量：第一个包含策略，第二个包含版本，第三个包含授权的策略更新签名者。例如，对于 `C:\Windows\System32\CodeIntegrity\SIPolicy.p7b`，变量是 `Si`、`SiPolicyVersion` 和 `SiPolicyUpdateSigners`。如果“version”和“update signers”变量被设置，系统将增强 SI 策略签名：它必须存在且正确签名，否则引导将失败。验证过程通过 `BlSiPolicyIsSignedPolicyRequired` 函数完成。

三种策略及其相关变量总结如下：
- **Si**：存储策略。
- **SiPolicyVersion**：存储版本信息。
- **SiPolicyUpdateSigners**：存储授权的策略更新签名者。

我们不确定 `revokeSiPolicy` 和 `skuPolicy` 的具体用途，但它们似乎与普通的 `SiPolicy` 类似。

### Hyper-V 和内核组件的加载
执行将转移到 `OslArchHypervisorSetup` 函数，该函数需要使用与执行步骤相对应的参数进行调用，从0开始。在第一次调用时，它初始化 Hyper-V（加载 `hvloader.efi` 并通过 `HvlpLaunchHvLoader` 执行）。安全启动设置通过 `OslInitializeCodeIntegrity` 进行校验。

`OslpPrepareTarget` 函数然后加载 NTOS 内核 (`ntoskrnl.exe`)，并通过 `OslpLoadAllModules` 函数加载 `hal.dll` 和 `mcupdate.dll` 模块。接着，`Local Key` 和 `Identification Key` 由 `OslVsmProvisionLKey` 和 `OslVsmProvisionIdk` 函数加载。

此时，NTOS 内核已初始化但尚未启动。以步骤“0”为参数的 `OslVsmSetup` 被调用（与 `OslArchHypervisorSetup` 一样：以“步骤”为参数），首先校验 Hyper-V 是否已启动，然后初始化 `OslVsmLoaderBlock`（参数在初始化期间由安全内核提供）。然后，`OslVsmSetup` 加载安全内核 (`securekernel.exe`)，并通过 `OslpVsmLoadModules` 函数加载其依赖的 `skci.dll`（使用 `OslLoadImage` 校验签名）。EFI 变量 `OslLoaderIndications` 的第一位被设置为1。

最后，`OslVsmSetup` 函数再次被调用，但参数是步骤“1”。这触发了 `OslVsmLoaderBlock` 的初始化。

当 `OslpPrepareTarget` 返回后，VBS 参数已被验证，NTOS 和安全内核都已加载。它们的入口点地址被存储在全局变量 `OslpVsmSystemStartup` 和 `OslEntryPoint` 中（分别对应 `securekernel.exe` 和 `ntoskrnl.exe`），以便将来使用。

### 微软 EFI 变量
VBS EFI 变量属于命名空间 `{0x77FA9ABD, 0x0359, 0x4D32, 0xBD, 0x60, 0x28, 0xF4, 0xE7, 0x8F, 0x78, 0x4B}`。这些变量设置了“Boot”和“Setup”属性，因此在 EFI 引导阶段之后，它们的访问和修改是不允许的。

然而，可以转储这些变量的内容，以便在逆向分析中使用。与 VBS 相关的 EFI 变量及其用法总结如下：

为了转储这些变量的内容，可以关闭安全启动并使用一个简单的 EFI 自定义引导启动器（如 gnu-efi 和 Visual Studio）。一些变量转储示例如下：

### Hyper-V 和安全内核启动
回到 `OslpPrepareTarget`，现在开始执行启动 Hyper-V 和分割 VTL0 及 VTL1 空间的过程。这个过程总结如下：
- Winload 在“第一个”Hyper-V VM 中运行。
- Winload 调用安全内核的入口点（EP）。
- 安全内核初始化自身，请求 Hyper-V 内存保护。
- 安全内核请求 VTL1 验证。
- Hyper-V 启用 VTL1（“第二个”VM），返回到 `ShvlpVtlEntry`。
- 通过 `ShvlpVtlReturn`，安全内核（现在是 VTL1）返回到 winload（现在是 VTL0）。
- Winload 调用 ntoskrnl 入口点。

下面是安全内核初始化前后的状态对比（VTL0 VM 是蓝色块，VTL1 是绿色块，Hyper-V 是橙色块）：

继续执行，通过调用 `OslFwpKernelSetupPhase1` 退出 EFI 模式，并且以“1”参数调用 `OslArchHypervisorSetup` 启动 Hyper-V。`Hvix64` 通过向 `HvlpSavedRsp` 保存的 RSP 启动，并将 `HvlReturnFromHypervisor` 传给 `hvix64`。当 `HvlpReturnFromHypervisor` 被命中时，使用 `cpuid` 指令验证启动，并重置 RSP。我们确实处在第一个虚拟机中，它很快将成为 VTL1。

`OslVsmSetup` 再次被调用（步骤“2”）：
- 校验 VBS 参数。
- 验证 Hyper-V 正确运行。
- 修改 `OslVsmLoaderBlock` 设置。
- 在相同块中复制 `OslVsmLKeyArray`（Local Key）和 `OslVsmIdk`（“Identification Key”）。
- 调用存储在 `OslpVsmSystemStartup` 中的安全内核入口点，指定 `OslVsmLoaderBlock` 及其大小为参数。

然后，安全内核将执行其初始化，并调用 `SkmiProtectSecureKernelPages` 以安装自己的内存，并注册 Hyper-V 时间拦截例程（HyperGuard 及其 `Skpg*` 前缀的例程）。根据 [http://www.sandpile.org/x86/msr.htm](http://www.sandpile.org/x86/msr.htm)，对 MSR 的操作由 `SkpgxInterceptMsr` 拦截处理：

我们的假设是，这些处理器设置是为了捕获 VTL0 中的 CPL 转换，以阻止关键 MSR 的修改。还有两个其他例程，`SkpgxInterceptRegisters` 和 `SkpgInterceptRepHypercall`。前者可能是拦截 CRXXX 寄存器操作的方法（例如，写 CR4 可以禁用 SMEP），后者是拦截未授权的调用（这只是猜测）。

关于 HyperGuard，似乎通过 `SkpgVerifyExtents` 执行 VTL0 完整性校验。`SkpgHyperguardRuntime` 被调用，可能是计划执行的（使用 `SkpgSetTimer`）。

HyperGuard 处理器和回调函数被复制到 `SkpgContext`（由 `SkpgAllocateContext` 和 `SkpgInitializeContext` 初始化）。

记住上一章节只是假设，可能存在错误，因为我们目前没有在 VTL1 HyperGuard/PatchGuard 例程中花费太多时间。

在初始化的最后，安全内核将执行两个调用：
- `0x0F`，`ShvlEnableVpVtl`，指定一个 `ShvlpVtl1Entry` 函数指针。
- `0x12`，`ShvlpVtlCall`，它不会在任何其他地方使用，并且使用其自己的跳板函数（将在后续文章中提供更多细节）。

`ShvlpVtl1Entry` 以 `SkpPrepareForReturnToNormalMode` 结束，此过程使 Hyper-V 开启 VTL0 和 VTL1，返回到 `ShvlpVtl1Entry`，再回到 `winload.efi` 进入 VTL0 上下文。

最终，当返回到 `winload.efi` 的主函数时，将通过 `OslArchTransferToKernel` 执行 NTOS 的入口点，使用 `OslEntryPoint` 调用入口点。

然后执行下一个操作，就像 Windows 在正常环境中启动一样，只是现在 NTOS 内核知道 VBS 相关的组件（如设备保护）。

### 总结
基于虚拟化的安全是 Windows 10 安全功能的关键组件。通过 VBS 的安全内核初始化，本文希望为想要深入分析这一功能的逆向工程师提供帮助。

在第二部分中，我们将涵盖 VTL0 和 VTL1 如何内核通信以及 Hyper-V 调用如何实现。