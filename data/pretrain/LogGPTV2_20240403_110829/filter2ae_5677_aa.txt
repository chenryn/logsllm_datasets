本文描述了作者从开始到发现CVE-2021-22204的完整过程。  
-> [原文链接](https://devcraft.io/2021/05/04/exiftool-arbitrary-code-execution-cve-2021-22204.html "原文链接")
* * *
## 背景
最近在Hackerone上察看一个我最喜欢的[漏洞赏金项目](https://hackerone.com/gitlab?type=team
"漏洞赏金项目")时，我发现他们正在使用ExifTool对上传的图片进行过滤。我曾多次使用ExifTool，但从未深入探究其原理，甚至不知道它是用什么语言编写的。在这个赏金项目里，他们使用了旧版本的ExifTool(11.70)，虽然解析文件格式很难，但我想也许存在一些现有的CVE可以拿来使用。
在快速搜索后，我只找到一个2018年的旧CVE，因此我决定还是审计它的源代码。ExifTool是使用Perl写的，我之前从未审计过Perl，但它作为一种动态脚本语言，大部分的通用概念我都很熟悉。
我一开始想要寻找那些执行文件访问的地方，但并未获得成果，接着我开始搜索`eval`，发现它被大量使用：  
在Perl中，`eval`有两种使用方式，`eval BLOCK`和`eval EXPR`，这就是它被大量使用的原因。忽略所有的`eval
BLOCK`后，我从剩下的结果中发现了一些有趣的东西，其中一个位于`DjVu`模块的`ParseAnt`方法中，我不知道`DjVu`文件是什么，但`ParseAnt`方法的注释写得非常详细。包含`eval`的代码块如下：
    $tok = '';
      for (;;) {
          # get string up to the next quotation mark
          # this doesn't work in perl 5.6.2! grrrr
          # last Tok unless $$dataPt =~ /(.*?)"/sg;
          # $tok .= $1;
          my $pos = pos($$dataPt);
          last Tok unless $$dataPt =~ /"/sg;
          $tok .= substr($$dataPt, $pos, pos($$dataPt)-1-$pos);
          # we're good unless quote was escaped by odd number of backslashes
          last unless $tok =~ /(\\+)$/ and length($1) & 0x01;
          $tok .= '"';    # quote is part of the string
      }
      # must protect unescaped "$" and "@" symbols, and "\" at end of string
      $tok =~ s{\\(.)|([\$\@]|\\$)}{'\\'.($2 || $1)}sge;
      # convert C escape sequences (allowed in quoted text)
      $tok = eval qq{"$tok"};
当匹配到一个引号时，它将建立一个字符串，直到找到另一个引号(包括使用反斜杠转义的引号)。然后通过正则来转义特殊字符，转义后的值将传递给`qq`，最终到达`eval`。从注释中可以得知，这么做的原因是为了支持C语言的转义序列，我想这在Perl中也是类似的。被转义的特殊字符是为了防止在`eval`运行时出现字符串篡改或是打破双引号的闭合。
为了进行一些尝试，我希望能够通过一张图片触发`ParseAnt`方法。我发现了一个DjVu.djvu图像的样例，但不幸的是，它使用了压缩版的块`ANTz`而不是文本`ANTa`。
在十六进制编辑器中查看该文件，格式看上去似乎相当简单。在字符串`DJVIANTz`后面是十六进制的`000002E0`，它很可能是标签的长度，因为这与文件中剩余的字节数相对应。我在`ProcessAnt`方法中加入了`print($dataPt);`，然后在djvu图像上运行了exiftool，打印结果如下：
    (metadata
            (Author "Phil Harvey")
            (Title "DjVu Metadata Sample")
            (Subject "ExifTool DjVu test image")
            (Creator "ExifTool")
            (CreationDate "2008-09-23T12:31:34-04:00")
            (ModDate "2008-11-11T09:17:10-05:00")
            (Keywords "ExifTool, Test, DjVu, XMP")
            (Producer "djvused")
            (note "Must escape double quotes (\") and backslashes (\\)")
            (Trapped "Unknown")
            (annote "Did you get this?")
            (url "https://exiftool.org/") )
    (xmp "\n\n \n  Must escape double quotes (") and backslashes (\\)\n \n\n \n  \n   \n    Phil Harvey\n   \n  \n  \n   \n    ExifTool DjVu test image\n   \n  \n  \n   \n    Copyright 2008 Phil Harvey\n   \n  \n  \n   \n    ExifTool\n    Test\n    DjVu\n    XMP\n   \n  \n  \n   \n    DjVu Metadata Sample\n   \n  \n \n\n \n  ExifTool, Test, DjVu, XMP\n  djvused\n  /Unknown\n \n\n \n  2008-09-23T12:31:34-04:00\n  ExifTool\n  2008-11-11T09:17:10-05:00\n \n")
    Author                          : Phil Harvey
    Create Date                     : 2008:09:23 12:31:34-04:00
    Modify Date                     : 2008:11:11 09:17:10-05:00
    Keywords                        : ExifTool, Test, DjVu, XMP
所以元数据的格式似乎是以`metadata`开始，后面是标签名称和带引号的值。我编辑了文件，用`DJVIANTa\x00\x00\x00!(metadata
(Author "Phil Harvey"))`替换了`DJVIANTz...`，然后重新运行exiftool，作者标签正确显示。
## 发现漏洞
现在我有了一个可以快速测试不同组合的方法，在每次修改`$tok`时，都通过添加更多的`print`来显示。我在测试其中一个组合时，出现了以下错误：
    String found where operator expected at (eval 8) line 2, at end of line
            (Missing semicolon on previous line?)
我使用了一个反斜线，后面是一个换行符，然后是一个双引号，导致其难以被`eval`：  
第二个引号没有被转义，因为在正则`$tok =~
/(\\+)$/`中，`$`会匹配字符串的结尾，但也会在字符串结尾的换行前进行匹配，所以代码在转义换行符时认为引号被转义了。
这相当令人激动，因为只要让它成为有效的Perl代码，就能够被`eval`执行。我对元数据进行了修改，注释掉了尾部的引号并执行和返回`date`：  
接着在这之上运行exiftool就会导致代码执行：  
## 更多格式
通过传递一个未知的文件给ExifTool来造成代码执行是非常惊人的，但如果能用一个更常见格式的有效图像来触发这个漏洞就更好了。这样一来，即使在传递给ExifTool之前对图片进行了一些验证（例如确保它是png或jpeg），漏洞仍然有效。
我开始寻找是否有其他东西使用`DjVu`模块，但它只被`AIFF`模块所引用，没有其他格式引用该模块。我记得ExifTool可以用来嵌入和提取jpeg缩略图，但看`ThumbnailImage`的使用情况，它似乎没有尝试解析嵌入的图像，这导致我去寻找能够解析图像元数据的函数：
    #------------------------------------------------------------------------------    # Extract meta information from image
    # Inputs: 0) ExifTool object reference
    #         1-N) Same as ImageInfo()
    # Returns: 1 if this was a valid image, 0 otherwise
    # Notes: pass an undefined value to avoid parsing arguments
    # Internal 'ReEntry' option allows this routine to be called recursively
    sub ExtractInfo($;@)
有趣的是，注释中提到如果制定了`ReEntry`选项，这就可以被递归调用。通过查看`ExtratInfo`的使用情况，我找到了`Exif`模块：
    %Image::ExifTool::Exif::Main = (
      # SNIP
      0xc51b => { # (Hasselblad H3D)
            Name => 'HasselbladExif',
            Format => 'undef',
            RawConv => q{
                $$self{DOC_NUM} = ++$$self{DOC_COUNT};
                $self->ExtractInfo(\$val, { ReEntry => 1 });
                $$self{DOC_NUM} = 0;
                return undef;
            },
        },
因此，如果找到了EXIF标签`0xc51b`，这个值就会被传递给`ExtractInfo`，元数据就会被解析，从而使DjVu的漏洞被触发。Exif模块顶部的描述是`Read
EXIF/TIFF meta information`，所以我开始阅读TIFF格式。
在测试文件中有一个样本tif，运行exiftools时指定参数`-v10`：
    exiftool -v10 ./t/images/ExifTool.tif
      ExifToolVersion = 11.85
      FileName = ExifTool.tif
      Directory = ./t/images
      FileSize = 4864
      FileModifyDate = 1618544560
      FileAccessDate = 1618544564
      FileInodeChangeDate = 1618974185
      FilePermissions = 33188
      FileType = TIFF
      FileTypeExtension = TIF
      MIMEType = image/tiff
      ExifByteOrder = MM
      + [IFD0 directory with 22 entries]
      | 0)  SubfileType = 0
      |     - Tag 0x00fe (4 bytes, int32u[1]):
      |         0012: 00 00 00 00                                     [....]
      | 1)  ImageWidth = 160
      |     - Tag 0x0100 (4 bytes, int32u[1]):
      |         001e: 00 00 00 a0                                     [....]
      | 2)  ImageHeight = 120
      |     - Tag 0x0101 (4 bytes, int32u[1]):
      |         002a: 00 00 00 78                                     [...x]
      | 3)  BitsPerSample = 8 8 8
      |     - Tag 0x0102 (6 bytes, int16u[3]):
      |         0116: 00 08 00 08 00 08                               [......]
      | 4)  Compression = 5
      |     - Tag 0x0103 (2 bytes, int16u[1]):
      |         0042: 00 05                                           [..]
      | 5)  PhotometricInterpretation = 2
      |     - Tag 0x0106 (2 bytes, int16u[1]):
      |         004e: 00 02                                           [..]
      | 6)  ImageDescription = The picture caption
      |     - Tag 0x010e (20 bytes, string[20]):