### 8. Limitations and Future Work

This study, which encompasses 482 onion sites, represents the most extensive website fingerprinting analysis of onion services to date. Despite this, our findings may not be fully representative of the entire onion service ecosystem. We utilized `ahmia.fi` to gather as many `.onion` URLs as possible, although more effective but ethically questionable methods, such as setting up a snooping Hidden Service Directory [24], exist.

Our dataset captures a snapshot of the onion service landscape over a 14-day period. Given the dynamic nature of these services, and the fact that fingerprintability is influenced by the collective characteristics of all sites, regular updates to the dataset and analysis are necessary to maintain an accurate diagnosis of current fingerprintability levels.

As new website fingerprinting attacks emerge, the features that contribute to fingerprintability may evolve. For instance, if defenses are introduced or website designs change, certain features may become less significant. However, the methods we introduce for feature extraction and understanding what makes sites identifiable remain valuable. We argue that the effectiveness of proposed defenses should be evaluated not just on average, but also in terms of their disparate impact on different sites based on their features. For example, even if a defense significantly reduces the average accuracy of a fingerprinting attack, it may still leave some sites highly identifiable.

Our data collection methodology adheres to standard practices in the website fingerprinting literature, focusing on home pages. This approach, while reducing the classification space, provides a realistic adversarial advantage, as many users first land on the homepage before navigating to inner pages. Additionally, the link structure of inner pages can be exploited to enhance the accuracy of fingerprinting attacks.

Using a Tor Browser-based crawler better mimics real browser behavior compared to tools like `wget`, `curl`, or headless browsers, thereby minimizing the risk of differential treatment by onion services. However, it is still possible to detect the presence of Selenium-based automation via JavaScript.

To measure the upper bound of fingerprintability, we sanitize the entire dataset, including test data, which aligns with previous methodologies [21, 27]. Redesigning sites to be small and dynamic, as suggested by our analysis, may not be feasible for all sites due to various constraints. Nevertheless, our results can inform the design of application-layer defenses that alter site-level features to reduce fingerprintability [8].

Previous studies have shown that data from regular websites become outdated quickly, leading to a drop in attack accuracy when classifiers are trained on old data [15]. In contrast, Kwon et al. found that onion services change at a slower rate and do not become stale as quickly [17]. Therefore, we assume that adversaries can maintain an updated database of website fingerprinting templates.

Reducing the accuracy of website fingerprinting attacks can be framed as an adversarial learning problem. Future work will focus on finding efficient ways to alter website features to launch poisoning attacks against fingerprinting classifiers under constraints such as bandwidth, latency, and availability [14].

Finally, while the random forest regression method for determining fingerprintability is currently useful for feature analysis, it has limitations. Creating an accurate tool that can predict a site's fingerprintability based solely on site-level features would be highly valuable for onion services.

### 9. Conclusion

Our work aims to transform the way we build and analyze website fingerprinting attacks and defenses. Unlike previous contributions, we do not propose a new attack algorithm or explicit defense. Instead, we investigate what makes certain sites more or less vulnerable to fingerprinting attacks. By examining the types of features common in vulnerable sites, our analysis offers valuable insights for onion service operators and designers of fingerprinting defenses.

A fingerprinting countermeasure may have a disparate impact on different sites, which is not apparent when only considering average accuracies. From the perspective of an onion service provider, overall accuracies are less important than whether a particular defense will protect their site and users. Our results can guide the design and operation of onion services to make them less easily fingerprintable, particularly by considering the results of feature analyses and misclassifications. For example, larger sites are more reliably identifiable, while smaller, dynamic sites are harder to identify.

This work also contributes to the field of adversarial machine learning. Most research in this area focuses on attacking specific algorithms and feature sets, but in privacy problems, this model often does not apply. Our study explores methods to force the misclassification of instances regardless of the learning method.

### Acknowledgments

This work was funded in part by the National Science Foundation (1253418) and a senior postdoctoral fellowship from KU Leuven (SF/15/007). Additional support was provided by the European Commission through KU Leuven BOF OT/13/070, H2020-DS-2014-653497 PANORAMIX, and H2020-ICT-2014-644371 WITDOM. Marc Juarez is supported by a PhD fellowship from the Fund for Scientific Research - Flanders (FWO).

### References

[1] 2017. Users - Tor Metrics. https://metrics.torproject.org/userstats-relay-country.
[2] Marco Barreno, Blaine Nelson, Russell Sears, Anthony D. Joseph, and J. D. Tygar. 2006. Can Machine Learning Be Secure?. In Proceedings of the 2006 ACM Symposium on Information, Computer and Communications Security (ASIACCS '06).
[3] Vincent D Blondel, Jean-Loup Guillaume, Renaud Lambiotte, and Etienne Lefebvre. 2008. Fast unfolding of communities in large networks. Journal of Statistical Mechanics: Theory and Experiment 2008, 10 (2008), P10008.
[4] Xiang Cai, Rishab Nithyanand, and Rob Johnson. 2014. CS-BuFLO: A Congestion Sensitive Website Fingerprinting Defense. In Workshop on Privacy in the Electronic Society (WPES). ACM, 121–130.
[5] Xiang Cai, Rishab Nithyanand, Tao Wang, Rob Johnson, and Ian Goldberg. 2014. A Systematic Approach to Developing and Evaluating Website Fingerprinting Defenses. In ACM Conference on Computer and Communications Security (CCS). ACM, 227–238.
[6] Xiang Cai, Xin Cheng Zhang, Brijesh Joshi, and Rob Johnson. 2012. Touching from a Distance: Website Fingerprinting Attacks and Defenses. In ACM Conference on Computer and Communications Security (CCS). ACM, 605–616.
[7] Heyning Cheng and Ron Avnur. 1998. Traffic Analysis of SSL Encrypted Web Browsing. Available at http://www.cs.berkeley.edu/~daw/teaching/cs261-f98/projects/final-reports/ronathan-heyning.ps. Project paper, University of Berkeley (1998).
[8] Giovanni Cherubin, Jamie Hayes, and Marc Juarez. 2017. "Website Fingerprinting Defenses at the Application Layer". In Privacy Enhancing Technologies Symposium (PETS). De Gruyter, 168–185. Issue 2.
[9] Roger Dingledine, Nick Mathewson, and Paul F. Syverson. 2004. "Tor: The Second-Generation Onion Router". In USENIX Security Symposium. USENIX Association, 303–320.
[10] Kevin P. Dyer, Scott E. Coull, Thomas Ristenpart, and Thomas Shrimpton. 2012. Peek-a-Boo, I Still See You: Why Efficient Traffic Analysis Countermeasures Fail. In IEEE Symposium on Security and Privacy (S&P). IEEE, 332–346.
[11] Jamie Hayes and George Danezis. 2016. k-fingerprinting: a Robust Scalable Website Fingerprinting Technique. In USENIX Security Symposium. USENIX Association, 1–17.
[12] Dominik Herrmann, Rolf Wendolsky, and Hannes Federrath. 2009. Website Fingerprinting: Attacking Popular Privacy Enhancing Technologies with the Multinomial Naïve-Bayes Classifier. In ACM Workshop on Cloud Computing Security. ACM, 31–42.
[13] Andrew Hintz. 2003. Fingerprinting Websites Using Traffic Analysis. In Privacy Enhancing Technologies (PETs). Springer, 171–178.
[14] Ling Huang, Anthony D Joseph, Blaine Nelson, Benjamin IP Rubinstein, and JD Tygar. 2011. Adversarial Machine Learning. In Proceedings of the 4th ACM workshop on Security and artificial intelligence. ACM, 43–58.
[15] Marc Juarez, Sadia Afroz, Gunes Acar, Claudia Diaz, and Rachel Greenstadt. 2014. A Critical Evaluation of Website Fingerprinting Attacks. In ACM Conference on Computer and Communications Security (CCS). ACM, 263–274.
[16] Marc Juarez, Mohsen Imani, Mike Perry, Claudia Diaz, and Matthew Wright. 2016. Toward an Efficient Website Fingerprinting Defense. In European Symposium on Research in Computer Security (ESORICS). Springer, 27–46.
[17] Albert Kwon, Mashael AlSabah, David Lazar, Marc Dacier, and Srinivas Devadas. 2015. Circuit Fingerprinting Attacks: Passive Deanonymization of Tor Hidden Services. In USENIX Security Symposium. USENIX Association, 287–302.
[18] Sarah Jamie Lewis. 2017. OnionScan Report: Freedom Hosting II, A New Map and a New Direction. "https://mascherari.press/onionscan-report-fhii-a-new-map-and-the-future/". (6 March 2017). (accessed: May, 2017).
[19] Marc Liberatore and Brian Neil Levine. 2006. "Inferring the source of encrypted HTTP connections". In ACM Conference on Computer and Communications Security (CCS). ACM, 255–263.
[20] Xiapu Luo, Peng Zhou, Edmond W. W. Chan, Wenke Lee, Rocky K. C. Chang, and Roberto Perdisci. 2011. HTTPOS: Sealing Information Leaks with Browser-side Obfuscation of Encrypted Flows. In Network & Distributed System Security Symposium (NDSS). IEEE Computer Society.
[21] Andriy Panchenko, Fabian Lanze, Andreas Zinnen, Martin Henze, Jan Pennekamp, Klaus Wehrle, and Thomas Engel. 2016. Website Fingerprinting at Internet Scale. In Network & Distributed System Security Symposium (NDSS). IEEE Computer Society, 1–15.
[22] Andriy Panchenko, Lukas Niessen, Andreas Zinnen, and Thomas Engel. 2011. Website Fingerprinting in Onion Routing Based Anonymization Networks. In ACM Workshop on Privacy in the Electronic Society (WPES). ACM, 103–114.
[23] Mike Perry. 2011. Experimental Defense for Website Traffic Fingerprinting. "https://blog.torproject.org/blog/experimental-defense-website-traffic-fingerprinting" (accessed: October 10, 2013).
[24] Amirali Sanatinia and Guevara Noubir. 2016. HOnions: Towards Detection and Identification of Misbehaving Tor HSdirs. In Workshop on Hot Topics in Privacy Enhancing Technologies (HotPETs).
[25] Q Sun, DR R Simon, and YM M Wang. 2002. Statistical Identification of Encrypted Web Browsing Traffic. In IEEE Symposium on Security and Privacy (S&P). IEEE, 19–30.
[26] Tao Wang, Xiang Cai, Rishab Nithyanand, Rob Johnson, and Ian Goldberg. 2014. Effective Attacks and Provable Defenses for Website Fingerprinting. In USENIX Security Symposium. USENIX Association, 143–157.
[27] Tao Wang and Ian Goldberg. 2013. Improved Website Fingerprinting on Tor. In ACM Workshop on Privacy in the Electronic Society (WPES). ACM, 201–212.
[28] Tao Wang and Ian Goldberg. 2016. On Realistically Attacking Tor with Website Fingerprinting. In Proceedings on Privacy Enhancing Technologies (PoPETs). De Gruyter Open, 21–36.
[29] Davis Yoshida and Jordan Boyd-Graber. 2016. "Using Confusion Graphs to Understand Classifier Error". In Proceedings of the NAACL Human-Computer Question Answering Workshop. Association for Computational Linguistics, 48–52. Issue 2.

### A. Site-Level Features

Table 6 presents the site-level features and the statistics used to aggregate each feature within a site class. We followed the feature extraction steps outlined in Section 3 to obtain these features. Here, we provide a detailed overview of the feature extraction process for different site-level feature families.

**Table 6: Site-level features and statistics used to aggregate them across download instances.**

| Feature | Median / Mode | Description |
|---------|---------------|-------------|
| Number of HTTP requests | Median | Number of HTTP requests stored by the browser add-on |
| Number of HTTP responses | Median | Number of HTTP responses stored by the browser add-on |
| Has advertisement | Mode | HTTP request matching EasyList 7 |
| Has tracking/analytics | Mode | HTTP request matching EasyPrivacy 8 |
| HTML source size | Median | Size (in bytes) of the page source |
| Page load time | Median | As determined by Selenium |
| Made with Django | Mode | As determined by generator HTML meta tag |
| Made with Dokuwiki | Mode | As determined by generator HTML meta tag |
| Made with Drupal | Mode | As determined by generator HTML meta tag |
| Made with Joomla | Mode | As determined by generator HTML meta tag |
| Made with MediaWiki | Mode | As determined by generator HTML meta tag |
| Made with OnionMail | Mode | As determined by generator HTML meta tag |
| Made with phpSQLiteCMS | Mode | As determined by generator HTML meta tag |
| Made with vBulletin | Mode | As determined by generator HTML meta tag |
| Made with WooCommerce | Mode | As determined by generator HTML meta tag |
| Made with Wordpress | Mode | As determined by generator HTML meta tag |
| Made with CMS | Mode | True if any of the “Made with...” features above is true |
| Number of audio | Median | As determined by the Content-Type HTTP response header |
| Number of domains | Median | As determined by the Content-Type HTTP response header |
| Number of redirections | Median | As determined by the presence of Location HTTP response header |
| Number of empty content | Median | Number of HTTP responses with Content-Length equal to zero |
| Number of fonts | Median | As determined by the Content-Type HTTP response header |
| Number of HTML resources | Median | As determined by the Content-Type HTTP response header |
| Number of images | Median | As determined by the Content-Type HTTP response header |
| Number of other content | Median | As determined by the Content-Type HTTP response header |
| Number of scripts | Median | As determined by the Content-Type HTTP response header |
| Number of stylesheets | Median | As determined by the Content-Type HTTP response header |
| Number of videos | Median | As determined by the Content-Type HTTP response header |
| Number of waterfall phases | Median | Approximate number of HTTP waterfall chart phases as determined by switches from request to response or response to request. |
| Screenshot size | Median | Size (in bytes) of the screenshot saved by Selenium |
| Page weight | Median | Sum of the HTTP response sizes (in bytes) |
| Total request size | Median | Sum of the HTTP request sizes (in bytes) |

**Notes:**
- **Nominal and binary features** such as "Made with Wordpress" are aggregated by taking the most frequent value (i.e., mode) of the instances.
- **Quantitative features** such as "Page load time" are aggregated using the median, as it is less sensitive to outliers than the mean.

### B. Confusion Graph for CUMUL

**Figure 10: Confusion graph for the CUMUL classifier drawn by Gephi software using the methodology explained in Section 4.6.**

- **Nodes** are colored based on the community they belong to, determined by the Louvain community detection algorithm [3].
- **Node size** is proportional to the node degree, indicating lower classification accuracy for larger nodes.
- **Observations:**
  - Highly connected communities on the top left and right suggest clusters of onion services commonly confused with each other.
  - Several node pairs are frequently classified as each other, forming ellipses.

---

This optimized version of the text is more coherent, professional, and structured, making it easier to read and understand.