---
author: Sebastian Sylvan
category: 观点
comments_data:
- date: '2017-03-27 18:02:02'
  message: OO对象模型本身就对缓存不友好，再怎么优化也不可能到很理想的程度。另，openjdk的默认JVM，Hotspot实际性能比微软的CLR强不少。jit本身可以应用的优化也比静态编译可以应用的优化灵活多了，比如很简单就可以做到基于逃逸分析的动态寄存器分配和栈上对象分配，还有暂时静态编译做不到的跨库inline，以至于一些运算密集场景下真的可以出现Java跑得比c++快，，，一部分c#程序员是真浅薄。
  postip: 175.0.161.77
  username: 来自湖南长沙的 QQ Browser 9.5|Windows 7 用户
- date: '2017-03-27 18:11:25'
  message: 错字：~~整形值~~，**整型值**
  postip: 112.64.37.109
  username: 来自上海的 Firefox 52.0|Windows 10 用户
- date: '2017-03-27 22:51:28'
  message: 汗
  postip: 123.118.176.218
  username: linux [Chrome 56.0|Mac 10.11]
- date: '2017-03-29 12:39:28'
  message: 然后就用C#和Java代表（大多数）高级语言了
  postip: 117.151.53.45
  username: 来自湖北的 Chrome 56.0|Windows 10 用户
- date: '2017-03-29 12:48:26'
  message: 其实也还行，其他的脚本语言只会更慢
  postip: 117.151.53.45
  username: 来自湖北的 Chrome 56.0|Windows 10 用户
- date: '2017-03-31 16:23:32'
  message: 某些情况下是可能的，但理论上Java不可能比C/C++快，除非设计有问题。
  postip: 152.62.44.203
  username: 来自美国的 Firefox 52.0|Windows 7 用户
- date: '2017-04-01 10:03:02'
  message: 内存很便宜，时间很贵。
  postip: 116.228.53.168
  username: 来自上海的 Chrome 56.0|Windows 7 用户
- date: '2017-04-14 11:15:52'
  message: 感谢更正
  postip: 113.87.180.251
  username: kenx [Chrome 57.0|Windows 10]
count:
  commentnum: 8
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 10566
date: '2017-03-27 09:27:00'
editorchoice: false
excerpt: 大部分高级语言运行效率较慢的原因通常有两点：没有很好的利用缓存；垃圾回收机制性能消耗高。但事实上，这两个原因可以归因于：高级语言强烈地鼓励编程人员分配很多的内存。
fromurl: https://www.sebastiansylvan.com/post/why-most-high-level-languages-are-slow
id: 8341
islctt: true
largepic: /data/attachment/album/201703/27/092712e44ioa9z4g1k90z7.jpg
permalink: /article-8341-1.html
pic: /data/attachment/album/201703/27/092712e44ioa9z4g1k90z7.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 大部分高级语言运行效率较慢的原因通常有两点：没有很好的利用缓存；垃圾回收机制性能消耗高。但事实上，这两个原因可以归因于：高级语言强烈地鼓励编程人员分配很多的内存。
tags:
- 编程语言
thumb: false
title: 为什么（大多数）高级语言运行效率较慢
titlepic: true
translator: kenxx
updated: '2017-03-27 09:27:00'
---
在近一两个月中，我多次的和线上线下的朋友讨论了这个话题，所以我干脆直接把它写在博客中，以便以后查阅。
大部分高级语言运行效率较慢的原因通常有两点：
1. 没有很好的利用缓存；
2. 垃圾回收机制性能消耗高。
但事实上，这两个原因可以归因于：高级语言强烈地鼓励编程人员分配很多的内存。
![](/data/attachment/album/201703/27/092712e44ioa9z4g1k90z7.jpg)
首先，下文内容主要讨论客户端应用。如果你的程序有 99.9% 的时间都在等待网络 I/O，那么这很可能不是拖慢语言运行效率的原因——优先考虑的问题当然是优化网络。在本文中，我们主要讨论程序在本地执行的速度。
我将选用 C# 语言作为本文的参考语言，其原因有二：首先它是我常用的高级语言；其次如果我使用 Java 语言，许多使用 C# 的朋友会告诉我 C# 不会有这些问题，因为它有值类型（但这是错误的）。
接下来我将会讨论，出于编程习惯编写的代码、使用 普遍编程方法   （    with the grain    ） 的代码或使用库或教程中提到的常用代码来编写程序时会发生什么。我对那些使用难搞的办法来解决语言自身毛病以“证明”语言没毛病这事没兴趣，当然你可以和语言抗争来避免它的毛病，但这并不能说明语言本身是没有问题的。
### 回顾缓存消耗问题
首先我们先来回顾一下合理使用缓存的重要性。下图是基于在 Haswell 架构下内存延迟对 CPU 影响的 [数据](http://www.7-cpu.com/cpu/Haswell.html)：
![](/data/attachment/album/201703/27/092724ibb7mmmpypxsbbsm.png)