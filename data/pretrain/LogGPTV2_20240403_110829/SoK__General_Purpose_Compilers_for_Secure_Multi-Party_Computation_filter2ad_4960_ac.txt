a high degree of cryptographic knowledge on the part
of the developer by automatically selecting the optimal
MPC protocol for different parts of the code. This type
of automatic optimization is difﬁcult, however, and the
MPC compilers we analyzed do not attempt it. The EzPC
project [30] and ABY3 project [100], both based on ABY
(Section VI-F), attempt to automatically optimize the
back-end representation among three protocols. At the
time of this writing, however, neither project had code
available and we have not included them in our tests.
V. EVALUATION CRITERIA
A. Usability
We consider the tools and documentation a developer
needs to install, run, and write programs using the
framework. Our ﬁndings are summarized in Table I.
We identify several types of valuable documentation.
Thankfully, every framework we tested includes some
form of basic installation documentation. Language
Documentation gives an overview of the high-level lan-
guage: a language architecture and design document, a
start-up guide or tutorial, or a generated list of types
and built-in functions. Some larger systems also have
Online Support, such as an active mailing list or paid
personnel who provide technical support2. Functional
Example Code demonstrates end-to-end execution of a
program within a framework and is often more up-to-
date than general language documentation (a (cid:2)(cid:3) indicates
we needed additional ﬁles or tools to run examples).
Explicit Example Documentation provides context for
these programs, either in the comments of the code or a
separate document (a (cid:2)(cid:3) indicates limited documentation;
details in Section VI).
Most of the frameworks are Open Source under a
standard GNU or BSD license (a (cid:2)(cid:3) indicates closed-
source tools or code are required for full functionality).
We record the date of the Last Major Update (as of this
writing): either ongoing development or the latest tagged
release.
B. Sample Programs
We implemented three sample programs to evaluate
usability, expressiveness, architecture, and cryptographic
design of the frameworks. In addition to our online
repository, we include illustrative code samples in the
Appendix A.
2 Although we received support from academic authors, we do not
count responsive authors as “online support;” this model is not scalable.
1225
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:10 UTC from IEEE Xplore.  Restrictions apply. 
Data Types
int
Boolean
Fixed
int
Arbitrary
Float
Array
array
Dynamic
Struct
Operators
Grammar
Comparisons
Addition
Logical
Multiplication
Division
Bit-shifts
Bitwise
index
access
Conditional
Private
Array
(cid:4)
(cid:4)
(cid:3)
-
(cid:4)
(cid:2)(cid:3)
(cid:3)
(cid:4)
(cid:2)(cid:3)
(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
-
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:3)
(cid:4)
-
(cid:3)
(cid:3)
(cid:2)(cid:3)
(cid:3)
(cid:4)
(cid:4)
(cid:3)
(cid:4)
(cid:4)
(cid:4)
-
(cid:3)
(cid:2)(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:3)
(cid:2)(cid:3)
(cid:4)
(cid:4)
(cid:2)(cid:3)
-
(cid:2)(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
-
-
(cid:3)
(cid:3)
(cid:4)
(cid:4)
(cid:3)
(cid:3)
(cid:4)
(cid:4)
(cid:2)(cid:3)
-
(cid:4)
(cid:4)
(cid:2)(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
-
(cid:3)
(cid:4)
(cid:3)
(cid:4)
(cid:4)
(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
-
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
-
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
-
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
-
(cid:2)(cid:3)
(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
-
(cid:3)
(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
-
(cid:3)
(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:3)
(cid:4)
(cid:4)
-
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
-
(cid:3)
(cid:2)(cid:3)
(cid:4)
(cid:4)
(cid:3)
Lib
ORAM
-
(cid:3)
(cid:3)
ORAM
(cid:3)
(cid:4) Mux
(cid:4) Mux
(cid:4) Mux
EMP-toolkit
Obliv-C
ObliVM
TinyGarble
Wysteria
ABY
SCALE-MAMBA
Sharemind
PICCO
Frigate
CBMC-GC
TABLE II: A summary of functionality and expressibility of each high-level language. Partial support ((cid:2)(cid:3)) is explained
for individual frameworks in Section VI.
1) Multiply Three: This program takes integer input
from three parties and computes the product. The simple
function demonstrates the structure of each framework.
The program tests whether the implementation supports
three or more parties, or if there is a simple way to secret-
share multiple inputs across the two computation servers.
It also tests basic numeric capabilities of the framework:
input and output of integers and simple computation on
secure types.
2) Inner Product: The inner product takes the sum
of the pairwise product of the elements of two vectors.
It tests array-related functionality. Parties should be able
to pass an array as input, store secret data within, and
access and iterate over the contents. Some frameworks
provide ways to parallelize operations over arrays, either
through explicit syntactic support or through a parallel
architecture device like SIMD gates.
3) Crosstabulation: The crosstabulation program cal-
culates averages by category, where the category table
and value table share a primary key but are owned by
different parties. This tests framework expressiveness,
including input, output, and modiﬁcation of arrays and
conditionals on secret data. In some cases, we tested
whether user-deﬁned data types (structs) are supported.
We used a simple, brute-force algorithm, and typically
returned a list of sums by category (rather than averages).
C. Functionality
We assess the expressive ability of the high-level
language used to deﬁne secure functions. These criteria
are summarized in Table II.
1) Data Types: A fully-supported data type must
have both public and secret forms, and the language
should allow input and output of the type. These include
Booleans, signed or unsigned Fixed-length Integers, and
more complicated numerical types, such as Arbitrary-
length Integers and Floating- or ﬁxed-point numbers.
Although libraries for these types can be built using
ﬁxed-length integer types, we only mark them supported
if they are available by default. Combination types
include Arrays and Dynamic Arrays, where the latter
has a size not known at compile time, as well as Structs,
user-deﬁned types that can hold other data types as sub-
ﬁelds. These complex types are marked supported if they
can contain secure data.
2) Operators: Supported operators can be applied
to secret data types to get a secret result. We con-
sider Logical operators on Booleans and Comparisons
(equality and inequalities) between integers. We group
Addition and subtraction as one category, and Multipli-
cation and Division separately. We consider two bit-level
operations: Bit-shifts on ﬁxed-length integers and Bitwise
operators.
3) Grammar: Conditionals on a secret Boolean con-
dition can be implemented either with if-statement syn-
tax or a multiplexer operator, though we require an ex-
plicit language construct. We consider Array Access with
a public index and the harder problem of array access
with a Private Index. The latter can be implemented as
a linear-time multiplexer (Mux), native ORAM support
(ORAM) or a library for ORAM (Lib).
D. Implementation Criteria
In this section we deﬁne architectural and crypto-
graphic criteria, summarized in Table III. We note the
main Development Language for each framework. Gar-
bled circuit protocols can signiﬁcantly improve perfor-
mance by using AES-NI, an extension to the x86 instruc-
tion set that speeds up AES encryption and decryption.
1) Architecture: We deﬁne three broad architecture
categories. Independent frameworks develop novel lan-
guages and compilers: from limited, domain-speciﬁc
languages that interface with existing general-purpose
1226
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:10 UTC from IEEE Xplore.  Restrictions apply. 
Architecture
Model
AES-NI Independent
Extension
Arithmetic
Boolean
Library
I/O
format
output
input
output
On-the-ﬂy
Arbitrary
Different
Multiple
Array
(cid:4)
(cid:4)
(cid:3)
(cid:4)
-
(cid:4)
-
-
-