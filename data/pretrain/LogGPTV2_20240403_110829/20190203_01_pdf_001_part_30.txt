src_db_name | mmrnode_a
src_rrep_sync_id | 2
target_db_host | 192.168.2.22
target_db_port | 5444
target_db_name | mmrnode_b
target_rrep_sync_id | 0
notes | ERROR: duplicate key value violates unique constraint "dept_pk"
| Detail: Key (deptno)=(50) already exists.
-[ RECORD 2 ]-------+----------------------------------------------------------------
conflict_type | II
table_name | dept
pk_value | deptno=50
src_db_host | 192.168.2.22
src_db_port | 5444
src_db_name | mmrnode_b
src_rrep_sync_id | 1
target_db_host | 192.168.2.22
target_db_port | 5444
target_db_name | mmrnode_a
target_rrep_sync_id | 0
notes | ERROR: duplicate key value violates unique constraint "dept_pk"
| Detail: Key (deptno)=(50) already exists.
The following sections describe the application of different methods to resolve this
conflict.
6.6.9.4 Manual Publication Table Correction
The first step required in all manual conflict resolutions is to ensure all publication tables
are consistent across all master nodes – that is, all corresponding tables have the same
rows with the same column values.
Once this state is achieved, you can then reapply transactions that may have failed to
replicate successfully.
In the preceding example, the inconsistencies are the following:
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 325
EDB Postgres Replication Server User’s Guide
 Master nodes mmrnode_a and mmrnode_b each contain a row with primary key
value 50, but the other column values in the row are different.
 Master node mmrnode_c does not have a row with primary key value 50.
Assuming that the correct state of the dept table should be the one in mmrnode_b, the
following options are available to correct the state of all master nodes:
 Manually correct the dept table in mmrnode_a and mmrnode_c. That is, update
the row in mmrnode_a so it has the correct values, and insert the missing row in
mmrnode_c. The dept table on all nodes is now consistent and up-to-date.
 Manually delete the row with primary key value 50 from the table on both
mmrnode_a and mmrnode_b. This brings the dept table on all master nodes
back to a prior, consistent state. Then, with the multi-master replication system
running, perform the insert transaction again using the correct column values on
any one of the master nodes.
 Manually delete the incorrect row with primary key value 50 from the table on
mmrnode_a. Leave the correct row in the table in mmrnode_b. This simulates the
state where the correct transaction was run on mmrnode_b, is recorded in the
shadow table, but has not yet been replicated, and the incorrect transaction was
never run on mmrnode_a. Update the shadow table entry in mmrnode_a to
indicate that it is discarded and to ensure it is not included in any future
synchronizations. Update the metadata for the shadow table entry in mmrnode_b
to force its inclusion in the next synchronization. Perform a synchronization
replication so the accepted shadow table entry in mmrnode_b is replicated to
mmrnode_a and mmrnode_c.
After the publication table rows are corrected, update the appropriate control schema
table in the publication database currently designated as the controller database to
indicate that the conflict has been resolved.
Each of the methods outlined in the preceding bullet points are described in more detail
in the following sections. (The method described by the third bullet point is illustrated
using a slightly more complex example on the emp table.)
The method outlined by the first bullet point is accomplished as follows.
Step 1: Manually correct the rows in the publication tables with
session_replication_role set to replica.
On mmrnode_a, correct the erroneous row:
mmrnode_a=# SHOW session_replication_role;
session_replication_role
--------------------------
replica
(1 row)
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 326
EDB Postgres Replication Server User’s Guide
mmrnode_a=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+----------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | FINANCE | CHICAGO
(5 rows)
mmrnode_a=# UPDATE dept SET dname = 'MARKETING', loc = 'LOS ANGELES' WHERE
deptno = 50;
UPDATE 1
mmrnode_a=# SELECT * FROM dept ORDER BY deptno;
deptno | dname | loc
--------+------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | MARKETING | LOS ANGELES
(5 rows)
On mmrnode_c, insert the missing row:
mmrnode_c=# SHOW session_replication_role;
session_replication_role
--------------------------
replica
(1 row)
mmrnode_c=# INSERT INTO dept VALUES (50, 'MARKETING', 'LOS ANGELES');
INSERT 0 1
mmrnode_c=# SELECT * FROM dept ORDER BY deptno;
deptno | dname | loc
--------+------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | MARKETING | LOS ANGELES
(5 rows)
The dept table on mmrnode_a and mmrnode_c now match the content of the table on
mmrnode_b:
mmrnode_b=# SELECT * FROM dept ORDER BY deptno;
deptno | dname | loc
--------+------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | MARKETING | LOS ANGELES
(5 rows)
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 327
EDB Postgres Replication Server User’s Guide
Step 2: Update the shadow table entries for the conflicting transactions in the master
nodes to indicate that the conflict has been resolved.
In each master node where a transaction occurred that is involved in the conflict, inspect
the shadow table for the publication table in question.
Shadow tables are located in each master node in schema _edb_replicator_pub.
Shadow tables follow the naming convention rrst_schema_table where schema is
the name of the schema containing the publication table and table is the name of the
publication table.
Note the following points regarding shadow tables:
 A row in a shadow table corresponds to an INSERT, UPDATE, or DELETE
statement that is applied to the corresponding publication tables in the other
master nodes. A shadow table row does not necessarily correspond to the SQL
statement issued by the user application. For example, a SQL statement issued by
a user application that includes a WHERE clause using a range such as greater than
or less than, results in multiple, individual entries in the shadow table for each
individual row in the result set of the application’s SQL statement.
 The primary key of a shadow table is a program generated, positive integer in
column rrep_sync_id. The rrep_sync_id values are unique amongst all
shadow tables within a given master node. Therefore, the rrep_sync_id values
for conflicting transactions may or may not have the same value across master
nodes as this depends upon how many prior transactions were recorded in the
shadow tables of each master node.
 A shadow table entry for a transaction involved in a conflict that has not yet been
resolved contains a value of P (pending) in column
rrep_tx_conflict_status. If a transaction is not involved in a conflict, this
column is set to null. (The vast majority of shadow table entries should have null
in this column.) If a transaction was involved in a conflict that was resolved
automatically by the publication server, and this transaction was accepted as being
correct, this column contains C (complete/accepted). If a transaction was involved
in a conflict that was resolved automatically, and this transaction was deemed
incorrect, this column contains D (discarded).
To find the shadow table entries involved in a conflict, use the Conflict History tab or
SQL query as described in Section 6.6.9.1 and shown by the following output:
-[ RECORD 1 ]-------+----------------------------------------------------------------
conflict_type | II
table_name | dept
pk_value | deptno=50
src_db_host | 192.168.2.22
src_db_port | 5444
src_db_name | mmrnode_a
src_rrep_sync_id | 2
target_db_host | 192.168.2.22
target_db_port | 5444
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 328
EDB Postgres Replication Server User’s Guide
target_db_name | mmrnode_b
target_rrep_sync_id | 0
notes | ERROR: duplicate key value violates unique constraint "dept_pk"
| Detail: Key (deptno)=(50) already exists.
-[ RECORD 2 ]-------+----------------------------------------------------------------
conflict_type | II
table_name | dept
pk_value | deptno=50
src_db_host | 192.168.2.22
src_db_port | 5444
src_db_name | mmrnode_b
src_rrep_sync_id | 1
target_db_host | 192.168.2.22
target_db_port | 5444
target_db_name | mmrnode_a
target_rrep_sync_id | 0
notes | ERROR: duplicate key value violates unique constraint "dept_pk"
| Detail: Key (deptno)=(50) already exists.
You can then query the shadow table in the desired master node on its rrep_sync_id
value.
The following query is performed on the shadow table for the dept table in mmrnode_a
on rrep_sync_id value 2 obtained from field src_rrep_sync_id of RECORD 1 in
the preceding output.
mmrnode_a=# SELECT * FROM _edb_replicator_pub.rrst_edb_dept WHERE
rrep_sync_id = 2;
-[ RECORD 1 ]-----------+--------------------------
rrep_sync_id | 2
rrep_common_id |
rrep_operation_type | I
rrep_tx_timestamp | 25-AUG-15 11:39:35.590648
deptno | 50
dname | FINANCE
loc | CHICAGO
rrep_old_deptno |
rrep_old_dname |
rrep_old_loc |
rrep_tx_conflict_status | P
A similar query can locate the pending shadow table entry in mmrnode_b by querying on
the key value obtained from field src_rep_sync_id: of RECORD 2:
mmrnode_b=# SELECT * FROM _edb_replicator_pub.rrst_edb_dept WHERE
rrep_sync_id = 1;
-[ RECORD 1 ]-----------+--------------------------
rrep_sync_id | 1
rrep_common_id |
rrep_operation_type | I
rrep_tx_timestamp | 25-AUG-15 11:39:57.980469
deptno | 50
dname | MARKETING
loc | LOS ANGELES
rrep_old_deptno |
rrep_old_dname |
rrep_old_loc |
rrep_tx_conflict_status | P
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 329
EDB Postgres Replication Server User’s Guide
Note: To be certain no pending transactions are overlooked, you should examine the
shadow tables in all master nodes that may have been involved in the conflict and search
for entries where rrep_tx_conflict_status is set to P.
The following shows the rrep_tx_conflict_status column marked P (pending) in
the Postgres Enterprise Manager Client.
Figure 6-35 - Shadow table entry with pending conflict
Modify column rrep_tx_conflict_status by changing the value to D (discarded) to
show that the pending conflict has been resolved. A value of D also ensures that the
shadow table entry will not be replicated during any future synchronization replications.
Make this change to the shadow tables in both mmrnode_a and mmrnode_b.
Figure 6-36 - Discarded shadow table entry
Be sure to qualify the row with the correct rrep_sync_id value if you perform the
update using a SQL statement such as in the following:
UPDATE _edb_replicator_pub.rrst_edb_dept SET rrep_tx_conflict_status = 'D'
WHERE rrep_sync_id = 1;
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 330
EDB Postgres Replication Server User’s Guide
There is no shadow table entry in mmrnode_c, since an insert transaction was not
performed in that master node by the application.
Step 3: In the control schema of the publication database currently designated as the
controller database, modify the entries in the xdb_conflicts table to indicate the
conflict has been resolved. Table xdb_conflicts is located in schema
_edb_replicator_pub.
Note: The entries in table xdb_conflicts only affect the data that appears in the
Conflict History tab and the SQL query described in Section 6.6.9.1. Changing entries in
xdb_conflicts has no effect on future replication operations, but provides a way to
keep a record of how past conflicts were resolved.
Note the following points regarding the xdb_conflicts table:
 A row in the xdb_conflicts table appears as an entry in the Conflict History
tab.
 The primary key of the xdb_conflicts table is comprised of columns
src_db_id, target_db_id, src_rrep_sync_id, and
target_rrep_sync_id. Column src_db_id contains a unique identifier for
the master node in which a transaction occurred that results in a conflict when
replicated to the master node identified by target_db_id.
src_rrep_sync_id is the shadow table identifier of the transaction on the
source master node involved in the conflict while target_rrep_sync_id is the
shadow table identifier of the transaction on the target master node that is
involved in the conflict. Note: For uniqueness (insert/insert) conflicts, the
target_rrep_sync_id value is always set to 0. For a given uniqueness
conflict, there are two entries in the xdb_conflicts table. The
src_rrep_sync_id value in each of the two entries corresponds to the shadow
table identifiers – one for the shadow table identifier associated with the source
master node, the other for the shadow table identifier associated with the target
master node.
 Table xdb_pub_database in the control schema associates the database
identifiers src_db_id and target_db_id with the master node attributes such
as the database name, IP address, and port.
 Column table_id is the identifier of the publication table on which the conflict
occurred. Association of the table_id value with the publication table attributes
such as its name, schema, and shadow table is found in each master node in
_edb_replicator_pub.rrep_tables.
 For uniqueness (insert/insert) conflicts only, column pk_value contains text
indicating the primary key value that resulted in the conflict. The text is formatted
as column_name=value. If the primary key is composed of two or more
columns, each column and value pair is separated by the keyword AND such as
column_1=value_1 AND column_2=value_2. This provides the primary key
of the row in the publication table designated by table_id that resulted in the
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 331
EDB Postgres Replication Server User’s Guide
conflict. Note: Only uniqueness (insert/insert) conflicts contain the
column_name=value text in the pk_value column. The pk_value column is
null for all other conflict types (that is, update/update, delete/update,
update/delete, and delete/delete conflicts).
 Column resolution_status indicates the status of the conflict. Possible
values are P (pending) or C (completed – the conflict has been resolved). This
status appears in the Resolution Status column of the Conflict History tab.
 Column win_db_id can be used to record the database identifier of the master
node that contains the “winning” (accepted) transaction. This information appears
in the Winning DB column of the Conflict History tab.
 Column win_rrep_sync_id can be used to record the shadow table identifier of
the winning transaction.
The following shows the Conflict History tab prior to updating the xdb_conflicts
table.
Figure 6-37 – Pending uniqueness conflict
The conflict entry for synchronization from mmrnode_a to mmrnode_b can be located in
xdb_conflicts with the following query for this example:
mmrnode_a=# SELECT * FROM _edb_replicator_pub.xdb_conflicts
mmrnode_a-# WHERE src_db_id = 1
mmrnode_a-# AND target_db_id = 4
mmrnode_a-# AND src_rrep_sync_id = 2
mmrnode_a-# AND target_rrep_sync_id = 0;
-[ RECORD 1 ]-------+----------------------------------------------------------------
src_db_id | 1
target_db_id | 4
src_rrep_sync_id | 2
target_rrep_sync_id | 0
table_id | 31
conflict_time | 25-AUG-15 10:40:23.685738
resolution_status | P
resolution_strategy |
resolution_time |
alert_status |
conflict_type | II
win_db_id | 0
win_rrep_sync_id | 0