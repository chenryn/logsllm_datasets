### Execution and Self-Checksum Security Measures

- **Self-Checksum Destruction**: During execution, a part of the self-checksum will be destroyed.
- **Hardware Breakpoint Prevention**: Place PRN into DR7 and read it to prevent cost-free use of hardware breakpoints.
- **Stack Address Verification**: Read the parent and grandparent return addresses from the stack. This ensures that after the self-check, the code returns to legitimate code, which is crucial for Time-of-Check to Time-of-Use (TOCTOU) security.
- **Control Flow Integrity**: Implement additional control flow integrity by performing a mini-checksum over third-party modules that the system depends on, directly or indirectly. For example, if the system depends on `ntoskrnl.exe` and `ntoskrnl.exe` depends on `hal.dll`, then parts of both modules are measured.

---

### Considered but Rejected Measures

- **Polymorphic Self-Check Code**: This was rejected due to increased runtime caused by cache misses and branch mispredictions. Additionally, an attacker can implement a non-polymorphic forgery that runs faster without cache misses.
- **Memory Hierarchy Exploitation**: Filling the instruction and data cache to capacity was also rejected. Unless there is a sufficient unique order of inclusion in the self-checksum block variants, an attacker can avoid cache spillage by maintaining a single copy of each unique block and tracking the execution order.

---

### New Results and Achievements

- **Countermeasures**: Successfully countered previous attacks (e.g., Castelluccia et al.) and new ones. Implementation lessons and design decisions will be documented in a future journal paper.
- **NIC Independence**: Demonstrated that the system can work without being specific to a particular Network Interface Card (NIC). The Pioneer system was integrated into an open-source NIC driver.
- **Network Scalability**: Showed that the system can operate over 10 network links in a production enterprise LAN, whereas Pioneer only claimed it worked over the same Ethernet segment.
- **Performance Benchmarking**: Conducted benchmarks to measure the impact on network throughput, filesystem read/write performance, and CPU benchmarking applications.
- **TPM-Based Timing Attestation**: Implemented the first TPM-based timing attestation, proposed by Schellekens et al. but not previously implemented.
- **TOCTOU Attack Definition**: Defined the relationship between TOCTOU and existing and new attacks, facilitating better research on defenses.

---

### Network Topology

- **Icons Source**: [Cisco Icons](http://nag.ru/goodies/manuals/Cisco-icons.ppt)
- **Topology Diagram**:
  - **Server**
  - **Switches**
  - **Clients** with varying link counts (1, 2, 8, 10, 3)
  - **Routers** (Core, Building 1, Building 2)
  - **Link Types**: Copper for client or server connections, Fiber for all other links.

---

### Detection of Reference Attacker

- **Virginia Campus Hop Count**:
  - **Measurement RTT (us)**: 109000, 110000, 111000, 112000, 113000, 114000, 115000, 116000
  - **Measurement Number**: 0, 100, 200, 300, 400
  - **Attack Status**: Absent, Present
  - **Expected Timing Bounds**: Upper and Lower bounds of expected timing.

---

### Single Bound for Network Measurements

- **Measurement RTT (us)**: 110000, 110500, 111000, 111500, 112000, 112500, 113000, 113500
- **Measurement Number**: 0, 50, 100, 150, 200
- **Host Configurations**: Various host configurations with different link counts (1, 2, 3, 8, 10).
- **Bounds**: Upper and Lower bounds for measurement times.

---

### Trusted Platform Module (TPM) Timing Implementation

- **Server-Client Interaction**:
  - **Nonce Generation**: Nonce = 0xf005ba11
  - **Self-Check**: Nonce = signature
  - **Tickstamp Requests**:
    - Request Tickstamp(0xf005ba11) → Signed Tickstamp 1
    - Request Tickstamp(Self-Checksum) → Signed Tickstamp 2
  - **Time Difference (Δt)**: Measured time difference.

---

### TPM Implementation – Single Host

- **Timing Data**:
  - **Values**: 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800
  - **Measurements**: 1, 51, 101

---

© 2012 The MITRE Corporation. All rights reserved.