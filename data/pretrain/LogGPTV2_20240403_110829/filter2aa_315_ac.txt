  execu2on,	
  part	
  of	
  the	
  self-­‐checksum	
  will	
  be	
  destroyed	
•  Put	
  PRN	
  into	
  DR7	
  and	
  read	
  it	
  to	
  prevent	
  cost-­‐free	
  use	
  of	
  hardware	
breakpoints	
•  Read	
  parent	
  and	
  grandparent	
  return	
  addresses	
  oﬀ	
  the	
  stack,	
otherwise	
  when	
  the	
  self-­‐check	
  is	
  done	
  it	
  will	
  return	
  to	
  aGacker	
code	
  (important	
  for	
  TOCTOU	
  as	
  described	
  in	
  a	
  liGle	
  bit)	
•  Addi2onal	
  control	
  ﬂow	
  integrity	
  comes	
  from	
  doing	
  a	
  mini-­‐
checksum	
  over	
  3rd	
  party	
  modules	
  which	
  we	
  depend	
  on,	
  or	
  that	
  we	
indirectly	
  depend	
  on.	
  So	
  if	
  we	
  depend	
  on	
  ntoskrnl.exe	
  and	
  it	
depends	
  on	
  hal.dll,	
  then	
  we	
  measure	
  parts	
  of	
  both.	
35	
© 2012 The MITRE Corporation. All rights reserved. 
Some	
  stuﬀ	
  that's	
  been	
  suggested	
  that	
  we	
tried	
  but	
  ul2mately	
  backed	
  away	
  from	
•  Polymorphic	
  self-­‐check	
  code	
–  Because	
  due	
  to	
  the	
  cache	
  misses	
  and	
  branch	
  mispredic2ons,	
this	
  increases	
  the	
  absolute	
  run2me	
  of	
  the	
  code.	
  Also,	
  the	
aGacker	
  can	
  implement	
  a	
  non-­‐polymorphic	
  forgery	
  which	
  is	
  way	
faster	
  thanks	
  to	
  no	
  cache	
  misses	
  (we	
  implemented	
  such	
  an	
aGack)	
•  Exploi2ng	
  the	
  memory	
  hierarchy	
  by	
  ﬁlling	
  instruc2on	
  and	
data	
  cache	
  to	
  capacity	
–  Because	
  unless	
  you	
  have	
  suﬃcient	
  unique	
  order	
  of	
  inclusion	
  into	
self-­‐checksum	
  block	
  variants	
  to	
  ﬁll	
  the	
  cache,	
  the	
  aGacker	
  can	
avoid	
  cache	
  spillage	
  by	
  just	
  making	
  his	
  aGack	
  have	
  a	
  1x	
  copy	
  of	
each	
  of	
  your	
  unique	
  blocks,	
  and	
  then	
  keeping	
  track	
  of	
  the	
  order	
that	
  the	
  blocks	
  would	
  execute	
  in	
  (we	
  implemented	
  such	
  an	
aGack)	
36	
© 2012 The MITRE Corporation. All rights reserved. 
So	
  what	
  are	
  the	
  new	
  results?	
•  Countered	
  some	
  previous	
  aGacks	
  (Castelluccia	
  et	
  al.)	
  and	
  some	
  new	
ones	
  we	
  came	
  up	
  with	
–  Implementa2on	
  lessons	
  learned	
  and	
  design	
  decisions	
  will	
  be	
documented	
  in	
  a	
  future	
  journal	
  paper.	
•  Demonstrated	
  that	
  the	
  system	
  can	
  work	
  without	
  being	
  NIC-­‐speciﬁc	
(Pioneer	
  was	
  built	
  into	
  an	
  open	
  source	
  NIC	
  driver.)	
•  Showed	
  that	
  it	
  can	
  work	
  over	
  10	
  network	
  links	
  of	
  a	
  produc2on	
enterprise	
  LAN	
  (Pioneer	
  said	
  it	
  worked	
  over	
  "same	
  ethernet	
segment")	
•  Benchmarked	
  the	
  aGesta2on	
  to	
  see	
  the	
  eﬀects	
  on	
  network	
throughput,	
  ﬁlesystem	
  read/write	
  performance,	
  and	
  CPU	
benchmarking	
  applica2ons	
•  Made	
  the	
  ﬁrst	
  implementa2on	
  for	
  TPM-­‐based	
  2ming-­‐based	
aGesta2on	
  (Schellekens	
  et	
  al.	
  proposed	
  it	
  but	
  didn't	
  implement	
anything.)	
•  Deﬁned	
  the	
  rela2on	
  of	
  TOCTOU	
  to	
  exis2ng	
  and	
  new	
  aGacks	
  so	
defenses	
  can	
  be	
  beGer	
  researched.	
37	
© 2012 The MITRE Corporation. All rights reserved. 
Icons	
  from	
  hGp://nag.ru/goodies/manuals/Cisco-­‐icons.ppt	
Network	
  Topology	
Server	
Switch	
Client	
1	
  link	
Client	
2	
  links	
Client	
8	
  links	
Client	
10	
  links	
Client	
3	
  links	
Switch	
Switch	
Switch	
Switch	
Router	
(Core)	
Switch	
Router	
(building	
  2)	
Switch	
Router	
(building1)	
Links	
  to	
  client	
  or	
  server	
  are	
  copper.	
All	
  other	
  links	
  are	
  ﬁber.	
38	
© 2012 The MITRE Corporation. All rights reserved. 
Can	
  we	
  detect	
  the	
  reference	
  aGacker	
  over	
  the	
maximum	
  hop	
  count	
  on	
  our	
  Virginia	
  campus?	
 109000
 110000
 111000
 112000
 113000
 114000
 115000
 116000
 0
 100
 200
 300
 400
Measurement RTT (us)
Measurement number
Attack
Absent
Attack
Absent
Attack
Present
39	
© 2012 The MITRE Corporation. All rights reserved. 
Can	
  we	
  detect	
  the	
  reference	
  aGacker	
  over	
  the	
maximum	
  hop	
  count	
  on	
  our	
  Virginia	
  campus?	
 109000
 110000
 111000
 112000
 113000
 114000
 115000
 116000
 0
 100
 200
 300
 400
Measurement RTT (us)
Measurement number
Attack
Absent
Attack
Absent
Attack
Present
Upper	
  bound	
  of	
  expected	
  2ming	
Lower	
  bound	
  of	
  expected	
  2ming	
40	
© 2012 The MITRE Corporation. All rights reserved. 
Can	
  we	
  detect	
  the	
  reference	
  aGacker	
  over	
  the	
maximum	
  hop	
  count	
  on	
  our	
  Virginia	
  campus?	
 109000
 110000
 111000
 112000
 113000
 114000
 115000
 116000
 0
 100
 200
 300
 400
Measurement RTT (us)
Measurement number
Attack
Absent
Attack
Absent
Attack
Present
What	
  are	
  those?	
41	
© 2012 The MITRE Corporation. All rights reserved. 
Can	
  we	
  detect	
  the	
  reference	
  aGacker	
  over	
  the	
maximum	
  hop	
  count	
  on	
  our	
  Virginia	
  campus?	
 109000
 110000
 111000
 112000
 113000
 114000
 115000
 116000
 0
 100
 200
 300
 400
Measurement RTT (us)
Measurement number
Attack
Absent
Attack
Absent
Attack
Present
What	
  are	
  those?	
42	
© 2012 The MITRE Corporation. All rights reserved. 
Can	
  we	
  use	
  a	
  single	
  bound	
  for	
  measurement	
2mes	
  anywhere	
  on	
  our	
  network?	
 110000
 110500
 111000
 111500
 112000
 112500
 113000
 113500
 0
 50
 100
 150
 200
Measurement RTT (us)
Measurement number
Attack
Absent
Attack
Present
"host1_1link"
"host2_1link"
"host1_2links"
"host2_2links"
"host1_3links"
"host2_3links"
"host1_8links"
"host2_8links"
"host1_10links"
"host2_10links"
43	
© 2012 The MITRE Corporation. All rights reserved. 
Can	
  we	
  use	
  a	
  single	
  bound	
  for	
  measurement	
2mes	
  anywhere	
  on	
  our	
  network?	
 110000
 110500
 111000
 111500
 112000
 112500
 113000
 113500
 0
 50
 100
 150
 200
Measurement RTT (us)
Measurement number
Attack
Absent
Attack
Present
"host1_1link"
"host2_1link"
"host1_2links"
"host2_2links"
"host1_3links"
"host2_3links"
"host1_8links"
"host2_8links"
"host1_10links"
"host2_10links"
Upper	
  Bound	
Lower	
  Bound	
44	
© 2012 The MITRE Corporation. All rights reserved. 
Trusted	
  Plaƒorm	
  Module	
  (TPM)	
  Timing	
  Implementa2on	
Server	
Client	
TPM	
  Tickstamp	
Nonce	
  =	
  0xf005ba11	
Self-­‐Check	
  (nonce	
  =	
  signature)	
Signed	
  Tickstamp	
  1	
  &	
  2	
Self-­‐Checksum	
Nonce	
  =	
  0xf005ba11	
TPM	
Request	
  Tickstamp(0xf005ba11)	
Signed	
  Tickstamp	
  1	
Request	
  Tickstamp(Self-­‐Checksum)	
Signed	
  Tickstamp	
  2	
Time	
Δt	
45	
© 2012 The MITRE Corporation. All rights reserved. 
TPM	
  Implementa2on	
  –	
  Single	
  Host	
780	
782	
784	
786	
788	
790	
792	
794	
796	
798	
800	
1	
51	
101	