title:SerialDetector: Principled and Practical Exploration of Object Injection
Vulnerabilities for the Web
author:Mikhail Shcherbakov and
Musard Balliu
SerialDetector: Principled and Practical Exploration
of Object Injection Vulnerabilities for the Web
Mikhail Shcherbakov
KTH Royal Institute of Technology
PI:EMAIL
Musard Balliu
KTH Royal Institute of Technology
PI:EMAIL
Abstract—The last decade has seen a proliferation of code-
reuse attacks in the context of web applications. These at-
tacks stem from Object Injection Vulnerabilities (OIV) enabling
attacker-controlled data to abuse legitimate code fragments
within a web application’s codebase to execute a code chain
(gadget) that performs malicious computations, like remote code
execution, on attacker’s behalf. OIVs occur when untrusted data
is used to instantiate an object of attacker-controlled type with
attacker-chosen properties, thus triggering the execution of code
available but not necessarily used by the application. In the
web application domain, OIVs may arise during the process
of deserialization of client-side data, e.g., HTTP requests, when
reconstructing the object graph that is subsequently processed
by the backend applications on the server side.
This paper presents the ﬁrst systematic approach for de-
tecting and exploiting OIVs in .NET applications including the
framework and libraries. Our key insight is: The root cause of
OIVs is the untrusted information ﬂow from an application’s
public entry points (e.g., HTTP request handlers) to sensitive
methods that create objects of arbitrary types (e.g., reﬂection
APIs) to invoke methods (e.g., native/virtual methods) that trigger
the execution of a gadget. Drawing on this insight, we develop
and implement SerialDetector, a taint-based dataﬂow analysis
that discovers OIV patterns in .NET assemblies automatically.
We then use these patterns to match publicly available gadgets
and to automatically validate the feasibility of OIV attacks.
We demonstrate the effectiveness of our approach by an in-
depth evaluation of a complex production software such as the
Azure DevOps Server. We describe the key threat models and
report on several remote code execution vulnerabilities found by
SerialDetector, including three CVEs on Azure DevOps Server.
We also perform an in-breadth security analysis of recent publicly
available CVEs. Our results show that SerialDetector can detect
OIVs effectively and efﬁciently. We release our tool publicly to
support open science and encourage researchers and practitioners
explore the topic further.
I.
INTRODUCTION
The last decade has seen a proliferation of code-reuse
attacks in the context of web applications [9], [13], [17], [18],
[24], [28], [33]. The impact of these attacks can be devastating.
The recent attack that hit the credit reporting agency Equifax
exposed the personal information (credit card numbers, Social
Security numbers) of 143 million US consumers. As a result,
Network and Distributed Systems Security (NDSS) Symposium 2021
21-25  February  2021, Virtual 
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24550
www.ndss-symposium.org
the law ﬁrms ﬁled 23 class-action lawsuits, which would
make it the largest suit in US history. The breach rooted in
insecure deserialization in the Apache Struts framework within
a Java web application, which led to remote code execution
(RCE) on Equifax web servers. The attack exploited the XML
serialization of complex data objects into textual strings to
introduce malicious XML payloads into Struts servers during
the deserialization process [46]. These attacks motivate the
need for studying code-reuse vulnerabilities systematically.
Object Injection Vulnerabilities. In web applications,
Object Injection Vulnerabilities (OIV) occur when an attacker
can arbitrarily modify the properties of an object to abuse the
data and control ﬂow of the application. For example, OIVs
may arise during the deserialization of data from the client
side, e.g., HTTP requests, when reconstructing the object graph
that is subsequently processed by the backend applications on
the server side. Similarly to classical exploits such as return-
oriented programming (ROP) and jump-oriented programming
(JOP), which target memory corruption vulnerabilities [8],
[36], [45], OIVs enable attacker-controlled data to trigger the
execution of legitimate code fragments (gadgets) to perform
malicious computations on attacker’s behalf. The following
requirements are needed to exploit an OIV [32]: (i) the attacker
controls the type of the object to be instantiated, e.g., upon
deserialization; (ii) the reconstructed object calls methods in
the application’s scope; (iii) there exists a big enough gadget
space to ﬁnd types that the attacker can chain to get an RCE.
Existing works show that OIVs are present in mainstream
programming languages and platforms like Java [24], [33],
JavaScript [28], PHP [17], .NET [18], [32], and Android [34].
Challenges. Despite the high impact of OIV, efforts on
tackling their root cause have been unsatisfactory. A witness is
the fact that a decade after the discovery of these vulnerabilities
a comprehensive understanding of languages features at the
heart of OIVs has yet to emerge. One result is the ongoing
arms race between researchers discovering new attacks and
gadgets and vendors providing patches in an ad-hoc manner.
To date, the best efforts in discovering and exploiting OIVs
have been put forward by the practitioners’ community [17],
[18], [22], [32]. Except for a few recent works [13], [23],
[25], [28], [31], the problem remains largely unexplored in
the academic community. Most existing works address OIVs
within the general context of injection vulnerabilities, thus
lacking targeted techniques for detection and exploitation in
web applications [6], [9], [43], [47].
A principled investigation of OIVs in real-world applica-
tions requires analyzing not only the applications, but also
the underlying framework and libraries that these applications
build on. In fact, most of the known attacks stem from weak-
nesses in frameworks and libraries. This is challenging task
since production scale frameworks, e.g., the .NET Framework,
are complex entities with large codebases, intricate language
features, and lack of source code. Existing approaches rely
on static source code analysis of applications and ignore
frameworks and libraries. Moreover, they focus on a whitelist
of magic methods [13], [17],
the
application level, thus missing attacks that may be present in
unknown methods using the same features at the framework
level. Another key challenge is the lack of automation and
open source tools to investigate the feasibility of potential
attacks. While state-of-the-art countermeasures against OIVs
rely on blacklisting/whitelisting techniques [5], [10], [23], [25],
[27], [31], [39], [40], it is essential to develop tools that check
feasibility of attacks in a principled and practical manner.
i.e., vulnerable APIs at
Contributions. This work presents the ﬁrst systematic ap-
proach for detecting and exploiting OIVs in .NET applications,
including the .NET Framework and third-party libraries. Our
key observation is that the root cause of OIVs is the untrusted
information ﬂow from an applications’ entry points to sensitive
sinks that create objects of arbitrary types to invoke attack
triggers that initiate the execution of a gadget. Drawing on
this insight, we develop and implement SerialDetector [41], a
tool for detecting OIV patterns automatically and exploiting
these patterns based on publicly-available gadgets in a semi-
automated fashion. Following the line of work on static analy-
sis at bytecode level [4], [7], [15], [21], [47], [48], SerialDetec-
tor implements an efﬁcient and scalable inter-procedural taint-
based static analysis targeting .NET’s Common Intermediate
Language. At the heart of our approach lies a ﬁeld-sensitive
and type-sensitive data ﬂow analysis [42], [47] that we leverage
to analyze the relevant object-oriented features and detect
vulnerable patterns. We evaluate the feasibility of our approach
on 15 deserializers reporting on the efﬁciency and effectiveness
of SerialDetector in generating OIV patterns. We conduct
an in-depth security analysis of production software such as
the Azure DevOps Server and ﬁnd three RCE vulnerabilities.
To further evaluate SerialDetector, we perform an in-breadth
security analysis of recent .NET CVEs from public databases
and report on the effort to analyze and reproduce these exploits.
In summary, the paper offers the following contributions:
• We identify the root cause of Object Injection Vulnerabilities
and present a principled and practical approach to detect
such vulnerabilities in a framework-agnostic manner.
• We present the ﬁrst systematic approach for detecting and
exploiting OIVs in .NET applications including the frame-
work and libraries.
• We develop SerialDetector [41], a practical open source
tool implementing a scalable taint-based dataﬂow analysis
to discover OIV patterns, as well as leveraging publicly
available gadgets to exploit OIVs in real-world software.
• We perform an thorough evaluation of OIV patterns in .NET-
based deserialization libraries showing that SerialDetector
can ﬁnd vulnerable patterns with low burden on a security
analysis. We use these patterns in an in-breadth security
analysis of vulnerable applications to show that SerialDe-
tector can help uncovering OIVs effectively and efﬁciently.
• We carry out an in-depth security analysis of Azure DevOps
Server illuminating the different threat models. Drawing on
these threat models, we show SerialDetector in action to
identify and exploit highly-critical vulnerabilities leading to
remote code execution on the server.
II. TECHNICAL BACKGROUND
This section provides background information and illumi-
nates the core security issues with OIVs in .NET applications.
We identify the key ingredients in the lifecycle of an OIV,
distinguishing between application-level OIVs (Section II-A)
and infrastructure-level OIVs (Section II-B). Appendix A
provides a brief overview of the .NET Framework.
A. Application-level OIVs
Applications can be vulnerable to OIVs whenever untrusted
data instantiates an object of arbitrary type and subsequently
inﬂuences a chain of method calls resulting in the execution
of a dangerous operation. For an attack to be successful, the
following ingredients are required: (1) a public entry point
allowing the attacker to inject untrusted data; (2) a sensitive
method creating an object of attacker-controlled type; (3) a
gadget consisting of a chain of method calls that ultimately
execute a dangerous operation; (4) a malicious payload trig-
gering the execution of steps (1)-(3).
Consider a C# implementation of the classical Command
design pattern [20] for a smart home controller (Listing 1).
The controller implements the method CommandAction as
an entry point handling HTTP POST requests. Following the
design pattern, a developer creates an object of type name
dynamically using the method Activator.CreateInstance
of the .NET Framework. Subsequently,
the code calls the
virtual method Execute to execute the command speciﬁed in
the input parameter args, e.g., a Backup command that runs
a database backup. The main beneﬁt of this design pattern is
that a developer can deﬁne new commands without changing
the implementation of the method CommandAction. This can
be achieved by simply adding a new class that implements the
interface ICommand.
public class SmartHomeController : Controller {
[HttpPost]
public ActionResult CommandAction(string name, string
args) {
var t = Type.GetType(name);
var c = (ICommand) Activator.CreateInstance(t);
c.Execute(args);
return RedirectToAction("Index");
}}
public class Backup : ICommand {
public virtual void Execute(string parameters) {
DB.Backup(parameters);
}}
Listing 1: Implementation of Command pattern
Unfortunately, such ﬂexible design comes with security
issues. Consider the class OSCommand implementing the same
interface ICommand to run a process based on the data from
parameters (Listing 2). The method Execute splits the
2
input parameters to extract the actual OS command and its
arguments before the call to Process.Start.
public class OSCommand : ICommand {
public virtual void Execute(string parameters) {
var firstSpace = parameters.IndexOf(’ ’);
var command = parameters.Substring(0, firstSpace);
var args = parameters.Substring(firstSpace + 1);
Process.Start(command, args);
}}
Listing 2: Implementation of OSCommand
A developer might not even be aware of the existence of
OSCommand in the modules loaded by the application. An
attacker can use the class type OSCommand as a parameter
to the POST request
to create an OSCommand object and
execute malicious commands in the target OS. For example,
a payload in a POST request body with two parameters,
name = OSCommand and args = del /q * results in re-
mote code execution, deleting all ﬁles in the current directory.
tem-
plate: The
entry point
(CommandAction) to call a sensitive method creating an object
of attacker-controlled type (Activator.CreateInstance).
Subsequently, it uses the object to trigger the execution of a
gadget (method Execute of class OSCommand) via a malicious
payload. To detect such attacks, a comprehensive analysis
should consider all implementations of the method Execute
in classes implementing the ICommand interface.
the above-mentioned OIV ﬁts our
application exposes
Observe that
a public
B. Infrastructure-level OIVs
OIVs can be present at the level of the infrastructure that
supports applications running on the server side. For .NET
technologies, the infrastructure includes the .NET Framework
and libraries (see Appendix A). A prime example of OIVs at
the infrastructure layer is insecure deserialization. Deserializa-
tion is the process of recreating the original state of an object
from a stream of bytes that was produced during a reverse
process called serialization. In the web domain, serialization
can be used to convert an object from the client side to a stream
of bytes that can be transmitted over the network and used to
recreate the same object on the server side. To achieve this, the
deserializer may instantiate objects based on metadata from the
serialized stream. Thus, an attacker can create an object of an
arbitrary type by manipulating the metadata in the serialized
stream, which may cause the deserializer to execute dangerous
methods of the object.
We illustrate OIVs in insecure deserialization with a run-
ning example which we will discuss further in Section III. We
consider the YamlDotNet library that implements serialization
and deserialization of data in the YAML format. Listing 3
shows the simpliﬁed code fragment used by YamlDotNet to
deserialize data obtained via the parameter yaml. The method
Deserialize is a public entry point that may receive data
from untrusted sources like HTTP request parameters, cookies,
or ﬁles uploaded to a web application. The method parses
the input and calls the method DeserializeObject with
the root YAML node as input. A type cast ensures that the
3
created object has the expected type T. However, the type cast
is executed only after the creation of the object graph, hence
the system will still create objects based on the information
from YAML data with no restriction on the type.
public T Deserialize(string yaml) {
var rootNode = GetRootNode(yaml);
return (T) DeserializeObject(rootNode);
}
private object DeserializeObject(YamlNode node) {
var type = GetTypeFrom(node);
var result = Activator.CreateInstance(type);
foreach (var nestedNode in GetNestedNodes(node)) {
var value = DeserializeObject(nestedNode);
var property = GetPropertyOf(nestedNode);
property.SetValue(result, value);
}
return result;
}
Listing 3: Implementation of YAML deserializer
The method DeserializeObject creates an object
the type speciﬁed by the YAML node and sets its
of
ﬁelds’ properties recursively.
It uses a .NET Reﬂection
API to create object by a type deﬁned at runtime (via
Activator.CreateInstance) and executes a setter method
for each property (via PropertyInfo.SetValue). An at-
tacker can ﬁnd gadgets in the target system, i.e., the .NET
Framework and third-party libraries,
that allow executing
malicious actions in their property setter. For example, the
class ObjectDataProvider can be used as gadget for the
YamlDotNet deserializer and any other deserializer that allows
the execution of property setters for arbitrary classes.
public class ObjectDataProvider {
public object ObjectInstance {
set {
this._objectInstance = value;
this.Refresh();
}}
public void Refresh() {
/*...*/
obj = this._objectType.InvokeMember(
this.MethodName, /*...*/,
this._objectInstance, this._methodParameters);
}}
Listing 4: Implementation of class ObjectDataProvider
4
shows
a
of
the
Listing
snippet
class
ObjectDataProvider. The property setter of the object
ObjectInstance calls the method Refresh which in
turn invokes the method speciﬁed in MethodName using
the .NET Reﬂection API. Hence,
the attacker controls
the properties ObjectDataProvider.MethodName and
the