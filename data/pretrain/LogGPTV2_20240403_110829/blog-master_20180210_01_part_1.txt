## PostgreSQL VOPS 向量计算 + DBLINK异步并行 - 单实例 10亿 聚合计算跑进2秒   
### 作者                  
digoal                     
### 日期                  
2018-02-10                
### 标签                  
PostgreSQL , 聚合 , vops , 向量计算 , jit , llvm , dblink 异步调用 , parallel hash agg          
----                    
## 背景         
目前PostgreSQL已内置了并行计算的能力（透明和非透明）。  
结合列存+向量计算，PostgreSQL 统计分析能力到底能有多强？  
本文以vops（向量计算） + 并行计算为例，演示了单实例PostgreSQL 10亿数据量的count,avg,min,max,sum查询，耗时不到2秒。  
我们可以大胆的预见PostgreSQL支持列存和向量计算后，OLAP能力会有多强。  
相关文档：  
[《PostgreSQL 11 preview - parallel hash (含hash JOIN , hash agg等) 性能极大提升》](../201802/20180201_01.md)    
[《PostgreSQL dblink异步调用实现 并行hash分片JOIN - 含数据交、并、差 提速案例 - 含dblink VS pg 11 parallel hash join VS pg 11 智能分区JOIN》](../201802/20180201_02.md)    
[《PostgreSQL 向量化执行插件(瓦片式实现-vops) 10x提速OLAP》](../201702/20170225_01.md)    
## DEMO  
1、创建生成dblink连接的函数，重复创建不报错。  
```  
create or replace function conn(        
  name,   -- dblink名字        
  text    -- 连接串,URL        
) returns void as $$          
declare          
begin          
  perform dblink_connect($1, $2);         
  return;          
exception when others then          
  return;          
end;          
$$ language plpgsql strict;       
```  
2、生成10亿条数据，并按哈希分成56份（如果是多张表的话，请都按被JOIN的字段进行HASH分区）。  
为了测试方便，这里将数据按同样的RANGE分成了56份，实际上使用HASH效果一样。  
```  
create unlogged table a(id int, c1 int);    
do language plpgsql $$    
declare    
begin    
  for i in 0..55 loop    
    execute format('create unlogged table a%s (like a) inherits (a)', i);    
  end loop;    
end;    
$$;    
```  
生成10亿测试数据    
```  
do language plpgsql $$    
declare    
begin    
  for i in 0..55 loop           
    perform conn('link'||i,  'hostaddr=127.0.0.1 port=1921 user=postgres dbname=postgres');           
    perform dblink_send_query('link'||i, format('insert into a%s select generate_series(%s, %s), random()*99', i, i*17857142+1, (i+1)*17857142));          
  end loop;       
end;    
$$;    
```  
### 1、普通分片表10亿  
1、空间占用，34GB  
```  
postgres=# \dt+ a*  
                    List of relations  
 Schema | Name | Type  |  Owner   |  Size   | Description   
--------+------+-------+----------+---------+-------------  
 public | a    | table | postgres | 0 bytes |   
 public | a0   | table | postgres | 617 MB  |   
 public | a1   | table | postgres | 617 MB  |   
 public | a10  | table | postgres | 617 MB  |   
 public | a11  | table | postgres | 617 MB  |   
 public | a12  | table | postgres | 617 MB  |   
 public | a13  | table | postgres | 617 MB  |   
 public | a14  | table | postgres | 617 MB  |   
 public | a15  | table | postgres | 617 MB  |   
 public | a16  | table | postgres | 617 MB  |   
.............  
```  
2、已使用DBLINK异步调用，防止再度并行，设置参数  
```  
alter role postgres set max_parallel_workers_per_gather=0;  
alter role postgres set work_mem='2GB';  
```  
重新进入，参数生效  
3、分片并行group by聚合函数  
```  
create or replace function get_res() returns setof record as $$    
declare    
begin    
  for i in 0..55 loop           
    perform conn('link'||i,  'hostaddr=127.0.0.1 port=1921 user=postgres dbname=postgres');           
    perform 1 from dblink_get_result('link'||i) as t(c1 int, cnt int8, min int, max int, sum int8);          
    perform dblink_send_query('link'||i, format('select c1,count(*),min(id),max(id),sum(id) from a%s group by c1', i));          
  end loop;       
  for i in 0..55 loop    
    return query select * from dblink_get_result('link'||i) as t(c1 int, cnt int8, min int, max int, sum int8);    
  end loop;    
end;    
$$ language plpgsql strict;    
```  
4、查询耗时，9.6秒。  
```  
select c1, sum(cnt), sum(sum)/sum(cnt)::float8, min(min), max(max), sum(sum) from get_res() as t(c1 int, cnt int8, min int, max int, sum int8) group by c1;  
postgres=# select c1, sum(cnt), sum(sum)/sum(cnt)::float8, min(min), max(max), sum(sum) from get_res() as t(c1 int, cnt int8, min int, max int, sum int8) group by c1;  
 c1 |   sum    |     ?column?     | min |    max    |       sum          
----+----------+------------------+-----+-----------+------------------  
  7 | 10104223 |  500196670.66755 |  13 | 999999922 | 5054098704282486  
 41 | 10098079 | 500105983.312797 |  75 | 999999899 | 5050109727865311  
 72 | 10099035 | 499987853.746656 |   3 | 999999917 | 5049394834562362  
  2 | 10098707 | 500027259.278005 | 119 | 999999881 | 5049628783461600  
 29 | 10101931 | 500172863.741008 |  16 | 999999911 | 5052711757584067  
 71 | 10099125 | 500129933.363706 |  51 | 999999877 | 5050874713281733  
  6 | 10104713 | 500020892.341227 |  20 | 999999943 | 5052567611111995  
 74 | 10098824 | 499966081.890066 | 170 | 999999890 | 5049069466977368  
 38 | 10103601 | 499961610.602928 |  89 | 999999949 | 5051412628849349  
 88 | 10103668 | 499850251.056789 |  64 | 999999780 | 5050320986394444  
 84 | 10105345 |  500042003.07277 | 271 | 999999895 | 5053096955541396  
 68 | 10098999 |   499977042.1773 |  59 | 999999857 | 5049267648971511  
 55 | 10103707 | 499960231.761415 |  45 | 999999850 | 5051451693369436  
 64 | 10102942 | 500113184.404115 |  47 | 999999693 | 5052614495470081  
 24 | 10099982 |  499936812.84724 | 190 | 999999901 | 5049352810894492  
  9 | 10104341 | 499996733.660471 |  23 | 999999915 | 5052137495791580  
 63 | 10102023 | 499895229.112864 | 353 | 999999910 | 5049953102088419  
 98 | 10097327 | 499944814.066904 |  22 | 999999919 | 5048106269587731  
 59 | 10099747 | 499892322.509487 |   2 | 999999808 | 5048785984588223  
 78 | 10107866 | 500012506.299485 |  69 | 999999740 | 5054059411999348  
 18 | 10101977 | 499926956.667668 |   4 | 999999897 | 5050250617936782  
 90 | 10096744 | 500199293.810021 |  43 | 999999875 | 5050384218580567  
 42 | 10101533 | 500126553.670129 |  12 | 999999865 | 5052044886075076  
 10 | 10095854 |  500035390.09691 |  17 | 999999719 | 5048284293251445  
 79 | 10098900 | 499957103.416255 | 114 | 999999846 | 5049016791690421  
 12 | 10105025 | 499832509.132034 | 109 | 999999799 | 5050820000591935  
 32 | 10099491 | 500129108.718979 |  84 | 999999914 | 5051049432345352  
 81 | 10106622 | 499963749.199852 | 229 | 999999944 | 5052944626865710  
 34 | 10099359 | 500111032.921868 |  52 | 999999836 | 5050800861338764  
 85 | 10103461 | 499947692.923157 |  18 | 999999904 | 5051202017489091  
 37 | 10099584 | 500057275.745026 | 104 | 999999849 | 5050370461198054  
 69 | 10097014 | 500143184.435491 |  91 | 999999720 | 5049952735249734  
 52 | 10101573 | 500040171.388144 | 355 | 999999932 | 5051192294209851  
 76 | 10101689 | 499896977.810699 | 438 | 999999843 | 5049803801883577  
 35 | 10099622 | 500114054.898034 |  44 | 999999747 | 5050962911357394  
 65 | 10103111 |  499851261.81228 |  48 | 999999726 | 5050052781579531  
 31 | 10099277 | 499845188.908577 | 112 | 999999838 | 5048075019905046  
 51 | 10099397 | 499984737.203741 |  65 | 999999933 | 5049544354961246  
 57 | 10103823 | 500008680.942373 | 100 | 999999925 | 5051999210705205  
 19 | 10102592 | 500036435.174349 |  81 | 999999939 | 5051664089700899  
 33 | 10096464 | 500058135.753455 |  66 | 999999773 | 5048818965541870  
  0 |  5048622 |  500110433.47565 | 263 | 999999912 | 2524868536874701  
 50 | 10099019 | 500071716.158314 | 177 | 999999894 | 5050233762845416  
 89 | 10102886 | 499906895.352583 |  21 | 999999941 | 5050502374361080  
 66 | 10100455 | 500019718.104865 |  11 | 999999889 | 5050426661830877  
 17 | 10099749 | 500020536.906571 | 125 | 999999900 | 5050081917601604  
 14 | 10097995 | 499872474.436678 |  50 | 999999887 | 5047709747499202  
 87 | 10100597 | 499967794.215203 |  14 | 999999907 | 5049973202346696  
 67 | 10105426 | 500125756.387578 | 245 | 999999866 | 5053983821868692  
 96 | 10099064 | 499905578.187197 | 243 | 999999892 | 5048578428069509  
 61 | 10100503 | 500007920.183475 |  28 | 999999903 | 5050331497836948  
  3 | 10101198 | 499940146.381583 |  30 | 999999883 | 5049994406749350  
 39 | 10098880 | 500243255.820608 |  32 | 999999920 | 5051896611341620  
 11 | 10101799 | 500096301.902747 | 129 | 999999916 | 5051872322464871  