# HoneyIM: Fast Detection and Suppression of Instant Messaging Malware in Enterprise-Like Networks

## Authors
Mengjun Xie, Zhenyu Wu, Haining Wang  
The College of William and Mary  
{mjxie, adamwu, hnw}@cs.wm.edu

## Abstract
Instant messaging (IM) has become a popular vector for malware attacks due to its widespread use. Unlike other types of malware, IM malware can easily find and infect new victims by exploiting the current victim's contact list and employing social engineering tactics. This makes the spread of IM malware particularly challenging to detect and suppress using conventional methods. Previous solutions have been ineffective in enterprise-like network environments, primarily due to high false positive rates and the requirement that the IM server be within the protected network.

In this paper, we introduce HoneyIM, a novel mechanism for detecting and suppressing IM malware in enterprise-like networks. HoneyIM leverages the concept of honeypots, using decoy accounts to trap IM malware based on its spreading characteristics. This approach ensures near-zero false positives in detection and enables effective blocking across the network. Additionally, HoneyIM provides real-time attack information to network administrators, facilitating quick system quarantine and recovery. The core design of HoneyIM is versatile and can be applied to both enterprise and public IM services.

We built a prototype of HoneyIM using the open-source IM client Pidgin and the client honeypot Capture. Our evaluation through simulations and real experiments demonstrates that HoneyIM effectively protects against IM malware in enterprise-like networks.

## 1. Introduction
Instant Messaging (IM) has rapidly become an integral part of both personal and professional communication. It is estimated that the number of enterprise IM users will reach 78 million by the end of 2008 [9]. However, the large user base and the immediacy of communication also make IM an attractive target for malware. By exploiting IM features and social engineering, IM malware can spread quickly and stealthily, posing significant security threats to both home users and organizations that allow IM in the workplace.

IM malware, as studied in this paper, refers to any malicious code that spreads through Internet-based IM networks such as Windows Messenger (MSN) and AOL Instant Messenger (AIM). These networks have dedicated servers for account management and message relay. Examples of such malware include Bropia [7] and Opanki [8]. While most known IM malware targets popular public IM networks, enterprise IM systems [6, 14] are also vulnerable, as they often provide connectivity and interoperability with public IM services. In 2005, a variant of the Kelvir worm forced Reuters to shut down its IM service [4].

File transfers and URL-embedded messages are the primary vectors for IM malware. After compromising an IM client, the malware propagates by either sending a malicious file or a text message containing a malicious URL to the online users in the victim's contact list. Once these contacts click on the file or URL, the malware is executed, and the propagation continues at an exponentially increasing rate.

Despite the rising threat of IM malware, especially zero-day variants, network administrators lack effective solutions to protect enterprise-like networks such as campus and corporate networks. Traditional protections like firewalls and anti-virus products are insufficient due to the unique propagation characteristics of IM malware. Many IM protocols can bypass firewalls if their default ports are blocked, and signature-based anti-virus products cannot detect zero-day IM malware. Anomaly detection techniques, such as Norman Sandbox technology [18], may also be ineffective against evasive malware. Malicious-URL-embedded IM messages are even harder to identify by firewalls and anti-virus programs.

IM providers may respond to newly discovered vulnerabilities by releasing patches and mandating client upgrades, or by blocking potentially malicious file transfers. However, these measures can still be bypassed [22, 23]. Protecting against malicious URLs that exploit web browser or related application vulnerabilities is extremely challenging [20]. While some protection schemes, such as CAPTCHA and virus throttling for IM [13, 33], can enhance security, they often come with significant overhead and usability degradation, making them impractical for widespread use.

To address the shortcomings of existing defenses, we propose HoneyIM, a framework for automating the detection and suppression of IM malware in enterprise-like networks. Based on the concept of honeypots, HoneyIM uses decoy accounts in normal users' contact lists to capture malicious content sent by IM malware, achieving near-zero false positives. With accurate detection, HoneyIM can perform network-wide blocking and deliver attack information to network administrators for system quarantine and recovery. The core design of HoneyIM is generic and can be applied to networks using either private (enterprise) or public IM services.

We implemented a prototype of HoneyIM for public IM services using the open-source IM client Pidgin [1] and the client honeypot Capture [29]. Our validation through simulations and real experiments shows that even with a small portion of IM users (e.g., 5%) having decoys in their contact lists, HoneyIM can detect IM malware after only 0.4% (on average) of IM users are infected. The experimental results demonstrate that the prototype system successfully detects, suppresses, and notifies about IM malware within seconds.

The remainder of the paper is structured as follows: We first describe the major spreading mechanisms of IM malware and related work in Section 2. Then, we detail the framework of HoneyIM in Section 3, followed by the implementation and evaluation in Sections 4 and 5, respectively. We discuss possible evasion techniques and countermeasures in Section 6. Finally, we conclude the paper in Section 7.

## 2. Background and Related Work

### 2.1. IM Malware
IM malware primarily spreads through two mechanisms: malicious file transfers and malicious URLs in text messages. Typically, the infection is triggered by the victim's action, such as clicking on a transferred file or a received URL. IM malware can also spread without the victim's involvement, but this is rare.

Since the early 2000s, IM malware has used file transfer mechanisms to propagate. The malware initiates malicious file transfers to remote contacts, often renaming files to attract victims or evade network filters. Once a victim clicks the file, the malware is invoked and attempts to infect more victims in the contact list. Some IM clients, like MSN, block certain types of file transfers (e.g., .pif files) to counter this. While the actual file transfer occurs directly between IM clients, the messages for establishing the transfer go through the IM server, allowing the server to detect and block malicious file transfers.

Today, malicious URL messages are more common than file transfers for IM malware propagation. Instead of sending a file, the malware sends a text message containing a malicious URL. When a victim clicks the link, a malware binary is downloaded and executed, or malicious web scripts run to exploit browser or application vulnerabilities. Malicious URL messages have several advantages: they can compromise systems in multiple ways, collect victims' information, and use social engineering to craft convincing links. For example, the URL sent by Kelvir.k [21] points to a PHP script and includes the contact's email address, which is harvested upon clicking the URL.

After infection, IM malware may take different actions. Some types start spreading immediately, while others wait for instructions from a remote bot herder, who controls the malware through bot programs installed on compromised machines.

### 2.2. Related Work
The security threats posed by IM malware have been studied in [5, 12]. In [5], the spreading speed of IM malware was estimated, showing that 500,000 machines could be infected within a minute.

Previous defense schemes against IM malware have focused on IM network modeling and traffic measurement. Studies [15, 24, 33] have verified that IM social networks formed by IM contacts are scale-free, meaning the network connectivities follow power-law distributions. However, a recent study [34] suggests that Weibull distributions may better describe IM social network connectivity. For scale-free networks, a small portion of highly connected nodes significantly affects malware spread. Smith [24] proposed delaying IM malware propagation by disabling the accounts of the most connected IM users, but this requires deployment on IM servers and only reduces spread speed with potential side effects. Williamson et al. [33] applied virus throttling to IM, demonstrating its effectiveness through simulation. Throttling, conducted at servers, can become blind blocking if thresholds are too restrictive, degrading usability. Mannan and van Oorschot [13] proposed limited throttling and CAPTCHA-based challenge-response, supported by a usage study on per-user IM text messages and file transfers. Liu et al. modeled IM malware spread using multicast trees [11] and analogous branching processes with varied lifetimes [10].

HoneyIM is orthogonal to these schemes, achieving accurate detection and blocking without degrading usability.

Trivedi et al. [31] studied spim (spam on IM networks) using a proxy server as a honeypot. Their work differs from HoneyIM, as it targets spim rather than IM malware and uses a SOCKS proxy to conceal spimmers' identities.

## 3. HoneyIM Framework
HoneyIM aims to assist network administrators in defending against IM malware by automating the process of detection and suppression in enterprise-like networks. By leveraging the inherent spreading characteristics of IM malware and applying the concept of honeypots, HoneyIM can detect and block unknown IM malware at an early stage, facilitating network filtration and system quarantine and recovery.

### 3.1. Overview
HoneyIM is based on the concept of honeypots, an effective intrusion detection technology. A honeypot is an information system resource whose value lies in unauthorized or illicit use. Honeypots can be physical machines, specialized programs, email addresses, or IM decoy users. Since IM malware tries to infect other users on the victim's contact list, HoneyIM uses decoy users to detect IM malware. Under normal circumstances, a client user will not initiate a conversation with a decoy user. Therefore, if a decoy user receives a file transfer request or a URL-embedded text message from a client user, it is highly likely that malware is spreading, and the sender is compromised.

Using decoy users, HoneyIM achieves near-zero false positives in detection, relieving network administrators from concerns about interrupting normal IM users. Additionally, HoneyIM can block detected malicious content and notify network administrators of the attack information, such as the IP address of the compromised machine, in real-time.

Figure 1 illustrates the working mechanism of HoneyIM. The IM user with a honeypot icon has a decoy user in their contact list. The events occur in the following sequence:
1. IM malware compromises an IM client.
2. The malware propagates.
3. When it tries to spread again, it hits a decoy user.
4. The malware is detected by HoneyIM.
5. HoneyIM blocks the malicious content in IM traffic (at the edge gateway or IM server) and non-IM traffic, and notifies the network administrator of the attack information.

HoneyIM is designed to be independent of the type and location of IM servers, allowing flexible deployment. The coverage of HoneyIM, defined as the proportion of IM users with decoy accounts, is crucial. HoneyIM cannot detect malware for users without decoy accounts. Additionally, IM malware may bypass HoneyIM by not hitting decoy users in the infected users' contact lists. We assume the threat comes from outside the protected network and that inside users do not collude with attackers. Given the coverage, we will consider how to counter evasive IM malware in Section 6.

Compatibility is not an issue if HoneyIM is deployed on an enterprise IM server, as the server can maintain compatibility with supported IM clients. However, if public IM services are used, compatibility must be considered, especially in networks with less strict IM usage policies, such as campus networks. Thus, HoneyIM should be designed to support various types of public IM systems.