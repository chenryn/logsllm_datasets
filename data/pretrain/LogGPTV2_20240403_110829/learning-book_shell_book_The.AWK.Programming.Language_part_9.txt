a larger data set, often with reformatting and the preparation of summary infor-
mation. This section contains a variety of examples of these topics.
Summing Columns
We have already seen several variants of the two-line awk program that adds
up all the numbers in a single field.The following program performs a some-
what more complicated but still representative data-reduction task. Every input
line has several fields, each containing numbers, and the task is to compute the
sum of each column of numbers, regardless of how many columns there are.
67
---
## Page 78
68
DATA PROCESSING
CHAPTER 3
sum1- print column suns
input: rows of numbers
output: sum of each column
missing entries are treated as zeros
{for (i = 1; i  maxf1d)
sum[i] += $i
maxf1d = NF
END(for（i = 1;1 0)
t=ts
return t
Note how the postfix decrement operator -- is used to control the while loop.
We can test histogram with some randomly generated grades. The first
program in the pipeline below generates 200 random numbers between 0 and
100, and pipes them into the histogram maker.
awk·
generate random integers
BEGIN(for（i=1;i=1000000{
i1legal data
printf(*\nline %d i1legal:\nxs\n\nvoID\nvoID\n\n\n”, NR,$0)
next
no check printed
printf("\n*)
nothing on line 1
printf("xaxe\n",
，sp45,$1)
number,indented 45 spaces
ant =sprintf（*x.2f,s2)
printf("%sxg\n",
sp45,date)
date,indented 45 spaces
printf("Pay to %45.45s
$%s\n°，$3 dashes,ant)
1ine 4
printf("\n\n\n")
lines 6,7and 8
1ine 5
function numtowords(n,
cents, dols) (#n has 2 decimal places
dols = gubstr（n,
cents = substr（n, length(n)-1,2)
1f (dols =0)
，1,1ength(n)-3)
return intowords(dols)" dollars and “ cents
“cents exactly"
function intowords(n) (
n = int(n)
if (n >= 1000)
return intowords（n/1000)*thousand*intowords（n%1000)
.f
(n >= 100)
if (n >= 20)
return tens[int（n/10）]**ntowords（n%10）
return nums[n]
function initnum()(
split("one two three four five six seven eight nine *\
"ten eleven twelve thirteen fourteen fifteen"\
"sixteen seventeen eighteen nineteen",nums,
“*)
"seventy eighty ninety”,tens,
---
## Page 86
76DATA PROCESSING
CHAPTER 3
The program contains several interesting constructs. First, notice how we
generate a long string of blanks in the BEGIN action with sprintf, and then
convert them to dashes by substitution. Note also how we combine line con-
tinuation and string concatenation to create the string argument to split in
the function initnum; this is a useful idiom.
The date comes from the system by the line
"date* 1getline date
get today's date
which runs the date command and pipes its output into getline. A little
processing converts the date from
Wed Jun 17 13:39:36 EDr 1987
into
Jun 17,1987
(This may need revision on non-Unix systems that do not support pipes.)
The functions numtowords and intowords convert numbers to words.
They are straightforward, although about half the program is devoted to them.
The function intowords is recursive: it calls itself to deal with a simpler part
of the problem. This is the second example of recursion in this chapter, and we
will see others later on. In cach case, recursion is an effective way to break a
big job into smaller, more manageable pieces.
Exercise 39. Use the function addcomma from a previous example to include commas
in the printed amount. 
Exercise 310.The program prchecks does not deal with negative quantities or very
long amounts in a graceful way. Modify the program to reject requests for checks for
negative amounts and to split very long amounts onto two lines. 
Exercise 3-11. The function nuntovords sometimes puts out two blanks in a row. It
also produces blunders like “one dollars." How would you fix these defects? 
Exercise 3-12. Modify the program to put hyphens into the proper places in spelled-out
amounts, as in “twenty-one dollars." 
3.2DataValidation
Another common use for awk programs is data validation: making sure that
data is legal or at least plausible. This scction contains several small programs
that check input for validity. For example, consider the column-summing pro-