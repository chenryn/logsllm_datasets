# Representation of MOF Primitives

## Algorithm
1. Transform the input string to UPPER CASE.
2. Compute the hash:
   - In Windows XP: Compute MD5 hash.
   - In Windows Vista and later: Compute SHA256 hash.
3. Convert the hash to a string.

## Namespaces
1. Compute the hash for the namespace name (e.g., "ROOT\DEFAULT") and prepend "NS_":
   - Example: `NS_2F830D7E9DBEAE88EED79A5D5FBD63C0`
2. Compute the hash for the `__namespace` (e.g., "__NAMESPACE") and prepend "CI_":
   - Example: `CI_E5844D1645B0B6E6F2AF610EB14BFC34`
3. Compute the hash for the instance name (e.g., "NEWNS") and prepend "IL_":
   - Example: `IL_14E9C7A5B6D57E033A5C9BE1307127DC`
4. Concatenate the resulting strings using "\" as a separator:
   - Example: `NS_\CI_\IL_`

## Class Definitions
1. Compute the hash of the namespace name (e.g., "ROOT\DEFAULT") and prepend "NS_":
   - Example: `NS_2F830D7E9DBEAE88EED79A5D5FBD63C0`
2. Compute the hash of the class name (e.g., "EXISTINGCLASS") and prepend "CD_":
   - Example: `CD_D39A5F4E2DE512EE18D8433701250312`
3. Compute the hash of the parent class name (e.g., an empty string) and prepend "CR_":
   - Example: `CR_D41D8CD98F00B204E9800998ECF8427E`
4. Compute the hash of the class name (e.g., "EXISTINGCLASS") and prepend "C_":
   - Example: `C_D39A5F4E2DE512EE18D8433701250312`
5. Concatenate the resulting strings using "\" as a separator:
   - Example: `NS_\CD_` or `NS_\CR_\C_`

## Class with References Definitions
1. Construct an additional string path describing the reference member.
2. Compute the hash of the referenced class namespace (e.g., "ROOT\DEFAULT") and prepend "NS_":
   - Example: `NS_2F830D7E9DBEAE88EED79A5D5FBD63C0`
3. Compute the hash of the referenced class name (e.g., "EXISTINGCLASS") and prepend "CR_":
   - Example: `CR_D39A5F4E2DE512EE18D8433701250312`
4. Compute the hash of the class name (e.g., "NEWCLASS") and prepend "R_":
   - Example: `R_D41D8CD98F00B204E9800998ECF8427E`
5. Concatenate the resulting strings using "\" as a separator:
   - Example: `NS_\CR_\R_`

## Instances
1. Compute the hash of the namespace name (e.g., "ROOT\DEFAULT") and prepend "NS_":
   - Example: `NS_2F830D7E9DBEAE88EED79A5D5FBD63C0`
2. Compute the hash of the class name (e.g., "EXISTINGCLASS") and prepend "CI_":
   - Example: `CI_D39A5F4E2DE512EE18D8433701250312`
3. Compute the hash of the instance primary key(s) name (e.g., "EXISITINGCLASSNAME") and prepend "IL_":
   - Example: `IL_AF59EEC6AE0FAC04E5E5014F90A91C7F`
4. Concatenate the resulting strings using "\" as a separator:
   - Example: `NS_\CI_\IL_`

## Instances with References
1. Construct an additional string path describing the instance reference value.
2. Compute the hash of the referenced class namespace (e.g., "ROOT\DEFAULT") and prepend "NS_":
   - Example: `NS_2F830D7E9DBEAE88EED79A5D5FBD63C0`
3. Compute the hash of the referenced class name (e.g., "EXISTINGCLASS") and prepend "KI_":
   - Example: `KI_D39A5F4E2DE512EE18D8433701250312`
4. Compute the hash of the referenced instance primary key name (e.g., "EXISITINGCLASSNAME") and prepend "IR_":
   - Example: `IR_AF59EEC6AE0FAC04E5E5014F90A91C7F`
5. Concatenate the resulting strings using "\" as a separator:
   - Example: `NS_\KI_\IR_`

# Forensic Investigation of WMI Attacks

## Tools Developed by FLARE Team
1. **cim-ui** - GUI WMI Repo parser written in Python.
2. **WMIParser** - Command line tool written in C++.
   - Usage: `WmiParser.exe -p "%path_to_CIM_repo%" [–o "%path_to_log_file%"]`

## Next Generation Detection
1. Collect the entire CIM repository (directory `%SystemRoot%\WBEM\Repository`).
2. Parse offline:
   - Inspect persistence objects:
     - `__EventFilter` instances.
     - `__FilterToConsumerBinding` instances.
     - `ActiveScriptEventConsumer`, `CommandLineEventConsumer` instances.
     - `CCM_RecentlyUsedApps` instances.
   - Timeline new/modified class definitions and instances.
   - Export suspicious class definitions.
   - Decode and analyze embedded scripts with full confidence.

# Python-CIM Demo

# WMIParser Demo

# WMI Attack Detection

## Attacker Detection with WMI
1. Persistence is still the most common WMI-based attack.
2. Use WMI to detect WMI persistence:
   ```powershell
   $Arguments = @{
       Credential = 'WIN-B85AAA7ST4U\Administrator'
       ComputerName = '192.168.72.135'
       Namespace = 'root\subscription'
   }
   Get-WmiObject -Class __FilterToConsumerBinding @Arguments
   Get-WmiObject -Class __EventFilter @Arguments
   Get-WmiObject -Class __EventConsumer @Arguments
   ```

## Existing Detection Utilities
- **Sysinternals Autoruns**
- **Kansa** - https://github.com/davehull/Kansa/
  - Dave Hull (@davehull), Jon Turner (@z4ns4tsu)

## Consider the Following Attacker Actions and Their Effects
1. **Persistence via permanent WMI event subscriptions**:
   - Effect: Instances of `__EventFilter`, `__EventConsumer`, and `__FilterToConsumerBinding` created.
2. **Use of WMI as a C2 channel (e.g., via namespace creation)**:
   - Effect: Instances of `__NamespaceCreationEvent` created.
3. **WMI used as a payload storage mechanism**:
   - Effect: Instances of `__ClassCreationEvent` created.
4. **Persistence via the Start Menu or registry**:
   - Effect: `Win32_StartupCommand` instance created, firing `__InstanceCreationEvent`.
5. **Modification of additional known registry persistence locations**:
   - Effect: `RegistryKeyChangeEvent` and/or `RegistryValueChangeEvent` fired.
6. **Service creation**:
   - Effect: `Win32_Service` instance created, firing `__InstanceCreationEvent`.

## WMI as a Host IDS
- WMI can be used as a free, agent-less host IDS.
- It can detect and remove various persistence items:
  1. WMI persistence.
  2. Registry persistence (Run, RunOnce, AppInit_DLLs, Security Packages, Notification Packages, etc.).
  3. Service creation.
  4. Scheduled job/task creation.
  5. Etc.

## Benefits of a WMI Solution
- Available remotely on all systems.
- Service runs by default.
- Unlikely to be detected/removed by attackers.
- Persistent.
- No executables or scripts on disk (no agent software installation).
- Nearly everything on the operating system can trigger an event.

# Introducing WMI-HIDS

## A Proof-of-Concept, Agent-Less, Host-Based IDS
- Consists of just a PowerShell installer.
- PowerShell is not required on the remote system.
- Implemented with permanent WMI event subscriptions.

## WMI-HIDS Commands
- `New-AlertTrigger -EventConsumer [-TriggerType] [-TriggerName] [-PollingInterval]`
- `New-AlertTrigger -StartupCommand [-TriggerType] [-TriggerName] [-PollingInterval]`
- `New-AlertTrigger -RegistryKey [-TriggerName] [-PollingInterval]`
- `New-AlertAction -Trigger -Uri [-ActionName]`
- `New-AlertAction -Trigger -EventLogEntry [-ActionName]`
- `Register-Alert [-Binding] [[-ComputerName] ]`

## WMI-HIDS Example
```powershell
New-AlertTrigger -EventConsumer ActiveScriptEventConsumer -TriggerType Creation | New-AlertAction -Uri 'http://127.0.0.1' | Register-Alert -ComputerName 'VigilentHost1'
New-AlertTrigger -RegistryKey HKLM:\SYSTEM\CurrentControlSet\Control\Lsa | New-AlertAction -EventLogEntry | Register-Alert -ComputerName '192.168.1.24'
New-AlertTrigger -StartupCommand | New-AlertAction -Uri 'http://www.awesomeSIEM.com' | Register-Alert
```

## WMI-IDS Improvements
- Additional `__EventFilter` support:
  - `Win32_Service`
  - `Win32_ScheduledJob`
  - `__Provider`
  - `__NamespaceCreationEvent`
  - `__ClassCreationEvent`
  - Etc.
- Additional `__EventConsumer` support.
- Support removal of persistence items (IPS).
- Make writing plugins easier.
- Additional detection is left as an exercise for the reader and security vendors.

## WMI-IDS Takeaway
- Be creative!
- There are thousands of WMI objects and events that may be of interest to defenders:
  - `Root\Cimv2:Win32_NtEventLog`
  - `Root\Cimv2:Win32_ProcessStartTrace`
  - `Root\Cimv2:CIM_DataFile`
  - `Root\StandardCimv2:MSFT_Net*` (Win8+)
  - `Root\WMI:BCD*`

# WMI Attack Mitigations

## Detection/Mitigations
- Stop the WMI service (`Winmgmt?`).
- Firewall rules.
- Event logs:
  - `Microsoft-Windows-WinRM/Operational`
  - `Microsoft-Windows-WMI-Activity/Operational`
  - `Microsoft-Windows-DistributedCOM`
- Preventative permanent WMI event subscriptions.

## Namespace ACLs

# Thank You!

## For Fantastic Ideas
- Will Schroeder (@harmj0y) and Justin Warner (@sixdub) for their valuable input on useful `__EventFilters`.

## For Motivation
- Our esteemed colleague who claimed that the WMI/CIM repository had no structure.

## For Inspiration
- APT 29 for your continued WMI-based escapades and unique PowerShell coding style.

# References
- **Understanding WMI Malware** - Julius Dizon, Lennard Galang, and Marvin Cruz/Trend Micro
  - http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp__understanding-wmi-malware.pdf
- **There’s Something About WMI** - Christopher Glyer, Devon Kerr
  - https://dl.mandiant.com/EE/library/MIRcon2014/MIRcon_2014_IR_Track_There%27s_Something_About_WMI.pdf

# Multiple Binary CTFs – Puzzles, Malware, etc.
- In 2014, the First FLARE On Challenge was a huge success:
  - Over 7,000 participants and 226 winners!
- Second Challenge is live and open:
  - FLARE-On.com
  - Closes on 9/8
  - Diverse puzzles: UPX, Android, Steg, .NET, and more.
- Those who complete the challenge get a prize and bragging rights!

# THANK YOU!
Questions?