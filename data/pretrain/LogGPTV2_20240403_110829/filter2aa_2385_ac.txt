Representation of MOF Primitives 
81 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Representation of MOF Primitives - Algorithm 
 Transform the input string to UPPER CASE 
 In Windows XP 
-
Compute MD5 hash 
 In Windows Vista and up 
-
Compute SHA256 hash 
 Convert the hash to string 
82 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Representation of MOF Primitives – Namespaces 
 Compute hash for the namespace name, i.e. “ROOT\DEFAULT” and prepend “NS_” 
-
NS_2F830D7E9DBEAE88EED79A5D5FBD63C0 
 Compute hash for the __namespace, i.e. “__NAMESPACE” and prepend “CI_” 
-
CI_E5844D1645B0B6E6F2AF610EB14BFC34 
 Compute hash for the instance name, i.e “NEWNS” and prepend “IL_” 
-
IL_14E9C7A5B6D57E033A5C9BE1307127DC 
 Concatenated resulting string using “\” as separator 
-
NS_\CI_\IL_ 
83 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Representation of MOF Primitives – Namespaces 
84 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Representation of MOF Primitives – Class Definitions 
 Compute hash of the namespace name, i.e. “ROOT\DEFAULT” and prepend “NS_” 
-
NS_2F830D7E9DBEAE88EED79A5D5FBD63C0 
 Compute hash of the class name, i.e. “EXISTINGCLASS” and prepend “CD_” 
-
CD_D39A5F4E2DE512EE18D8433701250312 
 Compute hash of the parent class name, i.e “” (empty string) and prepend “CR_” 
-
CR_D41D8CD98F00B204E9800998ECF8427E 
 Compute hash of the class name, i.e. “EXISTINGCLASS” and prepend “C_” 
-
C_D39A5F4E2DE512EE18D8433701250312 
 Concatenated resulting string using “\” as separator 
-
NS_\CD_ 
-
NS_\CR_\C_ 
85 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Representation of MOF Primitives – Class Definitions 
86 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Representation of MOF Primitives – Class with Refs Definitions 
 Construct additional string path describing the reference member  
 Compute hash of the referenced class namespace, i.e. “ROOT\DEFAULT” and 
prepend “NS_” 
-
NS_2F830D7E9DBEAE88EED79A5D5FBD63C0 
 Compute hash of the referenced class name, i.e. “EXISTINGCLASS” and prepend 
“CR_” 
-
CR_D39A5F4E2DE512EE18D8433701250312 
 Compute hash of the class name, i.e “NEWCLASS” and prepend “R_” 
-
R_D41D8CD98F00B204E9800998ECF8427E 
 Concatenated resulting strings using “\” as separator 
-
NS_\CR_\R_ 
87 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Representation of MOF Primitives – Class with Refs Definitions 
88 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Representation of MOF Primitives – Instances 
 Compute hash of the namespace name, i.e. “ROOT\DEFAULT” and prepend “NS_” 
-
NS_2F830D7E9DBEAE88EED79A5D5FBD63C0 
 Compute hash of the class name, i.e. “EXISTINGCLASS” and prepend “CI_” 
-
CI_D39A5F4E2DE512EE18D8433701250312 
 Compute hash of the instance primary key(s) name, i.e “EXISITINGCLASSNAME” 
and prepend “IL_” 
-
IL_ AF59EEC6AE0FAC04E5E5014F90A91C7F 
 Concatenated resulting string using “\” as separator 
-
NS_\CI_\IL_ 
89 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Representation of MOF Primitives – Instances 
90 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Representation of MOF Primitives – Instances with Refs 
 Construct additional string path describing the instance reference value 
 Compute hash of the referenced class namespace, i.e. “ROOT\DEFAULT” and 
prepend “NS_” 
-
NS_2F830D7E9DBEAE88EED79A5D5FBD63C0 
 Compute hash of the referenced class name, i.e. “EXISTINGCLASS” and prepend 
“KI_” 
-
KI_D39A5F4E2DE512EE18D8433701250312 
 Compute hash of the referenced instance primary key name, i.e 
“EXISITINGCLASSNAME” and prepend “IR_” 
-
IR_ AF59EEC6AE0FAC04E5E5014F90A91C7F 
 Concatenated resulting string using “\” as separator 
-
NS_\KI_\IR_\ 
     R_ 
91 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Representation of MOF Primitives – Instances with Refs 
92 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Forensic Investigation of WMI Attacks 
93 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
FLARE team reverse engineered the CIM repository file formats 
 Two tools developed: 
-
cim-ui – GUI WMI Repo parser written in Python 
-
WMIParser – command line tool written in C++ 
•
WmiParser.exe –p “%path_to_CIM_repo%” [–o “%path_to_log_file%”] 
Next Generation Detection 1/2 
94 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Collect entire CIM repo (directory %SystemRoot%\WBEM\Repository) 
 Parse offline  
-
Inspect persistence objects 
•
__EvenFilter instances 
•
__FilterToConsumerBinding instances 
•
ActiveScriptEventConsumer, CommandLineEventConsumer instances 
•
CCM_RecentlyUsedApps instances 
•
Etc. 
-
Timeline new/modified class definition and instances 
-
Export suspicious class definitions 
-
Decode and analyze embedded scripts with full confidence 
Next Generation Detection 2/2 
95 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
CIM-UI 1/3 
96 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
CIM-UI 2/3 
97 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
CIM-UI 3/3 
98 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Python-CIM Demo 
99 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMIParser 1/6 
100 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMIParser 2/6 
101 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMIParser 3/6 
102 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMIParser 4/6 
103 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMIParser 5/6 
104 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMIParser 6/6 
105 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMIparser.exe Demo 
106 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMI Attack Detection 
107 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Attacker Detection with WMI 
Persistence is still the most common WMI-based attack 
Use WMI to detect WMI persistence 
 $Arguments = @{ 
    Credential = 'WIN-B85AAA7ST4U\Administrator' 
    ComputerName = '192.168.72.135' 
    Namespace = 'root\subscription' 
} 
Get-WmiObject -Class __FilterToConsumerBinding @Arguments 
Get-WmiObject -Class __EventFilter @Arguments 
Get-WmiObject -Class __EventConsumer @Arguments  
108 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Sysinternals Autoruns 
Kansa 
-
https://github.com/davehull/Kansa/ 
-
Dave Hull (@davehull), Jon Turner (@z4ns4tsu) 
Existing Detection Utilities 
109 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Attacker Detection with WMI 
Consider the following attacker actions and their effects: 
Attack: Persistence via permanent WMI event subscriptions 
Effect: Instances of __EventFilter, __EventConsumer, and __FilterToConsumerBinding 
created 
Attack: Use of WMI as a C2 channel. E.g. via namespace creation 
Effect: Instances of __NamespaceCreationEvent created 
Attack: WMI used as a payload storage mechanism 
Effect: Instances of __ClassCreationEvent created 
110 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Attacker Detection with WMI 
Attack: Persistence via the Start Menu or registry 
Effect:  Win32_StartupCommand instance created. Fires  __InstanceCreationEvent 
Attack: Modification of additional known registry persistence locations 
Effect:  RegistryKeyChangeEvent and/or  RegistryValueChangeEvent  fires 
Attack: Service creation 
Effect: Win32_Service instance created. Fires  __InstanceCreationEvent 
Are you starting to see a pattern? 
111 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Attacker Detection with WMI 
WMI is the free, agent-less host IDS that you never knew existed! 
112 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Attacker Detection with WMI 
Wouldn’t it be cool if WMI could be used to detect and/or remove ANY persistence item? 
1.
WMI persistence 
2.
Registry persistence 
-
Run, RunOnce, AppInit_DLLs, Security Packages, Notification Packages, etc. 
3.
Service creation 
4.
Scheduled job/task creation 
5.
Etc. 
113 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Benefits of a WMI solution 
Available remotely on all systems 
Service runs by default 
Unlikely to be detected/removed by attacker 
Persistent 
No executables or scripts on disk – i.e. no agent software installation 
Nearly everything on the operating system can trigger an event 
Security vendors, this is where you start to pay attention… 
114 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Introducing WMI-HIDS 
A proof-of-concept, agent-less, host-based IDS 
Consists of just a PowerShell installer 
PowerShell is not required on the remote system 
Implemented with permanent WMI event subscriptions 
115 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Introducing WMI-HIDS - RTFM 
New-AlertTrigger -EventConsumer  [-TriggerType ] [-TriggerName 
] [-PollingInterval ] 
New-AlertTrigger -StartupCommand [-TriggerType ] [-TriggerName 
] [-PollingInterval ] 
New-AlertTrigger -RegistryKey  [-TriggerName ] [-
PollingInterval ]  
New-AlertAction -Trigger  -Uri  [-ActionName ]  
New-AlertAction -Trigger  -EventLogEntry [-ActionName ]  
Register-Alert [-Binding]  [[-ComputerName] ]  
116 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Introducing WMI-HIDS - Example 
  New-AlertTrigger -EventConsumer ActiveScriptEventConsumer 
-TriggerType Creation | New-AlertAction -Uri 
'http://127.0.0.1' | Register-Alert -ComputerName 
'VigilentHost1' 
  New-AlertTrigger -RegistryKey 
HKLM:\SYSTEM\CurrentControlSet\Control\Lsa | New-
AlertAction -EventLogEntry | Register-Alert -ComputerName 
‘192.168.1.24' 
  New-AlertTrigger -StartupCommand | New-AlertAction -Uri 
'http://www.awesomeSIEM.com' | Register-Alert  
117 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMI-IDS Improvements 
Additional __EventFilter support: 
-
Win32_Service 
-
Win32_ScheduledJob 
-
__Provider 
-
__NamespaceCreationEvent 
-
__ClassCreationEvent 
-
Etc. 
Additional __EventConsumer support 
-
Make this an IPS too? Support removal of persistence items 
Make writing plugins more easy 
Additional detection is left as an exercise to the reader and security vendor. 
118 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMI-IDS Takeaway 
 Be creative! 
 There are thousands of WMI objects and events that may be of interest to 
defenders 
-
Root\Cimv2:Win32_NtEventLog 
-
Root\Cimv2:Win32_ProcessStartTrace 
-
Root\Cimv2:CIM_DataFile 
-
Root\StandardCimv2:MSFT_Net* (Win8+) 
-
Root\WMI:BCD* 
119 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
WMI Attack Mitigations 
120 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Detection/Mitigations 
Stop the WMI service - Winmgmt? 
Firewall rules 
Event logs 
-
Microsoft-Windows-WinRM/Operational  
-
Microsoft-Windows-WMI-Activity/Operational  
-
Microsoft-Windows-DistributedCOM  
Preventative permanent WMI event subscriptions 
121 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Mitigations – Namespace ACLs 
122 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Mitigations – Namespace ACLs 
123 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Thank you! 
For fantastic ideas 
-
Will Schroeder (@harmj0y) and Justin Warner (@sixdub) for their valuable input on useful __EventFilters 
For motivation 
-
Our esteemed colleague who claimed that the WMI/CIM repository had no structure 
For inspiration 
-
APT 29 for your continued WMI-based escapades and unique PowerShell coding style 
124 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Understanding WMI Malware - Julius Dizon, Lennard Galang, and Marvin Cruz/Trend Micro 
-
http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp__understanding-wmi-
malware.pdf 
There’s Something About WMI - Christopher Glyer, Devon Kerr 
-
https://dl.mandiant.com/EE/library/MIRcon2014/MIRcon_2014_IR_Track_There%27s_Something_About_WMI.pdf  
References 
125 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
 Multiple binary CTFs – puzzles, malware, etc 
 In 2014, the First FLARE On Challenge was a huge success 
-
Over 7,000 participants and 226 winners! 
 Second Challenge is live and open 
-
FLARE-On.com 
-
Closes on 9/8  
-
Diverse puzzles: UPX, Android, Steg, .NET and more 
 Those who complete the challenge get a prize and bragging rights! 
126 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
Copyright ©  2015, FireEye, Inc.  All rights reserved. 
THANK YOU!  
Questions?