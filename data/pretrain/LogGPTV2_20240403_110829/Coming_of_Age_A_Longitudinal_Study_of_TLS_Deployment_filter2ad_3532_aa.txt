title:Coming of Age: A Longitudinal Study of TLS Deployment
author:Platon Kotzias and
Abbas Razaghpanah and
Johanna Amann and
Kenneth G. Paterson and
Narseo Vallina-Rodriguez and
Juan Caballero
Coming of Age: A Longitudinal Study of TLS Deployment
Platon Kotzias
IMDEA Software Institute
Universidad Politécnica de Madrid
Abbas Razaghpanah
Stony Brook University
Johanna Amann
ICSI/Corelight/LBNL
Kenneth G. Paterson
Royal Holloway, University of London
Narseo Vallina-Rodriguez
IMDEA Networks Institute
ICSI
Juan Caballero
IMDEA Software Institue
ABSTRACT
The Transport Layer Security (TLS) protocol is the de-facto standard
for encrypted communication on the Internet. However, it has been
plagued by a number of different attacks and security issues over
the last years. Addressing these attacks requires changes to the
protocol, to server- or client-software, or to all of them. In this
paper we conduct the first large-scale longitudinal study examining
the evolution of the TLS ecosystem over the last six years. We
place a special focus on the ecosystem’s evolution in response to
high-profile attacks.
For our analysis, we use a passive measurement dataset with
more than 319.3B connections since February 2012, and an active
dataset that contains TLS and SSL scans of the entire IPv4 address
space since August 2015. To identify the evolution of specific clients
we also create the—to our knowledge—largest TLS client fingerprint
database to date, consisting of 1,684 fingerprints.
We observe that the ecosystem has shifted significantly since
2012, with major changes in which cipher suites and TLS extensions
are offered by clients and accepted by servers having taken place.
Where possible, we correlate these with the timing of specific at-
tacks on TLS. At the same time, our results show that while clients,
especially browsers, are quick to adopt new algorithms, they are
also slow to drop support for older ones. We also encounter signif-
icant amounts of client software that probably unwittingly offer
unsafe ciphers. We discuss these findings in the context of long tail
effects in the TLS ecosystem.
ACM Reference Format:
Platon Kotzias, Abbas Razaghpanah, Johanna Amann, Kenneth G. Pater-
son, Narseo Vallina-Rodriguez, and Juan Caballero. 2018. Coming of Age:
A Longitudinal Study of TLS Deployment. In 2018 Internet Measurement
Conference (IMC ’18), October 31-November 2, 2018, Boston, MA, USA. ACM,
New York, NY, USA, 14 pages. https://doi.org/10.1145/3278532.3278568
1 INTRODUCTION
The Transport Layer Security (TLS) protocol is the most widely
used encrypted communication protocol on the Internet. However,
in order to stay secure, it has had to constantly evolve in the face
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5619-0/18/10...$15.00
https://doi.org/10.1145/3278532.3278568
of each new attack and vulnerability that is discovered. Over the
last few years various TLS vulnerabilities such as BEAST, Lucky
13, POODLE, Heartbleed, FREAK, Logjam, and multiple attacks
against RC4 have been discovered. The Snowden revelations have
also highlighted weaknesses in TLS, specifically the reliance on
RSA key transport for establishing keying material, a method that
can be passively broken by an entity in possession of the server’s
RSA private key. Addressing these attacks requires changes to
the protocol, to server-, or to client-software, or to all of them
simultaneously.
Prior work highlights different parts of the TLS ecosystem like
specific attacks [6, 9, 10, 17, 41, 44, 44, 63, 74, 82], problems of the
PKI [7,46,54,60] or problems of TLS usage in specific areas like on
mobile devices [47,71,83]. However, to the best of our knowledge,
no prior work has examined the specific impact of security issues
on protocol deployment.
In this paper, we conduct a large-scale longitudinal study exam-
ining the evolution of the TLS ecosystem since 2012 both on the
client and on the server side. We analyze trends and evolution of the
ecosystem, putting a special focus on changes occurring in response
to specific high-profile attacks. For this, we use a combination of
passive and active measurement data. Our passive measurements
have been running continuously since February 2012 and currently
contain protocol information about more than 319.3B TLS connec-
tions. The active measurement data provided to us by Censys [42]
contains SSL and TLS scans of the entire IPv4 address space starting
from August 2015.
To identify the patching behavior and evolution of specific clients
we also create the—to our knowledge—largest TLS client fingerprint
database to date, consisting of 1,684 fingerprints. These fingerprints
allow us to attribute 69.26% of TLS connections to specific TLS-
using programs or libraries. Using these fingerprints we discover
that while clients, especially browsers, are quick to adopt new al-
gorithms, they are also slow to drop support for older ones. We
also encounter significant amounts of client software that probably
unwittingly offer unsafe ciphers. We discuss these findings in the
context of long tail effects arising from the desire to maintain back-
wards compatibility, software abandonment, and the difficulties
faced by users of TLS (in a broad sense) in keeping up-to-date with
proper TLS usage.
Our analysis, shows radical changes in the TLS ecosystem over
the last 6 years. In 2012, 90% of TLS connections used TLS 1.0, while
today 90% use TLS 1.2, with TLS 1.3 traffic increasing rapidly. In
2012, the use of RC4 and CBC-mode for encryption was prevalent;
today RC4 has almost completely disappeared in response to at-
tacks, while CBC-mode accounts for about 10% of traffic. RC4 and
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
Kotzias et al.
CBC-mode have been largely replaced by modern AEAD schemes,
especially AES-GCM. We observe significant declines in the adver-
tisement and use of export cipher suites, anonymous cipher suites,
and vintage algorithms like 3DES. We also see a rise in the use of
forward-secret cipher suites, now accounting for more than 90%
of connections. Ephemeral elliptic-curve-based Diffie-Hellman key
exchange (ECDHE) now dominates RSA key transport in TLS hand-
shakes, with Curve25519 gaining in popularity and accounting for
more than 20% of connections today.
to the server listing its capabilities such as the maximum protocol
version, the cipher suites, and elliptic curves it supports. The server
then chooses its preferred options, among those offered by the
client, and informs the client of its choices in the Server Hello
message. Thus, the server chooses the final protocol version, cipher
suite, and other parameters that will be used in the secure channel.
Table 1 lists the release dates of all SSL/TLS versions. A key
feature added in TLS 1.0 over the earlier SSL protocol versions are
TLS extensions used for adding TLS functionality and TLS protocol
message formats [40]. The client includes in the Client Hello all the
extensions that it supports and the server simply ignores extensions
that it does not understand. As of March 2018, 28 TLS extensions
have been standardized [57]. It is also possible for anyone to define
their own extensions.
2.2 TLS Attacks
Many attacks against SSL/TLS have been discovered in recent years.
As a result, both the protocol specification and individual implemen-
tations have been significantly revised. In some cases, just changing
client and/or server configurations was sufficient mitigation – for
example to avoid using weak cipher suites. In other cases, where
good alternatives were not widely supported or where support for
legacy was needed, more invasive changes to implementations were
required. Finally, as we will see, clients and servers have changed
the versions of the protocol they negotiate in response to attacks.
Below, we provide a brief description and a timeline of the most
notable attacks, ordered by disclosure date.
BEAST (09/06/2011) BEAST allows a MITM attacker to decrypt
data passing between a webserver and an end-user browser for CBC
cipher suites in TLS versions 1.0 and earlier [26, 41]. The attack
exploits these versions’ reliance on predictable IVs; these are not
present in TLS 1.1 and 1.2. BEAST requires the attacker to have
very fine control over the placement of chosen plaintext blocks
in the client’s messages. Client-side mitigation was possible and
widely implemented. As a response to BEAST, server operators
were encouraged to enforce the use of RC4 suites whenever TLS 1.0
and lower is offered by the client [74].
Lucky 13 (06/12/2012) Lucky 13 is a cryptographic timing attack
against TLS implementations using CBC mode [10, 29]. All TLS
cipher suites using CBC-mode encryption are potentially vulnera-
ble to this attack. The best counter-measure is to switch to using
authenticated encryption with associated data (AEAD) cipher suites
in TLS 1.2, but at the time of the attack’s disclosure, most imple-
mentations did not support TLS 1.2. Consequently, and in view of
the security issues in RC4 disclosed soon after Lucky 13, most im-
plementations took steps to try to limit the timing leaks. Follow-up
work has shown that this was not always successful [8,14,79].
RC4 attacks (12/3/2013 and later) This sequence of attacks [9,20,
27,33,48,85] exploited biases in the output of the RC4 stream cipher
to recover plain-texts that are sent repeatedly under the protection
of TLS, e.g., HTTP cookies or passwords. The attacks grew stronger
over time, making the use of RC4 increasingly indefensible as an
encryption option, and spurring the adoption of TLS 1.2 with its
stronger, modern AEAD cipher suites.
We correlate major changes in the use of cipher suites and TLS
extensions with the timing of specific TLS attacks and assess the
impact of security research. We observe a few cases, like HeartBleed,
where the ecosystem changed very quickly. We also observe a
strong correlation in time between Snowden revelations and the
change to forward-secret ciphers. On the other hand, it took several
years for RC4 usage to reduce significantly after attacks against
RC4 were discovered. Moreover, we do not observe a change in our
traffic after CBC attacks, possibly due to the lack of better available
options at the time or due to the existence of patches. At last, server
support for SSL3 is still embarassingly high, despite the severity of
POODLE and RC4 attacks.
Our main contributions are as follows: (i) We conduct a large-
scale longitudinal study on the evolution of the TLS ecosystem
since 2012. We place a special focus on high-profile attacks and
detail the impact that these attacks have had on the ecosystem.
(ii) We present the largest, and longest-running, passive TLS moni-
toring dataset comprising 319.3B TLS connections collected since
February 2012. We use our passive dataset, together with a large
active scan dataset, to detail the changes to the TLS ecosystem since
2012. Where possible, we correlate the changes that we observe in
these datasets with the timing of specific attacks on TLS. (iii) We
create the largest database of TLS client fingerprints to-date. We
use these fingerprints to identify the evolution of client software
on the Internet. We will release our TLS client fingerprints to the
community after publication of this paper1.
The remainder of this paper is structured as follows: §2 covers
the background. §3 introduces the datasets used in our paper and
§4 details our TLS client fingerprinting. §5 examines the impact
TLS vulnerabilities had on the TLS ecosystem and §6 investigates
TLS characteristics not directly related to attacks. §7 discusses the
implications of our findings. Finally, §8 presents the related work
and §9 concludes.
2 BACKGROUND
This section gives a brief overview of relevant parts of the TLS
protocol, as well as the TLS vulnerabilities we analyze. For a detailed
TLS description, we refer the reader to RFC 5246 [40]. Note that
while we predominantly use the term TLS, our measurements also
cover the earlier Secure Sockets Layer (SSL) protocol.
2.1 TLS Connection Establishment
To establish a TLS connection, the client and server first negotiate
the parameters of the connection using Client Hello and Server
Hello messages. These two messages are not encrypted, allowing
passive observation. The client first sends a Client Hello message
1https://github.com/platonK/tls_fingerprints
Coming of Age: A Longitudinal Study of TLS Deployment
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
Heartbleed (03/12/2013) Heartbleed is an OpenSSL bug allow-
ing remote attackers to obtain sensitive information from process
memory via packets that trigger a buffer over-read [44,87]. It was
introduced into the software in 2012 and publicly disclosed in April
2014 [30]. Due to the severity of the attack and the ease of exploiting
it, Heartbleed attracted a lot of media attention.
POODLE (14/05/2014) POODLE is a cryptographic exploit which
takes advantage of TLS clients’ willingness to fall back to SSL 3 and
the specifics of CBC-mode padding in SSL 3 [31,63]. Since RC4, the
only other encryption option in SSL 3, was already considered to
be weak, the only real countermeasures to this attack are to disable
SSL 3 and support TLS downgrade protection.
FREAK (03/03/2015) Export-grade ciphersuites have limited key
lengths to satisfy US cryptography export laws of the 1990s. They
offer approximately 40 bits of security and can today be broken
quite easily [82]. Since the early 2000s, with the relaxation of export
controls, cryptography no longer has to be hobbled in this way.
FREAK allows an MITM attacker to downgrade TLS connections to
use export-grade cryptography (512-bit RSA for key transport) [17,
32,51]. The attack is possible when a client connects to a web server
that supports RSA_EXPORT cipher suites and the client requests
an RSA cipher suite. The attack also relies on a client-side bug
where the client accepts handshake messages of the special format
encountered in export handshakes, when no such handshake was
requested by the client. To mitigate this vulnerability, both clients
and servers should disable support for export cipher suites.
Logjam (20/05/2015) Logjam, reminiscent of FREAK, allows an
MITM attacker to attack connections if the server supports DHE_EX-
PORT cipher suites and the client requests a DHE cipher suite [6,34].
The effect is to downgrade the security of TLS connections to the
level of export-grade cryptography (512-bit DH key exchange). Log-
jam takes advantage of the protocol-level flaw in TLS that the server
signature in a DHE handshake does not cover the entire handshake