title:Performability Analysis of Guarded-Operation Duration: A Successive
Model-Translation Approach
author:Ann T. Tai and
William H. Sanders and
Leon Alkalai and
Savio N. Chau and
Kam S. Tso
Performability Analysis of Guarded-Operation Duration:
A Successive Model-Translation Approach
Ann T. Taiy William H. Sandersyy
Leon Alkalaiz
Savio N. Chauz
Kam S. Tsoy
IA Tech, Inc.y
Los Angeles, CA 90024
University of Illinoisyy
Urbana, IL 61801
Jet Propulsion Laboratoryz
Pasadena, CA 91109
fa.t.tai,PI:EMAIL
PI:EMAIL
flalkalai,PI:EMAIL
Abstract
When making an engineering design decision, it is of-
ten necessary to consider its implications on both system
performance and dependability. In this paper, we present
a performability study that analyzes the guarded operation
duration for onboard software upgrading. In particular, we
deﬁne a “performability index” Y that quantiﬁes the ex-
tent to which the guarded operation with a duration (cid:30) re-
duces the expected total performance degradation. In or-
der to solve for Y , we progressively translate its formula-
tion until it becomes an aggregate of constituent measures
conducive to efﬁcient reward model solutions. Based on
the reward-mapping-enabled intermediate model, we spec-
ify reward structures in the composite base model which is
built on three stochastic activity network reward models. We
describe the model-translation approach and show its fea-
sibility for design-oriented performability modeling.
1 Introduction
In order to protect an evolvable, distributed embedded
system for long-life missions against the effects of de-
sign faults introduced by an onboard software upgrade, a
methodology called guarded software upgrading (GSU) has
been developed [1]. The GSU methodology is supported
by a message-driven conﬁdence-driven (MDCD) protocol
that enables efﬁcient use of checkpointing and acceptance
test techniques for error containment and recovery. Speciﬁ-
cally, the MDCD protocol ensures that the system functions
properly after a software component is replaced by an up-
dated version during a mission, while allowing the updated
component to interact freely with other components in the
system. The period during which the system is under the
escort of the MDCD protocol is called “guarded operation.”
Guarded operation thus permits an upgraded software
component to start its service to the mission in a seam-
less fashion, and, if the escorting process determines that
The work reported in this paper was supported in part by Small
Business Innovation Research (SBIR) Contract NAS3-99125 from the Jet
Propulsion Laboratory, National Aeronautics and Space Administration.
the upgraded component is not sufﬁciently reliable and thus
imposes an unacceptable risk to the mission, ensures that
the system will be safely downgraded back by replacing
the upgraded software component with an earlier version.
It is anticipated that sensible use of this escorting process
will minimize the expected total performance degradation,
which comprises 1) the performance penalty due to design-
fault-caused failure, and 2) the performance reduction due
to the overhead of the safeguard activities. Accordingly, an
important design parameter is the duration of the guarded
operation (cid:30), as the total performance degradation is directly
inﬂuenced by the length of the escorting process. In turn,
this suggests that a performability analysis [2] is well-suited
for the engineering decision-making.
Although we conducted separate dependability and per-
formance studies for the MDCD protocol [3, 1], performa-
bility analysis with the above motivation presents us with
new challenges. First, performability measures for engi-
neering decision-making should be deﬁned from a system
designer’s perspective, which naturally leads to a design-
oriented formulation that may not be directly conducive to
the ﬁnal solution. Second, such a performability model usu-
ally covers a broad spectrum of system attributes which may
have interdependencies among them. Those factors prevent
us from evaluating the performability measure in a straight-
forward fashion (e.g., attempting to obtain the solution by
directly mapping the measure to a single reward structure in
a monolithic model).
To circumvent the difﬁculties, we propose an approach
that solves the performability measure through successive
model translation.
In particular, we ﬁrst deﬁne a “per-
formability index” Y , that quantiﬁes the extent to which
the guarded operation with a duration (cid:30) reduces the ex-
pected total performance degradation, relative to the case
in which guarded operation is completely absent. For clar-
ity and simplicity of the design-oriented model, we allow
Y to be formulated at a high level of abstraction.
In or-
der to solve for Y efﬁciently, we choose not to elaborate its
formulation directly or map the design-oriented model to a
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:16:31 UTC from IEEE Xplore.  Restrictions apply. 
monolithic, state-space based model. Instead, we apply ana-
lytic methods to translate the design-oriented model into an
evaluation-oriented model that allows us to exploit efﬁcient
solution methods, successively closing the gap between the
formulation of Y and its ﬁnal solution.
More speciﬁcally, we begin with constructing a design-
oriented model that formulates Y . We subsequently trans-
late this design-oriented model, through analytic manipula-
tion, into an evaluation-oriented form that is an aggregate
of constituent measures conducive to reward model solu-
tions. Based on this reward-mapping-enabled intermediate
model, we take our ﬁnal step to specify reward structures in
the composite base model, which is built on three stochastic
activity network (SAN) [4] reward models.
As with behavioral decomposition methods (see [5, 6],
for example) and hierarchical composition techniques (see
[7, 8], for example), the objective of this model-translation
approach is to avoid dealing with a model that is too com-
plex to allow derivation of a closed-form solution. The dif-
ference between those previously developed techniques and
our approach is that we focus on translating a model pro-
gressively until it reaches a form that is a simple function
of “constituent reward variables,” each of which can be di-
rectly mapped to a reward structure for solution.
As described in Sections 3 and 4, when translation pro-
gresses, we are able to learn additional mathematical im-
plications (to the performability measure) of the behavior
of the system in question. By discovering them along the
path of translation, we acquire ideas for efﬁcient model con-
struction and solution. This is an important advantage of the
model-translation approach, because it supports performa-
bility studies of engineering problems in which mathemat-
ical properties or implications of the system behavior may
not become apparent until we elaborate the formulation of
the problem to a certain degree. Moreover, the process of
transforming the problem of solving a complex performa-
bility measure into that of evaluating constituent reward
variables naturally enables us to utilize efﬁcient modeling
techniques (such as behavioral decomposition and hierar-
chical composition) and modeling tools, which we might
be unable to exploit without model translation.
The next section provides a review of the GSU method-
ology and guarded operation. Section 3 deﬁnes and formu-
lates the performability measure. Section 4 describes the
translation process, followed by Section 5, which shows
how the reward structures are speciﬁed in SAN models.
Section 6 presents an analysis of optimal guarded-operation
duration. The paper is concluded by Section 7, which sum-
marizes what we have accomplished.
2 Review of GSU Framework
The development of the GSU methodology is motivated
by the challenge of guarding an embedded system against
the adverse effects of design faults introduced by an on-
board software upgrade [3, 1]. The performability study
presented in this paper assumes that the underlying embed-
ded system consists of three computing nodes.
(This as-
sumption is consistent with the current architecture of the
Future Deliveries Testbed at JPL.) Since a software upgrade
is normally conducted during a non-critical mission phase
when the spacecraft and science functions do not require
full computation power, only two processes corresponding
to two different application software components are sup-
posed to run concurrently and interact with each other. To
exploit inherent system resource redundancies, we let the
old version, in which we have high conﬁdence due to its
sufﬁciently long onboard execution time, escort the new-
version software component through two stages of GSU,
namely, onboard validation and guarded operation, as il-
lustrated in Figure 1.
Further, we make use of the third processor, which would
otherwise be idle during a non-critical mission phase, to
accommodate the old version such that the three processes
(i.e., the two corresponding to the new and old versions, and
the process corresponding to the second application soft-
ware component) can be executed concurrently. To aid in
the description, we introduce the following notation:
Pnew
1
Pold
1
P2
The process corresponding to the new version of an
application software component.
The process corresponding to the old version of the
application software component.
The process corresponding to another application
software component (which is not undergoing up-
grade).
1
and Pold
1 does. Thus, Pnew
The ﬁrst stage of GSU (onboard validation), which can
be viewed as extended testing in an actual space environ-
ment, starts right after the new version is uploaded to the
spacecraft. During this stage, the outgoing messages of the
shadow process Pnew
are suppressed but selectively logged,
while Pnew
receives the same incoming messages that the
active process Pold
1 can perform
the same computation based on identical input data. By
maintaining an onboard error log that can be downloaded to
the ground for validation-results monitoring and Bayesian-
statistics reliability analyses (as suggested by some prior
work in the research literature, see [9], for example), we
can make decisions regarding how long onboard validation
should continue and whether Pnew
can be allowed to en-
ter mission operation. Moreover, onboard extended testing
leads to a better estimation of the fault-manifestation rate
of the upgraded software. If onboard validation concludes
successfully, then Pnew
switch their roles to enter
the guarded operation stage. The time to the next upgrade
(cid:18) is determined upon the completion of onboard validation,
and Pold
1
1
1
1
1
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:16:31 UTC from IEEE Xplore.  Restrictions apply. 
Old
Version
New
Version
(Servicing mission)
(Shadow-mode execution)
(Retired)
(Uploaded)
(Extended testing)
(Servicing mission)
Normal mode
Onboard validation
Guarded operation
φ
θ
Normal mode
θ − φ
Onboard upgrade begins
Next onboard upgrade
Figure 1: Onboard Guarded Software Upgrading
according to 1) the planned duty of the ﬂight software in
the forthcoming mission phases, and 2) the quality of the
software learned through onboard validation.
During guarded operation, Pnew
actually inﬂuences the
external world and interacts with process P2 under the es-
cort of the MDCD error containment and recovery proto-
col, while the messages of Pold
that convey its computation
results to P2 or external systems (e.g., devices) are sup-
pressed. We call the messages sent by processes to exter-
nal systems and the messages between processes external
messages and internal messages, respectively.
1
1
The key assumption used in the derivation of the MDCD
algorithms is that an erroneous state of a process is likely
to affect the correctness of its outgoing messages, while
an erroneous message received by an application software
component will result in process state contamination [3].
Accordingly, the necessary and sufﬁcient condition for a
process to establish a checkpoint is that the process re-
ceives a message that will make the process’s otherwise
non-contaminated state become potentially contaminated.
In order to keep performance overhead low, the correctness
validation mechanism, acceptance test (AT), is only used
to validate external messages from the active processes that
are potentially contaminated. By a “potentially contami-
nated process state,” we mean 1) the process state of Pnew
that is created from a low-conﬁdence software component,
or 2) a process state that reﬂects the receipt of a not-yet-
validated message that is sent by a process when its process
state is potentially contaminated.
1
Upon the detection of an erroneous external message,
Pold
1 will take over Pnew
1 ’s active role and prepare to re-
sume normal computation with P2. By locally checking its
knowledge about whether its process state is contaminated,
a process will decide to roll back or roll forward, respec-
tively. After a rollback or roll-forward action, Pold
1 will “re-
send” the messages in its message log or further suppress
messages it intends to send, based on the knowledge about
the validity of Pnew
’s messages. After error recovery (which
marks an unsuccessful but safe onboard upgrade), the sys-
tem goes back to the normal mode (under which safeguard
functions, namely, checkpointing and AT, are no longer per-
1
formed) until the next scheduled upgrade. An undetected,
erroneous external message1 will result in system failure,
meaning that the system will become unable to continue
proper mission operation. On the other hand, as the MDCD
algorithms allow error recovery to be trivial [1], we antici-
pate that the system will recover from an error successfully
provided that the detection is successful.
If no error occurs during (cid:30), then guarded operation con-
cludes and the system goes back to normal mode at (cid:30) (see
Figure 1). Note that while the time to the next scheduled on-
board upgrade (cid:18) is chosen via a software engineering deci-
sion, the duration of guarded operation (cid:30) is a design param-
eter that inﬂuences system performance and dependability.
The central purpose of this paper is to study how to eval-
uate a performability measure for determining an optimal
(cid:30). In the section that follows, we deﬁne and formulate the
performability measure.
3 Performability Measure