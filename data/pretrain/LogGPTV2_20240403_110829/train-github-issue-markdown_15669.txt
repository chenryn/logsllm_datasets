## Problem
When executing the following snippet of code on matplolib 1.3.1, the month
name November will show up twice on plot_date using a timezone with daylight
saving time (meaning the second november tick is november 30, 23:00, almost
december, but not quite). This is misleading and annoying when interpreting
the plot because events after the december tick are already in january.
    # -*- coding: utf-8 -*-
    import matplotlib.pyplot as plt
    import pytz
    import datetime
    from dateutil.rrule import rrule, MONTHLY
    mytz = pytz.timezone('America/Los_Angeles')
    startdt = datetime.datetime(2013, 8, 1, 0, 0) # start during DST period 
    # create positions where monthly ticks should be
    myrule = rrule(MONTHLY, dtstart = startdt, count = 6)
    localizer = lambda dt: mytz.localize(dt)
    localized = [localizer(el) for el in myrule] # convert naive to timezone
    plt.plot_date(localized, [1 for el in localized], '+-') # shows month name November twice
    plt.grid(color = 'k', which = 'major', linestyle = ':', linewidth = 0.5)
    plt.tight_layout()
    plt.show()
## Reason
In the example above, the proper tick positions are produced when using a
naive datetime as startdt.
The reason is presumably that dateutil.rrule results in "wrong" dates used as
tick locations when startdt is already localized and normalized afterwards.
When doing something in the line of
    myrule = rrule(MONTHLY, dtstart = mytz.localize(startdt), count = 6)
    print [mytz.normalize(dt) for dt in myrule]
the datetimes from November onward will be off by the DST offset (which is not
what I would like to have for the ticks position).
Could this probably also happen in matplotlib?