# 基于脚本的攻击或可绕过微软的反恶意软件扫描接口（AMSI）

##### 译文声明
本文是翻译文章，原文来源：安全客。具体内容和含义以原文为准。

**前言**
上个月，在2016年的美国Black Hat黑客大会上，我讨论了微软反恶意软件扫描接口（AMSI）的一些内容。本文将分享我在该演讲中提到的观点，并提供相关资料供感兴趣的读者参考。
- 演讲PPT：[地址1](https://www.blackhat.com/docs/us-16/materials/us-16-Mittal-AMSI-How-Windows-10-Plans-To-Stop-Script-Based-Attacks-And-How-Well-It-Does-It.pdf) [地址2](http://www.slideshare.net/nikhil_mittal/amsi-how-windows-10-plans-to-stop-scriptbased-attacks-and-how-well-it-does-it)

在Windows 10中，微软引入了AMSI，用于检测基于脚本的攻击和恶意软件。这类攻击对企业的威胁尤为严重，而随着PowerShell开源并支持跨平台，此类攻击可能会更加普遍。AMSI主要针对使用PowerShell、VBScript及JScript等语言编写的恶意脚本，通过提升检测准确率来有效拦截这些威胁。

**AMSI的工作原理**
AMSI可以在脚本执行前对其进行检查，无论代码是否经过混淆处理，最终提交给脚本宿主的都是未经混淆的明文形式。这意味着即使是从内存或其他非传统存储位置加载的脚本也能被有效监控。此外，由于AMSI是一个开放接口，任何应用程序均可调用其API。例如，在Windows 10中，Windows Defender就利用了这一接口加强防护。

然而，这是否意味着基于脚本的攻击已经被彻底遏制？答案可能并不那么简单。正如古语所说：“道高一尺，魔高一丈。”接下来我们将探讨一些可能存在的绕过手段。

**个人实践与发现**
在我测试Nishang工具时首次接触到了AMSI。Nishang是一套专为渗透测试设计的PowerShell脚本集合，包括下载、执行以及键盘记录等多种功能。我发现某些原本正常的脚本突然无法运行，即使是那些从内存中加载的也不例外。经过一番研究后，我了解到AMSI具备以下特点：
- 内存及数据流扫描能力，确保不同输入方式不影响其性能；
- 反混淆技术的应用使得简单的编码转换不再有效；
- 提交至脚本宿主前已完成解码，确保源码透明可见。

**AMSI检测范围**
- **内存中执行脚本**：如通过powershell.exe的“-EncodedCommand”参数实现的一行命令下载执行功能。
- **非标准脚本执行路径**：比如不直接使用powershell.exe而是借助System.Automation.DLL等替代方法。
- **非常规存储位置**：从WMI命名空间、注册表项或者事件日志中读取脚本。
- **白名单规避策略**：利用InstallUtil、regsrv32或rundll32等方式执行恶意代码。

尽管如此，仍然存在多种技术可以绕过AMSI的监控。

**绕过AMSI的方法**
- **强制启用PowerShell v2**：当前版本的v2尚不支持AMSI，若目标系统安装有.NET 3.0，则可通过指定版本号切换到v2模式。
- **代码混淆**：修改函数名、变量名等标识符，使反病毒软件难以识别已知恶意样本。
- **卸载AMSI**：利用Set-MpPreference cmdlet关闭Windows Defender的部分功能，但需注意操作权限及用户通知问题。
- **DLL劫持**：向工作目录注入自定义的amsi.dll文件以覆盖原有行为。
- **反射技术**：无需高级权限即可实施的一种新型绕过方案，适用于创建包含恶意链接的Office文档等场景。

**结论**
虽然AMSI显著增强了Windows系统的安全性，但它并非万无一失。持续改进防御机制的同时，我们也应关注新的攻击手法发展动向。