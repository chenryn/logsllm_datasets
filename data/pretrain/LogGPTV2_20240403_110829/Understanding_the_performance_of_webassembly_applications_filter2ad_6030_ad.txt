troduced by more frequent memory resizing requests (via invoking
the JS function memory.grow() [67]).
4.2.2 Compilers (Cheerp vs. Emscripten). To evaluate the impact of
compilers on performances, we use both Emscripten and Cheerp to
compile the 41 C benchmarks with the baseline optimization (-O2).
4.3 Impact of Input Sizes
WebAssembly’s compact code format and its low-level nature are
designed to be faster than JavaScript. However, our experiments
540
0.01.02.0RatioRelative Execution Time  O1/O2JSWASM0.00.51.0Relative Code Size  O1/O2JSWASM0.01.0RatioRelative Execution Time  Ofast/O2JSWASM0.00.51.0Relative Code Size  Ofast/O2JSWASMCovarianceCorrelationGemmGemverGesummvSymmSyrkSyr2kTrmm2mm3mmAtaxBicgDoitgenMvtCholeskyDurbinGramschmidtLuLudcmpTrisolvDericheFloyd-warshallNussinovAdiFdtd-2dHeat-3dJacobi-1dJacobi-2dSeidel-2dADPCMAESBLOWFISHDFADDDFDIVDFMULDFSINGSMMIPSMOTIONSHABenchmarks0.01.0RatioRelative Execution Time  Oz/O2JSWASMCovarianceCorrelationGemmGemverGesummvSymmSyrkSyr2kTrmm2mm3mmAtaxBicgDoitgenMvtCholeskyDurbinGramschmidtLuLudcmpTrisolvDericheFloyd-warshallNussinovAdiFdtd-2dHeat-3dJacobi-1dJacobi-2dSeidel-2dADPCMAESBLOWFISHDFADDDFDIVDFMULDFSINGSMMIPSMOTIONSHABenchmarks0.00.51.0Relative Code Size  Oz/O2JSWASM0.01.02.0RatioRelative Execution Time  O1/O20.00.51.0Relative Code Size  O1/O20.01.0RatioRelative Execution Time  Ofast/O20.00.51.0Relative Code Size  Ofast/O2CovarianceCorrelationGemmGemverGesummvSymmSyrkSyr2kTrmm2mm3mmAtaxBicgDoitgenMvtCholeskyDurbinGramschmidtLuLudcmpTrisolvDericheFloyd-warshallNussinovAdiFdtd-2dHeat-3dJacobi-1dJacobi-2dSeidel-2dADPCMAESBLOWFISHDFADDDFDIVDFMULDFSINGSMMIPSMOTIONSHABenchmarks0.01.02.0RatioRelative Execution Time  Oz/O2CovarianceCorrelationGemmGemverGesummvSymmSyrkSyr2kTrmm2mm3mmAtaxBicgDoitgenMvtCholeskyDurbinGramschmidtLuLudcmpTrisolvDericheFloyd-warshallNussinovAdiFdtd-2dHeat-3dJacobi-1dJacobi-2dSeidel-2dADPCMAESBLOWFISHDFADDDFDIVDFMULDFSINGSMMIPSMOTIONSHABenchmarks0.00.51.0Relative Code Size  Oz/O2Understanding the Performance of WebAssembly Applications
IMC ’21, November 2–4, 2021, Virtual Event, USA
Table 5: Firefox execution time statistics.
SD #1
33
29
16
12
6
SD gmean2
4.75x ↓
2.41x ↓
1.87x ↓
1.52x ↓
1.13x ↓
Input Size
Extra-small
Small
Medium
Large
Extra-large
1: # of benchmarks which WebAssembly runs slower than JavaScript.
SD is short for the slowdown. 2: Geometric mean for SD. 3: # of benchmarks
which WebAssembly runs faster than JavaScript. SU is short for speedup.
4: Geometric mean for SU. 5: Geometric mean for all 41 benchmarks.
All gmean5
3.05x ↓
1.52x ↓
1.08x ↑
1.37x ↑
1.67x ↑
SU gmean4
2.04x ↑
2.01x ↑
1.71x ↑
1.85x ↑
1.86x ↑
SU #3
8
12
25
29
35
Figure 7: ADPCM in WebAssembly with -O2 vs. -Ofast.
Figure 8: Covariance in WebAssembly with -O1 vs. -O2.
Table 3: Chrome execution time statistics of Fig. 9.
SD #1
1
2
18
16
18
SD gmean2
14.42x ↓
4.78x ↓
1.71x ↓
1.88x ↓
1.39x ↓
Input Size
Extra-small
Small
Medium
Large
Extra-large
1: # of benchmarks which WebAssembly runs slower than JavaScript.
SD is short for the slowdown. 2: Geometric mean for SD. 3: # of benchmarks
which WebAssembly runs faster than JavaScript. SU is short for speedup.
4: Geometric mean for SU. 5: Geometric mean for all 41 benchmarks.
All gmean5
26.99x ↑
8.22x ↑
2.30x ↑
1.44x ↑
1.58x ↑
SU gmean4
31.33x ↑
9.92x ↑
6.70x ↑
2.72x ↑
2.91x ↑
SU #3
40
39
23
25
23
Table 4: Chrome average memory usages (in KB) of Fig. 9.
Input Size
Extra-small
Small
Medium
Large
Extra-large
JavaScript WebAssembly
2,001.54
2,077.27
2,985.78
26,991.05
100,943.88
879.41
878.73
880.54
883.10
889.20
showed that JavaScript often outperforms WebAssembly, especially
when the input of the program is large.
4.3.1 Chrome performance with diverse input sizes. We measure the
execution time and memory usage of WebAssembly and JavaScript
compiled from the 41 C benchmarks with five sets of input. Each
benchmark was compiled using -O2 and was tested on desktop
Chrome v79.
Execution Time. Fig. 9 shows execution time results and Table 3
shows the statistics of the results. In Table 3, “speedup" is the ratio
of execution speed of a faster program to the execution speed of a
slower program, and “slowdown" is the ratio of the execution time
of a slower program to the execution time of a faster program.
When benchmarks were tested with XS or S input, WebAssembly
is faster than JavaScript for almost all benchmarks (97.6% and 95.1%
for XS and S respectively). On average, WebAssembly achieves a
speedup of 26.99x for XS inputs and 8.22x for S inputs.
However, when the input size increases to M, there are 18 bench-
marks where WebAssembly becomes slower than JavaScript. For
example, the benchmark ‘Lu’ in WebAssembly was 62.50x and 2.84x
faster than JavaScript for XS (N=40) and S (N=120) input. However,
it became 2.49x slower for M input (N=400). For the remaining
23 benchmarks, the performance gap between WebAssembly and
JavaScript also drops significantly (6.70x on average). For example,
the WebAssembly version of the ‘3mm’ benchmark is 47.71x, 10.54x,
and 1.12x faster than its JavaScript version, with XS input, S input,
and M input respectively. When the input size further increases to
L or XL, the number of benchmarks that JavaScript performs faster
is not increasing anymore.
Memory Usage. Table 4 shows the statistics of the memory re-
sult presented in Fig. 9. As shown in Table 4, the memory usage
of JavaScript stays fairly stable (between 878.73KB and 889.20KB)
with diverse inputs. By contrast, the WebAssembly programs con-
sume significantly more memory when the input size increases
to L (increases by ≈24MB) and XL (increases by ≈74MB). This is
because WebAssembly does not support garbage collection [39].
When a WebAssembly module was instantiated, a large chunk of
linear memory was initialized to emulate memory allocations. If
the linear memory is fully occupied, instead of reclaiming memory
that is no longer in use, the linear memory is further extended to
a bigger size. By contrast, JavaScript employs garbage collection
which dynamically monitors memory allocations and reclaims the
memory that is no longer needed. The result shows that JavaScript
is more memory-efficient than WebAssembly.
In addition, we observe that all PolyBenchC benchmarks com-
piled to JavaScript have similar memory usage (between 882 and
908 KB, the yellow line in sub-graphs from Covariance to Seidel-2d
in Fig. 9) regardless of input sizes. The structure of benchmarks: a
unified test framework with different calculation core, may lead to
this result. JavaScript’s memory management system introduced
above can handle all cores in benchmarks with similar memory us-
age. With a fixed amount of unified test framework memory usage,
different benchmarks finally have similar memory usage. On the
contrast, CHStone benchmarks did not have a unified framework,
so their JavaScript memory usage vary.
Firefox performance with diverse input sizes. We also measure
4.3.2
execution time and memory usage of WebAssembly and JavaScript
with five input sizes on Firefox v71.
541
(a) C source code(c) WebAssemblywith -Ofast(b) WebAssemblywith –O2 7(func$f58...9call$f310local.get$l011...)1  void adpcm_main() {2    ...3    decode(compressed[i/2]); 4    result[i] = xout1;      5    result[i+1] = xout2;  6    ...}11(func$f512...13call$f314local.get$l015i32.const 216i32.shl17i32.const105029618i32.load19i32.storeoffset=105030020local.get$l021i32.const122i32.add23i32.const224i32.shl25i32.const105070026i32.load27i32.storeoffset=105030028local.get$l029...)-Ofast-O2(a) WebAssemblywith –O21(func$f412...3LOOP $L04local.get$l105i32.const2606f64.convert_i32_s7f64.div8...)(b) WebAssemblywith –O19  (func$f41 (param $p0f64)10 ...11 LOOP $L012local.get$l1013local.get$p014f64.div15...)IMC ’21, November 2–4, 2021, Virtual Event, USA
Y. Yan et al.
Figure 9: Execution time (left y-axis) and memory usage (right y-axis) of WebAssembly and JavaScript of the 41 benchmarks with five sets of
input. Each benchmark was compiled with optimization level -O2 and was tested on Chrome v79.
Table 6: Firefox average memory usages (in KB).
Input Size
Extra-small
Small
Medium
Large
Extra-large
JavaScript WebAssembly
1,600.31
1,674.03
2,583.72
26,594.05
103,982.74
508.67
492.02
525.02
517.88
511.26
Table 5 shows the statistics of the execution time on Firefox.
When input sizes are M, L, and XL, similar to Chrome, WebAssem-
bly achieves better performance than JavaScript (1.08x speedup for
M, 1.37x speedup for L, and 1.67x speedup for XL). [S2: However,
different from Chrome,] the percentage of benchmarks where We-
bAssembly runs faster than JavaScript becomes higher when the
input size increases (60.1% for M, 70.7% for L, and 85.4% for XL).
When benchmarks were tested with XS or S input, most JavaScript
benchmarks are faster than WebAssembly (80.5% and 70.7% for XS
and S respectively), which is different from Chrome where most
JavaScript benchmarks were slower than WebAssembly. On aver-
age, WebAssembly performs 3.05x slowdown for XS input and 1.52x
slowdown for S input on Firefox.
The memory usage in Firefox is shown in Table 6. In general, Fire-
fox and Chrome memory usage has a similar trend. The JavaScript
memory usage is relatively stable (between 492.02KB and 517.88KB)
with different input sizes. By contrast, the WebAssembly programs
have significantly more memory usage when the input size in-
creases from M to L (increases by ≈24MB) and from L to XL (in-
creases by ≈77MB). Another noticeable point is Firefox’s JavaScript
memory usage is smaller than Chrome for all input sizes. For We-
bAssembly, Firefox uses less memory than Chrome when executing
XS, S, M, and L benchmarks, but uses more memory when executing
XL benchmarks.
4.4 Impact of JIT Optimization
JIT Optimization for JS vs. WASM. The JavaScript engines in
4.4.1
modern browsers leverage JIT compilation to improve the perfor-
mance of the frequently executed code (e.g., hot-loops) in JavaScrip-
t/WebAssembly programs. To better understand the correlation
between performance and JIT, we compare the execution time of
JS/WASM between JIT-enabled Chrome and JIT-less Chrome. Specif-
ically, we use the ‘–no-opt’ [41] flag and ‘–liftoff–no-wasm-
tier-up’ to disable the JIT optimization (i.e., TurboFan optimizing
compiler) for JavaScript and WebAssembly in Chrome.
Fig. 10(a) and Fig. 10(b) show performance improvement of
JavaScript compiled from PolyBench and CHStone, respectively.
Fig. 10(c) and Fig. 10(d) shows the results of WebAssembly compiled
from both benchmark suites. The x-axis presents target programs
under test and the y-axis represents the performance improvement
with JIT optimization compared with the executions without JIT.
Specifically, we run each program with and without JIT and com-
pare the measured execution times of them. For example, a value
of 20 in the graph means the program runs 20x faster with JIT than
the one without JIT. In each graph, the last two bars represent the
geometric mean and average.
542
XSSMLXL   0100kExec. Time (ms)Covariance050k100kXSSMLXL0100kCorrelation050k100kXSSMLXL05k10kGemm050k100kXSSMLXL0100200Gemver050k100kXSSMLXL02040Gesummv050k100kXSSMLXL050kSymm050k100kMemory (KB)XSSMLXL   0 20k 40kExec. Time (ms)Syrk050k100kXSSMLXL050k100kSyr2k050k100kXSSMLXL050kTrmm050kXSSMLXL050k100k2mm0100kXSSMLXL0100k3mm0100k200kXSSMLXL050Atax050k100kMemory (KB)XSSMLXL   0  50Exec. Time (ms)Bicg050k100kXSSMLXL02k4kDoitgen050k100kXSSMLXL0100200Mvt050k100kXSSMLXL010k20kCholesky0100k200kXSSMLXL02040Durbin1k1.5k2kXSSMLXL0100k200kGramschmidt050k100kMemory (KB)XSSMLXL   0100kExec. Time (ms)Lu0100k200kXSSMLXL0100kLudcmp0100k200kXSSMLXL010Trisolv050k100kXSSMLXL01kDeriche0200k400kXSSMLXL0200kFloyd-warshall050k100kXSSMLXL0100k200kNussinov050k100kMemory (KB)XSSMLXL   0 50k100kExec. Time (ms)Adi050k100kXSSMLXL020kFdtd-2d050k100kXSSMLXL025k50kHeat-3d050k100kXSSMLXL01020Jacobi-1d1k1.5k2kXSSMLXL020k40kJacobi-2d050k100kXSSMLXL0100kSeidel-2d050k100kMemory (KB)XSSMLXL   0  10Exec. Time (ms)ADPCM1k1.5k2kXSSMLXL02.505AES1k1.5k2kXSSMLXL010BLOWFISH1k1.5k2kXSSMLXL01DFADD1k1.5k2kXSSMLXL024DFDIV1k1.5k2kXSSMLXLInput size0.501DFMUL1k1.5k2kMemory (KB)XSSMLXLInput size   0  20Exec. Time (ms)DFSIN1k1.5k2kXSSMLXLInput size0.501GSM1k1.5k2kXSSMLXLInput size0.200.40MIPS1k1.5k2kXSSMLXLInput size24MOTION1k1.5k2kXSSMLXLInput size0510SHAJavaScript Execution TimeWebAssembly Execution Time1k1.5k2kMemory (KB)JavaScript MemoryWebAssembly MemoryUnderstanding the Performance of WebAssembly Applications
IMC ’21, November 2–4, 2021, Virtual Event, USA
Table 7: WASM performance improvement with JIT on
Chrome vs. Firefox (numbers are execution speed ratio of
default setting to only enabling basic/optimizing compiler).
Benchmark
Metric
PolyBenchC
CHStone
Overall
Geo. mean
Average
Geo. mean
Average
Geo. mean
Average
Basic only
LiftOff Baseline TurboFan
0.88x
0.90x
1.07x
1.07x
0.93x
0.95x
Optimizing only
Ion
0.90x
0.90x
0.92x
0.93x
0.91x
0.91x
1.10x
1.11x
1.09x
1.09x
1.09x
1.10x
1.15x
1.20x
1.03x
1.04x
1.12x
1.16x
Figure 10: Performance improvement with JIT optimization.
In general, the performance of JavaScript programs is affected
significantly by JIT optimization. Programs from CHStone are af-
fected less than the programs from PolyBench. Our manual inspec-
tion shows that this is because, in part, the programs and inputs
of CHStone benchmarks are too small to trigger JIT at runtime.
However, the performance improvement ratios of benchmarks in
WebAssembly are mostly near 1, meaning that there is no significant
performance difference with and without JIT.
Table 8: Arithmetic average statistics of Fig. 12 and Fig. 13.
JavaScript
Firefox
D.1 Exec. Time (ms)
48.26
M.2 Exec. Time (ms)
167.03
D.1 Memory (KB)
505.41
M.2 Memory (KB)
692.63
1, 2: D means Desktop and M means Mobile.
Chrome
45.57