# 五、使用 Java 应用创建映像
现在我们有了一个基于 Spring Bootstrap 的简单但功能强大的 Java 微服务，我们可以走得更远。在我们使用 Kubernetes 部署它之前，让我们将其打包为 Docker 映像。在这一章中，我们将创建一个包含我们的应用的 Docker 映像，我们将对一个 Spring Boot 应用进行 Docker 化，使其在一个隔离的环境(一个容器)中运行。
本章涵盖的主题包括:
*   创建文档文件
*   dockerfile instructions(Docker 文件说明)
*   塑造形象
*   创建和删除映像
让我们从`Dockerfile`的定义开始，这将是我们容器的定义。
# Dockerfile
从[第一章](01.html)、*对 Docker* 的介绍中，你会记得`Dockerfile`是一种建立形象的方法。这是一个包含指令的纯文本文件，由 Docker 按照指令放置的顺序执行。每个`Dockerfile`都有一个 Docker 引擎将用来构建的基础映像。生成的映像将是文件系统的特定状态:活动容器的只读、冻结的不可变快照，由表示文件系统在不同时间点的变化的层组成。
Docker 中的映像创建流程非常简单，基本上包括两个步骤:
1.  首先，您准备一个名为`Dockerfile`的文本文件，其中包含一系列关于如何构建映像的说明。您可以在`Dockerfile`中使用的指令集不是很广泛，但足以完全指导 Docker 如何创建映像。
2.  接下来，执行`docker build`命令，根据刚刚创建的`Dockerfile`创建一个 Docker 映像。`docker build`命令在上下文中运行。构建的上下文是指定位置的文件，可以是`PATH`或网址。`PATH`是本地文件系统上的一个目录，网址是一个 Git 存储库位置。上下文被递归处理。`PATH`将包括任何子目录。该网址将包括存储库及其子模块。
如果您创建了一个包含 Java 应用的映像，您也可以跳过第二步，使用一个可用的 Docker Maven 插件。在我们学习了如何使用`docker build`命令构建映像之后，我们还将使用 Maven 创建我们的映像。当使用 Maven 构建时，`docker build`命令的上下文(或者在这种情况下是构建过程)将由 Maven 自己自动提供。实际上，根本不需要`Dockerfile`，它会在构建过程中自动创建。我们一会儿就会谈到这个问题。
一个`Dockerfile`的标准名称只是`Dockerfile`。这只是一个纯文本文件。根据您使用的集成开发环境，有插件提供 Dockerfile 语法高亮显示和自动完成，这使得编辑它们变得轻而易举。Dockerfile 指令使用简单明了的语法，这使得它们非常容易理解、创建和使用。它们被设计成不言自明的，特别是因为它们允许注释，就像正确编写的应用源代码一样。现在让我们来了解一下`Dockerfile`的指示。
# dockerfile instructions(Docker 文件说明)
我们将从每个 Dockerfile 在顶部必须具有的指令开始，即`FROM`指令。
# 从
这是 Dockerfile 中的第一条指令。它为文件中接下来的每个后续指令设置基本映像。`FROM`指令的语法很简单。只是。
`FROM `，或`FROM :`，或`FROM @`
`FROM`指令以`tag`或`digest`为参数。如果你决定跳过它们，Docker 会假设你想从`latest`标签构建你的形象。要知道`latest`并不总是你想要建立的最新版本的形象。`latest`标签是一种特殊的标签。此外，它可能不会像您预期的那样工作。嗯，长话短说，没有什么特别的意思，除非映像创作者(`openjdk`或者`fabric8`)有特定的`build`、`tag`、`push`图案。分配给映像的`latest`标签仅仅意味着它是最后构建和执行的映像，没有提供特定的标签。很容易理解，可能会混淆，拉标签`latest`的图片取不到软件的最新版本。
Docker will not take care of checking if you are getting the newest version of the software when pulling the image tagged `latest`.
如果 Docker 在构建过程中找不到您提供的标记或摘要，它将抛出一个错误。你应该明智地选择基础形象。我的建议是总是更喜欢可以在 Docker Hub 上找到的官方存储库。通过选择一个官方映像，你可以非常确定它将是高质量的，经过测试，支持和维护的。
对于 Java 应用的容器化，我们有两种选择。第一种是使用一个基本的 Linux 映像，并使用`RUN`指令安装 Java(稍后我们将介绍`RUN`)。第二个选项是获取一个包含已经安装的 Java 运行时的映像。在这里你有更多的选择。例如:
*   `openjdk`:包含 Java 平台开源实现的官方存储库，标准版。标签`latest`，如果您没有指定任何标签，将会被使用，指向`8u121-alpine` OpenJDK 发行版，在撰写本书时
*   `fabric8/java-alpine-openjdk8-jdk`:fabric 8 Maven 插件实际上也在使用这个基础映像
*   `frolvlad/alpine-oraclejdk8`:有三个标签可以选择:full(只有 src tarballs 被移除)、clean(桌面部分被清除)、slim、除了编译器和 JVM 之外的所有东西都被移除。最新的标签指向干净的
*   `jeanblanchard/java`:包含基于 Alpine Linux 的映像的存储库，以保持最小的大小(大约是基于 Ubuntu 的映像的 25%)。标签`latest`指向甲骨文 Java 8(服务器 JRE)
通过在 https://hub.docker.com Docker 中心注册并创建您的帐户，您将可以访问 Docker 商店。在[https://store.docker.com](https://store.docker.com)有售。尝试在 Docker 商店中搜索与 Java 相关的映像。你会发现很多有用的图片可供选择，其中之一就是官方的 Oracle Java 8 SE (Server JRE)图片。这个 Docker 映像提供了服务器 JRE，这是一个专门针对在服务器环境中部署 Java 的运行时环境。服务器 JRE 包括用于 JVM 监控的工具和服务器应用通常需要的工具。你可以通过在 Docker 商店购买来获得这个官方的 Java Docker 映像。点击获取内容，它的价格为 0.00 美元，因此它将免费用于您的开发目的。
Take note that images coming from the Docker Store are bound to your Docker Hub account. Before you pull them or build your own images having them as the base image, you will need to the authenticate to Docker Store using the `docker login` command and your Docker Hub credentials.
为了我们的目的，让我们选择`jeanblanchard/java`。这是运行在阿尔卑斯 Linux 发行版之上的官方甲骨文 Java。基本映像很小，下载速度也很快。我们的`FROM`说明将与此相同:
```
FROM jeanblanchard/java:8
```
如果在您的 Docker 主机上(例如，在您的本地机器上)找不到`FROM`映像，Docker 将尝试从 Docker Hub(或者您的私有存储库，如果您已经设置了的话)中找到并拉出它。`Dockerfile`中的所有后续说明将使用`FROM`中指定的映像作为基础起点。这就是为什么它是强制性的；有效的`Dockerfile`必须在顶部。
# 维护
使用`MAINTAINER`指令，设置生成映像的`Author`字段。这可以是你的名字，用户名，或者任何你想作为图片作者使用你正在写的`Dockerfile`创建的东西。这个命令可以放在`Dockerfile`中的任何地方，但是好的做法是把它放在文件的顶部，就在`FROM`指令之后。这是一个所谓的非执行命令，意味着它不会对生成的映像进行任何更改。语法也很简单:
```
MAINTAINER authors_name
```
# 工作目录
`WORKDIR`指令在 Dockerfile 中为其后的任何`CMD`、`RUN`、`ENTRYPOINT`、`COPY`和`ADD`指令添加一个工作目录。指令的语法是`WORKDIR /PATH.`如果提供了相对路径，一个 Dockerfile 中可以有多个`WORKDIR`指令；它将相对于先前`WORKDIR`指令的路径。
# 注意缺陷障碍 (Attention Deficit Disorder)
`ADD`基本上做的是将文件从源复制到容器自己的文件系统中的期望目标位置。它需要两个参数:源(``)和目的地(``):
```
ADD  
```
源可以有两种形式:它可以是文件的路径、目录或网址。该路径是相对于将要启动构建过程的目录(我们前面提到的构建上下文)的。这意味着不能将`"../../config.json"`作为`ADD`指令的源路径参数。
源路径和目标路径可以包含通配符。这些与传统文件系统中的相同:对于任何文本字符串都是`*`，对于任何单个字符都是`?`。
例如，`ADD target/*.jar /`会将所有以`.jar`结尾的文件添加到映像文件系统的根目录中。
如果需要，可以指定多个源路径，并用逗号分隔。所有这些都必须相对于构建上下文，就像只有一个源路径一样。如果您的源路径或目标路径包含空格，您将需要使用特殊的语法，在:
`ADD ["" ""]`
如果源路径不以结尾斜杠结束，它将被视为单个文件，并被复制到目标中。如果源路径以一个尾随斜杠结束，它将被视为一个目录:它的全部内容将被复制到目标路径，但目录本身不会在目标路径上创建。因此，正如你所看到的，当向映像添加文件或目录时，一个尾随斜线`/`是非常重要的。如果源路径指向一种常见格式(如 ZIP、TAR 等)的压缩归档文件，它将被解压缩到目标路径中。Docker 不能通过文件名识别档案，它会检查文件的内容。
If the archive is damaged or unreadable by Docker in any other way, it will not be extracted and you will not be given an error message. The file will just be copied into the destination path.
相同的结尾斜杠规则适用于目标路径；如果它以一个尾随斜杠结束，则意味着它是一个目录。否则，它将被视为单个文件。这为您构建映像的文件系统内容提供了极大的灵活性；您可以将文件添加到目录中，将文件作为单个文件添加(具有相同或不同的名称)，或者只添加整个目录。
`ADD`命令不仅仅是从本地文件系统复制文件，你可以用它从网络上获取文件。如果源是一个网址，那么网址的内容将被自动下载并放在目的地。请注意，从网络下载的文件存档不会被解压缩。同样，在下载文件时，尾部斜线很重要；如果目标路径以斜杠结束，文件将被下载到目录中。否则，下载的文件将只保存在您作为目标路径提供的名称下。
``要么是绝对路径，要么是相对于`WORKDIR`指令指定的目录的路径(我们稍后会介绍)。源(或多个源)将被复制到指定的目标。例如:
*   `ADD config.json projectRoot/`将把`config.json`文件添加到`/projectRoot/`
*   `ADD config.json /absoluteDirectory/`将把`config.json`文件添加到`/absoluteDirectory/`
当涉及到在映像中创建的文件的所有权时，它们将总是使用用户 ID ( `UID` ) `0`和组 ID ( `GID` ) `0`来创建。权限将与源文件中的相同，除非是从远程 URL 下载的文件:在这种情况下，它将获得权限值`600`(只有所有者可以读写该文件)。如果您需要更改这些值(所有权或权限)，您需要在`ADD`指令之后的 Dockerfile 中提供更多指令。
If the files that you need to add to the image are placed on the URL that needs authentication, the `ADD` instruction will not work. You will need to use a shell command to download the file, such as `wget` or `curl`.
注意`ADD`不应该用如果不需要它的特殊功能，比如拆封档案，应该用`COPY`代替。
# 复制
`COPY`指令将从``复制新的文件或目录，并将它们添加到路径``处的容器文件系统中。
它与`ADD`指令非常相似，甚至语法也没有什么不同:
```
COPY  
```
从`ADD`开始的相同规则适用于`COPY`:所有的源路径必须相对于构建的上下文。同样，在源路径和目标路径的末尾出现尾斜杠也很重要:如果存在，该路径将被视为文件；否则，它将被视为一个目录。
当然，和`ADD`一样，可以有多个源路径。如果源路径或目标路径包含空格，则需要用方括号将它们括起来:
```
COPY ["" ""]
```
``是绝对路径(如果以斜杠开头)，或者是相对于`WORKDIR`指令指定的路径的路径。
可以看到`COPY`的功能和`ADD`指令几乎一样，只有一点不同。`COPY`仅支持将本地文件基本复制到容器中。另一方面，`ADD`给出了一些更多的功能，比如档案提取、通过 URL 下载文件等等。Docker 的最佳实践是，如果你不需要`ADD`的附加功能，你应该更喜欢`COPY`。由于`COPY`命令的透明性，`Dockerfile`将更加清晰易懂。
对于`ADD`和`COPY`指令来说，有一个共同的重要方面，那就是缓存。基本上，Docker 会在构建过程中缓存进入映像的文件。检查映像中一个或多个文件的内容，并计算每个文件的校验和。在缓存查找过程中，会将校验和与现有映像中的校验和进行比较。如果文件中发生了任何变化，例如内容和元数据，则缓存将失效。否则，如果源文件没有更改，现有的映像层将被重用。
If you have multiple Dockerfile steps that use different files from your context, `COPY` them individually, rather than all at once. This will ensure that each step's build cache is only invalidated (forcing the step to be re-run) if the specifically required files change.
如您所见，`COPY`指令的语法和行为与`ADD`指令几乎相同，但它们的特性集却有所不同。对于不需要`ADD`功能的文件和目录，您应该始终使用`COPY`。
# 奔跑
`RUN`指令是`Dockerfile`的中央执行指令。本质上，`RUN`指令将在当前映像之上的新图层中执行一个命令(或多个命令)，然后提交结果。生成的提交映像将用作`Dockerfile`中下一条指令的基础。从[第 1 章](01.html)、*Docker 简介*中大家会记得，分层是 Docker 中的核心概念。`RUN`，以命令为参数，运行命令创建新图层。
这也意味着`COPY`和`ENTRYPOINT`设置的参数可以在运行时被覆盖，所以如果你在启动你的容器后没有改变任何东西，结果将总是一样的。`RUN`但是，将在构建时执行，无论你在运行时做什么，它的效果都会在这里。
To make your Dockerfile more readable and easier to maintain, you can split long or complex `RUN` statements on multiple lines separating them with a backslash.
来自`Dockerfile`的`RUN`命令将按其出现的顺序执行。
Each `RUN` instruction creates a new layer in the image.
从[第 1 章](01.html)、*Docker 简介*中已经知道，层正在被 Docker 缓存和重用。`RUN`指令的缓存在下一次构建时不会自动失效。例如，与`RUN apt-get upgrade -y`相同的指令缓存将在下一次构建中重用。是什么让缓存变得重要？在大多数情况下，缓存非常有用，可以在构建映像时为您节省大量时间。这使得建造一个新的容器非常非常快。不过，有一句话警告。有时缓存会很危险，并提供意想不到的结果。在构建过程中，缓存被大量使用，当您想要将`RUN`命令的更新输出放入新容器时，这可能会导致问题。如果`RUN`命令在两次构建之间没有改变，Docker 的缓存不会失效。实际上，Docker 将重用缓存中以前的结果。这显然是有害的。想象一下，当您使用`RUN`命令从 Git 存储库中提取源代码时，使用`git clone`作为构建映像的第一步。
Be aware when the Docker cache needs to be invalidated, otherwise you will get unexpected results with your image builds.
这就是为什么知道如何有选择地使缓存无效是件好事。在 Docker 世界中，这被称为缓存破坏。
考虑下面的例子。大概`RUN`最常见的用例是`apt-get`的一个应用，这是一个在 Ubuntu 上下载包的包管理器命令。假设我们有以下安装 Java 运行时的 Dockerfile:
```
FROM ubuntu 
RUN apt-get update 
RUN apt-get install -y openjdk-8-jre 
```
如果我们从这个`Dockerfile`构建一个映像，两个`RUN`指令的所有图层将被放入图层缓存。但是，过了一会儿，你决定想要你的映像中的`node.js`包，所以现在 Dockerfile 看起来和这个一样:
```
FROM ubuntu 