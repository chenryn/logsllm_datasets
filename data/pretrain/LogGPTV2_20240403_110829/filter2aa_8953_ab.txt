**/boot/grub**
开机设定相关
---
### /dev
dev 是 Device(设备)的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的.
**/dev/null**
在类 Unix 系统中，`/dev/null` 称空设备，是一个特殊的设备文件，它丢弃一切写入其中的数据(但报告写入操作成功)，读取它则会立即得到一个 EOF.
**/dev/pty/**
伪终端(Pseudo Terminal)是成对的逻辑终端设备(即 master 和 slave 设备, 对 master 的操作会反映到 slave 上)。
例如 `/dev/ptyp3` 和 `/dev/ttyp3`(或者在设备文件系统中分别是 `/dev/pty/m3` 和 `/dev/pty/s3`)，它们与实际物理设备并不直接相关
如果一个程序把 ptyp3(master 设备)看作是一个串行端口设备，则它对该端口的读/写操作会反映在该逻辑终端设备对应的另一个 ttyp3(slave 设备)上面。
而ttyp3则是另一个程序用于读写操作的逻辑设备。
这样，两个程序就可以通过这种逻辑设备进行互相交流，而其中一个使用 ttyp3 的程序则认为自己正在与一个串行端口进行通信。这很象是逻辑设备对之间的管道操作。对于 ttyp3(s3)，任何设计成使用一个串行端口设备的程序都可以使用该逻辑设备。但对于使用 ptyp3 的程序，则需要专门设计来使用 ptyp3(m3)逻辑设备。
例如，如果某人在网上使用 telnet 程序连接到你的计算机上，则 telnet 程序就可能会开始连接到设备 ptyp2(m2)上(一个伪终端端口上),此时一个 getty 程序就应该运行在对应的 ttyp2(s2)端口上。
当 telnet 从远端获取了一个字符时，该字符就会通过 m2、s2 传递给 getty 程序，而 getty 程序就会通过 s2、m2 和 telnet 程序往网络上返回”login:”字符串信息。
这样，登录程序与 telnet 程序就通过“伪终端”进行通信。通过使用适当的软件，就可以把两个甚至多个伪终端设备连接到同一个物理串行端口上。
在使用设备文件系统 (device filesystem)之前，为了得到大量的伪终端设备特殊文件，使用了比较复杂的文件名命名方式。因为只存在16个 ttyp(ttyp0—ttypf) 的设备文件，为了得到更多的逻辑设备对，就使用了如 q、r、s 等字符来代替 p。
例如，ttys8 和 ptys8 就是一个伪终端设备对,不过这种命名方式目前仍然在RedHat等Linux系统中使用着。
但 Linux 系统上的 Unix98 并不使用上述方法，而使用了”pty master”方式，例如 `/dev/ptm3`。它的对应端则会被自动地创建成 `/dev/pts/3`。这样就可以在需要时提供一个pty伪终端。
目录 `/dev/pts` 是一个类型为devpts的文件系统，并且可以在被加载文件系统列表中看到。虽然“文件” `/dev/pts/3` 看上去是设备文件系统中的一项，但其实它完全是一种不同的文件系统。
即:
```
TELNET —> TTYP3(S3: slave) —> PTYP3(M3: master) —> GETTY
```
**/dev/pts/n**
在 Xwindows 模式下的伪终端.
**/dev/random 与 /dev/urandom**
`/dev/random` 和 `/dev/urandom` 是 Linux 系统中提供的随机伪设备，这两个设备的任务，是提供永不为空的随机字节数据流。很多解密程序与安全应用程序（如 SSH Keys,SSL Keys 等）需要它们提供的随机数据流。
这两个设备的差异在于：`/dev/random` 的 random pool 依赖于系统中断，因此在系统的中断数不足时，`/dev/random` 设备会一直封锁，尝试读取的进程就会进入等待状态，直到系统的中断数充分够用, `/dev/random` 设备可以保证数据的随机性。`/dev/urandom` 不依赖系统的中断，也就不会造成进程忙等待，但是数据的随机性也不高。
`/dev/urandom` 是伪随机数生成器（PRND），而 `/dev/random` 是“真”随机数生成器。
使用 cat 命令可以读取 `/dev/random` 和 `/dev/urandom` 的数据流（二进制数据流,很难阅读），可以用 od 命令转换为十六进制后查看
```bash
cat /dev/random | od -x
cat /dev/urandom | od -x
```
在 cat 的过程中发现，`/dev/random` 产生的速度比较慢，有时候还会出现较大的停顿，而 `/dev/urandom` 的产生速度很快，基本没有任何停顿。
而使用 dd 命令从这些设备中 copy 数据流，发现速度差异很大：
```bash
dd count=1 ibs=1024 if=/dev/random > /dev/null
dd count=1 ibs=1024 if=/dev/urandom > /dev/null
```
扩展阅读:
- [On Linux’s Random Number Generation](https://research.nccgroup.com/2019/12/19/on-linuxs-random-number-generation/)
**/dev/tty**
如果当前进程有控制终端(Controlling Terminal)的话，那么 `/dev/tty` 就是当前进程的控制终端的设备特殊文件。可以使用命令”ps -ax”来查看进程与哪个控制终端相连。
对于你登录的 shell，`/dev/tty` 就是你使用的终端，设备号是(5,0)。使用命令”tty”可以查看它具体对应哪个实际终端设备。`/dev/tty` 有些类似于到实际所使用终端设备的一个联接。
**/dev/ttyn, /dev/console**
在Linux 系统中，计算机显示器通常被称为控制台终端 (Console)
它仿真了类型为Linux的一种终端(TERM=Linux)，并且有一些设备特殊文件与之相关联：tty0、tty1、tty2 等。
当你在控制台上登录时，使用的是 tty1。使用 Alt+[F1—F6] 组合键时，我们就可以切换到 tty2、tty3 等上面去。
tty1-tty6 等称为虚拟终端，而 tty0 则是当前所使用虚拟终端的一个别名，系统所产生的信息会发送到该终端上。
因此不管当前正在使用哪个虚拟终端，系统信息都会发送到控制台终端上。你可以登录到不同的虚拟终端上去，因而可以让系统同时有几个不同的会话存在。只有系统或超级用户 root 可以向 /dev/tty0 进行写操作 即下例：
```bash
tty # 查看当前TTY
echo “test tty0” > /dev/tty0
```
**/dev/ttySn**
串行端口终端(Serial Port Terminal)是使用计算机串行端口连接的终端设备。计算机把每个串行端口都看作是一个字符设备。
有段时间这些串行端口设备通常被称为终端设备，因为那时它的最大用途就是用来连接终端。
这些串行端口所对应的设备名称是 `/dev/tts/0`(或 `/dev/ttyS0`), `/dev/tts/1`(或 `/dev/ttyS1`)等，设备号分别是(4,0), (4,1)等，分别对应于 DOS 系统下的 COM1、COM2 等。
若要向一个端口发送数据，可以在命令行上把标准输出重定向到这些特殊文件名上即可！！！！
例如，在命令行提示符下键入：`echo test > /dev/ttyS1` 会把单词”test”发送到连接在 ttyS1(COM2)端口的设备上。可接串口来实验。
---
### /etc
这个目录用来存放所有的系统管理所需要的配置文件和子目录.
**/etc/audit/auditd.conf**
auditd 守护程序的默认配置文件
```bash
# 设置日志文件
log_file = /var/log/audit/audit.log
log_group = root
log_format = ENRICHED
flush = INCREMENTAL_ASYNC
freq = 50
# 设置日志文件大小，单位是MB
max_log_file = 8
# 日志文件滚动的数目，如果设置为小于 2，则不会循环记录。没设置则位 0，不循环日志文件
num_logs = 5
priority_boost = 4
name_format = NONE
##name = mydomain
# 日志文件到达最大值后的动作，ROTATE 是滚动记录
max_log_file_action = ROTATE
```
更详细的配置信息请查看 https://man7.org/linux/man-pages/man5/auditd.conf.5.html , [auditd](../实验/auditd.md)
**/etc/audit/audit.rules**
audit 记录审计规则的文件
audit可以自定义对指定的文件或命令进行审计（如监视rm命令被执行、/etc/passwd文件内容被改变），只要配置好对应规则即可，配置规则可以通过命令行（auditctl 临时生效）或者编辑配置文件（audit.rules）两种方式来实现。
```bash
# First rule - delete all
# 第一条规则--删除所有
-D
## Increase the buffers to survive stress events.
## Make this bigger for busy systems
# 增加缓冲区，以度过压力事件。
-b 8192
## This determine how long to wait in burst of events
# 决定了在突发事件中要等待多长时间
--backlog_wait_time 60000
## Set failure mode to syslog
# 将故障模式设置为 syslog
-f 1
```
监控文件系统行为
* 规则格式：-w 路径 -p 权限 -k 关键字
其中权限动作分为四种
* r 读取文件
* w 写入文件
* x 执行文件
* a 修改文件属性
```bash
# 监控 / etc/passwd 文件的修改行为
-w /etc/passwd -p wa
# 如果没有 -p 选项，则默认监视所有动作 rwxa
```
监控系统调用行为（依靠系统调用来识别）
* 规则：-a 一系列动作 -S 系统调用名称 -F 字段=值 -k 关键字
```bash
# 监视文件权限变化，因为改变权限必须调用 umask
-a entry,always -S umask -S chown
# 监视主机名变化，因为修改主机名必须调用 sethostname
-a entry,always -S sethostname -S setdomainname
# 监视系统时间变化
-a entry,always -S adjtimex -S settimeofday -S stime
# 设置系统日期和时间
-a entry,always -S stime
# 监控用户和组ID变化
-a entry,always -S setuid -S seteuid -S setreuid
-a entry,always -S setgid -S setegid -S setregid
# 监控挂载
-a entry,always -S mount -S umount
```
**/etc/bashrc (ubuntu 为 /etc/bash.bashrc)**
为每一个运行 bash shell 的用户执行此文件.当 bash shell 被打开时，该文件被读取.如果你想对所有的使用 bash 的用户修改某个配置并在以后打开的 bash 都生效的话可以修改这个文件，修改这个文件不用重启，重新打开一个 bash 即可生效.
Ubuntu 没有此文件，与之对应的是 `/etc/bash.bashrc` .
**/etc/crontab**
`/etc/crontab` 是系统的周期任务, `/etc/crontab` 是个纯文本文件，可以 root 的身份编辑这个文件
基本上，cron 服务的最低检测时间单位是分钟，所以 cron 会每分钟读取一次 `/etc/crontab` 与 `/var/spool/cron` 中的数据内容，因此，只要编辑完 `/etc/crontab` 文件并且保存之后，crontab 时设定就会自动执行。但是某些原因或在其他的 unix 系统中，由于 crontab 是读到内存中，所以在修改完 `/etc/crontab` 之后可能并不会马上执行，这时请重新启动 crond 服务。
```
/etc/rc.d/init.d/crond   restart
```