RX packets:2555 errors:0 dropped:0 overruns:0 frame:0
TX packets:70 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:1000
RX bytes:239892 (234.2 KiB) TX bytes:11153 (10.8 KiB)
一般来说，直接输入 ifconfig 就会列出目前已经被启动的卡，不论这个卡是否有给予
IP，都会被显示出来。而如果是输入 ifconfig eth0，则仅会秀出这张接口的相关数据，
而不管该接口是否有启动。所以如果你想要知道某张网络卡的 Hardware Address，直
接输入‘ ifconfig "网络接口代号" ’即可喔！ ^_^！至于上表出现的各项数据是这
样的(数据排列由上而下、由左而右)：
 eth0：就是网络卡的代号，也有 lo 这个 loopback ；
 HWaddr：就是网络卡的硬件地址，俗称的 MAC 是也；
 inet addr：IPv4 的 IP 地址，后续的 Bcast, Mask 分别代表的是
Broadcast 与 netmask 喔！
 inet6 addr：是 IPv6 的版本的 IP ，我们没有使用，所以略过；
 MTU：就是第二章谈到的 MTU 啊！
 RX：那一行代表的是网络由启动到目前为止的封包接收情况， packets 代
表封包数、errors 代表封包发生错误的数量、 dropped 代表封包由于有问题而
遭丢弃的数量等等
 TX：与 RX 相反，为网络由启动到目前为止的传送情况；
 collisions：代表封包碰撞的情况，如果发生太多次， 表示你的网络状况
不太好；
 txqueuelen：代表用来传输数据的缓冲区的储存长度；
 RX bytes, TX bytes：总接收、发送字节总量
透过观察上述的资料，大致上可以了解到你的网络情况，尤其是那个 RX, TX 内的
error 数量， 以及是否发生严重的 collision 情况，都是需要注意的喔！ ^_^
# 范例二：暂时修改网络接口，给予 eth0 一个 192.168.100.100/24 的参数
[root@www ~]# ifconfig eth0 192.168.100.100
# 如果不加任何其他参数，则系统会依照该 IP 所在的 class 范围，自动的
计算出
# netmask 以及 network, broadcast 等 IP 参数，若想改其他参数则：
[root@www ~]# ifconfig eth0 192.168.100.100 \
> netmask 255.255.255.128 mtu 8000
# 设定不同参数的网络接口，同时设定 MTU 的数值！
[root@www ~]# ifconfig eth0 mtu 9000
# 仅修改该接口的 MTU 数值，其他的保持不动！
[root@www ~]# ifconfig eth0:0 192.168.50.50
PI:EMAIL
# 仔细看那个界面是 eth0:0 喔！那就是在该实体网卡上，再仿真一个网络接
口，
# 亦即是在一张网络卡上面设定多个 IP 的意思啦！
[root@www ~]# ifconfig
eth0 Link encap:Ethernet HWaddr 08:00:27:71:85:BD
inet addr:192.168.100.100 Bcast:192.168.100.127
Mask:255.255.255.128
inet6 addr: fe80::a00:27ff:fe71:85bd/64 Scope:Link
UP BROADCAST RUNNING MULTICAST MTU:9000 Metric:1
RX packets:2555 errors:0 dropped:0 overruns:0 frame:0
TX packets:70 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:1000
RX bytes:239892 (234.2 KiB) TX bytes:11153 (10.8 KiB)
eth0:0 Link encap:Ethernet HWaddr 08:00:27:71:85:BD
inet addr:192.168.50.50 Bcast:192.168.50.255
Mask:255.255.255.0
UP BROADCAST RUNNING MULTICAST MTU:9000 Metric:1
# 仔细看，是否与硬件有关的信息都相同啊！没错！因为是同一张网卡嘛！
# 那如果想要将刚刚建立的那张 eth0:0 关闭就好，不影响原有的 eth0 呢？
[root@www ~]# ifconfig eth0:0 down
# 关掉 eth0:0 这个界面。那如果想用默认值启动 eth1：‘ifconfig eth1 up’
即可达成
# 范例三：将手动的处理全部取消，使用原有的设定值重建网络参数：
[root@www ~]# /etc/init.d/network restart
# 刚刚设定的数据全部失效，会以 ifcfg-ethX 的设定为主！
使用 ifconfig 可以暂时手动来设定或修改某个适配卡的相关功能，并且也可以透过
eth0:0 这种虚拟的网络接口来设定好一张网络卡上面的多个 IP 喔！手动的方式真是
简单啊！并且设定错误也不打紧，因为我们可以利用 /etc/init.d/network restart 来
重新启动整个网络接口，那么之前手动的设定数据会全部都失效喔！另外， 要启动某
个网络接口，但又不让他具有 IP 参数时，直接给他 ifconfig eth0 up 即可！ 这个
动作经常在无线网卡当中会进行，因为我们必须要启动无线网卡让他去侦测 AP 存在与
否啊！
ifup, ifdown
PI:EMAIL
实时的手动修改一些网络接口参数，可以利用 ifconfig 来达成，如果是要直接以
配置文件， 亦即是在 /etc/sysconfig/network-scripts 里面的 ifcfg-ethx 等档案
的设定参数来启动的话， 那就得要透过 ifdown 或 ifup 来达成了。
[root@www ~]# ifup {interface}
[root@www ~]# ifdown {interface}
[root@www ~]# ifup eth0
ifup 与 ifdown 真是太简单了！这两支程序其实是 script 而已，他会直接到
/etc/sysconfig/network-scripts 目录下搜寻对应的配置文件，例如 ifup eth0 时，
他会找出 ifcfg-eth0 这个档案的内容，然后来加以设定。 关于 ifcfg-eth0 的设定
则请参考第四章的说明。
不过，由于这两支程序主要是搜寻配置文件 (ifcfg-ethx) 来进行启动与关闭的，
所以在使用前请确定 ifcfg-ethx 是否真的存在于正确的目录内，否则会启动失败喔！
另外，如果以 ifconfig eth0 .... 来设定或者是修改了网络接口后， 那就无法再以
ifdown eth0 的方式来关闭了！因为 ifdown 会分析比对目前的网络参数与
ifcfg-eth0 是否相符，不符的话，就会放弃该次动作。因此，使用 ifconfig 修改完
毕后，应该要以 ifconfig eth0 down 才能够关闭该接口喔！
5.1.2 路由修改： route
我们在第二章网络基础的时候谈过关于路由的问题， 两部主机之间一定要有路由
才能够互通 TCP/IP 的协议，否则就无法进行联机啊！一般来说，只要有网络接口， 该
接口就会产生一个路由，所以我们安装的主机有一个 eth0 的接口，看起来就会是这样：
[root@www ~]# route [-nee]
[root@www ~]# route add [-net|-host] [网域或主机] netmask [mask]
[gw|dev]
[root@www ~]# route del [-net|-host] [网域或主机] netmask [mask]
[gw|dev]
观察的参数：
-n ：不要使用通讯协议或主机名，直接使用 IP 或 port number；
-ee ：使用更详细的信息来显示
增加 (add) 与删除 (del) 路由的相关参数：
-net ：表示后面接的路由为一个网域；
-host ：表示后面接的为连接到单部主机的路由；
netmask ：与网域有关，可以设定 netmask 决定网域的大小；
gw ：gateway 的简写，后续接的是 IP 的数值喔，与 dev 不同；
PI:EMAIL
dev ：如果只是要指定由那一块网络卡联机出去，则使用这个设定，
后面接 eth0 等
# 范例一：单纯的观察路由状态
[root@www ~]# route -n
Kernel IP routing table
Destination Gateway Genmask Flags Metric Ref
Use Iface
192.168.1.0 0.0.0.0 255.255.255.0 U 0 0
0 eth0
169.254.0.0 0.0.0.0 255.255.0.0 U 1002 0
0 eth0
0.0.0.0 192.168.1.254 0.0.0.0 UG 0 0
0 eth0
[root@www ~]# route
Kernel IP routing table
Destination Gateway Genmask Flags Metric Ref
Use Iface
192.168.1.0 * 255.255.255.0 U 0 0
0 eth0
link-local * 255.255.0.0 U 1002 0
0 eth0
default 192.168.1.254 0.0.0.0 UG 0 0
0 eth0
由上面的例子当中仔细观察 route 与 route -n 的输出结果，你可以发现有加 -n 参
数的主要是显示出 IP ，至于使用 route 而已的话，显示的则是‘主机名’喔！也就
是说，在预设的情况下， route 会去找出该 IP 的主机名，如果找不到呢？ 就会显示
的钝钝的(有点小慢)，所以说，鸟哥通常都直接使用 route -n 啦！ 由上面看起来，
我们也知道 default = 0.0.0.0/0.0.0.0 ， 而上面的信息有哪些你必须要知道的呢？
 Destination, Genmask：这两个玩意儿就是分别是 network 与 netmask 啦！
所以这两个咚咚就组合成为一个完整的网域啰！
 Gateway：该网域是通过哪个 gateway 连接出去的？如果显示 0.0.0.0 表
示该路由是直接由本机传送，亦即可以透过局域网络的 MAC 直接传讯；如果有
显示 IP 的话，表示该路由需要经过路由器 (通讯闸) 的帮忙才能够传送出去。
 Flags：总共有多个旗标，代表的意义如下：
o U (route is up)：该路由是启动的；
o H (target is a host)：目标是一部主机 (IP) 而非网域；
o G (use gateway)：需要透过外部的主机 (gateway) 来转递封包；
PI:EMAIL
o R (reinstate route for dynamic routing)：使用动态路由时，恢
复路由信息的旗标；
o D (dynamically installed by daemon or redirect)：已经由服务
或转 port 功能设定为动态路由
o M (modified from routing daemon or redirect)：路由已经被修改
了；
o ! (reject route)：这个路由将不会被接受(用来抵挡不安全的网域！)
 Iface：这个路由传递封包的接口。
此外，观察一下上面的路由排列顺序喔，依序是由小网域 (192.168.1.0/24 是
Class C)，逐渐到大网域 (169.254.0.0/16 Class B) 最后则是预设路由
(0.0.0.0/0.0.0.0)。 然后当我们要判断某个网络封包应该如何传送的时候，该封包会
经由这个路由的过程来判断喔！ 举例来说，我上头仅有三个路由，若我有一个传往
192.168.1.20 的封包要传递，那首先会找 192.168.1.0/24 这个网域的路由，找到了！
所以直接由 eth0 传送出去；
如果是传送到 Yahoo 的主机呢？ Yahoo 的主机 IP 是 119.160.246.241，我们通
过判断 1)不是 192.168.1.0/24， 2)不是 169.254.0.0/16 结果到达 3)0/0 时，OK！
传出去了，透过 eth0 将封包传给 192.168.1.254 那部 gateway 主机啊！所以说，路
由是有顺序的。
因此当你重复设定多个同样的路由时， 例如在你的主机上的两张网络卡设定为相
同网域的 IP 时，会出现什么情况？会出现如下的情况：
Kernel IP routing table
Destination Gateway Genmask Flags Metric Ref
Use Iface
192.168.1.0 0.0.0.0 255.255.255.0 U 0 0
0 eth0
192.168.1.0 0.0.0.0 255.255.255.0 U 0 0
0 eth1
也就是说，由于路由是依照顺序来排列与传送的， 所以不论封包是由那个界面 (eth0,
eth1) 所接收，都会由上述的 eth0 传送出去， 所以，在一部主机上面设定两个相同
网域的 IP 本身没有什么意义！有点多此一举就是了。 除非是类似虚拟机 (Xen,
VMware 等软件) 所架设的多主机时，才会有这个必要～