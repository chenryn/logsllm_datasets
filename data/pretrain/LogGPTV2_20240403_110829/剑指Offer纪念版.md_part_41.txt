---
## Page 281
bool isNumeric(char*string)
程可以用如下代码实现：
表示的数值，在整数或者小数的后面还有可能遇到‘e’或者‘E’。整个过
的数位。如果是一个小数，则将遇到小数点。另外，如果是用科学计数法
号。如果是，在字符串上移动一个字符，继续扫描剩余的字符串中0到9
或者‘E'，以及紧跟着的一个整数（可以有正负号）表示指数。
位表示数值的小数部分。如果数值用科学记数法表示，接下来是一个‘é’
分)。如果数值是一个小数，那么在小数点后面可能会有若干个0到9的数
和‘了’之间的为可有可无的部分）
都表示数值，
数）。例如，字符串“+100”、“5e2”、“-123”、“3.1416”及“-1E-16”
面试题54：表示数值的字符串
/RegularExpressionsMatching
bool numeric = true;
if(*string =='\o')
if(string == NULL)
判断一个字符串是否符合上述模式时，首先看第一个字符是不是正负
在数值之前可能有一个表示正负的‘－’或者‘+’。接下来是若干个
[signJintegral-digits[.[fractional-digits][e|E[sign]exponential-digits] (“[
表示数值的字符串遵循如下模式：
题目：请实现一个函数用来判断字符串是否表示数值（包括整数和小
https://github.com/zhedahht/ChineseCodingInterviewAppendix/tree/master
return false;
++string;
return false;
//for floats
scanDigits(&string);
++string;
但“12e”、“1a3.14”、
“1.2.3”
-')
第8章英文版新增面试题267
“+-5”及“12e+5.4”都不是
---
## Page 282
268
剑指Offer-
/NumericStrings
bool isExponential(char** string)
若干0到9的数位。因此 isExponential可以用如下的代码实现：
尾部分的第一个字符是‘e"或者E'，接下来可能有一个正负号，再紧跟着是
void scanDigits(char**string)
https://github.com/zhedahht/ChineseCodingInterviewAppendix/tree/master
scanDigits(string);
++(*string);
if(**string!='e'&&**string!=E')
本题完整的源代码（含单元测试用例）可参考如下网页：
函数 scanDigit 用来扫描字符串中的0到9的数位：
. == bus  ou u
函数 isExponential 用来匹配用科学记数法表示的数值的结尾部分。结
源代码
return false;
++（*string);
return false;
++（*string）;
else
//forintegers
一名企面试官精讲典型编程题（纪念版）
numeric=false;
numeric=
numeric
isExponential(&string);
'e'
*string =='E')
---
## Page 283
public:
class CharStatistics
符对应的位置作为哈希表的值。实现这种思路的参考代码如下：
容器可以用哈希表来实现。用字符的ASCII码作为哈希表的键值，而把字
入一个字符，以及更新一个字符对应的值。受面试题35的启发，这个数据
在数据容器里保存的值更新成一个特殊的值（比如负数值）。
出来时，那么它就不是只出现一次的字符，也就可以被忽略了。这时把它
它在字符流中的位置保存到数据容器里。当这个字符再次从字符流中被读
保存字符在字符流中的位置。当一个字符第一次从字符流中读出来时，把
次的字符是‘1
面试题55：字符流中第一个不重复的字符
char FirstAppearingOnce()
void Insert(char ch)
CharStatistics():index (0)
字符只能一个接着一个从字符流中读出来。可以定义一个数据容器来
为了尽可能高效地解决这个问题，需要在0(1)时间内往数据容器里插
题目：请实现一个函数用来找出字符流中第一
for（inti
int minIndex=
index++;
if(occurrence[ch]==-1)
for（inti=0;i=0 &&occurrence[i]::max();
index;
-1;
第8章英文版新增面试题269
一个只出现一次的字符。
---
## Page 284
270
剑指Offer-
在链表上向前移动 n 步，然后两个指针以相同的速度向前移动。当第二个
指针P和 P2指向链表的头结点。如果链表中的环有n个结点，指针 Pi先
的链表中，环的入口结点是结点3。
面试题56：链表中环的入口结点
链表
/FirstCharacterInStream
值对应的字符。这就是函数FirstAppearingOnce的功能。
复的字符时，我们只需要扫描整个数组，并从中找出最小的大于等于〇的
流中读出时（occurrence[i]大于或者等于0)，occurrence[ij]的值更新为－2。
时，occurrence[ij]的值更新为它在字符流中的位置。当这个字符再次从字符
有元素都初始化为－1。当一个 ASCII码为i的字符第一次从字符流中读出
occurrence[i]和ASCII 码的值为i的字符相对应。最开始的时候数组中的所
private:
源代码
受到面试题15的启发，可以用两个指针来解决这个问题。先定义两个
题目：一个链表中包含环，如何找出环的入口结点？例如，在图8.3
https://github.com/zhedahht/ChineseCodingInterviewAppendix/tree/master
本题完整的源代码（含单元测试用例）可参考如下网页：
当我们需要找出到目前为止从字符流里读出的所有字符中第一个不重
在上述代码中，哈希表用数组occurrence 实现。数组中的元素
// occurrence[i] >= O:The character has been found only once
// occurrence[i]=-2:The character has been found for mutlple times
occurrence[i]:A character with AscII value i;
index;
return ch;
一名企面试官精讲典型编程题（纪念版）
=-1:The character has not found;
---
## Page 285
ListNode* MeetingNode(ListNode* pHead)
慢两个指针相遇的结点：
时，就可以得到环中结点数了。
可以从这个结点出发，一边继续向前移动一边计数，当再次回到这个结点
果两个指针相遇，表明链表中存在环。两个指针相遇的结点一定是在环中。
个相关题目（判断一个链表里是否有环）时用到了一快一慢两个指针。如
入口结点
指针P1和P2以相同的速度在链表上向前移动直到它们相遇。它们相遇的结点就是环的
向链表的头结点；（2）由于环中有4个结点，指针P1先在链表上向前移动4步；（3）
图8.4在有环的链表中找到环的入口结点的步骤。（1）指针P1和P2在初始化时都指
向前移动，直到它们相遇。它们相遇的结点正好是环的入口结点（见图8.4
上向前移动4步（见图8.4（b)）。接下来两个指针以相同的速度在链表上
向链表的头节点（见图8.4（a））。由于环中有4个结点，指针P先在链表
图8.3结点3是链表中环的入口结点
口结点。
指针指向环的入口结点时，第一个指针已经围绕着环走了一圈又回到了入
（b)
(a)
(c))。
0-D-G-O-G-G
if（pHead==NULL)
下面代码中的函数 MeetingNode 在链表中存在环的前提下找到一快一
剩下的问题是如何得到环中结点的数目。我们在解答面试题15的第二
以图8.3为例分析两个指针的移动规律。指针P和P2在初始化时都指
第8章英文版新增面试题271
---
## Page 286
272
剑指Offer-
ListNode*
的入口结点。相应的代码如下：
ListNode*
pNodel
//movepNode1
int nodesInLoop
//getthe numberofnodesinloop
if(meetingNode
ListNode* meetingNode =MeetingNode(pHead);
在找到环中任意一个结点之后，
如果链表中不存在环，那么函数MeetingNode返回NULL。
return NULL;
while(pFast !=
if(pslow
pNode2
pNode1
++nodesInLoop;
pNode1=pNode1->m_pNext;
return NULL;
pFast =pFast->m_pNext;
pSlow = pSlow->m_pNext;
if(pFast ==pSlow)
return NULL;
return NULL;
名企面试官精讲典型编程题（纪念版）
EntryNodeOfLoop(ListNode*pHead)
pFast
return pFast;
pHead;
=pNode1->m_pNext;
pNode2
pNodel
=
0；
NULL)
NULL &&pSloW !=NULL)
<nodesInLoop;++i)
1：
pHead;
meetingNode;
就能得出环中的结点数目，并找到环
---
## Page 287
以pPreNode最终会和值为5的结点相连。
4的结点相连。接下来由于值为4的两个结点也重复了，还是会被删除，所
结点的值还是3，这两个结点应该被删除，因此pPreNode就和第一个值为
第一个值为3的结点的时候，pPreNode 指向值为2的结点。由于接下来的
相连。我们要确保 pPreNode要始终与下一个没有重复的结点连接在一起。
的前一个结点（代码中的pPreNode）和后面值比当前结点的值要大的结点
了保证删除之后的链表仍然是相连的而没有中间断开，我们要把当前结点
值与下一个节点的值相同，那么它们就是重复的结点，都可以被删除。
pHead), 而不是 void deleteDuplication(ListNode* pHead)。
也可能被删除，因此删除函数应该声明为voiddeleteDuplication(ListNode*
入待删除链表的头结点。头结点可能与后面的结点重复，也就是说头结点
删除之后，链表中只剩下3个结点
图8.5删除链表中的重复结点。（a）一个有7个结点的链表；（b）当重复的结点被
②
中重复结点被删除之后，链表如图8.5（b）所示。
面试题57：删除链表中重复的结点
/EntryNodeInListLoop
我们以图8.5中的链表为例来分析删除重复结点的过程。当我们遍历到
接下来我们从头遍历整个链表。如果当前结点（代码中的 pNode）
解决这个问题的第一步是确定删除函数的参数。当然这个函数需要输
上述删除重复结点的过程可以用如下代码实现：
题目：在一个排序的链表中，如何删除重复的结点？例如，在图8.5（a）
https://github.com/zhedahht/ChineseCodingInterviewAppendix/tree/master
return pNodel;
本题完整的源代码（含单元测试用例）请参考如下网页：
源代码