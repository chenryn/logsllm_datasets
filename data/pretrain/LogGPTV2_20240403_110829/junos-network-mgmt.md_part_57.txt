services;
otn-alarms;
}
targets {
192.168.69.179;
}
}
The Junos OS also has a more advanced filter option (notify-filter) for filtering specific traps or a group
of traps based on their object identifiers.
The SNMPv3 configuration also supports filtering of SNMPv1 and SNMPv2 traps and excluding Juniper
Networks enterprise-specific configuration management traps, as shown in the following configuration
example:
[edit snmp]
v3 {
vacm {
security-to-group {
security-model v2c {
security-name sn_v2c_trap {
group gr_v2c_trap;
}
}
}
access {
group gr_v2c_trap {
default-context-prefix {
security-model v2c {
security-level none {
read-view all;
notify-view all;
}
}
678
}
}
}
}
target-address TA_v2c_trap {
address 10.209.196.166;
port 9001;
tag-list tg1;
target-parameters TP_v2c_trap;
}
target-parameters TP_v2c_trap {
parameters {
message-processing-model v2c;
security-model v2c;
security-level none;
security-name sn_v2c_trap;
}
notify-filter nf1;
}
notify v2c_notify {
type trap;
tag tg1;
}
notify-filter nf1 {
oid .1.3.6.1.4.1.2636.4.5 exclude;
oid .1 include;
}
snmp-community index1 {
community-name "$9$tDLl01h7Nbw2axN"; ## SECRET-DATA
security-name sn_v2c_trap;
tag tg1;
}
view all {
oid .1 include;
}
}
Can I simulate traps on a device?
Yes, you can use the request snmp spoof-trap trap name command for simulating a trap to the NMS that
normally receives your device’s traps. You can also add required values using the variable-bindings
parameter.
679
The following example shows how to simulate a trap to the local NMS using variable bindings:
user@host> request snmp spoof-trap linkDown variable-bindings "ifIndex[116]=116,
ifAdminStatus[116]=1 ,ifOperStatus[116]=2 , ifName[116]=ge-1/0/1"
How do I generate a warm start SNMPv1 trap?
When the SNMP process is restarted under normal conditions, a warm start trap is generated if the
system up time is more than 5 minutes. If the system up time is less than 5 minutes, a cold start trap is
generated.
The NMS sees only the MIB OIDs and numbers, but not the names of the SNMP traps. Why?
Before the NMS can recognize the SNMP trap details, such as the names of the traps, it must first
compile and understand the MIBs and then parse the MIB OIDs.
In the Junos OS, how can I determine to which category a trap belongs?
For a list of common traps and their categories, see SNMP MIB Explorer .
Can I configure a trap to include the source IP address?
Yes, you can configure the source-address, routing-instance, or logical-instance name for the source IP
address using the trap-options command:
user@host> show snmp trap-options
source-address 10.1.1.1;
Can I create a custom trap?
Yes, you can use the jnxEventTrap event script to create customized traps as needed.
In the following example, a Junos OS operations (op) script is triggered when a UI_COMMIT_NOT_CONFIRMED
event is received. The Junos OS op script matches the complete message of the event and generates an
SNMP trap.
Example: Junos OS Op Script
version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
680
param $event;
param $message;
match / {
/*
* trapm utilty wants the following characters in the value to be escaped
* '[', ']', ' ', '=', and ','
*/
var $event-escaped = {
call escape-string($text = $event, $vec = '[] =,');
}
var $message-escaped = {
call escape-string($text = $message, $vec = '[] =,');
}
 {
var $rpc =  {
 "jnxEventTrap";
 "jnxEventTrapDescr[0]='Event-Trap' , "
_ "jnxEventAvAttribute[1]='event' , "
_ "jnxEventAvValue[1]='" _ $event-escaped _ "' , "
_ "jnxEventAvAttribute[2]='message' , "
_ "jnxEventAvValue[1]='" _ $message-escaped _ "'";
}
var $res = jcs:invoke($rpc);
}
}
template escape-string ($text, $vec) {
if (jcs:empty($vec)) {
expr $text;
} else {
var $index = 1;
var $from = substring($vec, $index, 1);
var $changed-value = {
call replace-string($text, $from) {
with $to = {
expr "\\";
681
expr $from;
}
}
}
call escape-string($text = $changed-value, $vec = substring($vec, $index
+ 1));
}
}
template replace-string ($text, $from, $to) {
if (contains($text, $from)) {
var $before = substring-before($text, $from);
var $after = substring-after($text, $from);
var $prefix = $before _ $to;
expr $before;
expr $to;
call replace-string($text = $after, $from, $to);
} else {
expr $text;
}
}
After creating your customized trap, you must configure a policy on your device to tell the device what
actions to take after it receives the trap.
Here is an example of a configured policy under the [edit event-options] hierarchy:
[edit event-options]
user@host> show
policy trap-on-event {
events UI_COMMIT_NOT_CONFIRMED;
attributes-match {
UI_COMMIT_NOT_CONFIRMED.message matches complete;
}
then {
event-script ev-syslog-trap.junos-op {
arguments {
682
event UI_COMMIT_NOT_CONFIRMED;
message "{$$.message}";
}
}
}
}
Can I disable link up and link down traps on interfaces?
Yes, link up and link down traps can be disabled in the interface configuration. To disable the traps, use
the no-traps statement at the [edit interfaces interface-name unit logical-unit-number] and [edit logical-
systems logical-system-name interfaces interface-name unit logical-unit-number] hierarchies for physical and
logical interfaces.
(traps | no-traps);
I see the link up traps on logical interfaces, but I do not see the link down traps. Is this normal
behavior?
For Ethernet and ATM types of interfaces, Junos OS does not send link down traps for a logical interface
if the physical interface is down to prevent flooding alarms for the same root cause. However, when the
physical interface and logical interfaces come back up, traps are sent indicating link up. This is because
the physical interface coming up does not necessarily mean the logical interfaces are also coming up.
For SONET types of interfaces with PPP encapsulation, Junos OS does send link down traps for a logical
interface if the physical interface is down. When the physical interface and logical interfaces come back
up, traps are sent for both the physical and logical interfaces indicating link up.
For SONET types of interfaces with HDLC encapsulation, Junos OS does not send link down traps for a
logical interface if the physical interface is down. When the physical interface and logical interfaces
come back up, traps are sent for both the physical and logical interfaces indicating link up.
For channelize interfaces with PPP encapsulation, Junos OS does send link down traps for a logical
interface if the physical interface is down. When the physical interface and logical interfaces come back
up, traps are sent for both the physical and logical interfaces indicating link up.
For channelize interfaces with HDLC encapsulation, Junos OS does not send link down traps for a logical
interface if the physical interface is down. When the physical interface and logical interfaces come back
up, traps are sent for both the physical and logical interfaces indicating link up.
683
Junos OS Dual Routing Engine Configuration FAQs
This section presents frequently asked questions and answers related to the configuration of dual
Routing Engines.
The SNMP configuration should be identical between the Routing Engines when configuring for
continued communication. However, we recommend having separate Routing Engine IDs configured for
each Routing Engine, when using SNMPv3.
In my system, the MIB object snmpEngineBoots is not in sync between two Routing Engines in a dual
Routing Engine device. Is this normal behavior?
Yes. This is the normal behavior. Each Routing Engine runs its own SNMP process (snmpd) agent,
allowing each Routing Engine to maintain its own engine boots.
Is there a way to identify that an address belongs to RE0, RE1, or the master Routing Engine
management interface (fxp0) by looking at an SNMP walk?
No. When you do an SNMP walk on the device, it only displays the primary Routing Engine management
interface address.
What is the best way to tell if the current IP address belongs to fxp0 or a Routing Engine, from a CLI
session?
Routing Engines are mapped with the fxp0 interface. This means that when you query RE0, the ifTable
reports the fxp0 interface address of RE0 only. Similarly, if you query RE1, the ifTable reports the fxp0
interface address of RE1 only.
When there is a failover, the master hostname is changed since the hostname belongs to the Routing
Engine. Is this correct?
Yes. You can configure the same hostname or different hostnames. Either would work.
If only the primary IP address is configured (for example, 192.168.2.5), and the sysDescr.0 object has the
same string configured on both of the Routing Engines, then even after a switchover, the sysDescr.0
object returns the same value. The following sample shows the results you get by using the snmpget
command:
bng-junos-pool02: /c/svivek/PR_BRANCH/src> snmpget -c jnpr -v2c 192.168.2.5
sysDescr.0 system.sysDescr.0 = foo
684
SNMP Support for Routing Instances FAQs
This section presents frequently asked questions and answers related to how SNMP supports routing
instances.
Can the SNMP manager access data for routing instances?
Yes, the Junos OS enables SNMP managers for all routing instances to request and manage SNMP data
related to the corresponding routing instances and logical system networks.
Two different routing instance behaviors can occur, depending on where the clients originate:
• Clients from routing instances other than the default can access MIB objects and perform SNMP
operations only on the logical system networks to which they belong.
• Clients from the default routing instance can access information related to all routing instances and
logical system networks.
Routing instances are identified by either the context field in SNMPv3 requests or encoded in the
community string in SNMPv1 or SNMPv2c requests.
When encoded in a community string, the routing instance name appears first and is separated from the
actual community string by the @ character.
To avoid conflicts with valid community strings that contain the @ character, the community is parsed
only if typical community string processing fails. For example, if a routing instance named RI is
configured, an SNMP request with RI@public is processed within the context of the RI routing instance.
Access control (including views, source address restrictions, and access privileges) is applied according to
the actual community string (the set of data after the @ character—in this case public). However, if the
community string RI@public is configured, the PDU is processed according to that community, and the
embedded routing instance name is ignored.
Logical systems perform a subset of the actions of a physical router and have their own unique routing
tables, interfaces, policies, and routing instances. When a routing instance is defined within a logical
system, the logical system name must be encoded along with the routing instance using a slash ( / ) to
separate the two. For example, if the routing instance RI is configured within the logical system LS, that
routing instance must be encoded within a community string as LS/RI@public. When a routing instance is
configured outside a logical system (within the default logical system), no logical system name, or /
character, is needed.
Additionally, when a logical system is created, a default routing instance named default is always created
within the logical system. This name should be used when querying data for that routing instance, for
example LS/default@public. For SNMPv3 requests, the name logical system/routing instance should be
identified directly in the context field.
Can I access a list of all routing instances on a device?
685
Yes, you can access a list of all the routing instances on a device using the vacmContextName object in
the SNMP-VIEW-BASED-ACM MIB. In SNMP, each routing instance becomes a VACM context; this is
why the routing instances appear in the vacmContextName object.
Can I access a default routing instance from a client in another logical router or routing instance?
No, the SNMP agent can only access data of the logical router to which it is connected.
SNMP Counters FAQs
This section presents frequently asked questions and answers related to SNMP counters.
Which MIB should I use for interface counters?
Interface management over SNMP is based on two tables: the ifTable and its extension the ifXTable. Both
are described in RFC 1213, Management Information Base for Network Management of TCP/IP-based
internets: MIB-II and RFC 2233, The Interfaces Group MIB using SMIv2.
Interfaces can have several layers, depending on the media, and each sublayer is represented by a
separate row in the table. The relationship between the higher layer and lower layers is described in the
ifStackTable.
The ifTable defines 32-bit counters for inbound and outbound octets (ifInOctets/ifOutOctets), packets
(ifInUcastPkts/ifOutUcastPkts, ifInNUcastPkts /ifOutNUcastPkts), errors, and discards.
The ifXTable provides similar 64-bit counters, also called high capacity (HC) counters, for inbound and
outbound octets (ifHCInOctets/ifHCOutOctets) and inbound packets (ifHCInUcastPkts).
When should 64-bit counters be used?
It is always good to use 64-bit counters because they contain statistics for both low and high capacity
components.
Are the SNMP counters ifInOctets and ifOutOctets the same as the command reference show
interfaces statistics in and out counters?
Yes, these are the same, but only if SNMP is enabled when the router boots up. If you power on a
Juniper Networks device and then enable SNMP, the SNMP counters start from 0. SNMP counters do
not automatically receive their statistics from the show command output. Similarly, using the clear
statistics command does not clear the statistics that the SNMP counters collected, which can cause a
discrepancy in the data that is seen by both processes.
Do the SNMP counters ifInOctets and ifOutOctets include the framing overhead for Point-to-Point
Protocol (PPP) and High-Level Data Link Control (HDLC)?
Yes.
4
PART
Remote Network Monitoring (RMON)
with SNMP Alarms and Events
Remote Network Monitoring (RMON) | 687
Configure RMON History Sampling | 715
Monitor Network Service Quality by using RMON | 717
Health Monitoring with SNMP | 750
687
Remote Network Monitoring (RMON)
SUMMARY IN THIS SECTION
This section describes how Junos OS supports the RMON Overview | 687
Remote Network Monitoring (RMON) MIB
RMON Alarms and Events
(RFC 2819) that allows a management device to
Configuration | 692
monitor the values of MIB objects, or variables,
against configured thresholds. When the value of a Configure RMON Alarms and Events | 692
variable crosses a threshold, an alarm and its Monitor RMON MIB Tables | 696
corresponding event are generated. The event can be
RMON MIB Event, Alarm, Log, and History
logged and can generate an SNMP trap.
Control Tables | 697
Minimum RMON Alarm and Event Entry
Configuration | 700
Configure an RMON Alarm Entry and Its
Attributes | 701
Configure an RMON Event Entry and Its
Attributes | 706
Example: Configure an RMON Alarm and
Event Entry | 707
Use alarmTable to Monitor MIB
Objects | 707
Use eventTable to Log Alarms | 712
RMON Overview
IN THIS SECTION
RMON Alarms | 688
RMON Events | 690
Alarm Thresholds and Events | 691
688
An operational support system (OSS) or a fault-monitoring system can be used to automatically monitor
events that track many different metrics, including performance, availability, faults, and environmental
data. For example, an administrator might want to know when the internal temperature of a chassis has
risen above a configured threshold, which might indicate that a chassis fan tray is faulty, the chassis air
flow is impeded, or the facility cooling system in the vicinity of the chassis is not operating normally.
The RMON MIB also defines tables that store various statistics for Ethernet interfaces, including the
etherStatsTable and the etherHistoryTable. The etherStatsTable contains cumulative real-time statistics for
Ethernet interfaces, such as the number of unicast, multicast, and broadcast packets received on an
interface. The etherHistoryTable maintains a historical sample of statistics for Ethernet interfaces. The
control of the etherHistoryTable, including the interfaces to track and the sampling interval, is defined by
the RMON historyControlTable.
To enable RMON alarms, you perform the following steps:
1. Configure SNMP, including trap groups. You configure SNMP at the [edit snmp] hierarchy level.
2. Configure rising and falling events in the eventTable, including the event types and trap groups. You
can also configure events using the CLI at the [edit snmp rmon event] hierarchy level.
3. Configure alarms in the alarmTable, including the variables to monitor, rising and falling thresholds, the
sampling types and intervals, and the corresponding events to generate when alarms occur. You can
also configure alarms using the CLI at the [edit snmp rmon alarm] hierarchy level.
Extensions to the alarmTable are defined in the Juniper Networks enterprise-specific MIB jnxRmon
(mib-jnx-rmon.txt).
This topic covers the following sections:
RMON Alarms
An RMON alarm identifies:
• A specific MIB object that is monitored.
• The frequency of sampling.
• The method of sampling.
• The thresholds against which the monitored values are compared.
An RMON alarm can also identify a specific eventTable entry to be triggered when a threshold is crossed.
Configuration and operational values are defined in alarmTable in RFC 2819. Additional operational values
are defined in Juniper Networks enterprise-specific extensions to alarmTable (jnxRmonAlarmTable).
This topic covers the following sections:
689