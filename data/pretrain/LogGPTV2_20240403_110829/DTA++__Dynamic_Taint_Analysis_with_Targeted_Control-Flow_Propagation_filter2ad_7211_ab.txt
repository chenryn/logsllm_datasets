technique will look for implicit ﬂows in which a control-
ﬂow path completely determines the value of an input value.
In our experience, these are the implicit ﬂows that most
commonly lead to under-tainting. Our technique also natu-
rally generalizes to a looser quantitative condition on how
close a transformation is to being information-preserving,
but we leave as future work how to best set such a threshold
to balance false positives and false negatives.
3.3. Examples
Figure 1 shows a simpliﬁed example of an implicit ﬂow
that causes an under-tainting problem. The C code reads
a character from a plain text input and converts it into the
Rich Text Format (RTF) [27]. As shown in the code, when
a given character is a control character like braces ({ and
}) and backslash (\), it encodes the character to a control
code starting with a backslash. For example, { in the plain-
text input is converted into a two-byte control code \{. In
the code, the if and else if clauses in line 4 and 9 have
implicit ﬂows that assign to the output the same value as
the input value, without directly copying the original input
value. Therefore, when we taint a brace character in the in-
put data for dynamic taint analysis, the taint does not prop-
agate to the brace character in the output buffer. Figure 2
illustrates this under-tainting graphically.
The implicit ﬂows at the if and else if clauses in
Figure 1 are typical of those we wish to locate. The trans-
formation converting from plain text to RTF is information-
preserving, and for instance the execution path that causes
the program to output \{ can occur only when the corre-
sponding input character is {.
By contrast we do not wish to propagate taint for im-
plicit ﬂows of a small fraction of the information in an in-
put value. Such implicit ﬂows occur commonly in large
programs, but often the relationship of original input is in-
direct, so we would not wish to treat all such implicit ﬂows
as propagating taint. Empirically, propagating taint for all
implicit ﬂows leads to unacceptably-large over-tainting, as
demonstrated for instance in our experiments in Section 6.
An example of an implicit ﬂow for which we do not wish
to propagate taint is shown in Figure 3. In this example, the
value output contains a small portion of the information
contained in the original input: each output value can be
caused by many different input values. (Quantitatively, the
code transforms the 32-bit integer input, with 232 possi-
ble values, into one of only two possible values of the buffer
output, reducing 32 bits of information to only 1.) We ex-
pect that for most applications, it would not be desirable to
propagate taint for this implicit ﬂow, so we would set the
detection threshold to exclude examples such as this.
Thus as a diagnosis solution, we want to locate culprit
implicit ﬂows that cause the under-tainting results in the
output. Our ofﬂine analysis phase processes an instance of
the program execution and provides the exact locations in
the program code that cause the given under-tainting prob-
lem. Since we work on program binaries, the location of an
implicit ﬂow is a conditional jump instruction in the binary
code. For example, as shown in Figure 7, an implicit ﬂow
1 char output[256];
2 char input = next_input();
3 long len = 0;
4 if (input == ’{’) {
5
6
7
output[0] = ’\’;
output[1] = ’{’;
len = 2;
8 }
9 else if (input == ’\’)
10
output[0] = ’\’;
11
12
output[1] = ’\’;
len = 2;
13 }
14 /* ... */
15 else {
16
17
output[0] = input;
len = 1;
18 }
19 add_output(output, len);
Figure 1. C code for RTF conversion, with culprit implicit ﬂows
Dynamic Taint analysis
T
a
i
n
t
:
{
tainted input
Plaintext-to-RTF
Conversion
T
a
i
n
t
:
\
{
output with under-tainting
Figure 2. Under(cid:173)tainting in the plain(cid:173)text(cid:173)to(cid:173)RTF conversion code
causing the under-tainting in { (hex value 0x7b) begins at
the jump instruction after cmp %dl, %al; and this is the
point that we want to automatically ﬁnd in the execution
trace.
4. Our Approach: Ofﬂine Analysis
In this section we present the details of our approach to
diagnosing and ameliorating the under-tainting problem de-
ﬁned in Section 3. Since applying DTA++ rules requires
only a straightforward modiﬁcation to a standard DTA sys-
tem, we concentrate on the ofﬂine analysis phase that gen-
erates those propagation rules. First, we describe how to
locate culprit branches from a given execution trace (diag-
nosis), and then we explain how to create rules to ﬁx the
corresponding culprit ﬂows (rule generation). An overview
of how these phases work together is shown in Figure 4.
4.1. Diagnosing Under(cid:173)Tainting
The basic intuition of our diagnosis approach is to search
for parts of the execution that make control-ﬂow decisions
based on the input that is under-tainted, where the results of
those decisions imply tight restrictions on the possible val-
ues of that input. Since determining alternative possible in-
puts requires more ﬁne-grained information than basic taint
analysis, we use symbolic execution and base our search on
the path predicate that describes a particular execution. In
the terminology of symbolic execution, the trace of instruc-
tion executions corresponds to a program path consisting of
a sequence of branch decisions. We refer to any contigu-
ous sub-sequence of instructions from this trace as a path
substring, and a path substring that starts at the beginning
of the trace as a path preﬁx. We describe this search in two
parts: ﬁrst, a detection predicate φ to determine whether a
path substring has a culprit implicit ﬂow, and then a search
procedure to efﬁciently ﬁnd the ﬁrst path preﬁx for which φ
holds.
Detection predicate. We implement the detection predi-
cate φ using symbolic execution. The principle of symbolic
execution is to replace certain values such as program in-
puts with symbolic variables, so that computations produce
formulas instead of concrete values. We say that a branch
condition is a symbolic branch condition if it depends on
the symbolic variables. Then the path predicate for an exe-
cution is the conjunction of the formulas for each symbolic
branch condition. Thus the path predicate is a formula over
the symbolic variables that holds for executions that take
the same control ﬂow path.
φ(t) will be a predicate that, when given a substring t of
an execution trace, returns true if the substring has a cul-
Figure 4. System overview. Our DTA++ system extends conventional dynamic taint analysis (DTA)
with under(cid:173)tainting diagnosis (Section 4.1) and rule generation (Section 4.2) to ameliorate under(cid:173)
tainting caused by implicit ﬂows. Shaded boxes correspond to pre(cid:173)existing components, while
white(cid:173)background components are the contributions of this work.
1 char output[256];
2 long input = user_input();
3 long len = 0;
4 if (input > 100) {
5
strcpy(output, "large");
len = 5;
6
7 }
8 else {
9
10
strcpy(output, "small");
len = 5;
11 }
12 print_output(output, len);
Figure 3. Example code with a non(cid:173)
information(cid:173)preserving implicit ﬂow. Such
implicit ﬂows usually do not cause under(cid:173)
tainting, so we do not want to detect them,
and in fact this example is not considered a
culprit implicit ﬂow by our system.
prit implicit ﬂow that tightly constrains its inputs. For ease
of description, we concentrate here on the highest possi-
ble threshold for constraint. This is an implicit ﬂow where
the control ﬂow encodes all of the information about the
tainted input, or equivalently, when a control-ﬂow path can
be reached by only a single input value. Thus we want φ(t)
to be true if there is only one value of the relevant part of
the input that causes the program to take the execution path
observed in the trace.
To check this condition, we take the parts of the program
input that produced the under-tainted value as the symbolic
variables. We use symbolic execution to extract a path con-
dition as a formula over that input. Then we query a con-
straint solver to check whether there is a second solution to
the path condition, besides the input values that appeared in
the original trace.
For example, when the code in Figure 1 has the input
{, the execution path is lines 2, 3, 4, 5, 6, 7, and 19, and
the path predicate is input == ’{’. Then, we attempt
to solve this path constraint with the additional constraint
that the input be different from the concrete value {: i.e.,
input == ’{’ && input != ’{’. Trivially in this
example, the solver tells that there is no other possible value
that satisﬁes the constraint, so the execution path encodes
the precise value of the input byte: this is a path for which
φ holds.
Locating a culprit branch. Using the predicate φ, ﬁnd-
ing the location of a culprit branch reduces to ﬁnding the
smallest preﬁx of the execution that satisﬁes φ.
(If the
whole trace does not satisfy φ, then the algorithm reports
that it does not have under-tainting.) A brute-force approach
would be to try each preﬁx of the trace starting from the
smallest, but this might require O(n) calls to the predicate
φ, which could be inefﬁcient. Assuming the predicate φ
must at least do some processing on each instruction in the
trace preﬁx, this would imply at least quadratic complexity.
(In fact constraint solving is potentially even more expen-
sive, NP-hard in general, a further incentive to reduce the
number of solver calls required.)
We use a more efﬁcient approach based on binary search.
We ﬁx the starting point of the trace segment, and use bi-
nary search to ﬁnd the earliest ending point of the trace such
computed using compiler algorithms [24].)
For each culprit branch our tool diagnoses, we query the
database for its immediate post-dominator, and generate a
rule specifying to taint the destination operands of all the
instructions up to the post-dominator.
The most precise approach to this taint propagation is
to taint any register or memory location that might have a
different value depending on whether the true or the false
side of the culprit branch was taken. Thus, a value written
to inside the branch need not be tainted if it is always writ-
ten the same value on both sides of the branch. Conversely,
even if a value is not written to on this execution, it should
be tainted if it could have been written on the side of the
branch that was not taken. However, we have found few
cases that need the full complexity of this precise propaga-
tion, so we have currently implemented a simpler approach
of tainting any value that is written by an instruction after
the branch but before the post-dominator, with some spe-
cial treatment for loops with a tainted loop condition. We
discuss this trade-off more in Section 7.
Clause et al. apply taint propagation to all the conditional
branches with a tainted condition (eflags value), but we
apply it to only the culprit branches found by the diagnosis
algorithm, which are very few (orders of magnitude less, as
we show this in our results in Section 6). This allows our
technique to provide more accurate tainting results.
4.3. Multi(cid:173)level culprit implicit ﬂows.
There can also be multi-level culprit implicit ﬂows in the
program: culprit implicit ﬂows whose inputs are themselves
the results of previous culprit implicit ﬂows. Thus ﬁxing all
the culprit implicit ﬂows visible in a single trace may still
not be sufﬁcient to resolve all the under-tainting in an exe-
cution. When needed our tool can repeat the combination
of tracing, diagnosis and rule generation until we obtain a
trace without under-tainting.
There are several possible approaches to detecting when
to stop generating more propagation rules. For instance, if
we have auxiliary information for the ofﬂine analysis phase
specifying which output locations are under-tainted, we can
generate rules until those locations are properly tainted. Al-
ternatively, we can simply repeat the ofﬂine analysis process
until it detects no remaining implicit ﬂows.
5. Implementation
We implement our proposed technique using the Bit-
Blaze platform [31]. BitBlaze includes tools for both dy-
namic and static analysis available in an open-source re-
lease [6]. We use our DTA++ implementation to extend
and enhance the taint analysis performed by BitBlaze’s dy-
namic analysis component TEMU and its Tracecap plugin.
Figure 5. Binary search for a culprit branch in
a trace
that the segment contains a culprit implicit ﬂow. Figure 6
shows our algorithm, where the function HasImplicit
implements the predicate φ. Figure 5 illustrates the search
in action. Given a trace containing a culprit implicit ﬂow,
we split the trace and (1) try HasImplicit() on the
ﬁrst half of the trace. Because HasImplicit() returns
false, we reduce the search space to the second half of the
trace. By splitting the second half of the trace, we (2) try
HasImplicit() on the ﬁrst three quarters of the trace,
and in the example, the result is true, limiting the next
search space to the third quarter of the trace. Continuing,
we try HasImplicit() on (3) the ﬁrst 5/8, (4) the ﬁrst
11/16 of the trace, and so on.
Multiple culprit branches in a trace. The trace may con-
tain multiple culprit branches, and we may need to diagnose
and propagate taint for several to achieve the desired taint-
ing result. If there are multiple culprit branches, the diag-
nosis algorithm presented above ﬁnds the one that appears
earliest in the trace. Once we diagnose one such location,
we remove the corresponding formula from the path condi-
tion. After this modiﬁcation, we can perform the diagnosis
process a second time to ﬁnd another culprit branch, and in
this way repeat the process until the diagnosis ﬁnds no more
culprit implicit ﬂows.
4.2. Rule Generation
After diagnosing the cause of under-tainting, we deter-
mine how to ameliorate it by generating rules specifying
how to propagate taint to the values affected by the ﬂow. To
do this, we adopt a technique much like that used by Clause
et al. [10]. First, we extract control ﬂow graphs (CFGs)
from the program binary and build a database of the imme-
diate post-dominator of each conditional branch by inspect-
ing the CFGs. (A point p in a CFG post-dominates a point
i if every path from i to the exit passes through p, and im-
mediately post-dominates it if there is no other p′ for which
p′ post-dominates i and p post-dominates p′.
Immediate
post-dominance is a precise counterpart to the intuition of
the re-convergence point of a branch, and can be efﬁciently
/* check for culprit implicit flow */
HasImplicit(trace, size)
if phi(trace[0:size])
return true;
else
return false;
endif
/* locating the first culprit branch */
LocateImplicit(trace, 1, size_of(trace));
LocateImplicit(trace, left, right)
integer middle, size;
if left == right
return right;
else if left > right
return -1;
endif
middle := (left + right) / 2;
if HasImplicit(trace, middle) == true
return LocateImplicit(trace, left, middle)
else
return LocateImplicit(trace, middle + 1, right)
endif
Figure 6. Pseudo(cid:173)code of the algorithms
Using TEMU’s taint-enhanced whole-system emulation en-
vironment, Tracecap collects a trace that can include each
instruction executed by a subject program, and information
about its operands. To reduce the size of the generated trace
we use Tracecap ﬁltering features such as not starting the