var x: Double
var name: String
}
var points: [CustomPointStruct] = [
CustomPointStruct(x: 1, name "test"),
CustomPointStruct(x: 2, name "test"),
CustomPointStruct(x: 3, name "test"),
]
UserDefaults.standard.set(try? PropertyListEncoder().encode(points), forKey:"points")
if let data = UserDefaults.standard.value(forKey:"points") as? Data {
let points2 = try? PropertyListDecoder().decode(Array.self, from: data)
482
iOS Platform APIs
}
Note that plist files are not meant to store secret information. They are designed to hold user preferences for an
app.
XML
There are multiple ways to do XML encoding. Similar to JSON parsing, there are various third party libraries, such as:
Fuzi
Ono
AEXML
RaptureXML
SwiftyXMLParser
SWXMLHash
They vary in terms of speed, memory usage, object persistence and more important: differ in how they handle XML
external entities. See XXE in the Apple iOS Office viewer as an example. Therefore, it is key to disable external entity
parsing if possible. See the OWASP XXE prevention cheatsheet for more details. Next to the libraries, you can make
use of Apple's XMLParser class
When not using third party libraries, but Apple's XMLParser , be sure to let shouldResolveExternalEntities return
false .
Object-Relational Mapping (CoreData and Realm)
There are various ORM-like solutions for iOS. The first one is Realm, which comes with its own storage engine. Realm
has settings to encrypt the data as explained in Realm's documentation. This allows for handling secure data. Note
that the encryption is turned off by default.
Apple itself supplies CoreData , which is well explained in the Apple Developer Documentation. It supports various
storage backends as described in Apple's Persistent Store Types and Behaviors documentation. The issue with the
storage backends recommended by Apple, is that none of the type of data stores is encrypted, nor checked for
integrity. Therefore, additional actions are necessary in case of confidential data. An alternative can be found in
project iMas, which does supply out of the box encryption.
Protocol Buffers
Protocol Buffers by Google, are a platform- and language-neutral mechanism for serializing structured data by means
of the Binary Data Format. They are available for iOS by means of the Protobuf library. There have been a few
vulnerabilities with Protocol Buffers, such as CVE-2015-5237. Note that Protocol Buffers do not provide any
protection for confidentiality as no built-in encryption is available.
Static Analysis
All different flavors of object persistence share the following concerns:
If you use object persistence to store sensitive information on the device, then make sure that the data is
encrypted: either at the database level, or specifically at the value level.
Need to guarantee the integrity of the information? Use an HMAC mechanism or sign the information stored.
Always verify the HMAC/signature before processing the actual information stored in the objects.
Make sure that keys used in the two notions above are safely stored in the KeyChain and well protected. See the
"Data Storage on iOS" chapter for more details.
Ensure that the data within the deserialized object is carefully validated before it is actively used (e.g., no exploit
of business/application logic is possible).
483
iOS Platform APIs
Do not use persistence mechanisms that use Runtime Reference to serialize/deserialize objects in high risk
applications, as the attacker might be able to manipulate the steps to execute business logic via this mechanism
(see the "iOS Anti-Reversing Defenses" chapter for more details).
Note that in Swift 2 and beyond, a Mirror can be used to read parts of an object, but cannot be used to write
against the object.
Dynamic Analysis
There are several ways to perform dynamic analysis:
For the actual persistence: Use the techniques described in the "Data Storage on iOS" chapter.
For the serialization itself: use a debug build or use Frida / objection to see how the serialization methods are
handled (e.g., whether the application crashes or extra information can be extracted by enriching the objects).
Testing enforced updating (MSTG-ARCH-9)
Enforced updating can be really helpful when it comes to public key pinning (see the Testing Network communication
for more details) when a pin has to be refreshed due to a certificate/public key rotation. Next, vulnerabilities are easily
patched by means of forced updates. The challenge with iOS however, is that Apple does not provide any APIs yet to
automate this process, instead, developers will have to create their own mechanism, such as described at various
blogs which boil down to looking up properties of the app using http://itunes.apple.com/lookup\?id\ or
third party libaries, such as Siren and react-native-appstore-version-checker. Most of these implementations will
require a certain given version offered by an API or just "latest in the appstore", which means users can be frustrated
with having to update the app, even though no business/security need for an update is truly there.
Please note that newer versions of an application will not fix security issues that are living in the back-ends to which
the app communicates. Allowing an app not to communicate with it might not be enough. Having proper API-lifecycle
management is key here. Similarly, when a user is not forced to update, do not forget to test older versions of your
app against your API and/or use proper API versioning.
Static Analysis
First see whether there is an update mechanism at all: if it is not yet present, it might mean that users cannot be
forced to update. If the mechanism is present, see whether it enforces "always latest" and whether that is indeed in
line with the business strategy. Otherwise check if the mechanism is supporting to update to a given version. Make
sure that every entry of the application goes through the updating mechanism in order to make sure that the update-
mechanism cannot be bypassed.
Dynamic analysis
In order to test for proper updating: try downloading an older version of the application with a security vulnerability,
either by a release from the developers or by using a third party app-store. Next, verify whether or not you can
continue to use the application without updating it. If an update prompt is given, verify if you can still use the
application by canceling the prompt or otherwise circumventing it through normal application usage. This includes
validating whether the back-end will stop calls to vulnerable back-ends and/or whether the vulnerable app-version
itself is blocked by the back-end. Finally, see if you can play with the version number of a man-in-the-middled app and
see how the backend responds to this (and if it is recorded at all for instance).
References
[#THIEL] Thiel, David. iOS Application Security: The Definitive Guide for Hackers and Developers (Kindle
Locations 3394-3399). No Starch Press. Kindle Edition.
484
iOS Platform APIs
Security Flaw with UIWebView - https://medium.com/ios-os-x-development/security-flaw-with-uiwebview-
95bbd8508e3c
Learning about Universal Links and Fuzzing URL Schemes on iOS with Frida -
https://grepharder.github.io/blog/0x03_learning_about_universal_links_and_fuzzing_url_schemes_on_ios_with_fri
da.html
OWASP Mobile Top 10 2016
M1 - Improper Platform Usage - https://www.owasp.org/index.php/Mobile_Top_10_2016-M1-
Improper_Platform_Usage
M7 - Poor Code Quality - https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality
OWASP MASVS
MSTG-ARCH-9: "A mechanism for enforcing updates of the mobile app exists."
MSTG-PLATFORM-1: "The app only requests the minimum set of permissions necessary."
MSTG-PLATFORM-3: "The app does not export sensitive functionality via custom URL schemes, unless these
mechanisms are properly protected."
MSTG-PLATFORM-4: "The app does not export sensitive functionality through IPC facilities, unless these
mechanisms are properly protected."
MSTG-PLATFORM-5: "JavaScript is disabled in WebViews unless explicitly required."
MSTG-PLATFORM-6: "WebViews are configured to allow only the minimum set of protocol handlers required
(ideally, only https is supported). Potentially dangerous handlers, such as file, tel and app-id, are disabled."
MSTG-PLATFORM-7: "If native methods of the app are exposed to a WebView, verify that the WebView only
renders JavaScript contained within the app package."
MSTG-PLATFORM-8: "Object serialization, if any, is implemented using safe serialization APIs."
CWE
CWE-79 - Improper Neutralization of Input During Web Page Generation -
https://cwe.mitre.org/data/definitions/79.html
CWE-200 - Information Leak / Disclosure - https://cwe.mitre.org/data/definitions/200.html
CWE-939 - Improper Authorization in Handler for Custom URL Scheme -
https://cwe.mitre.org/data/definitions/939.html
Tools
Apple App Site Association (AASA) Validator - https://branch.io/resources/aasa-validator
Frida - https://www.frida.re/
frida-trace - https://www.frida.re/docs/frida-trace/
IDB - https://www.idbtool.com/
Needle - https://github.com/mwrlabs/needle
Objection - https://github.com/sensepost/objection
ObjC Method Observer - https://codeshare.frida.re/@mrmacete/objc-method-observer/
Radare2 - https://rada.re
Regarding Object Persistence in iOS
https://developer.apple.com/documentation/foundation/NSSecureCoding
https://developer.apple.com/documentation/foundation/archives_and_serialization?language=swift
https://developer.apple.com/documentation/foundation/nskeyedarchiver
485
iOS Platform APIs
https://developer.apple.com/documentation/foundation/nscoding?language=swift
https://developer.apple.com/documentation/foundation/NSSecureCoding?language=swift
https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custo
m_types
https://developer.apple.com/documentation/foundation/archives_and_serialization/using_json_with_custom_types
https://developer.apple.com/documentation/foundation/jsonencoder
https://medium.com/if-let-swift-programming/migrating-to-codable-from-nscoding-ddc2585f28a4
https://developer.apple.com/documentation/foundation/xmlparser
486
Code Quality and Build Settings for iOS Apps
Code Quality and Build Settings for iOS Apps
Making Sure that the App Is Properly Signed (MSTG-CODE-1)
Overview
Code signing your app assures users that the app has a known source and hasn't been modified since it was last
signed. Before your app can integrate app services, be installed on a device, or be submitted to the App Store, it must
be signed with a certificate issued by Apple. For more information on how to request certificates and code sign your
apps, review the App Distribution Guide.
You can retrieve the signing certificate information from the application's .app file with codesign. Codesign is used to
create, check, and display code signatures, as well as inquire into the dynamic status of signed code in the system.
After you get the application's .ipa file, re-save it as a ZIP file and decompress the ZIP file. Navigate to the Payload
directory, where the application's .app file will be.
Execute the following codesign command to display the signing information:
$ codesign -dvvv YOURAPP.app
Executable=/Users/Documents/YOURAPP/Payload/YOURAPP.app/YOURNAME
Identifier=com.example.example
Format=app bundle with Mach-O universal (armv7 arm64)
CodeDirectory v=20200 size=154808 flags=0x0(none) hashes=4830+5 location=embedded
Hash type=sha256 size=32
CandidateCDHash sha1=455758418a5f6a878bb8fdb709ccfca52c0b5b9e
CandidateCDHash sha256=fd44efd7d03fb03563b90037f92b6ffff3270c46
Hash choices=sha1,sha256
CDHash=fd44efd7d03fb03563b90037f92b6ffff3270c46
Signature size=4678
Authority=iPhone Distribution: Example Ltd
Authority=Apple Worldwide Developer Relations Certification Authority
Authority=Apple Root CA
Signed Time=4 Aug 2017, 12:42:52
Info.plist entries=66
TeamIdentifier=8LAMR92KJ8
Sealed Resources version=2 rules=12 files=1410
Internal requirements count=1 size=176
Determining Whether the App is Debuggable (MSTG-CODE-2)
Overview
Debugging iOS applications can be done using Xcode, which embeds a powerful debugger called lldb. Lldb is the
default debugger since Xcode5 where it replaced GNU tools like gdb and is fully integrated in the development
environment. While debugging is a useful feature when developing an app, it has to be turned off before releasing
apps to the App Store or within an enterprise program.
Generating an app in Build or Release mode depends on build settings in Xcode; when an app is generated in Debug
mode, a DEBUG flag is inserted in the generated files.
Static Analysis
At first you need to determine the mode in which your app is to be generated to check the flags in the environment:
Select the build settings of the project
487
Code Quality and Build Settings for iOS Apps
Under 'Apple LVM - Preprocessing' and 'Preprocessor Macros', make sure 'DEBUG' or 'DEBUG_MODE' is not
selected (Objective-C)
Make sure that the "Debug executable" option is not selected.
Or in the 'Swift Compiler - Custom Flags' section / 'Other Swift Flags', make sure the '-D DEBUG' entry does not
exist.
Dynamic Analysis
Check whether you can attach a debugger directly, using Xcode. Next, check if you can debug the app on a jailbroken
device after Clutching it. This is done using the debug-server which comes from the BigBoss repository at Cydia.
Note: if the application is equipped with anti-reverse engineering controls, then the debugger can be detected and
stopped.
Finding Debugging Symbols (MSTG-CODE-3)
Overview
Generally, as little explanatory information as possible should be provided with the compiled code. Some metadata
(such as debugging information, line numbers, and descriptive function or method names) makes the binary or byte-
code easier for the reverse engineer to understand but isn't necessary in a release build. This metadata can therefore
be discarded without impacting the app's functionality.
These symbols can be saved in "Stabs" format or the DWARF format. In the Stabs format, debugging symbols, like
other symbols, are stored in the regular symbol table. In the DWARF format, debugging symbols are stored in a
special "__DWARF" segment within the binary. DWARF debugging symbols can also be saved as a separate debug-
information file. In this test case, you make sure that no debug symbols are contained in the release binary itself (in
neither the symbol table nor the __DWARF segment).
Static Analysis
Use gobjdump to inspect the main binary and any included dylibs for Stabs and DWARF symbols.
$ gobjdump --stabs --dwarf TargetApp
In archive MyTargetApp:
armv5te: file format mach-o-arm
aarch64: file format mach-o-arm64
Gobjdump is part of binutils and can be installed on macOS via Homebrew.
Make sure that debugging symbols are stripped when the application is being built for production. Stripping debugging
symbols will reduce the size of the binary and increase the difficulty of reverse engineering. To strip debugging
symbols, set Strip Debug Symbols During Copy to YES via the project's build settings.
A proper Crash Reporter System is possible because the system doesn't require any symbols in the application
binary.
Dynamic Analysis
Dynamic analysis is not applicable for finding debugging symbols.
Finding Debugging Code and Verbose Error Logging (MSTG-CODE-4)
488
Code Quality and Build Settings for iOS Apps
Overview
To speed up verification and get a better understanding of errors, developers often include debugging code, such as
verbose logging statements (using NSLog , println , print , dump , and debugPrint ) about responses from their
APIs and about their application's progress and/or state. Furthermore, there may be debugging code for
"management-functionality", which is used by developers to set the application's state or mock responses from an
API. Reverse engineers can easily use this information to track what's happening with the application. Therefore,
debugging code should be removed from the application's release version.
Static Analysis
You can take the following static analysis approach for the logging statements:
1. Import the application's code into Xcode.
2. Search the code for the following printing functions: NSLog , println , print , dump , debugPrint .
3. When you find one of them, determine whether the developers used a wrapping function around the logging
function for better mark up of the statements to be logged; if so, add that function to your search.
4. For every result of steps 2 and 3, determine whether macros or debug-state related guards have been set to turn
the logging off in the release build. Please note the change in how Objective-C can use preprocessor macros:
#ifdef DEBUG
// Debug-only code
#endif
The procedure for enabling this behavior in Swift has changed: you need to either set environment variables in your
scheme or set them as custom flags in the target's build settings. Please note that the following functions (which allow
you to determine whether the app was built in the Swift 2.1. release-configuration) aren't recommended, as Xcode 8
and Swift 3 don't support these functions:
_isDebugAssertConfiguration
_isReleaseAssertConfiguration
_isFastAssertConfiguration .
Depending on the application's setup, there may be more logging functions. For example, when CocoaLumberjack is
used, static analysis is a bit different.
For the "debug-management" code (which is built-in): inspect the storyboards to see whether there are any flows
and/or view-controllers that provide functionality different from the functionality the application should support. This
functionality can be anything from debug views to printed error messages, from custom stub-response configurations
to logs written to files on the application's file system or a remote server.
As a developer, incorporating debug statements into your application's debug version should not be a problem as long
as you make sure that the debug statements are never present in the application's release version.
In Objective-C, developers can use preprocessor macros to filter out debug code:
#ifdef DEBUG
// Debug-only code
#endif
In Swift 2 (with Xcode 7), you have to set custom compiler flags for every target, and compiler flags have to start with
"-D". So you can use the following annotations when the debug flag DMSTG-DEBUG is set:
#if MSTG-DEBUG
// Debug-only code
#endif
489
Code Quality and Build Settings for iOS Apps
In Swift 3 (with Xcode 8), you can set Active Compilation Conditions in Build settings/Swift compiler - Custom flags.
Instead of a preprocessor, Swift 3 uses conditional compilation blocks based on the defined conditions:
#if DEBUG_LOGGING
// Debug-only code
#endif
Dynamic Analysis
Dynamic analysis should be executed on both a simulator and a device because developers sometimes use target-
based functions (instead of functions based on a release/debug-mode) to execute the debugging code.
1. Run the application on a simulator and check for output in the console during the app's execution.