---
## Page 499
第16章X窗口系统的程序设计481
示硬件设备的控制工作，完成具体的输人和输出操作。X服务器响应来自X客户程序的请求，在
动与按钮动作等事件。
虽然X能够运行在许多种不同的硬件组合上，但一般说来，这些不同的硬件组合必须使用一
个彼此不同的X服务器。Linux和其他基于PC的系统上最常见的X实现是XFree86（它的网址是
写的，比如XF86_S3就是S3系列显卡专用的x服务器。Linux用户应该好好谢谢这些开发人员。
16.1.2X协议
X客户软件和X显示服务器之间的一切交互操作都必须通过交换消息才能进行。消息的类型
和用途用法就构成了X协议。X窗口系统特别有用的一个功能是：X协议不仅能够穿越网络，就
是对运行在同一台机器上的客户和服务器之间也同样适用。这就意味着即使用户手里只有一台
功能较低的个人电脑或一台X终端（这是一种专为运行X服务器而设计和使用的机器），他也可
以在更强大的联网计算机上运行各种X客户程序，而交互式操作和输出显示都是在他自已的本地
机器上进行的。
16.1.3Xib库
只有那些实际编写X服务器的人才会真正对X协议感兴趣。大多数X软件都要使用一个C语言
函数库做为程序设计的接口。这就是Xlib库，它为X协议里的信息交换提供了一个API（应用程
序设计接口）。Xlib本身并没有增加太多的东西一一它只能在屏幕上画线条和对鼠标动作做出响
应。如果你需要莱单、按钮、卷屏条以及所有其他的东西，就必须自己编写它们。
从另一个方面看，Xlib也没有强调任何特殊的GUI风格。它的作用只是一个中介，你可以通
过它创建出自已想要的风格来。
16.1.4X客户
X客户就是以后实际接触的软件程序、它们需要运行在某个计算机上，但是能够使用其他计
算机上的显示和输入资源。它们通过向负责管理自己的X服务器提出对那些资源的访问请求而微
到这一点。服务器一般都能够同时对来自许多客户的请求进行处理，它必须对键盘和鼠标在客
户之间的使用情况做出裁决。客户程序使用X协议消息与服务器进行通信，面这些消息是通过
Xlib函数来收发的。
16.1.5X工具包
我们不准备在Xib程序设计接口上多做停留、因为如果你想又快又简单地编写出程序来，它
可算不上是最佳的工具。Xlib的底层接口就象是MicrosofWindowsSDK开发工具包一样，它能
对付相当复杂的程序，但不怎么出活，笔者·书架上的-本书里有一个完全是利用Xlib库编写出来
（），
加入java编程群：524621833
---
## Page 500
482Linux程序设计
按钮，按下这个按钮时程序就退出运行，除了这些它什么也不能做。可它的程序清单居然有五
页长！
任何编写过这类Xlib程序的程序员肯定都希望找到一个更好的办法。而好办法确实有！常用
的操作界面元素如按钮、卷屏条和菜单等早就被实现过很多次了。X窗口系统里的这类元素也叫
做素材，把它们收集在一起就形成了人们所说的X1具包。最知名的X工具包包括随X提供的
"XtIntrinsics”开发工具包和两个商业化的产品：Sun公司的OpenLook和OSF（开放源代码基金
会）的Motif。
·Xt是在X的上面编写的--个免费函数库，它给xib库增加了一些功能，是·个能够简化应
用程序设计的跳板。
·OpenLook是Sun公司产品的一个免费的工具包，它强调了一种另类的观感。它是在一个名
为Xview的函数库上面建立起来的，这个库与Xt很相似。
·Motif是OSF组织的一个标准，设计目的是为UNIX桌面提供统一的观感。Motif又分为两个
主要部分：一组用来定义Xt函数中使用的各种常数的头文件和一个用来简化对话框和菜单
等元素的创建工.作的易于使用的函数库。Motif还定义了一种程序设计风格，不管程序员
是否使用Motif工具包，都可以参照它来设计自已的程序。
·Qu是一个由Trolltech公司出品的函数库，它构成了KDE桌面环境的基础，在大多数Linux
发行版本里都能找到它。
·GTK+就是GIMP工具包，它是GNOME系统的基石。我们将在下一章里介绍如何对这个商
级环境进行程序设计。
和所有其他商业性UNIX供货商一样，Sun公司已经接受了用Motif工具包开发出来
的CDE（CommonDesktop Environment，递用桌面环境）。这等于是宣告了OpenLook的
结束，它青定会逐渐地消失掉的：OpenLook的某些组成部分现在已经免费对公众开放
了，在某些Linux发行版本里可以素到它们
每一种X工具包都实现有一整套素材，它们的外观和感觉一般都有明显的区别。显示在屏蒜
上的元素可以是扁平而又普通的样子（比如用Xt开发的软件），也可以是有雕塑感的3D效果（比
如Motif)。
想知道一个工具包会造成多大的差异吗？我们来看看Linux里两个不同的文本编辑器xedit和
textedit。第一个xedi是一个非常简单的编辑器，几乎没有什么复杂的用户操作界面可言。要想
加载一个文件，就必须先把文件名敲到一个框子里，再点击那个标记着“Load”的按钮。
与它形成鲜明对照的是textedit编辑器，这是一个Sun公司OpenWindows软件中的一个程厅。
它是用OpenLook工具包编写的。在打开文件的时候，它提供了一个对话框。用户可以浏览文件
系统挑出自已想要打开的文件。这个工具包还为按钮提供了我们熟悉的3D效果。
16.2X窗口管理器
X窗口系统另外一个重要的组成部分是窗口管理器（windowmanager）这是一个特殊的X
客户，负责处理其他的客户。它安排客户窗口在显示器屏幕上的摆放位置，负责完成移动窗口
加入iava编程群：524621833
---
## Page 501
第16章X窗口系统的程序设计
483
和调整窗口尺寸等管理性的工作。根据它使用的X工具包种类的不同，用户会看到一个它特有的
外观效果。
窗口管理器的种类有很多、如表16-1所示：
表16-1
窗1管理器
说明
C W9
全名是Tom's（或Tabbed）Window Manage，X带来的一个小而快的管理器
tvwm
Rober Nation编写的·个窗口管理器。在Linux里广受欢迎。它支持虚拟桌面，自带配置
文件、并且能够通过配置文件模仿其他窗口管理器
S6WRA
fvwm的-个模仿Windows 95操作界函i的版本
GMm
全名是Generic Window Manager，可以用一种LISP语言的变体进行编程
WA [0
全名尼OpenLook Window Manager
MwTL
是Mot:t Window Manager
大多数UNIX和Linux系统上都有这些窗口管理器，但mwm需要有--份许可证。
16.3×程序设计模型
功能界线。这种程序设计方法就引导出一个用来编写X应用程序的典型结构，我们在这里给大家
做一个简单的介绍。
16.3.1启动
典型的X应用程序在启动时必须对自已可能会用到的一切资源都进行初始化。它需要和X显
示服务器建立起一个连接，选择使用的颜色和字体，然后在显示器上创建出一个窗口来。
客户程序连接和解除连接一个x服务器时要使用xOpenDisplay和XCloseDisplay函数。下面
是它们的定义情况：
display_name参数指定的是我们打算连接的显示设备。如果它是null.就使用环境变量
DISPLAY的值。它的格式是“hostname:server[.display]"，一台主机可以有一个以上的X服务器，
每个服务器又可以控制一个以上的显示设备。系统默认的盈示设备通常就是“：0.0”，即本地计
算机上第一个可用的服务器。如果想指定一个第二屏幕，比如桌面确实很大的时候，你可以使
用“:0.1”
XOpenDisplay返回的是一个Display结构，里面是刚才选择的x服务器的有关信息；如果没
有X服务器可以被打开，就返回null。只有在成功地从XOpenDisplay返回之后，客户程序才能开
始使用x服务器。
当客户程序用完x服务器的时候，它必须以最初由XOpenDisplay调用返回的那个Display结
构为参数调用XCloseDisplay、这将清除该客户在显示设备上创建的-切窗口和其他资源；除非
曾经调用xSerCloseDownMode修改过窗口的退出整理行为、但这种做法足很少见的。程序在退
加入jaVa编程群：524621833
---
## Page 502
484Linux程序设计
出前必须调用xCloseDisplay，只有这样才能使排队中的错误得到报告。
用户可以控制启动时的大多数活动。许多X应用程序能够响应命令行参数、环境变量和配置
文件中相应的设置情况，使用户能够对应用程序进行定制。后面的内容里就有几个这样的例子。
正如我们已经看到的，环境变量DISPLAY被用来把应用程序引向每个特定的显示服务器，
而这个服务器可以是在另外一台联网的计算机上。下面的命令将启动xedit程序执行，但会把它
的显示打开在一台名为alex的机器上。
S DISPLAY=alex:0.0 xedit &
.Xresources文件（有时候是.Xdefaults文件）被用来配置X应用程序。每个应用程序都会使用
X资源数据库里的配置数据项，这些配置项通常是在一个X系统启动时创建出来的，并且包括了
用户自已的本地优先设置。用户的.Xresources文件保存在他或她的登录子目录里，其中一个典
型的的配置项如下所示：
xedit *enableBackups: on
这个配置项改变了xedit的行为，让它在编辑文件的同时对文件进行备份，配置项的通用格
式是：
Class *Resource: Velue
请看下面这个命令行：
S xedit -geometry 400x200
几何尺寸设置，比如说：
它启动的终端仿真器有50行，每行有80列。影响X应用程序行为的各种设置情况请参考你系
统的文档和应用程序的使用手册页。
16.3.2主橘环
X应用程序的主体是由一个主循环和对事件做出反应的代码构成的。在启动之后，一个典型
的X程序就会开始等待它连接的X显示务器向它发送事件。这项工作是在一个循环里通过调用
XNextEvent来实现的。
一个应用程序可能需要对多达30个以上的事件做出反应。我们不准备在这里讨论它们，因
为已经有许多讨论X窗口程序设计的（非常厚的）书对这一话题有过详细的论述。但我们在表
16-2里把X用到的事件大致分分类：
表16-2
键盘事件
按键的按下和释放
鼠标事件
按钮的按下和释放：鼠标移动：鼠标进人/离开一个窗山
窗口事件
窗口的创建/关闭：窗口获得/失去焦点：窗口被遮藏/重新显示等
一个底层的X程序需要对这些甚至更多的事件做出响应。面使用了高级开发工具包或应用程
加入jaVa编程群：524621833
---
## Page 503
第16章X窗口系统的程序设计485
序框架的程序却不必明确地与这些底层的事件打交道，可以把注意力集中到应用程序的主要自
的上，使用对话框等复杂的操作接口元素完成相应的操作任务。
16.3.3退出整理
一个行为良好的X程序会在自己退出的时候释放它在运行时曾经分配的一切X显示资源。其
实简单地断开与服务器的连接通常就已经足够了，但这样可能会导致服务器消耗过多的内存。
再说了，不打招呼就走也有些不礼貌！
16.4X程序设计概述
在本章剩下的篇幅里，我们将把X程序设计的底层问题留给那些想梓出应用程序最后--分性
能并且拥有对应用程序最大控制权的人们去思考。
至于象我们这样只是急于看到成果和希望把高功能X应用程序弄得好看一些的人们，我们将
把注意力集中在X程序设计领域几个最新的发明上。
随着高速个人计算机和工作站的迅速普及，用一种解释型语言来编写至少是程序的用户操
作界面部分已经越来越普遍。我们已经在介绍shell和Tcl语言的有关章节里看到了几个这样的例
子。我们还将在第18章里去学习掌握Perl语言的强大功能。
我们这一章主要是学习Tk（“ToolKir”的字头缩写，意思是工具箱）的使用方法，它是Tcl
语言在图形化程序设计方面的一个扩展；在下一章里将学习CTK+，它最初是做为一个控制
GIMP（GNUImageProcessor，GNU图像处理器软件）的工具包而开发出来的，但最终发展成
为GNOME桌面里的底层图形化程序设计语言。
用Tk来进行X程序设计还带来了一个移植性方面的好处。许多非X的图形化环境（包括微软
的Windows）里也有Tk，并且它不依赖于具体的硬件设备。为一种机器编写的Tk程序能够不经
任何修改就运行在另外一种机器上。
如果读者对一个独立于计算机平台的程序设计系统带来的好处感兴趣，并且还希望拥有编
译型语言的强大功能，Java将是一个比较不错的选择。但Java程序设计的范围实在是太广泛了，
习，这本书也是由Wrox出版社出版的（国际书号是1SBN1-861002-23-8）。
16.5Tk工具包
Tk是JohoOusterhout在Tcl语言的基础上编写出来的，它收集了大量的图形化用户操作界面
（graphical userinterface，简称GUI）的基本部件（人们称之为素材），目的是简化X，微软的
Windows和苹果电脑的MacOS等几种图形环境下各种基本组件的程序设计工作。
Tk是一个面向动作的、组合式的、可嵌人的、可扩展的、高移植性的、基于事件的开发工
具包，它的素材是用C语言编写的，并且要通过Tcl语言绑定到事件处理器（程序）上去。Tk已
经被移植到许多其他的语言中，命令的绑定可以用Perl和Python等语言来完成。
最新版的Tk8.1和Tk8.2在Unix、Windows和Macintosh等三种平台上都保持着很好的稳
加入jaVa编程群：524621833
---
## Page 504
486
Linux程序设计
定性。
在缺省的情况下，Tk素材与它们运行在其上的平台的原装素材有相同的外观，使用中的感
觉也一样，但它们其有很高的可配置性，你可以通过设置该工具包某个全局变量的办法严格按
照Motif模式来使用Tk素材。Tk的程序设计接口是稳定的，为一种平台编写的大多数脚本不需要
任何修改就可以运行在其他两种平台上：
这一小节里的所有程序示例需要至少8.0版本的Tcl和8.0版本的Tk才能正常工作。你
可以从hrttp：/www.scriptics.com/resource/software/处下载这两个软件的最新版本这
一小节里的大多数程序都是用Tcl8.0和Tk8.0编写出来的，这是固为最新发行的Jacl和
TclBlend只能和Tel8.0版一起工作，Jacl是完全用纯Java重写的Tcl解释器；而TclBlend
是用C语言编写的一个可动态加载的Tcl扩展，它使Tcl能够更好地工作在一台Java虚拟
机上。
在开始Tk程序设计之前，读者需要保证Tk的窗口化shell，即wish，已经安装在自己的系统
上了，它的可执行文件都在你的搜索路径PATH里。如果Tk没有被安装到默认的地方，你需要设
置环境变量TK_LIBRARY和TCL_LIBRARY指向正确的地点。如果你在自已的机器里安装了多
个版本的Tcl，就一定要注意让刚才说的这两个环境变量指向正确的位置。举个例子，下面就是
我为8.2b3版Tk启动wish而使用的shell脚本程序：
LD_LIERARr_pATH=$LD_L8RARY, FAM:/usr/1oca1/te18.2b3/unix./usr/1oca1/tk8.2b3
/bin/sh
/uni
usr/1ocal/ck4.2b3/1.bra
当你在shell提示符处装入wish的时候，会弹出一个小窗口，窗口颜色在缺省情况下
是灰色的。如果在运行脚本程序的时候需要取消这个交互式的wish窗口，请用“wish-f
命令来启动Tk。wish可以说是一个内建了Tk函数的tclsh
在接下来的几个小节里，我们将学习以下几个方面的内容：
·窗口程序设计的基本概念。
·编写我们的第一个Tk程序。
·介绍Tk的各种素材和它们的部分配置选项。
·绑定。
·窗口尺寸和屏幕位置的管理。
·应用程序资源的管理。
·应用程序间的通信。
·窗口的管理和应用程序的嵌入。
·--个完全用Tel语言编写的由现有Tk组件搭建的复合素材。
一个使用了Tcl事件的有日常使用价值的Tk程序示例
加入jaVa编程群：524621833
---
## Page 505
第16章X窗口系统的程序设计487
虽然这些内容并不是很深人，但读者应该学习到如何开始进行Tk程序设计、如何使用它的
内建素材集合来编程，以及到哪儿去进一步学习Tk，总之，你不再是一个门外汉了。
16.5.1窗口程序设计概述
利用Tk可以快速地创建出一个图形化的操作界面，与底层窗口系统打交道的工作可以都交
给TK提供的素材去完成。接着、需要把事件处理器（程序）与这些素材结合在一起（通常是使
用Tel语），这样它们就可以对用户的命令做出反应了。这与图形化程序设计实践的正常流程也