In-Depth
» Apply Evasion Regime At Every Attack Step
» Across the Kill-Chain
»
Each stage of cyber kill-chain comes with unique challenges
»
Each challenge needs to be modelled from detection potential point-of-view
»
Each detection area to be addressed with Unique Evasion
Evasion In-Depth -> Across The Kill-Chain
Evasion In-Depth »
» Serve payloads (HTMLs) off Good-Reputation URLs
»
Avoids self-registered domains
»
Snags well-trusted certificates
» Living Off Trusted Sites (LOTS)
»
Outlook Attachment volatile URL
»
Github anonymous Gist
• Clouds
•
Storage Services: S3, Blobs
•
Virtual Machines + webservers
•
Serverless endpoints that host files
• Inter-Planetary File System (IPFS)
Delivery - Payloads Hosting
Hi mr.d0x!
Evasion In-Depth »
»
HTML Smuggling + delay + Anti-Sandbox capabilities
»
VBA Purging, VBA Stomping
»
Office Document Encryption
»
VBA Execution Guardrails (Domain Name, Username, etc)
»
Consider using Template/CustomUI Injection
to de-chain infection process
Delivery - Evasions
Evasion In-Depth »
»
Office Document gets executed
»
Good to use non Auto-Exec Docs (CustomUI) 
»
Or Auto-Exec but with ActiveX entry point
»
Beware of AMSI in VBE7! 
»
DotNetToJS works great against Defender and AMSI! ~ in 2022
»
Evades ASR rules:
»
Block office applications from injecting into other processes
»
Remote Process Injection + Parent PID Spoofing = SUCCESS
Exploitation
Evasion In-Depth »
»
DotNetToJS from VBA
»
Alternatively XSL Loader from VBA
»
Low IOC footprint, executes in-memory, stealthy as hell
»
Spawn into Remote Process to live outside of Office
»
Utilise Parent PID Spoofing
»
Or instead use Dechained Execution:
»
WMI
»
Scheduled Tasks
»
ShellBrowserWindow COM (spawns targets as explorer.exe descendants)
»
COM Hijacking
»
DLL Side-Loading
»
AMSI Evasion from VBA is cumbersome
»
Requires Registry manipulation BEFORE running malicious VBA
»
Or copying Maldoc into Trusted Locations before running it
Exploitation - Evasions
Evasion In-Depth »
» KILLER EVASION:
»
BEWARE OF USING COBALT STRIKE , EMPIRE, SILENTTRINITY, COVENANT, METASPLOIT
»
They’re used to fine tune EDR/XDR/AV detections. Sadly CS is a benchmark now 
» If your Client/Team/Employer can afford it:
»
Develop In-House Malware
»
Better - Develop In-House Mythic C2 Implant (no time wasted for UI)
» What’s fancy nowadays?
»
Nighthawk – helluva C2, but priceyyy
»
Brute Ratel C2 – been told it’s good
»
PoshC2 – may work just fine
»
Sliver – really evasive, requires mods, too heavy for my taste
Installation
Evasion In-Depth »
» Prefer DLLs over EXEs
»
Indirect Execution FTW!
»
Microsoft Defender For Endpoint EDR has this ASR prevalence rule -> not that effective against DLLs
»
DLL Side-Loading / DLL Hijacking / COM Hijacking / XLLs
Installation
Evasion In-Depth »
» Obfuscate your Implants:
»
use my ProtectMyTooling
»
Roll your implants through
multiple daisy-chained packers
»
I’ll release it soon on my 
Github, stay tuned
& follow me on Twitter!
Installation
Evasion In-Depth »
» Watermark iour implants
»
deliberately inject IOCs
»
for implants tracking
»
for VirusTotal polling
»
to stay ahead of Blue Teams
» Inject into:
»
DOS Stub
»
Additional PE Section
»
Manifest
»
Version Info
»
PE Checksum, Timestamp
Installation
Evasion In-Depth »
» If you need to have them EXE 
»
Backdoor legitimate EXE 
»
or Sign Your EXE with legitimate Authenticode
» PE Backdooring strategy:
»
Insert Shellcode in the middle of .text
»
Change OEP 
»
… or better hijack branching JMP/CALL
» Regenerate Authenticode signature
»
Pssst. ScareCrow does Signaturing very well!
Installation
Evasion In-Depth »
1.
Time-Delayed Execution to timeout emulation & make AV Timeout & Transit into Behavioral analysis
2.
Run Shellcode only when correct decryption key acquired – see image below
3. Conceal shellcode in second-to-last (or N-to-last) PE Section
4. Use Parent PID Spoofing wherever applicable
5. Prefer staying Inprocess / Inline
6. For Remote-Process Injection – use elonged DripLoader style:
•
Dechain Alloc + Write + Exec steps
•
Introduce significant delays among them
•
Split shellcode into chunks
•
Write chunks in randomized order
•
Execute in a ROP style = Indirect Execution
Installation – Shellcode Loader Strategies
Nighthawk shellcode loader decryption key
recovery options:
Evasion In-Depth »
»
Patchless AMSI + ETW Evasion (via HWBP + DR0..DR3)
»
Anti-Hooking with Direct Syscalls
»
Consider Self IAT Hooking to redirect unsafe 
CreateRemoteThread to safe Direct Syscall stubs
»
Advanced In-Memory Evasions
»
Shellcode Fluctuation
»
Thread Stack Spoofing
»
Process Heap Encryption
»
Modules Refreshing
»
Unlink Malware PE Modules from PEB during Sleep
»
Indirect Execution -> jump to shellcode thread via System Library Gadgets
»
Indirect Handles Acquisition
»
convert HWND into Process Handle, 
»
reuse opened LSASS handles
»
Anti-Debug, Anti-VM, Anti-Dump, Anti-Splicing, Anti-Sandbox, Anti-Emulation, Anti-Forensics, yeeeaaahhh
Installation - Evasions
Evasion In-Depth »
»
Switch from Fork & Run into Inline (Inprocess) Operations
» Hard to safely perform Remote Process Injection
with apex EDR
• So instead of injecting – remain inprocess
with BOF.NET by @CCob
Command & Control
Evasion In-Depth »
»
Utilise Nginx Rev-Proxy + RedWarden to cut off suspicious Requests & evade JA3
»
C2 over Serverless Redirectors & Domain Fronting (CDNs) only
»
AWS Lambda, Azure Functions, CloudFlare Workers, DigitalOcean Apps
»
Azure CDN, StackPath, Fastly, Akamai, Alibaba, etc.
»
Communicate over Exotic channels (C3):
»
Steganography-based in PNGs hosted on Image Hosting
»
Mattermost
»
Asana
»
Github
»
JIRA
»
Discord, Slack
»
Dropbox, Google Drive
»
OneDrive
»
MSSQL
»
LDAP
»
Printer Jobs
Command & Control
Evasion In-Depth »
»
Always in-memory ZIP / Compress files before exfiltrating
»
Exfiltrate to Cloud Services
»
Azure Storage / Blob
»
OneDrive
»
SharePoint
»
Google Drive
»
Exfiltrate by copying to private OneDrive synced folder
»
Steal Azure / Office Primary Refresh Token (PRT)
»
Steal OneDrive SSO Access & Refresh Tokens
for Session Hijacking on attacker-controlled Machine
Exfiltration
SUMMARY
» Spearphishing via Third-Party channels – LinkedIn
» Forget about attachments in 2022, URLs are the primary viable vector
» Email Delivery-wise:
»
GoPhish on VM1
»
SMTP Redirector on VM2
»
Google Suite / any other decent quality email suite as a next-hop forwarder
• Frequency – extremely low yields best results: keep it 4-5 emails every few hours.
• Pay extra attention to embedded URLs & maturity of chosen domains
• Payload Delivery-wise:
•
Landing Page equipped with Anti-Sandbox
•
HTML Smuggling + delay + “plausible deniability” decoy payload
Phishing – Bullet Points - What Works
Evasion In-Depth »
» My personal Bonnie & Clyde: 
» 2022, still HTML Smuggling + Macro-Enabled Office document = 
»
MacOS – VBA to JXA -> but then heavily sandboxed
» Secret Sauce lies in VBA poetry
» HTML hosted in high-reputation websites, storages, clouds
» Smuggling must include self-defence logic
» Office document encryption kills detection entirely – “VelvetSweatshop” might too!
» VBA Purging lowers detection potential
» VBA Stomping no longer has significant impact on detection potential, therefore not required
» Among different VBA Strategies – File Droppers, DotNetToJS, XSL TransformNode are killing machines
Delivery – Bullet Points
Initial Access – Bullet Points
» HTML Smuggling
» That drops ISO, IMG, Macro-enabled Office docs (yup, they still keep on rolling)
» ISO/IMG/other-containers merely effective against extensions-blacklisting 
» Yummiest Payload Formats
»
PUB, PPTM – rarely blacklisted/sandboxed
»
ACCDB, MDE – for those who favor exotic ones
»
DOCX + Remote Templates (with arbitrary extensions), 
»
DOC/XLS heavily obfuscated/encrypted/purged/yadda, yadda
»
CPL – still ignored by CrowdStrike
Initial Access – Bullet Points
» Effective VBA Macros Strategies
»
File Droppers
»
Simplicity at its best
»
DLL = Indirect + Delayed Execution + No Reputation/Prevalence Evaluation 
»
forget about EXEs in 2022
»
Drop proxy DLL into %LOCALAPPDATA%\Microsoft\Teams\version.dll & execute DLL Side-Loading
»
Drop XLL & setup Excel extension
»
Drop DLL & execute COM Hijacking
»
DotNetToJScript flavoured 
»
Pure In-Memory execution
»
Ironically bypasses Defender’s ASR rule:
»
“Block office applications from injecting into other processes”
»
XSL TransformNode
»
Pure In-Memory execution
»
super effective, not signatured, low IOC surface, lesser known
Installation – Bullet Points
» Use Custom Malware or Customize Lesser Known C2s
»
Modify Open-Source C2 to remove outstanding IOCs, hardcoded HTTP status codes, headers
» Develop Custom Shellcode Loader
»
If you ask me - I’m a purist – C/C++ is the optimal language choice. 
»
Rust/Go/C# add their own specific nuances, I don’t buy them for MalDev
»
Nim looks promising though
»
Embed shellcodes in Proxy DLL loaders
»
Utilize DLL Side-Loading as your execution entry point (Teams’ version.dll is convenient)
»
Direct Syscalls or intelligent Unhooking, AMSI + ETW evasion, delayed execution are MUST HAVE
»
Remote-Process Injection is a tough one to get it right, prefer operating Inline/Inprocess
» Malware Development CI/CD Pipeline
»
Develop -> pass through daisy-chained obfuscations -> Backdoor legitimate PE -> Watermark -> Sign It.
C2 – Bullet Points
» Egress Through HTTPS – Highly Trafficked Servers Only
»
Serverless Redirectors, 
»
Domain Fronting via CDN,
»
Legitimate services – Github, Slack, MS Teams, Asana
» Forget DNS, ICMP, IRC
»
We’re no longer in mid-90s – robust NIPS/NIDS and ML-based signaturing outrules exotic protocols
» Offensive Deep Packet Inspection
»
Closely examine Inbound requests and decide if they originate from your Implants/Infra
»
If not, kill them at spot – TCP RESET/Redirect/404
»
RedWarden-style:
»
Rev-PTR inspection
»
WHOIS, IP Geo
»
HTTP Headers
»
Alignment to expected Malleable contract
Q & A
Questions? ☺
@mariuszbit / PI:EMAIL
https://mgeeky.tech
https://github.com/mgeeky
↘