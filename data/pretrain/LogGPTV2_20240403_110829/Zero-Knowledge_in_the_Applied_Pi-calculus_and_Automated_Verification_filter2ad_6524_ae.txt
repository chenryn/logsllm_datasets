TPM use a different public channel pubT .
The property of anonymity is then formalized as the
statement that P1 and P2 are observationally equivalent,
which is a statement accessible to ProVerif.
The proof
succeeds and the running time is 117 seconds on a Pentium
4, 3 GHz. A more detailed description is again given in the
full version [7].
Pseudonymity can be modelled similarly to anonymity,
but additional care has to be taken so that the adversary can-
not induce the challenge TPM to pseudonymously sign mes-
sages in a way that the adversary can link them to the chal-
lenge signatures. Note that due to an attack on DAA by [29],
the pseudonymity property does not hold if the basename
of the issuer and the basename of the veriﬁer can coincide.
Therefore we use a slightly more restrictive pseudonymity
property which explicitly excludes that the issuer and the
veriﬁer use the same basename. Alternatively, if we ap-
ply the correction of the protocol proposed by [29], we can
prove a stronger pseudonymity property where the issuer
and the veriﬁer basename may coincide. If we use the origi-
nal version of DAA and the stronger pseudonymity property,
our tool ﬁnds the attack by [29]. For space reasons, we will
not discuss the modelling of pseudonymity but refer to the
long version [7].
6 Conclusion and Future Work
We have designed an abstraction of non-interactive zero-
knowledge protocols in the applied-pi calculus. A novel
equational theory for terms characterizes the semantic prop-
erties of non-interactive zero-knowledge proofs. Addition-
ally, we propose an encoding into a ﬁnite speciﬁcation in
terms of a convergent rewriting system that is accessible to
a fully mechanized analysis. The encoding is sound and
fully automated. We successfully used the automated proto-
col veriﬁer ProVerif to obtain the ﬁrst mechanized analysis
of the Direct Anonymous Attestation (DAA) protocol. The
analysis in particular required us to come up with suitable
abstractions of sophisticated cryptographic security deﬁni-
tions that are based on interactive games; we consider these
deﬁnitions of independent interest.
Future work on this topic comprises the investigation of
computational soundness results for our equational theory,
the analysis of other commonly employed protocols based
on zero-knowledge, as well as the investigation of inter-
active zero-knowledge proofs which have additional prop-
erties like the impossibility to reproduce a proof after the
protocols ends. Furthermore, other more direct techniques
for mechanizing the analysis directly in the original, inﬁnite
equational theory might be worth investigating.
Acknowledgments. We thank C˘at˘alin Hri¸tcu and Ben
Smyth for many valuable comments.
References
[1] M. Abadi. Secrecy by typing in security protocols. Journal
of the ACM, 46(5):749–786, 1999.
[2] M. Abadi, B. Blanchet, and C. Fournet. Automated veriﬁca-
tion of selected equivalences for security protocols. In Proc.
20th Annual IEEE Symposium on Logic in Computer Sci-
ence (LICS), pages 331–340. IEEE Computer Society Press,
2005.
[3] M. Abadi, B. Blanchet, and C. Fournet.
Just fast keying
in the pi calculus. ACM Transactions on Information and
System Security, 10(3):9, 2007.
[4] M. Abadi and C. Fournet. Mobile values, new names, and
secure communication. In Proc. 28th Symposium on Prin-
ciples of Programming Languages (POPL), pages 104–115.
ACM Press, 2001.
[5] M. Abadi and A. D. Gordon. A calculus for cryptographic
protocols: The spi calculus. Information and Computation,
148(1):1–70, 1999.
the compiler
[6] M. Backes, M. Maffei, and D. Unruh.
Implemen-
tation of
from zero-knowledge protocol
descriptions into proverif-accepted speciﬁcations, 2007.
Available at http://www.infsec.cs.uni-sb.de/
projects/zk-applied.
[7] M. Backes, M. Maffei, and D. Unruh. Zero-knowledge in the
applied pi-calculus and automated veriﬁcation of the direct
anonymous attestation protocol (full version), 2007. Avail-
able at http://eprint.iacr.org/2007/289.
[8] M. Backes and D. Unruh.
Computational
sound-
proofs
against
Online available
of
symbolic
zero-knowledge
ness
active attackers, February 2008.
http://www.infsec.cs.uni-sb.de/~unruh/
publications/backes08computational.html.
[9] D. Basin, S. Mödersheim, and L. Viganò. OFMC: A sym-
International
bolic model checker for security protocols.
Journal of Information Security, 2004.
[10] B. Blanchet. An efﬁcient cryptographic protocol veriﬁer
based on Prolog rules.
In Proc. 14th IEEE Computer Se-
curity Foundations Workshop (CSFW), pages 82–96. IEEE
Computer Society Press, 2001.
213
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:09:38 UTC from IEEE Xplore.  Restrictions apply. 
Table 8 The processes P1 and P2 in the deﬁnition of anonymity. The numbers in square brackets refer to the steps in the
description of the security property.
[1]
[3]
[3]
[4]
[3]
[5]
[4]
[4]
[4]
[4]
Pi := leak | (pub(x). let id = corrupt(x) in pub(cid:8)seed(id )(cid:9).pub(cid:8)sk(ek(id))(cid:9)) |
(cid:23)
(cid:23)
(let (id, cnt , och) = (id 1, cnt 1, int 1) in tpmjoin) |
(let (id, cnt , och) = (id 2, cnt 2, int 2) in tpmjoin) |
(let id = id 1 in TPMs) | (let id = id 2 in TPMs) |
int 1(cert 1).int 2(cert 2).
(!pub(m). let (id, cnt , cert , pub) = (id i, cnt i, cert i, pubT ) in daasigna) |
(!pub(m). let (id, cnt , cert ) = (id 1, cnt 1, cert 1) in daasigna) |
(!pub(m). let (id, cnt , cert ) = (id 2, cnt 2, cert 2) in daasigna) |
(!pub(m). pub(bsn V ). let (id, cnt , cert ) = (id 1, cnt 1, cert 1) in daasignp) |
(!pub(m). pub(bsn V ). let (id, cnt , cert ) = (id 2, cnt 2, cert 2) in daasignp)
(cid:24)
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)
(10)
[11] D. Bleichenbacher. Chosen ciphertext attacks against pro-
tocols based on the RSA encryption standard PKCS.
In
Advances in Cryptology: CRYPTO ’98, volume 1462 of
Lecture Notes in Computer Science, pages 1–12. Springer-
Verlag, 1998.
[12] E. Brickell, J. Camenisch, and L. Chen. Direct anonymous
attestation.
In Proc. 11th ACM Conference on Computer
and Communications Security, pages 132–145. ACM Press,
2004.
[13] F. Butler, I. Cervesato, A. D. Jaggard, A. Scedrov, and
C. Walstad. Formal analysis of kerberos 5. Theoretical Com-
puter Science, 367(1):57–87, 2006.
[14] D. E. Denning and G. M. Sacco. Timestamps in key distribu-
tion protocols. Communications of the ACM, 24(8):533–536,
1981.
[15] D. Dolev, C. Dwork, and M. Naor. Nonmalleable cryptogra-
phy. SIAM Journal on Computing, 30(2):391–437, 2000.
[16] D. Fisher. Millions of .Net Passport accounts put at risk.
(Flaw detected by Muhammad Faisal
eWeek, May 2003.
Rauf Danka).
[17] C. Fournet, A. D. Gordon, and S. Maffeis. A type discipline
for authorization in distributed systems. In Proc. 20th IEEE
Symposium on Computer Security Foundations (CSF), pages
31–45. IEEE Computer Society Press, 2007.
[18] O. Goldreich, S. Micali, and A. Wigderson. How to play any
mental game – or – a completeness theorem for protocols
with honest majority. In Proc. 19th Annual ACM Symposium
on Theory of Computing (STOC), pages 218–229, 1987.
[19] O. Goldreich, S. Micali, and A. Wigderson. Proofs that yield
nothing but their validity or all languages in NP have zero-
knowledge proof systems. Journal of the ACM, 38(3):690–
728, 1991.
[20] S. Goldwasser, S. Micali, and C. Rackoff. The knowledge
complexity of interactive proof systems. SIAM Journal on
Computing, 18(1):186–207, 1989.
[21] R. Kemmerer. Analyzing encryption protocols using formal
veriﬁcation techniques. IEEE Journal on Selected Areas in
Communications, 7(4):448–457, 1989.
[22] S. Kramer. Logical Concepts in Cryptography. PhD thesis,
École Polytechnique Fédérale de Lausanne, 2007.
[23] S. Kremer and M. Ryan. Analysis of an electronic voting
protocol in the applied pi-calculus.
In Proc. 14th Euro-
pean Symposium on Programming (ESOP), Lecture Notes in
Computer Science, pages 186–200. Springer-Verlag, 2005.
[24] G. Lowe. Breaking and ﬁxing the Needham-Schroeder
public-key protocol using FDR. In Proc. 2nd International
Conference on Tools and Algorithms for the Construction
and Analysis of Systems (TACAS), volume 1055 of Lecture
Notes in Computer Science, pages 147–166. Springer, 1996.
[25] C. Meadows. Using narrowing in the analysis of key man-
agement protocols. In Proc. 10th IEEE Symposium on Secu-
rity & Privacy, pages 138–147, 1989.
[26] J. K. Millen. The interrogator: A tool for cryptographic pro-
tocol security. In Proc. 5th IEEE Symposium on Security &
Privacy, pages 134–141, 1984.
[27] R. Needham and M. Schroeder. Using encryption for authen-
tication in large networks of computers. Communications of
the ACM, 12(21):993–999, 1978.
[28] L. Paulson. The inductive approach to verifying crypto-
Journal of Cryptology, 6(1):85–128,
graphic protocols.
1998.
[29] B. Smyth, L. Chen, and M. D. Ryan. Direct anonymous at-
testation: ensuring privacy with corrupt administrators. In
Proceedings of the Fourth European Workshop on Security
and Privacy in Ad hoc and Sensor Networks, number 4572
in Lecture Notes in Computer Science, pages 218–Â231.
Springer-Verlag, 2007.
[30] F. J. Thayer Fabrega, J. C. Herzog, and J. D. Guttman.
Strand spaces: Why is a security protocol correct? In Proc.
19th IEEE Symposium on Security & Privacy, pages 160–
171, 1998.
[31] D. Wagner and B. Schneier. Analysis of the SSL 3.0 pro-
tocol. In Proc. 2nd USENIX Workshop on Electronic Com-
merce, pages 29–40, 1996.
A Semantics and Observational Equivalence
The semantics of the applied pi-calculus is deﬁned on
extended processes, which are deﬁned as follows:
214
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:09:38 UTC from IEEE Xplore.  Restrictions apply. 
Extended Processes
Table 9 Structural Equivalence
PAR-0
PAR-A
PAR-C
REPL
RES-0
RES-C
RES-PAR A1 | νu.A2 ≡ νu.(A1 | A2)
A ≡ A | 0
A1 | (A2 | A3) ≡ (A1 | A2) | A3
A1 | A2 ≡ A2 | A1
!P ≡ P | !P
νn.0 ≡ 0
νu.νu(cid:2).A ≡ νu(cid:2).νu.A
if u /∈ free(A1)
ALIAS
SUBST
REWRITE
νx.{M/x} ≡ 0
{M/x} | A ≡ {M/x} | A{M/x}
{M/x} ≡ {N/x}
if E (cid:6) M = N
under α-renaming, i.e., renaming of bound names and vari-
ables, and under application of evaluation contexts.
In the following, we write A ⇓ a to denote that A can
send a message on a, i.e., A →∗ C[a(cid:3)M (cid:4).P ] for some
evaluation context C[_] that does not bind a. Observa-
tional equivalence constitutes an equivalence relation that
captures the equivalence of processes with respect to their
dynamic behavior.
Deﬁnition 6 (Observational Equivalence) Observational
equivalence (≈) is the largest symmetric relation R be-
tween closed extended processes with the same domain such
that ARB implies:
1. if A ⇓ a, then B ⇓ a;
2. if A →∗ A(cid:4), then B →∗ B(cid:4) and A(cid:4)RB(cid:4) for some B(cid:4);
3. C[A]RC[B] for all closing evalution contexts C[_].
A ::= P
A1 | A2
νn.A
νx.A
{M/x}
plain
par
name res
var res
subst
Extended processes are plain processes extended with
active substitutions. An active substitution {M/x} is a
ﬂoating substitution that may apply to any process that it
comes into contact with. To control the scope of active
substitutions, we can restrict the variable x.
Intuitively,
νx.(P | {M/x}) constrains the scope of the substitution
{M/x} to process P . If the variable x is not restricted, as
it is the case in the process (P | {M/x}), then the substi-
tution is exported by the process and the environment has
immediate access to M . As usual, the scope of names and
variables is delimited by restrictions and by inputs. We
write f v(A) and f n(A) (resp. bv(A) and bn(A)) to de-
note the free (bound) variables and names in an extended
process A, respectively. We let free(A) := f v(A) ∪ f n(A)
and bound(A) := bv(A) ∪ bn(A). For sequences (cid:11)M =
M1, . . . , Mk and (cid:12)x = x1, . . . , xk, we let {(cid:11)M /(cid:12)x} denote
{M1/x1} | . . . | {Mk/xk}. We always assume that sub-
stitutions are cycle-free, that extended processes contain
at most one substitution for each variable, and that ex-
tended processes contain exactly one substitution for each
restricted variable.
A context is a process or an extended process with a hole.
An evaluation context is a context without private function
symbols whose hole is not under a replication, a conditional,
an input, or an output. A context C[_] closes A if C[A] is
closed, i.e., it does not contain free variables. A frame is an
extended process built up from 0 and active substitutions by
parallel composition and restriction. We let φ and ψ range
over frames. The domain dom(φ) of a frame φ is the set
of variables that φ exports, i.e., those variables x for which
φ contains a substitution {M/x} not under a restriction on
x. Every extended process A can be mapped to a frame
φ(A) by replacing every plain process embedded in A with
0. The frame φ(A) can be viewed as an approximation of
A that accounts for the static knowledge A exposes to its
environment, but not for A’s dynamic behavior.
As mentioned in Section 2, the semantics is deﬁned in
terms of structural equivalence (≡) and internal reduction
(→). Structural equivalence states which processes should
be considered equivalent up to syntactic re-arrangement.
Deﬁnition 5 (Structural Equivalence) Structural equiva-
lence (≡) is the smallest equivalence relation on extended
processes that satisﬁes the rules in Table 9 and that is closed
215
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:09:38 UTC from IEEE Xplore.  Restrictions apply.