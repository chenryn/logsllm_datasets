### TPM and Anonymity

The Trusted Platform Module (TPM) utilizes a distinct public channel, denoted as `pubT`. The anonymity property is formalized by stating that processes `P1` and `P2` are observationally equivalent. This equivalence is verifiable using the ProVerif tool. The proof is successful, taking 117 seconds to complete on a Pentium 4, 3 GHz processor. A more detailed description can be found in the full version [7].

### Pseudonymity

Pseudonymity can be modeled similarly to anonymity, but additional precautions must be taken to prevent an adversary from inducing the challenge TPM to pseudonymously sign messages in a way that allows the adversary to link them to the challenge signatures. Due to an attack on Direct Anonymous Attestation (DAA) by [29], the pseudonymity property does not hold if the issuer's basename and the verifier's basename can coincide. Therefore, we use a slightly more restrictive pseudonymity property that explicitly excludes the issuer and the verifier from using the same basename. Alternatively, if we apply the correction proposed by [29], we can prove a stronger pseudonymity property where the issuer and the verifier basename may coincide. If we use the original version of DAA and the stronger pseudonymity property, our tool can detect the attack by [29]. For brevity, we refer to the long version [7] for the detailed modeling of pseudonymity.

### Conclusion and Future Work

We have designed an abstraction of non-interactive zero-knowledge protocols in the applied-pi calculus. A novel equational theory characterizes the semantic properties of non-interactive zero-knowledge proofs. Additionally, we propose an encoding into a finite specification in terms of a convergent rewriting system, which is accessible to fully mechanized analysis. The encoding is sound and fully automated. We successfully used the automated protocol verifier ProVerif to conduct the first mechanized analysis of the Direct Anonymous Attestation (DAA) protocol. This analysis required us to develop suitable abstractions of sophisticated cryptographic security definitions based on interactive games, which we consider to be of independent interest.

Future work includes investigating computational soundness results for our equational theory, analyzing other commonly employed protocols based on zero-knowledge, and exploring interactive zero-knowledge proofs with additional properties such as the impossibility of reproducing a proof after the protocol ends. Furthermore, direct techniques for mechanizing the analysis in the original, infinite equational theory might be worth investigating.

### Acknowledgments

We thank Cătălin Hrițcu and Ben Smyth for their valuable comments.

### References

[1] M. Abadi. Secrecy by typing in security protocols. Journal of the ACM, 46(5):749–786, 1999.

[2] M. Abadi, B. Blanchet, and C. Fournet. Automated verification of selected equivalences for security protocols. In Proc. 20th Annual IEEE Symposium on Logic in Computer Science (LICS), pages 331–340. IEEE Computer Society Press, 2005.

[3] M. Abadi, B. Blanchet, and C. Fournet. Just fast keying in the pi calculus. ACM Transactions on Information and System Security, 10(3):9, 2007.

[4] M. Abadi and C. Fournet. Mobile values, new names, and secure communication. In Proc. 28th Symposium on Principles of Programming Languages (POPL), pages 104–115. ACM Press, 2001.

[5] M. Abadi and A. D. Gordon. A calculus for cryptographic protocols: The spi calculus. Information and Computation, 148(1):1–70, 1999.

[6] M. Backes, M. Maffei, and D. Unruh. Implementation of the compiler from zero-knowledge protocol descriptions into ProVerif-accepted specifications, 2007. Available at http://www.infsec.cs.uni-sb.de/projects/zk-applied.

[7] M. Backes, M. Maffei, and D. Unruh. Zero-knowledge in the applied pi-calculus and automated verification of the direct anonymous attestation protocol (full version), 2007. Available at http://eprint.iacr.org/2007/289.

[8] M. Backes and D. Unruh. Computational soundness proofs against active attackers, February 2008. Online available at http://www.infsec.cs.uni-sb.de/~unruh/publications/backes08computational.html.

[9] D. Basin, S. Mödersheim, and L. Viganò. OFMC: A symbolic model checker for security protocols. International Journal of Information Security, 2004.

[10] B. Blanchet. An efficient cryptographic protocol verifier based on Prolog rules. In Proc. 14th IEEE Computer Security Foundations Workshop (CSFW), pages 82–96. IEEE Computer Society Press, 2001.

### Table 8: Processes P1 and P2 in the Definition of Anonymity

| Step | Process |
|------|---------|
| [1]  | `leak | (pub(x). let id = corrupt(x) in pub(cid:8)seed(id )(cid:9).pub(cid:8)sk(ek(id))(cid:9))` |
| [3]  | `(let (id, cnt, och) = (id1, cnt1, int1) in tpmjoin)` |
| [3]  | `(let (id, cnt, och) = (id2, cnt2, int2) in tpmjoin)` |
| [4]  | `(let id = id1 in TPMs) | (let id = id2 in TPMs)` |
| [4]  | `int1(cert1).int2(cert2)` |
| [4]  | `(!pub(m). let (id, cnt, cert, pub) = (idi, cnti, certi, pubT) in daasigna)` |
| [4]  | `(!pub(m). let (id, cnt, cert) = (id1, cnt1, cert1) in daasigna)` |
| [4]  | `(!pub(m). let (id, cnt, cert) = (id2, cnt2, cert2) in daasigna)` |
| [4]  | `(!pub(m). pub(bsnV). let (id, cnt, cert) = (id1, cnt1, cert1) in daasignp)` |
| [4]  | `(!pub(m). pub(bsnV). let (id, cnt, cert) = (id2, cnt2, cert2) in daasignp)` |

### A Semantics and Observational Equivalence

The semantics of the applied pi-calculus is defined on extended processes, which are defined as follows:

#### Extended Processes
- **Plain**: `A ::= P`
- **Parallel Composition**: `A1 | A2`
- **Name Restriction**: `νn.A`
- **Variable Restriction**: `νx.A`
- **Substitution**: `{M/x}`

Extended processes are plain processes extended with active substitutions. An active substitution `{M/x}` is a floating substitution that may apply to any process it comes into contact with. To control the scope of active substitutions, we can restrict the variable `x`. Intuitively, `νx.(P | {M/x})` constrains the substitution `{M/x}` to process `P`. If the variable `x` is not restricted, as in the process `(P | {M/x})`, the substitution is exported, and the environment has immediate access to `M`.

As usual, the scope of names and variables is delimited by restrictions and inputs. We write `f v(A)` and `f n(A)` (resp. `bv(A)` and `bn(A)`) to denote the free (bound) variables and names in an extended process `A`, respectively. We let `free(A) := f v(A) ∪ f n(A)` and `bound(A) := bv(A) ∪ bn(A)`. For sequences `(cid:11)M = M1, ..., Mk` and `(cid:12)x = x1, ..., xk`, we let `{(cid:11)M /(cid:12)x}` denote `{M1/x1} | ... | {Mk/xk}`. We always assume that substitutions are cycle-free, that extended processes contain at most one substitution for each variable, and that extended processes contain exactly one substitution for each restricted variable.

A context is a process or an extended process with a hole. An evaluation context is a context without private function symbols whose hole is not under a replication, a conditional, an input, or an output. A context `C[_]` closes `A` if `C[A]` is closed, i.e., it does not contain free variables. A frame is an extended process built up from `0` and active substitutions by parallel composition and restriction. We let `φ` and `ψ` range over frames. The domain `dom(φ)` of a frame `φ` is the set of variables that `φ` exports, i.e., those variables `x` for which `φ` contains a substitution `{M/x}` not under a restriction on `x`. Every extended process `A` can be mapped to a frame `φ(A)` by replacing every plain process embedded in `A` with `0`. The frame `φ(A)` can be viewed as an approximation of `A` that accounts for the static knowledge `A` exposes to its environment, but not for `A`'s dynamic behavior.

As mentioned in Section 2, the semantics is defined in terms of structural equivalence (≡) and internal reduction (→). Structural equivalence states which processes should be considered equivalent up to syntactic re-arrangement.

#### Definition 5: Structural Equivalence
Structural equivalence (≡) is the smallest equivalence relation on extended processes that satisfies the rules in Table 9 and is closed under α-renaming, i.e., renaming of bound names and variables, and under application of evaluation contexts.

#### Definition 6: Observational Equivalence
Observational equivalence (≈) is the largest symmetric relation `R` between closed extended processes with the same domain such that `AR B` implies:
1. If `A ⇓ a`, then `B ⇓ a`.
2. If `A →∗ A'`, then `B →∗ B'` and `A' R B'` for some `B'`.
3. `C[A] R C[B]` for all closing evaluation contexts `C[_]`.

In the following, we write `A ⇓ a` to denote that `A` can send a message on `a`, i.e., `A →∗ C[a(cid:3)M (cid:4).P ]` for some evaluation context `C[_]` that does not bind `a`. Observational equivalence captures the equivalence of processes with respect to their dynamic behavior.