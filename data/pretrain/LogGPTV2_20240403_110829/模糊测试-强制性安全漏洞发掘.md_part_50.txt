## Page 236
第20章内存数据的模测试：自动化221
让我们首先来确定一下将要使用的开发语言，这样我们就可以采用这种语言来展现一些具有参
考价值的代码片段。尽管针对我们的需求而言，我们可能会立即很自然地选择C或者C++，如
果我们可以采用一种解释性的语言来编写该工具，那么将是一个完美的选择，采用一种解释性
的语言如Perl.Python或Ruby来开发该工具具有许多的优越性。出于我们的目的考虑，它所带来
的最大优点就体现在开发速度上，对于读者而言，它将会提高代码的可读性。在发现了由
ThomasHeller开发的Pythonctypes模块之后，我们最终选择了Python作为开发语言。ctypes模
块为我们提供了针对WindowsAPI的一个接口，这样就可以非常简单地直接创建并操纵Python
内部已编译的C数据类型。例如，下面的代码片段说明了调用被kerne132.d11所导出的
GetCurrentProcessId（）函数是非常简单的：
fron ctypes nport *
create a convenfence shortcut to kerne132.
kerne132-wind11.kerne132
#determine the current process ID.
current_pid - kerne132.GetCurrentProcessIdO
print *The current process ID 1s %d* % current_pfd
创建和传递C数据类型同样也非常简单。ctypes模块提供了你所需要的所有基本数据类型，
并将其作为内部Python类，如表20-1所示。
表20-1ctypes中与C兼容的数据类型
ctypes类型
C类型
Python类型
c_char
c_int
Int
Integer
c_long
Long
Integer
c_ulong
unsigned long
Long
Char*
string成者None
c_void_p
Void*
integer或者None
*可用的基本数据类型的完整列表可参阅http:/starship.pythom.net/crew/theller/ctypes/tutorial.html
所有的可用类型可以作为实例的可选初始值来传递。另外，可以通过向value属性赋值来
设定值。通过使用byref（）帮助函数可以简化通过引用来传递值的实现。需要记住的一个关键
点是像c_char_p和c_void_p这样的指针类型是不可变的。为了创建一个可变的内存块，可以使
用create_string_buffer（）帮助函数。为了访问或者修改可变内存块，可以使用raw属性，下
面的代码片段在对ReadProcessMemory（）的调用过程中说明了这些内容：
 http:/starship-python,net/erew/theller/ctypes/
---
## Page 237
222
第二部分目标和自动化
read_buf - create_string_buffer(512)
aunox
（0）6uon）=
kerne132.ReadProcessMemory(h_process,\
OxDEADBEEF,\
read_buf,
512,
byref(count))
print read_buf.raw
ReadProcessMemory（）API的参数包括一个我们想要读取的内存空闻进程的句柄、要读取
的地址、一个指向被读取数据所保存的缓冲区的指针、想要读取的字节数、最后是指向一个整
数的指针，该整数保存了我们能够读取的实际字节的数量。当我们正在进行进程内存空间的读
取操作时，我们应当讨论一下进程内存空间的写人问题，如下面的代码片段所示：
SETam7
c_data = c_char_p(data)
1ength -1en（data)
count = c_u1ong(0)
kerne132. writeProcessMenory(h_process,\
LUEACRLLGUE
OxCOCAC01A,\
c_data,
by_ref(count))
length,
WriteProcessMemory（）函数具有类似于其姊妹函数ReadProcessMemory（）的格式。它所需
要的参数包括一个关于我们想要写人的内存空间进程的句柄，要写入的地址，一个指向包含我
们想要写人的数据缓冲区的指针，我们想要写入的字节数量，最后是一个指向一个整数的指针，
该整数保存了我们可以写人的实际字节数。由于我们需要具备这样的能力，即可以从进程的内
存空间进行读取并写入到该空间以满足我们的一些需求，因此你会看到这些例程将在后续章节
中发挥作用。
现在我们已经掌握了工具开发所需要的相关知识，因此让我们简要讨论一下为了创建一个
调试器，还需要在API方面了解哪些知识。
20.3Windows调试API
在第19章中，我们简要讨论了内存的空间布局以及典型的Windows进程的组成结构。在我
们开始进一步阐述之前，让我们先来复习关于Windows调试API的一些背景知识，根据你个人
的观点，我们将使用或滥用这些知识。
自从WindowsNT开始，操作系统就提供了一个功能强大的API函数和结构的集合，以允许
开发者相对较容易地来创建一个事件驱动的调试器。调试API的基本组成部分可以划分为如下
---
## Page 238
第20章内存数据的模糊测试：自动化223
的三个类别：函数、事件和结构。由于我们关注于不同需求的特定实现，因此我们将涉
及到所有这三个元素。我们必须要完成的第一项工作就是要让目标应用在我们的调试器控制下
运行。有两种方法可以实现这一点。一种方法是我们可以在调试器的控制下加载目标进程，另
外一种方法是让目标进程自己开始运行，然后再将我们的调试器与其相关联。为了在调试器的
控制下加载进程，可以使用下面的代码片段：
P1-PROCESS_INFORMATIONO
S1STARTUPINFOC)
sf.cb = sfzeof(si);
kerne132.CreateProcessA(path_to_fi1e,
command_1ine,
0,
0,
0.
DEBUG_PROCESS,
0,
0.
byref(st),
byref(p1))
注意在CreateProcess后面所追加的一个A，WindowsAPI通常以Unicode和ASClI的格式被
导山。在这种情况下，API的非追加格式是作为一个简单的包装器来使用的。但是对于我们使
用ctypes的目的而言，我们必须要调用带有追加的格式。可以通过简单地查看MSDN的Web页
来确定一个特定的API是否被作为ANSI和Unicode面导出。例如，关于CreateProcess的MSDN
页在底部附件有如下的描述：“被实现为CreateProcessW（Unicode）以及被实现为
CreateProcessA（ANSI）.”PROCESS_INFORMATION和STARTUP_INFO结构被通过引I用传
递给CreateProcessAPI，然后被我们后面将需要的信息所填充，比如被创建进程的标识符
（pi.dwProcessld）以及被创建进程的一个句柄（pi.hProcess）填充。另外，如果我们想要关联
到一个已经正在运行的进程，那么可以调用DebugActiveProcess（）：
#attach to the specified process ID.
kerne132. DebugActiveProcess(pid)
# allow detaching on systens that support it.
try:
kerne132.Debug5etProcessKi110nExit(True)
except:
pass
http://msdn.microsoft.com/library/default.asp7url/library/en-us/debug/buse/debugging_functions.asp
http://msdn,microsoft.com/library/default.asp?url=/library/en-us/debug/base/debugging_events.asp
http://msds,microsoft.com/library/default.asp7uri=/library/en-us/debug/base/debugging_structures.asp
@http:/msdn.microsofL.com/library/default.asp?url=/library/e-us/dllproc/base/createprocess.asp
---
## Page 239
224
第二部分目标和自动化
注意我们在上述代码片段中使用的所有API调用都不需要一个追加的A或者W。
DebugActiveProcess（）例程将我们的调试器关联到一个特定的进程标识符。在调用
DebugActiveProcess（）之前，可能必须要提升我们的特权级别，但是让我们稍后再关注此问
题。自从WindowsXP之后，DebugSetProcessKi110nExit（）例程就是可用的了，它允许我们
不用销毁被调试进程（我们所关联到的那个进程）就可以退出调试器。我们在该调用中加入了
一个try/except语句，使得如果我们正在一个不支持被请求的API的平台，例如Windows2000上
运行调试器时，可以阻止我们的调试器错误地退出。一旦我们拥有了在调试器控制下的目标进
程，我们需要来实现处理调试事件的循环。调试事件循环可以被认为是城镇中守旧的爱管闲事
的邻居艾格尼丝（Agnes）。艾格尼丝坐在她家的窗户前面，观看着附近所发生的一切事情。尽
管艾格尼丝可以看到任何事情，但是大多数所发生的事情都不是那么有趣以激发她打电话告诉
朋友。但是偶尔将会发生一些有趣的事情，例如邻居的小孩将一只猫追赶到了一棵树上，结果
摔伤了骼膊，那么艾格尼丝将会立即打电话通知警察。与艾格尼丝非常相像，我们的调试事件
循环也将会看到许多的事件。我们需要来指定哪些事件是我们所感兴趣井希望进行更多处理的，
下面是一个典型的调试事件循环的框架：
ba
= DEBUG_EVENTO)
continue_status = DeG_CONTINUE
while debugger_active:
ret-kerne132.waicForDebugrent(byref（dog）,100)
if no debug event occurred, continue.
if not ret:
continue
event_code -dbg.dnDebugEventCode
0790760
1fevent_codeCREATE_PROCESS_DEBUG_EVENT:
new process created
1697
if event_code = CREATE_THREAD_DEBUC_EVENT:
new thread created
if event_code == EXIT_PROCESS_DEBUG_EVENT:
# process exited
1f event_code -- EXIT_THREAD_DEBUG_EVENT:
thread exited
1f event_code =- LOAD_DLL_DEBUG_EVENT:
new DLL 1oaded
1f event_code -= UNLOAD_DLL_DEBUC_EVENT:
---
## Page 240
第20章内存数据的模期测试：自动化225
 DLL un1oaded
ifevent_code=EXCEPTION_DEBUC_EVENT:
-17
#an exception was caught
continue processing
kerne132.ContinueDebugEvent（dbg.dwProcessId,\
dbg.dwThreadId,
continue_status)
调试事件处理循环主要是基于对WaitForDebugEvent（）é的调用，WaitForDebugEvent（）
函数的第一个参数是指向一个DEBUG_EVENT结构的一个指针，第二个参数是在被调试进程中
等待一个调试事件发生所需要的毫秒数。如果发生了一个调试事件，那么DEBUG_EVENT结构
将在dwDebugEventCode属性中包含调试事件类型。我们通过检查该变量来确定调试事件是否由
于以下原因而被触发：一个进程的创建或退出，一个线程的创建或退出，一个DLL的加载或卸
载或者是一个调试异常事件。在调试异常事件发生的情况下，我们可以通过检查u.Exception.
ExceptionRecord.ExceptionCodeDEBUG_EVENT结构的属性来确定导致该异常的原因是什
么。在MSDN上列出了许多可能的异常代码，但出于这里的考虑，我们主要是关注以下的异
常代码：