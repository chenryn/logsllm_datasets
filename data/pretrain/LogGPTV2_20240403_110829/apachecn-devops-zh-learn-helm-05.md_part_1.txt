# 五、打造你的第一张 Helm 图表
在前一章中，您了解了组成 Helm 图表的各个方面。现在，是时候通过构建一个 Helm 图表来测试这些知识了。学习构建 Helm 图表将允许您以一种易于部署的方式打包复杂的 Kubernetes 应用。
在本章中，您将学习如何构建一个 Helm 图表来部署`guestbook`应用，这是一个在 Kubernetes 社区中使用的常见快速启动应用。该图表将通过遵循 Kubernetes 和 Helm 图表开发的最佳实践来构建，以提供一个编写良好且易于维护的自动化部分。在开发这个图表的整个过程中，你会学到许多不同的技能，可以用来构建你自己的 Helm 图表。在本章的最后，您将学习如何打包您的 Helm 图表并将其部署到图表存储库中，最终用户可以轻松访问该图表。
本章涵盖的主要主题如下:
*   了解留言簿应用
*   创建留言簿 Helm 图表
*   改进留言簿 Helm 图表
*   将留言簿图表发布到图表库
# 技术要求
本章需要以下技术:
*   `minikube`
*   `kubectl`
*   `helm`
除了前面的工具之外，您还可以在 https://github.com/PacktPublishing/-Learn-Helm 找到这本书的 GitHub 存储库。我们将参考本章中包含的 `helm-charts/charts/guestbook`文件夹。
建议您拥有自己的 GitHub 帐户，以便完成本章的最后一节*创建图表存储库。*该部分将提供如何创建您自己的帐户的说明。
# 了解留言簿应用
在这一章中，您将创建一个 Helm 图表来部署 Kubernetes 社区提供的留言簿教程应用。该应用在 Kubernetes 文档的以下页面[中介绍:https://Kubernetes . io/docs/教程/无状态-应用/guestboo](https://kubernetes.io/docs/tutorials/stateless-application/guestbook/) k/
留言簿应用是一个简单的 PHP:超文本预处理器(T2)前端，用于将 T4 消息保存到 Redis 后端。前端由对话框和**提交**按钮组成，如下图所示:
![Figure 5.1: The Guestbook PHP frontend ](img/Figure_5.1.jpg)
图 5.1:留言簿 PHP 前端
要与该应用交互，用户可以执行以下步骤:
1.  在**消息**对话框中输入消息。
2.  点击**提交**按钮。
3.  点击**提交**按钮后，信息将保存到 Redis 数据库。
Redis 是一个内存中的键值数据存储，在本章中，它将被集群用于数据复制。群集将由留言簿前端将写入的一个主节点组成。一旦写入，主节点将跨多个从节点复制数据，留言簿前端将从中读取数据。
下图描述了留言簿前端如何与 Redis 后端交互:
![Figure 5.2: Guestbook frontend and Redis interaction ](img/Figure_5.2.jpg)
图 5.2:留言簿前端和 Redis 交互
有了对留言簿前端和 Redis 后端如何交互的基本理解，让我们建立一个 Kubernetes 环境来开始开发 Helm 图表。在开始之前，让我们首先启动 minikube，并为本章创建一个专用的名称空间。
# 设置环境
为了查看图表的运行情况，您需要按照以下步骤创建您的 minikube 环境:
1.  通过运行`minikube start`命令启动 minikube，如下所示:
    ```
    $ minikube start
    ```
2.  创建一个名为`chapter5,`的新命名空间，如下所示:
    ```
    $ kubectl create namespace chapter5
    ```
部署留言簿图表时，我们将使用这个名称空间。现在环境准备好了，让我们开始写图表。
# 创建留言簿 Helm 图表表
在这一部分，我们将创建一个 Helm 图表来部署留言簿应用。最终图表已发布在 Packt 存储库的`helm-charts/charts/guestbook`文件夹下。当你跟着例子走的时候，请随意参考这个位置。
我们将首先搭建留言簿 Helm 图表来创建图表的初始文件结构，从而开始开发。
## 搭建初始文件结构
大家可能还记得 [*第四章*](04.html#_idTextAnchor203)*理解 Helm 图表*，Helm 图表必须遵循特定的文件结构才能被认为有效。也就是说，图表必须包含以下必需文件:
*   `Chart.yaml`:用于定义图表元数据
*   `values.yaml`:用于定义默认图表值
*   `templates/`:用于定义要创建的图表模板和 Kubernetes 资源
我们在 [*第 4 章*](04.html#_idTextAnchor203)*中提供了图表可以包含的每个可能文件的列表，但是前面三个文件是开始开发新图表所必需的文件。虽然这三个文件可以从头开始创建，但 Helm 提供了一个`helm create`命令，可以用来更快地构建一个新的图表。除了创建前面列出的文件之外，`helm create`命令还将生成许多不同的样板模板，可以用来更快地编写您的 Helm 图表。让我们使用这个命令来构建一个名为`guestbook`的新 Helm 图表。*
`helm create`命令以 Helm 图表的名称(`guestbook`)作为参数。在本地命令行上运行以下命令来构建此图表:
```
$ helm create guestbook
```
运行此命令后，您将在机器上看到一个名为`guestbook/`的新目录。这是包含您的 Helm 图表的目录。在目录中，您将看到以下四个文件:
*   `charts/`
*   `Chart.yaml`
*   `templates/`
*   `values.yaml`
可以看到，`helm create`命令创建了一个`charts/`目录，此外还有所需的`Chart.yaml`、`values.yaml`和`templates/`文件。`charts/`目录目前为空白，但稍后当我们声明图表相关性时，它将自动填充。您可能还会注意到，其他提到的文件已经自动填充了默认设置。在本章中，我们将在开发`guestbook`图表时利用许多这些默认值。
如果您浏览`templates/`目录下的内容，您会发现默认情况下包含了许多不同的模板资源。这些资源将节省原本从头开始创建这些资源所花费的时间。虽然生成了许多有用的模板，但我们将删除`templates/tests/`文件夹。此文件夹用于包含您的 Helm 图表的测试，但我们将重点在 [*第 6 章*](06.html#_idTextAnchor292)*测试 Helm 图表*中编写您自己的测试。运行以下命令删除`templates/tests/`文件夹:
```
$ rm -rf guestbook/templates/tests
```
现在`guestbook`图表已经搭建好了，让我们继续评估已经生成的`Chart.yaml`文件。
## 评估图表定义
图表定义或`Chart.yaml`文件用于包含 Helm 图表的元数据。我们在 [*第 4 章*](04.html#_idTextAnchor203)*中讨论了`Chart.yaml`文件的每一个可能选项，但是让我们回顾一下包含在典型图表定义中的一些主要设置，如下所示:*
*   `apiVersion`:设置为`v1`或`v2` ( `v2`是头盔 3 的首选选项)
*   `version`:Helm 图表的版本。这个应该是符合**语义版本化规范** ( **SemVer** )的版本。
*   `appVersion`:Helm 图表正在部署的应用的版本
*   `name`:Helm 图表的名称
*   `description`:Helm 图表及其设计部署的简要说明
*   `type`:设置为`application`或`library`。`Application`图表用于部署特定的应用。`Library` 图表包含一组帮助函数(也称为“命名模板”)，可用于其他图表以减少样板文件。
*   `dependencies`:Helm 图表所依赖的图表列表
如果您观察您搭建的`Chart.yaml`文件，您会注意到这些字段中的每一个(依赖项除外)都已经设置好了。这个文件可以在下面的截图中看到:
![Figure 5.3: The scaffolded Chart.yaml file ](img/Figure_5.3.jpg)
图 5.3:搭建的图表文件
我们将暂时保留这个文件中包含的每个设置的默认值(尽管如果你愿意，可以随意写一个更有创意的描述)。当这些默认值变得相关时，我们将在本章后面更新它们。
默认图表定义中不包括但应该考虑的附加设置是`dependencies`。我们将在下一节更详细地讨论这一点，其中将添加一个 Redis 依赖项来简化开发工作。
## 添加 Redis 图表相关性
正如*理解留言簿应用*一节中提到的，这个 Helm 图表必须能够部署一个 Redis 数据库，该数据库将用于保存应用的状态。如果您完全从头开始创建这个图表，您需要正确理解 Redis 是如何工作的，以及如何将其正确部署到 Kubernetes。您还需要创建部署 Redis 所需的相应图表模板。
或者，通过包含已经包含逻辑和所需图表模板的 Redis 依赖项，您可以大大减少创建`guestbook` Helm 图表的工作量。让我们通过添加 Redis 依赖项来修改搭建的`Chart.yaml`文件，以简化图表开发。
添加 Redis 图表依赖关系的过程可以通过以下步骤执行:
1.  通过运行以下命令在 Helm Hub 存储库中搜索 Redis 图表:
    ```
    $ helm search hub redis
    ```
2.  将显示的图表之一是 Bitnami 的 Redis 图表。这是我们将用作依赖项的图表。如果您尚未在 [*第 3 章*](03.html#_idTextAnchor147)*中添加`bitnami`图表库，请使用`helm add repo`命令立即添加该图表库。请注意，存储库**统一资源定位器** ( **网址**)是从掌舵中心存储库中的 Redis 图表页面中检索的。代码可以在下面的片段中看到:
    ```
    $ helm add repo bitnami https://charts.bitnami.com
    ```* 
3.  Determine the version of the Redis chart you would like to use. A list of version numbers can be found by running the following command:
    ```
    $ helm search repo redis --versions
    NAME                        	CHART VERSION	APP VERSION
    bitnami/redis               	10.5.14       	5.0.8
    bitnami/redis               	10.5.13       	5.0.8
    bitnami/redis               	10.5.12       	5.0.8
    bitnami/redis               	10.5.11       	5.0.8
    ```
    您必须选择的版本是图表版本，而不是应用版本。应用版本只描述 Redis 版本，而图表版本描述的是实际 Helm 图表的版本。
    依赖项允许您选择特定的图表版本，或通配符，如`10.5.x`。使用通配符可以让您轻松地用与该通配符匹配的最新 Redis 版本(在本例中是版本`10.5.14`)更新图表。在这个例子中，我们将使用版本`10.5.x`。
4.  Add the `dependencies` field to the `Chart.yaml` file. For the `guestbook` chart, we will configure this field with the following minimum required fields (additional fields are discussed in [*Chapter 4*](04.html#_idTextAnchor203), *Understanding Helm Charts*):
    `name`:依赖关系图的名称
    `version`:依赖关系图的版本
    `repository`:依赖关系图的存储库 URL
    将以下 **YAML 非标记语言** ( **YAML** )代码添加到您的`Chart.yaml`文件的末尾，提供您收集的关于 Redis 图表的信息来配置依赖项的设置:
```
dependencies:
  - name: redis
    version: 10.5.x
    repository: https://charts.bitnami.com
```
一旦添加了依赖项，完整的`Chart.yaml`文件应该如下所示(为简洁起见，注释和空行已被删除):