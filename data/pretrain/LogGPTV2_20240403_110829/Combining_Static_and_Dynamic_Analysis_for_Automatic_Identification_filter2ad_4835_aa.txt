# Title: Combining Static and Dynamic Analysis for Automatic Identification of Precise Access-Control Policies

## Authors
- Paolina Centonze, IBM Watson Research Center, Hawthorne, New York, USA
- Robert J. Flynn, Polytechnic University, Brooklyn, New York, USA
- Marco Pistoia, IBM Watson Research Center, Hawthorne, New York, USA

## Conference
23rd Annual Computer Security Applications Conference

## Abstract
Identifying an optimal access-control policy for a large, component-based program is challenging, as it must allow the program to execute without authorization failures and adhere to the Principle of Least Privilege. This paper introduces a novel combination of static and dynamic analysis techniques for automatically determining precise access-control policies for programs running on Stack-Based Access Control (SBAC) systems, such as Java and the Common Language Runtime (CLR). The static analysis models the program's execution, accounting for native methods, reflection, and multi-threaded code, while the dynamic analysis refines these results interactively, without the need for writing or generating test cases, restarting the system, or risking corruption of the underlying system.

We implemented this analysis framework in a tool for Java programs called Access-Control Explorer (ACE). ACE enables automatic, safe, and precise identification of access-right requirements and library-code locations that should be made privilege-asserting to prevent client code from requiring unnecessary access rights. Experimental results are presented for large, production-level applications.

## 1. Introduction
Defining the security policy for a program, especially one that is large and complex, is a challenging task. Ideally, the security policy should be just sufficient for the program to run without authorization failures, adhering to the Principle of Least Privilege. Modern component-based software systems, such as Java and Microsoft .NET CLR, use Stack-Based Access Control (SBAC), where stack inspection ensures that all code on the call stack is sufficiently authorized when accessing restricted resources.

In SBAC systems, developers must decide whether to make portions of library code privilege-asserting, which stops the runtime stack inspection at the library level. This can exempt client code from needing certain access rights, but it must be done cautiously to avoid security risks. Traditionally, security policies are defined through source-code inspection and testing, but these methods can be impractical and error-prone for large and complex programs. Static analysis, while theoretically sound, can produce conservative overapproximations, leading to false alarms and potential violations of the Principle of Least Privilege.

This paper presents a novel combination of static and dynamic analysis to achieve precise identification of authorization and privilege-assertion requirements in SBAC systems. The static analyzer includes:
- A scalable, context-sensitive analysis.
- An automatic model generator for native methods.
- Sound models for reflection and callbacks.
- A complete model of the stack inspection mechanism, including privilege-asserting and multi-threaded code.

The dynamic analysis framework includes:
- A sandboxing environment to protect the underlying system.
- A configurable framework for detecting authorization and privilege-assertion requirements.
- An interactive system for precise authorization decisions.
- A mechanism for immediate identification of security side effects.
- An automatic mechanism for policy minimization.

These techniques have been implemented in the Access-Control Explorer (ACE) tool for Java programs, and experimental results are presented for large, production-level applications.

## 2. Motivating Examples
### 2.1 Authorization Analysis
Consider a Java library (Figure 1) with various methods requesting different permissions. A purely static analysis approach may not accurately evaluate the required permissions due to conservativeness and unsoundness. For example:
- The permissions required by `readLogFile1` and `readLogFile2` are difficult to evaluate without string computations.
- A path-insensitive static analyzer may report unnecessary permissions for `getSystemProperty1`.
- Multi-threaded code and interprocedural flow insensitivity can lead to false positives and negatives.

A purely dynamic analysis approach also has limitations, such as the absence of a complete suite of test cases, leading to imprecise results. For instance:
- The `java.io.FilePermission` required by `readLogFile3` depends on the parameter passed, making it difficult to generalize.
- Test-case-dependent results for `readLogFile1` due to side effects in `readLogFile2`.

Combining static and dynamic analysis eliminates these imprecisions.

### 2.2 Privilege-Asserting-Code Analysis
A Java developer can make portions of library code privilege-asserting by wrapping them in a call to `doPrivileged`. This paper shows how a combination of static and dynamic analysis can automatically and precisely identify which portions of code should be made privilege-asserting and the sets of permissions implicitly granted to clients.

## 3. Static Analyzer
The static analyzer includes several key features to ensure precision and scalability. These include:
- A scalable, context-sensitive analysis.
- An automatic model generator for native methods.
- Sound models for reflection and callbacks.
- A complete model of the stack inspection mechanism, including privilege-asserting and multi-threaded code.

These features collectively contribute to the precision and effectiveness of the static analysis component of the combined approach.