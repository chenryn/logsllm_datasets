中的转义字符进行解析，而在处理普通字符串时，则对其进行解析。Python遵循类似于
创建一个字符串时，通过在引号之前放置字母r，可以创建一个原始字符串。从根本上
Out[8]:'this is a\nmultiline string'
In [8]: s..
使用：
In [6]: s
符，
标准C语言对转义序列的一系列规则。例如，在普通字符串中，“\t”被解析成tab字
8
列
File "", line 1
“\n”
第3章
”被解析成换行，
newlineIgnored忽略换行符
ASCIIBell响铃
Double quote双引号
Single quote单引号
Backslash反斜杠
“\r”被解析成回车。表3-1展示了Python中使用的转义序
www.TopSage.com
---
## Page 97
In[10]:S=r'"'\t""
In [9]: print s
Out[8]:'\t'
In [8]:s
In [7]: s= ""'\t"".
In [4]: s = r'\t'
In [3]: print s
In [1]: s ='\t'
例3-3：转义序列与原始字符串
进行介绍。例3-3显示了在原始字符串中转义序列是如何使用的。
转义序列的原始字符串方便记忆，尤其是在处理正则表达式的时候，这在本章的后面将
Axhh
1ooo
\Uxxxxxxxx
M
luxxxx
\N{name}
转义字符
表3-1：Python的转义序列（续）
Characterwithhexvaluehh十六进制值表示的字符
Character with octal value oo八进制值表示的字符
ASCII vertical tab垂直制表符
字符（仅Unicode）
Character with 32-bit hex value xxxx (Unicode only)32位十六进制值表示的
字符（仅Unicode）
Character with 16-bit hex value xxxx(Unicode only)16位十六进制值表示的
ASCII horizontal tab水平制表符
ASCII carriage return回车
Named character in Unicode database (Unicode strings only)Unicode数据库
ASCII line feed换行
ASCII form feed表格换行
ASCII backspace退格
解析为
中命名的字符（仅Unicode字符串）
www.TopSage.com
文本丨83
ODG
---
## Page 98
字符串是对象，提供了可以被调用以执行操作的方法。但是提及方法，不能仅限于str
绍，请查阅第2章中的相关内容。
析字符串中的转义序列，并合理显示其内容。如果想看到对_repr_和_str_更多的介
果在IPython提示符下输人一个变量名，然后按回车键，它的_repr_表示将显示出来。
为“\”和“t”两个字符。
符串，可以将“\t”解析为tab字符。而同样的字符串如果以r开头，可以将“\t”解析
个由两个字符“\”和“t”组成的字符串。对于使用单引号、双引号或三引号创建的字
当转义序列被解析时，
In [13]: s = r'\"'
In [12]: print s
Out[4]: 'Linux #1 SMP Tue Feb 12 02:46:46 UTC 2008"
In [3]: uname = res.stdout.read().strip()
In [2]: res = subprocess.Popen(['uname', '-sv'], stdout=subprocess.PIPE)
In [1]:import subprocess
字符串的一部分。参见例3-4。
解更多的详细信息，请参见附录。可以使用in和notin来检查一个字符串是否是另一个
用的方法。这包括所有的str方法，也包括前一个示例中使用的in和not in文本操作。
对象类型提供给我们使用的方法，还应包括所有可以用于从字符串对象中提取数据的可
对于str进行数据提取的内建方法
84
Out[5]:True
In [5]:'Linux' in uname
In [4]: uname
例3-4：In和not in
第3章
“\t”表示tab。当转义序列不被解析时，
www.TopSage.com
“\t”只是简单的一
X
---
## Page 99
ValueError异常，表示它无法找到那个字符串。
时，index()方法与find()方法表现类似。但是，当查找"Darwin"时，index()抛出一个
为0。然而，find()方法无法找到"Darwin"，因此返回值为-1。当Python搜索"Linux"
符串开始处找到字符串"Linux"，所示返回值为o，表示"Linux"的第一个字符的索引
第一个字符的索引，否则它会抛出一个ValueError异常。在示例中，find()方法在字
内容。）如果string1包括在string2中，string2.index(string1）将返回string1的
string1第一个字符的索引，否则，返回-1，（别着急，我们马上会介绍有关索引的
如果string1在string2中（正如先前看到的示例），string2.find(string1)将返回
Out[12]:-1
In [12]: uname.find('Darwin')
: substring not found
/home/jmjones/code/ in ()
In [11]: uname.index('Darwin')
Out[10]:0
In [10]: uname.find('Linux')
Out[9]:0
In [9]:uname.index('Linux')
例3-5：find0和index0
出现的具体位置。使用find()和index()可以实现这一目的。参见例3-5。
有时仅仅需要知道一个字符串是否是另一个字符串的子串。但有时还需要知道子字符串
in的有趣之处。
查"Darwin"是否包含在uname所表示的字符串中时，返回值为假。接下来我们演示了not
为假。因此在检查"Linux"是否包含在uname所表示的字符串中时，返回值为真，而当检
Out[8]:True
In [8]:'Darwin' not in uname
Out[7]:False
In [7]: 'Linux' not in uname
Out[6]:False
In [6]: 'Darwin' in uname
www.TopSage.com
Traceback (most recent call last)
文本丨85
---
## Page 100
使用字符串切分语法“string[index:]”，可以查找到从sMP开始到字符串结尾的每一
Out[15]: 'SMP Tue Feb 12 02:46:46 UTC 2008'
In [14]: smp_index
In [13]: smp_index = uname.index('SMP')
相关的讨论，参见由alex Martelli编著的《Python in a Nutshell(O'Reilly)》第4章序列操
Out[17]: 'Linux #1 SMP Tue Feb 12 02:46:46 UTC 2008'
In [15]: uname[smp_index:]
例3-6：字符串切分
index()返回的索引表明从较长字符串中的哪一个字符开始匹配子字符串。参见例3-6。
如何处理索引号呢？使用它们有什么好处呢？字符串被理解为一系列字符。find()和
In [5]: some_string.endswith("Manigzove")
In [1]: some_string = "Raymond Luxury-Yacht"
例3-7：startswithO和endswithO
个方法可以帮助你判断字符串是否以某一特定子串开始，或是以某一特定子串结束。参
另外两个或许会用到的方法是startswith()和endswith()。正如方法名所表示的，这两
作，也可以在线访问http://safari.oreilly.com/0596100469/pythonian-CHP-4-SECT-6。
列，因此可以像处理列表这样的序列结构一样进行处理。如果希望查看更多对序列处理
上述字符串切分示例，以及in与notin检测示例主要是为了向你展示字符串是一个序
在位置的所有字符。两者之间仅有的差别在于冒号（：）在索引的左边或是右边。
个字符。使用语法string[:index]，我们可以看到从uname字符串起始位置到找到SMP所
In [17]:uname
Out[16]:'Linux #1‘
In. [16]: uname[:smp_index]
Out[14]:9
Out[5]: False
见例3-7：
: some_string.startswith("Raymond")
第3章
True
www.TopSage.com
DG
---
## Page 101
In [3]: print spacious_string
In [1]: spacious_string = "\n\t Some Non-Spacious Text\n \t\r"
例3-9: lstripO、rstripO 和stripO
注意：
有空白，并返回一个新字符串。参见例3-9。
串作为一个新的字符串返回。不带参数使用strip()可以删除在字符串开始及结尾的所
回。使用不带参数的rstrip()可以删除出现在字符串结尾的空白，并把去除空白的字符
可以删除在字符串开始处出现的空白，并把去除空白的字符串作为一个新的字符串返
白，和前后空白的方法。空白可以包括tab、空格、回车和换行。不带参数使用lstrip()
如果不带任何参数，lstrip(）、rstrip()和strip()分别是用来删除前导空白，结尾空
始，而没有使用startswith()方法。在结尾的“Luxury-Yacht.”也是如此。
some_string的开始。换句话说，我们可以看到some_string以字符串“Raymond”开
可以看到，通过切分，尽管其中有多个字符，字符串“Paymond”还是出现在了
注意：
Out[9]: False
"oxsuw, =- [(noxsue)ut-]usrs aos :[6] ur
Out[7]:False
In [6]: some_string[:len("Raymond")] == "Raymond"
Out[8]:
例3-8：使用切分技术实现Startswith(和endswith(功能
用起来有一些麻烦和枯燥。参见例3-8。
结束。如果使用上文介绍的切分方法，
以“Luxury-Yacht.”结束。而不是以“Throatwarbler”开始，也不是以“Mangrove.”
可以看到Python返回的信息：字符串“Raymond Luxury-Yacht”以“Raymond”开始，
所有的strip()方法创建并返回新的字符串对象，而不是对字符申进行行内修改。这或许根
本不是什么问题，但是却是值得引起注意的地方。
 Some Non-Spacious Text
用startwith()及endswith()可以满足需要的情况下，应避免使用切分操作。
切分一个字符串的频率，会对内存和性能有明显的影响。即使没有明显的性能影响，在使
切分操作可以创建并返回一个新的字符串对象，而不是在行内对字符串进行修改。脚本中
True
www.TopSage.com
，也可以简单地获得相同的结果，但是切分方法使
.文本丨87
D
---
## Page 102
88丨第3章
回字符串"some_tag"。但是这里有一个更为简单的方法：
以下示例演示如何依次去除XML标签的左尖括号和右尖括号。但是如果想同时删除左右
串。这意味着strip()等方法不只删除空白，还可以根据需要删除任何内容。
但是，strip()、rstrip()以及lstrip()都有一个可选参数：待除去的字符所组成的字符
In [9]: print spacious_string.strip()
In [7]:print spacious_string.rstrip()
Some Non-Spacious Text
In [5]: print spacious_string.lstrip()
尖括号）并且返回一个字符串，第二个strip()函数删除末尾字符（右尖括号）并且返
符串操作。这里，我们将strip()调用连续使用。第一个strip()调用去除起始字符（左
既然strip()等方法可以返回一个字符串，就可以在strip()调用之后直接调用另一个字
尖括号时，该如何解决呢？可以这样来操作：
Some Non-Spacious Text
In [6]: xml_tag.strip("")
In [5]: xml_tag.rstrip("")
In [3]: xml_tag.lstrip(">")
Out[2]: 'some_tag>"
In [2]: xml_tag.lstrip(""
Out[6]:'some_tag'
Out[s]:''
Out[4]:''
'Some Non-Spacious Text
 Some Non-Spacious Text
www.TopSage.com
---
## Page 103
In [1]: mixed_case_string = "vorpal BUnny"
例3-10:upper()和lower0
的大写。lower()方法返回一个字符串，该字符串是小写的原始字符串（参见例3-10）。
虑字符是大写或是小写时。upper()方法返回一个字符串，该字符串是大写的原始字符串
upper()方法和lower()方法非常有用，尤其是在需要对两个字符串进行比较，并且不考
顺排列的。
在这个示例中，strip()同样也删除了“”，
“f”
下面是一个比较清楚的示例：
括号在后的组合，而是可以删除任何“”的组合。
“，°，）
字符串的适当一侧开始删除这些指定字符的任意顺序组合。在上面的示例中，我们告诉
你可能设想strip()能够按照你所输入的字符进行准确删除，但是实际上，strip()将从
Out[13]:'blah'
In [13]: foo_str.strip(">")
In [11]: foo_str = “blah"
Out[10]:'gt lt str'
In [10]: gt_lt_str.strip(">")
In [8]: gt_1t_str = "<><><>gt It str<><><>"
Out[7]: 'some_tag'
In [7]: xml_tag.strip("<>")
“。”和“>”的顺序进行匹配的。它将删除字符串中包含的全部4个字符，绝不
。下面是另一个strip()示例，可以清晰的看到这一点：
www.TopSage.com
“f”和“o”，尽管字符根本不是按这个
，只保留了字母和空格。
，也就是左尖括号在前右尖
文本丨89
---
## Page 104
In [2]: pipe_delim_string = "pipepos1|pipepos2|pipepos3"
In [1]: comma_delim_string ="pos1,pos2,pos3"
类任务。参见例3-11。
如果需要根据某个指定的分隔符对一个字符串进行提取，split()方法正好可以完成这
In [5]: mixed_case_string.upper() =α "voRPAL BUNNy"
In [4]: mixed_case_string == "voRPAL BUNNY".
Out[3]:True
Out[2]:False
In [2]: mixed_case_string == "vorpal bunny"
需要的分割符是多个连续的字符，而不是单个字符时，split()方法也提供了支持。在
返回值是一系列字符串，每一个都是一组位于两个指定的分隔符之间的连续字符。当你
pipe_delim_string，只需要将逗号和管道符分别传递给split()函数即可。split()的
我们能够通过split(）函数，以逗号分割comma_delim_string，以管道符（l）分割
常，分隔符是单个字管道符，例如逗号或符，但是也可以是多于一个字符的字符串。
split()方法的典型用法是把希望作为分割符的分割的字符串作为参数传递给它。通
In [4]: pipe_delim_string.split('I')
例3-11:splitO
Out[6]:'
90丨第3章
In [3]: multi_delim_string.split("xx")
In [1]:multi_delim_string="pos1xxxpos2xxxpos3"
例3-12：splitO多定界符（delimiter）示例
字符时，它仍会正常工作。参见例3-12。
split()方法的都只是单个字符，但实际上仍是一个字符串。因此在传递给split()多个
我们写这本书的时候，Python中还没有字符类型，因此，虽然在两种情况下我们传递给
'vorpal bunny
'VORPAL BUNNY'
'pos2',