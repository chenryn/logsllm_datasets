Zen
Zen 2
A57
EchoLoad Data Bounce
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✗
✗
✗
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✗
✗
✗
✗
✗
Table 2: Performance of EchoLoad in terms of runtime and
F-score. Each possible offset is tested a single time.
CPU
Time (F-Score)
i7-6700K
i9-9900K
Time (F-Score)
Xeon Silver 4208 Time (F-Score)
Speculation TSX
63 µs (0.999)
33 µs (1.000)
51 µs (0.994)
48 µs (1.000)
29 µs (1.000)
40 µs (1.000)
Segfault
133 µs (1.000)
86 µs (1.000)
127 µs (1.000)
exploits the inverse effect, i.e., the retrieving of a zero value, to
break KASLR.
Evaluation. We evaluated EchoLoad on different Intel microarchi-
tectures running Linux (cf. Table 1). On all CPUs, we evaluated our
attack with both KPTI enabled and disabled. These experiments
show that KPTI does not prevent EchoLoad. If KPTI is disabled,
EchoLoad detects the symbol startup_64. With KPTI, it detects the
symbol __entry_text_start, which is the trampoline required
to enter the kernel. As Android is based on the Linux kernel, the
behavior on Android is the same. While we evaluate the ability
and performance of EchoLoad to leak the kernel code offset, it can
equally leak the offsets of all other randomized parts of the kernel.
For the performance evaluation, we used the same setup that
Schwarz et al. [76] describe in their paper. We tested 10 different ran-
domizations (i.e., 10 reboots), each 100 times. Using this approach,
we have a sample size of 103. We evaluated the performance on
a selected number of architectures in all three cases, namely mis-
speculation, TSX, and segfault handling. Table 2 shows the result
of this evaluation. In all tested cases, we achieve almost perfect
accuracy. On the i9-9900K, we outperform Data Bounce in terms of
time required while matching the accuracy.
Similar to Schwarz et al. [76], we tested EchoLoad with TSX on
a larger scale. For that, we tested the same offset 100 million times
and repeated the experiment 10 times for a total of 1 billion tries.
On all three CPUs (cf. Table 2, we achieved an average F-score of 1,
giving us perfect accuracy in detecting the KASLR offset.
On Windows 10, we also tested 10 different randomizations (i.e.,
10 reboots), each 100 times. In all cases, we successfully found
the location of the kernel image. On macOS 10.11.6, instead of 10
randomizations, we repeated the experiment 100 times to verify
that the given kernel range is still correct [14]. We then successfully
recovered the kernel location in all 100 randomizations.
Listing 2: Analyzing the behavior of the TSX abort. If the
transaction is aborted on xbegin, mem cannot be cached. If
the transaction is just rolled back on xend, mem is cached.
3.3 Breaking (K)ASLR from SGX
As EchoLoad only requires memory accesses, it also works in re-
stricted environments. We demonstrate EchoLoad in SGX enclaves
breaking host ASLR, victim-enclave ASLR, and KASLR.
While it is also possible to use EchoLoad for detecting the loca-
tion of SGX enclaves from the host application, this is an artificial
scenario. First, the host maps the enclave to its location and, thus,
knows where the enclave is. Second, on Linux, the host can access
this information from the pseudo file /proc/self/maps, contain-
ing all virtual-address mappings of the current process. Finally, the
host can also probe the virtual memory for the enclave, e.g., using
a signal handler to catch segmentation faults. If a region returns
0xff, it is likely to be an EPC page of an enclave.
EchoLoad from Enclave to Host. TAP is a method to break host
ASLR from an enclave using Intel TSX [81]. It allows scanning the
host address space for mapped pages to mount a ROP attack from
inside the enclave, impersonating the host application.
While TAP only worked for CPUs with TSX, it does not work
on CPUs with MDS fixes in microcode at all. With the microcode
update, all TSX transactions abort immediately when started inside
an SGX enclave [43]. We further analyzed whether the transaction
aborts immediately, or is only rolled back in all cases.
Listing 2 shows the code we use to analyze the TSX-transaction
aborts. If the transaction aborts already at the xbegin instruction,
the memory dereference is never executed. If the transaction exe-
cutes but then rolls back the executed instructions, the dereference
of the address still causes the memory location to be in the cache.
Our results show that the transaction is never started as the
address mem is never cached after the transaction. Hence, we can-
not even use TSX to access memory locations transiently. We ob-
serve the same behavior outside an SGX enclave when setting the
TSX_FORCE_ABORT MSR to 1. While this MSR is documented to
abort every TSX transaction on commit [98], we verified with our
test (Listing 2) that the transaction is not even started.
Consequently, even if TSX is re-enabled in SGX via a microcode
update, it can be manually disabled with the TSX_FORCE_ABORT
MSR to protect against attacks such as TAP. This is the case on the
Amazon EC2 cloud [79]. In contrast to Data Bounce [76], EchoLoad
works on the newest CPU generation, as it does not require TSX.
Thus, EchoLoad can be used to mount SGX ROP attacks [81] even
if TSX is disabled, once more enabling such attacks.
Due to the unavailability of syscalls and the rdtsc instruction
inside SGX, we mount EchoLoad behind a misspeculated branch
and use a counting thread [82] as a timer. We achieve a speed of
388 Mbit/s for scanning the host address space with EchoLoad.
Hence, EchoLoad is a viable alternative to TAP to de-randomize the
host application from an SGX enclave.
EchoLoad from Enclave to Enclave. Enclaves might not only
want to de-randomize the host application but also learn informa-
tion about other enclaves. While enclaves are mutually untrusted
and, thus, cannot access each other, EchoLoad can be used to learn
the address-space layout of other enclaves. Moreover, assuming
that enclaves have unique sizes, an enclave can even detect which
other enclaves are used by the host by detecting their size.
We evaluated EchoLoad in the cross-enclave scenario by loading
two enclaves in our test application. One enclave is malicious and
leverages EchoLoad to learn which other enclaves are used by the
host application. We use the same experiment as for de-randomizing
the host to scan the address space for other enclaves. We success-
fully detect the location and the size of the second enclave used by
the host application. The speed for scanning the address space is
the same as for de-randomizing the host application.
EchoLoad from Enclave to Kernel. Enclaves may foster stealthy
exploits [48, 65, 81, 82]. In this work, we add another primitive to
malware hidden inside SGX. With EchoLoad, an enclave can de-
randomize KASLR, which is a prerequisite for many kernel exploits.
The same code which is used to de-randomize the host ap-
plication can be used to de-randomize the kernel. We evaluated
EchoLoad inside an SGX enclave to find the KASLR offset. Due to
the use of misspeculation and a timing thread, the performance
is worse than in native code. However, we still detect the KASLR
offset with an F-score of 1 (n = 103).
3.4 Meltdown and KASLR Break in JavaScript
EchoLoad can even be mounted from a JavaScript sandbox. We
demonstrate EchoLoad, and as an extension Meltdown, from the
Spidermonkey JavaScript engine 60.1.3 used in Firefox.
There are two challenges for mounting EchoLoad in JavaScript.
First, both JavaScript and WebAssembly currently only support a
32-bit linear memory index, restricting arrays to 4 GB [19]. While
this prevents EchoLoad on a 64-bit OS, it does not prevent it on
32-bit OSs, which only support a 32-bit virtual address space. Hence,
we evaluate this attack on Ubuntu 16.04 (Kernel 4.15.0-60) i686 on
an Intel i7-4790. While we are currently limited to 32-bit systems,
the WebAssembly developers are planning to increase the size of
linear memory indices from 32-bit to 64-bit, allowing the attack on
all commodity systems that are not patched against Meltdown [91].
Second, the Spectre mitigations do not only reduce the resolution
of the high-resolution timer [67], but also harden the bounds check
for arrays, preventing speculative out-of-bounds accesses by de-
fault [66]. As our focus is not demonstrating a Spectre attack but a
Meltdown-related effect, we use a version of the engine that allows
speculative out-of-bounds accesses, as in previous work [53]. To de-
velop widely deployable Meltdown and EchoLoad exploits, further
research is necessary to investigate whether other misprediction
mechanisms may provide a suitable workaround to the hardened
out-of-bounds checks. Note that previous work has already shown
that some of these mitigations can be circumvented [35].
Building Blocks. An alternative to the high-resolution timer is
a counting thread which is commonly used for microarchitectural
attacks in JavaScript [29, 53, 80]. Furthermore, as the clflush in-
struction is not available in JavaScript, we resort to Evict+Reload
as described in related work [29, 76, 90]. Instead of measuring only
Table 3: We compare microarchitectural attacks on KASLR.
EchoLoad outperforms all previous microarchitectural at-
tacks on KASLR while having no requirements.
Time Accuracy Requirements
Attack
Hund et al. [37]
Gruss et al. [32]
Jang et al. [49]
Evtyushkin et al. [21]
Canella et al. [9]
Schwarz et al. [76]
EchoLoad (our attack)
17 s
500 s
5 ms
60 ms
0.27 s
42 µs
29 µs
96 %
N/A
100 %
N/A
100 %
100 %
100 %
-
cache eviction
Intel TSX
BTB reverse engineering
MDS vulnerable CPU
Intel CPU before Cascade Lake
-
one address in our Evict+Reload, we use amplification on multiple
cache lines [63]. With amplification, we encode the out-of-bounds
access into multiple different cache lines to achieve more reliable
results. To access a kernel address during transient execution, we
hide an out-of-bounds array access behind a misspeculated branch.
EchoLoad from JavaScript. By combining the building blocks,
we can implement EchoLoad in JavaScript. On average, it takes
25.09 ms (n = 103, σ ¯x = 5.92) to find the start of the kernel image.
The detected offset is relative to the base of the array, which is used
for the out-of-bounds accesses. However, an attacker can leverage
any JavaScript ASLR break [29] to recover the array base address,
and from that compute the absolute address of the kernel image.
Meltdown from JavaScript. Contrary to Linux, many 32-bit OSs
still in use do not have Meltdown patches (e.g., Windows XP). Hence,
we show that with the building blocks, we can mount a Meltdown
attack from JavaScript on such systems. Relying on EchoLoad for
the KASLR break, we can even target specific locations in the kernel.
To evaluate the attack performance of the proof of concept, we
disable KPTI and leak a known value from the kernel. Our JavaScript
attack leaks 2 B/s, with an error rate of 0.3 % (n = 103).
3.5 Other Side-Channel Attacks on KASLR
Microarchitectural attacks on KASLR so far relied on either branch-
predictor states [21], address-translation caches [32, 37, 49], or store-
buffer optimizations [9, 76]. We compare EchoLoad to previous
attacks on KASLR [21, 32, 37, 49, 76].
Our attack outperforms all state-of-the-art KASLR breaks on Intel
x86 CPUs (cf. Table 3). We outperform Data Bounce [76] in terms
of speed and match it in accuracy while having lower requirements.
Similar to Data Bounce, EchoLoad also has the advantage over
previous microarchitectural attacks that it does not require Intel
TSX, or knowledge of internal data structures like the branch-target
buffer (BTB) or the store buffer.
For instance, Evtyushkin et al. [21] assume an attacker knows
how the BTB works internally, which has not yet been reverse-
engineered for microarchitectures after Haswell. Moreover, with
the widely-deployed Spectre mitigations [10, 39], the BTB is either
cleared on context switch or not shared between privilege levels.
Hence, this attack does not work on state-of-the-art CPUs anymore.
The double page-fault attack [37] was the first microarchitec-
tural attack on KASLR. By accessing a kernel memory location,
an attacker first triggers a page fault. This triggers an interrupt
which is handled by the OS. After handling the interrupt, the OS
returns control to a pre-installed error handler in the user-space
program. In the error handler, the attacker measures the time it
took to handle the fault. The attacker then repeats the attack step,
again measuring the time it took to handle the fault. If the kernel
address is valid, the first illegal access has created a TLB entry. This
speeds up the handling of the second fault, creating a timing side
channel. Consequently, a user-space attacker can infer whether a
kernel address is valid or not. The requirement for this attack is
that the user can install a signal handler to handle segmentation
faults. Hence, native code execution is required.
Jang et al. [49] retrofitted the attack by Hund et al. [37] with
Intel TSX. TSX is an x86 instruction-set extension introducing
hardware transactional memory. If a page fault occurs within a
transaction, it is aborted without architecturally raising a fault and,
hence, without any OS interaction. This allows the attack to skip
the page fault handling of the OS, significantly speeding up the
attack and reducing its noise. The approach by Jang et al. [49] only
works on CPUs starting from Haswell as it relies on Intel TSX. This
extension is not present on low-end CPUs or any CPUs built before
2013 and can be disabled on newer CPUs as well. Intel TSX is, for
example, disabled on the Amazon EC2 cloud [79].
Gruss et al. [32] use the software prefetch instruction as a side
channel. This side channel exploits that the execution time of the
prefetch instruction depends on whether the translation cache holds
the correct entry. As the TLB can only hold addresses for which a
valid translation, i.e., a physical page is mapped to it, the location of
the kernel is revealed due to it consisting of the only valid address
mapping within the predefined region. With this attack, the attacker
additionally learns the page size that is used for the mapping.
Fallout [9] demonstrates a KASLR break on MDS-vulnerable
Intel CPUs. First, they ensure that a user-controlled value is in the
store buffer. Then, they attempt to access an address with the same
page offset ,which is inaccessible. On MDS-vulnerable CPUs, the
store-buffer content is transiently forwarded to faulting loads on
valid kernel addresses, revealing the location of the kernel. Fall-
out [9] relies on the opportunistic store-buffer behavior that vir-
tual addresses are likely equivalent if the least-significant 12 bits
match. However, this is only the case on MDS-vulnerable Intel
CPUs that are not patched. Hence, this KASLR break does not work
on CPUs indicating that they are MDS-resistant via the MDS_NO flag
in the IA32_ARCH_CAPABILITIES model-specific register, e.g., on