title:Mercury: supporting scalable multi-attribute range queries
author:Ashwin R. Bharambe and
Mukesh Agrawal and
Srinivasan Seshan
Mercury: Supporting Scalable Multi›Attribute Range
Queries(cid:3)
Ashwin R. Bharambe
ashu+@cs.cmu.edu
Mukesh Agrawal
mukesh+@cs.cmu.edu
Srinivasan Seshan
srini+@cs.cmu.edu
Computer Science Department
Carnegie Mellon University
Pittsburgh, PA 15213
ABSTRACT
This paper presents the design of Mercury, a scalable pro-
tocol for supporting multi-attribute range-based searches.
Mercury di(cid:11)ers from previous range-based query systems in
that it supports multiple attributes as well as performs ex-
plicit load balancing. To guarantee e(cid:14)cient routing and load
balancing, Mercury uses novel light-weight sampling mech-
anisms for uniformly sampling random nodes in a highly
dynamic overlay network. Our evaluation shows that Mer-
cury is able to achieve its goals of logarithmic-hop routing
and near-uniform load balancing.
We also show that Mercury can be used to solve a key
problem for an important class of distributed applications:
distributed state maintenance for distributed games. We
show that the Mercury-based solution is easy to use, and
that it reduces the game’s messaging overheard signi(cid:12)cantly
compared to a na(cid:127)(cid:16)ve approach.
Categories and Subject Descriptors
E.1 [Data Structures]: Distributed data structures
General Terms
Algorithms, Measurement
Keywords
Range queries, peer-to-peer systems, distributed hash ta-
bles, load balancing, random sampling
1.
INTRODUCTION
Much recent work on building scalable peer-to-peer (P2P)
networks has concentrated on Distributed Hash Tables or
(cid:3)This work was supported in part by a grant from the Pitts-
burgh Digital Greenhouse.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for pro(cid:2)t or commercial advantage and that copies
bear this notice and the full citation on the (cid:2)rst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speci(cid:2)c
permission and/or a fee.
SIGCOMM’04, Aug. 30(cid:150)Sept. 3, 2004, Portland, Oregon, USA.
Copyright 2004 ACM 1›58113›862›8/04/0008 ...$5.00.
DHTs [22, 23, 25]. DHTs o(cid:11)er a number of scalability ad-
vantages over previous P2P systems (e.g., Napster, Gnutella,
etc.) including load balancing and logarithmic hop routing
with small local state. However, the hash table or \exact
match" interface o(cid:11)ered by DHTs, although fruitfully used
by some systems [5{7], is not (cid:13)exible enough for many ap-
plications. For example, it is unclear how DHTs could be
modi(cid:12)ed to regain the highly desirable (cid:13)exibility o(cid:11)ered by
keyword-based lookups of (cid:12)le-sharing applications.
The main contribution of this paper is the design and
evaluation of Mercury, a scalable routing protocol for sup-
porting multi-attribute range queries.
In our model, each
query is a conjunction of ranges in one or more attributes.
The attributes not present in the query are assumed to be
wildcards. We believe that range queries signi(cid:12)cantly en-
hance search (cid:13)exibility in a number of scenarios. In addi-
tion to being useful for answering user queries, we (cid:12)nd that
range-based queries can also be useful in the construction of
distributed applications.
A number of recent systems [11,12,16] have proposed dis-
tributed protocols which support range-based queries. Mer-
cury mainly di(cid:11)ers from these systems since it supports
multi-attribute range-based queries and explicit load bal-
ancing.
There are two main components of Mercury’s design. First,
Mercury handles multi-attribute queries by creating a rout-
ing hub for each attribute in the application schema. Each
routing hub is a logical collection of nodes in the system.
Queries are passed to exactly one of the hubs corresponding
to the attributes that are queried, while a new data item is
sent to all hubs for which it has an associated attribute. This
ensures that queries retrieve all relevant data items present
in the system.
Second, for supporting range queries, Mercury organizes
each routing hub into a circular overlay of nodes and places
data contiguously on this ring, i.e., each node is responsi-
ble for a range of values for the particular attribute. While
the notion of a circular overlay is similar in spirit to some
existing DHT designs, due to our choice to support range
queries by placing data contiguously, we cannot use ran-
domizing hash functions for placing data. This requirement
introduces a fundamental challenge: because Mercury can-
not use hash functions, data partitioning among nodes can
become non-uniform (as we explain in Section 3.2), thus,
requiring an explicit load-balancing mechanism. However,
the load-balancing mechanism is fundamentally incompati-
Session 10: Distributed Information Systems ble with many of the techniques that DHTs use to guarantee
routing e(cid:14)ciency.
The solution to the above challenges forms the core con-
tribution of this paper. Some of the interesting algorithms
in Mercury include:
(cid:15) A message routing algorithm that supports range-based
lookups within each routing hub in O(log2 n=k) hops
when each node maintains k links to other nodes.
(cid:15) A low-overhead random sampling algorithm that al-
lows each node to create an estimate of system-wide
metrics such as load distribution.
(cid:15) A load-balancing algorithm (which exploits the ran-
dom sampling algorithm) that ensures that routing
load is uniformly distributed across all participating
nodes.
(cid:15) An algorithm for reducing query (cid:13)ooding by estimat-
ing how selective each of the predicates in a query is,
based on past database insertions.
In addition to describing the design of Mercury, we also
explore how the added (cid:13)exibility provided by range query
lookups can simplify the state management task for dis-
tributed games. We show that, using a range query based
publish-subscribe [2, 3] system built on top of Mercury, we
can provide e(cid:14)cient and scalable dissemination of distributed
state updates. We believe that a range query signi(cid:12)cantly
enhances the application’s ability to precisely express its in-
terests.
The remainder of the paper is organized as follows. In the
next section, we compare Mercury to related work in this
area. Section 3 details the basic Mercury protocol for rout-
ing data-records and queries. Section 4 presents enhance-
ments which improve the performance of the basic protocol.
In Section 5, we evaluate the scalability and load-balancing
properties of the Mercury system. In Section 6, we present
the design of our publish-subscribe system, and proof-of-
concept distributed game. Finally, Section 7 concludes.
2. RELATED WORK
In this section, we compare and contrast our approach
to implementing range queries with that of related systems.
Our discussion focuses on two fundamental questions:
. Can we use existing DHTs as building blocks to imple-
ment range query predicates?
. How is our design di(cid:11)erent from other systems like
SkipNet [11], etc., which also provide rich query sup-
port?
Using existing DHTs for range queries
A large number of distributed hash table designs [11, 22, 23,
25] have been proposed over the past few years. They pro-
vide a hash table interface to the application, viz., insert(key,
value) and lookup(key) primitives. Recent research [4,
10] has shown that, in addition to the basic scalable rout-
ing mechanism, DHTs o(cid:11)er much promise in terms of load
balancing, proximity-based routing, static resilience, etc.
Hence, it is a natural question to ask if we could implement
range queries using just the insert and lookup abstractions
provided by DHTs.
Our analysis, based on analyzing possible strawman de-
signs using DHTs, indicates that the abstractions provided
by a DHT are not enough for implementing range queries.
Fundamental to our argument is the fact that all existing
DHT designs use randomizing hash functions for inserting
and looking up keys in the hash table. While hashing is cru-
cial for DHTs in order to get good load balancing properties,
it is also the main barrier in using a DHT for implementing
range queries. This is because the hash of a range is not
correlated to the hash of the values within a range. Hence,
it is necessary to create some arti(cid:12)cial correlation between
ranges and values which is invariant under hashing.
One natural way to achieve this is to partition the value
space into buckets and map values and ranges to one or more
buckets. A bucket forms the lookup key for the hash table.
Then, a range query can be satis(cid:12)ed by simply performing
lookups on the corresponding bucket(s) using the underlying
DHT. However, this scheme has several fundamental draw-
backs. It requires the application to perform the partitioning
of space a priori. This can be very di(cid:14)cult or even impos-
sible for many applications, e.g., partitioning of (cid:12)le names.
Moreover, load balancing and query performance is highly
dependent on the way partitioning is performed. For exam-
ple, if the number of buckets is too small, i.e., the partition
is too coarse, queries will get mapped to a smaller set of
nodes creating load imbalance.
Increasing the number of
buckets, on the other hand, will increase the routing hops
required to answer a range query.
This indicates that while a DHT-based scheme may not be
an impossibility, its implementation is likely to be awkward
and complicated. By avoiding randomizing hash functions,
Mercury seeks to remove this di(cid:14)culty. At the same time,
we also note that the design of Mercury is inspired from and
similar in many respects to existing DHT designs. Hence,
we believe that it can easily build upon recent advances in
proximity-based routing and achieving resilience in DHTs
[10].
Comparison with systems supporting rich queries
In this section, we compare Mercury against recent systems
which o(cid:11)er rich query support. These include SkipNet [11],
PIER [12] and DIM [16].
The SkipNet DHT organizes peers and data objects ac-
cording to their lexicographic addresses in the form of a vari-
ant of a probabilistic skip list. It supports logarithmic time
range-based lookups and guarantees path locality. Mercury
is more general than SkipNet since it supports range-based
lookups on multiple-attributes. Our use of random sampling
to estimate query selectivity constitutes a novel contribu-
tion towards implementing scalable multi-dimensional range
queries. Load balancing is another important way in which
Mercury di(cid:11)ers from SkipNet. While SkipNet incorporates
a constrained load-balancing mechanism, it is only useful
when part of a data name is hashed, in which case the part
is inaccessible for performing a range query. This implies
that SkipNet supports load-balancing or range queries { not
both.
One might argue that the query-load imbalance in Skip-
Net can be corrected by using virtual servers as suggested
in [21]. However, it is unlikely to help in this regard for
the following reason: for e(cid:11)ective load-balancing, the num-
ber of virtual servers needed must be proportional to the
skew (ratio of max to min) in the load. The scheme pro-
posed in [21] assumes that the load skew results from the
standard deviation of random hash function distributions,
which is typically very small (O(log n), see [1]). However, in
our case, the skew results from di(cid:11)erences in query workload,
which can grow quite large. Hence, larger number of virtual
servers would be required increasing routing hops by about
log(s) where s is the skew. Moreover, the scheme would
fare even worse for range lookups since it would increase the
number of distinct nodes accessed for processing the query
by O(s).
The DIM data structure [16] supports multi-dimensional
range queries by embedding them into a two-dimensional
space and using a geographic routing algorithm. However,
the routing cost scales only as O(pn), which while reason-
able in a medium-sized sensor network, is quite expensive
for larger scales. Furthermore, the \volume expansion" that
occurs while projecting from higher dimensions onto two-
dimensions can be quite large resulting in more (cid:13)ooding of
the query. Also, queries containing wildcards in certain at-
tributes get (cid:13)ooded to all nodes. On the other hand, Mer-
cury, like most databases, uses query selectivity mechanisms
to route through the attribute hubs of highest selectivity
thereby signi(cid:12)cantly reducing (cid:13)ooding for queries contain-
ing only a few attributes.
The PIER system is a distributed query engine based on
DHTs. While PIER provides support for some types of rich
queries, such as equi-joins, it is unclear how to extend PIER
to support e(cid:14)cient resolution of queries containing range-
based predicates.
All the above systems and recent work on balancing load
in such systems [1, 21] treat load on a node as being propor-
tional to the range of identi(cid:12)er values the node is responsible
for. In other words, they assume a uniform data distribution
which is sensible for DHTs which use cryptographic hashes.
Mercury, on the other hand, de(cid:12)nes load on a node as the
number of messages routed or matched per unit time, and
supports explicit and (cid:13)exible load balancing.
We note that Mercury uses a leave-join style load balanc-
ing algorithm that is similar to [21]. Karger and Ruhl [13] as
well as Ganeshan et. al. [8] have concurrently proposed sim-
ilar leave-join based load balancing mechanisms. The pro-
tocol described in [13] is randomized and requires commu-
nication with log n random nodes in the system. Ganeshan
et. al. propose a deterministic protocol which requires the
maintenance of skip graph overlays. In the face of skewed
node range distributions (which any load balancing protocol
will yield), these tasks are far from trivial, and a signi(cid:12)cant
part of the Mercury protocol is aimed at addressing this dif-
(cid:12)culty. In general, many approaches to di(cid:11)usion-based dy-
namic load balancing [9] require information about the dy-
namic distributed network that is hard to obtain, in order to
make informed decisions. Instead, Mercury uses light-weight
sampling mechanisms to track load distribution within the
overlay.
3. MERCURY ROUTING
In this section, we provide an overview of the basic Mer-
cury routing protocol. Although the protocol as described
in this section is similar in spirit to existing structured over-
lay protocols (e.g., Chord, Symphony, etc.), we present it
for completeness. At the same time, it is important to note
that it works well in only a limited set of conditions. In Sec-
tion 4, we signi(cid:12)cantly extend this basic routing protocol to
work for a wider set of operating points.
3.1 Data Model
In Mercury, a data item is represented as a list of typed
attribute-value pairs, very similar to a record in a rela-
tional database. Each (cid:12)eld is a tuple of the form: (type,
attribute, value). The following types are recognized:
int, char, float and string.1
A query is a conjunction of predicates which are tuples
of the form: (type, attribute, operator, value). A dis-
junction is implemented by multiple distinct queries. Mer-
cury supports the following operators: ; (cid:20); (cid:21) and =.
For the string type, Mercury also permits pre(cid:12)x and post-
(cid:12)x operators. Figure 1 presents an example.
float
float
string
string
int 
x−coord = 50
y−coord = 100
player = "john"
team = "topgunz"
score = 76
float 
float
string
int
x−coord  34
player = "j*"
score = "*"
Data
Query
Figure 1: Example of a data item and a query as
represented in the Mercury system.
3.2 Routing Overview
Mercury supports queries over multiple attributes by par-
titioning the nodes in the system into groups called attribute
hubs. This partition is only logical, i.e., a physical node can
be part of multiple logical hubs. Each of the attribute hubs
is responsible for a speci(cid:12)c attribute in the overall schema.
Hubs can be thought of as orthogonal dimensions of a multi-
dimensional attribute space. The (cid:12)rst routing hop deter-
mines which dimension to route through. The rest of the
routing is unidimensional and is based on the values of a
single attribute of the data item. We note that this mech-
anism does not scale very well as the number of attributes
in the schema increase and is suitable only for applications
with moderate-sized schemas.
To simplify the description, we will use the following nota-
tion: let A denote the set of attributes in the overall schema
of the application. AQ denotes the set of attributes in a
query Q. Similarly, the set of attributes present in a data-
record D is denoted by AD. We use the function (cid:25)a to
denote the value (range) of a particular attribute a in a
data-record (query). We will denote the attribute hub for
an attribute a by Ha.
Nodes within a hub Ha are arranged into a circular over-
lay with each node responsible for a contiguous range ra of
attribute values. A node responsible for the range ra re-
solves all queries Q for which (cid:25)a(Q) \ ra 6= (cid:30)(= fg), and it
stores all data-records D for which (cid:25)a(D) 2 ra. Ranges are
assigned to nodes during the join process.
Routing Queries and Data›Records
Queries are passed to exactly one of the hubs correspond-
ing to the attributes that are queried.
In other words, a
1Our basic data types are sortable, enabling us to de(cid:12)ne nu-
meric operations (addition and subtraction) on them. Care
needs to be taken when handling string attributes.
query Q is delivered to Ha, where a is any attribute chosen
from AQ. We will see in Sections 4.3 and 5.4 that although
choosing any attribute hub su(cid:14)ces for matching correctness,
substantial savings in network bandwidth can be achieved if
the choice is done more intelligently using query selectivity.
Within the chosen hub, the query is delivered and processed
at all nodes that could potentially have matching values.