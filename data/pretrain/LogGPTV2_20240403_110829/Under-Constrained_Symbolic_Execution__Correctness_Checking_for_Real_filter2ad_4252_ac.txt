v
o
c
.
r
t
s
n
i
h
c
t
a
P
)
%
(
e
g
a
r
e
v
o
c
.
r
t
s
n
i
h
c
t
a
P
100
80
60
40
20
0
100
80
60
40
20
0
50
100
150
250
200
300
BIND patches
350
400
450
50
100
150
200
OpenSSL patches
250
300
Figure 7: Coverage of patched instructions: 100% cover-
age for 98 BIND patches (20.1%) and 124 OpenSSL patches
(38.3%). Median was 81.1% for BIND, 86.9% for OpenSSL.
cient symbolic input bound (2 patches); comparisons be-
tween input pointers (we assume no aliasing, 1 patch);
symbolic malloc size (1 patch); and a trivial stub func-
tion that was optimized away (1 patch).
3.2.4 Patches partially veriﬁed
This section measures how thoroughly we check non-
terminating patches using two metrics: (1) instruction
coverage, and (2) number of execution paths completed.
We conservatively measure instruction coverage by
counting the number of instructions that differ in P′ from
P and then computing the percentage of these instruc-
tions that UC-KLEE executes at least once. Figure 7
plots the instruction coverage. The median coverage was
81.1% for BIND and 86.9% for OpenSSL, suggesting
that UC-KLEE thoroughly exercised the patched code,
even when it did not exhaust all paths.
Figure 8 plots the number of completed execution
paths for each patch we did not exhaustively verify
(§ 3.2.3) that hit at least one patched instruction. These
graphs exclude 31 patches for BIND and 32 patches
for OpenSSL for which our system crashed during the
one hour execution window. The crashes were primarily
due to bugs in our tool and memory exhaustion/blowup
caused by symbolically executing cryptographic ciphers.
For the remaining patches, UC-KLEE completed a me-
dian of 5,828 distinct paths per patch for BIND and 1,412
for OpenSSL. At the upper end, 154 patches for BIND
(39.6%) and 79 for OpenSSL (32.4%) completed over
10,000 distinct execution paths. At the bottom end, 58
patches for BIND (14.9%) and 46 for OpenSSL (18.9%)
completed zero execution paths.
In many cases, UC-
KLEE achieved high coverage on these patches but nei-
ther detected errors nor ran the non-error paths to com-
54  24th USENIX Security Symposium 
USENIX Association
1000000
100000
10000
1000
100
10
1
s
h
t
a
P
1000000
100000
10000
1000
100
10
1
s
h
t
a
P
50
100
50
200
150
BIND patches
250
100
150
OpenSSL patches
300
350
200
Figure 8: Completed execution paths (log scale). Median was
5,828 paths per patch for BIND and 1,412 for OpenSSL. Top
quartile was 17,557 paths for BIND and 21,859 for OpenSSL.
pletion. A few reasons we observed for paths not running
to completion included query timeouts, unspeciﬁed sym-
bolic function pointers, or ineffective search heuristics.
These numbers should only be viewed as a crude
they do not measure
approximation of thoroughness;
the independence between the paths explored (greater
is preferable). On the other hand, they grossly under-
count the number of distinct concrete values each sym-
bolic path reasons about simultaneously. One would gen-
erally expect that exercising 1,000 or more paths through
a patch, where each path simultaneously tests all feasi-
ble values, represents a dramatic step beyond the current
standard practice of running the patch on a few tests.
3.2.5 False positives
This section describes our experience in separating true
bugs from false positives, which were due to missing in-
put preconditions. The false positives we encountered
were largely due to three types of missing preconditions:
1. Data structure invariants, which apply to all instances
of a data structure (e.g., a parent node in a binary
search tree has a greater value than its left child).
2. State machine invariants, which determine the se-
quence of allowed values and the variable assign-
ments that may exist simultaneously (e.g., a counter
increases monotonically).
3. API invariants, which determine the legal inputs to
API entry points (e.g., a caller must not pass a null
pointer as an argument).
Figure 9 illustrates a representative example of a false
positive from BIND, which was caused by a missing data
structure invariant. The isc region t type consists of
a buffer and a length, but UC-KLEE has no knowledge
that the two are related. The code selects a valid buffer
isc region {
unsigned char * base;
unsigned int
length;
isc region compare(isc region t *r1, isc region t *r2) {
unsigned int l;
int result;
1 :typedef struct
2 :
3 :
4 :} isc region t;
5 :
6 :int
7 :
8 :
9 :
10: REQUIRE(r1 != NULL);
11: REQUIRE(r2 != NULL);
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22: }
Figure 9: Example false positive in BIND. UC-KLEE does not
associate length ﬁeld with buffer pointed to by base ﬁeld.
Consequently, UC-KLEE falsely reports that memcmp (line 17)
reads out-of-bounds from base.
/* chooses min. buffer length */
l = (r1−>length length) ? r1−>length : r2−>length;
/* memcmp reads out-of-bounds */
if ((result = memcmp(r1−>base, r2−>base, l)) != 0)
return ((result length == r2−>length) ? 0 :
(r1−>length length) ? −1 : 1);
length at line 14, the shorter of the two buffers. At line
17, the code calls memcmp and supplies this length. Inside
memcmp, UC-KLEE reported hundreds of false positives
involving out-of-bounds memory reads. These errors oc-
curred on false paths where the buffer pointed to by the
base ﬁeld was smaller than the associated length ﬁeld.
UC-KLEE manages false positives using two ap-
proaches: manual annotations and automated heuristics.
Manual annotations. UC-KLEE supports two types of
manual annotations: (1) data type annotations, and (2)
function call annotations. Both are written in C and
compiled with LLVM. UC-KLEE invokes data type an-
notations at the end of a path, prior to emitting an error.
These are associated with named data types and spec-
ify invariants on symbolic inputs of that type (inferred
from debug information when available). For the exam-
ple above, we added the following simple annotation for
the isc region t data type:
INVARIANT(r−>length base));
The INVARIANT macro requires that the condition hold.
If it is infeasible (cannot be true) on the current path, UC-
KLEE emits an error report with a ﬂag indicating that the
annotations have been violated. We use this ﬂag to ﬁlter
out uninteresting error reports. This one simple anno-
tation allowed us to ﬁlter 623 errors, which represented
about 7.5% of all the errors UC-KLEE reported for BIND.
Function call annotations are used to run speciﬁc code
immediately prior to calling a function. For example,
we wrote a function call annotation for BIND that runs
before each call to isc mutex lock, with the same ar-
guments:
void annot isc mutex lock(isc mutex t *mp) {
EXPECT(*mp == 0);
}
USENIX Association  
24th USENIX Security Symposium  55
P′ only
Reports
P and P′
Patches
Reports
Patches
Heuristic
Tot. Bugs
Total errors
2446 3
Manual annotations 1419 3
3
2
3
3
3
44
26*
35*
excluding inputs 30*
3*
must-fail
concrete-fail
belief-fail
True bugs
141
125
8
6*
7*
7*
3*
Tot. Bugs
5829
1378
1378
878
1053
852
1
-
-
-
-
-
-
1
260
153
153
110
127
102
1
P′ only
Reports
P and P′
Patches
Heuristic
Tot. Bugs
Total errors
1423 5
Manual annotations 1286 5
5
5
5
5
5
41
14*
25*
excluding inputs 17*
5*
must-fail
concrete-fail
belief-fail
True bugs
Patches Reports
Tot. Bugs
11
579
11
451
11
451
224
11
11
316
11
90*
11*
11
79
79
22
12*
18*
11*
4*
125
124
124
98
117
47*
10*
(a) BIND (487 patches, 4 distinct bugs)
(b) OpenSSL (324 patches, 8 distinct bugs)
Figure 10: Effects of heuristics on false positives. Tot. indicates the total number of reports, of which Bugs are true errors; Patches
indicates the number of patches that reported at least one error. P′ only refers to errors that occurred only in function P′; P and P′
occurred in both versions. Indent indicates successive heuristics; * indicates that we reviewed all the reports manually.
Macro
INVARIANT(condition) Add condition as a path constraint; kill
Description
simple to specify and often suppressed many false posi-
tives. We felt the level of effort required was reasonable
compared to the sizes of the codebases we checked. We
added annotations lazily, in response to false positives.
Figure 10 illustrates the effects of the annotations and