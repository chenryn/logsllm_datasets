非法内存访问是指程序试图读取或写入未分配 /受保护的内存，
如数组越界等，这将会导致程序的不可控行为。因此，必须确保程
序正确地分配和释放内存，避免缓冲区溢出等现象。也可使用静态
分析工具检测代码中的内存非法访问问题。
3）变量未初始化
使用未初始化的变量，可能导致未知错误。一般来讲，变量需
要在声明时赋予初始值。
4）资源泄漏
常见的资源泄漏包含 socket 泄漏，文件句柄泄漏，内存泄漏
等。产生原因是由于未能正确释放已经分配的内存或其他资源，导
致这些资源被长期占用。资源泄漏不仅会造成资源的浪费，系统性
能下降，严重时超出系统限制会导致程序崩溃。
避免资源泄漏，在编程过程中，需要在资源使用完毕后进行资
源的释放，如 socket/文件句柄的关闭，动态分配内存的释放。
5）竞争死锁
竞争死锁是指多个线程或进程持有资源，又互相竞争等待对方
资源而导致死锁的情况。解决死锁问题，一般可采用超时使用机
制、统一获取资源顺序和死锁检测机制来打破死锁产生的必要条
件。
6）不当的 API使用
⽹址：SRE-Elite.com 16 微信：SRE精英联盟
SRE实践白皮书（2023年）
不当的 API 使用，会导致程序异常。可通过仔细阅读 API 文
档，了解 API 的使用方式，在使用 API 前进行充分测试的方法来规
避。
2．效果评估
代码缺陷数作为代码质量指标之一，可以从数量、严重程度来
归类。在度量层面，一般使用百行告警数来衡量代码缺陷指标。通
过配置代码缺陷规则集，采用缺陷检测工具扫描，生成检测报告。
根据缺陷的严重程度分为严重告警（空指针、数组越界等），一
般告警（变量未初始化等）和提示告警（如代码风格等）。设定各个
告警等级的权重，统计代码行数，最终计算出百行代码缺陷告警
数。
百行缺陷告警数=（严重告警 W1+一般告警W2+
提示告警 W3）/代码行数100
（W1/W2/W3为权重系数）
3.2.1.2 代码规范
代码规范主要是指是否遵守了团队或者业界的编码规范。代码
规范主要涵盖：代码风格（如注释、空代码块、命名、格式化等），
与异常处理等部分。
代码规范有助于提高代码可读性与可维护性，从而提升团队内
开发效率。代码可读性帮助相关技术人员能够轻松阅读并理解代码
意图与实现方式。代码从分支发起到主干的合并请求前，必须进行
代码检查，这也是提前发现问题的方法之一。
⽹址：SRE-Elite.com 17 微信：SRE精英联盟
SRE实践白皮书（2023年）
1．代码规范提升措施
1）代码风格
良好的代码风格会帮助开发人员阅读和理解符合该风格的源代
码，并且避免错误。此处所讲述的代码风格包括但不限于：命名规
范，表达式与语句，缩紧，对齐，注释，代码布局等。对于不同的
编程语言，适用于不同的代码风格，对于同一项目或开发团队，应
当使用统一的代码风格。
（1）命名规范，命名要能够直观的表达本身的意图，同时具备
可读与可搜索性，尽量遵循一些通用的写法。在此基础上命名长度
应当尽量精短，避免触发代码行字符数限制规范；
（2）缩紧，一般采用 4个空格缩进，而不使用 tab键（特殊语言
除外）
（3）统一字符编码格式，通常采用 UTF-8编码
（4）单行字符数限制，长度一般不超过 120
（5）行尾换行符，一般使用换行符 LF，禁止使用回车键 CR
2）异常处理
异常处理是为了防止一些未知错误产生而采取的措施。适当的
使用异常处理能够提高程序的容错性。在处理异常方面，需要遵
循：
（1）只在可能出异常的块进行精准捕获处理；
（2）捕获的异常必须处理或抛出给上层调用方；
（3）异常处理效率较低，应避免使用异常做条件控制
⽹址：SRE-Elite.com 18 微信：SRE精英联盟
SRE实践白皮书（2023年）
2．效果评估
对于代码规范的效果评估，可以采用百行告警数来衡量。
百行告警数=（严重告警 W1+一般告警W2+
提示告警 W3）/代码行数100
注：（W1/W2/W3为权重系数）
百行告警数可以用来评估代码的质量和稳定性，较高的百行告
警数可能意味着代码存在较多的缺陷和潜在问题，需要更多的测试
和修复工作；
3.2.1.3 代码安全
安全性是指在为正常访问提供服务的同时，也能拒绝非法访
问。同时不因为代码设计或实现的原因，导致信息泄漏/非法侵入/系
统崩溃等问题。
1．代码安全性提升措施
1）防止敏感信息泄漏
敏感信息可分为系统敏感信息与应用敏感信息。系统敏感信息
包含业务系统的基础环境信息，如系统版本、组件版本等；应用敏
感信息包含用户信息和应用信息等，如用户 TOKEN、密码、IP等。
系统敏感信息泄漏会为攻击者提供更多的攻击方法，应用敏感信息
泄漏危害则因泄漏信息内容而决定。
解决方法：
（1）避免硬编码，禁止将密码等敏感信息写入到代码，应该以
配置或后台下发形式读取
⽹址：SRE-Elite.com 19 微信：SRE精英联盟
SRE实践白皮书（2023年）
（2）处理异常时，避免将系统信息、DEBUG 信息、或者敏感文
件的路径输出到用户可见处
2）预防安全漏洞
代码安全漏洞，指编码过程中因不当的处理逻辑引发的安全风
险；
常见的代码安全漏洞有：
（1）脚本（SQL）注入，可通过减少拼接命令，对命令参数值
进行过滤/校验避免
（2）XSS攻击，可以使用安全的 JavaScript框架和组件，同时主
动检测发现，转义输入等减少
（3）越权访问，是由于权限设计错误，未授权用户获取甚至修
改其他用户的信息。需要通过最小化原则的权限设计与审计来规避
（4）通信安全，一般是由于未使用加密信道进行通信导致，可
以通过使用加密/私有协议通信来避免
3）第三方组件安全
软件开发中不可避免的会引入依赖库，或者第三方 SDK。这些
第三方组件作为系统的一部分，与原生代码并无本质区别，它们的
安全性也同样影响整个系统。因此，需要在减少对第三方组件引入
的基础上，加入相应的安全评估机制。
对于第三方组件的评估，我们主要从以下几个方面：
（1）组件安全风险应在引入前/上线前/定期进行安全扫描
（2）组件合规风险包括使用协议合规和监管数据合规
⽹址：SRE-Elite.com 20 微信：SRE精英联盟
SRE实践白皮书（2023年）
（3）组件稳定性应当使用经过实际验证的 LTS版本
2．效果评估
在衡量代码安全性方面，可以从敏感信息泄漏、系统漏洞、第
三方高危组件等几个方面来考量。可以通过代码扫描工具，扫描出
已知系统漏洞与敏感信息，以及第三方高危组件的引入情况。
在得到敏感信息，安全漏洞个数，以及第三方高危组件个数
后，可以制定代码安全性红线。一般来讲，敏感信息、安全漏洞是
绝对不允许的。对于第三方高危组件，也要经过安全评估测试，其
标准与本身代码相同。
（1）对于敏感信息与安全漏洞，必须彻底清除
（2）第三方高危组件，还可以采用 LTS 覆盖率可以用来衡量系
统中使用的第三方高危组件稳定性。 LTS 覆盖率=第三方高危组件
LTS数/第三方高危组件数
3.2.1.4 代码圈复杂度
圈复杂度是一种代码复杂度的衡量标准，可以用来衡量一个模
块流程判定结构的复杂程度。圈复杂度大说明程序代码的判断逻辑
复杂，可用来表示对给定代码进行测试、维护或故障排除的难度，
以及代码生成错误的可能性。同时，也可用来帮助开发人员确定是
否需要对程序进行重构，以降低程序的复杂度，提高代码质量。
1．圈复杂度改善措施
降低函数圈复杂度的 主要通过对代码重构来进行，一般有以下
几种方法：
⽹址：SRE-Elite.com 21 微信：SRE精英联盟
SRE实践白皮书（2023年）
（1）将大函数拆分成多个小函数，每个小函数只负责单一功能
（2）将条件判定提炼出来，成为独立函数
（3）简化、合并条件表达式
（4）优化循环结构，减少循环嵌套、使用更简单的循环结构等
2．效果评估
圈复杂度反应了代码的耦合度，圈复杂度越高的代码会有越多
潜在的 BUG。
对于圈复杂度，可以从以下指标衡量：
（1）单函数圈复杂度最大值小于等于 20
（2）项目平均圈复杂度，一般不大于 4
项目平均圈复杂度=所有函数圈复杂度之和/所有函数个数
3.2.1.5 代码重复
代码重复指的是程序中存在相同或类似的代码段。在不同的位
置或程序中出现相同的代码，会造成了代码冗余和浪费。代码重
复，不仅导致项目代码量的增加，影响程序的可读性和可维护性，
增加代码的错误率和修改难度，也是设计不佳的一个标志。
代码重复的表现形式多种多样，常见形式有：
（1）完全一样的代码
（2）仅重命名标识符的代码
（3）仅变量赋值不一样的代码
（4）插入或删除语句的代码
（5）重新排列语句的代码
⽹址：SRE-Elite.com 22 微信：SRE精英联盟
SRE实践白皮书（2023年）
1．代码重复改善措施
降低重复代码，是代码优化的重要方面之一，一般需要对相关
功能进行重构。