ushort get_word(ea_t addr)
 ，读取虚拟地址addr
 处的当前字值。
ulong get_long(ea_t addr)
 ，读取虚拟地址addr
 处的当前双字值。
get_many_bytes(ea_t addr, void *buffer, ssize_t len)
 ，从addr
 复制len
 个字节到提供的缓冲区中。
patch_byte(ea_t addr, ulong val)
 ，在虚拟地址addr
 处设置一个字节值。
patch_word(long addr, ulonglong val)
 ，在虚拟地址addr
 处设置一个字值。
patch_long(long addr, ulonglong val)
 ，在虚拟地址addr
 处设置一个双字值。
patch_many_bytes(ea_t addr, const void *buffer, size_t len)
 ，用用户提供的buffer
 中的len
 个字节修补以addr
 开头的数据库。
ulong get_original_byte(ea_t addr)
 ，读取虚拟地址addr
 处的初始字节值（修补之前）。
ulonglong get_original_word(ea_t addr)
 ，读取虚拟地址addr
 处的初始字值。
ulonglong get_original_long(ea_t addr)
 ，读取虚拟地址addr
 处的初始双字值。
bool isLoaded(ea_t addr)
 ，如果addr
 包含有效数据，则返回真，否则返回假。
还有其他函数可用于访问其他数据大小。需要注意的是，get_original_XXX
 函数读取的是第一个初始值，它不一定是修补之前位于某个地址处的值。例如，如果一个字节值被修补两次，那么，在整个过程中，这个字节就保存了 3 个不同的值。在第二次修补后，我们可以访问当前值和初始值，但没有办法访问第二个值（它由第一个补丁设置）。
2. 用户界面函数
与IDA 用户界面的交互由唯一一个名为 callui
 的调度函数
 处理。向 callui
 传递一个用户界面请求（其中一个枚举 ui_notification_t
 常量）以及该请求所需的其他参数，即可提出各种用户界面服务请求。每种请求所需的参数由 kernwin.hpp文件指定。不过 kernwin.hpp文件还定义了大量便捷函数（convenience function ），只是这些函数隐藏了许多直接使用 callui
 的细节。下面是几个常见的便捷函数。
msg(char *format, ...)
 ，在消息窗口中打印一条格式化消息。这个函数类似于C的printf
 函数，接受一个printf
 风格的格式化字符串。
warning(char *format, ...)
 ，在一个对话框中显示一条格式化消息。
char * askstr(int hist, char *default, char * format, ...)
 ，显示一个输入框，要求用户输入一个字符串值。hist
 参数指出如何写入输入框中的下拉历史记录列表，并它将设置为kernwin.hpp定义的一个HIST_xxx
 常量。format
 字符串和任何其他参数用于构成一个提示字符串（prompt string）。
char *askfile_c(int dosave, char *default, char *prompt, ...)
 ，显示一个“保存文件”（dosave=1
 ）或“打开文件”（dosave=0
 ）对话框，最初显示默认指定的目录和文件掩码（如C:\windows\*.exe ）。返回选定文件的名称。如果对话框被取消，则返回 NULL。
askyn_c(int default, char *prompt, ...)
 ，用一个答案为“是”或“否”的问题提示用户，突出显示一个默认的
 答案（1 为是，0 为否，-1 为取消）。返回一个表示所选答案的整数。
AskUsingForm_c(const char * form, ...)
 ，form
 参数是一个对话框及其相关输入元素的ASCII 字符串规范。如果 SDK 的其他便捷函数无法满足你的要求，这个函数可用于构建自定义用户界面元素。form
 字符串的格式由 kernwin.hpp文件详细说明。
get_screen_ea()
 ，返回当前光标所在位置的虚拟地址。
jumpto(ea_t addr)
 ，使反汇编窗口跳转到指定地址。
与IDC 脚本相比，使用 API 能够实现更多的用户界面功能，包括创建自定义单列和多列的列表选择对话框。对这些功能感兴趣的读者可以参阅kernwin.hpp文件，特别是choose
 和choose2
 函数。
3. 操纵数据库名称
下面的函数可用于处理数据库中的已命名位置。
get_name(ea_t from, ea_t addr, char *namebuf, size_t maxsize)
 ，返回与addr
 有关的名称。如果该位置没有名称，则返回空字符串。如果from
 是包含addr
 的函数中的任何地址，这个函数可用于访问局部名称。返回的名称被复制到函数提供的输出缓冲区中。
set_name(ea_t addr, char *name, int flags)
 ，向给定的地址分配给定的名称。该名称使用在flags
 位掩码中指定的属性创建。要了解可能的标志值，请参见name.hpp 文件。
get_name_ea(ea_t funcaddr, char *localname)
 ，在包含funcaddr
 的函数中搜索给定的局部名称。如果在给定的函数中不存在这样的名称，则返回BADADDR （-1）。
4. 操纵函数
访问与经过反汇编的函数有关的信息的 API 函数在funcs.hpp 中声明。访问栈帧信息的函数在frame.hpp中声明。下面介绍一些较为常用的函数。
func_t *get_func(ea_t addr)
 ，返回一个指向func_t
 对象的指针，该对象描述包含指定地址的函数。
size_t get_func_qty()
 ，返回在数据库中出现的函数的数量。
func_t *getn_func(size_t n)
 ，返回一个指向func_t
 对象的指针，func_t
 对象代表数据库中的第n
 个函数，这里的n介于零（包括）和get_func_qty()
 （不包括）之间。
func_t *get_next_func(ea_t addr)
 ，返回一个指向strnc_t
 对象的指针，strnc_t
 对象描述指定地址后面的下一个函数。
get_func_name(ea_t addr, char *name, size_t namesize)
 ，将包含指定地址的函数的名称复制到函数提供的名称缓冲区中。
struc_t *get_frame(ea_t addr)
 ，返回一个指向struc_t
 对象的指针，struc_t
 对象描述包含指定地址的函数的栈帧。
5. 操纵结构体
struc_t
 类用于访问在类型库中定义的函数栈帧及结构化数据类型。这里介绍了与结构体及其相关成员交互的一些基本函数。其中许多函数利用一个类型ID（tid_t
 ）数据类型。API 包括在一个struc_t
 与一个相关的 tid_t
 之间建立对应关系的函数。注意，struc_t
 和member_t
 类都包含一个tid_t
 数据成员，因此，如果你已经有一个指向有效 struc_t
 或member_t
 对象的指针，你就可以轻易获得类型 ID信息。
tid_t get_struc_id(char * name)
 ，根据名称查询一个结构体的类型ID。
struc_t * get_struc(tid_t id)
 ，获得一个指向struc_t
 对象的指针，该对象表示由给定类型ID指定的结构体。
asize_t get_struc_size(struc_t * s)
 ，返回给定结构体的字节大小。
member_t * get_member(struc_t *s, asize_t offset)
 ，返回一个指向member_t
 对象的指针，该对象描述位于给定结构体指定offset
 位置的结构体成员
member_t *get_member_by_name(struc_t * s, char *name)
 ，返回一个指向member_t
 对象的指针，该对象描述由给定的name
 标识的结构体成员。
tid_t add_struc(uval_t index, char * name, bool is_union=false)
 ，将一个给定name
 的新结构体附加到标准结构体列表中。该结构体还被添加到Structures窗口的给定index