title:Virtual browser: a virtualized browser to sandbox third-party JavaScripts
with enhanced security
author:Yinzhi Cao and
Zhichun Li and
Vaibhav Rastogi and
Yan Chen and
Xitao Wen
Virtual Browser: a Virtualized Browser to Sandbox
Third-party JavaScripts with Enhanced Security
Yinzhi Cao
Northwestern University
Evanston, IL
Zhichun Li
NEC Research Labs
Princeton, NJ
Vaibhav Rastogi
Northwestern University
Evanston, IL
PI:EMAIL
PI:EMAIL
PI:EMAIL
Yan Chen
Xitao Wen
Northwestern University
Northwestern University
Evanston, IL
Evanston, IL
PI:EMAIL
PI:EMAIL
ABSTRACT
Third party JavaScripts not only oÔ¨Äer much richer features
to the web and its applications but also introduce new threats.
These scripts cannot be completely trusted and executed
with the privileges given to host web sites. Due to incom-
plete virtualization and lack of tracking all the data Ô¨Çows,
all existing approaches without native sandbox support can
secure only a subset of third party JavaScripts, and they
are vulnerable to attacks encoded in non-standard HTML/-
JavaScript (browser quirks) as these approaches will parse
third party JavaScripts independently at server side without
considering client-side non-standard parsing quirks. At the
same time, native sandboxes are vulnerable to attacks based
on unknown native JavaScript engine bugs.
In this paper, we propose Virtual Browser, a full browser-
level virtualized environment within existing browsers for
executing untrusted third party code. Our approach sup-
ports more complete JavaScript language features including
those hard-to-secure functions, such as with and eval. Since
Virtual Browser does not rely on native browser parsing
behavior, there is no possibility of attacks being executed
through browser quirks. Moreover, given the third-party
Javascripts are running in Virtual Browser instead of native
browsers, it is harder for the attackers to exploit unknown
vulnerabilities in the native JavaScript engine. In our de-
sign, we Ô¨Årst completely isolate Virtual Browser from the na-
tive browser components and then introduce communication
by adding data Ô¨Çows carefully examined for security. The
evaluation of the Virtual Browser prototype shows that our
execution speed is the same as Microsoft Web Sandbox[27],
a state of the art runtime web-level sandbox. In addition,
Virtual Browser is more secure and supports more complete
JavaScript for third party JavaScript development.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proÔ¨Åt or commercial advantage and that copies
bear this notice and the full citation on the Ô¨Årst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciÔ¨Åc
permission and/or a fee.
ASIACCS ‚Äô12, May 2‚Äì4, 2012, Seoul, Korea.
Copyright 2012 ACM 978-1-4503-0564-8/11/03 ...$10.00.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Invasive software (e.g., viruses,
worms, Trojan horses); Information Ô¨Çow controls
General Terms
Security, Design, Language
Keywords
Third-party JavaScript, Web Security, Virtualization
1.
INTRODUCTION
Modern web sites often use third party JavaScripts to en-
rich user experiences. Web mashups combine services from
diÔ¨Äerent parties to provide complex web applications. For
example, a web site may use JavaScript games from other
party to attract users, include JavaScript code from targeted
advisement companies for increasing revenue, embed a third
party counter to record the number of visited users, and en-
able third party widgets for richer functionalities. In each
of these cases, some third party JavaScripts, which are not
developed by the web site, have the same privileges as the
JavaScript code from the web site itself. Although these
third party JavaScripts enrich the functionalities of the web
site, malicious third party Javascripts can potentially fully
subvert the security policy of the web site, and launch all
kinds of attacks.
Therefore, in this paper, we propose Virtual Browser, a
virtualized browser built on top of a native browser to sand-
box third-party JavaScript. The idea of Virtual Browser
is comparable to that of virtual machines. It is written in
a language that a native browser supports, such as Java-
Script, so that no browser modiÔ¨Åcation is required. Virtual
Browser has its own HTML parser, CSS parser, and Java-
Script interpreter, which are independent from the native
browser. Third party JavaScripts are parsed only once in
Virtual Browser and run on top of the virtual JavaScript
interpreter. The untrusted third party JavaScripts are iso-
lated from the trusted JavaScripts of the web site by design.
Virtual Browser introduces only the necessary communica-
tions between the JavaScripts from the web site and the
third party JavaScripts.
Existing works such as Microsoft Web Sandbox [27] and
Google Caja [20] may also be thought of as employing vir-
7KLUG3DUW\-DYD6FULSW
7UXVWHG-6
3DUDPHWHU
&KHFN
&KHFN(QJLQH
([HFXWH
([HFXWH
1DWLYH-DYD6FULSW(QJLQH
&ODVVLF6WUXFWXUHOLNH:HE6DQGER[7KLUGSDUW\VFULSWLV
UXQQLQJGLUHFWO\RQQDWLYHHQJLQHDIWHUFKHFNLQJ,QVHFXUH
7KLUG3DUW\-DYD6FULSW
7UXVWHG-6
IRUL LL
^IRUBERG\`
IRUVHWBZLWKBFKHFNL
FKHFNBYDOXHL
RSFKHFNBYDOXHL
1DWLYH-DYVFULSW
(QJLQH
IRUL LL^IRUBERG\`
$67
7UHH
L 
3DUVH
)RU
L 

L
([HFXWH
([HFXWLRQRQ9LUWXDO-6(QJLQH
SXW9DOXHL
LIJHW9DOXHL! JRWR
IRUBERG\
SXW9DOXHLL
JRWR
HQG
E9LUWXDO%URZVHU
([HFXWH
9LUWXDO-DYD6FULSW(QJLQH
1DWLYH-DYD6FULSW(QJLQH
([HFXWH
D:HE6DQGER[
6WUXFWXUHRI9LUWXDO%URZVHU7KLUGSDUW\VFULSWLV
UXQQLQJRQYLUWXDOFRUHQRWQDWLYHHQJLQH6HFXUH
Figure 1: Classical Structure vs. Virtual Browser
tualization but our technique is signiÔ¨Åcantly diÔ¨Äerent. The
key diÔ¨Äerence is whether third party JavaScripts are di-
rectly running on a native JavaScript engine. Figure 1 illus-
trates the diÔ¨Äerence. Virtual Browser executes third party
JavaScripts on a virtualized JavaScript engine; on the other
hand, existing approaches check the parameters of each third
party JavaScript expression and then let them execute di-
rectly on the native JavaScript engine. Web Sandbox[27]
makes a big step toward virtualization.
It provides a vir-
tualized environment for native execution of third party
JavaScripts, but its execution is still restricted by the param-
eter checking model. As shown in Figure 2(a), it provides
a virtualized environment for for loop. All the variables are
fetched from the virtualized environment. However, the for
loop itself is still running on a native JavaScript engine1. As
shown in Section 2, this is the reason why they are vulnera-
ble to unknown native JavaScript engine vulnerabilities and
it is hard for them to handle dynamic JavaScript features
like eval and with.
Security is the key property of our design.
In order to
make Virtual Browser secure, we need to prevent third party
JavaScripts from directly running on a native JavaScript en-
gine. Two methods are used here to achieve our design:
avoidance and redirection. Avoidance means that we avoid
using some dangerous functions in the native browser when
implementing Virtual Browser. The dangerous functions
are functions that potentially lead a JavaScript string to be
parsed and executed on the native JavaScript engine. For
example, native eval in JavaScript can execute a string. If
eval is not used appropriately, third party scripts, which are
input to Virtual Browser as a string, can Ô¨Çow to the native
eval and get executed. Hence, we do not use the native eval
function when implementing the virtual browser. This en-
sures that there is no way for third party JavaScripts to ex-
ploit the Virtual Browser to access the native eval function.
Redirection means we redirect data Ô¨Çows to a place that is
ensured to be secure. For example, third party JavaScripts
1Microsoft Web Sandbox actually transforms the f or loop
into f or(e(b, ‚Äùi‚Äù, 0); c(b, ‚Äùi‚Äù)  is interpreted as
 at browsers (Firefox
2.0.0.2 or lower) but as  at the server-side
Ô¨Ålter.
All existing JavaScript level approaches [21, 1, 30, 27, 20]
deÔ¨Åne a particular server side (or middle-box) interpretation
which may be very diÔ¨Äerent from the browsers‚Äô interpreta-
tion, and hence remain vulnerable to such attacks. In Vir-
tual Browser, those attacks will not happen because scripts
are parsed only once at client-side.
Second, existing native sandboxing approaches that purely
rely on iframe for isolation, like AdJail [35] and SMash [17],
and JavaScript level approaches, like Web Sandbox [27], are
vulnerable to unknown native JavaScript engine vulnerabili-
ties but Virtual Browser is more robust to unknown attacks.
We take the f or loop as an example in Figure 2 again. As-
sume there is an unknown integer overÔ¨Çow in the f or loop of
native browser that is triggered by f or(i = a; i < b; i = i+c)
when a, b, and c are certain values. For a native sandbox, the
vulnerability can be directly triggered. Because the vulner-
ability is unknown, neither Web Sandbox nor BrowserShield
[31] (from which Web Sandbox evolved) can check the pa-
rameters and spot the attack. The vulnerability can still be
directly triggered because as shown in Figure 2(a), the f or
loop is running on native JavaScript engine.
In Virtual Browser, since it interprets the f or loop, direct
input of the f or loop will not trigger the vulnerability. As