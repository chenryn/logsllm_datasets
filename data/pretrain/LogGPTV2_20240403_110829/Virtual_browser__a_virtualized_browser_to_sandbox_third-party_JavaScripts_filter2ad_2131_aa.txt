# Title: Virtual Browser: A Virtualized Browser to Sandbox Third-Party JavaScripts with Enhanced Security

## Authors:
- Yinzhi Cao, Northwestern University, Evanston, IL
- Zhichun Li, NEC Research Labs, Princeton, NJ
- Vaibhav Rastogi, Northwestern University, Evanston, IL
- Yan Chen, Northwestern University, Evanston, IL
- Xitao Wen, Northwestern University, Evanston, IL

## Abstract
Third-party JavaScripts enhance the functionality and user experience of web applications but also introduce new security threats. These scripts cannot be fully trusted and executed with the same privileges as the host website. Existing approaches without native sandbox support can only secure a subset of third-party JavaScripts and are vulnerable to attacks encoded in non-standard HTML/JavaScript (browser quirks). Native sandboxes, on the other hand, are susceptible to attacks based on unknown native JavaScript engine bugs.

In this paper, we introduce Virtual Browser, a full browser-level virtualized environment within existing browsers for executing untrusted third-party code. Our approach supports more complete JavaScript language features, including hard-to-secure functions like `with` and `eval`. Since Virtual Browser does not rely on native browser parsing behavior, it is immune to attacks through browser quirks. Additionally, running third-party JavaScripts in Virtual Browser reduces the risk of exploiting unknown vulnerabilities in the native JavaScript engine. We isolate Virtual Browser from native browser components and carefully manage data flows to ensure security. Our evaluation shows that Virtual Browser matches the execution speed of Microsoft Web Sandbox, a state-of-the-art runtime web-level sandbox, while offering enhanced security and more comprehensive JavaScript support.

## 1. Introduction
Modern websites frequently use third-party JavaScripts to enrich user experiences. For example, a website may incorporate JavaScript games, targeted advertisements, visitor counters, and widgets from third parties. While these scripts add valuable functionalities, they also pose significant security risks. Malicious third-party JavaScripts can subvert the security policies of the host website and launch various attacks.

To address these challenges, we propose Virtual Browser, a virtualized browser built on top of a native browser to sandbox third-party JavaScripts. Virtual Browser is implemented in a language supported by the native browser, such as JavaScript, eliminating the need for browser modifications. It includes its own HTML parser, CSS parser, and JavaScript interpreter, which operate independently of the native browser. Third-party JavaScripts are parsed and executed once within the virtual JavaScript interpreter, ensuring isolation from the trusted JavaScripts of the host website. Communication between the host and third-party scripts is carefully controlled to maintain security.

Existing solutions, such as Microsoft Web Sandbox [27] and Google Caja [20], also employ virtualization techniques but differ significantly from our approach. These solutions check the parameters of each third-party JavaScript expression before allowing them to execute directly on the native JavaScript engine. This model is still vulnerable to unknown native JavaScript engine vulnerabilities and struggles with dynamic JavaScript features like `eval` and `with`.

Virtual Browser ensures security by preventing third-party JavaScripts from directly accessing the native JavaScript engine. We achieve this through two methods: avoidance and redirection. Avoidance involves avoiding the use of dangerous functions in the native browser, such as `eval`, which can execute strings. Redirection involves securely managing data flows. For instance, if there is an unknown integer overflow vulnerability in the native browser's `for` loop, Virtual Browser's interpretation of the loop prevents the vulnerability from being triggered.

In summary, Virtual Browser provides a more secure and comprehensive solution for executing third-party JavaScripts, enhancing the security and functionality of modern web applications.