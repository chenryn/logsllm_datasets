appear in Appendix B.
4.1 The Modular Composite Interval Discrete
Logarithm Problem
We now describe our variant of the IDL problem. Given a
modulus n = pq, an element y = gx mod n, and an interval
I of length Q such that x ∈ I, the modular composite
interval discrete logarithm problem IDL∗ is to compute x(cid:48)
such that x ≡ x(cid:48) mod φ(n).
Definition 4. (Modular Composite Interval Discrete
Logarithm Problem IDL∗) Let k be a security parameter, Q be
a diﬃculty parameter, and GenRSA be a modulus generation
algorithm. Let A be a probabilistic algorithm. Deﬁne the
experiment ExpIDL∗
A,GenRSA,Q(k) as follows:
n, x ←R [1, φ(n)], y ← gx mod n.
1. n ← GenRSA(1k).
2. g ←R Z∗
3. r ←R [0, q − 1], I ← [x − r, x − r + Q].
4. x(cid:48) ← A(g, y, n,I).
5. Output 1 if x(cid:48) ≡ x mod φ(n) and 0 otherwise.
The advantage of A in violating the IDL∗ assumption is
AdvIDL∗
A,GenRSA,Q(k) = Pr
ExpIDL∗
A,GenRSA,Q(k) = 1
.
The IDL∗ problem with GenRSA is said to be δk,Q(t)-hard
if AdvIDL∗
A,GenRSA,Q(k) ≤ δk,Q(t) for all A running in time at
most t.
In the above game, if the adversary returns a value x(cid:48)
which is equal to x, then the IDL∗ problem can be reduced to
the IDL problem. Otherwise, if the adversary returns x(cid:48) (cid:54)= x
such that x(cid:48) ≡ x mod φ(n), then the IDL∗ problem can be
reduced to the integer factorisation problem. Therefore, we
show in the following theorem that solving the IDL∗ problem
is as hard as solving either the IDL problem or the integer
factorisation problem.
(cid:16)
(cid:17)
Number of pairs
to pre-compute
N
210
211
212
213
214
215
216
217
(cid:113)
M/(cid:0)N
(cid:96)
(cid:1)) for a 80-bit M
Values of
(cid:96) = 8
24
2
2−4
2−8
2−12
2−16
2−20
2−24
(cid:96) = 9
2−1
2−5
2−9
2−14
2−18
2−23
2−27
2−32
(cid:96) = 10
2−5
2−10
2−15
2−20
2−25
2−30
2−35
2−40
(cid:96) = 11
2−9
2−15
2−20
2−26
2−30
2−37
2−42
2−48
and the chosen (cid:96)
(cid:96) = 12
2−14
2−20
2−26
2−32
2−38
2−44
2−50
2−56
(cid:96) = 13
2−18
2−25
2−31
2−38
2−44
2−51
2−57
2−64
(cid:96) = 14
2−23
2−30
2−37
2−44
2−51
2−58
2−65
2−72
(cid:96) = 15
2−27
2−35
2−42
2−50
2−57
2−65
2−72
2−80
(cid:96) = 16
2−32
2−40
2−48
2−56
2−64
2−72
2−80
2−88
(cid:96) = 17
2−36
2−45
2−53
2−62
2−70
2−79
2−87
2−96
Table 2: Distinguishability of BPV pairs from random pairs
Theorem 2
(Hardness of IDL∗). Let k be a security
parameter, Q be a diﬃculty parameter, and GenRSA be a
modulus generation algorithm. Suppose there exists a prob-
abilistic algorithm A running in time t which can solve the
IDL∗ problem for GenRSA on an interval of size Q. Then
there exists a probabilistic algorithm B with running time
t(cid:48) = t + texp(k) + c, where texp(k) is the time to compute
an exponentiation modulo an output of GenRSA(1k) and c is
a constant, that solves either the factorisation problem for
GenRSA or the IDL problem on an interval of size Q.
In
particular,
AdvIDL∗
A,GenRSA,Q(k) ≤ AdvFactB,GenRSA(k)+AdvIDLB,GenRSA,Q(k)+negl(k)
Proof. Let A be a probabilistic algorithm with running
time t. We prove the theorem using a sequence of games [18].
In one of the games, we will insert a factorisation challenge
and a win by the adversary lets us factor; in another game,
we will insert an IDL challenge and a win by the adversary
gives us the discrete logarithm.
Let Si be the event the adversary A wins game Gi.
Game G0.
Let G0 be the original IDL∗ experiment. Thus,
AdvIDL∗
A,GenRSA,q(k) = Pr(S0) .
(1)
Game G1.
In game G1, the challenger chooses x from the interval
[1, n] instead of the interval [1, φ(n)]. Since φ(n) is very close
to n, the distribution of messages returned by the challenger
√
is virtually unchanged. In particular, the probability that x
lies in an interval [φ(n), n] is (n−φ(n))/n = O(1/
n) which
is negligible in k, and hence
|Pr(S0) − Pr(S1)| ≤ O(cid:0)1/
n(cid:1) ≤ negl(k) .
√
(2)
Game G2: Factorisation.
The change from G1 to G2 is that in G2 the challenger uses
the adversary to try to factor a modulus n from a factori-
sation challenger by simulating the IDL∗ experiment from
game G1.
To begin, the IDL∗ challenger B obtains a factorisation
challenge: it is given n such that n = pq and must compute
either p or q. With this n, B chooses the values g, x, y, r,
and I as in game G1. B then initiates A with the inputs
(g, y, n,I). Suppose A solves the IDL∗ problem. Let y be
the element output by A; we have that y ≡ x mod φ(n).
Here either y = x or y = x + mφ(n). Let F be the event
that y = x + mφ(n) where m ≥ 1.
When F occurs, B can compute y − x = mφ(n). With a
multiple of φ(n), B can now compute a non-trivial factor of
n. Hence,
Pr(S2|F) ≤ AdvFactB,GenRSA(k)
(3)
and the running time of B is t(B) = t(A) + texp + c, where
texp is the time to perform an exponentiation gx mod n and
c is a constant. We also note that, since the distribution of
values provided by B to A are exactly the same as in game
G1, we have
|Pr(S1|F) − Pr(S2|F)| = 0 .
(4)
When F does not occur, we do not have any way of solving
the factorisation problem. However, we will construct game
G3 in which we can solve an IDL challenge when ¯F occurs.
Game G3: IDL.
The IDL∗ challenger B obtains an IDL challenge:
Game G3 is based on G1 (not G2); the change from G1 to
G3 is that in G3 the challenger uses the adversary to try to
solve a modular composite interval discrete logarithm prob-
lem from an IDL challenger by simulating the IDL∗ experi-
ment from game G1.
it is
given (g, gx, n,I), and must compute x. B passes the in-
puts (g, gx, n,I) to A. Suppose A solves the IDL∗ problem.
Let y be the element output by A; we have that y ≡ x
mod φ(n). Here either y = x or y = x + mφ(n). Again, let
F be the event that y = x + mφ(n) where m ≥ 1.
When ¯F occurs, B has a solution y = x to the IDL challenge
it was given. Hence,
Pr(S3|¯F) ≤ AdvIDLB,GenRSA,Q(k)
(5)
and the running time of B is t(B) = t(A). We also note
that, since the distribution of values provided by B to A are
exactly the same as in game G1, we have
(cid:12)(cid:12)Pr(S1|¯F) − Pr(S3|¯F)(cid:12)(cid:12) = 0 .
(6)
When ¯F does not occur, we do not have any way of solving
the IDL problem. However, game G2 handles the event when
F occurs.
Analysis of Game G1.
Combining equations (3)–(6), we ﬁnd
Pr(S1) = Pr(F) Pr(S1|F) + Pr(¯F) Pr(S1|¯F)
= Pr(F) Pr(S2|F) + Pr(¯F) Pr(S3|¯F)
≤ Pr(F)AdvFactB,GenRSA(k) + Pr(¯F)AdvIDLB,GenRSA,Q(k)
≤ AdvFactB,GenRSA(k) + AdvIDLB,GenRSA,Q(k) .
(7)
Final result.
The result follows by combining equations (1), (2), and
(7).
5. SECURITY ANALYSIS OF DLPuz
[6]. Chen et al.
In this section, we analyse the DLPuz puzzle using the
security model of Chen et al.
introduced
two security properties that a client puzzle should satisfy:
unforgeability and diﬃculty. We give a brief description of
these two properties. Unforgeability of DLPuz follows from
the straightforward use of a pseudo-random function as a
message authentication code. We show that the diﬃculty of
DLPuz can be reduced to the IDL∗ problem.
5.1 Unforgeability
This experiment measures the ability of an adversary to
produce a valid client puzzle and force a server to accept
it as one that was not originally generated by a server in a
probabilistic way.
In general, unforgeability can easily be provided by using
a message authentication code (MAC) or pseudo-random
function to tag puzzles generated by the server, and this
is what done in DLPuz. The formal deﬁnition of puzzle
unforgeability and the result showing that DLPuz is indeed
unforgeable appear in Appendix C.
5.2 Difﬁculty
The diﬃculty property ensures that an adversary has to
spend the speciﬁed amount of resources to solve an instance
of a client puzzle. In the following theorem, we show that
our puzzle, DLPuz, is a diﬃcult puzzle under the IDL∗ as-
sumption.
Definition 5. (Puzzle Diﬃculty [6]) Let k be a security
parameter and let Q be a diﬃculty parameter which is kept
ﬁxed through the experiment. Let A be a probabilistic al-
gorithm and Puz be a client puzzle. Deﬁne the experiment
ExpDiﬀA,Puz,Q(k) as follows:
1. (params, s) ← Setup(1k).
2. Run A(params) with oracle access to CreatePuzSoln(·)
and Test(·), which are answered as follows:
• CreatePuzSoln(str): puz ← GenPuz(s, Q, str).