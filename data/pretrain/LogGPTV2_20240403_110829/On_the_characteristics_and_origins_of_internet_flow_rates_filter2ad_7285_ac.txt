relationship to other ﬂow characteristics. We now turn our
attention to understanding the origins of the rates of ﬂows
we observed. We restrict our attention to TCP ﬂows for two
reasons. First, TCP is used by most traﬃc in the Internet
[21]. Second, the congestion and ﬂow control mechanisms
in TCP give us the opportunity to understand and explain
the reasons behind the resulting transmission rates. In this
section we describe a tool we built, called T-RAT (for TCP
Rate Analysis Tool) that examines TCP-level dynamics in
a packet trace and attempts to determine the factor that
limits each ﬂow’s transmission rate.
T-RAT leverages the principles underlying TCP. In partic-
ular, it uses knowledge about TCP to determine the number
of packets in each ﬂight and to make a rate limit determina-
tion based on the dynamics of successive ﬂights. However,
as will become evident from the discussion below, principles
alone are not suﬃcient to accomplish this goal. By necessity
T-RAT makes use of many heuristics which through experi-
ence have been found to be useful.
Before describing how T-RAT works, we ﬁrst review the
requirements that motivate its design. These include the
range of behavior it needs to identify as well as the environ-
ment in which we want to use it.
The rate at which a TCP connection transmits data can
be determined by any of several factors. We characterize
the possible rate limiting factors as follows:
• Opportunity limited:
the application has a limited
amount of data to send and never leaves slow-start.
313This places an upper bound on how fast it can trans-
mit data.
• Congestion limited: the sender’s congestion window is
adjusted according to TCP’s congestion control algo-
rithm in response to detecting packet loss.
• Transport limited: the sender is doing congestion avoid-
ance, but doesn’t experience any loss.
• Receiver window limited: the sending rate is limited
by the receiver’s maximum advertised window.
• Sender window limited: the sending rate is constrained
by buﬀer space at the sender, which limits the amount
of unacknowledged data that can be outstanding at
any time.
• Bandwidth limited: the sender fully utilizes, and is
limited by, the bandwidth on the bottleneck link. The
sender may experience loss in this case. However, it is
diﬀerent from congestion limited in that the sender is
not competing with any other ﬂows on the bottleneck
link. An example would be a connection constrained
by an access modem.
• Application limited: the application does not produce
data fast enough to be limited by either the transport
layer or by network bandwidth.
We had the following requirements in designing T-RAT.
First, we do not require that an entire TCP connection,
or even its beginning, be observed. This prevents any bias
against long-lived ﬂows in a trace of limited duration. Sec-
ond, we would like the tool to work on traces recorded at
arbitrary places in the network. Thus, the analyzer may
only see one side of a connection, and it needs to work even
if it was not captured near either the sender or receiver. Fi-
nally, to work with large traces, our tool must work in a
streaming fashion to avoid having to read the entire trace
into memory.
T-RAT works by grouping packets into ﬂights and then
determining a rate limiting factor based on the behavior of
groups of adjacent ﬂights. This entails three main compo-
nents: (i) estimating the Maximum Segment Size (MSS) for
the connection, (ii) estimating the round trip time, and (iii)
analyzing the limit on the rate achieved by the connection.
We now describe these components in more detail. As men-
tioned above, T-RAT works with either the data stream,
acknowledgment stream, or both. In what follows, we iden-
tify those cases when the algorithm is by necessity diﬀerent
for the data and the acknowledgment streams.
4.1 MSS Estimator
The analysis requires that we have an estimate of the MSS
for a connection. When the trace contains data packets, we
set the MSS to the largest packet size observed. When the
trace contains only acknowledgments, estimating the MSS is
more subtle, since there need not be a 1-to-1 correspondence
between data and acknowledgment packets. In this case, we
estimate the MSS by looking for the most frequent com-
mon divisor. This is similar to the greatest common divisor,
however, we apply heuristics to avoid looking for divisors of
numbers of bytes acknowledged that are not multiples of the
MSS.
4.2 Round Trip Time Estimator
In this section, we present a general algorithm for estimat-
ing RTT based on packet-level TCP traces. RTT estimation
is not our primary goal but, rather, a necessary component
of our rate analyzer. As such, we ultimately judge the al-
gorithm not by how accurately it estimates RTT (though
we do care about that) but by whether it is good enough to
allow the rate analyzer to make correct decisions.
There are three basic steps to the RTT estimation algo-
rithm. First, we generate a set of candidate RTTs. Then
for each candidate RTT we assess how good an estimate of
the actual RTT it is. We do this by grouping packets into
ﬂights based on the candidate RTT and then determining
how consistent the behavior of groups of consecutive ﬂights
is with identiﬁable TCP behavior. Then we choose the can-
didate RTT that is most consistent with TCP. We expand
on each of these steps below.
We generate 27 candidates, Tk, between 0.003 sec and
3 sec, where Tk = 0.003 ∗ 1.3k sec. This covers the range
of round trip times we would normally expect anywhere be-
yond the local network.
Assume we have a stream of packets, Pi, each with arrival
time Ti and an inter-arrival interval ∆Pi = Ti − Ti−1. For
a candidate RTT, we group packets into ﬂights as follows.
Given the ﬁrst packet, P0, in a ﬂight, we determine the ﬁrst
packet in the next ﬂight by examining ∆Pi for all packets
with arrival times between T0 + RTT and T0 + fac · RTT ,
where fac is a factor to accommodate variation in the round
trip time. We identify the packet P1 with the largest inter-
arrival time in this interval. We also examine P2, the ﬁrst
packet that arrives after T0 +fac·RT T . If ∆P2 ≥ 2·∆P1, we
choose P2 as the ﬁrst packet of the next ﬂight. Otherwise,
we choose P1.
There is an obvious tradeoﬀ in the choice of fac. We
need fac to be large enough to cover the variation of RTT.
However, setting fac too large will introduce too much noise,
thereby reducing the accuracy of the algorithm. Currently,
we set fac to 1.7, which is empirically optimal among 1.1,
1.2, ..., 2.0.
Once a set of ﬂights, Fi (i ≥ 0) has been identiﬁed for a
candidate RTT, we evaluate it by attempting to match its
behavior to that of TCP. Speciﬁcally, we see whether the
behavior of successive ﬂights is consistent with slow-start,
congestion avoidance, or response to loss. We elaborate on
how we identify each of these three behaviors.
Testing for Packet Loss: When the trace contains data
packets, we infer packet loss by looking for retransmissions.
Let seqB be the largest sequence number seen before ﬂight
F . We can conclude that F has packet loss recovery (and
a prior ﬂight experienced loss) if and only if we see at least
one data packet in F with upper sequence number less than
or equal to seqB. For the acknowledgment stream, we in-
fer packet loss by looking for duplicate acknowledgments.
Like TCP, we report a packet loss whenever we see three
duplicate acknowledgments. In addition, if a ﬂight has no
more than 4 acknowledgment packets, we report a packet
loss whenever we see a single duplicate. The latter helps
to detect loss when the congestion window is small, which
often leads to timeouts and signiﬁcantly alters the timing
characteristics. These tests are robust to packet reordering
as long as it does not span ﬂight boundaries or cause 3 du-
plicate acknowledgments.
314Testing for Congestion Avoidance: Given a ﬂight F ,
deﬁne its ﬂight size, SF , in terms of the number of MSS
packets it contains:
SF = (cid:24) seq+
− seq−
F
M SS
F
(cid:25)
where seq−
F is the largest sequence number seen before F ,
and seq+
F is the largest sequence number seen before the next
ﬂight. We deﬁne a ﬂight’s duration DF as the lag between
the arrival of the ﬁrst packet of F and the ﬁrst packet in the
subsequent ﬂight.
Testing whether four consecutive ﬂights2 Fi (i = 0, 1, 2, 3)
are consistent with congestion avoidance requires determin-
ing whether the ﬂight sizes, SFi, exhibit an additive increase
pattern. The test is trivial when the receiver acknowledges
every packet.
In this case, we only need to test whether
SFi+1 − SFi = 1 holds for i = 0, 1, 2.
The test is considerably more complex with delayed ac-
knowledgments. In this case, the sizes of successive ﬂights
need not increase by 1. Because only every other packet
is acknowledged, the sender’s congestion window increases
by 1 on average every second ﬂight. Further, because the
ﬂight size is equal to the sender’s window minus unacknowl-
edged packets, the size of successive ﬂights may decrease
when the acknowledgment for last packet in the prior ﬂight
is delayed. Hence, sequences of ﬂight sizes like the following
are common:
n, n + 1, n + 1
, n + 2, n + 1
, n + 2, n + 3, n + 4, n + 3, ...
|
∆S=0
{z
}
|
∆S=−1
{z
}
In our algorithm, we consider ﬂights Fi(i = 0, 1, 2, 3) to
be consistent with congestion avoidance if and only if the
following three conditions are met:
1. −2 ≤ SFi − predictedi ≤ 2 for i = 1, 2, 3, where
predictedi = max0≤k awndmax − 3 · M SS, where awndmax
is the largest receiver advertised window size. The diﬀer-
3In fact, because delayed acknowledgments can cause what
would otherwise be evenly spaced packets to be transmit-
ted in bursts of 2, we cannot use the inter-packet times
directly in this calculation. For data packets, instead of
using the inter-arrival distribution, ∆Pi, directly, we use
∆P (cid:3)
i = max(∆Pi, ∆Pi+1).
ence of 3 ∗ MSS is a heuristic that accommodates variations
due to delayed acknowledgments and assumes that the MSS
need not divide the advertised window evenly.
Sender Window Limited: Let SFmed and SF80 be the
median and the 80th percentile of the ﬂight sizes. A ﬂow
is considered sender window limited if the following three
conditions are met. First, the ﬂow is not receiver window
limited, congestion limited, or bandwidth limited. Second,
SF80 < SFmed + 3. Finally, there are four consecutive ﬂights
with ﬂight sizes between SF80 − 2 and SF80 + 1.
Opportunity Limited: A ﬂow is deemed opportunity
limited if the total number of bytes transferred is less than
13 ∗ M SS or if it never exits slow-start. The limit of 13 is
needed because it is diﬃcult to recognize slow-start behavior
with fewer than 13 packets.
Application Limited: A ﬂow is application limited if a
packet smaller than the MSS was transmitted followed by a
lull greater than the RTT, followed by additional data.
Transport Limited: A ﬂow is transport limited if the
sender has entered congestion avoidance, does not experi-
ence any loss, and the ﬂight size continues to grow.
T-RAT is not able to identify unambiguously the rate lim-
iting behaviors in all cases. Therefore, the tool reports two
additional conditions.
Host Window Limited: The connection is determined
to be limited by either the sender window or the receiver
window, but the tool cannot determine which. When ac-
knowledgments are not present and the ﬂow passes the sender
window limited test above, it is classiﬁed as host window
limited.
Unknown Limited: The tool is unable to match the
connection to any of the speciﬁed behaviors.
5. VALIDATION
Before using T-RAT to analyze the rate limiting factors
for TCP ﬂows in our packet traces, we ﬁrst validated it
against measurement data as well as simulations. Speciﬁ-
cally, we compared T-RAT’s round trip time estimation to
estimates provided by tcpanaly [15] over the NPD N2 [18]
dataset.4 Accurate RTT estimation is a fundamental com-
ponent of the tool since making a rate-limit determination
is in most cases not possible without being able to group
packets into ﬂights. Once we validated the RTT estimation,
we then needed to determine whether the rate analyzer re-
turned the right answer. Validating the results against ac-
tual network traﬃc is problematic. After all, that is the
problem we intend to solve with this tool. Thus, we val-
idated T-RAT against packet traces produced by network
simulations and by controlled network experiments in which
we could determine the speciﬁc factors that limited each
ﬂow’s transmission rate.
5.1 RTT validation
The NPD N2 dataset contains packet traces for over 18, 000
TCP connections. We used 17, 248 of these in which packets
were captured at both ends of the connections, so the dataset
contains data and acknowledgment packets recorded at both
the sender and receiver. We ran tcpanaly over this data and
4
tcpanaly requires traces of both directions of a connection.
Therefore, we can use it to validate our tool using 2-way
traces, but it cannot address the RTT estimation problem
when only a single direction of the connection is available.
316n
o
i
t
c
a
r