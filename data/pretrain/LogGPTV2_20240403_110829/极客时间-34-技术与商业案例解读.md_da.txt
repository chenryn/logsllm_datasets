# 124 \| 如何通过企业技术积累去分析一家企业？通过企业的技术积累去分析一家企业是一个行之有效的办法。一个企业如果想要成功，要么需要在商业上有所建树，要么需要在技术上有所建树，总之，一定需要有在某些方面和别人有明显的优势，才可以在激烈的竞争里面站稳脚跟。如果我们要对上述的话一一举例的话，我想，亚马逊的成功，背后应该是对商业深刻理解的成功。谷歌的成功，很大程度上是对技术的极致追求的成功。从 2003年开始，谷歌发表了一系列论文，这促成了大数据时代的到来，之后谷歌又在人工智能领域发力，实现了"AlphaGo战胜人类最顶级围棋高手"这样历史性的突破。我们可以看到在谷歌踏足的每一个领域，很大程度上展现出来的技术水平都代表了这个领域人类突破性的进展。所以，谷歌对技术的极致追求可见一斑。也正是因为谷歌对技术的极致追求，它才能在互联网海量数据的搜索和广告领域占据无可取代的地位。其广告收入就像印钞机一般，24小时源源不断地提供巨额营收。那么我们应该如何通过企业技术积累去分析呢。首先有一个前提，一个人如果可以从技术积累去分析企业，那么对分析企业的人本身也提出了一些要求。如果分析企业的人本身对技术不够精通，不是某一个领域专家的话，那么透过技术去分析企业多少就有点镜花水月了，毕竟分析者自己也无法比其他人能够更早地判断在某个行业里，哪一家拥有独特技术的企业是否可以一飞冲天。``{=html}所以，能够通过技术积累去分析企业的，最好本人是某一方面的专家，或者在一个领域内已经有所建树了。通过技术去分析企业，就我个人而言，只有在分析大数据企业的时候，我才会信心满满。毕竟在大数据基础架构这个领域，我已经工作了10 多年，并且在这个领域里也有一些建树。其次，通过技术积累去分析企业，大体上我们要看几个方面。第一个方面要看一个企业的技术是否具有适用的、有意义的场景，并且这些场景是需要能够带来巨大利润的。我们知道很多时候，企业可以研究一些很领先的技术，但是如果这些技术本身并不能产生效益的话，那么这个技术对盈利其实就是没有意义的。虽然说这类技术可能对于基础研究会有帮助，但是对于一个公司，尤其是初创公司来说，其拥有的技术一定是有适用的场景，这些场景是需要有实际意义，并能够带来巨大利润的。大公司里或许还能允许一些失败，小公司，创业公司，其技术积累的盈利能力就是其生存的根基之一。如果以大数据作为例子的话，Kafka这个软件对应的技术显然有非常普适的价值，并且，这种价值在很多有实际意义的场景里都可以体现出来，这些场景显然也能带来巨大的利润。因此我们有理由相信做Kafka 的公司，很有可能会十分成功。第二个方面，我们要看这个技术是不是有其领先和独到的优势。一个企业的技术，如果很容易被模仿的话，那么这个技术带给这个企业的价值也就非常有限了；而如果一个企业的技术有非常领先和独到的优势，其他企业和个人即便花费巨大的代价也很难模仿和超越，那么这种技术就可以产生技术壁垒，进而给公司带来充足的发展空间。举个例子来说，搜索是一个大家都知道的东西。前前后后做搜索的公司也非常多。但是谷歌在搜索上，比如说在对所有的搜索结果进行排序，决定到底哪条记录是和搜索的关键词最相关的这个问题上，谷歌的技术就有非常独到之处，而且其技术的领先优势也非常明显。这就可以回答了，为什么尽管那么多的公司都非常眼红谷歌在搜索广告上赚取了巨大的利润，但是这些公司其实拿谷歌没有任何办法，即便砸钱砸人进去做，对方能够掌握的技术依然无法和谷歌的技术相媲美。比如说微软砸钱并不少，微软人才也不少，但是微软无法掌握谷歌的技术，所以无法和谷歌一样在搜索广告上赚取大量利润。对于一个企业分析人员来说，如果他能够洞察到一家企业的技术领先和独到之处，并且这项技术同时具备盈利能力，那么企业分析人员就应该可以判断得出来这个企业前途无量，他的垄断地位几乎是无可动摇的。第三个方面要看一个企业技术积累的深度和广度。如果一个企业的技术积累可以覆盖一个领域横向纵向的相关方面，既广且深，并且每个方面的技术都有其独到之处，那么在某个领域内，这个公司就很容易形成优势。相反的，如果一个公司只是在某个方面技术有些独到之处，并只覆盖了这个方面的周边，但是在相关更深入的问题积累方面有欠缺的话，这个公司的发展空间仍就受阻于这些技术积累跛脚的地方。这里我们也可以举一个例子。Tableau作为数据可视化的领头羊，其软件在数据可视化领域有很丰富的积累。Tableau在数据可视化用户交互这个方面的积淀很深，不是一般人能够随便抄袭的。数据可视化本身也是一个很有价值的领域，可以带来大量的利润。但是 Tableau这款软件和这个公司的技术积累的广度是有问题的。比如说在用户交互方面，Tableau只适合用鼠标去交互。但是在流行自然语言的交互模式上，就毫无建树。因此当AI 流行开来，需要更自然的交互方式的时候，这些都会成为 Tableau 的瓶颈。通过一家公司的技术积累去分析一家公司，是非常行之有效的分析手段。但是它对分析者本身提出了比较高的要求。分析者本身对这方面的技术要非常懂，才可以有效地对企业进行分析。在具体分析的时候，我们可以从三个方面展开，首先看技术适用的场景是否有巨大的盈利空间，再看技术本身是否有领先和独到之处，最后是这个企业的技术积累的深度和广度。这种分析的优势在于分析所基于的证据非常扎实，所以分析得出来的结论的可靠性也很高，预见性强，不容易出错。但是这也对分析者提出了很高的要求。作为分析者，我们也需要不断来充实自己，同时提高自身对技术和商业的理解，才可以做出更为精准的判断。![](Images/e7329c467700f5b952da4bc227396c50.png){savepage-src="https://static001.geekbang.org/resource/image/ec/bb/ec0948decf6b89fbe778bfc82bea62bb.jpg"}
# 125 \| Facebook的黑客精神今天我们说到的 Facebook 黑客精神，并非是指 Facebook培养了一堆黑客，有很强的黑科技，并在全世界各地研究各种安全漏洞，做出各种黑客应该不应该做的事情。在这里我们讲的黑客精神其实是Facebook 对待软件开发的态度和方式。Facebook 的创始人马克·扎克伯格有一句名言："迅猛而动，突破前行"（MoveFast and Break Things）。这句话也成为了 Facebook 的座右铭。在 Facebook的公司里，到处都贴着这句话。这句话非常有名，它甚至深深地影响了整个 Facebook对待软件开发的态度。那么这句话到底是什么意思，它带给 Facebook的到底又是什么结果呢？"迅猛而动，突破前行"的意思在扎克伯格看来，就是软件开发不要想太多，写出来的东西就发布出去，哪怕写出来的东西不太对，这里那里可能会有问题。如果出大问题的话，赶紧修好就可以了。扎克伯格认为，让市场上见到东西的速度是很重要的。一个东西如果拖着，等久了可能就晚了，所以，他并不认同传统企业，乃至某些类似谷歌这样的互联网公司对待产品和代码的态度。他觉得大家每个人就应该像黑客一样，在代码里乱改顺便把新功能实现了。然后可以快速地给用户用，这是一条正确的道路。``{=html}这是公司创始人的态度，并且是在公开场合多次强调的态度，所以它在内部的影响力可想而知。于是 Facebook 内部有"HackEverything"的传统，代码很多时候是怎么快怎么来，东西做出去如果有 Bug再修，如果把已经有的功能搞坏了，修回来就可以了。这基本上在很长一段时间里面是整个Facebook 公司的传统了。这个传统是不是好，从软件开发的角度上来说，一个软件开发的团队，如果一直靠着"HackEverything"的态度，不好好做架构，不好好测试一下软件，就直接把产品放出去，我个人是很难相信这样的做法是可以持久发展的。因为软件代码的质量本身也是软件可以持续发展下去的基础。如果不好好维护，慢慢的，加一个新功能就会越来越难了。为了加一个功能付出的代价也越来越高了，有可能这个代价高到无法估计。当然很长时间里，尽管业界很多人都认为这个想法做法是不对的，在 Facebook内部这个做法一直大行其道。而这种做法也反映到了 Facebook开源的产品的质量上。基本上，Facebook开源出来的很多产品的代码质量是堪忧的。比如说著名的 Hive，这是 Facebook 早年投了很大力气开发的 SQL on Hadoop的产品，它的代码我看过，"快糙猛"绝非是一个谎言。Hive这个开源项目的代码质量参差不齐，很多地方感觉像是从来没有在工业界正经写过代码的人写的，看起来真的有一种让人不舒服的感觉。当然除了 Hive 以外，Facebook的另外一些开源项目的代码质量也同样受到了质疑。这些代码质量差的开源项目，和谷歌极少数虽然开源，但是代码质量犹如艺术一般的项目比起来，我只能说，真的很难想象为什么这是两家齐名的公司，代码质量却大相径庭。在很长时间里，我们其实并没有注意到 Facebook内部是不是真的为这种黑客精神付出了代价。当然我个人是一直坚定地相信这个代价是迟早要付出的，而且等到发觉的时候，代价可能已经很大了，大到需要付出难以承受的成本才能够修复了。不过，2014 年在 Facebook 的 F8 开发者大会上，做 Keynote的扎克伯格，把自己说过的这句话改了。新的版本变成了："迅猛而动，稳定架构"（Move Fast With StableInfra）。简单一点来讲，整个基础架构需要足够稳定的前提下 MoveFast。好了，扎克伯格终于改变主意了，再也不说突破前行了。当整个代码被无休止的"Hack"，天天"突破前行"以后，现在，整个 Facebook面对的东西是没有什么不能被突破的。怎么办呢？老老实实回头该补的补，该修的修吧。不补不修，房屋天天漏水，还怎么装点门面迎接客人啊。这种修补的代价是非常巨大的。我在微软的时候，见过一些开始写得乱七八糟赶时间赶进度赶出来的代码，代价就是这些代码要一个模块一个模块推倒重来，在上面修修补补是没有办法修好的，这需要很多的人力物力。我参与过的一个项目投入了10 个人，做了 18 个月，做完之后总算是看起来能够看了。我一直有一个困惑，到底是什么让扎克伯格相信他自己的黑客理念呢。只要发布产品足够快就不用付出代价吗？扎克伯格是一个非常聪明的人，而且他周围应该也不缺人告诉他，这个想法的问题。那么在这个背后，扎克伯格想的到底是什么？这个问题我一直没有太多的答案。一个可能是早年创业的时候，刚开始运转的话，扎克伯格的想法是对的。一个公司如果连生存问题都不能解决好，那么代码质量到底有多重要，也只能是以后的事情了。虽然说谷歌从一开始连生存问题都没想好怎么解决的时候，就对代码质量要求很高，但是谷歌毕竟是个例。无论如何，有可能是扎克伯格的创业公司的经验和梦想在Facebook 变大以后依然在，并未与时俱进。另外一个可能是扎克伯格从来没有在大公司实践过，所以他固然是一个天才，却不知道在什么样的时候，这种黑客做法会对公司造成伤害。这种伤害可能还是非常巨大的，所以在 2014年，他作为公司领袖，才必须再一次通过他自己的嘴巴告诉大家，他错了。但是不管怎么样，我们必须看到，榜样的力量是无穷的。因为扎克伯格的观点，很多硅谷更新的创业公司做法都是快糙猛，当年的谷歌那样对待代码的精神，对于现在的公司来说，已经荡然无存了，这在一定程度上造成了开发人员平均水平的严重下降。扎克伯格在 Facebook倡导的黑客精神，如果只是影响了自己公司，那么破坏力还小一点。如果影响了周围后来的很多公司，这种破坏力，我有点不好估量了。所以，虽然Facebook今天已经强调一个稳定的架构是很重要的，但是很多后来的公司其实并没有听进去。而且，从 Facebook 内部看，这个黑客精神其实仍然根深蒂固。比如说在Facebook的很多组里进行绩效考核的时候，会先看一个人到底写了多少行代码，行数多的人比写的行数少的人，绩效考核就会更高。这种纯粹以代码量来考核的做法，无疑是当年"迅猛而动"的遗留问题。代码质量问题是每个大公司有效率分工合作开发的基础。很多时候，代码质量问题，也是从一个创业公司到一个成熟大公司的过渡过程中，一个巨大的挑战。不少公司都会选择严格对待代码质量问题。但是 Facebook 却选择了一条截然不同的道路，它们提倡代码的黑客精神。这给Facebook 自身的发展带来了很多负面影响，同时，也因为 Facebook的影响力，这给整个互联网行业都带来了不好的风气。Facebook的黑客精神所造成的负面影响，不容易消除。![](Images/e7329c467700f5b952da4bc227396c50.png){savepage-src="https://static001.geekbang.org/resource/image/ec/bb/ec0948decf6b89fbe778bfc82bea62bb.jpg"}