# Alerts and Packets Analysis

## Table 1: Pre-Processor Performance for "Trace 1"
This design is suitable for hardware implementation on an FPGA or NIC. The performance gain is indicated by the difference in Snort runtimes.

| Alerts | Packets | % Size | Time (sec.) | Memory (kb) |
|--------|---------|--------|-------------|-------------|
| 147,588 | 13,735,302 | 72.22 | 391.39 | 1.06 |
| 147,588 | 13,800,174 | 72.56 | 390.15 | 2.12 |
| 147,588 | 14,808,934 | 77.86 | 393.50 | 3.18 |
| 136,730 | 2,072,319 | 10.9 | 78.66 | 1.66 |
| 136,730 | 2,227,783 | 11.71 | 83.76 | 3.32 |
| 136,730 | 2,356,836 | 12.39 | 89.59 | 4.99 |
| 136,730 | 2,623,751 | 13.8 | 95.42 | 6.65 |
| 136,730 | 3,693,761 | 19.42 | 137.52 | 8.32 |
| 136,730 | 7,332,799 | 38.55 | 317.02 | 9.98 |

## Table 2: Pre-Processor Performance with Snort for "Trace 2"
This design is suitable for software implementation on a general-purpose processor. TCP stream reassembly is performed by Snort.

| Window (bytes) | Step (bytes) | Snort standalone | Snort + preprocessor |
|----------------|--------------|------------------|----------------------|
| 8              | 1            | 67,875,101       | 7,367,837            |
| 8              | 2            | 67,875,101       | 7,890,043            |
| 8              | 3            | 67,875,101       | 9,354,317            |
|                |              | 1683.84          | 1458.9               |
|                |              |                  | 1368.74              |
|                |              |                  | 1440.63              |
|                |              | 577,388          | 577,234              |
|                |              |                  | 577,234              |
|                |              |                  | 577,234              |
|                |              |                  | 67.3                 |
|                |              |                  | 70.5                 |
|                |              |                  | 73.3                 |

### Analysis
The trade-offs involved in varying the window size (w) and step size (s) can be seen in Table 1. For a window size of 4 bytes, the size of the pre-processed trace is almost 75% of the original trace, mainly due to false positives caused by collisions in the fingerprint space (16-bit wide). Increasing the step size (s) results in a small increase in the size of the pre-processed trace, caused by additional false positives. Generally, increasing the step size (s) results in:
1. Increased memory footprint for the pre-processor.
2. Reduced per-packet table lookups.
3. Increased number of false positives, leading to a larger pre-processed trace.

For a window size of 8 bytes, false positives due to collisions are no longer dominant (32-bit wide fingerprints), and the effects of varying the step size are more pronounced. Desirable configurations should have a low memory footprint, generate few false positives, and reduce the number of table lookups per packet. Setting w to 8 and s to a value between 2 and 5 provides these characteristics. On average, the size of the pre-processed trace is between 10% to 20% of the original trace, resulting in a corresponding improvement in Snort's runtime.

### Experiment 2: Software Implementation on General-Purpose Processor
To measure processing time, the approximate pattern matching technique was implemented as a Snort preprocessor. The number of packets processed by Snort and the time required were measured with and without the preprocessor.

#### Results
- **Snort standalone**: 67,875,101 packets, 1683.84 seconds
- **Snort + preprocessor**:
  - Step size 1: 7,367,837 packets, 1458.9 seconds
  - Step size 2: 7,890,043 packets, 1368.74 seconds
  - Step size 3: 9,354,317 packets, 1440.63 seconds

When Snort is run with the preprocessor, the amount of packets processed varies from 10% to 14% of the total, translating to a 14% to 19% improvement in Snort's runtime. The performance gain is limited by the processing time dominated by moving packets to and from memory.

### Memory Footprint
- **Hash Table**: 16,384 entries, top-level pointers to bucket chains.
- **Memory Overhead**: Includes overhead for storing the hash table.
- **Comparison**: Snort's Aho-Corasick pattern matching algorithm requires 57.02 MBytes for the same set of patterns.

### Diminishing Returns
Increasing the step size to 3 bytes causes an increase in Snort's runtime compared to a step size of 2 bytes, due to an increase in the number of packets sent to Snort. This is a direct effect of an increase in the false positive rate.

### Conclusion
The preprocessor's processing cost is not prohibitively large for a software implementation. A hardware implementation can further improve performance by exploiting parallelism during fingerprint table lookups. The approach has a small memory footprint and low memory accesses per packet, making it suitable for high-speed links.

### Future Work
- Investigate the feasibility of a single-lookup solution for short patterns.
- Explore the ability of the fingerprint-based solution to indicate candidate matches, which could facilitate other pattern matching applications like rapid worm detection.

### References
[1] A. V. Aho and M. J. Corasick. Efficient string matching: an aid to bibliographic search. Communications of the ACM, 18(6):333–340, June 1975.
[2] K. Anagnostakis, E. Markatos, S. Antonatos, and M. Poluchronakis. E2xB: A domain-specific string matching algorithm for intrusion detection. In Proceedings of IFIP Information Security Conference, May 2003.
[3] H. Bos and K. Huang. Towards software-based signature detection for intrusion prevention on the network card. In Proceedings of Symposium on Recent Advances in Intrusion Detection, Sept. 2005.
[4] B. Commentz-Walter. A string matching algorithm fast on the average. In Proceedings of ICALP, pages 118–132, July 1979.
[5] S. Dharmapurikar, P. Krishnamurthy, T. Sproull, and J. Lockwood. Deep packet inspection using parallel bloom filters. In Proceedings of Symposium on High Performance Interconnects (HotI), pages 44–51, Aug. 2003.
[6] S. Dharmapurikar and J. Lockwood. Fast and scalable pattern matching for content filtering. In Proceedings of ANCS, Oct. 2005.
[7] H.-A. Kim and B. Karp. Autograph: Toward automated, distributed worm signature detection. In Proceedings of Usenix Security, Aug. 2004.
[8] U. Manber. Finding similar files in a large file system. In Proceedings of Usenix Conference, 1994.
[9] A. Moore, J. Hall, E. Harris, C. Kreibech, and I. Pratt. Architecture of a network monitor. In Proceedings of Passive and Active Measurement Workshop, Apr. 2003.
[10] J. Newsome, B. Karp, and D. Song. Polygraph: Automatically generating signatures for polymorphic worms. In Proceedings of the IEEE Symposium on Security and Privacy, May 2005.
[11] V. Paxson. Bro: A system for detecting network intruders in real-time. Computer Networks, 31, 1999.
[12] M. Rabin. Fingerprinting by random polynomials. Technical Report TR-15-81, Harvard University, Department of Computer Science, 1981.
[13] M. Roesch. Snort: Lightweigth intrusion detection. In Proceedings of Usenix LISA, Nov. 1999.
[14] S. Singh, C. Estan, G. Varghese, and S. Savage. Automated worm fingerprinting. In OSDI, Dec. 2004.
[15] R. Sommer and V. Paxson. Enhancing byte-level network intrusion detection signatures with context. In Proceedings of the 10th ACM Conference on Computer and Communications Security, 2003.
[16] H. Song, T. Sproull, M. Attig, and J. Lockwood. Snort offloader: A reconfigurable hardware NIDS filter. In Proceedings of 15th International Conference on Field Programmable Logic and Applications (FPL), Tampere, Finland, Aug. 2005.
[17] N. Spring and D. Wetherall. A protocol-independent technique for eliminating redundant network traffic. In Proceedings of ACM SIGCOMM, 2000.
[18] Y. Sugawara, M. Inaba, and K. Hiraki. Over 10 Gbps string matching mechanisms for multi-stream packet scanning systems. In Proceedings of Field Programmable Logic and Application, Apr. 2004.
[19] L. Tan and T. Sherwood. A high throughput string matching architecture for intrusion detection and prevention. In Proceedings of the International Symposium on Computer Architecture, June 2005.
[20] N. Tuck, T. Sherwood, B. Calder, and G. Varghese. Deterministic memory-efficient string matching algorithms for intrusion detection. In Proceedings of IEEE Infocom, Mar. 2004.
[21] S. Wu and U. Manber. Agrep – a fast approximate pattern-matching tool. In Proceedings of Usenix Conference, pages 153–162, 1992.