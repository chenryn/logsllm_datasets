址，所以 C/C++的指针可以指向常量，但是无法指向宏。 
函数最后使用了“&”/与操作符。根据 C 语言有关标准，my_rand()函数的返回值应当介于 0～32767
之间。如果您有意生成 32 位的伪随机数，那么就不必在此处进行与运算。 
指令清单 20.1  Optimizing MSVC 2013 
_BSS     SEGMENT 
_rand_state DD  01H DUP (?) 
_BSS     ENDS 
_init$ = 8 
_srand  PROC 
  mov     eax, DWORD PTR _init$[esp-4] 
  mov     DWORD PTR _rand_state, eax 
  ret     0 
_srand  ENDP 
_TEXT   SEGMENT 
_rand   PROC 
  imul    eax, DWORD PTR _rand_state, 1664525 
① 多数随机函数都采用梅森旋转算法（Mersenne twister）。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 20 章  线性同余法与伪随机函数 
305 
  add     eax, 1013904223         ; 3c6ef35fH 
  mov     DWORD PTR _rand_state, eax 
  and     eax, 32767              ; 00007fffH 
  ret     0 
_rand   ENDP 
_TEXT   ENDS 
编译器把源代码中的宏直接替换为宏所绑定的常量。这个例子证明。编译器不会给宏单独分配内存。
my_srand()函数直接把输入值传递给内部的 rand_state 变量。 
此后，my_rand()函数接收了这个值，以此计算 rand_state。在调整了它的宽度之后，把返回值保留在
EAX 寄存器里。 
更为详尽的计算方法可参见如下所示的非优化编译而生成的程序。 
指令清单 20.2  Non-optimizing MSVC 2013 
_BSS     SEGMENT 
_rand_state DD  01H DUP (?) 
_BSS     ENDS 
_init$ = 8 
_srand  PROC 
  push    ebp 
  mov     ebp, esp 
  mov     eax, DWORD PTR _init$[ebp] 
  mov     DWORD PTR _rand_state, eax 
  pop     ebp 
  ret     0 
_srand  ENDP 
_TEXT   SEGMENT 
_rand   PROC 
  push    ebp 
  mov     ebp, esp 
  imul    eax, DWORD PTR _rand_state, 1664525 
  mov     DWORD PTR _rand_state, eax 
  mov     ecx, DWORD PTR _rand_state 
  add     ecx, 1013904223         ; 3c6ef35fH 
  mov     DWORD PTR _rand_state, ecx 
  mov     eax, DWORD PTR _rand_state 
  and     eax, 32767               ;00007 fffH 
  pop     ebp 
  ret     0 
_rand   ENDP 
_TEXT   ENDS 
20.2 x64 
x64 的程序与 x86 的程序几乎相同。因为函数的返回值属于 int 型数据，所以它没有使用 64 位寄存器，
而是使用了 32 位寄存器的助记符。但是，my_srand()函数从 ECX 寄存器获取的所需参数，没有通过栈读
取参数，这构成了 64 位程序的显著特征。 
指令清单 20.3  Optimizing MSVC 2013 x64 
_BSS     SEGMENT 
rand_state DD   01H DUP (?) 
_BSS     ENDS 
init$ = 8 
my_srand PROC 
; ECX = input argument 
  mov      DWORD PTR rand_state, ecx 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
306 
逆向工程权威指南（上册） 
  ret      0 
my_srand ENDP 
_TEXT   SEGMENT 
my_rand PROC 
  imul     eax, DWORD PTR rand_state, 1664525  ; 0019660dH 
  add      eax, 1013904223  
; 3c6ef35fH 
  mov      DWORD PTR rand_state, eax 
  and      eax, 32767  
; 00007fffH 
  ret      0 
my_rand ENDP 
_TEXT ENDS 
GCC 生成的程序与此类似。 
20.3 32 位 ARM 
指令清单 20.4  Optimizing Keil 6/2013 (ARM mode) 
my_srand PROC 
  LDR       r1,|L0.52|  ; load pointer to rand_state 
  STR       r0,[r1,#0]  ; save rand_state 
  BX        lr 
  ENDP 
my_rand PROC 
  LDR       r0,|L0.52|  ; load pointer to rand_state 
  LDR       r2,|L0.56|  ; load RNG_a 
  LDR       r1,[r0,#0]  ; load rand_state 
  MUL       r1,r2,r1 
  LDR       r2,|L0.60|  ; load RNG_c 
  ADD       r1,r1,r2 
  STR       r1,[r0,#0]  ; save rand_state 
; AND with 0x7FFF: 
  LSL       r0,r1,#17 
  LSR       r0,r0,#17 
  BX        lr 
  ENDP 
|L0.52| 
  DCD       ||.data|| 
|L0.56| 
  DCD       0x0019660d 
|L0.60| 
  DCD       0x3c6ef35f 
  AREA ||.data||, DATA, ALIGN=2 
rand_state 
  DCD       0x00000000 
ARM 模式的单条指令本来就是 32 位 opcode，所以单条指令不可能容纳得下 32 位常量。因此，Keil
单独开辟了一些空间来存储常量，再通过额外的指令读取它们。 
值得关注的是，常量 0x7fff 也无法封装在单条指令之中。Keil 把 rand_state 左移 17 位之后再右移 17
位，这相当于 C/C++程序中的“(rand_state>17”语句。虽然看上去这是画蛇添足，但是它清除了寄
存器的高 17 位，保留了低 15 位数据，与源代码的功能相符。 
Keil 优化编译而生成的程序与此雷同，本文不再单独介绍。 
20.4 MIPS 
指令清单 20.5  Optimizing GCC 4.4.5 (IDA) 
my_srand: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 20 章  线性同余法与伪随机函数 
307 
; store $a0 to rand_state: 
lui     $v0, (rand_state >> 16) 
jr      $ra 
sw      $a0, rand_state 
my_rand: 
; load rand_state to $v0: 
lui     $v1, (rand_state >> 16) 
lw      $v0, rand_state 
or      $at, $zero  ; load delay slot 
; multiplicate rand_state in $v0 by 1664525 (RNG_a): 
sll     $a1, $v0, 2 
sll     $a0, $v0, 4 
addu    $a0, $a1, $a0 
sll     $a1, $a0, 6 
subu    $a0, $a1, $a0 
addu    $a0, $v0 
sll     $a1, $a0, 5 
addu    $a0, $a1 
sll     $a0, 3 
addu    $v0, $a0, $v0 
sll     $a0, $v0, 2 
addu    $v0, $a0 
; add 1013904223 (RNG_c) 
; the LI instruction is coalesced by IDA from LUI and ORI 
li      $a0, 0x3C6EF35F 
addu    $v0, $a0 
; store to rand_state: 
sw      $v0, (rand_state & 0xFFFF)($v1) 
jr      $ra 
andi    $v0, 0x7FFF ; branch delay slot 
在上述程序中，常量只有 0x3C6EF35F （即 1013904223）。另一个值为 1664525 的常量去哪了？ 
编译器通过位移和加法运算实现了“乘以 1664525”的运算。我们假设编译器自行生成了以下函数： 
#define RNG_a 1664525 
int f (int a)  
{ 
         return a*RNG_a; 
}  
那么，上述程序的汇编指令应当如下所示。 
指令清单 20.6  Optimizing GCC 4.4.5 (IDA) 
f: 
sll     $v1, $a0, 2 
sll     $v0, $a0, 4 
addu    $v0, $v1, $v0 
sll     $v1, $v0, 6 
subu    $v0, $v1, $v0 
addu    $v0, $a0 
sll     $v1, $v0, 5 
addu    $v0, $v1 
sll     $v0, 3 
addu    $a0, $v0, $a0 
sll     $v0, $a0, 2 
jr      $ra 
addu    $v0, $a0, $v0 ; branch delay slot 
我们确实可以在可执行程序中找到对应的指令！ 
MIPS 的重新定位 
本节重点介绍寄存器与内存交换数据的具体方法。在展现 MIPS 程序的细节方面，IDA 略有不足（“智能”
整理得太严重）。因此本文使用 objdump 程序，分别观测到汇编层面的指令清单及重定位表（relocation list）。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
308 
逆向工程权威指南（上册） 
指令清单 20.7  Optimizing GCC 4.4.5 (objdump) 
# objdump -D rand_O3.o 
... 
00000000 : 
   0:   3c020000     
lui     v0,0x0 
   4:   03e00008     
jr      ra 
   8:   ac440000     
sw      a0,0(v0) 
0000000c : 
   c:   3c030000     
lui     v1,0x0 
  10:   8c620000     
lw      v0,0(v1) 
  14:   00200825     
move    at,at 
  18:   00022880     
sll     a1,v0,0x2 
  1c:   00022100     
sll     a0,v0,0x4 
  20:   00a42021     
addu    a0,a1,a0 
  24:   00042980     
sll     a1,a0,0x6 
  28:   00a42023     
subu    a0,a1,a0 
  2c:   00822021     
addu    a0,a0,v0 
  30:   00042940     
sll     a1,a0,0x5 
  34:   00852021     
addu    a0,a0,a1 
  38:   000420c0     
sll     a0,a0,0x3 
  3c:   00821021     
addu    v0,a0,v0 
  40:   00022080     
sll     a0,v0,0x2 
  44:   00441021     
addu    v0,v0,a0 
  48:   3c043c6e     
lui     a0,0x3c6e 
  4c:   3484f35f     
ori     a0,a0,0xf35f 
  50:   00441021     
addu    v0,v0,a0 
  54:   ac620000     
sw      v0,0(v1) 
  58:   03e00008     
jr      ra 
  5c:   30427fff     
andi    v0,v0,0x7fff 
... 
# objdump -r rand_O3.o 
... 
RELOCATION RECORDS FOR [.text]:  
OFFSET   TYPE                VALUE 
00000000 R_MIPS_HI16       .bss 
00000008 R_MIPS_LO16       .bss 
0000000c R_MIPS_HI16       .bss 
00000010 R_MIPS_LO16       .bss 
00000054 R_MIPS_LO16       .bss 
... 
函数 my_srand()两次出现了 relocation 现象。第一次出现在地址 0 处，其类型为 R_MIPS_HI16。第二处出
现在地址 8 处，类型为 R_MIPS_L016。这意味着.bss 段的起始地址要写到地址为 0、8（分别为 16 位的高、低
地址）的指令中去。 
位于.bss 段起始位置的值，是变量 rand_state。 
在前几条 LUI 和 SW 的指令中，某些操作符是零。因为编译器在编译阶段(complier)还不能确定这些值，所以
此时把它空了出来。编译器将会在链接阶段（linker）处理这些数据，把地址的高地址位传递给 LUI 指令的相应操
作符中，并把低地址位传递给 SW 指令。SW 指令会对地址的低地址位和$V0 寄存器的高地址位进行加权求和。 
有了上述概念之后我们就不难理解 my_rand()函数中的重定位：重定位标记 R_MIPS_H16 告诉 linker
程序“要把.bss 段地址的高地址位传递给 LUI 指令”。所以变量 rand_state 地址的高地址位将会存储在$V1
寄存器。地址为 0x10 的 LW 指令再把变量地址的低半部分读出来，然后加到$V1 寄存器中。地址为 0x54
的 SW 指令再次进行这种求和，把新的数值传递给全局变量 rand_state。 
在读取 MIPS 程序的重定位信息之后，IDA 程序会把数据与指令进行智能匹配。因此我们无法在 IDA
中看到这些原始的汇编指令。不过，无论 IDA 是否显示它们，重定位信息确实存在。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 20 章  线性同余法与伪随机函数 
309 
20.5 本例的线程安全改进版 
请参见本书 65.1 节查询本例的线程安全（thread-safe）改进版。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 2211 章
章    结
结    构
构    体
体  
在C/C++的数据结构里结构体（structure）是由一系列数据简单堆积而成的数据类型。结构体中的各项
数据元素，可以是相同类型的数据、也可以是不同类型的数据。
①
21.1 MSVC: systemtime 
本节以 Win32 描述系统时间的 SYSTEMTIME 结构体为例。 
库函数对它的定义如下
②
① 又称为“异构容器/heterogeneous container”。 
② https://msdn.microsoft.com/en-us/library/ms724950(VS.85).aspx。 
。 
指令清单 21.1  WinBase.h 
typedef struct _SYSTEMTIME { 
  WORD wYear; 
  WORD wMonth; 
  WORD wDayOfWeek; 
  WORD wDay; 
  WORD wHour; 
  WORD wMinute; 
  WORD wSecond; 
  WORD wMilliseconds; 
} SYSTEMTIME, *PSYSTEMTIME; 
根据上述声明，获取系统时间的程序大致如下： 
#include  
#include  
void main()  
{ 
    SYSTEMTIME t; 
    GetSystemTime (&t); 
    printf ("%04d-%02d-%02d %02d:%02d:%02d\n", 
        t.wYear, t.wMonth, t.wDay, 
        t.wHour, t.wMinute, t.wSecond); 
    return; 
}; 
使用 MSVC 2010（启用/GS-选项）编译这个程序，可得如下所示的代码。 
指令清单 21.2  MSVC 2010 /GS- 
_t$ = -16 ; size = 16 
_main      PROC 
     push    ebp 
     mov     ebp, esp 
     sub     esp, 16 
     lea     eax, DWORD PTR _t$[ebp] 