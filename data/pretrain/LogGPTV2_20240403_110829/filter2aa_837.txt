### Module 1: From High-Level Languages to Running Processes

**Overview**
This module explores the journey of code from high-level languages, through assembly, to the running process. We will delve into various techniques used by malware authors to inject malicious code into legitimate processes, focusing on Portable Executable (PE) injection.

**Resources**
- [GitHub Repository](https://github.com/hasherezade/malware_training_vol1)

### Introduction
Malware often employs PE injection to evade detection and achieve its goals. This section provides an overview of PE injection techniques and their applications in malware.

#### PE Injections in Malware
- **Stages of Execution**: Malware may inject its implants into other processes at various stages.
- **Typical Goals**: Process impersonation and API hooking.
- **Avoiding Disk Writes**: To avoid detection, malware authors use manual loading techniques to avoid writing files to disk.
- **WinAPI Limitations**: The official Windows API does not support loading files from a memory buffer, only from a file.
- **Crypters**: Almost every malware crypter uses some form of PE injection. [More on Crypters](https://blog.malwarebytes.com/threat-analysis/2015/12/malware-crypters-the-deceptive-first-layer/)

### Techniques of PE Injection
#### Manual Loading of EXE File
1. **Map from Raw Format to Virtual Format**
2. **Apply Relocations**
3. **Fill Imports**
4. **Connect to PEB (Process Environment Block)**
5. **Execute the Code**: Create a new thread or redirect the execution of an existing thread.

#### Process Hollowing
1. **Map from Raw Format to Virtual Format**
2. **Apply Relocations**
3. **Fill Imports**
4. **Connect to PEB**
5. **Execute the Code**: Redirect the Entry Point

[Manual PE Loading Example](https://github.com/hasherezade/libpeconv/tree/master/run_pe)

#### Process Doppelganging
- **Map from Raw Format to Virtual Format**: Create a Section
- **Apply Relocations**
- **Fill Imports**
- **Execute the Code**: Create the process out of the Section

[Process Doppelganging Overview](https://github.com/hasherezade/process_doppelganging)

#### Transacted Hollowing
- **Overview**

#### Module Overloading
- **Concept**: An idea by @TheRealWover, with a Proof of Concept (PoC) implemented by the author.
- **Details**: Similar to DLL hollowing, but the implant is not connected to the list of modules, potentially evading detection by tools that search for typical hollowing artifacts.
- **Implementation**:
  1. Load a target DLL as `MEM_IMAGE`.
  2. Manually load the implant DLL (with imports filled).
  3. Relocate the implant to the target base.
  4. Overwrite the target image with the implant.
  5. Fetch the implantâ€™s Entry Point.
  6. Execute the implant.

[Module Overloading Implementation](https://github.com/hasherezade/module_overloading)

### Exercises
#### Exercise 1: Implementing PE Injection Techniques
- **Process Hollowing (Run PE)**: [GitHub Link](https://github.com/hasherezade/libpeconv/blob/master/run_pe)
- **Process Doppelganging**: [GitHub Link](https://github.com/hasherezade/process_doppelganging)
- **Module Overloading**: [GitHub Link](https://github.com/hasherezade/module_overloading)

By the end of this module, you will have a comprehensive understanding of how malware authors use PE injection to achieve their objectives and how to implement these techniques.