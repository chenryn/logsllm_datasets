SENSEPOST
Demystifying+Windows+Kernel+Exploitation+by+Abusing+GDI+
Objects.
Saif El-Sherei
SENSEPOST
#Whoami
SENSEPOST
Why?
SENSEPOST
What?
SENSEPOST
• Abusing two types of GDI Objects, to gain 
ring0 exploit primitives.
• Analysing two+N-Days+(MS16-098,+MS17-
017??),+by+using+these+techniques.
SENSEPOST
Introduction
https://github.com/sensepost/gdi-
palettes-exp
SENSEPOST
Kernel Pool
SENSEPOST
Kernel Pool: Allocation Dynamics.
SENSEPOST
Kernel Pool: Allocation Dynamics.
Pool+Page
Size+0x100
First+Chunk
Third
Chunk
Second
Chunk
SENSEPOST
Kernel Pool Spraying / Feng-Shui
SENSEPOST
Kernel Pool: Kernel Pool Spraying / Feng-Shui
• Get+Pool+memory+in+deterministic+state.
• Done+using+series+of+allocations+/+de-allocations.
• Create+memory+holes+between+user+controlled+
object.
• Hopefully+vulnerable+object+will+be+allocated+to+
one+of+these+memory+holes.
SENSEPOST
Kernel Pool Corruption
SENSEPOST
Kernel Pool Corruption Integer Overflows
0"######80 + 0"81 = 0"00000001(? ? ? ? ?
Actually
0"0100000001
=
>+32-bit+wide+register(4+Bytes)
Integer+
truncated
Most+Significant
Byte+Ignored(0x01)
0"1
=
X86+Integer+Overflow
SENSEPOST
Kernel Pool Corruption Integer Overflows
Linear Overflows
SENSEPOST
Kernel Pool Corruption Integer Overflows
Out-of-Bounds Write
SENSEPOST
How?
SENSEPOST
Abusing GDI Objects 
For ring0 Exploit Primitives
SENSEPOST
Abusing GDI Objects for ring0 Exploit 
Primitives: Memory Layout
SENSEPOST
Abusing GDI Objects for ring0 Exploit 
Primitives: Relative Memory read/write
SENSEPOST
Abusing GDI Objects for ring0 Exploit 
Primitives: Relative Memory read/write
SENSEPOST
Abusing GDI Objects 
Bitmaps
Shamelessly+
ripped+from+b33f+
@FuzzySec :D
SENSEPOST
Abusing GDI Objects: Bitmaps (_SURFOBJ) 
Structure
Object+type+_SURFOBJ+
PoolTag Gh?5,+Gla5
SENSEPOST
Abusing GDI Objects: Bitmaps (_SURFOBJ) 
KAlloc
Allocate+2000+Bitmaps
for+(int y+=+0;+y+palNumEntries =+0x1E3;
lPalette->palVersion =+0x0300;
for+(int k+=+0;+k++XEPALOBJ::ulSetEntries
(checks+the+pTransCurrent,+and+pTransOld)
SENSEPOST
Abusing GDI Objects: Palettes (_XEPALOBJ) 
Technique Restrictions (SetPaletteEntries)
SetPaletteEntries >+NTSetPaletteEntries >+GreSetPaletteEntries
SENSEPOST
Abusing GDI Objects: Palettes (_XEPALOBJ) 
Technique Restrictions (AnimatePalette)
*pFirstColor most+significant+byte+must+be+ODD+changes.
MSDN:+“The AnimatePalette function+only+entries+with+the+
PC_RESERVED+flag+set+in+the+corresponding palPalEntry member+of+
the LOGPALETTE structure.”
SENSEPOST
EPROCESS SYSTEM
Token Stealing
SENSEPOST
EPROCESS SYSTEM Token Stealing
• Each+running+process+on+a+system,+is+represented+by+an+_EPROCESS+
structure+in+the+kernel.
• This+structure+contains+several+interesting+members,+such+as:+
ImageName,+Token,+ActiveProcessLinks,+and+UniqueProcessId.
• The+offsets+to+these+members+differs+from+one+OS+version+to+
another.
SENSEPOST
EPROCESS SYSTEM Token Stealing
Game Plan
Intial SYSTEM+process+EPROCESS+
kernel+address.
Arbitrary+read+primitive+to+get+Token+and+ActivePorcessLinks offsets
ActiveProcessLinks.Flink.UniqueProcessId =+CurrentProcess PID
User:+
ntoskrn!PsInitialSystemProcess – ntoskrn
base
System:+
Loaded+ntoskrn base++
PsInitialSystemProcess offset
Arbitrary+write+primitive+to+replace+Current+Process+Token+with+SYSTEM+one.
SENSEPOST
MS17-017 ENGBRUSHOBJ 
Win32k!EngRealizeBrush
Integer Overflow Leading To
OOB Write
SENSEPOST
MS17-017: Win32k!EngRealizeBrush Integer 
Overflow - Diffing the Patch
• MS17-017:+March+2017
• Win32k!EngRealizeBrush
SENSEPOST
MS17-017: Win32k!EngRealizeBrush Integer 
Overflow – Triggering the Overflow
CreatePatternBrush >+PatBlt bitmap.bitsperpixel)
x+=+x+/+2^3
y+=+x+*+bitmap.height
result+=+y+++0x44
SENSEPOST
MS17-017: Win32k!EngRealizeBrush Integer 
Overflow – Triggering the Overflow
PALLOCMEM(Result+0x40)
0"100000010( − 0"40( − 0"44 = 0"######8,
0"######8, = 0"8,( ∗ 0"1.41.41
/012(∗/01
/03/
( =+0"23
HBITMAP+bitmap+=+CreateBitmap(0x23,+0x1d41d41,+1,+1,+NULL);
SENSEPOST
MS17-017: Win32k!EngRealizeBrush Integer 
Overflow – Triggering the Overflow
OOB+write+0x00000006+to+[esi+0x3C]
SENSEPOST
MS17-017: Win32k!EngRealizeBrush Integer 
Overflow – Stars Alignment
•
Why+ 0x10+size+allocation??+Write+to+[esi+3c]+
Allocated+object+size+(0x10)+++Bitmap+_POOL_HEADER+size(0x8)+++_BASE_OBJECT+
size+(0x10)++++_SURFOBJ->height+(0x14)+=+OOB+write+offset+(0x3C)
OPTIONS+
Use+Extended+Bitmap+as+
Manager+and+use+a+second+
Bitmap+as+Worker
Use+Extended+Bitmap+as+
Manager+and+Palette+
Object+as+Worker
Use+Extended+Bitmap+to+
increase+size+of+
Manager+Palette+and+
use+the+Manager+
Palette+to+control+a+
Worker+one.
SENSEPOST
MS17-017: Win32k!EngRealizeBrush Integer 
Overflow – Kernel Pool Spray
for+(int y+=+0;+y+palNumEntries =+0x1E3;
lPalette->palVersion =+0x0300;
//+for+allocations+bigger+than+0x98+its+Gh08+for+less+its+always+0x98+and+the+tag+is+Gla18
for+(int k+=+0;+k++0x6F8+- 1)+{
hManager =+bitmaps[i];
break;
}
}
sizlBitmap before+
overflow
Extended+sizlBitmap after+overflow
SENSEPOST
MS17-017: Win32k!EngRealizeBrush Integer 
Overflow – Abusing Palette Objects