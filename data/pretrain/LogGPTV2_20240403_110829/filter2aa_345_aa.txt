# SENSEPOST: Demystifying Windows Kernel Exploitation by Abusing GDI Objects

## Presenter
- **Saif El-Sherei**
- **SENSEPOST**

## Overview
- **Whoami**: Introduction to the presenter and the topic.
- **Why?**: The importance of understanding kernel exploitation techniques.
- **What?**: Focus on abusing two types of GDI (Graphics Device Interface) objects to gain ring0 exploit primitives. Analysis of two N-Days (MS16-098, MS17-017) using these techniques.

## Introduction
- **GitHub Repository**: [GDI Palettes Exploit](https://github.com/sensepost/gdi-palettes-exp)

## Kernel Pool
### Allocation Dynamics
- **Pool Page Size**: 0x100
- **Chunks**:
  - First Chunk
  - Second Chunk
  - Third Chunk

### Kernel Pool Spraying / Feng-Shui
- **Objective**: Get pool memory into a deterministic state.
- **Technique**:
  - Use a series of allocations and de-allocations.
  - Create memory holes between user-controlled objects.
  - Hope that a vulnerable object will be allocated to one of these memory holes.

## Kernel Pool Corruption
### Integer Overflows
- **Example**:
  - `0x######80 + 0x81 = 0x00000001` (Truncated)
  - Actually, `0x0100000001` is truncated to `0x01` in a 32-bit wide register.
  - This results in an X86 integer overflow.

### Linear Overflows
- **Out-of-Bounds Write**: Techniques to write beyond the bounds of an object.

## How?
### Abusing GDI Objects for ring0 Exploit Primitives
- **Memory Layout**: Understanding the memory layout of GDI objects.
- **Relative Memory Read/Write**: Techniques for reading and writing relative memory.

### Bitmaps
- **_SURFOBJ Structure**:
  - **Object Type**: _SURFOBJ
  - **Pool Tag**: Gh?5, Gla5
- **KAlloc**: Allocate 2000 bitmaps.
- **Code Example**:
  ```c
  lPalette->palNumEntries = 0x1E3;
  lPalette->palVersion = 0x0300;
  for (int k = 0; k < 0x1E3; k++) {
    // Set palette entries
  }
  ```

### Palettes (_XEPALOBJ)
- **Technique Restrictions**:
  - **SetPaletteEntries**: NTSetPaletteEntries > GreSetPaletteEntries
  - **AnimatePalette**: Only changes entries with the PC_RESERVED flag set.

## EPROCESS SYSTEM Token Stealing
- **_EPROCESS Structure**:
  - Represents each running process in the kernel.
  - Contains members like ImageName, Token, ActiveProcessLinks, and UniqueProcessId.
  - Offsets differ across OS versions.
- **Game Plan**:
  - Initial SYSTEM process EPROCESS kernel address.
  - Arbitrary read primitive to get Token and ActiveProcessLinks offsets.
  - Replace the current process token with the SYSTEM token.

## MS17-017: Win32k!EngRealizeBrush Integer Overflow
### Diffing the Patch
- **Patch Date**: March 2017
- **Function**: Win32k!EngRealizeBrush

### Triggering the Overflow
- **CreatePatternBrush and PatBlt**:
  - Calculate `result` using `bitmap.bitsperpixel`.
  - `x = x / 2^3`
  - `y = x * bitmap.height`
  - `result = y + 0x44`
- **Code Example**:
  ```c
  HBITMAP bitmap = CreateBitmap(0x23, 0x1d41d41, 1, 1, NULL);
  ```

### Out-of-Bounds Write
- **Write 0x00000006 to [esi+0x3C]**.

### Stars Alignment
- **Why 0x10 size allocation?**:
  - Allocated object size (0x10) + Bitmap _POOL_HEADER size (0x8) + _BASE_OBJECT size (0x10) + _SURFOBJ->height (0x14) = OOB write offset (0x3C).
- **Options**:
  - Use Extended Bitmap as Manager and a second Bitmap as Worker.
  - Use Extended Bitmap as Manager and Palette Object as Worker.
  - Use Extended Bitmap to increase the size of Manager Palette and control a Worker Palette.

### Kernel Pool Spray
- **Code Example**:
  ```c
  for (int y = 0; y < 0x6F8 - 1) {
    hManager = bitmaps[i];
    break;
  }
  ```
- **Extended sizlBitmap after overflow**.

### Abusing Palette Objects
- **Further details on how to abuse Palette Objects for exploitation**.

This document provides a structured and professional overview of the presentation, making it easier to follow and understand.