    data    dynamic  named.ca  named.empty    named.localhost    named.loopback  slaves
    ```
5.  使用您的 forward 区参数创建 `/var/named/example.com.zone`{.literal}
    文件：
    ``` literallayout
    $TTL    86400
    @	IN	SOA	example.com.	root (
    		42         ; serial
    		3H         ; refresh
    		15M        ; retry
    		1W         ; expiry
    		1D )       ; minimum
    	IN	NS	ns.example.com.
    ns              IN A            192.0.2.1
    station1        IN A            192.0.2.101
    station2        IN A            192.0.2.102
    station3        IN A            192.0.2.103
    ```
6.  使用您的反向区参数创建 `/var/named/example.com.rzone`{.literal}
    文件：
    ``` literallayout
    $TTL    86400
    @	IN	SOA	example.com.	root.example.com. (
    		1997022700 ; serial
    		28800      ; refresh
    		14400      ; retry
    		3600000    ; expire
    		86400 )    ; minimum
    	IN	NS	ns.example.com.
    101     IN      PTR     station1.example.com.
    102     IN      PTR     station2.example.com.
    103     IN      PTR     station3.example.com.
    ```
7.  在区域文件中设置安全权限：
    ``` literallayout
    # chown root:named /var/named/example.com.zone /var/named/example.com.rzone
    # chmod 640 /var/named/example.com.zone /var/named/example.com.rzone
    ```
8.  重启 BIND：
    ``` literallayout
    # systemctl restart named
    ```
:::
::: itemizedlist
**验证步骤**
-   验证转发区文件：
    ``` literallayout
    # named-checkzone example.com /var/named/example.com.zone
    zone example.com/IN: loaded serial xxxxxxx
    OK
    ```
-   验证反向区文件：
    ``` literallayout
    # named-checkzone 2.0.192.in-addr.arpa /var/named/example.com.rzone
    zone 2.0.192.in-addr.arpa/IN: loaded serial xxxxxxx
    OK
    ```
-   验证配置：
    ``` literallayout
    # named-checkconf /etc/named.conf
    ```
    如果配置正确，命令不会返回任何结果。
:::
:::
:::
[]{#getting-started-with-dpdk_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#getting-started-with-dpdk_configuring-and-managing-networking.html#getting-started-with-dpdk_configuring-and-managing-networking}第 50 章 DPDK 入门 {.title}
:::
Data Plane Development
Kit（DPDK）提供库和网络驱动来加快用户空间中的软件包处理速度。
管理员使用 DPDK，例如，在虚拟机中使用单一根 I/O
虚拟化（SR-IOV）来减少延迟并增加 I/O 吞吐量。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
红帽不支持实验性的 DPDK API。
:::
::: section
::: titlepage
# []{#getting-started-with-dpdk_configuring-and-managing-networking.html#installing-the-dpdk-package_getting-started-with-dpdk}安装 dpdk 软件包 {.title}
:::
这部分论述了如何安装 `dpdk`{.literal} 软件包。
::: itemizedlist
**先决条件**
-   安装了红帽企业版 Linux。
-   为主机分配了有效的订阅。
:::
::: itemizedlist
**步骤**
-   使用 `dnf`{.literal} 工具安装 `dpdk`{.literal} 软件包：
    ``` literallayout
    # dnf install dpdk
    ```
:::
:::
::: section
::: titlepage
# []{#getting-started-with-dpdk_configuring-and-managing-networking.html#_additional_resources_7}其他资源 {.title}
:::
::: itemizedlist
-   [网络适配器 Fast Datapath
    功能支持列表](https://access.redhat.com/articles/3538141){.link}
:::
:::
:::
[]{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking}第 51 章 了解 RHEL 中的 eBPF 网络功能 {.title}
:::
扩展的 Berkeley Packet
过滤器（eBPF）是一个内核中的虚拟机，允许在内核空间中执行代码。此代码运行在一个受限的沙箱环境中，仅可访问有限功能集。
在网络中，您可以使用 eBPF 来补充或替换内核数据包处理。根据您使用的
hook，eBPF 程序有：
::: itemizedlist
-   对元数据的读和写的访问权限
-   可以查找套接字和路由
-   可以设置套接字选项
-   可以重定向数据包
:::
::: section
::: titlepage
# []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#ref_overview-of-networking-ebpf-features-in-rhel_assembly_understanding-the-ebpf-features-in-rhel}RHEL 中网络 eBPF 功能概述 {.title}
:::
您可以将扩展的 Berkeley Packet Filter（eBPF）联网程序附加到 RHEL
中的以下 hook:
::: itemizedlist
-   Express Data
    Path(XDP)：在内核网络堆栈处理它们前提供对接收的数据包的早期访问。
-   `TC`{.literal} eBPF 分类器：提供对入口和出口上的强大的数据包处理。
-   控制组版本 2(cgroup
    v2)：启用过滤和覆盖控制组中程序执行的基于套接字的操作。
-   套接字过滤：启用对从套接字接收的数据包进行过滤。这个功能也可用于经典
    Berkeley Packet Filter（cBPF），但已扩展为支持 eBPF 程序。
-   流解析器：启用将流分成单独的消息、过滤并将其重定向到套接字。
-   `SO_REUSEPORT`{.literal} 套接字选择：提供来自 `reuseport`{.literal}
    套接字组的接收套接字的可编程选择。
-   Flow dissector：允许覆盖内核在某些情况下解析数据包标头的方式。
-   TCP 阻塞控制回调：启用实施自定义 TCP 阻塞控制算法。
-   带有封装的路由： 允许创建自定义隧道封装。
:::
请注意，红帽并不支持 RHEL 中的所有 eBPF 功能，如下所述。有关详情和独立
hook 的支持状态，请参阅 [RHEL 9
发行注记](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/){.link}
和以下概述。
### []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#_xdp}XDP
您可以将 `BPF_PROG_TYPE_XDP`{.literal}
类型的程序附加到网络接口。然后，在内核网络堆栈开始处理之前，内核会在接收的数据包上执行该程序。这在某些情况下允许快速数据包转发，如实现快速数据包丢弃，以防止分布式服务（DDoS）攻击，并为负载平衡场景快速数据包重定向。
您还可以使用 XDP 进行不同类型的数据包监控和抽样。内核允许 XDP
程序修改数据包，并将其传送到内核网络堆栈进行进一步处理。
以下的 XDP 模式可用：
::: itemizedlist
-   native(driver)XDP：内核在数据包接收期间从最早的可能点执行该程序。目前，内核无法解析数据包，因此无法使用内核提供的元数据。这个模式要求网络接口驱动程序支持
    XDP，但并非所有驱动程序都支持这种原生模式。
-   通用 XDP：内核网络栈在进程早期执行 XDP
    程序。此时内核数据结构已被分配，数据包已被预先处理。如果数据包被丢弃或重定向，与原生模式相比，这需要大量开销。但是，通用模式不需要支持网络接口驱动，它可适用于所有网络接口。
-   Offloaded XDP：内核在网络接口而不是主机 CPU 上执行 XDP
    程序。请注意，这需要特定的硬件，这个模式中只有某些 eBPF 功能可用。
:::
在 RHEL 中，使用 `libxdp`{.literal} 库载入所有 XDP
程序。这个程序库启用系统控制的 XDP 使用。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
目前，XDP
程序有一些系统配置限制。例如：您必须禁用接收接口中某些硬件卸载功能。另外，并非所有功能都可用于支持原生模式的所有驱动程序。
:::
在 RHEL 9.0 中，红帽仅在满足以下条件时支持 XDP 功能：
::: itemizedlist
-   您可以在 AMD 或者 Intel 64 位构架中载入 XDP 程序。
-   您可以使用 `libxdp`{.literal} 库将程序加载到内核中。
-   XDP 程序不使用 XDP 硬件卸载。
:::
另外，红帽还提供以下使用 XDP 功能作为不受支持的技术预览：
::: itemizedlist
-   在 AMD 和 Intel 64 位以外的构架中载入 XDP
    程序。请注意，`libxdp`{.literal} 库不适用于 AMD 和 Intel 64
    位的构架。
-   XDP 硬件卸载。
:::
### []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#_af_xdp}AF_XDP
使用过滤并将数据包重定向到给定 `AF_XDP`{.literal} 套接字的 XDP
程序，您可以使用 `AF_XDP`{.literal}
协议系列中的一个或多个套接字快速从内核复制到用户空间。
### []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#_traffic_control}流量控制
流量控制(`tc`{.literal})子系统提供以下 eBPF 程序类型：
::: itemizedlist
-   `BPF_PROG_TYPE_SCHED_CLS`{.literal}
-   `BPF_PROG_TYPE_SCHED_ACT`{.literal}
:::
这些类型允许您在 eBPF 中编写自定义 `tc`{.literal} 分类器和
`tc`{.literal} 操作。与 `tc`{.literal}
生态系统的部分一起，这为强大的数据包处理提供了功能，也是一些容器联网编配解决方案的核心部分。
在大多数情况下，只有类符被使用，与 direct-action 标记一样，eBPF
分类器可以直接从同一 eBPF 程序执行操作。`clsact`{.literal} Queueing
Discipline（`qdisc`{.literal}）已设计在入口端启用此功能。
请注意，使用一个流 Unsector eBPF 程序可能会影响其他 `qdiscs`{.literal}
和 `tc`{.literal} 类器（如 `flower`{.literal}）的操作。
### []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#_socket_filter}套接字过滤器
一些实用程序会使用或在过去使用了 classic Berkeley Packet
Filter（cBPF）过滤套接字上接收到的数据包。例如，`tcpdump`{.literal}
实用程序允许用户指定表达式，`tcpdump`{.literal} 然后会把它转换为 cBPF
代码。
作为 cBPF 的替代方案，内核允许 `BPF_PROG_TYPE_SOCKET_FILTER`{.literal}
类型的 eBPF 程序达到同样目的。
### []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#_control_groups}控制组群
在 RHEL 中，您可以使用多种 eBPF 程序，供您附加到 cgroup。当给定 cgroup
中的某个程序执行某个操作时，内核会执行这些程序。请注意，您只能使用
cgroups 版本 2。
RHEL 中提供以下与网络相关的 cgroup eBPF 程序：
::: itemizedlist
-   `BPF_PROG_TYPE_SOCK_OPS`{.literal} ：内核在各种 TCP
    事件上调用该程序。程序可以调整内核 TCP 堆栈的行为，包括自定义 TCP
    标头选项等。
-   `BPF_PROG_TYPE_CGROUP_SOCK_ADDR`{.literal}: 内核会在
    `connect`{.literal}, `bind`{.literal}, `sendto`{.literal},
    `recvmsg`{.literal}, `getpeername`{.literal}, 和
    `getsockname`{.literal} 操作期间调用这个程序。该程序允许更改 IP
    地址和端口。当您在 eBPF
    中实施基于套接字的网络地址转换(NAT)时，这很有用。
-   `BPF_PROG_TYPE_CGROUP_SOCKOPT`{.literal}: 内核会在
    `setsockopt`{.literal} 和 `getsockopt`{.literal}
    操作期间调用这个程序，并允许修改选项。
-   `BPF_PROG_TYPE_CGROUP_SOCK`{.literal}
    ：内核在套接字创建、套接字释放和绑定到地址时调用该程序。您可以使用这些程序来允许或拒绝操作，或者只检查套接字创建统计信息。
-   `BPF_PROG_TYPE_CGROUP_SKB`{.literal}
    ：该程序在入口和出口中过滤单个数据包，并可以接受或拒绝数据包。
-   `BPF_PROG_TYPE_CGROUP_SYSCTL`{.literal}
    ：该程序允许过滤系统控制的访问(`sysctl`{.literal})。
:::
### []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#_stream_parser}流解析器（Stream Parser）
流解析器在添加至特殊 eBPF 映射中的一组套接字上运行。然后 eBPF
程序处理内核接收的数据包或者在那些套接字上发送。
RHEL 中提供了以下流解析程序 eBPF 程序：
::: itemizedlist
-   `BPF_PROG_TYPE_SK_SKB`{.literal}：eBPF
    程序将从套接字接收的数据包解析到单个消息中，并指示内核丢弃这些信息，或者将其发送到组中的另一套接字。
-   `BPF_PROG_TYPE_SK_MSG`{.literal} ：此程序过滤出口消息。eBPF
    程序将数据包解析到单个信息中，并批准或拒绝它们。
:::
### []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#_so_reuseport_socket_selection}SO_REUSEPORT 套接字选择
使用这个套接字选项，您可以绑定多个套接字到相同的 IP 地址和端口。如果没有
eBPF，内核会根据连接散列选择接收套接字。在
`BPF_PROG_TYPE_SK_REUSEPORT`{.literal}
程序中，选择接收套接字可以完全被编程。
### []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#_flow_dissector}dissector 流程
当内核需要在不处理全部协议解码的情况下处理数据包标头时，它们就会`取消选择`{.literal}。例如，这会在
`tc`{.literal}
子系统、多路径路由、绑定或者计算数据包散列时发生。在这种情况下，内核解析数据包的标头，并使用数据包标头中的信息填充内部结构。您可以使用
`BPF_PROG_TYPE_FLOW_DISSECTOR`{.literal}
程序替换此内部解析。请注意，您只能在 RHEL 的 eBPF 的 IPv4 和 IPv6 上分离
TCP 和 UDP。
### []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#_tcp_congestion_control}TCP 阻塞控制
您可以使用一组 `BPF_PROG_TYPE_STRUCT_OPS`{.literal} 程序（实施
`struct tcp_congestion_oops`{.literal} 回调）编写自定义 TCP
阻塞控制算法。通过这种方法的算法可以和内置内核算法一起提供给系统。
### []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#_routes_with_encapsulation}带有封装的路由
您可以将以下 eBPF 程序类型之一附加到路由表中作为隧道封装属性的路由：
::: itemizedlist
-   `BPF_PROG_TYPE_LWT_IN`{.literal}
-   `BPF_PROG_TYPE_LWT_OUT`{.literal}
-   `BPF_PROG_TYPE_LWT_XMIT`{.literal}
:::
这样的 eBPF
程序的功能仅限于特定的隧道配置，它不允许创建通用封装或封装解决方案。
### []{#assembly_understanding-the-ebpf-features-in-rhel_configuring-and-managing-networking.html#_socket_lookup}套接字查找
要绕过 `bind`{.literal} 系统调用的限制，请使用
`BPF_PROG_TYPE_SK_LOOKUP`{.literal} 类型的 eBPF
程序。这些程序可以为新的传入的 TCP 连接选择侦听套接字，或为 UDP
数据包选择一个未连接的套接字。
:::
::: section