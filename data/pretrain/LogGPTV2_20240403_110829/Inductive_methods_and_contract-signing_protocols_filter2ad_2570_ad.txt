### Waiting for a Reply

1. **T has answered a request on the O-T channel:**
   - An abort token or a resolution confirmation (res cn) is present on the O-T channel.

2. **T has not yet answered a request on the O-T channel:**
   - The request remains on the O-T channel.

### Lemma 6.4

Let \( N \) be a node in the trace \( tr \) labeled by a configuration \( S' \). Suppose that in \( S' \), \( O \) is in a state where it has requested an abort token or a resolution from \( T \) and is waiting for a reply. Then, either \( N \) is not an abort-power node or \( N \) is not a contract-power node.

### Lemma 6.5

Let \( N \) be a node in the trace \( tr \). Then, either \( N \) is not an abort-power node or \( N \) is not a contract-power node.

**Proof:**

Let \( N \) be labeled by \( S'' \). Since \( S'' \) is a reachable configuration, \( O \) must be in one of its 10 states in \( S'' \). The following cases arise:

1. **\( Oab?(pd, -) \in S'' \):** By Lemma 6.4.
2. **\( O1(pd, -) \in S'' \):** \( O \) can request an abort token from \( T \) using the rule \( Oab? \) and transition to a state \( S''' \) such that \( Oab?(pd, -) \in S''' \). The result follows from case 1 and Proposition 6.2.
3. **\( O0(pd, -) \in S'' \):** \( O \) can send \( me1 \) using the rule \( O1 \) and transition to a state \( S''' \) such that \( O1(pd, -) \in S''' \). The result follows from case 2 and Proposition 6.2.
4. **\( Ores?(pd, -) \in S'' \):** By Lemma 6.4.
5. **\( O3(pd, -) \in S'' \):** \( O \) can request a resolution from \( T \) using the rule \( Ores? \) and transition to a state \( S''' \) such that \( Ores?(pd, -) \in S''' \). The result follows from case 4 and Proposition 6.2.
6. **\( O2(pd, -) \in S'' \):** \( O \) can send \( me2 \) using the rule \( O3 \) and transition to a state \( S''' \) such that \( O3(pd, -) \in S''' \). The result follows from case 5 and Proposition 6.2.
7. **\( Oab1(pd, -) \in S'' \) or \( Oab2(pd, -) \in S'' \):** \( O \) has an abort token, and the result follows from Proposition 6.2.
8. **\( Ores1(pd, -) \in S'' \) or \( Ores2(pd, -) \in S'' \) or \( Ocom(pd, -) \in S'' \):** \( O \) has a valid contract, and the result follows from Proposition 6.2.

### Theorem 6.6

The protocol is balanced for honest \( O \).

### Extensions to Multiple Runs

The definitions and proofs of balance can be extended to multiple runs of the protocol with the following distinctions:

1. **Initial Configuration:** Instead of starting with an initial set of facts \( \Sigma \), we start with an arbitrary reachable configuration.
2. **Finite Continuation Tree:** For constructing a finite continuation tree, we also put a bound on the number of times the role generation rule can be used, along with the number of steps the intruder takes.
3. **Edge Labeling:** Each edge of the continuation tree is now labeled by the rule being used and the key of the principal involved.
4. **Removable Edges:** Any edge labeled by \( R \)'s key or a key known to the intruder is also a removable edge.
5. **Balance Definition:** The protocol is said to be balanced for honest \( O \) if, for all reachable configurations \( S \), and for all bounds on the number of steps the intruder takes and the number of times the role generation rule is used, at \( S \), \( R \) does not have both the power to abort and the power to complete.

### Balance for Honest Participants

Although not discussed here, balance for honest \( O \) when \( R \) is honest or weakly dishonest, and balance for honest \( R \) when \( O \) is honest, weakly dishonest, or strongly dishonest, can be similarly stated and proved.

### Transparent Channels and Balance

If we relax the condition of transparent channels and allow the intruder to delay messages on the channels between the participants and \( T \), the protocol is no longer balanced. This is due to the following scenario relayed by Steve Kremer and Olivier Markowitch:

1. **O sends its PCS to R:** R does not respond.
2. **O asks T for an abort request:** R sends a resolve request to \( T \).
3. **R delays requests:** To achieve an abort, \( R \) delays its resolve request until \( T \) acts on the abort request; and to achieve a valid contract, \( R \) delays the abort request.

### Representation in Linear Logic

We indicate how strategies, \( tr \setminus E \), considered in the previous section may be faithfully represented as formal derivations in linear logic [11], extending the representation of MSR traces considered in [3].

**Pure Horn Axiom:**
\[ X(x, a) \rightarrow \exists y Y(x, y, b) \]

Any ground instance of the form:
\[ X(t, a) \rightarrow \exists y Y(t, y, b) \]
is conceived of as an instruction to transform:
\[ ... \otimes X(t, a) \otimes ... \]
into:
\[ ... \otimes Y(t, d, b) \otimes ... \]
where \( d \) is a vector of fresh constants.

**Configuration Representation:**
A configuration of a system is represented as a tensor of finitely many atomic formulas. The case where all possible actions of a system should be taken into account is described with the help of branching Horn formulas of the form:
\[ X \rightarrow (Y1 \oplus Y2 \oplus ... \oplus Ym) \]

**Firing of Instructions:**
The firing of such an instruction results in the change of the "state" \( X \) either into the "state" \( Y1 \), or into the "state" \( Y2 \), or ..., or into the "state" \( Ym \). But we do not know in advance which of these \( m \) alternatives will be chosen at a given occasion [12, 13].

**Horn-like Formula:**
The case where all possible actions \( Y2, ..., Ym \) should be taken into account, with providing our own choice between \( Y1,1, ..., Y1,k \), will be described by means of a Horn-like formula of the form:
\[ X \rightarrow ((Y1,1 \& ... \& Y1,k) \oplus Y2 \oplus ... \oplus Ym) \]

**Definition 7.1:**
Let \( \Gamma \) be a set of Horn clauses. A strategy \( S \) in accordance with \( \Gamma \) is a labeled rooted tree of configurations such that each of its edges \((v, w)\) is labeled by an 'instruction' specified within \( \Gamma \), which transforms \( v \) into \( w \).

**More Precisely:**
For each vertex \( v \) with exactly \( k \geq 1 \) sons \( w1, w2, ..., wk \), the outgoing edges \((v, w1), (v, w2), ..., (v, wk)\) are labeled by pure Horn clauses with one and the same antecedent:
\[ X \rightarrow Y1,i, X \rightarrow Y2, ..., X \rightarrow Yk \]
These clauses are such that there exists a Horn clause of the form:
\[ X \rightarrow ((Y1,1 \& ... \& Y1,i \& ... \& Y1,k) \oplus Y2 \oplus ... \oplus Ym) \]
which belongs to \( \Gamma \). (Thus, we represent all possible effects at \( v \)).

**Extension of Computational Interpretation:**
We extend the comprehensive computational interpretation for Horn linear logic introduced in [12, 13]. Let us apply this approach to the case of the previous section where a strongly dishonest participant \( R \) is playing against the group \( G \) of "others," which consists of \( O \) and \( T \). Suppose that \( \alpha1, \alpha2, ..., \alpha_k \) is a list of all \( R \)'s rules; the intruder rules; and all rules in which \( Ni \) predicates occur on the list; and the list \( \beta2, \beta3, ..., \beta_m \) includes all the rules of the opponents from \( G \).

**Auxiliary Control Variables:**
Auxiliary control variables \( q, q1,1, ..., q1,k, q2, ..., qm \) are introduced. We form \( \Gamma \) in the following way. Each of the above \( \alpha_i \) of the form \((X \rightarrow Y)\) is "guarded" as:
\[ ((q1,i \otimes X) \rightarrow (q \otimes Y)) \]
Each \( \beta_j \) of the form \((X \rightarrow Y)\) is "guarded" as:
\[ ((qj \otimes X) \rightarrow (q \otimes Y)) \]
And we add the following axiom:
\[ q \rightarrow ((q1,1 \& ... \& q1,k) \oplus q2 \oplus ... \oplus qm) \]
In addition, we have to introduce a number of Horn axioms to handle the cases where certain enabling conditions are violated (a similar situation with the zero-test simulation is handled, for instance, in [13]).

**Theorem 7.1:**
Given a "goal" \( Z0 \), \( R \) has the power to get \( Z0 \) if and only if a sequent of the form:
\[ !\Gamma, q \vdash Z0 \]
is derivable in linear logic.

### Conclusions and Further Work

We have studied an optimistic two-party contract-signing protocol derived from the Garay-Jakobsson-MacKenzie (GJM) protocol [10] and the notion of abuse-free contract signing introduced in [10]. In a version suggested in [15], a fair contract-signing protocol is abuse-free if, at any stage of the protocol, any protocol participant does not have both the power to complete the contract as well as the power to abort it. We have used a multiset-rewriting formalism for protocol analysis [3] to formally state this property in terms of a certain recursive property of the protocol execution tree, which we then proved for our version of the GJM protocol by inductive methods. Our proof relies on a strong notion of fairness adopted from [10], which itself we formally stated in the multiset-rewriting formalism and proved by inductive methods. We have also shown that a version of abuse-freeness may be represented in terms of provability in a logical system, in which formal derivations correspond to full execution trees and vice versa.

Other possible forms of abuse-freeness remain to be investigated. Other desirable properties of the GJM protocol, such as non-repudiation and trusted third party accountability, still remain to be investigated as well. The latter will involve formalizing potentially dishonest or careless actions of the trusted third party. We also plan to apply our techniques to analyze other, multi-party optimistic contract-signing protocols presented in [10] and to prove their properties, including abuse-freeness.

### References

[1] N. Asokan, V. Shoup, and M. Waidner. Asynchronous protocols for optimistic fair exchange. In IEEE Symposium on Security and Privacy, pages 86–99, 1998.

[2] I. Cervesato. Typed MSR: Syntax and examples. In WITS’00. Workshop on Issues in the Theory of Security, 2000., 2000.

[3] I. Cervesato, N.A. Durgin, P.D. Lincoln, J.C. Mitchell, and A. Scedrov. A meta-notation for protocol analysis. In Proc. 12-th Annual IEEE Computer Security Foundations Workshop — CSFW’99, pages 55–69, Mordano, Italy, 1999. IEEE Computer Society Press.

[4] V. Cortier, J. Millen, and H. Ruess. Proving secrecy is easy enough. In 14-th Annual IEEE Computer Security Foundations Workshop’01, pages 97–108, 2001.

[5] S. Das and D. Dill. Successive approximation of abstract transition relations. In Sixteenth Annual IEEE Symposium on Logic in Computer Science, pages 51–58, 2001.

[6] D. Dolev and A. Yao. On the security of public-key protocols. In Proc. 22nd Annual IEEE Symp. Foundations of Computer Science, pages 350–357, 1981.

[7] S. Even. Protocol for signing contracts. In CRYPTO, pages 148–153, 1981.

[8] S. Even and Y. Yacobi. TR 175. Pages 148–153, Computer Science Dept, Technion, Israel, March, 1980.

[9] M.J. Fischer, N.A. Lynch, and M.S. Paterson. Impossibility of distributed consensus with one faulty process. JACM, 32(2):374–382, 1985.

[10] J. Garay, M. Jakobsson, and P. MacKenzie. Abuse-free optimistic contract signing. In Advances in Cryptology – CRYPTO’99, pages 449–466. Springer Lecture Notes in Computer Science, vol. 1666, 1999.

[11] J.-Y. Girard. Linear logic. Theoretical Computer Science, 50:1–102, 1987.

[12] M. Kanovich. Linear logic as a logic of computations. Annals of Pure and Applied Logic, 67:183–212, 1994.

[13] M. Kanovich. The direct simulation of Minsky machines in linear logic. In Advances in Linear Logic, volume 222, pages 123–145, London Mathematical Society Lecture Notes, 1995. Cambridge University Press.

[14] S. Kremer and J.-F. Raskin. Formal verification of non-repudiation protocols - a game approach. In Formal Methods for Computer Security (FMCS 2000), Chicago, USA, July 2000.

[15] J.C. Mitchell and V. Shmatikov. Analysis of abuse-free contract signing. In Financial Cryptography ’00, 2000.

[16] R.M. Needham and M.D. Schroeder. Using encryption for authentication in large networks of computers. Communications of the ACM, 21(12):993–999, 1978.

[17] L. Paulson. Proving properties of security protocols by induction. In Proc. 10th Computer Security Foundations Workshop, pages 70–83. IEEE Computer Society Press, 1997.

[18] V. Shmatikov and J.C. Mitchell. Analysis of a fair exchange protocol. In FLoC Workshop on Formal Methods and Security Protocols, 1999.

[19] P. Syverson, C. Meadows, and I. Cervesato. Dolev-Yao is no better than Machiavelli. In WITS’00. Workshop on Issues in the Theory of Security, 2000., 2000.

[20] V. Shmatikov and J.C. Mitchell. Finite-state analysis of two contract signing protocols. In To appear in special issue of TCS on computer security, 2001.

[21] T.Y.C. Woo and S.S. Lam. A semantic model for authentication protocols. In Proc. IEEE Symposium on Research in Security and Privacy, 1993.