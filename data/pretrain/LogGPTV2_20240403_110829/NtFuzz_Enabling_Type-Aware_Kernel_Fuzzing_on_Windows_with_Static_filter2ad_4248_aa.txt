**Title: NtFuzz: Enabling Type-Aware Kernel Fuzzing on Windows with Static Binary Analysis**

**Authors: Jaeseung Choi, Kangsu Kim, Daejin Lee, and Sang Kil Cha**

**Affiliation: KAIST**

**Contact: {jschoi17, kskim0610, djlee1592, sangkilc}@kaist.ac.kr**

**Published in: 2021 IEEE Symposium on Security and Privacy (SP)**

**DOI: 10.1109/SP40001.2021.00114**

**Abstract:**
Although it is common practice for kernel fuzzers to leverage type information of system calls, current Windows kernel fuzzers do not follow this practice because most system calls are private and largely undocumented. In this paper, we present a practical static binary analyzer that automatically infers system call types on Windows at scale. We incorporate our analyzer into NTFUZZ, a type-aware Windows kernel fuzzing framework. To our knowledge, this is the first practical fuzzing system that utilizes scalable binary analysis on a commercial off-the-shelf (COTS) OS. With NTFUZZ, we discovered 11 previously unknown kernel bugs and earned $25,000 through Microsoft's bug bounty program. These results confirm the practicality of our system as a kernel fuzzer.

**I. Introduction**
Software vulnerabilities in kernel code can lead to serious security breaches, ranging from causing a Blue Screen of Death (BSoD) to enabling unprivileged access to the kernel space, which can result in information disclosure or privilege escalation. For these reasons, major operating system vendors, such as Apple and Microsoft, offer substantial rewards—up to $15,000 and $30,000, respectively—for reporting critical vulnerabilities in their kernels [3], [57].

As a result, there has been growing research interest in kernel fuzzing in both industry and academia [18], [30], [34], [40], [41], [48], [76]–[78], [84], [91]. One key strategy in kernel fuzzing is to utilize the types and dependencies of system calls (syscalls). Since syscall arguments are often nested and interdependent, fuzzers may fail to generate meaningful test cases without recognizing the types of syscalls.

This approach is easily achieved by Linux kernel fuzzers [18], [34], [76], [91] due to the open nature of the Linux kernel. However, Windows syscalls are largely unknown and undocumented, and their conventions frequently change over time [38]. Although ReactOS [79] partially provides such information, it does not cover the latest syscalls.

To our knowledge, there is no existing Windows kernel fuzzer that generally infers type information from the ever-changing syscalls of Windows. Instead, current fuzzers mitigate the challenge by focusing on a small subset of the attack surface, such as font-related APIs [37] and the IOCTL interface [41], [74], or by relying on user-provided knowledge or harness code [25], [47], [84].

Therefore, we present NTFUZZ, a Windows kernel fuzzer that leverages static binary analysis to automatically infer syscall types. At a high level, NTFUZZ operates in two steps. First, it statically analyzes Windows system binaries—such as `kernel32.dll` and `ntdll.dll`—that invoke syscalls, and infers their argument types. Then, it uses the inferred types to fuzz the kernel by performing type-aware mutation on syscall arguments.

The key intuition behind our approach is that even though syscalls are largely undocumented on Windows, known (documented) API functions often call those syscalls through a chain of internal function calls. This means we can bridge the information gap between documented and undocumented interfaces with static analysis by propagating the knowledge from documented functions to undocumented syscalls.

Designing a scalable static analyzer for Windows system binaries is challenging due to their large size and interdependency. To statically infer syscall types, one needs to track both register and memory states while considering data flows between functions located in multiple different binaries. While there are several public tools focusing on control flow graph (CFG) recovery [28], [32], [69] and single-binary analyses [13], [23], [42], [86], [92], we are not aware of any practical binary analysis solution that performs an inter-binary and inter-procedural analysis in a scalable manner.

We overcome this challenge with a modular analysis, also known as compositional analysis [2], [15], by designing a novel abstract domain. Our analyzer constructs a parameterized summary of each function, which describes the semantics of the function. When an analyzed function is later invoked from another function, we instantiate the parameterized summary to determine the behavior of the function call. This allows us to efficiently analyze data flows and syscall types in an inter-procedural fashion while avoiding redundant computations.

With the inferred syscall type information, NTFUZZ then runs a type-aware fuzzing that launches a user application and intercepts syscalls to perform mutation on their argument values. This way, NTFUZZ can automatically fuzz a Windows kernel with minimal manual effort; it does not require users to write harness code for the syscalls to test, as in kAFL [84] or pe-afl [47].

We evaluate our system on Windows 10 and show that the type information obtained from our static analysis indeed helps find more kernel crashes. Moreover, NTFUZZ found 11 unique bugs in the latest version of Windows 10, and four CVEs were assigned at the time of writing. A total of $25,000 in bounties from Microsoft was awarded for the bugs we reported, highlighting the practical impact of our work.

**II. Background**
In this section, we provide the necessary background to understand our methodology for Windows kernel fuzzing.

**A. Windows Architecture**
Figure 1 illustrates a simplified architecture of the Windows OS. User applications access system resources, such as I/O devices, through system calls (syscalls). Typically, applications do not directly invoke syscalls but instead call high-level API functions, which internally request a syscall. For example, to invoke the `NtCreateFile` syscall, a user would normally call the `CreateFile` function in `kernel32.dll`, rather than directly invoking the syscall.

Therefore, NTFUZZ aims to automatically figure out syscall types by analyzing call chains from known API functions to undocumented functions and to syscalls. There are more than 1,600 syscalls in Windows 10, and the majority of them are not documented. Windows API functions are documented [62], [65], and their actual implementation is present in built-in system DLL files [55], which we refer to as system binaries in this paper.

Our technique statically analyzes these system binaries to infer the types of arguments passed to syscalls. Given the numerous API functions and DLL files in Windows, we focus only on the core system libraries that we manually identified (see Table I). In Windows 10 17134.1, which was used for our evaluation (§VII-B), 80.4% of the existing syscalls were invoked at least once from these binaries. Note that we can extend the list if needed, although it was sufficient for our purposes (see §VIII).

**Table I: List of System Binaries Targeted by Our Static Analysis**

| **Binary** | **Description** |
|------------|-----------------|
| `ntdll.dll` | Syscalls and APIs for native applications [56] |
| `kernel32.dll` | Management of core system resources (e.g., file) |
| `kernelbase.dll` | — |
| `win32u.dll` | — |
| `gdi32.dll` | Graphic device interface to control video displays |
| `gdi32full.dll` | — |
| `user32.dll` | Management of UI components (e.g., window) |
| `dxcore.dll*` | Interface for DirectX functionalities (*This file is present in Windows 10 starting from build 18362) |

**B. Static Program Analysis**
Static program analysis (static analysis, in short) refers to a methodology for automatically predicting the behavior of programs without running them [82]. While there is a wide spectrum of techniques, static analyses can be described using a general theoretical framework called abstract interpretation [20], [21]. In abstract interpretation, a concrete program state is approximated with an abstract domain, and a program is analyzed with abstract semantics, which subsumes the concrete semantics of the program.

In the field of static analysis, an analyzer is considered sound if it has no false negatives; if a sound analyzer reports a program as bug-free, then the safety of the program should be guaranteed. Similarly, an analyzer is precise (or complete) if it is free from false positives [67]. We note that these terms have different meanings in other fields [86]. In this paper, we will follow the traditional convention in static analysis. If the analysis result is both sound and precise, we will describe the analysis as accurate or correct.

**III. Motivation**
In this section, we motivate our research by presenting a code snippet from one of the CVEs we discovered (see §VII-E). Figure 2 shows a simplified version of CVE-2020-0792. The bug exists in the `NtUserRegisterWindowMessage` syscall, which takes a `UNICODE_STRING` pointer as input. The function validates the input fields in Line 11 to ensure that the user-provided pointer (`buf`) accesses the correct memory region. However, the function skips the entire check when the length of the buffer (`len`) is an odd value (Line 6). The problem is that the `LogError` function in Line 7 does not abort the syscall upon execution. Therefore, one can effectively bypass the safety check in Line 11 by providing an odd-length buffer.

**Figure 1: Simplified Architecture of Windows OS**

**System Process**
- User Application
- Service
- ...
- **List of System Binaries Targeted by Our Static Analysis:**
  - `ntdll.dll`
  - `kernel32.dll`
  - `kernelbase.dll`
  - `win32u.dll`
  - `gdi32.dll`
  - `gdi32full.dll`
  - `user32.dll`
  - `dxcore.dll*`

**User Mode**
- **Kernel Mode**
  - Device Driver
  - System Call Handler
  - Graphics Driver
  - ...

**Figure 2: Simplified Code Snippet of CVE-2020-0792**

```c
void NtUserRegisterWindowMessage(UNICODE_STRING *buf, int len) {
    if (len % 2 != 0) {
        LogError("Odd length buffer");
        return;
    }
    // Validate the buffer
    if (buf->Length > MAX_LENGTH || buf->Buffer == NULL) {
        LogError("Invalid buffer");
        return;
    }
    // Further processing...
}
```

**Contributions:**
1. We integrate a static binary analysis technique with Windows kernel fuzzing for the first time.
2. We present a scalable static analyzer for Windows system binaries to infer the types of Windows syscalls.
3. We introduce NTFUZZ, a type-aware fuzzing framework to test the Windows kernel with minimal manual effort.
4. We evaluate NTFUZZ on the latest Windows 10 and discuss 11 unique kernel bugs and four CVEs found.