为实现多域名扫描功能，我们可以让用户使用"-m"标志指定扫描模式，并假设所有其他参数都是域名。这里，我们告诉getopts，如果选项标志为"-m"，则应识别该选项，并且该选项应包含一个输入值。
getopts工具还会自动将任何选项的值存储到\$OPTARG变量中。我们可以将该值存储到名为MODE的变量中：
    getopts "m:" OPTION
    MODE=$OPTARG
Now if you run the shell script with an `      -m     ` flag, the script
will know that you're specifying a scan `      MODE     ` ! Note that
`      getopts     ` stops parsing arguments when it encounters an
argument that doesn't start with the `      -     ` character, so you'll
need to place the scan mode before the domain arguments when you run the
script:
现在，如果你在运行shell脚本时使用-m标志，脚本将会知道你要指定扫描模式！请注意，当getopts遇到一个不以-字符开头的参数时，它会停止解析参数，因此在运行脚本时，你需要将扫描模式放在域参数之前：
    ./recon.sh -m nmap-only facebook.com fbcdn.net
[ ]{#c05.xhtml#Page_93 .pagebreak title="93"} Next, we'll need a way to
read every domain argument and perform scans on them. Let's use loops!
Bash has two types of loops: the `      for     ` loop and the
`      while     ` loop. The `      for     ` loop works better for our
purposes, as we already know the number of values we are looping
through. In general, you should use `      for     ` loops when you
already have a list of values to iterate through. You should use
`      while     ` loops when you're not sure how many values to loop
through but want to specify the condition in which the execution should
stop.
接下来，我们需要一种方法来读取每个域参数并对它们进行扫描。让我们使用循环！Bash有两种类型的循环：for循环和while循环。为了我们的目的，for循环更加适用，因为我们已经知道了要循环遍历的值的数量。通常情况下，当你已经拥有一个值列表时，应该使用for循环进行迭代。如果您不确定要循环遍历多少个值，但想要指定执行应该停止的条件，则应该使用while循环。
Here's the syntax of a `      for     ` loop in bash. For every item in
`      LIST_OF_VALUES     `{.variable} , bash will execute the code
between `      do     ` and `      done     ` once:
以下是bash中for循环的语法。对于LIST_OF_VALUES
中的每个项，bash将执行do和done之间的代码一次：
    for i in LIST_OF_VALUES
    do
      DO SOMETHING
    done
Now let's implement our functionality by using a `      for     ` loop:
现在，让我们使用for循环来实现我们的功能：
    1 for i in "${@:$OPTIND:$#}"
    do
      # Do the scans for $i
    done
We create an array [ 1 ]{.CodeAnnotation aria-label="annotation1"} that
contains every command line argument, besides the ones that are already
parsed by `      getopts     ` , which stores the index of the first
argument after the options it parses into a variable named
`      $OPTIND     ` . The characters `      $@     ` represent the
array containing all input arguments, while `      $#     ` is the
number of command line arguments passed in. `      "${@:OPTIND:}"     `
slices the array so that it removes the `      MODE     ` argument, like
`      nmap-only     ` , making sure that we iterate through only the
domains part of our input. Array slicing is a way of extracting a subset
of items from an array. In bash, you can slice arrays by using this
syntax (note that the quotes around the command are necessary):
我们创建一个数组1，其中包含每个命令行参数，除了那些已经被getopts解析的参数。getopts将解析选项后的第一个参数的索引存储在一个名为\$
OPTIND的变量中。\$@代表包含所有输入参数的数组，而\$＃是传递的命令行参数的数量。"\$
{ @:
OPTIND：}"对数组进行切片，以便删除MODE参数（如nmap-only），确保我们只迭代输入的域部分。数组切片是一种从数组中提取子集的方法。在bash中，可以使用以下语法切片数组（注意，必须使用命令周围的引号）：
    "${INPUT_ARRAY:START_INDEX:END_INDEX}"
The `      $i     ` variable represents the current item in the argument
array. We can then wrap the loop around the code:
\$i变量代表参数数组中的当前项。然后我们可以在代码周围包装循环:
    #!/bin/bash
    PATH_TO_DIRSEARCH="/Users/vickieli/tools/dirsearch"
    nmap_scan()
    {
      nmap $DOMAIN > $DIRECTORY/nmap
      echo "The results of nmap scan are stored in $DIRECTORY/nmap."
    }
    dirsearch_scan()
    {
      $PATH_TO_DIRSEARCH/dirsearch.py -u $DOMAIN -e php --simple-report=$DIRECTORY/dirsearch
      echo "The results of dirsearch scan are stored in $DIRECTORY/dirsearch."
    }
    crt_scan()
    {
      curl "https://crt.sh/?q=$DOMAIN&output=json" -o $DIRECTORY/crt
      echo "The results of cert parsing is stored in $DIRECTORY/crt."
    }
    getopts "m:" OPTION
    MODE=$OPTARG
    for i in "${@:$OPTIND:$#}" 1
    do
      DOMAIN=$i
      DIRECTORY=${DOMAIN}_recon
      echo "Creating directory $DIRECTORY."
      mkdir $DIRECTORY
      case $MODE in
        nmap-only)
          nmap_scan
          ;;
        dirsearch-only)
          dirsearch_scan
          ;;
        crt-only)
          crt_scan
          ;;
        *)
          nmap_scan
          dirsearch_scan
          crt_scan
          ;;     
      esac
      echo "Generating recon report for $DOMAIN..."
      TODAY=$(date)
      echo "This scan was created on $TODAY" > $DIRECTORY/report
        if [ -f $DIRECTORY/nmap ];then 2
        echo "Results for Nmap:" >> $DIRECTORY/report
        grep -E "^\s*\S+\s+\S+\s+\S+\s*$" $DIRECTORY/nmap >> $DIRECTORY/report
      fi
        if [ -f $DIRECTORY/dirsearch ];then 3
        echo "Results for Dirsearch:" >> $DIRECTORY/report
        cat $DIRECTORY/dirsearch >> $DIRECTORY/report
      fi
        if [ -f $DIRECTORY/crt ];then 4
        echo "Results for crt.sh:" >> $DIRECTORY/report
        jq -r ".[] | .name_value" $DIRECTORY/crt >> $DIRECTORY/report
      fi
      done 5
The `      for     ` loop starts with the `      for     ` keyword [ 1
]{.CodeAnnotation aria-label="annotation1"} and ends with the
`      done     ` keyword [ 5 ]{.CodeAnnotation
aria-label="annotation5"} . Notice that we also added a few lines in the
report section to see if we need to generate each type of report. We
check whether the output file of an Nmap scan, a Dirsearch scan, or a
crt.sh scan exist so we can determine if we need to generate a report
for that scan type [ 2 ]{.CodeAnnotation aria-label="annotation2"} [ 3
]{.CodeAnnotation aria-label="annotation3"} [ 4 ]{.CodeAnnotation
aria-label="annotation4"} .
for循环从for关键字1开始，到done关键字5结束。请注意，我们还在报告部分添加了一些行，以查看是否需要生成每种类型的报告。我们检查Nmap扫描，Dirsearch扫描或crt.sh扫描的输出文件是否存在，以便确定我们是否需要为该扫描类型生成报告。
[ ]{#c05.xhtml#Page_95 .pagebreak title="95"} The brackets around a
condition mean that we're passing the contents into a `     `
`      test     ` command: `      [ -f $DIRECTORY/nmap ]     ` is
equivalent to `      test -f $DIRECTORY/nmap     ` .
条件周围的括号表示我们将内容传递到测试命令中：\[ -f \$DIRECTORY/nmap \]
等同于 test -f \$DIRECTORY/nmap。
The `      test     ` command evaluates a conditional and outputs either
`      true     ` or `      false     ` . The `      -f     ` flag tests
whether a file exists. But you can test for more conditions! Let's go
through some useful test conditions. The `      -eq     ` and -
`      ne     ` flags test for equality and inequality, respectively.
This returns `      true     ` if `      $3     ` is equal to
`      1     ` :
测试命令评估一个条件并输出真或假。-f
标志测试文件是否存在。但您可以测试更多的条件！让我们来看看一些有用的测试条件。-eq
和 -ne 标志分别测试相等和不相等。如果 \$3 等于1，则返回 true：
    if [ $3 -eq 1 ]
This returns `      true     ` if `      $3     ` is not equal to
`      1     ` :
这个语句返回 true 如果 3 不等于 1。
    if [ $3 -ne 1 ]
The `      -gt     ` , `      -ge     ` , `      -lt     ` , and
`      le     ` flags test for greater than, greater than or equal to,
less than, and less than or equal to, respectively:
\'-gt\'表示大于，\'-ge\'表示大于或等于，\'-lt\'表示小于，\'le\'表示小于或等于。
    if [ $3 -gt 1 ]
    if [ $3 -ge 1 ]
    if [ $3 -lt 1 ]
    if [ $3 -le 1 ]
The `      -z     ` and `      -n     ` flags test whether a string is
empty. These conditions are both true:
\"-z和-n标志测试字符串是否为空。这些条件都是真的:\"
    if [ -z "" ]
    if [ -n "abc" ]
The `      -d     ` , `      -f     ` , `      -r     ` ,
`      -w     ` , and `      -x     ` flags check for directory and file
statuses. You can use them to check the existence and permissions of a
file before your shell script operates on them. For instance, this
command returns `      true     ` if */bin* is a directory that exists:
-d、-f、-r、-w 和 -x 标记检查目录和文件状态。您可以使用它们在 shell
脚本操作文件之前检查文件的存在和权限。例如，如果 /bin
是一个存在的目录，这个命令返回 true：
    if [ -d /bin]
This one returns `      true     ` if */bin/bash* is a file that exists:
如果/bin/bash是存在的文件，则返回true。
    if [ -f /bin/bash ]
And this one returns `      true     ` if */bin/bash* is a readable
file:
如果/bin/bash是可读文件，则此命令将返回true。
    if [ -r /bin/bash ]
or a writable file:
或者可写入的文件：
    if [ -w /bin/bash ]
or an executable file:
或一个可执行文件：
    if [ -x /bin/bash ]
[ ]{#c05.xhtml#Page_96 .pagebreak title="96"} You can also use
`      &&     ` and `      ||     ` to combine test expressions. This
command returns `      true     ` if both expressions are true:
您也可以使用&&和\|\|来组合测试表达式。如果两个表达式都为真，则此命令将返回true。
    if [ $3 -gt 1 ] && [ $3 -lt 3 ]
And this one returns `      true     ` if at least one of them is true:
如果其中至少有一个为真，则返回true。
    if [ $3 -gt 1 ] || [ $3 -lt 0 ]
You can find more comparison flags in the `      test     ` command's
manual by running `      man test     ` . (If you aren't sure about the
commands you're using, you can always enter `      man     ` followed by
the command name in the terminal to access the command's manual file.)
如果您对正在使用的命令不确定，可以在终端输入 man
跟随命令名称来访问命令的说明文件，您可以在测试命令的手册中找到更多的比较标志，通过运行
man test。
### Writing a Function Library {#c05.xhtml#h2-501546c05-0018}
As your codebase gets larger, you should consider writing a *function
library* to reuse code. We can store all the commonly used functions in
a separate file called *scan.lib* . That way, we can call these
functions as needed for future recon tasks: