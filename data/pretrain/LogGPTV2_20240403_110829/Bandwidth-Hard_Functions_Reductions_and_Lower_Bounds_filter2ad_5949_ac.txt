i =
(i − 1)m + 1, (i − 1)m +
M L
i =
(i − 1)m +
+ 1, im
(cid:24) 2m
(cid:25)
3
(cid:106) m
(cid:107)(cid:105) ⊆ Mi ,
(cid:21)
3
⊆ Mi .
Given a DAG G, we call a DAG Gm = (Vm, Em) with the following properties a metagraph of G.
• Nodes: Vm contains one node vi per set Mi, i.e., Vm = {vi : i ∈ [n(cid:48)]}. We call vi the simple node and
Mi its meta-node.
• Edges: If the end of a meta-node M L
connect their simple nodes, i.e., Em = {(vi, vj) : E ∩ (M L
i × M F
j ) (cid:54)= ∅}.
i
is connected to the beginning M F
j of another meta-node, we
6In some cases we may have v ∈ Bi−1 and parents(v) ⊂ Ri−1 so that we could place a pebble on node v using either a red
move or a blue move. In such cases we will assume that this is accomplished by a red move, since blue moves will be more
expensive.
9
3 Modeling Energy Complexity as Red-Blue Pebbling
In this section we show that the energy cost of the function fG,H is characterized by the reb-blue pebbling
(cid:107)
cost rbpeb
(G, m) in the parallel random oracle model just as Alwen and Serbinenko [AS15] showed that
cumulative memory complexity can be characterized by the black pebbling game. Similar to [AS15] our
reduction uses Lemma 3.1 as a core building block. In particular, if the energy cost is signiﬁcantly smaller
(G, 8m) for a pROM attacker with m· w bits of cache then we can build an extractor that receives
(cid:107)
than rbpeb
a small hint and predicts the random oracle output on a larger set of indices contradicting Lemma 3.1. One
of the unique challenges we face when designing our extractor is that it is not obvious how to relate messages
between cache and main memory to speciﬁc blue pebbling moves. By contrast, a black pebbling move always
corresponds to a speciﬁc random oracle query.
Lemma 3.1. [DKW11b] Let H be a set of hints that can be given, B be a series of random bits and A be
an algorithm that receives as input some hint h ∈ H and can adaptively query B at speciﬁc indices. Let
WINA,h denote the event that A, given h ∈ H as input, eventually outputs a subset of k indices i1, . . . , ik
that were not previously queried as well as the corresponding values B[i1], . . . , B[ik] of each bit then
Pr [∃h ∈ H. WINA,h] ≤ |H|
2k ,
where the randomness is taken over the selection of B.
3.1 Memory and Cache in the Parallel Random Oracle Model
Before we present our reduction it is ﬁrst necessary to give a formal deﬁnition of energy costs in the pROM
model.
We deﬁne a state of an algorithm AH(.) to be the tuple (σ, ξ), where σ contains the contents of the
cache and has size at most mw bits, and ξ contains the contents of the memory. We consider a pROM
attacker AH(.) with cache size m · w who is given oracle access to a random oracle H : {0, 1}∗ → {0, 1}w. In
particular, the cache is large enough to store m labels. An execution of AH(.) on input x proceeds in rounds
as follows. Initially, the state at time 0 is (σ0, ξ0) where ξ0 is empty and σ0 encodes the initial input x. At
the beginning of round i the attacker is given the initial state (σi−1, ξi−1) as well as the answers Ai−1 to any
random oracle queries that were asked at the end of the last round. The algorithm AH(.) may then perform
arbitrary computation and/or transfer data between memory and cache. The round ends when the attacker
outputs a new state (σi, ξi) along with a batch of queries Qi = {qi
}. Since the attacker only has
cache-size m· w we only allow the attacker to make at most |Qi| ≤ m queries during a single step (otherwise
the attacker won’t even have room to store all of the responses).
2, . . . , qi
ki
1, qi
We allow the attacker to specify arbitrary functions F1, F2, F3 and F4 for communication between cache
and memory during each round so long as the speciﬁcation of each function is independent of the ran-
dom oracle H (e.g., we cannot query the random oracle in between rounds).
In particular, the function
F1 (σi−1, Ai−1) = r1
is used to specify the ﬁrst message we will send to memory during round i — in
the event that we don’t send any message to memory we deﬁne F1 (σi−1) = ⊥. Similarly, the function
i
, sj−1
F2(ξi−1, r1
have been deﬁned we set
i speciﬁes the response from memory (or ⊥ if there is no response). Once r1
i , . . . , rj−1
i ) = s1
i , s1
i
i
i , s1
ξi−1, r1
We terminate when rj
i , r2
sj
i = F2
i = ⊥ or when sj
i } denote the sequence of messages sent from cache to memory during round i
i , . . . , r(cid:96)i
i } denote the responses sent from memory back to the cache. Finally, the round
ends when the attacker uses the function F3 (ξi−1, Ri, Si) = ξi to output a new state ξi for memory and
We let Ri = {r1
Si = {s1
i , . . . , s(cid:96)i
and we let
i , s2
, rj
i
.
i
rj
i = F1
σi−1, Ai−1, r1
i , s1
i , . . . , rj−1
, sj−1
i
i , . . . , rj−1
i
(cid:17)
, sj−1
,
(cid:17)
i
(cid:16)
(cid:16)
i = ⊥.
10
F4 (σi−1, Ri, Si) to output a new state σi for cache and a new batch Qi of at most m random oracle queries.
At this point AH(.) outputs the next state (σi, ξi) along with the next batch of queries Qi
Crucially, the functions F2 and F3, which are used to generate response from main memory and update
the state of main memory at the end of the round, do not have access to σi−1 (the state of cache) or Ai−1
(the answers to random oracle queries). In particular, any information about σi−1 (cache-state) and Ai−1
(most recent answers to random oracle queries) that main memory receives must be communicated through
one of the messages in the set Ri. Similarly, the functions F1 and F4 are used to generate the requests sent
from cache to main memory, to update the state of cache σi at the end of the round and to output the
next batch Qi of random oracle queries. Crucially these functions do not have access to ξi−1 (the state of
memory). Thus, any information about ξi−1 must be communicated through one of the responses in the set
Si.
Dziembowski et al. [DKW11a] also addresses communication between two parties, Asmall (e.g., a space-
bounded virus) and Abig, over a bounded channel. However, both parties in this model can query the random
oracle. This is a crucial diﬀerence, since one of the parties in our model, the main memory, is strictly forbid-
den from querying the random oracle to avoid trivialization of the problem (e.g., the attacker can perform
all computation in RAM with no blue moves).
Execution Trace. We deﬁne the execution trace of the algorithm AH(.) by the sequence of cache states,
memory states, messages passed between cache and memory, and queries made to the random oracle H.
Formally, the execution trace is TraceA,R,H (x) = {(σi, ξi, Ri, Si, Qi)}t
i=1, where the trace TraceA,R,H (x) is
dependent on the algorithm AH(.), random oracle H, internal randomness R, and input value x. Then we
say the cost of the execution trace is
cost(TraceA,R,H (x)) =
t(cid:88)
crki +
(cid:96)i(cid:88)
i=1
j=1
(cid:16)|rj
cb
w
i|(cid:17) .
i| + |sj
Intuitively, the cr term is the cost of all of the queries we make to the random oracle H and the cb terms
result from the messages passed between cache and memory — here cb denotes the cost of transferring w
bits between cache and memory.
We now formally deﬁne the energy cost of computing a function based on its execution trace.
Deﬁnition 3.2. Given constants cb and cr, the energy cost ecost of a function fG,H is deﬁned by
ecostq,(fG,H , m · w) = minA,x
E [cost(TraceA,R,H (x))],
where the minimum of the expected cost is taken over all valid inputs x and all algorithms A with cache size
m · w bits making at most q queries that compute fG,H (x) correctly with probability at least .
3.2 Red-Blue Extension Pebbling
We are now ready to prove our main result in this section. Theorem 3.3 lower bounds the energy cost
ecostq,(fG,H , m · w) of the function fG,H with cache size m · w using rbpeb
(cid:107)
(G, 8m) the red-blue pebbling
cost of the DAG G with 8m red pebbles.
Theorem 3.3. For any DAG G with n nodes and any AH(.)
4 log n  x must
appear as input to a random oracle query during rounds [x, y]. Hence, the left-hand side is a subset of the
nodes that are newly pebbled between rounds [x, y].
Step 2: We partition the pebbling rounds [t] into sub time-intervals (t0 = 0, t1], (t1, t2], . . . recursively as
follows. Let t1 be the minimum pebbling round such that there exists j  ti−1 to be the minimum round such
that there exists ti−1 ≤ j < ti such that |QueryFirst(j, ti)| ≥ 3m — if no such ti exists then we set ti = t.
12
Step 3: We will show that there is an extension pebbling that makes at most 4m blue moves during
each interval (except for the ﬁrst one where it needs 0). In particular, we set k = 7m and we will deﬁne
an extension pebbling (B∗, R∗) ∈ RBExt(P, 8m, k) by dividing the cache into two sets of size 4m denoted
and Bi ⊃ Pi give a legal red-blue
as Rinter
pebbling and then bound its cost.
, respectively. We will show that Ri = Rlegal
= {} at the start of each time interval (ti, ti+1] and for each j ∈ (ti, ti+1] we have
∪ Rinter
and Rlegal
i
i
i
i
We set Rinter
ti
j =(cid:0)Rinter
j−1 ∪ (Pj \ Pj−1)(cid:1) ∩ QueryFirst(j, ti+1).
Rinter
j
Intuitively, Rinter
stores all of the red-pebbles we have computed during the interval (ti, j] that are later
needed in the interval [j + 1, ti+1). Thus, any node that is pebbled during rounds (ti, j] and subsequently
needed in round (j +1, ti+1) must be in Rinter
, which we will keep in cache. This yields the following invariant.
Invariant 1. For any j ∈ (ti, ti+1),
j
QueryFirst(j + 1, ti+1) ∩ j(cid:91)
(Pi \ Pi−1) ⊆ Rinter
j
To maintain legality across all time steps, we add a few rules about blue moves:
i=ti
(1) We convert a pebbled node v from blue to red if node v is in QueryFirst(ti, ti+1). That is for any