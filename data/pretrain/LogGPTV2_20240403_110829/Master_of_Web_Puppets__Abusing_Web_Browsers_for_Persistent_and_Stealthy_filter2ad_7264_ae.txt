and stealthiness of in-browser malicious computation. Towards
a similar direction, one could suggest to restrict the liveness of
service workers, making it proportionate to the user presence
in the website that hosts them (i.e., the service worker is
suspended after the user leaves the website) or apply a time
cap (i.e., a service worker gets terminated if it keeps running for
an unreasonable amount of time). By doing so, the persistence
characteristic of our attack will no longer be available. Service
workers will still be able to intercept and modify navigation
and resource requests, as well as cache resources, using the
storage API for example, to allow applications to run even
when the network is not available.
However, service workers were designed to provide im-
portant functionalities to long-running web applications (e.g.,
Google Docs, Gmail, Twitter, LinkedIn, Whatsapp web client)
even after tab closing [50]. By forcing restrictions, service
workers will not be able to provide the above background
processing, thus signiﬁcantly limiting the capabilities of con-
temporary web applications, resulting in a severe degradation
11
103104105106107108 0 100 200 300 400 500 600 700Accumulated SHA256 KHashesTime (minutes)MarioNet (best case)MarioNet (worst case)Web-botnet (w/ Web Workers)103104105106 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20of user experience. To mitigate that, a better solution would be
to selectively enable service workers only for some “trusted”
websites, possibly via a browser extension that prevents the
unconditional registration of service workers.
A step towards striking stealthiness is to disable the eval()
family functions. By doing so, the attacker would need to
ship the malicious functionalities together with the service
worker, which would facilitate the signature-based content
ﬁltering browser extensions to detect them easier. Obviously,
this would be an arm race between attackers and defenders,
given the obfuscation and code scrambling techniques that
are in use for similar cases. In addition, service workers can
include minimal ISA emulators in order to execute malicious
instructions received from the attacker. A more aggressive
option would be to limit the functionality offered by service
workers, by making only a subset of JavaScript available for use
(e.g., allowing only the sending/receiving of data between the
website and the server). Clearly, such a data-driven approach
would require much more careful consideration and design.
2) Whitelists/Blacklists: Another possible defense strategy is
to restrict the browser, with ﬁne-grained policies, from fetching
and deploying service workers. The simplest approach is the use
of whitelists; i.e., service workers will be blocked, unless the
domain of origin is whitelisted. These lists can initially include
popular sites, which are typically considered more trusted, and
enriched by web crawling and analysis platforms, such as [61],
that perform web-wide analysis to detect malicious websites
and JavaScript ﬁles.
3) Click to Activate: Another mitigation would be to require
the user’s permission for registration and activation of a
service worker—similar to “Click to Play” mechanism [51] that
disables by default plug-ins, such as Flash, Java, Silverlight
and others. By doing so, the service worker functionality will
be disabled by default, and users would need to explicitly
give permission for the service worker to run. Currently, this
user consent is needed only for the Push Notiﬁcations [44].
However, given the variation of attack vectors that can be
achieved through a malicious service worker, we believe that
explicit permission would raise user suspicion—in the same
way it does for location, microphone, etc.—especially when
browsing unreliable websites. One may say that these proposed
permission-based defenses may be not practical to constitute
the perfect mitigation for the presented attack. However, recent
developments such as GDPR, mobile or browser permissions
model etc., have demonstrated that user consent can be forced.
B. Host-based Approaches
1) Signature-based Detection: Traditional tools such as
ﬁrewalls, anti-virus, and intrusion detection/prevention systems,
are always a prominent methodology for the detection of
malicious activities. The majority of these tools are typically
using signatures to detect suspicious data or code that enters
or leaves a user’s computer. The creation of such signatures
for the case of MarioNet may be trivial for some attack cases.
For example, it could be easy to detect MarioNet messages
that are exchanged between the service worker that lies in the
browser and the back-end server, by monitoring the network
trafﬁc. A sophisticated attacker can obviously employ several
techniques to raise the bar against signature-based detection
mechanisms. For example, by installing end-to-end encryption
with the back-end server can sufﬁciently hide the content of
the messages. Given that a host-based approach can have
full control of the client side though, the SSL connection
can be intercepted to acquire the decrypted data. Besides, the
messages still need to be transferred, which can be a good
hint for detection mechanisms that are based on network ﬂow
statistics (e.g., number of packets exchanged, packet size). Even
though covert channels and steganography may potentially
help attackers, there are works that try to detect web-based
botnets, by performing anomaly detection on features like
communication patterns and payload size [30].
2) Behavioral Analysis and Anomaly Detection: A more
drastic solution would be to develop techniques that try to detect
suspicious behavior of JavaScript programs that are embedded
in the web site or the service worker. Obviously, this would
require more sophisticated analysis than simple ﬁxed string
searching and regular expression matching, due to the fact that
the obfuscation of the malicious JavaScript code snippets can
evade static analysis techniques. Instead, more advanced and
complex analyzers should be used, such as the monitoring of
the utilized resources or the behavioral analysis of the executed
code. Even though this can be quite challenging, several works
have been proposed in the past [25], [62], [27]. For instance,
one of the ﬁrst anomaly detection approaches is JaSPIn [62],
which creates a proﬁle of the application usage of JavaScript
and enforces it later. IceShield [27] uses a linear decision
function that differentiates malicious code from normal code
based on heuristics for several attack types that apply code
obfuscation. Finally, in [25] the authors audit the execution
of JavaScript code, and compare it to high-level policies, in
order to detect malicious code behavior. Although all these
approaches are not trivial, they are a prominent step towards
protecting against malicious JavaScript programs in general.
VIII. DISCUSSION
Ethical considerations. In this paper, we implemented and
deployed MarioNet in a strictly controlled environment. During
our experimentation with attack scenarios, no user or web
server outside this controlled environment were contacted or
harmed in any way. As such, we constrained the evaluation of
our system to a limited set of nodes, thus avoiding any attempt
to measure our system on a larger scale, in the real world.
Attack difﬁculty. Based on our threat model (Section III-A) a
MarioNet attack can be launched (a) intentionally, by a mali-
cious or “shady” website; (b) unintentionally, by a hijacked or
compromised website, or a website that includes a compromised
library; and (c) through third-party dynamic content in iframes.
Since our attack does not rely solely on a legitimate website
or third-party library to be compromised, but it can also be
performed by ﬁrst-party websites that include such content,
and also triggered by dynamic content in iframes, according
to (a) and (c), it seems that such an attack can be practically
launched quite easily (by actors with different incentives or
intentions). Essentially, it requires only a contemporary web
browser (all popular browsers are vulnerable—see Table II) and
just accessing a webpage that provides such malicious content,
either from ﬁrst or third parties.
Attack impact. Aside from the cases of malicious or shady
websites that can straightforwardly launch our attack, and web-
12
sites or third party libraries being compromised, the presented
attack can be also launched by loading malicious third-party
dynamic content in iframes residing in entirely legitimate
websites. For instance, attackers can exploit the ad ecosystem’s
real-time auctioning mechanism to load their malicious content
in iframes [57]. It has been already demonstrated in previous
works [13] how programmatic ad delivery can be exploited to
distribute malicious content. The ease of launching such an
attack, and the ability of attackers to utilize legitimate, and more
importantly, popular and trustworthy websites with possibly
hundreds of thousands visitors, demonstrate the enormous im-
pact our attack can potentially have. In addition, the stealthiness
property of MarioNet, which can evade effectively monitoring
extensions by design, and the fact that all major browsers are
currently vulnerable to such attacks, as shown in the previous
sections, make the number of potential victims even larger, and
highlight the need for careful design and adequate protection
mechanisms.
Registration of multiple service workers. Service workers
are associated with speciﬁc scopes during registration and each
service worker can only control pages that fall under its scope.
If more than one service workers are registered (while the user
is navigating throughout a website), then the browser enables
only the service worker with the broader scope (typically the
service worker registered at the root domain). However, during
our experimentation we observed that a publisher can design
its website on purpose so that multiple service workers can be
registered in non-overlapping scopes (i.e., in ﬁle paths at the
same level of the URI). As a consequence, this could allow
MarioNet to have multiple Servants simultaneously active and
utilize them for running its malicious tasks in multiple threads.
Cross-origin service workers. The cross-origin service worker
(or foreign-fetch [60]) is an experimental feature of Chrome
54, to enable registration of third-party service workers. The
motivation behind that, is to enable developers to implement
advanced functionality, such as client-side caching of CDN-
based third party content. However, this feature broadens the
threat model of MarioNet-like approaches, enabling third-parties
to misuse the service workers of the domains that include
them. Even though this feature was discontinued one year after
its announcement [68], mostly due to applicability issues, it
still shows that such new functionality should be considered
carefully in terms of security, before being applied.
Towards this direction, the aim of this work is to increase
the awareness of developers and browser vendors about the
provided powerful (but also potentially risky) capabilities of
modern HTML, and hopefully lead to the deployment of
restrictive policies that will adequately secure the user-side
environments of future web applications.
IX. RELATED WORK
Web browsers are a core part of our everyday life, being
the door to the gigantic world of the web. As a result, they
have become a valuable target for attackers, that try to exploit
them in many different ways.
For instance, several approaches try to abuse the rich
features of modern web applications, in order to form web-
based botnets, the existence of which has seen a signiﬁcant
rise recently [33]. Provos et al. [61] present the threat of web-
based malware infections, in which the infected browsers pull
commands from a server controlled by the attacker. Contrary
to traditional botnet-like attacks, web-based malware does
not spread via remote exploitation but rather via web-based
infection. In [4], the authors craft malicious webpages where
users get infected upon visit. The attackers can then abuse users’
browsers to perform attacks like DDoS, worm propagation, and
node reconnaissance. Grossmann and Johansen [24] leverage
ads to deliver malicious JavaScript to users, forcing browsers
to establish connections with a victim server, thus performing
a DoS attack. A major limitation of these approaches though,
is that the corresponding malicious JavaScript snippets need to
be embedded in the main webpage. As a result, long-running
operations would block the rendering procedure and execution
of the web application, making it practical only for short-lived
attacks.
To overcome this limitation, many approaches started
recently to use web workers—a feature that was introduced
with HTML5. Web workers run as separate threads, and thus
being isolated from the page’s window. This allows the parallel
execution of operations, without affecting the normal rendering
of the web application, leading to the rise of more advanced
web-based botnets. Kuppan [34] demonstrate this ability of
using web workers to perform DDoS attacks. Rushanan et al.
in [63], also use web workers to perform stealthy computations
on the user side and launch not only attacks like DoS and
resource depletion but also covert channel using CPU and
memory throttling. Pellegrino et al. [58] also present different
techniques to orchestrate web-based DoS attacks, by utilizing
web workers among other HTML5 features, and provide an
economic analysis and costs of browser-based botnets.
Similarly, Pan et al. [54] explore the possibility of using
web workers for performing application-layer DDoS attacks,
cryptocurrency mining and password cracking. Their results
show that although DDoS attacks and password cracking are
feasible and with comparable ﬁnancial cost, cryptocurrency
mining is not proﬁtable for the attacker given the limited time
a user spends in a website. Dorsey presented an in-browser
botnet using web workers as well [13]. The user browser,
after infection, participates in a swarm of bots performing
various malicious operations like DDoS attacks, torrent sharing,
cryptocurrency mining, and distributed hash cracking. To infect
as many users as possible, Dorsey embedded his malware in a
malicious advertisement and let the ad network to distribute
it to the users browsers. Similar to MarioNet, all the above
approaches do not require any software installation on the
user side. However, the browser remains under the control of
the attacker only for the duration that the user is browsing
the malicious website, making it impractical for long-running
botnet operations. Instead, MarioNet provides persistence that
allows the attacker to perform malicious computations for a
period longer than a website visit.
Besides the crypto-mining and crypto-jacking attacks, in
which a website unintentionally hosts web-mining code snip-
pets [40], [36], there are publishers that intentionally use mining
to monetize their websites. Eskandari et al. analyze the existing
in-browser mining approaches and their proﬁtability [15].
Similar to web-based botnets, in-browser miners maintain a
connection with a remote server to obtain PoW tasks and abuse
13
web workers to achieve the highest possible CPU utilization on
the user side. However, the short website visiting times make the
proﬁtability of this approach questionable [65], [56]. MarioNet
also uses crypto-jacking as a possible scenario, however instead
of web workers we leverage service workers to enable an entity
to gain much higher proﬁts due to the provided persistence.
Finally, several attacks are based on malicious browser ex-
tensions that a user downloads and deploys in the browser [38],
[59]. For instance, Liu et al. propose a botnet framework that
exploits the browser extension update mechanism to issue
batch commands [38]. By doing so, they are able to perform
DDoS attacks, spam emails and passwords snifﬁng. Similarly,
Perrotta et al. exploit the over-privileged capabilities of browser
extensions to check the effectiveness of botnet attacks in
contemporary desktop and mobile browsers [59]. Their results
show that different attacks are feasible in different browsers.
A major difference of these approaches with MarioNet, is that
all the above approaches require the installation of software
(i.e., browser extension) on the user side.
X. CONCLUSION
In this work, we presented MarioNet: a novel multi-attack
framework to allow persistent and stealthy bot operation through
web browsers. Contrary to traditional botnet-like approaches,
our framework does not require any installation of malicious
software on the user side. Instead, it leverages the existing
technologies and capabilities provided by HTML5 APIs of
contemporary browsers.
We demonstrate the effectiveness of this system by design-
ing a large set of attack scenarios where the user’s system