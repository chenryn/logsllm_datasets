# Authenticated System Calls

**Authors:**
- Mohan Rajagopalan
- Matti A. Hiltunen
- Trevor Jim
- Richard D. Schlichting

**Affiliations:**
- Department of Computer Science, The University of Arizona, Tucson, AZ 85721
- AT&T Labs-Research, 180 Park Avenue, Florham Park, NJ 07932

**Emails:**
- PI:EMAIL
- {hiltunen, trevor, rick}@research.att.com

## Abstract

System call monitoring is a technique for detecting and controlling compromised applications by checking at runtime that each system call conforms to a policy specifying the program's normal behavior. This paper introduces a new approach to system call monitoring based on authenticated system calls. An authenticated system call includes extra arguments that specify the policy for the call and a cryptographic message authentication code (MAC) that ensures the integrity of the policy and the system call arguments. The kernel uses this information to verify the system call. The application binary, with regular system calls replaced by authenticated calls, is generated automatically by an installer program that reads the binary, uses static analysis to generate policies, and rewrites the binary. This paper presents the approach, describes a prototype implementation based on Linux and the PLTO binary rewriting system, and provides experimental results indicating the approach's effectiveness in protecting against compromised applications at a modest cost.

**Keywords:** Intrusion tolerance, operating systems, security policy, sandboxing, compiler techniques

## 1. Introduction

System call monitoring is a widely used technique for detecting compromised applications and sandboxing them to minimize potential damage [2, 4, 5, 8, 9, 11, 14, 15, 18, 19, 20, 22, 24]. The core idea is that a compromised application can only cause significant damage through system calls, making this interface ideal for detecting and controlling attacks. This approach relies on a model or policy of an application’s normal system call behavior, halting execution when the application deviates from this behavior. Policy checking and enforcement are critical and are typically performed entirely in the kernel or in conjunction with a protected user-space policy daemon.

This paper introduces authenticated system calls, a novel technique for monitoring and enforcing system call policies. An authenticated system call includes additional arguments that specify a policy and a MAC that guarantees the integrity of the policy and other arguments. The policy and MAC are part of the untrusted application, but the MAC is computed using a cryptographic key available only to the kernel. At each invocation of an authenticated system call, the kernel recomputes the MAC and allows the call to proceed only if it matches the MAC passed by the application. Since the application never has access to the key, it cannot create or tamper with authenticated system calls. This approach contrasts with methods relying on user-space policy daemons [4, 5, 8, 11, 18, 22] or requiring extensive kernel modifications [2, 14, 19, 20], which can be costly or complex.

The second key element of our approach is the automatic transformation of the application to replace each system call with an authenticated call. This is done by a trusted installer program that reads the application binary, uses static analysis to determine the appropriate policy for each call, and rewrites the binary with the authenticated calls. Static analysis offers significant advantages over hand-written policies or training-based methods, as it is fully automatic, quick, and does not miss system calls from rarely-used parts of the application. We demonstrate these advantages empirically by comparing our policies with those published for the Systrace system call monitoring system [15].

The primary goals of this paper are to describe the details of authenticated system calls and to provide experimental results from a prototype implementation based on Linux and the PLTO binary rewriting system [17]. Additionally, we discuss extensions to make policies more expressive, including support for state-dependent policies and capability tracking.

## 2. Basic Approach

### Overview

Two steps are required to protect systems using our approach: transforming programs to replace system calls with authenticated system calls, and runtime checking by the kernel to ensure each system call matches its policy.

#### Installation

The binary of a program is read by a trusted installer program, which generates the policy capturing the allowed behavior for each system call using static analysis and then rewrites the binary so that each system call includes the policy and a MAC. The key for the MAC is specified during installation.

#### Syscall Checking

At runtime, each system call is intercepted by the kernel, which verifies the MAC using the same key as used during installation. If the behavior matches the policy, the call is allowed; otherwise, the call is rejected, and the executing process is terminated.

### Policies

A policy is defined as the set of verifiable properties of a system call request. Our current prototype enforces policies of the following form:

```
Permit open from location 0x806c462
Parameter 0 equals "/dev/console"
Parameter 1 equals 5
```

This policy allows the `open` system call from a specific call site, provided the first parameter is a pointer to the string `/dev/console` and the second parameter is the constant 5. Policies can specify the system call number, call site, constant parameter values, and constant parameter addresses. Unspecified parameters are unconstrained.

### Installation

The trusted installer program generates the policy for an application and produces an executable binary with authenticated system calls. The installer reads the application binary, disassembles it, and determines system call arguments using standard compiler techniques, resulting in a policy for each system call. The installer then rewrites the binary, replacing original system calls with authenticated ones, which include a policy descriptor and a MAC.

### Syscall Checking

Enforcement of an application’s policy is done by the kernel at runtime. When an authenticated system call occurs, the kernel constructs an encoding of the policy and computes a MAC using the same key as during installation. If the MACs match, the system call is executed; otherwise, the process is terminated, and the administrator is alerted.

### Prototype Implementation

Our prototype implementation of the trusted installer is based on the PLTO binary rewriting system, which reads a binary, constructs an intermediate representation, performs optimizations, and rewrites the binary. The installer functionality is added to PLTO as optimization passes that determine system call policies and replace each system call with an authenticated one. The installer runs on Linux, and the policy generation portion has been ported to OpenBSD for comparison.

PLTO requires relocatable binaries, which limits the binaries we test. Syscall checking has been implemented in Linux by adding about 200 lines of code to the kernel’s software trap handler and including a cryptographic library for MAC functionality [7].

## 3. Experimental Results

[Details of the experimental setup, results, and analysis would be included here.]

## 4. Extensions and Future Work

[Discussion of extensions to make policies more expressive, such as state-dependent policies and capability tracking, and future work would be included here.]

---

**Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05)**
**0-7695-2282-3/05 $20.00 © 2005 IEEE**
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021, at 12:08:19 UTC from IEEE Xplore. Restrictions apply.**