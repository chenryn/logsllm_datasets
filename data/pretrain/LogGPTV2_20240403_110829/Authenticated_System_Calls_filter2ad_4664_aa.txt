title:Authenticated System Calls
author:Mohan Rajagopalan and
Matti A. Hiltunen and
Trevor Jim and
Richard D. Schlichting
Authenticated System Calls
Mohan Rajagopalan
Matti Hiltunen Trevor Jim Richard Schlichting
Department of Computer Science
The University of Arizona
Tucson, AZ 85721
Email: PI:EMAIL
AT&T Labs-Research
180 Park Avenue
Email: {hiltunen,trevor,rick}@research.att.com
Florham Park, NJ 07932
Abstract
System call monitoring is a technique for detecting and
controlling compromised applications by checking at run-
time that each system call conforms to a policy that speciﬁes
the program’s normal behavior. Here, a new approach to
system call monitoring based on authenticated system calls
is introduced. An authenticated system call is a system call
augmented with extra arguments that specify the policy for
that call and a cryptographic message authentication code
(MAC) that guarantees the integrity of the policy and the
system call arguments. This extra information is used by the
kernel to verify the system call. The version of the applica-
tion in which regular system calls have been replaced by au-
thenticated calls is generated automatically by an installer
program that reads the application binary, uses static anal-
ysis to generate policies, and then rewrites the binary with
the authenticated calls. This paper presents the approach,
describes a prototype implementation based on Linux and
the PLTO binary rewriting system, and gives experimental
results suggesting that the approach is effective in protect-
ing against compromised applications at modest cost.
Keywords: Intrusion tolerance, operating systems, security
policy, sandboxing, compiler techniques
1. Introduction
System call monitoring is a widely used technique for
detecting compromised applications and for sandboxing ap-
plications to minimize the damage they can cause if they
become compromised [2, 4, 5, 8, 9, 11, 14, 15, 18, 19, 20,
22, 24]. The intuition is that a compromised application can
only cause real damage by exploiting system calls, making
this interface the ideal point to detect and control attacks.
The approach is based on having a model or policy of an
application’s normal system call behavior and then halting
execution when an application deviates from this normal
behavior. Policy checking and enforcement are security-
critical, and hence, are performed entirely in the kernel or
in the kernel in conjunction with a protected user-space pol-
icy daemon.
This paper introduces authenticated system calls, a new
technique for monitoring and enforcing system call policies.
An authenticated system call is a system call with additional
arguments that specify a policy that the system call should
satisfy, and a message authentication code (MAC) that guar-
antees the integrity of the policy and other arguments to the
system call. The policy and MAC are part of the untrusted
application, but the MAC is computed with a cryptographic
key that is available only to the kernel. At each invocation
of an authenticated system call, the kernel uses the key to
recompute the MAC, and only allows the call to proceed if
this matches the MAC passed in by the application. Since
the application never has access to the key, it cannot suc-
cessfully create a new authenticated system call or tamper
with an existing authenticated system call. This approach of
dividing the functionality between the application and the
kernel is novel, and contrasts with other approaches that ei-
ther rely on user-space policy daemons [4, 5, 8, 11, 18, 22],
or require large-scale changes to the kernel [2, 14, 19, 20].
In comparison with our approach, the former can have un-
acceptably high execution costs unless frequently-used sys-
tem calls are special-cased for enforcement in the kernel,
while the latter results in a more complex kernel and the
associated increase in execution overhead.
The second key element of our approach is the automatic
transformation of the application to replace each system call
with the equivalent authenticated call. This is done by a
trusted installer program that reads the application binary,
uses static analysis to determine the appropriate policy for
each call, and then rewrites the binary with the authenti-
cated calls. The use of static analysis has signiﬁcant ad-
vantages over methods based on hand-written policies or
policies obtained by training, i.e., recording the system call
behavior of the application over a period of time. In partic-
ular, it is completely automatic, produces policies quickly,
and it does not miss system calls invoked by rarely-used
parts of the application. We demonstrate these advantages
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:08:19 UTC from IEEE Xplore.  Restrictions apply. 
empirically by comparing our policies with those published
elsewhere for the well-known Systrace system call monitor-
ing system [15].
The primary goals of this paper are ﬁrst, to describe the
details of authenticated system calls, and second, to give ex-
perimental results from a prototype implementation of the
approach based on Linux and the PLTO binary rewriting
system [17]. In addition, we describe extensions that can
be used to make policies more expressive. These include
support for state-dependent policies and capability tracking,
where information on linkages between argument values in
different system calls is included in the policy.
2. Basic Approach
Overview. As noted above, two steps are needed to pro-
tect systems using our basic approach: transforming pro-
grams to replace system calls with authenticated system
calls, and runtime checking by the kernel to ensure that
each system call matches its policy. The ﬁrst step, instal-
lation, is illustrated in ﬁgure 1. The binary of a program
is read by a trusted installer program, which ﬁrst generates
the policy that captures the allowed behavior for each sys-
tem call using static analysis, and then rewrites the binary
so that each system call includes the policy and a crypto-
graphic MAC that protects the policy. The key for the MAC
is speciﬁed during the installation process. The second step,
syscall checking, is illustrated in ﬁgure 2. At runtime, each
system call is intercepted by the kernel and, after verifying
the MAC using the same key as used during installation, the
behavior of the call is veriﬁed against the policy. If the be-
havior matches the policy, the call is allowed; otherwise, the
call is rejected and the executing process terminated.
key
policy
original
program
policy
generation
rewriting
Trusted Installer
protected
program
Figure 1. Program installation
Here, we elaborate on the details of policies, installa-
tion, and syscall checking for this basic approach. This
description matches our prototype implementation, which
is used for the experimental results in section 3. The
most important limitations of this prototype are that it cur-
rently requires relocatable binaries and can handle only
statically-linked executables; ways to address both of these
issues are discussed further below and in section 4, respec-
tively. Techniques for improving the expressiveness of the
automatically-generated policies are also presented in sec-
tion 4.
Protected
program
Regular
program
Protected
program
user−space
kernel
System Call Entry
MAC
Verification
System Call Handers
Figure 2. Syscall checking
Policies. A policy can be deﬁned as the set of veriﬁable
properties of a system call request. Our current prototype
enforces system call policies of the following form:
Permit open from location 0x806c462
Parameter 0 equals "/dev/console"
Parameter 1 equals 5
This policy says that an application can invoke the open sys-
tem call from the call site at memory address 0x806c462,
provided that the ﬁrst parameter is a pointer to the string
“/dev/console,” and the second parameter is the constant 5.
In general, our policies can specify the system call number,
the call site, constant parameter values (e.g., integer con-
stants), and constant parameter addresses in the read-only
text segment (e.g., strings). If a policy does not give a value
for a parameter, then the parameter is unconstrained and any
value is allowed.
These policies are reasonably expressive: most of the
published system call policies for other system call monitor-
ing systems such as Systrace constrain only the system call
number, and constant parameter values and addresses. In
section 4, we extend policies to include, for example, poli-
cies derived from call graphs, policies that allow argument
values to match patterns, and capability tracking policies for
arguments such as ﬁle handles.
Installation. The trusted installer program is used by a
security administrator to generate the policy for an appli-
cation, and to produce an executable binary that contains
authenticated system calls. The installer reads in an appli-
cation binary and disassembles it into an intermediate rep-
resentation. Then, the installer determines system call argu-
ments (using standard compiler techniques such as constant
propagation [1]) resulting in a policy for each system call
consisting of the system call number, call site, and some ar-
gument values. We call such a policy the system call’s au-
thenticated system call (ASC) policy, while the combination
of ASC policies for all system calls in an application make
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:08:19 UTC from IEEE Xplore.  Restrictions apply. 
up the application’s ASC policy. Once an application’s pol-
icy has been generated in this way, it can be printed out for
the administrator to review, or the installer can proceed di-
rectly to the next step, rewriting.
In the rewriting step, the installer transforms the binary
by replacing the original system calls with authenticated
system calls. An authenticated system call consists of the
original system call extended by two arguments: a policy
descriptor and the MAC. The policy descriptor is a sin-
gle 32-bit integer value that describes what parts of the sys-
tem call are protected by the MAC. In particular, for each
original argument of the system call, it encodes whether the
argument is unconstrained or constrained to be a constant
value or address as deﬁned above.
The installer computes the MAC over the encoded pol-
icy, i.e., a byte string that is a self-contained representation
of the policy. It builds this encoded policy by concatenating
the system call number, the address of the call site, the pol-
icy descriptor, and the argument values for those arguments
that are constrained. For example, for a policy
Permit fcntl from location 0x806c57b
Parameter 1 equals value 2
the installer computes the byte string
005c 00000011 0806c57b 0000002
Here 005c is the system call number of fcntl, 00000011 is
the 32-bit number that says that the call site and parame-
ter 1 should be constrained and parameter 0 should be un-
constrained, 0806c5b7 is the call site, and 00000002 is the
value for parameter 1. The installer computes a MAC over
this byte string using a key provided by the security admin-
istrator. The prototype uses the AES-CBC-OMAC message
authentication code, which produces a 128-bit code [10].
The installer adds the MAC to the data segment of the bi-
nary, and adds a pointer to the MAC as an argument to the
system call. The result is an authenticated system call, with
two more arguments than the original system call.
The installer completes once it has processed every sys-
tem call in the program. The system as a whole is protected
once all binaries that run in user space have been trans-
formed to use authenticated system calls by the installer.
Syscall checking. Enforcement of an application’s ASC
policy is done by the kernel at runtime. When an authenti-
cated system call occurs, the kernel receives arguments that
include the system call number, the arguments to the orig-
inal unmodiﬁed call, the policy descriptor, and the MAC.
Furthermore, it can determine the call site based on the re-
turn address of the kernel interrupt handler. Using this infor-
mation, the kernel performs the following computation to
validate that the actual system call complies with the spec-
iﬁed policy. It ﬁrst constructs an encoding of the policy by
concatenating the system call number, the call site, the pol-
icy descriptor, and those argument values that are speciﬁed
in the policy descriptor. The kernel then computes a MAC
over this encoding using the same key used during installa-
tion, and checks that the result matches the MAC passed in
as an argument. If the MACs match, the kernel carries out
the system call; otherwise, it terminates the process, logs
the system call, and alerts the administrator. Unauthenti-
cated calls are also blocked.
Syscall checking is designed so that MAC matching fails
if an application has been compromised. Note that the argu-
ments to the authenticated system call are under the control
of the application, which means that it might have tampered
with any of them, including the policy descriptor and MAC,
or it might have even tried to construct a new authenticated
system call somewhere in the heap. However, any change to
the system call number, call site, policy descriptor, or val-
ues of arguments constrained by the policy would result in
a change to the encoded policy that is constructed by the
kernel. This in turn would change the MAC needed to pass
the kernel test. Our cryptographic assumption is that it is in-
feasible for the adversary to construct a matching MAC for
its changes without access to the key, hence, any attempt
by the application to change the system call to violate the
policy will fail.
Prototype implementation.
Our prototype implemen-
tation of the trusted installer is based on the PLTO binary
rewriting system that reads a binary executable, constructs
an intermediate representation of the program and its con-
trol ﬂow, performs optimization passes on the intermediate
representation, and ﬁnally rewrites the binary for the op-
timized program [17]. The installer functionality is added
to PLTO as optimization passes that determine system call
policies and then replace each system call in the program
with an authenticated system call. The installer runs on
Linux, PLTO’s native platform. The policy generation por-
tion of the installer has also been ported to OpenBSD to
compare policies generated on the two platforms; this is
used for the experimental evaluation in the next section.
PLTO is an optimization tool, and, as a result, it requires
relocatable binaries (i.e., binaries in which the locations of
addresses are marked), so that addresses can be adjusted as
code transformations move data and code locations. Our in-
staller currently inherits this requirement, although it should
be straightforward to generate policies for binaries without
relocation information. One impact of this restriction is that
the binaries we test in the next section had to be compiled
from source, since binaries shipped with standard Linux and
Unix distributions do not contain relocation information.
Syscall checking has been implemented in Linux by
adding a little over 200 lines of code to the kernel’s soft-
ware trap handler, and including a cryptographic library of
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:08:19 UTC from IEEE Xplore.  Restrictions apply. 
about 3000 lines of code for MAC functionality [7]. The