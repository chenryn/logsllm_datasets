    1: kd> bp fffff802`13d795b4
    1: kd> g
    断点命中，查看父进程相关信息，如下，
    Breakpoint 0 hit
    fffff802`13d795b4 48895c2408      mov     qword ptr [rsp+8],rbx
    1: kd> dt _EPROCESS @$proc -yn ImageFileName
    nt!_EPROCESS
      +0x450 ImageFileName : [15]  "svchost.exe"
    由此可知，是svchost.exe这个父进程创建或者销毁了一个子进程，更具体的信息如下分析；查看下当前的上下文环境；
    1: kd> r
    rax=fffff80213d795b4 rbx=ffffcb8050526c80 rcx=ffffcc8bdd67e080
    rdx=0000000000001f28 rsi=000000000000000d rdi=ffffcc8bdd67e080
    rip=fffff80213d795b4 rsp=ffffcb8050526c38 rbp=ffffcb8050526ca9
    r8=ffffcb8050526c80  r9=ffffcc8bdc735de0 r10=ffff9401cdcc2760
    r11=0000000000000000 r12=0000000000000001 r13=0000000000000000
    r14=ffffcc8bdcabd320 r15=fffff80214da2ae8
    iopl=0         nv up ei pl zr na po nc
    cs=0010  ss=0018  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246
    根据x64的调用约定可知，rcx寄存器中存储的是EPROCESS对象指针，该对象存储的是即将被创建的子进程的相关信息，可以获取到的作为身份识别或者安全检测的关键信息如下：
    1: kd> dt _EPROCESS ffffcc8bdd67e080 -yn ImageFile
    ntdll!_EPROCESS
       +0x448 ImageFilePointer : 0xffffcc8b`dc97c5c0 _FILE_OBJECT
       +0x450 ImageFileName : [15]  "UpdateAssistan"
    1: kd> dt 0xffffcc8b`dc97c5c0 _FILE_OBJECT -yn FileName
    ntdll!_FILE_OBJECT
       +0x058 FileName : _UNICODE_STRING "\Windows\UpdateAssistant\UpdateAssistant.exe"
    1: kd> .process /p ffffcc8bdd67e080; !peb 186ef07000
    Implicit process is now ffffcc8b`dd67e080
    .cache forcedecodeuser done
    PEB at 000000186ef07000
        CurrentDirectory:  'C:\Windows\system32\'
        WindowTitle:  'C:\Windows\UpdateAssistant\UpdateAssistant.exe'
        ImageFile:    'C:\Windows\UpdateAssistant\UpdateAssistant.exe'
    CommandLine:  'C:\Windows\UpdateAssistant\UpdateAssistant.exe /ClientID Win10Upgrade:VNL:NHV19:{} /CalendarRun'
    可以获取到该进程的EXE路径，创建时的命令行参数，父进程的PID等信息，这些足以用于安全软件的检测。
    父进程的完整调用栈如下，
    1: kd> k
     # Child-SP          RetAddr           Call Site
    00 ffffcb80`50526c38 fffff802`14ef4ae5 0xfffff802`13d795b4
    01 ffffcb80`50526c40 fffff802`14ef752c nt!PspCallProcessNotifyRoutines+0x249
    02 ffffcb80`50526d10 fffff802`14f2797b nt!PspInsertThread+0x5a4
    03 ffffcb80`50526dd0 fffff802`14b79553 nt!NtCreateUserProcess+0x9c7
    04 ffffcb80`50527a10 00007ffe`547d1654 nt!KiSystemServiceCopyEnd+0x13
    05 0000002f`4b67d258 00007ffe`50b406df ntdll!NtCreateUserProcess+0x14
    06 0000002f`4b67d260 00007ffe`50b3d013 KERNELBASE!CreateProcessInternalW+0x1b3f
    07 0000002f`4b67dec0 00007ffe`5216ee0f KERNELBASE!CreateProcessAsUserW+0x63
    08 0000002f`4b67df30 00007ffe`4ce0a136 KERNEL32!CreateProcessAsUserWStub+0x5f
    09 0000002f`4b67dfa0 00007ffe`4ce0bdd9 UBPM!UbpmpLaunchAction+0xb36
    0a 0000002f`4b67e280 00007ffe`4ce08ee0 UBPM!UbpmLaunchTaskExe+0x279
    0b 0000002f`4b67e490 00007ffe`4ce10a86 UBPM!UbpmpLaunchOneTask+0x6c0
    0c 0000002f`4b67e8f0 00007ffe`4ce0b8bc UBPM!UbpmpHandleGroupSid+0x236
    0d 0000002f`4b67ea10 00007ffe`4ce0b78b UBPM!UbpmpLaunchExeAction+0xec
    0e 0000002f`4b67eaf0 00007ffe`4ce0b5a3 UBPM!UbpmpTakeAction+0xeb
    0f 0000002f`4b67eb50 00007ffe`4ce0b193 UBPM!UbpmpPerformTriggerActions+0x293
    10 0000002f`4b67eca0 00007ffe`4ce1316c UBPM!UbpmpHandleTriggerArrived+0x563
    11 0000002f`4b67ef50 00007ffe`508c32d0 UBPM!UbpmpRepetitionArrived+0x1c
    12 0000002f`4b67ef90 00007ffe`508c3033 EventAggregation!EaiSignalAggregateEvent+0x16c
    13 0000002f`4b67f060 00007ffe`508c27aa EventAggregation!EaiSignalCallback+0xe7
    14 0000002f`4b67f140 00007ffe`508c253e EventAggregation!EaiProcessNotification+0x1aa
    15 0000002f`4b67f270 00007ffe`508caef8 EventAggregation!WnfEventCallback+0x506
    16 0000002f`4b67f3a0 00007ffe`5476769f EventAggregation!AggregateEventWnfCallback+0x38
    17 0000002f`4b67f3f0 00007ffe`54767a51 ntdll!RtlpWnfWalkUserSubscriptionList+0x29b
    18 0000002f`4b67f4e0 00007ffe`5476b510 ntdll!RtlpWnfProcessCurrentDescriptor+0x105
    19 0000002f`4b67f560 00007ffe`54766b59 ntdll!RtlpWnfNotificationThread+0x80
    1a 0000002f`4b67f5c0 00007ffe`54764b70 ntdll!TppExecuteWaitCallback+0xe1
    1b 0000002f`4b67f600 00007ffe`52171fe4 ntdll!TppWorkerThread+0x8d0
    1c 0000002f`4b67f990 00007ffe`5479ef91 KERNEL32!BaseThreadInitThunk+0x14
    1d 0000002f`4b67f9c0 00000000`00000000 ntdll!RtlUserThreadStart+0x21
    由于前四个参数是通过的寄存器传递的，所以无法直接通过栈来回溯到参数，但可以通过手动方式分析得到。分析ntdll!NtCreateUserProcess的调用父函数，其返回地址处的汇编代码如下所示：
    1: kd> ub 00007ffe`50b406df
    KERNELBASE!CreateProcessInternalW+0x1b11:
    00007ffe`50b406b1 488b842440040000 mov     rax,qword ptr [rsp+440h]
    00007ffe`50b406b9 4889442420      mov     qword ptr [rsp+20h],rax
    00007ffe`50b406be b800000002      mov     eax,2000000h
    00007ffe`50b406c3 448bc8          mov     r9d,eax
    00007ffe`50b406c6 448bc0          mov     r8d,eax
    00007ffe`50b406c9 488d942448010000 lea     rdx,[rsp+148h]
    00007ffe`50b406d1 488d8c24e0000000 lea     rcx,[rsp+0E0h]
    00007ffe`50b406d9 ff1521901600    call    qword ptr [KERNELBASE!_imp_NtCreateUserProcess (00007ffe`50ca9700)]
    可知，NtCreateUserProcess第一个参数和第二个参数再rsp+0xE0和rsp+0x148处；查看该处的数据如下：
    1: kd> dpu 0000002f`4b67d260+E0 0000002f`4b67d260+148 
    0000002f`4b67d340  00000000`00000000
    0000002f`4b67d348  00000000`00000004
    0000002f`4b67d350  00000100`00000000
    0000002f`4b67d358  00000000`00000020
    0000002f`4b67d360  000001f2`d9b87cc0 "C:\Windows\UpdateAssistant\UpdateAssistant.exe"
    0000002f`4b67d368  00000000`00000000
    0000002f`4b67d370  00000000`00000000
    0000002f`4b67d378  0000002f`00000000
    0000002f`4b67d380  000001f2`d8d43580 "C:\Windows\UpdateAssistant\UpdateAssistant.exe /ClientI"
    0000002f`4b67d388  00000000`00000000
    0000002f`4b67d390  00000000`00008664
    0000002f`4b67d398  000001f2`d9d73c40 "ALLUSERSPROFILE=C:\ProgramData"
    0000002f`4b67d3a0  00000000`00000000
    0000002f`4b67d3a8  00000000`00000000
由此可知，svchost拉起的子进程为UpdateAssistant.exe，与之前分析得到的参数也相吻合。从调用栈可知，是在svchost创建子进程UpdateAssistant.exe时遍历的回调例程，通知给驱动软件做相应的处理。
## 3 结束语
本文详细地分析了系统实现进程回调安全机制的内部原理，借助IDA工具逆向系统镜像文件，分析了实现的关键代码部分，得到了关键数据结构及系统额外做的数据检测校验算法。对关键全局变量的作用也做了详细解释。此外，通过逆向分析，给出了整个机制的调用源与调用链。最后基于双机调试环境，动态查看内核中维护的进程回调例程表，并且下断点实际动态调试了整个过程。对于驱动开发，内核安全相关方面的研究工作者提供了该技术实现原理与机制。基于得到的关键数据结构和系统数据检验保护算法，可以解密关键字段后检测表项中的恶意代码，也可以用于安全厂商在对抗过程中，完全脱离系统提供的API手工构建表项，达到监控系统行为的目的。