这是我们在查看十六进制转储和acefile输出时注意到的前三件事：
  1. 模糊器将“广告”字段的一部分复制到其他字段：·压缩文件的内容为“SIO”，在十六进制转储中以橙色框标记。它是广告字符串“ _UNREGISTERED VER **SIO** N _”的一部分。  
·文件名字段包含字符串“RED VERSION _”，它是广告字符串“_ UNREGISTE **RED VERSION *** ”的一部分。
  2. 文件名字段中的路径在提取过程中用作“绝对路径”，而不是目标文件夹的相对路径（反斜杠是驱动器的根目录）。
  3. 提取文件名是“REDVERSION_¶”。似乎文件名字段中的星号已转换为下划线，并且 \x14\ （0x14）值在提取文件名中表示为“¶”。文件名字段的其他内容被忽略，因为在 \x14\ （0x14）值之后有一个空字符终止字符串。
为了找到harness忽略目标文件夹的约束并在提取过程中使用文件名字段作为绝对路径的原因，我们根据我们的假设进行了以下尝试。
我们的第一个假设是文件名字段的第一个字符（’\’）触发漏洞。不幸的是，经过快速检查后我们发现事实并非如此。经过额外检查后，我们得出了以下结论：
  1. 第一个字符应该是’/‘或‘\’。
  2. ‘*’应至少包含在文件名中一次;位置无关紧要。
触发错误的文件名字段示例： some _folder\some_file\\* .exe将被解压缩到C：
some_folder\some_file_.exe，星号将转换为下划线（_）。
鉴于对harness的fuzzing已经成功触发漏洞，现在是时候在WinRAR上测试我们精心设计的存档（例如，利用文件）文件了。
## 在WinRAR上尝试利用
乍一看，漏洞在WinRAR上按预期工作，因为sourbe目录是在驱动器C：\的根目录中创建的。但是，当我们进入“sourbe”文件夹（C：\sourbe）时，我们注意到文件未创建。
这些行为引发了两个问题：
`·为什么Harness和WinRAR的行为不同？`  
`·为什么创建了漏洞利用文件中指定的目录，而未创建提取的文件？`
## 为什么Harness和WinRAR的行为不同？
我们预计漏洞利用文件在WinRAR上的行为与在我们的Harness中表现的行为相同，原因如下：
    1.    dll（unacev2.dll）将文件提取到目标文件夹，而不是外部可执行文件（WinRAR或我们的Harness）。
    2.    当将参数/结构成员传递给dll时，我们的Harness完美地模仿WinRAR。
更深入的观察表明我们在第二点中的假设是错误的。我们的线程定义了4个回调指针，我们实现的回调与WinRAR的回调不同。让我们回到我们的Harness实现。
我们在调用名为ACEInitDll的导出函数时提到了这个签名。
`INT __stdcall ACEInitDll（pACEInitDllStruc DllData）;`
pACEInitDllStruc是指向sACEInitDLLStruc结构的指针。该结构的第一个成员是tACEGlobalDataStruc。此结构有许多成员，包括具有以下签名的回调函数的指针：
`INT（__stdcall * InfoCallbackProc）（pACEInfoCallbackProcStruc Info）;`
`INT（__stdcall * ErrorCallbackProc）（pACEErrorCallbackProcStruc Error）;`
`INT（__stdcall * RequestCallbackProc）（pACERequestCallbackProcStruc Request）;`
`INT（__stdcall * StateCallbackProc）（pACEStateCallbackProcStruc State）;`
这些回调在提取过程中由dll（unacev2.dll）调用。  
这些回调函数被用来作为即将发生的操作例如创建文件，创建目录，覆盖文件等的验证机制。  
外部回调/验证器获取有关即将发生的操作的信息，例如文件提取，并将其结果返回给dll。
如果允许该操作，则将[ACE_CALLBACK_RETURN_OK](https://github.com/FarGroup/FarManager/blob/806c80dff3e182c1c043fad9078490a9bf962456/plugins/newarc.ex/Modules/ace/Include/ACE/includes/CALLBACK.H#LC110)常量返回给dll。否则，如果回调函数不允许该操作，则返回以下常量：[ACE_CALLBACK_RETURN_CANCEL](https://github.com/FarGroup/FarManager/blob/806c80dff3e182c1c043fad9078490a9bf962456/plugins/newarc.ex/Modules/ace/Include/ACE/includes/CALLBACK.H#LC114)，同时终止操作。
有关这些回调函数的更多信息，请参阅[FarManager](https://github.com/FarGroup/FarManager/)中的[说明](https://github.com/FarGroup/FarManager/blob/806c80dff3e182c1c043fad9078490a9bf962456/plugins/newarc.ex/Modules/ace/Include/ACE/includes/CALLBACK.H#LC22)。
在我们构造的Harness中，除ErrorCallbackProc返回了ACE_CALLBACK_RETURN_CANCEL之外，所有回调函数返回了ACE_CALLBACK_RETURN_OK。
这就说明，WinRAR对提取的文件名进行了验证（在它们被提取和创建之后），并且由于WinRAR回调中的那些验证结果，终止了文件创建。这意味着在创建文件后，WinRAR会删除它。
## WinRAR验证器/回调
这是阻止文件创建的WinRAR回调验证器伪代码的一部分：
“SourceFileName”表示将提取的文件的相对路径。
该功能执行以下检查：
  1. 第一个字符不等于“\”或“/”。
  2. 文件名不以以下字符串“..\ ”或“../”开头，它们是“路径遍历”的小工具。
  3. 字符串中不存在以下“路径遍历”小工具： 
          1.    “\..\”
      2.    “\../”
      3.    “/../”
      4.    “/ ..\”
unacv2.dll中的提取函数调用WinRAR中的StateCallbackProc，并将ACE格式的文件名字段作为要提取的相对路径传递。
相对路径是由WinRAR的回调/验证机器检查的。验证器将ACE_CALLBACK_RETURN_CANCEL返回到dll，（因为文件名字段以反斜杠“\”开头）并且文件创建被终止。
以下字符串传递给WinRAR回调的验证器：
“\sourbe\RED VERSION_”
**注意：** 这是带有字段“\sourbe\RED VERSION _¶”的原始文件名。 “unacev2.dll”用下划线替换“_ ”。
## 为什么漏洞利用文件中指定的文件夹被创建，而解压缩的文件没有被创建？
由于dll中存在错误（“unacev2.dll”），即使从回调中返回ACE_CALLBACK_RETURN_CANCEL，也会由dll创建相对路径（ACE归档中的文件名字段）中指定的文件夹。
原因是unacev2.dll在创建文件夹之前调用外部验证器（回调），但是在创建文件夹之后它会过早地检查回调的返回值。因此，在调用WriteFile
API之前，它会在将内容写入提取的文件之前终止提取操作。
它实际上创建了待提取文件却没有向文件内写入内容。它调用CreateFile API  
然后检查回调函数的返回值。如果返回值是ACE_CALLBACK_RETURN_CANCEL，就会会删除先前通过调用CreateFile API创建的文件。
**附注：**
    我们找到了绕过删除文件的方法，但它只允许我们创建空文件。我们可以通过在文件的末尾添加“：”来绕过文件删除，该文件被视为备用数据流。如果回调返回ACE_CALLBACK_RETURN_CANCEL，那么dll会尝试删除文件的备用数据流而不是文件本身。
    如果相对路径字符串以“”（斜杠）开头，那么dll代码中还有另一个过滤函数会终止提取操作。这种操作发生在第一个提取阶段，调用其他过滤器函数之前。
    但是，通过将“*”或“？”字符（通配符）添加到压缩文件的相对路径（文件名字段），就可以跳过这个验证，同时，代码流可以继续并（部分）触发目录遍历漏洞。这就是模糊器生成的漏洞利用文件触发了我们harness中的漏洞的原因。由于WinRAR代码中的回调验证器，它不会触发WinRAR中的漏洞。
## 中级调查结果摘要
**·**
我们在unacev2.dll中发现了一个目录遍历漏洞。它使我们的Harness能够将文件提取到任意路径，完全忽略目标文件夹，并将提取的文件相对路径视为完整路径。
**·** 这个目录遍历漏洞（在前面的部分中总结）：  
1.第一个字符应该是’/‘或‘\’。  
2.’*‘应至少包含在文件名中一次。位置无关紧要。
**·** WinRAR部分容易受到Path Traversal的攻击：
    从WinRAR回调（ACE_CALLBACK_RETURN_CANCEL）获取终止代码后，unacev2.dll不会终止操作。由于延迟检查WinRAR回调的返回代码，因此会创建漏洞利用文件中指定的目录。
    提取的文件也是在exploit文件中指定的完整路径上创建的（没有内容），但在从回调中检查返回的代码（在调用WriteFile API之前）之后立即删除它。
    我们找到了绕过删除文件的方法，但它允许我们只创建空文件。
## 找到根本原因
此时，我们想弄清楚为什么忽略目标文件夹，并将归档文件的相对路径（文件名字段）视为完整路径。
为了实现这个目标，我们可以使用静态分析和调试，但我们决定使用更快的方法。我们使用[DynamoRio](https://github.com/DynamoRIO/dynamorio)来记录常规ACE文件的unacev2.dll中的代码覆盖率以及触发该错误的漏洞利用文件。然后我们使用[Lighthouse](https://github.com/gaasedelen/lighthouse)插件进行覆盖率计算，并从另一个中减去一个覆盖路径。
这些是我们得到的结果：
在“Coverage Overview”窗口中，我们可以看到一个独立的结果。
这意味着在第一次尝试中仅执行了一个基本块（在A中标记），在第二次尝试时未到达（在B中标记）。
Lighthouse插件用蓝色标记了变焦基本块的背景，如下图所示。
从代码覆盖率结果中，您可以理解漏洞利用文件不是通过分支的基本块（标记为蓝色），而是采用相反的基本块（错误条件，用红色箭头标记）。
如果代码流经过错误条件（红色箭头），那绿色框内的代码就会用“”（空字符串）替换目标文件夹，稍后调用sprintf函数，该函数将目标文件夹连接到相对路径提取的文件。
代码流向真假条件，分别用绿色和红色箭头标记，  
受到对名为GetDevicePathLen的函数的调用的影响（在红框内）。
如果调用GetDevicePathLen的结果等于0，则sprintf如下所示：
`sprintf（final_file_path，“％s％s”，destination_folder，file_relative_path）;`
反之，sprintf结果如下
`sprintf（final_file_path，“％s％s”，“”，file_relative_path）;`
最后一个sprintf是触发目录遍历漏洞的错误代码。
这意味着相对路径实际上将被视为应写入/创建的文件/目录的完整路径。
让我们看一下 **GetDevicePathLen** 函数，以便更好地理解根本原因：
提取文件的相对路径将传递给GetDevicePathLen。
它会检查设备或驱动器名称前缀是否出现在Path参数中，并返回该字符串的长度，如下所示：
**·** 该函数为C：\some_folder\some_file.ext这个路径返回3  
 **·** 该函数为\some_folder\some_file.ext这个路径返回1  
 **·** 该函数\\\LOCALHOST\C $\some_folder\some_file.ext这个路径返回15  
 **·** 该函数为\\\？ \Harddisk0Volume1\some_folder\some_file.ext这个路径返回21  
 **·** 该函数为some_folder\some_file.ext这个路径返回0
如果GetDevicePathLen的返回值大于0，则提取文件的相对路径将被视为完整路径，因为在调用sprintf期间目标文件夹被空字符串替换，这会触发目录遍历漏洞。
但是，通过省略在调用GetDevicePathLen之前不允许的任何序列，有一个“清除”提取文件的相对路径的函数。