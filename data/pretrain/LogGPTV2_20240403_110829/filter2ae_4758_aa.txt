**作者：LoRexxar'@知道创宇404区块链安全研究团队  
时间：2018年11月12日**
这次比赛为了顺应潮流，HCTF出了3道智能合约的题目，其中1道是逆向，2道是智能合约的代码审计题目。
ez2win是一份标准的合约代币，在一次审计的过程中我发现，如果某些私有函数没有加上private，可以导致任意转账，是个蛮有意思的问题，但也由于太简单，所以想给大家opcode，大家自己去逆，由于源码及其简单，逆向难度不会太大，但可惜没有一个人做出来，被迫放源码，再加上这题本来就简单，重放流量可以抄作业，有点儿可惜。
bet2loss是我在审计dice2win类源码的时候发现的问题，但出题的时候犯傻了，在出题的时候想到如果有人想用薅羊毛的方式去拿flag也挺有意思的，所以故意留了transfer接口给大家，为了能让这个地方合理，我就把发奖也改用了transfer，结果把我预期的重放漏洞给修了...
bet2loss这题在服务端用web3.py，客户端用metamask+web3.js完成，在开发过程中，还经历了metamask的一次大更新，写好的代码忽然就跑不了了，换了新的api接口...简直历经磨难。
这次比赛出题效果不理想，没想到现在的智能合约大环境有这么差，在之前wctf大师赛的时候，duca出的一道智能合约题目超复杂，上百行的合约都被从opcode逆了出来，可这次没想到没人做得到，有点儿可惜。不管智能合约以后会不会成为热点，但就目前而言，合约的安全层面还处于比较浅显的级别，对于安全从业者来说，不断走在开发前面不是一件好事吗？
下面的所有题目都布在ropsten上，其实是为了参赛者体验好一点儿，毕竟要涉及到看events和源码。有兴趣还可以去看。
### ez2win
    0x71feca5f0ff0123a60ef2871ba6a6e5d289942ef for ropsten
    D2GBToken is onsale. we will airdrop each person 10 D2GBTOKEN. You can transcat with others as you like.
    only winner can get more than 10000000, but no one can do it.
    function PayForFlag(string b64email) public payable returns (bool success){
        require (_balances[msg.sender] > 10000000);
          emit GetFlag(b64email, "Get flag!");
      }
    hint1:you should recover eht source code first. and break all eht concepts you've already hold 
    hint2: now open source for you, and its really ez
    sloved：15
    score：527.78
ez2win，除了漏洞点以外是一份超级标准的代币合约，加上一个单词，你也可以用这份合约去发行一份属于自己的合约代币。
让我们来看看代码
    pragma solidity ^0.4.24;
    /**
     * @title ERC20 interface
     * @dev see https://github.com/ethereum/EIPs/issues/20
     */
    interface IERC20 {
      function totalSupply() external view returns (uint256);
      function balanceOf(address who) external view returns (uint256);
      function allowance(address owner, address spender)
        external view returns (uint256);
      function transfer(address to, uint256 value) external returns (bool);
      function approve(address spender, uint256 value)
        external returns (bool);
      function transferFrom(address from, address to, uint256 value)
        external returns (bool);
      event Transfer(
        address indexed from,
        address indexed to,
        uint256 value
      );
      event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
      );
      event GetFlag(
        string b64email,
        string back
      );
    }
    /**
     * @title SafeMath
     * @dev Math operations with safety checks that revert on error
     */
    library SafeMath {
      /**
      * @dev Multiplies two numbers, reverts on overflow.
      */
      function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
        if (a == 0) {
          return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
      }
      /**
      * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
      */
      function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0); // Solidity only automatically asserts when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
      }
      /**
      * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
      */
      function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b = a);
        return c;
      }
    }
    /**
     * @title Standard ERC20 token
     *
     * @dev Implementation of the basic standard token.
     * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md
     * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
     */
    contract ERC20 is IERC20 {
      using SafeMath for uint256;
      mapping (address => uint256) public _balances;
      mapping (address => mapping (address => uint256)) public _allowed;
      mapping(address => bool) initialized;
      uint256 public _totalSupply;
      uint256 public constant _airdropAmount = 10;
      /**
      * @dev Total number of tokens in existence
      */
      function totalSupply() public view returns (uint256) {
        return _totalSupply;
      }
      /**
      * @dev Gets the balance of the specified address.
      * @param owner The address to query the balance of.
      * @return An uint256 representing the amount owned by the passed address.
      */
      function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
      }
      // airdrop
      function AirdropCheck() internal returns (bool success){
         if (!initialized[msg.sender]) {
                initialized[msg.sender] = true;
                _balances[msg.sender] = _airdropAmount;
                _totalSupply += _airdropAmount;
            }
            return true;
      }
      /**
       * @dev Function to check the amount of tokens that an owner allowed to a spender.
       * @param owner address The address which owns the funds.
       * @param spender address The address which will spend the funds.
       * @return A uint256 specifying the amount of tokens still available for the spender.
       */
      function allowance(
        address owner,
        address spender
       )
        public
        view
        returns (uint256)
      {
        return _allowed[owner][spender];
      }
      /**
      * @dev Transfer token for a specified address
      * @param to The address to transfer to.
      * @param value The amount to be transferred.
      */
      function transfer(address to, uint256 value) public returns (bool) {
        AirdropCheck();
        _transfer(msg.sender, to, value);
        return true;
      }
      /**
       * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
       * Beware that changing an allowance with this method brings the risk that someone may use both the old
       * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
       * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
       * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
       * @param spender The address which will spend the funds.
       * @param value The amount of tokens to be spent.
       */
      function approve(address spender, uint256 value) public returns (bool) {
        require(spender != address(0));
        AirdropCheck();
        _allowed[msg.sender][spender] = value;
        return true;
      }
      /**
       * @dev Transfer tokens from one address to another
       * @param from address The address which you want to send tokens from
       * @param to address The address which you want to transfer to
       * @param value uint256 the amount of tokens to be transferred
       */
      function transferFrom(
        address from,
        address to,
        uint256 value
      )
        public
        returns (bool)
      {
        require(value  10000000);
          emit GetFlag(b64email, "Get flag!");
      }
    }
每个用户都会空投10 D2GBToken作为初始资金，合约里基本都是涉及到转账的函数，常用的转账函数是
      function transfer(address to, uint256 value) public returns (bool) {
        AirdropCheck();
        _transfer(msg.sender, to, value);
        return true;
      }
      function transferFrom(address from, address to, uint256 value) public returns (bool) {
        require(value  0); // Solidity only automatically asserts when dividing by 0
            uint256 c = a / b;
            // assert(a == b * c + a % b); // There is no case in which this doesn't hold
            return c;
        }
        /**
        * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
        */
        function sub(uint256 a, uint256 b) internal pure returns (uint256) {
            require(b = a);
            return c;
        }
    }
    /**
     * @title Standard ERC20 token
     *
     * @dev Implementation of the basic standard token.
     * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md