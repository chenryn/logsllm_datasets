        5fc6426f AcroRd32!PDAlternatesGetCosObj+0x0001d51f
        5fc2b14b AcroRd32!CTJPEGWriter::CTJPEGWriter+0x000b9c1b
        5fba268b AcroRd32!CTJPEGWriter::CTJPEGWriter+0x0003115b
        5fba1761 AcroRd32!CTJPEGWriter::CTJPEGWriter+0x00030231
        5fb860d4 AcroRd32!CTJPEGWriter::CTJPEGWriter+0x00014ba4
    5fb85688 AcroRd32!CTJPEGWriter::CTJPEGWriter+0x00014158
这个0x1c内存块随后被释放，但在后面会被重新使用，从而导致崩溃：
    (c20.5e8): Access violation - code c0000005 (first chance)
    First chance exceptions are reported before any exception handling.
    This exception may be expected and handled.
    eax=17d2acb8 ebx=29d26fe0 ecx=29d26fe0 edx=771f6c74 esi=292c2fd8 edi=292c2fd0
    eip=558e2961 esp=0018eee8 ebp=0018eef8 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246
    Annots!PlugInMain+0x9ea60:
    558e2961 ff7318          push    dword ptr [ebx+18h]  ds:0023:29d26ff8=????????
    0:000> dd ebx
    29d26fe0  ???????? ???????? ???????? ????????
    29d26ff0  ???????? ???????? ???????? ????????
    29d27000  ???????? ???????? ???????? ????????
    29d27010  ???????? ???????? ???????? ????????
    29d27020  ???????? ???????? ???????? ????????
    29d27030  ???????? ???????? ???????? ????????
    29d27040  ???????? ???????? ???????? ????????
    29d27050  ???????? ???????? ???????? ????????
在禁用页堆（Page Heap）的情况下，这种指针解引用通常会成功，并且导致进一步的内存损坏（Memory
Corruption）。通过适当的内存布局操作，可以对其实现滥用，并实现任意代码执行。  
请注意，为了让此PoC触发内存损坏，需要将PoC文件添加到首选项中的“安全Security（增强Enhanced）”中的受信任列表。
###  2.5 时间线
2018年1月23日 向厂商提交漏洞  
2018年5月15日 公开发布
###  2.6 贡献者
该漏洞由思科Talos团队的Aleksandar Nikolic发现。
## 三、ANFancyAlertImpl远程执行代码漏洞（CVE-2018-4947）
###  3.1 概述
我们使用版本号为2018.009.20044的Adobe Acrobat Reader
DC打开PDF文档时，嵌入在PDF文件中的特定JavaScript脚本可能会导致一个指向先前被释放对象的指针重新被使用。如果攻击者利用该漏洞对内存进行操作，可能会导致敏感内存泄漏或任意代码执行的风险。要触发该漏洞，需要被感染用户打开恶意文件或访问恶意网站。
###  3.2 CVSSv3评分
6.8 – CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:H/I:H/A:H
###  3.3 通用弱点枚举（CWE）
CWE-908: 使用未经初始化的资源
###  3.4 漏洞细节
Adobe Acrobat Reader
DC支持在PDF中嵌入JavaScript脚本，从而允许阅读并使用交互式PDF表单。该功能特性为攻击者提供了精确控制内存布局的能力，使其从另一个攻击面实现攻击行为。  
在执行一段JavaScript代码时，可能会由于某种特殊情况而导致内存损坏。在这里我们需要指出，下面的这三行都需要更高权限执行，也就是说它们必须要在受信任的PDF文件中执行：
    var a =  this.Collab.drivers;
    this.SetRSSMethods( ); 
    this.ANFancyAlertImpl(this);
在调用ANFancyAlertImpl(this)时，将会分配一个内存对象。指向此对象的指针后续会传递给其他函数，但并不会对其进行初始化。这一问题将导致同一内存区域的先前内容未被定义，从而导致内存损坏，最终导致存在任意代码执行的风险。  
对象中两个指针最后被用作memcpy调用中的第二个参数，这样就很容易被利用，导致出现基于堆的缓冲区溢出：
    (660.8f0): Access violation - code c0000005 (first chance)
    First chance exceptions are reported before any exception handling.
    This exception may be expected and handled.
    DCReaderplug_insAnnots.api
    Reader DCReaderplug_insAnnots.api - 
    eax=81818180 ebx=c0c0c0c0 ecx=c0c0c0c0 edx=c0c0c0c0 esi=c0c0c0c0 edi=36dbafe0
    eip=645ff26d esp=001ac70c ebp=001ac738 iopl=0         nv up ei pl nz na po cy
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00210203
    MSVCR120!memcpy+0x2a:
    645ff26d f3a4            rep movs byte ptr es:[edi],byte ptr [esi]
    0:000> k
     # ChildEBP RetAddr  
    00 001ac710 7748e62e MSVCR120!memcpy+0x2a [f:ddvctoolscrtcrtw32stringi386memcpy.asm @ 188] 
    WARNING: Stack unwind information not available. Following frames may be wrong.
    01 001ac738 7748e5a2 Annots!PlugInMain+0xa72d
    02 001ac760 7748e3c6 Annots!PlugInMain+0xa6a1
    03 001ac770 776412e1 Annots!PlugInMain+0xa4c5
    04 001ac780 774f7258 Annots!PlugInMain+0x1bd3e0
    05 001ac7ac 570bd6b2 Annots!PlugInMain+0x73357
    06 001ac81c 570c1c35 EScript!mozilla::HashBytes+0x2d050
    07 001ac84c 5709387b EScript!mozilla::HashBytes+0x315d3
    08 001ac8dc 570932df EScript!mozilla::HashBytes+0x3219
    09 001ac8f8 570bd21d EScript!mozilla::HashBytes+0x2c7d
    0a 001ac944 570bd1b0 EScript!mozilla::HashBytes+0x2cbbb
通过回溯几个函数调用，我们可以发现memcpy参数的来源：
    0:000> bp Annots!PluginMain+0x1bd3db b
    breakpoint 0 redefined
    0:000> g
    Breakpoint 0 hit
    eax=267eef94 ebx=00000000 ecx=0030c438 edx=77898090 esi=1f266fc0 edi=2902efb8
    eip=776412dc esp=0030c414 ebp=0030c41c iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200246
    Annots!PlugInMain+0x1bd3db:
    776412dc e8cdd0e4ff      call    Annots!PlugInMain+0xa4ad (7748e3ae)
    0:000> u eip-1
    Annots!PlugInMain+0x1bd3da:
    776412db 50              push    eax
    776412dc e8cdd0e4ff      call    Annots!PlugInMain+0xa4ad (7748e3ae)
    776412e1 8b4508          mov     eax,dword ptr [ebp+8]
    776412e4 8be5            mov     esp,ebp
    776412e6 5d              pop     ebp
    776412e7 c20400          ret     4
    776412ea 55              push    ebp
    776412eb 8bec            mov     ebp,esp
    0:000> dd poi(eax)
    26a5efe8  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0
    26a5eff8  c0c0c0c0 c0c0c0c0 ???????? ????????
    26a5f008  ???????? ???????? ???????? ????????
    26a5f018  ???????? ???????? ???????? ????????
    26a5f028  ???????? ???????? ???????? ????????
    26a5f038  ???????? ???????? ???????? ????????
    26a5f048  ???????? ???????? ???????? ????????
    26a5f058  ???????? ???????? ???????? ????????
    0:000> !heap -p -a poi(eax)
        address 26a5efe8 found in
        _DPH_HEAP_ROOT @ 61000
        in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)
                                    26954750:         26a5efb8               48 -         26a5e000             2000
        6ac68e89 verifier!AVrfDebugPageHeapAllocate+0x00000229
        77276206 ntdll!RtlDebugAllocateHeap+0x00000030
        7723a127 ntdll!RtlpAllocateHeap+0x000000c4
        77205950 ntdll!RtlAllocateHeap+0x0000023a
        6326ed43 MSVCR120!malloc+0x00000049 [f:ddvctoolscrtcrtw32heapmalloc.c @ 92]