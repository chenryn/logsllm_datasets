**作者：非攻安全团队  
原文链接：**
Cobalt
Strike，是一款国外开发的渗透测试神器，其强大的内网穿透能力及多样化的攻击方式使其成为众多APT组织的首选。如何有效地检测和识别Cobalt
Strike服务器一直以来都是安全设备厂商和企业安全关注的焦点。
近日，F-Secure的安全研究员发布了一篇文章讲述了如何探测Cobalt Strike DNS重定向服务。其主要探测方式是向Cobalt
Strike服务器发起多个不同域名的查询（包括A记录和TXT记录），然后对比每个查询的返回结果。如果返回结果相同，那么对应的服务器很可能就是潜在的Cobalt
Strike C2服务器。随后，我们对Cobalt Strike DNS 服务代码层面进行了分析，发现了检测Cobalt Strike DNS
服务的另一种方法，并选择在某大型演练活动后进行发布。
### 01 Stager 分析
在对代码分析前，我们有必要通过抓包简单了解Cobalt Strike DNS Beacon与DNS Server的通信过程。DNS
Beacon主要有两种形式。一种是带阶段下载的Stager，另一种是无阶段的Stageless。这里我们主要分析Stager
Beacon，本地搭建的Cobalt Strike版本为4.2，IP地址192.168.100.101，DNS
Listener绑定的域名为ns.dns.com，用到的profile配置如下:
    set host_stage "true";
    set maxdns          "255";
    set dns_max_txt     "252";
    set dns_idle        "74.125.196.113"; #google.com (change this to match your campaign)
    set dns_sleep       "0"; #    Force a sleep prior to each individual DNS request. (in milliseconds)
    set dns_stager_prepend ".resources.123456.";
    set dns_stager_subhost ".feeds.123456.";
运行Stager的Beacon后，通过WireShark可以观察到Beacon与Cobalt Strike的通信过程。捕获的数据看下图:
![
](https://images.seebug.org/content/images/2021/04/e39ef280-7f7c-4f9b-b3d8-5f12b06b385b.png-w331s)
其中ns.dns.com是Cobalt Strike
Listener中绑定的域名，而.feeds.123456.是我们在profile中配置的dns_stager_subhost值。整个通信的过程中Beacon请求的都是TXT记录。
通过nslookup请求aaa.feeds.123456.ns.dns.com的TXT记录，查看返回结果可以看到传输的数据都在text字段中，而数据开头的.resource.123456.是我们profile中dns_stager_prepend的值。
![
](https://images.seebug.org/content/images/2021/04/d0bea3a8-e705-46c0-9da4-34d67b85ba66.png-w331s)
进一步分析后发现，Beacon请求的第一个域名是aaa.feeds.123456.ns.dns.com，然后是baa.feeds.123456.ns.dns.com，随后按照一定顺序发出大量的TXT记录查询，直到最后一个请求tkc.feeds.123456.ns.dns.com。请求顺序可以表示如下：
    aaa.feeds.123456.ns.dns.com
    baa.feeds.123456.ns.dns.com
               :
    zaa.feeds.123456.ns.dns.com
    aba.feeds.123456.ns.dns.com  
    cba.feeds.123456.ns.dns.com
               :
    zba.feeds.123456.ns.dns.com
    aca.feeds.123456.ns.dns.com  
    cca.feeds.123456.ns.dns.com
               :
    zza.feeds.123456.ns.dns.com
    aab.feeds.123456.ns.dns.com
    cab.feeds.123456.ns.dns.com
               :
    tkc.feeds.123456.ns.dns.com
不难发现，每次请求域名中的第一个子域都是固定三个字母，并按照一定顺序进行排列。排列规则看起来是包含26个字母的集合连续进行了2次笛卡尔积。所以很容易就可以模拟Stager
Beacon从Cobalt Strike DNS服务请求数据。
    def stager():
        buff = ""
        str1 = 'abcdefghijklmnopqrstuvwxyz'
        resolver = dns.resolver.Resolver()
        resolver.nameservers = ['192.168.100.101']
        for i in product(str1, str1, str1):
            dnsc = '{0}.feeds.123456.ns.dns.com'.format(''.join(i[::-1])).strip()
            try:
                text = resolver.resolve(dnsc, 'txt')[0].to_text().strip('"')
            except NoNameservers:
                break
            except:
                return
            if text=="":
                break    
            #time.sleep(0.3)
            buff = buff + text
        return buff
查询结束后，将得到的数据进行拼接，最终数据可简单表示如下：
    .resources.123456.WYIIIIIIIIIIIIIIII7QZjAX...8ioYp8hnMyoYoIoAAgogoJAJAJAJAJAJAJAJAJAENFKFCEFOIAAAAAAAAFLIJNPFFIJOFIBMDPPHJAAAAPPNDGIPALFKCFGGIAEAAAAAAFHPPNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAAAAAAAHKDPGLIOCHPPLNKGNJINHEIMMEABKBEIKCFPBOAOAHDDPPFPKOGFBCDFFODANEJGBDANKODPGJIIIIPDDCODOGNCBLCMHHMPCEBNBMJKCF...AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA...
由于数据并不直观，所以还需要逆向Cobal
Strike的jar包源代码还原数据处理的过程。在使用Idea反编译后，可以直接定位到加密的入口是在beacon\beaconDns.java中的setPayloadStage()函数，而传入的数据var1则是DNS
Beacon的Shellcode，也就是Stager Beacon请求的最终数据。
    public void setPayloadStage(byte[] var1) {
        this.stage = this.c2profile.getString(".dns_stager_prepend") + ArtifactUtils.AlphaEncode(var1);
    }
setPayloadStage()函数首先获取的是profile中dns_stager_prepend值，也就是.resource.123456.，然后调用了AlphaEncode()函数加密Shellcode并与前面获取的值拼接。
跟进AlphaEncode()函数发现其位于common\BaseArtifactUtils.java
    public static String AlphaEncode(byte[] var0) {
        AssertUtils.Test(var0.length > 16384, "AlphaEncode used on a stager (or some other small thing)");
        return _AlphaEncode(var0);
    }
    public static String _AlphaEncode(byte[] var0) {
        String var1 = CommonUtils.bString(CommonUtils.readResource("resources/netbios.bin"));
        var1 = var1 + "gogo";
        var1 = var1 + NetBIOS.encode('A', var0);
        var1 = var1 + "aa";
        return var1;
    }
可以看到，对Shellcode只是进行简单的NetBios编码，编码后再和固定字符拼接。所以我们只需将字符串aa和gogo中间部分的数据提取出来进行NetBios解码便可以得到Shellcode。
以上过程很容易就可以用Python实现，可以参考如下代码:
    import time
    from dns.resolver import *
    from itertools import *
    def stager():
        buff = ""
        str1 = 'abcdefghijklmnopqrstuvwxyz'
        resolver = dns.resolver.Resolver()
        resolver.nameservers = ['192.168.100.101']
        for i in product(str1, str1, str1):
            dnsc = '{0}.feeds.123456.ns.dns.com'.format(''.join(i[::-1])).strip()
            try:
                text = resolver.resolve(dnsc, 'txt')[0].to_text().strip('"')
            except NoNameservers:
                break
            except:
                return
            if text=="":
                break    
            #time.sleep(0.3)
            buff = buff + text
        if "aa" in buff and "gogo" in buff:
            f = open("beacon.bin", "wb")
            f.write(bytearray(netbios_decode(buff.split('gogo')[-1].split('aa')[0])))
            f.close()
    def netbios_decode(netbios):
        i = iter(netbios.upper())
        try:
            return [((ord(c)-ord('A')) 4 && var1.toLowerCase().substring(3).startsWith(this.stager_subhost)) {
                      return this.serveStage(var1.substring(0, 3));
                  } else if (CommonUtils.isHexNumber(var4) && CommonUtils.isDNSBeacon(var4))                     {
                      var4 = CommonUtils.toNumberFromHex(var4, 0) + "";
                             ...
                             ...
                  }
              }
         }
    }
Cobalt
Strike服务器在处理DNS查询的时候会先对请求域名的前两个子域进行判断，比如请求的域名为aaa.bbb.ccc.com，会判断aaa的长度是不是等于3，bbb的值是不是等于stage。如果都满足就进入serveStage()函数。跟进后发现serveStage()函数也只是简单判断了stage的长度后就返回了请求对应的值。
    protected DNSServer.Response serveStage(String var1) {
        int var2 = CommonUtils.toTripleOffset(var1) * 255;
        if (this.stage.length() != 0 && var2 <= this.stage.length()) {
           return var2 + 255 < this.stage.length() ? DNSServer.TXT(CommonUtils.toBytes(this.stage.substring(var2, var2 + 255))) : DNSServer.TXT(CommonUtils.toBytes(this.stage.substring(var2)));
           } else {
           return DNSServer.TXT(new byte[0]);
        }
    }
也就是说，当请求的域名以aaa.stage.开头时，Cobalt Strike
服务器会直接响应我们的请求，请求aaa.stage.ns.dns.com等同于请求aaa.feeds.123456.ns.dns.com。
![
](https://images.seebug.org/content/images/2021/04/3a144a8e-3c99-404a-9129-02607e821009.png-w331s)
同时，由于Cobalt Strike服务器并没判断请求的域名后缀，当我们可以直接访问Cobalt Strike DNS服务的时候，可以直接忽略DNS
Listener绑定的域名直接请求数据。当然，在profile配置host_stage为true的时候，可以使用将上面的Python代码替换feeds.123456.ns.dns.com为stage.xxx，运行后依然可以下载DNS
Beacon的Shellcode。
![
](https://images.seebug.org/content/images/2021/04/c2ef54a0-904f-4ea9-9380-4c3d37069d38.png-w331s)
当host_stage配置为false的时候，返回的结果有些不一样。
![
](https://images.seebug.org/content/images/2021/04/70af8260-433f-4ffa-9c48-571c9be0deb0.png-w331s)
可以看到，Cobalt Strike服务器没有再返回Shellcode的数据，但是对以aaa.stage.开头的域名的TXT记录查询，Cobalt
Strike服务器依旧响应了TXT记录。而其它的域名则像F-Secure研究员发现的那样，返回的是A记录，并且解析的IP就是profile中dns_idle的值。
当请求的域名第一个子域长度不为3开头并且第二个子域不是stage的时候，Cobalt
Strike服务器还会进一步判断域名的第一个子域是否为cdn、api、www6、www、post。
    if (var4.length() == 3 && "stage".equals(var3.peekFirst())) {
        return this.serveStage(var4);
    } else {
        String var5;
        String var6;