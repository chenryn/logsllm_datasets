### 6.2 Security

To evaluate the security provided by our approach compared to a context-insensitive sanitization method, we counted the number of sinks that would be correctly auto-sanitized in our 1348 templates. We assume that a context-insensitive sanitization approach would apply HTML-entity encoding to all sinks, which is a common practice in popular frameworks such as Django [14]. Using a different sanitizer would likely yield worse results for context-insensitive approaches.

| No Sanitization | Context-Insensitive | Context-Sensitive | Runtime (ms) |
|-----------------|----------------------|--------------------|---------------|
| 0/1348 (0%)     | 982/1348 (72%)       | 1348/1348 (100%)   |               |
|                 |                      |                    |               |
| Chrome 9.0      | 234 (3.0%)           | 234 (3.0%)         | 406 (78.8%)   |
| FF 3.6          | 433 (9.6%)           | 433 (9.6%)         | 2074 (425%)   |
| Safari 5.0      | 195 (2.5%)           | 196 (3.1%)         | 550 (189%)    |
| Server: Java    | 431 (0.0%)           | 431 (0.0%)         | 2972 (510%)   |

**Figure 11:** Comparison of security and runtime overhead (in milliseconds) between our approach and existing context-insensitive approaches for server-side Java and client-side JavaScript code generated from our benchmarks. The last line shows the number of sinks auto-protected by each approach.

**Figure 12:** Distribution of inserted sanitizers. The inferred contexts and the corresponding inserted sanitizers vary significantly, highlighting the inadequacy of context-insensitive sanitization. The most commonly inserted sanitizer in our auto-sanitization benchmarks is `escapeHtml`, an HTML-entity encoding sanitizer.

The last row in Figure 11 indicates the number of sinks auto-protected by existing approaches. Context-insensitive sanitization adequately protects 72% of the total output prints, while the remaining 28% are insufficiently protected. Clearly, context-insensitive sanitization offers better protection than no sanitization strategy. On the other hand, context-sensitive sanitization provides full protection, whether the context inference is performed dynamically or through our static type inference approach. Figure 12 demonstrates that the inferred sanitizers varied significantly based on context across the 1348 output points, further illustrating the inadequacy of context-insensitive sanitization.

### 6.3 Performance

We measured and compared the runtime overhead incurred by our context-sensitive auto-sanitization with other approaches, presenting the results in Figure 11. Google Closure Templates can be compiled into both JavaScript and Java. For compiled JavaScript functions, we recorded the time across 10 trial runs in three major web browsers. For compiled Java functions, we recorded the time across 10 trial runs under the same inputs.

The baseline "no auto-sanitization" approach overhead was obtained by compiling vanilla templates without any developer-applied manual sanitizers. For our approach, we enabled our CSAS (Context-Sensitive Auto-Sanitization) implementation. To compare the overhead of context-insensitive auto-sanitization, we augmented all output points with the `escapeHtml` sanitizer during compilation. A direct comparison to Google AutoEscape, the only known context-sensitive sanitization approach in templating systems, was not possible because it does not handle rich language features like if-else and loops, which create context ambiguities and are pervasive in our benchmarks. A detailed explanation is provided in Section 7.

To emulate a purely context-sensitive runtime parsing (CSRP) approach, we implemented this technique for our templating language. For Java, we used an off-the-shelf parser from the open-source Google AutoEscape implementation in GWT [15]. For JavaScript, since no similar parser was available, we created a parser implementation mirroring the Java-based parser. Our implementation closely matched GWT's public implementation for Java, as the overhead was in the same range.

**Results:**

- **JavaScript Compilation Target:** The time taken for parsing and rendering the output of all compiled template output (total 782.584 KB) in three major web browsers, averaged over 10 runs, is shown in Figure 11. The costs lie between 78% and 4.24x for the pure CSRP approach, while our approach incurs between 3-9.6% overhead over no sanitization. The primary reason for the difference is that the CSRP approach requires parsing all constant strings and determining the context of untrusted data at runtime, which is a significant saving in our static type inference approach. Our overhead in JavaScript is due to the application of the sanitizer, resulting in nearly the same overhead as the context-insensitive sanitization approach.

- **Java Compilation Target:** The pure CSRP approach has a 510% overhead, whereas our approach and the context-insensitive approach incur no statistically discernible overhead. In summary, our approach achieves the benefits of context-sensitive sanitization with overhead comparable to a large fraction of other widely used frameworks.

We note that Closure templates capture the HTML output logic with minimal subsidiary application logic, making our benchmarks heavy in string concatenations and writes to output buffers. As a result, our benchmarks are highly CPU-intensive, and the runtime costs evaluated here may be amortized in full-blown applications by other latencies (computation of other logic, database accesses, network, and file-system operations). XSS-GUARD reports an overhead up to 42% for the CSRP approach [5]. We believe our benchmarks are suitable for precisely measuring the performance costs of the HTML output logic alone. Further performance optimizations can be achieved for our approach, as done in GWT, through orthogonal optimizations like caching, which mask disk load latencies.

### 7. Related Work

Google AutoEscape, the only other context-sensitive sanitization approach in templating frameworks we are aware of, does not handle the rich language constructs we support—it does not handle conditionals, loops, or call operations [3]. It provides safety in straight-line template code, where straight-line parsing and context determination suffice. To improve performance, it caches templates and the sanitization requirements for untrusted inputs. Templates can then be included in Java and C code [15, 3]. As outlined in this paper, with rich constructs, path-sensitivity becomes a challenging issue, and sanitization requirements for untrusted inputs vary from one execution path to another. AutoEscape’s caching optimization does not directly extend to code where sanitization requirements vary depending on executed paths. Our approach, instead, addresses the challenges arising from complex language features representative of richer templating systems like Closure Templates.

Context-inference and subsequent context-sensitive placement for .NET legacy applications are proposed in our recent work [43]. The approach proposed therein, though sound, is a per-path analysis and relies on achieving path coverage by dynamic testing. In contrast, the type-based approach in this work achieves full coverage through static type inference. The performance improvements in our recent dynamic approach rely heavily on the intuition that developers have manually applied context-sensitive sanitization correctly on most execution paths. The type-based approach in this work can apply sanitization correctly in code completely lacking previous developer-supplied sanitization. A potential drawback of our static approach is that theoretically, it may reject benign templates since it reasons about all paths, even those that may be infeasible. In our current evaluation, we have not encountered such cases.

Analysis techniques for finding scripting vulnerabilities have been widely researched [1, 2, 6, 18, 24, 27, 31–33, 37, 41, 42, 51, 52]. Defense architectures have targeted three broad categories: server-side techniques [5, 32, 43, 49, 52], purely browser-based techniques [4, 35], and client-server collaborative defenses [19, 26, 36, 46]. Unlike browser-based and client-server defenses, purely server-side approaches are applicable to server code without requiring modifications to web browsers. Our techniques exemplify this fact.

Among server-side approaches, strong typing has been proposed as an XSS defense mechanism in the work by Robertson et al. [39]. Our approach contrasts significantly with theirs in that it does not require any annotations or changes to the existing code, does not rely on strong typing primitives in the base language such as monads, and is a mixed static-dynamic type system for existing web templating frameworks and for retrofitting to existing code.

### 8. Conclusions

We present a new auto-sanitization defense to secure web application code from scripting attacks (such as XSS) by construction. We introduce context type qualifiers, a key new abstraction, and develop a type system directly applicable to today’s commercial templating languages. We have implemented the defense in Google Closure Templates, a state-of-the-art templating system that powers GMail and Google Docs. We find that our mostly static system has low performance overheads, is precise, and requires no additional annotations or developer effort. We hope that our abstractions and techniques can be extended to other complex languages and frameworks in the future towards the goal of eliminating scripting attacks in emerging web applications.

### 9. Acknowledgements

We thank Avik Chaudhuri, David Wagner, Joel Weinberger, Devdatta Akhawe, Stephen McCamant, Adrian Mettler, Pongsin Poosankam, and the anonymous reviewers for their insightful comments to improve this manuscript. This material is based upon work partially supported by the NSF under Grants No. 0311808, 0832943, 0448452, 0842694, 0627511, 0842695, 0831501, and 0424422, by the AFRL under Grant No. P010071555, by the ONR under MURI Grant No. N000140911081, and by the MURI program under AFOSR Grants No. FA9550-08-1-0352 and FA9550-09-1-0539. The second author is also supported by the Symantec Research Labs Graduate Fellowship. The third author conducted part of the work as a visiting faculty at Google.

### 10. References

[1] D. Balzarotti, M. Cova, V. Felmetsger, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna. Saner: Composing Static and Dynamic Analysis to Validate Sanitization in Web Applications. In Proceedings of the IEEE Symposium on Security and Privacy, Oakland, CA, May 2008.

[2] S. Bandhakavi, S. T. King, P. Madhusudan, and M. Winslett. VEX: Vetting browser extensions for security vulnerabilities, 2010.

[3] Google autoescape implementation for ctemplate (C code). http://google-ctemplate.googlecode.com/svn/trunk/doc/auto_escape.html.

[4] D. Bates, A. Barth, and C. Jackson. Regular expressions considered harmful in client-side XSS filters. In Proceedings of the 19th international conference on World wide web, WWW '10, 2010.

[5] P. Bisht and V. N. Venkatakrishnan. XSS-GUARD: Precise dynamic prevention of cross-site scripting attacks. In Detection of Intrusions and Malware, and Vulnerability Assessment, 2008.

[6] H. Bojinov, E. Bursztein, and D. Boneh. XCS: Cross channel scripting and its impact on web applications. In CCS, 2009.

[7] Google Analytics XSS vulnerability. http://spareclockcycles.org/2011/02/03/google-analytics-xss-vulnerability/.

[8] Google XSS Flaw in Website Optimizer Scripts explained. http://www.acunetix.com/blog/web-security-zone/articles/google-xss-website-optimizer-scripts/.

[9] How I met your girlfriend, DEFCON'10. http://ohack.us/xss/2010-defcon.ppt.

[10] XSS Attack Identified and Patch-Twitter. http://status.twitter.com/post/1161435117/xss-attack-linebreak-identified-and-patched.

[11] ClearSilver: Template Filters. http://www.clearsilver.net/docs/man_filters.hdf.

[12] CodeIgniter/system/libraries/Security.php. https://bitbucket.org/ellislab/codeigniter/src/8af0fb079f90/system/libraries/Security.php.

[13] Ctemplate: Guide to Using Auto Escape. http://google-ctemplate.googlecode.com/svn/trunk/doc/auto_escape.html.

[14] django: Built-in template tags and filters. http://docs.djangoproject.com/en/dev/ref/templates/builtins.

[15] Google autoescape implementation for GWT (Java code). http://code.google.com/p/google-web-toolkit/source/browse/tools/lib/streamhtmlparser/streamhtmlparser-jsilver-r10/streamhtmlparser-jsilver-r10-1.5.jar.

[16] J. S. Foster, T. Terauchi, and A. Aiken. Flow-sensitive type qualifiers. In Proceedings of the ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation, PLDI '02, 2002.

[17] B. Gourdin, C. Soman, H. Bojinov, and E. Bursztein. Towards secure embedded web interfaces. In Proceedings of the Usenix Security Symposium, 2011.

[18] A. Guha, S. Krishnamurthi, and T. Jim. Using static analysis for AJAX intrusion detection. In Proceedings of the 18th international conference on World Wide Web, WWW '09.

[19] M. V. Gundy and H. Chen. Noncespaces: using randomization to enforce information flow tracking and thwart cross-site scripting attacks. 16th Annual Network & Distributed System Security Symposium, 2009.

[20] Google Web Toolkit: Developer’s Guide – SafeHtml. http://code.google.com/webtoolkit/doc/latest/DevGuideSecuritySafeHtml.html.

[21] R. Hansen. XSS cheat sheet. http://ha.ckers.org/xss.html.

[22] P. Hooimeijer, B. Livshits, D. Molnar, P. Saxena, and M. Veanes. Fast and precise sanitizer analysis with BEK. In Proceedings of the Usenix Security Symposium, 2011.

[23] HTML Purifier: Standards-Compliant HTML Filtering. http://htmlpurifier.org/.

[24] Y.-W. Huang, F. Yu, C. Hang, C.-H. Tsai, D.-T. Lee, and S.-Y. D. Song. A Systematic Analysis of XSS Sanitization in Web Application Frameworks. In Proceedings of the European Symposium on Research in Computer Security, 2011.

[25] Jifty Manual. http://jifty.org/view/JiftyManual.

[26] T. Jim, N. Swamy, and M. Hicks. BEEP: Browser-enforced embedded policies. 16th International World Wide Web Conference, 2007.

[27] N. Jovanovic, C. Krügel, and E. Kirda. Pixy: A static analysis tool for detecting web application vulnerabilities (short paper). In IEEE Symposium on Security and Privacy, 2006.

[28] Quasis demo - JavaScript shell 1.4. http://js-quasis-libraries-and-repl.googlecode.com/svn/trunk/index.html.

[29] A. Kiezun, V. Ganesh, P. J. Guo, P. Hooimeijer, and M. D. Ernst. HAMPI: A solver for string constraints. In International Symposium on Software Testing and Analysis, 2009.

[30] kses - PHP HTML/XHTML filter.