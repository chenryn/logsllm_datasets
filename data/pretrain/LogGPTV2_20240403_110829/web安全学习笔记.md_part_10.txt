### 4.1 SQL 注入

在某些情况下，数据库处理引擎会检查数据表和列是否存在。因此，在这些情况下，数据表名和列名不能被占位符所替代。如果表名和列名是可控的，则可能会引入漏洞。

#### 4.1.1 预编译实现错误
部分语言引擎在实现上存在一定问题，可能会存在绕过漏洞的风险。

#### 4.1.2 参考文章
- **Tricks**
  - sqlmap time based inject 分析
  - SQLInjectionWiki
  - 常见数据库写入 Webshell 汇总
  - MSSQL 数据库攻击实战指北
- **Bypass**
  - SQL 注入 ByPass 的一些小技巧
  - Waf Bypass 之道
  - MySQL Bypass Wiki
- **NoSQL**
  - NoSQL 注入的分析和缓解
  - NoSQL 注入

### 4.2 XSS (跨站脚本)

XSS 全称为 Cross Site Scripting，为了与 CSS 区分开来简写为 XSS，中文名为跨站脚本。该漏洞发生在用户端，指的是在渲染过程中执行了不在预期过程中的 JavaScript 代码。XSS 通常用于获取 Cookie、以受攻击者的身份进行操作等行为。

#### 4.2.1 XSS 分类

##### 简介
XSS 主要分为以下几类：
- **反射型 XSS**
  - 反射型 XSS 是比较常见和广泛的一类。例如，当一个网站的代码中包含类似 `hello, $_GET['user']";?>` 的语句时，访问 `/?user=<script>alert('XSS')</script>` 将执行预设好的 JavaScript 代码。
  - 反射型 XSS 通常出现在搜索等功能中，需要被攻击者点击对应的链接才能触发，并且受到 XSS Auditor 和 NoScript 等防御手段的影响较大。
- **存储型 XSS**
  - 存储型 XSS 相比反射型来说危害更大。在这种漏洞中，攻击者能够把攻击载荷存入服务器的数据库中，造成持久化的攻击。
- **DOM 型 XSS**
  - DOM 型 XSS 与服务器的解析响应没有直接关系，而是在 JavaScript 脚本动态执行的过程中产生的。
  - 例如：
    ```javascript
    function xsstest() {
        var str = document.getElementById("input").value;
        document.getElementById("output").innerHTML = str;
    }
    ```
    输入 `x' onerror='javascript:alert(/xss/)` 即可触发。
- **Blind XSS**
  - Blind XSS 是存储型 XSS 的一种，它保存在某些存储中，当“受害者”访问这个页面时执行，并且在文档对象模型 (DOM) 中呈现 payload。它被称为 Blind 的原因是因为它通常发生在不暴露给用户的功能上。

#### 4.2.2 危害
存在 XSS 漏洞时，可能会导致以下几种情况：
1. 用户的 Cookie 被获取，其中可能存在 Session ID 等敏感信息。若服务器端没有做相应防护，攻击者可用对应 Cookie 登录服务器。
2. 攻击者能够在一定限度内记录用户的键盘输入。
3. 攻击者通过 CSRF 等方式以用户身份执行危险操作。
4. XSS 蠕虫。
5. 获取用户浏览器信息。
6. 利用 XSS 漏洞扫描用户内网。

#### 4.2.3 同源策略

##### 简介
同源策略限制了不同源之间如何进行资源交互，是用于隔离潜在恶意文件的重要安全机制。是否同源由 URL 决定，URL 由协议、域名、端口和路径组成，如果两个 URL 的协议、域名和端口相同，则表示它们同源。

- **file 域的同源策略**
  - 在之前的浏览器中，任意两个 file 域的 URI 被认为是同源的。本地磁盘上的任何 HTML 文件都可以读取本地磁盘上的任何其他文件。
  - 从 Gecko 1.9 开始，文件使用了更细致的同源策略，只有当源文件的父目录是目标文件的祖先目录时，文件才能读取另一个文件。
- **cookie 的同源策略**
  - cookie 使用不同的源定义方式，一个页面可以为本域和任何父域设置 cookie，只要是父域不是公共后缀 (public suffix) 即可。
  - 不管使用哪个协议 (HTTP/HTTPS) 或端口号，浏览器都允许给定的域以及其任何子域名访问 cookie。设置 cookie 时，可以使用 domain / path / secure 和 http-only 标记来限定其访问性。
  - 因此，`https://localhost:8080/` 和 `http://localhost:8081/` 的 Cookie 是共享的。
- **Flash/SilverLight 跨域**
  - 浏览器的各种插件也存在跨域需求。通常是通过在服务器配置 `crossdomain.xml`，设置本服务允许哪些域名的跨域访问。
  - 客户端会请求此文件，如果发现自己的域名在访问列表里，就发起真正的请求，否则不发送请求。
- **源的更改**
  - 同源策略认为域和子域属于不同的域，例如 `child1.a.com` 与 `a.com` / `child1.a.com` 与 `child2.a.com` / `xxx.child1.a.com` 与 `child1.a.com` 两两不同源。
  - 对于这种情况，可以在两个方面各自设置 `document.domain='a.com'` 来改变其源来实现以上任意两个页面之间的通信。
  - 另外因为浏览器单独保存端口号，这种赋值会导致端口号被重写为 null。

##### 跨源访问
同源策略控制了不同源之间的交互，这些交互通常分为三类：
- **通常允许跨域写操作 (Cross-origin writes)**
  - 链接 (links)
  - 重定向
  - 表单提交
- **通常允许跨域资源嵌入 (Cross-origin embedding)**
- **通常不允许跨域读操作 (Cross-origin reads)**

可能嵌入跨源资源的一些示例有：
- `<script>` 标签嵌入跨域脚本。语法错误信息只能在同源脚本中捕捉到。
- `<link>` 标签嵌入 CSS。由于 CSS 的松散语法规则，CSS 的跨域需要一个设置正确的 Content-Type 消息头。
- `<img>`, `<audio>`, `<video>` 嵌入多媒体资源。
- `<object>` 和 `<embed>` 的插件。
- `@font-face` 引入的字体。一些浏览器允许跨域字体 (cross-origin fonts)，一些需要同源字体 (same-origin fonts)。
- `<frame>` 和 `<iframe>` 载入的任何资源。站点可以使用 X-Frame-Options 消息头来阻止这种形式的跨域交互。

##### JSONP 跨域
- JSONP 利用 `<script>` 标签的跨域能力实现跨域数据的访问，请求动态生成的 JavaScript 脚本同时带一个 callback 函数名作为参数。
- 服务端收到请求后，动态生成脚本产生数据，并在代码中以产生的数据为参数调用 callback 函数。
- JSONP 也存在一些安全问题，例如当对传入/传回参数没有做校验就直接执行返回的时候，会造成 XSS 问题。没有做 Referer 或 Token 校验就给出数据的时候，可能会造成数据泄露。
- 另外，JSONP 在没有设置 callback 函数的白名单情况下，可以合法地做一些设计之外的函数调用，引入问题。这种攻击也被称为 SOME 攻击。

##### 跨源脚本 API 访问
- JavaScript 的 APIs 如 `iframe.contentWindow`, `window.parent`, `window.open` 和 `window.opener` 允许文档间相互引用。当两个文档的源不同时，这些引用方式将对 `window` 和 `location` 对象的访问添加限制。
- `window` 允许跨源访问的方法有：
  - `window.blur`
  - `window.close`
  - `window.focus`
  - `window.postMessage`
- `window` 允许跨源访问的属性有：
  - `window.closed`
  - `window.frames`
  - `window.length`
  - `window.location`
  - `window.opener`
  - `window.parent`
  - `window.self`
  - `window.top`
  - `window.window`
  - 其中 `window.location` 允许读/写，其他的属性只允许读。

##### 跨源数据存储访问
- 存储在浏览器中的数据，如 `localStorage` 和 `IndexedDB`，以源进行分割。每个源都拥有自己单独的存储空间，一个源中的 JavaScript 脚本不能对属于其它源的数据进行读写操作。

#### 4.2.4 CORS (跨域资源共享)

CORS 是一个 W3C 标准，全称是跨域资源共享 (Cross-origin resource sharing)。通过这个标准，可以允许浏览器读取跨域的资源。

##### 常见请求头
- **Origin**
  - 预检请求或实际请求的源站 URI，浏览器请求默认会发送该字段。
  - `Origin: <origin>`
- **Access-Control-Request-Method**
  - 声明请求使用的方法。
  - `Access-Control-Request-Method: <method>`
- **Access-Control-Request-Headers**
  - 声明请求使用的 header 字段。
  - `Access-Control-Request-Headers: <header-name>[, <header-name>]`

##### 常见返回头
- **Access-Control-Allow-Origin**
  - 声明允许访问的源外域 URI。
  - 对于携带身份凭证的请求不可使用通配符 *。
  - `Access-Control-Allow-Origin: <origin> | *`
- **Access-Control-Expose-Headers**
  - 声明允许暴露的头。
  - `Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header`
- **Access-Control-Max-Age**
  - 声明 Cache 时间。
  - `Access-Control-Max-Age: <delta-seconds>`
- **Access-Control-Allow-Credentials**
  - 声明是否允许在请求中带入。
  - `Access-Control-Allow-Credentials: true`
- **Access-Control-Allow-Methods**
  - 声明允许的访问方式。
  - `Access-Control-Allow-Methods: <method>[, <method>]`
- **Access-Control-Allow-Headers**
  - 声明允许的头。
  - `Access-Control-Allow-Headers: <header-field>[, <header-field>]`

##### 防御建议
- 如非必要不开启 CORS。
- 定义详细的白名单，不使用通配符，仅配置所需要的头。
- 配置 `Vary: Origin` 头部。
- 如非必要不使用 `Access-Control-Allow-Credentials`。
- 限制缓存的时间。

##### 阻止跨源访问
- 阻止跨域写操作，可以检测请求中的 CSRF token，这个标记被称为 Cross-Site Request Forgery (CSRF) 标记。
- 阻止资源的跨站读取，因为嵌入资源通常会暴露信息，需要保证资源是不可嵌入的。但是多数情况下浏览器都不会遵守 Content-Type 消息头。例如，如果在 HTML 文档中指定 `<script>` 标记，则浏览器会尝试将 HTML 解析为 JavaScript。

#### 4.2.5 CSP (内容安全策略)

##### CSP 是什么？
Content Security Policy，简称 CSP，译作内容安全策略。顾名思义，这个规范与内容安全有关，主要用于定义哪些资源可以被当前页面加载，减少 XSS 的发生。

##### 配置
CSP 策略可以通过 HTTP 头信息或者 meta 元素定义。

- **CSP 有三类：**
  - `Content-Security-Policy` (Google Chrome)
  - `X-Content-Security-Policy` (Firefox)
  - `X-WebKit-CSP` (WebKit-based browsers, e.g. Safari)

- **HTTP Header:**
  - `"Content-Security-Policy:" 策略`
  - `"Content-Security-Policy-Report-Only:" 策略`
  - HTTP `Content-Security-Policy` 头可以指定一个或多个资源是安全的，而 `Content-Security-Policy-Report-Only` 则是允许服务器检查（非强制）一个策略。多个头的策略定义由优先采用最先定义的。

- **HTML Meta:**
  - `指令说明`
  - `default-src`：定义资源默认加载策略
  - `connect-src`：定义 Ajax、WebSocket 等加载策略
  - `font-src`：定义 Font 加载策略
  - `frame-src`：定义 Frame 加载策略
  - `img-src`：定义图片加载策略
  - `media-src`：定义 `<audio>`, `<video>` 等引用资源加载策略
  - `object-src`：定义 `<object>`, `<applet>`, `<embed>` 等引用资源加载策略
  - `script-src`：定义 JS 加载策略
  - `style-src`：定义 CSS 加载策略
  - `base-uri`：定义 `<base>` 根 URL 策略，不使用 `default-src` 作为默认值
  - `sandbox`：值为 `allow-forms`，对资源启用 sandbox
  - `report-uri`：值为 `/report-uri`，提交日志

- **关键字**
  - `-`
    - 允许从任意 url 加载，除了 `data:`, `blob:`, `filesystem:` schemes
    - 例如：`img-src -`
  - `none`
    - 禁止从任何 url 加载资源
    - 例如：`object-src 'none'`
  - `self`
    - 只可以加载同源资源
    - 例如：`img-src 'self'`
  - `data:`
    - 可以通过 data 协议加载资源
    - 例如：`img-src 'self' data:`
  - `domain.example.com`
    - 例如：`img-src domain.example.com`
    - 只可以从特定的域加载资源
  - `*.example.com`
    - 例如：`img-src *.example.com`
    - 可以从任意 `example.com` 的子域处加载资源
  - `https://cdn.com`
    - 例如：`img-src https://cdn.com`