could also provide a forged or outdated previous transaction
Txprev. A transaction can be outdated even in the absence
of an attack, simply because two clients call
the contract
at approximately the same time. However, our system needs
to ensure no state transitions based on such an outdated
state are committed to the chain to prevent race conditions
and speciﬁcally TOCTOU vulnerabilities. Before signing the
resulting transaction Tx and sending it back to the client, the
service providers condition the validity of the new transaction
Tx on Txprev, i.e. Tx will only be accepted if Txprev was
committed to the blockchain, and it was the most recent
transaction of the contract account. This ensures that even
though a transaction based on an outdated (or false) previous
transaction may reach a quorum, it cannot be committed to
the blockchain since the validity criteria, which are checked
by miners, are not fulﬁlled.
It follows that a transaction with a quorum of signatures
must provide control-ﬂow integrity, directly references a single
valid previous state, and if it is accepted into the chain, is the
only such transaction referencing this state, which ensures a
unique serialization. Since a contract call that involves multiple
contracts requires a quorum for each involved contract and the
validity of the ﬁnal transaction is based on the previous states
of all involved contracts, the above applies to all contract calls
independent of whether they involve other contracts or not and
independent of client behavior, i.e. even if a client misbehaves
or colludes with malicious service providers.
Finally, we note that our system does not have any security
implications on parties that are not participating in a contract,
even if said contract has a malicious quorum. This follows
directly from the fact that Bitcontracts does not change the
protocol of the underlying cryptocurrency.
Liveness. The main liveness condition that a system like
Bitcontracts should ensure is that every transaction from an
honest client that does not conﬂict with another transaction
(i.e. one including the same contract and based on the same
state) is executed and can be committed to the blockchain.
Based on this deﬁnition, we make the following claim:
CLAIM 2. Given a contract call T from an honest user
involving k contracts Ci (1 ≤ i ≤ k) that deﬁne executing sets
11
ECi with quorum ti, the following holds: If the contract call
does not conﬂict with other contract call and an honest quorum
of size ti is reachable in ECi (for all 1 ≤ i ≤ k), liveness is
guaranteed for transaction T , i.e. T will be eventually executed
and committed.
PROOF. Since the client is honest, he eventually sends
the contract call to at least ti honest and reachable service
providers in ECi (for all 1 ≤ i ≤ k), who execute the contract
call and return the results to the client. Once the client has
received enough responses (i.e. a quorum from each contract),
he assembles and broadcasts the transaction for the underlying
cryptocurrency. Since there are no conﬂicting transactions, this
transaction will eventually be committed to the chain.
VIII.
IMPLEMENTATION
In this section, we describe a Bitcontracts Python library
for creating and running smart contracts that can be used
with a backend implementation for arbitrary cryptocurrencies
supporting the requirements listed in Section III-D. We also
describe a Bitcontracts backend for cryptocurrencies compat-
ible with Bitcoin script.
A. Python Library
Our Python library provides a base class from which all
smart contract classes must be derived. Once deployed, the
smart contract is an object that is stored serialized on the
blockchain. When a contract is run on a service provider,
the library (after checking the code and state hashes) ﬁrst re-
instantiates the contract object based on the state provided by
the client and then calls the method speciﬁed by the client
on this object with the provided inputs. Once the method
terminates, the library creates a list of state changes from the
previous state to the new state, serializes them, and stores them
in a transaction, which the service provider then signs.
The library also provides an API to smart contracts. In
our prototype, this API is limited to basic functions, such as
getting the smart contract balance, creating transfers of funds,
or calling other smart contracts, as well as decorators that
allow declaring functions as private (i.e. only callable by other
functions of this contract) or public (i.e. callable by anyone).
An example contract as well as a step-by-step description of its
execution is shown in Appendix B. Other API functionality,
e.g. some primitives such as getting the caller identity can
easily be added. Other functions supported in Ethereum, such
as retrieving the current block hash or the identity of the miner
would require support from the underlying cryptocurrency, and
cannot be added for Bitcoin.
For the execution of the smart contract, a separate execution
environment is set up. In our prototype, this is currently a
simple subprocess. However,
in a production environment,
contract execution needs to be executed in a sandboxed en-
vironment, e.g. by running the code in a Docker container,
since the contract code is not trusted by the service provider.
To ensure that all contract calls can achieve a quorum of
service providers, steps should be taken to ensure deterministic
execution of the contract code, e.g. by controlling the ran-
domness source available to the sandbox and by disallowing
multi-threading.
B. Instantiation for Bitcoin-like Currencies
Transactions in UTXO-based cryptocurrencies consist of
multiple inputs and multiple outputs (that can later again
be inputs to a transaction). A chain of three Transactions
resulting from contract deployment and different calls is shown
in Figure 3. Transactions resulting from a contract execution
using Bitcontracts have the components described in the
following.
Contract Input. The contract input is an output from the
previous contract call. We describe it in more detail below. A
contract creation transaction does not have any contract inputs.
Client Inputs. Any Bitcontracts transaction can have zero or
more client inputs. These inputs are used to send funds to the
contract.
Contract output. This output holds the balance of the smart
contract and is locked by a Bitcoin script specifying a multisig
condition. We use a P2SH output with a redeem script contain-
ing an m-out-of-n-multisig condition. The parameters m and
n as well as the public keys included in it, are chosen by the
creator of the smart contract and maintained by the providers
throughout calls to it. The rules for standard transactions of
Bitcoin and related cryptocurrencies allow for n ≤ 15 in such
redeem scripts (which effectively limits the maximum size of
the execution set to |E| = 15). The redeem script also contains
the hash of the code and the hash of the current state of
the smart contract. These values are pushed to the stack and
dropped, thus no additional efforts are required to redeem the
balance output. They must still be included, s.t. the provider
can check the code and state of the smart contract, received
alongside the previous transaction against the hashes contained
in it.
State Outputs. These outputs hold the state changes of the
contract call, i.e. all variables in the state that were altered
during this execution. State changes are stored as a key-
value-mapping from variable names to their new values. Using
Bitcoin’s OP_RETURN opcode, up to 80 bytes can be stored
in an output that is marked as non-redeemable, i.e. not stored
in the UTXO set of a Bitcoin client. However, due to Bitcoins
transaction propagation rules only one OP_RETURN output per
transaction is allowed which is rather limiting.
Several workarounds to this limitation are known and
were discussed by Sward et al. [42]. Our implementation
uses multisig outputs with three fake public keys containing
our data. Bitcoin allows storage of up to three public keys
(65 bytes each) in standard multisig outputs (i.e. non-P2SH),
which allows storing 195 bytes with an overhead of 15 bytes
per output. By arranging the state outputs contiguously, data
recovery is straight forward and no additional overhead is
incurred do to specifying data locations. With a maximum
transaction size of 100KB in Bitcoin we can store up to 92KB
of state updates. Note that, while this limits the number of
named contract ﬁelds that exist at the initialization of the
contract, the state size itself is not limited, e.g. a contract using
a list or a dictionary can grow to arbitrary sizes.
Client Outputs. These outputs pay money to clients. They can
be payouts from the smart contract, or change outputs for a
12
Contract Call Transaction
Multi-Contract Call Transaction
Contract A
Input
$65
Charlie
Input
$40
Contract Creation Transaction
Contract A
Output
$65
Bob
Input
$90
Contract A
Contract A
State
State
Outputs
Outputs
Bob
Change
$25
Contract A
Input
$50
Contract B
Input
$10
Bob
Input
$25
Contract A
Output
$50
Contract A
Contract A
State
State
Outputs
Outputs
Bob
Output
$10
Alice
Output
$15
Charlie
Change
$30
Contract A
Output
$30
Contract A
Contract A
State
State
Outputs
Outputs
Contract B
Output
$40
Contract B
Contract B
State
State
Outputs
Outputs
Bob
Change
$15
Fig. 3. Contract Transactions in UTXO-based cryptocurrencies. In the transaction on the left, Bob creates a smart contract and funds it with $65, which
results in a transaction containing a contract output with the funds stored in the contract, several state outputs for persistent storage and an output returning the
change to Bob. In the second transaction, Charlie calls the smart contract and sends some funds to it. The contract execution causes the contract to pay out
money to Alice and Bob, i.e. in addition to the contract and state outputs, the transactions contains outputs for Alice and Bob, as well as a change output for
Charlie. In the transaction on the right, Bob called contract A, which then called contract B. The contract and state outputs of contract A are listed ﬁrst, then
the same for contract B, and the change output to Bob is listed last.
client using an input larger than the value he intended to send
to the contract.
A are listed ﬁrst.
To create a smart contract, the client uses one or multiple
of his UTXOs as inputs to a transaction that has a contract
output with the initial contract funds, state outputs containing
the initial state and client outputs, e.g. a change output for the
client. In Figure 3 on the left, we show an example transaction,
in which Bob creates and funds a Bitcontracts contract.
To call a smart contract, the client ﬁrst has to assemble the
contract state. He does that by iterating through the contract
transactions and applying the state updates from each of them.
Note, that this can even be done using a lightweight client,
i.e. the client does not need to download the full chain of
the underlying cryptocurrency. Once the state is assembled, he
calls the smart contract by contacting the service providers as
described in Section IV-C and shown in Figure 2. The service
providers perform the required checks (e.g. matching contract
and state hashes), execute the contract and then assemble a
transaction. The transaction again contains a contract output
as described above, state outputs containing the state changes
and potentially client outputs. An example is shown in Figure 3
in the middle, where Charlie sends some funds to a smart
contract, which causes a payout to Alice and Bob and the
return of some change to Charlie.
A smart contract call may include subcalls to other smart
contracts. In such a case,
the client provides all required
information for all involved smart contracts to the service
provider and contacts the necessary service providers from
all executing sets (cf. Section IV-D). The service providers
execute the contract as described above and when assembling
the transaction ensure that the contract and state outputs are
ordered in the order in which the contracts appeared in the call
chain. For example, in the last transaction in Figure 3 contract
B was called by contract A, therefore the outputs for contract
IX. EVALUATION
In this section, we ﬁrst evaluate Bitcontracts that is run
on top of popular legacy blockchain platforms (Section IX-A).
After that, we evaluate storage and cost of popular real-world
smart contracts on top of Bitcontracts (Section IX-B).
A. Bitcontracts on Legacy Cryptocurrencies
For our ﬁrst evaluation, we consider running Bitcontracts
on top of 6 popular legacy cryptocurrencies (Bitcoin, Bitcoin
Cash, Litecoin, Dash, Dogecoin, Zcash) and we compare the
costs for data changes as well as the throughput in terms of
the amount of data changed to Ethereum. Ethereum follows a
roughly similar resource management model, where transac-
tion fees depend on computation complexity and state change
storage. We also discuss separately the costs of smart contract
execution in others systems, e.g., EOS, that follow a different
fee model.
Scalability. As mentioned above, the multisig functionality of
Bitcoin and related cryptocurrencies enable execution sets up
to the size of |E| = 15 service providers.
Key management overhead. The key management overhead
for service providers is low regarding storage, computation,
and communication. Each service provider only needs to store
a single private key that he can use for all contracts for which
he is responsible. Each service provider needs to only produce
one signature for each contract execution and there is no
communication required between service providers.
Computation. The main focus of our work is contract calls
that are similar computations as ones seen today in Ethereum,
i.e. in the order of milliseconds. However, nothing limits the
13
BITCONTRACTS COST EVALUATION. THE TABLE SHOWS 1) TRANSACTION FEES IN POPULAR CRYPTOCURRENCIES AND 2) THE COST OF
TABLE II.
BITCONTRACTS TRANSACTIONS PER STATE CHANGE FOR EACH CURRENCY BASED ON TRANSACTION FEE DATA FROM 2020-06-08. THE TABLE ALSO
SHOWS 3) MAXIMUM TRANSACTION SIZE FOR EACH CURRENCY AND 4) THE MAXIMUM STATE CHANGE PER TRANSACTIONS FOR BITCONTRACTS ON
EACH CURRENCY, AS WELL AS 5) THE MAXIMUM STATE-CHANGE THROUGHPUT. IN 6) THESE COSTS AND LIMITS ARE COMPARED TO THE CURRENT
ETHEREUM SYSTEM (WITHOUT BITCONTRACTS).
Storage Cost
Max. Storage
Throughput
1) Transaction fee ($/KB)
2) Bitcontracts state-change cost ($/KB)
3) Maximum tx size
4) Bitcontracts max. state-change per tx
5) Bitcontracts max. Throughput (KB/s)
BTC
0.73
0.80
100KB
92KB
1.5
BCH
0.005
0.006
100KB
92KB
49.0
Bitcontracts
LTC