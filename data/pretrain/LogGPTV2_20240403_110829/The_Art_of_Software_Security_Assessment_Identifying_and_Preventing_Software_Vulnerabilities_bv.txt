specific, and you more or less know exactly what they do. Allocator scorecards and 
error domain tables help capture the differences between using system-supplied 
allocation routines and application-specific ones that wrap them. With other functions 
that perform more complex tasks, you might lose too much information when 
attempting to summarize them this compactly. 
Double-Frees 
Occasionally, developers make the mistake of deallocating objects twice (or more), 
which can have consequences as serious as any other form of heap corruption. 
Deallocating objects more than once is dangerous for several reasons. For example, 
what if a memory block is freed and then reallocated and filled with other data? When 
the second free() occurs, there's no longer a control structure at the address passed 
as a parameter to free(), just some arbitrary program data. What's to prevent this 
memory location from containing specially crafted data to exploit the heap 
management routines? 
There is also a threat if memory isn't reused between successive calls to free() 
because the memory block could be entered into free-block list twice. Later in the 
program, the same memory block could be returned from an allocation request twice, 
and the program might attempt to store two different objects at the same location, 
possibly allowing arbitrary code to run. The second example is less common these 
days because most memory management libraries (namely, Windows and GNU libc 
implementations) have updated their memory allocators to ensure that a block 
passed to free() is already in use; if it's not, the memory allocators don't do anything. 
However, some OSs have allocators that don't protect against a double free attack; so 
bugs of this nature are still considered serious. 
When auditing code that makes use of dynamic memory allocations, you should track 
each path throughout a variable's lifespan to see whether it's accidentally deallocated 
with the free() function more than once. Listing 7-45 shows an example of a 
double-free vulnerability. 
Listing 7-45. Double-Free Vulnerability 
int read_data(int sockfd) 
{ 
    char *data; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
398 
    int length; 
    length = get_short_from_network(sockfd); 
    data = (char *)malloc(length+1); 
    if(!data) 
        return 1; 
    read_string(sockfd, data, length); 
    switch(get_keyword(data)){ 
        case USERNAME: 
            success = record_username(data); 
            break; 
        case PASSWORD: 
            success = authenticate(data); 
            break; 
        default: 
            error("unknown keyword supplied!\n"); 
            success = -1; 
            free(data); 
    } 
    free(data); 
    return success; 
} 
In this example, you can see that the bolded code path frees data twice because when 
it doesn't identify a valid keyword. Although this error seems easy to avoid, complex 
applications often have subtleties that make these mistakes harder to spot. Listing 
7-46 is a real-world example from OpenSSL 0.9.7. The root cause of the problem is 
the CRYPTO_realloc_clean() function. 
Listing 7-46. Double-Free Vulnerability in OpenSSL 
void *CRYPTO_realloc_clean(void *str, int old_len, int num, const 
char 
*file, 
               int line) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
399 
    { 
    void *ret = NULL; 
    if (str == NULL) 
        return CRYPTO_malloc(num, file, line); 
     if (num length >= len) 
        { 
        memset(&str->data[len],0,str->length-len); 
        str->length=len; 
        return(len); 
        } 
    if (str->max >= len) 
        { 
        memset(&str->data[str->length],0,len-str->length); 
        str->length=len; 
        return(len); 
        } 
    n=(len+3)/3*4; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
400 
    if (str->data == NULL) 
        ret=OPENSSL_malloc(n); 
    else 
        ret= 
    if (ret == NULL) 
        { 
        BUFerr(BUF_F_BUF_MEM_GROW,ERR_R_MALLOC_FAILURE); 
        len=0; 
        } 
    else 
        { 
        str->data=ret; 
        str->max=n; 
        memset(&str->data[str->length],0,len-str->length); 
        str->length=len; 
        } 
    return(len); 
} 
As a result of calling OPENSSL_realloc_clean(), the BUF_MEM_grow_clean() function 
might actually free its own data element. However, it doesn't set data to NULL when 
this reallocation failure occurs. This quirky behavior makes a double-free error likely 
in functions that use BUF_MEM structures. Take a look at this call in 
asn1_collate_primitive(): 
       if (d2i_ASN1_bytes(&os,&c->p,c->max-c->p, c->tag,c->xclass) 
           == NULL) 
           { 
           c->error=ERR_R_ASN1_LIB; 
           goto err; 
           } 
       if (!BUF_MEM_grow_clean(&b,num+os->length)) 
            { 
            c->error=ERR_R_BUF_LIB; 
            goto err; 
            } 
    ... 
err: 
    ASN1err(ASN1_F_ASN1_COLLATE_PRIMITIVE,c->error); 
    if (os != NULL) ASN1_STRING_free(os); 
    if (b.data != NULL) OPENSSL_free(b.data); 
    return(0); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
401 
    } 
This function attempts to grow the BUF_MEM structure b, but when an error is returned, 
it frees any resources it has and returns 0. As you know now, if BUF_MEM_grow_clean() 
fails because of a failure in CRYPTO_realloc_clean(), it frees b.data but doesn't set it 
to NULL. Therefore, the bolded code frees b.data a second time. 
Code auditors should be especially aware of double-frees when auditing C++ code. 
Sometimes keeping track of an object's internal state is difficult, and unexpected 
states could lead to double-frees. Be mindful of members that are freed in more than 
one member function in an object (such as a regular member function and the 
destructor), and attempt to determine whether the class is ever used in such a way 
that an object can be destructed when some member variables have already been 
freed. 
Double-free errors can crop up in other ways. Many operating systems' reallocation 
routines free a buffer that they're supposed to reallocate if the new size for the buffer 
is 0. This is true on most UNIX implementations. Therefore, if an attacker can cause 
a call to realloc() with a new size of 0, that same buffer might be freed again later; 
there's a good chance the buffer that was just freed will be written into. Listing 7-47 
shows a simple example. 
Listing 7-47. Reallocation Double-Free Vulnerability 
#define ROUNDUP(x) (((x)+15) & 0xFFFFFFF0) 
int buffer_grow(buffer *buf, unsigned int size) 
{ 
    char *data; 
    unsigned int new_size = size + buf->used; 
    if(new_size data, ROUNDUP(new_size)); 
    if(!data) 
        return 1; 
    buf->data = data; 
    buf->size = new_size; 
    return 0; 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
402 
int buffer_free(buffer *buf) 
{ 
    free(buf->data); 
    free(buf); 
    return 0; 
} 
buffer *buffer_new(void) 
{ 
    buffer *buf; 
    buf = calloc(1, sizeof(buffer)); 
    if(!buf) 
        return NULL; 
    buf->data = (char *)malloc(1024); 
    if(!buf->data){ 
        free(buf); 
        return NULL; 
    } 
    return buf; 
} 
This code shows some typical buffer-management routines. From what you have 
learned about allocation routines, you can classify a couple of interesting 
characteristics about buffer_grow(). Primarily, it checks for integer overflows when 
increasing the buffer, but that rounding is performed after the check. Therefore, 
whenever new_size() and buf->used are added together and give a result between 
0xFFFFFFF1 and 0xFFFFFFFF, the roundup causes an integer overflow, and the value 
0 is passed to realloc(). Also, notice that if realloc() fails, buf->data isn't set to a 
NULL pointer. This is important because when realloc() frees a buffer because of a 
0-length parameter, it returns NULL. The following code shows some potential 
implications: 
int process_login(int sockfd) 
{ 
    int length; 
    buffer *buf; 
    buf = buffer_new(); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
403 
    length = read_integer(sockfd); 
    if(buffer_grow(buf, length) data member is freed twiceonce during buffer_grow() when a size of 0 is passed 
to realloc(), and once more in buffer_free(). This example spans multiple functions 
for a specific reason; often bugs of this nature are spread out in this way and are less 
obvious. This bug would be easy to miss if you didn't pay careful attention to how 
buffer_grow() works (to notice the integer overflow) and to the nuances of how 
realloc() works. 
7.3.6 Summary 
This chapter has focused on the basic components that make up a programming 
language: variable use, control flow, function calls, and memory management. By 
learning about potential security vulnerabilities from the perspective of each of these 
building blocks, you can isolate recurring patterns in software security vulnerabilities. 
In addition, you saw how to target areas where a programmer is more likely to create 
vulnerabilities when translating a design into a final implementation. Finally, you 
learned some tools for tracking your work and simplifying the process of identifying 
vulnerabilities. 
7.4 Chapter 8.  Strings and Metacharacters 
"The edge... There is no honest way to explain it because the only people who know where it 
is are the one's who have never gone over." 
7.4.1 Introduction 
Textual representation is one of the oldest methods of handling data, and almost 
certainly the most popular. Unfortunately, a number of common mistakes in handling 
textual data have given text-based formats a reputation as one of the least secure 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
404 
methods of data processing. Many of the most significant security vulnerabilities of 
the last decade are the result of memory corruption due to mishandling textual data, 
or logical flaws due to the misinterpretation of the content in textual data. 
This chapter explores security vulnerabilities related to processing textual data 
formats contained in strings. The coverage addresses the major areas of string 
handling: memory corruption due to string mishandling; vulnerabilities due to 
in-band control data in the form of metacharacters; and vulnerabilities resulting from 
conversions between character encodings in different languages. By understanding 
the common patterns associated with these vulnerabilities, you can identify and 
prevent their occurrence. 
7.4.2 C String Handling 
In C, there's no native type for strings; instead, strings are formed by constructing 
arrays of the char data type, with the NUL character (0x00) marking the end of a 
string (sometimes referred to as a NULL character or EOS). Representing a string in 
this manner means that the length of the string is not associated with the buffer that 
contains it, and it is often not known until runtime. These details require 
programmers to manage the string buffers manually, generally in one of two ways. 
They can estimate how much memory to reserve (by choosing a conservative 
maximum) for a statically sized array, or they can use memory allocation APIs 
available on the system to dynamically allocate memory at runtime when the amount 
of space required for a data block is known. 
The second option seems more sensible, but it has some drawbacks. Far more 
processing overhead is involved when allocating memory dynamically, and 
programmers need to ensure that memory is freed correctly in each possible code 
path to avoid memory leaks. The C++ standard library provides a string class that 
abstracts the internals so that programmers don't need to deal explicitly with 
memory-sizing problems. The C++ string class is, therefore, a little safer and less 
likely to be exposed to vulnerabilities that occur when dealing with characters in C. 
However, programmers often need to convert between C strings and C++ string 
classes to use APIs that require C strings; so even a C++ program can be vulnerable 
to C string handling vulnerabilities. Most C string handling vulnerabilities are the 
result of the unsafe use of a handful of functions, which are covered in the following 
sections. 
Unbounded String Functions 
The first group of functions is conventionally unsafe string manipulation functions. 
The main problem with these functions is that they are unboundedthat is, the 
destination buffer's size isn't taken into account when performing a data copy. This 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
405 
means that if the string length of the source data supplied to these functions exceeds 
the destination buffer's size, a buffer overflow condition could be triggered, often 
resulting in exploitable memory corruption. Code auditors must systematically 
examine each appearance of these functions in a codebase to determine whether they 
are called in an unsafe manner. Simply put, code auditors must find out whether 
those functions can be reached when the destination buffer isn't large enough to 
contain the source content. By analyzing all the code paths that lead to these unsafe 
routines, you can find whether this problem exists and classify the call as safe or 
unsafe. 
scanf() 
The scanf() functions are used when reading in data from a file stream or string. Each 
data element specified in the format string is stored in a corresponding argument. 
When strings are specified in the format string (using the %s format specifier), the 
corresponding buffer needs to be large enough to contain the string read in from the 
data stream. The scanf() function is summarized in the following list: 
Function int scanf(const char *format, ...); 
API libc (UNIX and Windows) 
Similar functions _tscanf, wscanf, sscanf, fscanf, fwscanf, _snscanf, _snwscanf 
Purpose The scanf() function parses input according to the format specified in 
the format argument. 
The following code shows an example of misusing scanf(): 
int read_ident(int sockfd) 
{ 
    int sport, cport; 
    char user[32], rtype[32], addinfo[32]; 
    char buffer[1024]; 
    if(read(sockfd, buffer, sizeof(buffer)) <= 0){ 
        perror("read: %m"); 
        return 1; 
    } 
    buffer[sizeof(buffer)1] = '\0'; 