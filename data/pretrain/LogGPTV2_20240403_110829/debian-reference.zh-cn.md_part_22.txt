### 系统启动流程概述

- `bootup(7)` 介绍了基于 `systemd` 的系统启动流程（适用于近期的 Debian 版本）。
- `boot(7)` 介绍了基于 UNIX System V Release 4 的系统启动流程（适用于旧版的 Debian）。

#### 3.1 启动过程概述
从计算机上电到操作系统 (OS) 完全可用，需要经历多个阶段。为简化讨论，本文将范围限定在具有默认安装配置的典型 PC 平台上。整个启动过程可比作四级火箭，每一级完成特定任务后将控制权传递给下一级。

- **第 3.1.1 节**
- **第 3.1.2 节**
- **第 3.1.3 节**
- **第 3.1.4 节**

需要注意的是，实际的启动阶段可能会根据具体配置有所不同。例如，如果你编译了自己的内核，则可能跳过某些步骤。因此，在确认你的系统配置前，请勿假设上述描述完全适用。

##### 3.1.1 第一阶段：UEFI
**统一可扩展固件接口 (UEFI)** 是定义了启动管理器作为其规范的一部分的技术。当计算机开机时，UEFI 固件会检查启动配置，并根据存储在 NVRAM 中的变量来加载指定的操作系统引导加载程序或直接加载内核。这些变量包括指向引导加载程序或内核文件路径的信息。

**EFI 系统分区 (ESP)** 是一个符合 UEFI 规范的数据存储分区，用于存放 UEFI 应用程序及其所需文件，包括操作系统的引导加载程序。在较老的 PC 上，MBR 中的 BIOS 可以作为替代方案。

##### 3.1.2 第二阶段：引导加载程序
引导加载程序是启动过程中的第二步，由 UEFI 启动。它负责将系统内核和初始 RAM 文件系统 (`initrd`) 加载到内存中，并将控制权转交给它们。对于 Debian 系统，默认使用 Linux 内核作为系统内核，而当前版本的 Linux 内核使用的 `initrd` 实际上是 `initramfs` 映像。

存在多种引导加载程序及配置选项，其中一些常见的如下：

| 引导加载程序 | 流行度 | 大小 | 支持 initrd | 说明 |
|---|---|---|---|---|
| GRUB (UEFI) | I:325 | 184 | 是 | 智能识别磁盘分区与文件系统，如 vfat, ext4... |
| GRUB (BIOS) | V:21, I:646 | 557 | 是 | 类似功能但针对 BIOS 系统 |
| GRUB 救援映像 | V:0, I:0 | 6615 | 是 | 用于 CD 或软盘的可引导修复映像 |
| Isolinux | V:3, I:37 | 344 | 是 | 识别 ISO9660 文件系统，用于 CD 引导 |
| Syslinux | V:3, I:37 | 344 | 是 | 识别 MSDOS 文件系统 (FAT)，用于软盘引导 |
| Loadlin | V:0, I:0 | 90 | 是 | 从 FreeDOS 或 MSDOS 启动新系统 |
| MBR | V:0, I:4 | 50 | 否 | 替代 MSDOS MBR 的自由软件 |

**警告**: 在没有从 `grub-rescue-pc` 包创建的可引导修复盘的情况下，请不要随意修改引导加载程序设置。即使硬盘上的引导加载程序无法正常工作，该修复盘也能帮助你恢复系统。

对于 UEFI 系统，GRUB2 首先读取 ESP 分区，并使用 `/boot/efi/EFI/debian/grub.cfg` 中 `search.fs_uuid` 指定的 UUID 来定位 GRUB2 菜单配置文件 `/boot/grub/grub.cfg` 所在的分区。此文件的关键部分如下所示：

```plaintext
menuentry 'Debian GNU/Linux' ... {
    load_video
    insmod gzio
    insmod part_gpt
    insmod ext2
    search --no-floppy --fs-uuid --set=root fe3e1db5-6454-46d6-a14c-071208ebe4b1
    echo 'Loading Linux 5.10.0-6-amd64 ...'
    linux /boot/vmlinuz-5.10.0-6-amd64 root=UUID=fe3e1db5-6454-46d6-a14c-071208ebe4b1 ro quiet
    echo 'Loading initial ramdisk ...'
    initrd /boot/initrd.img-5.10.0-6-amd64
}
```

通过删除 `quiet` 参数，你可以查看详细的内核启动日志信息。要永久更改此设置，请编辑 `/etc/default/grub` 中的 `GRUB_CMDLINE_LINUX_DEFAULT="quiet"` 行。

##### 3.1.3 第三阶段：迷你 Debian 系统
迷你 Debian 系统是启动过程中的第三阶段，由引导加载程序激活。它在内存中运行内核和根文件系统，这是启动流程的一个可选准备阶段。“迷你 Debian 系统”是一个非正式术语，通常指的是 `initrd` 或 `initramfs` 系统。这个阶段主要用于添加内核模块或解密根文件系统，从而提高引导过程的灵活性。

- 如果 `initramfs` 由 `initramfs-tools` 创建，则 `/init` 是一个 shell 脚本，允许用户中断启动流程并进入 shell 环境进行调试。
- 若是由 `dracut` 创建，则 `/init` 是一个 systemd 二进制程序，提供精简版的 systemd 环境。

##### 3.1.4 第四阶段：常规 Debian 系统
这是启动过程的最后一阶段，由迷你 Debian 系统触发。此时，内核继续执行，而根文件系统则从内存转移到实际的硬盘文件系统上。`init` 程序（PID=1）负责启动其他进程以完成主引导流程。自 Debian 8 Jessie 版本起，`/usr/sbin/init` 成为了指向 `/lib/systemd/systemd` 的符号链接。

###### 常见的启动工具列表

| 工具名称 | 流行度 | 大小 | 描述 |
|---|---|---|---|
| systemd | V:856, I:964 | 11223 | 基于事件且支持并发的 init 守护进程 |
| cloud-init | V:2, I:5 | 2870 | 用于云实例初始化的系统 |
| systemd-sysv | V:823, I:962 | 77 | systemd 需要的手册页和符号链接，以替代 sysvinit |
| init-system-helpers | V:690, I:972 | 130 | 在 sysvinit 和 systemd 之间转换的帮助工具 |
| initscripts | V:36, I:143 | 198 | 初始化和关闭系统的脚本 |
| sysvinit-core | V:5, I:6 | 373 | 类 System V 的 init 工具 |
| sysv-rc | V:72, I:155 | 88 | 类 System V 的运行级别切换机制 |
| sysvinit-utils | V:898, I:999 | 102 | 类 System V 的实用工具 |
| lsb-base | V:686, I:729 | 12 | Linux 标准基础 3.2 版本的 init 脚本功能 |
| insserv | V:85, I:154 | 153 | 利用 LSB init.d 脚本依赖性组织启动顺序 |
| kexec-tools | V:1, I:6 | 316 | 用于 kexec 重启（热启动）的工具 |
| systemd-bootchart | V:0, I:0 | 131 | 启动性能分析器 |
| mingetty | V:0, I:2 | 36 | 控制台登录服务 |
| mgetty | V:0, I:0 | 315 | 具有智能调制解调器功能的 getty 替代品 |

更多关于加速启动过程的信息，请参考 Debian Wiki 相关页面。

### 3.2 Systemd

#### 3.2.1 Systemd 初始化
当 Debian 系统启动时，`/usr/sbin/init` 符号链接至 `/usr/lib/systemd`，后者作为 PID=1 的进程由 root 用户拥有并开始执行。Systemd 基于单元配置文件（声明式语法）并行派生进程，取代了之前的 SysV 过程样式。这些配置文件按优先级从以下路径加载：

- `/etc/systemd/system/*`: 管理员创建的系统单元
- `/run/systemd/system/*`: 运行时单元
- `/lib/systemd/system/*`: 分发包管理器安装的系统单元

各单元之间的依赖关系通过 `Wants=`, `Requires=`, `Before=`, `After=` 等指令配置。资源控制也在此定义。根据后缀名区分不同类型的单元文件：

- `.service`: 描述由 systemd 控制和监督的进程。
- `.device`: 描述在 `sysfs` 中展示的 udev 设备树设备。
- `.mount`: 描述由 systemd 控制和监督的文件系统挂载点。
- `.automount`: 描述自动挂载点。
- `.swap`: 描述 swap 文件或设备。
- `.path`: 描述被监控的路径。
- `.socket`: 描述受控套接字。
- `.timer`: 描述定时器。
- `.slice`: 管理 cgroups 资源。
- `.scope`: 程序化创建的单元，用于管理一组进程。
- `.target`: 将其他单元分组，在启动时创建同步点。

系统启动时，systemd 尝试启动 `/lib/systemd/system/default.target`（通常是到 `graphical.target` 的符号链接）。首先，加载一些特殊的目标单元（如 `local-fs.target`, `swap.target`, `cryptsetup.target`）以挂载文件系统。然后，根据依赖关系加载其他目标单元。详情请参阅 `bootup(7)` 文档。

Systemd 提供向后兼容功能，仍可解析位于 `/etc/init.d/rc[0123456S].d/[KS]name` 中的 SysV 风格启动脚本；`telinit(8)` 请求会被转换为 systemd 单元活动请求。

**注意**: 模拟的运行级别 2 至 4 全部链接到了相同的 `multi-user.target`。

#### 3.2.2 Systemd 登录
当用户通过 gdm3(8), sshd(8) 等方式登录 Debian 系统时，`/lib/systemd/system --user` 作为用户的 systemd 进程启动。