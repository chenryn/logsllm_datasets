• bootup(7)介绍了基于systemd的系统启动流程。（近期的Debian）
• boot(7)介绍了基于UNIXSystemVRelease4的系统启动流程。（旧版的Debian）
3.1 启动过程概述
计算机系统从上电事件到能为用户提供完整的操作系统（OS）功能为止，需要经历几个阶段的启动过程。
为简便起见，笔者将讨论范围限定在具有默认安装的典型PC平台上。
典型的启动过程像是一个四级的火箭。每一级火箭将系统控制权交给下一级。
• 第 3.1.1 节
• 第 3.1.2 节
• 第 3.1.3 节
• 第 3.1.4 节
当然，这些阶段可以有不同的配置。比如，你编译了自己的内核，则可能会跳过迷你Debian系统的步骤。因此，在读
者亲自确认之前，请勿假定自己系统的情况也是如此。
3.1.1 第一阶段：UEFI
UnifiedExtensibleFirmwareInterface(UEFI)统一可扩展固件接口定义了启动管理器作为UEFI规范的一部分。当一个
计算机打开电源，启动管理器是启动流程的第一阶段，它检查启动配置并基于启动配置的设置，执行特定的操作系统
引导加载程序或操作系统内核（通常是引导加载程序）。启动配置通过变量存储在NVRAM，变量包括指示操作系统
引导加载程序或操作系统内核的文件系统路径的变量。
EFIsystempartition(ESP)EFI系统分区是一个数据存储设备分区，在计算机里用来遵照UEFI规范。当计算机打开电
源时，由UEFI固件来访问，它存储了UEFI应用程序和这些应用程序运行所需要的文件，包括操作系统的引导加载程
序。（在老的PC系统，存放在MBR里的BIOS可以用来代替。）
Debian参考手册 76/233
3.1.2 第二阶段：引载加载程序
引导加载程序是启动过程的第二阶段，由UEFI启动。引导加载程序将系统内核映像和initrd映像加载到内存并将控制
权交给它们。initrd映像是根文件系统映像，其支持程度依赖于所使用的引导加载程序。
Debian系统通常使用Linux内核作为默认的系统内核。当前的5.xLinux内核的initrd映像在技术上是initramfs（初始
RAM文件系统）映像。
有许多引导加载程序和配置选项存在。
引导加载程
软件包 流行度 大小 initrd 说明
序
GRUB 可智能识别磁盘分区和文件系统，例
grub-efi-amd64 I:325 184 支持
UEFI 如vfat、ext4…（UEFI）
GRUB第2 可智能识别磁盘分区和文件系统，例
grub-pc V:21,I:646 557 支持
版 如vfat、ext4…（BIOS）
GRUB第2 此为GRUB第2版的可引导修复映像
grub-rescue-pc V:0,I:0 6615 支持
版 （CD和软盘）（PC/BIOS版本）
可识别ISO9660文件系统。引导CD
syslinux V:3,I:37 344 支持 Isolinux
使用此项。
可识别MSDOS文件系统（FAT）。
syslinux V:3,I:37 344 支持 Syslinux
引导软盘使用此项。
新系统从FreeDOS或MSDOS中启
loadlin V:0,I:0 90 支持 Loadlin
动。
NeilTurton 此为取代MSDOSMBR的自由软件。
mbr V:0,I:4 50 不支持
的MBR 只可识别硬盘分区。
Table3.1: 引导加载程序列表
警告
假如没有从grub-rescue-pc软件包中的映像制作出来的可引导修复盘（U盘、CD或软盘），请勿玩弄引
导加载程序。即使硬盘上没有可正常工作的引导加载程序，可引导修复盘也能引导你的系统。
对于UEFI系统，GRUB2首先读取ESP分区，使用”/boot/efi/EFI/debian/grub.cfg”里面search.fs_uuid
指定的UUID来确定GRUB2菜单配置文件”/boot/grub/grub.cfg”所在的分区。
GRUB2菜单配置文件的关键部分看起来像：
menuentry ’Debian GNU/Linux’ ... {
load_video
insmod gzio
insmod part_gpt
insmod ext2
search --no-floppy --fs-uuid --set=root fe3e1db5-6454-46d6-a14c-071208ebe4b1
echo ’Loading Linux 5.10.0-6-amd64 ...’
linux /boot/vmlinuz-5.10.0-6-amd64 root=UUID=fe3e1db5-6454-46d6-a14c-071208ebe4b1 ←-
ro quiet
echo ’Loading initial ramdisk ...’
initrd /boot/initrd.img-5.10.0-6-amd64
}
对于这部分的/boot/grub/grub.cfg，这个菜单条目的意义如下。
提示
通过删除”/boot/grub/grub.cfg” 里面的 quiet ，你能够查看内核启动日志信息。为固化这个修改，请编
辑”/etc/default/grub”里的”GRUB_CMDLINE_LINUX_DEFAULT=”quiet””行。
Debian参考手册 77/233
设置 值
GRUB2模块加载 gzio,part_gpt,ext2
由UUID=fe3e1db5-6454-46d6-a14c-071208ebe4b1指定
使用的根文件系统分区
的分区标识
内核镜像文件在根文件系统中的路径 /boot/vmlinuz-5.10.0-6-amd64
”root=UUID=fe3e1db5-6454-46d6-a14c-071208ebe4b1
使用的内核启动参数
ro quiet”
initrd镜像文件在根文件系统中的路径 /boot/initrd.img-5.10.0-6-amd64
Table3.2: /boot/grub/grub.cfg文件上面部分菜单条目意义
提示
通过设置在“/etc/default/grub”的 GRUB_BACKGROUND 变量指向到图像文件，或者把图像文件本身放入
“/boot/grub/”，你能够定制GRUB的启动图像。
参见“info grub”及grub-install(8)。
3.1.3 第三阶段：迷你 Debian 系统
迷你Debian系统是启动流程的第三阶段，由引导加载程序启动。它会在内存中运行系统内核和根文件系统。这是启动
流程的一个可选准备阶段。
注意
“迷你Debian系统”是笔者自创的术语，用于在本文档中描述启动流程的第三个阶段。这个系统通常被称为initrd
或initramfs系统。内存中类似的系统在Debian安装程序中使用。
/init程序是内存中的根文件系统上执行的第一个程序。这个程序在用户空间把内核初始化，并把控制权交给下一阶
段。迷你Debian系统能够在主引导流程之前添加内核模块或以加密形式挂载根文件系统，使引导流程更加灵活。
• 如果initramfs是由initramfs-tools创建，则”/init”程序是一个shell脚本程序。
– 通过给内核添加“break=init”等启动参数，你可以中断这部分启动流程以获取rootshell。更多中断条件请参
见”/init“脚本。这个shell环境已足够成熟，你可通过它很好地检查机器的硬件。
– 迷你Debian系统中可用的命令是精简过的，且主要由一个称为busybox(1)的GNU工具提供。
• 如果initramfs是由dracut创建，则”/init”程序是一个二进制systemd程序。
– 迷你Debian系统中可用的命令是一个精简过的systemd(1)环境。
小心
当在一个只读的根文件系统上时，使用mount命令需要添加-n选项。
3.1.4 第四阶段：常规 Debian 系统
常规Debian系统是启动流程的第四阶段，由迷你Debian系统启动。迷你Debian系统的内核在此环境下继续运行。根
文件系统将由内存切换到实际的硬盘文件系统上。
init 程序是系统执行的第一个程序（PID=1），它启动其它各种程序以完成主引导流程。init 程序的默认路径是”
/usr/sbin/init“，但可通过内核启动参数修改，例如”init=/path/to/init_program”。
在Debian8jessie（2015年发布）版本后，”/usr/sbin/init”是一个到”/lib/systemd/systemd”的符号链接。
Debian参考手册 78/233
提示
你的系统中实际使用的init命令可以使用“ps --pid 1 -f”命令确认。
软件包 流行度 大小 说明
systemd V:856,I:964 11223 基于事件且支持并发的init(8)守护进程（可替代sysvinit）
cloud-init V:2,I:5 2870 initializationsystemforinfrastructurecloudinstances
systemd-sysv V:823,I:962 77 systemd需用的用以代替sysvinit的手册页和符号链接
init-system-helpers
V:690,I:972 130 在sysvinit和systemd之间进行转换的帮助工具
initscripts V:36,I:143 198 用于初始化和关闭系统的脚本
sysvinit-core V:5,I:6 373 类SystemV的init(8)工具
sysv-rc V:72,I:155 88 类SystemV的运行级别修改机制
sysvinit-utils V:898,I:999 102 类SystemV的实用工具（startpar(8)，bootlogd(8)，……）
lsb-base V:686,I:729 12 Linux标准规范3.2版的init脚本功能
insserv V:85,I:154 153 利用LSBinit.d脚本依赖性来组织启动步骤的工具
kexec-tools V:1,I:6 316 用于kexec(8)重启（热启动）的kexec工具
systemd-bootchart
V:0,I:0 131 启动流程性能分析器
mingetty V:0,I:2 36 仅包含控制台的getty(8)
mgetty V:0,I:0 315 可智能调制解调的getty(8)替代品
Table3.3: Debian系统启动工具列表
提示
有关启动流程加速的最新信息，请参见Debian维基：启动流程加速词条。
3.2 Systemd
3.2.1 Systemd 初始化
WhentheDebiansystemstarts,/usr/sbin/initsymlinkedto/usr/lib/systemdisstartedastheinitsystemprocess
(PID=1)ownedbyroot(UID=0). Seesystemd(1).
systemd初始化进程基于单元配置文件(参见systemd.unit(5))来并行派生进程，这些单元配置文件使用声明样式
来书写，代替之前的类SysV的过程样式。这些单元配置文件从下面的一系列路径来加载(参见systemd-system.conf(5))
：
派生的进程被放在一个单独的 Linux control groups，在单元后命名，它们属于一个私有的 systemd 层级结构 (参见
cgroups和第 4.7.4 节)。
Unitsforthesystemmodeareloadedfromthe”SystemUnitSearchPath”describedinsystemd.unit(5). Themainonesare
asfollowsintheorderofpriority:
• ”/etc/systemd/system/*”: Systemunitscreatedbytheadministrator
• ”/run/systemd/system/*”: Runtimeunits
• ”/lib/systemd/system/*”: Systemunitsinstalledbythedistributionpackagemanager
他们的相互依赖关系通过”Wants=”,”Requires=”,”Before=”,”After=”,…等指示来配置，(参见systemd.unit(5)
里的”MAPPINGOFUNITPROPERTIESTOTHEIRINVERSES”)。资源控制也是被定义(参见systemd.resource-control(5)).
根据单元配置文件的后缀来区分它们的类型：
Debian参考手册 79/233
• *.service描述由systemd控制和监管的进程.参见systemd.service(5).
• *.device描述在sysfs(5)里面作为udev(7)设备树展示的设备。参见systemd.device(5).
• *.mount描述由systemd控制和监管的文件系统挂载点。参见systemd.mount(5).
• *.automount描述由systemd控制和监管的文件系统自动挂载点。参见systemd.automount(5).
• *.swap描述由systemd控制和监管的swap文件或设备。参见systemd.swap(5).
• *.path描述被systemd监控的路径，用于基于路径的活动。参见systemd.path(5).
• *.socket描述被systemd控制和监管的套接字，用于基于套接字的活动。参见systemd.socket(5).
• *.timer描述被systemd控制和监管的计时器，用于基于时间的活动。参见systemd.timer(5).
• *.slice管理cgroups(7)的资源。参见systemd.slice(5).
• *.scope使用systemd的总线接口来程序化的创建，用以管理一系列系统进程。参见systemd.scope(5).
• *.target把其它单元配置文件分组，在启动的时候，来创建同步点。参见 systemd.target(5).
系统启动时（即，init），systemd进程会尝试启动”/lib/systemd/system/default.target（通常是到”graphical.target”
的符号链接）。首先，一些特殊的target单元（参见systemd.special(7)），比如”local-fs.target”、”swap.target”
和”cryptsetup.target”会被引入以挂载文件系统。之后，其它target单元也会根据单元依赖关系而被引入。详细
情况，请阅读bootup(7)。
systemd提供向后兼容的功能。在”/etc/init.d/rc[0123456S].d/[KS]name”里面的SysV风格的启动脚本仍
然会被分析；telinit(8)会被转换为systemd的单元活动请求。
小心
模拟的运行级别2到4全部被符号链接到了相同的“multi-user.target”。
3.2.2 Syatemd login
When a user logins to the Debian system via gdm3(8), sshd(8), etc., /lib/systemd/system --user is started as the