### Figure 5: Runtime Performance Overhead of Mnemosyne on Alexa 1k

Figure 5 illustrates the runtime performance overhead introduced by Mnemosyne during page loads for the top 1,000 websites on Alexa. 

- **(a)** shows the percentage increase in runtime overhead when Mnemosyne is enabled.
- **(b)** provides the absolute time (in seconds) added to the page load due to Mnemosyne.

The whiskers in the box plots represent the 0th and 95th percentiles. The results indicate that whether an object is retrieved from the cache or directly from the network, the overhead remains consistent.

#### Experimental Results
The experimental results are presented as a five-point summary in Figure 5:

- **(a)** displays the overhead percentages compared to loading a page without Mnemosyne.
- **(b)** presents the absolute time (in seconds) added to the page load by Mnemosyne.

On average, Mnemosyne's auditor daemon introduces a low performance overhead of 2.93%, with a 95th percentile overhead of 4.6%.

### Storage Overhead
To measure the disk space overhead, we ran Mnemosyne’s auditor for a 50-minute browsing session, visiting 10 highly dynamic and popular websites listed in Table 13. The compressed version of Mnemosyne’s audit logs for the entire session was only 3.1 MB. This translates to an average disk space requirement of 0.06 MB per minute for highly active browsing sessions.

For a typical enterprise environment, Mnemosyne would require:
- 28.8 MB of storage for a single device over an 8-hour workday.
- 7.4 GB of disk space per year for a single device, assuming 262 workdays.
- 7.4 TB of disk space for an enterprise network of 1,000 devices over a single work year.

This experimental evaluation demonstrates that Mnemosyne’s lightweight approach to collecting audit logs significantly reduces the required storage by 82.4% compared to JSGraph [43].

### Limitations
Mnemosyne has a few limitations:

1. **DOM Modification Attribution**: The current version of DevTools only supports attributing DOM modifications to scripts when the DOM node being inserted is an iframe or a script node. Despite this limitation, Mnemosyne performed exceptionally well in our experimental evaluations. This design choice was made to avoid extensive modifications to the browser, which would be necessary for fine-grained DOM modification attribution. Prior approaches, such as JSGraph [43], have shown that such fine-grained attribution is feasible but requires significant changes to the Blink-V8 bindings layer of the browser. Mnemosyne’s approach provides significant advantages for real-world deployment in enterprise environments. If an enterprise prefers a more fine-grained auditing approach, the generated audit logs could still be leveraged by Mnemosyne’s analysis modules with limited engineering effort.

2. **Domain-Versioning**: Mnemosyne relies on a domain-versioning technique to identify the window-of-compromise. A potential limitation is that an adversary could orchestrate the entire attack campaign off the compromised website by storing all malicious scripts and payloads on the site’s origin. In this case, Mnemosyne’s domain-versioning would not identify the modifications. However, this scenario is extremely unlikely. Our review of over 300 well-documented sophisticated attacks by various APT groups found that all watering hole attacks modified the page to communicate with a new domain, typically their C&C server. This approach allows attackers to update and modify code without making significant changes to the compromised website, reducing the likelihood of detection via firewalls or DLP software.

3. **Drive-by Download Visibility**: As discussed in §3.2, Mnemosyne has limited visibility when investigating drive-by download attacks. It can only identify the "setup" phase before the browser is exploited. Despite this, Mnemosyne was still capable of identifying the victims of the drive-by attack scenario in our evaluation (§4.3.1), demonstrating its capability to improve the efficiency of the analysis even when the adversary relies on a drive-by download.

### Related Work
**Causality Analysis Systems**: Research into systems that capture attack provenance to investigate sophisticated attacks has grown [12, 18, 20, 25, 29, 30, 33, 39, 40, 42, 43, 48, 49, 58, 59, 61, 62, 66]. Whole-system provenance systems face the dependency explosion problem, where long-running processes communicate with many external entities. To address this, several works propose partitioning the execution of long-running processes into units-of-execution [25, 42, 49, 66]. For example, BEEP [42] partitions processes based on internal event loops, while UIScope [66] partitions based on GUI elements. However, these systems suffer from a semantic gap between system-level and browser-level semantics. JSGraph [43] bridges this gap by developing a customized browser that tracks fine-grained information related to the provenance graph. Unlike Mnemosyne, JSGraph requires extensive modifications to the browser, making real-world deployment difficult.

**Attack Detection**: There is significant work on using attack provenance to improve the efficiency of postmortem attack identification [26, 45, 52]. For instance, Holmes [52] uses the attack kill chain [65] to identify attacks, while Priotracker [45] prioritizes abnormal causal dependencies for enterprise security. Nodoze [23] uses causality information to reduce false positives from industry alert systems like Splunk [9]. Additionally, there is substantial research on detecting malicious web activity [13, 14, 17, 37, 44, 46, 56, 57, 64, 67]. Zozzle [17] detects JS-based malware by identifying syntax elements predictive of malware, and Delta [13] aims to identify changes associated with malicious and benign behaviors in websites. While Delta focuses on identifying compromised webpages, Mnemosyne extends this by identifying the impact of a compromised website on an organization.

### Conclusion
In this paper, we present Mnemosyne, a novel postmortem analysis engine for analyzing sophisticated watering hole attacks. We conducted an extensive evaluation on several real-world attack scenarios, and our results show that Mnemosyne can efficiently identify the victims of a watering hole attack in an enterprise environment.

### Acknowledgments
We thank the anonymous reviewers for their helpful and informative feedback. This material was supported by the National Science Foundation Graduate Research Fellowship under Grant No. DGE-1650044, and by the Office of Naval Research (ONR) under grants N00014-17-1-2895, N00014-15-1-2162, and N00014-18-1-2662. Any opinions, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of NSF or ONR.

### References
[References listed as in the original text]

---

This revised version aims to make the text more coherent, clear, and professional, with a logical flow and improved readability.