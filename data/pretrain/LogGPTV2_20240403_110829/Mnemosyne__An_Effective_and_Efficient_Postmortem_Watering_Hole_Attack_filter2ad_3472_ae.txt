Figure 5: The runtime performance overhead induced on the
page load by Mnemosyne for the Alexa 1k. (a) presents the
runtime overhead increase for the page load. (b) provides the
absolute time induced by Mnemosyne. Whiskers are set to
(0%, 95%).
same whether an object is retrieved from the cache or directly from
the network.
The experimental results are presented as a five-point-summary
in Figure 5, with (a) presenting the overhead percentages compared
to loading a page while Mnemosyne is off, and (b) presenting the
absolute time induced by Mnemosyne on the page load. We found
that Mnemosyne’s auditor daemon had a low performance over-
head of only 2.93% on average and a 95th-percentile overhead of
4.6 Storage Overhead
To measure the disk space overhead, we ran Mnemosyne’s auditor
for a 50-minute browsing session and visited 10 heavily dynamic
and popular websites. The websites used are listed in Table 13.
The compressed version of Mnemosyne’s audit logs for the entire
browsing session was only 3.1 MB. This means that, on average, the
disk space requirement for Mnemosyne is only .06 MB per minute
for highly active browsing sessions. If we assume Mnemosyne is
deployed in a typical enterprise environment, it would only require
28.8MB of storage for a single device in an 8-hour work day. If we
assume a 262 workdays per year, less than 7.4GB of disk space is
required to store Mnemosyne’s audit log per year. For an enterprise
network of 1,000 devices, only 7.4 TB of disk space is required to
store the entire dataset for a single work year. This experimen-
tal evaluation shows that Mnemosyne’s lightweight approach to
collecting audit logs has significant improvements compared to
JSGraph [43] and reduces the required storage by 82.4%.
AlexaArtBusinessComputersEntertainmentGamesGovernmentHealthHomeKidsandTeensNewsPoliticsRecreationRegionalScienceShoppingSocietySportsWebsiteCategory05101520VersionsAlexaTop1kN=973(a)0.0%5.0%10.0%15.0%20.0%25.0%PageLoadOverheadPercentagew/AuditorEnabled95%-tileat9.80Meanat2.931.2075%-tileat5.17TimeDiﬀerenceN=973(b)0.00.10.20.30.40.5RunTimeDiﬀerence(s)by(w/auditor-w/oauditor)95%-tileat0.15sMeanat0.04s0.01s75%-tileat0.04sSession 3B: Malware CCS '20, November 9–13, 2020, Virtual Event, USA7974.7 Limitations
There are a few limitations that can occur with Mnemosyne. First,
the current version of DevTools only supports attributing DOM
modifications to scripts when the DOM node being inserted is an
iframe or a script node. However, despite limited capability in at-
tributing DOM modifications, Mnemosyne was able to perform
exceptionally well during our experimental evaluations. This limi-
tation was introduced because we chose not to introduce any code
changes to the browser. Although, prior approaches have shown
that fine-grained DOM modification attribution is feasible, it re-
quires extensive modifications to the Blink-V8 bindings layer of
the browser [43]. Since Mnemosyne was able to detect the attacks
in each scenario without requiring these extensive modifications,
we believe this was the correct design choice, as it clearly provides
significant advantages for deployment in real-world enterprise en-
vironments. Finally, we believe that if an enterprise network prefers
a more fine-grained auditing approach (e.g., using JSGraph [43]) the
generated audit logs could still be leveraged by Mnemosyne’s anal-
ysis modules with limited engineering effort. Second, Mnemosyne
relies on a domain-versioning technique to identify the window-
of-compromise. One potential limitation that could occur with
domain-versioning is that the adversary could orchestrate the en-
tire attack campaign off the compromised website. To achieve this,
the adversary would need to store all malicious scripts and pay-
loads on the compromised site’s origin. If the adversary chose to
use this approach, Mnemosyne’s domain-versioning would not be
able to identify the modifications made by the adversary. However,
we argue this is extremely unlikely. First, after reviewing a corpus
of over 300 well-documented sophisticated attacks carried out by
various APT groups, we found that all the watering hole attacks
modified the page such that it communicates with a new domain,
specifically, their C&C server [2]. A main reason for this is that it
provides the attacker the flexibility to update and modify the code
without having to make significant modifications to the compro-
mised website. By minimizing the modifications made, it decreases
the likelihood of their attack being detected on the compromised
server via the hosting organization’s firewall or data loss prevention
software (DLP).
Finally, as previously discussed in §3.2, Mnemosyne has limited
visibility when investigating attacks that rely on a drive-by down-
load. Specifically, Mnemosyne can only identify the "setup" phase
before the browser is exploited. However, despite only recording the
setup phase of a drive-by download attack campaign Mnemosyne
was still capable of identifying the victims of the driveby attack sce-
nario in our evaluation (§4.3.1), which demonstrates that Mnemosyne
has the capability of improving the efficiency of the analysis, even
when the adversary relies on a drive-by download.
5 RELATED WORK
Causality Analysis Systems. Developing systems that rely on
capturing attack provenance to investigate sophisticated attacks has
become a growing area of research [12, 18, 20, 25, 29, 30, 33, 39, 40,
42, 43, 48, 49, 58, 59, 61, 62, 66]. One shortcoming of whole-system
provenance systems is the dependency explosion problem, which
occurs when long-running processes communicate with many ex-
ternal entities. To address dependency explosion, several works
have proposed partitioning the execution of a long-running pro-
cess into units-of-execution [25, 42, 49, 66]. For example, BEEP [42]
proposes to partition long-running processes into execution units
based on the internal event loop found in applications. UIScope [66]
takes a different approach and partitions the application’s execution
based on GUI elements of an application. However, one limitation of
all existing whole-system provenance systems is the semantic gap
between system level semantics and browser-level semantics. To
bridge this gap, JSGraph [43] develops a customized browser that
tracks fine-grained information related to the provenance graph
in terms of browser-level semantics. Unlike Mnemosyne, JSGraph
requires extensive modifications to the browser itself, which makes
real-world deployment difficult.
Attack Detection. There has been a significant amount of work
that uses attack provenance to improve the efficiency of identi-
fying attacks in a postmortem fashion [26, 45, 52]. For example,
Holmes [52] relies on the attack kill chain [65] to identify attacks.
Priotracker [45] aims to improve the efficiency of postmortem anal-
ysis by automatically prioritizing abnormal causal dependencies
for enterprise security. Additionally, Nodoze [23] relies on causality
information to significantly reduce the number of false positives
generated by industry alert systems like Splunk [9]. In addition
to causality-based attack detection systems, there has also been
a significant amount of work related to detecting malicious activ-
ity on the web [13, 14, 17, 37, 44, 46, 56, 57, 64, 67]. For example,
Zozzle [17] detects JS-based malware by identifying syntax ele-
ments that are highly predictive of malware. Additionally, several
systems have been developed that aim to detect compromised web-
sites [13, 14, 44]. Most similar to Mnemosyne is Delta [13], which
aims to identify changes associated with malicious and benign be-
haviors in a website. However, unlike Mnemosyne, Delta’s goal
is to identify compromised webpages. Mnemosyne extends this
work by identify the impacts a compromised website had on an
organization. that routinely visited this website.
6 CONCLUSION
In this paper, we present Mnemosyne, a novel postmortem analysis
engine for analyzing sophisticated watering hole attacks. We com-
pleted an extensive evaluation on several real-world watering hole
attack scenarios and our results show that Mnemosyne is capable
of efficiently identifying the victims of a watering hole attack at an
enterprise environment.
7 ACKNOWLEDGMENTS
We thank the anonymous reviewers for their helpful and informa-
tive feedback. This material was supported by National Science
Foundation Graduate Research Fellowship under Grant No. DGE-
1650044, and by the Office of Naval Research (ONR) under grants
N00014-17-1-2895, N00014-15-1-2162 and N00014-18-1-2662. Any
opinions, findings, conclusions or recommendations expressed in
this material are those of the authors and do not necessarily reflects
the views of NSF or ONR.
REFERENCES
[1] 2015 cost of cyber crime study: United states, . http://www.ponemon.org/blog/
2015-cost-of-cyber-crime-united-states.
[2] Aptnotes, . https://github.com/kbandla/APTnotes.git.
Session 3B: Malware CCS '20, November 9–13, 2020, Virtual Event, USA798[3] dmoz. https://dmoz-odp.org/.
[4] emaildefender. https://www.secantcorp.com/emaildefender.
[5] Mitre att&ck. https://attack.mitre.org/.
[6] passivetotal. https://www.riskiq.com/products/passivetotal.
[7] How was the attack on the pfsa and polish banks carried out, and who else was
targeted by criminals? https://niebezpiecznik.pl/post/jak-przeprowadzono-atak-
na-knf-i-polskie-banki-oraz-kto-jeszcze-byl-na-celowniku-przestepcow/.
[8] puppeteer. https://developers.google.com/web/tools/puppeteer.
[9] splunk. https://www.splunk.com.
[10] waf. https://owasp.org/www-community/Web_Application_Firewall.
[11] F. R. Barbehenn Brittany, January 2020. https://unit42.paloaltonetworks.com/
xhunt-campaign-new-watering-hole-identified-for-credential-harvesting/.
[12] A. Bates, D. J. Tian, K. R. Butler, and T. Moyer. Trustworthy whole-system
provenance for the linux kernel. In 24th USENIX Security Symposium (USENIX
Security 15), pages 319–334, 2015.
[13] K. Borgolte, C. Kruegel, and G. Vigna. Delta: automatic identification of unknown
web-based infection campaigns. In Proceedings of the 20th ACM Conference on
Computer and Communications Security (CCS), Berlin, Germany, Oct. 2013.
[14] K. Borgolte, C. Kruegel, and G. Vigna. Meerkat: Detecting website defacements
through image-based object recognition. In 24th {USENIX} Security Symposium
({USENIX} Security 15), pages 595–610, 2015.
[15] K. D. Bowers, C. Hart, A. Juels, and N. Triandopoulos. Pillarbox: Combating
next-generation malware with fast forward-secure logging. In Proceedings of
the 17th International Symposium on Research in Attacks, Intrusions and Defenses
(RAID), Gothenburg, Sweden, Sept. 2014.
[16] P. Chen, L. Desmet, and C. Huygens. A study on advanced persistent threats. In
IFIP International Conference on Communications and Multimedia Security, pages
63–72. Springer, 2014.
[17] C. Curtsinger, B. Livshits, B. G. Zorn, and C. Seifert. Zozzle: Fast and precise
in-browser javascript malware detection. In USENIX security symposium, pages
33–48. San Francisco, 2011.
[18] D. Devecsery, M. Chow, X. Dou, J. Flinn, and P. M. Chen. Eidetic systems. In
Proceedings of the 11th USENIX Symposium on Operating Systems Design and
Implementation (OSDI), Broomfield, Colorado, Oct. 2014.
[19] S. Egger, P. Reichl, T. Hoßfeld, and R. Schatz. “time is bandwidth”? narrowing the
gap between subjective time perception and quality of experience. In 2012 IEEE
international conference on communications (ICC), pages 1325–1330. IEEE, 2012.
[20] A. Gehani and D. Tariq. SPADE: support for provenance auditing in distributed
environments. In Proceedings of the 13th International Middleware Conference
(Middleware), 2012.
[21] F. Hacquebord. Two years of pawn storm. Trend Micro Forward-Looking Threat
Research Team, April, 25, 2017.
[22] X. Han, T. Pasquier, A. Bates, J. Mickens, and M. Seltzer. Unicorn: Runtime
In Network and
provenance-based detector for advanced persistent threats.
Distributed System Security Symposium, 2020.
[23] W. U. Hassan, S. Guo, D. Li, Z. Chen, K. Jee, Z. Li, and A. Bates. Nodoze: Com-
batting threat alert fatigue with automated provenance triage. In Proceedings of
the 26th Annual Network and Distributed System Security Symposium (NDSS), San
Diego, CA, Feb. 2019.
[24] W. U. Hassan, A. Bates, and D. Marino. Tactical provenance analysis for endpoint
detection and response systems. In Proceedings of the IEEE Symposium on Security
and Privacy, 2020.
[25] W. U. Hassan, M. A. Noureddine, P. Datta, and A. Bates. Omegalog: High-fidelity
attack investigation via transparent multi-layer log analysis. In Proc. NDSS, 2020.
[26] M. N. Hossain, S. M. Milajerdi, J. Wang, B. Eshete, R. Gjomemo, R. Sekar, S. Stoller,
and V. Venkatakrishnan. Sleuth: Real-time attack scenario reconstruction from
cots audit data. In 26th USENIX Security Symposium (USENIX Security 17), pages
487–504, 2017.
[27] M. N. Hossain, S. Sheikhi, and R. Sekar. Combating dependence explosion in
forensic analysis using alternative tag propagation semantics. In IEEE S&P, 2020.
[28] B. S. A. Intelligence. Lazarus & watering-hole attacks, February 2017. https:
//baesystemsai.blogspot.com/2017/02/lazarus-watering-hole-attacks.html.
[29] Y. Ji, S. Lee, E. Downing, W. Wang, M. Fazzini, T. Kim, A. Orso, and W. Lee.
Rain: Refinable attack investigation with on-demand inter-process information
flow tracking.
In Proceedings of the 24rd ACM Conference on Computer and
Communications Security (CCS), Dallas, Texas, Oct. 2017.
[30] Y. Ji, S. Lee, M. Fazzini, J. Allen, E. Downing, T. Kim, A. Orso, and W. Lee. Enabling
refinable cross-host attack investigation with efficient data flow tagging and
tracking. In 27th USENIX Security Symposium (USENIX Security 18), pages 1705–
1722, 2018.
[31] Kaspersky. Darkhotel apt, November 2014. https://media.kasperskycontenthub.
com/wp-content/uploads/sites/43/2018/03/08070903/darkhotel_kl_07.11.pdf.
[32] R. P. Kasturi, Y. Sun, R. Duan, O. Alrawi, E. Asdar, V. Zhu, Y. Kwon, and B. Saltafor-
maggio. Tardis: Rolling back the clock on cms-targeting cyber attacks. In Proceed-
ings of the 41st IEEE Symposium on Security and Privacy (Oakland), San Francisco,
CA, 2020.
[33] S. T. King and P. M. Chen. Backtracking intrusions. ACM Transactions on
Computer Systems (TOCS), 23(1):51–76, 2005.
[34] S. T. King, Z. M. Mao, D. G. Lucchetti, and P. M. Chen. Enriching intrusion alerts
through multi-host causality. In Proceedings of the 12th Annual Network and
Distributed System Security Symposium (NDSS), San Diego, CA, Feb. 2005.
[35] Y. Klijnsma. New insights into energetic bear’s watering hole cyber attacks on
turkish critical infrastructure, November 2017. https://www.riskiq.com/blog/
labs/energetic-bear.
[36] Y. Klijnsma. Fake flash player update linked to watering hole attack on popular
middle east news site, September 2017. https://www.riskiq.com/blog/labs/fake-
flash-update-watering-hole-attack.
[37] C. Kolbitsch, B. Livshits, B. Zorn, and C. Seifert. Rozzle: De-cloaking internet
malware. In 2012 IEEE Symposium on Security and Privacy, pages 443–457. IEEE,
2012.
[38] D. P. Kwiatkowski Ivan, Aime Félix. Holy water: ongoing targeted water-holing
attack in asia, March 2020. https://securelist.com/holy-water-ongoing-targeted-
water-holing-attack-in-asia/96311/.
[39] Y. Kwon, D. Kim, W. N. Sumner, K. Kim, B. Saltaformaggio, X. Zhang, and D. Xu.
LDX: Causality inference by lightweight dual execution. In Proceedings of the
21st ACM International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS), Atlanta, GA, Apr. 2016.
[40] Y. Kwon, F. Wang, W. Wang, K. H. Lee, W.-C. Lee, S. Ma, X. Zhang, D. Xu, S. Jha,
G. F. Ciocarlie, et al. Mci: Modeling-based causality inference in audit logging
for attack investigation. In NDSS, 2018.
[41] D. Lassalle, S. Koessel, and S. Abair. Oceanlotus blossoms: Mass digital
surveillance and attacks targeting asean, asian nations, the media, human rights
groups, and civil society, Nov. 2017. https://www.volexity.com/blog/2017/11/
06/oceanlotus-blossoms-mass-digital-surveillance-and-exploitation-of-asean-
nations-the-media-human-rights-and-civil-society/.
[42] K. H. Lee, X. Zhang, and D. Xu. High accuracy attack provenance via binary-based
execution partition. In Proceedings of the 20th Annual Network and Distributed
System Security Symposium (NDSS), San Diego, CA, Feb. 2013.
[43] B. Li, P. Vadrevu, K. H. Lee, R. Perdisci, J. Liu, B. Rahbarinia, K. Li, and M. Anton-
akakis. Jsgraph: Enabling reconstruction of web attacks via efficient tracking of
live in-browser javascript executions. In NDSS, 2018.
[44] Z. Li, S. Alrwais, X. Wang, and E. Alowaisheq. Hunting the red fox online:
Understanding and detection of mass redirect-script injections. In Proceedings of
the 35th IEEE Symposium on Security and Privacy (Oakland), San Jose, CA, May
2014.
[45] Y. Liu, M. Zhang, D. Li, K. Jee, Z. Li, Z. Wu, J. Rhee, and P. Mittal. Towards a
timely causality analysis for enterprise security. In NDSS, 2018.
[46] L. Lu, V. Yegneswaran, P. Porras, and W. Lee. Blade: an attack-agnostic approach
In Proceedings of the 17th ACM
for preventing drive-by malware infections.
conference on Computer and communications security, pages 440–450, 2010.
[47] S. Ma, K. H. Lee, C. H. Kim, J. Rhee, X. Zhang, and D. Xu. Accurate, low cost and
instrumentation-free security audit logging for windows. In Proceedings of the
Annual Computer Security Applications Conference (ACSAC), 2015.
[48] S. Ma, X. Zhang, and D. Xu. ProTracer: towards practical provenance tracing
by alternating between logging and tainting. In Proceedings of the 23rd Annual
Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb.
2016.
[49] S. Ma, J. Zhai, F. Wang, K. H. Lee, X. Zhang, and D. Xu. Mpi: Multiple perspective
attack investigation with semantic aware execution partitioning. In Proceedings
of the 25th USENIX Security Symposium (Security), Vancouver, BC, Canada, Aug.
2017.
[50] S. Ma, J. Zhai, Y. Kwon, K. H. Lee, X. Zhang, G. Ciocarlie, A. Gehani, V. Yeg-
neswaran, D. Xu, and S. Jha. Kernel-supported cost-effective audit logging for
causality tracking. In Proceedings of the 2018 USENIX Annual Technical Conference
(ATC), Boston, MA, July 2018.
[51] E. A. Manzoor, S. Momeni, and L. Akoglu. Fast memory-efficient anomaly
detection in streaming heterogeneous graphs. In Proceedings of the 22nd ACM
SIGKDD Knowledge Discovery and Data Mining (KDD), San Francisco, CA, 2016.
Session 3B: Malware CCS '20, November 9–13, 2020, Virtual Event, USA799[52] S. Milajerdi, R. Gjomemo, B. Eshete, R. Sekar, and V. Venkatakrishnan. Holmes:
Real-time apt detection through correlation of suspicious information flows. In
Proceedings of the 40th IEEE Symposium on Security and Privacy (Oakland), San
Jose, CA, May 2019.
[53] M. Mimoso. Apple watering hole attack, February 2013. https://threatpost.com/
ios-developer-site-core-facebook-apple-watering-hole-attack-022013/77546.
[54] M. Mimoso, May 2013. https://threatpost.com/watering-hole-attack-claims-us-
department-of-labor-website/100081/.
[55] M. Mimoso. Four distinct watering hole attacks dropping scanbox keylogger, Octo-
ber 2014. https://threatpost.com/four-distinct-watering-hole-attacks-dropping-
scanbox-keylogger/109061/.
[56] A. Moshchuk, T. Bragin, S. D. Gribble, and H. M. Levy. A crawler-based study of
spyware in the web. In NDSS, volume 1, page 2, 2006.
[57] A. Moshchuk, T. Bragin, D. Deville, S. D. Gribble, and H. M. Levy. Spyproxy:
Execution-based detection of malicious web content. In Proceedings of the 16th
USENIX Security Symposium (Security), Boston, MA, Aug. 2007.
[58] C. Neasbitt, B. Li, R. Perdisci, L. Lu, K. Singh, and K. Li. Webcapsule: Towards a
lightweight forensic engine for web browsers. In Proceedings of the 22nd ACM
Conference on Computer and Communications Security (CCS), Denver, Colorado,
Oct. 2015.
[59] R. Paccagnella, P. Datta, W. U. Hassan, A. Bates, C. W. Fletcher, A. Miller, and
D. Tian. Custos: Practical tamper-evident auditing of operating systems using
trusted execution. In Proc. of the Symposium on Network and Distributed System
Security (NDSS), 2020.
[60] P. Paganini. Watering hole attacks on polish banks linked to lazarus group,
February 2017. https://securityaffairs.co/wordpress/56235/apt/lazarus-group-
polish-bank.html.
[61] P. Vadrevu, J. Liu, B. Li, B. Rahbarinia, K. H. Lee, and R. Perdisci. Enabling
reconstruction of attacks on users via efficient browsing snapshots. In Proceedings
of the 24th Annual Network and Distributed System Security Symposium (NDSS),
San Diego, CA, Feb. 2017.
[62] Q. Wang, W. U. Hassan, A. Bates, and C. Gunter. Fear and logging in the internet
of things. In Network and Distributed Systems Symposium, 2018.
[63] Q. Wang, W. U. Hassan, D. Li, K. Jee, X. Yu, K. Zou, J. Rhee, Z. Chen, W. Cheng,
C. Gunter, et al. You are what you do: Hunting stealthy malware via data
provenance analysis. In Symposium on Network and Distributed System Security
(NDSS), 2020.
[64] Y.-M. Wang, D. Beck, X. Jiang, and R. Roussev. Automated web patrol with strider
honeymonkeys: Finding web sites that exploit browser vulnerabilities. In IN
NDSS. Citeseer, 2006.
[65] T. Yadav and A. M. Rao.
Technical aspects of cyber kill chain. CoRR,