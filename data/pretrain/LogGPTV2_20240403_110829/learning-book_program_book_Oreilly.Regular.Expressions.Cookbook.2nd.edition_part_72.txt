i)
(?: em |strong ) # List of tags to avoid matching
\b
# Word boundary avoids partial word matches
[a-z]
# Tag name initial character must be a-z
(？:[^>""]
# Any character except >, ", or
"[A"]**
# Double-quoted attribute value
'[']**
# Single-quoted attribute value
*
Regex options: Case insensitive, free-spacing
Regexflavers: NET, Java, XRegExp, PCRE, Perl, Python, Ruby
Solution 2: Match tags except  and , and any tags that contain attributes
With one change replacing the \b) with √s*>), you can make the regex also match
any  and  tags that contain attributes:
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Once again, the same regex in free-spacing mode:
530 | Chapter 9: Markup and Data Fermats
---
## Page 547
"]
 Any character except >,", or
1"[A"]*”
# Double-quoted attribute value
*[，√].
# Single-quoted attribute value
y*
Regex options: Case insensitive, free-spacing
Regexflarer: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
Discussion
This recipe’s regular expressions have a lot in common with those we’ve included earlier
in this chapter for matching XML-style tags. Apart from the negative lookahead added
to prevent some tags from being matched, these regexes are nearly equivalent to the
"(X)HTML tags (loose)* regex from Recipe 9.1. The other main difference here is that
we're not capruring the tag name to backreference 1.
So let’s look more closely at what’s new in this recipe. Solution 1 never matches 
or  tags, regardless of whether they have any atributes, but matches all other
tags. Solution 2 matches all the same tags as Solution 1, and additionally matches
 and  tags that contain one or more attributes. Table 9-2 shows a few
example subject strings that illustrate this.
Tabie 9-2. A few example subject strings
Subject string
Solution 1
Solution 2
Match
Math
Match
Match
Match
Match
(en>
Nomatch
 No match
No matdh
 No match
No matdh
Match
Since the point of these regexes is to replace matches with empty strings (in other words,
remove the tags), Solution 2 is less prone to abuse of the allowed  and 
tags to provide unexpected formatting or other shenanigans.
9.3 Remove AllXML-Style Tags Except and  | 531
---
## Page 548
This recipe has (until now) intentionally avoided the word “whitelist*
when describing how only a few tags are left in place, since that word
has security connotations. There are a variety of ways to work aroumd
this pattern’s constraints using specially crafted, malicious HTML
strings. If you're worried about malicious HTML and cross-site scripting
(XSS) attacks, your safest bet is to convert all , and & characters to
their corresponding named character references (8lt;, 8gt;, and
&anp;), then bring back tags that are knowm to be safe (as long as they
contain no attributes or only use those within a select ist of approved
attributes). style is an example of an attribute that is not safe, since
bring back  and  tags with no attributes after replacing , and & with character references, search case-insensitively using the
regex 81t;(/?) (en|strong)agt; > and replace matches with  (or
in Python and Ruby, cx).
Variations
Whitelist specific attributes
Consider these new requirements: you need to match all tags except , , and
, with two exceptions. Any  tags that have attributes other than href or
title should be matched, and if cen> or  tags have any attributes at all, match
them too. All matched strings will be removed.
In other words, you want to remove all tags except those on your whitelist (, ,
and ). The only whitelisted attributes are href and title, and they are allowed
only within ca> tags. If a nonwhitelisted atribute appears in any tag, the entire tag
should be removed.
Here’s a regex that can get the job done:
)
[a-z](?:[^>"*]1*[^]*|′[′]*]*>
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
With free-spacing:
or 
Ia
# Only avoid matching  tags that use only
#
0Y 
(?:
\s+
#
href and/or title attributes
(?:href|title)
(?:”[^]**|′[^′]**)# Quoted attribute value
\s*=\s*
532 | Chapter 9: Markup and Data Fermats
---
## Page 549
) *
\s* >
# Only avoid matching these tags when they’re
#
1inited to any attributes permitted above
[a-z]
# Tag nane initial character must be a-z
(？:[^>""]
# Any character except >, ", or '
"[A"]*"
# Double-quoted attribute value
*[，√].
# Single-quoted attribute value
)*
Regex options: Case insensitive, free-spacing
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
This pushes the boundary of where it makes sense to use such a complicated regex. If
your rules get any more complex than this, it would probably be bertter to write some
code based on Recipe 3.11 or 3.16 that checks the value of each matched tag to deter-
mine how to process it (based on the tag name, included attributes, or whatever else is
needed).
See Also
tolerance for invalid markup.
Recipe 9.1 shows how to match all XML-style tags while balancing trade-offs including
Recipe 9.2 is the opposite of this recipe, and shows how to match a select list of tags,
rather than all except a few.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.8 explains altermation. Recipe 2.9 ex-
plains grouping. Recipe 2.12 explains repetition. Recipe 2.16 explains lookaround.
9.4 MatchXMLNames
Problem
You want to check whether a string is a legitimate XML name (a common syntactic
construct). XML provides precise rules for the characters that can occur in a name, and
reuses those rules for element, attribute, and entity names, processing instruction tar-
gets, and more. Names must be composed of a letter, underscore, or colon as the first
character, followed by any combination of letters, digits, underscores, colons, hyphens,
and periods. That’s actually an approximate description, but it’s pretty close. The exact
list of permitted characters depends on the version of XML in use.
Alternatively, you might want to splice a patterm for matching valid names into other
XML-handlling regexes, when the extra precision warrants the added complexity.
Following are some examples of valid names:
9.4 MatchXMLNames | 533
---
## Page 550
·thing
*_thing_2_
: Poccuicxxe-Bemb
•fantastic4:the.thing
日本の物
Note that letters from non-Latin scripts are allowed, even including the ideographic
characters in the last example. Likewise, any Unicode digit is allowed after the first
character, not just the Arabic numerals 09.
For comparison, here are several examples of invalid names that should not be matched
by the regex:
•thing!
•thing with spaces
*.thing.with.a.dot.in.front
•-thingamaj1g
•2nd_thing
Solution
Like identifiers in many programming languages, there is a set of characters that can
occur in an XML name, and a subset that can be used as the first character. Those
character lists are dramatically different for XML 1.0 Fourth Edition (and earlier) and
XML 1.1 and 1.0 Fifth Edition. Essentially, XML 1.1 names can use all the characters
the additional characters are nothing more than positions in the Unicode table. Most
permitted by 1.0 Fourth Edition, plus almost a million more. However, the majority of
don’t have a character assigned to them yet, but are allowed for future compatibility
as the Unicode character database expands.
For brevity’s sake, references to XML 1.0 in this recipe describe the first through fourth
editions of XML 1.0. When we talk about XML. 1.1 names, we're also describing the
XML 1.0 Fifth Edition rules. The fifth edition only became an official W3C Recom-
mendation at the end of November 2008, nearly five years after XML 1.1.
Regexes in this recipe are shown with start and end of string anchors
: not at all.If you want to embed any of thee patterns in a longer regular
(^-$s) that cause your subject string to be matched in its entirety or
remove the anchors at the beginning and end of the patterms displayed
here. Anchors are explained in Recipe 2.5.
XML 1.0 names (approximate)
[ :_\p{L1)}\p{Lu}\p{Lt}\p{Lo}\p{N1)][ :_\-- (p{L}\p{M)\p{Nd}p(Nl} ]*$
534 | Chapter 9: Marlkup and Data Fermats
---
## Page 551
Regexoptions: None (* ^ and S match at line breaks" must not be set)
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Ruby 1.9
PCRE must be compiled with UTF-8 support for the Unicode properties ( metasequences to work
with values greater than FF hexadecimal. In PHP, turn on UTF-8 support with the /u
pattern modifier.
 au aas nq e 1e suossadxa renlau apou oddns nou sop g'I qn
tions" section of this recipe for a possible alternative solution that is less precise.
Although we’ve claimed these regular expressions follow the XML 1.1 name rules ex-
actly, that’s actually only true for characters up to 16 bits wide (positions 0x0000
through OxFFFF, which composes Unicode’s plane 0 or Basic Mulrilingual Plane). XML
1.1 additionally allows the 917,503 code points between positions 0x10000 and
OxEFFFF (Unicode planes 114) to occur after the initial name character. However,
only PCRE, Perl, Python, and Ruby 1.9 are even capable of referencing code points
beyond OxFFFF, and you are unlikely to encounter any in real-world XML names (for
9.4 Match XML Names | 535
---
## Page 552
one thing, most of the positions in this range have not been assigned an actual char-
acter). If you need to add support for these extra code points, add one of the following
ranges at the end of the second character class:
Javα 7, PCRE, Perl
x{10000}x{EFFFF}
Python
\U00010000-\U000EFFFF>
Ruby 1.9
\u{10000} -\u{EFFFF})
Even without adding this massive range at the end, the XML 1.1 name character list
we've just shown is much more permissive than XML 1.0.
Python’s support for the syntax with \us followed by eight hexadecimal digits comes
from its syntax for literal strings. See Recipe 2.7 for important details about this.
Discussion
Since many of the regular expressions in this chapter deal with matching XML elements,
this recipe largely serves to provide a fuller discussion of the patterns that canbe used
Elsewhere, we mostly stick to simpler pattems that are less precise, in the interest of
when you want to get very specific about how tag and attribute names are matched.
readability and efficiency.
So let's dig a little deeper into the rules behind these patterns.
XML 1.0 names
The XML 1.0 specification uses a whitelist approach for its name rules, and explicitly
lists all the characters that are allowed. The first character in a name can be a colon
(),underscore _), or approximately any characterin the following Unicode categories:
• Lowercase Letter (Ll)
▪Uppercase Letter (Lu)
•Titlecase Letter (Lt)
•Other Letter (Lo)
•Letter Number (Nl)
After the initial character, hyphen (-), period (), and any character in the following
categories are allowed in addition to the characters already mentioned:
• Mark (M), which combines the subcategories Nonspacing Mark (Mn), Spacing
Mark (Mc), and Enclosing Mark (Me)
•Modifier Letter (Lm)
•Decimal Number (Nd)
536 | Chapter 9: Markup and Data Fermats
---
## Page 553
These rules lead us to the regular expression shown in the *Solution" section of this
recipe. Here it is again, this time in free-spacing mode:
# Start of string
[:_\p{L1)p{Lu}p{Lt)\p{Lo}p{N1)]
1# Initial name character
[=\-- \p{L}\p(M}\p{Nd}\p{N1}]*
# Subsequent name characters (optional)
# End of string
Regexoptions: Free-spacing (* ^ and $ match at line breaks" must not be set)
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Ruby 1.9