I came about this when using the `sum` function and `DataFrames()`. Consider
the following short example.
    Df = DataFrame()
    M = reshape(rand(1:20, 16), (4, 4))
    Msum = sum(M, 2)
    Df[:c1] = Msum
    Main> Df[:c1] = Msum
    ERROR: ArgumentError: setindex!(::DataFrame, ...) only broadcasts scalars, not arrays
    Stacktrace:
     [1] setindex!(::DataFrames.DataFrame, ::Array{Int64,2}, ::Symbol) at /Users/abmlab/.julia/v0.6/DataFrames/src/dataframe/dataframe.jl:372
     [2] eval(::Module, ::Any) at ./boot.jl:235
but if I do this
    tarr = zeros(Int64, 4)
    Df[:c1] = tarr
It works. Both are one dimensional arrays with 4 elements, so what gives? I
think its a problem with dimensions. See following
    Main> Msum = sum(M, 2)
    4Ã—1 Array{Int64,2}:
     29
     29
     35
     41
so the `sum` function produces a one dimensional array but the type is set to
`Array{Int64, 2}`. This is further seen by
    Main> size(Msum)
    (4, 1)
    Main> size(tarr)
    (4,)
Is this a bug or is this expected behaviour. How can I change the dimension
from the `sum` function to 1? The `reshape` function dosn't work.
edit: `reshape` does work by running `reshape(Msum, (15, ))`