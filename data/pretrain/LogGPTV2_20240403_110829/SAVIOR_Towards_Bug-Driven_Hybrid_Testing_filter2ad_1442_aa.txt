title:SAVIOR: Towards Bug-Driven Hybrid Testing
author:Yaohui Chen and
Peng Li and
Jun Xu and
Shengjian Guo and
Rundong Zhou and
Yulong Zhang and
Tao Wei and
Long Lu
2020 IEEE Symposium on Security and Privacy
SAVIOR: Towards Bug-Driven Hybrid Testing
Yaohui Chen,∗ Peng Li,† Jun Xu,‡ Shengjian Guo, † Rundong Zhou, † Yulong Zhang, † Tao Wei, † Long Lu,∗
∗Northeastern University
†Baidu USA ‡Stevens Institute of Technology
Abstract—Hybrid testing combines fuzz testing and concolic
execution. It leverages fuzz testing to test easy-to-reach code
regions and uses concolic execution to explore code blocks
guarded by complex branch conditions. As a result, hybrid testing
is able to reach deeper into program state space than fuzz
testing or concolic execution alone. Recently, hybrid testing has
seen signiﬁcant advancement. However, its code coverage-centric
design is inefﬁcient in vulnerability detection. First, it blindly
selects seeds for concolic execution and aims to explore new code
continuously. However, as statistics show, a large portion of the
explored code is often bug-free. Therefore, giving equal attention
to every part of the code during hybrid testing is a non-optimal
strategy. It slows down the detection of real vulnerabilities by
over 43%. Second, classic hybrid testing quickly moves on after
reaching a chunk of code, rather than examining the hidden
defects inside. It may frequently miss subtle vulnerabilities
despite that it has already explored the vulnerable code paths.
We propose SAVIOR, a new hybrid testing framework pi-
oneering a bug-driven principle. Unlike the existing hybrid
testing tools, SAVIOR prioritizes the concolic execution of the
seeds that are likely to uncover more vulnerabilities. Moreover,
SAVIOR veriﬁes all vulnerable program locations along the
executing program path. By modeling faulty situations using
SMT constraints, SAVIOR reasons the feasibility of vulnerabil-
ities and generates concrete test cases as proofs. Our evaluation
shows that the bug-driven approach outperforms mainstream
automated testing techniques, including state-of-the-art hybrid
testing systems driven by code coverage. On average, SAVIOR
detects vulnerabilities 43.4% faster than DRILLER and 44.3%
faster than QSYM, leading to the discovery of 88 and 76 more
unique bugs, respectively. According to the evaluation on 11 well
fuzzed benchmark programs, within the ﬁrst 24 hours, SAVIOR
triggers 481 UBSAN violations, among which 243 are real bugs.
I. INTRODUCTION
Software inevitably contains defects [14, 64]. A large
amount of these defects are security vulnerabilities that can
be exploited for malicious purposes [54]. This type of vulner-
able code has become a fundamental threat against software
security. Contributed from both academia and industry, au-
tomated software testing techniques have gained remarkable
advances in ﬁnding software vulnerabilities. In particular,
people have widely used fuzz testing [2, 68] and concolic
execution [51, 59] to disclose a great amount of vulnerabilities
every year. Nevertheless, the inherent limitations of these two
techniques impede their further applications. On one hand,
fuzz testing quickly tests a program, but it hardly explores
code regions guarded by complex conditions. On the other
hand, concolic execution excels at solving path conditions
but
it frequently directs the execution into code branches
containing a large number of execution paths (e.g., loop).
Due to these shortcomings, using fuzz testing or concolic
execution alone often ends with large amounts of untested code
after exhausting the time budget. To increase code coverage,
recent works have experimented the idea of hybrid testing,
which combines both fuzz testing and concolic execution
[47, 66, 73].
The goal of hybrid testing is to utilize fuzzing in path
exploration and leverage concolic execution to solve hard-
to-resolve conditions. A hybrid approach typically lets fuzz
testing run as much as possible. When the fuzzer barely makes
any progress, the hybrid controller switches to the concolic
executor which re-runs the generated seeds from fuzzing.
During the run, the concolic executor checks each conditional
branch to see whether its sibling branches remain untouched.
If so, the concolic executor solves the constraints of the new
branch and contributes a new seed for fuzzing. In general, this
hybrid approach guides the fuzzer to new regions for deeper
program space exploration.
As shown in recent works [66, 73], hybrid testing creates
new opportunities for higher code coverage. However,
its
coverage-driven principle unfortunately results in inefﬁciency
when the end goal is vulnerability detection. Two key issues
cause such inefﬁciency. First, existing approaches value all
the seeds from fuzzing equally. However, the code regions
reachable by a number of seeds might lack vulnerabilities
and testing them is expensive (e.g., constraint solving and
extra fuzzing). Consequently, hybrid testing often exhausts the
assigned time budget way before it ﬁnds any vulnerability.
Second, hybrid testing could fail to identify a vulnerability
even if it reaches the vulnerable code via the correct path. This
is because hybrid testing primarily concentrates on covering
the encountered code blocks in the manner of random exercise.
This strategy oftentimes has low chances to satisfy the subtle
conditions to reveal a vulnerability.
In this work, we design and implement SAVIOR (ab-
breviation for Speedy-Automatic-Vulnerability-Incentivized-
ORacle), a hybrid, bug-driven testing method. To fulﬁll this
goal, we use two novel techniques in SAVIOR:
Bug-driven prioritization: Instead of running all seeds with-
out distinction in concolic execution, SAVIOR prioritizes
those that have higher possibilities of leading to vulnerabilities.
Speciﬁcally, before the testing, SAVIOR analyzes the source
code and statically labels the potentially vulnerable locations
in the target program. Here SAVIOR follows existing meth-
ods [21, 35] to conservatively label all suspicious locations.
Moreover, SAVIOR computes the set of basic blocks reach-
able from each branch. During dynamic testing, SAVIOR
© 2020, Yaohui Chen. Under license to IEEE.
DOI 10.1109/SP40000.2020.00002
1580
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:58:09 UTC from IEEE Xplore.  Restrictions apply. 
(a) A simpliﬁed version of the packet-parsing code in
tcpdump-4.9.2, in which pcap_handler2 con-
tains vulnerabilities.
Fig. 1: A demonstrative example of hybrid testing. Figure 1a presents the code under test. Figure 1b and 1c are the paths
followed by two seeds from the fuzzer. Their execution follows the red line and visits the grey boxes. Note that the white
boxes connected by dotted lines are non-covered code.
(c) The path followed by a seed
that matches neither LINKTYPE1 nor
LINKTYPE2.
(b) The path followed by a seed that
matches LINKTYPE1 but mismatches
PACKET1.
prioritizes the concolic execution seeds that can visit more
important branches (i.e., branches whose reachable code has
more vulnerability labels). Intuitively,
those branches may
guard higher volumes of vulnerabilities and hence, prioritizing
them could expedite the discovery of new vulnerabilities. As
we will show in Section V, this prioritization enables SAVIOR
to outperform DRILLER [66] and QSYM [73] with a 43.4%
and 44.3% increase in bug discovering rate, respectively.
Bug-guided veriﬁcation: Aside from accelerating vulnerabil-
ity detection, SAVIOR also veriﬁes the labeled vulnerabilities
along the program path traversed by the concolic executor.
Speciﬁcally, SAVIOR synthesizes the faulty constraint of
triggering each vulnerability on the execution path. If such
constraint under the current path condition is satisﬁable,
SAVIOR solves the constraint to construct a test input as
the proof. Otherwise, SAVIOR proves that the vulnerability
is infeasible on this path, regardless of the input. This SMT-
solving based strategy, as demonstrated in Section V, enables
DRILLER, QSYM, and SAVIOR to disclose not only all the
listed bugs but also an additional group of bugs in LAVA-
M [36]. Besides, it facilitates the three hybrid tools to ﬁnd at
least 22.2%, 25%, 4.5% more UBSan violations.
This work is not the ﬁrst one that applies hybrid testing to
vulnerability detection. However, to the best of our knowledge,
SAVIOR is the ﬁrst work that explores bug-driven hybrid
testing. On one hand, SAVIOR concentrates on software code
that contains more potential vulnerabilities. This design not
only brings faster coverage of vulnerabilities but also decreases
the testing cost of the code that is less likely vulnerable. On
the other hand, SAVIOR validates the vulnerabilities by the
objective proofs of existence. In contrast, traditional hybrid
testing methods can easily miss subtle cases. Moreover, the
two proposed techniques are not limited to SAVIOR itself
since they are general enough for other systematic software
analysis methods. We will discuss the details in Section III.
In summary, we make the following contributions.
• We design SAVIOR, a bug-driven hybrid testing tech-
nique. It substantially enhances hybrid testing with bug-
driven prioritization and bug-guided veriﬁcation.
• We build SAVIOR and show that our implementation
can scale to a diverse set of real-world software.
• We demonstrate the effectiveness of SAVIOR by a
comprehensive evaluation. In total, SAVIOR discov-
ers 481 unique security violations in 11 well-studied
benchmarks. On average, SAVIOR detects vulnerabilities
43.4% faster than DRILLER and 44.3% faster than
QSYM, leading to the discovery of 88 and 76 more
security violations in 24 hours.
The rest of this paper is organized as follows. Section II
states the background of hybrid testing and motivates our
research. Section III and Section IV present the design and
implementation of SAVIOR in detail. Section V evaluates
the core techniques of SAVIOR. Section VI summarizes the
related work. Finally, we conclude this work in Section VII.
II. BACKGROUND AND MOTIVATION
This work is motivated by the limitations of hybrid testing
in vulnerability detection. In this section, we ﬁrst introduce
the background of hybrid testing and then demonstrate the
limitations by two examples.
A. Hybrid Testing
Hybrid testing combines fuzz testing and concolic execution
to achieve high code coverage. For the ease of understanding,
we use the example in Figure 1 to explain how it works. The
explanation is based on Driller [66] since it has been the de
facto implementation of hybrid testing.
The example in Figure 1 is taken from tcpdump-4.9.2.
Figure 1a shows the code — it ﬁrst uses the link-layer
type from input to select a pcap handler and then uses the
handler to dissect packets. Our objective is to test the entry
function parse_pcap and reach the vulnerable function
pcap_handler2.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:58:09 UTC from IEEE Xplore.  Restrictions apply. 
1581
1definevoid@bug(%struct.msg_ds*%msg)#0{2entry:3%msg.addr=alloca%struct.msg_ds*,align84%sz=allocai64,align85%buf=allocai8*,align86store%struct.msg_ds*%msg,%struct.msg_ds**%msg.addr,align8,!7%0=load%struct.msg_ds*,%struct.msg_ds**%msg.addr,align8,!8%msg_sz=getelementptrinbounds%struct.msg_ds,%struct.msg_ds*%0,i320,i324,!9%1=loadi64,i64*%msg_sz,align810%2=call{i64,i1}@llvm.uadd.with.overflow.i64(i6424,i64%1),!11%3=extractvalue{i64,i1}%2,012%4=extractvaluei64,i1%2,113%5=xori1%4,true,!saviorBugNum!1;labelofintegeroverflow,!14bri1%5,label%cont,label%handler.add_overflow,!prof!2,!saviorBugNum!1,!,!1516handler.add_overflow:;preds=%entry,!17callvoid@__ubsan_handle_add_overflow(i8*bitcast({{[6xi8]*,i32,i32},{i16,i16,[16xi8]}*}*@1toi8*),i6424,i64%1)#7,!saviorBugNum!1,!,!,!18brlabel%cont,!saviorBugNum!11920cont:;preds=%handler.add_overflow,%entry,!21storei64%3,i64*%sz,align822%6=loadi64,i64*%sz,align823%call=callnoaliasi8*@malloc(i64%6)#724storei8*%call,i8**%buf,align825%7=loadi64,i64*%sz,PI:EMAIL(i8*bitcast(void(%struct.msg_ds*)*@bugtoi8*),i80,i64%7,i324,i1false),!,!27retvoid28}1intparse_pcap(){2intlink_type;3/*readlink-layertypefrominput*/4read(input_fd,&link_type,sizeof(int));5/*selectahandlerbasedonlink_type*/6if(link_type==LINKTYPE1){7pcap_handler1();8return0;9}10if(link_type==LINKTYPE2){11pcap_handler2();12return0;13}14...15return-1;16}17intpcap_handler1(){18intpacket_type;19read(input_fd,&packet_type,sizeof(int));20if(packet_type==PACKET1){21packet_handler1();22return0;23}24...25return-1;26}54.read(input_fd,&link_type…)6.if(link_type…)7.pcap_handler1()19.read(input_fd,&packet_type…)20.if(packet_type...)25.return-115.return-122.packet_handler1()4.read(input_fd,&link_type…)6.if(link_type==LINKTYPE1)10.if(link_type==LINKTYPE2)15.return-111.pcap_handler2()In the test, we assume hybrid testing starts with a seed that
executes the path shown in Figure 1b. After that, the fuzzer
mutates the seed to run a second path shown in Figure 1c. It
then, however, fails to synthesize inputs that match the packet
type at line 20 and the link-layer type at line 10, due to the
huge mutation space (232 possibilities). This situation prevents
the fuzzer from testing the remaining code and makes hybrid
testing switch to concolic execution.
After executing the seed that covers the path in Figure 1b,
the concolic executor backtracks to the branch statement at
line 20. Solving the input packet_type to PACKET1 by
a SMT solver, the executor generates a new seed to cover
that branch. Then, the hybrid controller suspends the concolic
execution and resumes the fuzzer. Guided by the new seed,
the fuzzer tests packet_handler1 and switches back to
concolic execution after that. This time, the concolic executor
runs the seed, following the path in Figure 1c. After solving
the branch condition at line 10, it generates a seed for the
ﬂow from line 10 to line 11. Further fuzz testing can ﬁnally
reach the vulnerable code in pcap_handler2.
Note that the testing processes by different hybrid tools may
vary from the above description. For instance, QSYM [73]
keeps running concolic execution instead of invoking it in an
interleaved manner. Despite those implementation differences,
existing tools share a similar philosophy on scheduling the
seeds to concolic execution. That
the seeds
indiscriminately [66, 73], presumably assuming that
these
seeds have equal potentials in contributing to new coverage.
they treat
is,
B. Motivation
Inefﬁciency in Covering Vulnerable Code: Although hybrid
testing specializes in coverage-driven testing, it still needs
substantial time to saturate hard-to-reach code compartments,
which often overspends the time budget. To discover more
vulnerabilities in a limited time frame, an intuitive way is to
prioritize the testing of vulnerable code. However, the current
hybrid testing method introduced in Section II-A does not meet
this requirement.
Consider the example in Figure 1, where concolic execution
chronologically runs the seeds to explore the paths shown
in Figure 1b and Figure 1c. This sequence indeed postpones
the testing of the vulnerable function pcap_handler2. The
delay can be signiﬁcant, because concolic execution runs
slowly and the fuzz testing on packet_handler1 may last
a long time. In our experiments1, DRILLER spends minutes on
reaching pcap_handler2 with the aforementioned sched-
ule. However, if it performs concolic execution ﬁrst on the
path in Figure 1c, the time can reduce to seconds.
Not surprisingly, the delayed situations frequently happen in
practice. As we will show in Section V, on average this defers
DRILLER and QSYM to cover vulnerabilities by 43.4% and
44.3%, leading to reduced efﬁciency in vulnerability ﬁnding.
1SAVIOR is customized to do this test since DRILLER cannot run on
tcpdump. More details can be found in Section V
Fig. 2: A demonstrative example of limitation in ﬁnding
defects by existing hybrid testing. This defect comes from
objdump-2.29 [15].
Deﬁciency in Vulnerability Detection: Hybrid testing often
fails to identify a vulnerability even if it approaches the vulner-
able location along the right path. Figure 2 demonstrates an
integer overﬂow in objdump-2.29. At line 12, the program
copies a value from sec to section→size. Next, this
value is used as the size of a memory allocation request at
line 15. By carefully handcrafting the input, an adversary can
make section→size be the value 232-1 on 32-bit systems
or 264-1 on 64-bit systems. This wraps section→size+1
around to 0 and makes malloc return a zero-byte buffer.
When the buffer is further used, a segfault or a memory leak
would occur.
In this example, hybrid testing can quickly generate a seed
to hit line 15. However, it could barely trigger the integer
overﬂow. As the program enforces no constraints on the input
bytes that propagate to section→size, hybrid testing can
only do random mutation to synthesize the extreme value(s).
Taking into account the tremendous possibility space (232 or
264), the mutation is unlikely to succeed.
A. Core Techniques
III. DESIGN
The design of SAVIOR is bug-driven, aiming to ﬁnd bugs
faster and more thoroughly. We propose two techniques to
achieve the goal: bug-driven prioritization and bug-guided
veriﬁcation. Below we present an overview of our techniques.
Bug-driven prioritization: Recall that classic hybrid testing
blindly schedules the seeds for concolic execution, without
weighing their bug-detecting potentials. This can greatly defer
the discovery of vulnerabilities. To remedy this limitation,
SAVIOR collects information from the target source code
to prioritize seeds which have higher potentials to trigger
vulnerabilities. This approach, however, needs to predict the
amount of vulnerabilities that running concolic execution on a
seed could expose. The prediction essentially depends on two
prerequisites: R1 – A method to assess the reachable code
regions after the concolic execution on a seed and R2 – A
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:58:09 UTC from IEEE Xplore.  Restrictions apply. 
1582
1/*lenispropagatedfromafieldintheinput*/2voidahcp_print(...u_char*cp,constu_intlen){34uint8_tversion;5...6version=EXTRACT_U_1(cp);7cp+=1;8switch(version){9...10/*blockingcondition1*/11caseAHCP_VERSION_1:{12/*blockingcondition2*/13if(lenstart!=NULL){6if(streq(...)7returnTRUE;8free(section->start);9}10...11/*section->sizeiscopiedfrominput*/12section->size=bfd_get_section_size(sec);1314/*settingsection->sizeas0xffffffffffffffffon64-bitsystemsor0xffffffffon32-bitsystems,mallocwillreturnazero-bytebuffer,leadingtooutofboundaccess*/,!,!,!15section->start=malloc(section->size+1);16...17}1typedefstructmsg_ds{2charstr[2];intmagic,ver,secret_num;3}msg_t;45intmain(){6msg_tmsg;7read(STDIN,&msg,sizeof(msg_t));89if(msg.ver==0xFFFFAB)10log_msg(msg);11if(msg.str[0]!='h')12return-1;13if(msg.str[1]!='i')14return-1;15if(msg.magic!=0x12FF6EF)16return-1;1718bug();19return0;20}22
.
Fig. 3: An example showing how to estimate the bug-detecting
potential of a seed. In this example, the seed follows the path
b1->b2->b3->b4. Basic block b5 and b7 are unexplored
and they can reach L1 and L2 UBSan labels, respectively. They
have been attempted by constraint solving for S1 and S2 times.
The ﬁnal score for this seed is e−0.05S1×L1+e−0.05S2×L2
metric to quantify the amount of vulnerabilities in a chunk of
code. SAVIOR fulﬁlls them as follows.
To meet R1, SAVIOR approximates the newly explorable
code regions based on a combination of static and dynamic
analysis. During compilation, SAVIOR statically computes
the set of reachable basic blocks from each branch. At run-
time, SAVIOR identiﬁes the unexplored branches on the
execution path of a seed and calculates the basic blocks that
are reachable from those branches. We deem that these blocks
become explorable code regions once the concolic executor
runs that seed.
To meet R2, SAVIOR utilizes UBSan [21] to annotate three