### PDF Specification and Implementation Flaws

#### Exploits Compliant with the PDF Specification
All exploits discussed in this section are compliant with the PDF specification. However, they exploit flaws in the applications' implementation to improve the stealthiness of the attacks.

#### Applications’ Implementation Flaws
These attacks leverage specific implementation flaws to enhance their stealthiness, making them harder to detect on various UI layers.

### User Interface (UI) Layers
- **UI-Layer 1**: This layer automatically displays the signature status when the PDF is opened.
- **UI-Layer 2**: This layer requires the user to inspect additional panels or settings.
- **UI-Layer 3**: This layer is only relevant for EAA, as SSA does not appear in the UI element showing PDF annotations.

### Vulnerability Classification
- **Vulnerable (cid:2)**: The attack is undetectable on the UI Layer.
- **Limited Vulnerability (cid:4)(cid:3)**: The attack is undetectable on the UI Layer but a general notification is shown.
- **Secure (cid:3)**: The attack is clearly detectable on the UI Layer.

### Evaluation of 26 PDF Applications
We evaluated 26 different PDF applications against EAA and SSA. The results are summarized in Table IV.

#### Abusing PDF Specification Flaws
- **UI-Layer 1**:
  - **EAA**: 15 applications are vulnerable (cid:2), and 7 have limited vulnerabilities (cid:4)(cid:3).
  - **SSA**: 8 applications are vulnerable (cid:2), and 3 have limited vulnerabilities (cid:4)(cid:3).
  - Notable behavior: PDF Editor 6 Pro and PDFelement Pro invalidate the signature status whenever an annotation is added to a certified document, preventing the attacks.

- **UI-Layer 2**:
  - Most applications detected the SSA attack on this layer. LibreOffice has limited vulnerabilities (cid:4)(cid:3) due to a bug that prevents signatures from being displayed.

- **UI-Layer 3**:
  - Relevant only for EAA. All applications except LibreOffice Draw (which lacks a dedicated panel for PDF annotations) detected the EAA attack.

#### Abusing Applications’ Implementation Flaws
- **UI-Layer 1**:
  - **EAA**: 3 more applications (Expert PDF 14, PDF Architect, SodaPDF) are vulnerable (cid:2).
  - **SSA**: 7 more applications (Adobe Acrobat Reader DC and Pro 2017, Perfect PDF 8 Reader and 10 Premium, Power PDF Standard) are vulnerable (cid:2).

- **UI-Layer 2**:
  - **SSA**: 9 applications are vulnerable (cid:2), and 9 have limited vulnerabilities (cid:4)(cid:3).
  - **EAA**: 2 more applications (Foxit PhantomPDF, Foxit Reader) are vulnerable (cid:2).

- **UI-Layer 3**:
  - 15 applications are vulnerable (cid:2), and 3 have limited vulnerabilities (cid:4)(cid:3).

### Permission Implementation Analysis
- **P2 Certified Documents (SSA)**: Attacks that work for P2 also work for P3.
- **P3 Certified Documents (EAA)**: For lower permission levels (EAA for P2 or P1, SSA for P1), the success depends on the application's implementation.
- **Incorrectly Implemented Permissions**: 11 out of 26 applications had incorrectly implemented permissions. For example, PDF Architect and Soda PDF partially implement permissions, allowing EAA and SSA at lower permission levels.

### Additional Findings
- **Foxit Reader and Foxit PhantomPDF**: These applications conform to the specification for individual permissions. However, a serious bug was discovered that allows complete changes to the PDF document without invalidating the certification or signature by swapping the order of incremental updates.

### Countermeasures
#### Long-Term Countermeasures: Fixing the PDF Specification
- **Preventing Evil Annotations**: At permission level P3, many permitted annotations (e.g., FreeText, Stamp, Redact) can be used to manipulate the content. To mitigate this, the PDF specification should be revised to restrict these annotations.

This optimized text provides a clear and structured overview of the findings, making it easier to understand the context and implications of the vulnerabilities and countermeasures.