s
s
r
r
r
r
r
e
e
e
e
e
p
p
p
p
p
s
s
s
s
s
t
t
t
t
t
s
s
s
s
s
e
e
e
e
e
u
u
u
u
u
q
q
q
q
q
e
e
e
e
e
r
r
r
r
r
 60000
 60000
 60000
 60000
 60000
 50000
 50000
 50000
 50000
 50000
 40000
 40000
 40000
 40000
 40000
 30000
 30000
 30000
 30000
 30000
 20000
 20000
 20000
 20000
 20000
 10000
 10000
 10000
 10000
 10000
 0
 0
 0
 0
 0
aho-corasick
prospector
prospector+
s
p
b
M
 1000
 900
 800
 700
 600
 500
 400
 300
 200
 100
throughput
 1
 2
 3
 4
 5
 6
# micro-engines
Fig. 5. Prospector throughput & Macro benchmark
5.2 Macro Benchmark
Our ﬁnal experiment evaluates the pipeline in hardware. We do not include re-
sults for the FEs on the XScale again, because their throughput is not measurable
in bitrate and we have already computed an upper bound. For this test we con-
nected our board to a mirror image of communication between three computers.
By using mirroring we were able to test peak throughput without interfering with
the active TCP control ﬂow. The traﬃc was generated using ab, a benchmarking
tool for Apache. When ran against two servers at the same time our maximally
obtainable rate was 940Mbits. The results are shown in Figure 5(right).
From the Figure we can see that with 6 micro-engines we can process all
traﬃc. To free up the 6th micro-engine we had to remove the transmission unit
temporarily. The presented numbers are worst-case estimations as a result of
crude dropped traﬃc statistics. Actual performance could be up to 20% higher.
6 Discussion
Limitations. The presented solution is an amalgam of solutions. While fairly pow-
erful as a whole, we are aware of improvements that could be made to its parts. For
starters, while Ruler accepts most Snort rules through our snort2ruler compiler,
there is a subset of expressions that we cannot handle yet. In Prospector, we do not
currently block format string attacks, although this is possible in principle. We are
currently implementing this feature and expect to have it available soon. Also, the
ﬂow-based IDS (stage 5) is currently rather naive and should be improved.
Finally, while we have tried to implement a powerful set of network-based
intrusion prevention methods, we have clearly not exhausted the options. For
instance, as we operate close to the end-hosts with application-awareness, we are
still considering ﬁlters such as those generated by Vigilante [13]. We opted for
protocol-aware ﬁltering because Vigilante does not handle polymorphism well.
Hardware Acceleration. An obvious way of increasing network throughput is to
switch to expensive specialised hardware. Although implemented on an embedded
device, SafeCard is expressly not meant to explore that option. The IXP2400 is 5
328
W. de Bruijn et al.
years old and no longer supported by Intel. It was expensive, but mostly because
of its low volume sales. The trend toward multi-core CPUs at the network edge
could bring a cheap equivalent, if memory latency-hiding is also provided for.
To illustrate our point more clearly, we compare performance to that of the
IXDP2850, a dual processor variant with 32 micro-engines in total, that runs
at 1.4GHz. Cycle-for-cycle this device can process more than 9 times as much
traﬃc. As the bottleneck in our pipeline is computationally bound and inher-
ently scalable, this will directly translate into better SafeCard performance. We
decided not to show those results, however, because installing IXDP2850s at the
network edge is not viable in the near future.
7 Conclusion
In this paper, we have described SafeCard, a full intrusion prevention system
(IPS) on an embedded network processor. SafeCard is unique in that it includes
detection techniques at all levels of abstraction in communication: packets, re-
assembled TCP streams, application protocol units, and ﬂow aggregates. More-
over, SafeCard is capable of handling close to a Gigabit per second of TCP
traﬃc, making it a viable option for the edge of the network. The IPS is im-
plemented as a pipeline on a single Intel IXP2400 network processor embedded
on a network card. Its task is to enforce security policies on incoming traﬃc by
means of in-depth analysis in the last hop toward the host. The system ﬁrst
receives traﬃc in a circular buﬀer and applies simple header-ﬁeld ﬁltering to
determine which data needs further inspections. TCP streams that are classiﬁed
as suspect are reassembled with an eﬃcient in-place algorithm and fed into a
per-stream pattern matching engine, similar to Snort. For all streams that are
not blocked by the pattern matching engine SafeCard checks whether higher-
level protocol-speciﬁc rules exist and if so, checks them against these also. A
ﬁnal detection technique works on ﬂow aggregates (e.g., statistics and number
of incoming connections). Our future work looks at combining alerts generated
by multiple stages when each individual stage is subject to false positives.
Acknowledgements
We would like to thank Lennert Buytenhek for his invaluable help during devel-
opment of the IXP2400 code and installation of the testbed. This research was
made possible by grants from the EU Lobster and Noah projects.
References
1. Ptacek, T.H., Newsham, T.N.: Insertion, evasion, and denial of service: Eluding
network intrusion detection. Technical report, Secure Networks Inc. (1998)
2. Handley, M., Paxson, V., Kreibich, C.: Network intrusion detection: Evasion, traﬃc
normalization, and end-to-end protocol semantics. In: USENIX-Sec’2001, Wash-
ington, D.C., USA (2001)
SafeCard: A Gigabit IPS on the Network Card
329
3. Stuart Staniford, V.P., Weaver, N.: How to 0wn the internet in your spare time.
In: Proc. of the 11th USENIX Security Symposium. (2002)
4. James Newsome, B.K., Song, D.: Polygraph: Automatically generating signatures
for polymorphic worms. In: Proc. of the IEEE Symposium on Security and Privacy.
(2005)
5. S. Singh, C. Estan, G. Varghese and S. Savage: Automated worm ﬁngerprinting.
In: In Proc. of the 6th USENIX Symposium on Operating Systems Design and
Implementation (OSDI). (2004) 45–60
6. Ioannidis, S., Keromytis, A.D., Bellovin, S.M., Smith, J.M.: Implementing a dis-
tributed ﬁrewall. In: CCS ’00: Proceedings of the 7th ACM conference on Computer
and communications security, ACM Press (2000) 190–199
7. Bos, H., Huang, K.: Towards software-based signature detection for intrusion pre-
In: Proc of the 8th International Symposium on
vention on the network card.
Recent Advances in Intrusion Detection (RAID). (2005)
8. Portokalidis, G., Slowinska, A., Bos, H.: Argos: an emulator for ﬁngerprinting zero-
day attacks. In: Proc. ACM SIGOPS EUROSYS’2006, Leuven, Belgium (2006)
9. Roesch, M.: Snort - lightweight intrusion detection for networks. In: Proc. of LISA
’99: 13th Systems Administration Conference. (1999)
10. C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle
and Q. Zhang: StackGuard: Automatic adaptive detection and prevention of buﬀer-
overﬂow attacks. In: Proc. of the 7th USENIX Security Symposium. (1998)
11. S. Bhatkar, D.C. Du Varney and R. Sekar: Address obfuscation: an eﬃcient ap-
proach to combat a broad range of memory error exploits. In: In Proc. of the 12th
USENIX Security Symposium. (2003) 105–120
12. E. G. Barrantes, D.H. Ackley, S. Forrest, T. S. Palmer, D. Stefanovix and D.D.
Zovi: Randomized instruction set emulation to disrupt code injection attacks. In:
In Proc. of the 10th ACM Conference on Computer and Communications Security
(CCS). (2003) 281–289
13. M. Costa, J. Crowcroft, M. Castro, A Rowstron, L. Zhou, L. Zhang and P. Barham:
Vigilante: End-to-end containment of internet worms. In: In Proc. of the 20th ACM
Symposium on Operating Systems Principles (SOSP), Brighton, UK (2005)
14. Clark, C., Lee, W., Schimmel, D., Contis, D., Kon´e, M., Thomas, A.: A hardware
platform for network intrusion detection and prevention. In: Third Workshop on
Network Processors and Applications, Madrid, Spain (2004)
15. Williamson, M.M.: Throttling Viruses: Restricting Propagation to Defeat Mali-
cious Mobile Code. In: Proc. of ACSAC Security Conference, Las Vegas, Nevada
(2002)
16. Robertson, W., Vigna, G., Kruegel, C., Kemmerer, R.: Using generalization and
In:
characterization techniques in the anomaly-based detection of web attacks.
NDSS’05. (2005)
17. C. Cowan, S. Beattie, J. Johansen and P. Wagle: PointGuard: Protecting pointers
In: In Proc. of the 12th USENIX Security
from buﬀer overﬂow vulnerabilities.
Symposium. (2003) 91–104
18. C. Cowan, M. Barringer, S. Beattie and G. Kroah-Hartman: FormatGuard: Auto-
matic protection from printf format string vulnerabilities. In: In Proc. of the 10th
Usenix Security Symposium. (2001)
19. Provos, N.: Improving host security with system call policies. In: In Proc. of the
12th USENIX Security Symposium. (2003)
20. U. Shankar, K. Talwar, J. S. Foster, and D. Wagner: Detecting format string
In: In Proc. of the 10th USENIX Security
vulnerabilities with type qualiﬁers.
Symposium. (2001) 201–216
330
W. de Bruijn et al.
21. G. C. Necula, S. McPeak, and W. Weimer: CCured: Type-safe retroﬁtting of legacy
code. In: In Proc. of the Principles of Programming Languages (PoPL). (2002)
22. bulba and Kil3r: Bypassing Stackguard and Stackshield. Phrack Magazine 10
(2000)
23. gera, riq: Advances in format string exploitation. Phrack Magazine 11 (2002)
24. Liang, Z., Sekar, R.: Fast and automated generation of attack signatures: A basis
In: Proc. ACM CCS, Alexandria, VA, USA
for building self-protecting servers.
(2005) 213–223
25. Kruegel, C., Kirda, E., Mutz, D., Robertson, W., Vigna, G.: Polymorphic worm
detection using structural information of executables. In: Proc. of RAID’05, Seattle,
USA (2005)
26. Kerschbaum, F., Spaﬀord, E.H., Zamboni, D.: Using embedded sensors for detect-
ing network attack. Technical report, Purdue University (2000)
27. Paxson, V.: Bro: A system for detecting network intruders in real-time. Computer
Networks 31(23-24) (1999) 2435–2463
28. Bos, H., de Bruijn, W., Cristea, M., Nguyen, T., Portokalidis, G.: FFPF: Fairly
Fast Packet Filters. In: Proceedings of OSDI’04, San Francisco, CA (2004)
29. Cristea, M., de Bruijn, W., Bos, H.: Fpl-3: towards language support for distributed
packet processing. In: Proceedings of IFIP Networking, published as LNCS Volume
3462 / 2005, ISBN: 3-540-25809-4, Waterloo, Ontario, Canada (2005) p.743–755
30. Malan, R., Watson, D., Jahanian, F., Howell, P.: Transport and application pro-
tocol scrubbing. In: Infocom’2000, Tel-Aviv, Israel (2000)
31. Laurikari, V.: NFAs with tagged transitions, their conversion to deterministic
automata and application to regular expressions. In: SPIRE. (2000) 181–187
32. Aho, A.V., Ullman, J.D.: Foundations of Computer Science. Computer Science
Press (1992)
33. Gill, A.: Introduction to the Theory of Finite-state Machines. McGraw-Hill (1962)
34. Newsome, J., Song, D.: Dynamic taint analysis for automatic detection, analysis,
and signature generation of exploits on commodity software. In: Proc. of the 12th
Annual Network and Distributed System Security Symposium (NDSS). (2005)
35. SecurityFocus: Can-2003-0245 apache apr-psprintf memory corruption vulnerabil-
ity. http://www.securityfocus. com/bid/7723/discussion/ (2003,)
36. Nguyen, T., Cristea, M., de Bruijn, W., Box, H.: Scalable network monitors for
high-speed links: a bottom-up approach. In: Proceedings of IPOM’04. (2004)