### Table II: Number of Detected Spectre Gadgets from the Spectre Sample Dataset

| Tool         | Total # |
|--------------|---------|
| RH Scanner   | 12      |
| oo7          | 15      |
| SpecFuzz     | 15      |
| SpecTaint    | 15      |

### Table III: Number of Detected Gadgets in Real-world V1 Dataset

| Program | Reproduce (SpecFuzz) | Tainted Branch (SpecTaint) | Unique (SpecTaint) |
|---------|----------------------|----------------------------|--------------------|
| JSMN    | 16                   | 1                          | 0                  |
| Brotli  | 43                   | 17                         | 6                  |
| HTTP    | 9                    | 9                          | 1                  |
| LibHTP  | 79                   | 14                         | 0                  |
| YAML    | 215                  | 3                          | 0                  |
| SSL     | 55                   | 16                         | 4                  |

- **Reproduce**: Results reproduced using the open-sourced SpecFuzz implementation.
- **Tainted Branch**: Gadgets detected during speculative execution over tainted branches.
- **Unique**: Gadgets detected only by SpecTaint.

### Analysis of Detection Failures

**SpecFuzz**:
1. **Conditional Branches**: SpecFuzz fails to detect gadgets if they are located after two conditional branches, as it may miss the inserted gadget at line 5.
2. **Invalid Memory Access**: SpecFuzz stops the simulation and rolls back to a previously saved state upon detecting an invalid memory access or other exceptions. This causes it to miss gadgets located after such events. For example, in Listing 3, SpecFuzz detected an out-of-bounds access at line 3 and stopped, missing the gadget in the "else" branch.

**RH Scanner**:
- **Path Exploration Limitation**: RH Scanner missed many inserted gadgets due to its static path exploration method, which is limited in exploring execution paths. Additionally, it produced a large number of detection results due to simplistic syntax-based gadget modeling. In this experiment, we focused only on inserted gadgets, considering them as true positives.

### Baseline Evaluation on Real-world V1 Dataset

We conducted a baseline comparison with another dynamic analysis approach, SpecFuzz, evaluating the effectiveness and efficiency of dynamic Spectre gadget detection tools.

#### Effectiveness
- **Number of Detected Gadgets**: We manually analyzed detected gadgets and considered exploitable gadgets to be true positives based on human knowledge.

#### Efficiency
- **Performance**: Evaluated the performance of gadget detection tools and the runtime performance of target programs after patching detected gadgets.

### Table IV: True Positives, False Positives, and Precision of Gadgets Detected by SpecFuzz and SpecTaint on Real-world V1 Dataset

| Program | SpecFuzz TP | SpecFuzz FP | SpecFuzz Precision | SpecTaint TP | SpecTaint FP | SpecTaint Precision |
|---------|-------------|-------------|--------------------|--------------|--------------|---------------------|
| JSMN    | 1           | 16          | 0.059              | 1            | 0            | 0.647               |
| Brotli  | 5           | 38          | 0.116              | 11           | 6            | 0.333               |
| HTTP    | 2           | 7           | 0.222              | 2            | 4            | 0.214               |
| LibHTP  | 3           | 76          | 0.038              | 3            | 11           | 1.000               |
| YAML    | 0           | 215         | 0.000              | 0            | 3            | 0.000               |
| SSL     | 2           | 53          | 0.036              | 6            | 10           | 0.375               |

### Conclusion
The evaluation results show that SpecTaint outperforms state-of-the-art tools in terms of precision and recall when analyzing real-world programs.

### Code Example

```c
for (k = 1; k < rawbuffer.pointer[k]; value = (value - num_transforms)) {
    t* word = &words->data[offset];
    const uint8_t len = i;
    if (transform_idx == transforms->cutOffTransforms) {
        memcpy(&s->ringbuffer[pos], word, len);
    } else {
        len = BrotliTransformDictionaryWord(&s->ringbuffer[pos], word, transform_idx, transforms, 1);
    }
}

// Read and leak secret using transform_idx as index
#define BROTLI_TRANSFORM_PREFIX_ID(T, I) ((T)->transforms[(I * 3) + 0])
#define BROTLI_TRANSFORM_PREFIX(T, I) (&(T)->transforms[I])
```

This code snippet demonstrates the use of `transform_idx` to read and leak a secret, highlighting the need for effective gadget detection tools like SpecTaint.