title:Enhancing Memory Error Detection for Large-Scale Applications and
Fuzz Testing
author:Wookhyun Han and
Byunggill Joe and
Byoungyoung Lee and
Chengyu Song and
Insik Shin
Enhancing Memory Error Detection for
Large-Scale Applications and Fuzz Testing
Wookhyun Han
Byunggill Joe
KAIST
KAIST
Byoungyoung Lee
Purdue University
Chengyu Song
University of California, Riverside
Insik Shin
KAIST
Abstract—Memory errors are one of
the most common
vulnerabilities for the popularity of memory unsafe languages
including C and C++. Once exploited, it can easily lead to system
crash (i.e., denial-of-service attacks) or allow adversaries to fully
compromise the victim system. This paper proposes MEDS, a
practical memory error detector. MEDS significantly enhances its
detection capability by approximating two ideal properties, called
an infinite gap and an infinite heap. The approximated infinite
gap of MEDS setups large inaccessible memory region between
objects (i.e., 4 MB), and the approximated infinite heap allows
MEDS to fully utilize virtual address space (i.e., 45-bits memory
space). The key idea of MEDS in achieving these properties is
a novel user-space memory allocation mechanism, MEDSALLOC.
MEDSALLOC leverages a page aliasing mechanism, which allows
MEDS to maximize the virtual memory space utilization but
minimize the physical memory uses. To highlight the detection
capability and practical
impacts of MEDS, we evaluated and
then compared to Google’s state-of-the-art detection tool, Ad-
dressSanitizer. MEDS showed three times better detection rates
on four real-world vulnerabilities in Chrome and Firefox. More
importantly, when used for a fuzz testing, MEDS was able to
identify 68.3% more memory errors than AddressSanitizer for
the same amount of a testing time, highlighting its practical
aspects in the software testing area. In terms of performance
overhead, MEDS slowed down 108% and 86% compared to
native execution and AddressSanitizer, respectively, on real-world
applications including Chrome, Firefox, Apache, Nginx, and
OpenSSL.
I.
INTRODUCTION
For the popularity of memory unsafe languages like C and
C++, memory errors are one of the most common software
bugs, especially in large-scale software such as browsers and
OS kernels. Memory errors are also one of the most severe bugs
from the security perspective—they can easily lead to system
crash (i.e., denial-of-service attacks) or even allow adversaries
to take full control of the vulnerable system (i.e., arbitrary code
execution and privilege escalation). In the past few decades,
numerous solutions have been proposed to prevent memory
error related attacks [34]. These defense techniques can be put
into two general directions: exploit mitigation techniques and
memory error detectors.
Network and Distributed Systems Security (NDSS) Symposium 2018
18-21 February 2018, San Diego, CA, USA
ISBN 1-1891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23312
www.ndss-symposium.org
Exploit mitigation techniques focus on preventing attackers
from utilizing memory errors to perform malicious activities. Be-
cause these techniques tend to have lower runtime performance
overhead (< 10%), most widely deployed mechanisms belong
to this category, such as Data Execution Prevention (DEP),
Address Space Layout Randomization (ASLR), and Control-
Flow integrity (CFI). However, their limitation is also obvious:
they can be easily bypassed by new exploit techniques—from
code injection to return-oriented program [33] to advanced ROP
attacks [29] to data-only attacks [16], attackers have always
been able to find new creative ways to exploit memory errors.
Memory error detectors [17, 21, 22, 24, 25, 31], on the
other hand, aim to detect the root cause. Since these detection
techniques can stop the attacks from happening in the first
place, they have the capability to prevent all memory error
related attacks. Unfortunately, achieving this is not without cost.
First, these techniques tend to have relatively high performance
overhead, ranging from 30% for hardware-based approach [17,
23] to over 100% for pure software-based approaches [21,
22, 24, 25, 31]. Second, some of them have difficulties in
supporting the full language features of C and C++ (see §VIII
for more details).
Despite their drawbacks, we believe memory error detectors
are the more promising direction to fundamentally prevent
memory error related attacks. More specifically, to defeat
existing attacks, we have already accumulated a large set
of exploit mitigation techniques. For example,
the latest
Windows system (Windows 10) has the following exploit
mitigation techniques deployed: DEP, ASLR, stack guard,
control-flow guard, return-flow guard, etc. However, as attackers
are now shifting to data-only attacks [16] and information leak
attacks [32], new mitigation techniques must be added. The
problem is, even though the performance overhead of each
individual mitigation technique may be low, the accumulated
overhead could still be high, especially for defeating data-only
attacks (e.g., data-flow integrity [7]) and information leak (e.g.,
dynamic information-flow tracking [37]). Yet, they still could
not provide the strong security guarantees compared to memory
error detectors.
Motivated by the above reasons, we present MEDS, a system
that enhances the detectability of redzone-based memory error
detection. In particular, existing memory error detectors can be
categorized into two directions: redzone-based and pointer-
based. Redzone-based detectors insert undefined memory
between memory objects and prohibit access to the undefined
area. Pointer-based detectors keep track of per-pointer capability
and check the capability when accessing an object. Generally,
redzone-based detectors have better compatibility with C/C++
features but their ability to detect memory errors is not as
powerful as pointer-based one (refer to §II for more details).
The key idea behind MEDS is that full 64-bit virtual
address space can be leveraged to approximate “infinite” gap
between allocated memory regions (so as to detect spatial
errors) and “infinite” heap (so as to avoid reusing freed
memory and to detect temporal errors). More importantly,
MEDS achieves this without blowing up physical memory
use. MEDS realizes this idea through a new memory allocator,
MEDSALLOC. MEDSALLOC uses user-space page aliasing
mechanism (i.e., aliasing between physical and virtual memory
pages) to manage memory pools, thereby maximizing the virtual
address utilization while minimizing the physical memory uses.
The “infinite” gap allows MEDS to detect more spatial memory
errors exhibiting a large out-of-bound offset than the state-of-art
redzone-based memory error detector AddressSanitizer [31].
MEDS also detects temporal memory errors more robustly, as
it fully utilizes available virtual address space for allocation
and thus the virtual address is unlikely reused.
We have implemented MEDS based on the LLVM toolchain,
and evaluated the prototype of MEDS on various real-world
large applications, including Chrome, Firefox, Apache, Nginx,
and OpenSSL. First, we evaluated MEDS on a set of unit tests
and MEDS was able to correctly detect all the tested memory
errors. Then we tested MEDS using four real-world memory
corruption exploits in Chrome and Firefox, and MEDS showed
three times better detection rates than AddressSanitizer (ASAN),
a state-of-the-art memory error detection tool developed by
Google. MEDS imposed a moderate runtime overhead—on
average, MEDS slowed down 108%, which is comparable to
ASAN; and it used 212% more memory.
Utilizing on MEDS’s detection capability, it can be applied
to detect lurking memory errors in production servers or fuzzing
infrastructures, similarly ASAN has been popularly deployed
and used in practice. To clearly demonstrate this aspect, we
performed a fuzz testing with AFL [38], targeting 12 real-world
applications. To summarize, MEDS significantly outperformed
ASAN in assisting memory error detection capability of fuzzing
for most of target applications — 68.3% improvements on
average, ranging from 1% to 256%, depending on applica-
tions (shown in Table IV). Considering the huge popularity of
AFL and ASAN in performing real-world fuzz testing, these
results also signify the strong practical impacts of MEDS. Using
with AFL, MEDS can augment the fuzz testing’s detection
capability, significantly better than the state-of-the-art memory
error detection tool, ASAN. We note that ASAN is part of both
GCC (since v4.8) and LLVM/Clang (since v3.1) mainlines, and
many major vendors and open-source community heavily rely
on ASAN for debugging and fuzz testing.
In summary, this paper makes the following contributions.
• Design. We designed MEDS, a new memory error detector
with enhanced detection capability. The core of MEDS
is MEDSALLOC, a new memory allocator that (1) fully
utilizes the 64-bit virtual address space to provide “infinite”
gaps between objects and to avoid reusing freed virtual
addresses; and (2) leverages a novel memory aliasing
scheme to minimize the physical memory overhead.
• Implementation and Evaluation. We implemented a
prototype of MEDS based on the LLVM toolchain and
have successfully applied it to a set of large real-world
applications including Chrome, Firefox, Apache, Nginx,
and OpenSSL. We evaluated several aspects of MEDS
including (1) its compatibility, (2) its detection capability
against artificial and real attacks, and (3) its runtime
performance and memory overhead.
• Practical Impacts. According to our evaluation in the fuzz
testing (using AFL), MEDS significantly outperformed
ASAN in terms of detecting memory errors. We plan to
opensource MEDS so that software vendors and open
source communities can benefit from using MEDS. As
demonstrated in our evaluation, MEDS is already mature
enough to be released and used for real-world applications.
II. BACKGROUND AND CHALLENGES
A. Memory Errors
There are two general types of memory errors: spatial
errors and temporal errors. Spatial memory errors refer to
accessing memory that are outside the boundary of the allocated
memory. Such errors can be caused by many types of software
bugs, including missing boundary checks, incorrect boundary
checks, insufficient memory allocation, type confusion, etc.
Temporal memory errors can be further put into two sub-
categories: reading uninitialized memory and accessing freed
memory. Reading uninitialized memory can be problematic
because its value is either unpredictable or can be controlled
by attackers. Accessing freed memory is problematic because
the freed memory can be reallocated to store another memory
object, which may be controlled by attackers.
Hicks [15] formalize the definition of memory errors into
two styles:
• Access to undefined memory. A memory region is unde-
fined if it has not been allocated (out-of-bound), has not been
initialized, or has been freed. While this definition is simple,
it is not realistic. To support this definition, the gap between
any two allocated regions must be infinite (i.e., infinite gap)
and a freed memory region must never be reused (i.e., infinite
heap).
• Violation to the capability of a pointer. The second
definition associates a pointer with a capability to access
memory between base and end. Capabilities can only be
created through legal operations like allocation and the
addresses taken thus are not forgeable; and are revoked
(i.e., has no capability) when the corresponding memory
region is freed. A memory error can then be defined as
accessing memory outside the capability of a pointer.
Following the definition above, existing approaches to detect
memory errors can then be generally categorized into two
directions: (1) redzone-based detection, which inserts undefined
memory between objects and detects an access to the undefined
area; and (2) pointer-based detection, which keeps track of
per-pointer capability and checks capability when accessing
an object. Both directions have their own advantages and
disadvantages. Generally, redzone-based memory error detectors
have better compatibility with C/C++ language features and
thread model, so they can be applied to large-scale software like
browsers. Pointer-based detectors usually have compatibility
issues. For example, SoftBound is not compatible with some
2
detection precision and performance, and is able to handle large
complex software like Google Chrome and Firefox. The key to
ASAN’s high efficiency is in how it represents redzones using
shadow memory (illustrated in Figure 1). Shadow memory is a
bit-vector, showing valid/invalid memory addresses. One bit in
the shadow memory represents one byte in target application’s
virtual memory space, where the bit 0 in the shadow memory
represents valid and the bit 1 represents invalid. ASAN enforces
that all memory read and write operations must first refer to
the shadow memory to check validity of the target address (i.e.,
the corresponding bit in the shadow memory should be 0). To
detect out-of-bound access, ASAN surrounds all memory objects
(include stack and global objects) with redzones. Moreover,
to detect use-after-free, ASAN marks the whole freed region
as redzone when an object is freed. Then ASAN maintains
a fixed size of quarantine zone (i.e., 256 MB by default) to
avoid reusing freed memory (i.e., ASAN does not really release
the freed memory regions, but keeps holding those regions
in quarantine zone until the quarantine zone becomes full).
For example, when the object obj3 is freed, the corresponding
region is marked as redzone by updating the corresponding
shadow memory bits as invalid (illustrated in Figure 1 - 1 ).
This freed region will be kept in quarantine zone to avoid reuse.
While this approach is similar to the valid address bit of
Valgrind, ASAN’s special shadow memory address scheme [31]
makes the checks much faster. In particular, ASAN uses a direct
mapping scheme to locate the shadow memory in that it simply
performs bit-shift operations on the virtual address to obtain the
corresponding shadow memory location. This in fact requires
to reserve certain virtual address space for the shadow memory,
but it is efficient as locating the corresponding shadow memory
only involves a simple bit-shift instruction. ASAN has shown
very good compatibility with existing code in practice. It has no
issues in supporting large scale software like browsers, and it
is the default memory error detector for Google’s cloud-based
fuzzing platform [27].
Limitations of Existing Redzone-based Detectors. As
discussed previously,
the detectability of a redzone-based
memory error detector relies on (1) how large the redzones
between objects are and (2) how long freed objects remain
as redzones. Specifically, if an out-of-bound access falls into
another allocated memory region or use-after-free access falls
into a re-allocated memory region, then the error cannot be
detected. Unfortunately, existing redzone-based memory error
detectors all failed to implement or approximate the infinite gap
and infinite heap requirements properly; so their detectability
is limited. For example, by default ASAN sets up the redzone
in the range of 16 Byte and 2,048 Byte, which can be easily
bypassed by skipping over this redzone. Moreover, considering
the infinite heap, the default size of its quarantine zone is
only 256 MB; so its detection for temporal errors can also be
bypassed if a program keeps (or an attacker induces a program
to keep) allocating memory objects to force reuses.
To clarify these limitations, Figure 1 illustrates memory
layouts as well as its redzone enforcement through the shadow
memory. In the beginning there are three allocated objects, obj1,
obj2, and obj3 (leftmost). In this setting, suppose a program
performs a pointer arithmetic operation, p = p + idx, where p
is a pointer that is originally pointing the base address of obj1
(i.e., 1 ) and idx is an integer variable. Then further suppose
Fig. 1: Redzone-based detection in ASAN using redzone and shadow
memory. In the beginning there are three allocated objects (leftmost),
and then obj1 is freed (middle). If the quarantine zone is exhausted
due to repeated allocations, the freed space can be reused (rightmost).
SPEC CPU benchmarks [21] and GCC’s support for Intel
MPX (memory protection extension) is also reported to have
compatibility issues [30]. On the other hand, pointer-based
solutions usually have better detection capability as it is not
realistic to implement infinite gap between objects and never
reuse freed memory. Because we aim to build a practical tool
that can support large-scale C/C++ programs utilizing various
language features, we opt to follow the redzone-based direction
and our description will focus on redzone-based detection in
this section. We will describe more details on pointer-based
detection in §VIII.
B. Redzone-based Memory Error Detection
Redzone-based detectors [5, 20, 25, 26, 31] insert undefined
memory regions (a.k.a. redzones) between valid memory
objects. These detectors then setup mechanisms to capture
attempts accessing redzones (e.g., no virtual page permissions)
such that access to such a region can be detected. In general,
there are two key design factors in redzone-based approaches,
namely (1) how to setup redzones to increase detection rates
and (2) how to actually detect an access attempt to redzones.
For instance, to detect temporal errors, DieHard [5] and its
successor DieHarder [26] populate newly allocated memory
and freed memory with magic values hoping that a later use
of the magic value will cause catchable errors. They also add
redzones around the allocated memory region to detect spatial
errors. Out-of-bound read is captured in the same way as in
detecting temporal errors. Out-of-bound write is captured by
checking if magic value of the redzones has been modified
when the memory is freed. Paged-heap [20] surrounds allocated
region with two extra memory pages (one in each direction) of
no access permission so that out-of-bound accesses will trigger
page faults. Valgrind [25] uses valid value bit and valid address
bit to capture reading undefined memory and out-of-bound
access.
AddressSanitizer (ASAN [31]) is by far the most mature
redzone-based memory error detector which is supported by