#### 变通方法
让我们看看目前开发者用来打包应用程序的变通方法：
1. 第一种解决方法是在不同的目录中安装依赖库。例如，Electron 是一个巨大的框架，开发者用它来构建应用程序，然后将它们捆绑起来。然而，基于 Electron 的应用程序是不同的，因为它们是建立在不同版本的 Electron 之上的。Discord 捆绑了 Electron 13，而 Element 捆绑了 Electron 19。对于 Arch Linux 上的 Electron 打包，某些目录需要安装在 `/opt/APPLICATION_NAME` 中，所以这些 Electron 版本 [不会相互冲突](https://wiki.archlinux.org/index.php?title=Electron_package_guidelines&oldid=661963#Directory_structure)。
2. 第二种解决方法是篡改应用程序。例如，给应用程序打上补丁，使其在没有某些依赖库或功能的情况下编译，这可以使应用程序成功编译，但不能保证该应用程序能够启动或按预期工作。
3. 第三种解决方法是在编译应用程序时禁用许多编译选项，这也可能禁用一些功能。例如，在 Arch Linux 上，OBS Studio 在编译时禁用了许多基本功能，这 [导致了不合格的体验](https://www.youtube.com/watch?v=FPjEdrik-eQ)。
这些解决方法因人而异，有些会限制应用程序的功能，有些会引入稳定性问题等等。
#### 不一致的体验
![西班牙兰萨罗特岛（加那利群岛）的蒂曼法亚火山国家公园的火山口景观](/data/attachment/album/202209/14/111156d2f6nminj3ob1tit.jpg)
*图片来源：来自 [Unsplash](https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit) 的 [alevision.co](https://unsplash.com/@alevisionco?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit)*
虽然这些技术限制在整个传统软件包格式中是一致的，但用户体验往往不是这样。由于软件包的发布方式，发行模式与传统软件包格式相结合会影响用户体验。
一些发行版，如 Arch Linux，接近于开发版，因此有最新版本的软件包。然而 Debian 和 Ubuntu LTS 是 LTS 长期支持版，所以它们的很多软件包都落后几个版本。同时，Fedora Linux 和 Ubuntu 稳定版处于 Debian / Ubuntu LTS 和 Arch Linux 之间。
一些软件包格式喜欢尽可能少地给软件包打补丁，以保持它们最接近原版；而另一些格式打补丁是为了增加更多的功能，使用旧库或进行其他类型的更改，以改善用户体验。一些格式喜欢使软件更加轻量化；而另一些格式更喜欢尽可能地添加更多内置功能。软件包有各种各样的习惯和偏好。
正如我们所看到的，一个应用程序在不同的发行版中的构建方式非常不同。此外，不同的发行版的依赖关系也是不同的。传统软件包格式的许多技术限制需要根据发行模式和打包策略采取不同的解决方法。这些微小的变化往往给用户带来不完整的、不合格的体验和错误的印象。一些应用程序可能在某些发行版上运行得更好，但在其他发行版上运行得很差，而其他一些应用程序则运行得更好。即使一个应用程序在每个发行版上的构建方式不同，但其名称和品牌却保持原样，给用户留下错误的印象。
### 解决方案
![](/data/attachment/album/202209/14/111204j4n6g64jk9041144.jpg)
*图片来源：来自 [Unsplash](https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit) 的 [Riccardo Annandale](https://unsplash.com/@pavement_special?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit)*
如上所述，解决这些问题的方法是使用容器。
容器被设计用来分离系统的几个方面。通过使用容器，打包者可以挑选依赖项而不受主机上的库限制。因此，打包者可以发布最新的、功能完整的软件包，同时保持发行的稳定性。
这一点非常重要，因为这些容器格式可以将应用程序和发行版发挥出最大的作用，而不会对系统造成破坏性的影响。
#### Nix 和 Flatpak
[Nix](https://github.com/NixOS/Nix) 是一个跨平台的包管理器，可以在类 Unix 操作系统中运行，如 Linux 发行版、BSD 和 macOS。Nix 有几个 [通道](https://nixos.wiki/wiki/Nix_channels)（分支）供用户使用。
另一方面，[Flatpak](https://flatpak.org/) 是一个用于 Linux 桌面的通用软件包格式，它也利用容器，但另外还有沙盒来隔离它们。它旨在以后可以供普通人使用，并被设计为与软件商店（如 GNOME “ 软件   Software ” 和 KDE “ 发现   Discover ）集成。换句话说，Flatpak 更像是发行版的一个扩展，而不是一个软件包格式的替代品，因为它的设计初衷不是为了取代系统包管理器。
如果使用 NixOS 等发行版，Nix 也可以作为一种扩展或单独使用。
#### 类似的应用
Nix 和 Flatpak 解决了传统软件包格式的许多基本问题。由于应用程序的分离，这些格式可以安装类似的应用程序，如 Visual Studio Code 和 Code - OSS，而不会冲突。
#### 多个版本
Nix 和 Flatpak 可以安装同一个应用程序的多个版本。使用 Nix，我可以从 `nixpkgs-stable`（LTS）安装应用程序，同时也可以从 `nixpkgs-unstable`（开发版）安装同一个应用程序。
同样地，使用 Flatpak，我可以同时从 `stable` 和 `beta` 分支安装应用程序。我可以从更多的途径和分支继续安装同一个应用程序，而不会遇到冲突。
#### 挑剔的依赖项
![采摘樱桃](/data/attachment/album/202209/14/111214eavl7v417vmsyj7m.jpg)
*图片来源：来自 [Unsplash](https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit) 的 [Ish de loyola](https://unsplash.com/@ishphotos_?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit)*
此外，打包者可以将应用程序与不同变体的库捆绑在一起，从而有机会启用更多的构建选项，并使用打过补丁或特定版本的库，从而为用户提供完整的体验。
这意味着打包者可以将打了补丁的 FFmpeg 与 OBS Studio 捆绑在一起，只为了用在 OBS Studio 中。如果我在主机上安装了普通的 FFmpeg，那么 OBS Studio 的补丁 FFmpeg 就不会与主机的 FFmpeg 发生干扰或冲突。
#### 各个发行版的环境都是一致的
如上所述，各发行版使用不同的补丁、构建选项和环境构建应用程序。这导致了应用程序的碎片化，每个应用程序的构建方式和工作方式往往不尽相同。由于 Nix 和 Flatpak 是为跨发行版运行而设计的，它们在每个发行版中为应用程序提供一致的环境，前提是发行版提供了 Nix 或 Flatpak 的支持版本。
#### 缺点
就像所有事物一样，Nix 和 Flatpak 不是完美的。由于最近在 Linux 桌面上容器技术得到了推崇，它们可能为许多应用程序提供了不寻常的环境。
Flatpak 不仅包含了应用程序，还对它们进行沙盒处理。Flatpak 的开发者已经实施了一个短期的变通方案，“在沙盒上打洞”，即所谓的静态权限。他们正在开发适当的长期解决方案，称为 [XDG 门户](https://github.com/flatpak/xdg-desktop-portal)，以解决有关沙盒的许多问题，并使其像 Android 的安全模型一样。
唯一的短期问题是，工具包、框架和应用程序必须采用这些标准。GTK 和 Qt 这样的工具包集成了其中一些 门户   portal ，但它们也需要时间来集成其他的门户。同时，许多其他的工具箱还没有真正集成任何门户。
工具包、框架和应用程序采用这些新标准是一个时间问题，因为在 XDG 门户之前没有任何适当的标准。应用程序可以直接访问文件系统和 API，所以静态权限保持这种 “标准”。
### 结论
传统软件包格式的根本问题是它没有利用容器。许多图形化的应用程序本质上是复杂的，需要非常具体的依赖关系才能按预期运行。许多发行版通过使用变通的方法在不同的环境中构建同一个应用程序，例如给应用程序打补丁或禁用某些构建选项。这导致了一个应用程序的不同变体、不一致的行为和不合格的用户体验。
当然，发行版的维护者不可能在几天内现实地重写他们的包管理器并使用容器。这些重写会破坏许多脚本、功能等，而且还需要很长时间才能投入生产环境。
我个人的建议是使用和推广 Flatpak，因为它只是为了扩展现有的发行版，而不是取代它。打包者不必担心打包应用程序，以及诉诸变通的问题，因为 Flatpak 已经在处理这些问题了。
作者 Hari Rana [最初发表于此博客](https://theevilskeleton.gitlab.io/2022/08/29/traditional-packaging-is-not-suitable-for-modern-applications.html)。
Hari 是 Fedora 杂志的 Fedora 编辑委员会的成员。他也是 Fedoea 质量保证（QA）的一员。Hari 希望通过推广各种技术和帮助需要帮助的人，为 Linux 桌面的采用作出贡献。
**本文所表达的观点和意见是作者本人的，并不代表我们的观点。**
---
via: 
作者：[Community](https://news.itsfoss.com/author/team/) 选题：[lkxed](https://github.com/lkxed) 译者：[gpchn](https://github.com/gpchn) 校对：[校对者ID](https://github.com/%E6%A0%A1%E5%AF%B9%E8%80%85ID)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出