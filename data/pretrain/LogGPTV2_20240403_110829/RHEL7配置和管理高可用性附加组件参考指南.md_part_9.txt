使用 BIOS 禁用 ACPI Soft-Off
的步骤可能因服务器系统而异。您应该在您的硬件文档中验证此步骤。
:::
::: orderedlist
1.  重新引导节点并启动 [**BIOS CMOS 设置实用程序程序**]{.command}。
2.  导航到 [Power]{.guimenu} 菜单（或对等的电源管理菜单）。
3.  在 [Power]{.guimenu} 菜单中，将 [PWR-BTTN]{.guimenuitem}
    [功能（或等效）的 Soft-Off 设置为 Instant-Off]{.guimenuitem}
    （或者使用电源按钮无延迟关闭节点的对等设置）。[例 5.1 "[BIOS CMOS
    设置实用程序[]{.guimenuitem} ：Soft-Off by PWR-BTTN]{.command}
    设置为
    [Instant-Off]{.guimenuitem}"](#ch-fencing-HAAR.html#ex-bios-acpi-off-CA "例 5.1. BIOS CMOS 设置实用程序 ：Soft-Off by PWR-BTTN 设置为 Instant-Off"){.xref}
    显示 [Power]{.guimenu} 菜单，并将 [ACPI Function]{.guimenuitem}
    设置为 [Enabled []{.guimenuitem}，Soft-Off by
    PWR-BTTN]{.guimenuitem} 设置为 [Instant-Off]{.guimenuitem}。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    与 [ACPI Function[]{.guimenuitem}、Soft-Off by
    PWR-BTTN]{.guimenuitem} 和 [Instant-Off]{.guimenuitem}
    等效的功能可能因计算机而异。但这个过程的目的是配置
    BIOS，以便计算机能无延迟地关闭电源按钮。
    :::
4.  退出 [**BIOS CMOS 设置实用程序程序**]{.command}，保存 BIOS 配置。
5.  验证在隔离时该节点是否立即关闭。有关测试隔离设备的详情请参考
    ["测试隔离设备"一节](#ch-fencing-HAAR.html#s1-stonithtest-HAAR "测试隔离设备"){.xref}。
:::
::: example
[]{#ch-fencing-HAAR.html#ex-bios-acpi-off-CA}
**例 5.1. [BIOS CMOS 设置实用程序[]{.guimenuitem} ：Soft-Off by
PWR-BTTN]{.command} 设置为 [Instant-Off]{.guimenuitem}**
::: example-contents
``` screen
+---------------------------------------------|-------------------+
|    ACPI Function             [Enabled]      |    Item Help      |
|    ACPI Suspend Type         [S1(POS)]      |-------------------|
|  x Run VGABIOS if S3 Resume   Auto          |   Menu Level   *  |
|    Suspend Mode              [Disabled]     |                   |
|    HDD Power Down            [Disabled]     |                   |
|    Soft-Off by PWR-BTTN      [Instant-Off   |                   |
|    CPU THRM-Throttling       [50.0%]        |                   |
|    Wake-Up by PCI card       [Enabled]      |                   |
|    Power On by Ring          [Enabled]      |                   |
|    Wake Up On LAN            [Enabled]      |                   |
|  x USB KB Wake-Up From S3     Disabled      |                   |
|    Resume by Alarm           [Disabled]     |                   |
|  x  Date(of Month) Alarm       0            |                   |
|  x  Time(hh:mm:ss) Alarm       0 :  0 :     |                   |
|    POWER ON Function         [BUTTON ONLY   |                   |
|  x KB Power ON Password       Enter         |                   |
|  x Hot Key Power ON           Ctrl-F1       |                   |
|                                             |                   |
|                                             |                   |
+---------------------------------------------|-------------------+
```
本例演示了 [ACPI Function]{.guimenuitem} 设置为 [Enabled
[]{.guimenuitem}，Soft-Off by PWR-BTTN]{.guimenuitem} 设置为
[Instant-Off]{.guimenuitem}。
:::
:::
:::
::: section
::: titlepage
## []{#ch-fencing-HAAR.html#s2-acpi-disable-logind-CA}在 logind.conf 文件中禁用 ACPI Soft-Off {.title}
:::
要禁用 `/etc/systemd/logind.conf`{.filename} 文件中的 power-key
握手，请使用以下步骤。
::: orderedlist
1.  在 `/etc/systemd/logind.conf`{.filename} 文件中定义以下配置：
    ``` screen
    HandlePowerKey=ignore
    ```
2.  重新载入 `systemd`{.literal} 配置：
    ``` screen
    # systemctl daemon-reload
    ```
3.  验证在隔离时该节点是否立即关闭。有关测试隔离设备的详情请参考
    ["测试隔离设备"一节](#ch-fencing-HAAR.html#s1-stonithtest-HAAR "测试隔离设备"){.xref}。
:::
:::
::: section
::: titlepage
## []{#ch-fencing-HAAR.html#s2-acpi-disable-boot-CA}在 GRUB 2 文件中完全禁用 ACPI {.title}
:::
您可以通过在内核的 GRUB 菜单条目中附加 `acpi=off`{.literal} 来禁用 ACPI
Soft-Off。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
这个方法可完全禁用 ACPI。当 ACPI
被完全禁用时，以下计算机可能无法正确引导。[*只有在*]{.emphasis}其他方法无法在您的集群中使用时，才使用这个方法。
:::
在 GRUB 2 文件中使用以下步骤禁用 ACPI：
::: orderedlist
1.  将 `--args`{.option} 选项与 [**grubby**]{.command}
    `工具的 --update-kernel`{.option} 选项结合使用，以更改每个群集节点的
    `grub.cfg`{.filename} 文件，如下所示：
    ``` screen
    # grubby --args=acpi=off --update-kernel=ALL
    ```
    有关 GRUB [2 的常规信息，请参阅《系统管理员指南》的使用 GRUB 2
    章节](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/index.html){.ulink}。
2.  重新引导节点。
3.  验证在隔离时该节点是否立即关闭。有关测试隔离设备的详情请参考
    ["测试隔离设备"一节](#ch-fencing-HAAR.html#s1-stonithtest-HAAR "测试隔离设备"){.xref}。
:::
:::
:::
::: section
::: titlepage
# []{#ch-fencing-HAAR.html#s1-stonithtest-HAAR}测试隔离设备 {.title}
:::
隔离（Fencing）是红帽集群基础结构的基础部分，因此验证或者测试隔离服务是否正常至关重要。
使用以下步骤测隔离护设备。
::: orderedlist
1.  使用 ssh、telnet、HTTP
    或者任何远程协议连接到该设备以便手动登录并测试隔离设备或者查看给出的输出。例如，如果您要为启用
    IPMI 的设备配置隔离，请尝试使用 [**ipmitool**]{.command}
    远程登录。记录手动登录时使用的选项，因为在使用隔离代理时可能需要使用这些选项。
    如果您无法登录到隔离设备，请确认该设备是可以被 ping
    到的，没有如防火墙配置阻止对隔离设备的访问，隔离代理中启用了远程访问，且凭证正确。
2.  使用隔离代理脚本手动运行隔离代理。这不需要集群服务正在运行，因此您可以在集群配置该设备前执行这个步骤。这可保证在继续前隔离设备响应正常。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    本节中的示例将 [**fence_ilo**]{.command} 隔离代理脚本用于 iLO
    设备。您使用的实际隔离代理以及调用代理的命令取决于服务器硬件。您应该参考您使用的隔离保护代理的
    man
    页来确定要指定的选项。您通常需要了解隔离设备的登录和密码，以及其它与该隔离设备相关的信息。
    :::
    以下示例显示了使用 `-o status`{.literal} 参数运行
    [**fence_ilo**]{.command}
    隔离代理脚本的格式，以检查另一个节点上的隔离设备接口的状态，而不实际对其进行隔离。这可让您在尝试重新引导节点前测试该设备并使其可用。在运行这个命令时，您可以为
    iLO 设备指定打开和关闭权限的 iLO 用户的名称和密码。
    ``` screen
    # fence_ilo -a ipaddress -l username -p password -o status
    ```
    以下示例显示了使用 `-o reboot`{.literal} 参数运行
    [**fence_ilo**]{.command}
    隔离代理脚本的格式。在一个节点上运行这个命令会重启另一个配置了隔离代理的节点。
    ``` screen
    # fence_ilo -a ipaddress -l username -p password -o reboot
    ```
    如果隔离代理无法正确地执行 status、off、on 或 reboot
    操作，您应该检查硬件、隔离设备的配置以及命令的语法。另外，您可以运行启用了
    debug
    输出的隔离代理脚本。调试输出会记录隔离设备时失败的事件，对于一些隔离代理，这个信息可能非常有用。
    ``` screen
    # fence_ilo -a ipaddress -l username -p password -o status -D /tmp/$(hostname)-fence_agent.debug
    ```
    当诊断发生的故障时，您应该确定手动登录到隔离设备时指定的选项与您使用隔离代理传递给隔离代理的操作相同。
    对于支持加密连接的隔离代理，您可能会因为证书验证失败而看到错误，这需要您信任主机或使用隔离代理的
    `ssl-insecure`{.literal} 参数。同样，如果在目标设备上禁用了
    SSL/TLS，可能需要在为隔离代理设置 SSL 参数时考虑此事项。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果正在测试的隔离代理是
    [**fence_drac[]{.command}、fence_ilo**]{.command}
    或系统管理设备的其他一些隔离代理，并且仍会尝试
    [**fence_ipmilan**]{.command}。大多数系统管理卡支持 IPMI
    远程登录，唯一支持的隔离代理是 [**fence_ipmilan**]{.command}。
    :::
3.  在群集中使用手动运行并启动群集相同的选项配置隔离设备后，可以从任何节点（或者多次来自不同节点）使用
    [**pcs stonith fence**]{.command} 命令测试隔离，如下例所示。[**pcs
    stonith fence**]{.command} 命令从 CIB
    中读取群集配置，并调用配置的隔离代理来执行隔离操作。这会验证集群配置是否正确。
    ``` screen
    # pcs stonith fence node_name
    ```
    如果 [**pcs stonith fence**]{.command}
    命令正常工作，这意味着发生隔离事件时群集的隔离配置应该可以正常工作。如果命令失败，这意味着集群管理无法通过它获取的配置调用隔离设备。检查以下问题并根据需要更新集群配置。
    ::: itemizedlist
    -   检查您的隔离配置。例如，如果您使用了主机映射，则应该确保系统可以使用您提供的主机名查找节点。
    -   检查该设备的密码和用户名是否包含 bash shell
        可能会错误解析的特殊字符。请确定，使用引号来包括您输入的密码和用户名是否可以解决这个问题。
    -   检查是否可以使用您在 [**pcs stonith**]{.command} 命令中指定的 IP
        地址或主机名连接到该设备。例如：如果您在 stonith
        命令中给出主机名，但使用 IP
        地址进行测试，则这不是一个有效的测试。
    -   如果您可以访问您的隔离设备使用的协议，使用该协议尝试连接到该设备。例如，很多代理都使用
        ssh 或者
        telnet。您应该尝试使用您在配置该设备时提供的凭证连接到该设备，查看是否收到有效提示符并登录该设备。
    :::
    如果您确定所有参数都正确，但仍无法连接到隔离设备，则可以查看隔离设备的日志信息（如果隔离设备提供了日志）。这会显示该用户是否已连接以及该用户发出什么命令。您还可以在
    `/var/log/messages`{.filename} 文件中搜索 stonith 和 error
    实例，它们可以让大家了解正在转换的内容，但有些代理可以提供更多信息。
4.  隔离设备测试正常工作并启动并运行集群后，测试实际故障。要做到这一点，在集群中执行应启动令牌丢失的操作。
    ::: itemizedlist
    -   关闭网络。如何关闭网络取决于您的具体配置。在很多情况下，您可以从主机中物理拔掉网线或电源电缆。
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        不推荐通过在本地主机中禁用网络接口而不是物理断开网线或者电源电缆的方法进行测试，因为这无法准确模拟典型的实际失败。
        :::
    -   使用本地防火墙的阻塞 corosync 的入站和出站网络流落。
        以下示例会阻塞 corosync，假设使用默认的 corosync
        端口，`firewall`{.literal} d 用作本地防火墙，corosync
        使用的网络接口位于默认防火墙区中：
        ``` screen
        # firewall-cmd --direct --add-rule ipv4 filter OUTPUT 2 -p udp --dport=5405 -j DROP
        # firewall-cmd --add-rich-rule='rule family="ipv4" port port="5405" protocol="udp" drop'
        ```
    -   使用 `sysrq-trigger`{.literal}
        模拟崩溃并导致您的计算机崩溃。请注意，触发内核 panic
        可能会导致数据丢失 ; 建议首先禁用集群资源。
        ``` screen
        # echo c > /proc/sysrq-trigger
        ```
    :::
:::
:::
:::
[]{#ch-clustresources-HAAR.html}
::: chapter
::: titlepage
# []{#ch-clustresources-HAAR.html#ch-clustresources-HAAR}第 6 章 配置集群资源 {.title}
:::
本章提供有关在集群中配置资源的信息。
::: section
::: titlepage
# []{#ch-clustresources-HAAR.html#s1-resourcecreate-HAAR}资源创建 {.title}
:::
使用以下命令来创建集群资源。
``` screen
pcs resource create resource_id [standard:[provider:]]type [resource_options] [op operation_action operation_options [operation_action operation options]...] [meta meta_options...] [clone [clone_options] | master [master_options] | --group group_name [--before resource_id | --after resource_id] | [bundle bundle_id] [--disabled] [--wait[=n]]
```
指定 `--group`{.option}
选项时，资源将添加到资源组中。如果组不存在，这会创建组并将这些资源添加到组中。有关资源组的详情请参考
["资源组"一节](#ch-clustresources-HAAR.html#s1-resourcegroups-HAAR "资源组"){.xref}。
`--before`{.option} 和 `--after`{.option}
选项指定添加的资源相对于资源组中已存在的资源的位置。
指定 `--disabled`{.option} 选项表示资源不会被自动启动。
以下命令创建了名称为 `VirtualIP`{.literal} 标准
`ocf`{.literal}、provider `heartbeat`{.literal} 和类型
`IPaddr2`{.literal} 的资源。此资源的浮动地址是 192.168.0.120，系统将每
30 秒检查一次该资源是否在运行。
``` screen
# pcs resource create VirtualIP ocf:heartbeat:IPaddr2 ip=192.168.0.120 cidr_netmask=24 op monitor interval=30s
```
另外，您可以省略 *`standard`* 和 *`provider`*
字段，并使用以下命令：这将默认为 `ocf`{.literal} 和 heartbeat
供应商的标准 `。`{.literal}
``` screen
# pcs resource create VirtualIP IPaddr2 ip=192.168.0.120 cidr_netmask=24 op monitor interval=30s
```
使用以下命令删除配置的资源。
``` screen
pcs resource delete resource_id
```
例如，以下命令删除资源 ID 为 `VirtualIP 的现有资源`{.literal}
``` screen
# pcs resource delete VirtualIP
```
::: itemizedlist
-   有关 [**pcs resource create 命令的 resource *``*
    \_id*``*、standard、provider*``*** ]{.command} 和 *`type`*
    字段的详情请参考
    ["资源属性"一节](#ch-clustresources-HAAR.html#s1-resourceprops-HAAR "资源属性"){.xref}。
-   有关为单个资源定义资源参数的详情请参考