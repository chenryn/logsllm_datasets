# Hooks in PostgreSQL: A Comprehensive Guide

## Introduction
Hooks in PostgreSQL allow for the extension of its functionality through plugins. This document will explore how hooks work, their implementation, and provide examples of how to use them.

## How Hooks Work in PostgreSQL
### Overview
- **PL/pgSQL Debugger and Profiler**: The PL/pgSQL language supports shared libraries that can hook into plugins. These are primarily used by the debugger and profiler written by EnterpriseDB.
- **Global Function Pointers**: Each hook is a global function pointer initially set to `NULL`. When PostgreSQL needs to use a hook, it checks the function pointer and executes it if it is set.

### Setting the Function Pointer
- **Shared Library Initialization**:
  - At load time, PostgreSQL calls the `_PG_init()` function in the shared library.
  - This function sets the global function pointer and usually saves the previous one.

### Unsetting the Function Pointer
- **Shared Library Unload**:
  - At unload time, PostgreSQL calls the `_PG_fini()` function in the shared library.
  - This function unsets the pointer and typically restores the previous one.

## Example: ClientAuthentication_hook
### Declaration
- **Source**: `src/include/libpq/auth.h`, line 27
  ```c
  /* Hook for plugins to get control in ClientAuthentication() */
  typedef void (*ClientAuthentication_hook_type) (Port *, int);
  extern PGDLLIMPORT ClientAuthentication_hook_type ClientAuthentication_hook;
  ```

### Initial Setup
- **Source**: `src/backend/libpq/auth.c`, line 215
  ```c
  ClientAuthentication_hook_type ClientAuthentication_hook = NULL;
  ```

### Execution
- **Source**: `src/backend/libpq/auth.c`, line 580
  ```c
  if (ClientAuthentication_hook)
      (*ClientAuthentication_hook) (port, status);
  ```

### Use Cases
- **Control After Authentication**: Allows plugins to take control after client authentication but before informing the user.
- **Useful for**:
  - Recording login events.
  - Inserting a delay after failed authentication to prevent DOS attacks.

### Extensions Using ClientAuthentication_hook
- **auth_delay**: Adds a configurable delay after a failed connection attempt.
- **sepgsql**: Adds specific SELinux context to allow a connection.
- **connection_limits**: Provides more granular control over connection limits.

### Function Parameters
- **Parameters**:
  - `Port *port`: Contains information like remote host, database name, user name, GUC options, etc.
  - `int status`: Status code (e.g., `STATUS_OK` or `STATUS_ERROR`).

### Example: Forbid Connection if a File is Present
- **Initialization**:
  ```c
  static ClientAuthentication_hook_type next_client_auth_hook = NULL;

  void _PG_init(void) {
      next_client_auth_hook = ClientAuthentication_hook;
      ClientAuthentication_hook = my_client_auth;
  }
  ```
- **Hook Function**:
  ```c
  static void my_client_auth(Port *port, int status) {
      struct stat buf;
      if (next_client_auth_hook)
          (*next_client_auth_hook) (port, status);
      if (status != STATUS_OK)
          return;
      if (!stat("/tmp/connection.stopped", &buf))
          ereport(FATAL, (errcode(ERRCODE_INTERNAL_ERROR),
                          errmsg("Connection not authorized!!")));
  }
  ```

## Executor Hooks
### Overview
- **ExecutorStart_hook**: Executed at the beginning of the query plan.
- **ExecutorRun_hook**: May be called multiple times, accepts direction and count.
- **ExecutorFinish_hook**: Executed after the final `ExecutorRun` call.
- **ExecutorEnd_hook**: Executed at the end of the query plan.

### Use Cases
- **Information on Executed Queries**: Used by extensions like `pg_stat_statements`, `auto_explain`, `pg_log_userqueries`, `query_histogram`, and `query_recorder`.

### Example: Log Queries Executed by Superusers
- **Initialization**:
  ```c
  static ExecutorEnd_hook_type prev_ExecutorEnd = NULL;

  void _PG_init(void) {
      prev_ExecutorEnd = ExecutorEnd_hook;
      ExecutorEnd_hook = pgluq_ExecutorEnd;
  }
  ```
- **Hook Function**:
  ```c
  static void pgluq_ExecutorEnd(QueryDesc *queryDesc) {
      Assert(query != NULL);
      if (superuser())
          elog(log_level, "superuser %s fired this query %s",
               GetUserNameFromId(GetUserId()), query);
      if (prev_ExecutorEnd)
          prev_ExecutorEnd(queryDesc);
      else
          standard_ExecutorEnd(queryDesc);
  }
  ```
- **Uninstallation**:
  ```c
  void _PG_fini(void) {
      ExecutorEnd_hook = prev_ExecutorEnd;
  }
  ```

## check_password Hook
### Overview
- **Control Timing**: Gets control when `CREATE USER` or `ALTER USER` is executed, but before the statement is committed.
- **Useful for**:
  - Checking password strength.
  - Logging password changes.
  - Disallowing plain text passwords.

### Function Parameters
- **Parameters**:
  - `const char *username`
  - `const char *password`
  - `int password_type` (e.g., `PASSWORD_TYPE_PLAINTEXT`, `PASSWORD_TYPE_MD5`)
  - `Datum validuntil_time`
  - `bool validuntil_null`

### Example: Disallow Plain Text Passwords
- **Initialization**:
  ```c
  void _PG_init(void) {
      check_password_hook = check_password;
  }
  ```
- **Hook Function**:
  ```c
  static void check_password(const char *username,
                              const char *password, int password_type,
                              Datum validuntil_time, bool validuntil_null) {
      if (password_type == PASSWORD_TYPE_PLAINTEXT) {
          ereport(ERROR,
                  (errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                   errmsg("password is not encrypted")));
      }
  }
  ```

## Compiling and Installing Hooks
### Makefile
- **Example Makefile**:
  ```makefile
  MODULE_big = your_hook
  OBJS = your_hook.o

  ifdef USE_PGXS
  PG_CONFIG = pg_config
  PGXS := $(shell $(PG_CONFIG) --pgxs)
  include $(PGXS)
  else
  subdir = contrib/your_hook
  top_builddir = ../..
  include $(top_builddir)/src/Makefile.global
  include $(top_srcdir)/contrib/contrib-global.mk
  endif
  ```

### Compilation
- **Outside PostgreSQL Source Tree**:
  ```sh
  $ make USE_PGXS=1
  ```
- **Inside PostgreSQL Source Tree**:
  ```sh
  $ make
  ```

### Installation
- **Configuration**:
  - Add the shared library to `postgresql.conf` under `shared_preload_libraries`.
  - Restart PostgreSQL.

### Example
- **Configuration**:
  ```conf
  shared_preload_libraries = 'only_encrypted_passwords'
  ```
- **Restart**:
  ```sh
  $ pg_ctl start
  ```

### Usage
- **Example**:
  ```sql
  postgres=# CREATE USER u1 PASSWORD 'supersecret';
  ERROR: password is not encrypted
  postgres=# CREATE USER u1 PASSWORD 'md5f96c038c1bf28d837c32cc62fa97910a';
  CREATE ROLE
  ```

## Future Hooks
- **Logging Hook**: Proposed by Martin Pihlak.
- **Planner Hook**: Proposed by Peter Geoghegan for query normalization in `pg_stat_statements`.

## Conclusion
- **Benefits**: Hooks extend PostgreSQL's capabilities.
- **Caution**: Avoid adding too many hooks.
- **Future**: More hooks are needed to enhance functionality.

For more details and examples, visit [GitHub](https://github.com/gleu/Hooks-in-PostgreSQL).