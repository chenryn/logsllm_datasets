7
8
9
10
11
12
13
14
15
Sample K $← {0, 1}k;
Initialize a dictionary DX;
Generate a key pair (pk, sk) ← SWHE.Gen(1k);
Set S := maxv∈V |Skv|;
Set D := maxv∈V
Set N := 2 · D + 1 and t = 2 · S2 · ε−1;
Sample a hash function h : V → [t] from H;
foreach v ∈ V do
(cid:8) max(w,δ)∈Skv δ(cid:9);
compute (cid:96)v := PK (v);
initialize an array Tv of size t;
foreach (wi, δi) ∈ Skv do
set Tv[h(wi)] ← SWHE.Encpk(2N−δi );
ﬁll remaining cells of Tv with encryptions of
0; set DX[(cid:96)v] := Tv;
Output K and EO = DX
than our ﬁrst but is optimal with respect to communication
complexity.
The details of the construction are given in Algorithms 1
It makes use of a SWHE scheme SWHE =
and 2.
(Gen, Enc, Dec, Eval), a pseudo-random permutation P and
a family of universal hash functions H.
The Setup algorithm works as follows. Given 1k, ΩG, α,
and ε as inputs, it generates a public/secret-key pair (pk, sk)
for SWHE. Let D be the maximum distance over all the
sketches and S be the maximum sketch size. Setup sets
N := 2 · D + 1 and samples a hash function h $← H with
domain V and co-domain [t], where t = 2 · S2 · ε−1.
It then creates a hash table for each node v ∈ V . More
precisely, for each node v, it processes each pair (wi, δi) ∈
Skv and stores Encpk(2N−δi ) at location h(wi) of a t-size ar-
ray Tv. In other words, for all v ∈ V , it creates an array Tv
such that for all (wi, δi) ∈ Skv, Tv[h(wi)] ← Encpk(2N−δi ).
It then ﬁlls the empty cells of Tv with homomorphic encryp-
tions of 0 and stores each hash table Tv1 through Tvn in a
dictionary DX by setting, for all v ∈ V , DX[PK (v)] := Tv.
Finally, it outputs DX as the encrypted oracle EO.
Fig. 2 below provides an example of one of the hash tables
Tv generated from a sketch Skv = {(w1, δ1), . . . , (ws, δs)},
where s is the size of the sketch. For all i ∈ [s], the cipher-
text Encpk(2N−δi ) is stored at location h(wi) of the table
Tv. For example, we place Encpk(22−δj ) to Tv[h(wj)] since
h(wj) = 1. Finally, all remaining locations of Tv are ﬁlled
with SWHE encryptions of 0. Notice that, since we are using
probabilistic encryption, the encryptions of 0 are diﬀerent,
and are indistinguishable from the encryptions of the other
values.
Figure 2: One node’s encrypted hash table.
The distQuery protocol works as follows.
Given a
query q = (u, v), the client sends tokens (tk1, tk2) =
(PK (u), PK (v)) to the server which uses them to retrieve the
hash tables of nodes u and v by computing Tu := DX[tk1]
and Tv := DX[tk2]. The server then homomorphically eval-
uates an inner product over the hash tables. More precisely,
i=1 Tu[i] · Tv[i], where(cid:80) and · refer to
it computes c :=(cid:80)t
the homomorphic addition and multiplication operations of
of the SWHE scheme. Finally, the server returns only c to
the client who decrypts it and outputs 2N − log2 (Decsk(c)).
Algorithm 2: DistQuery algorithm for GraphEnc2
Input : Client’s input is (K, q) and server’s input is
Output: Client’s output is distq and server’s output is
EO.
⊥.
1 begin distQuery
2
C: client parses q as (u, v);
C ⇒ S: client sends
tk = (tk1, tk2) = (PK (u), PK (v));
S: server retrieves T1 := DX[tk1] and T2 := DX[tk2];
foreach i ∈ [t] do
Server computes
ci ← SWHE.Eval(×, T1[i], T2[i]);
S ⇒ C: server sends c ← SWHE.Eval(+, c1, . . . , ct);
C: client computes m ← SWHE.Decsk(c);
C: client outputs dist = 2N − log m.
3
4
5
6
7
8
9
Note that the storage complexity at the server is O(n · t)
and the communication complexity of distQuery is O(1) since
the server only returns a single ciphertext. In Section 5.2.1,
we analyze the correctness and security of the scheme.
Remark. The reason we encrypt 2N−δi as opposed to δi
is to make sure we can get the minimum sum over the dis-
tances from the sketches of both u and v. Our observation
is that 2x + 2y is bounded by 2max(x,y)−1. As we show Theo-
rem 5.2, this approach does not, with high probability, aﬀect
the approximation factor from what the underlying distance
oracle give us.
Instantiating & optimizing the SWHE scheme. For
our experiments (see Section 6) we instantiate the SWHE
scheme with the BGN construction of [3]. We choose BGN
due to the eﬃciency of its encryption algorithm and the
compactness of its ciphertexts and keys (as compared to the
lattice-based construction of [19]). Unfortunately, the BGN
decryption algorithm is expensive as it requires computa-
tions of discrete logarithms. To improve this, we make use
of various optimizations. In particular, we compute discrete
logs during decryption using the Baby step Giant step al-
gorithm [43] and use a pre-computed table to speed up the
computation. We defer the details of our optimizations to
the full version of this work.
5.2.1 Correctness
Here, we analyze the correctness of GraphEnc2. We ﬁrst
bound the collision probability of our construction and then
proceed to prove correctness in Theorem 5.2 below.
Lemma 5.1. Let q = (u, v) be a shortest distance query
and let Eq be the event that a collision occurred in the Setup
algorithm while constructing the hash tables Tu and Tv.
Then, Pr [Eq ] ≤ 2 · S2
t .
Proof: Let Collv be the event that at least one collision
occurs while creating v’s hash table Tv (i.e., in Algorithm 1
!!…!…!TvEncpk(2N−δi)Encpk(2N−δk)Encpk(2N−δj)Encpk(0)Encpk(0)Encpk(0)0(cid:1)h(wi)(cid:1)h(wj)(cid:1)h(wk)(cid:1)2(cid:1)t-1(cid:1)509Setup Line 13). Also, let XCollu,v be the event that there
exists at least one pair of distinct nodes wu ∈ Sku and wv ∈
Skv such that h(wu) = h(wv). For any q = (u, v), we have
Pr [Eq ] ≤ Pr [ Collu ] + Pr [ Collv ] + Pr [ XCollu,v ].
(cid:1) node pairs in Sku and Skv, respectively,
(1)
Let su be the size of Sku an sv be the size of Skv. Since there
(cid:1) and (cid:0)sv
are (cid:0)su
2
2
t
v
u
2·t and Pr [ Collv ] ≤ s2
and each pair collides under h with probability at most
1/t, Pr [ Collu ] ≤ s2
2·t . On the other
hand, if I is the set of common nodes in Sku and Skv, then
. Recall that su = sv ≤ S, so
Pr [ XCollu,v ] ≤ (su−|I|)(sv−|I|)
by combining with Eq. 1, we have Pr [Eq ] ≤ 2 · S2
(cid:4)
t .
Note that in practice “intra-sketch” collision events Collu
and Collv may or may not aﬀect the correctness of the
scheme. This is because the collisions could map the SWHE
encryptions to locations that hold encryptions of 0 in other
sketches. This means that at query time, these SWHE en-
cryptions will not aﬀect the inner product operation since
they will be canceled out.
Inter-sketch collision events
XCollu,v, however, may aﬀect the results since they will
cause diﬀerent nodes to appear in the intersection of the
two sketches and lead to an incorrect sum.
Theorem 5.2. Let G = (V, E), α ≥ 1 and ε < 1. For all
q = (u, v) ∈ V 2 with u (cid:54)= v,
Pr [ α · dist(u, v) − log |I| ≤ d ≤ α · dist(u, v) ] ≥ 1 − ε,
GraphEnc2.distQuery(cid:0)(K, q), EO(cid:1),
where
(K, EO) ← GraphEnc2.Setup(1k, ΩG, α, ε), and I is the
number of common nodes between Sku and Skv.
:=
(d,⊥)
i + δv
c =(cid:80)t
i ∈ Sku and δv
Proof: Let I be the set of nodes in common between Sku
i }, where for all
and Skv and let mindist = minwi∈I{δu
i ∈ Skv. Note that at line 7
0 ≤ i ≤ |I|, δu
in Algorithm 2 distQuery, the server returns to the client
Let Eq be the event a collision occurred during Setup in
the construction of the hash tables Tu and Tv of u and v
respectively. Conditioned on Eq, we therefore have that
i=1 Tu[i] · Tv[i].
|I|(cid:88)
c =
Encpk(2N−δu
i ) · Encpk(2N−δv
i )
(cid:0)22N · Σ
i=1
= Encpk
i )(cid:1),
|I|
i=12
−(δu
i +δv
where the ﬁrst equality holds since for any node wi (cid:54)∈ I,
one of the homomorphic encryptions Tu[i] or Tv[i] is an
It follows then that (conditioned on Eq)
encryption of 0.
at Step 9 the client outputs
d = 2N − log(cid:0)22N · Σ
≤ 2N − log(cid:0)22N−mindist(cid:1)
|I|
i=12
i )(cid:1)
−(δu
i +δv
≤ mindist,
where the ﬁrst inequality holds since mindist ≤ (δu
i ) for
all i ∈ |I|. Towards showing a lower bound on d note that
i + δv
d = 2N − log(cid:0)22N · Σ
≥ 2N − log(cid:0)22N−mindist + |I|(cid:1)
|I|
i=12
−(δu
i )(cid:1)
i +δv
≥ mindist − log |I|,
where the ﬁrst inequality also holds from mindist ≤ (δu
i +δv
i )
for all i ∈ |I|. Now, by the (α, ε)-correctness of DO, we have
that mindist ≤ α · dist(u, v) with probability at least (1 − ε)
over the coins of DO.Setup. So, conditioned on Eq,
mindist − log |I| ≤ d ≤ α · dist(u, v).
The Theorem follows by combining this with Lemma 5.1
which bounds the probability of Eq and noting that Setup
sets t = 2 · S2 · ε−1.
(cid:4)
Space complexity. Note that to achieve (α, ε)-correctness,
our construction produces encrypted sketches that are larger
than the original sketches. More precisely, if the maximum
sketch size of the underlying distance oracle is S, then the
size of every encrypted sketch is t = 2 · S2 · ε−1, which
is considerably larger. In Section 5.3, we describe a third
construction which achieves better space eﬃciency at the
cost of more leakage.
Remark on the approximation. Note that Theorem 5.2
also provides a lower bound of α · dist(u, v) − log |I| for the
approximate distance. In particular, the bound depends on
the set of common nodes |I| which varies for diﬀerent queries
but is small in practice. Furthermore, if log |I| is larger than
mindist, the approximate distance returned could be neg-
ative (we indeed observe a few occurrences of this in our
experiments).
To improve the accuracy of the approximation, one
could increase the base in the homomorphic encryptions.
More precisely,
instead of using encryptions of the form
Encpk(2N−δ) we could use Encpk(BN−δ) for B = 3 or
B = 4. This would result in an improved lower bound of
mindist − logB |I| but would also increase the homomorphic
decryption time since this increases the message space which
in turn adds overhead to the decryption algorithm. We leave
it as an open problem to further improve this lower bound
without increasing the message space.
Remark on error rate. Given the above analysis, a client
that makes γ queries will have an error ratio of ε · γ.
In
our experiments we found that, in practice, when using the
Das Sarma et al. oracle, setting σ ≈ 3 results in a good
√
n),
approximation. So if we ﬁx σ = 3 and set t = O(
then the error rate is O(cid:0)γ · log2(n)/
we achieve about the same error rate O(cid:0)γ · ln2(n)/
√
signiﬁcantly as n grows. In the case of the Cohen et al. all-
√
n), then
distance sketch, if we ﬁx ρ = 4 and set t = O(
n(cid:1) which decreases
n(cid:1). We
√
provide in Section 6 detailed experimental result on the error
rate.
5.2.2
In the following Theorem, we analyze the security of
GraphEnc2.
Security
Theorem 5.3. If P is pseudo-random and SWHE
is CPA-secure
as described above,
is adaptively (LSetup,LQuery)-semantically secure, where
LSetup(ΩG) = (n, S, D) and LQuery(ΩG, q) = LQP (ΩG, q).
then GraphEnc2,
Proof Sketch: Consider the simulator S that works as fol-
lows. Given leakage LSetup(ΩG) = (S, D), it starts by gen-
erating (pk, sk) ← SWHE.Gen(1k). For all 1 ≤ i ≤ n, it
$← {0, 1}log n without repetition and sets
then samples (cid:96)i
DX[(cid:96)i] := Ti, where Ti is an array that holds t = 2 · S2
m · ε−1
homomorphic encryptions of 0 ∈ 2N , where N = 2 · D + 1.
It outputs EO = DX.
510Given leakage LQuery(ΩG, q) = LQP (ΩG, q) it checks if ei-
ther of the query nodes u or v appeared in any previous
query. If u appeared previously, S sets tk1 to the value that
was previously used. If not, it sets tk1 := (cid:96)i for some pre-
viously unused (cid:96)i. It does the same for the query node v;
that is, it sets tk2 to be the previously used value if v was
previously queried or to an unused (cid:96)i if it was not.
The theorem follows from the pseudo-randomness of P
(cid:4)
and the CPA-security of SWHE.
5.3 A Space-Efﬁcient Construction
Although our second construction, GraphEnc2, achieves opti-