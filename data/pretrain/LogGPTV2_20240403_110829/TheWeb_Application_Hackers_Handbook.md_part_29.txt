n To further protect against unauthorized access, applications may present
users with a secondary challenge that they must complete before gain-
ing access to the password reset function. Be sure that the design of this
challenge does not introduce new vulnerabilities:
n The challenge should implement the same question or set of ques-
tions for everyone, mandated by the application during registration.
If users provide their own challenge, it is likely that some of these will
be weak, and this also enables an attacker to enumerate valid accounts
by identifying those that have a challenge set.
n Responses to the challenge should contain suffi cient entropy that they
cannot be easily guessed. For example, asking the user for the name of
his fi rst school is preferable to asking for his favorite color.
n Accounts should be temporarily suspended following a number of
failed attempts to complete the challenge, to prevent brute-force attacks.
n The application should not leak any information in the event of failed
responses to the challenge — regarding the validity of the username,
any suspension of the account, and so on.
n Successful completion of the challenge should be followed by the
process described previously, in which a message is sent to the user’s
registered e-mail address containing a reactivation URL. Under no
circumstances should the application disclose the user’s forgotten
password or simply drop the user into an authenticated session. Even
proceeding directly to the password reset function is undesirable. The
response to the account recovery challenge will in general be easier
for an attacker to guess than the original password, so it should not
be relied upon on its own to authenticate the user.
cc0066..iinndddd 220000 88//1199//22001111 1122::0066::4422 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 201
Chapter 6 n Attacking Authentication 201
Log, Monitor, and Notify
n The application should log all authentication-related events, including
login, logout, password change, password reset, account suspension, and
account recovery. Where applicable, both failed and successful attempts
should be logged. The logs should contain all relevant details (such as
username and IP address) but no security secrets (such as passwords).
Logs should be strongly protected from unauthorized access, because
they are a critical source of information leakage.
n Anomalies in authentication events should be processed by the appli-
cation’s real-time alerting and intrusion prevention functionality. For
example, application administrators should be made aware of patterns
indicating brute-force attacks so that appropriate defensive and offensive
measures can be considered.
n Users should be notifi ed out-of-band of any critical security events. For
example, the application should send a message to a user’s registered
e-mail address whenever he changes his password.
n Users should be notifi ed in-band of frequently occurring security events.
For example, after a successful login, the application should inform users of
the time and source IP/domain of the last login and the number of invalid
login attempts made since then. If a user is made aware that her account
is being subjected to a password-guessing attack, she is more likely to
change her password frequently and set it to a strong value.
Summary
Authentication functions are perhaps the most prominent target in a typical
application’s attack surface. By defi nition, they can be reached by unprivileged,
anonymous users. If broken, they grant access to protected functionality
and sensitive data. They lie at the core of the security mechanisms that an
application employs to defend itself and are the front line of defense against
unauthorized access.
Real-world authentication mechanisms contain a myriad of design and imple-
mentation fl aws. An effective assault against them needs to proceed systemati-
cally, using a structured methodology to work through every possible avenue of
attack. In many cases, open goals present themselves — bad passwords, ways to
fi nd out usernames, vulnerability to brute-force attacks. At the other end of the
spectrum, defects may be very hard to uncover. They may require meticulous
examination of a convoluted login process to establish the assumptions being
cc0066..iinndddd 220011 88//1199//22001111 1122::0066::4422 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 202
202 Chapter 6 n Attacking Authentication
made and to help you spot the subtle logic fl aw that can be exploited to walk
right through the door.
The most important lesson when attacking authentication functionality is to
look everywhere. In addition to the main login form, there may be functions to
register new accounts, change passwords, remember passwords, recover forgotten
passwords, and impersonate other users. Each of these presents a rich target of
potential defects, and problems that have been consciously eliminated within
one function often reemerge within others. Invest the time to scrutinize and
probe every inch of attack surface you can fi nd, and your rewards may be great.
Questions
Answers can be found at http://mdsec.net/wahh.
1. While testing a web application, you log in using your credentials of joe
andpass. During the login process, you see a request for the following
URL appear in your intercepting proxy:
http://www.wahh-app.com/app?action=login&uname=joe&password=pass
What three vulnerabilities can you diagnose without probing any further?
2. How can self-registration functions introduce username enumeration
vulnerabilities? How can these vulnerabilities be prevented?
3. A login mechanism involves the following steps:
(a) The application requests the user’s username and passcode.
(b) The application requests two randomly chosen letters from the user’s
memorable word.
Why is the required information requested in two separate steps? What
defect would the mechanism contain if this were not the case?
4. A multistage login mechanism fi rst requests the user’s username and
then various other items across successive stages. If any supplied item is
invalid, the user is immediately returned to the fi rst stage.
What is wrong with this mechanism, and how can the vulnerability be
corrected?
5. An application incorporates an antiphishing mechanism into its login
functionality. During registration, each user selects a specifi c image from
a large bank of memorable images that the application presents to her.
The login function involves the following steps:
(a) The user enters her username and date of birth.
cc0066..iinndddd 220022 88//1199//22001111 1122::0066::4422 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 203
Chapter 6 n Attacking Authentication 203
(b) If these details are correct, the application shows the user her chosen
image; otherwise, a random image is displayed.
(c) The user verifi es whether the correct image is displayed. If it is, she
enters her password.
The idea behind this antiphishing mechanism is that it enables the user
to confi rm that she is dealing with the authentic application, not a clone,
because only the real application knows the correct image to display to
the user.
What vulnerability does this antiphishing mechanism introduce into the
login function? Is the mechanism effective at preventing phishing?
cc0066..iinndddd 220033 88//1199//22001111 1122::0066::4422 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 204
cc0066..iinndddd 220044 88//1199//22001111 1122::0066::4422 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 205
CHAPTER
7
Attacking Session Management
The session management mechanism is a fundamental security component in
the majority of web applications. It is what enables the application to uniquely
identify a given user across a number of different requests and to handle
the data that it accumulates about the state of that user’s interaction with the
application. Where an application implements login functionality, session man-
agement is of particular importance, because it is what enables the application
to persist its assurance of any given user’s identity beyond the request in which
he supplies his credentials.
Because of the key role played by session management mechanisms, they
are a prime target for malicious attacks against the application. If an attacker
can break an application’s session management, she can effectively bypass its
authentication controls and masquerade as other application users without
knowing their credentials. If an attacker compromises an administrative user
in this way, the attacker can own the entire application.
As with authentication mechanisms, a wide variety of defects can commonly
be found in session management functions. In the most vulnerable cases, an
attacker simply needs to increment the value of a token issued to him by the
application to switch his context to that of a different user. In this situation,
the application is wide open for anyone to access all areas. At the other end
of the spectrum, an attacker may have to work extremely hard, deciphering
several layers of obfuscation and devising a sophisticated automated attack,
before fi nding a chink in the application’s armor.
205
cc0077..iinndddd 220055 88//1199//22001111 1122::0077::3388 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 206
206 Chapter 7 n Attacking Session Management
This chapter looks at all the types of weakness the authors have encountered
in real-world web applications. It sets out in detail the practical steps you need
to take to fi nd and exploit these defects. Finally, it describes the defensive mea-
sures that applications should take to protect themselves against these attacks.
COMMON MYTH
“We use smartcards for authentication, and users’ sessions cannot be com-
promised without them.”
However robust an application’s authentication mechanism, subsequent
requests from users are only linked back to that authentication via the result-
ing session. If the application’s session management is fl awed, an attacker
can bypass the robust authentication and still compromise users.
The Need for State
The HTTP protocol is essentially stateless. It is based on a simple request-response
model, in which each pair of messages represents an independent transaction.
The protocol itself contains no mechanism for linking the series of requests
made by a particular user and distinguishing these from all the other requests
received by the web server. In the early days of the Web, there was no need for
any such mechanism: websites were used to publish static HTML pages for
anyone to view. Today, things are very different.
The majority of web “sites” are in fact web applications. They allow you to
register and log in. They let you buy and sell goods. They remember your pref-
erences the next time you visit. They deliver rich multimedia experiences with
content created dynamically based on what you click and type. To implement
any of this functionality, web applications need to use the concept of a session.
The most obvious use of sessions is in applications that support logging in.
After entering your username and password, you can use the application as
the user whose credentials you have entered, until you log out or the session
expires due to inactivity. Without a session, a user would have to reenter his
password on every page of the application. Hence, after authenticating the user
once, the application creates a session for him and treats all requests belonging
to that session as coming from that user.
Applications that do not have a login function also typically need to use ses-
sions. Many sites selling merchandise do not require customers to create accounts.
However, they allow users to browse the catalog, add items to a shopping basket,
provide delivery details, and make a payment. In this scenario, there is no need
to authenticate the user’s identity: for the majority of his visit, the application
does not know or care who the user is. But to do business with him, it needs to
know which series of requests it receives originated from the same user.
cc0077..iinndddd 220066 88//1199//22001111 1122::0077::3388 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 207
Chapter 7 n Attacking Session Management 207
The simplest and still most common means of implementing sessions is to
issue each user a unique session token or identifi er. On each subsequent request
to the application, the user resubmits this token, enabling the application to
determine which sequence of earlier requests the current request relates to.
In most cases, applications use HTTP cookies as the transmission mechanism
for passing these session tokens between server and client. The server’s fi rst
response to a new client contains an HTTP header like the following:
Set-Cookie: ASP.NET_SessionId=mza2ji454s04cwbgwb2ttj55
and subsequent requests from the client contain this header:
Cookie: ASP.NET_SessionId=mza2ji454s04cwbgwb2ttj55
This standard session management mechanism is inherently vulnerable to
various categories of attack. An attacker’s primary objective in targeting the
mechanism is to somehow hijack the session of a legitimate user and thereby
masquerade as that person. If the user has been authenticated to the application,
the attacker may be able to access private data belonging to the user or carry
out unauthorized actions on that person’s behalf. If the user is unauthenticated,
the attacker may still be able to view sensitive information submitted by the
user during her session.
As in the previous example of a Microsoft IIS server running ASP.NET, most
commercial web servers and web application platforms implement their own
off-the-shelf session management solution based on HTTP cookies. They provide
APIs that web application developers can use to integrate their own session-
dependent functionality with this solution.
Some off-the-shelf implementations of session management have been found to
be vulnerable to various attacks, which results in users’ sessions being compro-
mised (these are discussed later in this chapter). In addition, some developers fi nd
that they need more fi ne-grained control over session behavior than is provided
for them by the built-in solutions, or they want to avoid some vulnerabilities
inherent in cookie-based solutions. For these reasons, it is fairly common to see
bespoke and/or non-cookie-based session management mechanisms used in
security-critical applications such as online banking.
The vulnerabilities that exist in session management mechanisms largely
fall into two categories:
n Weaknesses in the generation of session tokens
n Weaknesses in the handling of session tokens throughout their life cycle
We will look at each of these areas in turn, describing the different types of
defects that are commonly found in real-world session management mecha-
nisms, and practical techniques for discovering and exploiting these. Finally,
we will describe measures that applications can take to defend themselves
against these attacks.
cc0077..iinndddd 220077 88//1199//22001111 1122::0077::3388 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 208
208 Chapter 7 n Attacking Session Management
HACK STEPS
In many applications that use the standard cookie mechanism to transmit
session tokens, it is straightforward to identify which item of data contains
the token. However, in other cases this may require some detective work.
1. The application may often employ several different items of data col-
lectively as a token, including cookies, URL parameters, and hidden form
fields. Some of these items may be used to maintain session state on dif-
ferent back-end components. Do not assume that a particular parameter
is the session token without proving it, or that sessions are being tracked
using only one item.
2. Sometimes, items that appear to be the application’s session token may
not be. In particular, the standard session cookie generated by the web
server or application platform may be present but not actually used by the
application.
3. Observe which new items are passed to the browser after authentication.
Often, new session tokens are created after a user authenticates herself.
4. To verify which items are actually being employed as tokens, find a page
that is definitely session-dependent (such as a user-specific “my details”
page). Make several requests for it, systematically removing each item
that you suspect is being used as a token. If removing an item causes
the session-dependent page not to be returned, this may confirm that the
item is a session token. Burp Repeater is a useful tool for performing
these tests.
Alternatives to Sessions
Not every web application employs sessions, and some security-critical applica-
tions containing authentication mechanisms and complex functionality opt to
use other techniques to manage state. You are likely to encounter two possible
alternatives:
n HTTP authentication — Applications using the various HTTP-based
authentication technologies (basic, digest, NTLM) sometimes avoid the
need to use sessions. With HTTP authentication, the client component
interacts with the authentication mechanism directly via the browser,
using HTTP headers, and not via application-specifi c code contained
within any individual page. After the user enters his credentials into a
browser dialog, the browser effectively resubmits these credentials (or
reperforms any required handshake) with every subsequent request to
the same server. This is equivalent to an application that uses HTML
forms-based authentication and places a login form on every application
page, requiring users to reauthenticate themselves with every action they
perform. Hence, when HTTP-based authentication is used, it is possible
cc0077..iinndddd 220088 88//1199//22001111 1122::0077::3388 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 209
Chapter 7 n Attacking Session Management 209
for an application to reidentify the user across multiple requests without
using sessions. However, HTTP authentication is rarely used on Internet-
based applications of any complexity, and the other versatile benefi ts
that fully fl edged session mechanisms offer mean that virtually all web
applications do in fact employ these mechanisms.
n Sessionless state mechanisms — Some applications do not issue session
tokens to manage the state of a user’s interaction with the application.
Instead, they transmit all data required to manage that state via the client,
usually in a cookie or a hidden form fi eld. In effect, this mechanism uses
sessionless state much like the ASP.NET ViewState does. For this type
of mechanism to be secure, the data transmitted via the client must be
properly protected. This usually involves constructing a binary blob
containing all the state information and encrypting or signing this using
a recognized algorithm. Suffi cient context must be included within the
data to prevent an attacker from collecting a state object at one location
within the application and submitting it to another location to cause some
undesirable behavior. The application may also include an expiration time
within the object’s data to perform the equivalent of session timeouts.
Chapter 5 describes in more detail secure mechanisms for transmitting
data via the client.
HACK STEPS