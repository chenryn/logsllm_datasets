Print num lines of kermel, user stack
ksym (&p) 。usym (p)
Kermel/user symbol string from instruction pointer
kaddr (*name*),
(osev_]xppen
Kemel/user address from symbol name
ste(stz[, len]}
String from address
ntop ( [af] ,
(.zppe
IP address to string
Asynchronous Actions
printf ("fozmat",var0. varn)
Print vars; use print() for aggregations
systenm (*fozmat*,vaz0. - varN)
Run at command Iine
t1me (*formac*)
Print formatted time
c1ear (@nap)
Clear a map: delete all keys
print (map)
 Print a map
ex1t ()
Exit
Switches
Trace this probe description
-1
List probes instead of tracing them
GId d-
Enable USDT probes on PID
C
 cormand
Invoke this command
=V,
 =d
Verbose and debug output
---
## Page 784
pendix
BCC Tool Development
This appendix summarizes BCC tool development using examples and is an extension of
Chapter 4. This is optional content for those readers who are interested. Chapter 5 covers
how to develop tools in bpftrace, a higher-level language that is expected to be sufficient and
preferred in many cases. Also see Chapter 18 for a discussion on minimizing overhead, which
is common to both BCC and bpftrace tool development.
Resources
I created three detailed documents for learning BCC tool development and made them
available for free as part of the BCC repository where they are online and maintained by other
contributors. They are:
= BCC Python Developer Tutorial: This contains more than 15 lessons for BCC tool
development using the Python interface, where each lesson highlights a number of
details to learn [180].
• BCC Reference Guide: This is a full reference for the BPF C API, and the BCC Python
API. It covers all the capabilities of BCC, and includes short code examples for every
capability. It is intended to be searched when needed [181].
 Contributing BCC/eBPF seripts: This provides a checklist for tool developers who
wish to contribute their tools to the BCC repository. This summarizes years of lessons
learned when developing and maintaining tracing tools [63].
In this appendix I provide an additional resource for learning BCC tool development: a crash
course of learning by example. This includes four Python programs: hello_world.py as a
basic example; sleepsnoop.py for per-event output; bitehist.py to introduce histogram maps,
function signatures, and structs; and biolatency-py as an example of a real tool.
Five Tips
Here are five tips you should know before writing BCC tools:
---
## Page 785
748
Appendix C
1. BPF C is restricted: no loops or kernel function calls. You can only use the bpf_* kernel
helper functions and some compiler built-ins.
2. All memory must be read through bpf_probe_read(), which does necessary checks.
If you want to dereference a->b->c->d, then try doing it first, as BCC has a rewriter
that may turn it into the necessary bpf_probe_read(s. If it doesn’t work, add explicit
bpf_probe_reads()s
• Memory can only be read to the BPF stack or BPF maps. The stack is limited in size;
use BPF maps for storing large objects.
3. There are three ways to output data from kernel to user:
• BPF_PERF_OUTPUTO: A way to send per-event details to user space, via a custom
struct you define.
• BPF_HISTOGRAMQ or other BPF maps: Maps are a key/value hash from which
more advanced data structures can be built. They can be used for summary statistics
(uapgga) aoeds rasn uosy Aeopouad peau pue 'sureuosq 1o
• bpf_trace_printk (: Debugging only, this writes to trace_pipe and can clash with
other programs and tracers.
4. Use static instrumentation (tracepoints, USDT) instead of dynamic instrumentation
(kprobes, uprobes) wherever possible. Dynamic instrumentation is an unstable API, so
your tools will break if the code it is instrumenting changes.
5. Check for BCC developments for new features and capabilities, and bpftrace
developments in case it becomes sufficient for your needs.
Tool Examples
The following example tools have been selected to teach you the essentials of BCC
programming. They are hello_world.py and sleepsnoop.py as examples of per-event output,
ndgno ure3osu po sadtuexa se d:Kouapeofq pue dsqua4q pue
Tool 1: hello_world.py
This is a basic example to begin with. First, consider the output:
: hello_world.py
ModuleProcessTh-30136 [005] ..*. 2257559.959119: 0x00000001: Be11o, World!
SendContro11exT-30135 [002] .... 225T559.9T1135: 0x00000001: Be11o, Wor1d!
SendContro11erT-30142 [007].... 2257559,974129: 0x0000001: Bel1o, Morld!
KoduleProcessTh-30153 [000] ..-. 225T559.9T7401: 0x00000001: Be11o, Wor1d!
SendContro11erT30135 [003].... 2257559,996311: 0x00000001: Bel1o, Mor1ld!
[.--]
It prints a line of output for some event, ending with the text *Hello, World!"
---
## Page 786
BCC Tool Development
749
Now the source code, hello_world.py:
1#1/uar/bLn/python
2from bee inport BPF
3  b = BPF(text=***
int kprobe_do_nanosleep()
bpf_trace_pzintk ("He1lo, Woxld!\\n*) ;
return 0;
81***);
9b.trace_pzint (1
Line 1 sets the interpreter to Python. Some environments prefer using *#1/usr/bin/env
python° to use the first python found in the shell environment.
Line 4 imports the BPF library from BCC.
Lines 4 to 8, highlighted in bold, declare the kernel-level BPF program, written in C. This
program is included in the parent Python program in quotation marks and passed as the text
argument to a new BPF() object, b.
Line 4 uses a shortcut to instrument a kprobe. This shortcut is a function declaration that
begins with “kprobe_°. The rest of the string is treated as the function name to instrument,
in this case, do_nanosleep(). This shortcut is not used by many tools yet, since those tools
predate his capability. The tools often use a BPEattach_kprobe() Python call instead.
Line 6 calls bpf_trace_printk() with the *Hello Worid!* string, followed by a newline (which
(daps uoeduoo peuy atq aog pasasaad s _u, au seq os ,, exa ue a padeosa st
bpf_trace_printk() prints a string to the shared trace buffer.
Line 9 calls a Python trace_print() function from the BPF object. This fetches the trace buffer
messages from the kernel and prints them out.
To keep this example short, the bpf_trace_printk( interface was used. However, this is for
debugging only as it utilizes a buffer that is shared with other tools (which can be read from
user space via /sys/kernel/debug/tracing/trace_pipe.) Running this at the same time as other
by the next tool, sleepsnoop.py.
tracing tools may cause their outputs to clash. The recommended interface is demonstrated
Tool 2: sleepsnoop.py
This tool shows calls to do_nanosleep( with a timestamp and process ID. This is provided as
an example of using the perf output buffer. Sample output:
↓ sleepsnoop -PY
TIHE (s)
PID
CALL
489488 .676744000
5008
iptaox oTteH 
489488 .676740000
---
## Page 787
750
Appendix C
４89488. 676744000
32469 Hello, World!
489488 , 677674000
5006 Hel1o, Norld!
[..]
The source code is:
1!/usr/bin/python
2
3
from bce inport BFF
5 f BPF progran
6
**x)g =q
7
struct data_t (
B
u64 ts)
6
u32 pid;
10
1:
11
12
BPF_PERF_OUTPUT (event.s) :
13
14
Int kpzobe_do_nanosleep (void *ctx)(
15
struct data_t data = ↑1
16
data-pld = bpf_get_cuzrent_pld_tgidl1 :
17
data. ts = bpf_ktime_get_ns () / 1000;
18
events,pexf_submlt (ctx, sdata, slzeof (data)) 
1.9
return 0
20
1;
21
22
23
fheader
24
pxint (*18s =6s a*  (*rIME (a)*,*PIo*, *CALL*)
25
26
#process event
27
def print_erent (cpu, dats, size) :
28
event = b[*events*] -event (data)
29
print (*18.9f 6d Hello, Yorld!* $  1
: 3
|**
2 -> 3
: 0
4 -> 7
: 55
8 -> 15
: 26
1.6 -> 31
: 9
 + + +
32 > 63
:4
| * *
---
## Page 789
752
Appendix C
64 -> 127
: 0
5Z  511
: 0
512 > 1023
:1
The full BCC program, with enumerated lines:
1#!/usr/bLn/python
2
f[-.. ]
F
from
_future__ Inport print_function
 from bcc inport BPF
5from tine inport sleep
7# 1oad BPF progran
6
θb = BPr(text=***
9
#include 
10
11
BPF_BISTOGRAM (dist) :
12
13
Int kprobe_blk_account_io_conpletion (struct pt_regs *ctx,
14
void *zeq, unsigned int bytes)
15 
16
 ( (z0 / sAq) tz6otgdq) quxu*a5
17
return 0;
18
1
19
20
21
xepeeg #
22
print ("Tracing block 1/0... Hit CtelC to end.*)
23
24
f trace until Ctrl-C
25
txy:
26
sleep (99999999)
27
except KeyboardIntezrupt:
28
print ()
30 f output
(sqx)zou· 11α[
Lines 18 include details covered in the previous hello_world.py example.
Line 9 includes header information used by the BPF program (for struct pt_regs).
Line 11 declares a BPF map histogram, named *dist", used for storage and output.
---
## Page 790
BCC Tool Development
753
Lines 13 and 14 declare the function signature for blk_account_io_completion0. The first
argument, *struct pt_regs *ctx,* refers to register state from the instrumentation, and is not
from the target function. The remaining arguments are from the function, which is from the
kernel in block/blk-core.c:
void blk_account_io_completion(struet cequest *ceg, unsigned int bytes)
-nSre _ba1, sanban μonns, auq anepap osje snu I inq °uaunre saq ag u papsaraju ue I
ment so that the positions match, even though I am not using struct request *req in the BPF
program. However, struct request is not known by default by BPF, so including it in the func-
, ba1, isanbas ponns, aoe[das (z) ro *umoux st 1sanba μpnus set os * apnpu
tion signature would cause the BPF tool to fail to compile. There are two workarounds: (1)
with *void *req, * since void is already known, and that I have lost the real type information is
unimportant since the program does not dereference it. In this example I used workaround 2.
Line 16 takes the bytes argument and divides it by 1024, then passes this Kbyte value to
bpf_log2l0, a function that generates a power-of-two index from the value. This index value
is then saved in the dist histogram via dist.increment(): which increments the value at that
index by one. To explain with an example:
1. Imagine the for the first event the bytes variable was 4096
2. 4096 / 1024 = 4
3. bpf_log2l(4) = 3
4. dist.increment(3) adds 1 to index 3, so the dist histogram now contains:
index 1: value 0 (refers to 0 → 1 Kbytes)
index 2: value 0 (refers to 2 → 3 Kbytes)
index 3: value 1 (refers to 4 → 7 Kbytes)
index 4: value 0 (refers to 8 → 15 Kbytes)
These indexes and values will be read by user space and printed as a histogram.
Line 22 prints a header. When using this tool, it can be useful to see when the header is
printed: it tells you that the BCC compilation stages and attaching event instrumentation has
completed, and is about to start tracing. The contents of this introductory message follow a
convention that explains what the tool is doing and when it will finish:
•Tracing: This tells the user that the tool is doing per-event tracing, If it were sampling
(profiling), it would say that instead.
• block I/O: This tells the user what events are instrumented.
---
## Page 791
754
Appendix C
• Hit Ctrl-C to end.: This tells the user when the program will end. Tools that generate
interval output may include this as well—for example, *Output every 1 second, Ctrl-C
to end."
Lines 25 to 28 cause the program to wait until Ctrl-C is pressed. When it is, a newline is
printed to prepare the screen for output.
uno aue1 ag 1og 1aqe| e wm 'uensops z-jo-samod e se uresosu isp a squd 1e aur
of *kbytes*. This involves fetching the values for the indexes from the kernel. How does this
Python BPE.print_log2_hist( call understand what ranges each index refers to? These ranges
are not passed from the kernel to user space, only the values are. The ranges are known
because the user-space and kernel log2 algorithms match.
dereferencing:
There is another way to write the BPF code, which serves as an example of struct
include 
#1nc1ude 
BPF_HISTOGRAX(41st1 :