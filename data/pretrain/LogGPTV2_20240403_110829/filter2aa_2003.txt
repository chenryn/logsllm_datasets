# Intelligent Debugging for Vulnerability Analysis and Exploit Development

## Security Research

### Who Am I?
- **Damian Gomez, Argentina**
- Working at Immunity since early 2006
- Focused on:
  - Vulnerability analysis
  - Exploit development
- Lead developer of VisualSploit
- Main developer of the Immunity Debugger project

## Introduction
Exploits can be written in a variety of programming languages, including:
- Pascal
- Fortran
- Lisp
- Brainfuck
- Cupid
- Gap
- Kermit
- Java
- Assembly (ASM)
- C
- Python
- Perl
- Shellscript
- PHP
- COBOL
- FoxPro
- ZMUD
- Whitespace
- Yacc
- Smalltalk
- C#
- C++
- C--
- C-Smile
- Cocoa
- CoffeeScript
- Clipper
- Delphi
- B
- A
- C
- Clist
- Kalkulon
- ABC
- Ada
- ALF
- Batch
- TOM
- OZ
- Modula-3
- Lingo
- Fortress
- ElastiC
- D
- cT
- AWK
- Felix
- Guile
- MC#
- VisualBasic
- Nemerle
- Objective-C
- Phantom
- Prolog
- Simula
- Snobol
- Turing
- Blue
- QuickBasic
- Ruby
- S
- Obliq
- GNU E
- COMAL
- NetRexx
- PL/B
- Sather
- And many more.

## Immunity VisualSploit
Immunity VisualSploit introduces a graphical domain-specific language (DSL) for exploit development.

## Exploits as a Functional Representation of Intelligent Debugging
Exploits are a functional representation of intelligent debugging, involving:
- Input crafting
- Heap analysis
- Memory state manipulation
- Protocol analysis

## Requirements for a Debugger with a Rich API
For effective exploit development, a debugger should have:
- A simple and understandable interface
- A robust and powerful scripting language for automating intelligent debugging
- Lightweight and fast debugging to avoid corrupting results during complex analysis
- Connectivity to fuzzers and other exploit development tools

## User Interface Models
No single user interface model is perfect for all exploit development situations. The three main characteristics that help achieve our goals are:
- Graphical User Interface (GUI)
- Command Line Interface (CLI)
- Scripting language

### Benefits of a GUI
- Easy visualization of the debugee context
- Faster learning curve for complex commands
- Downside: Slower usage compared to the command line due to mouse interactions

### Benefits of the Command Line
- Faster execution
- Example GDB command: `x/i $pc-4`
- Example WinDBG command: `u eip -4`
- Example Immunity Debugger command: `u eip -4`

### Immunity Debugger's Scripting Language
- Python 2.5
- Automate tasks quickly
- Powerful API for manipulating the debugger
- Familiar and easy to learn
- Clean and reusable code with many examples

### Integration of GUI, CLI, and Python
- Combines these three key features to provide a vulnerability development-oriented debugger
- Reduces vulnerability development time by half during testing (Immunity buffer overflow training)
- Facilitates the rapid advancement of state-of-the-art techniques for difficult exploits

## The Immunity Debugger API
- Simple and efficient
- Maintains a cache of requested structures to speed up the experience
- Can perform debugging tasks and interact with the current GUI
- Creates a new instance on every command run, regenerating information each time

### Capabilities of the API
- Assembly/Disassembly
- Breakpoints
- Read/Write Memory
- Searching
- Execution and stepping
- Analysis
- Interaction with GUI

### Interacting with the GUI
- Create new windows for displaying custom data
- Use tables, dialog boxes, and input dialogs
- Add functionality to existing windows
- Create a Python-based orthogonal drawing algorithm

### Immlib: Memory Operations
- `readMemory(address, size)`
- `readLong(address)`
- `readShort(address)`
- `readString(address)`
- `readUntil(address, ending_char)`
- `writeMemory(address, buf)`

### Immlib: Searching
- Search functions return a list of addresses where a particular value was found
- `search(buf)`
- `searchLong(long_int)`
- `searchShort(short_int)`
- `searchCommands(cmd)`
- `searchCommandsOnModule(address, cmd)`

### Immlib: Module and Dependency Management
- `findModule(address)`
- `findDependencies(lookfor)`

### Immlib: Getting References
- `getXrefTo(address)`
- `getXrefFrom(address)`
- `findDataRef(address)`

### Immlib: Knowledge Management
- Save and retrieve data across script runs
- `imm.addKnowledge("nocrash", cpu_context)`
- `imm.getKnowledge("nocrash")`

## Scripting Immunity Debugger
There are three ways to script Immunity Debugger:
- PyCommands
- PyHooks
- PyScripts

### PyCommands
- Temporary scripts
- Decrease development and debugging time
- Non-caching (run, modify, and re-run without restarting the debugger)
- Accessible via the command box or GUI
- Integrate with the debugger's features, including the GUI

### Writing a PyCommand
- Example: `command.py`
  ```python
  import immlib

  def main(args):
      imm = immlib.Debugger()
      imm.Log("Done")
  ```
- Place it into the PyCommands directory and you are ready to go.

### PyHooks
- Objects that hang on debugger events and get executed when that event is hit
- 11 different hooks available, such as `BpHook`, `LogBpHook`, `AllExceptHook`, etc.

### Creating a Hook
- Hooks always have CPU context at runtime
- Example: Logpoint on `strncpy`
  - Instantiate the debugger class
  - Set logpoint address `[strncpy]`
  - Create a `LogBpHook`

### Identifying Common Coding Problems
- Example: `strncpy(dest, src, strlen(src))` is a common vulnerability primitive
- Similar vulnerabilities, such as `memcpy(dest, src, sizeof(src))`, are also detectable using advanced Immunity Debugger APIs.

### Injecting a Hook into Your Target for Debugging
- Logging hook
- Faster, as it doesn't use the debugger
- Injects ASM code into the debugged process
- Hooked function redirects to your ASM code
- Information is logged in the same page
- Used in the `hippie` heap analysis tool

### Drawbacks of Injection Hooking
- Only reports the result; cannot do conditionals
- Hooking on functions has limitations

### Printing the Results of an Injection Hook
- Get the results directly from the log window

### Heap Analysis
- One of the most important tasks for exploit development
- Includes printing the state of a heap, examining heap chunks, saving and restoring heap state, visualizing the heap, and automatically analyzing the heap.

### Immunity Debugger Heap Lib
- Getting all current heaps:
  ```python
  for hndx in imm.getHeapsAddress():
      imm.Log("Heap: 0x%08x" % hndx)
  ```
- Getting a Heap object:
  ```python
  pheap = imm.getHeap(heap)
  ```
- Printing the FreeList:
  ```python
  pheap.printFreeList(uselog=window.Log)
  ```
- Printing the FreeListInUse:
  ```python
  pheap.printFreeListInUse(uselog=window.Log)
  ```

### Case Study: Savant 3.1 Stack Overflow
- Savant webserver (savant.sourceforge.net)
- Stack overflow when sent a long GET request
- Overwritten stack arguments prevent reaching EIP
- Solution involves finding readable and writable addresses and using Immunity Debugger scripts like `Duality` and `Searchcode` to craft the exploit.

### Conclusions
- Immunity Debugger won't give you an out-of-the-box exploit but will:
  - Speed up debugging time
  - Help find bugs
  - Assist in crafting reliable exploits
- It is not a proof-of-concept application and has been successfully used by the vulnerability development team for months.

### Download Immunity Debugger
- Get it free at: [http://debugger.immunityinc.com](http://debugger.immunityinc.com)
- For comments, scripts, ideas, or requests, contact: PI:EMAIL