### SSL Man-in-the-Middle Attack and Detection Methods

#### SSL Man-in-the-Middle Attack
Figure 2 illustrates an SSL man-in-the-middle (MITM) attack with a forged certificate, positioned between a browser and an HTTPS server. The basic steps of a generic SSL MITM attack are as follows:

1. **Insertion into the Transport Path:**
   - The attacker first inserts itself into the communication path between the client and the server. This can be achieved by setting up a malicious WiFi hotspot or using techniques such as ARP poisoning, DNS spoofing, or BGP hijacking on trusted networks.
   - The attacker may also configure itself as the client's proxy server by exploiting auto-configuration protocols like PAC/WPAD. At this point, the attacker has control over the client’s traffic and acts as a relay server.

2. **Detection and Impersonation:**
   - When the attacker detects an SSL ClientHello message from the client, it determines that the client is initiating an SSL connection.
   - The attacker then impersonates the victim server and establishes an SSL connection with the client, using a forged SSL certificate during the SSL handshake.

3. **Parallel Connection to the Legitimate Server:**
   - Simultaneously, the attacker creates a separate SSL connection to the legitimate server, impersonating the client.
   - Once both SSL connections are established, the attacker relays all encrypted messages between the client and the server, potentially modifying the data in transit.

#### Detection Techniques for Network Tampering

Several methods have been proposed to detect network tampering, including:

- **Web Tripwires:**
  - Web Tripwires [24] uses client-side JavaScript to detect in-flight modifications to web pages. In a study of real-world clients, over 1% of 50,000 unique IP addresses observed altered web pages.
  - Approximately 70% of these modifications were caused by user-installed software injecting unwanted JavaScript. Some ISPs and enterprise firewalls were also found to inject ads or add compression to traffic.
  - Web Tripwires is designed to detect modifications to unencrypted web traffic but does not detect passive eavesdropping or SSL MITM attacks.

- **Content Security Policy (CSP):**
  - CSP [29] allows websites to restrict browsers to load content only from trusted sources and report violations back to the server.
  - CSP can detect untrusted scripts injected into protected pages but does not detect eavesdropping on SSL connections.

- **Browser Plugins:**
  - Browser plugins like Java and Flash Player can provide more network capabilities than JavaScript, including opening raw network sockets and performing DNS requests.
  - Projects such as Illuminati [25] and ICSI Netalyzer [28] used Java applets to identify proxies, NAT devices, and other network vulnerabilities.

#### SSL Tamper Detection Method

In this section, we present a new method for detecting SSL MITM attacks from the website's perspective, without requiring modifications to current browsers.

**Threat Model:**
- We consider an active network attacker who controls the victim’s network connection but does not have access to the website’s internal machines or private keys.
- The attacker aims to read encrypted messages between the client and the HTTPS website, possibly using a trusted or untrusted certificate.
- Users are assumed to use up-to-date browsers and may ignore security warnings, making them vulnerable to untrusted certificates.

**Design:**
- To detect SSL MITM attacks, we observe the server's certificate from the client's perspective. If the client receives a certificate that does not match the website’s legitimate certificate, it indicates tampering.
- We use browser plugins (e.g., Flash Player or Java) to implement a client-side applet that performs an SSL handshake and reports the observed certificate chain.
- The applet opens a socket connection to the HTTPS server, performs the SSL handshake, records the responses, and sends the certificate chain to our logging servers.

**Implementation:**
- We implemented the client-side applet for both Flash Player and Java plugins. The SWF file (2.1 KB) was slightly smaller and less obtrusive to users, so we deployed it on Facebook’s servers.
- The applet loads on a small portion of Facebook’s desktop website connections, ensuring minimal impact on page loading times.

By deploying this method, we aim to detect SSL MITM attacks and enhance the security of SSL connections.