# 3. 读取数据

```c
DWORD dwReadLength;
ReadFile(hFile, pszBuffer, fileSize, &dwReadLength, NULL);
```

# 4. 释放内存

```c
free(pszBuffer);
```

# 5. 关闭文件

```c
CloseHandle(hFile);
return 0;
}
```

## 滴水逆向课程笔记 - Win32 文件系统 - 112

### 22.3.6 查找文件

`FindFirstFile` 和 `FindNextFile` 函数用于查找文件。其语法格式如下：

```c
HANDLE FindFirstFile(
  LPCTSTR lpFileName,               // 文件名
  LPWIN32_FIND_DATA lpFindFileData  // 找到的文件数据
);

BOOL FindNextFile(
  HANDLE hFindFile,                // 搜索句柄
  LPWIN32_FIND_DATA lpFindFileData // 存放找到的文件数据
);
```

示例代码：

```c
WIN32_FIND_DATA firstFile;
WIN32_FIND_DATA nextFile;

// 在C盘下搜索.txt后缀的文件
HANDLE hFile = FindFirstFile(TEXT("C:\\*.txt"), &firstFile);
if (hFile != INVALID_HANDLE_VALUE) {
    printf("第一个文件名: %s 文件大小: %d\n", firstFile.cFileName, firstFile.nFileSizeLow);
    
    // 使用FindNextFile寻找下一个文件
    while (FindNextFile(hFile, &nextFile)) {
        printf("文件名: %s 文件大小: %d\n", nextFile.cFileName, nextFile.nFileSizeLow);
    }
    
    CloseHandle(hFile);
}
```

## 滴水逆向课程笔记 - Win32 内存映射文件 - 114

### 23. 内存映射文件

#### 23.1 什么是内存映射文件

内存映射文件将硬盘上的某个文件映射到物理页，然后再将物理页映射到虚拟内存中。优点包括：
- 访问文件就像访问内存一样简单。
- 当文件过大时，性能优于普通I/O访问。

#### 23.2 内存映射文件读写

使用 `CreateFileMapping` 函数可以创建内存映射文件。以下是一个示例代码，读取文件的第一个字节：

```c
DWORD MappingFile(LPSTR lpcFile) {
    HANDLE hFile;
    HANDLE hMapFile;
    LPVOID lpAddr;

    // 1. 创建文件（获取文件句柄）
    hFile = CreateFile(lpcFile, GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
    if (hFile == INVALID_HANDLE_VALUE) {
        printf("CreateFile failed: %d \n", GetLastError());
        return 0;
    }

    // 2. 创建FileMapping对象
    hMapFile = CreateFileMapping(hFile, NULL, PAGE_READWRITE, 0, 0, NULL);
    if (hMapFile == NULL) {
        printf("CreateFileMapping failed: %d \n", GetLastError());
        CloseHandle(hFile);
        return 0;
    }

    // 3. 物理页映射到虚拟内存
    lpAddr = MapViewOfFile(hMapFile, FILE_MAP_COPY, 0, 0, 0);
    if (lpAddr == NULL) {
        printf("MapViewOfFile failed: %d \n", GetLastError());
        CloseHandle(hMapFile);
        CloseHandle(hFile);
        return 0;
    }

    // 4. 读取文件
    DWORD dwTest1 = *(LPDWORD)lpAddr; // 读取最开始的4字节
    printf("dwTest1: %x \n", dwTest1);

    // 5. 关闭资源
    UnmapViewOfFile(lpAddr);
    CloseHandle(hFile);
    CloseHandle(hMapFile);
    return 0;
}

int main() {
    MappingFile(TEXT("C:\\A.txt"));
    return 0;
}
```

### 23.3 内存映射文件之共享

内存映射文件可以让两个进程同时共享一个文件。以下是一个示例代码，A进程写入，B进程读取：

**写入代码：**

```c
#define MAPPINGNAME "Share File"

DWORD MappingFile(LPSTR lpcFile) {
    HANDLE hFile;
    HANDLE hMapFile;
    LPVOID lpAddr;

    // 1. 创建文件（获取文件句柄）
    hFile = CreateFile(lpcFile, GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
    if (hFile == INVALID_HANDLE_VALUE) {
        printf("CreateFile failed: %d \n", GetLastError());
        return 0;
    }

    // 2. 创建FileMapping对象
    hMapFile = CreateFileMapping(hFile, NULL, PAGE_READWRITE, 0, 0, MAPPINGNAME);
    if (hMapFile == NULL) {
        printf("CreateFileMapping failed: %d \n", GetLastError());
        CloseHandle(hFile);
        return 0;
    }

    // 3. 物理页映射到虚拟内存
    lpAddr = MapViewOfFile(hMapFile, FILE_MAP_ALL_ACCESS, 0, 0, 0);
    if (lpAddr == NULL) {
        printf("MapViewOfFile failed: %d \n", GetLastError());
        CloseHandle(hMapFile);
        CloseHandle(hFile);
        return 0;
    }

    // 4. 写文件
    *(LPDWORD)lpAddr = 0x41414142;
    FlushViewOfFile(((LPDWORD)lpAddr), 4);
    printf("Process A Write\n");
    getchar();

    // 5. 关闭资源
    UnmapViewOfFile(lpAddr);
    CloseHandle(hFile);
    CloseHandle(hMapFile);
    return 0;
}
```

**读取代码：**

```c
#define MAPPINGNAME "Share File"

DWORD MappingFile(LPSTR lpcFile) {
    HANDLE hMapFile;
    LPVOID lpAddr;

    // 1. 打开FileMapping对象
    hMapFile = OpenFileMapping(FILE_MAP_ALL_ACCESS, FALSE, MAPPINGNAME);
    if (hMapFile == NULL) {
        printf("OpenFileMapping failed: %d \n", GetLastError());
        return 0;
    }

    // 2. 物理页映射到虚拟内存
    lpAddr = MapViewOfFile(hMapFile, FILE_MAP_ALL_ACCESS, 0, 0, 0);
    if (lpAddr == NULL) {
        printf("MapViewOfFile failed: %d \n", GetLastError());
        CloseHandle(hMapFile);
        return 0;
    }

    // 3. 读取文件
    DWORD dwTest1 = *(LPDWORD)lpAddr; // 读取最开始的4字节
    printf("dwTest1: %x \n", dwTest1);
    printf("Process B Read\n");
    getchar();

    // 4. 关闭资源
    UnmapViewOfFile(lpAddr);
    CloseHandle(hMapFile);
    return 0;
}
```

### 23.4 内存映射文件之写拷贝

写拷贝机制可以在多进程之间共享同一块物理页，但当一个进程写入时会拷贝一个新的物理页进行写操作。这样不会影响原本的文件内容。

## 滴水逆向课程笔记 - Win32 静态链接库 - 122

### 24. 静态链接库

静态链接库是软件模块化的一种解决方案。它允许将多个模块组合成一个可执行文件。

#### 24.1 编写静态链接库文件

在VC6中创建静态链接库项目：
- 创建项目A，然后新建 `A.cpp` 和 `A.h`。
- 在 `A.h` 中声明一个 `add` 方法，在 `A.cpp` 中实现该方法。
- 编译后生成 `A.lib` 文件。

#### 24.2 静态链接库的使用

静态链接库的使用有两种方法：
- **项目根目录**：将生成的 `.h` 和 `.lib` 文件复制到项目根目录，然后在代码中引用。
- **VC6安装目录**：将 `.h` 和 `.lib` 文件复制到VC6安装目录，然后在工程设置中添加。

#### 24.3 静态链接库的缺点
- 生成的可执行文件体积较大。
- 包含相同的公共代码，造成浪费。

## 滴水逆向课程笔记 - Win32 动态链接库 - 128

### 25. 动态链接库

动态链接库弥补了静态链接库的缺点。以下是如何创建和使用动态链接库：

#### 25.1 创建动态链接库

##### 25.1.1 extern的方式

- 创建一个新的类 `MyDLL`，自动生成 `MyDLL.h` 和 `MyDLL.cpp`。
- 在 `MyDLL.h` 中声明接口（函数），格式如下：

```c
extern "C" __declspec(dllexport) 调用约定 返回类型 函数名(参数列表);
```

- 在 `MyDLL.cpp` 中实现方法，需要在开头写上一致的调用约定。
- 编译后在 `Debug` 目录生成 `B.dll` 文件。

希望这些优化后的文本能够帮助你更好地理解和使用相关技术。