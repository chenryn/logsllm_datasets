even though they are not present in the CFG.
C. Weaknesses
CFI restricts control-ﬂow transfers based on a ﬁnite, static
CFG. As a result, even in its ideal form it cannot guarantee that
a function call returns to the call site responsible for the most
recent invocation to the function. For example, in Fig. 1 the
CFI check before the ret in function sort cannot enforce that
the function is returning to its caller, but only that it returns to
one of its legitimate callers in the CFG. In this case, functions
sort_1 and sort_2.
Limiting the number of IDs used and applying CFI more
loosely to improve performance and accommodate imperfect
CFGs, further reduces its precision. Figure 2 shows the CFG
from Fig. 1, along with the corresponding CFI checks using
only two IDs, much like bin-CFI and CCFIR. The new dashed
arrows show control-ﬂow transfers that are not part of the CFG
but are still permissible because all return addresses share the
577
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:49 UTC from IEEE Xplore.  Restrictions apply. 




TABLE II: We name gadgets based on their type (preﬁx),
payload (body), and exit instruction (sufﬁx). In total, we name
2×3×3=18 different gadget types.


























(a) Traditional gadgets.
(b) Gadgets under CFI.
Fig. 3: Type of gadgets used in code-reuse attacks.
same CFI ID. Over-permissible transfers are also possible with
indirect call and jump instructions. For example, any indirect
call could transfer control to less_than or greater_than.
Undoubtedly, even loose forms of CFI harden binaries
against attacks. Normally, control-hijacking exploits are able
to redirect execution to any instruction in the binary. On x86
architectures, which use variable-length instructions and have
no alignment requirements, an attacker can redirect control to
virtually any executable byte of the program. If we consider
every executable byte as a potential control-ﬂow target, then
CFI blocks more than 98% of these targets [17]. But, is the
remainder 2% enough for attackers exploiting a program?
It
is imperative to question whether loose versions of
CFI actually provide sufﬁcient protection against sophisticated
exploits [1] developed in recent years. The current state-of-
the-art attacks employ ROP to bypass W⊕X protections and
memory leaks to bypass ASLR. Attackers carefully develop
exploits for a particular application and system conﬁguration
to maximize their success rate. The research question in our
work is: can non-ideal versions of CFI withstand such attacks?
III. CODE-REUSE ATTACKS UNDER CFI
This section presents a methodology for performing code-
reuse attacks even when CFI defenses are in place. We model
the strictest rules enforced by the CFI mechanisms listed in
Tab. I, which are the ones of CCFIR, and show how they
can by bypassed. We then proceed to use this methodology to
create a working exploit against Internet Explorer 8 in Sec. IV.
A. Traditional Code-reuse Attacks
ROP exploitation is based on an attacker controlling the
stack of a program. After corrupting the stack and controlling
the return address of an executing function, when the func-
tion returns, control is diverted to a gadget speciﬁed by the
attacker’s payload. Since gadgets are small sequences of code
that end with a ret, similar to the return-oriented gadget
shown in Fig.3a, the attacker can carefully position data on
the stack to make the program jump from gadget to gadget,
chaining together the ﬁnal code. Between gadget addresses,
Gadget type
Preﬁx
CS - Call site
EP - Entry point
Payload instructions
Body
IC - Indirect call
F - Fixed function call
none - Other instructions
Exit instruction
Sufﬁx
R - Return
IC - Indirect call
IJ - Indirect jump
he can place data to be used in a computation, or arguments
for calling a function. Gadgets are usually very simple. For
instance, they may pop elements off the stack, perform a
small computation like an addition, and then execute ret.
Such small chunks of functionality form a virtual instruction
set for the ROP program that can be chained together to
form a program of arbitrary complexity. ROP is an extremely
powerful technique that researchers have shown to be Turing
complete [9]. Extensions of this technique use gadgets that
end with indirect jump or call instructions (e.g., like the jump-
oriented gadget in Fig. 3a) [11], [12], [24].
Creating a working ROP exploit is typically a complex,
multi-step process. It typically starts with a memory disclosure
that allows the attacker to obtain code pointers. Next, the attack
may require a variety of further preparations, such as advanced
heap Feng Shui [25] to pave the way for a dangling pointer
exploit, stack pivoting, and/or buffer overﬂows. In addition, the
attacker needs to identify useful gadgets and construct a ROP
program out of them by setting up the appropriate addresses
and arguments on the (possibly new) stack. Finally, a control
ﬂow diversion should start off the ROP chain.
The fact that ROP attacks have become so popular despite
their complexity demonstrates that attackers will go to great
lengths to exploit a system. In addition, they will develop com-
pilers, gadget harvesters, and other tools to make exploitation
easier [26], [27], [28]. In other words, it is important that
we probe the protection offered by looser forms of CFI very
carefully. If we do not, attackers will.
B. Gadgets in CFI
We identify two new types of gadgets that are available to
attackers under CFI, shown in Fig. 3b. Call-site (CS) gadgets
are blocks of instructions right after a call instruction that
terminate with a return instruction. Entry-point (EP) gadgets
are blocks of instructions starting at a function’s entry point
and ending with an indirect call or jump. Note that there are
other types of accessible gadgets, like blocks of instructions
beginning after call instructions and ending with an indirect
call or jump, but for simplicity we will only focus on the ﬁrst
two types initially.
These new types of gadgets have different properties from
traditional gadgets. For instance, they need to begin at an
allowable control-transfer pointer. Intuitively, this means that
they are going to be larger, both in terms of bytes and
instructions. In Sec. V, we collect and measure their length. As
the length of the gadgets increases, we need to be more careful
when trying to link them together. Primarily, because they
will most probably contain instructions unrelated to the ones
performing the desired functionality. For instance, suppose we
want to load a value from the stack into a register. We still
578
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:49 UTC from IEEE Xplore.  Restrictions apply. 
need to collect the gadgets that have such an effect, but we
must also exclude the ones that include instructions that tamper
with our data on the stack, or that overwrite the contents of
other registers we care about, and so on.
Another consideration is that larger gadgets may include
code branches within them. Branches within gadgets can be
actually considered both a bane and a blessing. If we cannot
control the branching condition, or at least deterministically
know its outcome, it provides an additional side effect that
needs to be considered before using it. However, if the branch
can be controlled, it reveals new possibilities. First, it means
that the functional length of the gadget could be smaller, since
a part of its instructions can be ignored, revealing a smaller,
potentially more valuable gadget. In other cases, it means that a
single gadget can be manipulated to perform different actions
by controlling which path it is actually taking.
Generally, we prioritize gadgets based on their size, exam-
ining smaller ones ﬁrst, as controlling branching conditions is
more complex. Table II provides a guide on how we name the
gadgets available to us under CFI. We elaborate on their use
in the remainder of this section.
C. Locating the Gadgets
Usually the chain of gadgets used in an attack is built
ofﬂine by manually searching for them or using assisting tools
on the vulnerable application and its libraries. The process
is straightforward when the layout of the target program
in memory is the same on each run. However, ASLR is
now becoming more broadly adopted, so predetermining the
location of any component in the targeted program is no longer
possible.
Attackers have begun using two-stage attacks [29], where
they ﬁrst attempt to learn some information regarding the
layout of the target application, and then use that information
to ﬁx the location of their gadgets in the payload. This can
also become part of a compound exploit that patches itself
with the discovered locations [21]. As mentioned earlier, the
ﬁrst stage is usually facilitated by the existence of a memory
disclosure bug in the vulnerable application. In their simplest
version, such bugs disclose the address of one or more modules
loaded in the address space of the victim process, containing
gadgets that can be used by the attacker. Bugs of different
severity can disclose different amounts of information and of
different importance. For example, Snow et al. [5] have shown
that even advanced memory inspection is possible, enabling the
compilation of an exploit at run time.
Alternatively, previous work has shown that
is also
possible to brute-force attack a randomized executable [30],
while we have also seen attacks exploiting the fact that one of
the modules does not support ASLR [31] (security is only as
strong as the weakest link).
it
The ideal CFI does not require nor is affected by ASLR.
However, because in practical versions of CFI the rules are
relaxed, ASLR becomes a key component. CCFIR even takes
an extra step and proposes an additional level of random-
ization [16]. For each module, indirect control-ﬂow transfers
are redirected through a special springboard section and CFI
checks are actually implemented by checking that the target of
579














Fig. 4: Common gadgets used for performing function calls.
From left-to-right, we show two CS gadgets, the ﬁrst including
an indirect call (IC) and the second a ﬁxed-address (F) call,
both ending with a return (R). The last is an entry-point EP
gadget containing an IC and ending with a return.
a transfer is a valid entry in that section. This includes checking
for the three different targets (i.e., IDs) supported. Each entry
is 8 or 16 bytes long, and their location within the springboard
is randomized at load time. As a result, with CCFIR in play an
attacker also needs to identify the location of the appropriate
entries in the springboard instead of the location of modules.
Admittedly, this additional randomization requires more of the
attacker, who now would need to exﬁltrate both the address of
a module, as well as instructions within the module that point
to the desired springboard entries.
We should emphasize that ASLR has been one of the most
important security features introduced in the last decade and
has signiﬁcantly raised the bar for attackers. However, even
though we have not seen powerful memory inspection attacks,
such as the one described by Snow et al., yet, the sophistication
of attacks is increasing, and we have witnessed a plethora of
real exploits using memory disclosure bugs to bypass ASLR.
This paper does not focus on bypassing ASLR. We simply aim
to show that given ASLR, DEP, and a loose CFI mechanism
code-reuse attacks are still possible, which we demonstrate
with a real one-year old exploit in Sec. IV. Therefore, we
assume that the attacker has an exploit that grants him the
ability to disclose some addresses from the application, and
we want to determine, after bypassing ASLR, how hard it is
to overcome CFI defenses.
D. Calling Functions
Being able to call a function is crucial functionality for
executing an attack. We have the following options under CFI.
1) Through Indirect Calls: Consulting the last row in
Tab. I, we notice that indirect call instructions are always
allowed to jump to certain functions, i.e., non-sensitive func-
tions that are either exported by a module, or called through
a pointer. So, if we control the target of a call instruction,
because of the exercised exploit or otherwise, we can imme-
diately call them, launching a return-to-libc attack. The looser
the CFI model (e.g., sensitive functions are not distinguished
from nonsensitive), the more functions we can call this way.
2) Calling through Gadgets: We can extend the set of
functions we can call and how we call them (e.g., also through
ret and indirect jmp instructions) by using special gadgets
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:49 UTC from IEEE Xplore.  Restrictions apply. 










































Fig. 5: Different ways of linking gadgets.
like the ones shown in Fig. 4. Essentially, we look for gadgets
that include an indirect or ﬁxed function call in their body.
For example, redirecting a function return to a CS-IC-R gadget
where we control the operand to the indirect call, allows us
to use the indirect call within the gadget as discussed above
(Sec. III-D1). Most importantly, gadgets that include ﬁxed calls
enable us to also call sensitive functions, since there are no
CFI checks before direct calls and we can legitimately transfer
control to a CS-F-R gadget.
E. Linking Gadgets
We cannot link the gadgets available to us in arbitrary ways,
since not all control-ﬂow transfers are permitted (Tab. I). If we
control the stack and a return instruction, then we can transfer
control to a CS gadget, and set up the stack to chain multiple
gadgets of the same type together, as in Fig. 5a. On the other
hand, if we ﬁrst receive control with a call instruction, we
can only link EP gadgets, essentially performing call-oriented
programming (COP), like in Fig. 5b. Finally, if we control a
jump instruction, then based on which CFI model is applied
(e.g., CCFIR vs. bin-CFI) we can link CS or EP gadgets.
In certain cases, we may not be able to locate every
functionality required in a chain solely composed of CS- or EP-
gadgets, and need to link both types of gadgets. Fortunately,
there are ways to switch from one gadget type to another.
To switch from a chain of EP gadgets to CS gadgets, we
actually need to locate an EP-IC-R gadget that calls another
function through an indirect call, like in Fig. 5c. We need to
carefully select the called and caller functions, so that they
make erroneous assumptions with regard to the number of
arguments pushed in the stack or the calling convention used
(e.g., which one is responsible for popping elements from the
stack), with the end goal of corrupting the stack when the
called function returns, so we control the next return address.
When the EP-IC-R gadget returns, we can redirect control to
a CS gadget. The reverse process, shown in Fig. 5d, is more
forthright. We link a CS gadget to a CS-IC gadget, where we
control the operand of an indirect call. We can use that to
redirect control to an EP gadget.
Successfully linking different gadgets depends on our abil-
ity to identify the data used and set by gadgets. We say,
a gadget uses data in registers or memory when one of its
instructions uses the data before it is set. On the other hand,
set data refers to any data in registers or memory that are set by
the gadget before exiting. This is similar to the deﬁnitions used
in variable liveness analysis [32]. We can use static analysis
methods to locate which gadgets can be connected, however
this may not be necessary, if the size of the gadgets is relatively
small (see Sec. V).
Similarly, calling a function in a gadget chain, depends on
our ability to set up its arguments on the stack. We achieve
this by linking available gadgets to move arguments from
the controlled buffer to the appropriate registers or memory
locations. Moreover, we need to ﬁnd gadgets that preserve