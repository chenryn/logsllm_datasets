### Signed CVEs and Detection Effectiveness

Out of the identified vulnerabilities, 28 were assigned CVEs, with 26 of them being confirmed and 2 fixed by maintainers. Compared to existing methods, which have a detection rate of up to 35.71%, ReDoSHunter demonstrates superior effectiveness in identifying unknown ReDoS vulnerabilities in real-world projects.

### 5 Related Work

Recently, there has been significant interest in automated techniques for detecting algorithmic complexity vulnerabilities (ACV) [3, 5–7, 13, 23, 27, 28, 31, 33, 38, 46]. This paper focuses on the automatic detection of Regular Expression Denial of Service (ReDoS) [18, 21, 48], a specific class of ACV. Below, we present the most relevant work in the detection and defense against ReDoS attacks.

#### 5.1 ReDoS Detection

Several works [22, 35–37, 42, 43, 47, 49] aim to detect potential ReDoS vulnerabilities. These can be broadly classified into two paradigms: static analysis [22, 35, 36, 47, 49] and dynamic analysis [37, 42, 43].

**Static Analysis:**

Approaches in this category [22, 35, 36, 47, 49] primarily detect ReDoS vulnerabilities by transforming regular expressions into self-defined models and identifying vulnerable constructs statically. These methods are known for their high efficiency.

- **RXXR2 [35, 36]:** This static analysis tool extends RXXR [22] by transforming the given regular expression into a power DFA and searching for attack strings. However, it does not support many extensions (e.g., lookarounds, backreferences) and is limited to polynomial ReDoS vulnerabilities, making it less effective.
- **Rexploiter [49]:** This approach combines NFA complexity analysis with sanitization-aware taint analysis. It excludes uncontrolled user-input regexes but lacks support for many extensions.
- **Safe-regex [14]:** This tool detects ReDoS by checking for patterns like NQ or counting Kleene-Stars. While efficient, it misses many ReDoS patterns.
- **NFAA [47]:** This method supports some extensions like lookarounds and non-capturing groups but fails to handle backreferences.

**Dynamic Analysis:**

Dynamic-based approaches [37, 42, 43] detect ReDoS vulnerabilities at runtime and are generally known for their high precision compared to static analysis. Most tools use dynamic fuzzing, continuously searching for time-consuming strings using an actual regex engine to infer worst-case time complexity.

- **SDL [42, 43]:** This tool tests regex matching times against randomly generated strings but lacks support for many extensions, reducing its effectiveness.
- **Rescue [37]:** Designed to search for time-consuming strings, Rescue can only identify exponential or higher polynomial ReDoS vulnerabilities. Its effectiveness is also affected by the initialization, leading to unstable results. Additionally, it outputs random attack strings without providing insights into the root causes of ReDoS vulnerabilities.

#### 5.2 ReDoS Prevention or Alleviation

Various techniques [2, 10, 11, 16, 17, 19, 24, 25, 29, 30, 32, 34, 44, 45, 50] have been proposed to prevent or alleviate ReDoS attacks through equivalent or approximate regex transformation or regex matching speedup.

**Equivalent/Approximate Regex Transformation:**

These works [10, 11, 24, 45] aim to find equivalent or approximate ReDoS-invulnerable regexes to replace vulnerable ones. However, exact equivalence is often too strict in practice [14, 37], limiting their deployment. Chida and Terauchi [10], and Li et al. [24] address this by using programming-by-example algorithms, but the quality of the anti-ReDoS regexes depends heavily on the quality of user-provided examples.

**Regex Matching Speedup:**

ReDoS attacks can also be mitigated by speeding up regex matching, such as through parallel algorithms [25], GPU-based algorithms [50], state-merging algorithms [2], Parsing Expression Grammars (PEGs) [17, 19, 29], counting automata matching algorithms [44], memoization-based optimization [16], and recursion-limit/backtracking-limit/time-limit [30, 32, 34]. These methods can alleviate ReDoS issues but do not resolve the underlying vulnerable regexes, leaving them still susceptible to attacks.

### 6 Discussion

Despite the remarkable effectiveness of ReDoSHunter, there are areas for improvement:

1. **Support for More Extensions:** ReDoSHunter currently supports most commonly used extensions but does not consider less common ones like conditional statements. These can be supported with suitable preprocessing.
2. **Support for More Characters:** ReDoSHunter supports common characters, including Unicode characters from U+0000 to U+FFFF. For characters beyond this range, additional preprocessing may be required.

### 7 Conclusion

In this paper, we introduced ReDoSHunter, a framework for detecting ReDoS-vulnerable regular expressions that can pinpoint multiple root causes and generate attack-triggering strings. By combining static and dynamic analysis, ReDoSHunter achieves a balance between precision and recall, achieving 100% precision and 100% recall over three large-scale datasets in experiments. It successfully identified all confirmed CVEs caused by ReDoS and exposed 28 new ReDoS vulnerabilities in popular open-source projects, with 26 assigned CVEs and 2 fixed by maintainers. We hope our work provides insights into reasoning about ReDoS vulnerabilities and sheds light on the automatic or semi-automatic repair of ReDoS-vulnerable regexes.

### Acknowledgment

The authors would like to thank Adam Goldschmidt, Asaf Biton, Assaf Ben Josef, Benji Kalman, Colin Ife, George Gkitsas, Gur Shafriri, Hadas Bloom, Leeya Shaltiel, and Sam Sanoop from the Snyk Security Research Group for their efforts in confirming and assigning CVEs. We also thank the anonymous reviewers for their valuable feedback. This work is supported in part by the National Natural Science Foundation of China (Grants #61872339, #61472405, #61932021, #61972260, #61772347, #61836005), the National Key Research and Development Program of China (Grant #2019YFE0198100), the Guangdong Basic and Applied Basic Research Foundation (Grant #2019A1515011577), the Huawei PhD Fellowship, and the MSRA Collaborative Research Grant.

### References

[References are listed as provided, with no changes made.]

---

This version of the text is more structured, clear, and professional, with improved readability and coherence.