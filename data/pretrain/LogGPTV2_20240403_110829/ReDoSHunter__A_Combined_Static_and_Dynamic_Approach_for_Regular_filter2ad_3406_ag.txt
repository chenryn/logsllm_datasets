signed CVEs or 2 of them were ﬁxed by maintainers. Com-
pared with existing works among which the best method
can only detect 35.71%, ReDoSHunter is more effective in
ﬁnding unknown ReDoS-vulnerabilities in the real-world
projects.
5 Related Work
Recently, there has been signiﬁcant interests in automated
techniques for detecting the algorithmic complexity vulner-
abilities (ACV) [3, 5–7, 13, 23, 27, 28, 31, 33, 38, 46]. In this
paper, we focus on automatic detection on Regular expression
Denial of Service (ReDoS) [18, 21, 48], which is a class of
ACV. In the following, we present the most related work in
the detection and defending of ReDoS attacks.
5.1 ReDoS Detection
There are several works [22, 35–37, 42, 43, 47, 49] targeting
at detecting potential ReDoS-vulnerabilities, which can be
mainly classiﬁed into two paradigms: static analysis [22, 35,
36, 47, 49] and dynamic analysis [37, 42, 43], as we discuss
below.
Static Analysis. Approaches [22, 35, 36, 47, 49] falling
into this paradigm mainly detect ReDoS-vulnerabilities by
3860    30th USENIX Security Symposium
USENIX Association
transforming the regexes into their self-deﬁned models, and
identifying ReDoS-vulnerable constructs from the models
statically. These approaches are known for high efﬁciency.
RXXR2 [35, 36] is a static analysis tool extended from
RXXR [22]. It transforms the given regex into their proposed
power DFA, and searches the attack string on top of the power
DFA. However, most of extensions (e.g., lookarounds, and
backreferences) are not supported by RXXR2. Also regexes
with polynomial ReDoS-vulnerabilities are beyond its scope,
while most of the ReDoS-vulnerable regexes are polynomial
in the wild [14]. These limitations make it less effective. An-
other approach, Rexploiter [49], detects ReDoS-vulnerable
regexes by combining complexity analysis of NFAs with
sanitization-aware taint analysis. Though it provides an extra
function (i.e., excluding user-input uncontrolled regexes), it
does not supports most of the extensions (e.g., lookarounds,
backreferences, and non-capturing groups). The tool safe-
regex [14] conducts detection by identifying whether the pat-
tern NQ is triggered, or the number of Kleene-Star is greater
than a preset threshold. Though such pattern matching ap-
proach runs efﬁciently, there are more ReDoS patterns which
fall beyond its capability. On the other hand, NFAA [47]
can support extensions like lookarounds and non-capturing
groups, yet it fails to support backreferences.
Dynamic Analysis. Dynamic-based approaches [37, 42,
43] detect ReDoS-vulnerabilities at run time, usually known
for high precision compared with static analysis. Most dy-
namic analysis tools use dynamic fuzzing, which constantly
search time-consuming strings with an actual regex engine,
and from these to infer the regex’s worst-case time complexity.
SDL [42, 43] detects ReDoS by testing the matching time of
regexes against a range of randomly-generated strings. Yet
it does not support most extensions (e.g., anchors \b and \B,
lazy quantiﬁers, lookarounds, backreferences, etc), making
it less capable. Instead of generating random strings, Res-
cue [37] is designed for searching time-consuming strings.
Due to the enormous string search space, it can only identify
exponential or higher polynomial ReDoS-vulnerabilities, but
is unable to detect lower polynomial ReDoS-vulnerabilities
or deeply hided ReDoS-vulnerabilities. On the other hand, the
effectiveness of genetic searching is also affected by the ini-
tialization, making result unstable at each run. Moreover, these
dynamic-based approaches output a random attack string that
does not provide any insight into the root causes of the ReDoS-
vulnerability.
imate ReDoS-invulnerable regexes to replace the ReDoS-
vulnerable ones. Among them, Van der Merwe et al. [45]
and Cody-Kenny et al. [11] devote to ﬁnding equivalent
ReDoS-invulnerable regexes to replace the original ones.
However, their use of exact equivalence is too strong in prac-
tice [14, 37], which limits their deployment to real-world ap-
plications. Chida and Terauchi [10], and Li et al. [24] ad-
dress this problem by deducing anti-ReDoS regexes adopting
programming-by-example algorithms. Yet the quality of anti-
ReDoS regex deduced by them highly depends on the quality
of user-provided examples.
Regex Matching Speedup. ReDoS attacks can also be
alleviated by regex matching speedup, which is an alterna-
tive solution in some special cases, e.g., by parallel algo-
rithms [25], GPU-based algorithms [50], state-merging algo-
rithms [2], Parsing Expression Grammars (PEGs) [17, 19, 29],
counting automata matching algorithm [44], memoization-
based optimization [16] and recursion-limit/backtracking-
limit/time-limit [30,32,34]. These works can alleviate ReDoS-
vulnerability issues, yet they do not resolve the ReDoS-
vulnerable regexes themselves, leaving them still subjecting
to ReDoS attacks.
6 Discussion
Despite the remarkable effectiveness of ReDoSHunter, we no-
tice there are still room for improvement. First, Supports for
more extensions. ReDoSHunter can support most commonly-
used extensions, while for those that are not commonly used
such as conditional statements, ReDoSHunter does not con-
sider them currently. However, they can be supported with
suitable preprocessing. For example, for the regex with con-
ditional statement (r1)?(?(1)r2|r3), it can be transformed
to an over-approximate conditional statement-free regex and
some external constraints so that ReDoSHunter can handle
it. Second, Supports for more characters. Currently, Re-
DoSHunter supports common characters including unicode
characters ranging from U+0000—U+FFFF, which can cover
the most characters used in practice. While for characters
falling beyond this range, ReDoSHunter may not detect them.
This limitation can also be solved by an appropriate prepro-
cess.
7 Conclusion
5.2 ReDoS Prevention or Alleviation
Various techniques [2, 10, 11, 16, 17, 19, 24, 25, 29, 30, 32, 34,
44, 45, 50] have been proposed to prevent or alleviate ReDoS
attacks either by equivalent/approximate regex transformation
or regex matching speedup.
Equivalent/Approximate Regex Transformation. This
series of works [10, 11, 24, 45] try to ﬁnd equivalent/approx-
In this paper, we proposed ReDoSHunter, a ReDoS-vulnerable
regex detection framework that can pinpoint multiple root
causes of vulnerabilities and generate attack-triggering strings.
It takes advantages of static and dynamic analysis, achieving
a remarkable balance between precision and recall, reach-
ing 100% precision and 100% recall over three large-scale
datasets in the experiments. It successfully identiﬁed all the
conﬁrmed CVEs that are caused by ReDoS, and exposed 28
USENIX Association
30th USENIX Security Symposium    3861
new ReDoS-vulnerabilities in popular open-source projects
with 26 assigned CVEs and 2 ﬁxed by the maintainers. We
hope our work may provide insights of reasoning about the
ReDoS-vulnerabilities, and shed lights on the automatic or
semi-automatic ReDoS-vulnerable regex repair.
Acknowledgment
The authors would like to thank Adam Goldschmidt, Asaf
Biton, Assaf Ben Josef, Benji Kalman, Colin Ife, George Gkit-
sas, Gur Shafriri, Hadas Bloom, Leeya Shaltiel, Sam Sanoop
from Snyk Security Research Group for their great efforts
on conﬁrming and assigning CVEs. Also, the authors would
like to thanks the anonymous reviewers for their helpful feed-
back. This work is supported in part by National Natural
Science Foundation of China (Grants #61872339, #61472405,
#61932021, #61972260, #61772347, #61836005), National
Key Research and Development Program of China under
Grant #2019YFE0198100, Guangdong Basic and Applied
Basic Research Foundation under Grant #2019A1515011577,
Huawei PhD Fellowship, and MSRA Collaborative Research
Grant.
References
[1] Alberto Bartoli, Andrea De Lorenzo, Eric Medvet, and
Fabiano Tarlao. Inference of Regular Expressions for
Text Extraction from Examples. IEEE Trans. Knowl.
Data Eng., 28(5):1217–1230, 2016.
[2] Michela Becchi and Srihari Cadambi. Memory-Efﬁcient
Regular Expression Search Using State Merging. In
INFOCOM 2007. 26th IEEE International Conference
on Computer Communications, Joint Conference of the
IEEE Computer and Communications Societies, 6-12
May 2007, Anchorage, Alaska, USA, pages 1064–1072.
IEEE, 2007.
[3] William Blair, Andrea Mambretti, Sajjad Arshad,
Michael Weissbacher, William Robertson, Engin Kirda,
and Manuel Egele. HotFuzz: Discovering Algorith-
mic Denial-of-Service Vulnerabilities Through Guided
Micro-Fuzzing. In 27th Annual Network and Distributed
System Security Symposium, NDSS 2020, San Diego,
California, USA, February 23-26, 2020. The Internet
Society, 2020.
[4] The Cloudﬂare Blog.
Details of
ﬂare outage on July 2, 2019, 2020.
//blog.cloudflare.com/details-of-the-cloud
flare-outage-on-july-2-2019/.
the Cloud-
https:
[5] Jacob Burnim, Sudeep Juvekar, and Koushik Sen. WISE:
Automated test generation for worst-case complexity. In
31st International Conference on Software Engineer-
ing, ICSE 2009, May 16-24, 2009, Vancouver, Canada,
Proceedings, pages 463–473, 2009.
[6] Xiang Cai, Yuwei Gui, and Rob Johnson. Exploiting
Unix File-System Races via Algorithmic Complexity
Attacks. In 30th IEEE Symposium on Security and Pri-
vacy (S&P 2009), 17-20 May 2009, Oakland, California,
USA, pages 27–41, 2009.
[7] Richard M. Chang, Guofei Jiang, Franjo Ivancic, Sri-
ram Sankaranarayanan, and Vitaly Shmatikov. Inputs
of Coma: Static Detection of Denial-of-Service Vulner-
abilities. In Proceedings of the 22nd IEEE Computer
Security Foundations Symposium, CSF 2009, Port Jef-
ferson, New York, USA, July 8-10, 2009, pages 186–199,
2009.
[8] Carl Chapman and Kathryn T. Stolee. Exploring Regular
Expression Usage and Context in Python. In Proceed-
ings of the 25th International Symposium on Software
Testing and Analysis, ISSTA 2016, Saarbrücken, Ger-
many, July 18-20, 2016, pages 282–293, 2016.
[9] Carl Chapman, Peipei Wang, and Kathryn T. Stolee. Ex-
ploring Regular Expression Comprehension. In Proceed-
ings of the 32nd IEEE/ACM International Conference
on Automated Software Engineering, ASE 2017, Urbana,
IL, USA, October 30 - November 03, 2017, pages 405–
416, 2017.
[10] Nariyoshi Chida and Tachio Terauchi. Automatic
Repair of Vulnerable Regular Expressions. CoRR,
abs/2010.12450, 2020.
[11] Brendan Cody-Kenny, Michael Fenton, Adrian Ron-
ayne, Eoghan Considine, Thomas McGuire, and Michael
O’Neill. A Search for Improved Performance in Reg-
ular Expressions. In Proceedings of the Genetic and
Evolutionary Computation Conference, GECCO 2017,
Berlin, Germany, July 15-19, 2017, pages 1280–1287,
2017.
[12] The MITRE Corporation. Common Vulnerabilities and
Exposures (CVE), 2020. https://cve.mitre.org/
index.html.
[13] Scott A. Crosby and Dan S. Wallach. Denial of Service
via Algorithmic Complexity Attacks. In Proceedings
of the 12th USENIX Security Symposium, Washington,
D.C., USA, August 4-8, 2003, 2003.
[14] James C. Davis, Christy A. Coghlan, Francisco Servant,
and Dongyoon Lee. The Impact of Regular Expression
Denial of Service (ReDoS) in Practice: An Empirical
Study at the Ecosystem Scale. In Proceedings of the
2018 ACM Joint Meeting on European Software Engi-
neering Conference and Symposium on the Foundations
3862    30th USENIX Security Symposium
USENIX Association
of Software Engineering, ESEC/SIGSOFT FSE 2018,
Lake Buena Vista, FL, USA, November 04-09, 2018,
pages 246–256, 2018.
[15] James C. Davis, Louis G. Michael IV, Christy A. Cogh-
lan, Francisco Servant, and Dongyoon Lee. Why Aren’t
Regular Expressions a Lingua Franca? An Empirical
Study on the Re-use and Portability of Regular Expres-
sions.
In Proceedings of the ACM Joint Meeting on
European Software Engineering Conference and Sym-
posium on the Foundations of Software Engineering,
ESEC/SIGSOFT FSE 2019, Tallinn, Estonia, August 26-
30, 2019, pages 443–454, 2019.
[16] James C. Davis, Francisco Servant, and Dongyoon Lee.
Using Selective Memoization to Defeat Regular Expres-
sion Denial of Service (ReDoS). In 2021 IEEE Sympo-
sium on Security and Privacy, SP 2021, San Francisco,
CA, USA, May 23-27, 2021, page To appear, 2021.
[17] Bryan Ford.
Parsing Expression Grammars: A
Recognition-Based Syntactic Foundation. In Proceed-
ings of the 31st ACM SIGPLAN-SIGACT Symposium
on Principles of Programming Languages, POPL 2004,
Venice, Italy, January 14-16, 2004, pages 111–122, 2004.
[18] Jan Goyvaerts. Runaway Regular Expressions: Catas-
https://www.regula
trophic Backtracking, 2020.
r-expressions.info/catastrophic.html.
[19] IBM. Rosie Pattern Language (RPL), 2020. https:
//rosie-lang.org/.
[20] Louis G. Michael IV, James Donohue, James C. Davis,
Dongyoon Lee, and Francisco Servant. Regexes are
Hard: Decision-Making, Difﬁculties, and Risks in Pro-
gramming Regular Expressions.
In 34th IEEE/ACM
International Conference on Automated Software En-
gineering, ASE 2019, San Diego, CA, USA, November
11-15, 2019, pages 415–426, 2019.
[21] Tim Kadlec.
Regular Expression Denial of
Service (ReDoS) and Catastrophic Backtracking,
2017.
https://snyk.io/blog/redos-and-catas
trophic-backtracking/.
[22] James Kirrage, Asiri Rathnayake, and Hayo Thielecke.
Static Analysis for Regular Expression Denial-of-
Service Attacks.
In Network and System Security -
7th International Conference, NSS 2013, Madrid, Spain,
June 3-4, 2013. Proceedings, pages 135–148, 2013.
[23] Caroline Lemieux, Rohan Padhye, Koushik Sen, and
Dawn Song. PerfFuzz: Automatically Generating Patho-
logical Inputs. In Proceedings of the 27th ACM SIG-
SOFT International Symposium on Software Testing and
Analysis, ISSTA 2018, Amsterdam, The Netherlands, July
16-21, 2018, pages 254–265, 2018.
[24] Yeting Li, Zhiwu Xu, Jialun Cao, Haiming Chen,
Tingjian Ge, Shing-Chi Cheung, and Haoren Zhao.
FlashRegex: Deducing Anti-ReDoS Regexes from Ex-
amples. In 35th IEEE/ACM International Conference on
Automated Software Engineering, ASE 2020, Melbourne,
Australia, September 21-25, 2020, pages 659–671, 2020.
[25] Cheng-Hung Lin, Chen-Hsiung Liu, and Shih-Chieh
Chang. Accelerating Regular Expression Matching Us-
ing Hierarchical Parallel Machines On GPU. In Pro-
ceedings of the Global Communications Conference,
GLOBECOM 2011, 5-9 December 2011, Houston, Texas,
USA, pages 1–5. IEEE, 2011.
[26] Doyensec LLC. Regexploit: DoS-able Regular Expres-
sions, 2021. https://github.com/doyensec/rege
xploit.
[27] Kasper Søe Luckow, Rody Kersten, and Corina S.
Pasareanu.
Symbolic Complexity Analysis Using
Context-Preserving Histories. In 2017 IEEE Interna-
tional Conference on Software Testing, Veriﬁcation and
Validation, ICST 2017, Tokyo, Japan, March 13-17, 2017,
pages 58–68, 2017.
[28] Kasper Søe Luckow, Rody Kersten, and Corina S.
Pasareanu. Complexity Vulnerability Analysis Using
Symbolic Execution. Softw. Test. Veriﬁcation Reliab.,
30(7-8), 2020.
[29] Sérgio Medeiros, Fabio Mascarenhas, and Roberto
Ierusalimschy. From Regexes to Parsing Expression
Grammars. Sci. Comput. Program., 93:3–18, 2014.
[30] Microsoft. Regex class - C#, 2020. https://docs.m
icrosoft.com/en-us/dotnet/api/system.text
.regularexpressions.regex?view=net-5.0.
[31] Yannic Noller, Rody Kersten, and Corina S. Pasareanu.
Badger: Complexity Analysis with Fuzzing and Sym-
bolic Execution. In Proceedings of the 27th ACM SIG-
SOFT International Symposium on Software Testing and
Analysis, ISSTA 2018, Amsterdam, The Netherlands, July
16-21, 2018, pages 322–332, 2018.
[32] PCRE. PCRE - Perl Compatible Regular Expressions,
2020. https://pcre.org/.
[33] Theoﬁlos Petsios, Jason Zhao, Angelos D. Keromytis,
SlowFuzz: Automated Domain-
and Suman Jana.
Independent Detection Of Algorithmic Complexity Vul-
nerabilities. In Proceedings of the 2017 ACM SIGSAC
Conference on Computer and Communications Security,
CCS 2017, Dallas, TX, USA, October 30 - November 03,
2017, pages 2155–2168, 2017.
[34] PHP. PHP: preg_match - Manual, 2020. https://www.
php.net/manual/en/function.preg-match.php.
USENIX Association
30th USENIX Security Symposium    3863
[46] Jiayi Wei, Jia Chen, Yu Feng, Kostas Ferles, and Isil
Dillig. Singularity: Pattern Fuzzing for Worst Case
Complexity.
In Proceedings of the 2018 ACM Joint
Meeting on European Software Engineering Conference
and Symposium on the Foundations of Software Engi-
neering, ESEC/SIGSOFT FSE 2018, Lake Buena Vista,
FL, USA, November 04-09, 2018, pages 213–223, 2018.
[47] Nicolaas Weideman, Brink van der Merwe, Martin
Berglund, and Bruce W. Watson. Analyzing Match-
ing Time Behavior of Backtracking Regular Expression
Matchers by Using Ambiguity of NFA. In Implementa-
tion and Application of Automata - 21st International
Conference, CIAA 2016, Seoul, South Korea, July 19-22,
2016, Proceedings, pages 322–334, 2016.
[48] Adar Weidman.
nial of Service
//owasp.org/www-community/attacks/Regul
ar_expression_Denial_of_Service_-_ReDoS.
Regular Expression De-
https:
- ReDoS, 2017.
[49] Valentin Wüstholz, Oswaldo Olivo, Marijn J. H. Heule,
and Isil Dillig. Static Detection of DoS Vulnerabilities
in Programs that Use Regular Expressions. In Tools
and Algorithms for the Construction and Analysis of
Systems - 23rd International Conference, TACAS 2017,
Held as Part of the European Joint Conferences on The-
ory and Practice of Software, ETAPS 2017, Uppsala,
Sweden, April 22-29, 2017, Proceedings, Part II, pages
3–20, 2017.
[50] Xiaodong Yu and Michela Becchi. GPU Acceleration Of
Regular Expression Matching For Large Datasets: Ex-
ploring The Implementation Space. In Hubertus Franke,
Alexander Heinecke, Krishna V. Palem, and Eli Upfal,
editors, Computing Frontiers Conference, CF’13, Ischia,
Italy, May 14 - 16, 2013, pages 18:1–18:10. ACM, 2013.
[35] Asiri Rathnayake. Semantics, Analysis And Security Of
Backtracking Regular Expression Matchers. PhD thesis,
University of Birmingham, UK, 2015.
[36] Asiri Rathnayake and Hayo Thielecke. Static Analysis
for Regular Expression Exponential Runtime via Sub-
structural Logics. CoRR, abs/1405.7058, 2014.
[37] Yuju Shen, Yanyan Jiang, Chang Xu, Ping Yu, Xiaoxing
Ma, and Jian Lu. ReScue: Crafting Regular Expression
DoS Attacks. In Proceedings of the 33rd ACM/IEEE
International Conference on Automated Software Engi-
neering, ASE 2018, Montpellier, France, September 3-7,
2018, pages 225–235, 2018.
[38] Randy Smith, Cristian Estan, and Somesh Jha. Back-
tracking Algorithmic Complexity Attacks against a
NIDS.
In 22nd Annual Computer Security Applica-
tions Conference (ACSAC 2006), 11-15 December 2006,
Miami Beach, Florida, USA, pages 89–98, 2006.
[39] Snyk. The state of open-source security, 2020. https:
//snyk.io/.
[40] Cristian-Alexandru Staicu and Michael Pradel. Freez-
ing the Web: A Study of ReDoS Vulnerabilities in
JavaScript-based Web Servers.
In 27th USENIX Se-
curity Symposium, USENIX Security 2018, Baltimore,
MD, USA, August 15-17, 2018, pages 361–376, 2018.
[41] Stack Exchange Network Status.
Out-
age Postmortem -
https://stackstatus.net/post/147710624694/
outage-postmortem-july-20-2016.
July 20, 2016, 2020.
[42] Bryan Sullivan. New Tool: SDL Regex Fuzzer, 2010.
http://cloudblogs.microsoft.com/microsoftse
cure/2010/10/12/new-tool-sdl-regex-fuzzer.
[43] Bryan Sullivan. Regular Expression Denial of Service
Attacks and Defenses, 2010.
https://docs.micro
soft.com/en-us/archive/msdn-magazine/2010/
may/security-briefs-regular-expression-den
ial-of-service-attacks-and-defenses.
[44] Lenka Turonová, Lukás Holík, Ondrej Lengál, Olli
Saarikivi, Margus Veanes, and Tomás Vojnar. Regex
Matching with Counting-Set Automata. Proc. ACM
Program. Lang., 4(OOPSLA):218:1–218:30, 2020.
[45] Brink van der Merwe, Nicolaas Weideman, and Martin
Berglund. Turning Evil Regexes Harmless. In Proceed-
ings of the South African Institute of Computer Scientists
and Information Technologists, SAICSIT 2017, Thaba
Nchu, South Africa, September 26-28, 2017, pages 38:1–
38:10, 2017.
3864    30th USENIX Security Symposium
USENIX Association