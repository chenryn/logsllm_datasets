WebLogic 提供了许多过滤器，可以将其配置为传入
请求。 
security-permission-spec 
指定应用程序权限。 
security-role-assignment 
明确分配负责人到角色。 
有关 WebLogic 附加部署描述符的更多信息，请参见 weblogic.xml 部署描述符。 
有关保护运行在 WebLogic 中的网络应用程序的一般指南，请参见编程 WebLogic 安
全指南和 NSA 的 BEA WebLogic 平台安全指南
(https://docs.oracle.com/cd/E76441_01/orase/pdf/141/html/security_guide/Outpu
t/secure_appserver.htm)。 
3.5.5 方案配置:J2EE 
用于编程安全性的 J2EE 应用编程接口由 EJBContext 接口和 HttpServletRequest 接
136 
口的方法组成。这些方法允许组件基于调用者或远程用户的安全角色做出业务逻辑决策(也
有验证用户的方法，但这不在安全部署配置的范围内)。 
与 J2EE 安全配置交互的 J2EE 应用编程接口包括: 
⚫ 
getRemoteUser，它确定客户端用来进行身份验证的用户名。 
⚫ 
isUserInRole，用于确定远程用户是否处于特定的安全角色。 
⚫ 
getUserPrincipal，它确定当前用户的主体名称，并返回一个 java.security。 
应审计这些编程接口的使用，以确保与配置一致。具体来说，应该在部署描述符中用角
色名子元素声明 security-role-ref 元素，该子元素包含要传递给 isUserInRole 方法的角色
名。 
下面示例中的代码演示了编程式安全的使用，用于登录以及建立身份和角色。这个
servlet 执行以下操作: 
⚫ 
显示当前用户的信息。 
⚫ 
提示用户登录。 
⚫ 
再次打印信息，展示登录方法的效果。 
⚫ 
注销用户。 
⚫ 
再次打印信息以展示注销方法的效果。 
package enterprise.programmatic_login; 
137 
import java.io.*; 
import java.net.*; 
import javax.annotation.security.DeclareRoles; 
import javax.servlet.*; 
import javax.servlet.http.*; 
@DeclareRoles(“javaee6user”) 
public class LoginServlet extends HttpServlet { 
/** 
* Processes requests for both HTTP GET and POST methods. 
* @param request servlet request 
* @param response servlet response 
*/ 
protected 
void 
processRequest(HttpServletRequest 
request, 
HttpServletResponse 
response) 
throws 
ServletException, IOException { 
response.setContentType(“text/html;charset=UTF-8”); 
PrintWriter out = response.getWriter(); 
try { 
String userName = request.getParameter(“txtUserName”); 
String password = request.getParameter(“txtPassword”); 
out.println(“Before Login” + “”); 
out.println(“IsUserInRole?..” + request.isUserInRole(“javaee6user”)+””); 
out.println(“getRemoteUser?..” + request.getRemoteUser()+””); 
out.println(“getUserPrincipal?..”+ request.getUserPrincipal()+””); 
out.println(“getAuthType?..” + request.getAuthType()+””); 
try { 
request.login(userName, password); 
} catch(ServletException ex) { 
out.println(“Login Failed with a ServletException..” + ex.getMessage()); 
return; 
} 
138 
out.println(“After Login...”+””); 
out.println(“IsUserInRole?..” + request.isUserInRole(“javaee6user”)+””); 
out.println(“getRemoteUser?..” + request.getRemoteUser()+””); 
out.println(“getUserPrincipal?..” + request.getUserPrincipal()+””); 
out.println(“getAuthType?..” + request.getAuthType()+””); 
request.logout(); 
out.println(“After Logout...”+””); 
out.println(“IsUserInRole?..” + request.isUserInRole(“javaee6user”)+””); 
out.println(“getRemoteUser?..” + request.getRemoteUser()+””); 
out.println(“getUserPrincipal?..” + request.getUserPrincipal()+””); 
out.println(“getAuthType?..” + request.getAuthType()+””); 
} finally { 
out.close(); 
} 
} 
... 
} 
更详细的信息可以在 Java EE 教程:使用网络应用程序的编程安全性中找到。 
3.5.6 微软 IIS 
ASP.NET/IIS 应用程序使用一个名为 web.config 的可选的基于 XML 的配置文件来维
护应用程序配置设置。这涵盖了身份验证、授权、错误页面、HTTP 设置、调试设置、web
服务设置等问题。如果不了解这些文件，事务性分析将非常困难并且不准确。 
在 IIS 7 中，有一个配置系统会影响层次结构级别以及一个文件如何从另一个文件继承。 
下图显示了它如何工作以及每个文件的位置（Aguilar，2006 年） 
图：IIS 配置文件 
139 
可以在 web 应用程序的虚拟目录根目录下提供一个 web.config 文件。如果文件不存
在，将使用 machine.config 中的默认配置设置。如果文件存在，则 web.config 将覆盖默
认设置。 
许多重要的安全设置不是在代码中设置的，而是在框架配置文件中设置的。在审计基于
框架的应用程序时，框架知识至关重要。web.config 文件中框架特定参数的一些例子如下
表所示。 
参数 
描述 
authentication 
mode 
默认的身份验证模式是 ASP.NET 基于表单的身份验证。 
140 
loginUrl 
如果找不到有效的身份验证 cookie，则指定将请求重定向到
登录的 URL。 
Protection 
指定使用 3DES 或 DES 对 cookie 进行加密，但不对 cookie
执行 DV。 当心明文攻击。 
timeout 
以分钟计的 cookie 过期时间。 
3.5.7 框架特定配置:微软 IIS 
可以在 IIS 中使用 Web.config(应用程序级)或 ApplicationHost.config(服务器)配置安
全功能 
级别)，在部分。可以配置的功能类型包括: 
⚫ 
允许的认证方法 
⚫ 
授权规则 
⚫ 
请求过滤器和限制 
⚫ 
SSL 的使用 
⚫ 
源 IP 地址过滤 
⚫ 
错误处理 
代码审计中应该包含 Web.config 和 ApplicationHost.config 文件。应审计 
> 部分，以确保所有安全配置都符合预期。 
有关保护 Microsoft IIS 整体配置的指导原则，请参见 IIS 支持基本、客户端证书、摘
要、IIS 客户端证书和 Windows 身份验证方法。它们在  
部分进行配置。 
下面示例中，对名为“我的站点”的站点禁用匿名身份验证，然后同时启用两者站点的
基本身份验证和 windows 身份验证。 
IIS 授权配置允许指定用户对站点或服务器的访问权限，并在 
 部分进行配置。 
142 
下面示例中的配置删除了默认的允许所有用户访问网站或应用程序内容的 IIS 授权设置，
然后配置了只允许具有 Administrators 的用户访问网站的规则。 
IIS 支持对传入的 HTTP 请求进行过滤，包括强制限制。下表显示了许多可以设置的 IIS
安全参数。 
参数 
描述 
denyUrlSequences 
禁止的网址格式列表。 
fileExtensions 
允许或禁止的文件扩展名。 
hiddenSegments 
无法浏览的 URL。 
requestLimits 
URL，内容，查询字符串和 HTTP 标头长度限制。 
verbs 
允许或禁止动词。 
alwaysAllowedUrls 
始终允许的网址。 
143 
alwaysAllowedQueryStrings 
始终允许查询字符串。 
denyQueryStringSequences 
禁止查询字符串。 
filteringRules 
自定义过滤规则。 
这些参数在部分配置。下面的
示例， 
拒绝访问两个网址序列。第一个序列防止目录横向，第二个序列防止访问交替数据流。 
将网址的最大长度设置为 2KB，将查询字符串的最大长度设置为 1KB。拒绝访问未列
出的文件扩展名和未列出的 HTTP 谓词。 