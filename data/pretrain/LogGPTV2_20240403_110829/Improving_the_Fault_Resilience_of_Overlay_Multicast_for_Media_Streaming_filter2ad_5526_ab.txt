may arrive in ﬂash crowds, centralized tree construction ap-
proaches like the BO algorithm or the algorithm used in [9]
are generally limited in scalability; (3) A scheme for pro-
tecting against cheating/malicious behavior. Most of the
previous approaches relying on information such as band-
width or time do not consider the possibility of cheating
behavior, and thus are potentially vulnerable to malicious
attacks. The new scheme should prevent this in an effective
way; and (4) Being simple to implement. Introducing ex-
tra switching operations in addition to basic multicast tree
construction/ﬁxing have been studied in previous work [7].
However, these methods generally require complex node
coordinations. The new approach should consider this prac-
tical issue.
3.2 Basic Idea of ROST
The ROST algorithm uses a simple switching tree tech-
nique to optimize the overlay. The criterion guiding the
switching operation is a metric called Bandwidth-Time
Product (BTP), which is deﬁned as the product of a node’s
outbound bandwidth and its age. The basic idea of the al-
gorithm is to move nodes with large BTPs higher in the tree
so that better service quality (less stream disruptions and
smaller service delay) can be offered to these nodes. Since
Figure 1: Examples of the three types of tree. Darker colors rep-
resent older nodes. The dashed lines represent the regions affected
by a node failure.
recovering from parent failures. This technique focuses on
the selection of recovery nodes.
LER, PRM and Cooperative Patching all use a single
source to recover from upstream node failure, which differs
from our work.
3 The Reliability-Oriented Switching Tree
(ROST) Algorithm
3.1 Analysis of Existing Algorithms
As introduced in Section 2, the reliability of an overlay
multicast tree can be optimized in two ways:
• Depth-optimizing: the tree is optimized in depth. Two
representative algorithms are the minimum-depth al-
gorithm and the high-bandwidth-ﬁrst algorithm, of
which the latter is the extreme case of the former.
Since the high-bandwidth-ﬁrst algorithm places the
nodes in order of bandwidth, the constructed tree is
called a bandwidth-ordered (BO) tree. An example of
a BO tree is shown in Fig. 1(b).
• Time-optimizing: the nodes are placed in the tree ac-
cording to their time properties (ages). A represen-
tative algorithm is the longest-ﬁrst algorithm. An ex-
treme case of this approach is a time ordered (TO) tree,
in which the nodes are placed in a strict order of ages,
that is, nodes are not older than any node found at
higher levels in the tree. Fig. 1 (c) gives an example
of this kind of tree.
The average number of nodes affected by a failure in the
BO tree is small since the resulting tree is short. For exam-
ple, in Fig. 1, a failed node 1 in the BO tree (see Fig. 1 (b))
causes less streaming disruptions on its descendants than in
a random tree (see Fig. 1 (a)). However, this type of tree
needs frequent disconnections and reconnections between
nodes to maintain such a bandwidth layout. For example, if
some node a in a layer i leaves, then the node, say b, with
maximum bandwidth in layer i+1 should be moved to node
a’s position, which further forces all of b’s children rejoin
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:30:01 UTC from IEEE Xplore.  Restrictions apply. 
(b)  Bandwidth-ordered(cid:13)(c) Time-ordered(cid:13)(a) Random(cid:13)increasing(cid:13)ages(cid:13)increasing BWs(cid:13)1(cid:13)1(cid:13)1(cid:13)either a large bandwidth or a long service time helps to in-
crease BTP, a node can be encouraged to contribute more
bandwidth resource or longer service time as a trade for
service quality. From the user’s perspective, this forms an
incentive mechanism that helps increase overall system re-
sources.
3.3 Key Operations
ROST is performed in a completely distributed manner.
It includes three basic operations: Join, Leaving and BTP-
based Switching.
Member Joining and Leaving When a new member
joins the network, ROST assumes that there is a bootstrap
mechanism that provides at least one active member in the
group. The new member then queries the existing members
for information about other participants until it obtains a
certain number (say, 100) of known members or the proce-
dure exceeds some time limit. It then sends a JOIN request
to these members, who will respond with an ACCEPT mes-
sage if they have spare bandwidths. If there are more than
one possible parents, the new member chooses the one with
the smallest tree depth as its parent (each member knows its
own layer number in the tree). If multiple such parents exist
at the same layer, it chooses the nearest parent in terms of
network delay. When a member leaves, it may give notiﬁca-
tion to its neighbors or it may just leave abruptly. In either
case, the children of the leaving node have to rejoin the tree
by contacting other members.
BTP-based Switching The multicast source is pre-
assigned an inﬁnite BTP, and always remains at the top of
the tree. When a new member initially enters the network,
its BTP is 0. In most cases, the high layers of the tree are oc-
cupied and the new member becomes a low-layer node. As
time goes on, a node’s BTP increases at a rate proportional
to its bandwidth. If its bandwidth is larger than its parent,
then there must be some time point in the future when its
BTP exceeds its parent (if the parent does not leave before
itself). At that time the algorithm will exchange the roles of
these two nodes. Fig. 2 gives an example of this operation.
In Fig. 2 (a), node a’s BTP is 10 and has an out-degree
of 2; node b has a BTP of 12 and an out-degree of 3. Node
b is therefore moved up to become the parent and node a
is moved down to become the child. Now that node a can
support only two of the three nodes d, e, f, one child must
be assigned a new parent. The algorithm chooses f, the
node with the largest BTP and reconnects to node b, which
now has a spare out-degree.
The switching is performed autonomously by all mem-
bers. For every interval of a certain time (called a switching
interval), a member compares its own BTP with its parent’s
current BTP. If its BTP exceeds that of its parent, and its
Figure 2: Illustration of the BTP-based switching operation. (a)
Before switching; (b) After switching. The numbers represent the
nodes’ BTPs.
bandwidth is no less than the parent’s bandwidth, then the
switching operation is triggered. The bandwidth compar-
ing avoids unnecessary switching since if the child has a
smaller bandwidth, the BTP will eventually be exceeded by
the parent, and it will ultimately be placed below the parent.
When a node decides to switch with its parent, it ﬁrst
tries to “lock” a set of relevant nodes, including its parent,
its grandparent and all of its children and siblings, in or-
der to maintain a consistent state of the nodes. If any of
these nodes is already in the process of another switching,
or operations such as overlay failure recovery, the lock can-
not be acquired and the initiating node waits for a certain
amount of time (say, 15 seconds) before it tries to check the
switching condition and lock again. It can be seen that a
switch operation involves an average overhead of 2d + 1 in
terms of the number of parent changes, where d is the aver-
age node out degree. By choosing a relative large switching
interval (e.g., 15 minutes) this overhead can be made very
small while preserving the advantages of this method, as
will be demonstrated in the experiments.
The algorithm moves nodes up the tree in a gradual man-
ner. This potentially prevents short-lived clients (which ac-
count for a nontrivial fraction of clients [15] [13]) from
climbing up the tree upon joining, which may bring stream
disruptions to many downstream nodes. In contrast, plac-
ing a new member at the leaf layer ﬁrst and then adjusting
its position according to its behavior can reduce this risk.
The longer a node stays in the network, the safer it is to be
moved up the tree.
3.4 Preventing Cheating or Malicious Behavior
Truth telling is critical for ROST. Without a mechanism
to enforce this, a node can simply report that it has a large
bandwidth or has stayed in the overlay for a long time in or-
der to have itself gradually moved up toward the root of the
tree. As a result, the ROST approach would beneﬁt nodes
that cheat, instead of providing incentives for nodes to con-
tribute to the system. Worse still, a malicious node may
easily attack the system by moving to a place near the root
and then disrupting the streaming to most tree nodes.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:30:01 UTC from IEEE Xplore.  Restrictions apply. 
f(cid:13)e(cid:13)d(cid:13)c(cid:13)b(cid:13)a(cid:13)f(cid:13)e(cid:13)d(cid:13)c(cid:13)a(cid:13)b(cid:13)10(cid:13)10(cid:13)12(cid:13)5(cid:13)4(cid:13)3(cid:13)12(cid:13)5(cid:13)4(cid:13)3(cid:13)(a)(cid:13)(b)(cid:13)g(cid:13)g(cid:13)ROST addresses these problems using a reference node
mechanism. Using this mechanism, a node can verify the
BTP of another node by inquiring of some nodes called
referees. Each node is associated with two types of ref-
erees: age referees and bandwidth referees. When a node
initially joins the overlay, its parent records its joining time
to rage > 1 randomly chosen nodes, called age referees,
which then establish heartbeat connections with the new
node and act as its age witnesses. When a node needs to
show its age information, it simply tells others about the
addresses of its age referees, which can then be consulted
for the trustable age information. Note that a node’s age
referees cannot be designated by itself, in order to prevent
possible collusion; while the parent can do this because it
has no incentive to collude with a child which is a potential
competitor for its own tree position.
To ensure reliable bandwidth information, a newly arriv-
ing node also obtains two sets of nodes from parent: a band-
width measurer set and a bandwidth referee set. The former
is a set of nodes with enough spare incoming bandwidths
that can be used to measure the new node’s effective outgo-
ing bandwidth. To do this, the new node concurrently trans-
mits testing data to these nodes, who can measure the partial
bandwidths and jointly form an aggregated bandwidth mea-
sure on the parent. The parent then saves this value to the
rbw > 1 bandwidth referees. Later on, when the bandwidth
information is needed by others, the node only need to pro-
vide the addresses of the bandwidth referees.
Both rage and rbw are greater than 1 for the purpose of
fault tolerance. When a node discovers that a referee leaves
or breaks down, it asks its parent to assign a new referee,
which then synchronizes with the existing active referees.
Note that in an asynchronous environment like the Inter-
net, the age information maintained by the multiple referees
need not be strictly consistent, since the difference is upper
bounded by a heartbeat interval, which is small compared
to the age of a node.
The above mechanism adds extra complexity and over-
head to the overlay network. However, it is important to
recognize that the cheating and malicious access problems
are not unique to the ROST algorithm, but rather, common
to all forms of overlay network where centralized authority
is unavailable and peers’ information can not be obtained by
simple probing. Our design here not only serves as an im-
portant complement to the basic ROST algorithm, but also
provides a solution to the same problem probably encoun-
tered in other overlay-based applications.
4 The Cooperative Error Recovery (CER)
Protocol
Due to network congestion, transient or permanent inter-
mediate failures of routing services, packet errors (mainly
losses) are inevitable. To restore the normal streaming, a
member needs to rejoin the tree. This process involves fail-
ure detection, contacting with multiple nodes (e.g., 50) to
select an appropriate parent, and potentially some waiting
time when concurrent join requests compete on some par-
ent. Taking into account all these factors, this process can
take a time in the order of tens of seconds [4]. Yang et
al. [18] have proposed a proactive approach to expedite this
process by computing a rescue scheme in advance. How-
ever, in a large-scale Internet-based system which is dy-
namic in nature, this still remains as a general problem.
To address this problem, we propose to use multiple co-
operative error recovery sources, called a minimum-loss-
correlation group (MLC group), to help a node that suffers
from a stream disruption ﬁnd the lost data while it is look-
ing for a new parent. As the name suggests, the MLC group
has the property that a node failure or packet missing on
one node is unlikely to affect other nodes within the same
group. This is important because in a tree structure with
a high degree of ﬂow dependence, a packet loss occurring