 Execute.
Page fault analysis
0F 6A 60 6A  79 6D C6 02 …
 Eventually, the entire instruction 
will reside in the executable page.
Page fault analysis
0F 6A 60 6A  79 6D C6 02 …
 The instruction could run.
 The instruction could throw a different fault.
 The instruction could throw a #PF,
but with a different CR2.
Page fault analysis
0F 6A 60 6A  79 6D C6 02 …
 In all cases, we know the instruction has been 
successfully decoded, so must reside entirely 
in the executable page.
Page fault analysis
0F 6A 60 6A  79 6D C6 02 …
 With this, we know the instruction’s length.
Page fault analysis
0F 6A 60 6A 79 6D C6 02 …
 We now know how many bytes the 
instruction decoder consumed
 But just because the bytes were decoded
does not mean the instruction exists
 If the instruction does not exist,
the processor generates the #UD exception 
after the instruction decode
(invalid opcode exception)
Page fault analysis
 If we don’t receive a #UD, the instruction exists.
Page fault analysis
 Resolves lengths for:
 Successfully executing instructions
 Faulting instructions
 Privileged instructions:
 ring 0 only: mov cr0, eax
 ring -1 only: vmenter
 ring -2 only: rsm
Page fault analysis
 The “injector” process performs 
the page fault analysis and 
tunneling instruction generation
The Injector
 We’re fuzzing the same
device that we’re running on
 How do we make sure we don’t crash?
Surviving
 Step 1:
 Limit ourselves to ring 3
 We can still resolve instructions 
living in deeper rings
 This prevents accidental total system failure
(except in the case of serious processor bugs)
Surviving
 Step 2:
 Hook all exceptions the instruction might generate
 In Linux:
 SIGSEGV
 SIGILL
 SIGFPE
 SIGBUS
 SIGTRAP
 Process will clean up after itself when possible
Surviving
 Step 3:
 Initialize general purpose registers to 0
 Arbitrary memory write instructions like
add [eax + 4 * ecx], 0x9102
will not hit the injecting process’s address space
Surviving
 Step 3 (continued):
 Memory calculations using an offset:
add [eax + 4 * ecx + 0xf98102cd6], 0x9102
would still result in non-zero accesses
 Could lead to process corruption 
if the offset falls into the injector’s address space
Surviving
 Step 3 (continued):
 The tunneling approach ensures
offsets are constrained
 0x0000002F
 0x0000A900
 0x00420000
 0x1E000000
 The tunneled offsets will not fall into 
the injector’s address space
 They will seg fault, but seg faults are caught
 The process still won’t corrupt itself
Surviving
 We’ve handled faulting instructions
 What about non-faulting instructions?
 The analysis needs to continue 
after an instruction executes
Surviving
 Set the trap flag prior to 
executing the candidate instruction
 On trap, reload the registers to a known state
Surviving
 With these…
 Ring 3
 Exception handling
 Register initialization
 Register maintenance
 Execution trapping
 … the injector survives.
Surviving
 So we now have a way to search the 
instructions space.
 How do we make sense
of the instructions we execute?
Analysis
 The “sifter” process parses 
the executions from the injector, 
and pulls out the anomalies
The Sifter
 We need a “ground truth”
 Use a disassembler
 It was written based on the documentation
 Capstone
Sifting
 Undocumented instruction:
 Disassembler doesn’t recognize byte sequence and …
 Instruction generates anything but a #UD
 Software bug:
 Disassembler recognizes instruction but …
 Processor says the length is different
 Hardware bug:
 ???
 No consistent heuristic, investigate when something fails
Sifting
sandsifter - demo
(sandsifter)
(summarizer)
 We now have a way to
systematically scan our processor 
for secrets and bugs
Scanning
 I scanned eight systems in my test library.
Scanning
 Hidden instructions
 Ubiquitous software bugs
 Hypervisor flaws
 Hardware bugs
Results
Hidden instructions
 Scanned: Intel Core i7-4650U CPU
Intel hidden instructions
 0f0dxx
 Undocumented for non-/1 reg fields
 0f18xx, 0f{1a-1f}xx
 Undocumented until December 2016
 0fae{e9-ef, f1-f7, f9-ff}
 Undocumented for non-0 r/m fields until June 2014
Intel hidden instructions
 dbe0, dbe1
 df{c0-c7}
 f1
 {c0-c1}{30-37, 70-77, b0-b7, f0-f7}
 {d0-d1}{30-37, 70-77, b0-b7, f0-f7}
 {d2-d3}{30-37, 70-77, b0-b7, f0-f7}
 f6 /1, f7 /1
Intel hidden instructions
 Scanned: AMD Athlon (Geode NX1500)
AMD hidden instructions
 0f0f{40-7f}{80-ff}{xx}
 Undocumented for range of xx
 dbe0, dbe1
 df{c0-c7}
AMD hidden instructions
 Scanned: VIA Nano U3500, VIA C7-M
VIA hidden instructions
 0f0dxx
 Undocumented by Intel for non-/1 reg fields
 0f18xx, 0f{1a-1f}xx
 Undocumented  by Intel until December 2016
 0fa7{c1-c7}
 0fae{e9-ef, f1-f7, f9-ff}
 Undocumented by Intel for non-0 r/m fields until June 2014
 dbe0, dbe1
 df{c0-c7}
VIA hidden instructions
 What do these do?
 Some have been reverse engineered
 Some have no record at all.
Hidden instructions
Software bugs
 Issue:
 The sifter is forced to use a disassembler 
as its “ground truth”
 Every disassembler we tried as the 
“ground truth” was littered with bugs.
Software bugs
 Most bugs only appear in a few tools, 
and are not especially interesting
 Some bugs appeared in all tools
 These can be used to an attacker’s advantage.
Software bugs
 66e9xxxxxxxx (jmp)
 66e8xxxxxxxx (call)
Software bugs
 66e9xxxxxxxx (jmp)
 66e8xxxxxxxx (call)
 In x86_64
 Theoretically, a jmp (e9) or call (e8),
with a data size override prefix (66)
 Changes operand size from default of 32
 Does that mean 16 bit or 64 bit?
 Neither.  66 is ignored by the processor here.
Software bugs
 Everyone parses this wrong.
Software bugs
Software bugs (IDA)
Software bugs (VS)
 An attacker can use this to
mask malicious behavior
 Throw off disassembly and jump targets
to cause analysis tools to miss the real behavior
Software bugs
Software bugs (objdump)
Software bugs (QEMU)
 66 jmp
 Why does everyone get this wrong?
 AMD: override changes operand to 16 bits, 
instruction pointer truncated
 Intel: override ignored.
Software bugs
 Issues when we can’t agree on a standard
 sysret bugs
 Either Intel or AMD is going to be 
vulnerable when there is a difference
 Impractically complex architecture
 Tools cannot parse a jump instruction
Software bugs
Hypervisor bugs
 In an Azure instance, 
the trap flag is missed 
on the cpuid instruction
 (cpuid causes a vmexit, 
and the hypervisor forgets 
to emulate the trap)
Azure hypervisor bugs
Azure hypervisor bugs
Hardware bugs
 Hardware bugs are troubling
 A bug in hardware means 
you now have the same bug 
in all of your software.
 Difficult to find
 Difficult to fix
Hardware bugs
 Scanned:
 Quark, Pentium, Core i7
Intel hardware bugs
 f00f bug on Pentium (anti-climactic)
Intel hardware bugs
 Scanned:
 Geode NX1500, C-50
AMD hardware bugs
 On several systems,
receive a #UD exception 
prior to complete instruction fetch
 Per AMD specifications, this is incorrect.
 #PF during instruction fetch takes priority
 … until …
AMD hardware bugs
 Scanned:
 TM5700
Transmeta hardware bugs
 Instructions: 0f{71,72,73}xxxx
 Can receive #MF exception during fetch
 Example:
 Pending x87 FPU exception
 psrad mm4, -0x50 (0f72e4b0)                                  
 #MF received after 0f72e4 fetched
 Correct behavior: #PF on fetch, 
last byte is still on invalid page
Transmeta hardware bugs
 Found on one processor...
 An apparent “halt and catch fire” instruction
 Single malformed instruction in ring 3
locks the processor
 Tested on 2 Windows kernels, 3 Linux kernels
 Kernel debugging, serial I/O,
interrupt analysis seem to confirm
 Unfortunately, 
not finished with responsible disclosure
 No details available 
on chip, vendor, or instructions
(redacted) hardware bugs
ring 3 processor DoS: 
demo
 First such attack found in 20 years
(since Pentium f00f)
(redacted) hardware bugs
 Significant security concern:
processor DoS from unprivileged user
(redacted) hardware bugs
 Details (hopefully) released within the next month
(stay tuned)
(redacted) hardware bugs
 Open sourced:
 The sandsifter scanning tool
 github.com/xoreaxeaxeax/sandsifter
 Audit your processor,
break disassemblers/emulators/hypervisors, 
halt and catch fire, etc.
Conclusions
 I’ve only scanned a few systems
 This is a fraction of what I found on mine
 Who knows what exists on yours
Conclusions
 Check your system
 Send us results if you can
Conclusions
 Don’t blindly trust the specifications.
Conclusions
 Sandsifter lets us introspect 
the black box at the heart of our systems.
Conclusions
github.com/xoreaxeaxeax
sandsifter
 M/o/Vfuscator
 REpsych
 x86 0-day PoC
 Etc.
Feedback?  Ideas?
domas
@xoreaxeaxeax
PI:EMAIL