个转义序列都以反斜杠字符（\）开始。我们在第3章中再来探讨相关内容。
这样，就解释了为什么3行printf()语句只打印出两行：第1个printf()打印
的内容中不含换行符，但是第2和第3个printf()中都有换行符。
第3个printf()还有一些不明之处：参数中的%d在打印时有什么作用？先
来看该函数的输出：
My favorite number is 1 because it is first.
对比发现，参数中的%d被数字1代替了，而1就是变量num的值。%d相
当于是一个占位符，其作用是指明输出num值的位置。该行和下面的BASIC
语句很像：
PRINT "My favorite number is "; num; " because it is first."
实际上，C语言的printf()比BASIC的这条语句做的事情多一些。%提醒
程序，要在该处打印一个变量，d表明把变量作为十进制整数打印。printf()
82
函数名中的f提醒用户，这是一种格式化打印函数。printf()函数有多种打印
变量的格式，包括小数和十六进制整数。后面章节在介绍数据类型时，会详
细介绍相关内容。
8.return语句
return 0;
return语句[3]是程序清单2.1的最后一条语句。int main(void)中的int表明
main()函数应返回一个整数。C标准要求main()这样做。有返回值的C函数要
有return语句。该语句以return关键字开始，后面是待返回的值，并以分号结
尾。如果遗漏 main()函数中的 return 语句，程序在运行至最外面的右花括号
（}）时会返回0。因此，可以省略main()函数末尾的return语句。但是，不要
在其他有返回值的函数中漏掉它。因此，强烈建议读者养成在 main()函数中
保留 return 语句的好习惯。在这种情况下，可将其看作是统一代码风格。但
对于某些操作系统（包括Linux和UNIX），return语句有实际的用途。第11章
再详述这个主题。
83
2.3 简单程序的结构
在看过一个具体的程序示例后，我们来了解一下C程序的基本结构。程
序由一个或多个函数组成，必须有 
main()函数。函数由函数头和函数体组
成。函数头包括函数名、传入该函数的信息类型和函数的返回类型。通过函
数名后的圆括号可识别出函数，圆括号里可能为空，可能有参数。函数体被
花括号括起来，由一系列语句、声明组成，如图2.4所示。本章的程序示例
中有一条声明，声明了程序使用的变量名和类型。然后是一条赋值表达式语
句，变量被赋给一个值。接下来是3条printf()语句[4]，调用printf()函数3次。
最后，main()以return语句结束。
图2.4 函数包含函数头和函数体
简而言之，一个简单的C程序的格式如下：
84
#include 
int main(void)
{
语句
return 0;
}
（大部分语句都以分号结尾。）
85
2.4 提高程序可读性的技巧
编写可读性高的程序是良好的编程习惯。可读性高的程序更容易理解，
以后也更容易修改和更正。提高程序的可读性还有助于你理清编程思路。
前面介绍过两种提高程序可读性的技巧：选择有意义的函数名和写注
释。注意，使用这两种技巧时应相得益彰，避免重复啰嗦。如果变量名是
width，就不必写注释说明该变量表示宽度，但是如果变量名是
video_routine_4，就要解释一下该变量名的含义。
提高程序可读性的第3个技巧是：在函数中用空行分隔概念上的多个部
分。例如，程序清单2.1中用空行把声明部分和程序的其他部分区分开来。C
语言并未规定一定要使用空行，但是多使用空行能提高程序的可读性。
提高程序可读性的第4个技巧是：每条语句各占一行。同样，这也不是
C语言的要求。C语言的格式比较自由，可以把多条语句放在一行，也可以
每条语句独占一行。下面的语句都没问题，但是不好看：
int main( void ) { int four; four
=
4
;
printf(
"%d\n",
four); return 0;}
分号告诉编译器一条语句在哪里结束、下一条语句在哪里开始。如果按
照本章示例的约定来编写代码（见图2.5），程序的逻辑会更清晰。
86
图2.5 提高程序的可读性
87
2.5 进一步使用C
本章的第1个程序相当简单，下面的程序清单2.2也不太难。
程序清单2.2 fathm_ft.c程序
// fathm_ft.c -- 把2音寻转换成英寸
#include 
int main(void)
{
int feet, fathoms;
fathoms = 2;
feet = 6 * fathoms;
printf("There are %d feet in %d fathoms!\n", feet, fathoms);
printf("Yes, I said %d feet!\n", 6 * fathoms);
return 0;
}
与程序清单2.1相比，以上代码有什么新内容？这段代码提供了程序描
述，声明了多个变量，进行了乘法运算，并打印了两个变量的值。下面我们
更详细地分析这些内容。
2.5.1 程序说明
程序在开始处有一条注释（使用新的注释风格），给出了文件名和程序
的目的。写这种程序说明很简单、不费时，而且在以后浏览或打印程序时很
88
有帮助。
2.5.2 多条声明
接下来，程序在一条声明中声明了两个变量，而不是一个变量。为此，
要在声明中用逗号隔开两个变量（feet和fathoms）。也就是说，
int feet, fathoms;
和
int feet;
int fathoms;
等价。
2.5.3 乘法
然后，程序进行了乘法运算。利用计算机强大的计算能力来计算 6 乘以
2。C 语言和许多其他语言一样，用*表示乘法。因此，语句
feet = 6 * fathoms;
的意思是“查找变量fathoms的值，用6乘以该值，并把计算结果赋给变量
feet”。
2.5.4 打印多个值
最后，程序以新的方式使用printf()函数。如果编译并运行该程序，输出
应该是这样：
There are 12 feet in 2 fathoms!
Yes, I said 12 feet!
89
程序的第1个printf()中进行了两次替换。双引号号后面的第1个变量
（feet）替换了双引号中的第1个%d；双引号号后面的第2个变量（fathoms）
替换了双引号中的第2个%d。注意，待输出的变量列于双引号的后面。还要
注意，变量之间要用逗号隔开。
第2个printf()函数说明待打印的值不一定是变量，只要可求值得出合适
类型值的项即可，如6 *fathoms。
该程序涉及的范围有限，但它是把音寻[5]转换成英寸程序的核心部
分。我们还需要把其他值通过交互的方式赋给feet，其方法将在后面章节中
介绍。
90
2.6 多个函数
到目前为止，介绍的几个程序都只使用了printf()函数。程序清单2.3演
示了除main()以外，如何把自己的函数加入程序中。
程序清单2.3 two_func.c程序
//* two_func.c -- 一个文件中包含两个函数 */
#include 
void butler(void); /* ANSI/ISO C函数原型 */
int main(void)
{
printf("I will summon the butler function.\n");
butler();
printf("Yes. Bring me some tea and writeable DVDs.\n");
return 0;
}
void butler(void) /* 函数定义开始 */
{
printf("You rang, sir?\n");
}
该程序的输出如下：
91
I will summon the butler function.
You rang, sir?
Yes.Bring me some tea and writeable DVDs.
butler()函数在程序中出现了3次。第1次是函数原型（prototype），告知
编译器在程序中要使用该函数；第 2 次以函数调用（function call）的形式出
现在 main()中；最后一次出现在函数定义（function definition）中，函数定
义即是函数本身的源代码。下面逐一分析。
C90 标准新增了函数原型，旧式的编译器可能无法识别（稍后我们将介
绍，如果使用这种编译器应该怎么做）。函数原型是一种声明形式，告知编
译器正在使用某函数，因此函数原型也被称为函数声明（function
declaration）。函数原型还指明了函数的属性。例如，butler()函数原型中的
第1个void表明，butler()函数没有返回值（通常，被调函数会向主调函数返
回一个值，但是 bulter()函数没有）。第 2 个 void （butler(void)中的 void）
的意思是 butler()函数不带参数。因此，当编译器运行至此，会检查butler()
是否使用得当。注意，void在这里的意思是“空的”，而不是“无效”。
早期的C语言支持一种更简单的函数声明，只需指定返回类型，不用描
述参数：
void butler();
早期的C代码中的函数声明就类似上面这样，不是现在的函数原型。
C90、C99 和C11 标准都承认旧版本的形式，但是也表明了会逐渐淘汰这种
过时的写法。如果要使用以前写的 C代码，就需要把旧式声明转换成函数原
型。本书在后面的章节会继续介绍函数原型的相关内容。
接下来我们继续分析程序。在 main()中调用 butler()很简单，写出函数
名和圆括号即可。当butler()执行完毕后，程序会继续执行main()中的下一条
语句。
92
程序的最后部分是 butler()函数的定义，其形式和 main()相同，都包含
函数头和用花括号括起来的函数体。函数头重述了函数原型的信息：bulter()
不带任何参数，且没有返回值。如果使用老式编译器，请去掉圆括号中的
void。
这里要注意，何时执行 
butler()函数取决于它在 
main()中被调用的位
置，而不是 butler()的定义在文件中的位置。例如，把 butler()函数的定义放
在 
main()定义之前，不会改变程序的执行顺序， 
butler()函数仍然在两次
printf()调用之间被调用。记住，无论main()在程序文件处于什么位置，所有
的C程序都从main()开始执行。但是，C的惯例是把main()放在开头，因为它
提供了程序的基本框架。
C标准建议，要为程序中用到的所有函数提供函数原型。标准include文
件（包含文件）为标准库函数提供可函数原型。例如，在C标准中，stdio.h
文件包含了printf()的函数原型。第6章最后一个示例演示了如何使用带返回
值的函数，第9章将详细全面地介绍函数。
93
2.7 调试程序
现在，你可以编写一个简单的 
C 
程序，但是可能会犯一些简单的错
误。程序的错误通常叫做 bug，找出并修正错误的过程叫做调试（debug）。
程序清单2.4是一个有错误的程序，看看你能找出几处。
程序清单2.4 nogood.c程序
/* nogood.c -- 有错误的程序 */
#include 
int main(void)
(
int n, int n2, int n3;
/* 该程序有多处错误
n = 5;
n2 = n * n;
n3 = n2 * n2;
printf("n = %d, n squared = %d, n cubed = %d\n", n, 
n2, n3)
return 0;
)
2.7.1 语法错误
程序清单 2.4 中有多处语法错误。如果不遵循 C 语言的规则就会犯语法
94
错误。这类似于英文中的语法错误。例如，看看这个句子：Bugs frustrate be
can[6]。该句子中的英文单词都是有效的单词（即，拼写正确），但是并未
按照正确的顺序组织句子，而且用词也不妥。C语言的语法错误指的是，把
有效的C符号放在错误的地方。
nogood.c程序中有哪些错误？其一，main()函数体使用圆括号来代替花
括号。这就是把C符号用错了地方。其二，变量声明应该这样写：
int n, n2, n3;
或者，这样写：
int n;
int n2;
int n3;
其三，main()中的注释末尾漏掉了*/（另一种修改方案是，用//替
换/*）。最后，printf()语句末尾漏掉了分号。
如何发现程序的语法错误？首先，在编译之前，浏览源代码看是否能发
现一些明显的错误。接下来，查看编译器是否发现错误，检查程序的语法错
误是它的工作之一。在编译程序时，编译器发现错误会报告错误信息，指出
每一处错误的性质和具体位置。
尽管如此，编译器也有出错的时候。也许某处隐藏的语法错误会导致编
译器误判。例如，由于nogood.c程序未正确声明n2和n3，会导致编译器在使
用这些变量时发现更多问题。实际上，有时不用把编译器报告的所有错误逐
一修正，仅修正第 1 条或前几处错误后，错误信息就会少很多。继续这样
做，直到编译器不再报错。编译器另一个常见的毛病是，报错的位置比真正
的错误位置滞后一行。例如，编译器在编译下一行时才会发现上一行缺少分
号。因此，如果编译器报错某行缺少分号，请检查上一行。
95
2.7.2 语义错误
语义错误是指意思上的错误。例如，考虑这个句子：Scornful
derivatives sing greenly（轻蔑的衍生物不熟练地唱歌）。句中的形容词、名
词、动词和副词都在正确的位置上，所以语法正确。但是，却让人不知所
云。在C语言中，如果遵循了C规则，但是结果不正确，那就是犯了语义错
误。程序示例中有这样的错误：
n3 = n2 * n2;
此处，n3原意表示n的3次方，但是代码中的n3被设置成n的4次方（n2 =
n * n）。
编译器无法检测语义错误，因为这类错误并未违反 C语言的规则。编译
器无法了解你的真正意图，所以你只能自己找出这些错误。例如，假设你修
正了程序的语法错误，程序应该如程序清单2.5所示：
程序清单2.5 stillbad.c程序
/* stillbad.c -- 修复了语法错误的程序 */
#include 
int main(void)