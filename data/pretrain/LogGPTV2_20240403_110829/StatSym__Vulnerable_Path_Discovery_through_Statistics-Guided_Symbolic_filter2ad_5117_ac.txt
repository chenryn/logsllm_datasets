antee the accuracy of discovered vulnerability paths, symbolic
executors are used to verify statistically-identiﬁed candidate
paths. As shown in Figure 4, StatSym utilizes two mecha-
nisms to guide symbolic execution: inter-function and intra-
function search. Inter-function search is guided by the nodes
Algorithm: Statistics-Guided Symbolic Execution
Preprocess log ﬁles, count the numbers of runs n(R),
locations n(L) and logged variables n(V )
(a) Divide the n(R) of runs into correct executions C
and incorrect executions I
(b) Transform the logged data
transform non-numerical variables’ characteristics to
numerical values
(c) Predicate construction
for all logging locations R
for all logging variables L
(c.1) Construct a predicate x based on C and I
(c.2) Calculate probabilities for when the predicate is true
(c.3) Assign |p(x, C) − p(x, I)| as score
within C and I, i.e. p(x, C) and p(x, I)
end for
end for
(d) Rank |p(x, C) − p(x, I)| for all R and L
(e) Symbolic execution
set up timer for symbolic path exploration
while (problematic path is not found & timer has not expired)
(e.1) Join skeleton and detours to get a candidate
path P with the largest average predicate score
(e.2) Do Symbolic execution using candidate path (P)
(e.3) if bug is triggered in (e.2)
Output the complete path of (e.2) and the associated
predicates
end if
end while
Fig. 5: StatSym Algorithm
module (Figure 6). Statistical analysis module consists of two
sub-systems, Predicate Manager and Candidate Path Construc-
tor Symbolic execution module is built on KLEE [13].
Fig. 6: StatSym System Framework
A. Program Monitor
We implement our program monitor using Valgrind [33]. We
build a custom instrumentation tool by modifying Fjalar [34]
which is a plug-in on top of Valgrind. Fjalar is able to
dynamically instrument on unmodiﬁed C/C++ programs and
provides rich source code-level semantic information such
as variable names, variable types and function names. By
overriding the instrumentation behaviors at function entry and
exit points, our custom tool is able to log variable names and
values based on their type. Leveraging the built-in support
Fig. 4: Candidate path through statistical analysis (top) and
the symbolic executor’s search space (bottom).
in the candidate path. The symbolic executor selects those
execution paths that follow a given candidate path and does not
deviate by more than a preset number of hops. In Figure 4, the
diagonal-ﬁlled circles denote nodes that are within the allowed
hop distance. Intra-function search is guided by leveraging
predicates. When symbolic execution spawns additional states
at branch points, the constraints associated with the predicate
at the location combined with the constraint set (including the
branch conditions) would be evaluated. If the constraints and
predicates are not satisﬁed, the state associated with the current
branch will be explored at a later stage when no other active
states are available. This enables StatSym to signiﬁcantly
trim down the search space by eliminating paths that either do
not follow a candidate path or that are unlikely to be related to
program vulnerability (denoted by the gray circles in Figure 4).
To improve the possibility of ﬁnding vulnerable program
paths, we allow symbolic executors to search paths that deviate
from the candidate path within a threshold of τ hops. For
example, if on a candidate path, two locations a and b have
no direct links in the program, the statistics-guided symbolic
execution module will start to search with a maximum depth
equal to τ to reach location b from location a. A higher τ
improves the robustness of symbolic executors at the expense
of increasing runtime overhead. The example in Figure 4
has threshold τ set to 1. If a feasible solution exists for the
constraints involved in an execution path, the symbolic execu-
tor validates that the path and conﬁrms its association with
vulnerability. The veriﬁed path and the associated constraints
would be output as the result. The overall algorithm governing
the operations of different modules is shown in Figure 5.
VI. IMPLEMENTATION
We implement a prototype of StatSym that has two mod-
ules: a statistical analysis module and a symbolic execution
Start pointCandidate nodePredicatepiFailure Point Extra nodes explored to deal with inaccuracy when hop threshold is 1Nodes trimmed by statistical resultsp1p2p3p0niInter-function search guided by path nodesIntra-function search guided by predicates n1n2n3 n1n2n3 KLEE Executor StatSym State Manager KLEE State Manager    StatSym Scheduler KLEE Scheduler 43567Program Monitor  Fjalar Predicate Manager Candidate Path Constructor 12Statistical Analysis Module Symbolic Execution Module from Fjalar, our program monitor is able to perform runtime
logging at tunable sampling rates, allowing for partial logging.
B. Statistical Analysis Module
The Statistical analysis module includes two components:
Predicate Manager and Candidate Path Constructor (imple-
mented with around 3K Lines of Code using Python). The
Predicate Manager reads multiple runtime logs generated
by the program monitor 1(cid:13), and then constructs predicates
and ranks them based on conﬁdence scores that measure the
statistical difference of a variable (and its values) between
correct executions and faulty executions. Note that a higher
ranked predicate indicates a closer correlation with program
vulnerability.
The Candidate Path Constructor ﬁrst identiﬁes the transi-
tion links between different locations (using Equation (3)) and
constructs a dynamic control ﬂow graph connected via multi-
ple function call entries and exit points. The Candidate Path
Constructor will utilize the ranked predicates from Predicate
Manager 2(cid:13) to extract a skeleton and the associated detours. A
skeleton is obtained by choosing the path with highest average
predicate score when breadth ﬁrst search is performed starting
from the program entry point to the failure point.
The candidate vulnerable paths are constructed by joining
the skeleton and detours based on predicate scores to improve
vulnerable path discovery. As discussed in Section V-B, each
detour can start from a certain node on the skeleton that ﬁnally
returns back to the skeleton. Depending on the indices of the
starting and ending nodes of a detour in the skeleton, they
can be categorized into three types: (i) detours whose starting
index is smaller than the ending index on the skeleton, (ii)
detours with the starting index larger than the ending index,
and (iii) detours with the starting and ending nodes at the
same index on the skeleton. The latter two detour types will
introduce cycles to the candidate path, and the ﬁrst type of
detours may replace certain segments of the original skeleton.
In our current implementation, we apply different heuristics
that are aware of these detour types. For example, for each
unique location on the skeleton, if there exist multiple detours
of the same type, we calculate the average predicate scores
for all such detours, and select the one with largest conﬁdence
score.
C. Statistics-Guided Symbolic Execution
Symbolic Execution in KLEE: Each path that
is to be
explored by KLEE at runtime, is represented by a unique
state and identiﬁed using the traversed branch decisions,
current program counter and stack frames. The LLVM bitcode
interpreter or Executor uses a loop to iterate over instructions
(stepInstruction()) and executes them (executeInstruction())
symbolically if possible. Upon reaching a branch instruction
(e.g. {if, else}, {switch, case}), the executor will attempt to
fork a state, provided that the constraint corresponding to the
branch direction is satisﬁable. KLEE implements several state
scheduling algorithms including Breadth First Search (BFS),
Depth First Search (DFS), Random Path Selection and even a
sophisticated coverage-optimized search that uses a heuristic
to weigh each state based on the likelihood of covering new
source code.
Statistics-Guided Symbolic Execution in StatSym: We
modify KLEE to take advantage of the candidate path and
predicates information output by statistical analysis module
to the State Manager of StatSym 3(cid:13). The StatSym State
Manager infers and maintains all of the potential states that are
worthy of subsequent exploration. In our implementation, the
KLEE Executor retrieves one state a time from the StatSym
State Manager and executes the next instruction for that state.
The StatSym State Manager records the progress of symbolic
execution along the candidate path for all states by bookmark-
ing the currently executed path nodes, as well as the diverted
hops (Section V-C). More importantly, the StatSym State
Manager will use the candidate path to guide state exploration:
Inter-function and Intra-function. When the current symbolic
execution point matches the name of the candidate path node,
the constraints indicated by predicates would be added to
the current state in StatSym State Manager2, which helps
trim down intra-function search space. The symbolic execution
states corresponding to the branch instruction outcomes that
conﬂict with the constructed predicates will be suspended. For
inter-function guidance at function entry and exit, the State
Manager will update the diverted hops in the current state,
and suspend the states that have exceeded the hop diversion
threshold from further consideration. StatSym State Manager
also coordinates with KLEE’s default state manager to main-
tain necessary information for each state such as constraint set
and memory space. The StatSym State Scheduler interacts
with the State Manager to select the next state to be explored,
6(cid:13), 7(cid:13). The StatSym scheduler gives the states that have less
diverted hops higher priority. If a candidate vulnerable path
is veriﬁed by the Symbolic Executor, the complete vulnerable
path along with the constraints are output. If not, the next
candidate path in the list (if one exists) would be explored, and
the above process would be repeated over again. We note that
StatSym provides the same level of code coverage and depth
in the search as compared to KLEE’s symbolic execution.
VII. EVALUATION
A. Experimental Setup
Benchmark Selection: We performed extensive studies on
application benchmarks from multiple sources [24], [25], [35]
that include server class, GNU utilities and database system.
The vulnerabilities associated with the target programs include
buffer overruns, integer handling errors, pointer dereferencing
vulnerabilities and data race bugs. To represent diverse do-
mains, we select four real-world programs: polymorph, Grep,
CTree and thttpd.
2Note that KLEE does not directly support constraining string length. As a
workaround, for strings with unknown length, we intentionally allocate long
enough memory array. We then constrain the length of the string by controlling
the index at which the ﬁrst ‘\0’ resides.
Statistical
Module
detours
0
0
6
12
Analysis
time(sec)
1.9
58.4
561.2
661.4
Benchmark
polymorph
CTree
thttpd
Grep
Symbolic
Module
Execution
time(sec)
180.6
1.6
247
37.7
Statistical
Module
detours
2
1
7
31
Analysis
time(sec)
1.6
43.2
428.0
518.7
Benchmark
polymorph
CTree
thttpd
Grep
Symbolic
Module
Execution
time(sec)
213.0
2.4
1263.0
44.3
TABLE II: Number of detours, and time breakdown when
sampling rate is 100%.
TABLE III: Number of detours, and time breakdown when
sampling rate is 30%.
symbolic executor would spend enormous time iterating over
program parameter parsing, which is irrelevant to the pro-
gram’s core functionality. In our experiments, we conﬁgure
such semantically reasonable and required program input
options for both StatSym and KLEE to avoid unnecessary
(exhaustive) search. Recent works such as [36] highlight the
needs to automatically recognize program input constraints
for more efﬁcient symbolic execution, and we note that such
optimizations are beyond the scope of our work.
Experiment Testbed: All experiments are conducted on our
lab server equipped with a 4-core Intel Xeon E5405 server
and 12GB DRAM.
B. Evaluation Results
For all of the benchmarks, StatSym is able to successfully
identify the vulnerable paths correctly corresponding to the
respective vulnerabilities. In Table II and Table III, we sum-
marize the time overheads for both statistical analysis and
symbolic execution module with two sampling rates, 100%
and 30% respectively. We record the time consumed for
the statistical analysis and the number of different detours
generated. For statistics-guided symbolic execution, we record
the time taken to ﬁnd the vulnerable paths and generate the
corresponding test inputs.
From Table II, we can see that
the statistical analysis
module effectively generates the candidate paths, especially