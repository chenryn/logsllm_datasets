Functor的技术。在Python内部，是通过一个名为Pyobject_Cal1的函数对instance对
图12-5展示了一个可调用的对象：
在Python中，所谓“调用”，就是执行对象的type所对应的class对象的tp_cal1操作。
PyTypeObject中，tp_cal1不为空）那么这个对象就是一个可调用的对象，换句话说，
象对应的class对象中实现了“
象都有可能被调用。
数调用”听上去才合理呀。但实际上，在Pyhon中，不仅只有函数可以被调用，
的操作，那么这个对象是不是就是我们11章看到的PyFunctionobject对象呢，毕竟，“函
对象虽然与nb_ada有关系，但并不是直接指向nb_add的，我们说可以调用_ada_对应
并调用该操作，从而完成对int._ada_的调用。
机制的，在此后的剖析中，我们的工作就是不断将这个粗略的图示完善。
中class对象的一个粗略的图示，从中可以看到Python2.2之后是如何解决这个属性寻找
实际上，熟悉C++的朋友可以将这个特性看作是C++中通过对操作符（）的重载实现
到了这里，需要特别提出一个Python中的概念，即可调用性（callable），只要一个对
PyInt_Type-
当Python虚拟机需要调用int.ada_时，它可以到符号“int”对应的class对象
第12章Python虚拟机中的类机制
深度探素动态语言核心技术
从而调用a中的_cal1
PyInt_Type
tp_as_number
tp_dict
HelloPython
>>>clatsA(object)：
>>>a=A()
a(
图12-4
图12-5可调用对象示例
def
cal1_”操作（更确切地说，在Pyton内部的
-cal1
粗略的示意图
int_as_number
peint
add
，完成“可调用”这个特性的。
e
(self):
Hello Python
int_add
一切对
---
## Page 295
请内存，并创建、初始化整个动作序列。所以对于1ist来说，初始化就剩下pyTypeReady
经作为全局对象存在了，需要的仅仅是完善；而A对应的class对象则并不存在，需要申
自定义类型在初始化上的区别。list对应的class对象pyList_Type在Python启动后已
Pyihon的内置类型，还会处理用户定义的类型。我们以1iat和A来说明内置类型与用户
PyType_Ready仅仅是属于对class对象进行初始化这个动作的一部分，它处理的不光是
对类型系统进行初始化的动作从_py_ReadyTypes拉开序幕。
中当然也包括填充tp_dict，从而完成内置类型从type对象到class对象的转变。这个
这个初始化的动作会动态地在内置类型对应的pyTypeObject中填充一些重要的东西，其
tp_dict在运行时会指向一个dicE对象。这个acE对象必须在运行时动态构建。
class对象转变的关键。虽然有了tp_dict这个域，而且我们已经在图12-4中看到，
中才开始冒头。这个tp_dict也正是ryTypeObject从2.2之前的type对象向2.2之后的
发现pyypeObject的定义有很多不同，tp_aict在Pyhon2.1.3中不存在，在Python2.2.3
的两个Python发行版本，Python2.1.3和Python2.2.3。对比这两个版本的objecth文件，会
中你明知道a=i（）这条语句一定失败，而Python却成功编译了。
确定的，必须是在运行时才能在PyObject_Cal1FunctionobjArgs中确定，所以在图12-6
Python将会抛出异常：
那么调用操作自然能够顺利完成：如果传递进来的对象本身并不是可调用的，那么很显然，
对象都会按部就班地试图完成“调用”这个操作，如果传递进来的对象确实是可调用的，
在目前的Python官方网站torww.python.org上，我们还能下载到类机制革命发生前后
在_Py_ReadyTypes中，会调用PyType_Ready对class对象进行初始化。实际上
从Python2.2开始，Python在启动时，会对类型系统（对象模型）进行初始化的动作
看，
图12-6中展示了一个不可调用的例子，从这里可以看到，pyobject_ca11对于任何
一个整数对象是不可调用的。有趣的是，一个对象是否可调用并不是在编译期能
Traceback（most tecent call last):
>>>f()
File"#,line3in
File
(）
f0：
H
图12-6不可调用对象示例
Python源码剖析
Tine
12.2从type对象到class对象
1,in cmodule>
一深度探索动态语言核心技术
265
---
## Page 296
Python源码剖析
12.2.1
266
信息：
是在PyTypeObject.tp_base中指定的。表12-1列出了一些内置class对象的tp_base
意，这里的type是pyType_Ready中的参数名，也表示其对应的class对象）。这个信息
代码清单12-1
2
PyBool_Type
PyInt_Type
PyType_Type
class对象
int PyType_Ready(PyTypeobject*type)
[typeobject.c]
而对于A来说，PyType_Ready仅仅是很小的一部分。
PyTypeobject
Pyobject *dict
第12章Python虚拟机中的类机制
首先在代码清单12-1中的[1]处，Python虚拟机会尝试获得待初始化的type的基类（注
//121：如果基类没有初始化，先初始化基类
对于指定了tp_base的内置class对象，
base
既然之前提到是一个非常特殊的class对象，那么对 PyType_Ready
处理基类和type信息
type->ob_type
PyType_Ready(base)
=type->tp_base;
一深度探索动态语言核心技术
NULL && type!=&PyBaseObject_Type)
"base;
*bases;
表12-1
base->ob_type1
内置class对象的基类信息
&PyInt_Type
NULL
NULL
基类信息
当然就使用指定的基类：而对于没有指定
---
## Page 297
12.2.2
[11、[2]、[3]处的动作读者可以自行分析，其实结果很简单，就是什么动作也没有发生。
object_Type，同时，又是所有class对象的基类，那么我们转而分析
所以嘛现在能理解图12-3的结果了吧。
对于这里考察的pyType_Type来说，其metaclass正是的metaclass，
就是metaelass。实际上，Python虚拟机是将基类的metaclass作为了子类的metaclass
ob_type信息也就是对象的_elass_将返回的信息。更进一步地说，这里设置的ob_type
否为NULL，这符合之前对初始化的描述，初始化的一部分工作就是对Ep_dict进行填充。
则需要先对基类进行初始化。可以看到，判断初始化是否完成的条件是base->tp_dict是
Type很倒霉，它没有指定基类，所以它的基类就成了。
class 对象都是直接或间接以作为基类的。我们正在考察的pyType
[typeobject.c]
前面说了，这个东西就是那个特殊的。所以这里可以看到，Python所有
个Pyhon的ciass对象都会有一个基类列表。
既然在代码清单12-1的[2]处我们看到Python虚拟机会首先尝试初始化PyBase
接下来，Pyhon虚拟机将处理类型的基类列表，因为Python支持多重继承，所以每
随后在代码清单12-1的[3]处，设置了class对象的ob_type信息，实际上这个
在获得了基类后，代码清单12-1的[2]处会判断基类是否已经被初始化了，如果没有
//尝试获得type的tp_base 中指定基类（super type）
处理基类列表
bases= type
Py_ssize_ti，n
Pyobjeet *diet,
f（base==NULL)
base
(base
/如果bases为空
>tp_bases;
hase:
&&tyBeI=&PyBaseobject_Type)(
*bases:
则根据baBe的情况设定bases
Python源码剖析
12.2从type对象到class对象
一深度探索动态语言核心技术
267
---
## Page 298
ython源码剖析
12.2.3
268
过程。
个PyBaseobject_Type，这也可以从图12-1和图12-3中得到验证。
是base不为NULL，而是&PyBaseobject_Type，所以它们的基类列表不为空，都包含
NULL，所以它的基类列表就是一个空的tuple对象。这也符合在图12-1中显示的object，
intPyType_Ready(PyTypeObject *type)
[typeobject.c]
bases
在这个阶段，完成了将（add_”，&nb_add）加入到tp_aict的过程。这个阶段
接下来Pyhon虚拟机将进入激动人心的填充tp_dict的阶段，这是一个极其繁杂的
//设定tp_dict
Py_ssize.t
而对于PyType_Type和其他类型，比如PyInt_Type来说，虽然tp_bases为空，但
第12章Python虚拟机中的类机制
if
dict
Pyobject*dict,
填充tp_dict
add_getset(type,
add_members(type,
add_methods(type,
(type->tp_getset
（type->tp_membersIENUEL)L
type->bp_dict =dict;
(@iat
type->tp_bases
else
的结果。
深度探索动态语言核心技术
type->tp_dict;
bases=PyTuple_New（O):
=PyDict_New():
bases=PyTuple_Paek（l,base）:
baBes)
NUL）
type->tp_members):
ype->tp_methods):
（N=）
---
## Page 299
12.2.3.1
Object的第一个域就是pyTypeObject，所以mPSLoT计算出的偏移量实际上也就是相对
Typeobject中的偏移量：而function则指向一种称为slotfunction的函数。
就是操作对应的名称，比如字符串“
slot是通过slotdef这个结构体来实现的。
slot，但是slot又不仅仅包含一个函数指针，它还包含其他一些信息。在Pyhon内部，
在Python内部，slot可以视为表示PyTypeobject中定义的操作，在一个操作对应一个
[structmember.h]
#defIne TPSLOT(NAME,SLOT,FUNCTION,
[typeobject.c]
typedef struct wrapperbase slotdef;
[typeobject.c]
slotdefs的全局数组中。
tp_diet的动作。那么，一个问题浮现了，Python虚拟机是如何知道“_add_”和nb_add
#deEine ETSLOT(NAME,
[descrobject.h]
TPSLOT和ETSLOT的区别在于TPSLOT计算的是操作对应的函数指针（比如mDadd）
Pyhon中提供了多个宏来定义一个slot，其中最基本的是TPSLOT和ETSLOT：
在一个slot中，存储着与pyTypeobject中一种操作相对应的各种信息。比如，name
在进入填充tp_aict的复杂操作之前，我们先来介绍Python内部的一个概念：slot。
PyDoC_STR(DOC)）
(NAME,offsetof(PyHeapTypeObjeCt, SLOT),(void *）(FUNCTION),WRAPPER,
PyobjecE*name_strobj:
int flags;
wrapperfunc wrapper;
int offset;
slot与操作排序
Doc
STR(DOC)1
SLOT,
FUNCTION,WRAPPER
add_：offset则是操作的函数地址在pyHeap
Python源码剖析
WRAPPER
12.2从type对象到class对象
DoC)
DOC)
深度探索动态语言核心技术
269
---
## Page 300
Python源码剖析
270
同操作名对应不同操作的情况，在填充tpdict时，就会出现问题，比如对于
操作对应同一个操作名的情况，同样也存在着同一个操作对应不同操作名的情况。对于相
slotaefs中，可以发现，操作名（比如_add）和操作并不是一一对应的，存在着多个
呢？别急，为了理解为什么需要对操作进行排序，需要来看看Pyon预先定义的slot集
移量不可能得到pyInt_Type中为int 准备的nbadd，那要这个劳什子的offset有
PyHeadTypeObject的，而PyInt_Type却是一个PyTypeObject，那么显然通过这个偏
PyNumberMethods结构，所以，实际上根本没有办法计算出nb_ada在pyTypeObject中
Methoas中存放的，而pyTypeObjedt中却是通过一个tp-as_number指针指向另一个
什么用呢？
static slotdef slotdefslj=
[typeobject.c]
一定发现了一个重大的问题，如果说与nb_add对应的slot中记录的offset是基于
typedef struct
[object.h]
PyHeapTypeObiect:
答案非常诡异，真的，这个offset是用来对操作进行排序的。排序？排哪门子的序
第12章Python虚拟机中的类机制
其中的BINSLOT，SQSLOT等这些宏实际上都是对ETSLOT的一个简单包装。在
ETSLOT(NAME,
因此，与nb_add对应的slot必须是通过ETsLor来定义的。到了这里，细心的读者
对于一个PyTypeobject来说，有的操作，比如nb_aaa，其函数指针是在pyNumber-
MPSLOT(
SQSLOT(
7[相同操作名对应不同操作]
RBINSLOT(
BINSLOT
-slotdefs.
PyMappingMethods as_mapplng;
PyNumberMethods
/[不同操作名对应相同操作]
深度探索动态语言核心技术
getitem
as_sequence.SLOT,FUNCTION,wRAPPER,DOC)
_heaptypeobject
(mame)
Ht_type
getitem
ht_slots:
nb_add,
(y)
(y)
FUNCTION,WRAPPER,DOC）
slot_nb_add,
slot_nb_add,
x[y]m)
slot_mp_subsdript,wrap_binaryfune,
---
## Page 301