(draft 17) and the explicit authentication of connection
identiﬁers [53] (draft 27) despite initial pushback (§III-D).
C2 Formal Spec and Functional Properties. We use F(cid:2) [50],
a functional language with a dependent type system for
program veriﬁcation, to develop a mechanized version of
our security deﬁnition (C1) as well as a detailed functional
speciﬁcation for QUIC’s new record layer construction
(§IV-B). We also prove (§IV-C) correctness of the speci-
ﬁcation, e.g., non-malleability of the encoding of headers
and that decryption inverts encryption. These proofs identi-
ﬁed two ﬂaws in the IETF reference implementation, and
they uncovered interesting limitations of the IETF secu-
rity goal, as well as brittleness in the construction (e.g.,
places where easy-to-make implementation mistakes may
undermine security). Hence, we propose improvements
that simplify the proof and increase robustness against
strong attacker models (§III-D).
C3 Security Reduction. We mechanically prove (§IV-E) that
the new construction (C2) is cryptographically secure
relative to C1, assuming the underlying primitives are.
C4 Fast, Correct and Secure Record Layer. We develop a
high-performance low-level implementation (§IV-D) of the
record layer that offers cryptographic security (w.r.t. C1),
functional correctness (w.r.t. C2), and runtime safety.
C5 Fast, Provably Safe QUIC Implementation. Finally, we
develop a proof-of-concept implementation (§V) of the
QUIC protocol logic veriﬁed for memory safety, which
we use to evaluate (§VI) our veriﬁed implementation
of the record layer (C4), leveraging previously veriﬁed
artifacts for the TLS handshake [17] and cryptographic
primitives [44], to produce a veriﬁed implementation of
the full IETF QUIC protocol.
While our work provides a better understanding of QUIC’s
goals and the extent
to which the current draft protocol
meets them, this is not yet an end-to-end veriﬁcation of the
protocol, as the proofs for the protocol logic would have to
be signiﬁcantly expanded and strengthened to connect
the
guarantees from the TLS handshake with those of the record
layer and hence produce a single application-facing theorem
for the entire implementation.
While we prove strong correctness and security properties
for QUIC, like any veriﬁcation result, our guarantees rely on
the correctness of our formalized cryptographic deﬁnitions
and of our veriﬁcation tools. As we show in §VI, while
the performance of our record layer implementation is quite
strong (2 GB/s), our protocol logic limits the performance of
our overall QUIC reference implementation, leaving us 21%
slower than our unveriﬁed baseline.
All of our speciﬁcations, implementations, and proofs are
open source and available on GitHub at:
https://github.com/project-everest/everquic-crypto
https://github.com/secure-foundations/everquic-dafny
II. QUIC BACKGROUND
Because of its integrated nature, it is hard to summarize
QUIC. We introduce the aspects relevant to our security anal-
ysis, focusing on conﬁdentiality, integrity and authentication
goals, but refer to the IETF drafts [36], [52] for details. We
also highlight deviations from QUIC’s original goal of treating
TLS as a black box.
TLS Handshake Interface Early IETF drafts of QUIC (up
to draft 12) used TLS 1.3 opaquely: packets contained full
TLS records (Figure 2). The TLS record layer [14] has its
own header format and supports fragmentation, encryption,
padding, and content-type multiplexing. To reduce redundancy
between TLS and QUIC (e.g., double encryption and frag-
mentation of handshake messages), in newer drafts, the QUIC
protocol logic directly interacts with the TLS handshake and
carries its messages in special frames separate from data
streams. The TLS 1.3 handshake negotiates the connection
ciphersuite and parameters, authenticates the peer, and es-
tablishes fresh trafﬁc secrets (used to derive record keys).
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:53 UTC from IEEE Xplore.  Restrictions apply. 
1163
It expects a duplex bytestream for reading and writing its
messages, and a control interface for returning secrets and
signaling key changes:
A ﬁrst, optional early trafﬁc secret is available imme-
diately after handling a client hello message that offers
to use a pre-shared key (PSK). This enables the client
to send application data in its very ﬁrst message (no
round-trip, "0-RTT"), but at a cost: 0-RTT messages
are not forward secure and can be replayed.
The (client and server) handshake trafﬁc secrets are
available after both hello messages are exchanged. A
man-in-the-middle may corrupt the handshake trafﬁc
secret, so TLS messages are only secret against a
passive attacker.
The application ("1-RTT") trafﬁc secrets are available
once the server completes the handshake.
•
•
•
The record layer must be careful not to use trafﬁc secrets until
the handshake indicates that it is safe to do so. For instance,
the application trafﬁc secret is typically available on the server
before the client’s ﬁnished message is received, but the server
must not try to decrypt 1-RTT packets before checking this
message.
Connection Establishment QUIC connections exchange se-
quences of encrypted packets over UDP. There are four main
types of packets: initial packets (INIT) carry the plaintext TLS
messages: client hello, server hello, and hello-retry request.
Like all QUIC packets, they are encrypted, but their trafﬁc
secret is derived from public values, so the encryption is mostly
for error detection. 0-RTT packets are encrypted using a key
derived from the TLS early trafﬁc secret, and similarly, hand-
shake packets (HS) and 1-RTT packets are encrypted using
keys derived from handshake trafﬁc secrets and application
data trafﬁc secrets, respectively.
Packet Headers QUIC packets consist of a header and a
payload. The type of a packet is indicated in the header.
Initial, 0-RTT and handshake packets use long headers while 1-
RTT packets use short headers, as depicted in Figure 3. Long
headers include an explicit payload length to allow multiple
packets to be grouped into a single UDP datagram. In contrast,
the length of packets with short headers must be derived from
the encapsulating UDP length. Hence, UDP datagrams contain
at most one such packet, at the end.
Connection Identiﬁers Multiple QUIC connections can share
the same IP address and UDP port by using separate con-
nection IDs. This is particularly useful for servers, e.g., to
route connections behind a load balancer. Clients may also
use this feature to work around port restrictions and NAT
congestion. Long headers include both a source and destination
connection ID (of variable length). In its initial packet, the
client picks its own source ID and the initial ID of the server
as destination. Servers are expected to overwrite this initial
choice by picking a new source ID in their response. Once the
connection is established, the connection IDs are presumed to
be authentic and of known length (either ﬁxed, or encoded in
the ID itself). Hence, short headers omit the source ID and the
length of the destination ID. Connection IDs are a clear risk for
privacy, since they correlate individual packets with sessions.
QUIC encourages long-lived connections that can be migrated
from one network path to another. For instance, if a mobile
1164
T: Type
R: Reserved
P: PN length
Version (32)
Destination Connection ID (0..160)
+-+-+-+-+-+-+-+-+
|1|1| T |R R|P P|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| DCID Len (8) | Dest. connection ID length
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| SCID Len (8) | Source connection ID length
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
Source Connection ID (0..160)
Packet Number (8/16/24/32)
Payload Length (varint)
Payload
S: Spin bit K: Key phase bit
Destination Connection ID (0..160)
+-+-+-+-+-+-+-+-+
|0|1|S|R|R|K|P P|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
Fig. 3: QUIC long (top) and short (bottom) packet headers.
Initial, retry, handshake and 0-RTT packets use long headers,
whereas 1-RTT packets use short headers.
Packet Number (8/16/24/32)
Protected Payload
device switches from cellular to Wi-Fi, it is possible to migrate
the connection on the new network while maintaining the
current connection state, thus preventing the overhead of a re-
establishing the connection. To manage this privacy risk, peers
can declare and retire connection IDs, and privacy-conscious
clients may change their ID in every packet.
Packet Numbers and Stream Encryption TLS over TCP
relies on the in-order delivery of message fragments, and thus
encrypts these fragments using a nonce computed from their
implicit fragment sequence number. In contrast, QUIC packets
are sent over UDP and may be dropped or delivered out of
order. Therefore, encryption nonces cannot be implicit, which
causes both communication overhead (full nonces are usually
12 bytes) and privacy concerns: if full nonces are sent on the
wire, they can be used to map packets to connections and their
users. QUIC connections can be very long-lived, and the most
signiﬁcant bits of the nonce become increasingly precise at
identifying users. To address these concerns, QUIC’s record
layer introduces a new semi-implicit nonce construction that
combines two ideas: only the least signiﬁcant (and least privacy
sensitive) bits of the nonce are sent on the wire; and those bits
are further encrypted under a special header-protection key.
This construction is detailed in §III-A.
In TLS over TCP, trafﬁc secrets protect separate, successive
authenticated encryption streams, with explicit
termination
messages to transition between keys and prevent truncation
(end of early data message for 0-RTT, ﬁnished messages for
the handshake, and the re-keying messages and closure alerts
for 1-RTT). In QUIC, multiple keys may be active at the same
time, which makes the logic for selecting and discarding keys
much more involved. This adds new dangerous pitfalls that
must be actively prevented: for instance, servers may receive
1-RTT data before the handshake is complete (this data is not
yet safe to process), or clients may reply to 1-RTT messages
with 0-RTT ones (the speciﬁcation forbids this, but it is up
to implementations to enforce). Normally, each direction of
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:53 UTC from IEEE Xplore.  Restrictions apply. 
each trafﬁc secret maintains its own packet counter; however,
since only the client may send 0-RTT packets,
they are
acknowledged in 1-RTT packets, which means packet numbers
are shared between 0-RTT and 1-RTT.
Transport Parameter Negotiation QUIC uses a special TLS
extension to negotiate an extensible list of transport parameters
(set or negotiated by the client and server). TLS guarantees
that if the handshake completes, both parties agree on the
parameters.
Version Negotiation QUIC deﬁnes a mechanism for the
server to indicate that it wishes to use a different version
than the one proposed by the client. This mechanism uses
a special version negotiation packet type, which is speciﬁed
in a version-independent document [51] and contains the list
of versions that
the server is willing to use. Surprisingly,
while previous drafts attempted to authenticate the version
negotiation using the transport parameter negotiation through
the TLS handshake, this feature has been removed in current
drafts. Instead the speciﬁcation states: "Version Negotiation
packets do not contain any mechanism to prevent version
downgrade attacks. Future versions of QUIC that use Version
Negotiation packets MUST deﬁne a mechanism that is robust
against version downgrade attacks". It is unclear how future
versions of QUIC will prevent version downgrade attacks.
Regardless of which version the client supports, an attacker
may always inject a version negotiation packet
that only
indicates version 1 support.
III. QUIC RECORD LAYER SECURITY
This section focuses on QUIC’s new record layer. We ﬁrst
describe the cryptographic construction used to encrypt both
packet payloads and selected parts of packet headers (§III-A).
We then present our cryptographic deﬁnition of security for
packet encryption with implicit nonces (§III-B), capturing
QUIC’s packet-number-privacy goal, and we outline its proof
(§III-C). Finally, we discuss vulnerabilities that we discovered
in earlier QUIC drafts, how the construction changed as a
result, frailties that persist in the most recent draft, and our
suggested improvements (§III-D).
A. Background: QUIC Packet Encryption (QPE)
As explained in §II, QUIC packets consist of a header
and a payload. The payload is encrypted using a standard
algorithm for authenticated encryption with additional data
(AEAD, abbreviated AE below), negotiated by TLS as part
of its record ciphersuite. AEAD also takes the header (shown
in Figure 3) in plaintext as additional authenticated data (AAD)
and thus protects its integrity.
QUIC also applies a new and rather convoluted header
protection scheme before sending the packet on the network.
As discussed in §II, because QUIC uses UDP, it must include
a packet number in each packet to cope with packet drops and
reorderings. These packet numbers, however, pose a privacy
risk, as a passive network observer can correlate packets and
sessions, facilitating trafﬁc analysis, particularly given QUIC’s
support for very long-lived, migratable sessions. Employing
random nonces would waste too much space (because of the
risk of birthday collisions, which cause catastrophic integrity
failure, at least 128 bits would be required instead of the
8 to 32 bits of packet number that QUIC advocates). The
LN
Trunc
N 
M 
Flags
Headers 
Nlsb
SIV
H
H’ 
AE.Enc
K1
Sample
C 
Protected Packet
PRF
K2
Fmask
0        Nmask
0
HP Mask
Fig. 4: Overview of the QUIC packet encryption (QPE)
construction with header protection (HP), parameterized by the
AEAD scheme AE and keyed pseudo-random function PRF
situation is further complicated by QUIC’s decision to use
variable-length packet numbers, which means the length must