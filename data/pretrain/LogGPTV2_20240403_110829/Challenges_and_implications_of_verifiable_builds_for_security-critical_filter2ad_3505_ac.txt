3,466,248
3,432,471
3.2.2
Initial challenges
Once the environment is correctly installed, we can open
the Visual Studio solution ﬁle TrueCrypt.sln and build it in
“release” conﬁguration.
Flat comparison. Our ﬁrst naive attempt takes place in a
virtual machine running Windows 7 Professional 64-bit edi-
tion with the prerequisites installed. Table 1 shows the sizes
of our compiled binaries and the oﬃcial ones from v7.1a.
File sizes do not match, leading to diﬀerent hashes.
If
the build process was made deterministic, we would have a
match at this point. First of all, one obvious reason for the
ﬁle size diﬀerence is the presence of digital signatures (or
lack thereof) that we explain below. However, there are also
a number of other diﬀerences that we explore in this section.
The oﬃcial binaries are all signed with an embedded
X.509 certiﬁcate that belongs to the “TrueCrypt Founda-
tion”, which increases the ﬁle size. This is an issue for the
purpose of reproducing an exact match, since it is impossible
to generate a signature for the binaries on the developers’
behalf. Hence, it is not possible to reproduce an exact match
of any of the binaries if we are not in possession of the oﬃcial
build’s ﬁles. Indeed, the original signatures can be extracted
from the oﬃcial ﬁles and reused in our build as is. These sig-
natures would be valid if the rest of the ﬁles also matched.
Also, note that the installer (TrueCrypt Setup.exe) is in-
complete after compilation. We must run it with a special
ﬂag (-p) to package the other binaries together and output
a complete installer named TrueCrypt Setup 7.1a.exe.
In
Table 1, we packaged our own binaries for comparison. To
replicate an exact match, the binaries should be signed prior
to being packaged. We therefore ignore the installer until we
can reproduce the other binaries.
Visual Studio updates. The digital signature represents
a small fraction of the binary ﬁles (7,631 bytes in each ﬁle in
v7.1a), and is placed at the end of the ﬁles, which makes it
easy to locate. However, we found that a byte-by-byte com-
parison of each ﬁle still produces signiﬁcant changes, beyond
the signature. We then considered an advanced comparison
technique that attempts to identify matching blocks of bytes,
even if their sizes slightly diﬀer. Such comparison generally
yields a score that represents more accurately the real con-
tent diﬀerence. With respect to the oﬃcial ﬁle sizes and us-
ing such a comparison technique,3 we ﬁnd 60,049 (4.0%) of
mismatching bytes in TrueCrypt.exe, 34,746 bytes (2.2%) in
TrueCrypt Format.exe, 7,673 bytes (3.3%) in truecrypt.sys,
and 7,878 bytes (3.4%) in truecrypt-x64.sys.
We further investigated additional patches available for
Visual Studio 2008 SP1 that do not change the version num-
ber of the software but lead to major changes in the output.
3We used Beyond Compare v3 (scootersoftware.com).
(a)
(b)
(c)
(d)
(e)
(f)
Figure 1: Visual diﬀerences on the binary ﬁles between our
build and the oﬃcial one for TrueCrypt 7.1a using an ad-
vanced comparison technique. (a), (c), (e) and (f) represent
binaries compiled without any updates for VS2008 SP1 in
our build while others are compiled with the proper ones.
Files in (e) and (f) are not inﬂuenced by such updates. (a)
and (b) represent TrueCrypt.exe; (c) and (d) TrueCrypt For-
mat.exe; (e) truecrypt.sys; (f) truecrypt-x64.sys. Red areas
represent approximate diﬀerences with coarse granularity
(the thinnest red line represents up to 2.8% diﬀerences).
In other words, we should restore an environment that con-
tains the same updates for the compiler as what the au-
thors had installed when they compiled the oﬃcial release.
As there is no mention about which patches were installed
in their environment, we needed to manually go by trial
and error. To reduce the diﬀerences between our build and
the oﬃcial binaries, we ﬁgured that we needed to install all
the updates that were available when a particular version of
TrueCrypt was released. The core updates are KB971092,
KB973675, and KB972222 for versions 6.1 to 7.0a, with the
addition of KB2538241 for 7.1 and 7.1a. With these only up-
dates installed, we minimize the diﬀerences. Figure 1 shows
a visual representation of the diﬀerences between our build
and the oﬃcial ﬁles in the case where no updates are in-
stalled, or the proper updates are installed. This indicates
that the developers had their system up-to-date, however
such observation may not stand in general.
For versions 5.0 to 5.1a that were compiled with Visual
Studio 2005 SP1, a single core update (KB937061) is avail-
able, which was released ﬁve months before the release of
TrueCrypt v5.0. We hence installed it before carrying our
experiments, unlike our ﬁrst tries with more recent versions
of TrueCrypt. For versions 6.0 and 6.0a, no update was
available for Visual Studio 2008 at the time of their release.
it is
important to use the same exact version of the compilers
and tools installed on the developers’ build machine, since a
slight diﬀerence can signiﬁcantly change the output binaries.
Thus, for the purpose of verifying oﬃcial builds,
3.2.3 Build path
The ﬁles truecrypt.sys and truecrypt-x64.sys are the 32-
bit and 64-bit Windows drivers, respectively, which take care
of all features related to the OS, such as providing virtual
disks and supporting full disk or system partition encryp-
tion. The number of diﬀerences between our build and the
oﬃcial one remains signiﬁcant. While investigating them,
we found that these ﬁles contain various debug information,
including the full project path. These debug parameters are
references to a Program DataBase (PDB) debug info ﬁle and
are inserted by the linker to match the corresponding debug
ﬁle [32]. The short debug section in the binaries contains
the path of the PDB debug ﬁle, located under the project
directory. The project folder in our test environment was
located on the user’s desktop while the developers had it
apparently in c:\truecrypt-7.1a. The diﬀerence in the path
length leads to a shift of the remaining data in this debug
section, plus an oﬀset in some addresses that point to lo-
cations in the ﬁle. By compiling the software again after
moving the project directory to the same location as in the
oﬃcial build, these diﬀerences were gone. Note that, in the
other ﬁles, there is no debug information and hence no link
to the build path. Hence, the build path can sometimes in-
ﬂuence the output and should be taken into account while
setting up the environment. Throughout the 16 versions
we analyzed, the project path usually contains the version
number and is located in the root of the C drive; however
some project paths are found without a reference to the ver-
sion number and/or are located in an E or T drive. As we
found, the project paths are c:\truecrypt-7.1 for version 7.1,
c:\truecrypt-7.0a for 7.0a, c:\truecrypt for 6.3a, t:\truecrypt
for 6.3, c:\truecrypt-6.2a for 6.2a and similar down to 5.1a,
e:\testworkspace\truecrypt\main for 5.1, 5.0a and 5.0.
3.3 Sources of non-determinism
To understand the diﬀerences between our compiled bina-
ries and the original ones, we perform a byte-by-byte com-
parison. Below we analyze each ﬁle individually. We mainly
focus on the latest version of TrueCrypt (v7.1a) with all
addresses and oﬀsets cited referring to this version, unless
otherwise speciﬁed.
3.3.1 TrueCrypt.exe and TrueCrypt Format.exe
Visually from Figures 1 (b) and (d), there are three main
regions that host diﬀerences in TrueCrypt.exe.
First region. The ﬁrst region is located in the ﬁle header,
and contains three diﬀering elements. The ﬁrst one is at
ﬁle oﬀset 0x000000F8 that corresponds to the time/date-
stamp in the COFF/PE ﬁle header. The second is located
at ﬁle oﬀset 0x00000148 that corresponds to the checksum
in the PE optional header. Finally, the third one at oﬀset
0x00000188 that corresponds to the certiﬁcate table in the
optional data directories header.
According to Microsoft documentation [30], time/date-
stamp corresponds to the time and date the ﬁle was created.
Since we compiled TrueCrypt at a diﬀerent time than the
developers, this diﬀerence is legitimate. Then, the checksum
corresponds to the image ﬁle checksum based on a Microsoft-
speciﬁc algorithm [47]. This checksum is diﬀerent because
our compiled executable has slight diﬀerences that are cov-
ered by this checksum, resulting in diﬀerent values, for which
we veriﬁed the correctness. Hence, this diﬀerence is also
legitimate. Finally, the certiﬁcate table contains a certiﬁ-
cate data ﬁeld, which is a pointer to a certiﬁcate in the
ﬁle; along with ﬁeld about the certiﬁcate size. This table
provides information regarding the X.509 signature over the
ﬁle that is included in the oﬃcial binaries. Because we do
not have certiﬁed binaries, the certiﬁcate table is all zeros,
whereas the original ﬁle points to some certiﬁcate data at
oﬀset 0x00170600 in the ﬁle (see the third region).
Second region. The second region of diﬀerences is located
at about two thirds of the ﬁle.
It corresponds to a read-
able time and date written in English and what seems to be
also a timestamp encoded as a 32-bit integer. Converting
this alleged timestamp to a readable date and time, we ﬁnd
that it matches the written date, conﬁrming it is simply a
timestamp. Interestingly, we can deduce the time zone of
the compiling machine, since the time written is interpreted
with respect to the machine settings while the timestamp is
a POSIX time representing the number of elapsed seconds
relative to a reference UTC time. In this case, the timestamp
of the oﬃcial binary converts to 2012-02-07 09:08:50 UTC
while the written date and time reads “Tue Feb 07 10:08:49
2012”. This informs that the time zone of the machine which
built the executable was set to UTC+1 (CET).
In the 11 versions from 5.0 to 6.3, more diﬀerences arise
in this section. Further investigations reveal that they are
located in the resource section of the executable, and corre-
spond to an Interface Deﬁnition Language (IDL) ﬁle com-
piled by the Microsoft IDL compiler. The OLE-COM Object
Viewer in Windows SDK can decompile this resource. By
comparing our decompiled IDL resource to the decompiled
oﬃcial one, only the timestamp and written date remain
diﬀerent, meaning both resources are functionally identical.
Despite our eﬀorts to recreate many possible build environ-
ments, we were unable to reproduce an IDL resource that
only includes diﬀerences in the timestamps in a way that is
visible from the compiled format directly, as it is the case in
later versions of TrueCrypt.
For version 6.3, using the SDK for .NET Framework 3.5
SP1 (v7.0) that was available at the time of release of
this version of TrueCrypt, yields a diﬀerent Rich signature
(see [36]) in the DOS stub part of the PE header of True-
Crypt’s executables. The diﬀerence resides in the comp.id
row number 148 that corresponds to a subversion 30729 in
our case, while the original ﬁle shows a subversion 21022.
This indicates that a component in the toolchain diﬀers.
Once we switched to the latest version (v7.1), this problem
was solved and only the diﬀerence in the IDL resource re-
mained. However, this later version of the SDK was released
7 months after the release of TrueCrypt 6.3, and thus could
not have been used by the developers. One possible expla-
nation is that the authors had Visual Studio 2010 installed
on their system, which comes with the intermediate version
7.0A of the SDK, and conﬁgured Visual Studio 2008 to use
it. However, Visual Studio 2010 was also released 6 months
after this version of TrueCrypt. The only realistic possibil-
ity is that the authors were using Visual Studio 2010 beta 1
or 2 on their machine, which was released 5 months and 2
days, respectively, before TrueCrypt 6.3. They would have
had to conﬁgure Visual Studio 2008 accordingly. We were
unfortunately unable to ﬁnd this beta version for further
tests. This problem demonstrates that the sources of non-
reproducibility can be diﬃcult to identify and thus diﬃcult
to troubleshoot.
Third region. Finally, at the end of the ﬁle, the third re-
gion of diﬀerences starts at 0x00170600 and shows us that
the original ﬁle contains more information. Recall from the
ﬁrst region that this oﬀset is directly pointed to by the
certiﬁcate table and hence is related to the digital signa-
ture. We can safely ignore the presence of the certiﬁcate
in the oﬃcial binaries, since a signature and certiﬁcate are
normally harmless (cf. Microsoft’s documentation: “[t]hese
certiﬁcates are not loaded into memory as part of the im-
age.” [30]) Thus, if this section contains malicious code, it
has to be loaded by the program ﬁrst, which would be seen
in the source code (its review is out of our scope, though).
It is to be noted that apart from these three unimportant
mismatches (timestamps, checksum, presence of certiﬁcate),
the rest of the ﬁles are identical. This indicates that our
TrueCrypt.exe and the oﬃcial one are identical. Also, in
TrueCrypt Format.exe, we ﬁnd the same patterns of diﬀer-
ence as TrueCrypt.exe. As we explained the unimportance
of these diﬀerences in the case of TrueCrypt.exe, we can con-
clude that our TrueCrypt Format.exe and the oﬃcial one are
also coming from the same source.
3.3.2 Truecrypt.sys and truecrypt-x64.sys
Apart from the build path issue that we solved when cre-