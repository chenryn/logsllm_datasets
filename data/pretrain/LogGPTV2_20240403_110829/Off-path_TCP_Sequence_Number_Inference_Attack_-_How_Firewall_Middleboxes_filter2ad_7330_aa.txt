title:Off-path TCP Sequence Number Inference Attack - How Firewall Middleboxes
Reduce Security
author:Zhiyun Qian and
Zhuoqing Morley Mao
2012 IEEE Symposium on Security and Privacy
Off-Path TCP Sequence Number Inference Attack
How Firewall Middleboxes Reduce Security
Zhiyun Qian, Z. Morley Mao
{zhiyunq,zmao}@umich.edu, University of Michigan
Abstract—In this paper, we report a newly discovered “off-
path TCP sequence number inference” attack enabled by
ﬁrewall middleboxes. It allows an off-path (i.e., not man-in-
the-middle) attacker to hijack a TCP connection and inject
malicious content, effectively granting the attacker write-only
permission on the connection. For instance, with the help
of unprivileged malware, we demonstrate that a successful
attack can hijack an HTTP session and return a phishing
Facebook login page issued by a browser. With the same
mechanisms, it is also possible to inject malicious Javascript to
post tweets or follow other people on behalf of the victim. The
TCP sequence number inference attack is mainly enabled by
the sequence-number-checking ﬁrewall middleboxes. Through
carefully-designed and well-timed probing, the TCP sequence
number state kept on the ﬁrewall middlebox can be leaked to
an off-path attacker. We found such ﬁrewall middleboxes to
be very popular in cellular networks — at least 31.5% of the
149 measured networks deploy such ﬁrewalls. Finally, since
the sequence-number-checking feature is enabled by design, it
is unclear how to mitigate the problem easily.
I. INTRODUCTION
TCP was initially designed without many security con-
siderations and has been evolving for years with patches to
address various security holes. One of the critical patches is
the randomization of TCP initial sequence numbers (ISN)
which can guard against off-path spooﬁng attacks attempt-
ing to inject packets with a forged source address (for data
injection or reset attacks) [19]. ISN randomization prevents
sequence numbers from being predicted, thus arbitrarily
injected packets are likely to have invalid sequence numbers
which are simply discarded at the receiver.
Firewall vendors soon realized that they can in fact per-
form sequence number checking at network-based ﬁrewalls
and actively drop invalid packets even before they can reach
end-hosts, a functionality advertised in products from major
ﬁrewall vendors [15], [21], [3]. This feature is believed
to enhance security due to the early discard of injected
packets and the resulting reduced wasted network and host
resources. Ironically, we discover that the very same feature
in fact allows an attacker to determine the valid sequence
number by probing and checking which sequence numbers
are valid using side-channels as feedback. We name this
attack “TCP sequence number inference attack”.
Using the sequence number inference as a building block,
we design and implement a number of attacks including
TCP hijack. In general, all of our attacks require IP spoof-
ing, which is still very common on the Internet according
to a recent study [13]. Besides IP spooﬁng, different attacks
may have different requirements. For instance, a long-lived
connection inference attack requires only a remote attacker
to perform remote scanning and injection of exploits on
services that run over unencrypted long-lived connections
(e.g., HTTP-based push services [5]). In contrast, TCP
hijack requires an unprivileged and lightweight malware
residing on the victim.
We implement all except one attacks that we proposed.
They are experimented speciﬁcally on mobile devices op-
erating under a nation-wide carrier that extensively deploys
sequence-number-checking ﬁrewall middleboxes. We show
that a successful TCP hijacking allows an attacker to take
over a connection and inject malicious payload right after
the connection is established. For instance, we demonstrated
that the attack can return a phishing Facebook login page,
as shown in a short YouTube video [9]. We can also inject
malicious Javascript to perform actions on behalf of a victim
user, e.g., to post tweets or follow other people.
We emphasize that even though our attack is implement-
ed on mobile phones, it is not restricted to mobile devices
or mobile networks. The reason for choosing this speciﬁc
setting is that mobile networks make our experiments easier
to carry out, as we have direct access to end devices behind
the ﬁrewall. Also, the attack model of most TCP hijacking
requires an unprivileged malware residing on the victim
which ﬁts the smartphone model well in that users often
download untrusted third-party apps.
According to our measurement study, such ﬁrewalls are
deployed in many carriers – at least 31.5% out of 149.
This means the sequence number inference attack is widely
applicable. It is likely to become more prevalent in the
future as such functionality is considered to be advanced
and desirable. Moreover, since we exploit the very behavior
of sequence number checking — a ﬁrewall feature by
design, it is unclear how to easily address the problem
besides disabling the feature or employing application-layer
encryption.
Our study makes the following contributions:
• We discover and report the TCP sequence number
inference attack enabled by ﬁrewall middleboxes. We
also devise techniques leveraging it as a building block
to achieve TCP hijacking and a number of other
attacks.
• We measure the popularity and characteristics of such
middleboxes and found they are widely deployed in
major cellular networks throughout the world.
• We survey a broad list of impacted applications rang-
ing from Web-based attacks of directing users to a
© 2012, Zhiyun Qian. Under license to IEEE.
DOI 10.1109/SP.2012.29
347
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:32 UTC from IEEE Xplore.  Restrictions apply. 
spoofed login page, application-based attacks of in-
jecting malicious links to Windows Live Messenger
chat messages, to attacks against servers in the form
of DoS and spamming.
In the rest of the paper, we describe related attacks in §II
and fundamentals of the TCP sequence number inference
attack in §III. Next, we discuss the detailed attack require-
ments and design in §IV-B, and implementation results in
§V. In §VI, we measure how many cellular networks have
deployed the sequence-number-checking ﬁrewall middle-
boxes. In §VII, we describe what applications are impacted.
Finally, we discuss what went wrong and conclude in §VIII.
II. RELATED WORK
TCP-sequence-number-related attacks. In the past two
decades, researchers have discovered a number of TCP
attacks [33], [1], [12]. The most notable ones are TCP
sequence number prediction [1] and TCP reset attack [33],
[19]. Both attacks are related to IP spooﬁng and TCP
sequence number, which are also the focus of our attack.
Sequence number prediction attack. Twenty years ago,
the TCP Initial Sequence Numbers
certain OSes select
(ISN) based on a global counter which is incremented by a
constant amount every second. It allows an attacker who has
opened a connection to a server to obtain its current global
counter and predict its next ISN with high conﬁdence. With
this prediction ability, an attacker can spoof the IP of a
trusted client when talking to a target server, and complete
the TCP 3-way handshake based on the guess of server’s
next ISN. The problem is ﬁxed after the randomization of
ISN is standardized and adopted.
Blind TCP RST attack. As described in RFC 5961 [27],
the attack is possible because a reset (RST) packet is accept-
ed as long as its sequence number falls within the current
TCP receive window. In a long-lived connection (e.g., BGP
sessions), an attacker knowing the target four-tuple can sim-
ply use brute force all sequence number ranges. Watson [33]
has analyzed in detail the number of packets needed under
various OS/setup taking into consider the source port can
be random. A number of proposals, e.g., requiring the RST
sequence number to exactly match the expected sequence
number, are discussed in RFC 4953 [31]; however, they are
not widely adopted likely due to backward-compatibility
issue and the fact that source port randomization can already
alleviate the problem.
Sequence number inference attack. The ﬁrst known se-
quence number inference attack is described in 1999 [6]
where the Linux 2.0.X kernel has a bug that silently drops
the third packet in the three-way handshake when the ACK
number is too small, and sends a reset when the ACK
number is too big. Such behavior allows an attacker to infer
the correct ACK number in an ACK packet to complete the
TCP connection. However, it is an isolated bug that has
been ﬁxed since then. The other relevant attack described
in Phrack magazine [24] infers the sequence number by
relying on the fact that a packet with in-window sequence
number can be silently dropped and a packet with out-of-
window sequence number will trigger an outgoing ACK
packet. The limitations of this work are that 1) it requires
sending two orders of magnitude more packets considering
the TCP receive window is usually very small (e.g., 16K);
2) it relies on a very noisy feedback channel (i.e., IPID) on
the end-host. It is only targeting at long-lived connections
where the host has low trafﬁc rate.
Side-channel information leakage. Side channel leaks
are known for decades. There are a wide range of side
channels including CPU usage, power usage, shared mem-
ory/ﬁles, etc.. A variety of attacks are possible using side
channels [35], [30], [14], [16]. For example, researchers
have shown that it is possible infer keystrokes through
shared registers [35] and packet size/timing analysis on
encrypted trafﬁc [30], [14]. On the newly emerged smart-
phones, various on-board sensors can also be used as side-
channels. For instance, Soundcomber [29] uses the audio
sensor to stealthily record credit card numbers entered
through keypad. In our work, we also rely on network side-
channels to infer TCP sequence number.
Middlebox security. Firewall middleboxes have been
introduced for many years [21], [3]. Previous work has dis-
covered various vulnerabilities on the ﬁrewalls themselves
that range from not properly checking the sequence number
of TCP RST packets resulting in DoS attack on active
connections [4], to failure to correctly process specially-
crafted packets forcing the middlebox to reload or hang. A
more complete summary on ﬁrewall vulnerabilities can be
found in a study done by Kamara et al. [22].
III. FUNDAMENTALS OF TCP THE SEQUENCE NUMBER
INFERENCE ATTACK
In this section, we introduce the sequence number in-
ference attack by ﬁrst describing the behavior of sequence
number checking ﬁrewalls, then discussing how to use side
channels to infer the sequence number state kept on such
ﬁrewalls, and ﬁnally illustrating the attack by an example.
A. Sequence-Number-Checking Firewalls
Many stateful ﬁrewalls that track TCP state (e.g., SYN-
SENT, ESTABLISHED) also track the sequence numbers of
the bidirectional trafﬁc. All major vendors including Cisco,
Juniper, and Check Point have such products [15], [21],
[3]. Typically, once a TCP connection is established, it only
allows packets with sequence numbers within a window of
the previously seen sequence numbers to go through. As
an example illustrated in Figure 1(a), when the client and
server exchange SYN and SYN-ACK packets, the ﬁrewall
remembers the current sequence number to be X and Y
for client and server respectively. Later packets originated
from both sides will have to be in the window of X or
Y, otherwise, they will be silently dropped. Such a feature
is to prevent arbitrary packets from being injected into the
connection. A window is needed because packets may arrive
348
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:32 UTC from IEEE Xplore.  Restrictions apply. 
out of order and should still be allowed by the ﬁrewall. Note
that acknowledgment number is typically not checked by
the ﬁrewall because packets may or may not even set the
ACK ﬂag. In fact, we veriﬁed that all major OSes accept
incoming data packets that do not have ACK ﬂag set. Based
on our observation and experiments with real ﬁrewalls (See
§VI), we found that sequence-number-checking ﬁrewalls
may behave differently in the following ways.
this requires the ﬁrewall
Window size: Ideally, the ﬁrewall should acquire ac-
curate state information associated with the end-host and
accepts packets if and only if they will be accepted by
the end-host. For instance,
to
dynamically track the advertised receive window of the
end-host, which can be expensive in terms of overhead.
In practice, we found that ﬁrewalls typically initializes the
window size to a ﬁxed value according to the window
scaling factor (a TCP option) carried in the SYN and SYN-
ACK packet. It is typically calculated as 64K × 2N , where
N is the window scaling factor. The maximum possible
receive window size is 1G and some ﬁrewalls simply use
the ﬁxed 1G window directly.
Left-only or right-only window: Some ﬁrewalls may
only have a left window or right window such as (Y-WIN,
Y) or (Y,Y+WIN). As discussed later, we found the nation-
wide carrier that we studied indeed has left-only window
ﬁrewalls because it buffers out-of-order (right-window)
packets. Similar behavior was previously reported [32].
Window moving behavior: We found two general cases
when the existing window will move: 1) In-order TCP
packet arrives. It implies that the window can only move
forward. We thus name it window advancing. 2) Any
packet with an in-window sequence number. For instance,
if Z is in (Y-WIN, Y+WIN), it can shift the window to
(Z-WIN,Z+WIN). It implies that the window can either
move forward or backward. We name this behavior window
shifting. For the rest of the paper, we assume the window
advancing behavior, which is more popular according to
our measurement study, unless explicitly stated otherwise.
Such ﬁrewall products claim that the sequence-number-
checking feature can improve security by defending against
connection hijacking [3], which ironically turns out to be
the opposite. We demonstrate that as long as the target four-
tuple (source/destination IP and port) is known, an attacker
can probe using the spoofed target four-tuple to infer the
valid sequence number, due to the very behavior that the
ﬁrewall treats packets with in-window and out-of-window
sequence numbers differently. Figure 1(b) illustrates such
an attack model. The ﬁrewall’s differentiation behavior,
coupled with the ability that an attacker can get feedback
regarding which packets are allowed, effectively breaks the
non-interference security property [16]. We discuss how to
obtain the target four-tuple and feedback below.
B. Obtaining Four Tuples – Threat Model
We outline three main threat models where the target
four-tuple can be known:
349
(1). On-site TCP injection/hijacking. An unprivileged
malware runs on the client with access to network and
the list of active connections through standard OS interface
(e.g., “netstat” command). It cannot
tamper with other
applications or OS services. A successful TCP sequence
number inference attack in this case can compromise the
security of other applications or even OS services.
Note that the attacker can also carry out other local
privilege-escalation attacks under this threat model, but
the most known privilege-escalation attacks on Android
are still at the application layer without breaking the OS
sandbox [18]. In contrast, our attack allows the malware
to break the sandbox and compromise the security of other
apps. Regardless, our attack provides additional capabilities
to the attackers.
(2). Off-site TCP injection. An attacker simply guesses
the four tuples. For instance, popular services typically
have well-known port numbers and a few load-balancing IP
addresses. To attack such services, the attacker only needs
to enumerate client IP and port number. This usually works
only when the target connection is long-lived, e.g., instant
messenger or push notiﬁcation services.
(3). Establish TCP connection using spoofed IPs. An
attacker in this case initiates the connection himself, in
which case the four tuples are obviously known. Coupled
with IP spooﬁng, an attacker can use this attack to establish
TCP connections with a target server using spoofed IPs
(e.g., for spamming or denial-of-service).
C. Obtaining Feedback – Side Channels
As mentioned, to launch the sequence number inference
attack, an attacker needs feedback regarding which packets
went
through the ﬁrewall. We discover two main side-
channels that can serve the purpose:
1. OS packet counters: On Linux,
the procfs [23]
exposes aggregated information on the number of incom-
ing/outgoing TCP packets, with or without errors (e.g.,
wrong checksum). Alternatively, “netstat -s” exposes a simi-
lar set of information on all major OSes including Windows,
Linux, BSD, and smartphone OSes like Android and iOS.
If the packet went through the ﬁrewall middlebox, then
the incoming packet counter will increment accordingly.
Although such counters can be noisy as they are aggregated
over the entire system, we show that some of the TCP error
counters rarely increment under normal conditions and can
be leveraged as a clean side channel.
2. IPIDs from responses of intermediate middleboxes:
IPID is a 16-bit ﬁeld in the IP header. In practice, many
OSes, including middlebox OSes, have such monotonically
incrementing IPIDs (a known side channel for inferring
how many packets a target system has sent [26]). In
addition, many networks allow intermediate middleboxes