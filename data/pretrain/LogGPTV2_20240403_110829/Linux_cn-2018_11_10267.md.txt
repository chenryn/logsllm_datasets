# 容器技术对 DevOps 的一些启发

作者：Chris Hermansen  
分类：观点  
发布日期：2018-11-23 09:37:07  
更新日期：2018-11-23 09:37:07  
译者：littleji  
校对：pityonline, wxy  
选题：lujun9972  
来源：[开源中国](https://opensource.com/article/18/9/containers-can-teach-us-devops)  

> 容器技术的使用支撑了目前 DevOps 的三大主要实践：工作流、及时反馈和持续学习。

![](/data/attachment/album/201811/23/093710ewxvpywwrbpo260w.png)

有人认为容器技术和 DevOps 在发展过程中是相辅相成的。随着 DevOps 设计理念的普及，容器生态系统在设计和组件选择上也得到了相应的发展。同时，容器技术在生产环境中的应用反过来也促进了 DevOps 的三大主要实践：[支撑 DevOps 的三个实践](https://itrevolution.com/the-three-ways-principles-underpinning-devops/)。

## 工作流

### 容器中的工作流
每个容器都可以视为一个独立的运行环境。对于容器内部，无需考虑外部的宿主环境、集群环境或其他基础设施。从外部来看，容器内运行的应用通常是整个系统架构的一部分，例如 Web API、Web 应用用户界面、数据库、任务执行、缓存系统和垃圾回收等。运维团队通常会限制容器的资源使用，并建立完善的性能监控服务，以减少其对基础设施或下游其他用户的影响。

### 现实中的工作流
与“容器”类似，业务功能独立的团队也可以借鉴这种思维。无论是现实中的工作流（如代码发布、构建基础设施，甚至制造 [《杰森一家》中的斯贝斯利太空飞轮](https://en.wikipedia.org/wiki/The_Jetsons)），还是技术中的工作流（开发、测试、运维、发布）都采用了线性工作流。如果某个独立环节或团队出现问题，整个下游都会受到影响。虽然这种线性工作流有效降低了工作耦合性，但一旦某个环节出现问题，整个流程都会受影响。

### DevOps 中的工作流
DevOps 的第一条原则是掌控整个执行链路的情况，努力理解系统如何协同工作，并理解其中的问题如何影响整个过程。为了提高流程效率，团队需要不断发现并修复系统中的性能浪费和问题。

> “践行这样的工作流后，可以避免将已知缺陷带到工作流的下游，避免局部优化导致可能的全局性能下降，要不断探索如何优化工作流，持续加深对系统的理解。”
> —— Gene Kim，《[支撑 DevOps 的三个实践](http://itrevolution.com/the-three-ways-principles-underpinning-devops)》，IT 革命，2017.4.25

## 反馈

### 容器中的反馈
除了限制容器的资源，许多产品还提供了监控和通知容器性能指标的功能，以便了解容器在不正常工作时的状态。例如，目前流行的 [Prometheus](https://prometheus.io/) 可以用来收集容器和容器集群的性能指标数据。容器特别适用于分隔应用系统和打包代码及其运行环境，但也带来了不透明性。因此，快速收集信息来解决内部问题是至关重要的。

### 现实中的反馈
在现实中，从始至终都需要反馈。高效的处理流程中，及时的反馈能够快速定位问题发生的时间。反馈的关键在于“快速”和“相关”。当团队被大量不相关的事件淹没时，真正需要快速反馈的重要信息很容易被忽视，并向下游传递形成更严重的问题。想象一下，如果露西和埃塞尔（上世纪 50 年代的著名黑白情景喜剧《我爱露西》中的主角）能够很快意识到传送带太快，那么制作出的巧克力可能就没什么问题了（尽管这样就不那么搞笑了）。

### DevOps 中的反馈
DevOps 的第二条原则是快速收集所有相关的有用信息，以便在问题影响到其他开发流程之前识别出来。DevOps 团队应该努力“优化下游”，并快速解决可能影响后续团队的问题。同工作流一样，反馈也是一个持续的过程，目标是快速获得重要信息并在问题出现后及时响应。

> “快速的反馈对于提高技术的质量、可用性和安全性至关重要。”
> —— Gene Kim 等人，《DevOps 手册：如何在技术组织中创造世界级的敏捷性、可靠性和安全性》，IT 革命，2016

## 持续学习

### 容器中的持续学习
践行第三条原则“持续学习”是一个不小的挑战。容器技术使我们的开发工程师和运营团队能够在不需要掌握太多边缘或难以理解的知识的情况下，安全地进行本地和生产环境的测试。即使是一些激进的实验，容器技术仍然让我们轻松进行版本控制、记录和分享。

### 现实中的持续学习
举个我自己的例子：多年前，作为一个年轻且初出茅庐的系统管理员（仅工作三周），我被安排修改一个运行着某大学核心 IT 部门网站的 Apache 虚拟主机配置。由于没有方便的测试环境，我直接在生产站点上进行了修改。几分钟后，我无意中听到隔壁同事说：
“等会，网站挂了？”
“没错，怎么回事？”
很多人蒙圈了……
在被嘲讽之后（真实的嘲讽），我一头扎在工作台上，赶紧撤销之前的更改。当天下午晚些时候，部门主管——我老板的老板的老板——来到我的工位询问发生了什么事。“别担心，”她告诉我。“我们不会责怪你，这是一个错误，现在你已经学会了。”

而在容器中，这种情况在我的笔记本上就可以轻松测试，并且也很容易在部署生产环境之前被经验丰富的团队成员发现。

### DevOps 中的持续学习
持续学习文化的一部分是我们每个人都希望通过一些改变来提高某些方面，并勇敢地通过实验来验证我们的想法。对于 DevOps 团队来说，失败无论是对团队还是个人来说都是成长而不是惩罚，所以不要畏惧失败。团队中的每个成员不断学习和共享，也会不断提升其所在团队和组织的水平。

随着系统越来越细分，我们需要将注意力集中在具体的点上：上述两条原则主要关注整体流程，而持续学习则关注整个项目、人员、团队和组织的未来。它不仅影响流程，还影响流程中的每个人。

> “实验和冒险让我们能够不懈地改进我们的工作，但也要求我们尝试之前未用过的工作方式。”
> —— Gene Kim 等人，《[凤凰计划：让你了解 IT、DevOps 以及如何取得商业成功](https://itrevolution.com/book/the-phoenix-project/)》，IT 革命，2013

## 容器技术带给 DevOps 的启迪

有效地应用容器技术可以帮助我们学习 DevOps 的三条原则：工作流、反馈和持续学习。从整体上看应用程序和基础设施，而不是对容器外的东西置若罔闻，教会我们考虑到系统的各个部分，了解其上游和下游影响，打破隔阂，并作为一个团队工作，以提升整体表现和深度了解整个系统。通过努力提供及时准确的反馈，我们可以在组织内部创建有效的反馈机制，以便在问题发生影响之前发现问题。最后，提供一个安全的环境来尝试新的想法并从中学习，教会我们创造一种文化，在这种文化中，失败一方面促进了我们知识的增长，另一方面通过有根据的猜测，可以为复杂的问题带来新的、优雅的解决方案。

---

本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出。