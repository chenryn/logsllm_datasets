title:Traitor Deterring Schemes: Using Bitcoin as Collateral for Digital
Content
author:Aggelos Kiayias and
Qiang Tang
Traitor Deterring Schemes: Using Bitcoin as Collateral for
Digital Content
Aggelos Kiayias
National and Kapodistrian University of Athens
Dept. of Informatics and Telecommunications
PI:EMAIL
Qiang Tang
University of Connecticut
Dept. of Computer Science and Engineering
PI:EMAIL
ABSTRACT
We put forth a new cryptographic primitive called a Traitor
Deterring Scheme (TDS). A TDS is a multi-recipient public-
key encryption scheme where an authority issues decryption
keys to a set of users. The distinguishing feature of a TDS is
that secret-keys are issued only after the users provide some
private information as a form of collateral. The traitor de-
terring property ensures that if a malicious coalition of users
(aka “traitors”) produces an unauthorized (aka “pirate”) de-
cryption device, any recipient of the device will be able to re-
cover at least one of the traitors’ collaterals with only black-
box access to the device. On the other hand, honest users’
collaterals are guaranteed to remain hidden. In this fashion
a TDS deincentivizes malicious behavior among users.
We model, construct and analyze TDS’s based on various
cryptographic assumptions and we show how bitcoin can be
used as collateral for real world deployment of TDS’s for the
distribution of digital content. Along the way, we present
cryptographic building blocks that may be of independent
interest, namely fuzzy lockers, and comparison predicate en-
cryption schemes for exponentially large domains. We also
compare TDS with previous primitives speciﬁcally traitor
tracing schemes (TTS) introduced by Chor et al. [9] and
digital signets for self enforcement introduced by Dwork et
al. [12]. A TDS constitutes a strict strengthening of a TTS
and, when modeled in what we call the “known ciphertext
model”, it is a reformulation of digital signets in the public-
key, black-box secure setting. In digital signets the adver-
sary attempts to transmit a pirate copy at a favorable “space
rate”, i.e., without having to send the whole plaintext (and
without revealing the traitor collaterals). It is an open ques-
tion from [12] to construct o(1) space rate schemes under a
falsiﬁable assumption. With our TDS constructions we re-
solve this open question showing feasibility for space rates
O(log λ/λ) and infeasibility for space rates Ω(log2 λ/λ).
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813698.
Categories and Subject Descriptors
K.6 [Management of Computing and Information Sys-
tems]: Security and Protection; E.3 [Data Encryption]:
Public key Cryptosystems
Keywords
Digital Rights Management; Public-key Cryptography; Self-
enforcement; Key Management; Bitcoin
1.
INTRODUCTION
A traitor tracing scheme (TTS) is a multi-user encryp-
tion scheme that when some users (aka traitors) collude to
produce an unauthorized decryption device (aka a pirate de-
cryption box), it is possible to recover at least one of their
identities. TTS’s de-incentivize piracy, in the sense that
colluders may be identiﬁed by the authority once an unau-
thorized device is detected. Since it was introduced in [9],
there have been numerous works, improving diﬀerent aspects
of eﬃciency and security considerations, cf. [2–5, 8, 22, 23].
However, in a TTS, recovering the identity of a traitor can
only happen when the authority becomes aware of the unau-
thorized decryption device. This means that if the traitors
operate stealthily (e.g., distribute a pirate device in some
closed network) there is nothing the authority can do to de-
ter them, and thus in this setting the tracing mechanism
becomes ineﬀective. Furthermore, the penalty that the au-
thority may inﬂict to the traitors can only be applied “after-
the-fact”, i.e., only after the unauthorized decoder has been
recovered and analyzed by the authority.
To address the challenges above, we strengthen the notion
of TTS and put forth a new primitive we call a traitor de-
terring scheme (TDS): a multi-recipient encryption scheme
where each recipient (henceforth also called a user) has some
secret information that is provided as a collateral and hid-
den in a public directory. If the user is honest and keeps her
key to herself, her secret information remains hidden. On
the other hand, if some users collude to produce an unau-
thorized decryption device, any recipient of the device will
be able to recover one of the colluders’ collateral secret in-
formation.
One particularly suitable user-speciﬁc information that
can be used as collateral within a TDS is a bitcoin address
secret key. When registering for service, the subscriber puts
as collateral a small bitcoin amount into a fresh address and
the secret-key of the bitcoin address is embedded as col-
lateral.
In case the bitcoin address is used as input to a
transaction, the public nature of the bitcoin ledger enables
231the service provider to detect it and take appropriate action
(See section 6 for details).
Compared to TTS’s, the main diﬃculty of constructing a
TDS is that one needs to enable a public recovering proce-
dure which returns the user’s secret information that is an
element of an exponentially sized domain — in other words
linear number of bits in the security parameter λ need to be
extracted from the pirate box. Contrary to that, in a TTS,
the authority only needs to recover the identity of a traitor,
which is an element of merely a polynomially sized domain
— in other words just logarithmic number of bits in the se-
curity parameter λ need to be extracted from the pirate box.
As in TTS, the recovering procedure should work given only
black-box access to the pirate decryption box which may
be only partially working. Furthermore, it should operate
without utilizing any private-key information, as in a TTS
with public traceability [8].
A TDS (or a TTS) can also be considered in a stronger ad-
versarial model that we call “the known ciphertext model”.
In this model the adversary aims at communicating a pirated
copy consisting of a sequence of plaintexts that corresponds
to a given set of (polynomially many) ciphertexts (e.g., the
contents in a CD or a public database); without loss of gen-
erality we can assume the pirate copy is in the form of a
pirate box that acts only on the known sequence of cipher-
texts. The adversary aims at producing a pirate box of
smaller size than the sequence of plaintexts; we capture this
in the model by requiring the “space rate” of the attacker
to be o(1). This problem was ﬁrst considered by Dwork,
Lotspiech and Naor [12]. Constructing a TDS or a TTS in
the known ciphertext model under a falsiﬁable assumption
has been an open question since then.
Our contributions. We formalize TDS’s and we give two
diﬀerent construction methods that we instantiate in various
ways; further, we formalize the known-ciphertext model in
the spirit of [12] and we provide both feasibility and infea-
sibility results for TDS in this model. Finally we elaborate
on how to use bitcoin as collateral in conjunction to a TDS.
In more detail:
1. We put forth the formal model for TDS’s. Such schemes
enable the embedding of hidden user-speciﬁc informa-
tion in a public parameter, and have three security
properties: (i) security of plaintexts which is formal-
ized in a standard fashion as in public-key encryption;
(ii) privacy of user information that is hidden in the
public parameters. This property should be upheld
even if all other users conspire against a user as long
as the secret key of the user is not compromised; ﬁ-
nally, (iii) traitor deterring suggests that there is a re-
coverability algorithm that given black-box access to
some working implementation of a decryption device,
it is capable of recovering the private information of at
least one traitor, using only public information.
2. We give two construction methods for TDS’s. The
ﬁrst one is based on ﬁngerprinting codes [9, 20] and
a new primitive we call a fuzzy locker.
In a fuzzy
locker, the message is encrypted using a random code-
word Ci; the decryption operation returns the message
given any C∗ that would result in the i-th user be-
ing accused in the underlying ﬁngerprinting code. In
the TDS construction, the recovering procedure will
ﬁrst retrieve a pirate codeword C∗ from the decryp-
tion device; the traceability of the ﬁngerprinting code
will guarantee that one of the collusion’s codewords
will be accused, thus the corresponding traitor secret
will be unlocked. We then give a concrete construction
of a fuzzy locker for CFN codes [9] using the idea of
fuzzy extractors [11] paired with eﬃcient list decoding
for Reed-Solomon codes [17,30]. Our second construc-
tion method for TDS’s generalizes the constructions
of [4, 5] that are based on comparison predicate en-
cryption (CPE). Contrary to these works however, we
require that the user identity space is exponentially
large, so that a randomly chosen user identity can be
used as a secret key to hide the user secret information
directly. To recover the hidden information given a pi-
rate decryption decoder we utilize a binary search type
of recovering mechanism to navigate through the expo-
nentially sized domain and discover one of the traitor
identities. Given this identity we proceed to unlock
the user hidden data. A CPE scheme can be obtained
via functional encryption (FE) using indistinguisha-
bility Obfuscation (iO) [13]. In order to obtain a con-
struction based on standard assumptions we resort to
bounded collusion FE [14, 15]. We provide a more ef-
ﬁcient construction for this primitive via a combinato-
rial argument and we then use it to instantiate a CPE
with exponential size domain. Our TDS constructions
are summarized in Fig. 1.
3. We revisit the problem of digital signets [12] and we
formulate the “known ciphertext model” for TDS where
the adversary knows the target set of (polynomially
many) ciphertexts before implementing the pirate box.
In an attack in this model, the adversary tries to achieve
a favorable “space rate”, i.e., produce a decryption box
that has size smaller than the total plaintext mate-
rial that is encoded in the known ciphertexts without
leaking any of the traitors’ collaterals. Constructing
a TDS in the known ciphertext model is equivalent to
the problem of constructing digital-signets with self-
enforcement as deﬁned in [12] which is open under fal-
siﬁable assumptions; the construction of [12] assumes
an incompressible function of a speciﬁc type (this is
an unfalsiﬁable assumption) and the recovering strat-
egy has full access to the key. It works for any space
rate o(1). With our TDS constructions we resolve the
open question showing feasibility under falsiﬁable as-
sumptions for space rates O(log λ/λ) while we show
infeasibility for space rates Ω(log2 λ/λ) in the black-
box recoverability setting. In our results, we exploit
bounds on the false positive rate of the membership
testing problem to show how our TDS schemes can be
used while our negative result applies Bloom ﬁlters [1]
to provide an eﬃcient attacker strategy.
4. We describe how one can use bitcoin as a collateral
in a TDS. Recall that collaterals are arbitrary strings
hence a service provider (SP) can embed as collat-
eral the secret-key of a fresh bitcoin address credited
by the user. As part of the user agreement, the ac-
count should remain frozen (i.e., any outgoing trans-
action from this account can be noticed by the service
provider from the public ledger and the subscription
will be cancelled). As long as the user respects the
service agreement the collateral remains safe and the
user may reclaim it when the service contract termi-
nates.
232Assumption Ciphertext size Upper bound on t Recoverability
Construction I
Construction I
Construction II
Construction II
PKE
PKE
LWE
iO
O(t2 log2(n/))
O(log(n/)/λ)
O(t4λ)
O(t3+epoly(λ))
O(1)
n
n
n
Black-box
Black-box
Black-box
Black-box
Figure 1: Comparison of our TDS’s; t is the collusion size, n is total number of users, e = 1/poly(λ),  is the
error term in the ﬁngerprinting code which is negl(λ) and λ is the security parameter. PKE denotes public-key
encryption, LWE denotes the learning with errors problem, and iO denotes indistinguishability obfuscation.
Related primitives. As discussed above, a TTS aims at
providing “a posteriori” deterrence of malicious users while
TDS provides, in addition, a proactive way of deterrence.
Furthermore, traitor tracing is possible only when the au-