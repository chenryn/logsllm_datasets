path separately (i.e., it is path-sensitive), but prevents exponential
path explosion [25] by only unrolling loops for five iterations and
setting thresholds on the maximum size of symbolic expressions.
The memory model decides if two symbolic memory addresses alias
by seeing if the symbolic memory address expressions are equal
after applying simplification and normalization rules.
Despite its simplicity, OOAnalyzer’s symbolic analysis performs
well for two reasons. First, most initial facts describe compiler
written code that manipulates entities such as object pointers and
virtual function tables, and such code seldom employs complicated
loops, branches, or memory dereferences that are a bane to more
general static binary analysis. Second, even when the symbolic
analysis does make a noticeable mistake, the later components of
OOAnalyzer can usually detect and recover from it.
4.2 Initial Facts
As we explained in Section 3.2.1, initial facts are emitted by the fact
exporter and generally describe low-level program behaviors such
as computing an offset into the current method’s object or calling a
method using an object pointer. Table 1 provides a brief summary
of selected initial facts and examples of assembly code patterns that
would produce them.
Session 3A: Binary AnalysisCCS’18, October 15-19, 2018, Toronto, ON, Canada429Predicate Name
ObjPtrAllocation(I, F, P, S)
ObjPtrInvoke(I, F, P, M)
ObjPtrOffset(P1, O, P2)
MemberAccess(I, M, O, S)
ThisCallMethod(M, P)
NoCallsBefore(M)
ReturnsSelf(M)
UninitializedReads(M)
PossibleVFTableEntry(VFT, O, M)
Description
Instruction I in function F allocates S bytes of memory for the
object pointed to by P.
Instruction I in function F calls method M on the object pointed to
by P.
Object pointer P2 points to P1 + O. This usually indicates the
presence of object composition.
Instruction I in method M accesses S bytes of memory at offset O
from the object pointer. This generally indicates the size and offset
of a member.
Method M receives the object pointed to by P in the ecx register,
which indicates the method expects to be called with thiscall.
No methods are called on an object pointer before method M,
which is often indicative of constructors.
Method M returns the object pointer that was passed as a parameter.
This code pattern is required for constructors.
Method M reads members before writing to them, which is not
typical of constructors.
It is possible that method M is at offset O in vftable VFT.
Assembly Code Example
push
call
mov
call
mov
add
mov
mov
28h
operator new
ecx, objptr
M
ecx, objptr
ecx, 10h
ecx, objptr
ebx, [ecx+0ch]
Not applicable.
Not applicable.
eax, objptr
mov
retn
Not applicable.
Not applicable.
Table 1: A list of selected initial fact predicates produced by OOAnalyzer’s fact exporter. Initial facts form the basis upon
which OOAnalyzer’s reasoning system operates.
One of the most important categories of initial facts describes
the creation, manipulation, and usage of object pointers. These
facts enable OOAnalyzer to reason about relationships between
classes and methods without relying on RTTI or vftables, unlike
most prior work. Using its symbolic analysis, OOAnalyzer assigns
a unique token to each object pointer that appears to be passed to a
function using the thiscall calling convention, and then records
when such pointers are allocated (ObjPtrAllocation), invoked on
a method (ObjPtrInvoke), or created at an offset from an existing
object pointer (ObjPtrOffset). The last fact often reveals an object
instance being stored as a class member (i.e., composition). Finally,
to enable inter-procedural reasoning about object pointers, the
ThisCallMethod fact links methods to the symbolic object pointers
they are invoked on.
Another important group of initial facts are those used to ac-
tivate hypothetical reasoning rules, which in turn produce high-
confidence entity facts. The group of initial facts that are used to
identify constructors is a good example. If a method is always the
first to be called on an object (NoCallsBefore), returns the object
pointer that is passed to it (ReturnsSelf), and does not read from
any data members in the object (UninitializedReads), then it is
likely to be a constructor, and hypothetical reasoning will use these
facts to assert a Constructor fact and hypothetically reason about
the consequences. Most entity facts have a corresponding possible
initial fact that triggers hypothetical reasoning about that entity,
which is discussed further in the next section. For space reasons,
we do not include all initial facts in Table 1, but they can be found
in the OOAnalyzer source repository [18].
4.3 Entity Facts
As mentioned in Section 3.2.2, entity facts describe properties of the
abstract entities such as methods, virtual function tables, and classes
that comprise the C++ abstractions which OOAnalyzer recovers.
Entity facts can be roughly organized by the type of entity they
describe, which includes (1) methods; (2) virtual function tables and
virtual base tables; (3) class relationships; (4) sizes; and (5) classes.
Table 2 displays the list of selected entity facts with this ordering.
Most entity facts have at least one corresponding initial fact
that triggers reasoning about that entity. For example, the fact
exporter identifies possible vftables in memory by scanning for ad-
jacent entries that could plausibly be code addresses and emits these
as low-confidence initial PossibleVFTableEntry facts. If reasoning
rules corroborate their existence in the current model, OOAnalyzer
dynamically asserts entity facts such as VFTableEntry to confirm
the existence and contents of the table. This two-tier reasoning is
used for many of the entity facts.
Class relationships are described by several facts. The Derived-
Class fact reflects that a class inherits from another class, while
the ComposedObject fact indicates composition. Because inheri-
tance and composition often look similar at the executable level,
OOAnalyzer also uses an intermediate fact, ObjectInObject, which
is true when DerivedClass or ComposedObject is true, but not both
(i.e., DerivedClass⊕ComposedObject). Finally, the fact HasNoBase
explicitly expresses that a class does not inherit from another class.
Some rules are able to prove the existence of a base class with-
out actually identifying the specific class, which is expressed as
¬HasNoBase.
Size facts bound the potential sizes of classes and vftables. Con-
straints on the sizes of classes (ClassSize) are obtained from al-
locations and member composition, and can be used to disprove
certain inheritance relationships based on the observation that a
smaller class cannot be derived from a larger class. The size of
vftables (VFTableSize) can also be bounded. For example, a vftable
cannot be so large that it overlaps with another known vftable,
and a derived class’s vftable cannot be smaller than its base class’s
vftable.
OOAnalyzer represents classes as sets of methods to allow it
to reason about non-polymorphic classes, which do not have a
Session 3A: Binary AnalysisCCS’18, October 15-19, 2018, Toronto, ON, Canada430Predicate Name
Method(M)
Constructor(M)
Destructor(M)
DeletingDestructor(M)
VirtualMethodCall(I, F, P, VFT, O)
VFTable(VFT)
VFTableInstall(I, M, O, VFT)
VFTableEntry(VFT, O, M)
DerivedClass(Cld , Clb , O)
ComposedObject(Clo, Cli , O)
ObjectInObject(Clo, Cli , O)
HasNoBase(Cl)
ClassSize(Cl)
VFTableSize(VFT)
Cla = Clb
Cla ≤ Clb
M ∈ Cl
ClassCallsMethod(Cl, M)
Description
Method M is an OO method on a class or struct. It is passed an object pointer.
Method M is an object constructor. It initializes objects, but does not allocate memory for the
object.
Method M is an object destructor. It deinitializes objects, but does not free their memory.
Method M is a deleting destructor. It calls a “real” destructor before deallocating the object’s
memory.
Instruction I in function F virtually invokes the method at offset O of the vftable VFT on pointer
P.
VFT is a virtual function table. (There are similar rules for virtual base tables.)
Instruction I in method M installs vftable VFT at offset O of the current object.
Offset O in vftable VFT contains a pointer to method M.
Class Cld inherits from class Clb. The members of Clb are stored at offset O of Cld.
Class Clo is composed of an object of class Cli at offset O.
Either DerivedClass(Clo, Cli , O) or ComposedObject(Clo, Cli , O) is true, but not both.
Class Cl is known not to inherit from any base classes.
This function returns the size in bytes of instantiated Cl objects.
This function returns the size in bytes of vftable VFT.
The sets of methods, Cla and Clb, both represent methods from the same class. This predicate
indicates the sets of methods should be combined into a single class.
The sets of methods, Cla and Clb, either both represent methods from the same class, or, the
methods in Clb are (possibly indirectly) inherited from Cla.
The method M is defined directly on class Cl. (It is a member of the set of methods defining the
class Cl.)
An instance of class Cl calls method M, indicating M is on class Cl or one of its ancestors.
Table 2: A list of selected entity fact predicates that are produced by the forward reasoning and hypothetical reasoning capa-
bilities of OOAnalyzer.
natural identifier for the class such as a vftable address. Initially,
each method is considered its own singleton class, but is eventu-
ally merged with other classes using class merging facts such as
Cla = Clb, which indicates that two previously distinct classes are
really the same class. When Cla is merged with Clb, any existing
facts about Clb are updated to reference Cla instead. The Class-
CallsMethod fact provides evidence that M is called on an object
of class Cl, which indicates that M must be directly defined on Cl
or one of its ancestors. This in turn helps hypothetical reasoning
compute the candidate classes which M could be assigned to. Be-
cause the fact is based on the data flow of object pointers rather
than vftables, it provides another example of how OOAnalyzer is
able to assign methods to non-polymorphic classes.
4.4 Reasoning Rules
As the primary mechanism for encoding the domain knowledge
about C++ programming and compilers, OOAnalyzer’s forward
reasoning component is one of the most important pieces of OOAn-
alyzer’s design. In this section, we present OOAnalyzer’s reasoning
rules as inference rules. Inference rules have the following form:
P1
P2
. . .
Pn
C
where Pi represents the ith premise of the rule, and C represents
the conclusion. If all premises in the rule are present in the current
fact base, OOAnalyzer adds the conclusion to the fact base as well.
Fig. 2 shows a selection of rules which we also discuss below. Un-
fortunately, we are unable to reproduce all the reasoning rules in
this paper due to space limitations, but they can be found in the
OOAnalyzer source repository [18].
One salient feature of OOAnalyzer is that it can reason about
non-polymorphic classes, which do not have any associated vftable.
For example, Merge-6 shows the formal encoding of a rule which
OOAnalyzer uses to determine that a method called by a base class
and its derived class cannot be defined on the derived class. This is
one of many rules in OOAnalyzer that does not rely on vftables at
all, and instead is based on observing actions on object pointers.
Although OOAnalyzer does not depend on the information in
vftables, it can leverage their information to learn about polymor-
phic classes, similar to existing work. For example, Relate-3 shows
a rule that detects inheritance between classes by observing a con-
structor replace a vftable that another constructor installed in an
object. Relate-6 is a slightly more complicated encoding of the
observation that when a method is present in two vftables, the two
classes must be related in some way. Because of the ambiguous
nature of this observation, which does not identify the exact rela-
tionship (e.g., a sibling or parent-child relationship), the conclusion
is the negation of HasNoBase(Clb),2 or that Clb inherits from an
2An astute reader may recognize that Prolog does not allow rules to contain negation
in their conclusion. However, for most facts in OOAnalyzer, it is important to explicitly
represent whether that fact is definitely true, definitely false, or unknown in the
model. Thus, most facts in OOAnalyzer are actually represented by both a positive
and negative predicate for the fact (e.g., HasNoBase-True and HasNoBase-False). Such
predicates are kept consistent by OOAnalyzer’s consistency checking rules (Section 4.6)
and boilerplate code.
Session 3A: Binary AnalysisCCS’18, October 15-19, 2018, Toronto, ON, Canada431Merge-6
Md ∈ Cld
Constructor(Md)
Constructor(Mb)
Mb ∈ Clb
ClassCallsMethod(Cld , M)
Cld (cid:44) Clb
ClassCallsMethod(Clb , M)
Md (cid:44) Mb
DerivedClass(Cld , Clb , _)
M ∈ Clm
Clm (cid:44) Cld
Relate-3
Constructor(Md)
Constructor(Mb)
ObjPtrOffset(Pd , O, Pb)
Md (cid:44) Mb
VFTableInstall(_, Md , _, VFTd)
VFTableInstall(_, Mb , 0, VFTb)
ThisCallMethod(Md , Pd)
Md ∈ Cld
VFTd (cid:44) VFTb
DerivedClass(Cld , Clb , O)
ObjPtrInvoke(_, Md , Pb , Mb)
Mb ∈ Clb
Relate-6
VFTableEntry(VFTa, _, M)
VFTableEntry(VFTb , _, M)
Constructor(Ma)
VFTa (cid:44) VFTb
M ∈ Cla
Mb ∈ Clb
Ma ∈ Cla
¬HasNoBase(Clb)
VFTableInstall(_, Ma, 0, VFTa)
VFTableInstall(_, Mb , _, VFTb)
Constructor(Mb)
Cla (cid:44) Clb
Merge-17
VFTableInstall(_, Md , 0, VFTd)
VFTableInstall(_, Mb , 0, VFTb)
DerivedClass(Cld , Clb , _)
Md ∈ Cld
Mb ∈ Clb
VFTableSize(VFTb) ≤ Size
VFTableEntry(VFTd , O, M)
M ∈ Cl
Cl (cid:44) Cld
Cld = Cl
O > Size
Figure 2: Selected forward reasoning rules
unspecified base class. Although this conclusion by itself is vague,
if there is no direct evidence that determines the inheritance rela-
tionship, it will eventually trigger hypothetical reasoning to find a
relationship that is consistent with all observed facts.
Another rule, Merge-17, demonstrates how bounding the size of
classes and vftables can help assign methods to classes [10]. When a
method appears in the vftable of a derived class, that method could
be defined in either the derived or base class. Merge-17 shows how
OOAnalyzer can decisively place the method on the derived class
by bounding the size of the base class’s vftable, and noting that the
method’s offset in the vftable is too large for the method to be on
the base class.
4.5 Hypothetical Reasoning Rules
Hypothetical reasoning rules are identical to forward reasoning
rules in structure, but are interpreted differently. First, hypothetical
rules are only used when forward reasoning rules are unable to
produce any new conclusions. Second, most hypothetical reason-
ing rules occur in pairs that share the same premises but contain
opposite conclusions. As with standard rules, if all of the premises
match the current fact base, the conclusion of the rule is added to
the fact base, and reasoning proceeds. If Prolog backtracks to this
Guess6-T
ClassCallsMethod(Cld , M)
M ∈ Cl
¬ClassCallsMethod(Clb , M)
DerivedClass(Cld , Clb , _)
Cld = Cl
Guess1-T
ObjectInObject(Cld , Clb , O)
DerivedClass(Cld , Clb , O)
Guess4-T
Constructor(M)
¬∃VFTb . VFTableInstall(_, M, _, VFTb) ∧ VFTa (cid:44) VFTb
VFTableInstall(_, M, 0, VFTa)
M ∈ Cl
HasNoBase(Cl)
Guess3-T
Method(M)
NoCallsBefore(M)
VFTableInstall(_, M, _, _)
ReturnsSelf(M)
¬PossibleVFTableEntry(_, _, M)
¬UninitializedReads(M)
Constructor(M)
Figure 3: Selected hypothetical reasoning rules
point because of a contradiction, OOAnalyzer will revoke this fact
and instead assert the opposite conclusion. If this too results in a
contradiction, the inconsistency must have come from an earlier
hypothesis, and OOAnalyzer backtracks even further.
We ordered the hypothetical rules in OOAnalyzer so that the
most likely guesses are made first in order to minimize backtrack-
ing. Some of the highest priority hypothetical rules in OOAnalyzer
were originally forward reasoning rules (because we believed them
to be always true), but we later identified rare exceptions that were
difficult to characterize, and so we converted them to hypothetical
rules. We ordered other rules based on a combination of experi-
mentation and our beliefs about how prevalent the phenomena
are. For example, we prioritize rules related to single inheritance
before multiple inheritance, because in our experience multiple
inheritance is less common. A few guessing rules are also ordered
by design to consist of progressively more relaxed constraints. The
idea behind these rules is to choose entities that have the most
evidence associated with them first. This is especially important for
entities that consistency checks struggle to reject. Two examples
of this are discussed below in rules Guess4-T and Guess3-T.
One of the most important hypothetical reasoning rules, Guess6-
T, is shown in Fig. 3. This rule handles one of the most common
ambiguities in method assignment, which occurs when a method
is called on a derived class but not a base class. It is possible that
the method is defined on the base class but is never invoked there;
or, the method may be defined directly on the derived class. As
Guess6-T shows, OOAnalyzer initially guesses that the method is
on the derived class. If that results in a contradiction, Guess6-F
(not shown) instead guesses that the method is not on the derived
class.3 Guess6-T is also another example of a rule that does not
depend on vftables, since ClassCallsMethod is based on data-flow
of object pointers.
3Note that the method is not necessarily on the base class since it could be on one of
the base class’s ancestors.
Session 3A: Binary AnalysisCCS’18, October 15-19, 2018, Toronto, ON, Canada432Another common ambiguity when reasoning is whether a rela-
tionship between two classes represents an inheritance relationship
or a composition relationship (Section 2.2). As Guess1-T shows, in
the absence of other information, OOAnalyzer will initially guess
that an unspecified relationship is an inheritance relationship. If this
is proven untrue by consistency checking rules, then OOAnalyzer
will instead guess that there is a class composition relationship (i.e.,
a class object as a class member).
Rule Guess4-T illustrates the importance of the priority in which
hypothetical reasoning rules are applied. Guess4-T hypothetically
reasons that a class has no base class based on the very weak
precondition that the class’s constructor installs a single vftable.
While the HasNoBase fact is critically important for reasoning
about method to class assignment, the best evidence that a class
does not have a base class is often a lack of evidence for inheritance.
This rule exemplifies such reasoning, because any evidence that
inheritance might exist would immediately preclude this general
rule. This rule also exemplifies progressively more general guessing
rules. OOAnalyzer guesses that classes with one vftable installation
are candidates for HasNoBase (e.g., Guess4-T) before evaluating an
even weaker rule that guesses all remaining classes without proven
base classes actually have no base class at all (not shown). Since the
only forward reasoning rules for HasNoBase are based on RTTI
data structures, and we do not assume these are always available,
Guess4-T has an unexpectedly important role in OOAnalyzer for
such a weak rule.
Another important use of hypothetical reasoning is to detect
special methods such as constructors. For example, Guess3-T is
one of the highest priority rules used to guess that a method is
a constructor because it requires relatively strong heuristics. The
method must not be present in any vftables, may not read any
uninitialized memory, and must install a vftable in its object. We
have found these heuristics usually indicate that a method is a
constructor. A series of lower priority guessing rules then relaxes
these constraints.
4.6 Consistency Checking Rules
Consistency rules ensure that all facts in the fact base are internally
consistent with each other. Fig. 4 lists selected consistency rules.
For space reasons, we only list a few consistency rules, but the
complete set can be found in the OOAnalyzer source repository [18].
Most of the interesting consistency rules ensure a variety of C++-
specific invariants are true. For example, Consistency-VFTables
ensures that a VFTable cannot be assigned to two unrelated classes.