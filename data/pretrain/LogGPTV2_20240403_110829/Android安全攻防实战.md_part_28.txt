---
## Page 213
第6章逆向app
关于Dalvik的一个重要注意事项是，Dalvik字节码中操作数的出现顺序是和所
有的中间代码表示方案一样的。目的操作数总是出现在源操作数之前，比如我们要
执行下面这个操作。
move vA, vB
这条指令是要把寄存器B中的数据放到寄存器A中。这一顺序的流行的术语是
“目标-源”，也就是说，操作结果的目标总是先出现，然后才是指定的源操作数。
操作数可以是寄存器，每个方法（由于它是一个独立的执行实例）都拥有一些
寄存器。操作数也可以是字面值（literalvalue）（规定数据宽度的有符号或无符号整
型数）或者一个给定类型的对象。即使是字符串之类的非初级类型，字节码也能在
Typelds区段中找出它的定义。
指令有许多不同的格式，来表示交给规定操作码处理的各种数量的寄存器或对
象。你可J 以在 http:/source.android.com/devices/tech/dalvik/instruction-formats.html 找到
相关的规定。你值得花上一些时间去阅读这些规定，因为Dalvik指令集中的各个操
作码及其规定都不过是操作码格式中某一个的具体实现罢了。要理解格式编码的含
文”，因为在阅读指令格式时，它能帮助你很快搞清指令的含义。
在介绍了一些基本概念之后，相信你应该至少已经明白了操作码和操作码的格
式了。我们可以继续以一种易于阅读的语法”，深入分析一些字节码了。
准备工作
在我们开始之前，你需要一个名为“baksmali”的Smali反编译器。为了方便你
使用，我们将讨论如何编辑你的path环境变量，是你能在你的计算机上的任意目录
中使用baksmali的JAR文件和相关脚本，而无需每次都正儿八经地切换目录，打入
java-jar命令了。下面是你该怎么做。
1.先请去 https://code.google.com/p/smali/downloads/list 下载 baksmali 的 jar 文件。
或者你也可以去更新的代码仓库 htps://bitbucket.org/JesusFreke/smali/downloa
下载。下载时应选择baksmali[version]jar文件—其中[version]应该是最新
的版本号。
2.把它保存在一个命名规范的目录里，因为你要把下载到的两个文件都放在这
① 即, 网页 http:/source.android.com/devices/tech/dalvik/instruction-formats.html 。 The Formats 
格中 ID与 format 的对应关系，—译者注
②即 Smali 语法。—译者注
195
---
## Page 214
Android安全攻防实战
个目录里，以方便工作。
3.下载 baksmali的 wrapper 脚本，这个脚本能让你无需每次运行 baksmali 的 JAR
文件时，都调用一遍java-jar命令。这个脚本可以在https://code.google.com/
p/smalidownloads/list下载，你也可以去更新的代码仓库中
https/bitbucket.org/JesusFreke/smali/downloads下载。把它保存到存放
baksmali JAR文件的目录中去。Windows 用户就不用做这一步了，因为这是
个bash 脚本。
4.把下载下来的 baksmali 的 jar 文件改名为 baksmalijar，也就是把文件名里的
版本号删掉，这样你在第3步里下载的 wrapper脚本才能找到它。在Linux
或UNIX计算机上你可以用下面这条命令修改文件名。
mv baksmal1 [version-number] jar baksmal1 jar
你也可以在你的操作系统的窗口管理器中完成这一工作，不管怎么样，只要
把文件名改成baksmalijar就行了！
5.在这之后，你应该确认baksmali脚本拥有执行权限，如果你使用的是UNIX
或Linux系统，你可以使用下面这条命令搞定这个问题：
chmod +x 700 baksma11
6，把当前这目录的路径加在你的PATH变量里。
都搞定了！你现在可以反编译DEX文件了！我们去下一节，看看应该怎么做。
怎么做
现在你已经下载和安装好了baksmali，你当然想把一些DEX文件反编译成语法
结构格式良好smali文件。下面就是你该怎么做。
在你的终端或命令行提示符下执行下面这条命令，如图6.22所示。
baksmali [Dex filename] dex
k3kn406p1547
role.dex
everset
图 6.22
①原文如此，显然应该是“第三步”.一详者注
196
---
## Page 215
第6章逆向app
这条命令将把DEX文件视为一个膨账了的JAR文件，并把其中的内容反编译出
来，输出的所有源文件都是.smali 文件，面不是.class文件。这些.smali文件中的是经
过了轻微转换，以符合Dalvik字节码特殊的smali语法的代码，如图6.23所示。
class
regtsters a
structor()V
-registers 1
-prologue
.1ine 1
.nvoke=di.rect (p0), Ljava/ lang/0bject,; => ()V
return-void
.end method
.method public static main ( [Ljava/lang/Stzing;) V
.registers 4
prologue
.1ine 3
197
---
## Page 216
Android安全攻防实战
\ixo oe  uaesuo
const/4 v2, 0x0
new=array v2, v2,[Ljava/lang/0bject}
invoke=virtua1 (v0, v1, v2) ,
Ljava/1o/Print.Stream; =>printf (Ljava/Lang/String: [Ljava/lang/object: ) Ljava
/1o/PrintStream,
,1ine 4
return-void
 end method
请注意，由于baksmali，Android的Dalvik虚拟机以及Java 语言都在不断地改进，
所以你看到的代码可能与上述代码稍微有点不同。但请不要担心，上面这个样例代
用你自已的baksmali生成的代码上的。下面是开头的几行代码。
.class public LExamplej
8uper Ljava/1ang/0bject.,
source *Example-java”
这些基本上就是被编译的类的元数据。其中给出了类名，源文件名以及它的超
类（也就是这个类是继承自哪个类）。你可能还记得，在Examplejava的代码中，我
们业没有显式地声明它继承了哪个类，但是怎么编译后，Examplejava 怎么看上去有
了一个父类啊？这怎么可能！好吧，这是因为所有的Java类都是继承自
java.lang.Object  。
继续，下面这段代码更有意思些。它们是Examplejava 的构造函数的 smali代码。
 direct methods
-method public constructor  ()V
,registers 1
prologue
.1ine 1
invokedirect (p0), Ljava/lang/Cbject;=> ()V
return-voId
end method
第一行“.method public constructorOV”是紧接着的这个方法的声明。翻
译过来就是：这个方法名叫init，返回一个void类型，访问标志位是public。
---
## Page 217
第6章逆向app
接下来的这一行里含有如下一些代码。
Registers 1
也就是说，这个方法只使用一个寄存器。因为在它运行之前，需要几个寄存器
早已经确定了，所以方法是知道这一点的。我马上会解释这个寄存器的作用。下面
一行代码看上去是这个样子的：
prologue
这里声明接下去的是一个prologue，这是每个Java 方法里都有的东西。它保证
这个方法是以其继承形式被调用的（如果有的话）。这也就解释了为什么下一行（包
括在其他 init 函数中也是这样的），好像是调用了另一个名为init 的方法。
invoke-direct (p0), Ljava/Lang/Object; => () V
但这一次，它是 java.lang.Object 的 init 方法。这里的 invoke-direct 指令需要两个
参数：p0寄存器和被调用方法的指针—这里是Ljava/lang/Object;->init>OV。对
invoke-direct 的描述如下所示：
“ invoke-direct是用来调用个非静态直接方法（non-static direct method，即个
本质上是不可重写的，private实例方法instance mcthod 或构造方法）的。"
.上述描述摘自 http:/source.android.com/devices/tech/dalvik/dalvik-
bytecode.html.
所以，综上所述，它所做的就是调用 java.lang.Objcct 类的构造方法这个非静态
直接方法。我们再来看下一行smali代码。
return-void
顾名思义，它就是一返回了一个void类型，并退出当前函数，返回到调用它
的方法的执行流中去。
根据官方网站上对这个指令的定义：“从一个void 方法返回”，很简单吧。下一
行，和其他以英文句号（""）开头的其他行一样，是一些元数据，或者smali反编译
接下来的代码是main方法的。这里你将会看到一些代码格式，即把参数传递给
某个方法，然后再调用它的代码，反复地一遍又一遍地出现。由于Java是面向对象
的，所以当你的代码调用另一个对象的方法时，要做的大量工作是：传递参数，并
把一种对象类型转换成另一种。所以，我们将会学习一种能识别，某些这类Java代
码经过编译后，生成的 smali代码的好方法。main方法中的代码如下所示。
199
---
## Page 218
Android安全攻防实战
.method publ.1.c stat.i.c nain ([Ljava/Lang/String:)V
,reglsters 4
prologue
,1ine 3
sget=object v0, Ljava/lang/System =>out:Ljava/1o/Pr1ntStream;
const-string v1, “Hello World!\n*
const/4 v2, 0x0
nev-array v2, v2, [Ljava/lang/0bject,;
Ljava/1o/Pxi.nt.Stream, =>print.f (LJava/ Lang/Stxing [Ljava/1ang/0bject, ) Ljava
invoke-virtua1 (v0, v1, v2),
rue9xSuxa/0/
,1ine 4
return-void
,end method
第一行是.method public static main([Ljava/lang/String:)V，这个方法接收一个
java.lang.String类型的数组，并返回void，这是由这部分代码决定的。
([Ljava/lang/String/) V
继续说方法名，这行代码也说明main方法是个静态方法，访问属性是public。
在方法头部之后，我们看到下面这段代码，我们看到这里有一个sget-object 操作：
sget-object v0, Ljava/lang/System;=>out:Ljava/1o/PzintStream,
根据官网对这一操作的描述：“执行获取对象静态成员的操作，找出静态成员，
并把它加载或存储到存放值的寄存器中”
根据官方文档，sget-object操作需要接收两个参数。
·一个寄存器，Dalvik用它来存储操作的结果。
·要被存储到上面这个寄存器里的对象的引用。
所以这段代码实际上做的就是获取一个对象实例，并把它存放到一个寄存器里，
这里，该寄存器就是名为v0的这个方法栈顿里的第一个寄存器。下一行的内容是这
样的。
上面这行代码显示：使用了const-string 指令。它的作用是获取一个字符串，并
把它存储在第一个参数中指定的寄存器中。Main方法栈帧中的第二个寄存器，名为
200
---
## Page 219
第6章逆向app
v1，官网上对const-string操作的定义为“把给定索引（index）规定的字符串的引
用，放入指定的寄存器中”。
如果这还不够明显，那我告诉你，这里获取的字符串就是“HelloWorldn”。
继续，下一行是const指令族中的一条，在这里用它把常数0放入第三个寄存器
v2中.
0x0*/su00
这看上去好像是随机放的值，但在下一行中，你就会看到，代码确实需要把0
放在v2寄存器中。这行代码如下。
new=array v2, v2,[Ljava/lang/Object;
new-array指令所做的是构造一个指定类型和数组中元素个数的数组，并把它存
放在左起第一个寄存器中。在这里，这个寄存器就是v2。所以在这条指令被执行之
后，v2中存放的应该就是一个java.lang.Object类型的数组，其中的元素个数是0—这
是由这条指令的第二个寄存器v2中的值决定的。显然，这就是为什么要在执行这条
指令之前，先把0放在v2中的原因。根据官网中这条指令的定义：“构造一个指定
类型和元素个数的数组。其类型必须是数组类型。”
下一行是个非常常见的指令。请确保你了解这个指令族的工作方式，因为你今
后将会经常遇见它们。继续，下一行代码如下。
invoke=virtual (v0, v1, v2), Ljava/Lo/PrintStream;=
>printf (Ljava/Lang/St.ringz [Ljava/Lang/0bject,#) Ljava/1o/
PrintStream,
官网中对invoke-virtual指令的定义为：“invoke-virtual用来调用一个普通的虚方
法（方法属性不能为 private，static或final.且不是构造方法）"
invoke-virtual指令的参数格式如n下：
invoke-kind [vC, vD, vE, vF, vG), metheBBBB
其中，vC,vD，vE，vF和vG是用来向被调方法传递参数的寄存器，这个方法的
代码具体被放在哪里，是由最后的那个参数meth@BBBB所指定的。由于每个B都
表示4个bit的宽度，所以这条指令接收的是一个16位的方法引用（methodreference，
也就是函数指针）。综上所述，在我们的 Example.smali 中，这行代码的所作所为就
是调用一个名为 java.io.PrintStrcam.printf 的方法，这个方法接收的参数包括一个
java.lang.Object 类型的数组和一个 java.lang.String对象，最后返回一个
①详见上一个实验。—译者注
201
---
## Page 220
Android安全攻防实战
java.io.PrintStream类型的对象。
大功告成！你已经能解读一定的 smali代码了。习惯于阅读smali代码还是有一
定实用价值的。如果你还想学到更多的东西，请参考“拓展阅读”中的相关文献。
拓展阅读
● The General Design—Bytecode for the Dalvik VM Android Open Source Project
at http://source.android.com/devices/tech/dalvik/dalvikbytccode.html.
* The Introduction and OverviewDalvik Instruction Formats Android Open
Source  Projcct  at  http://source.android.com/devices/tech/dalvik/instruction-
formats.html.
• The Analysis of Dalvik Virtual Machine and Class Path Library document at
http://imsciences.edu.pk/serg/wp-content/uploads/2009/07/Analysis-of-Dalvik-VM
pdf.
6.5把DEX反编译回Java
我们知道，DEX代码是从Java代码编译得到的，而Java是一种语义相当清晰，
易于阅读的语言。我确信，你们中的一些人也一定在想：现在是不是能把DEX代码