It appears that you have installed Python 2.7.5, and when you run `python --version` in your `/Home/UserName/` directory, it correctly shows version 2.7.5. However, when you run the same command in the `/Home/UserName/Downloads/Ipython` directory, it shows Python 2.6.6.

### Analysis
- **Global Python Version:** When you run `python` in your home directory, it points to Python 2.7.5, which is likely installed system-wide.
- **Local Python Version:** The `/Home/UserName/Downloads/Ipython` directory contains a local `python` executable (likely named `python` or `python2.6`) that takes precedence over the system-wide installation. This is why you see Python 2.6.6 in this directory.

### Solution
To ensure that the Ipython setup file uses Python 2.7.5, you can take one of the following approaches:

#### 1. Use the Full Path to Python 2.7.5
You can explicitly specify the full path to the Python 2.7.5 executable when running the Ipython setup file. For example:
```sh
/usr/bin/python setup.py install
```
Replace `/usr/bin/python` with the actual path to Python 2.7.5, which you can find using:
```sh
which python
```

#### 2. Modify the PATH Environment Variable
You can temporarily modify the `PATH` environment variable to prioritize the system-wide Python 2.7.5 installation. You can do this by adding the following line to your shell session:
```sh
export PATH=/usr/bin:$PATH
```
This will place `/usr/bin` at the beginning of your `PATH`, ensuring that the system-wide Python 2.7.5 is used. Note that this change will only last for the current session. To make it permanent, you can add the `export` line to your shell configuration file (e.g., `.bashrc` or `.bash_profile`).

#### 3. Use a Virtual Environment
If you need to manage multiple Python versions and their dependencies, consider using a virtual environment. `virtualenv` is a popular tool for this purpose. Hereâ€™s how you can set it up:

1. Install `virtualenv` if you haven't already:
   ```sh
   pip install virtualenv
   ```

2. Create a new virtual environment with Python 2.7.5:
   ```sh
   virtualenv -p /usr/bin/python /path/to/your/virtualenv
   ```

3. Activate the virtual environment:
   ```sh
   source /path/to/your/virtualenv/bin/activate
   ```

4. Now, any Python commands you run will use the specified version (2.7.5) within the virtual environment.

### Conclusion
Using the full path to Python 2.7.5 or modifying the `PATH` environment variable should resolve the issue for the Ipython setup. If you frequently work with multiple Python versions, consider using `virtualenv` for better management.