Figure 1: The Architecture of MassVet.
obfuscated to the extent that even disassembly cannot go
through. When this happens, not only our approach but
also most of other static analyses will fail. Finally, we
assume that the app market under protection accommo-
dates a large number of highly-diverse apps, so that for
the malicious repackaged app uploaded, on the market
there will be either another app sharing its repackaging
origin or the one incorporating the same attack payload.
To make this more likely to happen, different markets
can share the feature datasets of their apps (i.e., v-cores
and m-cores) with each other. Note that such datasets are
very compact, only 100 GB for 1.2 million apps.
3 MassVet: Design and Implementation
3.1 Overview
Design and architecture. To detect unknown malware
at a large scale, we come up with a design illustrated in
Figure 1. It includes three key components: a prepro-
cessing module, a feature database system and a Diff-
Com module. The preprocessing module automatically
analyzes a submitted app, which includes extracting the
features of its view structure and methods, and then sum-
marizing them into the app’s v-cores and m-cores respec-
tively. The DiffCom component then works on these fea-
tures, searching for them within the app market’s v-core
and m-core databases. Matches found there are used to
identify suspicious different or common methods, which
are further screened to remove false positives.
How it works. Here we use an example to walk through
the work ﬂow of the system. MassVet ﬁrst processes all
the apps on a market to create a v-core database for view
structures and an m-core database for Java methods (Sec-
tion 3.4). Both databases are sorted to support a binary
search and are used for vetting new apps submitted to
the market. Consider a repackaged AngryBird. Once up-
loaded to the market, it is ﬁrst automatically disassem-
bled at the preprocessing stage into a smali represen-
tation, from which its interface structures and methods
are identiﬁed. Their features (for views, user interfaces,
types of widgets and events, and for methods, control
ﬂow graphs and bytecode) are mapped to a set of v-cores
(Section 3.2) and m-cores (Section 3.3) through calculat-
ing the geometric centers of the view graphs and control-
ﬂow graphs respectively. The app’s v-cores are ﬁrst used
to query the database through a binary search. Once a
match is found, which happens when there exists another
app with a similar AngryBird user interface structure, the
repackaged app is compared with the app already on the
market at the method level to identify their difference.
Such different methods (diff for short) are then automat-
ically analyzed to ensure that they are not ads libraries
and indeed suspicious, and if so, are reported to the mar-
ket (Section 3.2). When the search on the v-core database
comes back with nothing2, MassVet continues to look
for the AngryBird’s m-cores in the method database. If
a similar method has been found, our approach tries to
conﬁrm that indeed the app including the method is un-
related to the submitted AngryBird and it is not a legit-
imate code reuse (Section 3.3).
In this case, MassVet
reports that a suspicious app is found. All these steps are
fully automated, without human intervention.
3.2 Fast User-Interface Analysis
As discussed before, the way MassVet vets an app de-
pends on whether it is related to any other app already
on the market. Such a relation is established in our re-
search through a quick inspection of apps’ user inter-
faces (UI) to identify those with similar view structures.
When such apps are not “ofﬁcially” connected, e.g., pro-
duced by the same party, the chance is that they are of
the same repackaging origin, and therefore their diffs
become interesting for malicious code detection. This
interface-based relation identiﬁcation is an alternative to
code-based identiﬁcation: a malicious repackaged app
can be obfuscated and junk code can be easily added
to make it look very different from the original version
in terms of the similarity between their code (e.g., per-
centage of similar methods shared between them). On
the other hand, a signiﬁcant change to the user interface
needs more effort and most importantly affects user ex-
perience, making it more difﬁcult for the adversary to
free ride the popularity of the original app. Therefore,
most repackaged apps preserve their original UI struc-
tures, as found by the prior research [50]. In our research,
we further discovered that many repackaged apps incor-
porate a large amount of new code, even more than that
in their original versions, but still keep those apps’ UI
structures largely intact.
The idea of using view structures to detect repack-
aged apps has been preliminarily explored in prior re-
search [50], which utilizes subgraph isomorphism algo-
rithms to measure the similarity between two apps. How-
ever, the approach is less effective for the apps with rel-
atively simple user-interface structures, and most impor-
2The market can also choose to perform both differential and inter-
action analyses for all new apps (Section 3.3).
662  24th USENIX Security Symposium 
USENIX Association
4
tantly, agonizingly slow: it took 11 seconds to compare
a pair of apps [50], which would need 165 days to ana-
lyze one submission against all 1.3 million apps on the
Google Play store.
Following we elaborate our new solution designed for
an accurate and high performance app-view analysis.
Feature extraction. An app’s user interface consists of a
set of views. Each view contains one or more visual wid-
gets such as Button, ListView, TextView, etc. These UI
components respond to users’ input events (e.g., tapping
and swiping) with the operations speciﬁed by the app de-
veloper. Such responses may cause visible changes to the
current view or transitions to other views. This intercon-
nection structure, together with the layouts and function-
alities of individual views, was found to be sufﬁciently
unique for characterizing each app [50].
In our research, we model such a UI structure as a view
graph, which is a directed weighted graph including all
views within an app and the navigation relations (that
is, the transition from one view to another) among them.
On such a graph, each node is a view, with the number of
its active widgets (those with proper event-response op-
erations) as its weight, and the arcs connecting the nodes
describe the navigation (triggered by the input events) re-
lations among them. According to the types of the events
(e.g., onClick, onFocusChange, onTouch, etc.),
edges can be differentiated from each other.
Such a view graph can effectively describe an app with
a reasonably complicated UI structure. However, it be-
comes less effective for the small apps with only a couple
of views and a rather straightforward connection struc-
ture. To address this issue, we enrich the view graph with
additional features, including other UIs and the types of
widgets that show up in a view. Speciﬁcally, in addi-
tion to view, which is displayed through invocation of
an Android Activity, the UIs such as AlertDialog are
also treated as nodes for the graph. Custom dialogs can
be handled by analyzing class inheritance. Further, each
type of widgets is given a unique value, with a sole pur-
pose of differentiating it from other types. In this way,
we can calculate a UI node’s weight by adding together
the values associated with the widgets it carries to make
a small view graph more distinctive from others. An ex-
ample is illustrated in Figure 2.
Note that we avoid using text labels on UI elements
or other attributes like size or color. All the features se-
lected here, including UIs, types of widgets and events
that cause transitions among UIs, are less manipulable:
in the absence of serious effort, any signiﬁcant change
to them (e.g., adding junk widgets, modifying the widget
types, altering the transitions among views) will perceiv-
ably affect user experience, making it more difﬁcult for
the adversary to use them to impersonate popular apps.
the view graph for a submitted
To construct
Figure 2: A View-graph example.
Ac: Activity; Da: AlertDialog; Dt: TimePickerDialog
Dp: ProgressDialog; Dd: DatePickerDialog
its
code
For
IPC calls
the preprocessing module automatically an-
app,
all UI-related inter-
alyzes
to recover
the channel
through
process communication (IPC),
interfaces.
which an Android app invokes user
include startActivity and
Such
startActivityForResult.
each call,
our approach locates it within a UI and further identiﬁes
the UI it triggers. Speciﬁcally, the program location of
the IPC is examined to determine whether it is inside a
UI-related class v. Its parameter is parsed to ﬁnd out the
class it calls (v′). In this case, nodes are created on the
view graph for both classes (UIs) and an edge is added
to link v to v′. Also, the type of the edge is determined
by the event handler at which the IPC is located: for
example, when the call is found inside the onClick
function for a button, we know that this widget is used to
cause a view transition. All such widgets are identiﬁed
from each class for determining the weight of its node.
Design for scale. Once a view graph is recovered from
an app, we want to quickly compare it across a market (or
markets) to identify those related to the app. This opera-
tion needs to be of high-performance, capable of process-
ing over one million apps within seconds. To this end, we
applied a recently proposed similarity comparison algo-
rithm, called Centroids [7], to the view-graph analysis.
Centroid maps the features of a program’s control-ﬂow
graph (CFG) into a value, which is calculated as the ge-
ometric center of the program. This value has a mono-
tonicity property: that is, whenever a minor change hap-
pens to the CFG, the value changes accordingly at a small
scale, reﬂecting the level of the difference made to the
program. This property localizes the global comparison
to a small number of “neighbors” to achieve high scal-
ability without losing accuracy. The approach was used
for the method comparison in our research (Section 3.3).
However, it cannot be directly adopted for analyzing the
UI structure, as the view graph is quite different from the
CFG. Also, an app’s graph is often fragmented due to the
unusual ways to trigger some of its modules: e.g., most
advertisement views are invoked through callbacks using
the APIs of their library; as a result, their graph becomes
separated from that of the main program. Here we de-
scribe how we address these issues.
USENIX Association  
24th USENIX Security Symposium  663
5
Given a set of subgraphs for an app UI, Gi=1···n, our
preprocess module analyzes them one by one to calcu-
late their individual geometric centers, i.e., v-cores. For
a subgraph Gi, the ﬁrst thing that needs to be done is to
convert the features of each of its nodes (i.e., view) into
a three-dimensional vector ⃗c = {α,β,γ}. Here α is a
sequence number assigned to each node in Gi, which is
done through an ordered deep-ﬁrst traversal of Gi: start-
ing from its main view, we select nodes to visit in the
order of the sizes of their subtrees, and use their individ-
ual weights to break a tie; each node traversed in this way
gets the number based upon its order of being visited. If
two subtrees have the same size, we select the one ac-
cording to their node types. In this way, we ensure that
the assignment of sequence numbers is unique, which
only depends on the structure of the directed weighted
graph. The second element, β, in the vector is the out de-
gree of the node: that is, the number of UIs the node can
lead to. Finally, γ is the number of “transition loops” the
current node is involved: i.e., the structure that from the
node, there exists a navigation path that by visiting each
node on the path only once, the user is able to navigate
back to the current view. Figure 2 presents an example
that show how such a vector is constructed.
After every node k on Gi has been given a vector ⃗ck,
we can calculate its geometric center, i.e., v-core vci, as
follows:
vci =
∑e(p,q)∈Gi (wp⃗cp + wq⃗cq)
∑e(p,q)∈Gi(wp + wq)
where e(p,q) denotes an edge in Gi from node p to q
and wp is the weight of node p. With the monotonicity
of v-cores, we can sort them for a large number of apps
to support a binary search.
In this way, the subgraph
Gi can be quickly compared with millions of graphs to
identify similar ones. Speciﬁcally, given another graph
Gt with a v-core vct, we consider that it matches Gi if
|vci − vct| ≤ τ, where τ is a threshold. Further, given
two apps sharing a subset of their view-graphs Gi(l=1···m),