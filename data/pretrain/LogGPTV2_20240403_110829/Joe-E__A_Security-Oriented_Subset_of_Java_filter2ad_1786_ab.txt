the damage that plugin authors can cause to the main appli-
cation. Similarly, a large Java application may be incremen-
tally migrated to Joe-E by rewriting its component modules.
Because any Java component of a combined application is
unrestricted in privilege, it must be considered part of the
trusted computing base. This Java component has the po-
tential to, via the abstraction-breaking features of Java, vi-
olate the security properties of Joe-E code, and so requires
the same level of careful review required for an all-Java ap-
plication. Use of Joe-E components neither facilitates nor
complicates review of Java code; the beneﬁt is a reduction
of the amount of Java code to be reviewed.
Additionally, we desire Joe-E to have the expressivity
and scalability to support large, real-world systems. We do
not want our abstractions or implementation to place restric-
tions on the scale or complexity of applications that can be
written in the language.
2.2 Supporting secure software
To facilitate construction of secure systems, Joe-E
should:
1. Encourage least privilege. Joe-E is intended to help
programmers achieve the principle of least privilege,
at a ﬁne level of granularity in their program, so that
each subsystem, module, and object receives only the
minimum privilege it needs to accomplish its task. Joe-
E should minimize barriers to least-privilege design of
software.
Joe-E supports this goal through safe defaults: by de-
fault, each block of code has no privileges to access
system resources, and can acquire such privilege only
if some other entity passes it an appropriate capability
(§ 3). In comparison, the default in most other software
platforms is that code runs with all of the privileges
of the user who invoked it, and must explicitly drop
privileges if that is desired; Joe-E reverses this pre-
sumption (§ 4.2). Joe-E’s libraries provide a capability
interface to system resources (e.g., the ﬁlesystem and
network). Also, applications written in Joe-E can de-
vise their own security abstractions that divide up priv-
ileges into smaller pieces appropriate to the application
domain (§ 5.5), further supporting least-privilege pro-
gramming. We expect that systems built in this way
will be more robustly secure, because the effect of bugs
and vulnerabilities is limited:
the fewer privileges a
component has, the less harm it can do if it misbehaves
or runs amok.
2. Isolate untrusted code. We want programs to be able
to run untrusted or mobile code safely. Moreover, we
want programs to be able to interact usefully and efﬁ-
ciently with the untrusted code—and in particular, we
want to be able to run untrusted code in the same JVM
as trusted code. This implies that simple isolation is
not enough; programs must be able to “poke holes in
the sandbox” to enable controlled sharing. We would
like the trusted program and untrusted program to be
able to share access to common data structures, and we
want cross-domain calls to be as efﬁcient as a method
call.
Because Joe-E code receives, by default, no capabili-
ties, it is safe to execute untrusted code that is written
in Joe-E (§ 3). We can limit what the untrusted code
can do, by limiting what capabilities we provide to it;
and conversely, we can grant the untrusted code lim-
ited powers by passing it appropriate capabilities. For
instance, we can enable the untrusted code to write to
a single ﬁle on the ﬁlesystem, by passing it a capabil-
ity for that ﬁle. In Joe-E, data structures can be shared
between components simply by passing a reference to
the data structure, and cross-domain calls are a method
call.
3. Enable safe cooperation. As a generalization of the
previous point, we also want to enable mutually dis-
trusting subsystems to interact safely. Each party
should be able to limit its exposure, should the counter-
party be malicious. Joe-E helps with this goal by sup-
porting strong encapsulation, down to the object gran-
ularity. Each object can be written to enforce its in-
variants while protecting itself from code that makes
use of it (§ 5.3).
2.3 Supporting security code review
Joe-E should help programmers follow a “design for re-
view” philosophy, where the software architecture and im-
plementation are carefully chosen to facilitate security code
review. Joe-E should:
1. Enable reasoning about privileges. It is not enough for
Joe-E to enable least privilege and isolation; it should
also be feasible for reviewers to verify that these se-
curity goals are achieved. Accordingly, Joe-E should
help reviewers upper-bound the set of capabilities a
particular block of code might ever gain access to, or
upper-bound the portions of the program that might
ever gain access to a particular capability. Joe-E should
also make it possible to write code so that these upper
bounds are precise and easily veriﬁable. To help with
this, Joe-E is designed to enable several powerful pat-
terns of reasoning about the ﬂow of capabilities in the
program (§ 5).
2. Support modular reasoning. Joe-E should make it eas-
ier to reason about security properties. If the program
is written appropriately, it should be feasible to ver-
ify a security property by examining a small fraction
of the code. If the object O implements some secu-
rity abstraction, it should be possible to reason about
the security properties of this abstraction (e.g., the in-
variants maintained by O) just by looking at the source
code for O and the objects O relies upon. In particular,
if client objects C1, . . . , Cn make use of O, we should
be able to verify the correctness of O without exam-
ining the code of any client Ci. We call this modular
analysis. Modular analysis is critical if security code
review is to scale to large programs.
Joe-E’s strategy for supporting modular reasoning
about security relies heavily on ﬂexible support for iso-
lation of untrusted code (§ 5.3). Also, many of our
restrictions on Joe-E code support modular reasoning:
the more we restrict what Joe-E code can do, the more
we can restrict the possible behaviors of each client Ci,
which makes it easier to ensure that they do not violate
O’s invariants.
3. Support reasoning about mutability. Shared mutable
state is a headache for reasoning about security, be-
cause it introduces the potential for race conditions,
time-of-check-to-time-of-use vulnerabilities, and sur-
prising consequences of aliasing. Joe-E should help
programmers avoid these risks by providing ﬁrst-class
support for reasoning about mutability and immutabil-
ity. In particular, Joe-E should make it easy for pro-
grammers to build data structures that are transitively
immutable, should provide support for static veriﬁca-
tion of this fact, and should reﬂect these immutability
properties in the static type system. Joe-E addresses
this by extending the Java type system with immutabil-
ity annotations (§ 5.4), by providing library support for
programming with immutable data, and by forbidding
mutable global variables (§ 4.2, § 5.2).
3 Approach
Our approach to improving language security is through
the use of an object-capability language. Such languages
permit a default-deny, least-privilege approach to the au-
thority granted to parts of a program as it executes.
The central feature of object-capability languages is that
they use object references (pointers to objects) to represent
all of the privileges that can be used by a program. In the
simplest case, these simply point to encapsulated memory-
resident objects. Having a pointer to such an object grants
the ability to interact with it via its public interface. Since
access to the object is limited to the interface, the object
can be designed to maintain the privacy and integrity of its
internal state even when passed to untrusted code.
For many purposes, a system that can only operate on
in-memory objects is not enough. Most programs need to
interface with other resources on the system or network. In
object-capability languages, these resources are represented
as objects deﬁned by special library classes. Reference to
such an object allows interaction with the external resource
via a library-deﬁned public interface. In this way, ﬁles on
disk and network connections are naturally represented as
objects.
Access to all references in an object-capability language
is governed by program scope. At any point in time, the pro-
gram can only make use of the capabilities that are reach-
able from its in-scope references. For such an approach to
be sound, the language must be memory-safe: it must be
impossible to “forge” a pointer to an object, such as by per-
forming a type cast operation on a memory address.
To get the most beneﬁt from this approach, we want the
minimal set of privileges we can bestow on part of a pro-
gram to be as small as possible. We’d like the “default state”
for running code to be one in which no harm can be done
unless we explicitly trust it with a reference. For this to be
the case, the global scope (which is available everywhere in
the program) should not allow access to any authority we
would want to deny to completely-untrusted code.
Ideally, we want code to be unable to do anything unless
we have granted it a capability to do so. In real systems, we
may need to relax this slightly for practical reasons; it may
be easy to limit access to in-memory objects and external
resources, but too difﬁcult to prevent code from consuming
CPU cycles or memory, or failing to return in a timely man-
ner. Our approach is to place no limits on the purely com-
putational power of untrusted code, limiting only its access
to data and external resources. If the global scope grants no
access to privileges of concern, one can enforce least priv-
ilege on a ﬁne-grained basis by ensuring that each scope in
the program’s execution only has access to the capabilities
it needs. More importantly, it is possible to reason about
the authority with which different parts of the program are
trusted. Every component of the program has only the ca-
pabilities that have been passed to it.
In contrast with most other object-capability languages,
which use dynamic typing, in Joe-E we can leverage the
Java type system to place static restrictions on how capa-
bilities can propagate as a program executes. With this ap-
proach we are able to restrict the ﬂow of capabilities while
reducing the need for reference monitors and explicit dy-
namic checks in order to guarantee security properties.
3.1 Subsetting
Many new languages have been proposed over the years,
but relatively few have seen widespread adoption. Program-
mers have large amounts of experience with and code in ex-
isting languages, and thus are reluctant to invest in switch-
ing to a new language.
A number of new languages have been deﬁned as exten-
sions to existing languages. This has the advantage of lever-
aging developer experience and preserving a greater degree
of familiarity than deﬁning a new language from scratch.
Unfortunately, programs written in the extended language
become incompatible with tools (debuggers, interpreters,
proﬁlers, IDEs) designed for the original language. De-
velopers are wary of becoming locked into such extended
languages, as they are not guaranteed to maintain the same
level of support as the base language going forward.
We take a different approach: we deﬁne the Joe-E lan-
guage as a subset of Java. Every Joe-E program is simply a
Java program that satisﬁes additional language restrictions
that are veriﬁed by the Joe-E veriﬁer. We avoid adding new
features to Java or making changes to Java’s semantics; in-
stead, we impose restrictions on the source code that ev-
ery valid Joe-E program must satisfy (see Fig. 4 and § 4).
The Joe-E veriﬁer checks that these restrictions are met, but
not does not transform the program in any way. This ap-
proach allows use of the standard Java tools, compiler, and
runtime, as well as allowing Joe-E programs to coexist with
Java code and libraries.1 More importantly, this allows us to
leverage programmers’ experience with the Java language,
while introducing security-oriented programming patterns.
Joe-E can be thought of as simply an idiomatic way to write
Java code, using conventions that facilitate a style of rea-
soning. The Joe-E veriﬁer ensures that all checked code
conforms to these conventions.
4 Design of Joe-E
The Joe-E language restrictions are chosen so it will
be intuitive and predictable to the programmer which pro-
grams will pass the Joe-E veriﬁer. We avoid sophisticated
program analysis, instead favoring programming rules that
are simple to state. For similar reasons, we avoid whole-
program analysis. Instead, the Joe-E veriﬁer analyzes each
source ﬁle individually. This ﬁle-at-a-time approach also
helps scalability and lets us support open-world extensibil-
ity: new code can be added to the system, without invalidat-
ing the analysis previously performed on ﬁles that have not
changed.
1There is also no need to present formal semantics for the Joe-E lan-
guage, as they are identical to those of Java.
Enforce reference unforgeability
• prohibit deﬁning native methods
Prevent unexpected reference propagation
• require all throwables to be immutable
Remove ambient authority
• tame Java APIs that provide access to the
outside world without an explicit capability
• require all static ﬁelds to be final and of
an immutable type
Enforce secure encapsulation
• prohibit overriding finalize()
• tame Java reﬂection API
• prevent catching Errors
• prohibit finally keyword
Figure 4. Overview of restrictions that Joe-E
imposes to enforce capability security.
4.1 Memory Safety and Encapsulation
Memory-safe languages like Java provide the foundation
for sound object-capability languages, as they ensure object
references cannot be forged. In Java, references cannot be
created by pointer arithmetic or casting integers to point-
ers, but rather can only be obtained by copying existing ref-
erences. The site at which an object is created using the
new operator is initially the sole holder of a reference to the
new object and has control over how the object is shared.
This memory safety property can be broken through the use
of native methods, so Joe-E prevents the deﬁnition of such
methods.
The access modiﬁer private allows an object to encap-
sulate a reference to another object in such a way that it can
only be accessed via the enclosing object’s methods. The
public interface of the enclosing class then dictates the pol-
icy for use of the wrapped object. Capability-secure pro-
gramming relies crucially on the security of this encapsu-
lation property.
Java’s reﬂection API provides a facility
for disabling access checks on methods and ﬁelds, allowing
malicious clients to bypass object encapsulation. To ensure
that encapsulation cannot be broken, we do not expose this
facility to Joe-E code.
Another Java feature with surprising consequences is the
ability to deﬁne custom ﬁnalization behavior, by overrid-
ing the finalize() method. The garbage collector in-
vokes user-deﬁned finalize() code when an otherwise
dead object is collected. This can violate object invari-
ants that could be crucial to security, breaking encapsu-
lation. See Fig. 5, which illustrates how malicious code
(EvilOuterClass) could construct an OddInt instance
that holds an even integer, subverting the checks in the
public class OddInt {
final int content;
public OddInt(int content) {
if ((content % 2) == 0)
throw new IllegalArgumentException();
this.content = content;
}
}
class EvilOuterClass {
OddInt stash;
class NotReallyOddInt extends OddInt {
NotReallyOddInt() {
super(0);
}
void finalize() {
stash = this;
}
}
}
Figure 5. finalize() can violate object invari-
ants, subverting encapsulation.
In this ex-
ample, stash can contain an object whose
content ﬁeld is uninitialized and thus has the
value of zero.
OddInt constructor. Joe-E prevents these encapsulation-
breaking attacks by prohibiting Joe-E code from deﬁning
custom ﬁnalizers.
4.2 Removing Ambient Authority
The privileges provided by Joe-E’s global scope are
strictly limited. We prevent Joe-E code from reading or
modifying any mutable state or external resource without
an explicit capability to do so.
This is perhaps our most signiﬁcant and visible departure
from Java’s architecture. In Java, even code that starts out
without any references has essentially all the privileges of
the program; its lack of references does little to contain it.
The authority that it needs to perform these tasks is avail-
able as an “ambient” property of the process: it is available
to all code, in every scope. In Joe-E, no authority is ambi-
ently available, so the resources needed by Joe-E code must
be explicitly provided, typically as constructor arguments.
This design refactoring is the same as that done for “depen-
dency injection”, where code that depends on a resource is
provided with a reference to the resource, instead of con-
structing or accessing the resource directly. In dependency
injection, this refactoring is done to better support the con-
ﬁguration and testing of software. In Joe-E, this refactoring
additionally supports security review of software.
4.2.1 Taming the Java class library
The Java library deﬁnes many static methods that have side
effects on the outside world, as well as many constructors
that create objects permitting similar effects. This is a ma-
jor source of ambient authority in Java. For example, File
has a constructor that will take a string and return an object
representing the ﬁle with that name. The resulting object