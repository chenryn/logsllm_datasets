        shll    $4, %ebx
        addl    %ebx, 2f
        jmp    1f            # Short jump to serialize on 386/486
    1:
        movw    $__BOOT_DS, %cx
        movw    $__BOOT_TSS, %di
        movl    %cr0, %edx
        orb    $X86_CR0_PE, %dl    # Protected mode
        movl    %edx, %cr0
        # Transition to 32-bit mode
        .byte    0x66, 0xea        # ljmpl opcode
    2:    .long    .Lin_pm32        # offset
        .word    __BOOT_CS        # segment
    SYM_FUNC_END(protected_mode_jump)
其中 `in_pm32`包含了对32-bit入口的跳转语句:
        .code32
        .section ".text32","ax"
    SYM_FUNC_START_LOCAL_NOALIGN(.Lin_pm32)
        # Set up data segments for flat 32-bit mode
        movl    %ecx, %ds
        movl    %ecx, %es
        movl    %ecx, %fs
        movl    %ecx, %gs
        movl    %ecx, %ss
        # The 32-bit code sets up its own stack, but this way we do have
        # a valid stack if some debugging hack wants to use it.
        addl    %ebx, %esp
        # Set up TR to make Intel VT happy
        ltr    %di
        # Clear registers to allow for future extensions to the
        # 32-bit boot protocol
        xorl    %ecx, %ecx
        xorl    %edx, %edx
        xorl    %ebx, %ebx
        xorl    %ebp, %ebp
        xorl    %edi, %edi
        # Set up LDTR to make Intel VT happy
        lldt    %cx
        jmpl    *%eax            # Jump to the 32-bit entrypoint
    SYM_FUNC_END(.Lin_pm32)
`32-bit`的入口地址位于汇编文件`/source/arch/x86/boot/compressed/head_64.S`中，尽管它的名字包含
`_64`后缀。我们可以在 `/source/arch/x86/boot/compressed`目录下看到两个相似的文件:
  * `/source/arch/x86/boot/compressed/head_32.S`.
  * `/source/arch/x86/boot/compressed/head_64.S`;
然而`32-bit`模式的入口位于第二个文件中，而第一个文件在 `x86_64`配置下不会参与编译。
我们可以查看`/source/arch/x86/boot/compressed/Makefile#L76`
    vmlinux-objs-y := $(obj)/vmlinux.lds $(obj)/kernel_info.o $(obj)/head_$(BITS).o 
        $(obj)/misc.o $(obj)/string.o $(obj)/cmdline.o $(obj)/error.o 
        $(obj)/piggy.o $(obj)/cpuflags.o
代码中的 `head_*`取决于 `$(BITS)`
变量的值，而该值由”架构”决定。我们可以在`/source/arch/x86/Makefile#L64`找到相关代码:
    ifeq ($(CONFIG_X86_32),y)
            BITS := 32
            ......
    else
            BITS := 64
            ......
### 处理器进入长模式(`startup_32`函数分析)
现在程序从`protected_mode_jump`来到了`startup_32`中，这个函数将为处理器进入长模式`long
mode`做好准备，并且直接跳转进入长模式：
        .code32
        .text
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include "pgtable.h"
    /*
     * Locally defined symbols should be marked hidden:
     */
        .hidden _bss
        .hidden _ebss
        .hidden _got
        .hidden _egot
        __HEAD
        .code32
    SYM_FUNC_START(startup_32)
        /*
         * 32bit entry is 0 and it is ABI so immutable!
         * 32bit 的条目是 0 ，它是 Application binary interface ，因此它的值是静态的！
         * If we come here directly from a bootloader,
         * kernel(text+data+bss+brk) ramdisk, zero_page, command line
         * all need to be under the 4G limit.
         */
        cld
        /*
         * Test KEEP_SEGMENTS flag to see if the bootloader is asking
         * us to not reload segments
         */
        testb $KEEP_SEGMENTS, BP_loadflags(%esi)
        jnz 1f
        cli
        movl    $(__BOOT_DS), %eax
        movl    %eax, %ds
        movl    %eax, %es
        movl    %eax, %ss
    1:
    /*
     * Calculate the delta between where we were compiled to run
     * at and where we were actually loaded at.  This can only be done
     * with a short local call on x86.  Nothing  else will tell us what
     * address we are running at.  The reserved chunk of the real-mode
     * data at 0x1e4 (defined as a scratch field) are used as the stack
     * for this calculation. Only 4 bytes are needed.
     */
        leal    (BP_scratch+4)(%esi), %esp
        call    1f
    1:    popl    %ebp
        subl    $1b, %ebp
    /* setup a stack and make sure cpu supports long mode. */
        movl    $boot_stack_end, %eax
        addl    %ebp, %eax
        movl    %eax, %esp
        call    verify_cpu
        testl    %eax, %eax
        jnz    .Lno_longmode
    /*
     * Compute the delta between where we were compiled to run at
     * and where the code will actually run at.
     *
     * %ebp contains the address we are loaded at by the boot loader and %ebx
     * contains the address where we should move the kernel image temporarily
     * for safe in-place decompression.
     */
    #ifdef CONFIG_RELOCATABLE
        movl    %ebp, %ebx
        movl    BP_kernel_alignment(%esi), %eax
        decl    %eax
        addl    %eax, %ebx
        notl    %eax
        andl    %eax, %ebx
        cmpl    $LOAD_PHYSICAL_ADDR, %ebx
        jge    1f
    #endif
        movl    $LOAD_PHYSICAL_ADDR, %ebx
    1:
        /* Target address to relocate to for decompression */
        movl    BP_init_size(%esi), %eax
        subl    $_end, %eax
        addl    %eax, %ebx
    /*
     * Prepare for entering 64 bit mode
     */
        /* Load new GDT with the 64bit segments using 32bit descriptor */
        addl    %ebp, gdt+2(%ebp)
        lgdt    gdt(%ebp)
        /* Enable PAE mode */
        movl    %cr4, %eax
        orl    $X86_CR4_PAE, %eax
        movl    %eax, %cr4
     /*
      * Build early 4G boot pagetable
      */
        /*
         * If SEV is active then set the encryption mask in the page tables.
         * This will insure that when the kernel is copied and decompressed
         * it will be done so encrypted.
         */
        call    get_sev_encryption_bit
        xorl    %edx, %edx
        testl    %eax, %eax
        jz    1f
        subl    $32, %eax    /* Encryption bit is always above bit 31 */
        bts    %eax, %edx    /* Set encryption mask for page tables */
    1:
        /* Initialize Page tables to 0 */
        leal    pgtable(%ebx), %edi
        xorl    %eax, %eax
        movl    $(BOOT_INIT_PGT_SIZE/4), %ecx
        rep    stosl
        /* Build Level 4 */
        leal    pgtable + 0(%ebx), %edi
        leal    0x1007 (%edi), %eax
        movl    %eax, 0(%edi)
        addl    %edx, 4(%edi)
        /* Build Level 3 */
        leal    pgtable + 0x1000(%ebx), %edi
        leal    0x1007(%edi), %eax
        movl    $4, %ecx
    1:    movl    %eax, 0x00(%edi)
        addl    %edx, 0x04(%edi)
        addl    $0x00001000, %eax
        addl    $8, %edi
        decl    %ecx
        jnz    1b
        /* Build Level 2 */
        leal    pgtable + 0x2000(%ebx), %edi
        movl    $0x00000183, %eax
        movl    $2048, %ecx
    1:    movl    %eax, 0(%edi)
        addl    %edx, 4(%edi)
        addl    $0x00200000, %eax
        addl    $8, %edi
        decl    %ecx
        jnz    1b
        /* Enable the boot page tables */
        leal    pgtable(%ebx), %eax
        movl    %eax, %cr3
        /* Enable Long mode in EFER (Extended Feature Enable Register) */
        movl    $MSR_EFER, %ecx
        rdmsr
        btsl    $_EFER_LME, %eax
        wrmsr
        /* After gdt is loaded */
        xorl    %eax, %eax
        lldt    %ax
        movl    $__BOOT_TSS, %eax
        ltr    %ax
        /*
         * Setup for the jump to 64bit mode
         *
         * When the jump is performend we will be in long mode but
         * in 32bit compatibility mode with EFER.LME = 1, CS.L = 0, CS.D = 1
         * (and in turn EFER.LMA = 1).    To jump into 64bit mode we use
         * the new gdt/idt that has __KERNEL_CS with CS.L = 1.
         * We place all of the values on our mini stack so lret can
         * used to perform that far jump.
         */
        pushl    $__KERNEL_CS
        leal    startup_64(%ebp), %eax
    #ifdef CONFIG_EFI_MIXED
        movl    efi32_boot_args(%ebp), %edi
        cmp    $0, %edi
        jz    1f
        leal    efi64_stub_entry(%ebp), %eax
        movl    %esi, %edx
        movl    efi32_boot_args+4(%ebp), %esi
    1:
    #endif
        pushl    %eax
        /* Enter paged protected Mode, activating Long Mode */
        movl    $(X86_CR0_PG | X86_CR0_PE), %eax /* Enable Paging and Protected mode */
        movl    %eax, %cr0
        /* Jump from 32bit compatibility mode into 64bit mode. */
        lret
    SYM_FUNC_END(startup_32)
处理器进入长模式后将跳入`startup_64`函数