        evmc_address const* _addr,
        evmc_uint256be const* _key
    ) noexcept
    {
        (void) _addr;
        auto& env = static_cast(*_context);
        assert(fromEvmC(*_addr) == env.myAddress);
        u256 key = fromEvmC(*_key);
        *o_result = toEvmC(env.store(key));
    }
        virtual u256 store(u256 _n) override final { return m_s.storage(myAddress, _n); }
最终工作来到 State::storage 中
    u256 State::storage(Address const& _id, u256 const& _key) const
    {
        if (Account const* a = account(_id))
        {
            auto mit = a->storageOverlay().find(_key);
            if (mit != a->storageOverlay().end())
                return mit->second;
            // Not in the storage cache - go to the DB.
            SecureTrieDB memdb(const_cast(&m_db), a->baseRoot());          // promise we won't change the overlay! :)
            string payload = memdb.at(_key);
            u256 ret = payload.size() ? RLP(payload).toInt() : 0;
            a->setStorageCache(_key, ret);
            return ret;
        }
        else
            return 0;
    }
函数首先根据 address 获取对应的 Account 对象
    Account* State::account(Address const& _addr)
    {
        auto it = m_cache.find(_addr);   // m_cache 使用 unordered_map 作为存储结构， find 返回 pair 迭代器，迭代器 it->frist 表示 key ; it->second 表示 value
        if (it != m_cache.end())
            return &it->second;
        if (m_nonExistingAccountsCache.count(_addr))  // m_nonExistingAccountsCache 用于记录那些在当前环境下不存在的 addr
            return nullptr;
        // Populate basic info.
        string stateBack = m_state.at(_addr);  //  m_state 即为 StateDB ，以 addr 作为 key 获取这个 account 相关的信息，StateDB 中的数据已经格式化成了 string
        if (stateBack.empty())
        {
            m_nonExistingAccountsCache.insert(_addr);
            return nullptr;
        }
        clearCacheIfTooLarge();
        RLP state(stateBack);  // 创建 RLP 对象。交易必须是正确格式化的RLP。”RLP”代表Recursive Length Prefix，它是一种数据格式，用来编码二进制数据嵌套数组。以太坊就是使用RLP格式序列化对象。
        auto i = m_cache.emplace(
            std::piecewise_construct,
            std::forward_as_tuple(_addr),
            std::forward_as_tuple(state[0].toInt(), state[1].toInt(), state[2].toHash(), state[3].toHash(), Account::Unchanged)
        );  // 把这个 addr 以及其对应的数据加入到 cache 中，使用逐片构造函数
        m_unchangedCacheEntries.push_back(_addr);
        return &i.first->second;  // 返回这个 account
    }
下面的注释是部分 Account 对象的说明 ,Account 对象用于表示一个以太账户的状态，Account 对象和 addr 通过 Map 存储在
State 对象中。 每一个 Account 账户包含了一个 storage trie 用于索引其在整个 StateDB 中的节点，Account 对于
storage 的操作会首先在 storageOverlay 这个 map 上进行，待之后有需要时才会将数据更新到 trie 上
    /**
     * Models the state of a single Ethereum account.
     * Used to cache a portion of the full Ethereum state. State keeps a mapping of Address's to Accounts.
     *
     * Aside from storing the nonce and balance, the account may also be "dead" (where isAlive() returns false).
     * This allows State to explicitly store the notion of a deleted account in it's cache. kill() can be used
     * for this.
     *
     * For the account's storage, the class operates a cache. baseRoot() specifies the base state of the storage
     * given as the Trie root to be looked up in the state database. Alterations beyond this base are specified
     * in the overlay, stored in this class and retrieved with storageOverlay(). setStorage allows the overlay
     * to be altered.
     *
回到 State::storage 函数，在获取了 Account 之后查看 Account 的 storageOverlay 中是否有指定 key 的
value ，如果没有就去 DB 中查找，以 Account->m_storageRoot 为根，从 State->m_db 中获取一个 db
的拷贝。在这个 tire 的拷贝中查找并将其 RLP 格式化之后存在 m_storageOverlay 中
可以看到在实际数据同步到区块上之前，EVM 为 storage 和 account 均提供了二级缓存机制用以提高访存的效率：
  * storage： 一级缓存->account->m_storageOverlay; 二级缓存->state->m_db
  * account: 一级缓存->state->m_cache; 二级缓存->state->m_state
同样我们从存储 Storage 的入口点 SSTORE 开始进行分析, 主体函数为 VM::interpretCases , SSTORE opcode
最终会访问一个 unordered_map 类型的 hash 表
    void VM::interpretCases(){
            // .....
            CASE(SSTORE)
            {
                ON_OP();
                if (m_message->flags & EVMC_STATIC)
                    throwDisallowedStateChange();
                updateSSGas();
                updateIOGas();
                evmc_uint256be key = toEvmC(m_SP[0]);
                evmc_uint256be value = toEvmC(m_SP[1]);
                m_context->fn_table->set_storage(m_context, &m_message->destination, &key, &value);
            }
            NEXT
            // .....
    }
    |-        evmc_context_fn_table const fnTable = {
            accountExists,
            getStorage,
            setStorage,
            getBalance,
            getCodeSize,
            copyCode,
            selfdestruct,
            eth::call,
            getTxContext,
            getBlockHash,
            eth::log,
        };
        void setStorage(
            evmc_context* _context,
            evmc_address const* _addr,
            evmc_uint256be const* _key,
            evmc_uint256be const* _value
        ) noexcept
        {
            (void) _addr;
            auto& env = static_cast(*_context);
            assert(fromEvmC(*_addr) == env.myAddress);
            u256 index = fromEvmC(*_key);
            u256 value = fromEvmC(*_value);
            if (value == 0 && env.store(index) != 0)                   // If delete
                env.sub.refunds += env.evmSchedule().sstoreRefundGas;  // Increase refund counter
            env.setStore(index, value);    // Interface uses native endianness
        }
        |-            void ExtVM::setStore(u256 _n, u256 _v)
            {
                m_s.setStorage(myAddress, _n, _v);
            }
            |-    
                void State::setStorage(Address const& _contract, u256 const& _key, u256 const& _value)
                {
                    m_changeLog.emplace_back(_contract, _key, storage(_contract, _key));
                    m_cache[_contract].setStorage(_key, _value);
                }
                |-    
                    class Account{
                        // ...
                        std::unordered_map m_storageOverlay;
                        // ...
                        void setStorage(u256 _p, u256 _v) { m_storageOverlay[_p] = _v; changed(); }
                        // ...
                    }
#### MEMORY
依旧从 MSTORE 入手，查看 EVM 中对 memory 的处理
            CASE(MSTORE)
            {
                ON_OP();
                updateMem(toInt63(m_SP[0]) + 32);
                updateIOGas();
                *(h256*)&m_mem[(unsigned)m_SP[0]] = (h256)m_SP[1];
            }
            NEXT
可以看到 memory 只在当前运行环境中有效，并不存储在与 state 相关的任何位置，因此 memory 只在当前这次运行环境内生效，即 Memory
只在一次交易内生效
#### CODE
code 与 storage 类似，也是与 Account 相关的，因此 code 也会存储在 Account 对应的结构中，一级缓存为
account->m_codeCache； 二级缓存存放位置 state->m_db[codehash]，
    void State::setCode(Address const& _address, bytes&& _code)
    {
        m_changeLog.emplace_back(_address, code(_address));
        m_cache[_address].setCode(std::move(_code));
    }
### 总结
虽然 hash 碰撞的问题出现在了一起类似 CTF 的“盗币”比赛中，但是我们也应该重视由于 EVM 存储设计问题而带来的变量覆盖以及 hash
碰撞之类的问题，希望各位智能合约的开发者们在开发中关注代码中的数据存储，避免由于此类问题带来的损失。
### Timeline
6月28日——发现存在变量覆盖以及 hash 碰撞问题  
11月6日——发现存在 hash 碰撞问题的合约
### Reference
[1]  [2]
 [3]
[4] 
* * *