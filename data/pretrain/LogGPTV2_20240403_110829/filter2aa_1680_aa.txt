# Breaking Secure Bootloaders

## Talk Outline
- Smartphones often use signature verification to protect their firmware.
- This is implemented in bootloaders, which also provide facilities for firmware updates.
- Weaknesses in these update protocols can be exploited to bypass signature protections.
- Both the core SoC and peripheral chips are potential targets for attack.

## Biography
**Christopher Wade**
- Security Consultant at Pen Test Partners
- Twitter: [@Iskuri1](https://twitter.com/Iskuri1)
- GitHub: [Iskuri](https://github.com/Iskuri)
- Website: [Pen Test Partners](https://www.pentestpartners.com)

## Project One – The SDM660 Android Bootloader
### Background
- I purchased an Android phone for mobile security research.
- To use all my testing tools, I needed root access, which required unlocking the bootloader.
- Unlocking the bootloader disables signature verification protection.
- An unlock tool from the manufacturer was necessary.

### Custom Bootloader Unlock Functionality
- Some smartphone manufacturers modify the bootloader to require custom tools for unlocking or remove the functionality entirely.
- This often involves creating a user account and waiting for a period of time.
- Unlocks are performed using custom USB fastboot commands.
- Reasons for these restrictions include:
  - Preventing inexperienced users from weakening phone security.
  - Preventing third parties from loading malware before sale.
  - Allowing the manufacturer to track who is unlocking their bootloaders.

### Common Android Bootloader Protection
- Analysis of the unlock process was performed using USBPCAP.
- A 0x100 byte signature was downloaded from the manufacturer’s servers and sent to the phone.
- The bootloader verified the signature and unlocked its restrictions.
- I used an older phone to analyze this functionality and set a challenge to break it within seven days.

### Target Device
- Mid-range phone released in 2017.
- Uses a Qualcomm Snapdragon 660 chipset (ARM64 architecture).
- The bootloader had been previously unlocked but could be re-locked for the project.
- The bootloader was modified to add further custom functionality.

### Fastboot
- Command interface for most Android bootloaders.
- Uses a basic USB interface with raw text commands and responses.
- Example commands:
  - `reboot`
  - `flash:`
  - `download:`
  - `oem device-info`
  - `oem unlock`

### Implementing Fastboot
- Easy to implement using standard USB libraries.
- Sends ASCII commands and data via a USB bulk endpoint.
- Returns human-readable responses asynchronously via a bulk endpoint.
- Libraries exist for this purpose but are not strictly necessary.

### ABL Bootloader
- Provides Fastboot USB interface.
- Verifies and executes the Android Operating System.
- Accessed via ADB or button combinations on boot.
- Stored in the “abl” partition on the device.
- Qualcomm’s base bootloader has available source code, but vendors can modify it.

### Analyzing The Bootloader
- The bootloader is stored as an ELF file in a partition.
- Contains no executable code but includes a UEFI filesystem.
- Extracted using the tool “uefi-firmware-parser” to find a Portable Executable.
- Directly loaded into IDA for analysis.

### Analyzing The Bootloader - Commands
- Fastboot commands are stored in a table as text commands and function callbacks.
- This aids in identifying hidden or non-standard commands.
- Changes in command functionality are easy to identify.
- Logging strings in the code help with identifying functionality.

### Identifying A Potential Bootloader Weakness
- The “flash:” command usually only flashes partitions on unlocked bootloaders.
- The manufacturer modified the command to allow flashing of specific custom partitions when the bootloader was locked.
- These partitions were handled differently from those implemented directly by Qualcomm.
- There was potential for memory corruption or partition overwrites in this custom functionality.

### Implementing the flash: Command
- Assumptions about the command sequence led to a crash due to an incorrect “flash:” command after the sequence.
- The lack of a “download:” command before the payload was likely the cause.
- Actual command sequence:
  - `download:`
  - `flash:`
- My command sequence:
  - `flash:`

### Analysis Of Crash
- USB connectivity stopped functioning entirely.
- The phone required a hard reset (volume down + power for ten seconds).
- A smaller payload size did not crash the phone.
- A binary search approach identified the maximum size without a crash: 0x11bae0.

### Overwriting Memory
- Due to the unusual memory size, a buffer overflow was suspected.
- With no debugging available, identifying what memory was being overwritten was difficult.
- The bootloader used stack canaries, which could potentially be triggered.
- Manually identified the next byte: 0x11bae1 bytes of data were sent, and the last byte value was incremented until the phone did not crash, identifying the next byte as 0xff.

### Automated Power Cycling
- Suggested removal of the phone battery and a USB relay to automate power cycling.
- Instead, a hair tie was wrapped around the power and volume down buttons, causing a boot loop that allowed USB access for sufficient time to test the overflow.

### Memory Dumping
- The custom fastboot tool was modified to attempt memory dumping.
- Verified two key events: a “flashing failed” response and whether it crashed afterwards.
- Each iteration took 10-30 seconds.
- Left overnight, this generated 0x34 bytes of data that did not crash the phone.
- The repeated byte values and lack of default stack canary suggested this was not the stack.
- All 32-bit words were valid ARM64 opcodes.

### Unknown Memory Analysis
- Most opcodes, while valid, would not match the bootloader exactly.
- Stack management and branch operations would have to be almost exact.
- Searching for “SUB WSP” and “BL” opcodes in the bootloader yielded no results.

### ARM64 Features
- ARM64 operations can often have unused bits flipped without altering functionality.
- Registers can be used in both 32-bit (Wx) and 64-bit (Xx) mode.
- Branch instructions can have conditions for jumping.
- These features could superficially allow for changes to the stack and branch handling instructions without altering functionality.

### Identifying Similar Instructions
- Used the “BL” instruction, which was less common than the stack.
- Performed a text search, removing the first nybble from the opcode.
- Identified a single valid instruction in the “crclist” parser and opcodes similar to the memory dump.

### Outline Of Buffer Overflow
- Analysis showed the bootloader was overwritten after 0x101000 bytes of data.
- The bootloader is executed from RAM, as demonstrated by this overflow.
- The original bootloader binary could be fully written using the overflow to prevent subsequent crashes.
- This binary could be modified to run any required unsigned code.

### Unlocking The Bootloader
- To unlock the bootloader, a jump to the code after the RSA check was necessary.
- A simple branch instruction could be generated to jump to the relative address of the bootloader unlock function.
- Online ARM64 assemblers were used to generate these opcodes.
- Success was easy to identify, despite the difficulty in debugging.

### Buffer Overflow Implications
- Rooting the phone and deploying custom recovery images became possible.
- Qualcomm chips can encrypt the “userdata” partition on locked bootloaders, even without a password.
- Unlocking the bootloader completely disallows access to this data.
- Limited RAM dumping was possible with this code execution and cold boot attacks, but not access to user data.
- Development, analysis, and exploitation were achieved over four days.
- Attempts to replicate the vulnerability on a newer phone using an SDM665 were not effective.

### Replicating The Vulnerability
- Procured a second smartphone with an SDM660.
- All bootloader unlocking functionality was disabled by the manufacturer.
- Identified a similar signature verification approach.
- Using an OTA image, the bootloader was analyzed, showing the code blocking the bootloader unlock.
- No hidden bootloader commands were identified, but some OEM commands were noted.

### Differences In Memory Layout
- Initially, the old crash was attempted, but the device still functioned, implying the vulnerability might not be present.
- Sent a much larger payload size (8MB), which crashed the phone, indicating a different memory layout.
- Manual analysis showed the bootloader was overwritten after 0x403000 bytes, different from the 0x101000 on the first device.
- With this, a bootloader unlock could be rapidly developed.

### Patching Bootloader Unlock
- Identified a single branch instruction that sent an error response or unlocked the bootloader based on the signature.
- Replaced this with a NOP instruction, bypassing the check.
- Allowed the bootloader to be unlocked and the phone to be rooted.
- The vulnerability was disclosed directly to Qualcomm due to its potential existence on all SDM660-based phones.

### Removing Unauthorised Bootloader Access
- Bootloader access is not required for users in contexts where unlocking is not permitted.
- It is possible to disable fastboot access entirely to prevent attacks against it.
- Fastboot can be reactivated via Engineering apps in the main Android OS.
- Manufacturers who disable bootloader unlocking by consumers often use this approach.

### Reading Back Memory
- The “download:” function could be patched to return memory from arbitrary addresses.
- This could read back the bootloader code, stack, and heap but could not read arbitrary memory.
- This restricted the potential for any cold boot attacks on memory.

### Bypassing Qualcomm’s Userdata Protection
- Qualcomm’s chips encrypt the “userdata” partition, even without passwords or PINs.
- This prevents forensic chip-off analysis and access to user data via bootloader unlocking.
- If an unlocked bootloader tries to access the partition, it is identified as being “corrupted” and is formatted.
- Bypassing this protection could allow access to user data via physical access.

### Bypassing Qualcomm’s Userdata Protection
- Using Qualcomm’s source code, the encryption process was analyzed.
- Encryption keys are intentionally inaccessible, even with code execution.
- The code uses an internal EFI API to decrypt the partition, which is unmodifiable.
- The API verifies whether it is unlocked and whether the firmware is signed.
- Time Of Check To Time Of Use (TOCTOU) vulnerabilities were considered.