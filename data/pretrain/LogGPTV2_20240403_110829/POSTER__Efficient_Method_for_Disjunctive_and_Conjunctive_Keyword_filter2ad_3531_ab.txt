pkS and skS and gives pkR and pkS to the attacker A.
Phase 1: the attacker A can adaptively ask the challenger C for the trapdoor TQ for any query Q
of his choice. Moreover, A can adaptively ask C for the encrypted index for any keyword set of
his choice.
Challenge: A selects a target keyword set W∗ and sends it to the C. C selects a random keyword
set R. The restrictions are that the secure indices of W∗ and R have not been obtained in the
previous phase and the trapdoor queried in previous phase can not distinguish W∗ from R.
Then, C picks a random bit β ∈ {0, 1}. Suppose that W0 = W∗ and W1 = R, C produces
Iβ = IndexBuild(pkR, skS, pkS, Wβ) and sends {Iβ, W0, W1} to A.
Phase 2: A can continue asking for trapdoor TQ and index IW for any query Q and keyword set
W of his choice. The restrictions in this phase are the same as that in the challenge phase.
Response:the attacker A outputs β
So, A’s advantage can be expressed as a function of the security parameter (1n):
(cid:48) ∈ {0, 1} and wins the game if β
= β.
(cid:48)
AdvIND−CR−CKA
A
(1n) = |Pr[β
(cid:48)
= β] − 1
2
|
Based on the game above, the security deﬁnition is described as follows:
Deﬁnition 2. We say that a SPE-CKS is IND-CR-CKA secure if for any PPT attacker A according to the game
IND-CR-CKA, the function AdvIND−CR−CKA
(1n) is negligible.
A
Jeong et al. [25] pointed that the consistency implies insecurity of a SPE scheme against keyword
guessing attacks, since the public key in the tradition SPE scheme can be accessed by anyone
and anyone can create the secure index. When trapdoors are obtained by attackers, attackers can run
keyword guessing attack to guess the keywords contained in the indices and trapdoors. Inspired by
the idea in Reference [11], by limiting the adversary’s ability to generate the index, our scheme can
defend against the ofﬂine guessing attack.
3.3. Bilinear Map
The deﬁnition of the bilinear map was introduced in Reference [2]. Let G1, G2 be two cyclic
groups of lager prime order q. A bilinear pairings map ˆe : G1 × G1 → G2 can be deﬁned, satisfying the
following properties:
Bilinear: ˆe(ua, vb) = ˆe(u, v)ab,where u, v ∈ G1 and a, b ∈ Z∗
q ;
1.
2. Non-degenerate: ˆe does not send all pairs of points in G1 × G1 to the identity in G2. If g is a
generator of G1 then ˆe(g, g) is a generator of G2;
Appl. Sci. 2019, 9, 3655
6 of 16
3.
Computable: There is an efﬁcient algorithm to compute ˆe(u, v), for any u, v ∈ G1.
A bilinear pairing map satisfying three properties above is reckoned as an admissible bilinear
map. An efﬁcient admissible bilinear map can be constructed by using the Weil pairing or the Tate
pairing proposed in Reference [29] .
3.4. Complexity Assumption
Decision n-Bilinear Difﬁe-Hellman Inversion Assumption [30]: An algorithm C which outputs
We review two complexity assumptions related to bilinear map named Decision n-Bilinear
Difﬁe-Hellman Inversion (D-n-BDHI) assumption proposed in Reference [30] and computational
Difﬁe-Hellman (CDH) assumption introduced in Reference [31]. The security proof of our scheme is
based on these two assumptions.
b ∈ {0, 1} has advantage ε in solving the D-n-BDHI assumption in G1 if:
AdvD−n−BDHI
where the probability is over the random choice of x ∈ Z∗
the random choice R ∈ G∗
x ) = 1] − Pr[C(P, xP, x2P, . . . , xnP, R) = 1]| ≥ ε
q ,the random choice of a generator P ∈ G∗
1,
2 and random bits used by C.
C
= |Pr[C(P, xP, x2P, . . . , xnP, ˆe(p, p)
1
Deﬁnition 3. It can be said that the decision(t,n,) n-Bilinear Difﬁe-Hellman Inversion assumption holds in
G1, if no t-time algorithm has advantage at least  in solving the decision n-Bilinear Difﬁe-Hellman Inversion
problem in G1.
Computational Difﬁe-Hellman (CDH) Assumption [31]: Consider a cyclic group G of a prime
order q. The CDH assumption states that, for a randomly chosen generator g and the random integers
a, b ∈ Z∗
q , given a tuple (g, ga, gb), it is computationally intractable to compute the value g(ab).
4. Proposed Spe-Cks Scheme
In this section, we ﬁrst introduce a keyword conversion method which transforms the index
and query keyword sets into the index and query vectors, respectively. Then, through encrypting
these vector by adopting the bilinear pairs over a prime order group, a concrete SPE-CKS scheme
will be proposed. Finally, a rigorous security proof is given to verify the security of the proposed
SPE-CKS scheme.
4.1. Keyword Conversion Method
The keyword conversion method is similar with the one proposed by Zhang et al. [10]. Let φ be
a random string, φ ∈ {0, 1}∗. Let a hash function H1 be {0, 1}∗ → Z∗
q , which can map a keyword
w ∈ {0, 1}∗ to a integer. Let q be a large prime which is larger than the size of the dictionary. So, H1 can
be collision-resistance, which means that, if i (cid:54)= j, then H1(wi|φ) (cid:54)= H1(wj|φ), where wi and wj are
two distinct keywords and wi|φ means a concatenation operation over wi and φ. The details of this
method is described as follows.
(1)
For an index keyword set W = {w1, w2, . . . , wn}, the following function is given.
f (x) = (x − H1(w1|φ))(x − H1(w2|φ)) . . . (x − H1(wn|φ))
= anxn + an−1xn−1 + . . . + a0x0
(2)
The coefﬁcients of the f (x) can be built as an index vector (cid:126)a = {a0, a1, . . . , an}.
For an query keyword set Q = {q1, q2, . . . , qm}, a vector (cid:126)x = {x0, x1, . . . , xn} can be obtained,
where xi = H1(q1|φ)i + H1(q2|φ)i + . . . + H1(qm|φ)i and i ∈ [0, n].
Appl. Sci. 2019, 9, 3655
7 of 16
Note that if there is Q ⊆ W, it is easy to ﬁnd that (cid:126)a · (cid:126)x = 0. This property can be used for the
keywords search. The concrete SPE-CKS scheme is given in the next subsection.
4.2. Construction
Based on the method described in Section 4.1, the index vector (cid:126)a and the query vector (cid:126)x are
obtained by converting W and Q, respectively. Then, through encrypting (cid:126)a and (cid:126)x under two cyclic
groups over a prime order, the encrypted index for W and the trapdoor for Q are built. By utilizing
the bilinear pairing technique, the test algorithm tests whether Q is a subset of W. The concrete
construction of SPE-CKS scheme is given as follows.
0} and the secret key skR = {α0, α1, . . . , αn, β, t}.
KeyGenR(1n): Given a security parameter 1n, the algorithm generates three cyclic groups G, G1, G2
of prime order q and an admissible bilinear pairing ˆe : G1 × G1 → G2 and picks a random
generator g0 of G, a random generator g of G1 and two hash functions H1 : {0, 1}∗ → Z∗
q and
H2 : G2 → {0, 1}logq
2. ˆe, H1, H2 and g are open to the public. Choosing n + 3 random numbers
α0, α1, . . . , αn, β, t ∈ Z∗
q , it outputs the public key pkR = {X0 = gα0, X1 = gα1, . . . , Xn = gαn, Y =
gβ, µ = ˆe(g, g), g0, T = gt
KeyGenS(1n, pkR): Given a security parameter 1n, the algorithm generates a hash function H3 :
G → {0, 1}∗. Randomly choosing a number s ∈ Z∗
0, H3} and skS = {s}.
The algorithm ﬁrst computes φ = H3(Ts) =
skS, W):
IndexBuild(pkR,
H3(g(ts)). Then, given a keyword set W = {w1, w2, . . . , wn}, the algorithm constructs
f (x) = anxn + an−1xn−1 + . . . + a1x + a0 = (x − H1(w1|φ))(x −
a n-degree polynomial
H1(w2|φ)) . . . (x − H1(wn|φ)) by using the keyword conversion method mentioned in Section 4.1,
where H1(w1|φ), H1(w2|φ), . . . , H1(wn|φ) are n roots of the equation f (x) = 0. Given a random
i × grai = gr(ai+αi)
numbers r and the coefﬁcient of f (x) that is an, an−1, . . . , a0, it computes Ci = Xr
for each i ∈ [0, n] by using pkR. Let CW = Yr = grβ and DW = H2(µr), the index of the keyword
set W is: IW = (C0, C1, . . . , Cn, CW, DW ).
Trapdoor(pkR, pkS,
Given a keyword set Q = {q1, q2, . . . , qm},
q , it outputs pkS = {S = gs
The algorithm computes φ = H3(St) = H3(g(ts)).
it selects a random number u ∈ Zq
for each i ∈ [0, n] by using
j=0 αj (H1(q1|φ)j +H1(q2|φ)j +...+H1(qm|φ)j ) , the trapdoor for the keyword query
H1(q1|φ)i +H1(q2|φ)i +...+H1(qm|φ)i
j=0 αj (H1(q1|φ)j +H1(q2|φ)j +...+H1(qm|φ)j )
Let T = g
skR.
Q is TQ = (T0, T1 . . . , Tn, T).
Test(pkR, pkS, TQ, IW): Given a trapdoor TQ = (T0, T1, . . . , Tn, T) and a secure index IW =
(C0, C1, . . . , Cn, CW, DW ), the algorithm computes θ1 = ∏n
i=0 ˆe(Ci, Ti), θ2 = ˆe(CW, T) and tests if
H2(θ1 × θ2) = DW. If so, outputs 1; otherwise, outputs 0.
Correctness. For an index IW = (C0, C1, . . . , Cn, CW, DW ) and a trapdoor TQ = (T0, T1 . . . , Tn, T),
skR, Q):
and computes Ti = g
uβ+∑n
uβ+∑n
u
pkS,
-
-
-
-
-
the computation process of ˆe(Ci, Ti) is as follows:
ˆe(Ci, Ti) = ˆe(gr(ai+αi), g
uβ+∑n
H1(q1|φ)i +H1(q2|φ)i +...+H1(qm|φ)i
j=0 αj (H1(q1|φ)j +H1(q2|φ)j +...+H1(qm|φ)j ) )
rai (H1(q1|φ)i +H1(q2|φ)i +...+H1(qm|φ)i )+rαi (H1(q1|φ)i +H1(q2|φ)i +...+H1(qm|φ)i )
uβ+∑n
j=0 αj (H1(q1|φ)j +H1(q2|φ)j +...+H1(qm|φ)j )
= ˆe(g, g)
Appl. Sci. 2019, 9, 3655
8 of 16
According to the above, the result of θ1 is:
θ1 =
=
n∏
i=0
n∏
i=0
= ˆe(g, g)
Moreover, the result of θ2 is:
ˆe(Ci, Ti)
rai (H1(q1|φ)i +H1(q2|φ)i +...+H1(qm|φ)i )+rαi (H1(q1|φ)i +H1(q2|φ)i +...+H1(qm|φ)i )
uβ+∑n
j=0 αj (H1(q1|φ)j +H1(q2|φ)j +...+H1(qm|φ)j )
ˆe(g, g)
r ∑n
i=0 ai (H1(q1|φ)i +H1(q2|φ)i +...+H1(qm|φ)i )+r ∑n
i=0 αi (H1(q1|φ)i +H1(q2|φ)i +...+H1(qm|φ)i )
uβ+∑n
j=0 αj (H1(q1|φ)j +H1(q2|φ)j +...+H1(qm|φ)j )
θ2 = ˆe(CW, T) = ˆe(grβ, g
uβ+∑n
j=0 αj (H1(q1|φ)j +H1(q2|φ)j +...+H1(qm|φ)j ) )
u
uβ+∑n
j=0 αj (H1(q1|φ)j +H1(q2|φ)j +...+H1(qm|φ)j )
ruβ
= ˆe(g, g)
Then, the result of H2(θ1 × θ2) is:
H2(θ1 × θ2) = H2( ˆe(g, g)
r ∑n
i=0 ai (H1(q1|φ)i +H1(q2|φ)i +...+H1(qm|φ)i )+r ∑n
i=0 αi (H1(q1|φ)i +H1(q2|φ)i +...+H1(qm|φ)i )+ruβ
uβ+∑n
j=0 αj (H1(q1|φ)j +H1(q2|φ)j +...+H1(qm|φ)j )
)
r ∑n
uβ+∑n
i=0 ai (H1(q1|φ)i +H1(q2|φ)i +...+H1(qm|φ)i )