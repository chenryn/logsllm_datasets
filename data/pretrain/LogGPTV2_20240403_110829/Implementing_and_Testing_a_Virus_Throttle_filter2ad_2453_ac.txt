and show that the throttle is able to stop this worm
in 0.02 seconds.
4.2.2 Mobile code propagation
In order to test the eﬀectiveness of the virus throt-
tle at reducing the propagation of a real worm,
the testbed was set up with one class C network
containing 16 Server Blades running a VMware-
encapsulated copy of Windows 2000 Professional
vulnerable to the W32/Nimda-D virus [21]. A ma-
chine which acted as the default gateway and DHCP
server for this network was also conﬁgured. One
of the Windows machines was then infected with
W32/Nimda-D and its progress through the net-
work observed by gathering data using the sniﬀer
conﬁgured as described above. This data was then
analysed and the time at which each system became
USENIX Association
12th USENIX Security Symposium 
291
connections
per second
120
20
40
60
80
100
150
200
850
stopping
time
Nimda
0.25s
Test Worm
5.44s
2.34s
1.37s
1.04s
0.91s
0.21s
0.02s
SQLSlammer
0.02s
allowed
connections
1
5
2
1
1
1
0
0
0
Figure 3: Average time taken by the throttle to stop
real and test worms
infected with the Nimda virus determined. By vary-
ing the number of machines on the network which
had the throttle installed and by repeating each ex-
periment 10 times, we were able calculated the av-
erage time taken for a given number of machines
to be infected assuming that a certain percentage
of the machines on the network had virus throttles
installed. These results are shown in Figure 4.
s
e
n
h
c
a
m
d
e
t
c
e
n
f
i
i
f
o
r
e
b
m
u
N
16
14
12
10
8
6
4
2
0
0
0
4
8
12
16
10
20
30
40
50
60
70
Figure 4: Infection times for diﬀerent numbers of
installed virus throttles (Nimda)
As Figure 4 shows, when no throttles are installed
on any of the 16 machines Nimda takes on aver-
age just over 20 minutes to spread to all 16 ma-
chines. This time is slightly reduced when 25% and
50% of machines have throttles installed. However,
when at least 75% of machines are installed with
the throttle, Nimda is only able to spread to on av-
erage around half the machines on the network in
the same amount of time, and has not spread to
all 16 machines even after over 70 minutes. This
represents both a decrease of 50% in the number
of machines infected and a substantial increase the
time taken for the worm to spread. When every
machine is installed with the throttle, the worm is
unable to spread at all.
Aside from the damage caused by the malicious pay-
loads of many high-speed worms, these worms often
cause denial-of-service attacks through the amount
of network traﬃc they generate. The Sapphire
worm caused network uplinks to become saturated
due to the sheer quantity of traﬃc infected machines
generated, whereas Nimda, while generating sub-
stantially less quantities of network traﬃc, caused
routers and ﬁrewalls to fall over due to their inabil-
ity to process the increased number of connection
requests generated by infected machines. Figure 5
shows, for the experiment described at the start of
this section, the traﬃc load over time on the test
network. Here, the eﬀect of having a network pro-
tected by the throttle is even more marked, with an
approximately 25% reduction in viral traﬃc when
only 25% of the network in protected by the throt-
tle. When 50% of the machines are throttled the
traﬃc load is reduced by over half, and when 75%
are throttled to around 10% of its unthrottled aver-
age. Having all machines installed with the throttle
quickly reduces all viral traﬃc to zero. These results
show the ability of the virus throttle to substantially
reduce the amount of network traﬃc generated by
mobile code.
c
e
s
/
B
k
,
d
e
t
a
r
e
n
e
g
c
i
f
f
a
r
T
180
160
140
120
100
80
60
40
20
0
0
0
4
8
12
16
10
20
30
40
Time (minutes)
50
60
70
Figure 5: Traﬃc loads for diﬀerent numbers of in-
stalled virus throttles (Nimda)
292
12th USENIX Security Symposium 
USENIX Association
4.2.3 User trials
While the previous section shows that the virus
throttle is extremely eﬀective in slowing and stop-
ping the spread of certain classes of worms, an
equally important aspect in determining its overall
utility is establishing its impact on the performance
of applications which legitimately establish connec-
tions in the course of normal user behaviour. If the
throttle, for example, prevents users from accessing
their emails, or slows this down to an unacceptable
speed, it will soon be uninstalled.
From preliminary tests in which the throttle was in-
stalled on a number of researchers’ machines, we re-
ceived no reports of impaired network performance.
We are currently involved in a series of much larger
user trials in which the throttle is installed on the
gateway used by a considerable number of users run-
ning a wide range of network-capable applications
under several diﬀerent operating systems.
Initial
results also point to no noticeable degradation in
network performance.
To further explore the interaction of the throttle
with legitimate network-aware applications, we have
also implemented a throttle simulator which takes
packet traces as input. To gather these packet traces
we conﬁgured a monitoring port on a 80-port switch
on HP’s internal network and ran a packet sniﬀer on
this port. This has allowed us to gather large quan-
tities of data over extended periods of time from
a range of diﬀerent machines. Separating out these
traces on a machine-by-machine basis and then run-
ning them through the simulator allows us to rapidly
assess the applicability of the throttle to diﬀerent
classes of machines running diﬀerent services. Pre-
liminary results from the simulator show that the
majority of network traﬃc from a throttled machine
passes onto the network undelayed, and that none
of the large quantities of legitimate network traﬃc
we have gathered is mistaken for viral traﬃc. A
fuller discussion of the applicability of our approach
is given in [27].
5 Conclusion
In this paper we have, after presenting the necessary
background, described in detail the implementation
and testing of a virus throttle. From the tests de-
scribed above we have been able to show that the
virus throttle is highly eﬀective in detecting, slowing
and stopping both real worms such as W32/Nimda-
D and a test worm conﬁgured to scan at diﬀerent
rates. Our results also show that the virus throt-
tle can substantially reduce the global spread of a
worm, and hence the amount of network traﬃc pro-
duced.
In conclusion, this paper has demonstrated virus
throttling to be a powerful tool in the prevention
of high-speed worm propagation. We believe that
throttling, when combined with current signature-
based methods, will be an essential ingredient in any
multilayered anti-virus solution.
References
[1] D. P. Bovet and M. Cesati. Understanding the
Linux kernel. O’Reilly & Associates, 2002.
[2] D. Bruschi and E. Rosti. Disarming oﬀense to
enable defense.
In Proc. of the New Security
Paradigms Workshop 2000, pages 69–75, Ire-
land, 2000.
[3] D. Bruschi and E. Rosti. AngeL: A tool to
disarm computer systems. In Proc. of the 2001
Workshop on New Security Paradigms, 2001.
[4] CERT Advisory CA-2001-19. CERT Coordi-
nation Center.
http://www.cert.org/advisories/CA-2001-
19.html.
[5] D. Chess. The future of viruses on the Internet.
Presented at the Virus Bulletin International
Conference, October 1-3, 1997.
[6] F. Cohen. Computer viruses - theory and ex-
periments. In Proc. of the 7th Security Confer-
ence, pages 143–158, 1984.
[7] F. Cohen. A formal deﬁnition of computer
worms and some related results. Computers
and Security, 11(7):641–652, 1992.
[8] F. Cohen. A short course on computer viruses.
John Wiley & Sons, Inc., 1994.
[9] fyodor. The art of port scanning. Phrack Mag-
azine, Volume 7, Issue 51, 11 of 17, 1997.
[10] R. A. Grimes. Malicious mobile code. O’Reilly
& Associates, 2001.
USENIX Association
12th USENIX Security Symposium 
293
[27] M. M. Williamson. Throttling viruses: Re-
stricting propagation to defeat malicious mo-
bile code. In Proc. of the ACSAC Security Con-
ference, Las Vegas, Nevada, 2002.
[28] M. M. Williamson. The design, implementation
and testing of an email throttle. Submitted
to the Annual Computer Security Applications
Conference, Las Vegas, N.V., 2003.
[29] M. M. Williamson and J. Leveille. An epidemi-
ological model of virus spread. To appear in
the Proceedings of the Annual Virus Bulletin
Conference, 2003.
[30] M. M. Williamson, J. Twycross, J. Griﬃn, and
A. Norman. Virus throttling. In Virus Bulletin,
U.K., 2003.
[11] HP Procurve Series 2500 switches - manage-
ment and conﬁguration guide. Hewlett-Packard
Company, 2000.
[12] HP Blade Server bh7800
service
Hewlett-Packard Company, 2002.
guide.
[13] kossak and lifeline. Building into the Linux net-
work layer. Phrack Magazine, Volume 9, Issue
55, 12 of 16, 1999.
[14] R. Lemos. Year of the worm.
http://new.com.com/2102-1001-254061.html.
[15] E. Messmer. Behaviour blocking repels new
viruses.
http://www.nwfusion.com/news/2002/
0128antivirus.html.
[16] D. Moore, V. Paxson, S. Savage, C. Shannon,
S. Staniford, and N. Weaver. The spread of
the Sapphire/Slammer worm.
http://www.cs.berkeley.edu/ nweaver/sapphire/.
[17] J. Postel. Transmission control protocol. RFC
793, DARPA, 1981.
[18] A. Rubini and J. Corbet. Linux device drivers.
O’Reilly & Associates, 2001.
[19] H. G. Schuster. Complex Adaptive Systems.
Scator Verlag, 2001.
[20] A. Somayaji and S. Forrest. Automated re-
sponse using system-call delays. In Proc. of the
9th USENIX Security Symposium, pages 185–
197, 2000.
[21] W32/Nimda-D. Sophos Anti-Virus.
http://www.sophos.org/virusinfo/analysis/
w32nimdad.html.
[22] W32/SQLSlam-A. Sophos Anti-Virus.
http://www.sophos.org/virusinfo/analysis/
w32sqlslama.html.
[23] W. R. Stevens. UNIX network programming.
Prentice Hall, 1990.
[24] tcpdump. http://www.tcpdump.org.
[25] J. Twycross. Studying mobile code: an ex-
perimental setup. Technical report, Hewlett-
Packard Labs, 2002.
[26] VMware Workstation 3.2. VMware Inc.
http://www.vmware.com.
294
12th USENIX Security Symposium 
USENIX Association