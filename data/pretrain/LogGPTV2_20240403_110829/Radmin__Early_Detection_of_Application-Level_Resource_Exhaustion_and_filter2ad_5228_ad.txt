the facilities cannot detect starvation attacks, since only an upper bound is used
in detection.
Antunes et al. [12] proposed a system for testing server programs for exhaus-
tion vulnerabilities. The system depended on a user supplied speciﬁcations of the
server protocol, and automatically generated (fuzzed) test cases and launched
them against the server. In [23], Groza et al. formalized DoS attacks using a set of
protocol cost-based rules. Aiello et al. [11] formalized a set of speciﬁcations that
a protocol has to meet to be resilient to DoS attacks. While the idea is promis-
ing, the speciﬁcations need explicit cost calculation of required computational
resources, which is often not feasible in practice [37].
Chang et al. [16] proposed a static analysis system was for identifying source
code sites that may result in uncontrolled CPU time and stack consumption. The
authors used taint and control-dependency analysis to automatically identify
high complexity control structures in the source code, whose execution can be
inﬂuenced by untrusted input. Similar approaches that required manual source
code annotation were also developed [24,38]. Radmin substantially diﬀers from
those systems in that it a dynamic solution, does not require access to the source
code or any side information, and it covers diﬀerent types of resources rather
than only CPU and stack consumption.
In [33,34], Sekar et al. introduced approaches for detecting abnormal program
behavior by building automata from system calls and executing the automata at
runtime, ﬂagging invalid transitions as anomalies. Mazeroﬀ et al. [28] described
methods for inferring and using probabilistic models for detecting anomalous
sequences of system calls. They built a baseline model of sequences of system calls
executed by benign programs, a test model of a target program, and compared
the distance between the two models to detect anomalies. While approaches
based on system call monitoring are easy to deploy, they are prone to mimicry
attacks [25,29]. Additionally, they either completely ignore call arguments, which
534
M. Elsabagh et al.
makes them inapplicable for exhaustion detection; or they model the arguments
using point estimates, which is insuﬃcient for early exhaustion detection.
Radmin is fundamentally diﬀerent from all these systems in that it captures
both program code and input dependencies of resource consumption, by model-
ing both the temporal and spatial information in resource consumption behavior
of the program. Radmin detects both exhaustion and starvation attacks, and
does not use static thresholds. By leveraging temporal information, Radmin also
detects when target programs are starving of resources. Additionally, Radmin
monitors the target programs by hooking into the kernel tracing facilities, which
allows for maximum visibility into the target process and allows for low-penalty
monitoring.
8 Conclusion
The paper presented Radmin, a system for early detection of resource exhaus-
tion and starvation attacks. Unlike existing solutions, Radmin does not use static
limits and utilizes both temporal and spatial resource usage information. Rad-
min reduces the monitoring overhead by hooking into kernel tracepoints. The
Radmin user space library keeps track of stack usage used by target processes,
and provides a heartbeat signal that enables Radmin to detect starvation. We
showed that Radmin can detect resource exhaustion and starvation attacks with
high earliness and accuracy, and low overhead. The implementation of Radmin
was discussed along with its limitations and possible areas for improvements.
Acknowledgements. We thank Konstantinos Kolias, the anonymous reviewers, and
our shepherd Andrei Sabelfeld for their insightful comments and suggestions. We thank
Sharath Hiremagalore for technical assistance. This work is supported by the National
Science Foundation Grant No. CNS 1421747 and II-NEW 1205453. Opinions, ﬁndings,
conclusions, and recommendations expressed in this material are those of the authors
and do not necessarily reﬂect the views of the NSF or the US Government.
A PST Hyperparameters Grid
See Table 5.
Table 5. Hyperparameter values used in training the PSTs.
−5, 10
Param Possible values
−7, 10
γmin
rmin
L
{10
{1.05}
{30, 40, 50, 60}
Chosen (median)
−11, 10
−11
−13} 10
1.05
40
Radmin: Early Detection of Application-Level Resource Exhaustion
535
B Starvation and Livelock Snippets
Listing 1.3. twolocks
1 void thread1() {
2 while (true) {
...
lock lock x(resource x);
...
try lock lock y(resource y);
if (!lock y) continue;
...
3
4
5
6
7
8
9
10 }
11
12 void thread2() {
13 while (true) {
}
...
lock lock y(resource y);
...
try lock lock x(resource x);
if (!lock x) continue;
...
14
15
16
17
18
19
20
21 }
}
Listing 1.1. filelock
1 void ﬁlelock() {
fork()
...
system("lockfile lockfile.lock");
...
// do some work
...
system("rm -f lockfile.lock");
2
3
4
5
6
7
8
9 }
Listing 1.2. sqlite-lock
1 void execute(char ∗s) {
...
sleep(1);
2
3 while (sqlite3 step(stmt) == SQLITE BUSY)
4
5
6 }
7
8 void thread2() {
sqlite3 ﬁnalize(stmt);
open db();
execute("UPDATE foo SET ...");
...
9
10
11
12 }
13
14 void thread1() {
open db();
...
sqlite3 prepare v2("SELECT id FROM foo", ...);
sqlite3 step(stmt);
...
start thread(thread2, ...);
...
// livelock if interrupted thread2
execute("INSERT INTO foo VALUES(100)");
...
15
16
17
18
19
20
21
22
23
24
25 }
References
1. Myths of DDoS attacks. http://blog.radware.com/security/2012/02/4-massive-
myths-of-ddos/
2. Availability overrides security concerns. http://www.hrfuture.net/performance-
and-productivity/availability-over-rides-cloud-security-concerns.php?Itemid=169
consumption. http://cwe.mitre.org/data/
3. CWE-400: Uncontrolled resource
deﬁnitions/400.html
4. Dyninst API. http://www.dyninst.org/dyninst
5. Mobile users favor productivity over security. http://www.infoworld.com/article/
2686762/security/mobile-users-favor-productivity-over-security-as-they-should.
html
6. Pthread livelock. http://www.paulbridger.com/livelock/
7. Sqlite livelock. http://www.mail-archive.com/PI:EMAIL/msg54618.
html
8. Systemtap. https://sourceware.org/systemtap/
536
M. Elsabagh et al.
9. Unixbench. https://github.com/kdlucas/byte-unixbench
10. Vectorized implementation of k-means++. https://github.com/michaelchughes/
KMeansRex
11. Aiello, W., Bellovin, S.M., Blaze, M., Ioannidis, J., Reingold, O., Canetti, R.,
Keromytis, A.D.: Eﬃcient, DoS-resistant, Secure Key Exchange for Internet Pro-
tocols. In: Proceedings of the 9th ACM Conference on Computer and Communi-
cations Security, pp. 48–58. CCS 2002. ACM, New York (2002)
12. Antunes, J., Neves, N.F., Ver´ıssimo, P.J.: Detection and prediction of resource-
exhaustion vulnerabilities. In: ISSRE 2008, 19th International Symposium on Soft-
ware Reliability Engineering, 2008, pp. 87–96. IEEE (2008)
13. Arthur, D., Vassilvitskii, S.: k-means++: The advantages of careful seeding. In:
Proceedings of the Eighteenth annual ACM-SIAM Symposium on Discrete Algo-
rithms, pp. 1027–1035. Society for Industrial and Applied Mathematics (2007)
14. Bejerano, G., Yona, G.: Variations on probabilistic suﬃx trees: statistical modeling
and prediction of protein families. Bioinformatics 17(1), 23–43 (2001)
15. Carlini, N., Wagner, D.: Rop is still dangerous: Breaking modern defenses. In:
USENIX Security Symposium (2014)
16. Chang, R.M., Jiang, G., Ivancic, F., Sankaranarayanan, S., Shmatikov, V.: Inputs
of coma: Static detection of denial-of-service vulnerabilities. In: Proceedings of the
22nd IEEE Computer Security Foundations Symposium, CSF 2009, Port Jeﬀerson,
New York, USA, July 8–10, 2009, pp. 186–199. IEEE Computer Society (2009)
17. Chee, W.O., Brennan, T.: Layer-7 DDoS (2010)
18. Crosby, S., Wallach, D.: Algorithmic DoS. In: Encyclopedia of Cryptography and
Security, pp. 32–33. Springer (2011)
19. Dekel, O., Shalev-Shwartz, S., Singer, Y.: The power of selective memory: self-
bounded learning of prediction suﬃx trees. In: Advances in Neural Information
Processing Systems, pp. 345–352 (2004)
20. Desnoyers, M.: Using the linux kernel tracepoints. https://www.kernel.org/doc/
Documentation/trace/tracepoints.txt
21. Fu, S.: Performance metric selection for autonomic anomaly detection on cloud
computing systems. In: Global Telecommunications Conference (GLOBECOM
2011), 2011 IEEE, pp. 1–5. IEEE (2011)
22. Ganai, M.K.: Dynamic livelock analysis of multi-threaded programs. In: Qadeer,
S., Tasiran, S. (eds.) RV 2012. LNCS, vol. 7687, pp. 3–18. Springer, Heidelberg
(2013)
23. Groza, B., Minea, M.: Formal modelling and automatic detection of resource
exhaustion attacks. In: Proceedings of the 6th ACM Symposium on Information,
Computer and Communications Security, pp. 326–333. ACM (2011)
24. Gulavani, B.S., Gulwani, S.: A numerical abstract domain based on expression
abstraction and max operator with application in timing analysis. In: Gupta, A.,
Malik, S. (eds.) CAV 2008. LNCS, vol. 5123, pp. 370–384. Springer, Heidelberg
(2008)
25. Kayacik, H.G., et al.: Mimicry attacks demystiﬁed: What can attackers do to evade
detection? In: Sixth Annual Conference on Privacy, Security and Trust, PST 2008,
pp. 213–223. IEEE (2008)
26. Kostadinov, D.: Layer-7 DDoS attacks: detection and mitigation -
infosec
http://resources.infosecinstitute.com/layer-7-ddos-attacks-
institute
detection-mitigation/
(2013).
27. Lin, Y., Kulkarni, S.S.: Automatic repair for multi-threaded programs with dead-
lock/livelock using maximum satisﬁability. In: Proceedings of the 2014 Interna-
tional Symposium on Software Testing and Analysis, pp. 237–247. ACM (2014)
Radmin: Early Detection of Application-Level Resource Exhaustion
537
28. Mazeroﬀ, G., Gregor, J., Thomason, M., Ford, R.: Probabilistic suﬃx models for
API sequence analysis of Windows XP applications. Pattern Recogn. 41(1), 90–101
(2008)
29. Parampalli, C., Sekar, R., Johnson, R.: A practical mimicry attack against powerful
system-call monitors. In: Proceedings of the 2008 ACM symposium on Information,
computer and communications security, pp. 156–167. ACM (2008)
30. Ron, D., Singer, Y., Tishby, N.: The power of amnesia: learning probabilistic
automata with variable memory length. Mach. Learn. 25(2–3), 117–149 (1996)
31. Rutar, N., Hollingsworth, J.: Data centric techniques for mapping performance
measurements. In: 2011 IEEE International Symposium on Parallel and Distrib-
uted Processing Workshops and Phd Forum (IPDPSW), pp. 1274–1281, May 2011
32. Saltzer, J., Schroeder, M.: The protection of information in computer systems.
Proc. IEEE 63(9), 1278–1308 (1975)
33. Sekar, R., Bendre, M., Dhurjati, D., Bollineni, P.: A fast automaton-based method
for detecting anomalous program behaviors. In: Proceedings 2001 IEEE Sympo-
sium on Security and Privacy, 2001, S&P 2001, pp. 144–155. IEEE (2001)
34. Sekar, R., Venkatakrishnan, V., Basu, S., Bhatkar, S., DuVarney, D.C.: Model-
carrying code: a practical approach for safe execution of untrusted applications.
ACM SIGOPS Operating Syst. Rev. 37(5), 15–28 (2003)
35. Sidiroglou, S., Laadan, O., Perez, C., Viennot, N., Nieh, J., Keromytis, A.D.:
Assure: automatic software self-healing using rescue points. ACM SIGARCH Com-
put. Archit. News 37(1), 37–48 (2009)
36. Uh, G.R., Cohn, R., Yadavalli, B., Peri, R., Ayyagari, R.: Analyzing dynamic
binary instrumentation overhead. In: Workshop on Binary Instrumentation and
Application (2007)
37. Zargar, S.T., Joshi, J., Tipper, D.: A survey of defense mechanisms against dis-
tributed denial of service (DDoS) ﬂooding attacks. IEEE Commun. Surv. Tutorials
15(4), 2046–2069 (2013)
38. Zheng, L., Myers, A.C.: End-to-end availability policies and noninterference. In:
18th IEEE Workshop Computer Security Foundations, CSFW-18 2005, pp. 272–
286. IEEE (2005)
39. Zinke, J.: System call tracing overhead. In: The International Linux System Tech-
nology Conference (Linux Kongress) (2009)