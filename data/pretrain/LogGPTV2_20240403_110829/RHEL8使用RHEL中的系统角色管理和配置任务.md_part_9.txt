# []{#using-the-logging-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html#using-logging-system-roles-with-relp_using-the-logging-system-role}使用 RELP 的日志记录系统角色 {.title}
:::
可靠的事件日志记录协议(RELP)是用于 TCP
网络上数据和消息记录的网络协议。它确保了事件消息的可靠交付，您可以在不容许任何消息丢失的环境中使用它。
RELP
发送程序以命令形式传输日志条目，接收方在处理后确认日志条目。为确保一致性，RELP
将事务编号存储到各个传输的命令中，以用于任何种类的消息恢复。
您可以考虑 RELP 客户端和 RELP 服务器之间的远程记录系统。RELP
客户端将日志传输到远程记录系统，RELP
服务器接收远程日志记录系统发送的所有日志。
管理员可以使用日志记录系统角色将日志记录系统配置为可靠发送和接收日志条目。
::: section
::: titlepage
## []{#using-the-logging-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html#configuring-client-logging-with-relp_using-logging-system-roles-with-relp}使用 RELP 配置客户端日志 {.title}
:::
您可以使用日志记录系统角色来配置本地机器上记录的 RHEL
系统上的登录，并通过运行 Ansible playbook 将日志传输到 RELP
的远程日志记录系统。
此流程在 Ansible 清单的 `clients`{.literal} 组的所有主机上配置
RELP。RELP
配置使用传输层安全(TLS)来加密消息传输，从而通过网络安全地传输日志。
::: itemizedlist
**先决条件**
-   您有权限在要在其上配置 RELP 的受管节点上运行 playbook。
-   受管节点列在控制节点上的清单文件中。
-   在控制节点上安装 `ansible`{.literal} 和
    `rhel-system-roles`{.literal} 软件包。
:::
::: orderedlist
**流程**
1.  使用以下内容创建 `playbook.yml`{.literal} 文件：
    ``` screen
    ---
    - name: Deploying basic input and relp output
      hosts: clients
      roles:
        - rhel-system-roles.logging
      vars:
        logging_inputs:
          - name: basic_input
            type: basics
        logging_outputs:
          - name: relp_client
            type: relp
            target: logging.server.com
            port: 20514
            tls: true
            ca_cert: /etc/pki/tls/certs/ca.pem
            cert: /etc/pki/tls/certs/client-cert.pem
            private_key: /etc/pki/tls/private/client-key.pem
            pki_authmode: name
            permitted_servers:
              - '*.server.example.com'
        logging_flows:
          - name: example_flow
            inputs: [basic_input]
            outputs: [relp_client]
    ```
    playbook 使用以下设置：
    ::: itemizedlist
    -   `target`{.literal}:这是指定运行远程记录系统的主机名的必要参数。
    -   `port`{.literal}：远程记录系统正在侦听的端口号。
    -   `tls`{.literal}：确保通过网络安全传输日志.如果您不想使用安全打包程序，您可以将
        `tls`{.literal} 变量设置为 `false`{.literal}。在使用 RELP
        时，`tls`{.literal} 参数默认设置为 true，它要求键/证书和
        triplets
        {`ca_cert`{.literal}、`cert`{.literal}、`private_key`{.literal}}
        和/或
        {`ca_cert_src`{.literal}、`cert_src`{.literal}、`private_key_src`{.literal}}。
        ::: itemizedlist
        -   如果设置了
            {`ca_cert_src`{.literal}、`cert_src`{.literal}、`private_key_src`{.literal}}
            triplet，默认位置 `/etc/pki/tls/certs`{.literal} 和
            `/etc/pki/tls/private`{.literal}
            将用作受管节点上的目标位置，以从控制节点传输文件。在这种情况下，文件名与
            triplet 中的原始名称相同。
        -   如果设置了
            {`ca_cert`{.literal}、`cert`{.literal}、`private_key`{.literal}}
            triplet，则在日志配置前文件应该位于默认路径中。
        -   如果同时设置了三向，文件将从控制节点本地路径转移到受管节点的具体路径。
        :::
    -   `ca_cert`{.literal}: 代表到 CA 证书的路径。默认路径是
        `/etc/pki/tls/certs/ca.pem`{.literal}，文件名由用户设置。
    -   `cert`{.literal}: 代表证书的路径。默认路径是
        `/etc/pki/tls/certs/server-cert.pem`{.literal}，文件名由用户设置。
    -   `private_key`{.literal}: 代表到私钥的路径。默认路径是
        `/etc/pki/tls/private/server-key.pem`{.literal}，文件名由用户设置。
    -   `ca_cert_src`{.literal}: 修复复制到目标主机的本地 CA
        证书文件路径。如果指定了 ca_cert，则会将其复制到该位置。
    -   `cert_src`{.literal}:
        修复复制到目标主机的本地证书文件路径。如果指定了证书，则会将其复制到该位置。
    -   `private_key_src`{.literal}:
        代表复制到目标主机的本地密钥文件路径。如果指定了
        private_key，则会将其复制到该位置。
    -   `pki_authmode`{.literal}: 接受身份验证模式作为 `name`{.literal}
        或 `fingerprint`{.literal}。
    -   `permitted_servers`{.literal}：日志记录客户端通过 TLS
        连接和发送日志的服务器列表。
    -   `inputs`{.literal}：日志记录输入字典的列表。
    -   `outputs`{.literal}: 日志输出字典列表。
    :::
2.  可选：验证 playbook 语法。
    ``` screen
    # ansible-playbook --syntax-check playbook.yml
    ```
3.  运行 playbook：
    ``` screen
    # ansible-playbook -i inventory_file playbook.yml
    ```
:::
:::
::: section
::: titlepage
## []{#using-the-logging-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html#configuring-server-logging-with-relp_using-logging-system-roles-with-relp}使用 RELP 配置服务器日志 {.title}
:::
您可以使用日志记录系统角色将 RHEL 系统登录配置为服务器，并通过运行
Ansible playbook 从使用 RELP 的远程日志记录系统接收日志。
此流程在 Ansible 清单的 `server`{.literal} 组的所有主机上配置 RELP。RELP
配置使用 TLS 加密消息传输，从而通过网络安全传输日志。
::: itemizedlist
**先决条件**
-   您有权限在要在其上配置 RELP 的受管节点上运行 playbook。
-   受管节点列在控制节点上的清单文件中。
-   在控制节点上安装 `ansible`{.literal} 和
    `rhel-system-roles`{.literal} 软件包。
:::
::: orderedlist
**流程**
1.  使用以下内容创建 `playbook.yml`{.literal} 文件：
    ``` screen
    ---
    - name: Deploying remote input and remote_files output
      hosts: server
      roles:
        - rhel-system-roles.logging
      vars:
        logging_inputs:
          - name: relp_server
            type: relp
            port: 20514
            tls: true
            ca_cert: /etc/pki/tls/certs/ca.pem
            cert: /etc/pki/tls/certs/server-cert.pem
            private_key: /etc/pki/tls/private/server-key.pem
            pki_authmode: name
            permitted_clients:
              - '*example.client.com'
        logging_outputs:
          - name: remote_files_output
            type: remote_files
        logging_flows:
          - name: example_flow
            inputs: relp_server
            outputs: remote_files_output
    ```
    playbook 使用以下设置：
    ::: itemizedlist
    -   `port`{.literal}：远程记录系统正在侦听的端口号。
    -   `tls`{.literal}：确保通过网络安全传输日志.如果您不想使用安全打包程序，您可以将
        `tls`{.literal} 变量设置为 `false`{.literal}。在使用 RELP
        时，`tls`{.literal} 参数默认设置为 true，它要求键/证书和
        triplets
        {`ca_cert`{.literal}、`cert`{.literal}、`private_key`{.literal}}
        和/或
        {`ca_cert_src`{.literal}、`cert_src`{.literal}、`private_key_src`{.literal}}。
        ::: itemizedlist
        -   如果设置了
            {`ca_cert_src`{.literal}、`cert_src`{.literal}、`private_key_src`{.literal}}
            triplet，默认位置 `/etc/pki/tls/certs`{.literal} 和
            `/etc/pki/tls/private`{.literal}
            将用作受管节点上的目标位置，以从控制节点传输文件。在这种情况下，文件名与
            triplet 中的原始名称相同。
        -   如果设置了
            {`ca_cert`{.literal}、`cert`{.literal}、`private_key`{.literal}}
            triplet，则在日志配置前文件应该位于默认路径中。
        -   如果同时设置了三向，文件将从控制节点本地路径转移到受管节点的具体路径。
        :::
    -   `ca_cert`{.literal}: 代表到 CA 证书的路径。默认路径是
        `/etc/pki/tls/certs/ca.pem`{.literal}，文件名由用户设置。
    -   `cert`{.literal}: 代表证书的路径。默认路径是
        `/etc/pki/tls/certs/server-cert.pem`{.literal}，文件名由用户设置。
    -   `private_key`{.literal}: 代表到私钥的路径。默认路径是
        `/etc/pki/tls/private/server-key.pem`{.literal}，文件名由用户设置。
    -   `ca_cert_src`{.literal}: 修复复制到目标主机的本地 CA
        证书文件路径。如果指定了 ca_cert，则会将其复制到该位置。
    -   `cert_src`{.literal}:
        修复复制到目标主机的本地证书文件路径。如果指定了证书，则会将其复制到该位置。
    -   `private_key_src`{.literal}:
        代表复制到目标主机的本地密钥文件路径。如果指定了
        private_key，则会将其复制到该位置。
    -   `pki_authmode`{.literal}: 接受身份验证模式作为 `name`{.literal}
        或 `fingerprint`{.literal}。
    -   `permitted_clients`{.literal}: 日志服务器允许通过 TLS
        进行连接和发送日志的客户端列表。
    -   `inputs`{.literal}：日志记录输入字典的列表。
    -   `outputs`{.literal}: 日志输出字典列表。
    :::
2.  可选：验证 playbook 语法。
    ``` screen
    # ansible-playbook --syntax-check playbook.yml
    ```
3.  运行 playbook：
    ``` screen
    # ansible-playbook -i inventory_file playbook.yml
    ```
:::
:::
:::
::: section
::: titlepage
# []{#using-the-logging-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html#using-logging-system-role-with-tls_using-the-logging-system-role}使用 TLS 的日志记录系统角色 {.title}
:::
传输层安全性(TLS)是一种加密协议，旨在通过计算机网络进行安全通信。
作为管理员，您可以使用 RHEL 上的日志记录系统角色来配置使用红帽 Ansible
Automation Platform 的安全日志传输。
::: section
::: titlepage
## []{#using-the-logging-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html#configuring-client-logging-with-tls_using-logging-system-role-with-tls}使用 TLS 配置客户端日志 {.title}
:::
您可以使用日志记录系统角色来配置在本地机器上记录的 RHEL
系统上的登录，并通过运行 Ansible playbook 将日志传输到使用 TLS
的远程记录系统。
此流程在 Ansible 清单的 clients 组的所有主机上配置 TLS。TLS
协议加密消息传输，以便通过网络安全传输日志。
::: itemizedlist
**先决条件**
-   您有权限在要在其上配置 TLS 的受管节点上运行 playbook。
-   受管节点列在控制节点上的清单文件中。
-   在控制节点上安装 `ansible`{.literal} 和
    `rhel-system-roles`{.literal} 软件包。
:::
::: orderedlist
**流程**
1.  使用以下内容创建 `playbook.yml`{.literal} 文件：
    ``` screen
    ---
    - name: Deploying files input and forwards output with certs
      hosts: clients
      roles:
        - rhel-system-roles.logging
      vars:
        logging_pki_files:
          - ca_cert_src: /local/path/to/ca_cert.pem
            cert_src: /local/path/to/cert.pem
            private_key_src: /local/path/to/key.pem
        logging_inputs:
          - name: input_name
            type: files
            input_log_path: /var/log/containers/*.log
        logging_outputs:
          - name: output_name
            type: forwards
            target: your_target_host
            tcp_port: 514
            tls: true
            pki_authmode: x509/name
            permitted_server: 'server.example.com'
        logging_flows:
          - name: flow_name
            inputs: [input_name]
            outputs: [output_name]
    ```
    playbook 使用以下参数：
    ::: variablelist
    [`logging_pki_files`{.literal}]{.term}
    :   您可以使用这个参数配置 TLS，且必须传递
        `ca_cert_src`{.literal}、`cert_src`{.literal} 和
        `private_key_src`{.literal} 参数。
    [`ca_cert`{.literal}]{.term}
    :   表示 CA 证书的路径。默认路径是
        `/etc/pki/tls/certs/ca.pem`{.literal}，文件名由用户设置。
    [`cert`{.literal}]{.term}
    :   表示证书路径.默认路径是
        `/etc/pki/tls/certs/server-cert.pem`{.literal}，文件名由用户设置。
    [`private_key`{.literal}]{.term}
    :   表示到私钥的路径。默认路径是
        `/etc/pki/tls/private/server-key.pem`{.literal}，文件名由用户设置。
    [`ca_cert_src`{.literal}]{.term}
    :   Reprents 本地 CA 证书文件路径，复制到目标主机上。如果指定了
        `ca_cert`{.literal}，则会将其复制到该位置。
    [`cert_src`{.literal}]{.term}
    :   修复复制到目标主机的本地证书文件路径。如果指定了
        `cert`{.literal}，则会将其复制到该位置。
    [`private_key_src`{.literal}]{.term}
    :   表示复制到目标主机上的本地密钥文件路径。如果指定了
        `private_key`{.literal}，则会将其复制到该位置。
    [`tls`{.literal}]{.term}
    :   使用此参数可以确保通过网络安全传输日志。如果您不想安全打包程序，您可以设置
        `tls: true`{.literal}。
    :::
2.  验证 playbook 语法：
    ``` screen
    # ansible-playbook --syntax-check playbook.yml
    ```
3.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory_file playbook.yml
    ```