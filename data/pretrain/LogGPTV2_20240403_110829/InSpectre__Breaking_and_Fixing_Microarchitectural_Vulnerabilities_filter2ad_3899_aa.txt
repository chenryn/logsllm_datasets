title:InSpectre: Breaking and Fixing Microarchitectural Vulnerabilities
by Formal Analysis
author:Roberto Guanciale and
Musard Balliu and
Mads Dam
InSpectre: Breaking and Fixing Microarchitectural
Vulnerabilities by Formal Analysis
Roberto Guanciale
PI:EMAIL
Musard Balliu
PI:EMAIL
Mads Dam
PI:EMAIL
KTH Royal Institute of Technology
KTH Royal Institute of Technology
KTH Royal Institute of Technology
Stockholm SE-100 44, Sweden
Stockholm SE-100 44, Sweden
Stockholm SE-100 44, Sweden
0
2
0
2
g
u
A
7
1
]
R
C
.
s
c
[
2
v
8
6
8
0
0
.
1
1
9
1
:
v
i
X
r
a
ABSTRACT
Œe recent Spectre aŠacks have demonstrated the fundamental in-
security of current computer microarchitecture. Œe aŠacks use
features like pipelining, out-of-order and speculation to extract ar-
bitrary information about the memory contents of a process. A
comprehensive formal microarchitectural model capable of repre-
senting the forms of out-of-order and speculative behavior that can
meaningfully be implemented in a high performance pipelined ar-
chitecture has not yet emerged. Such a model would be very useful,
as it would allow the existence and non-existence of vulnerabilities,
and soundness of countermeasures to be formally established.
Œis paper presents such a model targeting single core proces-
sors. Œe model is intentionally very general and provides an in-
frastructure to deﬁne models of real CPUs. It incorporates microar-
chitectural features that underpin all known Spectre vulnerabili-
ties. We use the model to elucidate the security of existing and
new vulnerabilities, as well as to formally analyze the eﬀective-
ness of proposed countermeasures. Speciﬁcally, we discover three
new (potential) vulnerabilities, including a new variant of Spectre
v4, a vulnerability on speculative fetching, and a vulnerability on
out-of-order execution, and analyze the eﬀectiveness of existing
countermeasures including constant time and serializing instruc-
tions.
1 INTRODUCTION
Œe wealth of vulnerabilities that have followed on from Spectre
and Meltdown [31, 35] have provided ample evidence of the fun-
damental insecurity of current computer microarchitecture. Œe
extensive use of instruction level parallelism in the form of out-of-
order (OoO) and speculative execution has produced designs with
side channels that can be exploited by aŠackers to learn sensitive
information about the memory contents of a process. One witness
of the subtlety of the issues is the more than 50 years passed since
pipelining, caching, and OoO execution, cf. IBM S/360, was ﬁrst
introduced.
Another witness is the fact that two years a‰er the discovery
of Spectre, a comprehensive understanding of the security impli-
cations of pipeline related microarchitecture features has yet to
emerge. One result is the ongoing arms race between researchers
discovering new Spectre-related vulnerabilities [9], and CPU ven-
dors providing patches followed by informal arguments [5]. Œe
Conference’17, Washington, DC, USA
2020. 978-x-xxxx-xxxx-x/YY/MM. . . $15.00
DOI: 10.1145/nnnnnnn.nnnnnnn
1
security and eﬀectiveness of the currently proposed countermea-
sures is unknown, and there are continuously new vulnerabilities
appearing that exploit speciﬁc microarchitecture features.
It is important to note that side channels and functional correct-
ness are to a large extent orthogonal. Œe laŠer is usually proved
by reducing pipelined behaviour to sequential behaviour through
some form of reﬁnement-based argument. Œe past decades have
seen a signiﬁcant body of work in this area, cf. [1, 8, 38, 47], ad-
dressing rich sets of features of concrete pipeline designs such as
OoO, speculation, and self-modifying code. Functional correctness,
however, focuses on programs’ input-output behaviour and fails
to adequately capture the diﬀerential aspects of speculation and
instruction reordering that are at the root of Spectre-like vulner-
abilities. For a systematic study of the laŠer we argue that new
tools that are not necessarily tied to any speciﬁc pipeline architec-
ture are needed.
Along this line, several recent works [12, 14, 22, 40] have started
to propose formal microarchitectural models using information ﬂow
analysis to identify information leaks arising from speculative exe-
cution in a principled manner. Œese models capture speciﬁc spec-
ulation features, e.g, branch prediction, and variants of Spectre,
in particular variant 1, and design analyses that detect known at-
tacks [12, 22, 53]. While these approaches illustrate the usefulness
of formal models in analyzing microarchitecture leaks, features ly-
ing at the heart of modern CPUs such as OoO execution and many
forms of speculation remain largely unexplored, implying that new
vulnerabilities may still exist.
Contributions. Œis work presents InSpectre, the ﬁrst compre-
hensive model capable of capturing OoO execution and all forms
of speculation that can be meaningfully implemented in the con-
text of a high performance pipeline. Œe model is intentionally
very general and provides an infrastructure to deﬁne models of
real CPUs (Section 3), which can be used to analyze eﬀectiveness
of countermeasures for a given processor.
Our ﬁrst contribution is a novel semantics supporting microar-
chitectural features such as OoO execution, non-atomicity of in-
structions, and various forms of speculation, including branch pre-
diction, jump target prediction, return address prediction, and de-
pendency prediction. Additionally, the semantics supports features
such as address aliasing, dynamic references, store forward, and
OoO memory commits, which are necessary to model all known
variants of Spectre. Œe semantics implements the stages of an
abstract pipeline supporting OoO (Section 4) and speculative exe-
cution (Section 5). In line with existing work [12, 22], our security
condition formalizes the intuition that optimizations should not in-
troduce additional information leaks (conditional noninterference,
Section 2). We use this condition to show that InSpectre can repro-
duce all four variants of Spectre.
As a second contribution, we use InSpectre to discover three
new potential vulnerabilities. Œe ﬁrst vulnerability shows that
CPUs supporting only OoO may leak sensitive information. We
discovered the second vulnerability while aŠempting to validate
a CPU vendor’s claim that microarchitectures like Cortex A53 are
immune to Spectre vulnerabilities because they support only spec-
ulative fetching [5]. Our model reveals that this may not be the
case. Œe third vulnerability is a variant of Spectre v4 showing
that speculation of a dependency, rather than speculation of a non-
dependency as in Spectre v4, between a load and a store operation
may also leak sensitive information.
Finally, as a third contribution, we leverage InSpectre to analyze
the eﬀectiveness of some existing countermeasures. We found that
constant-time [7] analysis is unsound for processors supporting
only OoO, and propose a provably secure ﬁx that enables constant-
time analysis to ensure security for such processors.
2 SECURITY MODEL
Our security model has the following ingredients: (i) an execution
model which is given by the execution semantics of a program;
(ii) an aˆacker model specifying the observations of an aŠacker;
(iii) a security policy specifying the parts of the program state that
contain sensitive/high information, and the parts that contain pub-
lic/low information; (iv) a security condition capturing a program’s
security with respect to an execution model, an aŠacker model,
and a security policy.
First, we consider a general model of aŠacker that observes the
interaction between the CPU and the memory subsystem. Œis
model has been used (e.g., [3]) to capture information leaks via
cache-based side channels transparently without an explicit cache
model.
It can capture trace-driven aŠackers that can interleave
with the victim’s execution and indirectly observe, for instance us-
ing Flush+Reload [20], the victim’s cache footprint via latency jit-
ters. Œe aŠacker can observe the address of a memory load dl v
(data load from memory address v), the address of a memory store
ds v (data store to memory address v), as well as the value of the
program counter il v (instruction load from memory address v)
[42].
We assume a transition relation −→ ⊆ States × Obs × States
to model the execution semantics of a program as a state trans-
former producing observations l ∈ Obs. Œe reﬂexive and transi-
tive closure of −→ induces a set of executions π ∈ Π. Œe function
trace : Π 7→ Obs∗ extracts the sequence of observations of an exe-
cution.
Œe security policy is deﬁned by an indistinguishability relation
∼ ⊆ States × States. Œe relation ∼ determines the security of infor-
mation that is initially stored in a state, modeling the set of initial
states that an aŠacker is not allowed to discriminate. Œese states
represent the initial uncertainty of an aŠacker about sensitive in-
formation.
2
Œe security condition deﬁnes the security of a program on the
target execution model (e.g., the speculation model) −→t condition-
ally on the security of the same program on the reference, i.e. se-
quential, model −→r , by requiring that the target model does not
leak more information than the reference model for a policy ∼.
Deﬁnition 2.1 (Conditional Noninterference). Let ∼ be a security
policy and −→t and −→r be transition relations for the target and
reference models of a system. Œe system is conditionally non-
interferent if for all σ1, σ2 ∈ States such that σ1 ∼ σ2, if for ev-
ery π1 = σ1 −→r
· · · such that
trace(π1) = trace(π2) then for every ρ1 = σ1 −→t · · · there exists
ρ2 = σ2 −→t · · · such that trace(ρ1) = trace(ρ2).
· · · there exists π2 = σ2 −→r
Conditional noninterference captures only the new information
leaks that may be introduced by model −→t , and ignores any leaks
already present in model −→r . Œe target model is constructed
in two steps. First, we present an OoO model that extends the se-
quential model, which is deterministic, by allowing evaluation to
proceed out-of-order. Œen the OoO model is further extended by
adding speculation. At each step the traces of the abstract model
are included in the extended model, and a memory consistency re-
sult demonstrates that the per location sequence of memory stores
is the same for both models. Œis establishes functional correct-
ness. Conditional noninterference then establishes security of each
extension. Each such step strictly increases the set of possible
traces by adding nondeterminism. Since reﬁnement is o‰en viewed
as essentially elimination of nondeterminism, one can think of the
extensions as “inverse reﬁnements”. Since conditional noninter-
ference considers a possibilistic seŠing, it does not account for
information leaks through the number of initial indistinguishable
states.
We now elucidate the advantages of conditional noninterfer-
ence as compared to standard notions of noninterference and de-
classiﬁcation. Suppose we deﬁne the security condition directly on
the target model, in the style of standard noninterference.
Deﬁnition 2.2 (Noninterference). Let P be a program with tran-
sition relation −→ and ∼P a security policy. P satisﬁes noninter-
ference up to ∼P if for all σ1, σ2 ∈ States such that σ1 ∼P σ2 and
executions π1 = σ1 −→ · · · , there exists an execution π2 = σ2 −→ · · ·
such that trace(π1) = trace(π2).
Noninterference ensures that if the observations do not enable
an aŠacker to reﬁne his knowledge of sensitive information be-
yond what is allowed by the policy ∼P , the program can be con-
sidered secure. Noninterference can accommodate partial release
of sensitive information by reﬁning the deﬁnition of the indistin-
guishability relation ∼P . In our context, a precise deﬁnition of ∼P
can be challenging to deﬁne. However, we ultimately aim at show-
ing that the OoO/speculative model does not leak more informa-
tion than the in-order (sequential) model, thus capturing the in-
tuition that microarchitectural features like OoO and speculation
should not introduce additional leaks. Œerefore, instead of deﬁn-
ing the policy ∼P explicitly, we split it into two relations ∼ (as in
Def. 2.1) and ∼D , where the former models information of the ini-
tial state that is known by the aŠacker, i.e., the public resources,
and the laŠer models information that the aŠacker is allowed to
learn during the execution via observations. Hence, ∼P = ∼ ∩ ∼D .
Œis characterization allows for a simpler formulation of the secu-
rity condition that is transparent on the deﬁnition of ∼D , as de-
scribed in Def. 2.1.
names greater than t, and the translation of two diﬀerent ISA in-
structions does not have direct inter-instruction dependencies (but
may have indirect ones).
3 FORMAL MICROARCHITECTURAL MODEL
We introduce a Machine Independent Language (MIL) which we
use to deﬁne the semantics of microarchitectural features such as
OoO and speculative execution. We use MIL as a form of abstract
microcode language: A target language for translating ISA instruc-
tions and reasoning about features that may cause vulnerabilities
like Spectre. Microinstructions in MIL represent atomic actions
that can be executed by the CPU, emulating the pipeline phases in
an abstract manner. Œis model is intentionally very general and
provides an infrastructure to deﬁne models of real microarchitec-
tures.
We consider a domain of values v ∈ V , a program counter pc ∈
P C, a ﬁnite set of register/ﬂag identiﬁers r0, . . . , rn , f , z ∈ R ⊆ V ,
and a ﬁnite set of memory addresses a0, . . . , am ∈ M ⊆ V . Œe
language can be easily extended to support other type of resources,
e.g., registers for vector operations. We assume a total order  e2 | · · ·
An internal operation e is an expression over standard ﬁnite
arithmetic and can additionally refer to names in N and values in
V . A resource load operation ld τ ta, where τ ∈ {P C, R, M }, loads
the value of resource τ addressed by ta. We support three types
of resources: Œe program counter P C, registers R, and memory
locations M. A resource store operation st τ ta tv uses the value
of tv to update the resource τ addressed by ta .
Œe free names fn(ι) of an instruction ι = t ← c?o is the set of
names occurring in c or o, the bound names, bn(ι), is the singleton
{t }, and the names n(ι) is fn(ι) ∪ bn(ι).
To model the internal state of a CPU pipeline, we can trans-
late an ISA instruction as multiple microinstructions. For an ISA
instruction at address v ∈ M and a name t ∈ N , the function
translate(v, t ) returns the MIL translation of the instruction at ad-
dress v, ensuring that the names of the microinstructions thus
generated are greater than t. Because we assume code to not be
self-modifying, an instruction can be statically identiﬁed by its ad-
dress in memory. We assume that the translation function satis-
ﬁes the properties: (i) for all ι1, ι2 ∈ translate(v, t ), if ι1 , ι2 then
bn(ι1) ∩ bn(ι2) = ∅; for all ι ∈ translate(v, t ), (ii) fn(ι) < bn(ι), and
(iii) {t } < n(ι).
Œese properties ensure that names uniquely identify microin-
structions, the name parameters of a single instruction form a Di-
rected Acyclic Graph, the translated microinstructions are assigned