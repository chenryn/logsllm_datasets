### 快速发布周期：雅虎问答的实验（2010）

#### 背景
快速迭代和集成客户反馈是提高产品影响力的关键。雅虎问答从每六周发布一次转变为每周多次发布，以应对激烈的市场竞争。在2009年，雅虎问答每月约有1.4亿访问用户，其中超过2千万活跃用户使用20种语言回答问题。然而，用户增长和收入趋于平缓，用户参与度也在下降。雅虎问答是当时最大的互联网社区游戏之一，数千万用户通过高质量和快速的问题解答来提升等级。尽管存在许多改进的机会，但Twitter、Facebook等公司已经通过频繁实验（每周至少两次）取得了显著成果。如果不能频繁进行实验，团队的工作重心将更多地集中在内部任务上，而忽视了客户结果。

#### 解决方案
雅虎问答团队转向每周部署，并逐渐增加到每周多次部署。同时，他们建立了新功能实验的能力。

#### 成果
经过12个月的实验，雅虎问答实现了以下成果：
- 月访问量提升了72%
- 用户参与度提高了三倍
- 收入翻了一番

#### 优化点
- 第一个回答速度
- 最佳回答速度
- 每个答案的投票数
- 每人每周的回答数量
- 第二次搜索比率

---

### Google的代码审查（2010）

#### 背景
Google是一个规模庞大的主干开发和持续集成的典范。2010年，约有1.3万人基于主干开发，每周提交5500次代码，每周进行数百次部署。平均每分钟有20多个变更提交到主干，导致每月有50%的代码发生变化。

#### 解决方案
为了确保代码质量和一致性，Google采取了以下措施：
- 强制性的代码审查
- 代码可读性（强制风格指南）
- 分配代码子树的所有者，维护一致性和正确性
- 代码透明化和跨团队贡献

---

### Pivotal Labs的结对编程替代代码审查（2011）

#### 背景
2011年，Pivotal Labs有两种代码审查方法：结对编程和基于Gerrit的代码审查。采用Gerrit时，开发者常常需要等待一周才能收到所需的评审结果。在此期间，其他人的代码可能会被提交，导致必须合并所有变更，重新运行测试，甚至重新提交代码评审。

#### 解决方案
为了解决这些问题，Pivotal Labs拆除了所有的Gerrit代码评审流程，改为结对编程。这将代码评审的周期从一周缩短到了几小时。结对编程需要文化支持，认为评审代码与编写代码同样有价值。在不具备这种文化的情况下，结对编程是一种有价值的临时实践。

---

### Etsy的技术栈标准化（2010）

#### 背景
Etsy显著减少了生产环境中支持的技术数量。2010年，他们选择了少数几种整个组织都能完全支持的技术，淘汰了lighttpd、Postgres、MongoDB、Scala、CoffeeScript和Python。虽然无模式数据库有一些优势，但由于运维问题，最终还是将MongoDB替换为现有的MySQL。

#### 解决方案
Etsy将整个平台迁移到PHP和MySQL，使得开发和运维人员能够理解整个技术栈。每个人都能够贡献到单一平台，阅读、重写和修复他人的代码。

---

### 前言
Gene Kim自1999年开始研究高绩效技术组织，发现跨越开发、IT运营和信息安全等不同职能边界的协作对成功至关重要。他在2006年的航空公司订票服务外包项目中经历了大型年度发布的混乱，每次发布都导致外包商的巨大混乱和破坏。由于利润率下滑，经验丰富的员工被裁掉，大量返工和救火工作无法满足日益增长的客户需求。他认为一定有更好的方法。

2009年的Velocity Conference上，他描述了通过架构、技术和文化规范实现令人震惊的结果，找到了更好的方法——DevOps。这激发了他推广DevOps并编写《凤凰项目》的动力。

Jez Humble在2000年的第一份工作中，作为两个技术人员之一，负责网络、编码、支持和系统管理。通过FTP从工作站部署生产环境。2004年加入ThoughtWorks后，他所在的8人团队将需要两周的手动部署转换为一小时的自动化部署。通过蓝绿部署，可以在业务时段中毫秒级进行升级或回滚。这些经历促成了持续交付和本书的编写。

Patrick Debois在2007年的数据中心迁移项目中与敏捷团队合作，羡慕他们的高生产率。在下一个项目中，他在运维团队中实验了看板。2008年Agile Toronto会议上，他提出了一篇IEEE论文，但没有得到广泛回应。2009年Velocity Conference上看到“每日十次部署”的演讲后，他说服志同道合的人举办了DevOpsDays，意外创造了DevOps这个词，影响巨大。

John Willis在2008年的一个大规模遗留IT系统配置管理和监控咨询项目中遇到了Puppet Lab创始人Luke。他们讨论了基础设施即代码的概念，认为运维应该像软件开发者一样行事。2009年Velocity Conference上，他看到了开发和运维之间的“混乱之墙”，成为首次DevOpsDays的唯一美国嘉宾。这次活动后，DevOps融入了他的血液。

---

### 驱散误解

#### DevOps仅适用于初创公司
尽管DevOps实践被互联网独角兽公司如Google、Amazon、Netflix和Etsy所倡导，但它们并不是天生如此。历史上，这些公司也经历过业务停滞的风险，面临传统组织的问题。然而，通过改变架构、技术和文化，它们取得了显著成果。例如，亚马逊在2001年前的OBIDOS系统问题重重，后来改用SOA架构；Twitter在2009年花费一年时间重构前端巨石架构；LinkedIn在2011年暂停两个月的新功能开发，解决技术债务；Etsy在2009年处理部署问题和技术债务，进行了为期两年的技术和文化转型；Facebook在2009年基础架构运维接近崩溃，随后进行了规模化改革。

#### DevOps取代敏捷
DevOps的方法和实践与敏捷相适应，是敏捷之旅的延伸。敏捷聚焦于小团队持续交付高质量代码给用户，超越“每个迭代结束时获得潜在可交付的代码”这一目标，许多DevOps实践应运而生。目标扩展为使代码始终保持可部署状态，开发每天签入代码到主干，在类生产环境中演示功能。

#### DevOps与ITIL不兼容
自1989年发布的ITIL影响了一代又一代的运维实践者，提供了世界级的IT运维流程和实践。DevOps实践可以与ITIL流程兼容，为了支持更短的前置周期和更高的部署频率，许多ITIL流程需要自动化。例如，解决配置和发布管理流程方面的问题，保持CMDB和软件库及时更新。DevOps需要快速探测和恢复事故，而ITIL关于服务设计、事故和问题管理流程的纪律仍然适用。

#### DevOps与信息安全和合规不兼容
DevOps可能缺失传统的控制方式，如职责隔离。然而，通过适当的工具和流程，DevOps可以与信息安全和合规要求共存。