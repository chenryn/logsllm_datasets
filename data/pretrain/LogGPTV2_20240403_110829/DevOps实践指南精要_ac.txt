Fast Release Cycle 
Experimentation at Yahoo! 
Answers (2010)
背景
能够多快迭代和集成客户反馈，就能多快学习产⽣生更更⼤大的影响
雅⻁虎问答，从每六周发布到每周多次发布
2009年年，与其他Q&A公司竞争
每个⽉月⼤大概1.4亿访问⽤用户，超过2千
万活跃⽤用户回答问题（20种语⾔言）
⽤用户增⻓长和收⼊入平缓，⽤用户参与度下滑
最⼤大的互联⽹网社区游戏
数千万⽤用户试图通过⾼高质量量和快速问
题解答⽽而升级
有很多机会修改游戏规则，社区交互
Twitter，Facebook等都在使⽤用实验，每周⾄至少两次
如果实验不不能频繁做，团队⽇日常⼯工作只是
聚焦在他们做什什么，⽽而不不是客户结果
解决⽅方案
团队转换到每周部署，然后是每周多次
建设新功能实验的能⼒力力
成果
通过12个⽉月的实验
⽉月访问数提升72%
⽤用户参与度三倍提升
两倍收⼊入
优化点
第⼀一个回答速度
最佳回答速度
每个答案投票
每⼈人每周回答数
第⼆二搜索⽐比率
Code Reviews at Google (2010)
规模化主⼲干开发和持续集成的典范
背景
1.3万⼈人基于主⼲干开发，每周5500次
提交，每周数百次部署
2010年年，每分钟20多个变更更提交到主
⼲干，导致每个⽉月有50%的代码变化
解决⽅方案
需要有⼤大量量的纪律律，尤其是强制的Code Review
代码可读性（强制⻛风格向导）
分配代码⼦子树Owner，维护⼀一致性和正确性
代码透明和代码贡献横跨团队
Pair Programming Replacing 
Broken Code Review Processes at 
Pivotal Labs (2011)
背景
2011年年，有两种CodeReview⽅方法
结对编程
基于Gerrit的Code Review
两个指定的⼈人+1才能提交Trunk
采⽤用Gerrit，开发常常花费⼀一周等待
接收到需要的评审结果
等待评审（⼀一周）的时候其他⼈人提交代码了了
必须合并所有的变更更，运⾏行行测试，有时
还要重新提交代码评审
解决⽅方案
为了了解决问题，拆除了了所有的Gerrit代码评审流程
替换为结对编程
把代码评审的周期从周降低到⼩小时
结对编程需要⽂文化⽀支持
评审代码跟写代码⼀一样有价值
⽂文化不不具备时，结对编程是有价值的临时实践
Standardizing a New Technology 
Stack at Etsy (2010)
显著缩减⽣生产环境所⽀支持的技术数量量
2010年年，选择少数整个组织都可以
全部⽀支持的技术，其余的根除掉
排除掉了了lighttpd, Postgres, MongoDB, 
Scala, CoﬀeeScript, Python
所有schema-less数据库的优势都被
运维问题取消掉了了，最后还是把
MongoDB换为已有的MySQL
⽇日志
图标
监控
⽣生产遥测
迁移Etsy整个平台到PHP和MySql
使得开发和运维能够理理解整个技术栈，
每个⼈人都可以贡献到单⼀一平台
每个⼈人都可以阅读、重写和修复其他⼈人的代码
Pre-face
Aha！ moment
Gene Kim
从1999年年开始研究⾼高绩效技术组织
最早的发现：跨越开发、IT运营、信息安
全等不不同职能的边界对成功⾄至关重要
2006年年经历航空公司订票服务外包项⽬目
⼤大型、以年年为单位的发布
每次发布导致外包商巨⼤大的混乱和破坏
遭到SLA处罚，因为有影响客户的运⾏行行中断
因为利利润率下滑⽽而裁掉有经验的员⼯工
⼤大量量的返⼯工和救⽕火，⽆无法满⾜足来⾃自客户⽇日益增⻓长的Backlog
每个⼈人都觉得要丢失合同
There must be a better way
2009 Velocity Conference
描述了了通过架构、技术实践和⽂文化规
范实现了了让⼈人震惊的结果
⾮非常兴奋，找到了了⼀一直寻找的better way：DevOps
推⼴广DevOps，成为编写The Phoenix Project的动机
Jez Humble
2000年年，第⼀一份⼯工作
是两个技术员⼯工中的⼀一员，做所有的事情，⽹网
络、编码、⽀支持、系统管理理
通过FTP从⾃自⼰己的⼯工作站部署⽣生产环境
2004年年到ThoughtWorks，与70个
⼈人共同⼯工作
作为8⼈人团队的⼀一员，⼯工作是部署系
统到准⽣生产环境
⼏几个⽉月后，把需要2周的⼿手⼯工部署，
转换为需要1⼩小时的⾃自动化部署
通过蓝绿部署，可以在业务时段中以
毫秒级进⾏行行升级或回滚
这个项⽬目的经历促成了了持续交付和本书编写
“Whatever your constraints, 
we can always do better”
Patrick Debois
2007年年，数据中⼼心迁移项⽬目
跟敏敏捷团队⼀一起⼯工作
妒忌他们的⾼高⽣生产率，短时间完成⼤大量量⼯工作
下⼀一个项⽬目在运维团队实验使⽤用看板
看到团队的动态变化
在Agile Toronto 2008 会议上，提出⼀一篇
IEEE paper，但是没有被敏敏捷社区⼴广泛回应
2009年年Velocity Conference 看
到“10 Deploys per Day”演讲
说服志同道合的⼈人，举办DevOpsDays
意外创造了了DevOps这个词
传播开来，影响巨⼤大
John Willis
2008年年进⾏行行⼀一个⼤大规模遗留留IT系统
配置管理理和监控的咨询项⽬目
遇到Puppet lab创始⼈人Luke
发现过去20年年对配置管理理的做法都
是错误的，Luke描述的是第⼆二代CM
约在⼀一个咖啡馆⾥里里⾯面聊infrastructure as code
Luke认为运维需要转变为软件开发者⼀一样的⾏行行为
把配置纳⼊入版本
采⽤用CI/CD交付模式
2009年年Velocity Conference，听到
敏敏捷基础设施相关演讲
看到了了开发和运维之间的‘混乱之墙’
⾸首次DevOpsDays受邀的唯⼀一美国嘉宾
在这次活动以后，DevOps融化在⾎血液中
驱散谬⻅见
DevOps is Only for Startups
DevOps实践被互联⽹网独⻆角兽
公司所倡导
Google、Amazon、Netﬂix、Etsy
他们并不不是⽣生来如此，历史上曾经
是”⻢马驹公司”，经历过业务停滞的⻛风险
因为有很多与 traditional “horse” 
organizations 相关的问题
⾼高危代码发布导致灾难性失败
不不能快速发布功能满⾜足市场竞争
合规性考虑
不不能扩⼤大规模
开发与运维⾼高度不不信任
然⽽而，他们都能够
改变架构、技术实践和⽂文化
亚⻢马逊2001年年前OBIDOS(奥⽐比杜斯)
系统问题重重，后来换成SOA架构
2009年年Twitter，把前端巨⽯石架构
ROR系统，花费⼀一年年多重构
2011年年LinkedIn，花费两个⽉月停⽌止新功
能开发，解决环境、部署和架构技术债
2009年年Etsy，处理理部署问题和技术
债务，进⾏行行公司技术和⽂文化转型，排
除紧耦合Sprouter系统、提升协作效
率，整体花费两年年时间
2009年年Facebook基础架构运维接近崩
溃，⽆无法跟上⽤用户增⻓长，员⼯工导到处救
⽕火，然后开始进⾏行行运维规模化的改⾰革
因为DevOps⽅方法与实践，取得突出的成果
“Let there be no more talk of DevOps 
unicorns or horses but only thoroughbreds 
and horses heading to the glue factory.”
DevOps Replaces Agile
DevOps的⽅方法和实践与敏敏捷相适应
DevOps是敏敏捷之旅的延伸
敏敏捷是DevOps的使能者
因为敏敏捷聚焦于⼩小团队持续交付⾼高质
量量的代码给⽤用户
超越‘在每个迭代结束时获得潜在可
交付的代码’这个⽬目标，很多DevOps
实践浮现出来
把⽬目标扩展为让代码⼀一直处于可部署状态
开发每⽇日签⼊入代码到主⼲干
在类⽣生产环境演示功能
DevOps is incompatible with ITIL
1989发布的ITIL影响了了⼀一代⼜又⼀一代运维实践者
世界级IT运维流程和实践，横跨服务策略略，设计和⽀支持
DevOps实践可以与ITIL流程兼容
为了了⽀支持更更短的前置周期和更更⾼高部署频率
很多ITIL流程需要⾃自动化
解决配置和发布管理理流程⽅方⾯面的问题
保持CMDB和软件库及时更更新
DevOps需要快速探测和恢复事故
ITIL关于服务设计，事故，问题
管理理流程的纪律律仍然适⽤用
DevOps is Incompatible with 
Information Security and 
Compliance（合规）
DevOps可能缺失的传统控制⽅方式
职责隔离