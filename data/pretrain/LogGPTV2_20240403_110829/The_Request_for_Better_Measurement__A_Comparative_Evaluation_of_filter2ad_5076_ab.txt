Type VI
Type VII
Type VIII
Hybrid
tract card extracted card interactions
No
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
No
No
No
Yes
Yes
No
Yes
0
0
0
0
0
0
1 with S
1 with U
breached
Usability
Sec. 3.2.2 of [50]
No veri(cid:12)cation when PW change
De(cid:12)nite veri(cid:12)er for PW change Two-factor security Sec. 3.2.2 this work
Partition of non-group PWs
Protocol (cid:13)ow 1
Protocol (cid:13)ow 2,
pre-computation
Protocol (cid:13)ow 1, pre-computation Two-factor security Sec. 3.2.1 of [50]
Protocol (cid:13)ow 2
Protocol (cid:13)ow 3
Two-factor security Sec. 3.5 of [57]
Two-factor security Sec. 3.2.1 this work
Two-factor security, Sec. 3.2 and 3.4
Two-factor security Sec. 5.2.2 this work
Two-factor security Sec. 4.2 of [51]
semantic security
of [17]
identity protection, i.e. user identities can not be deter-
mined from the protocol transcripts, and some schemes
(e.g., [21, 39]) can only achieve this notion of privacy; The
advanced notion is user un-traceability, i.e. not only user
identities but also user activities can not be determined
from the protocol transcripts, and some schemes (e.g.,
[43, 49]) can achieve this advanced notion of privacy.
The security requirement SR6 shall be splitted into eight
diﬀerent types as listed in Table 4, which is based on our
past experience in analyzing over two hundreds of two-
factor schemes. One can see that, all these eight types
of smart card loss attacks (Type I∼Type VIII) exploit
diﬀerent attacking strategies, and they are quite realistic
under the adversary model introduced above. Note that
in each type of attack, at most one online interactions is
involved. This means that most of the attacker’s workload
are performed oﬄine, which is not limited by the security
mechanisms of the system (e.g., abnormal login detection,
rate-limiting and lockout [12]). Some attacks (e.g., Types
I, II and IV) are very generic, while some attacks (e.g,
Types III) only work on schemes that imprudently operate
user password (or its hash) with a group element. When
protocol designers fail to consider any one of these threats,
it is highly likely that the proposed scheme will fail to meet
SR6. Similarly, when security engineers evaluate schemes,
overlooking any of them will lead to unreliable conclusions.
Besides ambiguities, we also note that there are two
redundancies regarding SR6 vs. DA4 and SR9 vs. DA3. A
scheme that can achieve SR6 means that, A gaining access
to a victim’s card should not easily change the password of
the smart card, oﬄine guess the password, or impersonate
the user. This implies that, in this case, system security
relies on user password. Hence, the fulﬁllment of SR6
indicates that user password shall be dependent. As a
result, DA4 is entirely included in SR6. Similarly, DA3
is entirely included in SR9. These two redundancies does
not impair the practicality of Madhusudhan-Mittal’s set as
severely as the above ambiguities however.
Summary. To the best of knowledge, we for the ﬁrst
provide a taxonomy of smart-card-loss attacks. As far as
“the current crux lies in how to achieve truly two-factor
security even if the smart cards can be tampered” [51] and
seven of the eight types of smart-card-loss attacks in Table
4 can lead to the breach of two-factor security, this in-
depth understanding of attacker behaviors constitutes a
substantial step forward in resolving “the current crux”.
By incorporating Wang et al.’s [50] and our above reﬁne-
ments, Madhusudhan-Mittal’s set [36] would be much more
concrete and practicable, and its eﬀectiveness is tested by
a comparative evaluation of 34 representative two-factor
authentication schemes in Section 7.
3. REVISITING LI ET AL.’S SCHEME
3.1 Review of Li et al.’s scheme
In this Section, we brieﬂy review Li et al.’s scheme
[28]. For ease of presentation, some intuitive notations are
listed in Table 5 and will be used through-out this paper.
This scheme consists of four phases:
registration, login,
authentication and password change, and we will follow its
descriptions as closely as possible.
Table 5: Notations and abbreviations.
Symbol Description
Ui
S
A
IDi
P Wi
x
⊕
∥
h(·)
→
⇒
ith user
remote authentication server
malicious attacker
identity of user Ui
password of user Ui
the secret key of remote server S
the bitwise XOR operation
the string concatenation operation
collision free one-way hash function
a common channel
a secure channel
Registration phase. Before initializing this phase, the
server S chooses two large primes p and q such that p =
2q + 1, a master secret key x ∈ Zq and a hash function
h(·) : {0, 1}∗ → Zp
. Whenever Ui enrolls in the server,
the following steps will be involved:
∗
=h(IDi)(x+P Wi) mod p.
(1) Ui chooses her identity IDi and password P Wi;
(2) Ui ⇒ S : {IDi, P Wi}.
(3) S computes Ai =h(IDi∥P Wi)P Wi
mod p and Bi
(4) S ⇒ Ui: A card with parameters {Ai, Bi, h(·), p, q}.
Login phase. When user Ui wants to login to S, the
following steps are involved:
(1) Ui inserts her card into a card reader and inputs IDi
=h(IDi∥P Wi)P Wi mod p,
∗
and P Wi. The card calculates A
i ̸= Ai.
∗
and rejects the login request if A
(2) The smart card selects α ∈R Z∗
q and calculates
Ci = Bi/h(IDi)P Wi mod p, Di = h(IDi)(cid:11) mod p, Mi =
h(IDi∥C∥Di∥Ti), where Ti is the current timestamp.
(3) Ui → S : {IDi, Di, Mi, Ti}.
′
i=h(IDi)x mod p, and M
Authentication phase. Upon receiving the login request
from Ui, S and Ui carry out the following steps:
′
i , S veriﬁes
(1) When receiving the login request at time T
i −Ti ≤ ∆T . If either is invalid,
′
i =h(IDi∥C
′
′
′
i
i is not equal to the received Mi.
q , reads the current timestamp Ts,
i mod p and Ms
that IDi is valid and that T
the session is terminated.
(2) S computes C
∥Di∥Ti), and rejects if M
(4) S chooses β ∈R Z∗
i∥Vi∥sk∥Ts).
′
and calculates Vi=h(IDi)(cid:12) mod p, sk=D(cid:12)
=h(IDi∥C
(5) S → Ui : {IDi, Vi, Ms, Ts}.
′
(6) Upon receiving the response at time T
s, Ui checks the
s − Ts ≤ ∆T . If both IDi
′
validity of IDi and whether T
and Ts are valid, Ui proceeds.
s= h(IDi∥Ci
′
=V (cid:11)
mod p and M
∥Vi∥sk
′∥Ts), and rejects if M
′
i
s is not equal to the received
Ms. Otherwise, Ui is assured that S is authentic.
(7) Ui computes sk
′
(9) Finally, Ui and S agree a session key sk = h(IDi)(cid:11)(cid:12)
mod p for protecting their ensuing data communications.
3.2 Security analysis of Li et al.’s scheme
Based on the two assumptions C-1 and C-2 as listed
in Table 1, Li et al. [28] claimed that their scheme can
resist smart card loss attack and achieve two-factor security.
Their claim may hold if there only exist honest clients who
never deviate from the protocol speciﬁcations. Yet, there
could be malicious external attackers (as well as dishonest
insiders) who often do not stick to the protocol.
In the
following, we present two kinds of smart-card-loss attacks
(see Table 4) on the two-factor security of Li et al.’s scheme
under their assumption about A’s capabilities, invalidating
their goal of preserving two-factor security.
3.2.1 Type IV attack on two-factor security
Li et al. [28] showed that, in Chen et al.’s scheme [10], a
user’s password can be oﬄine guessed once the adversary
A has extracted the secret parameters stored in this user’s
smart card. Accordingly, Li et al. presented a new scheme
to overcome this pitfall. However, precisely the same pitfall
still exists in Li et al.’s improvement. The following attack
has been shown in [20], yet here we discuss it in much more
detail to show its practicality.
In case Ui’s smart card is somehow obtained (stolen
or picked up) by A, and the stored sensitive information
{Ai, Bi} can be extracted by some methods under Ca-
pability C-1. Further, according to Capability C-2, it is
fair to assume that the attacker A has also intercepted
the authentication messages {IDi, Di, Mi, Ti} exchanged
during one normal (successful) login session between Ui and
S. Then, A can obtain Ui’s password P Wi as follows:
Step 1. Guesses the value of P Wi to be P W
from the
∗
i
dictionary space Dpw;
Step 2. Computes C
∗
i = Bi/H(IDi)P W
∗
i , where Bi is
revealed from Ui’s smart card and IDi is inter-
cepted from the public channel;
i ∥Di∥Ti), where Di
∗
i = H(IDi∥C
∗
and Ti is intercepted from the public channel;
Step 3. Computes M
Step 4. Checks the correctness of P W
∗
the computed M
i
∗
i by comparing if
is equal to the intercepted Mi;
Step 5. Repeats Steps 1, 2, 3 and 4 until the correct value
of P Wi is found.
Let |Dpw| denote the size of Dpw. The time complexity
of the above attack is O(|Dpw| ∗ (TE + TI + 2TH )), where
TE is the running time for modular exponentiation, TI is
the running time for modular inverse operation and TH
is the running time for Hash operation. Thus, the time
for A to determine Ui’s password is linear to |Dpw|.
In
reality, the dictionary size is very limited, e.g., |Dpw| ≈ 106
[4, 35], A may identify the correct password in polynomial
time on a common PC. Note that, the limited size of
password dictionary is a basic assumption for password-
based protocols in the literature (e.g., [2, 61]).
To obtain a concrete running time for our above attacking
procedure, we employ the publicly-available cryptographic
library MIRACL1 and Pairing-Based Cryptography (PBC)
library2 to measure the time consumption of related cryp-
tographic operations. We conduct experiments on common
PCs or Laptops with varied computation power to simulate
the capabilities of a moderate attacker. To be robust, each
experiment is repeated for 1000 times. Table 6 summarizes
the experimental results. Assuming |D| = 106, it follows
that the above attacking procedure can be completed within
about 45.6(=106∗(1.676 ms+1.059 ms+2*0.008 µs) minutes
on a common PC.
It is worth noting that the above attacking procedure is
conducted oﬄine and needs no interaction with the server.
After this attack, A can impersonate Ui at anytime until
Ui’s smart card is revoked by S, because A now is with both
the security parameters of Ui’s smart card and the correct
password. In other words, there is no way for S to discern
the diﬀerence between A and Ui. At ISC’13, Wang-Wang
[51] demonstrated an attacking scenario in which A timely
returns back the smart card to Ui after having extracted
its parameters, and in this case it is diﬃcult for the victim
user Ui to detect the abnormality and ask S to revoke her
card. This attacking scenario can also be exploited by our
adversary A. All in all, the above attack is indeed practical.
3.2.2 Type II attack on two-factor security
In the above attack, to succeed, A needs to obtain
both the secret parameters from Ui’s smart card and the
transcripts exchanged during a successful
login session
between Ui and S. However, in the following attack, the
acquisition of the secret data from Ui’s card plus the value
of IDi is suﬃcient for A to determine Ui’s password. This
means A may even not need to eavesdrop over the channel,
because IDi is often publicly available information (e.g.,
account number and email address).
∗
i
from
Step 1. Guesses the value of P Wi to be P W
dictionary space Dpw;
Step 2. Computes A
i = H(IDi∥P W
∗
∗
i mod n, where
is intercepted from the public channel or
∗
i )P W
IDi
from other trivial ways;
Step 3. Checks the correctness of P W
∗
the computed A
i is equal to the extracted Ai;
∗
i by comparing if
Step 4. Repeats steps 1, 2 and 3 until the correct value
of P Wi is found.
The time complexity of this attack is O(|Dpw| ∗ (TE +
TH )), which is lower than that of Type IV. According to
the timings in Table 2, this attacking procedure can be
ﬁnished in about 27.9(=106∗(1.676 ms+0.008 µs)) minutes.
Remark 1. Both Type II and Type IV attacks demon-
strate that, once the smart card factor is compromised, the
other factor (i.e., password) can be eﬃciently breached, and
hence the entire system breaks down. This suggests that Li
1http://www.shamus.ie/index.php?page=home
2https://crypto.stanford.edu/pbc/
Table 6: Computation evaluation of related cryptographic-primitive operations on common PCs
Experimental platform Modular Exp. Modular Inv. Point mul. TP Pairing Tpair MapToPoint Tm2p Symmetric Enc. Hash TH Other lightweight
TH (SHA-1) oper.(XOR,∥)
TE (|n| = 512)TI (|n| = 512)(ECC sect163r1)(PBC type A)
(common PCs)
Pentium IV 3.06GHz
Intel i5-2450M 2.50GHz
Intel
i7-4790 3.60GHz
1.676 ms
0.659 ms
0.484 ms
1.059 ms
0.504 ms
0.353 ms
3.107 ms
1.201 ms
0.858 ms
9.285 ms
4.040 ms
2.652 ms
(PBC type A)
185.640 µs
70.827 µs
50.916 µs
TS (AES)
0.312 µs
0.157 µs
0.087 µs
1.523 µs
0.624 µs
0.591 µs
0.008 µs
0.007 µs
0.006 µs
et al.’s scheme [28], as with its predecessors [10, 45, 59], is
still not a truly two-factor scheme under their assumptions
and provides no better security with regard to the original
ones. Both two types of attacks are also eﬀective in [24,37].
4. REVISIT KUMARI-KHAN’S SCHEME
4.1 Review of Kumari-Khan’s scheme
Here we brieﬂy review the scheme proposed by Kumari-
Khan [24], an enhancement over Chen et al.’s scheme [10].
Initialization phase. Notations are used as in Table 5.
Server S picks two large primes p and q satisfying that
p = 2q + 1 and calculates n = pq. Then S selects x ∈ Z∗
as its private key and a hash function h(·). S publishes
n yet keeps p and q secret. Note Z∗
q is the multiplicative
group of Zq. S keeps a registration record RGR to maintain
{IDi, Tr}, where Tr is the time at registration. To assure
conﬁdentiality, S stores x· p⊕ (IDi||Tr) instead of IDi||Tr.
Registration phase.
In this phase, Ui aims to register
with the server S:
q
(1) Ui selects her identity IDi;
(2) Ui ⇒ S : {IDi};
(3) S checks if IDi is already in RGR. If not, S creates a
registration record RGR for Ui and stores x· p⊕ (IDi ∥ Tr)
in the backend database.
(4) S calculates Bi = h(IDi)x+Tr +P W0 mod n, Fi =
(h(IDi)x+Tr mod n) ⊕P W0⊕IDi, and user’s encrypted
identity EIDi = Ex+p(IDi ∥ Tr). Note that P W0 is the
system’s default password; {Ekey(m) and Dkey(m)} stand
for the encryption and decryption of a message m using
key, respectively.
(5) S ⇒ Ui : {Bi, Fi, EIDi, h(·), n, E/Dkey(·), P Wo}.
(6) After receiving the smart card SC, Ui carries out the
password change activity to change the default password
P W0 to a new one P Wi.
Login phase. Ui conducts the following steps to login S:
(1) User Ui inserts her SC into a card reader and inputs
IDi and P Wi.
(2) The smart card computes Ci = (Bi/h(IDi)P Wi ) mod
i = Ci ⊕ P Wi ⊕ IDi and checks if F
∗
∗