564 
逆向工程权威指南（下册） 
24  
mov       ecx, DWORD PTR _i$[ebp] 
25  
add       ecx, 1 
26  
mov       DWORD PTR _i$[ebp], ecx 
27  $LN3@main: 
28  
cmp       DWORD PTR _i$[ebp], 10 
29  
jge       SHORT $LN1@main 
30  
mov       edx, DWORD PTR _i$[ebp] 
31  
mov       al, BYTE PTR _i$[ebp] 
32  
mov       BYTE PTR _array$[ebp+edx], al 
33  
jmp       SHORT $LN2@main 
34  $LN1@main: 
35  
mov       ecx, DWORD PTR _fakearray$[ebp] 
36  
; ecx=address of fakearray[0], ecx+1 is fakearray[1] or array[0] 
37  
movzx      edx, BYTE PTR [ecx+1] 
38  
push       edx 
39  
push       OFFSET $SG2751 ; 'first element %d' 
40  
call       _printf 
41  
add       esp, 8 
42  
mov       eax, DWORD PTR _fakearray$[ebp] 
43  
; eax=address of fakearray[0], eax+2 is fakearray[2] or array[1] 
44  
movzx      ecx, BYTE PTR [eax+2] 
45  
push       ecx 
46  
push       OFFSET $SG2752 ; 'second element %d' 
47  
call       _printf 
48  
add       esp, 8 
49  
mov       edx, DWORD PTR _fakearray$[ebp] 
50  
; edx=address of fakearray[0], edx+10 is fakearray[10] or array[9] 
51  
movzx      eax, BYTE PTR [edx+10] 
52  
push       eax 
53  
push       OFFSET $SG2753 ; 'last element %d' 
54  
call       _printf 
55  
add       esp, 8 
56  
; subtract 4, 3, 2 and 1 from pointer to array[0] in order to find values before array[] 
57  
lea       ecx, DWORD PTR _array$[ebp] 
58  
movzx  
     edx, BYTE PTR [ecx-4] 
59  
push       edx 
60  
lea       eax, DWORD PTR _array$[ebp] 
61  
movzx      ecx, BYTE PTR [eax-3] 
62  
push       ecx 
63  
lea       edx, DWORD PTR _array$[ebp] 
64  
movzx      eax, BYTE PTR [edx-2] 
65  
push       eax 
66  
lea       ecx, DWORD PTR _array$[ebp] 
67  
movzx      edx, BYTE PTR [ecx-1] 
68  
push       edx 
69  
push       OFFSET $SG2754 ; 'array[-1]=%02X, array[-2]=%02X,  array[-3]=%02X, array[-4]=%02 X' 
70  
call       _printf 
71  
add       esp, 20 
72  
xor       eax, eax 
73  
mov       esp, ebp 
74  
pop       ebp 
75  
ret       0 
76 _main   ENDP 
数组 array[]有 10 个字节型数据元素，它们的值依次是 0 到 9。我们还构造数组 fakearray[]和相应的指
针，使 fakearrary 的数组指针地址比 array[]数组的地址提前一个字节，确保 fakearray[1]的地址和 array[0]
对齐。但是我们还是很好奇，在 array[0]之前的负值索引元素的地址到底是什么。为此，我们在这里在 array[]
数组的地址之存储了一个双字常数 0x11223344。只要不进行优化编译，编译器就会按照变量声明的顺序来
分配其存储空间。因此，我们可以在编译后的可执行文件里验证这个存储关系：双字常数 random_value 正
好排列于 array[]数组之前。 
运行这个刚编译出来的可执行文件，可以看到程序运行的结果是： 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 52 章  数组与负数索引 
565 
first element 0 
second element 1 
last element 9 
array[-1]=11, array[-2]=22, array[-3]=33, array[-4]=44 
请注意 x86 平台的小端字节序现象。 
在调试工具 OllyDbg 的栈窗口里，我们可以看到栈内数据的排布如下：  
指令清单 52.2  非优化的 MSVC2010 编译结果 
CPU Stack 
Address  
Value 
001DFBCC  /001DFBD3 ; fakearray pointer 
001DFBD0  |11223344 ; random_value 
001DFBD4  |03020100 ; 4 bytes of array[] 
001DFBD8  |07060504 ; 4 bytes of array[] 
001DFBDC  |00CB0908 ; random garbage + 2 last bytes of array[] 
001DFBE0  |0000000A ; last i value after loop was finished 
001DFBE4  |001DFC2C ; saved EBP value 
001DFBE8  \00CB129D ; Return Address 
现在，栈内地址与变量值的对应关系是： 
 数组 fakearray[]的地址是 0x001dfbd3，它比数组 array[]的地址 0x001dfbd4 落后了一个字节 （栈
是逆向增长的存储结构）。 
虽然这确实是某种意义上的 hack，但是它确实不很靠谱（编译结果可能和预期相差甚远）。因此，本
书不建议在生产环境下使用这种代码。即使如此，本例仍然不失为典型的演示程序。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 5533 章
章    1166 位
位的
的 W
Wiinnddoowwss 程
程序
序  
虽然 16 位的 Windows 程序已经近乎绝迹，但是有关复古程序以及研究加密狗的研究，往往会涉及这
部分知识。 
微软于 1993 年 8 月发布了最后一个 16 位的 Windows 系统，即 Windows 3.11（同年发行的中文操作系
统 Windows 3.2 也是 16 位操作系统）。在此之后问世的 16/32 位混合系统 Windows 96/98/ME 系统，以及 32
位的 Windows NT 系统都可以运行 16 位应用程序。后来推出的 64 位 Windows NT 系列操作系统不再支持
16 位应用程序。 
16 位应用程序的代码结构和 MSDOS 的程序十分相似。这种类型的可执行文件采用了一种名为“New 
Executable (NE)”的可执行程序格式。 
本章的所有程序均由 OpenWatcom 1.9 编译。编译时的选项开关如下： 
wcl.exe -i=C:/WATCOM/h/win/ -s -os -bt=windows -bcl=windows example.c 
53.1  例子#1 
#include  
int PASCAL WinMain( HINSTANCE hInstance, 
                    HINSTANCE hPrevInstance, 
                    LPSTR lpCmdLine, 
                    int nCmdShow ) 
{ 
        MessageBeep(MB_ICONEXCLAMATION); 
        return 0; 
}; 
WinMain  
     proc near 
     push    bp 
     mov    bp, sp 
     mov    ax, 30h ; '0'  
; MB_ICONEXCLAMATION constant 
     push    ax 
     call    MESSAGEBEEP 
     xor    ax, ax   
; return 0 
     pop    bp 
     retn    0Ah 
WinMain 
     endp 
这个程序不难分析。 
53.2  例子#2 
#include  
int PASCAL WinMain( HINSTANCE hInstance, 
    HINSTANCE hPrevInstance, 
    LPSTR lpCmdLine, 
    int nCmdShow ) 
{ 
        MessageBox (NULL, "hello, world", "caption", MB_YESNOCANCEL); 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 53 章  16 位的 Windows 程序 
567 
        return 0; 
}; 
WinMain  
     proc near 
     push    bp 
     mov    bp, sp 
     xor    ax, ax   
   ; NULL 
     push    ax 
     push    ds 
     mov    ax, offset aHelloWorld ; 0x18. "hello, world" 
     push    ax 
     push    ds 
     mov    ax, offset aCaption ; 0x10. "caption" 
     push    ax 
     mov    ax, 3  
   ; MB_YESNOCANCEL 
     push    ax 
     call    MESSAGEBOX 
     xor    ax, ax   
   ; return 0 
     pop    bp 
     retn    0Ah 
WinMain  
     endp 
dseg02:0010 aCaption db 'caption',0 
dseg02:0018 aHelloWorld db 'hello, world',0 
基于 Pascal 语言的调用约定要求：参数从左至右入栈（与 cdecl 相反）。调用方函数依次传递 NULL、
"hello, world"、"caption"和 MB_YESNOCANCEL。这个规范还要求被调用函数恢复栈指针，所以 RETN 指
令有一个 0Ah 参数，即被调用函数在退出的时候要释放 10 字节的栈空间。这种调用规范和 stdcall（参阅
64.2 节）十分相似，只是参数传递的顺序是从左到右的“自然语言”顺序， 
16 位应用程序的指针是一对数据：函数首先传递的是数据段的地址，然后再传递段内的指针地址。本
例子只用到了一个数据段，所以 DS 寄存器的值一直是可执行文件数据段的地址。 
53.3  例子#3 
#include  
int PASCAL WinMain( HINSTANCE hInstance, 
    HINSTANCE hPrevInstance, 
    LPSTR lpCmdLine, 
    int nCmdShow ) 
{ 
    int result=MessageBox (NULL, "hello, world", "caption", MB_YESNOCANCEL); 
    if (result==IDCANCEL) 
        MessageBox (NULL, "you pressed cancel", "caption", MB_OK); 
    else if (result==IDYES) 
        MessageBox (NULL, "you pressed yes", "caption", MB_OK); 
    else if (result==IDNO) 
        MessageBox (NULL, "you pressed no", "caption", MB_OK); 
    return 0; 
}; 
WinMain  
     proc near 
     push     bp 
     mov     bp, sp 
     xor     ax, ax   
   ; NULL 
     push     ax 
     push     ds 
     mov     ax, offset aHelloWorld ; "hello, world" 
     push     ax 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
568 
逆向工程权威指南（下册） 
     push     ds 
     mov     ax, offset aCaption ; "caption" 
     push     ax 
     mov     ax, 3  
   ; MB_YESNOCANCEL 
     push     ax 
     call     MESSAGEBOX 
     cmp     ax, 2  
   ; IDCANCEL 
     jnz     short loc_2F 
     xor     ax, ax 
     push     ax 
     push     ds 
     mov     ax, offset aYouPressedCanc ; "you pressed cancel" 
     jmp     short loc_49 
loc_2F: 
     cmp     ax, 6  
   ; IDYES 
     jnz     short loc_3D 
     xor     ax, ax 
     push     ax 
     push     ds 
     mov     ax, offset aYouPressedYes ; "you pressed yes" 
     jmp     short loc_49 
loc_3D: 
     cmp     ax, 7  
   ; IDNO 
     jnz     short loc_57 
     xor     ax, ax 
     push     ax 
     push     ds 
     mov     ax, offset aYouPressedNo ; "you pressed no" 
loc_49: 
     push     ax 
     push     ds 
     mov     ax, offset aCaption ; "caption" 
     push     ax 
     xor     ax, ax 
     push     ax 
     call     MESSAGEBOX 
loc_57: 
     xor     ax, ax 
     pop     bp 
     retn     0Ah 
WinMain  
     endp 
这段代码是基于前面那个例子进行了一些改动。 
53.4  例子#4 
#include  
int PASCAL func1 (int a, int b, int c) 
{ 
        return a*b+c; 
}; 
long PASCAL func2 (long a, long b, long c) 
{ 
        return a*b+c; 
}; 
long PASCAL func3 (long a, long b, long c, int d) 
{ 
        return a*b+c-d; 
}; 
int PASCAL WinMain( HINSTANCE hInstance, 
异步社区会员 dearfuture(15918834820) 专享 尊重版权