3.6原则
尽管本章中所介绍的故事横跨几十年，也涉及到多种语言，但是每个故事的寓意都
是一样的：可用小程序的话就不要编写大程序。大多数结构都例证了被Polya在其《How
toSolveIt》一书中称为发明家的论的观点：“问题越一般化，解决起来可能也就越容
易”。对于编程来说，这就意味着直接解决一个23种情况的问题，要比编写一个处理
种情况的通用程序，然后将该程序应用到n-23时的情况更加困难。
本章只集中介绍了数据结构对软件的一个贡献：将大程序缩减为小程序。数据结构
还有其他许多正面的影响，包括时间和空间的缩减、增加可移植性和可维护性。Fred
Brook在其《MythicalManMonth》一书的第9章中专门对空间缩减进行了评论，但对于
同样期望缩减其他属性的程序员来说，这不失为一条不错的忠告：
程序员在对空间缺乏无能为力时，往往会脱离代码的纠辨，回过头去凝神
考虑他的数据，这样会找到更好的方法。表示法是编程的精华。
下面介绍你回头思考时需要考虑的几个原则。
将重复性代码改写到数组中。使用最简单的数据结构—数组一一来表示一段长
的相类似的代码往往能达到最佳效果。
封装复杂的结构。当你需要一个复杂的数据结构时，使用抽象的术语对它进行定义，
并将那些操作表示成一个类。
尽可能地使用高级工具。超文术、名称-值对、电子表格、数据库、语言以及类似的
工具在其专门的问题域内都属于功能相当强大的工具。
让数据去构造程序。本章的主题是使用适当的数据结构去替换复杂的代码，这可以
使数据起到构造某个程序的效果。尽管细节更改了，但是主题仍然保留：在编写代码之
前，好的程序员通常都会通篇理解构建程序时所围绕的输入数据结构、输出数据结构以
及中间数据结构。
3.7问题
1.本书第二版将要出版时，美国的个人所得税分5个不同的比率，最高的大约是40%。
以前分法更为复杂，比率也更高。有一段编程代码给出了以下25个if语句，作为一个
合理的方法来计算1978年美国联邦所得税。比率序列0.14、0.15、0.16、0.17、0.18、
bbs.theithome.com
---
## Page 44
第3章数据结构程序
29
序列每次增加0.01。请对此微出评论。
if income u，则说范围
1..u是空的。这时我们将特殊值-1存储到p中，同时终止循环，也即：
if 1 >u
p = -1; break
break语句将终止封闭循环。下面的语句将计算范围中间点m：
m =(1 +u) / 2
”运算符实现整数除法：6/2等于3，和7/2是一样的。下面就是我们已经进行扩展了
的程序：
1 = 0; u = n-1
{invariant:mustbe(1,u)}
if 1 >
p=-1; break
m =(1+u) / 2
use h as a probe to shrink the range 1..u
1f t is found during the shrinking process,
break and note its position
下一步就是对循环体中的最后三行进行细化，这将涉及到对t和x[m]进行比较，并
采取适当的动作保持该不变式。这样该代码就具有以下所示的一般形式：
case
x[m]t:action c
对于动作b，因为我们已经知道t的位置是m，所以我们将p设置为m并终止循环。因
为其他两种情况是对称的，所以我们将集中介绍第一种情况，并且我们相信后一种情况
将可按照对称的方式得到（这也是我们将在下一节中精确地验证该代码的部分缘由）。
我们知道，如果x[m] U
p = -1; break
m =(1+u) / 2
case
x[m]<t:1=m+1
x[m] == t:p=m; break