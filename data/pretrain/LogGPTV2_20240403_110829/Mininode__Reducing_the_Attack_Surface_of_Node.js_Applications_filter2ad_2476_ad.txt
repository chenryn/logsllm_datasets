Arbitrary Code Injection
Remote Memory Exposure
Arbitrary File Overwrite
Information Exposure
Vulnerable packages
91,184
42,163
21,312
6,433
5,324
5,142
3,451
3,323
3,240
3,088
Partially removed
5,333
3,930
403
690
413
665
1,715
16
383
47
%
5.85%
9.32%
1.89%
10.73%
7.76%
12.93%
49.70%
0.48%
11.82%
1.52%
Fully removed
3,633
1,228
370
592
396
590
1649
15
381
47
%
3.98%
2.91%
1.74%
9.20%
7.44%
11.47%
47.78%
0.45%
11.76%
1.52%
Table 5: Common vulnerability categories and their reduction results. Some vulnerabilities might not be exploitable since their
code is not directly reachable and it might not be possible to chain the vulnerabilities due to additional constrains.
of the most popular bundlers is webpack [18], that supports
plugins and different ﬁle types, e.g. CSS, HTML. While the
latest version of webpack can perform dead-code elimina-
tion, which is eliminating declared but unused functions and
variables, Mininode removes exported functionalities that are
never used outside the module, in addition to dead-code elimi-
nation. Another popular bundler is rollup [15] which can also
remove unused exported functions from modules. However,
rollup works only for ES6 module system, while Mininode
was designed to work with CommonJS module system which
is the most widely used in NPM. There are open-source plugins
for both webpack and rollup tools that try to convert Com-
monJS module into ES6 module, but to our best of knowledge,
they do not try to resolve the dynamic challenges that Minin-
ode resolves (see §5 and §6). We envision that our work will
be integrated into existing JavaScript bundlers.
9 Limitations
In this section, we discuss some of our evaluation and imple-
mentation limitations. First, using a test coverage metric to
detect if Mininode breaks the original behavior can be mis-
leading. For example, in the case of dynamic code generation,
i.e. eval, test coverage may give 100% coverage even if it is
not covering all functions. However, we argue that test cov-
erage is the most appropriate mechanism that we can use to
automatically perform a large-scale evaluation.
Second, we employed the snyk.io database in our vulnera-
bility analysis measurement instead of the well-established
CVE-DB or NIST. Unfortunately, despite the high quality of
reports, both contain less number of reports related to third-
party Node.js package vulnerabilities [32].
Third, the dynamic nature of JavaScript is a well-known
challenge for static analysis. In this paper we tried to solve
some Node.js speciﬁc challenges, such as dynamic import,
and deﬁning aliases, by using static analysis. However, there
are challenges that cannot be easily resolved with static analy-
sis. For example, one of those challenges is dynamic code gen-
eration using various JavaScript APIs, e.g. eval, Function,
setTimeOut. Another challenge is patching Node.js speciﬁc
APIs, e.g. require, as shown in Listing 8. In this case, Minin-
ode will not be able to resolve a module inside a different
folder, because it uses an unpatched version of require.
1 // patching the require
2 require = function( arg ) {
3
return { mocked : true};
4 }
Listing 8: Example of patching the require()
A solution to this challenge can be to dynamically execute
the patched code in Mininode to resolve the dynamically
required module. Another approach is to forbid patching
of require function in Node.js application by creating a
constant global object require that can be accessed by all
modules. This way, the function wrapper (See Listing 1)
discussed in Section 2.1 does not need to pass require as an
argument.
10 Conclusion
In this paper, we presented a detailed evaluation of exces-
sive functionality in Node.js applications. We presented
a tool, called Mininode, that measures and effectively re-
moves unnecessary code and dependencies by statically an-
alyzing Node.js applications. We conducted an extensive
analysis of 672,242 packages listed in the NPM repository
and found 119,433 of them to have at least one vulnera-
ble module dependency. Our tool is capable of statically
removing all vulnerable dependencies from 2861, and re-
moving partially from 10,618 applications. In addition to
removing vulnerabilities, Mininode was able to restrict ac-
cess to the ﬁle system for 549,254 packages. We envi-
sion our tool to be integrated into the building process
of Node.js applications. Mininode is publicly available at
https://kapravelos.com/projects/mininode.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    131
Acknowledgments
We would like to thank our shepherd, Johannes Kinder, and
the anonymous reviewers for their valuable feedback. This
work was supported by the Ofﬁce of Naval Research (ONR)
under grant N00014-17-1-2541 and by the National Science
Foundation (NSF) under grant CNS-1703375.
References
[1] Babel JavaScript compiler. https://babeljs.io/.
[2] CVE-2020-7681,
marscode
vulnerability.
https://cve.mitre.org/cgi-bin/cvename.
cgi?name=CVE-2020-7681.
[3] CVE-2020-7682,
marked-tree
vulnerability.
https://cve.mitre.org/cgi-bin/cvename.
cgi?name=CVE-2020-7682.
[4] CVE-2020-7687, fast-http vulnerability.
https://
cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-
2020-7687.
[5] Debug. https://www.npmjs.com/package/debug.
[6] efﬁcient dynamic analysis for node.js.
[7] Escodegen.
escodegen.
https://github.com/estools/
[8] Esprima. https://esprima.org/.
[9] Module Counts. http://www.modulecounts.com/.
[10] Node.js. https://nodejs.org/en/.
[11] Node.js Documentation, ECMAScript Modules.
https://nodejs.org/api/esm.html#esm_
ecmascript_modules.
[12] NPM package: all-the-package-names. https://www.
npmjs.com/package/all-the-package-names.
[13] Npm package: detective. https://www.npmjs.com/
package/detective.
[14] Ofﬁcial Babel Documentation.
https:
//babeljs.io/docs/en/config-files#project-
wide-configuration.
[15] RollupJS. https://rollupjs.org/guide/en/.
[16] Snyk: Vulnerability DB. https://snyk.io/.
[17] understanding and automatically preventing injection
attacks on node.js. Technical report.
[18] webpack. https://webpack.js.org/.
[19] Rabe Abdalkareem, Olivier Nourry, Sultan Wehaibi,
Suhaib Mujahid, and Emad Shihab. Why do developers
use trivial packages? An empirical case study on npm.
In Proceedings of the Joint Meeting on Foundations of
Software Engineering, 2017.
[20] Pieter Agten, Wouter Joosen, Frank Piessens, and Nick
Nikiforakis. Seven months’ worth of mistakes: A lon-
gitudinal study of typosquatting abuse. In Proceedings
of the Symposium on Network and Distributed System
Security (NDSS), 2015.
[21] Babak Amin Azad, Pierre Laperdrix, and Nick Niki-
forakis. Less is more: Quantifying the security beneﬁts
of debloating web applications. In Proceedings of the
USENIX Security Symposium, 2019.
[22] Matthew Baxter-Reynolds. Here’s why you should
is embracing node.js.
be happy that microsoft
https://www.theguardian.com/technology/
blog/2011/nov/09/programming-microsoft.
[23] James Davis, Christy Coghlan, Francisco Servant, and
Dongyoon Lee. The Impact of Regular Expression De-
nial of Service (ReDoS) in Practice: an Empirical Study
at the Ecosystem Scale. In Proceedings of the ACM
Joint Meeting on European Software Engineering Con-
ference and Symposium on the Foundations of Software
Engineering, 2018.
[24] James Davis, Gregor Kildow, and Dongyoon Lee. The
Case of the Poisoned Event Handler: Weaknesses in
the Node.js Event-Driven Architecture. In Proceedings
of the ACM European Workshop on Systems Security,
2017.
[25] James Davis, Eric Williamson, and Dongyoon Lee. A
Sense of Time for JavaScript and Node.js: First-Class
Timeouts as a Cure for Event Handler Poisoning. In
Proceedings of the USENIX Security Symposium, 2018.
[26] Willem De Groef, Fabio Massacci, and Frank Piessens.
NodeSentry: Least-privilege Library Integration for
Server-side JavaScript. In Proceedings of the Annual
Computer Security Applications Conference (ACSAC),
2014.
[27] Emily Mitchell.
Support for Node.js when you
https://developer.ibm.com/articles/
need it.
support-offering-for-nodejs/.
[28] Sumit Goswami, Nabanita Krishnan, Mukesh Verma,
Saurabh Swarnkar, and Pallavi Mahajan. Reducing At-
tack Surface of a Web Application by Open Web Appli-
cation Security Project Compliance. Defence Science
Journal, 2012.
132    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
[29] TJ Holowaychuk. NPM package: requires. https:
//www.npmjs.com/package/requires.
[30] Michael Howard, Jon Pincus, and Jeannette M. Wing.
Measuring relative attack surfaces. In Computer security
in the 21st century. Springer, 2005.
[31] Joel Kemp. NPM package: dependency-tree. https:
//www.npmjs.com/package/dependency-tree.
[32] Sherif Koussa.
risk
13 tools
open-source
for checking the
security
dependencies.
https://techbeacon.com/app-dev-testing/13-
tools-checking-security-risk-open-source-
dependencies.
of
[33] Magnus Madsen, Benjamin Livshits, and Michael Fan-
ning. Practical static analysis of JavaScript applications
In Pro-
in the presence of frameworks and libraries.
ceedings of the ACM Joint Meeting on Foundations of
Software Engineering, 2013.
[34] Magnus Madsen, Frank Tip, and Ondˇrej Lhoták. Static
analysis of event-driven Node.js JavaScript applications.
ACM SIGPLAN Notices, 2015.
[35] Pratyusa K Manadhata, Kymie M Tan, Roy A Maxion,
and Jeannette M Wing. An Approach to Measuring A
System’s AttackSurface. Technical report, CMU-CS-
07-146, 2007.
[36] Gianluca Mezzetti, Anders Møller, and Martin Toldam
Torp. Type regression testing to detect breaking changes
In Proceedings of the Euro-
in Node.js libraries.
pean Conference on Object-Oriented Programming
(ECOOP), 2018.
[37] Benjamin Barslev Nielsen, Behnaz Hassanshahi, and
François Gauthier. Nodest: feedback-driven static analy-
sis of Node. js applications. In Proceedings of the ACM
Joint Meeting on European Software Engineering Con-
ference and Symposium on the Foundations of Software
Engineering, 2019.
[38] Andres Ojamaa and Karl Düüna. Assessing the secu-
rity of Node.js platform. In Proceedings of the IEEE
International Conference for Internet Technology and
Secured Transactions, 2012.
[39] Paypal Engineering.
at PayPal.
https://medium.com/paypal-engineering/node-
js-at-paypal-4e2d1d08ce4f.
Node.js
[40] Sebastian Ruland, Géza Kulcsár, Erhan Leblebici, Sven
Peldszus, and Malte Lochau. Controlling the Attack
Surface of Object-Oriented Refactorings. In Proceed-
ings of the International Conference on Fundamental
Approaches to Software Engineering, 2018.
[41] Mohamed Shehab and Abeer AlJarrah. Reducing Attack
Surface on Cordova-based Hybrid Mobile Apps.
In
Proceedings of the International Workshop on Mobile
Development Lifecycle, 2014.
[42] Cristian-Alexandru Staicu, Michael Pradel, and Ben-
jamin Livshits. Synode: Understanding and automati-
cally preventing injection attacks on node. js. In Pro-
ceedings of the Symposium on Network and Distributed
System Security (NDSS), 2018.
[43] Janos Szurdi, Balazs Kocso, Gabor Cseh, Jonathan
Spring, Mark Felegyhazi, and Chris Kanich. The Long
“Taile” of Typosquatting Domain Names. In Proceed-
ings of the USENIX Security Symposium, 2014.
[44] The npm blog. ’crossenv’ malware on the npm registry.
https://blog.npmjs.org/post/163723642530/
crossenv-malware-on-the-npm-registry.
[45] The npm blog. Details about the event-stream incident.
https://blog.npmjs.org/post/163723642530/
crossenv-malware-on-the-npm-registry.
[46] The npm blog.
kik, left-pad, and npm.
https:
//blog.npmjs.org/post/141577284765/kik-
left-pad-and-npm.
[47] The npm blog. Why we created npm enterprise.
https://blog.npmjs.org/post/183073931165/
why-we-created-npm-enterprise.
[48] Christopher Theisen, Kim Herzig, Patrick Morrison,
Brendan Murphy, and Laurie Williams. Approximating
Attack Surfaces with Stack Traces. In Proceedings of
the IEEE International Conference on Software Engi-
neering, 2015.
[49] Stefan Tilkov and Steve Vinoski. Node.js: Using
JavaScript to Build High-Performance Network Pro-
grams. Proceedings of the IEEE Internet Computing,
2010.
[50] Erik Trickel, Oleksii Starov, Alexandros Kapravelos,
Nick Nikiforakis, and Adam Doupé. Everyone is
Different: Client-side Diversiﬁcation for Defending
Against Extension Fingerprinting. In Proceedings of the
USENIX Security Symposium, 2019.
[51] Zhi Zhang, Yueqiang Cheng, Surya Nepal, Dongxi Liu,
Qingni Shen, and Fethi Rabhi. KASR: A Reliable and
Practical Approach to Attack Surface Reduction of Com-
modity OS Kernels. In Michael Bailey, Thorsten Holz,
Manolis Stamatogiannakis, and Sotiris Ioannidis, edi-
tors, Proceedings of the Symposium on Recent Advances
in Intrusion Detection (RAID), 2018.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    133
[52] Markus Zimmermann, Cristian-Alexandru Staicu, Cam
Tenny, and Michael Pradel. Small World with High
Risks: A Study of Security Threats in the npm Ecosys-
tem. In Proceedings of the USENIX Security Symposium,
2019.
134    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association