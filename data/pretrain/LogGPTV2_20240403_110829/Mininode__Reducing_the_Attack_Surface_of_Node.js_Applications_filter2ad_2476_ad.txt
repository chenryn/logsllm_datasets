# Common Vulnerability Categories and Reduction Results

| Vulnerability Type | Total Count | Partially Removed | Fully Removed |
|--------------------|-------------|-------------------|---------------|
| Arbitrary Code Injection | 91,184 | 5,333 (5.85%) | 3,633 (3.98%) |
| Remote Memory Exposure | 42,163 | 3,930 (9.32%) | 1,228 (2.91%) |
| Arbitrary File Overwrite | 21,312 | 403 (1.89%) | 370 (1.74%) |
| Information Exposure | 6,433 | 690 (10.73%) | 592 (9.20%) |
| Vulnerable Packages | 5,324 | 413 (7.76%) | 396 (7.44%) |
| Other Vulnerabilities 1 | 5,142 | 665 (12.93%) | 590 (11.47%) |
| Other Vulnerabilities 2 | 3,451 | 1,715 (49.70%) | 1,649 (47.78%) |
| Other Vulnerabilities 3 | 3,323 | 16 (0.48%) | 15 (0.45%) |
| Other Vulnerabilities 4 | 3,240 | 383 (11.82%) | 381 (11.76%) |
| Other Vulnerabilities 5 | 3,088 | 47 (1.52%) | 47 (1.52%) |

**Table 5: Common vulnerability categories and their reduction results.** Some vulnerabilities might not be exploitable since their code is not directly reachable, and it might not be possible to chain the vulnerabilities due to additional constraints.

## Popular Bundlers and Mininode's Capabilities

One of the most popular bundlers is webpack [18], which supports plugins and various file types, such as CSS and HTML. The latest version of webpack can perform dead-code elimination, which removes declared but unused functions and variables. In addition to dead-code elimination, Mininode removes exported functionalities that are never used outside the module. Another popular bundler is rollup [15], which can also remove unused exported functions from modules. However, rollup only works with the ES6 module system, while Mininode is designed to work with the CommonJS module system, which is more widely used in NPM. There are open-source plugins for both webpack and rollup that attempt to convert CommonJS modules into ES6 modules, but to the best of our knowledge, they do not address the dynamic challenges that Mininode resolves (see ยง5 and ยง6). We envision that our work will be integrated into existing JavaScript bundlers.

## Limitations

In this section, we discuss some of the limitations in our evaluation and implementation. 

1. **Test Coverage Metric**: Using a test coverage metric to detect if Mininode breaks the original behavior can be misleading. For example, in the case of dynamic code generation (e.g., `eval`), test coverage may give 100% coverage even if it does not cover all functions. However, we argue that test coverage is the most appropriate mechanism for automatically performing a large-scale evaluation.
   
2. **Vulnerability Analysis Database**: We employed the snyk.io database for our vulnerability analysis measurement instead of the well-established CVE-DB or NIST. Despite the high quality of reports, both databases contain fewer reports related to third-party Node.js package vulnerabilities [32].

3. **Dynamic Nature of JavaScript**: The dynamic nature of JavaScript is a well-known challenge for static analysis. In this paper, we attempted to solve some Node.js-specific challenges, such as dynamic import and defining aliases, using static analysis. However, there are challenges that cannot be easily resolved with static analysis. For example, dynamic code generation using various JavaScript APIs (e.g., `eval`, `Function`, `setTimeout`) and patching Node.js-specific APIs (e.g., `require`). In the case of `require` being patched, Mininode will not be able to resolve a module inside a different folder because it uses an unpatched version of `require`.

   ```javascript
   // Example of patching the require function
   require = function(arg) {
       return { mocked: true };
   }
   ```

   A solution to this challenge could be to dynamically execute the patched code in Mininode to resolve the dynamically required module. Another approach is to forbid the patching of the `require` function in Node.js applications by creating a constant global object `require` that can be accessed by all modules. This way, the function wrapper (discussed in Section 2.1) does not need to pass `require` as an argument.

## Conclusion

In this paper, we presented a detailed evaluation of excessive functionality in Node.js applications. We introduced a tool called Mininode, which measures and effectively removes unnecessary code and dependencies through static analysis of Node.js applications. We conducted an extensive analysis of 672,242 packages listed in the NPM repository and found that 119,433 of them have at least one vulnerable module dependency. Our tool is capable of statically removing all vulnerable dependencies from 2,861 applications and partially removing them from 10,618 applications. In addition to removing vulnerabilities, Mininode was able to restrict access to the file system for 549,254 packages. We envision our tool being integrated into the build process of Node.js applications. Mininode is publicly available at https://kapravelos.com/projects/mininode.

## Acknowledgments

We would like to thank our shepherd, Johannes Kinder, and the anonymous reviewers for their valuable feedback. This work was supported by the Office of Naval Research (ONR) under grant N00014-17-1-2541 and by the National Science Foundation (NSF) under grant CNS-1703375.

## References

[References are listed as provided in the original text.]

---

This revised version aims to make the content more organized, clear, and professional.