size_t count
);
它接受三个参数，第⼀个参数 是⽬标宽字符串，第⼆个参数 是待转换的多字节字符串，第三
wcstr mbstr
个参数是待转换的多字节字符串的最⼤字符数。
转换成功时，它的返回值是成功转换的多字节字符的数量；转换失败时，返回 。如果返回值与第三个
-1
参数相同，那么转换后的宽字符串不是以 NULL 结尾的。
下⾯是⼀个例⼦。
setlocale(LC_ALL, "");
char* mbs = "天⽓不错";
wchar_t wcs[20];
int nBytes = 0;
nBytes = mbstowcs(wcs, mbs, 20);
printf("%ls\n", wcs);
printf("%d\n", nBytes);
上⾯示例中，多字节字符串 被 转为宽字符串，成功转换了 4 个字符，所以该函数的返回
mbs mbstowcs()
值为 4。
如果 的第⼀个参数为 ，则返回⽬标宽字符串会包含的字符数量。
mbstowcs() NULL
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
语⾔教程 ⽹道
assert.h - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
assert() #
头⽂件定义了宏 ，⽤于在运⾏时确保程序符合指定条件，如果不符合，就报错终⽌运
assert.h assert()
⾏。
assert(PI > 3);
上⾯代码在程序运⾏到这⼀⾏语句时，验证变量是否 ⼤于 3。如果确实⼤于 3，程序继续运⾏，否则就
PI
会终⽌运⾏，并且给出报错信息提示。
宏接受⼀个表达式作为参数，如果表达式的返回值⾮零， 就会报错，在标准错误流
assert() assert()
中写⼊⼀条错误信息，显示没有通过的表达式，以及包含这个表达式的⽂件名和⾏号。最后，调
stderr
⽤ 函数终⽌程序（ 函数的原型在 头⽂件中）。
abort() abort() stdlib.h
z = x * x - y * y;
assert(z >= 0);
上⾯的 语句类似于下⾯的代码。
assert()
if (z = 0), function main, file /Users/assert.c, line 14.
上⾯报错的格式如下。
Assertion failed: [expression], function [abc], file [xyz], line [nnn].
上⾯代码中，⽅括号的部分使⽤实际数据替换掉。
使⽤ assert() 有⼏个好处：它不仅能⾃动标识⽂件和出问题的⾏号，还有⼀种⽆需更改代码就能开启或关
闭 assert() 的机制。如果已经确认程序没有问题，不需要再做断⾔，就在 语句的前
#include 
⾯，定义⼀个宏 。
NDEBUG
#define NDEBUG
#include 
然后，重新编译程序，编译器就会禁⽤⽂件中所有的 assert() 语句。如果程序⼜出现问题，可以移除这条
指令（或者把它注释掉），再次编译，这样就重新启⽤了 assert() 语句。
#define NDBUG
assert() 的缺点是，因为引⼊了额外的检查，增加了程序的运⾏时间。
static_assert() #
C11 引⼊了静态断⾔ ，⽤于在编译阶段进⾏断⾔判断。
static_assert()
static_assert(constant-expression, string-literal);
接受两个参数，第⼀个参数 是⼀个常量表达式，第⼆个参数
static_assert() constant-expression string-
是⼀个提示字符串。如果第⼀个参数的值为 false，会产⽣⼀条编译错误，第⼆个参数就是错误提
literal
示信息。
static_assert(sizeof(int) == 4, "64-bit code generation is not supported.");
上⾯代码的意思是，如果当前计算机的 类型不等于 4 个字节，就会编译报错。
int
注意， 只在编译阶段运⾏，⽆法获得变量的值。如果对变量进⾏静态断⾔，就会导致编译
static_assert()
错误。
int positive(const int n) {
static_assert(n > 0, "value must > 0");
return 0;
}
上⾯代码会导致编译报错，因为编译时⽆法知道变量 的值。
n
的好处是，尽量在编译阶段发现错误，避免运⾏时再报错，节省开发时间。另外，有些
static_assert()
断⾔位于函数之中，如果不执⾏该函数，就不会报错，⽽ 不管函数是否执⾏，
assert() static_assert()
都会进⾏断⾔判断。最后， 不会⽣成可执⾏代码，所以不会造成任何运⾏时的性能损失。
static_assert()
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
语⾔教程 ⽹道
ctype.h - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
头⽂件定义了⼀系列字符处理函数的原型。
ctype.h
字符测试函数 #
这些函数⽤来判断字符是否属于某种类型。
：是否为字⺟数字
isalnum()
：是否为字⺟
isalpha()
：是否为数字
isdigit()
：是否为⼗六进制数字符
isxdigit()
：是否为⼩写字⺟
islower()
：是否为⼤写字⺟
isupper()
：是否为标准的空⽩字符（包含空格、⽔平制表符或换⾏符）
isblank()
：是否为空⽩字符（空格、换⾏符、换⻚符、回⻋符、垂直制表符、⽔平制表符等）
isspace()
：是否为控制字符，⽐如 Ctrl + B
iscntrl()
：是否为可打印字符
isprint()
：是否为空格以外的任意可打印字符
isgraph()
：是否为标点符号（除了空格、字⺟、数字以外的可打印字符）
ispunct()
它们接受⼀个待测试的字符作为参数。注意，参数类型为 ，⽽不是 ，因为它们允许 EOF 作为参
int char
数。
如果参数字符属于指定类型，就返回⼀个⾮零整数（通常是 ，表示为真），否则返回 （表示为
1 0
伪）。
下⾯是⼀个例⼦，⽤户输⼊⼀个字符，程序判断是否为英⽂字⺟。
#include 
#include 
int main(void) {
char ch = getchar();
if (isalpha(ch))
printf("it is an alpha character.\n");
else
printf("it is not an alpha character.\n");
return 0;
}
字符映射函数 #
这⼀类函数返回字符的某种对应形式，主要有两个函数。
：如果参数是⼤写字符，返回⼩写字符，否则返回原始参数。
tolower()
：如果参数是⼩写字符，返回⼤写字符，否则返回原始参数。
toupper()
ch = toupper(ch);
注意，这两个函数不会改变原始字符。
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
语⾔教程 ⽹道
errno.h - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
声明了⼀个 int 类型的 errno 变量，⽤来存储错误码（正整数）。
errno.h
如果这个变量有⾮零值，表示已经执⾏的程序发⽣了错误。
errno = 0;
y = sqrt(x);
if (errno != 0) {
fprintf(stderr, "sqrt error; program terminated.\n");
exit(EXIT_FAILURE);
}
如果要检查某个函数是否发⽣错误，必须在即将调⽤该函数之前，将 的值置为 0，防⽌其他函数改
errno
变 的值。
errno
的值通常是两个宏 或 。这两个宏都定义在 。它们表示调⽤数学函数时，可
errno EDOM ERANGE errno.h
能发⽣的两种错误。
定义域错误（EDOM）：传递给函数的⼀个参数超出了函数的定义域。例如，负数传⼊ 作
sqrt()
为参数。
取值范围错误（ERANGE）：函数的返回值太⼤，⽆法⽤返回类型⽩哦是。例如，1000 传⼊
作为参数，因为 e^1000 太⼤，⽆法使⽤ double 类型表示。
exp()
使⽤数学函数时，可以将 的值与 EDOM 和 ERANGE ⽐较，⽤来确定到底发⽣了哪⼀类错误。
errno
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
语⾔教程 ⽹道
float.h - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
定义了浮点数类型 float、double、long double 的⼀些宏，规定了这些类型的范围和精度。
float.h
(1)
FLT_ROUNDS
宏 表示当前浮点数加法的四舍五⼊⽅向。
FLT_ROUNDS
它有以下可能的值。
-1：不确定。
0：向零舍⼊。
1：向最近的整数舍⼊。
2：向正⽆穷⽅向舍⼊。
3：向负⽆穷⽅向舍⼊。
（2）
FLT_RADIX
宏 表示科学计数法的指数部分的底（base），⼀般总是 2。
FLT_RADIX
（3）浮点数类型的最⼤值
FLT_MAX
DBL_MAX
LDBL_MAX
（4）浮点数类型的最⼩正值
FLT_MIN
DBL_MIN
LDBL_MIN
（5）两个同类型浮点数之间可表示的最⼩差值（最⼩精度）
FLT_EPSILON
DBL_EPSILON
LDBL_EPSILON
（6）
DECIMAL_DIG
宏 表示⼗进制有效位数。
DECIMAL_DIG
（7）
FLT_EVAL_METHOD
宏 表示浮点数运算时的类型转换。
FLT_EVAL_METHOD
它可能有以下值。
-1：不确定。
0：在当前类型中运算。
1：float 和 double 类型的运算使⽤ double 类型的范围和精度求值。
2：所有浮点数类型的运算使⽤ long double 类型的范围和精度求值。
（8）浮点数尾数部分的个数
FLT_MANT_DIG
DBL_MANT_DIG
LDBL_MANT_DIG
（9）浮点数指数部分有效数字的个数（⼗进制）
FLT_DIG
DBL_DIG
LDBL_DIG
（10）科学计数法的指数部分的最⼩次幂（负数）
FLT_MIN_EXP
DBL_MIN_EXP
LDBL_MIN_EXP
（11）科学计数法的指数部分的⼗进制最⼩次幂（负数）
FLT_MIN_10_EXP
DBL_MIN_10_EXP
LDBL_MIN_10_EXP
（12）科学计数法的指数部分的最⼤次幂
FLT_MAX_EXP
DBL_MAX_EXP
LDBL_MAX_EXP
科学计数法的指数部分的⼗进制最⼤次幂
FLT_MAX_10_EXP