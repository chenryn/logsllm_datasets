ipconfig /all
ifconfig
List running processes
tasklist /v
ps aux
Environment variables
set
export
List current directory
dir /ah
ls -lah
Display file contents
type [FILE]
cat [FILE]
Copy a file
copy [SRC] [DEST]
cp [SRC] [DEST]
Search a file for a string
type [FILE] | find /I [STRING]
cat [FILE] | grep [STRING]
95
Upgrading to an interactive shell
DEFINITION
In the case of Sticky Keys and any other time I use the term back-
door in this book, I’m referring to a (sometimes not so) secret way of accessing
a computer system. 
Windows systems come with a handy feature called Sticky Keys, which allows you to use
key combinations that would normally require the Ctrl, Alt, or Shift key by pressing
only one key for each combination. I can’t honestly say that I’ve ever used this feature
for day-to-day operations, but it has been handy on pentests where I want to elevate a
non-interactive web shell to a fully interactive Windows command prompt. To see
Sticky Keys in action, you can use rdesktop to connect to the Tomcat server with
rdesktop 10.0.10.203 and press the Shift key five times while sitting at the logon
screen (figure 5.6). The Sticky Keys application is executed from a binary executable
file located at c:\Windows\System32\sethc.exe. To upgrade your non-interactive web
shell access to this target, you will replace sethc.exe with a copy of cmd.exe, which will
force Windows to give you an elevated command prompt instead of the Sticky Keys
application.
5.5.1
Backing up sethc.exe
Because your goal is to replace the sethc.exe binary with a copy of the cmd.exe binary,
you need to create a backup of sethc.exe so that you can restore the target server to its
original state in the future. To do this, paste the following command into the web shell:
cmd.exe /c copy c:\windows\system32\sethc.exe
➥ c:\windows\system32\sethc.exe.backup
Figure 5.7 shows that the backup was created. Now that you have a backup of sethc.exe,
all you need to do is replace the original executable with a copy of cmd.exe. This will
create a simple backdoor into the target, which will launch a Windows command
Figure 5.6
The Sticky Keys prompt after pressing Shift five times
96
CHAPTER 5
Attacking vulnerable web services
prompt when you press Shift five times. Microsoft is aware of this old trick, so the access
controls around sethc.exe by default are read-only, even for local administrator
accounts. As a result, if you attempted to copy cmd.exe over to sethc.exe, you would be
met with an Access Denied message. To see why, run the following command in your
web shell to check the permissions of sethc.exe: you’ll see that the permissions are set
to R for read-only. 
c:\windows\system32\cacls.exe c:\windows\system32\sethc.exe
c:\windows\system32\sethc.exe NT SERVICE\TrustedInstaller:F 
                              BUILTIN\Administrators:R     
                              NT AUTHORITY\SYSTEM:R
                              BUILTIN\Users:R 
                              APPLICATION PACKAGE AUTHORITY\ALL APPLICATION 
➥ PACKAGES:R
5.5.2
Modifying file ACLs with cacls.exe
Because your web shell has read-only access to sethc.exe, you won’t be able to modify
it by replacing it with a copy of cmd.exe. Luckily, it’s easy to change the permissions
using the cacls.exe program, which is available natively in Windows. You can use a
command to change the R permissions to F, which stands for full control—but first,
let me explain a couple of things related to our previous discussion about interactive
versus non-interactive shells. 
 The command you’re about to run will generate a prompt for Y/N (yes or no)
before applying the specified permissions to the target file. Because the JSP web shell
you’re using is a non-interactive web shell, you cannot respond to the prompt, and the
command will hang until it times out. You can use a nifty little trick that relies on the
echo command to print a Y character and then pipe that output as the input into the
cacls.exe command, effectively bypassing the prompt. Here is what it all looks like:
cmd.exe /C echo Y | c:\windows\system32\cacls.exe
c:\windows\system32\sethc.exe /E /G BUILTIN\Administrators:F
After executing that command from your web shell, if you rerun the command to query
the current permissions of sethc.exe, you can see that the BUILTIN\Administrators
group has full control instead of read-only permissions.
Listing 5.3
Using cacls.exe to check the file permissions on sethc.exe
Creating the backup of sethc.exe
Figure 5.7
Result after issuing the sethc.exe backup command
Read-only, meaning 
you cannot overwrite 
the file
97
Upgrading to an interactive shell
c:\windows\system32\cacls.exe c:\windows\system32\sethc.exe
c:\windows\system32\sethc.exe NT SERVICE\TrustedInstaller:F 
                              BUILTIN\Administrators:F 
                              NT AUTHORITY\SYSTEM:R
                              BUILTIN\Users:R 
                              APPLICATION PACKAGE AUTHORITY\ALL APPLICATION
➥ PACKAGES:R
NOTE
Record this modification to sethc.exe in your engagement notes. This
is a backdoor that you have installed and that you will need to remove during
the post-engagement cleanup.
At this point, you can easily modify the sethc.exe file by copying cmd.exe to sethc.exe
using the following command. Note the use of /Y in the command. The copy com-
mand prompts with Y/N to overwrite the contents of sethc.exe, but including /Y sup-
presses the prompt. If you attempted to run the command from your web shell
without /Y, the response page would hang until an eventual timeout.
cmd.exe /c copy c:\windows\system32\cmd.exe c:\windows\system32\sethc.exe /Y
        1 file(s) copied.
5.5.3
Launching Sticky Keys via RDP
If you head back to the RDP prompt using rdesktop 10.0.10.203 and activate sticky
Keys by pressing Shift five times, you will be greeted by a fully interactive SYSTEM-level
Windows command prompt (figure 5.8). This prompt executes with SYSTEM-level
privileges (slightly higher than administrator) because you are in a process called win-
logon.exe. The winlogon.exe process is what renders the logon screen you see before
you enter your credentials in a Windows system. 
 Because you haven’t yet authenticated to the OS, you don’t have any permissions.
Therefore, winlogon.exe runs as SYSTEM, and when you trigger Sticky Keys (which is
now cmd.exe), it also runs as SYSTEM. Neat, right?
 By now, you might be asking yourself, What if the target does not have RDP
enabled? The bad news is that, without RDP, the Sticky Keys backdoor is useless. You
would have to rely on another method of upgrading to a fully interactive shell. We will
cover one such method in chapter 8. The good news is that, Windows system adminis-
trators love RDP, and it’s usually enabled.   
Listing 5.4
Rechecking the file permissions on sethc.exe
Listing 5.5
Replacing sethc.exe with cmd.exe
The permissions for 
BUILTIN\Administrators 
have changed to F for 
full control.
98
CHAPTER 5
Attacking vulnerable web services
As a recap, in case anything in this section was unclear, the following sequential steps
are required to set up the Sticky Keys backdoor:
1
Create a backup of the sethc.exe file. You do this so you can un-backdoor (I may
have just invented a word) the target during cleanup, which is something we’ll
discuss further in the last part of the book.
2
Replace the original sethc.exe binary with a copy of cmd.exe, effectively com-
pleting the backdoor. 
In modern Windows OSs, you first have to modify the access control lists
(ACLs) of the sethc.exe file. You do so by using the cacls.exe program to grant
full access to the BUILTIN\Administrators group on the sethc.exe file.
3
Navigate to an RDP prompt using rdesktop (or your preferred RDP client),
and press the Shift key five times to access a fully interactive command prompt.
I’ve also written a detailed blog post covering this attack vector, which you can check
out if you’re so inclined: http://mng.bz/mNGa.
Figure 5.8
SYSTEM-level command prompt instead of Sticky Keys
Getting back to the Hollywood movie heist crew
To attempt to tie this back to the elevator analogy, after accessing the restricted floor
with the newly installed elevator button, the heist crew was able to locate a spare
keycard that could freely access the floor as well as any doors on that floor. 
If they’re super-sneaky criminals who don’t want to get caught, they should probably
head back to the elevator and remove any modifications they made. After all, now
that they have a spare keycard, they can come and go as they please. 
You can do the same thing with the Tomcat web shell simply by navigating to the Man-
ager application, scrolling down to the web shell WAR, and clicking the Undeploy button.
99
Compromising a vulnerable Jenkins server
TIP
Be sure to make a note of the systems on which you set up this backdoor,
and notify your client about them after your engagement. Leaving this back-
door open for longer than necessary exposes your client to additional risk,
which is not what they hired you for. Pentesting is very much a balancing act.
You could make the argument that performing this backdoor at all is expos-
ing your client to additional risk, and you wouldn’t be 100% wrong. However,
I always tell clients that it’s better for me (a good guy pretending to be bad) to
do something naughty on their network and then tell them how I did it than
for a real bad guy to break in and not tell them anything.
5.6
Compromising a vulnerable Jenkins server
The Tomcat server you just used to gain an initial foothold into the network is not the
only web-based attack vector discovered in the last chapter. You also noted a Jenkins
server with an easily guessable password. There is a reliable remote code execution
method baked right into the Jenkins platform in the form of the Groovy script console
plugin, which is enabled by default. 
 In the previous section, you had to create a simple JSP web shell and deploy it to
the target Tomcat server. With Jenkins, all you have to do is use the right Groovy script
to execute OS commands. Figure 5.9 shows the Groovy Script Console page. To access
it, navigate to the /script directory using a browser.
Figure 5.9
The Jenkins Groovy scrSipt Console page
100
CHAPTER 5
Attacking vulnerable web services
DEFINITION
According to Wikipedia, Groovy Script is a Java-syntax-compatible
object-oriented programming language developed by the Apache Software
Foundation.
5.6.1
Groovy script console execution
Groovy Script is utilized heavily throughout Jenkins, and it can also be used to execute
OS commands. That’s not surprising, considering that it’s designed for the Java plat-
form. Here is an example of executing the ipconfig /all command using Groovy
Script.
def sout = new StringBuffer(), serr = new StringBuffer()
def proc = 'ipconfig /all'.execute()                   
proc.consumeProcessOutput(sout, serr)
proc.waitForOrKill(1000)
println "out> $sout err> $serr"
The output from the command is rendered under the Groovy Script input box (figure
5.10). This is essentially a built-in non-interactive web shell. You could use the same
Sticky Keys method explained in the previous section to upgrade this access to a fully
interactive Windows command prompt.
Listing 5.6
Execute ipconfig /all using Groovy script
Groovy Script lets you 
call .execute() on a 
string containing a 
valid OS command.
Figure 5.10
Executing OS commands using Groovy Script
101
Summary
For a more detailed walkthrough of using Jenkins as a means of initial level-one
access, feel free to read this blog post that I wrote in 2014: http://mng.bz/5pgO.
Summary
 The purpose of the focused-penetration phase is to gain access to as many vul-
nerable (level one) targets as possible.
 Web applications often contain remote code execution vectors that can be used
to gain an initial foothold.
 Apache Tomcat servers can be used to deploy a custom backdoor web shell JSP
WAR file.
 Jenkins servers can be used to execute arbitrary Groovy Script and control a vul-
nerable target.
 A non-interactive shell has limitations about what commands can be executed,
and it should be upgraded when possible.
 Sticky Keys can be used to backdoor Windows systems as long as RDP is open.
102
Attacking vulnerable
 database services
If you’ve made it this far on an internal network penetration test (INTP), then
you’re probably feeling pretty successful, and you should be—you’ve already man-
aged to compromise a few hosts. In fact, the few hosts you’ve gained access to thus
far may be all you need to elevate your access to the level of owning the entire net-
work. Remember, though, that the purpose of phase 2, focused penetration, is to
compromise as many level-one hosts as you can. 
DEFINITION
As a reminder, level-one hosts are systems with direct access vul-
nerabilities that you can use to gain remote control of the vulnerable target. 
This chapter covers
 Controlling MSSQL Server using mssql-cli
 Enabling the xp_cmdshell stored procedure
 Copying Windows registry hive files using reg.exe
 Creating an anonymous network share
 Extracting Windows account password hashes 
using Creddump
103
Compromising Microsoft SQL Server
In this chapter, we shift focus from web services to databases services—in this case, the
popular Microsoft SQL Server service that you will most certainly encounter on most
engagements throughout your career. Database services are a logical progression from
web services, based on the fact that the two are frequently paired on enterprise networks.
If you’ve managed to compromise a web application such as Apache Tomcat or Jenkins,
it isn’t far-fetched to expect that you will be able to uncover a configuration file con-
taining credentials to a database server that the web application is intended to talk to.
 In the case of the Capsulecorp Pentest network, it was possible to guess the creden-
tials of at least one database service during the vulnerability-discovery sub-phase just
because the system administrator used a weak password. Believe it or not, this is quite
common on large enterprise networks, even for Fortune 500 companies. Let’s see how
far we can compromise this host using the discovered MSSQL credentials. 
6.1
Compromising Microsoft SQL Server
To use a Microsoft SQL server as a means to gain remote access to a target host, you
first have to obtain a valid set of credentials for the database server. If you recall,
during the information-gathering phase, a valid set of credentials were identified for
the sa account on 10.0.10.201; the password for this account (which should be
recorded in your engagement notes) was Password1. Let’s quickly double-check those
credentials before attacking this database server with the mssql_login auxiliary mod-
ule in Metasploit. 
TIP
If you don’t have well-organized engagement notes, then you’re doing
this all wrong. I realize I’ve already mentioned this, but it’s worth repeating.
By now, you’ve seen first-hand that this process is heavily layered, and phases
(and sub-phases) build off of each other. There is absolutely no way to do this
type of work without taking copious notes. If you are productive using Mark-
down, then I highly recommend something like Typora. If you are one of
those super-organized people who likes to break projects into categories and
subcategories with tags and color coordination, then you’ll be more comfort-
able with something like Evernote.
Fire up the msfconsole, load the mssql_login module with use auxiliary/scanner/
mssql/mssql_login, and then specify the IP address of the target MSSQL server with
set rhosts 10.0.10.201. Set the username and password, respectively, with set
username sa and set password Password1. When you’re ready, you can launch the
module with the run command. The output line prefaced with [+] is an indication of
a valid login to the MSSQL server.
msf5 > use auxiliary/scanner/mssql/mssql_login
msf5 auxiliary(scanner/mssql/mssql_login) >
msf5 auxiliary(scanner/mssql/mssql_login) > set rhosts 10.0.10.201 
rhosts => 10.0.10.201
Listing 6.1
Verifying that the MSSQL credentials are valid
Loads the mssql_login module
Sets the target IP address of the MSSQL server
104
CHAPTER 6
Attacking vulnerable database services
msf5 auxiliary(scanner/mssql/mssql_login) > set username sa 
username => sa
msf5 auxiliary(scanner/mssql/mssql_login) > set password Password1 
password => Password1
msf5 auxiliary(scanner/mssql/mssql_login) > run 
[*] 10.0.10.201:1433      - 10.0.10.201:1433 - MSSQL – Starting
authentication scanner.
[+] 10.0.10.201:1433      - 10.0.10.201:1433 - Login Successful:
WORKSTATION\sa:Password1    
[*] 10.0.10.201:1433      - Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
msf5 auxiliary(scanner/mssql/mssql_login) >
Now that you have identified a valid set of database credentials, there are two main
attack vectors that you might want to try while conducting your pentest. This first is to
simply enumerate the database using raw SQL statements to see what it contains and
whether you (as an attacker) can obtain any sensitive information from the database
tables. Sensitive information might include the following:
 Usernames
 Passwords
 Personally identifiable information (PII)
 Financial information
 Network diagrams
Whether you choose this route is entirely dependent on your engagement scope and
attack objectives. For the sake of the Capsulecorp engagement, we will be more inter-
ested in the second attack vector: trying to gain control of the host-level OS on which
the database server is listening. Because this is a Microsoft SQL server, you need only
look to the xp_cmdshell stored procedure to accomplish the goal of running OS com-