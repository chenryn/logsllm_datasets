00000000
00000000
00000000
000000dc
00000000
0000000d
00000000
00000000
f001c0de
00000000
00000000
00000000
00000000
00000000
00000000
000000e5
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
0000003a
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
d5495b1d
00000000
240.1.192.222
XXXXXXX
Magic?
IP?
Laboratory for Dependable Distributed Systems • RWTH Aachen University
Retrieving Sebek’s variables
00000000
00000000
00007a69
00000000
00000000
00000000
00000000
000000d9
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
000000dc
00000000
0000000d
00000000
00000000
f001c0de
00000000
00000000
00000000
00000000
00000000
00000000
000000e5
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
0000003a
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
d5495b1d
00000000
213.73.91.29
Laboratory for Dependable Distributed Systems • RWTH Aachen University
Retrieving Sebek’s variables
00000000
00000000
00007a69
00000000
00000000
00000000
00000000
000000d9
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
000000dc
00000000
0000000d
00000000
00000000
f001c0de
00000000
00000000
00000000
00000000
00000000
00000000
000000e5
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
0000003a
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
d5495b1d
00000000
31337
Port?
Laboratory for Dependable Distributed Systems • RWTH Aachen University
Retrieving Sebek’s variables
00000000
00000000
00007a69
00000000
00000000
00000000
00000000
000000d9
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
000000dc
00000000
0000000d
00000000
00000000
f001c0de
00000000
00000000
00000000
00000000
00000000
00000000
000000e5
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
0000003a
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
d5495b1d
00000000
MAC?
Laboratory for Dependable Distributed Systems • RWTH Aachen University
include/linux/module.h:
struct module
{
  unsigned long size_of_struct; /* sizeof(module) */
  struct module *next;
  const char *name;
  unsigned long size;
  union {
    atomic_t usecount;
    long pad;
  } uc;  /* Needs to keep its size - so says rth */
  unsigned long flags;        /* AUTOCLEAN et al */
  unsigned nsyms;
  unsigned ndeps;  
  struct module_symbol *syms;
  struct module_ref *deps;
  struct module_ref *refs;
  int (*init)(void);
  void (*cleanup)(void);
include/linux/module.h:
struct module
{
  unsigned long size_of_struct; /* sizeof(module) */
  struct module *next;
  const char *name;
  unsigned long size;
  union {
    atomic_t usecount;
    long pad;
  } uc;  /* Needs to keep its size - so says rth */
  unsigned long flags;        /* AUTOCLEAN et al */
  unsigned nsyms;
  unsigned ndeps;  
  struct module_symbol *syms;
  struct module_ref *deps;
  struct module_ref *refs;
  int (*init)(void);
  void (*cleanup)(void);
Disabling Sebek
• The easy way:  call 
cleanup()
• The obvious way: 
reconstruct 
sys_read() pointer 
from the kernel 
and ﬁx it in the 
syscall table.
• The crazy way: 
patch in your own 
untainted 
sys_read().
Laboratory for Dependable Distributed Systems • RWTH Aachen University
Avoid logging
Laboratory for Dependable Distributed Systems • RWTH Aachen University
What can be logged?
• Unconditionally obtained by the adversary
• All network trafﬁc
• All calls to read()
• Possible obtained
• Forensic data obtained by disk analysis
• syslog data
Laboratory for Dependable Distributed Systems • RWTH Aachen University
Logging of network trafﬁc
• The adversary completely controls the 
network. What can we do about it?
• Use encrypted communication
• Problem: how to deliver our initial 
payload? HTTPS-Exploit?
• Disable the logging host or gain access to 
it and delete data.
Laboratory for Dependable Distributed Systems • RWTH Aachen University
Intercepting  read()
• Every interactive Program uses read(1).
• Many Programs use read() for reading 
conﬁguration ﬁles etc.
• Network Programs usually use recv() 
instead of read().
Laboratory for Dependable Distributed Systems • RWTH Aachen University
The power of read()
sshd
socket
ssh-encryption
bash
Internet
sshd
socket
ssh-encryption
bash
UNIX pipe
Internet
fd
fd
Laboratory for Dependable Distributed Systems • RWTH Aachen University
What is logged?
• data read
• pid, uid calling read()
• ﬁledescriptor used 
• we can ﬁddle with this
• name of the progress calling 
read() (max 12 bytes)
• we can ﬁddle with this
struct sbk_h{
  u32  magic    
  u16  ver        
  u16  type      
  u32  counter   
  u32  time_sec  
  u32  time_usec 
  u32  pid         
  u32  uid       
  u32  fd          
  char com[12]     
  u32  length
};
Laboratory for Dependable Distributed Systems • RWTH Aachen University
Making intercepting  
read() unrelyable
• As long as you can sqeeze more data 
through read() than can be transfered 
through the network, something will get 
lost.
• dd-attack
dd if=/dev/zero of=/dev/null bs=1
Laboratory for Dependable Distributed Systems • RWTH Aachen University
Living without read()
• Can we? Nearly!
• mmap() is our friend
• it’s very hard to intercept
• it works on all regular ﬁles
• ugly exception: /dev/random, pipes, 
etc.
Laboratory for Dependable Distributed Systems • RWTH Aachen University
Better living without read()
• say goodby to your shell
• you need something which directly talks to 
the network and executes your commands 
without calling other programs wherever 
possible.
• Nice bonus: exec() does not call read
• but importing libraries may do so
Laboratory for Dependable Distributed Systems • RWTH Aachen University
Messing with the process 
name
• Just copy & rename the binary.
Laboratory for Dependable Distributed Systems • RWTH Aachen University
Results
• Reading ﬁles unnoticed.
• Possibly executing programs unnoticed.
• Since ﬁlenames are not logged, we can give 
the impression of reading certain ﬁles.
• Giving the impression we are executing 
programms which we don’t.
Laboratory for Dependable Distributed Systems • RWTH Aachen University
Kebes
Laboratory for Dependable Distributed Systems • RWTH Aachen University
Kebes
• Proof of concept code.
• Entirely written in Python 2.3 for 
portability with no external dependency.
• Can do everything you can expect from a 
basic shell.
• Highly dynamic.
Laboratory for Dependable Distributed Systems • RWTH Aachen University
Kebes: networking
• Uses TCP-sockets for networking but could 
also be adopted to use stdout/stdin or 
anything else.
• On top of that implements a crypto layer 
based on Difﬁe-Hellman / AES 
implementing compression and random 
length padding. Main problem: getting 
entropy for DH.
• Python speciﬁc “kebes layer” using 
serialized objects to transfer commands 
and results back and forth. 
Laboratory for Dependable Distributed Systems • RWTH Aachen University
“Kebes layer”
• Can work asynchronous and send multiple 
commands at once.
• Asynchronous commands are not 
implemented by the server at this time.
• Commands can usually work on several 
objects on the server at once.
Laboratory for Dependable Distributed Systems • RWTH Aachen University
Kebes layer
• The Kebes server initially knows only a 
single command:  ADDCOMMAND
• Code for all additional commands is pushed 
by the client into the server at runtime as 
serialized Python objects.
• So most of the NoSEBrEaK code will 
only exist in the server’s RAM.
• Implemented commands: reading/writing 
ﬁles, secure deletion, direct execution, 
listing direcories, ...
Laboratory for Dependable Distributed Systems • RWTH Aachen University
Thank You!
Maximillian Dornseif   
Thorsten Holz 
 Christian N. Klein 
Slides at http://md.hudora.de/presentations/#NoSEBrEaK-DC