# Sebek and Kebes: Techniques for Avoiding Logging and Detection

## Overview
This document provides an in-depth look at the techniques used to avoid logging and detection, specifically focusing on the Sebek and Kebes tools. The content is structured to cover various aspects, including disabling Sebek, intercepting `read()`, and using Kebes for secure communication.

## Disabling Sebek
### Methods to Disable Sebek
1. **Easy Way**: Call the `cleanup()` function.
2. **Obvious Way**: Reconstruct the `sys_read()` pointer from the kernel and fix it in the syscall table.
3. **Crazy Way**: Patch in your own untainted `sys_read()`.

## Avoiding Logging
### What Can Be Logged?
- **Unconditionally Obtained by the Adversary**:
  - All network traffic
  - All calls to `read()`
- **Possible to Obtain**:
  - Forensic data obtained by disk analysis
  - `syslog` data

### Logging of Network Traffic
- **Controlled by the Adversary**: Use encrypted communication.
- **Delivery of Initial Payload**: Consider HTTPS-Exploit.
- **Disabling or Accessing the Logging Host**: Delete data if possible.

### Intercepting `read()`
- **Interactive Programs**: Use `read(1)`.
- **Configuration Files**: Many programs use `read()` for reading configuration files.
- **Network Programs**: Typically use `recv()` instead of `read()`.

### The Power of `read()`
- **Data Read**
- **PID and UID Calling `read()`**
- **File Descriptor Used**
- **Name of the Process Calling `read()` (max 12 bytes)**

```c
struct sbk_h {
  u32 magic;
  u16 ver;
  u16 type;
  u32 counter;
  u32 time_sec;
  u32 time_usec;
  u32 pid;
  u32 uid;
  u32 fd;
  char com[12];
  u32 length;
};
```

### Making Intercepting `read()` Unreliable
- **DD Attack**: 
  ```sh
  dd if=/dev/zero of=/dev/null bs=1
  ```
  - As long as more data can be squeezed through `read()` than can be transferred through the network, some data will be lost.

### Living Without `read()`
- **Using `mmap()`**:
  - Very hard to intercept.
  - Works on all regular files.
  - Exception: `/dev/random`, pipes, etc.

### Better Living Without `read()`
- **Direct Network Communication**:
  - Execute commands without calling other programs.
  - `exec()` does not call `read()`, but importing libraries may.

### Messing with the Process Name
- **Copy and Rename the Binary**.

### Results
- **Reading Files Unnoticed**.
- **Executing Programs Unnoticed**.
- **Giving the Impression of Reading Certain Files**.
- **Giving the Impression of Executing Programs Which Are Not**.

## Kebes
### Overview
- **Proof of Concept Code**.
- **Written in Python 2.3** for portability with no external dependencies.
- **Basic Shell Functionality**.
- **Highly Dynamic**.

### Networking
- **TCP-Sockets for Networking**.
- **Crypto Layer** based on Diffie-Hellman / AES, implementing compression and random length padding.
- **Python-Specific "Kebes Layer"** using serialized objects for command and result transfer.

### Kebes Layer
- **Asynchronous Commands**.
- **Initial Command**: `ADDCOMMAND`.
- **Pushed Commands**: Serialized Python objects.
- **Implemented Commands**:
  - Reading/writing files
  - Secure deletion
  - Direct execution
  - Listing directories

## Conclusion
Thank you for your attention!

- Maximillian Dornseif
- Thorsten Holz
- Christian N. Klein

**Slides available at**: [http://md.hudora.de/presentations/#NoSEBrEaK-DC](http://md.hudora.de/presentations/#NoSEBrEaK-DC)

---

This revised version organizes the content into clear sections, providing a more coherent and professional presentation.