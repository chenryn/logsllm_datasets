u
F
G
F
C
Linear
Sweep
Recursive
Descent
Xrefs
MAIN
Function
General
Function
1 Start from code addresses with symbols
1 Continuous scanning for instructions
2 Skip bad opcodes
3 Replace padding and re-disassembly
4 Exclude code around errors
2 Follow control ﬂow to do disassembly
3 Start from program entry, main, and symbols
5 Function entry matching
6 Linear sweep code gaps
7 Disassembly from targets of xrefs
4 Exclude data units that are ﬂoating points
8 Brute force operands and data units
9 Pointers in data have machine size
10 Alignment of pointers in data
11 Pointers in data or referenced by other xrefs can be non-aligned
12 References to code can only point to function entries
13 Enlarge boundaries of data regions
14 Address tables have minimal size of 2
15 Exclude pointers that may overlap with a string
16 While scanning data regions, use step-length based on type inference
5 Identify main based on arguments to __libc_start_main
17 Identify main using patterns in _start/__scrt_common_main_seh
6 Identify function entries based on symbols
7 Identify function entries based on exception information
8 Identify function entries based on targets of direct calls
9 Identify function entries by resolving indirect calls
18 Identify function entries based on prologues/decision-tree
19 Consider begins of code discovered by linear scan as function entries
Indirect
Jump
Indirect Call
Tail Call
Non-returning
Function
10 Use VSA to resolve jump table targets
20 Follow patterns to determine jump tables
21 Discard jump tables with index bound larger than a threshold
22 Restrict the depth of slice for VSA
11 Identify targets based on constant propagation
12 Consider a jump to the start of another function as a tail call
23 Determine tail call based on distance between the jump and its target
24 A tail call and its target cross multiple functions
25 Tail calls cannot be conditional jumps
26 A tail call tears down its stack
27 A tail call does not jump to the middle of a function
28 Target of a tail call cannot be target of any conditional jumps
13 Identify system calls or library functions that are known non-returning
14 Identify functions with no ret and no tail calls that return
15 Identify functions that always call non-returning functions
29 Detect non-returning functions based on fall-through after the call-sites
Code accuracy
Code coverage
Code accuracy
Code accuracy
Code accuracy
Code accuracy
Code accuracy
Code coverage
Code coverage
Code coverage
Xref accuracy
Xref coverage
Xref accuracy
Xref accuracy
Xref coverage
Xref accuracy
Xref coverage
Xref accuracy
Xref accuracy
Xref accuracy
Func coverage
Func coverage
Func coverage
Func coverage
Func coverage
Func coverage
Func coverage
Func coverage
CFG accuracy
CFG accuracy
CFG accuracy
Efﬁciency
CFG coverage
CFG accuracy
CFG accuracy
CFG accuracy
CFG accuracy
CFG accuracy
CFG accuracy
CFG accuracy
CFG accuracy
CFG accuracy
CFG accuracy
CFG accuracy
Tools
OBJDUMP, PSI, UROBOROS
OBJDUMP, PSI, UROBOROS
OBJDUMP
PSI
UROBOROS
DYNINST, GHIDRA, ANGR, BAP, RADARE2
DYNINST, GHIDRA, ANGR, BAP, RADARE2
DYNINST, GHIDRA, ANGR, BAP, RADARE2
ANGR
GHIDRA, RADARE2
ANGR
UROBOROS, MCSEMA, GHIDRA, ANGR
UROBOROS, MCSEMA, GHIDRA, ANGR
UROBOROS, MCSEMA, GHIDRA
GHIDRA, ANGR
GHIDRA
GHIDRA, ANGR
GHIDRA
MCSEMA, GHIDRA
ANGR
ANGR, BAP
DYNINST, RADARE2
DYNINST, GHIDRA, ANGR, BAP, RADARE2
GHIDRA
DYNINST, GHIDRA, ANGR, BAP, RADARE2
GHIDRA, ANGR
DYNINST, GHIDRA, ANGR, BAP, RADARE2
ANGR
DYNINST, GHIDRA, ANGR
DYNINST, GHIDRA, RADARE2
GHIDRA, ANGR, RADARE2
DYNINST, ANGR
GHIDRA, ANGR
DYNINST, ANGR
RADARE2
GHIDRA
GHIDRA, ANGR
DYNINST, ANGR
ANGR
ANGR
DYNINST, GHIDRA, ANGR, BAP, RADARE2
DYNINST, ANGR, RADARE2
BAP
GHIDRA
III. ANALYSIS OF TOOLS
A. Algorithms and Heuristics in Disassembly
To understand the strategies employed in today’s binary
disassembly tools, we studied 9 representative examples in
Table I. These tools have varying popularity and cover nearly
all publicly known techniques in binary disassembly [105].
Our investigation is primarily based on studying source
code, instead of solely relying on available documentation
and publications. Source code reﬂects the exact semantics of
the strategies applied, protecting us from ambiguities in the
documents. Also, many tools have evolved over time and their
corresponding documentation and publications are out-of-date.
The rest of this section presents our ﬁndings, summarized in
Table III. We assign a number to each algorithm and heuristic,
respectively placing it within a ring (e.g., 1 ) or disc (e.g., 1 ).
The disassembly strategies we study fall into two broad and
well-known classes: linear sweep and recursive descent.
Linear Sweep [OBJDUMP, PSI, UROBOROS]: Linear sweep
continuously scans pre-selected code ranges and identiﬁes
valid instructions ( 1 ), exploiting the rationale that modern
assemblers tend to layout code successively to reduce the
binary’s size. In general, a linear sweep strategy can be
described by how it selects sweep ranges and how it handles
errors during scanning. As such, we summarize algorithms
according to these two aspects.
All
tools in this class follow OBJDUMP to select code
regions for sweep: they process code ranges speciﬁed by sym-
bols in the .symtab and .dynsym sections ( 1 ), followed by
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:37 UTC from IEEE Xplore.  Restrictions apply. 
835
Fig. 1: Error-handling by PSI. Part (a) and part (b) respectively
show the handling of bad opcode and invalid control transfers.
Part (c) is an invalid control-transfer from BinUtils that PSI
should handle but the actual implementation does not.
remaining gaps in the code sections. In a general sense, these
ranges comprehensively encapsulate legitimate instructions.
Various heuristics are used for error detection and handling.
OBJDUMP deems invalid opcodes as errors, skips a byte, and
resumes scanning ( 2 ). Beyond invalid opcodes, PSI considers
control transfers to non-instructions as errors. Furthermore,
PSI has more sophisticated error-handling as shown in Fig. 1.
Upon a bad opcode, PSI traces backwards from the erroneous
instruction to a non-fall-through control transfer (unconditional
jump, indirect jump, or return) and identiﬁes padding after that
control transfer. Replacing the padding with nop instructions,
PSI then re-runs linear-sweep for re-disassembly ( 3 ). When
encountering an invalid control transfer, the public version of
PSI only handles cases where the transfer part is correct but
code around the target contains errors. Speciﬁcally, it checks
the code around the target, seeks a preceding instruction that
starts with zero, and ﬁnally identiﬁes a further preceding non-
fall-through control transfer and its following padding. Again,
PSI will replace the padding with nop instructions and re-
run linear-sweep. UROBOROS follows a similar idea as PSI.
But instead of re-disassembly, UROBOROS simply excludes
the code around the error locations ( 4 ).
The design of PSI can handle cases like the one in Fig. 1(c).
Its implementation, however, is too restrictive for high effec-
tiveness. For instance, the public version of PSI only considers
zero-started padding and cannot correct the error in Fig. 1(c).
To sum up, linear sweep aggressively scans all possible code
and hence, maximizes the recovery of instructions. However,
it can run into errors due to data-in-code. To address errors,
existing tools rely on heuristics for correction, which are less
comprehensive and can have limited utility (§ IV-B1).
Recursive Descent
[DYNINST, GHIDRA, ANGR, BAP,
RADARE2]: Recursive descent starts with a given code address
and performs disassembly following the control ﬂow ( 2 ).
Strategies in this category usually consist of three components:
(1) how to select code addresses, (2) how to resolve control
ﬂow, and (3) how to handle the code gaps left by recursive
disassembly. Accordingly, we summarize the existing tools
based on the three components.
All the tools we study consider the program entry and
available symbols as code addresses for recursive disassembly
( 3 ). These addresses are, in principle, known to be safe.
Further, ANGR, BAP, DYNINST and RADARE2 also discover
the main function and the details are covered in § III-C.
When encountering direct control transfers, the tools expand
the disassembly to the targets. However, to handle indirect
control transfers, different tools adopt different approaches. We
will cover the details in § III-D. Another challenging part of
control ﬂow is to determine non-returning functions. Related
details are also discussed in § III-D.
As indirect control ﬂows are (formally and practically)
undecidable, recursive descent often leaves behind code gaps.
Our evaluation in § IV-B1 shows that recursive disassembly
alone can miss 49.35% of the code on average. As such,
existing tools incorporate heuristics to enlarge code coverage,
which inevitably jeopardizes correctness guarantees. The most
common heuristic, used by ANGR, DYNINST, RADARE2,
BAP, and GHIDRA, searches for function entry points in the
code gaps based on common function prologues / epilogues or
pre-trained decision-tree models [9] ( 5 ). On ﬁnding a function
entry, the tools will consider it as a new starting point for
recursive disassembly. According to our evaluation (§ IV-B3),
function-entry matching on average identiﬁes 17.36% of all
the functions, leading to a 31.55% increase of code coverage.
Beyond function matching, existing tools also use heuristics
that are more aggressive. ANGR performs linear sweep on the
code gaps and recursive disassembly on legitimate instructions
( 6 ). In case of errors, ANGR skips the current basic block
and moves to the next bytes. This linear scan increases the
code coverage of ANGR by around 8.20%. However, it will
misidentify data as code (e.g., Listing 2 in Appendix G).
GHIDRA includes targets of xrefs in recursive descent ( 7 ).
This strategy discovers 4.33% more code coverage. However,
the xrefs are mostly collected with heuristics, which can lead
to errors like Listing 3 in Appendix G.
In summary, strict recursive descent ensures correctness but
often produces insufﬁcient coverage. To expand code cov-
erage, existing tools incorporate many aggressive heuristics
that undermine the correctness guarantees (§ IV-B1).
B. Algorithms and Heuristics in Symbolization
Symbolization identiﬁes numerical values in the binary that
are actually references to code or data objects. Tools generally
follow the workﬂow in Fig. 2.
Constant Operand and Data Unit Extraction [ANGR,
GHIDRA, UROBOROS, MCSEMA]: These tools start by identi-
fying numerical values that are potential pointers. They search
through all instructions to identify constant operands and scan
the non-code regions to ﬁnd data units ( 8 ). As identiﬁcation
of constant operands is trivial, we omit the details and focus on
data units. In general, a data unit is composed of consecutive
n-bytes at an aligned address. However, different tools have
varying choices of n, alignment, and non-code regions:
• All tools assume that a data unit’s size is the same as the
machine size, i.e., 4 bytes in 32-bit and 8 bytes in 64-bit
binaries ( 9 ). This assumption, however, is not always true.
Listing 4 in Appendix G shows a jump table with 4-byte
entries from a 64-bit binary. In such cases, the assumption
about a data unit’s size can mislead symbolization in tools
that do not otherwise handle jump tables (e.g., UROBOROS).
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:37 UTC from IEEE Xplore.  Restrictions apply. 
836
jmploc / jmp* / ret0x0 0x* (padding)0x0 0x* (padding)…(bad)...jmploc / jmp* / ret /call0x0 0x* (padding) 0x0 0x* (padding) …0x0 (mid of inst) 0x*jmp(mid of inst)①②③①②③④f2e0: retqf2e1: 66 *    nopw%cs *f2e8: 0x0 (padding) 0x*…f2ef: 0x0 *    add %cl * 3c40: callqf2f0①②③④(a) Handling bad opcode(b) Handling invalid control flow(c) Case-b error PSI’s idea can handle1,024 bytes and GHIDRA adopts a similar idea (13) because
many pointers are dereferenced with an offset. This strategy
indeed beneﬁts coverage (e.g., Listing 6 in Appendix G). It,
however, also introduces errors like Listing 5 in Appendix G.
Recall that GHIDRA leverages xrefs to aid recursive descent
(§ III-A). When a constant operand is symbolized as a xref to a
non-disassembled code region, GHIDRA recursively disassem-
bles that region. If GHIDRA runs into errors like bad opcodes
and invalid control transfers, it rolls back the disassembly.
Address Table [ANGR, GHIDRA, UROBOROS, MCSEMA]:
Beyond constant operands, these tools also symbolize the non-
code regions by locating address tables: a group of consecutive
data units that are pointers. In general, determining address
tables depends on the choice of table size and the rules to
classify a data unit as a pointer. GHIDRA considers 2 as
the minimal size of an address table (14) and the others
consider 1. While the choice of GHIDRA helps more accurately
identify grouped pointers like function tables, it misses many
individual pointers, leading to false negatives. With regard to
determining pointers, all tools follow the approaches as we
previously discussed. After the initial generation of address
tables, ANGR, MCSEMA and GHIDRA also apply reﬁnements:
• ANGR excludes table entries that are ﬂoating points ( 4 ).
• MCSEMA excludes table entries that may overlap with a
string ( 15 ). When a piece of data can be both a pointer and
a string, MCSEMA prefers string. As we will discuss below,
ANGR uses an opposite strategy.
• GHIDRA excludes table entries that point to the middle of
recovered functions. GHIDRA also excludes table entries
that overlap with strings or cut into other pointers. Finally,
GHIDRA splits an address table when adjacent entries have
a distance larger than 0xffffff.
• Given an entry to non-disassembled code, GHIDRA expands
the recursive descent using the aforementioned approach.
ANGR uses a special strategy when brute-force searching
data regions. Given a location, ANGR in turn checks whether
the data inside is a pointer, a ASCII/Unicode string, or an
arithmetic sequence. If any type matches, ANGR jumps over
the typed bytes and then resumes the search (16). This strategy
incurs many false negatives like Listing 7 in Appendix G.
Overall, there is a lack of algorithmic solutions to symbol-
ization. Today’s tools incorporate a multitude of heuristics,
striving for a coverage-correctness balance.
C. Algorithms and Heuristics in Function Entry Identiﬁcation
Most tools use separate strategies to identify the entry of
main versus the entries of other functions. As such, we ﬁrst
discuss main, followed by the other types of functions.
Main Function [DYNINST, ANGR, BAP, RADARE2]: To
locate it, ANGR and BAP analyze the _start function and,
1 48 c7 c7 e2 e0 40 00 mov $0x40e0e2,%rdi ;main
2 ff 15 ce 48 05 00 ** callq __libc_start_main
Listing 1: Call to __libc_start_main in _start.
following calling conventions, infer the ﬁrst argument passed
by _start to __libc_start_main ( 5 ). Take Listing 1
Fig. 2: A general workﬂow of symbolization.
• UROBOROS and MCSEMA use machine-size alignment (10).
GHIDRA assumes a 4-byte alignment unless a data unit is
the target of another xref. In the latter case, GHIDRA has
no alignment requirement (11). ANGR enforces no alignment
requirement (11) due to observations of unaligned point-
ers [101]. Our evaluation shows that the choice of alignment
is a coverage-accuracy trade-off: around 600 pointers are
saved at non-aligned addresses while the no alignment
assumption leads to nearly 60% of ANGR’s false positives.
• Besides data segments, GHIDRA and ANGR also search for
data units from non-disassembled code regions.
Data Unit Type Inference [ANGR, GHIDRA]: In operand
extraction, ANGR and GHIDRA infer the types of data units
when possible. ANGR identiﬁes memory loads from data units.
If the loaded values ﬂow to ﬂoating-point instructions, ANGR
marks the data units as ﬂoating points. This inference is in
general reliable as it follows data ﬂow. GHIDRA uses a more
aggressive strategy: given a constant operand “pointing” to a
data unit, GHIDRA considers the data unit to be the start of a
string if it is followed by a sequence of ASCII/Unicode bytes
and a null-byte. Otherwise, GHIDRA deems the data unit to be
a pointer if the value inside meets the following conditions:
(1) the value is at least 4096; (2) the value is an address of
an instruction or an address in a non-code region; (3) if the
value is an address of an instruction in a known function, the
instruction must be the function entry (12); (4) if the value is
a data address, the address cannot overlap another typed data
unit. GHIDRA’s type inference has no correctness assurance.
Code-to-Code and Code-to-Data Xrefs [ANGR, GHIDRA,
UROBOROS, MCSEMA]: For each constant operand, ANGR,
UROBOROS, and MCSEMA seek to symbolize it as a code
pointer, checking whether the operand refers to a legitimate
instruction. Beyond, GHIDRA has two extra rules: (1) the
operand cannot be a value in {[0-4095], 0xffff, 0xff00,
0xffffff, 0xff0000, 0xff0000, 0xffffffff, 0xffffff00, 0xffff0000,
0xff00000}; (2) the instruction being referred to must be a
function entry (if the function was known) (12). We measured
heuristic 12 with 3,788 binaries. We discover thousands of
pointers to the middle of functions (e.g., pointers for try-catch
in exception handling), showing that heuristic 12 is unsound.
For a constant operand that cannot be a code pointer, the
tools attempt to symbolize it as a data pointer, checking if the
operand refers to a legitimate data location. In the checking
process, ANGR enlarges the boundaries of a data region by
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:37 UTC from IEEE Xplore.  Restrictions apply. 
837
InstructionsConstant Operand ExtractqUROBOROS, ANGR,GHIDRA,MCSEMACode Pointer CheckqUROBOROSqANGRqGHIDRAqMCSEMAData Pointer CheckqUROBORSqANGRqGHIDRAqMCSEMAAddress Table CheckqUROBOROSqANGRqGHIDRAqMCSEMACode & Data PointersData Type InferenceqANGRqGHIDRACode PointersData PointersData Unit ExtractqUROBOROSqANGRqGHIDRAqMCSEMANon-instruction Regionsas an example. ANGR and BAP locate the instruction at line
1 and deem the immediate operand (0x40e0e2) to be the
address of main. As __libc_start_main is a standard
interface, ANGR and BAP ensure correctness. RADARE2
and DYNINST search architecture-speciﬁc patterns near the
call to __libc_start_main to get the address of main
(17). DYNINST ﬁnds the instruction right before the call
and extracts the immediate operand; RADARE2 searches the
address after a ﬁxed sequence of raw bytes (e.g., 48 c7 c7 in
Fig. 1). For Windows binaries, RADARE2 seeks a pattern in
__scrt_common_main_seh as it does for Linux binaries
to locate main. Other tools do not particularly ﬁnd main.
General Functions
[DYNINST, GHIDRA, ANGR, BAP,
RADARE2]: To identify the entries of non-main functions,
these tools adopt a hybrid approach that consists of three parts:
(1) The tools seek symbols remaining in the .symtab and
.dynsym sections to determine known-to-be-good functions
( 6 ). (Only) GHIDRA considers the .eh_frame section to
identify functions that have unwinding information ( 7 ). As
mandated by X86-64 ABI, modern compilers (e.g., LLVM and
GCC) keep unwinding information for every function. As we
illustrate in § IV-B3, this way GHIDRA can identify nearly all
function entries, but (surprisingly) it does not use exception
information when handling Windows binaries.
(2) All tools consider targets of direct calls to be function