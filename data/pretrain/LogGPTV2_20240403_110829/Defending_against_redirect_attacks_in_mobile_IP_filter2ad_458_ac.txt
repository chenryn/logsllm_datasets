not  need  any  special  software  or  networking  skill  to  launch this 
attack. 
Due  to  the  stateless  nature  of  the  RR  protocol,  it  is  easy  for  an 
intruder  to  cause  havoc  to,  say  B2C  operations.  Imagine  a 
correspondent  node  provides  on-line  services  to  many  mobile 
clients.  The  intruder  can  simply  eavesdrop  on  the  RR  protocol 
messages 
the 
correspondent node and the Internet. The intruder then randomly 
hashes  pairs  of  cookies to form session keys, and sends binding 
update  messages  to  the  correspondent  node.  This  will  cause 
redirection  of  traffic  to  randomly  selected  mobile  clients  and 
eventually bring down the services of the correspondent node. 
Finally, we point out that the IETF MIPv6 specification limits the 
lifetime of a RR authorized binding to a maximum of 420 seconds 
[2].  This  will  have  performance  implications.  Imagine  having  a 
time sensitive session between a mobile node and a correspondent 
node where the mobile node must perform the RR protocol every 
420  seconds  or  less.  Quality  of  communication  will  definitely 
suffer if the RR protocol cannot be executed in a timely manner 
due to congestion or malfunction of the home agent, home link or 
the CN-HA path. 
3.2  The CGA Protocol and Its Analysis 
The Cryptographic Generated Address (CGA) protocol for secure 
binding update, first proposed in [14], is under discussion in the 
IETF  Mobile  IP  Working  Group  according  to  [13].  In  IPv6,  a 
128-bit IP address is divided into a subnet prefix and an interface 
identifier. The home addresses of all the mobile nodes associated 
with a home link share the same home link subnet prefix and are 
differentiated by their unique interface identifiers. 
to  collect  cookies  on 
the  border  between 
Protocol Operation: Each mobile node MN has a public/private 
key pair PMN and SMN in a digital signature scheme. MN’s home 
address is given by HoA = {HL|II}, where HL is the n-bit home 
link subnet prefix and II is the (128-n)-bit interface identifier. The 
II field is obtained by taking the left-most (128-n) bits of the hash 
function output h(PMN). A binding update message from MN to a 
correspondent node CN is given by 
BU = {CN, CoA, HoA, Seq#, LT, PMN, 128-n, SIGMN}, 
where  
SIGMN = SMN(CoA|CN|HoA|Seq#|LT|PMN|128-n) 
is  MN’s  digital  signature  generated  using  its  private  key  SMN. 
Upon receiving the BU, CN computes h(PMN) , compares the left 
most (128-n) bits of h(PMN) with the right most (128-n)-bit II in 
HoA,  and  verifies  the  signature  using  the public key PMN. If the 
hash value matches the value of II and if the signature verification 
is positive, CN will accept the binding update message. 
Discussion:  The  hash  function  h()  here  acts  as  a  “one-to-one” 
mapping from a public key value to an interface identifier; it binds 
a  public  key  value  with  an  interface  identifier.  Since  it  is 
computationally  hard  to  either  find  the  private  key  or  forge  a 
digital signature given the public key, a match of h(PMN) with II in 
HoA as well as positive verification of the signature on BU proves 
that  BU  was  generated  by  the  mobile  node  whose  interface 
identifier portion is II and who knows the private key SMN. This is 
the  only  assurance  a  correspondent  node  gets  from  BU.  As  a 
consequence,  the  protocol  is  able  to  provide  good  protection 
against the session hijacking attack provided the number of bits in 
II,  (128-n),  is  large  enough.  If  (128-n)  is  small,  an  intruder  can 
randomly  generate  pairs  of  public  and  private  keys,  hash  the 
public  keys  and  look  for  a  match  to  a  target  node’s  II.  Once  a 
match is found, the intruder is able to impersonate the target node 
and forge binding updates. The computational complexity of this 
brute force attack is on the order of o(2(128-n)). 
On the other hand, since this protocol does not provide any proof 
on the authorization of MN to use the particular HoA, it is not able 
to  protect  against  the  malicious  mobile  node  flooding  attacks. 
Actually,  an  intruder  can  just  generate a public/private key pair, 
hashes  the  public  key  to  form  a  home  address,  signs  a  binding 
update  message  which  contains  a  victim’s  address  as  CoA,  and 
sends  it  to  a  correspondent  node.  The  correspondent  node  will 
accept  the  binding  update  and  start  sending  traffic  to  flood  the 
victim node. 
The CGA protocol is computational intensive since every binding 
update  message  requires  the  mobile  node  to  generate  a  digital 
signature  and  the  correspondent  node  perform  a  verification  of 
digital signature. 
4.  OUR SECURE BINDING UPDATE 
PROTOCOL 
Our  protocol  employs  public  key  cryptosystems  in  order  to 
provide  strong  security  and  good  scalability.  There  are  two 
important  design  considerations  in  protocols  using  public  key 
cryptosystems.  The  first 
is  performance  since  public  key 
cryptosystem  operations  are  computationally  intensive.  Portable 
devices with constraint computational power, such as PDAs and 
cellular phones, are predicted to account for a majority or at least 
63 
a  substantial  fraction  of  the  population  of  mobile  devices.  It  is 
crucial to keep the amount of public key cryptosystem operations 
in mobile devices to the absolute minimum. 
The second consideration is the mechanism used to securely bind 
a  subject’s  name  with  its  public  key  since  they  have  significant 
impact  on  the  entire  system  architecture  and  operation.  Such  a 
binding is typically achieved using public key certificates issued 
by a trusted certification authority, or CA in short. A public key 
certificate at the minimum consists of a subject’s name, its public 
key,  valid  time  interval  and  CA’s  digital  signature  on  the  above 
data  items.  In  the  MIPv6  environment,  a  mobile  node  could  be 
issued  a  public  key  certificate  with  its  home  address  as  the 
subject’s  name.  However,  having  public  key  certificates  with  IP 
addresses as subject’s names is a bad practice for several reasons. 
First,  IP  addresses  are  often  obtained  by  DNS  (Directory  Name 
Service)  look-up  and  DNS  does  not  provide  a  secure  way  of 
mapping names to IP addresses. Second, IP addresses are subject 
to  renumbering  both  when  service  providers  change  and  when 
configurations  change  so  they  may  not  be  as  persistent  as  other 
subject names (e.g., domain names) [15]. Third, IP addresses are 
leased  to  an  interface  for  a  fixed  length  of  time.  When  an  IP 
address’s  lease  time  expires,  the  association  of  the  address  with 
the interface becomes invalid and the address may be reassigned 
to  another  interface  elsewhere  in  the  Internet.  There  might  be 
various reasons for keeping IP addresses’ lease time short, such as 
for  privacy  protection.  For  devices  which  functions  as  client 
devices, reference [16] recommends to change their IP addresses 
periodically  to  prevent  eavesdroppers  and  other  information 
collectors  from  correlating  the  clients’  seemingly  unrelated 
activities  over  an  extended  period  of  time.  Therefore,  it  is  very 
difficult in practice for CAs to keep track of correct associations 
between  IP  addresses  and  all  devices’  interfaces  in  a  consistent 
and  timely  manner,  not  to  mention  issuing  and  revoking  public 
key certificates for them. 
Subnet prefixes for home links, however, are much more trackable 
and  manageable.  First,  a  home  link  subnet  prefix  is  normally 
much more persistent than a mobile node’s home address. Second, 
the number of home links is significantly smaller than the number 
of  mobile  nodes.  Third,  subnet  prefixes  are  managed  by  system 
administration staff who can do a much better job in keeping track 
prefix  changes  than  keeping  track  of  which  IP  address  is 
associated with which individual mobile node. 
Motivated by the above observations, our protocol is designed to 
possess the following features: 
1. 
It  performs  one-way  authenticated  key-exchange  between 
MN  and  CN  where  MN  authenticates  itself  to  CN  and  the 
exchanged  session  key  is  used  to  secure  binding  update 
messages from MN to CN. 
It  employs  public  key  cryptosystems  and  is  secure  against 
powerful adversary who is able to launch both passive (e.g., 
eavesdropping  at  multiple  points)  and  active  (e.g.,  man-in-
the-middle) attacks. 
It  is  easy  to  manage and scalable. Instead of issuing public 
key certificates containing home addresses as subject names 
for individual mobile nodes, we issue public key certificates 
containing  home  link  subnet  prefixes  as  subject  names  for 
home links. 
2. 
3. 
4.  No  public  key  cryptographic  operations  are  performed  at 
mobile nodes. MIPv6 assumes that home agents are trusted 
by  mobile  nodes  as  well  as  correspondent  nodes  and  that 
communications  between  mobile  nodes  and  their  home 
agents 
security 
associations; home agents function as trusted security proxies 
for mobile nodes in the protocol. They testify the legitimacy 
of mobile nodes’ home addresses, facilitate authentication of 
mobile  nodes  to  correspondent  nodes,  and  establish  shared 
secret session keys for them. 
are  protected  with  pre-established 
System  Setup:  A  home  link  is  associated  with  a  public/private 
key pair PH and SH in a digital signature scheme. The private key 
SH is kept by a home agent HA in the home link, probably inside 
in  a  tamper-resistant  hardware  cryptographic  processing  device. 
The home link obtains a public key certificate, 
CertH = {HL, PH, VI, SIGCA} 
from  a  certification  authority  CA,  where  HL  is  the  home  link 
subnet prefix, VI is the valid duration of the certificate, and SIGCA 
is  CA’s  signature  on  HL,  PH  and  VI.  We  assume  correspondent 
nodes can obtain CA’s public key via various means, such as by 
embedding  or  configuring  CA’s  public  key 
into  MIPv6 
implementations.  Embedding  CAs’  public  keys  has  been  the 
approach in the tremendously successful SSL/TLS protocol [15], 
where  popular  browsers  embed  dozens  of  public  key  values  of 
well-known  CAs. The protocol also uses the Diffie-Hellman key 
exchange  algorithm  to  arrive  at  a  mutual  secret  value  between 
parties of the protocol. Let p and g be the public Diffie-Hellman 
parameters, where p is a large prime and g is a generator of the 
multiplicative group Zp*. To keep our notation compact, we will 
write gx mod p simply as gx.  Since generation of large primes in 
real time can be very time consuming, we assume that the values 
of  p  and  g  are  agreed  upon  before  hand  by  all  the  parties 
concerned. 
Protocol  Operation:  As  in  the  RR  protocol,  all  the  protocol 
messages  here  are  carried  within  IPv6  “Mobility Header” which 
allows protocol messages to be piggybacked on any existing IPv6 
packets. The protocol messages exchanged among a mobile node 
MN, its home agent HA and its correspondent node CN are shown 
in  Figure  5.  In  the  protocol,  the  existence  of  and  operations 
performed by HA are transparent to both MN and CN. As far as 
MN is concerned, it sends message REQ to and receives REP from 
CN.  Similarly,  from  CN’s  point  of  view,  it  receives  COOKIE0, 
EXCH0 and CONFIRM from and sends COOKIE1 and EXCH1 to 
MN. 
The  use  of  cookies  during  the  key  exchange  is  a  weak  form  of 
protection  against  an  intruder  who  generates  a  series  of  request 
packets, each with a different spoofed source IP address and sends 
them to a protocol party. For each request, the protocol party will 
first  validate  cookies  before  performing  computationally 
expensive  public  key  cryptographic  operations.  For  details  on 
cookie generation and validation, please refer to [17]. 
As before, the first two fields in a protocol message are the source 
IP  address  and  destination  IP  address,  respectively.  When  MN 
wants  to  start  route  optimization  operation  with  CN,  it  sends  a 
route optimization request 
REQ = {HoA, CN, n0} 
to  CN  via  reserve  tunneling,  where  n0  is  a  nonce  value  used  to 
match the reply message REP. Here we use CN to represent both 
64 
the correspondent node and its IP address. Message REQ is sent 
to  MN’s  home  link  via  the  IPsec  protected  secure  tunnel.  IPsec 
provides 
replay  protection  only  when  dynamic  security 
association  establishment  is  used.  This  may  not  always  be 
possible  and  manual  keying  might  be  preferred  in  certain 
circumstances.  For  this  reason,  we  have  included  n0  to  counter 
message  replay.  Upon  arriving  at  the  home  link,  REQ  is 
intercepted  by  HA  using  IPv6  Neighbor  Discovery  [2,  18].  HA 
will not forward REQ to CN, instead, it creates a cookie C0 and 
sends 
MN 
              HA 
           CN 
REQ 
 COOKIE0 
 COOKIE1 
EXCH0 
EXCH1 
REP 
COMFIRM 
Figure 5. Message exchange in our new protocol. 