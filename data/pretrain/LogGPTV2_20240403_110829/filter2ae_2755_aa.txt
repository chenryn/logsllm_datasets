# Java反序列化
我们都知道一个对象只要实现了Serilizable接口，这个对象就可以被序列化，java的这种序列化模式为开发者提供了很多便利，我们可以不必关系具体序列化的过程，只要这个类实现了Serilizable接口，这个类的所有属性和方法都会自动序列化。
Java 序列化是指把 Java 对象转换为字节序列的过程
  * ObjectOutputStream类的 writeObject() 方法可以实现序列化
Java 反序列化是指把字节序列恢复为 Java 对象的过程
  * ObjectInputStream 类的 readObject() 方法用于反序列化。
实现java.io.Serializable接口才可被反序列化，而且所有属性必须是可序列化的  
(用`transient` 关键字修饰的属性除外，不参与序列化过程)
User.java(需要序列化的类)
    package Serialization;
    import java.io.Serializable;
    public class User implements Serializable{
        private String name;
        public void setName(String name){
            this.name=name;
        }
        public String getName() {
            return name;
        }
    }
Main.java(序列化和反序列化)
    package Serialization;
    import java.io.*;
    public class Main {
        public static void main(String[] args) throws Exception {
            User user=new User();
            user.setName("LearnJava");
            byte[] serializeData=serialize(user);
            FileOutputStream fout = new FileOutputStream("user.bin");
            fout.write(serializeData);
            fout.close();
            User user2=(User) unserialize(serializeData);
            System.out.println(user2.getName());
        }
        public static byte[] serialize(final Object obj) throws Exception {
            ByteArrayOutputStream btout = new ByteArrayOutputStream();
            ObjectOutputStream objOut = new ObjectOutputStream(btout);
            objOut.writeObject(obj);
            return btout.toByteArray();
        }
        public static Object unserialize(final byte[] serialized) throws Exception {
            ByteArrayInputStream btin = new ByteArrayInputStream(serialized);
            ObjectInputStream objIn = new ObjectInputStream(btin);
            return objIn.readObject();
        }
    }
查看user.bin文件，
    00000000: aced 0005 7372 0012 5365 7269 616c 697a  ....sr..Serializ
    00000010: 6174 696f 6e2e 5573 6572 ade4 cb02 ab94  ation.User......
    00000020: b2b9 0200 014c 0004 6e61 6d65 7400 124c  .....L..namet..L
    00000030: 6a61 7661 2f6c 616e 672f 5374 7269 6e67  java/lang/String
    00000040: 3b78 7074 0009 4c65 6172 6e4a 6176 61    ;xpt..LearnJava
> 根据序列化规范，aced代表java序列化数据的magic
> wordSTREAM_MAGIC,0005表示版本号STREAM_VERSION,73表示是一个对象TC_OBJECT,72表示这个对象的描述TC_CLASSDESC
## readObject()方法
> 从JAVA反序列化RCE的三要素（readobject反序列化利用点 + 利用链 + RCE触发点）来说，是通过（readobject反序列化利用点 +
> DNS查询）来确认readobject反序列化利用点的存在。
实现了java.io.Serializable接口的类还可以定义如下方法(反序列化魔术方法)将会在类序列化和反序列化过程中调用：
  * private void writeObject(ObjectOutputStream oos),自定义序列化
  * private void readObject(ObjectInputStream ois),自定义反序列化
readObject()方法被重写的的话，反序列化该类时调用便是重写后的readObject()方法。如果该方法书写不当的话就有可能引发恶意代码的执行：
Evil.java
    package EvilSerializtion;
    import java.io.*;
    public class Evil implements Serializable{
        public String cmd;
        private void readObject(java.io.ObjectInputStream stream) throws Exception{
            stream.defaultReadObject();
            Runtime.getRuntime().exec(cmd);
        }
    }
Main.java
    package EvilSerializtion;
    import java.io.ByteArrayOutputStream;
    import java.io.ByteArrayInputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    public class Main {
        public static void main(String[] args) throws Exception {
            Evil evil = new Evil();
            evil.cmd = "open /System/Applications/Calculator.app";
            byte[] serializeData = serialize(evil);
            unserialize(serializeData);
        }
        public static byte[] serialize(final Object obj) throws Exception {
            ByteArrayOutputStream btout = new ByteArrayOutputStream();
            ObjectOutputStream objOut = new ObjectOutputStream(btout);
            objOut.writeObject(obj);
            return btout.toByteArray();
        }
        public static Object unserialize(final byte[] serialized) throws Exception {
            ByteArrayInputStream btin = new ByteArrayInputStream(serialized);
            ObjectInputStream objIn = new ObjectInputStream(btin);
            return objIn.readObject();
        }
    }
# URLDNS
`URLDNS` 是ysoserial中利用链的一个名字，通常用于检测是否存在Java反序列化漏洞。该利用链具有如下特点：
  * 不限制jdk版本，使用Java内置类，对第三方依赖没有要求
  * 目标无回显，可以通过DNS请求来验证是否存在反序列化漏洞
  * URLDNS利用链，只能发起DNS请求，并不能进行其他利用
ysoserial中列出的Gadget:
    *   Gadget Chain:
     *     HashMap.readObject()
     *       HashMap.putVal()
     *         HashMap.hash()
     *           URL.hashCode()
原理：
`java.util.HashMap` 重写了 `readObject`, 在反序列化时会调用 `hash` 函数计算 key 的 hashCode.而
`java.net.URL` 的 hashCode 在计算时会调用 `getHostAddress` 来解析域名, 从而发出 DNS 请求.
HashMap#readObject:
    private void readObject(java.io.ObjectInputStream s) // 读取传入的输入流，对传入的序列化数据进行反序列化
            throws IOException, ClassNotFoundException {
            // Read in the threshold (ignored), loadfactor, and any hidden stuff
            s.defaultReadObject();
            reinitialize();
            if (loadFactor  0) { // (if zero, use defaults)
                // Size the table using given load factor only if within
                // range of 0.25...4.0
                float lf = Math.min(Math.max(0.25f, loadFactor), 4.0f);
                float fc = (float)mappings / lf + 1.0f;
                int cap = ((fc = MAXIMUM_CAPACITY) ?
                           MAXIMUM_CAPACITY :
                           tableSizeFor((int)fc));
                float ft = (float)cap * lf;
                threshold = ((cap [] tab = (Node[])new Node[cap];
                table = tab;
                // Read the keys and values, and put the mappings in the HashMap
                for (int i = 0; i >> 16);
        }
这里又调用了`key.hashcode`方法，而key此时是我们传入的 `java.net.URL` 对象，那么跟进到这个类的hashCode()方法看下
URL#hashCode
    public synchronized int hashCode() {  // synchronized 关键字修饰的方法为同步方法。当synchronized方法执行完或发生异常时，会自动释放锁。
            if (hashCode != -1)
                return hashCode;
            hashCode = handler.hashCode(this);
            return hashCode;
        }
当hashCode字段等于-1时会进行`handler.hashCode(this)`计算，跟进handler发现，定义是
    transient URLStreamHandler handler; // transient 关键字，修饰Java序列化对象时，不需要序列化的属性
那么跟进`java.net.URLStreamHandler#hashCode()`
    protected int hashCode(URL u) {
            int h = 0;
            // Generate the protocol part.
            String protocol = u.getProtocol();
            if (protocol != null)
                h += protocol.hashCode();
            // Generate the host part.