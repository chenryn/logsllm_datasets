### 3.4.4 MAC
The `MAC` function uses a user-specified Message Authentication Code (MAC) function to return the hashed MAC value of a `RAW` or `CLOB` value. The `MAC` function is available in three forms:

#### Function Signatures
- `MAC(src IN RAW, typ IN INTEGER, key IN RAW) RETURN RAW`
- `MAC(src IN CLOB, typ IN INTEGER, key IN RAW) RETURN RAW`

#### Parameters
- **src**: Specifies the value for which the MAC value will be generated. You can specify a `RAW`, `BLOB`, or `CLOB` value.
- **typ**: Specifies the MAC function used. Advanced Server supports the following MAC functions:
  - `HMAC_MD5 CONSTANT INTEGER := 1;`
  - `HMAC_SH1 CONSTANT INTEGER := 2;`
- **key**: Specifies the key that will be used to calculate the hashed MAC value.

#### Examples
The following example finds the hashed MAC value of the string "cleartext source":

```sql
DECLARE
    typ INTEGER := DBMS_CRYPTO.HMAC_MD5;
    key RAW(100) := 'my secret key';
    mac_value RAW(100);
BEGIN
    mac_value := DBMS_CRYPTO.MAC('cleartext source', typ, key);
END;
```

In this example, `DBMS_CRYPTO.MAC` uses the key value "my secret key" when calculating the MAC value of "cleartext source".

### 3.4.5 RANDOMBYTES
The `RANDOMBYTES` function returns a `RAW` value of the specified length, containing cryptographically random bytes. The function signature is:

#### Function Signature
- `RANDOMBYTES(number_bytes IN INTEGER) RETURNS RAW`

#### Parameters
- **number_bytes**: Specifies the number of random bytes to be returned.

#### Example
The following example uses `RANDOMBYTES` to return a value that is 1024 bytes long:

```sql
DECLARE
    result RAW(1024);
BEGIN
    result := DBMS_CRYPTO.RANDOMBYTES(1024);
END;
```

### 3.4.6 RANDOMINTEGER
The `RANDOMINTEGER()` function returns a random `INTEGER` between 0 and 268,435,455. The function signature is:

#### Function Signature
- `RANDOMINTEGER() RETURNS INTEGER`

#### Example
The following example uses the `RANDOMINTEGER` function to return a cryptographically strong random `INTEGER` value:

```sql
DECLARE
    result INTEGER;
BEGIN
    result := DBMS_CRYPTO.RANDOMINTEGER();
    DBMS_OUTPUT.PUT_LINE(result);
END;
```

### 3.4.7 RANDOMNUMBER
The `RANDOMNUMBER()` function returns a random `NUMBER` between 0 and 268,435,455. The function signature is:

#### Function Signature
- `RANDOMNUMBER() RETURNS NUMBER`

#### Example
The following example uses the `RANDOMNUMBER` function to return a cryptographically strong random number:

```sql
DECLARE
    result NUMBER;
BEGIN
    result := DBMS_CRYPTO.RANDOMNUMBER();
    DBMS_OUTPUT.PUT_LINE(result);
END;
```

### 3.5 DBMS_JOB
The `DBMS_JOB` package provides for the creation, scheduling, and managing of jobs. A job runs a stored procedure that has been previously stored in the database. The `SUBMIT` procedure is used to create and store a job definition. A job identifier is assigned to a job along with its associated stored procedure and the attributes describing when and how often the job is to be run.

This package relies on the `pgAgent` scheduler. By default, the Advanced Server installer installs `pgAgent`, but you must start the `pgAgent` service manually prior to using `DBMS_JOB`. If you attempt to use this package to schedule a job after un-installing `pgAgent`, `DBMS_JOB` will throw an error. `DBMS_JOB` verifies that `pgAgent` is installed but does not verify that the service is running.

The following table lists the supported `DBMS_JOB` procedures:

| Function/Procedure | Return Type | Description |
|--------------------|-------------|-------------|
| `BROKEN(job, broken [, next_date])` | n/a | Specify that a given job is either broken or not broken. |
| `CHANGE(job, what, next_date, interval, instance, force)` | n/a | Change the job’s parameters. |
| `INTERVAL(job, interval)` | n/a | Set the execution frequency by means of a date function that is recalculated each time the job is run. This value becomes the next date/time for execution. |
| `NEXT_DATE(job, next_date)` | n/a | Set the next date/time the job is to be run. |
| `REMOVE(job)` | n/a | Delete the job definition from the database. |
| `RUN(job)` | n/a | Forces execution of a job even if it is marked broken. |
| `SUBMIT(job OUT, what [, next_date [, interval [, no_parse ]]])` | n/a | Creates a job and stores its definition in the database. |
| `WHAT(job, what)` | n/a | Change the stored procedure run by a job. |

Advanced Server's implementation of `DBMS_JOB` is a partial implementation compared to Oracle's version. Only those functions and procedures listed in the table above are supported.

When and how often a job is run is dependent upon two interacting parameters: `next_date` and `interval`. The `next_date` parameter is a date/time value that specifies the next date/time when the job is to be executed. The `interval` parameter is a string that contains a date function that evaluates to a date/time value.

Just prior to any execution of the job, the expression in the `interval` parameter is evaluated. The resulting value replaces the `next_date` value stored with the job. The job is then executed. In this manner, the expression in `interval` is repeatedly re-evaluated prior to each job execution, supplying the `next_date` date/time for the next execution.

The following examples use the following stored procedure, `job_proc`, which simply inserts a timestamp into the `jobrun` table, containing a single `VARCHAR2` column.

```sql
CREATE TABLE jobrun (
    runtime VARCHAR2(40)
);

CREATE OR REPLACE PROCEDURE job_proc
IS
BEGIN
    INSERT INTO jobrun VALUES ('job_proc run at ' || TO_CHAR(SYSDATE, 'yyyy-mm-dd hh24:mi:ss'));
END;
```

### 3.5.1 BROKEN
The `BROKEN` procedure sets the state of a job to either broken or not broken. A broken job cannot be executed except by using the `RUN` procedure.

#### Procedure Signature
- `BROKEN(job BINARY_INTEGER, broken BOOLEAN [, next_date DATE])`

#### Parameters
- **job**: Identifier of the job to be set as broken or not broken.
- **broken**: If set to `TRUE`, the job’s state is set to broken. If set to `FALSE`, the job’s state is set to not broken. Broken jobs cannot be run except by using the `RUN` procedure.
- **next_date**: Date/time when the job is to be run. The default is `SYSDATE`.

#### Examples
Set the state of a job with job identifier 104 to broken:

```sql
BEGIN
    DBMS_JOB.BROKEN(104, TRUE);
END;
```

Change the state back to not broken:

```sql
BEGIN
    DBMS_JOB.BROKEN(104, FALSE);
END;
```

### 3.5.2 CHANGE
The `CHANGE` procedure modifies certain job attributes, including the stored procedure to be run, the next date/time the job is to be run, and how often it is to be run.

#### Procedure Signature
- `CHANGE(job BINARY_INTEGER, what VARCHAR2, next_date DATE, interval VARCHAR2, instance BINARY_INTEGER, force BOOLEAN)`

#### Parameters
- **job**: Identifier of the job to modify.
- **what**: Stored procedure name. Set this parameter to `NULL` if the existing value is to remain unchanged.
- **next_date**: Date/time when the job is to be run next. Set this parameter to `NULL` if the existing value is to remain unchanged.
- **interval**: Date function that, when evaluated, provides the next date/time the job is to run. Set this parameter to `NULL` if the existing value is to remain unchanged.
- **instance**: This argument is ignored but is included for compatibility.
- **force**: This argument is ignored but is included for compatibility.

#### Example
Change the job to run next on December 13, 2007. Leave other parameters unchanged.

```sql
BEGIN
    DBMS_JOB.CHANGE(104, NULL, TO_DATE('13-DEC-07', 'DD-MON-YY'), NULL, NULL, NULL);
END;
```

### 3.5.3 INTERVAL
The `INTERVAL` procedure sets the frequency of how often a job is to be run.

#### Procedure Signature
- `INTERVAL(job BINARY_INTEGER, interval VARCHAR2)`

#### Parameters
- **job**: Identifier of the job to modify.
- **interval**: Date function that, when evaluated, provides the next date/time the job is to be run. If `interval` is `NULL` and the job is complete, the job is removed from the queue.

#### Example
Change the job to run once a week:

```sql
BEGIN
    DBMS_JOB.INTERVAL(104, 'SYSDATE + 7');
END;
```

### 3.5.4 NEXT_DATE
The `NEXT_DATE` procedure sets the date/time of when the job is to be run next.

#### Procedure Signature
- `NEXT_DATE(job BINARY_INTEGER, next_date DATE)`

#### Parameters
- **job**: Identifier of the job whose next run date is to be set.
- **next_date**: Date/time when the job is to be run next.

#### Example
Change the job to run next on December 14, 2007:

```sql
BEGIN
    DBMS_JOB.NEXT_DATE(104, TO_DATE('14-DEC-07', 'DD-MON-YY'));
END;
```

### 3.5.5 REMOVE
The `REMOVE` procedure deletes the specified job from the database. The job must be resubmitted using the `SUBMIT` procedure in order to have it executed again. Note that the stored procedure that was associated with the job is not deleted.

#### Procedure Signature
- `REMOVE(job BINARY_INTEGER)`

#### Parameters
- **job**: Identifier of the job that is to be removed from the database.

#### Example
Remove a job from the database:

```sql
BEGIN
    DBMS_JOB.REMOVE(104);
END;
```

### 3.5.6 RUN
The `RUN` procedure forces the job to be run, even if its state is broken.

#### Procedure Signature
- `RUN(job BINARY_INTEGER)`

#### Parameters
- **job**: Identifier of the job to be run.

#### Example
Force a job to be run:

```sql
BEGIN
    DBMS_JOB.RUN(104);
END;
```

### 3.5.7 SUBMIT
The `SUBMIT` procedure creates a job definition and stores it in the database. A job consists of a job identifier, the stored procedure to be executed, when the job is to be first run, and a date function that calculates the next date/time the job is to be run.

#### Procedure Signature
- `SUBMIT(job OUT BINARY_INTEGER, what VARCHAR2, [next_date DATE, [interval VARCHAR2, [no_parse BOOLEAN]]])`

#### Parameters
- **job**: Identifier assigned to the job.
- **what**: Name of the stored procedure to be executed by the job.
- **next_date**: Date/time when the job is to be run next. The default is `SYSDATE`.
- **interval**: Date function that, when evaluated, provides the next date/time the job is to run. If `interval` is set to `NULL`, then the job is run only once. `NULL` is the default.
- **no_parse**: If set to `TRUE`, do not syntax-check the stored procedure upon job creation—check only when the job first executes. If set to `FALSE`, check the procedure upon job creation. The default is `FALSE`.

**Note**: The `no_parse` option is not supported in this implementation of `SUBMIT()`. It is included for compatibility only.

#### Example
The following example creates a job using the stored procedure `job_proc`. The job will execute immediately and run once a day thereafter as set by the `interval` parameter, `SYSDATE + 1`.

```sql
DECLARE
    jobid INTEGER;
BEGIN
    DBMS_JOB.SUBMIT(jobid, 'job_proc;', SYSDATE, 'SYSDATE + 1');
    DBMS_OUTPUT.PUT_LINE('jobid: ' || jobid);
END;
```

The job immediately executes the procedure `job_proc`, populating the `jobrun` table with a row:

```sql
SELECT * FROM jobrun;
```

Output:
```
runtime
-------------------------------------
job_proc run at 2007-12-11 11:43:25
(1 row)
```

### 3.5.8 WHAT
The `WHAT` procedure changes the stored procedure that the job will execute.

#### Procedure Signature
- `WHAT(job BINARY_INTEGER, what VARCHAR2)`

#### Parameters
- **job**: Identifier of the job for which the stored procedure is to be changed.
- **what**: Name of the stored procedure to be executed.

#### Example
Change the job to run the `list_emp` procedure:

```sql
BEGIN
    DBMS_JOB.WHAT(104, 'list_emp;');
END;
```

### 3.6 DBMS_LOB
The `DBMS_LOB` package provides the capability to operate on large objects. The following table lists the supported functions and procedures:

| Function/Procedure | Return Type | Description |
|--------------------|-------------|-------------|
| `APPEND(dest_lob IN OUT, src_lob)` | n/a | Appends one large object to another. |
| `COMPARE(lob_1, lob_2, [amount], [offset_1], [offset_2])` | `INTEGER` | Compares two large objects. |
| `CONVERTOBLOB(dest_lob IN OUT, src_clob, amount, dest_offset IN OUT, src_offset IN OUT, blob_csid, lang_context IN OUT, warning OUT)` | n/a | Converts character data to binary. |
| `CONVERTTOCLOB(dest_lob IN OUT, src_blob, amount, dest_offset IN OUT, src_offset IN OUT, blob_csid, lang_context IN OUT, warning OUT)` | n/a | Converts binary data to character. |
| `COPY(dest_lob IN OUT, src_lob, amount, [dest_offset], [src_offset])` | n/a | Copies one large object to another. |
| `ERASE(lob_loc IN OUT, amount IN OUT, [offset])` | n/a | Erases a large object. |
| `GET_STORAGE_LIMIT(lob_loc)` | `INTEGER` | Gets the storage limit for large objects. |
| `GETLENGTH(lob_loc)` | `INTEGER` | Gets the length of the large object. |
| `INSTR(lob_loc, pattern, [offset], [nth])` | `INTEGER` | Gets the position of the nth occurrence of a pattern in the large object starting at offset. |
| `READ(lob_loc, amount IN OUT, offset, buffer OUT)` | n/a | Reads a large object. |
| `SUBSTR(lob_loc, [amount], [offset])` | `RAW`, `VARCHAR2` | Gets part of a large object. |
| `TRIM(lob_loc IN OUT, newlen)` | n/a | Trims a large object to the specified length. |
| `WRITE(lob_loc IN OUT, amount, offset, buffer)` | n/a | Writes data to a large object. |
| `WRITEAPPEND(lob_loc IN OUT, amount, buffer)` | n/a | Writes data from the buffer to the end of a large object. |

Advanced Server's implementation of `DBMS_LOB` is a partial implementation compared to Oracle's version. Only those functions and procedures listed in the table above are supported.

The following table lists the public variables available in the package:

| Public Variables | Data Type | Value |
|------------------|-----------|-------|
| `compress_off` | `INTEGER` | 0 |
| `compress_on` | `INTEGER` | 1 |
| `deduplicate_off` | `INTEGER` | 0 |
| `deduplicate_on` | `INTEGER` | 4 |
| `default_csid` | `INTEGER` | 0 |
| `default_lang_ctx` | `INTEGER` | 0 |
| `encrypt_off` | `INTEGER` | 0 |
| `encrypt_on` | `INTEGER` | 1 |
| `file_readonly` | `INTEGER` | 0 |
| `lobmaxsize` | `INTEGER` | 1073741823 |
| `lob_readonly` | `INTEGER` | 0 |
| `lob_readwrite` | `INTEGER` | 1 |
| `no_warning` | `INTEGER` | 0 |
| `opt_compress` | `INTEGER` | 1 |
| `opt_deduplicate` | `INTEGER` | 4 |
| `opt_encrypt` | `INTEGER` | 2 |
| `warn_inconvertible_char` | `INTEGER` | 1 |

In the following sections, lengths and offsets are measured in bytes if the large objects are `BLOBs`. Lengths and offsets are measured in characters if the large objects are `CLOBs`.

### 3.6.1 APPEND
The `APPEND` procedure provides the capability to append one large object to another. Both large objects must be of the same type.

#### Procedure Signature
- `APPEND(dest_lob IN OUT { BLOB | CLOB }, src_lob { BLOB | CLOB })`

#### Parameters
- **dest_lob**: The destination large object to which the source large object will be appended.
- **src_lob**: The source large object to be appended to the destination large object.