title:Droplet: Decentralized Authorization and Access Control for Encrypted
Data Streams
author:Hossein Shafagh and
Lukas Burkhalter and
Sylvia Ratnasamy and
Anwar Hithnawi
Droplet: Decentralized Authorization and 
Access Control for Encrypted Data Streams
Hossein Shafagh and Lukas Burkhalter, ETH Zurich; Sylvia Ratnasamy, 
UC Berkeley; Anwar Hithnawi, ETH Zurich & UC Berkeley
https://www.usenix.org/conference/usenixsecurity20/presentation/shafagh
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Droplet: Decentralized Authorization and Access Control for
Encrypted Data Streams
Hossein Shafagh
ETH Zurich
Lukas Burkhalter
ETH Zurich
Sylvia Ratnasamy
UC Berkeley
Anwar Hithnawi
UC Berkeley & ETH Zurich
Abstract
This paper presents Droplet, a decentralized data access con-
trol service. Droplet enables data owners to securely and
selectively share their encrypted data while guaranteeing data
conﬁdentiality in the presence of unauthorized parties and
compromised data servers. Droplet’s contribution lies in cou-
pling two key ideas: (i) a cryptographically-enforced access
control construction for encrypted data streams which enables
users to deﬁne ﬁne-grained stream-speciﬁc access policies,
and (ii) a decentralized authorization service that serves user-
deﬁned access policies. In this paper, we present Droplet’s
design, the reference implementation of Droplet, and the ex-
perimental results of three case-study applications deployed
with Droplet: Fitbit activity tracker, Ava health tracker, and
ECOviz smart meter dashboard, demonstrating Droplet’s ap-
plicability for secure sharing of IoT streams.
1 Introduction
The growing adoption of IoT has led to an ever-increasing
number of applications that collect sensitive user data. This
growth has come with mounting concerns over data privacy.
To date, the norm has been that user data is collected and
governed by application providers, e.g., Fitbit/Strava. The
problem with this status quo is that, because data lives in
narrow and disjoint silos, it severely limits a user’s abil-
ity to control access to her data, extract additional value
from it, or move data across applications. This problem
has led many – from both the technical and non-technical
communities – to call for a new user-centric model for
IoT services, in which the storage of user data is decou-
pled from the application logic, and control over access to
this data is in the hands of end-users rather than service
providers [30, 70, 106, 109, 110].
However, if we are to realize this paradigm, we need system
designs that tackle data privacy as a ﬁrst-class citizen, while
ensuring users ability to securely, selectively, and ﬂexibly
grant data access to third-party services1. Realizing such
ﬂexible yet secure access control is key if we are to extract
insightful value from user data, e.g., drive large-scale analytics
from IoT data.
Such access control must ideally provide the following
properties: (i) strong data conﬁdentiality and integrity, with
cryptographic guarantees, accompanied with efﬁcient crypto-
graphic operations. This is particularly essential in the context
of resource-constrained IoT devices and the high volumes
of data they generate. (ii) ﬁne-grained access control; spec-
ify who can access what temporal segment of a data stream.
(iii) no trusted intermediaries; systems today rely heavily on
trusted intermediaries, e.g., for delegated access, rendering
them trust bottlenecks. In addition to the above, any solu-
tion must satisfy standard access control requirements, e.g.,
support for revocation and auditability.
No existing solution simultaneously provides all of the
above properties. The de-facto standard deployments to-
day [10, 33, 54, 75, 98] rely on trusted services (e.g., access
control lists [96], Active Directory [37], OAuth [75]) and
assume that the entity which enforces access control – e.g.,
Fitbit or a storage provider – is within the data owner’s trusted
domain and consequently can see the data in the clear. How-
ever, this approach does not meet our goals of user-centric
control; in fact, as many have argued [32,73,94,101,106,113],
this approach fails to provide even basic data privacy since
the provider sees data in cleartext and consequently can share
or sell data without user consent [40, 104].
The alternative to the above approach is to rely on end-
to-end encryption [47, 86, 88, 93, 94, 106, 113]; where data
is encrypted at the user device and stored encrypted at the
storage provider; encryption/decryption is only executed at
authorized parties and services, without disclosing any en-
cryption keys to intermediaries. This, however, introduces the
challenge of selective sharing of encrypted data, i.e., support-
ing ﬂexible access control policies. Solutions adopted today
for sharing encrypted data [59, 65, 102] fall short in expres-
1Note that users can delegate control to a third-party provider just like
today - this is permissible, just not the de-facto model.
USENIX Association
29th USENIX Security Symposium    2469
siveness (i.e., allowing ﬁne-grained access policies), ﬂexibility
(i.e., updates to access permissions), and usability (i.e., key
management and revocation). For instance, a common ap-
proach is encrypting data under each data consumer’s public
key; this approach suffers from hard-coded policies [73, 112],
and does not scale for high-volume and high-velocity data
streams. Moreover, in many cases, this solution is not viable,
since data consumers are not necessarily known in advance,
as is the case in the IoT’s publish-subscribe model [62].
The main question and the focus of this paper is: how to
realize a decentralized access control in a user-centric archi-
tecture? A solution to access control has two parts: (i) data
protection (e.g., encrypting data such that a principal can only
access the authorized data segment), and (ii) authorization
(e.g., verifying the identity of a principal and authenticity of
access permissions).
In this paper, we devise a new system architecture and a
crypto-based data access construction to address the above
problems. Droplet builds on three insights. The ﬁrst is that
access control and authorization need to be co-designed for
end-to-end encrypted systems. The second insight is that time
is the natural dimension of accessing data streams. Hence,
we design our access control with time as a prime access
principle. The third is that there is a need for decentral-
ized authorization services that operate without relying on
trusted intermediaries. This is a difﬁcult requirement, which
we address with replicated state machines. Such append-only
distributed logs as underlying for example the certiﬁcate trans-
parency [71] or blockchains, provide guarantees about the ex-
istence and status of a shared state in an environment, where
no single trusted intermediary is in charge and control, pro-
viding a virtual global witness to prevent equivocation [105].
While blockchains provide an alternative trust model, their
use comes with challenges. Currently deployed blockchains
exhibit a high overhead and low bandwidth due to their con-
sensus protocols. While read operations are fast, chain-writes
are inherently slow. Hence, a key challenge is to bypass these
limitations. We design Droplet such that blockchain opera-
tions are not on the critical path of reading and writing data;
we store the absolute minimum control metadata in the block-
chain and outsource data streams and metadata to off-chain
storage, by leveraging indirections. This design minimizes
the bandwidth requirements on the blockchain, and allows for
lightweight clients, which only retrieve block headers and the
accompanied compact Merkle proofs. Droplet’s authorization
service leverages an existing public blockchain to maintain a
replicated access control state machine. This design allows
any node to independently bootstrap the authorization state
in a decentralized manner and check the access permissions
(i.e., ensuring discoverability of access permissions without
any out-of-band communication). Access permissions are
cached at the storage node for their hosted content, allowing
low latency lookups of access permissions.
To realize the crypto-based access control in Droplet; de-
vices encrypt and sign their data locally. Data owners regis-
ter ownership of data streams and deﬁne privacy-preserving
access permissions through Droplet’s authorization service.
Only authorized principals are cryptographically capable of
accessing (i.e., decrypting) authorized data segments. We de-
sign a novel key distribution and management construction to
enable efﬁcient key updates (i.e., succinct – key size is inde-
pendent of the granted data access range) and ﬁne-grained yet
scalable sharing of both arbitrary temporal ranges and open-
ended streams. Our design builds on key regression and hash
trees via a layered encryption technique. In summary, Droplet
ensures data owner’s sovereignty and ownership over their
data, such that they maintain the ultimate power to selectively
and ﬂexibly share their data.
With a prototype implementation2 of Droplet, we quantify
Droplet’s overhead and compare its performance to the state-
of-the-art systems. When deploying Droplet with Amazon’s
S3 as a storage layer, we experience a slowdown of only 3%
in request throughput compared to the vanilla S3. Moreover,
we show Droplet’s potential as an authorization service for the
serverless paradigm with an AWS Lambda-based prototype.
We show Droplet’s performance is within the range of the
industry-standard protocol for authorization (OAuth2). We
also deploy Droplet with a decentralized storage layer to give
insights about its potential for the emerging decentralized
storage services [65, 102]. With our example apps on top of
Droplet, we show that real-world applications with unaltered
user-experience (i.e., perceived delay) can be developed.
• Droplet, a new decentralized authorization service that en-
ables secure sharing of encrypted data and works without
trusted intermediaries.
• a new crypto-enforced access control construction that
provides ﬂexible and ﬁne-grained access control over en-
crypted data streams with succinct key states.
• a design that couples authorization with crypto-enforced
access to mitigate the limitations of current authorization
services (lack of cryptographic guarantees) and end-to-end
encrypted data (static policies).
• an open-source prototype and evaluation of Droplet show-
In summary, our contributions are:
ing its feasibility, and competitive performance.
2 Droplet’s Overview
Droplet’s main objective is to empower users with full con-
trol (ownership) over their data while ensuring data conﬁ-
dentiality. More concretely, we want to facilitate ﬂexible and
ﬁne-grained secure sharing of encrypted data without ever
exposing the data in the clear to any intermediaries includ-
ing the storage and authorization services. We deﬁne data
ownership as having the right and control over data, wherein
the owner can deﬁne/restrict access, restrict the scope of data
utility (e.g., sharing aggregated/homomorphically-encrypted
2Droplet is available under https://dropletchain.github.io/
2470    29th USENIX Security Symposium
USENIX Association
data), delegate these privileges, or give up ownership entirely
without the need to rely on any trusted entities to facilitate
this. A true realization of this deﬁnition requires work on two
fronts: (i) privacy-preserving computation (i.e., differential
privacy and secure computation) and (ii) secure and privacy-
preserving access control of remotely stored data with strong
conﬁdentiality guarantees. In this work, we focus on the latter,
speciﬁcally in the context of data streams.
2.1 Droplet in a Nutshell
At a high level, Droplet is a decentralized access control sys-
tem that enables users to securely and selectively share their
data streams with principals. Droplet’s design marries a novel
crypto-enforced access control construction tailored for time-
series data and a decentralized authorization service. Our
crypto-enforced access control construction enables users to
express ﬂexible stream access control policies (§3). The key
idea behind our encryption-based access control is to serialize
time series data into chunks where each chunk corresponds to
a time segment and is encrypted with a unique encryption key.
The challenge here becomes how to efﬁciently generate and
manage a large number of unique encryption keys and allow
expressing access polices with a minimum shared state that
is then used to derive all decryption keys associated with the
access policy. To address this speciﬁc challenge, we introduce
a novel key management construction with a succinct key
state, i.e., the key size does not grow with the temporal range
of shared data (§3). Although crypto-based access control is
powerful, it is not sufﬁcient by itself, as it does not adequately
handle authorization and revocation. To address this issue,
we introduce a decentralized authorization service (§4) that
interplays with our crypto-based access control construction.
Consequently, data owners are not required to exchange
any encryption keys directly with data consumers. Our de-
centralized authorization, in its essence, is similar to OAuth2.
However, we realize the access control state machine on top of
an existing blockchain (§4.2), and eliminate the need for trust
intermediates on which OAuth2 realizations heavily depend.
The access control state machine assembles the current global
state (i.e., access permissions and data ownership) through
embedded private state transitions.
2.2 Security Model
Threat model. (i) Data storage: we consider an adversary
who is interested in learning about users’ data. Our threat
model covers malicious storage nodes, potential real-world
security vulnerabilities leading to data leakages, and also ex-
ternal adversaries who gain access to data as a result of system
compromise. (ii) Access Permissions State: an adversary may
access and bootstrap the access control state machine, but it
cannot alter or learn sensitive information about the access per-
missions (e.g., sharing relationships or keying material). For
an adversary to alter the access permission states, it needs to
break the security of the underlying blockchain. The standard
Figure 1: Abstract protocol ﬂow. Data is E2E encrypted with
encryption-based access control. The data owner stores access
permission updates in the decentralized authorization log. The
storage service validates access requests based on the access
permissions from the access control state machine.
blockchain threat model assumes that an adversary cannot
control a large percentage of nodes in the network, for the
blockchain to be considered secure. The actual ratio depends
on the deployed consensus protocol by the underlying block-
chain. For instance, given n blockchain nodes and f adversary
nodes, a ratio of n = 2 f + 1 for Nakamoto-style consensus
mechanisms [79] or n = 3 f + 1 for PBFT consensus mecha-
nisms [16] is required for the honest majority.
Guarantees. Droplet embodies a decentralized encryption-
based access control mechanism that enables secure and selec-
tive access to stream data within the above-discussed threat
model. Data is encrypted at the client-side, and keys are at