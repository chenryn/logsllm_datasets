### 优化后的文本

#### 算法描述
1. **签名生成**:
   \[
   R \leftarrow Z^* \\
   R \leftarrow Z^* \\
   (r_{2l}, 0) \mod n \\
   \text{Asig}(SK_t, M, \sigma_{1,t-1}) \quad (t = 1, \ldots, T \text{ and } \sigma_{1,0} = 1)
   \]
   设 \( SK_t = (n, T, t, s_t, r_t) \):
   \[
   c \leftarrow H(t, y, M) \\
   z_t \leftarrow r_t \cdot s_c \\
   \sigma_{1,t} \leftarrow \sigma_{1,t-1} \cdot z_t \mod n \\
   \text{return} \langle t, (\sigma_{1,t}) \rangle
   \]

2. **密钥更新**:
   \[
   \text{Upd}(SK_{t-1}) \quad (t = 2, \ldots, T)
   \]
   设 \( SK_{t-1} = (n, T, t-1, s_{t-1}, r_{t-1}) \):
   \[
   \text{return} SK_t = (n, T, t, s_{2l}^{t-1}, r_{2l}^{t-1})
   \]

3. **聚合验证**:
   \[
   \text{Aver}(PK, M_1, \ldots, M_t, \langle t, (\sigma_{1,t}, y) \rangle)
   \]
   设 \( PK = (n, T, u, y) \):
   \[
   \text{for } j = t \ldots 1, \text{ do:}
   \]
   - 计算 \( c_j \leftarrow H(j, y, M_j) \)
   - 如果 \( j = t \), 则计算 \( \sigma' \leftarrow \sigma_{2l}^{(T+1-t)} \)
   - 否则, 计算 \( \sigma' \leftarrow \sigma'^{2l} \cdot y \cdot u^{c_j} \)
   \[
   \text{if } \sigma' = 1 \text{ then return 1 else return 0}
   \]

#### 性能评估
1. 聚合签名的大小
2. 秘密密钥的大小
3. 秘密密钥更新的复杂度（在线）
4. 聚合签名生成的复杂度（在线）
5. 密钥生成的复杂度（离线）
6. 公开密钥的大小
7. 聚合验证的复杂度（在线）

前五个参数表示签名者的效率，后两个参数表示验证者的效率。公开密钥和秘密密钥的大小对应于空间效率，而签名、验证和密钥更新的复杂度对应于时间效率。我们认为签名者的效率比验证者的效率更重要，空间效率比时间效率更重要。

在设想的应用场景中，例如审计和数据收集系统，签名者是进行实时操作并以高速率生成/收集数据的监控或数据收集设备。它们可能具有有限的存储设施和有限的电力（例如，在无人值守环境中运行的电池供电传感器）。相比之下，验证者被认为是强大的实体（例如服务器或汇聚节点），负责收集和验证由前述设备生成/收集的数据。它可以在离线状态下执行这些任务。

我们用 \( Z_n^* \) 中的元素数量来评估大小参数，并用基本密码学操作来评估时间参数。\( Sqtt(m) \) 表示 \( t \) 次模平方运算，\( Multt(m) \) 表示 \( t \) 次模乘法运算，模数大小为 \( m \)。我们估计一次模幂运算 \( Exp1_l(m) \) 的指数大小为 \( l \)，模数大小为 \( m \)，大约等于 \( l \) 次模平方运算和 \( l/2 \) 次模乘法运算：\( Exp1_l(n) = Sqtl(n) + Multl/2(n) \)。实际上，模平方运算比模乘法运算快得多。评估结果如表 8.1 所示。两种方案都有常量大小的参数。签名者的计算（密钥更新和聚合签名生成）是常量，而验证者的计算（聚合验证）需要 \( O(T) \) 复杂度。

AR-F ssAgg1 具有较小的公开密钥和秘密密钥；它只需要 2 个存储单位用于签名者和验证者。BM-F ssAgg1 需要 \( l + 1 \) 个存储单位用于签名者和验证者。BM-F ssAgg1 在密钥更新、签名生成和验证中需要较少的平方和乘法运算，因此在计算上更高效。我们建议在计算和通信是首要优先级的应用中使用它。

### 实现
我们在配备 Intel 双核 1.73GHz CPU 和 1GB RAM 的 Linux 笔记本电脑上实现了这两种方案。我们使用 Shoup 的 NTL 库 [1] 实现了 BM-F ssAgg1 和 AR-F ssAgg1。我们将安全参数固定为 \( k = 1024 \) 和 \( l = 160 \)。为了比较，我们还使用 Stanford PBC 库 [2] 在相同的硬件平台上实现了 BLS-F ssAgg 方案。我们使用定义在域 \( F_q \) 上的奇异曲线 \( Y^2 = X^3 + X \)，其中 \( |q| = 512 \) 且群阶 \( |p| = 160 \)，\( p \) 是 Solinas 素数。这样的群具有最快的配对运算 [2]。我们通过每条消息的签名生成和密钥更新来衡量签名者的成本。我们通过对聚合签名 \( \sigma_{1,t} \) 进行测量，当 \( t = 100, 1000 \) 和 \( 10000 \) 时，分别对应小、中和大数据集。结果如表 8.2 所示。

尽管两种方案中的密钥更新需要更多的计算，但我们的方案中的聚合签名生成所需的计算量远少于 BLS-F ssAgg。因此，签名者的成本（每条消息）——一次聚合、一次签名操作加上一次密钥更新——在我们的方案中比 BLS-F ssAgg 更低。具体来说，BM-F ssAgg1 和 AR-F ssAgg1 的签名者计算每条消息的速度分别是 BLS-F ssAgg 的 6 倍和 3 倍。新方案中的验证者计算也比 BLS-F ssAgg 少：分别是 16 倍和 4 借更快。

### 结论
新的 F ssAgg1 方案在几乎所有参数上都优于现有的 BLS-F ssAgg 方案。在两个新方案中，BM-F ssAgg1 在计算上更高效，而 AR-F ssAgg1 在存储上更高效。它们在通信效率上相同。

### 讨论
跨用户聚合和验证。聚合验证可以多快？我们可以实现常量时间的聚合验证吗？到目前为止，所有聚合签名（包括我们的方案）都需要 \( O(T) \) 的聚合验证时间。（尽管 LOSSW [19] 中的聚合验证只需要两次配对操作，无论有多少个时间段或签名者，但它确实需要 \( O(T) \) 次乘法运算。）请注意，我们的聚合验证函数中的第一次迭代的成本占总成本的主要部分，因为它需要 \( O(T) \) 次操作。减少聚合验证成本的一种可能方法是首先从多个签名者聚合 F ssAgg 签名，然后验证这个超级聚合签名，从而在多个用户之间分摊第一次迭代的成本。

从 F ssAgg1 到 F ssAggm。我们可以简单地扩展我们的 F ssAgg1 方案，使其成为 F ssAggm 方案，代价是增加秘密密钥和公开密钥的大小。设 \( m \) 为每个时间段内生成的最大消息数量。在密钥生成阶段，我们选择 \( m \) 个随机数 \( r_{0,1}, \ldots, r_{0,m} \) 并计算对应的 \( m \) 个公共承诺 \( y_1, \ldots, y_m \)，使得 \( y_i = r_{2T+1}^{0,1} \)。我们使用 \( y_i \) 生成第 \( i \) 条消息的挑战。因此，通过额外的 \( m \) 个存储单元，我们可以支持多达 \( mT \) 条消息。

### 致谢
作者感谢她的博士导师 Gene Tsudik 教授对她论文最终版本的支持和帮助。作者还要感谢 Guilin Wang 博士对所提方案的安全性分析。此外，作者感谢匿名审稿人的宝贵意见。

### 参考文献
[1] NTL: A Library for Doing Number Theory.
<http://www.shoup.net/ntl/>

[2] PBC Library Benchmarks.
<http://crypto.stanford.edu/pbc/times.html>

[3] M. Abdalla and L. Reyzin. A New Forward-Secure Digital Signature Scheme. In Asiacrypt 2000, pages 116–129, 2000.

[4] R. Anderson. Two Remarks on Public-Key Cryptology - Invited Lecture. In Fourth ACM Conference on Computer and Communications Security (CCS), April 1997.

[5] M. Bellare and S. K. Miner. A Forward-Secure Digital Signature Scheme. In Proc. of Advances in Cryptology - Crypto 99, pages 431–448, August 1999.

[6] M. Bellare and B. Yee. Forward Integrity for Secure Audit Logs. In Technical Report, Computer Science and Engineering Department, University of San Diego, November 1997.

[7] M. Bellare and B. Yee. Forward-Security in Private-Key Cryptography. In Proc. of CT-RSA’03, 2003.

[8] D. Boneh, C. Gentry, B. Lynn, and H. Shacham. Aggregate and Verifiably Encrypted Signatures from Bilinear Maps. In Proc. of Eurocrypt 2003, pages 416–432, May 2003.

[9] D. Boneh, B. Lynn, and H. Shacham. Short Signatures from the Weil Pairing. In Asiacrypt, volume 2248 of Lecture Notes in Computer Science, 2001.

[10] X. Boyen, H. Shacham, E. Shen, and B. Waters. Forward-Secure Signatures with Untrusted Update. In ACM CCS’06, October 2006.

[11] A. Fiat and A. Shamir. How to Prove Yourself: Practical Solutions to Identification and Signature Problems. In Advances in Cryptology - CRYPTO’86, pages 186–194, August 1986.

[12] C. G. Günther. An Identity-Based Key-Exchange Protocol. In EUROCRYPT ’89: Proceedings of the Workshop on the Theory and Application of Cryptographic Techniques on Advances in Cryptology, pages 29–37, New York, NY, USA, 1990. Springer-Verlag New York, Inc.

[13] J. E. Holt. Logcrypt: Forward Security and Public Verification for Secure Audit Logs. In ACSW Frontiers ’06: Proceedings of the 2006 Australasian Workshops on Grid Computing and e-Research, pages 203–211, Darlinghurst, Australia, 2006. Australian Computer Society, Inc.

[14] G. Itkis. Forward Security (Adaptive Cryptography: Time Evolution). Handbook of Information Security, 2006.

[15] G. Itkis and L. Reyzin. Forward-Secure Signatures with Optimal Signing and Verifying. In CRYPTO ’01: Proceedings of the 21st Annual International Cryptology Conference on Advances in Cryptology, pages 332–354, London, UK, 2001. Springer-Verlag.

[16] A. Kozlov and L. Reyzin. Forward-Secure Signatures with Fast Key Update. In Proc. of the 3rd International Conference on Security in Communication Networks (SCN’02), 2002.

[17] H. Krawczyk. Simple Forward-Secure Signatures from Any Signature Scheme. In Proc. 7th ACM Conference on Computer and Communication Security (CCS), pages 108–115, November 2000.

[18] B. Libert, J. J. Quisquater, and M. Yung. Forward-Secure Signatures in Untrusted Update Environments: Efficient and Generic Constructions. In ACM CCS’07, Oct 2007.

[19] S. Lu, R. Ostrovsky, A. Sahai, H. Shacham, and B. Waters. Sequential Aggregate Signatures and Multisignatures without Random Oracles. In Prof. of Eurocrypt 2006, May 2006.

[20] A. Lysyanskaya, S. Micali, L. Reyzin, and H. Shacham. Sequential Aggregate Signatures from Trapdoor Permutations. In Proc. of Eurocrypt 2004, pages 245–254, November 2001.

[21] D. Ma and G. Tsudik. Forward-Secure Sequential Aggregate Authentication. In Proceedings of IEEE Symposium on Security and Privacy 2007, May 2007.

[22] T. Malkin, D. Micciancio, and S. Miner. Efficient Generic Forward-Secure Signatures with an Unbounded Number of Time Periods. In Proc. of Eurocrypt (Eurocrypt’02), 2002.

[23] B. Schneier and J. Kelsey. Cryptographic Support for Secure Logs on Untrusted Machines. Proceedings of the 7th USENIX Security Symposium, Jan. 1998.

[24] B. Schneier and J. Kelsey. Secure Audit Logs to Support