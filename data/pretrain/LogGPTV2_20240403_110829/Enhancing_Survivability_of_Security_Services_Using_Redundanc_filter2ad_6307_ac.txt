event handlers and an initialization  section. One of the event 
handlers is used for the data passing down through the Sec- 
Comm protocol  and the other one is used  for data passing 
up  through  the  protocol.  The  initialization  section  of  the 
micro-protocol  is executed when  a new SecComm connec- 
tion is opened, i.e., when a session is created. 
A basic security micro-protocol (figure 3) typically takes 
4 or 5 arguments.  In  this  parameter  list,  dEvnt and  uEvnt 
are events that  signify message  arrival from an  upper-  and 
lower-level protocol, respectively.  The two handlers in  the 
micro-protocol are bound  to these events to initiate  execu- 
tion  at the appropriate time.  The dOrd and  uOrd  parame- 
ters are the relative orders in  which  this particular  security 
micro-protocol is  to be applied to messages  flowing down 
and up, respectively.  Finally,  key is  an  index  in  the  Keys 
data structure. The key argument is omitted from basic  se- 
curity micro-protocols that do not use  keys, such as replay 
prevention. 
Note that if the key  used by  the security micro-protocol 
has  yet  not  been  established,  it  raises  the  event  keyMiss 
that  is  handled  by  the  key  distribution  micro-protocols. 
This event is raised  synchronously and thus, the handler is 
blocked until the associated event handlers have completed 
execution. This allows the key distribution micro-protocols 
to block  the appropriate handler until  the key  has been  es- 
tablished. 
The design  uses event pointers as arguments rather than 
fixed event names to allow multiple types of configurations, 
an  approach  that demonstrates  the  inherent flexibility  pro- 
vided  by  an  event-based  execution  model.  As  the  most 
simple  case,  assume  that  a  SecComm  configuration  uses 
only basic security micro-protocols.  The configuration  can 
then  be  initialized  to use  the msgFromAbove and  dataMs- 
gFromBelow events directly as follows: 
BasicSecurity(msgFromAbove, I ,dataMsgFromBelow, 1,0) 
As  a complex example  involving redundant  application of 
encryption, the same mechanism can be used  to easily cre- 
ate a variant of triple DES, as follows: 
DESPrivacy(msgFromAbove, I ,dataMsgFromBelow, I ,0) 
DESPrivacy(dataMsgFromBelow,2,msgFromA bove,2, I) 
DESPrivacy(msgFromA bo ve, 3, dataMsgFrom Belo w, 3,O) 
This variant  exploits the  fact that  our DESPrivacy  micro- 
protocol  encrypts messages  associated  with  dEvnt and de- 
crypts  messages  associated  with  uEvnt  to  realize  the  ap- 
propriate  triple  DES  semantics.  Note,  however,  that  this 
variation is not identical to standard 3DES since the whole 
message is encrypted completely by  one method  at a time, 
whereas 3DES encrypts each block of a message with each 
of the three encryption methods before the next block is pro- 
cessed. A version that uses different algorithms in sequence 
could be done similarly. 
Meta-security  micro-protocols. 
In  this  design,  meta- 
security  micro-protocols  construct  more  complex  security 
protocols out of  the basic  security protocols, and are a key 
feature enabling redundancy for survivability. For example, 
a  meta-security  micro-protocol  may  apply  multiple  or  al- 
ternating basic security micro-protocols  to a message.  The 
178 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:03:17 UTC from IEEE Xplore.  Restrictions apply. 
micro-protocol MetaSecurity(dE vnt,dOrd, uEvnt, uOrd, 
dBasicEvnts,uBasicEvnts) { 
handler ProcessDownMsg(msg){ 
in some order raise(dBasicEvnts[i],msg,SYNC); 
1 
handler Process UpMsg(msg){ 
in some order raise(uBasicEvnts[i],msg,SYNC), 
1 
initial { 
bind(dE vn t, ProcessDo wn Msg, dOrd); 
bind( uE vnt,Process UpMsg,uOrd); 
1 
1 
Figure 4. Generic meta-security MP. 
basic  structure  of a meta-security  micro-protocol is  shown 
in figure 4. 
Examples of the use of meta-security micro-protocols in- 
clude: 
MultiSecurity.  Applies multiple basic  security  proto- 
cols to a message in sequence. 
AltSecurity.  Applies  one  security  micro-protocol to 
each  message,  with  the  method  chosen  successively 
from  a  specified  list.  If  the  sequence of  methods  is 
deterministic,  or  agreed  by  the  sender  and  receiver, 
no additional information  is required provided that the 
underlying  communication  is  reliable  and  maintains 
FIFO ordering. 
RandomAltSecurity. Similar to AltSecurity  but uses a 
randomly chosen method for each message. Each mes- 
sage must  carry an  identifier than  can  be used  by  the 
receiver to determine which  method to use to decrypt 
the message. 
A  meta-security  micro-protocol can  also be configured  to 
use other meta-security  micro-protocols.  For example, we 
can create a configuration  that  applies alternating  different 
multiple encryption  methods to each message. 
A final example meta-security  micro-protocol is Expan- 
sionsecurity, which breaks the message body into two parts 
by using bit masks so that the original message is equivalent 
to part one xor part two. It then applies one security micro- 
protocol  to  part  one and another to  part  two.  This makes 
it very difficult for the intruder to break the security unless 
they can break both at the same time. 
The  concept  of  meta-security  micro-protocols can  be 
applied  to  increase  the  survivability  of  any  security  prop- 
erty  for which  using  multiple  or alternating methods pro- 
vides enhanced guarantees.  Privacy, authenticity, and mes- 
sage integrity  among others fall  in  this category.  The Sec- 
Comm design  does not  prevent  the  same idea from being 
used for other properties such as replay prevention  and non- 
repudiation, but the benefit for such properties is more ques- 
tionable.  Finally, note  that the ease with  which  such meta- 
security micro-protocols can be constructed is again a direct 
result of flexibility provided by  the Cactus model. 
Key  distribution micro-protocols.  If  the  keys  used  by 
the  secret  key cryptographic methods are not  agreed upon 
a priori, they must be established after the communication 
session is opened. Among the potential  options for key dis- 
tribution are: 
Asymmetric.  One  communicating  principal  (e.g.,  a 
client or a server) creates a session  key and distributes 
it to the other principals. 
Symmetric. A session key  is created using the Diffie- 
Hellman  algorithm. 
External. Some external security principal creates the 
session key and distributes it to communicating princi- 
pals (e.g., Kerberos, certification authority). 
Key  distribution  has  security  risks  analogous  to  data 
communication, but with greater potential  impact since the 
compromised key  will  likely  be  used  for a period  of time. 
Thus, the same redundancy techniques used  for data secu- 
rity  can also often  be  applied  for key  distribution  security. 
Multiple key distribution  micro-protocols can also be used 
to obtain keys redundantly. 
Redundancy  and  key  distribution  can  mix  in  different 
ways.  For example, relying on redundant trusted arbitrators 
to obtain a key  in an external scheme can avoid some of the 
problems that occur if  a single arbitrator is used  and com- 
promised. Moreover, if the multiple arbitrators are thought 
to be vulnerable to the same attack, different algorithms can 
be used. This is another instance when the tradeoff between 
survivability and cost can be tuned. 
In  the  above, the  multiple  methods are  used  collabora- 
tively  to obtain the same key. The scheme can also be used 
to  collect  different  keys,  however.  The  simplest  scenario 
has each  key  assigned to  a  separate  basic  security  micro- 
protocol.  A  more  complex  configuration  would  allocate 
multiple keys to the same micro-protocol,  which could  use 
alternate keys on a message by message basis. 
5  Implementation and Performance 
A  prototype of  SecComm has been  implemented using 
the  C  version  of  Cactus on  two  different clusters.  One  is 
a cluster of  133 MHz Pentium PCs running OpenGroup/RI 
Mach MK 7.3 and  CORDS connected by  a  10 Mb Ether- 
net,  and  the  other  is  a  cluster  of  600  Mhz  Pentium  PCs 
running  Red  Hat  Linux  release  6.2 connected  by  a  I  Gb 
179 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:03:17 UTC from IEEE Xplore.  Restrictions apply. 
Ethernet.  This  section  provides  some initial  performance 
numbers from the Linux cluster and discusses issues related 
to configuring collections of micro-protocols into a custom 
instance of the SecComm service. 
Performance.  The current  prototype  implements a  sub- 
set of the micro-protocols presented  in this paper, including 
privacy micro-protocols based on DES, RSA, IDEA, Blow- 
fish, and XOR, integrity micro-protocols based on MD5 and 
SHA, an  authentication  micro-protocol  based  on  DSA,  a 
time-stamp based replay  prevention  micro-protocol,  a non- 
repudiation  micro-protocol,  and two  meta-security  micro- 
protocols.  Other  basic  security  and  meta-security  micro- 
protocols are currently being added. 
We  have conducted a number of experiments using dif- 
ferent  subsets of micro-protocols.  Table  1 gives roundtrip 
times in milliseconds  for passing  100-byte messages using 
different configurations.  The average roundtrip times were 
computed  over  1000 or  more  roundtrips.  All  SecComm 
configurations use IP, and the system was lightly loaded dur- 
ing testing.  As a baseline,  an average roundtrip  time using 
IP directly  is  1.202 ms.  The entry  for base SecComm re- 
flects  times  for a  skeleton  version  of SecComm  that  does 
not  use  any  micro-protocols;  its  additional  cost  indicates 
the  approximate cost of  adding a new x-kernel  protocol  to 
the  stack.  The cost over IP column indicates the roundtrip 
time  overhead of the  configuration compared to using just 
IP. Similarly, the cost over base column indicates the over- 
head of the configuration compared to just the base. 
In these  tests,  DESPrivacy  uses  a 56-bit key  running in 
CFB mode, BlowfishPrivacy  uses a 448-bit  key  running in 
CFB mode, XORPrivacy uses a 64-bit “key”, and IDEAPri- 
vacy uses a  128-bit key running in CFB mode. The NonRe- 
pudiation  tested  ensures that  messages  are  written  to disk 
before  the  message  is  delivered  to  the  next  level.  Other 
non-repudiation variants that allow delayed write to disk are 
naturally  less expensive. 
The cost over base column provides the most realistic  in- 
dication of the cost of combining multiple micro-protocols. 
For MultiSecurity,  these  numbers  indicate  that  the  cost  is 
roughly equal to the  sum  of  the  costs  associated  with  the 
corresponding micro-protocols.  For example, the overhead 
of  using  MultiSecurity  to  combine  DES  and  Blowfish  is 
0.385  ms,  which  is  actually  slightly  less  than  the  sum  of 
the costs of DES and Blowfish since the cost of using Cac- 
tus mechanisms is amortized over multiple micro-protocols. 
For AltSecurity,  the cost  is  approximately the  same as the 
average cost of the individual micro-protocols. 
Configuration constraints.  A number of factors must be 
considered when micro-protocols are combined into a cus- 
tom  instance of the SecComm service, including  those us- 
ing redundancy to enhance survivability.  In particular, there 
Configuration 
IP 
Base SecComm 
XORPrivacy 
DESPrivacy 
BlowfishPriv. 
IDEAPrivacy 
MDSIntegrity 
SH AIntegrity 
Non-repudiation 
DES + MD5 
MultiSecurity 
DES 
XOR + DES 
DES + Blowfish 
+ XOR 
+ IDEA 
AltSecurity 
DES 
XOR + DES 
DES + Blowfish 
+ XOR 
+ IDEA 
RTT 
1.202 
1.245 
1.365 
1 .SO4 
1.442 
1.511 
1.577 
1.598 
4.075 
1.798 
1.515 
1.599 
1.630 
1.694 
1.963 
1.497 
1.481 
1.511 
1.496 
1.513 
nta 
0.043 
0.302 
0.240 
0.309 
0.375 
0.396 
2.873 
0.596 
0.313 
0.397 