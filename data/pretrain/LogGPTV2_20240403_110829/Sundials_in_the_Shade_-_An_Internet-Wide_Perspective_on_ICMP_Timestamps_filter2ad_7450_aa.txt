title:Sundials in the Shade - An Internet-Wide Perspective on ICMP Timestamps
author:Erik C. Rye and
Robert Beverly
Sundials in the Shade
An Internet-Wide Perspective on ICMP Timestamps
Erik C. Rye(B) and Robert Beverly
Naval Postgraduate School, Monterey, CA, USA
PI:EMAIL, PI:EMAIL
Abstract. ICMP timestamp request and response packets have been
standardized for nearly 40 years, but have no modern practical appli-
cation, having been superseded by NTP. However, ICMP timestamps
are not deprecated, suggesting that while hosts must support them, lit-
tle attention is paid to their implementation and use. In this work, we
perform active measurements and ﬁnd 2.2 million hosts on the Inter-
net responding to ICMP timestamp requests from over 42,500 unique
autonomous systems. We develop a methodology to classify timestamp
responses, and ﬁnd 13 distinct classes of behavior. Not only do these
behaviors enable a new ﬁngerprinting vector, some behaviors leak impor-
tant information about the host e.g., OS, kernel version, and local time-
zone.
Keywords: Network · Time · ICMP · Fingerprinting · Security
1 Introduction
The Internet Control Message Protocol (ICMP) is part of the original Internet
Protocol speciﬁcation (ICMP is IP protocol number one), and has remained
largely unchanged since RFC 792 [21]. Its primary function is to communicate
error and diagnostic information; well-known uses today include ICMP echo to
test for reachability (i.e., ping), ICMP time exceeded to report packet loops (i.e.,
traceroute), and ICMP port unreachable to communicate helpful information
to the initiator of a transport-layer connection. Today, 27 ICMP types are deﬁned
by the IESG, 13 of which are deprecated [11].
Among the non-deprecated ICMP messages are timestamp (type 13) and
timestamp reply (type 14). These messages, originally envisioned to support time
synchronization and provide one-way delay measurements [19], contain three 32-
bit time values that represent milliseconds (ms) since midnight UTC. Modern
clock synchronization is now performed using the Network Time Protocol [18]
and ICMP timestamps are generally regarded as a potential security vulnerabil-
ity [20] as they can leak information about a remote host’s clock. Indeed, Kohno
et al. demonstrated in 2005 the potential to identify individual hosts by varia-
tions in their clock skew [12], while [6] and [4] show similar discriminating power
when ﬁngerprinting wireless devices.
This is a U.S. government work and not under copyright protection in the United States; foreign
copyright protection may apply 2019
D. Choﬀnes and M. Barcellos (Eds.): PAM 2019, LNCS 11419, pp. 82–98, 2019.
https://doi.org/10.1007/978-3-030-15986-3_6
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
type=13/14
code=0
id
checksum
sequence
Sundials in the Shade
83
orig ts
recv ts
xmit ts
Fig. 1. ICMP timestamp message ﬁelds
In this work, we reassess the extent to which Internet hosts respond to
ICMP timestamps. Despite no legitimate use for ICMP timestamps today, and
best security practices that recommend blocking or disabling these timestamps,
we receive timestamp responses from 2.2 million IPv4 hosts in 42,656 distinct
autonomous systems (approximately 15% of the hosts queried) during a large-
scale measurement campaign in September and October 2018. In addition to
characterizing this unexpectedly large pool of responses, we seek to better under-
stand how hosts respond. Rather than focusing on clock-skew ﬁngerprinting, we
instead make the following primary contributions:
1. The ﬁrst Internet-wide survey of ICMP timestamp support and responsive-
ness.
classify responses.
2. A taxonomy of ICMP timestamp response behavior, and a methodology to
3. Novel uses of ICMP timestamp responses, including ﬁne-grained operating
system ﬁngerprinting and coarse geolocation.
2 Background and Related Work
Several TCP/IP protocols utilize timestamps, and signiﬁcant prior work has
examined TCP timestamps in the context of ﬁngerprinting [12]. TCP timestamps
have since been used to infer whether IPv4 and IPv6 server addresses map to
the same physical machine in [2] and combined with clock skew to identify server
“siblings” on a large scale in [24].
In contrast, this work focuses on ICMP timestamps. Although originally
intended to support time synchronization [19], ICMP timestamps have no mod-
ern legitimate application use (having been superseded by NTP). Despite this,
timestamps are not deprecated [11], suggesting that while hosts must support
them, little attention is paid to their implementation and use.
Figure 1 depicts the structure of timestamp request (type 13) and response
(type 14) ICMP messages. The 16-bit identiﬁer and sequence values enable
responses to be associated with requests. Three four-byte ﬁelds are deﬁned:
the originate timestamp (orig ts), receive timestamp (recv ts), and transmit
timestamp (xmit ts). Per RFC792 [21], timestamp ﬁelds encode milliseconds
(ms) since UTC midnight unless the most signiﬁcant bit is set, in which case
the ﬁeld may be a “non-standard” value. The originator of timestamp requests
84
E. C. Rye and R. Beverly
should set the originate timestamp using her own clock; the value of the receive
and transmit ﬁelds for timestamp requests is not speciﬁed in the RFC.
To respond to an ICMP timestamp request, a host simply copies the request
packet, changes the ICMP type, and sets the receive and transmit time ﬁelds.
The receive time indicates when the request was received, while the transmit
time indicates when the reply was sent.
Several prior research works have explored ICMP timestamps, primarily for
fault diagnosis and ﬁngerprinting. Anagnostakis et al. found in 2003 that 93%
of the approximately 400k routers they probed responded to ICMP timestamp
requests, and developed a tomography technique using ICMP timestamps to
measure per-link one-way network-internal delays [1]. Mahajan et al. leveraged
and expanded the use of ICMP timestamps to enable user-level Internet fault
and path diagnosis in [16].
Buchholz and Tjaden leveraged ICMP timestamps in the context of forensic
reconstruction and correlation [3]. Similar to our results, they ﬁnd a wide variety
of clock behaviors. However, while they probe ∼8,000 web servers, we perform
an Internet-wide survey including 2.2M hosts more than a decade later, and
demonstrate novel ﬁngerprinting and geolocation uses of ICMP timestamps.
Finally, the nmap security scanner [15] uses ICMP timestamp requests, in
addition to other protocols, during host discovery for non-local networks in order
to circumvent ﬁrewalls and blocking. nmap sets the request originate timestamp
to zero by default, in violation of the standard [21] (though the user can man-
ually specify a timestamp). Thus, ICMP timestamp requests with zero-valued
origination times provide a signature of nmap scanners searching for live hosts.
While nmap uses ICMP timestamps for liveness testing, it does not use them for
operating system detection as we do in this work.
To better understand the prevalence of ICMP timestamp scanners, we ana-
lyze 240 days of traﬃc arriving at a /17 network telescope. We observe a total
of 413,352 timestamp messages, 93% of which are timestamp requests. Only 33
requests contain a non-zero originate timestamp, suggesting that the remainder
(nearly 100%) are nmap scanners. The top 10 sources account for more than
86% of the requests we observe, indicating a relatively small number of active
Internet-wide scanners.
3 Behavioral Taxonomy
During initial probing, we found signiﬁcant variety in timestamp responses. Not
only do structural diﬀerences exist in the implementation of [21] by timestamp-
responsive routers and end systems (e.g., little- vs big-endian), they also occur
relative to how the device counts time (e.g., milliseconds vs. seconds), the device’s
reference point (e.g., UTC or local time), whether the reply is a function of
request parameters, and even whether the device is keeping time at all.
Table 1. ICMP timestamp classiﬁcation ﬁngerprints
Num Class
Request Response
Sundials in the Shade
85
Normal
Lazy
Checksum-Lazy
Stuck
Constant 0
Constant 1
Constant LE 1
Reﬂection
Non-UTC
Timezone
cksum
Valid
Valid
Bad
valid
Valid
Valid
Valid
Valid
Valid
Valid
Little Endian
Valid
Linux htons() Bug Valid
Unknown
Valid
1
2
3
4
5
6
7
8
9
10
11
12
13
orig ts
-
-
-
-
-
-
-
-
-
-
-
-
-
recv ts
(cid:2)= xmit ts, (cid:2)= 0
= xmit ts
-
const
0
1
htonl(1)
31 − 1
requestrecv ts
>2
|recv ts − orig ts|%
|htonl(recv ts) − orig ts| 2
31 − 1
-
-
16
%2
= 0
-
3.1 Timestamp Implementation Taxonomy
Table 1 provides an exhaustive taxonomy of the behaviors we observe; we term
these the ICMP timestamp classiﬁcations. Note that this taxonomy concerns
only the implementation of the timestamp response, rather than whether the
responding host’s timestamp values are correct.
– Normal: Conformant to [21]. Assuming more than one ms of processing time,
the receive and transmit timestamps should be not equal, and both should
be nonzero except at midnight UTC.
– Lazy: Performs a single time lookup and sets both receive and transmit
timestamp ﬁelds to the same value. A review of current Linux and FreeBSD
kernel source code reveals this common lazy implementation [10,13].
– Checksum-Lazy: Responds to timestamp requests even when the ICMP
checksum is incorrect.
– Stuck: Returns the same value in the receive and transmit timestamp ﬁelds
regardless of the input sent to it and time elapsed between probes.
– Constant 0, 1, Little-Endian 1: A strict subset of “stuck” that always
returns a small constant value in the receive and transmit timestamp ﬁelds.
– Reﬂection: Copies the receive and transmit timestamp ﬁelds from the times-
tamp request into the corresponding ﬁelds of the reply message1.
– Non-UTC: Receive and transmit timestamp values with the most signiﬁcant
bit set. As indicated in [21], network devices that are unable to provide a
timestamp with respect to UTC midnight or in ms may use an alternate time
source, provided that the high order bit is set.
– Linux htons() Bug: Certain versions of the Linux kernel (and Android) con-
tain a ﬂawed ICMP timestamp implementation where replies are truncated
to a 16-bit value; see Appendix A for details.
– Unknown: Any reply not otherwise classiﬁed.
1 We ﬁnd no copying of originate timestamp into the reply’s receive or transmit ﬁelds.
86
E. C. Rye and R. Beverly
3.2 Timekeeping Behavior Taxonomy
We next categorize the types of timestamp responses we observe by what the
host is measuring and what they are measuring in relation to.
– Precision: Timestamp reply ﬁelds should encode ms to be conformant, how-
ever some implementations encode seconds.
– UTC reference: Conformant to the RFC; receive and transmit timestamps
encode ms since midnight UTC.
– Timezone: Replies with receive and transmit timestamps in ms relative to
midnight in the device’s local timezone, rather than UTC midnight.
– Epoch reference: Returned timestamps encode time in seconds relative to
the Unix epoch time.
– Little-Endian: Receive and transmit timestamps containing a correct times-
tamp when viewed as little-endian four-byte integers.
4 Methodology
We develop sundial, a packet prober that implements the methodology
described herein to elicit timestamp responses that permit behavioral classiﬁ-
cation. sundial is written in C and sends raw IP packets in order to set speciﬁc
IP and ICMP header ﬁelds, while targets are randomized to distribute load. We
have since ported sundial to a publicly available ZMap [8] module [22].
Our measurement survey consists of probing 14.5 million IPv4 addresses2
of the August 7, 2018 ISI hitlist, which includes one address per routable /24
network [9]. We utilize two vantage points connected to large academic university
networks named after their respective locations: “Boston” and “San Diego.”
Using sundial, we elicit ICMP timestamp replies from ∼2.2 million unique IPs.
This section ﬁrst describes sundial’s messages and methodology, then our
ground truth validation. We then discuss ethical concerns and precautions under-
taken in this study.
4.1
sundial Messages
In order to generate and categorize each of the response behaviors, sundial
transmits four distinct types of ICMP timestamp requests. Both of our vantage
points have their time NTP-synchronized to stratum 2 or better servers. Thus
time is “correct” on our prober relative to NTP error.
1. Standard: We ﬁll the originate timestamp ﬁeld with the correct ms from
UTC midnight, zero the receive and transmit timestamp ﬁelds, and place the
lower 32 bits of the MD5 hash of the destination IP address and originate
timestamp into the identiﬁer and sequence number ﬁelds. The hash permits
detection of destinations or middleboxes that tamper with the originate times-
tamp, identiﬁer, or sequence number.
2 As IPv6 does not support timestamps in ICMPv6, we study IPv4 exclusively.
Sundials in the Shade
87
2. Bad Clock: We zero the receive and transmit ﬁelds of the request, choose an
identiﬁer and sequence number, and compute the MD5 hash of the destination
IP address together with the identiﬁer and sequence number. The lower 32 bits
of the hash are placed in the originate timestamp. This hash again provides
the capability to detect modiﬁcation of the reply.
3. Bad Checksum: The correct time in ms since UTC midnight is placed
in the originate ﬁeld, the receive and transmit timestamps are set to zero,
and the identiﬁer and sequence number ﬁelds contain an encoding of the
destination IP address along with the originate timestamp. We deliberately
choose a random, incorrect checksum and place it into the ICMP timestamp
request’s checksum ﬁeld. This timestamp message should appear corrupted
to the destination, and a correct ICMP implementation should discard it.
4. Duplicate Timestamp: The receive and transmit timestamps are initial-
ized to the originate timestamp value by the sender, setting all three times-
tamps to the same correct value. The destination IP address and originate