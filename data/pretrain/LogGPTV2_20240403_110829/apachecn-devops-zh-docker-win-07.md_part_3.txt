现在，我在群集中的每个节点上运行一个任务，如果将节点添加到群集中，任务总数将会增加，如果删除节点，任务总数将会减少。这对于您希望为容错而分发的服务非常有用，并且您希望服务的总容量与集群的大小成比例。
全球服务在监控和审计功能中也很有用。如果您有一个集中式监控系统，如 Splunk，或者您正在使用 Elasticsearch Beats 进行基础架构数据捕获，您可以在每个节点上运行一个代理作为全局服务。
借助全局和复制服务，Docker Swarm 提供了扩展应用和维护特定服务级别的基础架构。如果您有固定大小的群，但工作负载可变，这对于内部部署非常有效。您可以上下扩展应用组件来满足需求，前提是它们不都需要同时进行峰值处理。您在云中拥有更大的灵活性，只需向群集中添加新节点，就可以增加集群的总容量，从而使您能够更广泛地扩展应用服务。
跨多个实例大规模运行应用通常会增加复杂性—您需要有一种注册所有活动实例的方法，一种在它们之间分担负载的方法，以及一种监控所有实例的方法，以便在任何实例出现故障时，它们不会收到任何负载。这都是 Docker Swarm 的内置功能，它透明地提供服务发现、负载平衡、容错和自愈应用的基础架构。
# 集群模式下的负载平衡和扩展
Docker 使用 DNS 进行服务发现，因此容器可以通过标准网络找到彼此。应用在其客户端连接配置中使用服务器名称，当应用进行 DNS 查询以找到目标时，Docker 会用容器的 IP 地址进行响应。在 Docker Swarm 中也是如此，当您的目标**服务器**名称实际上可能是一个 Docker 服务的名称，该服务在集群中运行着几十个副本。
Docker 有两种方法来响应管理具有多个副本的服务的 DNS。默认使用 **VIP** :一个**虚拟 IP 地址**。Docker 为服务使用单个 IP 地址，并依靠主机操作系统中的网络栈将 VIP 上的请求路由到实际的容器。VIP 负责负载平衡和健康。服务中的所有健康容器共享请求。这个功能在 Linux 中已经建立很久了，并且是 Windows Server 2019 的新功能。
VIP 的替代方案是**DNS SRR**:**DNS 循环**，您可以在服务配置中的`endpoint_mode`设置中指定。DNSRR 返回服务中所有健康容器的 IP 地址列表，列表的顺序被轮换以提供负载平衡。在 Server 2019 之前，DNSRR 是 Windows 容器的唯一选项，您将在许多示例中看到它，但 VIP 是更好的选项。客户端倾向于缓存域名系统查询响应。使用 DNSRR，您可以更新服务并发现客户端缓存了已被替换的旧容器的 IP 地址，因此它们的连接失败。VIP 不会发生这种情况，因为在域名系统响应中只有一个 IP 地址，客户端可以安全地缓存它，因为它总是会路由到一个健康的容器。
Docker Swarm 负责服务副本之间的负载平衡网络流量，但它也对进入 Swarm 的外部流量进行负载平衡。在新的 NerdDinner 架构中，只有一个组件是可公开访问的——即 **Traefik 反向代理**。我们知道一个端口只能由机器上的一个进程使用，所以这应该意味着我们只能将代理服务扩展到集群中每个节点最多一个容器。但是 Docker Swarm 允许我们过度或不足地提供服务，对零个或多个副本使用机器上的同一个端口。
当您发布端口时，附加到覆盖网络的群服务的行为与标准容器不同。群中的每个节点都监听发布的端口，当收到流量时，它会被定向到一个健康的容器。该容器可以在接收请求的节点上运行，也可以在不同的节点上运行。
在本例中，客户端在标准端口`80`上为在 Docker Swarm 中运行的服务发出 HTTP GET 请求:
![](img/f379e589-aa28-4882-9d1f-d8aa739e6e2f.png)
1.  客户端请求到达没有运行任何服务副本的节点。节点没有监听端口`80`的容器，因此无法直接处理请求。
2.  接收节点将请求转发到群中的另一个节点，该节点有一个容器在端口`80`上侦听——这对于原始客户端来说都是不可见的。
3.  新节点将请求转发到正在运行的容器，容器处理请求并发送响应。
这就是所谓的**入口联网**，这是一个极其强大的功能。这意味着您可以在大型集群上运行低规模服务，或者在小型集群上运行高规模服务，它们将以相同的方式工作。如果服务运行的副本比集群中的节点少，这不是问题，因为 Docker 会透明地将请求发送到另一个节点。如果服务运行的副本比节点多，这不是问题，因为每个节点都可以处理请求，Docker 会在节点上的容器之间负载平衡流量。
Networking in Docker Swarm is a topic that's worth understanding in detail, because it will help you design and deliver scaleable and resilient systems. I have authored a Pluralsight course called **Managing Load Balancing and Scale in Docker Swarm Mode Clusters** that covers all the key topics for Linux and Windows containers.
负载平衡和服务发现都基于健康的容器，这是一个 Docker Swarm 特性，不需要我进行任何特殊的设置。在覆盖网络上以群集模式运行的服务默认为贵宾服务发现和发布端口的入口网络。当我在 Docker Swarm 中运行 NerdDinner 时，我不需要对我的部署进行任何更改来获得生产环境中的高可用性和可扩展性，并且我可以专注于我自己的应用的配置。
# 在 Docker Swarm 中管理应用配置
我花了一些时间在[第 5 章](05.html)、*采用容器优先的解决方案设计*中，在我的 Docker 映像中为 NerdDinner 栈构建了一个灵活的配置系统。其核心原则是将开发的默认配置捆绑到每个映像中，但允许在运行容器时覆盖设置。这意味着我们将在每个环境中使用相同的 Docker 映像，只是交换配置设置来改变行为。
这适用于单个 Docker 引擎，其中我可以使用环境变量来覆盖单个设置和卷装载，以替换整个配置文件。在 Docker Swarm 中，您可以通过配置做更多的事情——使用 Docker 配置对象和 Docker 机密将数据存储在可以传递给容器的群中。这是一种比使用环境变量和文件更整洁的处理配置和敏感数据的方式，但这意味着我仍然在每个环境中使用相同的 Docker 映像。
# 将配置存储在 Docker 配置对象中
群模式中有几个新资源，除了节点和服务，还有栈、机密和配置。配置对象只是在集群中创建的文本文件，并且作为服务容器中的文件出现。它们是管理配置设置的好方法，因为它们为您提供了一个存储所有应用设置的单一位置。
您可以通过两种方式使用配置对象。您可以使用`docker config`命令创建和管理它们，并使它们对 Docker 服务命令和 Docker 编写文件中的服务可用。这种清晰的分离意味着您的应用定义与您的配置是分离的——定义在任何地方都是相同的，并且配置是由 Docker 从环境中加载的。
Docker 在您指定的路径上将配置对象作为文本文件显示在容器中，因此群中可能会有一个名为`my-app-config`的机密显示为`C:\my-app\config\appSettings.config`。Docker 不关心文件内容，所以它可以是 XML、JSON、键值对或其他任何东西。由您的应用来实际处理该文件，这可以是将完整的文件用作配置，或者将文件内容与烘焙到 Docker 映像中的一些默认配置合并。
在我的尼尔丁纳现代化中，我已经搬到了.NET 核心配置框架为我的应用设置。我在所有的中使用相同的`Config`类.NET 框架和。构成网络的核心应用。`Config`类为配置提供程序添加自定义文件位置:
```
public static IConfigurationBuilder AddProviders(IConfigurationBuilder config)
{
  return config.AddJsonFile("config/appsettings.json")
               .AddEnvironmentVariables()
               .AddJsonFile("config/config.json", optional: true)
               .AddJsonFile("config/secrets.json", optional: true);
} 
```
配置提供程序按优先级的逆序列出。首先，它们是从作为应用映像一部分的`config/appsettings.json`文件中加载的。然后，任何环境变量都将被合并进来—添加新的键，或者替换现有键的值。接下来，如果一个文件存在于路径`config/config.json`中，它的内容将被合并——覆盖任何现有的设置。最后，如果一个文件存在于`config/secrets.json`中，那么它的值将被合并。
这个模式允许我使用配置源的层次结构。应用的默认值都显示在 Docker 映像中。在运行时，用户可以用环境变量或环境变量文件指定覆盖，这对于在单个 Docker 主机上工作的开发人员来说很容易。在集群环境中，部署可以使用 Docker 配置对象和机密，它们会覆盖默认值和任何环境变量。
举个简单的例子，我可以为新的 REST API 更改日志记录级别。在 Docker 映像的`appsettings.json`文件中，记录级别被设置为`Warning`。该应用会在每次有`GET`请求时写入信息级日志，因此如果我在配置中更改日志级别，我将能够看到这些日志条目。
我在名为`nerd-dinner-api-config.json`的文件中有我想要使用的设置:
```
{
 "Logging": {
  "LogLevel": {
   "Default": "Information"
  } 
 }
}
```
首先，我需要将它作为配置对象存储在群中，这样容器就不需要访问原始文件。我用`docker config create`来做，给对象一个名称和配置源的路径:
```
docker config create nerd-dinner-api-config .\configs\nerd-dinner-api-config.json
```
您只需要在创建配置对象时访问该文件。现在数据存储在群中。群中的任何节点都可以获取配置数据并将其提供给容器，任何能够访问 Docker Engine 的人都可以看到配置数据，而不需要那个源文件。`docker config inspect`显示配置对象的内容:
```
> docker config inspect --pretty nerd-dinner-api-config
ID:                     yongm92k597gxfsn3q0yhnvtb
Name:                   nerd-dinner-api-config
Created at:             2019-02-13 22:09:04.3214402 +0000 utc
Updated at:             2019-02-13 22:09:04.3214402 +0000 utc
Data:
{
 "Logging": {
 "LogLevel": {
 "Default": "Information"
    }
 }
}
```
You can see the plain-text value of the config object by inspecting it. This is great for troubleshooting application issues, but bad for security—you should always use Docker secrets for sensitive configuration values, never config objects.
# 在集群服务中使用 Docker 配置对象
当您创建服务时，您可以使用`--config`选项使配置对象对容器可用。然后，您应该能够在应用中直接使用它们，但是可能会有一个陷阱。当配置对象作为文件呈现给容器时，它们是安全的，因此只有管理帐户可以读取它们。如果您的应用以最低特权用户的身份运行，它可以看到配置文件，但不能读取它。这是一项安全功能，旨在当有人获得对容器中文件系统的访问权限时，保护您的配置文件的安全。
这在 Linux 容器中是不同的，在 Linux 容器中，您可以指定在容器中拥有文件所有权的用户的 ID，这样您就可以给特权最低的帐户访问文件的权限。Windows 容器不支持该功能，但是 Windows 容器正在演变为与 Linux 容器一起完成功能，因此这应该会在未来的版本中出现。在编写时，要使用配置对象，应用需要以管理员帐户或具有本地系统访问权限的帐户运行。
Running your application with elevated permissions is not a good idea from a security perspective, but it is less of a concern when you run in a container. I cover this in [Chapter 9](09.html), *Understanding the Security Risks and Benefits of Docker*.
我已经从[第 5 章](05.html)、*采用容器优先解决方案设计*更新了 REST API 的 Dockerfile，以使用容器中的内置管理帐户:
```
# escape=`
FROM microsoft/dotnet:2.1-aspnetcore-runtime-nanoserver-1809
EXPOSE 80
WORKDIR /dinner-api
ENTRYPOINT ["dotnet", "NerdDinner.DinnerApi.dll"]
USER ContainerAdministrator
COPY --from=dockeronwindows/ch05-nerd-dinner-builder:2e C:\dinner-api .
```
改变的只是`USER`指令，它为 Dockerfile 的其余部分和容器启动设置了用户。代码完全一样:我还在使用[第 5 章](05.html)、*采用容器优先解决方案设计*中的构建器映像。我已经将这个新的映像构建为`dockeronwindows/ch07-nerd-dinner-api:2e`，我可以升级我正在运行的 API 服务，并使用`docker service update`应用新的配置:
```
docker service update `
 --config-add src=nerd-dinner-api-config,target=C:\dinner-api\config\config.json `
 --image dockeronwindows/ch07-nerd-dinner-api:2e `
 nerd-dinner-api;
```
更新服务会用新配置替换正在运行的副本，在这种情况下，使用新映像并应用配置对象。现在，当我向 REST API 发出`GET`请求时，它正在信息级别进行记录，我可以在服务日志中看到更多细节:
```
> docker service logs nerd-dinner-api
nerd-dinner-api.1.cjurm8tg1lmj@win2019-02    | Hosting environment: Production
nerd-dinner-api.1.cjurm8tg1lmj@win2019-02    | Content root path: C:\dinner-api
nerd-dinner-api.1.cjurm8tg1lmj@win2019-02    | Now listening on: http://[::]:80
nerd-dinner-api.1.cjurm8tg1lmj@win2019-02    | Application started. Press Ctrl+C to shut down.
nerd-dinner-api.1.cjurm8tg1lmj@win2019-02    | info: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]
nerd-dinner-api.1.cjurm8tg1lmj@win2019-02    |       Request starting HTTP/1.1 GET http://api.nerddinner.swarm/api/dinners
nerd-dinner-api.1.cjurm8tg1lmj@win2019-02    | info: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[1]
nerd-dinner-api.1.cjurm8tg1lmj@win2019-02    |       Route matched with {action = "Get", controller = "Dinners"}. Executing action NerdDinner.DinnerApi.Controllers.DinnersController.Get (NerdDinner.DinnerApi)
```
您可以将这种方法用于在不同环境之间变化的功能标志和行为设置。这是一种非常灵活的应用配置方法。使用单个 Docker Engine 的开发人员可以使用映像中的默认设置运行容器，或者用环境变量覆盖它们，或者通过装载本地卷来替换整个配置文件。在使用 Docker Swarm 的测试和生产环境中，管理员可以使用配置对象集中管理配置，仍然在每个环境中使用完全相同的 Docker 映像。
# 将敏感数据存储在 Docker 机密中
群体模式本质上是安全的。所有节点之间的通信都是加密的，群提供了分布在管理节点之间的加密数据存储。你可以用这个商店申请**机密**。机密的工作方式与配置对象完全相同——你在集群中创建它们，然后让它们对服务可用。不同的是，机密在群的数据存储中加密，并且在从管理器到工作节点的传输中加密。它只在运行副本的容器中解密，在那里它以文件的形式出现，就像配置对象一样。
机密是用名字和机密的内容创建的，可以从文件中读取或输入命令行。我将把我的敏感数据转移到机密中，从 SQL Server 管理员帐户密码开始。在`ch07-app-config`文件夹中，我有一个名为`secrets`的文件夹，其中包含数据库密码的机密文件。我将使用它在群中安全地存储密码，但是我需要对我的数据库映像做一些工作，然后它才能支持机密。