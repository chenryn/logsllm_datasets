    ```
    包含 IP 集合 IP 地址列表的文件应该每行包含一个条目。以
    hash、分号或空行开头的行将被忽略。
-   要添加 [*iplist.txt*]{.emphasis} 文件中的地址，请以 `root`{.literal}
    用户身份运行以下命令：
    ``` screen
    # firewall-cmd --permanent --ipset=test --add-entries-from-file=iplist.txt
    success
    ```
-   要查看 IP 集的扩展条目列表，请以 `root`{.literal}
    用户身份运行以下命令：
    ``` screen
    # firewall-cmd --permanent --ipset=test --get-entries
    192.168.0.1
    192.168.0.2
    192.168.0.3
    192.168.1.0/24
    192.168.2.254
    ```
-   要从 IP 集中删除地址，并检查更新的条目列表，请以 `root`{.literal}
    用户身份运行以下命令：
    ``` screen
    # firewall-cmd --permanent --ipset=test --remove-entries-from-file=iplist.txt
    success
    # firewall-cmd --permanent --ipset=test --get-entries
    192.168.0.1
    ```
-   您可以将 IP 集合作为一个源添加到区，以便处理所有来自 IP
    集合中列出的任意地址的网络流量。例如，要将 [*test*]{.emphasis} IP
    集作为源添加到 [*drop*]{.emphasis} 区域，以便丢弃来自
    [*test*]{.emphasis} IP 集中列出的所有条目的所有数据包，请以
    `root`{.literal} 用户身份运行以下命令 ：
    ``` screen
    # firewall-cmd --permanent --zone=drop --add-source=ipset:test
    success
    ```
    源中的 `ipset:`{.literal} 前缀显示 `firewalld`{.literal} 的源是一个
    IP 集，而不是 IP 地址或地址范围。
:::
IP 集的创建和删除只限于 permanent 环境，所有其他 IP
集选项也可以用在运行时环境中，而不需要 `--permanent`{.literal} 选项。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
红帽不推荐使用不是通过 `firewalld`{.literal} 管理的 IP 集。要使用这样的
IP 组，需要一个永久直接规则来引用集合，且必须添加自定义服务来创建这些 IP
组件。这个服务需要在 `firewalld`{.literal} 启动前启动，否则
`firewalld`{.literal} 无法使用这些集合来添加直接规则。您可以使用
`/etc/firewalld/direct.xml`{.literal} 文件来添加永久的直接规则。
:::
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_securing-networks.html#prioritizing-rich-rules_using-and-configuring-firewalld}丰富规则的优先级 {.title}
:::
默认情况下，富规则是根据其规则操作进行组织的。例如，`deny`{.literal}
规则优先于 `allow`{.literal} 规则。富规则中的 `priority`{.literal}
参数可让管理员对富规则及其执行顺序进行精细的控制。
::: section
::: titlepage
## []{#using-and-configuring-firewalld_securing-networks.html#how-the-priority-parameter-organizes-rules-into-different-chains_prioritizing-rich-rules}priority 参数如何将规则组织为不同的链 {.title}
:::
您可以将富规则中的 `priority`{.literal} 参数设置为 `-32768`{.literal} 和
`32767`{.literal} 之间的任意数字，值越小优先级越高。
`firewalld`{.literal} 服务会根据其优先级的值将规则组织到不同的链中：
::: itemizedlist
-   优先级低于 0：规则被重定向到带有 `_pre`{.literal} 后缀的链中。
-   优先级高于 0：规则被重定向到带有 `_post`{.literal} 后缀的链中。
-   优先级等于 0：根据操作，规则将重定向到带有
    `_log`{.literal}、`_deny`{.literal} 或 `_allow`{.literal} 的链中。
:::
在这些子链中，`firewalld`{.literal} 会根据其优先级的值对规则进行排序。
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_securing-networks.html#setting-the-priority-of-a-rich-rule_prioritizing-rich-rules}设置丰富的规则的优先级 {.title}
:::
该流程描述了如何创建一个富规则的示例，该规则使用 `priority`{.literal}
参数来记录其他规则不允许或拒绝的所有流量。您可以使用此规则标记意非预期的流量。
::: orderedlist
**流程**
1.  添加一个带有非常低优先级的丰富规则来记录未由其他规则匹配的所有流量：
    ``` literallayout
    # firewall-cmd --add-rich-rule='rule priority=32767 log prefix="UNEXPECTED: " limit value="5/m"'
    ```
    命令还将日志条目的数量限制为每分钟 `5`{.literal} 个。
2.  另外，还可显示上一步中命令创建的 `nftables`{.literal} 规则：
    ``` literallayout
    # nft list chain inet firewalld filter_IN_public_post
    table inet firewalld {
      chain filter_IN_public_post {
        log prefix "UNEXPECTED: " limit rate 5/minute
      }
    }
    ```
:::
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_securing-networks.html#configuring-firewall-lockdown_using-and-configuring-firewalld}配置防火墙锁定 {.title}
:::
如果本地应用或服务以 `root`{.literal} 身份运行（如
[**[libvirt]{.application}**]{.strong}），则可以更改防火墙配置。使用这个特性，管理员可以锁定防火墙配置，从而达到没有应用程序或只有添加到锁定白名单中的应用程序可以请求防火墙更改的目的。锁定设置默认会被禁用。如果启用，用户就可以确定，防火墙没有被本地的应用程序或服务进行了不必要的配置更改。
::: section
::: titlepage
## []{#using-and-configuring-firewalld_securing-networks.html#configuring-lockdown-using-CLI_configuring-firewall-lockdown}使用 CLI 配置锁定 {.title}
:::
这个流程描述了如何使用命令行来启用或禁用锁定。
::: itemizedlist
-   要查询是否启用了锁定，请以 `root`{.literal} 用户身份运行以下命令：
    ``` literallayout
    # firewall-cmd --query-lockdown
    ```
    如果启用了锁定，该命令将打印 `yes`{.literal}，且退出状态为
    `0`{.literal}。否则，将打印 `no`{.literal} ，且退出状态为
    `1`{.literal}。
-   要启用锁定，请以 `root`{.literal} 用户身份输入以下命令：
    ``` literallayout
    # firewall-cmd --lockdown-on
    ```
-   要禁用锁定，请以 `root`{.literal} 用户身份使用以下命令：
    ``` literallayout
    # firewall-cmd --lockdown-off
    ```
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_securing-networks.html#configuring-lockdown-allow-list-options-with-the-command-line-client_configuring-firewall-lockdown}使用 CLI 配置锁定允许列表选项 {.title}
:::
锁定允许名单中可以包含命令、安全上下文、用户和用户
ID。如果允许列表中的命令条目以星号\"\*\"结尾，则以该命令开头的所有命令行都将匹配。如果没有
\"\*\"，那么包括参数的绝对命令必须匹配。
::: itemizedlist
-   上下文是正在运行的应用程序或服务的安全（SELinux）上下文。要获得正在运行的应用程序的上下文，请使用以下命令：
    ``` screen
    $ ps -e --context
    ```
    该命令返回所有正在运行的应用程序。通过
    [**[grep]{.application}**]{.strong}
    工具管道输出以便获取您感兴趣的应用程序。例如：
    ``` screen
    $ ps -e --context | grep example_program
    ```
-   要列出允许列表中的所有命令行，请以 `root`{.literal}
    用户身份输入以下命令：
    ``` screen
    # firewall-cmd --list-lockdown-whitelist-commands
    ```
-   要在允许列表中添加命令 [*command*]{.emphasis} ，请以
    `root`{.literal} 用户身份输入以下命令：
    ``` screen
    # firewall-cmd --add-lockdown-whitelist-command='/usr/bin/python3 -Es /usr/bin/command'
    ```
-   要从允许列表中删除命令 [*command*]{.emphasis} ，请以
    `root`{.literal} 用户身份输入以下命令：
    ``` screen
    # firewall-cmd --remove-lockdown-whitelist-command='/usr/bin/python3 -Es /usr/bin/command'
    ```
-   要查询命令 [*command*]{.emphasis} 是否在允许列表中，请以
    `root`{.literal} 用户身份输入以下命令：
    ``` screen
    # firewall-cmd --query-lockdown-whitelist-command='/usr/bin/python3 -Es /usr/bin/command'
    ```
    如果为真，该命令将打印 `yes`{.literal}，且退出状态为
    `0`{.literal}。否则，将打印 `no`{.literal} ，且退出状态为
    `1`{.literal}。
-   要列出允许列表中的所有安全上下文，请以 `root`{.literal}
    用户身份输入以下命令：
    ``` screen
    # firewall-cmd --list-lockdown-whitelist-contexts
    ```
-   要在允许列表中添加上下文 [*context*]{.emphasis}，请以
    `root`{.literal} 用户身份输入以下命令：
    ``` screen
    # firewall-cmd --add-lockdown-whitelist-context=context
    ```
-   要从允许列表中删除上下文 [*context*]{.emphasis}，请以
    `root`{.literal} 用户身份输入以下命令：
    ``` screen
    # firewall-cmd --remove-lockdown-whitelist-context=context
    ```
-   要查询上下文 [*context*]{.emphasis} 是否在允许列表中，请以
    `root`{.literal} 用户身份输入以下命令：
    ``` screen
    # firewall-cmd --query-lockdown-whitelist-context=context
    ```
    如果为真，则打印 `yes`{.literal} ，且退出状态为 `0`{.literal}
    ，否则，打印 `no`{.literal}，且退出状态为 `1`{.literal}。
-   要列出允许列表中的所有用户 ID，请以 `root`{.literal}
    用户身份输入以下命令：
    ``` screen
    # firewall-cmd --list-lockdown-whitelist-uids
    ```
-   要在允许列表中添加用户 ID [*uid*]{.emphasis}，请以 `root`{.literal}
    用户身份输入以下命令：
    ``` screen
    # firewall-cmd --add-lockdown-whitelist-uid=uid
    ```
-   要从允许列表中删除用户 ID [*uid*]{.emphasis}，请以 `root`{.literal}
    用户身份输入以下命令：
    ``` screen
    # firewall-cmd --remove-lockdown-whitelist-uid=uid
    ```
-   要查询用户 ID [*uid*]{.emphasis} 是否在 allowlist
    中，请输入以下命令：
    ``` screen
    $ firewall-cmd --query-lockdown-whitelist-uid=uid
    ```
    如果为真，则打印 `yes`{.literal} ，且退出状态为 `0`{.literal}
    ，否则，打印 `no`{.literal}，且退出状态为 `1`{.literal}。
-   要列出允许列表中的所有用户名，请以 `root`{.literal}
    用户身份输入以下命令：
    ``` screen
    # firewall-cmd --list-lockdown-whitelist-users
    ```
-   要在允许列表中添加用户名 [*user*]{.emphasis}，请以 `root`{.literal}
    用户身份输入以下命令：
    ``` screen
    # firewall-cmd --add-lockdown-whitelist-user=user
    ```
-   要从允许列表中删除用户名 [*user*]{.emphasis}，请以 `root`{.literal}
    用户身份输入以下命令：
    ``` screen
    # firewall-cmd --remove-lockdown-whitelist-user=user
    ```
-   要查询用户名 [*user*]{.emphasis} 是否在 allowlist
    中，请输入以下命令：
    ``` screen
    $ firewall-cmd --query-lockdown-whitelist-user=user
    ```
    如果为真，则打印 `yes`{.literal} ，且退出状态为 `0`{.literal}
    ，否则，打印 `no`{.literal}，且退出状态为 `1`{.literal}。
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_securing-networks.html#configuring-lockdown-allow-list-options-with-configuration-files_configuring-firewall-lockdown}使用配置文件配置锁定的 allowlist 选项 {.title}
:::
默认的允许列表配置文件包含 `NetworkManager`{.literal} 上下文和
`libvirt`{.literal} 的默认上下文。用户 ID 0 也位于列表中。
``` screen
```
以下是一个允许列表配置文件示例，为 `firewall-cmd`{.literal}
工具启用所有命令，对于名为 [*user*]{.emphasis} 的用户，其用户 ID 为
`815`{.literal} ：
``` screen
```
此示例显示了`user id`{.literal} 和
`user name`{.literal}，但只需要其中一个选项。Python
是程序解释器，它位于命令行的前面。您还可以使用特定的命令，例如：