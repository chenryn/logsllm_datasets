容。然而，Windows运行库也知道前面讨论的读取器和写入器概念。DataReader通过构造
函数接受IInputStream。DataReader类型定义的方法可以读取原始数据类型，如
ReadInt16、ReadInt32和ReadDateTime。使用ReadBytes可以读取字节数组，使用
ReadString可以读取字符串。ReadString（）方法需要要读取的字符数。字符串赋给
TextBox控件的Text属性，来显示内容：
        //...
        if (file ! = null)
        {
        IRandomAccessStreamWithContentType stream = await file.OpenReadAsync();
        using (var reader = new DataReader(stream))
        {
          await reader.LoadAsync((uint)stream.Size);
          text1.Text = reader.ReadString((uint)stream.Size);
        }
        }
      }
      catch (Exception ex)
      {
        var dlg = new MessageDialog(ex.Message, "Error");
        await dlg.ShowAsync();
      }
    }
  注意： 与.NET Framework的读取器和写入器类似，DataReader和DataWriter
管理通过构造函数传递的流。在销毁读取器和写入器时，流也会销毁。在.NET类中，
为了底层流打开更长时间，可以在构造函数中设置leaveOpen参数。对于Windows运行
库类型，可以调用方法DetachStream，把读取器和写入器与流分离开。
保存文档时，调用OnSave（）方法。首先，FileSavePicker用于允许用户选择文档，
与FileOpenPicker类似。接下来，使用OpenTransactedWriteAsync打开文件。NTFS文件系
统支持事务；这些都不包含在.NET 
Framework中，但可用于Windows运行库。
OpenTransactedWriteAsync返回一个实现了接口IStorageStreamTransaction的
StorageStreamTransaction对象。这个对象本身并不是流，但是它包含了一个可以用Stream
属性引用的流。这个属性返回一个IRandomAccessStream流。与创建DataReader类似，可
以创建一个DataWriter，写入原始数据类型，包括字符串，如这个例子所示。StoreAsync
方法最后把缓冲区的内容写到流中。销毁写入器之前，需要调用CommitAsync方法来提交
事务：
    public async void OnSave()
    {
      try
      {
        var picker = new FileSavePicker()
        {
        SuggestedStartLocation = PickerLocationId.DocumentsLibrary,
        SuggestedFileName = "New Document"
        };
        picker.FileTypeChoices.Add("Plain Text", new List() { ".txt" });
        StorageFile file = await picker.PickSaveFileAsync();
        if (file ! = null)
        {
        using (StorageStreamTransaction tx =
          await file.OpenTransactedWriteAsync())
        {
          IRandomAccessStream stream = tx.Stream;
          stream.Seek(0);
          using (var writer = new DataWriter(stream))
          {
            writer.WriteString(text1.Text);
            tx.Stream.Size = await writer.StoreAsync();
            await tx.CommitAsync();
          }
        }
        }
      }
      catch (Exception ex)
      {
        var dlg = new MessageDialog(ex.Message, "Error");
        await dlg.ShowAsync();
      }
    }
DataWriter不把定义Unicode文件种类的序言添加到流中。需要明确这么做，如本章前
面所述。DataWriter只通过设置UnicodeEncoding和ByteOrder属性来处理文件的编码。默认
设置是UnicodeEncoding.Utf8和ByteOrder.BigEndian。除了使用DataWriter之外，还可以利
用StreamReader和StreamWriter以及.NET Stream类的功能，见下一节。
23.10.2 把Windows Runtime类型映射为.NET
类型
下面开始读取文件。为了把Windows运行库流转换为.NET流用于读取，可以使用扩
展方法AsStreamForRead。这个方法是在程序集System.Runtime.WindowsRuntime的
System.IO名称空间中定义（必须打开）。这个方法创建了一个新的Stream对象，来管理
IInputStream。现在，可以使用它作为正常的.NET流，如前所述，例如，给它传递一个
StreamReader，使用这个读取器访问文件：
    public async void OnOpenDotnet()
    {
      try
      {
        var picker = new FileOpenPicker()
        {
        SuggestedStartLocation = PickerLocationId.DocumentsLibrary
        };
        picker.FileTypeFilter.Add(".txt");
        StorageFile file = await picker.PickSingleFileAsync();
        if (file ! = null)
        {
        IRandomAccessStreamWithContentType wrtStream =
          await file.OpenReadAsync();
        Stream stream =  wrtStream.AsStreamForRead();
        using (var reader = new StreamReader(stream))
        {
          text1.Text = await reader.ReadToEndAsync();
        }
        }
      }
      catch (Exception ex)
      {
        var dlg = new MessageDialog(ex.Message, "Error");
        await dlg.ShowAsync();
      }
    }
所有的Windows Runtime流类型都很容易转换为.NET流，反之亦然。表23-2列出了所
需的方法：
表23-2
从
转换为
方法
IRandomAccessStream
Stream
AsStream
IInputStream
Stream
AsStreamForRead
IOutputStream
Stream
AsStreamForWrite
Stream
IInputStream
AsInputStream
Stream
IOutputStream
AsOutputStream
Stream
IRandomAccessStream
AsRandomAccessStream
现在将更改保存到文件中。用于写入的流通过扩展方法AsStreamForWrite转换。现
在，这个流可以使用StreamWriter类写入。代码片段也把UFT- 8编码的序言写入文件：
    public async void OnSaveDotnet()
    {
      try
      {
        var picker = new FileSavePicker()
        {
        SuggestedStartLocation = PickerLocationId.DocumentsLibrary,
        SuggestedFileName = "New Document"
        };
        picker.FileTypeChoices.Add("Plain Text", new List() { ".txt" });
        StorageFile file = await picker.PickSaveFileAsync();
        if (file ! = null)
        {
        StorageStreamTransaction tx = await file.OpenTransactedWriteAsync();
        using (var writer = new StreamWriter(tx.Stream.AsStreamForWrite()))
        {
          byte[] preamble = Encoding.UTF8.GetPreamble();
          await stream.WriteAsync(preamble, 0, preamble.Length);
          await writer.WriteAsync(text1.Text);
          await writer.FlushAsync();
          tx.Stream.Size = (ulong)stream.Length;
          await tx.CommitAsync();
        }
        }
      }
      catch (Exception ex)
      {
        var dlg = new MessageDialog(ex.Message, "Error");
        await dlg.ShowAsync();
      }
    }
23.11 小结
本章介绍了如何在C#代码中使用.NET基类来访问文件系统。在这两种情况下，基类
提供的对象模型比较简单，但功能强大，从而很容易执行这些领域中几乎所有的操作。对
于文件系统，可以复制文件；移动、创建、删除文件和文件夹；读写二进制文件和文本文
件。
本章学习了如何使用压缩算法和ZIP文件来压缩文件。在更改文件时，
FileSystemWatcher用于获取信息。还解释了如何通过共享内存、命名管道和匿名管道进行
通信。最后，讨论了如何把.NET流映射到Windows运行库流，在Windows应用程序中利
用.NET特性。
本书的其他章节会介绍流的操作。第25章在网络上使用流发送数据。读写XML文件
和发送大型XML文件的内容参见第27章。
第24章将介绍安全性以及如何保护文件，如何添加安全信息，在不同的进程之间使用
内存映射文件。还会学习CryptoStream，无论用于文件还是网络，CryptoStream都会加密
流。
第24章
安全性
本章要点
● 身份验证和授权
● 创建和验证签名
● 保护数据的交换
● 签名和散列
● 数据保护
● 资源的访问控制
本章源代码下载地址（wrox.com）：
打开网页www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可下载
本章源代码。本章代码分为以下几个主要的示例文件：
● WindowsPrincipal
● SigningDemo
● SecureTransfer
● RSASample
● DataProtection
● FileAccessControl
24.1 概述
为了确保应用程序的安全，安全性有几个重要方面需要考虑。一是应用程序的用户，
访问应用程序的是一个真正的用户，还是伪装成用户的某个人？如何确定这个用户是可以
信任的？如本章所述，确保应用程序安全的用户方面是一个两阶段过程：用户首先需要进
行身份验证，再进行授权，以验证该用户是否可以使用需要的资源。
对于在网络上存储或发送的数据呢？例如，有人可以通过网络嗅探器访问这些数据
吗？这里，数据的加密很重要。一些技术，如Windows 
Communication
Foundation（WCF），通过简单的配置提供了加密功能，所以可以看到后台执行了什么操
作。
另一方面是应用程序本身。如果应用程序驻留在Web提供程序上，如何禁止应用程序
执行对服务器有害的操作？
本章将讨论.NET中有助于管理安全性的一些特性，其中包括.NET怎样避开恶意代
码、怎样管理安全性策略，以及怎样通过编程访问安全子系统等。
24.2 验证用户信息
安全性的两个基本支柱是身份验证和授权。身份验证是标识用户的过程，授权在验证
了所标识用户是否可以访问特定资源之后进行。本节介绍如何使用标识符和principals获得
用户的信息。
24.2.1 使用Windows标识
使用标识可以验证运行应用程序的用户。WindowsIndentity类表示一个Windows用
户。如果没有用Windows账户标识用户，也可以使用实现了IIdentity接口的其他类。通过
这个接口可以访问用户名、该用户是否通过身份验证，以及验证类型等信息。
principal是一个包含用户的标识和用户的所属角色的对象。IPrincipal接口定义了
Identity属性和IsInRole（）方法，Identity属性返回IIdentity对象；在IsInRole（）方法中，
可以验证用户是否是指定角色的一个成员。角色是有相同安全权限的用户集合，同时它是
用户的管理单元。角色可以是Windows组或自己定义的一个字符串集合。
.NET中的Principal类有WindowsPrincipal、GenericPrincipal和RolePrincipal。从.NET
4.5开始，这些Principal类型派生于基类ClaimsPrincipal。还可以创建实现了IPrincipal接口
或派生于ClaimsPrincipal的自定义Principal类。
示例代码使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.Security.Principal.Windows
名称空间：
    System.Collections.Generic
    System.Security.Claims
    System.Security.Principal
    static System.Console
下面创建一个控制台应用程序，它可以访问某个应用程序中的主体，以便允许用户访
问底层的Windows账户。这里需要导入System.Security.Principal和System.Security.Claims名
称空间。Main方法调用方法ShowIdentityInformation把WindowsIdentity的信息写到控制
台，调用ShowPrincipal写入可用于principals的额外信息，调用ShowClaims写入声称信息
（代码文件WindowsPrincipal/Program.cs）：
    static void Main()
    {
      WindowsIdentity identity = ShowIdentityInformation();
      WindowsPrincipal principal = ShowPrincipal(identity);
      ShowClaims(principal.Claims);
    }
ShowIdentityInformation方法通过调用WindowsIdentity的静态方法GetCurrent，创建一
个WindowsIdentity对象，并访问其属性，来显示身份类型、名称、身份验证类型和其他值
（代码文件WindowsPrincipal / Program.cs）：
    public static WindowsIdentity ShowIdentityInformation()
    {
      WindowsIdentity identity = WindowsIdentity.GetCurrent();
      if (identity == null)
      {
        WriteLine("not a Windows Identity");
        return null;
      }
      WriteLine($"IdentityType: {identity}");
      WriteLine($"Name: {identity.Name}");
      WriteLine($"Authenticated: {identity.IsAuthenticated}");
      WriteLine($"Authentication Type: {identity.AuthenticationType}");
      WriteLine($"Anonymous? {identity.IsAnonymous}");
      WriteLine($"Access Token: {identity.AccessToken.DangerousGetHandle()}");
      WriteLine();
      return identity;
    }
所有的标识类，例如WindowsIdentity，都实现了IIdentity接口，该接口包含3个属性
（AuthenticationType、IsAuthenticated和Name），便于所有的派生标识类实现它们。
WindowsIdentity的其他属性都专用于这种标识。
运行应用程序，信息如以下代码片段所示。身份验证类型显示CloudAP，因为我使用
Microsoft Live账户登录到系统。如果使用Active Directory, Active Directory就显示在验证
类型中：
    IdentityType: System.Security.Principal.WindowsIdentity
    Name: THEROCKS\Christian
    Authenticated: True
    Authentication Type: CloudAP
    Anonymous? False
    Access Token: 1072
24.2.2 Windows Principal
principal包含一个标识，提供额外的信息，比如用户所属的角色。principal实现了
IPrincipal接口，提供了方法IsInRole和Identity属性。在Windows中，用户所属的所有
Windows组映射到角色。重载IsInRole方法，以接受安全标识符、角色字符串或
WindowsBuiltInRole枚举的值。示例代码验证用户是否属于内置的角色User和
Administrator （代码文件WindowsPrincipal / Program.cs）：
    public static WindowsPrincipal ShowPrincipal(WindowsIdentity identity)
    {
      WriteLine("Show principal information");
      WindowsPrincipal principal = new WindowsPrincipal(identity);