# App加固的种类甄别与侦查
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 混淆加固技术的发展过程
从2012年开始，移动互联网进入快速发展阶段，带动了Android
App的开发热潮，而这股热潮也推动了Android平台软件保护的发展。传统App加固技术，前后经历了四代技术变更，保护级别每一代都有所提升，但其固有的安全缺陷和兼容性问题始终未能得到解决。
**第一代加固技术—动态加载**
第一代Android加固技术用于保护应用的逻辑不被逆向与分析，最早普遍在恶意软件中使用，其主要基于Java虚拟机提供的动态加载技术。
**第二代加固技术—不落地加载**
相对第一代加固技术，第二代加固技术在APK修改方面已经完善，能做到对开发的零干扰。开发过程中不需要对应用做特殊处理，只需要在最终发布前进行保护即可。而为了实现这个零干扰的流程，Loader需要处理好Android的组件的生命周期。
**第三代加固技术—指令抽离**
由于第二代加固技术仅仅对文件级别进行加密，其带来的问题是内存中的Payload是连续的，可以被攻击者轻易获取。第三代加固技术对这部分进行了改进，将保护级别降到了函数级别。
**第四代加固技术：指令转换/VMP**
第三代加固技术在函数级别的保护，使用Android虚拟机内的解释器执行代码，带来可能被记录的缺陷，第四代加固技术使用自己的解释器来避免第三代的缺陷。而自定义的解释器无法对Android系统内的其他函数进行直接调用，必须使用JAVA的JNI接口进行调用。
## 常见的混淆加固技术甄别
**代码混淆**
在没有保护的情况下想要破解一个APP，或许你只需要使用apktool,
dex2jar等工具，就可以清楚且完整的看到一款产品的原始代码逻辑，以及一定的逆向思维就可以搞定。而最先开始的也是最为常用的保护措施为代码保护。
谷歌自带的混淆器ProGuard为免费软件可以修改类名、方法名、字段名。
用处有两个，一个是符号混淆，把原本的XXXActivity改成a，让人不好猜到这个类的用处。另一个用处是压缩文件大小。
另外就是收费版DexGuard，混淆功能更加强大，比如支持字符串加密、花指令、资源加密等功能。发展到现在DexGuard的功能更加丰富，甚至还有一些运行时的防护，已经不是一个单纯的混淆器。
代码混淆替换类名：
Null混淆：
Jadx打开效果图：
**动态加载**
将需要保护的代码单独编译出来，将其进行加密后在程序运行的过程中对其进行解密，并使用ClassLoader来动态的进行加载。这是PC上保护代码的常见套路，也是后来第一代壳的基础。
将加壳后的APK文件放到jadx中进行反编译，结果如下图所示，可以看到反编译后源程序APK的代码都被隐藏了起来，说明加壳是成功的。
**Native代码**
相对于java代码容易被反编译，使用NDK开发出来的原生C代码编译后生成的so库是一个二进制文件，这无疑增加了破解的难度。利用这个特性，可以将客户端敏感信息写在C代码中，增强应用的安全性。
对于Native的恶心流保护，最火也最有效的当属OLLVM了。至于其他Native保护有两种套路
1、破坏ELF文件结构，甚至定制linker加载自定义的SO。
2、加密代码段，运行时解密，也就是跟Dex动态加载类似。或者直接套用UPX之类的传统ELF壳。
至于其他 Native 保护，最开始基本上只有两种套路：
**核心数据功能云端化**
将重要的功能、数据，全部放到云端运算，客户端能只作展示用就只作展示用。嗯，这个勉强算是现在风控的基础。
## 资源文件保护
Android
App的资源文件中存放了大量的应用UI界面图片、UI布局文件、隐私数据文件等，如何保障这些资源文件的安全性一直是开发者和应用安全人员重点关注的问题。在Android
App中，资源主要分为assets资源和res资源两类。
1.assets文件夹是存放不进行编译加工的原生文件，即该文件夹里面的文件不会像xml，java文件被预编译，可以存放一些图片、html、js、css、证书等文件。
2.res资源则存放在App的res目录下，该类资源在App打包时大多会被编译，变成二进制文件，应用层代码通过resource id对该类资源进行访问。
参考Proguard
Obfuscator方式，对APK中资源文件名使用简短无意义名称进行替换，给破解者制造困难，从而做到资源的相对安全；通过上面分析，我们可以看出通过修改AAPT在生成resources.arsc和*.ap_时把资源文件的名称进行替换，从而保护资源。
通过阅读AAPT编译资源的代码，我们发现修改AAPT在处理资源文件相关的源码是能够做到资源文件名的替换。
static status_t makeFileResources(Bundle* bundle, const sp&
assets,
ResourceTable* table,
const sp& set,
const char* resType)
{
String8 type8(resType);
String16 type16(resType);
bool hasErrors = false;
ResourceDirIterator it(set, String8(resType));
ssize_t res;
while ((res=it.next()) == NO_ERROR) {
if (bundle->getVerbose()) {
printf(” (new resource id %s from %s)\n”,
it.getBaseName().string(), it.getFile()->getPrintableSource().string());
}
String16 baseName(it.getBaseName());
const char16_t* str = baseName.string();
const char16_t* const end = str + baseName.size();
while (str = ‘a’ && *str = ‘0’ && *str addEntry(SourcePos(it.getPath(), 0), String16(assets->getPackage()),
type16,
baseName, // String16(obfuscationName),
String16(obfuscationPath), // resPath
NULL,
&it.getParams());
assets->addResource(it.getLeafName(), obfuscationPath/*resPath*/,
it.getFile(), type8);
}
return hasErrors ? UNKNOWN_ERROR : NO_ERROR;
}
上述代码是在ResourceTable和Assets中添加资源文件时，
对资源文件名称进行修改，这就能够做到资源文件名称的替换，这样通过使用修改过的AAPT编译资源并进行打包，下图是反编译后的截图：
## 反调试技术
反调试的目的是防止程序被第三方的调试器调式和分析。具体实施反调试的方法是：在程序启动过程中检查其是否被调试器附加、自身程序的父进程是否存在异常，以及进程列表中是否有正在运行的调试器等。
动态调试通过调试器来Hook软件、进而获取软件运行时的数据。可以在软件中添加检测调试器的代码，在检测到软件被调试器连接时中止软件的运行。
例如:
检测端口号，针对android_server这个端口号
void anti_serverport() {
const int bufsize=512;
char filename[bufsize];
char line[bufsize];
int pid =getpid();
sprintf(filename,”/proc/net/tcp”);
FILE* fd=fopen(filename,“r”);
if(fd!=NULL){
while(fgets(line,bufsize,fd)){
if (strncmp(line, “5D8A”, 4)==0){
int ret = kill(pid, SIGKILL);
}
}
}
fclose(fd);
}
检测调试进程的名字
void anti_processstatus(){
const int bufsize = 1024;
char filename[bufsize];
char line[bufsize];
char name[bufsize];
char nameline[bufsize];
int pid = getpid();
//先读取Tracepid的值
sprintf(filename, “/proc/%d/status”, pid);
FILE *fd=fopen(filename,“r”);
if(fd!=NULL){
while(fgets(line,bufsize,fd)){
if(strstr(line,“TracerPid”)!=NULL)
{
int statue =atoi(&line[10]);
if(statue!=0){
sprintf(name,”/proc/%d/cmdline”,statue);
FILE *fdname=fopen(name,“r”);
if(fdname!= NULL){
while(fgets(nameline,bufsize,fdname)){
if(strstr(nameline,“android_server”)!=NULL){
int ret=kill(pid,SIGKILL);
}
}
}
fclose(fdname);
}
}
}
}
fclose(fd);
}
## 运行环境检测
除了静态分析与动态调试，在分析软件时还可以使用动态分析技术，动态分析基于自定义的沙盒环境，通过HOOk系统中的所有关键API来输出程序运行时的动态信息。可以在运行时检测软件的运行环境，从而判断程序是否被第三方恶意使用或跟踪分析了。
**模拟器检测**
检测核心思想利用emulator和真机的区别。常用的实用方法包括TelephonyManager类、Build信息、特征文件、系统属性、基于差异化信息、基于硬件数据、基于应用层行为数据、基于cache行为和基于指令执行行为。
检测示例：
public static boolean isEmulatorAbsoluly() {
if (Build.PRODUCT.contains(“sdk”) ||
Build.PRODUCT.contains(“sdk_x86”) ||
Build.PRODUCT.contains(“sdk_google”) ||
Build.PRODUCT.contains(“Andy”) ||
Build.PRODUCT.contains(“Droid4X”) ||
Build.PRODUCT.contains(“nox”) ||
Build.PRODUCT.contains(“vbox86p”)) {
return true;
}
if (Build.MANUFACTURER.equals(“Genymotion”) ||
Build.MANUFACTURER.contains(“Andy”) ||
Build.MANUFACTURER.contains(“nox”) ||
Build.MANUFACTURER.contains(“TiantianVM”)) {
return true;
}
if (Build.BRAND.contains(“Andy”)) {
return true;
}
if (Build.DEVICE.contains(“Andy”) ||
Build.DEVICE.contains(“Droid4X”) ||
Build.DEVICE.contains(“nox”) ||
Build.DEVICE.contains(“vbox86p”)) {
return true;
}
if (Build.MODEL.contains(“Emulator”) ||
Build.MODEL.equals(“google_sdk”) ||
Build.MODEL.contains(“Droid4X”) ||
Build.MODEL.contains(“TiantianVM”) ||
Build.MODEL.contains(“Andy”) ||
Build.MODEL.equals(“Android SDK built for x86_64”) ||
Build.MODEL.equals(“Android SDK built for x86”)) {
return true;
}
if (Build.HARDWARE.equals(“vbox86”) ||
Build.HARDWARE.contains(“nox”) ||
Build.HARDWARE.contains(“ttVM_x86”)) {
return true;
}
if (Build.FINGERPRINT.contains(“generic/sdk/generic”) ||
Build.FINGERPRINT.contains(“generic_x86/sdk_x86/generic_x86”) ||
Build.FINGERPRINT.contains(“Andy”) ||
Build.FINGERPRINT.contains(“ttVM_Hdragon”) ||
Build.FINGERPRINT.contains(“generic/google_sdk/generic”) ||
Build.FINGERPRINT.contains(“vbox86p”) ||
Build.FINGERPRINT.contains(“generic/vbox86p/vbox86p”)) {
return true;
}
return false;
}
**Root检测**
仅具有常规功能的软件，其运行的环境可能不需要root权限。拥有root权限的设备，对系统有绝对的控制权，包括对APP中所有私有数据的访问及对系统API执行流程的篡改。对运行环境安全性要求较高的APP例如银行与金融理财类APP，如果运行在root后的设备上，意味着用户的财产安全将面临极高的风险，在这种情况下，应该检测系统是否运行与root后的设备上，并对特定的运行环境进行相应的安全处理。
检测原理：
1、已经root设备，会增加一些特殊包或文件，所以可以通过检测这些包(如Superuser.apk、检测su命令)、activity、文件是否存在来判断。
public static boolean checkSuperuserApk() {
try {
File file = new File(“/system/app/Superuser.apk”);
if (file.exists()) {
Log.i(LOG_TAG, “/system/app/Superuser.apk exist”);
return true;
}
} catch (Exception e) {
}
return false;