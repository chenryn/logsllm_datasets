((Ui, Q, ˆCJi, pkO), (r, ω)) ∈ RJ ⇐⇒
ˆCJi = Ω.Enc(pkO, r ˆP ; ω) ∧ Ui = r · Q.
Essentially, the NP language which is associated to this relation consists of all
tuples where Ui and the group element r ˆP , encrypted within CJi share the
same discrete logarithm r with respect to bases Q and ˆP , respectively. The NP
relation RO corresponding to the proof carried out upon Open is
(( ˆCJi, pkO, σ), (skO, ˆR)) ∈ RO ⇐⇒ ˆR = Ω.Dec(skO,
ˆCJi ) ∧ pkO ≡ skO ∧ e(σ1[1][1], ˆP ) = e(σ1[1][2], ˆR).
4 For technical reasons and in particular for extractability, we actually require a sig-
nature of knowledge for message m(cid:48) = σ1||m, where σ1 contains the re-randomized
user secret key and SPS-EQ signature.
Thereby, pk ≡ sk denotes the consistency of pk and sk. Note that σ1 represents
the randomized user secret key, i.e., is of the form ((ρR, ρP ), σ(cid:48)) and consists of a
randomized message vector and a corresponding randomized SPS-EQ signature.
We use σ1[1][j] to refer to the jth element in the (randomized) message vector.
Essentially, the NP language associated to this relation consists of all tuples
where the element ˆR being encrypted in CJi and the element σ1[1][1] share the
same discrete logarithms with respect to bases ˆP and σ2[1][2], respectively.
Furthermore, upon Sign we require a signature of knowledge which is with
respect to the following NP relation RS.
((P, Q), ρ) ∈ RS ⇐⇒ Q = ρ · P.
For the sake of compactness, we assume that the languages deﬁned by RJ, RO, RS
are implicit in the CRSs crsJ, crsO, and crsS, respectively. The full construction
is presented as Scheme 1. Note that if multiple users collude and use the same
value r upon Join(1), we always return the ﬁrst user who registered with this
particular value r in Open. Then, Open always returns the signer who initiated
the collusion by sharing the r value, which, we think, is the most reasonable
choice. Note that this is in line with the BSZ model: traceability only requires
that every valid signature can be opened, while not requiring that it opens to one
particular user out of the set of colluding users; correctness and non-frameability
are deﬁned for honest users and are therefore clearly not inﬂuenced.
4.1 Security
First, note that our Join ↔ Issue protocol is inherently concurrently secure: we
only have two moves which means that interleaving diﬀerent Join ↔ Issue will
not be accepted as valid Join ↔ Issue. Since the simplicity of a two-move protocol
makes it rather hard to see from the proof that we actually consider concurrent
security, we explicitly stress it here to make sure that this additional feature is
not overlooked.
when sampling uniformly random from Zp instead of Z∗
them as conceptual changes for the sake of compactness.
In our proofs, we omit to make the negligible distribution switches which arise
p explicit and instead treat
Theorem 1. If SPS-EQ is correct, SoK is correct, and Π is sound, then Scheme 1
is correct.
Proof (Proof (Sketch)). Correctness is straight forward to verify by inspection.
We only have to take care of one detail: There is the possibility that two honest
executions of AddU yield the same value r (which is chosen uniformly at random
upon Join(1)). Thus, the probability of two colliding r is negligible.
Theorem 2. If Π is adaptively zero-knowledge, SoK is simulatable, Ω is IND-
CPA secure, SPS-EQ perfectly adapts signatures, and the DDH assumption holds
in G1, then Scheme 1 is CPA-full anonymous.
GKGen(1κ) : Run BG ← BGGenR(1κ), (skR, pkR) ← KGenR(BG, 2), (skO, pkO) ←
Ω.KGen(1κ), crsJ ← Π.Setup(1κ), crsO ← Π.Setup(1κ), crsS ← SoK.Setup(1κ), set
gpk ← (pkR, pkO, crsJ, crsO, crsS), ik ← skR, ok ← skO and return (gpk, ik, ok).
UKGen(1κ) : Return (uski, upki) ← Σ.KGen(1κ).
Join(1)(gpk, uski, upki) : Choose q, r ←R Z∗
((Ui, Q), ˆCJi , σJi , πJi ) and st ← (gpk, q, Ui, Q), where
p, set (Ui, Q) ← (r·qP, qP ), and output MJ ←
ˆCJi ← Ω.Enc(pkO, r ˆP ; ω), σJi ← Σ.Sign(uski, ˆCJi ),
πJi ← Π.Proof(crsJ, (Ui, Q, ˆCJi , pkO), (r, ω)).
Issue(gpk, ik, i, upki, reg) : Receive MJ = ((Ui, Q), ˆCJi , σJi , πJi ), return reg and send σ(cid:48)
to user i, where
regi ← ( ˆCJi , σJi ), σ
(cid:48) ← SignR((Ui, Q), skR),
if Π.Vrf(crsJ, (Ui, Q, ˆCJi , pkO), πJi ) = 1 ∧ Σ.Vrf(upki, ˆCJi , σJi ) = 1, and return ⊥
otherwise.
Join(2)(st, σ(cid:48)) : Parse st as (gpk, q, Ui, Q) and return gski, where
gski = ((rP, P ), σ) ← ChgRepR((Ui, Q), σ
(cid:48)
−1, pkR),
, q
if VrfR((Ui, Q), σ(cid:48), pkR) = 1, and return ⊥ otherwise.
Sign(gpk, gski, m) : Choose ρ ←R Z∗
p, and return σ ← (σ1, σ2), where
σ1 ← ChgRepR(gski, ρ, pkR), a σ2 ← SoK.Sign(crsS, (P, σ1[1][2]), ρ, σ1||m).
Vrf(gpk, m, σ) : Return 1 if the following holds, and 0 otherwise:
VrfR(σ1, pkR) = 1 ∧ SoK.Vrf(crsS, (P, σ1[1][2]), σ1||m, σ2) = 1.
Open(gpk, ok, reg, m, σ) : Parse σ as (σ1, σ2), and ok as skO. Obtain the lowest index
i,b so that it holds for ( ˆCJi , σJi ) ← regi that ˆR ← Ω.Dec(skO, ˆCJi ) and e(σ1[1][1],
ˆP ) = e(σ1[1][2], ˆR). Return (i, τ ) and ⊥ if no such entry exists, where
τ ← (πO, ˆCJi , σJi ), and πO ← Π.Proof(crsO, ( ˆCJi , pkO, σ), (skO, ˆR)).
Judge(gpk, m, σ, i, upki, τ ) : Parse τ as (πO, ˆCJi , σJi ), and return 1 if the following holds
and 0 otherwise:
Σ.Vrf(upki, ˆCJi , σJi ) = 1 ∧ Π.Vrf(crsO, ( ˆCJi , pkO, σ), πO) = 1.
a Note that gski is of the form ((R, P ), σ) and σ1 is a randomization of gski. We slightly
abuse the notation of VrfR and ChgRepR and input message-signature tuples instead
of separately inputting messages and signatures.
b We assume that the indexes are in ascending order w.r.t. the time of registration.
Scheme 1: Fully-Anonymous Dynamic Group Signature Scheme
Theorem 3. If Π is adaptively zero-knowledge, SoK is simulatable and straight-
line f -extractable, where f : Zp → G2 is deﬁned as r (cid:55)→ r · ˆP , Ω is IND-CCA2
secure, SPS-EQ perfectly adapts signatures, and the DDH assumption holds in
G1, then Scheme 1 is CCA2-full anonymous.
Proof. We prove Theorem 2 and 3 by showing that the output distributions of
the Ch oracle are (computationally) independent of the bit b, where we highlight
the parts of the proof which are speciﬁc to Theorem 3 and can be omitted to
prove Theorem 2. Therefore, let qCh ≤ poly(κ) be the number of queries to Ch,
qO ≤ poly(κ) be the number of queries to Open, and qSndToU ≤ poly(κ) be the
number of queries to SndToU.
Game 0: The original anonymity game.
Game 1: As Game 0, but we run (crsJ, τJ) ← Π.S1(1κ) instead of crsJ ←
Π.Setup(1κ) upon running GKGen and store the trapdoor τJ. Then, we simulate
all calls to Π.Proof executed in Join using the simulator (without a witness).
Transition - Game 0 → Game 1: A distinguisher D0→1 is an adversary against
adaptive zero-knowledge of Π, and, therefore, the probability to distinguish
Game 0 and Game 1 is negligible, i.e., | Pr[S1] − Pr[S0]| ≤ ZKJ(κ).
Game 2: As Game 1, but we run (crsO, τO) ← Π.S1(1κ) instead of crsO ←
Π.Setup(1κ) upon running GKGen and store the trapdoor τO. Then, we simulate
all calls to Π.Proof in Open using the simulator (without a witness).
Transition - Game 1 → Game 2: A distinguisher D1→2 is an adversary against
adaptive zero-knowledge of Π, and, therefore, the probability to distinguish
Game 1 and Game 2 is negligible, i.e., | Pr[S2] − Pr[S1]| ≤ ZKO(κ).
Game 3: As Game 2, but we run (crsS, τS) ← SoK.SSetup(1κ) instead of crsS ←
SoK.Setup(1κ) upon running GKGen and store the trapdoor τS. Then we sim-
ulate all calls to SoK.Sign using the simulator (without a witness).
Transition - Game 2 → Game 3: A distinguisher D2→3 is an adversary against
simulatability of SoK. Therefore, the distinguishing probability is negligible,
i.e., | Pr[S3] − Pr[S2]| ≤ SIM(κ).
Game 4: As Game 3, but instead of (skO, pkO) ← Ω.KGen(1κ) in GKGen, we
obtain pkO from an IND-CPA (resp. IND-CCA2 ) challenger and set skO ← ⊥.
In the CCA2 case, we additionally maintain secret lists AU and OI, and upon
each call to the SndToU oracle we store AU[i] ← (gski, ˆCJi) = (((R, P ),
σ), ˆCJi). Then, we simulate the WReg oracle as follows
WReg(i, ρ) : As the original oracle, but we additionally parse ρ as
( ˆCJi, σJi). If there exists an index j so that AU[j][2] = ˆCJi, we parse
AU[j][1] as ((R, P ), σ) and set OI[i] ← (R,⊥). If there exists no such
index, we obtain ˆR using the decryption oracle and set OI[i] ← (⊥, ˆR).
Furthermore, we simulate the Open algorithm within the Open oracle as
follows.
Open(gpk, ok, reg, m, σ) : First, obtain ˆΨ = ρ ˆP using the straight-line
f -extractor. Then, obtain the lowest index i where either e(σ1[1][1],
ˆP ) = e(σ1[1][2], OI[i][2]) holds, or e(OI[i][1], ˆΨ ) = e(σ1[1][1], ˆP ) holds.
Compute a simulated proof τ and return (i, τ ) and ⊥ if no such index
exists.
If the extractor fails at some point, we choose b ←R {0, 1} and return b.
Transition - Game 3 → Game 4 (CPA): In the CPA case, we do not have to
simulate the open oracle, and we only obtain the opening key from an IND-
CPA challenger. Thus, this change is conceptual, i.e., Pr[S3] = Pr[S4].
Transition - Game 3 → Game 4 (CCA2 ): By the straight-line f -extractability
of the SoK, one can extract a witness ρ in every call to Open with overwhelm-
ing probability 1 − EXT(κ). Thus, both games proceed identically unless the
extraction fails, i.e., | Pr[S3] − Pr[S4]| ≤ qO · EXT(κ).
Game 5: As Game 4, but we compute the ciphertext ˆCJi in the Join algorithm
(executed within the SndToU oracle) as ˆCJi ← Ω.Enc(pk, ˆP ), i.e., with a con-
stant message that is independent of the user.
Transition - Game 4 → Game 5: A distinguisher D4→5 is a distinguisher for the
IND-CPA (resp. IND-CCA2) game of Ω. That is, | Pr[S5] − Pr[S4]| ≤ qSndToU ·
CPA(κ) ( resp. | Pr[S5] − Pr[S4]| ≤ qSndToU · CCA2(κ)).5
Game 6: As Game 5, but we re-add skO, i.e., we again obtain (skO, pkO) ←
Ω.KGen(1κ). In the CCA2 case, we again decrypt ourselves with in the WReg
simulation instead of using the decryption oracle.
Transition - Game 5 → Game 6: This change is conceptual. That is, Pr[S5] =
Pr[S6].
Game 7: As Game 6, but all calls to ChgRepR(M, ρ, pkR) are replaced by
SignR(ρ · M, skR).
Transition - Game 6 → Game 7: Under perfect adaption of signatures, the out-
put distributions in Game 6 and Game 7 are identical, i.e., Pr[S7] = Pr[S6].
Game 8: As Game 7, but we modify the Ch oracle as follows. Instead of run-
ning σ1 ← SignR(ρ · gskib
[1], skR), we choose S, T ←R G1, and compute σ1 ←
SignR((T, S), skR).
Transition - Game 7 → Game 8: We claim | Pr[S7]−Pr[S8]| ≤ qCh·DDH(κ). We
prove this separately below.
In Game 8, the simulation is independent of the bit b, i.e., Pr[S8] = 1/2; what
remains is to obtain a bound on the success probability in Game 0. In the CPA
case, we have that Pr[S0] ≤ 1/2 + qSndToU · CPA(κ) + qCh · DDH(κ) + ZKJ (κ) +
ZKO (κ) + SIM(κ), which proves Theorem 2. In the CCA2 case, we have that
Pr[S0] ≤ 1/2 + qSndToU · CCA2(κ) + qCh · DDH(κ) + ZKJ(κ) + ZKO(κ) + SIM(κ) +
qO · EXT(κ), which proves Theorem 3.
5 For compactness, we collapsed the qSndToU game changes into a single game change
and note that one can straight forwardly unroll this to qSndToU game changes where
a single ciphertext is exchanged in each game.
Proof (Proof (of Claim)). Below we will show that Game 7 and Game 8 are
indistinguishable by introducing further intermediate hybrid games.
Game 71: As Game 7, but we introduce a conceptual change which will make
the subsequent distribution changes easier to follow. In particular upon each
SndToU, we modify the simulation of Join so that we no longer choose r ←R Zp
to obtain (Ui, Q) ← (r · qP, qP ), but choose R ←R G1 and obtain (Ui, Q) ←
(qR, qP ).
Transition - Game 7 → Game 71: This is a conceptual change, i.e., Pr[S7] =
Pr[S71]. Observe that we do not need to know r, as the proofs upon Join are
simulated without a witness. Also the user secret keys gski = ((R, P ), σ) are
exactly the same as honest secret keys.
Game 7j (2 ≤ j ≤ qCh + 1): As Game 71, but we modify the Ch oracle as fol-
lows. For the ﬁrst j−1 queries, instead of running σ1 ← SignR(ρ·gskib
[1], skR),
we choose S, T ←R G1, and compute σ1 ← SignR((T, S), skR).
Transition - 7j → 7j+1 (1 ≤ j ≤ qCh + 1): For each transition, we present a hy-
brid game, which uses a DDH challenger to interpolate between Game 7j and
Game 7j+1. First, we obtain a DDH instance (aP, bP, cP ) ∈ G3
1 relative to BG.
Then we proceed as follows:
– Upon each SndToU, we modify the simulation of Join as follows. Let i be
the index of the user to join. We use the random self reducibility of DDH
to obtain an independent DDH instance (Ri, Si, Ti) RSR← (aP, bP, cP ) and
set CH[i] ← (Ri, Si, Ti). Then, we let (Ui, Q) ← (qRi, qP ).
– Up to the j − 1th query to Ch (i.e., for all queries where the answers are
already random in Game 7j), we compute σ1 by choosing S, T ←R G1, and
compute σ1 ← SignR((T, S), skR).
– Upon the jth query to Ch, we obtain (·, Sib , Tib ) ← CH[ib] and set σ1 ←
SignR((Tib , Sib ), skR).
– Starting from the j +1th query to Ch (i.e., for all queries where the answers
are still honest in Game 7j), we obtain (Rib ,·,·) ← CH[ib], choose ρ ←R Zp
and set σ1 ← SignR((ρRib , ρP ), skR).
In Game 7j the ﬁrst j − 1 answers are already random due to the previous
switches. Furthermore, the validity of the DDH instance (aP, bP, cP ) provided
by the challenger determines whether the answer of Ch for the jth query are
for user ib or random, i.e., if we are in Game j or in Game j + 1. That is,
| Pr[Sj] − Pr[Sj+1]| ≤ DDH(κ).
In Game 7qCh+1 all answers of Ch are random, i.e., this Game is equal to Game
8, i.e., Pr[S8] = Pr[7qCh+1]. We can conclude the proof by summing over the
distinguishing probabilities of all game changes which yields | Pr[S7]− Pr[S8]| ≤
qCh · DDH(κ).
Theorem 4. If SPS-EQ is EUF-CMA secure, and Π is sound, then Scheme 1 is
traceable.
Proof. We proceed using a sequence of games, where we let q ≤ poly(κ) be the
number of queries to the SndToI oracle.
Game 0: The original traceability game.
Game 1: As Game 0, but we obtain crsJ from a soundness challenger of Π.
Transition - Game 0 → Game 1: This change is conceptual. That is Pr[S0] =
Pr[S1].
Game 2: As Game 1, but after every successful execution of SndToI, we obtain
ˆR ← Ω.Dec(skO, CJi) and abort if e(Ui, ˆP ) (cid:54)= e(Q, ˆR).
Transition - Game 0 → Game 1: If we abort we have a valid proof πJi attesting
that (Ui, Q, ˆCJi, pkO) ∈ LRJ , but by the perfect correctness of Ω there exists no
ω such that CJi = Ω.Enc(pkO, r · ˆP ; ω) ∧ Ui = r · Q, i.e., (Ui, Q, ˆCJi, pkO) is
actually not in LRJ. Thus, both games proceed identically unless the adversary
breaks the soundness of Π in one oracle query, i.e., | Pr[S1] = Pr[S2]| ≤ q·S(κ).
Game 3: As Game 2, but we obtain BG and a public key pkR from an EUF-
CMA challenger of the SPS-EQ. Whenever an SPS-EQ signature is required,
the message to be signed is forwarded to the signing oracle provided by the
EUF-CMA challenger.
Transition - Game 2 → Game 3: This change is conceptual. That is, Pr[S2] =
Pr[S3].
If the adversary eventually outputs a valid forgery (m, σ), we know that σ con-
tains an SPS-EQ signature σ1 for some (rP, P ) such that we have never seen
a corresponding r ˆP , i.e., there is no entry i in the registration table where
ˆCJi contains r ˆP s.t. e(σ1[1][1], ˆP ) = e(σ1[1][2], r ˆP ) holds. Consequently, σ1 is
a valid SPS-EQ signature for an unqueried equivalence class and we have that
Pr[S3] ≤ F(κ). This yields Pr[S0] ≤ F(κ) + q · S(κ), which proves the theorem.
Theorem 5. If Π is sound and adaptively zero-knowledge, SoK is simulatable
and extractable, Σ is EUF-CMA secure, Ω is perfectly correct, and the co-CDHI
assumption holds, then Scheme 1 is non-frameable.
Proof. We proceed using a sequence of games. Thereby we let the number of
users in the system be q ≤ poly(κ).
Game 0: The original non-frameability game.
Game 1: As Game 0, but we guess the index i∗ that will be attacked by the
adversary. If the adversary attacks another index, we abort.
Transition - Game 0 → Game 1: The winning probability in Game 1 is the same
as in Game 0, unless an abort event happens, i.e., Pr[S1] = Pr[S0] · 1/q.
Game 2: As Game 1, but we run (crsJ, τJ) ← Π.S1(1κ) instead of crsJ ←
Π.Setup(1κ) upon running GKGen and store the trapdoor τJ. Then, we sim-
ulate all calls to Π.Proof in Join using the simulator (without a witness).
Transition - Game 1 → Game 2: A distinguisher D1→2 is an adversary against
adaptive zero-knowledge of Π, and, therefore, the probability to distinguish
Game 1 and Game 2 is negligible, i.e., | Pr[S2] − Pr[S1]| ≤ ZKJ (κ).
Game 3: As Game 2, but we obtain crsO from a soundness challenger upon
running GKGen.
Transition - Game 2 → Game 3: This change is conceptual. That is, Pr[S3] =
Pr[S2].
Game 4: As Game 3, but we setup the SoK in simulation mode, i.e., we run
(crsS, τS) ← SoK.SSetup(1κ) instead of crsS ← SoK.Setup(1κ) upon running
GKGen and store the trapdoor τS. Then, we simulate all calls to SoK.Sign
using the simulator, i.e., without a witness.
Transition - Game 3 → Game 4: A distinguisher D3→4 is an adversary against
simulatability of SoK. Therefore, the distinguishing probability is negligible,
i.e., | Pr[S4] − Pr[S3]| ≤ SIM(κ).
Game 5: As Game 4, but we choose the values r, q ←R Zp used in the Join algo-
rithm (executed within the SndToU oracle) when queried for user with index
i∗ beforehand and let (Ui∗ , Qi∗ ) denote (rqP, qP ). Then, on every Join (within
SndToU) for a user i (cid:54)= i∗ we check whether we have incidentally chosen the
same class as for user i∗. This check is implemented as follows: with ri being
the value for r chosen upon Join for user i, we check whether Ui∗ = ri · Qi∗
(note that this check does not require to know the discrete logarithms q and r
for user i∗).
Transition - Game 4 → Game 5: Both games proceed identically unless we have
to abort. We abort with probability guess(κ) = q/p−1 and we have that | Pr[S4]−
Pr[S5]| ≤ guess(κ).
Game 6: As Game 5, but we obtain a co-CDHI instance (aP, 1/a ˆP ) relative to
BG and choose τ ←R Zp. Then, we modify the Join algorithm (executed within
the SndToU oracle) when queried for user with index i∗ as follows. We set
(Ui∗ , Qi∗ ) ← (τ · P, aP ), and compute ˆCJi∗ ← Ω.Enc(pkO, τ · 1/a ˆP ) and store τ .
On successful execution we set gski∗ ← ((Ui∗ , Qi∗ ), σ(cid:48)) (note that πJi∗ as well
as the signatures in the GSig oracle are already simulated, i.e., the discrete log
of no Qi value is required to be known to the environment).
Transition - Game 5 → Game 6: Since τ is uniformly random, we can write it
as τ = ra for some r ∈ Zp. Then it is easy to see that the game change is
conceptual, i.e., Pr[S5] = Pr[S4].
Game 7: As Game 6, but for every forgery output by the A, we extract ρ ←
SoK.Extract(crsS, τS, (P, σ1[1][2]), σ1||m, σ2) and abort if the extraction fails.
Transition - Game 6 → Game 7: By the extractability of the SoK, one can ex-
tract a witness ρ with overwhelming probability 1− EXT(κ). Thus, both games
proceed identically unless the extractor fails | Pr[S6] − Pr[S7]| ≤ EXT(κ).
Game 8: As Game 7, but we further modify the Join algorithm when queried
for user with index i∗ (executed within the SndToU oracle) as follows. Instead of
choosing (uski∗ , upki∗ ) ← UKGen(1κ), we engage with an EUF-CMA challenger,
obtain upki∗ and set uski∗ ← ∅. If any signature is required, we obtain it using
the oracle provided by the EUF-CMA challenger.
Transition Game 7 → Game 8: This change is conceptual. That is, Pr[S7] =
Pr[S6].
Now we have three possibilities if A outputs a valid forgery.
1. If a signature for ˆCJi∗ was never requested, A is an EUF-CMA forger for
Σ and the forgery is ( ˆCJi∗ , σJi∗ ). The probability for this event is upper
bounded by f (κ).
2. Otherwise, we know that ˆCJi∗ is honestly computed by the environment
and—by the perfect correctness of Ω—thus contains τ/a ˆP , which leaves us
two possibilities:
(a) If e(σ[1][1], ˆP ) = e(σ[1][2], τ/a ˆP ), A is an adversary against co-CDHI,
since we can obtain (((τ · 1/aP, P ), σ(cid:48))) ← ChgRepR(σ1, ρ−1, pkR) and
use τ to output τ−1 · (τ · 1/aP ) = 1/aP . The probability for this to
happen is upper bounded by co-CDHI(κ).
(b) If e(σ[1][1], ˆP ) (cid:54)= e(σ[1][2], τ/a ˆP ), A has produced an opening proof for
a statement which is actually not in LRO. The probability for this to
happen is upper bounded by S(κ).
Taking the union bound we obtain nf8(κ) ≤ f (κ) + co-CDHI(κ) + S(κ), which
yields the following bound for the success probability in Game 1: Pr[S0] ≤ q ·
(nf8(κ) + ZKJ (κ) + SIM(κ) + guess(κ) + EXT(κ)), which is negligible.6
Theorem 6. If Ω is perfectly correct, and Σ is EUF-CMA secure, then Scheme 1
is weakly opening sound.
Proof (Proof (Sketch)). Upon honestly executing Join for users i and j, the prob-
ability that their r (resp. ˆR) values collide is negligible. The perfect correctness
of Ω and the EUF-CMA security of Σ thus uniquely determine user i as the signer
of σ with overwhelming probability. Then, it is easy to see that an adversary
against weak opening soundness is an adversary against soundness of Π.
5 Instantiation in the ROM
To compare our approach to existing schemes regarding signature size and com-
putational eﬀort upon signature generation and veriﬁcation, we present the
sign and veriﬁcation algorithms for an instantiation of our scheme with the
SPS-EQ from [FHS18, FHS15]. We instantiate SoKs in the ROM by applying the
transformation from [FKMV12] to Fiat-Shamir (FS) transformed Σ-protocols.
We note that the proofs performed within Join and Open, i.e., proving mem-
bership in the languages associated to NP relations RJ and RO, respectively, can
straight forwardly be instantiated using standard techniques. Therefore, and
since they are neither required within Sign nor Vrf, we do not discuss instantia-
tions here.
The SPS-EQ Scheme from [FHS18, FHS15]. Before we introduce the
approaches to obtain CPA-fully (resp. CCA2-fully) anonymous instantiations, we
recall the SPS-EQ scheme from [FHS18, FHS15], which provides all required
security properties, in Scheme 2 (we omit BGGen for brevity). Here, assuming
the DDH assumption to hold on the message space yields that diﬀerent message-
signature pairs from the same equivalence class cannot be linked.
6 We note that we could also write the three cases in the ﬁnal step as three additional
game changes where we abort upon the respective forgeries. However, we opted for
this more compact presentation, which also gives us the same bound.
KeyGenR(BG, (cid:96)): On input a bilinear-group description BG and vector length (cid:96) > 1
in unary, choose (xi)i∈[(cid:96)] ←R (Zp)(cid:96), set secret key sk ← (xi)i∈[(cid:96)], compute public key
pk ← ( ˆXi)i∈[(cid:96)] = (xi ˆP )i∈[(cid:96)] and output (sk, pk). We assume that all other algorithms
have implicit input BG.