### Determining Insertion Heights in HIRB

The height of a new (label, value) insertion in the HIRB is determined by a series of pseudorandom biased coin flips based on the hash of the label. The distribution of selected heights for insertions uniquely determines the structure of the HIRB tree because the process is deterministic, and thus the HIRB is uniquely represented.

### Parameters and Preliminaries

Two parameters are fixed at initialization: the expected branching factor \(\beta\) and the height \(H\). Throughout this section, we will use \(n\) to denote the maximum number of distinct labels that may be stored in the HIRB tree, and \(\gamma\) as a parameter that affects the length of hash digests.

A HIRB tree node with branching factor \(k\) consists of \(k-1\) label hashes, \(k-1\) values, and \(k\) vORAM identifiers, which represent pointers to the child nodes. This is illustrated in Figure 5, where \(h_i\) indicates \(Hash(label_i)\).

Similar to the vORAM itself, the length of the hash function should be long enough to reduce the probability of collision below \(2^{-\gamma}\). Therefore, we define \(|Hash(label)| = \max(2H \lg \beta + \gamma, \lambda)\).

**Note:** We need a random oracle for formal security. In practice, we used SHA1 initialized with a random string chosen when the HIRB tree is instantiated. The choice of heights is similar to the randomly-chosen node heights in a skip list. The parameter \(\gamma\) serves the same purpose in both HIRB and vORAM to avoid collisions in identifiers, so for simplicity, we assume they are the same.

### HIRB Node Structure

A HIRB tree node with branching factor \(k\) has the following components:
- \(k-1\) label hashes
- \(k-1\) values
- \(k\) vORAM identifiers

The size of a HIRB tree node with branching factor \(k\) is given by:
\[ \text{nodesize}_k = (k + 1)(2T + \gamma + 1) + k(|Hash(label)| + |value|), \]
where \(|value|\) is an upper bound on the size of the largest value stored in the HIRB. Each HIRB tree node is stored as a single block in the vORAM, so a HIRB node with branching factor \(k\) will be a vORAM block with length \(\text{nodesize}_k\).

### Parameter Constraints

- **Branching Factor \(\beta\):** This must be an integer greater than or equal to 1. It controls the efficiency of the tree and should be chosen according to the size of vORAM buckets. Specifically, one would choose \(\beta\) such that \(20 \cdot \text{nodesize}_\beta \leq Z\), where \(Z\) is the size of each vORAM bucket. Experimental results suggest that the constant 20 can be reduced to 6.
- **Height \(H\):** This must be set such that \(H \geq \log_\beta n\); otherwise, the root node may grow too large. We assume \(H\) is fixed at all times, which is easily managed when an upper bound \(n\) is known a priori.

### HIRB Tree Operations

- **Lookup Operation:** For a given label, the lookup operation fetches each HIRB node along the search path from the vORAM and returns the matching value.
- **Insertion and Deletion:** These operations involve first computing the height of the label using a pseudorandom sequence based on \(Hash(label)\). The height is determined by sampling from a geometric distribution with probability \((\beta-1)/\beta\). Inserting or removing an element involves splitting or merging nodes along the search path from the height of the item down to the leaf. This differs from a typical B-tree, where items are inserted at the leaf level and propagated up or down with splitting or merging. In the HIRB tree, the heights of all items are fixed, and insertions and deletions occur at the selected height within the tree.

### Efficiency and Obliviousness

- **Access Pattern:** Each get operation requires reading exactly \(H + 1\) nodes from the vORAM, and each set or delete operation involves reading and writing at most \(2H + 1\) nodes. To support obliviousness, each operation will require exactly \(2H + 1\) accesses, accomplished by padding with "dummy" accesses to ensure an indistinguishable access pattern.
- **Memory Management:** Only 2 HIRB tree nodes need to be stored in local memory at any given time, thanks to the unique determination of the height of each HIRB tree element. However, care must be taken in the implementation to handle vORAM identifiers correctly, ensuring that internal nodes are written back to vORAM before their children nodes are fetched.

### HIRB Tree Properties

- **Distribution of Items:** The heights of the labels are independent random samples from a truncated geometric distribution over \(\{0, 1, \ldots, H\}\) with probability \((\beta - 1)/\beta\).
- **Failure Probability:** The probability of failure in any operation is at most \(2^{-\gamma}\).
- **Operation Requirements:** Each operation requires exactly \(2H + 1\) node accesses, with only 2 nodes needing to be stored in temporary memory at any given time.
- **History Independence:** The data structure itself, not counting the pointers, is strongly history independent.

### vORAM+HIRB Properties

- **Performance and Security:** The vORAM+HIRB construction provides obliviousness, secure deletion, and history independence with leakage of \(O(n + n\lambda/(\log n))\) operations.
- **Parameter Optimization:** The optimal ratio \(Z/B\) between the size \(Z\) of each vORAM bucket and the expected size \(B\) of each block is crucial for performance. Experimental analysis suggests that a ratio of 4 works well, even in the worst case.

### Evaluation

- **Empirical Analysis:** We conducted two empirical analyses of the vORAM+HIRB system. First, we determined the most effective size for vORAM buckets with respect to the expected block size. Second, we implemented the vORAM+HIRB and measured its performance in storing a realistic dataset of key-value pairs of 22MB in size.
- **Optimizing vORAM Parameters:** The ratio \(Z/B\) was found to be a critical performance parameter. Our experimental results show that a ratio of 4 works well, balancing communication cost and stash overflow risk.

For detailed information on the HIRB operations, refer to Appendix B.