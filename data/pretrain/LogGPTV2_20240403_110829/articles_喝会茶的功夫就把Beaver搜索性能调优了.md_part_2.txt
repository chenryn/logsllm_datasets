*\# 需要优化的目标指标*
*target_metric_name=\"search_latency\"*
*\# 待调整的配置项*
*target_knob_set=\[\'\--enable_query_cache\', \# 启用query cache*
*\'\--max_concurrency_tasks_per_search\', \#
每个Search允许同时执行的数目*
*\'\--max_per_search_ram\', \# 单个Search最大占用的内存*
*\'\--max_per_sub_search_ram\', \# 单个SubSearch最大占用的内存*
*\'\--block_ids_per_batch\'\] \# 每个SubSearch的Block数目*
以下是knob和metric在controller.py中的声明样板：
*knob_set=\\*
*{\"\--max_concurrency_tasks_per_search\": \# 配置项*
*{*
*\"changebyyml\": True, \# True表示通过修改配置文件来调节*
*\"set_func\": None, \#
若changebyyml==False，则在此指定修改参数的函数名（在controller.py中定义函数），一般是不需要重启beaver的配置*
*\"minval\": 0, \# if type==int, indicate min possible value*
*\"maxval\": 0, \# if type==int, indicate max possible value*
*\"enumval\": \[4, 6, 8\], \# if type==enum, list all valid values*
*\"type\": \"enum\", \# int / enum*
*\"default\": 0 \# default value*
*}*
*}*
*metric_set=\\*
*{\"search_latency\":*
*{*
*\"read_func\": read_search_latency, \#
声明查看该指标的函数（函数也定义在controller.py里）*
*\"lessisbetter\": 1, \# whether less value of this metric is better(1:
yes)*
*\"calc\": \"ins\", \#
ins表示该参数的值就是benchmark之后查看的结果。inc表示该参数是incremental的，需要把benchmark之后和之前的值相减作为结果。*
*},*
*}*
beaver重启操作比较暴力，使用os.popen管道命令直接在服务器上执行kill后更新配置文件重新启动，具体操作在controller.py文件中restart_beaver_datanode()函数中。在本次测试中，脚本直接运行在beaver运行的服务器中，首先需要在settings.py文件中声明beaver的启动命令和各项配置文件路径，指定配置文件临时存放路径。使用"ps
-ef\|grep beaver_datanode"即可查看beaver的启动命令。具体配置示例如下：
*autotestdir=\"/tmp/auto_beaver_datanode\"*
*beaver_datanode_file=\"/opt/rizhiyi/parcels/beaver_datanode-3.7.0.0/bin/beaver_datanode\"*
*gflagsfile=\"/run/rizhiyi_manager_agent/process/2002-beaver_datanode/config/beaver_datanode.gflags\"*
*config_path=\"/run/rizhiyi_manager_agent/process/2002-beaver_datanode/config/beaver_datanode.pb\"*
*log_dir=\"/data/rizhiyi/logs/beaver_datanode\"*
## 四、测试结果
### knobs
此次测试主要测试了以下配置项：
  ---------------------------------- ------------------------------ -------------- ------------------------
  Options                            description                    valid range    confile
  enable_query_cache                 启用query cache                \[\'false\',   beaver_datanode.gflags
                                                                    \'true\'\]     
  max_concurrency_tasks_per_search   每个Search允许同时执行的数目   \[4, 6, 8\]    
  max_per_search_ram                 单个Search最大占用的内存       \[198\]        
  max_per_sub_search_ram             单个SubSearch最大占用的内存    \[99\]         
  block_ids_per_batch                每个SubSearch的Block数目       \[16, 18, 20\] 
  ---------------------------------- ------------------------------ -------------- ------------------------
### metrics
我们选择了如下几个metrics作为优化指标。
-   search_latency：搜索延迟ms
-   compaction_mem：占用内存比例%
-   compaction_cpu：占用cpu比例%
注：knobs和metrics均在contorller.py文件中定义
### 脚本具体使用步骤
1.  安装python3.6
\$ tar -xf Python-3.6.12.tgz -C /tmp
\#
编译前检查系统openssl版本是否为1.0.2k以上版本，并安装所需依赖包，否则编译Python时会报错。
\$ yum install -y openssl\* bzip2\* xz-devel zlib-devel libffi-devel gcc
gcc-c++ sqlite sqlite-devel
\$ cd /tmp/Python-3.6.12/
\$ ./configure
\# 编译无报错后可以执行make安装，默认会安装到/usr/local/lib/python3.6
\# 使用该命令参数可以安装到指定位置： ./configure \--prefix=/xxx
\$ make && make install
2.  安装虚拟环境，切换到python3.6环境，下载自动化调参工具，并使用pip安装相关依赖包
\$ python3.6 -m venv autoenv
\$ source autoenv/bin/activate
(autoenv)\$ git clone https://github.com/woxiang-H/auto-beaver.git
(autoenv)\$ cd auto-beaver
(autoenv)\$ pip install -r requirements.txt
3.  按照之前具体实现中提到的需要修改的配置，修改auto-beaver下settings.py文件。
4.  调整好settings.py之后，执行python pipeline.py
等待结果收敛，查看推荐配置
\################## data \##################
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--previous:\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
rowlabels, finish_time, knobs, metrics
1 , 2021-05-11 16:41:02 , \[0. 1. 0. 0. 1.\] , \[124.71111111 1.4 31.8
\]
2 , 2021-05-11 16:43:41 , \[0. 1. 0. 0. 0.\] , \[127.38888889 1.4 31.6
\]
3 , 2021-05-11 16:46:10 , \[1. 1. 0. 0. 0.\] , \[127.54444444 1.4 33.3
\]
4 , 2021-05-11 16:48:48 , \[0. 1. 0. 0. 2.\] , \[126.81111111 1.4 31.6
\]
5 , 2021-05-11 16:51:27 , \[1. 1. 0. 0. 2.\] , \[126.23333333 1.4 31.5
\]
6 , 2021-05-11 16:54:06 , \[0. 1. 0. 0. 2.\] , \[124.63333333 1.4 31.8
\]
7 , 2021-05-11 16:56:35 , \[1. 2. 0. 0. 1.\] , \[125.13333333 1.4 32.6
\]
8 , 2021-05-11 16:59:14 , \[1. 0. 0. 0. 1.\] , \[125.5 1.4 31.8\]
9 , 2021-05-11 17:01:53 , \[1. 0. 0. 0. 2.\] , \[131.18888889 1.4 31.9
\]
10 , 2021-05-11 17:04:31 , \[0. 2. 0. 0. 1.\] , \[124.22222222 1.4 31.5
\]
11 , 2021-05-11 17:07:53 , \[0. 2. 0. 0. 2.\] , \[128.48888889 1.4 31.4
\]
12 , 2021-05-11 17:11:14 , \[0. 2. 0. 0. 1.\] , \[123.74444444 1.4 31.9
\]
13 , 2021-05-11 17:14:35 , \[0. 1. 0. 0. 1.\] , \[123.34444444 1.4 31.1
\]
14 , 2021-05-11 17:17:56 , \[0. 2. 0. 0. 1.\] , \[127.08888889 1.4 31.5
\]
15 , 2021-05-11 17:21:17 , \[0. 0. 0. 0. 1.\] , \[124.66666667 1.4 31.8
\]
16 , 2021-05-11 17:24:38 , \[0. 1. 0. 0. 1.\] , \[123.34444444 1.4 31.2
\]
17 , 2021-05-11 17:27:59 , \[0. 2. 0. 0. 1.\] , \[126.15555556 1.4 31.2
\]
18 , 2021-05-11 17:31:21 , \[0. 1. 0. 0. 1.\] , \[126.26666667 1.4 31.6
\]
19 , 2021-05-11 17:34:41 , \[0. 0. 0. 0. 1.\] , \[123.67777778 1.4 31.3
\]
20 , 2021-05-11 17:38:04 , \[0. 1. 0. 0. 1.\] , \[127.13333333 1.4 31.5
\]
21 , 2021-05-11 17:41:15 , \[0. 0. 0. 0. 1.\] , \[126.35555556 1.4 33.1
\]
22 , 2021-05-11 17:44:36 , \[0. 1. 0. 0. 1.\] , \[124.56666667 1.4 31.5
\]