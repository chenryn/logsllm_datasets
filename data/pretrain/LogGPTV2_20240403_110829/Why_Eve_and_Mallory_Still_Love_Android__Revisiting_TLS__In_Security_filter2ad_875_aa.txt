title:Why Eve and Mallory Still Love Android: Revisiting TLS (In)Security
in Android Applications
author:Marten Oltrogge and
Nicolas Huaman and
Sabrina Amft and
Yasemin Acar and
Michael Backes and
Sascha Fahl
Why Eve and Mallory Still Love Android: 
Revisiting TLS (In)Security in Android Applications
Marten Oltrogge, CISPA Helmholtz Center for Information Security; 
Nicolas Huaman, Sabrina Amft, and Yasemin Acar, Leibniz University Hannover; 
Michael Backes, CISPA Helmholtz Center for Information Security; Sascha Fahl, 
Leibniz University Hannover
https://www.usenix.org/conference/usenixsecurity21/presentation/oltrogge
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Why Eve and Mallory Still Love Android:
Revisiting TLS (In)Security in Android Applications
Marten Oltrogge∗
marten.oltrogge@cispa.saarland
Nicolas Huaman†
PI:EMAIL
Yasemin Acar†
PI:EMAIL
Michael Backes∗
Sabrina Amft†
PI:EMAIL
Sascha Fahl†
backes@cispa.saarland
PI:EMAIL
∗CISPA Helmholtz Center for Information Security
†Leibniz University Hannover
Abstract
Android applications have a long history of being vulner-
able to man-in-the-middle attacks due to insecure custom
TLS certiﬁcate validation implementations. To resolve this,
Google deployed the Network Security Conﬁguration (NSC),
a conﬁguration-based approach to increase custom certiﬁ-
cate validation logic security, and implemented safeguards in
Google Play to block insecure applications.
In this paper, we perform a large-scale in-depth investi-
gation of the effectiveness of these countermeasures: First,
we investigate the security of 99,212 NSC settings ﬁles in
1,335,322 Google Play apps using static code and manual anal-
ysis techniques. We ﬁnd that 88.87% of the apps using custom
NSC settings downgrade security compared to the default set-
tings, and only 0.67% implement certiﬁcate pinning. Second,
we penetrate Google Play’s protection mechanisms by trying
to publish apps that are vulnerable to man-in-the-middle at-
tacks. In contrast to ofﬁcial announcements by Google, we
found that Play does not effectively block vulnerable apps.
Finally, we performed a static code analysis study of 15,000
apps and ﬁnd that 5,511 recently published apps still contain
vulnerable certiﬁcate validation code.
Overall, we attribute most of the problems we ﬁnd to insuf-
ﬁcient support for developers, missing clariﬁcation of secu-
rity risks in ofﬁcial documentation, and inadequate security
checks for vulnerable applications in Google Play.
1 Introduction
Studying the security of Android applications has a long
history [35] and was heavily inﬂuenced by the seminal pa-
per by Enck et al. in 2011 [52]. A myriad of investigations
demonstrated that developers struggle with different aspects
of implementing Android application security mechanisms
correctly [46, 50–52, 73, 78]. The number of affected users
of Android applications vulnerable to different types of at-
tacks due to incorrect security implementations goes into
billions [31].
While developers ﬁght with many different security chal-
lenges, custom TLS certiﬁcate validation security received
attention early on in 2012 [54, 56] and has become a hotly
debated topic over the years [47, 48, 56, 58, 74, 76, 77, 84, 85].
The problem not only affects Android applications but turns
out to be a broader issue in secure programming [38, 42, 69].
Researchers proposed different countermeasures which all fo-
cus on simplifying the process of implementing non-standard
TLS certiﬁcate validation such as certiﬁcate or public key
pinning or the secure use of self-signed certiﬁcates for appli-
cations under development [56, 74, 85].
However, the problem not only received attention from
academia. Google introduced countermeasures and novel
mechanisms for developers in Android and added further
security policies and safeguards to Google Play (cf. Table 1).
Their goal was to establish new and safer defaults such as
enforcing TLS for all network connections by default and
blocking vulnerable apps and updates from Google Play.
Therefore, Google introduced a signiﬁcant change in
Android 7 in 2016: The Network Security Conﬁguration
(NSC) [19] allows developers to implement custom certiﬁcate
validation logic using an XML conﬁguration ﬁle, instead of
requiring custom code.
Additionally, Google Play announced novel security poli-
cies and safeguards in 2016 and 2017 [66–68]. They prohibit
new apps and updates to include insecure certiﬁcate validation
logic. While previous work (e.g. [70, 75, 80, 86] found vulner-
able apps in Google Play that were published after 2016, our
study is the ﬁrst detailed analysis of Google Play’s safeguard
efﬁcacy.
Although the goal of all introduced changes is to improve
TLS security for Android applications and ﬁx the disastrous
circumstances that researchers uncovered in 2012 [54] and
2013 [56], the efﬁcacy and success of this undertaking has not
yet been investigated in-depth. However, incidents illustrate
that Network Security Conﬁguration is not a guarantee for
secure certiﬁcate validation logic in Android apps: In 2019,
Google’s ofﬁcial Gmail app for Android had come with an
insecure NSC setting that opened the possibility for a MitMA
USENIX Association
30th USENIX Security Symposium    4347
via user-installed CAs. This vulnerability affected 43% of
the Android ecosystem [39].
The overall goal of this work is to investigate the current
status of TLS certiﬁcate validation security in Android apps.
To the best of our knowledge, we provide the ﬁrst large-
scale and in-depth evaluation of the success of Android’s
NSC approach combined with an analysis of the new security
policies and safeguards in Google Play. We also revisit the
security of custom certiﬁcate validation implementations in
Android apps as performed by Fahl et al. [54]. Overall, we
make the following contributions:
NSC adoption and security. We measure the adoption of
the NSC in 1,335,322 free current Android apps from Google
Play, and ﬁnd that 99,212 apps include custom NSC settings.
For these apps, we evaluate the security of their custom NSC
settings and ﬁnd that more than 88.87% of them weaken se-
curity by downgrading safe-defaults. In contrast, only 0.67%
implement certiﬁcate pinning. Our ﬁndings illustrate that cer-
tiﬁcate validation remains a challenging task for developers
and requires further attention from the security research com-
munity and industry. We report and discuss this contribution
in Sections 4 and 4.1.
Efﬁcacy of Google Play Safeguards. We perform multiple
experiments to evaluate the efﬁcacy of Google Play TLS
security policies and safeguards. We ﬁnd that Google Play
only catches trivial insecure certiﬁcate validation code but
still accepts most of the dangerous code already found in
previous work in 2012 [54, 58]. We replicate work by Fahl
et al. [54] and ﬁnd that out of 15,000 current Android apps
in Google Play more than 5,511 contain custom certiﬁcate
validation code that is vulnerable to MitMAs. These ﬁndings
are in stark contrast with Google’s ofﬁcial statements [66–68]
and demonstrate the importance of further research in this
area. We report and discuss this contribution in Section 5.
Discussion and Recommendations. Based on our ﬁndings,
we provide an in-depth discussion of the successes and fail-
ures of the NSC approach and Google Play’s security policies
and safeguards. We illustrate recommendations to improve
TLS certiﬁcate validation security in future Android versions.
2 Background on TLS and Android
TLS is the most widely deployed network protocol to secure
communication channels between clients and servers [36, 82,
83]. It provides conﬁdentiality, integrity, and authenticity for
information shared between network end-points and can pre-
vent active and passive MitMAs. While mutual authentication
for clients and servers is supported, in most cases only the
server’s identity is veriﬁed. A server is considered trustworthy
if the certiﬁcate was issued by a trusted certiﬁcate authority
(CA) for the correct hostname and is still valid 1. Most mod-
1The entire X.509 certiﬁcate validation process is much more complex,
but left out here for brevity. We refer the interested reader to [43].
ern operating systems include a pre-installed list of trusted
root CA certiﬁcates. As of June 2020 on Android this list
contains 138 entries [4]. While Android correctly validates
TLS certiﬁcates signed by one of those 138 CAs by default,
developers may choose to create their validation logic for
several reasons, such as using a custom CA [54]. Before the
introduction of NSC, developers had to implement custom
certiﬁcate validation logic using Android APIs [14, 30, 32].
However, using custom code commonly leads to vulnerabili-
ties [54, 58], such as failing to correctly implement practices
like certiﬁcate pinning or leaving custom code intended for
debugging in production code. Even when putting consider-
able effort into secure certiﬁcate validation implementations,
the Android TLS API makes it unnecessarily complicated
for developers to implement secure certiﬁcate validation (cf.
[54]). For example, before Android 4.2, there was no proper
API that returned the trusted certiﬁcate chain as constructed
by the system’s certiﬁcate validation routines. Hence, attack-
ers were able to manipulate the certiﬁcate list as presented
by the server. This shortcoming made the implementation
of correct CA certiﬁcate pinning particularly difﬁcult and
made many pinning implementations in the wild vulnerable
to MitMAs [71], affecting both app developers as well as
libraries such as OkHttp’s CertiﬁcatePinner [8] [34].
To reduce the threats accompanying insecure implementa-
tions, Google introduced signiﬁcant changes for X.509 certiﬁ-
cate validation. We categorize changes into the introduction
and updates of NSC and security policy changes and safe-
guards in Google Play. Table 1 illustrates important changes
in chronological order.
2.1 Network Security Conﬁguration
With the release of Android 7, Google introduced the Net-
work Security Conﬁguration (NSC) [19]. NSC supports cer-
tiﬁcate pinning, custom CA certiﬁcates and debugging ﬂags,
both globally for all network connections or for speciﬁc do-
mains [19].
Figure 1 gives an overview of
the structure of
an NSC ﬁle and how the different features can be
combined in ,  and
 sections. Below we provide details for
the NSC details that are relevant for our work.
Cleartext Trafﬁc Support This ﬂag can be used to enforce
HTTPS or allow HTTP for network connections. Developers
can make global or domain speciﬁc conﬁgurations. Starting
with Android 9, cleartext trafﬁc via HTTP is not permitted by
default anymore [45]. Instead, HTTPS is used by default [63].
Developers can set the cleartextTrafficPermitted ﬂag
if they want to enable HTTP (cf. Listing 3 in the Ap-
pendix) [21]. Alternatively, developers can conﬁgure cleart-
ext trafﬁc support in the application manifest by setting the
android:usesCleartextTraffic attribute [6]. Since An-
4348    30th USENIX Security Symposium
USENIX Association
Table 1: Chronological overview of TLS-related events in the history of Android:
Date
Android Version
1
2015-10-05 Android 6 (API 23)
2 2016-05-17
3
2016-08-22 Android 7 (API 24)
4 2016-11-25
2017-03-01
5
6 2017-08-21 Android 8 (API 26)
7
2018-08-01
8 2018-08-08 Android 9 (API 28)
9
2018-11-01
10
11
2019-08-01
2019-11-01
Description
Android introduces the "android:usesCleartextTrafﬁc" ﬂag for Manifest ﬁles, and removes the Apache HTTP
Client library [33, 59, 64].
Google Play blocks apps containing unsafe implementations of the X509TrustManager interface [67].
Android introduces NSC, distrusts user-installed certiﬁcates, and ignores the "android:usesCleartextTrafﬁc"
ﬂag in case a NSC ﬁle is available [44, 60].
Google Play blocks apps containing unsafe implementations of the onReceivedSslError method in Web-
Views [66].
Google Play blocks apps containing unsafe implementations of the HostnameVeriﬁer interface [68].
Android adds support for the "cleartextTrafﬁcPermitted" ﬂag for the WebView class [61].
New apps need to target at least Android 8; makes new safe defaults introduced with Android 7 (2016-08-22)
and Android 8 (2017-08-21) [49, 65] available to those apps.
Sets "cleartextTrafﬁcPermitted" to false; enforces HTTPS connections by default. Developers can revert this
for speciﬁc domains or globally in NSC) settings [63].
App updates need to target at least Android 8; makes new safe defaults introduced with Android 7 (2016-08-22)
and Android 8 (2017-08-21) [49, 65] available to existing apps.
New apps need to target at least Android 9; makes new safe defaults introduced with Android 9 (2018-08-
08) [49, 65] available to those apps.
Updates need to target at least Android 9; existing apps beneﬁt from new safe defaults introduced with
Android 9 (2018-08-08) [49, 65].
Affects Android OS & NSC – Affects Google Play security policy & safeguards.
domain
NSC
ﬁles
1:
contain
and 
,
Figure
conﬁgu-
rations, including custom CA () and
certiﬁcate pinning () conﬁgurations. Clear-
text
trafﬁc can be permitted or forbidden using the
clearTextTrafficPermitted ﬂag globally for speciﬁc
domains.
droid 9, the value is true by default. However, it is only hon-
ored if no NSC ﬁle is provided by the developer.
Certiﬁcate Pinning Allows developers to implement cer-
tiﬁcate pinning [53]. Connections can then only be established
if at least one certiﬁcate from the server’s certiﬁcate chain
matches any of the registered pins. In contrast to before An-
droid 7, developers do not need to write custom Android code.
Developers need to specify expected pinning information in-
side  tags within the  environment.
Custom Trust Anchors Allows developers to customize
the set of trusted CA certiﬁcates – e.g., distrusting pre-
installed system CA certiﬁcates, introducing additional CA
certiﬁcates, or allowing user-installed CA certiﬁcates – for