execution authentication mechanism for different values 
of M 
1200
1000
800
600
400
200
0
b
z
i
p
2
(
%
1
7
)
g
o
b
m
k
(
%
1
1
3
)
h
m
m
e
r
(
%
2
4
)
original
modifie d
m
c
f
(
%
1
4
)
m
i
l
c
(
%
2
1
)
n
a
m
d
(
%
1
0
)
s
o
p
l
e
x
(
%
1
3
)
l
i
b
q
u
a
n
t
u
m
%
9
3
)
(
.
Figure 3.    Run times (in seconds) of benchmarks with 
and without execution authentication.   Optimized 
authentication configurations from Table 1 are used. 
We  applied  our  approach  to  authenticate  the 
remote execution of the  well-known  SPEC CPU2006 
benchmarks  [SPEC  06].    The  results  presented  here 
do  not  show  the  complete  set  of  benchmarks  for  the 
sake  of  brevity;  instead  we  have  selected  a  few 
benchmarks  whose  behavior  is  representative,  vis-à-
vis 
  The  signature 
components  used  in  the  prototype  implementation 
described here are addresses of the four most recently-
executed  branches,  selected  general  register  values, 
stall cycle count and the id the most recent system call. 
the  performance  overhead. 
460460
any 
We  evaluated  our  scheme  with  the  option  of 
temporarily  disabling  specific,  heavily-encountered 
checkpoints,  as  discussed  above. 
  We  ran  each 
benchmark 5 times and used the harmonic mean of the 
five  runs  to  get  the  execution  times  reported  here.   
Our  compute  server  and  authentication  server  are 
identical and have a 2.4 GHz Intel Core Duo processor 
with 2 Gbytes of RAM, connected via a 100 Gbits/sec. 
switched Ethernet.   
without 
execution 
time  with 
to  109  (1E9). 
the  use  of  our 
Figure  2  depicts  the  percentage  increase  in  the 
execution 
remote 
authentication  mechanism  against  the  base  case  – 
normal 
execution 
authentication.    For the results shown in Figure 2, the 
value of N, the threshold count for disabling signature 
checking  at  a  specific  checkpoint  was  set  at  1000  – 
that  is,  if  a  checkpoint  was  encountered  1000  times, 
signature  checking  was  temporarily  disabled  at  this 
checkpoint for the following M executed instructions.   
The  values  of  M  used,  as  shown  in  Figure  2,  ranged 
from  100,000  (1E5) 
  For  some 
benchmarks,  increasing  M  has  the  expected  result  – 
the  overhead  for  execution  authentication  decreases.   
For benchmarks like gobmk and soplex, increasing M 
has  little  effect  on  the  overhead.    The  soplex  and 
gobmk  benchmarks  both  have  fewer  instructions 
executed  between  checkpoints  as  the  average  basic 
block  sizes  are  very  small  for  these  programs, 
resulting in a high authentication overhead.    The only 
way to reduce the execution overhead in this case will 
be  to  overlap  signature  transmission  and  verification 
with execution and to use a different set of values for 
M and N.    Another general approach for reducing the 
authentication  overhead  will  be  to  use  the  notion  of 
superblocks [Hwu+ 93] or dominator blocks to reduce 
the  number  of  checkpoints  and  still  retain  a  high 
degree of coverage of the expected control flow paths.   
In  general,  M  and  N  need  to  be  tuned  independently 
for each benchmark and possibly for each checkpoint.   
Investigations along these lines are in progress. 
execution 
Table I essentially presents a superset of the data 
depicted in Figure 2 and shows the absolute run times, 
the  number  of  traps  (calls)  made  to  sys_checkpoint 
and the percentage increase in execution time with the 
proposed 
authentication  mechanism 
enabled.    Data for N=1000 and different values of M 
is  presented  in  Table  I.    Figure  3  depicts  the  actual 
runtimes for the selected SPEC benchmarks – one for 
the  benchmark  as  such  without  any  execution 
authentication  and  the  best  execution  time  obtained 
from the data of Table I with the use of the proposed 
authentication mechanism. 
As  mentioned  above,  overlapping  execution  and  the 
control  flow  signature  verification  can  reduce  the 
overhead  of  authenticating  execution  –  we  are 
461461
this 
and 
implementing 
some  other 
currently 
optimizations to further the overhead of authenticating 
execution. 
9.  Advantages of the DARE Framework 
The  DARE  framework  for  validating  remote 
execution directly addresses the limitations of existing 
techniques, as described in Section 2.    The advantages 
of the DARE framework are as follows.   
•  DARE  is  a  generic  framework  that  can  be 
customized  to  use  a  variety  of  signatures,  permit 
users  to  take  optional  actions  to  change  global 
information that form part of the signature after each 
validation,  change  the  frequency  of  challenges  and 
responses dynamically to tailor the tradeoff between 
performance and coverage. 
to 
to 
•  Automated, 
high-coverage 
checkpoint 
generation:  Unlike  other  approaches,  we  can 
generate  a  set  of  checkpoints  into  a  pool  of 
checkpoint addresses automatically.   
selection 
checkpoint 
•  Dynamic  checkpoint  selection  and  trapping: 
Dynamic 
and  dynamic 
breakpoint  insertion  allows  us  to  overcome  a 
fundamental security hole in existing solutions such 
as [BOY 03a, BOY 03b, HFS 98, KJ 03, XDC 04]. 
•  Use of secure control flow signatures: To prevent 
the  attacks  like  guessing  the  signature  by  using 
simulator  like  programs  and/or  replaying  previous 
communication  messages,  we  use  the  control  flow 
specific  properties  to  generate  the  signature  of 
execution at each checkpoint.     
•  Localized performance impact: From the view of 
performance,  while  we  can  check  the  function  call 
sequence  including  system  call  sequence  for  the 
monitored  code,  DARE  affects  only  the  target 
process/monitored  code,  unlike  the  techniques  of 
globally  intrusive  mechanisms  such  as  those  of 
[XDC 04] and [HFS 98].     
transparent 
the  user  and  also 
Transparency: A good security mechanism should be 
fully 
the 
programmer.    DARE  is  fully  transparent  to  both  in 
this respect.    The programmer does not need to decide 
on  the  checkpoint  list,  function  calls  for  monitoring; 
nor  does  the  programmer  need  to  worry  about  the 
configuration of the authentication entity.     
10.    Conclusions 
This paper proposed a generic framework  with a 
new approach for validating the remote execution of a 
program.    DARE  differs  from  existing  approaches  in 
its  use  of  dynamic  checkpoint  selection  and  dynamic 
generation of signatures based on the control flow path 
and  the  side  effects  of  execution.    These  signatures 
are  generated  using  the  model  specific  registers  used 
for  CPU  and  system  monitoring  as  found  in  most 
contemporary  microprocessors.    We  described  the 
implementation  of  a  prototype  system  in  Linux.    We 
also proposed a technique for reducing the overhead of 
execution  authentication  on  a  programs  run  time  by 
temporarily  disabling  signature  generation  at  heavily 
encountered checkpoints.     
in 
An 
important  consideration 
the  runtime  overhead  of 
the  proposed 
execution mechanism has to do with the exact nature 
of  the  signature  for  control  flow.    In  most  modern 
desktop/laptop/server  processors, 
the  MSRs  hold 
statistics  of  cache  misses,  accuracy  of  branch 
prediction,  committed  instruction  count,  TLB  miss 
rates  etc.    We  are  investigating  the  use  of  these 
measures, along with explicit control flow information 
held  in  the  MSRs  (such  as  last  few  branches  and 
system calls executed) to get generalized signatures of 
control flow that can be matched stochastically against 
a  set  of  reference  signatures.    Such  generalized 
signatures  can  possibly  reduce 
the  number  of 
checkpoints needed and may well hold the promise of 
reducing 
the  proposed 
scheme.    Last  but  not  the  least;  we  have  started 
investigations  to  formally  prove  that  the  proposed 
execution  authentication  mechanism  is  robust  and 
correct. 
Acknowledgements 
This work is supported in part by the NSF (Award 
Nos. CNS 0454298) and by the Center of Computing 
Technologies at SUNY-Binghamton. 
References 
[AMD  05]  Advanced  Micro  Devices,  Secure  Virtual 
Machine Architecture Reference Manual, 2005.     
[Ba 02] Bill Arbaugh, "Improving the TCPA Specification," 
Computer, vol.    35,   no.    8,   pp.    77-79,   Aug.,   2002 
[BOY  03a]  Mario  Baldi,  Yoram  Ofek,  Moti  Yung,  “The 
TrustedFlow  Protocol: 
for 
Authenticated  Execution”,  in  Proc.    IEEE  Workshop  on 
Information Assurance, 2003. 
[BOY  03b]  Mario  Baldi,  Yoram  Ofek,  Moti  Yung, 
“Idiosyncratic  Signatures  for  Authenticated  Execution,  The 
TrustedFlow, Protocol and its Application to TCP”, in Proc.   
Sym.    on Comm.    Systems and Networks (CSN), 2003. 
[CM  05]  Simon  P.    Chung,  Aloysius  K.    Mok,  "On 
Random-Inspection-Based Intrusion Detection", in Proc.    of 
the  8-th  Int’l  Symp.  on  Recent  Advances  in  Intrusion 
Detection (RAID 2005). 
[HFS  98]  Steven  A.    Hofmeyr,  Stephanie  Forrest,  Anil 
Somayaji,  “Intrusion  Detection  using  Sequences  of  System 
Calls”, Journal of Computer Security, Vol.    6, No.    3, 1998. 
[Hwu+  93]  W.    Hwu  et  al,  “The  Superblock:  An  Effective 
Idiosyncratic  Signatures 
462462
at: 
Manual, 
Available 
Developer’s 
  Available 
Technique  for  VLIW  and  Superscalar  Compilation”,  The 
Jrnl of Supercomputing, 1993, pp.    229-248. 
[Int  04]  Intel  Corpn.,  Trusted  Platform  Module  (TPM): 
Quick Reference Guide, 2004. 
[Int  07]  Intel  Corporation,  Model-speciﬁc  registers  and 
functions. 
  http://www.intel.com/ 
design/intarch/techinfo/Pentium/mdelregs.htm, 2007. 
[Int 08] Intel Corporation, Intel® 64 and IA-32 Architectures 
Software 
at 
http://www.intel.com/products/processor/manuals/ 
[Ka  07]  Kauer,  B.,  "OSLO:  Improving  the  Security  of 
Trusted Computing", in Proc. of the 16th USENIX Security 
Symposium, 2007.     
[KJ 03] Rick Kennell and Leah H.    Jamieson, “Establishing 
the  genuinity  of  remote  computer  systems”,  in  Proc.    12th 
USENIX Security Symposium, USENIX Association, 2003. 
[MPP+  07]  Jonathan  M.    McCune,,Bryan  Parno,  Adrian 
Perrig,  Michael  K.    Reiter,  Hiroshi  Isozaki,  Flicker:  An 
Execution  Infrastructure  for  TCB  Minimization,  in  Proc.   
EuroSys, 2008 
[MPPRS 07] Jonathan M.    McCune, Bryan Parno,    Adrian 
Perrig,  Michael  K.    Reiter,  Arvind  Seshadri,Minimal  TCB 
Code  Execution,  in  Proc.    IEEE  Symposium  on  Security 
and Privacy, 2007 
[MWR  99]  F.    Monrose,  P.    Wyckoff,  and  A.    Rubin, 
“Distributed  Execution  with  Remote  audit”,  in  Proc.    of 
ISOC Network and Distributed System Security Symposium 
(NDSS 99), Feb.    1999 
[SLQP  07]  Arvind  Seshadri,  Mark  Luk,  Ning  Qu,  Adrian 
Perrig,  SecVisor:  A  Tiny  Hypervisor  to  Provide  Lifetime 
Kernel Code Integrity for Commodity OSes, Symposium on 
Operating Systems Principles, 2007 
[SPD  04]  Arvind  Seshadri,  Adrian  Perrig,  Leendert  van 
Doorn,  “Using  Software  Based  Attestation  for  Verifying 
Embedded  Systems  in  Cars”,  in Proc.    Embedded Security 
in Cars Conference (ESCAR), 2004   
[SPD  05]  Elaine  Shi,  Adrian  Perrig,  Leendert  Van  Doorn, 
“BIND:  A  Find-grained  Attestation  Service  for  Secure 
Distributed  Systems”,  Proc.    of  the  IEEE  Symposium  on 
Security and Privacy, 2005. 
[SLS+  05]  Arvind  Seshadri, Mark  Luk,  Elaine  Shi,  Adrian 
Perrig,  Leendert  van  Doorn,  Pradeep  Khosla,  “Pioneer: 
Verifying  Code  Integrity  and  Enforcing  Untampered  Code 
Execution  on  Legacy  Systems”,  ACM  Symposium  on 
Operating Systems Principles, 2005. 
[SPEC  06]  Standard  Performance  Evaluation  Corporation.   
SPEC CPU2000 benchmark suite, 2000. 
[Tri 07] Tripwire product pages at:   
http://www.tripwire.com/products/enterprise/ost/, 2007. 
[TCG 07] Home page of the  Trusted Computing Group at: 
http://www.tcg.org . 
[UCT  04]  Umesh  Shankar,  Monica  Chew,  J.    D.    Tygar.   
“Side effects are not sufficient to authenticate software”, in 
Proc. 13th USENIX Security Symposium, 2004. 
[XDC  04]  Haizhi  Xu,  Wenliang  Du,  and  Steve  J.    Chapin, 
“Context  Sensitive  Anomaly  Monitoring  of  Process  Control 
Flow  to  Detect  Mimicry  Attacks  and  Impossible  Paths”,  in 
Proc.    7-th  Int’l.  Symp.  on  Recent  Advances  in  Intrusion 
Detection, 2004 RAID 2004).