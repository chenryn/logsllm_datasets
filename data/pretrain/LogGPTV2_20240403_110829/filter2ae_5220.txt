# Java JMX-RMI

##### 译文声明
本文为翻译文章，仅供参考。具体内容及含义以原文为准。

## 0x00 前言
RMI（Remote Method Invocation）的一个重要应用是JMX（Java Management Extensions）。本文将介绍JMX的几个攻击面。

## 0x01 基础

在撰写本文时，我发现了一篇非常详尽的文章，推荐大家阅读：
[JMX](https://example.com/jmx-article)

### Java Management Extensions (JMX)
JMX是一种Java技术，提供管理和监控应用程序、系统对象、设备（如打印机）和服务导向网络的工具。

### Managed Bean (MBean)
JMX允许您将资源作为托管Bean进行管理。托管Bean（MBean）是一个遵循JMX标准设计规则的Java Bean类。MBean可以表示一个设备、应用程序或任何需要通过JMX管理的资源。您可以经由JMX访问这些MBeans，查询属性并调用Bean方法。

JMX标准定义了几种MBean类型，但我们将只讨论标准MBean。要成为一个有效的MBean，Java类必须满足以下条件：
- 实现一个接口
- 提供默认构造函数（无参数）
- 遵循某些命名约定，例如实现getter/setter方法来读写属性

当MBean的名字为`Hello`时，其对应的接口名必须为`HelloMBean`，否则视为不合法的MBean。

### MBean Server
MBean服务器是一项服务，用于管理系统中的MBeans。开发者可以按照特定的命名模式在其服务器中注册MBeans。MBean服务器将转发传入的消息给已注册的MBeans，并负责将来自MBeans的消息转发给外部组件。

#### 示例
使用`jconsole`查看结果。在JConsole中，可以对当前注册的MBean进行操作，例如调用`sayHello`函数。

目前我们连接的是本地的MBean Server（每个Java进程在本地都有一个MBean Server），也可以将MBean Server挂载到某个端口上，提供远程MBean管理。

运行jar文件时带上以下参数：
```sh
-Dcom.sun.management.jmxremote.port=2222
-Dcom.sun.management.jmxremote.authenticate=false
-Dcom.sun.management.jmxremote.ssl=false
```

直接通过JConsole连接时，会提示两种方法：1. `host:port`；2. `service:jmx::`。这里我们重点讨论第二种方法。

首先，我们来看一下JMX建立2222端口后，使用nmap获取其内容的情况。从结果来看，JMX的MBean Server是基于RMI构建的，并且其RMI Registry注册的名字为`jmxrmi`。

在第二种方法中，我们可以通过指定具体的协议与Server端进行连接。参考[JMX RMI connector API](https://docs.oracle.com/javase/8/docs/api/index.html?javax/management/remote/rmi/package-summary.html)。

RMI连接器地址有两种形式：
- **JNDI形式**：URL指示在哪里找到连接器的RMI存根。这个RMI存根是一个类型为[`RMIServer`](https://docs.oracle.com/javase/8/docs/api/javax/management/remote/rmi/RMIServer.html)的Java对象，提供对连接器服务器的远程访问。在这种地址形式下，RMI存根是从URL中包含的外部目录条目中获得的。外部目录是任何被JNDI识别的目录，通常是RMI registry、LDAP或COS Naming。
- **编码形式**：URL直接包含了连接到连接器服务器所需的信息。对于RMI/JRMP，编码形式是服务器对象的序列化RMI存根，使用BASE64编码，没有嵌入换行符。对于RMI/IIOP，编码形式是服务器对象的CORBA IOR。

编码形式的反序列化过程是在发起端进行的，因此我们不考虑这种形式。

对于JNDI形式，有以下几种方法与JMX Server连接：
- 使用JRMP和IIOP作为连接层协议：
  - `service:jmx:rmi://host:port/`
  - `service:jmx:iiop://host:port/`
- 基于目录条目的connectors：
  - `service:jmx:rmi://host:port/jndi/jndi-name`
  - `service:jmx:iiop://host:port/jndi/jndi-name`
  - 例如：`service:jmx:rmi:///jndi/rmi://host:port/jmxrmi`

这种方式可以使用JNDI下的所有SPI进行连接。

## 0x02 攻击JMX

### 1. 攻击JMX-RMI

**CVE-2016-3427**
由于JMX认证时传递的是HashMap数据结构，而HashMap可以直接构造一个反序列化利用链来攻击本地ClassPath，这个问题已经被修复了，不再赘述。

**主动攻击1**：利用RMI Registry收到远程bind时产生的反序列化漏洞。

> 注意 – 这种配置是不安全的：任何知道（或猜到）您的端口号和主机名的远程用户都可以监控和控制您的Java应用程序和平台。此外，可能的危害不仅限于您在MBeans中定义的操作。远程客户端可以创建一个`javax.management.loading.MLet` MBean，并使用它从任意URL创建新的MBeans，至少在**没有安全管理器**的情况下是如此。换句话说，恶意远程客户端可以使您的Java应用程序执行任意代码。
>
> 因此，虽然在开发过程中禁用安全性可能是可接受的，但在生产系统中强烈建议不要禁用安全性。

对于有认证的情况下，调用MLet将会进行当前用户的权限验证，默认情况下都是不允许的。`com/sun/jmx/remote/security/MBeanServerFileAccessController.java#checkAccess`会检查当前登录的用户是否有创建权限（这里的权限是下面的createPatterns，它允许创建指定正则的类型，而我们默认是为空的），这里默认会返回false，意味着不允许以MLet对象创建新的MBean。

其次，对于安全管理器的限制，在远程加载前会判断是否存在加载权限。这种方法可以加载任意代码来执行，但利用条件较为苛刻。

## 0x03 总结

JMX的主要利用方式依赖于本地存在的Gadget。如果本地不存在Gadget，则无法成功利用。除非满足JMX MLet的利用条件，通过加载codebase上的Jar文件来执行任意代码。

此外，由于JMX使用的是RMI那一套东西，所以在合适的JDK版本下，我们可以直接攻击RMI，前提是本地存在相关的利用链。

最后，前文提到的攻击方法我已经同步到了[GitHub](https://github.com/wh1t3p1g/ysomap)上。