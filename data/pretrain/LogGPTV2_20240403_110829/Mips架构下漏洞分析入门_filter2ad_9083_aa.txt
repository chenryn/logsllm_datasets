# Mips架构下漏洞分析入门
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
Mips架构下二进制漏洞入门笔记，最后调试TP-LINK路由器的一个栈溢出漏洞作为练习。内容较多，请耐心阅读。
## 环境搭建
搭建环境：Ubuntu
**工具安装**
SquashFS：用于Linux内核的只读文件系统
    sudo apt-get install zlib1g-dev liblzma-dev liblzo2-dev
    sudo git clone https://github.com/devttys0/sasquatch
    cd sasquatch && sudo ./build
Binwalk:貌似是目前唯一可靠的解bin包的工具。
    sudo apt-get install binwalk
Ghidra:NAS开源的反汇编工具
安装java环境，直接运行ghidraRun.bat(Windows)或者ghidraRun(Linuxs / Mac
OS)，中途会要求jdk路径（/usr/libexec/java_home -V 获取jdk路径）
    sudo ./ghidraRun
[官网下载](https://www.ghidra-sre.org/)
简单体验了一下这个工具，比起IDA这个工具在函数和变量自动命名上更加有条理，并且反汇编和伪代码自动对应功能用起来也更方便。最重要的是可以反汇编Mips！
**环境安装**
Qemu安装
    sudo apt-get install qemu
交叉编译环境buildroot
    sudo apt-get install libncurses5-dev patch
    wget http://buildroot.uclibc.org/downloads/snapshots/buildroot-snapshot.tar.bz2
    tar -jxvf buildroot-snapshot.tar.bz2
    cd buildroot/
    make clean
    make menuconfig
    sudo make
进入menuconfig之后，选择目标架构Mips32（需要注意mips包含大端mips和小端mipsel）。配置结束之后使用make编译工具链即可。
安装完成之后设置环境变量，在/etc/profile结尾加上
    export PATH=$PATH:/.../buildroot/output/host/bin;
**编译第一个mips程序**
    #include
    #include 
    #include 
    void backdoor(){
         system("/bin/sh");
    }
    void has_stack(char *src)
    {
         char dst[20]={0};
         strcpy(dst,src);
         printf("copy successfully");
    }
    void main(int argc,char *argv[])
    {
         has_stack(argv[1]);
    }
默认编译小端程序。注意需要加`-static` **静态编译** ，因为我们qemu运行环境并没有包含C标准库。
    $ mipsel-linux-gcc vuln.c -o vuln -static
    $ file vuln
    vuln: ELF 32-bit LSB executable, MIPS, MIPS32 version 1 (SYSV), statically linked, not stripped
编译大端程序。需要加-EB参数，但是仅仅加-EB会导致ld报错，主要原因是ld也需要加-EB参数。所以我们需要编译和链接分开。如果要编译成共享库，上下加上-shared参数。（ld时还是存在问题）
    $ mipsel-linux-gcc -EB -c -static  vuln.c -o vuln.o 
    $ mipsel-linux-ld vuln.o -EB -o vuln
使用qemu-mipsel运行我们的小端程序
    $ qemu-mipsel vuln "123"
    copy successfully
大端程序可以用H4lo师傅的工具链构造mips[编译环境](https://gitee.com/h4lo1/HatLab_Tools_Library/tree/master/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/cross_compile%E7%8E%AF%E5%A2%83),在里面找到了用apt就能直接安装的交叉编译工具链，以后也不用自己编译了！
    sudo apt-get install linux-libc-dev-mipsel-cross
    sudo apt-get install libc6-mipsel-cross libc6-dev-mipsel-cross
    sudo apt-get install binutils-mipsel-linux-gnu
    sudo apt-get install gcc-${VERSION}-mipsel-linux-gnu g++-${VERSION}-mips-linux-gnu
用mips-linux-gnu-gcc编译大端程序
    $ mips-linux-gnu-gcc vuln.c -o vuln -static
    $ file vuln
    vuln: ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=a940ead4f05cbe960bbd685229c01695ef7cea38, not stripped
**（*）Qemu运行Mips Linux内核**
 下载两个包
vmlinux内核文件和debian镜像（建议挂代理，否则很慢），建议使用3.2版本内核，老版本内核在gdbserver远程调试时会出现一些问题。并且请注意你下载的是mips还是mipsel版本。
    #wget https://people.debian.org/~aurel32/qemu/mips/vmlinux-2.6.32-5-4kc-malta
    wget https://people.debian.org/~aurel32/qemu/mips/vmlinux-3.2.0-4-4kc-malta
    wget https://people.debian.org/~aurel32/qemu/mips/debian_squeeze_mips_standard.qcow2
使用qemu运行mips debian，账号和密码都是root。
Qemu有主要如下两种运作模式，User Mode和System Mode。
Qemu系统模式命令如下
    $ sudo qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic,macaddr=00:0c:29:ee:39:39 -net tap -nographic
**调试路由器固件的运行环境**
测试固件版本：:DIR-605L A1 FW v1.13 [下载地址](https://tsd.dlink.com.tw/ddgo)
首先用binwalk解包官网下载的固件DIR605LA1_FW113b06.bin
    binwalk -e DIR605LA1_FW113b06.bin
搜索boa（web服务程序）并且使用qemu-mips运行。首先复制qemu-mips到当前目录，然后用chroot设置根目录，然后用qemu-mips运行boa。不过出现了Not a direcotry的问题，这里需要用qemu-mips-static来运行。
    $ cp $(which qemu-mips) ./
    $ sudo chroot qemu-mips ./squashfs-root-0/bin/boa
    chroot: cannot change root directory to 'qemu-mips': Not a directory
    安装qemu-mips-static
    sudo apt-get install qemu binfmt-support qemu-user-static
    改用qemu-mips-static运行
    /squashfs-root-0$ cp $(which qemu-mips) ./
    /squashfs-root-0$ sudo chroot . ./qemu-mips-static ./bin/boa
    Initialize AP MIB failed!
    qemu: uncaught target signal 11 (Segmentation fault) - core dumped
    Segmentation fault (core dumped)
运行web服务的/bin/boa程序发生段错误，提示`Initialize AP MIB failed!`
通过file文件和你想分析，我们可以知道boa文件动态链接到uclibc链接库，uclibc是应用于嵌入式设备的一种小型C运行库，free和malloc的实现和glibc有一定区别，利用手法也有一些不同，当然这是后话暂且不表。
    $ file ./bin/boa
    ./bin/boa: ELF 32-bit MSB executable, MIPS, MIPS-I version 1 (SYSV), dynamically linked, interpreter /lib/ld-uClibc.so.0, corrupted section header size
在Ghidra中搜索`Initialize AP MIB
failed!`,当apmid_init()执行失败了之后就会返回0，导致Web服务启动失败。经过分析apmid_init()来自于动态链接库apmid.so，来自文件根目录下的lib文件夹。又因为,apmid_init()对于我们的测试并没有决定性影响，所以可以考虑用hook的方式，强制让apmid_init()函数值返回1。
      iVar1 = apmib_init();
      if (iVar1 == 0) {
        puts("Initialize AP MIB failed!");
      }
使用[LD_PRELOAD](https://www.cnblogs.com/net66/p/5609026.html)来Hook函数，首先编写如下代码，并且编译成动态共享库。
    #include
    #include
    int apmib_init()
    {
            printf("hook apmib_init()\n");
            return 1;
    }
     mips-linux-gnu-gcc -Wall -fPIC -shared apmib.c -o apmib-ld.so
> -fPIC 作用于编译阶段，告诉编译器产生与位置无关代码(Position-Independent Code)，  
>  则产生的代码中，没有绝对地址，全部使用相对地址，故而代码可以被加载器加载到内存的任意  
>  位置，都可以正确的执行
运行时设置环境变量LD_PRELOAD(优先加载)=”/apmib-ld.so”，但是运行又出了一点问题。
    $ sudo chroot ./ ./qemu-mips-static -E LD_PRELOAD="./apmib-ld.so" ./bin/boa
    ./bin/boa: can't load library 'libc.so.6'
默认链接库名为libc.so.6，所以我们这里尝试去复制uclibc的libc.so.0，再次运行，发现hook成功了。当然我发现使用LD_PRELOAD=”libc.so.0”参数也可以解决问题。这里大家可以举一反三一下，思考如何将动态链接的mips
elf（我们之前都是编译的静态链接程序）通过qemu的user mode运行起来？
    cp lib/libc.so.0 lib/libc.so.6
    $ sudo chroot ./ ./qemu-mips-static -E LD_PRELOAD="./apmib-ld.so" ./bin/boa
    hook apmib_init()
    Create chklist file error!
    Create chklist file error!
    qemu: uncaught target signal 11 (Segmentation fault) - core dumped
    Segmentation fault (core dumped)
或者
    sudo chroot ./ ./qemu-mips-static -E LD_PRELOAD="./libc.so.0 ./apmib-ld.so" ./bin/boa
不过还是报了两个错，接下来只需要按照原理的思路，继续去分析，写出最终的链接库版本。
    #include
    #include
    #define MIB_IP_ADDR 170
    #define MIB_HW_VER 0x250
    #define MIB_CAPTCHA 0x2c1 
    int apmib_init()
    {
        printf("hook apmib_init()\n");
        return 1;
    }
    int fork(void)
    {
        return 0;
    }
    void apmib_get(int code,int* value)
    {
        switch(code)
        {
            case MIB_HW_VER:
                *value = 0xF1;
                break;
            case MIB_IP_ADDR:
                *value = 0x7F000001;
                break;
            case MIB_CAPTCHA:
                *value = 1;
                break;
        }
        return;
    }
[QEMU chroot进行本地固件调试](https://cloud.tencent.com/developer/article/1552161)
**漏洞相关**
**pwntools**
是一个CTF框架和漏洞利用开发库。它是用Python编写的，旨在用于快速原型开发和开发，旨在使漏洞利用程序编写尽可能简单。[pwntools官网](http://docs.pwntools.com/en/stable/index.html)
**Gdb-Multiarch** :能够调试多个架构（包括Mips）的gdb调试工具
    apt-get install gdb-multiarch
安装peda插件
    git clone https://github.com/longld/peda.git ~/peda
    echo "source ~/peda/peda.py" >> ~/.gdbinit
安装pwndbg插件，安装完成之后进入vim ~/.gdbinit将修改插件为pwndbg
    git clone https://github.com/pwndbg/pwndbg
    cd pwndbg
    ./setup.sh
**gdbserver（mips）**
可以自己编译mips版本的也可以下载别人编译好的[mips版本gdbserver](https://github.com/rapid7/embedded-tools)。
    git clone https://github.com/rapid7/embedded-tools.git
    git clone https://github.com/hugsy/gdb-static
    git cloen https://github.com/akpotter/embedded-toolkit
**qemu和gdb调试**
用户模式调试
    $ qemu-mipsel -g 9000 vuln
    $  gdb-multiarch -q
    (gdb) target remote 127.0.0.1:9000
**gdb命令**
因为mips架构下peda插件无法正常运行，所以需要复习一下gdb的一些基础命令
    break 下断点
    delete 删除断点
    continue 运行到下一个断点
    backtrace 回溯堆栈调用信息
    info 输出信息 比如 info f输出frame信息，info locals输出当前栈所有局部变量 info registers输出寄存器内容
    输出命令x/20i
    输出数据（64位格式）x/20xw
    输出数据（32位格式）x/20xg
**[ROPgadgets](https://github.com/JonathanSalwan/ROPgadget)**
    $ git clone https://github.com/JonathanSalwan/ROPgadget.git && cd ROPgadget
    $ sudo pip install capstone