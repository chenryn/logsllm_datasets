定制GroupItem。使用分组功能时，GroupItem显示为组的根元素。在组中使用Name属性
显示名字，使用ItemCount属性显示项数。Grid的第3列使用ItemPresenter包含所有正常的
项。如果行按国籍分组，Name属性的标签就会有不同的宽度，这看起来不太好。因此，
使用Grid的第二列设置SharedSizeGroup属性，使所有的项有相同的大小。还需要设置共享
的尺寸范围，使所有的元素有相同的大小，为此在DataGrid中设置
Grid.IsSharedSizeScope="True"。
ObjectDataProvider使用了类F1Races, F1Races使用LINQ访问Formula1数据库，并返回
一个匿名类型列表，以及Year、Country、Position、Racer、Car和Points属性。这里再次使
用Skip（）和Take（）方法访问部分数据（代码文件Formula1Demo/F1Races.cs）：
    using System.Collections.Generic;
    using System.Linq;
    namespace Formula1Demo
    {
      public class F1Races
      {
        private int _lastpageSearched = -1;
        private IEnumerable _cache = null;
        public IEnumerable GetRaces(int page, int pageSize)
        {
          using (var data = new Formula1Context())
          {
            if (_lastpageSearched == page)
            return _cache;
            _lastpageSearched = page;
            var q = (from r in data.Races
                  from rr in r.RaceResults
                  orderby r.Date ascending
                  select new
                  {
                    Year = r.Date.Year,
                    Country = r.Circuit.Country,
                    Position = rr.Position,
                    Racer = rr.Racer.FirstName + " " + rr.Racer.LastName,
                    Car = rr.Team.Name,
                    Points = rr.Points
                  }).Skip(page ＊ pageSize).Take(pageSize);
            _cache = q.ToList();
            return _cache;
          }
        }
      }
    }
现在只需要为用户设置页码，修改ObjectDataProvider的参数。在用户界面中，定义一
个文本框和一个按钮（代码文件Formula1Demo/Controls/GridGroupingUC.xaml）：
        Page:
      Get Page
在代码隐藏中，按钮的OnGetPage处理程序访问ObjectDataProvider，并修改方法的第
一个参数。接着调用Refresh（）方法，以便ObjectDataProvider请求新页面（代码文件
Formula1Demo/Grid-GroupingUC.xaml. cs）：
    private void OnGetPage(object sender, RoutedEventArgs e)
    {
      int page = int.Parse(textPageNumber.Text);
      var odp = (sender as FrameworkElement).FindResource("races")
              as ObjectDataProvider;
      odp.MethodParameters[0] = page;
      odp.Refresh();
    }
运行应用程序，就会看到分组和行的细节信息，如图34-29所示。
图34-29
34.9.4 实时成型
WPF 4.5的一个新功能是实时成型。前面介绍了集合视图源及其对排序、过滤和分组
的支持。但是，如果因为排序、过滤和分组返回不同的结果，而使集合随时间变化，
CollectionViewSource就没有什么帮助了。对于实时成型功能，应使用新接口
ICollectionViewLiveShaping。这个接口定义了属性CanChangeLiveFiltering、
CanChangeLiveGrouping和CanChangeLiveSorting，用于检查数据源能否使用实时成型功
能。属性IsLiveFiltering、IsLiveGrouping和IsLiveSorting启用实时成型功能（如果可用）。
有了LiveFilteringProperties、LiveGroupingProperties和LiveSortingProperties，就可以定义源
中可用于实时过滤、分组和排序的属性。
示例应用程序展示了一级方程式比赛的结果（这次是2012年巴塞罗那的比赛）如何变
化。
赛手用Racer类表示，这个类型只有简单的属性Name、Team和Number，这些属性使
用自动属性来实现，因为这个类型的值不会在应用程序运行期间改变（代码文件
LiveShaping/Racer.cs）：
    public class Racer
    {
      public string Name { get; set; }
      public string Team { get; set; }
      public int Number { get; set; }
      public override string ToString() => Name;
    }
类Formula1返回所有参加2012年巴塞罗那比赛的赛手（代码文件
LiveShaping/Formula1.cs）：
    public class Formula1
    {
      private List _racers;
      public IEnumerable Racers => _racers ? ? (_racers = GetRacers());
      private List GetRacers()
      {
        return new List()
        {
          new Racer { Name="Sebastian Vettel", Team="Red Bull Racing", Number=1 }
,
          new Racer { Name="Mark Webber", Team="Red Bull Racing", Number=2 },
          new Racer { Name="Jenson Button", Team="McLaren", Number=3 },
          new Racer { Name="Lewis Hamilton", Team="McLaren", Number=4 },
          new Racer { Name="Fernando Alonso", Team="Ferrari", Number=5 },
          new Racer { Name="Felipe Massa", Team="Ferrari", Number=6 },
          new Racer { Name="Michael Schumacher", Team="Mercedes", Number=7 },
          new Racer { Name="Nico Rosberg", Team="Mercedes", Number=8 },
          new Racer { Name="Kimi Raikkonen", Team="Lotus", Number=9 },
          new Racer { Name="Romain Grosjean", Team="Lotus", Number=10 },
          new Racer { Name="Paul di Resta", Team="Force India", Number=11 },
          new Racer { Name="Nico H¨¹lkenberg", Team="Force India", Number=12 },
          new Racer { Name="Kamui Kobayashi", Team="Sauber", Number=14 },
          new Racer { Name="Sergio Perez", Team="Sauber", Number=15 },
          new Racer { Name="Daniel Riccardio", Team="Toro Rosso", Number=16 },
          new Racer { Name="Jean-Eric Vergne", Team="Toro Rosso", Number=17 },
          new Racer { Name="Pastor Maldonado", Team="Williams", Number=18 },
          //... more racers in the source code download
        };
      }
    }
现在这个示例就更有趣了。LapRacerInfo类是在DataGrid控件中显示的类型，这个类
派生于基类BindableObject，获得了如前所述的INotifyPropertyChanged的实现代码。属性
Lap、Position和PositionChange随时间而变化。Lap给出了赛车当前已跑过的圈数，Position
提供了赛车在特定圈时的位置，PositionChange给出了赛车在当前圈数与前一圈的位置变
化信息。如果赛车的位置没有变化，状态就是None，如果赛车的位置比上一圈低，状态
就是Up，如果赛车的位置比上一圈高，状态就是Down，如果赛手退出了比赛，
PositionChange就是Out。这些信息可以在UI中用于不同的表示（代码文件
LiveShaping/LapRacerInfo.cs）：
    public enum PositionChange
    {
      None,
      Up,
      Down,
      Out
    }
    public class LapRacerInfo : BindableObject
    {
      public Racer Racer { get; set; }
      private int _lap;
      public int Lap
      {
        get { return _lap; }
        set { SetProperty(ref _lap, value); }
      }
      private int _position;
      public int Position
      {
        get { return _position; }
        set { SetProperty(ref _position, value); }
      }
      private PositionChange _positionChange;
      public PositionChange PositionChange
      {
        get { return _positionChange; }
        set { SetProperty(ref _positionChange, value); }
      }
    }
类LapChart包含所有圈和赛手的信息。这个类可以改为访问一个实时Web服务，来检
索这些信息，然后应用程序就可以显示当前比赛的实时结果。
方法SetLapInfoForStart创建LapRacerInfo项的初始列表，并在网格position上填充赛手
的位置。网格position是List集合中添加到positions字典中的第一个数字。接着每次调
用NextLap方法时，lapInfo集合中的项都会改为一个新位置，并设置PositionChange状态信
息（代码文件LiveShaping/LapChar.cs）：
      public class LapChart
      {
        private Formula1 _f1 = new Formula1();
        private List _lapInfo;
        private int _currentLap = 0;
        private const int PostionOut = 999;
        private int _maxLaps;
        public LapChart()
        {
          FillPositions();
          SetLapInfoForStart();
        }
        private Dictionary> _positions =
          new Dictionary>();
        private void FillPositions()
        {
          _positions.Add(18, new List { 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 
2,
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 3, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1 });
          _positions.Add(5, new List { 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1
, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 1, 1, 1, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2 });
          _positions.Add(10, new List { 3, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 9, 
7,
          6, 6, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4,
          4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
          4, 4, 4, 4, 4, 4 });
          // more position information with the code download
          _maxLaps = positions.Select(p => p.Value.Count).Max() - 1;
        }
        private void SetLapInfoForStart()
        {
          _lapInfo = _positions.Select(x => new LapRacerInfo
          {
          Racer = _f1.Racers.Where(r => r.Number == x.Key).Single(),
          Lap = 0,
          Position = x.Value.First(),
          PositionChange = PositionChange.None
          }).ToList();
        }
        public IEnumerable GetLapInfo() => lapInfo;
        public bool NextLap()
        {
          _currentLap++;
          if (_currentLap > _maxLaps) return false;
          foreach (var info in _lapInfo)
          {
          int lastPosition = info.Position;
          var racerInfo = _positions.Where(x => x.Key == info.Racer.Number)
          .Single();
          if (racerInfo.Value.Count > _currentLap)
          {
          info.Position = racerInfo.Value[currentLap];
          }
          else
          {
          info.Position = lastPosition;
          }
          info.PositionChange = GetPositionChange(lastPosition, info.Position);
          info.Lap = currentLap;
          }
          return true;
        }
        private PositionChange GetPositionChange(int oldPosition, int newPosition
)
        {
          if (oldPosition == PositionOut ||| newPosition == PositionOut)
          return PositionChange.Out;
          else if (oldPosition == newPosition)
          return PositionChange.None;
          else if (oldPosition 