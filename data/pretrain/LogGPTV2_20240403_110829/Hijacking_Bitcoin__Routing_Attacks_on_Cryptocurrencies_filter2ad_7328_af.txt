Section V and is efﬁcient both in terms of state maintained and
processing time. Our implementation indeed maintains only
32B of memory (hash size) for each peer of the victim node.
Regarding processing time, our implementation leverages pre-
recompiled regular expressions to efﬁciently identify critical
packets (such as those with BLOCK messages) which are
then processed in parallel by dedicated threads. Observe that
the primitives required for the interception software are also
supported by recent programmable data-planes [19] opening
up the possibility of performing the attack entirely on network
devices.
We used our prototype to attack one of our own Bitcoin
nodes (v/Satoshi:0.12.0/, running on Ubuntu 14.04). The pro-
totype ran on a machine acting as a gateway to the victim node.
Using this setup, we measured the effectiveness of an attacker
in delaying the delivery of blocks, by varying the percentage
of connections she intercepted. To that end, we measured the
fraction of time during which the victim was uninformed of
the most recently mined block. We considered our victim node
to be uninformed when its view of the main chain is shorter
than that of a reference node. The reference node was another
Bitcoin client running the same software and the same number
of peers as the victim, but without any attacker.
% intercepted connections
% time victim node is uniformed
% total vulnerable Bitcoin nodes
80%
100%
50%
63.21% 81.38% 85.45%
67.9%
21.7%
38.9%
TABLE II: 67.9% of Bitcoin nodes are vulnerable to an
interception of 50% of their connections by an AS other than
their direct provider. Such interception can cause the node to
lag behind a reference node 63.21% of the time.
Delay attackers intercepting 50% of a node’s connection
can waste 63% of its mining power Table II illustrates
the percentage of the victim’s uptime, during which it was
uniformed of the last mined block, considering that the attacker
intercepts 100%, 80%, and 50% of its connections. Each value
is the average over an attack period of ∼200 hours. To further
evaluate the practicality of the attack, the table also depicts the
fraction of Bitcoin nodes for which there is an AS, in addition
to their direct provider, that intercepts 100%, 80%, and 50%
of its connections.
Our results reﬂect the major strength of the attack, which
is its effectiveness even when the adversary intercepts only
a fraction of the victim’s connections. Particularly, we see
that an attacker can waste 63% of a node’s mining power by
intercepting half of its connections. Observe that, even when
the attacker is intercepting all of the victim’s connections, the
victim eventually gets each block after a delay of 20 minutes.
Regarding the amount of vulnerable nodes to this attack in
the Bitcoin topology, we found that, for 67.9% of the nodes,
there is at least one AS other than their provider that intercepts
more than 50% of their connections. For 21.7% of the nodes
there is in fact an AS (other than their provider) that intercepts
all their connections to other nodes. In short, 21.7% of the
nodes can be isolated by an AS that is not even their provider.
B. Can powerful attackers delay the entire Bitcoin network?
Having shown that delay attacks against a single node
are practical, we now quantify the network-wide effects of
delaying block propagation.
Unlike partitioning attacks, we show that network-wide de-
lay attacks (that do not utilize active hijacking) are unlikely to
happen in practice. Indeed, only extremely powerful attackers
such as a coalition grouping all ASes based in the US could
signiﬁcantly delay the Bitcoin network as a whole, increasing
the orphan rate to more than 30% from the normal 1%. We
also investigate how this effect changes as a function of the
degree of multi-homing that pools adopt.
Methodology Unlike partition attacks, the impact of delay
attacks on the network is difﬁcult to ascertain. One would
need to actually slow down the network to fully evaluate
the cascading effect of delaying blocks. We therefore built a
realistic event-driven simulator following the principles in [39]
and used it to evaluate such effects.
Our simulator models the entire Bitcoin network and the
impact of a delay attack considering the worst-case scenario
387
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:24 UTC from IEEE Xplore.  Restrictions apply. 
Coalition
Realistic topology
(Section VI)
Multihoming degree of pools
7
5
1
3
US
DE
CN
23.78
4.20
4.90
38.46
18.88
34.27
18.18
2.10
1.40
6.29
1.40
0.70
4.20
1.40
0.70
TABLE III: Orphan rate (%) achieved by different network-
wide level delay attacks performed by coalitions of all the
ASes in a country, and considering either the topology inferred
in Section VI or synthetic topologies with various degrees of
pool multi-homing. The normal orphan rate is ∼1%.
for the attacker. Speciﬁcally, it assumes that the communica-
tion between gateways of the same pool cannot be intercepted.
Also, pools act as relay networks in that they propagate all
blocks that they receive via all their gateways. Moreover, the
simulator assumes that the delay attacker is only effective if
she intercepts the trafﬁc from a node that receives a block
(essentially if she is able to perform the attack depicted in
Fig. 4a). We provide further details on our simulator and how
we evaluated it in Appendix A.
We ran our simulator on realistic topologies as well as on
synthetic ones with higher or lower degrees of multi-homing.
The realistic topology was inferred as described in Section VI.
The synthetic ones were created by adding more gateways to
the pools in the realistic topology until all pools reached the
predeﬁned degree of multi-homing.
Due to pools multi-homing, Bitcoin (as a whole) is not
vulnerable to delay attackers, even powerful ones Our
results are summarized in Table III. We see that multi-homed
pools considerably increase the robustness of the Bitcoin
network against delay attacks. In essence, multi-homed pools
act as protected relays for the whole network. Indeed, multi-
homed pools have better chances of learning about blocks via
at least one gateway and can also more efﬁciently propagate
them to the rest of the network via the same gateways.
If we consider the current
level of multi-homing, only
powerful attackers such as a coalition containing all US-based
ASes could effectively disrupt the network by increasing the
fork rate to 23% (as comparison, the baseline fork rate is 1%).
In contrast, other powerful attackers such as all China-based
or all Germany-based ASes can only increase the fork rate to
5%. As such coalitions are unlikely to form in practice, we
conclude that network-wide delay attacks do not constitute a
threat for Bitcoin.
Even a small degree of multi-homing is enough to protect
Bitcoin from powerful attackers. If all mining pools were
single-homed, large coalitions could substantially harm the
currency. The US for instance, could increase the fork rate
to 38% while China and Germany could increase it to 34%
and 18% respectively. Yet, the fork rate drops dramatically
as the average multi-homing degree increases. This is a good
news for mining pools as it shows that even a small increase
in their connectivity helps tremendously in protecting them
against delay attacks.
IX. COUNTERMEASURES
In this section, we present a set of countermeasures against
routing attacks. We start by presenting measures that do not
require any protocol change and can be partially deployed
in such a way that early adopters can beneﬁt from higher
protection (Section IX-A). We then describe longer-term sug-
gestions for both detecting and preventing routing attacks
(Section IX-B).
A. Short-term measures
Increase the diversity of node connections The more con-
nected an AS is, the harder it is to attack it. We therefore
encourage Bitcoin node owners to ensure they are multi-
homed. Observe that even single-homed Bitcoin nodes could
beneﬁt from extra connectivity by using one or more VPN
services through encrypted tunnels so that Bitcoin trafﬁc to
and from the node go through multiple and distinct ASes.
Attackers that wish to deny connectivity through the tunnel
would need to either know both associated IP addresses or,
alternatively, disrupt all encrypted trafﬁc to and from nodes—
making the attack highly noticeable.
Select Bitcoin peers while taking routing into account
Bitcoin nodes randomly establish 8 outgoing connections.
While randomness is important
to avoid biased decisions,
Bitcoin nodes should establish a few extra connections taking
routing into consideration. For this, nodes could either issue a
traceroute to each of their peers and analyze how often
the same AS appears in the path or, alternatively, tap into the
BGP feed of their network and select their peers based on the
AS-PATH. In both cases, if the same AS appears in all paths,
extra random connections should be established.
Monitor round-trip time (RTT) The RTT towards hijacked
destinations increases during the attack. By monitoring the
RTT towards its peers, a node could detect sudden changes and
establish extra random connections as a protection mechanism.
Monitor additional statistics Nodes should deploy anomaly
detection mechanisms to recognize sudden changes in: the
distribution of connections, the time elapsed between a request
and the corresponding answer, the simultaneous disconnec-
tions of peers, and other lower-level connection anomalies.
Again, anomalies should spur the establishment of extra ran-
dom connections.
Embrace churn Nodes should allow the natural churn of the
network to refresh their connections. A node with disabled
incoming connections or even one that is behind a NAT or
a ﬁrewall will never receive a random incoming connection
from the rest of the network. If the node is hijacked for a few
minutes and isolated from a part of the network, it will only
reconnect to the other part upon reboot or when one of its
outgoing connections fails.
388
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:24 UTC from IEEE Xplore.  Restrictions apply. 
Use gateways in different ASes While inferring the topology
we noticed that many pools were using gateways in the same
AS. Hosting these gateways in different ASes would make
them even more robust to routing attacks.
Prefer peers hosted in the same AS and in /24 preﬁxes As
the trafﬁc of nodes hosted in /24 preﬁxes can only partially
be diverted (Section II). Hosting all nodes in such preﬁxes
would prevent partition attacks at the cost of (∼1%) increase
of the total number of Internet preﬁxes. Alternatively, nodes
could connect to a peer hosted in a /24 preﬁx which belongs
to their provider. By doing so they maintain a stealth (intra-
AS) connection with a node that is at least partially protected
against hijack.
B. Longer-term measures
Encrypt Bitcoin Communication and/or adopt MAC While
encrypting Bitcoin connections would not prevent adversaries
from dropping packets, it would prevent them from eavesdrop-
ping connections and modifying key messages. Alternatively,
using a Message Authentication Code (MAC) to validate that
the content of each message has not been changed would make
delay attacks much more difﬁcult.
Use distinct control and data channels A key problem of
Bitcoin is that its trafﬁc is easily identiﬁable by ﬁltering on
the default port (8333). Assuming encrypted connections, the
two ends could negotiate a set of random TCP ports upon
connecting to each other using the well-known port and use
them to establish the actual TCP connection, on which they
will exchange Bitcoin data. This would force the AS-level
adversary to look at all the trafﬁc, which would be too costly.
A simpler (but poorer) solution would be for Bitcoin clients
to use randomized TCP port (encoded in clear with the ADDR
message) as it will force the AS-level adversary to maintain
state to keep track of these ports. Although a node can already
run on a non-default port, such a node will receive fewer
incoming connections (if any) as the default client strongly
prefers peers that run on the default port.
Use UDP heartbeats A TCP connection between two Bitcoin
nodes may take different forward and backward paths due to
asymmetric routing, making AS-level adversaries more power-
ful (as they only need to see one direction, see Section V). In
addition to TCP connections, Bitcoin clients could periodically
send UDP messages with corroborating data (e.g., with several
recent block headers). These UDP messages can be used as a
heartbeat that will allow nodes to discover that their connection
was partially intercepted. As UDP messages do not rely on
return trafﬁc, this would enable node to realize that they are
out-of-sync and establish new connections.
Request a block on multiple connections Bitcoin clients
could ask multiple peers for pieces of the block. This measure
would prevent misbehaving nodes from deliberately delaying
the delivery of a block, simply because in such a case the
client will only miss one fraction of the block, which it can
request from one of its other peers.
X. RELATED WORK
AS-level adversaries The concept of AS-level adversaries has
been studied before in the context of Tor [25], [37], [22],
[50], [53]. These works also illustrated the problems caused
by centralization and routing attacks on a distributed system
running atop the Internet. Yet, Tor and Bitcoin differ vastly in
their behavior with one routing messages in an Onion-like
fashion, while the other uses random connections to ﬂood
messages throughout the entire network. Although random
graphs are usually robust to attacks, this paper shows that it
is not the case when the network is centralized at the routing-
level.
Bitcoin attacks The security of Bitcoin from network-based
attacks has been relatively less explored compared to other
attack scenarios. While eclipsing attacks [31], [27] have a
similar impact than delay attacks when performed against a
single node, they disrupt the victim’s connections and assume
that the attacker is directly connected to the victim (Section V).
For more information about Bitcoin attacks, we refer the reader
to a recent comprehensive survey on the Bitcoin protocol [18].
BGP security issues Measuring and detecting routing at-
tacks has seen extensive research, both considering BGP
hijacks [48], [54], [55] and interception attacks [16]. Similarly,
there has been much work on proposing secure routing proto-
cols that can prevent the above attacks [17], [29], [32], [40].
In contrast, our work is the ﬁrst one to show the consequences
of these attacks on cryptocurrencies.
XI. CONCLUSIONS
This paper presented the ﬁrst analysis of the vulnerabilities
of the Bitcoin system from a networking viewpoint. Based on
real-world data, we showed that Bitcoin is heavily centralized.
Leveraging this fact, we then demonstrated and quantiﬁed
the disruptive impact that AS-level adversaries can have on
the currency. We showed that attackers can partition the
Bitcoin network by hijacking less than 100 preﬁxes. We also
showed how AS-level adversaries can signiﬁcantly delay the
propagation of blocks while remaining undetected. Although
these attacks are worrying, we also explained how to counter
them with both short-term and long-term measures, some of
which are easily deployable today.
ACKNOWLEDGMENTS
We would like to thank Christian Decker for sharing Bitcoin
data with us as well as for his valuable comments in the
beginning of the project. We would also like to thank David
Gugelmann for his support in one of our experiments. Finally,
we are grateful to Tobias Bühler, Edgar Costa Molero, and
Thomas Holterbach from ETH Zürich as well as Eleftherios
Kokoris Kogias from EPFL for their helpful feedback on early
drafts of this paper. Aviv Zohar is supported by the Israel
Science Foundation (grant 616/13) and by a grant from the
Hebrew University Cybersecurity Center.
389
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:24 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] “A Next-Generation Smart Contract and Decentralized Application
Platform ,” https://github.com/ethereum/wiki/wiki/White-Paper.
[2] “Bitcoin Blockchain Statistics,” https://blockchain.info/.
[3] “bitnodes,” https://bitnodes.21.co/.
[4] “Bitnodes. Estimating the size of Bitcoin network,” https://bitnodes.21.
co/.
[5] “CAIDA Macroscopic Internet Topology Data Kit.” https://www.caida.
org/data/internet-topology-data-kit/.
[6] “Dyn Research. Pakistan hijacks YouTube.” http://research.dyn.com/
2008/02/pakistan-hijacks-youtube-1/.
[7] “FALCON,” http://www.falcon-net.org/.
[8] “FIBRE,” http://bitcoinﬁbre.org/.
[9] “Litecoin ,” https://litecoin.org.
[10] “RIPE RIS Raw Data,”
ris-raw-data.
https://www.ripe.net/data-tools/stats/ris/
[11] “Routeviews Preﬁx to AS mappings Dataset (pfx2as) for IPv4 and IPv6.”
https://www.caida.org/data/routing/routeviews-preﬁx2as.xml.
[12] “Scapy.” http://www.secdev.org/projects/scapy/.
[13] “The Relay Network,” http://bitcoinrelaynetwork.org/.
[14] “ZCash,” https://z.cash/.
[15] A. M. Antonopoulos, “The bitcoin network,” in Mastering Bitcoin.
O’Reilly Media, Inc., 2013, ch. 6.
[16] H. Ballani, P. Francis, and X. Zhang, “A Study of Preﬁx Hijacking and
Interception in the Internet,” ser. SIGCOMM ’07. New York, NY, USA:
ACM, 2007, pp. 265–276.