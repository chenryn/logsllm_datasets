reveals that these two characters actually belong to a pair.
Although the above approach describes a pretty general behavior
signature for the way that a program processes paired signatures,
there are exceptions. As an example, consider the case described in
Figure 3. Apache does not treat ‘h’ as a normal delimiter and never
conducts consecutive comparisons to (cid:2)nd it. Actually, the character
is combined with keywords such as Directory as part of a (cid:2)eld.
To pair ‘hDirectory’ with ‘h/Directory’, Apache (cid:2)rst iden-
ti(cid:2)es ‘h/’, and then checks the closest (cid:2)eld that begins with ‘h’ for
the string that follows ‘h/’, which in the example is ‘Directory’.
Con(cid:2)gRE detects such delimiters using another behavior signature:
whenever a tainted branch condition becomes true, we check its
scope for the comparison between two tainted strings from differ-
ent (cid:2)elds; if such a comparison has been detected and turns out to
be a match, these two strings are labeled as paired delimiters, to-
gether with the characters that taint the condition. In the Apache
example, our approach discovers ‘Directory’ within the (cid:2)eld
‘hDirectory’ and the (cid:2)eld ‘h/Directory’ as a pair1. Since
comparisons rarely happen between two con(cid:2)guration (cid:2)elds, this
signature does not introduce many false positives, as we observed
in our research.
We have to stress here that these two behavior signatures by no
means cover all possible ways an application can take to process
paired delimiters. It is possible that they could allow some delim-
iters to slip under the radar, though all the applications we have
studied so far do not have such a problem. Developing a more gen-
eral alternative is left as our future work.
3.2 Semantic Analysis
The key for reverse engineering con(cid:2)gurations is to understand
the roles played by individual (cid:2)elds in enforcing a security pol-
icy, i.e., subjects, objects and permissions. Such an understand-
ing must be gained under certain semantic context which links all
these roles together. For example, in Figure 2, ‘IPPrefix’ and
‘FileAccess’ must be de(cid:2)ned under ‘Directory’ to specify
their relations with the directory ‘/usr/www’. This context infor-
1Note that missing the character ‘h’ does not present a seri-
ous problem, as ‘Directory’ is identi(cid:2)ed in the context of
‘hDirectory’, which must be there for creating a language (Sec-
tion 3.4).
Apache configuration file: httpd.conf
     Options FollowSymLinks
     Order allow , deny
     Allow from  192.168.0.0/24
Semantic Tree
     Order allow , deny
     Allow from 192.168.1.0/24
     Options FollowSymLinks
     Order deny , allow
     Deny from  192.168.2.0/24
<Files
<Directory
Merged tree
<Directory
/web/doc1 Options
Order
Allow
sensitive.htm
Order
Allow
/web/doc2 Options
Order
deny
object
Order
Allow
Deny
FollowSymLinks allow,deny
from
allow,deny
from
FollowSymLinks deny,allow
from
192.168.0.0/24
192.168.1.0/24
192.168.2.0/24
allow,deny
deny,allow
mutual-failure
from
from
subject
subject
Figure 3: Another Example.
mation is modeled in our research as a semantic tree. Following
we (cid:2)rst describe how to build a semantic tree from an application,
and then introduce the techniques that identify individual access-
control components.
Semantic tree. Semantic tree is used to understand how a (cid:2)eld
controls the operations on another (cid:2)eld, which unveils the seman-
tic relations between these (cid:2)elds. A semantic tree can be formally
modeled as a 2-tuple hN; Ei, where N is a set of nodes and E is a
set of edges. Each node except the root represents a con(cid:2)guration
(cid:2)eld. An edge is extended from one node to another if an appli-
cation uses the former to determine how to process the latter. The
root is assumed to control every node that does not have a parent.
Con(cid:2)gRE builds the semantic tree of an application through an-
alyzing the propagation of tainted information (cid:3)ows. Speci(cid:2)cally,
it (cid:2)rst marks each (cid:2)eld as a different taint source, and connects all
these (cid:2)elds directly to the root as its children. During the analy-
sis, Con(cid:2)gRE locates the comparison between a value tainted by a
(cid:2)eld and a constant. Such a comparison is called a control condi-
tion. Whenever a control condition related to a (cid:2)eld n is found to
be true, our approach checks whether other (cid:2)elds have been oper-
ated on within the scope of that condition. Once such a (cid:2)eld n0 is
identi(cid:2)ed, Con(cid:2)gRE makes n0 an offspring node of n.
For example, consider the program in Figure 2. The instruction
at Line I2 is a control condition that compares the (cid:2)eld ‘Directory’
with a constant. Within the scope of the condition (Line I2 to I6),
(cid:2)elds like ‘/usr/www/’2, IPPrefix and FileAccess are all
used for comparisons when the control condition is true. Therefore,
we make these (cid:2)elds children nodes for ‘Directory’. Moreover,
the (cid:2)eld ‘Yes’ appears in the scope of ‘FileAccess’, which
causes an edge to be drawn from the latter to the former. The
same happens to the relation between ‘192.168.1.0/24’ and
‘IPPrefix’. These relations are described by the semantic tree
in Figure 2. Another example is presented in Figure 3, which gives
the tree for a con(cid:2)guration fragment of Apache.
Detection of access-control components. Con(cid:2)gRE detects access-
control components through analyzing how an application enforces
its security policy on a test request. The request is labeled as a
new taint source for the taint analysis and studied against the in-
formation (cid:3)ows derived from con(cid:2)guration (cid:2)elds. Our approach
observes the interactions among the information (cid:3)ows from differ-
2This (cid:2)eld comes from a merger between ‘usr’ and ‘www’, as de-
scribed later.
ent sources and uses a set of behavior signatures to recognize the
(cid:2)elds related to subjects, objects and permissions.
Subjects such as IP addresses and Internet domains can be dis-
covered from the behavior that attempts to match a value tainted
by a (cid:2)eld to the source IP address of the request. If this attempt is
successful, we are pretty sure that the (cid:2)eld is either IP address or
an Internet domain name. The latter can also be identi(cid:2)ed from the
input parameter for the API calls such as gethostbyname(),
which maps a host name to a structure containing its IP addresses.
More dif(cid:2)cult to handle is the (cid:2)eld that speci(cid:2)es username. A user-
name included in a request is usually checked by the application
against a con(cid:2)guration record. What Con(cid:2)gRE can observe from
this process is a comparison that happens between a value tainted
by the request and the other by a con(cid:2)guration (cid:2)eld. Such a be-
havior can be too general to become a signature. Our solution is
to make use of some recognizable information on the request. The
payload of the request related to a username can be pre-labeled
if the request comes through a public protocol, such as HTTP. In
the case that the protocol is close, the location can still be found
through a taint analysis on the client program which generates the
request: we can track the data tainted by a username across the
client until they are re(cid:3)ected on the payload of a network output.
Whenever such data match a value tainted by a (cid:2)eld after they are
received by the application, we know that the (cid:2)eld is for specify-
ing a subject. Another problem for detecting subjects comes from
the keywords that de(cid:2)ne special types of subjects such as anyone.
An example is the keyword All used by Apache. These keywords
may not be involved in any data(cid:3)ow operations during a transac-
tion and could act like permissions. We describe an approach to
recognize them in Section 3.3.
Objects such as directory names and (cid:2)le names can be deter-
mined from the parameters of relevant API functions such as fopen()
and ReadFile(). Con(cid:2)gRE recognizes a directory (cid:2)eld if the
(cid:2)eld taints a string that is appended with another string tainted by
the request, and then used together as a parameter of an API call
for specifying the directory path and the name of a (cid:2)le. Note that it
is important to have the parameter tainted by the request, because
otherwise the API call may not relate to the transaction at all: for
example, it can be just an operation for opening a con(cid:2)guration (cid:2)le.
Another behavior signature that characterizes an object is as fol-
lows: a string tainted by the request matches another string related
to a (cid:2)eld, and then the former is used as a (cid:2)le name or a directory
for an API call. This behavior is also suf(cid:2)cient for concluding that
the (cid:2)eld is for de(cid:2)ning an object. In some cases, multiple (cid:2)elds can
be found to collectively de(cid:2)ne an object. An example is ‘usr’ and
‘www’ in Figure 2. When this happens, we merge these (cid:2)elds into
a single (cid:2)eld and add back the delimiter that separates them.
The techniques for detecting subjects and objects are based upon
data(cid:3)ow analysis. This also works for some types of permissions.
For example, once we notice that a directory (cid:2)eld is always used to
encapsulate a (cid:2)le name tainted by a request before the (cid:2)le can be
opened, and an attempt to directly retrieve its parent directory3 is
blocked, we know that the subject is not allowed to access the (cid:2)les
outside the directory. Such a permission is called home-directory
permission. However, discovering other types of permissions re-
quires more efforts than data(cid:3)ow analysis. Speci(cid:2)cally, though the
taint analysis can (cid:2)nd from the execution path a set of branch con-
ditions tainted by con(cid:2)guration (cid:2)elds, we do not know whether
these conditions affect the success of a transaction, as our analysis
only observes one execution path. Therefore, the (cid:2)elds associated
with these conditions can only be treated as candidate permissions,
and a further study is required to determine whether they are indeed
permissions. This is achieved in our research through identifying
these (cid:2)elds’ alternative values and rerunning the application over
them, which are elaborated in Section 3.3.
Con(cid:2)gRE is also designed to discover the con(cid:2)guration settings
for multiple subject/object pairs. As an example, consider a re-
quest for downloading index.htm from /web/doc2. During
the transaction for processing that request, Con(cid:2)gRE observes that
the part of the request related to directory name has also been com-
pared with ‘/web/doc1’. This prompts us to adjust the request
to explore the security con(cid:2)guration for that directory. Such an ad-
justment can be done automatically using symbolic execution [14].
3.3 Detection of Permission Structures
Since the determination of permissions in the second step is in-
conclusive, we need to further study candidate permission (cid:2)elds to
understand whether they indeed control the interactions between
subjects and objects. For this purpose, we developed a technique
which (cid:2)rst identi(cid:2)es the alternative values for these (cid:2)elds and then
reruns the application over these values to investigate their accumu-
lated effects on a transaction. Below we elaborate this approach.
Discovery of alternative values. Evaluation of an application us-
ing different values of a (cid:2)eld can tell us whether a transaction is
under the (cid:2)eld’s control. For example, once we switch ‘Yes’ to
‘No’ in Figure 2, an attempt to read a (cid:2)le under ‘/usr/www/’
will no longer get through, which suggests that the (cid:2)eld is a per-
mission. To discover these values, we (cid:2)rst need to identify which
(cid:2)elds can be used in this game. Some (cid:2)elds cannot be changed
without affecting other (cid:2)elds. Consider a (cid:2)eld that serves as other
(cid:2)elds’ parent node in the semantic tree: any change that happens
to its content could affect all its descendant nodes and even com-
pletely alter the structure of the tree. On the other hand, inner nodes
of the semantic tree usually represent the name of a con(cid:2)guration
setting, such as ‘FileAccess’ in Figure 2, while the value of
the setting is represented by the tree’s leaves. Given these consid-
erations, our current design of Con(cid:2)gRE only explores alternative
values for the candidate permission (cid:2)elds on the leaves. For those
on the internal nodes, we evaluate them under two scenarios: either
leaving them there intact, or removing them along with all their de-
scendants. This treatment may cause con(cid:2)guration errors, which
however, can be easily identi(cid:2)ed from an application’s error report.
For a leaf (cid:2)eld annotated as a candidate permission, Con(cid:2)gRE
takes the following approach to discover its alternative values. It
detects the instructions that compare the (cid:2)eld with a constant, and
3An example is using the (cid:2)le name like ‘/../’.
then changes the content of the (cid:2)eld to a random value to cause the
operation to fail. This forces the application to try all legitimate
values for that (cid:2)eld one by one until none of them matches, which
can be observed from a con(cid:2)guration error reported by the applica-
tion. For the example in Figure 2, our approach changes ‘Yes’ to a
random string, which makes the execution reveal ‘No’. In this way,
we can capture all the values associated with a (cid:2)eld.
Generation of permission structures. Using the alternative val-
ues of candidate permission (cid:2)elds, Con(cid:2)gRE automatically modi-
(cid:2)es con(cid:2)guration (cid:2)les and reruns an application upon them. Our
approach exhaustively tests all combinations of these (cid:2)elds’ alter-
native values, and the two scenarios for evaluating internal nodes to
understand the in(cid:3)uences of these (cid:2)elds on a transaction. Accord-
ing to the outcomes of the test, these con(cid:2)gurations are classi(cid:2)ed
into three categories: those making the transaction successful are
kept in a permit set P , those accepted by the application but caus-
ing the request to be denied are put in a denial set D, and the rest
are thrown away because of con(cid:2)guration errors.
The con(cid:2)gurations in P and D may include the (cid:2)elds unrelated
to permissions. Identi(cid:2)cation of these (cid:2)elds in Con(cid:2)gRE is based