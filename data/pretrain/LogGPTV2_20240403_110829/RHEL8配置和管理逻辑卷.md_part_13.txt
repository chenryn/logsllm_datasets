|                           |           | 个或多个物理卷。(r)efresh |
|                           |           | 表示 RAID                 |
|                           |           | 逻辑卷使用的一            |
|                           |           | 个或多个物理卷存在写入错  |
|                           |           | 误。写入错误可能是由物理  |
|                           |           | 卷临时失败造成的，或表示  |
|                           |           | 它已经失败。该设备应该被  |
|                           |           | 刷新或替换。(m)ismatches  |
|                           |           | 表示 RAID                 |
|                           |           | 逻辑卷有                  |
|                           |           | 部分不一致的阵列。通过在  |
|                           |           | RAID 逻辑卷中启动         |
|                           |           | `check`{.literal}         |
|                           |           | 操作可发现不一致的        |
|                           |           | 情况。（`check`{.literal} |
|                           |           | 和 `repair`{.literal}     |
|                           |           | 操作在 RAID               |
|                           |           | 逻辑卷中可以通过          |
|                           |           | `lvchange`{.literal}      |
|                           |           | 命令实现。）(w)ritemostly |
|                           |           | 代表 RAID 1               |
|                           |           | 逻辑卷中的                |
|                           |           | 设备已被标记为主要为写。  |
|                           |           |                           |
|                           |           | \* Bit 10: s(k)ip         |
|                           |           | activation:               |
|                           |           | 这个卷被标记              |
|                           |           | 为在激活的过程中跳过它。  |
+---------------------------+-----------+---------------------------+
| `l                        | KMaj      | 逻辑卷的真实主            |
| v_kernel_major`{.literal} |           | 设备号码（如果不活跃则为  |
|                           |           | -1）                      |
+---------------------------+-----------+---------------------------+
| `l                        | KMIN      | 逻辑卷的真实从设          |
| v_kernel_minor`{.literal} |           | 备号码（如果是不活跃则为  |
|                           |           | -1）                      |
+---------------------------+-----------+---------------------------+
| `lv_major`{.literal}      | Maj       | 逻辑卷持久的主            |
|                           |           | 设备号码（如果未指定则为  |
|                           |           | -1）                      |
+---------------------------+-----------+---------------------------+
| `lv_minor`{.literal}      | Min       | 逻辑卷持久的              |
|                           |           | 从设备号（如果未指定则为  |
|                           |           | -1）                      |
+---------------------------+-----------+---------------------------+
| `lv_name`{.literal}       | LV        | 逻辑卷名称                |
+---------------------------+-----------+---------------------------+
| `lv_size`{.literal}       | LSize     | 逻辑卷的大小              |
+---------------------------+-----------+---------------------------+
| `lv_tags`{.literal}       | LV Tags   | 附加到逻辑卷的 LVM 标签   |
+---------------------------+-----------+---------------------------+
| `lv_uuid`{.literal}       | LV UUID   | 逻辑卷的 UUID。           |
+---------------------------+-----------+---------------------------+
| `mirror_log`{.literal}    | Log       | 镜像日志所在的设备        |
+---------------------------+-----------+---------------------------+
| `modules`{.literal}       | 模块      | 使用这个逻辑卷所需        |
|                           |           | 的相应内核设备映射器目标  |
+---------------------------+-----------+---------------------------+
| `move_pv`{.literal}       | Move      | 使用 `pvmove`{.literal}   |
|                           |           | 命令创                    |
|                           |           | 建的临时逻辑卷的源物理卷  |
+---------------------------+-----------+---------------------------+
| `origin`{.literal}        | Origin    | 快照卷的源设备            |
+---------------------------+-----------+---------------------------+
| \* `regionsize`{.literal} | Region    | 镜像的逻辑卷的单元大小    |
|                           |           |                           |
| \*                        |           |                           |
| `region_size`{.literal}   |           |                           |
+---------------------------+-----------+---------------------------+
| `seg_count`{.literal}     | #Seg      | 逻辑卷中片段的数          |
+---------------------------+-----------+---------------------------+
| `seg_size`{.literal}      | SSize     | 逻辑卷中片段的大小        |
+---------------------------+-----------+---------------------------+
| `seg_start`{.literal}     | Start     | 逻辑卷中片段的偏移        |
+---------------------------+-----------+---------------------------+
| `seg_tags`{.literal}      | Seg Tags  | 附加到逻辑卷片段的 LVM    |
|                           |           | 标签                      |
+---------------------------+-----------+---------------------------+
| `segtype`{.literal}       | 类型      | 逻辑卷的片段类型（        |
|                           |           | 例如：镜像、条状、线性）  |
+---------------------------+-----------+---------------------------+
| `snap_percent`{.literal}  | Snap%     | 已使用的快照卷的比例      |
+---------------------------+-----------+---------------------------+
| `stripes`{.literal}       | #Str      | 逻                        |
|                           |           | 辑卷中条带或者镜像的数目  |
+---------------------------+-----------+---------------------------+
| \* `stripesize`{.literal} | Stripe    | 条状逻辑                  |
|                           |           | 卷中条状逻辑卷的单元大小  |
| \*                        |           |                           |
| `stripe_size`{.literal}   |           |                           |
+---------------------------+-----------+---------------------------+
:::
:::
`lvs`{.literal} 命令默认提供以下显示。默认显示会根据卷组中的
`vg_name`{.literal} 和 `lv_name`{.literal} 进行排序。
``` literallayout
# lvs
  LV     VG              Attr       LSize    Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  origin VG              owi-a-s---    1.00g
  snap   VG              swi-a-s---  100.00m      origin 0.00
```
`lvs`{.literal} 命令的常见用法是在命令中附加 `devices`{.literal}
以显示组成逻辑卷的基本设备。这个示例还指定 `-a`{.literal}
选项显示逻辑卷组件的内部卷，比如 RAID 镜像，并用括号括起来。这个示例包括
RAID 卷、条状卷和一个精简池卷。
``` literallayout
# lvs -a -o +devices
  LV               VG            Attr       LSize   Pool   Origin Data%  Meta%  Move Log Cpy%Sync Convert Devices
  raid1            VG            rwi-a-r---   1.00g                                      100.00           raid1_rimage_0(0),raid1_rimage_1(0)
  [raid1_rimage_0] VG            iwi-aor---   1.00g                                                       /dev/sde1(7041)
  [raid1_rimage_1] VG            iwi-aor---   1.00g                                                       /dev/sdf1(7041)
  [raid1_rmeta_0]  VG            ewi-aor---   4.00m                                                       /dev/sde1(7040)
  [raid1_rmeta_1]  VG            ewi-aor---   4.00m                                                       /dev/sdf1(7040)
  stripe1          VG            -wi-a-----  99.95g                                                       /dev/sde1(0),/dev/sdf1(0)
  stripe1          VG            -wi-a-----  99.95g                                                       /dev/sdd1(0)
  stripe1          VG            -wi-a-----  99.95g                                                       /dev/sdc1(0)
  [lvol0_pmspare]  rhel_host-083 ewi-------   4.00m                                                       /dev/vda2(0)
  pool00           rhel_host-083 twi-aotz--  
# []{#assembly_customizing-lvm-display-configuring-and-managing-logical-volumes.html#proc_sorting-lvm-reports-customizing-lvm-display}LVM 报告排序 {.title}
:::
通常，`lvs`{.literal}、`vgs`{.literal} 或 `pvs`{.literal}
命令的完整输出结果必须先在内部生成并存储，然后才能正确排序。您可以指定
`--unbuffered`{.literal} 参数来在生成后马上显示未排序的输出。
要指定不同的列排序，使用任意报告命令的 `-O`{.literal}
参数。在输出中不一定要包含这些字段。
下面的例子显示 `pvs`{.literal}
命令的输出结果，它显示了物理卷名称、大小和可用空间。
``` literallayout
# pvs -o pv_name,pv_size,pv_free
  PV         PSize  PFree
  /dev/sdb1  17.14G 17.14G
  /dev/sdc1  17.14G 17.09G
  /dev/sdd1  17.14G 17.14G
```
下面的例子显示相同的输出结果，根据可用空间字段排序。
``` literallayout
# pvs -o pv_name,pv_size,pv_free -O pv_free
  PV         PSize  PFree
  /dev/sdc1  17.14G 17.09G
  /dev/sdd1  17.14G 17.14G
  /dev/sdb1  17.14G 17.14G
```
以下示例显示您无需显示正在排序的字段。
``` literallayout
# pvs -o pv_name,pv_size -O pv_free
  PV         PSize
  /dev/sdc1  17.14G
  /dev/sdd1  17.14G
  /dev/sdb1  17.14G
```
要显示反向排序，请在您在使用 `-`{.literal} 字符的 `-O`{.literal}
参数后指定的字段前。
``` literallayout
# pvs -o pv_name,pv_size,pv_free -O -pv_free
  PV         PSize  PFree
  /dev/sdd1  17.14G 17.14G
  /dev/sdb1  17.14G 17.14G
  /dev/sdc1  17.14G 17.09G
```
:::
::: section
::: titlepage
# []{#assembly_customizing-lvm-display-configuring-and-managing-logical-volumes.html#proc_specifying-lvm-display-units-customizing-lvm-display}为 LVM 报告显示指定单位 {.title}
:::
要指定 LVM 报告显示的单元，使用 report 命令的 `--units`{.literal}
参数。您可以指定(b)ytes、(k)iB、(m)egabytes、(g)igabytes、(t)erabytes、(e)xabytes、(p)etabytes
和(h)uman- 可读。默认显示是人类可读的。您可以通过在
`/etc/lvm/lvm.conf`{.literal} 文件的 `global`{.literal} 部分设置
`units`{.literal} 参数来覆盖默认设置。
下面的例子指定 `pvs`{.literal} 命令的输出结果的单位为
兆字节，而不是默认的千兆字节。
``` literallayout
# pvs --units m
  PV         VG     Fmt  Attr PSize     PFree
  /dev/sda1         lvm2 --   17555.40M 17555.40M
  /dev/sdb1  new_vg lvm2 a-   17552.00M 17552.00M
  /dev/sdc1  new_vg lvm2 a-   17552.00M 17500.00M
  /dev/sdd1  new_vg lvm2 a-   17552.00M 17552.00M
```
默认情况下，显示的单位是 1024 的倍数。您可以使用大写字母代表单位是 1000
的倍数（B、K、M、G、T、H）。
下面的命令以默认单位（1024 的倍数）显示输出结果。
``` literallayout
# pvs
  PV         VG     Fmt  Attr PSize  PFree
  /dev/sdb1  new_vg lvm2 a-   17.14G 17.14G
  /dev/sdc1  new_vg lvm2 a-   17.14G 17.09G
  /dev/sdd1  new_vg lvm2 a-   17.14G 17.14G
```
下面的命令以 1000 的倍数为单位显示输出结果。
``` literallayout
#  pvs --units G
  PV         VG     Fmt  Attr PSize  PFree
  /dev/sdb1  new_vg lvm2 a-   18.40G 18.40G
  /dev/sdc1  new_vg lvm2 a-   18.40G 18.35G
  /dev/sdd1  new_vg lvm2 a-   18.40G 18.40G
```
您也可以指定y (s)ectors（定义为 512 字节）或自定义单元。
以下示例以扇区（sector）为单位显示 `pvs`{.literal} 命令的输出结果。
``` literallayout
# pvs --units s
  PV         VG     Fmt  Attr PSize     PFree
  /dev/sdb1  new_vg lvm2 a-   35946496S 35946496S
  /dev/sdc1  new_vg lvm2 a-   35946496S 35840000S
  /dev/sdd1  new_vg lvm2 a-   35946496S 35946496S
```
下面的例子显示 `pvs`{.literal} 命令的输出结果，单位为 4MB。
``` literallayout
# pvs --units 4m
  PV         VG     Fmt  Attr PSize    PFree
  /dev/sdb1  new_vg lvm2 a-   4388.00U 4388.00U
  /dev/sdc1  new_vg lvm2 a-   4388.00U 4375.00U
  /dev/sdd1  new_vg lvm2 a-   4388.00U 4388.00U
```
:::
::: section
::: titlepage
# []{#assembly_customizing-lvm-display-configuring-and-managing-logical-volumes.html#proc_diplaying-lvm-output-in-JSON-customizing-lvm-display}以 JSON 格式显示 LVM 命令输出 {.title}
:::
您可以使用 LVM 显示命令的 `--reportformat`{.literal} 选项以 JSON
格式显示输出结果。
以下示例以标准默认格式显示 `lvs`{.literal} 的输出结果。
``` literallayout
# lvs
  LV      VG            Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  my_raid my_vg         Rwi-a-r---  12.00m                                    100.00
  root    rhel_host-075 -wi-ao----   6.67g
  swap    rhel_host-075 -wi-ao---- 820.00m