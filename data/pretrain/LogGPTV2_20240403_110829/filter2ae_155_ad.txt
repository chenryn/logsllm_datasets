                      zero
                        (int)0 - 0x00 00 00 00
                  TC_ENDBLOCKDATA - 0x78
      TC_REFERENCE - 0x71
        Handle - 8257539 - 0x00 7e 00 03
第四步，修改`handle`值以及对应的`classDescFlags`值：
    STREAM_MAGIC - 0xac ed
    STREAM_VERSION - 0x00 05
    Contents
      TC_OBJECT - 0x73
        TC_CLASSDESC - 0x72
          className
            Length - 32 - 0x00 20
            Value - com.panda.sec.BeanContextSupport - 0x636f6d2e70616e64612e7365632e4265616e436f6e74657874537570706f7274
          serialVersionUID - 0x00 00 00 00 00 00 00 14
          newHandle 0x00 7e 00 00
          classDescFlags - 0x03 - SC_WRITE_METHOD | SC_SERIALIZABLE
          fieldCount - 0 - 0x00 00
          classAnnotations
            TC_ENDBLOCKDATA - 0x78
          superClassDesc
            TC_NULL - 0x70
        newHandle 0x00 7e 00 01
        classdata
          com.panda.sec.BeanContextSupport
            values
          objectAnnotation          // 从这里开始
                TC_OBJECT - 0x73
                TC_CLASSDESC - 0x72
                  className
                    Length - 41 - 0x00 29
                    Value - com.panda.sec.AnnotationInvocationHandler - 0x636f6d2e70616e64612e7365632e416e6e6f746174696f6e496e766f636174696f6e48616e646c6572
                  serialVersionUID - 0x00 00 00 00 00 00 00 0a
                  newHandle 0x00 7e 00 02
                  classDescFlags - 0x02 - SC_SERIALIZABLE
                  fieldCount - 1 - 0x00 01
                  Fields
                    0:
                      Int - I - 0x49
                      fieldName
                        Length - 4 - 0x00 04
                        Value - zero - 0x7a65726f
                  classAnnotations
                    TC_ENDBLOCKDATA - 0x78
                  superClassDesc
                    TC_NULL - 0x70
                newHandle 0x00 7e 00 03
                classdata
                  com.panda.sec.AnnotationInvocationHandler
                    values
                      zero
                        (int)0 - 0x00 00 00 00
                  TC_ENDBLOCKDATA - 0x78
      TC_REFERENCE - 0x71
        Handle - 8257539 - 0x00 7e 00 03
> 注：这里最后的`Handle - 8257539 - 0x00 7e 00
> 03`中的`8257539`是`serializationDumper`中生成的数值，具体在序列化或反序列化流程中的体现，没有具体深究，该值不影响我们最终序列化数据的生成，该值的生成算法如下：
>  
>  
>     public static void num(){
>             byte b1 = 0 ;
>             byte b2 = 126;
>             byte b3 = 0;
>             byte b4 = 3;
>             int handle = (
>                     ((b1                              ((b2                              ((b3                              ((b4      ) &       0xff)
>             );
>             System.out.println("Handle - " + handle + " - 0x" +
> byteToHex(b1) + " " + byteToHex(b2) + " " + byteToHex(b3) + " " +
> byteToHex(b4));
>  
>         }
>  
>
> 其中，b1 b2 b3 b4组合是 00 7e 00 xx，即代表了引用handle的值，然后将这些值经过运算就可以得到最终的8257539值。
然后根据这段数据结构，转换成十六进制数据如下：
    ac ed 00 05 73 72 00 20 636f6d2e70616e64612e7365632e4265616e436f6e74657874537570706f7274
    00 00 00 00 00 00 00 14 03 00 00 78 70 73 72 00 29 636f6d2e70616e64612e7365632e416e6e6f746174696f6e496e766f636174696f6e48616e646c6572
    00 00 00 00 00 00 00 0a 02 00 01 49 00 04 7a65726f 78 70 00 00 00 00 78 71 00 7e 00 03
这里需要注意的是，我们在前文提到了
>
> `newhandle`实际上没有被真正的写入文件，如果我们把这里的`007e0000`加入到序列化数据中，会发生异常，从而终止反序列化进程，之所以会在这里显示出来，是因为`serializationDumper`的作者为了方便使用者分析序列化数据的结构；
所以我们在构建十六进制数据的过程中要丢弃掉`newhandle`对应的十六进制数据
最后以4个字符为一组，8个组为一行，整理可得：
    aced 0005 7372 0020 636f 6d2e 7061 6e64
    612e 7365 632e 4265 616e 436f 6e74 6578
    7453 7570 706f 7274 0000 0000 0000 0014
    0300 0078 7073 7200 2963 6f6d 2e70 616e
    6461 2e73 6563 2e41 6e6e 6f74 6174 696f
    6e49 6e76 6f63 6174 696f 6e48 616e 646c
    6572 0000 0000 0000 000a 0200 0149 0004
    7a65 726f 7870 0000 0000 7871 007e 0003
将这些内容替换掉在`从一个case说起`最开始部分生成的`payload1`里的内容
然后尝试再次运行以下代码：
    package com.panda.sec;
    import java.io.*;
    public class Main {
        public static void payload() throws IOException, ClassNotFoundException {
    //        AnnotationInvocationHandler annotationInvocationHandler = new AnnotationInvocationHandler(0);
    //
    //        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("payload1"));
    //        out.writeObject(annotationInvocationHandler);
    //        out.writeObject(annotationInvocationHandler);
    //        out.close();
            ObjectInputStream in = new ObjectInputStream(new FileInputStream("payload1"));
            System.out.println(in.readObject().toString());
            AnnotationInvocationHandler str = (AnnotationInvocationHandler)in.readObject();
            System.out.println(str.toString());
            str.exec("open /System/Applications/Calculator.app");
        }
        public static void main(String[] args) throws IOException, ClassNotFoundException {
            payload();
        }
    }
结果如下：
成功实现了RCE，并且可以看到，我们第一次反序列还原的对象是`com.panda.sec.BeanContextSupport`，第二次反序列化还原的对象是`com.panda.sec.AnnotationInvocationHandler`，也正对应了我们自己手动插入数据的顺序
## 0x05 jdk8u20 漏洞分析
我们在`jdk8u20漏洞原理`部分提到`逃过异常抛出`是该漏洞的关键所在，又经过上面一个case的分析，现在再来看看如何逃过异常抛出呢？没错，就是在`jdk`源码中找到一个类似于该`case`中的`BeanContextSupport`类，让`BeanContextSupport`成为外层，去调用`jdk`源码中的`AnnotationInvocationHandler`类，这样一来没有异常抛出就能够使反序列化流程不被终止，成功组成新的gadget链，完成一次完美的反序列化漏洞攻击。
那么在`jdk`源码中到底有没有一个类似于该`case`中的`BeanContextSupport`类？答案是显而易见的，其实为了方便读者理解此处的内容，我在case中就把这个类的名称给了出来——是的，就是`java.beans.beancontext.BeanContextSuppor`类，我们利用的是该类中的`readChildren`方法，来具体看看：
    public final void readChildren(ObjectInputStream ois) throws IOException, ClassNotFoundException {
            int count = serializable;
            while (count-- > 0) {
                Object                      child = null;
                BeanContextSupport.BCSChild bscc  = null;
                try {
                    child = ois.readObject();
                    bscc  = (BeanContextSupport.BCSChild)ois.readObject();
                } catch (IOException ioe) {
                    continue;
                } catch (ClassNotFoundException cnfe) {
                    continue;
                }
                synchronized(child) {
                    BeanContextChild bcc = null;
                    try {
                        bcc = (BeanContextChild)child;
                    } catch (ClassCastException cce) {
                        // do nothing;
                    }
                    if (bcc != null) {
                        try {
                            bcc.setBeanContext(getBeanContextPeer());
                           bcc.addPropertyChangeListener("beanContext", childPCL);
                           bcc.addVetoableChangeListener("beanContext", childVCL);
                        } catch (PropertyVetoException pve) {
                            continue;
                        }
                    }
                    childDeserializedHook(child, bscc);
                }
            }
        }
可以看到，在该方法的第7行，对传入进来的`ObjectInputStream`对象调用了`readObject`方法进行反序列化处理，并且当在反序列化过程中如果出现异常，采用的是`continue`处理。完美的符合我们的要求。
我们在上文中提到`ObjectAnnotation`这个概念，并且其实可以发现，如果存在`ObjectAnnotation`结构，那么一般是由`TC_ENDBLOCKDATA
-0x78`去标记结尾的，但是这里其实存在一个问题，我们知道在jdk7u21修复中是因为`IllegalArgumentException`异常被捕获后抛出了`java.io.InvalidObjectException`，虽然这里我们可以利用`BeanContextSupport`来强制序列化流程继续下去，但是抛出的异常会导致`BeanContextSupport`的`ObjectAnnotation`中`TC_ENDBLOCKDATA
- 0x78`结尾标志无法被正常处理，如果我们不手动删除这个`TC_ENDBLOCKDATA -0x78`那么会导致后面的结构归在`ObjectAnnotation`结构中，从而读取错误，反序列化出来的数据不是我们预期数据。所以我们在生成`BeanContextSupport`的`ObjectAnnotation`中不能按照正规的序列化结构，需要将标记结尾的结构`TC_ENDBLOCKDATA
- 0x78`删除
也正由于我们把`TC_ENDBLOCKDATA -0x78`删除了，会导致我们在使用`SerializationDumper`工具查看`jdk8u20`的序列化数据结构出错，如下图所示：
这里还有一个tips点，就是我们在插入`BeanContextSupport`对象的时候并不是像case中那样直接插入，而是借用假属性的概念插入。在`成员抛弃`中我们提到
> 在反序列化中，如果当前这个对象中的某个字段并没有在字节流中出现，则这些字段会使用类中定义的默认值，
> **如果这个值出现在字节流中，但是并不属于对象，则抛弃该值，但是如果这个值是一个对象的话，那么会为这个值分配一个 Handle。**
所以我们插入一个任意类型为`BeanContextSupport`的字段就可以在不影响原有的序列化流程的情况下，形成一个gadget链
这里可能有点难以理解，多说一点
我们知道一般gadget链是一链接着一链紧紧相连，通过写各种类之间的调用，就能够满足整个gadget链的要求，实现整个gadget链的相连。但在jdk8u20中，并非如此，因为`LinkedHashSet`没法在
**满足绕过异常抛出的条件下**
直接调用`BeanContextSupport`方法，但是`BeanContextSupport`可以调用`AnnotationInvocationHandler`方法，这也就导致我们的gadget链在`LinkedHashSet`下一步断了，那怎么办？
只能在`LinkedHashSet`中强行插入一个`BeanContextSupport`类型的字段值，由于在java反序列化的流程中，一般都是首先还原对象中字段的值，然后才会还原`objectAnnotation`结构中的值（即是按照序列化数据结构的顺序），所以它会首先反序列化`LinkedHashSet`，然后反序列`LinkedHashSet`字段的值，由于在这个字段值中有一个`BeanContextSupport`类型的字段，所以反序列化会去还原`BeanContextSupport`对象，也就是`objectAnnotation`中的数据
在反序列化`BeanContextSupport`的过程中，会首先反序列化`BeanContextSupport`的字段值，其中有个值为`Templates.class`
的 `AnnotationInvocationHandler`
类的对象的字段，然后反序列化会去还原`AnnotationInvocationHandler`对象，成功的关联了下一个链！
最后就是同`Jdk7u21`一样的流程，利用动态代理触发`Proxy.equals(EvilTemplates.class)`，达到恶意类注入实现RCE的最终目的。
目前jdk8u20反序列化漏洞payload的写法有以下几种方式：
  * 原生的，通过数组手动去构建：
  * 通过字节码写入的方式构建：
  * 通过python javaSerializationTools模块构建：
  * 修改数组大小以及存储，利用字节码方式构建：
纵观以上的方法各有各的优劣，有的容易理解，但是构建起来却很麻烦，有的不容易理解，但是构建起来较为方便，其实还有如果读者全文看下来，还有一种更容易理解的方法，就是先把`jdk7u21`漏洞利用的payload的序列化数据结构生成出来，然后向该数据结构中用类似case中的方法，去手动插入对象，但是这个工作量比较大，故我也没有手动去实现，有兴趣、有时间的朋友可以去尝试利用该方法生成payload（包你酸爽～但是对你理解`jdk8u21`来说，这种方式是最直白的方式）
另外，jdk8u20特殊的一点在于，实际上`BeanContextSupport`不能算是真正意义上的一条链，链还是jdk7u21中的那条链，只不过`BeanContextSupport`是用来避免抛出异常用到的媒介。
## 0x06 总结
本文对`jdk8u20`原生反序列化漏洞进行了分析，但和其他分析文章不同的是，本文没有按照常规的分析方法进行分析，而是重点写了一个case，用一个最简单的case去了解`jdk8u20`最核心的问题点，然后从整体上阐述了`jdk8u20`反序列化漏洞是怎么一回事，流程上是什么样的
站在读者的角度上去考虑，让自己如何用更直白的方式让别人理解你发的内容，我觉得这样的方式可以让我更能理解我所分析的漏洞、记忆我所写的内容，毕竟，每一个分析文章其实对于我来说都是一次整体上的总结
## 0x07 参考