### Synchronization of Resumed Sessions in TLS

When a new connection is established, intermediary A simply forwards the request from client C to server S and then relays S's response back to C without any modifications. The handshake between C and S is completed through A, reusing the master secret known to both C, S, and A. This process is illustrated in the top half of Connection 2 in Figure 3. The resulting epochs on both connections share the same keys, which are also known to A. In fact, the epochs on the new connections are more synchronized than those on the original connection: the data verified on these epochs is identical. After resumption, the only discernible difference between the two connections is that the C-A connection has a session with server identity cert A, while the A-S connection has a session with server identity cert S. All other differences have been eliminated. This synchronization is crucial for the attacks discussed in Section VI.

The ease with which resumed sessions can be synchronized highlights the weak authentication guarantees of the abbreviated handshake. It merely ensures that the client and server share the same master secret, whereas applications often (and incorrectly) assume they share the same session. To address this, we propose a TLS extension in Section VII, similar to [49], which links the resumption handshake to the original session, thereby providing stronger guarantees.

### Attacks on Client Authentication over TLS

TLS is most commonly used in anonymous-client mode, where only the server is authenticated. Consequently, applications often deploy their own mechanisms to authenticate users after the TLS handshake is complete. Previous research has shown that layering a client authentication protocol within a server-authenticated secure channel is vulnerable to generic man-in-the-middle (MitM) attacks [8, 41]. Ray's renegotiation attack [45] is an example of such an attack.

An attacker A, who can intercept application-level protocol messages between C and S, can tunnel these messages through its own connection with S, thereby impersonating C at S. This attack is possible in three scenarios:
1. If the client C uses the same application-level credentials on both encrypted and unencrypted channels.
2. If C uses the same credentials on different servers, one of which could be malicious.
3. If C fails to correctly validate the server identity and confuses a malicious server A with an honest server S.

In all these cases, the application-level protocol should ensure that the credentials released by C to A cannot be reused by A at S. A common approach to enforce this is to cryptographically bind the inner application authentication to the outer underlying TLS channel [8, 6, 49]. This binding is effective only if the inner protocol uses strong keys (public or secret) or a passphrase-based challenge-response scheme resistant to dictionary attacks. Bearer tokens, however, cannot be protected. In this section, we discuss four such binding mechanisms and demonstrate how to break their guarantees using the synchronizing TLS proxy described in Section V.

#### Triple Handshake Attack

Suppose the attacker A has an anonymous-client TLS connection to server S. When A attempts to access a user-protected resource, S triggers a renegotiation to require A to authenticate as a valid user, using a client certificate or some other credential (PSK, SRP, etc.). This pattern is enabled, for example, on the Apache web server when a client tries to access a protected directory.

A wants to authenticate to S as C (without C’s credentials). More generally, even if A has previously authenticated to S, it wants to change its authenticated identity to C. Before explaining our attack, it is useful to recall the 2009 renegotiation attack [45] and its countermeasure [49], which cryptographically binds each handshake on a connection to the preceding one by passing the verify data of the previous handshake in the client and server hellos of the new handshake. Therefore, if A initiates a full handshake with S but later tries to forward C’s handshake to S as a renegotiation, the verify data in C’s hello would not match A’s handshake, prompting the server to reject the renegotiation.

However, if a session is resumed on a new connection, the first handshake is an abbreviated handshake that only authenticates the session master secret, not the entire session. Thus, the renegotiation countermeasure does not bind the new connection to the old session, re-enabling the MitM impersonation attack.

Assume the adversary A has set up synchronized sessions and connections with C and S. If C resumes the session on a new connection, A can resume the same session on a new connection to S. As discussed in Section V-C, at the end of the abbreviated handshake, the verify data on both connections is the same. Now, if C or S initiates a client-authenticated TLS renegotiation, A can simply forward all messages from C to S and back, making no changes. The client and server hellos will refer to the verify data from the abbreviated handshake and thus be accepted by both parties. This triple handshake across two connections is depicted in Figure 3.

At the end of the renegotiation, from TLS’s perspective, C and S share a new mutually-authenticated session. A does not have the keys to this new session but may have injected data in both directions before the renegotiation, which may now be mistakenly attributed by C to S, and vice versa. In other words, the TLS peer on the connection has changed, and the application may not realize it, defeating the purpose of the secure renegotiation extension.

**Preconditions and Variations:**
- The attack works regardless of whether the renegotiation uses client certificates, PSK, or SRP to authenticate the client, and even if the initial handshake also used client authentication.
- The main precondition is that the client be willing to use the same authentication credentials on A and S, which is reasonable for public-key certificates issued by trusted CAs.
- The second precondition is that the client and server should be willing to accept new mutual identities during renegotiation. We experimentally tested a wide variety of TLS client applications, including mainstream browsers, popular HTTPS libraries, version control systems, VPN clients, and mail clients, and found that a vast majority of them silently accept a change of server identity during renegotiation, making them vulnerable to our impersonation attack.

**Web Exploit and Mitigation:**
As a concrete example, we implemented the above attack as a web server acting as a synchronizing proxy between a browser C and an honest website S. After proxying the initial handshake and session resumption, A can tamper with the connection in several ways before instigating renegotiation:
- A can send a POST message to S, which will be subsequently attributed to C after renegotiation.
- A can send a page with JavaScript to C, so that the script gets executed later in the client-authenticated session.
- A can source a client-authenticated page from S in one frame at C while reading its contents from another frame sourced at A, bypassing the same-origin policy (XSS).

All of these attacks can subvert both user authentication on the server and same-origin protections on the browser. Protections like CSRF tokens and Content Security Policy do not help since the page’s origin is no longer reliable.

We have disclosed this vulnerability to several browser vendors. The easiest mitigation is for web browsers to refuse a change of server identity during renegotiation. Some vendors have already made this change in response to our report. For web servers and other HTTPS applications, we recommend restricting peer certificate changes as a default, with a careful review of the UI and API design in cases where the identity is expected to change.

#### Breaking Compound Authentication in Tunneled Protocols

Wireless authentication protocols such as EAP-TLS [51], PEAP [42], and EAP-TTLS [27] are particularly susceptible to MitM attacks, even over TLS [8], due to the ease with which other wireless devices and rogue access points can fool naive clients into connecting to them [19]. To protect against such attacks, some of these protocols adopted new compound authentication mechanisms [44] that cryptographically bind the inner EAP authentication protocol with the outer TLS tunnel.

In PEAP, when the inner protocol is MSChapv2 [1], the inner protocol generates a session key (ISK) that is combined with a tunnel key (TK) generated from the outer TLS connection’s master secret (and client and server randoms) to derive a compound authentication key (CMK) and encryption key (CSK) for subsequent use between the wireless device and access point. The idea is that these keys will only be known to devices that participated in both the outer TLS handshake and the inner EAP authentication.

\[ TK = \text{prf}(ms, \text{"client EAP encryption"}, cr|sr) \]
\[ CMK|CSK = \text{prf}(\text{concat}(TK, ISK)) \]

PEAP also features fast reconnect, an API for TLS session resumption: as a client moves from one wireless access point to another and needs to reconnect, the client simply resumes its TLS session and skips the inner authentication protocol. In this case, ISK is set to 0s, so the compound authentication and encryption keys depend only on TK. This mechanism presumes that the tunnel key is unique on every connection; our synchronizing TLS proxy breaks this assumption and leads to a new attack.

As usual, A sets up synchronized connections with C and S and forwards the untampered MSChapv2 exchange to let C authenticate to S, negotiate ISK, combine it with TK, and derive CMK and CSK. Since A only knows TK, it cannot read or tamper with any messages after the authentication. Nonetheless, if A uses fast reconnect to resume the TLS session with S, the inner EAP authentication is skipped, and the new compound keys are only derived from TK. Yet, S still associates the connection with C, resulting in a complete impersonation by A, without any involvement from C.

**Preconditions and Mitigations:**
- The malicious access point must convince the user to trust its certificate, which can be achieved in various ways [19].
- The mitigation for tunneled protocols is not straightforward. At the TLS level, a more general mitigation would be to change the master secret computation, as discussed in Section VII. In PEAP, one possibility is to change the tunnel key computation to include the server’s identity, represented by the server’s certificate or its hash:
  \[ TK = \text{prf}(ms, \text{"client EAP encryption"}, cr|sr|\text{cert S}) \]

#### Breaking TLS Channel Bindings

Channel bindings [56] are a generic protocol composition mechanism whereby a transport-level cryptographic protocol such as IPsec, SSH, or TLS can expose specific session and connection parameters to applications, most notably to bind authentication mechanisms to the underlying secure channel. Their stated goal is to establish that “no man-in-the-middle exists between two end-points that have been authenticated at one network layer but are using a secure channel at a lower network layer.” TLS implementations expose three channel bindings to applications [6]; we consider one of them here and another (tls-server-end-point) in the online material.

The ‘tls-unique’ channel binding for a given TLS connection is defined as the first finished message in the most recent handshake on the connection. If the most recent handshake is a full handshake, this value is the client verify data (cvd); if it is an abbreviated handshake, it is the server verify data (svd). The intent is that tls-unique be a unique representative of the current epoch, shared only between the two peers who established the epoch. Our synchronized session resumption breaks this by establishing different connections with honest peers that have the same tls-unique value.

To see how this can be concretely exploited, consider the SCRAM-SHA-1-PLUS protocol [39] used in the SASL and GSS-API families of authentication mechanisms in a variety of applications like messaging (XMPP), mail (SMTP, IMAP), and directory services (LDAP). SCRAM is a challenge-response protocol where the client and server store different keys (CKp, SKp) derived from a user’s password (p) and use them to authenticate one another. When used over TLS, the first two messages contain client and server nonces and the tls-unique value for the underlying TLS connection. The last two messages contain MACs over these values for authentication and channel binding:

1. \( C \rightarrow S : u, cn, \text{tls-unique} \)
2. \( S \rightarrow C : cn, sn, s, i \)
3. \( C \rightarrow S : cn, sn, \text{ClientProof}(CKp, \log_{1,2,3}) \)
4. \( S \rightarrow C : cn, sn, \text{ServerSignature}(SKp, \log_{1,2,3}) \)

In our attack, C establishes, then resumes a session with A, who synchronizes a connection with S to have the same tls-unique value. A then forwards the SCRAM messages between C and S. Since the server identity is not part of the exchange and the tls-unique values match, the SCRAM authentication succeeds, enabling A to impersonate C at S.

**Precondition:**
- C must be willing to accept A’s certificate, which is already considered a security risk for SCRAM-like protocols, as they then become vulnerable to dictionary attacks. However, the tls-unique protection is meant to protect users from impersonation even if the TLS protocol uses an anonymous key exchange [39, §9]. Our attack shows that this is not the case.

**Mitigation:**
- To prevent this attack without impacting TLS, we recommend significant changes to the specification of tls-unique in Section VII. With such modifications, tls-unique may possibly become truly unique across connections.

#### Breaking Channel-Bound Tokens on the Web

Channel ID is a TLS extension [10], implemented by Chrome and all Google servers, that aims to bind web authentication tokens such as cookies to a cryptographic channel between a client and a server, without the need for client certificates. A channel can be long-lived (at least as long as cookies) and consists of many TLS sessions and connections. Channel ID is a follow-up to the previously published origin-bound certificates proposal of Dietz et al. [24], which was considered impractical to implement and deploy.

A TLS client that supports Channel ID generates and stores a public-private elliptic curve key pair (pk_cid,S, sk_cid,S) associated with each domain name S that it connects to. The TLS handshake is modified so that, instead of a client certificate and certificate verify message, the client sends a Channel ID authentication message that contains the public key (a point on the P-256 elliptic curve) and an ECDSA signature of the handshake log using the private key. To protect the privacy of the client’s public key from passive eavesdroppers, the authentication message is sent encrypted after the client’s CCS message, but this does not affect its authentication properties.

The main protocol goal is that, unlike bearer tokens, the client’s Channel ID cannot be used by a malicious server A to impersonate the client on a different server S, even if C accidentally connects to A using its Channel ID for S. In fact, this should be impossible even if A obtains the private key of a certificate valid for S, provided Channel ID is only enabled with forward-secret ciphersuites such as DHE [10, §6]. Consequently, an application that binds its tokens to the Channel ID makes them unusable on a different TLS client without the associated private key. A typical example is for S to create a cookie by signing the session identifier with the Channel ID public key:

\[ c = \text{signed}(sk_S, [sid, pk_{cid}]) \]

S would then only accept this cookie over a TLS connection authenticated by sk_cid, so stealing the cookie is of no use.

**Attack and Mitigation:**
- The security of Channel ID relies on the uniqueness of the handshake log (log_c). If the attacker A can create a session to S with the same log, it can reuse C’s Channel ID signature to impersonate C at S. Our synchronizing proxy achieves exactly this feat after resumption.
- Suppose C establishes, then resumes a TLS session with A. A can synchronize a connection to S such that the log in the resumption handshake is identical between C-A and A-S. Hence, the Channel ID signature on the resumption handshake can be replayed to S, allowing A to successfully impersonate C. A can then obtain S’s channel-bound cookies meant for C and freely use them on this connection.
- This attack is well within the threat model of Channel ID. The Channel ID authors promptly responded to our report, and in response, the protocol specification is being revised to include the hash of the original handshake in the Channel ID signature of abbreviated handshakes.

### Countermeasures

To mitigate the vulnerabilities discussed, we propose several countermeasures in Section VII. These include modifying the master secret computation, changing the tunnel key computation in PEAP, and revising the tls-unique specification to ensure it is truly unique across connections.