每次读取10条附近用户信息  
1\. 同时取出skyid和距离  
   平均响应时间1.50毫秒 每秒处理5318次请求. CPU使用率100%.  
2\. 取出skyid,和地理位置. 距离交给程序计算.  
   平均响应时间1.21毫秒, 每秒处理6568次请求. CPU使用率100%.  
每次读取40条附近用户信息  
1\. 同时取出skyid和距离  
   平均响应时间2.36毫秒 每秒处理3380次请求. CPU使用率100%.  
2\. 取出skyid,和地理位置. 距离交给程序计算.  
   平均响应时间1.91毫秒, 每秒处理4167次请求. CPU使用率100%.  
每次读取120条附近用户信息  
1\. 同时取出skyid和距离  
   平均响应时间3.78毫秒 每秒处理2109次请求. CPU使用率100%.  
2\. 取出skyid,和地理位置. 距离交给程序计算.  
   平均响应时间2.85毫秒, 每秒处理2795次请求. CPU使用率100%.  
地理位置更新测试 :   
平均响应时间0.23毫秒, 每秒处理33621次请求. CPU使用率90%.  
### 二、数据量24756224
每次读取10条附近用户信息  
1\. 同时取出skyid和距离  
   平均响应时间5.98毫秒 每秒处理1336次请求. CPU使用率100%.  
2\. 取出skyid,和地理位置. 距离交给程序计算.  
   平均响应时间5.97毫秒, 每秒处理1338次请求. CPU使用率100%.  
每次读取40条附近用户信息  
1\. 同时取出skyid和距离  
   平均响应时间13.5毫秒 每秒处理593次请求. CPU使用率100%.  
2\. 取出skyid,和地理位置. 距离交给程序计算.  
   平均响应时间14.0毫秒, 每秒处理571次请求. CPU使用率100%.  
每次读取120条附近用户信息  
1\. 同时取出skyid和距离  
   平均响应时间17.7毫秒 每秒处理451次请求. CPU使用率100%.  
2\. 取出skyid,和地理位置. 距离交给程序计算.  
   平均响应时间17.8毫秒, 每秒处理449次请求. CPU使用率100%.  
地理位置更新测试 :   
平均响应时间0.71毫秒, 每秒处理11100次请求. CPU使用率90%  
还有一种优化方式, 把geometry转成point, 对point来排序. 如下 :   
中国经纬度范围, 没有涉及跨正负区域, 离边界也还有一段距离, 使用point来度量距离可行 :  
最北点位于黑龙江省北部漠河已被黑龙江主航道中心线处，纬度为北纬53度。  
最南点位于南海南部的曾母暗沙，纬度为北纬4度。  
最东点位于黑龙江与乌苏里江主航道中心线的交汇处，精度为东经135度。  
最西点位于帕米尔高原上，经度为东经73度。  
如果把几何类型转存为point类型, 在距离排序时与使用geometry类型排序得到的结果一致. 取附近用户信息的性能有大幅提升.  
```  
urslbs_test=> alter table test1 add column col1 point;  
urslbs_test=> update test1 set col1 = cast(replace(substr(ST_AsText(lonlat),6),' ',',') as point);  
urslbs_test=> create index idx_test1_col1 on test1 using gist(col1);  
urslbs_test=> select cast(replace(substr(ST_AsText('0101000020E61000002FC786C9AF2A5D40866BFF14D8254440'::geometry(Point,4326)),6),' ',',') as point);  
         replace            
--------------------------  
 (116.6669792,40.2956568)  
(1 row)  
urslbs_test=> select point_distance(col1,'(116.6669792,40.2956568)'::point), st_distance_sphere('0101000020E61000002FC786C9AF2A5D40866BFF14D8254440'::geometry(Point,4326), lonlat) from test1 order by col1  '(116.6669792,40.2956568)'::point limit 10;  
    point_distance    | st_distance_sphere   
----------------------+--------------------  
                    0 |                  0  
 0.000154592140808128 |   17.1253091983443  
  0.00336883988488212 |   297.073719657173  
  0.00490960806990255 |   468.361916333953  
   0.0049619458693147 |   493.019043438912  
  0.00786551161781989 |   861.135253407573  
  0.00786595648666547 |   861.119017114206  
  0.00792924406107087 |   734.735620683819  
  0.00792924406107087 |   734.735620683819  
  0.00817754802614712 |   772.808877940454  
(10 rows)  
urslbs_test=> select st_distance_sphere('0101000020E61000002FC786C9AF2A5D40866BFF14D8254440'::geometry(Point,4326), lonlat) from test1 order by lonlat  '0101000020E61000002FC786C9AF2A5D40866BFF14D8254440'::geometry(Point,4326) limit 10;  
 st_distance_sphere   
--------------------  
                  0  
   17.1253091983443  
   297.073719657173  
   468.361916333953  
   493.019043438912  
   861.135253407573  
   861.119017114206  
   734.735620683819  
   734.735620683819  
   772.808877940454  
(10 rows)  
```  
![pic](20111018_01_pic_003.jpg)  
具体测试数据如下 :   
一、数据量773632 :   
读测试(取出skyid,和地理位置. 距离交给程序计算.) :   
每次读取10条附近用户信息  
   平均响应时间0.40毫秒, 每秒处理19573次请求. CPU使用率100%.  
每次读取40条附近用户信息  
   平均响应时间0.66毫秒, 每秒处理12004次请求. CPU使用率100%.  
每次读取120条附近用户信息  
   平均响应时间1.24毫秒, 每秒处理6444次请求. CPU使用率100%.  
二、数据量24756224 :   
读测试(取出skyid,和地理位置. 距离交给程序计算.) :   
每次读取10条附近用户信息  
   平均响应时间3.34毫秒, 每秒处理2390次请求. CPU使用率100%.  
每次读取40条附近用户信息  
   平均响应时间4.73毫秒, 每秒处理1689次请求. CPU使用率100%.  
每次读取120条附近用户信息  
   平均响应时间7.38毫秒, 每秒处理1082次请求. CPU使用率100%.  
## 参考  
1\. http://www.postgis.org/documentation/manual-2.0/geometry_distance_centroid.html  
2\. http://en.wikipedia.org/wiki/Nearest_neighbor_search  
3\. http://en.wikipedia.org/wiki/KNN  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")