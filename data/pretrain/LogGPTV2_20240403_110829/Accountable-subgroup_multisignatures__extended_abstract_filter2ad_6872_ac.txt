IL =
Ii
i=1
· g
s
(mod p).
In this case, player L can sign any message M it wants
on behalf of the entire group G:
in fact s ends up being
the “group’s secret key,” corresponding to the “public key”
(cid:9)L
i=1 Ii (mod p).3
Fix 2. We ﬁx this problem by requiring that each player i
provides a zero-knowledge proof of knowledge (ZKPoK) of
the secret key relative to Ii (i.e., a ZKPoK of the discrete
log of Ii in base g). To remove interaction in this ZKPoK,
we use the random oracle ´a la Fiat-Shamir [12].
Problem 3: Fix 2 is insuﬃcient. Indeed, what is the veriﬁer
that checks the validity of this ZKPoK? Assuming that the
public-key database is implemented via a trusted center (or
certifying authority), this veriﬁer could be the center itself
(this, in fact, was the solution proposed in previous works on
DLP-based multisignatures). However, this is an additional
requirement that also introduces potential weaknesses and
constraints. Indeed, there are ways to implement exchange
of public keys without trusted centers. For instance, each
signer can hand its public key to all potential veriﬁers at
the next CCS conference. Alternatively, signer i can use its
previously certiﬁed public key to sign its current public key
Ii. (And, though a trusted center may have been involved in
publicizing the previous key, it may not be around to certify
the current Ii.)
Fix 3. These problems can be solved by having each signer
i include in its public key not only Ii, but also the (non-
interactive, random-oracle based) ZKPoK. This results in
3 This attack has appeared in the past, in particular, in the
works of [18, 21, 26]. The same attack can be used against
the “Type II” scheme of [28, 29].
a moderate loss of eﬃciency: each public key gets slightly
longer, and each veriﬁcation requires 2|S| + 2 exponentia-
tions rather than just two. (This is so because the veriﬁer
of S’s signature of M also needs to verify the proofs in the
public keys of the members of S, and each veriﬁcation takes
two exponentiations) . However, each public key of a mem-
ber of G needs to be checked at most once by each veriﬁer
if the veriﬁer keeps careful records.
Problem 4: We cannot prove Fix 3 secure for many signers.
For Fix 3 to work in the security proof, it is necessary that,
for each bad player Pj, a polynomial-time simulator succeeds
in extracting the discrete log of Ij from the ZKPoK that
the Pj provides. However, for all known proof techniques
in the random-oracle model, if player Pj computes Ij after
making q queries to oracle H, then the simulator succeeds
in computing the discrete log of Ij with probability at most
1/q. Thus, if there are k bad signers, then the simulator will
succeed for all of them with probability at most 1/qk. That
is, for the simulator to be polynomial time, there can be at
most logarithmically many signers.
Fix 4. All signers i in G after computing their own si and
Ii, exchange the Ii values and their commitments Xi for the
ZKPoK. Then, each individual signer i proves knowledge of
si by using the “joint challenge” e = H(X1, I1, . . . , XL, IL)
and the Schnorr signature relative to Ii. The above simula-
tor can now extract the sj for all k bad signers Pj with the
total success probability of about 1/(kq) (because there are
kq total queries to the oracle). Notice that the adversary
may cause the key generation protocol to fail (and thus, it
will need to be restarted with a diﬀerent total group G).
All in all, this is a modest problem, because the same phe-
nomenon occurs during each signature computation, while
key generation is only done once.
Problem 5: The public keys in Fix 4 are too long.
In or-
der for the ZKPoK in Fix 4 to be veriﬁable, each player i
has to include its signature σi in its public key, as well as
X1, I1, . . . , XL, IL on which it was computed. In fact, the
veriﬁer better check that the vector (I1, . . . , IL) is the same
for all members of S. Such public keys are too long, be-
cause their length is proportional to G, regardless of how
small S may be. Note that, in the basic solution of Sec-
tion 1, the veriﬁer needs to retrieve only |S| ordinary (and,
thus, short) public keys. Even if the public key database
contains a special entry for (X1, I1, . . . , XL, IL), the veriﬁer
of a single signature by, say, a 3-member subgroup has to
download a vector of length proportional to L.
Fix 5. After the ZKPoKs, as in Fix 4, are exchanged, each
signer i veriﬁes all of them and then computes a Merkle tree
(using the random oracle H as the hash function) with the
leaves I1, . . . , IL. (Merkle trees are recalled in Section B of
the Appendix.) This Merkle tree will have depth exactly
log L (for simplicity, assume that L is a power of 2). Then,
signer i includes in its public key P Ki, the value Ii and the
authenticating path of Ii in the Merkle tree. Notice that
it contains one public key and log L
P Ki is quite short:
hash values (for instance, if each ordinary public key is 2000
bits long, the length of the hash values is 200, and there are
1000 potential signers, then each P Ki is only as long as two
ordinary public keys).
To verify S’s signature of M , for each signer i in S, the
veriﬁer uses Ii and the alleged authenticating path for Ii to
250compute the alleged root value Vi, and checks that Vi = Vj
for all signers i, j in S.
In a sense, if player i is honest
and puts Ii together with its authenticating path into P Ki,
it implicitly puts into P Ki the root value Vi, and claims
that any Ij that correctly “Merkle-hashes” to Vi has been
checked by i to be part of a valid ZKPoK. (Of course, a
corrupted player j can use Vi so as to ﬁnd some other value
j (cid:12)= Ij, also Merkle-hashing to Vi, for which it knows no
(cid:1)
I
ZKPoK; but this can be done only by ﬁnding a collision for
the random oracle H, which is extremely hard to do.) Thus,
if at least one good signer exists in S, all the other signers
in S are forced to have correct keys.
Problem 6: Concurrent signing. The naive scheme is silent
about the possibility of concurrent signing. That is, a good
player i belonging to two subgroups S and S
, would be per-
mitted to participate simultaneously in signing protocols for
(M, S) and (M
). Our proof of security, however, needs
to use rewinding, for reasons explained in Section 3.5. It is
a well-know fact that rewinding is incompatible with con-
currency (unless the amount of concurrency is very small).
, S
(cid:1)
(cid:1)
(cid:1)
Fix 6: To prevent concurrency from messing up our security
proof, we do not allow a signer to begin a new signing pro-
tocol until the previous one has been completed or aborted.
This is not a serious loss, given that signing in our DLP-
based scheme is a 3-round protocol. (Note, however, that if
two subgroups are disjoint, then their signing processes can
go on simultaneously.)
3.3 The DLP(cid:1) Assumption
1. Samplability. The following probabilistic algorithm
Gen(1k) runs in expected polynomial time:
Repeat
Let q be a random k-bit string
Until q is prime and p = 2q + 1 is prime
Output p and q.
2. Hardness. For any algorithm A, denote by pA
k the
probability that, on inputs
(a) a random k-bit prime q such that p = 2q + 1 is
also prime,
∗
p of order q, and
(b) a random element g ∈ Z
∗
(c) a random I in the g-generated subgroup of Z
p ,
A outputs s ∈ [0, q − 1] such that I ≡ gs (mod p).
Then, ∀ probabilistic polynomial-time A, ∀c > 0, and
∀ suﬃciently large k,
A
k < k
p
−c
.
Remark. If p and q are generated by Gen above, then it is
easy to ﬁnd a random element g ∈ Z
∗
p of order q (by picking
a random element r ∈ Z
p until g = r(p−1)/q mod p (cid:12)= 1).
∗
We note that our scheme continues to be provably secure
based on a more general, but more complex, DLP assump-
tion, described in the full version of this paper.
3.4 Description
• Preliminaries
Security Parameters. All players are assumed to have,
as a common input, the security parameter k, and the
number L of players is assumed to be polynomial in k.
< k is deterministically
A second security parameter k
(cid:1)
computed from k. (Typically, k
= 100.)4
(cid:1)
Random Oracles. The players use (in any ﬁxed stan-
dard way) the single random oracle H to implement
ﬁve independent random oracles H1, H2, H3, H4 and
H5, such that
H1, H2 : {0, 1}∗ → {0, 1},
H3, H5 : {0, 1}∗ → {0, 1}k(cid:1)
H4 : {0, 1}∗ → {0, 1}2k(cid:1)
.
, and
Subroutine Gen. Key generation will use the algorithm
Gen of assumption DLP
(or DLP
).
(cid:1)(cid:1)
(cid:1)
Distinguished Player.
In describing the scheme, we
shall use a distinguished player D. This is for conve-
nience only, and does not require changing our model.
In fact, D is a player who knows no secrets and can be
implemented by any one of the players in the subgroup
S, or even collectively by the members of S.
Merkle Trees. We assume some familiarity with the
notion of a Merkle tree [24], whose description is given
in Section B of the Appendix.
• Key generation
Common keys. All players run Gen(1k) using H1(2k),
H1(2k+1), . . . , as the random tape in order to generate
primes p and q. They then generate a random g ∈ Z
∗
p
of order q using H2(2k), H2(2k + 1), . . . , as the random
tape.
Individual keys. Each player Pi (1 ≤ i ≤ L) does the
following:
1. chooses si ∈ [0, q − 1] and sets the secret key
SKi = si;
2. computes its public value Ii = gsi mod p;
3. chooses a random ri ∈ [0, q − 1] and computes a
commitment Xi = gri mod p
4. broadcasts (Xi, Ii) to all the players;
5. upon receipt of (X1, I1), . . . , (XL, IL), computes
e = H3(X1, I1, . . . , XL, IL) and yi = esi + ri;
6. broadcasts yi to all the players;
(cid:1)
4As for all Fiat-Shamir-like schemes, including Schnorr’s, k
controls the security of our scheme in a way that is quite
diﬀerent and independent of k. Indeed, k should be large
enough so that solving the discreet logarithm problem when
(cid:1)
q is a k-bit prime is practically impossible. Parameter k
should be large enough so that it is practically impossible
to perform 2k(cid:1)
steps of computation, and the probability
−k(cid:1)
2
is practically negligible. Of course, we can always set
= k− 1, but our scheme can be made much more eﬃcient
(cid:1)
k
while maintaining the same level of security by selecting an
appropriately lower value of k
.
(cid:1)
2517. for each (Xj, yj) received from player Pj, veriﬁes
that gyj ≡ XjI e
j mod p. If all checks are satisﬁed,
Pi computes the authenticating path, Pathi, of
leaf i in the L-leaf binary Merkle tree whose j-th
leaf contains Ij and whose hash function is H4.
8. registers P Ki = (p, q, g, Ii, Pathi) as its public
key.
(Comment: p, q, g are included in P Ki only to save
time for the veriﬁer. Alternatively, p, q and g could
be a special entry in the public key database, if one
exists, or could be re-computed by the veriﬁer.)
• Signing: Suppose the players in a subgroup S =
{Pi1 , . . . , Pim} wish to sign jointly a message M . Then
they perform the following three-round protocol:
1. Each signer Pij ∈ S, if not currently involved in
another signing protocol,
1.1 picks a random rj ∈ [0, q − 1];
1.2 computes its individual commitment Xj =
2. D computes the joint commitment as the product
j=1 Xj mod p and broadcasts it to each
grj mod p;
(cid:9)m
1.3 sends Xj to D.
signer Pij ∈ S.
(cid:1)X =
challenge e = H5((cid:1)X, M, S)
3. Each signer Pij ∈ S
3.1 queries the random oracle H5 to compute the
3.2 computes yj = esj + rj mod q;
3.3 sends yj to D.
(cid:10)m
4. D computes(cid:1)y =
((cid:1)X,(cid:1)y) as the signature.
j=1 yj mod q and outputs σ =
(cid:9)j
(cid:10)j
(Remark: The role of D in steps 2 and 4 can be per-
formed by Pi1 or by all players in S, e.g., “arranged in
α=1 yα,
a circle” by having Pij send
respectively— to Pij+1 .)
• Veriﬁcation: To verify a signature σ = ((cid:1)X,(cid:1)y) of a
message M of a subgroup S = {Pi1 , . . . , Pim} whose
members have public keys P Ki1 , . . . , P Kim , one does
the following:
α=1 Xα —or
1. Check that all public keys contain the same p, q
and g.
2. For each Pij ∈ S, use Iij and Pathij to compute a
candidate root value Vij for that player’s alleged
Merkle tree, and check that all such Vij are equal.
3. Compute (cid:1)IS =
4. Compute e = H5((cid:1)X, M, S).
(cid:9)m
(cid:1)y ≡ (cid:1)X(cid:1)I e
5. Check that g
j=1 Iij mod p.
S (mod p).
(Remark: Steps 1-3 need be performed only once for a
given subgroup S.)
3.5 Security
(cid:1)
Theorem 1. Under the DLP