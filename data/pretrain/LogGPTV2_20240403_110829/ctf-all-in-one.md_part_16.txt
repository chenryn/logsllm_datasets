make -j4 && sudo make install
接下来修改链接信息：
# echo /usr/local/jemalloc/ >> /etc/ld.so.conf.d/jemalloc.conf
# ldconfig
当我们想要在编译程序时指定 jemalloc 时可以像下面这样：
174
1.5.11 jemalloc
$ gcc -L/usr/local/jemalloc/lib -Wl,--rpath=/usr/local/jemalloc/
lib -ljemalloc test.c
$ ldd a.out
linux-vdso.so.1 (0x00007fff69b62000)
libjemalloc.so.2 => /usr/local/jemalloc/lib/libjemalloc.
so.2 (0x00007f744483b000)
libc.so.6 => /usr/lib/libc.so.6 (0x00007f744447f000)
libm.so.6 => /usr/lib/libm.so.6 (0x00007f74440ea000)
libstdc++.so.6 => /usr/lib/libstdc++.so.6 (0x00007f7443d
61000)
libpthread.so.0 => /usr/lib/libpthread.so.0 (0x00007f744
3b43000)
libdl.so.2 => /usr/lib/libdl.so.2 (0x00007f744393f000)
libgcc_s.so.1 => /usr/lib/libgcc_s.so.1 (0x00007f7443727
000)
/lib64/ld-linux-x86-64.so.2 => /usr/lib64/ld-linux-x86-6
4.so.2 (0x00007f7444f02000)
可以看到 libjemalloc.so.2 已经被链接到程序里了。
jemalloc 详解
我们以 jemalloc-4.5.0 版本来讲解。
数据结构
利用技术
CTF 实例
查看章节 6.1.29、6.1.34。
参考资料
jemalloc
175
1.5.11 jemalloc
Pseudomonarchia jemallocum
The Shadow over Android
shadow
Exploiting VLC - A case study on jemalloc heap overflows
Exploiting the jemalloc Memory Allocator: Owning Firefox's Heap
176
1.5.12 MIPS 汇编基础
1.5.12 MIPS 汇编基础
177
1.6 密码学基础
1.6 密码学基础
178
1.7 Android 安全基础
1.7 Android 安全基础
1.7.1 Android 环境搭建
1.7.2 Dalvik 指令集
1.7.3 ARM 汇编基础
1.7.4 Android 常用工具
179
1.7.1 Android 环境搭建
1.7.1 Android 环境搭建
180
1.7.2 Dalvik 指令集
1.7.2 Dalvik 指令集
Dalvik 虚拟机
Dalvik 指令集
指令格式
寄存器
类型、方法和字段
空操作指令
数据操作指令
返回指令
数据定义指令
锁指令
实例操作指令
数组操作指令
异常指令
跳转指令
比较指令
字段操作指令
方法调用指令
数据转换指令
数据运算指令
smali 语法
循环语句
switch 语句
try-catch 语句
更多资料
Dalvik 虚拟机
Android 程序运行在 Dalvik 虚拟机中，它与传统的 Java 虚拟机不同，完全基于寄
存器架构，数据通过直接通过寄存器传递，大大提高了效率。Dalvik 虚拟机属于
Android 运行时环境，它与一些核心库共同承担 Android 应用程序的运行工作。
Dalvik 虚拟机有自己的指令集，即 smali 代码，下面会详细介绍它们。
181
1.7.2 Dalvik 指令集
Dalvik 指令集
指令格式
Dalvik 指令语法由指令的位描述与指令格式标识来决定。
位描述约定如下：
每 16 位使用空格分隔。
每个字母占 4 位，按照顺序从高字节到低字节排列。
顺序采用 A~Z 的单个大写字母作为一个 4 位的操作码，op 表示一个 8 位的操
作码。
”∅“来表示这字段所有位为0值。
指令格式约定如下：
指令格式标识大多由三个字符组成，前两个是数字，最后一个是字母。
第一个数字表示指令有多少个 16 位的字组成。
第二个数字表示指令最多使用寄存器的个数。
第三个字母为类型码，表示指令用到的额外数据的类型。
寄存器
Dalvik 寄存器都是 32 位的，如果是 64 位的数据，则使用相邻的两个寄存器来表
示。
寄存器有两种命名法：v 命名法和 p 命名法。如果一个函数使用到 M 个寄存器，其
中有 N 个参数，那么参数会使用最后的 N 个寄存器，而局部变量使用从 v0 开始的
前 M-N 个寄存器。在 v 命名法中，不管寄存器中是参数还是局部变量，都以 v 开
头。而 p 命名法中，参数命名从 p0 开始，依次递增，在代码比较复杂的时候，使
用 p 命名法可以清楚地区分开参数和局部变量，大多数工具使用的也是 p 命名法。
类型、方法和字段
Dalvik 字节码只有基本类型和引用类型两种。除了对象类型和数组类型是引用类型
外，其余的都是基本类型：
182
1.7.2 Dalvik 指令集
语法 含义
V void
Z boolean
B byte
S short
C char
I int
J long
F float
D double
L 对象类型
[ 数组类型
对象类型格式是 L/; ，如 String 表示为
Ljava/lang/String; 。
数组类型格式是 [ 加上类型，如 int[] 表示为 [I ， int[][] 表示为
[[I 。
Dalvik 使用方法名、类型参数和返回值来描述一个方法。方法格式如下：
Lpackage/name/ObjectName;->MethodName(III)Z
例如把下面的 Java 代码转换成 smali：
# Java
String method(int, int [][], int, String, Object[])
# smali
.method method(I[[IILjava/lang/String;[Ljava/lang/Object;)Ljava/
lang/String;
.end method
字段格式如下：
183
1.7.2 Dalvik 指令集
Lpackage/name/ObjectName;->FieldName:Ljava/lang/String;
空操作指令
空操作指令的助记符为 nop ，值为 00，通常用于对齐代码。
数据操作指令
数据操作指令为 move ，原型为 move destination, source 。
move vA, vB ：vB -> vA，都是 4 位
move/from16 vAA, vBBBB ：vBBBB -> vAA，源寄存器 16 位，目的寄存器
8 位
move/16 vAAAA, vBBBB ：vBBBB -> vAAAA，都是 16 位
move-wide vA, vB ：4 位的寄存器对赋值，都是 4 位
move-wide/from16vAA, vBBBB 、 move-wide/16 vAAAA, vBBBB ：与
move-wide 相同
move-object vA, vB ：对象赋值，都是 4 位
move-object/from16 vAA, vBBBB ：对象赋值，源寄存器 16 位，目的寄存
器 8 位
move-object/16 vAAAA, vBBBB ：对象赋值，都是 16 位
move-result vAA ：将上一个 invoke 类型指令操作的单字非对象结果赋值
给 vAA 寄存器
move-result-wide vAA ：将上一个 invoke 类型指令操作的双字非对象结果
赋值给 vAA 寄存器
move-result-object vAA ：将上一个 invoke 类型指令操作的对象结果赋值
给 vAA 寄存器
move-exception vAA ：保存一个运行时发生的异常到 vAA 寄存器
返回指令
基础字节码为 return 。
return-void ：从一个 void 方法返回
return vAA ：返回一个 32 位非对象类型的值，返回值寄存器位 8 位的寄存
器 vAA
184
1.7.2 Dalvik 指令集
return-wide vAA ：返回一个 64 位非对象类型的值，返回值寄存器为 8 位
的 vAA
return-object vAA ：返回一个对象类型的值，返回值寄存器为 8 位的 vAA
数据定义指令
基础字节码为 const 。
const/4 vA, #+B ：将数值符号扩展为 32 位后赋值给寄存器 vA
const/16 vAA, #+BBBB ：将数值符号扩展为 32 位后赋值给寄存器 vAA
const vAA, #+BBBBBBBB ：将数值赋值给寄存器 vAA
const/high16 vAA, #+BBBB0000 ：将数值右边零扩展为 32 位后赋值给寄
存器 vAA
const-wide/16 vAA, #+BBBB ：将数值符号扩展为 64 位后赋值给寄存器
vAA
const-wide/32 vAA, #+BBBBBBBB ：将数值符号扩展为 64 位后赋值给寄存
器 vAA
const-wide vAA, #+BBBBBBBBBBBBBBBB ：将数值赋给寄存器对 vAA
const-wide/high16 vAA, #+BBBB000000000000 ：将数值右边零扩展为 64
位后赋值给寄存器对 vAA
const-string vAA, string@BBBB ：通过字符串索引构造一个字符串并赋
值给寄存器 vAA
const-string/jumbo vAA, string@BBBBBBBB ：通过字符串索（较大）引
构造一个字符串并赋值给寄存器 vAA
const-class vAA, type@BBBB ：通过类型索引获取一个类型引用并赋值给
寄存器 vAA
const-class/jumbo vAAAA, type@BBBBBBBB ：通过给定的类型索引获取一
个类引用并赋值给寄存器 vAAAA。这条指令占用两个字节，值为 0x00ff
锁指令
用在多线程程序中对同一对象操作。
monitor-enter vAA ：为指定的对象获取锁
monitor-exit vAA ：释放指定的对象的锁
185
1.7.2 Dalvik 指令集
实例操作指令
check-cast vAA, type@BBBB
check-cast/jumbo vAAAA, type@BBBBBBBB ：将 vAA 寄存器中的对象引用
转换成指定的类型，如果失败会抛出 ClassCastException 异常。如果类型 B
指定的是基本类型，对于非基本类型的 A 来说，运行始终会失败
instance-of vA, vB, type@CCCC
instance-of vAAAA, vBBBB, type@CCCCCCCC ：判断 vB 寄存器中的对象
引用是否可以转换成指定的类型，如果可以 vA 寄存器赋值为 1，否则 vA 寄存
器赋值为 0
new-instance vAA, type@BBBB
new-instance vAAAA, type@BBBBBBBB ：构造一个指定类型对象的新实
例，并将对象引用赋值给 vAA 寄存器，类型符 type 指定的类型不能是数组类
数组操作指令
array-length vA, vB ：获取vB寄存器中数组的长度并将值赋给vA寄存
器。
new-array vA, vB, type@CCCC
new-array/jumbo vAAAA, vBBBB, type@CCCCCCCC ：构造指定类型
（type@CCCCCCCC）与大小（vBBBB）的数组，并将值赋给 vAAAA 寄存
器
filled-new-array {vC, vD, vE, vF, vG}, type@BBBB ：构造指定类型
（type@BBBB）和大小（vA）的数组并填充数组内容。vA 寄存器是隐含使用
的，处理指定数组的大小外还指定了参数的个数，vC~vG 是使用的参数寄存器
列表。
filled-new-array/range {vCCCC .. vNNNN}, type@BBBB ：同上，只是
参数寄存器使用 range 字节码后缀指定了取值范围，vC 是第一个参数寄存
器，N=A+C-1。
fill-array-data vAA, +BBBBBBBB ：用指定的数据来填充数组，vAA 寄存
器为数组引用，引用必须为基础类型的数组，在指令后面紧跟一个数据表。
arrayop vAA, vBB, vCC ：对 vBB 寄存器指定的数组元素进行取值和赋
值。vCC 寄存器指定数组元素索引，vAA 寄存器用来存放读取的或需要设置的
数组元素的值。读取元素使用 aget 类指令，元素赋值使用 aput 类指令。
异常指令
186
1.7.2 Dalvik 指令集
throw vAA ：抛出 vAA 寄存器中指定类型的异常
跳转指令
有三种跳转指令：无条件跳转（goto）、分支跳转（switch）和条件跳转（if）。
goto +AA
goto/16 +AAAA
goto/32 +AAAAAAAA ：无条件跳转到指定偏移处，不能为 0
packed-switch vAA, +BBBBBBBB ：分支跳转指令。vAA 寄存器为 switch 分
支中需要判断的值，BBBBBBBB 指向一个 packed-switch-payload 格式的偏移
表，表中的值是有规律递增的
sparse-switch vAA, +BBBBBBBB ：分支跳转指令。vAA 寄存器为 switch 分
支中需要判断的值，BBBBBBBB 指向一个 sparse-switch-payload 格式
的偏移表，表中的值是无规律的偏移量
if-test vA, vB, +CCCC ：条件跳转指令。比较 vA 寄存器与 vB 寄存器的
值，如果比较结果满足就跳转到 CCCC 指定的偏移处，CCCC 不能为
0。 if-test 类型的指令有：
if-eq ：if(vA==vB)
if-ne ：if(vA!=vB)
if-lt ：if(vA=vB)
if-gt ：if(vA>vB)
if-le ：if(vA=0)
if-gtz ：if(vAA>0)
if-lez ：if(vAA<=0)
比较指令
187
1.7.2 Dalvik 指令集
对两个寄存器的值进行比较，格式为 cmpkind vAA, vBB, vCC，其中 vBB 和 vCC
寄存器是需要比较的两个寄存器或两个寄存器对，比较的结果放到 vAA 寄存器。指
令集中共有5条比较指令：
cmpl-float
cmpl-double ：如果 vBB 寄存器大于 vCC 寄存器，结果为 -1，相等结果为
0，小于结果为 1
cmpg-float
cmpg-double ：如果 vBB 寄存器大于 vCC 寄存器，结果为 1，相等结果为
0，小于结果为 -1
cmp-long ：如果 vBB 寄存器大于 vCC 寄存器，结果为 1，相等结果为 0，
小于结果为 -1
字段操作指令
用于对对象实例的字段进行读写操作。对普通字段与静态字段操作有两种指令集，
分别是 iinstanceop vA, vB, field@CCCC 与 sstaticop vAA,