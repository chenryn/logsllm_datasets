14.0 ms
Table 1: Latency of JEDI’s implementation of BLS12-381
Laptop Rasp. Pi Sensor
Operation
G1 Mul. (Chosen Scalar)
509 ms
109 µs
G2 Mul. (Chosen Scalar)
1.44 s
343 µs
GT Mul. (Rand. Scalar)
504 µs
1.90 s
GT Mul. (Chosen Scalar)
2.81 s
507 µs
Pairing
1.29 ms
3.83 s
remain unchanged, and are used as in §4.1. WKD-IBE keys
may also be included in DOTs granting publish permission,
for anonymous signatures (§4.2). Using our library for JEDI,
we implemented a wrapper around the bw2 client library. It
transparently encrypts and decrypts messages using WKD-
IBE, and includes WKD-IBE parameters and keys in DOTs
and principals, as needed for JEDI. bw2 signs each message
with a digital signature (ﬁrst alternative in §4.3).
The bw2-speciﬁc wrapper is less than 900 lines of Go code.
Our implementation required no changes to bw2’s client li-
brary, router, blockchain, or core—it is a separate module.
Importantly, it provides the same API as the standard bw2
client library. Thus, it can be used as a drop-in replacement for
the standard bw2 client library, to easily add end-to-end en-
cryption to existing bw2 applications with minimal changes.
7 Evaluation
We evaluate JEDI via microbenchmarks, determine its power
consumption on a low-power sensor, measure the overhead
of applying it to bw2, and compare it to other systems.
7.1 Microbenchmarks
Benchmarks labeled “Laptop” were produced on a Lenovo
T470p laptop with an Intel Core i7-7820HQ CPU @ 2.90
GHz. Benchmarks labeled “Raspberry Pi” were produced on
a Raspberry Pi 3 Model B+ with an ARM Cortex-A53 @
1.4 GHz. Benchmarks labeled “Sensor” were produced on a
commercially available ultra low-power environmental sensor
platform called “Hamilton” with an ARM Cortex-M0+ @ 48
MHz. We describe Hamilton in more detail in §7.3.
7.1.1 Performance of BLS12-381 in JEDI
Table 1 compares the performance of JEDI’s BLS12-381
implementation on the three platforms, with our assembly
optimizations. As expected from Fig. 1, the Raspberry Pi
performance is an order of magnitude slower than Laptop
performance, and performance on the Hamilton sensor is an
additional two-to-three orders of magnitude slower.
7.1.2 Performance of WKD-IBE in JEDI
Fig. 6 depicts the performance of JEDI’s cryptography primi-
tives. Fig. 6 does not include the sensor platform; §7.3 thor-
oughly treats performance of JEDI on low-power sensors.
In Figure 6a, we used a pattern of length 20 for all opera-
tions, which would correspond to, e.g., a URI of length 14 and
an Expiry hierarchy of depth 6. To measure decryption and
signing time, we measure the time to decrypt the ciphertext or
sign the message, plus the time to generate a decryption key
for that pattern or ID. For example, if one receives a message
USENIX Association
28th USENIX Security Symposium    1529
Laptop Rasp. Pi
3.08 ms 37.3 ms
Enc.
Dec.
3.61 ms 43.9 ms
KeyD. 4.77 ms 58.5 ms
Sign
4.80 ms 61.2 ms
Verify 4.78 ms 56.3 ms
of Encrypt,
(a) Latency
Decrypt, KeyDer, Sign, and
Verify with 20 attributes
(b) Encryption with Revocation
Figure 6: Performance of JEDI’s cryptography
on a/b/c/d/e/f, but has the key for a/*, he must generate
the key for a/b/c/d/e/f to decrypt it.
Figure 6a demonstrates that the JEDI encrypts and signs
messages and generates qualiﬁed keys for delegation at prac-
tical speeds. On a laptop, all WKD-IBE operations take less
than 10 ms with up to 20 attributes. On a Raspberry Pi, they
are 10x slower (as expected), but still run at interactive speeds.
7.1.3 Performance of Immediate Revocation in JEDI
Figure 6b shows the cost of JEDI’s immediate revocation
protocol (§5). A private key containing k leaves consists of
O(logk + logn) WKD-IBE secret keys where n is the total
number of leaves. Therefore, the performance of immediate
revocation depends primarily on the number of leaves.
To encrypt a message, one WKD-IBE encryption is per-
formed for each subtree needed to cover all unrevoked leaves.
In general, encryption is O(r log n
r ), where r is the number of
revoked leaves. Each key contains a set of consecutive leaves,
so encryption is also O(Rlog n
R ), where R is the number of
revoked JEDI keys. Decryption time remains almost the same,
since only one WKD-IBE decryption is needed.
To benchmark revocation, we use a complete binary tree
of depth 16 (n = 65536). The time to generate a new key for
delegation is essentially independent of the number of leaves
conveyed in that key, because logk (cid:28) logn. We empirically
conﬁrmed this; the time to generate a key for delegation was
constant at 2.4 ms on a laptop and 31 ms on a Raspberry Pi as
the number of leaves in the key was varied from 5 to 1,000.
To benchmark encryption with revocation, we assume that
there exist 2,048 users in the system each with 32 leaves. We
measure encryption time with a pattern with 20 ﬁxed slots
(for URI and time) as we vary the number of revoked users.
Figure 6b shows that encryption becomes expensive when the
revocation list is large (500 milliseconds on laptop and ≈ 5
seconds on Raspberry Pi). However, such an encryption only
needs to be performed by a publisher when the URI, time, or
revocation list changes; subsequent messages can reuse the
underlying symmetric key (§5.5). Furthermore, the revocation
list includes only revoked keys that match the (URI, time) pair
being used, so it is not expected to grow very large.
7.2 Performance of JEDI in bw2
In bw2, the two critical-path operations are publishing a mes-
sage to a URI, and receiving a message as part of a subscrip-
(a) Encrypt/publish message
(b) Receive/decrypt message
Figure 7: Critical-path operations in bw2, with/without JEDI
tion. We measure the overhead of JEDI for these operations
because they are core to bw2’s functionality and would be
used by any messaging application built on bw2. Our method-
ology is to perform each operation repeatedly in a loop, to
measure the sustained performance (operations/second), and
report the average time per operation (inverse). To minimize
the effect of the network, the router was on the same link as
the client, and the link capacity was 1 Gbit/s. In our experi-
ments, we used a URI of length 6 and an Expiry tree of depth
6. We also include measurements from a strawman system
with pre-shared AES keys—this represents the critical-path
overhead of an approach based on the Trusted Key Server
discussed in §2. Our results are in Fig. 7.
We implement the optimizations in §3.6.1, so only sym-
metric key encryption/decryption must be performed in the
common case (labeled “usual” in the diagram). However, the
symmetric keys will not be cached for the ﬁrst message sent
every hour, when the WKD-IBE pattern changes. A WKD-
IBE operation must be performed in this case (labeled “1st
message” in the diagram). For large messages, the cost of
symmetric key encryption dominates. JEDI has a particularly
small overhead for 1 MiB messages in Fig. 7b, perhaps be-
cause 1 MiB messages take several milliseconds to transmit
over the network, allowing the client to decrypt a message
while the router is sending the next message.
We also consider creating DOTs and initiating subscrip-
tions, which are not in the critical path of bw2. These results
are in Fig. 8 (note the log scale in Fig. 8a). Creating DOTs is
slower with JEDI, because WKD-IBE keys are generated and
included in the DOT. Initiating a subscription in bw2 requires
forming a DOT chain; in JEDI, one must also derive a private
key from the DOT chain. Fig. 8a shows the time to form a
short one-hop DOT chain, and in the case of JEDI, includes
the time to derive the private key. For JEDI’s encryption (§3),
these additional costs are incurred only by DOTs that grant
permission to subscribe. With anonymous signatures, DOTs
granting permission to publish incur this overhead as well, as
WKD-IBE keys must be included. Fig. 8b puts this in con-
text by measuring the end-to-end latency from initiating a
subscription to receiving the ﬁrst message (measured using
bw2’s “query” functionality).
For a DOT to be usable, it must be inserted into bw2’s
1530    28th USENIX Security Symposium
USENIX Association
050100No. Revoked Users (out of 2048)0100020003000400050006000Encrypt with Revoc. (ms)LaptopRasp. PiUnmodified bw2JEDI (usual)JEDI anon. sig. (usual)JEDI (1st msg)JEDI anon. sig. (1st msg)Trusted Key Server1 KiB32 KiB1 MiBSize of Message050100150200Time to Enc. & Publish (ms)1 KiB32 KiB1 MiBSize of Message05101520Time to Receive & Dec. (ms)Table 2: CPU and power costs on the Hamilton platform
Time Average Current
Operation
N/A
Sleep (Idle)
6.50 s
WKD-IBE Encrypt
WKD-IBE Encrypt and Sign
9.89 s
0.0063 mA
10.2 mA
10.2 mA
Table 3: Average current and expected battery life (for 1400
mAh battery) for sense-and-send, with varying sample interval
JEDI (enc & sign)
60 µA / 2.6 y
48 µA / 3.3 y
44 µA / 3.6 y
AES Only
32 µA / 5.1 y
20 µA / 8.1 y
15 µA / 10 y
JEDI (enc)
50 µA / 3.2 y
38 µA / 4.2 y
34 µA / 4.7 y
10 s
20 s
30 s
the TelosB; this is because those studies were constrained by
hardware available at the time. Modern 32-bit SoCs, like the
SAMR21, offer substantially better performance at a similar
price/power point to those older platforms [55].
7.3.1 CPU Usage
Table 2 shows the time for encryption and anonymous sign-
ing in JEDI on Hamilton. The results use the optimizations
discussed in §3.6 and §4.3, and include the time to “adjust”
precomputed state. They indicate that symmetric keys can be
encrypted and anonymously signed in less than 10 seconds.
This is feasible given that encryption and anonymous sign-
ing occur rarely, once an hour, and need not be produced at
interactive speeds in the normal “sense-and-send” use case.
7.3.2 Power Consumption
To calculate the impact on battery lifetime, we consider a
“sense-and-send” application, in which the Hamilton device
obtains readings from its sensors at regular intervals, and
immediately sends the readings encrypted over the wireless
network. We measured the average current consumed for
varying sample intervals, when each message is encrypted
with AES-CCM, without using JEDI (“AES Only” in Table
3). We estimate JEDI’s average current based on the current,
duration, and frequency (once per hour, for these estimates) of
JEDI operations, and add it to the average current of the “AES
Only” setup. Our estimates assume that the µTESLA-based
technique in §4.3 is used to avoid attaching a digital signature
to each message. We divide the battery’s energy capacity by
the result to compute lifetime. As shown in Table 3, JEDI
decreases battery life by about 40-60%. Battery life is several
years even with JEDI, acceptable for IoT sensor platforms.
JEDI’s overhead depends primarily on the granularity of
expiry times (one hour, for these estimates), not the sample
interval. To improve power consumption, one could use a
time tree with larger leaves, allowing principals to perform
WKD-IBE encryptions and anonymous signatures less often.
This would, of course, make expiry times coarser.
7.3.3 Memory Budget
Performing WKD-IBE operations requires only 6.5 KiB of
data memory, which ﬁts comfortably within the 32 KiB of data
memory (RAM) available on the SAMR21. The code space
required for our implementation of WKD-IBE and BLS12-
(a) Create DOT, Build Chain
(b) Time to Query/Subscribe
Figure 8: Occasional bw2 operations, with and without JEDI
registry. This requires a blockchain transaction (not included
in Fig. 8). An important consideration in this regard is size.
In the unmodiﬁed bw2 system, a DOT that grants permission
on a/b/c/d/e/f is 198 bytes. With JEDI, each DOT also
contains multiple WKD-IBE keys, according to the time range.
In the “worst case,” where the start time of a DOT is Jan 01 at
01:00, and the end time is Dec 31 at 22:59, a total of 45 keys
are needed. Each key is approximately 1 KiB, so the size of
this DOT is approximately 45 KiB.
Because bw2’s registry of DOTs is implemented using
blockchain smart contracts, the bandwidth for inserting DOTs
is limited. Using JEDI would increase the size of DOTs as
above, resulting in an approximately 100-400x decrease in
aggregate bandwidth for creating DOTs. However, this can
be mitigated by changing bw2 to not store DOTs directly in
the blockchain. DOTs can be stored in untrusted storage, with
only their hashes stored in the blockchain-based registry. Such
a solution could be based on Swarm [79] or Filecoin [43].
7.3 Feasibility on Ultra Low-Power Devices
We use a commercially available sensor platform called
“Hamilton” [4, 49] built around the Atmel SAMR21 system-
on-chip (SoC). The SAMR21 costs approximately $2.25 per
unit [40] and integrates a low-power microcontroller and ra-
dio. The sensor platform we used in this study costs $18 to
manufacture [55]. For battery lifetime calculations, we as-
sume that the platform is powered using a CR123A Lithium
battery that provides 1400 mAh at 3.0 V (252 J of energy).
Such a battery costs $1. The SAMR21 is heavily constrained:
it has only a 48 MHz CPU frequency based on the ARM
Cortex-M0+ microarchitecture, and a total of only 32 KiB of
data memory (RAM). Our goal is to validate that JEDI is prac-
tical for an ultra low-power sensor platform like Hamilton, in
the context of a “sense-and-send” application in a smart build-
ing. Since most of the platform’s cost ($18) comes from the
on-board transducers and assembly, rather than the SAMR21
SoC, using an even more resource-constrained SoC would
not signiﬁcantly decrease the platform’s cost. An analogous
argument applies to energy consumption, as the transducers