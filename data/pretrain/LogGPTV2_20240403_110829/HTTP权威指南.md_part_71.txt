MKCOL方法允许客户端在服务器上指定的URL处创建集合。乍一看，仅仅为了创
建集合而定义一个新方法好像有点儿多余。在PUT或POST方法之上加以修饰看起
来就是个完美的替代方案。WebDAV协议的设计者确实考虑过这些替代方案，但最
终还是选择定义一个新方法。决策背后的一些理由如下所述。
• 为了使用PUT或POST来创建集合，客户端要随请求发送一些额外的“语义黏胶”。
这当然是可以做到的，但定义这种特别的东西总是乏味且易错的。
• 大多数访问控制机制都是建立在方法类型之上的——只有少数能在库中创建和删
除资源。如果给其他方法过多的功能，这些访问控制机制就无法运作了。
下面是请求的例子：
MKCOL /publishing HTTP/1.1
460 ｜ 第19章
Host: minstar
Content-Length: 0
Connection: Keep-Alive
其响应可能是：
HTTP/1.1 201 Created
Server: Microsoft-IIS/5.0
Date: Fri, 10 May 2002 23:20:36 GMT
Location: http://minstar/publishing/
Content-Length: 0
我们再考察下面几种异常情况。
• 假设集合已经存在。如果发出MKCOL /colA请求而colA已存在（也就是说有名
字空间冲突），请求会失败，状态码是405 Method Not Allowed。
• 如果没有写权限，MKCOL请求会得到403 Forbidden失败状态码。 440
• 如果发出MKCOL /colA/colB这样的请求而colA不存在，请求会失败，状态码
是409 Conflict。
创建了文件或集合之后，可以用DELETE方法来删除。
19.2.12 DELETE方法
我们已经在第3章探讨过DELETE方法了。WebDAV扩展了它的语义以覆盖集合。
如果需要删除一个目录，就要提供 Depth首部。如果没有指定 Depth首部，
DELETE方法就假定Depth首部设定为无穷大——也就是说，该目录中的所有文件
和子目录都会被删除。响应中也有Content-Location首部，其值就是刚被删除的
集合。下面是一个请求的示例：
DELETE /publishing HTTP/1.0
Host: minstar
其响应的示例如下：
HTTP/1.1 200 OK
Server: Microsoft-IIS/5.0
Date: Tue, 14 May 2002 16:41:44 GMT
Content-Location: http://minstar/publishing/
Content-Type: text/xml
Content-Length: 0
删除集合时，总是有可能发生其中某个文件被其他人锁定而无法删除的情况。在这
种情况下，集合自身也无法删除，服务器会以207 Multi-Status状态码响应。请求示
例如下：
发布系统 ｜ 461
DELETE /publishing HTTP/1.0
Host: minstar
其响应的示例如下：
HTTP/1.1 207 Multi-Status
Server: Microsoft-IIS/5.0
Content-Location: http://minstar/publishing/
..............
http://minstar/index3/ch-publish.fm
 HTTP/1.1 423 Locked 
在这次事务中，XML 元素 中含有状态码 423 Locked，表明资源 ch-
441 publish.fm被别的用户锁定了。
19.2.13 COPY与MOVE方法
和MKCOL一样，有若干种方法可以定义新的COPY和MOVE操作方法。其中一
种方式规定COPY方法先对源进行GET请求，下载资源，然后用PUT请求上传
回服务器。可以设想，MOVE方法也有类似的操作情况（有个额外的DELETE操
作）。然而，这种处理过程无法很好地适应规模扩展——考虑一下在多级的集合上进
行COPY或MOVE操作管理所涉及的问题吧。
COPY和MOVE方法都将请求URL作为源，HTTP的Destination首部的内容作
为目标。MOVE方法在COPY方法之外还要做一些工作：它把源URL复制到目的
地，检查新创建的URI的完整性，再把源删除。请求示例如下：
{COPY,MOVE} /publishing HTTP/1.1
Destination: http://minstar/pub-new
Depth: infinity
Overwrite: T
Host: minstar
其响应示例如下：
HTTP/1.1 201 Created
Server: Microsoft-IIS/5.0
Date: Wed, 15 May 2002 18:29:53 GMT
Location: http://minstar.inktomi.com/pub-new/
Content-Type: text/xml
Content-Length: 0
在对集合操作时，COPY 或 MOVE 的行为受到 Depth首部的影响。如果没有
462 ｜ 第19章
Depth首部，就默认其值是无穷大（就是说，默认会把源目录的整个结构进行复制
或移动）。如果Depth设置为0，方法就只作用于资源本身。如果我们是对集合进
行复制或移动的话，在目的地就只创建和源具有相同属性的集合——集合内部的成
员就不再复制或移动了。
对于MOVE方法，Depth首部的值只允许为无穷大，原因显而易见。
1. Overwrite首部的效果
COPY和MOVE方法也可能使用Overwrite首部。Overwrite首部的值可以是T
或F。如果设置为T而且目标已存在，就在COPY或MOVE之前，对目标资源执行
Depth值为无穷大的DELETE操作。如果Overwrite标志设置为F而目标资源存
在，则操作会失败。 442
2. 对属性的COPY/MOVE
当复制集合或元素时，默认会复制其所有属性。不过，请求可以带有可选的XML
主体来提供额外的操作信息。可以指定要使操作成功，必须成功复制所有属性；或
者定义要使操作成功，必须复制哪些属性。
下面有两个特殊状况下的例子。
• 假设把COPY或MOVE作用到CGI程序或者其他产生内容的脚本程序的输出上。
为了保持语义，如果由CGI脚本产生的文件被复制或移动了，WebDAV要提供
src和link这两个XML元素，指向产生此页面的程序的位置。
• COPY和MOVE方法不一定能够复制所有的活属性。例如，我们来看一个CGI
程序。如果从cgi-bin目录中把它拷贝走，可能就不会再去执行它了。WebDAV
的现有规范让COPY和MOVE实现的是“尽力而为”解决方案，复制所有的静
态属性和合适的活属性。
3. 被锁定的资源与COPY/MOVE
如果资源目前正被锁定，COPY和MOVE都禁止把锁移动或复制到目标上。在这两
种情况下，如果要在一个自己有锁的现存集合中创建目标，所复制或移动的资源就
会被加到那个锁中。请看下面的例子：
COPY /publishing HTTP/1.1
Destination: http://minstar/archived/publishing-old
假设/publishing和/archived分别处于两个不同的锁之下：lock1和lock2。当COPY
发布系统 ｜ 463
操作结束时，/publishing仍旧处于lock1的范围内，而由于移动到了已被lock2锁
定的集合中，publishing-old 被加入到了 lock2 中。如果是 MOVE 操作，就只有
publishing-old被加入lock2。
表19-3列出了MKCOL、DELETE、COPY以及MOVE方法最有可能碰到的状态码。
表19-3 MKCOL、DELETE、COPY和MOVE方法的状态码
状 态 码 定 义 者 方 法 效 果
102 Processing WebDAV MOVE、COPY 如果请求花费的时间超过20秒，服务器就发送
这个状态码防止客户端超时。通常在COPY或
MOVE大的集合时可以见到
201 Created HTTP MKCOL、COPY、对于MKCOL，表示集合创建成功。对于COPY
443 MOVE 和MOVE，表示资源/集合已经复制或移动成功
204 No Content HTTP DELETE、COPY、对于DELETE，表示标准的成功响应。对于
MOVE COPY和MOVE，表示资源被成功地复制或移动
而覆盖了已有的实体
207 Multi-Status WebDAV MKCOL、COPY、对于MKCOL，表示常见的成功响应。对于
MOVE COPY和MOVE来说，如果有与资源相关（除
请求URI之外的）的错误，服务器就回复207
响应，其中带有详述错误的XML主体
403 Forbidden HTTP MKCOL、COPY、对于MKCOL，表明服务器不允许在指定的位置
MOVE 创建集合。对于COPY和MOVE，表明源和目
的是相同的
409 Conflict HTTP MKCOL、COPY、三种情况类似，都是方法试图创建集合或资源，
MOVE 而中间集合不存在——例如，试图创建colA/
colB，而colA不存在
412 Precondition HTTP COPY、MOVE 或者是Overwrite首部设置为F而目标存在，
Failed 或者是XML主体描述了一个特定需求（比如保
持liveness属性），而COPY或MOVE方法
无法保持该属性
415 Unsupported HTTP MKCOL 服务器不支持或不理解如何创建请求的实体类型
Media Type
422 Unprocessable WebDAV MKCOL 服务器不理解请求中发送的XML主体
Entity
423 Locked WebDAV DELETE、COPY、源或目标资源被锁定，或者方法提供的锁定令牌
MOVE 不匹配
502 Bad Gateway HTTP COPY、MOVE 目标在不同的服务器上并且缺少权限
507 Insufficient WebDAV MKCOL、COPY 没有足够的空闲空间创建资源
Storage
464 ｜ 第19章
19.2.14 增强的HTTP/1.1方法
WebDAV 修改了 HTTP 中 DELETE、PUT 以及 OPTIONS 方法的语义。GET 和
HEAD方法的语义保持不变。POST执行的操作总是由特定的服务器实现来定义
的，而WebDAV没有对POST的语义进行任何修改。我们已经在19.2.10节讨论过
DELETE方法了。这里将讨论PUT和OPTIONS方法。
1. PUT方法
尽管PUT不是由WebDAV定义的，但这是作者把内容传送到共享站点上的唯一方
法。我们在第3章中讨论过PUT的一般功能。WebDAV修改了该方法以支持锁定。 444
请看下面的例子：
PUT /ch-publish.fm HTTP/1.1
Accept: */*
If:()
User-Agent: DAV Client (C)
Host: minstar.inktomi.com
Connection: Keep-Alive
Cache-Control: no-cache
Content-Length: 1155
为了支持锁定，WebDAV在PUT请求中增加了If首部。在上面的事务中，If首
部的语义规定，如果If首部中说明的锁定令牌与资源（在这个例子中，是ch-
publish.fm）上的锁相匹配，就应当执行PUT操作。If首部还用在其他一些方
法中，比如PROPPATCH、DELETE、MOVE、LOCK以及UNLOCK等。
2. OPTIONS方法
我们在第3章中讨论过OPTIONS。这通常是启用了WebDAV的客户端发出的第一
个请求。客户端可以用OPTIONS方法验证WebDAV的能力。请看一个事务，其请
求如下：
OPTIONS /ch-publish.fm HTTP/1.1
Accept: */*
Host: minstar.inktomi.com
其响应如下：
HTTP/1.1 200 OK
Server: Microsoft-IIS/5.0
MS-Author-Via: DAV
DASL: 
DAV: 1, 2
Public: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE,
发布系统 ｜ 465
MKCOL,PROPFIND,PROPPATCH, LOCK, UNLOCK, SEARCH
Allow: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, COPY, MOVE,
PROPFIND,PROPPATCH, SEARCH, LOCK, UNLOCK
在对OPTIONS方法的响应中有一些有趣的首部。下面的介绍略微打乱了一下顺序。
• DAV首部携带了DAV遵从级别的信息。有下面两类遵从。
第1类遵从
要求服务器遵从RFC2518每节中的所有MUST需求。如果资源只能达到第1类
遵从，就要在DAV首部中发送1。
第2类遵从
满足所有第1类的需求，并增加对LOCK方法的支持。除了LOCK方法之外，第
2类遵从还要求支持Timeout和Lock-Token首部以及和
这两个XML元素。在DAV首部中的值2表明第2类遵从。
在上面的例子中，DAV首部表明这两类遵从都满足。
445
• Public首部列出了这个特定的服务器支持的全部方法。
• Allow首部通常包括Public首部所列方法的一个子集。它只列出了对这个特定