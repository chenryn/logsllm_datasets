### MKCOL方法

MKCOL方法允许客户端在服务器上指定的URL处创建集合。乍一看，似乎仅仅为了创建集合而定义一个新方法有些多余，使用PUT或POST方法进行一些调整似乎是更合适的替代方案。然而，WebDAV协议的设计者考虑了这些替代方案后，最终还是选择了定义一个新的方法。以下是选择定义MKCOL方法的一些原因：

- 为了使用PUT或POST来创建集合，客户端需要随请求发送额外的“语义黏胶”。虽然这是可行的，但定义这种特殊的东西通常既乏味又容易出错。
- 大多数访问控制机制都是基于方法类型的——只有少数能在库中创建和删除资源。如果给其他方法过多的功能，这些访问控制机制就无法正常工作。

#### 示例请求
```
MKCOL /publishing HTTP/1.1
Host: minstar
Content-Length: 0
Connection: Keep-Alive
```

#### 示例响应
```
HTTP/1.1 201 Created
Server: Microsoft-IIS/5.0
Date: Fri, 10 May 2002 23:20:36 GMT
Location: http://minstar/publishing/
Content-Length: 0
```

#### 异常情况
- 如果集合已经存在（例如发出`MKCOL /colA`请求而`colA`已存在），请求会失败，状态码为405 Method Not Allowed。
- 如果没有写权限，MKCOL请求会返回403 Forbidden状态码。
- 如果发出`MKCOL /colA/colB`这样的请求而`colA`不存在，请求会失败，状态码为409 Conflict。

### DELETE方法

DELETE方法用于删除文件或集合。WebDAV扩展了它的语义以覆盖集合。如果要删除一个目录，需要提供Depth首部。如果没有指定Depth首部，默认值为无穷大，即该目录中的所有文件和子目录都会被删除。响应中还包含Content-Location首部，其值是刚被删除的集合。

#### 示例请求
```
DELETE /publishing HTTP/1.0
Host: minstar
```

#### 示例响应
```
HTTP/1.1 200 OK
Server: Microsoft-IIS/5.0
Date: Tue, 14 May 2002 16:41:44 GMT
Content-Location: http://minstar/publishing/
Content-Type: text/xml
Content-Length: 0
```

#### 异常情况
- 如果集合中的某个文件被其他人锁定而无法删除，集合自身也无法删除，服务器会返回207 Multi-Status状态码。
- 请求示例：
  ```
  DELETE /publishing HTTP/1.0
  Host: minstar
  ```
- 响应示例：
  ```
  HTTP/1.1 207 Multi-Status
  Server: Microsoft-IIS/5.0
  Content-Location: http://minstar/publishing/
  ...
  <D:href>http://minstar/index3/ch-publish.fm</D:href>
  <D:status>HTTP/1.1 423 Locked</D:status>
  ```

### COPY与MOVE方法

COPY和MOVE方法将请求URL作为源，HTTP的Destination首部的内容作为目标。MOVE方法在COPY方法之外还要做一些工作：它把源URL复制到目的地，检查新创建的URI的完整性，再把源删除。

#### 示例请求
```
{COPY,MOVE} /publishing HTTP/1.1
Destination: http://minstar/pub-new
Depth: infinity
Overwrite: T
Host: minstar
```

#### 示例响应
```
HTTP/1.1 201 Created
Server: Microsoft-IIS/5.0
Date: Wed, 15 May 2002 18:29:53 GMT
Location: http://minstar.inktomi.com/pub-new/
Content-Type: text/xml
Content-Length: 0
```

#### Depth首部的影响
- 如果没有Depth首部，默认值为无穷大（即默认会把源目录的整个结构进行复制或移动）。
- 如果Depth设置为0，方法只作用于资源本身。
- 对于MOVE方法，Depth首部的值只允许为无穷大。

#### Overwrite首部的效果
- Overwrite首部的值可以是T或F。
- 如果设置为T且目标已存在，则在COPY或MOVE之前对目标资源执行Depth值为无穷大的DELETE操作。
- 如果Overwrite标志设置为F且目标资源存在，则操作会失败。

#### 对属性的COPY/MOVE
- 当复制集合或元素时，默认会复制其所有属性。
- 可以通过XML主体来指定必须成功复制哪些属性。

#### 被锁定的资源与COPY/MOVE
- 如果资源目前正被锁定，COPY和MOVE都禁止把锁移动或复制到目标上。
- 如果要在一个自己有锁的现存集合中创建目标，所复制或移动的资源会被加到那个锁中。

### 增强的HTTP/1.1方法

WebDAV修改了HTTP中的DELETE、PUT以及OPTIONS方法的语义。GET和HEAD方法的语义保持不变。POST方法的操作总是由特定的服务器实现来定义，而WebDAV没有对其进行任何修改。

#### PUT方法
- WebDAV修改了PUT方法以支持锁定。
- 示例请求：
  ```
  PUT /ch-publish.fm HTTP/1.1
  Accept: */*
  If:()
  User-Agent: DAV Client (C)
  Host: minstar.inktomi.com
  Connection: Keep-Alive
  Cache-Control: no-cache
  Content-Length: 1155
  ```

#### OPTIONS方法
- 客户端可以用OPTIONS方法验证WebDAV的能力。
- 示例请求：
  ```
  OPTIONS /ch-publish.fm HTTP/1.1
  Accept: */*
  Host: minstar.inktomi.com
  ```
- 示例响应：
  ```
  HTTP/1.1 200 OK
  Server: Microsoft-IIS/5.0
  MS-Author-Via: DAV
  DASL: 
  DAV: 1, 2
  Public: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH
  Allow: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, COPY, MOVE, PROPFIND, PROPPATCH, SEARCH, LOCK, UNLOCK
  ```

#### 首部说明
- **DAV** 首部携带了DAV遵从级别的信息：
  - 第1类遵从：要求服务器遵从RFC2518每节中的所有MUST需求。
  - 第2类遵从：满足所有第1类的需求，并增加对LOCK方法的支持。
- **Public** 首部列出了这个特定的服务器支持的全部方法。
- **Allow** 首部通常包括Public首部所列方法的一个子集，只列出对这个特定资源可用的方法。