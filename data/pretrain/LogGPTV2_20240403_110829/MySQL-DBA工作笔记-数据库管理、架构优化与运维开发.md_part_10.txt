## Page 60
38丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
2.2
量级有了明显的变化。
1G 的慢日志，按照并发来看，这个值是很高的。所以在基本稳定了性能之后，慢日志的
里面的 flush logs 的方式。通过触发这个参数就可以释放已有的句柄了。
select user,host from mysql.user;
showglobal status;
show variables like "%xx%';
show status;
show processlist;
show columns from columns_priv like *%ab%";
show create user'xxx'@'xxx'
show grants for'xxx'@'xxx'
show engine innodb status\G
select userO);
show create table xxx;
show tables from test;
show tables;
show create database test;
show databases;
select database;
show engines;
MySQL相关的数据字典主要在以下几个数据库里面：
对于慢日志的分析也是重中之重，如果在极高的压力下，差不多1~2分钟就会产生
后续需要改进的就是对审计日志的管理，目前做压力测试其实是可以关闭这一类审计的。
Query OK, 0 rows affected (10.04 sec)
>set global audit_
在使用中有以下的一些命令/语句可以参考，
（4）sys（在5.7开始出现）
(3） mysql 
(2） performance_schema
（1） information_schema
通过几轮问题分析和排查，日志类的问题总算得到了基本解决。
玩转 MySQL 数据字典
命令/语句
_log_flush=on;
表2-2
查看存储过程列表
查看用户列表信息
查看 mysql全局状态
查看含有 xx字样的参数
查看mysql 状态
查看 mysql线程列表
查看含有 ab 字样的字段
查看用户的属性信息
查看用户的权限信息
查看 InnoDB 存储引擎的状态信息
查看当前用户
查看表 xxx的建表语句
查看数据库 test下的表
查看当前数据库下的表
查看数据库test的建库语句
查看数据库列表
查看当前数据库
查看存储引擎
如表2-2所示。
功能
---
## Page 61
所示)。
过程和触发器。这些信息可以通过 sys下的视图 schema_object_overview 来查看（如图 2-9
习的。
但是根据我的认知，在Oracle中也是这么走过来的。
实时性能数据抓取、自动性能分析和诊断、自动优化任务等，当然这些只是我的猜想，
schema，没准以后还会出更丰富的功能，类似Oracle 中免费的 statspack、闭源的 AWR、
运行原理和问题的分析会大有帮助，当然这个地方只能点到为止。
的功能提炼都做可以出来了。
的方式，把一些优化和诊断信息通过视图的方式汇总起来，更加直观。
和现在 sys 库很有相似之处，感兴趣的可以自行搜索查看。
有很多非常不错的工具和产品推出。myawr 算是其中的一个，现在看来当初的设计方式
觉离 AWR 这样的工具推出也不远了。
像了，不是里面的内容像，而是很多设计的方式越来越相似。所以按照这种方式，我感
来，让很多MySQL DBA不大适应，而我看到这个 sys 库的时候，第一感觉是越发和Oracle
数以及视图来帮助我们快速地了解系统的元数据信息，当然自MySQL5.7.7版本推出以
schema 来开启/关闭，说实话，使用起来还是有些难度的。
数据字典，一些基础元数据可以通过SQL 查询得到。
2.2.1
如果能好好掌握这些视图的内涵，可以随时查看表的关联关系，对于理解 MySQL 的
对于实时全面的抓取性能信息，MySQL 依旧还在不断进步的路上。因为开源，所以
MySQL 5.7版本提供了 sys Schema，这个新特性包含了一系列的存储过程、自定义函
MySQL 5.5版本提供了 performance_schema 性能引擎，可以通过参数 performance_
sys 下的对象分布其实信息量很大，除了我们关心的视图和表以外，还有函数、存储
对于 sys Schema 的学习，我是基于 5.7.13-6 这个版本，是用Oracle 的眼光来学
sys Schema 的有些功能在早期版本可能无从查起，或者很难查询，现在因为新版本
MySQL 的数据字典经历了几个阶段的演进，MySQL4.1版本提供了information_schema
（2）化繁为简，sys下的对象分布情况
原本需要结合 information_schema，performance_schema 查询的方式，现在有了视图
对于sysSchema，我觉得对DBA来说，有几个地方值得借鉴。
（1） sys Schema 的借鉴意义
MySQL 巡检模块：Sys Schema 的设计
第2章理解MySQL体系结构|39
---
## Page 62
40丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
个，其中x$开头的对象有 48个，简单换算一下，里面的表/视图有 53个。
dba_hist_wr_control 来得到，如图 2-11 所示。
的是这个表里设置了几个触发器，对这个表的 DML 操作都会触发里面的数据级联变化。
show tables 显示出来的除了这个表，其他的都是视图（如图 2-10 所示)。
这个表有什么特别之处呢？
如果你观察仔细，其实会发现里面的 table 只有一个，那就是 sys_config，使用命令
然后我们继续查看，还是使用 show tables 来看，会看到整个 sys 下的表/视图有 101
可以看到里面是一个基础参数的设置，比如一些范围、基数的设置；而且值得一提
（3）sys下唯一的表
6rows in set (0.00 sec)
>select* from sys_config;
statement_truncate_len
diagnostics.inclu
diagnostics.allow_is_tables
variable
6rows in set (0.10 sec)
db|object_type|count
sys|PROCEDURE
sys|FUNCTION
sys|TRIGGER
sys | INDEX (BTREE) |
sys |BASE TABLE
sys|VIEW
3645037571+0000001:00:00.0+0000800:00:00.0DEFAULT
DBID
Select *from dba_hist_wr_control
SNAP_INTERVAL
value|set_time
100|
21
64|2016-11-0911:21:12|NULL|
|OFF
26
二
1
|OFF|2016-11-0911:21:12|NULL
|65535|2016-11-0911:21:12|NULL
图2-11
图2-10
2016-11-0911:21:12|NULL
图2-9
RETENTION
NULL
|2016-11-0911:21:12|NULL
set_by|
TOPNSQL
---
## Page 63
它的实现，存在着下图2-14 所示的依赖关系。
picosecond（皮秒，万亿分之一秒），而在普通视图中，就会格式化为秒。
经过格式化的，比如下面的两个视图对比，图2-12是普通视图。
思，只是这些信息 MySQL 都毫无保留的开放出来了。按照官方的说法，xS的信息是没有
开头的，比如 vSsession，它的基表是x$开头的“内存表”，在 MySQL sys 中也是类似的意
information_schema 下的数据字典。而另外一类数据字典是动态性能视图，Oracle 是以 v$
tab$这种的表，数据是存放在系统表空间 system 下的，这些信息在 MySQL 中有些类似于
Oracle 中，数据字典分为两种类型，一类是数据字典表，像 dba_tables 这样的，基表都是
我们抽取一个视图来看，就 sesson 吧，输出和 show processist 命令如出一辙，我们来看看
（5）sys 下的 session 视图
可以看到数据类型也有一些差别。如果是时间字段，在 x$视图中可能精度是
x$的视图的定义如下图 2-13 所示。
xS的视图是什么意思，通过Oracle 的角度来看，就很容易理解，意思是相通的。在
（4）x$的视图
Logging to fl /home/mysql/query.log'
#mysql-euse sys;descx\Swaits_global_by_latencyg
max_latency
avg_latency
total
Field
#mysql-e"use sys;desc waits_global_by_latency\g"
max_latency
avg_latencyItext
s
Field
1 bigint(20) unsigned | NO1
Type
|varchar(128)
IType
1 bigint(20) unsigned |I NO
/varchar(128)
Null|Key|Default|Extra
图2-13
图2-12
YESI
N丨丨ON
NULL
INULL
INULL
NULL
INULL
INULL
NULL
INULL
第2章理解MySQL 体系结构|41
---
## Page 64
42丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
查性能问题大有益。
所以在专用服务器模式下，就可以通过进程找到会话，或者通过会话找到进程，对于排
程)，所以会有独立的 vSsession 和v$process 两个视图，两者通过内存地址的方式映射，
等待模型在 Oracle 中有一种流行的诊断方法论 OWI，也就是Oracle Wait Interface。
·IO：这个是 I/O层的统计，比如视图 io_global_by_file_by_bytes；
·InnoDB：这个是 InnoDB 层面的，比如 innodb_buffer_stats_by_schema;
·user_summary：这个是用户层级的，比如里面的视图user_summary_by_file_io;
sys 下的视图分了哪些层面呢。我简单来总结一下，大体分为以下几个层面：
（6）sys下的数据字典分类
而在Oracle中，因为主要是多进程多线程的实现方式（Windows平台是单进程多线
wait：关于等待的，这个还是处于起步阶段，等待模型有待完善，目前只有基于
statement：关于语句级别的，比如 statements_with_errors_or_warnings；
?
io/file，lock/table 和 io/table 这三个方面，提升空间还很大，如下图 2-15 所示。
session：关于会话级别的，这个视图少一些，只有 session 和 session_ssl_status 两个;
schema:
memory:
：关于 schema 级别的统计信息，比如 schema_table_lock_waits；
关于内存的使用情况，比如视图 memory_by_host_by_current_bytes;
>select *from wait_classes_global_by_avg_latencyg
wait/io/table
wait/io/file
event_class|total
sys.processlist
依赖
session
1222864025.66m
13205602.645
|total_latency|min_latency|avg_latency|max_latency|
performance_schema
SS
图2-15
图2-14
|114.23ns566.77ns|3.92s
xSmemory_by_thread_by_current_bytes
2.00Us
events_statements_current
session_connect_attrs
events_stages_current
events_stages_current'
events_waits_current
---
## Page 65
有的时候还会查看 show engine innodb status 来得到一些佐证信息。
InnoDB 视图。
Oracle里面的 statspack，AWR 非常相似。
1100 多个。随着等待事件的逐步完善，也能够反映出对于问题的诊断粒度越来越细化。
中有 220多个等待事件，9i中有400多个等待事件，10g 中有 800多个等待事件，11g有
同版本中也有着很显著的变化。
最初Oracle 7.0版本中有104个等待事件，8.0版本中有140多个等待事件，Oracle 8i
·查看innodb_locks，如图2-16所示。
这个时候如果没有 sys,我们需要查看 information_schema.innodb_locks 和 innodb_trx，
里面 InnoDB，schema 和 statement 这三部分是格外需要关注的，我们先说一下
面对这些情况，该怎么处理，是否要杀掉会话，可能会有些模棱两可。
·查看 innodb_trx，如图 2-17所示。
会话 2：update test set id=102;
会话 1: start transaction; update test set id=100;
我们做个小测试来说明一下。我们开启两个会话。
比如 InnoDB 部分的视图 innodb_lock_waits。
当然 sys 的使用其实还是比较灵活的，在5.6 及以上版本都可以，是完全独立的。和
（7） sys 下的 InnoDB 视图
OWI的信息会让调优变得更理性，更符合应用的场景。关于等待事件，Oracle 的不
rowsi set(0.00 sec)
lockm
lock_id:961671:356:3:2
lock data:0x0000011D9EB
ock
ockrec:2
lock
lock id:961672:356:3:2
jindex:GEN_CLUST_INDEX
X:GEN_CLUSTINDEX
0x00000011D9EB
RECORD
图2-16
row
row
第2章理解MySQL体系结构|43
---
## Page 66
44|MySQL DBA工作笔记：数据库管理、架构优化与运维开发
供好了，如图2-18所示。
行信息，就是告诉你产生了阻塞，现在可以使用 kill 的方式终止会话，kill语句都给你提
我们来看看使用 innodb_lock_waits 的结果。这个过程语句都给你提供好了，只有1
#
rx_
adap
inset(0.01sec)
vait_age
wait_sta
ables
trx_id:961671
ocked
eight:3
DC
ified:1
tate:
id:961671
ge:00:01:38
ecks:
READ
NULL
cked:2
GEN
NULL
2016-12-2622:28:24
NULL
KILL1149233
COMMITTED
16-12-26
图2-18
LQUERY1149233
图
row
2-17
:25:52
---
## Page 67
table_scans，查询结果如下图 2-21；如果数据量本身很大，这个结果就会被放大，值得关注。
schema_unused_indexes 的结果如下图 2-20 所示。