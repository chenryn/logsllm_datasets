            // 自定义ClassLoader重新加载Test，方便调用增强后的test方法
            TestClassLoader testClassLoader = new TestClassLoader();
            Class aClass = testClassLoader.findClass("com.r17a.demo.asm.Test");
            Object test = aClass.newInstance();
            Method method = aClass.getMethod("test");
            method.invoke(test);
        }
        public static byte[] getClassBuffer() throws IOException{
            // 读取class
            ClassReader classReader = new ClassReader("com/r17a/demo/asm/Test");
            // classWriter提供一个编写器
            ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS);
            // 调用自定义的ClassVisitor定义事件，即增强字节码
            ClassVisitor classVisitor = new TestClassVisitor(classWriter);
            // 通知触发事件
            classReader.accept(classVisitor,ClassReader.SKIP_DEBUG);
            // 获取字节码的byte数组
            byte[] bytes = classWriter.toByteArray();
            FileOutputStream fileOutputStream = new FileOutputStream(new File("/Users/R17a/网安/代码审计/JAVA代码审计/项目/tmp/tmp111/src/main/java/com/r17a/demo/asm/Test.class"));
            fileOutputStream.write(bytes);
            fileOutputStream.close();
            return bytes;
        }
        static class TestClassLoader extends ClassLoader{
            @Override
            protected Class findClass(String name) throws ClassNotFoundException {
                if (name.endsWith("com.r17a.demo.asm.Test")){
                    try {
                        // 重定义Test为增强后的类
                        byte[] bytes = getClassBuffer();
                        return defineClass(name,bytes,0,bytes.length);
                    }catch (IOException e){
                        return super.findClass(name);
                    }
                }
                return super.findClass(name);
            }
        }
    }
执行AsmTest后的结果：
#### AdviceAdapter
AdviceAdapter是MethodVisitor的子类，onMethodEnter、onMethodExit是在AdviceAdapter中定义的两个接口，分别在方法开始和方法结束时修改代码，onMethodEnter和onMethodExit的本质还是调用visitCode或者visitInsn方法来实现的。
    protected void onMethodEnter() {}
    protected void onMethodExit(int opcode) {}
我们尝试将上面的例子做修改，通过AdviceAdapter在方法开始和结束增加代码逻辑，最终运行效果一样。
    public class TestClassVisitorByAdviceAdapter extends ClassVisitor implements Opcodes {
        public TestClassVisitorByAdviceAdapter(ClassVisitor cv) {
            super(Opcodes.ASM5, cv);
        }
        @Override
        public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
            super.visit(version, access, name, signature, superName, interfaces);
        }
        @Override
        public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
            MethodVisitor mv = cv.visitMethod(access, name, desc, signature, exceptions);
            // 当方法名为test时候进行修改
            if (name.equals("test")) {
                mv = new TestMethodVisitor(Opcodes.ASM5, mv, access, name, desc);
            }
            return mv;
        }
        class TestMethodVisitor extends AdviceAdapter {
            protected TestMethodVisitor(int api, MethodVisitor mv, int access, String name, String desc) {
                super(api, mv, access, name, desc);
            }
            @Override
            protected void onMethodEnter() {
                super.onMethodEnter();
                mv.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
                // 将字符串常量加载到栈
                mv.visitLdcInsn("here enhanced: enter");
                // 调用println:  public void println(String x)
                mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
            }
            @Override
            protected void onMethodExit(int opcode) {
                super.onMethodExit(opcode);
                mv.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
                mv.visitLdcInsn("here enhanced: leave");
                mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
            }
        }
    }
## 0x03 IAST demo
### 确定IAST思路
我们在完成一个被动插桩式IAST时，必须考虑的肯定有以下部分：
  1. hook方法：在source、sink、propagator等添加方法，用于埋点和监控，
  2. agent和插桩：premain或者agentmain方式加载agent，实现ClassFileTransformer，用ASM添加埋点逻辑
  3. context全局共享：记录调用图等信息
### 确定污点传播及修改代码
在阅读了sky师傅的[浅谈被动式IAST产品与技术实现-代码实现Demo篇](https://www.03sec.com/Ideas/qian-tan-bei-dong-shiiast-chan-pin-yu-ji-shu-shi-x-1.html#morphing)，对其代码进行了稍微的改动，用一个JDBC SQL注入和log4j2
jndi注入漏洞示例进行理解，修改后的代码
#### SQL注入
首先确定污点分析的source、sink、propagator，source和sink很好确认，很明显就是source可以是客户端传递参数的入口`Request.getParameter()`，sink是SQL执行的地方即`Statement.executeQuery()`，但是这里需要注意，实际执行SQL查询的是`StatementImpl.executeQuery()`,`Statement.executeQuery()`是一个接口，所以sink是`StatementImpl.executeQuery()`，那么中间传播propagator可能是一些String的相关操作，SQL注入最常见的是做拼接，Java的string直接`+`最终还是使用`StringBuilder.append（）`，那么我们尝试将`StringBuilder.append（）`作为propagator。
    String id = request.getParameter("id");
    ...
    Statement statement = connection.createStatement();
    String sql = "select * from user where id=" + value;
    ResultSet resultSet = statement.executeQuery(sql);
这一步我们确定了：
  1. source：`Request.getParameter()`
  2. sink：`StatementImpl.executeQuery()`
  3. propagator：`StringBuilder.append（）`
那么我们可以对
`Request.getParameter()`添加了代码逻辑，所以我们不需要再进行添加。先对sink进行添加在`cn.org.javaweb.iast.visitor.handler.SinkClassVisitorHandler`的ClassVisitorHandler方法中，添加判断条件`className.equals("com.mysql.cj.jdbc.StatementImpl")&&name.equals("executeQuery")`，意味着对`com.mysql.cj.jdbc.StatementImpl.executeQuery()`进行埋点：
    public MethodVisitor ClassVisitorHandler(MethodVisitor mv, final String className, int access,
                                                 final String name, final String desc, String signature, String[] exceptions) {
            if (("start".equals(name) && METHOD_DESC.equals(desc))||(className.equals("com.mysql.cj.jdbc.StatementImpl")&&name.equals("executeQuery"))) {
                ...
同理在`cn.org.javaweb.iast.visitor.handler.PropagatorClassVisitorHandler`给`StringBuilder.append()`埋点
    public MethodVisitor ClassVisitorHandler(MethodVisitor mv, final String className, int access, final String name, final String desc, String signature, String[] exceptions) {
      if ((name.contains("decode") && METHOD_DESC.equals(desc)) || CLASS_NAME.equals(className) || (className.equals("java.lang.StringBuilder") && name.equals("append")&&desc.equals("(Ljava/lang/String;)Ljava/lang/StringBuilder;"))){
运行后的结果如下：
#### Log4j2
那么log4j2漏洞我们以同样的思路进行修改，关于漏洞细节可以阅读之前的文章[log4j2
漏洞分析与思考](https://r17a-17.github.io/2021/12/21/log4j2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E6%80%9D%E8%80%83/)。首先确认污点传播：
  1. Source：`Request.getParameter()`
  2. Sink：可以考虑lookup方法，即`javax.naming.InitialContext.lookup()`
  3. Propagator：传播过程一般是string的操作，为了防备，这里不额外做埋点了。
修改代码不再赘述，运行结果如下：
### 问题记录
1、tomcat加载agent遇到NoClassDefFoundError问题：
遇到这个问题找了好久的解决方法，最后发现跟类加载的双亲委派机制有关。
先来回顾下类生命周期：加载、链接（验证、准备、解析）、初始化、使用、卸载，其中类的加载采用的双亲委派模型。JVM
启动默认使用如下三种类型类装入器：BootstrapClassLoader启动类加载器、ExtensionClassLoader扩展类加载器和SystemClassLoader系统类加载器，具体每个类加载器加载的类库可以看下图。
我们知道双亲委派模型如下：
  1. 本加载器需要加载类时，检查该类是否被加载，未被加载先交由父加载器加载类
  2. 当父加载器不能加载时，再交给其父加载器
  3. 如果所有的父类加载器都不能加载，则由本加载器进行加载，但是本加载器也不能加载时就会出现ClassNotFoundError。
如下图，通常我们的Javaagent会被SystemClassLoader加载，tomcat有自定义的加载器。当我们的agent用到了web应用中的某个类com.r17a.xxx时，com.r17a.xxx本在tomcat自定义的加载器中加载，但是javaagent用到了该类尝试在SystemClassLoader中加载，相当于父加载器直接加载本来是由子加载器才能加载的类，就会出现ClassNotFoundError。所以我们要解决该问题有两种方法，一是让SystemClassLoader能够加载到我们需要用到的类，二是将agent中涉及到的类分离由tomcat自定义加载器中加载不被SystemClassLoader加载。本实验是通过`-Xbootclasspath:/.../agent.jar`解决的。
2、添加埋点逻辑的时候注意是不是接口，接口不能增强，比如`java.sql.Statement.executeQuery()`本身是一个接口，不能添加代码，所以对`com.mysql.cj.jdbc.StatementImpl.executeQuery()`即子类进行hook，算是一个小注意点。
3、遍历list的时候无意间添加了元素，但又没有报错
问题：遍历callChain时候，明明有sink元素却一直不打印，一到`StringBuilder.append()`就不打印之后的call信息了。
问题定位：
通过一步一步调试发现，在HTTP.leaveHttp方法中，打印信息时调用了`Arrays.asList(item.getArgumentArray())`，这个方法最终会调用`StringBuilder.append()`，已知我们在append中添加了代码逻辑及`Propagator.enterPropagator()`和`Propagator.leavePropagator()`，在这两个方法中会将调用方法添加到CallChain，CallChain本身就在`HTTP.leaveHttp()`中在进行遍历`RequestContext.getHttpReques；tContextThreadLocal().getCallChain().forEach`，这个问题相当于在遍历list的时候给该list添加元素，一般采用迭代器来解决。
解决方法：
我这里是直接避免再次添加无用的`StringBuilder.append()`的callChain，根据条件直接在`HttpRequestContext.addCallChain()x中`不再添加则可解决：
    public void addCallChain(CallChain callChain) {
            // 遍历之前的元素，如果有元素是enterPropagator或者leavePropagator，并且是append方法，就不添加append元素
            // 这样可以解决遍历时候还添加元素从而导致出错
            for (CallChain item: this.callChain) {
                if (item.getChainType().equals("enterPropagator") && item.getJavaMethodName().equals("append") && callChain.getJavaMethodName().equals("append"))
                    return;
                if (item.getChainType().equals("leavePropagator") && item.getJavaMethodName().equals("append") && callChain.getJavaMethodName().equals("append"))
                    return;
            }
            this.callChain.add(callChain);
        }
## 0x04 参考链接
《深入理解JVM字节码》  