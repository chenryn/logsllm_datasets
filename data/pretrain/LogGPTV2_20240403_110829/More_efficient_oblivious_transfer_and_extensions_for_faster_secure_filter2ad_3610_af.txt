the improvement for OTs has a negligible eﬀect on the total runtime. To fur-
ther improve the runtime of large circuits, a faster engine for circuit garbling,
e.g., [6], could be combined with our improved OT implementation. For the
GMW framework [56], the total runtime is dominated by the time for perform-
ing OT extension, which we reduce by factor 2.
Acknowledgements We thank David Evans and the anonymous reviewers of ACM
CCS for their helpful comments on our paper. The ﬁrst two authors were funded
by the European Research Council under the European Union’s Seventh Frame-
work Programme (FP/2007-2013) / ERC Grant Agreement n. 239868. The third
and fourth author were supported by the German Federal Ministry of Educa-
tion and Research (BMBF) within EC SPRIDE and by the Hessian LOEWE
excellence initiative within CASED.
References
1. G. Asharov, Y. Lindell, T. Schneider, and M. Zohner. More eﬃcient oblivious
transfer and extensions for faster secure computation. In Computer and Commu-
nications Security (CCS’13). ACM, 2013. To appear.
2. M. Barni, T. Bianchi, D. Catalano, M. Di Raimondo, R. Donida Labati, P. Failla,
D. Fiore, R. Lazzeretti, V. Piuri, F. Scotti, and A. Piva. Privacy-preserving ﬁnger-
code authentication. In Multimedia and Security (MM&SEC’10), pages 231–240.
ACM, 2010.
3. D. Beaver. Eﬃcient multiparty protocols using circuit randomization. In Advances
in Cryptology – CRYPTO’91, volume 576 of LNCS, pages 420–432. Springer, 1991.
24
4. D. Beaver. Correlated pseudorandomness and the complexity of private computa-
tions. In Symposium on Theory of Computing (STOC’96), pages 479–488. ACM,
1996.
5. M. Bellare, S. Goldwasser, and D. Micciancio. “pseudo-random” number genera-
tion within cryptographic algorithms: The DDS case. In Advances in Cryptology
– CRYPTO’97, volume 1294 of LNCS, pages 277–291. Springer, 1997.
6. M. Bellare, V. Hoang, S. Keelveedhi, and P. Rogaway. Eﬃcient garbling from
a ﬁxed-key blockcipher. In Symposium on Security and Privacy, pages 478–492.
IEEE, 2013.
7. A. Ben-David, N. Nisan, and B. Pinkas. FairplayMP: a system for secure multi-
party computation. In Computer and Communications Security (CCS’08), pages
257–266. ACM, 2008.
8. J. Boyar and R. Peralta. The exact multiplicative complexity of the Hamming
weight function. Electronic Colloquium on Computational Complexity (ECCC’05),
(049), 2005.
9. R. Canetti. Security and composition of multiparty cryptographic protocols. J.
Cryptology, 13(1):143–202, 2000.
10. S. G. Choi, K.-W. Hwang, J. Katz, T. Malkin, and D. Rubenstein. Secure multi-
party computation of Boolean circuits with applications to privacy in on-line mar-
ketplaces. In Cryptographers’ Track at the RSA Conference (CT-RSA’12), volume
7178 of LNCS, pages 416–432. Springer, 2012.
11. E. De Cristofaro and G. Tsudik. Practical private set intersection protocols with
linear complexity. In Financial Cryptography and Data Security (FC’10), volume
6052 of LNCS, pages 143–159. Springer, 2010.
12. C. Dong, L. Chen, and Z. Wen. When private set intersection meets big data:
In Computer and Communications Security
An eﬃcient and scalable protocol.
(CCS’13). ACM, 2013. To appear.
13. Y. Ejgenberg, M. Farbstein, M. Levy, and Y. Lindell. SCAPI: The secure com-
IACR Cryptology ePrint Archive,
putation application programming interface.
2012:629, 2012.
14. J. O. Eklundh. A fast computer method for matrix transposing. IEEE Transactions
on Computers, C-21(7):801–803, 1972.
15. Z. Erkin, M. Franz, J. Guajardo, S. Katzenbeisser, I. Lagendijk, and T. Toft.
Privacy-preserving face recognition. In Privacy Enhancing Technologies Sympo-
sium (PETS’09), volume 5672 of LNCS, pages 235–253. Springer, 2009.
16. S. Even, O. Goldreich, and A. Lempel. A randomized protocol for signing contracts.
Communmunications of the ACM, 28(6):637–647, 1985.
17. K. Frikken, M. Atallah, and C. Zhang. Privacy-preserving credit checking.
In
Electronic Commerce (EC’05), pages 147–154. ACM, 2005.
18. O. Goldreich. Foundations of Cryptography, volume 2: Basic Applications. Cam-
bridge University Press, 2004.
19. O. Goldreich, S. Micali, and A. Wigderson. How to play any mental game or a
completeness theorem for protocols with honest majority. In Symposium on Theory
of Computing (STOC’87), pages 218–229. ACM, 1987.
20. S. D. Gordon, J. Katz, V. Kolesnikov, F. Krell, T. Malkin, M. Raykova, and
Y. Vahlis. Secure two-party computation in sublinear (amortized) time. In Com-
puter and Communications Security (CCS’12), pages 513–524. ACM, 2012.
21. D. Harnik, Y. Ishai, E. Kushilevitz, and J. B. Nielsen. OT-combiners via secure
computation. In Theory of Cryptography (TCC’08), volume 4948 of LNCS, pages
393–411. Springer, 2008.
25
22. J. H˚astad and A. Shamir. The cryptographic security of truncated linearly related
In Symposium on Theory of Computing (STOC’85), pages 356–362.
variables.
ACM, 1985.
23. W. Henecka, S. K¨ogl, A.-R. Sadeghi, T. Schneider, and I. Wehrenberg. TASTY:
Tool for Automating Secure Two-partY computations. In Computer and Commu-
nications Security (CCS’10), pages 451–462. ACM, 2010.
24. W. Henecka and T. Schneider. Faster secure two-party computation with less
In ACM Symposium on Information, Computer and Communications
memory.
Security (ASIACCS’13), pages 437–446. ACM, 2013.
25. A. Holzer, M. Franz, S. Katzenbeisser, and H. Veith. Secure two-party compu-
tations in ANSI C. In Computer and Communications Security (CCS’12), pages
772–783. ACM, 2012.
26. Y. Huang, P. Chapman, and D. Evans. Privacy-preserving applications on smart-
phones. In Hot topics in security (HotSec’11). USENIX, 2011.
27. Y. Huang, D. Evans, and J. Katz. Private set intersection: Are garbled circuits
better than custom protocols? In Network and Distributed Security Symposium
(NDSS’12). The Internet Society, 2012.
28. Y. Huang, D. Evans, J. Katz, and L. Malka. Faster secure two-party computation
using garbled circuits. In Security Symposium. USENIX, 2011.
29. Y. Huang, J. Katz, and D. Evans. Quid-pro-quo-tocols: Strengthening semi-honest
protocols with dual execution. In Symposium on Security and Privacy, pages 272–
284. IEEE, 2012.
30. Y. Huang, L. Malka, D. Evans, and J. Katz. Eﬃcient privacy-preserving biometric
identiﬁcation. In Network and Distributed Security Symposium (NDSS’11). The
Internet Society, 2011.
31. Intelligence Advanced Research Projects Activity (IARPA). Security and Privacy
Assurance Research (SPAR) Program, 2010.
32. Y. Ishai, J. Kilian, K. Nissim, and E. Petrank. Extending oblivious transfers
eﬃciently. In Advances in Cryptology – CRYPTO’03, volume 2729 of LNCS, pages
145–161. Springer, 2003.
33. A. Jarrous and B. Pinkas. Secure hamming distance based computation and its
applications. In Applied Cryptography and Network Security (ACNS’09), volume
5536 of LNCS, pages 107–124. Springer, 2009.
34. S. Jha, L. Kruger, and V. Shmatikov. Towards practical privacy for genomic
computation. In Symposium on Security and Privacy, pages 216–230. IEEE, 2008.
35. F. Kerschbaum. Automatically optimizing secure computation. In Computer and
Communications Security (CCS’11), pages 703–714. ACM, 2011.
36. V. Kolesnikov and R. Kumaresan. Improved OT extension for transferring short
secrets. In Advances in Cryptology – CRYPTO’13 (2), volume 8043 of LNCS, pages
54–70. Springer, 2013.
37. V. Kolesnikov, A.-R. Sadeghi, and T. Schneider. Improved garbled circuit building
blocks and applications to auctions and computing minima. In Cryptology And
Network Security (CANS’09), volume 5888 of LNCS, pages 1–20. Springer, 2009.
38. V. Kolesnikov and T. Schneider. Improved garbled circuit: Free XOR gates and ap-
plications. In International Colloquium on Automata, Languages and Programming
(ICALP’08), volume 5126 of LNCS, pages 486–498. Springer, 2008.
39. H. Krawczyk. Cryptographic extraction and key derivation: The HKDF scheme.
In Advances in Cryptology – CRYPTO’10, volume 6223 of LNCS, pages 631–648.
Springer, 2010.
40. B. Kreuter, A. Shelat, and C.-H. Shen. Billion-gate secure computation with ma-
licious adversaries. In Security Symposium. USENIX, 2012.
26
41. P. MacKenzie, A. Oprea, and M. K. Reiter. Automatic generation of two-party
computations. In Computer and Communications Security (CCS’03), pages 210–
219. ACM, 2003.
42. L. Malka. VMCrypt - modular software architecture for scalable secure computa-
tion. In Computer and Communications Security (CCS’11), pages 715–724. ACM,
2011.
43. D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay — a secure two-party
computation system. In Security Symposium, pages 287–302. USENIX, 2004.
44. A. Menezes, P. C. van Oorschot, and S. A. Vanstone. Handbook of Applied Cryp-
tography. CRC Press, 1996.
45. S. Nagaraja, P. Mittal, C.-Y. Hong, M. Caesar, and N. Borisov. Botgrep: Finding
P2P bots with structured graph analysis. In Security Symposium, pages 95–110.
USENIX, 2010.
46. M. Naor and B. Pinkas. Eﬃcient oblivious transfer protocols. In ACM-SIAM Sym-
posium On Discrete Algorithms, SODA ’01, pages 448–457. Society for Industrial
and Applied Mathematics, 2001.
47. A. Narayanan, N. Thiagarajan, M. Lakhani, M. Hamburg, and D. Boneh. Loca-
In Network and Distributed Security
tion privacy via private proximity testing.
Symposium (NDSS’11). The Internet Society, 2011.
48. J. B. Nielsen. Extending oblivious transfers eﬃciently - how to get robustness
almost for free. Cryptology ePrint Archive, Report 2007/215, 2007.
49. J. B. Nielsen, P. S. Nordholt, C. Orlandi, and S. S. Burra. A new approach
In Advances in Cryptology –
to practical active-secure two-party computation.
CRYPTO’12, volume 7417 of LNCS, pages 681–700. Springer, 2012.
50. V. Nikolaenko, U. Weinsberg, S. Ioannidis, M. Joye, D. Boneh, and N. Taft.
Privacy-preserving ridge regression on hundreds of millions of records. In Sym-
posium on Security and Privacy, pages 334–348. IEEE, 2013.
51. NIST. NIST Special Publication 800-57, Recommendation for Key Management
Part 1: General (Rev. 3). Technical report, 2012.
52. M. Osadchy, B. Pinkas, A. Jarrous, and B. Moskovich. SCiFI - a system for secure
face identiﬁcation. In Symposium on Security and Privacy, pages 239–254. IEEE,
2010.
53. B. Pinkas, T. Schneider, N. P. Smart, and S. C. Williams. Secure two-party com-
putation is practical. In Advances in Cryptology – ASIACRYPT’09, volume 5912
of LNCS, pages 250–267. Springer, 2009.
54. M. O. Rabin. How to exchange secrets with oblivious transfer, TR-81 edition, 1981.
Aiken Computation Lab, Harvard University.
55. A.-R. Sadeghi, T. Schneider, and I. Wehrenberg. Eﬃcient privacy-preserving face
recognition. In International Conference on Information Security and Cryptology
(ICISC’09), volume 5984 of LNCS, pages 229–244. Springer, 2009.
56. T. Schneider and M. Zohner. GMW vs. Yao? Eﬃcient secure two-party computa-
tion with low depth circuits. In Financial Cryptography and Data Security (FC’13),
LNCS. Springer, 2013.
57. A. Schr¨opfer and F. Kerschbaum. Demo: secure computation in JavaScript. In
Computer and Communications Security (CCS’11), pages 849–852. ACM, 2011.
58. A. C. Yao. How to generate and exchange secrets. In Foundations of Computer
Science (FOCS’86), pages 162–167. IEEE, 1986.
27
A Deﬁnitions
We let κ denote the security parameter. A function µ(·) is negligible if for every
positive polynomial p(·) and all suﬃciently large n it holds that µ(n) < 1/p(n). A
distribution ensemble X = {X(a, n)}a∈Dn,n∈N is an inﬁnite sequence of random
variables indexed by a ∈ Dn and n ∈ N. Two distribution ensembles X, Y
c≡ Y if for every non-uniform
are computationally indistinguishable, denoted X
polynomial time algorithm D there exists a negligible function µ(·) such that for
every n, and every a ∈ Dn:
|Pr [D(X(a, n), a, n) = 1] − Pr [D(Y (a, n), a, n]| ≤ µ(n).
Key Derivation Function. The following deﬁnition is an adaptation of the general
deﬁnition of [39] for the case of the DDH problem. Intuitively, the adversary
should not be able to distinguish between an output of the KDF function and
a uniform string. Let Gen(1κ) be a function that produces a group (G, q, g) for
which the DDH problem is believed to be hard. We deﬁne:
Deﬁnition A1 (Key-Derivation Function) A key derivation function KDF
with (cid:96)-bit output is said to be secure with respect to DDH if for any ppt attacker
A there exists a negligible function µ(·) such that:
|Pr [A(G, q, g, gr, h, KDF(hr)) = 1]
− Pr [A(G, q, g, gr, h, z) = 1]| ≤ µ(κ)
where (G, q, g) = Gen(1κ), r is distributed uniformly in Zq and z is distributed
uniformly in {0, 1}(cid:96).
Correlation Robust Function. We present a deﬁnition for correlation robust func-
tion. The deﬁnition is based on the deﬁnition in [32].
Deﬁnition A2 [Correlation Robustness] An eﬃciently computable function H :
{0, 1}κ → {0, 1}(cid:96) is said to be correlation robust if it holds that:
{t1, . . . , tm, H(t1 ⊕ s), . . . , H(tm ⊕ s)} c≡ {Um·κ+m·(cid:96)}
where t1, . . . , tm, s are chosen uniformly and independently at random from
{0, 1}κ, and Um·κ+m·(cid:96) is the uniform distribution over {0, 1}m·κ+m·(cid:96).
Secure Two-Party Computation. We give a formal deﬁnition for security of a
two party protocol in the presence of a semi-honest adversary. The deﬁnition is
the standard deﬁnition, see [9, 18].The view of the party P0 during an execution
of a protocol π on inputs (x, y), denoted viewπ
i (x, y), is deﬁned to be (x, r; m)
where x is P0’s private input, r its internal coin tosses, and m are the messages
it has received in the execution. The view of P1 is deﬁned analogously. Let
outputπ(x, y) denote the output pair of both parties in a real execution of the
protocol. We are now ready to security deﬁnition:
28
Deﬁnition A3 Let f : ({0, 1}∗)2 → ({0, 1}∗)2 be a (possible randomized) two–
party functionality, and let fi(x, y) denotes the ith element of f (x, y). Let π be
a protocol. We say that π privately–computes f if for every (x, y) ∈ ({0, 1}∗)2:
outputπ(x, y) = f (x, y) and there exists a pair of probabilistic polynomial-time
ppt algorithms S0,S1:
{S0(x, f0(x, y)), f (x, y)}z
{S1(y, f1(x, y)), f (x, y)}z
c≡ {viewΠ
c≡ {viewΠ
0 (x, y), outputπ(x, y)}z
1 (x, y), outputπ(x, y)}z
where z = (x, y) ∈ ({0, 1}∗)2.
In case the function f is deterministic (like in the OT functionality), there is
no need to consider the joint distribution of the outputs and the view, and it is
enough to show that the output of the simulator Si is indistinguishable from the
view of the party Pi.
B Multiplication Triple Protocol
In this section, we show that the protocol presented in §5.1 privately computes
the multiplication triple functionality.
First, we consider the f ab functionality. The protocol implements the function-
ality since any random (b, v), (a, u), for which ab = u ⊕ v, can be written as
(b, v) = (x0 ⊕ x1, x0) and (a, u) = (a, ab ⊕ v) = (a, xa), since it holds that:
ab ⊕ v = ab ⊕ x0 = a(x0 ⊕ x1) ⊕ x0 = xa. The inputs and outputs of each party
fully determine its view, and therefore simulators are trivial and just re–arrange
their inputs. Consistency of the generated view with the output of the parties
holds trivially.
We turn to the multiplication triple functionality. It is easy to verify that the
protocol implements the functionality. Regarding simulation, a simulator S0 is
given (a0, b0, c0), chooses random u0 and deﬁnes: v0 = c0 ⊕ a0b0 ⊕ u0. Since
u0, v0 are random and hidden from the distinguisher, the view is consistent with
(a1, b1, c1). A simulator for S1 works the same, and security holds from the same
reasoning (i.e., v1 = a0b1⊕u0 is random since u0 is hidden from the distinguisher,
and v1 is fully determined from c1, a1, b1, u1).
29