#### Description
Setting the train_size to 50 does not result in the correct size of the train
indices.
#### Steps/Code to Reproduce
Example:
    from sklearn.datasets import fetch_mldata
    from sklearn.cross_validation import StratifiedShuffleSplit
    def get_dataset():
        from sklearn.datasets import fetch_mldata
        mnist = fetch_mldata('MNIST original')
        # rescale the data, use the traditional train/test split
        X, y = mnist.data / 255., mnist.target
        test_size = 60000
        X_train, X_test = X[:test_size], X[60000:]
        y_train, y_test = y[:test_size], y[60000:]
        return (X_train, y_train, X_test, y_test)
    X_train, y_train, X_test, y_test = get_dataset()
    seed = 1337
    n_iter = 1
    train_size = 100
    sss = StratifiedShuffleSplit(y_train.reshape(-1), n_iter,
                                 train_size=train_size, random_state=seed)
    for train_indices, test_indices in sss:
        print "Train indices:", len(train_indices)
        print "Test indices:", len(test_indices)
        assert(train_size == len(train_indices))
#### Expected Results
    Train indices: 50
    Test indices: 6000
#### Actual Results
    Train indices: 54000
    Test indices: 6000
    Traceback (most recent call last):
      File "stratisfied_shuffle_split_bug.py", line 23, in 
        assert(50 == len(train_indices))
    AssertionError
#### Additional Information
`train_size = 50` seems to be a magic line. All other options I tested, like
`train_size = 25` and `train_size = 100` result in the expected output.
##### Setting `test_size` results in a 1 off error
Setting `test_size = 50` instead of the train_size results in:
    Train indices: 59949
    Test indices: 51
#### Versions
    >>> import platform; print(platform.platform())
    Darwin-15.6.0-x86_64-i386-64bit
    >>> import sys; print("Python", sys.version)
    ('Python', '2.7.12 (default, Jun 29 2016, 14:05:02) \n[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)]')
    >>> import numpy; print("NumPy", numpy.__version__)
    ('NumPy', '1.11.1')
    >>> import scipy; print("SciPy", scipy.__version__)
    ('SciPy', '0.18.0')
    >>> import sklearn; print("Scikit-Learn", sklearn.__version__)
    ('Scikit-Learn', '0.17.1')