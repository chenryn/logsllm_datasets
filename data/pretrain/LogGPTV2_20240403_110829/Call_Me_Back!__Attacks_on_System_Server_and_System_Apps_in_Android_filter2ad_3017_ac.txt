services on demand instead of loading all the related code
to address Challenge C1.
Like FlowDroid, the development of KMHunter is based
on Soot. Soot is in charge of the class loading in FlowDroid.
When an app is loaded by Soot, the classes of the target app
will be resolved explicitly and the classes of Android APIs
will be loaded as “phantom”. Therefore, the class loader only
needs to load the classes in the target app.
But when Soot is used to load the code of the SS, the
class loading will be time-consuming because there is no ob-
vious distinction between system service code and other Java
libraries. KMHunter addresses this challenge by setting u-
nimportant classes and methods as “phantom” to stop the
loading of further related code. The key point is determining
whether a method or a class is important.
One simpliﬁed example is shown in Figure 2(a). The call
graph is in the form of a tree structure. The nodes represent
methods and the edges represent method invocations. We
deﬁne the target system service interface as T(arget) and
other related methods as M. The strategy is to limit the
depth of the invocation path to N (which is 3 in this ex-
ample) starting from T. Hence, methods on the third level,
i.e., M111, M211 and M221, will be resolved as phantom and
their dependence will not be further loaded.
But in normal programs, the invocation relationship is an
invocation graph instead of an invocation tree. We add some
call edges in Figure 2(a) and get a call graph as shown in
Figure 2(b). We can observe that, starting from T, the depth
of method is not a constant value. For example, the depth
of M1 can be 1 on path T ! M1 or 3 on path T ! M2 !
M21 ! M1, and the depth of M22 can be [2; +1). Under
this situation, we deﬁne a function depthmin(M ) to calculate
the depth of the shortest invocation path of method M . And
if depthmin(M ) > N , M will be set as phantom.
For a non-phantom method, its related classes will also be
loaded as normal classes. The classes include the container
class of the method, the classes of parameters and local vari-
ables. For a phantom method, its related classes will also
be loaded as phantom.
3.2 Call Graph Generation
The SS is a multi-threaded process (C2). It also interacts
with other processes at runtime (C3). The CG&CFG Gen-
erator needs to address both challenges. The basic idea is
to transform these complex situations into a single-threaded
situation.
Multi-Threaded SS challenge. Commonly, a system
service will start an assistant thread by two means: the
Runnable mechanism in Java and the Handler mechanism
in Android.
FlowDroid provides some basic transformations for multi-
threaded situations. However, its implementation is too sim-
ple and incomplete to be used in real program analysis. We
have made some improvements to complete the implementa-
tion of FlowDroid. The major improvement is that we take
care of the Handler mechanism in a more subtle way. One
basic usage of the Handler mechanism is to invoke the Han-
dler.sendMessage(msg) API. When invoked, the Handler
mechanism will dispatch the message msg to corresponding
handling code according to the value of msg.what. The value
of msg.what can vary, but the implementation code of one
system service interface usually adopts only one concrete val-
ue of msg.what to invoke the API. If necessary, KMHunter
will extract the code fragments, which are directly related to
this concrete value, from the entire handling code for every
system service interface.
ICC/IPC challenge. KMHunter needs to address the
ICC/IPC challenge to analyze the taint propagation between
system services and system apps. Intent is commonly used
to perform ICC with app components. For instance, the SS
can start an activity component in the system app by call-
ing Context.startActivity(intent) API. The SS also can
bind on the service component in a system app and perfor-
m IPC though Binder mechanism. No matter whether the
communication is conducted by Intent or Binder, KMHunter
will replace the IPC/ICC statements with a newly created
statement. This new statement will directly invoke the cor-
responding handling methods in the target component. In
addition, the life-circle of an app component is also consid-
ered during the call graph generation.
3.3 Deﬁning the Taint Sources and Sinks
By neatly deﬁning the sources and sinks, we can address
the challenge of the dormant callback handle (C4).
During the taint propagation in the SS, we deﬁne the set of
tainted objects as TOS (Tainted Object Set). The tainted
state of the target system service can be divided into two
types: temporarily tainted and durably tainted.
The SS is temporarily tainted if every t 2 T OS is a
local variable. The tainted objects will be destroyed when
the handling of one service request ﬁnishes. Therefore, the
taint analysis just needs to consider the implementation code
of one system service interface. We deﬁne the source and
sink of the taint analysis as:
Interface AnalyzerClass LoaderLoadManagerCG&CFGGeneratorMulti-Thread ManagerTaint AnalyzerDynamic TesterTaint WrapperSourceSink ManagerIPC ManagerManualAuditVulnerability AlarmsVulnerability ReportsTM1M2M21M11M22M111M211M221(cid:104)(cid:104)(cid:104)TM1M2M21M11M22M111M211M221(cid:104)(cid:104)(cid:104)96Sourceinject =;
Sinkcrash =
In the deﬁnition of Sourceinject, i is the index of the IPC call
parameter p of the service interface SSI. And in the deﬁni-
tion of Sinkcrash, t means the tainted data which will be used
by the callback statement under the given condition.
The SS is durably tainted if there exists at least one
t 2 T OS that is a global variable. The tainted object can
stay dormant inside the SS context for a long period of time
before its invocation is triggered by other SS operations.
KMHunter has to consider the cooperative relation of ser-
vice interfaces and other trigger points such as registered
broadcast receivers. The strategy is to separate the taint
analysis into two steps. The deﬁnitions of source and sink
in the two steps are:
Step 1:
Sourceinject =;
Sinkglobal =
Step 2:
Sourceglobal =;
Sinkcrash =
In the deﬁnition of Sinkglobal in Step 1, a statement is re-
garded as a sink if a global value, namely SSO.x, is derived
from a tainted valuable t. In the deﬁnition of Sourceglobal
in Step 2, a global variable SSO.x is regarded as a source if
it is tainted in Step 1.
3.4 Human Intelligence
Currently, KMHunter still needs human intelligence to
manually craft the test cases. The taint analysis results do
not directly enable automated generation of dynamic test
cases. Another limitation is that our tool does not guaran-
tee completeness (i.e., identifying all the vulnerability condi-
tions). It ignores the code statements which do not operate
on the tainted data; however, these code statements could
relate to the vulnerability conditions, such as checking the
permissions of the client app.
4. VULNERABILITY DETECTING RESULT
4.1 Result Overview
We applied KMHunter on the code of Android 5.1.0. Ac-
cording to the Interface Analyzer component in KMHunter,
the SS contains 80 Java-based system services. These ser-
vices expose 1592 service interfaces. KMHunter has success-
fully analyzed 1591 of them (the only failure is because that
the class loading process failed). Vulnerability alarms sound-
ed for eleven service interfaces. After manual inspection, we
identiﬁed six vulnerabilities in nine service interfaces. The
vulnerabilities are listed in Table 1. All the identiﬁed vul-
nerabilities have been further tested on Android 2.3.7-6.0.12.
The test result indicates that the “call me back” vulnerabil-
ities exist widely.
There are two false positives. The ﬁrst false positive is
an interface which is provided by the window system ser-
vice.
It is protected by a permission which could not be
acquired by third-party apps. The other false positive is
2v2.3.7-v5.0.0 on Genymotion emulator, v5.1.0 on Nexus 6
and v6.0.1 on Nexus 6p.
Service
activity
location
package
usb
Table 1: Newly Discovered Vulnerabilities
Versions
4.2 - 6.0.1
4.2 - 6.0.1
(cid:3)
? - 5.1.0
2.3.7 - 5.1.0
4.1.1 - 6.0.1
Id
Vul#1
Vul#2
Vul#3 mount
Vul#4
Vul#5
Service Interface
startInstrumentation
requestLocationUpdates
registerListener
freeStorage
requestDevice-
(Accessory)Permission
send(Stored)Message,
downloadMessage
Vul#6
imms
5.0.0 - 6.0.1
*: Tests of mount service need real devices. Hence, it is only
tested on v5.1.0 and v6.0.1.
a service interface which is provided by the display system
service. This interface checks the validation of the received
callback handle. Only the instance of a speciﬁc system ser-
vice’s proxy class will be accepted. This system service is
media projection. There may be false negatives. But they
cannot be analyzed since there is no ground truth; we are
the ﬁrst to reveal the “call me back” vulnerabilities. False
negatives may exist because of our class loading strategy.
Some methods will not be loaded because their shortest in-
vocation paths are deeper than a threshold. Although the
analyzed call graph is not complete, our analysis managed to
cover most of them. For example, the analyzed call graph
of the setLastChosenActivity() interface in PMS contains
10,595 edges.
4.2 Vulnerability Details
4.2.1 Vulnerability in Activity Manager Service
AMS (Activity Manager Service) is in charge of interac-
tions with overall activities running in Android. The vul-
nerable service interface is startInstrumentation(). Apps
can call it to start an instrumentation component of a giv-
en app. This interface receives a callback handle, named
watcher, as an IPC call parameter.
If a failure situation
happens while starting target instrumentation, this callback
will be invoked to inform the client app. The class of watch-
er is android.app.IInstrumentationWatcher. It contain-
s two synchronous callback methods, named instrumenta-
tionStatus() and instrumentationFinished().
The vulnerable code is shown in Fragment 1 of Appendix
A. We can observe that the code statements of startIn-
strumentation() enter the synchronized(AMS.this) block.
In the synchronized block, if a failure situation (such as
wrong instrument info) occurs, the method named report-
StartInstrumentationFailure() will be called (line 16466).
This method receives the watcher object as an actual pa-
rameter. Code in this method invokes the callback method
watcher.instrumentationStatus() (line 16525). This is a
typical vulnerability in hazard situation A1.
This vulnerability exists in Android 4.2-6.0.1. The vul-
nerable service interface does not check any permission of
the client app. Hence, malicious apps can exploit this vul-
nerability without restrictions.
4.2.2 Vulnerability in Location Manager Service
LMS (Location Manager Service) manages location provider-
s and issues location updates and alerts. Apps can in-
voke a service interface of LMS named requestLocationUp-
dates() to register a callback for location updates. This in-
terface receives a parameter of android.app.PendingIntent
97class named intent. The intent object is not a callback
handle. But it carries a member variable named mTarget,
which is a callback handle. The class of mTarget is an-
droid.content.IIntentSender. In this class, only the call-
back method named send() is deﬁned as synchronous.
If
LMS invokes intent.send(), it is actually invoking the in-
tent.mTarget.send() method.
The vulnerable code is in Fragment 2 of Appendix A.
The callback is invoked (line 854) in a synchronized block
(line 1574). When this vulnerability is exploited, the system
would get into hazard situation A1.
This vulnerability exists in Android 4.2-6.0.1. The vulner-
able service interface requires the client app to hold the ac-
cess_coarse(fine)_location permissions. These permis-
sions are all acquirable for a malicious app.
4.2.3 Vulnerability in Mount Service
MS (Mount Service) is responsible for various storage me-
dia. It connects to vold to watch for and manage dynami-
cally added storage, such as SDcards and USB mass storage.
The service interface in MS, named registerListener(),
can be called to register a listener (i.e., callback) on the state
changes of storage or USB mass storage. The class of this lis-