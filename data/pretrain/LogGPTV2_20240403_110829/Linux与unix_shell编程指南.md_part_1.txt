# 第一部分：Shell

## 第1章：文件安全与权限

为了防止未经授权的用户访问你的文件，可以在文件和目录上设置权限。此外，还可以设定文件在创建时所具有的默认权限。这些只是整个系统安全问题的一部分。本章将介绍有关文件和目录的安全问题。

### 本章包含以下内容：
- 文件和目录的权限
- setuid
- chown 和 chgrp
- umask
- 符号链接

### 文件所有权与权限
创建文件的用户及其所属组拥有该文件。文件所有者可以决定谁具有读、写或执行该文件的权限。当然，根用户或系统管理员可以更改任何用户的设置。一个文件一旦创建，就具有三种基本访问方式：
1. **读**：显示文件内容。
2. **写**：编辑或删除文件。
3. **执行**：如果文件是shell脚本或程序，则可以运行它。

根据不同的用户类型，文件权限可分为三类：
1. **文件所有者**：创建文件的用户。
2. **同组用户**：属于同一用户组的其他用户。
3. **其他用户**：不属于上述两者的任何人。

### 1.1 文件信息
当你创建一个文件时，系统会保存关于该文件的所有信息，包括：
- 文件位置
- 文件类型
- 文件长度
- 拥有该文件的用户及可访问的用户
- i节点
- 文件修改时间
- 文件权限位

使用 `ls -l` 命令查看文件详情：

```
$ ls -l
total 4232
-rwxr-xr-x 1 root root 3578 Oct 14 04:44 dmesg
```

- `total 4232`：表示该目录下所有文件占用的空间总和。
- `-rwxr-xr-x`：这是文件的权限位。第一个字符表示文件类型（普通文件），接下来9个字符分为三组，分别对应文件所有者、同组用户和其他用户的读、写、执行权限。
- `1`：硬链接数。
- `root`：文件所有者。
- `root`：文件所有者所在的默认组。
- `3578`：文件大小（字节）。
- `Oct 14 04:44`：文件最后修改时间。
- `dmesg`：文件名。

### 1.2 文件类型
文件类型可以从 `ls -l` 命令输出的第一位字符看出，共有七种类型：
- `d`：目录。
- `l`：符号链接。
- `s`：套接字文件。
- `b`：块设备文件。
- `c`：字符设备文件。
- `p`：命名管道文件。
- `-`：普通文件。

### 1.3 权限
使用 `touch` 命令创建一个空文件并查看其权限：

```
$ touch myfile
$ ls -l
-rw-r--r-- 1 user group 0 Oct 14 04:44 myfile
```

文件权限解释：
- `-`：普通文件。
- `rw-`：文件所有者具有读写权限。
- `r--`：同组用户具有读权限。
- `r--`：其他用户具有读权限。

### 1.4 改变权限
你可以使用 `chmod` 命令改变文件权限。`chmod` 命令有两种模式：符号模式和绝对模式。

#### 1.4.1 符号模式
命令格式：
```
chmod [who] operator [permission] filename
```
- `who`：u（文件所有者）、g（同组用户）、o（其他用户）、a（所有用户）。
- `operator`：+（增加权限）、-（移除权限）、=（设置权限）。
- `permission`：r（读）、w（写）、x（执行）、s（setuid/setgid）、t（粘性位）。

#### 1.4.2 chmod 命令示例
假设 `myfile` 初始权限为 `rwxrwxrwx`：
- `chmod a-x myfile`：移除所有用户的执行权限。
- `chmod og-w myfile`：移除同组用户和其他用户的写权限。
- `chmod g+w myfile`：赋予同组用户写权限。
- `chmod u+x myfile`：赋予文件所有者执行权限。
- `chmod go+x myfile`：赋予同组用户和其他用户执行权限。

#### 1.4.3 绝对模式
命令格式：
```
chmod [mode] file
```
- `mode`：八进制数，每个数字代表一组权限（读、写、执行）。

权限对应的八进制数：
- `4`：读
- `2`：写
- `1`：执行

例如，`chmod 755 myfile` 表示文件所有者具有读、写、执行权限，同组用户和其他用户只有读和执行权限。

通过以上方法，你可以有效地管理和保护你的文件和目录。