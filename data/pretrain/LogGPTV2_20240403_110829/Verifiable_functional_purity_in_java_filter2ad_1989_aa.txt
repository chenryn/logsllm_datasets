title:Verifiable functional purity in java
author:Matthew Finifter and
Adrian Mettler and
Naveen Sastry and
David A. Wagner
Veriﬁable Functional Purity in Java
Matthew Finifter Adrian Mettler Naveen Sastry David Wagner
Department of Electrical Engineering and Computer Science
{ﬁnifter, amettler}@cs.berkeley.edu, PI:EMAIL, PI:EMAIL
University of California, Berkeley, USA
ABSTRACT
Proving that particular methods within a code base are functionally
pure—deterministic and side-effect free—would aid veriﬁcation of
security properties including function invertibility, reproducibility
of computation, and safety of untrusted code execution. Until now
it has not been possible to automatically prove a method is func-
tionally pure within a high-level imperative language in wide use,
such as Java. We discuss a technique to prove that methods are
functionally pure by writing programs in a subset of Java called
Joe-E; a static veriﬁer ensures that programs fall within the sub-
set. In Joe-E, pure methods can be trivially recognized from their
method signature. To demonstrate the practicality of our approach,
we refactor an AES library, an experimental voting machine im-
plementation, and an HTML parser to use our techniques. We
prove that their top-level methods are veriﬁably pure and show
how this provides high-level security guarantees about these rou-
tines. Our approach to veriﬁable purity is an attractive way to
permit functional-style reasoning about security properties while
leveraging the familiarity, convenience, and legacy code of imper-
ative languages.
Categories and Subject Descriptors
D.2.3 [Coding Tools and Techniques]; D.2.4 [Software/Program
Veriﬁcation]
General Terms
Security, Languages, Veriﬁcation
Keywords
Pure functions, determinism, static analysis, object-capabilities
1.
INTRODUCTION
Critical real-world programs often have high-level security and
privacy requirements expressed in terms of reproducibility, invert-
ibility, non-interference, or containment of untrusted code. We
would like to verify these properties given the programs’ source
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’08, October 27–31, 2008, Alexandria, Virginia, USA.
Copyright 2008 ACM 978-1-59593-810-7/08/10 ...$5.00.
code, but this task is difﬁcult in the languages commonly used
to write real-world programs. These imperative languages permit
side effects and data dependencies that are difﬁcult to reason about.
Purely functional languages, in which methods obey the semantics
of mathematical functions, make reasoning about effects and in-
formation ﬂow easier, but have not gained the popularity and code
base of more traditional imperative languages. We present a tech-
nique for implementing veriﬁably functionally pure methods in im-
perative languages. To be functionally pure, a method must satisfy
two critical properties1:
First, it must have no side effects. For a computational method
to be free of side effects, its execution must not have any visible
effect other than to generate a result. A method that modiﬁes its
arguments or global variables, or that causes an external effect like
writing to disk or printing to the console, is not side-effect free.
The second property is functional determinism: the method’s be-
havior must depend only on the arguments provided to the method.
The method must return the same answer every time it is invoked
on equivalent arguments, even across different executions of the
program. A simple example would be a method to upper-case a
string: every time it is given a string containing the word “foo”, it
will return a string containing “FOO”. Many methods do not satisfy
this criterion, including ones whose behavior depends on the time
of day, the amount of free memory, or whether a speciﬁc ﬂag was
present on the command line.
Electronic voting machines are one important application with
a number of security requirements amenable to enforcement using
functional purity. These machines are single-purpose computers
running custom software designed to allow the voter to select his
or her preferred candidates and to record the selections. Given the
importance of these machines to our democracy and concerns over
their trustworthiness, it would be useful if we could prove aspects
of their operation correct.
For example, we argue that voting machines should be designed
to ensure that each voter’s voting experience will be a determin-
istic function of the ballot deﬁnition and that voter’s actions. For
a particular set of voter actions, the system should always present
the same screens and record the same selections, independent of
previous voters’ interactions with the voting machine. Leaking any
information about previous sessions could violate earlier voters’
privacy and could create a conduit for a malicious voter to interfere
with subsequent voters. Also, voting sessions should have no side
effects; their only legitimate effect should be to return the voted
ballot. Functional purity can help verify these security properties.
As another example, voting machines must serialize and possibly
encrypt the voter’s selections when writing them to stable storage.
1More formal deﬁnitions of these two properties are provided in
Section 3.
This data will be read and tallied at a future date, likely on a dif-
ferent machine. In order for the voter’s choices to be counted as
they were cast, we must be certain that the reconstituted votes will
match the originals. We propose a fail-stop check on the encoding
process: the machine writing the data should decode the serialized
output and verify that it matches the original vote selection data
structure. If the decode method is deterministic, this check ensures
that this data structure will be correctly reconstructed later when
the votes are counted. If the serialization and deserialization rou-
tines are also side-effect free, they can be removed from the trusted
computing base, as the check veriﬁes their correctness as needed.
In general, verifying that a computation will be deterministic
and free of side effects is a difﬁcult task that typically requires
careful examination of a program’s entire source code. Verifying
side-effect freeness requires verifying that the computation does
not modify the state of any parameters or global state and does
not affect the outside world in any observable way (e.g., writing
to an I/O device). Verifying determinism requires ensuring that the
method does not read any information that may differ between dif-
ferent calls. Checking the latter property ﬁrst requires ensuring that
anything that is read by the method isn’t changed elsewhere in the
program. Also, we must ensure that any value read by the method
doesn’t depend on environmental factors that could differ between
executions of the program.
We view the contributions of this work as follows:
We can see that the concepts of determinism and side-effect free-
ness are related, in that they both restrict access to state created out-
side the method. We use a uniﬁed approach to achieving both goals,
based on object capabilities [18]. Speciﬁcally, we introduce and
deﬁne the concept of deterministic object-capability languages, in
which the ability to cause side effects and to observe data that varies
between executions is conveyed by explicit object references that
are propagated only by explicit program statements.
A key advantage of our approach is that it supports modular rea-
soning about purity, side effects, and determinism. In particular, a
programmer can tell whether a particular method is pure simply by
looking at its type signature. In our system, if all parameter types
are immutable, then the method can be guaranteed to be pure. This
allows purity speciﬁcations to be part of the contract of a method
and simpliﬁes the task of reasoning about program behavior. The
body of a pure method has no additional constraints, permitting
wide ﬂexibility in how it is implemented. In particular, pure meth-
ods can call impure methods, and vice versa. In short, pure and
impure code can easily be mixed; the majority of a program can be
imperative, with purity still being enforced where needed.
We brieﬂy describe how the Joe-E subset of Java satisﬁes the re-
quirements of a deterministic object-capability language, and how
it can be used to write methods that can be easily recognized as ver-
iﬁably pure. In order to evaluate our approach to veriﬁable purity,
we ported three legacy libraries (an AES implementation, serializa-
tion logic from an experimental voting machine implementation,
and an HTML parser) to the Joe-E subset, and refactored them so
that their top-level methods could be veriﬁed as pure.
As Joe-E was not explicitly designed to ease migration of legacy
code, we found that the task of modifying existing code to satisfy
the Joe-E restrictions was at times difﬁcult. Certain recurring pat-
terns account for much of this difﬁculty; code that avoids these
patterns is much easier to port. Refactoring methods so they could
be veriﬁed pure was generally harder than just porting to the Joe-E
subset, and sometimes required changes to data structures and in-
terfaces. We therefore recommend our approach primarily for use
with new code that is designed with this approach to purity in mind.
which it is easy to verify purity.
• We enumerate several applications where the ability to verify
that particular blocks of code are pure makes it easy to verify
interesting high-level application-speciﬁc properties.
• We describe a class of imperative programming languages in
• We introduce Joe-E’s enforcement of determinism and we
• We share our experience refactoring legacy codebases so that
they can be veriﬁed as pure, thus attaining useful security
guarantees.
• Based on this practical experience, we identify programming
patterns that are well-suited to writing veriﬁably pure sys-
tems as well as anti-patterns that make this task difﬁcult.
show how this enables veriﬁable purity in Java.
2. APPLICATIONS
We argue that functional purity has many applications in security
and reliability. Purity is a helpful tool for building more modular
programs that are easier to reason about, and this makes it easier
to verify many kinds of security properties. Languages and pro-
gramming idioms that make this property easy to achieve and ver-
ify may be of beneﬁt to programmers, especially those aiming to
write maintainable, auditable, and understandable code.
2.1 Reproducibility
Consider the following scenario, inspired by [1]: Mallory gen-
erates a PDF ﬁle containing a contract for Alice to electronically
sign. Mallory constructs this PDF ﬁle so that its displayed content
depends on the system date. When viewed in January, the contract
says that Mallory will pay Alice $100; in any other month, the con-
tract says that Alice will pay Mallory $1,000. Suppose Alice reads
and electronically signs the contract on January 1, and returns the
signed contract to Mallory. On February 1, Mallory presents the
signed contract to a judge, and the judge orders Alice to pay Mal-
lory $1,000.
The problem is that the computation that renders the text is not
deterministic. The behavior of the PDF viewer depends on other
factors aside from its input, the bits of the document ﬁle. This
attack could not succeed if the PDF viewer’s computation was a
pure function of the input ﬁle. If we could verify the purity of the
viewer, we would be assured that Mallory’s attack will fail.
This is an example of a TOCTTOU vulnerability. Whenever we
compute a result that is checked, and then recompute it later when
it is used, we must be careful to ensure that the computation is re-
producible. Pure functions are useful for this, because determinism
ensures reproducibility and makes explicit the inputs a computation
may depend upon.
Another application is in transactional systems. Suppose we take
periodic checkpoints of an application and log all its inputs.
If
the application is deterministic, then we can recover from crashes:
reincarnating the application and replaying from an old snapshot
and input trace will always reproduce the same behavior that the
previous incarnation of the application followed. This eliminates
the need to checkpoint every intermediate state. It also allows a
replicated system to transparently fail over to a backup system that
is receiving the same stream of input events.
2.2
Invertibility
The serialization example given in the introduction is representa-
tive of a class of applications that have a matched pair of algorithms
(Encode, Decode) for which it is intended that Decode is an in-
verse of Encode. Speciﬁcally, the inverse property should hold:
for all x, Decode(Encode(x)) should yield some output x(cid:48) that is
functionally equivalent to x. To ensure the original x will be re-
coverable in the future, this has to hold even if the invocation of
Decode takes place at some later time on a different machine.
Purity helps support fail-stop enforcement of this property, in
which errors are detected at runtime but before any harmful conse-
quences have taken place. One can test Encode(x) at runtime to
ensure that it will be decoded correctly by Decode:
y := Encode(x)
abort if x != Decode(y)
If Decode is purely functional, its determinism ensures that the
check can be performed at any time and will accurately reﬂect
whether the message can be correctly decoded in the future. Also,
if Decode is side-effect free, adding this check to existing code
won’t break the program.
This approach applies to, e.g., serialization and deserialization,
encryption and decryption, and compression and decompression.
In many such applications, it is better to fail and warn the user than
it is to proceed and lose data. If this pattern is used to ensure that
all data that is encoded can be recovered, neither the encoder nor
decoder need to be trusted correct in order to establish the property
that data is never lost or corrupted.
Formally verifying the correctness of serialization and deserial-
ization with static analysis is a difﬁcult task. Serialization and de-
serialization typically involve walking a (potentially cyclic) object
graph, and thus inevitably implicate complex aliasing issues, which
is known to make static analysis difﬁcult. Therefore, purity seems
better-suited to this task than classical approaches.
Deterministic functions can also be used for enforcement of more
complex functional relations than invertibility. The exokernel Xok’s
stable storage system uses what the authors call a UDF (untrusted
deterministic function) for each type of metadata disk block (e.g.,
inodes) to translate the set of blocks referenced by the metadata
into a form recognized by the kernel [13]. The determinism of this
function allows Xok to verify that metadata can only claim own-
ership of the correct set of disk blocks. This is done by verifying,
when the metadata is updated, that the set of blocks claimed by the
new metadata is the same as the set claimed by the old metadata
with the intended change applied. This mechanism is only sound if
the metadata decoding function is known to be deterministic.
2.3 Untrusted code execution
Purity gives us a way to execute untrusted code safely: we ﬁrst
verify that the untrusted code is pure, and then many useful privacy
and security properties will follow. In particular, the lack of side
effects means that the pure, untrusted computation cannot violate
the integrity of the rest of the program it interacts with2, so pure
code inherently executes in a sandbox.
Purity can also be used to structure programs in a way that re-
duces our reliance upon the correctness of some subset of the code.
If we use a pure method to process (possibly malicious) data from
an untrusted source, and if the output from the pure method is no
more trusted than its input, the method doesn’t need to be trusted
to defend itself from malicious data successfully. Even if a ma-
licious input is able to somehow subvert the proper operation of
that method, at worst it can only inﬂuence the result of the pure
computation; it cannot harm the proper operation of the rest of the
program.
Bernstein’s discussion of address-extraction code in sendmail
[4] illustrates these ideas well. The address-extraction code is re-
sponsible for parsing an email message and extracting an email ad-
2Untrusted code can still deplete resources or fail to terminate.
Limits on resource usage or looping would be needed if denial of
service is a concern [22], but that is beyond the scope of this paper.
dress from a particular header. At one point, this code contained a
remotely exploitable vulnerability that allowed an attacker to gain
root by taking control of sendmail. Bernstein proposed an alter-
nate architecture:
Suppose that the same address-extraction code is run under
an interpreter enforcing two simple data-ﬂow rules:
is by reading this mail message;
• the only way that the code can see the rest of the system
• the only way that the code can affect the rest of the
system is by printing one string determined by that mail
message.
The code is then incapable of violating the user’s security
requirements. An attacker who supplies a message that seizes
complete control of the code can control the address printed
by the code—but the attacker could have done this anyway
without exploiting any bugs in the code.
We note that Bernstein’s two conditions are exactly determinism
and side-effect-freeness, so implementing the address-extraction
code as a pure method would provide the desired security beneﬁts.
Determinism allows us to bound what information a pure method
can read—in particular, the method can only observe the value of
objects that are reachable from one of its arguments, but cannot
gain any information about any other data in the program. More-
over, deterministic code cannot listen on covert channels: for in-
stance, any differences in behavior due to timing information or
resource limits would violate the determinism properties. This en-
sures that the untrusted method cannot spy on any sensitive pro-