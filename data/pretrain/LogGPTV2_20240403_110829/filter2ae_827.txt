# 前言
  * 学习总结Java审计过程中笔记，审计方法
  * 阅读要求：有简单Java代码基础，了解漏洞原理
  * 阅读时长：30min 篇幅比较长
* * *
# 漏洞简介
简单来说，XXE就是XML外部实体注入。当允许引用外部实体时，通过构造恶意内容，就可能导致任意文件读取、系统命令执行、内网端口探测、攻击内网网站等危害。
* * *
# 有回显
不说废话，先看效果，成功读取文本内容。tip: 本次测试中需要将`Content-Type: application/x-www-form-urlencoded`修改成`Content-Type: application/xml`不然就无法成功。  
**代码分析漏洞成因：**
    public String xxeDocumentBuilderReturn(HttpServletRequest request) {
            try {
                String xml_con = WebUtils.getRequestBody(request);
                System.out.println(xml_con);
                DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
                DocumentBuilder db = dbf.newDocumentBuilder();
                StringReader sr = new StringReader(xml_con);
                InputSource is = new InputSource(sr);
                Document document = db.parse(is);  // parse xml
                // 遍历xml节点name和value
                StringBuffer buf = new StringBuffer();
                NodeList rootNodeList = document.getChildNodes();
                for (int i = 0; i 
    ]>
    &xxe;
复测过程中遇见的小坑，个人感觉纯属玄学问题。两次请求数据几乎是一模一样的，但是返回结果愣是不一样，一个200一个400。（充分体现了挖洞得随缘，有时候姿势对了，但是结果不对可能不是你的错误）  
* * *
# Xinclude
**什么是xinclude**  
顾名思义，xinclude可以理解为xml
include熟悉编译/脚本语言的一定熟知，像php的include，python和java的import都是可以进行文件包含的。  
**那么文件包含有什么好处？**  
当然是可以使代码更整洁，我们可以将定义的功能函数放在function.php中，再在需要使用功能函数的文件中使用include包含function.php，这样就避免了重复冗余的函数定义，同样可以增加代码的可读性。故此，xinclude也不例外，它是xml标记语言中包含其他文件的方式。
    public String xxe_xinclude_DocumentBuilder(HttpServletRequest request) {
            try {
                String xml_con = WebUtils.getRequestBody(request);
                System.out.println(xml_con);
                DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
                dbf.setXIncludeAware(true);   // 支持XInclude
                dbf.setNamespaceAware(true);  // 支持XInclude
                DocumentBuilder db = dbf.newDocumentBuilder();
                StringReader sr = new StringReader(xml_con);
                InputSource is = new InputSource(sr);
                Document document = db.parse(is);  // parse xml
                NodeList rootNodeList = document.getChildNodes();
                String str = new String();
                for (int i = 0; i 
    ">
    &#x25;eval;
    &#x25;error;
        %local_dtd;
    ]>
        &data;
            ">
            %eval;
            %error;
        '>
        %local_dtd;
    ]>
* * *
# Poi ooxml XXE
## CVE-2014-3529
  * 新建xxe.xlsx文件，修改后缀名xxe.zip解压。  
  * 修改[Content-Types].xml
         ]>
    &xxe;
`后因为无法访问ceye.io网站，笔者自己在本地搭建一台服务器。推荐使用phpstudy，开启访问日志，具体方法百度。`  
  * 重新压缩成zip，在修改成xlsx文件。
  * 上传文件  
  * 或者直接读取文件。
        File f = new File("/path/xxe.xlsx");
          FileInputStream in = new FileInputStream(f);
          XSSFWorkbook wb = new XSSFWorkbook(in); // xxe vuln
          XSSFSheet sheet = wb.getSheetAt(0);
          int total = sheet.getLastRowNum();
          for (Row row : sheet){
              for (Cell cell :row){
                 System.out.println(cell.getStringCellValue());
              }
              System.out.println("expection");
          }
  * 看下报错，报出poi错误才是正确的。  
  * 查看访问记录  
  * 修复建议，换成3.10-FINAL版本以上  
* * *
## CVE-2017-5644
其他步骤同CVE-2014-3529中的方式，这次是在 xl/workbook.xml 中注入实体:
    ]>
    &e11;
\&e11;\ 代码引用ENTITY e11，而 e11 由16 个 e10 组成，递归调用，循环次数达到 16^10
的规模。循环大量的实体引用，会消耗大量的CPU资源，长时间显示占用近100%。
POIXMLTypeLoader 中，解析xml的时候直接读取xml，没有对实体的数量进行限制。3.11 对 POIXMLTypeLoader
中的实体大小进行了限制 ，最大为4096，但是当实体为空的时候（如上例），还是可以构造空实体，形成大量循环，占用 cpu 资源，造成拒绝服务攻击。
* * *
# xlsx-streamer XXE
xlsx-streamer XXE漏洞与Poi ooxml
XXE类似，具体查看[参考链接](https://www.itread01.com/hkpcyyp.html)笔者这里就不过多的叙述了。
* * *
# 代码审计技巧
**查找关键字**
    javax.xml.parsers.DocumentBuilderFactory;
    javax.xml.parsers.SAXParser
    javax.xml.transform.TransformerFactory
    javax.xml.validation.Validator
    javax.xml.validation.SchemaFactory
    javax.xml.transform.sax.SAXTransformerFactory
    javax.xml.transform.sax.SAXSource
    org.xml.sax.XMLReader
    org.xml.sax.helpers.XMLReaderFactory
    org.dom4j.io.SAXReader
    org.jdom.input.SAXBuilder
    org.jdom2.input.SAXBuilder
    javax.xml.bind.Unmarshaller
    javax.xml.xpath.XpathExpression
    javax.xml.stream.XMLStreamReader
    org.apache.commons.digester3.Digester
    …………
* * *
# XXE防御
    //一般的防护
    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
                dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
                dbf.setFeature("http://xml.org/sax/features/external-general-entities", false);
                dbf.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
    //xinclude防护
    dbf.setXIncludeAware(true);   // 支持XInclude
                dbf.setNamespaceAware(true);  // 支持XInclude
                dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
                dbf.setFeature("http://xml.org/sax/features/external-general-entities", false);
                dbf.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
* * *
# 推荐案例
[收集了很多国内外知名厂商出现案例](https://www.cnblogs.com/backlion/p/9302528.html)  
[基础知识文章XXE](https://www.freebuf.com/column/156863.html)  
[XXE更多骚操作](https://xz.aliyun.com/t/3357)  
[Apache Solr XXE漏洞分析 -【CVE-2018-8026 】](https://xz.aliyun.com/t/2448)
* * *
# 参考