# 【缺陷周话】第43期：不当的函数地址使用
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 1、不当的函数地址使用
错误的将函数地址当作函数、条件表达式、运算操作对象使用，甚至参与逻辑运算，将导致各种非预期的程序行为发生。比如在如下if语句，其中func()为程序中定义的一个函数:
if (func == NULL)
由于使用 func 而不是 func()，也就是使用的是 func 的地址而不是函数的返回值，而函数的地址不等于 NULL，如果用函数地址与 NULL
作比较时，将使其条件判断恒为false。
详细请参见CWE-480: Use of IncorrectOperator。
## 2、”不当的函数地址使用”的危害
不当的函数地址使用可能会导致非预期的程序行为发生，如条件永远不会被触发而出现的逻辑错误，又或者由于条件恒为真而导致的无限循环，从而造成资源耗尽、拒绝服务等攻击。
## 3、示例代码
示例源于 Samate Juliet TestSuite for C/C++ v1.3
(https://samate.nist.gov/SARD/testsuite.php)，源文件名：CWE480_Use_of_Incorrect_Operator__basic_01.c。
### 3.1 缺陷代码
在上述示例代码中，第53行使用 helperBad==NULL 作为 if 语句的判断条件，其中helperBad()
函数的定义在21行，helperBad==NULL 操作导致 if 语句恒为 false，第55行 printLine()
函数永远不会被执行，存在“不当的函数地址使用”问题。
使用代码卫士对上述示例代码进行检测，可以检出“不当的函数地址使用”缺陷，显示等级为中。如图1所示：
图1：“不当的函数地址使用”检测示例
### 3.2 修复代码
在上述修复代码中，Samate给出的修复方式为：在第52行使用函数返回值替代函数地址进行条件判断，从而避免了“不当的函数地址使用”问题。
使用代码卫士对修复后的代码进行检测，可以看到已不存在“不当的函数地址使用”缺陷。如图2：
图2：修复后检测结果
## 4、如何避免“不当的函数地址使用”
需要明确操作使用的是函数地址还是函数返回值，避免由于编码错误造成的对函数地址的直接使用。