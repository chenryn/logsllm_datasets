# A Principled Approach for ROP Defense

## Authors
- Rui Qiao, Stony Brook University, PI:EMAIL
- Mingwei Zhang, Intel Labs, PI:EMAIL
- R. Sekar, Stony Brook University, PI:EMAIL

## Abstract
Return-Oriented Programming (ROP) is a potent attack technique that circumvents modern defenses like Data Execution Prevention (DEP). ROP exploits existing code snippets ending with return instructions, known as gadgets, to construct arbitrary control flows. Various defense mechanisms have been proposed to counter ROP by enforcing policies on the targets and frequency of return instructions. However, these policies are often bypassed by more sophisticated ROP attacks. Stricter policies, while effective, can introduce incompatibilities that hinder their deployment.

In this work, we present a principled approach for ROP defense in Commercial Off-The-Shelf (COTS) binaries. Our experimental evaluation demonstrates that our approach enforces a stronger policy while maintaining better compatibility and performance compared to previous research. Our prototype is compatible with many real-world and low-level programs. On the SPEC 2006 benchmark, it adds only 4% overhead above the base 13% imposed by PSI, the platform used in our implementation.

## 1. Introduction
Programs written in C/C++ are not memory-safe, making them vulnerable to attacks such as buffer overflow, heap overflow, and use-after-free. Traditionally, attackers inject shellcode into the address space of a victim process and redirect control to this code. However, with the widespread adoption of DEP, injected code is no longer executable, leading attackers to rely on code reuse attacks. Return-Oriented Programming (ROP), which chains together sequences of "gadgets" (code snippets ending with return instructions), is the most powerful and versatile among these attacks. The pervasiveness of returns in binary code allows for Turing-complete computation, making ROP the dominant code reuse attack in real-world scenarios.

### Motivation
Despite the effectiveness of Control-Flow Integrity (CFI) in limiting control-flow subversions, determined attackers can still overcome coarse-grained CFI. Recent techniques have focused on refining CFI policies, particularly for forward edges (indirect calls and jumps). However, mitigating the subversion of backward edges (returns) remains a challenge due to compatibility and performance concerns. This motivates our work to develop a principled approach for ROP defense.

### Key Contributions
- **Static Analysis for Non-Standard Returns**: We present an automated static analysis technique to identify non-standard returns and their intended targets, handling complex applications without manual annotations.
- **Support for Diverse Threading Mechanisms**: We provide a unified, threading-mechanism-independent approach for maintaining per-thread return capability stacks (RCAP-stacks) and transparently switching to the correct RCAP-stack at runtime.
- **Strict Enforcement**: By discovering and always pushing the intended target on the RCAP-stack, we avoid the need for "whitelisting" return instructions, subjecting all returns to a strict policy.
- **In-Depth Evaluation**: Our solution demonstrates excellent compatibility and protection against attacks, with significantly lower overhead (3% over the base 14% overhead posed by PSI on SPEC 2006 benchmarks).

## 2. Background and Threat Model

### 2.1 ROP Attacks
ROP is the most prevalent form of code-reuse attack, using "gadgets" (existing code snippets ending with return instructions). Gadgets can be either intended code sequences or unintended instruction sequences beginning from the middle of an instruction, possible on variable-length instruction-set architectures like x86. To carry out a ROP attack, the attacker must subvert the program's intended control flow.

### 2.2 Control-Flow Integrity (CFI)
Control-Flow Integrity (CFI) limits control flows to follow a statically computed control flow graph (CFG). While CFI defeats many ROP attacks, determined attackers can still overcome coarse-grained CFI. Our defense is built on a platform that already implements CFI, specifically the PSI platform [50].

### 2.3 Threat Model
We assume a powerful remote attacker who can exploit memory vulnerabilities to read or write arbitrary memory locations, subject to OS-level permission settings. The attacker has no local program execution privilege or physical access to the victim system. DEP is enabled, making ROP necessary for payload construction. ASLR is deployed, but the attacker can leak information to bypass it.

## 3. Inferring Intended Control Flow
Our focus is on return instructions. We do not attempt to improve the coarse-grained BinCFI policy enforced on other branch types by our implementation platform, PSI [50]. The first task is to precisely infer the program-intended control flow for each return instruction. We develop a static analysis to identify instructions that push addresses that may later be used as return targets. Instrumentation is added to update the RCAP-stack to track these return capabilities.

### 3.1 Calls
Most call instructions are used for function invocations, expressing an intent to return to the next instruction. However, the callee decides whether the return is exercised. Unintended calls do not lead to compatibility issues since we do not require all return capabilities to be used.

```assembly
0x146b4 movl %eax, (%esp)
0x146b7 ...
0x146bb ret $0xc
```

**Figure 1:** A non-standard return from `ld.so`

Based on the results of static analysis and/or annotations, instrumentation is added to update the RCAP-stack, keeping track of the return capabilities acquired by the program.