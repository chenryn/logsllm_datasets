 Properties let us describe a kind of relationship between
 members of classes. They correspond to predicates
 with arity 2 in FOL. In an OWL document two types
 of properties are distinguished:
 • Object properties, which relate objects to other
 objects, i.e. instances of a class with instanc-
es of another class. E.g., the object property
“isTaughtBy” relates the class “course” with
the class “academicsStaffMember.” I.e., a
The owl:intersectionOf element creates a new class
“course” “isTaughtBy” an instance of the “aca-
from the two classes A and B which has elements that
demicStaffMember” class.
were both in class A and class B:
• Datatype properties, which relate objects Here, the individuals that are members of the
to data type values. OWL does not have class “firstYearCourse” are all the courses that have
the property “isTaughtBy” assigned to a “professor”
predefined data types, but it allows one to
owl:someValuesFrom: Defines the set of individu-
use the XML Schema data types. E.g., the
als that have at least one relation with an instance of
year in which a person was born is speci-
a certain class, e.g.:
fied using the “http://www.w3.org/2001/
XLMSchema#nonNegativeInteger” data type
from the XML Schema.
owl:hasValues: Defines a set of individuals for
Both kinds of properties can use the rdfs:domain which the value of the restricted property is equal to
and rdfs:range element to restrict the relation. a certain instance. E.g., the individuals of the class
“mathCourse” can be characterized as those that are
taught by the professor “949352:”
More elaborate boundaries can be made by applying 
restrictions to a property, this results in the subclasses 
of individuals that satisfy that condition. There are 
two kinds of restrictions: values constraints and car- 
dinality constraints. Examples of values constraints 
include owl:allValuesFrom, owl:someValuesFrom, 
and owl:hasValues. 
owl:allValuesFrom: Defines the set of individuals, 
for which all the values of the restricted property are 