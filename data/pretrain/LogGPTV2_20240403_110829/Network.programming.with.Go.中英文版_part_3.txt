as LTE (Long Term Evolution) will also use an IP stack.
多年的发展，使得IP 和TCP/UDP 协议基本上就等价于网络协议栈。例如, 蓝牙定义了物理层和协议
层，但最重要的是IP 协议栈，可以在许多蓝牙设备使相同的互联网编程技术。同样, 开发 4G 无线
手机技术，如LTE（Long Term Evolution）也将使用 IP 协议栈。
While IP provides the networking layer 3 of the OSI stack, TCP and UDP deal with
layer 4. These are not the final word, even in the interenet world: SCTP has come
from the telecommunications to challenge both TCP and UDP, while to provide internet
services in interplanetary space requires new, under development protocols such as
DTN. Nevertheless, IP, TCP and UDP hold sway as principal networking technologies
now and at least for a considerable time into the future. Go has full support for
this style of programming
IP 提供了第3 层的OSI 网络协议栈，TCP 和UDP 则提供了第4 层。即使在因特网世界，这些都不是
固定不变的：TCP 和UDP 将面临来自SCTP（STREAM CONTROL TRANSMISSION PROTOCOL 流控制传
输协议）的挑战，同时在星际空间中提供互联网服务需要新的像正在开发的 DTN 协议。不过，IP, TCP
和UDP 至少在当前甚至未来相当长的时间内是主要的网络技术。Go 语言提供了对这种编程的全面支
持。
This chapter shows how to do TCP and UDP programming using Go, and how to use a raw
socket for other protocols.
本章介绍如何使用GO 编写TCP 和UDP 程序，以及如何使用其他协议的原始套接字。
3.2 The TCP/IP stack TCP/IP 协议栈
The OSI model was devised using a committee process wherein the standard was set
up and then implemented. Some parts of the OSI standard are obscure, some parts cannot
easily be implemented, some parts have not been implemented.
OSI 模型标准的建立和实施是一个委员会（国际标准化组织ISO--译者注）设计的。OSI 标准中的一
些部分是模糊的，有些部件不能很容易地实现，一些地方还没有得到落实。
The TCP/IP protocol was devised through a long-running DARPA project. This worked
by implementation followed by RFCs (Request For Comment). TCP/IP is the principal
Unix networking protocol. TCP/IP = Transmission Control Protocol/Internet Protocol.
TCP/IP 协议由长期运行的一个DARPA（美国国防先进研究项目局）项目设计。该工作其次由RFC
(Request For Comment)实施。TCP/IP 是Unix 的首要网络协议。TCP/IP 等于传输控制协议/互联
网协议。
The TCP/IP stack is shorter than the OSI one:
TCP is a connection-oriented protocol, UDP (User Datagram Protocol) is a
connectionless protocol.
TCP/IP 协议栈是OSI 模型的一部分：
TCP 是一个面向连接的协议，UDP（User Datagram Protocol，用户数据报协议）是一种无连接的
协议。
IP datagrams
IP 数据包
The IP layer provides a connectionless and unreliable delivery system. It considers
each datagram independently of the others. Any association between datagrams must
be supplied by the higher layers.
IP 层提供了无连接的不可靠的传输系统，任何数据包之间的关联必须依赖更高的层来提供。
The IP layer supplies a checksum that includes its own header. The header includes
the source and destination addresses.
IP 层包头支持数据校验，在包头包括源地址和目的地址。
The IP layer handles routing through an Internet. It is also responsible for breaking
up large datagrams into smaller ones for transmission and reassembling them at the
other end.
IP 层通过路由连接到因特网，还负责将大数据包分解为更小的包，并传输到另一端后进行重组。
UDP
UDP is also connectionless and unreliable. What it adds to IP is a checksum for the
contents of the datagram and port numbers. These are used to give a client/server
model - see later.
UDP 是无连接的，不可靠的。它包括IP 数据报的内容和端口号的校验。在后面，我们会用它来构建
一些客户端/服务器例子。
TCP
TCP supplies logic to give a reliable connection-oriented protocol above IP. It
provides a virtual circuit that two processes can use to communicate. It also uses
port numbers to identify services on a host.
TCP 是构建于IP 之上的面向链接的协议。它提供了一个虚电路使得两个应用进程可以通过它来通信。
它通过端口号来识别主机上的服务。
3.3 Internet addresses 互联网地址
In order to use a service you must be able to find it. The Internet uses an address
scheme for devices such as computers so that they can be located. This addressing
scheme was originally devised when there were only a handful of connected computers,
and very generously allowed upto 2^32 addresses, using a 32 bit unsigned integer.
These are the so-called IPv4 addresses. In recent years, the number of connected
(or at least directly addressable) devices has threatened to exceed this number,
and so "any day now" we will switch to IPv6 addressing which will allow upto 2^128
addresses, using an unsigned 128 bit integer. The changeover is most likely to be
forced by emerging countries, as the developed world has already taken nearly all
of the pool of IPv4 addresses.
要想使用一项服务，你必须先能找到它。互联网使用地址定位例如计算机的设备。这种寻址方案最初
被设计出来只允许极少数的计算机连接上，使用32 位无符号整形，拥有高达2^32 个地址。这就是
所谓的IPv4 地址。近年来，连接（至少可以直接寻址）的设备的数量可能超过这个数字，所以在不
久的某一天我们将切换到利用128 位无符号整数，拥有高2^128 个地址的IPv6 寻址。这种转换最有
可能被已经耗尽了所有的IPv4 地址的新兴国家发达地区。
IPv4 addresses
IPv4 地址
The address is a 32 bit integer which gives the IP address. This addresses down to
a network interface card on a single device. The address is usually written as four
bytes in decimal with a dot '.' between them, as in "127.0.0.1" or "66.102.11.104".
IP 地址是一个32 位整数构成。每个设备的网络接口都有一个地址。该地址通常使用'.'符号分割的
4 字节的十进制数，例如："127.0.0.1" 或 "66.102.11.104"。
The IP address of any device is generally composed of two parts: the address of the
network in which the device resides, and the address of the device within that network.
Once upon a time, the split between network address and internal address was simple
and was based upon the bytes used in the IP address.
所有设备的IP 地址，通常是由两部分组成：网段地址和网内地址。从前，网络地址和网内地址的分
辨很简单，使用字节构建IP 地址。
 In a class A network, the first byte identifies the network, while the last
three identify the device. There are only 128 class A networks, owned by the
very early players in the internet space such as IBM, the General Electric
Company and MIT
(http://www.iana.org/assignments/ipv4-address-space/ipv4-address-space.xm
l)
 Class B networks use the first two bytes to identify the network and the last
two to identify devices within the subnet. This allows upto 2^16 (65,536)
devices on a subnet
 Class C networks use the first three bytes to identify the network and the
last one to identify devices within that network. This allows upto 2^8 (actually
254, not 256) devices
 一个A 类IP 地址由1 字节的网络地址和 3 字节主机地址组成。A 类网络只有128 个, 被很早
的互联网成员例如IBM，通用电气公司(the General Electric Company)和MIT 所拥有。
(http://www.iana.org/assignments/ipv4-address-space/ipv4-address-space.xm
l)
 一个A 类IP 地址由1 字节的网络地址和 3 字节主机地址组成。这最多允许2^16 (65,536)
个设备在同一个子网。
 一个C类IP地址由3字节的网络地址和1字节的主机地址组成。这最多允许2^8 (其实是254,
不是256)个设备。
This scheme doesn't work well if you want, say, 400 computers on a network. 254 is
too small, while 65,536 is too large. In binary arithmetic terms, you want about
512. This can be achieved by using a 23 bit network address and 9 bits for the device
addresses. Similarly, if you want upto 1024 devices, you use a 22 bit network address
and a 10 bit device address.
但是，比如你需要400 台计算机在同一个网络，该方案是不可行的。254 太小，而65,536 又太大。
根据二进制计算，你大约需要512(2^9，译者注)。这样就可以通过使用一个23 位的网络地址和9
位的设备地址实现。同样，如果您需要高达1024 台设备，使用一个22 位网络地址和一个 10 位的设
备地址。
Given an IP address of a device, and knowing how many bits N are used for the network
address gives a relatively straightforward process for extracting the network
address and the device address within that network. Form a "network mask" which is
a 32-bit binary number with all ones in the first N places and all zeroes in the
remaining ones. For example, if 16 bits are used for the network address, the mask
is 11111111111111110000000000000000. It's a little inconvenient using binary, so
decimal bytes are usually used. The netmask for 16 bit network addresses is
255.255.0.0, for 24 bit network addresses it is 255.255.255.0, while for 23 bit
addresses it would be 255.255.254.0 and for 22 bit addresses it would be
255.255.252.0.
知道设备的IP 地址和多少字节用于网络地址，那么可以比较直接的提取出这个网络中的网络地址和
设备地址。例如：“网络掩码”是一个前面N 位为1，其他所有位为0 的32 位二进制数。例如，如果
使用16 位的网络地址，掩码为11111111111111110000000000000000。使用二进制有一点不方便，
所以通常使用十进制字节。16 位网络地址的子网掩码是255.255.0.0，而对于23 位地址，这将是
255.255.254.0，和22 位地址，这将是255.255.252.0。
Then to find the network of a device, bit-wise AND it's IP address with the network
mask, while the device address within the subnet is found with bit-wise AND of the
1's complement of the mask with the IP address.
接着查找设备的网络，并将其IP 地址与网络掩码进行按位与操作，而该设备在子网中的地址，可通
过其IP 地址同掩码与 1 的补码的按位与操作发现。
IPv6 addresses
IPv6 地址
The internet has grown vastly beyond original expectations. The initially generous
32-bit addressing scheme is on the verge of running out. There are unpleasant
workarounds such as NAT addressing, but eventually we will have to switch to a wider
address space. IPv6 uses 128-bit addresses. Even bytes becomes cumbersome to express
such addresses, so hexadecimal digits are used, grouped into 4 digits and separated
by a colon ':'. A typical address might be 2002:c0e8:82e7:0:0:0:c0e8:82e7.
因特网的迅速发展大大超出了原来的预期。最初富余的32 位地址解决方案已经接近用完。虽然有一
些例如NAT 地址输入这样不是很完美的解决方法，但最终我们将不得不切换到更广阔的地址空间。
IPv6 使用128 位地址，即使表达同样的地址，字节数变得很麻烦，由':'分隔的4 位16 进制组成。
一个典型的例子如：2002:c0e8:82e7:0:0:0:c0e8:82e7。
These addresses are not easy to remember! DNS will become even more important. There
are tricks to reducing some addresses, such as eliding zeroes and repeated digits.
For example, "localhost" is 0:0:0:0:0:0:0:1, which can be shortened to ::1
要记住这些地址并不容易！DNS 将变得更加重要。有一些技巧用来介绍一些地址，如省略一些零和重
复的数字。例如："localhost"地址是：0:0:0:0:0:0:0:1，可以缩短到::1。
3.4 IP address type IP 地址类型
The type IP IP 类型
The package "net" defines many types, functions and methods of use in Go network
programming. The type IP is defined as an array of bytes
"net"包定义了许多类型, 函数，方法用于Go 网络编程。IP类型被定义为一个字节数组。
type IP []byte
There are several functions to manipulate a variable of type IP, but you are likely
to use only some of them in practice. For example, the function ParseIP(String) will
take a dotted IPv4 address or a colon IPv6 address, while the IP method String will
return a string. Note that you may not get back what you started with: the string
form of 0:0:0:0:0:0:0:1 is ::1.
有几个函数来处理一个IP类型的变量, 但是在实践中你很可能只用到其中的一些。例
如, ParseIP(String)函数将获取逗号分隔的 IPv4 或者冒号分隔的 IPv6地址, 而IP方法的字符串
将返回一个字符串。请注意，您可能无法取回你期望的: 字符串 0:0:0:0:0:0:0:1 是::1。
A program to illustrate this is
下面用一个程序来说明
/* IP
*/
package main
import (
"net"
"os"
"fmt"
)
func main() {
if len(os.Args) != 2 {
fmt.Fprintf(os.Stderr, "Usage: %s ip-addr\n", os.Args[0])
os.Exit(1)
}
name := os.Args[1]
addr := net.ParseIP(name)
if addr == nil {
fmt.Println("Invalid address")
} else {
fmt.Println("The address is ", addr.String())
}
os.Exit(0)
}
If this is compiled to the executable IP then it can run for example as
如果编译它为可执行文件IP，那么它可以运行如
IP 127.0.0.1
with response
得到结果
The address is 127.0.0.1
or as
或
IP 0:0:0:0:0:0:0:1
得到结果
The address is ::1
The type IPmask
IP 掩码
In order to handle masking operations, there is the type
为了处理掩码操作，有下面类型：
type IPMask []byte
There is a function to create a mask from a 4-byte IPv4 address
下面这个函数用一个4 字节的IPv4 地址来创建一个掩码
func IPv4Mask(a, b, c, d byte) IPMask
Alternatively, there is a method of IP which returns the default mask
另外, 这是一个IP的方法返回默认的掩码
func (ip IP) DefaultMask() IPMask
Note that the string form of a mask is a hex number such as ffff0000 for a mask of
255.255.0.0.
需要注意的是一个掩码的字符串形式是一个十六进制数，如掩码255.255.0.0 为ffff0000。
A mask can then be used by a method of an IP address to find the network for that
IP address
一个掩码可以使用一个IP 地址的方法，找到该IP 地址的网络
func (ip IP) Mask(mask IPMask) IP
An example of the use of this is the following program:
下面的程序是一个使用了这个的例子：
/* Mask
*/
package main
import (
"fmt"
"net"
"os"
)
func main() {
if len(os.Args) != 2 {
fmt.Fprintf(os.Stderr, "Usage: %s dotted-ip-addr\n", os.Args[0])
os.Exit(1)
}
dotAddr := os.Args[1]
addr := net.ParseIP(dotAddr)
if addr == nil {
fmt.Println("Invalid address")
os.Exit(1)
}
mask := addr.DefaultMask()
network := addr.Mask(mask)
ones, bits := mask.Size()
fmt.Println("Address is ", addr.String(),
" Default mask length is ", bits,
"Leading ones count is ", ones,
"Mask is (hex) ", mask.String(),
" Network is ", network.String())
os.Exit(0)
}
If this is compiled to Mask and run by
编译并运行Mask
Mask 127.0.0.1
it will return
将返回
Address is 127.0.0.1 Default mask length is 8 Network is 127.0.0.0
The type IPAddr
IPAddr 类型
Many of the other functions and methods in the net package return a pointer to
an IPAddr. This is simply a structure containing an IP.
在net 包的许多函数和方法会返回一个指向IPAddr的指针。这不过只是一个包含IP类型的结构体。
type IPAddr {
IP IP
}
A primary use of this type is to perform DNS lookups on IP host names.
这种类型的主要用途是通过IP 主机名执行DNS 查找。
func ResolveIPAddr(net, addr string) (*IPAddr, os.Error)
where net is one of "ip", "ip4" or "ip6". This is shown in the program
其中net是"ip","ip4"或者"ip6"的其中一个. 下面的程序中将会展示。
/* ResolveIP
*/
package main
import (
"net"
"os"
"fmt"
)
func main() {
if len(os.Args) != 2 {
fmt.Fprintf(os.Stderr, "Usage: %s hostname\n", os.Args[0])
fmt.Println("Usage: ", os.Args[0], "hostname")
os.Exit(1)
}
name := os.Args[1]
addr, err := net.ResolveIPAddr("ip", name)
if err != nil {
fmt.Println("Resolution error", err.Error())
os.Exit(1)
}
fmt.Println("Resolved address is ", addr.String())
os.Exit(0)
}
Running ResolveIP www.google.com returns
运行ResolveIP www.google.com返回
Resolved address is 66.102.11.104
Host lookup
主机查询
The function ResolveIPAddr will perform a DNS lookup on a hostname, and return a
single IP address. However, hosts may have multiple IP addresses, usually from
multiple network interface cards. They may also have multiple host names, acting
as aliases.
ResolveIPAddr函数将对某个主机名执行DNS 查询，并返回一个简单的 IP 地址。然而，通常主机如
果有多个网卡，则可以有多个IP 地址。它们也可能有多个主机名，作为别名。
func LookupHost(name string) (cname string, addrs []string, err os.Error)
One of these addresses will be labelled as the "canonical" host name. If you wish
to find the canonical name, use func LookupCNAME(name string) (cname string, err
os.Error)
这些地址将会被归类为“canonical”主机名。如果你想找到的规范名称，使用funcLookupCNAME(name
string) (cname string, err os.Error)
This is shown in the following program
下面是一个演示程序
/* LookupHost
*/
package main
import (
"net"
"os"
"fmt"
)
func main() {
if len(os.Args) != 2 {