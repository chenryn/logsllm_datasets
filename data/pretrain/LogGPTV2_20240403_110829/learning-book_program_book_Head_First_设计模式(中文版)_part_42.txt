单一责任
如果我们允许我们的聚合实现它们内部的集合，以及相关
类的每个责任都有改
的操作和遍历的方法，又会如何？我们已经知道这会增加
聚合中的方法个数，但又怎样呢？为什么这么做不好？
变的潜在区域。超过一
个责任，意味着超过一
想知道为什么，首先你需要认清楚，当我们允许一个类不
但要完成自己的事情（管理某种聚合），还同时要担负更
个改变的区域。
多的责任（例如遍历）时，我们就给了这个类两个变化的
原因。两个？没错，就是两个：如果这个集合改变的话，
这个类也必须改变：如果我们遍历的方式改变的话，这个
这个原则告诉我们，
类也必须跟着改变。所以，再一次地，我们的老朋友“改
变”又成了我们设计原则的中心：
尽量让每个类保持单一
责任。
设计原则
一个类应该只有一个引起变化的
原因
内聚（cohesion）这个术语你
应该听过，它用来度量一个
类或模块紧密地达到单一目
我们知道要避免类内的改变，因为修改代码很容易造成
的或责任。
许多潜在的错误。如果有一个类具有两个改变的原因，
那么这会使得将来该类的变化机率上升，而当它真的改
当一个模块或一个类被设计
变时，你的设计中同时有两个方面将会受到影响。
成只支持一组相关的功能时，我们说
它具有高内聚：反之，当被设计成支持
要如何解决呢？这个原则告诉我们将一个责任只指派给
一组不相关的功能时，我们说它具有低
一个类。
内聚。
没错，这听起来很容易，但其实做起来并不简单：区分
设计中的责任，是最困难的事情之一。我们的大脑很习
内聚是一个比单一责任原则更普遍的
惯看着一大群的行为，然后将它们集中在一起，尽管他
概念，但两者其实关系是很密切的。
们可能属于两个或多个不同的责任。想要成功的唯一方
遵守这个原则的类容易具有很高的凝
法，就是努力不懈地检查你的设计，随着系统的成长，
聚力，而且比背负许多责任的低内聚
随时观察有没有迹象显示某个类改变的原因超出一个。
类更容易维护。
你现在的位置
339
---
## Page 376
多重责任
OBRAIN
.POWER
研究这些类，并找出其中哪些类具有多重责任。
Person
setName()
setAddress0
getState()
login0
dial)
tLocation()
signup0
setPhoneNumber()
(axes
(dnfueu
movel)
load()
talk()
fre)
sendData()
rest()
flasho
terator
DeckOfCards
hasNext0
hasNext[)
ShoppingCart
next()
next[)
Oppe
remove)
remove(
addCard[)
checkOut()
removeCard()
saveForLater()
shufle()
施工区！！
注意落物伤人
BRAIN
POWER
决定这些类的内聚是高或低。
PlayerActions
()eAow
Player
login()
GameSession
signup()
fre()
getHighScore()
move()
login(
rest
(eweNab
fire()
()dnufrs
rest()
getName()
340
第9章
---
## Page 377
选代器与组合模式
能够学到选代器模式，实在
是太好了！因为我刚刚又听说对
象村并购公司又完成了另一个交易
对象村咖唯厅也会被合并进来，供
应晚餐菜单。
天呀！我还以为事情已经够复杂了，
现在要怎么办？
别这样嘛，往好处
想。我相信我们能够利用送
代器模式解决这一切。
PDG
你现在的位置
341
---
## Page 378
新的菜单
看看咖啡厅的菜单
这是咖啡厅的菜单，要把这个菜单整合进我们的框架中，似乎不是太难的
事情看看怎么做。
如雕厅莱单并没有实现我们的
Menu提口，但这很容易修改。
莱单项是用散列表存储的，不知道这是否支持选
public class CafeMenu {
代器：等一下研究看.…
Hashtable menuItems = new Hashtable ();
public CafeMenu(){
就跟其他的莱单一样，莱单项在构造器中
addItem("Veggie Burger and Air Fries",
初始化。
"Veggie burger on a whole wheat bun，lettuce, tomato,and fries",
true,3.99);
addItem("Soup of the day",
"A cup of the soup of the day, with a side salad",
false, 3.69);
addItem("Burrito",
"A large burrito,with whole pinto beans,salsa,guacamole",
true,4.29);
我们在这里创建新的莱单项，并将
public void addItem(String name, String description,
它加入到策单项教列表中。
boolean vegetarian, double price)
MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
menuItems.put(menuItem.getName (), menuItem);
1
hey是项日名称。
个
这个值就是策单项对象
public Hashtable getItems(){
return menuItems;
我们不再需要这个方法了。
your
在看下一页之前，请很快写下为了能让这份代码符合我们的框架，
我们要对它做的三件事情：
2.
3.
342
第9章
---
## Page 379
选代器与组合模式
重做咖啡厅代码
将咖啡厅菜单整合进我们的框架是很容易的。为什么呢？因为Hashtable本来就支
持Java内置的选代器。但是它和ArrayList有一些不同.……
咖啡厅菜单实现Menu接口，所以女招
待使用如唯厅莱单的方式，就和其他
public class CafeMenuimplements Menu（的两个莱单没有高样。
Hashtable menuItems = new Hashtable();
public CafeMenu(){
我们使用Hashta6le，因为这是一个很常
//构造器的代码写在这里
见的存储值的数据结构。你也可以使用
比较新的HashMap。
public void addItem(String name, String description,
boolean vegetarian, double price)
MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
menuItems.put(menuItem.getName (),menuItem) ;
跟以前一样，我们可以避开set3tems(）.所以我们）
publieHashtablegetItemo ()f
F
不需要对女招待暴露莱单项的实现。
Feturn-menuItomei-
我们在这里实现了createJterator(）方法。注意，我
public Iterator createIterator():{
的部分的选代器。
再靠近一点
Hashtable比起ArrayList复杂许多，因为它的每一笔数据都是由一
个key和一个值所组成，尽管如此，我们还是可以获得值（也就
是菜单项）的选代器。
public Iterator createIterator(){
return menuItems.values().iterator();
{
很章运，这个集合支持iterator（）方法，该方法返
③一个juva.util.Jtenator类型的对象。
首先，我们取得Hashtable的值，也就是
值所组成的集合。
你现在的位置
343
---
## Page 380
测试新的菜单
让女招待认识咖啡厅菜单
如何修改女招待，让她能够支持我们的新菜单呢？现在女招待已经能够接
受选代器了，所以应该不困难。
public class Waitress {
这个如唯厅策单全和其他策单一起被传入女
Menu pancakeHouseMenu;
招待的构造器中，然后记录在一个实例变量
Menu dinerMenu;
Menu cafeMenu;
中
public Waitress (Menu pancakeHouseMenu, Menu dinerMenu, Menu cafeMenu) {
this.pancakeHouseMenu = pancakeHouseMenu;
this.dinerMenu = dinerMenu;
this.cafeMenu = cafeMenu;
public void printMenu(){
Iterator pancakeIterator =pancakeHouseMenu.createIterator();
Iterator dinerIterator = dinerMenu.createIterator();
Iterator cafeIterator =cafeMenu.createIterator();
我们使用这个咖啡厅的莱
System, out.println("MENU\n=---\nBREAKFAST");
单作为晚餐的莱单。想要
printMenu (pancakeIterator);
System.Out.println("\nLUNCH") ;
将莱单打印出来，我们
printMenu(dinerIterator);
只需将它传入printMenu（）
System.out.println("\nDINNER");
printMenu(cafeIterator);
就一切搞定！
private void printMenu(Iterator iterator) {
while (iterator.hasNext()){
MenuItem menuItem = (MenuItem) iterator.next() ;
这里不需要修啦。
System.out.print(menuItem.getName()+",");
System.out.print(menuItem.getPrice() + " =- ");
System.out.println(menuItem.getDescription ());
344
戛6冀
---
## Page 381
迭代器与组合模式
早餐、午餐和晚餐
让我们写一段程序来测试。
public class MenuTestDrive (
public static void main(String args[1l){
创建一个如啡厅莱单··…
PancakeHouseMenu pancakeHouseMenu = new
PancakeHouseMenu ();
DinerMenu dinerMenu = new DinerMenu () ;
CafeMenu cafeMenu=new CafeMenu();
C
…然后将它传给女招待
Waitress waitress = new Waitress(pancakeHouseMenu,(
dinerMenu,cafeMenu);
waitress.printMenu();
测试结果如下，看看新增的咖啡厅晚餐菜单部分！
java DinerMenuTestDrive
首先我们遍历热饼
MENU
莱单
K&B's Pancake Breakfast，2.99 --Pancakes with scrambled eggs，and toast
BREAKFAST
Regular Pancake Breakfast，2.99--
Pancakes with fried eggs,sausage
-Pancakes made with fresh blueberries
Waffles，3.59 --Waffles，with your choice of blueberries or strawberries
LUNCH
Vegetarian BLT,2.99--（Fakin')Bacon with 1ettuce&tomato on wholewheat
BLT,2.99--Bacon with lettuce 6 tomato on whole wheat
Hotdog，3.05--A hot dog,with saurkraut，relish,onions,topped with cheese
SteamedVeggies and Brown Rice，3.99-- Steamed vegetables over brown rice
最后是如啡厅
DINNER
莱单。进历代
Burrito，4.29-
lettuce,tomato,and fries
你现在的位置
345
---
## Page 382
我们做了什么？
我们做了什么？
Arraylist
我们想让女招待能够有一
个筒单的方式来逸历莱单
场
我们的菜单项有两个不同
Array
的实现和两个不同的遍历
接口。
…….而目我们不希望她知道
莱单项是如何实现的
我们将女招待解耦了·····
Arraylist有内置的选代器…….
Arraylist
为了让女招待遍历各种
…其中一个用来
所需对象组，我们给她
取得Araylist内的项
一个选代器…
next()
·…但是数组没有
Array
Tterato
内置进代器，所
两另一个用
以我们自己创建
来取得数组内的
O
一个。
next()
项目。
O
Fterator
PDG
现在她不再需要担心完竟我们使用哪一个实现：反正
她都是使用相同的接口—也就是选代器的接口一
来遍历莱单项。我们将女招待从实现中解耦了！
346
第9章
---
## Page 383
选代器与组合模式
·.··我们让女招待更具有扩展性
通过酸子她一个进代器，
我们很轻易地就加入了
我们将她从莱单项的实现
另一个莱单项的实现
中解耦了，所以今后我们
而且因为我们提供了进
可以轻易地增加新的莱单。
代器，所以女招待知道
Hashtable
如何处理这个新的莱单。
next()
K
这对她比较好，因为现在
Fterato
M
她能够使用相同代码来速
历任意组内的对象。这也
为这个Hashta6le
对我们比较好，因为我们
值制作一个送代