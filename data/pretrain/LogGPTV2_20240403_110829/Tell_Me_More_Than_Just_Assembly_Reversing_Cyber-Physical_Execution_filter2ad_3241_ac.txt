loops - A control algorithm may consist of iterative sequence
of calculations (e.g., for numerical optimization purposes or
matrix multiplications). These algorithms are implemented
using a (possibly big) loop as a part of a function. Once we
locate the loop in the function, our AST mapping analyses
focus on the identiﬁed loop, and marks the remaining of the
2Support for peripheral emulation in QEMU is an open research problem
and outside of the scope of this paper.
3A block diagram of the associated Kalman ﬁlter can be seen in Appendix A
354
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:51:23 UTC from IEEE Xplore.  Restrictions apply. 
c
i
t
e
m
h
t
i
r
A
s
n
o
i
t
c
u
r
t
s
n
i
)
d
e
t
c
e
p
s
n
i
(
r
e
f
s
n
a
r
t
a
t
a
D
s
n
o
i
t
c
u
r
t
s
n
i
)
d
e
t
c
e
p
s
n
i
t
o
n
(
c
i
t
e
m
h
t
i
r
A
s
n
o
i
t
c
u
r
t
s
n
i
)
d
e
t
c
e
p
s
n
i
(
…
0x90DE:  VMUL.F64
D6,  D6, D7
-> 0xc0175999f54482ee
0x90E2: VLDR
D7, [R7,#0x3C+var_2C]
-> 0x4028000000000000
0x90E6: VADD.F64
D7,  D6, D7 
-> 0x4018a6660abb7d12
0x90EA: LDR
R3,  =(off_1B0B8  - 0x1B000) 
Algorithm
output 
-> 0xb8
0x90EC:  LDR
R3,  [R4,R3] 
-> 0x1b620
0x90EE:  VSTR
D7, [R3,#0x10]
-> 0x4018a6660abb7d12 
…
0x9102: LDR
R3,  [R4,R3]
-> 0x1b258
0x9104: VLDR
D6, [R3,#0x28]
-> 0x3ff0000000000000
0x9108: VLDR
D7, [R7,#0x3C+var_24]
0x910C: VMUL.F64
-> 0x4020000000000000
D6,  D6, D7
-> 0x4020000000000000
0x9110: VLDR
D7, [R7,#0x3C+var_1C]
0x9114: VMUL.F64
-> 0x3fe5555555555555
D7,  D6, D7
-> 0x4015555555555555
0x9118: VLDR
D6, [R7,#0x3C+var_24]
0x911C:  VSUB.F64
-> 0x4020000000000000
D7,  D6, D7
-> 0x4005555555555556
…
Function’s 
last
arithmetic 
operation
Fig. 2: Last set of instructions, including the last arithmetic in-
structions, for the Kalman ﬁlter candidate function as well as the
associated data ﬂow analysis.
function as irrelevant.
Once MISMO selects one control ﬂow path, it uses dynamic
symbolic execution to generate the ﬁnal symbolic expression
for the algorithm. To identify the output value of the function
implementation, MISMO needs to locate the memory addresses
or registers associated with the program that stores the output
value of the function. To that end, MISMO ﬁrst identiﬁes
the ﬁnal arithmetic instruction to be the ﬁnal instruction that
updates the function’s output value.
Starting from the output values that are sent to the actuators
by the ﬁrmware, MISMO traverses the its execution trace
backward, and locates the last arithmetic instruction within
the candidate control algorithm subroutine that produces the
target output value. MISMO marks the ﬁrst memory address
or register after the identiﬁed arithmetic instruction that stores
the output value as the candidate output variable.
In Figure 2, we already know that the register D7 will hold
the ﬁnal symbolic output. To generate the symbolic expression
for the entire algorithm implementation, MISMO needs to also
symbolize the the associated input values. It is not sufﬁcient–
or even necessarily correct–to symbolize just the function’s
parameters. Therefore, we implemented backward slicing to
backtrace all related input variables. In the case of the Kalman
ﬁlter implementation, the symbolic inputs are generated from
global variables since there are no function parameters.
Once the output value and the associated input variables
are located and marked as symbolic, MISMO uses symbolic
execution to generate the symbolic output expression for the
algorithm implementation. The symbolic expression for the
Kalman ﬁlter candidate function is as follows: ((((Sym 15 ∗
(((Sym 12 ∗ Sym 11) ∗ Sym 13) + Sym 14))/((Sym 19 ∗
(Sym 15 ∗ (((Sym 12 ∗ Sym 11) ∗ Sym 13) + Sym 14))) +
Sym 16))∗(((
(Sym 3)∗
Sym 4) + ((Sym 0 ∗ Sym 1) + (Sym 18 ∗ Sym 2)))) +
(Sym 18 ∗ Sym 6))) − ((Sym 19 ∗ ((Sym 18 ∗ Sym 10) +
(Sym 7)∗Sym 8)+((Sym 5∗((
(cid:2)
(cid:2)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:4)(cid:8)(cid:9)(cid:10)(cid:11)(cid:10)(cid:10)(cid:12)(cid:13)(cid:14)(cid:15)(cid:16)(cid:4)(cid:6)(cid:12)(cid:10)(cid:17)(cid:15)(cid:18)
(cid:19)(cid:9)(cid:10)(cid:13)(cid:7)(cid:20)(cid:10)(cid:4)(cid:12)(cid:21)(cid:18)(cid:6)(cid:11)(cid:22)(cid:18)(cid:12)(cid:8)(cid:4)(cid:10)(cid:12)(cid:13)(cid:11)(cid:23)(cid:18)(cid:9)(cid:22)(cid:4)(cid:9)(cid:23)(cid:24)(cid:7)(cid:6)(cid:13)(cid:11)(cid:18)(cid:9)(cid:7)(cid:23)
Fig. 3: MISMO provides semantically rich information for the Kalman
ﬁlter binary program within the IDA Pro view.
(Sym 11 ∗ Sym 9))) + (Sym 17 ∗ Sym 18)))) + ((Sym 18 ∗
Sym 10) + (Sym 11 ∗ Sym 9))).
Before comparing the symbolic expression of the low-
level binary implementation with the associated algorithm’s
symbolic expression, MISMO will further simplify the sym-
bolic expression using the Z3 SMT solver [52]. Once Z3
has simpliﬁed the symbolic expression, MISMO then uses
SymPy [12] to generate the AST for the implementation’s
symbolic expression as well as the associated algorithm.
Once both ASTs are generated, MISMO compares the two
ASTs and determines if there is a mapping between the
variables of the implementation’s symbolic expression and the
algorithm’s symbolic expression.
Using Z3 satisﬁability checking, MISMO ﬁnally ensures a
one-to-one mapping between symbolic variables of the binary
executable and semantic variables (mathematical parameters
of the algorithm). MISMO then propagates the symbolic
variable’s semantic meaning throughout the binary code and
data segments using an IDA Pro plugin. MISMO adds the
discovered semantic information to the IDA Pro view of the
subroutine using our custom plugin. This allows an analyst
to incorporate MISMO’s analysis into the binary’s reverse
engineering project and can display critical information that
is relevant for security analyses and applications, e.g., ﬁne-
grained sensitive data protection.
Figure 3 shows the IDA Pro view of the Kalman ﬁlter
binary annotated with the extracted semantic information.
The left side of the ﬁgure shows the standard IDA Pro
view, while the right section displays the extracted semantic
355
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:51:23 UTC from IEEE Xplore.  Restrictions apply. 
information. This expedites the reverse engineering process
by providing semantic meaning to every instruction, register,
and area of memory of the program. Furthermore, we can
develop intuitions about the associated global information of
the program. For example, in the case of the Kalman ﬁlter,
MISMO discovered that there are at least four data structures.
V. EVALUATIONS
For the experiments, our main focus is to validate MISMO’s
main functionality (extracting semantic information from em-
bedded ﬁrmware binaries). We evaluated MISMO on a set
of real-world embedded applications, including drones, self-
driving automobiles, smart home devices, robotics, 3D print-
ers, as well as the embedded kernel controller4.
To the best of our knowledge, MISMO is the ﬁrst solution to
provide high-level semantic information about IoT controller
binaries, hence we cannot compare MISMO’s core capability
with any prior work. However, one potential use-case enabled
by MISMO is semantic comparison of the embedded controller
software binaries. Prior work has developed solutions to cal-
culate the similarities between any pair of functions based on
their syntactical features (e.g., number of basic blocks, instruc-
tions, etc.). MISMO can perform more in-depth application-
speciﬁc semantic similarity calculations. We compare how
accurately MISMO distinguish similar function binaries with
the solutions by the prior work, namely BINDIFF [19], BIN-
JUICE [34] and BLEX [21] (see Subsection V-B).
We demonstrate MISMO’s capabilities in a few use-cases
in the contexts of data type recovery, binary decompilation,
and ﬁne-grained sensitive data protection (Subsection V-C).
MISMO assumes the application’s source is unavailable (as in
third-party commercial software analysis settings). However,
for our accuracy results, we use the source code as the ground
truth to evaluate the correctness of MISMO’s outputs.
A. Real-world Embedded/IoT Firmware
We ﬁrst evaluated MISMO on ten representative real-world
applications from six domains, namely avionics, automotive,
smart homes, embedded Linux kernel, robotics, and 3D print-
ers. The applications are Crazyﬂie (Crazyﬂie Nano Quadcopter
Firmware), Ardupilot (Ardupilot is the most advanced autopi-
lot software), Px4fmu (PX4 Pro Drone Autopilot Firmware),
3DRsolo (3drobotics Ardupilot Solo), WoDCar (Microsoft The
Self Driving RC Car), PolySync (The Car Control Project
for an autonomous driving vehicle), Smart Home (Smart-
PID Smart
temperature and process controller: heating or
cooling), Linux kernel (Tmon A Monitoring and Testing
Tool for Linux kernel thermal subsystem), Robotics (ROS
- Ros arduino bridge is a ROS driver and base controller
for Arduino microcontrollers), 3D Printer (Marlin 3D Printer
Firmware for RepRap 3D printers).
For evaluation, we collect the ground truth by compiling
binaries with debugging information to validate MISMO’s
ﬁndings after it ﬁnishes its analyses. It is important to note that
MISMO does not utilize the ground truth during its analysis -
4Our empirical analysis showed that these real-world embedded applica-
tions used the standard control algorithms collected in our control algorithm
database. We do not assume our data set is complete, but it illustrates the
efﬁcacy of our tool alongside domain knowledge.
(cid:20)
(cid:28)
(cid:19)
(cid:1)
(cid:18)
(cid:6)
(cid:5)
(cid:14)
(cid:17)
(cid:6)
(cid:6)
(cid:2)
(cid:22)(cid:21)(cid:21)
(cid:25)(cid:24)
(cid:24)(cid:21)
(cid:23)(cid:24)
(cid:21)
(cid:2)(cid:13)(cid:13)(cid:10)(cid:9)(cid:6)(cid:5)(cid:16)(cid:9)(cid:12)(cid:11)(cid:15)
(cid:4)(cid:5)(cid:16)(cid:5)
(cid:3)(cid:12)(cid:7)(cid:8)
Fig. 4: Accuracy of data and code semantics discovery.
it is only used for evaluation purposes. In each case, our goal
was to locate the control algorithm implementation function
and extract the corresponding high-level algorithmic semantics
from the function’s binary code and data.
Individual application binaries consisted of several control
ﬂows that did not pertain to the core of the target control
algorithm. These control ﬂows typically correspond to input
validation, error checking, etc. as discussed in Section IV.
MISMO chose the control ﬂow paths that represented the
candidate function for each case. Although some of the
applications’ CFGs were immediately pruned to a single path,
a few of the applications still had multiple candidates left,
e.g., PX4fmu (drone controller) had four possible candidates.
PX4fmu was found to have four different control modes, each
having a slightly different algorithm implementation.
The accuracy of MISMO is deﬁned as the portion of the
inputs that has been semantically explained correctly,
i.e.,
the inputs have been mapped to their corresponding math-
ematical algorithm-level parameters. There are cases during
the semantic-matching process where two binary-level vari-
able’s arithmetic result match one semantic (algorithm-level)
parameter. In these cases, MISMO associates the values in
program memory with the semantic parameter’s tag. There are
also cases, where the symbolized inputs cannot be resolved
(mapped to their algorithm-level counterparts). For example,
MISMO was not able to associate two of the algorithm’s
semantic variables with any of the symbolized inputs of the
3DRsolo. This is due to the fact that there are too many
symbolized variables that confuses MISMO. For instance, to
compute a derivative value, the implementation intro-
duces three extra auxiliary variables.
Figure 4 shows MISMO’s accuracy for the applications from