engineering techniques [15, 27], to place “insiders” in the
victim and gain partial control over it. And then, in the
exﬁltration step, the “insiders” try to trafﬁc sensitive in-
formation from the victim back to the attackers. Because
the “insiders” usually would only have very limited con-
trol of the victim, their behaviors are subjected to strict
security surveillance, e.g., ﬁrewall, network intrusion de-
tection, trafﬁc logging, etc. Therefore, covert channels
become ideal choices for secret data transmissions under
such circumstances.
6.1.2 Achievable Bandwidth
Due to their very low channel capacities [18, 30], previ-
ous studies conclude that covert channels can only cause
very limited harms in a virtualized environment. How-
ever, the experimental results of our covert channel lead
us to a different conclusion that covert channels indeed
pose realistic and serious threats to information security
in the cloud.
With over 100 bits-per-second high speed and reliable
transmission, covert channel attacks can be applied to
a wide range of mass-data theft attacks. For example, a
hundred byte credit card data entry can be silently stolen
in less than 30 seconds; and a thousand byte private key
ﬁle can be secretly transmitted under 3 minutes. Work-
ing continuously, over 1 MB of data, equivalent to tens
of thousands of credit card entries or hundreds of private
key ﬁles, can be trafﬁcked every 24 hours.
6.1 Damage Assessment
6.1.3 Mitigation Difﬁculties
We extrapolate the threat of the memory bus covert
channel from four different aspects—attack scenario,
achievable bandwidth, mitigation difﬁculties, and cross-
platform applicability.
6.1.1 Attack Scenario
Covert channel attacks are distinct from a seemingly sim-
ilar threat, side channel attacks. Side channels extrap-
olate information by observing an unknowing sender,
while covert channels transfer data between two collab-
orating parities. As a result, a successful covert channel
attack requires an “insider” to function as a data source.
In addition to high channel capacity, the memory bus
covert channel has two other intriguing properties which
make it difﬁcult to be detected or prevented:
◦ Stealthiness: Because processor cache is not used as
channel medium, the memory bus covert channel in-
curs negligible impact on cache performance, mak-
ing it totally transparent to cache based covert chan-
nel detection, such as HomeAlone [31].
◦ “Future proof”: Our in-house experiment shows
that even on a platform that is one generation ahead
of Amazon EC2’s systems, the memory bus covert
channel continues to perform very well.
6.1.4 Cross-platform Applicability
Due to hardware availability, we have only evaluated
memory bus covert channels on the Intel x86 platforms.
On one hand, we make an intuitive inference that simi-
lar covert channels can also be established on the AMD
x86 platforms, since they share compatible speciﬁca-
tions on atomic instructions with the Intel x86 plat-
forms. On the other hand, the atomic instruction ex-
ploits may not be applicable on platforms that use al-
ternative semantics to guarantee operation atomicity. For
example, MIPS and several other platforms use the load-
linked/store-conditional paradigm, which does not result
in high memory bus contention as atomic instructions do.
6.2 Mitigation Techniques
The realistic threat of covert channel attacks calls for ef-
fective and practical countermeasures. We discuss sev-
eral plausible mitigation approaches from three different
perspectives—tenants, cloud providers, and device man-
ufactures.
6.2.1 Tenant Mitigation
Mitigating covert channels on the tenant side has the ad-
vantages of trust and deployment ﬂexibility. With the
implementation of mitigation techniques inside a ten-
ant owned VMs, the tenant has the conﬁdence of covert
channel security, regardless whether the cloud provider
addresses this issue.
However, due to the lack of lower level (hypervisor
and/or hardware) support, the available options are very
limited, and the best choice is performance anomaly de-
tection. Although not affecting the cache performances,
memory bus covert channels do cause memory perfor-
mance degradation. Therefore, an approach similar to
that of HomeAlone [31] could be taken. In particular,
the defender continuously monitors memory access la-
tencies, and asserts alarms if signiﬁcant anomalies are
detected. However, since memory accesses incur much
higher cost and non-determinism than cache probing, this
approach may suffer from high performance overhead
and high false positive rate.
6.2.2 Cloud Provider Mitigation
Compared to their tenants, cloud providers are much
more resourceful. They control not only the hypervisor
and hardware platform on a single system, but also the
entire network and systems in a data center. As a result,
cloud providers can tackle covert channels through either
preventative or detective countermeasures.
The preventative approaches, e.g., the dedicated in-
stances service provided by the Amazon EC2 cloud [1],
thwart covert channel attacks by eliminating the exploit-
ing factors of covert channels. As the signiﬁcant extra
service charge of the dedicated instance service reduces
its attractiveness, the “no-sharing” guarantee may be too
strong for covert channel mitigation. We envision a low
cost alternative solution that allows tenants to share sys-
tem resources in a controlled and deterministic manner.
For example, the cloud provider may deﬁne a policy that
each server might be shared by up to two tenants, and
each tenant could only have a predetermined neighbor.
Although this solution does not eliminate covert chan-
nels, it makes attacking arbitrary tenants in the cloud
very difﬁcult.
In addition to preventative countermeasures, cloud
providers can easily take the detective approach by im-
plementing low overhead detection mechanisms, be-
cause of their convenient access to the hypervisor and
platform hardware. For both cache and memory bus
covert channels, being able to generate observable per-
formance anomalies is the key to their success in data
transmission. However, modern processors have pro-
vided a comprehensive set of mechanisms to monitor and
discover performance anomalies with very low overhead.
Instead of actively probing cache or accessing memory,
cloud providers can leverage the hypervisor to infer the
presence of covert channels, by keeping track of the in-
crement rates of the cache miss counters or memory bus
lock counters [10]. Moreover, when suspicious activities
are detected, cloud providers can gracefully resolve the
potential threat by migrating suspicious VMs onto phys-
ically isolated servers. Without penalizing either the sus-
pect or the potential victims, the negative effects of false
positives are minimized.
6.2.3 Device Manufacture Mitigation
The defense approaches of both tenant and cloud
providers are only secondary in comparison to mitiga-
tion by the device manufactures, because the root causes
of the covert channels are imperfect isolation of the hard-
ware resources.
The countermeasures at the device manufacture side
are mainly preventative, and they come in various forms
of resource isolation improvements. For example, instead
of handling exotic atomic memory operations in hard-
ware and causing system-wide performance degradation,
the processor may be redesigned to trap these rare situ-
ations for the operating systems or hypervisors to han-
dle, without disrupting the entire system. A more general
solution is to tag all resource requests from guest VMs,
enabling the hardware to differentiate requests by their
owner VMs, and thereby limiting the scope of any per-
formance impact. While incurring high cost in hardware
upgrades, the countermeasures at the device manufacture
side are transparent to cloud providers and tenants, and
can potentially yield the lowest performance penalty and
overall cost compared to other mitigation approaches.
7 Conclusion and Future Work
Covert channel attacks in the cloud have been proposed
and studied. However, the threats of covert channels tend
to be down-played or disregarded, due to the low achiev-
able channel capacities reported by previous research. In
this paper, we presented a novel construction of high-
bandwidth and reliable cross–VM covert channels on the
virtualized x86 platform.
With a study on existing cache channel techniques, we
uncovered their application insufﬁciency and limitations
in a virtualized environment. We then addressed these
obstacles by designing a pure timing-based data trans-
mission scheme, and discovering the bus locking mech-
anism as a powerful covert channel medium. Leverag-
ing the memory bus covert channel, we further designed
a robust data transmission protocol. To demonstrate the
real-world exploitability of our proposed covert chan-
nels, we launched attacks on our testbed system and in
the Amazon EC2 cloud. Our experimental results show
that, contrary to previous research and common beliefs,
covert channel attacks in a virtualized environment can
achieve high bandwidth and reliable transmission. There-
fore, covert channels pose formidable threats to informa-
tion security in the cloud, and they must be carefully an-
alyzed and mitigated.
For the future work, we plan to explore various miti-
gation techniques we have proposed. Especially, we view
the countermeasures at the cloud provider side a highly
promising ﬁeld of research. Not only do cloud providers
have control of rich resources, they also have strong in-
centive to invest in covert channel mitigation, because
ensuring covert channel security gives them a clear edge
over their competitors.
References
[1] Amazon Web Services.
icated instances.
dedicated-instances/.
Amazon EC2 ded-
http://aws.amazon.com/
communications security (CCS’04), pages 178–
187, 2004.
[4] C. Cowan, C. Pu, D. Maier, H. Hintony, J. Walpole,
P. Bakke, S. Beattie, A. Grier, P. Wagle, and
Q. Zhang. StackGuard: automatic adaptive detec-
tion and prevention of buffer-overﬂow attacks. In
Proceedings of the 7th conference on USENIX Se-
curity Symposium, pages 63–78, 1998.
[5] Department of Defense. TCSEC: Trusted com-
puter system evaluation criteria. Technical Report
5200.28-STD, U.S. Department of Defense, 1985.
[6] J. W. Gray III. On introducing noise into the
bus-contention channel.
In Proceedings of the
1993 IEEE Symposium on Security and Privacy
(S&P’93), pages 90–98, 1993.
[7] J. W. Gray III. Countermeasures and tradeoffs for
a class of covert timing channels. Technical report,
Hong Kong University of Science and Technology,
1994.
[8] W. Hu. Reducing timing charmers with fuzzy time.
In Proceedings of the 1991 IEEE Symposium on Se-
curity and Privacy (S&P’91), pages 8–20, 1991.
[9] W. Hu. Lattice scheduling and covert channels. In
Proceedings of the IEEE Symposium on Security
and Privacy (S&P’92), pages 52–61, 1992.
[10] Intel. The Intel 64 and IA-32 architectures soft-
ware developer’s manual. http://www.intel.
com/products/processor/manuals/.
[11] J. Kong, O. Aciicmez, J.-P. Seifert, and H. Zhou.
Hardware-software integrated approaches to de-
fend against software cache-based side channel at-
tacks.
In Proceedings of the IEEE 15th Interna-
tional Symposium on High Performance Computer
Architecture (HPCA’09), pages 393–404, 2009.
[12] B. W. Lampson. A note on the conﬁnement prob-
lem. Communications of the ACM, 16:613–615,
1973.
[2] S. Bugiel, S. N¨urnberger, T. P¨oppelmann, A.-R.
Sadeghi, and T. Schneider. AmazonIA: when elas-
ticity snaps back. In Proceedings of the 18th ACM
conference on Computer and communications se-
curity (CCS’11), pages 389–400, 2011.
[3] S. Cabuk, C. E. Brodley, and C. Shields. IP covert
timing channels: design and detection. In Proceed-
ings of the 11th ACM conference on Computer and
[13] F. G. G. Meade. A guide to understanding covert
channel analysis of trusted systems. Manual
NCSC-TG-030, U.S. National Computer Security
Center, 1993.
[14] D. G. Murray, S. H, and M. A. Fetterman. Satori:
Enlightened page sharing.
In Proceedings of the
USENIX Annual Technical Conference (ATC’09),
pages 1–14, 2009.
[27] I. S. Winkler and B. Dealy.
Information security
technology?...don’t rely on it: a case study in social
engineering. In Proceedings of the 5th conference
on USENIX UNIX Security Symposium, pages 1–5,
1995.
[28] J. Winkler and J. Munn. Standards and architec-
ture for token-ring local area networks. In Proceed-
ings of 1986 ACM Fall joint computer conference
(ACM’86), pages 479–488, 1986.
[29] XenSource. Xen credit scheduler. http://wiki.
xensource.com/xenwiki/CreditScheduler.
[30] Y. Xu, M. Bailey, F.
Jahanian, K.
Joshi,
M. Hiltunen, and R. Schlichting.
An explo-
ration of L2 cache covert channels in virtualized
environments.
In Proceedings of the 3rd ACM
workshop on Cloud computing security workshop
(CCSW’11), pages 29–40, 2011.
[31] Y. Zhang, A. Juels, A. Oprea, and M. K. Reiter.
Homealone: Co-residency detection in the cloud
via side-channel analysis.
In Proceedings of the
2011 IEEE Symposium on Security and Privacy
(S&P’11), pages 313–328, 2011.
[15] G. L. Orgill, G. W. Romney, M. G. Bailey, and
P. M. Orgill. The urgency for effective user privacy-
education to counter social engineering attacks on
secure computer systems.
In Proceedings of the
5th conference on Information technology educa-
tion (CITC5’04), pages 177–181, 2004.
[16] C. Percival. Cache missing for fun and proﬁt. In
Proceedings of the BSDCan 2005, 2005.
[17] I. S. Reed and G. Solomon. Polynomial codes over
certain ﬁnite ﬁelds. Journal of the Society for In-
dustrial and Applied Mathematics, 8(2):300–304,
1960.
[18] T. Ristenpart, E. Tromer, H. Shacham, and S. Sav-
age. Hey, you, get off of my cloud: exploring in-
formation leakage in third-party compute clouds.
In Proceedings of the 16th ACM conference on
Computer and communications security (CCS’09),
pages 199–212, 2009.
[19] C. H. Rowland. Covert channels in the TCP/IP pro-
tocol suite. First Monday, 2, 1997.
[20] G. Shah and M. Blaze. Covert channels through
external
the
3rd USENIX conference on Offensive technologies
(WOOT’09), pages 1–7, 2009.
In Proceedings of
interference.
[21] G. Shah, A. Molina, and M. Blaze. Keyboards and
covert channels. In Proceedings of the 15th confer-
ence on USENIX Security Symposium, pages 59–
75, 2006.
[22] K. Suzaki, K. Iijima, T. Yagi, and C. Artho. Soft-
ware side channel attack on memory deduplication.
page Poster, 2011.
[23] T. V. Vleck. Timing channels. Poster session, IEEE
TCSP conference, 1990.
[24] Z. Wang and R. B. Lee. Covert and side channels
due to processor architecture.
In Proceedings of
the 22nd Annual Computer Security Applications
Conference (ACSAC’06), pages 473–482, 2006.
[25] Z. Wang and R. B. Lee. A novel cache archi-
tecture with enhanced performance and security.
In Proceedings of the 41st annual IEEE/ACM In-
ternational Symposium on Microarchitecture (MI-
CRO’41), pages 83–93, 2008.
[26] J. Wei, X. Zhang, G. Ammons, V. Bala, and
P. Ning. Managing security of virtual machine im-
ages in a cloud environment. In Proceedings of the
2009 ACM workshop on Cloud computing security
(CCSW’09), pages 91–96, 2009.