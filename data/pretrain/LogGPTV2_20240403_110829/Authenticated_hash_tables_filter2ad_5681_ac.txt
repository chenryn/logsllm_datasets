integers and N be a (w + 1)-bit RSA modulus with w =
Θ(k). Given a set of elements E and h, the probability that a
computationally bounded adversary A, knowing only N and
g, can ﬁnd A and x /∈ E such that Ar(x) = f (E) is neg(k).
Note that we need to use prime representatives in order to
avoid collisions, as observed in [2]. We now continue with the
security deﬁnition of a membership authentication scheme,
which captures the security requirements of the hash table
authenticated data structure.
Security. Suppose S is a set we wish to authenticate mem-
bership in (essentially to authenticate the correctness of
queries of type “does x belong to S?”) and let pk be the
public key. The adversary is given oracle access to all the al-
gorithms for updating and querying S and also for verifying
answers. In general, these algorithms are:
1. {S′, d′} ← update(upd, S), where d′ is the new digest
of S after the update (we recall that the digest of S
is a short description of S, e.g., the root hash of a
Merkle tree), upd is an update supported by the data
structure and S, S′ are the old and new (updated) sets
respectively;
2. Π(x) ← query(x), where Π(x) is the proof returned to
a query for an element x;
3. {accept, reject} ← verify(x, Π(x), d), where d is the cur-
rent digest of S and Π(x) is the proof, both used for
verifying membership of x in S.
The formal security deﬁnition for a membership authentica-
tion scheme of a set S is as follows:
Definition 3
(Security). Suppose k is the security
parameter and A is a computationally bounded adversary
that is given the public key pk. Our set S initially is empty
and S = S0. The adversary A chooses and issues an update
updi ∈ {ins(xi), del(xi)} in the set Si for i = 0, . . . , t and
therefore computes {Si+1, di+1} ← update(updi, Si) where
d0 is deﬁned to be the state (digest) of an empty set and t is
polynomially dependent on the security parameter k. After
that stage (update stage) the adversary has produced St+1
and dt+1. Then he enters the attack stage where he chooses
an element y /∈ St+1 and computes a proof Π(y). We say that
the authentication scheme for set membership is secure if the
probability that accept ← verify(y, Π(y), dt+1) is neg(k).
Note that the above security deﬁnition captures the notion
of an adversary that tries to forge proofs for elements that do
not belong to the existing set. Also we provide the adversary
with the ﬂexibility to do his own updates and choose his
own elements to forge. Note that this security deﬁnition is
applicable to both models (two-party/three-party).
Finally, we describe the setup phase of our schemes, where
we will see why w = Θ(k) (in Lemma 2 and Corollary 2).
System Setup. Let k be the security parameter. In the two-
party model, the client initially picks constants 0  1/ǫ, and also picks l = ⌈1/ǫ⌉ RSA moduli Ni =
piqi (i = 1, . . . , l), where pi, qi are strong primes [6]. The
length of the RSA modulus Ni, |Ni|, is deﬁned by the re-
cursive relation |Ni+1| = 3|Ni| + 1, where |N1| = 3k + 1 and
i = 1, . . . , l − 1. Note that since l is constant all the RSA
moduli have asymptotically the same dependence on the se-
curity parameter k. The client reveals Ni (i = 1, . . . , l) to the
untrusted server but keeps φ(Ni) = (pi − 1)(qi − 1) secret.
The client also picks l public bases gi ∈ QRNi to be used
for exponentiation. Finally, given l families of two-universal
hash functions H1, H2, . . . , Hl, the client randomly picks one
function hi ∈ Hi and reveals hi to the server who will be us-
ing that function to compute multiple prime representatives.
The function hi is such that it maps (|Ni| − 1)-bit primes
to ((|Ni| − 1)/3)-bit integers. For the three-party model the
setup is exactly the same with the diﬀerence that the source
now knows everything (and picks the RSA moduli and two-
universal hash functions himself) that the untrusted servers
know and also φ(Ni). Note that it is very important not to
reveal φ(Ni) to the untrusted entities, since if we do, the se-
curity of the whole system collapses, as they would be able
in this way to compute inverses and forge proofs. Note that
since 1/ǫ is constant, the client needs constant space.
The choice of the domains and ranges of functions hi and
of the lengths of moduli Ni is due to the fact that the prime
representatives that we use should be less than the respective
moduli (see [30]). This will be clear in the description of
our main construction in Section 3. Finally note that, using
ideas from [2], it is possible to avoid the increasing size of the
moduli and instead use only one size for all Ni’s. By doing
so, however, we are forced to prove security in the random
oracle model (using cryptographic hash functions), which is
ﬁne for practical applications (see Section 5).
3. BASE CONSTRUCTION
In this section we describe the main construction for au-
thenticating set-membership in a hash table. Initially we
present a general scheme which can be extended in order
to achieve better complexity bounds for the hash table.
3.1 The RSA Tree
Let 0  1), N (v) is the set of children of node v
and gi ∈ QRNi .
Definition 4. Given a set S = {e1, e2, . . . , en} of n el-
ements, l RSA moduli N1, N2, . . . , Nl, l two-universal func-
tions h1, h2, . . . , hl and the RSA tree T (ǫ) built on top of
them, we deﬁne the RSA digest χ(S) of the set S to be equal
to χ(r), where r is the root of the tree T (ǫ).
Note that, given a set S, the RSA digest χ(S) depends on the
elements in S and the used RSA moduli and two-universal
functions, but not on the structure of the tree, because the
structure of T (ǫ), for a given ǫ, is deterministic and the RSA
exponentiation function is quasi-commutative. For simplic-
ity, we use both χ(Sv) and χ(v) to denote the RSA digest of
node v, Sv being the set of elements contained in the subtree
rooted at node v. We next show the main security property
of our new authentication structure.
Theorem 2
(Collision Resistance). Let k be the se-
curity parameter and S1 = {e1, e2, . . . , en} a set of n ele-
ments. Given the associated RSA tree T1(ǫ) built on top of
S1, under the strong RSA assumption, the probability that
a computationally bounded adversary A, knowing only the
RSA moduli Ni and gi, 1 ≤ i ≤ l (l = ⌈1/ǫ⌉), can ﬁnd
another set S2 6= S1 such that χ(S1) = χ(S2) is neg(k).
Proof: (Sketch.) Suppose the adversary A has found an-
other set S2 6= S1 on which A has built a tree T2(ǫ) (ǫ is
ﬁxed) such that χ(S2) = χ(S1). We apply Lemma 2 for all
levels and prove that the probability of ﬁnding a collision at
the last level of the tree is bounded by a negligible function.
We defer the complete proof to the full version of the paper.
2
3.2 Authenticating Static Sets
We now describe how we can use the RSA tree authenti-
cation structure to optimally verify membership in a static
set in constant time. The following methods form the basis
for our main authentication schemes in the next section.
Let S = {e1, e2, . . . , en} be the static set that is out-
sourced to an untrusted server. As we saw in Section 2 (sys-
tem setup), the RSA moduli Ni and bases gi, 1 ≤ i ≤ l,
are public. The server stores set S and builds the RSA tree
T (ǫ) on top of S. For every node v of T (ǫ) that lies at level
i (0 ≤ i ≤ l − 1), the server also stores the prime representa-
tive ri+1(Sv) that has been computed for this subtree using
function hi+1. The client stores only the set digest d = χ(S).
Queries. We describe the algorithm that the server runs for
constructing a proof needed to validate an element x ∈ S.
Let v0, v1, . . . , vl be the path from x to the root of T (ǫ),
r = vl. Let B(v) denote the set of siblings of node v in
T (ǫ). The proof Π(x) is the ordered sequence π1, π2, . . . , πl,
where πi is a tuple of a prime representative and a “branch”
witness, i.e., a witness that authenticates the missing node
of the path from the queried node to the root of the tree, vl.
Thus, item πi of proof Π(x) (i = 1, . . . , l) is deﬁned as:
πi = (cid:16)ri(χ(vi)), gQ u∈B(vi) ri(χ(u))
For simplicity, we set αi = ri(χ(vi)) and
i
mod Ni(cid:17) .
βi = gQ u∈B(vi) ri(χ(u))
i
mod Ni.
(2)
(3)
Clearly, the size of the proof is O(1), since l = ⌈ 1
ǫ ⌉. For
example in Figure 1, the proof for element 2 consists of 3
tuples:
1
mod N1(cid:17) ,
π1 = (cid:16)r1(2), gr1(7)r1(9)r1(3)
π2 = (cid:16)r2(χ(a)), gr2(χ(b))r2(χ(c))r2(χ(d))
π3 = (cid:16)r3(χ(f )), gr3(χ(e))r3(χ(g))r3(χ(p))
2
3
mod N2(cid:17) ,
mod N3(cid:17) .
Note that, as we are considering the static case, it is more
time-eﬃcient to use precomputed witnesses.
Veriﬁcation. Given the proof Π(x) = π1, π2, . . . , πl for an
element x, the client veriﬁes the membership of x in S as
follows. First the client checks if h1(α1) = x (α1 is the prime
representative used for the queried element x); then, for i =
2, . . . , l, the client veriﬁes that the following relations hold:
hi(αi) = βαi−1
i−1 mod Ni−1.
(4)
Also, the client veriﬁes the global RSA digest against the lo-
cally stored digest, namely that the following relation holds:
d = βαl
l
mod Nl.
(5)
The client accepts only if all the relations above hold. As we
prove later, the server can forge a proof for an element y /∈ S
with negligible probability in the security parameter k.
Security. The public key pk in our scheme (see Deﬁnition 3)
consists of l = ⌈ 1
ǫ ⌉, the RSA moduli N1, N2, . . . , Nl (not
φ(Ni)), the exponentiation bases g1, g2, . . . , gl and the two-
universal functions h1, h2, . . . , hl. Also the adversary is given
oracle access to all the algorithms that update and query the
RSA tree and also verify queries. The digest d that appears
in Deﬁnition 3 is the root digest of the RSA tree. Also, for
an element x, Π(x) is the set of branch witnesses as deﬁned
in Equation 3. The following theorem describes the security
of our new construction. The security of our scheme is based
on the strong RSA assumption.
Theorem 3. Our scheme that uses the RSA tree for au-
thenticating a static set of n elements is secure under the
strong RSA assumption and according to Deﬁnition 3.
i−1 mod Ni−1 for i = 2, . . . , l and βαl
Proof: (Sketch.) Suppose the adversary A has found a mem-