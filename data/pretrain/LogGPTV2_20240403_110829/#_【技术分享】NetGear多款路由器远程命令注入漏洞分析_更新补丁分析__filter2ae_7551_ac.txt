              }
              setenv("REQUEST_METHOD", (const char *)&v53, 1);
              if ( acosNvramConfig_match((int)&unk_F0378, (int)"2") )
              {
                v30 = getenv("REQUEST_METHOD");
                printf("rn###############%s(%d)REQUEST_METHOD=%srn", "netgear_commonCgi", 144, v30);
              }
              if ( (_BYTE)v47 )
                setenv("QUERY_STRING", (const char *)&v47, 1);
              if ( !strcmp((const char *)&v53, "POST") )
              {
                v31 = fopen("/tmp/post_result", "r");
                if ( v31 )
                {
                  fclose(v31);
                  system((const char *)&unk_F05D8);
                  if ( acosNvramConfig_match((int)&unk_F0378, (int)"2") )
                    puts("rn##########del post ############r");
                }
                system("rm -f /tmp/post_data.txt");
                sleep(1u);
                v32 = fopen("/tmp/post_data.txt", "w");
                if ( v32 )
                {
                  fputs(v4, v32);
                  fclose(v32);
                }
                v33 = (const char *)&unk_F062B;
                v34 = (char *)&v45;
              }
              else if ( !strcmp((const char *)&v53, "OPTIONS") )
              {
                v35 = fopen("/tmp/options_result", "r");
                if ( v35 )
                {
                  fclose(v35);
                  system("rm -f /tmp/options_result");
                  if ( acosNvramConfig_match((int)&unk_F0378, (int)"2") )
                    puts("rn##########del option ############r");
                }
                v33 = (const char *)&unk_F06A2;
                v34 = (char *)&v45;
              }
              else
              {
                v36 = fopen("/tmp/cgi_result", "r");
                if ( v36 )
                {
                  fclose(v36);
                  system("rm -f /tmp/cgi_result");
                  if ( acosNvramConfig_match((int)&unk_F0378, (int)"2") )
                    puts("rn##########delete /tmp/cgi_result ############r");
                }
                v33 = (const char *)&unk_F070F;
                v34 = (char *)&v45;
              }
              sprintf(v34, v33, &v50);
              system((const char *)&v45);//key！！！
              memset(&v49, 0, 0x40u);
              memset(&v48, 0, 0x40u);
              memset(&v51, 0, 0x20u);
              memset(&v52, 0, 0x10u);
              if ( acosNvramConfig_match((int)&unk_F0378, (int)"1") )
                printf("rn###############%s(%d)rn", "netgear_commonCgi", 200);
              if ( !strcmp((const char *)&v53, "POST") )
              {
                v37 = "/tmp/post_result";
              }
              else if ( !strcmp((const char *)&v53, "OPTIONS") )
              {
                v37 = "/tmp/options_result";
              }
              else
              {
                v37 = "/tmp/cgi_result";
              }
              v38 = fopen(v37, "r");
              if ( v38 )
              {
                if ( acosNvramConfig_match((int)&unk_F0378, (int)"1") )
                  printf("rn###############%s(%d)rn", "netgear_commonCgi", 211);
                while ( fgets((char *)&v44, 0xFFFF, v38) )
                {
                  if ( acosNvramConfig_match((int)&unk_F0378, (int)"1") )
                    printf("rn###############%s(%d)rn", "netgear_commonCgi", 215);
                  v39 = strstr((const char *)&v44, "Status:");
                  if ( v39 )
                  {
                    strcpy((char *)&v49, v39 + 7);
                    v40 = strchr((const char *)&v49, 10);
                    if ( v40 )
                      *v40 = 0;
                    if ( acosNvramConfig_match((int)&unk_F0378, (int)"2") )
                      printf("rn###############%s(%d)status=%srn", "netgear_commonCgi", 223, &v49);
                    sprintf((char *)&v43, "HTTP/1.1%srn", &v49);
                  }
                  else
                  {
                    strcat((char *)&v43, (const char *)&v44);
                  }
                }
                fclose(v38);
              }
              strcat((char *)&v43, "rn");
              if ( acosNvramConfig_match((int)&unk_F0378, (int)"1") )
                printf("rn###############%s(%d)http_hdr=%srn", "netgear_commonCgi", 276, &v43);
              v41 = strlen((const char *)&v43);
              sub_F9E0(v5, &v43, v41, 0);
              if ( acosNvramConfig_match((int)&unk_F0378, (int)"2") )
                printf("rn######======######%s(%d)rn", "netgear_commonCgi", 280);
              v10 = 0;
    LABEL_101:
              exit(v10);
            }
            v26 = "OPTIONS";
            v27 = (char *)&v53;
          }
        }
        else
        {
          v26 = "GET";
          v27 = (char *)&v53;
        }
        strcpy(v27, v26);//key！
        goto LABEL_47;
      }
      if ( v8 > 0 )
        waitpid(v8, &v54, 0);
      return 0;
    }
**  
**
**0x05 补丁对比**
NetGear官方在12月14日更新了部分设备的Beta版固件，用来修补这个漏洞，对应设备如下：
链接：
我对这次更新补丁进行了对比分析，发现此次更新主要是针对httpd进行了修补。通过Bindiff进行对比分析。
右侧是补丁前，在之前的分析中，补丁前的函数是sub_36C34，补丁后变成了sub_35EB4，可以看到右侧标红部分修补的位置还是挺多的，接下来查看一下修补的结构，发现在函数入口处有较大不同。
通过Zoom to block查看详细的汇编代码，发现补丁后的httpd，在函数入口处会多出几个strchr判断语句，之后才是fork。
我们通过IDA pro直接跟踪到伪代码部分，结合我之前的分析，可以看到，在v6赋值为a3，也就是exp的url之后，会进行 一些strchr比较。
    int __fastcall sub_36EB4(const char *a1, int a2, const char *a3, int a4)
      v4 = a1;
      v5 = a2;
      v6 = a3;
      v7 = a4;
      if ( !strchr(a3, 59) && !strchr(v6, 96) && !strchr(v6, 36) && !strstr(v6, "..") )
      {
        v8 = fork();
        v9 = v8;
        if ( !v8 )
        {
          if ( fork() )
          {
            v10 = v9;
            goto LABEL_114;
          }
          memset(&v47, 0, 0xFFFFu);
比较的内容就是59、96、36的asii码以及..，59对应的字符是“;”，96对应的字符是“`”，36对应的字符是“$”，如果url里包含这些字符之一的话，则不会进入下面的处理，以此来修补之前exp中;killall$IFS`httpd`带来的命令注入攻击。我个人感觉官网的修复不走心，经过我刚才的分析，发现Beta版固件过滤只针对了;,$,'以及..这四个字符，只过滤了[command];[command]这种情况，并对之后的$IFS等内容进行了过滤，但命令执行拼接也可以通过[command]&&[command]，和[command]||[command]方法完成，只是后面拼接的命令进行了一定限制，因此我感觉还有可能存在命令注入漏洞。
**0x06 解决方案(针对漏洞版本)**
**临时方案 :**
1.在路由器中禁用远程管理功能
2.指定特定内网IP可以通过WEB方式访问并管理路由器
3.利用这个漏洞，执行关闭WEB服务的命令，不会影响正常上网，但无法使用管理界面，重启路由器后WEB服务可重新启用。命令如下：
    http://[router-address]/cgi-bin/;killall$IFS'httpd'
4.如果必要，也可以参照CERT官方建议停止使用该路由器，直到官方发布补丁修复。