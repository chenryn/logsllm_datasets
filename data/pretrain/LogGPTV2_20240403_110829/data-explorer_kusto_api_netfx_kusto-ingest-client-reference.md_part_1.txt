---
title:  Kusto.Ingest client interfaces and factory classes
description: This article describes Kusto.Ingest client interfaces and factory classes in Azure Data Explorer.
ms.reviewer: ohbitton
ms.topic: reference
ms.date: 05/19/2020
---
# Kusto.Ingest client interfaces and classes
The main interfaces and classes in the Kusto Ingest .NET library are:
* [Interface IKustoIngestClient](#interface-ikustoingestclient): The main ingestion interface
* [Class ExtendedKustoIngestClient](#class-extendedkustoingestclient): Extensions to the main ingestion interface
* [class KustoIngestFactory](#class-kustoingestfactory): The main factory for ingestion clients
* [class KustoIngestionProperties](#class-kustoingestionproperties): Class used to provide common ingestion properties
* [class SourceOptions](#class-sourceoptions): Source data handling options
* [class IngestionMapping](#class-ingestionmapping): Class used to describe the data mapping for the ingestion
* [Enum DataSourceFormat](#enum-datasourceformat): Supported data source formats. For example, CSV or JSON.
* [Interface IKustoQueuedIngestClient](#interface-ikustoqueuedingestclient): Interface describing operations that apply for queued ingestion only
* [Class KustoQueuedIngestionProperties](#class-kustoqueuedingestionproperties): Properties that apply to queued ingestion only
> [!NOTE]
> This information applies specifically to the .NET client library. Different [client libraries](../client-libraries.md) may have variations in their available interfaces and classes. For a broader understanding of Kusto Ingest across all client libraries,  see [Kusto Ingest overview](about-kusto-ingest.md).
## Interface IKustoIngestClient
* IngestFromDataReaderAsync
* IngestFromStorageAsync
* IngestFromStreamAsync
```csharp
public interface IKustoIngestClient : IDisposable
{
    /// 
    /// Ingests data from .  will be closed when the call completes.
    /// 
    /// The  data source to ingest. Only the first record set will be used
    /// Additional properties to be used during the ingestion process
    /// Options for the  ingestion source. This is an optional parameter
    /// An  task
    Task IngestFromDataReaderAsync(IDataReader dataReader, KustoIngestionProperties ingestionProperties, DataReaderSourceOptions sourceOptions = null);
    /// 
    /// Ingest data from one of the supported storage providers. Currently the supported providers are: File System, Azure Blob Storage.
    /// 
    /// The URI of the storage resource to be ingested. Note: This URI may include a storage account key or shared access signature (SAS).
    ///  See  for the URI format options.
    /// Additional properties to be used during the ingestion process
    /// Options for the storage ingestion source. This is an optional parameter
    /// An  task
    Task IngestFromStorageAsync(string uri, KustoIngestionProperties ingestionProperties, StorageSourceOptions sourceOptions = null);
    /// 
    /// Ingest data from .
    /// 
    /// The  data source to ingest
    /// Additional properties to be used during the ingestion process
    /// Options for the  ingestion source. This is an optional parameter
    /// An  task
    Task IngestFromStreamAsync(Stream stream, KustoIngestionProperties ingestionProperties, StreamSourceOptions sourceOptions = null);
}
```
## Class ExtendedKustoIngestClient
* IngestFromSingleBlob - Deprecated. Use `IKustoIngestClient.IngestFromStorageAsync` instead.
* IngestFromSingleBlobAsync - Deprecated. Use `IKustoIngestClient.IngestFromStorageAsync` instead.
* IngestFromDataReader - Deprecated. Use `IKustoIngestClient.IngestFromDataReaderAsync` instead.
* IngestFromDataReaderAsync
* IngestFromSingleFile - Deprecated. Use `IKustoIngestClient.IngestFromStorageAsync` instead.
* IngestFromSingleFileAsync - Deprecated. Use `IKustoIngestClient.IngestFromStorageAsync` instead.
* IngestFromStream - Deprecated. Use `IKustoIngestClient.IngestFromStreamAsync` instead.
* IngestFromStreamAsync
```csharp
public static class ExtendedKustoIngestClient
{
    /// 
    /// Ingest data from a single data blob
    /// 
    /// The ingest client that will execute the ingestions
    /// The URI of the blob will be ingested
    /// Indicates if the source blob should be deleted after a successful ingestion
    /// Additional properties to be used during the ingestion process
    /// The uncompressed raw data size
    /// 
    public static IKustoIngestionResult IngestFromSingleBlob(this IKustoIngestClient client, string blobUri, bool deleteSourceOnSuccess, KustoIngestionProperties ingestionProperties, long? rawDataSize = null);
    /// 
    /// Ingest data from a single data blob asynchronously
    /// 
    /// The ingest client that will execute the ingestions
    /// The URI of the blob will be ingested
    /// Indicates if the source blob should be deleted after a successful ingestion
    /// Additional properties to be used during the ingestion process
    /// The uncompressed raw data size
    /// An  task
    public static Task IngestFromSingleBlobAsync(this IKustoIngestClient client, string blobUri, bool deleteSourceOnSuccess, KustoIngestionProperties ingestionProperties, long? rawDataSize = null);
    /// 
    /// Ingest data from a single data blob
    /// 
    /// The ingest client that will execute the ingestions
    ///  representing the blobs that will be ingested
    /// Indicates if the source blob should be deleted after a successful ingestion
    /// Additional properties to be used during the ingestion process
    /// The uncompressed raw data size
    /// 
    public static IKustoIngestionResult IngestFromSingleBlob(this IKustoIngestClient client, BlobDescription blobDescription, bool deleteSourceOnSuccess, KustoIngestionProperties ingestionProperties, long? rawDataSize = null);
    /// 
    /// Ingest data from a single data blob asynchronously
    /// 
    /// The ingest client that will execute the ingestions
    ///  representing the blobs that will be ingested
    /// Indicates if the source blob should be deleted after a successful ingestion
    /// Additional properties to be used during the ingestion process
    /// The uncompressed raw data size
    /// An  task
    public static Task IngestFromSingleBlobAsync(this IKustoIngestClient client, BlobDescription blobDescription, bool deleteSourceOnSuccess, KustoIngestionProperties ingestionProperties, long? rawDataSize = null);
    /// 
    /// Ingest data from , which is closed and disposed of upon call completion
    /// 
    /// The ingest client that will execute the ingestions
    /// The data to ingest (only the first record set will be used)
    /// Additional properties to be used during the ingestion process
    /// 
    public static IKustoIngestionResult IngestFromDataReader(this IKustoIngestClient client, IDataReader dataReader, KustoIngestionProperties ingestionProperties);
    /// 
    ///  Asynchronously ingest data from , which is closed and disposed of upon call completion
    /// 
    /// The ingest client that will execute the ingestions
    /// The data to ingest (only the first record set will be used)
    /// Additional properties to be used during the ingestion process
    /// An  task
    public static Task IngestFromDataReaderAsync(this IKustoIngestClient client, IDataReader dataReader, KustoIngestionProperties ingestionProperties);
    /// 
    /// Ingest data from , which is closed and disposed of upon call completion
    /// 
    /// The ingest client that will execute the ingestions
    /// Represents the data to ingest (only the first record set will be used)
    /// Additional properties to be used during the ingestion process
    /// 
    public static IKustoIngestionResult IngestFromDataReader(this IKustoIngestClient client, DataReaderDescription dataReaderDescription, KustoIngestionProperties ingestionProperties);
    /// 
    ///  Asynchronously ingest data from , which is closed and disposed of upon call completion
    /// 
    /// The ingest client that will execute the ingestions
    /// Represents the data to ingest (only the first record set will be used)
    /// Additional properties to be used during the ingestion process
    /// An  task
    public static Task IngestFromDataReaderAsync(this IKustoIngestClient client, DataReaderDescription dataReaderDescription, KustoIngestionProperties ingestionProperties);
    /// 
    /// Ingest data from a single file
    /// 
    /// The ingest client that will execute the ingestions
    /// Absolute path of the source file to be ingested
    /// Indicates if the source file should be deleted after a successful ingestion
    /// Additional properties to be used during the ingestion process
    /// 
    public static IKustoIngestionResult IngestFromSingleFile(this IKustoIngestClient client, string filePath, bool deleteSourceOnSuccess, KustoIngestionProperties ingestionProperties);
    /// 
    /// Ingest data from a single file asynchronously
    /// 
    /// The ingest client that will execute the ingestions
    /// Absolute path of the source file to be ingested
    /// Indicates if the source file should be deleted after a successful ingestion
    /// Additional properties to be used during the ingestion process
    /// An  task
    public static Task IngestFromSingleFileAsync(this IKustoIngestClient client, string filePath, bool deleteSourceOnSuccess, KustoIngestionProperties ingestionProperties);
    /// 
    /// Ingest data from a single file
    /// 
    /// The ingest client that will execute the ingestions
    ///  representing the file that will be ingested
    /// Indicates if the source file should be deleted after a successful ingestion
    /// Additional properties to be used during the ingestion process
    /// 
    public static IKustoIngestionResult IngestFromSingleFile(this IKustoIngestClient client, FileDescription fileDescription, bool deleteSourceOnSuccess, KustoIngestionProperties ingestionProperties);
    /// 
    /// Ingest data from a single file asynchronously
    /// 
    /// The ingest client that will execute the ingestions
    ///  representing the file that will be ingested
    /// Indicates if the source file should be deleted after a successful ingestion
    /// Additional properties to be used during the ingestion process
    /// An  task
    public static Task IngestFromSingleFileAsync(this IKustoIngestClient client, FileDescription fileDescription, bool deleteSourceOnSuccess, KustoIngestionProperties ingestionProperties);
    /// 
    /// Ingest data from 
    /// 
    /// The ingest client that will execute the ingestions
    /// The data to ingest
    /// Additional properties to be used during the ingestion process
    /// Optional. If set to 'false' (default value),  will be closed and disposed on call completion
    /// 
    public static IKustoIngestionResult IngestFromStream(this IKustoIngestClient client, Stream stream, KustoIngestionProperties ingestionProperties, bool leaveOpen = false);
    /// 
    /// Ingest data from  asynchronously
    /// 
    /// The ingest client that will execute the ingestions
    /// The data to ingest
    /// Additional properties to be used during the ingestion process
    /// Optional. If set to 'false' (default value),  will be closed and disposed on call completion
    /// An  task
    public static Task IngestFromStreamAsync(this IKustoIngestClient client, Stream stream, KustoIngestionProperties ingestionProperties, bool leaveOpen = false);
    /// 
    /// Ingest data from 
    /// 
    /// The ingest client that will execute the ingestions
    /// Represents the data to ingest
    /// Additional properties to be used during the ingestion process
    /// Optional. If set to 'false' (default value), streamDescription.Stream will be closed and disposed on call completion
    /// 
    public static IKustoIngestionResult IngestFromStream(this IKustoIngestClient client, StreamDescription streamDescription, KustoIngestionProperties ingestionProperties, bool leaveOpen = false);
    /// 
    /// Ingest data from  asynchronously
    /// 
    /// The ingest client that will execute the ingestions
    /// Represents the data to ingest
    /// Additional properties to be used during the ingestion process
    /// Optional. If set to 'false' (default value), streamDescription.Stream will be closed and disposed on call completion
    /// An  task
    public static Task IngestFromStreamAsync(this IKustoIngestClient client, StreamDescription streamDescription, KustoIngestionProperties ingestionProperties, bool leaveOpen = false);
}
```
## Class KustoIngestFactory
* CreateDirectIngestClient
* CreateQueuedIngestClient
* CreateManagedStreamingIngestClient
* CreateStreamingIngestClient
```csharp
/// 
/// Factory for creating Kusto ingestion objects.
/// 
public static class KustoIngestFactory
{
    /// 
    /// Creates an implementation of  that communicates
    /// directly with the Kusto engine service.
    /// 
    /// Indicates the connection to the Kusto engine service.
    /// An implementation of  that communicates
    /// directly with the Kusto engine service.
    /// In most cases, it is preferred that ingestion be done using the
    /// queued implementation of . See .
    public static IKustoIngestClient CreateDirectIngestClient(KustoConnectionStringBuilder kcsb);
    /// 
    /// Creates an implementation of  that communicates
    /// directly with the Kusto engine service.
    /// 
    /// Indicates the connection to the Kusto engine service.
    /// An implementation of  that communicates
    /// directly with the Kusto engine service.