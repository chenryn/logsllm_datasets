subdbid oid OID of database constituting SUBSCRIPTION
subname name Name of the SUBSCRIPTION object
subowner oid Owner’s OID
subenabled boolean Is the object valid?
subconninfo text Connection information to PUBLICATION instance
subslotname name Name of the replication slot
subsynccommit text Synchronous COMMIT setting value
subpublications text[] Array of PUBLICATION names
□ pg_subscription_rel catalog
The pg_subscription_rel catalog stores the information on table targeted by the SUBSCRIPTION
object used in Logical Replication.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 50
Table 19 pg_subscription_rel catalog
Column name Data type Description
srsubid oid OID of SUBSCRIPTION object
srrelid oid OID of target table
srsubstate "char" Status i = initializing, d = data transferring, s = synchronizing, r
= normal
srsublsn pg_lsn The last LSN of the s or r state of srsubstate column
3.5.2 Modified catalogs
The following catalogs have been changed.
Table 20 System catalog with columns added
Catalog name Added column Data Type Description
pg_class relispartition boolean Partition parent table
relpartbound pg_node_tree Partitioning information
pg_replication_slots temporary boolean Indicate a temporary slot
pg_policy polpermissive boolean PERMISSIVE mode
pg_policies permissive text PERMISSIVE mode
pg_stat_replication write_lag interval Write lag
flush_lag interval Flush lag
replay_lag interval Replay lag
pg_collation collprovider char Provider information
collversion text Version information
pg_stat_activity backend_type text Type of process
pg_attribute attidentity char GENERATED column
□ pg_stat_activity catalog
The statuses of all backend processes except the postmaster process are now displayed in the
pg_stat_activity catalog. The type of backend process can be confirmed by backend_type column.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 51
Example 53 Referencing pg_stat_activity catalog
postgres=# SELECT pid,wait_event, backend_type FROM pg_stat_activity ;
pid | wait_event | backend_type
-------+---------------------+---------------------
12251 | AutoVacuumMain | autovacuum launcher
12253 | LogicalLauncherMain | background worker
12269 | | client backend
12249 | BgWriterHibernate | background writer
12248 | CheckpointerMain | checkpointer
12250 | WalWriterMain | walwriter
(6 rows)
3.5.3 Enhancement of libpq library
The following enhancements have been added to the PostgreSQL Client library libpq.
□ Multi-instance specification
Settings for connecting to multiple instances which are already supported in the JDBC Driver are
also implemented in the libpq library. As described below, multiple host names and port numbers can
be described in comma-separated form.
Syntax 7 Multi-instance specification
host=host1,host2
host=host1,host2 port=port1,port2
postgresql://host1,host2/
postgresql://host1:port2,host2:port2/
Multiple values can be specified with the comma (,) separator in the environment variables PGHOST
and PGPORT. Along with this, it is now possible to specify multiple values for the --host and --port
parameters of the psql and pg_basebackup commands
□ Added target_session_attrs attribute
Target_session_attrs has been added as a new connection attribute. This parameter can be specified
as "any" if the instance to be connected can be hot standby, or "read-write" if the instance is writable.
A similar specification can be specified for the environment variable PGTARGETSESSIONATTRS.
Internally, it seems to be use the SHOW transaction_read_only statement to determine the connection
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 52
destination.
□ Added passfile attribute
"passfile" has been added as a new connection attribute. In the past, it was specified with the
environment variable PGPASSFILE etc.
3.5.4 Change from XLOG to WAL
The name of XLOG used in the function, directory name, and utility was unified in WAL. Also, the
pg_clog directory has been changed to the pg_xact directory. The default output directory name of the
log file has been changed due to the effect of changing the default value of the parameter log_directory.
The name "location" indicating the location of WAL has been changed to "lsn".
Table 21 Changed name
Category Before change After changing
Directories pg_xlog pg_wal
pg_clog pg_xact
pg_log log
Utilities pg_receivexlog pg_receivewal
pg_resetxlog pg_resetwal
pg_xlogdump pg_waldump
pg_basebackup --xlog-method pg_basebackup --wal-method
pg_basebackup --xlogdir pg_basebackup --waldir
initdb --xlogdir initdb --waldir
Functions pg_xlog_location_diff pg_wal_location_diff
pg_switch_xlog pg_switch_wal
pg_current_xlog_* pg_current_wal_*
pg_xlogfile* pg_walfile*
pg_is_xlog_replay_replay_paused pg_is_wal_replay_replay_paused
pg_last_xlog_* pg_last_wal_*
pg_*location* pg_*lsn*
Catalog pg_stat_replication Catalog pg_stat_replication Catalog
- sent_location - sent_lsn
- write_location - write_lsn
- flush_location - flush_lsn
- replay_location - replay_lsn
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 53
At the same time, the string XLOG included in the error message has also been changed to WAL. It
has been changed to the following message.
• Failed while allocating a WAL reading processor.
• could not read two-phase state from WAL at …
• expected two-phase state data is not present in WAL at …
• Failed while allocating a WAL reading processor.
• WAL redo at %X/%X for %s
• Forces a switch to the next WAL file if a new file has not been started within N seconds.
The description of the parameter archive_timeout has been changed as follows.
• Forces a switch to the next WAL file if a new file has not been started within N seconds.
3.5.5 Temporary replication slot
Replication slots can be used for building a streaming replication environment or for the
pg_basebackup command. In PostgreSQL 10, temporary replication slots can now be created. A
temporary replication slot is the same as a normal replication slot except that it is automatically deleted
by session termination. To create a temporary replication slot, specify true for the third parameter of
the pg_create_physical_replication_slot function or pg_create_logical_replication_slot function.
Along with this, "temporary" column has been added to the pg_replication_slots catalog.
Example 54 Create temporary replication slot
postgres=# SELECT pg_create_physical_replication_slot('temp1', true, true) ;
pg_create_physical_replication_slot
-------------------------------------
(temp1,0/30000370)
(1 row)
postgres=# SELECT slot_name, temporary FROM pg_replication_slots ;
slot_name | temporary
-----------+-----------
temp1 | t
(1 row)
3.5.6 Change instance startup log
The listen address and port number are now output to the instance startup log.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 54
Example 55 Instance start log (partially omitted)
$ pg_ctl -D data start
waiting for server to start....
LOG: listening on IPv4 address "0.0.0.0", port 5432
LOG: listening on IPv6 address "::", port 5432
LOG: listening on Unix socket "/tmp/.s.PGSQL.5432"
LOG: redirecting log output to logging collector process
HINT: Future log output will appear in directory "log".
done
server started
3.5.7 WAL of hash index
Hash index of previous versions did not generate WAL on update. In PostgreSQL 10, it now generate
WAL, so it can now be used in streaming replication environments. The warnings outputted in the
CREATE INDEX USING HASH statement are no longer output.
Example 56 Create hash index (PostgreSQL 10)
postgres=> CREATE INDEX idx1_hash1 ON hash1 USING hash (c1) ;
CREATE INDEX
Example 57 Create hash index (PostgreSQL 9.6)
postgres=> CREATE INDEX Idx1_hash1 ON hash1 USING hash (c1) ;
WARNING: hash indexes are not WAL-logged and their use is discouraged
CREATE INDEX
3.5.8 Added roles
The following roles have been added. All roles do not have "login" privilege.
Table 22 Added role
Role Description
pg_read_all_settings All configuration parameters can be referred.
pg_read_all_stats All pg_stat_ * views can be referred.
pg_stat_scan_tables Execute the monitoring function to take AccessShareLock lock
pg_monitor All of the above 3 roles have authority
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 55
Registering the following Contrib modules, execute permissions for function are automatically
granted to the roles above.
• pg_buffercache
• pg_freespacemap
• pg_stat_statements
• pg_visibility
• pgstattuple
3.5.9 Custom Scan Callback
A new callback called at the end of the parallel query has been added. It is explained in the manual
"58.3. Executing Custom Scans" as follows.
Example 58 Custom Scan Callback
Initialize a parallel worker's custom state based on the shared state set
up in the leader by InitializeDSMCustomScan. This callback is optional,
and needs only be supplied if this custom path supports parallel execution.
void (*ShutdownCustomScan) (CustomScanState *node);
3.5.10 Size of WAL file
The choice of WAL file size determined by the --with-wal-segsize option of the "configure" command
has increased. 128, 256, 512, 1024 can be used in addition to the conventional 1 to 64.
3.5.11 ICU
ICU can be used for locale function. Specify --with-icu when executing "configure" command. When
building in Linux environment, installation of libicu package and libicu-devel package is necessary.
3.5.12 EUI-64 data type
The data type macaddr8 indicating the EUI-64 address is now available.
3.5.13 Unique Join
When joining tables, the execution plan that performs a join using a unique index can be planned.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 56
In the execution plan displayed by EXPLAIN VERBOSE statement, it will appear as "Inner Unique:
true".
Example 59 Inner Unique Join
postgres=> CREATE TABLE unique1(c1 INTEGER PRIMARY KEY, c2 VARCHAR(10)) ;
CREATE TABLE
postgres=> CREATE TABLE unique2(c1 INTEGER PRIMARY KEY, c2 VARCHAR(10)) ;
CREATE TABLE
…
postgres=> EXPLAIN VERBOSE SELECT * FROM unique1 u1 INNER JOIN unique2 u2 ON u1.c1 =
u2.c1 ;
QUERY PLAN
-----------------------------------------------------------------------------------
Hash Join (cost=280.00..561.24 rows=10000 width=18)
Output: u1.c1, u1.c2, u2.c1, u2.c2
Inner Unique: true
Hash Cond: (u1.c1 = u2.c1)
-> Seq Scan on public.unique1 u1 (cost=0.00..155.00 rows=10000 width=9)
Output: u1.c1, u1.c2
-> Hash (cost=155.00..155.00 rows=10000 width=9)
Output: u2.c1, u2.c2
-> Seq Scan on public.unique2 u2 (cost=0.00..155.00 rows=10000 width=9)
Output: u2.c1, u2.c2
(10 rows)
3.5.14 Shared Memory Address
When the EXEC_BACKEND macro is defined and installed, the environment variable
PG_SHMEM_ADDR can be used. Specify the start address of System V shared memory used as part
of the cache. Internally it is digitized with the strtoul function and used as the second parameter of the
shmat system call.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 57
3.6 Monitoring
3.6.1 Monitor wait events
Wait events that are shown in the wait_event_type and wait_event columns of the pg_stat_activity
catalog have been added. LWLockNamed and LWLockTranche that were output in the
wait_event_type column in PostgreSQL 9.6 have been renamed to LWLock.
Table 23 Value to be output to the wait_event_type column
wait_event_type Description Change
column
LWLock Light weight lock wait Renamed
Lock Lock wait
BufferPin Waiting for buffer
Activity Waiting for processing acceptance of background processes Added
Client A state in which the client is waiting for processing Added
Extension Wait for background worker Added
IPC A state waiting for processing from another process Added
Timeout Waiting for timeout Added
IO Waiting for I / O Added
3.6.2 EXPLAIN SUMMARY statement
A SUMMARY clause has been added to the EXPLAIN statement to output only the execution plan
generation time.
Example 60 EXPLAIN SUMMARY
postgres=> EXPLAIN (SUMMARY) SELECT * FROM data1 ;
QUERY PLAN
----------------------------------------------------------------
Seq Scan on data1 (cost=0.00..15406.00 rows=1000000 width=11)
Planning time: 0.072 ms
(2 rows)
3.6.3 VACUUM VERBOSE statement
Oldest xmin and frozen pages are now output as the output of the VACUUM VERBOSE statement.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 58
Example 61 Execute VACUUM VERBOSE statement
postgres=> VACUUM VERBOSE data1 ;
NFO: vacuuming "public.data1"
…
DETAIL: 0 dead row versions cannot be removed yet, oldest xmin: 587
There were 0 unused item pointers.
Skipped 0 pages due to buffer pins, 0 frozen pages.
0 pages are entirely empty.
…
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 59
3.7 Quorum-based synchronous replication
In PostgreSQL 9.5 and earlier, only one instance was available for synchronous replication. In
PostgreSQL 9.6, synchronous replication can be performed on multiple instances.
PostgreSQL 10 implements Quorum-based synchronous replication, which arbitrarily selects an
instance to perform synchronous replication. The synchronous replication environment is set by the
synchronous_standby_names configuration parameter as before.
Syntax 8 Up to PostgreSQL 9.5
synchronous_standby_names = application_name, application_name, …
Syntax 9 PostgreSQL 9.6
synchronous_standby_names = num_sync (application_name,
application_name, …)
Syntax 10 PostgreSQL 10
synchronous_standby_names = FIRST | ANY num_sync (application_name,
application_name, …)
Specifying FIRST or omitting it will have the same behavior as PostgreSQL 9.6. Priorities are
determined in the order described in the parameter application_name, and synchronous replication is
performed for the number of instances specified by num_sync.
If ANY is specified, it will not depend on the order of the instances specified in parameter
application_name, and will determine the completion of synchronous replication when WAL is
transferred to the slave instance specified by num_sync. If ANY is specified for the configuration
parameter synchronous_standby_names, "quorum" is output in the sync_state column of the
pg_stat_replication catalog.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 60
Example 62 Quorum-based synchronous replication
postgres=> SHOW synchronous_standby_names ;
synchronous_standby_names
--------------------------------------
any 2 (standby1, standby2, standby3)
(1 row)
postgres=> SELECT application_name,sync_state, sync_priority
FROM pg_stat_replication ;
application_name | sync_state | sync_priority
------------------+------------+---------------
standby1 | quorum | 1
standby2 | quorum | 1
standby3 | quorum | 1
(3 rows)
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 61
3.8 Enhancement of Row Level Security
3.8.1 Overview
When multiple policies were set for a table, policies were determined by OR condition in PostgreSQL
9.6 and earlier. In PostgreSQL 10 it is possible to specify a policy with an AND condition. The AS
PERMISSIVE clause and the AS RESTRICTIVE clause can now be specified in the CREATE
POLICY statement that create the policy. When specifying the AS PERMISSIVE clause, the restriction
becomes loose (OR), and if AS RESTRICTIVE is specified, the limit becomes strict (AND). When
designation is omitted, it becomes the same as in the previous version. Along with this, a column
indicating condition specification has been added to the pg_policy catalog and the pg_policies catalog.
Table 24 Added column (pg_policy catalog)
Column name Data type Description
polpermissive boolean POLICY mode (PERMISSIVE in the case of true)
Table 25 Added column (pg_policies catalog)
Column name Data type Description
permissive text POLICY mode (PERMISSIVE or RESTRICTIVE)
Syntax 11 CREATE POLICY statement
CREATE POLICY policy_name ON table_name
[ AS { PERMISSIVE | RESTRICTIVE } ]
[ FOR { ALL | SELECT | INSERT | UPDATE | DELETE } ]
[ TO { role_name | PUBLIC | CURRENT_USER | SESSION_USER } [, ...] ]
[ USING ( using_expression ) ]
3.8.2 Validation of multiple POLICY setting
The author set multiple POLICY for the table and verified the effect. POLICY pol1 in PERMISSIVE
mode and POLICY pol2, pol3 in RESTRICTIVE mode were prepared for the table poltbl1 and