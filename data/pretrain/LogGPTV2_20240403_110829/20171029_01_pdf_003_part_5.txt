### 3.5.1 `pg_subscription` Catalog

The `pg_subscription` catalog stores information about the SUBSCRIPTION objects used in logical replication.

**Table 19: `pg_subscription` Catalog**

| Column Name | Data Type | Description |
|-------------|-----------|-------------|
| `subdbid`   | `oid`     | OID of the database constituting the SUBSCRIPTION. |
| `subname`   | `name`    | Name of the SUBSCRIPTION object. |
| `subowner`  | `oid`     | Ownerâ€™s OID. |
| `subenabled`| `boolean` | Indicates if the object is valid. |
| `subconninfo` | `text` | Connection information to the PUBLICATION instance. |
| `subslotname` | `name` | Name of the replication slot. |
| `subsynccommit` | `text` | Synchronous COMMIT setting value. |
| `subpublications` | `text[]` | Array of PUBLICATION names. |

### 3.5.2 Modified Catalogs

The following catalogs have been updated with additional columns:

**Table 20: System Catalogs with Added Columns**

| Catalog Name | Added Column | Data Type | Description |
|--------------|--------------|-----------|-------------|
| `pg_class`   | `relispartition` | `boolean` | Indicates if it is a partition parent table. |
| `pg_class`   | `relpartbound` | `pg_node_tree` | Partitioning information. |
| `pg_replication_slots` | `temporary` | `boolean` | Indicates if the slot is temporary. |
| `pg_policy`  | `polpermissive` | `boolean` | PERMISSIVE mode (true for permissive, false for restrictive). |
| `pg_policies`| `permissive` | `text` | PERMISSIVE or RESTRICTIVE mode. |
| `pg_stat_replication` | `write_lag` | `interval` | Write lag. |
| `pg_stat_replication` | `flush_lag` | `interval` | Flush lag. |
| `pg_stat_replication` | `replay_lag` | `interval` | Replay lag. |
| `pg_collation` | `collprovider` | `char` | Provider information. |
| `pg_collation` | `collversion` | `text` | Version information. |
| `pg_stat_activity` | `backend_type` | `text` | Type of process. |
| `pg_attribute` | `attidentity` | `char` | GENERATED column. |

### 3.5.3 Enhancement of `libpq` Library

The following enhancements have been added to the PostgreSQL Client library `libpq`.

#### Multi-Instance Specification
Support for connecting to multiple instances, already available in the JDBC Driver, has been implemented in the `libpq` library. Multiple host names and port numbers can be specified in a comma-separated format.

**Syntax 7: Multi-Instance Specification**
```sql
host=host1,host2
host=host1,host2 port=port1,port2
postgresql://host1,host2/
postgresql://host1:port1,host2:port2/
```

Multiple values can be specified with the comma (`,`) separator in the environment variables `PGHOST` and `PGPORT`. Additionally, the `--host` and `--port` parameters of the `psql` and `pg_basebackup` commands now support multiple values.

#### Added `target_session_attrs` Attribute
A new connection attribute `target_session_attrs` has been added. This parameter can be set to "any" if the instance can be a hot standby, or "read-write" if the instance must be writable. The environment variable `PGTARGETSESSIONATTRS` can also be used for similar specification.

Internally, the `SHOW transaction_read_only` statement is used to determine the connection destination.

#### Added `passfile` Attribute
A new connection attribute `passfile` has been added. Previously, this was specified using the environment variable `PGPASSFILE`.

### 3.5.4 Change from XLOG to WAL

The name "XLOG" used in functions, directory names, and utilities has been unified to "WAL". The `pg_clog` directory has been renamed to `pg_xact`, and the default log file output directory name has been changed due to the change in the `log_directory` parameter's default value. The term "location" indicating the position of WAL has been changed to "lsn".

**Table 21: Changed Names**

| Category | Before Change | After Change |
|----------|---------------|--------------|
| Directories | `pg_xlog` | `pg_wal` |
| Directories | `pg_clog` | `pg_xact` |
| Directories | `pg_log` | `log` |
| Utilities | `pg_receivexlog` | `pg_receivewal` |
| Utilities | `pg_resetxlog` | `pg_resetwal` |
| Utilities | `pg_xlogdump` | `pg_waldump` |
| Utilities | `pg_basebackup --xlog-method` | `pg_basebackup --wal-method` |
| Utilities | `pg_basebackup --xlogdir` | `pg_basebackup --waldir` |
| Utilities | `initdb --xlogdir` | `initdb --waldir` |
| Functions | `pg_xlog_location_diff` | `pg_wal_location_diff` |
| Functions | `pg_switch_xlog` | `pg_switch_wal` |
| Functions | `pg_current_xlog_*` | `pg_current_wal_*` |
| Functions | `pg_xlogfile*` | `pg_walfile*` |
| Functions | `pg_is_xlog_replay_paused` | `pg_is_wal_replay_paused` |
| Functions | `pg_last_xlog_*` | `pg_last_wal_*` |
| Functions | `pg_*location*` | `pg_*lsn*` |
| Catalog | `pg_stat_replication` | `pg_stat_replication` |
| - `sent_location` | - `sent_lsn` |
| - `write_location` | - `write_lsn` |
| - `flush_location` | - `flush_lsn` |
| - `replay_location` | - `replay_lsn` |

Error messages containing "XLOG" have also been updated to use "WAL".

### 3.5.5 Temporary Replication Slot

In PostgreSQL 10, temporary replication slots can be created. A temporary replication slot is automatically deleted upon session termination. To create a temporary replication slot, specify `true` for the third parameter of the `pg_create_physical_replication_slot` or `pg_create_logical_replication_slot` function. A `temporary` column has been added to the `pg_replication_slots` catalog.

**Example 54: Create Temporary Replication Slot**
```sql
postgres=# SELECT pg_create_physical_replication_slot('temp1', true, true);
 pg_create_physical_replication_slot
-------------------------------------
 (temp1,0/30000370)
(1 row)

postgres=# SELECT slot_name, temporary FROM pg_replication_slots;
 slot_name | temporary
-----------+-----------
 temp1     | t
(1 row)
```

### 3.5.6 Change Instance Startup Log

The listen address and port number are now included in the instance startup log.

**Example 55: Instance Start Log (Partially Omitted)**
```sh
$ pg_ctl -D data start
waiting for server to start....
LOG:  listening on IPv4 address "0.0.0.0", port 5432
LOG:  listening on IPv6 address "::", port 5432
LOG:  listening on Unix socket "/tmp/.s.PGSQL.5432"
LOG:  redirecting log output to logging collector process
HINT:  Future log output will appear in directory "log".
done
server started
```

### 3.5.7 WAL of Hash Index

Hash indexes in previous versions did not generate WAL on update. In PostgreSQL 10, hash indexes now generate WAL, making them suitable for streaming replication environments. Warnings previously outputted during the creation of a hash index are no longer displayed.

**Example 56: Create Hash Index (PostgreSQL 10)**
```sql
postgres=> CREATE INDEX idx1_hash1 ON hash1 USING hash (c1);
CREATE INDEX
```

**Example 57: Create Hash Index (PostgreSQL 9.6)**
```sql
postgres=> CREATE INDEX Idx1_hash1 ON hash1 USING hash (c1);
WARNING:  hash indexes are not WAL-logged and their use is discouraged
CREATE INDEX
```

### 3.5.8 Added Roles

The following roles have been added. None of these roles have the "login" privilege.

**Table 22: Added Roles**

| Role | Description |
|------|-------------|
| `pg_read_all_settings` | All configuration parameters can be referenced. |
| `pg_read_all_stats` | All `pg_stat_*` views can be referenced. |
| `pg_stat_scan_tables` | Execute the monitoring function to take an `AccessShareLock` lock. |
| `pg_monitor` | Has all the above three roles' authority. |

When registering the following Contrib modules, execute permissions for the functions are automatically granted to the above roles:
- `pg_buffercache`
- `pg_freespacemap`
- `pg_stat_statements`
- `pg_visibility`
- `pgstattuple`

### 3.5.9 Custom Scan Callback

A new callback called at the end of a parallel query has been added. It is explained in the manual "58.3. Executing Custom Scans" as follows.

**Example 58: Custom Scan Callback**
```c
void (*ShutdownCustomScan)(CustomScanState *node);
```

Initialize a parallel worker's custom state based on the shared state set up in the leader by `InitializeDSMCustomScan`. This callback is optional and only needs to be supplied if the custom path supports parallel execution.

### 3.5.10 Size of WAL File

The choice of WAL file size determined by the `--with-wal-segsize` option of the `configure` command has increased. In addition to the conventional sizes of 1 to 64 MB, 128, 256, 512, and 1024 MB are now available.

### 3.5.11 ICU

ICU can be used for locale functions. Specify `--with-icu` when executing the `configure` command. When building in a Linux environment, the installation of `libicu` and `libicu-devel` packages is necessary.

### 3.5.12 EUI-64 Data Type

The data type `macaddr8` indicating the EUI-64 address is now available.

### 3.5.13 Unique Join

When joining tables, the execution plan can now use a unique index. In the execution plan displayed by the `EXPLAIN VERBOSE` statement, it will appear as "Inner Unique: true".

**Example 59: Inner Unique Join**
```sql
postgres=> CREATE TABLE unique1(c1 INTEGER PRIMARY KEY, c2 VARCHAR(10));
CREATE TABLE
postgres=> CREATE TABLE unique2(c1 INTEGER PRIMARY KEY, c2 VARCHAR(10));
CREATE TABLE
...
postgres=> EXPLAIN VERBOSE SELECT * FROM unique1 u1 INNER JOIN unique2 u2 ON u1.c1 = u2.c1;
QUERY PLAN
-----------------------------------------------------------------------------------
Hash Join (cost=280.00..561.24 rows=10000 width=18)
Output: u1.c1, u1.c2, u2.c1, u2.c2
Inner Unique: true
Hash Cond: (u1.c1 = u2.c1)
-> Seq Scan on public.unique1 u1 (cost=0.00..155.00 rows=10000 width=9)
Output: u1.c1, u1.c2
-> Hash (cost=155.00..155.00 rows=10000 width=9)
Output: u2.c1, u2.c2
-> Seq Scan on public.unique2 u2 (cost=0.00..155.00 rows=10000 width=9)
Output: u2.c1, u2.c2
(10 rows)
```

### 3.5.14 Shared Memory Address

When the `EXEC_BACKEND` macro is defined and installed, the environment variable `PG_SHMEM_ADDR` can be used to specify the start address of System V shared memory used as part of the cache. Internally, it is digitized with the `strtoul` function and used as the second parameter of the `shmat` system call.

### 3.6 Monitoring

#### 3.6.1 Monitor Wait Events

Wait events shown in the `wait_event_type` and `wait_event` columns of the `pg_stat_activity` catalog have been added. `LWLockNamed` and `LWLockTranche` that were output in the `wait_event_type` column in PostgreSQL 9.6 have been renamed to `LWLock`.

**Table 23: Values Output to the `wait_event_type` Column**

| `wait_event_type` | Description | Change |
|-------------------|-------------|--------|
| `LWLock`          | Light weight lock wait | Renamed |
| `Lock`            | Lock wait |  |
| `BufferPin`       | Waiting for buffer |  |
| `Activity`        | Waiting for processing acceptance of background processes | Added |
| `Client`          | A state in which the client is waiting for processing | Added |
| `Extension`       | Wait for background worker | Added |
| `IPC`             | A state waiting for processing from another process | Added |
| `Timeout`         | Waiting for timeout | Added |
| `IO`              | Waiting for I/O | Added |

#### 3.6.2 `EXPLAIN SUMMARY` Statement

A `SUMMARY` clause has been added to the `EXPLAIN` statement to output only the execution plan generation time.

**Example 60: `EXPLAIN SUMMARY`**
```sql
postgres=> EXPLAIN (SUMMARY) SELECT * FROM data1;
QUERY PLAN
----------------------------------------------------------------
Seq Scan on data1 (cost=0.00..15406.00 rows=1000000 width=11)
Planning time: 0.072 ms
(2 rows)
```

#### 3.6.3 `VACUUM VERBOSE` Statement

The oldest `xmin` and frozen pages are now output as part of the `VACUUM VERBOSE` statement.

**Example 61: Execute `VACUUM VERBOSE` Statement**
```sql
postgres=> VACUUM VERBOSE data1;
INFO:  vacuuming "public.data1"
...
DETAIL:  0 dead row versions cannot be removed yet, oldest xmin: 587
There were 0 unused item pointers.
Skipped 0 pages due to buffer pins, 0 frozen pages.
0 pages are entirely empty.
...
```

### 3.7 Quorum-Based Synchronous Replication

In PostgreSQL 9.5 and earlier, synchronous replication was limited to one instance. In PostgreSQL 9.6, synchronous replication could be performed on multiple instances. PostgreSQL 10 introduces quorum-based synchronous replication, allowing for flexible selection of instances for synchronous replication. The synchronous replication environment is set by the `synchronous_standby_names` configuration parameter.

**Syntax 8: Up to PostgreSQL 9.5**
```sql
synchronous_standby_names = application_name, application_name, â€¦
```

**Syntax 9: PostgreSQL 9.6**
```sql
synchronous_standby_names = num_sync (application_name, application_name, â€¦)
```

**Syntax 10: PostgreSQL 10**
```sql
synchronous_standby_names = FIRST | ANY num_sync (application_name, application_name, â€¦)
```

- Specifying `FIRST` or omitting it will behave as in PostgreSQL 9.6. Priorities are determined in the order described in the `application_name` parameter, and synchronous replication is performed for the number of instances specified by `num_sync`.
- If `ANY` is specified, the order of instances in the `application_name` parameter does not matter, and synchronous replication is considered complete when WAL is transferred to the specified number of slave instances. If `ANY` is specified, "quorum" is output in the `sync_state` column of the `pg_stat_replication` catalog.

**Example 62: Quorum-Based Synchronous Replication**
```sql
postgres=> SHOW synchronous_standby_names;
 synchronous_standby_names
--------------------------------------
 any 2 (standby1, standby2, standby3)
(1 row)

postgres=> SELECT application_name, sync_state, sync_priority FROM pg_stat_replication;
 application_name | sync_state | sync_priority
------------------+------------+---------------
 standby1         | quorum     | 1
 standby2         | quorum     | 1
 standby3         | quorum     | 1
(3 rows)
```

### 3.8 Enhancement of Row Level Security

#### 3.8.1 Overview

In PostgreSQL 9.6 and earlier, policies for a table were evaluated using an OR condition. In PostgreSQL 10, it is possible to specify policies with an AND condition. The `AS PERMISSIVE` and `AS RESTRICTIVE` clauses can now be specified in the `CREATE POLICY` statement. When specifying `AS PERMISSIVE`, the restriction becomes loose (OR), and if `AS RESTRICTIVE` is specified, the limit becomes strict (AND). If the designation is omitted, it behaves as in the previous version. A column indicating the condition specification has been added to the `pg_policy` and `pg_policies` catalogs.

**Table 24: Added Column (pg_policy Catalog)**

| Column Name | Data Type | Description |
|-------------|-----------|-------------|
| `polpermissive` | `boolean` | POLICY mode (PERMISSIVE if true, RESTRICTIVE if false) |

**Table 25: Added Column (pg_policies Catalog)**

| Column Name | Data Type | Description |
|-------------|-----------|-------------|
| `permissive` | `text` | POLICY mode (PERMISSIVE or RESTRICTIVE) |

**Syntax 11: `CREATE POLICY` Statement**
```sql
CREATE POLICY policy_name ON table_name
[ AS { PERMISSIVE | RESTRICTIVE } ]
[ FOR { ALL | SELECT | INSERT | UPDATE | DELETE } ]
[ TO { role_name | PUBLIC | CURRENT_USER | SESSION_USER } [, ...] ]
[ USING ( using_expression ) ]
```

#### 3.8.2 Validation of Multiple POLICY Setting

The author set multiple POLICY for the table and verified the effect. POLICY `pol1` in PERMISSIVE mode and POLICY `pol2`, `pol3` in RESTRICTIVE mode were prepared for the table `poltbl1` and tested.