} 
... 
if (str_status) { 
$(".convert-title").removeClass("hidden"); 
$(".convert-title").​html​(​str_status​); 
} 
2 https://bugs.chromium.org/p/project-zero/issues/detail?id=1088 
The above code takes the raw value from the message parameter and sets it as the ​html​ value 
of the page’s title. 
Exploitation 
Content-Security Policy prevents full exploitation in this case. 
To understand why we need to go back to 2014, when Google enforced usage of ​manifest 2 
in Chrome Extensions. The most notable change in this version was a default CSP 
configuration, set for all extensions that do not explicitly configure it in the manifest. 
The default Content-Security Policy is as followed: 
script-src 'self'; object-src 'self' 
This policy help preventing XSS in three ways: 
1.
Eval and related functions are disabled 
2.
Inline JavaScript will not be executed* 
3.
Only local scripts and resources are allowed (whitelisted domains can be set for fetching 
scripts) 
*It’s important to mention that there is no mechanism for relaxing the restriction against 
executing inline JavaScript. Setting a script policy that includes '​unsafe-inline​' has no 
effect. 
In this bold move, driving countless of extensions developers to patch their dirty code, Google 
has saved us from an XSS horror scenario. 
CSP does prevent a lot of common XSS cases. However, the extension ecosystem is too wide 
to block all exploitation techniques with a policy. 
In the following 2 ex-vulnerable extensions analysis, we will try to verify this argument. 
Vulnerable Extension II  - AVG Web TuneUp 
When a user installs AVG AntiVirus on his machine, a Chrome extension called "AVG Web 
TuneUp" is force-installed. Tavis Ormandy, same researcher from Google Project Zero, found 
this extension to be vulnerable to XSS, among some other issues, on December 2015 . 
3
This vulnerability allowed attackers to craft a web page that initiates arbitrary JavaScript on any 
domain on the web - what we like to call Universal XSS. 
At the time, the extension had ~9M installations, currently tens of millions. 
PoC for exploiting this vulnerability was demonstrated by Ormandy in his report. The following 
code should be embedded in the attack page: 
    for (i = 0; i  
Vulnerability Analysis 
From the exploitation code snippet we learn that a script, probably content script injected into 
the page by the extension, listens to ​window​ messages. When it receives a message, and the 
message’s ​action​ value is “navigate”, it redirect the tab specified in ​tabId​, to a destination 
specified in ​url​.  
In the given PoC, the url value starts with “​javascript:​”, resulting in JavaScript execution on 
the affected tab. The PoC script checks whether current domain ends with “avg.com”, and if so, 
alerts with the domain name and cookies. 
Looking closer at the extension’s code, the vulnerable part can be found. 
content.js (content script injected to every tab): 
window.addEventListener("message"​, function(event) …) { 
3 https://bugs.chromium.org/p/project-zero/issues/detail?id=675 
... 
sendMessageToBackground(​event.data​); 
} 
... 
var sendMessageToBackground = function(message, cb, viaPort){ 
... 
chrome.runtime.sendMessage(message, cb); 
}; 
We can see that the extension’s content script indeed listens to incoming ​window​ messages. 
Then it takes the message data as is and forward it to the extension’s background script via 
chrome.runtime.sendMessage​.  
Background scripts run persistently in the background of a browser, and have the privilege of 
reading and changing all data in all tabs (given the extension’s permissions).  
On message, the background script runs the logic of It calls another function 
jsAPIservice.navigate​, that runs the logic of navigating tabs according to the message 
data. 
background.js: 
chrome.​runtime.onMessage.addListener​(wt.messaging.​onMessage​); 
... 
onMessage​: function(request, sender, sendResponse){ 
if(sender.id === wt.EXT_ID){ 
var result; 
if(typeof actionsByType[request.action] === "function"){ 
result = actionsByType[request.action]​(request, sender); 
if(result !== undefined && sendResponse){ 
var _response = request; 
_response.data = result; 
sendResponse(_response); 
}}}} 
The ​actionByType[“navigate”]​ function forwards the data to another function - 
jsAPIservice​.navigate: 
var ​actionsByType​ = function(){ 
... 
var ​navigate​ = function(message){ 
jsAPIservice.navigate​(message.data); 
}; 
... 
return { 
... 
          navigate: ​navigate​ }; 
This function forwards the data to ​wt.chromeTabsUpdate​, that finally updates the chosen 
tab’s url: 
var ​jsAPIservice​ = function(){ 
    function ​navigate​(data, tabId){ 
        var _tabId = (data.tabID !== null) ? data.tabID : ((tabId &&  
tabId !== "") ? tabId : undefined); 
... 
        if (_tabId) { 
            ​wt.chromeTabsUpdate​({ 
                tabId: _tabId, 
                url: data.url, 
                callback: function (tab){} 
            }); 
        }}} 
... 
var ​wt​ = { 
chromeTabsUpdate​: function(data){ 
    chrome.tabs.update(data.tabId, {url: data.url}, data.callback); 
} 
Exploitation 
Luckily, Content-Security Policy does not take effect in this case, because the payload is not 
executed in the content script or in an extension page, but in the background script. Background 
script still has CSP limitations, such as inability to ​eval​ code, however it ​is​ able to control tabs 
and redirect them to new urls. This demo exploit manipulates this redirection, using a 
“​javascript:​“ url, in order to run scripts in the context of the tab. 
Demonstrating this PoC is easy and satisfying. Send one window message and you can run 
anything you want on any open tab. Below you can find a quick demo, exploiting this XSS in 
order to obtain victim’s sites list from his Wix.com account. 
attack.js (attacker’s page): 
for (i = 0; i " 
} 
He also committed a fix, but it was ignored by the extension’s developer. Later on, more 
researchers found more XSS issues , and this unmaintained extension kept running and 
5
jeopardizing millions of users, undisturbed. 
More than a year and a half later, on November 2016, Google removed JSONView from the 
web store and disabled it on all devices. 
3 months later, on January 2017, a new version of JSONView was introduced by the original 
developer, XSS fixed. 
Vulnerability Analysis 
The extension, using a content script injected in any tab, reads text from the page and sends it 
to its background script using ​port.postmessage​. This is how the malicious input gets to the 
extension at first. 
content.js (content script): 
function formatToHTML(fnName, offset) { 
...
port.postMessage({ 
jsonToHTML : true, 
json : ​jsonText​, 
fnName : fnName, 
offset : offset 
}); 
As you can assume, in ​jsonText​ lies the text of the currently parsed page. 
4 https://twitter.com/joevennix/status/570993550659166208?lang=en 
5 https://github.com/gildas-lormeau/JSONView-for-Chrome/pull/76 
The background script listens to these messages, and in turn sends them to a javascript worker 
that does the actual parsing. 
Background.js (background script): 
port.onMessage.addListener(function(msg) { 
    var workerFormatter, workerJSONLint, json = msg.json; 
    ... 
    if (msg.jsonToHTML) { 
        workerFormatter = new Worker("workerFormatter.js"); 
   ... 
        workerFormatter.postMessage({ 
            json : ​json​, 
            fnName : msg.fnName 
        }); 
    }} 
“workerFormatter” receives the message, containing the text to parse, and returns a formatted 
HTML version of the input json text. 
A closer look into workerFormatter.js, and the vulnerability is revealed: 
function valueToHTML(value) { 
    var valueType = typeof value, output = ""; 
    if (value == null) 
        output += decorateWithSpan("null", "type-null"); 
    ... 
    else if (valueType == "string") 
        if (/^(http|https):\/\/[^\s]+$/.test(value)) 
            ​output += decorateWithSpan('"', "type-string") +  
'' + htmlEncode(value) + 
'' + decorateWithSpan('"', "type-string"); 
        else 
            output += decorateWithSpan('"' + value + '"', "type-string"); 
    ... 
    return output; 
} 
Finally, the page’s text lands in the “value” parameter of this function. In case it’s a string value 
containing a url, the text is concatenated insecurely with an ​ 
With JSONView extension installed, a url to the “tags” api will lead now to XSS: 
JSONView styling for UXSS: