  App	
  A	
  Dummy	
  Provider	
  Auth	
  =	
  “YahooMail”	
  App	
  B	
  Email	
  Provider	
  Auth	
  =	
  “YahooMail”	
  Yahoo	
  Mail	
  agent detects that the device is in the work place, it notiﬁes
the TrustAgent service, which asks the system to relax
the security restriction on the device, such as temporarily
bypassing the lockscreen.
the
is
app. This user preference,
agent’s package name
Users need to explicitly enable a trust agent us-
consist-
ing the Settings
and service
ing of
trust
name,
saved in LockSetting.db maintained by
LockSettingService. When the selected trust-agent app
is uninstalled, it becomes unclear whether TrustAgent or
LockSettingService should take the responsibility to
remove the corresponding entry from LockSetting.db.
It turns out, nobody takes the responsibility, and the entry
becomes a setting residue. Our experiment shows that after the
uninstallation of the selected trust agent, any newly installed
app can automatically become the trust agent if it has an iden-
tical package name and service name as the one uninstalled.
At the current stage, only the app with system signature
can be used as a trust agent. Therefore, the above data residue
attack does no harm, because the “attacking” app needs to be
a system app, which is considered trustworthy. In the future,
if Android decides to relax the system-signature restriction on
trust agent, this setting residue problem, if not resolved, can
lead to damages.
C-3. Other Instances
Several other settings residue instances were identiﬁed in
our study as well, including debug app, mock location and
device dream. The exploiting experiments follow similar pat-
terns to TextService and TrustAgent. Since the debug
app and mock location features are mainly for app testing
purpose, we leave out the exploiting details from the paper.
In contrast, dream is a screen saver launched when a device
is being charged and is idle. Different from Desktop screen
savers, Android allows the dream screen to be interactive.
Thus, the dream setting residue becomes a perfect candidate
for conducting phishing attacks. We designed an attacking
experiment to exploit the DreamService residue through
targeting the Airbnb app (10 million installs on GooglePlay). In
its dream screen, the Airbnb app shows different attractions.
We designed a malicious app, namely Nightmare, with the
same dream component name, but faked Airbnb login screen
as the dream screen. With the same attack ﬂow, Nightmare
is automatically enabled as the dream provider, and is thus
capable of stealing user’s Airbnb account credentials through
phishing techniques.
Discussion All attack instances mentioned above requires a
malicious app to be installed after the target one is removed.
This is very likely to happen in practice for two reasons.
Firstly, any apps can claim to provide the aforementioned
functionality without permission restrictions. Secondly,
the
residue data will persist in the database and never expires.
D. History Peeking
Android provides system support for commonly used fea-
tures, such as printing and downloading. For example, an
app can send a document to the system for printing. The
Print framework considers each request as a “job”, and tracks
its status. Such history information is saved mainly for two
9
Fig. 4: Android’s Protection on Settings Conﬁgurations
spell checker, the preference is saved as a combination of
the functionality name “Spell Checker” and the service’s
component value “ABC/xyz”.
Android prevents third-party apps from directly accessing
security-critical settings. The protection is based on signature-
level permissions, and is performed by the permission Refer-
ence Monitor (RM) in the framework, as shown in Figure 4.
This way, the integrity of the settings is preserved. During the
runtime, the system retrieves the preference from the storage,
looks up the selected app component, and then authorizes it
for privileged operations. A natural question is that, after the
selected app is uninstalled, whether its corresponding setting
will be deleted, and if not, whether these settings residue can
be used for malicious purposes.
We systematically studied all system services that save
settings, and found ﬁve data residue instances. Due to the page
limitation, we only discuss two representative cases to show
how the attack works.
C-1. TextService
Android TextService is responsible for managing spell
checkers on the device; it delivers text inputs to the selected
app for spell suggestions. The user needs to select an app as
the system’s default spell checker, and the selection, which
includes a package name and a service name, is saved as an
entry in settings.db. TextService uses this entry to
ﬁnd the selected spell-checker app during the runtime.
After the selected spell-checker app is uninstalled, however,
Android does not delete the saved entry from settings.db,
so the entry becomes a data residue. Our hypothesis is that,
a newly installed app with the same package name and
service name can be automatically selected as the default spell
checker, without user’s approval. Our experiment conﬁrms this
hypothesis. Namely, if the user uninstalls the default spell-
checker app, a newly installed app with the same package
name and service name will be given all the keystrokes typed
by the user, including passwords, credit card numbers, etc.
C-2. TrustAgent
The TrustAgent system service, introduced in Android
5.0.0 (Lollipop), provides support for automatic screen unlock-
ing when the environment is trusted. TrustAgent relies on
an app, called trust agent, to decide whether the environment
of the device is trusted or not. For example, users can choose
the work place as a trusted environment, so once the trust
FRAMEWORK	
  Permission	
  RM Write Read Spell	
  Checker:	
  ABC/xyz …… 	
  App	
  ABC	
  Service:	
  xyz reasons. First of all, apps may be interested in checking the
status of their requests. Secondly, system has to schedule
concurrent requests from multiple apps. With various history
records spreading all over the Android framework, it would
be interesting to know whether these records will be cleaned
up after their owners are uninstalled. Our study uncovered
three exploitable history residue instances. While the exploit
on print record and download history follow the same pattern
as for the Keystore in Section IV-A2, the process to steal
print content is identical to Settings impersonating attacks in
Section IV-C. Due to the page limit, we exclude the discussion
on their preconditions.
D-1. Print Record
The Android system starts a printing job upon receiving a
request from apps. The lifecycle of each printing job includes
the following states: created, queued, started, blocked, com-
pleted, failed, and cancelled. Information about the printing
jobs will be saved until they are completed or cancelled. If a
printing job is failed or not completed, information about this
job will be kept in the system, even after the app is uninstalled.
Android protects the access to the printing history using the
initiating app’s UID, so it’s the only app that can access the
information. We suspect that, if a malicious app gets the same
UID, it will be able to access the information.
Experiment Design We designed an experiment to test our
hypothesis. At the very beginning, Adobe PDF Reader app
initiates a printing request to the Google Cloud Print
app, but we intentionally cut off the network connection,
making the printing job fail. After Adobe PDF Reader is
uninstalled, we reboot the device, and install our malicious
app called MyPrint. This app will be assigned the same UID
as Adobe PDF Reader. We have observed that MyPrint
can successfully get the records of all the failed printing jobs
created by Adobe PDF Reader. Moreover, MyPrint is
also capable of cancelling or restarting the failed printing jobs.
D-2. Print Content
In the Android framework,
the actual printing task is
delegated to third-party printer apps. Such a framework ac-
commodates different requirements from printer vendors, such
as Canon, HP or Samsung. The user chooses which printer
app should be used for printing a particular document. Once
a printing task is started, it is associated with the selected
printer app’s component name. We suspect that, if the printer
app is uninstalled, a newly installed app with the same printing
component name will be able to access the failed printing jobs.
Experiment Design Our experiment setup is the same as
above, except that we uninstall the Google Cloud Print
app instead. After that, the user installs another app named
CustomPrinter, which has the same printing component
name as Google Cloud Print. When the user restarts
the failed printing job, the task is actually carried out by
CustomPrinter, allowing this app to access the content
of the document.
D-3. Download History
Android keeps each app’s download history in the
Download content provider. Each entry corresponds to a
completed download request, and is mapped to the UID
of the app that initiates the download, so an app is only
allowed to access its own downloaded ﬁles. Apps can specify
the location for storing the downloaded ﬁles, or a default
directory in the system’s Downloads app will be used. Until
Lollipop, Android does not delete those downloaded ﬁles when
their owner apps are uninstalled. We suspect that, a newly
installed app with the same UID can gain the access to the
ﬁles downloaded by their previous owner. Our attack only
considers ﬁles downloaded to the default location (/data/data/-
com.android.providers.downloads/cache/); ﬁles downloaded to
shared folders are public and already accessible to other apps.
Experiment Design We designed our experiment on Android
KitKat to target the DuckDuckGo app, which is available on
GooglePlay with one million installs. It allows users to search
information online and download ﬁles. Since the download di-
rectory is not speciﬁed, all the downloaded ﬁles will be stored
inside the default location. After uninstalling DuckDuckGo,
we reboot the device, and install our malicious app, which gets
the same UID as the previously uninstalled DuckDuckGo app.
As it turns out, our malicious app can access the contents of
all the ﬁles downloaded by the DuckDuckGo app.
E. Permissions Regaining
Android normally assigns each app a unique UID during
the installation, but there are exceptions: apps declaring the
same sharedUserId value will share the same UID upon
successful certiﬁcate checks. In this case, permissions granted
to these apps are combined to form a “permission pool”, and all
apps share the same set of permissions from this pool. If an app
is updated to a new version with a different permission set (user
approval is needed), the “permission pool” will be updated
accordingly to add the newly granted permissions, but the ones
only declared by the older version (not in the updated version)
are not removed, resulting in permission residues. Moreover,
when the app is uninstalled, only the permissions declared in
the updated version are removed from the “permission pool”,
which creates a path for privilege escalation.
Experiment Design
In order to verify the potential per-
mission residue attack, we designed a sample app named
ContactViewer, which declares
the sharedUserId
“uid.share” and requests the READ_CONTACTS permission.
An updated version comes with the same sharedUserId
value but without requesting any permissions. As we men-
tioned above, our experiments show that the app still has the
READ_CONTACTS permission. We then installed another app
named ContactSearch with the same sharedUserId
value and signature as ContactViewer. Without request-
ing any additional permissions,
it naturally inherits the
READ_CONTACTS permission granted to “uid.share”. We then
uninstalled ContactViewer. Android is supposed to remove
all the permissions granted to ContactViewer, but as it
turns out, ContactSearch can still access the contacts
database, indicating that it still holds the READ_CONTACTS
permission residue introduced by the ﬁrst version of the
ContactViewer app. The permission residue can result in
over-privileged apps on the device.
Discussion
channel,
To take advantage of this privilege escalation
two apps with the same sharedUserId value
10
Attack Instances
Account
Clipboard Download
Dream
Keystore
Permission
Print
Spell Checker
# Targets
Attributes
131
account type
I: Analysis on Real-world Applications
92
63
II: Examination on Essential Attributes
authority
UID
package
UID
17
24
III: Measurement on Device Customization Inﬂuence†
55
49
16
sharedUserId UID/package
package
LG Nexus 5
Samsung Tab 10.1
ASUS Nexus 7 (2013)
Samsung Nexus S
LG Nexus 4
Galaxy Nexus





N/A2
N/A2

N/A2
N/A2
† N/A1: feature Not Available because of the low Android version; N/A2: feature Not Available because of the vendor customization.



N/A1

N/A1
N/A1




N/A1

N/A1

N/A1
N/A1

N/A1

5.1.0
4.3
5.1.1
4.1.2
5.0.1
4.0.4
4.1.2
5.0.0
4.4.2
5.0.0
HuaWei Y321