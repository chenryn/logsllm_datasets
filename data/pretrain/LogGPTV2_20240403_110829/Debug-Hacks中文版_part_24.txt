[sys_ioctl+924}
{release_sock+16}
{autoremove_wake_function+0}
{tty_ldisc_try+60}
{vt_ioctl+61}
{do_con_write+7903}
{sock_sendmsg+271}
{:ipv6:rawv6_sendmsg+2324}
www.TopSage.com
---
## Page 197
这样就能看到 icmpv6_send()了。
加载模块中定义的，因此不加载该模块就无法显示。
输入 crash 命令后发生了错误，说找不到符号。icmpv6_send()是在 ipv6.ko 这个可
panic，因此先对该函数进行反汇编，看看究竟发生了什么事。
头的 Oops 信息中可以得知，执行 icmpv6_send()函数的偏移量 1235字节时发生了
该问题产生了Oops，因此采用了获取内核崩溃转储并进行调试的办法。首先从开
用内核转储查看哪里发生了NULL指针访问
户权限。
的包。如下所示，指定网络接口执行该脚本就会发生 Oops。脚本执行需要超级用
这段脚本创建 IPsec 隧道，并在其中使用 ping6 命令发送比 IPsec 隧道的 MTU 更大
 crash> disas icmpv6_send
crash> mod -s ipv6
No symbol "icmpv6_send" in current context.
 crash> disas icmpv6_send
 $ sudo ./reproducer.sh eth1
@xffffffa01305f1 :
oxfffffffa01305ef :
Dump of assembler code for function icmpv6_send:
fffffffa015d180 ipv6
ping6 -I $IFACE fd0o:1l:1:l:1 -c 1 -s 1500
sleep 5
echo $CONTENT 1 setkey -C 
ip -f inet6 addr add fd00:1:1:1::2/64 dev $IFACE
IFACE=$1
#!/bin/sh
MODULE
ipsec ah/tunnel/fd00:1:1:1::1-fd00:1:1:1::2/use ;"
\ uT d- Aue z::l:1:l:00p+ I:t:t:l:00p+ ppepds
spdadd fd00:1:1:1::2 fd00:1:1:1::1 any -P out \
-A hmac-shal \"beef_fish_pork_salad\" ;\
ipsec ah/tunnel/fd00:1:1:1::2-fd00:1:1:1::1/use ;
NAME
284512
SIZE
www.TopSage.com
 /lib/modules/2.6.9-prep/kernel/net/ipv6/ipv6.ko
0BJECT FILE
push &r15
HACK#33 kernel panic（空指针引用篇)
moV
$oxffffff80543930,%rax
|179
155
8
---
## Page 198
187
另一个需要注意的地方是③处的_read_lock()。前面的②处设置了传递给
宏，在 icmpv6_send()内有3个地方调用了LIMIT_NETDEBUG()。
点位于①调用的 net_ratelimitO函数。这里 net_ratelimit()被替换成 LIMIT_NETDEBUG()
这就是Oops 的原因。那么我们来看看这个位置在内核源代码上对应哪一部分，要
器转储内容可知，RBX为0，因此④的指令写成C语言就是
处偏移 0x160字节，将该位置的内容保存到 RBX 寄存器中。从 Oops 消息中的寄存
问题发生在icmpv6_send+1235，是④的位置。这条指令从 RBX 寄存器表示的地址
180 1
(0x0 + 091x0)* = X8d
#define LIMIT_NETDEBUG(x) do {if (net_ratelimit()) {x; }} while (0)
[include/net/sock.h]
oxfffffffa0130ace :
θxffffffffa0130acc :
oxfffffa0130ac9 :
θxffffffffa0130ac2 :
Oxffffffffa0130abd 
oxfffffa0130ab6
θxffffffa0130abl :
Oxffffffa0130aac :
xfffffffa0130aa7 ;
oxfffffffa0130aa5 ;
oxffffa0130a9e :
Oxffffffa0130a98 :
oxfffffffa0130a96 :
oxfffffa0130a91 :
第5章实践内核调试
net_ratelimit()为标记，就十分易懂了。
其原理就是 net_ratelimit()。在内核网络代码中，阅读反汇编后的代码时以
if (net_ratelimit())
printk()配合使用显示信息。
net_ratelimit()是内核的网络栈代码中经常使用的函数，可以像下面这样与
攻击对象，因此不能每次必定执行printk()，而是要将其控制在某种频率之下，
用printkO显示信息需要消耗一定的开销。网络代码可能成为外部恶意用户的DoS
printk(...);
:
www.TopSage.com
lock
test
DOV
callg
mov
nov
mpg
callq
xor
nov
test
callg
$0xffffffffa0158eb0,&rdi
0x30(%r12),%rbx
incl 0xd0(%rbx)
oxfffffa0130ad5 
%rbx,%rbx
0x160(%rbx),%rbx 一
θxfffffffa0130bef 
oxfffff80138413 
%eax,&eax
$0xffffffffa01413ba,%rdi
oxfffffa0130bef 
%eax,eax
oxffffff802balle  --①
---
## Page 199
icmpv6_send()函数内直接展开。
该函数被声明为 inline，因此在反汇编代码上并不表现为函数调用，而是在
与反汇编结果的①对应的就是。看看in6_dev_get()就会发现正在寻找read_lock()。
这样就能知道位于下面的位置。
总结以上内容可知，LIMIT_NETDEBUG()调用附近有个read_Lock （&adrconf_Lock)，
也就是说，③处执行的代码是read_lock(&addrconf_Lock);。
read_Llock()的参数，用crash命令查看一下这个参数是什么。
[include/net/addrconf.h]
[net/ipv6/icmp.c]
ffffffa0158ebo (d) addrconf_lock
crash> sym 0oxffffffa158eb0
in6_dev_get(struct net_device *dev)
static inline struct inet6_dev *
11
struct inet6_dev *idev = NULL;
idev = in6_dev_get(skb->dev);
if (lenip6_ptr; -
read_lock(&addrconf_lock);
atomic_inc(&idev->refcnt);
 goto out_dst_release;
LIMIT_NETDEBUG(—
struct net_device *dev)
www.TopSage.com
HACK#33  kernel panic（空指针引用篇）
①@
1181
188
---
## Page 200
189
图5-1Oops发生之前的调用流程
进一步进行源代码跟踪，可知问题发生时的调用流程如图5-1所示。
根据源代码调查处理内容
指针为NULL。传递给in6_dev_get(）的参数为 skb->dev，因此skb->dev为NULL就是
偏移量0x160是net_device结构的成员ip6_ptr,那么RBX指向的地址就是in6_dev_
方就是这里的。
偏移量为0x160字节。就是它，Oops发生的地方，也就是说反汇编中的④对应的地
的ip6_ptr成员的偏移量。
可知与反汇编结果的③对应的地方是。另外，我们看看用到的net_device 结构
直接原因。
get（）的参数dev。Oops信息的寄存器转储中，RBX值为0，可知问题发生时dev
182|
mov 0x160(%rbx),%rbx
[0x160]void *ip6_ptr;
structnet_device{
crash> struct-0 net_device.ip6_ptr
output radix:16(hex)
crash>hex
第5章实践内核调试
raw6_sendmsg()
→
ip6_push_pending_ frames()
raw6_push_pending_frames()
g
www.TopSage.com
+
xfm6_tunnel_ check_size()
icmpv6_send()
in6_dev_get() --> Oops!!
---
## Page 201
2.6.12 中改正。
树上搜索相关修改，就发现了下面这段补丁。该问题已被社区发现，在内核版本
像 Linux 内核等开源软件的 bug 通常已被社区修改了，因此在 Linus Torvals 的 git 
检查社区的修改历史
超出 MTU 大小就应该给发包方返回错误，这段代码似乎漏掉了这一点。
正在建立 socket 缓冲区（skb），因此 skb->dev 还未设置，仍然处于 NULL 的状态
备 skb->dev为 NULL，导致 Oops 发生。再进一步，此时正在试图向 IPsec 隧道发包,
总结一下，ping6 命令后调用了 icmpv6_send()，但表示 icmpv6_send()试图送信的设
隧道的MTU，因此它返回了ICMPv6包过大的错误。
阅读xfrm6_tunnel_check_size()函数就能明白，由于试图发送的包长度超过了IPsec
index 601a148..6b98677 100644
diff --git a/net/ipv6/xfrm6_output.c b/net/ipv6/xfrm6_output.c
Date: Mon May 23 13:11:07 2005 -0700
Author: Herbert Xu 
commit 180e42503300629692b513daeb55a6bb0b51500c
static int xfrm6_tunnel_check_size(struct sk_buff *skb)
[net/ipv6/xfrm6_output.c]
 Signed-off-by: David S. Miller 
Acked-by: Hideaki YOSHIFUJI 
Signed-off-by: Herbert Xu 
[IPV6]: Fix xfrm tunnel oops with large packets
/*如果包长度超过IPseC 隧道的MTU，就返回ICMP错误*/
if (skb->len > mtu) {
ret = -EMSGSIZE;
icmpv6_send(skb, ICMPV6_PKT_TOOBIG, 0, mtu, skb->dev);
www.TopSage.com
HACK#33 kernel panic（空指针引]用篇）丨183
len > mtu) {
本hack介绍利用测试程序调试链表破坏的方法。
kernel panic（链表破坏篇）
 skb->dev = dst->dev;
  NI 9AdI = n 
ret = -EMSGSIZE;
icmpv6_send(skb, ICMPV6_PKT_T00BIG, 0, mtu, skb->dev);
www.TopSage.com
一安部东洋
最
---
## Page 203
注1：
量多地添加项目，所以这里添加了1000个。
第1个线程list_add_thread()向链表中添加10000 个链表项。为复现 bug，需要尽
insmod启动产。
复现程序是个内核模块，下面是部分代码。操作链表的 3个内核线程通过模块的
复现测试程序的内容
表 5-1链表操作函数和宏 
表 5-1列出了代表性的函数和宏。
复现测试程序包含了 include/几inux/几ist.h头文件,其中定义了链表操作函数和宏。
list_for_each
list_entry
list_empty
list_del
list_add
链表操作函数和宏
static int list_ad thread(void *data)
#include 
} while (!kthread_should_stop());
广
int i;
测试程序可以在本书的支持页面（http://www.oreily.co.jp/books/9784873114040/）上
下载。
msleep(200);
spin_unlock(&trouble.lock); -
for (i =0; ilist,&trouble.list); /* 添加项目到 trouble 链表*/ 
entry = kmalloc(sizeof(struct kentry),GFP_ATOMIC);
 struct k_entry *entry;
INIT_LIST_HEAD(&entry->List);/*初始化链表 */
遍历链表项
获取链表项(由链表指针获取链表项的结构）
检查链表是否为空
从链表中删除一项
内容
向开头添加一项
www.TopSage.com
/*创建10000个链表项*/
HACK#34kernel panic（链表破坏篇）
|185
192
---
## Page 204
第3 个线程list_del_thread()在链表非空时删除一个链表项。
第 2 个线程list_release_thread()将所有非空链表中的链表项删除。
186 ↓
static int list_del_thread(void *data)
static int list_release_thread(void *data)
J while (!kthread_should_stop();
return 0;
} while (!kthread_should_stop());
d ←
return 0;
第5章实践内核调试
msleep(l);
if (!list_empty(&trouble.List))/*确认链表是否为空/*一
msleep(100);
spin_unlock(&trouble.lock); 
while(!list_empty(&trouble,list)) /*检查链表是否为空*/
spin_lock(&trouble.lock);
 struct k_entry *entry;
kfree(entry) ;
 struct k_entry *entry;
spin_unlock(&trouble.lock); --.
entry = list_entry(trouble.list.next, struct k_entry, list);
spin_lock(&trouble.lock); 