**作者： 天融信阿尔法实验室**  
**原文链接：**
最近研究了safari浏览器JavascriptCore引擎的一个OOB漏洞CVE-2018-4441，虽然这是一个比较老的漏洞，但是研究这个漏洞还是能学到不少东西。这里介绍了jsc环境搭建的方法和jsc一些基本调试技巧，详细分析了CVE-2018-4441的漏洞成因和lokihardt堆喷修改数组长度构成OOB的方法，希望读者读完能有所收获。
### 环境搭建
#### 下载源码
下载源码使用
    git clone https://git.webkit.org/git/WebKit.git WebKit
如下载的源码较旧需更新源码到最新日期则使用
    git fetch --all
    git reset --hard origin/master
    git pull
切换到包含漏洞的commit_hash，这里我没有找到很好的方法，我使用的方法是搜索CVE-2018-4441的修复日期fix_date，然后从webkit的github上搜索小于fix_date的commit，即`committer-date:argumentCount()  Object: 0x7fffb30b4340 with butterfly 0x7fe0000e4010 (Structure 0x7fffb30f2c30:[Array, {}, CopyOnWriteArrayWithInt32, Proto:0x7fffb30c80a0, Leaf]), StructureID: 102
其中jsc的数组存储规则定义在`/Source/JavaScriptCore/runtime/ArrayConventions.h`里。elements的存储定义如下，
    //   * Where (i  Object: 0x7fffb30b4340 with butterfly 0x7fe0000fe6e8 (Structure 0x7fffb30f2b50:[Array, {}, ArrayWithArrayStorage, Proto:0x7fffb30c80a0, Leaf]), StructureID: 100
此时jsc开辟了新的ArrayStorage并把butterfly指向新的ArrayStorage。butterfly(0x7fe0000fe6e8)
    0x7fe0000fe6d8: 0x00000000badbeef0  0x0000000100100000
    0x7fe0000fe6e8: 0x0000000000000000  0x0000000100000000
    0x7fe0000fe6f8: 0xffff000000000001  0x00000000badbeef0
在执行arr.splice(0, 0x11)，移除0x11个元素后butterfly变为
    0x7fe0000fe6d8: 0x00000000badbeef0  0x00000001000fffef
    0x7fe0000fe6e8: 0x0000000000000000  0xfffffff000000000
    0x7fe0000fe6f8: 0x0000000000000000  0x00000000badbeef0
poc中重新设置arr的长度arr.length = 0xfffffff0，此时butterfly变为
    0x7fe0000fe6d8: 0x00000000badbeef0  0x00000001fffffff0
    0x7fe0000fe6e8: 0x0000000000000000  0xfffffff000000000
    0x7fe0000fe6f8: 0x0000000000000000  0x00000000badbeef0
继续调用arr.splice(0xfffffff0, 0, 1)添加元素时发现jsc运行崩溃
崩溃时写的地址为`0x7ff0000fe6e8+0xfffffff0*8+0x10=0x7FF8000FE678`，0x7FF8000FE678不可写导致崩溃
    pwndbg> vmmap 0x7FF8000FE678
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
        0x7ff400000000     0x7ffc00000000 ---p 800000000 0 
#### 漏洞根源分析
poc崩溃时栈回溯如下
    pwndbg> bt
    #0  JSC::JSArray::unshiftCountWithArrayStorage (this=0x7fffb30b4340, exec=0x1, startIndex=, count=1, storage=0x7ff0000fe6e8) at ../../Source/JavaScriptCore/runtime/JSArray.cpp:1060
    #1  0x00000000013a3369 in JSC::JSArray::unshiftCountWithAnyIndexingType (this=0x7fffb30b4340, exec=0x7fffffffcde0, startIndex=4294967280, count=) at ../../Source/JavaScriptCore/runtime/JSObject.h:863
    #2  0x00000000012c19af in JSC::JSArray::unshiftCountForSplice (this=, exec=, startIndex=, count=) at ../../Source/JavaScriptCore/runtime/JSArray.h:149
    #3  JSC::JSArray::unshiftCount (this=, count=, exec=, startIndex=) at ../../Source/JavaScriptCore/runtime/JSArray.h:158
    #4  JSC::unshift (exec=0x7fffffffcde0, thisObj=0x7fffb30b4340, header=, currentCount=0, resultCount=, length=4294967280) at ../../Source/JavaScriptCore/runtime/ArrayPrototype.cpp:361
    #5  0x00000000012b6b2a in JSC::arrayProtoFuncSplice (exec=0x7fffffffcde0) at ../../Source/JavaScriptCore/runtime/ArrayPrototype.cpp:1091
    #6  0x00007fffb39ff177 in ?? ()
    #7  0x00007fffffffce70 in ?? ()
    #8  0x0000000001126f00 in llint_entry ()
我分析这个漏洞根本原因的方法是先从ECMAScript查了下Array.prototype.splice方法的实现，然后从崩溃的开始JSC::arrayProtoFuncSplice函数分析。
JSC:
arrayProtoFuncSplice的大致逻辑是找到splice调用时的数组起点actualstart并根据参数个数来对数组进行删除元素或添加元素，删除或添加元素使用的是shift或unshift。
poc中第一次调用arr.splice(0,
0x11)删除元素时使用的是shift，并最终由于arr类型为ArrayWithArrayStorage调用到shiftCountWithArrayStorage。
    bool JSArray::shiftCountWithArrayStorage(VM& vm, unsigned startIndex, unsigned count, ArrayStorage* storage)
    {
    ......
        // If the array contains holes or is otherwise in an abnormal state,
        // use the generic algorithm in ArrayPrototype.
        if ((storage->hasHoles() && this->structure(vm)->holesMustForwardToPrototype(vm, this)) 
            || hasSparseMap() 
            || shouldUseSlowPut(indexingType())) {
            return false;
        }
        if (!oldLength)
            return true;
        unsigned length = oldLength - count;   
        storage->m_numValuesInVector -= count;
        storage->setLength(length);
在shiftCountWithArrayStorage进行了一些列判断来决定array是否使用ArrayPrototype中的方法处理splice调用中的删除元素操作，若这一系列判断条件全部为假则执行`storage->m_numValuesInVector
-=
count`对splice调用中的数组`storage->vectorLength`赋值的操作，实际上这一系列的判断是存在缺陷的，漏洞的根源也就出在这里。产生漏洞的原因即判断条件全部为假时m_numValuesInVector和array.length我们可控，在随后的分析中我们可以看到这两个值可控会导致添加元素调用unshiftCountWithArrayStorage时实际storage->hasHoles()为真的数组返回为假，在memmove初始化新的storage时导致OOB。
shiftCountWithArrayStorage中首先判断了hasHoles，jsc中storage->hasHoles()实际上判断的是`\*(dword\*)(&butterfly+0xc)==\*(dword\*)(&butterfly-0x4)`，即storageLength==vectorLength，
此时由于`m_numValuesInVector!=storage->length`，hasHoles为真。butterfly(0x7ff0000fe6e8)