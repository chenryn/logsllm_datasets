### 优化后的文本

**操作步骤：**
1. 将所有文件备份到外部存储介质。
2. 运行 `fdisk` 格式化磁盘。
3. 从原版的 CD-ROM 重新安装操作系统。
4. 从外部存储介质恢复文件。

**问题：**
请指出上述操作中的两个错误。

---

**问题 37：**
在 UNIX 中是否存在共事者病毒（即不改动已有文件的病毒）？如果可能，为什么？如果不可能，为什么？

---

**问题 38：**
病毒和蠕虫之间的区别是什么？它们各自是如何繁殖的？

---

**问题 39：**
自解压缩文件将一个或多个文件与一个提取程序打包在一起，通常用于发布程序或更新程序。请讨论这种文件的安全特性。

---

**问题 40：**
讨论如何编写一个程序来检测输入程序是否包含病毒的可能性。

---

**问题 41：**
9.8.1 节描述了通过一系列防火墙规则将外界访问限制在仅有的三个服务上。请描述另一个可以添加到此防火墙上的规则集，以进一步严格限制对这些服务的访问。

---

**问题 42：**
在某些计算机上，图 9-37b 使用的 `SHR` 指令用“0”填充未使用的位；而在其他计算机上，位向右移。对于图 9-37b 来说，使用不同的移位指令是否会影响正确性？如果有影响，哪种移位方法更好一些？

---

**问题 43：**
为了验证 Applet 是否由可信的供应商标记，Applet 供应商可以提供由可信第三方签署的证书，其中包括其公钥。然而，用户需要可信第三方的公钥来读取证书，这又需要第四方的公钥。这看起来是一个无法解决的验证问题，但实际上浏览器可以做到这一点。为什么？

---

**问题 44：**
描述使得 Java 成为比 C 更安全的编程语言的三个特征。

---

**问题 45：**
假设你的系统使用 JDK 1.2。给出允许来自 www.appletsRus.com 的小应用程序在你的机器上运行时你使用的规则（类似于图 9-39 中的那些规则）。这个小应用程序可能会从 www.appletsRus.com 下载额外的文件，在 `/usr/tmp/` 目录中读写文件，并从 `/usr/me/appletdir` 目录中读取文件。

---

**问题 46：**
用 C 语言或 shell 脚本编写一对程序，通过 UNIX 系统中的隐蔽信道发送和接收消息。提示：即使当文件不可访问时也可以看到权限位，通过设置参数的方法，确保 `sleep` 命令或系统调用被延迟一段固定的时间。请测量在一个空闲系统上的数据率，然后通过启动大量的后台进程人为创建较大的负载，再次计算数据率。

---

**问题 47：**
一些 UNIX 系统使用 DES 算法加密密码。这些系统通常连续 25 次应用 DES 算法来生成加密密码。从网上下载一个 DES 的实现，编写一个程序来加密一个密码，并检查该密码是否有效。使用 Morris-Thompson 保护机制生成一个包含 10 个加密密码的列表。使用 16 位盐。

---

**问题 48：**
假设一个系统使用访问控制表 (ACL) 维护其保护矩阵。根据以下情况编写一组管理函数：
1. 创建一个新的项目。
2. 删除一个对象。
3. 创建一个新的域。
4. 删除一个域。
5. 授予一个域对一个对象的新访问权限（r、w 和 x 的某种组合）。
6. 撤销已存在的对一个域的对象的访问权限。
7. 授予某个对象对所有域的访问权限。
8. 撤销某个对象对所有域的访问权限。

---

### 第 10 章 实例研究 1：Linux

在前面的章节中，我们学习了许多关于操作系统的原理、抽象、算法和技术。现在，我们将分析一些具体的操作系统，看看这些原理在现实世界中的应用。我们将从 Linux 开始，它是 UNIX 的一个非常流行的衍生版本，可以在各种计算机上运行。Linux 不仅是高端工作站和服务器上的主流操作系统之一，还在从移动电话到超级计算机的各种系统中得到广泛应用。Linux 系统体现了许多重要的操作系统设计原理。

#### 10.1 UNIX 与 Linux 的历史

##### 10.1.1 UNICS
回到 20 世纪 40 年代至 50 年代，当时使用计算机的标准方式是租用一个小时的机时，然后在这个小时内独占整台机器。虽然这些机器体积庞大，但在任何时候只有一个人（程序员）能使用它们。当批处理系统在 20 世纪 60 年代兴起时，程序员将任务记录在打孔卡片上并提交到机房。当机房积累了足够的任务后，操作员会在一次批处理中处理这些任务。因此，程序员往往在提交任务后几个小时才能得到结果。在这种情况下，调试成为一个耗时的过程，因为一个错位的逗号都会导致程序员浪费数小时。

为了摆脱这种低效的设计安排，Dartmouth 学院和 M.I.T. 发明了分时系统。Dartmouth 系统只能运行 BASIC，并且在短暂的商业成功后消失了。M.I.T. 的 CTSS 系统用途广泛，在科学界取得了巨大成功。不久之后，来自 Bell 实验室和通用电气的研究人员与 M.I.T. 合作开始设计第二代系统 MULTICS（多路复用信息与计算服务）。

尽管 Bell 实验室是 MULTICS 项目的创始方之一，但它后来退出了该项目，留下 Ken Thompson 寻找新的研究方向。他最终决定在一台废弃的 PDP-7 小型机上自己编写一个精简版的 MULTICS（使用汇编语言）。尽管 PDP-7 体积很小，但 Thompson 的系统实际上可以工作并且能够支持他的开发成果。随后，Bell 实验室的另一位研究人员 Brian Kernighan 半开玩笑地将其称为 UNICS（单路信息与计算服务）。尽管 “EUNUCHS” 是对 MULTICS 的戏谑，但这个名字保留了下来，并最终演变为 UNIX。

##### 10.1.2 PDP-11 上的 UNIX
Thompson 的工作给他在 Bell 实验室的同事留下了深刻印象，很快 Dennis Ritchie 加入进来，接着是他所在的整个部门。在这段时间里，UNIX 系统有两个重大发展。首先，UNIX 从过时的 PDP-7 计算机移植到了更现代的 PDP-11/20，然后是 PDP-11/45 和 PDP-11/70。后两种机器在 20 世纪 70 年代占据了小型计算机的主要市场。PDP-11/45 和 PDP-11/70 功能更为强大，具有较大的物理内存（分别为 256KB 和 2MB），并且有内存保护硬件，可以同时支持多个用户。然而，它们都是 16 位机器，限制了单个进程只能拥有 64KB 的指令空间和 64KB 的数据空间，即使机器提供了远大于此的物理内存。

第二个发展与编写 UNIX 的编程语言有关。直到那时，为每台新机器重写整个系统显然是一件很无趣的事情，因此 Thompson 决定用自己设计的一种高级语言 B 重写 UNIX。B 是 BCPL 的简化版（BCPL 本身是 CPL 的简化版，而 CPL 类似于 PL/I，从未真正好用过）。由于 B 语言的种种缺陷，尤其是缺乏数据结构，这次尝试并不成功。随后，Ritchie 设计了 B 语言的后继者，命名为 C。Ritchie 同时为 C 编写了一个出色的编译器。Thompson 和 Ritchie 一起工作，用 C 重写了 UNIX。C 语言在恰当的时间出现，从此统治了操作系统编程。

1974 年，Ritchie 和 Thompson 发表了一篇关于 UNIX 的里程碑式的论文（Ritchie 和 Thompson，1974）。由于他们在论文中介绍的工作，他们随后获得了享有盛誉的图灵奖（Ritchie，1984；Thompson，1984）。这篇论文的发表使许多大学向 Bell 实验室索要 UNIX 的副本。由于 Bell 实验室的母公司 AT&T 在当时作为垄断企业受到监管，不允许经营计算机业务，它很愿意通过向大学出售 UNIX 获取适度的费用。

一个偶然事件往往能够决定历史。PDP-11 正好是几乎所有大学的计算机系选择的计算机，而 PDP-11 预装的操作系统使大量的教授和学生望而生畏。UNIX 很快填补了这个空白。这在很大程度上是因为 UNIX 提供了全部的源代码，人们可以（实际上也确实这么做了）不断地进行修补。大量科学会议围绕 UNIX 举行，在会上杰出的演讲者们站在台上介绍他们在系统核心中找到并改正的隐蔽错误。一位澳大利亚教授 John Lions 用通常是为乔叟（Chaucer）或莎士比亚（Shakespeare）作品保留的格式为 UNIX 的源代码编写了注释（1996 年以 Lions 的名义重新印刷）。这本书介绍了版本 6，之所以这么命名是因为它出现在 UNIX 程序员手册的第 6 版中。源代码包含 8200 行 C 代码以及 900 行汇编代码。由于以上所有这些活动，关于 UNIX 系统的新想法和改进迅速传播开来。

几年内，版本 6 被版本 7 取代，后者是 UNIX 的第一个可移植版本（运行在 PDP-11 和 Interdata 8/32 上），已经有 18,800 行 C 代码以及 2100 行汇编代码。在版本 7 上培养了整整一代的学生，这些学生毕业后进入业界工作，促进了它的传播。到了 20 世纪 80 年代中期，各个版本的 UNIX 在小型机和工程工作站上已广为使用。许多公司甚至买下源代码版权开发自己的 UNIX 版本，其中有一家年轻的小公司叫做 Microsoft（微软），它以 XENIX 的名义出售版本 7 多年，直到它的兴趣转移到了其他方向。

##### 10.1.3 可移植的 UNIX
既然 UNIX 是用 C 编写的，将其移动或移植到新机器上比早先容易得多。移植首先需要为新机器编写一个 C 编译器，然后需要为新机器的 I/O 设备（如显示器、打印机、磁盘等）编写设备驱动。虽然驱动的代码是用 C 编写的，但由于没有两个磁盘按照同样的方式工作，它不能直接移植到另一台机器并在那台机器上编译运行。最终，一小部分依赖于机器的代码（如中断处理或内存管理程序）必须重写，通常使用汇编语言。

从 PDP-11 向外的第一次移植是到 Interdata 8/32 小型机上。这次实践显示出 UNIX 在设计时暗含了一大批关于系统运行机器的假定，例如假定整型的大小为 16 位，指针的大小也是 16 位（暗示程序最大容量为 64KB），还有机器刚好有三个寄存器存放重要的变量。这些假定没有一个与 Interdata 机器的情况相符，因此整理修改 UNIX 需要大量的工作。

另一个问题来自 Ritchie 的编译器。尽管它速度快，能够产生高质量的目标代码，但这些代码只是基于 PDP-11 机器。有别于针对 Interdata 机器编写一个新编译器的通常做法，Bell 实验室的 Steve Johnson 设计并实现了可移植的 C 编译器，只需要适量的修改工作就能够为任何设计合理的机器生成目标代码。多年来，除了 PDP-11 以外几乎所有机器的 C 编译器都是基于 Johnson 的编译器，因此 Johnson 的工作极大地促进了 UNIX 在新计算机上的普及。

由于所有的开发工作都必须在惟一可用的 UNIX 机器 PDP-11 上进行，而这台机器正好在 Bell 实验室的第五层，而 Interdata 在第一层，因此最初向 Interdata 机器的移植进度缓慢。生成一个新版本意味着在五楼编译，然后把一个磁带搬到一楼去检查这个版本是否能用。在搬了几个月的磁带后，有人提出：“要知道我们是一家电话公司，为什么我们不把两台机器用电线连接起来？”这样，UNIX 网络诞生了。在移植到 Interdata 之后，UNIX 又移植到 VAX 和其他计算机上。

在 AT&T 于 1984 年被美国政府拆分后，它获得了设立计算机子公司的法律许可，并很快就这样做了。不久，AT&T 发布了第一个商业化的 UNIX 产品——System III。它并没有被很好地接受，因此在一年之后就被改进的版本 System V 取代。关于 System IV 发生了什么，这是计算机科学史上最大的未解之谜之一。最初的 System V 很快就被 System V 的第 2 版、第 3 版和第 4 版取代，每一个新版本都更加庞大和复杂。在这个过程中，UNIX 系统背后的初始思想——一个简单、精致的系统——逐渐消失了。尽管 Ritchie 和 Thompson 的小组之后开发了 UNIX 的第 8 版、第 9 版和第 10 版，但由于 AT&T 把所有的商业力量都投入到推广 System V 中，它们并没有得到广泛的传播。然而，UNIX 的第 8 版、第 9 版和第 10 版的部分思想最终被包含在 System V 中。AT&T 最终决定，它毕竟是一家电话公司而不是一家计算机公司，因此在 1993 年将 UNIX 的业务卖给了 Novell。Novell 随后在 1995 年将其卖给 Santa Cruz Operation。那时候谁拥有 UNIX 的业务已经无关紧要了，因为所有主要的计算机公司都已经拥有了其许可证。

##### 10.1.4 Berkeley UNIX