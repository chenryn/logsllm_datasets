如果标签值有空格，请在标签中使用引号:
```
LABEL LongDescription="This label value extends over new \ 
line." 
```
如果标签值很长，请使用反斜杠将标签值扩展到新行。
```
LABEL key1=value1 
LABEL key2=value2 
```
一个映像的多个标签可以通过**行尾** ( **EOL** )分隔来定义。请注意，在这种情况下，将为两个不同的`LABEL`指令创建两个映像层。
关于`LABEL`说明的注意事项:
*   标签按照 Dockerfile 中的描述和`FROM`指令中指定的基础映像中的标签一起整理
*   如果标签中的`key`重复，后面的标签将覆盖前面定义的键的值。
*   尝试在单个`LABEL`指令中指定所有标签，以产生高效的映像，从而避免不必要的映像层数
*   要查看构建映像的标签，请使用`docker inspect `命令
**工作台**
该指令用于设置 Dockerfile 中后续`RUN`、`ADD`、`COPY`、`CMD`、`ENTRYPOINT`指令的工作目录。
在 Dockerfile 中定义一个工作目录，容器中引用的所有后续相对路径都将相对于指定的工作目录。
以下是使用`WORKDIR`指令的例子:
```
WORKDIR /opt/myapp 
```
前面的指令指定`/opt/myapp`作为后续指令的工作目录，如下:
```
WORKDIR /opt/ 
WORKDIR myapp 
RUN pwd 
```
前面的指令定义了工作目录两次。注意第二个`WORKDIR`将相对于第一个`WORKDIR`。`pwd`命令的结果将是`/opt/myapp`:
```
ENV SOURCEDIR /opt/src 
WORKDIR $SOURCEDIR/myapp 
```
工作目录可以解析前面定义的环境变量。在本例中，`WORKDIR`指令可以评估`SOURCEDIR`环境变量，结果工作目录将是`/opt/src/myapp`。
**用户**
这将设置用户运行任何后续的`RUN`、`CMD`和`ENTRYPOINT`指令。这还会在创建容器并从映像运行时设置用户。
以下指令为映像和容器设置用户`myappuser`:
```
USER myappuser 
```
关于`USER`说明的注意事项:
*   可以使用容器的`docker run`命令中的`--user=name|uid[:]`覆盖用户
# 映像测试和调试
虽然我们可以称赞容器的好处，但故障排除和有效监控它们目前存在一些复杂性。因为根据设计，容器是孤立运行的，所以它们产生的环境可能是多云的。有效的故障排除通常需要外壳进入容器本身，再加上安装额外的 Linux 工具来仔细阅读信息的复杂性，这是调查难度的两倍。
通常，用于对我们的容器和映像进行有意义的故障排除的可用工具、方法和途径需要在每个容器中安装额外的包。这将导致以下结果:
*   直接连接或附着到容器上的要求，这并不总是一件小事
*   一次检查一个容器的限制
加剧这些困难，用这些工具给我们的容器增加不必要的膨胀是我们最初在计划中试图避免的事情；极简主义是我们最初在使用容器时寻找的优势之一。接下来让我们看看如何通过一些基本命令合理地收集容器映像上的有用信息，以及调查允许我们从外部监控和排除容器故障的紧急应用。
## 用于故障排除的 Docker 详细信息
现在您已经有了运行 Docker 的映像(不考虑构建方法)，让我们做一些测试，以确保一切都与我们的构建相一致。虽然这些看起来可能是常规和平凡的，但运行以下任何一项或全部作为自上而下的故障排除方法是一个很好的做法。
这里的前两个命令简单得可笑，看起来太普通了，但是将提供基础级别的细节，以此开始任何下游故障排除工作- `$ docker version`和`$ docker info`。
## Docker 版本
让我们确保首先识别我们正在运行的 Docker、Go 和 Git 版本:
```
$ sudo docker version
```
## Docker 信息
此外，我们应该了解我们的主机操作系统和内核版本，以及存储、执行和日志驱动程序。了解这些可以帮助我们从*自上而下*的角度进行故障排除:
```
$ sudo docker info
```
## Debian/Ubuntu 故障排除注意事项
从`$ sudo docker info`命令，您可能会收到以下一个或两个警告:
```
WARNING: No memory limit support 
WARNING: No swap limit support
```
您需要向内核添加以下命令行参数，以便启用内存和交换记帐:
```
cgroup_enable=memory swapaccount=1
```
对于这些 Debian 或 Ubuntu 系统，如果使用默认的 GRUB 引导加载程序，可以通过编辑`/etc/default/grub`和扩展`GRUB_CMDLINE_LINUX`来添加那些参数。找到以下行:
```
GRUB_CMDLINE_LINUX="" 
```
然后，将其替换为以下内容:
```
GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1" 
```
然后，运行`update-grub`并重启主机。
## 列出已安装的 Docker 映像
我们还需要确保容器实例已经在本地安装了您的映像。SSH 进入 docker 主机并执行`docker images`命令。您应该会看到您的 docker 映像列表，如下所示:
```
$ sudo docker images
```
*如果我的形象没有出现怎么办？*检查代理日志，确保您的容器实例能够通过卷曲注册表并打印出可用的标签来联系您的 docker 注册表:
```
curl [need to add in path to registry!]
```
### 注
**什么$ sudo docker images 告诉我们:**我们的容器映像已成功安装在主机上。
## 手动启动 Docker 映像
现在我们知道我们的映像安装在主机上，我们需要知道 Docker 守护程序是否可以访问它。一种确保您的映像可以在容器实例上运行的简单测试方法是尝试从命令行运行您的映像。这里还有一个额外的好处:我们现在有机会额外检查应用日志，以便进一步排除故障。
让我们看看下面的例子:
```
$ sudo docker run -it [need to add in path to registry/latest bin!]
```
### 注
**什么$ sudo docker 运行告诉我们:**我们的容器映像可以从 docker 守护程序访问，并且还提供了可访问的输出日志，用于进一步的故障排除。
*如果我的映像不运行怎么办？*检查任何运行的容器。如果目标容器没有在主机上运行，则可能存在阻止其启动的问题:
```
$ sudo docker ps
```
当容器无法启动时，它不会记录任何内容。容器启动过程的日志输出位于主机上的`/var/log/containers`中。在这里，你会发现遵循`_start_errors.log`命名惯例的文件。在这些日志中，您可以找到由我们的`RUN`命令生成的任何输出，并且是解决您的容器无法启动的原因的建议起点。
### 类型
**TIP:**log spout([https://github.com/gliderlabs/logspout](https://github.com/gliderlabs/logspout))是一个在 Docker 内部运行的 Docker 容器的日志路由器。Logsprout 连接到主机上的所有容器，然后将它们的日志路由到您想要的任何地方。
虽然我们也可以在尝试故障排除时仔细阅读`/var/log/messages`输出，但是我们还可以寻求一些其他途径，尽管会更加耗费人力。
## 从缓存中检查文件系统状态
正如我们已经讨论过的，在 Dockerfiles 中的每个成功的`RUN`命令之后，Docker 会缓存整个文件系统状态。我们可以利用这个缓存来检查失败的`RUN`命令之前的最新状态。
要完成任务:
*   除了任何和后续的`RUN`命令外，访问 Dockerfile 并注释掉失败的`RUN`命令
*   重新保存文件
*   重新执行`$ sudo docker build`和`$ sudo docker run`
## 映像层标识作为调试容器
每当 Docker 成功执行来自 Dockerfile 的`RUN`命令时，映像文件系统中的一个新层就会被提交。方便的是，您可以使用这些图层标识作为映像来启动一个新的容器。
以下面的 Dockerfile 为例:
```
FROM centos 
RUN echo 'trouble' > /tmp/trouble.txt 
RUN echo 'shoot' >> /tmp/shoot.txt 
```
如果我们从这个 Dockerfile 构建:
```
$ docker build -force-rm -t so26220957 .
```
我们将得到类似如下的输出:
```
Sending build context to Docker daemon 3.584 kB 
Sending build context to Docker daemon 
Step 0 : FROM ubuntu 
   ---> b750fe79269d 
Step 1 : RUN echo 'trouble' > /tmp/trouble.txt 
   ---> Running in d37d756f6e55 
   ---> de1d48805de2 
Removing intermediate container d37d756f6e55 
Step 2 : RUN echo 'bar' >> /tmp/shoot.txt 
Removing intermediate container a180fdacd268 
Successfully built 40fd00ee38e1
```
然后我们可以使用前面的映像图层标识从`b750fe79269d`、`de1d48805de2`和`40fd00ee38e1`开始新的容器:
```
$ docker run -rm b750fe79269d cat /tmp/trouble.txt 
cat: /tmp/trouble.txt No such file or directory 
$ docker run -rm de1d48805de2 cat /tmp/trouble.txt 
trouble 
$ docker run -rm 40fd00ee38e1 cat /tmp/trouble.txt 
trouble 
shoot
```
### 注
我们使用`--rm`来移除所有的调试容器，因为没有理由在后期运行时使用它们。
*如果我的容器构建失败了会发生什么？*由于没有在失败的构建上创建映像，因此我们没有用于标识的容器的散列。相反，我们可以记录前一层的 ID，并运行一个带有该 ID 外壳的容器:
```
$ sudo docker run --rm -it  bash -il
```
进入容器后，执行失败的命令，试图重现问题，修复命令并进行测试，最后用修复的命令更新 Dockerfile。
您可能还想启动一个 shell 并探索文件系统、尝试命令等等: