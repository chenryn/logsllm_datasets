**作者：LoRexxar'  
原文链接： **
在2019年初，微软正式选择了Chromium作为默认浏览器，并放弃edge的发展。并在19年4月8日，Edge正式放出了基于Chromium开发的Edge
Dev浏览器，并提供了兼容Chrome
Ext的配套插件管理。再加上国内的大小国产浏览器大多都是基于Chromium开发的，Chrome的插件体系越来越影响着广大的人群。
在这种背景下，Chrome Ext的安全问题也应该受到应有的关注，《从0开始入门Chrome
Ext安全》就会从最基础的插件开发开始，逐步研究插件本身的恶意安全问题，恶意网页如何利用插件漏洞攻击浏览器等各种视角下的安全问题。
  * [从0开始入门Chrome Ext安全（一） -- 了解一个Chrome Ext](https://lorexxar.cn/2019/11/22/chrome-ext-1/)
  * [从0开始入门Chrome Ext安全（二） -- 安全的Chrome Ext](https://lorexxar.cn/2019/12/05/chrome-ext-2/)
在经历了前两篇之后，我们把视角重新转换，把受害者的目标从使用插件者换到插件本身。对于Chrome ext本身来说，他会有什么样的问题呢？
PS:
当时这份研究是在2020年初做的，当时还在知道创宇的404实验室，感觉内容很有趣所以准备拿去当议题。2020年我想大家都懂的，很多会议都取消了，一拖就拖到2021年，本来打算拿去投KCON，但是没有通过。所以今天就整理整理发出来了~
## 从一个真实事件开始
在evernote扩展中曾爆出过一个xss漏洞
  * [Critical Vulnerability Discovered in Evernote’s Chrome Extension](https://guard.io/blog/evernote-universal-xss-vulnerability)
首先我们从manifest开始，存在问题的js是content js.
BrowserFrameLoader.js会被直接插入到http、https、ftp三个域内，由于all_frames，还会被直接插入到页面内的每一个iframe子框架下。
其中有这么一段代码比较关键
这段代码主要通过函数`_getBundleUrl`来生成要安装的js地址，而其中的e来自于resourcePath参数，这里本身应该通过传入形如`chrome-extension://...`这样的路径，以生成所需要的js路径。
可以看到`_getBundleUrl`中本身也没有验证，所以只要我们传入resourcePath为恶意地址，我们就可以通过这个功能把原本的js替换到，改为我们想要注册的js。
我们可以直接通过window.postMessage与后端沟通，传递消息。
再配合manifest中的all_frames，我们可以通过在某个页面中构造一个隐藏的iframe标签，其中使用window.postMessage传递恶意地址，导致其他页面引入恶意的js。
这样一来，如果带有这个插件的浏览者访问某个页面时，就会直接被大范围的攻击，那么这个漏洞的具体原理是什么样的呢？
# 浏览器插件安全逻辑
在研究插件的漏洞之前，首先我们需要从插件的结构和可以攻击的方式来思考。
[从0开始入门Chrome Ext安全（一） -- 了解一个Chrome
Ext](https://lorexxar.cn/2019/11/22/chrome-ext-1/)
在第一篇文章中，我们曾详细的描述过和chrome有关的诸多信息，其中有很重要的一部分是插件不同层级之间的通信方式，我们把这个结构画出来大概是这样的:
首先我们把插件的结构体系分为三级，分别是Web层、content层、bg层。
其中插件的 **web层** 主要是`injected
script`，在这部分中，主要漏洞就围绕js本身，原理上和普通的js漏洞没什么区别，这里就不深入讨论。
而 **content层** 中，这部分和Web层主要的区别是它可以访问很小一部分chrome
api，其中最重要的是，它可以和bg层进行沟通。抛开本身js漏洞不谈，content层最大的特殊就在于它是一个中转层，只有content构造的`chrome.runtime.sendMessage`可以向后端传递数据。
在 **bg层**
中，就涉及到了许多的敏感操作了，一旦可以控制bg层中的代码执行，我们几乎相当于控制了整个浏览器，但其中最大的限制仍然是，我们没办法直接操作bg层，浏览器想要操作bg层，就必须通过content层来中转。
- | js执行 | 可控点  
---|---|---  
web层 | 和普通js没有区别 |  
content层 | 除了普通js以外只能访问runtime等少部分api | 只能通过addEventListener或获取dom输入  
bg层 | 可以访问大部分api，但不能访问页面dom | 只能通过runtime.onmessage.addListener获取输入  
当我们在了解了chrome插件结构之后，不难发现， **当我们想要利用一个插件漏洞时，首先我们必须从可控出发.**
当我们可以控制某个敏感操作的一部分时，我们就有可能构造一次利用，一次完整的利用链就构造成功了。
而对于浏览器来说，符合正常人的逻辑的交互逻辑即为访问某个链接，或者访问某个页面。
**建立在这个基础上，通过构造恶意网页、链接，诱导受害人点击，从而开始进行一系列攻击行为则是对于插件安全漏洞的正确利用方向。**
而通过访问某个恶意页面配合插件的某个漏洞攻击，只有两个维度可以供我们攻击，在这里我们把这两种攻击方式分为两个维度， **基于Content层的安全问题**
和 **基于bg层的安全问题** 。
在下面我们就将围绕这两个维度来讲述。
# 基于content script的安全问题
在前面的篇幅中我曾详述过content script的相关信息，content
script会把相应的js插入到符合条件的所有页面中，而这个条件会在manifest中被定义。
    {
      "name": "My extension",
      ...
      "content_scripts": [
        {
          "matches": ["http://*.nytimes.com/*"],
          "exclude_matches": ["*://*/*business*"],
          "include_globs": ["*nytimes.com/???s/*"],
          "exclude_globs": ["*science*"],
          "all_frames": true,
          "js": ["contentScript.js"],
          "run_at": "document_idle"
        }
      ],
      ...
    }
其中几个参顺相对应的配置为：
  * matches: 匹配生效的域
  * exclued_matches: 不匹配生效的域
  * include_globs: 在前两项匹配之后生效的匹配关键字
  * exclude_globs: 在前两项匹配之后生效的排除关键字
  * all_frames: content script是否会插入到页面的iframe标签中
  * run_at: 指content script插入的时机
Content层和Web层是通过 **事件监听** 的方式沟通的：