转换字符说明了对输入字段的解释方式。对应的参数必须是指针。合法的转换字符如表
B•2 所示。
如果参数是指向 short 类型而非 int 类型的指针，则在转换字符 d、i、n、o、u 和 x 之前可以加上前缀 h。如果参数是指向 long 类型的指针，则在这几个转换字符前可以加上字 母 l。如果参数是指向 double 类型而非 float 类型的指针，则在转换字符 e、f 和 g 前可 以加上字母 l。如果参数是指向 long double 类型的指针，则在转换字符 e、f 和 g 前可以 加上字母 L。
表 B•2   scanf 函数的转换宇符
 转换字符              输入数据;参数类型
d
 十进制整数;int *
i
 整型数;int *。该整型数可以是八进制(以 0 开头)或十六进制(以 0x 或 0X 开头)
o
 八进制整型数(可以带或不带前导 0);int *
u
 无符号十进制整型数;unsigned int *
x
 十六进制整型数(可以带或不带前导 0x 或 0X);int *
c
 字符;char *，按照字段宽度的大小把读取的字符保存到制定的数组中，不增加'\0'字段宽度的默认值为 1。 在这种情况下，读取输入时将不跳过空白符。如果需要读入下一个非空白符，可以使用%1s
s
 由非空白符组成的字符串(不包含引号);char  *，它指向一个字符数组，该字符数组必须有足够空间，以 保存该字符串以及在尾部添加的'\0'字符
e
,
f
,
g            
 浮点数，float *。Float 类型浮点数的输入格式为:一个可选的正负号、一个可能包含小数点的数字串，
一个可选的指数字段(字母 e 或 E 后跟一个可能带正负号的整型数)
p
 printf("%p")函数调用打印的指针值;void *
n
 将到目前为止该函数调用读取的字符数写入对应的参数中;int *。部读取输入字符。不增加已转换的页目 计数
[...
]            
 与方括号中的字符集合匹配的输入字符中最长的非空字符串;char *。末尾将添加'\0'。[]...]表示集合 中包含字符“ ]”
[^...
]            
 与方括号中的字符集合不匹配的输入字符中最长的非空字符串;char *。末尾将添加'\0'。[^]...]表示 集合中不包含字符“ ]”
%
 表示“  %"，不进行赋值
int scanf(const char *format, ...) scanf(...)函数与 fscanf(stdin, ...)相同。
int sscanf(const char *s, const char *format, ...)
sscanf(s, ...)函数与 scanf(...)等价，所不同的是，前者的输入字符来源于字符 串 s。
B.1.4             字符输入/输出函数
int fgetc(FILE *stream)
fqetc 函数返回 stream 流的下一个字符，返回类型为 unsigned char(被转换为 int
类型)。如果到达文件末尾或发生错误，则返回 EOF。
char *fgets(char *s, int n, FILE *stream)
fgets 函数最多将下 n•1 个字符读入到数组 s 中。当遇到换行符时，把换行符读入到数 组 s 中，读取过程终止。数组 s 以'\0'结尾。fgets 函数返回数组 s。如果到达文件的末尾 或发生错误，则返回 NULL。
int fputc(int c, FILE *stream)
fputc 函数把字符 c(转换为 unsigned char 类型)输出到流 stream 中。它返回写 入的字符，若出错则返回 EOF。
int fputs(const char *s, FILE *stream)
fputs 函数把字符串 s(不包含字符'\n')输出到流 Btream 中;它返回一个非负值， 若出错则返回 EOF。
int getc(FILE *stream)
getc 函数等价于 fgetc，所不同的是，当 getc 函数定义为宏时，它可能多次计算
stream 的值。
int getchar(void)
getchar 函数等价于 getc(stdin)。
char *gets(char *s)
gets 函数把下一个输入行读入到数组 s 中，并把末尾的换行符替换为字符'\0'。它返 回数组 s，如果到达文件的末尾或发生错误，则返回 NULL。
int putc(int c, FILE *stream)
putc 函数等价于 fputc，所不同的是，当 putc 函数定义为宏时，它可能多次计算
stream 的值。
int putchar(int c)
putchar(c)函数等价于 putc(c, stdout)。 int puts(const char *s)
puts 函数把字符串 s 和一个换行符输出到 stdout 中。如果发生错误，则返回 EOF;否 则返回一个非负值。
int ungetc(int c, FILE *stream)
ungetc 函数把 c(转换为 unsigned char 类型)写回到流 stream 中，下次对该流 进行读操作时，将返回该字符。对每个流只能写回一个字符，且此字符不能是 EOF。ungetc 函数返回被写回的字符，如果发生错误，则返回 EOF。
B.1.5             直接输入/输出函数
size_t fread(void *ptr, size_t size, size_t nobj, FILE *stream) fread 函数从流 stream 中读取最多 nobj 个长度为 size 的对象，并保存到 ptr 指向
的数组中。它返回读取的对象数目，此返回值可能小于 nobj。必须通过函数 feof 和 ferror
获得结果执行状态。
size_t fwrite(const void *ptr, size_t size, size_t nobj, FILE *stream) fwrite 函数从 ptr 指向的数组中读取 nobj 个长度为 size 的对象，并输出到流 stream
中。它返回输出的对象数目。如果发生错误，返回值会小于 nobj 的值。
B.1.6               文件定位函数
int fseek(FILE *stream, long offset, int origin)
fseek 函数设置流 stream 的文件位置，后续的读写操作将从新位置开始。对于二进制 文件，此位置被设置为从 origin 开始的第 offset 个字符处。Origin 的值可以为 SEEK_SET (文件开始处)、SEEK_CUR(当前位置)或 SEEK_END(文件结束处)。对于文本流，offset 必须设置为 0，或者是由函数 ftell 返回的值(此时 origin 的值必须是 SEEK_SET)。fseek 函数在出错时返回一个非 0 值。
long ftell(FILE *stream)
ftell 函数返回 stream 流的当前文件位置，出错时该函数返回•lL。
void rewind(FILE *stream)
rewind(fp)函数等价于语句 fseek(fp, 0L, SEEK_SET);clearerr(fp)的执行 结果。
int fgetpos(FILE *stream, fpos_t *ptr)
fgetpos 函数把 stream 流的当前位置记录在*ptr 中，供随后的 fsetpos 函数调用使 用。若出错则返回一个非 0 值。
int fsetpos(FILE *stream, const fpos_t *ptr)
fsetpos 函数将流 stream 的当前位置设置为 fgetpos 记录在*ptr 中的位置。若出错 则返回一个非 0 值。
B.1.7               错误处理函数
当发生错误或到达文件末尾时，标准库中的许多函数都会设置状态指示符。这些状态指 示符可被显式地设置和测试。另外，整型表达式 errno(在中声明)可以包含一 个错误编号，据此可以进一步了解最近一次出错的信息。
void clearerr(FILE *stream)
clearerr 函数清除与流 stream 相关的文件结束符和错误指示符。
int feof(FILE *stream)
如果设置了与 stream 流相关的文件结束指示符，feof 函数将返回一个非 0 值，
int ferror(FILE *stream)
如果设置了与 stream 流相关的错误指示符，ferror 函数将返回一个非 0 值。
void perror(const char *s)
perror(s)函数打印字符串 s 以及与 errno 中整型值相应的错误信息，错误信息的具 体内容与具体的实现有关。该函数的功能类似于执行下列语句:
fprintf(stderr, "%s: %s\n", s, "error message");
有关函数 strerror 的信息，参见 B.3 节中的介绍。
B.2 字符类别测试:
头文件中声明了一些测试字符的函数。每个函数的参数均为 int 类型，参数 的值必须是 EOF 或可用 unsigned char 类型表示的字符，函数的返回值为 int 类型。如果 参数 c 满足指定的条件，则函数返回非 0  值(表示真)，否则返回 0(表示假)。这些函数包括:
isalnum(c)             函数 isalpha(c)或 isdigit(c)为真
isalpha(c)             函数 isupper(c)或 islower(c)为真 iscntrl(c)              c 为控制字符
isdigit(c)              c 为十进制数字 isgraph(c)              c 是除空格外的可打印字符 islower(c)              c 是小写字母 isprint(c)              c 是包括空格的可打印字符
ispunct(c)              c 是除空格、字母和数字外的可打印字符
isspace(c)              c 是空格、换页符、换行符、回车符、横向制表符或纵向制表符
isupper(c)              c 是大写字母
isxdigit(c)              c 是十六进制数字
在 7 位 ASCII 字符集中，可打印字符是从 0x20(' ')到 0x7E('~')之间的字符;控制 字符是从 0(NUL)到 0xlF(US)之间的字符以及字符 0x7F(DEL)。
另外，下面两个函数可用于字母的大小写转换: int tolower(int c)             将 c 转换为小写字母 int toupper(int c)             将 c 转换为大写字母
如果 c 是大写字母，则 tolower(c)返回相应的小写字母，否则返回 c。如果 c 是小写字母， 则 toupper(c)返回相应的大写字母，否则返回 c。
B.3 字符串函数:
头文件中定义了两组字符串函数。第一组函数的名字以 str 开头;第二组 函数的名字以 mem 开头。除函数 memmove 外，其它函数都没有定义重叠对象间的复制行为。 比较函数将把参数作为 unsigned char 类型的数组看待。
在下表中，变量 s 和 t 的类型为 char *;cs 和 ct 的类型为 const char *;n 的类 型为 size_t;c 的类型为 int(将被转换为 char 类型)。
char *strcpy(s,ct)
将字符串 ct(包括'\0')复制到字符串 s 中，并返
回 s
char *strncpy(s,ct,n)
将字符串 ct 中最多 n 个字符复制到字符串 s 中，并
返回 s。如果 ct 中少于 n 个字符，则用'\0'填充
char *strcat(s,ct)
将字符串 ct 连接到 s 的尾部，并返回 s
char *strncat(s,ct,n)
将字符串 ct 中最多前 n 个字符连接到字符串 s 的尾
部，并以'\0'结束;该函数返回 s
int strcmp(cs,ct)
比较字符串 cs 和 ct;当 csct 时，返回一个正
数
int strncmp(cs,ct,n)
将字符串 cs 中至多前 n 个字符与字符串 ct 相比较。
当 csct 时，返回一个正数
char *strchr(cs,c)
返回指向字符 c 在字符串 cs 中第一次出现的位置的
指针;如果 cs 中不包含 c，则该函数返回 NULL
char *strrchr(cs,c)
返回指向字符 c 在字符串 cs 中最后一次出现的位置
的指针;如果 cs 中不包含 c，则该函数返回 NULL