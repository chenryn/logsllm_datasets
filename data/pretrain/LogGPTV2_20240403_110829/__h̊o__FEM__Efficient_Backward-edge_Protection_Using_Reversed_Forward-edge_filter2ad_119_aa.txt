title:\(h̊o\)FEM: Efficient Backward-edge Protection Using Reversed Forward-edge
Mappings
author:Paul Muntean and
Matthias Neumayer and
Zhiqiang Lin and
Gang Tan and
Jens Grossklags and
Claudia Eckert
ρFEM: Efficient Backward-edge Protection Using Reversed
Forward-edge Mappings
Paul Muntean
Technical University of Munich
PI:EMAIL
Matthias Neumayer
Technical University of Munich
PI:EMAIL
The Pennsylvania State University
Gang Tan
PI:EMAIL
Jens Grossklags
Technical University of Munich
PI:EMAIL
Zhiqiang Lin
The Ohio State University
PI:EMAIL
Claudia Eckert
Technical University of Munich
PI:EMAIL
ABSTRACT
In this paper, we propose reversed forward-edge mapper (ρFEM), a
Clang/LLVM compiler-based tool, to protect the backward edges of
a program’s control flow graph (CFG) against runtime control-flow
hijacking (e.g., code reuse attacks). It protects backward-edge trans-
fers in C/C++ originating from virtual and non-virtual functions by
first statically constructing a precise virtual table hierarchy, with
which to form a precise forward-edge mapping between callees
and non-virtual calltargets based on precise function signatures,
and then checks each instrumented callee return against the pre-
viously computed set at runtime. We have evaluated ρFEM using
the Chrome browser, NodeJS, Nginx, Memcached, and the SPEC
CPU2017 benchmark. Our results show that ρFEM enforces less
than 2.77 return targets per callee in geomean, even for applications
heavily relying on backward edges. ρFEM’s runtime overhead is
less than 1% in geomean for the SPEC CPU2017 benchmark and
3.44% in geomean for the Chrome browser.
CCS CONCEPTS
• Security and privacy → Systems security; • Software and
application security;
KEYWORDS
Clang/LLVM, control flow integrity, hijacking attack, cyber defense.
ACM Reference Format:
Paul Muntean, Matthias Neumayer, Zhiqiang Lin, Gang Tan, Jens Grossklags,
and Claudia Eckert. 2020. ρFEM: Efficient Backward-edge Protection Using
Reversed Forward-edge Mappings. In Annual Computer Security Applications
Conference (ACSAC 2020), December 7–11, 2020, Austin, USA. ACM, New
York, NY, USA, 14 pages. https://doi.org/10.1145/3427228.3427246
1 INTRODUCTION
Control-flow hijacking attacks, such as return oriented program-
ming (ROP) [10], have threatened software systems for a long time.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC 2020, December 7–11, 2020, Austin, USA
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-8858-0/20/12...$15.00
https://doi.org/10.1145/3427228.3427246
These attacks proliferate mainly due to the fact that statically build-
ing a precise program control flow graph (CFG) is practically not
feasible. Building the CFG requires precise program alias analysis
of, e.g., source code, binary, intermediate representation (IR), which
is not tractable due to its undecidability [43]. Consequently, the
obtained CFG is an over- or under-approximation of the real pro-
gram’s CFG. In addition to control flow forward-edge (i.e., jump,
call) violations, backward-edge (i.e., ret) violations play a crucial
role in facilitating attacks.
In general, there are two main approaches to protect the integrity
of backward edges during runtime: (1) check-based approaches in-
cluding µRAI [2], PittyPat [18], CFL [7], PT-CFI [25], τCFI [34],
which check if the function ret instruction targets the legitimate
return address; and (2) stack-discipline-based approaches including
SafeStack [15], RAD [13], Microsoft’s RFG [52], Zieris et al. [55],
Shadesmar [11], BinCFI [54], GCC’s ShadowStack [19], and dou-
ble stacks [17]. However, most shadow stack techniques rely on
information hiding for security. Unfortunately, information hiding
(disclosure) based defenses are generally vulnerable [2] to infor-
mation disclosure [21, 42], profiling attacks [45] and to at least
four other attacks [22], which can be used independently to bypass
shadow stacks.
In this paper, we seek to design an alternative to shadow stack
techniques. We present ρFEM, a compile-time software instrumen-
tation tool used to enforce a fine-grained CFI-based policy for pro-
tecting backward edges against control-flow hijacking attacks. The
key idea is to use a precise compiler-generated program virtual ta-
ble hierarchy to protect virtual callee targets, and a precise reverse
forward-edge function signature mapping to protect non-virtual
callee targets. While previous work has adopted such an approach to
protect backward edges either through function signatures [38, 50]
or through class hierarchy analysis [26, 29, 39], we are not aware of
any other purely source code based solution that combines the two
approaches for a comprehensive protection. In terms of instrumen-
tation, in contrast to [1], which uses instruction prefetch, we use:
(1) NOPs allowing us to encode IDs into them; (2) multiple checks
for covering cases where the same function can be invoked directly
and indirectly; and (3) ID intervals which make the checks more
efficient.
A key advantage of ρFEM over previous tools (e.g., information
hiding) is that its instrumentation is write-protected at all times,
does not rely on information hiding, which is fundamentally broken
from a security perspective [11], does not use special purpose reg-
isters/segments, which may not be present on all types of systems,
466ACSAC 2020, December 7–11, 2020, Austin, USA
Paul Muntean, Matthias Neumayer, Zhiqiang Lin, Gang Tan, Jens Grossklags, and Claudia Eckert
and its metadata primitives can be easily re-purposed to protect
forward edges.
We have implemented ρFEM atop the Clang/LLVM [14] compiler
framework and evaluated it with a set of real-world programs
including all pure C/C++ programs contained in the SPEC CPU2017
benchmark. ρFEM has a low runtime overhead with them, while
maintaining high calltarget return address precision. Further, as
e.g., AIR [54], fAIR [50], and AIA [20] are not ideal (according to
Carlini et al. [12]) as these capture only average target-reduction
results, we use the RTR [35] metric to provide more detailed results
and insights.
In summary, we make the following contributions:
• We design a novel fine-grained backward-edge protection
technique that relies on reversed forward-edge mappings.
• We implement our technique based upon the Clang/LLVM
• We evaluate ρFEM thoroughly and report a runtime overhead
of 3.44% in geomean for the Chrome browser, less than 1% in
geomean for the SPEC CPU2017 benchmark, and 2.77 return
targets per callee in geomean for the tested programs.
compiler framework inside a prototype called ρFEM1.
2 BACKGROUND
2.1 Virtual Table Hierarchy
Figure 1: Virtual tables (vtable) of a single C++ class hierar-
chy.
Figure 1 depicts a single derived vtable type C with a parent
vtable P and grandparent vtable GP (i.e., the root class of both func-
tions f() and g()). An arrow depicts a parent-child class inheritance
relation. The arrow tip indicates the parent vtable whereas the
other arrow end indicates the child vtable. With regard to a specific
virtual callsite (which is used to call a virtual function contained
in this vtable hierarchy), we introduce the following definitions.
Precise class. The precise class of a callsite is the least-derived
type of which the object used at the callsite can be. Usually, the
precise class is the static type of the variable used for the virtual call.
In our example, we assume that we have a virtual callsite which
uses a variable of static type C. This static type is the precise class
of the callsite.
Base class. We define the base class as the class which provides
the function implementation which is called when an object of pre-
cise type is used, i.e., the object has a dynamic type of precise class.
Therefore, the vtable entry used for the object dispatch is located in
the vtable of precise class and, per definition, points to a function
of base class. It follows that if the precise class itself implements (or
overrides) the function used at the callsite, then the precise class
and the base class of the callsite are the same. Figure 1 depicts in
blue shaded color the vtable entries used, in case the object at the
callsite is of precise type (C). If the callsite dispatches function f(),
then the base class for this callsite is C, since C overrides function
1ρFEM Source code: https://github.com/TeamVault/rhoFEM
f(). If instead the callsite dispatches function g(), then the base class
for this callsite is P, because class C does not override function g()
and instead uses the implementation provided by class P.
Root class. The root class is defined as the class first introduc-
ing the function (i.e., the least-derived class declaring the function).
Note that this class might declare this function as abstract and
not provide any implementation for it.
2.2 Backward Control Flow Edges
The control flow of a program can be captured using a control flow
graph (CFG), in which the forward edges represent the function call
or (un)conditional jumps, and backward edges represent the return.
The return transfers in assembly code are usually represented by
return instructions and are used to return the control flow of the
program to the address after the callsite which originally called
the function. Depending on the instruction set architecture (e.g.,
x86, x86-64, ARM, SPARC), the format of the return instruction
can vary (e.g., ret in x86/x86-64). Note that for the herein men-
tioned return-edge details, the format of the corresponding instruc-
tion is irrelevant. However, the pre-conditions and post-conditions
needed for normal program execution are of importance. These are
determined by the used calling convention and can slightly vary
depending on the used architecture binary interfaces (ABIs) (e.g.,
Itanium [16], Microsoft [24], ARM [6]).
2.3 Shadow Stack Techniques
General Description. Shadow stack techniques are used sim-
ilarly to stack canaries, in order to protect against backward-edge
program control-flow hijacking attacks. These techniques consist
of complementing the program with additional code, which is able
to check if the caller/callee function calling convention is respected
during runtime. The technique relies on building a second stack for
each function stack located in the program. Runtime checks ensure
that each function return address, which was put in the shadow
stack before entering the context of the called function, is popped
from the stack before leaving the called function or before the stack
frame was cleaned up by the program. Essentially, a shadow stack
technique keeps track of all addresses that are pushed and popped
on the stack and checks that the push-pop address pairs match. This
way, the caller/callee function calling convention is enforced. In this
fashion, the program stack is checked to be not corrupted (polluted)
by the attacker with fake addresses, that are usually used to chain
code reuse gadgets, as for example in return oriented programming
(ROP) attacks. While these techniques are effective in theory, they
have received only partial acceptance. For example, SafeStack [15]
is in production, but was recently bypassed; see Goktas et al. [22]
for more details. Lastly, their effectiveness is influenced by the
information hiding technique on which most rely. As previously
mentioned, most shadow stack techniques rely on information hid-
ing for security. An exception is “Read-only RAD” [13], which uses
mprotect to keep the shadow stack pages read-only except when
needed for updates. Likewise, hardware-based shadow stacks (e.g.,
Intel CET [27]) also do not rely on information hiding. Next, we
list some significant properties of shadow stack techniques.
(C,0)–C,P,GP–C::f()P::g()(P,0)–P,GP–GP::f()P::g()(GP,0)–GP–GP::f()GP::g()467ρFEM: Efficient Backward-edge Protection Using Reversed Forward-edge Mappings
ACSAC 2020, December 7–11, 2020, Austin, USA
Hiding the Shadow Stack. The software based shadow stack
is typically hidden from the usual program execution through one
level (ideally more) of program indirection (i.e., trampolines, seg-
ment register, etc.). The goal of these levels of indirection are to
guarantee that the attacker is not able to find the shadow stack
which remains at all time writable. This ensures that the attacker
cannot locate and write into the stack (it resides in writable mem-
ory) its own return addresses. Further, it is not yet demonstrated,
that one level of indirection is sufficient to ensure that the shadow
stack cannot be found (through information leaks) by a motivated
and resourceful attacker. Shadow-stack implementations put the
shadow stack in writable memory; accordingly, if found, it could be
overwritten by attacker-controlled addresses in order to mount an
attack. As a consequence, approaches which split the shadow stack
in two parts have been presented. These approaches [55] essentially
separate the sensitive data in yet another memory area. As such, if
the main shadow stack is compromised the sensitive data remains
hidden from the attacker.
Program Binary Size. Shadow stack-based techniques provide
a separate shadow stack frame for each function, that is either in-
strumented inside the protected program or inside a library loaded
along with the protected program. Research on shadow stack tech-
niques (see Dang et al. [17]) reports a negligible increase in the size
of the program binary (on disk or in memory). Even for parallel
shadow stacks, the memory usage is modest; and for traditional
shadow stacks, it is indeed negligible, since the return addresses are
stored compactly. However, these techniques might not be suitable
for all types of restrictive program memory applications, such as
certain embedded devices where the program heap is small in size.
Lastly, note that shadow-stack techniques, which are, for example,
based on hardware features such as Intel’s CET [27] (Intel Tiger
Lake based CPUs, which contain CET, are currently on the market)
and compiler support, have negligible program binary size blow-up.
The binary blow-up of hardware based (e.g., CET) and software
based shadow stacks will be similar; CET will still need pages of
memory to store the shadow stack. The advantage of CET is that
the shadow stack will be fast, and content write-protected.
Special Callee Types. The C and C++ programming languages,