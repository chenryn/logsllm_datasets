```    
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 32 -j 32 -T 120    
transaction type: ./test.sql    
scaling factor: 1    
query mode: prepared    
number of clients: 32    
number of threads: 32    
duration: 120 s    
number of transactions actually processed: 34403943    
latency average = 0.112 ms    
latency stddev = 0.229 ms    
tps = 286698.048259 (including connections establishing)    
tps = 286718.916176 (excluding connections establishing)    
statement latencies in milliseconds:    
         0.001  \set a random(1,100)    
         0.000  \set b random(1,1000000)    
         0.000  \set bo random(0,1)    
         0.109  insert into tbl values (:a, :b, clock_timestamp(), :bo::boolean);    
```    
```    
postgres=# select count(*) from tbl;    
  count       
----------    
 19805266    
(1 row)    
postgres=# select count(*) from tbl_result;    
  count      
---------    
 5202622    
(1 row)    
```    
6、单线程消费，一次消费100万行，速度约每秒6万。    
```    
with tmp as (    
delete from tbl where ctid = any(array(    
select ctid from tbl where     
  ts b, false: b->a    
);    
create index idx_tbl_ts on tbl(ts);    
-- 也可以使用brin索引  
-- create index idx_tbl_ts on tbl using brin(ts);    
```    
2、统计结果表    
```    
create table tbl_result (    
  b int not null,  -- 客户ID    
  b_ts timestamp,  -- 客户发起一次虚拟会话的最早时间    
  a int default -1,  -- 最先响应这次虚拟会话的客服ID, -1表示还没人响应    
  a_ts timestamp  -- 最先响应这次虚拟会话的时间    
);    
-- 添加约束，当客户的虚拟会话没有完结时，不计新虚拟会话。      
-- 保证同一时刻，同一客户，只有一个未完结的虚拟会话。    
alter table tbl_result add constraint uk exclude (b with =) where (a=-1);    
```    
3、中间会话表（可以不落地，只顺序计算）。    
```    
create table tbl_mid (    
  a int not null,   -- 客服ID    
  b int not null,   -- 客户ID    
  ts timestamp not null,   -- 消息时间    
  direct boolean not null  -- 消息方向 true: a->b, false: b->a    
);    
```    
4、中间会话表触发器    
(before 触发器 return null（不落地，只顺序计算）)    
```    
create or replace function tb() returns trigger as $$    
declare    
begin    
  if not NEW.direct then  -- b -> a 逻辑(客户发给客服)    
    perform 1 from tbl_result where b=NEW.b and a = -1;    
    if not found then     
      insert into tbl_result (b,b_ts) values (NEW.b,NEW.ts) on conflict ON CONSTRAINT uk do nothing;    
      -- update set b_ts=excluded.b_ts     
      -- where tbl_result.b_ts > excluded.b_ts;  -- 仅当新写入时间小于原记录时更新, 也可以不做，假设TS是顺序的。    
    -- else    
      -- 说明还没有人回复它，跳过，等第一次客服响应来更新这条记录    
    end if;    
  else  -- a -> b 逻辑(客服发给客户)    
    perform 1 from tbl_result where b=NEW.b and a = -1;    
    if found then    
      update tbl_result set a=NEW.a , a_ts=NEW.ts where b=NEW.b and a = -1 and NEW.ts >= b_ts;    
    -- else    
      -- 说明已有人回复，不需要更新    
    end if;    
  end if;    
  return NULL;    
end;    
$$ language plpgsql strict;    
```    
```    
create trigger tg0 before insert on tbl_mid for each row execute procedure tb();    
```    
5、写入大批量数据，由于触发器转移到了中间表，所以写入吞吐达到了接近29万行/s。    
```    
假设有100个客服    
100万个客户    
使用clock_timestamp生成TS，确保数据按一定时序顺序写入。    
vi test.sql    
\set a random(1,100)    
\set b random(1,1000000)    
\set bo random(0,1)    
insert into tbl values (:a, :b, clock_timestamp(), :bo::boolean);    
```    
```    
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 32 -j 32 -T 120    
transaction type: ./test.sql    
scaling factor: 1    
query mode: prepared    
number of clients: 32    
number of threads: 32    
duration: 120 s    
number of transactions actually processed: 34403943    
latency average = 0.112 ms    
latency stddev = 0.229 ms    
tps = 286698.048259 (including connections establishing)    
tps = 286718.916176 (excluding connections establishing)    
statement latencies in milliseconds:    
         0.001  \set a random(1,100)    
         0.000  \set b random(1,1000000)    
         0.000  \set bo random(0,1)    
         0.109  insert into tbl values (:a, :b, clock_timestamp(), :bo::boolean);    
```    
```    
postgres=# select count(*) from tbl;    
  count       
----------    
 19805266    
(1 row)    
postgres=# select count(*) from tbl_result;    
  count      
---------    
 5202622    
(1 row)    
```    
6、单线程读取，统计，例如每次读取一个小时的数据（定义清楚边界，连续消费，同时避免并发、或重复消费，或者在写统计结果时做到幂等，不用担心重复消费）。    
创建一张消费记录表，统计已消费的时间间隔。  
```  
create table tbl_record (ts1 timestamp, ts2 timestamp);  
```  
下次消费时，参考上次已消费的时间。  
```    
with tmp as (  
  insert into tbl_record (ts1, ts2) values ('2018-01-01 12:00:00', '2018-01-01 13:00:00')  -- 记录当前消费窗口  
)  
insert into tbl_mid     
select * from tbl  
where ts >= '2018-01-01 12:00:00' and ts < '2018-01-01 13:00:00'  -- 上一个小时为窗口 (当前时间 大于等于 '2018-01-01 14:00:00')   
order by ts;  -- 无会话模式    
Time: 16532.939 ms (00:16.533)    
```    
7、算法校验，正确    
```    
postgres=# select * from tbl_mid where b=2 order by ts limit 10;    
 a  | b |             ts             | direct     
----+---+----------------------------+--------    
 10 | 2 | 2018-08-15 10:24:58.538558 | t    
 25 | 2 | 2018-08-15 10:25:00.585426 | f    
 62 | 2 | 2018-08-15 10:25:04.2633   | f    
 45 | 2 | 2018-08-15 10:25:04.406764 | t    
(4 rows)    
postgres=# select * from tbl_result where b=2 order by b_ts limit 10;    
 b |            b_ts            | a  |            a_ts                
---+----------------------------+----+----------------------------    
 2 | 2018-08-15 10:25:00.585426 | 45 | 2018-08-15 10:25:04.406764    
(1 row)    
```    
### 消费性能，单线程吞吐达到6万行/s。    
```    
with tmp as (    
delete from tbl where ctid = any(array(    
select ctid from tbl where     
  ts < now()-interval '1 min'  -- 测试时改成了消费1分钟前的数据    
  order by ts limit 1000000    
))    
returning *    
)     
insert into tbl_mid     
select * from tmp     
order by b, ts;  -- 无会话模式    
Time: 16532.939 ms (00:16.533)    
```    
消费节奏：    
```    
1、消费    
2、VACUUM tbl;    
3、消费    
loop;    
```    
## 例子3，使用窗口查询解决同一问题
1、新增索引，用于窗口查询加速  
```  
create index idx_tbl_1 on tbl (b,ts);  