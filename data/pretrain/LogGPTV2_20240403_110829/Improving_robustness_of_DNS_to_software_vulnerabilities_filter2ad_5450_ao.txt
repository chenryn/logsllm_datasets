attacker needs to further reduce the number of distinct DGA domains to 60 to evade, with
107
Figure 5.11: Success area of small community attacks with different number of walks.
each domain queried by all infected hosts. The attack graph density is reduced from 0.48
to 0.1, losing 79% ( 0.38
0.48) of queries to distinct DGA domains. This means that tuning
hyperparameters can increase the small community attack cost and potentially render this
attack ineffective.
Similarly, for node2vec, the minimum cost of a certain small community attack is
higher than spectral clustering. We compute the attacker graph density only for the white
area in Figure 5.9 without randomness, i.e., the ﬁrst column and bottom two rows. In con-
trast to spectral clustering, node2vec requires a much higher minimum cost for a guaranteed
small community attack, which indicates that node2vec is more resilient to this attack. The
smallest communities in Figure 5.9 (i.e., the ﬁrst column and bottom two rows) are likely
undersampled, because choosing 15 walks per node and walk length 20 using cluster va-
lidity in Section 5.5.1 prefers labeled DGA communities that are relatively bigger, which
makes few neighborhood observations for extremely small islands insigniﬁcant, and thus
108
020040060013579# of Shared Hosts# of DGA Domains5 Number of Walks020040060013579# of Shared Hosts# of DGA Domains10 Number of Walks020040060013579# of Shared Hosts# of DGA Domains15 Number of Walks020040060013579# of Shared Hosts# of DGA Domains20 Number of Walks020040060013579# of Shared Hosts# of DGA Domains25 Number of Walks020040060013579# of Shared Hosts# of DGA Domains30 Number of Walks020040060013579# of Shared Hosts# of DGA Domains50 Number of WalksSmall Community Attack SuccessfulFalseTrueFigure 5.12: Success area of small community attacks with different walk length.
allows small community attacks. Note the randomness in the remaining portion of the plot.
Since node2vec uses the random walk process to sample the neighborhoods of all nodes,
there exists randomness in the neighborhood observations. This shows that the randomness
inherent to node2vec makes the attacks succeed at random in the remaining portion of Fig-
ure 5.9. This both suggests a system like Pleiades would beneﬁt from node2vec to reduce
the guarantee of attacks, as well as allow a defender to identify if an attacker is evading
by chance encounters where the evasion fails over time. While the minimum attack cost is
the same with different neighborhood sizes for a guaranteed successful attack, the attack
109
020040060013579# of Shared Hosts# of DGA DomainsWalk Length 2020040060013579# of Shared Hosts# of DGA DomainsWalk Length 4020040060013579# of Shared Hosts# of DGA DomainsWalk Length 6020040060013579# of Shared Hosts# of DGA DomainsWalk Length 8020040060013579# of Shared Hosts# of DGA DomainsWalk Length 10020040060013579# of Shared Hosts# of DGA DomainsWalk Length 12020040060013579# of Shared Hosts# of DGA DomainsWalk Length 14020040060013579# of Shared Hosts# of DGA DomainsWalk Length 16020040060013579# of Shared Hosts# of DGA DomainsWalk Length 18020040060013579# of Shared Hosts# of DGA DomainsWalk Length 20Small Community Attack SuccessfulFalseTruesuccess rate changes. The neighborhood sizes 2, 4, and 6 have attack success rate 65.16%,
60.65%, and 70.65% respectively (Figure 5.9). We will discuss how we can use differ-
ent hyperparameters to further reduce the success rate of the small community attack in
Section 5.6.2.
Despite the differences in the attack success rate, different neighborhood sizes in our
experiments have the same minimum cost for the small community attack. In comparison,
number of walks has slightly different minimum cost over different parameter values. As
shown in Figure 5.11 and Table 5.3, the minimum cost for guaranteed small community
attack under different number of walks are 0.415 or 0.45. However, Figure 5.12 and Ta-
ble 5.3 show that different values for the walk length parameter have different minimum
attack cost. When the walk length is 2, there is no attack cost; but when the walk length
is 20 (the parameter we choose by using cluster validity), the minimum cost is 0.415. In
Section 5.6.2, we will show that walk length 2 and 4 have higher small community attack
success rate than longer walk lengths.
These costs further demonstrate node2vec’s superiority over spectral clustering in re-
sisting small community attacks.
5.6 Defense
Since the noise injection attack and the small community attack violate the fundamental
assumptions used by graph clustering techniques, it is very hard to completely eliminate
the problem. In this section, we propose two defense techniques that help Pleiades retain
its detection capabilities against the two attacks. The ﬁrst one is to train the classiﬁer with
noise, which remediates the noise injection attack to some extent. The second one is to use
the small community attack as an adversarial guideline to choose better hyperparameters
for graph embeddings, which increases the cost of launching a successful small community
attack.
110
Table 5.4: False Positive Rate for four DGA families before retraining, and after retraining
with three types of noise.
Model
Pykspa Gimemo Suppobox Murofet
0%
Original
0.32%
0%
Model A 1.64%
Model B
1.62%
0.30%
0%
1.46%
Model C
0.29%
0.39%
0.10%
1.17%
False Positive Rate
0%
0.10%
1.23%
1.23%
5.6.1 Training Classiﬁer with Noise
By retraining the classiﬁer, it becomes more resistant to noise that could be injected by
the adversary in the unsupervised phase of Pleiades. We used domains from the benign
DGA to poison the clusters of malicious DGAs. We retrained the classiﬁer using clusters
generated by the noise injection attack variant 1 (“Minimal Benign DGA 1”, m = 1, Al-
gorithm 2 in Section 5.5.2) from SVD, yielding model A. We tested model A against the
adversarial clusters generated by the same noise injection attack under community discov-
ery and node2vec. The ﬁrst two violins in Figure 5.6c show that model A increases the
overall predicted class probabilities compared to the “After Attack” violins in Figure 5.6a.
In community discovery, the accuracy increased from 2% to 98%; and in node2vec, the
accuracy increased from 0.8% to 98%. To summarize, retraining with noisy clusters con-
taining a benign DGA from SVD can remediate the same attack on community discovery
and node2vec. We see this same effect even when the noise levels are doubled (m = 2,
Algorithm 2 in Section 5.5.2). When models were trained with half the noise (m = 1,
Algorithm 2 in Section 5.5.2), they were able to more accurately predict the correct la-
bel. Among them, only an average of 7.3% clusters are predicted with the wrong labels,
decreased from 100% before retraining.
In comparison with Figure 5.6a, the average prediction conﬁdence increased signiﬁ-
cantly. Before retraining, the average prediction conﬁdence of “Minimal Benign DGA 2”,
“Moderate 2”, and “Perfect Long Tail 2” are 10%, 20%, and 20%. After retraining, they
111
increased to 70%, 90%, and 80%, respectively. The accuracy of the models remain roughly
the same before and after retraining. However, retraining with noisy clusters increased the
false positive rate in most cases (Table 5.4).
It is important to note that this defense only trains the classiﬁer with noise that has been
witnessed. New noise will appear, but the fundamental attack on the unsupervised com-
ponent remains the same. Therefore, defenders will be alerted by plumetting accuracies in
their models. Our defenses are simple and future work should be done to make clustering
systems more robust.
5.6.2
Improving Hyperparameter Selection
(a)
(b)
Figure 5.13: Figure 5.13a: Using the small community attack to choose the number of
eigenvalues for SVD. Figure 5.13b: Using the small community attack to choose the length
of walk for node2vec.
Small community attacks show that the traditional ways of choosing hyperparameters
(Section 5.5.1) is not enough when facing adversaries. Luckily, the small community at-
tack can be used to choose more resistant hyperparameters. We show that better selection
can reduce the number of successful small community attack instances from our previous
experiments.
We plot the successful attack rate under different number of eigenvalues in Figure 5.13a.
The successful attack rate decreases as the number of eigenvalues computed increases, and
the line plateaus after 200 eigenvalues. It means that a defender running Pleiades should
112
llllll0%25%50%75%100%35100200300Number of EigenvaluesAttack Success Ratellllllllll0%25%50%75%100%5101520Walk LengthAttack Success Rateselect the ﬁrst 200 eigenvalues, instead of 35 indicated by the scree plot in Figure 5.4. If
we use the small community attack in this way, we can choose better parameters for the
system and also know under which parameters the system is vulnerable.
Similarly, for node2vec, using the small community attack to choose hyperparameters
can reduce the attack success rate. The cluster validity metrics suggest we choose neigh-
borhood size six, and walk length of 20. However, if we evaluate the graph clustering
using the success rate of the small community attack, these hyperparameters are not opti-
mal. First, for the neighborhood size, Figure 5.9 shows that a smaller neighborhood size of
four introduces a lower attack success rate. Second, we plot the attack success rate under
different walk lengths in Figure 5.13b. This ﬁgure shows that a walk length of 12 is pre-
ferred over 20, because the former allows 51.29% attack success rate compared to 61.61%
of the latter. In other words, the smaller neighborhood size and shorter walk length can
tolerate the small community attack better, presumably because they do not oversample
larger communities with more distinct neighborhood observations. In other words, smaller
communities are not undersampled.
(a)
(b)
Figure 5.14: Figure 5.14a: Using the small community attack to choose the number of
walks per node for node2vec. Figure 5.14b: Using the small community attack to choose
the neighborhood size for node2vec.
In addition, two more parameters of node2vec can be tuned by using the small com-
munity attack. Figure 5.14a shows the sensitivity of parameter, different number of walks
per node, to the small community attack. Under 15 walks per node, the small community
113
lllllll0%25%50%75%100%1020304050Number of Walks per NodeAttack Success Ratelllllllllllllllllll0%25%50%75%100%5101520Neighborhood SizeAttack Success Rateattack success rate is 70.65%. Overall, the attack success rate increases as the number of
walks increases. If we want the minimal small community attack success rate, we should
choose smaller number of walks per node, such as 5 or 10. Using 5 walks per node can
reduce the attack success rate to 53.23%. Similar to our results of tuning the walk length, a
smaller value for number of walks prefer small communities, but a larger value undersam-
ples small communities. Lastly, different values of the neighborhood size parameter have
slightly different attack success rate, as shown in Figure 5.14b. Overall, from neighbor-
hood size 2 to 20, the attack success rate oscillates between 59.68% and 71.94%. However,
the neighborhood size is less sensitive to the small community attack than the walk length
and the number of walks.
We recommend using the small community attack success rate to evaluate the clustering
hyperparameter selection, in addition to traditional cluster validity indices.
5.7 Summary
We have demonstrated that generic attacks on graphs can break a real-world system that
uses several popular graph-based modeling techniques. These attacks can often be per-
formed by limited adversaries at low cost; however, simple defenses can reduce their ef-
fectiveness or likelihood of success. To summarize how defenders can improve their sys-
tems: hyperparameter selection should be optimized for reducing the success rate of small
community attacks, and retraining can be used to lessen the impact of noise injection at-
tacks. Furthermore, state of the art graph embedding techniques like node2vec appear to be
more resistant against small community attacks, which suggests Pleiades and other systems
would be harder to adversarially manipulate using node2vec over community ﬁnding, or
spectral methods (see Figure 5.9 vs. Figure 5.7).
114
CHAPTER 6
CONCLUSION AND FUTURE WORK
6.1 Overall Contribution and Summary
This thesis focuses on two goals, DNS graph clustering applications and improving the
robustness of clustering. For the ﬁrst goal, we propose new clustering techniques to solve
two long-term advertising fraud problems. For the second goal, we propose a threat model
to evaluate how attackers with different knowledge levels can evade clustering. We propose
two novel yet simple attacks. Through the adversarial clustering analysis, we can identify
where the clustering system is vulnerable, and how we can improve the robustness of the
system.
6.2 Future Work
We acknowledge that details surrounding the implementation of our adversarial clustering
attacks are speciﬁc to Pleiades, however, the graph representation suggests the attacks may
work on other graph-based systems. In this section, we brieﬂy discuss issues to consider to
generalize the attacks, as well as future work direction.
In other types of security graphs, an attacker needs to perform different actions in order
to manipulate nodes and edges in the attacker graph. Overall, an attacker needs to associate
her nodes with benign ones for the targeted noise injection attack, and reduce overlap of
her nodes’ behavior for the small community attack. For instance, in the bipartite graph
of machines (U) and md5s of installed executables (V ) [130], malware authors can bun-
dle malicious executables with benign ones via Pay-Per-Install (PPI) programs, in order to
inject noise; or they can program the installed malware to write to different md5s for dif-
ferent machines, and delete their old malware, in order to small communities. As another
115
example, in the malware behavioral graph between the binary (U) and its behavioral proﬁle
or Malware Instruction Set (V ) [123, 131, 27], the malware authors can change the exe-
cutable’s system call frequency and sequence to approximate what benign software does,
in order to inject noise; or they can make system call sequence as distinct permutations for
different machines, in order to create small communities.
Nodes and edges can be trivially injected or removed in the graph Pleiades uses, which
are generated by malware resolving domain names. In other security contexts, the set of
injectable/removable nodes varies. It is possible that some nodes and edges must exist in
order for certain attack actions to succeed. For example, a phishing email using a malicious
attachment requires at least the read system call to successfully infect a host, which cannot
be removed from the system call graph. On the other hand, it can be difﬁcult to add certain
nodes and edges. Therefore, in addition to the anomaly cost (Section 5.5.2) and agility
cost (Section 5.5.3), the action of graph manipulation itself has costs depending on the
data that underlies the graph representation. This should be carefully considered when
generalizing the attacks to other systems. Tighter costs may exist, but our approaches point
in a promising direction.
Results from our adversarial clustering analysis show that the small community attack
is not guaranteed to succeed if an adversary does not have perfect knowledge about other
nodes on the entire graph, or the clustering system parameters. Since the defender running
the clustering system is essentially using global features, it provides an advantage against
adversaries. On the other hand, it is beneﬁcial to choose global features over local features
for classiﬁcation tasks as well. For instance, pixels from an image, words in an email, and
metadata of PDFs are local features, which can be easily manipulated by adversaries. On
the contrary, if features can be chosen that requires knowledge about other images, emails,
PDFs that an attacker does not have easy access to, it makes the classiﬁer more robust.
For example, in domain name reputation systems, the set of related historical IP addresses
resolved by domain names over a time window (e.g., past six months) is a global feature.
116
If an evasive attacker changes domain name resolution at the moment of detection, it does
not change the feature easily because resolutions from the past are still used by the feature.
Guidelines for how to change local features to global features can increase the costs for
attackers to evade classiﬁers.
117
Appendices
118
APPENDIX A
DGA DETECTION
A.1 Unique Domains queried by Hosts
Figure A.1 shows the cumulative distribution for distinct number of NXDOMAINs queried
by hosts seen on 12/18/2016 in the network datasets from the telecommunication network.
The CDF shows that a host querying two distinct NXDOMAINs is at the 48th percentile,
and a host querying 10 distinct NXDOMAINs is at the 95th percentile.
A.2 Labeled DGA Families
We use default parameters to generate different versions of the malware families for 18
different seed dates. The number of domains generated for each malware family is recorded
in the top part of Table A.1.
A.3 Reimplementing Pleiades
We implement a simpliﬁed version of the Pleiades DGA detection system. We follow the
exact next steps to implement the graph clustering and modeling components of Pleiades.
1. From the NXDOMAIN query data, we ﬁlter out hosts that only queried one domain
name in a day (as the authors of Pleiades did).
2. We construct an association matrix representing the bipartite graph between hosts