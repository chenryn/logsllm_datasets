### Attacker's Strategy to Evade Detection

To evade detection, an attacker must reduce the number of distinct DGA (Domain Generation Algorithm) domains to 60, with each domain queried by all infected hosts. The attack graph density is reduced from 0.48 to 0.1, resulting in a 79% reduction (from 0.48 to 0.1) in queries to distinct DGA domains. This indicates that tuning hyperparameters can increase the cost of small community attacks and potentially render them ineffective.

### Comparison of Node2vec and Spectral Clustering

For node2vec, the minimum cost of a certain small community attack is higher than for spectral clustering. We compute the attacker graph density only for the white area in Figure 5.9, without randomness, i.e., the first column and bottom two rows. In contrast to spectral clustering, node2vec requires a much higher minimum cost for a guaranteed small community attack, suggesting that node2vec is more resilient to such attacks.

The smallest communities in Figure 5.9 (i.e., the first column and bottom two rows) are likely undersampled because choosing 15 walks per node and a walk length of 20 using cluster validity in Section 5.5.1 prefers larger DGA communities. This makes neighborhood observations for extremely small islands insignificant, thus allowing small community attacks. Note the randomness in the remaining portion of the plot. Since node2vec uses a random walk process to sample neighborhoods, there is inherent randomness in the neighborhood observations. This randomness makes the attacks succeed at random in the remaining portion of Figure 5.9.

### Impact of Different Parameters on Attack Success

#### Walk Length
Figure 5.12 shows the success area of small community attacks with different walk lengths. The attack success rate changes with different neighborhood sizes. For example, neighborhood sizes 2, 4, and 6 have attack success rates of 65.16%, 60.65%, and 70.65%, respectively (Figure 5.9). We will discuss how different hyperparameters can further reduce the success rate of small community attacks in Section 5.6.2.

#### Number of Walks
Despite differences in attack success rates, different neighborhood sizes in our experiments have the same minimum cost for small community attacks. However, the number of walks has slightly different minimum costs over different parameter values. As shown in Figure 5.11 and Table 5.3, the minimum cost for a guaranteed small community attack under different numbers of walks is 0.415 or 0.45. In contrast, different values for the walk length parameter have different minimum attack costs. When the walk length is 2, there is no attack cost; but when the walk length is 20 (the parameter chosen using cluster validity), the minimum cost is 0.415. In Section 5.6.2, we will show that walk lengths of 2 and 4 have higher small community attack success rates than longer walk lengths.

### Defense Strategies

#### Training Classifier with Noise
By retraining the classifier, it becomes more resistant to noise that could be injected by the adversary in the unsupervised phase of Pleiades. We used domains from benign DGAs to poison the clusters of malicious DGAs. Retraining the classifier with noisy clusters containing a benign DGA from SVD (model A) increased the overall predicted class probabilities compared to the "After Attack" violins in Figure 5.6a. In community discovery, the accuracy increased from 2% to 98%; and in node2vec, the accuracy increased from 0.8% to 98%. Retraining with noisy clusters can remediate the same attack on community discovery and node2vec, even when the noise levels are doubled. Models trained with half the noise (m = 1) were able to more accurately predict the correct label, with only an average of 7.3% clusters predicted with the wrong labels, down from 100% before retraining.

#### Improving Hyperparameter Selection
Small community attacks demonstrate that traditional ways of choosing hyperparameters (Section 5.5.1) are not sufficient when facing adversaries. Using the small community attack to choose more resistant hyperparameters can reduce the number of successful small community attack instances. For SVD, the successful attack rate decreases as the number of eigenvalues computed increases, plateauing after 200 eigenvalues. For node2vec, a smaller neighborhood size and shorter walk length can better tolerate small community attacks, presumably because they do not oversample larger communities with more distinct neighborhood observations.

### Summary and Future Work

We have demonstrated that generic attacks on graphs can break real-world systems using popular graph-based modeling techniques. These attacks can often be performed by limited adversaries at low cost, but simple defenses can reduce their effectiveness or likelihood of success. To improve systems, hyperparameter selection should be optimized to reduce the success rate of small community attacks, and retraining can lessen the impact of noise injection attacks. State-of-the-art graph embedding techniques like node2vec appear more resistant to small community attacks, suggesting that systems like Pleiades would benefit from using node2vec over community finding or spectral methods.

Future work should consider generalizing these attacks to other graph-based systems and exploring how to change local features to global features to increase the costs for attackers to evade classifiers.