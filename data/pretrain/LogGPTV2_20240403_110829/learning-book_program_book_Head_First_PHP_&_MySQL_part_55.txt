friends
多个用户可以为同一个老板工作，这就得到了老
一对多
板行和用户行之间一种一对多的关系。
friend
多个用户可以有多个朋度，这说明
朋友行与用户行之间存在一种多对
多美系。
多对多
有多对多关系的表
多个主题可以属于同一个类别，从而得到类别行
通常通过一个联接
和主题行之间的一种一对多关系。不过，一个主
表相连接、不过这
题不能属于多个类别。
里没有显示
category
mismatch_topic
topic
topic_idO
name
category
对多
442
第8章
---
## Page 479
控制你的数据，世界在你手中
先暂停一下！花点时间调整Mismatch数据库，以便建立互补配对。
从Head First Labs网站（www.headfirstlabs.com/books/hfphp）下载
Mismatch应用的.sql文件。这些文件包含了构建必要的Mismatch表（mismatch_
user、mismatch_topic和mismatch_response）的SQL语句。在一个MySQL
工具中运行各个.sql文件中的语句，得到初始Mismatch表，并以此作为起点。
一切就绪后，对各个新表（mismatch_topic和mismatch_response）运行一个
DESCRIBE语句，仔细检查这些表的结构。这些表对后面要建立的MismatchPHP脚
本有非常重要的影响。
Pield
Type
(nt(11)
PRI
topic_id外键反向连接
mismatch_topic表6
主键。
你现在的位置
443
---
## Page 480
使用数据库建立一个问卷
0K，这么说我们有了一个包含用户、类
别、主题和响应的设计相当好的数据
库。这对我们建立互补配对到底有什么
帮助呢？
从一个设计良好的数据库起步，就能更容易地构建和组装应用
的各个其他部分。
开始设计应用时如果能够正确地设计数据库，这是保证开发过程
顺利进行的最好的准备。对于如何最佳地存储数据可能需要做
大量规划和建模工作，不过从长远来看，这绝对是值得的。想想
看，如果Mismatch数据库已经填满数据，再重新调整Mismatch数
mismatch_topic
据库模式将会多么困难。
opkOr
Lobagm
这正体现了从整体上好的数据库设计所带来的好处。具体来看
1
Tattoos
Appear
Mismatch数据库，我们有一个用户表，其中已经填人了用户通
2
Gold chains
Appearar
3
Body piercings
过注册和编辑情况简表所输入的用户信息，另外有一个新的主题
Appearar
4
Cowboyboots
Appeoror
表，其中包含足以深人了解一个人所需的类别和主题。要建立互
5
Long hair
补配对，现在还缺少一个途径让用户输入响应，然后把这些响应
6
Reality TV
Entertai
Professional
存储在响应表中。
7
wresting
Entertainme
8
Horror movies
Entertainment
9
Eosy listening music
Enterfinment
10
The opera
Entertainment
完整的mismatch_topic表包含25个主
11
Sushi
Food
题，分为5个类别这就是我们
12
Spam
Food
的“5维对立性！”
13
Spicy food
Food
14
Peanut butfer &
Food
banana sandwiches
15
Martinis
Food
16
Howard Stern
People
BRAIN
17
Bill Gates
Peopel
XPOWER
18
Barbara Streisand
People
19
Hugh Hefner
People
20
Martha Stewart
People
如何把这样一组类别和主题转换为一组问
21
Yoga
Acivifies
题，以便用户提供喜欢或讨厌的响应？
22
Weightlifting
Acfivifies
23
Cube puzzles
Activifies
24
Karaoke
Activities
444
25
Hiking
Acfiviies
---
## Page 481
控制你的数据，世界在你手中
建立一个Mismatch问卷
立一个问卷表单，允许用户对mismatch_topic表中的每个主题选择“Love”
（喜欢）或“Hate”（讨厌）。这个表单可以由数据库中的响应直接生成，其
结果再存回到数据库中。实际上，问卷表单设计的关键就是从mismatch
response表读写响应。下面先简单看看这个问卷，这里还给出了建立这个问
卷需要的步骤。
000
o gpgo snoge pag nof op mogl
Tattoos:
对应每个主题在
类别用于在表单中将
Gold chains:
Love ()Hane
mismatch_response表中有
相关的主题归组。
Body piercings:
Love CHalc 
一行，包含用户的一个好
Cowbey boots:
Love Hatt
@Love CHatc
瑟响应。
Long hair:
ntertainment
Reality TV:
Love Ha
Professional
wresting:
Love Hate
Horror movies:
 Love Hase
用户第一次访问表单时使用INSERT在数据库中增加空的响应行。
我们要根据mismatch_response表中的数据生成问卷表单，即使用户尚未输入任何响应。这说明，需
要在用户第一次访问问卷时在mismatch_response表中“种人”空响应。由于这些行的响应列为空，
2
根据用户在表单上做出的响应使用UPDATE修改响应行。
用户提交问卷表单时，必须将其个人响应提交到数据库。此时，只有已选中单选钮相应的响应需要
更新。换句话说，数据库只需知道已经回答的响应。
使用SELECT获取生成问卷表单所需的响应数据。
为了生成问卷表单，我们需要登录用户的所有响应。不仅如此，还需要查找各个响应的相应主题和类别，从而
能够在表单中显示，这些主题名和类别名存储在mismatch_topic表中，而不是mismatch_response表。
根据响应数据生成HTML问卷表单。
有了响应数据，现在可以生成HTML问卷表单，为此要生成一组输人域，要根据用户响应来选中相应
的“Love”或“Hate”单选钮。
你现在的位置
445
---
## Page 482
将响应放入mismatch_response
将响应放入数据库
尽管看起来可能应该先生成问卷表单，但表单依赖于mismatch
response表中现有的响应数据。所以首先需要在mismatch
这样一来，我们就能由mismatch_response表生成问卷表单，而
不必担心用户是否确实已经做出响应。
用户第一次访问表单时响应为空。
表单中的主题初始情况下没有回
答，因为我们在mismatch_response
表中“种入”了空响应。
27
INSERT
28
Lers OMae
)Lve CHasc
30
Leve
Mfaee
Lore CHate
Love
CHanc
所以，从问卷表单来看，对应表单中的每个问题，mismatch
response表中总有一个相应的数据行。这说明，用户提交问卷表
单时，我们只需更新表单中各个响应的数据行。
Taltoos
CLove @ae
Gold dhains
)Leve @Hae
Body pierck
(Leve @ae
UPDATE
Cowbey boota
Love CHac
mismatch_response
Leng halr:
8Lor4 OHac
response_d
26
2
1
1
既然用户已经回答了一些问题，就可
27
~
1
2
以将真实的响应数据存储在mismatch_
28
2
tesponse表中。
29
1
30
1
1
5
尽管在Mismatch数据库中存储响应的过程实际上有两个步骤，但第
数据库中的响应得到更
一步（INSERT）对于每个用户来说只发生一次。一旦初始时增加了
新，从而与问卷表单中的
用户响应一政。
空响应，将来对问卷的所有修改都由第2步通过SQLUPDATE处理。
446
第8章
---
## Page 483
控制你的数据，世界在你手中
PHP&MySQL磁贴
以下代码负责在用户第一次访问问卷表单时向mismatch_response
表中插入空响应。它还会在用户做出修改并提交表单时更新响应。遗
憾的是，有些代码掉到了地上，需要把它们放回原处。请使用磁贴修
复这里缺少的代码。
// If this user has never answered the questionnaire, insert empty responses into the database
$query = "SELECT * FROM mismatch_response WHERE user_id = ". S_SESSION['user_id']. """;
$data = mysqli_query($dbc, Squery) ;
if (
(Sdata）== 0)(
// First grab the list of topic IDs from the topic table
$query ="SELECT
FROM mismatch_topic ORDER BY category_id, topic_id";
$data =mysqli_query($dbc，$query）;
$topicIDs = array();
while ($row = mysqli_fetch_array($data))(
array_push($topicIDs, $row['topic_id']);
// Insert empty response rows into the response table, one per topic
foreach ($topicIDs as $topic_id){
$query =
mismatch_response
" (
）VALUES （'"
.$_SEsSIoN['user_id'].",'$topic_id')";
mysqli_query($dbc,$query);
if (isset(S_POST['submit']))(
// Write the questionnaire response rows to the response table
foreach (S_PoST as $response_id => $response)(
$query = "
mismatch_response
response
Sresponse
"WHERE
'$response_id'";
mysqli_query($dbc, $query) ;
echo 'Your responses have been saved.';
user,
id
INSERT INTO
mysqli_num_rows
SET
topic_id
response_id
UPDATE
topic_id
你现在的位置
447
---
## Page 484
php&mysql磁贴答案
PHP&
MySQL磁贴
以下代码负责在用户第一次访问问卷表单时向mismatch_response
表中插人空响应。它还会在用户做出修改并提交表单时更新响应。遗
的是，有些代码掉到了地上，需要把它们放回原处。请使用磁贴修
复这里缺少的代码。
// If this user has never answered the questionnaire, insert empty responses into the database
$query = "SELECT * FROM mismatch_response WHERE user_id -
1#
.$_SESSION['user_id'].
=1";
$data = mysqli_query($dbc, $query);
查看查询是否返④0个数据行.
if
mysqli_num_rows
（$data）==0）{
没有数据！
// First grab the list of topic IDs from the topic table
Squery -
"SELECT
topic_id
FROM mismatch_topic ORDER BY category_id, topic_id";
$data = mysqli_query($dbc, $query);
要生成一个空的响应数组，首先需要获
$topicIDs = array();
取主题表中的所有主题。
while ($row = mysqli_fetch_array($data)){
array_push($topicIDs, $row['topic_id']);
// Insert empty response rows into the response table, one per topic
目前响应行“未回答”
foreach ($topicIDs as $topic_id){
因为用户还没有真正在表
单上递择“喜欢”或“讨
$query =
INSERT INTO
mismatchresponse
厌”
(
user_id
topic_id
VALUES("
$_SESSION['user_id']."',
‘$topic_id')";
mysqli_query(sdbc,
$query);
// If the questionnaire form has been submitted, write the form responses to the database
if (isset($_POST['submit'])){
//Write the questionnaire response rows to the response table
foreach (S_PoST as $response_id => $response)(
$query =
UPDATE
mismatch response
SET
response =
"WHERE
response_id
'$response_id"*
用户提交表单时只修改了
mysqli_query ($dbc,
响应表的响应列，所以我
$query);
们只需要更新这一部分。
echo 'Your responses have been saved.';
448
第8章