namically detect and prevent such attacks (e.g., [12, 43]).
Actually, Android has signiﬁcantly improved its permis-
sion systems since version 4.2 [3].
Voice input Currently we limit input data protection
to handwriting input and keystroke input and do not con-
sider voice input as it does not have keystrokes. Yet,
users usually use dedicated system services like Apple
Siri, Google Now and Microsoft voice recognition. How
to handle voice input and preserve its privacy is very
challenging and will be our future work.
Beyond Mobile IME Apps Note that the approach of
I-BOX does not necessarily only apply to mobile plat-
forms; Similar techniques can also be applied to desk-
tops, which suffer from a similar dilemma between pri-
vacy and usability. We may provide a similar oblivious
sandbox for each IME app, which should be straightfor-
ward as Android actually runs atop Linux. We leave this
as our future work. Besides, other applications that re-
quires a tradeoff between privacy and usability may use
execution transaction like I-BOX.
7 RELATED WORK
Privacy leakage detection in mobile devices. Recently,
there have been signiﬁcant efforts on the detection of pri-
vacy leakage in mobile devices. Early attempts include
TaintDroid [16, 17] and PiOS [15], and recent efforts
include such as Woodpecker [22], AndroidLeaks [20],
ContentScope [50], and Appproﬁler [35].
In particu-
lar, TaintDroid [16] uses dynamic taint analysis to track
whether sensitive information (e.g., address book) can
be leaked through the network. PiOS [15] uses static
analysis and focuses on the privacy leakage in iOS apps.
Woodpecker [22] leverages an inter-procedural data-ﬂow
analysis to inspect whether an untrusted app can obtain
unauthorized access to sensitive data. ContentScope [50]
detects passive content leak vulnerabilities, by which in-
app sensitive data can be leaked.
AndroidLeaks [20] instead uses static analysis to de-
tect data leakage in Android apps. Chan et al. [10] further
leverages mobile forensics to correlate user actions with
privacy leakages. Appproﬁler [35] creates a mapping be-
tween high-level API calls and low-level privacy-related
behavior, which is then used to provide a high-level pro-
ﬁle of App’s privacy behavior. Besides, there have also
been interests in detecting privacy leakage due to mobile
ads [38]. In contrast, I-BOX focuses on preventing leak-
age of sensitive keystrokes.
Privacy leakage prevention in mobile devices. Other
than detecting privacy leakage, there are also a number
of systems that prevent private data from being leaked.
By extending TaintDroid [16], AppFence [24] prevents
applications from accessing sensitive information using
data shadowing, and it also blocks outgoing commu-
nications tainted by sensitive data. While I-BOX and
AppFence both block network communications when
sensitive data is to be leaked, there are substantial dif-
ferences: AppFence uses shadowing to provide an illu-
sion to the app such that it can continue performing its
taint tracking, whereas I-BOX does not use any illusion
nor any instruction-level taint tracking, due to the per-
688  24th USENIX Security Symposium 
USENIX Association
vasive existence of native code. Meanwhile, AppFence
does not encounter the challenges we faced such as con-
sistent rollback, and it only simply blocks the network
communication, whereas I-BOX still has to keep the con-
nection and allow other data to be transferred.
TISSA [51] tames information stealing apps to stop
possible privacy leakage. SpanDex [14] further uses
symbolic execution to quantify and limit the implicit
ﬂows through a sandbox, to prevent an untrusted applica-
tion from leaking passwords. Through automatic repack-
aging of Android apps, Aurasium [43] attaches sandbox-
ing and policy enforcement atop existing apps, to stop
malicious behaviors such as attempts to retrieve users’
sensitive information. Unlike Aurasium that adds a sand-
box to an app, πBox [30] shifts the sandboxing protec-
tion of private data from the app level to the system level,
and offers a platform for privacy-preserving apps. How-
ever πBox trusts a few app vendors to protect users’ pri-
vacy data, while I-BOX treats the vendor of IME apps
as untrusted, due to their incentives to collect users’ in-
put. TinMan [42] instead completely ofﬂoad passwords-
like secret to a remote cloud, but only handles a class of
special secrets that are not necessary to be displayed in
mobile devices. ScreenPass [31] leverages a trusted soft-
ware keyboard to input and tag passwords and uses taint
tracking to ensure that a password is only used within
a speciﬁc domain. In contrast, while I-BOX also uses a
trusted software keyboard for password input, it focuses
more on preventing a malicious IME from leaking sensi-
tive data (not only passwords).
Checkpoint and restore.
I-BOX employs a check-
point and restore mechanism to prevent privacy leakage.
Such a mechanism has been built for transactional mem-
ory [6], execution transactions [37], as well as whole-
system transactions [33]. Retro [26] leverages selective
re-execution for intrusion recovery. Storage Capsules [7]
also use checkpoint and restore to wipe off residual data
after an application has viewed data in a desktop. I-BOX
is an instance of a system transaction but designed spe-
cially for untrusted IME apps.
Sandboxing. There have been a large number of efforts
in building sandboxes to execute untrusted programs,
web applications, and native code. These tools were built
using a variety of approaches such as kernel-based sys-
tems [19], user-level approaches [27], system call inter-
positions [21], or binary code translation [18], and re-
compilation [45].
A sandbox that also contains transactions is the
TxBox [25], a tool built atop TxOS [33] for specula-
tive execution and automatic recovery. While I-BOX and
TxBox share the similarity of using transactions to build
a sandbox, there are still signiﬁcant differences: the goal
of TxBox is to conﬁne the execution of native x86 pro-
grams atop Linux kernel, whereas I-BOX is to conﬁne
the IME apps atop Android OS. Consequently, I-BOX
faces additional challenges including resolving IPC bind-
ings. Further, using quiescent points in I-BOX signiﬁ-
cantly simpliﬁes the design and implementation.
8 CONCLUSION
This paper made a ﬁrst systematic study on the
(in)security of third-party (trusted or untrusted) IME
apps, and revealed that these apps tend to leak users’
sensitive input (due to their incentives of improving
user’s experience). To enjoy the rich-experiences offered
by such apps while mitigating information leakages,
this paper described I-BOX as a ﬁrst step towards this
direction.
In light of the opaque nature of an IME
app, I-BOX leverages the idea of transactions to run an
IME app to make it oblivious to users’ sensitive input.
Experiments showed that I-BOX is efﬁcient, incurs little
impact on users’ experiences and successfully thwarted
the leakage of sensitive user input.
ACKNOWLEDGMENTS
We thank our shepherd William Enck and the anony-
mous reviewers for their insightful comments, Xiaojuan
Li and Yutao Liu for helping prepare the ﬁnal version.
This work is supported in part by the Program for New
Century Excellent Talents in University, Ministry of Ed-
ucation of China (No. ZXZY037003), a foundation for
the Author of National Excellent Doctoral Dissertation
of PR China (No. TS0220103006), the Shanghai Sci-
ence and Technology Development Fund for high-tech
achievement translation (No. 14511100902), Zhangjiang
Hi-Tech program (No. 201501-YP-B108-012), and the
Singapore NRF (CREATE E2S2).
REFERENCES
[1] Free
software
poses
Chinese-made
risk.
http://www.japantimes.co.jp/news/2013/12/26/national/chinese-
made-computer-input-system-banned-in-government-
agencies/#.U21w5 aPUS0.
security
[2] smali-An assembler/disassembler for Android’s dex format.
https://code.google.com/p/smali/.
[3] Security enhancements
in jelly bean.
http://android-
developers.blogspot.jp/2013/02/security-enhancements-in-
jelly-bean.html, 2013.
[4] A. J. Aviv, B. Sapp, M. Blaze, and J. M. Smith. Practicality of
accelerometer side channels on smartphones. In ACSAC, 2012.
[5] BBC News. Salford woman makes bid for fastest text title.
http://news.bbc.co.uk/local/manchester/hi/people and places/
newsid 8939000/8939790.stm, 2010.
[6] A. Birgisson, M. Dhawan, U. Erlingsson, V. Ganapathy, and
L. Iftode. Enforcing authorization policies using transactional
memory introspection. In CCS, pages 223–234, 2008.
[7] K. Borders, E. Vander Weele, B. Lau, and A. Prakash. Protecting
conﬁdential data on personal computers with storage capsules. In
Usenix Security, 2009.
USENIX Association  
24th USENIX Security Symposium  689
[8] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi,
and B. Shastry. Towards taming privilege-escalation attacks on
android. In NDSS, 2012.
[32] M. Nauman, S. Khan, and X. Zhang. Apex: extending android
permission model and enforcement with user-deﬁned runtime
constraints. In ASIACCS, pages 328–332, 2010.
[9] L. Cai and H. Chen. Touchlogger: inferring keystrokes on touch
[33] D. E. Porter, O. S. Hofmann, C. J. Rossbach, A. Benn, and
screen from smartphone motion. In HotSec, 2011.
E. Witchel. Operating system transactions. In SOSP, 2009.
[10] J. J. K. Chan, K. W. Tan, L. Jiang, and R. K. Balan. The case
for mobile forensics of private data leaks: Towards large-scale
user-oriented privacy protection. In APSYS, 2013.
[34] V. Rastogi, Y. Chen, and W. Enck. Appsplayground: Automatic
security analysis of smartphone applications. In ACM conference
on Data and application security and privacy, 2013.
[11] S. Chen, R. Wang, X. Wang, and K. Zhang. Side-channel leaks
in web applications: A reality today, a challenge tomorrow. In
Oakland, pages 191–206, 2010.
[12] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing
inter-application communication in android. In MobiSys, pages
239–252. ACM, 2011.
[13] China
IT Research Center.
Third-part
stats
age
research.com/content/201405/303.html, 2014.
for 2014 Q1.
in China
IMEs
us-
http://www.cnit-
[14] L. P. Cox, P. Gilbert, G. Lawler, V. Pistol, A. Razeen, B. Wu,
and S. Cheemalapati. Spandex: Secure password tracking for
android. In USENIX Security, 2014.
[15] M. Egele, C. Kruegel, E. Kirda, and G. Vigna. Pios: Detecting
privacy leaks in ios applications. In NDSS, 2011.
[16] W. Enck, P. Gilbert, B. Chun, L. Cox, J. Jung, P. McDaniel, and
A. Sheth. TaintDroid: an information-ﬂow tracking system for
realtime privacy monitoring on smartphones. In OSDI, 2010.
[17] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P.
Cox, J. Jung, P. McDaniel, and A. N. Sheth. Taintdroid: an
information-ﬂow tracking system for realtime privacy monitor-
ing on smartphones. ACM TOCS, 32(2):5, 2014.
[18] B. Ford and R. Cox. Vx32: Lightweight user-level sandboxing
on the x86. In USENIX ATC, 2008.
[19] T. Fraser, L. Badger, and M. Feldman. Hardening cots software
with generic software wrappers. In Oakland, pages 2–16, 1999.
[20] C. Gibler, J. Crussell, J. Erickson, and H. Chen. Androidleaks:
automatically detecting potential privacy leaks in android appli-
cations on a large scale. In Trust, 2012.
[21] I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. A secure
environment for untrusted helper applications conﬁning the wily
hacker. In USENIX Security, 1996.
[22] M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic detection
of capability leaks in stock android smartphones. In NDSS, 2012.
[23] N. Hardy. The confused deputy:(or why capabilities might have
been invented). SIGOPS Oper. Sys. Review, 22(4):36–38, 1988.
[24] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall.
These aren’t the droids you’re looking for: Retroﬁtting android
to protect data from imperious applications. In CCS, 2011.
[25] S. Jana, D. E. Porter, and V. Shmatikov. Txbox: Building secure,
efﬁcient sandboxes with system transactions. In Oakland, 2011.
[26] T. Kim, X. Wang, N. Zeldovich, M. Kaashoek, et al. Intrusion
recovery using selective re-execution. In OSDI, 2010.
[27] T. Kim and N. Zeldovich. Practical and effective sandboxing for
non-root users. In USENIX ATC, pages 139–144, 2013.
[28] O. Laadan and J. Nieh. Transparent checkpoint-restart of multiple
In USENIX ATC,
processes on commodity operating systems.
pages 323–336, 2007.
[29] W. S. Labs.
Fake
input method editor(ime)
trojan.
http://community.websense.com/blogs/securitylabs/archive/
2010/07/05/trojan-using-input-method-inject-technology.aspx.
[35] S. Rosen, Z. Qian, and Z. M. Mao. Appproﬁler: a ﬂexible method
of exposing privacy-related behavior in android applications to
end users. In ACM conference on Data and application security
and privacy, pages 221–232. ACM, 2013.
[36] M. A. Salehi, T. Caldwell, A. Fernandez, E. Mickiewicz, E. W.
Rozier, S. Zonouz, and D. Redberg. Reseed: Regular expression
search over encrypted data in the cloud. In CCGrid, 2014.
[37] S. Sidiroglou, O. Laadan, A. D. Keromytis, and J. Nieh. Using
rescue points to navigate software recovery. In Oakland, 2007.
[38] R. Stevens, C. Gibler, J. Crussell, J. Erickson, and H. Chen. In-
vestigating user privacy in android ad libraries. In Workshop on
Mobile Security Technologies (MoST), 2012.
[39] K. Subramanyam, C. E. Frank,
and D. F. Galli.
overlooked
se-
http://www.keylogger.org/articles/kishore-
Keyloggers:
curity.
subramanyam/keyloggers-the-overlooked-threat-to-computer-
security-7.html.
computer
threat
The
to
[40] TechSpot News.
Google ﬁred employees
for breach-
http://www.techspot.com/
user
privacy.
ing
news/40280-google-fired-employees-
for-breaching-user-privacy.html, 2010.
[41] Y. Xia, Y. Liu, and H. Chen. Architecture support for guest-
transparent vm protection from untrusted hypervisor and physical
attacks. In HPCA, 2013.
[42] Y. Xia, Y. Liu, C. Tan, M. Ma, H. Guan, B. Zang, and H. Chen.
Tinman: eliminating conﬁdential mobile data exposure with se-
curity oriented ofﬂoading. In EuroSys, 2015.
[43] R. Xu, H. Sa¨ıdi, and R. Anderson. Aurasium: Practical policy
enforcement for android applications. In USENIX Security, 2012.
[44] W. Yang, X. Xiao, B. Andow, S. Li, T. Xie, and W. Enck. App-
context: Differentiating malicious and benign mobile app behav-
iors using context. In ICSE, 2015.
[45] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy,
S. Okasaka, N. Narula, and N. Fullagar. Native client: A sand-
box for portable, untrusted x86 native code. Commun. ACM,
53(1):91–99, Jan. 2010.
[46] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda. Panorama:
Capturing system-wide information ﬂow for malware detection
and analysis. In CCS, 2007.
[47] F. Zhang, J. Chen, H. Chen, and B. Zang. Cloudvisor: retroﬁtting
protection of virtual machines in multi-tenant cloud with nested
virtualization. In SOSP, 2011.
[48] W. Zhou, Y. Zhou, X. Jiang, and P. Ning. Detecting repackaged
smartphone applications in third-party android marketplaces. In
ACM conference on Data and Application Security and Privacy,
pages 317–326. ACM, 2012.
[49] Y. Zhou and X. Jiang. Dissecting android malware: Characteri-
zation and evolution. In Oakland, 2012.
[50] Y. Zhou and X. Jiang. Detecting passive content leaks and pollu-
tion in android applications. In NDSS, 2013.
[30] S. Lee, E. L. Wong, D. Goel, M. Dahlin, and V. Shmatikov. πbox:
[51] Y. Zhou, X. Zhang, X. Jiang, and V. W. Freeh.
a platform for privacy-preserving apps. In NSDI, 2013.
[31] D. Liu, E. Cuervo, V. Pistol, R. Scudellari, and L. P. Cox. Screen-
pass: Secure password entry on touchscreen devices. In MobiSys,
pages 291–304, 2013.
information-stealing smartphone applications (on android).
Conference on Trust and Trustworthy Computing, 2011.
Taming
In
690  24th USENIX Security Symposium 
USENIX Association