### Dynamically Detect and Prevent Attacks
To dynamically detect and prevent such attacks, refer to [12, 43]. Android has significantly improved its permission systems since version 4.2 [3].

### Voice Input
Currently, our input data protection is limited to handwriting and keystroke inputs, and we do not consider voice input as it does not involve keystrokes. However, users often use dedicated system services like Apple Siri, Google Now, and Microsoft voice recognition. Handling voice input while preserving privacy is a challenging task and will be addressed in future work.

### Beyond Mobile IME Apps
The approach of I-BOX is not limited to mobile platforms; similar techniques can be applied to desktops, which also face a trade-off between privacy and usability. We may provide a similar oblivious sandbox for each IME app, which should be straightforward given that Android runs on top of Linux. This will be part of our future work. Additionally, other applications requiring a balance between privacy and usability could use execution transactions similar to I-BOX.

### Related Work

#### Privacy Leakage Detection in Mobile Devices
Significant efforts have been made to detect privacy leakage in mobile devices. Early attempts include TaintDroid [16, 17] and PiOS [15], while more recent efforts include Woodpecker [22], AndroidLeaks [20], ContentScope [50], and AppProfiler [35].

- **TaintDroid [16]**: Uses dynamic taint analysis to track whether sensitive information (e.g., address book) can be leaked through the network.
- **PiOS [15]**: Focuses on privacy leakage in iOS apps using static analysis.
- **Woodpecker [22]**: Leverages inter-procedural data-flow analysis to inspect unauthorized access to sensitive data by untrusted apps.
- **ContentScope [50]**: Detects passive content leak vulnerabilities, where in-app sensitive data can be leaked.
- **AndroidLeaks [20]**: Uses static analysis to detect data leakage in Android apps.
- **Chan et al. [10]**: Leverages mobile forensics to correlate user actions with privacy leakages.
- **AppProfiler [35]**: Creates a mapping between high-level API calls and low-level privacy-related behavior to provide a high-level profile of an app's privacy behavior.
- **Mobile Ads [38]**: There is also interest in detecting privacy leakage due to mobile ads.

In contrast, I-BOX focuses on preventing the leakage of sensitive keystrokes.

#### Privacy Leakage Prevention in Mobile Devices
Several systems aim to prevent private data from being leaked. For example:

- **AppFence [24]**: Extends TaintDroid to prevent applications from accessing sensitive information using data shadowing and blocks outgoing communications tainted by sensitive data. While both I-BOX and AppFence block network communications when sensitive data is to be leaked, there are key differences: AppFence uses shadowing to provide an illusion to the app, whereas I-BOX does not use any illusion or instruction-level taint tracking due to the pervasive existence of native code. Additionally, AppFence does not handle consistent rollback and simply blocks network communication, whereas I-BOX maintains the connection and allows other data to be transferred.
- **TISSA [51]**: Tames information-stealing apps to stop possible privacy leakage.
- **SpanDex [14]**: Uses symbolic execution to quantify and limit implicit flows through a sandbox to prevent untrusted applications from leaking passwords.
- **Aurasium [43]**: Attaches sandboxing and policy enforcement to existing Android apps to stop malicious behaviors such as retrieving users' sensitive information. Unlike Aurasium, πBox [30] shifts the sandboxing protection of private data from the app level to the system level, offering a platform for privacy-preserving apps. However, πBox trusts a few app vendors to protect users' privacy data, while I-BOX treats IME app vendors as untrusted due to their incentives to collect user input.
- **TinMan [42]**: Offloads password-like secrets to a remote cloud but only handles a class of special secrets that do not need to be displayed on mobile devices.
- **ScreenPass [31]**: Uses a trusted software keyboard to input and tag passwords and employs taint tracking to ensure that a password is only used within a specific domain. In contrast, while I-BOX also uses a trusted software keyboard for password input, it focuses more on preventing a malicious IME from leaking sensitive data (not just passwords).

#### Checkpoint and Restore
I-BOX employs a checkpoint and restore mechanism to prevent privacy leakage. Such mechanisms have been used in transactional memory [6], execution transactions [37], and whole-system transactions [33]. Retro [26] uses selective re-execution for intrusion recovery, and Storage Capsules [7] use checkpoint and restore to wipe residual data after an application has viewed data on a desktop. I-BOX is an instance of a system transaction specifically designed for untrusted IME apps.

#### Sandboxing
Many efforts have been made to build sandboxes for executing untrusted programs, web applications, and native code. These tools use various approaches, including kernel-based systems [19], user-level approaches [27], system call interpositions [21], binary code translation [18], and recompilation [45].

- **TxBox [25]**: Built atop TxOS [33] for speculative execution and automatic recovery. While I-BOX and TxBox both use transactions to build a sandbox, their goals differ: TxBox confines the execution of native x86 programs on the Linux kernel, whereas I-BOX confines IME apps on the Android OS. Consequently, I-BOX faces additional challenges, including resolving IPC bindings. Using quiescent points in I-BOX significantly simplifies the design and implementation.

### Conclusion
This paper presents a systematic study on the (in)security of third-party (trusted or untrusted) IME apps, revealing that these apps tend to leak users' sensitive input due to their incentives to improve user experience. To enjoy the rich experiences offered by such apps while mitigating information leakages, this paper introduces I-BOX. Leveraging the idea of transactions, I-BOX runs IME apps to make them oblivious to users' sensitive input. Experiments show that I-BOX is efficient, has minimal impact on user experience, and successfully thwarts the leakage of sensitive user input.

### Acknowledgments
We thank our shepherd William Enck and the anonymous reviewers for their insightful comments, Xiaojuan Li and Yutao Liu for helping prepare the final version. This work is supported in part by the Program for New Century Excellent Talents in University, Ministry of Education of China (No. ZXZY037003), a foundation for the Author of National Excellent Doctoral Dissertation of PR China (No. TS0220103006), the Shanghai Science and Technology Development Fund for high-tech achievement translation (No. 14511100902), Zhangjiang Hi-Tech program (No. 201501-YP-B108-012), and the Singapore NRF (CREATE E2S2).

### References
[References listed here as provided in the original text]

---

This optimized version aims to enhance clarity, coherence, and professionalism, making the text more accessible and easier to understand.