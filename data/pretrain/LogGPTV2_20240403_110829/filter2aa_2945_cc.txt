}
...
IEnumerable customerFullNames =
    customers.Select(cust => new FullName
    {
        FirstName = cust.FirstName,
        LastName = cust.LastName
    });
The second option is arguably preferable, but if this is the only use
that your application makes of the Names type, you might prefer to use
an anonymous type, as in the following, instead of defining a new type
specifically for a single operation:
Click here to view code image
Download from finelybook PI:EMAIL
707
var customerFullNames =
customers.Select(cust => new
{
    FirstName = cust.FirstName,
    LastName = cust.LastName
});
Notice the use of the var keyword here to define the type of the
enumerable collection. The type of objects in the collection is anonymous, so
you do not know the specific type of the objects in the collection.
Filtering data
With the Select method, you can specify, or project, the fields that you want
to include in the enumerable collection. However, you might also want to
restrict the rows that the enumerable collection contains. For example,
suppose you want to list only the names of companies in the addresses array
that are located in the United States. To do this, you can use the Where
method, as follows:
Click here to view code image
IEnumerable usCompanies = addresses
    .Where(addr => String.Equals(addr.Country,"United States"))
    .Select(usComp => usComp.CompanyName);
foreach (string name in usCompanies)
{
    Console.WriteLine(name);
}
Syntactically, the Where method is similar to Select. It expects a
parameter that defines a method that filters the data according to whatever
criteria you specify. This example makes use of another lambda expression.
The variable addr is an alias for a row in the addresses array, and the lambda
expression returns all rows where the Country field matches the string
“United States”. The Where method returns an enumerable collection of rows
containing every field from the original collection. The Select method is then
applied to these rows to project only the CompanyName field from this
enumerable collection to return another enumerable collection of string
objects. (The variable usComp is an alias for the type of each row in the
enumerable collection returned by the Where method.) The type of the result
of this complete expression is, therefore, IEnumerable. It is
Download from finelybook PI:EMAIL
708
important to understand this sequence of operations—the Where method is
applied first to filter the rows, followed by the Select method to specify the
fields. The foreach statement that iterates through this collection displays the
following companies:
Coho Winery
Trey Research
Ordering, grouping, and aggregating data
If you are familiar with SQL, you are aware that it makes it possible for you
to perform a wide variety of relational operations besides simple projection
and filtering. For example, you can specify that you want data to be returned
in a specific order, you can group the rows returned according to one or more
key fields, and you can calculate summary values based on the rows in each
group. LINQ provides the same functionality.
To retrieve data in a particular order, you can use the OrderBy method.
Like the Select and Where methods, OrderBy expects a method as its
argument. This method identifies the expressions that you want to use to sort
the data. For example, you can display the name of each company in the
addresses array in ascending order, like this:
Click here to view code image
IEnumerable companyNames = addresses
    .OrderBy(addr => addr.CompanyName)
    .Select(comp => comp.CompanyName);
foreach (string name in companyNames)
{
    Console.WriteLine(name);
}
This block of code displays the companies in the addresses table in
alphabetical order.
Alpine Ski House
Coho Winery
Trey Research
Wide World Importers
Wingtip Toys
If you want to enumerate the data in descending order, you can use the
Download from finelybook PI:EMAIL
709
OrderByDescending method instead. If you want to order by more than one
key value, you can use the ThenBy or ThenByDescending method after
OrderBy or OrderByDescending.
To group data according to common values in one or more fields, you can
use the GroupBy method. The following example shows how to group the
companies in the addresses array by country:
Click here to view code image
var companiesGroupedByCountry = addresses
    .GroupBy(addrs => addrs.Country);
foreach (var companiesPerCountry in companiesGroupedByCountry)
{
    Console.WriteLine(
        $"Country:
{companiesPerCountry.Key}\t{companiesPerCountry.Count()} companies");
    foreach (var companies in companiesPerCountry)
    {
        Console.WriteLine($"\t{companies.CompanyName}");
    }
}
By now, you should recognize the pattern. The GroupBy method expects a
method that specifies the fields by which to group the data. However, there
are some subtle differences between the GroupBy method and the other
methods that you have seen so far.
The main point of interest is that you don’t need to use the Select method
to project the fields to the result. The enumerable set returned by GroupBy
contains all the fields in the original source collection, but the rows are
ordered into a set of enumerable collections based on the field identified by
the method specified by GroupBy. In other words, the result of the GroupBy
method is an enumerable set of groups, each of which is an enumerable set of
rows. In the example just shown, the enumerable set
companiesGroupedByCountry is a set of countries. The items in this set are
themselves enumerable collections containing the companies for each country
in turn. The code that displays the companies in each country uses a foreach
loop to iterate through the companiesGroupedByCountry set to yield and
display each country in turn, and then it uses a nested foreach loop to iterate
through the set of companies in each country. Notice in the outer foreach
loop that you can access the value you are grouping by using the Key field of
Download from finelybook PI:EMAIL
710
each item, and you can also calculate summary data for each group by using
methods such as Count, Max, Min, and many others. The output generated by
the example code looks like this:
Click here to view code image
Country: Switzerland    1 companies
        Alpine Ski House
Country: United States  2 companies
        Coho Winery
        Trey Research
Country: United Kingdom 2 companies
        Wingtip Toys
Wide World Importers
You can use many of the summary methods such as Count, Max, and Min
directly over the results of the Select method. If you want to know how many
companies there are in the addresses array, you can use a block of code such
as this:
Click here to view code image
int numberOfCompanies = addresses
        .Select(addr => addr.CompanyName).Count();
Console.WriteLine($"Number of companies: ");
Notice that the result of these methods is a single scalar value rather than
an enumerable collection. The output from the preceding block of code looks
like this:
Number of companies: 5
I should utter a word of caution at this point. These summary methods do
not distinguish between rows in the underlying set that contain duplicate
values in the fields you are projecting. This means that strictly speaking, the
preceding example shows you only how many rows in the addresses array
contain a value in the CompanyName field. If you wanted to find out how
many different countries are mentioned in this table, you might be tempted to
try this:
Click here to view code image
int numberOfCountries = addresses
    .Select(addr => addr.Country).Count();
Console.WriteLine($"Number of countries: ");
The output looks like this:
Download from finelybook PI:EMAIL
711
Number of countries: 5
In fact, the addresses array includes only three different countries; it just
so happens that United States and United Kingdom both occur twice. You
can eliminate duplicates from the calculation by using the Distinct method,
like this:
Click here to view code image
int numberOfDistinctCountries = addresses
    .Select(addr => addr.Country).Distinct().Count();
Console.WriteLine($"Number of distinct countries: ");
The Console.WriteLine statement now outputs the expected result:
Number of countries: 3
Joining data
Just like SQL, LINQ gives you the ability to join together multiple sets of
data over one or more common key fields. The following example shows
how to display the first and last names of each customer, together with the
name of the country where the customer is located:
Click here to view code image
var companiesAndCustomers = customers
  .Select(c => new { c.FirstName, c.LastName, c.CompanyName })
  .Join(addresses, custs => custs.CompanyName, addrs =>
addrs.CompanyName,
(custs, addrs) => new {custs.FirstName, custs.LastName, addrs.Country
});
foreach (var row in companiesAndCustomers)
{
    Console.WriteLine(row);
}
The customers’ first and last names are available in the customers array,
but the country for each company that customers work for is stored in the
addresses array. The common key between the customers array and the
addresses array is the company name. The Select method specifies the fields
of interest in the customers array (FirstName and LastName), together with
the field containing the common key (CompanyName). You use the Join
method to join the data identified by the Select method with another
Download from finelybook PI:EMAIL
712
enumerable collection. The parameters to the Join method are as follows:
The enumerable collection with which to join
A method that identifies the common key fields from the data
identified by the Select method
A method that identifies the common key fields on which to join the
selected data
A method that specifies the columns you require in the enumerable
result set returned by the Join method
In this example, the Join method joins the enumerable collection
containing the FirstName, LastName, and CompanyName fields from the
customers array with the rows in the addresses array. The two sets of data are
joined where the value in the CompanyName field in the customers array
matches the value in the CompanyName field in the addresses array. The
result set includes rows containing the FirstName and LastName fields from
the customers array with the Country field from the addresses array. The
code that outputs the data from the companiesAndCustomers collection
displays the following information:
Click here to view code image
{ FirstName = Kim, LastName = Abercrombie, Country = Switzerland }
{ FirstName = Jeff, LastName = Hay, Country = United States }
{ FirstName = Charlie, LastName = Herb, Country = Switzerland }
{ FirstName = Chris, LastName = Preston, Country = United States }
{ FirstName = Dave, LastName = Barnett, Country = United Kingdom }
{ FirstName = Ann, LastName = Beebe, Country = United States }
{ FirstName = John, LastName = Kane, Country = United Kingdom }
{ FirstName = David, LastName = Simpson, Country = United States }
{ FirstName = Greg, LastName = Chapman, Country = United Kingdom }
{ FirstName = Tim, LastName = Litton, Country = United Kingdom }
Note Remember that collections in memory are not the same as tables
in a relational database, and the data they contain is not subject to the
same data integrity constraints. In a relational database, it could be
acceptable to assume that every customer has a corresponding company
and that each company has its own unique address. Collections do not
Download from finelybook PI:EMAIL
713
enforce the same level of data integrity, meaning that you can quite
easily have a customer referencing a company that does not exist in the
addresses array, and you might even have the same company occurring
more than once in the addresses array. In these situations, the results
that you obtain might be accurate but unexpected. Join operations work
best when you fully understand the relationships between the data you
are joining.
Using query operators
The preceding sections have shown you many of the features available for
querying in-memory data by using the extension methods for the Enumerable
class defined in the System.Linq namespace. The syntax makes use of several
advanced C# language features, and the resultant code can sometimes be
quite hard to understand and maintain. To relieve you of some of this burden,
the designers of C# added query operators to the language with which you
can employ LINQ features by using a syntax more akin to SQL.
As you saw in the examples shown earlier in this chapter, you can retrieve
the first name for each customer like this:
Click here to view code image
IEnumerable customerFirstNames = customers
    .Select(cust => cust.FirstName);
You can rephrase this statement by using the from and select query
operators, like this:
Click here to view code image
var customerFirstNames = from cust in customers
                         select cust.FirstName;
At compile time, the C# compiler resolves this expression into the
corresponding Select method. The from operator defines an alias for the
source collection, and the select operator specifies the fields to retrieve by
using this alias. The result is an enumerable collection of customer first
names. If you are familiar with SQL, notice that the from operator occurs
before the select operator.
Download from finelybook PI:EMAIL
714
Continuing in the same vein, to retrieve the first and last names for each
customer, you can use the following statement. (You might want to refer to
the earlier example of the same statement based on the Select extension
method.)
Click here to view code image
var customerNames = from cust in customers
                    select new { cust.FirstName, cust.LastName };
You use the where operator to filter data. The following example shows
how to return the names of the companies based in the United States from the
addresses array:
Click here to view code image
var usCompanies = from a in addresses
                  where String.Equals(a.Country,"United States")
                  select a.CompanyName;
To order data, use the orderby operator, like this:
Click here to view code image
var companyNames = from a in addresses
                   orderby a.CompanyName
                   select a.CompanyName;
You can group data by using the group operator in the following manner:
Click here to view code image
var companiesGroupedByCountry = from a in addresses
                                group a by a.Country;
Notice that, as with the earlier example showing how to group data, you
do not provide the select operator, and you can iterate through the results by
using the same code as the earlier example, like this:
Click here to view code image
foreach (var companiesPerCountry in companiesGroupedByCountry)
{
    Console.WriteLine(
        $"Country:
{companiesPerCountry.Key}\t{companiesPerCountry.Count()} companies");
    foreach (var companies in companiesPerCountry)
    {
        Console.WriteLine($"\t{companies.CompanyName}");
    }
Download from finelybook PI:EMAIL
715
}
You can invoke summary functions such as Count over the collection
returned by an enumerable collection like this:
Click here to view code image
int numberOfCompanies = (from a in addresses
                         select a.CompanyName).Count();
Notice that you wrap the expression in parentheses. If you want to ignore
duplicate values, use the Distinct method:
Click here to view code image
int numberOfCountries = (from a in addresses
                         select a.Country).Distinct().Count();
Tip In many cases, you probably want to count just the number of rows
in a collection rather than the number of values in a field across all the
rows in the collection. In this case, you can invoke the Count method
directly over the original collection, like this:
Click here to view code image
int numberOfCompanies = addresses.Count();
You can use the join operator to combine two collections across a
common key. The following example shows the query returning customers
and addresses over the CompanyName column in each collection, this time
rephrased by using the join operator. You use the on clause with the equals
operator to specify how the two collections are related.
Note LINQ currently supports equi-joins (joins based on equality) only.
If you are a database developer who is used to SQL, you might be
familiar with joins based on other operators, such as > and  objects
The examples you’ve seen so far in this chapter have shown how to query the
data in an array. You can use the same techniques for any collection class that
implements the generic IEnumerable interface. In the following exercise,
you will define a new class for modeling employees for a company. You will
Download from finelybook PI:EMAIL
717
create a BinaryTree object containing a collection of Employee objects, and
then you will use LINQ to query this information. You will initially call the
LINQ extension methods directly, but then you will modify your code to use
query operators.
Retrieve data from a BinaryTree by using the extension methods
1. Start Visual Studio 2017 if it is not already running.
2. Open the QueryBinaryTree solution, which is located in the \Microsoft
Press\VCSBS\ Chapter 21\QueryBinaryTree folder in your Documents
folder. The project contains the Program.cs file, which defines the
Program class with the Main and doWork methods that you have seen in
previous exercises.
The solution also includes a copy of the BinaryTree project that you
have seen in previous chapters.
3. In Solution Explorer, right-click the QueryBinaryTree project, point to
Add, and then click Class. In the Add New Item - Query BinaryTree
dialog box, type Employee.cs in the Name box, and then click Add.
4. Add the automatic properties shown in bold in the following code to the
Employee class:
Click here to view code image
class Employee
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Department { get; set; }
    public int Id { get; set; }
}
5. Add the ToString method shown in bold in the code that follows to the
Employee class. Types in the .NET Framework use this method when
converting the object to a string representation, such as when displaying
it by using the Console.WriteLine statement.
Click here to view code image
class Employee
{
    ...
Download from finelybook PI:EMAIL
718
    public override string ToString() =>
        $"Id: {this.Id}, Name: {this.FirstName} {this.LastName},
Dept: {this.Department}";
}
6. Modify the definition of the Employee class to implement the
IComparable  interface, as shown here:
Click here to view code image
class Employee : IComparable
{
}
This step is necessary because the BinaryTree class specifies that its
elements must be “comparable.”
7. Hover over the IComparable interface in the class
definition, click the lightbulb icon that appears, and then click
Implement Interface Explicitly on the context menu.
This action generates a default implementation of the CompareTo
method. Remember that the BinaryTree class calls this method when it
needs to compare elements when inserting them into the tree.
8. Replace the body of the CompareTo method with the following code
shown in bold. This implementation of the CompareTo method
compares Employee objects based on the value of the Id field.
Click here to view code image
int IComparable.CompareTo(Employee other)
{
    if (other == null)
    {