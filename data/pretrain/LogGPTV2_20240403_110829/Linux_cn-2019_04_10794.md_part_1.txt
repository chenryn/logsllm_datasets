---
author: 老王
category: 穿山甲专访
comments_data:
- date: '2019-05-01 07:31:29'
  message: 不如做一个闭源千牛Linux客户端有价值。
  postip: 171.82.133.162
  username: 来自湖北武汉的 Chrome Mobile 57.0|Android 8.1 用户
count:
  commentnum: 1
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 11004
date: '2019-04-29 11:38:00'
editorchoice: true
excerpt: 谈话中，鲁直反问的“你为什么不开源？”这句话让我印象深刻。
fromurl: ''
id: 10794
islctt: false
largepic: /data/attachment/album/201904/29/122828t9nn39yrrez93kh3.jpg
permalink: /article-10794-1.html
pic: /data/attachment/album/201904/29/122828t9nn39yrrez93kh3.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 10141
- displayorder: 0
  raid: 10548
- displayorder: 2
  raid: 10693
reviewer: ''
selector: ''
summary: 谈话中，鲁直反问的“你为什么不开源？”这句话让我印象深刻。
tags:
- 蚂蚁金服
- 穿山甲专访
thumb: false
title: 对话鲁直：蚂蚁金服中间件的开源头羊
titlepic: true
translator: ''
updated: '2019-04-29 11:38:00'
---
![](/data/attachment/album/201904/29/122828t9nn39yrrez93kh3.jpg)
二月初春，在西子湖畔的细雨中，我拜访了蚂蚁金服中间件团队，和 SOFA 技术负责人鲁直做了一次深入交谈，更妙的是，鲁直也是负责 SOFA 开源事务推进的人，而这样一个切实践行开放核心模式的开源项目，也正是我非常感兴趣的。
两个技术人的谈话，自然是朴实而直白的，话题主要围绕着 SOFA 和开源主题展开，希望也能一样引起同是技术人的你的共鸣。
![](/data/attachment/album/201904/29/114834oq8iq804ii4v4xs3.jpg)
> 
> **人物介绍**
> 
> 
> 受访者：鲁直，蚂蚁金服 SOFA 开源负责人。
> 
> 
> 采访者：老王，开源布道人，有 20 年互联网从业经历的技术老兵。
> 
> 
> 
虽然我和鲁直在微信上已经联系很久了，但这还是第一次见面。交谈中，我了解到鲁直是 2009 年加入阿里巴巴工作，已经有十年了。刚开始是在 1688.COM 做业务系统，对中间件技术非常感兴趣，也会经常研究各种中间件的实现和功能。后来在 2013年时，为了更深入地学习研究中间件框架，转到了蚂蚁金服中间件团队，从那个时候开始就一直在做 SOFA。
目前鲁直在 SOFA 的团队主要负责的工作包括几个部分。其中一个主要部分就是 SOFA 开源相关的工作。SOFA 的产品体系非常广，包括已经对外开源的部分、内部整个微服务体系，以及 SOFA 框架等等——而这些开源相关的工作主要是由鲁直负责推动的。
当然，作为技术负责人，鲁直既要带技术团队也要做技术工作。谈及这一点，鲁直说：
“我觉得做技术管理，跟普通的管理不太一样，因为**技术管理最重要的一个点是除了管理之外，还要保持一定的技术判断力和敏锐度**。对一些新技术，包括团队中遇到一些重大的技术问题，你都要有一些方向性的判断。虽然最后不一定是你具体解决的，但是在整个团队的技术攻坚和技术选型上，要一起确立方向。”
我以前也做过十余年的技术管理，我很能够感受这种情况，重大问题技术负责人更要迎难而上。
### SOFA 5 落子 Service Mesh
就我了解的情况，现在 SOFA 已经发展到了 SOFA5 了。在 SOFA4 阶段，主要的任务是将开源体系捋清楚了，然后开始按步骤地开源；到现在发展到了 SOFA5。我想知道从 SOFA4 发展到 SOFA5，是什么让蚂蚁金服中间件团队判断 SOFA4 的阶段性目标已经达成，可以迈进到新的 SOFA5 阶段了呢？
 “从整个业界趋势上来讲，SOFA4 的架构相对来说还是偏传统一些，更多是对我们之前的技术框架的整理和梳理。在这个阶段，SOFA 的代码经过了非常多的优化和重构，才达到了对外开源的要求，从而 SOFA 走上了开源核心的模式，逐步分阶段的将各个部分进行了开源。”鲁直讲到，“但是，从我们对业界的整体判断上来说，未来无疑是云的时代，所以说要考虑怎么让所有的业务系统能够提供云的能力，比如说 Serverless。”
接着这个话题，鲁直讲了他对云计算的理解：“一方面云计算肯定要为整个业务的发展提供更加方便的基础资源，可以不用去关心底层的基础设施。Serverless 字面的意思就是说‘无服务器’——我不用关心服务器怎么来的，不用关心基础设施，只要关心业务代码就可以了。那反过来对于云服务商来说，经过了这一层抽象，其资源利用率会更高，可以有更多的利润空间，这是一个双赢的局面。**对于用户来讲，这种好处是实实在在的，可以更少关注基础设施，只关心代码就可以了。**”
> 
>  “我们希望在 SOFA5 的方向上，在这个新的迭代中，去让业务——包括让未来我们开源出来各种功能、各样服务模式——都更多地去关心自己的业务代码，而不用再过多地关心基础设施。”鲁直说。
> 
> 
> 
在 SOFA5 中，一个重要的方向就是 **Service Mesh 这个方向，这将是 SOFA5 中非常重要的特性**。鲁直强调了其对 Service Mesh 技术的看好：“我认为 Service Mesh 是迈向未来往前走的非常关键的一步，让业务不用再关心基础设施。通过 Service Mesh，我们可以将很多技术能力直接放到基础设施里面，而业务可以不用感知到这一层。原来可能需要花几个小时或者更多的时间解决的基础设施问题，现在可以通过 Service Mesh 解决掉。”
“目前我们我们已经在生产环境中应用了 Service Mesh。我们在这方面有非常大的决心，我们希望能够在今年，在更大的范围中去落地 Service Mesh。当前这个阶段更聚焦在这种技术的内部落地上，希望用好了，再给社区做更多的贡献。”
> 
> *Service Mesh 这个词最早是由开发 Linkerd 的 Buoyant 公司于 2016 年提出的，随着 Linkerd 的传入，Service Mesh 也进入国内技术社区的视野。Service Mesh 也被翻译为“服务网格”。Linkerd 则是业界第一个 Service Mesh。*
> 
> 
> *Service Mesh 是一个基础设施层，用于处理服务间通信，负责实现请求的可靠传递。在实践中，服务网格通常实现为轻量级网络代理，通常与应用程序部署在一起，但是对应用程序透明。*
> 
> 
> *Service Mesh 的部署模型，有两种情况：*
> 
> 
> * *对于一个简单请求，作为请求发起者的客户端应用实例，会首先用简单方式将请求发送到本地的 Service Mesh 实例。这是两个独立进程，它们之间是远程调用。Service Mesh 会完成完整的服务间调用流程，如服务发现负载均衡，最后将请求发送给目标服务。这就是 Sidecar，它在原有的客户端和服务端之间加多了一个代理。*
> * *多个服务调用的情况，Service Mesh 出现在所有的服务的下面，这一层被称之为服务间通讯专用基础设施层。Service Mesh 会接管整个网络，把所有的请求在服务之间做转发。在这种情况下，上面的服务不再负责传递请求的具体逻辑，只负责完成业务处理。服务间通讯的环节就从应用里面剥离出来，呈现出一个抽象层。*
> 
> 
> *如果有大量的服务，Sidecar 之间的连接就会形成一个网络，这个就是服务网格名字的由来。*
> 
> 
> 
“我们将以 Service Mesh 为跳板再往前走。”鲁直表示，“**Serverless 更多的还是应该聚焦在其字面本身，其含义就是‘无服务器’，后面的技术都是为了让无服务器承载具体的业务。**”