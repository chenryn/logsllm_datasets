.B \&.\c
.I suffix\c
\&\c 
\&\|' 的 目标文件 是`\|\c
.I source\c
.B \&.o\c
\&\|', 汇编文件 是 `\|\c
.I source\c
.B \&.s\c
\&\|', 而 预处理后的 C 源代码 送往 标准输出.
.TP
.B \-v
(在 标准错误) 显示 执行 编译 阶段 的 命令. 同时 显示 编译器 驱动程序,
预处理器, 编译器 的 版本号.
.TP
.B \-pipe
在 编译过程 的 不同 阶段 间 使用 管道 而非 临时文件 进行 通信.
这个 选项 在 某些 系统 上 无法 工作, 因为 那些 系统 的 汇编器 不能 从 管道
读取 数据. GNU 的 汇编器 没有 这个问题.
.PP
.SH "语言选项 (LANGUAGE OPTIONS)"
下列 选项 控制 编译器 能够 接受 的 C "方言":
.TP
.B \-ansi
支持 符合 ANSI 标准的 C 程序.
.Sp
这样 就会 关闭 GNU C 中 某些 不兼容 ANSI C 的 特性, 例如 \c
.B asm\c
\&, \c
.B inline\c
\& 和 \c
.B typeof
关键字, 以及 诸如 \c
.B unix\c
\& 和 \c
.B vax
这些 表明 当前系统 类型 的 预定义宏. 同时 开启 不受欢迎 和 极少使用的
ANSI trigraph 特性, 以及 禁止 `\|\c
.B $\c
\&\|' 成为 标识符 的 一部分.
.Sp
尽管 使用了 `\|\c
.B \-ansi\c
\&\|' 选项, 下面 这些 可选的 关键字, \c
.B _\|_asm_\|_\c
\&, \c
.B _\|_extension_\|_\c
\&,
.B _\|_inline_\|_\c
\& 和 \c
.B _\|_typeof_\|_\c
\& 仍然 有效. 你 当然 不会 把 他们 用在 ANSI C 程序 中, 但可以 把 他们 放在
头文件 里, 因为 编译 包含 这些 头文件 的 程序 时, 可能会 指定 `\|\c
.B \-ansi\c
\&\|' 选项.  另外一些 预定义宏, 如 \c
.B _\|_unix_\|_\c
\& 和 \c
.B _\|_vax_\|_\c
\&, 无论 有没有 使用 `\|\c
.B \-ansi\c
\&\|' 选项, 始终 有效.
.Sp
使用 `\|\c
.B \-ansi\c
\&\|' 选项 不会 自动 拒绝 编译  非ANSI程序, 除非 增加 `\|\c
.B \-pedantic\c
\&\|' 选项 作为 `\|\c
.B \-ansi\c
\&\|' 选项 的 补充.
.Sp
使用 `\|\c
.B \-ansi\c
\&\|' 选项 的 时候, 预处理器 会 预定义 一个 \c
.B _\|_STRICT_ANSI_\|_\c
\& 宏. 有些 头文件 关注 此宏, 以 避免 声明 某些函数, 或者 避免 定义 某些宏,
这些 函数 和 宏 不被 ANSI 标准 调用; 这样 就不会 干扰 在 其他地方 使用 这些
名字 的 程序 了.
.TP
.B \-fno\-asm
不把 \c
.B asm\c
\&, \c
.B inline\c
\& 或 \c
.B typeof\c
\& 当作 关键字, 因此 这些 词 可以 用做 标识符. 用 \c
.B _\|_asm_\|_\c
\&, \c
.B _\|_inline_\|_\c
\& 和 \c
.B _\|_typeof_\|_\c
\& 能够 替代 他们.
`\|\c
.B \-ansi\c
\&\|' 隐含声明了 `\|\c
.B \-fno\-asm\c
\&\|'.
.TP
.B \-fno\-builtin
不接受 不是 两个 下划线 开头 的 内建函数 (built-in function). 
目前 受影响 的 函数 有 \c
.B _exit\c
\&,
.B abort\c
\&, \c
.B abs\c
\&, \c
.B alloca\c
\&, \c
.B cos\c
\&, \c
.B exit\c
\&,
.B fabs\c
\&, \c
.B labs\c
\&, \c
.B memcmp\c
\&, \c
.B memcpy\c
\&, \c
.B sin\c
\&,
.B sqrt\c
\&, \c
.B strcmp\c
\&, \c
.B strcpy\c
\&, 和 \c
.B strlen\c
\&.
.Sp
`\|\c
.B \-ansi\c
\&\|' 选项 能够 阻止 \c
.B alloca\c
\& 和 \c
.B _exit\c
\& 成为 内建函数.
.TP
.B \-fhosted
按 宿主环境 编译; 他 隐含 声明了 `\|\c
.B \-fbuiltin\c
\&\|' 选项, 而且 警告 不正确的
.B main\c
\& 函数 声明.
.TP
.B \-ffreestanding
按 独立环境 编译; 他 隐含 声明了 `\|\c
.B \-fno-builtin\c
\&\|' 选项, 而且 对
.B main\c
\& 函数 没有 特别要求.
(译注: 宿主环境 (hosted environment) 下 所有的 标准库 可用, main 函数 返回
一个 int 值, 典型例子 是 除了 内核 以外 几乎 所有的 程序. 对应的 独立环境
(freestanding environment) 不存在 标准库, 程序 入口 也 不一定是 main, 最明显
的 例子 就是 操作系统内核. 详情 参考 gcc 网站 最近的 资料)
.TP
.B \-fno\-strict\-prototype
对于 没有 参数 的 函数声明, 例如 `\|\c
.B int foo
();\c
\&\|', 按 C 风格 处理\(em\&即 不说明 参数 个数 或 类型. (仅针对 C++).
正常情况下, 这样的 函数 \c
.B foo\c
\& 在 C++ 中 意味着 参数 为 空.
.TP
.B \-trigraphs
支持 ANSI C trigraphs. `\|\c
.B \-ansi\c
\&\|' 选项 隐含声明了 `\|\c
.B \-trigraphs\c
\&\|'.
.TP
.B \-traditional
试图 支持 传统 C 编译器 的 某些方面. 详见 GNU C 手册, 我们 已经把 细节清单
从这里 删除, 这样 当内容 过时后, 人们 也不会 埋怨 我们.
.Sp
除了 一件事: 对于 C++ 程序 (不是 C),  `\|\c
.B \-traditional\c
\&\|' 选项 带来 一个 附加效应, 允许 对
.B this
赋值.  他 和 `\|\c
.B \-fthis\-is\-variable\c
\&\|' 选项 的 效果 一样.
.TP
.B \-traditional\-cpp
试图 支持 传统 C 预处理器 的 某些方面. 特别是 上面 提到 有关 预处理器 的
内容, 但是 不包括 `\|\c
.B \-traditional\c
\&\|' 选项 的 其他 效应.
.TP
.B \-fdollars\-in\-identifiers
允许 在 标识符(identifier) 中 使用 `\|\c
.B $\c
\&\|' 字符 (仅针对 C++). 你 可以 指定
`\|\c
.B \-fno\-dollars\-in\-identifiers\c
\&\|' 选项 显明 禁止 使用 `\|\c
.B $\c
\&\|' 符.  (GNU C++ 在 某些 目标系统 缺省允许 `\|\c
.B $\c
\&\|' 符, 但不是 所有系统.)
.TP
.B \-fenum\-int\-equiv
允许 \c
.B int\c
\& 类型 到 枚举类型 (enumeration) 的 隐式转换 (仅限于 C++). 正常情况下
GNU C++ 允许 从 \c
.B enum\c
\& 到 \c
.B int\c
\& 的 转换, 反之则 不行.
.TP
.B \-fexternal\-templates
为 模板声明 (template declaration) 产生 较小的 代码 (仅限于 C++),
方法 是 对于 每个 模板函数 (template function), 只在 定义 他们 的 地方
生成 一个 副本. 想要 成功 使用 这个选项, 你 必须 在 所有 使用 模板 的 
文件 中, 标记 `\|\c
.B #pragma implementation\c
\&\|' (定义) 或 `\|\c
.B #pragma interface\c
\&\|' (声明).
当 程序 用 `\|\c
.B \-fexternal\-templates\c
\&\|' 编译 时, 模板实例 (template instantiation) 全部是 外部类型.
你 必须 让 需要的 实例 在 实现文件 中 出现. 可以 通过 \c
.B typedef\c
\& 实现 这一点, 他 引用 所需的 每个 实例.
相对应的, 如果 编译时 使用 缺省选项 `\|\c
.B \-fno\-external\-templates\c
\&\|', 所有 模板实例 明确的 设为 内置.
.TP
.B \-fall\-virtual
所有 可能的 成员函数 默认为 虚函数. 所有的 成员函数 (除了 构造子函数 和
.B new
或
.B delete
成员操作符) 视为 所在类 的 虚函数.
.Sp
这 不表明 每次 调用 成员函数 都将 通过 内部 虚函数表. 有些 情况 下,
编译器 能够 判断出 可以 直接 调用 某个 虚函数; 这时 就 直接 调用.
.TP
.B \-fcond\-mismatch
允许 条件表达式 的 第二 和 第三个 参数 的 类型 不匹配.
这种 表达式 的 值 是 void.
.TP
.B \-fthis\-is\-variable
允许 对 \c
.B this\c
\& 赋值 (仅对 C++). 合并 用户自定义 的 自由存储管理 机制 到 C++ 后,
使 可赋值 的 `\|\c
.B this\c
\&\|' 显得 不合时宜. 因此, 默认 情况 下, 类成员函数 内部 对 \c
.B this\c
\& 赋值 是 无效操作. 然而 为了 向后兼容, 你 可以 通过 `\|\c
.B \-fthis-is-variable\c
\&\|' 选项 使 这种 操作 有效.
.TP
.B \-funsigned\-char
把 \c
.B char\c
\& 定义为 无符号 类型, 如同 \c
.B unsigned char\c
\&.
.Sp
各种 机器 都有 自己 缺省的 \c
.B char\c
\& 类型.  既 可能 是 \c
.B unsigned char\c
\& 也 可能是
.B signed char\c
\& .
.Sp
理想情况下, 当 依赖于 数据的 符号性 时, 一个 可移植程序 总是 应该 使用 \c
.B signed char\c
\& 或
.B unsigned char\c
\&. 但是 许多 程序 已经 写成 只用 简单的 \c
.B char\c
\&, 并且 期待 这是 有符号数 (或者 无符号数, 具体情况 取决于 编写 程序
的 目标机器). 这个选项, 和 它的 反义选项, 使 那样的 程序 工作在 对应的
默认值 上.
.Sp
.B char
的 类型 始终 应该 明确定义 为
.B signed char\c
\& 或 \c
.B unsigned char\c
\&, 即使 它 表现的 和 其中之一 完全一样.
.TP
.B \-fsigned\-char
把 \c
.B char\c
\& 定义为 有符号 类型, 如同 \c
.B signed char\c
\&.
.Sp
这个 选项 等同于 `\|\c
.B \-fno\-unsigned\-char\c
\&\|', 他是
the negative form of `\|\c
.B \-funsigned\-char\c
\&\|' 的 相反 选项.  同样, `\|\c
.B \-fno\-signed\-char\c
\&\|' 等价于 `\|\c