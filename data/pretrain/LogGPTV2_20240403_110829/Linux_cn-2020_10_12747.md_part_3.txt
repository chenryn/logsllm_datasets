            return n, err
        }
    }
    return len(s), nil
}
type morseSymbol struct {
    code, length byte
}
//emgo:const
var morseSymbols = [...]morseSymbol{
    {1   半主机    semihosting  作为标准输出。为了方便起见，我们还编写了简单的 `println` 函数，它在某种程度上类似于 `fmt.Println`。
```
package main
import (
    "debug/semihosting"
    "reflect"
    "strconv"
    "stm32/hal/system"
    "stm32/hal/system/timer/systick"
)
var stdout semihosting.File
func init() {
    system.SetupPLL(8, 1, 48/8)
    systick.Setup(2e6)
    var err error
    stdout, err = semihosting.OpenFile(":tt", semihosting.W)
    for err != nil {
    }
}
type stringer interface {
    String() string
}
func println(args ...interface{}) {
    for i, a := range args {
        if i > 0 {
            stdout.WriteString(" ")
        }
        switch v := a.(type) {
        case string:
            stdout.WriteString(v)
        case int:
            strconv.WriteInt(stdout, v, 10, 0, 0)
        case bool:
            strconv.WriteBool(stdout, v, 't', 0, 0)
        case stringer:
            stdout.WriteString(v.String())
        default:
            stdout.WriteString("%unknown")
        }
    }
    stdout.WriteString("\r\n")
}
type S struct {
    A int
    B bool
}
func main() {
    p := &S{-123, true}
    v := reflect.ValueOf(p)
    println("kind(p) =", v.Kind())
    println("kind(*p) =", v.Elem().Kind())
    println("type(*p) =", v.Elem().Type())
    v = v.Elem()
    println("*p = {")
    for i := 0; i  物联网   IoT 时代也越来越重要。
这些就是我完成的本文的第二部分。我认为有机会进行第三部分，更具娱乐性的部分，在那里我们将各种有趣的设备连接到这块板上。如果这块板装不下，我们就换一块大一点的。
---
via: 
作者：[Michał Derkacz](https://ziutek.github.io/) 译者：[gxlct008](https://github.com/gxlct008) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出