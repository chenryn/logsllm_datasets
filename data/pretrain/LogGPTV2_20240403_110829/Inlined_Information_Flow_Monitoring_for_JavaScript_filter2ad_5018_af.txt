### Useful Applications and Policies

#### Mash-IF: Information-Flow Control for Web Mashups
Li et al. developed Mash-IF [34], a Firefox add-on that combines static data-flow analysis of a subset of JavaScript (JS) with runtime reference monitoring of calls to the Document Object Model (DOM) API. This approach enforces information-flow policies in web mashups, offering a more granular solution compared to BFlow. However, it does not account for implicit flows, and no formal soundness or security arguments are provided. The authors reported that among the 10 client mashups studied, there were no false positives or false negatives. In Mash-IF, policies are specified by the user through a graphical interface, allowing them to designate the sensitivity of form elements.

#### Hybrid Monitor for JS Information-Flow Tracking
Chugh et al. [18] implemented a hybrid monitor for JS information-flow (IF) tracking. To handle dynamic code evaluation, they devised a constraint-based static analysis that applies to code with "holes" representing parts that will be determined at runtime. The idea is to generate constraints on this code, which are checked at runtime before applying `eval`. The static analysis introduces taint-tracking instrumentation that is analyzed but not executed. Their staged IF verifier achieved a relatively low false positive rate of 33% in experiments on the Alexa top 100 sites, for simple but useful policies (e.g., cookies as secret, address bar as untainted). Some important JS features, such as `call`, `apply`, and `with`, are not supported.

#### Sandboxing and Object Capability Transformations
Sandboxing and object capability transformations in their work are similar, though less intricate, to those in our inliner. For example, reads and writes are transformed into function calls to a runtime system. Performance metrics for Caja (http://code.google.com/p/google-caja/wiki/Performance) show slowdowns ranging from 5× to 163× in the Valija mode, which supports legacy ES3 code.

### Discussion
Despite decades of research on Information-Flow Control (IFC) and recent efforts targeting JS, no definitive solution has emerged. Carefully engineered taint tracking may be a good compromise for general use, but there will still be scenarios where the assurance of strong IFC is worth its cost.

In this paper, we report on progress in evaluating two promising approaches to IFC for client-side JS: inlining and the no-sensitive-update rule. We focus on ECMAScript 5 and parts of the Web API needed for interesting mashups and policies.

#### Performance Overhead and Optimization
Our current prototype has high performance overhead for many usage scenarios. However, compared to other approaches like interpreter modification [11, 33], custom metacircular interpreters [28], or SME [26], inlined monitoring offers promising paths for performance improvement, notably sparse inlining and extended Just-In-Time (JIT) support. Sparse inlining, hinted at in previous work [17], aims to reduce program instrumentation based on a static IF analysis performed ahead of inlining. Well-engineered JS programs often have substantial code fragments where information flows can be inferred statically, allowing these fragments to remain unchanged while the rest of the program is instrumented.

In our experiments, the monitor core and API facades benefit from efficient JIT compilation, but the instrumented program itself does not. One likely culprit is the abundance of function calls made to the core. Many of these functions are small, pure, and amenable to optimization, but the calls themselves are not optimized, especially in recursive cases. Extending JITs with efficient support for functional programming styles could improve this. Precedents include specialized compilers for asm.js and other fast JS subsets in many browsers, which could potentially benefit functional languages with JS backends (e.g., Clojure, Haskell, Elm).

#### Formal Verification and Future Work
We build on prior works that include correctness proofs for their designs. Due to the complexity of the language and APIs we support, we do not present proofs of soundness or transparency for our implementation. Such an effort would be on the scale of a compiler verification and will be better motivated once IFC technology matures in terms of applicability and performance. However, the modular structure of the inliner and prior work open up possibilities for simplifying assurance. The rewriting rules are simple, and the properties of the transformed program rely on those of the runtime system (RTS) functions and the isolation, confinement, and mediation properties of API facades.

Formalizing transparency and noninterference for the instrumented program in a mechanized framework [13] and using the mechanized DOM formalization [47] could be a future direction. Proving isolation properties of the transformed code might leverage existing work on verifying secure subsets of JavaScript [45]. The proof would rely on precise specifications for the RTS, including bisimulation-style properties for both noninterference and transparency, which could be verified or tested.

Future work includes investigating the no-sensitive-update (NSU) rule by experimenting on sizable existing websites. This requires substantial additional work, including:
- Implementing API facades for various libraries.
- Devising effective means of experimentation under realistic workloads.
- Developing precise policies for these applications.
- Automating the checking of transparency, soundness, and permissiveness.

### Acknowledgments
This work was partially supported by NSF award CNS-1228930 and by the Department of Homeland Security under contract 11027-202037-DS to HRL Laboratories.

### References
[References listed here as in the original text]