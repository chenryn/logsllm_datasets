 pg_catalog | pg_get_viewdef              | text             | oid, integer          | normal  
 pg_catalog | pg_get_viewdef              | text             | text                  | normal  
 pg_catalog | pg_get_viewdef              | text             | text, boolean         | normal  
```  
例如：  
获取规则定义也要请求表的AccessShareLock。  
```  
postgres=# create rule r1 as on delete to u1 do also select 1;  
CREATE RULE  
```  
会话A：  
```  
postgres=# begin;  
postgres=# alter table u1 add column c2 int;  
ALTER TABLE  
```  
会话B：  
```  
postgres=# select pg_get_ruledef(42458);  
LOG:  statement: select pg_get_ruledef(42458);  
LOG:  LockAcquire: lock [13003,25572] AccessShareLock  
LOG:  LockAcquire: found: lock(0x7f030ad3a0c0) id(13003,25572,0,0,0,1) grantMask(102) req(1,0,0,0,0,0,0)=2 grant(1,0,0,0,0,0,0)=2 wait(0) type(AccessShareLock)  
LOG:  LockAcquire: new: proclock(0x7f030add42b0) lock(0x7f030ad3a0c0) method(1) proc(0x7f030b029340) hold(0)  
LOG:  LockCheckConflicts: conflicting: proclock(0x7f030add42b0) lock(0x7f030ad3a0c0) method(1) proc(0x7f030b029340) hold(0)  
```  
这里的25572对应的是u1.  
```  
LOG:  WaitOnLock: sleeping on lock: lock(0x7f030ad3a0c0) id(13003,25572,0,0,0,1) grantMask(102) req(2,0,0,0,0,0,0)=3 grant(1,0,0,0,0,0,0)=2 wait(0) type(AccessShareLock)  
```  
pg_get_viewdef也有这个问题，需要获得视图引用的表的AccessShareLock。  
```  
LOG:  LockAcquire: lock [13003,42446] AccessShareLock  
LOG:  LockAcquire: lock [13003,42446] AccessShareLock  
LOG:  LockAcquire: lock [13003,42446] AccessShareLock  
LOG:  LockAcquire: lock [13003,17229] AccessShareLock  
LOG:  LockAcquire: found: lock(0x7f030ad3b5c0) id(13003,17229,0,0,0,1) grantMask(100) req(1,0,0,0,0,0,0)=2 grant(0,0,0,0,0,0,0)=1 wait(1) type(AccessShareLock)  
LOG:  LockAcquire: new: proclock(0x7f030add42b0) lock(0x7f030ad3b5c0) method(1) proc(0x7f030b029340) hold(0)  
LOG:  LockCheckConflicts: conflicting: proclock(0x7f030add42b0) lock(0x7f030ad3b5c0) method(1) proc(0x7f030b029340) hold(0)  
LOG:  WaitOnLock: sleeping on lock: lock(0x7f030ad3b5c0) id(13003,17229,0,0,0,1) grantMask(100) req(2,0,0,0,0,0,0)=3 grant(0,0,0,0,0,0,0)=1 wait(1) type(AccessShareLock)  
```  
另外再提供一个需要注意的点，PG对未获得，但是在等待中的锁也在冲突列表中。  
例如用户1对A表在做一个比较大的查询，另一个用户2需要对A表执行DDL，那么显然用户2的DDL无法获得排它锁在等待用户1的状态。此后，用户3或其他用户发起对A的查询请求也会被用户2堵塞，这是非常危险的，如果用户1不释放锁，那么用户2就会一直等待，同时会堵塞所有对A表的任何请求。  
所以建议用户在执行DDL操作时，加一个锁超时的参数，防止出现以上情况。  
```  
set lock_timeout='1s';  
```  
还有一种autocommit的场景下，建议对需要持有大锁的SQL在执行前加上语句超时，防止长时间持锁或等待锁，在某些场景甚至可能造成拥塞，例如短连接的场景，用户可能不断发起请求，把数据库连接用完。  
```  
set statement_timeout ='1s';  
```  
以上锁DEBUG信息都可以参考src/include/storage/lock.h获得详细的描述。  
## 参考  
1\. http://blog.163.com/digoal@126/blog/static/163877040201422083228624  
2\. http://www.postgresql.org/docs/9.5/static/runtime-config-developer.html  
3\. https://github.com/digoal/pgsql_admin_script/blob/master/generate_report.sh  
4\. src/include/storage/lock.h  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")