是不正确的。具体案例可以查看[百万合约之母以太坊的漏洞攻防术（上集）](https://mp.weixin.qq.com/s/hi2xigJFtHXbscATbXsAng
"百万合约之母以太坊的漏洞攻防术（上集）")假充值漏洞小节。
· EOS 的假充值也是类似的问题。项目方只是对交易是否存在作出了判断。但是交易可能执行失败，交易状态变成 hard_fail。hard_fail
的交易也可以在链上出现记录。所以，把交易是否存在作为充值成功的依据是不正确的。具体案例可以查看[EOS菠菜应用篇](https://mp.weixin.qq.com/s/QAvFyfAetlwF3Vow-liEew "EOS菠菜应用篇")的假充值漏洞小节。
如果交易所仅仅通过校验中间结果，而不去校验实际收到的金额，就会出现假充值问题。
举一反三来看，USDT 假充值漏洞，XRP 假充值漏洞，门罗币假充值也是类似的原因。门罗币交易所没有检测真实钱包收账余额，而是仅仅通过
show_transfers 来确认用户充值金额，show_transfers
指令并没有跳过重复的交易，每笔重复交易的转账金额也会被计算在内，并最终输出出来，便会出现假充值漏洞，导致交易所给用户充值的余额和交易所自己实际收到的余额不符，攻击者假充值成功后可以进行消费或提款。
所以，涉及到充值场景时，交易所/项目方要仔细辩证校验逻辑是否合理。
### 3.4.2 假通知漏洞
假通知漏洞可以用 EOS
平台上发生的攻击案例解释，具体见[EOS菠菜应用篇](https://mp.weixin.qq.com/s/QAvFyfAetlwF3Vow-liEew
"EOS菠菜应用篇")的假transfer通知小节。EOS 上可以用 require_receipt(someone)
向任何一人发送转账通知。那么攻击者在自己控制的帐号之间转账，但是把转账通知发送给项目方。项目方没有校验接收方是否是自己，默认为攻击者做了充值操作。
目前以太坊上还没有发现假通知漏洞，但是不代表这种漏洞就不存在。交易所如果没有校验交易回执中的 to 字段是否是自己，也会被攻击者攻击。
在项目方一侧要全面的校验当前交易回执是否跟自己有关。
### 3.4.3 假代币漏洞
顾名思义，假代币就是拿假钱当真钱花。EOS
平台已经出现了真实的攻击案例，具体见[EOS菠菜应用篇](https://mp.weixin.qq.com/s/QAvFyfAetlwF3Vow-liEew
"EOS菠菜应用篇")假EOS代币小节，以太坊平台目前还没有发现。假代币发生的原因是交易所/项目方没有验证币的真伪，使得攻击者可以用假币换真币。
假代币的问题在其他平台也存在。波场 DApp tronbank
于2019年4月11日凌晨1点曾遭受假币攻击。该次假币攻击事件主要原因在于合约没有严格验证代币的唯一标识符代币
ID，错误地将攻击者自己发行的无价值代币识别为价值85万元的BTT代币，从而造成了损失。
如果平台发行了代币，那么需要告知交易所/项目方，进行真伪代币的校验。
## 3.5 经典攻击手法的再现
一些经典的攻击手法，如重放攻击，DoS，跟平台特性结合之后，可以引起新的安全问题。
### 3.5.1 重放/Replay
经典重放攻击的基本原理就是把以前窃听到的数据原封不动地重新发送给接收方。很多时候，网络上传输的数据是加密过的，此时窃听者无法得到数据的准确意义。但如果他知道这些数据的作用，就可以在不知道数据内容的情况下通过再次发送这些数据达到愚弄接收端的目的。
重放攻击在币圈被热谈，是以太坊硬分叉的时候。我们知道以太坊硬分叉出现了ETH和ETC两条链，两条链上的交易数据结构是完全一样的，因此一笔交易在ETH上是有效的，
那它在ETC上同样会被接受，反之亦然。
因为没能提前识别重放攻击的威胁，以太坊分叉时几乎所有交易所也都没意识到这个问题，更没有提前做ETH和ETC分离，
这时候只要有人从交易所提取ETH币，就有可能得到同等数量的ETC币。许多人利用这个漏洞，不断在交易所充币和提币（ETH）， 从而获取额外的ETC。
分叉链都面临相似的问题。BCH硬分叉成 BCH 和 BSV
两条链时，也面临相似的问题。在BSV链上交易时，由于相同的地址、算法和交易格式，拿到BCH链上去重新广播，就有可能会被BCH链承认有效，从而进行相同的交易操作。
除了链层面，合约层面也会受重放攻击的影响。如攻击者在以太坊合约上重放用户的签名信息，具体案例可查看以太坊（下集）重放漏洞小节，在 EOS
合约上重放中奖消息，具体案例可查看重放漏洞 — 重放中奖消息小节。重放攻击是一种攻击思想，任何平台任何环节都可能被影响。
### 3.5.2 拒绝服务/DoS
经典攻击手法里的拒绝服务攻击（英语：denial-of-service
attack，简称DoS攻击）是一种网络攻击手法，其目的在于使目标电脑的网络或系统资源耗尽，使服务暂时中断或停止，导致其正常用户无法访问。
DoS 攻击思路用于以太坊可以有多种形式，攻击以太坊的多种特性都可以让以太坊无法提供服务。
· king of ether 代表的 DoS 漏洞类型。这种 DoS
漏洞类型是：依赖外部调用的进展，如果外部调用执行失败，后续的操作也就无法执行，导致拒绝服务。
· GovernMental 骗局代表的 DoS 漏洞类型。这种 DoS
漏洞类型是：依赖外部可以操作的数据，如数组或映射，如果外部操作改变了数据，修改后的数据使得后续的操作因超时或者 out of gas
无法执行，导致拒绝服务。
· freezing ether 代表的 DoS 漏洞类型。这种 DoS
的漏洞类型是：依赖外部的合约库。如果外部合约的库被删除，那么所有依赖库的合约服务都无法使用。
EOS 的 DoS 攻击是利用延迟交易特性和执行交易的先进先出特性。攻击者可以在正常交易里嵌入大量 delay_sec=0
的恶意延迟交易，由于EOS执行交易采用FIFO策略，这些延迟交易在其他交易之前执行。只要这些恶意延迟交易足够多，正常交易会被一直阻塞，无法提供正常服务。
针对这几个特性，分析一下其他平台是否会受影响。
· king of ether 类：要看平台是怎么处理合约调用的，合约 A 调合约 B，如果 B 执行失败，会不会影响 A
的执行。如果影响，那么就跟以太坊一样存在 DoS 攻击。如果不影响 A 的执行，那么就不存在 DoS 攻击。
· GovernMental 类：如果平台有停机机制，如 gas，会受影响。如果平台可以无限执行指令，那么不会受影响。
· Freezing ether
类：要看平台是否支持合约地址可指定。如果合约地址向以太坊一样不可指定，那么合约一旦被删除将无法恢复，会受影响。如果合约地址可指定，那么即使被删除，也可以恢复，不受影响。
· 延迟交易类：支持延迟交易的平台会受影响，反之，不受影响。
DoS 是一种攻击思路，平台尽可能防范，但无法完全避免。
# 4 小结
本文按照由简单到复杂的顺序排列漏洞类型。越简单基础的类型，平台通用性就越强，如整数溢出，权限控制不当，在任何平台都有可能出现。对于平台特性类，平台支持某个特性，就会受相应特性的影响，进行安全设计时，需要考量平台特性带来的安全风险。一个场景涉及多个特性，场景中比较特殊的是充值场景，有涉及到充值场景的项目方需提高警惕。最后，经典的攻击手法重放攻击、DoS
攻击可能被应用到任何一个环节，出其不意地引发各式各样的安全问题。
本文是智能合约漏洞系列总结篇，主要目的是回顾已经发生的漏洞，总结漏洞根因，并预测其他平台是否会受影响。前车之鉴，后事之师。
参考文献
* * *