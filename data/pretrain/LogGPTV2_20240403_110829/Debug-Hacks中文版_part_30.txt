R13:0000000000002015 R104:0000000000002011
R100:0000000000003R100000010
RBP:
RAX:0000002a9599b540RBX:0000002a95a00020
RIP:0000002a957e8793 RSP:00000000407ff780
[10228c13f50]error_exitatffffffff8010fodd
[10228c13e20]do_page_fault at fff80121fcc
[10228c13de0]
[10228c13cb8]scheduleatffffffff805537d7
2554
return error;
0000002a95a000b8
0000000000002001R
2554
2554
2554
3
3
_dow_read at ffff8554bf
1022e959850
1022e9b4170
1022e045810
1022e9920f0
R8:000000000001e711
RSI:0000002a95a00768
www.TopSage.com
CPU:1COMMAND:MYAPL
CPU:3COMMAND:“MYAPL"
UN
UN
UN
UN0.031248
0.031248
0.0
0.031248
0
RDI:
RCX:
RFLAGS:
696MYAPL
696
696
MYAPL
MYAPL
MYAPL
0000000000000000
0000002a95a028f0
0000002a95a008e0
0000000000001000
000000000000000c
00010206
---
## Page 246
执行了可能会引发页面错误异常的处理（即 copy_to_user()。
死锁的原因在于 mincore()系统调用中，sys_mincore()在持有读取信号量的状态下，
睡眠状态。但是，对其他进程并没有影响。
陷入死锁状态后，访问出问题的进程的内存结构的所有进程都会陷入等待信号量的
根据以上内容，可以推测问题发生流程如图 5-14 所示。
write()结合操作导致了死锁。
pid=2642的线程调用 down_write()，请求写入类的信号量。可以认为，与这个 down_
228 1
PID: 2642 TASK: 1022e959850
crash> bt 2642
#
$
#
进
#0 [1022924bab8] schedule at fffff805537d7
ORIG_RAX: 00000000000000a CS: 0033 SS: 002b
R13: 00002a956799c0 R14: 000000002000 R15: 000000295d00000
RIP: 000000295832309 RSP: 0000000417ff780 RFLAGS: 0000297
3 [10228c15f80] no_syscall_entry_trace at ffffff8010e539
[10228c15d78]
RBP:0
RAX:000000000000000a
ORIG_rAX: ffffffffffffffff
R13: 0000002956799c0 R14: 0000000000001000 R15: 0000000000000003
[10228c15ee0]
[10228c15ea0]
6
RAX:C
RIP: 0000002a957ea2a4 RSP: 0000000040ff810 RFLAGS: 00000246
[1022924bf50] retint_signal at fffffff8010eb76
[1022924be50] do_signal at fffffff8010d958
[1022924be00]
[1022924bd90]
[1022924bd30]  S
[1022924bc20] do_futex at ffffff8014fd91
第5章实践内核调试
0000000000004022
0000000000000003
0000000000000003
0000000000001001
00000000
0000002a9599b5d8
0000000000004011
 sys_mprotect at ffffff8017aa8b
schedule at fffffff805537d7
] do_exit at ffffffff8013b879
get_signal_to_deliver at fffff80145512
sys_futex at ffffffff8015010f
_down_write at fffff80554b1b
www.TopSage.com
R11:0
RBX: ffffffff8010e539 RCX: 0000000000000004
R8:
R11: 6
R8:
RBX:
0000000000000217 R12: 0000000000001000
0000ooooffffffff
0000000000024000P
CS: 0033 SS: 002b
0000000000001000
00000000005091e0
0000000005031d0
0000002a9599b540P
CPU: 0 COMMAND: "MYAPL"
R12: 00000029567300
RDI: 0000002a95d00000
RDI:00000000005031c0
RCX: 000000000004010
R9: 0000000000000000
R9:00000000005061d0
---
## Page 247
编写的程序代码如下所示。
这次的问题是 mincore()系统调用和 mmap()系统调用的冲突，满足竞态条件。
理中执行了 down_write()。
查看内核代码，寻找对 map_sem执行 down_write()的处理。结果发现在 map()的处
我们编写了一个复现用的程序。
复现测试
图 5-14问题发生流程
(d* PTOA)44* PEOA
#define PAGESIZE
#include 
#incLude 
#include 
#include 
for (s;) {
unsigned char *ptr;
ptr = mmap(NULL, PAGESIZE, PROT_READIPROT_WRITE,
CPUO
sys_mprotect()
down_write()
(4096)
www.TopSage.com
CPUB
HACK#39内核停止响应（信号量篇）
发生页面错误异常
sys_mincore()
do_page_fault()
down_read()
down read()
mincore_vma()
等待写入信号量释放
死锁发生
1 229
236
---
## Page 248
237
首先确认一下社区有没有解决该问题的方法。
解决问题
执行这个复现程序后，问题就发生了。
int main(int argc, char **argv)
void do_mincore(void)
return 0;
do_mincore();
pthread_create(&tid, NULL, th, NULL);
pthread t tid;
munmap(vec, PAGESIZE);
for (s;) {
veC = mmap(NULL, PAGESIZE, PROT_READ|PROT_WRITE,
unsigned char *vec;
return NULL;
第5 章实践内核调试
if (mincore(vec, PAGESIZE, vec) 
commit 2f77d107050abc14bc393b34bdb7b91cf670c250
AMD64 Application Binary Interface
用复现程序复现问题。
确认问题的详细情况。
 Signed-off-by: Linus Torvalds 
htt://www.x86-64.org/documentation/abi.pdf
从崩溃转储中收集分析数据。
Cc: Andrew Morton 
Cc: Doug Chapman 
code smaller and (imho) much easier to understand.
Doug and Marcel sent in a patch to fix it, but I decided to just rewrite
schenarios with writers due to fairness issues.
fault happens to work, we don't actually allow them due to deadlock 
result while holding the mmap semaphore for reading, which is a big 
aut 4o n()Jasno Ado, eop lltm ()auosurw zeyn paotrou ueudeu 6nog
Fix incorrect user space access locking in mincore()
the mess instead - not just fixing the locking problem, but making the
10-1
 Hugh Dickins 
Marcel Holtmann 
www.TopSage.com
HACK#39 内核停止响应（信号量篇） 丨231
一岛本裕志
238
---
## Page 250
239
次的机器有两个CPU，因此再执行一个loop.sh，这样就能占据两个CPU。
死循环会持续消耗CPU，因此CPU使用率为100%，这样就能占据一个CPU。本
定进程的调度策略设置为实时，99是优先级，实时的优先级数字就是最大数字99。
首先要复现问题。下面是个仅执行死循环的shell脚本loop.sh。chrt命令可以将指
首先要复现问题
进程，并且自身没有主动睡眠（抢占式，preemption），就会一直使用CPU。
实时进程就是优先级比正常进程更高的进程。只要没有同级别或更高优先级的实时
占据CPU，导致系统整体停止响应，引发重大故障。本hack用的复现程序虽然简
中介绍了。本hack介绍实时进程停止响应时的调试方法。实时进程停止响应，会
一般的进程停止响应的调试方法已在“HACK#32应用程序停止响应（死循环篇
#40
232|第5章实践内核调试
单，问题本身却是用户实际咨询的问题。内核版本为2.6.9。
#chrt 99./Loop.sh
USERPID%CPU %MEMVS2RSSTTY STAT STARTTIME COMMAND
#psaux
#chrt99./Loop.sh&
done
while[0];do
#!/bin/bash
#cat loop.sh
/*^^~CPU使用率为100%*/
因此无法用NMIwatchdog获取转储。
用IPMI watchdog timer获取崩溃转储”）。这次的现象是用户应用程序停止响应，
为了获取转储，需要事先启用IPMIwatchdog（详情参见“HACK#22死机时利
转储可以证实实时用户程序停止响应。
实时进程停止响应
www.TopSage.com
---
## Page 251
接下来用 bt 命令看看 backtrace。
查看 backtrace (e1000 篇)
可知 panic 时运行的进程是loop.sh.
先引起注意的是COMMAND（进程）。
实际发现故障时，首先要进行这一步。由于已获得了转储，先看看开头的信息。最
再查看backtrace
watchdog的超时获取转储。
这样loop.sh就占据了两个CPU，系统停止了响应，键盘也无法输入。然后用 IPMI
#9 [ffffff8045e460] panic at fffffff80137966
#8 [ffff8045e3b0] error_exit at ffffffs011d91
PID: 4223 TASK: 1007e3087f0
# crash vmlinux vmcore
：
ORIG_RAX: ffffffffffffffff C5: 0010 SS: 0000
1
crash> bt 
5 [ffff8045e590] smi_event_handler at ffffffa01b54ca
[fffff8045e570] handle_flags at ffffffa01b5la0
RIP: ffffff8013797a RSP: ffffffff8045e468 RFLAGS: 00010086
[exception RIP: panic+211]
COMMAND: "loop.sh"
[fffff8045e540] ipmi_wdog_pretimeout_handler at ffffffa01c4892
[fffffff8045e4f0] sock_def_write_space at fffffff802adld4
PID: 4223
PANIC: ""
TASK: 1007e3087f0 [THREAD_INF0: 10036144000]
CPU: 0
/*panic 时运行的进程名*/
www.TopSage.com
CPU: 0 COMMAND: "loop.sh"
HACK#40 实时进程停止响应I233
---
## Page 252
241
反汇编①对应于源代码中的①，e1000_alloc_rx_buffers_ps+507@对应于下面的②。
buffers_ps+507@的 call 指令，它调用了 dma_map_single()，那我们来看看源代码。
个指令，因此 panic 时执行的是前一条指令，应当是上一行el000_alloc_rx
反汇编中的地址为 e1000_alloc_rx_buffers_ps+512，实际上寄存器中的内容是下一
先用 dis 命令看看 el000_alloc_rx_buffers_ps at fffffa009bb77。
panic()之前调用的函数好像是 e1000 驱动程序的函数。对此再进一步调查一下。首
2341第5章实践内核调试
pci_map_single(struct pci_dev *hwdev, void *ptr, sizet size, int direction)
static inline dma_addr_t 
[include/asm-generic/pci-dma-compat.h] 
el000_alloc_rx_buffers_ps()
[drivers/net/e1000/e1000_main.c] 
xfffffa009bb77 : mov
-
oxffffa0bb72 :
oxffffffa009bb70 :
oxffffffa009bafc :
xfffffa009baf7 :
oxfffa009baf4 :
Crash> dis el000_alloc_rx_buffers_ps 
buffer_info->dma = pci_map_single(pdev, skb->data, -
buffer_info->length = adapter->rx_ps_bsize0;
 buffer_info->skb = skb;
if (unlikely(!skb)) {
 skb = netdev_alloc_skb(netdev;
 adapter->rx_ps_bsize0 + NET_IP_ALIGN); 
www.TopSage.com
-②
-1
PCI_DMA_FROMDEVICE);
adapter->rx_ps_bsize0,
callg