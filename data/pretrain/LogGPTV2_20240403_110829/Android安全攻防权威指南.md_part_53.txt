http://blog.zx2o4.com/749。
当stdour重定向到与虚拟内存相关的字符设备时，攻击者可以写人其他程序内存，但是写
人地址是未知的。事实上，只要在程序运行之前scek字符设备，攻击者就可以控制写入数据的
地址。
---
## Page 238
222第8章用户态软件的漏洞利用
Jay Freeman编写的利用针对run-as 这个二进制程序，这个程序类似于传统Linux平台上的
sudo，用来以其他用户的身份运行程序。要实现这个功能，run-as程序必须属于root用户，而且
设置了set-uid权限比特位。
explioit首先提供写入目标内存的载荷，即要执行命令的用户名。run-as没有查到该用户，于
是会向 stderr打印错误消息。利用通过 seek mem 设备来设定要写人的目标地址。该地址为一个
错误处理函数路径，会调用exit函数来终止程序。所以，这一错误的实际退出代码可以被替换
成攻击者控制的代码。为了尽可能减少替换的代码，利用精心选择了调用exit函数的调用点，
并把这个代码换成了setresuid（O）。这样，函数返回时相当于没有错误发生，run-as就会正常
运行攻击者提供的命令。
D7FCMOVRO,R4
D7FEBLexitgroup
MOVRO,R4
POP (R0, R1,R4  R6)
D802NOP
MOVS R5, #0
D804:
MOVW R3,#0×AD57
D808
BXR3
0XAD56
MOVRO, R5
MOVR1,RS
MOV R2, R5
BL wrap_setresuid32
图8-10原代码和替换代码
这又是一个非常优雅、简洁的利用，反应了对目标程序的理解。它充分利用了程序的已有功
能来运行攻击者想要运行的程序。
8.3Android浏览器漏洞利用
本章介绍WebKit泣染代码中的一个释放后重用漏润，作为高级堆漏润利用技术的案例。这
个漏洞是CVE-2011-3068，已经在WebKit的commit100677中修复。修复时引I用了bug#70456，
但是这个bug在本书编写时还是关闭状态。在Android4.0.4版本（标签为android-4.0.4-aah-r1
和android-4.0.4_r1）的commitd911316和538b01d中，这个漏洞的修补被合并到Android
浏览器的WebKit引擎中，修补来自于对上游的commit进行cherry-pick.漏洞利用在搭载Android
4.0.1（buildITL41F）的GalaxyNexus上接受了测试，该系统版本已经被证实存在漏润。
8.3.1理解漏洞
官方补丁并没有很好地解释漏洞，而且理解WebKit源代码是一个很高的屏障。不过对于攻
击者来说，修补的commit中包含一个崩溃测试样例用于回归测试，同时也使得利用开发变得更
容易！使用调试器附加到测览器进程（如何配置调试环境见第7章），设置好正确的符号后运行
测试样例，浏览器会前溃，如下所示。
---
## Page 239
8.3Android浏览器漏润利用
223
●送行commit100677中的测试样例后的崩溃信息
Progran received signal SIGSEOv, Segmentation fault,
0x00000000 in 77()
↓查看所有寄存器
gdb > 1 r
r1
0
0x6157a8 0x6157a8
r2
0x80000000 0x80000000
0×0 0x0
r3
r4
0×0 0x0
0x6157a8 0x6157a8
r5
0x615348 0x615348
0x514b78 0x514b78
r7
0x5ba40540 0x5ba40540
0x1 0x1
r9
0x5ba40548 0x5ba40548
r11
r10
0x85 0xa5
r12
0x615424 0x615424
0x5ba40538 0x5ba40538
0x3 0x3
sp
1r
0x59e8ca55 0x59e8ca55
pc
0x0 0
cp8r
0x10 0×10
，反汇编调用函数
Dunp of assembler code for function
gdb > disas $1r
_ZN7HebCorel2RenderObject141ayoutIfNeededEv:
0x59e8ca40 :push (r4, 1r)
0x59e8ca44 1 b1 0x59e4b904
0x59e8ca42 1 mov r4, r0
0x59e8ca48 : cbz r0, 0x59e8ca54
_ZN7webCorel2Render0bject141ayoutIfseededEv+20>
把虚函数表指针加载到r0
0x59e8ca4a :  1dr r0, [r4, #0]
把虚函数指针加载到r3（将会发生0地址疏转，导致崩溃）
0x59e8ca4c :1dr.× r3,[r0, +380]
:0x17c
---
## Page 240
224
第8章用户态软件的漏洞利用
↓把this 指针加载到r0
0x59e8ca50 : mov r0, r4
调用虚函数
0x59e8ca52 : blx r3
End of assenbler dunp.
0x59e8ca54 :pop (r4, pc)
↓查看虚函数表指针和调用点的this指针
gdb >x/1x $x0
0x6157a8: 0x00615904
。打印虚函数地址
gdb = ×/1wx (*$r0 + 0x17c)
00000000X01080519X0
调用点是一个非常通用的layout函数，在所有RenderObject的子类中都有定义，如下所示：
● RenderObject.h 中 1ayoutIfNeeded
/ * This function performs a layout only if one is needed. */
void layoutIfMeeded() { if (needsLayout (1) layout () : )
很明显，这是一个RenderArena 的释放后重用漏洞。正如 8.1.2节中所述，虚函数表指针
被改写。源代码审计人员也许会去更好地理解这个漏洞，但是对于漏洞利用这一目标来说，理解
到这个程度已经足够。遗憾的是，这个漏润不允许攻击者在触发释放后重新获得JavaScript的控
制，这就使得代码分析失去了意义。为了利用这个漏洞，必须控制虚函数表的内容，但是目前虚
函数表指针指向了另一个无法控制的RenderObject实例。
8.3.2控制堆
现在，堆上的虚函数表已经被解引用，下面必须控制相应的堆内存区域来影响代码执行。由
于虚函数的调用紧接在内存块释放之后，所以不可能在原地分配任意RenderObject。即便攻击
者可以在释放后再次执行JavaScript代码，也必须构造另一个大小为0x7c的RenderObject。只
有原本的RenderBlock类是特定大小，所以攻击的可能性十分有限。使虚函数表指针指向一个
空闲的块更有可能取得成功。
空闲块组成的单向链表中包含大小相同的内存块。正如前面所说，不可能在列表中放人其他
---
## Page 241
8.3Android浏览器满润利用225
类的示例：但是，在虚函数表中解引用的偏移0x17c比整个实例的0x7c还要大。因此实际查到
的虚函数指针会越过对象，进人RenderArena中或后面。这就为控制虚函数表指针打开了思路。
1.使用CSS
第一种可能的方法是，从未分配的空间分配一个新的RenderObject，紧接在要被释放的内
存块之后。通过控制这个新的分配，可以控制虚函数指针偏移处的数据。要确保这个新的分配来
自新的、未分配的空间，可以通过填充现存的空闲内存块“洞"来实现。这种方法实现的堆布局如
图 8-6所示。
不幸的是，RenderObject子类也都非常小，因此使用这些对象控制数据非常困难。这些对
象中大多数的32位整数来自于CSS解析器得到的CSS值，例如位置和边距。CSS代码使用4比
特整数来存储额外的标志，例如数值是否表示一个百分比。这就使得CSS值只有28比特，最高
的4比特被置0。幸运的是，还有一些例外。其中一个是RenderListItem，即DOM中1i 节
点在渲染树中的等价对象。这种列表项有一个绝对的位置信息，例如一个带有特殊值或显示偏移
的编号列表。这些32比特值会被原封不动地复制到RenderListItem的成员变量m_value和
m_explicitValue 中。这样，只要在 RenderListItem 前再填充一个空白的 RenderBlock
示例，就能得出精确的虚函数偏移。
·使用gdb检查类大小
gdb * p 2 · sixeof(*webCore11RenderBlock)
+（uint32_t)&（(*webCore::RenderListIten*)0)->m_value
S1 = 0x17c
这样，程序计数器（pc）的整个32比特都可以被控制。带有填充的空白对象的堆内存布局
如图8-11所示。
+0×17c
下一个空闲城
提函数表指
RenderBlock1
RenderBlock Il
Uaf-RenderBlock
RenderListitem
图8-11包含填充和 RenderListItem 的RenderArena 布局
在没有XN保护的老版本Android系统中，基于RenderListItem的技术非常有用。在这
种场景下，攻击者控制了r3.但并没有控制r3指向的附近内存或者其他寄存器指向的内存。第
9章会介绍如何使用ROP来绕过XN保护。在这种情况下，攻击者可能需要控制更多的内存来进
行栈迁移（stack pivot）。
2.使用空闲内存块
要控制RenderArena中已分配内存块之后的内存，另一种方法是确保相应内存区域从未被分
配，保持未初始化状态。使用这种方法，虚函数指针就会从未初始化的内存中读取。前面说过，
---
## Page 242
226第8章用户态软件的漏洞利用
arena通过主堆来分配。如果攻击者可以从主堆分配一个RenderArena大小的内存块，把内容设置
成想要控制的值并释放该内存块，那么下一个RenderArena的分配就会被初始化成攻击者所控制
的值。
要在dmalloc堆上保留一个空闲内存块，必须注意以下事项。攻击者必须确保被释放的内存
块不会被其他相邻内存块合并，而且在下一个RenderArena分配之前，其他的内存分配有足够的
空闲块。综合考虑这些因素，有以下步骤。
(1）创建足够多与RenderArena 相同大小的内存块，并且将其内容都填充为想要的值。每一
次分配时，都紧接者分配一小块内存作为守护，防止内存块合开。
(2）释放所有与RenderArena相同大小的内存块，但不释放守护内存块。守护内存块会防止
假的arena合并，这样arena就可以用来分配真正的 RenderArena。
(3)创建足够多的RenderObject 示例，用完当前的RenderArena，从面确保新分配的
RenderArena来自上面准备的内存块。
（4）创建一个与受释放后重用漏洞影响的RenderObject类型相同的对象，本例中是
RenderBlock。确保它是当前RenderArena中最后分配的 Render 对象，并且恰好在受释放后重
用漏洞影响的RenderObject之前释放。