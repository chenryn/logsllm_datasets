To show this, we follow Corollary 4.5 and provide a program
that is RSNI(L-) and its compilation is not RSNI(T-). The program
we consider, which is RSNI(L-) (Theorem 3.9), is given in Listing 3.
if (y < size) then
1 void get (int y)
2
3
4
temp = B[0];
if (A[y] == 0) then
Listing 3: A variant of the classic Spectre v1 snippet
(Example 10 from [36]).
As shown in [27, 36], MSVC fails in injecting an lfence after the
first branch instruction. As a result, the compiled target program
is identical to Listing 3, and it speculatively leaks whether A[y] is
0 through the branch statement in line 3, i.e., it violates RSNI(T-).
We refer to [27, 36] for additional examples of MSVC’s insecurity.
5.2 ICC is Secure
The Intel C++ compiler also implements a countermeasure that
inserts lfences after each branch instruction [33].2
We model this countermeasure with(cid:74)·(cid:75)f , a homomorphic com-
piler that takes a component in L and translates all of its subparts
to T. Its key feature is inserting an lfence statement at the begin-
ning of every then and else branch of compiled code. All other
statements are left unmodified by the compiler.
(cid:74)ifz e then s else s′(cid:75)f =ifz(cid:74)e(cid:75)f then{lfence;(cid:74)s(cid:75)f }else{lfence;(cid:74)s′(cid:75)f }
It should come at no surprise that(cid:74)·(cid:75)f is RSSC+ (Theorem 5.1). In T,
the only source of speculation are branches (Rule E-T-speculate-if)
but any branch, whether it evaluates to true or false, will execute an
lfence (Rule E-T-speculate-lfence), triggering a rollback (Rule E-T-
speculate-rollback). Since compiled code performs no action during
speculation, it can only perform actions when the program counter
is tainted as S, which makes all actions S. These actions are easy to
relate to their source-level counterparts since they are generated
according to the non-speculative semantics.
Theorem 5.1 (ICC is secure for L-T). ⊢(cid:74)·(cid:75)f : RSSC+
1The countermeasure can be activated with the /Qspectre flag.
2The countermeasure can be activated with flag: -mconditional-branch=all-fix
5.3 Speculative Load Hardening
Clang implements a countermeasure called speculative load hard-
ening [16] (SLH) that works as follows:3
• Compiled code keeps track of a predicate bit that records
whether the processor is mis-speculating (predicate bit set to 1)
or not (predicate bit set to 0). This is done by replicating the be-
haviour of all branch instructions using branch-less cmov instruc-
tions, which do not trigger speculation. SLH-compiled code tracks
the predicate bit inter-procedurally by storing it into the most-
significant bits of the stack pointer register, which are always un-
used. Note that when all speculative transactions have been rolled
back, the predicate bit is reset to 0 by the rollback capabilities of
the processor.
• Compiled code uses the predicate bit to initialise a mask
whose usage is detailed below. At the beginning of a function,
SLH-compiled code retrieves the predicate bit from the stack and
uses it to initialize a mask either to 0xF..F if predicate bit is 1 or
to 0x0..0 otherwise. During the computation, SLH-compiled code
uses cmov instructions to conditionally update the mask and pre-
serve the invariant that mask = 0xF..F if code is mis-speculating
and mask = 0x0..0 otherwise. Before returning from a function,
SLH-compiled code pushes the most-significant bit of the current
mask to the stack; thereby preserving the predicate bit.
• All inputs to control-flow and store instructions are hardened
by masking their values with mask (i.e., by or-ing their value with
mask). That is, whenever code is mis-speculating (i.e., mask =
0xF..F) the inputs to these statements are “F-ed” to 0xF..F, oth-
erwise they are left unchanged. This prevents speculative leaks
through control-flow and store statements.
• The outputs of memory loads instructions are hardened by
or-ing their value with mask. So, when code is mis-speculating,
the result of load instructions is “F-ed” to 0xF..F. This prevents
leaks of speculatively-accessed memory locations. Inputs to load
instructions, however, are not masked.
In the following, we analyse the security guarantees of SLH.
SLH is not RSNIP+. We show that SLH is not RSNIP+, i.e., it
5.3.1
does not preserve (strong) speculative non-interference and thus it
allows speculative leaks of data retrieved non-speculatively.
Following Corollary 4.5, we do this by providing a program that
is RSNI(L) and that is compiled to a program that is not RSNI(T).
The program in Listing 4 differs from Listing 1 in that the first
memory access is performed non-speculatively (line 2).
1 void get (int y)
2
3
4
x = A[y];
if (y < size) then
temp = B[x];
Listing 4: Another variant of the classic Spectre v1 snippet.
In its compilation, SLH hardens the value of A[y] using the mask
retrieved from the stack pointer. When the get function is invoked
non-speculatively, the mask is set to 0x0..0 and A[y] is not masked.
Thus, speculatively-executing the load in (the compiled counter-
part of) line 4 leaks the value of A[y], which might differ for low-
equivalent states, and violates RSNI(T).
3 SLH can be activated with flag: -mllvm -x86-speculative-load-hardening
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea453SLH is RSSC-. We now show that SLH is RSSC-, that is, it
5.3.2
prevents leaks of speculatively-accessed data.
We formalise SLH using the(cid:74)·(cid:75)s compiler, whose most inter-
esting cases are given in the top of Figure 1. The compiler takes
components in L- and outputs compiled code in T-. The compiler
keeps track of the predicate bit in a cross-procedural way, masks
inputs to control-flow and store instructions, and masks outputs of
load instructions as described before.
in another process,(cid:74)·(cid:75)s tracks the predicate bit in the first location
Since the stack pointer is not accessible from an attacker residing
of the private heap which attackers cannot access. So location −1 is
initialised to 1 (false) and updated to 0 whenever we are speculating.
Compiled code must update the predicate bit right after the then
and else branches (statements −1 :=pr · · ·). Since location −1 is
reserved for the predicate bit, all private memory accesses and the
private heap are shifted by 1.
Several statements may leak information to the attacker: calling
attacker functions, reading and writing the public and private heap,
and branching. For function calls, memory writes, and branch in-
structions,(cid:74)·(cid:75)s masks the input to these statement. That is, we eval-
uate the sub-expressions used in those statements and store them
in auxiliary variables (called xf). Then, we look up the predicate
bit (via statement let pr = rdpr −1 in · · ·) and store it in variable
pr. Finally, using the conditional assignment, we set the result of
bit is 0 (true). In contrast, for memory reads,(cid:74)·(cid:75)s masks the output
those expressions to 0 (tainted S as all constants) if the predicate
of these statement based on the predicate bit stored in pr.
As stated in Theorem 5.2, programs compiled with SLH are
RSS(T-) and, therefore, RSNI(T-) (Theorem 3.10). Hence, they are
free of leaks of speculatively-accessed data, which is sufficient to
stop Spectre-style leaks like those in Listing 1.
Theorem 5.2 (SLH is secure for L--T-). ⊢(cid:74)·(cid:75)s : RSSC-
(cid:74)·(cid:75)s is RSSC- for two reasons. First, location −1 (and thus variable
pr where its contents are loaded) always correctly tracks whether
speculation is ongoing or not. This holds because location −1 and
pr cannot be tampered by the attacker, the compiler initializes −1
correctly, and the assignments right after the branches correctly
update location −1 (via the negation of the guard xf). Second, when-
ever speculation is happening, the result of load operations is set to
a constant 0 whose taint is S. So, computations happening during
speculation either depend on data loaded non-speculatively, which
are tainted as S by the taint-tracking of T-, or on masked values,
which are also tainted S. Speculative actions are tainted with glb (⊔)
of data taint (S) and pc taint (U). Since S ⊔ U = S (see Section 3.2),
speculative actions are tainted S, satisfying RSS(T-
5.3.3 Making SLH More Secure. We now show how to modify SLH
to prevent all speculative leaks. We do so by introducing strong SLH
(SSLH for short) that differs from standard SLH in that it masks the
input (rather than the output) of memory read operations (as such,
we expect an implementation of SSLH to have a small overhead
caused by the newly introduced data dependencies that might de-
lay some masked loads). We model SSLH using the(cid:74)·(cid:75)ss compiler
that takes components in L and outputs compiled code in T.(cid:74)·(cid:75)ss
differs from(cid:74)·(cid:75)s in how memory reads are compiled (Figure 1).
The compiler masks the input of memory loads by evaluating the
).
sub-expressions and storing them in auxiliary variables (called xf),
retrieving the predicate bit and storing it in variable pr, condition-
ally masking the value of xf, and, finally, performing the memory
access using xf as address.
As stated in Theorem 5.3, programs compiled using SSLH are
RSS(T) and, thanks to Theorem 3.10, RSNI(T). Therefore, they are
free of all speculative leaks.
Theorem 5.3 (SSLH is secure for L-T). ⊢(cid:74)·(cid:75)ss : RSSC+
(cid:74)·(cid:75)ss satisfies RSSC+ for two reasons. First, the compiler correctly
tracks whether speculation is ongoing (cf. §5.3.2). Second, when-
ever speculation is happening, the result of any possibly-leaking
expression is set to a constant 0 whose taint is S. That is, labels
during speculation are tainted as S, and RSS(T) holds.
5.3.4 Non-interprocedural SLH is insecure. We conclude by show-
ing that the non-interprocedural variant of SLH, where the predi-
cate bit is set to 0 at the beginning of each function, is insecure and
does not prevent all speculative leaks.4 Consider the program in
Listing 5 that splits the memory accesses of A and B of the classical
Spectre v1 snippet across functions get and get_2.
x = A[y];
if (y < size) then get_2 (x);
1 void get (int y)
2
3
4
5 void get_2 (int x) temp = B[x];
).
n
n
Listing 5: Inter-procedural variant of Spectre v1 snippet [42]
Once compiled, get starts the speculative execution (line 3), then
the compiled code corresponding to get_2 is executed speculatively.
However, the predicate bit of get_2 is set to 0 upon calling the
function. Hence, the memory access corresponding to B[x] is not
masked leading to the leak of x (which contains A[y]), so the target
program violates RSNI(T-
SLH. We model NISLH as(cid:74)·(cid:75)s
It is also possible to secure the non-interprocedural variant of
n by having the predicate bit initialized
at the beginning of each function to 1 (false) in a local variable
pr. As before, compiled code updates pr after every branching
instruction. To ensure that pr correctly captures whether we are
mis-speculating, we place an lfence as the first instruction of every
compiled function.
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) lfence; let pr=1 in
(cid:74)s(cid:75)s
= f (x) (cid:55)→
let xf =(cid:74)e(cid:75)s
ifz xf then let pr=pr ∨ ¬xf in(cid:74)s(cid:75)s
else let pr=pr ∨ xf in(cid:74)s′(cid:75)s
(cid:115) f(x) (cid:55)→ s;
(cid:123)s
(cid:117)(cid:119)(cid:118) ifz e
(cid:125)(cid:127)(cid:126)s
location −1 as in(cid:74)·(cid:75)s), (2) speculation across function boundaries
is blocked by lfence statements, and (3) masking is done as in(cid:74)·(cid:75)s.
Theorem 5.4 (The NISLH compiler is RSSC-). ⊢(cid:74)·(cid:75)s
version of(cid:74)·(cid:75)ss that satisfies RSSC+.
This compiler is also RSSC- since (1) it correctly tracks whether
we are speculating (this time using local variable pr rather than
In a similar way, one can construct a secure, non-interprocedural
n; return;
n in
then s
else s′
n :RSSC-
4Flags: -mllvm -x86-speculative-load-hardening -mllvm -x86-slh-ip=false
return;
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
n
n
=
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea454(cid:114)H; F; I(cid:122)s
=(cid:74)H(cid:75)s ∪ (−1 (cid:55)→ 1 : S);(cid:114)F(cid:122)s;(cid:114)I(cid:122)s
(cid:74)H,−n (cid:55)→ v : U(cid:75)s =(cid:74)H(cid:75)s,−(cid:74)n(cid:75)s − 1 (cid:55)→(cid:74)v(cid:75)s : U
(cid:113)e :=pr e′(cid:121)s = let xf =(cid:74)e(cid:75)s+1 in let x′
(cid:74)ifz e then s else s′(cid:75)s = let xf =(cid:74)e(cid:75)s in let pr = rdpr −1 in let xf = 0 (if pr) in ifz xf then −1 :=pr pr ∨ ¬xf;(cid:74)s(cid:75)s else −1 :=pr pr ∨ xf;(cid:74)s′(cid:75)s
=(cid:74)e′(cid:75)s in let pr = rdpr −1 in let xf = 0 (if pr) in let x′
(cid:113)let x = rdpr e in s(cid:121)s = let xf =(cid:74)e(cid:75)s+1 in let pr = rdpr −1 in let x = rdpr xf in let x = 0 (if pr) in(cid:74)s(cid:75)s
(cid:113)let x = rdpr e in s(cid:121)ss = let xf =(cid:74)e(cid:75)ss+1 in let pr = rdpr −1 in let xf = 0 (if pr) in let x = rdpr xf in(cid:74)s(cid:75)ss
Figure 1: Key bits of the SLH compiler(cid:74)·(cid:75)s (above). The SSLH compiler(cid:74)·(cid:75)ss (below) differs in the compilation of memory reads.
= 0 (if pr) in xf :=pr x′
f
f
f
5.4 How to Prove RSSC
We now illustrate the backtranslation proof technique used to prove
SLH-related countermeasures secure. Our backtranslation is a sim-
ple adaptation of the general backtranslation proof technique [51].
To prove that a compiler is RSSC, we backtranslate a target attacker
(A) to create a source attacker (A =⟨⟨A⟩⟩) so that they produce traces
related by the relation of Section 4. Our backtranslation function