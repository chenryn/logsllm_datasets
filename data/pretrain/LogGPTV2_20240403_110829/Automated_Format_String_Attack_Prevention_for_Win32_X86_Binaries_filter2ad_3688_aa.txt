title:Automated Format String Attack Prevention for Win32/X86 Binaries
author:Wei Li and
Tzi-cker Chiueh
23rd Annual Computer Security Applications Conference
23rd Annual Computer Security Applications Conference
Automated Format String Attack Prevention for Win32/X86 Binaries
Wei Li
Tzi-cker Chiueh
Department of Computer Science
Stony Brook University
Stony Brook, NY 11794-4400
Abstract
A format string attack exploits the fact that variadic func-
tions determine the exact number of input arguments based
on the format string argument, and compromises the vic-
tim application’s address space by accessing data areas be-
yond the original input argument list the caller prepares.
This paper describes the design, implementation and evalu-
ation of a Win32 binary transformation tool called Lisbon,
which transparently inserts into Win32 binaries additional
checks that protect them from format string vulnerabilities.
Lisbon casts the format string attack prevention problem as
an input argument list bound checking problem. To reduce
the run-time checking overhead, Lisbon exploits the debug
register hardware, which is available in most mainstream
CPUs including Intel’s X86 architecture, to detect if a callee
accesses data outside the input argument list. Moreover,
Lisbon is able to detect format string attacks without inter-
preting their format strings and is thus potentially appli-
cable to similar attacks against other functions that access
input arguments in the same way as printf(). The run-
time throughput penalty of the ﬁrst Lisbon prototype is un-
der 2% for a set of test network applications that are known
to be vulnerable to format string attacks.
1. Introduction
A format string attack exploits the fact that functions
such as printf() can accept a variable number of input argu-
ments and the exact number of input arguments is implicitly
speciﬁed in the ﬁrst argument, the format string argument.
These functions are often referred to as variadic functions.
Given a call to a variadic function, the callee has no way of
determining if the input format string speciﬁes more input
arguments than is set up by the caller; only the caller can
check if the number of arguments it prepares is consistent
with that speciﬁed in the format string. If an attacker can
control the format string argument of a variadic function in
a victim application, it is possible for the attacker to read
or write the application’s address space. If the caller of a
variadic function can explicitly specify the number of input
arguments it prepares as another input argument, it would
have made format string attack much more difﬁcult, if not
impossible. Unfortunately the interface to existing variadic
functions such as printf() does not permit this extension.
Although there have been several attempts to solve the
format string attack problem, all of them share two deﬁ-
ciencies. First, they did not stop all known variants of for-
mat string attacks, for example, vulnerable vprintf functions
that are encapsulated by multiple layers of wrapper func-
tions. Second, they could not be directly applied to com-
mercially distributed Win32 binaries because some infor-
mation they need is inherently lost in binary programs, for
example, the number of arguments of a printf call as speci-
ﬁed in the source code.
This paper presents the design, implementation and eval-
uation of a format string attack prevention system called
Lisbon, which to the best of our knowledge is the ﬁrst tool
that can protect legacy Win32 binaries. There are two key
challenges in adding format string attack prevention logic
to Win32 binaries. First, state-of-the-art disassemblers such
as IDAPro cannot achieve 100% accuracy and coverage for
commercially distributed Win32 binaries. Lisbon solves
this problem by leveraging a novel binary analysis and in-
strumentation infrastructure called BIRD [17].
Second, unlike source code, an executable binary gener-
ally does not contain enough information to determine the
number of input arguments in each function call. There-
fore, it is not always possible to determine each variadic
function call’s exact list of input arguments in a binary pro-
gram, let alone compare its format string with its actual in-
put arguments. Lisbon solves this problem by ensuring that
when a variadic function accesses its input argument list,
it never steps beyond the list’s bound. More speciﬁcally,
because it is more important to protect the local variables
of a caller of a variadic function than to stop the variadic
function from stepping outside its input argument list, Lis-
bon actually checks a variadic function’s accesses against
the lower bound of its caller’s local variable region, rather
1063-9527/07 $25.00 © 2007 IEEE
1063-9527/07 $25.00 © 2007 IEEE
DOI 10.1109/ACSAC.2007.23
DOI 10.1109/ACSAC.2007.23
398
398
than the upper bound of its input argument list. By cast-
ing format string attack prevention into a bounds checking
problem, Lisbon does not need to determine the exact input
arguments of every variadic function call, and thus can suc-
cessfully apply this technique directly to binary programs.
Another advantage of casting the format string attack
prevention problem as an input argument list bound check-
ing problem is that the resulting solution is potentially ap-
plicable to all variadic functions, not just printf() and its
variants. More concretely, unlike other solutions, Lisbon
does not require interpretation of the format string argu-
ment. However, this generality comes with an implementa-
tion challenge: given an input argument list associated with
a function call, how to detect any overﬂow attempts by the
callee or its descendants in the call chain. Lisbon solves
this problem through a novel application of the debug regis-
ter facility supported in most modern processors including
X86, SPARC, MIPS, ARM, etc. By setting the bound to
be checked into a debug register, Lisbon is able to perform
list bound checking without requiring any software checks,
thus reducing the associated performance overhead to the
minimum.
Section 2 reviews previous work on format string attack
prevention. Section 3 describes the format string attack
problem in more detail, and the solution used in Lisbon.
The implementation issues of the ﬁrst Lisbon prototype on
the Windows platform are discussed in Section 4. In Sec-
tion 5 we present the evaluation results of the effectiveness
of the Lisbon prototype and its performance overhead. The
limitations of Lisbon are discussed in Section 6. Section 7
concludes this paper with a summary of research contribu-
tions and an outline of future work.
2. Related Work and Comparison
Successfully launching a format string attack requires
multiple conditions to be present, and previous efforts on
preventing/detecting format string attacks focused on elim-
ination of one or multiple of these conditions.
One proposal to thwart format string attacks is to force
all format strings to be constant. This is not an unreason-
able approach because many format string vulnerabilities
arise because of inadvertent missing of simple format string
such as “%s”. Pscan [9] is a simple lexical analysis tool
that searches for all calls to printf-like functions, and raises
a warning whenever their format string is the last argument
and is not a constant. The GCC compiler [12] incorporates
a similar feature. When the ﬂag “-Wformat=2” is enabled,
a compiler warning is issued whenever a non-constant for-
mat string is found. Libformat [19] is a customized li-
brary wrapping around printf-like functions for Linux ap-
plications.
It intercepts every call to a variadic function
and ﬂags an error whenever its format string is modiﬁable
and contains the “%n” speciﬁer. Unfortunately, disallowing
non-constant format string may break some applications;
for example, those applications that use the GNU interna-
tionalization library tend to generate format strings dynam-
ically [6] and thus trigger false alarms under these tools.
Instead of forcing all format strings to be constant, some
systems enforce this constraint only for “tainted” format
strings. Shankar et al. [24] implemented such a tainted
format string analysis system. By introducing a new type
qualiﬁer called “tainted” into the C language, they are able
to track the data usage and propagate the type information
associated with the data. When a format string is derived
from an external input, it would be marked as “tainted” and
triggers a check upon its use. This approach is superior be-
cause of reduced false alarms. However, it still generates
false positives. Moreover, it imposes additional work on de-
velopers in the form of extra annotation and re-compilation
of the source code.
FormatGuard [6] modiﬁes the Gnu C Preprocessor [11]
to count the number of input arguments of variadic function
calls statically, and checks this count against the conver-
sion speciﬁers in the format string dynamically through a
wrapper. If they don’t match, it generates a warning. There
are several limitations to FormatGuard. First, FormatGuard
assumes the number of input arguments in variadic func-
tion calls is known statically, and therefore cannot prevent
format string attacks through vprintf-like functions or their
wrapper functions. Unfortunately, many well-known for-
mat string vulnerabilities in software such as Wu-Ftpd [28]
and Proftpd [26] are indeed due to vprintf-like functions.
Libsafe [27] is a general approach to thwarting local
buffer overﬂow attacks by ensuring that local variable ac-
cesses within a function, including accesses to input argu-
ments, should never exceed its stack frame. As in libformat,
libsafe is implemented as a wrapper library that intercepts
each variadic function call and checks the format string.
Libsafe can protect binary programs that make calls to vari-
adic functions it intercepts and checks. The major limitation
of libsafe is its dependence on the usage of frame point-
ers. As a result, it simply cannot handle programs that are
compiled without frame pointer such as the “-fomit-frame-
pointer” ﬂag in GCC or the “/Oy (frame-pointer omission)”
option in VC++. Unfortunately, many Win32 binaries are
indeed distributed without using frame pointer.
Most known format string attacks [20] rely on the con-
version speciﬁer “%n” in printf-like functions to modify the
victim application’s address space. Accordingly, several
systems attempt to stop format string attacks by prevent-
ing attackers from abusing the “%n” speciﬁer. Libsafe [27]
checks if the target of a “%n” speciﬁer points to a return ad-
dress or a frame pointer on the stack to prevent them from
being tampered. But it does not prevent other critical data
such as function pointers and sensitive data variables from
399399
Table 1. Comparison between Lisbon and other dynamic checking approaches to preventing format
string attacks
Techniques
FormatGuard
Libsafe White-listing
Lisbon
Feature
Source code not required
Applicable to Win32 binaries
No false positives
Handle vprintf-like functions
Handle wrapper functions
Stop read attacks
Not format string-speciﬁc
Protect current stack frame
Libformat
Y
Y
Y
Y
Y
Y
Y
Y∗
Y
Y∗∗
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
∗: only for direct call case
∗∗: when frame bound checking is turned on
being altered. Ringenburg and Grossman proposed a white-
listing method [18] that constructs a list of addresses that
are passed into a variadic function as integer-pointer-type
arguments, and applies sanity checks only on addresses in
this list. The white-list method requires interpretation of
conversion speciﬁers and doesn’t stop format string attacks
that allow attackers to read memory locations in victim ap-
plications.
Compared with previous works, Lisbon is the ﬁrst tool
that can effectively protect commercially distributed Win32
binaries without breaking legitimate applications or inter-
preting the format strings. Table 1 shows a detailed compar-
ison between Lisbon and other solutions to the format string
attack problem that take the dynamic checking approach.
3. Bound Checking for Input Argument List
3.1. Format String Vulnerabilities and At-
tacks
Format string vulnerability mainly stems from a pro-
gramming error that leads the format string of a variadic
function such as printf to be directly controllable by an ex-
ternal input. Consider the following two calls to printf: (1)
printf (“%s”, user string) and (2) printf (user string), where
user string is derived from an external input. The results
of these two calls are exactly the same if user string is just
a simple character string. However, if user string contains
conversion speciﬁers, each of which corresponds to a sepa-
rate input argument and represents a command that controls
how printf operates on its corresponding argument, the sec-
ond call could trick printf into believing there are more than
one input argument in this call. As a result, even though
printf (user string) contains only one argument, the fact that
user string contains K conversion speciﬁers is enough to
convince printf to access additional memory locations on
the stack that are beyond user string.
If each of these K
conversion speciﬁers in user string denotes an integer, then
the attacker can trick printf into displaying the next K inte-
gers on the stack.
To modify the victim application’s address space, format
string attacks exploit a special conversion speciﬁer “%n”,
which counts the number of characters written so far and
writes the result into the address given by its correspond-
ing argument. By carefully crafting a format string that
prints out a pre-computed number of characters before the
“%n” speciﬁer, the attacker can write a chosen value to
some memory location. Moreover, because the additional
arguments required by the conversion speciﬁers come from
the stack frame of the caller to printf (user string), as does
user string, they are likely to be controllable by the attacker
as well. With the “%n” speciﬁer and the ability to manip-
ulate its corresponding argument, the attacker now has the
ability to write an arbitrary value to a chosen memory lo-
cation. If the memory location chosen to be overwritten is
a control-sensitive data structure that contains a return ad-
dress or function address, the attacker could hijack the con-
trol of the victim program.
3.2. Identiﬁcation of Input Argument List
The format string vulnerability is rooted in the fact that
a printf-like function can be tricked by the format string ar-
gument into believing it has more arguments than the caller
supplies and accessing memory locations lying beyond the
bound of its input argument list. Therefore we propose a list
bound checking approach to eliminate the format string vul-
nerability. There are two families of printf-like functions,
each with a different function template and both suscepti-
ble to the format string attack. Table 2 lists members of
each family. From now on, we refer to the ﬁrst group as
fprintf-like function, and to the second group as vprintf-like
function.
The major difference between fprintf-like functions
and vprintf-like functions lies in the way they take
the input arguments.
The prototypes of fprintf and
vprintf are int fprintf(FILE *stream, const
400400
Table 2. A list of variadic functions using a format string argument
Member Library Functions
Function Type
Input arguments explicitly passed through copying
Input argument list implicitly passed through a pointer
printf, fprintf, sprintf, snprintf, syslog, err, warn
vprintf, vfprintf, vsprintf, vsnprintf, vsyslog, verr, vwarn
char * format, ...) and int vprintf(const
char * format, va list ap), respectively. Fig-
ure 1 shows the stack layouts of an fprintf-like function
and a vprintf-like function called by a wrapper function.
In fprintf-like functions, the input arguments are explicitly
listed in the function call. The ... notation in fprintf’s
function prototype means that it could be substituted by
an arbitrary number of arguments when fprintf() is called.
These arguments are placed on the stack right next to the
ﬁrst or format string argument. When a fprintf-like func-
tion is encapsulated by layers of wrapper functions, its ar-
guments are explicitly passed through these wrapper func-
tions. Therefore, Lisbon can put list bound checking code in
any of the wrapper functions that eventually call the fprintf-
like function.
fprintf−like function
High
Address
Func. ArgumentN
... ...
Func. Argument1
Func. Argument0
(format string)
Return Address 
of Printf
Local Variable1
Local Variable2
... ...
Stack
Growth
Format Argument
List Bound
Low
Address
vprintf−like function
vaargs ArgumentN
... ...
vaargs Argument0
... ...
Return Address 
of Wrapper Func.
vaargs pointer
... ...
Return Address 
of vprintf
Local Variable1
Local Variable2
... ...
Figure 1. The stack layouts of fprintf-like and
vprintf-like function calls
In contrast, vprintf-like functions have only two argu-
ments, the ﬁrst being the format string and the second be-
ing a pointer to a special data structure called va list,
which correspond to a list of user-deﬁned data items that are
placed consecutively on the stack but may not be adjacent