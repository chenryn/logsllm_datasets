### Addressing the Problem: Selective CSSE Enablement and Data Trust Marking

CSSE (Context-Sensitive String Evaluation) can be selectively enabled based on the specific application requirements. Additionally, certain data can be explicitly marked as trusted using a provided API. The second assumption pertains to the string representation. CSSE operates on a string-abstraction representation of data. When an application performs direct manipulations on lower-level representations, such as character arrays, CSSE may not be able to update the metadata correctly. In such cases, to prevent false positives or negatives, the application developer should manually update the metadata using the provided API.

### 6.3 Run-Time Measurements

We also analyzed the impact of CSSE on PHP performance by conducting five tests that measured execution time:

- **T1-cgi**: Requesting the webpage `phpBB2/viewforum.php?f=1`, which contains the content of one forum. This operation involves several database reads and writes, including creating and storing a new session ID. PHP was running as a CGI application.
- **T1-mod**: The same test as T1-cgi, but with PHP running as an Apache2 module.
- **T2-cgi**: Requesting the webpage `phpBB2/profile.php?mode=editprofile&sid=`, which contains the content of one forum with a valid session ID. This test involved several database reads and complex output formatting with many string operations (creating a complex form with user-supplied data). PHP was running as a CGI application.
- **T2-mod**: The same test as T2-cgi, but with PHP running as an Apache2 module.
- **T3-CLI**: This test used the standard PHP test (`run-tests.php` included in the PHP source code). This test runs a series of tests designed by the PHP developers to verify the correctness of PHP. Note that these tests do not involve a web server and are usually not I/O intensive, so the expected impact of CSSE is lower compared to T1 and T2.

The results are summarized in Table 2. Tests T1-cgi, T1-mod, T2-cgi, and T2-mod were executed 600 times, with the first 100 executions discarded to avoid caching artifacts. Timings were calculated by the Apache server. Due to the long run time, the last test (T3-CLI) was executed only 20 times. The table also shows 95% confidence intervals for each set of experiments. All measurements were conducted on a single machine with a Pentium M processor running at 1.7 GHz, 1 GB of RAM, and Linux 2.6.8.

**Table 2. Run-time Overhead Evaluation: Execution Time for Different Tests**

| Test Name | Type | Unpatched (ms) | CSSE Disabled (ms) | CSSE Enabled (ms) |
|-----------|------|----------------|--------------------|-------------------|
| T1 (phpbb2 get) | CGI | 61.67 ± 0.23 | 62.22 ± 0.24 | 66.42 ± 0.29 |
| T1 (phpbb2 get) | mod apache | 61.12 ± 0.28 | 62.85 ± 0.29 | 71.54 ± 0.37 |
| T2 (phpbb2 get) | CGI | 58.59 ± 0.07 | 58.85 ± 0.06 | 61.29 ± 0.07 |
| T2 (phpbb2 get) | mod apache | 57.87 ± 0.07 | 59.41 ± 0.08 | 66.63 ± 0.09 |
| T3 (PHP tests) | CLI | 21.19 ± 0.06 | 21.28 ± 0.05 | 21.67 ± 0.07 |

### 6.4 Run-Time Overhead

Our observations indicate that the total run-time overhead does not exceed 8% of the total run time when PHP runs as a CGI application. Surprisingly, the overhead increases to 17% when PHP runs as an Apache2 module. This is illustrated in Figure 3, where black bars represent the execution time of unpatched PHP, grey bars show the overhead with CSSE disabled, and light grey bars indicate the overhead with CSSE enabled. As expected, the performance overhead for non-I/O intensive operations (the last test with a standalone PHP interpreter) is only around 2% of the total execution time.

**Figure 3. Run-time Overhead Evaluation: Request Processing Time and Relative Increase for Different Tests**

It is important to note that these numbers should be interpreted in the context of the goals set for our prototype in Section 5. Since the prototype is limited to the most commonly used string operations, our measurements may underestimate the actual performance impact. However, this underestimation is minimal, as the calls of the instrumented string functions account for a significant portion of the total number of string function calls. Additionally, our prototype is not optimized for performance, and using an alternative metadata representation, such as zval values, would likely improve performance.

Contrary to our expectations, the CSSE overhead was more than 2.5 times higher when PHP was running as a module rather than as a CGI application, even with a simple flag check to determine whether CSSE is enabled. This is likely due to threading issues, resulting in loading the entire runtime configuration data in each string operation, which could be mitigated with a more carefully designed prototype.

Another interesting observation is that PHP running as an Apache2 module did not yield any significant performance increase compared to a CGI application in our setup. This is attributed to the experiment setup, where the PHP interpreter was already cached in memory and was running only a single task. During normal operation, Apache2 modules are generally faster than CGI applications.

In conclusion, the overall performance overhead is application-dependent. Our tests suggest that it ranges from 2% for applications with few I/O operations to around 10% for typical web applications with PHP running with a web server.

### Memory Efficiency

In the current implementation, strings containing at least one untrusted part consume twice as much memory as their normal counterparts. To investigate the memory efficiency of CSSE, we analyzed the heap allocation of CSSE-enabled PHP using Valgrind [19] for tests T1 and T2. In both cases, the impact of CSSE was around 2% (40kB increase for a total of approximately 2MB allocated heap). This is intuitive, as only a small amount of memory allocated by PHP is used for storing PHP variables, some of which contain strings with user data. These results are application-dependent but should be similar for typical web applications.

Various optimization techniques can be applied to reduce this additional memory storage, but this was beyond the scope of our prototype. Our results show that even with this inefficient implementation, the memory impact is negligible.

### 7 Conclusions and Future Work

Injection vulnerabilities are a significant problem in application-level security. In this work, we identified the root cause of these vulnerabilities—the ad-hoc serialization of user-provided input. We provided a unifying view of injection vulnerabilities, which facilitates reasoning about this class of vulnerabilities and allows for the prediction of new types of related vulnerabilities.

Based on our improved understanding, we developed Context-Sensitive String Evaluation (CSSE), a novel method for defending against injection attacks. CSSE addresses the root cause of injection vulnerabilities by enforcing strict channel separation while still allowing the convenient use of ad-hoc serialization. CSSE is transparent to the application developer, as the necessary checks are enforced at the platform level, requiring neither modification nor analysis of the applications. This makes it advantageous over other solutions, such as safe ad-hoc serialization and serialization APIs.

CSSE works by automatically marking all user-originated data with metadata about its origin and ensuring that this metadata is preserved and updated when operations are performed on the data. The metadata enables a CSSE-enabled platform to carry out the necessary checks at a very late stage, specifically when the output expressions are ready to be sent to the handling component. At this point, the complete context of the output expressions is known, allowing CSSE to independently determine and execute the appropriate checks on the data it previously marked as unsafe.

We developed a prototype implementation of CSSE for the PHP platform and evaluated it with phpBB, a large real-life application. Our prototype prevented all known SQL injection attacks with a performance impact of approximately 10%.

As ongoing work, we are instrumenting the remaining string operations and output vectors to prevent more sophisticated injection attacks, including XSS attacks, and evaluating CSSE with other applications. We will also develop an application-level implementation of CSSE for a platform that supports the aspect-oriented programming paradigm.

### Acknowledgments

We thank Andreas Wespi, Birgit Baum-Waidner, Klaus Julisch, James Rioran, Axel Tanner, and Diego Zamboni of the Global Security Analysis Laboratory for their stimulating discussions and feedback. We also thank Frank Piessens of the Katholieke Universiteit Leuven for his valuable comments on this paper.

### References

1. Anley, C.: Advanced SQL Injection In SQL Server Applications. Technical report, NGSSoftware Insight Security Research (2002).
2. Anley, C.: (more) Advanced SQL Injection. Technical report, NGSSoftware Insight Security Research (2002).
3. Boyd, S., Keromytis, A.: SQLrand: Preventing SQL injection attacks. In Jakobsson, M., Yung, M., Zhou, J., eds.: Proceedings of the 2nd Applied Cryptography and Network Security (ACNS) Conference. Volume 3089 of Lecture Notes in Computer Science., Springer-Verlag (2004) 292–304.
4. Descartes, A., Bunce, T.: Perl DBI. O’Reilly (2000).
5. Kiczales, G., Lamping, J., Menhdhekar, A., Maeda, C., Lopes, C., Loingtier, J.M., Irwin, J.: Aspect-Oriented Programming. In Ak¸sit, M., Matsuoka, S., eds.: Proceedings European Conference on Object-Oriented Programming. Volume 1241 of Lecture Notes in Computer Science., Springer-Verlag (1997) 220–242.
6. Larson, E., Austin, T.: High coverage detection of input-related security faults. In: Proceedings of the 12th USENIX Security Symposium, Washington D.C., USENIX (2003) 121–136.
7. Lim, J.: ADOdb Database Abstraction Library for PHP (and Python). Web page at http://adodb.sourceforge.net (2000–2004).
8. Maor, O., Shulman, A.: SQL Injection Signatures Evasion. Technical report, Imperva Application Defense Center (2004).
9. Meijer, E., Schulte, W., Bierman, G.: Unifying tables, objects and documents. In: Workshop on Declarative Programming in the Context of OO Languages (DP-COOL’03), Uppsala, Sweeden (2003) 145–166.
10. MITRE: Common Vulnerabilities and Exposures. Web page at http://cve.mitre.org (1999–2004).
11. NIST: ICAT Metabase. Web page at http://icat.nist.gov/ (2000–2004).
12. Ollmann, G.: HTML Code Injection and Cross-site Scripting. Technical report, Gunter Ollmann (2002).
13. Ollmann, G.: Second-order Code Injection Attacks. Technical report, NGSSoftware Insight Security Research (2004).
14. PHP Group, T.: PHP Hypertext Preprocessor. Web page at http://www.php.net (2001–2004).
15. phpBB Group, T.: phpBB.com. Web page at http://www.phpbb.com (2001–2004).
16. SecurityFocus: BugTraq. Web page at http://www.securityfocus.com/bid (1998–2004).
17. Shankar, U., Talwar, K., Foster, J.S., Wagner, D.: Detecting format string vulnerabilities with type qualifiers. In: Proceedings of the 10th USENIX Security Symposium, Washington D.C., USENIX (2001) 257–272.
18. Stamey, J.W., Saunders, B.T., Cameron, M.: Aspect Oriented PHP (AOPHP). Web page at http://www.aophp.net (2004–2005).
19. Valgrind Developers: Valgrind. Web page at http://valgrind.org (2000–2005).
20. Wall, L., Christiansen, T., Orwant, J.: Programming Perl. O’Reilly (2000).