# Sleight of ARM: Demystifying Intel Houdini

**Author:** Brian Hong (@im_eningeer)  
**Affiliation:** NCC Group  
**Date:** 2021  
**Copyright:** © NCC Group 2021. All rights reserved.

## About the Author
- **Brian S. Hong (@im_eningeer)**
  - Hardware Enthusiast
  - Forward Reverse Engineer
  - Specializes in low-level reverse engineering and embedded systems security
  - Android Penetration Testing
  - Security Consultant
  - Electrical Engineering, The Cooper Union

## Introduction to Android NDK
- **Android Market Share**: Powers approximately 70% of mobile devices globally.
- **Application Development Languages**: Supports Java, Kotlin, and native languages (C, C++) through the Native Development Kit (NDK).
- **Hardware Platforms**:
  - **Primary Platform**: ARM
  - **Secondary Platform**: x86 (introduced in Android Lollipop, 2014)
- **NDK Versions**:
  - **NDK r6 (2011)**: Added support for x86.
  - **NDK r10 (2014)**: Introduced support for 64-bit ABIs, including x86_64.
- **Out-of-Tree Support**: Android-x86 project (2011).

## Android on x86
- **x86 Devices Running Android**:
  - x86 Chromebooks
  - Commercial Android emulators on x86 hosts
- **Challenges**:
  - Limited x86 support across apps
  - ARM is the primary target platform
  - Play Store only requires ARM builds
  - Few developers ship x86 binaries for their APKs, despite many apps using native code

### How do x86 Android devices support popular ARM-optimized apps?

## Houdini: An Overview
- **Definition**: Intel’s proprietary dynamic binary translator from ARM to x86, co-created with Google for Android.
- **Functionality**: Enables ARM native applications to run on x86-based platforms.
- **Availability**:
  - Little public documentation
  - Not prominently featured on Intel’s websites
  - Some vendors may be obfuscating their use of Houdini
- **Variants**:
  - 32-bit x86 implementing 32-bit ARM
  - 64-bit x86 implementing 32-bit ARM
  - 64-bit x86 implementing 64-bit ARM

## Houdini: Usage Scenarios
- **Physical Hardware**:
  - x86-based mobile phones (e.g., Zenfone 2)
  - x86 Chromebooks
- **Commercial Android Emulators**:
  - BlueStacks
  - NOX
  - Android-x86 Project

## Houdini: How It Works
- **Interpreted Emulator**:
  - Essentially a while loop around a switch (state machine)
  - Reads ARM opcodes and produces corresponding behavior in x86
  - Does not use Just-In-Time (JIT) compilation; no x86 instructions are produced at runtime
- **Components**:
  - **houdini**: Interpreter for running executable binaries (static and dynamic)
    - Uses dynamic libraries precompiled for ARM+Android from `/system/lib/arm` and `/system/vendor/lib/arm`
    - Loaded by the Linux kernel's `binfmt_misc` feature
  - **libhoudini**: Loadable shared object (x86) for loading and linking ARM libraries

### binfmt_misc
- **Definition**: A Linux kernel capability that allows arbitrary executable file formats to be recognized and passed to user-space applications like emulators and virtual machines.
- **Usage**: 
  - `/system/bin/houdini ./hello`

### libhoudini
- **Description**: A shared object (x86) designed to load ARM shared objects.
- **Integration**: Mainly used with Android NativeBridge to run ARM native code.

## Android NativeBridge
- **Overview**: Main interface from Android to `libhoudini`, part of the Android Runtime (ART).
- **Features**:
  - Supports running native libraries in different processor architectures.
  - Initialized on boot by ART.
  - Reads system property `ro.dalvik.vm.native.bridge`.
  - Provides the name of the library file to be loaded (e.g., `libhoudini.so`).
  - Defines interfaces with callbacks (`NativeBridgeRuntimeCallbacks` and `NativeBridgeCallbacks`).

### Initialization
- **Process**:
  - Disabled if `ro.dalvik.vm.native.bridge` is set to "0".
  - Otherwise, it loads the specified library (e.g., `libhoudini.so`).
  - Android-x86 project uses `libnb.so` as a shim to load `libhoudini`.

### Java Native Interface (JNI)
- **Definition**: A Foreign Function Interface (FFI) for calling between JVM code (Java) and native code (C/C++).
- **Features**:
  - Maps Java native methods to native symbols.
  - Provides a `JNIEnv*` pointer from the JVM, which includes function pointers for low-level Java/JVM reflection.
  - Offers type mapping between Java primitives and C types.

### Callbacks
- **NativeBridgeRuntimeCallbacks**:
  - Provide a way for native methods to call JNI functions.
- **NativeBridgeCallbacks**:
  - Interact with `libhoudini` via the `NativeBridgeItf` symbol.
  - Key functions include `initialize()`, `loadLibrary()`, and `getTrampoline()`.

### Summary
- **Initialization Steps**:
  1. `dlopen(libhoudini.so)`
  2. `dlsym(NativeBridgeItf)`
  3. `initialize()`
  4. `loadLibrary()` (equivalent to `dlopen()`)
  5. `getTrampoline()` (equivalent to `dlsym()`)

### Memory Management
- **Dual Architecture Userland**: Separate ARM binaries (e.g., libc) share the same virtual address space.
- **Memory Layout**:
  - Shared virtual address space
  - Separate allocation for ARM stack
  - Example mappings:
    - `00008000-0000a000 rw-p 00000000 [anon:Mem_0x10000002]`
    - `0c000000-0c001000 r--p 00000000 /vendor/lib/arm/nb/libdl.so`
    - `0c200000-0c203000 r--p 00000000 /data/app/com.nccgroup.research.../lib/arm/libnative-lib.so`
    - `0c500000-0c5d6000 r--p 00000000 /vendor/lib/arm/nb/libc.so`
    - `0e094000-10000000 rwxp 00000000 [anon:Mem_0x20000000]`
    - `12000000-12100000 rwxp 00000000`

This document provides a comprehensive overview of Houdini and its role in enabling ARM-native applications to run on x86-based Android devices.