0 𝐴′
1
0 𝐴′
1
0 𝐴′
1
1 𝐴′
1
0 𝐴′
2
0
0
1
0
1
0
1
1
0
1
0
1
0
1
0
1
#
1
2
3
4
5
6
7
8
0
0
0
0
1
1
1
1
0
0
1
1
0
0
1
1
Table 8: Truth table for the correction terms 𝑐0 and 𝑐1 in the
proof of division theorem (Appendix C).
2 𝜆(𝜂 + 1) + 31𝜂. Concretely, we get the best
can be rewritten as < 3
communication for 𝜂 = 32 by taking 𝑚 = 7 for the millionaire
invocations, getting a total communication of 5288 bits.
C PROOF OF DIVISION THEOREM
Here, we prove Theorem 4.1.
Proof. From Equation 2, we can write rdiv(⟨𝑎⟩𝑛
𝑖 , 𝑑) as:
rdiv(⟨𝑎⟩𝑛
𝑖 , 𝑑) =𝑛 idiv(𝑎𝑖 − 1{𝑎𝑖 ≥ 𝑛′} · 𝑛, 𝑑)
=𝑛 idiv(𝑎1
=𝑛 𝑎1
𝑖 · 𝑑 + 𝑎0
𝑖 − 1{𝑎𝑖 ≥ 𝑛′} · (𝑛1 · 𝑑 + 𝑛0), 𝑑)
𝑖 − 1{𝑎𝑖 ≥ 𝑛′} · 𝑛1 + idiv(𝑎0
𝑖 − 1{𝑎𝑖 ≥ 𝑛′} · 𝑛0, 𝑑),
(3)
for 𝑖 ∈ {0, 1}. 𝑎𝑢 can be expressed as 𝑎𝑢 = 𝑎0 + 𝑎1 − 𝑤 · 𝑛, where
the wrap-bit 𝑤 = 1{𝑎0 + 𝑎1 ≥ 𝑛}. We can rewrite this as:
𝑎𝑢 = 𝑎0 + 𝑎1 − 𝑤 · 𝑛
= (𝑎1
= (𝑎1
0 + 𝑎1
0 + 𝑎1
1 − 𝑤 · 𝑛1) · 𝑑 + (𝑎0
0 + 𝑎0
1 − 𝑤 · 𝑛1 + 𝑘) · 𝑑 + (𝑎0
0 + 𝑎0
1 − 𝑤 · 𝑛0)
0 + 𝑎0
(4)
1 − 𝑤 · 𝑛0 − 𝑘 · 𝑑 < 𝑑. Similar
1 − 𝑤 · 𝑛0 − 𝑘 · 𝑑),
for some integer 𝑘 such that 0 ≤ 𝑎0
to Equation 3 and from Equation 4, we can write rdiv(𝑎, 𝑑) as:
rdiv(𝑎, 𝑑) =𝑛 𝑎1
1 − 𝑤 · 𝑛0 − 𝑘 · 𝑑 − 1{𝑎 ≥ 𝑛′} · 𝑛0, 𝑑)
0 + 𝑎1
+ idiv(𝑎0
0 + 𝑎1
+ idiv(𝑎0
1 − 𝑤 · 𝑛1 + 𝑘 − 1{𝑎 ≥ 𝑛′} · 𝑛1
0 + 𝑎0
1 − 𝑤 · 𝑛1 − 1{𝑎 ≥ 𝑛′} · 𝑛1
0 + 𝑎0
1 − 𝑤 · 𝑛0 − 1{𝑎 ≥ 𝑛′} · 𝑛0, 𝑑).
=𝑛 𝑎1
(5)
0 , 𝑑) − rdiv(⟨𝑎⟩𝑛
From Equations 3 and 5, we have the following correction term:
𝑐 =𝑛 rdiv(𝑎, 𝑑) − rdiv(⟨𝑎⟩𝑛
=𝑛 (cid:0)1{𝑎0 ≥ 𝑛′} + 1{𝑎1 ≥ 𝑛′} − 𝑤 − 1{𝑎 ≥ 𝑛′}(cid:1) · 𝑛1
−(cid:0)idiv(𝑎0
1 − 𝑤 · 𝑛0 − 1{𝑎 ≥ 𝑛′} · 𝑛0, 𝑑)
0 + 𝑎0
0 − 1{𝑎0 ≥ 𝑛′} · 𝑛0, 𝑑) + idiv(𝑎0
1 − 1{𝑎1 ≥ 𝑛′} · 𝑛0, 𝑑)(cid:1)
+ idiv(𝑎0
1 , 𝑑)
𝑖 = idiv(𝑎0
=𝑛 𝑐1 · 𝑛1 + 𝑐0 − 𝐵
(7)
Let 𝐴′
1 − 𝑖 · 𝑛0, 𝑑). Then the values of the correction
0 + 𝑎0
terms 𝑐1 and 𝑐0 are as summarized in Table 8.
From the table, we have 𝑐1 = corr and can rewrite the correction
term as 𝑐 =𝑛 corr · 𝑛1 + 𝑐0 − 𝐵. Thus, adding corr · 𝑛1 − 𝐵 mod 𝑛 to
rdiv(⟨𝑎⟩𝑛
1 , 𝑑) accounts for all the correction terms
except 𝑐0 mod 𝑛.
0 , 𝑑) + rdiv(⟨𝑎⟩𝑛
(6)
16
0 + 𝑎0
1 and 𝐴 = 𝑎0
Now all that remains to be proven is that 𝑐0 = 1 − 𝐶. Let
𝐶0 = 1{𝐴 < 𝑑}, 𝐶1 = 1{𝐴 < 0}, and 𝐶2 = 1{𝐴 < −𝑑}. Then,
we have 𝐶 = 𝐶0 + 𝐶1 + 𝐶2. Note from the theorem statement that
1 − 2 · 𝑛0 for the cases corresponding to
𝐴 = 𝑎0
1 − 𝑛0 for
rows 1 and 8 respectively from the table, while 𝐴 = 𝑎0
the rest of cases. Thus, it is easy to see that 𝑐0 = idiv(𝐴, 𝑑). Also
note that −2 · 𝑑 + 2 ≤ 𝐴 ≤ 2 · 𝑑 − 2, implying that the range of 𝑐0 is
{−2,−1, 0, 1}. Now we look at each value assumed by 𝑐0 separately
as follows:
0 + 𝑎0
0 + 𝑎0
• 𝑐0 = −2: In this case, we have (𝐴 < −𝑑), implying 𝐶0 = 𝐶1 =
𝐶2 = 1, and 1 − 𝐶 = −2.
• 𝑐0 = −1: In this case, we have (−𝑑 ≤ 𝐴 < 0), implying
𝐶0 = 𝐶1 = 1, 𝐶2 = 0 and 1 − 𝐶 = −1.
• 𝑐0 = 0: In this case, we have (0 ≤ 𝐴 < 𝑑), implying 𝐶0 =
1, 𝐶1 = 𝐶2 = 0 and 1 − 𝐶 = 0.
• 𝑐0 = 1: In this case, we have (𝑑 ≤ 𝐴), implying 𝐶0 = 𝐶1 =
𝐶2 = 0 and 1 − 𝐶 = 1.
0 , 𝑑) −
1 , 𝑑).
□
Thus, 𝑐 =𝑛 corr · 𝑛1 + (1 − 𝐶) − 𝐵 =𝑛 rdiv(𝑎, 𝑑) − rdiv(⟨𝑎⟩𝑛
rdiv(⟨𝑎⟩𝑛
D PROTOCOL FOR GENERAL DIVISION
0 , ⟨𝛼⟩𝐵
0 , ⟨corr⟩𝐿
We describe our protocol for general division formally in Al-
gorithm 9. As discussed in Section 4.2.2, our protocol builds on
Theorem 4.1 and we compute the various sub-terms securely us-
ing our new protocols. Let 𝛿 = ⌈log 6𝑑⌉. We compute the shares
of corr over both Z𝑛 and ZΔ (Step 15). We write the term 𝐶 as
(DReLU(𝐴 − 𝑑) ⊕ 1) + (DReLU(𝐴) ⊕ 1) + (DReLU(𝐴 + 𝑑) ⊕ 1),
which can be computed using three calls to F int,𝛿
DReLU (Step 19) and
F 𝑛
B2A (Step 20) each.
1 ) =
Correctness and Security. First, 𝑚 = Reconst𝐵(⟨𝑚⟩𝐵
1 ) = 1{𝑎 ≥ 𝑛′}. Next, similar to Algorithm 5,
Reconst𝐵(⟨𝛼⟩𝐵
1 ),
0 , ⟨corr⟩Δ
Reconst𝐿(⟨corr⟩𝐿
where corr is as defined in Theorem 4.1. Given the bounds on
value of 𝐴 (as discussed above), it easy to see that Steps 16&17
compute arithmetic shares of 𝐴, and 𝐴0 = (𝐴 − 𝑑), 𝐴1 = 𝐴, 𝐴2 =
(𝐴 + 𝑑), respectively. Now, invocation of F int,𝛿
DReLU on shares of 𝐴𝑗
(Step 19) returns boolean shares of 𝛾 = (1 ⊕ MSB(𝐴𝑗)) over 𝛿 bit
integers, which is same as 1 ⊕ 1{𝐴𝑗 < 0} over Z. Hence, 𝐶′
𝑗 =
Reconst𝐵(⟨𝐶′
0 , ⟨𝐶′⟩𝐵
1 ) = 1{𝐴𝑗 < 0}. By correctness of F 𝑛
𝑗⟩𝐵
B2A,
step 22 computes arithmetic shares of 𝐶 as defined in Theorem 4.1.
In step 23, 𝐵0 + 𝐵1 =𝑛 𝐵 as defined. Hence, correctness holds and
⟨𝑧⟩𝑛
0 , ⟨𝑚⟩𝐵
1 ) = corr = ReconstΔ(⟨corr⟩Δ
of the protocol is easy to see in ((cid:0)4
and(cid:0)4
bits.(cid:0)4
(cid:1)-OT𝜂+𝛿, F int,𝛿
(cid:1)-OT𝜂+𝛿, and three calls each to F int,𝛿
(cid:1)-OT𝜂+𝛿 and 3 × F 𝑛
0 and ⟨corr⟩Δ
0 are uniformly random, security
B2A)-hybrid.
, F 𝑛
1
involves a single call to F ring,𝑛
Communication complexity. Πring,𝑛,𝑑
DReLU
B2A. From
2 − 13
DReLU as 3
B2A cost 2𝜆 + 4 · (𝜂 + 𝛿) and 3𝜆 + 3𝜂 bits
DReLU is 𝜆ℓ + 13 1
2 bits
DReLU requires 3𝜆𝛿 + 40 1
2 bits
respectively. Since the cost of F int,ℓ
(see Appendix B), 3 × F int,𝛿
2 𝜆𝜂 + 27𝜂 − 𝜆
2 ℓ − 3𝜆 − 35 1
2𝛿 − 9𝜆 − 106 1
𝑏 are shares of rdiv(𝑎, 𝑑).
Given that ⟨corr⟩𝑛
Appendix B, we have the cost of F ring,𝑛
DReLU and F 𝑛
DReLU
DIV
1
1
𝑗 = ( 𝑗0|| 𝑗1).
𝑃0 computes 𝑡 𝑗 = (⟨𝑚⟩𝐵
if 𝑡 𝑗 ∧ 1{𝑥0 = 0} then
𝑃0 sets 𝑠 𝑗 =𝑛 −⟨corr⟩𝑛
else if 𝑡 𝑗 ∧ 1{𝑥0 = 1} then
𝑃0 sets 𝑠 𝑗 =𝑛 −⟨corr⟩𝑛
else
𝑃0 sets 𝑠 𝑗 =𝑛 −⟨corr⟩𝑛
7:
8:
9:
10:
11:
12:
13:
14: end for
0 − 1 and 𝑟 𝑗 =Δ −⟨corr⟩Δ
0 + 1 and 𝑟 𝑗 =Δ −⟨corr⟩Δ
0 and 𝑟 𝑗 =Δ −⟨corr⟩Δ
0 .
0 − 1.
0 + 1.
Algorithm 9 Integer ring division, Πring,𝑛,𝑑
Input: For 𝑏 ∈ {0, 1}, 𝑃𝑏 holds ⟨𝑎⟩𝑛
Output: For 𝑏 ∈ {0, 1}, 𝑃𝑏 learns ⟨𝑧⟩𝑛
1: For 𝑏 ∈ {0, 1}, let 𝑎𝑏, 𝑎0
DIV
:
𝑏 , where 𝑎 ∈ Z𝑛.
𝑏 s.t. 𝑧 = rdiv(𝑎, 𝑑).
𝑏 ∈ Z and 𝑛0, 𝑛1, 𝑛′ ∈ Z be as defined
, 𝑎1
𝑏
in Theorem 4.1. Let 𝜂 = ⌈log(𝑛)⌉, 𝛿 = ⌈log 6𝑑⌉, and Δ = 2𝛿.
output ⟨𝛼⟩𝐵
2: For 𝑏 ∈ {0, 1}, 𝑃𝑏 invokes F ring,𝑛
𝑏 . Party 𝑃𝑏 sets ⟨𝑚⟩𝐵
3: For 𝑏 ∈ {0, 1}, 𝑃𝑏 sets 𝑥𝑏 = 1{⟨𝑎⟩𝑛
4: 𝑃0 samples ⟨corr⟩𝑛
0
5: for 𝑗 = {00, 01, 10, 11} do
6:
DReLU with input ⟨𝑎⟩𝑛
𝑏 = ⟨𝛼⟩𝐵
𝑏 ≥ 𝑛′}.
$← Z𝑛 and ⟨corr⟩Δ
0
𝑏 ⊕ 𝑏.
$← ZΔ.
0 ⊕ 𝑗0 ⊕ 𝑥0) ∧ (⟨𝑚⟩𝐵