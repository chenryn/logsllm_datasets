1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:42:15 UTC from IEEE Xplore.  Restrictions apply. 
The XML User Policy file format we decided on is
illustrated in the following example:
Having arrived at the XML policy file format, XSL
stylesheets are used to transform the policy file into the
desired formats. Two stylesheets were designed using
XSLT (Refer Figure 1).
Figure 1.
XSL transformation of XML
A stylesheet was created for transforming the file to
the KeyNote policy file format. An alternative stylesheet
to transform the XML policy file to a more human
readable, graphical web based format was also written.
The transformed output of the XML Policy file using this
template is shown in Figure 6 (see Appendix).
5.1. Java-based GUI
Although XML provides us with the flexibility to edit
the policy file in any XML editor, it would still be
convenient
to provide a graphical user interface to
manipulate the policy file. This would help to eliminate
inadvertent errors, and would enable global policy
decisions to be applied throughout the policy file. An
experienced system  administrator could still capitalize on
the use of the XML policy format and edit the file in the
absence of the graphical user interface (GUI).
A Java-based GUI was therefore built
to integrate
various components of the software [9]. Drop down
menus and dialog boxes guide the user to input various
parameters required for the policy file. To enable
maintenance of the GUI, called the Policy-Editor, a
separate XML configuration file was used to feed the data
for various drop down menus and combo/list boxes. This
decoupling of the Java code from the configuration data
will enable continued use of the Policy-Editor without the
need to modify the Java code.
Figures 5 through 8 are screen shots of the Policy
Editor. Figure 2 and Figure 3 select ports, and operational
modes and security levels in the construction of a security
policy. Figures 4 and 5 show the granular settings of
encryption and authentication for particular ports. Figure
6 (see Appendix) shows how the XSL transformation of
the resulting policy file displays the policy in a graphical
and more intuitive format.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:42:15 UTC from IEEE Xplore.  Restrictions apply. 
Figure 2.
Managing ports in the admin
module.
Figure 5.
Authentication for AH mode
In addition to the policy editor a generic XML editor,
such as XML Spy (Copyright ©1998-2002 Altova
GmbH) can be used to view and edit an XML Policy file.
Figure 7 (see Appendix) is a screen shot depicting the use
of XML Spy editor to manipulate the XML Policy file
directly. The result of schema validation can also be seen
here. Figure 8 (see Appendix) is the design view of the
schema when viewed in XML Spy, which allows
specification and analysis of the policy from another
viewpoint.
The security policy management toolkit is comprised
of the Java based Policy-Editor and an XML editor such
as XML Spy, XML Notepad, etc. The XML editors are
not essential, but can aid in file manipulation, their
transformation to multiple forms, and validation of
schemas.
Figure 3.
Admin mode settings for security
level and op modes
6. Future Work
Our work can be complemented with additional work
in a number of areas to provide better tools for policy
management. Listed below are several major items that
will require attention.
6.1. Policy File Format
The XML policy file format currently specified could
benefit from a more elaborate format with tags for other
parameters. XML Namespaces and XML vocabularies
could be utilized for a more comprehensive policy format
[18]. Examples could involve incorporating other
parameters such as algorithm key length,
time-of-day
parameters etc. The policy format should be able to
accommodate other Boolean operators such as inequality
definitions ( ,
in the security policy
management mechanism. For example, esp_enc_alg >
DES could imply 3DES and AES if we have an ordering
for the ‘security strength’ of each algorithm. Global
!= )
Figure 4.
Encryption settings for ports
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:42:15 UTC from IEEE Xplore.  Restrictions apply. 
policy statements such as encryption in crisis mode <
3DES, etc., should be possible. Inclusion of IP addresses
in policy statements should also be made possible. These
concepts have been demonstrated in the implementation.
Addition of more parameters as stated above could
however open up possibilities for
inconsistencies in
policy statements and the same will have to be carefully
and formally worked out.
6.2. Policy Editor Enhancements
The policy editor interface, though complete and
functional, can be improved upon. The particular
improvements envisioned are as follows:
6.2.1. Global policy settings. The policy editor could
be modified to enable global policy settings. For instance
we could have a statement such as all ports should have a
minimum encryption of DES or the maximum encryption
algorithm for Crisis mode should not exceed 3DES, etc.
(again, assuming a partial ordering of such algorithms).
The global settings option could enter the default settings
for all permissible ports and then more granular changes
could be made.
6 . 2 . 2 . Translation and viewing XML. XML
translation and viewing currently need the help of a
general purpose XML editor. Using Java packages such as
Javax, the same could be incorporated into the GUI thus
dispensing the need for XML editors for translation.
Schema validation. Validation of the XML
6.2.3.
document against DTD and schema need to be
incorporated into the GUI. Validation is currently
performed using an XML tool such as XML Spy.
DOM/JDOM/SAX could be used for this purpose.
Inconsistency and contradiction checks. As
6.2.4.
the policy file is extended to include global parameters
and overlapping rules apply to a particular port or
application,
inconsistencies and contradictions could
emerge. Various  XML tools could help in avoiding this.
Distributed IPsec policies could also give rise to policy
consistency issues.
6.3.
XML Interface to KeyNote.
Extending the XML policy language specified here to a
broader XML specification and providing an XML
processor in the KeyNote engine itself would greatly
enhance the use of KeyNote. This could reduce the
overhead of parsing in KeyNote  and provide the power of
XML for better auditing and dynamic management of
trust. By providing an XML interface to KeyNote,
application users could define their own versions of the
policy language and use XSL for translating it into the
desired KeyNote format, which would be trivial, or
alternatively they could use the vocabulary specified in
the KeyNote specifications.
7. Conclusion
Security policy management is a critical issue in the
management of computer and  networking resources. IPsec
and KeyNote provide a mechanism to implement a
granular security policy. Previous research in the area of
‘Quality of Security Service’ demonstrates how an
adaptive security policy can provide enhanced security
with optimal utilization of network resources. A missing
link in this process was the difficulty in specifying a
well-defined, granular, error free and consistent security
policy in the language understood by the KeyNote trust
management engine. We have presented  a solution to this
problem in the form of an easy to use yet powerful
security policy editor. The work demonstrates that use of
XML technology as a middle layer provides us with a
means to combine the security of KeyNote with the
simplicity of a policy editor. This novel approach also
provides us all the benefits of XML, such as XSL and
XML security. While XSL was extensively used, XML
security tools could also be used in follow up future
work.
References
[1] Agar Christopher, Dynamic Parameterization of IPsec,
Master of Science Thesis, Department of Computer Science,
Naval Postgraduate School, December 2001.
[2] Keromytis, A. D., Ioannidis, J. and Smith, J. M.,
Implementing IPsec, In Proceedings of the IEEE Global
Internet (GlobeCom) 1997, pp. 1948 - 1952. November 1997,
Phoenix, AZ.
[3] Blaze, M., Feigenbaum, J., Ioannidis, J., and Keromytis,
A. D, The KeyNote trust management system Version 2, (RFC
2704, Network Working Group, September 1999,
http://www.ietf.org/rfc/rfc2404.txt
[4] Blaze, M., Feigenbaum, J., and Keromytis, A. D.,
KeyNote: Trust Management for Public-Key Infrastructures,
In Proceedings of the 1998 Security Protocols International
Workshop, Springer LNCS vol. 1550, pp. 59 - 63. April 1998,
Cambridge, England. Also AT&T Technical Report 98.11.1.
[5] Blaze, M., Ioannidis, J. and Keromytis, A. D. Trust
Management and Network Security Protocols, In
Proceedings of the 1999 Security Protocols International
Workshop, April 1999, Cambridge, England.
[6] Blaze, M., Ioannidis, J. and Keromytis, A. D., Trust
Management for IPsec, In Proceedings of the Internet Society
Symposium on Network and Distributed Systems Security
(SNDSS) 2001, pp. 139 - 151. February 2001, San Diego, CA.
[7] Hunter, D., Cagle, K., Dix, C., Kovack,R., Pinnock, J., and
Rafter, J., Beginning XML 2nd Edition , Wrox Press Ltd,2002.
Irvine, C.E. and Levin, T., Quality of Security Service,
[8]
Proceedings of the New Security Paradigms Workshop, Cork,
Ireland, September 2000
[9] Java 2 Standard Edition, V1.2.2 API Specification,
http://java.sun.com/products/jdk/1.2/docs/api/, Sun
Microsystems, Inc., 1999.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:42:15 UTC from IEEE Xplore.  Restrictions apply. 
[10] Kent, S and Atkinson, R, Security Architecture for the
Internet Protocol, RFC2401, Network Working Group,
November 1998, http://www.ietf.org/rfc/rfc2401.txt
[15] Thayer, R., Doraswamy,N., and Glenn, R., IP Security
Document Roadmap, RFC 2411, Network Working Group,
November 1998, http://www.ietf.org/rfc/rfc2411.txt
[11] Maughan, D., Schertler, M., Schneider M., Turner J.,
Internet Security Association and Key Management Protocol
(ISAKMP), RFC 2408, Network Working Group, November
1998, http://www.ietf.org/rfc/rfc2409.txt
[12] Mohan, R. XML Based Adaptive Policy Mnagement in a
trust management system Context, Masters Thesis, Naval
Postgraduate School, Monterey, CA, September 2002.
[13] Spyropoulou, Evdoxia., Agar, Christopher D., Levin,
Timothy, and Irvine, Cynthia, IPsec Modulation for the
Quality of Security Service, NPS-CS-02-001, Naval
Postgraduate School, January 2002.
[14] Spyropoulou, Evdoxia., Levin, Timothy, and Irvine,
Cynthia, Demonstration of Quality of Security Service
Awareness for IPsec, NPS-CS-02-003, Naval Postgraduate
School, January 2002.
[16] XML Specification, http://www.w3.org/TR/2000/REC-
xml-20001006 , Aug 2002
[17] XML Schema specifications,
http://www.w3.org/TR/xmlschema-0, Aug 2002
[18] XML Namespace Recommendation,
http://www.w3.org/TR/REC-xml-names/
[19] XSLT Specifications, http://www.w3.org/TR/xslt, Aug
2002 RFC2396
Appendix: Detailed Screen Illustrations
Figure 6.
XSL transformation of the policy file
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:42:15 UTC from IEEE Xplore.  Restrictions apply. 
Figure 7.
Editing and validation of XML policy file using XML Spy
Figure 8.
Schema design view of the XML policy document
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:42:15 UTC from IEEE Xplore.  Restrictions apply.