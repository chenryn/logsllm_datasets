### 3.1 Introduction to Bitmap Indexing

Bitmap indexing is a technique that uses a sequence of bits to indicate the presence or absence of an item in the indexed data. The concept of bitmap indexing was first introduced by Spiegler and Maayan in 1985 [29]. The first commercial database product implementing a bitmap index was published in 1987 [30-35]. Bitmap indexing allows for efficient logical operations, such as AND, OR, NOT, and XOR, to answer complex queries.

#### Key Technologies of Bitmap Index Compression

Efficient indexing of network packets or flows is crucial for traffic archiving systems. Network traffic data have the following characteristics:

1. **Large Volume of Data**: The number of index messages is massive, even for brief periods.
2. **High Rates of Incoming Data**: Systems must be highly efficient to keep up with the rate of packet influx.
3. **Fixed Data Structure**: The index information for each network packet has a fixed format and length.
4. **Appending Without Modification**: Network packet index information can only increase. Once generated, it cannot be changed.
5. **High Redundancy**: Data items in network data are frequently repeated.

Due to these characteristics, traditional relational databases are not suitable for this work. Bitmap index databases, which store data in a columnar format with corresponding bitmap indexes, are more appropriate. An example of a bitmap index is shown in Table 4.

### 3.2 Categories of Bitmap Index Compression Algorithms

To summarize the characteristics of bitmap index compression algorithms, we compare them based on different dimensions: Segmentation, Chunking, Merge Compress, and Near Identical (NI), as shown in Table 5.

### 3.3 Bitmap Index Compression Algorithms

#### 3.3.1 Byte-Aligned Bitmap Compression (BBC)

Antoshenkov proposed the byte-aligned bitmap compression method in 1995 [36]. In BBC, bitmap bytes are classified as gaps (containing only 0’s or 1’s) and maps (containing a mixture of both). Continuous gaps are encoded by their byte length, and a fill bit is used to differentiate between 0 and 1 gaps. Map bytes are directly compiled after the control byte without encoding. A pair (gap, map) is encoded into a single atom composed of "control byte + gap length + map."

#### 3.3.2 Word-Aligned Hybrid (WAH)

WAH is the default bitmap index compression algorithm in FastBit database. It groups bit sequences into 31-bit (or 63-bit for WAH64) units. There are two types of groups: Literal, which contains 0 and 1 in 31 bits; and Fill, which contains all 0’s or all 1’s in 31 bits. Literal groups have a type flag of 0, and the remaining 31 bits are the original Literal group. Fill groups are divided into 0-Fill and 1-Fill, with a type flag of 1 and a second bit indicating the Fill type. The remaining 30 bits are a counter, indicating the number of consecutive 0-Fill (or 1-Fill) groups.

#### 3.3.3 Position List Word-Aligned Hybrid (PLWAH)

PLWAH groups bit sequences into 31-bit units, similar to WAH, but with some changes in compression. PLWAH introduces the concepts of "nearly identical" and "position list" to enrich the codebook, increasing the encoding types and improving compression efficiency. A slight improvement over PLWAH is achieved by the method "PLWAH+adaptive counter," which handles large numbers of consecutive 0’s or 1’s more efficiently.

#### 3.3.4 Enhanced Word-Aligned Hybrid (EWAH)

EWAH defines a 32-bit field containing consecutive 0’s or 1’s as a "clean" segment and a 32-bit field containing mixed 0’s and 1’s as a "dirty" segment. EWAH uses two types of words: a 32-bit verbatim word and a marker word. The first bit of the marker word indicates the type, and the remaining 31 bits are a counter. EWAH is more efficient than WAH when there are many long runs of dirty words.

#### 3.3.5 COmpressed N Composable Integer SEt (CONCISE)

CONCISE is based on WAH. In a compressed 32-bit segment, if the leftmost bit is 1, the following 31 bits are uncompressed. If the leftmost bit is 0, it indicates a Fill, and the second bit indicates the type of Fill. The next 5 bits are the position of a "flipped" bit within the first 31-bit block of the Fill, and the remaining 25 bits count the number of 31-blocks that compose the fill minus one.

#### 3.3.6 Partitioned Word-Aligned Hybrid (PWAH)

PWAH extends the word length to 64 bits and divides a word into P pieces, starting with a P-bit header to indicate the type of Fill or Literal. The length of Literal can be indicated flexibly to save space. There are three kinds of PWAH algorithms: PWAH-2, PWAH-4, and PWAH-8. PWAH-8 is more frequently used and, combined with the Nuutila algorithm [51], can effectively solve the accessibility query problem of large-scale graphs.

#### 3.3.7 COMPAX

COMPAX has a richer codebook with definitions of Literal and Fill similar to WAH and PLWAH. Every 31 bits are a chunk, and chunks are divided into four groups: Literal-Fill-Literal (LFL), Fill-Literal-Fill (FLF), Fill (F), and Literal (L). The COMPAX+oLSH (online-Locality-Sensitive-Hashing) compression method reorders the input data stream in advance, significantly improving the compression rate.

#### 3.3.8 Scope Extended COMPAX (SECOMPAX)

SECOMPAX is based on COMPAX2 and extends the "dirty byte" concept to include 0-NI-L and 1-NI-L, maintaining symmetry in the codebook. It also introduces extended LFL and FLF types, allowing for more efficient encoding of certain sequences that COMPAX cannot further compress.

### 3.3.8.1 New Ideas in Bitmap Index Encoding

SECOMPAX/ICX and MASC/PLWAH+ are proposed based on COMPAX/PLWAH. SECOMPAX/ICX is based on COMPAX2 and introduces the concept of nearly identical Literal (NI-L). MASC/PLWAH+ improves upon PLWAH by using adaptive counters and handling large numbers of consecutive 0’s or 1’s more efficiently.

These advancements in bitmap index compression algorithms are summarized in Figure 4, and the state-of-the-art bitmap index compression algorithms are shown in Figure 5.