Size of application-level slate lor a replica (bytes) 
x  10’ 
Figure 6: Variation of the recovery time for a server replica with 
the size of the replica’s application-level state. 
delivered to -42.  At the existing replica ill, the s e t s t a t e ( )  in- 
vocation is enqueued in the order of its arrival. 
Step (vi):  The set-state()  invocation on  the  new  or recover- 
ing replica returns a response (without throwing an exception), 
and the new  replica A:,  is  now  recovered and ready  to process 
normal invocations and responses. The enqueued messages are 
delivered, in  order, to the new or recovering replica, as shown 
in Figure 5(vi). The set-state() invocation, when it reaches the 
head of the message queue at the existing replica A1, will simply 
be discarded because A1  is already recovered. 
Thus, the logged get-state() invocation at the new or recover- 
ing replica is used to represent the sfare synchronization point, in 
the totally ordered message sequence, at which the state assign- 
ment must occur through its counterpart setstate() invocation. 
This careful synchronization of the positions of the get-state() 
and set-state()  messages in the incoming invocation sequence 
at the new and existing replicas is essential to consistent recov- 
ery of every replicated object. 
6  Implementation and Performance 
The  Eternal  system  provides  support  for  the  replication  of 
unmodified  CORBA  objects  running  over  unmodified  com- 
mercial  ORBS, including Inprise’s VisiBroker,  Iona Technolo- 
gies’  Orbix,  Xerox  PARC’s  ILU,  Washington  University,  St. 
Louis’ TAO, Vertel’s e*ORB, Expersoft’s CORBAplus, Object- 
Oriented  Concepts’  ORBacus and  AT  & T  Laboratories’ om- 
niORB2.  The overheads, under normal  fault-free operation, of 
the interception, multicast and replica consistency mechanisms 
of our prototype Eternal system are reasonable, within the range 
of  10-15% of the response  time for fault-tolerant CORBA test 
applications, over their unreplicated counterparts. 
The performance  of  the Eternal system  during the  recovery 
of  a  new  or  failed  replica  of  an  object  is  shown  in  Figure  6. 
The graph  shows the  time to recover a server replica in  a test 
application developed with Inprise’s VisiBroker 4.0 C++ ORB. 
The measurements were taken over a network of dual-processor 
268 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:04:13 UTC from IEEE Xplore.  Restrictions apply. 
167 MHz  UltraSPARC  workstations, running Solaris 2.7, and 
connected by  a  100 Mbps Ethernet. 
The client object of the test application acts as a packet driver, 
sending  a  constant  stream  of  two-way  invocations  to  the  ac- 
tively  replicated server object.  During the  experiments, one or 
the other of the server replicas was killed and then re-launched. 
The time  to recover  such a failed replica was measured as  the 
time interval between the re-launch of the failed replica and the 
replica’s reinstatement to  normal  operation.  The graph  shows 
the recovery times obtained with this test application for varying 
sizes (from  IO bytes  to 350,000 bytes) of the  application-level 
state that  is  transferred  across the  network  to  recover  a  failed 
server replica. The ORBIPOA-level state and the infrastructure- 
level  state  are  independent of, and therefore do not  vary  with, 
the size of the application-level state. 
Regardless of the size of the application-level state, the entire 
application-level state is encapsulated in a single IIOP message 
by the ORB. However, at the transport layer of the reliable multi- 
cast system, the Ethernet medium necessitates the fragmentation 
of any IIOP message that is larger than  the maximum Ethernet 
frame size (1518 bytes). This implies that  large (> 1518 bytes) 
IIOP messages  will  be  transmitted  over the  Ethernet  by  Eter- 
nal using multiple multicast messages. Thus, for any replicated 
object, the number of multicast messages needed to transfer its 
state, and  therefore  the  time to recover a new  or failed replica 
of the object, increases with the size of the object’s application- 
level state, as seen in  the graph. 
Thus, in addition to the resource usage of an object, the size 
of the object’s application-level state, and the constraints placed 
on  the  object’s recovery time,  also influence the  choice of  the 
object’s replication  style  - active  replication  (more resource- 
intensive, fewer state transfers, faster recovery) vs.  passive repli- 
cation  (less  resource-intensive,  more  frequent  state  transfers, 
slower recovery). 
7  Related Work 
Much  of  the  early  work  on  systematic  message  logging 
[5] in  distributed  systems  was  undertaken  by  Elnozahy  and 
Zwaenepoel in  their  Manetho  system  [4].  They  devised  algo- 
rithms for sound uncoordinated logging that avoid cascaded roll- 
backs during recovery, at the expense of rather complex recov- 
ery algorithms. Interesting recent work on logging and recovery 
has been undertaken by Alvisi and Marzullo. In [ I ]   they investi- 
gated conditions under which no process is left in an inconsistent 
state, while in [2] they addressed the piggybacking of nondeter- 
ministic operations onto messages in  the message log to ensure 
deterministic replay. 
The Delta-4 system  [ 161 was aimed at  providing fault toler- 
ance in  a distributed Unix  environment, through the use of an 
atomic multicast  protocol  to ensure tolerate crash  faults at  the 
process  level.  Delta-4  included support for active replication, 
passive replication, as well as hybrid semi-active replication of 
software components on  distinct  processors.  Backward  error 
recovery  is  achieved  by  integrating  checkpointing  with  inter- 
process communication. 
The  Arjuna  system  [ 151  uses  object  replication  together 
with  an atomic  transaction  strategy  to  provide  fault tolerance. 
The  types  of  replication  supported  include  active  replication, 
coordinator-cohort passive  replication  and  single-copy passive 
replication. Strategies similar to checkpointing are used for dis- 
seminating state updates in passive replication. 
The FRIENDS  [6] system aims to  provide mechanisms  for 
building fault-tolerant applications in a flexible way through the 
use  of  libraries  of  metaobjects.  Separate  metaobjects  can  be 
provided for fault tolerance, security and group communication. 
FRIENDS is composed of a number of subsystems, including a 
fault tolerance subsystem that provides support for object repli- 
cation  and  detection  of faults.  A  number of  interfaces similar 
to our Checkpointable interface are provided for capturing 
the state of an object to stable storage, and for transmitting the 
primary replica’s state to the backup replicas in the case of pas- 
sive replication. 
Other systems have been developed that address issues related 
to  consistent  object replication and  fault tolerance  in  the con- 
text of CORBA. The Object Group Service (OGS) [7] provides 
replication  for CORBA  applications  through a  set of  CORBA 
services. Replica consistency is ensured through group commu- 
nication based  on a consensus algorithm implemented through 
CORBA service objects. OGS provides interfaces for detecting 
the liveness of objects, and mechanisms for duplicate detection 
and suppression, and for the transfer of application-level state. 
Developed at the University of Newcastle, Newtop is a group 
communication toolkit  that  is  exploited  to  provide  fault toler- 
ance to CORBA using the service approach.  While the funda- 
mental ideas are similar to OGS, the Newtop-based object group 
service [8] has some key differences. Of particular interest is the 
way this service handles failures due to partitioning - support is 
provided for a group of replicas to be partitioned into multiple 
sub-groups, with each sub-group being connected within itself. 
No mechanisms are provided, however, to ensure consistent re- 
merging of the sub-groups once communication is reestablished 
between them. 
The Maestro toolkit [I71 includes an IIOP-conformant ORB 
with an open architecture that supports multiple execution styles 
and  request  processing policies.  The replicated  updates exe- 
cution  style can  be  used  to  add  reliability  and  high  availabil- 
ity  properties to clientlserver  CORBA  applications in  settings 
where it is not feasible to make modifications at the client side, 
as is the  case for unreplicated clients wishing to contact repli- 
cated objects. 
The AQuA architecture [3] is a dependability framework that 
provides object replication and  fault tolerance for CORBA ap- 
plications.  AQuA  exploits  the  group  communication  facili- 
ties  and  the  ordering  guarantees of  the  underlying  Ensemble 
and  Maestro  toolkits  to  ensure  the  consistency  of  the  repli- 
cated CORBA objects. AQuA supports both active and passive 
replication,  with state transfers to synchronize the states of the 
backup replicas with  the state of the primary replica in the case 
of passive replication. 
The Distributed Object-Oriented Reliable Service (DOORS) 
[I21 provides fault tolerance  through  a service approach, with 
CORBA objects that detect, and recover from, replica and pro- 
cessor faults. The system provides support for resource manage- 
ment based  on  the needs of the CORBA application.  DOORS 
employs libraries for the transparent checkpointing [ 181 of ap- 
plications; however, duplicate detection and suppression are not 
addressed. 
OGS,  AQuA,  Maestro  and  DOORS  deal  with  the  consis- 
tency  of  application-level state  by  having  application  objects 
269 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:04:13 UTC from IEEE Xplore.  Restrictions apply. 
inherit  from  an  IDL  interface  with  state  retrieval  and  assign- 
ment methods similar to those of our Checkpointable IDL 
interface.  To  the  best  of  our  knowledge,  however,  none  of 
these fault-tolerant CORBA systems has addressed the issues of 
ORB/POA-level state and infrastructure-level  state that  are es- 
sential in ensuring strongly consistent replication and recovery. 
8  Conclusion 
The Eternal system provides  support for the consistent replica- 
tion and recovery of unmodified  CORBA client and server ob- 
jects running over unmodified CORBA-compliant off-the-shelf 
ORBS. Eternal’s Recovery Mechanisms include support for the 
logging of messages and the logging of checkpoints, as well as 
for the retrieval, transfer and assignment of state. 
For  every  replicated  CORBA  object  that  it  supports,  Eter- 
nal  maintains  the  consistency  of  the  three  kinds  of  state  - 
application-level state, ORBIPOA-level state and infrastructure- 
level  state  - that  are  inevitably  present  in  a  fault-tolerant 
CORBA system. Eternal ensures that the three kinds of state are 
synchronized across all of the operational replicas of a CORBA 
object, regardless of the object’s replication style, and in a man- 
ner that is transparent to the ORB and to the CORBA applica- 
tion.  Eternal’s enqueueing and dispatching  of the messages  for 
retrieving and assigning the three kinds of state ensures that the 
recovery of  failed replicas is concurrent with the normal opera- 
tion of existing replicas; thus, Eternal allows the system to con- 
tinue operating in the presence of faults, and during recovery. 
True to the spirit of the new Fault-Tolerant CORBA standard 
that it implements, Eternal maintains strong replica consistency, 
as replicas process  invocations  and  responses,  as faults occur, 
causing replicas to fail, and as it recovers replicas after a fault. 
References 
[I]  L. Alvisi and K. Marzullo.  Message logging: Pessimistic, 
IEEE  Transactions  on 
optimistic,  causal,  and  optimal. 
Sofmare Engineering, 24(2): 149-159,  February  1998. 
[2]  K. Bhatia,  K. Marzullo, and L. Alvisi.  The relative over- 
head of piggybacking in causal message logging protocols. 
In Proceedings of  the  17th IEEE Symposium  on Reliable 
Distributed  Systenis, pages 348-353,  West Lafayette, IN, 
October  1998. 
[3]  M. Cukier, J. Ren, C. Sabnis, W. H. Sanders, D.E. Bakken, 
M.  E.  Berman,  D.  A.  Karr,  and R.  Schantz.  AQUA: An 
adaptive architecture  that provides dependable distributed 
the  IEEE  17th  Syniposirtni 
objects. 
on  Reliable  Distributed  Systems,  pages  245-253,  West 
Lafayette, IN, October 1998. 
In  Proceedings  of 
[4]  E. N. Elnozahy and W. Zwaenepoel.  Manetho: Transpar- 
ent roll back-recovery with low overhead, limited rollback, 
and fast output commit. IEEE Transactions on Conipitters, 
4 1(5):526-53  1, May  1992. 
[5]  E. N. Elnozahy and W. Zwaenepoel. On the use and imple- 
mentation of message logging.  In Proceedings ofthe 24th 
IEEE Fault-Tolerant  Computing  Sjniposiitni,  pages  298- 
307, Austin, TX, June 1994. 
[6]  J.  C. Fabre  and T.  Perennou.  A  metaobject  architecture 
for fault-tolerant distributed  systems:  The FRIENDS ap- 
proach.  IEEE  Transactions  on  Conipurers, 47( 1):78-95, 
1998. 
[7]  P. Felber, R. Guerraoui, and A. Schiper.  The implementa- 
tion of a CORBA object group service.  Theory and Prac- 
tice of Object Systems, 4(2):93-105,  1998. 
[XI  G. Morgan, S. Shrivastava, P. Ezhilchelvan, and M. Little. 
Design and implementation of a CORBA fault-tolerant ob- 
ject group service. In Proceedings  of  the Second IFlP WG 
6. I  International Working  Conference  on  Distributed  Ap- 
plications  arid  Interoperable  Systems,  Helsinki,  Finland, 
June 1999. 
[9]  L. E. Moser,  P.  M.  Melliar-Smith,  D.  A.  Agarwal,  R.  K. 
Budhia, and C. A. Lingley-Papadopoulos.  Totem: A fault- 
tolerant multicast group communication  system.  Comniit- 
nicatioris ofthe ACM, 39(4):54-63,  April  1996. 
[IO]  L. E. Moser, P. M. Melliar-Smith, and P. Narasimhan. Con- 
sistent object replication in the Eternal system. Theory and 
Practice  of  Object Systems, 4(2):8 1-92,  1998. 
1 I]  P. Narasimhan, L. E. Moser, and P. M. Melliar-Smith.  En- 
forcing determinism for the consistent replication of multi- 
threaded CORBA applications. In Proceedbigs of  the IEEE 
18th  Syniposiuni  on  Reliable  Distributed  Systems,  pages 
263-273,  Lausanne, Switzerland, Oct.  1999. 
121  B.  Natarajan,  A.  Gokhale,  S.  Yajnik,  and  D.  C. 
Schmidt.  DOORS:  Towards  high-performance  fault- 
tolerant CORB.4.  In Proceedings of  the International  Sjni- 
posiuni on Distributed  Objects and Applications, Antwerp, 
Belgium, September 2000. 
[I31  Object  Management  Group.  The  Common  Object  Re- 
q u e s t   B r o k e r :   A r c h i t e c t u r e  a n d   specification, 2.3 edition. 
OMG  Technical  Committee Document formaV98- 12-01, 
June 1999. 
[ 141  Object  Management  Group. 
Fault  tolerant  CORBA 
(adopted specification).  OMG Technical Committee Doc- 
ument orbos/2000-04-04, March 2000. 
[I51  G. Parrington,  S. Shrivastava, S. Wheater,  and M. Little. 
The design and implementation of Arjuna.  USENlX Coni- 
puting Systems Journal, 8(3):255-308,  Summer 1995. 
[I61  D. Powell.  Delta-4:  A  Generic Architecture for Depend- 
able Distributed  Coniputing. Springer-Verlag, 199 1. 
[I71  A.  Vaysburd  and  K.  Birman.  The  Maestro  approach 
to building  reliable  interoperable  distributed  applications 
with multiple execution styles. Theory and Practice of00- 
jecr Sysrenis, 4(2):73-80,  1998. 
[ 181  Y. M. Wang, Y.  Huang, K. P. Vo, P.  Y. Chung, and C. M. R. 
Kintala.  Checkpointing and its applications.  In  Proceed- 
ings of  the 25th IEEE International Syniposiuni on  Fault- 
Tolerant  Coniputing,  pages  22-3  I ,   Pasadena,  CA,  June 
1995. 
270 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:04:13 UTC from IEEE Xplore.  Restrictions apply.