Https:  
○
Can   only   load   resources   over   HTTPS   
●
‘Unsafe-inline’  
○
Allows   inline   elements   (onclick,   tags,   javascript:,)   
●
‘Unsafe-eval’  
○
Allows   dynamic   code   evaluation   (eval()   function)   
●
‘Sha256-‘  
○
Can   only   load   resources   if  it  matches   the   hash   
●
‘Nonce-‘  
○
Allows   an   inline   script   or   CSS   to   execute   if  the   script   tag   contains   a   nonce   
attribute   matching   the   nonce   specified   in   the   CSP   header.  
Now   that   you   know   about   the   structure   of   a   CSP   header   let's   look   at   an   example.   As   
shown   below   you   can   see   that   the   CSP   is   returned   in   the   HTTP   response   header.  
●
default-src   'none';   base-uri   'self';   block-all-mixed-content;   connect-src   'self'   
uploads.github.com   www.githubstatus.com   collector.githubapp.com   
api.github.com   www.google-analytics.com   github-cloud.s3.amazonaws.com   
github-production-repository-file-5c1aeb.s3.amazonaws.com   
github-production-upload-manifest-file-7fdce7.s3.amazonaws.com   
github-production-user-asset-6210df.s3.amazonaws.com   wss://live.github.com;   
font-src   github.githubassets.com;   form-action   'self'   github.com   gist.github.com;   
frame-ancestors   'none';   frame-src   render.githubusercontent.com;   img-src   'self'   
data:   github.githubassets.com   identicons.github.com   collector.githubapp.com   
github-cloud.s3.amazonaws.com   *.githubusercontent.com   
customer-stories-feed.github.com   spotlights-feed.github.com;   manifest-src   'self';   
media-src   'none';   script-src   github.githubassets.com;   style-src   'unsafe-inline'   
github.githubassets.com  
The   first   thing   we   see   is:   default-src  ‘none’; .   Basically   this   says   block   everything   unless   
told   otherwise.   I   also   see:   frame-ancestors   ‘none’;   .   This   policy   will   block   other   sites   
from  loading   this   site   in   an   iframe,   this   kills   the   clickjacking   vulnerability.   We   also   see:  
script-src  github.githubassets.com; .   This   policy   makes   it  so   the   site   can   only   load   
javascript   files   from  github.githubassets.com,   basically   killing   XSS   unless   we   can   find   a   
bypass   in   that   site.   There   are   other   policies   defined   as   well   go   see   what   they   are   doing.  
Basic  CSP  Bypass  
There   are   quite   a   few   ways   to   mess   up   your   implementation   of   CSP.   One   of   the   easiest   
ways   to   misconfigure   the   CSP   is   to   use   dangerous   values   when   setting   policies.   For   
example   suppose   you   have   the   following   CSP   header:  
●
default-src   'self'   *  
As   you   know   the    default-src   policy   acts   as   a   catch   all   policy.   You   also   know   that   *   acts   
as   a   wild   card.   So   this   policy   is   basically   saying   allow   any   resources   to   be   loaded.   It's   
the   same   thing   as   not   having   a   CSP   header!   You   should   always   look   out   for   wildcard   
permissions.  
Let's   look   at   another   CSP   header:  
●
script-src   'unsafe-inline'   'unsafe-eval'   'self'   data:   https://www.google.com   
http://www.google-analytics.com/gtm/js    https://*.gstatic.com/feedback/   
https://accounts.google.com ;  
Here   we   have   the   policy    script-src   which   we   know   is   used   to   define   where   we   can   load   
javascript   files   from.   Normally   things   like       would   be   
blocked   but   due   to   the   value   ‘unsafe-inline’   this   will   execute.   This   is   something   you  
always   want   to   look   out   for   as   it  is   very   handy   as   an   attacker.  
You   can   also   see   the   value   data:   this   will   allow   you   to   load   javascript   if  you   have   the   
data:   element   as   shown   below:   ”>.  
So   far   all   of   the   techniques   used   to   bypass   CSP   have   been   due   to   some  
misconfiguration   or   abusing   legitimate   features   of   CSP.   There   are   also   a   few   other   
techniques   which   can   be   used   to   bypass   the   CSP.  
JSONP  CSP  Bypass  
If   you   don’t   know   what   JSONP   is   you   might   want   to   go   look   at   a   few   tutorials   on   that   
topic   but   i'll   give   you   a   brief   overview.   JSONP   is   a   way   to   bypass   the   same   object   policy   
(SOP).   A   JSONP   endpoint   lets   you   insert   a   javascript   payload   ,   normally   in   a   GET   
parameter   called   “callback”   and   the   endpoint   will   then   return   your   payload   back   to   you   
with   the   content   type   of   JSON   allowing   it  to   bypass   the   SOP.   Basically   we   can   use   the   
JSONP   endpoint   to   serve   up   our   javascript   payload.   You   can   find   an   example   below:  
●
https://accounts.google.com/o/oauth2/revoke?callback=alert(1337)  
As   you   can   see   above   we   have   our   alert   function   being   displayed   on   the   page.  
The   danger   comes   in   when   a   CSP   header   has   one   of   these   endpoints   whitelisted   in   the   
script-src   policy.   This   would   mean   we   could   load   our   malicious   javascript   via   the   JSONP   
endpoint   bypassing   the   CSP   policy.   Look   at   the   following   CSP   header:  
●
script-src   https://www.google.com   http://www.google-analytics.com/gtm/js  
https://*.gstatic.com/feedback/    https://accounts.google.com ;  
The   following   would   get   blocked   by   the   CSP:  
●
http://something.example.com/?vuln_param=javascript:alert(1) ;  
What   if  we   tried   the   following:  
●
http://something.example.com/?vuln_param=https://accounts.google.com/o/oauth2/revo 
ke?callback=alert(1337)  
This   would   pass   because   accounts.google.com   is   allowed   to   load   javascript   files   
according   to   the   CSP   header.   We   then   abuse   the   JSONP   feature   to   load   our   malicious   
javascript.  
CSP  Injection  Bypass  
The   third   type   of   CSP   bypass   is   called   CSP   injection.   This   occurs   when   user   supplied   
input   is   reflected   in   the   CSP   header.   Suppose   you   have   the   following   url:  
●
http://example.com/?vuln=something_vuln_csp  
If   your   input   is   reflected   in   the   CSP   header   you   should   have   something   like   this:  
script-src  something_vuln_csp;  
object-src  'none';  
base-uri  'none';  
require-trusted-types-for  'script';  
report-uri  https://csp.example.com ;  
This   means   we   can   control   what   value   the   script-src   value   is   set   to.   We   can   easily   
bypass   the   CSP   by   setting   this   value   to   a   domain   we   control.  
Summary  
The   CSP   is   a   header   used   to   control   where   an   application   can   load   its  resources   from.   
This   is   often   used   to   mitigate   vulnerabilities   such   as   XSS   and   clickjacking   but   if  set   up   
improperly   it  can   be   easy   to   bypass.   Looking   for   things   such   as   CSP   injection   or   a   
vulnerable   JSONP   endpoint   can   be   an   easy   way   to   bypass   the   CSP   header.   If   the   CSP   
was   improperly   set   up   you   could   use   the   CSP   functionality   against   itself   to   bypass   the   
CSP.   For  example   the   use   of   ‘inline-scripts’   and   wild   cards   is   always   dangerous   when   
applied   to   the   script-src   policy.  
Relative  Path  Overwrite  (RPO)  
Introduction  
Relative   path   overwrite(RPO)   is   an   older   lesser   known   vulnerability   which   impacts   a   
decent   number   of   applications.   You   can   sometimes   use   the   vulnerability   for   XSS   or  
extracting   sensitive   data   but   the   vast   majority   of   the   cases   can   only   be   exploited   for   web   
defacement.   This   vulnerability   is   normally   classified   as   a   low   severity   finding   but   I   still   
find   it  interesting   as   very   few   people   know   how   to   exploit   this   bug   so   there   are   good   
chances   it  will   be   missed   in   the   wild.  
RPO  
Before   you   can   exploit   RPO   a   few   things   must   happen.    First   you   need   to   find   a   page   
that   reflects   the   current   url,   path,   or   referrer   header   in   the   response.   Secondly   you   need   
the   page   to   be   missing   the    “DOCTYPE”  tag   to   enable   quirks   mode.   Third,   you   need   the   
endpoint   to   have   a   wild   card   path   so   “example.com/vuln.php”   is   the   same   as   
“example.com/vuln.php/somthing/”.   Finally   you   need   to   find   if  there   are   any   style   sheets   
being   imported   using   a   relative   path.   If   all   these   requirements   are   met   you   can   probably   
exploit   the   RPO   vulnerability.  
To   understand   RPO   you   first   thing   you   need   to   learn   about   is   how   browsers   use   path   
relative   links   to   load   content.  
●
●
●
As   you   can   see   above   there   are   a   few   ways   an   application   can   load   the   CSS   file   
“style.css”.   The   first   example   uses   an   absolute   link   which   is   the   full   path   to   the   CSS   file.   
The   second   example   starts   at   the   root   of   the   web   directory   and   looks   for   the   “style.css”   
file   there.   Finally   the   last   example   uses   a   relative   path   so   it  will   look   at   the   current   
directory   for   the   “style.css”  file,   if  the   url   is   “example.com/test/”   it  will   look   for   the   CSS   
file   at   “/test/style.css”.  
You   also   need   to   know   a   little   about   “Quirks   Mode”.   Quirks   mode   was   designed   to   
gracefully   handle   the   poorly   coded   websites   which   was   fairly   common   back   in   the   day.   If   
quirks   mode   is   enabled   the   browser   will   ignore   the   “content-type”   of   a   file   when   
processing   it.   So   if  we   pass   an   HTML   file   to   a   link   tag   it  will   still   parse   the   HTML   file   as   if   
it's   a   CSS   file.   If   Quirks   mode   is   disabled   the   browser   would   block   this   action.   
Now   that   you   have   the   prerequisite   knowledge   it's   time   to   get   to   the   actual   exploit.   First   
examine   the   vulnerable   code   below:  
First   we   need   to   figure   out   if  the   application   reflects   the   path   in   the   HTML   source.   Look   
at   the   above   image   we   can   clearly   see   the   “path”   variable   is   concatenated   with   the   
output   but   normally   you   don't   have   access   to   the   source   so   you   will   need   to   manually   
verify   this   as   shown   below:  
Above   you   can   clearly   see   the   “okay/”   path   displayed   on   the   page.   We   can   also   see   the   
“document   type”   tag   is   missing   from  the   HTML   source   so   we   know   the   page   is   running   
in   quirks   mode.   Next   we   need   to   figure   out   if  “/home/okay/”   resolves   to   the   same   page   
as   “/home”   which   it  does.  
As   shown   above   when   we   change   the   URL   to   “/home/okay/”   the   “Link”   tag   tries   to   
import   its  stylesheet   from  “/home/okay.style.css”   this   is   because   the   Link   tag   is   using   a   
relative   path.   Also   notice   how   the   style   sheet   resolves   to   the   same   HTML   source   as   
“/home”.   This   is   because   there   is   a   wild   card   path   after   “/home”   which   causes   any   path  
after   “/home”   to   resolve   to   “/home”.  
Also   note   that   the   response   does   not   contain   a   “document   type”   tag   so   the   browser   has   
“quirk   mode”   enabled.   If   it  did   contain   a   “document   type”   tag   this   mode   would   be   
disabled   and   the   browser   would   throw   an   error   when   it  goes   to   parse   the   CSS   file   
because   it  will   contain   a   “text/html”   content   type   as   shown   below:  
Lucky   for   us   the   document   type   is   not   included   in   the   HTML   so   we   can   continue   with   the   
attack.   The   last   step   is   to   actually   launch   the   exploit   to   see   if  it  works.   Since   the   Link   tag   
is   accepting   the   HTML   output   as   CSS   and   user   controlled   input   is   reflected   in   that   
output   an   attacker   could   inject   CSS   commands   causing   the   page   to   execute   them.  
●
%0A{}*{color:red;}///  
As   you   can   see   above   we   injected   CSS   code   to   turn   the   font   red   so   we   now   know   the   
target   is   vulnerable.  
Summary  
Relative   path   overwrite   is   an   older   lesser   known   vulnerability   that   still   impacts   many   
applications.   This   may   be   considered   a   low   severity   finding   but   it  can   still   be   used   to   
perform   web   defacements.   I   normally   don't   hunt   for   this   vulnerability   but   if  I   can't   find   
anything   else   i'll   give   this   one   a   shot,   it  never   hurts   to   try.   
Conclusion  
Now   you   have   a   few   more   tricks   up   your   sleeve.   However,   there   are   plenty   of   other   
techniques   out   there   and   I   would   recommend   learning   additional   vulnerabilities.   The   
more   vulnerabilities   you   know   how   to   exploit   the   better   chances   you   have   of   finding   a   
vulnerability   in   an   application.   
Wrap  Up  
The   first   book   walked   you   through   the   recon   &   findingerprinting   phase   while   this   book   
talked   about   the   beginning   stages   of   the   exploitation   phase.   If   you   have   read   both   you   
might   be   thinking   that   you   are   an   OG   hacker   now   but   that   is   not   the   truth.   At   this   point   in   
the   game   you   would   be   considered   an   upper   level   beginner   or   a   lower   intermediate   
skilled   hacker.   There   is   so   much   more   to   cover!   The   exploitation   phase   is   so   vast   that   it   
will   require   another   book   or   two   before   it  is   fully   finished.   There   are   also   additional   
things   in   the   recon   &   fingerprinting   phase   that   weren't   covered   in   the   first   book   so   there   
will   probably   need   to   be   another   book   continuing   that   phase   as   well.   
With  that   being   said   you   still   deserved   a   pat   on   the   back.   With  the   knowledge   gained   
from  the   first   and   second   book   you   have   a   complete   picture   of   the   recon,   fingerprinting,   
and   exploitation   phase   of   a   hunt.    Although   the   techniques   learned   would   still   be   
considered   relatively   basic   you   can   still   use   them   to   compromise   the   vast   majority   of   
your   targets.   Fortune   500   companies,   start   ups,   and   everything   in   between   it  doesn't   
matter   who   your   target   is   these   techniques   can   be   used   to   compromise   them   all   the   
same.