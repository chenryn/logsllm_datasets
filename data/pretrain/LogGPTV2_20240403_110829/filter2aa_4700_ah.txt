        if (0 ExceptionCode == 0xe06d7363) &&
             (BVar4 = __IsNonwritableInCurrentImage((PBYTE)&PTR_FUN_00417ab4), BVar4 != 0)) {
            pEVar8 = param_1;
            _guard_check_icall();
            FUN_00404e24((int *)pEVar8);
            pvVar6 = local_14;
          }
          FUN_004030e4(param_2,param_1);
          if (*(uint *)((int)param_2 + 0xc) != uVar7) {
            __EH4_LocalUnwind_16((int)param_2,uVar7,pvVar6,&DAT_0041e004);
          }
          *(uint *)((int)param_2 + 0xc) = uVar1;
          _ValidateLocalCookies(local_c);
          __EH4_TransferToHandler_8((undefined *)local_18->ExceptionRecord);
          pcVar2 = (code *)swi(3);
          DVar5 = (*pcVar2)();
          return DVar5;
        }
      }
      uVar7 = uVar1;
    } while (uVar1 != 0xfffffffe);
    if (local_5 == 0) {
      return local_10;
    }
  }
  else {
    if (uVar7 == 0xfffffffe) {
      return local_10;
    }
    __EH4_LocalUnwind_16((int)param_2,0xfffffffe,pvVar6,&DAT_0041e004);
  }
LAB_00402d2d:
  _ValidateLocalCookies(local_c);
  return local_10;
}
// Library Function - Single Match
// Name: ___vcrt_initialize
// Library: Visual Studio 2015 Release
uint ___vcrt_initialize(void)
{
  uint uVar1;
  FUN_004035ad();
  FUN_00403552();
  uVar1 = ___vcrt_initialize_locks();
  if ((char)uVar1 != 0) {
    uVar1 = ___vcrt_initialize_ptd();
    if ((char)uVar1 != 0) {
      return CONCAT31((int3)(uVar1 >> 8),1);
    }
    uVar1 = ___vcrt_uninitialize_locks();
  }
  return uVar1 & 0xffffff00;
}
// Library Function - Single Match
// Name: ___vcrt_uninitialize
// Library: Visual Studio 2015 Release
undefined4 ___vcrt_uninitialize(char param_1)
{
  undefined4 in_EAX;
  if (param_1 == 0) {
    ___vcrt_uninitialize_ptd();
    ___vcrt_uninitialize_locks();
    in_EAX = ___vcrt_uninitialize_winapi_thunks(0);
  }
  return CONCAT31((int3)((uint)in_EAX >> 8),1);
}
// Library Function - Single Match
// Name: ___std_type_info_compare
// Library: Visual Studio 2015 Release
uint __cdecl ___std_type_info_compare(int param_1,int param_2)
{
  byte bVar1;
  byte *pbVar2;
  byte *pbVar3;
  bool bVar4;
  if (param_1 != param_2) {
    pbVar3 = (byte *)(param_2 + 5);
    pbVar2 = (byte *)(param_1 + 5);
    do {
      bVar1 = *pbVar2;
      bVar4 = bVar1 > 1 & 1) != 0) {
        while (param_3 != 0) {
          param_3 = param_3 - 1;
          *(char *)piVar3 = (char)iVar2;
          piVar3 = (int *)((int)piVar3 + 1);
        }
        return param_1;
      }
      piVar3 = param_1;
      if ((DAT_0041e010 >> 1 & 1) == 0) goto joined_r0x00402f5b;
      auVar4 = CONCAT412(iVar2,CONCAT48(iVar2,CONCAT44(iVar2,iVar2)));
      *param_1 = iVar2;
      param_1[1] = iVar2;
      param_1[2] = iVar2;
      param_1[3] = iVar2;
      piVar3 = (int *)((uint)(param_1 + 4) & 0xfffffff0);
      param_3 = (int)param_1 + (param_3 - (int)piVar3);
      if (0x80 > 1 & 1) != 0) {
      auVar4 = CONCAT412(iVar2,CONCAT48(iVar2,CONCAT44(iVar2,iVar2)));
LAB_00402f20:
      if (0x1f < param_3) {
        do {
                    // WARNING: Store size is inaccurate
          *(undefined *)piVar3 = auVar4;
                    // WARNING: Store size is inaccurate
          *(undefined *)(piVar3 + 4) = auVar4;
          piVar3 = piVar3 + 8;
          param_3 = param_3 - 0x20;
        } while (0x1f < param_3);
        if ((param_3 & 0x1f) == 0) {
          return param_1;
        }
      }
      puVar1 = (undefined *)((int)piVar3 + (param_3 - 0x20));
                    // WARNING: Store size is inaccurate
      *(undefined *)puVar1 = auVar4;
                    // WARNING: Store size is inaccurate
      *(undefined *)(puVar1 + 0x10) = auVar4;
      return param_1;
    }
  }
joined_r0x00402f5b:
  while ((param_3 & 3) != 0) {
    *(char *)piVar3 = (char)iVar2;
    param_3 = param_3 - 1;
    piVar3 = (int *)((int)piVar3 + 1);
  }
  if ((param_3 & 4) != 0) {
    *piVar3 = iVar2;
    piVar3 = piVar3 + 1;
    param_3 = param_3 - 4;
  }
  while ((param_3 & 0xfffffff8) != 0) {
    *piVar3 = iVar2;
    piVar3[1] = iVar2;
    piVar3 = piVar3 + 2;
    param_3 = param_3 - 8;
  }
  return param_1;
}
// Library Function - Single Match
// Name: __local_unwind4
// Library: Visual Studio
void __cdecl __local_unwind4(uint *param_1,int param_2,uint param_3)
{
  undefined4 *puVar1;
  uint uVar2;
  undefined4 *in_FS_OFFSET;
  undefined4 uStack40;
  undefined *puStack36;
  uint local_20;
  uint uStack28;
  int iStack24;
  uint *puStack20;
  puStack20 = param_1;
  iStack24 = param_2;
  uStack28 = param_3;
  puStack36 = &LAB_00403040;
  uStack40 = *in_FS_OFFSET;
  local_20 = DAT_0041e004 ^ (uint)&uStack40;
  *(undefined4 **)in_FS_OFFSET = &uStack40;
  while( true ) {
    uVar2 = *(uint *)(param_2 + 0xc);
    if ((uVar2 == 0xfffffffe) || ((param_3 != 0xfffffffe && (uVar2 <= param_3)))) break;
    puVar1 = (undefined4 *)((*(uint *)(param_2 + 8) ^ *param_1) + 0x10 + uVar2 * 0xc);
    *(undefined4 *)(param_2 + 0xc) = *puVar1;
    if (puVar1[1] == 0) {
      __NLG_Notify(0x101);
      FUN_004036fb();
    }
  }
  *in_FS_OFFSET = uStack40;
  return;
}
// Library Function - Single Match
// Name: @_EH4_CallFilterFunc@8
// Library: Visual Studio
void __fastcall __EH4_CallFilterFunc_8(undefined *param_1)
{
  (*(code *)param_1)();
  return;
}
// Library Function - Single Match
// Name: @_EH4_TransferToHandler@8
// Library: Visual Studio
void __fastcall __EH4_TransferToHandler_8(undefined *param_1)
{
  __NLG_Notify(1);
                    // WARNING: Could not recover jumptable at 0x004030df. Too many branches
                    // WARNING: Treating indirect jump as call
  (*(code *)param_1)();
  return;
}
void __fastcall FUN_004030e4(PVOID param_1,PEXCEPTION_RECORD param_2)
{
  RtlUnwind(param_1,(PVOID)0x4030f9,param_2,(PVOID)0x0);
  return;
}
// Library Function - Single Match
// Name: @_EH4_LocalUnwind@16
// Library: Visual Studio
void __fastcall __EH4_LocalUnwind_16(int param_1,uint param_2,undefined4 param_3,uint *param_4)
{
  __local_unwind4(param_4,param_1,param_2);
  return;
}
// WARNING: Removing unreachable block (ram,0x00403126)
// WARNING: Removing unreachable block (ram,0x0040313b)
// WARNING: Removing unreachable block (ram,0x00403140)
void __cdecl FUN_00403117(int param_1)
{
  return;
}
// WARNING: Removing unreachable block (ram,0x00403156)
// WARNING: Removing unreachable block (ram,0x00403168)
// WARNING: Removing unreachable block (ram,0x0040316d)
void __cdecl FUN_00403147(int param_1)
{
  return;
}
void FUN_00403174(undefined *param_1)
{
  if ((param_1 != (undefined *)0x0) && (param_1 != &DAT_0041ec7c)) {
    free(param_1);
  }
  return;
}
// Library Function - Single Match
// Name: ___vcrt_getptd
// Library: Visual Studio 2015 Release
void ___vcrt_getptd(void)
{
  code *pcVar1;
  void *pvVar2;
  int iVar3;
  BOOL BVar4;
  pvVar2 = ___vcrt_getptd_noexit();
  if (pvVar2 != (void *)0x0) {
    return;
  }
  iVar3 = FUN_0040f2dd();
  if (iVar3 != 0) {
    FUN_0040f32d(0x16);
  }
  if ((DAT_0041e0f0 & 2) != 0) {
    BVar4 = IsProcessorFeaturePresent(0x17);
    if (BVar4 != 0) {
      pcVar1 = (code *)swi(0x29);
      (*pcVar1)();
      return;
    }
    ___acrt_call_reportfault(3,0x40000015,1);
  }
  FUN_004097d4(3);
  pcVar1 = (code *)swi(3);
  (*pcVar1)();
  return;
}
// Library Function - Single Match
// Name: ___vcrt_getptd_noexit
// Library: Visual Studio 2015 Release
void * ___vcrt_getptd_noexit(void)
{
  DWORD dwErrCode;
  int iVar1;
  void *pvVar2;
  void *pvVar3;
  void *pvVar4;
  if (DAT_0041e020 == 0xffffffff) {
    return (void *)0x0;
  }
  dwErrCode = GetLastError();
  pvVar3 = (void *)FUN_00403492(DAT_0041e020);
  if (pvVar3 == (void *)0xffffffff) {
LAB_004031de:
    pvVar3 = (void *)0x0;
    goto LAB_00403224;
  }
  if (pvVar3 != (void *)0x0) goto LAB_00403224;
  iVar1 = FUN_004034cd(DAT_0041e020,(LPVOID)0xffffffff);
  if (iVar1 == 0) goto LAB_004031de;
  pvVar2 = _calloc(1,0x28);
  if (pvVar2 == (void *)0x0) {
LAB_00403206:
    FUN_004034cd(DAT_0041e020,(LPVOID)0x0);
    pvVar3 = (void *)0x0;
    pvVar4 = pvVar2;
  }
  else {
    iVar1 = FUN_004034cd(DAT_0041e020,pvVar2);
    if (iVar1 == 0) goto LAB_00403206;
    pvVar4 = (void *)0x0;
    pvVar3 = pvVar2;
  }
  free(pvVar4);
LAB_00403224:
  SetLastError(dwErrCode);