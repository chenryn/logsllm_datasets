    Python>    if tags['rtf-parameter'] in match:
    Python>        print hex(ea), sw.handler(ea)
    Python>        for i in sw.handler(ea):
    Python>            cases.append((i, func.name(tags['rtf-parameter'])))
    Python>        continue
    Python>    continue
    Python>
    Python>len(cases)
    116
让我们从这个列表中取出一些随机样本，看看它们指向的标记，并识别出处理标记的首个函数调用。 从一些随机样本中我们发现大量的样本被称为“sub_431A20”。
我们认为这个函数似乎被用来处理一个可以包含连字符的数字。
在IDAPython命令行执行以下操作时，我们可以看到案例246,100和183调用此函数并表示以下标记。
    Python>cases[246]
    (246, 'sub_431A20')
    Python>cases[100]
    (100, 'sub_431A20')
    Python>cases[183]
    (183, 'sub_431A20')
    Python>
    Python>tokens[246], tokens[100], tokens[183]
    ('margt', 'colsx', 'highlight')
如果我们参考RTF文件格式的文档，我们可以发现这些标记（'\ margt'，'\ colsx'和'\ highlight'）将数字作为其参数。
我们可以肯定地假设“sub_431A20”负责处理RTF令牌之后的数字参数。
现在让我们对其进行标记，这样我们就可以查看另一个函数并确定它可能采用的参数类型。
    Python>func.tag(0x431a20, 'synopsis', 'parses a numerical parameter belonging to an rtf token')
让我们将上面的“案例”列表中剩下的内容进行转储，这样我们就可以快速了解我们还没有进行研究的功能。
这其中包含token名称，以便我们可以快速引用文件格式规范以确定它可能采用的参数类型。
    Python>for i, name in cases:
    Python>    if name != 'sub_431A20':
    Python>        print i, tokens[i], name
    Python>    continue
    27 b sub_587618
    63 caps sub_587618
    105 contextualspace sub_431A78
    114 deleted sub_431A78
    123 embo sub_587618
    186 hyphauto sub_431A78
    187 hyphcaps sub_431A78
    190 hyphpar sub_431A78
    191 i sub_587618
    193 impr sub_587618
    232 listsimple sub_431A78
    270 outl sub_587618
    346 scaps sub_587618
    363 shad sub_587618
    373 strike sub_587618
    423 u sub_5871C0
    426 ul sub_431A78
查看“\ b”，“\ caps”和“\ i”标记的文档后，我们发现这些标记可以使用可选的“0”作为参数用以关闭它们。
因此我们可以假设“sub_587618”是用于切换这些token参数的函数。 我们也标记这个功能。
    Python>func.tag(0x587618, 'synopsis', 'parses an rtf parameter that can be toggled with "0"')
我们发出的列表中“\ hyphauto”，“\ hyphcaps”和“\ hyphpar”显现出来。 这些标记采用单个数字参数，即“1”或“0”来切换它。
这也是一个切换，但此参数是必需的。 让我们用我们新发现的知识来标记这一点。
    Python>func.tag(0x431a78, 'synopsis','parses an rtf parameter that can be toggled with "0" or "1"')
现在我们已经确定了许多函数的语义。我们已经快速确定了Atlantis支持哪些token，并且可以使用此信息进行模糊特定目标。
## 关闭处理
Delphi 2009中引入了一种称为“匿名方法”的新功能。 此功能引入了对Delphi编程语言中闭包的支持。 闭包将捕获包含块的局部变量。
这允许闭包内的代码能够修改不同的函数的变量。  
如图8所示，在Delphi生成的程序集中，`％ebp`寄存器中的帧指针作为参数传递给函数。
这样函数就可以取消引用指针并使用它来计算被引用的帧的局部变量地址。  
这对于逆向工程师来说难度很大，因为在某些情况下局部变量通常在不同的函数中进行初始化。
要使用调试器跟踪此情况，逆向工程师可能会尝试确定变量的范围，然后使用硬件断点来标识它的第一个函数。
然而如果想要静态地去处理，这将会成为一个需要我们克服的难题。
这些局部变量的用法类似于以下代码。 在[16]中，帧从参数中提取并存储在`％eax`寄存器中。
这在[17]和[18]方法中重复多次以便取消引用每个调用者的帧指针的堆栈。 最后我们使用[19]，用以获取所确定的帧的局部变量。
在Atlantis应用中，这种类型的构造是非常常见的。但其也可能难以被用户管理。
    CODE:0058BED8 018 8B 55 FC                          mov     edx, [ebp+var_4]
    CODE:0058BEDB 018 8B 45 08                          mov     eax, [ebp+arg_0]    ; [16]
    CODE:0058BEDE 018 8B 40 08                          mov     eax, [eax+8]        ; [17]
    CODE:0058BEE1 018 8B 40 08                          mov     eax, [eax+8]        ; [18]
    CODE:0058BEE4 018 8B 40 E8                          mov     eax, [eax-18h]      ; [19]
    CODE:0058BEE7 018 8B 88 64 05 00 00                 mov     ecx, [eax+564h]
    CODE:0058BEED 018 8B 45 08                          mov     eax, [ebp+arg_0]
    CODE:0058BEF0 018 8B 40 08                          mov     eax, [eax+8]
    CODE:0058BEF3 018 8B 40 08                          mov     eax, [eax+8]
    CODE:0058BEF6 018 8B 40 E8                          mov     eax, [eax-18h]
    CODE:0058BEF9 018 E8 12 39 07 00                    call    sub_5FF810
    CODE:0058BEFE 018 84 C0                             test    al, al
    CODE:0058BF00 018 75 0C                             jnz     short loc_58BF0E
但是在使用IDA-minsc时，我们可以在参数中标记用于存储其调用者帧的函数，以及每个帧所属的函数地址。 这样我们就可以识别类似于[19]引用的指令的框架。
为此，我们将使用两个标记名称。 其中“frame-avar”用于存储包含调用者帧的参数名称，以及“frame-lvars”用于存储引用帧所属的函数地址。
我们可以参考图8，在地址0x590a32处，函数“sub_590728”将其帧作为参数传递给位于地址0x590a33处的调用指令。
我们可以通过双击它进入这个函数调用，之后IDA将定位到名为“sub_58BE98”的函数的最顶层。 此函数只有一个调用者，如果我们查看其引用（Ctrl +
X）它将列出我们刚刚定位的地址。 知道这一点后，我们可以用它的调用方法的地址标记这个函数。
    Python>callers = func.up()
    Python>caller = callers[0]
    Python>func.tag('frame-lvars', caller)
为了更容易识别参数，让我们使用“堆栈变量重命名”对话框将参数命名为“ap_frame_0”。 这可以通过选择“arg_0”然后点击“n”字符来完成此工作。
将变量重命名为“arg_0”后， 我们将再次使用标记将参数名称存储为“frame-avar”。 如果之后我们希望查找框参数，我们可以使用“frame-avar”标签来提取它。
    Python>func.tag('frame-avar', 'ap_frame_0')
执行此操作后，该函数将如下图所示。 我们现在可以遍历“ap_frame_0”参数变量的任何引用，然后使用“frame-lvars”标记中的值标记它们。
    CODE:0058BE98                       ; [frame-avar] ap_frame_0
    CODE:0058BE98                       ; [frame-lvars] 0x590a33
    CODE:0058BE98                       ; Attributes: bp-based frame
    CODE:0058BE98
    CODE:0058BE98                       sub_58BE98      proc near
    CODE:0058BE98
    CODE:0058BE98                       var_4           = dword ptr -4
    CODE:0058BE98                       ap_frame_0      = dword ptr  8
    CODE:0058BE98
为此我们将使用`function.frame（）`函数提取框架结构。 完成此操作后，我们可以获取表示“ap_frame_0”变量的成员。
然后，可以使用此结构成员枚举当前函数中对它的所有引用。
    Python>f = func.frame()
    Python>f.members
    [0] -4:+0x4 'var_4'      (, 4) 
    [1]  0:+0x4 ' s'         [(, 1), 4] 
    [2]  4:+0x4 ' r'         [(, 1), 4] 
    [3]  8:+0x4 'ap_frame_0' (, 4)
我们可以使用其索引或其名称来获得该成员变量。 在这种情况下，我们可以按名称引用它。
一旦获取了成员，我们就可以继续调用它的`refs（）`方法来遍历函数中对成员的所有引用。
    Python>m = f.by('ap_frame_0')
    Python>len(m.refs())
    8