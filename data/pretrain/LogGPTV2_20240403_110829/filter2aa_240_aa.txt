# Porosity: Decompiling Ethereum Smart Contracts

## Speaker
- **Name:** Matt Suiche
- **Role:** Founder, Comae Technologies
- **Contact:** @msuiche
- **Website:** OPCDE - [www.opcde.com](http://www.opcde.com)

## About the Speaker
- First visit to Las Vegas since BlackHat 2011.
- Background in Windows-related technologies and memory forensics (e.g., Hibr2Bin, DumpIt).
- Known for work on CloudVolumes (now VMware App Volumes).
- Quoted by TheShadowBrokers: "looks like such a fun guy."
- Relatively new to blockchain technology prior to this project.

## What We Will Cover
- **Ethereum Virtual Machine (EVM)**
- **Solidity**
- **Smart Contract Bytecodes**
- **Porosity (Comae's smart contract decompiler)**

### Exclusions
- Proof of Work (PoW) / Proof of Stake (PoS) mechanisms
- Merkle Trees
- Strategies for becoming a cryptocurrency millionaire

## Agenda
1. **Ethereum Virtual Machine (EVM)**
   - Memory Management
   - Addresses
   - Call Types
   - Type Discovery
2. **Smart Contracts**
   - Code Analysis
   - Known Bugs
3. **Future Directions**

## Solidity
- **Definition:** A high-level programming language designed for writing smart contracts on Ethereum.
- **Compiler:** Converts JavaScript-like code into Ethereum bytecode.
- **Porosity:** A decompiler developed by Comae Technologies, named after the quality of being porous (full of tiny holes).

## Accounts
- **Normal Accounts:** 3,488,419 (as of July 15)
- **Contract Accounts:** 930,889 (as of July 15)
- **Verified Contract Accounts:** 2,285 (as of July 15)
- **Source Code Availability:** Provided for verified accounts.
- **Recent Incidents:**
  - **July 2017:**
    - $40M lost in total.
    - $10M in CoinDash’s Initial Coin Offering (ICO) hack: [CoinDesk Article](http://www.coindesk.com/coindash-ico-hacker-nets-additional-ether-theft-tops-10-million/)
    - $30M due to Parity’s wallet.sol vulnerability: [Parity Blog](https://blog.parity.io/security-alert-high-2/), [GitHub Fix](https://github.com/paritytech/parity/pull/6103)

## Ethereum Virtual Machine (EVM)
- **Account/Contract/Blockchain:**
  - A smart contract is bytecode stored on the blockchain.
  - An address is a 160-bit value corresponding to an "account."
  - Operates with 256-bit pseudo-registers.
  - EVM uses a virtual stack instead of traditional registers.

## Solidity & Smart Contracts
- **Compilation:**
  - Solidity compiles JavaScript-like code into Ethereum bytecode.
  - Example:
    ```solidity
    contract Coin {
        // Public variables
        address public minter;
        mapping (address => uint) public balances;

        // Event for efficient light client updates
        event Sent(address from, address to, uint amount);

        // Constructor
        function Coin() {
            minter = msg.sender;
        }

        // Minting function
        function mint(address receiver, uint amount) {
            if (msg.sender != minter) return;
            balances[receiver] += amount;
        }

        // Transfer function
        function send(address receiver, uint amount) {
            if (balances[msg.sender] < amount) return;
            balances[msg.sender] -= amount;
            balances[receiver] += amount;
            emit Sent(msg.sender, receiver, amount);
        }
    }
    ```

## Extracting Function Hashes
- **Example:**
  - `double(uint256)` -> `0xeee97206`
  - `triple(uint256)` -> `0xf40a049d`
  - **Extracting:**
    - `calldataload(0x0) / exp(0x2, 0xe0)`
    - `(0x12345678xxxx / 0x00000001xxxx) = 0x12345678`
    - `jumpi(eq(calldataload(0x0) / exp(0x2, 0xe0), 0xeee97206))`

## Debugging with Geth
- **Command:**
  ```powershell
  PS C:\Program Files\Geth> .\evm.exe --code 60e060020a60003504 --debug --input 12345678aaaaaaaabbbbbbbbccccccccdddddddd
  ```
- **Output:**
  - `PC 00000009: STOP GAS: 9999999923 COST: 0`
  - `STACK = 1`
  - `0000: 0000000000000000000000000000000000000000000000000000000012345678`
  - `MEM = 0`

This presentation will provide an in-depth look at the Ethereum Virtual Machine, Solidity, and the process of decompiling smart contracts using Porosity.