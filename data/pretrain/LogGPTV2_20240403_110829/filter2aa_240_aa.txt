Porosity
Decompiling Ethereum Smart-Contracts
Matt Suiche (@msuiche)
Founder, Comae Technologies
PI:EMAIL
Whoami
 @msuiche
 Comae Technologies 
 OPCDE - www.opcde.com 
 First time in Vegas since BlackHat 2011
 Mainly Windows-related stuff
 CloudVolumes (VMware App Volumes)
 Memory Forensics for DFIR (Hibr2Bin, DumpIt etc.)
 “looks like such fun guy” – TheShadowBrokers
 Didn’t know much about blockchain before this project
Just so you know…
 We won’t talk about POW/POS stuff
 We won’t talk about Merkle Trees
 We won’t talk about how to becoming a crypto-currency millionaire
 We will talk about the Ethereum EVM
 We will talk about Solidity
 We will talk about smart-contract bytecodes
 And yes, the tool isn’t perfect ☺
Agenda
 Ethereum Virtual Machine (EVM)
 Memory Management
 Addresses
 Call Types
 Type Discovery
 Smart-Contract
 Code Analysis
 Known Bugs
 Future
Solidity
 Solidity the quality or state of being firm or strong in 
structure.
 But also the name of Ethereum’s smart-contracts compiler
 Porosity is the quality of being porous, or full of tiny holes. 
Liquids go right through things that have porosity. 
 But also the name of Comae’s smart-contract decompiler.
Accounts
 Normal Accounts: 3,488,419 (July 15)
 Contract Accounts: 930,889 (July 15)
 Verified Contract Accounts: 2285 (July 15)
 Source code is provided.
 40M$ lost in July 
 10M$ in CoinDash’s ICO
 http://www.coindesk.com/coindash-ico-hacker-nets-additional-
ether-theft-tops-10-million/
 30M$ due to Parity’s wallet.sol vulnerability
 https://blog.parity.io/security-alert-high-2/
 https://github.com/paritytech/parity/pull/6103
Ethereum Virtual Machine (EVM)
 Account/Contract/Blockchain
 A Smart-Contract is made of bytecode stored in the blockchain.
 An address is a 160-bits value & corresponds to an “account”
 Operates 256-bits pseudo-registers
 EVM does not really have registers, but uses a virtual stack to replace them.
Solidity & “Smart Contracts”
 Solidity compiles JavaScript-like code into Ethereum bytecode.
contract Coin {
// The keyword "public" makes those variables
// readable from outside.
address public minter;
mapping (address => uint) public balances;
// Events allow light clients to react on
// changes efficiently.
event Sent(address from, address to, uint amount);
// This is the constructor whose code is
// run only when the contract is created.
function Coin() {
minter = msg.sender;
}
function mint(address receiver, uint amount) {
if (msg.sender != minter) return;
balances[receiver] += amount;
}
function send(address receiver, uint amount) {
if (balances[msg.sender] 
eee972066698d890c32fec0edb38a360c32b71d0a29ffc75b6ab6d2774ec9901
double(uint256) -> 0xeee97206
triple(uint256) -> 0xf40a049d
Extracting function hash
 calldataload(0x0) / exp(0x2, 0xe0)
 (0x12345678xxxx / 0x00000001xxxx) = 0x12345678
 jumpi(eq(calldataload(0x0) / exp(0x2, 0xe0), 0xeee97206))
PS C:\Program Files\Geth> .\evm.exe \
--code 60e060020a60003504 \
--debug \
--input 12345678aaaaaaaabbbbbbbbccccccccdddddddd
PC 00000009: STOP GAS: 9999999923 COST: 0
STACK = 1
0000: 0000000000000000000000000000000000000000000000000000000012345678
MEM = 0