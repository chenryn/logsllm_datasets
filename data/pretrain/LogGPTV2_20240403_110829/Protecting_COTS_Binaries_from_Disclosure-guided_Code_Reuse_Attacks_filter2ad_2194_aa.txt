title:Protecting COTS Binaries from Disclosure-guided Code Reuse Attacks
author:Mingwei Zhang and
Michalis Polychronakis and
R. Sekar
Protecting COTS Binaries from
Disclosure-guided Code Reuse Attacks∗
Mingwei Zhang
Intel Labs
Hillsboro, OR, USA
PI:EMAIL
Michalis Polychronakis
Stony Brook University
Stony Brook, NY, USA
PI:EMAIL
R. Sekar
Stony Brook University
Stony Brook, NY, USA
PI:EMAIL
ABSTRACT
Code diversification, combined with execute-only memory, pro-
vides an effective defense against just-in-time code reuse attacks.
However, existing techniques for combining code diversification
and hardware-assisted memory protections typically require com-
piler support, as well as the deployment or modification of a hy-
pervisor. These requirements often cannot be met, either because
source code is not available, or because the required hardware fea-
tures may not be available on the target system. In this paper we
present SECRET, a software hardening technique tailored to legacy
and closed-source software that provides equivalent protection to
execute-only memory without relying on hardware features or re-
compilation. This is achieved using two novel techniques, code space
isolation and code pointer remapping, which prevent read accesses to
the executable memory of the protected code. Furthermore, SECRET
thwarts code pointer harvesting attacks on ELF files by remapping
existing code pointers to use random values. SECRET has been
implemented on 32-bit Linux systems. Our evaluation shows that
it introduces just 2% additional runtime overhead on top of a state-
of-the-art CFI implementation, bringing the total average overhead
to about 16%. In addition, it achieves better protection coverage
compared to compiler-based techniques, as it can handle low-level
machine code such as inline assembly or extra code introduced by
the linker and loader.
1 INTRODUCTION
The deployment of non-executable memory protections in oper-
ating systems prompted a shift of attacks from code injection
to code reuse, and in particular, return-oriented programming
(ROP) [28, 38, 61]. After hijacking control flow, ROP attacks di-
vert execution to code snippets (“gadgets”) that already exist in
the vulnerable process. One of the key requirements for ROP at-
tacks is the knowledge of the memory locations of gadgets. Recent
research [12, 64] has demonstrated that this requirement can be
eliminated by exploiting a memory leakage vulnerability to harvest
code pointers and disclose code memory on-the-fly. Armed with
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-5345-8/17/12...$15.00
https://doi.org/10.1145/3134600.3134634
this knowledge, gadget chains can be constructed dynamically by
malicious script code at the time of exploitation.
In the face of such “just-in-time” ROP (JIT-ROP) attacks, tra-
ditional code randomization defenses [10, 27, 35, 49, 72] do not
offer any meaningful defense. As a response, recent proposals [6,
13, 17, 20, 32, 51, 66, 74] introduce a new security primitive that
enforces diversified code pages to be executable but not readable.
Such an execute-only policy can be implemented using page table
manipulation [6], split TLBs [32], hardware virtualization exten-
sions [20, 66, 74], or a form of software-fault isolation [13, 51].
A common characteristic of many of these approaches [13, 20, 32,
51] is that they rely on the recompilation of the target application,
which is inconvenient at best, and impossible at worst (for code
available only in binary form). As a result, they cannot be applied
if source code is unavailable. In fact, even open-source software is
typically distributed in a binary form, e.g., through package man-
agement systems such as apt. It is inconvenient for users to have
to obtain all the necessary source code and recompile packages.
Moreover, source-code based approaches are incomplete in that
they do not protect low-level code written using inline assembly,
or binary code that is automatically added by compilers and link-
ers. In contrast, techniques operating at the binary level can work
seamlessly with the prevalent model of binary distributions, while
protecting all code (including low-level code) that can potentially
be used by an attacker.
A second limiting factor of many execute-only protections [17,
20, 32, 66, 74] is that they rely on hardware features that may not
always be available on a given system. For instance, HideM [32]
requires split TLB support, and is thus not applicable on current
systems that use a shared code and data TLB. More recent pro-
posals [20, 66, 74], on the other hand, rely on the extended page
table (EPT) feature introduced in Intel VT-x, which allows setting
code pages to be executable but not readable. Enabling this primi-
tive requires support by both a thin hypervisor as well as the OS
kernel. For already virtualized systems (e.g., cloud or enterprise
environments) this will entail either nested virtualization, which
may incur a significant runtime overhead [8] without architecture
support, or the incorporation into existing hypervisors, affecting
their performance and increasing the trusted computing base. For
end-user or legacy systems, besides the fact that the deployment
of new hypervisors and modified OS kernels is challenging, the re-
quired hardware support might not be available at all. For instance,
NORAX [17] is applicable only on the AArch64 platform.
∗This work was supported in part by grants from ONR (N00014-15-1-2378 and N00014-
17-1-2891) and NSF (CNS-1319137).
Overview of Approach and Summary of
Contributions
In this paper we present SECRET, a protection against JIT-ROP at-
tacks that is fully compatible with COTS binaries. SECRET enforces
a policy equivalent to execute-only memory, with no reliance on
any specific hardware features or any modifications to the virtu-
alization setup. This achieved by enforcing a “What You Target Is
Not What You eXecute (WYTINWYX)” property. This property is
useful in thwarting attacks based on code-pointer harvesting: even
if attackers find valid code pointers in memory, it is not possible to
determine the code they point to. This not only applies to normal
code pointers, but also to pointers that arise during exceptions. SE-
CRET is based on static binary instrumentation, and is implemented
over the PSI platform [78] (originated from BinCFI [79]).
The WYTINWYX property enforced by SECRET stems from two
key techniques: code space isolation (CSI), and code pointer remap-
ping (CPR). Code space isolation thwarts JIT-ROP attacks by (a)
hiding the executing code in a large address space, turning it into
shadow code, and (b) ensuring the absence of any pointers to it.
Since static binary instrumentation systems such as BinCFI [79]
and Reins [73] maintain the original code in addition to the instru-
mented version that is executed, JIT-ROP attacks could still work
by reading the original code. We therefore present static analysis
techniques to identify any embedded data and wipe out the rest
of the original code. To break an attacker’s ability to inject valid
code pointers, code pointer remapping maps pointers to random
values over a large range. This requires accurate identification of
code pointers—a challenging problem for COTS binaries. SECRET
leverages (when available) the DWARF and RTTI metadata typi-
cally contained in binary executables to accurately identify code
pointers, and applies CPR to a wide range of pointers: return ad-
dresses (RAs), jump table pointers, and exported functions. Note
that the vast majority of usable gadgets left unprotected by control
flow integrity (CFI) approaches lacking a shadow stack correspond
to RAs—there is very loose protection for such “call site gadgets” in
coarse-grained CFI implementations, whereas SECRET constrains
them effectively. Return address protections (e.g., shadow stacks)
pose a significant compatibility challenge due to non-standard use
cases [23]. CPR exploits the capabilities of address translation in a
novel way to sidestep these challenges.
Completeness and ease of deployment are two key benefits of the
proposed technique. By working directly at the binary level, SE-
CRET achieves complete program instrumentation even for stripped
executables and shared libraries, without the need for any recom-
pilation which would complicate deployment. SECRET is applied
to all code within a process, including low-level modules such as
the dynamic loader (ld.so), system libraries (e.g., libc.so), and
vDSO. In contrast, existing compiler-based execute-only memory
protections leave out a significant amount of low-level code, such
as hand-coded assembly, or code automatically added by linkers
and loaders. Indicatively, glibc contains 56 KLoC of assembly code,
excluding inline assembly. Additionally, compiler-based solutions
cannot protect third-party libraries compiled using a different com-
piler. Systems like Readactor [20] also face compatibility problems
with signals and C++ exceptions due to potential leakage of code
pointers when they are stored in readable memory. By ensuring that
no original code pointer points to shadow code, SECRET ensures
that pointers cannot be leaked in such cases.
In summary, our work makes the following main contributions:
• We present two complementary static analysis techniques for
the separation and protection of code against JIT-ROP attacks
that rely on direct or indirect code disclosure. Code space isola-
tion prevents direct code disclosure by moving code sections at
random locations determined at load-time. Code pointer remap-
ping thwarts indirect code disclosure through harvesting point-
ers from memory by replacing code pointers with randomized
values scattered across a large address space.
• We have designed and implemented SECRET, a static binary
instrumentation tool built on top of the PSI platform [78] that
relies on CSI and CPR to protect COTS binaries on Linux.
• We experimentally evaluate SECRET and demonstrate its practi-
cality. Our results show that SECRET protects all code, including
low-level code that is available only in assembly or machine
code format, while introducing a modest 2% additional runtime
overhead over the base cost of PSI [78]. The total overhead,
including CFI enforcement, is about 16%.
2 BACKGROUND
Static binary instrumentation (SBI) techniques instrument whole
binaries prior to execution, while dynamic binary instrumentation
(DBI) techniques perform instrumentation at runtime. DBI systems
have tended to be more robust and provide better compatibility for
complex code, but suffered from high performance overheads. SBI
techniques significantly reduce these overheads, but have tended
to be less robust on complex and/or low-level code. The primary
goal of our earlier BinCFI [79] and PSI [2, 78] works was to address
these robustness issues for large and complex binaries. In particular,
we will summarize two features we use in this regard: (i) the use of
two code versions, and (ii) address translation. This will be followed
by a discussion of BinCFI’s limitations against disclosure-guided
code reuse attacks, which motivate the techniques developed in
this paper.
Two code versions. Since data may be interspersed with code, it is
not safe to overwrite original code, as this may result in overwriting
of embedded data as well. Hence, many SBI systems leave the
original code in place, and create a second instrumented copy that
gets executed. The original code version is made non-executable,
while the second (instrumented) code version is executable.
Since code pointer values may be stored anywhere in the data
or code segments, it is not feasible to identify all such pointers
with 100% accuracy. For this reason, BinCFI does not attempt to
identify or modify these pointers, so all code pointers will continue
to point to addresses within the original code. This approach, used
previously in DBI systems, makes instrumentation transparent,
and hence provides better backward compatibility. It works with
applications that may use code pointer values for purposes such as
C++ exception handling, computing the location of static variables,
or to read their own code. Such code will examine the original
code version, and hence avoid any confusion that may result from
instructions introduced during instrumentation.
Address translation. As described above, code pointers continue
to target the original code. This means that indirect control transfers
need special treatment, or else they will jump to the original (now
non-executable) code. To avoid this, BinCFI uses address translation,
a technique originally developed in DBI systems. In particular, code
pointer values are translated just before their use in indirect control
transfers, so that they will now point to the corresponding locations
within the instrumented code version. This process, called address
translation, relies on a hash table lookup at runtime.
BinCFI uses address translation not only to fix-up code addresses,
but also to enforce CFI. In particular, control transfer instructions
are grouped into classes such that all instructions in a class share
the same set of valid targets. A separate address translation table is
used for each class, and this table limits translations to only those
targets that are valid for the class.
For modularity, each address translation table is divided into a
global translation table (GTT), and a per-module (i.e., per binary file)
local translation table (LTT). The GTT is populated by a modified
loader, and it maps the most significant bits of an original code
address to the corresponding module. The LTT of the module is
then used to obtain the target address within that module.
BinCFI limitations against code disclosure-based attacks. Al-
though BinCFI employs coarse-grained CFI that limits the available
ROP gadgets, previous research [25, 33] has shown that a suffi-
cient number of usable gadgets remain, and these can be used to
achieve arbitrary code execution. Moreover, usable gadgets remain
unchanged between the original and the instrumented versions of
the code. Indeed, by reading the contents of GTT and LTT, an at-
tacker can access the instrumented code version as well. As a result,
even an attacker that doesn’t know the original code can perform
a JIT-ROP attack by reading the uninstrumented code version. The
techniques described in this paper are hence necessary to thwart
such disclosure-guided code reuse attacks.
One way to improve BinCFI is to remove gadgets available to
attackers. However, this is not feasible since those are valid indirect
targets that may be used by legitimate control flows. While fine-
grained CFI approaches would reduce the average number of such
gadgets available in each context, attackers may still find the “right”
context where there are sufficient gadgets available, since they
could read code. In fact, it is very likely that such code locations
exist (e.g., code dispatchers) despite the use of fine-grained CFI.
We therefore develop an alternative approach in this paper that
relies on hiding code and hiding code pointers. This is a two-step
approach: we hide the real executable code and remove the original
code away. We then randomize code pointer values.
Benefits and challenges of our approach. An obvious benefit of
hiding code is that it prevents gadget discovery by scanning code.
In addition, by randomizing stored code pointer values, we break
the attackers ability to reason about relative distances between
pointers. For instance, they cannot read a return address from the
stack, and then use it to target a gadget that occurs at a specific
offset preceding (or following) it. Note that the use of randomized
code pointers entails no new overhead: address translation needs
to be performed any way, and it takes no extra effort to translate a
randomized pointer, as compared to the original code pointer.
While there are many benefits to code hiding and randomizing
stored code pointers, these techniques pose several new challenges
as well. Hiding requires removal of the original code. This requires
more accurate static analysis than the techniques used in BinCFI.
Otherwise, any removal of embedded data would cause the program
to crash, or function incorrectly. Code hiding also requires a dy-
namic code relocation, or else attackers will be able to identify the
location of new code by simply adding a fixed offset to the base of
the original (uninstrumented) code location. This too is unavailable
in BinCFI, since the instrumented code is always appended just
behind original binary.
Randomizing code pointer values is even more challenging, since
it requires static identification and modification of code pointers.
Static code pointer identification is known to be a very difficult
problem on stripped binaries. Nevertheless, we have been able
to develop techniques that can identify and randomize the vast
majority of such pointers. We describe our approach in more detail
in the following section.
3 SYSTEM DESIGN
Just-in-time ROP attacks rely on reading the code memory of an ex-
ecuting process to assemble gadgets on the fly. Such attacks may be
used to bypass code diversification [24, 64], or to achieve reliability
for frequently updated software [1, 5, 37]. SECRET thwarts such
attacks using code space isolation (CSI) and code pointer remapping
(CPR), two novel techniques that realize an execute-but-no-read
capability using only binary instrumentation (and no hardware or
VMM support).
Recall that static binary instrumentation systems such as BinCFI
[79] and Reins [73] maintain two copies of code: (i) the original
code, which is readable but not executable, and (ii) the instrumented
code, which is readable and executable. Hence, JIT-ROP attacks may
operate by reading either of these copies. CSI precludes reads of
original code by clearing it out. This is enabled by a static analysis
approach we describe in Section 3.1.
We obviously cannot clear out the instrumented code, so we need
alternative approaches to thwart attempts to read this code version.
In the absence of any hardware or VMM features to prevent reads of
code segments, there are three basic approaches an attacker could
follow. The simplest approach is to find the base address of the
code section(s) and scan them. CSI prevents this by locating instru-
mented code sections at random locations determined at load-time,