title:A Secure and Formally Verified Linux KVM Hypervisor
author:Shih-Wei Li and
Xupeng Li and
Ronghui Gu and
Jason Nieh and
John Zhuang Hui
2021 IEEE Symposium on Security and Privacy
A Secure and Formally Verified Linux KVM Hypervisor
Shih-Wei Li, Xupeng Li, Ronghui Gu, Jason Nieh, John Zhuang Hui
{shihwei,xupeng.li,rgu,nieh,j-hui}@cs.columbia.edu
Department of Computer Science
Columbia University
Abstract—Commodity hypervisors are widely deployed to support
virtual machines (VMs) on multiprocessor hardware. Their growing
complexity poses a security risk. To enable formal verification over
such a large codebase, we introduce microverification, a new approach
that decomposes a commodity hypervisor into a small core and a
set of untrusted services so that we can prove security properties of
the entire hypervisor by verifying the core alone. To verify the multi-
processor hypervisor core, we introduce security-preserving layers to
modularize the proof without hiding information leakage so we can
prove each layer of the implementation refines its specification, and
the top layer specification is refined by all layers of the core implemen-
tation. To verify commodity hypervisor features that require dynam-
ically changing information flow, we introduce data oracles to mask
intentional information flow. We can then prove noninterference at the
top layer specification and guarantee the resulting security properties
hold for the entire hypervisor implementation. Using microverifica-
tion, we retrofitted the Linux KVM hypervisor with only modest mod-
ifications to its codebase. Using Coq, we proved that the hypervisor
protects the confidentiality and integrity of VM data, while retaining
KVM’s functionality and performance. Our work is the first machine-
checked security proof for a commodity multiprocessor hypervisor.
I. INTRODUCTION
Cloud computing has enabled increasing numbers of companies
and users to move their data and computation off-site into virtual
machines (VMs) running on hosts in the cloud. Cloud computing
providers deploy commodity hypervisors [1], [2] to support these
VMs on multiprocessor hardware. The security of a VM’s data
hinges on the correctness and trustworthiness of the hypervisor.
However, modern hypervisors are huge, complex, and imperfect
pieces of software, often integrated with an entire operating
system (OS) kernel. Attackers that successfully exploit hypervisor
vulnerabilities may gain unfettered access to VM data in CPU
registers, memory, I/O data, and boot images, and compromise the
confidentiality and integrity of VMs—an undesirable outcome for
both cloud providers and users [3].
Theoretically, formal verification offers a solution to this
problem, by proving that the hypervisor protects VM data under
all circumstances. However, this approach is largely intractable for
commodity hypervisors—existing systems verification research has
yet to demonstrate how one might feasibly reason about the security
properties of full-featured, multiprocessor hypervisors. Most
verified systems are specifically designed to be verified, meaning
they lack basic features and are far simpler than their commodity
counterparts. This suggests that the proof effort potentially required
to fully verify a commodity system is far beyond feasible. It
took seL4 [4] ten person-years to verify 9K lines of code (LOC),
and CertiKOS [5] three person-years to verify 6.5K LOC. For
comparison, KVM [1], a full-featured, multiprocessor hypervisor
integrated with Linux, is more than 2M LOC. It remains unknown
how security properties of such a vast system, not written with
verification in mind, may be verified in its entirety.
To address this problem, we introduce microverification, a new
approach for verifying commodity systems, based on the hypothesis
that small changes to these systems can make key properties
much easier to verify while preserving their overall functionality
and performance. Microverification reduces the proof effort for
a commodity system by retrofitting the system into a small core
and a set of untrusted services, so that it is possible to reason about
properties of the entire system by verifying the core alone. Based
on microverification, we introduce MicroV, a new framework for
verifying the security properties of large, multiprocessor commodity
systems. MicroV further reduces proof effort by providing a
set of proof libraries and helper functions to modularize proofs
using a layered verification approach, abstracting detailed C and
assembly implementations into higher-level specifications using
the Coq proof assistant [6]. Using MicroV, we verify a retrofitted
commodity system by first proving the functional correctness of its
core, showing that its implementation refines its Coq specification,
then use the specification to prove security properties of the entire
system. Because the specification is easier to use for higher-level
reasoning, it becomes possible to prove security properties that
would be intractable if attempted directly on the implementation.
As shown in Figure 1, we use MicroV to prove, for the first
time, the security properties of the Linux KVM hypervisor.
First, we retrofit KVM into a small, verifiable core, KCore,
and a rich set of untrusted hypervisor services, KServ. KCore
mediates all interactions with VMs and enforces access controls
to limit KServ access to VM data, while KServ provides complex
virtualization features. Building on our previous work [7], we retrofit
KVM/ARM [8], [9], the Arm implementation of KVM, given
Arm’s increasing popularity in server systems [10], [11], [12]. Arm
provides Virtualization Extensions (Arm VE) [13] to support virtual
machines. We leverage Arm VE to protect and run KCore at a
higher privilege level than KServ, which encapsulates the rest of the
KVM implementation, including the host Linux kernel. Retrofitting
required only modest modifications to the original KVM code. Upon
retrofitting, KCore ends up consisting of 3.8K LOC (3.4K LOC in C
and 400 LOC in assembly), linked with a verified crypto library [14].
Second, we prove that the KCore implementation refines its
layered specification. A key challenge we address is ensuring that
the refinement between implementation and specification preserves
security properties, such as data confidentiality and integrity. For
example, this may not hold in a multiprocessor setting [15], [16]
because intermediate updates to shared data within critical sections
can be hidden by refinement, yet visible across concurrent CPUs. To
© 2021, Shih-Wei Li. Under license to IEEE.
DOI 10.1109/SP40001.2021.00049
1782
Fig. 1: Microverification of the Linux KVM hypervisor.
reason about KCore in a multiprocessor setting, MicroV introduces
security-preserving layers to express KCore’s specification as a
stack of layers, so that each module of its implementation may be
incrementally proven to refine its layered specification and preserve
security properties. Security-preserving layers employ transparent
trace refinement, a new technique to track updates to shared data
and ensure that a critical section with multiple such updates that
may be visible across CPUs is not refined into a single atomic
primitive. This ensures that refinement does not hide information
release. We use transparent trace refinement to verify, for the first
time, the functional correctness of a multiprocessor system with
shared page tables. Using security-preserving layers, we can ensure
that the composition of layers embodied by the top-level KCore
specification reflects all intermediate updates to shared data across
the entire KCore implementation. We can then use the top-level
specification to prove the system’s information-flow security
properties and ensure those properties hold for the implementation.
Finally, we use KCore’s specification to prove that any malicious
behavior of the untrusted KServ using KCore’s interface cannot vio-
late the desired security properties. We prove VM confidentiality and
integrity using KCore’s specification, formulating our guarantees in
terms of noninterference [17] to show that there is no information
leakage between VMs and KServ. However, a strict noninterference
guarantee is incompatible with commodity hypervisor features,
including KVM’s. For example, a VM may send encrypted data
via shared I/O devices virtualized via untrusted hypervisor services,
thereby not actually leaking private VM data. This kind of intentional
information release, known as declassification [18], does not break
confidentiality and should be distinguished from unintentional
information release. MicroV introduces data oracles, logical integer
generators, which stand in as proxies for intentionally released data.
The value returned by a data oracle is guaranteed to only depend
on the state of the principal, a VM or KServ, reading the value. For
example, the value of encrypted data that a VM sends to KServ is
specified as the next integer returned by the data oracle. The integer
masks the information flow of the encrypted data because it does
not depend on the behavior of other VMs. After this masking, any
outstanding information flow is unintentional and must be prevented,
or it will affect the behavior of KServ or VMs. To show the
absence of unintentional information flow, we prove noninterference
assertions hold for any behavior by the untrusted KServ and VMs,
interacting with KCore’s top layer specification. The noninterference
assertions are proven over this specification, for any implementation
of KServ, but since KCore’s implementation refines its specification
via security-preserving layers, unintentional information flow is
guaranteed to be absent for the entire KVM implementation.
While verifying KCore, we found various bugs in our
initial retrofitting. Most bugs were discovered as part of our
noninterference proofs, demonstrating a limitation of verification
approaches that only prove functional correctness via refinement
alone: the high-level specifications may themselves be insecure. In
other words, these bugs were not detected by just verifying that the
implementation satisfies its specification, but by ensuring that the
specification guarantees the desired security properties of the system.
All the security-preserving layer specifications, transparent trace
refinement proofs, and noninterference proofs were implemented
using Coq [6]. Verification took two person-years to complete. Our
verified KVM, SeKVM, incurs only modest performance overhead
compared to unmodified KVM on real application workloads, and
supports KVM’s wide range of commodity hypervisor features,
including running multiple multiprocessor VMs with unmodified
commodity OSes, shared multi-level page tables with huge page
support, standardized virtio I/O virtualization with vhost kernel op-
timizations, emulated, paravirtualized, and passthrough I/O devices
with IOMMU protection against direct memory access (DMA)
attacks, and compatibility with Linux device drivers for broad Arm
hardware support. This is the first-ever multiprocessor hypervisor,
and first-ever retrofitting of a widely-deployed commodity hyper-
visor, to provably guarantee VM data confidentiality and integrity.
II. THREAT MODEL AND ASSUMPTIONS
Our threat model is primarily concerned with hypervisor vulner-
abilities that may be exploited to compromise private VM data. For
each VM we are trying to protect, an attacker may control other
VMs, control KServ, and attempt to exploit KCore vulnerabilities.
We assume VMs do not voluntarily reveal their own private data,
whether on purpose or by accident. We do not provide security fea-
tures to prevent or detect VM vulnerabilities, so a compromised VM
that involuntarily reveals its own data is out of the scope of our threat
model. However, we do protect each VM from attacks by other com-
promised VMs. Attackers may control peripherals to perform ma-
licious memory accesses via DMA [19]. Side-channel attacks [20],
[21], [22], [23], [24], [25] are beyond the scope of the paper.
We assume a secure persistent storage to store keys. We assume
the system is initially benign, allowing signatures and keys to be
securely stored before the system is compromised. We trust the
machine model, compiler, and Coq.
III. OVERVIEW OF MICROV
Hypervisors must protect their VMs’ data confidentiality—
adversaries should not be privy to private VM data—and
integrity—adversaries should not be able to tamper with private VM
data. For some particular VM, potential adversaries are other VMs
hosted on the same physical machine, as well as the hypervisor
1783
itself—specifically, SeKVM’s untrusted KServ. Each of these
principals run on one or more CPUs, with their execution and
communication mediated by KCore. Our goal here is to verify
that, irrespective of how any principal behaves, KCore protects the
security of each VMs’ data.
To do so, we formulate confidentiality and integrity as
noninterference assertions [17]—invariants on how principals’
behavior may influence one another. Intuitively, if the confidentiality
of one VM’s private data is compromised, then its adversaries’
behavior should vary depending on that data. Thus, if the behavior
of all other VMs and KServ remains the same, in spite of any
changes made to private data, then that data is confidential. Integrity
is the dual of confidentiality [26], [27]: if the behavior of a VM,
acting upon its own private data, is not affected by variations in
other VMs’ or KServ’s behavior, then its data is intact.
Using KCore’s C and assembly code implementation to prove
noninterference assertions is impractical, as we would be inundated
by implementation details and concurrent interleavings. Instead, we
use MicroV to show that the implementation of the multiprocessor
KCore incrementally refines a high-level Coq specification. We
then prove any implementation of KServ or VMs interacting with
the top-level specification satisfies the desired noninterference
assertions, ensuring that the entire SeKVM system is secure
regardless of the behavior of any principal. To guarantee that
proven top-level security properties reflect the behavior of the
implementation of KCore, we must ensure that each level of
refinement fully preserves higher-level security guarantees.
A. Security-preserving Refinement
To enable incremental and modular verification, MicroV
introduces security-preserving layers:
Definition 1 (Security-preserving layer). A layer is security-
preserving if and only if its specification captures all information
released by the layer implementation.
Security-preserving layers build on Certified Concurrent Abstraction
Layers (CCAL) [28] to verify the correctness of multiprocessor
code. Security-preserving layers retain the compositionality of
CCALs, but unlike CCALs and other previous work, ensure
refinement preserves security guarantees in a multiprocessor setting.
For each module M of KCore’s implementation, we construct a
security-preserving layer M@L(cid:118)S, which states that M, running
on top of the lower layer L, refines its interface specification
S. Because the layer refinement relation (cid:118) is transitive, we can
incrementally refine KCore’s entire implementation as a stack of
security preserving layers. For example, given a system comprising
of modules M3, M2, and M1, their respective layer specifications
L3, L2, and L1, and a base machine model specified by L0, we
prove M1@L0 (cid:118) L1, M2@L1 (cid:118) L2, and M3@L2 (cid:118) L3. In
other words, once a module of the implementation is proven to
refine its layer specification, we can use that simpler specification,
instead of the complex module implementation, to prove other
modules that depend on it. We compose these layers to obtain
(M3⊕M2⊕M1)@L0 (cid:118) L3, proving that the behavior of the sys-
tem’s linked modules together refine the top-level specification L3.
All interface specifications and refinement proofs are manually
written in Coq. We use CompCert [29] to parse each module
of the C implementation into an abstract syntax tree defined in
Coq; the same is done manually for assembly code. We then
use that Coq representation to prove that each module refines
its respective interface specification at the C and assembly level.
The overall KCore implementation thereby refines a stack of
security-preserving layers, such that the top layer specifies the
entire system by its functional behavior over its machine state.
MicroV’s security-preserving layer library provides facilities
to soundly abstract away complications arising from potential
concurrent interference, so that we may leverage sequential
reasoning to simplify layer refinement proofs. The key challenge is
handling objects shared across multiple CPUs, as we must account
for how concurrent operations interact with them while reasoning
about the local execution of any given CPU.
Example 1 (Simple page table). We illustrate this problem