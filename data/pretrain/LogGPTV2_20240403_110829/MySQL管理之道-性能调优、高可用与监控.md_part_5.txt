16:00
Default
value
allocat
20
and
16:10
New
concurrentthreads
Defaultlimitof
ing
and
No limit
stems
16:20
Ho
have
oDB
16:30
atur
第1章MySQL5.5介绍·21
red,
and
ific
rei
unlimitedthreads
16:40
Valuetoallow
20orhigher
alloc
cator.
B
---
## Page 36
22·第一部分MySQL5.5新特性篇
engine innodb status\G;”来查看当前的情况：
常常导致性能下降，因此，在MySQL5.5.X版本中已经将其删除了。
读取到 InnoDB_Buffer_Pool缓冲池中。
MySQL5.1.X版本中，顺序读取 extent块最后一个页时，InnoDB决定是否将下一个页提前
置的 page 页数量时，触发一个异步读取请求，将下一个页提前读取到buffer pool中。在
1.1.11
样可以更好地发挥CPU多核处理能力，提高并发量。
innodb_concurrency_tickets 也没了意义，这里推荐设置innodb_thread_concurrency 为0，这
那么会触发一个异步读取请求，把剩余的页读取进来，随机预读增加了不必要的复杂性
注意
1.0.3 and newer
14.4.7.6.ChangesRegarding Thread Concurrency
before1.0.3
InnoDB storage engine
InnoDB storage engine
随机预读：如果在InnoDB_Buffer_Pool缓冲池中发现同一个extent块内有若干个页
Built-in
innodb_read_ahead_threshold参数默认是56，
线性预读：当顺序读取extent块（包含64个page）innodb_read_ahead_threshold设
innodb_thread_concurrency=0时，innodb_thread_sleep_delay参数就无效了。
Pages read ahead 1510.10/s,evicted without access0.00/s
InnoDB有两种预读算法可提高IO性能，一种是线性预读，另一种是随机预读。
关于innodb_thread_concurrency参数的介绍，请参见MySQL5.5手册：
BUFFERPOOLANDMEMORY
InnoDBVersion
预读算法的变化
InnoDBuses operating system threadsto processrequestsfrom user transactions.(Transactionsmay issuemanyrequests to InnoDBbe
mmit
(corresponding toPlugin)
(corresponding to Plugin)
5.1.11 and newer
MySQLVersion
Default
value
0
8
，可动态更改。你可以使用命令“show
concurrentthreads
Default limit of
No limit
8
unlimitedthreads
Valuetoallow
0
0
（续）
同样
---
## Page 37
所示）。
在MySQL5.5.X版本中可以看到关于LinuxnativeAIO的信息。
启状态，此参数不支持动态修改。
系统调用进行了简单的封装，当然，也可以直接通过系统调用来使用LinuxnativeAIO。
nativeAIO，想要使用LinuxnativeAIO，可以利用libaio库，libaio对LinuxnativeAIO的
1/0，使得多个I/O操作可同时执行。
用程序可以同时运行，这就提高了系统性能。因此，像数据库这样的应用往往会利用异步
序必须等待，直到此I/O执行完毕。相反，异步I/O操作是在后台运行的，I/O操作和应
会通知线程I/O操作完成了。简单地说，如果是同步I/0，当一个I/O操作执行时，应用程
式中，线程发送一个I/O请求到内核，然后继续处理其他的事情，内核完成I/O请求后，将
I/O操作后会立即进入等待状态，直到I/O操作完成才醒来继续执行。而在异步文件I/O方
1.1.12首次在Linux上实现了异步I/O
从MySQL5.5.X版本开始，在Linux系统上就实现了异步I/O功能，也就是Linux
下面分别是MySQL5.5.X和MySQL5.1.X启动时的信息，分别如图1-6和图1-7所示。
这里先解释下什么是同步I/O，什么是异步I/O。在同步文件I/O中，线程启动一个
可以通过innodb_use_native_aio参数来选择是否启用异步I/O，默认是ON，即处于开
在使用 libaio之前，你要先安装 libaio rpm包，命令如下：
yuminstallibaio-y
关于innodb_read_ahead_threshold参数的介绍，请参见MySQL5.5手册：
如果你发现有很多evictedwithout access，说明设置的值太小了，应该增大。
口evicted without access：表示预读的页没有被访问，每秒被踢出了多少页。
口Pagesreadahead：表示每秒预读了多少页。
[root@TestPrfServer~]#
libaio-0.3.106-5
libaio-0.3.106-5
[root@TestPrfServer~]#rpm-qa|greplibaio
其中：
onbv
tingthe
uS
rsshould
generallysce cquivalent orimprovedperformance.
andoften
riggeran
第1章MySQL5.5介绍23
oDB
ng pages of
reques
---
## Page 38
忆
等于0。其目的是保证InnoDB 存储引擎的redo log事务日志与binlog日志的顺序一致。
·第一部分MySQL5.5新特性篇
注意
的频率就很高，他来来回回的也很累，后来他索性每次搬5箱饮料，这样一次搬的东西多
果有多个用户同时提交事务，那么就合并在一起一次性来刷人磁盘，大大提高了吞吐量。
降低IOPS 吞吐率。
交，那么按照顺序把写人的事务日志页刷人磁盘上，就会导致磁盘做多次I/O操作，从而
了，进出库房的频率也就变低了。
1.1.13
举个搬饮料放入库房的例子：以前，搬运工每次搬一箱饮料放入库房，这样进入库房
从MySQL5.5.X版本开始，会采用组提交的方式来将事务刷入磁盘中，也就是说，如
一个事务提交时，采取的是先写日志后刷人磁盘的方式。假如此时有多个用户同时提
如果kiocb那项不为0，代表异步IO已工作。
er
120715
207
恢复组提交
rsion:'5.5.19'
0715
07
15
vm01
19:13:03 mysqld_safe Starting mysqld daemon with databases from
21:02:48
6
21
:02:4
13:05
13:
13
02:
一
0
mysqld_safe Starting mysqld daemon with databases from/usr/local/mvsql/dat
Note
nn
InnoDB
InnoDB:
InnoDB:
InnoDB:
socket:
16
oDB
DB
socket:
Ev
Event
.1.8
ugin
图1-7MySQL5.1.X启动时的信息
图1-6MySQL5.5.X启动时的信息
epr
eted
ing
izing
arted:
tmp/
图1-8异步I/O信息
log
Ler
ysql.
backgroundthreads
crash
pTbsu
pool,
using mysql-bin
size=100.0M
ready for connections.
88
---
## Page 39
以采取组提交模式，sync_binlog必须等于0。
回滚，导致该用户取钱失败，如果开启了同步复制，也会把binlog日志同步到slave上，
旧采取组提交模式，其顺序有可能是这样：
这样按照MySQL 源码编写方式是不能合并到一起提交的。而如果 sync_binlog等于1，仍
序是：
然后再取出2000元，接着其他uid做后面的开户插入操作。而如果采用组提交模式，其顺
14.4.7.10.GroupCommit
此特性无须更改任何参数即可实现。
这样就出现了问题，t1表的uid=11账户里只有1000元，取出2000元会提示报错，
1)begin;updatet1set money=money-2000whereuid=11;commit;
在 sync_binlog等于1时，先写人binlog_cache，事务提交后会马上刷入binlog日志，
2)begin;updatet1set money=money-20o0whereuid=11;commit;
1)begin;
未采用组提交模式时，t1表的uid=11账户里有1000元，按照正常顺序是先存入1000，
关于恢复组提交介绍，请参见MySQL5.5手册：
insertinto t4（uid,money)values(14,4000);
insert into t2（uid,money)values(12,2000);
5)begin;insert into t4（uid,money)values(14,4000);commit;
4)begin;insertinto t3（uid,money)values(13,3000);commit;
3)begin;insertinto t2(uid,money)values(12,2000);commit;
2)begin;updatet1 set money= money-2000 where uid=11;commit;
1)begin;updatet1setmoney=money+1000where uid=11;commit;
例如，在1分钟里有5条更新记录，其顺序是：
insert intot3（uid,money)values(13,3000);
insertintot2（uid,money)values(12,2000);
updatet1setmoney=money+1000 whereuid=11;
2)begin;
insert intot4（uid,money)values(14,4000);
insertintot3（uid,money)values(13,300);
updatet1setmoney=money+1000 whereuid=11;
commit;
commit;
same time,significantlyimproving throughput.
singlewrite
such
Plugin with MySQL 5.1)and
第1章MySQL5.5介绍●25
所
并
---
## Page 40
26·第一部分MySQL5.5新特性篇
大可设置为5000，这个参数一般不用调整，使用默认的即可。
能生效。当设置为1时，需要结合innodb_purge_batch_size参数来使用，默认值是20，最
注意
下该参数设置为0（不使用单独线程），设置为1时表示使用单独的清除线程。
可通过设置innodb_purge_threads配置参数来选择清除操作是否使用单独的线程，默认情况
作是主线程的一部分，这意味着它在运行时可能会堵塞其他的数据操作，比如，删除一张
1.1.15改善清除程序进度
加了吞吐量。
data）（来自插人、
大表。
务处理数量，而之前的几个InnoDB版本最多只能处理1023个并发事务处理操作。
1.1.14
14.4.7.19.Better Scalability withMultipleRollbackSegments
现在MySQL5.5可以支持高达128KB的并发事务处理操作，创建回滚数据（undo
innodb_purge_threads 参数不支持动态修改，需要添加到my.cnf 里修改，并且要重启才
从MySQL5.5.X版本开始，该操作运行于独立的线程中，并支持更多的并发数。用户
InnoDB中的清除操作是一类定期回收无用数据的操作。在之前的几个版本中，清除操
InmnoDB现在可以使用多个回滚段来提升性能和可扩展性，并且能够极大地增加并发事
关于innodb_purge_threads参数的介绍，请参见MySQL5.5手册：
关于多个回滚段的介绍，请参见MySQL5.5手册：
此特性无须更改任何参数即可实现。
InnoDB使用多个回滚段提升性能
Group commit is transparent: you do not need to do anything to take advantage of this significant performance improvement.
Managemen'"
、更新和删除操作)。这种改进措施减少了在单个回滚段上的互斥争用，增
nabled
angusi
---
## Page 41
置参数来控制删除缓冲和既有插入缓冲功能，默认是all，此参数支持动态设置：
后使用收集／清除所有已删除记录的清除操作)。现在可以使用innodb_change_buffering 配
还占用一定的内存，这种情况下关闭该功能较好。
常的写脏数据块方法将其闪存到磁盘中，这样一来，插入缓冲区就没有什么作用了，并且
集索引页被读人Innodb_Buffer_Pool缓冲池里，那么就会直接更新非聚集索引，并使用正
较少的非聚集索引，那么就可以关闭InnoDB的插入缓冲功能。前面也介绍了，如果该非聚
可用内存减少了。如果数据和索引全部读入Innodb_Buffer_Pool缓冲池，并且表中有相对
而提高了插人性能。
缓冲池里，执行插入缓存合并操作，并使用正常的写脏数据块方法将其闪存到磁盘中，从
池里，则使用插人缓冲区来缓存非聚集索引页的变化，直到该页被读入Innodb_Buffer_Pool
接更新非聚集索引，并使用正常的写脏数据块方法将其闪存到磁盘中；如果没有读人缓冲
更新非聚集索引时，如果该非聚集索引页被读人Innodb_Buffer_Pool缓冲池里，那么就直
插人。顺序读写的速度要比随机读写的速度快，表越大就越明显，而插入的性能就会降低。
也会随即更新，其中，主键（聚集索引）是按照顺序进行插人的，而非聚集索引则会分散地
1.1.16
然而，由于插入缓冲区占用部分Innodb_Buffer_Pool缓冲池，因此使得缓存数据页的
14.4.7.20.BetterScalability with ImprovedPurgeScheduling
14.4.7.4.Controlling InnoDB Change Buffering
ing a slow shutdown.
因此在MySQL5.1.X版本里，InnoDB引人了一种优化措施，
从MySQL5.5.X版本开始，还为删除操作扩展了同样的功能（首先是删除标记操作，然
SET GLOBALinnodb_change_buffering= all;
在向一个表进行insert、delete或update 操作时，里面的索引（聚集索引和非聚集索引）
关于innodb_change_buffering参数的介绍，请参见MySQL5.5手册：
添加删除缓冲和清除缓冲
egro
berth
lem
，当一个表做insert操作来
第1章
MySQL5.5介绍27
---
## Page 42
28·第一部分MySQL5.5新特性篇
注意
代码如下所示：
再轮训。比如，在用一个死循环监控服务状态时，那么每次会睡眠5秒，然后再进行检查，
wait_delay参数，作用是控制轮训间隔，也就是说在每次轮训的过程中，会休息一会儿然后
放了锁，“自旋”一词就是因此而得名。
旋锁已经被别的执行单元保持，调用者就一直循环在那里看该自旋锁的保持者是否已经释
源已经被占用，资源申请者只能进人睡眠状态。但是自旋锁不会引起调用者睡眠，如果自
最多只能有一个执行单元获得锁。但是两者在调度机制上略有不同。对于互斥锁，如果资
论是互斥锁，还是自旋锁，在任何时刻，最多只能有一个保持者，也就是说，在任何时刻
机制。其实，自旋锁与互斥锁比较类似，它们都是为了解决对某项资源的互斥使用的。无
1.1.17
在介绍该特性之前，先来了解一下何谓自旋锁？它是为保护共享资源而提出的一种锁
Youcancontrol theextenttowhichlnnoDBperformsinsertbufferingwiththesystemconfigurationparameterin-
tionswithahighvolumeofDMLoperations suchasbulkinserts.
Becauseitcanresultinfewer diskreads andwritesthisfeature ismostvaluable
关于innodb_spin_wait_delay参数的介绍，请参见MySQL5.5手册：
set global innodb_spin_wait_delay=6;
innodb_spin_wait_delay参数的值默认是6，可动态调整。
为了防止自旋锁循环过快，耗费CPU，在MySQL5.5.X版本里引人了innodb_spin_
done
echo"OK."
whiletrue
#!/bin/bash
sleep5
if[$?-eqO];then
echo"MysQLis down."|mail-s"aleat”PI:EMAIL
else
pstree-pMysQL>/dev/null
6
控制自旋锁SpinLock轮训间隔
deletion)
fitsin thebufferpool,insert bufferingdoesnotimpose anyextra
available
overhead,
may
be
to
bec
that areIO-bound,forexample applca
causeitonly appliestopagesthat are
atie
repre
ntedasa combin-
---
## Page 43