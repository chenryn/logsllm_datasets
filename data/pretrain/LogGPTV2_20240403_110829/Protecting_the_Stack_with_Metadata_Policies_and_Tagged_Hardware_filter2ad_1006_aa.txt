title:Protecting the Stack with Metadata Policies and Tagged Hardware
author:Nick Roessler and
Andr&apos;e DeHon
2018 IEEE Symposium on Security and Privacy
Protecting the Stack
with Metadata Policies and Tagged Hardware
Nick Roessler
University of Pennsylvania
PI:EMAIL
Andr´e DeHon
University of Pennsylvania
PI:EMAIL
Abstract—The program call stack is a major source of ex-
ploitable security vulnerabilities in low-level, unsafe languages
like C. In conventional runtime implementations, the underlying
stack data is exposed and unprotected, allowing programming
errors to turn into security violations. In this work, we design
novel metadata-tag based, stack-protection security policies for
a general-purpose tagged architecture. Our policies speciﬁcally
exploit the natural locality of dynamic program call graphs to
achieve cacheability of the metadata rules that they require.
Our simple Return Address Protection policy has a performance
overhead of 1.2% but just protects return addresses. The two
richer policies we present, Static Authorities and Depth Isola-
tion, provide object-level protection for all stack objects. When
enforcing memory safety, our Static Authorities policy has a
performance overhead of 5.7% and our Depth Isolation policy
has a performance overhead of 4.5%. When enforcing data-
ﬂow integrity (DFI), in which we only detect a violation when
a corrupted value is read, our Static Authorities policy has a
performance overhead of 3.6% and our Depth Isolation policy has
a performance overhead of 2.4%. To characterize our policies,
we provide a stack threat taxonomy and show which threats are
prevented by both prior work protection mechanisms and our
policies.
I. INTRODUCTION
Low-level, memory-unsafe languages such as C/C++ are
widely used in systems code and high-performance applica-
tions. However, they are also responsible for many of the
classes of problems that expose applications to attacks. Even
today, C/C++ remain among the most popular programming
languages [1], and code written in these languages exists
within the Trusted Computing Base (TCB) of essentially all
modern software stacks. In memory-unsafe languages the bur-
den of security assurance is left to the application developer,
inevitably leading to human error and a long history of bugs
in critical software.
The program call stack is a common target for attacks
that exploit memory safety vulnerabilities. Stack memory
exhibits high spatial and temporal predictability, is readable
and writeable by an executing program, and serves as a storage
mechanism for a diverse set of uses related to the function
call abstraction. The stack holds, in contiguous memory, local
function variables, return addresses, passed arguments, and
spilled registers, among other data. The particular concrete
layout of stack memory, chosen by the compiler and calling
convention, is exposed. An attacker can wield a simple mem-
ory safety vulnerability to overwrite a return address, corrupt
stack data, or hijack the exposed function call mechanism in
a host of other malicious ways.
Consequently, protecting the stack abstraction is critical
for application security. Currently deployed defenses such as
W⊕X and stack canaries [2] make attacks more difﬁcult to
conduct, but do not protect against more sophisticated attack
techniques. Full memory safety can be retroﬁtted onto existing
C/C++ code through added software checks, but at a high cost
of 100% or more in runtime overhead [3]. These expensive
solutions are unused in practice due to their unacceptably high
overheads [4].
There is a long history of accelerating security policies with
hardware to bring their overheads to more bearable levels
[5], [6], [7], [8], [9], [10], [11], [12], [13], [14]. However,
introducing a dedicated hardware mechanism to address a
single kind of vulnerability has disadvantages. Not only does
a new hardware feature take many years to implement and
deploy, but each mechanism can require independent changes
to the entire hardware/software stack. For example, Intel’s re-
cent Memory Protection Extensions (MPX) [15], a hardware-
accelerated mechanism for performing spatial memory safety
checks on pointer accesses, added new hardware registers and
new instructions in the instruction set, as well as required
updated compilers, recompiled software and new operating
system routines speciﬁc to MPX. Nonetheless, these additions
did not fully address stack protection, demanding the later
addition of separate hardware support and new instructions for
stack protection in the form of CET, Control-ﬂow Enforcement
Technology [16]. Repeating this lengthy process for all desired
security policies will result in bloated hardware (i.e., poor
economy of mechanism) that cannot adapt to security threats
at the rate at which they evolve.
Furthermore, a single, ﬁxed policy will not be best suited for
the range of applications and security requirements in practice.
Protection mechanisms make tradeoffs between performance
overhead, the protection provided, and compatibility, among
other metrics. Different requirements and performance budgets
likely lead to a range of solutions. A rigid, hardwired security
mechanism, however, necessarily positions itself at a ﬁxed
point in the tradeoff space. CET, for example, provides hard-
ware acceleration for coarse-grained Control-Flow Integrity
(CFI) but cannot be used for ﬁne-grained protection.
Recent work has shown that programmable, hardware-
accelerated rich metadata tag-based security monitors are
© 2018, Nick Roessler. Under license to IEEE.
DOI 10.1109/SP.2018.00066
478
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:32:21 UTC from IEEE Xplore.  Restrictions apply. 
capable of expressing and enforcing a large range of low-
level security policies [17]. In this model, the processor core
is enriched with expressive metadata tags attached to every
word of data in the system, including on registers and on
memory. The hardware propagates metadata tags and checks
each instruction against a software-deﬁned security policy.
The same hardware mechanism accelerates any policy (or
composition of policies) expressed in a uniﬁed programming
model by caching a subset of the security monitor’s behavior
in hardware. Policies can be updated in-ﬁeld or conﬁgured on
a per-application basis.
In this work we develop tag-based stack protection policies
for the Software-Deﬁned Metadata Processing model (SDMP)
that are efﬁciently accelerated by an architecture that caches
metadata tag rules [17]. We propose a simple policy that
utilizes only a few tags, as well as richer policies that generate
thousands of tags for ﬁne-grained, object-level stack protec-
tion. Our policies leverage the compiler as a rich source of
information for protecting the stack abstraction. The compiler
is responsible for the low-level arrangement of the stack,
including how arguments are passed, registers are spilled and
where program variables are stored; similarly, the compiler
is aware of which parts of a program should be reading
and writing each item on the stack. In conventional runtime
implementations this information is simply discarded after
compilation—by instead carrying it alongside the data and
instruction words in a computation with metadata tags, we can
validate the compiler’s intent and prevent the machine from
violating the stack abstraction in unexpected ways at runtime.
Stack protection SDMP policies face two major sources
of overhead. The ﬁrst is the slowdown incurred by software
policy evaluation that must run to resolve security monitor
requests when they miss in the hardware security monitor
cache. The rate at which these misses occur is driven by the
locality of metadata security rules, which in turn is driven by
the diversity and use of metadata tags by the policy being
enforced. We design our policies speciﬁcally to exploit the
regular call structure found in typical programs by reusing
identiﬁers for the same static function (Sec. IV-D2) or by
the stack depth (Sec. IV-D3) to achieve cacheability of the
required metadata rules.
The second signiﬁcant source of overhead for stack pro-
tection policies is the cost of keeping stack memory tagged,
which is a requirement faced by our richer policies. In con-
ventional runtime implementations on standard architectures,
stack memory is allocated and reclaimed with fast single
instruction updates to the stack pointer. To tag this memory
naively, we would need to insert code into the prologue and
epilogue of every function to tag and then clear the allocated
stack memory, effectively replacing an O(1) allocation opera-
tion with an O(N ) one. This change is particularly costly for
stack memory; heap allocations, in contrast, spend hundreds
to thousands of cycles in allocator routines, which makes the
relative overhead of tagging the allocated memory less severe.
To alleviate the cost of tagging stack memory, we consider
several optimizations. One is an architectural change, Cache
Line Tagging (Sec. VI-B), that gives the machine the capability
of tagging an entire cache line at a time. Alternatively, we
propose two variations to our policies that avoid adding
additional instructions to tag memory, Lazy Tagging (Sec.
VI-A) and Lazy Clearing (Sec. VI-C).
Lastly, to characterize our policies, we provide a taxonomy
of stack threats (Sec. VII-A) and show how our policies as
well as previous work protection mechanisms protect against
those threats.
The policies we derive in this work provide word-level
memory protection of the stack abstraction, have low overhead
(
fp ,sp
ra,8(sp)
fp,16(sp)
sp,32(sp)
; allocate frame
; store return address
; store old frame pointer
; set new frame pointer
; write arg for foo ()
; call foo ()
; reset sp before epilogue
; restore return address
; restore frame pointer
; release frame
; jump to return address
Fig. 1: Typical Alpha stack maintenance code
Our policies leverage compiler-level information such as
the locations of objects on the stack and occasionally re-
quire adding instructions into programs. We thus consider the
toolchain (the compiler, linker, and loader) to be in our TCB
and assume we can recompile programs. Our policies do not,
however, require code changes or programmer annotations.
We develop our policies speciﬁcally for the Alpha architec-
ture, a RISC ISA, and use the gcc toolchain. These choices
do impact
the low-level stack details used in our policy
descriptions and experiments. However, our policies should be
easy to port to any RISC ISA; CISC ISAs would require some
more care to handle the more complex memory operations
such as CALLs that side effect both memory and register state.
In Fig. 1 we show typical Alpha assembly code for maintaining
the stack.
IV. STACK PROTECTION POLICIES
In this section we describe our stack protection policies.
We begin with the motivation for our policy designs (IV-A),
proceed to connect our mechanism of tags and rules to the
stack abstraction (IV-B), enumerate the stack invariants that we
would like to maintain (IV-C), and ﬁnally give three concrete
policies (IV-D).
A. Motivation
Attacks on the stack arise from violations of high-level
abstractions that are unchecked by the low-level code produced
by compilers. Attackers exploit the machine’s willingness to
increment or decrement a pointer beyond the bounds of its
intended object and to perform abstraction-violating reads and
writes.
To prevent these violations, our policies tag stack objects
with both a frame-id (an identiﬁer for a stack frame) and
an object-id (an identiﬁer for an object within a frame), and
tag program code to allow the machine to validate accesses
to these words using appropriate metadata rules. Formulating
identiﬁers in this way allows us to express a range of policies;
we are driven both by a desire for strong protection (precise
notions of object-id and frame-id) and the performance of our
policies (the cacheability of our metadata rules), making the
choice of how we identify frames and differentiable objects
inside them core to our designs. In general, cacheability
concerns drive us to avoid creating a unique identiﬁer for each
480
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:32:21 UTC from IEEE Xplore.  Restrictions apply. 
dynamic procedure call to avoid the compulsory misses that
would be required.
B. Tags and Rules
The building blocks of SDMP policies are tags and rules.
Our policies use tags on (1) memory words, (2) registers,
and (3) instructions. Tags on stack memory words encode a
frame-id and an object-id, which together identify the frame
that owns a word and which of the differentiable objects held
by that frame is stored there. Tags on registers encode the
frame-id and object-id that a particular stack pointer is granted
access, if the register contains a pointer to stack data. Lastly,
instruction tags are used by the compiler to grant instructions
capabilities beyond what generic instructions would have, such
as the right to set the tags on memory words, to set the tags
on registers as pointers are crafted, to clear memory tags or
to perform other policy-speciﬁc functionality.
Rules allow us to deﬁne the set of permitted operations and
describe how result tags are computed from input tags. For
example, to validate a memory access, we can check that the
object-id and frame-id ﬁelds on a pointer tag match those of
the tag on the accessed memory word. Furthermore, during
such a load, we could use additional ﬁelds on the memory
word tag to describe how to tag the resulting value produced by
the load. As another example, we can propagate a pointer tag
along with a pointer value as the pointer is moved around the
system (including between registers, to and from memory, and
through operations such as pointer arithmetic) with appropriate
rules, allowing us to use the dynamic tainting rules as in [28]
to maintain pointer tags.
C. Stack Invariants
As a program executes, we would like to verify that objects
on the stack are accessed in ways that the compiler expects
with respect to our identiﬁers; i.e., the object-id and frame-
id accessed by memory instructions match the compiler’s
intentions. Several kinds of accesses capture stack behavior,
which we describe below.
Some stack objects,
like return addresses, stored frame
pointers and callee-saved values, are accessed strictly by code
produced by the compiler speciﬁcally to maintain the stack
abstraction. These objects are accessed in a highly restricted
way; they are written to the stack once in the function prologue
and are read only in the return sequence before returning
control
to the caller. Statically the compiler has emitted
speciﬁc instructions for these purposes, and so, by the principle
of least privilege, we would like to restrict access to these
objects to just those predetermined instructions. For accesses
of this variety, we place the object-id intention directly on the