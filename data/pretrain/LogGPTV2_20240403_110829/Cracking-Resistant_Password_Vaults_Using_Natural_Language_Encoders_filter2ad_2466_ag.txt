### Implementation and Performance

We developed a prototype of NoCrack using Python 2.7. On the server side, we utilized Flask and SQLite3 for web framework and database management, respectively. For domain normalization, we employed the Python Public-Suffix library. All cryptographic operations were performed using PyCrypto 2.6.1, with AES in CTR mode for encryption and SHA-256 within PBKDF2 for key derivation. Many of these operations are parallelizable; we used the Python `multiprocessing` library, although our current implementation does not fully exploit this capability. The total lines of code for both the client and server, excluding libraries, amount to 3,102 as counted by the `cloc` utility. All experiments were conducted on an Intel Core-i5 machine with 16 GB of RAM running Linux.

#### Performance Metrics

We provide basic performance metrics for our most complex honey encryption scheme, HE-DH2, while noting that this is a naive implementation with potential for further optimization. We tested various vault sizes \( s \in \{2, 200, 2,000, 20,000\} \) and set \( s_1 = s_2 = s/2 \), where \( s_1 \) and \( s_2 \) represent the sizes of the popular domains table and overflow table, respectively. We used an integer representation size \( b = 128 \) for encoding fractions. 

We began by generating a random ciphertext of appropriate size for the given values of \( s_1 \) and \( s_2 \), assuming a short arbitrary domain size and human-generated passwords (the worst-case scenario for performance). We then measured the time required to recover a specific vault password and to add a new password to the vault. The median times over 100 trials are reported in Table 5, with negligible variance in timing.

| Operation          | Vault Size \( s \) | Time (median over 100 trials) | Vault Size on Disk |
|--------------------|-------------------|-------------------------------|--------------------|
| Recover Password   | 2                 | 6.34 ms                       | 4.71 KB            |
| Add Password       | 2                 | 0.13 s                        | 4.71 KB            |
| Recover Password   | 200               | 6.41 ms                       | 164.00 KB          |
| Add Password       | 200               | 0.68 s                        | 164.00 KB          |
| Recover Password   | 2,000             | 6.42 ms                       | 1.55 MB            |
| Add Password       | 2,000             | 1.11 s                        | 1.55 MB            |
| Recover Password   | 20,000            | 6.50 ms                       | 15.26 MB           |
| Add Password       | 20,000            | 9.25 s                        | 15.26 MB           |

The time to recover a single password is consistently fast and independent of the vault size, thanks to our design's support for random access. The time to add a password, however, increases with \( s \) because our scheme requires decrypting and decoding all \( s \) entries, updating the new password, and then re-encoding and re-encrypting all \( s \) entries to maintain synchronization with the sub-grammar. The majority of the time is spent on encoding and re-encoding passwords. Even for large vaults, this operation takes only around one second, which is necessary for supporting domain hiding. The encrypted vaults also remain reasonably sized. In conclusion, while NoCrack incurs some time and space overheads compared to conventionally encrypted vaults, its performance is more than adequate for the intended use cases.

### Related Work

#### Honey Objects

The use of decoy objects such as honeypots or decoy documents is well-established in information security [7, 8]. More closely related to our work are honeywords [24], which are decoy passwords associated with each user in a password database. However, honeywords involve individual fake passwords rather than password sets and do not address the decoy security for password vaults, which is our goal.

Decoy document and honeyword systems are typically distributed, storing secrets that distinguish decoys from real objects in a trustworthy location separate from the system containing the decoy objects [22]. This contrasts with systems like NoCrack, where these secrets (e.g., master passwords) are provided by the user. An early decoy system involving encryption under user-furnished secrets was proposed by Hoover and Kausik [20], but it only supports specially crafted RSA private keys. Honey encryption [23] introduced a general framework for incorporating honey objects into encryption, though it does not prescribe specific constructions for message types, which was a major technical challenge in building NoCrack.

#### Password-Based Key Derivation

Key stretching, which slows down key derivation, was first defined by Kelsey et al. [28] and later standardized in PKCS#5 [25]. Boyen proposed halting password puzzles [9], where key derivation runs indefinitely on incorrect guesses and terminates only upon correct guesses. Another approach is to use memory-hard functions, such as scrypt [33], which require significant RAM to compute efficiently. These techniques slow down offline brute-force attacks but do not force attackers to make online queries.

#### Stateless Password Managers

Several schemes exist for strengthening user passwords and preventing direct password reuse by hashing a master secret with domain names to generate per-domain passwords. Early examples include the Lucent Personal Web Assistant (LPWA) [17] and later variants like PwdHash [34] and Password Multiplier [18]. Chiasson et al. [13] found that most users struggled to use these tools as intended. NoCrack uses a simple set of rules for computer-generated passwords to address sites with restrictive password policies.

#### Password Managers

In addition to Kamouflage [3], several academic proposals aim to improve the usability and security of stateful password managers. Passpet [39] generates random passwords per domain and allows users to assign avatars to different websites for easy identification. Tapas [31] is a two-factor password manager that distributes passwords into shares between a computer and a mobile phone. Karole et al. [26] found that online services were the easiest to use, although participants preferred phone-based solutions due to concerns about entrusting passwords to cloud-based services. NoCrack addresses this by enabling the convenience of cloud-based password vault backup with enhanced security.

### Acknowledgments

We thank the anonymous reviewers of Oakland 2015 for their valuable comments and feedback. We also thank Michael Doescher for his contributions to the PCFG construction and cleaning the Pastebin dataset, Shoban Preeth Chandrabose for his feedback on the machine learning analysis, and Adam Everspaugh for valuable discussions and editorial assistance. This work was supported in part by NSF grants CNS-1330308 and CNS-1253870 and AFOSR grant FA9550-13-1-0138.

### References

[1] M. Bellare, T. Ristenpart, and S. Tessaro, “Multi-instance security and its application to password-based cryptography,” in Advances in Cryptology – CRYPTO 2012. Springer Berlin Heidelberg, 2012, pp. 312–329.
...
[39] K.-P. Yee and K. Sitaker, “Passpet: convenient password management and phishing protection,” in Proceedings of the second symposium on Usable privacy and security. ACM, 2006, pp. 32–43.