Implementation and performance. We implemented a
prototype of NoCrack in Python-2.7. On the server side we
used Flask and Sqlite3. To normalize domains we use the
Python Public-Sufﬁx library. All cryptographic operations
use PyCrypto-2.6.1. We use AES within CTR mode en-
cryption, and SHA-256 within PBKDF2 for key derivation.
Many of the operations are parallelizable; we use the Python
multiprocessing library for this but note that our prototype
implementation does not yet fully take advantage of paral-
lelization. The client and server consist of 3,102 total lines of
code as counted by the utility cloc (not counting libraries).
All experiments were performed on an Intel Core-i5 with
16 GB of RAM running Linux.
We provide some basic performance numbers for our
most complex honey encryption scheme HE-DH2, but em-
phasize that this is a naive implementation and some im-
provements will be easy. We ﬁx various vault sizes s ∈
{2 , 200 , 2,000 , 20,000} and set s1 = s2 = s/2 (these are
the sizes of the popular domains table and overﬂow table,
respectively). We used integer representation size b = 128.
for encoding fractions. We start by generating a random ci-
phertext of size appropriate for the values of s1, s2 assuming
some short arbitrary domain size and that all passwords are
human generated (the worst-case for performance). We then
measure the time to recover a particular vault password as
well as to add a password to the vault. We report in Table 5
the median times over 100 trials. Variance in timing was
negligible.
Time for recovering a single password is fast, and agnostic
to the size of the vault. This is because our design allows
random access into the vault. Time for adding passwords
Operation
Recover password
Add password
Vault size on disk
s = 2
6.34 ms
0.13 s
4.71 KB
200
6.41 ms
0.68 s
164.00 KB
2,000
6.42 ms
1.11 s
1.55 MB
20,000
6.50 ms
9.25 s
15.26 MB
Figure 5. Running times (median over 100 trials) of operations for different
vault sizes s = s1 + s2. The ﬁnal row is size of encrypted vaults on disk.
increases with s, since our scheme decrypts and decodes
all s entries, updates the new password, then re-encodes
and re-encrypts all s entries (this is required to keep the
sub-grammar synchronized with the contents of the vault.)
The bulk of the time is spent in encoding and re-encoding
passwords. This operation is still only around one second
for large vaults, and large vaults are needed only to support
domain hiding. The encrypted vaults are also of reasonable
size. We conclude that, while NoCrack does incur time and
space overheads relative to conventionally encrypted vaults,
the absolute performance is more than sufﬁcient for the
envisioned usage scenarios.
IX. RELATED WORK
Honey objects. The use of decoy objects such as honeypots
or decoy documents [7], [8] is well-established in infor-
mation security practice. More closely related to our work
here are honeywords [24], decoy passwords associated with
each user in a password database. The honeywords system
involves fake individual passwords, rather than password
sets, and does not help with decoy security for password
vaults, our goal here.
We also note that decoy document and honeyword systems
are distributed: they assume explicit storage of secrets that
distinguish decoy from real objects in a trustworthy location
(a “honeychecker”) separate from the system containing the
decoy objects. See [22] for a discussion of the distinction
between such systems and those in which these secrets (e.g.,
master passwords) are provided by a user, as in NoCrack.
An early decoy system involving encryption under user-
furnished secrets was proposed by Hoover and Kausik [20];
it only supports encryption of specially crafted RSA private
keys. Honey encryption [23] introduced a general frame-
work for incorporating honey objects into encryption. As
explained earlier,
it does not prescribe constructions for
speciﬁc message types, which gives rise to one of the major
technical challenges we faced in building NoCrack.
A detailed discussion of Kamouﬂage [3] was given in
Section II.
Password-based key derivation. Key stretching, where
one slows down key derivation, was ﬁrst deﬁned by
Kelsey et al. [28], and standardized later in PKCS#5 [25].
Boyen proposed halting password puzzles [9] in which the
key-derivation will run indeﬁnitely on incorrect password
guesses and only terminates (after an unspeciﬁed length of
496496
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:53 UTC from IEEE Xplore.  Restrictions apply. 
time) upon correct guesses. Another approach is to incor-
porate memory-hard functions, which require a signiﬁcant
amount of RAM to compute efﬁciently, such as done in
scrypt [33]. Each of these techniques slows down ofﬂine
brute-force attacks, but do not force attackers to make online
queries.
Stateless password managers. Several schemes exist for
strengthening user passwords (and preventing direct pass-
word reuse) by hashing a master secret with domain names
to dynamically generate per-domain passwords. An early ex-
ample was the Lucent Personal Web Assistant (LPWA) [17];
later variants include PwdHash [34] and Password Multi-
plier, a scheme by Halderman et al. [18]. Chiasson et al.
conducted a usability study of both PwdHash and Password
Multiplier and found the majority of users could not success-
fully use them as intended to generate strong passwords [13].
Another usability challenge is dealing with sites with a
password policy banning the output of the password hash;
for this reason NoCrack uses a simple set of rules for
computer-generated passwords.
Password managers. In addition to Kamouﬂage [3], several
academic proposals have sought to improve the usability
and security of stateful password managers. Passpet [39]
generates random passwords per-domain and allows users to
assign avatars to different websites to easily identify which
passwords are used with which website. Tapas [31] is a
prototype two-factor password manager which distributes
passwords into shares between a computer and a mobile
phone.
Karole et al. [26] performed a usability evaluation com-
paring three common approaches to password vaults: online
services, phone applications, and USB tokens. Interestingly,
they found that the online service was by far the easiest
for participants to use, although participants stated a clear
preference for the phone-based solution because most didn’t
want
to entrust all of their passwords to a cloud-based
service. These ﬁndings are a compelling justiﬁcation for
NoCrack, which enables the convenience of cloud-based
password vault backup with higher security against com-
promise.
ACKNOWLEDGMENTS
We thank the Oakland 2015 anonymous reviewers for
their valuable comments and feedback. We thank Michael
Doescher for helping in several design choices of PCFG
construction and cleaning the Pastebin dataset, Shoban
Preeth Chandrabose for his feedback on the machine learn-
ing analysis of NoCrack, and Adam Everspaugh for valu-
able discussions and editorial assistance. This work was
supported in part by NSF grants CNS-1330308 and CNS-
1253870 and AFOSR grant FA9550-13-1-0138.
REFERENCES
[1] M. Bellare, T. Ristenpart, and S. Tessaro, “Multi-instance
security and its application to password-based cryptography,”
in Advances in Cryptology – CRYPTO 2012. Springer Berlin
Heidelberg, 2012, pp. 312–329.
[2] S. Billot and B. Lang, “The structure of shared forests
in ambiguous parsing,” in Proceedings of the 27th Annual
Meeting on Association for Computational Linguistics,
Stroudsburg, PA, USA: Association for
ser. ACL ’89.
Computational Linguistics, 1989, pp. 143–151.
[Online].
Available: http://dx.doi.org/10.3115/981623.981641
[3] H. Bojinov, E. Bursztein, X. Boyen, and D. Boneh,
“Kamouﬂage: Loss-resistant password management,” in
ESORICS, 2010, pp. 286–302. [Online]. Available: http:
//dl.acm.org/citation.cfm?id=1888881.1888904
[4] J. Bonneau,
dissertation, University
[Online]. Available:
2012-jbonneau-phd thesis.pdf
“Guessing human-chosen secrets,” Ph.D.
2012.
http://www.cl.cam.ac.uk/∼jcb82/doc/
of Cambridge, May
[5] J. Bonneau, “The science of guessing: analyzing an
anonymized corpus of 70 million passwords,” in Security and
Privacy (SP), 2012 IEEE Symposium on.
IEEE, 2012, pp.
538–552.
[6] J. Bonneau, C. Herley, P. C. van Oorschot, and F. Stajano,
“The Quest
to Replace Passwords: A Framework for
Comparative Evaluation of Web Authentication Schemes,”
in 2012 IEEE Symposium on Security and Privacy, May
2012.
[Online]. Available: http://www.jbonneau.com/doc/
BHOS12-IEEESP-quest to replace passwords.pdf
[7] B. M. Bowen, S. Hershkop, A. D. Keromytis, and S. J.
Stolfo, Baiting Inside Attackers Using Decoy Documents,
2009, pp. 51–70. [Online]. Available: http://dx.doi.org/10.
1007/978-3-642-05284-2 4
[8] B. M. Bowen, V. P. Kemerlis, P. Prabhu, A. D. Keromytis, and
S. J. Stolfo, “Automating the injection of believable decoys to
detect snooping,” in WiSec. ACM, 2010, pp. 81–86. [Online].
Available: http://doi.acm.org/10.1145/1741866.1741880
[9] X. Boyen, “Halting Password Puzzles – Hard-to-break En-
cryption from Human-memorable Keys,” in 16th USENIX
Security Symposium. Berkeley: The USENIX Association,
2007, pp. 119–134, available at http://www.cs.stanford.edu/
∼xb/security07/.
[10] L. Breiman, “Random Forests,” Machine learning, vol. 45,
no. 1, pp. 5–32, 2001.
[11] C. Castelluccia, M. D¨urmuth, and D. Perito, “Adaptive
password-strength meters from markov models.” in NDSS,
2012.
[12] R. Chatterjee, J. Bonneau, A. Juels, and T. Ristenpart,
“Cracking-resistant password vaults using natural-language
encoders,” 2015, available from the authors’ websites.
[13] S. Chiasson, P. van Oorschot, and R. Biddle, “A Usability
Study and Critique of Two Password Managers,” in Proceed-
ings of the 15th USENIX Security Symposium, 2006.
497497
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:53 UTC from IEEE Xplore.  Restrictions apply. 
[14] M. M. Devillers, “Analyzing password strength,” Radboud
University Nijmegen, Tech. Rep, 2010.
[15] R. Dhamija and J. D. Tygar, “The battle against phishing: Dy-
namic security skins,” in Proceedings of the 2005 symposium
on Usable privacy and security. ACM, 2005, pp. 77–88.
[16] G. Dick and H. Ceriel, “Parsing techniques, a practical guide,”
Technical Report, Tech. Rep., 1990.
[17] E. Gabber, P. B. Gibbons, Y. Matias, and A. J. Mayer, “How
to Make Personalized Web Browising Simple, Secure, and
Anonymous,” in FC ’97: Proceedings of the 1st International
Conference on Financial Cryptography.
London, UK:
Springer-Verlag, 1997, pp. 17–32.
[18] J. A. Halderman, B. Waters, and E. W. Felten, “A Convenient
Method for Securely Managing Passwords,” in WWW ’05:
Proceedings of the 14th International Conference on World
Wide Web. New York, NY, USA: ACM, 2005, pp. 471–479.
[19] M. E. Hellman, “A cryptanalytic time-memory trade-off,”
Information Theory, IEEE Transactions on, vol. 26, no. 4,
pp. 401–406, 1980.
[29] Z. Li, W. He, D. Akhawe, and D. Song, “The emperor’s new
password manager: Security analysis of web-based password
managers,” in 23rd USENIX Security Symposium (USENIX
Security 14), 2014.
[30] J. Ma, W. Yang, M. Luo, and N. Li, “A study of probabilistic
password models,” in Proceedings of the 2014 IEEE Sym-
posium on Security and Privacy.
IEEE Computer Society,
2014, pp. 689–704.
[31] D. McCarney, D. Barrera, J. Clark, S. Chiasson, and P. C.
van Oorschot, “Tapas: Design, Implementation, and Usability
Evaluation of a Password Manager,” in Proceedings of the
28th Annual Computer Security Applications Conference,
ser. ACSAC ’12. New York, NY, USA: ACM, 2012,
pp. 89–98. [Online]. Available: http://doi.acm.org/10.1145/
2420950.2420964
[32] P. Oechslin, “Making a faster cryptanalytic time-memory
in Cryptology-CRYPTO 2003.
in Advances
trade-off,”
Springer, 2003, pp. 617–630.
[33] C. Percival, “Stronger key derivation via sequential memory-
hard functions,” 2009.
[20] D. Hoover and B. Kausik, “Software smart cards via cryp-
tographic camouﬂage,” in IEEE Symposium on Security and
Privacy.
IEEE, 1999, pp. 208–215.
[34] B. Ross, C. Jackson, N. Miyake, D. Boneh, and J. Mitchell,
“Stronger password authentication using browser extensions,”
in USENIX Security, 2005.
[21] M. Jakobsson and M. Dhiman, “The beneﬁts of understanding
Springer, 2013, pp.
passwords,” in Mobile Authentication.
5–24.
[35] R. Veras, C. Collins, and J. Thorpe, “On the semantic patterns
of passwords and their security impact,” in Network and
Distributed System Security Symposium (NDSS), 2014.
[36] L. Von Ahn, M. Blum, N. J. Hopper, and J. Langford,
“CAPTCHA: Using hard AI problems for security,” in Ad-
vances in Cryptology—EUROCRYPT 2003. Springer, 2003,
pp. 294–311.
[37] M. Weir, S. Aggarwal, B. de Medeiros, and B. Glodek, “Pass-
word cracking using probabilistic context-free grammars,” in
IEEE Symposium on Security and Privacy (SP), 2009, pp.
162–175.
[38] L. Whitney, “LastPass CEO reveals details on security
breach,” CNet, May 2011.
[39] K.-P. Yee and K. Sitaker, “Passpet: convenient password
management and phishing protection,” in Proceedings of the
second symposium on Usable privacy and security. ACM,
2006, pp. 32–43.
[22] A. Juels, “A bodyguard of lies: the use of honey objects in
information security,” in SACMAT, 2014, pp. 1–4.
[23] A. Juels and T. Ristenpart, “Honey Encryption: Beyond the
brute-force barrier,” in Advances in Cryptology – EURO-
CRYPT. Springer, 2014, pp. 523–540.
[24] A. Juels and R. Rivest, “Honeywords: Making password-
cracking detectable,” in ACM Conference on Computer and
Communications Security – CCS 2013. ACM, 2013, pp.
145–160.
[25] B. Kaliski, “PKCS #5: Password-based cryptography speciﬁ-
cation version 2.0,” 2000, RFC 2289.
[26] A. Karole, N. Saxena, and N. Christin, “A comparative
usability evaluation of traditional password managers,” in
Information Security and Cryptology - ICISC 2010, ser.
Lecture Notes
in Computer Science, K.-H. Rhee and
D. Nyang, Eds.
Springer Berlin Heidelberg, vol. 6829,
pp. 233–251. [Online]. Available: http://dx.doi.org/10.1007/
978-3-642-24209-0 16
[27] P. Kelley, S. Komanduri, M. Mazurek, R. Shay, T. Vidas,
L. Bauer, N. Christin, L. Cranor, and J. Lopez, “Guess again
(and again and again): Measuring password strength by sim-
ulating password-cracking algorithms,” in IEEE Symposium
on Security and Privacy (SP), 2012, pp. 523–537.
[28] J. Kelsey, B. Schneier, C. Hall, and D. Wagner, “Secure
applications of low-entropy keys,” in Information Security.
Springer, 1998, pp. 121–134.
498498
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:53 UTC from IEEE Xplore.  Restrictions apply.