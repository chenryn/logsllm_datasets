您需要拥有 GitHub 转帖的所有者权限，然后就可以开始了！
# 创建. travis.yml 文件
特拉维斯 CI 的主要元素是`.travis.yml`文件的创建。
Be sure to name it exactly like this (including the initial dot and the `.yml` extension) and include it in the root directory of your GitHub repo. If not, Travis CI builds won't start. Please note that, in the example repo, the file is in the **root directory** and **not** under the `Chapter04` subdirectory. 
`.travis.yml`描述构建及其不同的步骤。构建在一个或多个虚拟机中执行。可以通过指定通用操作系统和特定版本来配置这些虚拟机。默认情况下，它们运行在 Ubuntu Linux 14.04 Trusty 中。您可以在这里找到更多关于可用操作系统的信息:[https://docs.travis-ci.com/user/reference/overview/](https://docs.travis-ci.com/user/reference/overview/)。
使用 Docker 可以让我们抽象出大部分的操作系统差异，但是需要保证我们使用的具体`docker`和`docker-compose`版本是正确的。
我们将使用以下代码启动`.travis.yml`，确保存在有效的`docker-compose`版本(1.23.2):
```
services:
  - docker
env:
  - DOCKER_COMPOSE_VERSION=1.23.2
before_install:
  - sudo rm /usr/local/bin/docker-compose
  - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin
  - docker --version
  - docker-compose version
```
`before_install`块将在我们所有的虚拟机中执行。现在，为了运行测试，我们添加了一个`script`块:
```
script:
- cd ch4
- docker-compose build db
- docker-compose build static-analysis
- docker-compose build test-postgresql
- docker-compose run test-postgresql
- docker-compose run static-analysis
```
我们构建所有要使用的映像，然后运行测试。请注意，使用 PostgreSQL 数据库运行测试需要您构建`db`容器。
There's a small detail about the `db` container: the Travis VM doesn't allow us to open port `5432`. We removed `ports` in `docker-compose` for that. Note that this only makes PostgreSQL available externally for debugging purposes; internally, the containers can talk to each other through their internal network.
We created a `db-debug` service that's a copy of `db` but it exposes the port for local development. You can check it in the `docker-compose.yaml` file at [https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/blob/master/Chapter04/docker-compose.yaml](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/blob/master/Chapter04/docker-compose.yaml).
这会运行所有测试。推进回购后，我们可以看到构建从 Travis CI 开始:
![](img/cbc98740-909b-426f-a13c-87ee5e1bb86a.png)
一旦完成，我们可以通过它被标记为绿色的事实来判断构建是成功的。然后可以查看日志以了解更多信息:
![](img/7eb1ed98-42f7-4c6c-bc9c-a9490165daf5.png)
现在，您可以看到日志末尾的测试:
![](img/299c2d36-633a-4dc6-acce-bd4a49d3c8fb.png)
这对于检测问题和构建中断非常有用。现在，让我们看看工作是如何在特拉维斯工作的。
# 和特拉维斯·乔布斯一起工作
Travis 将整个构建分成一个接一个运行的阶段集合。在每个阶段，可以有几个工作。同一版本中的所有作业将并行运行。
正如我们之前看到的，我们可以将测试和静态分析配置为并行运行，方法是将`script`部分替换为`jobs`部分:
```
jobs:
  include:
    - stage: tests
      name: "Unit Tests"
      script:
      - cd ch4
      - docker-compose build db
      - docker-compose build test-postgresql
      - docker-compose run test-postgresql
    - stage: tests
      name: "Static Analysis"
      script:
      - cd ch4
      - docker-compose build static-analysis
      - docker-compose run static-analysis
```
这就在一个阶段中隐含地创造了两个工作岗位。舞台名为`tests`，工作名为`"Unit Tests"`和`"Static Analysis"`。
结果显示在特拉维斯页面上:
![](img/4644a76d-718c-4224-ae01-55a00fcfed62.png)
请注意，在这两种情况下，由于作业是独立的，它们需要构建所需的映像。由于单元测试作业需要构建`db`映像，这需要几分钟，因此比静态分析要慢。
您可以查看每个作业的详细日志。注意环境设置和`before_install`动作在所有作业中是如何执行的。
这种划分不仅可以大大加快构建速度，还可以明确问题所在。简单地看一下，您可以看到中断因素要么是单元测试，要么是静态分析。这消除了混乱。
# 发送通知
默认情况下，Travis CI 会发送一封电子邮件来通知构建的结果，但仅当构建被破坏或修复了被破坏的构建时。这避免了不断发送*成功*电子邮件，并且仅在需要采取行动时才采取行动。默认情况下，电子邮件只发送给提交者(和提交作者，如果不同的话)。
Note that there's a difference between *failed* builds and *errored* builds. The latter are failures in the job setup, which means that there's a problem in the `before_install`, `install`, or `before_script` sections, while failed builds arise because the script part returned a non-zero result. *Errored* builds are common while changing Travis configuration.
Travis 允许我们配置通知电子邮件，并连接更多的通知系统，包括 Slack、IRC，甚至 OpsGenie，它能够根据通话时间表发送短信。查看此处的完整文档了解更多信息:[https://docs.travis-ci.com/user/notifications/](https://docs.travis-ci.com/user/notifications/)。
# 配置 GitHub
为了充分利用我们配置的配置项系统，我们需要确保在将其合并到主分支之前检查构建。为此，我们可以将 GitHub 中的`master`配置为主分支，并在合并到其中之前添加需求:
Be sure that the `.travis.yaml` file contains the proper credentials if you fork the repo. You'll need to update them with your own. 
1.  转到我们的 GitHub 报告中的设置和分支，然后单击添加规则。
2.  然后，我们启用“在合并选项之前要求状态检查通过”选项和来自`travis-ci`的状态检查:
![](img/2516fab5-583a-48a2-be37-387f168305a1.png)
3.  我们还选择了“要求分支在合并前是最新的”选项。这确保了没有之前没有运行过的合并到`master`中。
Take a look at the other possibilities that GitHub offers. In particular, enforcing code reviews is advisable to make code to be reviewed before being merged and disseminating knowledge. 
4.  在创建了一个新的分支和一个设计为静态测试失败的新拉请求之后，我们可以看到测试是如何被添加到 GitHub 的:
![](img/e488d600-6062-4a6b-8d20-7c7e5a45be61.png)
详细信息链接将带您进入特拉维斯配置项和特定的构建。您还可以看到构建的历史:
![](img/1d635138-eae4-4a5d-9387-7c4c490e4a8d.png)
当构建完成时，GitHub 不会让您合并请求:
![](img/fec96e7a-1b64-408a-8df3-aea645993129.png)
详细信息可在 Travis CI 的构建页面上找到:
![](img/4f036c07-0a5a-4372-87a7-8c15e38b626f.png)
修复问题并推送代码将触发另一个构建。这次会成功，拉取请求会合并成功。您可以看到每个提交都有自己的构建信息，无论它是正确的还是不正确的:
![](img/6325f284-fdb6-4df2-b7c4-d0dda7ffe9c5.png)
我们现在可以合并到主分支中，确信`master`分支在运行测试时不会中断。
Note that there are two builds in the pull request: one for the branch and another for the pull request. By default, Travis CI has that configuration. If you force it to always create a pull request before merging, the request will be redundant, though it can help in some cases when the branch gets pushed before creating a pull request. You can enable or disable it in the Travis project configuration.
Another interesting feature that can be configured is automatically canceling builds if a newer commit is pushed. This helps to reduce the total number of builds in the system.
构建结果也可以在 GitHub 的提交视图中检查。
# 从特拉维斯 CI 推送 Docker 映像
在我们的构建创建了 Docker 映像之后，我们需要能够与团队的其他成员共享或部署它。我们将使用 Docker Hub 中的 Docker 注册表来推送映像，如前一章所述。
让我们从设置机密变量开始。
# 设置机密变量
为了能够推送至 Docker repo，我们首先需要配置一个密码来登录 Docker 注册表。这需要通过 Travis CI 中的机密配置来完成，以避免在 GitHub repo 中提交敏感信息:
It's worth repeating: **do not commit secrets in your GitHub repo**. These techniques can be used for any other required secret.
1.  使用`gem`安装`travis`命令行。这假设您的系统上安装了`gem`(Ruby 1.93 或更高版本)。如果没有，请查看安装说明([https://github.com/travis-ci/travis.rb#installation](https://github.com/travis-ci/travis.rb#installation)):
```
$ gem install travis
```
2.  登录特拉维斯: