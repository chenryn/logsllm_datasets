per second.
By comparison,
in ORAM,
reshufﬂing level
the network transfer
i consists of about
time alone for
10 sorts of 4i log n data, each sort therefore requiring
4i log(n) log2(4i log n) block transfers, for a total of 10 ∗
4i ∗ log(n) ∗ log2(4i log n) ∗ 210/10M B/sec. Summing
over the log4 n levels, and amortizing each level over 4i−1
queries, ORAM has an amortized network trafﬁc cost per
query of P15
614KBP15
i←1 10 ∗ 4 ∗ 15 ∗ log2(15 ∗ 4i) ∗ 210B =
i←1(log 15 + log 4i)2 ≈ 3.680GB. Over the
considered 10MByte/s link this results in a 368 sec/query
amortized transfer time, almost three orders of magnitude
slower.
Achieving PIR. So far we have described how to imple-
ment an ORAM-type of mechanism providing access pat-
tern privacy for private data. A general PIR implementation
)
s
d
n
o
c
e
s
(
e
m
T
i
)
s
d
n
o
c
e
s
(
e
m
T
i
Resource use per query: normal client
Resource use per query: IBM 4764
 1.4
 1.2
 1
 0.8
 0.6
 0.4
 0.2
 0
 1
Network Transfer (10MB/s link.)
Network Latency (50ms RTT)
Disk Transfer (50MB/s R/W rate)
Client Encrypt/Decrypt (100MB/s AES)
Disk Seek Latency (5ms seek time)
 100
 10000
 1e+06
 1e+08
 1e+10
 1e+12
Database size (1000-byte blocks)
)
s
d
n
o
c
e
s
(
e
m
T
i
 1.4
 1.2
 1
 0.8
 0.6
 0.4
 0.2
 0
 1
Link Transfer (80MB/s Bus.)
Link Latency (.1ms Bus RTT)
Disk Transfer (50MB/s R/W rate)
Client Encrypt/Decrypt (10MB/s AES)
Disk Seek Latency (5ms seek time)
 100
 10000
 1e+06
 1e+08
 1e+10
 1e+12
Database size (1000-byte blocks)
Resource usage per query vs. database blocksize for 1TB database
Query throughput vs. network bandwidth for 1TB database (1000-byte blocks)
 1.4
 1.2
 1
 0.8
 0.6
 0.4
 0.2
 0
Network Transfer (10MB/s link.)
Network Latency (50ms RTT)
Disk Transfer (50MB/s R/W rate)
Client Encrypt/Decrypt (10M0B/s AES)
Disk Seek Latency (5ms seek time)
 7
 6
 5
 4
 3
 2
 1
)
d
n
o
c
e
s
r
e
p
s
e
i
r
e
u
Q
(
t
u
p
h
g
u
o
r
h
T
 0
 500  1000  1500  2000  2500  3000  3500  4000  4500  5000
 0
 100000
 1e+06
 1e+07
 1e+08
 1e+09
Block size (bytes)
Network throughput (Bytes/s)
Figure 7. Amortized use of resources per query (a) for a normal client and (b) using the IBM 4764 SCPU as a client. (c) resource
usage as the the database block size is varied, and (d) estimated query throughput as the the network link capacity is varied. Both
(c) and (d) assume a ﬁxed database size of 1TB.
requires a client to be able to download from a public server,
meaning the client does not have access to prearranged se-
cret keys. As discussed in Section 1 by implementing the
access pattern privacy on a SCPU, we can achieve general
PIR. The secure CPU maintains the encrypted database, and
never leaks any of the encryption keys. Clients who wish to
retrieve an item privately then interact with the main data
through the SCPU.
Figure 7 shows that when we implement PIR on the se-
cure CPU, the bottleneck is no longer the network band-
width, but the en/decryption times. Under our sample con-
ﬁguration, the new bottleneck matches the old one, leav-
ing us at 560ms per query, or just under 2 queries per sec-
ond. Additionally, of concern is the limited SCPU stor-
sponding to a chance of failure less than 4p n
4q 250
age. By setting c (the security parameter) to 10, corre-
2π e−c2/2 <
2π e−102/2 < e−25, 32MB of RAM available on a
SCPU can support databases of sizes up to 10TB, for 1 byte
blocks, or 10GB, for 1 KB blocks.
Memory Pooling. A key advantage to our algorithm is
that the working buffers are only used for a small period of
time and are transient, thus requiring no backup. Therefore
the high cost of client storage maintenance is avoided since
no data is lost if the working memory is lost. A second ad-
vantage is that resources can be pooled between SCPUs to
support larger databases. For example, if a storage provider
manages 10 SCPUs for 10 customers, and if the working
buffer is only in use for 10% of the time, the provider can
pool the secure storage between SCPUs, allowing for an
effective secure storage area of 320 MB instead of just 32
MB. This would allow the provider to support databases of
size 1015 1-byte blocks per client, or 1 TB if consisting of
1-KB blocks.
The limiting factor in pooling is the percentage of time
the secure CPUs are put to use. This will vary based on the
actual transaction patterns of the clients. If transactions are
run continuously at the maximum throughput, we expect the
idle time to be around 50%. If there are idle periods, how-
ever, and the average throughput is lower, each SCPU may
see a much higher idle time. Note that if a provider over-
estimates the idle time of the CPUs, by supporting larger
customer databases, the performance will suffer as clients
must wait for each others’ SCPUs to become free.
Existing PIR.
Trivial PIR (transfering the entire
database to the SCPU for every query) will have a bottle-
neck shared by the bus transfer time and the disk transfer
time, of 50MB/sec. For our 1TB database, this will require
about 22000 seconds per query 1.
The PIR protocol introduced in [23] offers an amortized
complexity of O(n/k) for database size n and secure stor-
age size k. For k = O(√n), this yields an overhead of
O(√n) per query. This is proving to be a reasonable esti-
mate of k, since as described earlier in this paper, database
sizes and hard disk capacity are increasing much faster than
secured storage capacity. As databases become larger, our
superior O(log2(n)) complexity becomes increasingly nec-
essary for obtaining practicality.
6 Conclusions
We introduced a (ﬁrst) practical PIR mechanism, orders
of magnitude faster than existing mechanisms. We have an-
alyzed its overheads and security properties. We validated
its practicality by exploring achievable throughputs on cur-
rent off the shelf hardware. In future work we believe it is
important to increase achievable throughputs. We are look-
ing for ways to de-amortize the ofﬂine level reorder cost.
Moreover, as the bulk of the overhead in this technique is
related to the fake blocks, we are currently exploring al-
ternate constructions that hide which level is accessed for
a particular query, potentially bringing the amortized over-
head to O(lg n lg lg n) per query.
7 Acknowledgments
We would like to thank Bogdan Carbunar for numerous
discussions and feedback, as well as our anonymous review-
ers, who offered helpful insights.
1We have already shown that no existing non-trivial PIR mechanism
can be faster than the trivial PIR case [22].
References
[1] FilesAnywhere.
Online at http://www.filesanywhere.
com/.
[2] GMail. Online at http://gmail.google.com/.
[3] Xdrive. Online at http://www.xdrive.com/.
[4] Yahoo Mail. Online at http://mail.yahoo.com/.
[5] IBM 4764 PCI-X Cryptographic Coprocessor (PCIXCC). Online
at http://www-03.ibm.com/security/cryptocards/
pcixcc/overview.shtml, 2006.
[6] M. Ajtai, J. Komlos, and E. Szemeredi. An o(n log n) sorting net-
In Proceedings of the 25th ACM Symposium on Theory of
work.
Computing, pages 1–9, 1983.
[7] D. Asonov. Querying Databases Privately: A New Approach to Pri-
vate Information Retrieval. Springer Verlag, 2004.
[8] B. Chor, O. Goldreich, E. Kushilevitz, and M. Sudan. Private infor-
mation retrieval. In IEEE Symposium on Foundations of Computer
Science, pages 41–50, 1995.
[9] CNN. Feds seek Google records in porn probe. Online at http:
//www.cnn.com, January 2006.
[10] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and
Introduction to Algorithms, Second Edition. MIT
Clifford Stein.
Press and McGraw-Hill, 2001.
[11] Michael Fowler.
random walk.
On-
line at http://galileo.phys.virginia.edu/classes/
152.mf1i.spring02/RandomWalk.htm.
A one-dimensional
[12] Gartner, Inc. Server Storage and RAID Worldwide. Technical report,
Gartner Group/Dataquest, 1999. www.gartner.com.
[13] W. Gasarch. A WebPage on Private Information Retrieval. Online at
http://www.cs.umd.edu/˜gasarch/pir/pir.html.
[14] W. Gasarch. A survey on private information retrieval, 2004.
[15] Ian Goldberg. Improving the Robustness of Private Information Re-
trieval. In Proceedings of the 2007 IEEE Symposium on Security and
Privacy, May 2007.
[16] O. Goldreich. Foundations of Cryptography. Cambridge University
Press, 2001.
[17] Oded Goldreich and Rafail Ostrovsky. Software protection and sim-
ulation on oblivious ram. Journal of the ACM, 45:431–473, May
1996.
[18] A.
Iliev and S.W. Smith.
Private information storage with
logarithmic-space secure hardware. In Proceedings of i-NetSec 04:
3rd Working Conference on Privacy and Anonymity in Networked
and Distributed Systems, pages 201–216, 2004.
[19] Helger Lipmaa.
Aes ciphers:
speed.
Online at http:
//www.adastral.ucl.ac.uk/˜helger/research/
aes/rijndael.html.
[20] Michael Mitzenmacher and Eli Upfal. Probability and Computing:
Randomized Algorithms and Probabilistic Analysis. Cambridge Uni-
versity Press, 2006.
[21] Len Sassaman, Bram Cohen, and Nick Mathewson. The pynchon
In WPES,
gate: a secure method of pseudonymous mail retrieval.
pages 1–9, 2005.
[22] Radu Sion and Bogdan Carbunar. On the Practicality of Private In-
formation Retrieval. In Proceedings of the Network and Distributed
Systems Security Symposium, 2007. Stony Brook Network Security
and Applied Cryptography Lab Tech Report 2006-06.
[23] Shuhong Wang, Xuhua Ding, Robert H. Deng, and Feng Bao. Private
information retrieval using trusted hardware. In Proceedings of the
European Symposium on Research in Computer Security ESORICS,
pages 49–64, 2006.