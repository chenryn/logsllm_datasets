# SQL
## SQL查询语言概览
- 数据定义语言（DDL）
- 数据操纵语言（DML）
- 完整性
- 视图定义
- 事务控制
- 嵌入式SQL和动态SQL
- 授权
## SQL数据定义
### 基本类型
- char(n):固定长度的字符串（会追加空格）
- varchar(n):可变长度的字符串
- int：整数类型
- smallint：小整数类型（和机器相关）
- numeric(p,d):定点数，p位数，d位小数
- real，double，precision：浮点数与双精度浮点数，精度与机器相关
- float(n)：精度至少为n位的浮点数
### 表定义
create table 命令的通用形式
```sql
CREATE TABLE r
(
    A1 D1,
    A2 D2,
    AN DN,
    ,
);
```
示例：
```sql
CREATE TABLE department(
    dept_name VARCHAR(20) NOT NULL,
    building VARCHAR(15), -- 如果不指定 默认为NULL
    budget NUMERIC(12,2) DEFAULT 999, -- 指定默认值
    PRIMARY KEY(dept_name)
);
```
### 表更新
DBMS对表更新的约束既复杂又不统一
```sql
ALTER TABLE vendors ADD vend_phone CHAR(20); -- 增加字段
ALTER TABLE vendors DROP COLUMN vend_phone; -- 删除字段
```
SQLite不支持使用ALTER TABLE 语句定义主键跟外键。在使用ALTER TABLE语句应极为小心，使用前应对表进行备份
### 删除表
```sql
DROP TABLE cust_copy;
```
### 重命名表
RENAME/sp_rename/ALTER TABLE
#### 完整性约束
- PRIMARY KEY：取值唯一
- FOREIGN KEY:外键约束
- NOT NULL :非空约束
## SQL查询
```sql
SELECT prod_name FROM products; -- 查询单列
SELECT prod_name, prod_price FROM products; -- 查询多列
SELECT * FROM products; -- 检索所有列
SELECT DISTINCT vend_id FROM products; -- 结果去重（DISTINCT作用在整行上，不针对某个具体列）
```
SQL关键字不区分大小写，但对象名区分，在不同的DBMS跟操作系统区分大小写可能会有不同。
*通配符通常会降低检索性能，但好处就是能匹配未知列。
- SELECT子句还可进行加减乘除运算
- WHERE子句选出满足条件的元组
### 分页
不同的数据库分页不尽相同
```sql
SELECT TOP 5 * FROM products; -- SQL Server
SELECT * FROM products FETCH FIRST 5 ROWS ONLY; -- DB2
SELECT * FROM products WHERE ROWNUM  or != | 不等于
        | 大于
>=       | 大于等于
!>       | 不大于
BETWEEN  | 在两个值之间
IS NULL  | 为NULL值
#### 高级数据过滤
```sql
SELECT * FROM products WHERE prod_price=3.49 OR prod_price = 5.99; -- 逻辑OR
SELECT * FROM products WHERE prod_price=3.49 AND prod_price 1000
-- 查询访问次数1000的那些天
```
### 子查询
*MySQL4.1后才支持子查询*
```sql
SELECT username FROM user WHERE user_id IN 
(SELECT user FROM state);
-- 查询发表过动态的用户
```
作为子查询的SQL只能查询单个列
```sql
SELECT cust_name,
  (SELECT COUNT(*) FROM orders WHERE orders.cust_id = customers.cust_id)
FROM customers;
-- 将子查询作为计算字段
```
### 联结
联结是一种机制，用来在一条SELECT语句中关联表
```sql
SELECT name,instructor.dept_name,building
FROM instructor , department
WHERE instructor.dept_name = department.dept_name; -- 在联结中，特别需要注意列的全限定名
```
上面的这种联结叫做等值联结，等值联结等同于内联结：
```sql
SELECT name,instructor.dept_name,building
FROM instructor INNER JOIN department
ON instructor.dept_name = department.dept_name;
```
笛卡尔积：
表1：
name | age
---- | ---
小明   | 15
小红   | 16
表2：
grade | school
----- | ------
5     | 中心小学
6     | 中心小学
两张表的笛卡尔积是：
name | age | grade | school
---- | --- | ----- | ------
小明   | 15  | 5     | 中心小学
小红   | 16  | 6     | 中心小学
小明   | 15  | 6     | 中心小学
小红   | 16  | 5     | 中心小学
笛卡尔积也被称为叉联结(cross join)
联结可以跨多张表：
```sql
SELECT * FROM orderitems, products, vendors;
```
但联结表越多，性能下降越厉害，基于此，许多DBMS都对联结的表数量做了限制，[阿里的p3c中也规定联结表的数量不得超过3张](编程语言/JAVA/p3c.md#索引规约)
#### 自连接
```sql
SELECT * FROM customers AS c1, customers AS c2
WHERE C1.cust_name = c2.cust_name
AND c2.cust_contact = 'Jim Jones'; -- 查出与Jim Jones同公司的顾客
```
许多DBMS处理自联结往往比子查询快得多
#### 自然连接
```sql
SELECT name,instructor.dept_name,building
FROM instructor , department
WHERE instructor.dept_name = department.dept_name
```
上面那条SQL可以简化成下列形式：
```sql
SELECT name,instructor.dept_name,building
FROM instructor NATURAL JOIN department
```
#### 外连接
- 左外连接：只保留出现在左外连接左边的关系中的元组（如果没有符合连接条件的元组，左表的元组还是会被展示出来）
- 右外连接：只保留出现在右外连接运算右边关系中的元组
- 全外连接：保留出现在两个关系中的元组
左外连接：
```sql
select * from user  
left outer join state on user.user_id = state.user;
-- 把user和state进行连接，如果用户没有发表state，则仍保留用户，只是state相关列为NULL
```
右外连接如上取反
全外连接可以包含两个表中不关联的行，许多DBMS不支持
natural join等价于natural inner join
### 集合运算
- 并运算
```sql
SELECT name FROM student WHERE age = 15
UNION
SELECT name FROM student WHERE age = 16
```
每个UNION SELECT语句的列都必须相同，类型必须兼容
UNION会自动去除重复行，如果需要保留重复行，则使用UNION ALL
如果UNION语句需要排序，则在最后一条SELECT语句加上ORDER BY子句，ORDER BY作用于所有UNION语句
- 交运算
INTERSECT关键字 用法同上
- 差运算
EXCEPT 关键字
同上
## 空值