title:Making USB Great Again with USBFILTER
author:Dave (Jing) Tian and
Nolen Scaife and
Adam Bates and
Kevin R. B. Butler and
Patrick Traynor
Making USB Great Again with usbfilter
Dave (Jing) Tian and Nolen Scaife, University of Florida; Adam Bates, University of Illinois at 
Urbana–Champaign; Kevin R. B. Butler and Patrick Traynor, University of Florida
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/tian
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Making USB Great Again with USBFILTER
Dave (Jing) Tian⋆, Nolen Scaife⋆, Adam Bates†, Kevin R. B. Butler⋆, and Patrick Traynor⋆
⋆ University of Florida, Gainesville, FL
† University of Illinois, Urbana-Champaign, IL
{daveti,scaife,adammbates,butler,traynor}@ufl.edu
Abstract
USB provides ubiquitous plug-and-play connectivity for
a wide range of devices. However, the complex na-
ture of USB obscures the true functionality of devices
from the user, and operating systems blindly trust any
physically-attached device. This has led to a number
of attacks, ranging from hidden keyboards to network
adapters, that rely on the user being unable to identify
all of the functions attached to the host. In this paper, we
present USBFILTER, which provides the first packet-level
access control for USB and can prevent unauthorized in-
terfaces from successfully connecting to the host operat-
ing system. USBFILTER can trace individual USB pack-
ets back to their respective processes and block unautho-
rized access to any device. By instrumenting the host’s
USB stack between the device drivers and the USB con-
troller, our system is able to filter packets at a granular-
ity that previous works cannot — at the lowest possible
level in the operating system. USBFILTER is not only able
to block or permit specific device interfaces; it can also
restrict interfaces to a particular application (e.g., only
Skype can access my webcam). Furthermore, our ex-
perimental analysis shows that USBFILTER introduces a
negligible (3-10µs) increase in latency while providing
mediation of all USB packets on the host. Our system
provides a level of granularity and extensibility that re-
duces the uncertainty of USB connectivity and ensures
unauthorized devices are unable to communicate with the
host.
1
Introduction
The Universal Serial Bus (USB) provides an easy-to-use,
hot-pluggable architecture for attaching external devices
ranging from cameras to network interfaces to a single
host computer. USB ports are pervasive; they can of-
ten be found on the front, back, and inside of a com-
mon desktop PC. Furthermore, a single USB connector
may connect multiple device classes. These composite
devices allow disparate hardware functions such as a mi-
crophone and speakers to appear on the same physical
connector (e.g., as provided by a headset). In the host
operating system, technologies such as USBIP [21] pro-
vide the capability to remotely connect USB devices to
a host over a network. The result is a complex combina-
tion of devices and functionalities that clouds the user’s
ability to reason about what is actually connected to the
host.
Attacks that exploit
this uncertainty have become
more prevalent. Firmware attacks such as BadUSB [27]
modify benign devices to have malicious behavior (e.g.,
adding keyboard emulation to a storage device or per-
form automatic tethering to another network). Hardware
attacks [1] may inject malware into a host, provide RF
remote control capabilities, or include embedded proxy
hardware to inject and modify USB packets. Attack-
ers may also exfiltrate data from the host by leveraging
raw I/O (e.g., using libusb [14]) to communicate with
the USB device directly, or bypass the security mecha-
nism employed by the USB device controller by sending
specific USB packets to the device from the host USB
controller [4]. Unfortunately, the USB Implementers Fo-
rum considers defending against malicious devices to be
the responsibility of the user [44], who is unlikely to be
able to independently verify the functionality and intent
of every device simply by its external appearance, and
may just plug in USB devices to take a look [43].
Modern operating systems abstract USB authorization
to physical control, automatically authorizing devices
connected to the host, installing and activating drivers,
and enabling functionality. We believe that a finer-
grained control over USB is required to protect users. In
this paper, we make the following contributions:
• Design and develop a fine-grained USB ac-
cess control system: We introduce USBFILTER, a
packet-level firewall for USB. Our system is the first
to trace individual USB packets back to the source
or destination process and interface. USBFILTER
USENIX Association  
25th USENIX Security Symposium  415
rules can stop attacks on hosts by identifying and
dropping unwanted USB packets before they reach
their destination in the host operating system.
• Implement and characterize performance: We
demonstrate how USBFILTER imposes minimal
overhead on USB traffic. As a result, our system
is well-suited for protecting any USB workload.
• Demonstrate effectiveness in real-world scenar-
ios: We explore how USBFILTER can be used
to thwart attacks and provide security guarantees
for benign devices. USBFILTER can pin devices
(e.g., webcams) to approved programs (e.g., Skype,
Hangouts) to prevent malicious software on a host
from enabling or accessing protected devices.
USBFILTER is different from previous works in this
space because it enables the creation of rules that explic-
itly allow or deny functionality based on a wide range
of features. GoodUSB [41] relies on the user to explic-
itly allow or deny specific functionality based on what
the device reports, but cannot enforce that the behav-
ior of a device matches what it reports. SELinux [35]
policies and PinUP [13] provide mechanisms for pinning
processes to filesystem objects, but USBFILTER expands
this by allowing individual USB packets to be associated
with processes. This not only allows our system to per-
mit pinning devices to processes, but also individual in-
terfaces of composite devices.
Our policies can be applied to differentiate individual
devices by identifiers presented during device enumera-
tion. These identifiers, such as serial number, provide
a stronger measure of identification than simple prod-
uct and vendor codes. While not a strong authentication
mechanism, USBFILTER is able to perform filtering with-
out additional hardware. The granularity and extensibil-
ity of USBFILTER allows it to perform the functions of
existing filters [41] while permitting much stronger con-
trol over USB devices.
The remainder of this paper is structured as follows: In
Section 2, we provide background on the USB protocol
and explain why it is not great anymore; in Section 3,
we discuss the security goals, design and implementation
of our system; in Section 4, we discuss how USBFILTER
meets our required security guarantees; in Section 5, we
evaluate USBFILTER and discuss individual use cases; in
Section 6, we provide additional discussion; in Section 7,
we explore related work; and in Section 8, we conclude.
2 Background
A USB device refers to a USB transceiver, USB hub, host
controller, or peripheral device such as a human-interface
EP 0
EP 1
EP 0
EP1
EP 0
EP 1
EP 2
EP 0
EP 1
EP 2
In
Out
Interface 0
In
Out
Interface 1
EP 0
EP 1
EP 2
EP n
Out
EP 0
EP 1
EP 2
EP n
In
Interface 2
USB Device
Figure 1: A detailed view of a generic USB device. Sim-
ilar to a typical USB headset, this device has three inter-
faces and multiple endpoints.
device (HID, e.g., keyboard and mouse), printer, or stor-
age. However, the device may have multiple functions
internally, known as interfaces. An example device with
three interfaces is shown in Figure 1. USB devices with
more than one interface are known as composite devices.
For example, USB headsets often have at least three in-
terfaces: the speaker, the microphone, and the volume
control functionalities. Each interface is treated as an in-
dependent entity by the host controller. The operating
system loads a separate device driver for each interface
on the device.
The USB protocol works in a master-slave fashion,
where the host USB controller is responsible to poll the
device both for requests and responses. When a USB
device is attached to a host machine, the host USB con-
troller queries the device to obtain the conﬁgurations of
the device, and activates a single configuration supported
by the device. For instance, when a smartphone is con-
nected with a host machine via USB, users can choose
it to be a storage or networking device. By parsing the
current active configuration, the host operating system
identifies all the interfaces contained in the configura-
tion, and loads the corresponding device drivers for each
interface. This whole procedure is called USB enumera-
tion [10]. Once a USB device driver starts, it first parses
the endpoints information embedded within this interface
as shown in Figure 1.
While the interface provides the basic information for
the host operating system to load the driver, the endpoint
is the communication unit when a driver talks with the
USB device hardware. Per specification, the endpoint 0
(EP0) should be supported by default, enabling Control
(packet) transfer from a host to a device to further probe
the device, prepare for data transmission, and check for
errors. All other endpoints can be optional though there
is usually at least EP1, providing Isochronous, Inter-
rupt, or Bulk (packet) transfers, which are used by au-
dio/video, keyboard/mouse, and storage/networking de-
vices respectively. All endpoints are grouped into either
In pipes, where transfers are from the device to the host,
416  25th USENIX Security Symposium 
USENIX Association
2
or Out pipes, where transfers are from the host to the
device. This in/out pipe determines the transmission di-
rection of a USB packet. With all endpoints set up, the
driver is able to communicate with the device hardware
by submitting USB packets with different target end-
points, packet types, and directions. These packets are
delivered to the host controller, which calls the controller
hardware to encode USB packets into electrical signals
and send them to the device.
2.1 Why USB Was Great
Prior to USB’s introduction in the 1990s, personal com-
puters used a number of different and often platform-
specific connectors for peripherals. Serial and parallel
ports, PS/2, SCSI, ADB, and others were often not hot-
pluggable and required users to manually set configura-
tion options (such as the SCSI ID). The widespread in-
dustry adoption of USB fixed many of these issues by
providing a common specification for peripherals. Hard-
ware configuration is now handled exclusively by the
host, which is able to manage many devices on a sin-
gle port. The relative ease with which a USB peripheral
can be installed on a host is simultaneously its greatest
and most insecure property.
The USB subsystem has been expanded in software
as well, with Virtio [30] supporting I/O virtualization in
KVM, enabling virtual USB devices in VMs, and pass-
ing through the physical devices into VMs. USBIP [21]
transfers USB packets via IP, making remote USB de-
vice sharing possible. Wireless USB (WUSB) [19] and
Media Agnostic USB (MAUSB) [16] promote the avail-
ability of USB devices by leveraging different wireless
communication protocols, making the distinction among
local USB devices, virtual ones, and remote ones vanish.
Overall, the utility and complexity of USB has been
steadily increasing in both hardware and software. Ad-
vances in circuit and chip design now allow hidden func-
tionality to be placed inside the USB plug [1]. The ease-
of-use that made USB great now threatens users by ob-
scuring the individual interfaces in a USB device.
2.2 How USB Lost its Greatness
Attacks on USB prey on the fundamental misunderstand-
ing of how devices are constructed from interfaces. At-
tacks such as BadUSB [27] and TURNIPSCHOOL [1]
(itself designed on specifications from nation-state ac-
tors) use composite devices to present multiple interfaces
to a host. Often these include one benign or expected in-
terface and one or more malicious interfaces, including
keyboards [9, 27] and network interfaces [27, 1]. With-
out communicating with the host operating system, a
malicious USB device can only obtain power from the
host. While it may be possible to perform power anal-
ysis attacks without sending USB packets, we focus on
the problem of connecting malicious devices to the host’s
operating system. All of these attacks share a common
thread: they attach an unknown interface to a host with-
out the user’s knowledge. Since operating systems im-
plicitly trust any device attached, these hidden functions
are enumerated, their drivers are loaded, and they are
granted access to the host with no further impediment.
Data exfiltration from host machines may be the main
reason why USB storage is banned or restricted in enter-
prise and government environments. Current secure stor-
age solutions rely on access control provided by the host
operating system [23] or use network-based device au-
thentication [22]. While access controls can be bypassed
by raw I/O, which communicates to the device directly
from userspace (e.g., using libusb [14]), network-based
methods are vulnerable to network spoofing (e.g., ARP
spoofing [32] and DNS spoofing [36]).
It is thus un-
clear whether data exfiltration has occurred or not until
the USB port is glued or locked [39]. The remainder of
this paper will show how a packet-level filter for USB
permits fine-grained access controls, eliminating the im-
plicit trust model while providing strong guarantees.
3 USB Access Control
The complex nature of the USB protocol and the variety
of devices that can be attached to it makes developing a
robust and efficient access control mechanism challeng-
ing. Layers in the operating system between the process
and the hardware device create difficulties when identi-
fying processes. Accordingly, developing a system such
as USBFILTER is not as simple as intercepting USB pack-
ets and dropping those that match rules. In this section,
we discuss our security goals, design considerations, and
implementation of USBFILTER while explaining the chal-
lenges of developing such a system.
3.1 Threat and Trust Models
We consider an adversary against our system who has
restricted external physical or full network access to a
given host. The adversary may launch physical attacks
such as attaching unauthorized USB devices to the host
system or tampering with the hardware of previously-
authorized devices to add additional functionality. The
physically-present adversary may not open the device or
tamper with the internal storage, firmware, or any other
hardware. This type of adversary might (for example) be
present in an data center or retail location, where devices
have exposed USB ports, but tampering with the chas-
sis of the device would raise suspicion or sound alarms.
The adversary may also launch network attacks in order
USENIX Association  
25th USENIX Security Symposium  417
3
User Space
Kernel Space
Rule 
DB
App1
App2
App3
I/O operation
USBFILTER
USB packet
mouse
keyboard
storage
camera
headset
wireless