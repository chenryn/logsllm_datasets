          v12 = v4[10];
          v29 = v4[3];
          v13 = v4[11];
          v26 = v4[4];
          v14 = v4[12];
          v27 = v4[5];
          v15 = v4[13];
          v30 = v4[7];
          v16 = v4[14];
          v33 = v4[15];
          v31 = v4[8];
          do
          {
            sum = 0;
            do
            {
              sum -= 0x61C88647;
              v32 += (((v28 >> 3) ^ 16 * v9) + (4 * v28 ^ (v9 >> 5))) ^ ((v9 ^ *(int *)((char *)&v40 + (sum & 0xC) - 0x14))// ((char *)&v41 + (v17 & 0xC) - 0x14)这种写法表示:（包括写成-20->0x14）+ (v28 ^ sum));
              v28 += ((*(&v40 + (((unsigned __int8)(sum >> 2) ^ 1) & 3) - 5) ^ v32) + (v25 ^ sum)) ^ (((v25 >> 3) ^ 16 * v32)
                                                                                                    + (4 * v25 ^ (v32 >> 5)));
              v25 += ((*(&v40 + (((unsigned __int8)(sum >> 2) ^ 2) & 3) - 5) ^ v28) + (v29 ^ sum)) ^ (((v29 >> 3) ^ 16 * v28)
                                                                                                    + (4 * v29 ^ (v28 >> 5)));
              v29 += ((*(&v40 + (((unsigned __int8)(sum >> 2) ^ 3) & 3) - 5) ^ v25) + (v26 ^ sum)) ^ (((v26 >> 3) ^ 16 * v25)
                                                                                                    + (4 * v26 ^ (v25 >> 5)));
              v26 += ((*(&v40 + ((sum >> 2) & 3) - 5) ^ v29) + (v27 ^ sum)) ^ (((v27 >> 3) ^ 16 * v29)// 没有异或
                                                                             + (4 * v27 ^ (v29 >> 5)));
              v27 += ((*(&v40 + (((unsigned __int8)(sum >> 2) ^ 5) & 3) - 5) ^ v26) + (v10 ^ sum)) ^ (((v10 >> 3) ^ 16 * v26)
                                                                                                    + (4 * v10 ^ (v26 >> 5)));
              v10 += ((*(&v40 + (((unsigned __int8)(sum >> 2) ^ 6) & 3) - 5) ^ v27) + (v30 ^ sum)) ^ (((v30 >> 3) ^ 16 * v27)
                                                                                                    + (4 * v30 ^ (v27 >> 5)));
              v30 += ((*(&v40 + (((unsigned __int8)(sum >> 2) ^ 7) & 3) - 5) ^ v10) + (v31 ^ sum)) ^ (((v31 >> 3) ^ 16 * v10)
                                                                                                    + (4 * v31 ^ (v10 >> 5)));
              v18 = v31
                  + (((*(&v40 + ((sum >> 2) & 3) - 5) ^ v30) + (v11 ^ sum)) ^ (((v11 >> 3) ^ 16 * v30)// 没有异或
                                                                             + (4 * v11 ^ (v30 >> 5))));
              v11 += ((*(&v40 + (((unsigned __int8)(sum >> 2) ^ 9) & 3) - 5) ^ v18) + (v12 ^ sum)) ^ (((v12 >> 3) ^ 16 * v18)
                                                                                                    + (4 * v12 ^ (v18 >> 5)));
              v31 = v18;
              LOBYTE(v18) = sum >> 2;
              v12 += ((*(&v40 + (((unsigned __int8)v18 ^ 0xA) & 3) - 5) ^ v11) + (v13 ^ sum)) ^ (((v13 >> 3) ^ 16 * v11)
                                                                                               + (4 * v13 ^ (v11 >> 5)));
              v13 += ((*(&v40 + (((unsigned __int8)v18 ^ 0xB) & 3) - 5) ^ v12) + (v14 ^ sum)) ^ (((v14 >> 3) ^ 16 * v12)
                                                                                               + (4 * v14 ^ (v12 >> 5)));
              v14 += ((*(&v40 + ((sum >> 2) & 3) - 5) ^ v13) + (v15 ^ sum)) ^ (((v15 >> 3) ^ 16 * v13)// 没有异或
                                                                             + (4 * v15 ^ (v13 >> 5)));
              v15 += (((v16 >> 3) ^ 16 * v14) + (4 * v16 ^ (v14 >> 5))) ^ ((*(&v40 + (((unsigned __int8)v18 ^ 0xD) & 3) - 5) ^ v14)
                                                                         + (v16 ^ sum));
              v16 += (((v33 >> 3) ^ 16 * v15) + (4 * v33 ^ (v15 >> 5))) ^ ((*(&v40 + (((unsigned __int8)v18 ^ 0xE) & 3) - 5) ^ v15)
                                                                         + (v33 ^ sum));
              v19 = (((v32 >> 3) ^ 16 * v16) + (4 * v32 ^ (v16 >> 5))) ^ ((*(&v40 + (((unsigned __int8)v18 ^ 0xF) & 3) - 5) ^ v16)
                                                                        + (v32 ^ sum));
              *v4 = v32;
              v4[1] = v28;
              v4[2] = v25;
              v4[3] = v29;
              v4[4] = v26;
              v4[5] = v27;
              v9 = v19 + v33;
              v4[7] = v30;
              v4[6] = v10;
              v4[8] = v31;
              v4[9] = v11;
              v4[10] = v12;
              v4[11] = v13;
              v4[12] = v14;
              v4[13] = v15;
              v4[14] = v16;
              v4[15] = v19 + v33;
              v33 += v19;
            }
            while ( sum != 0x8FF34781 );
            ++v34;
          }
          while ( v34 != (char *)16 );
出题人在这个算法前面的逻辑里玩了一个小花招：这段逻辑并不会一开始就出现在main函数中，而是在执行的时候，从`.init_array`取出的函数会将main函数的后方逻辑修改成这个函数的入口。整体逻辑比较偏长，不过可以辨认应该是魔改的XXTEA，并且每16个字节为一组进行的加密。这个题有几个小坑
  * sum是减法而不是TEA算法中常见的加法运算
  * 这几个加密算法中的4，8，12，16个字节的算法不同于其他的加密算法
不过识别出这些坑之后，由于我们知道TEA算法实际上是满足`Feistel
结构`的算法。这一类算法在已知key的情况下，必定是可以反推的。通过观察我们可以知道，`v4[15]`正好是最新的一个状态，所以可以从这个状态往回进行推理。题目中的key就藏在了文件中，于是最终解密代码我们可以写成:
    uint32_t DeryptoLoop(unsigned int num1, unsigned int num2, uint32_t sum, uint32_t index)
    {
        unsigned int key[4] = { 2,2,3,4 };
        //unsigned int key[4] = { 4,3,2,2 };
        uint32_t tmp1 = ((num1 >> 3) ^ 16 * num2) + (4 * num1 ^ (num2 >> 5));
        uint32_t tmp2 = (key[((sum >> 2) ^ index) & 3] ^ num2) + (num1 ^ sum);
        return tmp1 ^ tmp2;
    }
    uint32_t DeryptoLoop2(unsigned int num1, unsigned int num2, uint32_t sum, uint32_t index)
    {
        unsigned int key[4] = { 2,2,3,4 };
        //unsigned int key[4] = { 4,3,2,2 };
        uint32_t tmp1 = ((num1 >> 3) ^ 16 * num2) + (4 * num1 ^ (num2 >> 5));
        uint32_t tmp2 = (key[((sum >> 2)) & 3] ^ num2) + (num1 ^ sum);
        return tmp1 ^ tmp2;
    }
    void decrypt2(unsigned dec_2[16])
    {
        unsigned int state[16];
        unsigned int DELTA = 0x8FF34781;
        unsigned int key[4] = { 2,2,3,4 };
        int round = 0;
        for (int i = 0; i < 16; i++)
        {
            state[i] = enc_2[i];
        }
        do {
            int tmpd = DELTA;
            do {
                state[15] -= DeryptoLoop(state[0], state[14], tmpd, 15);
                state[14] -= DeryptoLoop(state[15], state[13], tmpd, 14);
                state[13] -= DeryptoLoop(state[14], state[12], tmpd, 13);
                state[12] -= DeryptoLoop2(state[13], state[11], tmpd, 12);
                state[11] -= DeryptoLoop(state[12], state[10], tmpd, 11);
                state[10] -= DeryptoLoop(state[11], state[9], tmpd, 10);
                state[9] -= DeryptoLoop(state[10], state[8], tmpd, 9);
                state[8] -= DeryptoLoop2(state[9], state[7], tmpd, 8);
                state[7] -= DeryptoLoop(state[8], state[6], tmpd, 7);
                state[6] -= DeryptoLoop(state[7], state[5], tmpd, 6);
                state[5] -= DeryptoLoop(state[6], state[4], tmpd, 5);
                state[4] -= DeryptoLoop2(state[5], state[3], tmpd, 4);
                state[3] -= DeryptoLoop(state[4], state[2], tmpd, 3);
                state[2] -= DeryptoLoop(state[3], state[1], tmpd, 2);
                state[1] -= DeryptoLoop(state[2], state[0], tmpd, 1);
                state[0] -= DeryptoLoop2(state[1], state[15], tmpd, 0);
                tmpd += 0x61C88647;
            } while (tmpd != 0);
            round += 1;
        } while (round < 16);
        for (int i = 0; i < 16; i++)
        {
            dec_2[i] = state[i];
        }
    }
## 总结
最初只是想作为一个笔记记录一下学习过程，然而后来发现TEA的演进过程十分有趣，于是便想将这个有趣的故事分享给大家。  
算法也是一个不断演进的过程，从TEA，XTEA，即便是XXTEA依然也被提出存在选择明文攻击的可能。安全是一个不断攻防的过程，并且每一个方面都可能称为切入点，这点从Xbox被破解这件事情上也能看的出来。
## 参考链接
[Wiki TEA](https://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm)  
[Wiki XTEA](https://en.wikipedia.org/wiki/XTEA)  
[Wiki XXTEA](https://en.wikipedia.org/wiki/XXTEA)  
[Wiki-Tiny_Encryption_Algorithm](https://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm)  
[Xbox_Security_System_With_TEA_Hash](https://web.archive.org/web/20090416175601/http://www.xbox-linux.org/wiki/17_Mistakes_Microsoft_Made_in_the_Xbox_Security_System#The_TEA_Hash)