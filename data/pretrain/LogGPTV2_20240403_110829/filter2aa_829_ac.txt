Image
Static scanner
Scan results
Figure 1-2: The basic agent architecture
Evading EDR (Early Access) © 2023 by Matt Hand
EDR-Chitecture   11
Early Launch Antimalware (ELAM) components  Features that pro-
vide a Microsoft-supported mechanism for loading an antimalware 
driver before other boot-start services to control the initialization of the 
other boot drivers. These components also grant the ability to receive 
Secure ETW events, a special type of event generated from a group of 
protected event providers. These functions of ELAM drivers are cov-
ered in Chapter 11 and Chapter 12.
While modern EDRs may not implement all of these components, you’ll 
commonly see the ELAM driver deployed alongside the primary kernel 
driver. Figure 1-3 illustrates what a more modern agent architecture may 
look like.
Agent service
Process
Kernel-mode 
driver
Hook DLL
KAPC 
injection
Kernel 
telemetry
Hooked API 
telemetry
Image
Static scanner
Scan results
Filesystem 
miniﬁlter
Network ﬁlter
ELAM driver
ELAM service
Network 
stack
Filesystem
File I/O telemetry
Network telemetry
Secure kernel ETW
events and boot-start 
driver telemetry
ETW
ETW events
Figure 1-3: The intermediate agent architecture
This design builds upon the basic architecture and adds many new 
sensors from which telemetry can be collected. For instance, this EDR can 
now monitor filesystem events such as file creation, consume from ETW 
providers that offer data the agent wouldn’t otherwise be able to collect, 
and observe network communications on the host through its filter driver, 
potentially allowing the agent to detect command-and-control beaconing 
activity. It also adds a layer of redundancy so that if one sensor fails, another 
might be able to pick up the slack.
Advanced
Some products implement more advanced features to monitor specific 
areas of the system in which they’re interested. Here are two examples of 
such features:
Hypervisors  Provide a method for the interception of system calls, 
the virtualization of certain system components, and the sandboxing 
of code execution. These also provide the agent with a way to moni-
tor transitions in execution between the guest and host. They’re com-
monly leveraged as a component of anti-ransomware and anti-exploit 
functionality.
Evading EDR (Early Access) © 2023 by Matt Hand
12   Chapter 1
Adversary deception  Provides false data to the adversary instead of 
preventing the malicious code’s execution. This may cause the adver-
sary to focus on debugging their tooling without realizing that the data 
in use has been tampered with.
Because these are typically product-specific implementations and 
are not commonplace at the time of this writing, we won’t discuss these 
advanced features in significant detail. Additionally, many of the compo-
nents in this category align more closely with prevention strategies rather 
than detection, pushing them slightly outside the scope of this book. As 
time goes on, however, some advanced features may become more common, 
and new ones will likely be invented.
Types of Bypasses
In his 2021 blog post “Evadere Classifications,” Jonny Johnson groups eva-
sions based on the location in the detection pipeline where they occur. 
Using the Funnel of Fidelity, a concept put forth by Jared Atkinson to 
describe phases of the detection-and-response pipeline, Johnson defines 
areas where an evasion can occur. The following are the ones we’ll discuss 
in later chapters:
Configuration Bypass  Occurs when there is a telemetry source on the 
endpoint that could identify the malicious activity, but the sensor failed 
to collect data from it, leading to a gap in coverage. For example, even if 
the sensor is able to collect events from a specific ETW provider related 
to Kerberos authentication activity, it might not be configured to do so.
Perceptual bypass  Occurs when the sensor or agent lacks the capabil-
ity to collect the relevant telemetry. For example, the agent might not 
monitor filesystem interactions.
Logical bypass  Occurs when the adversary abuses a gap in a detec-
tion’s logic. For example, a detection might contain a known gap that 
no other detection covers.
Classification bypass  Occurs when the sensor or agent is unable to 
identify enough datapoints to classify the attacker’s behavior as mali-
cious, despite observing it. For example, the attacker’s traffic might 
blend into normal network traffic.
Configuration bypasses are one of the most common techniques. 
Sometimes they are even used unknowingly, as most mature EDR agents 
have the ability to collect certain telemetry but fail to do so for one reason 
or another, such as to reduce event volume. Perceptual bypasses are gener-
ally the most valuable because if the data doesn’t exist and no compensat-
ing components cover the gap, the EDR has no chance of detecting the 
attacker’s activities.
Logical bypasses are the trickiest to pull off because they generally 
require knowledge of the detection’s underlying logic. Lastly, classification 
bypasses require a bit of forethought and system profiling, but red teams 
Evading EDR (Early Access) © 2023 by Matt Hand
EDR-Chitecture   13
use them frequently (for example, by beaconing over a slow HTTPS chan-
nel to a reputable site for their command-and-control activities). When exe-
cuted well, classification bypasses can approach the efficacy of a perceptual 
bypass for less work than that required for a logical bypass.
On the defense side, these classifications let us discuss blind spots in 
our detection strategies with greater specificity. For instance, if we require 
that events be forwarded from the endpoint agent to the central collection 
server for analysis, our detection is inherently vulnerable to a configuration 
evasion, as an attacker could potentially change the agent’s configuration in 
such a way that the agent–server communication channel is interrupted.
Perceptual bypasses are important to understand but are often the 
hardest to find. If our EDR simply lacks the ability to collect the required 
data, we have no choice but to find another way to build our detection. 
Logical bypasses happen due to decisions made when building the detec-
tion rules. Because SOCs aren’t staffed with an infinite number of analysts 
who can review alerts, engineers always seek to reduce false positives. But for 
every exemption they make in a rule, they inherit the potential for a logical 
bypass. Consider Elastic’s robust Kerberoasting rule described earlier and 
how an adversary could simply change the name of their tool to evade it.
Finally, classification evasions can be the trickiest to protect against. To 
do so, engineers must continue to tune the EDR’s detection threshold until 
it’s just right. Take command-and-control beaconing as an example. Say we 
build our detection strategy by assuming that an attacker will connect to 
a site with an uncategorized reputation at a rate greater than one request 
per minute. In what way could our adversary fly under the radar? Well, they 
might beacon through an established domain or slow their callback interval 
to once every two minutes.
In response, we could change our rule to look for domains to which 
the system hasn’t previously connected, or we could increase the beacon-
ing interval. But remember that we’d risk receiving more false positives. 
Engineers will continue to perform this dance as they strive to optimize 
their detection strategies to balance the tolerances of their organizations 
with the capabilities of their adversaries.
Linking Evasion Techniques: An Example Attack
There is typically more than one way to collect a piece of telemetry. For 
example, the EDR could monitor process-creation events using both a 
driver and an ETW consumer. This means that evasion isn’t a simple matter 
of finding a silver bullet. Rather, it’s the process of abusing gaps in a sensor 
to fly under the threshold at which the EDR generates an alert or takes pre-
ventive action.
Consider Table 1-2, which describes a contrived classification system 
designed to catch command-and-control agent operations. In this example, 
any actions occurring within some window of time whose cumulative score 
is greater than or equal to 500 will cause a high-severity alert. A score higher 
than 750 will cause the offending process and its children to be terminated.
Evading EDR (Early Access) © 2023 by Matt Hand
14   Chapter 1
Table 1-2: An Example Classification System
Activity
Risk score
Execution of an unsigned binary
250
Atypical child process spawned
400
Outbound HTTP traffic originating from a non-browser process
100
Allocation of a read-write-execute buffer
200
Committed memory allocation not backed by an image
350
An attacker could bypass each of these activities individually, but when 
they’re combined, evasion becomes much more difficult. How could we 
chain evasion techniques to avoid triggering the detection logic?
Starting with configuration evasions, let’s imagine that the agent lacks a 
network-inspection sensor, so it can’t correlate outgoing network traffic with 
a client process. However, a compensating control may be present, such as 
an ETW consumer for the Microsoft-Windows-WebIO provider. In that case, 
we might opt to use a browser as a host process or employ another protocol, 
such as DNS, for command and control. We might also use a logical eva-
sion to subvert the “atypical child process” detection by matching typical 
parent–child relationships on the system. For a perceptual evasion, let’s say 
that the agent lacks the ability to scan memory allocations to see if they’re 
backed by an image. As attackers, we won’t need to worry at all about being 
detected based on this indicator.
Let’s put this all together to describe how an attack might proceed. 
First, we could exploit an email client to achieve code execution under 
the context of that process. Because this mail-client binary is a legitimate 
product that existed on the system prior to compromise, we can reasonably 
assume that it is signed or has a signing exclusion. We’ll send and receive 
command-and-control traffic over HTTP, which triggers the detection for a 
non-browser process communicating over HTTP, bringing the current risk 
score up to 100.
Next, we need to spawn a sacrificial process at some point to perform 
our post-exploitation actions. Our tooling is written in PowerShell, but 
rather than spawning powershell.exe, which would be atypical and trigger an 
alert by bringing our risk score to 500, we instead spawn a new instance of 
the email client as a child process and use Unmanaged PowerShell to exe-
cute our tooling inside it. Our agent allocates a read-write-execute buffer in 
the child process, however, raising our risk score to 300.
We receive the output from our tool and determine that we need to 
run another tool to perform some action to further our access. At this 
point, any additional detections will raise our risk score to 500 or greater, 
potentially burning our operation, so we have some decisions to make. 
Here are a few options:
• 
Execute the post-exploitation tooling and accept the detection. 
After the alert, we could move very quickly in an attempt to outpace 
the response, hope for an ineffective response process that fails to 
Evading EDR (Early Access) © 2023 by Matt Hand
EDR-Chitecture   15
eradicate us, or be okay with burning the operation and starting over 
again if needed.
• 
Wait for some period of time before executing our tooling. Because the 
agent correlates only those events that occur within some window of 
time, we can simply wait until the state recycles, resetting our risk score 
to zero, and continue the operation from there.
• 
Find another method of execution. This could range from simply drop-
ping our script on the target and executing it there, to proxying in the 
post-exploitation tool’s traffic to reduce most of the host-based indica-
tors it would create.
Whatever we choose, our goal is clear: stay below the alerting threshold 
for as long as possible. By calculating the risks of each action that we need 
to perform, understanding the indicators our activities create, and using a 
combination of evasion tactics, we can evade an EDR’s complex detection 
systems. Note that no single evasion worked universally in this example. 
Rather, a combination of evasions targeted the most relevant detections for 
the task at hand.
Conclusion
In summary, an EDR agent is composed of any number of sensors that are 
responsible for collecting telemetry related to activity on the system. The 
EDR applies its own rules or detection logic across this data to pick out 
what things might indicate a malicious actor’s presence. Each of these sen-
sors is susceptible to evasion in some way, and it is our job to identify those 
blind spots and either abuse them or compensate for them.
Evading EDR (Early Access) © 2023 by Matt Hand
Evading EDR (Early Access) © 2023 by Matt Hand
Of all the components included in modern 
endpoint security products, the most widely 
deployed are DLLs responsible for function 
hooking, or interception. These DLLs provide 
defenders with a large amount of important informa-
tion related to code execution, such as the param-
eters passed to a function of interest and the values it 
returns. Today, vendors largely use this data to supple-
ment other, more robust sources of information. Still, 
function hooking is an important component of EDRs. 
In this chapter, we’ll discuss how EDRs most com-
monly intercept function calls and what we, as attack-
ers, can do to interfere with them.
2
F U NC T ION - HOOK ING DL L S
Evading EDR (Early Access) © 2023 by Matt Hand
18   Chapter 2
This chapter focuses heavily on the hooking of functions in a 
Windows file called ntdll.dll whose functionality we’ll cover shortly, but 
modern EDRs hook other Windows functions too. The process of imple-
menting these other hooks closely resembles the workflow described in 
this chapter.
How Function Hooking Works
To understand how endpoint security products use code hooking, you 
must understand how code running in user mode interacts with the kernel. 
This code typically leverages the Win32 API during execution to perform 
certain functions on the host, such as requesting a handle to another pro-
cess. However, in many cases, the functionality provided via Win32 can’t be 
completed entirely in user mode. Some actions, such as memory and object 
management, are the responsibility of the kernel.
To transfer execution to the kernel, x64 systems use a syscall instruc-
tion. But rather than implementing syscall instructions in every function 
that needs to interact with the kernel, Windows provides them via functions 
in ntdll.dll. A function simply needs to pass the required parameters to this 
exported function; the function will, in turn, pass control into the kernel 
and then return the results of the operation. For example, Figure 2-1 dem-
onstrates the execution flow that occurs when a user-mode application calls 
the Win32 API function kernel32!OpenProcess().
Kernel mode
User mode
Application calls
OpenProcess API
ntoskrnl!
ObOpenObjectByPointer
ntoskrnl!
NtOpenProcess
ntoskrnl!
PsOpenProcess
kernel32!
OpenProcess
ntdll!
NtOpenProcess
Figure 2-1: The flow of execution from user mode to kernel mode
To detect malicious activity, vendors often hook these Windows APIs. 
For example, one way that EDRs detect remote process injection is to hook 
the functions responsible for opening a handle to another process, allocat-
ing a region of memory, writing to the allocated memory, and creating the 
remote thread.
In earlier versions of Windows, vendors (and malware authors) often 
placed their hooks on the System Service Dispatch Table (SSDT), a table in 
the kernel that holds the pointers to the kernel functions used upon invoca-
tion of a syscall. Security products would overwrite these function pointers 
with pointers to functions in their own kernel module used to log informa-
tion about the function call and then execute the target function. They 
would then pass the return values back to the source application.
Evading EDR (Early Access) © 2023 by Matt Hand
Function-Hooking Dlls   19
With the introduction of Windows XP in 2005, Microsoft made the 
decision to prevent the patching of SSDT, among a host of other critical 
structures, using a protection called Kernel Patch Protection (KPP), also 
known as PatchGuard, so this technique is not viable on modern 64-bit 
Windows versions. This means that traditional hooking must be done in 
user mode. Because the functions performing the syscalls in ntdll.dll are the 
last possible place to observe API calls in user mode, EDRs will often hook 
these functions in order to inspect their invocation and execution. Some 
commonly hooked functions are detailed in Table 2-1.
Table 2-1: Commonly Hooked Functions in ntdll.dll
Function names
Related attacker techniques
NtOpenProcess 
NtAllocateVirtualMemory 
NtWriteVirtualMemory 
NtCreateThreadEx
Remote process injection
NtSuspendThread 
NtResumeThread 
NtQueueApcThread
Shellcode injection via asynchronous  
procedure call (APC)
NtCreateSection 
NtMapViewOfSection 
NtUnmapViewOfSection
Shellcode injection via mapped memory  
sections
NtLoadDriver
Driver loading using a configuration  
stored in the registry
By intercepting calls to these APIs, an EDR can observe the parameters 
passed to the original function, as well as the value returned to the code that 
called the API. Agents can then examine this data to determine whether the 
activity was malicious. For example, to detect remote process injection, an 
agent could monitor whether the region of memory was allocated with read-
write-execute permissions, whether data was written to the new allocation, 
and whether a thread was created using a pointer to the written data.
Implementing the Hooks with Microsoft Detours
While a large number of libraries make it easy to implement function 
hooks, most leverage the same technique under the hood. This is because, 
at its core, all function hooking involves patching unconditional jump 