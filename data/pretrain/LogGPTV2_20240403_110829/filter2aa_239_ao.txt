型了：
    using System;
    using Wrox.ProCSharp;
如前所述，很多C#文件都以语句using System；开头，这仅是因为微软公司提供的许
多有用的类都包含在System名称空间中。
如果using语句引用的两个名称空间包含同名的类型，就必须使用完整的名称（或者
至少较长的名称），确保编译器知道访问哪个类型。例如，假如类NamespaceExample同
时存在于Wrox.ProCSharp.Basics和Wrox.ProCSharp.OOP名称空间中。如果要在名称空间
Wrox.ProCSharp中创建一个类Test，并在该类中实例化一个NamespaceExample类，就需要
指定使用哪个类：
    using Wrox.ProCSharp.OOP;
    using Wrox.ProCSharp.Basics;
    namespace Wrox.ProCSharp
    {
      class Test
      {
        static void Main()
        {
          Basics.NamespaceExample nSEx = new Basics.NamespaceExample();
          // do something with the nSEx variable.
        }
      }
    |
公司应花一些时间开发一种名称空间模式，这样其开发人员才能快速定位他们需要的
功能，而且公司内部使用的类名也不会与现有的类库相冲突。本章后面将介绍建立名称空
间模式的规则和其他命名约定。
2.7.2 名称空间的别名
using关键字的另一个用途是给类和名称空间指定别名。如果名称空间的名称非常
长，又要在代码中多次引用，但不希望该名称空间的名称包含在using语句中（例如，避
免类名冲突），就可以给该名称空间指定一个别名，其语法如下：
    using alias = NamespaceName;
下面的例子（前面例子的修订版本）给Wrox.ProCSharp.Basics名称空间指定别名
Introduction，并使用这个别名实例化了在该名称空间中定义的NamespaceExample对象。
注意名称空间别名的修饰符是“::”。因此将强制先从Introduction名称空间别名开始搜索。
如果在相同的作用域中引入了Introduction类，就会发生冲突。即使出现了冲突，“::”运算
符也允许引用别名。NamespaceExample类有一个方法GetNamespace（），该方法调用每
个类都有的GetType（）方法，以访问表示类的类型的Type对象。下面使用这个对象来返
回类的名称空间名（代码文件NamespaceSample/Program.cs）：
    using Introduction = Wrox.ProCSharp.Basics;
    using static System.Console;
    class Program
    {
      static void Main()
      {
        Introduction::NamespaceExample NSEx =
        new Introduction::NamespaceExample();
        WriteLine(NSEx.GetNamespace());
      }
    }
    namespace Wrox.ProCSharp.Basics
    {
      class NamespaceExample
      {
        public string GetNamespace()
        {
        return this.GetType().Namespace;
        }
      }
    }
2.8 Main（）方法
本章的开头提到过，C#程序是从方法Main（）开始执行的。根据执行环境，有不同
的要求：
● 使用了static修饰符
● 在任意类中
● 返回int或void类型
虽然显式指定public修饰符是很常见的，因为按照定义，必须在程序外部调用该方
法，但给该入口点方法指定什么访问级别并不重要，即使把该方法标记为private，它也可
以运行。
前面的例子只介绍了不带参数的Main（）方法。但在调用程序时，可以让CLR包含
一个参数，将命令行参数传递给程序。这个参数是一个字符串数组，传统上称为args（但
C#可以接受任何名称）。在启动程序时，程序可以使用这个数组，访问通过命令行传送
的选项。
下面的例子在传送给Main（）方法的字符串数组中循环，并把每个选项的值写入控
制台窗口（代码文件ArgumentsSample/Program.cs）：
    using System;
    using static System.Console;
    namespace Wrox
    {
      class Program
      {
        static void Main(string[] args)
        {
        for (int i = 0; i 
把行中的文本标记为代码，例如int i = 10; 
把多行标记为代码
标记为一个代码示例
说明一个异常类（编译器要验证其语法）
包含其他文档说明文件的注释（编译器要验证其语法）
把列表插入文档中
建立文本的结构
标记方法的参数（编译器要验证其语法）
表明一个单词是方法的参数（编译器要验证其语法）
说明对成员的访问（编译器要验证其语法）
给成员添加描述
说明方法的返回值
提供对另一个参数的交叉引用（编译器要验证其语法）
提供描述中的“参见”部分（编译器要验证其语法）
提供类型或成员的简短小结
用在泛型类型的注释中，以说明一个类型参数
类型参数的名称
描述属性
要了解它们的工作方式，可以在2.9.1小节的Calculator.cs文件中添加一些XML注释。
我们给类及其Add（）方法添加一个元素，也给Add（）方法添加一个
元素和两个元素：
    // MathLib.cs
    namespace Wrox.MathLib
    {
      ///
      ///  Wrox.MathLib.Calculator class.
      ///  Provides a method to add two doublies.
      ///
      public class Calculator
      {
        ///
        ///  The Add method allows us to add two doubles.
        ///
        ///Result of the addition (double)
        ///First number to add
        ///Second number to add
        public static double Add(double x, double y) => x + y;
      }
    }
2.10 C#预处理器指令
除了前面介绍的常用关键字外，C#还有许多名为“预处理器指令”的命令。这些命令
从来不会转化为可执行代码中的命令，但会影响编译过程的各个方面。例如，使用预处理
器指令可以禁止编译器编译代码的某一部分。如果计划发布两个版本的代码，即基本版本
和拥有更多功能的企业版本，就可以使用这些预处理器指令。在编译软件的基本版本时，
使用预处理器指令可以禁止编译器编译与附加功能相关的代码。另外，在编写提供调试信
息的代码时，也可以使用预处理器指令。实际上，在销售软件时，一般不希望编译这部分
代码。
预处理器指令的开头都有符号#。
 注意： 
C++开发人员应该知道，在C和C++中预处理器指令非常重要。但
是，在C#中，并没有那么多的预处理器指令，它们的使用也不太频繁。C#提供了其他
机制来实现许多C++指令的功能，如定制特性。还要注意，C#并没有一个像C++那样的
独立预处理器，所谓的预处理器指令实际上是由编译器处理的。尽管如此，C#仍保留
了一些预处理器指令名称，因为这些命令会让人觉得就是预处理器。
下面简要介绍预处理器指令的功能。
2.10.1 #define和#undef
#define的用法如下所示：
    #define DEBUG
它告诉编译器存在给定名称的符号，在本例中是DEBUG。这有点类似于声明一个变
量，但这个变量并没有真正的值，只是存在而已。这个符号不是实际代码的一部分，而只
在编译器编译代码时存在。在C#代码中它没有任何意义。
#undef正好相反——它删除符号的定义：
    #undef DEBUG
如果符号不存在，#undef就没有任何作用。同样，如果符号已经存在，则#define也不
起作用。
必须把#define和#undef命令放在C#源文件的开头位置，在声明要编译的任何对象的代
码之前。
#define本身并没有什么用，但与其他预处理器指令（特别是#if）结合使用时，它的
功能就非常强大了。
  注意： 这里应注意一般C#语法的一些变化。预处理器指令不用分号结束，一
般一行上只有一条命令。这是因为对于预处理器指令，C#不再要求命令使用分号进行
分隔。如果编译器遇到一条预处理器指令，就会假定下一条命令在下一行。
2.10.2 #if、#elif、#else和#endif
这些指令告诉编译器是否要编译代码块。考虑下面的方法：
    int DoSomeWork(double x)
    {
      // do something
      #if DEBUG
        WriteLine($"x is {x}");
      #endif
    }
这段代码会像往常那样编译，但Console.WriteLine方法调用包含在#if子句内。这行代
码只有在前面的#define指令定义了符号DEBUG后才执行。当编译器遇到#if指令后，将先
检查相关的符号是否存在，如果符号存在，就编译#if子句中的代码。否则，编译器会忽
略所有的代码，直到遇到匹配的#endif指令为止。一般是在调试时定义符号DEBUG，把与
调试相关的代码放在#if子句中。在完成了调试后，就把#define指令注释掉，所有的调试
代码会奇迹般地消失，可执行文件也会变小，最终用户不会被这些调试信息弄糊涂（显
然，要做更多的测试，确保代码在没有定义DEBUG的情况下也能工作）。这项技术在C
和C++编程中十分常见，称为条件编译（conditional compilation）。
#elif （=else if）和#else指令可以用在#if块中，其含义非常直观。也可以嵌套#if块：
    #define ENTERPRISE
    #define W10
    // further on in the file
    #if ENTERPRISE
      // do something
      #if W10
        // some code that is only relevant to enterprise
        // edition running on W10
      #endif
    #elif PROFESSIONAL
      // do something else
    #else
      // code for the leaner version
    #endif
#if和#elif还支持一组逻辑运算符“!”、“==”、“!=”和“||”。如果符号存在，就被认为是
true，否则为false，例如：
    #if W10 && (ENTERPRISE==false) // if W10 is defined but ENTERPRISE isn't
2.10.3 #warning和# error
另两个非常有用的预处理器指令是#warning和#error。当编译器遇到它们时，会分别
产生警告或错误。如果编译器遇到#warning指令，会向用户显示#warning指令后面的文
本，之后编译继续进行。如果编译器遇到#error指令，就会向用户显示后面的文本，作为
一条编译错误消息，然后会立即退出编译，不会生成IL代码。
使用这两条指令可以检查#define语句是不是做错了什么事，使用#warning语句可以提
醒自己执行某个操作：
    #if DEBUG && RELEASE
      #error "You've defined DEBUG and RELEASE simultaneously! "
    #endif
    #warning "Don't forget to remove this line before the boss tests the code! "
      WriteLine("＊I hate this job.＊");
2.10.4 #region和#endregion
#region和#endregion指令用于把一段代码视为有给定名称的一个块，如下所示：
    #region Member Field Declarations
      int x;
      double d;
      Currency balance;
    #endregion
这看起来似乎没有什么用，它根本不影响编译过程。这些指令真正的优点是它们可以
被某些编辑器识别，包括Visual Studio编辑器。这些编辑器可以使用这些指令使代码在屏
幕上更好地布局。第17章会详细介绍。
2.10.5 #line
#line指令可以用于改变编译器在警告和错误信息中显示的文件名和行号信息。这条指
令用得并不多。如果编写代码时，在把代码发送给编译器前，要使用某些软件包改变输入
的代码，该指令最有用，因为这意味着编译器报告的行号或文件名与文件中的行号或编辑
的文件名不匹配。#line指令可以用于还原这种匹配。也可以使用语法#line 
default把行号
还原为默认的行号：
    #line 164 "Core.cs"   // We happen to know this is line 164 in the file
                          // Core.cs, before the intermediate
                          // package mangles it.
    // later on
    #line default     // restores default line numbering
2.10.6 #pragma
#pragma指令可以抑制或还原指定的编译警告。与命令行选项不同，#pragma指令可以
在类或方法级别实现，对抑制警告的内容和抑制的时间进行更精细的控制。下面的例子禁
止“字段未使用”警告，然后在编译MyClass类后还原该警告。