the 0’s were encrypted, the two are different.
However, the attacker does not necessarily know when he is
inside S(cid:48)(cid:48) and when outside. Outside S(cid:48)(cid:48) the attacker can-
not be sure that equality means the correct encryption was
encrypted. To overcome this problem, we ﬁnish the above
CCA2 attack the following way. Let µ(η) be a function (in
the security parameter) of natural numbers.
– the adversary submits pairs of 0|AOO
( ˆφ,(cid:126)x)| for encryp-
tion µ times. Let ci denote (i = 1, ..., µ) the encryp-
tions received back from the oracle. Note that these en-
cryptions are known to be encryptions of 0|AOO
( ˆφ,(cid:126)x)|
1
1
– applies AOO
– CASE 1: if AOO
21 and AOO
22 on all of ˆφ, (cid:126)x, ci
21 ( ˆφ, (cid:126)x, c0) = AOO
22 ( ˆφ, (cid:126)x, c0) but
AOO
21 ( ˆφ, (cid:126)x, ci) (cid:54)= AOO
22 ( ˆφ, (cid:126)x, ci) for all i = 1, ..., µ,
then the CCA2 attacker outputs 1, meaning that his
guess is that the oracle encrypted the correct bit string.
– CASE 2: otherwise, the adversary tosses a coin and
outputs the result.
1
1
( ˆφ, (cid:126)x)}R
( ˆφ, (cid:126)x)}R
21 ( ˆφ, (cid:126)x,{AOO
eK ) but where AOO
We can think of the probability space of the CCA2 attack as
{0, 1} × Ωη, where {0, 1} represents the internal bit of the
oracles. Even if the internal bit is 0, the simulation of the
protocol execution can be done according to the above rules.
Let Sµ ⊆ Ω be the set where AOO
eK ) =
21 ( ˆφ, (cid:126)x, ci) (cid:54)=
22 ( ˆφ, (cid:126)x,{AOO
AOO
AOO
22 ( ˆφ, (cid:126)x, ci) for all i = 1, ..., µ, (that is, CASE 1 hap-
pens when the real plaintext is encrypted in the CCA2 at-
tack). Note that Sµ depends on the function µ, but still,
S(cid:48)(cid:48) ⊆ Sµ, so Sµ is also non-negligible. Suppose, the in-
ternal bit of the oracle is 1. Then, on Sµ, according to our
setup of the CCA2 attacker, he outputs 1, giving the correct
guess. That is, denoting by ACCA2 the CCA2 attacker as de-
scribed above, the output of ACCA2 is 1 on {1} × Sµ. On
{1} × (Ω \ Sµ), ACCA2 tosses a coin, so the probabilities
there balance out. Consider now {0} × Ω. Here the internal
bit of the oracles is 0, that is they encrypt the 0’s, that is, here
c0 is the encryption of 0’s. If the probability on {0}× Ω that
AOO
21 ( ˆφ, (cid:126)x, c0)) = AOO
22 ( ˆφ, (cid:126)x, c0)) holds is negligible, then
we are done, because on {0} × Ω too a coin is tossed, so the
advantage of the adversary is 1/2 · Prob{{1} × Sµ}, which
is non-negligible. So let us assume now that the probability
that AOO
22 ( ˆφ, (cid:126)x, c0)) holds is not negli-
gible on {0} × Ω. But the other ci are also just encryptions
of 0’s, so AOO
22 ( ˆφ, (cid:126)x, ci)) holds with the
same probability for all i on {0} × Ω. For each ﬁxed η, the
higher µ(η) we chose, the higher the probability is that one
AOO
21 ( ˆφ, (cid:126)x, ci)) = AOO
22 ( ˆφ, (cid:126)x, ci)) holds for at least one i.
In fact, this probability can be made arbitrarily close to 1 by
increasing µ(η). If it is close enough to 1, then the proba-
bility of making an error (other than the case when a coin
is tossed) on {0} × Ω becomes smaller than the probability
of {1} × Sµ, and hence the error probability cannot cancel
out the winning probability. Since the probability of hitting
the same encryption with the 0’s was assumed to be non-
negligible, it is sufﬁcient to have a polynomial µ(η) to en-
sure that the probability of having at least one hit is closer
to 1 than the non-negligible probability of {1} × Sµ. In this
case, the win on {1} × Sµ when the internal bit is 1 can-
21 ( ˆφ, (cid:126)x, c0)) = AOO
21 ( ˆφ, (cid:126)x, ci)) = AOO
1
not be cancelled by the loss elsewhere, so the CCA2 attacker
wins. Note, if ˆφ, (cid:126)x contains the decryption key outside S, the
attack can simply terminate there and output a random bit.
The proof for KDM-CCA2 is exactly analogous. The only
difference is, that instead of AOO
( ˆφ, (cid:126)x), there is an x there,
but the oracles accept the functions to be submitted. When it
comes to computing the encryptions of x, the KDM encryp-
tion oracle is requested. It is not directly x that is submitted,
but a description of a function of the keys instead. Since the
KDM adversary is simulating the protocol, all items except
for the secret keys and the random inputs to the encryptions
in the symmetric case are available to him.
• Fresh items do not compromise: The idea is exactly the same
as in case of the derivability predicate. A fresh item can just
as well be created by the adversary, it cannot help him.
We now turn to the case of INT-CTXT key compromise.
Proofs of the ﬁrst six axioms and the last one are entirely identi-
cal to the proofs for CCA2 key compromise. The soundness of the
“encryptions with uncompromised keys do not compromise" axiom
is also analogous: We again show the following:
RanGen(K) ∧ RanGen(K
) ∧ fresh(R; ˆφ, (cid:126)x, x, K, K
(cid:48)
(cid:48)
)
∧ (cid:126)x, x (cid:52) ˆφ ∧ ˆφ, (cid:126)x,{|x|}R
K(cid:48) (cid:73)ic K ∧ ˆφ, (cid:126)x, x(cid:54)(cid:73)sic2K
−→ ˆφ, (cid:126)x (cid:73)ic K
(cid:48)
( ˆφ, (cid:126)x, {|x|}R
K(cid:48) ) = {|z|}R(cid:48)
K(cid:48) ), K) (cid:54)= ⊥
K → {|z|}R(cid:48)
Again, we have to show that for all S non-negligible sets and σ
evaluations of variables, if Mc, Π, S, σ satisﬁes the premise, then
it satisﬁes the conclusion as well. So let us suppose it satisﬁes the
premise. We want to show Mc, Π, S, σ |c= ˆφ, (cid:126)x (cid:73)ic K. Following
the deﬁnition of key compromise, take any subset S(cid:48) ⊆ S. By the
deﬁnition of key compromise, Mc, Π, S, σ |c= ˆφ, (cid:126)x,{|x|}R
K(cid:48) (cid:73)ic K
implies there is a S(cid:48)(cid:48) ⊆ S, and a PT algorithm AOsic2, such that
Mc, Π, S(cid:48)(cid:48), σ ||= sdec(AOsic2
∧ ∀zR(cid:48)(AOsic2
( ˆφ, (cid:126)x, {|x|}R
and on S(cid:48)(cid:48), AOsic2
( ˆφ, (cid:126)x, ,{|x|}R
K(cid:48) ) is not equal any of the outputs of
the encryption oracles. Now, we also have that Mc, Π, S(cid:48)(cid:48), σ |c=
ˆφ, (cid:126)x, x(cid:54)(cid:73)sic2K(cid:48) from the satisfaction of the premise. This gives us
that there is some S(cid:48)(cid:48)(cid:48) non-negligible subset of S(cid:48)(cid:48) such that
Mc, Π, S(cid:48)(cid:48)(cid:48), σ ||= sdec(AOsic2
∀zR(cid:48)(AOsic2
( ˆφ, (cid:126)x, {|0|x||}R
and on S(cid:48)(cid:48), AOsic2
K(cid:48) ) is not equal any of the outputs
of the encryption oracles. Again, as the length of x can be guessed,
there is a non-negligible S(cid:48)(cid:48)(cid:48)(cid:48) ⊆ S(cid:48)(cid:48)(cid:48) and a BOsic2 such that
K (cid:54)(cid:118) ˆφ, (cid:126)x, {|0|x||}R
K(cid:48) )
K (cid:54)(cid:118) ˆφ, (cid:126)x, {|x|}R
K(cid:48) )
( ˆφ, (cid:126)x, ,{|0|x||}R
K(cid:48) ), K) (cid:54)= ⊥ ∧
K(cid:48) ) = {|z|}R(cid:48)
K → {|z|}R(cid:48)
( ˆφ, (cid:126)x, {|0|x||}R
Mc, Π, S
∧ ∀zR
(cid:48)
(cid:48)(cid:48)(cid:48)(cid:48)
(BOsic2
, σ ||= sdec(BOsic2
( ˆφ, (cid:126)x) = {|z|}R(cid:48)
( ˆφ, (cid:126)x), K) (cid:54)= ⊥
K → {|z|}R(cid:48)
K (cid:54)(cid:118) ˆφ, (cid:126)x)
and on S(cid:48)(cid:48)(cid:48)(cid:48), BOsic2
( ˆφ, (cid:126)x) is not equal any of the outputs of the en-
cryption oracles. And that exactly means Mc, Π, S, σ |c= ˆφ, (cid:126)x (cid:73)ic
K. Again, the KDM case is entirely analogous.
axiom is immediate from the semantics of (cid:73)ic. If
Mc, Π, S, σ |c= RanGen(K) ∧ ˆφ, (cid:126)x  y ∧ dec(y, dK) (cid:54)= ⊥
Proof of the uncompromised key’s encryption cannot be faked
∧ ∀xR(y = {x}R
eK → {x}R
eK (cid:54)(cid:118) ˆφ, (cid:126)x)
Then for all S(cid:48) ⊆ S, there is a S(cid:48)(cid:48) ⊆ S(cid:48) and an algorithm A such
that Mc, Π, S(cid:48)(cid:48), σ ||= A( ˆφ, (cid:126)x) = y. Furthermore, the last conjunct
1244means that the output of the algorithm is not any of the encryptions
in ˆφ, (cid:126)x, and the third conjunct means the decryption does not fail.
This is exactly means that Mc, Π, S, σ |c= ˆφ, (cid:126)x (cid:73)ic K.
The only remaining axiom is the fresh keys are not compromised
axiom for the INT-CTXT case. But that is rather easy. Suppose, the
encryption is INT-CTXT secure. Mc, Π, S, σ |c= ˆφ (cid:73)ic K means
there is a S(cid:48)(cid:48) ⊆ S, and a PT algorithm AOsic2, such that
Mc, Π, S
, σ ||= sdec(AOsic2
( ˆφ), K) (cid:54)= ⊥
(cid:48)(cid:48)
(cid:48)
(AOsic2
( ˆφ) = {|z|}R(cid:48)
K (cid:54)(cid:118) ˆφ)
∧ ∀zR
and on S(cid:48)(cid:48), AOsic2
( ˆφ) is not equal any of the outputs of the encryp-
tion oracles. But that exactly means that there is a non-negligible
set (namely S(cid:48)(cid:48)), on which AOsic2 can produce a ciphertext, contra-
dicting the INT-CTXT property.
K → {|z|}R(cid:48)
11. SIMPLE EXAMPLES
Now let us see on a few simple examples how inconsistency can
be shown with the above axioms. In [5], the authors presented some
of the most basic examples, therefore the ones we analyze here are
a little more complex, all are related to sending keys around. We
use symmetric encryption in these examples.
EXAMPLE 11.1. Suppose the ﬁrst messages in a frame are
φ3 ≡ (cid:104)(A, B),{|K|}R1
KAB
,{|h2, N|}R2
K (cid:105),
K
K
with names KKABN R1R2, and where the symmetric encryption
is IND- (or KDM-) CCA2 secure. We want to show that φ3  N is
inconsistent with the axioms, that is, N remains secret. Let now O
denote either sic2 or skc2. Suppose φ3  N holds. Then we have
φ3 ON by the more oracles help more axiom. That is the same
as φ2,{|h2, N|}R2
ON. By the no-telepathy axiom, φ2 (cid:54)ON as
fresh(N ; φ2) holds (which follows directly from the deﬁnition of
the freshness constraint, not from axioms). By the ‘uncompro-
mised key securely encrypts’ axiom for CCA2 symmetric case,
with the roles (cid:126)x ≡ (cid:104)(cid:105), x ≡ (cid:104)h2, N(cid:105), y ≡ N, since we assumed
φ2,{|h2, N|}R2
ON, we also have that either φ2 ON (already
ruled out) or (depending on O) φ2, h2, N (cid:73)sic2 K or φ2 (cid:73)skc2 K .
In the IND-CCA2 case, by the ‘fresh items do not compromise’
axiom, we then have φ2, h2 (cid:73)sic2 K as N does not appear in
φ2. Since the handle is always derived from the frame, φ2  h2
holds, hence φ2 sic2 h2 and by the transitivity axiom applied for
φ2, h2 (cid:73)sic2 K and φ2 sic2 h2, we have φ2 (cid:73)sic2 K, just as we