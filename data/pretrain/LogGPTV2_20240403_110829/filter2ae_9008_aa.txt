**作者：昏鸦,Al1ex**  
**时间：2020年9月16日**
### 事件起因
2020年9月14日晚20:00点，未经安全审计的波场最新Defi项目Myrose.finance登陆Tokenpocket钱包，首批支持JST、USDT、SUN、DACC挖矿，并将逐步开通ZEUS、PEARL、CRT等的挖矿，整个挖矿周期将共计产出8400枚ROSE，预计将分发给至少3000名矿工，ROSE定位于波场DeFi领域的基础资产，不断为持有者创造经济价值。
项目上线之后引来了众多的用户(高达5700多人)参与挖矿，好景不长，在20:09左右有用户在Telegram"Rose中文社区群"中发文表示USDT无法提现：
截止发文为止，无法提现的USDT数量高达6,997,184.377651 USDT(约700万USDT)，随后官方下线USDT挖矿项目。
### 分析复现
我们直接通过模拟合约在remix上测试。
USDT模拟测试合约代码如下，USDT_Ethereum和USDT_Tron分别模拟两个不同平台的USDT代币合约，分别代表`transfer`函数有显式`return
true`和无显式`return true`
    pragma solidity ^0.5.0;
    import "IERC20.sol";
    import "SafeMath.sol";
    contract USDT_Ethereum is IERC20 {
        using SafeMath for uint256;
        uint256 internal _totalSupply;
        mapping(address => uint256) internal _balances;
        mapping (address => mapping (address => uint)) private _allowances;
        event Transfer(address indexed from, address indexed to, uint256 value);
        event Approval(address indexed owner, address indexed spender, uint value);
        constructor() public {
            _totalSupply = 1 * 10 ** 18;
            _balances[msg.sender] = _totalSupply;
        }
        function totalSupply() external view returns (uint256) {
            return _totalSupply;
        }
        function balanceOf(address account) external view returns (uint256) {
            return _balances[account];
        }
        function allowance(address owner, address spender) external view returns (uint256) {
            return _allowances[owner][spender];
        }
        function approve(address spender, uint amount) public returns (bool) {
            _approve(msg.sender, spender, amount);
            return true;
        }
        function _approve(address owner, address spender, uint amount) internal {
            require(owner != address(0), "ERC20: approve from the zero address");
            require(spender != address(0), "ERC20: approve to the zero address");
            _allowances[owner][spender] = amount;
            emit Approval(owner, spender, amount);
        }
        function mint(address account, uint amount) external {
            require(account != address(0), "ERC20: mint to the zero address");
            _totalSupply = _totalSupply.add(amount);
            _balances[account] = _balances[account].add(amount);
            emit Transfer(address(0), account, amount);
        }
        function _transfer(address _from ,address _to, uint256 _value) internal returns (bool) {
            require(_to != address(0));
            require(_value  uint256) internal _balances;
        mapping (address => mapping (address => uint)) private _allowances;
        event Transfer(address indexed from, address indexed to, uint256 value);
        event Approval(address indexed owner, address indexed spender, uint value);
        constructor() public {
            _totalSupply = 1 * 10 ** 18;
            _balances[msg.sender] = _totalSupply;
        }
        function totalSupply() external view returns (uint256) {
            return _totalSupply;
        }
        function balanceOf(address account) external view returns (uint256) {
            return _balances[account];
        }
        function allowance(address owner, address spender) external view returns (uint256) {
            return _allowances[owner][spender];
        }
        function approve(address spender, uint amount) public returns (bool) {
            _approve(msg.sender, spender, amount);
            return true;
        }
        function _approve(address owner, address spender, uint amount) internal {
            require(owner != address(0), "ERC20: approve from the zero address");
            require(spender != address(0), "ERC20: approve to the zero address");
            _allowances[owner][spender] = amount;
            emit Approval(owner, spender, amount);
        }
        function mint(address account, uint amount) external {
            require(account != address(0), "ERC20: mint to the zero address");
            _totalSupply = _totalSupply.add(amount);
            _balances[account] = _balances[account].add(amount);
            emit Transfer(address(0), account, amount);
        }
        function _transfer(address _from ,address _to, uint256 _value) internal returns (bool) {
            require(_to != address(0));
            require(_value  uint256) internal _balances;
        constructor() public {
            _totalSupply = 1 * 10 ** 18;
            _balances[msg.sender] = _totalSupply;
        }
        function totalSupply() external view returns (uint256) {
            return _totalSupply;
        }
        function balanceOf(address account) external view returns (uint256) {
            return _balances[account];
        }
        function withdraw(address yAddr,uint256 amount) public {
            _totalSupply = _totalSupply.sub(amount);
            _balances[msg.sender] = _balances[msg.sender].sub(amount);
            IERC20 y = IERC20(yAddr);
            y.safeTransfer(msg.sender, amount);
        }
    }
Remix部署`USDT_Ethereum`、`USDT_Tron`、`Test`三个合约。
调用USDT_Ethereum和USDT_Tron的`mint`函数给Test合约地址增添一些代币。
然后调用Test合约的`withdraw`函数提现测试。
可以看到`USDT_Ethereum`提现成功，`USDT_Tron`提现失败。
失败的回滚信息中，正是`safeTransfer`函数中对最后返回值的校验。
    function safeTransfer(IERC20 token, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }
    function callOptionalReturn(IERC20 token, bytes memory data) private {
        require(address(token).isContract(), "SafeERC20: call to non-contract");
        // solhint-disable-next-line avoid-low-level-calls