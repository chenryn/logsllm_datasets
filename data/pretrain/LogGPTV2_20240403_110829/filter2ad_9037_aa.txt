# 靶机地址：
# 0x0内容简介：
    这是一个中等难度的靶机，比较的综合，因为其内部还有几个docker虚拟机，从而可以对内网部分有初步的涉及，比如内网信息收集、内网穿透、简单的横向移动等等
    建议使用VirtualBox打开靶机，如果使用vm打开，会有无法预料的问题，其中就包括无法获取ip，内部docker没有成功启动,这样就无法扫描到对应的端口等等，所以，我会先提供靶机登录密码等，大家如果要自己打靶，那么建议启动靶机后，自己再进入其中，然后看ip和docker是否正常，保证环境没有问题之后，之后的过程会更加流畅。
##### 前期系统搭建
我使用的vm16打开的靶机，但是在我第一次打开的时候是没有ip的，所以建议大家用virtualbox，我也会将靶场和工具打包分享到云盘。
    靶机IP：192.168.63.134/24
    docker_ip:172.17.0.1
    普通用户密码：john/1337hack
    新建root用户：deel/123456
    靶场百度云连接，可以用vm直接打开
    链接：https://pan.baidu.com/s/1SfpcfI_7ZYDAaW4o7FOjLQ?pwd=7bsv 
    提取码：7bsv 
    这里提前给出了账号密码，主要是提供给想要练习的师傅做环境搭建验证的，新建特权用户是我分享的靶机才有，因为docker命令需要root权限才能使用，所以师傅在检验环境是否启动成功的时候直接登录deel账号即可，然后用：ifconfig命令查看eth0网卡的ip是否正确，然后用：docker ps 查看docker镜像是否启动成功，以下是截图。
# 0x1主机发现
##### 二层主机发现
#####
    使用工具：arp-scan  #  https://github.com/royhills/arp-scan
    命令：arp-scan -l
    该工具目前还在更新，官方最新版本为1.10.0,kali自带的版本22年的是1.9版本，相差不大；二层主机发现可以非常快速的发现同网段存活主机，如果是简单使用，直接加上 -l 参数即可
    官方使用文档(英文):http://www.royhills.co.uk/wiki/index.php/Main_Page
    通过该工具，我们发现同网段有4台其他主机，这里由于我知道另外三台主机是干什么的，所以排除法可以直接定位靶机ip：192.168.63.134。
# 0x2端口扫描
##### 全端口扫描
#####
    工具：nmap,masscan # https://nmap.org/     https://github.com/robertdavidgraham/masscan
    命令：masscan -p1-65535 192.168.63.134 --rate=10000
         nmap -p- 192.168.63.134
    这里使用了两个工具，主要是相对比两个工具的特性，同时表现出两个工具配合的效果；masscan工具有点就是速度非常快，号称可以5min扫描整个互联网，发包速度非常快，masscan不建立完整的TCP连接，收到SYN/ACK之后，发送RST结束连接,选项--banners除外。目前github的版本为1.3.2。官方使用文档就在github中。
    使用示范：masscan 10.0.0.0/16 -p22-25 -oX test.xml --rate 10000
        目标是可以是单个，可以是一个段
        端口由 -p 参数指定 ：-p80  -p80,443   -p1-65535
        输出格式：-oX -> XML格式;  -oG -> grepable格式;  -oJ -> json格式
        扫描速度：默认100，比较慢，根据自己的带宽和电脑性能设置，一般 --rate=10000
    nmap 如果是当前这种主机很少的情况下，扫描也很快，大概的测试一下4台主机的c段，全端口扫描下，两款工具都在十秒左右，但是在主机比较多的时候，nmap和masscan的差异就比较大了，所以如果对时间比较紧急的情况，可以考虑先用masscan快扫出主机端口信息，再用nmap针对性的对开方的端口进行指纹识别。
    这一步我们通过两款工具，都扫描出靶机开放了22端口和5000端口。
# 0x3服务发现
##### 端口服务探测
#####
    命令：nmap -p22,5000 -sV 192.168.63.134
    通过前面的端口扫描，我们发现靶机开放了 22和5000 端口，下一步就需要对端口进行服务版本方面的扫描，以获得更加详细的信息，通过nmap的 -p 参数指定端口，-sV 探测服务/版本信息，最终扫描出两个端口的服务和版本信息，其中我们发现5000端口开启了一个http服务，并且后端语言是python2.7，这些信息告诉我们或许可以通过web方面的漏洞获取权限，同时在之后的如果要命令执行或者是上传一些和后端语言相关的文件时，那需要选择用python2的相关代码。同时还有：werkzeug 这个信息，搜索过后发现这是一个Python Web框架的底层库，例如现在非常流行的Flask Web框架，对于这个靶场并没有多大的作用，不过在实际渗透过程中发现了这样的信息，说不定会有价值。
# 0x4路径爬取
    既然是web网站，那肯定要浏览器访问看看，这个靶场开放的web页面非常的简单，只有一个类似于评论的输入框，这种地方可以考虑试一下xss，或者是sql注入，经过简单的测试，并没有成功，然后考虑继续做其他的信息收集，之后如果实在没有突破点，再来尝试此处。
##### dirsearch
    目录扫描：
    工具：dirsearch     # https://github.com/maurosoria/dirsearch
    命令：dirsearch -e "*" -u http://192.168.63.134:5000
    这款工具在github上具有9.1k的star,其扫描效果也是非常出色，功能丰富，结果显示也感到非常舒适
        常用选项：
            -u http://192.168.63.1 :指定目标
            -l url.txt :指定目标列表
            -e:指定扩展名列表，用逗号隔开，可以理解成指定要扫描的文件类型，比如：-e "php,asp",如果全指定：-e "*"，这将决定字典的选择
            -w:指定自己的字典路径
            -t:线程，默认是25
            -r:递归目录(跑出目录后，继续跑目录下面的目录)
    该工具还有很多的选项，详情可以 -h 逐个查看
    由于近期在看一些开源工具的源代码学习，dirsearch的源代码也是大概的看了一遍，虽然有很多没有看懂，不过还是对我以后写和使用工具有了启发，这里分享给大家：
        1.关于输入目标没有带协议字段如何解决？
            这个主要的现象就是：直接输入目标域名或者ip，没有http://或者https://的协议字段，在不带端口的情况下，两种协议对应的默认端口都是不同的，如果单纯之际两个协议都加，都访问，显然不是很优雅，我在观摩的过程中找到了dirsearch的解决方法：在utils/schemedet.py文件中，通过ssl和socket库，一起实现一个ssl通信，当链接成功的时候，说明服务端是https协议，就请求成功，然后赋值协议字段为：https,如果是http就会报错，然后用except抓取到错误，然后赋值协议字段为http
            源代码：
                import ssl
                import socket
                from lib.core.settings import SOCKET_TIMEOUT
                def detect_scheme(host, port):
                    if not port:
                        raise ValueError
                    s = socket.socket()
                    s.settimeout(SOCKET_TIMEOUT)
                    conn = ssl.SSLContext().wrap_socket(s)
                    try:
                        conn.connect((host, port))
                        conn.close()
                        return "https"
                    except Exception: