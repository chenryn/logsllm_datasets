1.93%
16.7%
29.9%
Avg Msgs
stddev
6.67%
17.2%
0.184%
0.451%
0.010%
0.100%
Avg Msgs
stddev
7.14%
24.8%
0.024%
0.457%
0.20%
1.50%
0.00480% 0.20%
1.79%
4.51%
TABLE I
RESOURCES AND THEIR DISTRIBUTIONS IN THE DATASETS. WE CONSIDER
THE AVERAGE NUMBER OF MESSAGES FOR EACH RESOURCE AND ITS
STDDEV. THE VALUES ARE NORMALIZED BY THE TOTAL NUMBER OF
MESSAGES DEALING WITH THE SPECIFIED TYPE OF RESOURCE.
while there are type of events that are much more frequent
than other types). We compute the standard deviation of the
normalized distribution of the number of messages by type and
by resource. For each event type and resource, we compute its
fraction of the total messages. We compute the stddev of this
distribution and we represent the value as a percentage. This
value is much larger when messages are aggregated by event
types, while it remains low (in most cases) when events are
aggregated by resource. We summarize this data in Table I.
A graphical representation of the CDF of this message
distribution for the Dartmouth dataset is shown in Fig. 4. The
y-axis of the graph represents the fraction of resources (or
message type) that are mentioned in at least the fraction of
messages speciﬁed in the x-axis. We see that we have a large
number of messages for each event type, while most resources
are mentioned in a small fraction of the messages. Hence, a
distribution of messages by resource could provide a more
uniform distribution of information.
C. Deployment on EC2
instances to test
We run the system on EC2 spot
the
system in a real distributed environment. One of the instances
generates events according to the distributions speciﬁed in our
datasets to model a stream of events from a real system. We
performed several experiments by changing the number of
policies, the length of the policies, and the number of brokers.
Each data point is the average of at least 5 executions. Each
time new policies have been generated to consider different
variations of rules and events.
We compare our system with systems presenting a different
distribution of events. Centralized solutions do not provide
any protection against the attack, as all information is com-
promised as soon as the main server is compromised. For this
reason, we do not consider it in our evaluation. Instead, we
consider a distribution of events based on event-type.
Distribution based on event type is used in pub-sub policy-
)
d
e
z
i
l
a
m
r
o
n
(
s
e
c
r
u
o
s
e
r
#
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0
CDF of events and resources
event type
AP
MAC
AP + type
MAC + type
 0.05
 0.1
 0.15
 0.2
 0.25
# messages (normalized)
Fig. 4. Event distribution for the Dartmouth dataset. We show the fraction
of resources (y-axis) receiving at least the fraction “x” of the messages.
based event systems for ﬁltering events (e.g., [29]). The pro-
cessing of a policy is distributed across brokers by processing
the policy in groups of two event types. For example, a policy
in the form A ∧ B ∧ C → violation is split into two parts:
A ∧ B → partialAB and partialAB ∧ C → violation. A
broker b1 receives events of type A and B and send to a
broker b2 the resulting events of of type partialAB. Broker
b2 integrates the events partialAB with events of type C to
identify all policy violations. While at ﬁrst glance this splitting
of the rule is similar to the one we describe in this paper,
this process does not consider in the mapping the value that
the variables assumes and groups events only based on their
predicates (i.e., their type).
To the best of our knowledge, current pub-sub policy-based
systems do not address the problem of limiting the knowledge
maintained at each broker. Allocating rules and events to
brokers in this solution is a challenging problem. A solution
that minimizes the overall number of events would require
mapping rules containing similar set of predicate types on the
same brokers. However, by doing such an allocation, the max-
imum knowledge on brokers becomes large, as each different
rule might require a slightly different set of predicates. To
provide a fair comparison, we perform an explicit allocation
of type-based policies to brokers so that the knowledge in each
broker is reduced. We allocate in the same broker partial rules
that manage the same events, and we balance the remaining
rules across brokers to balance the maximum knowledge.
The evaluation of our solution needs to analyze the behavior
of the system with a wide range of policies. While there are
already a limited number of policies speciﬁed in regulatory
documents, the way to map these abstract policies in rules that
rely on information acquired from the system depends on the
organization. An evaluation that focuses only on these policies
would be limited in evaluating the system for the future types
of complex policies. For this reason, we evaluate our system
using a set of semantically meaningful but randomly generated
polices. We use the semantic relations between the events in
our datasets to construct policies that preserve these relations.
We create such policies by deﬁning a graph that relates events
and resources: nodes in the graph are the resources; edges
of the graph are the events generated in our datasets. Each
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:20:22 UTC from IEEE Xplore.  Restrictions apply. 
)1+0&
)1(142&
’"(#$%"&
0125*%16)*(+&
)*(+&
012)1+0&
)/!&
012)1(142&
012914"&
(7-2&
012,*--"%.*-&
914"&
)(*8(14&
!"#$%"&
,*--"%.*-&
0123"4*+"/)&
0125*%16/)&
/)&
Fig. 5. Semantic relations between resources and events. We use this graph
to generate random policies that preserve a valid meaning.
policy is constructed by a random walk through the graph. The
semantic graphs we used in the evaluation of the SNMP data
is shown in Fig. 5. We use the SNMP dataset as it provides
the most diverse set of events for the construction of complex
policies.
We quantify the amount of information obtained by an at-
tacker using the number of events, as each event represents an
atomic piece of information about the system. The distributed
execution of the rules, both in the resource-based solution and
in the type-based solution, creates partial results in form of
events. These events might not carry complete information
about the system’s condition. For example, we can consider
a resource ruleset p1(A, B), p2(B, C) → partialB(C) and
partialB(C), p3(C, D) → violation(C). The knowledge of
the event partialB(r) can be used to infer that there exist two
events in the form p1(ua, ub), p2(ub, r). However, the exact
values for the resources ua and ub are unknown. Even if such
information is partial, it might still be useful to an attacker. In
our evaluation we consider this type of inference. As we do
not know the usefulness of partial events, we consider the
events that can be inferred by the knowledge of partialB
as complete events. Hence, we might be overestimating the
knowledge acquired by an attacker. This type of “backward-
inference” is measured by inverting the direction of all the
rules in the resource ruleset. In our example, we measure the
number of events in a knowledge base containing the rules
partialB(C) → p1(ua, ub), p2(ub, C) and violation(C) →
p3(C, ud), partialB(C). In this KB, the knowledge of the
event violation(C) allows the attacker to infer three other
events. We only count these events if they are not already
known by the attacker because of other information contained
in the same KB.
We evaluate the ability of the system to distribute informa-
tion across the brokers. For estimating the protection provided
by the system against a MAX ALL attacker we measure the
number of events stored in each broker. We see that brokers,
on average, store less than 10% of the events. At the most,
we have one broker that stores about 17% of the events.
The effects of increasing the number of rules are limited: the
information about resources is reused across the execution of
multiple rules. The effects of inference are also limited. By
performing inference we can obtain a few additional predicates
about resources in the system. We see that a type-based
solution requires storing a larger number of events in brokers
for all cases. Fig. 6 shows the normalized number of events
stored in each broker when the number of rules increases.
)
d
e
z
i
l
a
m
r
o
n
(
s
t
n
e
v
e
#
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
resource-inference-max
resource-inference-avg
resource-max
resource-avg
type-max
 5
 10
 15
 20
 25
 30
 35
 40
# rules
Fig. 6. Average and maximum number of events in each broker. 20 brokers.
)
d
e
z
i
l
a
m
r
o
n
(
s
t
n
e
v
e
#
 1
 0.8
 0.6
 0.4
 0.2
 0
 1
20 hosts, resource-inference-max
40 hosts, resource-inference-max
20 hosts, type-max
40 hosts, type-max
 2
 3
 4
 5
 6
 7
rule length
Fig. 7.
rules.
Events in each broker as a function of the length of the rule. 20
We measure the normalized maximum number of events
stored in a broker with the increase of the length of the rules.
Having longer rules creates the need to match a larger number
of predicate combinations. This increases the number of events
to store both in the resource-based solution and in the type-
based solution. However, the number of events in the resource-
based solution remains signiﬁcantly lower. For all cases, the
maximum is obtained as the average maximum amount of
events across multiple executions. These results are shown in
Fig. 7.
Another measure of
the protection provided toward a
MAX ALL attacker is the cumulative effects of the compro-
mises of multiple brokers. We consider brokers in decreasing
number of events to consider the worst case. We see that
our resource-based approach distributes the load so that com-
promises of multiple brokers still have limited effects. These
results are shown in Fig. 8.
Next, we measure the effects of our event distribution
against an attacker interested in knowing all events of a
speciﬁc type (i.e., a MAX EVENT TYPE attacker). We ran-
domly select an event type and declare it “type-critical”. We
measure the maximum fraction of “type-critical events” that
an attacker obtains when compromising a broker. As the
event-type distribution uses event-type for its distribution, our
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:20:22 UTC from IEEE Xplore.  Restrictions apply. 
)
d
e
z
i
l
a
m
r