• A bb instruction appears within the 𝑛 instructions indi-
tion in the 𝑛 instructions;
instructions.
cated by the previous bb instruction.
All three definitions are required, in order to add BasicBlocker to
an arbitrary ISA. The following extra requirement, a requirement
to use bb instructions, slightly simplifies the implementation of
BasicBlocker, although later we consider dropping this requirement
for compatibility.
Definition 4.4 (Enforced BB). In a BasicBlocker CPU with en-
forced BB: Before every non-bb instruction (and before 𝐼𝐶 is decre-
mented), an exception is raised if 𝐼𝐶 = 0.
To achieve an increased performance, an implementation of Ba-
sicBlocker can pre-execute bb instructions (cf. Figure 2) as defined
in Definition 4.5. This pre-execution affects the microarchitecture
and timing but not the ISA semantics.
Definition 4.5 (BB Prefetching). A BasicBlocker CPU with prefetch-
ing pre-executes a bb instruction 𝑏𝑏𝑖+1 during the execution of a
block, indicated by the bb instruction 𝑏𝑏𝑖, as soon as:
• if 𝑏𝑏𝑖 is sequential: 𝑏𝑏𝑖 is resolved.
• if 𝑏𝑏𝑖 is not sequential: the first control flow instruction of
the block is resolved.
This requires an additional register 𝑃 which holds the values 𝑛 and
𝑠𝑒𝑞 until execution reaches the instruction following the prefetched
bb instruction. More precisely, when 𝐼𝐶 = 0 and 𝐸 = 0:
• 𝐼𝐶 ← 𝑛 taken from 𝑃.
• if 𝑠𝑒𝑞 = 0 in P than 𝐵 ← 1 else 𝐵 ← 0.
If the prefetch address is invalid, or if the prefetch address is valid
but the prefetched instruction is not a bb instruction, then pre-
execution is skipped and does not raise an exception.
6
4.3 Further Optimizations
The above presented concept can be further optimized by providing
the information contained in the bb instruction as soon as possible
using pipeline forwarding. By construction, none of the information
contained in the bb instructions affects any other element of the
CPU than the fetch unit. Hence, it is possible to wire these bits back
to the fetch unit directly after the decode stage without further
changes to the design. Another clock cycle can be saved by using
a bit mask to fast-decode the output of the instruction memory
directly, with only marginal overhead.
A significant boost for performance can be achieved by intro-
ducing an additional interface to the instruction memory (or cache)
that is used to access bb instructions. This would allow the fetch
unit to request and process bb instructions in parallel with the nor-
mal instructions and, therefore, eliminate the entire performance
overhead that is introduced though the addition of these instruc-
tions. Since a basic block contains always at least one instruction
additional to the bb instruction, this instruction can be fetched
before knowing the size of the basic block, without violating the
above stated principles.
Further optimizations are possible with additional changes to
the ISA. For example, the 1-bit sequential flag can be replaced by a
multi-bit counter of the number of control-flow instructions in the
upcoming block, so (e.g.) if(a&&b&&c) can be expressed as three
branches out of a single block. This also changes the branch flag 𝐵
to a multi-bit branch counter.
The idea to announce upcoming control-flow changes early on is
also the foundation of hardware loop counters, as already discussed
in the literature [19, 43]. Here, the software announces a loop to
the hardware, which then takes responsibility for the correct exe-
cution. We can seamlessly support hardware loop counters in our
design concept. One new instruction (lcnt) is necessary to store
the number of loop iterations into a dedicated register. The start
and end address of a loop can be encoded into the bb instruction,
by indicating with two separate flags whether the corresponding
basic block is the start (s-flag) or end (e-flag) block of the loop. This
allows the hardware to know the next basic block, as soon as the
bb instruction of the end block gets executed. The fast execution
of nested loops can be supported by adding multiple start and end
flags to the bb instruction as well as adding multiple registers for
the number of loop iterations. A more detailed description of the
loop counter integration to our concept can be found in Appendix
A.
4.4 Compatibility
For simplicity and comprehension all examples above consider
an in-order, single issue processor with a generic five stage RISC
pipeline. Control-flow speculation is widely used in such proces-
sors: e.g., the ARM Cortex-A53, which has shown to be vulnerable
against speculative-execution attacks [41]. There is also tremen-
dous interest in larger, super-scalar, out-of-order processors, where
control-flow speculation is universal.
Adding support for out-of-order processors is trivial as per de-
sign, every instruction that is fetched by the processor will be retired
- that is, if none of the instructions raise an exception. Once the CPU
fetches the instruction, reordering is permitted as far as functional
BasicBlocker: ISA Redesign to Make Spectre-Immune CPUs Faster
ArXiv Version, 2021, May
correctness is ensured. Utilizing the two counter sets, reordering
can be done beyond basic block borders if the bb instruction of the
following basic block has been executed.
Similarly, support for superscalarity is easy to achieve. Once the
bb instruction is executed, the CPU may fetch and execute all in-
structions within the current basic block in an arbitrary amount of
cycles. If the successor basic block is known the CPU may fetch in-
structions from both basic blocks in one cycle. Secondary pipelines
may also be useful to pre-execute bb instructions for the following
basic block in parallel as described earlier.
Generally, the pipeline length can be chosen flexibly. However,
as the CPU needs to wait for results of branch and bb instructions,
it is desirable to make the results of these instructions available as
early as possible.
A major feature of modern systems is the support of interrupts
and context switches. We note that our concept does not impede
such features; it merely increases the necessary CPU state that
needs to be saved in such an event. More specifically, it is necessary
to save the already gathered information about the current and
upcoming basic blocks as well as the state of the loop counter, in
addition to all information usually saved during a context switch.
It is important that this data is secured against manipulation but
that is true for all data stored during a context switch (e.g. register
values, FPU state, ...).
Our proposal includes one new instruction and a modification
to existing control-flow instructions. For easier deployability, it is
desirable for a BasicBlocker CPU to be backwards-compatible. One
could define new BasicBlocker control-flow instructions separate
from the previous control-flow instructions. However, it suffices to
interpret a control-flow instruction as having the new semantics if
it is within the range of a bb instruction, and otherwise as having
the old semantics, dropping Definition 4.4. Legacy code compiled
for the non-BasicBlocker ISA will then run correctly but with low
performance, and code recompiled to use bb will run correctly with
high performance.
It would also be possible to integrate our solution into a secure
enclave by providing a modified fetch unit for the enclave. Security
critical applications could be run in the protected enclave while
legacy software can be executed on the main processor without
performance losses.
4.5 BasicBlocker for Generic ISAs
In the following, we outline the changes necessary to implement the
BasicBlocker concept in arbitrary ISAs. We observe that in common
ISAs, branches are realized with three basic operations which are
performed by a varying number of instructions.
(1) First, the operands on which the branch decision will be
made are compared. The result of the comparison may
be saved in a special purpose flag (e.g. Intel x86, ARM), a
register value, or used immediately (e.g. RISC-V, some Intel
x86).
(2) Based on the outcome of the comparison, the target address
is computed.
(3) The instruction pointer is changed to the target address
computed in the previous stage.
For most ISAs, steps 2) and 3) are combined to one instruction.
RISC-V is unusual in having only branch instructions that combine
all three operations.
A BasicBlocker ISA is required to separate operation 1) and 2)
from 3), thus avoiding the need for speculative instruction fetch-
ing. Hence, a BasicBlocker ISA needs at least one instruction that
compares the operands and computes the target address. Operation
3) is handled implicitly by the bb instruction at the beginning of
the basic block, which indicates after how many instructions the
instruction pointer is updated to the target register. A BasicBlocker
ISA may separate operation 1) and 2) arbitrarily. For example, an
ARM version of BasicBlocker could keep the decoupled compare
instruction. The branch instructions would only compute the target
address based on the compare and the instruction pointer would be
updated to the target address at the end of a basic block, indicated
by the previous bb instruction.
4.6 Security
BasicBlocker was carefully designed with security in mind and the
following section provides an overview of the security argument.
4.6.1 Defense Against Spectre-type Attacks. The first and fore-
most goal of BasicBlocker is to allow removing control-flow spec-
ulation to prevent Spectre-type attacks. CPUs that implement Ba-
sicBlocker should be designed after the following principle:
The microarchitectural state of a CPU is affected only by
instructions that will eventually be retired.
Processors adhering to this principle are not allowed to do any
type of control-flow speculation, including speculative fetching,
as speculation always affects the microarchitectural state at least
temporarily. This strict and simple design principle leads directly to
the conclusion that the CPU is not vulnerable against any Spectre-
type attack exploiting control-flow speculation, including Spectre-
PHT, Spectre-BPB, and Spectre-RSB (taking the classification of [13]).
BasicBlocker enables fast and efficient execution of code while
maintaining the above stated principle.
Since BasicBlocker inherently does not provide mechanisms tar-
geting the performance impact of disabling data-flow speculation
(e.g. store-load forwarding, data cache prefetching), we consider
attacks exploiting data-flow speculation such as Spectre-STL (again
taking the classification of [13]) out of scope for this paper. It is the
CPU designer’s responsibility to prevent exploitation of data-flow
speculation which can either be achieved by disabling it entirely or
by implementing appropriate countermeasures. It is also possible
to extend BasicBlocker to provide performance recovering mecha-
nisms for data-flow speculation, e.g. by flagging allowed store to
load forwarding code constructs at compile time, but we leave this
for future work. We also do not discuss exception-based attacks
such as Meltdown [39].
4.6.2 Manipulation of BB Instruction Arguments. In the follow-
ing, we consider a powerful attacker that is able to manipulate the
bb instruction arguments or the internal state of the bb registers.
An attacker able to manipulate arguments of the bb instruction is
in control of certain parts of the control flow, by either flipping the
sequential flag, decreasing the basic block size, or increasing the
basic block size. Flipping the sequential flag will always lead to an
7
ArXiv Version, 2021, May
J. Thoma, J. Feldtkeller, M. Krausz, T. Güneysu, D. J. Bernstein
exception, due to Definition 4.3. Decreasing the basic block size
allows to skip the last instructions of a basic block, which might be
critical, e.g. the removal of a secret key. Increasing the basic block
size raises an exception in the enforced BB mode (Definition 4.4), but
allows the execution of additional instructions in the legacy mode.
Such additional instructions might be sufficient to form a covert
channel, if the required gadgets can be found in the executable.
While those attacks may be harmful, this attacker model requires
full control over the code executed on the victim’s device and/or
the register state. Generally, there are two points in time where an
attacker can inject the manipulations described above: 1) at compile
time and 2) at runtime. For 1), the attacker must be in control of the
compiler which gives full control over the code anyway. In addition,
a simple static analysis is sufficient to verify the correctness of all bb
arguments of a specific binary. 2) Manipulation at run time comes
down to either code injection or manipulation of internal values
of the CPU for a particular program state, e.g. during a context
switch or physical fault attack. Both, an attacker in control of the
register state and an attacker able to perform code injection, have
full control over the code executed by the victim’s device in any
case. BasicBlocker does not affect important OS security features
like access rights management and therefore does not facilitate
such attacks.
5 IMPLEMENTATION
We now give a specific example of BasicBlocker applied to an ISA,
by defining BBRISC-V, a BasicBlocker modification of the RISC-
V ISA. We further present a proof-of-concept implementation on
a BBRISC-V soft core as well as a timing accurate simulator. To
allow running a variety of benchmarks, we also provide a modified
compiler for the BBRISC-V ISA.
Our modified ISA additionally specifies support for hardware
loop counters, as proposed in Section 4.3, which we partly evaluate
in Appendix A.
5.1 BBRISC-V ISA
The BasicBlocker modification requires the definition of the bb
instruction as well as semantic changes to all control-flow instruc-
tions.
The bb instruction does not fit into any of the existing RISC-V
instruction types so we defined a new instruction type to achieve
an optimal utilization of the instruction bits (Figure 5). This in-
struction does not take any registers as input but rather parses the
information directly from the bitstring. The size is encoded as a 16-
bit immediate, enabling basic blocks with up to 65536 instructions.
One can split a larger basic block into multiple sequential blocks
if necessary. The sequential flag is a one-bit immediate value. The
behavior of all RISC-V control-flow instructions (JAL, JALR, BEQ,
BNE, BLT, BGE, BLTU, BGEU) is changed so that they alter the control
flow at the end of the current basic block.
We also include hardware loop counters in the BBRISC-V ISA.
The lcnt instruction sets the number of loop iterations (Figure 5).
This I-Type instruction requires a 12 bit immediate value as well as
a source and a target register. The counter value is then computed
as 𝑐𝑛𝑡 = 𝑖𝑚𝑚 + 𝑟𝑠.𝑣𝑎𝑙𝑢𝑒 and saved to the loop counter set defined
in 𝑟𝑑. To fully support loop counters we also add four start and
8
end flags to the bb instructions, to support a maximum of four loop
counter sets.
5.2 CPU Implementation
VexRiscv. For the soft core variant of an in-order CPU, we chose
the 32-bit VexRiscv core [42], written in SpinalHDL. This soft core
is highly configurable by the use of plugins, which can be easily
extended and modified to include new functionalities. We use a
configuration with five stages (IF, ID, EX, MEM, WB) and 4096
byte, one-way instruction- and data caches. The result of control-
flow instructions is available after the memory stage. We compare
the modified BasicBlocker version of VexRiscv against the original
core with the best available branch predictor (dynamic target). To
enable a fair comparison, the BasicBlocker version has minimal
configuration delta to the original core, that is we disabled control-
flow speculation and added the logic described in Section 4.
Although speculation based attacks mostly get linked to out-of-
order CPUs with deep pipelines, they are also feasible on smaller, in-
order architectures [41] that are more comparable to the VexRiscv.
Gem5. To simulate the performance of CPUs with superscalar
pipelines and out-of-order execution, we modified the 64-bit O3
CPU model of the Gem5 simulator [8]. The Gem5 implementation
allows high configurability, for example arbitrary length pipelines
can easily be simulated by modifying the delays between two stages.
In the default configuration, we use a 2x superscalar pipeline
configuration. If not stated otherwise, we use the default configu-
ration supplied in the se.py configuration file. The simulated CPU
is equipped with 64kB L1 data cache and 32kB instruction cache.
Using a 192 instruction entry sized reorder buffer, the CPU can exe-
cute instructions out-of-order. As for the VexRiscv implementation,
the BasicBlocker version makes minimal configuration changes to
enable a fair comparison of performance results.
5.3 Compiler Modification
To be able to evaluate the performance of our concept with well
known benchmark programs we developed a compiler supporting
and optimizing towards our instructions. Our compiler is based
on the LLVM [36] Compiler Framework version 10.0.0, where we
modified the RISC-V backend by introducing our ISA extension and
inserting new compilation passes at the very end of the compilation
pipeline to not interfere with other passes that do not support our
new instructions.
First of all we split basic blocks for all occurrences of call in-
structions since they break the consecutive fetching and execution
of instructions. As a next step we insert the bb instructions at the
beginning of each basic block that include the number of instruc-