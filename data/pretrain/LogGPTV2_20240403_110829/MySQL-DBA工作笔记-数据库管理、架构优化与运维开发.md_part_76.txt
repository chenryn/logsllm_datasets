## Page 513
式来管理，统一的对接编码就是[task_code]。
种策略，另外 20 台是第二种策略，最后 10 台是第三种策略，我们可以通过 profile 的方
管理会更加方便。
[profile_name]
使用JSON的格式来统一解析。
的定时任务，我们完全可以通过任务的调度算法来对接。
Crontab 的配置信息,这个维度的粒度可以很细,但是不需要有时间属性,因为对于Crontab
更细粒度的检测，还是对于调度系统的性能和功能的补充完善，都是一种互补的方式。
探测到问题症结，能够及时进行修复。所以在数量上有一个基本保证，无论是对于业务
一天下来就是6*24*100=14400次，如果接入其他任务，那么这个数量就要翻好几倍，这
器，我们可以对每一台服务器定制一些任务，比如每隔10分钟检测一些服务心跳，那么
机器不会偷懒，有问题就会毫不犹豫的抛出来。从数量接入上来说，比如有100 台服务
距的，而要实现更通用的任务接入，就需要考虑更丰富的场景。
下子多了起来。
13.3.4
顾虑，那么问题的价值就很明显了。
和微调即可。比如我们把任务调度的时间和周期做成可视化的方式。
度就大大提高了。
评估，如果后续需要调整备份任务的并行度，可以扩展也可以收缩，那么这个事情幸福
第二个维度是 profile，也就是模板维度，比如我们有100 台服务器，其中70台是一
这样一来，我们定义了业务密码，比如备份任务是 mysqlfullbackup，那么对任务的
对于通用任务的接入尤为重要，我的初步设想是做到任务的平滑接入，统一对接
对于备份任务的Crontab 设置而言，其实数量不是很大，在数量上验证调度还是有差
在这个基础之上，我们还能做更多的小细节，比如自动接入Crontab，你只需要确认
[task_code]
按照这个维度，我可以抽象成一系列的属性组合，其实对于额外的参数对接，可以
     -  ￥ ￥ × 0 0
打个比方，我要接入的Crontab 是这样的。
在使用Celery 接入了Crontab 实现了初步的自动化任务编排之后,发现可做的事情一
上面的很多思想是和同事聊需求的过程中突然想到的，解决问题你有顾虑，解决了
通用 Crontab 接入任务调度的思考
[ttsbot]  uaedbot] [urered adtxos] [aueu adtxos]  uzed adtxos]  
第13章MySQL运维基础架构设计|491
---
## Page 514
492|MySQLDBA工作笔记：数据库管理、架构优化与运维开发
和解决办法。
按照这种思路，整个脚本的接入相对会平滑很多，也会避免很多前期不明确的问题
[task_code][profile_name] [ip_addr][db_port][cron_time]
编排之后会把编排的时间配置生成到这个 profile 表中。
这样一来，不同的任务就可以对接不同的需求来使用调度器进行调度编排了。
---
## Page 515
14.1.1
花费不少的时间的。从性价比来说，一次构建+持续改进的方式，效果还是很不错的。
数据库本身的安装部署是技术可控的，但除此之外，还有很多流程的贯通，这些是需要
实际工作中会发现有很多的因素导致安装部署成为了一种耗时的工作。主要的原因在于
14.1
展开，期望通过这些运维模块的改进，带给大家一些改进的思路和参考。
作中 MySQL 权限的管理。而运维管理工作会在高可用管理、分布式管理等几个方向进行
接口化 iptables 管理和查询；通过封装 MySQL 权限管理模块，能快速方便地对接日常工
现 Redis 服务启停操作，从而快速响应业务维护的需求；通过标准化 iptables 格式，实现
化、规范化的改造之后实现数据库一键部署，提高工作效率和准确度；通过平台能够实
模块主要包含数据库实例一键部署、备份恢复、服务启停、权限开通等，期望通过标准
前的运维工作，包括两个部分，一个是基础运维工作，一个是运维管理工作。基础运维
更有价值的地方，那么我们的运维工作就不会成为一种负担。在这里我们需要梳理下当
有的同学会觉得安装部署应该是很容易的一件事情，理论上应该是这样的，但是在
MySQL 运维工作繁琐而复杂，如果能够提高运维效率和质量，把更多的时间投入到
从流程上来说，部署MySQL 服务相关的流程大体如下表14-1所示。
针对MySQL部署的改进，首先需要明确一些潜在的问题和不规范的因素。
闲中不放过，忙处有受用；静中不落空，动处有受用；暗中不欺隐，明处有受用。
步骤
安装部署的步骤梳理
自动化部署
第14章
MySQL初始化
MySQL软件部署
数据目录配置
内核参数配置
MySQL运维管理模块设计
任务
表14-1
对于多版本、多实例部署，需要规范数据目录
数据字典的初始化，最耗时的过程
根据预置配置统一规范系统配置
选择哪个版本，哪个分支
任务介绍
—《菜根谭》
---
## Page 516
494丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
插件和流程，需要做到灵活的配置管理。
最关注、最需要的信息罗列出来，在这个基础上进行流程的改进和对接，对于一些可选
14.1.3
小时之间，对于快速发展的业务来说，这显然不能满足需求。
粗略统计，在早期要完成整个流程化操作，从问题排查到解决，基本在半个小时到一个
14.1.2
部署和管理还是存在较大的改进空间。
流程通过多种语言脚本实现，调用方式多样化
在运维侧，MySQL部署的基本页面设计如下图14-2所示。
在运维管理端，需要做的改进就是把图14-1中的潜在问题进行梳理和归类，把运维
总体来说，部署的工作因为不够标准化和统一，导致运维效率和交付质量难以保证，
部分密码信息不统一管理，存在单点风险
部署中常见的问题和不规范的现象如下图14-1所示。
从目前行业里的落地情况来看，大部分都实现了脚本化的部署，但是对于流程化的
所以林林总总下来，其实要做的事情还是蛮多的，也蛮复杂的。
步骤
运维侧的安装部署设计
安装步骤中常见的问题
2
二
5
逻辑重复校验或者无校验
6
流程所需参数太多
流程衔接不够灵活
元数据管理散乱
初始化账号配置
安装MySQL插件
系统权限配置
高可用配置
主从配置
备份配置
报警配置
监控配置
任务
MySQL部署潜在问题
图14-1
比如半同步插件，审计插件等，可选项
配置高可用策略，高可用环境构建
配置一主一从或者一主多从的环境
开通部分系统或者服务的访问权限
配置不同IDC的网络配置，可选项
路径设置不够规范
部署方式不统一—
预置一批初始应用账号
使用第三方报警工具配置
使用第三方监控工具提取
任务介绍
脚本参数逻辑依赖重
部署方式差异化大，
目录设置没有规范，都存放在一个目录下
支持单机多版本不够通用
支持单机多实例不够通用
，逻辑维护难以扩展
续表
---
## Page 517
了，是需要申请多少个数据库实例。
不理解的情况，针对资源需求我们可以做一些定制化的改进，但是交付的标准就很清晰
他们是不关注灾备和高可用的，而运维同学默默地做好了这些，有时候甚至还会有互相
申请还是建议参考PaaS平台的设计思路。
能够把这个边界打破，通过成本的方式衔接起来，所以对于业务使用来说，我们的资源
学来说，在早期的业务场景中是没有成本的意识的，现在云服务是一种很好的解决方案，
活地管理。
一种基础的系统服务交付；而对于 DBA来说，就可以通过配置和优化的方式进行更加灵
全可以通过参数配置解决，这是一种改进的思路，这样我们的部署服务其实就可以作为
说就不用重新再做一次了，有点类似于 yum 的安装方式，而对于端口等其他的配置，完
就是说，我们可以预先做好一个模板配置和文件部署，对于最耗时的数据字典初始化来
之外，我们是否可以进一步把整个MySQL 的部署改造为一种更加通用的配置化部署；也
而对于实例部署，其实本质的需求就是基于成本的资源服务，而对于大多数业务同
下图14-3是一个数据库资源申请的入口页面。
这样一来，可以很清晰传达出一种资源服务的意识，比如对于业务同学来说，其实
在这个基础上我们可以进一步提炼，那就是前面的一些步骤中除了一些动态的参数
通过不断的调试改进，目前的环境部署时间可以缩短到5 分钟之内。
实例部署
数据库缓存（MB）
数据库字符集
基础配置
业务编码
数据库端口
数据库版本
数据库类型
应用配置
主机IP
监控部需是否配置半同步
UTF8
4308
MySQL_5.7.16
MySQL
192.168.10.203
图14-2
开始安装查着日志
第14章MySQL运维管理模块设计|495
---
## Page 518
496丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
到密码信息。
的步骤：
14.2.1
规范，应该要避免。
分配和开通，而是在于权限的合理性和规范性方面。
14.2
（2）查找DBA管理员账号登录，
（1）通过中控服务器登陆到指定的数据库服务器。
如果需要梳理和改进数据库权限问题，
从规范和合理性来说，（2）和（3）虽然从技术上可以实现，但是不符合流程化管理
比如以下几种很特别的权限场景：
数据库的权限管理是DBA工作中很常见的一部分内容，总体来说难度不在于权限的
（3）几个人共用同一个账号，用户名相同，但是密码可以不同，权限可以不同。
（2）几个人共用同一个账号，
（1）几个人共用同一个账号，看起来用户名相同，密码相同，但是权限却可以不同。
根据您提供的业务需求，需要申请2个数据库实例。
使用期限：
网络分区：
应用最大连接数：
内存：
存储性能：
业务简称
数据库名
定制化需求
数据库权限管理的流程
数据库权限管理
读写分离：
无期眼3个月6个月12个月
公司内网
通用配通（SAS）
CTR/AMS/ECA
个读节点
，用户名相同，但是密码可以不同，权限可以相同。
，可能需要使用密码管理工具（比如 keepass）来得
图14-3
我们不妨先来梳理下数据库权限管理的主要
分库分表：（中间件服务器：4核/8G/300G）
字符集
硬盘
CPU
硬件配置
UTF8
默让
百
---
## Page 519
情况也是需要进行特殊处理的。
username@192.168.2.%和username@192.168.3.%，如果用户名相同，但是密码不同，这种
别的，而存储过程，函数是execute 权限，如果以偏概全，在生成语句的时候会抛出错误。
来实现的。
5.6 以下的版本，只支持 grant 的方式，而 5.6 以上版本是使用 create user，grant 语句组合
分别是 create user 和 grant 语句，在实际处理的时候基于版本的差异会有一些区别，比如
能上来说，可以考虑以下的一些设计方式：
所以对于数据库权限管理是希望通过某种半自动化的方式，解决以下几类痛点问题：
在于DBA需要根据输入的信息去拼接权限相关的 SQL语句，这个过程中容易存在遗漏：
14.2.2数据权限管理的设计方案
同理，在用户创建语句生成时，如果已经存在同名用户但是网段不同，比如：
在对象层面也有一些细节需要处理，比如 select，insert，update 等权限是局限于表级
·根据客户端IP 信息，截取IP的前三段动态生成用户，比如192.168.2.205，我们
针对上面所讲的步骤，我们可以自行梳理出一些潜在问题和痛点，整个过程的瓶颈
整个过程可以参照下图14-4，根据输入的信息来做筛选和过滤，组合成两类语句，
整个过程就不需要人工的重度参与了，可以花费更多精力在权限的审核方面，从功
（3）确认SQL/命令无误后执行。
（2）人工初步审核自动化生成的 SQL/命令。
（1）能够根据输入的信息自动生成匹配的SQL语句。
以上的操作步骤，流程较长，人工介入环节较多，导致效率不高，权限信息容易遗漏。
（7）如需开通防火墙信息，则需要手工完成系统权限的开通。
（6）确认后执行SQL语句/命令。
（5）甄别业务需求，审核SQL语句/命令。
（4）结合业务来整理开通权限的SQL语句/命令。
（3）查找数据库当前的权限信息。
根据权限类型，检查用户名是否符合规范，判断业务同学提交的权限是否合适;
截取192.168.2；
输入参数保证健壮性，自动过滤空格。
帮助生成随机密码，转储密码信息到数据库中；
的用户为前缀test_，线上环境的用户名前缀是 srV_；
根据环境类型，检查用户名是否符合规范，根据业务匹配用户名，比如测试环境
根据输入权限动态生成 SQL；
根据输入对象动态生成SQL；
第14章MySQL运维管理模块设计丨497
---
## Page 520
498丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
库环境，如果是5.7语句就会是createuser。
根据如上的输入，自动生成的 SQL语句如下图14-6所示，这是一个5.5版本的数据
一个初步的数据库权限管理页面如下图14-5所示，我们可以根据输入的信息进行转换。
客户端IP列表
对象列表
权限列表
MySQL服务开通
客户端IP列表
服务端IP：端口
环境类型
ansible用户
对象列表
数据库
权限列表
业务简租
用户名
None 注：用户名根据业务名称来指定
define_test_platform
testdb
Select
192.168.100.2,192.168.20.3,192.168.100.3
图14-5
图14-4
检查已有用户信息
192.168 3%
<
---
## Page 521
现方式是不适合批量任务处理的，这是我们很多 DBA做自动化运维常犯的一个错误。
然也能够实现开通权限的功能，但是只能算作是平台化操作，不是自动化操作，这种实
图 14-7是Greenplum 的平台化工具，可以基于图形工具联动修改防火墙的配置文件，虽
息是不完整的。
来说，save 模式是不大推荐的，因为它会重构 iptables 文件，对于权限管理来说，配置信
save）还是reload（service iptables reload）模式，其实实现方式是存在一些差异的，简单
14.3.1系统权限管理的痛点
频操作，所以我们将其改造为自动化的需求会很强烈。
14.3
的密码也可以做到统一管理，对于业务使用来说是透明的。
建2个相关的数据库用户，根据权限信息我们拼接出2条权限语句。同时对于不同网段
所以对于目前的操作，主要存在以下几个问题：
有的同学可能对生效模式存在疑问，即 iptables 文件是通过 save 模式（service iptables
在目前的运维工作中，系统权限管理主要是指防火墙的权限管理，这类操作属于高
需要补充的是，我们基于平台化操作的目标应该是批量任务，需要统一的规则，
所以这里的难点就是把修改配置文件的过程转化成标准化的流程操作。
（5）如果想统一管理防火墙备注信息，做权限开通历史的查询，目前实现难度极大
（4）防火墙信息开通的衡量标准是通过内存级别来鉴别，但是内存层面没有备注信息。
（3）防火墙的设定规则不统一，有的使用 IP-Range 的方式，有的使用单 IP 的方式。