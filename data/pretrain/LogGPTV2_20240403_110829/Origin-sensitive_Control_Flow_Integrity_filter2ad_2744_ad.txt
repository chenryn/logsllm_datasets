43%
0%
0%
71%
83%
98%
83%
0%
0%
91%
60%
88%
56%
Table 3: Improvement of precision by OS-CFI over context-
insensitive CFI, shown by the signiﬁcant reduction in the
average (Avg) and largest (Lg) EC sizes.
Table 1. Nevertheless,the absolute average and largest EC sizes
OS-CFI can achieve still clearly show its eﬀectiveness. For
example, OS-CFI can reduce the largest EC size of omnetpp
from 109 to 2, a 98% reduction. It can also reduce the average
EC size of gcc by 96% from 30.7 to 1.3. Overall, OS-CFI can
reduce the average and largest EC sizes by 59.8% and 60.2%
on average, respectively.
Figure 4: An example in sjeng where the ICT at Line 15 has
no context in SUPA.
Overall statistics of OS-CFI: Table 4 shows the overall
statistics of OS-CFI when applied to all the C/C++ benchmarks
in SPEC CPU2006 and NGINX. The second and third columns
show the number of C-style ICTs and virtual calls, respectively.
It is clear that C++ programs often use C-style ICTs. Any
protection for C++ programs thus must support both types of
ICTs. OS-CFI enforces an adaptive policy where an ICT can
be protected by either origin or call-site sensitivity. However,
it may fall back to the context-insensitive policy if SUPA
fails to resolve the points-to set for the ICT or if SUPA
USENIX Association
28th USENIX Security Symposium    203
1typedefint(*EVALFUNC)(intsq,intc);2staticEVALFUNCevalRoutines[7]={3ErrorIt,4Pawn,5Knight,6King,7Rook,8Queen,9Bishop};1011intstd_eval(intalpha,intbeta){12for(j=1,a=1;(a<=piece_count);j++){13score+=(*(evalRoutines[piecet(i)]))14(i,pieceside(i));15}16}Benchmark
400.perlbench
401.bzip2
403.gcc
433.milc
445.gobmk
456.hmmer
458.sjeng
464.h264ref
444.namd
447.dealII
450.soplex
453.porvray
471.omnetpp
473.astar
483.xalancbmk
NGINX
#ICTs
#c-Call
#vCall
#ICTs
Origin sensitive
#Origins
135
20
413
4
59
9
1
367
12
7
0
38
39
0
18
393
0
0
0
0
0
0
0
0
0
95
357
76
403
1
53
20
249
0
29
1
0
318
12
73
0
37
276
0
49
4
139
0
12
15
0
52
30
59
0
29
243
0
2073
0
1486
184
1544
169
Avg
2.5
1.0
1.0
0
1.4
1.0
0
1.0
1.0
1.0
0
1.5
1.0
0
1.0
1.0
OS-CFI / Adaptiveness
Lg
6
1
1
0
3
1
0
1
1
1
0
5
1
0
1
1
#ICTs
18
0
88
4
7
1
0
7
0
3
0
8
21
0
6
37
Depth
Call-site sensitive
Avg
3.2
0
1.0
1.0
1.0
1.0
0
1.5
0
1.0
0
1.0
1.0
0
1.0
1.0
2
0
2
1
3
1
0
1
0
2
0
3
2
0
3
3
Lg
8
0
1
1
1
1
0
2
0
1
0
1
1
0
1
1
#ICTs
Context-insensitive
Lg
349
0
218
1
Avg
25.5
0
29.8
0
661.7
1.0
7
1.7
0
27.9
1.2
14.4
27.5
1.0
7.2
13.8
1637
1
7
2
0
37
11
79
44
1
29
102
64
0
76
0
23
7
1
42
0
26
357
69
145
1
599
172
Overall
Avg
11.4
1.0
3.4
1.0
246.3
1.0
7.0
1.1
1.0
6.7
1.2
7.5
9.2
1.0
3.5
6.6
Lg
349
1
218
1
1637
1
7
2
1
37
11
79
44
1
29
102
Table 4: Overall distribution of ICTs among origin sensitive, call-site sensitive, and context-insensitive ICTs. The second column
shows the total number of C-style indirect calls, while the third column shows the number of virtual calls. We omit the results of
mcf, libquantum, and sphinx3 from this table because they do not have ICTs in their main programs.Columns marked with
Avg and Lg show the average and largest EC sizes, respectively.
fails to provide the context for the ICT. The latter could
happen if the ICT uses global function pointers (e.g., Fig. 4).
Speciﬁcally, the ICT in Line 13 calls global function pointers
deﬁned in the evalRoutines array. Because evalRoutines
is initialized statically, SUPA will not generate any context for
this ICT. Neither will origin or call-site sensitivity improve
the precision of such cases because the target is decided by the
index (piecet(i)). Even µCFI can only provide the same
precision as context-insensitive CFI in this case because the
constraint data (piecet(i)) can potentially be compromised
before being captured by µCFI using processor trace [17].
In Table 4, most ICTs are protected by origin sensitivity.
Interestingly, the number of origins (the 5th column) is often
less than the number of ICTs (the 4th column) because some
ICTs may share origins. Both origin and call-site sensitivity
can reduce most of the average and largest EC sizes to less
than 2 and 5, respectively 6. Note that OS-CFI prefers call-site
sensitivity over origin sensitivity. Origin sensitivity is used
only if call-site sensitivity fails to provide suﬃcient security.
Therefore, ICTs protected by origin sensitivity generally have