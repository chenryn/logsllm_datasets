the COOP main loop.
W-3 use a vfgadget that calls a C-style function pointer.
is,
While approach W-1 may be practical in certain scenarios
and for certain WinAPI functions, it is unlikely to be feasible
in the majority of cases. For example, virtual functions that
call WinExec() should be close to non-existent.
Approach W-2 is simple to implement: a counterfeit object
can be crafted whose vptr does not point to an actual vtable
but to the import table (IAT) or the export table (EAT) [42]
of a loaded module such that the ML-G invokes the WinAPI
function as a virtual function. Note that IATs, EATs, and
vtables are all arrays of function pointers typically lying
in read-only memory; they are thus in principle compatible
data structures. As simple as it
the approach has two
important drawbacks: (i) it goes counter to our goal G-2 as
a C function is called at a vcall site without a legitimate
vtable being referenced; and (ii) for x64, the this-ptr of the
corresponding counterfeit object is always passed as the ﬁrst
argument to the WinAPI function due to the given C++ calling
convention. This circumstance for example effectively prevents
the passing of a useful command line to WinExec(). This
can be different for other WinAPI functions,
though. For
example, calling VirtualProtect() with a this-ptr as
ﬁrst argument still allows the attacker to mark the memory
of the corresponding counterfeit object as executable. Note
that VirtualProtect() changes the memory access rights
for a memory region pointed to by the ﬁrst argument. Other
arguments than the ﬁrst one can be passed as described in
§III-D1 for x64. For x86, all arguments can be passed using
the technique from §III-D2.
type of vfgadget
For approach W-3 a special
is re-
quired: a virtual
function that calls a C-style function
pointer with non-constant arguments. We refer to this type
of vfgagdet as INV-G, an example is given in Figure 8:
the virtual function GuiButton::clicked() invokes the
ﬁeld GuiButton::callbackClick as C-style function
pointer. This particular vfgadget allows for the invocation of
arbitrary WinAPI functions with at least three attacker-chosen
arguments. Note that, depending on the actual assembly code
of the INV-G, a fourth argument could possibly be passed
752
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:18 UTC from IEEE Xplore.  Restrictions apply. 
esp 
before
arg.
ML-ARG-G
stack frame
esp
after
esp 
before
arg.
ML-ARG-G
stack frame
esp
after
esp 
before
arg.
ML-ARG-G
stack frame
esp
after
esp 
before
arg.
arg.
esp
after
ML-ARG-G
stack frame
1
vfgadget( x )
2
vfgadget( x, x )
3
vfgadget(  )
4
vfgadget(  )
vfgadget(  )
Fig. 7: Examples for stack layouts before and after invoking vfgadgets under an ML-ARG-G (thiscall calling convention). The
stack grows upwards. 1(cid:3) vfgadget with one argument: the stack is balanced. 2(cid:3) vfgadget with two arguments: esp is moved
down. 3(cid:3) vfgadget without arguments: esp is moved up. 4(cid:3) two vfgadgets without arguments: two arguments are piled up.
class GuiButton {
private:
      int id;
      void(*callbackClick)(int, int, int);
public:
      void registerCbClick(void(*cb)(int, int, int)) { 
callbackClick = cb; 
      }
      virtual void clicked(int posX, int posY) {
            callbackClick(id, posX, posY);
      }
};
INV-G
Fig. 8: Example for INV-G: clicked invokes a ﬁeld of
GuiButton as C-style function pointer.
through r9 for x64. Additional stack-bound arguments for
x86 and x64 may also be controllable depending on the actual
layout of the stack. Calling WinAPI functions through INV-
Gs should generally be the technique of choice as this is more
ﬂexible than approach W-1 and stealthier than W-2. An INV-
G also enables seemingly legit transfers from C++ to C code
(e. g., to libc) in general. On the downside, we found INV-
Gs to be relatively rare overall. For our real-world example
exploits discussed in §V, we could though always select from
multiple suitable ones.
F. Implementing Conditional Branches and Loops
Up to this point, we have described all building blocks
required to practically mount COOP code reuse attacks. As
we do not only aim for COOP to be stealthy, but also to be
Turing complete under realistic conditions (goal G-4), we now
describe the implementation of conditional branches and loops
in COOP.
In COOP, the program counter is the index into the con-
tainer of counterfeit object pointers. The program counter is
incremented for each iteration in the ML-G’s main loop. The
program counter may be a plain integer index as in our exem-
plary ML-G Course::˜Course or may be a more complex
data structure such as an iterator object for a C++ linked list.
Implementing a conditional branch in COOP is generally possi-
ble in two ways: through (i) a conditional increment/decrement
of the program counter or (ii) a conditional manipulation of the
next-in-line counterfeit object pointers in the container. Both
can be implemented given a conditional write vfgadget, which
we refer to as W-COND-G. An example for this vfgadget type
is again Student2::getLatestExam() from Figure 6.
As can be seen in lines 3–7 of the function’s assembly code
in Listing 1, the controllable write operation is only executed
in case [this-ptr + 8] (cid:4)= 0. With this semantics, the attacker
can rewrite the COOP program counter or upcoming pointers
to counterfeit objects under the condition that a certain value
is not null. In case the program counter is stored on the stack
(e. g., in the stack frame of the ML-G) and the address of the
stack is unknown, the technique for moving the stack pointer
described in §III-D2a can be used to rewrite it.
Given the ability to conditionally rewrite the program
counter, implementing loops with an exit condition also be-
comes possible.
IV. A FRAMEWORK FOR COUNTERFEIT
OBJECT-ORIENTED PROGRAMMING
Implementing a COOP attack against a given application
is a three step process: (i) identiﬁcation of vfgadgets, (ii)
implementation of attack semantics using the identiﬁed vfgad-
gets, and (iii) arrangement of possibly overlapping counterfeit
objects in a buffer. Since the individual steps are cumbersome
and hard to perform by hand, we created a framework in the
Python scripting language that automates steps (i) and (iii).
This framework greatly facilitated the development of our
example exploits for Internet Explorer and Firefox (see §V). In
the following, we provide an overview of our implementation.
A. Finding Vfgadgets Using Basic Symbolic Execution
For the identiﬁcation of useful vfgadgets in an application,
our vfgadget searcher relies on binary code only and optionally
debug symbols. Binary x86-64 C++ modules are disassembled
using the popular Interactive Disassembler (IDA) version
6.5. Each virtual function in a C++ module is considered a
potential vfgadget. The searcher statically identiﬁes all vtables
in a C++ module using debug symbols or, if these are not
available, a set of simple but effective heuristics. Akin to other
work [41], [57], our heuristics consider each address-taken
array of function pointers a potential vtable. The searcher
examines all identiﬁed virtual functions whose number of
basic blocks does not exceed a certain limit. In practice, we
found it sufﬁcient and convenient to generally only consider
753
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:18 UTC from IEEE Xplore.  Restrictions apply. 
virtual functions with one or three basic blocks as potential
vfgadgets; the only exception being ML-Gs and ML-ARG-
Gs that due to the required loop often consist of more basic
blocks. Using short vfgadgets is favorable as their semantics
are easier to evaluate automatically and they typically exhibit
fewer unwanted side effects. Including long vfgadgtes can,
however, be necessary to fool heuristics-based code reuse
attack detection approaches (see §VI).
The searcher summarizes the semantics of each basic block
in a vfgadget in single static assignment (SSA) form. These
summaries reﬂect the I/O behavior of a basic block in a com-
pact and easy to analyze form. The searcher relies for this on
the backtracking feature of the METASM binary code analysis
toolkit [27], which performs symbolic execution on the basic
block level. An example of a basic block summary as used by
our searcher was already provided in the listed semantics for
the second basic block of Exam::getWeightedScore()
in §III-D1. To identify useful vfgadgets, the searcher applies
ﬁlters on the SSA representation of the potential vfgadgets’
basic blocks. For example, the ﬁlter: “left side of assignment
must dereference any argument register; right side must deref-
erence the this-ptr” is useful for identifying 64-bit W-Gs; the
ﬁlter: “indirect call independent of [this]” is useful for ﬁnding
INV-Gs; and the ﬁlter: “looped basic block with an indirect
call dependent on [this] and a non-constant write to [esp-4]”
can in turn be used to ﬁnd 32-bit ML-ARG-Gs.
B. Aligning Overlapping Objects Using an SMT Solver
Each COOP “program” is deﬁned by the order and posi-
tioning of its counterfeit objects of which each corresponds
to a certain vfgadget. As described in §III-C5, the overlap-
ping of counterfeit objects is an integral concept of COOP;
it enables immediate data ﬂows between vfgadgets through
ﬁelds of counterfeit objects. Manually obtaining the align-
ment of overlapping counterfeit objects right on the binary
level is a time-consuming and error-prone task. Hence, we
created a COOP programming environment that automatically,
if possible, correctly aligns all given counterfeit objects in
a ﬁxed-size buffer. In our programming environment,
the
“programmer” deﬁnes counterfeit objects and labels. A label
may be assigned to any byte within a counterfeit object. When
bytes within different objects are assigned the same label,
the programming environment takes care that these bytes are
mapped to the same location in the ﬁnal buffer, while assuring
that bytes with different labels are mapped to distinct locations.
Fields without labels are in turn guaranteed to never overlap.
These constraints are often satisﬁable, as actual data within
counterfeit objects is typically sparse.
For example, the counterfeit object A may only contain its
vptr (at relative offset +0), an integer at the relative offset
+16 and have the label X for its relative offset +136; the
counterfeit object B may only contain its vptr and have the
same label X for its relative offset +8. Here, the object B ﬁts
comfortably and without conﬂicts inside A such that B +8
maps to the same byte as A +136.
Our programming environment relies on the Z3 SMT
solver [18] to determine the alignment of all counterfeit objects
within the ﬁxed-size buffer such that, if possible, all label-
related constraints are satisﬁed. At the baseline, we model
the ﬁxed-size buffer as an array mapping integers indexes to
integers in Z3. To prevent unwanted overlaps, for each byte in
each ﬁeld, we add a select constraint [19] in Z3 of the form
select(offset-obj + reloffset-byte) = id-ﬁeld
where offset-obj is an integer variable to be determined by
Z3 and reloffset-byte and id-ﬁeld are constant integers that
together uniquely identify each byte. For each desired overlap
(e. g., between objects A and B using label X), we add a
constraint of the form
offset-objA + reloffset(A,X) = offset-objB + reloffset(B,X)
where offset-objA and offset-objB are integer variables to
be determined by Z3 and reloffset(A,X) = 136 and
reloffset(B,X) = 8 are constants.
In the programming environment, for convenience, symbolic
pointers to labels can be added to counterfeit objects. Symbolic
pointers are automatically replaced with concrete values once
the offsets of all labels are determined by Z3. This way, mul-
tiple levels of indirection can be implemented conveniently.
V. PROOF OF CONCEPT EXPLOITS
To demonstrate the practical viability of our approach, we
implemented exemplary COOP attacks for Microsoft Internet
Explorer 10 (32-bit and 64-bit) and Mozilla Firefox 36 for
Linux x64. In the following, we discuss different aspects of our
attack codes that we ﬁnd interesting. We used our framework
described in §IV for the development of all three attack codes.
Each of them ﬁts into 1024 bytes or less. All employed
vfgadgets and their semantics are listed in Tables A.I–A.IV
in the Appendix.
For our Internet Explorer 10 examples, we used a publicly
documented vulnerability related to an integer signedness error
in Internet Explorer 10 [30] as foundation. The vulnerability
allows a malicious website to perform arbitrary reads at any
address and arbitrary writes within a range of approximately
64 pages on the respective heap using JavaScript code. This
gives the attacker many options for hijacking C++ objects
residing on the heap and injecting her own buffer of counterfeit
objects; it also enables the attacker to gain extensive knowl-
edge on the respective address space layout. We successfully
tested our COOP-based exploits for Internet Explorer 10 32-bit
and 64-bit on Windows 7. Note that our choice of Windows 7
as target platform is only for practical reasons; the described
techniques also apply to Windows 8. To demonstrate the
ﬂexibility of COOP, we implemented different attack codes
for 32-bit and 64-bit. Both attack codes could be ported to the
respective other environment without restrictions.
A. Internet Explorer 10 64-bit
Our COOP attack code for 64-bit only relies on vfgadgets
contained in mshtml.dll that can be found in every Internet
Explorer process; it implements the following functionality:
(1) read pointer to kernel32.dll from IAT; (2) calculate pointer
754
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:18 UTC from IEEE Xplore.  Restrictions apply. 
to WinExec() in kernel32.dll; (3) read the current tick count
from the KUSER_SHARED_DATA data structure; (4) if tick
count is odd, launch calc.exe using WinExec() else, execute
alternate execution path and launch mspaint.exe.
The attack code consists of 17 counterfeit objects with
counterfeit vptrs and four counterfeit objects that are pure
data containers. Overall eight different vfgadgets are used;
including one LOAD-R64-G for loading rdx through the
dereferencing of a ﬁeld that is used ﬁve times. The attack
code is based on a ML-G similar to our exemplary one given
in Figure 1 that iterates over a plain array of object pointers.
With four basic blocks, the ML-G is the largest of the eight
vfgadgets. The conditional branch depending on the current
tick count
is implemented by overwriting the next-in-line
object pointer such that the ML-G is recursively invoked for
an alternate array of counterfeit object pointers. In summary,
the attack code contains eight overlapping counterfeit objects
and we used 15 different labels to create it in our programming
environment.
1) Attack Variant Using only Vptrs Pointing to the Begin-
ning of Vtables: The described 64-bit attack code relies on
counterfeit vptrs (see §III-C4) that do not necessarily point to
the beginning of existing vtables but to positive or negative
offset from them. As a proof of concept, we developed a
stealthier variant of the attack code above that only uses vptrs
that point to the beginning of existing vtables. Accordingly,
at each vcall site, we were restricted to the set of virtual
functions compatible with the respective ﬁxed vtable index.
Under this constraint, our exploit for the given vulnerability
is still able to launch calc.exe through an invocation of
WinExec(). The attack code consists of only ﬁve counterfeit
objects, corresponding to four different vfgadgets (including
the main ML-G) from mshtml.dll. Corresponding to the given
vulnerability, the used main ML-G can be found as fourth
entry in an existing vtable whereas, corresponding to the vcall
site of the ML-G, the other three vfgadgets can be found as
third entries in existing vtables. The task of calculating the
address of WinExec is done in JavaScript code beforehand.
B. Internet Explorer 10 32-bit
Our 32-bit attack code implements the following function-
ality: (1) read pointer to kernel32.dll from IAT; (2) calculate
pointer to WinExec() in kernel32.dll; (3) enter loop that
launches calc.exe using WinExec() n times; (4) ﬁnally, enter
an inﬁnite waiting loop such that the browser does not crash.