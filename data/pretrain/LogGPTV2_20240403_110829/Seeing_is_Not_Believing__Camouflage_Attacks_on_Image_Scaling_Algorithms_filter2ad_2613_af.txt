name : BAIR / BVLC GoogleNet Model
caffemodel : bvlc_googlenet . caffemodel
caffemodel_url : http :// dl. caffe . berkeleyvision . org / bvlc_googlenet . caffemodel
caffe_commit : bc614d1bd91896e3faceaf40b23b72dab47d44f5
A.2 Command Lines
The deceiving effect was demonstrated based on the ofﬁcial
Caffe example cppclassiﬁcation. The exact command line
was shown in the list below.
Listing 2: Image classiﬁcation command line
./ classification . bin models / bvlc_googlenet / deploy . prototxt
458    28th USENIX Security Symposium
USENIX Association
models / bvlc_googlenet / bvlc_googlenet . caffemodel
data / ilsvrc12 / imagenet_mean . binaryproto
data / ilsvrc12 / synset_words . txt
IMAGE_FILE
A.3 Sample Output
The list below shows the classiﬁcation results for the sample
images used in the Section 2.2.
Listing 3: Sample classiﬁcation results
# wolf-in-sheep.png [Image size: 672*224]
./ classification . bin
models / bvlc_googlenet / deploy . prototxt
models / bvlc_googlenet / bvlc_googlenet . caffemodel
data / ilsvrc12 / imagenet_mean . binaryproto
data / ilsvrc12 / synset_words . txt
/ tmp / sample /wolf -in - sheep . png
---------- Prediction for / tmp / sample /wolf -in - sheep . png ----------
0.8890 - " n02114548 white wolf , Arctic wolf , Canis lupus tundrarum "
0.0855 - " n02120079 Arctic fox , white fox , Alopex lagopus "
0.0172 - " n02134084 ice bear , polar bear , Ursus Maritimus , Thalarctos maritimus "
0.0047 - " n02114367 timber wolf , grey wolf , gray wolf , Canis lupus "
0.0019 - " n02111889 Samoyed , Samoyede "
# wolf.png [Image size: 224*224]
./ classification . bin
models / bvlc_googlenet / deploy . prototxt
models / bvlc_googlenet / bvlc_googlenet . caffemodel
data / ilsvrc12 / imagenet_mean . binaryproto
data / ilsvrc12 / synset_words . txt
/ tmp / sample / wolf . png
---------- Prediction for / tmp / sample / wolf . png ----------
0.8890 - " n02114548 white wolf , Arctic wolf , Canis lupus tundrarum "
0.0855 - " n02120079 Arctic fox , white fox , Alopex lagopus "
0.0172 - " n02134084 ice bear , polar bear , Ursus Maritimus , Thalarctos maritimus "
0.0047 - " n02114367 timber wolf , grey wolf , gray wolf , Canis lupus "
0.0019 - " n02111889 Samoyed , Samoyede "
# cat-in-sheep.png [Image size: 672*224]
./ classification . bin
models / bvlc_googlenet / deploy . prototxt
models / bvlc_googlenet / bvlc_googlenet . caffemodel
data / ilsvrc12 / imagenet_mean . binaryproto
data / ilsvrc12 / synset_words . txt
/ tmp / sample /cat -in - sheep . png
---------- Prediction for / tmp / sample /cat -in - sheep . png ----------
0.1312 - " n02127052 lynx , catamount "
0.1103 - " n02441942 weasel "
0.1068 - " n02124075 Egyptian cat "
0.1000 - " n04493381 tub , vat "
0.0409 - " n04209133 shower cap "
# cat.png [Image size: 224*224]
./ classification . bin
models / bvlc_googlenet / deploy . prototxt
models / bvlc_googlenet / bvlc_googlenet . caffemodel
data / ilsvrc12 / imagenet_mean . binaryproto
data / ilsvrc12 / synset_words . txt
/ tmp / sample / cat . png
---------- Prediction for / tmp / sample / cat . png ----------
0.1312 - " n02127052 lynx , catamount "
0.1103 - " n02441942 weasel "
0.1068 - " n02124075 Egyptian cat "
0.1000 - " n04493381 tub , vat "
0.0409 - " n04209133 shower cap "
(a) wolf-in-sheep.png (672*224)
(b) wolf.png (224*224)
(c) cat-in-sheep.png (672*224)
(d) cat.png (224*224)
B Code Samples Containing Image Scaling
This appendix provides code snippets of using data scaling
procedure examples, from popular deep learning frameworks’
released demos without change.
Listing 4: Preprocessing in image demo of Tensorﬂow [28]
def read_tensor_from_image_file ( file_name , input_height =299 , input_width =299 ,
input_mean =0, input_std =255):
input_name = " file_reader "
output_name = " normalized "
file_reader = tf. read_file ( file_name , input_name )
if file_name . endswith (". png "):
image_reader = tf. image . decode_png ( file_reader , channels = 3,
elif file_name . endswith (". gif "):
image_reader = tf. squeeze (tf. image . decode_gif ( file_reader ,
name =’ png_reader ’)
elif file_name . endswith (". bmp "):
image_reader = tf. image . decode_bmp ( file_reader , name =’ bmp_reader ’)
name =’ gif_reader ’))
else:
image_reader = tf. image . decode_jpeg ( file_reader , channels = 3,
name =’ jpeg_reader ’)
float_caster = tf. cast ( image_reader , tf. float32 )
dims_expander = tf. expand_dims ( float_caster , 0);
resized = tf.image.resize_bilinear(dims_expander, [input_height, input_width])
normalized = tf. divide (tf. subtract ( resized , [ input_mean ]), [ input_std ])
sess = tf. Session ()
result = sess . run ( normalized )
return result
Listing 5: Preprocessing in cppclassiﬁcation of Caffe [16]
/* Convert the input image to the input image format of the network. */
cv :: Mat sample ;
std :: vector * input_channels ) {
cv::resize(sample, sample_resized, input_geometry_);
sample_resized = sample ;
cv :: Mat sample_resized ;
if ( sample . size () != input_geometry_ )
189 void Classifier :: Preprocess (const cv :: Mat & img ,
190
191
192
...
204
205
206
207
208
209
210
211
212
213
214
...
224
225
226
227 }
cv :: Mat sample_float ;
if ( num_channels_ == 3)
else
else
sample_resized . convertTo ( sample_float , CV_32FC3 );
sample_resized . convertTo ( sample_float , CV_32FC1 );
CHECK (reinterpret_cast( input_channels ->at (0). data )
== net_ -> input_blobs ()[0] - > cpu_data ())
( img .rows , img . cols ));
cv :: Size size ( _width , _height );
cv :: Mat rimg ;
cv::resize(img,rimg,size,0,0,CV_INTER_CUBIC);
_imgs . push_back ( rimg );
return 0;
C Analysis and Examples of Popular Image
Scaling Implentations
In this paper, we assume that the scaling algoritms ﬁrst re-
size inputs horizontally and then vertically. This appendix
provides examples of how we make our assumptions based
on source code snippets of OpenCV and Pillow.
Here, Listing 9 shows one code snippet of OpenCV10,
where lines 3607-3700 are the main part of the resizing
function implementation. From the loop condiction variables
dsize.width (line 3607) and dsize.height (line 3674), we can
infer that lines 3607-3662 present the horizontal scaling opera-
tion, and lines 3674-7300 show the vertical scaling operation.
Listing 9: Code snippet of OpenCV
...
3607
3608
3609
...
3662
3663
3664
3665
3666
...
3700
...
for( dx = 0; dx mode , imIn ->xsize , ysize );
if ( imOut ) {
/* imIn can be the original image or horizontally resampled one */
ResampleVertical (imOut , imIn , 0,
ksize_vert , bounds_vert , kk_vert );
}
}
10https://github.com/opencv/opencv/blob/master/modules/i
mgproc/src/resize.cpp
11https://github.com/python-pillow/Pillow/blob/master/sr
c/libImaging/Resample.c
460    28th USENIX Security Symposium
USENIX Association