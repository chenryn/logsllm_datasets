### BAIR / BVLC GoogleNet Model

- **Model Name:** BAIR / BVLC GoogleNet Model
- **Caffe Model File:** `bvlc_googlenet.caffemodel`
- **Caffe Model URL:** <http://dl.caffe.berkeleyvision.org/bvlc_googlenet.caffemodel>
- **Caffe Commit:** `bc614d1bd91896e3faceaf40b23b72dab47d44f5`

### A.2 Command Lines

The deceptive effect was demonstrated using the official Caffe example `cppclassification`. The exact command line used is shown below.

#### Listing 2: Image Classification Command Line
```bash
./classification.bin \
    models/bvlc_googlenet/deploy.prototxt \
    models/bvlc_googlenet/bvlc_googlenet.caffemodel \
    data/ilsvrc12/imagenet_mean.binaryproto \
    data/ilsvrc12/synset_words.txt \
    IMAGE_FILE
```

### A.3 Sample Output

Below are the classification results for the sample images used in Section 2.2.

#### Listing 3: Sample Classification Results

**Image: wolf-in-sheep.png (Size: 672x224)**
```bash
./classification.bin \
    models/bvlc_googlenet/deploy.prototxt \
    models/bvlc_googlenet/bvlc_googlenet.caffemodel \
    data/ilsvrc12/imagenet_mean.binaryproto \
    data/ilsvrc12/synset_words.txt \
    /tmp/sample/wolf-in-sheep.png
```
**Prediction for `/tmp/sample/wolf-in-sheep.png`:**
- 0.8890 - "n02114548 white wolf, Arctic wolf, Canis lupus tundrarum"
- 0.0855 - "n02120079 Arctic fox, white fox, Alopex lagopus"
- 0.0172 - "n02134084 ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus"
- 0.0047 - "n02114367 timber wolf, grey wolf, gray wolf, Canis lupus"
- 0.0019 - "n02111889 Samoyed, Samoyede"

**Image: wolf.png (Size: 224x224)**
```bash
./classification.bin \
    models/bvlc_googlenet/deploy.prototxt \
    models/bvlc_googlenet/bvlc_googlenet.caffemodel \
    data/ilsvrc12/imagenet_mean.binaryproto \
    data/ilsvrc12/synset_words.txt \
    /tmp/sample/wolf.png
```
**Prediction for `/tmp/sample/wolf.png`:**
- 0.8890 - "n02114548 white wolf, Arctic wolf, Canis lupus tundrarum"
- 0.0855 - "n02120079 Arctic fox, white fox, Alopex lagopus"
- 0.0172 - "n02134084 ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus"
- 0.0047 - "n02114367 timber wolf, grey wolf, gray wolf, Canis lupus"
- 0.0019 - "n02111889 Samoyed, Samoyede"

**Image: cat-in-sheep.png (Size: 672x224)**
```bash
./classification.bin \
    models/bvlc_googlenet/deploy.prototxt \
    models/bvlc_googlenet/bvlc_googlenet.caffemodel \
    data/ilsvrc12/imagenet_mean.binaryproto \
    data/ilsvrc12/synset_words.txt \
    /tmp/sample/cat-in-sheep.png
```
**Prediction for `/tmp/sample/cat-in-sheep.png`:**
- 0.1312 - "n02127052 lynx, catamount"
- 0.1103 - "n02441942 weasel"
- 0.1068 - "n02124075 Egyptian cat"
- 0.1000 - "n04493381 tub, vat"
- 0.0409 - "n04209133 shower cap"

**Image: cat.png (Size: 224x224)**
```bash
./classification.bin \
    models/bvlc_googlenet/deploy.prototxt \
    models/bvlc_googlenet/bvlc_googlenet.caffemodel \
    data/ilsvrc12/imagenet_mean.binaryproto \
    data/ilsvrc12/synset_words.txt \
    /tmp/sample/cat.png
```
**Prediction for `/tmp/sample/cat.png`:**
- 0.1312 - "n02127052 lynx, catamount"
- 0.1103 - "n02441942 weasel"
- 0.1068 - "n02124075 Egyptian cat"
- 0.1000 - "n04493381 tub, vat"
- 0.0409 - "n04209133 shower cap"

### B. Code Samples Containing Image Scaling

This appendix provides code snippets of image scaling procedures from popular deep learning frameworks' released demos without any modifications.

#### Listing 4: Preprocessing in TensorFlow Image Demo
```python
def read_tensor_from_image_file(file_name, input_height=299, input_width=299, input_mean=0, input_std=255):
    input_name = "file_reader"
    output_name = "normalized"
    file_reader = tf.read_file(file_name, input_name)
    
    if file_name.endswith(".png"):
        image_reader = tf.image.decode_png(file_reader, channels=3, name='png_reader')
    elif file_name.endswith(".gif"):
        image_reader = tf.squeeze(tf.image.decode_gif(file_reader, name='gif_reader'))
    elif file_name.endswith(".bmp"):
        image_reader = tf.image.decode_bmp(file_reader, name='bmp_reader')
    else:
        image_reader = tf.image.decode_jpeg(file_reader, channels=3, name='jpeg_reader')
    
    float_caster = tf.cast(image_reader, tf.float32)
    dims_expander = tf.expand_dims(float_caster, 0)
    resized = tf.image.resize_bilinear(dims_expander, [input_height, input_width])
    normalized = tf.divide(tf.subtract(resized, [input_mean]), [input_std])
    
    sess = tf.Session()
    result = sess.run(normalized)
    return result
```

#### Listing 5: Preprocessing in Caffe `cppclassification`
```cpp
/* Convert the input image to the input image format of the network. */
void Classifier::Preprocess(const cv::Mat &img, std::vector<cv::Mat> *input_channels) {
    cv::Mat sample;
    cv::Mat sample_resized;
    
    if (sample.size() != input_geometry_) {
        cv::resize(sample, sample_resized, input_geometry_);
    }
    
    sample_resized = sample;
    
    cv::Mat sample_float;
    if (num_channels_ == 3) {
        sample_resized.convertTo(sample_float, CV_32FC3);
    } else {
        sample_resized.convertTo(sample_float, CV_32FC1);
    }
    
    CHECK(reinterpret_cast<float*>(input_channels->at(0).data) == net_->input_blobs()[0]->cpu_data());
    
    cv::Size size(_width, _height);
    cv::Mat rimg;
    cv::resize(img, rimg, size, 0, 0, CV_INTER_CUBIC);
    _imgs.push_back(rimg);
}
```

### C. Analysis and Examples of Popular Image Scaling Implementations

In this paper, we assume that the scaling algorithms first resize inputs horizontally and then vertically. This appendix provides examples based on source code snippets from OpenCV and Pillow.

#### Listing 9: Code Snippet of OpenCV
```cpp
...
for (dx = 0; dx < dsize.width; dx++) {
    // Horizontal scaling operation
    ...
}

for (dy = 0; dy < dsize.height; dy++) {
    // Vertical scaling operation
    ...
}
...
```

From the loop condition variables `dsize.width` and `dsize.height`, we can infer that lines 3607-3662 present the horizontal scaling operation, and lines 3674-7300 show the vertical scaling operation.

For more details, refer to the following links:
- [OpenCV Resize Implementation](https://github.com/opencv/opencv/blob/master/modules/imgproc/src/resize.cpp)
- [Pillow Resize Implementation](https://github.com/python-pillow/Pillow/blob/master/src/libImaging/Resample.c)

---

This optimized version of the text is more structured, clear, and professional, making it easier to understand and follow.