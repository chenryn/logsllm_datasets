To parse the given log line using a Grok expression, you can use the following pattern:

```
%{TIMESTAMP_ISO8601:timestamp},\[%{DATA:zookeeper_id}\] - %{LOGLEVEL:log_level} \[%{DATA:thread}\] - %{JAVACLASS:class}@%{INT:line_number} - %{GREEDYDATA:message}
```

### Explanation:
- **`%{TIMESTAMP_ISO8601:timestamp}`**: Matches the date and time in ISO8601 format (e.g., `2021-07-05 23:55:02,814`).
- **`\[%{DATA:zookeeper_id}\]`**: Captures the `myid` value within square brackets.
- **`- %{LOGLEVEL:log_level}`**: Captures the log level (e.g., `INFO`).
- **`\[%{DATA:thread}\]`**: Captures the thread name (e.g., `main`).
- **`- %{JAVACLASS:class}@%{INT:line_number}`**: Captures the class name and line number (e.g., `QuorumPeerMain@132`).
- **`- %{GREEDYDATA:message}`**: Captures the rest of the log message.

This Grok expression will help you extract the relevant fields from the log line.