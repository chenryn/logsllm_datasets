## PostgreSQL 并行计算解说 之20 - parallel partition table wise join          
### 作者                                                                                  
digoal                                                                                  
### 日期                                                                                  
2019-03-17                                                                                  
### 标签                                                                                  
PostgreSQL , cpu 并行 , smp 并行 , 并行计算 , gpu 并行 , 并行过程支持                                         
----                                                                            
## 背景                                            
PostgreSQL 11 优化器已经支持了非常多场合的并行。简单估计，已支持27余种场景的并行计算。                                        
```                                        
parallel seq scan                                        
parallel index scan                                        
parallel index only scan                                        
parallel bitmap scan                                        
parallel filter                                        
parallel hash agg                                    
parallel group agg                                    
parallel cte                                        
parallel subquery                                        
parallel create table                                        
parallel create index                                        
parallel select into                                        
parallel CREATE MATERIALIZED VIEW                                        
parallel 排序 : gather merge                                         
parallel nestloop join                                        
parallel hash join                                        
parallel merge join                                        
parallel 自定义并行聚合                                        
parallel 自定义并行UDF                                        
parallel append                                        
parallel union                                        
parallel fdw table scan                                        
parallel partition join                                        
parallel partition agg                                        
parallel gather                                
parallel gather merge                        
parallel rc 并行                                        
parallel rr 并行                                        
parallel GPU 并行                                        
parallel unlogged table      
lead parallel  
```                                        
接下来进行一一介绍。                                        
关键知识请先自行了解：                                        
1、优化器自动并行度算法 CBO                                         
[《PostgreSQL 9.6 并行计算 优化器算法浅析》](../201608/20160816_02.md)                                          
[《PostgreSQL 11 并行计算算法，参数，强制并行度设置》](../201812/20181218_01.md)                                          
## parallel partition table wise join                
并行分区表智能JOIN（类似MPP）       
当两个JOIN的分区表JOIN字段类型一致，并且分区在JOIN字段上，并且分区类型一致（枚举、LIST、范围、HASH），并且分区个数一致。满足这些条件时，PostgreSQL优化器会选择并行分区智能JOIN，子分区各自JOIN子分区。    
[《PostgreSQL 11 preview - 分区表智能并行聚合、分组计算(已类似MPP架构，性能暴增)》](../201803/20180322_07.md)    
[《PostgreSQL 11 preview - 分区表智能并行JOIN (已类似MPP架构，性能暴增)》](../201802/20180202_02.md)    
数据量：10亿 join 10亿                 
场景 | 数据量 | 关闭并行 | 开启并行 | 并行度 | 开启并行性能提升倍数                                      
---|---|---|---|---|---                                                  
parallel partition table wise join | 10亿 join 10亿 using (i) | 1006 秒 | 76 秒 | 24 | 13.2 倍        
例子，24个分区的HASH分区表。  
```  
CREATE unlogged TABLE aaa (    
    order_id     bigint not null,    
    cust_id      bigint not null,    
    status       text    
) PARTITION BY HASH (order_id);    
CREATE unlogged TABLE bbb (    
    order_id     bigint not null,    
    cust_id      bigint not null,    
    status       text    
) PARTITION BY HASH (order_id);    
do language plpgsql $$  
declare  
begin  
  for i in 0..23 loop  
    execute format('CREATE unlogged TABLE %s%s PARTITION OF %s FOR VALUES WITH (MODULUS %s, REMAINDER %s)', 'aaa', i, 'aaa', 24, i);   
    execute format('CREATE unlogged TABLE %s%s PARTITION OF %s FOR VALUES WITH (MODULUS %s, REMAINDER %s)', 'bbb', i, 'bbb', 24, i);   
    execute format('alter table %s%s set(parallel_workers =64)', 'aaa',i);  
    execute format('alter table %s%s set(parallel_workers =64)', 'bbb',i);  
  end loop;  
end;  
$$;  
postgres=# \d aaa  
            Unlogged table "public.aaa"  
  Column  |  Type  | Collation | Nullable | Default   
----------+--------+-----------+----------+---------  
 order_id | bigint |           | not null |   
 cust_id  | bigint |           | not null |   
 status   | text   |           |          |   
Partition key: HASH (order_id)  
Number of partitions: 24 (Use \d+ to list them.)  
postgres=# \d bbb  
            Unlogged table "public.bbb"  
  Column  |  Type  | Collation | Nullable | Default   
----------+--------+-----------+----------+---------  
 order_id | bigint |           | not null |   
 cust_id  | bigint |           | not null |   
 status   | text   |           |          |   
Partition key: HASH (order_id)  
Number of partitions: 24 (Use \d+ to list them.)  
```  
```  
postgres=# show max_worker_processes ;  
 max_worker_processes   
----------------------  
 128  
(1 row)  
postgres=# set min_parallel_table_scan_size =0;  
postgres=# set min_parallel_index_scan_size =0;  
postgres=# set parallel_tuple_cost =0;  
postgres=# set parallel_setup_cost =0;  
postgres=# set max_parallel_workers=128;  
postgres=# set max_parallel_workers_per_gather =24;  
postgres=# set enable_parallel_hash =on;  
postgres=# set enable_parallel_append =off;  
postgres=# set enable_partitionwise_join =on;  
postgres=# set work_mem ='128MB';  
```  
分别写入10亿数据  
```  
insert into aaa select i, random()*100000 from generate_series(1,1000000000) t(i);  
insert into bbb select i, random()*100000 from generate_series(1,1000000000) t(i);  
vacuum (analyze,verbose) aaa;  
vacuum (analyze,verbose) bbb;  
```  
### 1、关闭并行，耗时： 1006 秒。                                      
```     
postgres=# set max_parallel_workers_per_gather =0;  
postgres=# set enable_parallel_append =off;  
postgres=# set enable_partitionwise_join =off;  
postgres=# explain select count(*) from aaa join bbb using (order_id);  
                                          QUERY PLAN                                             
-----------------------------------------------------------------------------------------------  
 Aggregate  (cost=380800207.07..380800207.08 rows=1 width=8)  