![
](https://images.seebug.org/content/images/2018/09/274b8bcb-98b5-4ab2-8008-4514269f8792.jpg-w331s)
**创建扫描**
信息同步完成后，我们就可以根据 APP 名称和 git 地址来创建一个扫描任务，请求参数参考如下：
  * **app_name** : APP名称(可选)
  * **module_name** : 模块名称(可选)
  * **version** : 当前版本(可选)
  * **git_url** : git地址 (必选)
  * **branch_name** : 分支名称(必选)
#### 5.3.3 任务信息接口
**查询扫描任务**
根据项目的 git 地址、分支来查询扫描任务，你也可以根据上一步创建扫描任务的 ID 来查询扫描结果。
**查询任务漏洞列表**
当扫描任务状态为`扫描完成/扫描失败`时，就可以根据任务 ID 来查询扫描出的安全漏洞信息。
#### 5.3.4 漏洞规则接口
**查询漏洞规则知识**
通过漏洞信息中的漏洞规则 ID 或者 Key 来查询相关的规则知识库，该知识库应当包括：漏洞原因、漏洞示例代码、解决修复意见等。
### 5.4 后台服务
#### 5.4.1 gitlab 的信息同步
使用 crontab 每两个小时遍历一遍 GitLab 上的所有项目，并同步项目信息到扫描系统中。
![
](https://images.seebug.org/content/images/2018/09/83ecf3bb-1098-45b9-b125-db7410568376.jpg-w331s)
#### 5.4.2 报表生成服务
使用 crontab 每日凌晨12点生成，季度对比和年度的安全统计数据。
#### 5.4.3 扫描进程监控
使用`ps aux| grep
codescan`来查看进程是否存活，当然这种暴力方式不能检测到进程的业务健康度的(比如：扫描任务卡死，状态一直为：正在扫描)。
### 5.5 SonarQube 搭建
#### 5.5.1 服务搭建
下载最新版本`https://www.sonarqube.org/downloads/`上传到`sonarqube.codeauit`服务器上并解压。进入到`bin/linux-x86-64/`目录下，执行
`sh ./sonar.sh start`。 SonarQube 启动成功后，使用浏览器打开`http://192.168.10.3:9000`, 输入
`admin/admin` 即可正常访问。
#### 5.5.2 插件管理
SonarQube 6.4 版本登陆的后台管理系统，选择 "配置" -> "系统" -> "更新中心" ， 选择对应插件点击 “Install” 进行安装。
SonarQube 7.3 版本， “Administration” -> "Marketplace"， 选择对应插件点击 “Install” 进行安装。
![
](https://images.seebug.org/content/images/2018/09/e153474c-1abf-4804-b499-b3e9ff5aad08.jpg-w331s)
SonarQube 6.4 截图
### 5.6 引擎调度
程序部署在 “task.codeaudit” 服务器上，服务需要安装 cloc 与 sonar-scanner 工具。
#### 5.6.1 代码同步
同步代码分为以下几个步骤：
**克隆项目**
这里可能会遇到一些坑，比如项目历史比较久远，完整克隆下来可能会达到上百M或G，我们这里可以使用`--depth
1`参数进行克隆下载。有的项目可能会存在不规范的情况，比如拿 git 当 svn 使用，每个版本创建一个目录。
**切换分支**
根据扫描任务中的分支名称 checkout 到指定分支。
**更新代码**
针对已经克隆的项目进行 pull 操作，来同步 GitLab 上的项目更新代码。
#### 5.6.2 sonar-scanner 扫描
ssh 登录到`task.codeaudit`服务器上，执行`cd opt && wget
https://sonarsource.bintray.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip && unzip sonar-scanner-cli-3.2.0.1227-linux.zip`来下载并解压，执行成功后使用`ln -s /opt/sonar-scanner-3.2.0.1227-linux/bin/sonar-scanner /usr/bin/sonar-scanner`命令创建一个`sonar-scanner` 的软连接。这里我们会使用`sonar-scanner`命令来进行项目的代码扫描。
你也可以通过`https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner`来下载不同平台的`sonar-scanner-cli-3.2.0.1227-linux.zip`。
![
](https://images.seebug.org/content/images/2018/09/891b80b1-853f-4881-851b-5c7007182429.jpg-w331s)
#### 5.6.3 代码统计
使用`cloc`工具进行文件与代码行数的统计, 这里你可能需要通过`--exclude-ext`、`--exclude-dir`参数来过滤一些无意义的文件，比如：字体、图片、声音、视频等。举个例子，过滤所有图片后统计：`cloc ./目标路径 --exclude-ext=.jpg,.jpeg,.png,.bmp,.gif,ico`。
#### 5.6.4 项目组件分析
组件分析主要是针对如使用 Java 语言开发项目时使用 Maven 管理的 pom.xml 配置文件; Python 中的 requirements.txt
文件；JS 项目中的`package.json`文件做解析。这里我写了一个`clocwalk`
工具可以分析项目的依赖组件，这个项目目前已经开源，你可以通过`https://github.com/MyKings/clocwalk`地址来获取这个工具。
#### 5.6.5 漏报处理
关于漏报问题，你可以根据自己企业 SRC 中的漏洞，总结出一套适合自己企业的黑名单规则；或者你可以添加一些 CWE 的漏洞规则，关于 CWE
的信息你可以访问这个地址 。
#### 5.6.6 误报处理
关于误报问题可能会较多，比如扫描出单元测试或功能测试的硬编码问题；比如变量参数`String
PARAM_NAME_PASSWORD="passwd_txt";`问题。
以上的问题我们可以通过白名单插件处理，比如插件中对文件路径和方法判断是否存在 test
关键字，如果存在我们就认为这个是误报。另外针对某些特殊类型的误报，比如在 A 项目下才是误报，其他项目就是漏洞的情况，我们可以设置这个项目的白名单漏洞
Case，其匹配规则条件为：项目名称、漏洞文件、漏洞类型、漏洞所在行，当所有条件都同时满足时，那么这个漏洞就会可以判断为误报。
#### 5.6.7 漏洞闭环
当一个高/中危漏洞被发现并确认时，我们应该如何跟踪这个漏洞的生命周期？往往安全人员会将一个漏洞提交到内部的 SOC 系统中，由于 SOC
系统没有和项目开发的流程控制系统（如：Jira）没有直接联系，开发人员可能会忽视或忘记修复这个高危漏洞，如何避免这种情况？我们这里以 GitLab
举例，当扫描系统扫描出高危漏洞时，系统会通过 GitLab 的 `POST /projects/:id/issues` API接口来自动创建一条 issue
并指派给当前项目的
master，项目负责人同时会收到一条邮件提醒，那么项目负责人可根据漏洞严重程度来安排项目的迭代计划，这样我们就把审计系统扫描出的漏洞与项目开发流程很好的结合起来了。
### 5.7 GitLab CI 触发
当然也可以使用 Jenkins 来做 CI/CD 系统。我们这里开发了一个`.code-audit.py`触发脚本, Jenkins 你也可以使用
Python 脚本或是开发 Jenkins 插件来达到触发目的。
#### 5.7.1 配置项目
这里需要了解 `.gitlab-ci.yml` 文件格式的编写，下面是一个 Python 项目的配置。可以看出整个 CI 过程分为 4
个阶段：`build`、`test`、`codeaudit`、`deploy`。 其中`codeaudit`是我们的代码扫描阶段，这里我们限制了只有
develop 的动作才会触发扫描。
#### 5.7.2 扫描脚本
触发扫描脚本如下图，其大体的执行流程如下：
  * 获取 GitLab CI 中关于项目的环境变量信息；
  * 设定要拦截的漏洞级别，默认：中、高危漏洞不通过测试；
  * 同步项目信息到扫描系统，如果失败扫描代码不通过；
  * 创建扫描任务，如果失败扫描代码不通过；
  * 异步查询扫描结果，超时时间10分钟，如果超时扫描代码不通过；
  * 扫描结果完成，统计是否存在预定义级别的漏洞，如果存在扫描代码不通过。
![
](https://images.seebug.org/content/images/2018/09/7fb4f0c2-99fc-4da6-ab21-d1552a07083c.jpg-w331s)
下图为整个 CI 过程的截图。
![
](https://images.seebug.org/content/images/2018/09/56dfa5ed-6950-49e2-a492-92c171176c01.png-w331s)
下图为代码扫描失败的反馈结果，图中可以看出发现了一个漏洞。
![
](https://images.seebug.org/content/images/2018/09/b7e61f85-b3b8-4781-b02e-5350f1b820ca.jpg-w331s)
## 六 总结
关于 “自动代码审计系统的建设”
文章这里就此完结了。下篇中有些章节可能说的比较笼统宽泛，但是要对每一个章节详详细细的说明，恐怕每一个章节都会写下不止一篇文章了，本篇文章只是为大家提供一种思路，具体实施效果还是要靠大家自己来实践总结，就这样吧：）
## 参考链接
  * [CI (持续集成)](https://baike.baidu.com/item/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90)
  * [CD (持续交付)](https://baike.baidu.com/item/%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98)
  * [OWASP 2017 TOP 10](https://www.owasp.org/index.php/Top_10-2017_Top_10)
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
* * *