    hasLocation(#10020,#10021)
    numlines(#10020,1,1,0)
    #10022=@"class;java.lang.Object"
    #10023=@"callable;{#10022}.(){#10014}"
    callableBinding(#10020,#10023)
    #10024=@"class;java.lang.String"
    #10025=@"array;1;{#10024}"
    arrays(#10025,"String[]",#10024,1,#10024)
    locations_default(#10016,#10015,0,0,0,0)
    hasLocation(#10025,#10016)
    #10026=@"field;{#10025};length"
    #10027=@"type;int"
    fields(#10026,"length",#10027,#10025,#10026)
    #10028=@"modifier;public"
    modifiers(#10028,"public")
    hasModifier(#10026,#10028)
    #10029=@"modifier;final"
    modifiers(#10029,"final")
    hasModifier(#10026,#10029)
    #10030=@"callable;{#10025}.clone(){#10025}"
    methods(#10030,"clone","clone()",#10025,#10025,#10030)
    hasModifier(#10030,#10028)
    extendsReftype(#10025,#10022)
    #10031=@"class;java.lang.Cloneable"
    implInterface(#10025,#10031)
    #10032=@"class;java.io.Serializable"
    implInterface(#10025,#10032)
    #10033=@"callable;{#10012}.main({#10025}){#10014}"
    #10034=@"loc,{#10000},5,24,5,27"
    locations_default(#10034,#10000,5,24,5,27)
    hasLocation(#10033,#10034)
    numlines(#10033,4,4,0)
    #10035=*
    stmts(#10035,0,#10033,0,#10033)
    #10036=*
    locations_default(#10036,#10000,6,5,8,5)
    hasLocation(#10035,#10036)
    numlines(#10035,3,3,0)
    #10037=*
    exprs(#10037,62,#10014,#10033,-1)
    callableEnclosingExpr(#10037,#10033)
    #10038=*
    locations_default(#10038,#10000,5,19,5,22)
    hasLocation(#10037,#10038)
    numlines(#10037,1,1,0)
    #10039=@"params;{#10033};0"
    params(#10039,#10025,0,#10033,#10039)
    paramName(#10039,"args")
    #10040=@"loc,{#10000},5,30,5,42"
    locations_default(#10040,#10000,5,30,5,42)
    hasLocation(#10039,#10040)
    #10041=*
    exprs(#10041,63,#10025,#10039,-1)
    callableEnclosingExpr(#10041,#10033)
    #10042=*
    locations_default(#10042,#10000,5,30,5,37)
    hasLocation(#10041,#10042)
    numlines(#10041,1,1,0)
    #10043=*
    exprs(#10043,62,#10024,#10041,0)
    callableEnclosingExpr(#10043,#10033)
    #10044=*
    locations_default(#10044,#10000,5,30,5,35)
    hasLocation(#10043,#10044)
    numlines(#10043,1,1,0)
    #10045=*
    stmts(#10045,14,#10035,0,#10033)
    #10046=*
    locations_default(#10046,#10000,7,9,7,45)
    hasLocation(#10045,#10046)
    numlines(#10045,1,1,0)
    #10047=*
    exprs(#10047,61,#10014,#10045,0)
    callableEnclosingExpr(#10047,#10033)
    statementEnclosingExpr(#10047,#10045)
    #10048=*
    locations_default(#10048,#10000,7,9,7,44)
    hasLocation(#10047,#10048)
    numlines(#10047,1,1,0)
    #10049=*
    #10050=@"class;java.io.PrintStream"
    exprs(#10049,60,#10050,#10047,-1)
    callableEnclosingExpr(#10049,#10033)
    statementEnclosingExpr(#10049,#10045)
    #10051=*
    locations_default(#10051,#10000,7,9,7,18)
    hasLocation(#10049,#10051)
    numlines(#10049,1,1,0)
    #10052=@"callable;{#10050}.println({#10024}){#10014}"
    callableBinding(#10047,#10052)
    #10053=*
    exprs(#10053,22,#10024,#10047,0)
    callableEnclosingExpr(#10053,#10033)
    statementEnclosingExpr(#10053,#10045)
    #10054=*
    locations_default(#10054,#10000,7,29,7,42)
    hasLocation(#10053,#10054)
    numlines(#10053,1,1,0)
    #10055=*
    #10056=@"class;java.lang.System"
    exprs(#10055,62,#10056,#10049,-1)
    callableEnclosingExpr(#10055,#10033)
    statementEnclosingExpr(#10055,#10045)
    #10057=*
    locations_default(#10057,#10000,7,9,7,14)
    hasLocation(#10055,#10057)
    numlines(#10055,1,1,0)
    #10058=@"field;{#10056};out"
    variableBinding(#10049,#10058)
    namestrings("""Hello World!""","Hello World!",#10053)
它的内部并不会太难理解，首先这个文件是根据`semmlecode.dbscheme`文件所创建的，每种语言的`extractor`下都有一个这样的文件。
`#10000=@"E:/Projects/IdeaProjects/app/src/main/java/org/example/App.java;sourcefile"`
`#10000`可理解为一个标签，类似于数据库表格某一列的`id`，每个`trap`文件的标签都是独立的。
`files(#10000,"E:/Projects/IdeaProjects/app/src/main/java/org/example/App.java")`
这是一段声明，这个声明是按照`semmlecode.dbscheme`中的约定构建的，你可以在该文件中看到
    folders(
      unique int id: @folder,
      string name: string ref
    );
所以上面的内容表示了一个文件，它的`id`为`#10000`，路径为`E:/Projects/IdeaProjects/app/src/main/java/org/example/App.java`。
其余的声明都可以按相同的逻辑来理解。
下面跟进源码看看它具体做了什么。
在`com.semmle.extractor.java.JavaExtractor#main`打下断点，先根据传入的参数创建`JavaExtractor`对象再调用`runExtractor`执行`extractor`操作生成`trap`文件。`jarac-extractor*.log`日志文件对象由静态代码块中的`LOG_ID = MarkerFactory.getMarker("javac-extractor" + PID);`创建
    public static void main(String[] args) {
        String allArgs = StringUtil.glue(" ", args);
        JavaExtractor extractor = new JavaExtractor(args);
        boolean hasJavacErrors = false;
        try {
            hasJavacErrors = !extractor.runExtractor();
        } catch (Throwable var8) {
            label102: {
                if (extractor.log != null) {
                    extractor.log.error("Exception running the extractor with arguments: {}", allArgs);
                    extractor.log.error("Exception: ", var8);
                }
                if (!(var8 instanceof Abort) && !(var8 instanceof FatalError)) {
                    if (!(var8 instanceof OutOfMemoryError) && !(var8 instanceof UnknownError)) {
                        break label102;
                    }
                    throw var8;
                }
                throw var8;
            }
        } finally {
            extractor.close();
        }
        if (extractor.strictJavacErrors && hasJavacErrors) {
            throw new UserError("Compilation errors were reported by javac.");
        }
    }
跟进`runExtractor`看看，代码内容很长，增加了一些注释以便理解
    boolean runExtractor() {
        long time = System.nanoTime();
        long cpuTime = getCurrentThreadCpuTime();
        Context context = this.output.getContext();
        /* 创建日志对象，将内容写入javac-output+进程id文件 */
        Factory logFactory = new Factory() {
            public PrintWriter make(Context c) {
                return new PrintWriter(LogbackUtils.streamFor(JavaExtractor.this.log, "javac-output" + JavaExtractor.PID, false));
            }
        };
        context.put(Log.outKey, logFactory);
        context.put(Log.errKey, logFactory);
        JavacFileManager.preRegister(context, this.specialSourcepathHandling);
        /* javac 参数 */
        Arguments arguments = this.setupJavacOptions(context);
        Options.instance(context).put("ignore.symbol.file", "ignore.symbol.file");
        JavaFileManager jfm = (JavaFileManager)context.get(JavaFileManager.class);
        JavaFileManager bfm = jfm instanceof DelegatingJavaFileManager ? ((DelegatingJavaFileManager)jfm).getBaseFileManager() : jfm;
        JavacFileManager dfm = (JavacFileManager)bfm;
        dfm.handleOptions(arguments.getDeferredFileManagerOptions());
        arguments.validate();
        if (jfm.isSupportedOption(Option.MULTIRELEASE.primaryName) == 1) {
            Target target = Target.instance(context);
            List list = List.of(target.multiReleaseValue());
            jfm.handleOption(Option.MULTIRELEASE.primaryName, list.iterator());
        }
        JavaCompiler compiler = JavaCompiler.instance(context);
        compiler.genEndPos = true;
        /* 列出待编译的文件 */
        Set fileObjects = arguments.getFileObjects();
        /* DiagnosticTrapWriter类用于向trap/java/diagnostics中写入诊断信息（也就是日志） */