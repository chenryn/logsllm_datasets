# not crypto
Reverse Engineering, 150 points
## Description
> there's crypto in here but the challenge is not crypto... ðŸ¤”
A binary file was attached.
## Solution
Let's run the attached file:
```console
â”Œâ”€â”€(user@kali)-[/media/sf_CTFs/pico/not_crypto]
â””â”€$ ./not-crypto
I heard you wanted to bargain for a flag... whatcha got?
test
test2
test3
aaaaaaaaaaaaaaaaaaaaaaaaaaaa
bbbbbbbbbbbbbbbbbbbbbbbbbbbbb
Nope, come back later
```
The program requests user input. After entering multiple inputs, we get an error message that our input is incorrect.
Let's check the decompiled output in Ghidra. The main function looks like a mess:
```c
int FUN_00101070(void)
{
  byte *pbVar1;
  undefined auVar2 [16];
  undefined auVar3 [16];
  undefined auVar4 [16];
  undefined auVar5 [16];
  undefined auVar6 [16];
  undefined auVar7 [16];
  undefined auVar8 [16];
  byte bVar9;
  byte bVar10;
  byte bVar11;
  byte bVar12;
  byte bVar13;
  byte bVar14;
  byte bVar15;
  byte bVar16;
  byte bVar17;
  byte bVar18;
  uint uVar19;
  uint6 uVar20;
  unkuint10 Var21;
  undefined auVar22 [12];
  undefined auVar23 [14];
  int iVar24;
  undefined4 uVar25;
  byte *pbVar26;
  byte bVar27;
  byte bVar28;
  byte bVar29;
  long lVar30;
  byte bVar31;
  byte bVar32;
  byte bVar33;
  ulong uVar34;
  byte bVar35;
  uint uVar36;
  ulong uVar37;
  byte bVar38;
  byte bVar39;
  byte bVar40;
  byte bVar41;
  byte bVar42;
  byte bVar43;
  byte bVar44;
  byte bVar45;
  byte *pbVar46;
  long in_FS_OFFSET;
  byte local_1fe;
  byte local_1fd;
  uint local_1fc;
  uint local_1f8;
  byte local_1f4;
  byte local_1f3;
  byte local_1f2;
  byte local_1f1;
  byte local_1f0;
  byte local_1ef;
  byte local_1ee;
  byte local_1ed;
  byte local_1ec;
  byte *local_1e8;
  undefined user_input [64];
  undefined local_158 [16];
  byte local_148 [144];
  byte local_b8;
  byte local_b7;
  byte local_b6;
  byte local_b5;
  byte local_b4;
  byte local_b3;
  byte local_b2;
  byte local_b1;
  byte local_b0;
  byte local_af;
  byte local_ae;
  byte local_ad;
  byte local_ac;
  byte local_ab;
  byte local_aa;
  byte local_a9;
  undefined local_a8 [3];
  undefined auStack165 [2];
  undefined auStack163 [2];
  undefined uStack161;
  undefined8 uStack160;
  undefined local_98 [16];
  undefined local_88 [16];
  undefined local_78 [16];
  undefined local_68 [16];
  undefined local_58 [16];
  byte local_48 [8];
  long local_40;
  local_40 = *(long *)(in_FS_OFFSET + 0x28);
  puts("I heard you wanted to bargain for a flag... whatcha got?");
  auVar7 = vmovdqa_avx(_DAT_001021a0);
  bVar40 = 0x98;
  bVar32 = 0x32;
  bVar27 = 0x6c;
  bVar28 = 0x1c;
  local_158 = vmovdqa_avx(auVar7);
  uVar37 = 4;
  pbVar26 = local_158;
  do {
    if ((uVar37 & 3) == 0) {
      uVar34 = (ulong)bVar32;
      bVar32 = (&DAT_001020a0)[bVar27];
      bVar27 = (&DAT_001020a0)[bVar28];
      bVar28 = (&DAT_001020a0)[bVar40];
      bVar40 = (&DAT_001020a0)[uVar34] ^ (&DAT_00102080)[uVar37 >> 2];
    }
    bVar40 = bVar40 ^ *pbVar26;
    uVar36 = (int)uVar37 + 1;
    uVar37 = (ulong)uVar36;
    bVar32 = bVar32 ^ pbVar26[1];
    bVar27 = bVar27 ^ pbVar26[2];
    bVar28 = bVar28 ^ pbVar26[3];
    pbVar26[0x10] = bVar40;
    pbVar26[0x11] = bVar32;
    pbVar26[0x12] = bVar27;
    pbVar26[0x13] = bVar28;
    pbVar26 = pbVar26 + 4;
  } while (uVar36 != 0x2c);
  auVar7 = vmovdqa_avx(_DAT_001021b0);
  _local_a8 = vmovdqa_avx(auVar7);
  fread(user_input,1,0x40,stdin);
  auVar7 = vmovdqa_avx(_DAT_001021c0);
  local_88 = vmovdqa_avx(auVar7);
  auVar7 = vmovdqa_avx(_DAT_001021d0);
  local_78 = vmovdqa_avx(auVar7);
  auVar7 = vmovdqa_avx(_DAT_001021e0);
  local_68 = vmovdqa_avx(auVar7);
  auVar7 = vmovdqa_avx(_DAT_001021f0);
  local_58 = vmovdqa_avx(auVar7);
  iVar24 = 0x10;
  local_1e8 = local_88;
  do {
    if (iVar24 == 0x10) {
      auVar7 = vmovdqa_avx(_local_a8);
      local_1f8 = local_1f8 & 0xffffff00 | (uint)(byte)(&DAT_001020a0)[local_158[0] ^ local_a8[0]];
      uVar25 = vpextrb_avx(auVar7,4);
      local_1fc = local_1fc & 0xffffff00 |
                  (uint)(byte)(&DAT_001020a0)[(byte)((byte)uVar25 ^ local_158[4])];
      local_1ee = (&DAT_001020a0)[local_158[8] ^ (byte)uStack160];
      uVar25 = vpextrb_avx(auVar7,0xc);
      local_1ef = (&DAT_001020a0)[(byte)((byte)uVar25 ^ local_158[12])];
      uVar25 = vpextrb_avx(auVar7,1);
      local_1f4 = (&DAT_001020a0)[(byte)((byte)uVar25 ^ local_158[1])];
      uVar25 = vpextrb_avx(auVar7,5);
      local_1fd = (&DAT_001020a0)[(byte)((byte)uVar25 ^ local_158[5])];
      uVar25 = vpextrb_avx(auVar7,9);
      local_1fe = (&DAT_001020a0)[(byte)((byte)uVar25 ^ local_158[9])];
      uVar25 = vpextrb_avx(auVar7,0xd);