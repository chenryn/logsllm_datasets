made large enough so the region (Si−j,Si+j) is at least as
large as the minimum matching segment size.
The adversary then uploads three additional extraction kits,
identical to the ﬁrst, except that Si is AA (00 compressed)
in one, Si is CC (11 compressed) in the second, and Si is
set to dashes in the fourth. All four extraction kits are then
compared to the target. There are three possible outcomes we
must consider based on the genotype of Si in the target: (1)
Si is missing or contains a non-standard allele, (2) Si is 00 or
11, or (3) Si is 01.
8
•
•
•
Case (1): Si
is missing or contains non-standard
alleles in the target. GEDmatch reports the number
of SNPs in each matching segment. The number of
SNPs reported in the matching segment will drop
when compared to the extraction kit where Si = –
– if the target has a standard genotype. Otherwise,
the number of SNPs in the segment will remain
unchanged because the SNP is missing or it contains a
non-standard allele. Therefore, this fact can be used as
a method to tell if Si is missing or has a non-standard
allele in the target.
Case (2): Si is 00 or 11 when compressed. In one of
the extraction comparisons, the matching segment will
break into smaller matching segments or disappear
entirely if the resulting smaller segments are below
the minimum matching length. This will correspond to
the extraction kit that set Si to the opposite genotype
of the target (e.g., 11 if Si is 00 in the target).
Case (3): Si is 01 when compressed. If the segment
is unchanged in the three extraction kits where Si
is set to 00, 01, and 11, then we know the target
has genotype 01 because it is the only genotype that
matches to all three kits.
At this point, an adversary could decompress the geno-
type using allele frequency data as before. Unlike the SNP
extraction described in the previous section, this attack does
not require pixels to be shown at high resolution or the
correspondence between pixels and SNPs to be known. Hence,
this attack further highlights the challenges of completely elim-
inating information leakage through genetic matching results.
C. Experiments with a Target
To experimentally demonstrate SNP extraction attacks us-
ing matching DNA segments, we attempted to extract the bi-
nary genotype of four speciﬁc SNPs in the target(1)-kit.
To test the four possible situations, the target SNPs were
00, 01, 11, and the ﬁnal one was missing entirely from the
target(1)-kit. Each targeted SNP was on a separate
chromosome so we could attempt to extract all at once.
We constructed the four extraction kits using the ext-kit
as a base and included 400 SNP matching segments around
the four target SNPs. In the extraction kits the target SNPs
were set to AA in the ﬁrst kit, AC in the second, CC in the
third, and -- in the fourth. As expected, we were able to use
the presence or absence of a matching segment as an oracle
to extract individual SNPs.
VIII. SPOOFED RELATIONSHIPS
In this section we explore our hypothesis that an attacker
can upload spoofed or falsiﬁed GDFs to create spurious relative
matches and forge familial relationships. We ﬁrst demonstrate
that an adversary can upload GDFs to GEDmatch that produce
false relative matches and then consider how false relationships
can be used maliciously.
A. Constructing False Relatives on GEDmatch
Recall that relative matching works by identifying match-
ing segments between two GDFs, and the degree of relatedness
is proportional to the total length of the matching segments.
Resources like the Shared cM Project can help users ﬁnd
matching segment estimates for each type of relationship [6].
Suppose an adversary wants to spoof a 2nd cousin for some
target on GEDmatch. The adversary can do this by uploading
a GDF that produces the expected number and length of
matching segments for a 2nd cousin; this can be extended to
any desired relationship. An easy way to accomplish this is to
replicating the matching segment coordinates of real relative
pairs on GEDmatch — the adversary can view matches for any
kit in the database if the kit ID is known. Since GEDmatch
does not verify the identity of its users, the adversary is free
to assign any metadata (e.g., name or email address) to the kit
and user account.
From our investigation in Section V, we know that a SNP
is half- or full-matching on GEDmatch if one or two of
the compressed genotype bits match, respectively; a matching
segment is a long run of half- or full-matching SNPs. An
adversary can spoof a matching segment by copying one or
two of the compressed bases from a run of SNPs in the target.
Arbitrary matching segments can be spoofed whenever the
binary genotype of the target kit is known; this can be found
for any kit (with known kit-id) using the method described in
Sections VI-C and VI-D. In the simple case when the adversary
already has access to the target’s GDF, they can copy SNPs
directly from that GDF to duplicate matching segments.
We experimentally tested the above method to make a
false child for the target(1)-kit. We ﬁrst extracted
the binary genotype of the target(1)-kit as usual and
then set all SNPs in the false-child GDF to half-match the
target(1)-kit; note, a parent-child relationship is ex-
pected to have half-matching segments on all chromosomes
(approximately 3,400 cM of shared DNA). We uploaded the
false relative GDF to GEDmatch and compared it
to the
target(1)-kit. This resulted in 3,411.1 cM of half match-
ing segments and a most recent common ancestor estimate of
1 — the estimate expected for a parent-child relationship.
Our experiment shows that an adversary can create artiﬁcial
half- and full-matching segments to spoof different relations;
however, there are ways to make spoofed relatives appear
more realistic, especially if the matches are scrutinized (as
would be expected in a forensics investigation). Take the
half-matching segments we constructed for the false child
above. These were constructed by half-matching every SNP in
target(1)-kit, however, in real parent-child relationships,
half-matching segments will contain mixtures of half- and
full-matching SNPs. The adversary could instead copy the
distribution of half and full-matching SNPs from a real parent-
child comparison to make a more realistic match.
In other cases the adversary may want to spoof a relative
of a target who has other existing relatives in the database.
Depending on where those existing relatives are in the family
tree, the adversary may need the spoofed GDF to be related
to both the target and the other existing relatives (i.e., two
relatives of a target may be related to each other). In cases
of genetic triangulation, the target, existing relatives, and the
spoofed relative may need to match on some of the same
segments. To solve both issues,
the adversary can extract
the binary genotype of the target’s matches, in addition to
9
Fig. 4. Example attacks that disrupt genetic identify inference. A, An adversary wants to avoid identiﬁcation when their 2nd cousin is already in a third-party
database. The adversary uploads a falsiﬁed second cousin under the identity of a second individual that is related to the 2nd cousin but not the adversary. This
falsely implies that the adversary is on a different branch of the family tree. B, The adversary uploads two falsiﬁed relatives on different branches to falsely
imply that a couple was the adversary’s parents.
the target. Then the spoofed GDF can be designed to have
matching segments for both the target and the target’s relatives.
B. Security Implications of False Relatives
Having conﬁrmed that it is possible to spoof relations on
GEDmatch, we now consider how an adversary can use this
capability maliciously.
Commit fraud or harm reputation: The cultural and legal
signiﬁcance of family relations brings signiﬁcant security
implications. There are many reports of genetic genealogy
users ﬁnding unexpected relative matches due to misidentiﬁed
parentage or adoption [5], [9]; estimates put the non paternity
rate in Switzerland and Germany at around 1% [35], [37].
Normal users are not likely to consider the possibility that
matches can be spoofed, and therefore, may believe that an
unexpected, spoofed match is legitimate. An adversary could
use this capability to gain the trust of the victim or damage
their reputation.
Method: The adversary identiﬁes a target and then generates
and uploads a spoofed descendent of the target to GEDmatch
using the procedure described above. From the target’s per-
spective, the spoofed relative will appear like an authentic
relative match.
Disrupt genetic identity inference: To identify the person
corresponding to an unknown genetic sample, a genetic ge-
nealogist will ﬁrst ﬁnd all the relative matches for the unknown
sample and work through genealogy records to generate a
large set of potentially thousands of possible identities. The
genealogist will sift through these identities using the expected
demographic information (e.g., age, gender, location, and eth-
nicity) and genetic triangulation to narrow the set of possible
identities to a manageable number [19]. The adversary’s goal
is to use spoofed relations to disrupt or prevent this type of
analysis. Note that when identity inference is used in a law
enforcement context, the possible identities are treated as leads
that are re-tested with traditional tests, like short tandem repeat
ﬁngerprinting [19]; therefore, the adversary can only prevent
discovery.
is difﬁcult
Method: It
to experiment with attacks against
genetic identity inference in an ethical manner, especially
in the forensics context, due to the unique nature of each
search — which is a manual and expert driven process. Below
we describe a number of theoretical attacks that may disrupt
or make identity inference more challenging. However, we
emphasize that further research is needed to conﬁrm the
effectiveness of these attacks in real searches.
Recall that falsiﬁed relatives can be uploaded under falsi-
ﬁed or ﬁctitious identities on GEDmatch. In Figure 4 we show
two simpliﬁed scenarios where an adversary implies a false
identity inference using spoofed relative under an assumed
identity. Figure 4(A) depicts a scenario where an adversary
wants to avoid identity inference with a second cousin already
in the database. The adversary uploads a spoofed second cousin
under the identity of an individual that is not related to the
adversary but is related to the second cousin. This falsely
implies that the adversary is on a different branch of the
family tree. Note, that to be consistent with the topology of
the family tree, the spoofed second cousin should be a second
cousin of the adversary and a ﬁrst cousin of the true second
cousin already in the database. In a second attack, shown
in Figure 4(B), the adversary uploads spoofed relatives to
different branches of a family tree to falsely imply that the
adversary is a descendent of an unrelated couple.
There are other circumstances that can make identiﬁca-
tion more challenging. For example, international genealogy
records can be hard to ﬁnd [19];
therefore, an adversary
could upload spoofed matches under the identity of individuals
that are located internationally or deceased. People from en-
dogamous populations — those that are highly interrelated —
can be harder to identify because they typically have a high
number of matches and complex family trees. Companies
like Parabon Nanolabs believe an individual is likely from
an endogamous population if they have at least ten, 70cM
or greater matches (3rd cousin or closer) [19]. An adversary
could leverage this fact by uploading a large number of distant
spoofed matches, similar to what is expected in an endogamous
population, to make the search space intractable. Finally, if the
10
SuspectSiblingSiblingParentParentG-ParentG-ParentGreat-GPGreat-GPGreat-A/UGreat-A/U1C 1R2nd Cousin2nd CousinSynthetic2nd CousinSyntheticCousinSynthetic2nd CousinFlasely Predicted Parents of SuspectAverage Relatedness of Prole to SuspectProle in DatabaseabFalsely Predicted Great-A/U of SuspectSearch occurs in the wrong directionadversary controls the identity of the spoofed matches (e.g.,
email address or other contact information) then they could
be contacted by investigators — as was done with a second
cousin in the Golden State Killer search — which would alert
the adversary that they are being actively searched [16].
IX. DISCUSSION
Third-party genetic genealogy analysis has been a useful
tool for millions of customers; however, as this study demon-
strates, vulnerabilities in these services can raise signiﬁcant
security and privacy risks. Here, we reﬂect on these issues to
make a number of security recommendations and discuss how
these attacks might generalize to other services.
A. Genetic Data File Authentication
All of the attacks we identiﬁed were possible because
there are no technical restrictions preventing an adversary
from uploading falsiﬁed or pathologically designed GDFs.
Therefore, we strongly suggest that relative matching queries
and direct comparisons be restricted to data that was generated
by a DTC testing company, which we call DTC-authentication.
Erlich et al., proposed a possible DTC-authentication scheme
to prevent unauthorized identity inference [14]. They proposed
that DTC testing companies digitally sign GDFs and include
the signature in the GDF header so the ﬁle can be veriﬁed by
third-parties.
Such a scheme would also be effective at preventing the
vulnerabilities we uncovered because an adversary could not
make comparisons with arbitrary data, which was required to
extract genetic markers, or generate falsiﬁed relatives. We fur-
ther suggest that the genotyping instrument itself digitally sign
the data it generates so it can be traced to a single instrument,
company, and time. This DTC-authentication scheme is also
ﬂexible because it gives third-party services the control to
decide when to verify GDFs and can allow for exemptions
like approved law enforcement use.
B. API Fixes and Security Mitigations
First, we suggest that all direct comparisons require that
one of the GDFs was uploaded by the user. This way a user
cannot compare arbitrary GDFs to one another only using GDF
identiﬁers. Moreover, we suggest limiting direct comparisons
to GDFs with a minimum degree of relatedness. This will
restrict the possible set of GDFs an adversary can target but
does not signiﬁcantly affect usability because unrelated GDFs
are rarely compared.
As a second defense-in-depth strategy, we suggest that
third-party services rate limit queries, especially against the
same GDF, because repeated querying was necessary to extract
raw SNPs. Moreover, services should consider implementing
some form of anomaly detection; both the artiﬁcial GDFs and
query results from our experiments were highly anomalous and
should be detectable with a simple classiﬁer.
Services should also consider implementing deterrent mea-
sures as well. For example, services could alert users whenever
their kits are queried by someone else in a direct comparison,
which could give advanced notice of an attack.
Chromosome visualizations and other details returned from
matching queries are important features to help users un-
derstand how they are related to each other, and so we do
not recommend eliminating these features entirely. However,
services should be very wary of returning ﬁne grained visu-
alizations and precise genetic coordinates because they may
leak unintentional information. System designers will have to
ﬁnd a balance between the precision of matching results with
the possibility of data leakage.
Finally, the data storage method and matching algorithm
should be scrutinized. In the case of GEDmatch, genotype
compression during comparisons made it much simpler to
construct half- and full-matching segments. This design may
also contribute to other risks we did not explore, like denial-of-
service attacks, because an adversary may be able to construct