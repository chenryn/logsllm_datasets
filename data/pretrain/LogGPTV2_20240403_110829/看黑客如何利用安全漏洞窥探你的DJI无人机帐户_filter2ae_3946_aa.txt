# 看黑客如何利用安全漏洞窥探你的DJI无人机帐户
##### 译文声明
本文是翻译文章，文章原作者 Checkpoint，文章来源：checkpoint.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
DJI（大疆）一直都是民用无人机和航空成像技术行业的全球[领导者](https://en.wikipedia.org/wiki/DJI_\(company\))。除个人消费者外，它在企业市场也占有很大的份额，这些用户涵盖了关键基础设施、制造业、农业、建筑业、应急管理产业等领域。由于DJI无人机在全球拥有众多用户，因此无论是个人消费者还是企业用户，都可以从广泛的视角和题材中获取数据和图像。
在最近进行的一项调查中，Check
Point的研究人员发现了一个安全漏洞。如果被利用，攻击者可以在用户完全不知情的情况下访问其DJI账户，并提供了对大量敏感数据的访问：
l
如果DJI用户已经与DJI的云服务器同步，那么能够被访问的数据则包括在无人机飞行期间生成的飞行日志、照片和视频。（飞行日志包含无人机在整个飞行过程中的确切位置，以及在飞行过程中拍摄的照片和视频的预览。）
l 如果DJI用户正在使用DJI的FlightHub飞行管理软件，那么能够被访问的数据则包括无人机飞行期间的实时摄像头视图和地图视图。
l 与DJI用户帐户相关的信息，包括用户个人资料信息。
对于此漏洞的利用开始于DJI论坛（DJI Forum），这是由DJI运营的一个在线论坛，用于讨论其产品。登录DJI
Forum，然后点击一个由攻击者植入的恶意链接，用户的登录凭证就可能会被窃取，并允许攻击者访问用户的其他DJI在线资产：
l DJI的Web平台（账户、商店、论坛）
l 从DJI GO或DJI GO 4应用程序同步的云服务器数据
l DJI的FlightHub（集中式无人机操作管理平台）
我们在2018年3月就此漏洞通知了DJI，DJI也负责任地进行了回应。目前，此漏洞已经被修复。DJI将此漏洞分类为“高风险，低概率”，并表示没有证据表明此漏洞曾被Check
Point研究人员以外的任何人利用。
三种潜在攻击流的简化视图
视频地址：
漏洞利用演示视频
## 技术分析
以下内容解释了我们如何能够通过网站、移动应用程序和FlightHub这三个DJI平台访问到敏感的DJI无人机飞行信息以及敏感的用户数据。
首先，我们将解释漏洞位于何处以及它是如何工作的。
## 漏洞
简单来说，此漏洞存在于DJI的识别过程中。
DJI使用cookie来识别访问其平台的用户，而这个cookie存在被攻击者捕获的风险。通过使用这个cookie，攻击者可以很容易地劫持任何用户的帐户，并完全控制用户的DJI移动应用程序、Web帐户或DJI
FlightHub帐户。
我们首先研究了DJI网站的登录过程，因为我们首先想了解DJI后端是如何识别用户的，以及哪些参数或cookie对登录过程来说是足够重要的。因此，我们查看了所有通过客户端（浏览器）和DJI后端的流量。
我们很快注意到，DJI为其提供的服务使用了一些子域：
l forum.dji.com
l account.dji.com
l store.dji.com
此外，这些域之间的登录使用的是OAuth框架。接下来，我们开始检查这些子域的流量。
我们发现，一个发送给mobile.php URL的请求向我们提供了DJI测试用户的敏感信息，包括username、member_uid、token等数据。
这一个发现很重要，因为它促使我们想要弄清楚DJI后端是如何识别我们的用户，以及它是否使用的是相同的标识符ID。为此，我们查看了在那里使用的cookie，并发现其中一个名为“meta-key”的cookie被用于识别用户。
mobile.php请求
于是，我们接下来的目标就成了通过任何可能的方式获得这个“meta-key”cookie。为此，我们必须找到一个不受http-only属性保护的子域，因为这会阻止JavaScript泄漏cookie。
最终，符合我们需求的子域被确认为forum.dji.com。接下来，我们开始在这平台上查找漏洞。
## 发现漏洞
经过一番查找，我们偶然间发现了以下GET请求：
    https://forum.dji.com/forum.php?mod=ajax&action=downremoteimg&message=
在这里，我们看到消息参数已经反映在了响应中。但存在两个障碍：
1\. 这里还有一个“addslashes”函数，它为后面的字符添加了一个斜杠“/”；
2\. XSS
payload注入发生在一个名为“updateDownImageList”的未定义函数中，它是从其他一些JavaScript代码中导入的，而我们的上下文中没有这些代码。
我们假设对GET请求的响应类似于以下伪代码：
于是，从函数转义开始，我们开始使用反斜杠和单引号，如下所示：
    parent.updateDownImageList(‘ \’ ‘);
然后，“addslahes”也会添加一个反斜杠，它会转义我们的反斜杠，并将它更改为这样的字符串：
    parent.updateDownImageList(‘ \\ ‘  ‘);
接下来，我们不得不处理剩下的字符，以及未定义的函数“updateDownImageList”。
为了处理剩下的字符，我们添加了一个简单的html注释，比如“<!–”，它创建了以下payload：
    parent.updateDownImageList(‘ \'<!–  ‘);
现在，我们剩下的就是处理这个未定义函数了。为了搞定这个函数，我们必须自己定义它。
于是，我们的payload最终看起来像是这样的：
    \’ alert(document.cookie); function updateDownImageList (data) {} <!– 
使用我们的payload接收到的Cookie
然后，攻击者可以创建一个payload，将该meta-key cookie发送到他的网站。任何XSS
Auditor都不会阻止这种XSS，因为它驻留在JavaScript本身，而不是脚本或事件中。
想要触发这种XSS攻击，攻击者所需要做的就是在DJI论坛上编写一个简单的帖子，并将包含payload的链接插入其中。不过，由于DJI限制链接到论坛本身的内容，因此想要以这种方式来发送链接到恶意网站是不可能的。
DJI论坛中潜在攻击者通过帖子链接的恶意站点示例
但由于我们的XSS驻留在论坛本身，因此我们能够绕过这种链接限制。此外，由于有数十万用户在DJI论坛上进行交流，因此攻击者甚至不需要共享恶意链接，因为这会在用户转发消息和链接时自动完成。