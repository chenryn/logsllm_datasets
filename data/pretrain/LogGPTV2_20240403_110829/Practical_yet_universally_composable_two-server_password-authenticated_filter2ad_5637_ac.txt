from (tuples of) elements from G to {0, 1}∗.
3.1 High-Level Idea
The main idea underlying our protocol is similar to the approach
of Brainard et al. [6]: in the setup protocol, the user sends secret
shares of her password and her key to each of the servers. To re-
trieve the shares of her key, the user in the retrieve protocol sends
new secret shares of her password to the servers. These then run
a protocol to determine whether the secrets received in the retrieve
protocol and those in the setup protocol are shares of the same pass-
word. If so, they send the secret shares of the key to the user.
This basic idea is very simple; the challenge in the design of our
protocol is to implement this idea efﬁciently and in a way that can
be proved secure in the UC model. We ﬁrst explain how this is
achieved on a high level and then describe our protocols in detail.
Setup protocol. The servers S1 and S2 receive from the user secret
shares p1 and p2, respectively, of the user’s password p = p1p2,
and, similarly, secret shares K1 and K2 of the user’s symmetric
key K = K1K2. To make sure that during the retrieval a mali-
cious server cannot substitute different values for the password and
key share, S1 additionally receives from the user commitments C2
and ˜C2 of the shares p2 and K2, while S2 is given the opening in-
formation s2, ˜s2 for both commitments. Similarly, S2 receives two
commitments C1 and ˜C1 to the shares p1 and K1, while S1 is given
the corresponding opening information s1, ˜s1. Later, during the re-
trieve protocol, the servers will have to prove that they are behaving
correctly with respect to these commitments.
To create the commitments and to be able to achieve UC security,
we rely on the CRS model by encrypting the values using random-
ness si, ˜si under a public key PK given by the CRS, for which
nobody knows the corresponding decryption key.
To communicate the secret shares and the opening information
to the servers securely, the user will encrypt them under the servers’
public keys (which she looks up via the FCA functionality). This is
not enough, however. To prevent a malicious server from substitut-
ing different values for the password and key share, we make use
of the labels of the CCA2-secure encryption scheme, to bind the
encryptions to the speciﬁc instance of the protocol, in particular to
the commitments C1, ˜C1, C2, and ˜C2. To signal to the user that the
setup has worked, the servers will send her a signed statement.
529i; s(cid:48)
1p(cid:48)
1 and p(cid:48)
2 and gives p(cid:48)
1 and C(cid:48)
2 to p(cid:48)
1 to S1 and s(cid:48)
Retrieve protocol. The user re-shares the password guess p(cid:48) =
2 to servers S1 and S2, respectively. In ad-
p(cid:48)
1p(cid:48)
dition, she gives S1 and S2 commitments C(cid:48)
1 and p(cid:48)
2.
She hands the opening information s(cid:48)
2 for C(cid:48)
1 for C(cid:48)
to S2. The user also generates an ephemeral key pair (PK u, SK u)
2
of a semantically secure encryption scheme and sends the public
key to the servers.
Then, S1 and S2 jointly compute the following randomized two-
party function: on public input (C1, C2, C(cid:48)
2) and with each
server having his password shares and opening information as pri-
vate inputs, output 1 if (1) Ci = enc(pi; si) for i ∈ {1, 2}; (2)
C(cid:48)
i = enc(p(cid:48)
2. Otherwise,
output a random element of the group G. If the output is 1, each
server sends to the user his share of K encrypted under PK u.
i) for i ∈ {1, 2}; (3) p1p2 = p(cid:48)
1, C(cid:48)
1p(cid:48)
Let us explain how this two-party computation is done in a way
that is both efﬁcient and secure in the UC model. As the ﬁrst
idea, consider the following approach: S1 forms a ciphertext E1
1, and sends E1 to S2. S2 uses the
of the group element δ1 = p1/p(cid:48)
homomorphic properties of the underlying cryptosystem to obtain
E = E1 × E2, where E2 is an encryption of δ2 = p(cid:48)
2/p2. Now E
is an encryption of 1 if and only if p(cid:48)
2 = p1p2, i.e., if the user’s
password matches. However, there are three issues: (1) How do S1
and S2 decrypt E? (2) How do we make sure that they don’t learn
anything if the user submitted an incorrect password? (3) How do
we make sure that the servers do not deviate from this protocol?
To address (1), we have S1 generate a temporary public key pk
for which it knows the secret key, and so now the ciphertexts E1,
E2 and E are formed under this temporary public key. This way, S1
will be able to decrypt E when he receives it. To address (2), our
protocol directs S2 to form E somewhat differently; speciﬁcally,
by computing E = (E1 × E2)z for a random z ∈ Zq. Now if
the password the user has submitted was correct, the decryption of
E will still yield 1. However, if it was incorrect, it will be a truly
random element of G. Finally, to address (3), S1 and S2 must prove
to each other, at every step, that the messages they are sending to
each other are computed correctly.
As in the Setup protocol, the user encrypts the secret shares and
the opening information under the server’s public keys (which she
looks up via the FCA functionality). She uses the commitments
C(cid:48)
1, C(cid:48)
2 and the ephemeral public key PK u as a label for these ci-
phertexts. As we will see in the proof of security, owing to the
security properties of labelled CCA2 encryption, if the shares are
correct the servers can safely use PK u to encrypt their shares of
K . To ensure that the servers encrypt and send the correct shares,
they ﬁrst convince each other that their respective encryptions are
consistent with the commitments of the shares received from the
user in the Setup protocols. To inform the user of the encryptions’
correctness, each server sends to the user a signature of both en-
cryptions and the commitments C(cid:48)
2 received just now. Thus a
malicious server will be unable to substitute K with a key different
from what was stored during setup.
1, C(cid:48)
Our retrieve protocol requires the servers to prove to each other
the validity of some statements (essentially that the encryptions
were computed correctly). In the description of the protocol we
denote these protocols as ZK{(w) : predicate(w, y) = 1} for a
proof that a predicate is true w.r.t. to a public value y and a witness
value w. We provide the concrete instantiation of these protocols
and the encryption schemes that we use in Section 4. For now we
only require that the protocols are concurrent zero-knowledge and
simulation-sound proofs. We refer to Section 4 for more details on
how this can be achieved.
We assume the following communication and process behavior.
The servers are listening on some standard port for protocol mes-
sages. As we do not assume secure channels, messages can ar-
rive from anyone. All messages that the parties send to each other
are tagged by (Stp, sid , qid ) or (Rtr, sid , qid ) and by a sequence
number corresponding to the step in the respective protocol. All
other messages received on that port will be dropped. Also dropped
are messages that cannot be parsed according to the format for the
protocol step corresponding to the tag a message carries and mes-
sages which have the same tag as a message that has already been
received. The tags are used to route the message to the different
protocol instances, and are only delivered to a protocol instance in
the order of the sequence number. If they arrive out of sequence, the
messages are buffered until they can be delivered in sequence (and
might be dropped if they cannot be delivered after some timeout).
If a server receives a message with a fresh tag (Stp, sid , qid ) or
(Rtr, sid , qid ), and sequence number 1 (message from the user),
it starts a new instance of the respective protocol, or drops the mes-
sage if such an instance is already running.
3.2.1 The Setup Protocol
All parties have access to the system parameters including the
group G and the public key PK through FCRS . We assume that
each server Si keeps internal persistent storage st i.
The input to U is (Stp, sid , p, K ), where sid = (u,S1,S2),
u is the chosen username, p is the user’s chosen password, and
K the key to be stored. We assume that both p and K are en-
coded as elements of G. Whenever a test fails, the user or server
sends (Stp, sid , qid , fail) to the other parties and aborts with out-
put (Stp, sid , fail). Furthermore, whenever any party receives
a message (Stp, sid , qid ), it aborts with output (Stp, sid , fail).
The structure of the Setup protocol is depicted in Figure 4; the
individual steps are as follows.
Step S1: On input (Stp, sid , qid , p, K ), user U performs the fol-
lowing computations.
(a) Obtain public keys of the servers and CRS: Query FCRS to
receive PK and query FCA with (Retrieve, sid ,S1) and
(Retrieve, sid ,S2) to receive (PE 1, PS 1) and (PE 2, PS 2).
(b) Compute shares of password and key: choose p1 ←R G and
K1 ←R G and compute p2 ← p/p1 and K2 ← K /K1.
3.2 Protocol Details
We assume that the common reference string functionality FCRS
describes a group G of prime order q and generator g generated
through GGen(1k), together with a public key PK of (keyg, enc,
dec) for which the corresponding secret key is unknown. We also
assume the presence of certiﬁed public keys for all servers in the
system through FCA; we do not require users to have such public
keys. More precisely, we assume each server Si to have generated
key pairs (PE i, SE i) and (PS i, SS i) for (keyg2, enc2, dec2) and
(keygsig, sig, ver), respectively, and to have registered the public
keys by calling FCA with (Register,Si, (PE i, PS i)).
(c) Encrypt shares under the CRS and the public keys of the ser-
vers: Choose randomness s1, s2, ˜s1, ˜s2 ←R Zq, encrypt shares
of p and K under the CRS as C1 ← encPK (p1; s1), ˜C1 ←
encPK (K1; ˜s1), C2 ← encPK (p2; s2), and ˜C2 ← encPK (K2;
˜s2), and encrypt shares and randomness under the servers’ pub-
lic keys as F1 ← enc2PE 1 ((p1, K1, s1, ˜s1);∗; (sid , qid , C1,
˜C1, C2, ˜C2)) and F2 ← enc2PE 2 ((p2, K2, s2, ˜s2, );∗; (sid ,
qid , C1, ˜C1, C2, ˜C2)).
(d) Send encryptions to servers: Send (F1, C1, ˜C1, C2, ˜C2) to S1
and (F2, C1, ˜C1, C2, ˜C2) to S2.
530U
(F2, C1, ˜C1, C2, ˜C2)
S1
(F1, C1, ˜C1, C2, ˜C2)
(sid, qid, C1, ˜C1, C2, ˜C2, succ)
sigSS 1

S5
-
S1
S2
S4
S2
-
sigSS 1
(sid, qid, C1, ˜C1, C2, ˜C2)

sigSS 2
sigSS 2
-
(sid, qid, C1, ˜C1, C2, ˜C2, succ)
S3
(sid, qid, C1, ˜C1, C2, ˜C2, succ)
Figure 4: Communication messages of the Setup protocol with computation steps Si.
Step S2: The ﬁrst server S1 proceeds as follows.
(a) Receive message from user and check if fresh instance: Parse
the received message as (Stp, sid , qid , 1, F1, C1, ˜C1, C2, ˜C2).
(b) Obtain public keys of the second server: Query FCA with
(Retrieve, sid ,S2) to receive (PE 2, PS 2).
(c) Decrypt shares and randomnes: Decrypt F1 with label (sid ,
qid , C1, ˜C1, C2, ˜C2), which will fail if the label is wrong.
(d) Verify correct encryption of shares under CRS: Check whether
C1 = encPK (p1; s1) and ˜C1 = encPK (K1; ˜s1).
(e) Verify that this is a new instance: Check that there is no entry
st 1[sid ] in the state.
(f) Inform second server that all checks were successful: Compute
(sid , qid , C1, ˜C1, C2, ˜C2) and send
the signature σ1 ← sigSS 1
it to S2.
Step S3: The second server S2 proceeds as follows.
(a) Receive message from user and ﬁrst server: Parse the message
received from U as (Stp, sid , qid , 1, F2, C1, ˜C1, C2, ˜C2) and
the message from S1 as (Stp, sid , qid , 2, σ1).
(b) Obtain public keys of S1: Send (Retrieve, sid ,S1) to FCA to
obtain (PE 1, PS 1).
(c) Decrypt shares and randomness: Decrypt F2 with label (sid ,
qid , C1, ˜C1, C2, ˜C2), which will fail if the label is wrong.
(d) Verify correct encryption of shares under CRS: Check whether
C2 = encPK (p2; s2) and ˜C2 = encPK (K2; ˜s2).
(e) Verify that this is a new instance: Check that there is no entry
st 2[u] in the state.
(f) Verify ﬁrst server’s conﬁrmation: Check that verPS 1 ((sid , qid ,
C1, ˜C1, C2, ˜C2), σ1) = 1.
(g) Inform user and ﬁrst server of acceptance: Compute signature
(sid , qid , C1, ˜C1, C2, ˜C2, succ) and send τ2 to
τ2 ← sigSS 2
U and S1.
(h) Update state and exit: Update state st 2[sid ] ← (PS 1, p2, K2,
s2, ˜s2, C1, ˜C1, C2, ˜C2) and output (Stp, sid , qid , succ).
Step S4: The ﬁrst server S1 proceeds as follows.
(a) Receive message from second server: Parse the message re-
ceived from S2 as τ2.
(b) Verify second server’s conﬁrmation: Check that verSS 2 ((sid ,
qid , C1, ˜C1, C2, ˜C2, succ), τ2) = 1.
(c) Inform user of acceptance: Compute τ1 ← sigSS 1
C1, ˜C1, C2, ˜C2, succ) and send τ1 to U.
(sid , qid ,
(d) Update state and exit: Update state st 1[sid ] ← (PS 2, p1, K1,
s1, ˜s1, C1, ˜C1, C2, ˜C2) and output (Stp, sid , qid , succ).
Step S5: The user U proceeds as follows.
(a) Receive messages from both servers: Parse the messages re-
ceived from S1 and S2 as as τ1 and τ2, respectively.
(b) Verify that servers accepted and ﬁnalize protocol: Check that
verPS 1 ((sid , qid , C1, ˜C1, C2, ˜C2, succ), τ1) = 1 and that
verPS 2 ((sid , qid , C1, ˜C1, C2, ˜C2, succ), τ2) = 1. If so, out-
put (Stp, sid , qid , succ).
3.2.2 The Retrieve Protocol
The input to U(cid:48) is (Rtr, sid , qid(cid:48), p(cid:48)). The servers S1 and S2
have their respective state information st 1[sid ] and st 2[sid ] as in-
put. The structure of the Retrieve protocol is depicted in Figure 5;
the individual steps are as follows. In all steps, whenever a party
“fails” or any veriﬁcation step fails, the party sends (Rtr, sid , qid(cid:48),
fail) to the other parties and aborts with output (Rtr, sid , qid(cid:48),
fail) in case the party is a server, or with output (Rtr, sid , qid(cid:48),
fail) if it’s a user. Furthermore, whenever any party receives a
message (Rtr, sid , qid(cid:48), fail), it aborts with the same outputs.
Step R1: On input (Rtr, sid , qid(cid:48), p(cid:48)), user U(cid:48) performs the fol-
lowing computations.
(a) Obtain public keys of the servers and CRS: Query FCRS to
receive PK and query FCA with (Retrieve, sid ,S1) and
(Retrieve, sid ,S2) to receive (PE 1, PS 1) and (PE 2, PS 2).
(b) Compute shares of password and choose encryption key pair:
1. Generate (PK u,
1 ←R G and compute p(cid:48)
2 ← p(cid:48)/p(cid:48)
Choose p(cid:48)
SK u) ← keyg(1k).
(c) Encrypt shares under the CRS and the servers’ public keys: