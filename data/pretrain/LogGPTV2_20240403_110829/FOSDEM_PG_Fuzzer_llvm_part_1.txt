Coverage-guided fuzzing using
LLVM on Postgres code to find
security issues in database
functions and operators.
Or….
What I did for fun during my
summer vacation!
What is fuzzing?
Issues Fuzzing Postgres
Most open source fuzzers
● Expect to exec a binary repeatedly on text inputs
● Require modifying C source to call function being tested
● Postgres bugs rarely cause crashes but get caught and signal unexpected errors
Ideally we want
● Not to have to modify the client/server architecture of Postgres
● A generic function that can be provided an expression to evaluate repeatedly
● And a harness that understands which errors are expected or unexpected
LLVM Libfuzzer
Pros
● In-process so we can call it from the server
● Very very fast (no syscalls at all, coverage data is in local memory)
● Flexible set of tools that we can pick the parts to keep or reimplement
Cons
● Immature -- not as clever at generating test cases as AFL
● Rough edges -- intended to be used in LLVM’s own builds
Flow of Control
PostgreSQL Client PostgresSQL Server
fuzzer::FuzzerDriver()
Server-Side C Function C Callback Function
❖ Set resource limits ❖ Set timeout
❖ Prepare SQL ❖ Setup subtransaction
❖ Execute SQL
❖ Recover from errors
❖ Check for unexpected errors
C++ Function Wrapper
❖ Set error callbacks
❖ Pass callback function SQL under test
Server-Side C Function
❖ Set resource limits
➢ Core files off (Libfuzzer calls abort())
➢ CPU 1s soft (SIGXCPU) *
➢ CPU 5min hard (SIGKILL)
➢ Memory 200MB
❖ Prepare SQL
C++ Wrapper Function
❖ Set error callbacks
➢ aborthandler
➢ staticdeathcallback
➢ staticerrorcallback
❖ Pass callback function
➢ FuzzOne
C Callback Function (1)
❖ Set timeout
➢ 100ms (varied over tests)
➢ Will need to be a parameter
❖ Setup subtransaction
➢ BeginInternalSubTransaction
➢ Save Memory Context
➢ Save Resource Owner
❖ Execute SQL
➢ SPI_execute_plan()
C Callback Function (2)
❖ Recover from errors
➢ Restore Memory Context
➢ Restore Resource Owner
➢ Set aside ErrorData
➢ Roll Back Subtransaction
C Callback Function (3)
❖ Check for unexpected errors
➢ Resource Limits
➢ Internal Errors
➢ Internal Regexp Errors
➢ Call errorcallback() *
CREATE FUNCTION fuzz()
stark=> CREATE FUNCTION fuzz(integer,text)
RETURNS text LANGUAGE C
AS '/home/stark/src/libfuzzer-pg/fuzz.so','fuzz';
CREATE FUNCTION
stark=> select fuzz(1000000,'select $1::timestamptz');
...
CREATE FUNCTION fuzz()
stark=> select fuzz(1000000,'select $1::timestamptz');
#0 READ cov: 0 bits: 0 units: 590 exec/s: 0
#1 pulse cov: 10739 bits: 2999 units: 590 exec/s: 0
#2 pulse cov: 10745 bits: 3080 units: 590 exec/s: 0
#4 pulse cov: 10816 bits: 3273 units: 590 exec/s: 0
#8 pulse cov: 10918 bits: 4005 units: 590 exec/s: 0
#16 pulse cov: 11335 bits: 4691 units: 590 exec/s: 0
#32 pulse cov: 11435 bits: 4950 units: 590 exec/s: 0
#64 pulse cov: 11642 bits: 5636 units: 590 exec/s: 0
#256 pulse cov: 11955 bits: 7099 units: 590 exec/s: 0
#512 pulse cov: 12003 bits: 7661 units: 590 exec/s: 0
#590 INITED cov: 12005 bits: 7679 units: 315 exec/s: 0
CREATE FUNCTION fuzz()
#1024pulse cov: 12005 bits: 7679 units: 315 exec/s: 0
#2048pulse cov: 12005 bits: 7679 units: 315 exec/s: 0
#4096pulse cov: 12005 bits: 7679 units: 315 exec/s: 0
#8192pulse cov: 12005 bits: 7679 units: 315 exec/s: 8192
#16384 pulse cov: 12005 bits: 7679 units: 315 exec/s: 8192
#18442 NEW cov: 12005 bits: 7681 units: 316 exec/s: 6147 L: 25 m^^(nut[^( ^[*Sj-0[-e9[sf
#20574 NEW cov: 12005 bits: 7682 units: 317 exec/s: 6858 L: 27 9::mYT+1S'0:: 6:; ;09:: 6:
#32768 pulse cov: 12005 bits: 7682 units: 317 exec/s: 6553
#34643 NEW cov: 12012 bits: 7688 units: 318 exec/s: 6928 L: 12 j'Roc 6b6G
#35409 NEW cov: 12012 bits: 7689 units: 319 exec/s: 7081 L: 16 j'6 G1'u97 .041
#60297 NEW cov: 12012 bits: 7690 units: 320 exec/s: 6029 L: 27 iilliseu YYcY-:Y: -F-Y-s:-o
#63284 NEW cov: 12012 bits: 7691 units: 321 exec/s: 6328 L: 30 'j6 Gq68C9%*F96YC. 24: ''( Pm
#64476 NEW cov: 12012 bits: 7706 units: 322 exec/s: 6447 L: 19 (8;(\xc;9.9PYST1(.PDT
CREATE FUNCTION fuzz()
#65536 pulse cov: 12012 bits: 7706 units: 322 exec/s: 6553
#70689 NEW cov: 12012 bits: 7709 units: 323 exec/s: 6426 L: 15 d8!6uP9uJ91 YX6