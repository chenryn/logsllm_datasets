# Day11 目录遍历->RCE
### 代码
Day 11  
### 漏洞点
这段代码的作用是将tar文件里面的内容提取到tomcat临时目录中以test开头的文件夹中。"/tmp/uploaded.tar"是攻击者可控的。tar文件里的每个文件或文件夹都映射到一个TarArchiveEntry对象。由于第16行的TarArchiveEntry.getName()获取tar文件里的文件名，然后通过一个简单的对"../"的过滤到达接收器java.io.File。由于过滤不严，可以绕过../的检查，将文件写入到任意目录下，从而可导致RCE攻击。
### 复现过程
#### 1\. 环境
由于此攻击需要Linux系统下才能成功，使用docker复现
  * docker pull tomcat:9.0.30-jdk8-openjdk
  * docker run -p 80:8080 -it container_id /bin/bash
  * 启动tomcat
  * 将打包好的war包放入/usr/local/tomcat/webapps目录下
#### 2\. war包
  * IDEA+maven-archetype-webapp
web.xml
      Archetype Created Web Application
        day11
        com.ananasker.day11.ExtractFiles
        day11
        /day11
ExtractFiles.java
    ...
    protected void doPost(HttpServletRequest req, HttpServletResponse res) {
            try {
                extract();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    ...
#### 3\. payload构造
首先，../的检查很容易通过..././来绕过，因此可以将文件写入任意位置。例如，此例中tomcat的web目录位于/usr/local/tomcat/webapps，因此可构造如下文件名的恶意文件
    ..././..././..././..././..././usr/local/tomcat/webapps/ROOT/index.jsp
直接无法生成此文件名的文件，可先构造等长文件名的文件，然后将其打包为uploaded.tar，然后使用二进制修改器，将里面的名称修改为"..././..././..././..././..././usr/local/tomcat/webapps/ROOT/index.jsp"。如图所示  
将修改后uploaded.tar放入/tmp目录下
#### 4\. 结果
如图所示，发送POST请求后，成功在web目录下写入文件  
# Day12 XSS
### 代码
Day 12  
### 漏洞点
在index.jsp中，首先定义一个customClass为"default"，在包含的init.jsp中，customClass被覆盖为请求参数customClass的值，然后此值在未经过滤的情况下，被赋值给div标签的属性值中。然后customClass与username都被ESAPI给HTML编码了。此处的漏洞在于第一个div属性的customClass值完全由攻击者可控，且未经任何过滤，因此可以突破属性的限制，从而导致XSS。
### 复现过程
#### 1\. 环境
  * IDEA+maven-archetype-webapp
#### 2\. 添加配置文件
在resources目录下添加， **ESAPI.properties** 以及 **validation.properties**
。文件内容在此题中，我设置为均为空，为空表示取默认值。
#### 3\. payload构造
通过双引号，突破属性值的限制。即最终的payload可为如下所示：
    /index.jsp?username=123&customClass=1" 
#### 4\. 结果
结果如下所示：  
# Day13 目录遍历->RCE
### 代码
Day 13  
### 漏洞点
这段代码支持一个文件上传，并将上传的文件存入临时目录。通过ServletFileUpload类的重要方法parseRequest，对请求消息体内容进行解析，将每个字段的数据包装成独立的Fileitem对象。为了阻止攻击者上传如.jsp的文件，对消息的Content-Type进行了简单的判断是否属于text/plain，但可被简单的绕过。另一个由攻击者控制的是文件名且未经过任何检查，这导致目录遍历漏洞，因为类似/../的字符串在java中是有效的文件名。
最终，攻击者可以上传任意文件，通过目录遍历漏洞可设置上传文件的地址，最终导致RCE远程命令执行。
### 复现过程
#### 1\. 环境
  * IDEA+maven-archetype-webapp
#### 2\. 配置web.xml
web.xml
      Archetype Created Web Application
        day13
        com.ananaskr.day13.UploadFileController
        day13
        /day13
#### 3\. 添加upload.jsp
upload.jsp
        Upload
#### 4\. 构造payload
在打印出上传路径后，得知只需返回父级目录即可。或者不确定的，可使用绝对路径。payload如下  
#### 5\. 结果
# Day14 CSV注入
### 代码
Day 14  
### 漏洞点
这段代码主要是想要利用[CSV注入](https://owasp.org/www-community/attacks/CSV_Injection)这个漏洞点。其中CSV文件的一个单元格内容是由攻击者完全可控的，因此可造成注入。
但是代码的逻辑却是将攻击者的输入以CSV格式响应给攻击者自身，即攻击者自己获取到了有恶意代码的CSV文件，打开在攻击者自身的环境下执行了恶意行为。因此，未进行复现。
# Day15 find参数-exec命令执行
### 代码
Day 15  
### 漏洞点
这段代码使用"find"系统命令并向用户公开当前文件夹的目录。这会导致信息泄露，但攻击者可利用此代码造成更大的伤害。第9行代码建立了基本的命令(find .
-type d)。第12-15行代码接收参数options，并将其附在"find . -type
d"命令后。最后调用java.lang.ProcessBuilder来执行命令。  
首先直接的命令执行不可能，因为所有的输入都附在find命令后，会被当成参数。然而，攻击者控制的此命令的某些选项/参数，会导致参数注入漏洞。通过注入find命令的参数-exec，攻击者可以执行任意系统命令。
### 复现过程
#### 1\. 环境
  * IDEA+maven-archetype-webapp
#### 2\. 配置web.xml
web.xml
      Archetype Created Web Application
        day15
        com.ananaskr.day15.FindOnSystem
        day15
        /day15
#### 3\. 修正代码
将doGet换成doPost
#### 4\. 构造payload
find命令的-exec参数后面跟command命令，它的终止是以 **;** 结束的。与之类似的是-ok参数，-ok参数是以一种更为安全的模式来执行该参数所给的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。因此，选择-exec参数，可构造如下payload
    options=-exec cat /etc/passwd ;
#### 4\. 结果
# Day16 SQL注入
### 代码
Day 16  
### 漏洞点
此代码中通过@RequestParam注释接受用户输入的name参数值，然后经过escapeQuotes函数过滤后，拼接到HQL
sql语句中，进而被执行。。代码中的escapeQuotes函数的作用是将输入中的'变成两个'。因此payload中包含\'即可绕过此限制，从而导致sql注入。
### 复现过程
#### 1\. 环境
  * IDEA+springmvc+hibernate
  * 导入servlet以及hibernate相关的jar包
#### 2\. 配置web.xml
            encodingFilter
            org.springframework.web.filter.CharacterEncodingFilter
                encoding
                UTF-8
                forceEncoding
                true
            encodingFilter
            /*
            contextConfigLocation
            /WEB-INF/applicationContext.xml
            org.springframework.web.context.ContextLoaderListener
            dispatcher
            org.springframework.web.servlet.DispatcherServlet
            1
            dispatcher
            /
#### 3\. 配置dispatcher-servlet.xml
                /WEB-INF/
                .jsp
#### 4\. 配置applicationContext.xml
#### 5\. 添加hibernate.cfg.xml
  * 在src路径下添加此配置文件
            com.mysql.cj.jdbc.Driver
            jdbc:mysql://localhost:3306/day
            root
            org.hibernate.dialect.MySQLDialect
            thread
            true
            update
#### 6\. 修正代码
FindController.java
    15   List  users = session.createQuery("from UserEntity where FIRST_NAME ='" + escapeQuotes(name) + "'", UserEntity.class).list();
    改为
    15   List  users = session.createQuery("from UserEntity where firstName ='" + escapeQuotes(name) + "'", UserEntity.class).list();
UserEntity.java  
所有持久化类必须要求有不带参的构造方法（也是JavaBean的规范）。Hibernate需要使用Java反射为你创建对象。当类中声明了其他带参构造方法时，需在类中显示声明不带参数构造方法。
    public UserEntity(){
        }
#### 7.payload构造
代码中的escapeQuotes函数的作用是将输入中的'变成两个'。因此payload中包含\'即可绕过此限制。然后在最后加上注释#，绕过最后的单引号。最终的payload如下：
    test\' or 1=1 #
由于代码中只返回查询结果的数量，因此可实施盲注。
#### 8.结果
数据库仅包含如下数据  
当查询正确时  
当使用payload时