## 杂谈
最近在看一些JavaWeb的漏洞，Java各种库的相互用来用去就导致了很多漏洞能在不同的场景进行利用。其中seam
framework就是一个例子(本文所指的seam
framework都是seam2系列)。它是属于Jboss阵营，虽然现在已经不再维护了但是还是有不少站点是基于这个框架开发的。程序员使用seam框架能更快速的开发JSF类型的站点，其中seam
framework使用了Mojarra，Mojarra是Oracle对JSF标准的实现，Jboss在MoJarra的基础上开发了richfaces。因为seam
所使用的基础库的版本较低，所以该框架存在很多安全问题，下面具体就分析了CVE-2010-1871 CVE-2013-2165 CVE-2013-3827
这几个安全漏洞的成因和官方的修复方案。
## CVE-2010-1871
此漏洞是一个表达式注入类型的漏洞影响2.2.1之前的版本，seam Framework基于EL表达式自己写了一套jboss expression
language。然后在此表达式中可以通过反射的方法去实例化`java.lang.Runtime`等类，然后进一步执行任意命令。其调用方式为`expressions.getClass().forName('java.lang.Runtime')`,若要执行命令的话通过反射的invoke方法就行，具体构造方式为`expressions.getClass().forName('java.lang.Runtime').getDeclaredMethods()[19].invoke(expressions.getClass().forName('java.lang.R
untime').getDeclaredMethods()[7].invoke(null), 'command')`  
其中需要注意的是`getDeclaredMethods`得到的方法位置可能因为系统的不同有所不同，笔者测试环境为MacOS。其中`getDeclaredMethods()[19]`
与 `getDeclaredMethods()[7]`分别为`getRuntime`与`exec` 前面大概介绍了一下jboss expression
language的利用方式，然后来具体看一下此次漏洞的成因。`org.jboss.seam.navigation.Pages`
此类是用来处理seam中各个页面之间的行为的，具体行为的配置在/WEB-INF/pages.xml。在 `preRender` 方法中调用了
`callAction`
    /**
        * Call the action requested by s:link or s:button.
        */
       private static boolean callAction(FacesContext facesContext)
       {
          //TODO: refactor with Pages.instance().callAction()!!
          boolean result = false;
          String outcome = facesContext.getExternalContext()
                .getRequestParameterMap().get("actionOutcome");
          String fromAction = outcome;
          if (outcome==null)
          {
             String actionId = facesContext.getExternalContext()
                   .getRequestParameterMap().get("actionMethod");
             if (actionId!=null)
             {
                if ( !SafeActions.instance().isActionSafe(actionId) ) return result;
                String expression = SafeActions.toAction(actionId);
                result = true;
                MethodExpression actionExpression = Expressions.instance().createMethodExpression(expression);
                outcome = toString( actionExpression.invoke() );
                fromAction = expression;
                handleOutcome(facesContext, outcome, fromAction);
             }
          }
          else
          {
             handleOutcome(facesContext, outcome, fromAction);
          }
          return result;
       }
在http请求中获取`actionOutcome`后传入了`handleOutcome`在此调用了`facesContext.getApplication().getNavigationHandler().handleNavigation`其中handleNavigation是对JSF中`NavigationHandler`这个抽象类的实现，在`org.jboss.seam.jsf.seamNavigationHandler.handleNavigation`方法中进入了`FacesManager.instance().interpolateAndRedirect()`最后在此方法中的`Interpolator.instance().interpolate`进行了表达式的解析。测试如下图所示  
该漏洞后续修复方式为在actionOutcome中检查是否包含`#{`等字符来防止表达式注入。虽然这样是直接杜绝了在actionOutcome参数中进行表达式注入，但是我们注意下面的代码
    if(outcome == null) {
                    String actionId = (String)facesContext.getExternalContext().getRequestParameterMap().get("actionMethod");
                    if (actionId != null) {
                        if (!SafeActions.instance().isActionSafe(actionId)) {
                            return result;
                        }
                        String expression = SafeActions.toAction(actionId);
                        result = true;
                        MethodExpression actionExpression = Expressions.instance().createMethodExpression(expression);
                        outcome = toString(actionExpression.invoke(new Object[0]));
                        handleOutcome(facesContext, outcome, expression);
                    }
其中`actionId`在经过一系列检查之后还是生成了`expression`进入了`handleOutcome`方法中，来看看经过了一些什么检查。
    public boolean isActionSafe(String id) {
            if (this.safeActions.contains(id)) {
                return true;
            } else {
                int loc = id.indexOf(58);
                if (loc < 0) {
                    throw new IllegalArgumentException("Invalid action method " + id);
                } else {
                    String viewId = id.substring(0, loc);
                    String action = "\"#{" + id.substring(loc + 1) + "}\"";
                    InputStream is = FacesContext.getCurrentInstance().getExternalContext().getResourceAsStream(viewId);
                    if (is == null) {
                        throw new IllegalStateException("Unable to read view /" + viewId + " to execute action " + action);
                    } else {
                        BufferedReader reader = new BufferedReader(new InputStreamReader(is));
                        try {
                            while(true) {
                                boolean var7;
                                if (reader.ready()) {
                                    if (!reader.readLine().contains(action)) {
                                        continue;
                                    }
                                    this.addSafeAction(id);
                                    var7 = true;
                                    return var7;
                                }
                                var7 = false;
                                return var7;
                            }
                        } catch (IOException var17) {
                            throw new RuntimeException("Error parsing view /" + viewId + " to execute action " + action, var17);
                        } finally {
                            try {
                                reader.close();
                            } catch (IOException var16) {
                                throw new RuntimeException(var16);
                            }
                        }
                    }
                }
            }
        }
通过这个方法我们可以知道，如果利用`actionId`来进行表达式注入，那么我们需要有一个可以控制内容的资源文件，在这个资源文件中包含我们需要执行的EL表达式。例如在web目录存在一个/img/test.jpg的文件，里面包含你要执行的EL表达式，构造如下请求就能执行`/test.seam?actionMethod:test/test.jpg:EL表达式`。在hitcon
2016 的Angry seam题中就有一处利用。在template.xhtml中有如下代码
其中DESC我们可以自己设置，首先将我们的DESC设置为`?x=#{expressions.instance().createValueExpression(request.getHeader('cmd')).getValue()}`其含义就是获取请求头中的cmd。然后在请求`template.seam?actionMethod=template.xhtml:util.escape(sessionScope['user'].getDescription())`通过前面的代码分析我们知道其实就是去执行`util.escape(sessionScope['user'].getDescription())`这个表达式，将此表达式执行的结果赋值给了`outname`，然后将`outname`传递给`handleOutcome`方法，又执行了一次表达式。所以这是一个EL表达式二次执行的问题。此处执行的表达式就是DESC设置的表达式，因为在DESC中通过表达式再次实例化了一个表达式执行的实例，所以cmd中的表达式得到执行。  
## CVE-2013-2165
seam框架在2.2.1版本时使用的richfaces的版本为3.3.3.Final，此版本存在一处Java反序列化漏洞。因此这个漏洞也直接影响seam框架，通过这个漏洞我们可以直接实现RCE。下面简单分析一下此漏洞，该漏洞核心源码是
org.ajax4jsf.resource.ResourceBuilderImpl
    .....
    private static final Pattern DATA_SEPARATOR_PATTERN = Pattern.compile("/DAT(A|B)/");
    ......
    public Object getResourceDataForKey(String key) {
            Object data = null;
            String dataString = null;
            Matcher matcher = DATA_SEPARATOR_PATTERN.matcher(key);
            if (matcher.find()) {