AndroidManifest.xml. It is located in the root directory of the app’s Android Package Kit (APK) file.
The manifest file describes the app structure, its components (activities, services, content providers, and intent
receivers), and requested permissions. It also contains general app metadata, such as the app's icon, version
number, and theme. The file may list other information, such as compatible APIs (minimal, targeted, and maximal
SDK version) and the kind of storage it can be installed on (external or internal).
Here is an example of a manifest file, including the package name (the convention is a reversed URL, but any string is
acceptable). It also lists the app version, relevant SDKs, required permissions, exposed content providers, broadcast
receivers used with intent filters and a description of the app and its activities:
92
Platform Overview
The full list of available manifest options is in the official Android Manifest file documentation.
App Components
Android apps are made of several high-level components. The main components are:
Activities
Fragments
Intents
Broadcast receivers
Content providers and services
All these elements are provided by the Android operating system, in the form of predefined classes available through
APIs.
Activities
Activities make up the visible part of any app. There is one activity per screen, so an app with three different screens
implements three different activities. Activities are declared by extending the Activity class. They contain all user
interface elements: fragments, views, and layouts.
Each activity needs to be declared in the Android Manifest with the following syntax:
Activities not declared in the manifest can't be displayed, and attempting to launch them will raise an exception.
93
Platform Overview
Like apps, activities have their own life cycle and need to monitor system changes to handle them. Activities can be in
the following states: active, paused, stopped, and inactive. These states are managed by the Android operating
system. Accordingly, activities can implement the following event managers:
onCreate
onSaveInstanceState
onStart
onResume
onRestoreInstanceState
onPause
onStop
onRestart
onDestroy
An app may not explicitly implement all event managers, in which case default actions are taken. Typically, at least
the onCreate manager is overridden by the app developers. This is how most user interface components are
declared and initialized. onDestroy may be overridden when resources (like network connections or connections to
databases) must be explicitly released or specific actions must occur when the app shuts down.
Fragments
A fragment represents a behavior or a portion of the user interface within the activity. Fragments were introduced
Android with the version Honeycomb 3.0 (API Level level 11).
Fragments are meant to encapsulate parts of the interface to facilitate re-usability and adaptation to different screen
sizes. Fragments are autonomous entities in that they include all their required components (they have their own
layout, buttons, etc.). However, they must be integrated with activities to be useful: fragments can't exist on their own.
They have their own life cycle, which is tied to the life cycle of the Activities that implement them.
Because fragments have their own life cycle, the Fragment class contains event managers that can be redefined and
extended. These event managers included onAttach, onCreate, onStart, onDestroy and onDetach. Several others
exist; the reader should refer to the Android Fragment specification for more details.
Fragments can be easily implemented by extending the Fragment class provided by Android:
public class myFragment extends Fragment {
...
}
Fragments don't need to be declared in manifest files because they depend on activities.
To manage its fragments, an activity can use a Fragment Manager (FragmentManager class). This class makes it
easy to find, add, remove, and replace associated fragments.
Fragment Managers can be created via the following:
FragmentManager fm = getFragmentManager();
Fragments don't necessarily have a user interface; they can be a convenient and efficient way to manage background
operations pertaining to the app's user interface. A fragment may be declared persistent so that if the system
preserves its state even if its Activity is destroyed.
Inter-Process Communication
94
Platform Overview
As we've already learned, every Android process has its own sandboxed address space. Inter-process communication
facilities allow apps to exchange signals and data securely. Instead of relying on the default Linux IPC facilities,
Android's IPC is based on Binder, a custom implementation of OpenBinder. Most Android system services and all
high-level IPC services depend on Binder.
The term Binder stands for a lot of different things, including:
Binder Driver: the kernel-level driver
Binder Protocol: low-level ioctl-based protocol used to communicate with the binder driver
IBinder Interface: a well-defined behavior that Binder objects implement
Binder object: generic implementation of the IBinder interface
Binder service: implementation of the Binder object; for example, location service, and sensor service
Binder client: an object using the Binder service
The Binder framework includes a client-server communication model. To use IPC, apps call IPC methods in proxy
objects. The proxy objects transparently marshall the call parameters into a parcel and send a transaction to the
Binder server, which is implemented as a character driver (/dev/binder). The server holds a thread pool for handling
incoming requests and delivers messages to the destination object. From the perspective of the client app, all of this
seems like a regular method call—all the heavy lifting is done by the Binder framework.
Binder Overview - Image source: Android Binder by Thorsten Schreiber
Services that allow other applications to bind to them are called bound services. These services must provide an
IBinder interface to clients. Developers use the Android Interface Descriptor Language (AIDL) to write interfaces for
remote services.
Servicemanager is a system daemon that manages the registration and lookup of system services. It maintains a list
of name/Binder pairs for all registered services. Services are added with addService and retrieved by name with the
static getService method in android.os.ServiceManager :
public static IBinder getService(String name)
You can query the list of system services with the service list command.
$ adb shell service list
Found 99 services:
0 carrier_config: [com.android.internal.telephony.ICarrierConfigLoader]
1 phone: [com.android.internal.telephony.ITelephony]
2 isms: [com.android.internal.telephony.ISms]
3 iphonesubinfo: [com.android.internal.telephony.IPhoneSubInfo]
95
Platform Overview
Intents
Intent messaging is an asynchronous communication framework built on top of Binder. This framework allows both
point-to-point and publish-subscribe messaging. An Intent is a messaging object that can be used to request an action
from another app component. Although intents facilitate inter-component communication in several ways, there are
three fundamental use cases:
Starting an activity
An activity represents a single screen in an app. You can start a new instance of an activity by passing an
intent to startActivity . The intent describes the activity and carries necessary data.
Starting a service
A Service is a component that performs operations in the background, without a user interface. With Android
5.0 (API Level level 21) and later, you can start a service with JobScheduler.
Delivering a broadcast
A broadcast is a message that any app can receive. The system delivers broadcasts for system events,
including system boot and charging initialization. You can deliver a broadcast to other apps by passing an
intent to sendBroadcast or sendOrderedBroadcast .
There are two types of intents. Explicit intents name the component that will be started (the fully qualified class name).
For instance:
Intent intent = new Intent(this, myActivity.myClass);
Implicit intents are sent to the OS to perform a given action on a given set of data (The URL of the OWASP website in
our example below). It is up to the system to decide which app or class will perform the corresponding service. For
instance:
Intent intent = new Intent(Intent.MY_ACTION, Uri.parse("https://www.owasp.org"));
An intent filter is an expression in Android Manifest files that specifies the type of intents the component would like to
receive. For instance, by declaring an intent filter for an activity, you make it possible for other apps to directly start
your activity with a certain kind of intent. Likewise, your activity can only be started with an explicit intent if you don't
declare any intent filters for it.
Android uses intents to broadcast messages to apps (such as an incoming call or SMS) important power supply
information (low battery, for example), and network changes (loss of connection, for instance). Extra data may be
added to intents (through putExtra / getExtras ).
Here is a short list of intents sent by the operating system. All constants are defined in the Intent class, and the whole
list is in the official Android documentation:
ACTION_CAMERA_BUTTON
ACTION_MEDIA_EJECT
ACTION_NEW_OUTGOING_CALL
ACTION_TIMEZONE_CHANGED
To improve security and privacy, a Local Broadcast Manager is used to send and receive intents within an app without
having them sent to the rest of the operating system. This is very useful for ensuring that sensitive and private data
don't leave the app perimeter (geolocation data for instance).
Broadcast Receivers
96
Platform Overview
Broadcast Receivers are components that allow apps to receive notifications from other apps and from the system
itself. With it, apps can react to events (internal, initiated by other apps, or initiated by the operating system). They are
generally used to update user interfaces, start services, update content, and create user notifications.
Broadcast Receivers must be declared in the Android Manifest file. The manifest must specify an association between
the Broadcast Receiver and an intent filter to indicate the actions the receiver is meant to listen for. If Broadcast
Receivers aren't declared, the app won't listen to broadcasted messages. However, apps don’t need to be running to
receive intents; the system starts apps automatically when a relevant intent is raised.
An example Broadcast Receiver declaration with an intent filter in a manifest:
After receiving an implicit intent, Android will list all apps that have registered a given action in their filters. If more than
one app has registered for the same action, Android will prompt the user to select from the list of available apps.
An interesting feature of Broadcast Receivers is that they are assigned a priority; this way, an intent will be delivered
to all authorized receivers according to their priority.
A Local Broadcast Manager can be used to make sure intents are received from the internal app only, and any intent
from any other app will be discarded. This is very useful for improving security.
Content Providers
Android uses SQLite to store data permanently: as with Linux, data is stored in files. SQLite is a light, efficient, open
source relational data storage technology that does not require much processing power, which makes it ideal for
mobile use. An entire API with specific classes (Cursor, ContentValues, SQLiteOpenHelper, ContentProvider,
ContentResolver, etc.) is available. SQLite is not run as a separate process; it is part of the app. By default, a
database belonging to a given app is accessible to this app only. However, content providers offer a great mechanism
for abstracting data sources (including databases and flat files); they also provide a standard and efficient mechanism
to share data between apps, including native apps. To be accessible to other apps, a content provider needs to be
explicitly declared in the manifest file of the app that will share it. As long as content providers aren't declared, they
won't be exported and can only be called by the app that creates them.
content providers are implemented through a URI addressing scheme: they all use the content:// model. Regardless of
the type of sources (SQLite database, flat file, etc.), the addressing scheme is always the same, thereby abstracting
the sources and offering the developer a unique scheme. Content Providers offer all regular database operations:
create, read, update, delete. That means that any app with proper rights in its manifest file can manipulate the data
from other apps.
Services
Services are Android OS components (based on the Service class) that perform tasks in the background (data
processing, starting intents, and notifications, etc.) without presenting a user interface. Services are meant to run
processes long-term. Their system priorities are lower than those of active apps and higher than those of inactive
apps. Therefore, they are less likely to be killed when the system needs resources, and they can be configured to
automatically restart when enough resources become available. Activities are executed in the main app thread. They
are great candidates for running asynchronous tasks.
Permissions
97
Platform Overview
Because Android apps are installed in a sandbox and initially can't access user information and system components
(such as the camera and the microphone), Android provides a system with a predefined set of permissions for certain
tasks that the app can request. For example, if you want your app to use a phone's camera, you have to request the
android.permission.CAMERA permission. Prior to Marshmallow (API Level 23), all permissions an app requested were
granted at installation. From Android Marshmallow onwards, the user must approve some permissions requests
during app execution.
Protection Levels
Android permissions are ranked on the basis of the protection level they offer and divided into four different
categories:
Normal: the lower level of protection. It gives the apps access to isolated application-level features with minimal
risk to other apps, the user, or the system. It is granted during app installation and is the default protection level:
Example: android.permission.INTERNET
Dangerous: This permission allows the app to perform actions that might affect the user’s privacy or the normal
operation of the user’s device. This level of permission may not be granted during installation; the user must
decide whether the app should have this permission. Example: android.permission.RECORD_AUDIO
Signature: This permission is granted only if the requesting app has been signed with the same certificate as the
app that declared the permission. If the signature matches, the permission is automatically granted. Example:
android.permission.ACCESS_MOCK_LOCATION
SystemOrSignature: This permission is granted only to apps embedded in the system image or signed with the
same certificate that the app that declared the permission was signed with. Example:
android.permission.ACCESS_DOWNLOAD_MANAGER
Requesting Permissions
Apps can request permissions for the protection levels Normal, Dangerous, and Signature by including  tags into their manifest. The example below shows an AndroidManifest.xml sample requesting
permission to read SMS messages:
...
Declaring Permissions
Apps can expose features and content to other apps installed on the system. To restrict access to its own
components, it can either use any of Android’s predefined permissions or define its own. A new permission is declared
with the  element. The example below shows an app declaring a permission:
...
The above code defines a new permission named com.permissions.sample.ACCESS_USER_INFO with the protection level
Signature . Any components protected with this permission would be accessible only by apps signed with the same
developer certificate.
98
Platform Overview
Enforcing Permissions on Android Components
Android components can be protected with permissions. Activities, Services, Content Providers, and Broadcast
Receivers—all can use the permission mechanism to protect their interfaces. Permissions can be enforced on
Activities, Services, and Broadcast Receivers by adding the attribute android:permission to the respective component
tag in AndroidManifest.xml:
...
Content Providers are a little different. They support a separate set of permissions for reading, writing, and accessing
the content provider with a content URI.
android:writePermission , android:readPermission : the developer can set separate permissions for reading or
writing.
android:permission : general permission that will control reading and writing to the content provider.
android:grantUriPermissions : "true" if the content provider can be accessed with a content URI (the access
temporarily bypasses the restrictions of other permissions), and "false" otherwise.
Signing and Publishing Process
Once an app has been successfully developed, the next step is to publish and share it with others. However, apps
can't simply be added to a store and shared, for several reasons—they must be signed. The cryptographic signature
serves as a verifiable mark placed by the developer of the app. It identifies the app’s author and ensures that the app
has not been modified since its initial distribution.
Signing Process
During development, apps are signed with an automatically generated certificate. This certificate is inherently insecure