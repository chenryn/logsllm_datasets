offi
getSpeed()
吊扇的源码如下：
public class CeilingFan(
public static final int HIGH = 3;
注意，吊扇的类中具有局部状态
public static final int MEDIUM = 2;
代表吊扇的速度。
public static final int Low = 1;
public static final int OFF = 0;
String location;
int speed;
public CeilingFan(String location) {
this.location = location;
嗯，想要正确地实现undo，
speed = OFF;
}
就必须把吊扇以前的选度
考虑进去。
public void high(){
speed = HIGH;
//设置高转速
D
public void medium ()(
speed = MEDIUM;
//设置中转速
这些方法用来设置
public void low()(
吊扇速度。
speed = LOW;
//设置低转速
众
public void off() f
speed - OFF;
//关闭吊扇
可以利用setSpeed（）方法得
return speed;
到吊扇的当前速度。
220
第6章
---
## Page 257
命令模式
加入撤销到吊扇的命令类
现在就让我们把撤销加人天花板吊扇的诸多命令中。这么做，需要
追踪吊扇的最后设置速度，如果undo(方法被调用了，就要恢复成之
前吊扇速度的设置值。下面是CeilingFanHighCommand的代码：
public class CeilingFanHighCommand implements Command {
增加局部状态以便造踪吊
CeilingFan ceilingFan;
int prevSpeed;
扇之前的速度。
public CeilingFanHighCommand (CeilingFan ceilingFan) {
this.ceilingFan = ceilingFan;
在execxte（）中.在我们改变吊
public void execute()(
乌的速度心前，需要先将它之
prevSpeed-ceilingFan.getSpeed();
前的状态记录起来，以便需要
ceilingFan.high() ;
微销时使用。
public void undo(）（
if（prevSpeed==CeilingFan.HIGH）（
ceilingFan.high();
)elseif(prevSpeed-=CeilingFan.MEDIUM)
ceilingFan.medium();
将吊扇的速度设置回之前
else if（prevSpeed==CeilingFan.Low）(
的值，达到撤销的目的。
ceilingFan.low();
}else if（prevSpeed == CeilingFan.OFF）（
ceilingFan.off();
RAIN
POWER
我们还有三个天花板吊扇的命令要写：low（低速）、medium（中速）、of（关闭）。你
知道如何实现这些命令吗？
你现在的位置
221
---
## Page 258
测试天花板吊扇
准备测试天花板吊扇
该是测试天花板吊扇的时候了。我们打算把第0号
插槽的开启按钮设置为中速，把第1号插槽的开启
按钮设置为高速，而两个对应的关闭按钮，都是
关闭吊扇的命令。
测试脚本如下：
public class RemoteLoader {
public static void main(String[] args) {
RemoteControlWithUndo remoteControl = new RemoteControlWithUndo();
CeilingFan ceilingFan = new CeilingFan ("Living Room") ;
在这里实例化了三个命今，分
CeilingFanMediumCommand ceilingFanMedium =
new CeilingFanMediumCommand (ceilingFan) ;
别是：高速、中遥和关闭。
CeilingFanHighCommand ceilingFanHigh =
new CeilingFanHighCommand (ceilingFan) ;
CeilingFanOffCommand ceilingFanOff =
在这里将中速设置到第
new CeilingFanOffCommand (ceilingFan) ;
0号插橙，将高速设置
到第1号描楼，并加载
remoteControl.setCommand(0, ceilingFanMedium, ceilingFanOff);
remoteControl.setCommand(1, ceilingFanHigh, ceilingFanOff) ;
这两个插楼的关闭命今。
remoteControl.onButtonWasPushed (0) ;<
首光，以中速开皂吊扇。
remoteControl.offButtonWasPushed(0)
System.out.println (remoteControl) ;
然后关闭。
remoteControl.undoButtonWasPushed () 
搬销：应该金回到中速…
remoteControl.onButtonWasPushed (1) 
这个时候开启高速。
System.out.println (remoteControl) ;
remoteControl.undoButtonWasPushed () 
再进行一次微销，启该金国到中速
222
真9%
---
## Page 259
命令模式
测试天花板吊扇
好了，拿起遥控器，加载这些命令，然后按一些按钮！
File Edit Window Help UndoThis
java RemoteLoader
Living Room ceiling fan is on medium
以中速打开天花板吊扇
Living Room ceiling fan is off
这是遥控器的命.
然后将其关闭。
-Remote Control-
[slot o] headfirst.command.undo.NoCommand
headfirst.command.undo.NoCommand
[slot1]
headfirst.command.undo.CeilingFanMediumCommand
headfirst.command.undo.CeilingFanOff-
Command
[slot 2]headfirst.command.undo.CeilingFanHighCommand
headfirst.command.undo.CeilingFanoffCom-
mand
[slot 3]headfirst.command.undo.NoCommand
headfirst.command.undo.NoCormand
[slot4]
headfirst.command.undo.NoCommand
headfirst.command.undo.NoCommand
[slot5]
headfirst.command.undo.NoCommand
headfirst.command.undo.NoCommand
[slot 6]headfirst.command.undo.NoCommand
headfirst.command.undo.NoCom
…....币记录了最后
and
[undo]headfirst.command.undo.CeilingFanoffCommand
执行的命合，也就是
Living Room ceiling fan is on medium 4
撤销最后一个命今，回到了中速
CeilingFanOsCommand
Remote Control-
[slot 0] headfirst.com
mand.undo.NoCommand
headfirst.command.undo.NoCom
[slot1]
headfirst.command.undo.CeilingFanMediumCommand
headflrst.command.undo.CeilingFanOff-
ano
[slot 2] headfirst.command.undo.CeilingFanHighCommand
Command
headfirst.command.undo.CeilingFanOffCom
mand
[slot3]
headfirst.command.undo.NoCommand
headfirst.command.undo.NoCommand
[slot4]
headfirst.co
headfirst.com
nmand.undo.NoCo
and
[slot5]
headfirst.command.undo.NoCommand
headfirst.command.undo.NoCom
and
[slot 6]headfirst.command.undo.NoCommand
headfirst.co
mand.undo.NoCo
[undo] headfirst.command.undo.CeilingFanHighCommand
现在高速是最后
被执行的命合
Living Room ceiling fan is on medium
再一次撒销，天花板吊
乌回到中速。
你现在的位置》
223
---
## Page 260
宏命令
每个遥控器都需具备“Party模式”！
如果拥有了一个遥控器，却无法光凭按下一个按钮，就同时能
弄暗灯光、打开音响和电视、设置好DVD，并让热水器开始加
温，那么要这个遥控器还有什么意义？
嗯！
我们的遥控器需要为
每个装置准备一个按钮，我不
认为可以做到上面的要求。
等一下，Sue，这可不
一定。我认为可以做到
这一点，而且完全不需要
改变通控器。
Mary的想法是，制造一种新的命今
用来执行其他一惟命…而不只是
执行一个命今！这个想法不错吧？
public class MacroCommand implements Command {
Command[]  commands;
public MacroCommand (Command[] commands)(
this.commands = commands;
在宏命今中，用命今数组存储一大惟
}
命今。
public void execute(){
for (int i = 0; i < commands.length; i++){
commands [i] .execute ();
当这个宏命今被通控器执行时，就一次性执
PDG
行数组里的每个命今。
224
第6章
---
## Page 261
命令模式
使用宏命令
让我们逐步来看如何使用宏命令：
1先创建想要进入宏的命令集合：
创建所有的装置，电灯、
电视、音响和热水器。
Light light = new Light("Living Room");
(WOOY DUTATT)AL MU = A AL
Stereo stereo = new Stereo("Living Room");
Hottub hottub - new Hottub();
现在，创建所有的0n命
LightOnCommand 1ightOn = new LightOnCommand(1ight) ;
今来控制它们。
StereoOnCommand stereoOn = new StereoOnCommand(stereo);
TVOnCommand tvOn = new TVOnCommand(tv);
HottubOnCommand hottubOn = new HottubOnCommand(hottub);
我们也需要关闭按钮的命令，请在这里写下创建
它们的代码：
一个数组用来记录开名
会今，另一个数组用来
②接下来创建两个数组，其中一个用来记录开启命令，另一个用来记录关闭命
记录关闲命…
令，并在数组内放入对应的命令：
K
Command[1 partyOn={lightOn,stereoOn,tvOn,hottubon};
Command[] partyoff=（1ightoff，stereooff，tvoff,hottuboff};
..然后创建两个
MacroCommand partyOnMacro = new MacroCommand(partyOn);
对应的宏持有它
MacroCommand partyOffMacro = new MacroCommand (partyoff);
们。
然后将宏命令指定给我们所希望的按钮：
将宏命今指定给一
个搭钮。
remoteControl.setCommand(0, partyOnMacro, partyoffMacro);
你现在的位置
225
---
## Page 262
宏命令的练习
最后，只需按下一些按钮，测试是否正常工作。
System.out.println(remoteControl);
System,out.println("--- Pushing Macro On---") ;
remoteControl.onButtonWasPushed(0) ;
System.out.println("--- Pushing Macro Off---") ;
输出如下
remoteControl.offButtonWasPushed (0) ;
File Edit Window Help You Can'tBeatABabka
java RemoteLoader
这是两个宏命今。
-Remote Control
[slot 0]headfirst.command.party.MacroCommand
headfirst.command.party.MacroCommand
[slot 1]headfirst.command.party.NoCommand
headfirst.command.party.NoCommand
[slot 2]headfirst.command.party.NoCommand
headfirst.command.party.NoCommand
[slot 3] headfirst.command.party.NoCommand
headfirst.command.party.NoCommand
[slot 4]headfirst.command.party.NoCommand
headfirst.command.party.NoCommand
[slot 5] headfirst.command.party.NoCommand
headfirst.command.party.NoCommand
[slot 6]headfirst.command.party.NoCommand
headfirst.command.party.NoCommand
[undo]headfirst.command.party.NoCommand
Pushing Macro On-
Lightison
Living Room stereo is on
Living Room TV is on
当我们调用开启宏时，此宏内
Living Room TV channel is set for DVD
所有的命今都被执行了……
Hottub is bubbling!
-Pushing Macro Off--
Light isoff
当我们调用关用宏时，也没
Living Room stereo is off
Living Room TV is off
有问题。
Hottub is cooling to 98 degrees
226
第6章
---
## Page 263
命令模式
我们的宏命令唯一缺少的是撤销功能。一个宏命令被执行完，然后按下撤销
按钮，那么宏内所进行的每一道命令都必须被撤销。请在下面的代码中，填入
练习
undo(方法的内容：
public class MacroCommand implements Command (
Command[] commands;
public MacroCommand(Command[] commands)(
this.commands = commands;
public void execute()(
for（int i=0;i<commands.length;i++){
commands [i] .execute ();
public void undo(){
间：
estions
问：
接收者一定有必要存
我可以创建一Party-
在吗？为何命令对象不直接实现
Command，然后在它的execute（）方
execute()方法的细节？
我如何能够实现多层次
法中调其他的命令，利用这种做法实
的撤销操作？换句话说，我希望能够
答：一般来说，我们尽量设
现Party模式（PartyMode）吗？
按下撤销按钮许多次，撤销到很早很
计“傻瓜”命令对象，它只懂得调
早以前的状态。
合：
你可以这么做。然而，
用一个接收者的一个行为，然而，
这等于把Party模式“硬编码”到
书：
好问题！其实这相当容
有许多“聪明”命令对象会实现许多
PartyCommand中。为什么要这么麻
逻辑，直接完成一个请求。当然你可
易做到，不要只是记录最后一个被执
烦呢？利用宏命令，你可以动态地
行的命令，而使用一个堆栈记录操作
以设计聪明的命令对象，只是这样一
决定PartyCommand是由哪些命令组
来，调用者和接收者之间的解耦程度
过程的每一个命令。然后，不管什么
成，所以宏命令在使用上更灵活。一
时候按下了撤销按钮，你都可以从堆
是比不上“傻瓜”命令对象的，而