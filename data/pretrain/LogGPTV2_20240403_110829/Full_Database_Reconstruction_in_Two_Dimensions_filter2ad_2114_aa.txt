title:Full Database Reconstruction in Two Dimensions
author:Francesca Falzon and
Evangelia Anna Markatou and
Akshima and
David Cash and
Adam Rivkin and
Jesse Stern and
Roberto Tamassia
Full Database Reconstruction with Access and
Search Pattern Leakage
Evangelia Anna Markatou and Roberto Tamassia
Brown University, Providence RI 02912, USA,
PI:EMAIL, PI:EMAIL
Abstract. The widespread use of cloud computing has enabled several
database providers to store their data on servers in the cloud and answer
queries from those servers. In order to protect the conﬁdentiality of data
in the cloud, a database can be stored in encrypted form and all queries
can be executed on the encrypted database. Recent research results sug-
gest that a curious cloud provider may be able to decrypt some of the
items in the database after seeing a large number of queries and their
(encrypted) results. In this paper, we focus on one-dimensional databases
that support range queries and develop an attack that can achieve full
database reconstruction, inferring the exact value of every element in the
database. We consider an encrypted database whose records have values
from a given universe of N consecutive integers. Our attack assumes ac-
cess pattern and search pattern leakage. It succeeds after the attacker
has seen each of the possible query results at least once, independent of
their distribution. If we assume that the client issues queries uniformly at
random, we can decrypt the entire database with high probability after
observing O(N 2 log N ) queries.
1
Introduction
During the past decade, an increasing number of organizations have started to
outsource their computing infrastructure to cloud providers. This usually means
that they store their data in the cloud and run most of their applications, includ-
ing databases, in the cloud as well. Outsourcing data storage and computation to
the cloud has several advantages, including reliability, availability, and economies
of scale.
Unfortunately, outsourcing the IT infrastructure to the cloud has its draw-
backs as well. For example, an organization’s data may contain conﬁdential in-
formation that should not be leaked to unauthorized third parties. Storing this
information outside the organization’s premises may be challenging, and in some
cases unfeasible, due to a multitude of business and regulatory constraints.
One way to deal with these restrictions and risks is to store data in the
cloud in encrypted form. Indeed, data leaks are no threat to encrypted data as
decryption is unfeasible without possession of the key. Besides malicious attacks,
encryption also protects data from “curious” eyes, including the cloud provider
itself.
Evangelia Anna Markatou and Roberto Tamassia
Unfortunately, even encrypted data is not safe from curious eyes when
searched upon. Indeed, previous work has demonstrated that an attacker who
monitors query results might be able to gain information about the data—even
when stored and transmitted in encrypted form. In particular, range queries
(queries that return database records with attribute values in a given interval)
are particularly susceptible, as they have the potential to leak information about
the data they access. Such information may include the order of the (encrypted)
records (i.e., which has larger and which has smaller value) as well as the actual
values of the (encrypted) records. This latter information essentially implies that
the database can be practically decrypted.
In this paper, we focus on encrypted one-dimensional databases that support
range queries on encrypted data. We assume an honest but curious attacker who
is able to monitor all (encrypted) queries and their (encrypted) results. We
develop an attack that can fully reconstruct the database after seeing enough
queries. The attack ﬁrst reconstructs the order of all the (encrypted) database
elements and then reconstructs their values.
Our attack utilizes two common types of leakage, access pattern leakage and
search pattern leakage. Previous algorithms on the full database reconstruction
problem depend on access pattern leakage and on a client issuing queries from a
known distribution [8, 14], or only work on dense databases [18]. Also, some of
the previous work considers additional assumptions on the database, such as the
existence of points in particular intervals and/or a minimum distance between
such points [8]. However, it is unlikely that a client issues queries uniformly at
random in practical applications. Also, not all databases are dense. Finally, spe-
cial assumptions on nonempty intervals and minimum distance between points
may not hold.
We have developed a general attack on encrypted databases that achieves
full database reconstruction, recovering the exact values of all elements, after
seeing all possible query results.
1.1 Organization of the Paper
This paper presents an attack on encrypted databases that support range queries.
We assume that the attacker has observed all possible queries at least once. We
exploit access pattern leakage to achieve full ordering reconstruction (FOR),
that is, reconstruct the order of the database elements induced by their values
(but not the values themselves). Next, we exploit both access pattern leakage
and search pattern leakage to achieve full database reconstruction (FDR), that
is, we are able to reconstruct the exact value of all elements in the database.
After deﬁning our model (Section 2) and reviewing related work (Section 3),
we present our algorithm for full ordering reconstruction in Section 4 and our al-
gorithm for full database reconstruction in Section 5. Finally, Section 6 concludes
the paper outlining directions for future work.
Full Database Reconstruction with Access and Search Pattern Leakage
1.2 Contributions
Previous attacks that achieve full database reconstruction (FDR) use access pat-
tern leakage and a client that issues queries according to a known distribution.
Our attack makes a diﬀerent assumption. We do not assume that the client issues
queries in any particular distribution, but we do assume that the searchable en-
cryption scheme leaks the search pattern. Notably, typical searchable encryption
schemes do leak the search pattern.
We provide in Table 1 a comparison of our work with selected papers
[6, 8, 14, 18] on full database reconstruction (FDR) and full ordering recon-
struction (FOR) from range queries on one-dimensional encrypted databases.
For each approach, the table shows the assumptions on the leakage observed by
the attacker and knowledge of the query distribution by the attacker. Also, for
the scenario of a client that issues queries uniformly at random (a standard sce-
nario in the literature), the table shows the query complexity of FDR and FOR
attacks on various types of databases. As shown in the table, our method im-
proves or matches the query complexity reported in previous work, albeit under
diﬀerent assumptions.
Table 1. Comparison of approaches to full database reconstruction (FDR) and
full ordering reconstruction (FOR) from range queries on one-dimensional encrypted
databases. We compare our work with three relevant papers in the area by showing
the assumptions on the attacker’s capabilities and the query complexity of the attack
for the case of a client that issues queries uniformly at random, highlighting the best
asymptotic bounds. The query complexity is expressed in terms of the size of the uni-
verse of database elements, N . The following types of databases are considered: “Any”
refers to an arbitrary database, “Dense” refers to a dense database, which has at least
one record for each possible value, and “Any∗” refers to the assumption introduced
in [6, 8] that requires the existence of values in particular intervals and/or forces a
minimum distance between such points.
Kellaris et
al. [14]
Previous Work
Lacharit´e et
al. [18]
Grubbs et
al. [6, 8]
This Paper
Assumptions
Access Pattern Leakage (cid:88)
Search Pattern Leakage
Known Distribution
(cid:88)(only FDR)
(cid:88)
(cid:88)
(cid:88)(only FDR)
(cid:88)
(cid:88)(only FDR)
Database / Problem
Dense / FDR
Any / FOR
Any∗ / FOR
Any / FDR
Any∗ / FDR
O(N 2 log N ) N log N +O(N ) O(N log N )
O(N 2 log N )
O(N 2 log N )
O(N 4 log N )
O(N 4 log N )
O(N log N )
O(N 2 log N )
O(N log N )
O(N log N )
O(N 4 log N ) O(N 2 log N )
O(N 2 log N ) O(N 2 log N )
Evangelia Anna Markatou and Roberto Tamassia
The main contributions of this paper are summarized as follows, where N
denotes the size of the universe of database elements:
1. We show that we can achieve FOR after O(N 2 log N ) uniformly-at-random
queries with high probability (1 − 1/N 2) (Theorem 1).
2. We show that we can achieve FOR in a dense database after O(N log N )
uniformly-at-random queries with high probability (1− 3/N 3) (Theorem 2).
3. For datasets that have two data points in [N/4, 3N/4] and their distance
is larger than N/3, we show that we can achieve FOR after O(N log N )
uniformly-at-random queries with high probability (1− 3/N 3) (Theorem 3).
4. We show that we can achieve FDR after O(N 2 log N ) distinct queries with
high probability (1 − 1/N 2) (Theorem 4).
Kellaris et al. [14] have shown that there exist datasets which cannot be
distinguished by attackers that observe signiﬁcantly fewer than O(N 4) queries
chosen uniformly at random. However this lower bound works for attacks that
use access pattern or communication volume leakage. We use an additional type
of leakage, search pattern leakage, which allows us to achieve faster attacks.
2 Model and Problem Statement
We consider a client that stores information on an encrypted database hosted
by a server. The client issues range queries to the server using tokens, and the
server returns responses to the queries.
We deﬁne a database as a collection of n records, where each record (r, x)
comprises a unique identiﬁer, r, from some set R, and a value x = val (r) from
an interval of integers X = [1, ..., N ], which is the universe of database values.
A database is called dense if for all x ∈ X, the database contains some record
(r, x) such that val (r) = x. Note that there may be multiple records with the
same value. A range query [a, b], where a ≤ b are integers, returns the set of
identiﬁers M = {r ∈ R : val (r) ∈ [a, b]}.
The adversarial model we consider is a persistent passive adversary who is
able to observe communication between the client and the server. The adversary
aims to recover value val (r) for each identiﬁer, r, in the database. Note that the
adversary is not able to decrypt any observed encrypted data. The information
learnt by the adversary depends on some scheme-dependent leakage.
We examine two types of common leakage:
– Access Pattern Leakage: If whenever the server responds to a query, the
adversary observes the set of all matching identiﬁers, M , we say that the
scheme allows for access pattern leakage. We assume that the identiﬁer r
reveals no information on val(r).
– Search Pattern Leakage: If the adversary can observe search tokens and de-
termine whether two tokens, t1 and t2, correspond to the same range query,
we say that the scheme allows for search pattern leakage. Note that we do not
assume that a token reveals the query the client issues. That is, the token
Full Database Reconstruction with Access and Search Pattern Leakage
does not indicate the range [a, b]. We just assume that the adversary can
distinguish whether two query ranges are the same or diﬀerent by observing
the corresponding tokens.
In this paper, we consider the following two problems and present eﬃcient
algorithms for them.
Problem 1 (Full Database Reconstruction). (FDR) Given a one-dimensional en-
crypted database that allows range queries, reconstruct the exact value of all
elements.
Problem 2 (Full Ordering Reconstruction). (FOR) Given a one-dimensional en-
crypted database that allows range queries, reconstruct the order of all elements’
values.
Our algorithms assume that the adversary knows the size of the universe of
database values, N . Our FOR algorithm, presented in Section 4, assumes access
pattern leakage while our FDR algorithm, presented in Section 5, assumes both
access pattern leakage and search pattern leakage.
3 Related Work
3.1 Context
In this line of research we assume an honest but curious adversary. For example,
this can be the cloud server. The server can easily observe all incoming and
outgoing traﬃc and may possibly be able to draw conclusions about the values
that exist in the database. We assume that the adversary is honest: she will not
try to change the protocol, alter data, inject faulty information, collude with
malicious users, etc. The adversary just monitors (encrypted) data.
Given that data are stored in an encrypted form, one might be tempted
to think that it is not possible to decrypt them unless the decryption key can
be found. Unfortunately, this is not the case. If the database supports range
queries, an adversary who monitors the traﬃc is able to ﬁnd some information
about the records observed. For example, one piece of information that can be
easily found is that all the results of a range query belong in the same range (by
deﬁnition) and are, in one way or another, “close” to each other. By observing
queries for a very long time, one might be able to infer which records are likely
to be in proximity of each other (e.g., those that frequently occur together in
query results) and which records are likely to be more distant from each other
(e.g., those which do not frequently occur together in query results).
Despite the availability of this approximate proximity information, the reader
will notice that all these records (whether nearby to or far-away from each other)
are still encrypted. Thus, the adversary might be able to know that encrypted (2)
is close to encrypted (3), but she can not know that the values observed are ac-
tually 2 and 3 as the adversary only sees encrypted (2) and encrypted (3). To
Evangelia Anna Markatou and Roberto Tamassia
be able to “break” the encryption, most of the literature makes some extra as-
sumptions, which usually relate to the query distribution. One frequent such
assumption made by several papers is that all range queries are issued uni-
formly at random by the client. That is, there are N (N + 1)/2 possible queries (
[1, 1], ..., [1, N ], [2, 2], ..., [2, N ], ..., [N − 1, N ], [N, N ]), and each one of them is is-
N (N +1) . Note that even though all queries are issued with
sued with probability
the same probability, some elements are queried more than others. Speciﬁcally,
elements close to the middle of the database are queried more than elements
towards the endpoints.
2
Our approach does not depend on the query distribution. Instead, we exploit
search pattern leakage, a common leakage of searchable encryption schemes. This
leakage allows us determine whether two search tokens correspond to the same
query. For example, suppose there are 100 distinct queries that all return {a},
and 4 distinct queries that all return {b}. We can tell that the unoccupied space
surrounding a is larger than the unoccupied space surrounding b.
3.2 Previous Results
In the following review of previous work in the area, we denote with N is the
size of the universe (interval) of database values.
A seminal paper by Kellaris, Kollios, Nissim, and O’Neill [14] is the ﬁrst sys-
tematic study of the problems of full ordering reconstruction and full database
reconstruction from range queries. They prove that full database ordering can
be done with O(N 2 log N ) queries. This attack assumes that the adversary ob-
serves the answers to all possible queries. Thus, based on the coupon collector
problem, the assumption holds with high probability after O(N 2 log N ) queries.
They also show that full database reconstruction can be done with high proba-
bility after observing O(N 4 log N ) queries. Our work diﬀers from [14] in the use
of data structures, Namely, we maintain the partial order of observed identiﬁers
in a PQ tree [1]. As we observe more queries, we gain more information about
the ordering of the identiﬁers, which is eﬃciently maintained in the PQ-tree.
Eventually, once we observe all queries, we have a fully ordered set (up to reﬂec-
tion). With respect to query complexity, for full database ordering, we match
the O(N 2 log N ) bound of [14]. Also, we achieve full reconstruction after seeing
O(N 2 log N ) queries, while the approach by [14] needs Ω(N 4 log N ) queries. We
obtain this improvement thanks to our assumption of search pattern leakage,
which allows us to count the distinct queries that have been issued, while the
method of [14] is based on the statistical properties of the query distribution.
Lacharit´e, Minaud and Paterson [18] focus on the reconstruction of a dense
database, i.e., a database for which there exists at least one record for each pos-
sible value in the universe of values, [1, N ]. Using this density assumption, they
achieve an impressive speedup in the query complexity of the attack. Indeed, they
achieve full database reconstruction from access pattern leakage after observing
O(N log N ) uniformly at random queries. We are able to match this bound by
using a datastructure called a PQ tree[1]. Note that neither their method nor
ours assumes knowledge of the query distribution by the adversary.
Full Database Reconstruction with Access and Search Pattern Leakage
The recent work by Grubbs, Lacharit´e, Minaud and Paterson [6, 8] presents
a comprehensive approach to database reconstruction. They generalize the
problem by introducing a new approximate way of reconstruction, called -
approximate database reconstruction (-ADR). In this model,  is the error the
attack is allowed to have in the reconstruction. That is, for each original value x,
the reconstructed value is in the interval [x−N, x+N ]. Note that full database
reconstruction (FDR) is the special case of -ADR achieved by setting  = 1/N .
Regarding data structures, our use of PQ-trees is similar to theirs. To compare
our FDR attack to theirs, we set the approximation parameter  in their -ADR