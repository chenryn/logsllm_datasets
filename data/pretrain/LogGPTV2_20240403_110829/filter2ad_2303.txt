title:One Sketch to Rule Them All: Rethinking Network Flow Monitoring with
UnivMon
author:Zaoxing Liu and
Antonis Manousis and
Gregory Vorsanger and
Vyas Sekar and
Vladimir Braverman
One Sketch to Rule Them All:
Rethinking Network Flow Monitoring 
with UnivMon
Zaoxing Liu, Antonis Manousis, Greg Vorsanger, 
Vyas Sekar, and Vladimir Braverman
Many Monitoring Requirements
Traffic	Engineering
“Flow	Size	Distribution”
Worm	Detection
“SuperSpreaders”
Anomaly	Detection
“Entropy”,	“Traffic	Changes”
Accounting
“Heavy	Hitters”
• Who’s sending	a lot	more traffic than 10min	ago?	(Change)
• Who’s sending	a lot	from 10.0.1.0/16?	(Heavy Hitter)
• Are	you being DDoS-ed?
2
Traditional: Packet Sampling
Sample packets at random, group into flows
Flow =  Packets with same pattern
Source and Destination Address and 
Ports
FlowId Counter
1
12
Flow reports
1131611
1613111
Estimate: FSD, Entropy, Heavy Hitters …
1131611
Prior work: Not good for fine-grained analysis!
3
Alternative: App-Specific Sketches
Heavy	Hitter
Application-Level
Metric
Entropy
Application-Level
Metric
Counter	
Data	
Structures
Counter	
Data	
Structures
….
….
Superspreader
Application-Level
Metric
Counter	
Data	
Structures
Packet	
Processing
Packet	
Processing
Packet	
Processing
Pre-deployed 
Algorithms
Traffic
Higher Complexity with more applications
Higher development time as new applications appear 
Tight Binding between monitoring data and control plane
4
Motivating Question
Today
Generality
Late	Binding
e.g.,	NetFlow
XOR
Fidelity
e.g.,	Sketches
AND
Can	we	achieve	this
5
UnivMon Vision
App	1
…...
App	n
Application-specific	
Computation
Report
Update	Counters
“General”
Sketch
Configure
Packet	
Processing
Traffic
Control Plane 
Data Plane
•
•
One Sketch for multiple tasks 
Naturally Late-binding
6
Many Natural Challenges!
Does such a construction exist?
If it exists, is it feasible to implement?
Does it extend to a network-wide setting?
e.g., Multiple paths, Multiple dimensions
Is it competitive w.r.t. custom algorithms?
7
This Talk
Does such a construction exist?
If it exists, is it feasible to implement?
Does it extend to a network-wide setting?
e.g., Multiple paths, Multiple dimensions
Is it competitive w.r.t. custom algorithms?
8
This Talk
Does such a construction exist?
If it exists, is it feasible to implement?
Does it extend to a network-wide setting?
e.g., Multiple paths, Multiple dimensions
Is it competitive w.r.t. custom algorithms?
9
Concept of Universal Streaming
Frequency Moments Fk = ∑ 𝑓#$
%#&’
• Basic Streaming Algorithms:
(A stream of length m with n unique items)
2 4 6 5 …...
1331511
frequency vector  
F2 : AMS Sketch, Count Sketch
One algorithm solves one problem
…...
• Universal Streaming?
2 4 6 5 …...
1331511
frequency vector  
Universality:
arbitrary g() function?
G-sum = ∑ 𝑔(𝑓#)
%#&’
10
Theory of Universal Streaming [BO’10, BO’13]
Thm 1: 
g() function is non-decreasing such that g(0)=0,  and 𝑔(𝑓#)
doesn’t grow monotonically faster than𝑓#2 .
There exists a universal approach to estimate G-sum when
Thm 2: 
A universal sketch construction can be used to estimate G-
sum with high probability using polylogarithmic memory. 
11
Intuition of Universal Sketch
Informal Definition: Item 𝑖 is a 𝑔-heavy hitter if changing 
its frequency 𝑓# significantly affects its G-sum.
Case 1: there is one sufficiently large a 𝑔-heavy hitter 
Case 2: there is NO single sufficiently large𝑔-heavy hitter 
Most of mass is concentrated in this heavy hitter.
Use L2 Heavy-Hitter algorithm to find such a heavy hitter.
Find heavy hitters on a series of sampled substreams of
increasingly smaller size. 
12
Universal Sketch Data Structure
Generate	log(n)	substreams
by	zero-one	hash	funcs
H1….Hlog(n)
Estimated	
G-sum
Count-Sketch	etc.
1331511
2 4 6 5
Heavy	Hitter	Alg
(1,4),	(3,2),(5,2)
5
5
Heavy	Hitter	Alg
(1,4),	(5,2),(2,1)
Heavy	Hitter	Alg
Heavy	Hitter	Alg
L2	Heavy	Hitter(HH)	Alg
…
.
.
.
(5,2),	(2,1)
(2,1)
Heavy	Hitters
and	Counters
13
0
1
1511
1
2
…
.
.
.
5
log(n)
Levels
2
2
In	Parallel
This Talk
Does such a construction exist?
If it exists, is it feasible to implement?
Does it extend to a network-wide setting?
e.g., Multiple paths, Multiple dimensions
Is it competitive w.r.t. custom algorithms?
14
How to Map to P4
Estimated	
G-sum
0
1
1331511
2 4 6 5
Heavy	Hitter	Alg
(1,4),	(3,2),(5,2)
1511
1
2
5
Heavy	Hitter	Alg
(1,4),	(5,2),(2,1)
…
.
.
.
log(n)
…
.
.
.
2
Heavy	Hitter	Alg
…
.
.
.
(2,1)
App-Estimation
Sampling
Sketching
Top-K
15
Mapping to P4
Sampling
P4 Hash Funcs
Sketching
P4 Registers
Custom Libraries
App-Estimation
Top-K
Hash Funcs
P4 Registers
+
16
Top-K Stage on Switch
App-Estimation
Sampling
Sketching
HW	Complexity	(need	Priority	Queue)
Top-K
Hard	in	
hardware
Storage/Comm Overhead	(report to	controller)
17
Split Top-K Stage
App-Estimation
Sampling
Sketching
Top-K
HW	Complexity	(w/o	Priority	Queue)
Storage/Comm.	Overhead	(report to	controller)
Several	
MBs	more
18
Implementation Summary
App	1
…...
App	n
Application-specific	Computation
Top-K
Sampling
(Hash	func)
Update	Counters
Traffic
Sketching
P4	register
Top-K
Possible	keys
Sampling
Sketching
Top-K
App-Estimation
19
This Talk
Does such a construction exist?
If it exists, is it feasible to implement?
Does it extend to a network-wide setting?
e.g., Multiple paths, Multiple dimensions
Is it competitive w.r.t. custom algorithms?
20
Network-wide Problem
One sketch for each dim
𝐷2
𝐷2
D
D
D
N nodes 
D dimensions
(e.g., src, srcdst)
O1
D
A
B
O2
Trivial sol: place D*N sketches
Our goal:  Place s sketches, where s<<D*N
One-big-switch abstraction
D
D1
D
D2
21
This talk
Does such a construction exist?
If it exists, is it feasible to implement?
Does it extend to a network-wide setting?
e.g., Multiple paths, Multiple dimensions
Is it competitive w.r.t. custom algorithms?
22
Evaluation Setup
• Traces: CAIDA backbone traces
• Split into different “epoch” durations
• Memory setup: 600KB—5MB
• Application metrics: HH, Change, DDoS, etc.
• Custom algorithms from OpenSketch
23
UnivMon is Competitive Per-App
N/A
Max	error	gap	<	3.6%;	Results	hold	across	multiple	traces
24
UnivMon Better for Larger Portfolio
Clear	advantages	when	handling	more	applications
25
Memory needs are reasonable
OS-trace1
OS-trace2
OS-trace3
OS-trace4
OS-trace5
UM-trace1
UM-trace2
UM-trace3
UM-trace4
UM-trace5
)
B
K
(
e
g
a
s
U
y
r
o
m
e
M
300
200
5s
30s
1m
5m
Monitoring Time Interval
Slow	increase	(logarithmically)	 and	supports	larger	windows
26
Conclusions
• Network management needs many metrics
• Traditional: Generality XOR Fidelity
• E.g., NetFlow vs Custom Sketches
• New opportunity: Universal Sketches!
• Generality AND Fidelity AND Late Binding
• UnivMon brings this opportunity to fruition 
• Practical, realizable in P4
• Comparable (and better) than custom
• Amenable to “network-wide” abstractions
• Many exciting future directions:
• Theoretical improvements, Native multidimensional, etc.
27
Network-wide coordination helps
Network Wide Evaluation (600KB per sketch)
 2000
)
 1500
Ingress
Greedy-D.&C.
Q.&S.
UnivMon
B
K
(
y
r
o
m
e
M
e
g
a
r
e
v
A
 1000
 500
 0
ATT-N.A. GEANT BellSouth
28