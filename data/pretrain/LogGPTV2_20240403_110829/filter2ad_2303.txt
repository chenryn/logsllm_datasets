# One Sketch to Rule Them All: Rethinking Network Flow Monitoring with UnivMon

**Authors:** Zaoxing Liu, Antonis Manousis, Gregory Vorsanger, Vyas Sekar, and Vladimir Braverman

## Abstract
This paper introduces UnivMon, a universal sketch-based approach for network flow monitoring. We address the need for a single, flexible, and efficient solution that can handle multiple monitoring tasks, such as traffic engineering, anomaly detection, and accounting, while maintaining high fidelity and late binding.

## 1. Introduction
Network monitoring is essential for various applications, including traffic engineering, worm detection, anomaly detection, and accounting. Traditional methods, such as packet sampling, often lack the precision needed for fine-grained analysis. Application-specific sketches, while more accurate, are complex and tightly bound to specific control plane configurations. This paper proposes a novel approach, UnivMon, which aims to provide both generality and fidelity in network flow monitoring.

## 2. Motivation
### 2.1 Many Monitoring Requirements
- **Traffic Engineering:** Analyze flow size distribution.
- **Worm Detection:** Identify super spreaders.
- **Anomaly Detection:** Measure entropy and detect traffic changes.
- **Accounting:** Track heavy hitters.

### 2.2 Traditional Approaches
- **Packet Sampling:** Randomly sample packets and group them into flows. While simple, this method is not suitable for fine-grained analysis.
- **Application-Specific Sketches:** Use different data structures and algorithms for each application. This approach is more accurate but increases complexity and development time.

### 2.3 Motivating Question
Can we achieve a general and flexible solution that provides high fidelity and late binding?

## 3. UnivMon Vision
UnivMon envisions a single, general sketch that can be configured for multiple monitoring tasks. This approach naturally supports late binding, allowing for flexibility in the control and data planes.

## 4. Challenges
- **Existence:** Does such a construction exist?
- **Feasibility:** Is it feasible to implement?
- **Scalability:** Can it extend to a network-wide setting, handling multiple paths and dimensions?
- **Competitiveness:** Is it competitive with custom algorithms?

## 5. Concept of Universal Streaming
### 5.1 Frequency Moments
- **Fk = ‚àë ùëì#$
%#&‚Äô:** Basic streaming algorithms like AMS Sketch and Count Sketch estimate Fk.
- **Universal Streaming:** A single algorithm that can estimate arbitrary functions G-sum = ‚àë ùëî(ùëì#)
%#&‚Äô.

### 5.2 Theoretical Foundations
- **Theorem 1:** If g() is non-decreasing and does not grow faster than ùëì#2, a universal approach can estimate G-sum.
- **Theorem 2:** A universal sketch can estimate G-sum with high probability using polylogarithmic memory.

## 6. Intuition of Universal Sketch
- **Definition:** An item i is a g-heavy hitter if changing its frequency significantly affects the G-sum.
- **Case 1:** One sufficiently large g-heavy hitter.
- **Case 2:** No single g-heavy hitter; find heavy hitters on sampled substreams.

## 7. Universal Sketch Data Structure
- **Substream Generation:** Generate log(n) substreams using zero-one hash functions.
- **Heavy Hitter Algorithms:** Use L2 Heavy-Hitter algorithms to find significant items.

## 8. Mapping to P4
- **P4 Hash Functions:** Implement sampling.
- **P4 Registers:** Store sketch data.
- **Custom Libraries:** Support top-k and other operations.

## 9. Implementation Summary
- **App-Specific Computation:** Perform application-specific computations.
- **Sampling and Sketching:** Use P4 registers and hash functions.
- **Top-K Stage:** Handle hardware complexity and storage/communication overhead.

## 10. Network-Wide Problem
- **Trivial Solution:** Place D*N sketches.
- **Goal:** Place s sketches where s << D*N.
- **One-Big-Switch Abstraction:** Simplify network-wide coordination.

## 11. Evaluation
- **Traces:** CAIDA backbone traces.
- **Memory Setup:** 600KB‚Äî5MB.
- **Metrics:** Heavy Hitters, Change, DDoS, etc.
- **Comparison:** Custom algorithms from OpenSketch.

## 12. Results
- **Per-Application Performance:** UnivMon is competitive with custom algorithms, with a maximum error gap < 3.6%.
- **Larger Portfolio:** UnivMon shows clear advantages when handling multiple applications.
- **Memory Needs:** Memory requirements increase logarithmically, supporting larger windows.

## 13. Conclusions
- **Many Metrics Needed:** Network management requires various metrics.
- **Traditional Trade-offs:** Generality XOR Fidelity.
- **New Opportunity:** Universal Sketches offer Generality AND Fidelity AND Late Binding.
- **Practicality:** UnivMon is practical, realizable in P4, and comparable or better than custom solutions.
- **Future Directions:** Theoretical improvements, native multidimensional support, and more.

## 14. Network-Wide Coordination
- **Evaluation:** 600KB per sketch.
- **Methods:** Ingress, Greedy-D.&C., Q.&S., and UnivMon.
- **Results:** UnivMon outperforms other methods in terms of memory efficiency and accuracy.

---

This revised version provides a clearer and more professional structure, making the content easier to follow and understand.