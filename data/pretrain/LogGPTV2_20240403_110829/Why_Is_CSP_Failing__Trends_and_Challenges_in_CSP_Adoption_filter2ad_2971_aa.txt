# Why Is CSP Failing? Trends and Challenges in CSP Adoption

## Authors
Michael Weissbacher, Tobias Lauinger, and William K. Robertson  
Northeastern University, Boston, USA  
{mw, toby, wkr}@ccs.neu.edu

## Abstract
Content Security Policy (CSP) is a robust browser security mechanism designed to mitigate content injection attacks such as Cross-Site Scripting (XSS). When configured correctly, CSP makes it extremely difficult for attackers to inject malicious code or exfiltrate data. Despite its potential benefits and widespread implementation in major browsers, CSP adoption remains minimalâ€”our measurements indicate that only 1% of the Alexa Top 100 websites deploy CSP in enforcement mode.

In this paper, we present the results of a long-term study aimed at identifying the challenges that hinder CSP adoption. We conducted weekly crawls of the Alexa Top 1M to measure the adoption of web security headers and found that CSP lags significantly behind other security headers. Additionally, the policies in use are often ineffective in preventing content injection. We also evaluated the feasibility of deploying CSP from the perspective of a security-conscious website operator. Using an incremental deployment approach through CSP's report-only mode on four websites, we collected over 10 million reports. Furthermore, we used semi-automated policy generation through web application crawling on a set of popular websites. Our findings indicate that automated methods are insufficient and that significant barriers exist to producing accurate results.

Based on our observations, we suggest several improvements to CSP that could facilitate its adoption by the web community.

**Keywords:** Content Security Policy, Cross-Site Scripting, Web Security

## 1. Introduction
The rapid evolution of the web as a platform for application development and distribution has outpaced efforts to secure it, leading to a plethora of security issues. Among these, content injection attacks, particularly XSS, are among the most serious. XSS allows attackers to execute malicious code that appears to originate from trusted sources, subvert document structures, exfiltrate sensitive user information, and perform unauthorized actions on behalf of victims. Various client- and server-side defenses have been proposed, including language-based auto-sanitization, sandboxing, and whitelisting.

Content Security Policy (CSP) is a promising browser-based security framework that refines the same-origin policy (SOP), the foundation of traditional web security. CSP enables developers or administrators to explicitly define, using a declarative policy language, the origins from which different types of content can be included in a document. These policies are sent by the server in a special security header, and a CSP-supporting browser enforces them on the client. CSP provides a principled and robust mechanism to prevent the inclusion of malicious content in security-sensitive web applications. However, despite its promise and implementation in almost all major browsers, CSP is not widely used. According to our measurements, it is deployed in enforcement mode by only 1% of the Alexa Top 100 websites.

In this paper, we present the results of a long-term study to determine the reasons for this low adoption rate. We repeatedly crawled the Alexa Top 1M to measure the adoption of web security headers and found that CSP significantly lags behind other, more narrowly-focused headers. For the small fraction of sites that have adopted CSP, it is often deployed in a manner that does not fully leverage its defensive capabilities.

Additionally, we quantified the feasibility of incrementally deploying CSP using its report-only mode on four websites. Although this is a commonly recommended practice, we identified significant barriers, including interactions with browser extensions and the evolving structure of web applications over time.

We also evaluated the feasibility of automatically generating CSP rules for web applications. Our findings indicate that while black-box rule generation is possible for well-structured and stable websites, it is significantly more challenging for complex sites that incorporate third-party advertising libraries.

To summarize, the contributions of this paper are:
- The first long-term analysis of CSP adoption, involving repeated crawls of the Alexa Top 1M over a 16-month period.
- An investigation into the challenges of adopting CSP and why it is not fully utilized even when deployed.
- An evaluation of the feasibility of both report-only incremental deployment and crawler-based rule generation, highlighting fundamental problems with each approach.
- Suggestions for enhancing CSP to ease its adoption.
- The release of an open-source CSP parsing and manipulation library.

## 2. Content Security Policy

### 2.1 Overview of CSP
CSP is a specification for defining policies that control where content can be loaded from, providing developers with the power to refine the default SOP. Developers or administrators configure web servers to include `Content-Security-Policy` headers in HTTP responses. CSP-enabled browsers then enforce these policies on the client side.

A content security policy consists of a set of directives, each corresponding to a specific type of resource and specifying the allowed origins for that resource type. Table 1 lists the directive types supported in the current W3C standard CSP 1.0. Source expressions can include optional scheme and port, and support wildcards (`*`) for subdomains and ports. Special keywords like `self` (the origin of the resource) and `none` (an empty resource list) are also supported. The `script-src` and `style-src` directives support `unsafe-inline` (allowing inline scripts and CSS) and `unsafe-eval` (allowing JavaScript string evaluation methods like `eval()` and `setTimeout()`).

CSP operates in two modes: enforcement and report-only. In enforcement mode, browsers block resources that violate the policy. In report-only mode, violations are reported but not enforced. The `report-uri` directive can be used to send violation reports to a specified URI, aiding in policy learning and monitoring.

CSP is supported by most major browsers, though Internet Explorer only partially supports it.

### 2.2 Deploying CSP
To prevent XSS attacks, disallowing inline scripts and `eval` is crucial. Inline scripts should be moved to external files, and `eval` should be replaced with safer alternatives like `JSON.parse()`. JavaScript should be hosted on a domain that serves only static files, and external scripts should be moved to a server controlled by the website owner. The number of whitelisted sources should be minimized to increase the difficulty of data exfiltration.

### 2.3 Attacks Outside the Scope of CSP
CSP primarily prevents content injection attacks and, in draft version 1.1, subsumes mechanisms like the `X-XSS-Protection` header. However, it does not address other web attacks like Cross-Site Request Forgery (CSRF). CSP controls which content can be loaded but not the order of inclusion, making it vulnerable to out-of-order inclusion attacks, such as those using JSONP.

## 3. HTTP Security Headers

### 3.1 Methodology
To understand the landscape of security headers, we performed weekly crawls of the Alexa Top 1M starting in December 2012. We connected to `http://x`, `https://x`, `http://www.x`, and `https://www.x` for each site and counted a header as used if any of the four responses included it. Our crawler only visited the front page, so sites using CSP on subdomains or other areas were not detected. We used a Firefox user agent string, updating version information over time.

### 3.2 Adoption of HTTP Security Headers
We compared the adoption of CSP to other security headers in the Alexa Top 1M and a snapshot from March 2014. Table 2 shows the number of websites with security-related HTTP response headers, grouped by intervals of site popularity. Less popular websites use CSP less frequently. For example, only 2% of the top 100 sites used CSP, while only 0.00086% of the least popular 900,000 sites did. In contrast, CORS usage was more evenly distributed across all brackets.

During our crawls, we noticed that Google occasionally enabled CSP headers. An additional test of 1,000 requests to google.com showed that only 0.8% of responses included CSP headers. None of Google's 18 sites in the top 100 issued CSP headers in our crawl.

Figure 1 tracks the evolution of security-related headers in the Alexa Top 10K from March 2014 back to December 2012. P3P was particularly popular, but many policies served were invalid. CSP is gaining traction slowly, with fluctuations mainly due to Google.

### 3.3 Detailed Analysis of CSP Headers
We analyzed how websites use CSP, whether they use the reporting feature, and the effectiveness of their policies. For the Top 10K hosts, we identified 140 sites that had sent CSP rules at some point during our study, with 110 belonging to Google (79%).

## Conclusion
Our study highlights the challenges in CSP adoption and suggests several improvements to facilitate its broader use. We provide insights into the current state of CSP deployment and offer recommendations for enhancing its effectiveness and ease of adoption.

**Table 1. Directive Types in CSP 1.0**

| Directive         | Content Sources                      |
|------------------|--------------------------------------|
| `default-src`     | All types, if not otherwise specified |
| `script-src`      | JavaScript, XSLT                     |
| `object-src`      | Plugins, such as Flash players       |
| `style-src`       | Styles, such as CSS                  |
| `img-src`         | Images                               |
| `media-src`       | Video and audio (HTML5)              |
| `frame-src`       | Pages displayed inside frames        |
| `font-src`        | Font files                           |
| `connect-src`     | Targets of XMLHttpRequest, WebSockets|

**Figure 1. Evolution of Security-Related Headers in the Alexa Top 10K (December 2012 - March 2014)**

**Table 2. Number of Websites with Security-Related HTTP Response Headers (Alexa Top 1M)**

| Header / Alexa Rank | [1-102] | (102-103] | (103-104] | (104-105] | (105-106] |
|---------------------|---------|-----------|-----------|-----------|-----------|
| P3P                 | 43,045  | 269       | 77        | 26        | 6,315     |
| DNS Prefetch Control| 42,150  | 172       | 27        | 10        | 40        |
| XSS Protection      | 21,746  | 581       | 165       | 43        | 2,336     |
| Content Type Options| 2,475   | 83        | 16        | 5         | 1,995     |
| Frame Options       | 7,149   | 217       | 26        | 1         | 2,747     |
| HSTS                | 775     | 15        | 2         | 0         | 476       |
| CORS                | 849     | 176       | 10        | 0         | 1,228     |
| CSP                 | 3       | 0         | 0         | 0         | 57        |
| Any security header | 79,600  | 461       | 0         | 0         | 79,600    |

**Acknowledgments**
We thank the reviewers and the research community for their valuable feedback and support.

**References**
1. A. Stavrou et al. (Eds.): RAID 2014, LNCS 8688, pp. 212â€“233, 2014.
2. IETF, W3C, and browser specifications.
3. Open-source CSP parsing and manipulation library: https://github.com/tlauinger/csp-utils