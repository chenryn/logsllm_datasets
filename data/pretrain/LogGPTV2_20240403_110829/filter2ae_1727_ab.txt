函数为即将被显示的菜单对象创建关联的类名称为 `#32768`(`MENUCLASS`) 的菜单层叠窗口对象。类型为 `MENUCLASS`
的窗口对象通常用 `tagMENUWND` 结构体表示，这类窗口对象在紧随基础的 `tagWND` 对象其后的位置存在 1
个指针长度的扩展区域，用来存储指向关联的 `tagPOPUPMENU` 对象指针。
    pwndHierarchy = xxxCreateWindowEx(
        0x181,
        0x8000, // MENUCLASS
        0x8000, // MENUCLASS
        0,
        0x80800000,
        xLeft,
        yTop,
        100,
        100,
        (pMenu->fFlags & 0x40000000) != 0 ? pwndOwner : 0, // MNS_MODELESS
        0,
        pwndOwner->hModule,
        0,
        0x601u,
        0);
_函数 xxxTrackPopupMenuEx 创建 MENUCLASS 窗口对象_
在函数 `xxxCreateWindowEx` 中分配窗口对象后，函数向该对象发送 `WM_NCCREATE`
等事件消息，并调用窗口对象指定的消息处理程序。类型为 `MENUCLASS` 的窗口对象指定的的消息处理程序是 `xxxMenuWindowProc`
内核函数。处理 `WM_NCCREATE` 消息时，函数创建并初始化与窗口对象关联的弹出菜单信息结构体 `tagPOPUPMENU` 对象，将菜单窗口
`tagMENUWND` 对象指针放入 `tagPOPUPMENU->spwndPopupMenu` 成员域中，并将弹出菜单 `tagPOPUPMENU`
对象指针放入关联窗口 `tagMENUWND` 对象末尾的指针长度的扩展区域中。
_结构体 tagMENUWND 和 tagPOPUPMENU 对象的对应关系_
在通过函数 `xxxSendMessageTimeout` 向窗口对象发送 `WM_NCCREATE`
等事件消息时，系统在调用对象指定的消息处理程序之前，还会调用 `xxxCallHook` 函数用来调用先前由用户进程设定的 `WH_CALLWNDPROC`
类型的挂钩处理程序。设置这种类型的挂钩会在每次线程将消息发送给窗口对象之前调用。
    if ( (LOBYTE(gptiCurrent->fsHooks) | LOBYTE(gptiCurrent->pDeskInfo->fsHooks)) & 0x20 )
    {
      v22 = pwnd->head.h;
      v20 = wParam;
      v19 = lParam;
      v21 = message;
      v23 = 0;
      xxxCallHook(0, 0, &v19, 4); // WH_CALLWNDPROC
    }
_函数 xxxSendMessageTimeout 调用 xxxCallHook 函数_
接下来函数 `xxxTrackPopupMenuEx` 调用 `xxxMNAllocMenuState`
来初始化菜单状态结构体的各个成员域，并将前面创建的弹出菜单 `tagPOPUPMENU` 对象作为当前的根弹出菜单对象，其指针被放置在菜单状态结构体的成员域
`pGlobalPopupMenu` 中。
    menuState = xxxMNAllocMenuState(ptiCurrent, ptiNotify, popupMenu);
_函数 xxxTrackPopupMenuEx 初始化菜单状态结构体_
接下来函数调用 `xxxSetWindowPos` 函数以设置目标菜单层叠窗口在屏幕中的位置并将其显示在屏幕中。在函数 `xxxSetWindowPos`
执行期间，相关窗口位置和状态已完成改变之后，系统在函数 `xxxEndDeferWindowPosEx` 中调用 `xxxSendChangedMsgs`
以发送窗口位置已改变的消息。
      xxxSetWindowPos(
        pwndHierarchy,
        (((*((_WORD *)menuState + 2) >> 8) & 1) != 0) - 1,
        xLParam,
        yLParam,
        0,
        0,
        ~(0x10 * (*((_WORD *)menuState + 2) >> 8)) & 0x10 | 0x241);
_函数 xxxTrackPopupMenuEx 显示根菜单窗口对象_
在函数 `xxxSendChangedMsgs` 中，系统根据设置的 `SWP_SHOWWINDOW`
状态标志，为当前的目标菜单层叠窗口对象创建并添加关联的阴影窗口对象。两个窗口对象的关联关系在函数 `xxxAddShadow` 中被添加到
`gpshadowFirst` 阴影窗口关联表中。
从函数 `xxxSetWindowPos` 中返回后，函数 `xxxTrackPopupMenuEx` 调用 `xxxWindowEvent`
函数以发送代表“菜单弹出开始”的 `EVENT_SYSTEM_MENUPOPUPSTART` 事件通知。
    xxxWindowEvent(6u, pwndHierarchy, 0xFFFFFFFC, 0, 0);
_函数 xxxTrackPopupMenuEx 发送菜单弹出开始的事件通知_
如果先前在用户进程中设置了包含这种类型事件通知范围的窗口事件通知处理函数，那么系统将在线程消息循环处理期间分发调用这些通知处理函数。
接下来菜单对象类型为模态的情况下线程将会进入菜单消息循环等待状态，而非模态的情况将会返回。
一图以蔽之：
_函数 xxxTrackPopupMenuEx 的简略执行流_
* * *
**bServerSideWindowProc**
窗口结构体 `tagWND` 对象的成员标志位 `bServerSideWindowProc`
是一个特殊标志位，该标志位决定所属窗口对象的消息处理函数属于服务端还是客户端。当函数 `xxxSendMessageTimeout`
即将调用目标窗口对象的消息处理函数以分发消息时，会判断该标志位是否置位。
      if ( *((_BYTE *)&pwnd->1 + 2) & 4 ) // bServerSideWindowProc
      {
        IoGetStackLimits(&uTimeout, &fuFlags);
        if ( &fuFlags - uTimeout lpfnWndProc(pwnd, message, wParam, lParam);
        if ( !lpdwResult )
          return lRet;
        *(_DWORD *)lpdwResult = lRet;
      }
      else
      {
        xxxSendMessageToClient(pwnd, message, wParam, lParam, 0, 0, &fuFlags);
        [...]
      }
_函数 xxxSendMessageTimeout 执行窗口对象消息处理函数的逻辑_
如果该标志位置位，则函数将直接使当前线程在内核上下文调用目标窗口对象的消息处理函数；否则，函数通过调用函数 `xxxSendMessageToClient`
将消息发送到客户端进行处理，目标窗口对象的消息处理函数将始终在用户上下文调用和执行。
诸如菜单层叠窗口对象之类的特殊窗口对象拥有专门的内核模式消息处理函数，因此这些窗口对象的成员标志位 `bServerSideWindowProc`
在对象创建时就被置位。而普通窗口对象由于只指向默认消息处理函数或用户进程自定义的消息处理函数，因此该标志位往往不被置位。
如果能够通过某种方式将未置位标志位 `bServerSideWindowProc`
的窗口对象的该标志位置位，那么该窗口对象指向的消息处理函数也将直接在内核上下文中执行。
* * *
**阴影窗口**
在 Windows XP 及更高系统的 `win32k` 内核模块中，系统为所有带有 `CS_DROPSHADOW` 标志的窗口对象创建并关联对应的类名称为
`SysShadow` 的阴影窗口对象，用来渲染原窗口的阴影效果。内核中存在全局表 `win32k!gpshadowFirst`
用以记录所有阴影窗口对象与原窗口对象的关联关系。函数 `xxxAddShadow` 用来为指定的窗口创建阴影窗口对象，并将对应关系写入
`gpshadowFirst` 全局表中。
全局表 `gpshadowFirst` 以链表的形式保存阴影窗口的对应关系。链表的每个节点存储 3
个指针长度的成员域，分别存储原窗口和阴影窗口的对象指针，以及下一个链表节点的指针。每个新添加的关系节点将始终位于链表的首个节点位置，其地址被保存在
`gpshadowFirst` 全局变量中。
_全局变量 gpshadowFirst 指向阴影窗口关联链表_
相应地，当阴影窗口不再需要时，系统调用 `xxxRemoveShadow`
来将指定窗口的阴影窗口关联关系移除并销毁该阴影窗口对象，函数根据通过参数传入的原窗口对象的指针在链表中查找第一个匹配的链表节点，从链表中取出节点并释放节点内存缓冲区、销毁阴影窗口对象。
* * *
**子菜单**
如果当前在屏幕中显示的菜单中存在子菜单项，那么当用户通过鼠标按键点击等方式选择子菜单项时，系统向子菜单项所属的菜单窗口对象发送
`WM_LBUTTONDOWN` 鼠标左键按下的消息。如果菜单为非模态（`MODELESS`）类型，内核函数 `xxxMenuWindowProc`
接收该消息并传递给 `xxxCallHandleMenuMessages` 函数。
函数 `xxxCallHandleMenuMessages` 负责像模态弹出菜单的消息循环那样处理非模态弹出菜单对象的消息。在函数中，系统根据通过参数
`lParam` 传入的相对坐标和当前窗口在屏幕上的坐标来计算鼠标点击的实际坐标，并向下调用 `xxxHandleMenuMessages` 函数。
函数将计算的实际坐标点传入 `xxxMNFindWindowFromPoint`
函数查找坐标点坐落的在屏幕中显示的窗口，并将查找到的窗口对象指针写入菜单状态结构体的成员域 `uButtonDownHitArea`
中。当该值确实是窗口对象时，函数向该窗口对象发送 `MN_BUTTONDOWN` 鼠标按下的消息。
接着执行流又进入函数 `xxxMenuWindowProc` 并调用函数 `xxxMNButtonDown` 以处理 `MN_BUTTONDOWN` 消息。
    case 0x1EDu:
      if ( wParam cItems || wParam >= 0xFFFFFFFC )
        xxxMNButtonDown(popupMenu, menuState, wParam, 1);
      return 0;
_函数 xxxMenuWindowProc 调用 xxxMNButtonDown 函数_
函数 `xxxMNButtonDown` 调用 `xxxMNSelectItem` 函数以根据鼠标按下区域选择菜单项并存储在当前弹出菜单对象的成员域
`posSelectedItem` 中，随后调用函数 `xxxMNOpenHierarchy` 以打开新弹出的层叠菜单。
在函数 `xxxMNOpenHierarchy` 执行期间，系统调用函数 `xxxCreateWindowEx` 创建新的类名称为 `MENUCLASS`
的子菜单层叠窗口对象，并将新创建的子菜单窗口对象关联的弹出菜单结构体 `tagPOPUPMENU` 对象插入弹出菜单对象延迟释放链表中。
函数将新分配的子菜单窗口对象指针写入当前菜单窗口对象关联的弹出菜单信息结构体 `tagPOPUPMENU` 对象的成员域 `spwndNextPopup`
中，并将当前菜单窗口对象指针写入新分配的菜单窗口对象关联的 `tagPOPUPMENU` 对象的成员域 `spwndPrevPopup`
中，使新创建的弹出菜单对象成为当前菜单对象的子菜单。
_新创建的子菜单窗口和原菜单窗口 tagMENUWND 对象的对应关系_
函数将当前菜单窗口对象的弹出菜单信息结构体 `tagPOPUPMENU` 对象的标志成员域 `fHierarchyDropped`
标志置位，这个标志位表示当前菜单对象已弹出子菜单。
接下来函数调用 `xxxSetWindowPos` 以设置新的菜单层叠窗口在屏幕中的位置并将其显示在屏幕中，并调用函数 `xxxWindowEvent`
发送 `EVENT_SYSTEM_MENUPOPUPSTART` 事件通知。新菜单窗口对象对应的阴影窗口会在这次调用 `xxxSetWindowPos`
期间创建并与菜单窗口对象关联。
简要执行流如下：
_点击子菜单项以弹出子菜单时的简要执行流_
* * *
**终止菜单**
在用户进程中可以通过多种接口途径触达 `xxxMNEndMenuState` 函数调用，例如向目标菜单的窗口对象发送 `MN_ENDMENU` 消息，或调用
`NtUserMNDragLeave` 系统服务等。
当某调用者向目标菜单窗口对象发送 `MN_ENDMENU` 消息时，系统在菜单窗口消息处理函数 `xxxMenuWindowProc` 中调用函数
`xxxEndMenuLoop` 并传入当前线程关联的菜单状态结构体对象和其成员域 `pGlobalPopupMenu`
指向的根弹出菜单对象指针作为参数以确保完整的菜单对象被终止或取消。如果菜单对象是非模态类型的，那么函数接下来在当前上下文调用函数
`xxxMNEndMenuState` 清理菜单状态信息并释放相关对象。
      menuState = pwnd->head.pti->pMenuState;
      [...]
    LABEL_227: // EndMenu
      xxxEndMenuLoop(menuState, menuState->pGlobalPopupMenu);
      if ( menuState->flags & 0x100 )
        xxxMNEndMenuState(1);
      return 0;
_函数 xxxMenuWindowProc 处理 MN_ENDMENU 消息_
函数 `xxxEndMenuLoop` 执行期间，系统调用 `xxxMNDismiss` 并最终调用到 `xxxMNCancel`
函数来执行菜单取消的操作。
    int __stdcall xxxMNDismiss(tagMENUSTATE *menuState)
    {
      return xxxMNCancel(menuState, 0, 0, 0);
    }
_函数 xxxMNDismiss 调用 xxxMNCancel 函数_
函数 `xxxMNCancel` 调用 `xxxMNCloseHierarchy` 函数来关闭当前菜单对象的菜单层叠状态。
    popupMenu = pMenuState->pGlobalPopupMenu;
    [...]
    xxxMNCloseHierarchy(popupMenu, pMenuState);
_函数 xxxMNCancel 调用 xxxMNCloseHierarchy 函数_
函数 `xxxMNCloseHierarchy` 判断当前通过参数传入的弹出菜单 `tagPOPUPMENU` 对象成员域