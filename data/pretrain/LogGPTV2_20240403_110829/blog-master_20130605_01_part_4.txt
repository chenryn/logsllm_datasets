Type "help" for help.  
postgres=# select * from test where id=1;  
 id |               info                 
----+----------------------------------  
  1 | 12f5cc73549166aef1034909ce465969  
(1 row)  
postgres=# \q  
pg92@db-172-16-3-39-> psql -U postgres postgres -p 11919  
psql (9.2beta1)  
Type "help" for help.  
postgres=# select * from test where id=1;  
 id |               info                 
----+----------------------------------  
  1 | 12f5cc73549166aef1034909ce465969  
(1 row)  
```  
执行1次监控后, info值被更新  
```  
pg92@db-172-16-3-39-> psql -U postgres postgres -p 1919  
psql (9.2beta1)  
Type "help" for help.  
postgres=# select * from test where id=1;  
 id | info   
----+------  
  1 | b  
(1 row)  
postgres=# \q  
pg92@db-172-16-3-39-> psql -U postgres postgres -p 11919  
psql (9.2beta1)  
Type "help" for help.  
postgres=# select * from test where id=1;  
 id | info   
----+------  
  1 | b  
(1 row)  
```  
6\.4\.23 比较2个数据库的schema是否一致, 不比较数据, 只比较结构.  
例1 :   
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -u postgres --db postgres --action=same_schema -H 127.0.0.1 -p 11919 -u postgres --db postgres  
POSTGRES_SAME_SCHEMA OK: DB "postgres" (host:127.0.0.1) (ports:1919,11919) All databases have identical items | time=0.76s   
```  
例2 :   
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -u postgres --db postgres --action=same_schema -H 127.0.0.1 -p 11919 -u postgres --db digoal  
POSTGRES_SAME_SCHEMA CRITICAL: (databases:postgres,digoal) (host:127.0.0.1) (ports:1919,11919) Databases were different. Items not matched: 5 | time=0.71s   
DB 1: dbservice= port=1919 host=127.0.0.1 dbname=postgres user=postgres   
DB 1: PG version: 9.2beta1  
DB 1: Total objects: 33  
DB 2: dbservice= port=11919 host=127.0.0.1 dbname=digoal user=postgres   
DB 2: PG version: 9.2beta1  
DB 2: Total objects: 26  
Function "public.pg_freespace(regclass)" does not exist on all databases:  
  Exists on:  1  
  Missing on: 2  
Function "public.pg_freespace(regclass,bigint)" does not exist on all databases:  
  Exists on:  1  
  Missing on: 2  
Table "public.test" does not exist on all databases:  
  Exists on:  1  
  Missing on: 2  
Index "public.test_pkey" does not exist on all databases:  
  Exists on:  1  
  Missing on: 2  
Constraint "public.test_pkey" does not exist on all databases:  
  Exists on:  1  
  Missing on: 2  
```  
这个除了用于监控, 还可以用于数据迁移工作后的结构比对. 用法详见check_postgres手册.  
6\.4\.24 序列使用率监控, 用于监控序列值使用的百分比. 注意不管是否使用cycle, 只计较minvalue和increment by  
```  
SELECT last_value, slots, used, ROUND(used/slots*100) AS percent,  
  CASE WHEN slots  /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -u postgres --db postgres --action=sequence -w 90%  
POSTGRES_SEQUENCE OK: DB "postgres" (host:127.0.0.1) (port=1919) public.seq=9% (calls left=10) | time=0.01s public.seq=9%;90%;%   
```  
使用率超过1%则告警.  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -u postgres --db postgres --action=sequence -w 1%  
POSTGRES_SEQUENCE WARNING: DB "postgres" (host:127.0.0.1) (port=1919) public.seq=9% (calls left=10) | time=0.01s public.seq=9%;1%;%   
```  
多个数据库不能使用--db dbname1,dbname2指定.  
需要写成多条check_postgres监控命令.  
6\.4\.25 监控数据库的参数是否被改变.   
首先要生成当前的md5  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -u postgres --db postgres --action=settings_checksum -c 0  
POSTGRES_SETTINGS_CHECKSUM UNKNOWN: DB "postgres" (host:127.0.0.1) (port=1919) checksum: e70f4e6dc87fd4072c86fc2a3b2c25a8 | time=0.01s   
```  
然后根据这个md5进行监控  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -u postgres --db postgres --action=settings_checksum -c e70f4e6dc87fd4072c86fc2a3b2c25a8  
POSTGRES_SETTINGS_CHECKSUM OK: DB "postgres" (host:127.0.0.1) (port=1919) checksum: e70f4e6dc87fd4072c86fc2a3b2c25a8 | time=0.01s   
```  
注意这个监控需要指定数据库和用户.  因为可以为用户和数据库单独设置参数值.  
不同的用户和数据库得到的md5值可能不一样.  
6\.4\.26 监控远程数据库与本地服务器的时间差  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -u postgres --db postgres,digoal --action=timesync -w 1 -c 3  
POSTGRES_TIMESYNC OK: DB "digoal" (host:127.0.0.1) (port=1919) timediff=0 DB=2013-06-05 13:20:24 Local=2013-06-05 13:20:24 DB "postgres" (host:127.0.0.1) (port=1919) timediff=0 DB=2013-06-05 13:20:24 Local=2013-06-05 13:20:24 | time=0.01s diff=0s;1;3 time=0.01s diff=0s;1;3   
```  
把IP 替换成远程数据库的IP.  
6\.4\.27 监控空闲事务, 根据数量以及可选时长进行告警.  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -u postgres --db postgres,digoal --action=txn_idle -w "1 for 10s" -c "2 for 10s"  
POSTGRES_TXN_IDLE OK: DB "postgres" (host:127.0.0.1) (port=1919) no idle in transaction | time=0.01s transaction_time=0;1;10   
```  
超过1个idle in transaction状态的事务告警.  
超过2个idle in transaction, 并且最长的idle已经持续10秒以上则告警.  
-w 和-c最好使用一种风格, 否则会有一个无效. 例如 -w 1 -c "2 for 10s" 不要这么使用.  
6\.4\.28 监控事务的执行时间, 超过则告警.  
```  
postgres=# begin;  
BEGIN  
postgres=# alter database postgres set work_mem='10MB';  
ALTER DATABASE  
```  
不关闭事务. 然后执行监控如下  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -u postgres --db postgres,digoal --action=txn_time -w 1s -c 2s  
POSTGRES_TXN_TIME CRITICAL: DB "postgres" (host:127.0.0.1) (port=1919) longest txn: 44s PID:4752 database:postgres username:postgres | time=0.01s transaction_time=44s;1;2   
```  
6\.4\.29 监控数据库年龄, 或者理解为数据库中最老的数据库记录的版本号的年龄.  
一般是防止wrapping自动触发的.  
类似check_postgres freeze的监控, 只是这里用的不是百分比,  而是事务数.  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -u postgres --db postgres,digoal --action=txn_wraparound -w 1  
POSTGRES_TXN_WRAPAROUND WARNING: DB "digoal" (host:127.0.0.1) (port=1919) digoal: 43758651 DB "postgres" (host:127.0.0.1) (port=1919) digoal: 43758651 | time=0.01s digoal=43758651;1;;0;2000000000 digoal_01=43758651;1;;0;2000000000 digoal_02=43758651;1;;0;2000000000 postgres=43758651;1;;0;2000000000 template1=43758651;1;;0;2000000000 time=0.01s digoal=43758651;1;;0;2000000000 digoal_01=43758651;1;;0;2000000000 digoal_02=43758651;1;;0;2000000000 postgres=43758651;1;;0;2000000000 template1=43758651;1;;0;2000000000   
```  
6\.4\.30 监控xlog文件数量, 超出阈值则告警.   
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -u postgres --db postgres --action=wal_files -w 100  
POSTGRES_WAL_FILES WARNING: DB "digoal" (host:127.0.0.1) (port=1919) WAL files found: 146 DB "postgres" (host:127.0.0.1) (port=1919) WAL files found: 146 | time=0.08s files=146;100 time=0.02s files=146;100   
```  
超出可能是由于归档失败不断累积造成的.   
下一篇将介绍check_postgres在nagios监控平台中的配置.  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")