forcing them in Section 3.3.
3.1 Approach Overview
We advocate a design that is independent of any privilege
separation scheme enforced by the underlying browser.
In our design, HTML5 applications have one privileged
parent component, and can have an arbitrary number of
unprivileged children. Each child component is spawned
by the parent and it executes in its own temporary ori-
gin. These temporary origins are created on the ﬂy for
each execution and are destroyed after the child exits;
we detail how temporary origins can be implemented us-
ing modern web browsers primitives in Section 3.3. The
privileged parent executes in the main (permanent) origin
assigned to the HTML5 application, typically the web
origin for traditional web application. The same origin
policy isolates unprivileged children from one another
and from the privileged parent. Figure 2 shows our pro-
posed HTML5 application architecture. In our design,
applications can continue to be authored in existing web
languages like JavaScript, HTML and CSS. As a result,
Figure 2: High-level design of our proposed architecture.
our design maintains compatibility and facilitates adop-
tion.
Parent. Our design ensures the integrity of the privi-
leged parent by maintaining a set of key security invari-
ants that we deﬁne in Section 3.2. The parent guards ac-
cess to a powerful API provided by the underlying plat-
form, such as the Google Chrome extension API. For
making any privileged call or maintaining persistent data,
the unprivileged children communicate with the parent
over a thin, well-deﬁned messaging interface. The par-
ent component has three components:
• Bootstrap Code. When a user ﬁrst navigates to the
HTML5 application, a portion of the parent code
called the bootstrap code executes. Bootstrap code
is the unique entry point for the application. The
bootstrap code downloads the application source,
spawns the unprivileged children in separate tempo-
rary origins, and controls the lifetime of their exe-
cution. It also includes boilerplate code to initialize
the messaging interface in each child before child
code starts executing. Privileges in HTML5 appli-
cations are tied to origins; thus, a temporary origin
runs with no privileges. We explain temporary ori-
gins further in Section 3.3.
• Parent Shim. During their execution, unprivileged
children can make privileged calls to the parent.
The parent shim marshals and unmarshals these re-
quests to and from the children. The parent shim
also presents a usable interface to the policy code
component of the parent.
• Policy Code.
The policy code enforces an
application-speciﬁc policy on all messages received
4
Browser PageParentChild IframeChild IframeBootstrap CodeSHIMApplication CodeSHIMPolicy CodeApplication CodeSHIMfrom children. Policy code decides whether to allow
or disallow access to privileged APIs, such as access
to the user’s browsing history. This mechanism pro-
vides complete mediation on access to privileged
APIs and supports ﬁne-grained policies, similar to
system call monitors in commodity OSes like Sys-
Trace [16]. In addition, as part of the policy code,
applications can deﬁne additional restrictions on the
privileges of the children, such as disabling import
of additional code from the web.
Only the policy code is application-speciﬁc; the boot-
strap and parent shim are the same across all applica-
tions. To ease adoption, we have made the application-
independent components available online. The applica-
tion independent components need to be veriﬁed once
for correctness and can be reused for all application in
the future. For new applications using our design, only
the application’s policy code needs to be audited. In our
experimental evaluation, we ﬁnd that the parent code is
typically only a small fraction of the rest of the applica-
tion and our design invariants make it statically auditable.
Children. Our design moves all functional compo-
nents of the application to the children. Each child con-
sists of two key components:
• Application Code. Application code starts execut-
ing in the child after the bootstrap code initializes
the messaging interface. All the application logic,
including code to handle visual layout of the appli-
cation, executes in the unprivileged child; the parent
controls no visible area on the screen. This implies
that all dynamic HTML (and code) rendering op-
erations execute in the child. Children are allowed
to include libraries and code from the web and ex-
ecute them. Vulnerabilities like XSS or mixed con-
tent bugs (inclusion of HTTP scripts in HTTPS do-
mains) can arise in child code. In our threat model,
we assume that children may be compromised dur-
ing the application’s execution.
• Child Shim. The parent includes application inde-
pendent shim code into the child to seamlessly al-
low privileged calls to the parent. This is done to
keep compatibility with existing code and facilitate
porting applications to our design. Shim code in
the child deﬁnes wrapper functions for privileged
APIs (e.g., the Google Chrome extension API [27]).
The wrapper functions forward any privileged API
calls as messages to the parent. The parent shim un-
marshals these messages, checks the integrity of the
message and executes the privileged call if allowed
by the policy. The return value of the privileged
API call is marshaled into messages by the parent
shim and returned to the child shim. The child shim
5
unmarshals the result and returns it to the original
caller function in the child. Certain privileged API
functions take callbacks or structured data objects;
in Section 4.1 we outline how our mechanism prox-
ies these transparently. Together, the parent and
child shim hide the existence of the privilege bound-
ary from the application code.
3.2 Security Invariants
Our security invariants ensure the integrity and correct-
ness of code running in the parent with full privileges.
We do not restrict code running in the child; our threat
model assumes that unprivileged children can be com-
promised any time during their execution. We enforce
four security invariants on the parent code:
1. The parent cannot convert any string to code.
2. The parent cannot include external code from the
web.
3. The parent code is the only entry point into the priv-
ileged origin.
4. Only primitive types (speciﬁcally, strings) cross the
privilege boundary.
The ﬁrst two invariants help increase assurance in the
parent code. Together, they disable dynamic code exe-
cution and import of code from the web, which elimi-
nates the possibility of XSS and mixed content vulner-
abilities in parent code. Furthermore, it makes parent
code statically auditable and veriﬁable. Several analysis
techniques can verify JavaScript when dynamic code ex-
ecution constructs like eval and setTimeout have been
syntactically eliminated [9–11, 28, 29].
Invariant 3 ensures that only the trusted parent code
executes in the privileged origin; no other application
code should execute in the permanent origin. The naive
approach of storing the unprivileged (child) code as a
HTML ﬁle on the server suffers from a subtle but seri-
ous vulnerability. An attacker can directly navigate to
the unprivileged code. Since it is served from the same
origin as the parent, it will execute with full privileges
of the parent without going through the parent’s boot-
strap mechanism. To prevent such escalation, invariant
3 ensures that all entry points into the application are
directed only through the bootstrap code in the parent.
Similarly, no callbacks to unprivileged code are passed
to the privileged API—they are proxied by parent func-
tions to maintain Invariant 3. We detail how we enforce
this invariant in Section 3.3.
Privilege separation, in and of itself, is insufﬁcient to
improve security. A problem in privilege-separated C ap-
plications is the exchange of pointers across the privi-
lege boundary, leading to possible errors [30, 31]. While
JavaScript does not have C-style pointers, it has ﬁrst-
class functions. Exchanging functions and objects across
the privilege boundary can introduce security vulnerabil-
ities. Invariant 4 eliminates such attacks by requiring that
only primitive strings are exchanged across the privilege
boundary.
3.3 Mechanisms
We detail how we implement the design and enforce the
above invariants in this section. Whenever possible, we
rely on browser’s mechanisms to declaratively enforce
the outlined invariants, thereby minimizing the need for
code audits.
Temporary Origins. To isolate components, we exe-
cute unprivileged children in separate iframes sourced
from temporary origins. A temporary origin can be cre-
ated by assigning a fresh, globally unique identiﬁer that
the browser guarantees will never be used again [32].
A temporary origin does not have any privileges, or in
other words, it executes with null authority. The globally
unique nature means that the browser isolates every tem-
porary origin from another temporary origin, as well as
the parent. The temporary origin only lasts as long as the
lifetime of the associated iframe.
Several mechanisms for implementing temporary ori-
gins are available in today’s browsers, but these are rarely
found in use on the web. In the HTML5 standard, iframes
with the sandbox directive run in a temporary origin.
This primitive is standardized and already supported in
shipping versions of Google Chrome/ChromeOS, Safari,
Internet Explorer/Windows 8, and a patch for Mozilla
Firefox is in the ﬁnal stages of review [33].
Enforcement of Security Invariants. To enforce se-
curity invariants 1 and 2 in the parent, our implemen-
tation utilizes the Content Security Policy (CSP) [34].
CSP is a new speciﬁcation, already supported in Google
Chrome and Firefox, that deﬁnes browser-enforced re-
strictions on the resources and execution of application
code.
In our case studies, it sufﬁces to use the CSP
policy directive default-src ’none’; script-src
’self’—this disables all constructs to convert strings
into code (Invariant 1) and restricts the source of all
scripts included in the page to the origin of the appli-
cation (Invariant 2). We ﬁnd that application-speciﬁc
code is typically small (5 KB) and easily auditable in our
case studies. On platforms on which CSP is not sup-
ported, we point out that disabling code evaluation con-
structs and external code import is possible by syntacti-
cally restricting the application language to a subset of
JavaScript [11, 28, 29].
We require that all non-parent code, when requested,
is sent back as a text ﬁle.
Browsers do not ex-
ecute text ﬁles—the code in the text ﬁles can only
execute if downloaded and executed by the parent,
via the bootstrap mechanism. This ensures Invariant
3.
In case of pure client-side platforms like Chrome,
this involves a simple ﬁle renaming from .html to
.txt.
In case of classic client-server web applica-
tions, this involves returning a Content-Type header of
text/plain. To disable mime-snifﬁng, we also set the
X-Content-Type-Options HTTP header to nosniff.
Messaging Interface. We utilize standard primitives
like XMLHttpRequest and the DOM API for download-
ing the application code and executing it in an iframe.
We rely on the postMessage API for communication
across the privilege boundary. postMessage is an asyn-
chronous, cross-domain, purely client-side messaging
mechanism. By design, postMessage only accepts
primitive strings. This ensures Invariant 4.
Policy. Privilege separation isolates the policy and the
application logic. Policies, in our design, are written in
JavaScript devoid of any dynamic evaluation constructs
and are separated from the rest of the complex applica-
tion logic. Permissions on existing browser platforms are
granted at install-time. In contrast, our design allows for
more expressive and ﬁne-grained policies like granting
and revoking privileges at run-time. For example, in the
case of ScreenCap, a child can get the ability to capture
a screenshot only once and only after the user clicks the
‘capture’ button. Such ﬁne-grained policies require the
policy engine to maintain state, reason about event or-
dering and have the ability to grant/revoke ﬁne-grained
privileges. Our attempt at expressive policies is along the
line of active research in this space [21], but in contrast
to existing proposals, it does not require developers to
specify policies in new high-level languages. Our focus
is on mechanisms to support expressive policies; deter-
mining what these policies should be for applications is
beyond the scope of this paper.
Additional Conﬁnement of Child Code. By default,
no restrictions are placed on the children beyond those
implied by use of temporary origins. Speciﬁcally, the
child does not inherit the parent’s CSP policy restric-
tions.
In certain scenarios, the application developer
may choose to enforce additional restrictions on the child
code, via an appropriate CSP policy on the child iframe
at the time of its creation by the parent code. For ex-
ample, in the case of ScreenCap, the screenshot compo-
nent can be run under the script-src ’self’. This
increases assurance by disabling inline scripts and code
included from the web, making XSS and mixed content
attacks impossible. The policy code can then grant the
powerful privilege of capturing a screenshot of a user’s
webpage to a high assurance screenshot component.
6
The parent proceeds to create a temporary origin,
unprivileged iframe using the downloaded code as the
source (Step 3, Figure 3). Listing 1 outlines the code
to create the unprivileged temporary origin. The parent
builds up the child’s HTML in the sb content variable.
The parent can optionally include content restrictions on
the child via a CSP policy, as explained in Section 3.3.
Creating multiple children is a simple repetition of the
step 3.
The parent also sources the child shim into the
child iframe.
The parent concatenates the child’s
code (HTML) and URI-encodes it all into a variable
called sb content. The parent creates an iframe with
sb content as the data: URI source, sets the sandbox
attribute and appends the iframe to the document. The
parent code also inserts a base HTML tag that enables
relative URIs to work seamlessly.
data: is a URI scheme that enables references to in-
line data as if it were an external reference. For example,
an iframe with src attribute set to data:text/html;Hi
is similar to an iframe pointing to an HTML page con-
taining only the text ‘Hi’. Recall our enforcement mech-
anism for Invariant 3: the application code is a text ﬁle.
The use of data: is necessary to convert text to code
that the iframe src can point to, without storing un-
privileged application code as HTML or JavaScript ﬁles.
4.1 API Shims
Recall that the child executes in a temporary origin, with-
out the privileges needed for making privileged calls like
chrome.tabs.captureVisibleTab. Privileged API
calls in the original child code would fail when it exe-
cutes in a temporary origin; our transformation should,
therefore, take additional steps to preserve the original
functionality of the application. In our design, we pro-
pose API shims to proxy calls to privileged API in the
child to the parent code safely and transparently.
The child shim deﬁnes wrapper objects in the child
that proxy a privileged call to the parent. The aim of the
parent and child shim is to make the privilege separa-
tion boundary transparent. We have implemented shims
for all the privileged API functions needed for our case
studies. This implementation of the parent shim is 5.46
KB and that of the child shim is 9.1 KB. Note that only
the parent shim is in the TCB.
First,
Figure 4 outlines the typical events involved in prox-
ying a privileged call.
the child shim de-
ﬁnes a stub implementation of the privileged APIs
(e.g., chrome.tabs.captureVisibleTab) that, when
called, forwards the call to the parent. On receiving the
message, the parent shim checks with the policy and if
the policy allows, the parent shim makes the call on be-
half of the child. On completion of the call, the parent
shim forwards the callback arguments (given by the run-


7
Figure 3: Sequence of events to run application in sandbox.
Note that only the bootstrap code is sent to the browser to exe-
cute. Application code is sent directly to the parent, which then