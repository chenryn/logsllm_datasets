pace that the server keeps each connection open for a significantly
longer time than usual. We configure our kernels to allow each
process to open 213 concurrent FDs (from an initial value of 210).
We configure the attack tool to open up to about 41K concurrent
connections to the webserver during 17mins. Standalone is able to
withstand the attack until the FDs limit is reached (in about 220
seconds). Then the connection success rate quickly drops to about
3 r/s, and the good requests experience a sharp increase in latency,
since the webserver threads are kept busy with processing HTTP
headers that are continuously sent from malicious clients. DeDoS,
on the other hand, is able to spawn 22 new Read MSUs on each
of the database server, increasing its global file descriptors pool,
and allowing it to sustain 100% successful connection rate. Due to
paging, naïve is unable to respond to a majority of the connections.
7.2.2 Additional attacks. In addition to the attacks discussed on
the web server, we discuss two more attacks and their mitigation
using DeDoS.
SYN flood attack: Our SYN flood experiment consists of a num-
ber of “good” (i.e., non-attack) clients accessing an echo server
built on top of PicoTCP. Each good client attempts 10 requests per
second, where each request establishes a TCP connection, sends
and receives 32 bytes of data, and then closes the connection. A
TCP connection is considered successful only if the handshake
completes within 60 seconds. The SYN flood is launched after one
minute of normal traffic, runs for three minutes, and then stops. We
use hping3 to launch SYN flood attacks and vary the intensity of
the flood. The experiment continues for an additional two minutes
(during which no attack occurs) to observe the recovery period.
Since under normal conditions, an application’s use of TCP is
tightly coupled to (i.e., inseparable from) the machine’s local net-
work stack, standalone PicoTCP is assigned a single process on a
single machine. We set the size of its connection buffer to 1MB,
corresponding to 26,214 pending connections. We note that this
limit is significantly larger than the 210 pending connection limit
offered by default on Linux.
In contrast, DeDoS can mitigate a SYN flood by cloning MSUs,
potentially on other hosts. Our DeDoS-enabled version of PicoTCP
consists of separate MSUs for performing the handshake and for
DeDoS: Defusing DoS with Dispersion Oriented Software
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Figure 4: Requests latency and success rate during TLS renegotiation, ReDOS, and SlowLoris attacks on the web server.
Figure 5: Handshake latency of good clients under a SYN flood (2000
SYNs/sec) with standalone PicoTCP (top) and DeDoS with 3 Hand-
shake MSUs (bottom). Vertical lines denote the start and end of the
SYN flood. The right y-axis plots the good clients’ average percent-
age of successful TCP handshakes.
transferring data. Each instance of a Handshake MSU is provided
with a 1MB connection buffer. We operate the PicoTCP MSU (the
non-handshake related portion of TCP) on a single machine that
also hosts the echo server. We use three other physical machines
in our cluster and spawn a maximum of three additional Hand-
shake MSUs per machine. To evaluate the efficacy of DeDoS, we
vary the number of Handshake MSUs (by manually overriding the
controller’s actions) and measure system performance.
We consider the success rate of TCP handshakes during the inter-
val between the first and last instances in which a TCP connection
failed, as observed by a good client. This reflects the steady state of
the attack and avoids the “ramp up” period in which the attack has
not yet become effective.
Our results show that DeDoS is able to provide superior ser-
vice throughout the attack. Figure 5 shows the connection latency
of good clients during a 2000 SYN/second attack. On the second
y-axis, we show the average percentage of successful TCP hand-
shakes (“success percentage”) computed over a two-second interval.
PicoTCP (top graph) fails to service good requests as soon as the
attack starts—the percentage of successful TCP handshakes almost
immediately drops to below 10%. The few connections that are
successful experience very high latencies (first y-axis).
Figure 6: Percentage of successful TCP connections with varying
numbers of Handshake MSUs during a SYN flood.
Figure 7: The throughput of the declarative packet processing appli-
cation when under DoS attack.
In contrast, with three cloned Handshake MSUs running on
the same physical host (bottom graph of Figure 5), DeDoS is able
to achieve an average success percentage of approximately 64%
during the steady state of the attack and recovers quickly after
the attack ends. (The stratified “bars” in the figure are due to TCP
retransmissions and TCP backoff.)
Figure 6 shows the scalability of DeDoS and the improved re-
sponse to various SYN floods with increasing resources. For a given
attack strength, DeDoS is able to serve more legitimate requests as
the number of handshake MSUs increases. Here, Handshake MSUs
are equally distributed across the cores on three physical machines.
Notably, we are able to completely mitigate the attack (as measured
103105Latency(ms)SlowlorisTLSTLSRedosRedosNaiveMonolithicDeDoS02000ResponseRate0120Time (min)050# ofMSUswriteregexhttpreadsocket0100002000030000400005000060000Connection latency (ms)Success %Attack WindowPicoTCP050100150200250300350400Time (seconds)0100002000030000400005000060000Connection latency (ms)Success %Attack WindowDeDoS020406080100120Success percentage020406080100120Success percentage123456789Number of handshake MSUs020406080100Success percentage in steady state under attack47.1581.3284.47100.012.954.0363.2471.1383.9792.421002.8241.4853.2862.269.376.7184.9889.1791.671000 SYNs per second2000 SYNs per second3000 SYNs per second1510152025303540Number of clients050010001500200025003000Throughput (pkt/s)StandaloneDeDoS-SingleDeDoS-Clone0.00.20.40.60.81.0percentage receivedACSAC ’18, December 3–7, 2018, San Juan, PR, USA
H.M. Demoulin, T. Vaidya et al.
by successful client TCP connections) for moderate attack rates of
1000 and 2000 SYNs/second with four and seven MSUs, respectively.
Declarative packet processing attack: In our final experiment,
we launched an attack against the declarative packet processing
application described in §6. We initialized the packet processing
application with a large in-memory neighbor table, rendering naïve
replication too expensive in this case. Our workload consists of
a varying number of clients that forward packets via our appli-
cation. We increase the attack rate by using more clients to send
more traffic. Figure 7 shows the throughput (pkts/s) that can be
processed by (i) a standalone implementation, (ii) a DeDoS-enabled
application with cloning disabled, and (iii) a normal DeDoS-enabled
application. As before, the results show that standalone and DeDoS
achieve comparable throughputs (which indicates low overhead),
but that cloning enables DeDoS to handle roughly twice as many
clients during an attack.
decomposition of functions seen in FaaS platforms [17]. However,
those platforms [5, 6, 9, 10] have often constraints that make them
unsuitable for the deployment of stateful, long-lived services. Sim-
ilarly, DeDoS is not a Micro-services platform. We envision that
DeDoS can be integrated to those platforms.
9 CONCLUSION
DeDoS is a new approach to defending against asymmetric DoS
attacks. In DeDoS, software is built as a set of functional units called
Minimal Splittable Units (MSUs) that can be replicated indepen-
dently when under attack. DeDoS allows for more flexible allocation
of resources and can efficiently dedicate more resources to MSUs
under attack. Our evaluation shows that DeDoS runs with mod-
est overheads and constitutes an effective defense against several
state-of-the-art DoS attacks.
8 RELATED WORK
Volumetric attacks: Most existing DoS defenses focus on volu-
metric attacks, e.g., the attack on Dyn’s DNS service [18]. Zargar et
al. [41] provides a detailed survey. These defenses are orthogonal to
DeDoS, whose main focus is asymmetric attacks. They are also com-
plementary to DeDoS, and can be deployed together: for instance,
we can deploy traditional traffic scrubbing as an initial defense to
filter out certain suspicious traffic, and then use DeDoS to handle
the attack traffic that cannot be easily recognized as suspicious;
moreover, the fine-granularity cloning strategy in DeDoS can also
help mitigate volumetric attacks as well.
Amplification attacks: Newer attacks, such as reflective denial-
of-service (DRDoS) attacks exploit network protocols to launch
amplification-based attacks [35]. DeDoS may be useful for defend-
ing against these attacks, and we plan to investigate this in future
work.
Dispersion-based defenses: DeDoS [13] is a type of dispersion-
based defense against DoS attacks. Load balancing strategies [27,
30, 32] can also disperse the effect of DoS attacks, but they tend
to require a significant amount of redundancy and is costly in
terms of resource management. DeDoS is also inspired by the Split-
Stack architecture [12]; relative to SplitStack, DeDoS comes with
novel schemes for resource management and automated cloning,
a concrete implementation, as well as a thorough experimental
evaluation.
Cloning-based defenses: XenoService dynamically clones web-
sites when they are under attack [40]. Bohatei [15] also dynamically
launches more VMs to defend against known attacks. Similarly, Jia
et al. [22] describe a technique that attempts to conceal the location
of replicated services from an adversary. All these approaches use
whole-system replication of services, which offers less protection
than DeDoS because of the significant resource waste. Unlike exist-
ing approaches, DeDoS does not attempt to recognize legacy attacks
and deploy pre-developed defenses; instead, DeDoS dynamically
responds to new attacks by cloning just the system components
that are under attack.
Function-as-a-Service and Micro-services platforms: DeDoS
is conceptually related to the trend toward fine-grained granularity
10 ACKNOWLEDGMENTS
This material is based upon work supported in parts by NSF Grants
CNS-1527401, CNS-1513679, CNS-1563873, CNS-1703936, CNS-1453392,
CNS-1513734, CNS-1704189, CNS 1750158, and CNS-1801884, as
well as by the the Defense Advanced Research Projects Agency
(DARPA) under Contracts No. HR0011-16-C-0056, No. HR001117C0047
and No. HR0011-16-C0061. Any opinions, findings and conclusions
or recommendations expressed in this material are those of the
authors and do not necessarily reflect the views of DARPA or NSF.
REFERENCES
[1] 2011. SSL Renegotiation DoS. (2011). https://www.ietf.org/mail-archive/web/tls/
current/msg07553.html.
[2] 2017. DeDOS demonstration at SIGCOMM 2017. https://www.youtube.com/
watch?v=KX4EPnUzDqk. https://www.youtube.com/watch?v=KX4EPnUzDqk
[3] 2017. Regular expression Denial of Service - ReDoS. (2017). https://www.owasp.
org/index.php/Regular_expression_Denial_of_Service_-_ReDoS.
[4] 2017. Tsung. http://tsung.erlang-projects.org/. http://tsung.erlang-projects.org/
[5] 2018. AWS Lambda. https://aws.amazon.com/lambda. https://aws.amazon.com/
lambda
[6] 2018. Azure functions. https://functions.azure.com. https://functions.azure.com
[7] 2018. Common Vulnerabilities and Exposures (see CVE-2015-8386).
(2018).
http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-8386.
[8] 2018. DeDOS on GitHub. https://github.com/dedos-project/DeDOS. https:
//github.com/dedos-project/DeDOS
[9] 2018. Google Cloud Functions. https://cloud.google.com/functions.
[10] 2018. OpenWhisk. https://developer.ibm.com/openwhisk.
[11] Luiz André Barroso, Jimmy Clidaras, and Urs Hölzle. 2013. The datacenter as a
computer: An introduction to the design of warehouse-scale machines. Synthesis
lectures on computer architecture 8, 3 (2013), 1–154.
[12] Ang Chen, Akshay Sriraman, Tavish Vaidya, Yuankai Zhang, Andreas Haeberlen,
Boon Thau Loo, Linh Thi Xuan Phan, Micah Sherr, Clay Shields, and Wenchao
Zhou. 2016. Dispersing Asymmetric DDoS Attacks with SplitStack. In Proc.
HotNets.
[13] Henri Maxime Demoulin, Tavish Vaidya, Isaac Pedisich, Nik Sultana, Bowen
Wang, Jingyu Qian, Yuankai Zhang, Ang Chen, Andreas Haeberlen, Boon Thau
Loo, et al. 2017. A Demonstration of the DeDoS Platform for Defusing Asymmetric
DDoS Attacks in Data Centers. In Proceedings of the SIGCOMM Posters and Demos.
ACM.
[14] F5. 2018. SSL Acceleration. https://f5.com/glossary/ssl-acceleration.
[15] Seyed K. Fayaz, Yoshiaki Tobioka, Vyas Sekar, and Michael Bailey. 2015. Bohatei:
Flexible and Elastic DDoS Defense. In Proc. USENIX Security.
[16] Bryan Ford, Godmar Back, Greg Benson, Jay Lepreau, Albert Lin, and Olin Shivers.
1997. The Flux OSKit: A Substrate for Kernel and Language Research. In Proc.
SOSP.
[17] Sadjad Fouladi, Riad S Wahby, Brennan Shacklett, Karthikeyan Balasubramaniam,
William Zeng, Rahul Bhalerao, Anirudh Sivaraman, George Porter, and Keith
Winstein. 2017. Encoding, Fast and Slow: Low-Latency Video Processing Using
Thousands of Tiny Threads.. In NSDI. 363–376.
DeDoS: Defusing DoS with Dispersion Oriented Software
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
[18] Sean Gallagher. 2016.
Felt Across the Internet.
double-dip-internet-of-things-botnet-attack-felt-across-the-internet/.
Double-dip Internet-of-Things Botnet Attack
https://arstechnica.com/security/2016/10/
[19] Alain Gefflaut, Trent Jaeger, Yoonho Park, Jochen Liedtke, Kevin J. Elphinstone,
Volkmar Uhlig, Jonathon E. Tidswell, Luke Deller, and Lars Reuther. 2000. The
SawMill Multiserver Approach. In Proc 9th ACM SIGOPS European Workshop.
109–114.
[20] Gkbrk. 2018. SlowLoris attack tool. https://github.com/gkbrk/slowloris.
[21] Saikat Guha, Paul Francis, and Nina Taft. 2008. ShutUp: End-to-End Containment
[22] Quan Jia, Huangxin Wang, Dan Fleck, Fei Li, Angelos Stavrou, and Walter Powell.
of Unwanted Traffic. Technical Report. Cornell University.
2014. Catch Me if You Can: A Cloud-Enabled DDoS Defense. In Proc. DSN.
effective defense against spoofed DDoS traffic. In Proc. CCS.
//github.com/nodejs/http-parser.
[24] Joyent Inc. and other Node contributors. [n. d.]. NodeJS HTTP Parser. https:
[23] Cheng Jin, Haining Wang, and Kang G. Shin. 2003. Hop-count filtering: an
(2016).
[25] Christine Kern. 2016.
tacks Targeting Companies.
increased-use-of-multi-vector-ddos-attacks-targeting-companies-0001.
Increased Use Of Multi-Vector DDoS At-
http://www.bsminfo.com/doc/
[26] Eddie Kohler, Robert Morris, Benjie Chen, John Jannotti, and M. Frans Kaashoek.
2000. The Click Modular Router. ACM Trans. Comput. Syst. 18, 3 (Aug. 2000),
263–297.
[27] Soom Bum Lee, Min Suk Kang, and Virgil D. Gligor. 2013. CoDef: Collaborative
Defense Against Large-Scale Link-Flooding Attacks. In Proc. CoNEXT.
[28] Qi Liao, David A. Cieslak, Aaron D. Striegel, and Nitesh V. Chawla. 2008. Using
selective, short-term memory to improve resilience against DDoS exhaustion
attacks. Security and Communication Networks 1, 4 (2008), 287–299.
[29] Boon Thau Loo, Tyson Condie, Minos Garofalakis, David E. Gay, Joseph M.
Hellerstein, Petros Maniatis, Raghu Ramakrishnan, Timothy Roscoe, and Ion
Stoica. 2009. Declarative networking. Comm. ACM 52, 11 (Nov. 2009), 87–95.
[30] Ratul Mahajan, Steven M. Bellovin, Sally Floyd, John Ioannidis, Vern Paxson, and
Scott Shenker. 2002. Controlling High Bandwidth Aggregates in the Network. In
Proc. CCR.
O’Reilly Media, Inc.".
[31] Sam Newman. 2015. Building microservices: designing fine-grained systems. "
[32] Parveen Patel, Deepak Bansal, Lihua Yuan, Ashwin Murthy, Albert Green-
berg, David A. Maltz, Randy Kern, Hemant Kumar, Marios Zikos, Hongyu Wu,
Changhoon Kim, and Naveen Karri. 2013. Ananta: Cloud Scale Load Balancing.
In Proc. SIGCOMM.
Technical Report. SANS Institute.
[33] John Pescatore. 2014. DDoS Attacks Advancing and Enduring: A SANS Survey.
[34] picoTCP 2018. picoTCP. http://www.picotcp.com/.
[35] Christian Rossow. 2014. Amplification Hell: Revisiting Network Protocols for
DDoS Abuse. In Proc. NDSS.
[36] Fabrice J. Ryba, Matthew Orlinski, Matthias Wählisch, Christian Rossow, and
Thomas C. Schmidt. 2015. Amplification and DRDoS Attack Defense – A Survey
and New Perspectives. CoRR abs/1505.07892 (2015). http://arxiv.org/abs/1505.
07892
[37] David Senecal. 2013. Slow DoS on the Rise. (2013). https://blogs.akamai.com/
2013/09/slow-dos-on-the-rise.html.
[38] Willy Tarreau. 2018. HA-Proxy load balancer. http://haproxy.com/.
[39] Matt Welsh, David Culler, and Eric Brewer. 2001. SEDA: An Architecture for
[40] Jianxin Yan, Stephen Early, and Ross Anderson. 2000. The XenoService – A
Well-conditioned, Scalable Internet Services. In Proc. SOSP.
Distributed Defeat for Distributed Denial of Service. In Proc. ISW.
[41] Saman Taghavi Zargar, James Joshi, and David Tipper. 2013. A Survey of Defense
Mechanisms Against Distributed Denial of Service (DDoS) Flooding Attacks.
IEEE Communications Surveys & Tutorials 15, 4 (2013), 2046–2069.