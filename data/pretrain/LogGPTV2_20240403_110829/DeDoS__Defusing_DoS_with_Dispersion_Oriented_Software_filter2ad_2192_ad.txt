### Optimized Text

#### Server Connection Management
The server maintains each connection for a significantly longer duration than usual. We have configured our kernels to allow each process to open 213 concurrent file descriptors (FDs), up from the initial value of 210. The attack tool is set to establish up to approximately 41,000 concurrent connections to the web server over a period of 17 minutes. 

In the standalone configuration, the system can withstand the attack until the FDs limit is reached, which occurs in about 220 seconds. After this point, the connection success rate drops to around 3 requests per second, and the latency for legitimate requests increases sharply. This is due to the web server threads being occupied with processing HTTP headers continuously sent by malicious clients.

In contrast, DeDoS can spawn 22 new Read Minimal Splittable Units (MSUs) on each database server, thereby increasing the global file descriptor pool and allowing it to maintain a 100% successful connection rate. Due to paging, the naïve approach is unable to respond to the majority of the connections.

#### Additional Attacks
In addition to the attacks discussed on the web server, we will examine two more attacks and their mitigation using DeDoS.

**SYN Flood Attack:**
Our SYN flood experiment involves a number of "good" (i.e., non-attack) clients accessing an echo server built on top of PicoTCP. Each good client attempts 10 requests per second, where each request establishes a TCP connection, sends and receives 32 bytes of data, and then closes the connection. A TCP connection is considered successful only if the handshake completes within 60 seconds. The SYN flood is launched after one minute of normal traffic, runs for three minutes, and then stops. We use hping3 to launch the SYN flood attacks and vary the intensity of the flood. The experiment continues for an additional two minutes (during which no attack occurs) to observe the recovery period.

Under normal conditions, the application's use of TCP is tightly coupled to the machine’s local network stack. For the standalone PicoTCP, we assign a single process on a single machine and set the size of its connection buffer to 1MB, corresponding to 26,214 pending connections. This limit is significantly larger than the default 210 pending connection limit offered by Linux.

DeDoS mitigates the SYN flood by cloning MSUs, potentially on other hosts. Our DeDoS-enabled version of PicoTCP consists of separate MSUs for performing the handshake and for transferring data. Each instance of a Handshake MSU is provided with a 1MB connection buffer. We operate the PicoTCP MSU (the non-handshake related portion of TCP) on a single machine that also hosts the echo server. We use three other physical machines in our cluster and spawn a maximum of three additional Handshake MSUs per machine. To evaluate the efficacy of DeDoS, we vary the number of Handshake MSUs and measure system performance.

We consider the success rate of TCP handshakes during the interval between the first and last instances in which a TCP connection failed, as observed by a good client. This reflects the steady state of the attack and avoids the "ramp-up" period in which the attack has not yet become effective.

**Results:**
Our results show that DeDoS provides superior service throughout the attack. Figure 5 illustrates the connection latency of good clients during a 2000 SYN/second attack. On the second y-axis, we show the average percentage of successful TCP handshakes ("success percentage") computed over a two-second interval.

PicoTCP (top graph) fails to service good requests as soon as the attack starts—the percentage of successful TCP handshakes almost immediately drops to below 10%. The few connections that are successful experience very high latencies (first y-axis).

In contrast, with three cloned Handshake MSUs running on the same physical host (bottom graph of Figure 5), DeDoS achieves an average success percentage of approximately 64% during the steady state of the attack and recovers quickly after the attack ends. (The stratified "bars" in the figure are due to TCP retransmissions and TCP backoff.)

Figure 6 shows the scalability of DeDoS and the improved response to various SYN floods with increasing resources. For a given attack strength, DeDoS is able to serve more legitimate requests as the number of handshake MSUs increases. Here, Handshake MSUs are equally distributed across the cores on three physical machines. Notably, we are able to completely mitigate the attack (as measured by successful client TCP connections) for moderate attack rates of 1000 and 2000 SYNs/second with four and seven MSUs, respectively.

**Declarative Packet Processing Attack:**
In our final experiment, we launched an attack against the declarative packet processing application described in §6. We initialized the packet processing application with a large in-memory neighbor table, making naïve replication too expensive in this case. Our workload consists of a varying number of clients that forward packets via our application. We increase the attack rate by using more clients to send more traffic. Figure 7 shows the throughput (pkts/s) that can be processed by (i) a standalone implementation, (ii) a DeDoS-enabled application with cloning disabled, and (iii) a normal DeDoS-enabled application. As before, the results show that standalone and DeDoS achieve comparable throughputs (indicating low overhead), but that cloning enables DeDoS to handle roughly twice as many clients during an attack.

#### Conclusion
DeDoS is a novel approach to defending against asymmetric DoS attacks. In DeDoS, software is built as a set of functional units called Minimal Splittable Units (MSUs) that can be replicated independently when under attack. DeDoS allows for more flexible allocation of resources and can efficiently dedicate more resources to MSUs under attack. Our evaluation shows that DeDoS runs with modest overheads and constitutes an effective defense against several state-of-the-art DoS attacks.

#### Related Work
**Volumetric Attacks:**
Most existing DoS defenses focus on volumetric attacks, such as the attack on Dyn’s DNS service [18]. Zargar et al. [41] provide a detailed survey. These defenses are orthogonal to DeDoS, whose main focus is asymmetric attacks. They are also complementary to DeDoS and can be deployed together. For instance, traditional traffic scrubbing can be used as an initial defense to filter out certain suspicious traffic, and then DeDoS can handle the attack traffic that cannot be easily recognized as suspicious. Moreover, the fine-granularity cloning strategy in DeDoS can also help mitigate volumetric attacks.

**Amplification Attacks:**
Newer attacks, such as reflective denial-of-service (DRDoS) attacks, exploit network protocols to launch amplification-based attacks [35]. DeDoS may be useful for defending against these attacks, and we plan to investigate this in future work.

**Dispersion-Based Defenses:**
DeDoS [13] is a type of dispersion-based defense against DoS attacks. Load balancing strategies [27, 30, 32] can also disperse the effect of DoS attacks, but they tend to require significant redundancy and are costly in terms of resource management. DeDoS is inspired by the Split-Stack architecture [12]; relative to SplitStack, DeDoS comes with novel schemes for resource management and automated cloning, a concrete implementation, and a thorough experimental evaluation.

**Cloning-Based Defenses:**
XenoService dynamically clones websites when they are under attack [40]. Bohatei [15] also dynamically launches more VMs to defend against known attacks. Similarly, Jia et al. [22] describe a technique that attempts to conceal the location of replicated services from an adversary. All these approaches use whole-system replication of services, which offers less protection than DeDoS because of the significant resource waste. Unlike existing approaches, DeDoS does not attempt to recognize legacy attacks and deploy pre-developed defenses; instead, DeDoS dynamically responds to new attacks by cloning just the system components that are under attack.

**Function-as-a-Service and Micro-services Platforms:**
DeDoS is conceptually related to the trend toward fine-grained granularity seen in FaaS platforms [17]. However, those platforms [5, 6, 9, 10] often have constraints that make them unsuitable for the deployment of stateful, long-lived services. Similarly, DeDoS is not a Micro-services platform. We envision that DeDoS can be integrated into these platforms.

#### Acknowledgments
This material is based upon work supported in part by NSF Grants CNS-1527401, CNS-1513679, CNS-1563873, CNS-1703936, CNS-1453392, CNS-1513734, CNS-1704189, CNS 1750158, and CNS-1801884, as well as by the Defense Advanced Research Projects Agency (DARPA) under Contracts No. HR0011-16-C-0056, No. HR0011-17-C-0047, and No. HR0011-16-C-0061. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of DARPA or NSF.

#### References
[References remain unchanged]