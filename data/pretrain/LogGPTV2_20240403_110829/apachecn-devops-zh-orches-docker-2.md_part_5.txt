| --- | --- |
| 
```
--since=""
```
 | 此显示自时间戳(在 Unix 中)以来创建的所有事件。 |
| 
```
--until=""
```
 | 这个流事件直到时间戳。 |
对于示例， `events`命令的用法如下:
```
$ docker events
```
现在，在不同的选项卡中，运行以下命令:
```
$ docker start code.it
```
然后运行以下命令:
```
$ docker stop code.it
```
现在回到运行 Docker 事件的选项卡，查看输出。它将遵循以下方针:
```
[2014-07-21 21:31:50 +0530 IST] c7f2485863b2c7d0071477e6cb8c8301021ef9036afd4620702a0de08a4b3f7b: (from dockerfile/nodejs:latest) start
[2014-07-21 21:31:57 +0530 IST] c7f2485863b2c7d0071477e6cb8c8301021ef9036afd4620702a0de08a4b3f7b: (from dockerfile/nodejs:latest) stop
[2014-07-21 21:31:57 +0530 IST] c7f2485863b2c7d0071477e6cb8c8301021ef9036afd4620702a0de08a4b3f7b: (from dockerfile/nodejs:latest) die
```
可以使用`--since`、`--until`等标志获取特定时间段的事件日志。
## 等待命令
`wait`命令阻塞直到一个容器停止，然后打印其退出代码:
```
$ docker wait CONTAINER(s)
```
## 构建命令
构建命令从指定路径的源文件构建映像:
```
$ Docker build [OPTIONS] PATH | URL | -
```
| 
旗
 | 
说明
 |
| --- | --- |
| 
```
-t, --tag=""
```
 | 这是存储库名称(和一个可选标签)，在成功的情况下将应用于结果映像。 |
| 
```
-q, --quiet
```
 | 此抑制输出，默认为详细。 |
| 
```
--rm=true
```
 | 该在成功构建后移除中间容器。 |
| 
```
--force-rm
```
 | 这总是移除中间容器，即使在不成功的构建之后。 |
| 
```
--no-cache
```
 | 该命令在构建映像时不使用缓存。 |
该命令使用 Docker 文件和上下文来构建 Docker 映像。
Dockerfile 就像一个 Makefile。它包含创建映像所需运行的各种配置和命令的说明。我们将在下一节讨论如何编写 Dockerfiles。
### 类型
最好先阅读关于 Dockerfiles 的部分，然后再回到这里更好地理解这个命令及其工作原理。
位于`PATH`或`URL`路径的文件被称为构建的**上下文**。上下文用于引用 Dockerfile 中的文件或文件夹，例如在`ADD`指令中(这就是像`ADD ../file.txt`这样的指令不起作用的原因。不在上下文中！).
当给出一个 GitHub URL 或一个带有`git://`协议的 URL 时，存储库被用作上下文。存储库及其子模块在本地机器中递归克隆，然后作为上下文上传到`docker`守护进程。这允许您在您的私有 Git 存储库中拥有 Dockerfiles，您可以从您的本地用户凭证或从**虚拟**T5】私有 T7】网络 ( **VPN** )访问这些文件。
## 上传到 Docker 守护程序
请记住，Docker 引擎同时拥有`docker`守护程序和 Docker 客户端。您作为用户给出的命令是通过 Docker 客户端发出的，然后 Docker 客户端与`docker`守护程序(通过 TCP 或 Unix 套接字)进行对话，后者执行必要的工作。`docker`守护程序和 Docker 主机可以在不同的主机上(这是 boot2Docker 工作的前提)，其中`DOCKER_HOST`环境变量设置为远程`docker`守护程序的位置。
当您给`docker build`命令一个上下文时，本地目录中的所有文件都会被定向并发送到`docker`守护程序。`PATH`变量指定在`docker`守护程序中的构建上下文中的文件位置。所以当你运行`docker build .`时，当前文件夹中的所有文件都会被上传，而不仅仅是那些被列出来添加到 Dockerfile 中的文件。
由于这可能有点问题(因为一些系统，如 Git 和一些 ide，如 Eclipse，会创建隐藏文件夹来存储元数据)，Docker 提供了一种机制，通过在`PATH`变量中创建一个名为`.dockerignore`的文件，并使用必要的排除模式来忽略某些文件或文件夹。举个例子，查一下[https://github.com/docker/docker/blob/master/.dockerignore](https://github.com/docker/docker/blob/master/.dockerignore)。
如果给出了一个普通的网址，或者如果 Dockerfile 通过`stdin`文件传输，则不设置任何上下文。在这些情况下，`ADD`指令只有在引用远程网址时才起作用。
现在让我们通过一个 Dockerfile 构建`code.it`示例映像。如何创建此文件的说明在*文件*部分提供。
此时，您已经创建了一个目录，并将 Dockerfile 放在其中。现在，在您的终端上，转到该目录并执行`docker` `build`命令:
```
$ docker build -t shrikrishna/code.it:docker Dockerfile .
Sending build context to Docker daemon  2.56 kB
Sending build context to Docker daemon
Step 0 : FROM Dockerfile/nodejs
 ---> 1535da87b710
Step 1 : MAINTAINER Shrikrishna Holla 
 ---> Running in e4be61c08592
 ---> 4c0eabc44a95
Removing intermediate container e4be61c08592
Step 2 : WORKDIR /home
 ---> Running in 067e8951cb22
 ---> 81ead6b62246
Removing intermediate container 067e8951cb22
. . . . .
. . . . .
Step 7 : EXPOSE  8000
 ---> Running in 201e07ec35d3
 ---> 1db6830431cd
Removing intermediate container 201e07ec35d3
Step 8 : WORKDIR /home
 ---> Running in cd128a6f090c
 ---> ba05b89b9cc1
Removing intermediate container cd128a6f090c
Step 9 : CMD     ["/usr/bin/node", "/home/code.it/app.js"]
 ---> Running in 6da5d364e3e1
 ---> 031e9ed9352c
Removing intermediate container 6da5d364e3e1
Successfully built 031e9ed9352c
```
现在，您将能够在 Docker 映像的输出中查看新构建的映像
```
REPOSITORY          TAG        IMAGE ID     CREATED      VIRTUAL SIZE
shrikrishna/code.it Dockerfile 031e9ed9352c 21 hours ago 1.02 GB
```
要查看缓存的运行情况，请再次运行相同的命令
```
$ docker build -t shrikrishna/code.it:dockerfile .
Sending build context to Docker daemon  2.56 kB
Sending build context to Docker daemon
Step 0 : FROM dockerfile/nodejs
 ---> 1535da87b710
Step 1 : MAINTAINER Shrikrishna Holla 
 ---> Using cache
 ---> 4c0eabc44a95
Step 2 : WORKDIR /home
 ---> Using cache
 ---> 81ead6b62246
Step 3 : RUN     git clone https://github.com/shrikrishnaholla/code.it.git
 ---> Using cache
 ---> adb4843236d4
Step 4 : WORKDIR code.it
 ---> Using cache
 ---> 755d248840bb
Step 5 : RUN     git submodule update --init --recursive
 ---> Using cache
 ---> 2204a519efd3
Step 6 : RUN     npm install
 ---> Using cache
 ---> 501e028d7945
Step 7 : EXPOSE  8000
 ---> Using cache
 ---> 1db6830431cd
Step 8 : WORKDIR /home
 ---> Using cache
 ---> ba05b89b9cc1
Step 9 : CMD     ["/usr/bin/node", "/home/code.it/app.js"]
 ---> Using cache
 ---> 031e9ed9352c
Successfully built 031e9ed9352c
```
### 类型
现在用这个缓存来实验。更改中间的一行(例如端口号)，或者在中间的某个地方添加一行`RUN echo "testing cache"`看看会发生什么。
使用存储库网址构建映像的示例如下:
```
$ docker build -t shrikrishna/optimus:git_url \ git://github.com/shrikrishnaholla/optimus
Sending build context to Docker daemon 1.305 MB
Sending build context to Docker daemon
Step 0 : FROM        dockerfile/nodejs
 ---> 1535da87b710
Step 1 : MAINTAINER  Shrikrishna Holla
 ---> Running in d2aae3dba68c
 ---> 0e8636eac25b
Removing intermediate container d2aae3dba68c
Step 2 : RUN         git clone https://github.com/pesos/optimus.git /home/optimus
 ---> Running in 0b46e254e90a
. . . . .
. . . . .
. . . . .
Step 5 : CMD         ["/usr/local/bin/npm", "start"]
 ---> Running in 0e01c71faa0b
 ---> 0f0dd3deae65
Removing intermediate container 0e01c71faa0b
Successfully built 0f0dd3deae65
```
# Docker 型式
我们已经看到了如何通过提交容器来创建映像。如果您想用新版本的依赖项或自己应用的新版本来更新映像怎么办？很快，一遍又一遍地做开始、设置和提交的步骤变得不切实际。我们需要一种可重复的方法来构建映像。接下来是 Dockerfile，它只不过是一个文本文件，其中包含了一些指令，可以自动执行构建映像所需的步骤。`docker build`将依次读取这些指令，沿途提交，并构建一个映像。
`docker build`命令获取这个 Docker 文件和一个上下文来执行指令，并构建一个 Docker 映像。上下文是指给`docker build`命令的路径或源代码库网址。
Dockerfile 包含以下格式的指令:
```
# Comment
INSTRUCTION arguments
```
以`#`开头的任何一行都将被视为注释。如果一个`#`符号出现在的任何地方，它将被认为是争论的一部分。指令不区分大小写，尽管指令大写以区别于参数是一个公认的惯例。
让我们看看可以在 Dockerfile 中使用的指令。
## 从指令
`FROM`指令为后续指令设置基础映像。一个有效的 Dockerfile 的第一个非注释行将是一个`FROM`指令:
```
FROM :
```
映像可以是任何有效的本地或公共映像。如果在本地找不到，`Docker build`命令将尝试从公共注册表中将其拉出。`tag`命令在这里是可选的。如果没有给出，`latest`命令被假定。如果给出不正确的`tag`命令，则返回错误。
## 维护者指令
`MAINTAINER`指令允许您为生成的映像设置作者:
```
MAINTAINER 
```
## 运行指令
`RUN`指令将在当前映像之上的新图层中执行任何命令，并提交该映像。这样提交的映像将用于 Dockerfile 中的下一条指令。
`RUN`指令有两种形式:
*   `RUN `形式
*   `RUN ["executable", "arg1", "arg2"...]`形式
在第一个表单中，命令在一个 shell 中运行，特别是`/bin/sh -c ` shell。第二种形式在基本映像没有`/bin/sh` 外壳的情况下很有用。Docker 为这些映像构建使用缓存。因此，如果您的映像构建在中间某个地方失败了，下一次运行将重用之前成功的部分构建，并从失败的地方继续。
在以下情况下，缓存将被无效:
*   当使用`--no-cache`标志运行`docker build`命令时。
*   当给出不可缓存的命令如`apt-get update`时。以下所有`RUN`指令将再次运行。
*   当第一次遇到`ADD`指令时，如果上下文的内容已经改变，将使来自 Dockerfile 的所有后续指令的缓存无效。这也将使`RUN`指令的缓存无效。
## CMD 指令
`CMD`指令为容器提供了要执行的默认命令。它有以下几种形式:
*   `CMD ["executable", "arg1", "arg2"...]`形态
*   `CMD ["arg1", "arg2"...]`形态
*   `CMD command arg1 arg2 …`形态
第一种形式类似于 exec，是首选形式，其中第一个值是可执行文件的路径，后面是可执行文件的参数。
第二种形式省略了可执行文件，但需要`ENTRYPOINT`指令来指定可执行文件。
如果使用`CMD`指令的 shell 形式，那么``命令将在`/bin/sh -c` shell 中执行。
### 注
如果用户在`docker run`中提供了命令，它将覆盖`CMD`命令。
`RUN`和`CMD`指令的区别在于一个`RUN`指令实际上运行命令并提交它，而`CMD`指令在构建期间不执行。这是用户启动容器时运行的默认命令，除非用户提供了启动它的命令。
例如，让我们编写一个`Dockerfile`，将`Star` `Wars`输出带到您的终端:
```
FROM ubuntu:14.04
MAINTAINER shrikrishna
RUN apt-get -y install telnet
CMD ["/usr/bin/telnet", "towel.blinkenlights.nl"]
```
将此保存在名为`star_wars`的文件夹中，并在此位置打开您的终端。然后运行这个命令:
```
$ docker build -t starwars .
```
现在，您可以使用以下命令运行它:
```
$ docker run -it starwars 
```
以下截图显示了`starwars`输出:
![The CMD instruction](img/4787OS_02_07.jpg)
因此，你可以在你的终端观看**星球大战**！