                case T_IndexScan:  
                case T_IndexOnlyScan:  
                case T_BitmapIndexScan:  
                case T_ModifyTable:  
                case T_NestLoop:  
                case T_MergeJoin:  
                case T_HashJoin:  
                                switch (((Join *) plan)->jointype)  
                                        case JOIN_INNER:  
                                        case JOIN_LEFT:  
                                        case JOIN_FULL:  
                                        case JOIN_RIGHT:  
                                        case JOIN_SEMI:  
                                        case JOIN_ANTI:  
                case T_SetOp:  
                                switch (((SetOp *) plan)->cmd)  
                                        case SETOPCMD_INTERSECT:  
                                        case SETOPCMD_INTERSECT_ALL:  
                                        case SETOPCMD_EXCEPT:  
                                        case SETOPCMD_EXCEPT_ALL:  
        switch (nodeTag(plan))  
                case T_IndexScan:  
                case T_IndexOnlyScan:  
                case T_BitmapIndexScan:  
                case T_BitmapHeapScan:  
                case T_SampleScan:  
                case T_SeqScan:  
                case T_ValuesScan:  
                case T_CteScan:  
                case T_WorkTableScan:  
                case T_SubqueryScan:  
                case T_Gather:  
                case T_FunctionScan:  
                case T_TidScan:  
                case T_ForeignScan:  
                case T_CustomScan:  
                case T_NestLoop:  
                case T_MergeJoin:  
                case T_HashJoin:  
                case T_Agg:  
                case T_Group:  
                case T_Sort:  
                case T_MergeAppend:  
                case T_Result:  
                case T_ModifyTable:  
                case T_Hash:  
        switch (nodeTag(plan))  
                case T_ModifyTable:  
                case T_Append:  
                case T_MergeAppend:  
                case T_BitmapAnd:  
                case T_BitmapOr:  
                case T_SubqueryScan:  
                case T_CustomScan:  
```  
2\. 通过sr_plan插件，我们可以保存、篡改、固定QUERY的执行计划，达到与oracle outline system同样的效果。  
3\. 只要parser后的QUERY不变，执行计划就不会变化。   
```
postgres=# explain /*+ */ select * from a left join (select id,count(info) from b group by id) b on (a.id=b.id) where  a.info='test1' ;
WARNING:  Ok we find saved plan.
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Nested Loop Left Join  (cost=5.37..7.43 rows=1 width=27)
   Join Filter: (a.id = b.id)
   ->  Index Scan using idx_a_info on a  (cost=0.43..2.45 rows=1 width=15)
         Index Cond: (info = 'test1'::text)
   ->  GroupAggregate  (cost=4.94..4.96 rows=1 width=12)
         Group Key: b.id
         ->  Sort  (cost=4.94..4.94 rows=1 width=15)
               Sort Key: b.id
               ->  Nested Loop  (cost=2.89..4.93 rows=1 width=15)
                     ->  HashAggregate  (cost=2.46..2.46 rows=1 width=4)
                           Group Key: a_1.id
                           ->  Index Scan using idx_a_info on a a_1  (cost=0.43..2.45 rows=1 width=4)
                                 Index Cond: (info = 'test1'::text)
                     ->  Index Scan using idx_b_id on b  (cost=0.43..2.45 rows=1 width=15)
                           Index Cond: (id = a_1.id)
(15 rows)
```
4\. 除了sr_plan插件，PostgreSQL还有一个PLAN HINT插件，可以强行指定执行计划，减少PLAN的时间，同时也可以避免PLAN不稳定的问题。  
当然了，PostgreSQL本身在执行计划，统计信息的更新方面都是非常给力的，需要使用以上插件的地方相对较少。  
5\. sr_plan支持绑定变量的SQL,使用_p函数表示绑定参数     
```
In addition sr plan allows you to save a parameterized query plan. 
In this case, we have some constants in the query are not essential. 
For the parameters we use a special function _p (anyelement) example:
select query_hash from sr_plans where query_hash=1000+_p(10);
if we keep the plan for the query and enable it to be used also for the following queries:
select query_hash from sr_plans where query_hash=1000+_p(11);
select query_hash from sr_plans where query_hash=1000+_p(-5);
```
6\. 你甚至可以改写QUERY，连接收对象都改掉。    
```
postgres=# create table d(id int, info text);
CREATE TABLE
postgres=# create table e(id int, info text,crt_time timestamp);
CREATE TABLE
postgres=# set sr_plan.write_mode = true;
SET
postgres=# select * from d join e on (d.id=e.id) where e.info='a';
 id | info | id | info | crt_time 
----+------+----+------+----------
(0 rows)
postgres=# select * from d where id=1;
 id | info 
----+------
(0 rows)
postgres=# set sr_plan.write_mode = false;
SET
postgres=# select query_hash,query,explain_jsonb_plan(plan) from sr_plans where query ~ 'from d'; 
 query_hash  |                          query                          |            explain_jsonb_plan            
-------------+---------------------------------------------------------+------------------------------------------
  -266039606 | select * from d join e on (d.id=e.id) where e.info='a'; | Hash Join                               +
             |                                                         |   Hash Cond: (d.id = e.id)              +
             |                                                         |   ->  Seq Scan on d                     +
             |                                                         |   ->  Hash                              +
             |                                                         |         ->  Seq Scan on e               +
             |                                                         |               Filter: (info = 'a'::text)+
             |                                                         | 
 -1283869506 | select * from d where id=1;                             | Seq Scan on d                           +
             |                                                         |   Filter: (id = 1)                      +
             |                                                         | 
(2 rows)
postgres=# update sr_plans set enable =true,plan=(select plan from sr_plans where query_hash=-266039606) where query_hash=-1283869506;
UPDATE 1
postgres=# select * from d where id=1;
WARNING:  Ok we find saved plan.
 id | info | id | info | crt_time 
----+------+----+------+----------
(0 rows)
postgres=# explain select * from d where id=1;
WARNING:  Ok we find saved plan.
                          QUERY PLAN                           
---------------------------------------------------------------
 Hash Join  (cost=24.20..52.04 rows=38 width=80)
   Hash Cond: (d.id = e.id)
   ->  Seq Scan on d  (cost=0.00..22.70 rows=1270 width=36)
   ->  Hash  (cost=24.12..24.12 rows=6 width=44)
         ->  Seq Scan on e  (cost=0.00..24.12 rows=6 width=44)
               Filter: (info = 'a'::text)
(6 rows)
```
## 参考  
[《关键时刻HINT出彩 - PG优化器的参数优化、执行计划固化CASE》](../201607/20160723_02.md)  
[《PostgreSQL 特性分析 Plan Hint》](../201605/20160523_02.md)  
[《阿里云 PostgreSQL pg_hint_plan插件的用法》](../201604/20160401_01.md)    
[《PostgreSQL SQL HINT的使用(pg_hint_plan)》](../201602/20160203_01.md)    
https://github.com/postgrespro/sr_plan  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")