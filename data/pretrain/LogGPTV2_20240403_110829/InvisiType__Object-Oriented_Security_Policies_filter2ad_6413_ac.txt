data structure needs to be generated for each class of objects
a policy protects, as illustrated in Figure 9. The protected
classes are kept in a cache for the sake of reuse.
Figure 9. Examples of protected classes: nor-
mal ProtectedClass1 inherits from String type and
TaintPolicy; ProtectedClass2 inherits from Unicode
type and TaintPolicy. The generated protected classes
are cached in the policy class.
In Python, a type has a table of handler functions for
each of the standard operations in the language such as
getattr and setattr for getting and setting an
object attribute, respectively. We create a new table of oper-
ation handlers for each protected class. If the handler is not
overridden by the policy, the handler entry simply points to
the corresponding handler in the class being protected. If it
is, the entry points to a stub code deﬁned in InvisiType.
This stub code is responsible for invoking the handler with
an additional parameter: the overridden method. Similarly,
the overridden virtual methods in the virtual method table
TaintPolicyClassStringTypeUnicodeType__getattr____setattr__...__getattr____setattr__...__getattr__...__getattr__…InvisiTypeStub codeProtectedClass1ProtectedClass2StringTypeUnicodeType for the class also point to the stub code, which again sup-
plies the extra argument.
5.3 Demoted Objects
this by overriding getattr operation handler, which
handles attribute/method access.
A promote operation removes the given policy class
from the class hierarchy as well as the corresponding policy
object from the InvisiField.
5.4 Native Methods
The
getattr
overriding the
operation handler.
nativecall method is implemented by
If the
nativecall method is deﬁned in a policy class, the
protected class corresponding to this policy automatically
includes an overriding getattr , the attribute access
handler. When getattr detects that a native method
of the object is accessed, it copies the method object and
demotes it to override the call handler before return-
ing it. The call handler invokes nativecall
instead of the actual native method code.
the
support
To
before nativecall arg ,
after nativecall arg , and syscall meth-
ods, we use Python’s runtime type-checking mechanism.
Since Python is a dynamically typed language, a na-
tive method has to check whether the arguments to the
method have the correct type for the method. We aug-
ment
the type-checking code to check if an argument
of InvisiType subclass is passed to a native method and
invoke the appropriate
before nativecall arg ,
after nativecall arg , or syscall method
accordingly.
5.5 Maintaining Transparency
We also modiﬁed the Python runtime system to hide the
protected class hierarchy from the application writer. This
involves making changes to only a few built-in functions
such as type(object) and isinstance(object,
type).
5.6 Restricted Mode
Two built-in functions for restricted mode, import re-
stricted() and in restricted mode(), are im-
plemented using the restricted execution support
in
Python.
The Python Interpreter executes code in re-
stricted mode unless the built-in namespace associated
with the code is bound to the standard built-in module.
Import restricted() function binds built-in names-
pace to a cloned built-in module before importing a mod-
ule, thus making the module code to run in restricted mode.
Similar technique is being used to restrict capabilities in ap-
plications on Google AppEngine [31].
Figure 10. Object demoted to be an Invisi-
Type instance: (1) Type pointer of the object orig-
inally points at its type. (2) When a policy is applied
by calling the demote function, the InvisiType runtime
creates a subclass inheriting from the applied policy
class and the original type of the object. The runtime
examines virtual methods in the policy class and adds
stub code to the generated subclass. (3) Finally, the
runtime changes the type pointer of the object to point
at the generated InvisiType subclass.
Objects in our system have an additional ﬁeld, called the
InvisiField, which points to a list of policy objects that
the object is currently subjected to, as shown in Figure 10.
The type pointer of a demoted object points to the protected
class of the lowest member of the protected class hierarchy.
A demote operation is implemented in the following
way:
1. When an object is demoted, the runtime examines if
attributes are deﬁned in a given policy class. If so, the
runtime instantiates a policy object and appends it to
the list of policy objects.
2. The runtime changes the class hierarchy of a given ob-
ject by inserting the protected class in the class hier-
archy. The protected class is created if one does not
already exists.
3. The type pointer of the object is changed to point to the
protected class.
If a policy class deﬁnes attributes or overrides methods in
an original class, attribute/method resolution order is mod-
iﬁed to match the new class hierarchy. The runtime does
typeattributes InvisiFieldpolicyobject__getattr____setattr__…__getattr____setattr__…PolicyClassInvisiTypeStub codeProtected classOriginal typejkl 5.7 Summary
InvisiType allows programmers to encapsulate safety
checks in an object-oriented manner, separating the con-
cerns of safety checks from the representation and usage
of the objects. TaintPolicy, for instance, expresses the
security policy for general tainted objects. The same policy
can be applied to different classes of data. Third-party soft-
ware can be run with the TaintPolicy enforced without
any code modiﬁcations.
It is interesting to contrast this approach to code re-
writing systems that add instrumentation code to the byte-
code. Our approach has the advantage that InvisiType adds
overhead to only the selected object instances; bytecode re-
writing adds overhead to the code invoked on all instances
of the objects. Also, simplicity is another advantage of
our approach. Not only is instrumentation at the bytecode
level complex, but bytecode re-writing imposes a non-trivial
overhead for dynamically loaded code.
6 Experimental Results
Besides implementing the security policies described
above, we have applied InvisiType to four widely-used
open-source Python web applications to ﬁnd cross-site
scripting vulnerabilities and access control errors. We suc-
cessfully found bugs in every one of these applications with
relatively little effort, while incurring a low runtime over-
head.
6.1 Applications
We have chosen a set of widely-used Python web ap-
plications that allow third-party extensions. Table 3 shows
the number of lines of code in the standard distributions of
these platforms, which in some cases also include a few of
the more popular extensions.
1. PyBlosxom is a personal weblog system. Over 90 ex-
tensions have been developed for this platform; the no-
table ones include Lucene extension which searches
weblogs, and a photo-gallery extension that shows
photos for a weblog entry.
2. ViewVC is a tool for viewing the contents of CVS and
SVN repositories using a web browser. ViewVC has
extensions for third-party source repository systems
such as the popular, commercial Perforce system.
3. Roundup is a web-based issue/bug tracking system.
It has well-deﬁned interfaces for extensions to allow
project-speciﬁc customization.
4. MoinMoin is a large and very popular Wiki system.
MoinMoin provides a central repository for exten-
sions [22]; over 200 third-party extensions have been
developed to date.
Application Description
PyBlosxom
A lightweight ﬁle-based
weblog system
Web interface for
version control repositories
Issue tracking system
Extensible Wiki Engine
ViewVC
Roundup
MoinMoin
Source LOC
5,999
14,964
43,788
92,438
Table 3. Summary of applications
MoinMoin is substantially bigger than the rest and has
the largest number of extensions. We have conducted
a comprehensive case study of this application and will
present it in Section 6.4, after describing the general results
on all these applications as a whole.
6.2 Security Errors
All these applications are known to have XSS errors. To
catch XSS errors, we needed to modify only the standard
Python library to implement a taint policy like the one in
Figure 2. We did not need to change the software platform
code at all.
Roundup and MoinMoin are known to also have access
control errors. We implemented access control policies for
Roundup and MoinMoin in a manner similar to that de-
scribed in Figure 7. They require changing less than 100
and 150 lines of code in the software platform, respectively.
No changes are made to any of the extensions.
Table 4 shows the number of previously reported XSS
and access control violations for each of the four applica-
tions [23, 26, 29, 30, 34, 36]. Running these applications
with inputs known to trigger these errors, we found that the
InvisiType policies are successful in catching every one of
these errors.
Application Name
PyBlosxom
ViewVC
Roundup
MoinMoin
# of Security Bugs
XSS ACL
0
0
3
3
3
1
2
13
Table 4. Number of security bugs in the appli-
cations
6.3
InvisiType Policy Overhead
To determine the overhead of the InvisiType approach,
we measure the time the applications take without Invisi-
Type, then with the InvisiType extension, and ﬁnally with
all the policies enforced. Table 5 reports the measurements
of the overhead averaged over ten runs. We found that the
overhead imposed by the InvisiType system in the Python
interpreter is negligible, being less than 1.5% in all the four
applications. The overhead due to the taint and access con-
trol policies is also minor, with the largest still under 4%.
Application
PyBlosxom
ViewVC
Roundup
MoinMoin
InvisiType Overhead
0.5%
0.3%
1.3%
1.5%
Policy Overhead
4.0%
0.5%
3.7%
0.7%
Table 5. Overhead of the InvisiType system
and security policies.
As a stress test, we wrote a taint micro-benchmark that
does nothing but manipulate various-sized strings. The
overhead of the InvisiType implementation itself remains
less than 1.5%. If none of the strings are considered tainted,
then there is no additional overhead. If we taint all strings,
then the performance degrades by as much as 14.1%. This
illustrates the power of the InvisiType system where over-
head is incurred only on those instances that need protec-
tion. If the overhead was uniform for all objects of the same
type, the web applications we studied would have a very
high overhead since they manipulate mostly strings.
6.4 MoinMoin Case Study
In this section, we describe our experience in applying
InvisiType policies to the MoinMoin Wiki system [21]. We
chose MoinMoin for our case study not only because it is
the biggest and has the most extensions, but since there was
a previously reported attempt to secure MoinMoin, we are
able to provide a comparison with previous work.
6.4.1 MoinMoin Overview
MoinMoin is a popular open-source wiki system imple-
mented in Python. Many well-known communities such as
Apache, Debian, Ubuntu and Python use MoinMoin as a
collaborative documentation tool.
MoinMoin started as a simple wiki engine; in its ﬁrst re-
lease, MoinMoin had 11,000 lines of code and had no sup-
port for third-party plugins. As it became popular, Moin-
Moin grew quickly. As of version 1.8.0, MoinMoin is as
large as 92,000 lines of code, with support for third-party
macros/plugins and access control for wiki pages.
This rapid growth in size and complexity led to several
security issues. The MoinMoin ofﬁcial web site shows that
24 security bugs have been found since 2007 [23]; this num-
ber includes bugs found in the MoinMoin distribution alone.
It is likely that hundreds of third-party plugins have similar
security issues. Sixteen out of the 24 reported bugs fall into
two categories: cross-site scripting vulnerabilities and ac-
cess control errors.
6.4.2 Taint Tracking in MoinMoin
To prevent cross-site scripting, we started by implementing
the taint policy described in Figure 2. We soon found that
tainting every string received from a socket is too strict. The
reason is that the escape method in the cgi module is not
the only way to sanitize a string. More speciﬁcally, Moin-
Moin uses Python’s standard HTTP server library to pro-
cess HTTP requests. The library checks if received requests
conform to the HTTP request syntax; doing so automati-
cally ensures that Javascript is not included in the request,
making it an effective sanitizer. As a matter of fact, since
all request URIs are echoed back with the content of a page,
treating HTTP requests as tainted would raise a false alarm
each time a page is displayed.
This shows that the InvisiType system works only as well
as the policies. Fortunately, the false alarms make it rela-
tively easy for the platform developer to tighten up the spec-
iﬁcation of the policy. We can ﬁx this problem by modify-
ing the BaseHTTPRequestHandler class in the HTTP
server in the Python standard library, as shown in Figure 11.
After the parse request method ﬁnishes parsing and
syntax checking, we can safely promote the parsed strings
back to the normal string type.
class BaseHTTPRequestHandler:
def parse_request(self):
...
requestline = self.raw_requestline
# Syntax check of HTTP request
self.command=promote(command,
TaintPolicy)
self.path=promote(path, TaintPolicy)
self.request_version=promote(version,
TaintPolicy)
Figure 11. Untainting the strings that are
checked by the HTTP Server library
6.4.3 Access Control Checking for Wiki Pages
Wiki pages in MoinMoin have access control lists (ACL)
that manage which users or groups can access the page. For
example, an ACL of a page can specify that Alice can read
and write the page, but all other users have only read access.
The access control in MoinMoin is implemented by requir-
ing developers to call an access control checking function
before reading from or writing to a wiki page. As a result,
the access control checking code is scattered throughout the
code; as of version 1.8.0, access control checks are found in
76 different places across 30 different ﬁles.
The implementation of access control checking has been
a source of security problems since it is very easy for devel-
opers to forget to insert the checking code. According to the
MoinMoin web site, there are 3 security bugs caused by dis-
regarding ACL in wiki pages [23]. Even a standard plugin
INCLUDE in the MoinMoin distribution had this problem.
INCLUDE includes a wiki page inside another wiki page;
however, the plugin failed to check the access control list
associated with the included wiki page.
it
Before explaining how we enhanced the security of
MoinMoin’s access control implementation, we ﬁrst de-
scribe the current access control implementation. Fig-
ure 12 shows the Page class representing a wiki page
and the AccessControlList class representing access
control list for a wiki page. The handler of each HTTP
request is given its own Page object.
It must ﬁrst call
getACL to get the access control list for the requested wiki
page;
then invokes acl.may (request, name,
"read") where request is the current HTTP request
and name is the user’s login name; if the access control
check succeeds, then it can invoke get raw body to re-
trieve the content of the wiki page. The added complication
is that the getACL method also invokes get raw body
to retrieve the ACL associated with the page. Hence, to
enforce access control check we should restrict the in-
vocation of get raw body, except when called by the
getACL method, until acl.may (request, name,
"read") successfully passes access control.
We enforce access control checking by deﬁning
AccessControlPolicy, as shown in Figure 13, and
subject all pages to the access control policy until their
ACLs have been checked.
To handle the complication that getACL needs to invoke