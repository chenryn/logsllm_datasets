这些问题以前不想管，现在老板重结果了，也不是不能解决，那就整呗。
随着自己能力的提升，某些类型的问题的确在逐渐减少，当主要矛盾解决掉之后，次要矛盾就上升为了主要矛盾，再继续解决。
这时候发现，有很多漏洞，要是有源代码就能很轻松的扫出来。那就上个白盒审计的产品呗，一扫，乌压压的上万的告警，仔细一看，就4个有效的，还是低危的XSS……
差点就崩溃了。
那也得接着整啊，跟扫描器一样，团队还是就这几个人（还要分出一些人处理人工审计新上线的项目）。这点资源，不要追求解决业界所有已知的漏洞不出现，追求把公司历史上出过、最常见的，而且解决起来成本不高的漏洞，做好增量控制更迫在眉睫一些。
于是我们就把白盒审计产品自带的所有原生规则都干掉，从头开始，自己按照OWASP Top
10，还有SRC历史数据上高频出现又很容易识别的规则开始，吭哧吭哧写了几十个规则。
根据自己的经验和人工的整理，迭代几个版本，终于在没什么误报的前提下，能够识别一些漏洞了。这下好了，自研的白盒审计能力也有了。每次SRC漏报的时候，负责白盒审计项目的同学也要复盘，这事我从源码上是不是一定扫不到呢？
新项目人工审计把关、黑盒自动化例行化扫描、白盒例行化审计（结合代码仓库和发布平台控制每一次迭代），都整上来了，公司的SDL能力肯定比之前强多了规范多了。
可是，这样就行了么？
其实没有，越权这种逻辑漏洞如影随形，几乎成了各大SRC的心头病。如果你是个新的白帽子，不知道挖什么漏洞，可以去试试越权，估计很快能有成就感。
而且越权漏洞这玩意吧，成本贼低，危害却高很多，比XSS什么的利用起来爽多了，动不动就能看别人数据，操作别人的资产。PR风险也大。
老板咄咄逼人之后，这事也必须解决啊，黑盒白盒其实都搞不定。垂直越权黑盒相对还有点可行性，但是水平越权这种东西，有时候业务的逻辑介于公开和半公开之间，扫描器弄俩账号去看一个ID，返回的结果是一样（证明B账号看到了A账号的数据），so
what?这事允不允许只有业务自己说了算，它是个业务逻辑强相关的事啊。
虽然扫描器扫出一大堆的可疑list，但是人工去闭环成本实在太高了（回到了老问题，人一个一个看是看不过来的，中长期天天看这玩意，工程师也要崩溃），哪怕你临时人工找到了几个真的有问题的漏洞，但是它不是个长久的事。
问题必须解决，自动化又解决不了，必须人工判断，安全工程师的人工数量又显然支持不了全公司。所以顺理成章的得出一个结论：这玩意得业务自己人工搞定。
于是很开心的跟业务说：你们应该交付安全的代码，这是你们自己的责任啊，越权漏洞这么难搞，风险又大，出了事不光是我们倒霉，你们也倒霉啊。你们不是有QA环节么，能不能每一次迭代，QA把越权测试用例当成一个“必选项”啊？
业务听了听觉得也有道理，但是你怎么知道我做没做好呢？
安全工程师说，我也不知道啊，你要是做了，就在代码里留个暗号，我回头去源码仓库里扫这个暗号，谁做了就说明他知道了，没这个暗号我就发工单提醒他做这个测试。
业务说，那要是有人恶意填这个暗号就是不干活呢？
安全工程师说，这我也没办法，但总比之前强点吧。
于是全公司开始吭哧吭哧照着这个办，一年之后，越权漏洞整体还真下降了80%。（对，的确存在少部分不正直的人，或者没做好的人）但这真的是一个不错的成绩了对吧？
然而老板却仍然不满意，他觉得，剩下那20%隐患还是很大啊，难道就真的没办法了么？
安全工程师回答，有是有，就是成本贼高，得把业务直接访问数据库给拆开来，弄个中间层，中间层负责访问数据，业务只能请求中间层要数据，而且每次请求都要带上用户的身份票据，中间层根据票据权限来判断返回数据与否。这样任何一个核心数据加上中间层，业务都迁移改造完毕，未来新的业务要访问这份数据，因为没有自由连接数据的权限，也没有自己设计权限的自由，所以就没机会再犯错误了。
微信的全程票据和Google的Gmail都是类似的思想。
那就整吧，于是吭哧吭哧开发票据服务，统一全局权限管理系统，一个一个接。
至于啥时候能接完就不知道了。
一边干啊干的，突然发现团队小伙伴越来越不开心，闹离职。原来，以前挖洞很爽的小伙伴，天天人肉看业务代码，审计出来的都是那些低级漏洞，实在是没劲。于是把能自动化的都交给黑白盒自动化审计平台，偏逻辑类的漏洞交给上面“水平越权治理”类的方法。彻底解放小伙伴，大家又能开开心心的一起战斗了。
为了让业务可以多支持几个QA环节自测的必测项目，还可以结合公司发布平台弄一些自动化的问卷，结合业务特性出推荐的一些不同的必备测试项，于是一个“威胁建模平台”诞生了。
在这个平台上，结合业务历史漏洞、涉及到的敏感数据字段和流向，员工参加线上安全培训和考试成绩（尤其是某员工名下漏洞特别多的时候），综合给评分，建议对应的同学、管理者有针对性的提升自己的能力。
比如说，扫描器很多主动规避风险的URL资产不敢扫的，可以让业务自助授权强行扫，例行化，有些白盒审计出来不一定是漏洞（仅仅是不符合安全规范），提醒业务去按规范编码。
于是很多模糊地带的东西，通过打分评价激励体系，鼓励员工去做多一些配合让步，可能会进一步提升安全性。
但是这些都是一些运营的思路，如果老板还是不满意呢？
答案可能比较简单，招更多的人，做更多的自动化项目（比如IAST），做更多的人工介入（比如Google的重点项目Chrome，当年是有4个安全工程师直接在项目组内从头跟到尾，沙箱之类的安全架构设计和实现都是这几个安全工程师搞出来的）。
整套组合拳打下来，最终，公司的产品安全性一定是有提升的。而这就是一个典型的SDL运营套路。这个套路里有什么技术含量么？其实没有，只要站在“这个问题我不放过，目标不妥协，我觉得其实是可以解决掉，哪怕是解决大部分也好”的角度，那很多团队都可以做到更好。
当然老板在整个过程中也可能一直给这个团队增加难度（比如SRC的活动要求不间断的增加奖励的力度），但是每次大家通过分析新的问题聚集性，总能找到新的主要矛盾和解决方法。
我想，这就是我想表达的安全运营了。
它的本质，是我们相信有一些目标不必妥协，本身就可以解决，于是我们竭尽全力，争取资源或者看菜下饭都行，在现有的资源里，力所能及的做到最好，实实在在的保护公司的安全。
它和技术无关，但又息息相关，每一次诊断问题的时候，没有扎实的技术基本功和行业专业视野，其实是很难给出最合适的解决思路的。有很多次，小伙伴的诊断方向其实都可能有了偏差，也是有更多的小伙伴集思广益给拉了回来。
这样的安全运营理念，它会“产品化”么？可以被“平台化”么？
我觉得可能很难，但是基于这样务实的追求，做一些方便的辅助平台，或者外包服务，应该也是挺受欢迎的吧。
今天就到这，之后结合入侵检测、应急响应、IT安全（BeyondCorp，你们有时候也叫做零信任或者无边界），我再分享一下个人的经验。
—–这里是一个广告的分割线——
嗯，最近团队在疯狂的招人。
如果你正经历着上述类似一个人的安全部的经历，有着不错的技术功底（能挖洞、会渗透、懂编程），也希望在一个相对大的平台（有挑战），做一些比较务实的安全防御工作，又或者哪怕是研究工作，可以试试来我们团队。
不看JD介绍，就看你个人匹配度。
zhaobizheng#[http://meituan.com](https://link.zhihu.com/?target=http%3A//meituan.com)