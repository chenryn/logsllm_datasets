traffic by destination host. A full discussion of BPF syntax is beyond the scope 
of this book. For additional ways to use BPF, take a peek at http://www.tcpdump 
.org/manpages/pcap-filter.7.html. 
前沿信安资讯阵地  公众号：i nf osrc
176   Chapter 8
Listing 8-3 shows the code, which filters traffic so that you capture only 
TCP traffic sent to or from port 80.
package main
import (
    "fmt"
    "log"
    "github.com/google/gopacket"
    "github.com/google/gopacket/pcap"
)
u var (
    iface    = "enp0s5"
    snaplen  = int32(1600)
    promisc  = false
    timeout  = pcap.BlockForever
    filter   = "tcp and port 80"
    devFound = false
)   
func main() {
    devices, err := pcap.FindAllDevs()v
    if err != nil {
        log.Panicln(err)
    }
    w for _, device := range devices {
        if device.Name == iface {
            devFound = true
        }
    }
    if !devFound {
        log.Panicf("Device named '%s' does not exist\n", iface)
    }
    x handle, err := pcap.OpenLive(iface, snaplen, promisc, timeout)
    if err != nil {
        log.Panicln(err)
    }
    defer handle.Close()
    y if err := handle.SetBPFFilter(filter); err != nil {
        log.Panicln(err)
    }
    z source := gopacket.NewPacketSource(handle, handle.LinkType())
    for packet := range source.Packets(){ {
        fmt.Println(packet)
    }
}  
Listing 8-3: Using a BPF filter to capture specific network traffic (/ch-8/filter/main.go)
前沿信安资讯阵地  公众号：i nf osrc
Raw Packet Processing   177
The code starts by defining several variables necessary to set up the 
packet capture u. Included among these is the name of the interface on 
which you want to capture data, the snapshot length (the amount of data 
to capture for each frame), the promisc variable (which determines whether 
you’ll be running promiscuous mode), and your time-out. Also, you define 
your BPF filter: tcp and port 80. This will make sure you capture only packets 
that match those criteria.
Within your main() function, you enumerate the available devices v, 
looping through them to determine whether your desired capture interface 
exists in your device list w. If the interface name doesn’t exist, then you 
panic, stating that it’s invalid.
What remains in the rest of the main() function is your capturing logic. 
From a high-level perspective, you need to first obtain or create a *pcap.Handle, 
which allows you to read and inject packets. Using this handle, you can then 
apply a BPF filter and create a new packet data source, from which you can 
read your packets.
You create your *pcap.Handle (named handle in the code) by issuing a call 
to pcap.OpenLive() x. This function receives an interface name, a snapshot 
length, a boolean value defining whether it’s promiscuous, and a time-out 
value. These input variables are all defined prior to the main() function, as 
we detailed previously. Call handle.SetBPFFilter(filter) to set the BPF filter 
for your handle y, and then use handle as an input while calling gopacket 
.NewPacketSource(handle, handle.LinkType()) to create a new packet data 
source z. The second input value, handle.LinkType(), defines the decoder 
to use when handling packets. Lastly, you actually read packets from the 
wire by using a loop on source.Packets() {, which returns a channel. 
As you might recall from previous examples in this book, looping on 
a channel causes the loop to block when it has no data to read from the 
channel. When a packet arrives, you read it and print its contents to screen. 
The output should look like Listing 8-4. Note that the program requires 
elevated privileges because we’re reading raw content off the network.
$ go build -o filter && sudo ./filter
PACKET: 74 bytes, wire length 74 cap length 74 @ 2020-04-26 08:44:43.074187 -0500 CDT
- Layer 1 (14 bytes) = Ethernet 
{Contents=[..14..] Payload=[..60..] 
SrcMAC=00:1c:42:cf:57:11 DstMAC=90:72:40:04:33:c1 EthernetType=IPv4 Length=0}
- Layer 2 (20 bytes) = IPv4 
{Contents=[..20..] Payload=[..40..] Version=4 IHL=5 
TOS=0 Length=60 Id=998 Flags=DF FragOffset=0 TTL=64 Protocol=TCP Checksum=55712 
SrcIP=10.0.1.20 DstIP=54.164.27.126 Options=[] Padding=[]}
- Layer 3 (40 bytes) = TCP 
{Contents=[..40..] Payload=[] SrcPort=51064 
DstPort=80(http) Seq=3543761149 Ack=0 DataOffset=10 FIN=false SYN=true RST=false 
PSH=false ACK=false URG=false ECE=false CWR=false NS=false Window=29200 
Checksum=23908 Urgent=0 Options=[..5..] Padding=[]}
PACKET: 74 bytes, wire length 74 cap length 74 @ 2020-04-26 08:44:43.086706 -0500 CDT
- Layer 1 (14 bytes) = Ethernet 
{Contents=[..14..] Payload=[..60..] 
SrcMAC=00:1c:42:cf:57:11 DstMAC=90:72:40:04:33:c1 EthernetType=IPv4 Length=0}
- Layer 2 (20 bytes) = IPv4 
{Contents=[..20..] Payload=[..40..] Version=4 IHL=5 
TOS=0 Length=60 Id=23414 Flags=DF FragOffset=0 TTL=64 Protocol=TCP Checksum=16919 
SrcIP=10.0.1.20 DstIP=204.79.197.203 Options=[] Padding=[]}
前沿信安资讯阵地  公众号：i nf osrc
178   Chapter 8
- Layer 3 (40 bytes) = TCP 
{Contents=[..40..] Payload=[] SrcPort=37314 
DstPort=80(http) Seq=2821118056 Ack=0 DataOffset=10 FIN=false SYN=true RST=false 
PSH=false ACK=false URG=false ECE=false CWR=false NS=false Window=29200 
Checksum=40285 Urgent=0 Options=[..5..] Padding=[]}
Listing 8-4: Captured packets logged to stdout
Although the raw output isn’t very digestible, it certainly contains a 
nice separation of each layer. You can now use utility functions, such as 
packet.ApplicationLayer() and packet.Data(), to retrieve the raw bytes for a 
single layer or the entire packet. When you combine the output with hex 
.Dump(), you can display the contents in a much more readable format. Play 
around with this on your own.
Sniffing and Displaying Cleartext User Credentials
Now let’s build on the code you just created. You’ll replicate some of the 
functionality provided by other tools to sniff and display cleartext user 
credentials. 
Most organizations now operate by using switched networks, which send 
data directly between two endpoints rather than as a broadcast, making it 
harder to passively capture traffic in an enterprise environment. However, 
the following cleartext sniffing attack can be useful when paired with some-
thing like Address Resolution Protocol (ARP) poisoning, an attack that can 
coerce endpoints into communicating with a malicious device on a switched 
network, or when you’re covertly sniffing outbound traffic from a compro-
mised user workstation. In this example, we’ll assume you’ve compromised a 
user workstation and focus solely on capturing traffic that uses FTP to keep 
the code brief. 
With the exception of a few small changes, the code in Listing 8-5 is 
nearly identical to the code in Listing 8-3.
package main
import (
    "bytes"
    "fmt"
    "log"
    "github.com/google/gopacket"
    "github.com/google/gopacket/pcap"
)
var (
    iface    = "enp0s5"
    snaplen  = int32(1600)
    promisc  = false
    timeout  = pcap.BlockForever
    u filter   = "tcp and dst port 21"
    devFound = false
)
前沿信安资讯阵地  公众号：i nf osrc
Raw Packet Processing   179
func main() {
    devices, err := pcap.FindAllDevs()
    if err != nil {
        log.Panicln(err)
    }   
    for _, device := range devices {
        if device.Name == iface {
            devFound = true
        }   
    }   
    if !devFound {
        log.Panicf("Device named '%s' does not exist\n", iface)
    }
    handle, err := pcap.OpenLive(iface, snaplen, promisc, timeout)
    if err != nil {
        log.Panicln(err)
    }
    defer handle.Close()
    if err := handle.SetBPFFilter(filter); err != nil {
        log.Panicln(err)
    }   
    source := gopacket.NewPacketSource(handle, handle.LinkType())
    for packet := range source.Packets() {
        v appLayer := packet.ApplicationLayer()
        if appLayer == nil {
            continue
        }   
        w payload := appLayer.Payload()
        x if bytes.Contains(payload, []byte("USER")) {
            fmt.Print(string(payload))
        } else if bytes.Contains(payload, []byte("PASS")) {
            fmt.Print(string(payload))
        }   
    }   
}
Listing 8-5: Capturing FTP authentication credentials (/ch-8 /ftp/main.go)
The changes you made encompass only about 10 lines of code. First, 
you change your BPF filter to capture only traffic destined for port 21 (the 
port commonly used for FTP traffic) u. The rest of the code remains the 
same until you process the packets. 
To process packets, you first extract the application layer from the packet 
and check to see whether it actually exists v, because the application layer 
contains the FTP commands and data. You look for the application layer by 
examining whether the response value from packet.ApplicationLayer() is nil. 
Assuming the application layer exists in the packet, you extract the payload 
(the FTP commands/data) from the layer by calling appLayer.Payload() w. 
前沿信安资讯阵地  公众号：i nf osrc
180   Chapter 8
(There are similar methods for extracting and inspecting other layers and 
data, but you only need the application layer payload.) With your payload 
extracted, you then check whether the payload contains either the USER or 
PASS commands x, indicating that it’s part of a login sequence. If it does, 
display the payload to the screen. 
Here’s a sample run that captures an FTP login attempt:
$ go build -o ftp && sudo ./ftp
USER someuser
PASS passw0rd
Of course, you can improve this code. In this example, the payload will 
be displayed if the words USER or PASS exist anywhere in the payload. Really, 
the code should be searching only the beginning of the payload to elimi-
nate false-positives that occur when those keywords appear as part of file 
contents transferred between client and server or as part of a longer word 
such as PASSAGE or ABUSER. We encourage you to make these improvements 
as a learning exercise.
Port Scanning Through SYN-flood Protections
In Chapter 2, you walked through the creation of a port scanner. You 
improved the code through multiple iterations until you had a high-
performing implementation that produced accurate results. However, in 
some instances, that scanner can still produce incorrect results. Specifically, 
when an organization employs SYN-flood protections, typically all ports—
open, closed, and filtered alike—produce the same packet exchange to 
indicate that the port is open. These protections, known as SYN cookies, 
prevent SYN-flood attacks and obfuscate the attack surface, producing 
false-positives.
When a target is using SYN cookies, how can you determine whether a 
service is listening on a port or a device is falsely showing that the port is 
open? After all, in both cases, the TCP three-way handshake is completed. 
Most tools and scanners (Nmap included) look at this sequence (or some 
variation of it, based on the scan type you’ve chosen) to determine the 
status of the port. Therefore, you can’t rely on these tools to produce 
accurate results. 
However, if you consider what happens after you’ve established a connec-
tion—an exchange of data, perhaps in the form of a service banner—you 
can deduce whether an actual service is responding. SYN-flood protections 
generally won’t exchange packets beyond the initial three-way handshake 
unless a service is listening, so the presence of any additional packets might 
indicate that a service exists.  
Checking TCP Flags
To account for SYN cookies, you have to extend your port-scanning capa-
bilities to look beyond the three-way handshake by checking to see whether 
前沿信安资讯阵地  公众号：i nf osrc
Raw Packet Processing   181
you receive any additional packets from the target after you’ve established a 
connection. You can accomplish this by sniffing the packets to see if any of 
them were transmitted with a TCP flag value indicative of additional, legiti-
mate service communications. 
TCP flags indicate information about the state of a packet transfer. If 
you look at the TCP specification, you’ll find that the flags are stored in a 
single byte at position 14 in the packet’s header. Each bit of this byte repre-
sents a single flag value. The flag is “on” if the bit at that position is set to 1, 
and “off” if the bit is set to 0. Table 8-1 shows the positions of the flags in 
the byte, as per the TCP specification.
Table 8-1: TCP Flags and Their Byte Positions
Bit
7
6
5
4
3
2
1
0
Flag
CWR
ECE
URG
ACK
PSH
RST
SYN
FIN
Once you know the positions of the flags you care about, you can create 
a filter that checks them. For example, you can look for packets containing 
the following flags, which might indicate a listening service:
•
ACK and FIN
•
ACK
•
ACK and PSH
Because you have the ability to capture and filter certain packets by 
using the gopacket library, you can build a utility that attempts to connect to 
a remote service, sniffs the packets, and displays only the services that com-
municate packets with these TCP headers. Assume all other services are 
falsely “open” because of SYN cookies. 
Building the BPF Filter
Your BPF filter needs to check for the specific flag values that indicate packet 
transfer. The flag byte has the following values if the flags we mentioned 
earlier are turned on:
•
ACK and FIN: 00010001 (0x11)
•
ACK: 00010000 (0x10)
•
ACK and PSH: 00011000 (0x18)
We included the hex equivalent of the binary value for clarity, as you’ll 
use the hex value in your filter. 
To summarize, you need to check the 14th byte (offset 13 for a 0-based 
index) of the TCP header, filtering only for packets whose flags are 0x11, 
0x10, or 0x18. Here’s what the BPF filter looks like:
tcp[13] == 0x11 or tcp[13] == 0x10 or tcp[13] == 0x18
Excellent. You have your filter. 
前沿信安资讯阵地  公众号：i nf osrc
182   Chapter 8
Writing the Port Scanner
Now you’ll use the filter to build a utility that establishes a full TCP connec-
tion and inspects packets beyond the three-way handshake to see whether 
other packets are transmitted, indicating that an actual service is listening. 
The program is shown in Listing 8-6. For the sake of simplicity, we’ve opted 
to not optimize the code for efficiency. However, you can greatly improve 
this code by making optimizations similar to those we made in Chapter 2.
var ( u
    snaplen  = int32(320)
    promisc  = true
    timeout  = pcap.BlockForever
    filter   = "tcp[13] == 0x11 or tcp[13] == 0x10 or tcp[13] == 0x18"
    devFound = false
    results  = make(map[string]int)
)
func capture(iface, target string) { v
    handle, err := pcap.OpenLive(iface, snaplen, promisc, timeout)
    if err != nil {
        log.Panicln(err)
    }