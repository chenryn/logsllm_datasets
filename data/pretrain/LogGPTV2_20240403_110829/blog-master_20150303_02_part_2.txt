```  
postgres=# select var_pop(c1) from (values(1),(2),(3),(4),(5),(1000)) as t(c1);  
       var_pop         
---------------------  
 138058.472222222222  
(1 row)  
postgres=# select covar_pop(c1,c1) from (values(1),(2),(3),(4),(5),(1000)) as t(c1);  
    covar_pop       
------------------  
 138058.472222222  
(1 row)  
```  
验证 : (如果两组数据的误差一样, 那么和计算一组数据的方差得到的结果是一样的)。  
如下两组数据, 1,2,3,4,5,1000; 2,3,4,5,6,1001; 他们各自的方差一样, 所以协方差也一样  
```  
postgres=# select var_pop(c1) from (values(1,2),(2,3),(3,4),(4,5),(5,6),(1000,1001)) as t(c1,c2);  
       var_pop         
---------------------  
 138058.472222222222  
(1 row)  
postgres=# select var_pop(c2) from (values(1,2),(2,3),(3,4),(4,5),(5,6),(1000,1001)) as t(c1,c2);  
       var_pop         
---------------------  
 138058.472222222222  
(1 row)  
postgres=# select covar_pop(c1,c2) from (values(1,2),(2,3),(3,4),(4,5),(5,6),(1000,1001)) as t(c1,c2);  
    covar_pop       
------------------  
 138058.472222222  
(1 row)  
```  
7\. 相关性, 线性相关性, Correlation   
表示两组数据的相关性, 相关值从0到1取值, 趋向1表示完全相关, 趋向0 表示完全不相关.  
http://zh.wikipedia.org/wiki/%E7%9B%B8%E5%85%B3  
http://baike.baidu.com/view/172091.htm  
相关表和相关图可反映两个变量之间的相互关系及其相关方向，但无法确切地表明两个变量之间相关的程度。于是，著名统计学家卡尔·皮尔逊设计了统计指标——相关系数(Correlation coefficient)。相关系数是用以反映变量之间相关关系密切程度的统计指标。相关系数是按积差方法计算，同样以两变量与各自平均值的离差为基础，通过两个离差相乘来反映两变量之间相关程度；着重研究线性的单相关系数。  
在PostgreSQL中的统计信息中也有相关性的应用, 例如用于评估数据的物理存储和值的相关性, 方便优化器计算索引扫描的成本, 相关性越高, 越趋向索引, 因为离散块扫描会更少. 可以参考如下.  
http://blog.163.com/digoal@126/blog/static/163877040201512810112541/  
在PostgreSQL中计算两组数据的相关性.  
```  
postgres=# select corr(c1,c2) from (values(1,2),(2,3),(3,4),(4,5),(5,6),(1000,1001)) as t(c1,c2);  
 corr   
------  
    1  
(1 row)  
postgres=# select corr(c1,c2) from (values(1,2),(2,3),(3,4),(4,5),(5,6),(1000,1)) as t(c1,c2);  
        corr          
--------------------  
 -0.652023240836194  
(1 row)  
```  
另外可看百度提到的例子 :   
软件公司在全国有许多代理商，为研究它的财务软件产品的广告投入与销售额的关系，统计人员随机选择10家代理商进行观察，搜集到年广告投入费和月平均销售额的数据，并编制成相关表，见表1:  
表1 广告费与月平均销售额相关表 单位：万元  
```  
年广告费投入 | 月均销售额  
12.5  15.3  23.2  26.4  33.5  34.4  39.4  45.2  55.4  60.9  
21.2  23.9  32.9  34.1  42.5  43.2  49.0  52.8  59.4  63.5  
```  
参照表1，可计算相关系数如表2：  
```  
序号 | 广告投入(万元) x | 月均销售额(万元) y  
1  2  3  4  5  6  7  8  9  10  
12.5  15.3  23.2  26.4  33.5  34.4  39.4  45.2  55.4  60.9  
21.2  23.9  32.9  34.1  42.5  43.2  49.0  52.8  59.4  63.5  
156.25  234.09  538.24  696.96  1122.25  1183.36  1552.36  2043.04  3069.16  3708.81  
449.44  571.21  1082.41  1162.81  1806.25  1866.24  2401.00  2787.84  3528.36  4032.25  
265.00  365.67  763.28  900.24  1423.75  1486.08  1930.60  2386.56  3290.76  3867.15  
合计  346.2  422.5  14304.52  19687.81  16679.09  
```  
=0.9942  
相关系数为0.9942，说明广告投入费与月平均销售额之间有高度的线性正相关关系。  
相关性越高, 说明广告投入和销售额的关系越明显.  
相关性是如何计算的呢? 实际上是 "协方差(x,y)除以(平方根(方差(x)*方差(y)))" .   
![pic](20150303_02_pic_007.png)  
```  
postgres=# select corr(c1,c2) from (values(1,2),(2,3),(3,4),(4,5),(5,6),(1000,1)) as t(c1,c2);  
        corr          
--------------------  
 -0.652023240836194  
(1 row)  
```  
使用以上公式计算结果一致 :   
```  
postgres=# select covar_pop(c1,c2)/dsqrt(var_pop(c1)*var_pop(c2)) from (values(1,2),(2,3),(3,4),(4,5),(5,6),(1000,1)) as t(c1,c2);  
      ?column?        
--------------------  
 -0.652023240836194  
(1 row)  
```  
## 参考  
1\. 百度百科  
2\. 百度词条  
3\. 维基百科  
4\. http://www.postgresql.org/docs/9.4/static/functions-aggregate.html  
5\. 用到的PostgreSQL聚合函数源码在此  
    src/backend/utils/adt/float.c  
6\. 更多玩法, 如果要在PostgreSQL中使用R语言或MADlib库, 请参考如下.  
http://www.joeconway.com/plr/  
http://madlib.net/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")