{PRFK; (n-ml) ( K ) } K ; .  
and 
Procedure 1: Key update 
tribution.  The hint  message  contains  the  key  ver$cation 
VKJ, which is derived from the new key VK, = PRFK~ (0) 
and has a length of n3  bits.  The right-hand  members com- 
pute  the  following  candidate  keys.  For  each  possibility 
for  CL, they  compute  CLR and  obtain  a  candidate  key 
K = PRFc;,(K). 
The member verifies the candidate key 
by checking against the key  verification PRFR(O)  to see if 
it equals V K ~ .  
If  n1  =  722,  the  left-hand  members  compute the  key 
in  the same way  as the right-hand members.  In  the usual 
case, however, n1   n l .  Generally setting 723  = n1 + 1 results 
in "half  a false positive key"  on average, which works well 
in practice. 
Procedure 2: Key recovery from hint 
The advantage of the hint is that it is 2nl -723  bits shorter 
than  the  key  update  (In general,  7x3  = n1 + 1 and hence 
the hint is n1  - 1 bits shorter than the full key update).  In 
the ideal case nl  = 722  and then  the hint  is only  half  the 
size of the key  update.  However, 722  is determined by  the 
security  parameter,  which  we discuss  further in  section 7. 
We discuss the security in Appendix B. 
6.2  The ELK Key Distribution Protocol 
The previous subsection introduces the mechanisms we 
use to construct ELK. We now use these mechanisms to de- 
scribe ELK in detail.  We show how the protocol works for 
member join and leave events.  For the following protocol 
description, we assume that a large number of members are 
present in the group (we do not discuss the boundary cases 
when only a few group members are present). 
Even though group key distribution protocols allow users 
to join  or  leave  the  group  at  any  time,  in  general  it  is 
considered a good practice to aggregate join  and leave  re- 
quests  that  occur  in  one time  interval  into one group  key 
update  [30].  Also  as  we  will  see  below,  the  key  update 
252 
message is  smaller when  the  key  server aggregates multi- 
ple  membership events.  Therefore-we assume that  in  our 
system  the  key  server divides. the  time  up  into  intervals. 
The key  server aggregates all: membership events that  oc- 
cur within  one time interval into one:group  key update. The 
duration  of  the  aggregation interval  is application  specific 
and we do not discuss it here. 
6.2.1  Member Join Event 
In  a  member join  event,  the  key  server  assigns  the  new 
member to a node  in  the key tree and the new  member re- 
ceives all the keys on the path from its leaf node to the root. 
To  preserve  backward  secrecy,  all  the  keys  that  the  new 
member receives  must  be  independent of  previous  group 
keys.  Looking at independence from a computational per- 
spective, we require that it be computationally infeasible for 
the new member to derive previous group keys. In most pre- 
vious schemes, the updated keys need to be broadcast to the 
affected group members. 
Since the key server broadcasts  key update messages to 
all  the  group members,  the  communication  overhead  can 
be prohibitively high for large.dynamic groups.  Due to the 
continuous increase in computation power, we design ELK 
to  trade  off  computation  for  lower  communication  over- 
head. To support efficient member join events, we propose 
a novel approach where no broadeast  messages are needed 
but requires that the server computes a one-way function on 
all keys in each time interval:  In ELK the entire key tree is 
updated in each time intervaliusing the following procedure. 
To update a key Ki in the key.tree, the new key K: is derived 
by  Kl  =  PRF("'")(KG),.where  Kf  =  PRF(,;"")(4) 
and KG is the current  group key.  To update the group key 
we use the derivation K&. = PRF(n+n) 
(0). Each member 
can update its key path independent1.y-.in each time interval. 
Hence no broadcast mesagesare needed for a member join 
event.  Since the  computation of  the PRF  is  efficient,  the 
computational overhead of: the receiver  is  negligible.  The 
overhead  at  the  server is  larger,  but,still tractable.  First, 
the server can pre-compte the  future keys of the tree  in a 
low-priority background process.  A'second approach is to 
recompute keys on  the  fly based  on  need.  The major ad- 
vantage of this approach is that no broadcast  information is 
necessary when members join. 
Ki 
KP 
Even though no broadcast messages are necessary  when 
members join, the key server might  still need to send a few 
unicast messages as some members might be moved to new 
locations in the key tree as new nodes are added to the key 
tree.  In  the rest  of this  section, we first describe the com- 
plete join protocol  for single members join and give an ex- 
ample. 
M3 
M4 
Figure 2. Member join event 
Protocol 1.  Single Member Join 
I. 
2. 
The  key  server  updates  all  keys  Ki  in  the key  tree: 
K,' = PRF:T")(Kc), 
K;:  = PRF~;") 
and the new group key is 
(0). 
I f  an empty leaf  node is available, the server assigns 
a new random key to the leaf node and sends it over U 
secure channel to the new member along with the up- 
dated keys on the key path. Thus the join event is done, 
and no more exchanges or broadcasts are necessary. 
3. 
If no leaf node is available, the key server assigns the 
new member M  to a new leaf node N M  of the key tree 
and assigns it a new random key K M .  
4. 
5. 
6. 
The key server picks a node N j  of the key tree to insert 
the new member  Assume that the key at that node is 
K3. The server demotes the node N3 and generates 
a new parent node N p  for the leaf N M  and node N j .  
The node N3 becomes the left child, and the node N M  
the right child of  Np.  The key value of the parent be- 
comes ~p  = PRF("+")(I). 
K,6 
The key server sends the new member all updated keys 
on its key path from the leaf node up to the root over a 
secure channel. 
The key server sends the joining  location to the niem- 
bers that are below node Nj, which allows them to in- 
dependently update their own key paths. In the general 
case, Nj  is a leaf node and the key server unicasts the 
message  to that member.  I f a  larger number of  mem- 
bers are present, the server includes NJ- in the key up- 
date message, which takes at most [log,(N)] bits. 
Figure 2 shows an example join event where member M4 
joins the group an the server decides to insert it at the leaf 
node of M3. We illustrate  the steps of the ELK join proto- 
col on this example.  In the first step, the server updates all 
253 
keys in the key tree.  Step 2 does not apply since no empty 
leaf  nodes are available.  In step 3 the key server generates 
the new leaf  node and assigns it a new random key  K7.  In 
step 4, the  server decides to merge M4  to the  node of K:, 
and generates the parent node KG  of KL  and K7. The server 
computes the new key:  KG = PRF("'"'(1). 
In step 5 the 
server sends M4  the message  { Ki , KA, K~}K;. In step 6, 
the server sends the joining location of the new member to 
M3  by unicast, which tells Ms to update its key tree and to 
compute K6. 
K! 
(Multiple member join events work equally well. Several 
possibilities  exist to deal  with  them.  Here is one way.  If 
the members are placed into empty leaf nodes no overhead 
is generated besides registering new members with the key 
server. If no empty leaf nodes exist, the key server can first 
generate a smaller key tree with the new members, and join 
that tree to one node of the current group key tree.  In this 
case the server only needs to communicate the location  of 
a  single  node  to  the  members that  live  below  the joining 
node.) 
6.2.2  Member Leave Event 
The member leave event is more complicated than the mem- 
ber join event, because  all  the keys that the  leaving mem- 
ber knows need to be replaced with new keys that the leav- 
ing member must not be able to compute (forward secrecy, 
see Section  2).  The key  server uses the child contribution 
scheme outlined in Section 6.1.1 to update the keys on the 
path  from the  leaf  node of the  leaving  member  up  to  the 
root.  The server broadcasts a key  update message contain- 
ing the updated keys and also attach hint messages to data 
packets to enable key recovery in case the key update mes- 
sage is lost. 
Protocol 2.  Member Leave 
1.  The server deletes  the leaf  node corresponding  to the 
leaving member; as well as the parent node of the leaf 
node, and promotes the sibling node. 
2.  All  remaining  nodes  on  the  key  path  of  the  leaving 
member need  to be updated.  For  each of  these keys, 
the update procedure for key K, is as follows. The new 
key is 
K,' = PRF$z'")(K,),  with 
(n-+nz) (K,), where 
CLR = 
K,l and K,, are the left and right child keys, respec- 
tively. 
P R F ( ~ + ~ I )  (K,)  I  PRFKpp 
K ?  
3.  The  server  broadcasts  the  key  update  message  of 
all  keys  that  were  updated  in  the  previous  step. 
Hence, for each key  K,'  the update message  contains 
{ P R F$; 
) ( K,) 1 K f v  , { P R ~ $ 2  
17.  n z )  ( K, 1 Kt:. 
Figure 3. Member leave event 
4.  The server attaches the following hint message to data 
packets.  For  each new  key  Ki  the  server  may  send 
p R F ( n,+ 
K ,  -r 
3 ) (01, { L S B ( " ~ - ~ ~ ) ( P R F ( " + ~ ~ )  
(KZ)))K5.2 
Kp, 
This is clearer in an example.  See Figure 3  and the box 
labeled Example 1 .  
6.2.3  Multiple Member Leave Events 
Above, we write that there are several good ways to realize 
multiple memberjoin events. Multiple member leave events 
have  some subtlety  though,  so we  sketch  the  approach  in 
slightly greater detail. 
In case multiple members leave in the same interval, the 
key  server aggregates all  the leaving members and creates 
a joint leave key  update message.  ELK can aggregate the 
concurrent member leave events particularly well and pro- 
vides  (in  addition  to current savings)  a  50% savings over 
OFT  [2]'  for  keys  when  both  children  change.  The rea- 
son for OFT'S inefficiency is that if both child keys change, 
OFT needs two key  updates (one for each child), whereas 
ELK only needs one. ELK factors fresh contributions from 
both child keys into the parent  key  on a leave key  update, 
regardless on whether the children changed. The size of the 
key update message in ELK is ( a  - j ) ( n ,  + na), where a is 
the number of updated keys and j is the number of  leaving 
members.  Since the number of updated keys is always less 
than  the sum of all  keys in  each key  path, it is always ad- 
vantageous to aggregate multiple member leave events.  In 
?It  seems that  a pre-computation  attack  is  possible  here,  since  an  at- 
for all the keys K .  
the adversary c m  
tacker  could  pre-compute  the image  PRFJ,"'""(O) 
In this case, when the server publishes PRF(n,+n3)(0) 
K;Y 
look up the E Z n w n 3   pre-images that are candidates for the key.  In prac- 
tice, however. n is larger than 64 bits, foiling such an attack. Note that the 
size of  ELK key  updates remains  the same regardless  of  the length n of 
keys. 
3We discuss OFT in Section 8. Like OFT, we derive keys using a binary 
tree with members represented at leaves. 
2 54 