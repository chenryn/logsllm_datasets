### Local Kernel Debugging on Windows 10 and Later

Local Kernel Debugging (LKD) is protected by Secure Boot on Windows 10, Server 2016, and later versions. To enable LKD, you must disable Secure Boot in the BIOS settings of the machine. If disabling Secure Boot is not an option, an alternative method using the Sysinternals LiveKd tool can be used.

#### Using Sysinternals LiveKd
1. Copy `LiveKd.exe` to the main directory of Debugging Tools for Windows.
2. Launch WinDbg using LiveKd with the following command:
   ```sh
   livekd -w
   ```
   Note that this method may result in stale data due to how LiveKd operates. You may need to exit and relaunch the debugger periodically.

#### Enabling Local Kernel Debugging
1. Restart the system.
2. Launch WinDbg with elevated privileges (use the 64-bit version if your system is 64-bit).
3. Select `File / Attach To Kernel (WinDbg preview)` or `File / Kernel Debugâ€¦ (classic WinDbg)`.
4. Choose the `Local` tab and click `OK`.

You should see output similar to the following:

```
Microsoft (R) Windows Debugger Version 10.0.22415.1003 AMD64
Copyright (c) Microsoft Corporation. All rights reserved.
Connected to Windows 10 22000 x64 target at (Wed Sep 29 10:57:30.682 2021 (UTC + 3:00)), ptr64 TRUE
************* Path validation summary **************
Response Time (ms)
Location
Deferred
SRV*c:\symbols*https://msdl.microsoft.com/download/symbols
Symbol search path is: SRV*c:\symbols*https://msdl.microsoft.com/download/symbols
Executable search path is:
Windows 10 Kernel Version 22000 MP (6 procs) Free x64
Product: WinNt, suite: TerminalServer SingleUserTS
Edition build lab: 22000.1.amd64fre.co_release.210604-1628
Machine Name:
Kernel base = 0xfffff802`07a00000 PsLoadedModuleList = 0xfffff802`08629710
Debug session time: Wed Sep 29 10:57:30.867 2021 (UTC + 3:00)
System Uptime: 0 days 16:44:39.106
```

The prompt will display `lkd`, indicating that Local Kernel Debugging is active.

### Basic Commands for Kernel Debugging

If you are familiar with kernel debugging commands, you can skip this section. Otherwise, here are some basic commands and their usage:

#### Displaying Process Information
To display basic information for all processes running on the system, use the `!process 0 0` command:
```sh
lkd> !process 0 0
```
This will output a list of processes with details such as EPROCESS address, SessionId, Cid, Peb, ParentCid, DirBase, ObjectTable, HandleCount, and Image.

For example:
```
**** NT ACTIVE PROCESS DUMP ****
PROCESS ffffd104936c8040
SessionId: none
Cid: 0004
Peb: 00000000
ParentCid: 0000
DirBase: 006d5000
ObjectTable: ffffa58d3cc44d00
HandleCount: 3909.
Image: System
...
```

#### Detailed Process Information
To get more detailed information about a specific process, you can use the `!process` command with additional arguments. For example, to list all processes running `explorer.exe`:
```sh
lkd> !process 0 0 explorer.exe
```

To display more information for a specific process, specify its EPROCESS address and a higher level of detail:
```sh
lkd> !process ffffd1049e7a60c0 1
```

#### Viewing PEB Information
To view the Process Environment Block (PEB) of a process, first set the correct process context and then use the `!peb` command:
```sh
lkd> .process /p ffffd1049e7a60c0; !peb d3e343000
```

#### Thread Information
To display thread information for a process, use the `!process` command with a detail level of 2:
```sh
lkd> !process ffffd1049e7a60c0 2
```

#### Full Process Details
To show full details for a process, omit the detail level argument:
```sh
lkd> !process ffffd1049e7a60c0
```

### Additional Resources
For more detailed information on jobs and other kernel objects, refer to the Windows Internals 7th edition part 1 and Windows 10 System Programming, Part 1 books.

By following these steps and using the provided commands, you can effectively perform local kernel debugging on your Windows system.