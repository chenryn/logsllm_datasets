Local Kernel Debugging is protected by Secure Boot on Windows 10, Server 2016, and later. To
activate LKD you’ll have to disable Secure Boot in the machine’s BIOS settings. If, for whatever
reason, this is not possible, there is an alternative using the Sysinternals LiveKd tool. Copy
LiveKd.exe to the Debugging Tools for Windows main directory. Then launch WinDbg using
LiveKd with the following command: livekd -w. The experience is not the same, as data may
become stale because of the way Livekd works, and you may need to exit the debugger and
relaunch from time to time.
After the system is restarted, launch WinDbg elevated (the 64-bit one, if you are on a 64-bit system). Select
the menu File / Attach To Kernel (WinDbg preview) or File / Kernel Debug… (classic WinDbg). Select the
Local tab and click OK. You should see output similar to the following:
Microsoft (R) Windows Debugger Version 10.0.22415.1003 AMD64
Copyright (c) Microsoft Corporation. All rights reserved.
Connected to Windows 10 22000 x64 target at (Wed Sep 29 10:57:30.682 2021 (UTC \
+ 3:00)), ptr64 TRUE
************* Path validation summary **************
Response
Time (ms)
Location
Deferred
SRV*c:\symbols*https://msdl.micr\
osoft.com/download/symbols
Symbol search path is: SRV*c:\symbols*https://msdl.microsoft.com/download/symbo\
ls
Executable search path is:
Windows 10 Kernel Version 22000 MP (6 procs) Free x64
Product: WinNt, suite: TerminalServer SingleUserTS
Edition build lab: 22000.1.amd64fre.co_release.210604-1628
Machine Name:
Kernel base = 0xfffff802`07a00000 PsLoadedModuleList = 0xfffff802`08629710
Debug session time: Wed Sep 29 10:57:30.867 2021 (UTC + 3:00)
System Uptime: 0 days 16:44:39.106
Note the prompt displays lkd. This indicates Local Kernel Debugging is active.
Chapter 5: Debugging and Tracing
96
Local kernel Debugging Tutorial
If you’re familiar with kernel debugging commands, you can safely skip this section.
You can display basic information for all processes running on the system with the process 0 0
command:
lkd> !process 0 0
**** NT ACTIVE PROCESS DUMP ****
PROCESS ffffd104936c8040
SessionId: none
Cid: 0004
Peb: 00000000
ParentCid: 0000
DirBase: 006d5000
ObjectTable: ffffa58d3cc44d00
HandleCount: 3909.
Image: System
PROCESS ffffd104936e2080
SessionId: none
Cid: 0058
Peb: 00000000
ParentCid: 0004
DirBase: 0182c000
ObjectTable: ffffa58d3cc4ea40
HandleCount:
0.
Image: Secure System
PROCESS ffffd1049370a080
SessionId: none
Cid: 0090
Peb: 00000000
ParentCid: 0004
DirBase: 011b6000
ObjectTable: ffffa58d3cc65a80
HandleCount:
0.
Image: Registry
PROCESS ffffd10497dd0080
SessionId: none
Cid: 024c
Peb: bc6c2ba000
ParentCid: 0004
DirBase: 10be4b000
ObjectTable: ffffa58d3d49ddc0
HandleCount:
60.
Image: smss.exe
...
For each process, the following information is displayed:
• The address attached to the PROCESS text is the EPROCESS address of the process (in kernel space,
of course).
• SessionId - the session the process is running under.
• Cid - (client ID) the unique process ID.
• Peb - the address of the Process Environment Block (PEB). This address is in user space, naturally.
• ParentCid - (parent client ID) the process ID of the parent process. Note that it’s possible the parent
process no longer exists, so this ID may belong to some process created after the parent process
terminated.
• DirBase - physical address of the Master Page Directory for this process, used as the basis for virtual
to physical address translation. On x64, this is known as Page Map Level 4, and on x86 it’s Page
Directory Pointer Table (PDPT).
• ObjectTable - pointer to the private handle table for the process.
Chapter 5: Debugging and Tracing
97
• HandleCount - number of handles in the handle table for this process.
• Image - executable name, or special process name for those not associated with an executable (such
as Secure System, System, Mem Compression).
The !process command accepts at least two arguments. The first indicates the process of interest using its
EPROCESS address or the unique Process ID, where zero means “all or any process”. The second argument
is the level of detail to display (a bit mask), where zero means the least amount of detail. A third argument
can be added to search for a particular executable. Here are a few examples:
List all processes running explorer.exe:
lkd> !process 0 0 explorer.exe
PROCESS ffffd1049e118080
SessionId: 1
Cid: 1780
Peb: 0076b000
ParentCid: 16d0
DirBase: 362ea5000
ObjectTable: ffffa58d45891680
HandleCount: 3208.
Image: explorer.exe
PROCESS ffffd104a14e2080
SessionId: 1
Cid: 2548
Peb: 005c1000
ParentCid: 0314
DirBase: 140fe9000
ObjectTable: ffffa58d46a99500
HandleCount: 2613.
Image: explorer.exe
List more information for a specific process by specifying its address and a higher level of detail:
lkd> !process ffffd1049e7a60c0 1
PROCESS ffffd1049e7a60c0
SessionId: 1
Cid: 1374
Peb: d3e343000
ParentCid: 0314
DirBase: 37eb97000
ObjectTable: ffffa58d58a9de00
HandleCount: 224.
Image: dllhost.exe
VadRoot ffffd104b81c7db0 Vads 94 Clone 0 Private 455. Modified 2. Locked 0.
DeviceMap ffffa58d41354230
Token
ffffa58d466e0060
ElapsedTime
01:04:36.652
UserTime
00:00:00.015
KernelTime
00:00:00.015
QuotaPoolUsage[PagedPool]
201696
QuotaPoolUsage[NonPagedPool]
13048
Working Set Sizes (now,min,max)
(4330, 50, 345) (17320KB, 200KB, 1380KB)
PeakWorkingSetSize
4581
VirtualSize
2101383 Mb
PeakVirtualSize
2101392 Mb
PageFaultCount
5427
MemoryPriority
BACKGROUND
BasePriority
8
Chapter 5: Debugging and Tracing
98
CommitCharge
678
Job
ffffd104a05ed380
As can be seen from the above output, more information on the process is displayed. Some of this
information is hyperlinked, allowing easy further examination. For example, the job this process is part of
(if any) is a hyperlink, executing the !job command if clicked.
Click on the Job address hyperlink:
lkd> !job ffffd104a05ed380
Job at ffffd104a05ed380
Basic Accounting Information
TotalUserTime:
0x0
TotalKernelTime:
0x0
TotalCycleTime:
0x0
ThisPeriodTotalUserTime:
0x0
ThisPeriodTotalKernelTime: 0x0
TotalPageFaultCount:
0x0
TotalProcesses:
0x1
ActiveProcesses:
0x1
FreezeCount:
0
BackgroundCount:
0
TotalTerminatedProcesses:
0x0
PeakJobMemoryUsed:
0x2f5
PeakProcessMemoryUsed:
0x2f5
Job Flags
[wake notification allocated]
[wake notification enabled]
[timers virtualized]
Limit Information (LimitFlags: 0x800)
Limit Information (EffectiveLimitFlags: 0x403800)
JOB_OBJECT_LIMIT_BREAKAWAY_OK
A Job is a kernel object that manages one or more processes, for which it can apply various
limits and get accounting information. A discussion of jobs is beyond the scope of this book.
More information can be found in the Windows Internals 7th edition part 1 and Windows 10
System Programming, Part 1 books.
As usual, a command such as !job hides some information available in the real data structure. In this
case, the typoe is EJOB. Use the command dt nt!_ejob with the job address to see all the details.
The PEB of a process can be viewed as well by clicking its hyperlink. This is similar to the !peb command
used in user mode, but the twist here is that the correct process context must be set first, as the address is
in user space. Click the Peb hyperlink. You should see something like this:
Chapter 5: Debugging and Tracing
99
lkd> .process /p ffffd1049e7a60c0; !peb d3e343000
Implicit process is now ffffd104`9e7a60c0
PEB at 0000000d3e343000
InheritedAddressSpace:
No
ReadImageFileExecOptions: No
BeingDebugged:
No
ImageBaseAddress:
00007ff661180000
NtGlobalFlag:
0
NtGlobalFlag2:
0
Ldr
00007ffb37ef9120
Ldr.Initialized:
Yes
Ldr.InInitializationOrderModuleList: 000001d950004560 . 000001d95005a960
Ldr.InLoadOrderModuleList:
000001d9500046f0 . 000001d95005a940
Ldr.InMemoryOrderModuleList:
000001d950004700 . 000001d95005a950
Base TimeStamp
Module
7ff661180000 93f44fbf Aug 29 00:12:31 2048 C:\WINDOWS\system32\DllH\
ost.exe
7ffb37d80000 50702a8c Oct 06 15:56:44 2012 C:\WINDOWS\SYSTEM32\ntdl\
l.dll
7ffb36790000 ae0b35b0 Jul 13 01:50:24 2062 C:\WINDOWS\System32\KERN\
EL32.DLL
...
The correct process context is set with the .process meta command, and then the PEB is displayed.
This is a general technique you need to use to show memory that is in user space - always make sure the
debugger is set to the correct process context.
Execute the !process command again, but with the second bit set for the details:
lkd> !process ffffd1049e7a60c0 2
PROCESS ffffd1049e7a60c0
SessionId: 1
Cid: 1374
Peb: d3e343000
ParentCid: 0314
DirBase: 37eb97000
ObjectTable: ffffa58d58a9de00
HandleCount: 221.
Image: dllhost.exe
THREAD ffffd104a02de080
Cid 1374.022c
Teb: 0000000d3e344000 Win32Thread: \
ffffd104b82ccbb0 WAIT: (UserRequest) UserMode Non-Alertable
ffffd104b71d2860
SynchronizationEvent
THREAD ffffd104a45e8080
Cid 1374.0f04
Teb: 0000000d3e352000 Win32Thread: \
ffffd104b82ccd90 WAIT: (WrUserRequest) UserMode Non-Alertable
ffffd104adc5e0c0
QueueObject
THREAD ffffd104a229a080
Cid 1374.1ed8
Teb: 0000000d3e358000 Win32Thread: \
Chapter 5: Debugging and Tracing
100
ffffd104b82cf900 WAIT: (UserRequest) UserMode Non-Alertable
ffffd104b71dfb60
NotificationEvent
ffffd104ad02a740
QueueObject
THREAD ffffd104b78ee040
Cid 1374.0330
Teb: 0000000d3e37a000 Win32Thread: \
0000000000000000 WAIT: (WrQueue) UserMode Alertable
ffffd104adc4f640
QueueObject
Detail level 2 shows a summary of the threads in the process along with the object(s) they are waiting on
(if any).
You can use other detail values (4, 8), or combine them, such as 3 (1 or 2).
Repeat the !process command again, but this time with no detail level. More information is shown for
the process (the default in this case is full details):
lkd> !process ffffd1049e7a60c0
PROCESS ffffd1049e7a60c0
SessionId: 1
Cid: 1374
Peb: d3e343000
ParentCid: 0314
DirBase: 37eb97000
ObjectTable: ffffa58d58a9de00
HandleCount: 223.
Image: dllhost.exe
VadRoot ffffd104b81c7db0 Vads 94 Clone 0 Private 452. Modified 2. Locked 0.
DeviceMap ffffa58d41354230
Token
ffffa58d466e0060
ElapsedTime
01:10:30.521
UserTime
00:00:00.015
KernelTime
00:00:00.015
QuotaPoolUsage[PagedPool]