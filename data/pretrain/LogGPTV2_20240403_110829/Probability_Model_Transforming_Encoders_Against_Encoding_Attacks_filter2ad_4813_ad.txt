5. Concatenate (Si)i, pad the concatenation to a string S of
length lnmax with random bits and then output S as a seed
for M, where nmax is the maximum length of generating
sequences in R S (i.e., the depth of the generating graph).
In opposite, the IS-PMTE decodes the seed S as follows:
1. Split S into nmax l-bit strings (Si)
2. Decode Si to the rule ri by decode(·|r1r2 . . .ri−1) in turn
3. Generate the message M from the generating sequence
i=1 by M = G(RS), then output M as the mes-
and ignore the padding bits.
nmax
i=1 .
RS = (ri)n
sage of S.
Note that generating sequences vary in length. Because
seeds in S are of ﬁxed length, padding is necessary for some
sequences when encoding. Furthermore, as the sequence
space R S is preﬁx-free, padding bits can be ignored unam-
biguously when decoding. In addition, note that in Step 2) of
encoding the probabilities of sequences are calculated as the
discretization P(d) of P, which is necessary to guarantee the
uniformity of seeds (see Theorem 3).
Due to the generality of GPMs, IS-PMTEs not only apply
to probability models discussed in this paper, but also apply
to general probability models, such as neural networks for
passwords [27].
Figure 3 depicts how “password” is encoded by our IS-
PMTE for the Chatterjee-PCFG model. First, parse all gen-
erating sequences of “password”. Corresponding to Fig-
ure 2, “password” has two generating sequences {S → W,
W → password} and {S → WW, W → pass, W → word}. Sec-
ond, choose a sequence with the probability (0.02/0.02002 ≈
0.999 for the ﬁrst one and 0.001 for the second one). Here we
take the second one as an example. Third, encode each gen-
erating rule in the sequence by searching the CDF table and
translate real-number seeds to bit-string seeds with roundl.
Note that in the PCFG models, the conditional probabilities
of generating rules do not depend on the previous rules and
the rules with the same lefthand-side have the same CDF ta-
ble. Therefore, the same CDF table is searched for generating
rules W → pass and W → word. Finally, concatenate seeds of
rules, pad the concatenation to a ﬁxed length with random
bits and get a seed for “password”.
Figure 3: Encode “password” by our IS-PMTE for the
Chatterjee-PCFG model
5.3 Difference Between IS-PMTEs and Exist-
ing PMTEs
It is easy to get IS-PMTEs from existing GPMs of password
vaults and genomic data by our proposed generic transforming
method. The following are the differences between the IS-
PMTEs and the existing PMTEs [10, 14] for password vaults:
1. IS-PMTEs randomly choose a generating sequence,
while the existing PMTEs only choose a deterministic
generating sequence. This is the key to resist encoding
attacks. Note that the random selection may have high
time complexity, fortunately there is a method to reduce
it. We leave the details in Appendix C.
2. IS-PMTEs use roundl(x) to convert a real-number seed
to an integer seed, while Chatterjee et al. [10] designed
another method to convert a rational-number seed to an
integer seed. Unfortunately, Chatterjee et al.’s method
cannot be applied to some distributions, e.g., normal dis-
tribution. This is because probabilities may be irrational
numbers. The method we use (proposed by Juels and
Ristenpart [21]) is applicable to arbitrary distributions.
In addition, IS-PMTEs have the same form as the ex-
isting PMTEs for password vaults, which is encode-then-
concatenate. At the same time, the existing PMTEs [18] for
genomic data use another shrink-then-encode form. When
USENIX Association
28th USENIX Security Symposium    1581
passwordParseandobtainallgeneratingsequenceswithprobabilities:(S→W,W→password)0.02(S→WW,W→pass,W→word)0.00002Chooseageneratingsequencewithnormalizedprobability(takethesecondsequenceasanexample)EncodeW→a0.01an0.001......pass0.02......word0.01......00.010.0110.60.620.780.7910.615S→D0.1DW0.05......W0.2......WW0.1......00.10.150.40.60.740.8410.77W→a0.01an0.001......pass0.02......word0.01......00.010.0110.60.620.780.7910.787TranslatetobitstringConcatenateandpad11000...∥10011...∥11001...∥...∥...W→passW→wordS→WW0.6150.7870.7710011...11001...11000...encoding a string, these genomic data PMTEs shrink the seed
interval for each character in the string and further pick a
random seed in the ﬁnal seed interval as the seed for the
string. Unfortunately, each interval-shrinking needs to com-
plete large integer arithmetic of length ln to calculate the
interval boundary, where l is the storage overhead parameter,
and n is the length of the string. This arithmetic costs Ω(ln)
time for each character and Ω(ln2) time for the string. In
contrast, our IS-PMTEs only need to do integer arithmetic of
length l for each character with lower time complexity Θ(ln)
for a string.
5.4 Security of IS-PMTEs
The weak and strong encoding attacks have more generic
forms for the PMTEs such as IS-PMTEs who may ran-
domly choose a generating path when encoding. If the PMTE
chooses a deterministic generating path when encoding, these
generic forms will degenerate to the given forms in Section
4.5. For the weak encoding attack, the more generic form of
feature EC is
S ∈ encode(decode(S)),
where encode(M) represents all encoded seeds from M. If
the seed S does not have feature EC, then S can be de-
coded to the message M = decode(S) but cannot be encoded
from the message M. Therefore, S is a decoy seed. In or-
der to resist weak encoding attack, it is necessary to ensure
that encode(M) = decode−1(M) for every message M ∈ M ,
where decode−1(M) represents all seeds which can be de-
coded into M. In PMTEs with deterministic encoding paths,
the generating paths for all seeds in encode(M) are the same
one. In this case, the weak encoding attack degenerates to the
given form in Section 4.5.
For the strong encoding attack, the more generic form of
the weight function is
Prencode(S|decode(S)),
where Prencode(S|M) represents the probability that M is en-
coded as S under the condition of message M. We denote
it as pGSEA(S). In order to resist strong encoding attack,
it is necessary to ensure that Prencode(S|M) are equal for
every S ∈ decode−1(S), i.e., all valid seeds are uniformly
chosen when encoding. We call this property seed unifor-
mity. Further, if a DTE has this property, attackers cannot
get any useful information except the message from a seed
(see Theorem 2). This well explains why our IS-PMTEs
choose a generating sequence RS in G−1(M) with the proba-
bility P(d)(RS|M) when encoding—it precisely guarantees
that seeds are uniform (see Theorem 3). In addition, for
PMTEs with deterministic encoding path, the strong en-
coding attack degenerates to the form in Section 4.5, be-
cause pGSEA ∝ pSEA. Let M denote the message, RS = (ri)i
|encode(M)|
|encode(RS)|
=
1
1
denote the deterministic generating sequence of M, S de-
note the seed of M, then we have: 1) if S ∈ encode(M),
pSEA(S);
pGSEA(S) =
2) otherwise, pGSEA(S) = 0 = pSEA(S).
= 1
|S|P(RS) = 1
|S|
In the following, we prove the security of IS-PMTEs, i.e.,
decoy seeds/messages are indistinguishable from real ones
by any adversary. Let M denote the message space, Prreal
denote the probability density function of real messages, S
denote the seed space, and DTE = (encode, decode) denote
the DTE. Juels and Ristenpart [21] used the advantage of
an attacker A who distinguishes between the real and de-
coy message-seed pairs to evaluate the security of a DTE,
where the advantage is Advdte
DTE,real(A) = |Pr[A(S,M) = 1 :
M ←Prreal M ; S ←$ encode(M)]− Pr[A(S,M) = 1 : S ←$S;
M ← decode(S)]|. This advantage can be simpliﬁed, if DTE
has some properties. Correctness is the most basic prop-
erty of a DTE, which means seeds encoded from the mes-
sage M can be decoded to M correctly for every message M,
i.e., encode(M) ⊆ decode−1(M) for every M ∈ M . If DTE
is correct, attackers can get the message M from the seed
S. Therefore, Advdte
DTE,real(A) can be simpliﬁed to the ad-
vantage of attacker B, who distinguishes between the real
and decoy seeds, where the advantage is Advdte,S
DTE,real(B) =
|Pr[B(S) = 1 : M ←Prreal M ; S ←$ encode(M)]− Pr[B(S) =
1 : S ←$S ]| (see Theorem 1). Moreover, if DTE is correct
and seed-uniform, Advdte
DTE,real(A) can be further simpliﬁed
to the advantage of an attacker B, who distinguishes be-
tween the real and decoy messages, where the advantage is
Advdte,M
DTE,real(B) =|Pr[B(M) = 1 : M ←Prreal M ]−Pr[B(M) =
1 : S ←$S; M ← decode(S)]| (see Theorem 2). The proof de-
tails are given in Appendix A.
Theorem 1. If DTE is correct, then for any attacker A, who
distinguishes between the real and decoy message-seed pairs,
there exists an attacker B (as follows), who distinguishes
between the real and decoy seeds with Advdte,S
DTE,real(B) =
Advdte
DTE,real(A).
B(S)
M ← decode(S)
return A(S,M)
Theorem 2. If DTE is correct and seed-uniform, for any at-
tacker A, who distinguishes between the real and decoy seeds,
there exists an attacker B (as follows), who distinguishes be-
tween the real and decoy messages with Advdte,M
DTE,real(B) =
Advdte,S
DTE,real(A).
B(M)
S ←$ encode(M)
return A(S)
1582    28th USENIX Security Symposium
USENIX Association
Our proposed IS-PMTEs have the above two properties,
thus we neglect the difference between these three types
of attackers. Let GPM denote the GPM and IS-PMTE de-
note the IS-PMTE of GPM. The message generated by IS-
PMTE (decoding random seed) is indistinguishable from
the message generated by GPM. Formally, the advantage
maxA Advgpm
IS-PMTE,GPM(A) is negligible in l (Theorem 5),
where Advgpm
IS-PMTE,GPM(A) = |Pr[A(M) = 1 : M ←PrIS-PMTE
M ] − Pr[A(M) = 1 : M ←PrGPM M ]|, PrGPM is the prob-
ability density function P of GPM and PrIS-PMTE(M) =
P(d)(M) = Pr[M = M(cid:48) : S ←$S;M(cid:48) ← decode(S)]. This
means that we design a secure PMTE for a GPM.
In addition, Advdte
IS-PMTE,GPM(A) +
Advgpm
GPM,real(A). If GPM is an accurate probability model
for real messages, i.e., Advgpm
GPM,real(A) is negligible, then
Advdte
IS-PMTE,real is negligible, i.e., IS-PMTE is secure for the
real message distribution.
IS-PMTE,real(A) ≤ Advgpm
Theorem 3. IS-PMTE is correct and seed-uniform.
IS-CDTEX ,realX (A)≤ m
Theorem 4. IS-CDTE is transformed from the condi-
tional probability Prreal(M|X), the seed length is l and m =
|M |. Then for any condition X and any distinguishing at-
tacker A, Advdte
2l , where PrIS-CDTEX (M) =
PrIS-CDTE(M|X) and PrrealX (M) = Prreal(M|X).
Theorem 5. Assume the maximum length of generating paths
is n and each vertex has at most m children in the generat-
ing graph of GPM, then Advgpm
for any
attacker A. Further, Advdte
GPM,real(A) +
Advgpm
IS-PMTE,GPM(A) ≤ nm
IS-PMTE,real(A) ≤ Advgpm
GPM,real(A) + nm
2l .
IS-PMTE,GPM(A) ≤ Advgpm
In summary, we propose a generic method for transforming
a GPM to a PMTE. The PMTE is secure for the GPM, which
means the PMTE is able to resist encoding attacks. To resist
distribution difference attacks, an appropriate GPM is needed,
for example, statistical language models for natural language
texts. Designing such a GPM, however, needs professional
knowledge of the real messages, we leave it to experts in
related ﬁelds.
2l
6 Experimental Results
In this section, we evaluate the security of the existing PMTEs
on real datasets under the attacks we propose. In the literature,
none of the PMTEs for password vaults can resist encoding
attacks as well as none of the PMTEs for genomic data can
resist the PCA+SVM attack. But here, we show that our pro-
posed IS-PMTEs for existing password vault models [10, 14]
achieve the expected security against encoding attacks as
stated in Section 5.4.
6.1 Security Metrics
The ranks of real messages in the order sorted by attackers
reﬂect the security of DTEs. If a DTE is perfectly secure, the
real message ranks are evenly distributed under any attack.
Accordingly, we use the real message rank distribution as a
security metric like [10, 14].
More speciﬁcally, we calculate the rank of the message
M as follows: 1) generate N decoy messages {Mi}N
i=1 (by
decoding random seeds); 2) calculate the proportion ˆr−(M)
(resp. ˆr+(M)) of decoy messages with greater (resp. greater
or equal) weight than M in {Mi}N
i=1; 3) pick a random real
number in [ˆr−(M), ˆr+(M)] as the rank ˆr(M). Same as [10,14],
we set N = 999. But different from [10,14] using average rank
r (of real messages) and accuracy α (of distinguishing a real
message from a decoy one), we use rank cumulative distribu-
tion functions (RCDFs) F(x) of real messages to represent
attack results. This presentation is more comprehensive than
r and α. For example, F−1(1) indicates the max rank of real
messages, and F(0) indicates the proportion of real messages
of rank 0 (i.e., ranking the ﬁrst). In other words, the attacker
excludes 1− F−1(1) proportion decoy messages for all real
messages and excludes all decoy messages for F(0) propor-
tion of real messages. In addition, r and α can be calculated
from F(x) as:
(cid:90) 1
r = 1−
α = 1− r.
0
F(x)dx,
(3)
(4)
6.2 Datasets