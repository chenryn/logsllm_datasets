http://www.google.com/intl/en/policies/privacy/
注意在页面中出现的链接格式，在之后我们会介绍如何将这些链接，根据根路径（
https://golang.org ）生成可以直接访问的url。
在函数outline中，我们通过递归的方式遍历整个HTML结点树，并输出树的结构。在outline内
部，每遇到一个HTML元素标签，就将其入栈，并输出。
gopl.io/ch5/outline
func main() {
doc, err := html.Parse(os.Stdin)
if err != nil {
fmt.Fprintf(os.Stderr, "outline: %v\n", err)
os.Exit(1)
}
outline(nil, doc)
}
func outline(stack []string, n *html.Node) {
if n.Type == html.ElementNode {
stack = append(stack, n.Data) // push tag
fmt.Println(stack)
}
for c := n.FirstChild; c != nil; c = c.NextSibling {
outline(stack, c)
}
}
有一点值得注意：outline有入栈操作，但没有相对应的出栈操作。当outline调用自身时，被调
用者接收的是stack的拷贝。被调用者对stack的元素追加操作，修改的是stack的拷贝，其可
能会修改slice底层的数组甚至是申请一块新的内存空间进行扩容；但这个过程并不会修改调
用方的stack。因此当函数返回时，调用方的stack与其调用自身之前完全一致。
下面是 https://golang.org 页面的简要结构:
递归 170
gopl
$ go build gopl.io/ch5/outline
$ ./fetch https://golang.org | ./outline
[html]
[html head]
[html head meta]
[html head title]
[html head link]
[html body]
[html body div]
[html body div]
[html body div div]
[html body div div form]
[html body div div form div]
[html body div div form div a]
...
正如你在上面实验中所见，大部分HTML页面只需几层递归就能被处理，但仍然有些页面需要
深层次的递归。
大部分编程语言使用固定大小的函数调用栈，常见的大小从64KB到2MB不等。固定大小栈会
限制递归的深度，当你用递归处理大量数据时，需要避免栈溢出；除此之外，还会导致安全
性问题。与相反,Go语言使用可变栈，栈的大小按需增加(初始时很小)。这使得我们使用递归
时不必考虑溢出和安全问题。
练习 5.1： 修改findlinks代码中遍历n.FirstChild链表的部分，将循环调用visit，改成递归调
用。
练习 5.2： 编写函数，记录在HTML树中出现的同名元素的次数。
练习 5.3： 编写函数输出所有text结点的内容。注意不要访问 和 元素,因为
这些元素对浏览者是不可见的。
练习 5.4： 扩展visit函数，使其能够处理其他类型的结点，如images、scripts和style
sheets。
递归 171
gopl
5.3. 多返回值
在Go中，一个函数可以返回多个值。我们已经在之前例子中看到，许多标准库中的函数返回2
个值，一个是期望得到的返回值，另一个是函数出错时的错误信息。下面的例子会展示如何
编写多返回值的函数。
下面的程序是findlinks的改进版本。修改后的findlinks可以自己发起HTTP请求，这样我们就不
必再运行fetch。因为HTTP请求和解析操作可能会失败，因此findlinks声明了2个返回值：链
接列表和错误信息。一般而言，HTML的解析器可以处理HTML页面的错误结点，构造出
HTML页面结构，所以解析HTML很少失败。这意味着如果findlinks函数失败了，很可能是由
于I/O的错误导致的。
gopl.io/ch5/findlinks2
func main() {
for _, url := range os.Args[1:] {
links, err := findLinks(url)
if err != nil {
fmt.Fprintf(os.Stderr, "findlinks2: %v\n", err)
continue
}
for _, link := range links {
fmt.Println(link)
}
}
}
// findLinks performs an HTTP GET request for url, parses the
// response as HTML, and extracts and returns the links.
func findLinks(url string) ([]string, error) {
resp, err := http.Get(url)
if err != nil {
return nil, err
}
if resp.StatusCode != http.StatusOK {
resp.Body.Close()
return nil, fmt.Errorf("getting %s: %s", url, resp.Status)
}
doc, err := html.Parse(resp.Body)
resp.Body.Close()
if err != nil {
return nil, fmt.Errorf("parsing %s as HTML: %v", url, err)
}
return visit(nil, doc), nil
}
多返回值 172
gopl
在findlinks中，有4处return语句，每一处return都返回了一组值。前三处return，将http和html
包中的错误信息传递给findlinks的调用者。第一处return直接返回错误信息，其他两处通过
fmt.Errorf（§7.8）输出详细的错误信息。如果findlinks成功结束，最后的return语句将一组解
析获得的连接返回给用户。
在finallinks中，我们必须确保resp.Body被关闭，释放网络资源。虽然Go的垃圾回收机制会回
收不被使用的内存，但是这不包括操作系统层面的资源，比如打开的文件、网络连接。因此
我们必须显式的释放这些资源。
调用多返回值函数时，返回给调用者的是一组值，调用者必须显式的将这些值分配给变量:
links, err := findLinks(url)
如果某个值不被使用，可以将其分配给blank identifier:
links, _ := findLinks(url) // errors ignored
一个函数内部可以将另一个有多返回值的函数作为返回值，下面的例子展示了与findLinks有
相同功能的函数，两者的区别在于下面的例子先输出参数：
func findLinksLog(url string) ([]string, error) {
log.Printf("findLinks %s", url)
return findLinks(url)
}
当你调用接受多参数的函数时，可以将一个返回多参数的函数作为该函数的参数。虽然这很
少出现在实际生产代码中，但这个特性在debug时很方便，我们只需要一条语句就可以输出所
有的返回值。下面的代码是等价的：
log.Println(findLinks(url))
links, err := findLinks(url)
log.Println(links, err)
准确的变量名可以传达函数返回值的含义。尤其在返回值的类型都相同时，就像下面这样：
func Size(rect image.Rectangle) (width, height int)
func Split(path string) (dir, file string)
func HourMinSec(t time.Time) (hour, minute, second int)
虽然良好的命名很重要，但你也不必为每一个返回值都取一个适当的名字。比如，按照惯
例，函数的最后一个bool类型的返回值表示函数是否运行成功，error类型的返回值代表函数
的错误信息，对于这些类似的惯例，我们不必思考合适的命名，它们都无需解释。
多返回值 173
gopl
如果一个函数将所有的返回值都显示的变量名，那么该函数的return语句可以省略操作数。这
称之为bare return。
// CountWordsAndImages does an HTTP GET request for the HTML
// document url and returns the number of words and images in it.
func CountWordsAndImages(url string) (words, images int, err error) {
resp, err := http.Get(url)
if err != nil {
return
}
doc, err := html.Parse(resp.Body)
resp.Body.Close()
if err != nil {
err = fmt.Errorf("parsing HTML: %s", err)
return
}
words, images = countWordsAndImages(doc)
return
}
func countWordsAndImages(n *html.Node) (words, images int) { /* ... */ }
按照返回值列表的次序，返回所有的返回值，在上面的例子中，每一个return语句等价于：
return words, images, err
当一个函数有多处return语句以及许多返回值时，bare return 可以减少代码的重复，但是使得
代码难以被理解。举个例子，如果你没有仔细的审查代码，很难发现前2处return等价于
return 0,0,err（Go会将返回值 words和images在函数体的开始处，根据它们的类型，将其初
始化为0），最后一处return等价于 return words，image，nil。基于以上原因，不宜过度使用
bare return。
练习 5.5： 实现countWordsAndImages。（参考练习4.9如何分词）
练习 5.6： 修改gopl.io/ch3/surface (§3.2) 中的corner函数，将返回值命名，并使用bare
return。
多返回值 174
gopl
5.4. 错误
在Go中有一部分函数总是能成功的运行。比如strings.Contains和strconv.FormatBool函数，
对各种可能的输入都做了良好的处理，使得运行时几乎不会失败，除非遇到灾难性的、不可
预料的情况，比如运行时的内存溢出。导致这种错误的原因很复杂，难以处理，从错误中恢
复的可能性也很低。
还有一部分函数只要输入的参数满足一定条件，也能保证运行成功。比如time.Date函数，该
函数将年月日等参数构造成time.Time对象，除非最后一个参数（时区）是nil。这种情况下会
引发panic异常。panic是来自被调函数的信号，表示发生了某个已知的bug。一个良好的程序
永远不应该发生panic异常。
对于大部分函数而言，永远无法确保能否成功运行。这是因为错误的原因超出了程序员的控
制。举个例子，任何进行I/O操作的函数都会面临出现错误的可能，只有没有经验的程序员才
会相信读写操作不会失败，即时是简单的读写。因此，当本该可信的操作出乎意料的失败
后，我们必须弄清楚导致失败的原因。
在Go的错误处理中，错误是软件包API和应用程序用户界面的一个重要组成部分，程序运行
失败仅被认为是几个预期的结果之一。
对于那些将运行失败看作是预期结果的函数，它们会返回一个额外的返回值，通常是最后一
个，来传递错误信息。如果导致失败的原因只有一个，额外的返回值可以是一个布尔值，通
常被命名为ok。比如，cache.Lookup失败的唯一原因是key不存在，那么代码可以按照下面的
方式组织：
value, ok := cache.Lookup(key)
if !ok {
// ...cache[key] does not exist…
}
通常，导致失败的原因不止一种，尤其是对I/O操作而言，用户需要了解更多的错误信息。因
此，额外的返回值不再是简单的布尔类型，而是error类型。
内置的error是接口类型。我们将在第七章了解接口类型的含义，以及它对错误处理的影响。
现在我们只需要明白error类型可能是nil或者non-nil。nil意味着函数运行成功，non-nil表示失
败。对于non-nil的error类型,我们可以通过调用error的Error函数或者输出函数获得字符串类型
的错误信息。
fmt.Println(err)
fmt.Printf("%v", err)
错误 175
gopl
通常，当函数返回non-nil的error时，其他的返回值是未定义的(undefined),这些未定义的返回
值应该被忽略。然而，有少部分函数在发生错误时，仍然会返回一些有用的返回值。比如，
当读取文件发生错误时，Read函数会返回可以读取的字节数以及错误信息。对于这种情况，
正确的处理方式应该是先处理这些不完整的数据，再处理错误。因此对函数的返回值要有清
晰的说明，以便于其他人使用。
在Go中，函数运行失败时会返回错误信息，这些错误信息被认为是一种预期的值而非异常
（exception），这使得Go有别于那些将函数运行失败看作是异常的语言。虽然Go有各种异
常机制，但这些机制仅被使用在处理那些未被预料到的错误，即bug，而不是那些在健壮程序
中应该被避免的程序错误。对于Go的异常机制我们将在5.9介绍。
Go这样设计的原因是由于对于某个应该在控制流程中处理的错误而言，将这个错误以异常的
形式抛出会混乱对错误的描述，这通常会导致一些糟糕的后果。当某个程序错误被当作异常
处理后，这个错误会将堆栈根据信息返回给终端用户，这些信息复杂且无用，无法帮助定位
错误。
正因此，Go使用控制流机制（如if和return）处理异常，这使得编码人员能更多的关注错误处
理。
5.4.1. 错误处理策略
当一次函数调用返回错误时，调用者有应该选择何时的方式处理错误。根据情况的不同，有
很多处理方式，让我们来看看常用的五种方式。
首先，也是最常用的方式是传播错误。这意味着函数中某个子程序的失败，会变成该函数的
失败。下面，我们以5.3节的findLinks函数作为例子。如果findLinks对http.Get的调用失败，
findLinks会直接将这个HTTP错误返回给调用者：
resp, err := http.Get(url)
if err != nil{
return nil, err
}
当对html.Parse的调用失败时，findLinks不会直接返回html.Parse的错误，因为缺少两条重要
信息：1、错误发生在解析器；2、url已经被解析。这些信息有助于错误的处理，findLinks会
构造新的错误信息返回给调用者：
doc, err := html.Parse(resp.Body)
resp.Body.Close()
if err != nil {
return nil, fmt.Errorf("parsing %s as HTML: %v", url,err)
}
错误 176
gopl
fmt.Errorf函数使用fmt.Sprintf格式化错误信息并返回。我们使用该函数前缀添加额外的上下文
信息到原始错误信息。当错误最终由main函数处理时，错误信息应提供清晰的从原因到后果
的因果链，就像美国宇航局事故调查时做的那样：