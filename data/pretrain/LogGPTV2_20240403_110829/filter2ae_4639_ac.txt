            if ( !NT_SUCCESS( NtStatus ) )
            /* Bail out: NtStatus
             */
                *hObject = hOutputHandle;
        }
        return(NtStatus);
    }
hObject: 分配的内核对象句柄  
ObjectType:
目前该参数只有两个值0/1，用于标识两个内核对象UserApcReserve和IoCompletionReserve，IoCompletionReserve对象大小为0x60。
## 3.2 Preparing Pool Memory
翻译自 Kernel Pool Exploitation on Windows 7 (BlackHat_DC_2011_Mandt_kernelpool-wp)  
内核池利用的一个重要方面是能够一致地覆盖所需的内存。
由于内核池的碎片状态使分配的位置无法预测，因此攻击者必须首先使用内核对象或其他可控制的内存分配对内核池进行碎片整理。
在这方面的目标是分配所有空闲块，以使池分配器返回一个新页面。 用相同大小的分配填充新分配的页面，并释放第二个分配，这使攻击者可以为易受攻击的缓冲区创建漏洞。
反过来，这将使攻击者能够溢出用于填充内核池的对象或内存分配。
## 3.3 池喷射
尝试利用内核池漏洞时，必须处理块（chunks）和池（pool）的元数据。如果你想避免蓝屏，你需要控制一切，因为在块头上会有一些额外的检查。  
内核池喷射是一项使池中分配位置可预测的艺术。这意味着你可以知道一个块将被分配到哪里，哪些块在其附近。  
如果您想要泄露某些精确的信息或覆盖特定的数据，利用内核池喷射是必须的。  
池喷射的基础是分配足够的对象，以确保您控制分配的位置。
Windows为我们提供了许多在不同类型的池中分配对象的工具。例如，我们可以在NonPagedPool（非分页池）中分配ReservedObjects或Semaphore
。关键是要找到与您要控制的池类型相匹配的对象。您选择的对象大小也很重要，因为它与创建后所留的空隙大小直接相关。一旦您选择了对象，您将首先通过大量分配该对象使得池非随机化。  
上面申请的对象是属于内核对象，针对内核漏洞的堆喷射，微软有一个内核对象列表，我们可以通过调用用户模式功能来创建内核对象，尽管它不是很完整。  
[https://msdn.microsoft.com/library/windows/desktop/ms724485(v=vs.85).aspx](https://msdn.microsoft.com/library/windows/desktop/ms724485%28v=vs.85%29.aspx)  
有些细节仍然需要注意，否则可能会遇到麻烦：
  1. 如果您选择的对象的大小不超过0x200字节，这很可能会在lookaside列表中存储相应的释放块，这样这些块的不会被合并。为避免这种情况，您必须释放足够多的对象填充满lookaside列表。
  2. 您的释放的块可能会落在DeferredFree列表中，并且不会立即合并。所以你必须释放足够多的对象来填充满这个列表，这样才能释放出块制造空隙。
  3. 最后，你在池中分配对象，这对于整个内核是很常见的。这意味着您刚创建的空隙可能随时被您无法控制的东西分配填充。所以你必须要快！
`上述步骤的要点是：`
  1. 通过使用对象的句柄，选择需要释放的块
  2. 释放足够的块填满lookaside列表
  3. 释放选定的块
  4. 免释放足够的块填充DeferredFree列表
  5. 尽可能快地使用你制造的空隙！
该技术实际应用中会有些改动。  
先了解下UAF中的步骤  
1.首先申请0x10000个该对象并将指针保存下来；  
2.然后再申请0x5000个对象，将指针保存下来；  
3.第二步中的0x5000个对象，每隔一个对象释放一个对象；  
第一步的操作是将现有的空余堆块都申请出来，第二步中申请出来的堆块应该都是连续的，通过第三步的操作，使得我们申请UAE_AFTER_FREE结构体其前面的堆块应该不是空闲的，因此在释放的时候不会合并，从而再分配的时候出现意外的可能性基本为0。
### 参考
Windows内核池喷射1-偏内核池介绍 
## 3.4 内核对象
### 3.4.1 内核对象类型查询
池喷射需要找到适合大小的内核对象  
这里使用windbg分析  
首先，获取更全面的对象列表
    !object \ObjectTypes
这是一个可以在内核空间中分配的对象的列表。我们可以通过查看更多的细节来探索几个关于它们的重要属性。使用命令 dt nt!_OBJECT_TYPE
_OBJECT_TYPE_INITIALIZER 结构的偏移量，它将给我们带来极大的方便。让我们看看它为我们提供了 Mutant 对象的哪些我想要的信息：
    dt nt!_OBJECT_TYPE 8521a838
然后阅读下 _OBJECT_TYPE_INITIALIZER
    dt nt!_OBJECT_TYPE_INITIALIZER 8521a838+28
_OBJECT_TYPE_INITIALIZER中有两个关键信息  
`此对象被分配给的池类型 – 在这里是非分页池（NonPagedPool）`  
`功能偏移（这在实际的漏洞利用部分十分重要）`  
上面就是可获取到内核对象的一些信息，在实际过程中，分配到内核池的时候大小可能会有一些偏差。  
像 用户模式 CreateMutexA调用可在内核中创建Mutant对象，而未命名和命名的mutex大小是不一样的，提供的名称会占用Mutant对象大小。
### 3.4.2 内核对象实际分析
接下来我们再测试下实际分配到内核池中时的大小怎么查看。  
如下运行一段代码,会创建IoCompletionReserve内核对象，并保持不退出。  
PS:这边获取到的句柄为0x70
    from ctypes import *
    from ctypes.wintypes import *
    kernel32 = windll.kernel32
    ntdll = windll.ntdll
    def alloc_iocreserve():
        IO_COMPLETION_OBJECT = 1
        hHandle = HANDLE(0)
        ntdll.NtAllocateReserveObject(byref(hHandle), 0x0, IO_COMPLETION_OBJECT)
        hHandle = hHandle.value
        if hHandle == None:
            print "[-] Error while creating IoCompletionReserve"
            return 0
        print "Handle: " + hex(hHandle)
        return hex(hHandle)
    alloc_iocreserve()
    variable = raw_input('Press any key to exit...')
搜索名称为python.exe的进程信息
    kd> !process 0 0 python.exe
    PROCESS 88bd0030  SessionId: 1  Cid: 0b00    Peb: 7ffd3000  ParentCid: 019c
        DirBase: bf2d0580  ObjectTable: 969c1de8  HandleCount:  40.
        Image: python.exe
切换到该进程上下文
    kd> .process 88bd0030
    ReadVirtual: 88bd0048 not properly sign extended
    Implicit process is now 88bd0030
    WARNING: .cache forcedecodeuser is not enabled
在当前上下文查询句柄，其中可看到IoCompletionReserve内核对象的地址
    kd> !handle 70
    PROCESS 88bd0030  SessionId: 1  Cid: 0b00    Peb: 7ffd3000  ParentCid: 019c
        DirBase: bf2d0580  ObjectTable: 969c1de8  HandleCount:  40.
        Image: python.exe
    Handle table at 969c1de8 with 40 entries in use
    0070: Object: 8843a4b8  GrantedAccess: 000f0003 Entry: 8a2780e0
    Object: 8843a4b8  Type: (86cf3be0) IoCompletionReserve
        ObjectHeader: 8843a4a0 (new version)
            HandleCount: 1  PointerCount: 1
这样就可以找到池的位置，如下，每行是一个pool chunk，注意到带*号的 pool
chunk就是IoCompletionReserve内核对象在内核池块中实际地址，并且可以看到大小为0x60，根据这个大小我们就可以选取相应的内核对象进行池喷射了。
    kd> !pool 8843a4b8
    Pool page 8843a4b8 region is Unknown
     8843a000 size:   30 previous size:    0  (Allocated)  Mmdi
     8843a030 size:   18 previous size:   30  (Allocated)  MmSi
     8843a048 size:   30 previous size:   18  (Allocated)  Icp 
     8843a078 size:   18 previous size:   30  (Allocated)  MmSi
     8843a090 size:   68 previous size:   18  (Allocated)  EtwR (Protected)
     8843a0f8 size:   48 previous size:   68  (Allocated)  Vad 
     8843a140 size:   68 previous size:   48  (Allocated)  FMsl
     8843a1a8 size:   40 previous size:   68  (Allocated)  Even (Protected)
     8843a1e8 size:   20 previous size:   40  (Allocated)  ReTa
     8843a208 size:   50 previous size:   20  (Allocated)  Vadm
     8843a258 size:   c8 previous size:   50  (Allocated)  Ntfx
     8843a320 size:   48 previous size:   c8  (Allocated)  Vad 
     8843a368 size:   40 previous size:   48  (Allocated)  VM3D
     8843a3a8 size:   38 previous size:   40  (Allocated)  AlIn
     8843a3e0 size:   a8 previous size:   38  (Allocated)  File (Protected)
    *8843a488 size:   60 previous size:   a8  (Allocated) *IoCo (Protected)
            Owning component : Unknown (update pooltag.txt)
     8843a4e8 size:   40 previous size:   60  (Allocated)  Even (Protected)
如果想看pool chunk具体信息，可如下,PreviousSize
BlockSize在32位系统中是实际大小>>3，64位是>>4，所以这里BlockSize=0xc*8=0x60，和上面获取到的一致
    kd> dt _POOL_HEADER 8843a488
    nt!_POOL_HEADER
       +0x000 PreviousSize     : 0y000010101 (0x15)
       +0x000 PoolIndex        : 0y0000000 (0)
       +0x002 BlockSize        : 0y000001100 (0xc)
       +0x002 PoolType         : 0y0000010 (0x2)
       +0x000 Ulong1           : 0x40c0015
       +0x004 PoolTag          : 0xef436f49
       +0x004 AllocatorBackTraceIndex : 0x6f49
       +0x006 PoolTagHash      : 0xef43
### 3.4.3 参考
Windows内核池喷射1-偏内核池介绍   
Windows内核池喷射2-合适的内核对象获取   
堆喷射 
# 0x04 参考
Windows Kernel Exploit 内核漏洞学习(1)-UAF   
Windows堆喷射   
Windows堆喷射   
内核池块分析：
[https://www.cnblogs.com/flycat-2016/p/5449738.html](https:_www.cnblogs.com_flycat-2016_p_5449738)  
windows 内核池原理：   
内核池利用文档 [BlackHat_DC_2011_Mandt_kernelpool-wp.pdf](https://media.blackhat.com/bh-dc-11/Mandt/BlackHat_DC_2011_Mandt_kernelpool-wp.pdf)