     1
    . If it exists, the code will proceed to validate the token. If the token is valid, the code will continue. If the token is invalid, the code will stop the execution and produce an error
     2
    . On the other hand, if the token does not exist, the code will skip validation and jump to executing the action right away
     3
    . In this case, sending a request without the token, or a blank value as the token, may mean the server won’t attempt to validate the token at all.
    这段 Python 代码首先检查 CSRF 令牌是否存在。如果存在，代码将进一步验证令牌。如果令牌有效，代码将继续执行。如果令牌无效，代码将停止执行并产生错误。另一方面，如果令牌不存在，代码将跳过验证，直接执行动作。在这种情况下，发送没有令牌或空值作为令牌的请求可能意味着服务器根本不会尝试验证令牌。
    You can also try submitting the request with another session’s CSRF token. This works because some applications might check only whether the token is valid, without confirming that it belongs to the current user. Let’s say the victim’s token is
     871caef0757a4ac9691aceb9aad8b65b
    , and yours is
     YOUR_TOKEN
    . Even though it’s hard to get the victim’s token, you can obtain your own token easily, so try providing your own token in the place of the legitimate token. You can also create another test account to generate tokens if you don’t want to use your own tokens. For example, your exploit code might look like this:
    您也可以尝试使用另一个会话的 CSRF 令牌来提交请求。这是因为一些应用程序可能仅检查令牌是否有效，而不确认它属于当前用户。假设受害者的令牌是871caef0757a4ac9691aceb9aad8b65b，您的令牌是YOUR_TOKEN。即使很难获取受害者的令牌，您可以轻松获得自己的令牌，因此请尝试在合法令牌的位置提供您自己的令牌。如果您不想使用自己的令牌，还可以创建另一个测试帐户来生成令牌。例如，您的利用代码可能如下所示：
POST /password_change
Host: email.example.com
Cookie: session_cookie=YOUR_SESSION_COOKIE
(POST request body)
new_password=abc123&csrf_token=YOUR_TOKEN
    The faulty application logic might look something like this:
    有缺陷的应用逻辑可能类似于这样：
def validate_token():
  if request.csrf_token:
1  if (request.csrf_token in valid_csrf_tokens):
    pass
  else:
    throw_error("CSRF token incorrect. Request rejected.")
[...]
def process_state_changing_action():
  validate_token()
2 execute_action()
    The Python code here first validates the CSRF token. If the token is in a list of current valid tokens
     1
    , execution continues and the state-changing action is executed
     2
    . Otherwise, an error is generated and execution halts. If this is the case, you can insert your own CSRF token into the malicious request!
    这段 Python 代码首先验证 CSRF 令牌。如果该令牌在当前有效令牌列表之内，则进入执行第1步的状态，并执行状态变更的操作2。否则，将产生错误并停止执行。如果是这样的话，您可以将自己的 CSRF 令牌插入到恶意请求中！
    Bypass Double-Submit CSRF Tokens
    Sites also commonly use a
     double-submit cookie
    as a defense against CSRF. In this technique, the state-changing request contains the same random token as both a cookie and a request parameter, and the server checks whether the two values are equal. If the values match, the request is seen as legitimate. Otherwise, the application rejects it. For example, this request would be deemed valid, because the
     csrf_token
    in the user’s cookies matches the
     csrf_token
    in the POST request parameter:
    网站也通常使用双重提交 cookie 作为防范 CSRF 的一种方法。在这种技术中，改变状态的请求包含相同的随机令牌，既是一个 cookie，也是一个请求参数，服务器会检查这两个值是否相等。如果这些值相匹配，则请求被视为合法，在其他情况下，应用程序将拒绝该请求。例如，如果用户 cookies 中的 csrf_token 与 POST 请求参数中的 csrf_token 匹配，则此请求将被视为有效。
POST /password_change
Host: email.example.com
Cookie: session_cookie=YOUR_SESSION_COOKIE; csrf_token=871caef0757a4ac9691aceb9aad8b65b
(POST request body)
new_password=abc123&csrf_token=871caef0757a4ac9691aceb9aad8b65b
    And the following one would fail. Notice that the
     csrf_token
    in the user’s cookies is different from the
     csrf_token
    in the POST request parameter. In a double-submit token validation system, it does not matter whether the tokens themselves are valid. The server checks only whether the token in the cookies is the same as the token in the request parameters:
    而下一个则会失败。注意，在用户的Cookie中的csrf_token与POST请求参数中的csrf_token不同。在双重提交令牌验证系统中，令牌本身是否有效并不重要。服务器只检查Cookie中的令牌是否与请求参数中的令牌相同。
POST /password_change
Host: email.example.com
Cookie: session_cookie=YOUR_SESSION_COOKIE; csrf_token=1aceb9aad8b65b871caef0757a4ac969
(POST request body)
new_password=abc123&csrf_token=871caef0757a4ac9691aceb9aad8b65b
    If the application uses double-submit cookies as its CSRF defense mechanism, it’s probably not keeping records of the valid token server-side. If the server were keeping records of the CSRF token server-side, it could simply validate the token when it was sent over, and the application would not need to use double-submit cookies in the first place.
    如果应用程序使用双重提交 cookie 作为其 CSRF 防御机制，则其可能没有在服务器端保留有效令牌的记录。如果服务器在服务器端保留 CSRF 令牌的记录，则可以在发送令牌时简单地验证令牌，并且应用程序不需要首先使用双重提交 cookie。
    The server has no way of knowing if any token it receives is actually legitimate; it’s merely checking that the token in the cookie and the token in the request body is the same. In other words, this request, which enters the same bogus value as both the cookie and request parameter, would also be seen as legitimate:
    服务器无法知道它收到的任何令牌是否真实合法；它仅检查Cookie中的令牌和请求正文中的令牌是否相同。换句话说，发送相同伪造值作为Cookie和请求参数的此请求也将被视为合法的：
POST /password_change
Host: email.example.com
Cookie: session_cookie=YOUR_SESSION_COOKIE; csrf_token=not_a_real_token
(POST request body)
new_password=abc123&csrf_token=not_a_real_token
    Generally, you shouldn’t have the power to change another user’s cookies. But if you can find a way to make the victim’s browser send along a fake cookie, you’ll be able to execute the CSRF.
    一般情况下，你不应该有更改其他用户的 cookies 的权力。但是，如果你能找到一种方法使受害者的浏览器发送一个虚假的 cookie，你就能执行 CSRF 攻击。
    The attack would then consist of two steps: first, you’d use a session-fixation technique to make the victim’s browser store whatever value you choose as the CSRF token cookie.
     Session fixation
    is an attack that allows attackers to select the session cookies of the victim. We do not cover session fixations in this book, but you can read about them on Wikipedia (
     https://en.wikipedia.org/wiki/Session_fixation
    ). Then, you’d execute the CSRF with the same CSRF token that you chose as the cookie.
    攻击将包括两个步骤：首先，您将使用会话固定技术使受害者的浏览器存储您选择的CSRF令牌cookie的任何值。会话固定是一种攻击，允许攻击者选择受害者的会话cookie。我们不在本书中涵盖会话固定，但可以在维基百科上阅读有关它们的内容（https://en.wikipedia.org/wiki/Session_fixation）。然后，您将使用与您选择的CSRF令牌相同的CSRF令牌执行CSRF。
    Bypass CSRF Referer Header Check
    What if your target site isn’t using CSRF tokens but checking the referer header instead? The server might verify that the referer header sent with the state-changing request is a part of the website’s allowlisted domains. If it is, the site would execute the request. Otherwise, it would deem the request to be fake and reject it. What can you do to bypass this type of protection?
    如果目标站点没有使用CSRF令牌而是检查引用头呢？服务器可能会验证随状态更改请求发送的引用头是否是网站允许列出的域的一部分。如果是，该站点将执行请求。否则，它将认为该请求是伪造的并拒绝它。你该怎么绕过这种保护？
    First, you can try to remove the referer header. Like sending a blank token, sometimes all you need to do to bypass a referer check is to not send a referer at all. To remove the referer header, add a
    tag to the page hosting your request form:
    首先，你可以尝试移除Referer头。就像发送一个空令牌一样，有时你只需要不发送Referer就可以绕过Referer检查。要移除Referer头，将一个标签添加到托管请求表单的页面即可：
    This particular
    tag tells the browser to not include a referer header in the resulting HTTP request.
    这个特定的标签告诉浏览器不要在生成的HTTP请求中包含引荐头。
    The faulty application logic might look like this:
    错误的应用逻辑可能是这样的：
def validate_referer():
  if (request.referer in allowlisted_domains):
    pass
  else:
    throw_error("Referer incorrect. Request rejected.")
[...]
def process_state_changing_action():
  if request.referer:
    validate_referer()
  execute_action()
    Since the application validates the referer header only if it exists, you’ve successfully bypassed the website’s CSRF protection just by making the victim’s browser omit the referer header!
    由于该应用程序仅在存在 referer header 时进行验证，因此只需使受害者的浏览器省略 referer header，您就成功地绕过了网站的 CSRF 保护！
    You can also try to bypass the logic check used to validate the referer URL. Let’s say the application looks for the string
     "example.com"
    in the referer URL, and if the referer URL contains that string, the application treats the request as legitimate. Otherwise, it rejects the request:
    您还可以尝试绕过用于验证引用URL的逻辑检查。假设应用程序在引用URL中查找字符串"example.com"，如果引用URL包含该字符串，则应用程序将请求视为合法。否则，它将拒绝该请求。
def validate_referer():
  if request.referer:
    if ("example.com" in request.referer):
      pass
  else:
    throw_error("Referer incorrect. Request rejected.")
[...]
def process_state_changing_action():
  validate_referer()
  execute_action()
    In this case, you can bypass the referer check by placing the victim domain name in the referer URL as a subdomain. You can achieve this by creating a subdomain named after the victim’s domain, and then hosting the malicious HTML on that subdomain. Your request would look like this:
    在这种情况下，您可以通过将受害者的域名作为子域名放置在 referer URL 中来绕过 referer 检查。 您可以通过创建以受害者域名命名的子域名，然后在该子域名上托管恶意 HTML 来实现这一点。 您的请求将如下所示：
POST /password_change
Host: email.example.com
Cookie: session_cookie=YOUR_SESSION_COOKIE;
Referer: example.com.attacker.com
(POST request body)
new_password=abc123
    You can also try placing the victim domain name in the referer URL as a pathname. You can do so by creating a file with the name of the target’s domain and hosting your HTML page there:
    你也可以将受害者的域名作为路径名放置在 referer URL 中。你可以通过创建一个以目标域名命名的文件，并在那里托管你的 HTML 页面来实现：
POST /password_change
Host: email.example.com
Cookie: session_cookie=YOUR_SESSION_COOKIE;
Referer: attacker.com/example.com
(POST request body)
new_password=abc123
    After you’ve uploaded your HTML page at the correct location, load that page and see if the state-changing action was executed.
    上传正确位置的HTML页面之后，加载该页面并查看是否执行了状态更改操作。
    Bypass CSRF Protection by Using XSS
    In addition, as I mentioned in
     Chapter 6
    , any XSS vulnerability will defeat CSRF protections, because XSS will allow attackers to steal the legitimate CSRF token and then craft forged requests by using
     XMLHttpRequest
    . Often, attackers will find XSS as the starting point to launch CSRFs to take over admin accounts.
    此外，如我在第六章中所提到的，任何XSS漏洞都将破坏CSRF保护，因为XSS将允许攻击者窃取合法的CSRF令牌，然后通过使用XMLHttpRequest构造伪造请求。经常，攻击者会将XSS作为启动CSRF攻击以接管管理员帐户的起点。
    Escalating the Attack
    After you’ve found a CSRF vulnerability, don’t just report it right away! Here are a few ways you can escalate CSRFs into severe security issues to maximize the impact of your report. Often, you need to use a combination of CSRF and other minor design flaws to discover these.
    在找到 CSRF 漏洞后，不要立即报告！以下是一些方法，可以将 CSRF 升级为严重的安全问题，以最大化报告的影响。通常，您需要结合 CSRF 和其他轻微的设计缺陷才能发现这些问题。
    Leak User Information by Using CSRF
    CSRF can sometimes cause information leaks as a side effect. Applications often send or disclose information according to user preferences. If you can change these settings via CSRF, you can pave the way for sensitive information disclosures.
    CSRF有时会导致信息泄漏作为副作用。 应用程序通常根据用户偏好发送或披露信息。 如果您可以通过CSRF更改这些设置，您就可以为敏感信息披露铺平道路。
    For example, let’s say the
     example.com
    web application sends monthly billing emails to a user-designated email address. These emails contain the users’ billing information, including street addresses, phone numbers, and credit card information. The email address to which these billing emails are sent can be changed via the following request:
    例如，假设example.com Web应用程序向用户指定的电子邮件地址发送每月账单电子邮件。这些电子邮件包含用户的账单信息，包括街道地址、电话号码和信用卡信息。通过以下请求可以更改发送这些账单电子邮件的电子邮件地址：
POST /change_billing_email
Host: example.com
Cookie: session_cookie=YOUR_SESSION_COOKIE;
(POST request body)
email=NEW_EMAIL&csrf_token=871caef0757a4ac9691aceb9aad8b65b
    Unfortunately, the CSRF validation on this endpoint is broken, and the server accepts a blank token. The request would succeed even if the
     csrf_token
    field is left empty:
    不幸的是，此端点上的CSRF验证已损坏，服务器接受空令牌。即使csrf_token字段为空，请求也会成功：
POST /change_billing_email
Host: example.com
Cookie: session_cookie=YOUR_SESSION_COOKIE;
(POST request body)
email=NEW_EMAIL&csrf_token=
    An attacker could make a victim user send this request via CSRF to change the destination of their billing emails:
    攻击者可能会通过跨站请求伪造使受害用户发送该请求，从而更改其帐单电子邮件的目的地。
POST /change_billing_email
Host: example.com
Cookie: session_cookie=YOUR_SESSION_COOKIE;
(POST request body)
email=ATTACKER_EMAIL&csrf_token=
    All future billing emails would then be sent to the attacker’s email address until the victim notices the unauthorized change. Once the billing email is sent to the attacker’s email address, the attacker can collect sensitive information, such as street addresses, phone numbers, and credit card information associated with the account.
    未来的所有计费电子邮件将发送到攻击者的电子邮件地址，直到受害者注意到未经授权的更改。一旦计费电子邮件发送到攻击者的电子邮件地址，攻击者可以收集与账户相关的敏感信息，如街道地址、电话号码和信用卡信息。
    Create Stored Self-XSS by Using CSRF
    Remember from
     Chapter 6
    that self-XSS is a kind of XSS attack that requires the victim to input the XSS payload. These vulnerabilities are almost always considered a nonissue because they’re too difficult to exploit; doing so requires a lot of action from the victim’s part, and thus you’re unlikely to succeed. However, when you combine CSRF with self-XSS, you can often turn the self-XSS into stored XSS.
    请记得第6章中提到的自XSS是一种需要受害者输入XSS载荷的XSS攻击。这些漏洞几乎总被认为是一个无需担心的问题，因为它们太难利用了；要这样做需要受害者采取很多行动，因此你很少能够成功。然而，当你将CSRF与自XSS结合时，你经常可以将自XSS转化为存储XSS。
    For example, let’s say that
     example.com
    ’s financial subdomain,
     finance.example.com
    , gives users the ability to create nicknames for each of their linked bank accounts. The account nickname field is vulnerable to self-XSS: there is no sanitization, validation, or escaping for user input on the field. However, only the user can edit and see this field, so there is no way for an attacker to trigger the XSS directly.