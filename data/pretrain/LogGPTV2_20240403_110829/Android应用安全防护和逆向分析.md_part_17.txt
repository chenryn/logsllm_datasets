这就引出了本节的话题：关于Linux中的setuid和setgid问题。Linux中的setuid和setgid是什么呢？Android中有哪些场景会用到它们呢？下面来一一讲解。
###### 1.Linux中的setuid和setgid概念 {.section-subtitle}
Linux/Unix下的可执行文件一旦被设置了setuid标记，使用该可执行程序的进程就将拥有该执行文件的所有者权限。普通用户执行这个命令，可使自己升级为root权限。
设置setuid的方法是：chmod 4755 program或chmod u+s
program（setuid只对文件有效）。
设置setgid的方法是：chmod 2755 dir或chmod g+s
dir（setgid只对目录有效）。
同时设置setuid、setgid的方法是：chmod 6755 program被设置粘着位，chmod
1777 file或chmod o+t
file（粘着位只对文件有效）当一个目录被设置为"粘着位"（用chmod
a+t），则该目录下的文件只能由以下人员删除：
·超级管理员
·该目录的所有者
·该文件的所有者
也就是说，即便该目录是任何人都可以写，但也只有文件的属主才可以删除文件。那么如何使用chmod命令修改文件的权限，和这两个函数有什么关系呢？修改文件权限的命令是chmod，后面跟字母组合或者数字组合。
[注意：]{.yanse}Android中的toolbox对chmod命令做了限制，chmod只能使用数字代替字母来修改文件的权限，看下面例子：
::: bodypic-c
![](OEBPS/Images/159-4-i.jpg){.calibre408}
:::
这里使用字母组合方式来修改文件权限报错了：Bad
mode，因为Google自带的toolbox中chmod语法不支持+x、-x。
###### 2.chmod命令的用法和参数详解 {.section-subtitle}
知道Linux中的文件权限构造之后，可以使用ll命令查看一个文件，格式类似下面这样：
::: bodypic-c
![](OEBPS/Images/160-i.jpg){.calibre409}
:::
下面解析一下这个格式所表示的意思。
这种表示方法一共有10位：
::: bodypic-c
![](OEBPS/Images/160-2-i.jpg){.calibre410}
:::
第9位表示文件类型，可以为p、d、l、s、c、b和-：
·p表示命名管道文件
·d表示目录文件
·l表示符号连接文件
·s表示socket文件
·c表示字符设备文件
·b表示块设备文件
·-表示普通文件
第8～6位、5～3位、2～0位分别表示文件所有者的权限、同组用户的权限、其他用户的权限，其形式为rwx：
·r表示可读，可以读出文件的内容，对应的数字是4。
·w表示可写，可以修改文件的内容，对应的数字是2。
·x表示可执行，可运行这个程序，对应的数字是1。
那么，可以知道rwx的组合就是7=1+2+4。
如果想修改文件的权限为所有者是rwx，同组用户的权限是r\--，其他用户的权限是\--x，命令如下：
::: bodypic-c
![](OEBPS/Images/160-3-i.jpg){.calibre407}
:::
这里看到：u代表所有者，g代表同组用户，o代表其他用户。
使用数字更简单：
::: bodypic-c
![](OEBPS/Images/160-4-i.jpg){.calibre411}
:::
·7代表所有者：1+2+4
·1代表同组用户：1
·4代表其他用户：4
如下所示，可以看到文件的权限：
::: bodypic-c
![](OEBPS/Images/160-5-i.jpg){.calibre412}
:::
::: bodypic-c
![](OEBPS/Images/161-i.jpg){.calibre413}
:::
下面再来看一下如何修改文件为setuid和setgid。设置之后文件相应被设置了SUID或SGID位，分别表现在所有者或同组用户权限的可执行位上。例如：
1）-rwsr-xr-x表示SUID和所有者权限中可执行位被设置。
2）-rwsr\--r\--表示SUID被设置，但所有者权限中可执行位没有被设置。
3）-rwxr-sr-x表示SGID和同组用户权限中可执行位被设置。
4）-rw-r-sr\--表示SGID被设置，但同组用户权限中可执行位没有被设置。
其实，在Unix的实现中，文件权限用12个二进制位表示，如果该位上的值是1，表示有相应的权限：
::: bodypic-c
![](OEBPS/Images/161-2-i.jpg){.calibre414}
:::
第11位为SUID位，第10位为SGID位，第9位为粘着位，第8～0位对应于上面的三组rwx位。
-rwsr-xr-x的值为：1 0 0 1 1 1 1 0 1 1 0 1
-rw-r-sr\--的值为：0 1 0 1 1 0 1 0 0 1 0 0
1）所有者的s位对应的数字是：4
2）所有组的s位对应的数字是：2
3）粘着位对应的数字是：1
给文件加SUID和SUID的命令如下：
1）chmod u+s filename设置SUID位
2）chmod u-s filename去掉SUID设置
3）chmod g+s filename设置SGID位
4）chmod g-s filename去掉SGID设置
也可以用八进制表示方法来设置，如果明白了前面的12位权限表示法，八进制方法也很简单。
使用数字来设置文件的SUID、SGID、粘着位：
::: bodypic-c
![](OEBPS/Images/161-3-i.jpg){.calibre415}
:::
第一位的7就代表1+2+4，即设置了三个位。
[]{#063.xhtml}
#### 10.3 Android中setuid和setgid的使用场景 {.bodycontent-title2}
前面介绍了Linux中setuid、setgid的用法和作用，以及如何使用chmod命令来操作。下面就来看看Android中有哪些场景用到了setuid、setgid。
###### 1.zygote降权处理 {.section-subtitle}
首先不得不说zygote这个进程，Android中应用启动的过程都是和这个进程息息相关的，每个应用启动都是来找zygote做事的。zygote启动之后，会进入一个轮询使用socket来监听ActivityManagerService发来的消息，比如应用的启动，然后zygote就fork出一个进程，开始运转。那么问题来了，在Linux中，父进程fork出一个子进程，默认子进程会拥有和父进程一样的uid，那么zygote是root用户的，按照常理，所有fork出来的应用都是root用户了，看上去很危险------每个应用都有root权限了。其实每个应用只有指定的权限，这是由于zygote使用setuid、setgid做了降权处理，如下所示：
::: bodypic-c
![](OEBPS/Images/162-i.jpg){.calibre416}
:::
下面来看一下源码：dalvik_system_Zygote.cpp。
[提示：]{.yanse}源码位置：Android源码\\dalvik\\vm\\native\\dalvik_system_Zygote.cpp
zygote中主要做处理的是forkAndSpecializeCommon函数，如下所示：
::: bodypic-c
![](OEBPS/Images/162-2-i.jpg){.calibre417}
:::
往下面看：
::: bodypic-c
![](OEBPS/Images/162-3-i.jpg){.calibre418}
:::
这里将fork出来的进程的gid和uid设置成上层传递过来的值，从而实现降权。
这里还有一个函数enableDebugFeatures，这个函数是干什么的，其实看到名字都知道，让一个应用具备可调试功能，在debug的情况下：
::: bodypic-c
![](OEBPS/Images/163-i.jpg){.calibre419}
:::
继续往下看：
::: bodypic-c
![](OEBPS/Images/163-2-i.jpg){.calibre420}
:::
注意，在gDvm.jdwpAllowed字段判断时可以看到，Java中的调试系统还是很复杂的，由jdb、jdbserver、jwdp组成，这里遵从的是C/S模式：
·jdb是客户端，需要调试的应用。
·jdbserver是服务器端，调试代码信息处理的那一端。
·jwdp是调试协议。
而且每个可以调试的应用启动之后，都会有一个jwdp线程来运作这些事，可以使用：
::: bodypic-c
![](OEBPS/Images/163-3-i.jpg){.calibre421}
:::
来查看进程的线程，如下所示：
::: bodypic-c
![](OEBPS/Images/163-4-i.jpg){.calibre422}
:::
这里介绍的内容是为了接下来分析Android中的调试工具gdb、gdbserver做准备的。
###### 2.su工具原理 {.section-subtitle}
Android手机的root原理是：一个普通的进程通过执行su，从而获得一个具有root权限的进程。有了这个具有root权限的进程之后，就可以想干什么就干什么了。su所做的事情其实很简单，它再fork另外一个子进程来做真正的事情，也就是在执行su的时候后面所跟的那些参数。由于运行su的进程的uid是root，因此由它fork出来的子进程的uid也是root，于是子进程也可以想干什么就干什么了。不过，用来root手机的su还会配合另外一个称为superuser的App来使用。su在fork子进程来做真正的事情之前，会先启动superuser，询问用户是否允许fork一个uid是root的子进程。这样就可以对root权限进行控制，避免被恶意应用偷偷地使用。
下面来看看su的源码，如图10-5所示。
::: bodypic-c
![](OEBPS/Images/10a5-i.jpg){.calibre423}
:::
图10-5 su的源码
可以看到，这里就是用了setuid和setgid来设置指定的uid，如果没有指定uid，默认是root用户，uid=0。
###### 3.run-as命令 {.section-subtitle}
上面说到使用chmod命令可达到setuid等效果，在Android中也有类似的场景，前面分析的run-as命令就是一个很好的例子，run-as命令本身的uid是root，gid是shell。
如果用chmod 6755
run-as设置完权限之后如下面的代码所示，就具备了这种功能，即只要运行run-as命令的用户就会立马升级到root用户，因为root用户可以进入任何应用的data/data/目录下：
::: bodypic-c
![](OEBPS/Images/165-i.jpg){.calibre424}
:::
现在也知道了前面为什么修改了run-as命令之后会报错，然后修改回来之后又可以了。
从这里可以看到Android中的run-as命令其实还是很危险的，虽然它本身有很多限制，但追根到底还是Linux中setuid的安全性最为值得考究，setuid的危险性还是很大的。
[]{#064.xhtml}
#### 10.4 run-as命令的作用 {.bodycontent-title2}
现在知道了run-as命令能够在非root设备上查看debug模式的应用沙盒数据，其实它还有一个重要作用，就是为Android中的调试做基础。上面在分析zygote源码的时候提到了Java中的调试系统jdb，其实Android中的调试系统是gdb，通过gdb和gdbserver来调试App。具体来说，就是gdbserver通过ptrace附加到目标App进程去，然后gdb再通过socket或者pipe来链接gdbserver，并且向它发出命令来对App进程进行调试。需要注意以下关键点：
·每一个需要调试的apk在打包的时候都会带上一个gdbserver，因为手机上面不带有gdbserver工具。gdbserver用来通过ptrace附加到要调度的App进程去。
·要注意ptrace的调用。一般来说，只有root权限的进程可以调用。例如，如果我们想通过ptrace向目标进程注入一个so，那么就需要在root过的手机上向su申请root权限。但是，这不是绝对的。如果一个进程与目标进程的uid是相同的，那么该进程就具有调用ptrace的权限。gdbserver在调试一个App之前，首先要通过ptrace_attach来附加到该App进程去。ptrace_attach在执行实际操作之后，会调用\_\_ptrace_may_access来检查调用进程的权限，如果调用进程与目标进程具有相同的uid和gid，那么权限检查通过。否则的话，就要求调用者进程具有执行ptrace的能力，这是通过另外一个函数ptrace_has_cap来检查的。如果调用进程的uid是root，那么ptrace_has_cap一定会检查通过。当然，通过了上述两个权限检查之后，还要接受内核安全模块的检查，这就不是通过uid或者capability这一套机制来控制的了。
·如何让gdbserver进程的uid与要调试的App进程的uid一样？因为在没有root过的手机上要想获得root权限是不可能的，因此只能选择以目标进程相同的uid运行这个方法。这时可以使用run-as工具。
到这里知道了，在Android中要调试一个程序，首先这个程序必须是debug模式的，也就是在AndroidManifest.xml中设置的属性，所以以往在使用动态方式破解apk的时候，首先是反编译，然后修改XML中的debug属性，然后才能进行代码关联调试，而且动态调试so的强大工具IDA也是利用附加到目标进程中才进行调试的，原理和这里的gdb一样。
[]{#065.xhtml}
#### 10.5 调用系统受uid限制的API {.bodycontent-title2}
前面说了几次关于降权的问题，再用一个例子来详细介绍Android中如何降权，这个例子是模拟一个系统的API，但是这个API只允许system用户调用，代码如下：
::: bodypic-c
![](OEBPS/Images/166-i.jpg){.calibre425}
:::
这里做了用户uid的判断，如果不是system用户，直接返回错误信息。为了简单，也是为了向用户演示Android中如何执行jar功能，这里再加一个入口类：
::: bodypic-c
![](OEBPS/Images/166-2-i.jpg){.calibre319}
:::
把项目导出jar，然后用dx命令进程转化成dex，因为Android中是不识别class文件的，它只识别dex文件：
::: bodypic-c
![](OEBPS/Images/166-3-i.jpg){.calibre49}
:::
然后将生成的classes.dex文件塞到jar中，直接使用压缩软件就可以了，如图10-6所示。
::: bodypic-c
![](OEBPS/Images/10a6-i.jpg){.calibre426}
:::
图10-6 压缩软件查看jar文件
然后把exec.jar导入设备的/data目录下，如下所示：