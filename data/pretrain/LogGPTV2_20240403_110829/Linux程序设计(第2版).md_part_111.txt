gboolean secondhand_is_visible =TRUE;
GnomeCanvasIten *hand = NULL;
GnomeCanvasPoints *points.*second_hand_points;/* the arrays that hold the hand
Gtkwidget *clock_app:
coordinates */
4）下面是函数们的预定义：
static void create_dots (int dots.Gtkwidget *canvas);
static void change_canvas_scale (GckAdjustment *ad).gtloat *value):
static void show_preference_dig (void);
static void show_about_dlg (void);
static void apply_preferences (GncmePropertyBox *property_box, gint page_num,
static gint redraw (gpointer data):
Gtkwidget *sh_checkbox):
5)我们在这里定义三个顶层菜单：file、setings和help，它们分别包含着“exit"、“preferences"
和“about”选项。我们把“preferences”和“about”菜单项与程序中的函数链接起来以便弹出与
之对应的对话框。如下所示：
GnomeufInfo file_menu]={
GNOMEUIINPO_MENU_EXIT_ITEM(gtk_nain_quit.NULL).
GNCMEUIINFO_END
GnomeUIInfo help_nenu[]={
GNOMEUIINFO_MENU_ABOUT_ITEM(show_about_dlg.NULL).
GNOMEUTINFO_END
} :
GnomeUIInfo settings_menu[}={
GNOMEUIINFO_MENU_PREFERENCES_ITEM(show_preterence_dlg. NULL),
GNOMEUIINFO_END
GnomeUIInfo menubar[1=(
CNOMEUIINPO_MENU_FILE_TREE(file_nenu),
GNOMEUIINFO_KENU_SETTINGS_TREE(settingS_menul,
GNOMEUIINFO_HENU_HELP_TREE(help_Aenu),
GNOMEUIINFO_END
)：
6）接下来定义工具条，它只容纳着一个项目：“Exit”按钮。如下所示：
GnoneUiInfo toolbar(]={
GNOMEUTINPO_ITEM_STOCK(*Exit*."Exit the application*,
gtk_nain_quit,
GNONEUIINFO_SND
GNOME_STOCK_PIXMAP_EXIT).
} ;
7）现在定义的函数将计算并画出表盘四围的圆点。我们将调用它60次，每次代表一分钟。
加入jaVa编程群：524621833
---
## Page 595
第17章使用GTK+进行GNOME程序设计
577
这个函数将计算出表盘四围所有圆点的位置并为它们创建个CanvasItem。如下所示：
static void create_dot( int dots, Gtkwidge:* canvas)
double angle= dots *X_PI/(360.0/12):
double x1. y1. x2,y2:
GnomeCanvasItem *dot;
double slze;
8）我们需要根据圆点出现在表盘上的位置选择它们的大小。我们让出现在12、3、6、9点钟
位置的现点最大，然后每隔五分钟稍大，其他的国点最小。如下所示：
if ((dots #_15)= 0)
size = 2.0;
else if ((dots  5]== 0){
size -1.0:
else size = 0.5;
x1 • MIDDLE - size ·(DOT_RADIUS ·sin (angie)];
y1 - MIDOLE - size • (DOT_RADIUS * cos (angle));
x2= MIDDLE▪ 8i2e -(DOT_RADIUS·sin(angle)):
y2 - MIDoLE • size •(DOT_RADIUS · cos (angle));
dot × yriowe_canvas_1tem_nev (gnome_canvas_root (GNoME_CANVAS (canvas1 ) ,
GNOME_TYPE_CANVAS_ELLIPSE,
'x1", x1,
*x2*,x2,
"yl",y1,
*y2",y²;
NULL1 :
"fill_color*,"red”,
9）接下来是这个应用程序的核心部分，表针的重画函数，或者更准确地说是表计的坐标修
改函数，表针的坐标是根据计算机的本地当前时间变化的。对时针和分针来说，我们实际使用
的是一个用三个点决定的直线对象，所以我们每秒钟只需重画两个画布项目，即秒针和时/分针。
如下所示：
static gint redraw (gpointer data)
struct tm *tn_ptr:
time_t the_cime;
float second_angle;
float minute_angle;
float hour_angle;
time(&the_tIme) ;
te_ptr = localtixe (sthe_time): /* See chapter 4 for an explanation of the tine
function */
second_angle = tx_ptr->te_sec * M_PI / 30.0; /* The angle the second hand makes wit
the vertical */
10）设置秒针坐标数组，我们用这四个坐标值画出从时钟中心点到表盘上圆点的直线来、如
下所示：
second_hand_points->coords[0] - KIDoL&;
加入jaVa编程群：524621833
---
## Page 596
578
Linux程序设计
second_hand_points->coorde [1] = MiDDLE;
second_hand_points - >coorde [2}
× MIDDLE +(SECOND_HAND_t&NGTH*sin(second_angle));
second_hand_points- >coozds [3] • NIDDLE
 -(SECOND_HAND, LENGTH * cos (second_angle) ;;
11）接下来计算时针和分针之间的夹角，并把计算结果填写到坐标数组里去。如下所示：
minute_angle = tm_ptr->tm_min*M_PI/30.0;
points->coords[O]= MIDDLE + (HOUR_HAND_LENGTH * sin (hour_angle]1:
points->coords[1]= MIDoLE -
points->coords[2]
(HOUR_HAND_LENCTH *cos (hour_angle)1;
points->ccords[3] = MIDDLE:
=MIDOLE;
points->ccords[5] = MIDOLE - (MINUTE_HAND_LENGTH * coe (minute_angle)};
points->coords[4] = MIDDLE
+
(MINUTE_HAND_LENGTH * sin (mimute_angle)):
12）检查表针是否已经被创建出来了。如果没有，就创建它们：否则就把新坐标设置给它们
如下所示：
if (hand = NULL)(
hand • (gnome_canvas_item_new(gncme_canva>_root (GNOME_CANVAS (canvas)),
GNOME_TYPE_CANVAS_LINE,
"fill_color*,*blue*,
"width_units'.3.5.
"join_style",GDK_JOIN_ROUND,
"cap_style*,GDK_CAP_ROUND.
NULL) } :
second_hand = (gnone_canvas_itee_new(gnome_canvas_root (GNoME_CANVAS (canvas)},
GNOME_TYPE_CANVAS_LINE,
"points*,second_hand_points,
"width_pixels".2.
"fill_color*."white".
MULL11:
gnone_canvas_item_set (hand. *points*, points, NULL);
gnone_canvas_item_set (second_hand. *points*. second_hand_points, Nuna.);
13）下面这个函数的作用是创建一个about对话框。当我们点击“Help”菜单里的“about”
菜单项时，这个对话框就会出现在屏幕上，如下所示：
static void show_about_dlg(void)
Gtkwidget *about;
const gchar *authors[1 = (*Andrew Froggatt′, NULL }:
about = gnome_about_new(*Gnome Clock*, *0.1*.
‘Released under the GNU Public License°,
(*A simple graphical clock for GNOMg*),
'szouane
gtk_widget_show (about):
:(7T0N
14)我们在这里创建个人偏好对话框，里面放上个选择框和一个滑块素材。GnomeProperty-
Box素材是从GnomeDialog素材推导出来的，它的增加功能是一个嵌人式笔记本素材。笔记本素材
提供了彼此分开的“页”，每页有一个标签，我们可以通过这些分开的页把素材分成不同的组。
加入java编程群：524621833
---
## Page 597
第17章使用GTK+进行GNOME程序设计579
GnomePropertyBox还定义了两个新的信号：apply和belp。只要用户点击了ok或apply按银，它就会
随时发送出apply信号；面当用户点击help按钮时，将发送出help信号，而我们要用这些信号米提
供一个非模型化的对话框。如下所示：
static void show_preference_dlg(void)
Gtkwidget *preferencebox;
Gtkobject*adj;
Gtkwidget *label;
*hscole:
preferencebox s gnome,property_box_new():
hbox = gtk_hbox_new(FALSE. 0):
vbox = gtk_vbox_new(FALSE，2);
sh_checkbox = gtk_check_button_new_with_label(*Second hand visible*);
gtk_toggle_button_set_state(GTK_roGGL&_BUTroN (sh_checkbox).
gtk_box_pack_start (GTK_BOX (vbox),sh_checkbox, FALSE, FALSE, 0):
secondhand_is_visible):
15）我们为那个单选框设置一个信号处理器。当用户选择了这个单选框的“开”状态时，ok
和apply按钮将变为“敏感的”（从显示效果来看是阴影去掉了，从使用效果看是允许点击了）。
如下所示：
gtk_sigmal_connect_object (GTK_OBJECT(sh_checkbox).*toggled*,
GTK_SIGNAL_FUNC(gnome_property_box_changed),
GTK_GBJECT (preferencebox)) :
label =gtk_label_new(*Clock zoom factor:*);
gtk_mise_Eet_alignment (GTK_MIsC (1abel),
gtk_box_pack_start (GTK_BOx (hbox). label, FALSE, FALSE. C);
1.0.1.0);
16）接下来我们创建一个用来缩放我们画布的滑块素材。当用户移动这个滑块素材时将产生
valuc_changed信号，我们把这个信号与两个信号处理器链接在一起。如下所示：
adj= gtk_adjustment_new (2.0.0.1.7.0.1.0,1.0.1.0):/*[default, min,nax,
step. page,page size} */
hscale = gtk_hscale_new (GTK_ADJUSTMENT (adj));
gtk_signal_connect_object (GTK_CBJECT (adj),*value_changed’,
GTK_SIGNAL_FUNC(gnome_property_box_changed),
GTK_OBrECT(preferencebox)):
gtk_signal_connect_object (CrK_OBJEcT (ad)),*value_changed*,
GTK_SIGNAL_FUNC(change_canvas_scale),
&(GTK_ADJUSTMENT（adj1->value)):
gtk_signal_connect (GrK_OBJaCT(preferencebox).*apply*,
GTK_SIGNAL_FUNC(apply_preferences).sh_checkbox):
gtk_box_pack_start
（GTK_BOX （hbox),hscale, TRUS,TRUE.0）:
gtx_box_pack_start (GTK_BOx (vbox). hbox. FALSE, PALSE, 0);
gmome_dialog_set_parent (GNoME_DIALOG (preferencebox) , GTK_wINDOw(clock_app)) :
gmome_property_box_append_page (GNoME_PROFERTr_BOX(preferencebox),
gtk_Label_new(*General*)) ;
vbox.
加入java编程群：524621833
---
## Page 598
08S
Linux程序设计
gtk_widget_show_all(preferencebox);
1
17)下面的函数负责处理个人偏好对话框里ok或apply按钮被点击的事件。page_num是当前
的笔记本页编号，它对笔记本各页上的apply按钮提供了未来性支持。它的原理是：每个笔记
本页会发送--个带该页编号的apply信号和一个page_num值为“-1”的apply信号。我们在这里
将不理会page_num值不是“-1”的apply信号。而当我们接收到“-1”页的时候，将根据个人
偏好对话框里选择框的状态米显示或隐藏时钟的秒针。我们需要刷新全局变量secondhand
_is_visible，这样当我们关闭属性对话框后再重新打开它时，选择框就能显示为正确的状态。
当ok或close按钮被点击的时候，GnomePropertyBox素材将负贵替我们关闭属性窗口。如下
所示：
static void apply_preferences (GnonePropertyBox *property_box,gint page_nun,
if (page_nun [= -1)
if (gtk_toggle_button_get_active(GTK_roGGLE_BUMTON (sh_checkbox))== FALSE){
return;
gnome_canvas_item_hide(second_hand);
Secondhand_is_visible = FALSE;
else(
secondhand_is_visible  TRUE:
gnone_canvas_item_show(second_hand) :
18）当滑块素材被移动的时候，我们将更新画布的缩放比例并把窗口调整为适合时钟的大小。
如下所示：
static void change_canvas_scale (GtkAdjustment *adj. gfloat *value)
gnone_canvas_set_pixels_per_unit (GNOME_CANVAS [canvas),
gtk_widget_set_usize(Gr_wIDGET (clock_app),
(anten,(atqnop)
125·(Gouble)*value);
19）最后，我们在main函数里与往常一样进行初始化和素材的创建工作。如下所示：
int sain [int argc, char *argv[1]
GnomeCanvasIten *clock_outline;
gint dots;
gnone_init（*clock*.*0.1, argc,argv);
clock_app = gnome_app_new (*clock*,*Gnone Clock*);
gtk_widget_set_usize (clock_app. CANVAS_SI2E,CANVAS_SIzE);
gtk_widget_push_visual(gdk_inlib_get_visual());
gtk_widget_push_colormap(gdk_inlib_get_colornap()):
canvas ± gnone_canvas_new():
gtk_widget_pop_visual():
gtk_widget_pop_colormap();
gnome_canvas_set_pixels_per_unit (GNOME_CANVAS (canvas) . 2):
second_hand_points = gnome_canvas_points_new (21 :
points = gnome_canvas_points_new(3):
加入java编程群：524621833
---
## Page 599
第17章使用GTK+进行GNOME程序设计
581
gtk_signal_connect
（GTK_OBJECT (clock_app).*delpte_event*
GTK_SIGNAL_FUNC (gtk_main_quit),
NULL) ;