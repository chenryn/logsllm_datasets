matches line break characters, unless you add them to the negated char
span across lines.
A hyphen (-) creates a range when it is placed between two characters. The range
includes the character before the hyphen, the character after the hyphen, and all char-
acters that lie between them in numerical order. To know which characters those are,
you have to look at the ASCIl or Unicode character table. [A-z] includes all characters
34 | Chapter 2: Basic Regular Expresion Skills
---
## Page 51
in the ASCII table between the uppercase A and the lowercase z. The range includes
some punctuation, so [A-Z\[\\\]\^_* a2] matches the same characters more explic-
itly. We recommend that you create ranges only berween two digits or between two
letters that are both upper- or lowercase.
Reversed ranges, such as  [z-a], are not permitted.
Variations
Shorthands
Six regex tokens that consist of a backslash and a lertter form shorthand character
classes: , , . You can use these both inside and outside
character classes. Each lowercase shorthand character has an associated uppercase
shorthand character with the opposite meaning.
\d and [\d] both match a single digit.  is always identical to [a-zA-Zo-9_].
In .NET, it includes letters and digits from all other scriprs (Cyrillic, Thai, etc.). In Java
7, the other scripts are included only if you set the UNIcooE_CHARACTER_CLASS flag. In
Python 2.x, the other scripts are included only if you pass the UNIcopE or u flag when
creating the regex. In Python 3.x the other scripts are included by default, but you can
make  or a Unicode property such as  is pure ASCII.
2.3 Match 0ne of Many Characters | 35
---
## Page 52
\d) follows the same rules as  also
matches any character defined as whitespace by the Unicode standard. In Java, Perl,
and Python,  and \d
Notice that JavaScript uses Unicode for . Further in-
consistency arises when we add ^b> to the mix.  is not a shorthand character class,
but a word boundary. Though you’d expect b> to support Unicode when  matches any character that is not in the Number category. Com-
bining them with subtraction, . Combining these into
[s′S] results in a character class that includes all characters, including line breaks.
[\d\D]> and [ \w\W]> have the same effect.
Dot abuse
The dot is the most abused regular expression feature.  allows a forward slash, dot, or hyphen to be used as the
date separator. This regex still matches 99/99/99, but not 12345678.
It's just a coincidence that the previous example includes a dot inside
the character classes. Inside a character class, the dot is just a literal
cause in some countries, such as Germany, the dot is used as a date
separator.
Use the dot only when you really want to allow any character. Use a character class or
negated character class in any other situation.
Variations
Here's how to match any quoted character, including line breaks, with the help of an
inline mode modifier:
(?s)'.'
Regex options: None
2.4 Match Any Character | 39
---
## Page 56
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python
(?m)'.'
Regex options: None
Regex flavors: Ruby
If you cannot turn on *dot matches line breaks* mode outside the regular expression,
you can place a mode modifier at the start of the regular expression. We explain the
concept of mode modifiers, and JavaScript’s lack of support for them, in the subsection
"Case-insensitive matching" on page 29 in Recipe 2.1.
(?s) is the mode modifier for °dot matches line breaks" mode in .NET, Java, XRe-
gExp, PCRE, Perl, and Python. The s stands for *single line* mode, which is Perl’s
confusing name for *dot matches line breaks."
The terminology is so confusing that the developer of Ruby’s regex engine copied it
wrongly. Ruby uses  for “dot matches line breaks.” Perl’s very different meaning for (?
m) > is explained in Recipe 2.5.
See Also
In many cases, you don’t want to match truly any character, but rather any character
except a select few. Recipe 2.3 explains how to do that.
Recipe 3.4 explains how to set options such as *dot matches line breaks? in your source
code.
When working with Unicode text, you may prefer to use , , , and \z are called anchors. They do
notmatchany characters Instead, they matchat cerain positions, effectively anchoring
the regular expression match at those positions.
A line is the part of the subject text that lies between the start of the subject and a line
break, between rwo line breaks, or berween a line break and the end of the subject. If
there are no line breaks in the subject, then the whole subject is considered to be one
line. Thus, the following text consists of four lines, one each for one, to, an empry
string, and four:
one
two
four
The text could be represented in a program as oneLFtaoFFfour.
2.5 Match Something at the Start and/erthe End of aLine | 41
---
## Page 58
Start of the subject
The anchor  always matches at the very start of the subject text, before the first
character. That is the only place where it matches. Place  is equivalent to \A), as long as you do not turm on the *^ and $ match
Ruby does not offer a way to turn this option off.
at line breaks" option. This option is off by default for all regex flavors except Ruby.
Unless you're using JavaScript, we recommend that you always use  instead of
^. The meaning of \A never changes, avoiding any confusion or mistakes in seting
regex options.
End of the subject
The anchors Z and \z always match at the very end of the subject text, after the last
character. Place . JavaScript does not support  without having to worry about stripping off a trailing
include the line break at the end of the line, whereas others don’t;  masks this
difference. <\z matches only at the very end of the subject text, so it will not match
text if a trailing line break follows.
The anchor <$ is equivalent to \Z, as long as you do not turm on the *^ and $ match
at line breaks" option. This option is off by default for all regex flavors except Ruby.
Ruby does not offer a way to turn this option off. Just like \Z, <$ matches at the very
end of the subject text, as well as before the final line break, if any.
To help clarify this subtle and somewhat confusing situation, let's look at an example
in Perl. Assuming that $/ (the current record separator) is set to its defaulr \n, the