a limited number of users, either by virtue of their nature or
because they are not fully released. For example, certain object
properties contain enumerated values or version numbers. Not
only do these usually not concern privacy, but they can also
change over time, e.g. as a new version is released, leading
to false positives. On the other hand, product features with
limited exposure could beneﬁt from a lower invariant ratiﬁ-
cation threshold. For example, fundraisers are only available
for qualiﬁed US-based 501(c)(3) nonproﬁts, some business
features are only available to the employees of companies
that have come into an agreement with Facebook, and some
product features are only available to Facebook employees.
We are considering ways to enforce these invariants without
impacting the system’s overall false positive rate such as using
a ﬁner granularity for the invariant categories.
B. Effectiveness
IVD is a defense-in-depth system, therefore we expect it to
only jump into action on the rare occasions when authorization
checks are missing. However, even before that, we have the
possibility of quantifying its effectiveness by looking in more
detail at the invariants that it creates.
We deﬁne authorization coverage as the fraction of autho-
rization checks required for a system’s correct functioning that
are actually performed by its implementation. A correct system
has therefore 100% authorization coverage. While ideally we
would compute IVD’s authorization coverage by comparing its
invariants against Facebook’s speciﬁcation, this is not possible
due to the absence of a formal speciﬁcation, which is very
often the case in large-scale projects. Rather than evaluate
IVD’s effectiveness on a smaller toy OSN, we believe we can
obtain more insights into the system by performing tractable
measurements that can be used as a proxy for its actual
authorization coverage.
One way to estimate authorization coverage is to compute
the fraction of invariant categories that appear in database
writes, that have at least one invariant associated with them.
This provides a rough overall estimate of the protection offered
by IVD: it infers invariants for 50% of invariant categories, and
enforces them for 36% of categories. These numbers, however,
may not accurately represent authorization coverage since
some categories do not perform privacy-sensitive operations,
e.g. logging, while others may require multiple invariants, of
which only some have been inferred.
To obtain a more granular view of IVD’s authorization
coverage, we use Facebook’s code as its speciﬁcation and
manually compare IVD’s invariants against a sample of the
authorization checks implemented in Facebook’s code. Be-
sides helping us better quantify authorization coverage, this
approach also gives us insights into whether the expressive
power of IVD’s invariants is adequate, and has the added
beneﬁt of comparing IVD invariants against checks that we
can assume to be essential for the correct functioning of the
OSN.
To achieve this, we manually went
through Facebook’s
codebase, identiﬁed a sample of authorization checks, and
veriﬁed whether equivalent invariants existed. Such invariants
would prevent a hypothetical attempt to abuse Facebook in
case developers missed the check. As described in §II-C,
Facebook’s data access framework offers a structured way
of writing authorization policies. This allowed us to identify
the authorization rules by simply looking for classes that use
the PermissionsValidator trait. Out of roughly 1,000
such classes, we manually inspected the 22 which deny access
if the logged-in user does not satisfy a condition. We pick
these because (a) breaking them would have a signiﬁcant
impact, (b) they are a prime target of IVD by design, and (c)
we could easily identify them by matching the class name
the regular expression DenyIfViewerIs.*Not.*,
against
e.g. DenyIfViewerIsNotOwnerOfPage.
For each rule, we inspected its code to determine the object
and association types that it applies to, and the constraint that
it enforces. We then looked at the invariants IVD created for
those types and checked whether any of them corresponded to
the coded condition. We found that out of the 22 authorization
rules, 7 are unused (either deprecated or part of an upcoming
feature), and one is only enforced on reads. Out of the
remaining 14 rules, 10 have a corresponding invariant and
4 do not. It is important to note that IVD has also inferred
authorization rules not present in the codebase, as we will
describe in more detail in §V-C.
While it is difﬁcult to draw deﬁnitive conclusions from these
observations, we consider them a good indication that IVD can
adequately represent and learn authorization rules. To further
IVD’s bottom line contribution,
conﬁrm this we looked at
expressed as the number of violations engineers have acted
upon. More precisely, we looked at a period of 6 months and
found 23 reports (out of a total of 222 IVD reports) which had
one or more code changes associated with them and more-
over, we manually conﬁrmed that the changes are related to
authorization checks. To put this into perspective, Facebook’s
bug bounty program resulted in 526 valid submissions (out of
a total of 13,233 submissions) in a 12 months period [12].
Because Facebook’s bug bounty program accepts all types
of security issues across all of Facebook’s services [20], bug
bounty submissions are not limited to authorization bugs nor
to Facebook proper. We therefore consider IVD’s results to
provide an important contribution to Facebook’s security.
We next look at several speciﬁc bug instances to better
understand IVD’s strengths and blind spots.
C. Case Studies
IVD blocked abnormal behavior in several different scenar-
ios. Some involved benign users exercising a Facebook feature
in a way that was not expected or not taken into account
by the engineers. Others, however, were security researchers
participating in the bug bounty program or malicious actors
attempting to discover and exploit vulnerabilities in Facebook.
We present in more detail several cases where IVD stopped
bugs from being exploited and several cases where it did not,
along with the lessons that we have learned.
1104
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:44 UTC from IEEE Xplore.  Restrictions apply. 
True Positives. As described in §I, a lesser known Facebook
feature allows its users to merge business Pages that they
own. During the merge process, likes, followers and reviews
are consolidated into a single Page. Internally, this works by
creating a Page merge object and connecting all Pages involved
in the merge to it. IVD correctly inferred that when connecting
a Page object to a Page merge object, the logged-in user
must have an owner association with the Page. This invariant
was broken when a security researcher attempted to exploit
the merge system by crafting a merge request containing
identiﬁers of Pages that were not under their control. Even
though the researcher could not exploit the bug by virtue of
IVD, Facebook issued them a bounty for triggering it.
Another Facebook bug could have allowed any business
Page administrator to list other arbitrary Pages as their busi-
ness’ clients through a maliciously crafted request. The bug
was caused by a missing authorization check that IVD correctly
inferred: an administrator association must exist between the
logged-in user and the Page being connected for the operation
to be performed.
Another Facebook feature allows users to transform a per-
sonal proﬁle into a business Page. Users who inadvertently
create a personal proﬁle to represent a business use this feature
to convert the proﬁle and beneﬁt from additional business
features. The conversion process maintains all content and con-
nections with other users. Internally, this process (1) creates a
Page object, and (2), copies all content and connections from
the existing user proﬁle to the newly-created Page. One of the
endpoints implementing this feature accepted a Page object
identiﬁer and a set of user proﬁle identiﬁers to be added as
followers to the Page. IVD correctly inferred that the logged
in user must be friends with the account being added as a
follower to the business. An attacker who attempted to exploit
this vulnerability aimed to force a number of users to follow
a Page they did not choose to.
While IVD aims towards authorization bugs, it inherently
detects other unintended changes to an OSN. One example
involved a refactoring that split the group member association
into two: conﬁrmed member and unconﬁrmed member. The
now-legacy member relations was left into place to be used
by code predating the refactoring, IVD included, that did not
distinguish between the conﬁrmed and unconﬁrmed status.
The new and old associations were therefore supposed to be
synchronized. However, as IVD pointed out soon after the
change, there were rare circumstances where the member as-
sociation was no longer created, while the corresponding new
associations were, leading to inconsistencies in the graph. IVD
exposed the inconsistencies, during legitimate user activity,
as violations of invariants requiring the logged-in user to be
member of a particular group.
False Negatives. An important part of IVD’s development
is the post-mortem analyses of uncaught vulnerabilities that
affected Facebook. These allow us to understand IVD’s blind
spots, ﬁnd implementation bugs in IVD itself, and signiﬁcantly
improve the system over time. In the next paragraphs we
discuss several authorization bugs that affected Facebook
during the course of our study and did not trigger invariant
violations.
A bug not caught by IVD allowed users to delete arbitrary
videos [21]. To exploit it, a malicious user would ﬁrst (1)
create a comment, (2), attach the target video to it, and (3),
delete the comment. Step 2 caused the comment
to take
ownership of the video, while step 3 caused the comment
deletion to also trigger the video’s deletion. Neither step 2
nor 3 performed the access control checks necessary to prevent
the problem. While Facebook’s web interface did not allow
arbitrary videos to be attached to comments, its REST API
did.
An IVD invariant that would have caught the bug would have
checked whether the video owner is the same as the comment
author in step 2, when adding the association between the
IVD was not enforcing
video and the comment. However,
this invariant at the time the bug was discovered because the
vulnerable endpoint was part of a recent product feature that
was tested extensively via the web interface before release but
not signiﬁcantly via Facebook’s REST API. Therefore, the
volume of sampled API requests was not sufﬁcient to meet
IVD’s ratiﬁcation criteria. We mitigated this problem through
a more aggressive request sampling policy for test users and
employees, which results in invariants being created faster
after new features are introduced.
Another bug [22] allowed any user to change the cover
photo of any event they could see. The root cause of this
problem was a missing permission check in the code handling
the cover photo update. IVD did not detect the problem because
of the complex authorization policy that determines whether
a user can edit an event cover photo. The policy recognizes
three situations: the event is public and has no cover photo
yet, the event is created for a group, or the event is created
for a Page. Each case is treated separately and additional case-
speciﬁc checks, such as whether the user is an administrator
of the group owning the event, are performed. In particular,
IVD failed to create an invariant because the permission
check requires a disjunction predicate and IVD lacks such
expressiveness (§III).
False Positives. False positives are invariant violations
caused by legitimate activity. They are inevitable artifacts
that result from basing ground truth on a limited number
of observations. We use two approaches to handle them:
we quickly stop further blocking by manually blacklisting
invariants and subsequently target their underlying cause with
enforcement excuses (§IV-D).
The most commonly-excused violations in our setup,
amounting to 81% of all violations, are those that are not
authorization-relevant, as described in §III. We heuristically
detect whether a violation is authorization-relevant by looking
at the runtime types of the objects involved in the graph request
and at the name of the properties that the violated invariant
references. The object types are compared against a whitelist
containing the types known to be used in authorization checks,
e.g. USER or PAGE, the association type is compared against a
blacklist that holds types which are known to never be relevant
1105
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:44 UTC from IEEE Xplore.  Restrictions apply. 
to authorization, e.g. logging, while the property names are
matched against strings commonly used for authorization
properties, e.g. “owner”, “privacy”. If none of the above
checks indicates an authorization-related violation we default
to excusing it. These violations do not cause requests to be
blocked but they are nevertheless logged, allowing for further
investigation.
Another enforcement excuse commonly triggered in our
setup concerns requests involving different identiﬁers that refer
to the same user. This can happen because a user might act as
their personal account, their business account, their advertiser
account or as a Page that they administer. These accounts
are represented by separate, but connected graph objects. As
violations are relatively rare events, we can afford to inspect
the graph in more detail and verify whether the mismatching
identiﬁers point to objects that are connected in a fashion that
indicates they refer to the same person, and if so, we excuse
the violations. This excuse applied to 17% of all violations.
The remaining excuses cover a smaller fraction of violations
but they nevertheless make an important contribution towards
keeping the number of users affected by spurious invariants
and the number of reports that have to be manually investi-
gated low.
For example, we noticed violations involving code that
lazily performs actions, such as minor graph garbage collec-
tion, after handling a user’s request. These actions appear to
be performed by the user who originally made the request
but they can operate on other users’ data and cause spurious
violations. Since the code relevant to these actions is localized,
we use a call stack-based enforcement excuse that matches
call stack frames to speciﬁc functions assumed to correctly
perform maintenance activities to the graph.
Other excused scenarios include unowned Pages, memori-
alized users, and different users acting on an object belonging
to a Page or group that they commonly administer. Overall,
the excuses rule out approximately 99% of violations, with the
remaining 1% having to be manually inspected. We believe we
can further decrease this number by identifying and excusing
more spurious types of violations. IVD’s ﬁnal false positive
rate, i.e. the number of requests incorrectly blocked over the
number of requests which had invariants associated with them
is roughly 0.00000004%.
Vulnerability Mitigation. IVD may detect but not mitigate
vulnerabilities. This behavior can occur in web application
endpoints that manipulate multiple entity types. Consider the
endpoint
that creates the Page merge object, associations
between the merge object and individual Page objects and
associations between the merge object and users. IVD consid-
ers these operations to belong to different invariant categories
(§III) and may infer and enforce different predicates on them.
It is possible for an attacker to cause an invariant violation on
the third step of the process but not earlier, when the sensitive
merge object is created. If this happens in the absence of trans-
actional semantics IVD blocks the last operation but allows
all previous operations to complete, potentially resulting in
merged, albeit corrupt, Page.
From the attacker’s perspective the attack is successful
so there is an incentive to keep exploiting it. IVD however
reports a continuous stream of invariant violations as the attack
unfolds and pinpoints the endpoint that is being exploited.
IVD’s behavior is still valuable despite the system not being
able to automatically mitigate the vulnerability and potentially
causing data corruption.
We conclude that IVD invariant violations must be moni-
tored by engineers closely; the engineers should try to under-
stand the expected product behavior and either whitelist the
invariant or ﬁx the vulnerable endpoint.
D. Performance
IVD sits in a performance-critical part of the software stack,
between the web application and the graph database, therefore
its performance impacts most application features. Since IVD
is optimized to keep most of its data in memory and read
infrequently from the social graph beyond what is readily
available in the current request, its average execution can be
approximated by a CPU-bound workload.
To understand IVD’s performance impact we use a sampling
proﬁler that analyzes all of Facebook’s web servers and aggre-
gates the data globally. At Facebook the overall performance
and resource consumption of the web application are closely
monitored and distilled in a metric named “app weight”.
Any changes that regress the app weight must be well-
motivated. The measurements show that IVD’s contribution to
the total CPU time used executing web application code is a
mere 0.014%.
To further quantify IVD’s performance impact, we instru-
ment its code to measure the additional wall time it adds to
each database write and log a sample of the measurements. An
analysis of 40,000 samples yields a median overhead of 0.1ms
per database write, while the 99th percentile, i.e. the time taken
by the check that is slower than 99% of all checks, is 5ms.
However, these numbers are only an upper bound on the end-
to-end time penalty that IVD adds because Facebook’s code
may perform multiple operations concurrently. In particular,
unrelated I/O operations can be serviced while IVD executes,
leading to an increased level of parallelism but not necessarily
an increased end-to-end wall time.
To obtain a better idea of end-to-end wall time overhead
we measured the time needed to serve requests with and
without IVD enabled. We performed the analysis on Face-