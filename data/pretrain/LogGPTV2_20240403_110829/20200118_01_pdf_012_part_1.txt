# 全文检索与中文分词技术详解

## 目录
- 全文检索原理
- 自定义分词
- 排序（Ranking）
- 关键词分析
- GIN 索引
- RUM 索引
- 全文检索 + 附加过滤
- 模糊查询
  - 单字模糊查询
  - 双字模糊查询
  - Wchar 模糊查询注意事项
- 相似文本查询
- 中文分词插件
  - pg_scws
  - pg_jieba
  - zhparser

## 全文检索原理
全文检索是一种从大量文档中快速查找包含特定关键词或短语的文档的技术。PostgreSQL 提供了丰富的全文检索功能，包括自定义分词、排序和索引。

## 自定义分词
在 PostgreSQL 中，可以通过自定义分词器来处理中文等复杂语言。常用的中文分词插件有 `pg_scws`、`pg_jieba` 和 `zhparser`。

### 示例：使用 zhparser 进行自定义分词
```sql
CREATE EXTENSION zhparser;
CREATE TEXT SEARCH CONFIGURATION testzhcfg (PARSER = zhparser);
ALTER TEXT SEARCH CONFIGURATION testzhcfg ADD MAPPING FOR n,v,a,i,e,l WITH simple;

-- 测试分词
SELECT to_tsquery('testzhcfg', '保障房资金压力');
-- 结果: '保障' & '房' & '资金' & '压力'

-- 添加自定义词汇
INSERT INTO pg_ts_custom_word VALUES ('保障房资');

-- 同步词典
SELECT zhprs_sync_dict_xdb();

-- 再次测试分词
SELECT to_tsquery('testzhcfg', '保障房资金压力');
-- 结果: '保障房资' & '压力'

-- 开启多词匹配
ALTER ROLE all SET zhparser.multi_short=on;
SELECT to_tsquery('testzhcfg', '保障房资金压力');
-- 结果: '保障房资' & '保障' & '压力'
```

## 排序（Ranking）
PostgreSQL 提供了多种内置的排名算法，可以根据文档长度、唯一单词数等因素调整排名结果。

### 内置 Ranking
支持以下权重选项：
- 标题
- 作者
- 摘要
- 内容

#### 排名函数参数
- `ts_rank` 和 `ts_rank_cd` 函数接受一个整数 `normalization` 参数，用于指定文档长度对排名的影响方式。
  - `0`（默认）：忽略文档长度
  - `1`：将排名除以 `1 + log(文档长度)`
  - `2`：将排名除以文档长度
  - `4`：将排名除以段落之间的平均调和距离（仅 `ts_rank_cd` 实现）
  - `8`：将排名除以文档中的唯一单词数
  - `16`：将排名除以 `1 + log(唯一单词数)`
  - `32`：将排名除以自身 + 1

### 示例：使用 ts_rank 进行排名
```sql
SELECT * FROM tbl WHERE ts @@ to_tsquery('pg & alibaba')
ORDER BY ts_rank(ts, to_tsquery('pg & alibaba'));
```

## GIN 索引
GIN（Generalized Inverted Index）是一种高效的倒排索引结构，适用于多值类型的数据。

### GIN 索引结构
- 倒排结构
- 多值类型的元素树
- 行号（ctid）列表
- 待处理列表（pending list）优化写入

### 示例：创建 GIN 索引
```sql
CREATE INDEX rumidx ON test_rum USING gin (a rum_tsvector_ops);
```

## RUM 索引
RUM（RUM Universal Multicolumn）索引是一种扩展的 GIN 索引，支持附加属性查询。

### 示例：创建 RUM 索引并进行附加属性查询
```sql
CREATE TABLE tsts (id int, t tsvector, d timestamp);
\copy tsts from 'rum/data/tsts.data'
CREATE INDEX tsts_idx ON tsts USING rum (t rum_tsvector_addon_ops, d)
WITH (attach = 'd', to = 't');

EXPLAIN (costs off)
SELECT id, d, d - '2016-05-16 14:21:25' FROM tsts 
WHERE t @@ 'wr&qh' 
ORDER BY d - '2016-05-16 14:21:25' LIMIT 5;
```

## 模糊查询
模糊查询允许用户查找近似匹配的文本。

### 单字模糊查询
```sql
SELECT * FROM tbl WHERE to_tsvector('simple', col) @@ to_tsquery('simple', 'word:*');
```

### 双字模糊查询
```sql
SELECT * FROM tbl WHERE to_tsvector('simple', col) @@ to_tsquery('simple', 'word:* & word:*');
```

### Wchar 模糊查询注意事项
Wchar 类型的模糊查询需要注意字符编码和转换问题。

## 相似文本查询
相似文本查询通过计算文本特征向量来进行匹配。

### 示例：使用 tsvector 和 tsquery 进行相似文本查询
```sql
SELECT * FROM tbl WHERE ts @@ to_tsquery('pg & alibaba');
```

## 关键词统计
可以使用 `ts_stat` 函数进行关键词统计。

### 示例：关键词统计
```sql
SELECT * FROM ts_stat('SELECT to_tsvector(''simple'', text_column) FROM tbl');
```

以上是关于 PostgreSQL 全文检索和中文分词技术的详细介绍，希望对你有所帮助。