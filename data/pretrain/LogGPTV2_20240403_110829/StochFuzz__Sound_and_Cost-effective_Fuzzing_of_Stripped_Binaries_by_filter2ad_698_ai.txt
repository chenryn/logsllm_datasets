












































2
3
3
2
3
3
2
3
3
3
2
2
3
1
2
2
3
2
2
2
Fig. 13: Total Number of Fuzzing Executions in 24 hours. We
use aﬂ-gcc as the baseline, and report the ratio of STOCHFUZZ
to aﬂ-gcc. In the legend, we present the average number of
fuzzing executions over the 24 programs.
In contrast, STOCHFUZZ successfully instruments and fuzzes
all the programs.
F. Finding Zero-days in Closed-source Programs
In this experiment, we demonstrate STOCHFUZZ’s applica-
bility in closed-source or COTS binaries. We run STOCHFUZZ
on a set of 7 such binaries including CUDA Toolkit (cuob-
jdump, nvdisasm, cu++ﬁlt, and nvprune), PNGOUT, RAR
(rar and unrar) for a week. It discloses two zero-day vul-
nerabilities, as listed in Table IX. The ﬁrst column presents
the programs, and columns 2-5 present the release date of
subject programs, the size, the ﬁrst 4 bytes of MD5 Hash,
and current bug status, respectively. CUDA Binary Utilities,
developped by NVIDIA, are a set of utilities which can extract
information from CUDA binary ﬁles [45]. The bug has been
Fixed in CUDA 11.3 [65]. PNGOUT is a closed-source PNG
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:32:54 UTC from IEEE Xplore.  Restrictions apply. 
17675
1.051.001.301.680.981.050.770.790.801.111.290.981.240.971.011.021.010.971.020.981.031.401.591.21boringsslc-aresfreetype2guetzliharfbuzzjsonlcmslibarchivelibjpeg-turbolibpnglibsshlibxml2llvm-libcxxabiopenssl-1.0.1fopenssl-1.0.2dopenssl-1.1.0copenthreadpcre2proj4re2sqlitevorbiswoff2wpantund1.0afl-gcc(121.2M)StochFuzz(124.7M)TABLE
IX:
STOCHFUZZ
Program
Zero-day
vulnerabilities
disclosed
by
Released Date
Size
MD5
Status
TABLE XI: Different approaches are solving the small / large
maze. The tables shows the average time-to-solve in minutes
± the standard deviation.
G. Collect Other Runtime Feedback Than Coverage
10:
CUDA Binary Utilities
PNGOUT
2020-09-20
2020-01-15
33M edaf12b5
89K
64f6899d
Fixed
CVE-2020-29384
TABLE X: Maze Solving by Different Approaches. Three runs
are performed, each with a timeout of 12 hours, according to
the setting of the original paper. Symbol  denotes no solution
was found in any run,  denotes that all runs solved the maze.
Maze
l Easy
l
a
m
Hard
S
e Easy
g
r
a
Hard
L
Plain
IJON-Source
IJON-Binary
aﬂ-clang-fast
aﬂ-clang-fast
aﬂ-qemu
STOCHFUZZ
2/3
1/3














ﬁle compressors, which is adopted by multiple commercial or
non-commercial image optimizers [46], [47]. These optimizers
are further used by thousands of website to speed up image
uploading. The PNGOUT vulnerability has been assigned a
CVE ID.
We follow the exact same setup in IJON, with two maze
sizes (large and small) and two sets of rules. With the easy
rule, a game is terminated once an incorrect step is taken.
With the hard one, the player is allowed to backtrack. Note
that in the later case, the state space is much larger. We
experiment with 4 tools, aﬂ-clang-fast without IJON plugin,
aﬂ-clang-fast with IJON plugin, binary-only aﬂ-qemu with
ported IJON plugin, and binary-only STOCHFUZZ with ported
IJON plugin. We run each tool three times with a 12-hour
timeout. Table X shows the overall effectiveness. The ﬁrst
column presents the different mazes under different rules.
Columns 2-5 denote whether the maze is solved by the 4
different tools, respectively. Aﬂ-clang-fast solves the small
maze with the easy rule 2 out of 3 trials, and the small maze
with the hard rule 1 out of 3 trials. The other tools successfully
solve all the mazes. Table XI shows the average time (in
minutes) needed to solve the mazes and the standard deviation.
Observe that although aﬂ-clang-fast can solve some small
mazes, it takes the longest time. Regarding the two binary-only
approaches, STOCHFUZZ is around 8× faster than aﬂ-qemu.
Additionally, STOCHFUZZ only has around 8% slowdown
compared with aﬂ-clang-fast plus IJON, which demonstrates
the capabilities of STOCHFUZZ.
H. One-step Sum-product Algorithm
Algorithm 2 describes the one-step sum-product inference
procedure. Ocode and Odata denote the aggregated code and
data observation values for each address, respectively. Note
that a small value means strong belief. Line 3 performs the
deterministic inference. Line 9 identiﬁes SCCs and transforms
UCFG to a DAG of SCCs. Step 1 in lines 13-20 propagates
Plain
Maze
IJON-Binary
aﬂ-clang-fast
IJON-Source
aﬂ-clang-fast
STOCHFUZZ
1.64 ± 0.51
l Easy 95.42 ± 40.47 1.52 ± 0.45
0.52 ± 0.06
0.46 ± 0.09
20.66 ± 9.19 150.28 ± 30.27 22.94 ± 14.49
5.31 ± 1.59
5.12 ± 1.89
20.96 ± 10.56
3.85 ± 1.90
Hard 149.78 ± 0.0
96.85 ± 16.61
e Easy
Hard
aﬂ-qemu
l
a
m
S
-
-
g
r
a
L
Algorithm 2 One-step Sum-product
INPUT: B
P [a]∈ [0, 1]
OUTPUT:
LOCAL: G = (V, E)
Ocode[a]∈ [0, 1]
Odata[a]∈ [0, 1]
binary indexed by address
probability of address a holding a data byte
V ={a | ∃c s.t. Inst(a, c)}
E ={(a1, a2) | ExplicitSucc(a1, a2)}
aggregated code observations on address a
aggregated data observations on address a
1: function CALCPROBABILITY(B)
2:
G = BUILDUCFG(B)
3:
Ocode, Odata = COLLECTOBSERVATIONS(B)
4:
P = ONESTEPSUMPRODUCT(G, Ocode, Odata)
5:
return P
6: end function
7:
8: function ONESTEPSUMPRODUCT(G, Ocode, Odata)
9:
GDAG = TRANSFROMINTODAG(G)
(cid:46) Transform G into a
Directed Acyclic Graph (DAG) via collapsing each Strongly Connected Component
(SCC) into a vertex
ODAG code = CREATEEMPTYMAPPING() (cid:46) DAG-related mapping, initialized
as empty
end for
end if
end for
pdata
end for
end if
iprev = i
Ocode[i] = ODAG code[x]
Odata[j] = 1 −
if Odata[i] (cid:54)= ⊥ then
if 1  0
end for
iprev = ∞
for each address i of B in increasing order do
o1 = PRODUCT({ODAG code[y] | SCC y is a predecessor of SCC x)
o2 = PRODUCT({Ocode[i] | address i belongs to SCC x})
ODAG code[x] = o1 × o2
for each address i in all addresses belonging to SCC x do
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
36:
37:
38:
39:
end for
40:
return P
41: end function
code observations. Step 2 in lines 22-33 propagates data
observations. The formula in line 28 is derived from a simple
factor graph involving three variables (i.e., addresses i, iprev,
and j), and three factors (for Odata[iprev], Odata[i], and rule
7 ). Details are elided. Step 3 in lines 35-39 performs the one-
step sum-product for each address. Lines 36 and 37 assign
observation value 0.5 if there is no belief propagated to the
address. The formula in line 38 is derived from that in Fig. 9.
for each address i of B in increasing order do
oneg = (Ocode[i] = ⊥ ? 0.5 : Ocode[i])
opos = (Odata[i] = ⊥ ? 0.5 : Odata[i])
P [i] = oneg · (1 − opos) / (opos · (1 − oneg) + oneg · (1 − opos))
(cid:46) Step 3: one-step sum-product for each address
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:32:54 UTC from IEEE Xplore.  Restrictions apply. 
18676