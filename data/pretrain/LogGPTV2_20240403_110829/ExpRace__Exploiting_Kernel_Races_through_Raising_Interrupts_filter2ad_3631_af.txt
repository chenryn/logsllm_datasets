on Operating Systems Principles (SOSP), Bolton Landing, NY, Oct.
2003.
[18] J. Erickson, M. Musuvathi, S. Burckhardt, and K. Olynyk. Effective
data-race detection for the kernel. In Proceedings of the 9th USENIX
Symposium on Operating Systems Design and Implementation (OSDI),
Vancouver, Canada, Oct. 2010.
[19] P. Fonseca, R. Rodrigues, and B. B. Brandenburg. Ski: Exposing
kernel concurrency bugs through systematic schedule exploration. In
Proceedings of the 11th USENIX Symposium on Operating Systems
Design and Implementation (OSDI), Broomfield, Colorado, Oct. 2014.
[20] L. G. Gerbarg. Advanced synchronization in mac os x: Extending unix
to smp and real-time. In BSDCon, pages 37–45, 2002.
[21] D. Gruss, R. Spreitzer, and S. Mangard. Cache template attacks: Au-
tomating attacks on inclusive last-level caches. In Proceedings of the
24th USENIX Security Symposium (Security), Washington, DC, Aug.
2015.
[22] M. Hähnel, W. Cui, and M. Peinado. High-resolution side channels
for untrusted operating systems. In Proceedings of the 2017 USENIX
Annual Technical Conference (ATC), Santa Clara, CA, July 2017.
[23] J. Horn. Android: binder use-after-free of vma via race between reclaim
and munmap, 2018. https://bugs.chromium.org/p/project-zero/issues/
detail?id=1720.
[24] J. Horn. Android: binder use-after-free via racy initialization of -
>allow_user_free, 2018. https://bugs.chromium.org/p/project-zero/
issues/detail?id=1721&q=cve-2019-1999.
[25] H. Hu, S. Shinde, S. Adrian, Z. L. Chua, P. Saxena, and Z. Liang.
Data-oriented programming: On the expressiveness of non-control data
attacks. In Proceedings of the 37th IEEE Symposium on Security and
Privacy (Oakland), San Jose, CA, May 2016.
[26] Y. Jang, S. Lee, and T. Kim. Breaking kernel address space layout ran-
domization with intel tsx. In Proceedings of the 23rd ACM Conference
on Computer and Communications Security (CCS), Vienna, Austria,
Oct. 2016.
[27] D. R. Jeong, K. Kim, B. Shivakumar, B. Lee, and I. Shin. Razzer: Find-
ing kernel race bugs through fuzzing. In Proceedings of the 40th IEEE
Symposium on Security and Privacy (Oakland), SAN FRANCISCO,
CA, May 2019.
[28] Y. Jiang, Y. Yang, T. Xiao, T. Sheng, and W. Chen. Drddr: a lightweight
method to detect data races in linux kernel. The Journal of Supercom-
puting, 72(4):1645–1659, 2016.
[29] G. Jin, W. Zhang, and D. Deng. Automated concurrency-bug fixing.
In Proceedings of the 10th USENIX Symposium on Operating Systems
Design and Implementation (OSDI), Hollywood, CA, Oct. 2012.
[30] B. Kasikci, W. Cui, X. Ge, and B. Niu. Lazy diagnosis of in-production
concurrency bugs. In Proceedings of the 26th ACM Symposium on
Operating Systems Principles (SOSP), Shanghai, China, Oct. 2017.
[31] G. Li, S. Lu, M. Musuvathi, S. Nath, and R. Padhye. Efficient scalable
thread-safety-violation detection: finding thousands of concurrency
bugs during testing. In Proceedings of the 27th ACM Symposium on
Operating Systems Principles (SOSP), Ontario, Canada, Oct. 2019.
[32] Linux. Linux commit log 4842e98f26dd80be3623c4714a244ba52ea096a8.,
2017. https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/
commit/?id=4842e98f26dd80be3623c4714a244ba52ea096a8.
[33] Linux. Linux commit log da1b9564e85b1d7baf66cbfabcab27e183a1db63.,
2018. https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/
commit/?id=da1b9564e85b1d7baf66cbfabcab27e183a1db63.
[34] Linux. Linux commit log e20a2e9c42c9e4002d9e338d74e7819e88d77162.,
2019. https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/
commit/?id=e20a2e9c42c9e4002d9e338d74e7819e88d77162.
[35] Linux. Linux commit log 11eb85ec42dc8c7a7ec519b90ccf2eeae9409de8.,
2020. https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/
commit/?id=11eb85ec42dc8c7a7ec519b90ccf2eeae9409de8.
[36] Linux. Linux commit log 20f2e4c228c712158113583947f4e16691e951f6.,
2020. https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/
commit/?id=20f2e4c228c712158113583947f4e16691e951f6.
[37] T. Liu, C. Curtsinger, and E. D. Berger. Dthreads: efficient determin-
istic multithreading. In Proceedings of the 23rd ACM Symposium on
Operating Systems Principles (SOSP), Cascais, Portugal, Oct. 2011.
[38] S. Lu, S. Park, E. Seo, and Y. Zhou. Learning from mistakes: a com-
prehensive study on real world concurrency bug characteristics. In
Proceedings of the 13th ACM International Conference on Architec-
tural Support for Programming Languages and Operating Systems
(ASPLOS), Seattle, WA, Mar. 2008.
[39] Y. Luo, P. Wang, X. Zhou, and K. Lu. Dftinker: Detecting and fixing
double-fetch bugs in an automated way. In International Conference
on Wireless Algorithms, Systems, and Applications, pages 780–785.
Springer, 2018.
[40] D. Marino, M. Musuvathi, and S. Narayanasamy. Literace: effective
sampling for lightweight data-race detection. In Proceedings of the
2009 ACM SIGPLAN Conference on Programming Language Design
and Implementation (PLDI), Dublin, Ireland, June 2009.
[41] Microsoft.
Interrupt affinity, 2017. https://docs.microsoft.com/en-
us/windows-hardware/drivers/kernel/interrupt-affinity-and-priority.
[42] Microsoft. Scheduling priorities., 2018. https://docs.microsoft.com/en-
us/windows/win32/procthread/scheduling-priorities.
[43] MITRE. CVE-2016-8655., 2016.
cvename.cgi?name=CVE-2016-8655.
[44] MITRE. CVE-2017-2636., 2017.
cvename.cgi?name=CVE-2017-2636.
[45] MITRE. CVE-2017-7533., 2017.
cvename.cgi?name=CVE-2017-7533.
https://cve.mitre.org/cgi-bin/
https://cve.mitre.org/cgi-bin/
https://cve.mitre.org/cgi-bin/
[46] A. Moghimi, G. Irazoqui, and T. Eisenbarth. Cachezoom: How sgx
amplifies the power of cache attacks. In Proceedings of the 2017 Cryp-
tographic Hardware and Embedded Systems (CHES), Taipei, Taiwan,
Sept. 2017.
[47] N. Nethercote and J. Seward. Valgrind: a framework for heavyweight
dynamic binary instrumentation. In Proceedings of the 2007 ACM
SIGPLAN Conference on Programming Language Design and Imple-
2378    30th USENIX Security Symposium
USENIX Association
mentation (PLDI), San Diego, CA, June 2007.
[48] M. Prandini and M. Ramilli. Return-oriented programming. In Proceed-
ings of the 33rd IEEE Symposium on Security and Privacy (Oakland),
San Francisco, CA, May 2012.
[49] M. Schwarz, D. Gruss, M. Lipp, C. Maurice, T. Schuster, A. Fogh, and
S. Mangard. Automated detection, exploitation, and elimination of
double-fetch bugs using modern cpu features. In Proceedings of the
13th ACM Symposium on Information, Computer and Communications
Security (ASIACCS), Incheon, Korea, May–June 2018.
[50] K. Serebryany and T. Iskhodzhanov. Threadsanitizer: data race detec-
tion in practice. In Proceedings of the Workshop on Binary Instrumen-
tation and Applications, pages 62–71. ACM, 2009.
[51] A. Sotirov. Heap feng shui in javascript. Black Hat Europe, 2007,
2007.
[52] M. Stone.
Bad binder: Android in-the-wild exploit, 2019.
https://googleprojectzero.blogspot.com/2019/11/bad-binder-android-
in-wild-exploit.html.
[53] Syzkaller. Syzkaller log 1a6084f827bc586c4361b6256040c593f4c19f5b.,
2020.
1a6084f827bc586c4361b6256040c593f4c19f5b.
https://syzkaller.appspot.com/bug?id=
[54] H. A. Thanassis, C. S. Kil, and B. David. Aeg: Automatic exploit gen-
eration. In ser. Network and Distributed System Security Symposium,
2011.
[55] J. Van Bulck, F. Piessens, and R. Strackx. Sgx-step: A practical attack
framework for precise enclave execution control. In Proceedings of the
2nd Workshop on System Software for Trusted Execution, pages 1–6,
2017.
[56] J. Van Bulck, F. Piessens, and R. Strackx. Nemesis: Studying mi-
croarchitectural timing leaks in rudimentary cpu interrupt logic. In
Proceedings of the 25th ACM Conference on Computer and Communi-
cations Security (CCS), Toronto, Canada, Oct. 2018.
[57] K. Veeraraghavan, P. M. Chen, J. Flinn, and S. Narayanasamy. De-
tecting and surviving data races using complementary schedules. In
Proceedings of the 23rd ACM Symposium on Operating Systems Prin-
ciples (SOSP), Cascais, Portugal, Oct. 2011.
[58] V. Vojdani, K. Apinis, V. Rõtov, H. Seidl, V. Vene, and R. Vogler. Static
race detection for device drivers: the goblint approach. In Proceed-
ings of the 31rd IEEE/ACM International Conference on Automated
Software Engineering (ASE), Singapore, Singapore, Sept. 2016.
[59] J. W. Voung, R. Jhala, and S. Lerner. Relay: static race detection on
millions of lines of code. In Proceedings of the the 6th joint meeting of
the European software engineering conference and the ACM SIGSOFT
symposium on The foundations of software engineering. ACM, 2007.
[60] P. Wang, J. Krinke, K. Lu, G. Li, and S. Dodier-Lazaro. How double-
fetch situations turn into double-fetch vulnerabilities: A study of double
fetches in the linux kernel. In Proceedings of the 26th USENIX Security
Symposium (Security), Vancouver, BC, Canada, Aug. 2017.
[61] Y. Wang, C. Zhang, X. Xiang, Z. Zhao, W. Li, X. Gong, B. Liu, K. Chen,
and W. Zou. Revery: From proof-of-concept to exploitable. In Proceed-
ings of the 25th ACM Conference on Computer and Communications
Security (CCS), Toronto, Canada, Oct. 2018.
[62] W. Wu, Y. Chen, J. Xu, X. Xing, X. Gong, and W. Zou. {FUZE}:
Towards facilitating exploit generation for kernel use-after-free vul-
nerabilities. In Proceedings of the 27th USENIX Security Symposium
(Security), BALTIMORE, MD, Aug. 2018.
[63] M. Xu, C. Qian, K. Lu, M. Backes, and T. Kim. Precise and scal-
able detection of double-fetch bugs in os kernels. In Proceedings of
the 39th IEEE Symposium on Security and Privacy (Oakland), SAN
FRANCISCO, CA, May 2018.
[64] Z. Xu, G. Liu, T. Wang, and H. Xu. Exploitations of uninitialized uses
on macos sierra. In Proceedings of the 11th USENIX Workshop on
Offensive Technologies (WOOT), VANCOUVER, BC, Aug. 2017.
[65] T. Zhang, D. Lee, and C. Jung. Txrace: Efficient data race detection
using commodity hardware transactional memory. In Proceedings of
the 21st ACM International Conference on Architectural Support for
Programming Languages and Operating Systems (ASPLOS), Atlanta,
GA, Apr. 2016.
[66] T. Zhang, C. Jung, and D. Lee. Prorace: Practical data race detection
for production use. In Proceedings of the 22nd ACM International
Conference on Architectural Support for Programming Languages and
Operating Systems (ASPLOS), Xi’an, China, Apr. 2017.
A Appendix
// if pid is NULL then calling thread is used
if(sched_setaffinity(0, sizeof(cpu_set_t), &cset))
// Suppose that a victim thread is running on core 2.
pin_this_task_to(2);
while(1) {
// There is a data race in this thread.
err(1, "affinity");
cpu_set_t cset;
CPU_ZERO(&cset);
CPU_SET(cpu, &cset);
1 void pin_this_task_to(int cpu) {
2
3
4
5
6
7
8
9 }
10
11 void target_thread(void *arg) {
12
13
14
15
16
17 }
18
19 int main() {
20
21
22
23
24 }
}
pthread_t thr;
pthread_create(&thr, NULL, target_thread, NULL);
// Send rescheduling IPI to core 2 to extend the race window.
pin_this_task_to(2);
Figure A.1: The simplified code of EXPRACE’s Reschedule IPI
exploitation method
// Allocate memory for tlb shootdown
addr = mmap(0, map_size, (PROT_READ | PROT_WRITE),
MAP_SHARED | MAP_ANON, -1, 0);
// Access memory to update tlb
memcpy(buf, addr, 1);
// Modify memory permission for TLB shootdown
mprotect(addr, map_size, PROT_READ);
char buf[8];
void *addr;
1 int map_size = 0x1000;
2
3 void sendIPI() {
4
5
6
7
8
9
10
11
12
13
14 }
15
16 void target_thread(void *arg) {
17
18
19
20 }
21
22 int main(void) {
23
24
25
26 }
while(1){
}
// There is a data race in this thread
pthread_t thread;
pthread_create(&thread, NULL, (void *)target_thread, NULL);
sendIPI();
Figure A.2: The simplified code of EXPRACE’s TLB shootdown
IPI exploitation method
USENIX Association
30th USENIX Security Symposium    2379
multi
multi
Vulnerability
Baseline
Reschedule
membarrier
Pmulti Syscallx Syscally interrupt PEXPRACE
0
4.42e-05
0
4.43e-05
0
0
0
4.99e-05
0
0
CVE-2019-6974
CVE-2019-2025
CVE-2019-1999
CVE-2017-15265
11eb85ec...
1a6084f8...
20f2e4c2...
4842e98f...
da1b9564...
e20a2e9c...
Table A.1: Detailed exploitation results on real-world race vulnerabilities in Linux. ✗ denotes that the exploitation was not performed as the
corresponding exploitation method does not work for the subjected race vulnerability.
Syscallx Syscally interrupt PEXPRACE
✗
9 M 1.38e-03
78 B 2.95e-05
54 M 9.13e-04
0
14 M
14 M
0
80 B 2.01e-05
14 M 2.16e-03
✗
0
Syscallx Syscally interrupt PEXPRACE
39 B
✗