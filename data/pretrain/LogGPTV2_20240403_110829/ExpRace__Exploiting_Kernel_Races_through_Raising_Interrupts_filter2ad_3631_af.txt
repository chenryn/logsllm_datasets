以下是优化后的文本，使其更加清晰、连贯和专业：

---

**参考文献**

[18] J. Erickson, M. Musuvathi, S. Burckhardt, and K. Olynyk. 有效的内核数据竞争检测. 在第9届USENIX操作系统设计与实现研讨会（OSDI）论文集, 温哥华, 加拿大, 2010年10月.

[19] P. Fonseca, R. Rodrigues, 和 B. B. Brandenburg. Ski: 通过系统性调度探索暴露内核并发错误. 在第11届USENIX操作系统设计与实现研讨会（OSDI）论文集, 科罗拉多州布鲁姆菲尔德, 2014年10月.

[20] L. G. Gerbarg. Mac OS X中的高级同步: 将Unix扩展到SMP和实时系统. 在BSDCon会议录, 第37-45页, 2002年.

[21] D. Gruss, R. Spreitzer, 和 S. Mangard. 缓存模板攻击: 自动化攻击包含最后一级缓存. 在第24届USENIX安全研讨会（Security）论文集, 华盛顿特区, 2015年8月.

[22] M. Hähnel, W. Cui, 和 M. Peinado. 针对不可信操作系统的高分辨率侧信道. 在2017 USENIX年度技术会议（ATC）论文集, 加利福尼亚州圣克拉拉, 2017年7月.

[23] J. Horn. Android: binder在回收和munmap之间的竞争导致vma使用后释放. 2018年. https://bugs.chromium.org/p/project-zero/issues/detail?id=1720.

[24] J. Horn. Android: binder在允许用户释放的初始化过程中存在竞争条件. 2018年. https://bugs.chromium.org/p/project-zero/issues/detail?id=1721&q=cve-2019-1999.

[25] H. Hu, S. Shinde, S. Adrian, Z. L. Chua, P. Saxena, 和 Z. Liang. 数据导向编程: 对非控制数据攻击表达能力的研究. 在第37届IEEE安全与隐私研讨会（Oakland）论文集, 加利福尼亚州圣何塞, 2016年5月.

[26] Y. Jang, S. Lee, 和 T. Kim. 使用Intel TSX破坏内核地址空间布局随机化. 在第23届ACM计算机与通信安全会议（CCS）论文集, 奥地利维也纳, 2016年10月.

[27] D. R. Jeong, K. Kim, B. Shivakumar, B. Lee, 和 I. Shin. Razzer: 通过模糊测试查找内核竞争错误. 在第40届IEEE安全与隐私研讨会（Oakland）论文集, 加利福尼亚州旧金山, 2019年5月.

[28] Y. Jiang, Y. Yang, T. Xiao, T. Sheng, 和 W. Chen. Drddr: 一种轻量级的Linux内核数据竞争检测方法. 超级计算杂志, 72(4):1645–1659, 2016年.

[29] G. Jin, W. Zhang, 和 D. Deng. 自动修复并发错误. 在第10届USENIX操作系统设计与实现研讨会（OSDI）论文集, 加利福尼亚州好莱坞, 2012年10月.

[30] B. Kasikci, W. Cui, X. Ge, 和 B. Niu. 生产环境中并发错误的延迟诊断. 在第26届ACM操作系统原则研讨会（SOSP）论文集, 中国上海, 2017年10月.

[31] G. Li, S. Lu, M. Musuvathi, S. Nath, 和 R. Padhye. 高效可扩展的线程安全性违规检测: 在测试中发现数千个并发错误. 在第27届ACM操作系统原则研讨会（SOSP）论文集, 加拿大安大略省, 2019年10月.

[32] Linux. Linux提交日志4842e98f26dd80be3623c4714a244ba52ea096a8., 2017年. https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=4842e98f26dd80be3623c4714a244ba52ea096a8.

[33] Linux. Linux提交日志da1b9564e85b1d7baf66cbfabcab27e183a1db63., 2018年. https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=da1b9564e85b1d7baf66cbfabcab27e183a1db63.

[34] Linux. Linux提交日志e20a2e9c42c9e4002d9e338d74e7819e88d77162., 2019年. https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=e20a2e9c42c9e4002d9e338d74e7819e88d77162.

[35] Linux. Linux提交日志11eb85ec42dc8c7a7ec519b90ccf2eeae9409de8., 2020年. https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=11eb85ec42dc8c7a7ec519b90ccf2eeae9409de8.

[36] Linux. Linux提交日志20f2e4c228c712158113583947f4e16691e951f6., 2020年. https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=20f2e4c228c712158113583947f4e16691e951f6.

[37] T. Liu, C. Curtsinger, 和 E. D. Berger. Dthreads: 高效的确定性多线程. 在第23届ACM操作系统原则研讨会（SOSP）论文集, 葡萄牙卡斯凯什, 2011年10月.

[38] S. Lu, S. Park, E. Seo, 和 Y. Zhou. 从错误中学习: 对现实世界中并发错误特征的全面研究. 在第13届ACM国际编程语言和操作系统架构支持会议（ASPLOS）论文集, 华盛顿州西雅图, 2008年3月.

[39] Y. Luo, P. Wang, X. Zhou, 和 K. Lu. Dftinker: 自动检测和修复双重获取错误. 在无线算法、系统和应用国际会议, 第780-785页. Springer, 2018年.

[40] D. Marino, M. Musuvathi, 和 S. Narayanasamy. Literace: 用于轻量级数据竞争检测的有效采样. 在2009 ACM SIGPLAN编程语言设计与实现会议（PLDI）论文集, 爱尔兰都柏林, 2009年6月.

[41] Microsoft. 中断亲和力, 2017年. https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/interrupt-affinity-and-priority.

[42] Microsoft. 调度优先级, 2018年. https://docs.microsoft.com/en-us/windows/win32/procthread/scheduling-priorities.

[43] MITRE. CVE-2016-8655, 2016年. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-8655.

[44] MITRE. CVE-2017-2636, 2017年. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-2636.

[45] MITRE. CVE-2017-7533, 2017年. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7533.

[46] A. Moghimi, G. Irazoqui, 和 T. Eisenbarth. Cachezoom: SGX如何放大缓存攻击的能力. 在2017密码硬件与嵌入式系统会议（CHES）论文集, 台湾台北, 2017年9月.

[47] N. Nethercote 和 J. Seward. Valgrind: 一个重型动态二进制插桩框架. 在2007 ACM SIGPLAN编程语言设计与实现会议（PLDI）论文集, 加利福尼亚州圣地亚哥, 2007年6月.

[48] M. Prandini 和 M. Ramilli. 返回导向编程. 在第33届IEEE安全与隐私研讨会（Oakland）论文集, 加利福尼亚州旧金山, 2012年5月.

[49] M. Schwarz, D. Gruss, M. Lipp, C. Maurice, T. Schuster, A. Fogh, 和 S. Mangard. 使用现代CPU特性自动检测、利用和消除双重获取错误. 在第13届ACM信息、计算机和通信安全研讨会（ASIACCS）论文集, 韩国仁川, 2018年5-6月.

[50] K. Serebryany 和 T. Iskhodzhanov. ThreadSanitizer: 实践中的数据竞争检测. 在二进制插桩和应用研讨会论文集, 第62-71页. ACM, 2009年.

[51] A. Sotirov. JavaScript中的堆风水. Black Hat Europe, 2007年.

[52] M. Stone. Bad Binder: Android野外漏洞, 2019年. https://googleprojectzero.blogspot.com/2019/11/bad-binder-android-in-wild-exploit.html.

[53] Syzkaller. Syzkaller日志1a6084f827bc586c4361b6256040c593f4c19f5b, 2020年. https://syzkaller.appspot.com/bug?id=1a6084f827bc586c4361b6256040c593f4c19f5b.

[54] H. A. Thanassis, C. S. Kil, 和 B. David. Aeg: 自动漏洞利用生成. 在网络与分布式系统安全研讨会, 2011年.

[55] J. Van Bulck, F. Piessens, 和 R. Strackx. Sgx-step: 一种精确控制enclave执行的实用攻击框架. 在第二届可信执行系统软件研讨会论文集, 第1-6页, 2017年.

[56] J. Van Bulck, F. Piessens, 和 R. Strackx. Nemesis: 研究基本CPU中断逻辑中的微架构时序泄漏. 在第25届ACM计算机与通信安全会议（CCS）论文集, 加拿大多伦多, 2018年10月.

[57] K. Veeraraghavan, P. M. Chen, J. Flinn, 和 S. Narayanasamy. 使用互补调度检测和生存数据竞争. 在第23届ACM操作系统原则研讨会（SOSP）论文集, 葡萄牙卡斯凯什, 2011年10月.

[58] V. Vojdani, K. Apinis, V. Rõtov, H. Seidl, V. Vene, 和 R. Vogler. 设备驱动程序的静态竞争检测: Goblint方法. 在第31届IEEE/ACM自动化软件工程国际会议（ASE）论文集, 新加坡, 2016年9月.

[59] J. W. Voung, R. Jhala, 和 S. Lerner. Relay: 数百万行代码的静态竞争检测. 在第6届欧洲软件工程会议和ACM SIGSOFT基础软件工程研讨会联合会议上. ACM, 2007年.

[60] P. Wang, J. Krinke, K. Lu, G. Li, 和 S. Dodier-Lazaro. 双重获取情况如何变成双重获取漏洞: 对Linux内核中双重获取的研究. 在第26届USENIX安全研讨会（Security）论文集, 加拿大不列颠哥伦比亚省温哥华, 2017年8月.

[61] Y. Wang, C. Zhang, X. Xiang, Z. Zhao, W. Li, X. Gong, B. Liu, K. Chen, 和 W. Zou. Revery: 从概念验证到可利用. 在第25届ACM计算机与通信安全会议（CCS）论文集, 加拿大多伦多, 2018年10月.

[62] W. Wu, Y. Chen, J. Xu, X. Xing, X. Gong, 和 W. Zou. FUZE: 促进内核使用后释放漏洞的利用生成. 在第27届USENIX安全研讨会（Security）论文集, 马里兰州巴尔的摩, 2018年8月.

[63] M. Xu, C. Qian, K. Lu, M. Backes, 和 T. Kim. 操作系统内核中双重获取错误的精确且可扩展检测. 在第39届IEEE安全与隐私研讨会（Oakland）论文集, 加利福尼亚州旧金山, 2018年5月.

[64] Z. Xu, G. Liu, T. Wang, 和 H. Xu. macOS Sierra中未初始化使用的利用. 在第11届USENIX进攻技术研讨会（WOOT）论文集, 不列颠哥伦比亚省温哥华, 2017年8月.

[65] T. Zhang, D. Lee, 和 C. Jung. Txrace: 使用商用硬件事务内存进行高效的数据竞争检测. 在第21届ACM国际编程语言和操作系统架构支持会议（ASPLOS）论文集, 佐治亚州亚特兰大, 2016年4月.

[66] T. Zhang, C. Jung, 和 D. Lee. Prorace: 适用于生产环境的实用数据竞争检测. 在第22届ACM国际编程语言和操作系统架构支持会议（ASPLOS）论文集, 中国西安, 2017年4月.

**附录A**

```c
// 如果pid为NULL，则使用调用线程
if (sched_setaffinity(0, sizeof(cpu_set_t), &cset)) {
    // 假设受害线程正在核心2上运行
    pin_this_task_to(2);
}

while (1) {
    // 此线程中存在数据竞争
    err(1, "affinity");
}

cpu_set_t cset;
CPU_ZERO(&cset);
CPU_SET(cpu, &cset);

void pin_this_task_to(int cpu) {
    // 将当前任务固定到指定的核心
}

void target_thread(void *arg) {
    // 目标线程
}

int main() {
    pthread_t thr;
    pthread_create(&thr, NULL, target_thread, NULL);

    // 向核心2发送重新调度IPI以延长竞争窗口
    pin_this_task_to(2);
}
```

**图A.1**: EXPRACE的重新调度IPI利用方法简化代码

```c
// 分配TLB shootdown所需的内存
addr = mmap(0, map_size, (PROT_READ | PROT_WRITE),
             MAP_SHARED | MAP_ANON, -1, 0);

// 访问内存以更新TLB
memcpy(buf, addr, 1);

// 修改内存权限以进行TLB shootdown
mprotect(addr, map_size, PROT_READ);

char buf[8];
void *addr;

int map_size = 0x1000;

void sendIPI() {
    // 发送IPI
}

void target_thread(void *arg) {
    // 目标线程
}

int main(void) {
    pthread_t thread;
    pthread_create(&thread, NULL, (void *)target_thread, NULL);

    while (1) {
        // 此线程中存在数据竞争
    }

    sendIPI();
}
```

**图A.2**: EXPRACE的TLB shootdown IPI利用方法简化代码

**表A.1**: Linux中真实世界竞赛漏洞的详细利用结果。✗表示由于相应的利用方法对该竞赛漏洞无效，因此未进行利用。

| 漏洞       | Baseline | Reschedule | membarrier | Syscallx | Syscally interrupt | PEXPRACE |
|------------|----------|------------|------------|----------|--------------------|----------|
| CVE-2019-6974 | 0        | 4.42e-05   | 0          | 4.43e-05 | 0                  | 4.99e-05 |
| CVE-2019-2025 | 0        | 0          | 0          | 0        | 0                  | 0        |
| CVE-2019-1999 | 0        | 0          | 0          | 0        | 0                  | 0        |
| CVE-2017-15265 | 0        | 0          | 0          | 0        | 0                  | 0        |
| 11eb85ec... | 0        | 0          | 0          | 0        | 0                  | 0        |
| 1a6084f8... | 0        | 0          | 0          | 0        | 0                  | 0        |
| 20f2e4c2... | 0        | 0          | 0          | 0        | 0                  | 0        |
| 4842e98f... | 0        | 0          | 0          | 0        | 0                  | 0        |
| da1b9564... | 0        | 0          | 0          | 0        | 0                  | 0        |
| e20a2e9c... | 0        | 0          | 0          | 0        | 0                  | 0        |

---

希望这些改进能够使你的文档更加清晰和专业。如果有任何进一步的需求，请告诉我！