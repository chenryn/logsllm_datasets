0.01
0.01
0.06
0.23
0.09
0.05
0.12
0.14
0.24
0.13
0.56
0.1
0.67
0.79
0.02
0.07
0.04
0.10
0.41
0.05
Technique
BGP AS-paths
BGP communities
BGP update bursts
BGP Total
Colocation changes
Traceroute subpaths
Traceroute borders
Traceroute total
All techniques
#Signals
377,067
267,571
363,368
1,008,006
305,909
1,244,558
261,965
1,812,432
2,820,438
two months. Path changes accumulate over time, with about 15% of
the AS-level and 28% of the border-level paths changed at the end
of the 60-day measurement period. On the one hand, these fractions
are high enough that inferences made using this corpus would be
significantly hampered if traceroutes are not refreshed over time,
which is not possible for most large-scale traceroute campaigns due
to rate limits that prevent refreshing all paths frequently enough.
On the other hand, the fraction of “fresh” traceroutes remains high,
showing that one can indeed cope with stringent rate limits by
reusing archived traceroutes if one is able to detect and filter-out
(or selectively refresh) stale traceroutes.
We divide the available VPs, i.e., Atlas Probes and Anchors, into
two randomly selected subsets of equal size, Ppublic and Pcorpus. Our
goal is to maintain up-to-date traceroutes from the VPs in Pcorpus
to the Anchors, a corpus of 223K (source, destination) pairs.
5.1.2 Detecting changes. For our traceroute-based techniques, we
use the publicly available traceroutes from 4,372 RIPE Atlas VPs
in Ppublic, excluding traceroutes toward the targets of the anchor-
ing measurements. By excluding all traceroutes to destinations of
the anchoring measurements and public traceroutes from VPs in
Pcorpus, we avoid biasing our results by deriving change signals
from traceroutes that closely reflect the corpus we are trying to
maintain. This setting is appropriate for evaluating our techniques
because it mirrors an intended use case of relying on public RIPE At-
las traceroutes to aid in maintaining a researcher’s own RIPE Atlas
traceroutes, since it is the most widely used large-scale traceroute
platform today, with the most stringent rate limits.
5.1.3 Results. Table 2 presents the number, precision, and coverage
of our signals across the 60-day period. All techniques have high
precision and contribute unique inferences (i.e., inferences not made
by any other technique), so all techniques are useful and necessary
to achieve the combined coverage of 79% for border-level changes.
By monitoring for changes in BGP AS-paths and BGP commu-
nities as well as for bursts of BGP updates, we are able to identify
27% of the changes overall and 24% of the border-level changes.
Further, when our BGP communities technique indicates that a
traceroute is stale, the traceroute has actually changed 80% of the
time. The technique that monitors for BGP update bursts is not as
precise, at 72% precision. Our three traceroute-based techniques
identify 69% of the changes, including 67% of border-level changes.
(a) Precision
(b) Coverage
Figure 6: Precision and coverage of signals across all tech-
niques and VPs for the retrospective evaluation.
Combined they have a precision of 82%, and each of the techniques
individually have precision above 81%. Combined with the BGP
techniques, we identify 79% of all border-level path changes and
86% of AS-level changes, without issuing any online measurements.
As a comparison point, monitoring of BGP feeds for changes in
overlapping AS paths, a technique used in other works [18], only
captures 13% of the changes in the traceroute corpus. The poor
coverage is partly attributable to the technique only monitoring
for changes in AS-level paths, but it only captures 28% of changes
even if we limit ourselves to considering AS-level changes in the
traceroutes. Since our full set of techniques capture 86% of AS-level
changes, they offer significant utility over earlier approaches even
for the large number of prior systems (e.g., [41, 83]) which only use
traceroutes that have been converted to AS-level paths.
Figure 6a shows the precision across all signals and VPs com-
bined for each day in the evaluation period. At the start of the
evaluation period about 60% of the inferences are true. Our tech-
niques for generating signals iteratively improve over time leading
to more than 80% correct inferences after the mid-point of the eval-
uation period and almost 90% at the end, for both AS-level and
border-level changes. This high precision implies that a system
can effectively use our signals to refresh traceroutes or to iden-
tify stale routes. The calibration process is especially beneficial for
determining which BGP communities correlate with border-level
path changes and which of the VPs in public feeds of routing data
IMC ’20, October 27–29, 2020, Virtual Event, USA
Vasileios Giotsas et al.
5.2.3 Results. Figure 7a compares the precision of the traceroutes
issued to refresh the corpus (i.e., the fraction that revealed a path
change), when they are issued at random or chosen based on stale-
ness prediction signals. Our results show that chosen signals have
precision generally above 80% across the 2 month evaluation pe-
riod, while random selection exhibits much lower precision, wasting
measurement budget. The figure shows precision for border-level
changes, and results for AS-level changes were similar (not shown).
Random traceroutes work better over time because more paths
change at least once as time progresses.
Figure 7b shows the fraction of traceroute changes captured by
the random traceroutes that were flagged by staleness prediction
signals. We expect the random traceroutes to be an unbiased sample
of the (unknown) set of all changes in the monitored paths, so
coverage of changes detected by our random traceroutes should be
representative of the overall coverage across all changes. For AS-
level changes coverage is typically above 80%, while for border-level
changes coverage fluctuates around 70–75% after 20 days.
5.3 Comparison with dtrack and Sibyl
We compare the efficiency of signals for maintaining an up-to-date
traceroute corpus (by issuing traceroutes to refresh paths with
staleness prediction signals) with three other approaches. The first
alternative we consider is periodic round-robin route traceroutes,
similar to measurement campaigns on CAIDA’s Ark and RIPE Atlas.
Second, we consider Sibyl’s approach to patch a corpus of exist-
ing traceroutes with new traceroutes [18]. Whenever Sibyl remea-
sures the route to a destination, it compares the new route with the
previous route. When Sibyl finds a path change from subpath s to
another subpath s′, it patches all other traceroutes in the corpus
that traverse s to traverse s′ instead. We apply Sibyl’s patching and
pruning on top of periodic traceroutes: any route change detected
in periodic traceroutes is used to patch other traceroutes.
Third, we consider dtrack [19], which shares the same goal of
our techniques: reduce measurement cost to more accurately track
path changes. dtrack measures Internet paths once at startup to
build the traceroute corpus, then starts a change detection phase
where it sends single-packet TTL-limited probes to varying hops
on measured paths to detect changes. During the detection phase,
dtrack probes each path at a rate proportional to the path’s es-
timated probability of change. Whenever a change is detected,
dtrack runs traceroute to remap the change and update the corpus.
To evaluate the four techniques (ours plus the three alternate
approaches) when configured at various rate limits, we gather a
dataset at a much higher rate limit to use as a pseudo-ground-truth3.
We emulate the four approaches by having them decide which mea-
surements to remeasure at what times based on their individual
criteria, using the pseudo-ground-truth to determine the result of
those measurements, since it has frequent measurements of all
paths. As the pseudo-ground-truth, we collect a dataset of path
changes between 1–13 April 2019 from a PlanetLab node, using
dtrack to maximize the number of changes detected. Over the
period, dtrack monitored 5500 paths from the PlanetLab node,
and the measurements traversed 2819 ASes. including 91% of those
3We say pseudo-ground-truth because it may still miss short-lived path changes.
(a) Border-level precision of
traceroutes issued using sig-
nals versus at random.
(b) Fraction of path changes captured
by random traceroutes also captured
by staleness inference signals.
Figure 7: Results of live evaluation.
correlate with the traceroute sources in the traceroute corpus (i.e.,
calibration learns the TPR achieved from different VPs). Appendix B
demonstrates how effective tuning of community-based staleness
prediction signals is at pruning at false positives over time.
Figure 6b shows that coverage is stable over time, and usually
above 80%. For the subset of changes that we even have a chance
of detecting using one of our techniques (i.e., changes which have
some overlap with the data we use to generate signals), coverage
is even higher at over 90%. This high coverage implies that a real
system can detect most path changes using our signals, particularly
on paths where we monitor changes. Moreover, a system using our
techniques knows the set of paths that our techniques are capable of
monitoring and can treat paths where they lack visibility differently,
if necessary. Appendix C examines reasons for the high coverage.
5.2 Live Evaluation
Next, we evaluate the performance of our staleness prediction tech-
niques on a live monitoring system restricted to issue 10 thousand
traceroutes per day, RIPE Atlas’s rate limit per non-privileged user.
5.2.1 Traceroute corpus. To expand our evaluation to a larger set
of destination IPs, we need to sidestep the need for repeated mea-
surements along every path. Therefore, in our live experiment, we
evaluate our signals based on the traceroutes we issue to refresh
the traceroutes signaled as stale, allowing us to use a larger dataset
as our initial traceroute corpus, with more destinations.
Our live evaluation uses the built-in #5051 RIPE Atlas measure-
ment as the initial traceroute corpus. The built-in #5051 measure-
ment aims to map the Internet topology by probing the .1 address
in each /24 prefix visible in the RouteViews and RIPE RIS public
BGP feeds [66]. A #5051 measurement round is performed every
900 seconds, but not all Probes participate in every round. Since the
set of destinations is very large, it is not possible to measure each
prefix from every Probe. RIPE Atlas randomly allocates destinations
to Probes in every round. We use one day of traceroutes from the
#5051 measurement as our initial corpus of 993,948 traceroutes.
5.2.2 Detecting changes. We executed the live evaluation for two
months after the initial measurement, issuing 10K “refresh” trace-
routes per day at random and 10K using signals generated by our
techniques. We use the #5051 measurements on the remaining days
to generate signals using our traceroute-based techniques. When
the number of signals exceeds the probing quota, we choose trace-
routes to refresh based on signal performance for each VP (§4.3).
Repurposing Existing Measurements to Identify Stale Traceroutes
IMC ’20, October 27–29, 2020, Virtual Event, USA
Figure 8: Fraction of changes detected for signals, dtrack,
Sibyl, and round-robin traceroutes as a function of prob-
ing budget. Sibyl and round-robin traceroutes miss many
changes. Signals outperform dtrack for low probing bud-
gets, but are limited by their coverage. dtrack+signals
demonstrates the benefits of combining both.
with more than 500 ASes in their customer cones [49]. This pseudo-
ground-truth dtrack was configured with a detection probing
rate of 30 pps and unlimited budget for remapping; the total aver-
age probing budget is 67 pps. We emulate round-robin traceroutes,
Sibyl’s patching, dtrack, and signals on lower probing rates, which
would be necessary for a corpus to larger sets of destinations or
from constrained vantage points such as RIPE Atlas or Ark.
When emulating Sibyl’s patching, we consider an optimistic
scenario where we do not patch a traceroute if it would introduce
an error relative to ground truth and we do not penalize Sibyl
when it occurs. In a real system, a traceroute would be triggered
when a signal is generated, but for our trace-driven emulations, we
need to match signals with independent, unsynchronized measure-
ments. To accommodate dtrack, RIPE Atlas, and BGP collectors
observing a routing event at different times, e.g., because of BGP
propagation delay, batching at BGP collectors, and unsynchronized
traceroutes, we allow a signal to match a route change within 30
minutes of the signal’s generation window.4 If there are multiple
possible matchings, we choose the maximum matching that min-
imizes the difference between the start of each signal’s window
and the change the signal is matched to. If a signal is matched, it
triggers a traceroute that remeasures the changed path. If a signal
is not matched to any change in the dtrack dataset, it could be
that dtrack missed a path change, but we conservatively choose
to consider the signal a false positive that triggers a traceroute and
wastes probing budget since there is no change.
As an additional comparison, we consider an “optimal” mapping
of signals that ignores false positives to capture the impact of future
improvements to signal accuracy, and matches signals to all changes
within 30 minutes of their windows to capture potential coverage
if public data allowed signal inference at shorter time scales.
Figure 8 shows the fraction of border-level changes detected by
each approach at different average per-path probing rates. As prob-
ing rate increases, more changes are detected. Signals make efficient
use of limited probing budgets, where it outperforms dtrack, but
are limited by their coverage for high probing budgets. Compared
430 minutes is a compromise between synchronicity, the signal-generation window
duration, and dtrack’s detection probing rate. We expect 30 minutes to cover dtrack’s
detection delay, in case signals are generated before dtrack’s detection.
Figure 9: Cumulative distribution of staleness prediction sig-
nals per load-balanced and non-load-balanced segment.
to our evaluation on RIPE Atlas data in §5.1, signal coverage is