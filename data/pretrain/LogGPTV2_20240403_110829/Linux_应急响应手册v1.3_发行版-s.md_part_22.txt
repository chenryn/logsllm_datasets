sshd:helper [priv]
297732
29810
29773
329773
？
-1 S
1000
1000
0:00
_sshd:helper@pts/0
29810
29811
29811
29811
pts/0
29959 Ss
0:00
29811 29959 29959 29811 pts/0
_-bash
29959 R+
1000
0:00
_ps ajfx
可以看到，fk的SID为29756
pki11 =e =s 29756
[helperelocalhost:~$ pkill -e-s 29756
killed （pid 29756)
killed（pid29957)
killed （pid 29958)
helperelocalhost:~$
可以看到，杀掉了这个SID下的三个进程，分别为29756,29957,29958
-e参数是现实杀掉了谁，多人性化
---
## Page 198
child
father
child
father
logout
[1]+Terminated
./fk
Connection to 192.168.1.81closed.
可以看到，杀掉了bash进程后，ssh链接就断开了
守护进程（daemon）
守护进程这个词经常听到，名字还挺温暖，遗憾的是总是在处理inux挖矿病毒的案例中听到，简直破坏美感
守护进程的一个特点就是进程不受任何终端控制
不受任何终端控制这个定义似乎有些模糊，所以我试图去找到一些限定条件，大部分人是这样说的
·随系统启动而启动
·父进程是init，也就是ppid为1
·在后台运行
·进程名字通常以字母d结束
·ps显示中终端名设置为问号（?)，终端前台进程组ID设置为-1
·工作目录为\（根)
这其中很明显不完全准确，但是也都是基于实际情况分析出来的，所以我一直在纠结后台进程、nohup起的后台进程和守护
进程是什么关系，直到遇到了这篇文章，我觉得才是说的比较透彻的
我直接摘过来：
·没有控制终端，终端名设置为？号：也就意味着没有stdin0、stdout1、stderr2
·父进程不是用户创建的进程，init进程或者systemd（pid=1）以及用户人为启动的用户层进程一般以pid=1的进程为父
进程，而以kthreodd内核进程创建的守护进程以kthreadd为父进程
·守护进程一股是会话首进程、组长进程。
·工作目录为/（根），主要是为了防止占用磁盘导致无法卸载磁盘
守护进程在后台默默提供着服务，但是不接受任何终端的管控，没有标准输入、标准输出、标准错误，比较典型的有
mysqld，sshd等，当然我们也是可以创建一个守护进程的，步骤如下：
直接摘抄吧：
1.执行一个fork（），之后父进程退出，子进程魅续执行。（结果就是doemon成为了init进程的子进程。）之所以要做这一
步是因为下面两个原因：
o假设daemon是从命令行启动的，父进程的终止会被shel发现，shell在发现之后会显示出另一个shel提示符并让子进
程继续在后台运行。
。子进程被确保不会称为一个进程组组长进程，因为它从其父进程那里继承了进程组ID并且拥有了自己的唯一的进程
ID，而这个进程ID与继承而来的进程组ID是不同的，这样才能够成功地执行下面一个步骤。
2.子进程调用setsid（）开启一个新回话并释放它与控制终端之间的所有关联关系。结果就是使子进程：（c）成为新会话的首
进程，(b）成为一个新进程组的组长进程，（c）没有控制终端。
3.如果daemon从来没有打开过终端设备，那么就无需担心daemon会重新请求一个控制终端了。如果doemon后面可能会打
开一个终端设备，那么必须要采取措施来确保这个设备不会成为控制终端。这可以通过下面两种方式实现：
在所有可能应用到一个终端设备上的open（调用中指定O_NOCTTY标记。
---
## Page 199
。或者更简单地说，在setsid（）调用之后执行第二个fork（），然后再次让父进程退出并让孙子进程继续执行。这
样就确保了子进程不会称为会话组长，因此根据SystemV中获取终端的规则，进程永远不会重新请求一个控制终端。
（多一个forkO调用不会带来任何坏处。）
4.清除进程的unask以确保当daemon创建文件和目录时拥有所需的权限。
5.修改进程的当前工作目录，通常会改为根目录（/）。这样做是有必要的，因为dcemon通常会一直运行直至系统关闭为
止。如果daemon的当前工作目录为不包含/的文件系统，那么就无法卸载该文件系统。或者daemon可以将工作目录改为
完成任务时所在的目录或在配置文件中定义一个目录，只要包含这个目录的文件系统永远不会被卸载即可。
6.关闭daenon从其父进程键承而来的所有打开着的文件描述符。（daemon可能需要保持继承而来的文件描述的打开状
态，因此这一步是可选的或者可变更的。）之所以这样做的原因有很多。由于doemon失去了控制终端并且是在后台运行
的，因此让daemon保持文件描述符0（标准输入）、1（标准输出）和2（标准错误）的打开状态毫无意义，因为它们指向
的就是控制终端。此外，无法卸载长时间运行的doemon打开的文件所在的文件系统。因此，通常的做法是关闭所有无用的
打开着的文件描述符，因为文件描述符是一种有限的资源。
7.在关闭了文件描述符0、1和2之后，daemon通常会打开/dev/nul1并使用dup2（）（或类似的函数）使所有这些描述符指
向这个设备。之所以要这样做是因为下面两个原因：
。它确保了当doemon调用了在这些描述符上执行I/O的库函数时不会出乎意料地失败。
o它防止了doemon后面使用描述符1或2打开一个文件的情况，因为库函数会将这些描述符当做标准输出和标准错误来
写入数据（进而破环了原有的数据）。
说了这么多，还是那一个实际的守护进程出来看一下吧，以sshd为例
1263826382638?
-1Ss
00:00/usr/sbin/sshd-D
2638 29773 29773 29773?
-1Ss
0:00
\_sshd:helper [priv]
29773 29810 29773 29773
？
-1S
1000
0:00
sshd:helperepts/0
29810 29811 29811 29811 pts/0
29811 Ss+
1000
1000
0:00
\_-bash
29811S
0:00
_ping www.baidu.com
2638 29983 29983 29983
？
-1Ss
00:0
\_sshd: helper [priv]
299833
30043 29983
829983
？
-1S
1000
1000
00:0
sshd:helperepts/1
300433
30063 Ss
00:0
1000
\_-bash
30044 30063 30063 30044 pts/1
30063 R+
0:00
\_ps ajfx
因为守护进程PPID为1，而且是在单独的进程组、单独的session中，所以PID=PGID=SID，同时终端处值为？，终端前台进
程组ID设置为-1
杀死守护进程没啥特别的，该杀杀，当然前提是权限要够
看到这里已经可以了，基本上知识点都接触到了，下面是我在关于进程相关知识学习过程中思考的一些问题，不解决不舒服那
种，无聊的可以看一看
dies und das
1.ping www.baidu.com&这种后台进程是不是守护进程
不是
---
## Page 200
helperelocalhost:-S ping ww.baidu.com &
[1]30056
helperelocalhost:-$ PINGwww.a.shifen.com (110.242.68.3) 56(84) bytes of data.
64 bytes from 110.242.68.3:icmp_seq=1 ttl=53 time=9.38 ms
64 bytes from 110.242.68.3:icmp_seq=2 ttl=53 time=9.40 ms
helperelocalhost:-$
helperelocalhost:-$
helperelocalhost:-$ 64bytes from 110.242.68.3:icmp_seq=3 ttl=53time=9.47 ms
64bytes from 110.242.68.3:icmp_seq=4 ttl-53 time=9.32ms
time=9.43ms
64
bytes from 110.242.68.3:icmp_seq=6 ttl=53 time=9.44 ms
1121412141214?
1279
1279
-1 Ss
0:57/usr/sbin/irqbalance --pid=/var/run/il
1279
7
-1Ss
1000
0:00 /lib/systemd/systemd --user
1279
1281
1279
1279
？
S
1000
0:00
\_（sd-pam)
2638
2638
2638
？
-1
Ss
0:00
/usr/sbin/sshd -D
2638 29773
29773
29773
？
-1
Ss
-1S
0:00
_sshd:helper [priv]
29773 29810
29773
29773
？
1000
0:00
\_sshd:helperepts/0
2981029811
29811
29811 pts/0
29811
Ss+
1000
0:00
2981130056
_-bash
30056 29811 pts/0
29811S
1000
0:00
I_ping www.baidu.com
2638 29983
2998329983
-1Ss
0:00
sshd:helper [priv]
29983 30043
29983
？
-1S
1000
1000
0:00
_sshd:helperepts/1
3004330044
30058 Ss
0:00
_-bash
3084430058
30058 30044 pts/1
30058 R+
1000
0:00
\_ps ajfx
存在标准输出和标准错误
2. nohup ping www.baidu.com &
不是
helperelocalhost:-$nohup ping www.baidu.com&
[2]
30062
[1]
Killed
ping www.baidu.com
helperelocalhost:~$ nohup:ignoring input and appending output to'nohup.out'
068
1448
1462
1440
1440
14407
-1 Ss
1440
1440?
-1 S
1000
08:0
00:0
_sshd:helper [priv]
1463 pts/1
1845 Ss
_sshd: helper@pts/1
1462
1463
1463
1463 pts/1
1845 S+
1000
0:09
00:0
1463
1845
1845
\_-bash
1463 pts/1
1845R+
0:00
1_sudo ps ajfx
1845
1494
1846
1494
1845
89
1494 ?
1 Ss
00:0
sshd: helper [priv]
_ps ajfx
1494
1518
1494
14947
-1S
1000
0:01
1519pts/2
0:00
_sshd:helper@pts/2
1518
1519
1519
1519
5s+
1000
_-bash
1519
1822
1822
1519 pts/2
1519
1000
e0:0
\_ping
还是存在标准输出，只不过是重定向到nohup.out中了
3. ping www.baicu.com > /dev/null 2>&1 & 更像是守护进程了吗
更像了，但还不是
12638 2638 2638?
-1 Ss
0:00
/usr/sbin/sshd -D
29773 29810 29773
2638 29773 29773 29773
？
-1 Ss
0:00
0:00
_sshd: helper [priv]
1000
1000
0:00
1_sshd:helperepts/0
2981029811
29811
29811 pts/0
29811
29811 S
Ss+
\_-bash
1000
0:00
Iping www.baidu.con
2638 29983 29983 29983
29983
-15s
1
0:00
sshd:helper [priv]
30043 30044 30044 30044 pts/1
29983
30043
29983
？
-1 5
_sshd: helperepts/1
30067 Ss
30067R+
1000
0:00
_-bash
\ps ajfx
这种形式确实是不在存在标准输出，标准输出，标准错误，但是PPID还不是1
---
## Page 201
4.不就是PPID=1吗？上代码
inelude 
#include 
int main()
setbuf (stdout, NULL);
pid_t pid;
pid = fork();
if(pid == 0)(
( I9/dev/null 2>&1 &);
execdemo.c:12:9: warning: implicit declaration of function ‘exit’ [-Wimplicit-function-declaration]
exit(0）;
execdemo.c:12:9:warning:incompatible implicit declaration of built-in function‘exit”
execdemo.c:12:9:note:include‘′or provide a declaration of‘exit'
helperelocalhost:-/forkprocesss
helperelocalhost:-/forkprocess$
./execdemo
12638
-1 5s
0:00/usr/sbin/sshd-D
2638
29773
29773
29773
？
-1 Ss
1000
sshd:helper [priv]
29773
29810
29773
29773
？
-1 S
sshd:helperepts/0
29810
29811
29811
29811 pts/0
29811
5s+
1000
0:00
-bash
2638
29983
29983
29983
？
-1
Ss
0:00
sshd: helper [priv]
29983
30043
29983
29983
？
1 S
1000
0:00
sshd:helperepts/1
30043
30044
30044
30044 pts/1
30120
5s
1
0:08
30120 R+
1_-bash
30044
30120
30120
30044
pts/1
ps ajfx
125952
9813
25952
25952
-1
5s
Ss1
100
20:0
/lib/systemd/systemd-timesyncd
9813
9813
-1
0:01
/lib/systemd/systend-udevd
1 12014
12014
12014?
1
108
0:ee/usr/sbin/uuidd --socket-activation
1
12803