title:LZR: Identifying Unexpected Internet Services
author:Liz Izhikevich and
Renata Teixeira and
Zakir Durumeric
LZR: Identifying Unexpected Internet Services
Liz Izhikevich, Stanford University; Renata Teixeira, Inria; 
Zakir Durumeric, Stanford University
https://www.usenix.org/conference/usenixsecurity21/presentation/izhikevich
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.LZR: Identifying Unexpected Internet Services
Liz Izhikevich
Stanford University
Renata Teixeira
Inria, Paris∗
Zakir Durumeric
Stanford University
Abstract
Internet-wide scanning is a commonly used research tech-
nique that has helped uncover real-world attacks, ﬁnd crypto-
graphic weaknesses, and understand both operator and mis-
creant behavior. Studies that employ scanning have largely
assumed that services are hosted on their IANA-assigned
ports, overlooking the study of services on unusual ports. In
this work, we investigate where Internet services are deployed
in practice and evaluate the security posture of services on
unexpected ports. We show protocol deployment is more dif-
fuse than previously believed and that protocols run on many
additional ports beyond their primary IANA-assigned port.
For example, only 3% of HTTP and 6% of TLS services run
on ports 80 and 443, respectively. Services on non-standard
ports are more likely to be insecure, which results in studies
dramatically underestimating the security posture of Inter-
net hosts. Building on our observations, we introduce LZR
(“Laser”), a system that identiﬁes 99% of identiﬁable unex-
pected services in ﬁve handshakes and dramatically reduces
the time needed to perform application-layer scans on ports
with few responsive expected services (e.g., 5500% speedup
on 27017/MongoDB). We conclude with recommendations
for future studies.
1 Introduction
Internet-wide scanning—the process of connecting to ev-
ery public IPv4 address on a targeted port—is a standard
research technique for understanding real-world service con-
ﬁguration and deployment. Leveraging tools like ZMap [26]
and Masscan [29], more than 300 papers have used Internet-
wide scanning to discover weaknesses in TLS, SSH, and the
Web PKI [6,9,11,13,15,17,24,36–38], to uncover real-world
attacks [22, 50, 60], and to better understand botnets [10, 46],
ICS/IoT deployment [19, 51, 67], censorship [42, 52, 53], and
operator behavior [23, 25, 47].
∗Work done while visiting Stanford University.
Past scanning studies have largely assumed that services
are hosted on their IANA-assigned ports (e.g., HTTPS on
TCP/443) and have overlooked scanning additional ports for
unexpected services. Yet, many of these same studies have
also observed that a non-negligible fraction of the hosts that re-
spond to a SYN scan never complete the expected application-
layer handshake [21, 24, 26, 36, 51, 67]. It is unclear whether
operators hide services on unexpected ports, whether scanners
fail to account for protocol inconsistencies or server-side im-
plementation errors, or whether ﬁrewalls detect scanning and
block further interaction. In this work, we investigate where
Internet services are deployed in practice, and we evaluate the
security posture of services hosted in unexpected places.
We start by investigating services that do not appear to
speak the expected IANA-assigned protocol. We conﬁrm that
up to 96% of services (by port) do not complete the expected
application-layer (L7) handshake on 37 popular ports (Sec-
tion 2). We introduce a heuristic that infers server-side TCP
state, which we use to show that 28% of initially-responsive
services do not allow any L7 data exchange. Rather, 12% im-
mediately tear down the connection, 5% prevent an L7 hand-
shake by specifying a zero TCP window, 0.6% are blocked
from receiving our ACK, and 11% “shun” our IP between the
discovery and application-layer scan phases. We trace these
behaviors to middleboxes and ﬁrewalls, and we evaluate their
efﬁcacy at enabling scan evasion.
While network defenses account for most L7 unresponsive
services, a signiﬁcant number of services are TCP compliant,
but fail the expected L7 handshake (e.g., 14% on TCP/80
and 96% on TCP/102). We show that this is due to services
running on unexpected ports, protocol handshakes that re-
quire pre-established secrets, and network-based protections
that acknowledge data on every port but speak no detectable
protocol (Sections 3–4). Notably, protocol deployment is ex-
ceptionally diffuse. For example, only 3.0% of HTTP and
6.4% of TLS services run on ports 80 and 443, respectively.
Achieving 90% coverage of TLS-based services requires scan-
ning 40K ports. Worryingly, services deployed on unexpected
USENIX Association
30th USENIX Security Symposium    3111
ports have worse security postures, which we trace back to
IoT devices that host insecure services on non-standard ports.
To enable researchers to more comprehensively ﬁnd In-
ternet services, we introduce LZR (“Laser”), a system that
efﬁciently ﬁlters hosts that do not speak any L7 protocol
and identiﬁes unexpected services (Section 5). LZR can ﬁn-
gerprint 88% of identiﬁable services with a single packet
and 99% of identiﬁable unexpected services with ﬁve hand-
shakes. LZR also speeds up scans by quickly ﬁltering the
bulk of seemingly-responsive hosts that SYN-ACK but cannot
complete an application layer handshake. For example, on
port 27017, LZR ﬁlters out 80% of hosts that SYN-ACK, de-
creasing the time to complete scans of MongoDB by 55 times,
while still identifying 99.6% of MongoDB services and iden-
tifying an additional 23K hosts running unexpected protocols
(a 31% coverage increase for the port).
Our work concludes with recommendations for future stud-
ies. We hope that by shedding light on the ecosystem of unex-
pected services, and by releasing LZR as an open-source tool,
we enable security researchers to more accurately understand
Internet services.
2 Identifying Real TCP Services
Fast research scans of the Internet are typically conducted in
two phases today [21, 26, 36, 38]. In the ﬁrst stage, a scan-
ner like ZMap [26] statelessly sends SYN packets to public
IPv4 addresses. Then, in a second process, a stateful scan-
ner like ZGrab [21] performs complex follow-up handshakes
using the kernel TCP/IP stack. The two-phased nature of
Internet scanning is largely attributable to ZMap’s architec-
ture, which uses a stateless network stack to efﬁciently probe
services, but is unable to complete handshakes that require
maintaining local state. The biases and unintended conse-
quences from scanning in two phases have not been inves-
tigated, and worryingly, prior studies have repeatedly noted
that more than half of the IPv4 hosts that respond to a SYN
scan never complete a follow-up application-layer handshake
(e.g., [24, 26, 36, 51, 67]).
In this section, we investigate this discrepancy. We show
that TCP liveness does not accurately indicate the presence of
an application-layer service due to several common security
protections, including middleboxes and user-space ﬁrewalls.
Guided by TCP’s design [54], we uncover ﬁve defensive be-
haviors that degrade the signal provided by L4 responsiveness.
We quantify the deployment of these defenses, and we eval-
uate their efﬁcacy at protecting against DDoS attacks and
evading Internet scans. We then go on to develop a better L4
heuristic to approximate application-layer liveness, which we
use to better understand service deployment in Section 3.
2.1 Layer 4 versus Layer 7 Liveness
We start our investigation by conﬁrming whether TCP-
responsive hosts (i.e., hosts that reply with a SYN-ACK packet)
complete the IANA assigned [39] application-layer hand-
shake. Mimicking prior Internet scans (e.g., [6, 9, 16, 36, 72]),
we perform a two-phase scan in which we send a SYN packet
to a random 1% sample of public IPv4 addresses using
ZMap [26] and immediately attempt a follow-up application
handshake using ZGrab [21]. We scan all IANA-assigned
ports with available ZGrab scanners (i.e., 37 ports in
Appendix A) on November 12–14, 2019. We follow the
best practices set forth by Durumeric et al. [26] to minimize
scan impact, and we exclude networks that have previously
contacted us. We receive no complaints, but note that we
have used our network in the past for other experiments and
exclude operators who previously requested removal.
Consistent with prior studies [24,26,36,51,67], we ﬁnd that
a considerable fraction of TCP-responsive hosts never com-
plete the expected L7 handshake (Figure 1). The raw number
of L7-unresponsive hosts varies from 21K unresponsive hosts
on 502/Modbus to 201K hosts on 443/HTTPS (µ = 54,542,
σ2 = 31,002). We see this heavy-tail distribution throughout
our investigation and we present our results for both popular
and unpopular ports. We split ports into the two categories
using Grubbs’s test for outliers [30] with a 99.9% conﬁdence
interval based on the total number SYN-ACKs and the presence
of an expected service. Our popular set contains ports 80, 443,
7547, 22, 21, and 25; the unpopular set contains the remaining
31 ports. Popular protocols are most likely to complete the
expected L7 handshake:1 86% and 80% of TCP-responsive
hosts on ports 80 and 443 complete an HTTP(S) handshake
while only 9% and 4% of hosts on ports 502 and 102 speak
Modbus and Siemens S7 (two SCADA protocols).
In the following section we start our investigation of L7-
unresponsivess by analyzing the changing state of services
between the two phases of scanning.
2.2 Connection Shunning
About 1.6% of services on popular ports and 5% of services
on unpopular ports do not respond with a SYN-ACK during
our follow-up ZGrab TCP handshake. This could be due to
DHCP churn, transient network failure, or the destination
host blocking the scanner between handshakes (“connection
shunning”). To determine whether hosts “shun” scanners, we
connect to TCP-responsive hosts found by ZMap from two IP
addresses: the original IP address used by ZMap to identify
the host and a fresh IP that has not previously contacted the
host. We scan a random ephemeral port, 48302, because we
see the largest fraction of disappearing hosts on unpopular
ports. We ﬁnd that 70% of IPs that do not respond a second
1Spearman’s Correlation p-value of port rank (based on number of SYN-
ACK) relative to L7 and SYN-ACK percent difference is 5× 10−11.
3112    30th USENIX Security Symposium
USENIX Association
2.3 Do TCP-Responsive Hosts Speak TCP?
The vast majority of services (average of 96% across ports)
that do not complete an application-layer handshake respond
with a SYN-ACK during the second (ZGrab) handshake. In the
remainder of the section, we explore whether these hosts reach
a state where they can exchange application-layer data or sim-
ply stop responding after sending a SYN-ACK. In Figure 2, we
provide a modiﬁed TCP state diagram based on RFC 793 [54]
that captures what a scanner can infer about a server’s TCP
state, which we use to guide our investigation. For a TCP
connection to enter the ESTABLISHED state, the server sends
only a single packet (SYN-ACK). Once the client has sent an
ACK, it can normally send data—the amount speciﬁed by the
server window size in the SYN-ACK packet.
We note that TCP has an edge case in which the server can
respond with a zero-sized window in its SYN-ACK [54]. In this
situation, the client is expected to send follow-up ACK packets
to probe when the server is ready to accept data. We add a new
ACCEPTS DATA state in Figure 2 to capture whether a server
is ready for data. Once the server has reached the ACCEPTS
DATA state, it is expected to keep the TCP connection open
long enough to receive data and to acknowledge receipt. We
deﬁne ACKNOWLEDGES DATA as the server allowing the client
to send data and acknowledging client data.
Figure 2: Client Perspective of Server TCP State—We
investigate L7 service liveness based on a modiﬁed version
of the TCP state machine in RFC 793 [54]. We introduce two
new states: “accepts data” and “acknowledges data” because
an established connection cannot necessarily exchange data.
To test how far into a TCP session servers reach, we de-
velop a new scanner based on ZGrab [5] that establishes a TCP
connection, sends two newlines, and deduces the server TCP
state (Algorithm 1). We scan random 1% samples of IPv4
addresses on a random 2,000 ports as well as the 37 IANA
assigned ports that host protocols with ZGrab scanners (Ap-
pendix A). An average 16% of services on popular ports and
40% of services on unpopular ports fail to acknowledge data
(Figure 3a). We detail why in the remainder of this section.
Figure 1: L4 vs. L7 Responsiveness—A signiﬁcant frac-
tion of hosts that respond with a SYN-ACK packet never com-
plete the expected application-layer handshake. The differ-
ence varies dramatically across ports by both percent differ-
ence (14–96%) and raw count (21,050–200,902).
time on the used IP do respond to the fresh IP, indicating that
most hosts that go missing between scan stages are typically
not lost due to churn or network failure.
In the case that the fresh IP receives a SYN-ACK, we ob-
serve two types of responses from the previously-used IP: no
response (93%) and RST packet (7%). This blocking occurs at
the IP granularity: once a scanner has been blocked by a host,
the host will not respond with a SYN-ACK on any port. We
further conﬁrm that connection shunning is not a defensive re-
action—triggered by failing to complete an application layer
handshake—by running a 1% IPv4 scan of all popular ports
using ZGrab for the initial host discovery. The same fraction
of connections are shunned as when ZMap is used.
We ﬁnd that connection shunning is deployed at both the
host and network granularity by computing the largest blocks
of consecutive TCP-Responsive IPs that show shunning be-
havior on a random ephemeral port: 40% of networks that
shun scanners are /32s (i.e., individual hosts) and 10% of
IPs block in groups larger than a /24 (Figure 4). The largest
network to deploy connection shunning is a /20 owned by
Alestra Net (ASN 11172), a Mexican ISP.
Both network hardware (e.g., Cisco IOS-based routers [34])
and host software (e.g., Snort [59]) document connection
shunning and dynamic blocking as features where connec-
tions are blocked after an IP is classiﬁed as malicious. Connec-
tion shunning prevents clients from using a single source-IP
to scan the network and forces scanners to use multiple source
IPs to reach the end-host, thereby dramatically increasing the
cost for an attacker. We compare the number of legitimate ser-
vices found when using both single and multiple source-IPs
during scanning and ﬁnd no evidence that any hosts that shun
connections host legitimate services. We thereby conclude
that they can be safely ignored in security studies if they can
be efﬁciently ﬁltered.
USENIX Association
30th USENIX Security Symposium    3113
80/HTTP443/TLS7547/HTTP22/SSH21/FTP25/SMTP8080/HTTP4567/HTTP53/DNS110/POP33306/MYSQL143/IMAP3389/RDP587/SMTP993/IMAPS995/POP3S465/SMTP23/TELNET8443/TLS1723/PPTP5432/POSTGRES1883/MQTT5672/AMQP8883/MQTT1521/Oracle6379/redis5900/VNC20000/DNP31433/MSSQL445/SMB631/IPP6443/Kubernetes623/IPMI27017/Mongodb502/Modbus102/Siemens11211/memcachedPort/Service02468IPs (100,000s)SYN-ACK onlyL7 HandshakeLISTENSYN RECEIVEDESTABLISHEDReceive : SYNSend: SYN-ACKReceive: ACKReceive: Data or Close or TimeoutSend: Close or TimeoutSend: SYN-ACKReceive : Close or TimeoutACKNOWLEDGES DATAReceive: DataSend: ACKWindow Size > 0?YesNoReceive: TimeoutSend: Close or TimeoutACCEPTS DATA(a) Portion of TCP-responsive hosts that fail to acknowledge data
(b) Reasons SYN-ACK-only hosts fail to acknowledge data
Figure 3: Unexpected TCP Behavior of IPv4 Hosts—An average 16% of services on popular ports and 40% of services on
unpopular ports that respond to a TCP SYN scan with a SYN-ACK packet do not fully speak TCP. Here, we show the portion of
hosts by port that do not acknowledge client data and the breakdown of reasons why.
Algorithm 1: Deducing Server TCP State
Send SYN
if receive RST or FIN or Timeout then
return NO_ACK_HOST
end
// checking for zero window sizes
Print syn-ack.window_size
// sending protocol-agnostic data
Send "\n\n"
// Time for 8 re-transmissions (RFC 1122 rec.)
while timeout < 100 seconds do
if received ACK then
return ACK_HOST
end
if received RST or FIN then
return NO_ACK_HOST
end
end
return NO_ACK_HOST // host has timed out
2.4 Zero Window DDoS Protections
Of the services that never acknowledge data, 13% of services
on popular ports and 26% on unpopular ports actively prevent
clients from sending data by specifying a zero-sized TCP
window and never increasing it. Across all scanned ports,
at least 99.94% of hosts with a zero window never increase
it; 90% do not respond to secondary probes and 10% reset
the connection. The behavior appears to be network- or host-
based rather than service-based: 99% of hosts that respond
Figure 4: Network Granularity of TCP Blocking—Some
protections appear to be host-based while others are more
prevalent on large networks. Zero Window DDoS protections
are most likely to appear at a large network granularity, while
connection shunning is more likely a host-level behavior.
with a zero-window on one port will send a zero-sized window
on all ports. Offhand, this behavior appears self-defeating.
Hosts that respond and never increase window size might
as well never respond. However, we ﬁnd the feature in a
Juniper networks patent [66] and used in Juniper’s Secure
Service Gateway Proxy [41] to prevent DDoS attacks through
network-based SYN cookies. The protection responds to all
SYN packets with a zero-window SYN-ACK. Once the client
completes the three-way handshake by sending an ACK, the
ﬁrewall sends a SYN packet to the backend server to establish
the connection. By maintaining a zero-sized TCP window
with the client, the middlebox prevents the client from sending
data it cannot yet forward to the backend server.
3114    30th USENIX Security Symposium
USENIX Association
050100# (1000s)Connection ShunningDropping Connections Mid-HandshakeZero WindowDynamic Blocking (Handshake)Reset ConnectionLeftover Non-ACK Hosts804437547223000550602125200080805080545675349154491528081808911033068085800014351005338958758000993995465238443172317954321883567288831521531946222063795900200001616553514334456316443623478082701750210211211Port Number01FractionNon-Acking IPsZero-window SYN-ACKs are deployed across entire sub-
networks: 90% of IPs that SYN-ACK with a zero window
do so in a network larger than a /24 (Figure 4). The largest
network, the State of Florida Department of Management Ser-
vices (ASN 8103), is responsible for 16% of all zero-windows
Internet-wide and accounts for around 3% of all SYN-ACKs
on a random port. The TTL for SYN-ACK is consistently one
hop closer than the later RST, further conﬁrming a network
appliance is responsible.
2.5 Dropping Connections Mid-Handshake
Beyond specifying a zero window, an average 2% of the
hosts per port that never acknowledge data do not appear
to complete a three-way handshake, despite the client sending
an ACK (Figure 3b). We infer that the server never reaches
the ESTABLISHED state based on a continual stream of SYN-
ACK packets (average 7.8 SYN-ACK re-transmissions). Hosts
do not simply have broken TCP stacks; in the case of MCI
Communication Services, for example, IPs that re-transmit
SYN-ACKs on port 4567 have compliant behavior on other
ports (e.g., RDP on TCP/3389). Real services respond with a
TTL over twice as large as the TTL value which re-transmits
the SYN-ACK, suggesting that a middlebox selectively drops
packets. Dropping connections mid-handshake is a defensive
behavior exhibited primarily by ISPs protecting consumer
premise equipment: CenturyLink (AS 209), Frontier Com-
munications (AS 5650), and MCI Communications Services
(AS 701) all drop inbound trafﬁc to port 4567/TRAM post-
SYN (accounting for 96% of dropped connections). Korea
Telecom (AS 4766) and Axtel (AS 6503)—accounting for
73%—interrupt connections on 7547/CWMP. The behavior
is rare on common ports (e.g., only 5% of TCP-responsive
hosts that do not acknowledge data drop connections mid-
handshake on port 80).
2.6 Reset Connections
An average 73% of services on popular ports and 34% of
services on unpopular ports that do not acknowledge data
reach the ESTABLISHED state but will immediately reset the
connection after the client completes the three-way handshake
(Figure 3b). Per RFC 793 [54], if a server does not want to
communicate with a client (e.g., due to mismatches in “secu-
rity clearances”), the server should close the TCP connection
after the client acknowledges the SYN-ACK. This is also how
user-space ﬁrewalls like DenyHosts [63] appear to scanners.
While we cannot detect what software closes a connection,
we note that networks that RST on port 22 are 10 times more
likely to do so in block-sizes of /32 than port 80, implying that
blocking happens more often on hosts running SSH compared
to HTTP, consistent with Wan et al.’s ﬁndings [69]. Network-
level behavior looks to be caused by DDoS protections similar
to the networks that send zero-window SYN-ACKs. To pro-
tect against SYN-ﬂooding, middleboxes send a SYN-ACK on
behalf of the server and later establish a connection with the
server after the client has ﬁnished the three-way handshake.
If the server refuses the connection, the middlebox terminates
the client connection. This functionality is available in Cisco
IOS-based routers as a part of their threat detection logic [58].
The behavior is visible in prominent networks, with more
than 40% of such IPs located in Korea Telecom, Vodaphone
Australia, OVH, and Akamai. Hosts are 20% more likely to
close a connection on popular ports because Google load bal-
ancers in AS 19527 come with a standard ﬁrewall policy that
accept trafﬁc on these ports by default—in order to be able
to perform service health checks— and rely on the backend
virtual machine to reset connections if the port is closed [1,2].
2.7 Dynamic Blocking after Handshake
Not all hosts that fail to acknowledge data send RSTs or contin-
ually re-transmit SYN-ACKs. Many simply never acknowledge
any data. An average of 10% services on popular ports and
18% of services on unpopular ports do not acknowledge client
data (Figure 3b). These hosts frequently do not respond to
later follow-up handshakes either. This “shunning” behav-
ior is similar—but not identical— to the behavior we found
in Section 2.2 and has previously been documented in the
Great Firewall of China [18] where it is used to stop future
connections, triggered only when data is sent.
To differentiate between hosts that shun the scanner after
a handshake from those that simply never acknowledge data,
we simultaneously attempt an L7 handshake with initially-
responsive hosts that did not acknowledge data from two IP
addresses, one that matches the initial connection and one
that differs. Of the initially unresponsive IPs, 98% respond
to the fresh IP, indicating the behavior is not likely due to
transient network failure, but rather explicit blocking of in-
coming connections. In total, post-handshake dynamic block-
ing accounts for 6% and 12% of the remaining hosts that do
not acknowledge data for common port and uncommon port
hosts respectively. Note that this behavior only occurs after
a three-way handshake, thereby differing from connection
shunning (Section 2.2). The largest network to dynamically
block after a handshake is Coming ABCDE HK (AS 133201),
which accounts for 48% of all IPs that block after a handshake.
We also discover a similar TTL phenomenon as described in
Section 2.4 implying a middlebox-based protection.
We deduce that the rest of the hosts that fail to acknowledge
data are not performing dynamic blocking because though
they will not respond to anything after the actual handshake,
they do consistently respond to all scans (no matter the source
IP). Vodaphone (AS 133612) and Webclassit (AS 34358) have
this behavior across all scanned ports and make up 66% of
all IPs with such a behavior. We ﬁnd similar evidence of
mismatching TTL values, which indicate a middlebox.
USENIX Association
30th USENIX Security Symposium    3115
2.8 Efﬁcacy of Middlebox Protections
Identiﬁable middlebox protections are common. About 16%
of the services on popular and 40% of the services on unpop-
ular ports that respond to a SYN packet—but do not speak
any identiﬁable L7 protocol— are artifacts of DDoS and scan-
ning protections; 40% of routed ASes contain at least one
such protection. Reset connections after a handshake—a be-
havior found in software like DenyHosts [63]—is by far the
most common behavior by both IP and AS, and is present in
34% of ASes. Middleboxes employing connection shunning
or dynamic blocking are each used by 6% of networks, and
Juniper’s patented zero-window DDoS protection appears
in 2% of networks. These protections prevent clients from
directly connecting to servers—at least initially—and all
middleboxes succeed at doing so, even if the protection is
identiﬁable. However, with the use of more than one source
IP address, an adversary can bypass connection shunning and
dynamic blocking and still solicit SYN-ACKs from the end-
host, albeit rate-limited by the number of scanner addresses.