### 安装软件包

如果你能够启动系统，可以通过以下命令来安装软件包：

```bash
# dpkg -i /path/to/foo_old_version_arch.deb
```

**提示：** 如果系统损坏较小，也可以使用APT系统进行降级（参见第 2.7.11 节）。

### 系统无法启动时的处理方法

如果系统无法从硬盘启动，可以尝试以下方法：

1. **使用Debian安装光盘以救援模式启动系统。**
2. **将硬盘上无法启动的系统挂载到“/target”目录。**
3. **通过以下命令安装旧版本的foo软件包：**

   ```bash
   # dpkg --root /target -i /path/to/foo_old_version_arch.deb
   ```

即使硬盘上的dpkg命令已损坏，上述命令仍然可以执行。

**提示：** 可以使用其他方式（如Live CD、可启动USB驱动器或网络启动）来救援损坏的系统。

### 解决依赖问题

如果由于依赖问题无法安装软件包，可以使用dpkg的`--ignore-depends`、`--force-depends`等选项忽略依赖关系。但这样做之后，必须认真修复依赖关系。详情请参阅`dpkg(8)`。

**注意：** 如果系统严重损坏，建议将系统完整备份到安全位置（参见第 10.2 节），并进行全新安装。这是耗时较少且效果较好的办法。

### 恢复软件包选择数据

如果`/var/lib/dpkg/status`文件损坏，导致系统丢失软件包选择数据，可以查找位于`/var/lib/dpkg/status-old`或`/var/backups/dpkg.status.*`中的旧文件。

**建议：** 将`/var/backups/`分配一个单独的分区，因为它包含了许多重要的系统数据。

对于严重的损坏，建议备份系统后重新安装。即使失去`/var/`中的所有数据，你仍然可以从`/usr/share/doc/`目录恢复一些信息来引导新的安装。

**步骤：**

1. 创建并挂载旧系统的目录：

   ```bash
   # mkdir -p /path/to/old/system
   # mount /dev/sdXn /path/to/old/system
   ```

2. 列出旧系统中的文档文件：

   ```bash
   # cd /path/to/old/system/usr/share/doc
   # ls -1 > ~/ls1.txt
   # cd /usr/share/doc
   # ls -1 >> ~/ls1.txt
   # cd
   # sort ls1.txt | uniq | less
   ```

然后可以根据软件包名称进行安装。

### 软件包管理技巧

#### 上传软件包的人是谁？

尽管`/var/lib/dpkg/available`和`/usr/share/doc/package_name/changelog`中列出了维护者姓名，但实际上传者可能不同。可以使用`who-uploads(1)`工具识别Debian源软件包的实际上传者。

#### 限制APT的下载带宽

要限制APT的下载带宽到800Kib/sec（=100KiB/sec），可以在APT配置文件中设置如下参数：

```plaintext
APT::Acquire::http::Dl-Limit "800";
```

#### 自动下载和升级软件包

`apt`软件包自带的cron脚本`/etc/cron.daily/apt`支持自动下载软件包。可以安装`unattended-upgrades`增强该脚本，使其能够自动升级软件包。相关配置文件为`/etc/apt/apt.conf.d/02backup`和`/etc/apt/apt.conf.d/50unattended-upgrades`，说明见`/usr/share/doc/unattended-upgrades/README`。

**配置参数：**

- 对于stable系统的安全更新：

  ```plaintext
  APT::Periodic::Update-Package-Lists "1";
  APT::Periodic::Download-Upgradeable-Packages "1";
  APT::Periodic::Unattended-Upgrade "1";
  ```

- 对于testing或unstable系统，建议仅下载软件包而不自动升级：

  ```plaintext
  APT::Periodic::Update-Package-Lists "1";
  APT::Periodic::Download-Upgradeable-Packages "1";
  APT::Periodic::Unattended-Upgrade "0";
  ```

#### 更新和向后移植

`stable-updates`和`backports.debian.org`提供了stable版软件包的更新。在`/etc/apt/sources.list`文件中添加以下条目：

```plaintext
deb http://deb.debian.org/debian/ bookworm main non-free-firmware contrib non-free
deb http://security.debian.org/debian-security bookworm-security main non-free-firmware contrib non-free
deb http://deb.debian.org/debian/ bookworm-updates main non-free-firmware contrib non-free
deb http://deb.debian.org/debian/ bookworm-backports main non-free-firmware contrib non-free
```

- 所有已安装的旧软件包都可以通过`bookworm-updates`档案库升级到新软件包。
- 只有从`bookworm-backports`档案库手动安装的旧软件包才会通过该档案库升级到新软件包。

**示例：**

```bash
$ sudo apt-get install -t bookworm-backports package-name
```

**警告：** 不要从`backports.debian.org`安装太多软件包，这可能导致依赖复杂性增加。

#### 外部软件包档案库

**警告：** 使用外部软件包档案库时务必小心，确保其可信。可以使用安全APT将外部档案库加入源列表，并将其密钥放入`/etc/apt/trusted.gpg.d/`目录。参见`sources.list(5)`、`apt-secure(8)`和`apt-key(8)`。

#### 混合源档案库软件包

**警告：** 从混合源档案库安装软件包不受官方支持，除非是特定组合（如stable的安全更新和stable-updates）。以下是临时更改`/etc/apt/sources.list`以安装特定软件包的方法：

1. 临时更改`/etc/apt/sources.list`指向单一发行版路径。
2. 运行`aptitude update`。
3. 运行`aptitude install package-name`。
4. 恢复原始`/etc/apt/sources.list`。
5. 再次运行`aptitude update`。

**注意事项：**

- 非二进制软件包（`Architecture: all`）更安全。
- 二进制软件包（非`Architecture: all`）通常面临更多兼容性问题。

#### 使用apt-pinning调整获选版本

**警告：** 新手应避免使用apt-pinning，除非确实需要。默认情况下，APT系统使用版本字符串选择最新可用版本。所有官方支持的档案库集合不需要`/etc/apt/preferences`文件。

**简化说明：**

- 在`/etc/apt/sources.list`中定义可用的软件包源。
- APT系统根据`Pin-Priority`值选择候选版本。
- `Pin-Priority`大于1000的版本只能用于升级，不能降级。

**Pin-Priority值：**

| Pin-Priority | 描述 |
|--------------|------|
| 1001         | 安装该软件包，即使是一个降级指令 |
| 990          | 目标发行版档案库的默认值 |
| 500          | 常规档案库的默认值 |
| 100          | NotAutomatic和ButAutomaticUpgrades档案库的默认值 |
| 1            | NotAutomatic档案库的默认值 |
| -1           | 即使被推荐，也绝不安装该软件包 |

**目标版本档案仓库设置示例：**

```bash
apt-get install -t testing some-package
```

**查看多个档案源的软件包apt-pinning情况：**

```bash
apt-cache policy package
```

- `Package pin:`开头的行列出软件包版本的pin。
- 没有`Package pin:`的行表示没有相关定义。
- `Pin-Priority`值列在版本字符串右边。
- 档案库的`Pin-Priority`值列在档案库路径左边。

### 阻止推荐的软件包的安装

若要阻止某些推荐的软件包的安装，请参考后续章节。