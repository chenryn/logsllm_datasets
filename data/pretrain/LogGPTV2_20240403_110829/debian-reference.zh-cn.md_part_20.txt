如果你能够启动系统，你可以通过下列命令来安装它。
# dpkg -i /path/to/foo_old_version_arch.deb
提示
如果你系统损坏较小，你也可以使用更高层的APT系统来降级整个系统，就像第 2.7.11 节中做的那样。
如果你的系统无法从硬盘启动，你应该寻找其它方式来启动它。
1. 使用Debian安装光盘以救援模式启动系统。
2. 将硬盘上无法启动的系统挂载到“/target”。
3. 通过下列命令安装旧版本的foo软件包。
# dpkg --root /target -i /path/to/foo_old_version_arch.deb
即使位于硬盘上的dpkg命令已损坏，该命令依旧可以执行。
提示
任何由硬盘、liveGNU/LinuxCD、可启动的USB驱动或网络启动上的另一系统启动的GNU/Linux系统到可以类似
地用来救援损坏的系统。
如果由于依赖问题，无法用这种方式安装软件包，并且你真的必须真么做，你可以使用dpkg的“--ignore-depends”“、--force-depends”
和其它选项来无视依赖。如果你这么做了，之后你必须认真努力地修复依赖关系。更多细节参见dpkg(8)。
注意
如果你的系统严重损坏了，你应该将系统完整备份到一个安全的地方（参见第 10.2 节）并进行一次全新的安装。
这是耗时较少且效果较好的办法。
2.6.7 恢复软件包选择数据
如果“/var/lib/dpkg/status”因为某种原因出现错误，Debian系统会丢失软件包选择数据并受到严重影响。寻找位
于“/var/lib/dpkg/status-old”或“/var/backups/dpkg.status.*”中旧的“/var/lib/dpkg/status”
文件。
给“/var/backups/”分配一个单独的分区是一个好习惯，因为这个目录包含了许多重要的系统数据。
对于严重的损坏，我建议备份系统后重新安装。即使失去“/var/”中的所有数据，你依旧可以从“/usr/share/doc/”
目录恢复一些信息来引导你进行新的安装。
重新安装最小（桌面）系统。
# mkdir -p /path/to/old/system
将旧系统挂载到“/path/to/old/system/”。
Debian参考手册 66/233
# cd /path/to/old/system/usr/share/doc
# ls -1 >~/ls1.txt
# cd /usr/share/doc
# ls -1 >>~/ls1.txt
# cd
# sort ls1.txt | uniq | less
然后你就可以根据软件包名称来进行安装了。（可能会有一些非软件包名称，例如“texmf”。）
2.7 软件包管理技巧
出于简化，在 bookworm发布后，在这个章节的源列表例子，使用单行式样在”/etc/apt/sources.list”里表示。
2.7.1 上传软件包的是谁？
尽管“/var/lib/dpkg/available”和“/usr/share/doc/package_name/changelog”中列出的维护者姓
名提供了关于“软件包运作的幕后者是谁”这一问题的一些信息，但软件包的实际上传者依旧不明。devscripts软
件包中的who-uploads(1)可以识别Debian源软件包的实际上传者。
2.7.2 限制 APT 的下载带宽
如果你想限制APT的下载带宽到800Kib/sec（=100KiB/sec），你应该像下面那样设置APT的配置参数。
APT::Acquire::http::Dl-Limit ”800”;
2.7.3 自动下载和升级软件包
apt软件包有自己的cron脚本“/etc/cron.daily/apt”，它支持自动下载软件包。可以安装unattended-upgrades
软件包来增强这个脚本，使它能够自动升级软件包。可以通过“/etc/apt/apt.conf.d/02backup”和“/etc/apt/apt.conf.d/50unattended-upgrades”
中的参数来进行自定义，相关说明位于“/usr/share/doc/unattended-upgrades/README”中。
unattended-upgrades软件包主要用于stable系统的安全更新。如果自动升级损坏stable系统的风险小于被
入侵者利用已被安全更新修复的安全漏洞，你应该考虑使用自动更新，配置参数如下。
APT::Periodic::Update-Package-Lists ”1”;
APT::Periodic::Download-Upgradeable-Packages ”1”;
APT::Periodic::Unattended-Upgrade ”1”;
如果你运行的是testing或unstable系统，你应该不会想要使用自动更新，因为它肯定会在某天损坏系统。即使
位于这样的testing或 unstable情况下，你可能依旧想提前下载软件包以节省交互式升级的时间，其配置参数如
下。
APT::Periodic::Update-Package-Lists ”1”;
APT::Periodic::Download-Upgradeable-Packages ”1”;
APT::Periodic::Unattended-Upgrade ”0”;
2.7.4 更新和向后移植
stable-updates (”bookworm-updates”，在 bookworm-作为-stable 发布循环) 和 backports.debian.org 档案库提供了
stable版软件包更新。
为了去使用这些档案库，你需要在”/etc/apt/sources.list”文件里写入如下所示的档案库列表。
Debian参考手册 67/233
deb http://deb.debian.org/debian/ bookworm main non-free-firmware contrib non-free
deb http://security.debian.org/debian-security bookworm-security main non-free-firmware ←-
contrib non-free
deb http://deb.debian.org/debian/ bookworm-updates main non-free-firmware contrib non-free
deb http://deb.debian.org/debian/ bookworm-backports main non-free-firmware contrib non- ←-
free
并不需要在”/etc/apt/preferences”文件中显式设置Pin-Priority值. 当新的包可用时，默认配置提供了更合理的
更新(请见第 2.5.3 节).
• 所有已安装的旧软件包都可以通过bookworm-updates档案库升级到新软件包。
• 只有从bookworm-backports档案库中手动安装的旧软件包才会通过bookworm-backports档案库升级到新
软件包。
当你想要从bookworm-backports档案库中手动的安装一个名叫”package-name”的软件及其依赖包的时候，你
应该在目标档案库之前加一个“-t”参数。
$ sudo apt-get install -t bookworm-backports package-name
警告
不要从 backports.debian.org 档案库安装太多软件包。它能够造成软件包依赖复杂。替代解决方案参见第
2.1.11 节。
2.7.5 外部软件包档案库
警告
你应当小心，外部软件包获取你系统的root权限。你应当只使用可信赖的外部软件包档案库。替代方案参见
第 2.1.11 节。
你能够使用安全 APT 来使用 Debian 兼容的外部软件包档案库，将它加入到 源列表，并把它的档案库密钥放
入”/etc/apt/trusted.gpg.d/”目录。参见sources.list(5)、apt-secure(8)和apt-key(8)。
2.7.6 不使用 apt-pinning 的混合源档案库软件包
小心
从混合源档案库中安装软件包是不被Debian官方发行版所支持的，除了官方支持的档案库的特殊组合以外，
例如stable的securityupdates和stable-updates。
这里有一个列子，在原有只跟踪testing的场景，操作包含在unstable里发现的新的上游软件包版本。
1. 临时更改”/etc/apt/sources.list”文件，使之指向单一的”unstable”发行版路径。
2. 运行”aptitude update”命令。
3. 运行”aptitude install package-name”命令。
Debian参考手册 68/233
4. 恢复到原始”/etc/apt/sources.list”文件，使之指向testing路径。
5. 运行”aptitude update”命令。
使用这个手工方法，你不需要创建”/etc/apt/preferences”文件，也不需要担心apt-pinning。但这个方法仍然是
非常麻烦的。
小心
当使用混合档案源的时候，因为 Debian 不会确保软件之间的兼容性，所以你必须自己去解决兼容性问题。
如果软件之间存在不兼容性，系统可能会损坏。你必须能够判断这些操作所需的技术要求。使用任意混合的
档案源是完全可选的操作，我并不鼓励你去使用它。
从不同的档案库中安装软件包的一般规则如下。
• 非二进制软件包(”Architecture: all”)的安装是更保险的。
– 文档软件包：没有特别的要求
– 解释程序的软件包：兼容的解释器必须是可用的
• 二进制软件包(non”Architecture: all”)通常会面临很多障碍，它的安装不保险的。
– 库文件版本的兼容性（包括”libc”）
– 与之相关的有用的程序版本的兼容性
– 内核ABI的兼容性
– C++ABI的兼容性
– …
注意
为了使软件包的安装变得更保险，一些商业的非自由的二进制程序包可能会提供完整的静态链接库。你还是应该检
查ABI的兼容性问题等等。
注意
除非为了短期避免破坏软件包，从非Debian档案库安装二进制软件包通常是一个坏的主意。你需要查找所有存在
的和你目前Debian系统兼容的安全技术替代方案。（参见第 2.1.11 节）。
2.7.7 使用 apt-pinning 调整获选版本
警告
新手用apt-pinning命令会造成比较大的问题。你必须避免使用这个命令除非确实需要它。
没有”/etc/apt/preferences”文件，APT系统使用版本字符串来选择最新的可用版本作为候选版本。这是通常的
状态，也是APT系统最推荐的使用方法。所有官方支持的档案库集合，并不要求”/etc/apt/preferences”文件，
因此，一些不应当被作为自动更新源的软件包，被标记为NotAutomatic，并被适当处理。
提示
版本字符串的比较规则可以被验证，例子如下，”dpkg --compare-versions ver1.1 gt ver1.1~1; echo
$?”(参见dpkg(1))。
Debian参考手册 69/233
如果经常从混合源档案库中安装软件包(参见第 2.7.6 节),你可以通过创建”/etc/apt/preferences”文件并且在
其中写入关于调整候选版本的软件包选取规则的合适条目(如 apt_preferences(5)中所示)来自动化这些复杂的操
作。这被称为apt-pinning。
当使用apt-pinning命令时，因为Debian不会确保软件之间的兼容性，所以你必须自己确认其兼容性。apt-pinning是
完全可选的操作，我并不建议去使用它。
档案库层级的Release文件(参见第 2.5.3 节)使用apt_preferences(5)的规则.对于Debian通用档案库和Debian
安全档案库，apt-pinning只在”suite”名下工作。(这点和Ubuntu档案库不同.)例如，你在”/etc/apt/preferences”
文件里面，可以使用”Pin: release a=unstable”，但不能使用”Pin: release a=sid”.
当使用非Debian的档案库作为apt-pinning的一部分时，你应该检查它们的用途和可信度。例如，Ubuntu和Debian是
不能混在一起的。
注意
即使不创建”/etc/apt/preferences”文件，在不用apt-pinning命令的情况下，你也可以进行相当复杂的系统
工作(参见第 2.6.6 节和第 2.7.6 节)。
如下是关于apt-pinning技术的简化说明。
可用的软件包源在”/etc/apt/sources.list”文件里面定义，APT系统从可用的软件包源里面选择Pin-Priority值
最大的，作为升级软件包的候选版本。如果一个软件包的Pin-Priority大于1000，这个版本限制为只能升级，关闭了
软件包降级功能（参见第 2.7.11 节）。
每个软件包的Pin-Priority值是在”/etc/apt/preferences”文件中的”Pin-Priority”条目中定义或者是使用它的默认
值。
Pin-Priority apt-pinning对软件包的影响
1001 安装该软件包，即使是一个降级软件包的指令
990 用作目标发行版档案库的默认值
500 用作常规档案库的默认值
100 用于NotAutomatic和ButAutomaticUpgrades档案库的默认值
100 用于已安装软件包
1 用于NotAutomatic档案库的默认值
-1 即使被推荐，也绝不安装这个软件包
Table2.18: 用于apt-pinning技术的值得注意的Pin-Priority值列表。
目标版本档案仓库，能够由命令行选项设置，例如: ”apt-get install -t testing some-package”
NotAutomatic和ButAutomaticUpgrades的档案是由档案库服务器上档案层级的Release文件来设置，(参见第 2.5.3
节)，同时包含”NotAutomatic: yes”和”ButAutomaticUpgrades: yes”.而NotAutomatic档案也是由档案库
服务器上的档案层级的Release文件来设置，但只包含”NotAutomatic: yes”.
来自多个档案源的软件包的apt-pinning情况可以通过”apt-cache policy package”命令显示。
• ”Package pin:”开头的行，列出了软件包版本的pin，如果package相关的pin已经定义,例如,”Package pin:
0.190”.
• 没有”Package pin:”的行存在，如果没有package相关的定义。
• 与package相关的Pin-Priority值列在所有版本字符串的右边，比如，”0.181 700”.
• ”0”是列在所有版本字符串的右边，如果没有package相关的定义。例如,”0.181 0”.
• 档案库(在”/etc/apt/preferences”文件作为”Package: *”定义)的Pin-Priority值，列在所有档案库路径的左
边，例如，”100 http://deb.debian.org/debian/ bookworm-backports/main Packages”.
Debian参考手册 70/233
2.7.8 阻止推荐的软件包的安装