持 、 研 究或背景信息 。
从安全策略可以 引 出完整安全解决方案所需的其他很多文档或子元素。 策略是广泛的概述， 而
标准、 基准、 指导方针和程序包括了 更加特定的、 详细的与实际安全解决方案有关的信息。 标准处
于安全策略 的下一个层次。
17
CISSP 官方学 习指南(第 7 版)
安全策略与个体
作为一条经验法则 ， 安全策略(以及标准 、 指 南和程序)应 当 不针对特定的个体。 安全策略并不
为 某个人分配任务和职责， 而是为 特定的 角 色定义任务和职责。 这个角 色可能具有行政管理控制或
人员管理职责。 因此， 安全策咯会定义安全基础架构 内不同角 色必须执行的操作， 而 不会定义哪些
人 负 责做哪些事情。 随后 ， 这些 已定义的 角 色作为 工作描述或指定的 工作任务被分配给个人。
可接受的使用策略
可接受的使用 策略是一个常规生成的文档， 它属于整个安全文档记录基础架构的一部分。 可接
受的使用 策略羊皮特别设计用 于分配组织 内 的安全角 色以及确保职责与这些角 色相联系 。 此策略定义
了 可接受的性能级别 以及对行为和动作的期望。 不遵循该策略会导致工作行动警告、 惩罚或解聘。
1 .3.2 安全标准 、 基准及指南
一旦设定了主要的安全策略， 就可以在这些策略的指导下拟定剩余的安全文档。 标准为硬件、
软件、 技术和安全控制方法的统一使用定义了强制性要求。 标准提供了 操作过程， 在这个过程中 ，
整个组织内部统一实现技术和措施 。 标准是战术文档， 定义了达到安全策略指定的 目 标和总体方向
的 步骤或方法。
下一个层次是基准。 基准定义了安全性的最低级别， 组织中 的所有系统都必须达到基准要求。
没有达到基准的所有系统都应该被排除在生产系统之外， 直至这些系统被提升达到基准要求为止。
基准建立了 通用 的安全状态基础， 所有附加的和更严格的安全措施可以被建立在这个基础之上。 基
准通常是系统特定的 ， 并且往往指的是行业或政府标准， 例如可信任计算机系统评估标准σCSEC)、
信息技术安全评估和标准(ITSEC) 以及 NIST(美国 国家标准技术研究院)标准。
指南是规范化安全策略结构的下一个元素。 指南提供了 如何实现标准和基准的建议， 井且能够
作为安全专家和用户 的操作指南。 指南具有灵活性， 因此为了适合每种特定的系统或条件， 它们可
以被定制， 并且能够在新措施的创建过程中使用。 指南说明 了 应当部署哪些安全机制 ， 而不是规定
特定的产品或控制 以及详细的配置设置。 指南概述了一套方法(包括行动建议)， 但并非强制性的 。
1 .3.3 安全程序
18
程序是规范化安全策略结构的最后一个要素。 程序是详细的 、 按部就班的指导文档， 它描述了
实现特定安全机制、 控制或解决方案所需的确切行动。 l}芋可以讨 论整个系统的部署操作或者关注
单个产品或方面， 例如部署防火墙或更新病毒定义。 大多数情况下 ， 程序仅限于具体的系统和软件 。
随着系统硬件和软件的发展， 手里芋必须被不断更新。 程序的 目 的是确保业务流程的完整性。 如果通
过某个详细的程序能够达到所有目的， 那么所有活动都应当遵循策略、 标准和指导方针。 程序有助
于在所有系统之间确 保安全性的标准化。
通常， 策略、 标准、 基准、 指导方针和程序只是在顾问或审计人员 的敦促下， 作为事后产生的
想法进行发展。 如果这些文档没有被使用和更新 ， 那么安全环境的管理就无法将它们作为指南使用 。
如果没有这些文档提供的计划编制 、 设计、 结构和监督， 就无法维持环境的安全， 也无法代表己经
第1王军 通过原则和策略的安全治理
尽 责并给予适度的关注 。
此外， 开发一个包含上述所有元素方面的文档是-种惯用做法。 事实上， 我们应该避免这种做
法。 这些结构中的每一个都必须作为独立的实体存在， 其原因在于每种结构执行不同的特殊功能。
在规范化结构的顶层(也就是安全策略)， 因为只包含全面的、 一般性的观点和 目 标， 所 以文档较少。
在规范化结构的较低层(也就是指南和程序)有 比较多的文挡， 因 为它们包含数量有限的系统、 网络、
部 门和区域的特定详细信息 。
将这些文档作为独立的实体保存 ， 具有 以下一些好处:
• 不是所有的用户都需要 知道所有安全分类层次中 的 安全标准、 基准、 指导方针和程序。
• 当发生变化时， 可 以较为方便地只更新和重新分配受影响的资源， 而不用更新整个策略以
及在整个组织机构 中进行重新分配。
拟定整个安全策略及所有支持性文档是一个令人畏惧的任务。 许多组织只是致力于定义基本的
安全参数， 较少详细说明 日常活动的每个方面。 不过在理论上， 详细和完整的安全策略以针对性的、
有效的和特定的方式支持现实生活中 的安全性。 如果安全策略文档相当完整， 就可以用于指导决策、
培训新用 户 、 回应问题以及预测未来的发展趋势。 安全策略不应当是一种事后的考虑或想法， 而应
当 是建立组织的一个关键部分。
对包含完整安全策略的文档的理解还有一些其他视角 。 图 1 .6 展示了这些组件的依赖关系 : 策
略、 标准、 指南和程序。 安全策略是有组织的安全文档的总体结构的 基础。 然后， 标准基于策略井
受规章制度的管辖。 指南从中衍生而来。 最后， 程序基于结构的三个基本层。 使用倒金字塔来表示
每个文档的体积或大小 。 完整安全策略中 的程序通常都要比任何单个元素中 的程序要多得多。 相比
较而言 ， 指南要比策略少， 标准也比策略少， 并且通常整体或全组织范围内 的安全策略甚至也更少。
程序
指导方针
标准
图 1 .6 完全策略组件的 比较关系
1 .4 理解和应用 威胁建模
威胁建模是潜在威胁被识别、 分类和分析的安全流程。 威胁建模在设计和开发过程中可以作为
一种积极主动的措施执行 ， 而产品一旦被部署， 就会被作为一种被动式措施。 在这两种情况下 ， 流
程会识别潜在危害 、 发生的概率、 问 题优先级 以及消除或减少威胁的手段。
威胁建模并不意味着是一个单独的事件 。 相反， 组织在系统设计流程早期就开始威胁建模并在
整个系统周 期 内 一直持续是很常见的 。 例如， 微软使用安全开发生命周 期(Security Development
Lifi四ycle， SDL)流程在产品 的每个开发阶段考虑和实现安全。 这支撑了这句箴言 " 设计安全、 默认
安全、 部署和沟通安全 " (也称为 SD3 + c)。 这一流程有两个 目标:
19
CISSP 官方学 习指南(第 7 版)
• 减少安全相关的设计和编码缺陷 的数量
• 降低剩余缺陷的严重程度
换句话说， 试 图减少漏洞 ， 降低任何存在缺陷的影响 。 总的结果是减少风险。
威胁建模的主动式方法发生于系统开发的早期阶段， 特别是在初始设计和规范建立阶段。 这种
类型的威胁建模也被称为防御方式。 这种方式基于编码和制作流程中对威胁的预测和特定防御中 的
设计， 而不是依靠部署后的更新和补丁。 大多数情况下， 集成安全解决方案更符合成本效益， 比后
面硬塞的方案更成功 。 遗憾的是， 并不是所有的威胁都可以在设计阶段预测出来， 所以仍然需要被
动式的威胁建模来解决不可预见的 问题 。
威胁建模的被动式方法发生在产品被创建和部署之后 。 此部署可以在测试或实验室环境中 ， 或
是指被部署到一般市场上。 这种类型的威胁建模也被称为对抗方式。 这种威胁建模的技术是道德黑
客攻击、 渗透测试、 代码审查和模糊测试背后的核心概念。 尽管这些流程通常有助于发现需要解决
缺陷和威胁， 但遗憾的是， 它们需要额外的编码努力来增加到新对策中 。 从长远来看， 回到设计阶
段可能会产生更好的产品， 但从头开始是非常昂贵的， 并会造成产品发布时间的极大延迟。 因此，
捷径是在部署后精心制作需要增加到产品中 的更新或补丁。 这样的结果就是， 可能在牺牲了功能性
和用户友好性的前提下 ， 也 未带来更有效的安全改进(相 比主动式威胁建模来说)。
注意 :
模糊测试是一项专 门 的动态测试J支术， 它 向软件提供了许多 不 同 类型 的输入， 来强调其局限性
并发现先前未被发现的缺陷。 模糊测试软件向软件提供无效输入， 可能是随机生成， 也可能是专 门
制作以触发已知的软件漏洞 。 然后， 模糊测试者会监控应用程序 的性能， 观察软件崩渍、 缓冲 区 溢
出 或其他不 良和战不可预知的结果。 可参考第 1 5 章 "安全评估和测试" 以查看更多 有 关模糊测试
的内容。
1 .4.1 识别威胁
可能的威胁几乎是无限的， 所以使用一种结构化的方法来准确地识别相关威胁是很重要的。 例
如 ， 一些组织使用 以 下三种方法中 的一种或多种:
关注资产 这种方法使用资产的估值结果， 并试图识别对于宝贵资产的威胁。 例如， 可 以评估
一个特定的资产， 以确定其是否容易受到攻击。 如果资产寄存着数据， 则可以评估访问控制来识别
能够绕过身份认证或授权机制的威胁。
关注攻击 一些组织能够识别潜在的攻击者， 并能够基于攻击者的 目 标识别他们所代表的威胁。
例如， 政府往往能够识别潜在的攻击者， 井识别攻击者想要达到的目标。 然后他们可以使用这种知
识来识别并保护他们 的相关资产。 这种方法面临的一个挑战是， 可能会出现以往未被视为一种威胁
的新攻击者。
关注软件 如果一个组织开发了 一个软件， 则可能会考虑针对软件的潜在威胁。 尽管几年前组
织一般不 自 己开发软件， 但如今这己非常常见。 具体地说， 大多数组织都有网络存在 ， 许多都创建
了自己的网页。 精美的网页带来更多的流量， 但他们也需要更复杂的编程， 并会受到更多的威胁。
20
如果威胁被确定为攻击者(而不是 自 然威胁)， 那么威胁建模尝试确定攻击者可能会试图达到什
么目的。 有些攻击者可能想禁用系统， 而其他攻击者可能想要窃取数据。 一旦确认了 这种威胁， 就
会基于 目 标或动机对他们进行分类 。 此外， 将威胁和漏洞进行井列， 来识别可能通过利用漏洞给组
第1章 通过原则和策略的安全治理
织带来重大风险的常见威胁。威胁建模的一个终极 目标就是优先处理针对组织宝贵资产的潜在威胁。
当试图对威胁进行盘点并分类时， 使用指南或参考通常是有用的 。 微软开发了 一个称为 STRIDE
的威胁分类方案。 STRIDE 的使用经常与对应用程序或操作系统威胁的评估相关。 然而， 它也可 以
用 于其他情境。 ST阳DE 是 以下几个单词的首字母缩写:
• 电子欺骗(Spoo:fing)一一通过使用伪造身份获得对 目 标系统访 问 的攻击行为。 电子欺骗可以
用 于 E 地址、 MAC 地址、 用户名、 系统名称、 无线网络名称、 电子邮件地址以及许多其
他类型的逻辑标识。 当攻击者将 自 己伪装成一个合法或授权的实体时， 他们往往能够绕过
针对未授权访问 的过滤器和封锁 。 一旦电子欺骗攻击让攻击者成功访问 目标系统， 后续的
滥用 、 数据盗窃或特权提升攻击就都可以 发起 。
• 篡改σampering)-一任何对数据进行未授权的更改或操纵的行为， 不管是传输中 的数据还是
被存储的数据。 使用篡改来伪造通信或改变静态信息。 这种攻击是对完整性和可用性的侵
害 。
• 否认(Repudiation)一一用户 或攻击者否认执行了一个动作或行为的能力。 通常攻击者会否认
攻击， 以便保持合理的推读， 从而不为 自 己的行为负责。 否认攻击也可能会导致无辜的第