# 赛博杯2019 Write Up
## 前言
杭电赛博协会出得题，感觉质量还是不错的，难易兼备。以下是此次比赛的Write Up。
## MISC
### Sign in
扫条形码得到flag。
### No Word
snow加密，将文件放入010editor看他的十六进制形式，  
0D0A是换行，剩下的将20转0，将09转1，得到的二进制数据，转字符串即可得到flag。
### 基础社工
题目介绍：大家都用着我们的数字杭电（i.hdu.edu.cn)但是对于其注册者却啥也不知道，所以小y打算去看看注册数字杭电的创始人的邮箱  
flag形式为：flag{你找到的电子邮箱}
百度一个IP反查询工具，Whois查询，看看这个IP的备案，  
得到flag；
### The world
下载得到一张图，猜测是隐写，直接foremost分解，得到四张图，  
第一张是可见的，应该没用，剩下来的，按顺序看。  
第一份压缩包是加密压缩包，看了一下不是伪加密，于是放入工具进行简单爆破，得到密码abc123，得到文件：  
d2abd3fb9d4c93fb064abf81f5fab84  
新手村钥匙  
第二份文件是一张图，猜测是LSB隐写，密码为上述字符串，测试后发现不是。继续考虑，可能是outguess加密，  
outguess -r flag.jpg -t secret.txt -k d2abd3fb9d4c93fb064abf81f5fab84  
得到文件  
95cca6c50e48e86c468ee329ddc11047
最后一关大门的钥匙  
第三份文件是一个mp3文件，猜测是MP3隐写，用MP3Stego解密，即可得到flag
### Different_P
hint：PIL是个好东西  
下载得到两份一样的文件，试了试盲水印，发现没有用。使用Beyond Compare 4结合后发现  
字符这里有点东西。根据题目提示，猜测要将两张图片的所有元素点的灰度拿来作比较，  
构造脚本如下
    # -*- coding:utf-8 -*-    
    import base64
    from PIL import Image
    im = Image.open("f1.png").convert("L")
    im2 = Image.open("f2.png").convert("L")
    width=im.size[0]  #图片宽
    height=im.size[1] #图片高
    dd=''
    flag1=''
    for x in range(0,width):
        for y in range(0,height):
            data  = im .getpixel((x,y)) 
            data2 = im2.getpixel((x,y))
            if(data!=255 or data2!=255):
                dd=dd+str(data-data2)
    for i in range (int(len(dd)/8)):
        word = dd[i*8:(i+1)*8]
        word = int(word,2)
        flag1 +=chr(int(word))
    missing_padding = 4 - len(flag1)%4
    if missing_padding:
        flag1+= '='*missing_padding
    flag = base64.b64decode(flag1)
    pic = open('flag.png','wb')
    pic.write(flag)
    pic.close()
得到一张图片，但是打不开，看他的十六进制数据发现文件头被改了。改回来后得到一张二维码，扫码得到flag  
## Crypto
### easy_RSA
题目文件是public.pem 和 flag.enc，先用openssl打开.pem文件  
openssl rsa -pubin -text -modulus -in public.pem  
得到  
其中。N=>Modulus，e=>Exponent  
没有更多信息与算法了，猜测这个大数可以直接分解，上yafu。随后用rsatool生成.pem文件，再用openssl解密flag.enc，得到字符串  
}Y!s04tEP{ygraCl_f  
栅栏加方向即可得到flag，  
rsatool和openssl的使用参考  
### 川流不息
题目加密脚本和密文  
加密脚本
    from parameters import a
    def stream(init,size):
        if len(init)   
得到回显  
不能输入bXlmbGFn！  
但经过测试，发现被加密后的base64字符串解密时似乎会舍弃密文末尾多余的字符（取余4后多出来的字符），于是这题就不难绕过了，  
最终payload：  
得到flag  
truncation  
进入网站，f12，发现注释：  
进入sorce.php发现源码：
    "source.php","aa"=>"aa.php"];
            if (! isset($page) || !is_string($page)) {
            echo "you can't see it";
            return false;
            }
            if (in_array($page, $whitelist)) {
            return true;
            }
            $_page = mb_substr(
            $page,
            0,
            mb_strpos($page . '?', '?')
            );
            if (in_array($_page, $whitelist)) {
            return true;
            }
            $_page = urldecode($page);
            $_page = mb_substr(
            $_page,
            0,
            mb_strpos($_page . '?', '?')
            );
            if (in_array($_page, $whitelist)) {
            return true;
            }
            echo "you can't see it";
            return false;
    }
    }
        if (! empty($_REQUEST['file'])
            && is_string($_REQUEST['file'])
            && kind::checkFile($_REQUEST['file'])
        ) {
            include $_REQUEST['file'];
            exit;
        } else {
           echo "Look carefully and you will find the answer.";
        }  
    ?>
先进入click.php，发现：flag is not here, and flag in flag.php
得到了ﬂag的位置，那么应该是考任意文件包含漏洞  
审计代码得到：  
要设定page的值，且内容要在whiteList中  
mb_substr($page,0,mb_strpos($page.'?','?'))  
表示截取page中？之前的内容 接着对$page进行一次URLdecode之后，再判断一次。最后ﬁle的值为一个字符串 且 checkﬁle返回真值
就能包含文件ﬁle  
所以最终payload：  
得到一个猜密码的界面
    猜密码
    猜测错误.';
                    $_SESSION['pwd']=time().time();
            }
    }
    -->
    密码：
需要post一个赋值了的password和一个和服务器时间的值相同的pwd，脚本如下
    import requests
    import time
    from bs4 import BeautifulSoup       #html解析器
    url="http://47.110.227.208:8003/index.php?file=source.php?../../flag.php"    #目标url
    session=requests.session()          #获取一个session对象
    response=session.get(url)
    html=response.text                  #返回的页面
    soup=BeautifulSoup(html,'html.parser')
    formData={"password":"123","pwd":"int(time.time())"}#构建一个formData，用于传我们的
    re2=session.post(url,data=formData)#post过去
    if("猜测错误" not  in re2.text):
        print(re2.text)
发现无法获得flag，后来发现pwd赋值为空可以获得flag，可能是$_SESSION['pwd']=time();没有执行成功。
### Simple XXE
首先，了解一下XXE，（xml外部实体注入漏洞）  
参考文章：  
（然后跟这个文章走2333）  
首先f12看到dom.php存在XXE，于是构造XML文本先验证漏洞，  
这一步骤将XML内容发送给服务器，当服务器将XML解析完成后，就会依照解析的内容工作，这段XML中SYSTEM
"file:///etc/passwd"部分引用了目标服务器(即172.16.12.2)下的/etc/passwd文件，服务器解析XML内容后，会将这一文件内容存入&xxe中，然后将数据返回给恶意访问者。  
执行完成上面的操作后，点击GO，右侧将出现此数据包的返回结果，内容如下，返回的数据为服务器上/etc/passwd文件的内容  
漏洞验证成功，  
于是修改XML中的外部实体为其他协议，根据提示看hint，php://filter/read=convert.base64-encode/resource=hint.php，
在Proxy选项卡的原数据包中粘贴XML内容，点击FORWARD放行请求，返回的结果  
解码后得到目录，  
于是  
解码得到flag
### inclusion
进入页面，f12，发现注释 phpinfo.php  
然后根据名字，猜测是php文件包含漏洞（利用phpinfo）  
参考这篇文章（又是跟着文章走）  
访问 验证漏洞，  
成功。  
文章如是说：  
先讲一下利用phpinfo上传文件，然后在文件包含的原理：
参考链接：
在给PHP发送POST数据包时，如果数据包里包含文件区块，无论访问的代码中是否有处理文件上传的逻辑，php都会将这个文件保存成一个临时文件（通常是/tmp/php[6个随机字符]），这个临时文件在请求结束后就会被删除，同时，phpinfo页面会将当前请求上下文中所有变量都打印出来。但是文件包含漏洞和phpinfo页面通常是两个页面，理论上我们需要先发送数据包给phpinfo页面，然后从返回页面中匹配出临时文件名，将这个文件名发送给文件包含漏洞页面。