JS code. Therefore, as we alter the value of pblk, the bug
ﬁnding effectiveness of CodeAlchemist may vary. To conﬁrm
this intuition, we ran CodeAlchemist with eight distinct pblk
from 0.0 to 0.64 (from 0% to 26%) on ChakraCore 1.10.1, and
counted the number of crashes found in Figure 9. The red and
the green line indicate the number of total crashes found and
the number of unique crashes found, respectively.
First, we recognize that creating block statements from
scratch signiﬁcantly helps in ﬁnding more crashes. When
pblk = 0.0, we found the least number of unique crashes,
but when pblk is greater than 0, we found at least 3 unique
crashes in each case. We believe this is because guarded block
statements such as for-loops can initiate JIT optimization,
which may trigger memory corruption in the end. Note that
many recent CVEs were indeed assigned to JIT optimization
vulnerabilities.
Second, increasing the block reinvention probability does
not always help ﬁnd unique bugs. For instance, when pblk =
0.16, CodeAlchemist found 6 unique crashes and a total of
41 crashes. However, we found 3 unique crashes and a total
of 67 crashes with pblk = 0.64. This is mainly because (1)
CodeAlchemist was stuck with inﬁnite loops as the number
of guarded block statements increases, and (2) several JIT
optimization-based crashes potentially prevent us from observ-
ing other meaningful bugs.
From the above experiments it is obvious that ﬁnding an
appropriate value for pblk is important. Both 0.08 and 0.16 of
pblk found the most number of unique crashes, but we found
more number of total crashes with 0.16. Thus, we decided to
use pblk = 0.16 for the rest of experiments.
D. Comparison against State-of-the-Art JS Engine Fuzzers
How does CodeAlchemist perform compared to existing JS
fuzzers in terms of their bug ﬁnding ability? To answer this
question, we compared CodeAlchemist against jsfunfuzz [27],
which is the state-of-the-art fuzzers maintained by Mozilla,
and IFuzzer [33], which is a variant of LangFuzz [17]. We
ﬁrst evaluated these three fuzzers to compare how many known
CVEs and bugs they can ﬁnd in an old version of ChakraCore.
We then compared them on the latest stable version of the four
major JS engines to see how many unknown bugs they can ﬁnd.
1) Comparison on an Old ChakraCore: We selected an
old version of ChakraCore (1.7.6), which was the ﬁrst stable
version of ChakraCore released after Jan. 1st, 2018. In order
to run CodeAlchemist and IFuzzer, which require seed ﬁles to
start with, we gathered JS seed ﬁles appeared before Jan. 1st,
2018 (as we did in §VI-A). Note we excluded regression tests
released after Jan. 1st, 2018 because they may contain test
cases that can trigger bugs in the old version of ChakraCore.
For fair comparison, we also set
the version of jsfunfuzz
11
24685101520# of Max Iterations (imax)Avg. # of Valid Stmts.2040602460.010.020.040.080.160.320.64Block Reinvention Prob. (pblk)# of Total Crashes# of Unique CrashesUniqueTotalTABLE I: The number of unique crashes found on ChakraCore
1.7.6 (released on Jan. 9th, 2018) by three different fuzzers.
TABLE II: The number of unique crashes found on the latest
JS engines as of July 10th, 2018.
CodeAlchemist
jsfunfuzz
IFuzzer
JS Engine
CodeAlchemist
jsfunfuzz
IFuzzer
# of Unique Crashes
# of Known CVEs
7
1
3
1
0
0
ChakraCore 1.10.1
JavaScriptCore 2.20.3
V8 6.7.288.46
SpiderMonkey 61.0.1
6
6
2
0
0
3
0
0
0
0
0
0
to be the latest one released before Jan. 1st, 2018. When
we run CodeAlchemist, we use the following parameters:
imax = 8, pblk = 0.16. We ran the three fuzzers for 2,112 CPU
hours (24 hours with 88 cores) each, and compared the number
of crashes found. Note that we counted only the crashes
that involve memory corruption by manually verifying them,
because JS engines sometimes intentionally raise a SIGSEGV
signal, e.g., WTFCrash of JavaScriptCore [4].
1
2
3
4
5
6
7
8
9
var s0 = { // Var1
get p() {},
p : 2
};
function s1(s2) { // Func2
++s2.p;
}
Object.defineProperty(s0, 0, {}); // Expr3
s1(s0);
// Expr4
Table I summarizes the number of unique crashes and
known CVEs each fuzzer found. Note that CodeAlchemist
found the most number of unique crashes, while IFuzzer was
not able to ﬁnd any crash. CodeAlchemist found twice more
unique bugs than jsfunfuzz, and the two fuzzers were on a par
with regard to the number of CVEs found: both found the same
CVE-2018-0859. This result indicates that CodeAlchemist is
more effective than the existing fuzzers in terms of its bug
ﬁnding ability. In addition, jsfunfuzz found two bugs that are
not discovered by CodeAlchemist, and CodeAlchemist found
six bugs that are not discovered by jsfunfuzz. The result
suggests that the two fuzzers could be complementarily used
for ﬁnding bugs in JS engines.
We also note that three of the bugs CodeAlchemist found
are still alive in the latest version of ChakraCore. The three
bugs had been latent for about seven months undetected by
other fuzzers or security researchers. This result reﬂects the
fact
that CodeAlchemist can ﬁnd meaningful bugs deeply
hidden in the JS engines.
2) Comparison on the Latest JS Engines: Now that we
know CodeAlchemist can effectively ﬁnd vulnerabilities on
an old version of ChakraCore, it is natural to ask if CodeAl-
chemist is effective in ﬁnding vulnerabilities on the latest JS
engines. We answer the question by running CodeAlchemist,
jsfunfuzz, and IFuzzer on the latest stable version of the four
major JS engines as of July 10th, 2018. In this experiment, we
used the seeds we collected prior to the date (as we discussed
in §VI-A), and the latest jsfunfuzz released before the date.
Table II presents the number of unique crashes each
engine found after 2,112 CPU hours of fuzzing. In total,
CodeAlchemist found 4.7× more unique bugs than jsfunfuzz:
CodeAlchemist and jsfunfuzz found 14 and 3 unique bugs,
respectively, while IFuzzer found nothing. CodeAlchemist was
the only fuzzer who found bugs in three distinct JS engines:
ChakraCore, V8, and JavaScriptCore. In contrast, jsfunfuzz
was able to ﬁnd bugs only in JavaScriptCore. One out of
three bugs jsfunfuzz found was also found by CodeAlchemist.
The other two bugs found by jsfunfuzz were not overlapped
with the bugs found by CodeAlchemist. It is obvious from the
results that CodeAlchemist prevails over the state-of-the-art JS
engine fuzzers in both old and the latest version of JS engines.
Fig. 10: A test case generated by CodeAlchemist triggering
CVE-2018-8283 of ChakraCore 1.10.0.
E. Real-World Bugs Found
We have shown so far that CodeAlchemist is effective in
ﬁnding bugs in JS engines within a controlled environment.
However, we have also found numerous bugs in the latest
JS engines. Particularly, we have run CodeAlchemist with a
variety of different parameters for about a week on the same
server machine we used. As a result, we found a total of 19
unique bugs on the four major JS engines.
Table III summarizes the list of bugs we have found so
far. The third column of the table indicates whether the bug
we found can trigger a crash in the corresponding browser.
The ﬁfth column indicates the security impact of each bug we
found. We manually investigated each bug and mark them as
“not exploitable” if we conﬁrmed the root cause of the bug
and it is obvious that the bug is not exploitable, e.g., a NULL
dereference, and we also mark them as “likely exploitable” if
a way the bug triggers memory corruption is similar to that of
previously known PoC exploits.
First of all, we found 19 bugs including 11 exploitable
bugs. Eight of them were not publicly known, although vendors
had known them. The other 11 bugs we found were previously
unknown. We reported all of them to the vendors and obtained
3 CVEs for the 7th, 8th, and the 9th bug.
We manually analyzed the other bugs too. As indicated by
the fourth column of the table, all these bugs are related to
diverse parts of the JS engines including JIT compilation, data
parsing, and string handling. We believe this result highlights
the impact of our research.
F. A Case Study
What do real-world bugs found by CodeAlchemist look?
We now describe one of the bugs that we found in detail
to answer the question. For responsible disclosure, we chose
the one that is already patched (the 13th bug in Table III)
as an example. Figure 10 shows a test case generated by
CodeAlchemist, which triggers CVE-2018-8283 on Chakra-
Core 1.10.0. We simpliﬁed the test case for ease of explanation.
12
Idx
JS Engine
Browser
Description
Impact
Status
TABLE III: Unique bugs CodeAlchemist found.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
JSC 2.20.3
JSC 2.20.3
JSC 2.20.3
JSC 2.20.3
JSC 2.20.3
JSC 2.20.3
JSC 2.21.4 (beta)
JSC 2.21.4 (beta)
JSC 2.21.4 (beta)
JSC 2.21.4 (beta)
V8 6.7.288.46
V8 6.7.288.46
ChakraCore 1.10.0
ChakraCore 1.10.1
ChakraCore 1.10.1
ChakraCore 1.10.1
ChakraCore 1.10.1
ChakraCore 1.10.1
ChakraCore 1.10.1
Safari 11.1.1
Safari 11.1.1
Safari 11.1.2
Safari 11.1.2
Safari 11.1.2
Safari 11.1.2
Safari 11.1.2
Safari 11.1.2
Safari 12.0.0
Safari 11.1.2
Chrome 67.0.3396.99
Chrome 67.0.3396.99
-
-
-
-
Edge 43.17713.1000.0
Edge 43.17713.1000.0 Memory corruption due to incorrect JIT compilation
Edge 43.17713.1000.0
Uninitialized memory access due to incorrect scoping
Use after free due to incorrect garbage collection
Memory corruption due to incorrect scoping
Memory corruption due to incorrect async function handling
Memory corruption due to incorrect regex parsing
Memory corruption due to incorrect date parsing
Heap overﬂow due to incorrect string handling
Memory corruption due to incorrect stack overﬂow handling
Memory corruption due to incorrect JIT compilation
Memory corruption due to incorrect string handling
Out of bound access due to side effect in Float64Array
Stack overﬂow due to incorrect recursively deﬁned class handling
Type confusion due to incorrect duplicated property handling
Memory corruption due to incorrect yield handling in async function
Memory corruption due to incorrect JIT compilation
Use after free due to incorrect JIT compilation
Use after free due to incorrect JIT compilation
Null dereference due to incorrect JIT compilation
Exploitable
Exploitable
Exploitable
Exploitable
Exploitable
Exploitable
Exploitable
Exploitable
Exploitable
Not Exploitable
Exploitable
Not Exploitable
Exploitable
Likely Exploitable
Likely Exploitable
Likely Exploitable
Not Exploitable
Not Exploitable
Not Exploitable
CVE-2018-4264
Conﬁrmed
Conﬁrmed
Conﬁrmed
Conﬁrmed
Conﬁrmed
CVE-2018-4437
CVE-2018-4372
CVE-2018-4378
Conﬁrmed
Conﬁrmed
Conﬁrmed
CVE-2018-8283
Reported
Reported
Reported
Conﬁrmed
Conﬁrmed
Conﬁrmed