236
3 Advanced Web Challenges
# b′m=d&f=up1oads$2F70c97cc1 -079f-4d01-8798- f36925ec1fd7 -pdf (x08
plaintext = b'm=dsf=app -py'
\,x08\,x08′,x08′,x08′,x08′,x08,x08\,x08 **
padding = abs (8 (1en (plaintext.) 8)))
Burrpped  ( [6utpped] ) saq/q + xaqupe[d = qxaqure[d
pzint (plaintext)
# b′m=d&f=app -py \x04\x04^,x04\,x04 
pzint (binascii .hex1lify (cipher,encrypt (plaintext)))
# b′e2272b36277c708bc21066647bc214b8'
If the decryption was successful and the content makes sense, you can assume
that the key is correct. However, after we submit the flag in the format, we get an
error.
Look again at the title, there is a link related to file download, by analyzing this
link, we can find an arbitrary file download vulnerability.
Download app.py to analyze it and finally get the key.
$ cur1 http: //1oca1host :8080/?a=e2272b36277c708bc21066647bc214b8
# coding: UTF- 8
mport veb
import os
import ur11sb
from Crypto .Cipher inport DES
import urlparse
ENCRPYTION_KEY = megnnaro'
web . config . debug = False
3.3.1.4 The CBC Model
 mssp aq o sp xd jo o p ( x s  
the preceding one, then encrypted, and finally the encrypted blocks are spliced
together to obtain the final string. This makes the encryption of each block of
plaintext dependent on all the preceding blocks of plaintext and ensures the unique
ness of each message through the IV (Initialization Vector) in the CBC encryption
process. The workflow is shown in Figs. 3.38 and 3.39.
An xor operation has the following feature.
a xor b xor a = b
a xor 0 = a
The direct involvement of IV's and chunks in the heterogeneity decryption process
leads to two common attacks on the questioning process: affecting the first plaintext
grouping via IVs, and affecting the n+1th plaintext grouping via the nth secret
chunk.
---
## Page 252
3.3 Cryptography and Reverse Knowledge
237
Initialization Vector (IV)
Key
Block Cipher
Block Cipher
Encryption
Key
Block Cipher
Encryption
Encryp
Ciphertext
Ciphertext
Ciphertext
Cipher Block Chaining (CBC) mode encryption
Fig, 3.38 The workflow diagram of the CBC (Cipher Block Chaining) model (from Wikipedia)
Initialization Vector (IV)
Ciphertext
CD
Ciphertext
Ciphertext
Block Cipher
Block Cipher
Key
 Decryptien
CAY
Decryption
Key
Block Cipher
Decryption
中
Plaintext
T
Plaintext
C.
Plaintext
Cipher Block Chaining (CBC) mode decryption
Fig, 3.39 The workflow diagram of the CBC (Cipher Block Chaining) model (from Wikipedia)
According to the decryption procedure, if we modify the decryption result of the
nzh group, let p_n represent the nth plaintext, c_n represent the nth secret, dec(key, c)
be the decryption algorithm, and key be the key. The code is as follows.
P_n = dee (key, c_n) xor c_n-1
P_n_modify = dec (key, c_n) xor c_n-1_modify
c_n-1_modify = p_n_modify xor p_n xor c_n-1
If you want to modify the decryption results of a certain group, you only need to
passed backward from the previous group (or IV in the case of the first group).
know what the original plaintext was, what you want to modify, and what was
Here is an example of PicoCTF 2018’s Secure Logon topic, which provides the
server-side code:https://github.com/shiltemann/CTF-writeups-public/blob/master/
PicoCTF_2018/writeupfiles/server_noflag.py. Under the /flag route, the flag is
displayed to the page only if the AES-encrypted JSON string stored in the cookie
is fetched and the admin field is 1.
@app . route (/flag′ , methods= ['GEr′])
def fiag () :
try :
---
## Page 253
238
3 Advanced Web Challenges
except KeyError:
encrypted = request . cookies [*cookie′]
flash(*Error: Please log-in again. *)
return redirect (ur1_for (′main′) )
data = A&sCipher (app . secret_key) decrypt (encrypted)
data = json. 1oads (data)
try:
check = data ['admin′]
except KeyError:
if check == 1:
check = 0
return_tenplate ( *flag.html ', value=flag_value)
flash (*Success: You 1ogged in! Not sure you*11 be able to see the flag
though. ", *success*)
return_template ('not -flag.html', cookie=data)
The cookie generation algorithm is given in the /login route.
@app.router(′/login′, methods=['GEr′, FosT']}
def login () :
if request forn [*user'] = *admin′ :
message = *I'm sorry the admin passvord is super secure. You' re not
getting in that vay . *
flash (message, categozy)
categoxy - 'danger'
return_tenplate ('index.html*)
resp = make_response (redirect ("/flag*1)
cookie = {}
cookie ['password′] = request forn['passvord’]
cookie ['username'] = request . forn [′user]
cookie [′admin] = 0
print (cookie)
cookie_data = json, dumps (cookie, sort_keys=Tzue)
encrypted = AEsCipher (app .secret_key) -encrypt (cookie_data)
print (enczypted)
dsox uxno.x
resp.set_cookie ('cookie′, enczypted)
The encryption algorithms used are.
class AEscipher:
Usage:
EEEE
c = AEsCipher (′passvord) encrypt ( 'message ′)
m = AEscipher (′passvord) decrypt (c)
Tested under Python 3 and PyCrypto 2.6 .1.
EEEE
def init__(self, key) :
self .key = nds (key -encode [ *utf8*)) .hexdigest ()
---
## Page 254
3.3 Cryptography and Reverse Knowledge
239
def encrypt (self, raw) :
rav = pad (rav)
iv = Randon.nev () .read (Ags .block_s1ze)
cipher = AES.nev (self .key, AES.MODE_CBC, iv)
return b64encode (iv + cipher , enczypt (xav))
def decxypt (se1f, enc) :
enc = b64decode (enc)
1v = enc [: 16]
cipher = AES new (self .key, AEs .MoDE_CBC, iv)
retuxn unpad (cipher, decxypt (ene [16:111 decode ( *utf8′)
From the analysis of the login function and AESCipher, we know that: the
AES-128-CBC encryption algorithm is used; the content of the cookie is base64
(iv, data); data is the result of json.dumps(cookie); the cookie contains ("admin":
0, “username”: “something”, “password": “something"}, and sorted by key alpha-
betical order.
In order to reach admin as 1, we need to perform a CBC bit-flip attack.
According to the result of json.dumps, the character to be modified is at the 11th
digit of the entire encrypted string, changing it from 0 to 1.
data = {"admin" : 0, "usezname": *sonething*, *passvord* : "something"}
import json 
print (json. dumps (data, sort_keys=True))
# {*admin*: 0, *password*: "something”, "username": *something*)
Based on the group length of 16, we can tell that the character to be flipped is in
the 11th position of the first group.
According to the formula, we start the fip attack. The required IV is already
stored in the first 16 bits of the base64 decryption result in the cookie. Then, all the
information we need is satisfied and we start writing the program to flip.
from Crypto. Cipher inport AES
import binasci1
lmport base64
ciphextext = "0pocvdCvNFjoMvCKqxikHvF2a8PuOsrFeGDeVo0qt5/
Impozt Json
Fxxeda8nz6xmrqa6,80.xdxuxxbgua
MPf1YQQ9o06m+&juIflc8vYgqUF3GoTnHQ=
ciphertext = base64 .b64decode (ciphertext)
ciphertext = 1ist (ciphertext)
(t)pxo  (o /pxo , [ot] axaqxaudto = [0t] axaxaudto
print (base64 . b64encode (bytes [ciphertext)) )
06m+EjuIfk8vYgqUF3GoTnHQ= 
---
## Page 255
240
3 Advanced Web Challenges
Ex1
Ex1(Padded)
Ex2
Ex2(Pads)
Ex3
Ex3(Pad)
Ex4
Ex4(Pade)
Ex5
Ex5(Pa)
Fig, 3.40 Padding result
Replace the flipped cookie with a new one to successfully get the flag.
3.3.1.5 Padding Oracle Attack
Padding Oracle is a padding attack against applications based on the representation
of the information decrypted by the server, targeting the CBC encryption model,
where the key is the use of padding. In block encryption, all the plaintext strings need
to be divided into fixed-length groups to satisfy the need for padding, which
complements the plaintext as a complete data block.
There are various rules for padding, the most common of which is the one defined
in the PKCS#5 standard, i.e., when the last block of data in the plaintext contains
 padding data of N content (V depends on the length of the data in the last part of
the plaintext block). Each string should contain at least one padding block, i.e., when
one additional block is needed, add 01; when two additional blocks are needed, add
grouping, an additional block of padding is added, see Fig. 3.40.
02. When the length of the string is exactly an integer multiple of the length of the
During decryption, after the server decrypts the data, when determining whether
the padding at the end of the last data block is legitimate, a padding exception may be
thrown due to an error in the padding, which is the Oracle (hint) to the attacker when
s m uoe AI o uman m uoeodde qam [eodi y uogdouo u Suoee
encrypted string to the client as credentials to be used later in authenticating the
client. Here is an example of P.W.N. CTF 2018: Converter (see Fig. 3.41), titled
http://converter.uni.hctf.fun/, whose main function is to enter a string for the user and
convert the document in that format to another format via the server's converter. Note
---
## Page 256
3.3 Cryptography and Reverse Knowledge
241
Convert your Dissertation (for free)
from:
Markdown (gandoc)
，
TML 4
it is trunc
ers. I your diss4
Fig, 3.41 Task page
Fig, 3.42 Normal puge
Success!
Here is your converted data:
that the conversion of Markdown uses pandoc, which may be vulnerable to com-
mand injection. After completing the input, the server returns a string of cookies.
vals=4740dc0fb13fe473e540ac958fce3a51710fa8170a3759c7f28afd6b43f
7b4ba6a01b23da63768c1f6e
82ee6b98f47f6e40f6c16dc0c202f5b5c5ed99113cc629d16e13c5279ab
121cbe08ec83600221
With the modification to the cookie, we noticed that: "ValueError: Invalid
ongapooaNOSf, pogpxu si Suns ou jo np se o uoqm sasq Supped
Expecting value: line 1 column 1 (char O)° is raised when the first digit of the string
is modified; if without modification, the page retums to normal, see Fig. 3.42.
Since different values of vals are returmed when the same content is entered, we
can assume that the encryption mode used by the algorithm for encryption is CBC
mode. While incrementally increasing the length of the incoming content, we find
that the length of the returmed vals varies by 32, so we can determine that the
---
## Page 257
242
3 Advanced Web Challenges
11121415
101112133415
plantext
PlasText[Fadded)
6?7
rte
77
Encrypted Output(HEX)
Fig, 3.44 He process of encrypting and decrypting the last group in the CBC schema
encryption mode is 128-CBC mode. Based on this content, we can attempt a Padding
Oracle attack to recover the plaintext. Since an IV is required for decryption in CBC
mode, and the server returns us only one vals, we can start by assuming that the first
grouping is the IV and the subsequent information is the encryption result.
In this scenario, based on the application’s prompts, we can determine if an
encrypted string is padded correctly, so we can perform a Padding Oracle attack
on the application.
In this case, then, we can assume that there is a correspondence between the
information returmed by the server and the plaintext, as shown in Fig. 3.43.
Since we don’t know what the plaintext is, it is replaced by '? in place of the
plaintext. However, it is not difficult to assume that the last block must contain a
legal padding.
The process of encrypting and decrypting the last group in the CBC schema is
shown in Figs. 3.44 and 3.45, with the symbol  representing for xor.
After understanding how strings are decrypted in CBC and the rules of Padding,
we can use Padding Oracle to recover the encrypted plaintext for this challenge. As
for the principle, let’s take one of the encrypted blocks as an example.
---
## Page 258
3.3 Cryptography and Reverse Knowledge
243
Encrypted tut(HE
0e4et0fe
-1FBCK
++
0x770x17x27
Fig, 3.45 He process of encrypting and decrypting the last group in the CBC schema
Fig, 3.46 The padding contained in the decryption result is wrong
Select the first block and note that the first block has the number of operations IV
when performing an xor operation, and the subsequent blocks have the number of
operations IV when performing an xor operation. For the convenience of operation,
only one cryptographic block will be cracked. When cracking, set the IV to all 0 first.
By setting the cookie to
vals=000000000000000000000000000000000000710fa8170a3759c7f28
afd6b43f7b4ba
The server retums ValueError: Invalid padding bytes, because after using O as IV
for decryption, the padding contained in the decryption result is wrong, which causes
a padding exception during the decryption process, see Fig. 3.46.
By varying the IV, the bytes of the final decryption result are varied so that when
IV+1, i.e. when the cookie is
vals=00000000000000000000000000000001710fa8170a3759c7f28
afd6b43f7b4ba
The 500 error is still returned, but the results of the plaintext decrypted by the
server have changed, as shown in Fig. 3.47.
---
## Page 259
244
3 Advanced Web Challenges
DeorptedWle
Fig, 3.47 The results of the plaintext decrypted by the server have changed
(erted np(HX)
+++++
11-130
Decrygted Valas
Fig, 3.48 Success result
Due to the IV change, the final string changes to Ox3C when the server finishes
decrypting. This is repeated until the last 1 byte of the decrypted plaintext is 0x01
and the contents of the cookie are as follows
fd6b43f7b4ba
vals=00000000000000000000000000000072710fa8170a3759c7f２8a
Then the server returns “JSONDecodeError: Expecting value: line 1 column
1 (char O)* instead of "ValueEror: ValueError: Invalid padding bytes." due to a
padding error. At this point, it can be assumed that the last character is Ox01, which
satisfies the padding requirement, as shown in Fig. 3.48.
If [Intermediary Byte] ^ 0x72 == 0x01,
then [Intermediary Byte] == 0x72 ~ 0x01,
so [Intermediary Byte] == 0x73
That is, the content of the intermediate value after decrypting the first secret block
is 0x73.
---
## Page 260
3.3 Cryptography and Reverse Knowledge
245
EnrntedInput(HE)
77-121-CMC
+++++++
+++*+*+++++++++*
IntemediaryValue(HEx)
Initiaizatie
++++++++++
Fig, 3.49 500 error
feted H2X)
++++++++++++++++
Fig, 3.50 Success page
In the normal decryption process, this character performs an xor operation with a
character in the same position in the original IV, and the value after the operation is
the final decryption result. So 0x73 xor 0x51 = 0x22 (hex decoded as "), which is
the value of the original plaintext string.
Now we know the intermediate result of the last 1 byte after decryption. By
modifying the IV, we can make the final result of the last 1 byte after decoding an
asymptote 0x02, and then the server will return the 500 error again because the
decryption result of the penultimate character does not satisfy the Padding rule (see
Fig. 3.49).
Then, still modifying the IV step by step so that the final decryption result is 0x02,
when filled correctly (see Fig. 3.50), the cookie looks like this
vals=000000000000000000000000000000005671710fa8170a3759c7f28af
d6b43f7b4ba
At this point, Fig. 3.50 renders the penultimate digit according to a similar
calculation process.
---
## Page 261
246
3 Advanced Web Challenges
0000000000000000000000000000072710fa8170a3759c7f28afd6b43f7b4ba
000000000000000000000000005671710fa8170a3759c7f28afd6b43f7b4ba
0000000000000000000e4bd5077710fa8170a3759c7f28afd6b43f7b4ba
00000000000000c1f7e6bf5275710fa8170a3759c7f28afd6b43f7b4ba
0000000000035c0f6e7be5374710fa8170a3759c7f28afd6b43f7b4ba
00000008c3acff9e8b15c7b710fa8170a3759c7f28afd6b43f7b4ba
0000000178d3bcef8e9b05d7a710fa8170a3759c7f28afd6b43f7b4ba
000cc148e38cdfbeab35e79710fa8170a3759c7f28afd6b43f7b4ba
000014cd158f39ccfaebb25f78710fa8170a3759c7f28afd6b43f7b4ba