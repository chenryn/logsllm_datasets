执行以上命令之后，我们应该能得到类似以下内容：
KDE_MULTIHEAD=false
SSH_AGENT_PID=6666
HOSTNAME=1inuxbox
GPG_AGENT_INP0=/tap/gPgPdOt7g/S -gPgagent : 6689 : 1
SHELL=/bin/bash
TERM=xterm
XDG_MENU_PREFIX=kde-
HISTSI2E=1000
XDG_SESSI0N_C00KIE=6d7b05c65846c3eaf3101b0046bd2b001208521990. 996705
-1177056199
GTK2_RC_FILES=/etc/gtk2.0/gtlkrc:/hone/ne/ -gtltrc2. 0: /home/ne/ .lkde/sh
are/config/gtkrc2.0
GTK_RC_FILES=/etc/gtk/gtkrc:/home/me/ gtkrc:/home/me/ -kde/share/confi
g/gtkrc
GS_LIB=/home/me/ fonts
WINDOVID=29360136
QTDIR=/usr/1ib/qt-3.3
QTINC=/usr/1ib/qt-3. 3/inc1ude
KDE_FULL_SESSION=true
USER=ne
LS_C0L0RS=no=00:fi=00:di=00; 34 : 1n=00 ; 36 :pi=40; 33: so=00 ; 35 : bd=40 ; 33; 01
 cd=40 ; 33;01:or=01; 05; 37;41:n1=01;05 ;37;41:ex=00; 32: \*. cnd=00 ;32: \* exe :
我们所看到的是环境变量及其数值的列表。例如，我们看到一个叫做USER的变量，这个
变量值是“me”。printenv命令也能够列出特定变量的数值：
[neglinuxbox -]$ printenv USER
me
当使用没有带选项和参数的set命令时，shell变量，环境变量，和定义的shell函数都会被
显示。不同于printenv命令，set命令的输出很友好地按照首字母顺序排列：
136
---
## Page 138
[ne@linuxbox -]$ set 1less
也可以通过echo命令来查看一个变量的内容。像这样：
[ne@linuxbox -]$ echo $HOME
/hcne/ze
别名无法通过使用set或printenv来查看。用不带参数的alias来查看别名：
[ne@linuxbox -]$ alias
alias 1.=′ls -d .* --color=tty′
alias 11=′ls -1 ==color=tty'
alias ls=′1s --color=tty'
alias vi=′vin′
otua/ura/xm/ 1sette,=qotun sette
-shou-dot --shou-ti1de’
12.3
一些有趣的环境变量
shell环境中包含相当多的变量。虽然你的shell环境可能与这里的不同，你可能会看到以下的
环境变量：
变量
内容
DISPLAY
如果你正在运行图形界面环境，那么这个变量就是你显示器
的名字。通常，它是"：0”，意思是由X产生的第一个显示
器。
EDITOR
文本编辑器的名字。
SHELL
shell程序的名字。
HOME
用户家目录。
LANG
定义了字符集以及语言编码方式。
OLD_PWD
先前的工作目录。
PAGER
页输出程序的名字。这经常设置为/usr/bin/less°
137
---
## Page 139
PATH
由冒号分开的目录列表，当你输入可执行程序名后，会搜索
这个目录列表
PS1
Prompt String 1.这个定义了你的shell 提示符的内容·随
后我们可以看到，这个变量内容可以全面地定制。
PWD
当前工作目录。
TERM
终端类型名。类Unix的系统支持许多终端协议：这个变量
设置你的终端仿真器所用的协议。
TZ
指定你所在的时区。大多数类Unix的系统按照协调时间时
(UTC)来维护计算机内部的时钟，然后应用一个由这个变
量指定的偏差来显示本地时间。
USER
你的用户名
表12-1:环境变量
如果缺失了一些变量，不要担心，这些变量会因发行版本的不同而不同。
12.4如何建立shell环境？
当我们登录系统后，bash程序启动，并且会读取一系列称为启动文件的配置脚本，这些文件定
义了默认的可供所有用户共享的shell环境。然后是读取更多位于我们自己家目录中的启动文
件，这些启动文件定义了用户个人的shell环境。确切的启动顺序依赖于要运行的shell会话类
型。有两种shell会话类型：一个是登录shell会话，另一个是非登录shell会话。
登录shell会话会在其中提示用户输入用户名和密码：例如，我们启动一个虚拟控制台会
话。非登录shell会话通常当我们在GUI下启动终端会话时出现。
登录shell会读取一个或多个启动文件，正如表12一2所示：
文件
内容
/etc/profile
应用于所有用户的全局配置脚本。
/.bash_profile
用户个人的启动文件。可以用来扩展或重写全局配置脚本
中的设置。
/.bash_login
如果文件/.bash_profile没有找到，bash会尝试读取这个
脚本。
138
---
## Page 140
 /.profile
如果文件-/.bash_profile或文件/.bash_login都没有找
到，bash会试图读取这个文件。这是基于Debian发行版的
默认设置，比方说Ubuntu
表12-2:登录shell会话的启动文件
非登录shell会话会读取以下启动文件：
文件
内容
/etc/bash.bashrc
应用于所有用户的全局配置文件。
 /.bashrc
用户个人的启动文件。可以用来扩展或重写全局配置脚本
中的设置。
表12-3:非登录shell会话的启动文件
除了读取以上启动文件之外，非登录shell会话也会继承它们父进程的环境设置，通常是一
个登录shell
浏览一下你的系统，者一看系统中有哪些启动文件。记住一因为上面列出的大多数文件名
都以圆点开头（意味着它们是隐藏文件），你需要使用带“-a”选项的ls命令。
在普通用户看来，文件～/.bashrc可能是最重要的启动文件，因为它几乎总是被读取。非
登录shell默认会读取它，并且大多数登录shell的启动文件会以能读取～/.bashrc文件的方式
来书写。
12.5
一个启动文件的内容
如果我们看一下典型的.bash_profile文件（来自于CentOS4系统），它看起来像这样：
#.bash_profile
# Get the aliases and functions
if [ -f -/.bashrc ］; then
. -/.bashrc
fi
# User specific environment and startup prograns
PATH=SPATH: SHOME/bin
export PATH
139
---
## Page 141
以“#”开头的行是注释，shell不会读取它们。它们在那里是为了方便人们阅读。第一件有
趣的事情发生在第四行，伴随着以下代码：
uq :[oxqeq/- -]T
. -/ .bashrc
fi
这叫做一个if复合命令，我们将会在第五部分详细地介绍它，现在我们对它翻译一下：
If the file -/ .bashrc exists, then
read the -/.bashrc file.
我们可以看到这一小段代码就是一个登录shell得到.bashrc文件内容的方式。在我们启动
文件中，下一件有趣的事与PATH变量有关系。
输入Is后，shell不会查找整个计算机系统来找到/bin/ls（ls命令的全路径名），相反，它查找
一个目录列表，这些目录包含在PATH变量中。
PATH变量经常（但不总是，依赖于发行版）在/etc/profile启动文件中设置，通过这些代
码：
PATH=SPATH: SHOME/bin
修改PATH变量，添加目录SHOME/bin到目录列表的末尾。这是一个参数展开的实例
参数展开我们在第八章中提到过。为了说明这是怎样工作的，试试下面的例子：
os s su,og s- xoqxuoou]
[nellinuxbox -]$ echo $foo
This is scae
[ne@linuxbox -]s foo=*$foo text.*
[nedlinuxbox -]$ echo $foo
This is sone text.
140
---
## Page 142
使用这种技巧，我们可以把文本附加到一个变量值的末尾。通过添加字符串SHOME/bin
到PATH变量值的末尾，则目录$HOME/bin就添加到了命令搜索目录列表中。这意味着当
我们想要在自己的家目录下，创建一个目录来存储我们自己的私人程序时，shell已经给我们准
备好了。我们所要做的事就是把创建的目录叫做bin，赶快行动吧。
注意：很多发行版默认地提供了这个PATH设置。一些基于Debian的发行版，例如
Ubuntu，在登录的时候，会检测目录～/bin是否存在，若找到目录则把它动态地加到PATH
变量中。
最后，有下面一行代码：
这个export命令告诉shell让这个shell的子进程可以使用PATH变量的内容。
12.6修改shell环境
既然我们知道了启动文件所在的位置和它们所包含的内容，我们就可以修改它们来定制自己的
shell环境。
12.7我们应该修改哪个文件？
按照通常的规则，添加目录到你的PATH变量或者是定义额外的环境变量，要把这些更改放置
到.bash_profile文件中（或者其替代文件中，根据不同的发行版。例如，Ubuntu使用.profile
文件）。对于其它的更改，要放到.bashrc文件中。除非你是系统管理员，需要为系统中的所有
用户修改默认设置，那么则限定你只能对自己家目录下的文件进行修改。当然，有可能会更改
etc目录中的文件，比如说profile文件，而且在许多情况下，修改这些文件也是明智的，但是
现在，我们要谨慎行事。
12.8文本编辑器
为了编辑（例如，修改）shell的启动文件以及系统中大多数其它配置文件，我们使用一个叫做
光标在屏幕上编辑文字。文本编辑器不同于文字处理器之处在于它只能支持纯文本，并且经常
包含为便于写程序而设计的特性。文本编辑器是软件开发人员用来写代码，以及系统管理员用
来管理控制系统的配置文件的重要工具。
141
---
## Page 143
Linux系统有许多不同类型的文本编辑器可用：你的系统中可能已经安装了几个。为什么会
有这么多种呢？可能因为程序员喜欢编写它们，又因为程序员们会赖累地使用它们，所以程序
员编写编辑器让它们按照程序员自己的愿望工作。
文本编辑器分为两种基本类型：图形化的和基于文本的编辑器。GNOME和KDE两者都
包含一些流行的图形化编辑器。GNOME自带了一个叫做gedit的编辑器，这个编辑器通常在
GNOME菜单中称为“文本编辑器”。KDE通常自带了三种编辑器，分别是（按照复杂度递增
的顺序排列）kedit，kwrite，kate°
有许多基于文本的编辑器。你将会遇到一些流行的编辑器，它们是nanovi和emacs“
nano编辑器是一个简单易用的编辑器，用于替代随PINE邮件套件提供的pico编辑器。vi编
辑器（在大多数Linux系统中被vim替代，vim是“ViIMproved”的简写）是类Unix操作系
统的传统编辑器。vim是我们下一章节的讨论对象。emacs编辑器最初由RichardStallman写
成。它是一个庞大、多用途的，可做任何事情的编程环境。虽然emacs很容易获取，但是大多
数Linux系统很少默认安装它。
12.9使用文本编辑器
所有的文本编辑器都可以通过在命令行中输入编辑器的名字，加上你所想要编辑的文件来唤
醒。如果所输入的文件名不存在，编辑器则会假定你想要创建一个新文件。下面是一个使用
gedit 的例子：
[nedlinuxbox -]$ gedit sone_file
这条命令将会启动gedit文本编辑器，同时加载名为“some_file”的文件，如果这个文件存
在的话。
所有的图形文本编辑器很大程度上都是不需要解释的，所以我们在这里不会介绍它们。反
之，我们将集中精力在我们第一个基于文本的文本编辑器，nano。让我们启动nano，并且编辑
文件.bashrc。但是在我们这样做之前，先练习一些“安全计算”。当我们编辑一个重要的配置文
件时，首先创建一个这个文件的备份总是一个不错的主意。这样能避免我们在编辑文件时弄乱
文件·创建文件.bashrc的备份文件，这样做：
[ne@linuxbox -]$ cp .bashrc .bashrc.bak
142
---
## Page 144
和“orig”都是用来指示备份文件的流行方法。哦，记住cp命令会默默地覆盖已经存在的同名
文件。
现在我们有了一个备份文件，我们启动nano编辑器吧：
[ne@linuxbox -]$ nano .bashrc
一旦nano编辑器启动后，我们将会得到一个像下面一样的屏幕：
GNU nano 2.0.3
注意：如果你的系统中没有安装nano编辑器，你可以用一个图形化的编辑器代替。
这个屏幕由上面的标头，中间正在编辑的文件文本和下面的命令菜单组成。因为设计nano
是为了代替由电子邮件客户端提供的编辑器的，所以它相当缺乏编辑特性。在任一款编辑器中，
你应该学习的第一个命令是怎样退出程序。以nano为例，你输入Ctrl-x来退出nano。在屏幕
底层的菜单中说明了这个命令。“X”表示法意思是Ctrl-x。这是控制字符的常见表示法，许多
程序都使用它。
第二个我们需要知道的命令是怎样保存我们的劳动成果。对于nano来说是Ctrl-o。既然我
们已经获得了这些知识，接下来我们准备做些编辑工作。使用下箭头按键和/或下翻页按键，
移动鼠标到文件的最后一行，然后添加以下几行到文件.bashrc中：
unask 0002
export HISTSIZE=1000
alias 1.=′ls -d . * --color=auto′
alias 11=′ls -1 --color=auto
注意：你的发行版在这之前可能已经包含其中的一些行，出现重复的代码不会有其他影响。
下表是所添加行的意义：
文本行
含义
umask 0002
设置掩码来解决共享目录的问题。
143
---
## Page 145
qodxa
HISTCON-
使得shell的历史记录功能忽略一个命令，如果
TROL=ignoredups
相同的命令已被记录。
export HISTSIZE=1000
增加命令历史的大小，从默认的500行扩大到
1000行*
alias 1.='ls -d * --color=auto'
创建一个新命令。叫做1，这个命令会显示所有
以点开头的目录项。
alias ll'ls -1 --color=auto
创建一个叫做11的命令，这个命令会显示长格