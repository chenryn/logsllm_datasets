title:Detection of Malicious PDF Files Based on Hierarchical Document
Structure
author:Nedim Srndic and
Pavel Laskov
Detection of Malicious PDF Files Based on Hierarchical Document Structure
Nedim ˇSrndi´c and Pavel Laskov
Department of Cognitive Systems
University of T¨ubingen
T¨ubingen, Germany
{nedim.srndic, pavel.laskov}@uni-tuebingen.de
Abstract
Malicious PDF ﬁles remain a real threat, in practice, to
masses of computer users, even after several high-proﬁle
security incidents. In spite of a series of a security patches
issued by Adobe and other vendors, many users still have
vulnerable client software installed on their computers. The
expressiveness of the PDF format, furthermore, enables at-
tackers to evade detection with little effort. Apart from tra-
ditional antivirus products, which are always a step behind
attackers, few methods are known that can be deployed for
protection of end-user systems. In this paper, we propose a
highly performant static method for detection of malicious
PDF documents which, instead of analyzing JavaScript or
any other content, makes use of essential differences in the
structural properties of malicious and benign PDF ﬁles. We
demonstrate its effectiveness on a data corpus containing
about 660,000 real-world malicious and benign PDF ﬁles,
both in laboratory conditions and during a 10-week opera-
tional deployment with weekly retraining. Additionally, we
present the ﬁrst comparative evaluation of several learning
setups with regard to resistance against adversarial evasion
and show that our method is reasonably resistant to sophis-
ticated attack scenarios.
1
Introduction
Despite the recent improvements in security of the PDF
rendering software, PDF documents remain a popular at-
tack vector “for the masses”. Several large-scale attacks
have been recently reported using known PDF vulnerabil-
ities [35, 15, 29]. These attacks demonstrate a surprising
effectiveness of rather outdated attack vectors in the com-
munity of ordinary computer users. Additionally, several
novel vulnerabilities in the Adobe Reader application have
been discovered recently [13].
The existing defense mechanisms against PDF-based at-
tacks suitable for wide-scale deployment are still inadequate
for the expressive power, and hence the evasive capability
of PDF malware. Even though the majority of modern an-
tivirus products support detection of PDF-speciﬁc attacks,
the detection techniques are still based on signatures and
rigid heuristics. Hence they cannot quickly adapt to novel
attack vectors even if the latter constitute only minor modi-
ﬁcations of existing exploits.
Recent research on the detection of malicious PDF doc-
uments has been surprisingly sparse. Some early, format-
agnostic approaches for detection of malicious ﬁle content
used machine learning methods combined with byte-level
n-gram analysis [21, 32]. These methods are also appli-
cable to detection of PDF-based attacks. However, since
they were developed even before the pandemic spread of
PDF malware in 2009, they could not be evaluated on large
corpora of modern malicious PDF documents. The ma-
jority of recent detection methods are based on dynamic
analysis. Among the most popular systems of this kind
are WEPAWET1 using the sandbox JSAND [9], MALOF-
FICE [11] adapted from CWSANDBOX [38], and SHELLOS
[34].
In general, dynamic analysis introduces signiﬁcant
overhead and latency, since it inherently depends on the
execution of malicious code. This has motivated methods
based on static analysis [19] as well as the combination of
static and dynamic analysis [37]. Both of these methods
are focused on detection of malicious JavaScript content in
PDF documents, which relates them to a large body of work
on detection of drive-by-downloads; e.g., [27, 31, 10, 6].
In contrast to prior work, the method we present in this
article is intended for static detection of malicious PDF doc-
uments without a special consideration for JavaScript con-
tent. Although the vast majority of PDF-based exploits do
rely on JavaScript, there exist two major technical chal-
lenges that make JavaScript-based detection especially dif-
ﬁcult. The ﬁrst challenge is to locate JavaScript content in
a PDF ﬁle. JavaScript may be hidden deep within the logi-
cal structure of a PDF document, even beyond the locations
1http://wepawet.iseclab.org/
designated in the PDF Standard [25]. Any textual content
in a PDF document can be interpreted as JavaScript using
the eval() function or its equivalents. Hence, nothing
prevents an attacker from distributing chunks of JavaScript
code anywhere in the text and assembling them together at
runtime. The second challenge lies in the high-degree ex-
pressiveness in the JavaScript language, which provides at-
tackers with a powerful platform for code obfuscation. Al-
though some methods have been recently proposed for de-
tecting of obfuscated JavaScript [17], their practical utility
remains unclear.
As an alternative to JavaScript-based detection, we pro-
pose analyzing the structural properties of PDF documents
to discriminate between malicious and benign ﬁles. Instead
of looking for the speciﬁc malicious content, our method
evaluates documents on the basis of side-effects from mali-
cious content within their structure. This approach is based
on the intuition that, due to the complexity of the PDF for-
mat, the logical structure of PDF ﬁles conveys a signiﬁcant
amount of the documents’ semantics. Hence, we postulate
that a comprehensive analysis of structural properties would
reveal a salient structural difference between malicious and
benign PDF documents. In our main contribution, we pro-
pose a novel representation for the structure of PDF docu-
ments, denoted as structural paths, which can be used as
features for automatic processing by various data analysis
methods.
Extraction of structural paths can be efﬁciently carried
out using existing PDF parsers. Parsing the structure of
a document is an order of magnitude less complex than
the interpretation and rendering of its content. Even if the
parser itself may be vulnerable, its attack surface is much
narrower than that of an underlying rendering application.
As the vast majority of PDF-related vulnerabilities are re-
lated to JavaScript, the probability of an attack against the
parser is negligible since parsing is naturally decoupled
from JavaScript interpretation. The proposed methodology
for feature extraction can be deployed with any parser. This
reduces the opportunity for evasion techniques exploiting
the ambiguities in ﬁle processing [16]. Due to its efﬁciency,
the proposed method can be used as a light-weight built-
in detector within the respective PDF renderer, thus com-
pletely avoiding the parser’s ambiguity.
The effectiveness of the proposed method is demon-
strated on the largest-ever data corpus hitherto used in eval-
uation of document malware detectors. We have collected
over 570,000 malicious and benign PDF documents from
the popular malware portal VIRUSTOTAL and augmented
this dataset with a realistic sample of 90,000 benign PDF
documents indexed by Google. Our laboratory experiments
show that the proposed method attains the detection rate
of 99.88% at the false positive rate of 0.0001% on the mali-
cious VIRUSTOTAL and benign Google data, more than any
commercial antivirus operating at VIRUSTOTAL. The same
accuracy at the false positive rate of 0.0003% was observed
with benign VIRUSTOTAL data which is obviously skewed
towards being suspicious. In a 10-week operational deploy-
ment with weekly retraining on 440,000 malicious and be-
nign PDF ﬁles, the proposed method consistently outper-
formed the best antivirus engine deployed at VIRUSTOTAL2
in 7 weeks, scoring even in 1 week and losing in the re-
maining 2 weeks, due to bursts of novel data. These results
demonstrate an excellent detection power of the proposed
structural path features, at least for the current PDF mal-
ware observed in the real world.
Can the situation change if attackers attempt to evade
our method? Despite the fact that it is content-agnostic, the
proposed method is not trivial to evade. The main difﬁculty
for the attacker lies, again, in the complexity of the PDF
format. Even if the attacker knows which features are re-
sponsible for successful detection, he cannot easily remove
them, as this may break the attack functionality. Further,
addition of benign content, which is always an option for
the attacker, may not always lead to a successful evasion.
We have experimentally evaluated several potential feature
addition attacks and observed that some classiﬁcation algo-
rithms deployed in our system are remarkably robust against
this kind of attacks (less that 0.025% success rate).
In summary, the paper offers the following contributions:
1. A novel set of features is deﬁned which enable one
to effectively capture the structural difference between
benign and malicious PDF ﬁles.
2. Using the proposed structural features, a classiﬁer
of PDF documents is presented whose detection ac-
curacy, estimated on about 220,000 PDF documents
under laboratory conditions, surpasses the accuracy
of 43 antivirus engines deployed at VIRUSTOTAL at
the time.
3. A 10-week operational deployment of the classiﬁer
with weekly retraining on 440,000 malicious and be-
nign PDF ﬁles demonstrated the practical applicability
of the proposed method under real-world conditions.
4. The new classiﬁer does not rely on the analysis of
JavaScript code and hence is not affected from poten-
tial novel techniques for hiding JavaScript in PDF doc-
uments.
5. The throughput of the classiﬁer is evaluated and shown
to be comparable to state-of-the-art static detection
techniques.
6. The robustness of the proposed method against a num-
ber of evasion techniques is experimentally veriﬁed.
2It should be noted that only command-line versions of antivirus en-
gines are deployed at VIRUSTOTAL.
Presentation of our methods begins with the review of re-
lated work in Section 2, which provides the motivation for
the new kind of features and detection techniques investi-
gated in the paper. The details of the PDF format necessary
for understanding of technical aspects of our method are
summarized in Section 3. The system architecture and the
deployed algorithms are presented in Section 4. Our data
corpora, the results of experiments aimed at evaluation of
the detection accuracy, and the throughput of our system
are reported in Section 5. Potential evasion techniques are
analyzed and experimentally veriﬁed in Section 6. We end
up with the discussion of our ﬁndings in Section 7 and con-
clusions in Section 8.
2 Related Work
Previous work on the detection of document malware
shares many common ideas with the methods for detecting
drive-by-downloads. This is not surprising, since the ex-
ploitation techniques underlying both kinds of malware are
the same. Existing methods can be classiﬁed, with some
degree of overlap, into dynamic analysis methods, in which
documents are opened in a specially instrumented environ-
ment, and static methods, in which detection is carried out
without malware execution.
Several key ideas have fueled the development of
dynamic analysis methods.
Early work followed the
emulation-based approach in which a suspicious payload
was executed using abstract payload execution [36] or soft-
ware emulation [1, 26]. However, software emulation does
not have full coverage of the instruction set and hence can
be detected and evaded. To overcome this problem and im-
prove scalability, the recently proposed system SHELLOS
uses hardware virtualization instead of emulation for con-
trolled execution of shellcode [34].
Implemented as an
operating system kernel, SHELLOS is able to effectively
detect shellcode in any buffer allocated by an application.
However, this effectiveness has its price. While SHELLOS
performs with outstanding bandwidth in detecting network-
level attacks, its application to document malware suffers
from high latency (on the order of seconds). Such latency
is due to the fact that detection is carried out at the level of
memory buffers which must be allocated by an application
before they can be analyzed.
Another group of dynamic analysis methods has fo-
cused on detection of malicious behavior during execution
of JavaScript. JSAND uses 10 carefully designed heuristic
features to train models of benign JavaScript and detect at-
tacks as large deviations from these models [9]. A similar
approach has been successfully applied for detection of Ac-
tionScript 3 malware [24]. CUJO is built on top of a special-
ized JavaScript sandbox and automatically learns models of
sequences of events affecting the state of the JavaScript in-
terpreter [31]. JavaScript-speciﬁc dynamic analysis meth-
ods improve on the performance of the methods focused on
shellcode detection, bringing it in the range of hundreds of
milliseconds per ﬁle, while maintaining high detection ac-
curacy and an extremely low false positive rate.
Early static methods based on n-gram analysis [21, 32]
have never been evaluated on modern PDF malware. Since
they do not address some essential properties of the PDF
format, such as encoding, compression and encryption, they
can be easily evaded by modern PDF malware using tech-
niques similar to those used against conventional signature-
based antivirus systems. PJSCAN was the ﬁrst method that
demonstrated feasibility of anomaly-based static detection
of PDF malware focused on JavaScript content [19]. For
the sake of efﬁciency, the JavaScript extractor of PJSCAN
only searches for locations where the presence of JavaScript
is prescribed by the PDF Standard. Unfortunately, this ex-
traction strategy can be defeated by placing JavaScript code
into an arbitrary location accessible via the PDF JavaScript
API and fetching it with an eval()-like function call. An-
other recently proposed system, MALWARE SLAYER [23],
is based on the pattern recognition methods applied to tex-
tual keywords extracted from PDF documents using the
PDFID tool. It exhibits excellent detection and false alarm
rates on real PDF data but is limited to the extraction func-
tionality of PDFID and can handle neither multiple revision
numbers nor objects hidden in object streams. PDFRATE
is a recent learning-based, static PDF classiﬁer operating
on simple PDF metadata and byte-level ﬁle structure evalu-
ated on a large dataset of PDF ﬁles with excellent classiﬁca-
tion performance [33]. However, it does not extract object
streams, a feature that could be used to hide features from
the detector.
Another two contributions must be mentioned that com-
bine static and dynamic analysis techniques. MDSCAN
[37] employs static analysis of the PDF ﬁle in order to
extract all chunks of JavaScript code that can serve as an
entry point to the JavaScript execution. To this end, a
special-purpose parser was developed for MDSCAN, which
attempts to extract additional information from a ﬁle includ-
ing objects omitted from a cross-reference table as well as
potentially malformed objects. The extracted scripts are ex-
ecuted in a JavaScript engine which emulates the engine of
Acrobat Reader. During the controlled execution, all mem-
ory buffers are checked using a tool for shellcode detection
based on binary emulation (NEMU). In ZOZZLE [10], the
roles of the static and the dynamic components are reversed.
The dynamic part of ZOZZLE extracts parts of JavaScript
from the JavaScript engine of Internet Explorer before their
execution, which naturally unfolds JavaScript obfuscation.
The static part of ZOZZLE uses Bayesian classiﬁcation built
on top of the syntactic analysis of detected JavaScript code.
The comparison of related work shows a clear trade-
off exhibited in the up-to-date static and dynamic systems
for document malware detection. While dynamic systems
demonstrate excellent detection accuracy and low false pos-
itive rates, these advantage come at the cost of latency, per-
formance overhead and the need for specially instrumented
environments. The new method proposed in the paper at-
tempts to bridge this gap from the static side, by boosting
the detection performance while retaining the simplicity of
design and computational efﬁciency typical for static meth-
ods. To achieve this goal, we develop the methodology for
a comprehensive static analysis of PDF documents using an
off-the-shelf PDF parser (POPPLER). Furthermore, we pay
a special attention to potential evasion strategies and exper-
imentally evaluate the robustness of the proposed method to
selected attack strategies.
Before presenting the design and the evaluation of our
system, we review the main features of the PDF format and
document structure which are relevant for understanding the
technical aspects of our method.
3 The PDF Document Structure
Portable Document Format (PDF) is an open standard
published as ISO 32000-1:2008 [25] and referred to as the
PDF Reference hereinafter.
The syntax of PDF comprises the four main elements:
• Objects. These are the basic building blocks in PDF.
• File structure. It speciﬁes how objects are laid out and
modiﬁed in a PDF ﬁle.
• Document structure. It determines how objects are
logically organized to represent the contents of a PDF