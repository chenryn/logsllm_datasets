# Detection of Malicious PDF Files Based on Hierarchical Document Structure

**Authors:**
Nedim Srndić and Pavel Laskov  
Department of Cognitive Systems, University of Tübingen, Tübingen, Germany  
{nedim.srndic, pavel.laskov}@uni-tuebingen.de

## Abstract
Malicious PDF files continue to pose a significant threat to computer users, despite numerous high-profile security incidents and the release of multiple security patches by Adobe and other vendors. Many users still have vulnerable software installed, and the expressive nature of the PDF format allows attackers to evade detection with minimal effort. Traditional antivirus products often lag behind attackers, and few effective methods exist for protecting end-user systems. In this paper, we introduce a highly performant static method for detecting malicious PDF documents. This method leverages essential differences in the structural properties of malicious and benign PDF files, rather than analyzing JavaScript or other content. We demonstrate its effectiveness using a dataset of approximately 660,000 real-world malicious and benign PDF files, both in laboratory settings and during a 10-week operational deployment with weekly retraining. Additionally, we provide the first comparative evaluation of several learning setups regarding their resistance to adversarial evasion, showing that our method is reasonably resistant to sophisticated attack scenarios.

## 1. Introduction
Despite recent improvements in the security of PDF rendering software, PDF documents remain a popular attack vector. Several large-scale attacks have been reported using known PDF vulnerabilities [35, 15, 29], highlighting the continued effectiveness of outdated attack vectors among ordinary computer users. Moreover, new vulnerabilities in Adobe Reader have recently been discovered [13].

Existing defense mechanisms against PDF-based attacks are inadequate, given the expressive power and evasive capabilities of PDF malware. Although most modern antivirus products support the detection of PDF-specific attacks, their techniques are based on signatures and rigid heuristics, making it difficult to adapt quickly to novel attack vectors, even if they are minor modifications of existing exploits.

Research on the detection of malicious PDF documents has been limited. Early, format-agnostic approaches used machine learning combined with byte-level n-gram analysis [21, 32]. These methods, developed before the widespread use of PDF malware in 2009, were not evaluated on large corpora of modern malicious PDFs. Most recent detection methods rely on dynamic analysis, such as WEPAWET [9], MALOFFICE [11], and SHELLOS [34].

Dynamic analysis, while effective, introduces significant overhead and latency due to the need to execute malicious code. This has led to the development of static analysis methods [19] and hybrid approaches [37]. However, these methods focus on detecting malicious JavaScript content, which can be challenging due to the complexity and expressiveness of JavaScript.

In contrast, our proposed method is designed for static detection of malicious PDF documents without special consideration for JavaScript content. While most PDF-based exploits use JavaScript, locating and analyzing it within a PDF file is technically challenging. JavaScript can be hidden anywhere in the document and obfuscated, making detection difficult.

We propose analyzing the structural properties of PDF documents to distinguish between malicious and benign files. The logical structure of PDF files conveys significant semantic information, and we hypothesize that a comprehensive analysis of these properties will reveal notable differences between malicious and benign documents. Our main contribution is a novel representation of PDF document structure, called "structural paths," which can be used as features for automatic processing by various data analysis methods.

## 2. Related Work
Previous work on detecting document malware shares many common ideas with methods for detecting drive-by-downloads, as the underlying exploitation techniques are similar. Existing methods can be broadly categorized into dynamic analysis, where documents are opened in a controlled environment, and static analysis, where detection is performed without executing the malware.

### Dynamic Analysis
Early dynamic analysis methods used emulation-based approaches, such as abstract payload execution [36] and software emulation [1, 26]. However, these methods can be detected and evaded. SHELLOS [34] uses hardware virtualization to improve scalability and detect shellcode, but it suffers from high latency when applied to document malware.

Other dynamic methods focus on detecting malicious behavior during JavaScript execution. JSAND [9] uses heuristic features to train models of benign JavaScript and detect deviations. CUJO [31] builds on a specialized JavaScript sandbox to learn models of event sequences. These methods offer good performance and low false positive rates.

### Static Analysis
Early static methods, such as n-gram analysis [21, 32], have not been evaluated on modern PDF malware and can be easily evaded. PJSCAN [19] was the first to demonstrate the feasibility of anomaly-based static detection of PDF malware, but it can be defeated by placing JavaScript in arbitrary locations. MALWARE SLAYER [23] uses pattern recognition on textual keywords extracted from PDFs, but it is limited by the extraction functionality of PDFID. PDFRATE [33] is a recent static classifier that operates on simple PDF metadata and byte-level file structure, but it does not extract object streams.

### Hybrid Approaches
MDSCAN [37] combines static and dynamic analysis by extracting JavaScript code and executing it in a controlled environment. ZOZZLE [10] reverses the roles, using dynamic analysis to extract and unfold JavaScript obfuscation, followed by static Bayesian classification.

The comparison of related work shows a clear trade-off between dynamic and static systems. While dynamic systems offer excellent detection accuracy and low false positive rates, they come with high latency and performance overhead. Our proposed method aims to bridge this gap by providing high detection performance with the simplicity and computational efficiency of static methods.

## 3. The PDF Document Structure
Portable Document Format (PDF) is an open standard published as ISO 32000-1:2008 [25]. The syntax of PDF includes four main elements:

1. **Objects**: The basic building blocks of PDF.
2. **File Structure**: Specifies how objects are laid out and modified in a PDF file.
3. **Document Structure**: Determines how objects are logically organized to represent the contents of a PDF.
4. **Logical Structure**: Describes the hierarchical organization of the document's content.

Understanding these elements is crucial for comprehending the technical aspects of our method.