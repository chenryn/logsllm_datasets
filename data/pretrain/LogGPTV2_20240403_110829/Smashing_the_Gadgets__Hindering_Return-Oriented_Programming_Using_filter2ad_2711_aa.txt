title:Smashing the Gadgets: Hindering Return-Oriented Programming Using
In-place Code Randomization
author:Vasilis Pappas and
Michalis Polychronakis and
Angelos D. Keromytis
2012 IEEE Symposium on Security and Privacy
Smashing the Gadgets: Hindering Return-Oriented
Programming Using In-Place Code Randomization
Vasilis Pappas, Michalis Polychronakis, and Angelos D. Keromytis
Columbia University
{vpappas,mikepo,angelos}@cs.columbia.edu
Abstract—The wide adoption of non-executable page protec-
tions in recent versions of popular operating systems has given
rise to attacks that employ return-oriented programming (ROP)
to achieve arbitrary code execution without the injection of
any code. Existing defenses against ROP exploits either require
source code or symbolic debugging information, or impose a
signiﬁcant runtime overhead, which limits their applicability for
the protection of third-party applications.
In this paper we present
in-place code randomization, a
practical mitigation technique against ROP attacks that can
be applied directly on third-party software. Our method uses
various narrow-scope code transformations that can be applied
statically, without changing the location of basic blocks, allowing
the safe randomization of stripped binaries even with partial
disassembly coverage. These transformations effectively eliminate
about 10%, and probabilistically break about 80% of the useful
instruction sequences found in a large set of PE ﬁles. Since no
additional code is inserted, in-place code randomization does
not incur any measurable runtime overhead, enabling it to be
easily used in tandem with existing exploit mitigations such
as address space layout randomization. Our evaluation using
publicly available ROP exploits and two ROP code generation
toolkits demonstrates that our technique prevents the exploitation
of the tested vulnerable Windows 7 applications, including Adobe
Reader, as well as the automated construction of alternative ROP
payloads that aim to circumvent in-place code randomization
using solely any remaining unaffected instruction sequences.
I. INTRODUCTION
Attack prevention technologies based on the No eXecute
(NX) memory page protection bit, which prevent the execution
of malicious code that has been injected into a process, are now
supported by most recent CPUs and operating systems [1].
The wide adoption of these protection mechanisms has given
rise to a new exploitation technique, widely known as return-
oriented programming (ROP) [2], which allows an attacker to
circumvent non-executable page protections without injecting
any code. Using return-oriented programming, the attacker
can link together small fragments of code, known as gadgets,
that already exist
in the process image of the vulnerable
application. Each gadget ends with an indirect control transfer
instruction, which transfers control to the next gadget ac-
cording to a sequence of gadget addresses injected on the
stack or some other memory area. In essence,
instead of
injecting binary code, the attacker injects just data, which
include the addresses of the gadgets to be executed, along
with any required data arguments.
Several research works have demonstrated the great poten-
tial of this technique for bypassing defenses such as read-
© 2012, Vasilis Pappas. Under license to IEEE.
DOI 10.1109/SP.2012.41
601
only memory [3], kernel code integrity protections [4], and
non-executable memory implementations in mobile devices [5]
and operating systems [6]–[9]. Consequently, it was only a
matter of time for ROP to be employed in real-world attacks.
Recent exploits against popular applications use ROP code
to bypass exploit mitigations even in the latest OS versions,
including Windows 7 SP1. ROP exploits are included in the
most common exploit packs [10], [11], and are actively used
in the wild for mounting drive-by download attacks.
Attackers are able to a priori pick the right code pieces
because parts of the code image of the vulnerable application
remain static across different
installations. Address space
layout randomization (ASLR) [1] is meant to prevent this kind
of code reuse by randomizing the locations of the executable
segments of a running process. However, in both Linux and
Windows, parts of the address space do not change due to
executables with ﬁxed load addresses [12], or shared libraries
incompatible with ASLR [6]. Furthermore, in some exploits,
the base address of a DLL can be either calculated dynamically
through a leaked pointer [9], [13], or brute-forced [14].
Other defenses against code-reuse attacks complementary to
ASLR include compiler extensions [15], [16], code randomiza-
tion [17]–[19], control-ﬂow integrity [20], and runtime solu-
tions [21]–[23]. In practice, though, most of these approaches
are almost never applied for the protection of the COTS
software currently targeted by ROP attacks, either due to the
lack of source code or debugging information, or due to their
increased overhead. In particular, from the above techniques,
those that operate directly on compiled binaries, e.g., by
permuting the order of functions [18], [19] or through binary
instrumentation [20], require precise and complete extraction
of all code and data in the executable sections of the binary.
This is possible only if the corresponding symbolic debugging
information is available, which however is typically stripped
from production binaries. On the other hand, techniques that
do work on stripped binary executables using dynamic binary
instrumentation [21]–[23], incur a signiﬁcant runtime overhead
that limits their adoption. At the same time, instruction set
randomization (ISR) [24], [25] cannot prevent code-reuse
attacks, and current implementations also rely on heavyweight
runtime instrumentation or code emulation frameworks.
Starting with the goal of a practical mitigation against
the recent spate of ROP attacks, in this paper we present
a novel code randomization method that can harden third-
party applications against return-oriented programming. Our
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:51 UTC from IEEE Xplore.  Restrictions apply. 
approach is based on narrow-scope modiﬁcations in the code
segments of executables using an array of code transformation
techniques, to which we collectively refer as in-place code
randomization. These transformations are applied statically, in
a conservative manner, and modify only the code that can be
safely extracted from compiled binaries, without relying on
symbolic debugging information. By preserving the length of
instructions and basic blocks, these modiﬁcations do not break
the semantics of the code, and enable the randomization of
stripped binaries even without complete disassembly coverage.
The goal of this randomization process is to eliminate or
probabilistically modify as many of the gadgets that are
available in the address space of a vulnerable process as
possible. Since ROP code relies on the correct execution of all
chained gadgets, altering the outcome of even a few of them
will likely render the ROP code ineffective.
Our evaluation using real-world ROP exploits against
widely used applications, such as Adobe Reader, shows the
effectiveness and practicality of our approach, as in all cases
the randomized versions of the applications rendered the ex-
ploits non-functional. When aiming to circumvent the applied
code randomization, Q [26] and Mona [27], two automated
ROP payload construction tools, were unable to generate
functional exploit code by relying solely on any remaining
non-randomized gadgets.
Although quite effective as a standalone mitigation, in-place
code randomization is not meant to be a complete prevention
solution, as it offers probabilistic protection and thus cannot
deliver any protection guarantees. However, it can be applied
in tandem with existing randomization techniques to increase
process diversiﬁcation. This is facilitated by the practically
zero overhead of the applied transformations, and the ease with
which they can be applied on existing third-party executables.
Our work makes the following main contributions:
• We present in-place code randomization, a novel and
practical approach for hardening third-party software
against ROP attacks. We describe in detail various
narrow-scope code transformations that do not change
the semantics of existing code, and which can be safely
applied on compiled binaries without symbolic debugging
information.
• We have implemented in-place code randomization for
x86 PE executables, and have experimentally veriﬁed the
safety of the applied code transformations with extensive
runtime code coverage tests using third-party executables.
• We provide a detailed analysis of how in-place code
randomization affects available gadgets using a large set
of 5,235 PE ﬁles. On average, the applied transformations
effectively eliminate about 10%, and probabilistically
break about 80% of the gadgets in the tested ﬁles.
• We evaluate our approach using publicly available ROP
exploits and generic ROP payloads, as well as two ROP
payload construction toolkits. In all cases, the randomized
versions of the executables break the malicious ROP
code, and prevent the automated construction of alter-
native payloads using the remaining unaffected gadgets.
II. BACKGROUND
The introduction of non-executable memory page protec-
tions led to the development of the return-to-libc exploitation
technique [28]. Using this method, a memory corruption
vulnerability can be exploited by transferring control to code
that already exists in the address space of the vulnerable
process. By jumping to the beginning of a library function
such as system(), the attacker can for example spawn a
shell without the need to inject any code. Frequently though,
especially for remote exploitation, calling a single function is
not enough. In these cases, multiple return-to-libc calls can
be “chained” together by ﬁrst returning to a short instruction
sequence such as pop reg; pop reg; ret; [29], [30].
When arguments need to be passed through registers, a few
short instruction sequences ending with a ret instruction can
be chained directly to set the proper registers with the desired
arguments, before calling the library function [31].
In the above code-reuse techniques,
the executed code
consists of one or a few short instruction sequences followed
by a large block of code belonging to a library function. Hovav
Shacham demonstrated that using only a carefully selected set
of short instruction sequences ending with a ret instruction,
known as gadgets, it is possible to achieve arbitrary computa-
tion, obviating the need for calling library functions [2]. This
powerful technique, dubbed return-oriented programming, in
essence gives the attacker the same level of ﬂexibility offered
by arbitrary code injection without injecting any code at all—
the injected payload comprises just a sequence of gadget
addresses intermixed with any necessary data arguments.
In a typical ROP exploit, the attacker needs to control
both the program counter and the stack pointer: the former
for executing the ﬁrst gadget, and the latter for allowing
its ret instruction to transfer control to subsequent gadgets.
Depending on the vulnerability, if the ROP payload is injected
in a memory area other than the stack, then the stack pointer
must ﬁrst be adjusted to the beginning of the payload through
a stack pivot [6], [32]. In a follow up work [33], Checkoway et
al. demonstrated that the gadgets used in a ROP exploit need
not necessarily end with a ret instruction, but with any other
indirect control transfer instruction.
The ROP code used in recent exploits against Windows
applications is mostly based on gadgets ending with ret
instructions, which conveniently manipulate both the program
counter and the stack pointer, although a couple of gadgets
ending with call or jmp are also used for calling library
functions. In all publicly available Windows exploits so far,
attackers do not have to rely on a fully ROP-based implemen-
tation for the whole malicious code that needs to be executed.
Instead, ROP code is used only as a ﬁrst stage for bypassing
DEP [1]. Typically, once control ﬂow has been hijacked, the
ROP code allocates a memory area with write and execute
permissions by calling a library function like VirtualAlloc,
copies into it some plain shellcode included in the attack
vector, and ﬁnally jumps to the copied shellcode which now
has execute permission [32].
602
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:51 UTC from IEEE Xplore.  Restrictions apply. 
III. APPROACH
Our approach is based on the randomization of the code
sections of binary executable ﬁles that are part of third-party
applications, using an array of binary code transformation
techniques. The objective of this randomization process is to
break the code semantics of the gadgets that are present in the
executable memory segments of a running process, without
affecting the semantics of the actual program code.
The execution of a gadget has a certain set of consequences
to the CPU and memory state of the exploited process. The at-
tacker chooses how to link the different gadgets together based
on which registers, ﬂags, or memory locations each gadget
modiﬁes, and in what way. Consequently, the execution of a
subsequent gadget depends on the outcome of all previously
executed gadgets. Even if the execution of a single gadget has
a different outcome than the one anticipated by the attacker,
then this will affect the execution of all subsequent gadgets,
and it is likely that the logic of the malicious return-oriented
code will be severely impacted.
A. Why In-Place?
The concept of software diversiﬁcation [34] is the basis
for a wide range of protections against the exploitation of
memory corruption vulnerabilities. Besides address space lay-
out randomization [1], many techniques focus on the internal
randomization of the code segments of executable, and can
be combined with ASLR to increase process diversity [17].
Metamorphic transformations [35] can shift gadgets from their
original offsets and alter many of their instructions, rendering
them unusable. Another simpler and probably more effective
approach is to rearrange existing blocks of code either at the
function level [18], [19], [36], [37], or with ﬁner granularity,
at the basic block level [38], [39]. If all blocks of code are
reordered so that no one resides at its original location, then
all the offsets of the gadgets that the attacker would assume
to be present in the code sections of the process will now
correspond to completely different code.
These transformations require a precise view of all the code
and data objects contained in the executable sections of a PE
ﬁle, including their cross-references, as existing code needs to
be shifted or moved. Due to computed jumps and intermixed
data [40], complete disassembly coverage is possible only
if the binary contains relocation and symbolic debugging
information (e.g., PDB ﬁles) [19], [41], [42]. Unfortunately,
debugging information is typically stripped from release builds
for compactness and intellectual property protection.
For Windows software, in particular, PE ﬁles (both DLL
and EXE) usually do retain relocation information even if
no debugging information has been retained [43]. The loader
needs this information in case a DLL must be loaded at an
address other than its preferred base address, e.g., because
another library has already been mapped to that location.
or for ASLR. In contrast to Linux shared libraries and PIC
executables, which contain position-independent code, Win-
dows binaries contain absolute addresses, e.g., as immediate
instruction operands or initialized data pointers, that are valid
only if the executable has been loaded at its preferred base
address. The .reloc section of PE ﬁles contains a list of
offsets relatively to each PE section that correspond to all
absolute addresses at which a delta value needs to be added
in case the actual load address is different [44].
Relocation information alone, however, does not sufﬁce for
extracting a complete view of the code within the executable
sections of a PE ﬁle [38], [41]. Without the symbolic debug-
ging information contained in PDB ﬁles, although the location
of objects that are reached only via indirect jumps can be
extracted from relocation information, their actual type—code
or data—still remains unknown. In some cases, the actual
type of these objects could be inferred using heuristics based
on constant propagation, but such methods are usually prone
to misidentiﬁcations of data as code and vice versa. Even a
slight shift or size increase of a single object within a PE
section will incur cascading shifts to its following objects.
Typically, an unidentiﬁed object that actually contains code
will include PC-relative branches to other code objects. In the
absence of the debugging information contained in PDB ﬁles,
moving such an unidentiﬁed code block (or any of its relatively
referenced objects) without ﬁxing the displacements of all its
relative branch instructions that reference other objects, will
result to incorrect code.
Given the above constraints, we choose to use only binary
code transformations that do not alter the size and location
of code and data objects within the executable, allowing
the randomization of third-party PE ﬁles without symbolic
debugging information. Although this restriction does not
allow us to apply extensive code transformations like basic
block reordering or metamorphism, we can still achieve partial
code randomization using narrow-scope modiﬁcations that
can be safely applied even without complete disassembly
coverage. This can be achieved through slight, in-place code
modiﬁcations to the correctly identiﬁed parts of the code, that
do not change the overall structure of basic blocks or functions,
but which are enough to alter the outcome of short instruction
sequences that can be used as gadgets.
B. Code Extraction and Modiﬁcation
Although completely accurate disassembly of stripped x86
binaries is not possible, state-of-the-art disassemblers achieve
decent coverage for code generated by the most commonly
used compilers, using a combination of different disassem-
bly algorithms [40], the identiﬁcation of speciﬁc code con-
structs [45], and simple data ﬂow analysis [46]. For our
prototype implementation, we use IDA Pro [47] to extract the
code and identify the functions of PE executables. IDA Pro is
effective in the identiﬁcation of function boundaries, even for
functions with non-contiguous code and extensive use of basic
block sharing [48], and also takes advantage of the relocation
information present in Windows DLLs.
Typically, however, without the symbolic information of
PDB ﬁles, a fraction of the functions in a PE executable
are not identiﬁed, and parts of code remain undiscovered.
Our code transformations are applied conservatively, only
603
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:51 UTC from IEEE Xplore.  Restrictions apply. 
on parts of the code for which we can be conﬁdent that
have been accurately disassembled. For instance, IDA Pro
speculatively disassembles code blocks that are reached only
through computed jumps, taking advantage of the relocation
information contained in PE ﬁles. However, we do not enable
such heuristic code extraction methods in order to avoid
any disastrous modiﬁcations due to potentially misidentiﬁed
code. In practice, for the code generated by most compilers,
relocation information also ensures that the correctly identiﬁed
basic blocks have no entry point other than their ﬁrst instruc-
tion. Similarly, some transformations that rely on the proper
identiﬁcation of functions are applied only on the code of
correctly recognized functions. Our implementation is separate
from the actual code extraction framework used, which means
that IDA Pro can be replaced or assisted by alternative
code extraction approaches [41], [49], [50], providing better
disassembly coverage.
After code extraction, disassembled instructions are ﬁrst
converted to our own internal representation, which holds ad-
ditional information such as any implicitly used registers, and
the registers and ﬂags read or written by the instruction. For
correctness, we also track the use of general purpose registers
even in ﬂoating point, MMX, and SSE instructions. Although
these type of instructions have their own set of registers, they
do use general purpose registers for memory references (e.g.,
as the fmul instruction in Fig. 1). We then proceed and apply
the in-place code transformations discussed in the following
section. These are applied only on the parts of the executable
segments that contain (intended or unintended [2]) instruction
sequences that can be used as gadgets. As a result of some
of the transformations, instructions may be moved from their
original locations within the same basic block. In these cases,
for instructions that contain an absolute address in some
of their operands, the corresponding entries in the .reloc
sections of the randomized PE ﬁle are updated with the new
offsets where these absolute addresses are now located.
Our prototype implementation processes each PE ﬁle indi-
vidually, and generates multiple randomized copies that can
then replace the original. Given the complexity of the analysis
required for generating a set of randomized instances of an
input ﬁle (in the order of a few minutes on average for the
PEs used in our tests), this allows the off-line generation of a
pool of randomized PE ﬁles for a given application. Note that
for most of the tested Windows applications, only some of the
DLLs need to be randomized, as the rest are usually ASLR-
enabled (although they can also be randomized for increased
protection). In a production deployment, a system service or a
modiﬁed loader can then pick a different randomized version
of the required PEs each time the application is launched,
following the same way of operation as tools like EMET [51].
IV. IN-PLACE CODE TRANSFORMATIONS
register reassignment are also used by compilers and poly-
morphic code engines for code optimization [52] and obfus-
cation [35], applying them at the binary level—without having
access to the higher-level structural and semantic information
available in these settings—poses signiﬁcant challenges.
A. Atomic Instruction Substitution
One of the basic concepts of code obfuscation and metamor-
phism [35] is that the exact same computation can be achieved
using a countless number of different instruction combina-
tions. When applied for code randomization, substituting the
instructions of a gadget with a functionally-equivalent—but
different—sequence of instructions would not affect any ROP
code that uses that gadget, since its outcome would be the
same. However, by modifying the instructions of the original
program code, this transformation in essence modiﬁes certain
bytes in the code image of the program, and consequently,
can drastically alter the structure of non-intended instruction
sequences that overlap with the substituted instructions.
Many of the gadgets used in ROP code consist of unaligned
instructions that have not been emitted by the compiler, but
which happen to be present in the code image of the process
due to the density and variable-length nature of the x86
instruction set. In the example of Fig. 1(a), the actual code
generated by the compiler consists of the instructions mov;
cmp; lea; starting at byte B0.1 However, when disassem-
bling from the next byte, a useful non-intended gadget ending
with ret is found.
Compiled code is highly optimized, and thus the replace-
ment of even a single instruction in the original program code
usually requires either a longer instruction, or a combination
of more than one instruction, for achieving the same purpose.
Given that our aim is to randomize the code of stripped
binaries, even a slight increase in the size of a basic block is
not possible, which makes the most commonly used instruction
substitution techniques unsuitable for our purpose.
In certain cases though, it is possible to replace an instruc-
tion with a single, functionally-equivalent instruction of the
same length, thanks to the ﬂexibility offered by the extensive
x86 instruction set. Besides obvious candidates based on
replacing addition with negative subtraction and inversely,
there are also some instructions that come in different forms,
with different opcodes, depending on the supported operand
types. For example, add r/m32,r32 stores the result of the
addition in a register or memory operand (r/m32), while add
r32,r/m32 stores the result in a register (r32). Although these
two forms have different opcodes, the two instructions are
equivalent when both operands happen to be registers. Many
arithmetic and logical instructions have such dual equivalent
forms, while in some cases there can be up to ﬁve equivalent
instructions (e.g., test r/m8,r8, or r/m8,r8, or r8,
r/m8, and r/m8,r8, and r8,r/m8, affect the ﬂags of the
EFLAGS register in the same way when both operands are
In this section we present in detail the different code trans-
formations used for in-place code randomization. Although
some of the transformations such as instruction reordering and
1The code of all examples throughout the paper comes from icucnv36.dll,
included in Adobe Reader v9.3.4. This DLL was used for the ROP code of
a DEP-bypass exploit for CVE-2010-2883 [53] (see Table II).
604
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:51 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1. Example of atomic instruction substitution. The equivalent, but different form of the cmp instruction does not change the original program code
(a), but renders the non-intended gadget unusable (b).
the same register). In our prototype implementation we use
the sets of equivalent instructions used in Hydan [54], a tool