Open Source Workflow
Management Systems: A Concise
Survey
Ricardo Garcês, Tony de Jesus, Jorge Cardoso*
and Pedro Valente
University of Madeira, Portugal
*SAP Research, Germany
*University of Coimbra, Portugal
ABSTRACT
The use of open source Workflow Management Systems (WfMS) is appealing for
organizations due to its low or inexistent cost and its customization capabilities.
In this chapter we analyze ten different open source WfMS using a framework
that offers decision makers a starting point for selecting a workflow solution. The
framework is to be used as a basis for characterizing WfMS based on a set of 22
parameters.
INTRODUCTION
Nowadays, many organizations in the commercial, government and non-profit
sectors benefit from the use of open source software [1]. Open source software is
having a growing impact on the software industry by becoming an important
competitor to commercial software [2]. According to [3], the number of suppliers
offering workflow management software is estimated to be two hundred. The se-
lection of an open source WfMS solution may be quite a difficult and complex un-
dertaking. A sound selection requires a complete analysis of the most popular
solutions available. Otherwise, it may lead to the choice of an inadequate work-
flow product that will not support efficiently the business processes of an organi-
zation.
According to [4], the motivations for using and developing open source software
are mixed, ranging from philosophical and ethical reasons to pure practical is-
sues. Usually, the first perceived advantage of open source models is the fact that
the software is made available gratis or at a low cost. But this characteristic is not
exclusive to open source software [5]. What really distinguishes open source soft-
ware from software available without a fee is the access to the source code and
the right to modify it, the right to redistribute the modifications and to improve
the code. Each organization has its particularities, so the characteristics of open
source solutions allow the customization of open source workflow systems ac-
cording to the functioning and the needs of organizations.
This chapter offers an overview and comparison of ten popular open source WfMS
using a comprehensive framework for decision makers, providing a starting point
to the complex process of selecting an open source WfMS. In fact, this document
333
OPEN SOURCE WORKFLOW MANAGEMENT SYSTEMS: A CONCISE SURVEY
is intended to enable managers to better guide, justify and explain their decisions
and choices.
WFMS COMPARISON FRAMEWORK
Several approaches have been proposed to compare information systems and in-
formation technologies. They have been provided by prestigious consulting com-
panies such as Andersen Worldwide, Ernst & Young, Deloitte & Touche, Coopers
& Lybrand, KPMG and Price Waterhouse.
Since workflow technologies have specific characteristics, existing approaches do
not address many important perspectives. Therefore, we propose a new and more
complete approach. On the one hand, we want to determine what functionalities
are provided by WfMS. On the other hand, we also want to evaluate the installa-
tion and usage of WfMS, as well as the definition of workflow processes. For this
reason, and as showed in Table 1, we will focus our attention on the compliance
of WfMS with the WfMC reference model [6] and on two functional perspectives:
runtime and design time.
Parameters
Process Definition Application (Interface 1)
Workflow Client Application (Interface 2)
WfMC Reference Model Invoked Applications (Interface 3)
Other Workflow Enactment Services (Interface 4)
Administration and Monitoring tools (Interface 5)
Research Scope
Installation Time
Documentation
Platform Independent
Easiness of Installation and Utilization
Runtime
Web Based
Other Software Required
Functional Middleware Platform
Perspectives DBMS Integration
Transactions Support
Process Definition Time
Documentation
Design Easiness of the Process Definition
Time Web Based
Organizational Perspective
Workflow Language
Table 1: Overview of the framework developed in our study
334
OPEN SOURCE WORKFLOW MANAGEMENT SYSTEMS: A CONCISE SURVEY
WfMC reference model
One of the many principles used by the WfMC is the so-called workflow reference
model [6]. This model is a general description of the architecture of a workflow
management system, in which the main components and the associated inter-
faces are described. In the workflow reference model, the tools for constructing
and designing workflows are known as process definition applications (Interface
1). Work items are offered to the employees through workflow client applications
(Interface 2). By selecting a work item, an employee can begin performing a spe-
cific task for a specific case. When carrying out a task it may be necessary to start
an application. All the application software that can be started from the workflow
system are known as invoked applications (Interface 3). According to the WfMC
reference model, workflow systems may also able interaction with other workflow
engines (Interface 4). Workflow tracking, case control and staff management are
supported by administration and monitoring tools (Interface 5).
Runtime and design time perspectives
According to [6], at the highest level, all WfMS may be characterized as providing
support in three functional areas:
• build time functions are concerned with defining and modeling workflow
processes and their activities;
• runtime control functions are concerned with managing workflow processes
in an operational environment and sequencing activities;
• runtime interactions are concerned with human users and other applica-
tion tools for processing the various activity steps.
As we can see, these three functional areas can be summarized in two core func-
tional perspectives: design time (associated with build time functions) and run-
time (gathering runtime control functions and their interactions).
The runtime perspective, proposed by our framework, is associated with the in-
stallation and the testing of the main functionalities of a workflow solution. It is
also related to the analysis of the support that is offered by the workflow solution
to workflow processes (e.g. support of transactions and treatment of exceptions).
The design time perspective, proposed by our framework, is associated with the
task of designing a sample workflow process using the process editor. This func-
tional perspective is also related to the ability of the process editor to easily, and
in a small amount of time, help us to define a relatively complete workflow proc-
ess. Given the importance of these two functional perspectives, it only seems
natural that they should be analyzed before choosing a workflow solution.
COMPARISON ENVIRONMENT
We have chosen ten of the most popular and promising open source workflow
systems available nowadays. The final set that we will analyze in this chapter is
composed of the following WfMS: Bonita, Enhydra Shark, JawFlow, JBoss jBPM,
JFolder, JOpera, OpenWFE, RUNA WFE, WfMOpen and YAWL. Before presenting
the results of our comparison, it is crucial to clearly identify the environment on
which the analysis of the WfMS was made. The installation and test of the work-
flow systems was made by two senior students in Computer Science within the
scope of their final project. All the WfMS analyzed were installed and tested in a
Intel Pentium M 2.00GHz computer with 1 GB memory, 100 GB disk space and
running Windows XP. One way to quickly gain a good impression of a workflow
management system is to work through a sample process chosen in advance. The
sample workflow process used to test the WfMS’ platforms was composed of 15
335
OPEN SOURCE WORKFLOW MANAGEMENT SYSTEMS: A CONCISE SURVEY
different tasks with multiple control structures (AND splits/joins and XOR
splits/joins) and by nested workflow definitions. It also included 5 different par-
ticipants.
COMPARISON OF THE 10 WFMS SELECTED
The framework specified in this chapter is now considered to compare the ten
workflow systems. Table 2 offers an overview of our findings. Most of the systems
are not completely compliant to the WfMC reference model. In fact, only Bonita,
OpenWFE and YAWL are fully compliant. Moreover, most of the non compliant
WfMS do not provide an interface to interact with other workflow enactment ser-
vices. All solutions are platform independent. Two systems have been developed
within the scope of a research project (YAWL and JOpera). Regarding installation
and testing time, we have discovered a wide range of values that go from only 22
minutes, with OpenWFE, to 12 hours and 47 minutes with WfMOpen. One of the
most important aspects that influenced the installation time was the documenta-
tion provided. We have reached the conclusion that most of the WfMS studied
offer enough documentation in order to correctly install and use the system.
Regarding the installation easiness, JFolder’s installation was easy, standing out
from the all the other workflow systems. On the opposite end, we found Bonita,
JawFlow and WfMOpen with a rather complicated installation procedure. We also
discovered that only Enhydra Shark and JOpera do not offer a web based ad-
ministration environment.
The process definition applications provided by five of the workflow systems ana-
lyzed offered mechanisms that allowed designing our sample process without ma-
jor constraints. However, RUNA WFE, WfMOpen, Bonita, JFolder and JBoss
jBPM process definition applications were quite limited and unpleasant.
The time spent to define our sample process assumes values that vary from al-
most 2 hours to approximately 6 hours. YAWL allowed the quickest process defi-
nition. Bonita was the one that required most time to design our sample process,
5 hours and 11 minutes.
Regarding the documentation provided, there is little or no documentation avail-
able about the process editor of several WfMS analyzed, like: JawFlow, JBoss
jBPM, JFolder and WfMOpen. Finally, XPDL is the process definition language
most often used by the workflow systems analyzed.
In the following subsections we will discuss each workflow management system,
according to our framework, in greater detail.
Bonita
Bonita was developed in 2003 by a team of 14 engineers, of which, Miguel Valdes
Faura, Brice Revenant and François Charoy were the project leaders [7]. The cur-
rent version is 2.0 and was released in June, 2006. Bonita is a complete workflow
system that provides functionalities to handle long-running, user-oriented work-
flows and business processes. It allows to dynamically modifying the definition of
a running process in order to take into account events that were not planned.
This workflow solution also takes benefit from several services that the integration
with a J2EE application server provides, such as transactions, role-based authen-
tication and connection with external information systems.
336
OPEN SOURCE WORKFLOW MANAGEMENT SYSTEMS: A CONCISE SURVEY
Table 2: Overview of the ten WfMS proposed
337
OPEN SOURCE WORKFLOW MANAGEMENT SYSTEMS: A CONCISE SURVEY
1. WfMC reference model. Bonita is fully compliant to the WfMC reference
model specification.
2. Runtime perspective. Bonita’s installation and testing took 1 hour and 56
minutes. The documentation provided by the developers is comprehensive, allow-
ing us to install the software without facing any major problem. However, its web-
based user interface is unpleasant and not very user friendly. Bonita requires the
installation of JDK 1.4, JOnAS Application Server with Tomcat, Jakarta Ant and
a DBMS (database management system). It works upon the middleware platform,
Java Message Service, in order to exchange data and events. Bonita offers an easy
integration with most database management systems. It also supports exceptions
treatment and rollback during process execution.
3. Design time perspective. In order to correctly define our sample workflow
process we have spent approximately 5 hours. The graphical editor provided by
Bonita is web-based. It is a Java Applet that allows us to design processes by
dragging and dropping each activity. We have found a great amount of documen-
tation about this process editor, but some details are not clearly explained. For
instance, when defining a process, its sub processes should be defined first. For
this reason the definition of our sample workflow process was quite complex. The