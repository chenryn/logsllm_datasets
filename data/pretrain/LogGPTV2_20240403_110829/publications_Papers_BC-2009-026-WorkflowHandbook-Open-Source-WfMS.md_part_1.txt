# Open Source Workflow Management Systems: A Concise Survey

**Authors:**
- Ricardo Garcês
- Tony de Jesus
- Jorge Cardoso* (SAP Research, Germany; University of Coimbra, Portugal)
- Pedro Valente
- University of Madeira, Portugal

## Abstract
Open source Workflow Management Systems (WfMS) are attractive to organizations due to their low or non-existent costs and customization capabilities. This chapter analyzes ten open source WfMS using a framework that provides decision-makers with a starting point for selecting a workflow solution. The framework characterizes WfMS based on 22 parameters.

## Introduction
Many organizations in the commercial, government, and non-profit sectors benefit from open source software [1]. Open source software is increasingly competing with commercial software [2]. According to [3], there are approximately two hundred suppliers offering workflow management software. Selecting an open source WfMS can be a challenging and complex task. A thorough analysis of the most popular solutions is essential to avoid choosing an inadequate product that fails to support an organization's business processes efficiently.

The motivations for using and developing open source software are diverse, ranging from philosophical and ethical reasons to practical considerations [4]. While the initial advantage of open source software is often its low cost, the key differentiator is the access to the source code, the right to modify and redistribute it, and the ability to improve the code. These characteristics allow organizations to customize open source workflow systems according to their specific needs.

This chapter provides an overview and comparison of ten popular open source WfMS using a comprehensive framework, offering decision-makers a starting point for the selection process. The document aims to help managers better guide, justify, and explain their decisions and choices.

## WFMS Comparison Framework
Several approaches have been proposed by consulting companies such as Andersen Worldwide, Ernst & Young, Deloitte & Touche, Coopers & Lybrand, KPMG, and Price Waterhouse to compare information systems and technologies. However, these approaches do not fully address the specific characteristics of workflow technologies. Therefore, we propose a new, more comprehensive approach that evaluates both the functionalities provided by WfMS and the installation and usage aspects, as well as the definition of workflow processes.

Our framework focuses on the compliance of WfMS with the WfMC reference model [6] and two functional perspectives: runtime and design time. Table 1 outlines the parameters considered in our study.

| **Parameters** | **Process Definition Application (Interface 1)** | **Workflow Client Application (Interface 2)** | **Invoked Applications (Interface 3)** | **Other Workflow Enactment Services (Interface 4)** | **Administration and Monitoring Tools (Interface 5)** |
|---------------|-------------------------------------------------|----------------------------------------------|----------------------------------------|----------------------------------------------------|------------------------------------------------------|
| **Research Scope** | Installation Time | Documentation | Platform Independence | Easiness of Installation and Utilization | - |
| **Runtime** | Web Based | Other Software Required | Functional Middleware Platform | DBMS Integration | Transactions Support |
| **Design Time** | Process Definition Time | Documentation | Easiness of the Process Definition | Web Based | Organizational Perspective (Workflow Language) |

### WfMC Reference Model
The WfMC reference model [6] provides a general description of the architecture of a WfMS, including the main components and associated interfaces. The tools for constructing and designing workflows are known as process definition applications (Interface 1). Work items are presented to employees through workflow client applications (Interface 2). Invoked applications (Interface 3) are the application software that can be started from the workflow system. Interface 4 allows interaction with other workflow engines, and administration and monitoring tools (Interface 5) support workflow tracking, case control, and staff management.

### Runtime and Design Time Perspectives
According to [6], WfMS can be characterized by three functional areas:
- **Build Time Functions**: Define and model workflow processes and activities.
- **Runtime Control Functions**: Manage workflow processes in an operational environment and sequence activities.
- **Runtime Interactions**: Facilitate interactions with human users and other application tools.

These areas can be summarized into two core functional perspectives: design time (build time functions) and runtime (runtime control functions and interactions).

- **Runtime Perspective**: Evaluates the installation, testing, and functionality of the WfMS, including support for transactions and exception handling.
- **Design Time Perspective**: Assesses the ease and efficiency of defining a sample workflow process using the process editor.

Given the importance of these perspectives, they should be analyzed before selecting a WfMS.

## Comparison Environment
We selected ten of the most popular and promising open source WfMS: Bonita, Enhydra Shark, JawFlow, JBoss jBPM, JFolder, JOpera, OpenWFE, RUNA WFE, WfMOpen, and YAWL. The analysis was conducted by two senior computer science students as part of their final project. All WfMS were installed and tested on an Intel Pentium M 2.00GHz computer with 1 GB memory, 100 GB disk space, running Windows XP. A sample workflow process consisting of 15 tasks with multiple control structures and nested definitions, involving five participants, was used to test the platforms.

## Comparison of the 10 Selected WfMS
Table 2 summarizes our findings. Only Bonita, OpenWFE, and YAWL are fully compliant with the WfMC reference model. Most non-compliant WfMS lack an interface to interact with other workflow enactment services. All solutions are platform-independent. Two systems, YAWL and JOpera, were developed within research projects.

Installation and testing times varied widely, from 22 minutes for OpenWFE to 12 hours and 47 minutes for WfMOpen. Documentation quality significantly influenced installation time. Most WfMS provided adequate documentation for installation and use. JFolder had the easiest installation, while Bonita, JawFlow, and WfMOpen had more complex procedures. Enhydra Shark and JOpera did not offer web-based administration environments.

Five WfMS (Bonita, Enhydra Shark, JOpera, OpenWFE, and YAWL) provided process definition applications that allowed designing the sample process without major constraints. RUNA WFE, WfMOpen, Bonita, JFolder, and JBoss jBPM had limited and less user-friendly process definition applications.

The time to define the sample process ranged from nearly 2 hours to about 6 hours. YAWL was the fastest, while Bonita required the most time (5 hours and 11 minutes). Documentation for the process editor was lacking in several WfMS, including JawFlow, JBoss jBPM, JFolder, and WfMOpen. XPDL was the most commonly used process definition language.

### Detailed Analysis of Each WfMS
#### Bonita
Bonita, developed in 2003 by a team of 14 engineers led by Miguel Valdes Faura, Brice Revenant, and François Charoy, is currently at version 2.0, released in June 2006. It is a complete WfMS that supports long-running, user-oriented workflows and business processes, allowing dynamic modification of running processes to handle unforeseen events. Bonita benefits from J2EE integration, providing services like transactions, role-based authentication, and external information system connections.

1. **WfMC Reference Model Compliance**: Bonita is fully compliant with the WfMC reference model.
2. **Runtime Perspective**: Installation and testing took 1 hour and 56 minutes. The documentation was comprehensive, but the web-based user interface was not very user-friendly. Bonita requires JDK 1.4, JOnAS Application Server with Tomcat, Jakarta Ant, and a DBMS. It uses Java Message Service for data and event exchange, integrates easily with most DBMS, and supports exception handling and rollback during process execution.
3. **Design Time Perspective**: Defining the sample process took approximately 5 hours. The graphical editor is a web-based Java Applet that allows process design through drag-and-drop. Documentation for the process editor was extensive but lacked clarity in some areas, making the process definition complex.

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the original text.