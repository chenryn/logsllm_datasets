靠不靠谱，有多大的概率能完成实施和实现？一般用几个等级来表示。类似的关于评价与评估
过程的概念在其它域多次出现，如：
*信任与保证（Trust/Assurance）；
*认证与认可（certification/accreditation）；
*质量控制与质量保障（QC/QA）；
*验证与确证（Verification/Validation）。
美国有 2 种标准用于信息系统的认证和认可：
①国防部使用国防部信息技术的安全认证和认可过程 DITSCAP（DOD information
technology security certification），将认证认可划成 4 个阶段：
阶段 1：定义 Definition；
阶段 2：认证/验证 Verification；
阶段 3：确证/证实 Validation；
阶段 4：认可/发布 Post Accreditation。
②国家安全局使用国家信息保障认证和认可过程 NIACAP（national information
assurance certification accreditation process），区分了 3 种类型的认可（鉴定）方式。
—65—
对系统的认可：a system accreditation，1 个单一的系统软件；
对站点/场所的认可：a site accreditation，1 个包含整套系统软件的站点；
对类型的认可：a type accreditation，1 个分布式的系统软件。
D.理解信息系统的安全能力（例如：存储保护、虚拟化、可信平台模块、接口、
容错）
其实就是了解各种安全系统所具备的主要功能特性，它实现了什么样的安全防护，有什么
优缺点。
1.内存保护
缓冲区溢出频发，安全架构师必须通过各种技术手段来保持主客体隔离以及各个主体之间
的隔离，其中包括使用处理器状态、分层和数据隐藏等技术。
2.虚拟化
虚拟机通常被隔离在一个沙箱环境中，若是受到感染，可迅速将其移除或关机，用另一台
虚拟机取代。虚拟机对硬件资源拥有有限访问权，因此可帮助保护主机系统和其他虚拟机。
3.可信平台模块（TPM）Trusted Platform Module（TPM=HSM）
TPM 是主板的加密处理器芯片，存储和处理密钥，以实现基于硬件加密系统。硬盘离开原
来的系统，是不可能被解密的。TPM 是硬件安全模块(HSM)的一个典型应用。所谓的硬件安全
模块 HSM，是一个用于管理/存储密钥、提高加密速度的硬件设备。许多认证系统使用 HSM 来
存储证书；银行的 ATM 和 POS 终端通常采用专有的 HSM。
4.接口 Interfaces
限制用户的权限一般通过限制应用程序的接口来实现，比如：一个普通用户没有权限，软
件里相关的功能菜单就不会出现。Clark-Wilson 安全模型就运用了接口限制的技术。
5.容错 Fault Tolerance
为了避免单点故障。具体内容在“灾难恢复计划”里。
E.评估与缓解安全架构、设计和解决方案要素的脆弱性
先讲计算机硬件结构与运行原理。要了解软件是怎么在系统中运行的，才知道如何让它安
全地工作。
一、硬件基础/计算机组成
1.CPU
中央处理器(CPU)，根据指令执行计算和逻辑操作。操作系统控制 CPU 的语言就是指令集。
CPU 的主要任务有 4 个：提取、解码、执行、存储。
CPU 的运行状态有 4 种（考点）：
*运行状态 Run or Operating state：执行指令。
*等待状态 Wait stage：等待特定事件完成。
*问题状态/运算状态 Application or Problem stage：执行应用程序（仅非特权指令）。
*特权状态/管理状态 Supervisor state：程序可以访问整个系统，可执行特权指令。
2.存储器 Memory
—66—
①只读存储器
ROM（Read-Only Memory）ROM 有好几种：
PROM 可编程只读存储器 Programmable Read-Only Memory (PROM)，可烧入 1 次，不能改。
EPROM 可擦除可编程只读存储器 Erasable Programmable Read-Only Memory (EPROM)，可
用紫外线多次改写。
EEPROM 电可擦除可编程只读存储器 Electronically Erasable Programmable Read-Only
Memory (EEPROM)，可用直接多次改写。
闪存 Flash Memory，用的太多了，不解释。
②随机存取存储器 Random Access Memory
就是可读写存储器，掉电则数据无，也有很多种，不介绍了，有动态和静态 2 种：
动态 RAM：基于电容（capacitor），要不断刷新，成本低；
静态 RAM：基于触发器（flip-flop），速度快，成本高。
③寄存器 Registers
CPU 的核心，直接供算术逻辑单元 ALU 使用。
寻址/Memory Addressing 有 5 种方案，会考到的：
1)寄存器寻址 Register Addressing。寄存器是直接安装在 CPU 上的非常小的存储位置。
当 CPU 需要从某个寄存器中获得信息来完成操作时，它可以使用寄存器地址(例如“寄存器 1”)
去访问寄存器的内容。
2)立即寻址 Immediate Addressing（数据和指令在一起，不用寻）。就其本身而言，立
即寻址并不是一个技术上的存储器寻址方案，而是引用某些数据的一种方法，这些数据作为指
令的一部分提供给 CPU 使用。例如：CPU 可能处理命令“将寄存器 l 中的数值与 2 相加”。这
条命令使用两个寻址方案。第一个方案是作为命令一部分的直接寻址，即告诉 CPU 将数值 2 加
进去并且不需要从某个存储器位置中检索该数值。第二个方案是寄存器寻址，即命令 CPU 从寄
存器 1 中取出数值。
3)直接寻址 Direct Addressing（地址和指令在一起，直接寻）。在直接寻址中，要被访
问的存储器位置的实际地址会被提供给 CPU。这个地址必须与正在执行的指令位于相同的存储
页面上。因为与重新编写立即寻址的硬编码数据相比，存储位置的内容能够被更容易地改变，
所以直接寻址比立即寻址更灵活。
4)间接寻址 Indirect Addressing（通过指令里的指针去找地址，再通过地址找数据）。
间接寻址使用的方案类似于直接寻址。但是，作为指令的一部分提供给 CPU 的存储器地址并不
包含 CPU 用为操作数的真实数值。实际上，存储器地址中包含另一个存储器地址(也许位于不
同的页面上)。CPU 通过读取间接地址来了解待操作数据驻留的位置，随后从这个地址中取出
真实的操作数。
5)基址+偏移量寻址 Base+Offset Addressing（基址在寄存器中）。基址+偏移量寻址使
用存储在某个 CPU 寄存器中的数值作为开始计算的基址。然后，CPU 将指令提供的偏移量与基
址相加，并从计算得到的存储位置中取出操作数。
一个 CPU 有几种不同类型的寄存器，存储了需要执行的指令集和数据信息。
1)通用寄存器(general register)用于保存变量和临时结果。通用寄存器就像 ALU 在工作
—67—
时用到的记事本。
2)特殊寄存器(也称为专用寄存器)保存诸如程序计数器、栈指针和程序状态字(Program
Status Word, PSW)之类的信息。
3)程序计数器，包含需要提取的下一个指令的存储器地址。执行这条指令后，程序计数器
的内容就会更新为下一个需要处理的指令集的存储器地址。程序状态字(PSW)保存各种不同的
条件位，其中一个条件位指出 CPU 应在用户模式(也称为问题状态)，还是在特权模式(也称为
内核模式(kernel mode)或监管模式(supervisor mode))下工作。
④数据存储设备 Storage
主存 Primary：直接供 CPU 运算用的 RAM。
辅存/次存 Secondary：当前未被 CPU 使用的数据，外部存储，硬盘光驱什么的。
虚拟内存 Virtual memory：用辅存模拟额外的主存。
虚拟存储 Virtual storage：用主存模拟辅存，提高程序打开速度。
⑤输入/输出设备
键盘、打印机什么的，不讲了。重点讲输入/输出结构 Input/Output Structures：
存储映射 I/O，Memory-Mapped，在内存里使用一系列映射内存地址来访问外设。
直接内存访问(DMA) Direct Memory Access，不需要 CPU 处理，直接与内存交换数据。
关于存储的管理和控制这里不多讲，但很可能考到。
⑥固件 Firmware
固件是存储在 ROM 上的软件，很少被更改，前面讲的 EEPROM 就是固件。主要有两种：
计算机主板上的 BIOS 和和其它设备的固件（路由器、打印机、机顶盒）。
3.实现内存保护的三种最常用方法是：
①分区：分区是指把计算机内存划分成若干区段。指向一个内存位置的方法包括，用一个
值标识一个区段以及该区段内的偏移。
②分页：分页是把内存地址空间划分成大小相等的叫做页的块。分页表把虚拟内存映射到
物理内存上。分页表使附加内存的分配变得更容易，因为每个新页都可以从物理内存中的任何
位置分配出来。一个页若是未被明确分配给一个程序，这个程序将不可能访问这个页，因为每
个内存地址要么指向分配给该应用的一个页，要么生成一个叫做页错误的中断。未被分配的页
和已经分配给任何其他应用的页不会拥有该应用接触得到的地址。
③保护键：保护键机制把物理内存划分成特意大小的块，每块都拥有一个叫做保护键的相
关数值。每个流程还拥有一个与之相关的保护键值。当内存被访问时，硬件将检查，当前流程
的保护键是否与将被访问的内存块的值相匹配如果不匹配，则会引起异常。
还有其它方法：
④地址空间布局随机化 ASLR
内存保护有其它附加技术手段，如地址空间布局随机化(ASLR)、可执行空间保护等。
ASLR 涉及在流程的内存地址空间随机安排程序的关键数据区的位置，其中包括可执行程
序以及栈、堆和库的位置。地址空间布局随机化的依据是，攻击者猜出随机排列的区域位置的
概率极低。增加搜索空间提高了安全性。
⑤可执行空间保护
—68—
把内存区域标明为不可执行，也就是说，在这些区域执行机器代码的任何尝试都会引起异
常。许多 64 位操作系统通过某种形式的 ASLR 实施可执行空间保护，以此来预防某些种类的缓
冲区溢出，如 return-to-libe 和 return-to-plt 攻击。
二、基本概念
①任务 tasking。执行一个程序就是一个任务。
②进程 processes。进程就是程序运行的动态过程，是独立运行的一个程序单元，存在内
存里，是指令集和分配资源的集合，内存、CPU 时隙、API 接口、访问文件等都是资源；当进
程有具体活动需要操作系统执行时，生成一个指令集给 CPU，这就是线程，活动完成线程即撤
消。1 个程序可以作为多个进程在后台运行。进程有 3 个状态：就绪（等 CPU 时隙）、运行（执
行）、等待/阻塞（等数据输入）。
③线程 threading。是进程中的一小段相对独立的代码，可重用也可并发运行，也是正在
被 CPU 执行的一组指令集和数据。程序可以设计成多线程（Multithreading），这样同一个程
序（进程）的不同功能模块（显示、打印、传输什么的）可以在多个不同的线程中同时运行。
不过 CPU 最好具备多线程运算能力，不然那么多线程的效果发挥不出来。同一个进程的所有线
程是共享存储资源的。
④多任务 Multitasking。同时执行多个程序，用于单机，由操作系统协同调度。有 3 种
类型：实时多任务(Real time)、抢占式多任务(Preemptive)、协作式多任务((Cooperative)。
没有“多进程”这个概念的，多进程就是多程序，对于单个 CPU 来说，也就是多任务，就是内
存中加载很多进程。
⑤多线程 Multithreading。一般情况下，一个进程（processes）执行一个任务/程序
（tasking），并生成一个线程(threading)等待 CPU 执行具体操作；而多线程就是指一个进程
/程序被分成多个线程来执行。一个典型的例子：同时打开多个文档时，如果通过多个进程来
实现，文档间的切换和交互需要更多的指令，速度慢；如果在同一个进程里生成多个线程来跑
不同的文档，速度会快很多。
⑥多程序设计 Multiprogramming。用于大型机和分布式计算，自己编程来通过操作系统
协同不同主机的运算，过时了。（使用 1 个 CPU 对多个程序进交叉存取执行）
多程序与多任务的区别：一是多程序通常在大型机中使用，而多任务在 PC 系统(例如
Windows 和 Li nux)中使用；二是多任务通常由操作系统协调使用，而多程序则要求特别编写
的软件，这种软件通过操作系统来协调自己的活动和执行。
⑦多处理器 Multiprocessing。有 2 种方式使用和控制多个 CPU：一是对称多处理（SMP），
单机用的，几个 CPU 共享同一个操作系统、内存和总线；二是大规模并行处理（MMP），大型
机用的，每个 CPU 有自己的操作系统、内存和总线（要用多程序设计来控制）。补充：单个的
四核 CPU 也算是多处理器，它相当于 4 个 CPU 的运算能力。现在常用的单机 CPU 具备 4 核 8 线
程能力。
总之：任务是用户要系统做的操作；进程是后台内存里跑的程序；线程是 CPU 里运行的活
动单元。【软件>程序/任务（内存）>线程>处理器（寄存）】
⑧中断(IRQ) Interrupt
中断是单个 CPU 实时地处理内部或外部事件的一种内部机制，就是申请 CPU 暂停正在执行
—69—
的程序，先把中断的事件处理完了，再回来断续。它为设备指派特定的信号线即中断号。
三、操作系统/CPU 的运行机制
进程、线程什么的由操作系统控制，在 CPU 里运行，它本身是很大的安全风险的，因为存
储的数据很容易被溢出、被篡改，进程、线程也可能被恶意控制、取代什么的。所以还要进一
步深入学习操作系统。这里不能成体系的讲解，只能罗列相当的概念了。
1.操作系统的分层架构：