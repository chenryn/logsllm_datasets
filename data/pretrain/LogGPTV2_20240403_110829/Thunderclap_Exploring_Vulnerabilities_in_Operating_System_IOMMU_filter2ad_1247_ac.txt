< 10.12.41
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Spatio-temporal
ATS
n/a
n/a
n/a
n/a
n/a
n/a
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
?
?
(cid:88)
(cid:88)
(cid:88)
TABLE II: Operating system survey, describing applicability of our vulnerabilities to different platforms
requests, we are able to scan I/O virtual addresses. When
reading, the PCIe transport layer returns either Unsupported
Request (indicating we were not allowed to read) or Successful
Completion (our read was permitted).
It turns out that most operating systems use relatively low I/O
virtual addresses, so scanning the ﬁrst few gigabytes of memory
is sufﬁcient. We call accessible regions windows, i.e., groups of
pages that the OS has intentionally or unintentionally exposed to
our device. On discovering a page is accessible, we can also look
inside and possibly change the contents. We used this as a starting
point for attacks against IOMMU and non-IOMMU systems.
A. Microsoft Windows
Of the operating systems that we studied, Windows uses the
weakest form of IOMMU protection. We were able to compromise
it using the baseline platform with no device model, with
minimal effort. These attacks are perhaps uninteresting in terms of
characterizing the attack surface, but their consequences are grave.
Attack story 1: Windows 7, 8.1, 10 Home/Pro
Most versions of Windows do not use the IOMMU and so are
entirely unprotected from DMA attacks. This includes versions
prior to Windows 10, and Windows 10 Home and Professional
editions. We veriﬁed that all memory is exposed to peripheral
devices, and so an attacker has full access to read and modify it.
A user of such a machine is entirely unprotected from malicious
devices. For example they can search for and replace parts of the
Windows code with their own, or read secret data from memory.
Attack story 2: Windows 10 Enterprise
The only version of Windows to support
the IOMMU is
Windows 10 Enterprise, which uses it just for its optional
‘Virtualization-Based Security’ (VBS) feature.
VBS runs the primary ‘root’ Windows system inside a
Hyper-V virtual machine, running a second container alongside.
The container’s minikernel is intended to protect private data
such as encryption keys, constraining access from the root
OS. VBS can implement Device Guard (DG), which prevents
execution of malicious code; and Credential Guard (CG), which
prevents secret data being read. DG and CG are not enabled
by default, and the enablement process is sufﬁciently complex
that it would likely be usable only in a controlled corporate
environment. For example, DG and CG will not enable without
UEFI and Secure Boot being enabled.
The IOMMU is intended to prevent devices bypassing the
hypervisor’s protections. Extended Page Tables (EPT) in the
MMU are used to remap guest physical addresses to host
physical addresses to isolate the virtual machines; this applies
only to the CPU, so the IOMMU is used to prevent devices
attached to the root OS from accessing the secure container.
Build 14393 speciﬁcally allowed us to attach a debugger to
Hyper-V with VBS on, allowing us to examine the IOMMU page
tables. We found all devices share a single I/O page map, meaning
that memory exposed to one device is exposed to all. Furthermore,
the vast majority of physical pages are mapped 1:1 into I/O virtual
address space and read/write – whereas VBS may protect the
container and hypervisor, the root OS is unprotected. We veriﬁed
this with the FPGA: by scanning through physical memory,
almost all memory pages were accessible to the attack device.
Disclosure We ﬁrst contacted Microsoft in 2016, and have
been in ongoing discussions. In 2018, they accepted that DMA
attacks are within their threat model and announced Windows
10 Kernel DMA Protection [44], where the IOMMU is enabled
in ﬁrmware [69] and Windows uses it for protection against
Thunderbolt devices (only). This sits in the PCIe memory
allocator and only opens IOMMU windows for memory
allocated to devices, protecting the majority of the Windows
system memory. It applies only to devices shipped with version
1803 and not to earlier systems upgraded to 1803 unless the
vendor ships a ﬁrmware update. It also requires changes to
third-party drivers to support DMA remapping.
Related work Our explorations augment growing interest in
DMA attacks on Windows [6], [15], [20]–[22], [61]. They are
included here as a demonstration of an OS that makes poor
use of the IOMMU to defend against DMA attacks and the
use of our platform to reproduce state of the art attacks.
Other OS MacOS, and FreeBSD and Linux when enabled,
use the IOMMU such that they do not give the attacker such
full access to system state.
VI. RICHER DEVICE-DRIVER INTERACTION
An attacker who behaves as a real device has greater power. Pre-
senting as a real peripheral, it interacts with the device driver and
operating system in a way that a baseline DMA platform does not.
In this and subsequent sections, we consider what it means to be a
full device attacking OSs with defenses against malicious devices.
To understand more complex vulnerabilities, it is useful to be
aware of the architecture of a modern peripheral such as a network
interface card (NIC), which we implement as our device model.
Conceptually, a network card can be viewed as a bidirectional
pipe: packets come in, packets go out. Several architectural
constructs make it efﬁcient for both hardware and software,
which are common across vendors and across operating systems.
To understand the problems of device security, it is important to
understand how a NIC functions and how it interfaces to software.
The ﬁrst problem is that packets are generated and consumed in
several stages. For instance, an outbound TCP packet might have
its payload generated by an application. The TCP layer prepends
6
memory that allows exposure to devices (some memory may
be inaccessible due to hardware limitations). Second, before
a data block is placed in the ring buffer for transmission, a
window must be opened for it to be accessible by the device.
This involves creating a mapping for the block in the IOMMU
page table. Third, the address written into the ring buffer is now
the I/O virtual address of the mapping, rather than the physical
address. Finally, when the device is ﬁnished with the data, the
operating system should close the window again, revoking the
mapping from the IOMMU page table and IOTLB.
While this is the obvious usage model, various OSs deviate
from it, as explained in subsequent sections.
B. IOMMU usage by other devices
While we have focused on NICs, other devices have similar
structures. NVMe ﬂash storage is based around a similar ring
buffer for data blocks. The XHCI host controller interface
for USB uses scatter/gather rings, and the AHCI interface for
SATA uses in-memory pointer tables to indicate command and
data regions for transfer. In each case the pattern of following
pointers in host memory looks similar, though the semantics
of the payloads transferred is different. In Section IX-B we map
spatial utilization, including SATA and GPUs.
C. Our platform as a NIC
Our implementation emulates an Intel 82574L NIC, which
provides it with full visibility of the ring buffer and its data
payloads. We added a variety of adversarial functions to
the basic NIC to examine vulnerability to different exploit
techniques. Because we run a software model, it is relatively
easy to make substantial changes to its behavior.
At a basic level, an attacker can exploit the self-descriptive
nature of PCIe:
that devices advertise features and those
advertisements are trusted. For example, the attacker can set
up conﬁguration registers as needed to bypass whitelisting.
More deeply, our NIC has visibility of the ring buffer
structure and so is notiﬁed of the locations of packet data in
the I/O virtual address space. In theory, the NIC is notiﬁed only
about data buffers; thus, we can exploit the fact that IOMMU
mappings have a minimum granularity of 4KiB pages, and thus
can look for data on the same or nearby pages. Additionally, we
can change the way the NIC uses the ring buffer – e.g., failing
to indicate we are ﬁnished with data buffers, preventing their
IOMMU entries being invalidated.
At a higher level, we can also generate spurious network trafﬁc
against the host (perhaps announcing a new default route to divert
connections to our NIC, ARP poisoning, HTTPS man-in-the-
middle and so on). However, we consider this a separate class of
attacks that does not require being a DMA-enabled peripheral and
has been covered in other work, for instance over USB [49].We
therefore consider them out of scope, but note that powerful
attacks may be possible with a combination of exploits: HTTPS
man-in-the-middle with additional knockout of the browser
certiﬁcate check functions could be very potent, for example.
In following sections, we demonstrate the additional power
that awareness and interaction with the device model gives to
the attacker.
D. Shared IOMMU mappings on macOS
MacOS was the ﬁrst system to deploy default use of the
IOMMU, since early Firewire and Thunderbolt attacks focused
on Macs. Our investigations reveal macOS uses shared mappings,
a single IOMMU page map that is shared among all devices.
a OS buffer chains
b NIC ring buffer
Fig. 5: Common OS and network-card data structures
a TCP header. Then an IP header is prepended. Other layers such
as IPsec or VLAN tagging may add additional headers. Finally an
Ethernet header is prepended and a CRC may be appended. This
full packet is dispatched to the network hardware for transmission.
In a na¨ıve implementation, each prepend would involve
copying the packet to free up space for the new header. However,
performance dictates slow memory copying should be avoided.
Instead, a common design pattern stores the packet in a linked
list of memory blocks, allowing addition and removal of headers
just by changing pointers. For efﬁciency, pools of these blocks
are statically or semi-statically allocated, and typically there are
two types. The ﬁrst is the inline buffer, where the linked-list data
structure contains a small ﬁxed buffer that is enough for header
ﬁelds, acknowledgements, and other small packets. The second
uses an external cluster, where the linked list points to a larger
standalone memory block – typically used for large payloads.
This pattern exists in macOS and FreeBSD as the mbuf, Linux
as the skbuff and Windows as the NET BUFFER LIST. Figure
5a gives an illustration.
The next abstraction concerns the hardware/software interface.
Allowing the NIC to read and write packet data directly
from memory is more efﬁcient than using the CPU. To avoid
hard-coding OS-speciﬁc data structures into silicon, the NIC
uses scatter-gather lists, lists of addresses and lengths that
the NIC should read to transmit a packet and where to write
received packets. The NIC driver translates between OS-speciﬁc
data structures like mbuf s and scatter-gather lists.
Since the drivers on the CPU and the NIC are processing
concurrently, the ring buffer data structure is typically used. This
provides a circular buffer of address/length tuples, a circular
scatter-gather list (Figure 5b). When sending, the CPU writes
pointers into one end of the buffer and the NIC consumes from
the other end. By moving the read and write pointers, the driver
indicates to the NIC there is new work, and the NIC conﬁrms
when the work is done. The driver’s task is to allocate memory,
to keep the ring buffer full of any outbound work and dispatch
incoming packets to the network stack.
Finally,
is worth bearing in mind the performance
requirements. A 40Gbps NIC as used in a datacenter node
can transfer up to 60 million packets per second at line rate,
depending on packet size. Since each packet may have several
scatter-gather entries, O(108) individual DMA operations per
second might be needed for each direction.
it
A. IOMMU usage by network devices
When an IOMMU is in operation, the most obvious way to
use it for protection requires some changes to ring buffer usage.
First, packet data must be allocated from a pool of physical
7
Therefore memory that is exposed to one device is exposed to all.
This means one device can snoop on memory intended for another
– examples might be a malicious peripheral keylogging via the
USB controller or reading the framebuffer. For example, the
framebuffer is always exposed on systems with discrete graphics.
In fact, macOS’s mbuf s are a special case – mbuf s are
allocated during early boot and remain exposed to all devices at
all times. Therefore every device has full visibility of network
trafﬁc continuously. This is weaker than even shared mappings,
where most other peripherals’ buffers are protected once they
are de-allocated from the device. It appears this is due to the
network stack being derived from FreeBSD, which exists as
a semi-separate codebase within the macOS (XNU) kernel –
but also avoids any IOMMU mapping and unmapping expense
when transmitting and receiving packets.
Attack story 3: MacOS VPN cleartext data extraction
The ﬁrst hurdle we encountered was that macOS does not attach
drivers to unapproved PCIe devices connected via Thunderbolt.
To overcome this, we changed the device and vendor IDs reported
by Thunderclap to be an Apple-approved device (as dictated by a
system conﬁguration ﬁle). We set our NIC to mimic the version
of the 82574L inside Apple’s ﬁrst-generation Mac Pro desktop.
We set up an IPSec VPN connection using the motherboard
BCM57765 ethernet controller and sent ‘secret’ trafﬁc over it.
We then plugged in Thunderclap via Thunderbolt, recording
all the memory windows that were passed to the platform over
the course of the generic set up network trafﬁc that macOS
carries out with newly attached network devices (DHCP, IPv6
solicitations, multicast DNS).
This is not enough; in order to make kernel code injection
attacks harder, macOS employs Kernel Address Space Layout
Randomization (KASLR). This adds a randomly-chosen offset
(the slide) to the address of everything in the kernel. We
determined that the slide is a multiple of 2MiB, meaning that
In the memory windows were mbuf s the motherboard NIC
had been asked to send. Reading through these windows, we
identiﬁed plaintext leaked from the secret connection in other
parts of the pages passed to our NIC; this is present due to
in-place decryption performed within IOMMU-exposed memory.
Attack story 4: MacOS root shell via kernel pointer
exposure
Using a similar technique, we were able to achieve a root shell on
macOS. Every mbuf is 256 bytes long, and starts with a variable
amount of metadata, including a pointer to the network data it car-
ries. For some mbuf s, this is allocated externally to the 256-byte
region: for others, it is internal. If the data is external to the mbuf ,
a pointer to a custom free function m free() (along with three
arguments to call it with) can be included in the mbuf metadata.
Due to the 4KiB page granularity, mapping the internal data
to the NIC also exposes the metadata. This means that, from
the NIC, we have access to a function pointer that the attacker
can set to any value, allowing them to change control ﬂow.
In that we appear to be a valid NIC, we are naturally given
IOVA pointers to descriptor rings that point to the IOVAs of
mbuf s and have both read and write permissions. Speciﬁcally,
we scan the pages to ﬁnd an mbuf with external storage, and
modify internal ﬂags and structures to ensure that the custom free-
function will be called. We are then able to change the m free()
function pointer in the mbuf to point to an address of our choosing.
We also control timing of the function call, since the NIC indicates
it has transmitted an mbuf and when the OS should free it.
low 21 bits of each address in the kernel are the same regardless
of the value of the slide. We also found that the AHCI and USB
drivers shipped with macOS leak the randomized virtual address
of a kernel symbol through pages that they open to all peripherals
at boot time. Since the lower 21 bits of the symbol are constant,
we can scan I/O address space looking for symbols where these
bits match; with a high probability these will reveal the slide.
To demonstrate exploitability of this vulnerability, we caused
the CPU to execute the functions panic and KUNCExecute.
The latter allows us to execute programs as arbitrary users,
including root, from the kernel. We ran Terminal.app,
which gave us a root shell on the machine. Additionally, we
have found an instruction sequence that allows us set the stack
pointer to a value of our choosing. This should be sufﬁcient
to allow an attacker to build a ROP attack on the kernel.
A simpler adversarial platform? The nature of shared
mappings means we can achieve a similar effect with a basic
device with no driver attachment. We can, for instance, scan
memory with the FPGA looking for memory windows containing