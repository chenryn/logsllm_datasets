(cid:18) α(|U| − 1)
with normalization term R = p(cid:48)
at least α is equivalent to
α ≤ p(cid:48)
(cid:17) ≤ 1 − α
R
R
(cid:19)
≤ n
2s+1
⇔ s ≤ log2
(cid:18)
⇔ loge
1 − α
As s ∈ N we use s = (cid:98)log2
concludes the proof.
P + p(cid:48)
R. Now accuracy pR of
(|U| − 1) exp(cid:0)− n
1
2s+1
n
(cid:16) α
(cid:17)
(cid:19)
1−α (|U| − 1)
loge
n
loge( α
1−α (|U|−1))
− 1(cid:99) which
(cid:1) + 1
 − 1.
This is a worst-case analysis and a tighter upper bound can
be obtained by using |P| instead of |U|− 1. However, the size
of P leaks information about D, hence, we refrain from using
7
the tighter bound. Furthermore, we guarantee an accuracy of
at least α, the actual accuracy can be even higher.
Lemma 1. With s ∈ O(log(n) − log log(|U|)) the pruned data
set’s size is sublinear in the size of the data universe, i.e.,
|Ds| = n
2s ∈ O(log(|U|))8.
V. SECURE SUBLINEAR TIME DIFFERENTIALLY PRIVATE
MEDIAN COMPUTATION
We describe our full protocol in Section V-A. In Sec-
tion V-B we detail optimizations and present a runtime com-
plexity analysis in Section V-C. In Section V-D we prove the
security of our protocol.
A. Protocol Description
Our protocol uses pruning developed by Aggarwal
et al. [1], which requires padding as a pre-processing step as
described in Appendix D. The selection probabilities are com-
puted on securely sorted, pruned data realized via oblivious
merging from Huang et al. [31], detailed in Appendix E.
The notation “A:” before an operation indicates that only
party A performs the following operation, likewise for party
B, and L[i] denotes the element at index i in array L. Our
protocol has four steps, denoted with (I)–(IV).
(I): Input Pruning (Algorithm 1): Both parties prune their
B via [1] using secure comparison
A, Ds
data sets DA, DB to Ds
realized with garbled circuits.
(II): Oblivious Merge & Secret Sharing (Algorithm 2): The
B into sorted Ds via
parties merge their pruned data Ds
bitonic mergers from [31] implemented with garbled circuits.
Note that Ds = {ds
0, . . . , ds|Ds|−1} is secret shared, i.e., A
holds shares (cid:104)ds
i(cid:105)B for all i ∈ IDs.
i(cid:105)A, B holds (cid:104)ds
A, Ds
(III): Selection Probability (Algorithm 3): The parties
compute utility, weight, and gap to produce shares of mass.
Each party P ∈ {A, B} now holds shares (cid:104)ds
i(cid:105)P , (cid:104)gap(i)(cid:105)P
and (cid:104)mass(i)(cid:105)P for all i ∈ IDs,
(IV): Median Selection (Algorithm 4): The parties recon-
struct all shares and select the differentially private median
via inverse transform sampling realized with garbled circuits.
the differentially private median (cid:98)m at uniform random among
j ∈ Ds based on mass. Then, they select
First, they sample ds
the gap(j) consecutive elements with the same utility as ds
j.
B. Optimizations
To optimize the performance of the secure computation
we utilize garbled circuits as well as secret sharing to use
their respective advantages. E.g., multiplication of two b-
bit values expressed as a Boolean circuit leads to a large
circuit of size O(b2) and is more efﬁciently done via secret
sharing. On the other hand, comparison is more efﬁcient with
garbled circuits. Algorithms 2, 3 are implemented with garbled
circuits. In Algorithm 1 only line 6 requires garbled circuits,
the rest is either data-independent or executed locally. Secret
shares, denoted with (cid:104)·(cid:105), are created in Algorithm 2, used in
Algorithm 3, and recombined in Algorithm 4. Furthermore, we
8We assume n > log(|U|), as otherwise we do not require pruning and our
input is already sublinear in the size of the universe.
Algorithm 1 PRUNE prunes DA, DB to Ds
Input: Data DA from A, DB from B, pruning steps s, median
B via [1].
A, Ds
A, likewise B has Ds
B.
rank k = (cid:100)(|DA| + |DB|)/2(cid:101).
Output: A has pruned data Ds
A ← PAD(DA, k, +∞) //Appendix D
1: A: D0
B ← PAD(DB, k,−∞)
2: B: D0
3: for i ← 0 to s − 1 do
4: A: mA ← median of Di
5: B: mB ← median of Di
6:
7: A: Di+1
8: B: Di+1
9: end for
A ← upper half of Di
B ← lower half of Di
c ← mA  0 else 0
(cid:104)mass[i](cid:105)P ← t + weight · (cid:104)gap[i](cid:105)P
end for
min(U)]
13: end each
9:
10:
11:
12: Draw lists of k nonces N 1
(cid:104)ds
P , N 2
|Ds|
2
7:
8:
|Ds|
2 − 1
|Ds|
2 − 1
P from [0, max(U) −
compute the required exponentiations in Algorithm 3 line 7
without any secure computation. Next we reiterate portions of
Section IV-B but in the new context of secure computation.
Sorting via Garbled Circuits: Our utility deﬁnition requires
the data to be sorted which inherently relies on comparisons.
Comparisons are more efﬁciently implemented in binary cir-
8
shares
gaps,
also
lists
of
A, N 2
A
B from B.
(cid:104)Ds(cid:105)A of A’s
nonces N 1
B, N 2
(cid:104)gap(cid:105)A of
and
Algorithm 4 MEDIANSELECTION selects the median via
inverse transform sampling.
(cid:104)mass(cid:105)A of
Input: Secret
(pruned)
from A;
probability masses,
data,
resp. (cid:104)gap(cid:105)B,(cid:104)mass(cid:105)B,(cid:104)Ds(cid:105)B, N 1
Output: Differentially private median (cid:98)m of DA ∪ DB.
i(cid:105)B mod 264 //Recombine shares
1: R ← (cid:104)mass [|Ds| − 1](cid:105)A+(cid:104)mass [|Ds| − 1](cid:105)B mod 264
2: r ← RANDOMDRAW(R + 1, N 1
3: Initialize j ← −1 and deﬁne d, g
4: for i ← 0 to |Ds| − 1 do
e ← (cid:104)ds
5:
gap ← (cid:104)gap[i](cid:105)A + (cid:104)gap[i](cid:105)B mod 264
6:
7: mass ← (cid:104)mass[i](cid:105)A + (cid:104)mass[i](cid:105)B mod 264
if r  r (line 8 in Algorithm 4). Note that we do not sam-
ple r from [0, 1] but from [0, R] where R = mass(|Ds| − 1),
i.e., the normalization factor from Equation (1). This allows
us to use the unnormalized probabilities and eliminates divi-
sions used in normalization. In the ﬁnal step, we select the
differentially private median at uniform random among the
gap(j) consecutive elements with the same utility (and thus
probability) as ds
j (line 13 in Algorithm 4).
C. Runtime Complexity Analysis
for
(III) and (IV)
Step (I), requires s ∈ O(log n − log log |U|) compar-
isons (see Theorem 3). Step (II) requires 2b|Ds| log |Ds|
|Ds| elements with bit
binary gates [31]
length b.
require O(|Ds|) operations each.
Steps
Since |Ds| ∈ O(log |U|) (Lemma 1), our overall runtime
is O(max{log n − log log |U|, log |U| · log log |U|}), which is
sublinear in n for n > log |U|log |U|+1, and sublinear in |U|
otherwise.
D. Security
We combine different secure computation techniques in
the semi-honest model introduced by [24] where corrupted
protocol participants do not deviate from the protocol but
gather everything created during the run of the protocol. Our
protocol consists of multiple subroutines realized with secure