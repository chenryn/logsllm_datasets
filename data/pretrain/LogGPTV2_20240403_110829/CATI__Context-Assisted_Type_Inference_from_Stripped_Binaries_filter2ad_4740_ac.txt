(cid:4)
iC)
Z
(4)
i=1
i=1
i=1
(cid:4)
ij denotes the total conﬁdence of VUCs of V
where,
classiﬁed to class j, and the highest make the ﬁnal decision.
i=1 Z
VI. IMPLEMENTATION
In this section, we present the implementation of our system.
CATI extracts the data ﬂow of the target variable from stripped
binaries using IDA Pro [12]. We developed a python script that
uses IDA APIs to automatically achieve this. To annotate the
correct type for the training VUCs, we parse DWARF [26]
debug information from non-stripped binaries. After obtaining
the tracing information of each variable assisted by IDA
Pro, we implement a tree-like multi-stage classiﬁer using the
machine learning package Keras [28]. Finally, we utilize a
python script to vote for the ﬁnal result for each variable. For
the evaluation part, we use machine learning library scikit-
learn [29] which calculates the metrics for each stage.
All our experiments were conducted on a PC with 16GB
memory, 1 Intel i7-6700k CPU(4.0 GHz) and 1 NVIDIA GTX
1070 GPU with 8GB graphics memory.
VII. EVALUATION
A. Setup
Here, we describe our dataset and metrics for evaluation of
the performance of CATI in each aspect.
Data Set. We create a comprehensive training data set from
several open-source software projects. Here we enumerate
some projects of different categories: OS tools (GCC, core-
utils, binutils, etc), network programs (php, nginx, etc), com-
putationally intensive programs (xpdf, zlib, etc) and projects
like R and Python which integrate packages of different
categories. In total, 2141 binaries are used to train the models.
We choose popular and well-written projects so that it reviles
the distribution of types in reality. For the diversity of training
data, we build each project with different optimization levels (-
O0 to -O3), but all with the same compiler—GCC. The reason
for controlling the same compiler to compile the applications
Fig. 5. Multi-stage classiﬁer.
our decision to recover 19 of them. Firstly, we choose to
classify all of the types of non-pointer variables except union
because union has various behaviors that cannot be classiﬁed
into one class. Secondly, we divide the type of pointer into
three types: pointer to void, pointer to struct,
pointer to arithmetic. The ﬁrst two types are easy
to think over. The appearance of the third type is because the
static-based approach cannot capture the run time behavior of
the variable, and the instant pointed by the variable cannot be
ﬁxed. Therefore, we cluster all the basic variable types to a
set of the types called pointer to arithmetic. To the
best of our knowledge, we have achieved the largest amount
of variable types at present, and we cover all the types which
have been recovered by the previous works.
B. Prediction and Voting
After the multi-stage classiﬁer is trained, we can use it to
predict the most possible type for each VUC extracted from
unseen stripped binaries and vote for the ﬁnal result.
Firstly, we take the same measures as the training set
data for the binaries from the testing set: disassemble, locate
variables, extract VUCs, generalization, and embedding. Here,
we leverage IDA Pro to help us to disassemble the binary
code and locate the variables in every binary. The embedding
model is the one trained from the training set. Then, with
prepared variables V = {V U C1, V U C2, ..., V U CN}, where
V U Ci = {Insi−10, .., Insi−1, Insi, Insi+1, ..., Insi+10}, we
input each VUC into the classiﬁer to predict the result.
Here, we deﬁne the classiﬁer of each stage as function
Su, such as S2−1 representing the classiﬁer of Stage 2-
1. Variable V containing N VUCs is represent as V =
[V U C1, V U C2, ..., V U CN ]. V is a three-dimensional tensor,
with a size of N × L× E. N, L, E respectively represent the
number of VUC, length of VUC, length of embedding size.
Here, L and E are constants, which equal to 21 and 32.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:25:44 UTC from IEEE Xplore.  Restrictions apply. 
(cid:26)(cid:20)
Stage1
Stage2-1
Stage2-2
Stage3-1
Stage3-2
Stage3-3
bash
0.93
0.93
0.93
0.76
0.68
0.68
0.91
0.91
0.91
0.88
0.80
0.83
1.00
0.33
0.50
0.91
0.85
0.88
bison
0.89
0.89
0.89
0.76
0.76
0.75
0.89
0.88
0.88
0.92
0.91
0.91
1.00
1.00
1.00
0.84
0.78
0.81
cﬂow
0.88
0.89
0.88
0.79
0.79
0.78
0.81
0.82
0.81
0.92
0.60
0.68
1.00
1.00
1.00
0.87
0.80
0.83
gawk
0.88
0.88
0.88
0.77
0.78
0.77
0.82
0.82
0.81
0.81
0.73
0.76
1.00
1.00
1.00
0.73
0.72
0.72
P
R
F1
P
R
F1
P
R
F1
P
R
F1
P
R
F1
P
R
F1
Stage1
Stage2-1
Stage2-2
Stage3-1
Stage3-2
Stage3-3
bash
0.95
0.95
0.95
0.76
0.64
0.63
0.92
0.92
0.92
0.92
0.87
0.89
0.00
0.00
0.00
0.93
0.91
0.92
bison
0.92
0.92
0.92
0.74
0.71
0.70
0.92
0.90
0.90
0.90
0.86
0.87
1.00
1.00
1.00
0.84
0.83
0.83
cﬂow
0.92
0.92
0.92
0.79
0.76
0.75
0.92
0.92
0.92
0.89
0.67
0.71
1.00
1.00
1.00
0.90
0.86
0.88
gawk
0.92
0.91
0.91
0.71
0.72
0.69
0.87
0.87
0.86
0.81
0.76
0.77
1.00
1.00
1.00
0.79
0.81
0.79
P
R
F1
P
R
F1
P
R
F1
P
R
F1
P
R
F1
P
R
F1
gzip
0.94
0.93
0.93
0.71
0.70
0.70
0.91
0.91
0.91
0.93
0.81
0.84
grep
0.89
0.89
0.89
0.86
0.87
0.86
0.88
0.88
0.88
0.81
0.81
0.81
1.00
1.00
1.00
0.75
0.77
0.74
0.75
0.74
0.74
TABLE III
–
–
–
gzip
0.96
0.96
0.96
0.76
0.75
0.74
0.96
0.96
0.96
0.93
0.91
0.92
grep
0.91
0.91
0.91
0.87
0.85
0.85
0.92
0.92
0.92
0.82
0.81
0.81
1.00
1.00
1.00