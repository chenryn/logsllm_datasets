I have the following:
    // third-party.d.ts
    declare module foo.bar {
      export interface IBar {
        a: T;
      }
    }
    // bar.ts
    module bar {
      export interface IBar {
        a: number;
      }
    }
    // main.ts
    module foo.main {
      import IBar = foo.bar.IBar;
      import IBar2 = bar.IBar;
      export var a: IBar;
      export var b: IBar2;
    }
compiling with:
    tsc -d bar.ts main.ts third-party.d.ts
fails with:
    main.ts(5,17): error TS2314: Generic type 'IBar' requires 1 type argument(s).
The issue appears to be because the `foo.main` shares the `foo` namespace with
the third party `foo.bar` and cannot distinguish the thirty party namespace
from the top-level `bar` namespace.
Updating the main file to drop the imports:
    module foo.main {
      export var a: foo.bar.IBar;
      export var b: bar.IBar2;
    }
yields this error:
    main.ts(5,17): error TS2305: Module 'foo.bar' has no exported member 'IBar2'
Is there any way to resolve the name clash? This simple example aside, you can
imaging a large project which contains a module like `somecompany.utility`,
which would prevent the use of any top-level `utility` module in the future.