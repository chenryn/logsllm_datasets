# 复杂性的经济支柱

肯特·贝克，极限编程的创始人和测试驱动开发（TDD）的支持者，向我介绍了一个模型，我称之为“复杂性的经济支柱”（EPC）。该模型确定了在产品或服务开发过程中可能阻碍进展的四大复杂性支柱。我们可以将产品或服务视为一个系统。以下是这四个支柱：

1. **状态**：系统可以处于的配置数量和性质。
2. **关系**：系统各部分（包括人工操作员）之间交互的方式数量和性质。
3. **环境**：外部环境给系统带来的不确定性。
4. **不可逆性**：系统变更容易被撤销的程度。

这些形式的复杂性都可以存在于系统中。如果发现业务目标正受到复杂性的严重阻碍，可以通过限制其中一个支柱来专注于其他可能更容易管理的支柱。早期的福特汽车公司就是通过这种方式解决复杂性的典型例子：在几年内仅提供黑色的Model T，并通过装配线限制工序自由度，从而控制系统状态。

在软件系统中，我们很少能够限制状态。特别是在现代系统（如微服务体系结构）中，控制微服务之间的关系也变得困难。然而，不可逆性是一个值得思考的有趣支柱。如果我们能快速做出决策、尝试并回滚，就能在不需要的系统影响或造成太大损害之前，对复杂系统的不合理性质做出反应。

微服务通过分离部署并允许小部件异步更改和回滚来帮助实现这一要求。一些开发实践（如XP和敏捷方法）还优化了可逆性，在开发流程中设置常规检查点，以便快速轻松地测试和回滚想法。不变的架构、持续交付以及基于云计算的部署都可以说掩盖了这一复杂性支柱，使我们能够专注于处理其他三个支柱。

对于大多数软件团队来说，至少有一个支柱是难以改变的。可能是由于已经做出的决策或业务目标和目的的限制。因此，需要其他方法来应对复杂性。

# 开始混沌

当我在2015年初加入Netflix时，混沌猴子已经存在了近五年。随着Netflix在2010年和2011年从数据中心迁移到云端，扩展配置文件从垂直变为水平。在云中，服务运行在更多但较小的实例上。由于实例数量增加，任意给定时间内实例灾难性失败或突然消失的可能性更大。

如果消失的实例是单点故障（SPOF），或者流量配置文件的突然变化导致级联故障，这将影响可用性。有许多易于访问的最佳实践可以帮助防止这种情况。但在Netflix，没有首席技术官或首席架构师来选择最佳实践或发布所有微服务必须遵守的法令。最佳实践虽然随手可得，但缺乏强制推广机制。

Netflix的工程师们决定直面他们想要解决的问题（实例消失），而不是口头规定最佳实践。混沌猴子应运而生：它每天会随机选择每个服务的一个实例，并在工作时间粗鲁地关闭它。

突然间，许多工程师无法按计划完成路线图中的任务。混沌猴子给他们制造了一个问题，放在他们的队列前面。幸运的是，工程师们非常擅长解决眼前的问题。所有这些独立的小型工程团队现在都能步调一致，使其服务能够适应实例消失。

这个策略取得了成功：在四年中，Netflix经历了许多实例消失的情况，但只有一次与SPOF相关的故障。绝大多数微服务现在都能够适应该事件。

在一个案例中，混沌猴子确实导致了一次中断，终止了一个实例。幸运的是，该服务刚刚部署，负责的工程师仍在办公室，因此很容易就近解决故障。如果没有混沌猴子，情况可能会更糟；该实例可能在部署数月或数年后变得不稳定，且没有任何迹象能够及时识别和修复问题。

# 安全和复杂性的权衡

人为因素专家Jens Rasmussen提出了一个模型，描述了系统如何随时间演变，逐渐远离工作人员可见的边界。这三个边界是经济、工作负载和安全。跨越这些边界直接导致失败。例如，如果某样东西变得过于昂贵，它就跨越了经济学的界限，可能导致公司停业。如果某件事变得太多，则工作量边界被跨越，意味着不能在指定时间内完成任务，让大家都感到不满，等等。

在大多数软件工程情况下，对团队预算进行建模或了解运行应用程序的资源成本并不困难，这就是经济学中关注的总成本。同样，对于工作负载，在大多数情况下，工程师对有多少人在开发和维护项目、投入多少小时以及取得进展的难度有良好的直觉，这些都是信号。成本超支、同事抱怨工作时间过多、对紧迫性的期望——这些也是信号。这些信号提供了对边界的感知。

管理的作用之一是加强这一点，并在团队或组织偏离边界太近时发出强烈信号。“嘿，我们的钱用完了，只剩下两个月的时间来建造这个功能了”，这是一个很好的经济学界强烈信号的例子。大多数软件项目都有经济性和工作负载边界的强烈信号。

关于安全，情况却并非如此。软件工程师不知道他们的系统有多脆弱，直到它意外崩溃。在大多数情况下，没有安全信号。因此，软件项目自然会激励其系统更便宜且更易于操作。它们从经济边界和工作负载边界漂移，向安全边界漂移。随着时间推移，系统会逐渐减少成本，做更多的工作，而且操作者不知道，它不太安全。

混沌猴子的美妙之处在于它创造了安全信号。如果实例消失时跨越了安全边界，很快就会发现，尤其是在工作时间损失实例时。当这种情况发生时，易受实例消失影响的所有问题都会暴露出来。这是向服务所有者发出的一个强烈信号，表明他们到底有多安全。因此，Netflix的微服务能够应对此类安全问题，防止系统逐渐陷入不太安全的安排。

# 混沌变大

在混沌猴子的成功基础上，Netflix决定进行更大规模的尝试。我们不仅终止实例，还关闭整个区域。这被称为“混沌金刚”。

如果你不熟悉云术语，可以将区域视为主要数据中心。Netflix的控制平面部署在三个地理位置分散的区域，处理与流服务交互的所有设备的流量。Netflix的流量团队已经建立了业务流程，使我们能够检测一个区域中的严重中断，并将所有客户转移到其他两个区域。由于仅控制流量就占北美互联网流量的3%以上，这是一个巨大的转变。

混沌金刚定期进行演练，以验证网络团队建立的体系。更重要的是，它验证了所有微服务都能在区域中断中生存下来。它为微服务所有者生成安全信号，防止系统逐渐进入不太安全的配置。

# 形式化

到2015年底，混沌猴子和混沌金刚在Netflix广为人知。这两个程序为小规模中断（实例消失）和大规模中断（区域消失）生成了相当可靠的安全信号。但对于系统效应，仍然没有太多安全信号：微服务之间的所有有趣的相互作用，这些相互作用导致不可预见的效果，无论是好的还是坏的。

这样的系统会是什么样子？我得到了一个小预算（两名员工），建立了一个混沌团队。我在公司范围内提问：“什么是混沌工程？”最常见的答案是某种形式的“那就是我们在生产系统中破坏事物的时候”。我问了整个行业，得到了同样的回答。这个答案的问题在于它不是一个定义。很多事情在生产中可能会中断，且对业务没有价值。事实上，从系统内部破坏生产中的事情很容易做到，但我怀疑，如果这是他们唯一的目标，混沌团队在公司内部不会得到任何赞赏。