> 我们是由Eur3kA和flappypig组成的联合战队r3kapig。本周末，我们参与了趋势科技举办的TrendMicro CTF 2018
> Qualifier 并以第十名的成绩成功晋级12月在日本东京举办的TrendMicro CTF 2018
> Final。我们决定把我们做出来的题目的writeup发出来分享给大家。  
>
> 另外我们战队目前正在招募队员，欢迎想与我们一起玩的同学加入我们，尤其是Misc/Crypto的大佬，有意向的同学请联系PI:EMAIL。给大佬们递茶。  
>  由于是国际比赛，所以我们的首发wp为英文版，中文版正在路上～
## Analysis-Offense
### 200
I just modified my callgrind solver to solve this challenge.
    $ cat oracle.py
    #!/usr/bin/python -u
    #-*- coding:utf-8 -*-    
    # Let's exploit easy and quick!
    # 1) apt install valgrind
    # 2) use callgrind to find instruction count
    flag = 'TMCTF{'
    n = 0
    import os
    import sys
    # format given by admin
    charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789{}"
    while True:
        n += 1
        total_call_count = {}
        for i in charset:
            cmd = "valgrind --tool=callgrind --dump-instr=yes --callgrind-out-file=temp/call_count ./oracle '" + flag + i + "A'  2>&1"
            # print(cmd)
            res =  os.popen(cmd).read()
            call_count = res.split("Collected : ")[1].split()[0]
            call_count = int(call_count)
            # total_call_count { 'call_count': [occured_count, occured_by], ... }
            if not total_call_count.get(call_count):
                    total_call_count[call_count] = [1, [i]]
            else:
                    total_call_count[call_count][0] += 1
                    total_call_count[call_count][1].append(i)
            print(n, i, call_count)
        ## get lowest/highest idx,
        idx_call_count = total_call_count.keys()
        print(idx_call_count)
        idx_call_count.sort()
        highest_count_idx = idx_call_count[-1]
        lowest_count_idx = idx_call_count[0]
        # get highest idx
        flag_char = total_call_count[highest_count_idx][1][0]
        flag += flag_char
        print(n, total_call_count, highest_count_idx, flag)
### 300
We get 3 rsa public keys here, and there are no other attack method, just GCD
them and found the GCD number to factor 3 n.
    c1=18700320110367574655449823553009212724937318442101140581378358928204994827498139841897479168675123789374462637095265564472109735802305521045676412446455683615469865332270051569768255072111079626023422
    e1=65537
    n1=23795719145225386804055015945976331504878851440464956768596487167710701468817080174616923533397144140667518414516928416724767417895751634838329442802874972281385084714429143592029962130216053890866347
    c2=27979368157170890767030069060194038526134599497456846620984054211906413024410400026053694007247773572972357106574636186987337336771777265971389911503143036021889778839064900818858188026318442675667707
    e2=65537
    n2=46914096084767238967814493997294740286838053572386502727910903794939283633197997427383196569296188299557978279732421725469482678512672280108542428152186999218210536447287087212703368704976239539968977
    c3=24084879450015204136831744759734371350696278325227327049743434712309456808867398488915798176282769616955247276506807739249439515225213919008982824219656080794207250454008942016125074768497986930713993
    e3=65537
    n3=24543003393712692769038137223030855401835344295968717177380639898023646407807465197761211529143336105057325706788229129519925129413109571220297378014990693203802558792781281981621549760273376606206491
    def int2text(message):
        result=""
        while message>0:
            result = chr(int(message)%int(256))+ result
            message=int(message)/int(256)
        return result
    import primefac
    p1=primefac.gcd(n1,n2)
    q1=n1/p1
    d=primefac.modinv(e1,(p1-1)*(q1-1))%((p1-1)*(q1-1))
    m1=pow(c1,d,n1)
    print int2text(m1)
    p2=p1
    q2=n2/p2
    d=primefac.modinv(e2,(p2-1)*(q2-1))%((p2-1)*(q2-1))
    m2=pow(c2,d,n2)
    print int2text(m2)
    p3=primefac.gcd(n2,n3)
    q3=n3/p3
    d=primefac.modinv(e3,(p3-1)*(q3-1))%((p3-1)*(q3-1))
    m3=pow(c3,d,n3)
    print int2text(m3)
### 400
This challenge is a white-box protocol analysis aimed to break the
authentication system.
Following is the work flow of this authenticatoin system:
  1. the user send a login request with username to the server
  2. the server send Nonce and ChallengeCookie = Base64Encode(RandomIV | AES128-CBC(RandomIV,Nonce | U | Timestamp, KS)) back to the user
  3. the user send the challenge response(R = SHA256(Nonce | P), where P is the password for authentication) to the server
  4. the server verify whether the password and username is right or not. if right the server will issue a ticket to user, Ticket = Base64Encode(RandomIV | AES128-CBC(RandomIV,Identity | TicketTimestamp, KS)) where Identity = JSON string: { user: U, groups: [ G1, G2, ... ] }  
where G1, G2, ... are the names of the groups that U belongs to
  5. the user can use the ticket to run some command, if the username in the ticket is admin, we can run the command "getflag"
to break this authentication protocol, we can send a login request with
username 'AAAAAAAA' + '{"user": "admin", "groups": ["admin"]}\x00' to the
server.
the server will response with Base64Encode(RandomIV | AES128-CBC(RandomIV,
Nonce | 'AAAAAAAA{"user": "admin", "groups": ["admin"]}\x00 | Timestamp, KS)).
since the AES128-CBC is a block cipher with CBC mode, we can use the
AES128-CBC(RandomIV, Nonce | 'AAAAAAAA) as the newIV, and the remain part will
be AES128-CBC(newIV,{"user": "admin", "groups": ["admin"]}\x00 | Timestamp),
which is a valid admin ticket.
then we can use the ticket to run getflag command and get the flag.
    from pwn import *
    import base64
    from Crypto.Cipher import AES
    io=remote("localhost",9999)
    def toNullTerminatedUtf8(s):
        return unicode(s).encode("utf-8") + "\x00"
    payload="\x01"+"A"*8+'{"user": "admin", "groups": ["admin"]}\x00'
    io.send(payload)
    data=io.recv(1000)
    nounce=data[1:9]
    cookie_b64=data[9:]
    cookie = base64.b64decode(cookie_b64)
    iv=cookie[:16]
    fake_ticket=cookie[16:]
    fake_ticket_b64=base64.b64encode(fake_ticket)
    cmd="\x06"+fake_ticket_b64+"\x00"+"getflag\x00"
    io.send(cmd)
    io.interactive()
## Reverse-Binary
### 100
We first find base64-encoded data from the pcap file.
Then, reverse the pyinstaller binary and modify the script to solve the
challenge.
    import struct, os, time, threading, urllib, requests, ctypes, base64
    from Cryptodome.Cipher import AES, ARC4
    from Cryptodome.Hash import SHA
    infile = 'flag'
    encfile = 'orig.CRYPTED'
    keyfile = 'keyfile'
    sz = 1024
    bs = 16
    def decrypt_request():
        pcap_req = "35998fdb7fe3b7940b9375a68a654ff949c58dcb9b1aebb048d6aa74d905b7b0c6e04b404eb61129f92ad912703850201582ce39e77bfe739fec528741b202f8923a9f8d6303617d8e6e35a0d644115e238522c6d0cacd1afdae23050452c998e39a"
        _hash_chksum = pcap_req[:40]
        _hash_content = pcap_req[40:]
        dec = ARC4.new(_hash_chksum.decode('hex'))
        return dec.decrypt(_hash_content.decode('hex'))
        # 'id=d1&key=2f87011fadc6c2f7376117867621b606&iv=95bc0ed56ab0e730b64cce91c9fe9390'
    def generate_keyfile():
        # n = hex(ord(id) + bs)
        n = hex(ord('d1'.decode('hex')) + 16)
        iv = "95bc0ed56ab0e730b64cce91c9fe9390".decode('hex')
        key = "2f87011fadc6c2f7376117867621b606".decode('hex')
        key = ''.join((chr(ord(x) ^ int(n, 16)) for x in key))
        iv = ''.join((chr(ord(y) ^ int(n, 16)) for y in iv))
        keyfile = open("keyfile", "wb")
        keyfile.write(key + iv)
        keyfile.close()
        print(n, iv, key)
        return True
    def decrypt():
        global keyfile
        key = ''