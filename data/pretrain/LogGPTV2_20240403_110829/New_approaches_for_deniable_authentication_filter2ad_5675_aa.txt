title:New approaches for deniable authentication
author:Mario Di Raimondo and
Rosario Gennaro
New Approaches for Deniable Authentication
[Extended Abstract]∗
Mario Di Raimondo
Dipartimento di Matematica ed Informatica
Universit`a di Catania, Italy
PI:EMAIL
ABSTRACT
Deniable Authentication protocols allow a Sender to authen-
ticate a message for a Receiver, in a way that the Receiver
cannot convince a third party that such authentication (or
any authentication) ever took place.
We present two new approaches to the problem of deniable
authentication. The novelty of our schemes is that they do
not require the use of CCA-secure encryption (all previous
known solutions did), thus showing a diﬀerent generic ap-
proach to the problem of deniable authentication. This new
approach is practically relevant as it leads to more eﬃcient
protocols and security reductions.
In the process we point out a subtle deﬁnitional issue for
deniability. In particular we propose the notion of forward
deniability, which requires that the authentications remain
deniable even if the Sender wants to later prove that she
authenticated a message. We show that forward deniability
is not implied by the original notion of deniability, by show-
ing some deniable protocols which are not forward deniable.
Our new proposals are forward deniable.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection – Authentication; K.4.1
[Computer and Society]: Public Policy Issues – Privacy
General Terms
Security, Theory
Keywords
Authentication, deniability, zero-knowledge, concurrency
∗For lack of space all the proofs and some sections are omit-
ted, but a full version containing all of them is available from
the authors.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’05, November 7–11, 2005, Alexandria, Virginia, USA.
Copyright 2005 ACM 1-59593-226-7/05/0011 ...$5.00.
Rosario Gennaro
IBM T.J.Watson Research Center, USA
PI:EMAIL
1.
INTRODUCTION
Authentication is arguably the most important security
goal in cryptography. When communication happens over a
real-life network we need to make sure that we are talking
to the right person and not with an impostor.
Authentication, thus, has received a lot of attention in the
cryptographic literature. Authentication methods follow the
usual distinction between private and public key techniques.
In a private key scenario, two parties Alice and Bob share a
secret key k and use that to prove to each other that they are
the originators of the messages. Usually this is done by Alice
sending a message m to Bob together with a tag t, which is
computed as a function of the message m and the key k. The
pair m, t is veriﬁed by Bob as coming from Alice if the tag
matches the one that B can compute on his own, with m and
k. The tag is called a message authentication code and must
satisfy some security properties (namely unforgeability) in
order for this technique to be meaningful.
On the other hand in the public key scenario, message au-
thentication has been long associated with digital signatures
[7]. In this case, Alice is publicly associated with a public
key pkA which is matched to a secret key skA known only to
her. When Alice wants to authenticate a message m, again
she computes a tag t as a function of the secret key skA
and the message m. The tag in this case is called a digital
signature, and again must satisfy some meaningful notion
of unforgeability (see [16]). The interesting twist is that the
tag can be veriﬁed by anybody using the public key pkA.
This last property is a very useful feature of digital sig-
natures, as it provides the crucial non-repudiation feature.
Once Alice signs a message, she is bound to it. Everybody
can verify that she signed it. This is very useful when digital
signatures are used for contracts or commerce transactions,
where conditions must be enforced in case of dispute.
On the other hand, this feature raises important privacy
issues. What if Alice wants to say something very private
to Bob, in a way that Bob believes it comes from her, but
also in a way that Bob cannot convince a third party that
Alice said such a thing? Or even that Alice spoke to Bob at
all? Clearly digital signatures do not allow Alice to do this.
Notice that message authentication codes do not provide
for non-repudiation, as the tag could be easily computed by
the receiver. In other words once Bob gets m, t from Alice,
he is convinced that it comes from her (as apart from Bob
she is the only one who can compute t), but Bob can’t show
this to Charlie and convince him that it comes from Alice,
as Bob could have computed t on his own.
But what if Alice and Bob don’t have a shared secret
key? They could, in principle, run a key exchange protocol
(see for example [7, 3]). At the end of such protocol Alice
and Bob hold a shared secret key k, and then they could use
it to authenticate messages. But since most of the known
key exchange protocols use digital signatures to authenticate
the parties running them, at the end Bob can still convince
Charlie that he spoke to Alice, even if not speciﬁcally about
the subject of the conversation.
Deniable Authentication The issue of deniability in pub-
lic key authentication was brought forward and formalized
by Dwork, Naor and Sahai, in their groundbreaking paper
on concurrent zero-knowledge [10]. The paradigm suggested
in [10] is to replace the non-interactive communication of a
digital signature, with a communication protocol between
Alice and Bob on input a message m. At the end of the
protocol Bob is convinced that Alice wants to authenticate
m to him, but will not be able to convince a third party
as his view of the communication can be easily produced a
posteriori even without the knowledge of Alice’s secret key
skA. This property is called deniability.
This protocol should maintain some meaningful unforge-
ability property, i.e.
it should be hard for an adversary to
convince Bob that Alice wants to authenticate a message m.
Dwork et al. point out that, since we are introducing
interaction, we should consider what happens in a concur-
rent scenario, i.e. one in which an adversary may sched-
ule executions of protocols and delay messages in arbitrary
ways. That is, unforgeability and deniability should still
hold against such a powerful attacker. This turned out to
be a very powerful attack model, especially when consider-
ing zero-knowledge protocols.
The basic solution for deniable authentication based on
encryption can be summarized as follows (this protocol ap-
peared ﬁrst in [22], and similar protocols appear also in [9,
10]). Bob chooses a random key k and encrypts it under Al-
ice’s public key. Alice decrypts such key and uses it to MAC
the message m. Bob’s belief that Alice is really authenticat-
ing m comes from the fact that she is the only one able to
decrypt k. On the other hand, Bob could create the whole
transcript on his own, so the authentication is deniable.
The unforgeability of the above scheme is proven in [22,
3, 9, 10] if the encryption scheme is secure against adaptive
chosen-ciphertext attack (CCA2) [26, 9]. Informally, an en-
cryption scheme E is said to be CCA2-secure if the secrecy
of a message m, encrypted as c = Epk(m), holds up even if
an adversary is allowed to obtain decryption of any cipher-
text of her choice (except of course c). It should be clear why
this property is needed in the above scheme: Alice is in eﬀect
acting almost like a decryption oracle, on ciphertexts that
are under the control of Bob, whenever asked to authenti-
cate a message (the “almost” comes from the fact that Alice
does not answer directly k, but rather M ACk(m)).
Surprisingly deniability for the above scheme cannot be
easily proven, even if E is CCA2-secure. No attack is known,
but no proof is known either1. In order to make the above
scheme provably deniable, a basic challenge-response sub-
protocol is added in [10]. However this introduces a rewind-
ing step in the proof, which causes the deniability prop-
erty to hold only if copies of the protocol are performed se-
quentially, and not concurrently. In order to overcome this
1A proof of deniability for this protocol under no-standard
assumptions has been provided only recently [8].
problem Dwork et al. introduce timing assumptions on the
network to limit the number of concurrent executions that
can be performed by the adversary in the network. We re-
fer to the above solution as the CCA-paradigm for deniable
authentication.
Other approaches: In the literature there are alternatives
that require the receiver/veriﬁer to have a public key: Des-
ignated Veriﬁer Proofs [20] permit to create signatures that
convince only the intended recipient (using his public key);
Ring Signatures [29] permit a member of an ad hoc group to
sign a message on behalf of the group, i.e. it is impossible to
trace the actual signer inside the group. This solution can
be used to create deniable signatures by choosing the sender
and the receiver as members of the group: the signature is
deniable as the receiver could have created it too. Notice
that, as observed in [27], in ring signatures the public keys
should be registered with a proof-of-knowledge of the corre-
sponding secret-key: suppose that the receiver B registers a
public key pkB that is equal (or derived through a suitable
one-way function) to A’s one. If the ring signature has been
created using these two public keys the involvement of A in
the signature process is hardly deniable, since B has a way
of proving that he does not know its own secret key.
In [27] there is another solution named Deniable Ring Au-
thentication that combines the encryption-based approach of
Dwork et al. with the Ring Signatures: one member (or a
proper sub-structure) of a group can sign a message in a de-
niable way towards a receiver that is not required to have a
public key. This solution can be considered as an extension
of the Dwork et al. work, so it falls into the CCA-paradigm.
The requirement of a registered public key for both parties
creates a less general model that does not ﬁt in all practical
applications (e.g.
the Internet, where most users do not
have public keys). Thus, we can conclude that in the most
general setting, where only the prover is required to own
a public key, all the known solutions which are secure in a
concurrent setting follow the CCA-paradigm.
1.1 What if the Sender changes her mind?
In the deﬁnition of deniable authentication we assume
that the Sender wants to preserve his privacy, and thus pre-
vent the Receiver from proving to a third party that he
received a message from the Sender. However there are
scenarios in which deniability is actually a concern to the
Receiver’s privacy.
Consider the following example. Alice and Bob are in-
volved in some shady transaction, like drug-dealing or money
laundering. Alice wants to make sure that her communi-
cations to Bob cannot be later linked to her, so she uses
deniable authentication. Bob thinking that such communi-
cation is indeed deniable, stores all the messages in his hard
disk. Later the operation is busted by the police and Alice
and Bob end up in jail, and Bob’s computer is seized. Al-
ice is oﬀered a sweet deal in exchange for her cooperation
in linking Bob to the crime (Bob is claiming the messages
in his hard disk are not coming from Alice, that he never
talked to her, actually does not even know her, they are all
simulations!!). Alice produces some piece of secret informa-
tion (her secret key for example) that indeed shows that the
transcripts in Bob’s hard disk are actually authentic and
not simulations. Bob ends up in jail, cursing himself for
dropping out of crypto class in graduate school.
The above example shows that deniability is not just a
concern of the Sender, but also of the Receiver. What we
would like to happen is that if the Sender acts honestly
during the protocols, she should not be able at a later stage
to claim the messages as authentic. We call this property
forward deniability, as it has some aﬃnity to the notion of
forward secrecy2.
We would like to point out that the above CCA-based
paradigm is indeed forward deniable. However the issue of
forward deniability has not been discussed in the literature,
and indeed we show that some proposed deniable protocols
are not forward deniable (see below).
1.2 Our Contribution
New Approaches. The ﬁrst question we asked was:
“Are there other approaches to concurrent deniable authen-
tication, besides the CCA paradigm?”3. We provide a posi-
tive answer to this question. We show that deniable authen-
tication can be constructed out of diﬀerent primitives.
The question is interesting for both theoretical and prac-
tical reasons. On the theoretical front, it is not clear why
encryption must be needed at all, to build authentication
protocols. One of our solutions uses a special kind of com-
mitment scheme, thus showing that deniable authentication,
while linked to non-malleability issues, is not linked to non-
malleable encryption. The practical reason is that by cre-
ating new paradigms for deniable authentication we may
end up with more eﬃcient protocols or protocols based on
weaker computational assumptions. This is indeed what we
do in this paper.
We present two new schemes for deniable authentication.
The ﬁrst scheme eliminates the need for an encryption
scheme altogether. We build deniable authentication pro-
tocols, using special kinds of trapdoor commitment schemes
(the multi-trapdoor commitments of Gennaro [12]). The
protocols using this approach are incredibly simple and ef-
ﬁcient: the cost of the protocol is twice that of a regular
digital signature 4.
The second scheme can be seen as an improvement of
the CCA-paradigm when implemented with the Cramer-
Shoup’s CCA schemes in [6]. Namely, we use some spe-
ciﬁc properties of the projective hash functions [6] used in
those schemes to build a new kind of deniable authentica-
tion. The scheme can still be thought as the encryption of a
random key which is then used to MAC the message; how-
ever, it is not clear how to argue if the encryption module is
CCA-secure. The net result is that we save one modular ex-
ponentiation compared to the CCA-paradigm solution, and
the transcripts are shorter.
2In forward secrecy if a party’s key is compromised, only
the secrecy of future messages is compromised, while past
messages are still safe. Here if the Sender is “compromised”
at some time t he will not be able to revoke the deniability
from transactions happened before time t.
3As stated in Section 1 , we are investigating in the gen-
eral setting where only the prover is requested to have a
registered public key.
4We note that we are only considering strong deniability in
which Alice can deny to have ever authenticated anything
to Bob. For weak deniability, where Bob can prove to have
spoken to Alice but not the content of what Alice authenti-
cated, signature schemes are suﬃcient as we pointed above
in the Introduction, and thus weakly deniable schemes can
be done at the cost of a single signature.
In the follow-
ing when referring to deniability we will always refer to the
strong one.
Improved Efficiency and Reductions. Our schemes are
very eﬃcient, and require four rounds. They can be proven
secure in a concurrent setting, but the proof of deniability
requires timing assumptions.
On the other hand the proof of unforgeability holds even
without timing assumption: while this is not a new feature