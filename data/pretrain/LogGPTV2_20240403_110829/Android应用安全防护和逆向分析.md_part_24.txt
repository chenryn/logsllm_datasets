#### 15.2 逆向基本知识 {.bodycontent-title2}
要学习逆向，除了有利的工具，还需要了解一些基本知识，比如smali语法、arm指令、Android中的NDK开发等，因为这些都是在逆向过程中经常会用到的知识。
smali语法是逆向的基础核心知识，有的人觉得这个是否是一门新的语言？其实不然，它的语法非常简单，熟悉起来非常方便。比如后面章节会利用smali语法手动插入代码，而并不是需要手动编写smali代码，可以先用Java编写好功能，再反编译成smali代码，再手动插入即可。但是简单的smali语法还是需要看懂，比如赋值、方法调用等操作，具体smali语法知识，在后面章节会详细介绍。
arm指令就不多说了，在大学期间就有这门课，不过很多人可能在项目开发中并没有用到，但是arm指令知识对于逆向来说也是至关重要，也是最为复杂的，现在很多应用为了更加安全就把代码都放到了so中，这样在逆向so文件的时候就必须要了解arm指令，才能大致看懂逻辑代码，才能继续后面工作。arm指令也并非那么复杂，多看多读就会慢慢熟练了。相关命令在后面章节会详细介绍。
[]{#090.xhtml}
#### 15.3 打开系统调试总开关 {.bodycontent-title2}
本节将介绍如何在不需要反编译的情况下添加android：debuggable属性，就可以进行调试。现在已经有很多工具可以做这件事了，先来说说具体的原理吧。
其实Android中有一些常用的配置信息都是存放在一个文件中，如下所示，比如设备的系统、版本号、CPU型号等信息，这个文件位置在：/system/build.prop。
::: bodypic-c
![](OEBPS/Images/233-i.jpg){.calibre568}
:::
::: bodypic-c
![](OEBPS/Images/234-i.jpg){.calibre569}
:::
查看文件的内容，可以看到很多设备的信息，而且这些ro开头的文件表示这些属性值是只读的，不能进行修改的。
同时Android中提供了两个命令来操作这些信息：getprop和setprop命令，如下所示：
::: bodypic-c
![](OEBPS/Images/234-2-i.jpg){.calibre570}
:::
查看系统的sdk版本号如下所示：
::: bodypic-c
![](OEBPS/Images/234-3-i.jpg){.calibre412}
:::
设置系统的sdk版本号为22，可是这里并没有修改成功，原因是因为ro开头的属性是不允许后期修改的。如果修改，需要重新编译系统镜像文件boot.img，但是这里并不是本节介绍的重点。
既然Android中的一些系统属性值存放在一个文件中，而且这些值是只读的，当然不仅可以通过getprop命令读取，有一个API也是可以直接读取的，就是：
::: bodypic-c
![](OEBPS/Images/234-4-i.jpg){.calibre571}
:::
其实这个方法是native层实现的，具体就不分析了。那么这个文件是存储这些属性值的，是谁来进行解析加载到内存中，能够给每个App都能访问到呢？
这个工作就是init.rc进程操作的，系统启动时第一步就是解析init.rc文件，这个文件是在系统的根目录下，这里会做很多初始化操作，同时会做属性文件的解析工作，所以Android属性系统通过系统服务提供系统配置和状态的管理。为了让运行中的所有进程共享系统运行时所需要的各种设置值，系统会开辟一个属性存储区域，并提供访问该内存区域的API。所有进程都可以访问属性值，但是只有init进程可以修改属性值，其他进程若想修改属性值，需要向init进程发出请求，最终由init进程负责修改属性值。
上面说到的是system/build.prop文件。里面主要是系统的配置信息，其实还有一个重要文件在根目录下面：default.prop，如下所示：
::: bodypic-c
![](OEBPS/Images/235-i.jpg){.calibre572}
:::
这里有一个重要属性ro.debuggable，关系到系统中每个应用是否能够被调试的关键。在Android系统中一个应用能否被调试是这么判断的：当Dalvik虚拟机从Android应用框架中启动时，系统属性ro.debuggable为1，如果该值被置1，系统中所有的程序都是可以调试的。如果系统中的ro.debuggable为0，则会判断程序的AndroidManifest.xml中application标签中的android：debuggable元素是否为true，如果为true则开启调试支持。
这相当于Android系统中有一个开关，即根目录中default.prop文件中的ro.debuggable属性值，可用于调试所有设备中的应用。如果把这个属性值设置成1，设备中所有应用都可以被调试，即使在AndroidManifest.xml中没有android：debuggable=true，还是可以调试的。而这些系统属性的文件system/build.prop和default.prop，都是init进程来进行解析的，系统启动的时候就会去解析init.rc文件，这个文件中有配置关于系统属性的解析工作信息。然后会把这些系统属性信息解析到内存中，提供给所有App进行访问，这块信息也是内存共享的。但是这些ro开头的属性信息只能init进程进行修改。下面来分析一下修改这个属性值的三种方式。
[第一种方式：直接修改default.prop文件中的值，然后重启设备。]{.yanse}那么现在如果按照上面的目的：就是不需要反编译apk，添加android：debuggable属性的话，直接修改default.prop文件，把ro.debuggable属性改成1即可，但是通过上面的分析，修改完成之后肯定需要重启设备的，因为需要让init进程重新解析属性文件，把属性信息加载内存中方可起作用的。但是并没有那么顺利，在实践的过程中，修改了这个属性，结果会发现设备死机了，其实想想也是正常的，如果属性能够通过这些文件来修改的话，那就感觉系统会出现各种问题了，系统是不会允许修改这些文件的。
[第二种方式：改写系统文件，重新编译系统镜像文件，然后刷入到设备中。]{.yanse}前面已经提到过，这些属性文件是在系统镜像文件boot.img系统启动的时候，释放到具体目录中的，也就是说如果能够直接修改boot.img中的这个属性即可，那么这个操作是可以进行的。理论上是可以的，但是我没成功操作过。而且这种方式如果成功了，那么这个设备就是永远可以进行各种应用的调试了。
[第三种方式：注入init进程，修改内存中的属性值。]{.yanse}上面分析了，init进程会解析这个属性文件，然后把这些属性信息解析到内存中，给所有App进行访问使用，所以在init进程的内存块中是存在这些属性值的，那么这时候就好办了，有一个技术可以做到，就是进程注入技术。可以使用ptrace注入到init进程，然后修改内存中的这些属性值，只要init进程不重启的话，那么这些属性值就会起效。好了，这个方法可以尝试，但是这个方法有一个弊端，就是如果init进程挂了重启的话，那么设置就没有任何效果了，必须重新操作了，所以有效期不是很长，但是一般情况下只要保证设备不重启的话，init进程会一直存在的，而且如果发生了init进程挂掉的情况，那么设备肯定会重启的。到时候再重新操作一下即可。
上面的三种方式设置系统中的调试属性总开关，最后一种方式是最靠谱的。而且思路也很简单，但是不用重新去写这个代码逻辑的，因为网上已经有这个工具了，这个工具叫做mprop，是一个执行文件。用法很简单，首先把可执行文件mprop拷贝到设备中的目录下，然后运行命令，如下所示：
::: bodypic-c
![](OEBPS/Images/236-i.jpg){.calibre573}
:::
这个工具可以修改内存中所有的属性值，包括机型信息。修改完成之后，使用getprop命令再查看值，发现修改成功了，但是需要注意的是，修改的是内存的值，而不是文件中的值。所以default.prop文件中的内容是没有发生变化：
::: bodypic-c
![](OEBPS/Images/236-2-i.jpg){.calibre574}
:::
这时候，可以使用Eclipse的DDMS来查看可以调试的应用列表，如图15-1所示。
::: bodypic-c
![](OEBPS/Images/15a1-i.jpg){.calibre575}
:::
图15-1 Eclipse中DDMS查看应用列表
当然也可以使用adb jdwp命令来查看可以调试的进程id，如下所示：
::: bodypic-c
![](OEBPS/Images/236-3-i.jpg){.calibre576}
:::
但是可惜的是，发现还是没有展示设备中所有的应用，其实这里是有一个细节问题，虽然修改了内存值，但是有一个进程需要重启一下，哪个进程呢？就是adbd这个进程，这个进程是adb的守护进程，就是设备连接信息传输后台进程，所以想看到可以调试的进程信息的话，那么需要重启这个进程，这样连接信息才会更新。
重启这个进程很简单，直接使用命令即可，如下所示：
::: bodypic-c
![](OEBPS/Images/237-i.jpg){.calibre577}
:::
其实这是两个命令，用分号隔开，首先是干掉进程，然后重启。运行完命令之后，再去看DDMS窗口信息，如图15-2所示。
::: bodypic-c
![](OEBPS/Images/15a2-i.jpg){.calibre578}
:::
图15-2  Eclipse 中DDMS界面展示可调式应用列表\
这时候所有的应用进程都是可以调试的了，再使用dumpsys
package命令查看一个应用的包信息，如下所示：
::: bodypic-c
![](OEBPS/Images/237-2-i.jpg){.calibre579}
:::
可以看到，这个应用的flags标志中并没有debuggable属性值，但是这个应用是可以调试的。
[]{#091.xhtml}
#### 15.4 本章小结 {.bodycontent-title2}
本章主要简单介绍了，在做逆向工作之前，要先准备一些基础知识，主要从三个方面介绍了基本知识点：首先是逆向工具，包括apktool、Jadx、Xposed、ZjDroid等相关信息，其次是逆向的基本语法知识，主要包括smali和arm语法，最后是逆向的辅助功能，通过修改系统调试开关，便于后续逆向应用。
[]{#092.xhtml}
### 第16章 反编译神器apktool和Jadx {.bodycontent-title4}
apktool工具是开源的，也是用Java语言开发的，代码相对简单，本章就来分析一下它的大体逻辑。分析这个工具的原因只有一个，就是在之前的反编译过程中可以发现，总是有一些apk应用不那么轻易地被反编译，它们利用apktool的漏洞对apk做了一定的混淆工作，所以需要通过分析源码来解决这些异常，从而对每个apk的反编译都能如鱼得水。本章还介绍一个分析工具Jadx，它能更高效地分析apk。
[]{#093.xhtml}
#### 16.1 逆向操作惯例 {.bodycontent-title2}
当对一个apk进行破解之前，会做如下两件事：
·用压缩软件解压apk，得到classes.dex，然后使用dex2jar+jd-gui工具查看代码逻辑。但是这里会发现资源文件如AndroidManifest.xml和res下面的XML文件都是乱码的，因为它们遵循Android中的arsc文件格式，关于这个文件格式在之前几章已经详细介绍过了。其实不管是什么文件格式，都有文件格式的说明文档，只要按照说明文档去做解析即可。
·使用apktool工具反编译apk，得到smali源码和资源文件。smali语法是Android虚拟机识别执行的指令代码，和dex文件可以相互转化，使用baksmali.jar和smali.jar这两个工具即可。当然这里还可以得到所有的资源文件，即arsc格式解析之后的内容，而且这个工具可以实现回编译，这个功能也是很强大的，不过后面分析源码就知道了，回编译其实是借助aapt这个强大的系统命令来完成的。可以看到如果想要完全分析一个apk，apktool工具是不可或缺的，它是开启破解大门的钥匙，这个工具也是逆向领域的敲门砖，而且现在很多可视化的破解工具的核心都是使用apktool+dex2jar+jd-gui这三个工具组成的，只是后期做了一定的界面优化。
[]{#094.xhtml}
#### 16.2 反编译常见的问题 {.bodycontent-title2}
apktool工具在反编译的过程中总会遇到一些问题，下面介绍最常见的两类问题。
###### 1.第一类问题 {.section-subtitle}
错误提示：
::: bodypic-c
![](OEBPS/Images/239-i.jpg){.calibre102}
:::
主要是因为利用了apktool的一个漏洞，做了属性id的混淆，如下所示。
::: bodypic-c
![](OEBPS/Images/239-2-i.jpg){.calibre497}
:::
###### 2.第二类问题 {.section-subtitle}
错误提示：
::: bodypic-c
![](OEBPS/Images/239-3-i.jpg){.calibre100}
:::
这是在使用apktool工具时报错最多的错误，主要是利用apktool的漏洞，修改了resource.arsc的头部信息，如下所示：
::: bodypic-c
![](OEBPS/Images/239-4-i.jpg){.calibre304}
:::
::: bodypic-c
![](OEBPS/Images/240-i.jpg){.calibre580}
:::
网上很多解决方案都是说apktool工具的版本太旧了，用最新版本，但是这里可以看一下apktool.jar的版本，如下所示：
::: bodypic-c
![](OEBPS/Images/240-2-i.jpg){.calibre67}
:::
这个版本是最新的了。反编译失败的原因是应用开发公司知道了apktool工具反编译的厉害，所以去看apktool的源码，分析得到漏洞，然后进行apk的一些混淆，防止反编译。因此，防护和破解真的是无休止的战争。幸好apktool的代码也更新得比较快，所以会解决这些漏洞，但是在破解的时候遇到这些问题，不能一味地等待apktool的更新，既然是开源的，那么就直接分析源码，发现报错的地方修复即可。
[]{#095.xhtml}
#### 16.3 分析apktool的源码 {.bodycontent-title2}
上面说了为什么要分析apktool的源码，下面就真正开始分析。当然第一步是得到apktool的源码，地址为[https://code.google.com/p/android-apktool/](https://code.google.com/p/android-apktool/){.calibre32
.pcalibre}。看到有Google的域名是不是很郁闷？的确，国内程序员一般打开时始终处于loading状态，直至报错，所以只能去万能的GitHub上搜索了，找到了地址[https://github.com/iBotPeaches/Apktool](https://github.com/iBotPeaches/Apktool){.calibre32
.pcalibre}。可以看到有很多人关注，而且代码是有人维护和更新的，所以下载到本地。
但是下载后发现是一个Gradle项目，所以就给Eclipse装一个Gradle插件，然后导入项目即可。但是又遇到一个问题，还是国内网络的问题，Gradle下载失败，因为这里引用了一些第三方的jar，如下所示：
::: bodypic-c
![](OEBPS/Images/240-3-i.jpg){.calibre581}
:::
::: bodypic-c
![](OEBPS/Images/241-i.jpg){.calibre582}
:::
那么，只能无奈地手动去一个一个找这些jar包，这个过程还是比较辛苦的，有些jar很难找，不过最后还是都找到了，不再有报错，项目结构如图16-1所示。
::: bodypic-c
![](OEBPS/Images/16a1-i.jpg){.calibre583}
:::
图16-1 apktool项目结构\
Apktools这个项目是入口，也是主要功能项目类，Baksmali和Smali、SmaliUtil是操作smali的工具类，BrutCommon和BrutDir、BrutUtil是一些辅助的工具类，代码简单，不做太多的解释。除了Apktools之外，其他项目都是功能库，它们之间的引用关系如下：
·Baksmali依赖于SmaliUtil。
·BrutDir依赖于BrutCommon、BrutUtil。
·BrutUtil依赖于BrutCommon。
·Smali依赖于SmaliUtil。
·Apktools依赖于Baksmali、BrutCommon、BrutDir、BrutUtil、Smali。
直接来看看主要功能Apktools项目。首先Java项目的入口方法肯定是main方法，搜一下找到这个Main类：
::: bodypic-c
![](OEBPS/Images/241-2-i.jpg){.calibre584}
:::
::: bodypic-c
![](OEBPS/Images/242-i.jpg){.calibre585}
:::
在方法中得到参数，然后进行参数的分析和组装。继续往下看执行代码：
::: bodypic-c
![](OEBPS/Images/242-2-i.jpg){.calibre586}
:::
这里看到了经常用的一些命令参数，它们的含义都了解了，ApkDecoder类是反编译的核心类：
::: bodypic-c
![](OEBPS/Images/243-i.jpg){.calibre587}
:::
最终也是调用它的decode方法，如下所示：
::: bodypic-c
![](OEBPS/Images/243-2-i.jpg){.calibre588}
:::
::: bodypic-c
![](OEBPS/Images/244-i.jpg){.calibre589}
:::
可以看到使用了Androlib这个核心类来做了一些操作，首先判断是否需要解析arsc格式的资源文件，下面仔细解析resource.arsc和AndroidManifest.xml这两个文件：
::: bodypic-c
![](OEBPS/Images/244-2-i.jpg){.calibre590}
:::
这里解析了dex文件，得到smali源码，而且区分了多个dex的情况。可以发现，apktool在整个反编译的过程中有三个核心点：解析resource.arsc文件、AndroidManifest.xml文件、dex文件。
关于这三个文件，在本书的前几章已经讲解过具体格式和解析方法，所以这里就不详细介绍了。
继续分析Androidlib这个核心解析类，就几个方法，下面来一一讲解。
###### 1.解析原生文件 {.section-subtitle}
这个方法主要解析原生的文件，就是Android在编译apk的过程中不参与编译的文件目录，一般是assets和libs：
::: bodypic-c
![](OEBPS/Images/245-i.jpg){.calibre591}
:::
###### 2.解析配置文件 {.section-subtitle}
这个方法主要是解析AndroidManifest.xml文件格式的：
::: bodypic-c
![](OEBPS/Images/245-2-i.jpg){.calibre592}
:::
Android在安装一个apk的时候，肯定也需要解析AndroidManifest.xml文件，而且Android中解析XML文件采用的是Pull解析法，所以这里直接把Android中的一些方法拷贝过来了，如图16-2所示。
然后再找一个xmlPull的解析jar包即可，如图16-3所示。
::: bodypic-c
![](OEBPS/Images/16a2-i.jpg){.calibre593}
:::
图16-2 apktool解析AndroidManifest功能类
::: bodypic-c
![](OEBPS/Images/16a3-i.jpg){.calibre594}