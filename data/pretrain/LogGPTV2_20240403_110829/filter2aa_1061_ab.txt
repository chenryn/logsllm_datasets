### Gogoro 智能电动摩托车解锁流程及安全性分析

#### 1. 命令列表
- **A8: NotifyScooterError (电动车)**
- **A9: NotifyInfo (电动车)**
- **AE: PurchasedStatus (电动车)**
- **AF: ScooterInfoState (电动车)**
- **B0: ECU Challenge nonce (App)**
- **B1: ECU Response digest (电动车)**
- **B2: ECU unknown (电动车)**
- **B3: ECU Error (App)**
- **B4: ECU Cmd (锁定、解锁、开启座垫)**

#### 2. 数据包格式
- **B开头: ECU Challenge Response**
  - 示例数据包: `90 A2 08 00 00 00 02 C4` (十六进制)
  - 解析:
    - `90`: Header
    - `A2`: Command
    - `08`: Length
    - `02`: Parameter
    - `C4`: Checksum

- **A开头: 一般资讯查询**

#### 3. Gogoro 解锁流程
1. **扫描附近设备**:
   - 电动车扫描附近的外围设备，寻找具有 GATT Gogoro 服务的 UUID。
   - UUID 格式: `351AAF0F-末8字节为电动车MAC地址`。

2. **读取状态并启用解锁按钮**:
   - 移动应用读取电动车当前状态，并启用解锁按钮。
   - 用户按下按钮后，应用发送 `ECU_Cmd(0xB4)`，值为 `0x00` 表示上锁，`0x01` 表示解锁。

3. **发起 ECU_Challenge**:
   - 电动车发出 `ECU_Challenge (0xB0)`，生成一个 256 位的随机数（nonce）。

4. **响应 ECU_Challenge**:
   - 移动应用回复 `ECU_Response (0xB1)`，计算公式为 `SHA256(ECU_Challenge, Security_Key)`。

5. **验证 ECU_Response**:
   - 电动车比对 `ECU_Response` 是否正确。如果无误，则执行 `ECU_Cmd` 完成解锁和通电。

#### 4. 安全性分析
- **车钥匙 (Security_Key)**:
  - `ECU_Response = SHA256(ECU_Challenge, Security_Key)`
  - 早期版本中，`Security_Key` 存放在文档目录下（有轻微加密）。
  - iOS: `MobileAppProp.plist` 中的 `ScooterSKey`
  - Android: `Settings.xml` 中的 `AppSettings_DefScooter/encryptedkey2`
  - 加密方式: AES-256, CBC/PKCS7Padding, IV=UserId, Key=ScooterUUID
  - 备份工具（如 iTunes 或 Android 备份程序）会拷贝这些数据。
  - 其他获取方式: 通过 WebAPI、尝试 My Gogoro 密码、窃取 Cookie 等。

- **不安全的应用数据存储**:
  - Token 和证书应存放在加密存储区。
  - 未使用时应加密，使用时应控制超时时间。
  - 限制用户、进程和导出权限。
  - 各大操作系统提供的加密存储区:
    - Apple: iOS/macOS Keychain, iPhone 6~ Secure Enclave
    - Android: Keystore, Samsung S6~ KNOX
    - Windows: Protected Storage
    - HSM: 如 UbiKey

- **模拟解锁程序**:
  - 我们编写了一个 Android 应用，可以解锁已知 `Security_Key` 的电动车。
  - 实验结果:
    1. 攻击者只要获得 `Security_Key` 就可以发动车辆。
    2. `Security_Key` 可以被转移到其他手机使用。
    3. 电动车无法验证移动应用的硬件标识。

- **Gogoro 分析结论**:
  - 设备识别元隐私保护提高了验证设计难度。
  - IoT 设备在无法验证设备识别元的情况下，只能依赖金钥。
  - 保护好 `Security_Key` 是唯一方法。
  - 不安全的应用数据存储是弱点之一。
  - Gogoro 移动应用将 `Security_Key` 存储在文档目录中，应存储在加密存储区如 Keychain/Keystore。
  - 其他可能威胁:
    - 获取 `Security_Key` 的 API 没有 SSL 证书绑定，可能存在中间人攻击。
    - Challenge-Response 机制可能受到重放攻击（类似车用遥控器）。

- **总体来说**:
  - Gogoro 系统设计是相对安全的。
  - 蓝牙传输虽然没有配对与加密，但传输的是一次性的 Challenge/Response。
  - 在手机端，金钥基本上是绑定手机的，除非手机被破解或安装了后门程序，否则不易直接从手机获取金钥。
  - 但从网络中获取金钥信息目前没有绑定凭证，也没有 MyGogoro 帐号以外的认证机制。

- **威胁情境**:
  - 手机被植入木马、电脑备份文件被偷走。
  - 在不安全的网络环境中启动手机应用并登录 Gogoro 系统。
  - 利用中间人攻击获取金钥。
  - 使用 BLE 扫描获取服务的 UUID。
  - 发送解锁指令并回应 Challenge，然后就可以发动车辆。

- **厂商通报**:
  - 2016/02: App 开始支持 BLE 解锁。
  - 2016/04: 发现弱点并通报厂商。
  - 2016/04: 增强 `Security_Key` 保护。
  - 2016/07: 增强 SSL 证书验证。
  - 2016/07: 强制登出更新。
  - 未来将继续投资于安全领域，并更频繁地发布安全改进。

#### 5. IoT 设备认证设计挑战
- **无法读取装置识别元**:
  - IoT 设备事先不认识手机。
  - IoT 设备事先认识金钥。
  - 通过服务器将金钥提供给手机。
  - 防止金钥被复制的方法:
    - BLE 4.2 Secure Connections
    - 金钥 + 手机装置识别元
    - 金钥 Secure Element 储存
    - 金钥 + SMS OTP
    - 金钥 + Dual HOTP 认证

- **认证机制比较**:
  - **金钥 Server Provision**:
    - 优点: IoT 设备不需事先认识手机。
    - 缺点: 金钥复制容易，盗用难以察觉。
  - **BLE 4.2 Secure Connections**:
    - 优点: 防中间人攻击、传输加密、防止复制。
    - 缺点: 双方都需要数字显示屏幕。
  - **金钥 + 手机装置识别元**:
    - 优点: 可验证手机，防止复制。
    - 缺点: 隐私冲突，Root 还是可以拷贝。
  - **金钥 Secure Element 储存**:
    - 优点: 加密保护，拷贝困难。
    - 缺点: 不是每部手机都有 SE。
  - **金钥 + 服务器 SMS OTP 发送**:
    - 优点: 绑定手机号，不用绑定手机。
    - 缺点: SMS 需要费用，需要电信号码。
  - **金钥 + 双计数器强化认证**:
    - 优点: 绑定手机，可察觉金钥盗用。
    - 缺点: 未必能阻挡金钥盗用。

- **双计数器强化认证**:
  - **Device-Phone 计数器 S**:
    - `KD`: 永久共有金钥
    - `TD`: 计数器 D
    - `IDS`: 身份证
    - `KSD`: HMAC(KD, IDS) 临时
    - `HTD`: HMAC(KD, TD) 临时
  - **Device-Server 计数器 D**:
    - `R`: 请求命令
    - `HMAC(KSD, HTD, TD)`: 响应
  - **若金钥被复制使用**:
    - 计数器会不一致，用户可以察觉问题。
  - **HMAC of Key**:
    - 若手机遗失可撤销 HMAC(Key)。
    - HMAC(Key) 被盗用会导致计数器不同步。

#### 6. 结论
- 介绍了 Bluetooth Low Energy 及其安全性分析流程。
- 智能手机通过 BLE 控制 IoT 设备需要一套认证机制。
- BLE 4.0 配对有许多限制，许多厂商选择不配对而另设计认证机制。
- 重视消费者隐私下，硬件识别元受限且乱数化。
- 未配对设备无法获取硬件识别元，设计认证机制面临挑战。
- 提出了一种更好的认证机制：双计数器强化认证。

#### 7. 未来展望
- 研究 Key Fob 晶片算法。
- 研究 Challenge nonce 乱数强度。
- 探讨是否可以从 ECU Firmware 或其他渠道获取 `Security_Key`。
- 研究 Relay-Attack 在何种环境下可以实现。

#### 8. 特别致谢
- CSC 老师指导、参与研究、提供设备。
- Gogoro 设计这台 Smart Scooter 还不错骑。
- Hiraku (皮乐姐姐) 帮忙 dump iOS app。
- 实验室同学的各种支援。

#### 9. Q&A
- 物联网 Security or Nothing
- 谢谢大家、敬请指教

#### 10. 参考文献
- Bluetooth SIG, Bluetooth Smart (Low Energy) Security. Bluetooth SIG, 2016
- Bluetooth SIG, Bluetooth Specification Version 4.0, Bluetooth SIG, 2010
- Andrew Garkavyi, Bluetooth Low Energy. Essentials for Creating Software with Device to Smartphone Connectivity, Stanfy Inc, 2015
- Mike Ryan, Bluetooth: With Low Energy comes Low Security, iSEC Partners, USENIX WOOT, 2013.
- Mike Ryan, Hacking Bluetooth Low Energy: I Am Jack's Heart Monitor, ToorCon 14, 2012.
- Lindell, A. Y. Attacks on the pairing protocol of bluetooth v2.1, BlackHat US, 2008.
- Samy Kamkar, Drive It Like You Hacked It, Defcon 23, 2015
- Gogoro, Gogoro Smart Scooter 规格书, 睿能创意股份有限公司, 2015.
- Google, Android Physical Identifier Privacy, Google, 2016.
- Apple, iOS Physical Identifier Privacy, Apple, 2016.
- N. Gupta, Inside Bluetooth Low Energy. Artech House, 2013.
- Le IoT 想想物联网 Blog, 2016