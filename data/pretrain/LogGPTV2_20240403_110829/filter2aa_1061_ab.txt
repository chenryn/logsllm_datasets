A8
NotifyScooterError
Scooter
A9
NotifyInfo
Scooter
AE
PurchasedStatus
Scooter
AF
ScooterInfoState
Scooter
B0
ECU Challenge nonce
App
B1
ECU Response digest
Scooter
B2
ECU unknown
Scooter
B3
ECU Error
App
B4
ECU Cmd (Lock, Unlock, Open Trunk)
B开头 ECU Challenge Response
90 A2 08 00 00 00 02 C4 (hex)
90: Header, A2: Command, 08: Length, 
02: Parameter, C4: Checksum
A开头 一般资讯查询
Gogoro Unlock 流程
1.
Scooter 扫描附近Peripheral 是否有 GATT Gogoro 服务
UUID 351AAF0F-末8 byte 同Scooter MAC Address才连上
2.
Mobile App 读取 Scooter 目前状态，启用解锁按钮
按下按钮后送出 ECU_Cmd(0xB4) Value 上锁0x00、解锁0x01
3.
Scooter 发出 ECU_Challenge (0xB0) 
随机产生的乱数 256 bit nonce
4.
Mobile App 回复 ECU_Response (0xB1) 
ECU_Response =SHA256(ECU_Challenge, Security_Key)
5.
Scooter 比对 ECU_Response 无误
执行 ECU_Cmd 完成解锁通电。
车钥匙 Security_Key
• ECU_Response =SHA256(ECU_Challenge, Security_Key)
• 早期版本 Security_Key 就放在 Document 目录下(有稍微加密)
• iOS MobileAppProp.plist 中 ScooterSKey
• Android Settings.xml 中 AppSettings_DefScooter/encryptedkey2
• 解密方式法 AES-256, CBC/PKCS7Padding, IV=UserId, Key = ScooterUUID
• iTunes 或 Android 备份程式预设会拷走
• 插上传输线 Juicy Attack、从 PC iTunes 备份、各种方式
• AndroidManifest.xml 中 allowBackup 目前是 true
• 从 WebAPI 取得
• Try 出 My Gogoro 密码（帐单、论坛、App）
• 偷出 Cookie (Web_Token 也存在 MobileAppProp.plist )
• https://mobile-pro.gogoroapp.com/WebService/Web/GetKey
Insecure App Data Storage
• Token, Certificate 应该放在加密储存区
• 未使用中 是加密状态、使用中 管制 Timeout
• 限制 user、限制 process、限制 export
• 各大作业系统都有提供
• Apple iOS/macOS Keychain
• iPhone 6~ Secure Enclave
• Android Keystore
• Samsung S6~ KNOX
• Windows Protected Storage
• HSM Such as UbiKey
Unlock 模拟程式
• 依照上述分析结果，我们撰写 Android App
可 Unlock 已知 Security_Key 的 Scooter
• Live Demo
因此得知：
1.
攻击者只要取得 Security_Key 就可把车发动
2.
Security_Key 可被转移到其他手机使用
3.
Scooter 无法验证Mobile App 硬体识别元
Gogoro 分析结果
• 装置识别元 隐私保护 → 提高验证设计难度
• 实验证明，IoT 装置在无法验证装置识别元下，只能依靠金钥
• 保护好 Security_Key 是唯一方法
• Insecure App Data Storage 弱点
• Gogoro Mobile App 把 Security_Key 存在 Document 目录
• 应存到加密储存区 Keychain/Keystore ，可避免备份外流
• 其他可能威胁
• 取 Security_Key API 没有 SSL Cert Pining 可能被中间人攻击
• Challenge-Response 可能被Rely-Attack (类似车用遥控器)
大体来说 Gogoro 系统设计是安全的
• 蓝牙传输虽然没有配对与加密，但是传输的是一
次性的 Challenge/ Response
• 在手机端，金钥基本上是绑手机，除非手机有自
己做破解，而且被安装后门程式，不然不易直接
从手机取得金钥 Security Key
• 但从网路中取得金钥资讯这段，目前没有绑凭证
cert pining，也没有 MyGogoro 帐号
username/password 以外认证机制
威胁情境
• 使用者手机被植入木马、电脑备份档被偷走
• 使用者在不安全的网路环境中启动手机 App 并
登入 Gogoro 系统
• 可以利用中间人攻击取得 Key
• 使用 BLE 扫描取得服务的 UUID
• 接下来就可以到使用者的车子旁边，送出解锁指
令并回应 Challenge，然后就可以发车了
弱点通报厂商
• 2016/02 App 开始支援 BLE 解锁
• 2016/04 发现弱点并通报厂商
• 2016/04 增强 Security Key 保护
• 2016/07 增强 SSL Cert 验证
• 2016/07 强制登出更新
We will keep investing on 
security area and have more 
frequently release for security 
improvement in the future.
IoT 装置认证设计的挑战
• 无法读取装置识别元
• IoT 装置事先不认识手机
• IoT 装置事先
认识金钥
• 借由 Server 把金钥给手机
• 防止金钥被复制？
• BLE 4.2 Secure Connections
• 金钥+ 手机装置识别元
• 金钥 Secure Element 储存
• 金钥+ SMS OTP
• 金钥+ Dual HOTP 认证
认证机制 解法比较
认证方法
优点
缺点
金钥 Server Provision
IoT装置不需事先认识手机
金钥复制容易、盗用察觉难
BLE 4.2 Secure Connections
防MITM、传输加密、防复制
双方都需要数字显示萤幕
金钥 + 手机装置识别元
可验证手机、防止复制
隐私冲突、Root还是可拷
金钥 Secure Element 储存
加密保护、拷出困难
不是每只手机都有 SE
金钥 + Server SMS OTP 发送
绑门号、不用绑定手机
SMS要钱、需要电信门号
IoT 装置需跟 Server 同步
金钥 + 双计数器强化认证
绑定手机、可察觉金钥盗用
未必能阻挡金钥盗用
双计数器强化认证
DeviceSPhone 计数器S
DeviceServer 计数器D
DeviceServer
KD 永久共有金钥
TD 计数器D
IDS 身分证
KSD HMAC(KD, IDS) 临时
HTD HMAC(KD, TD ) 临时
DeviceSPhone
Cha.  RAND()
Res.  HMAC(KSD, HTD, TD)
TS
计数器S
R       Request Cmd
HTS,R HMAC(KSD, TS, R)
若金钥被复制使用
计数器会不一致
可让使用者察觉问题
HMAC of
若手机遗失可 revoke HMAC(Key)
HMAC(Key) 被偷用会 desync计数器
结论
1.
介绍 Bluetooth Low Energy、安全性分析流程
2.
Smartphone 透过 BLE 控制 IoT 装置，需要一套认证机制
3.
BLE 4.0 配对有许多限制，许多厂商选择不配对另设计认证机制
4.
重视消费者隐私下，硬体识别元(Identifier)受限、乱数化
5.
未配对装置无法取得硬体识别元，设计认证机制遇到的挑战
6.
提出一种更好的认证机制：双计数器强化认证
未来展望
• Key Fob 晶片演算法研究
• Challenge nonce 乱数强度
• 是否可从ECU Firmware 或其他管道取得 Security_Key
• Relay-Attack 在什么样的环境下可达成
特别致谢
• CSC 老师指导、参与研究、提供设备
• Gogoro 设计这台 Smart Scooter 还不错骑
• Hiraku (皮乐姐姐) 帮忙 dump iOS app
• Lab 同学各种支援
Q&A
• 物联网 Security or Nothing
• 谢谢大家、敬请指教
References
•
Bluetooth SIG, Bluetooth Smart (Low Energy) Security. Bluetooth SIG, 2016
https://developer.bluetooth.org/TechnologyOverview/Pages/LE-Security.aspx
•
Bluetooth SIG, Bluetooth Specification Version 4.0,  Bluetooth SIG, 2010 
•
Andrew Garkavyi, Bluetooth Low Energy. Essentials for Creating Software with Device to Smartphone Connectivity, Stanfy Inc, 2015
https://medium.com/@stanfy/bluetooth-low-energy-essentials-for-creating-software-with-device-to-smartphone-connectivity-
5164c71963e7
•
Mike Ryan, Bluetooth: With Low Energy comes Low Security, iSEC Partners, USENIX WOOT, 2013. 
•
Mike Ryan, Hacking Bluetooth Low Energy: I Am Jack's Heart Monitor, ToorCon 14, 2012.
•
Lindell, A. Y. Attacks on the pairing protocol of bluetooth v2.1, BlackHat US, 2008.
•
Samy Kamkar, Drive It Like You Hacked It, Defcon 23, 2015
http://samy.pl/defcon2015/2015-defcon.pdf
•
Gogoro, Gogoro Smart Scooter 规格书, 睿能创意股份有限公司, 2015.
http://images.gogoroapp.com/download/PDF/tw/Gogoro-Smartscooter-Spec-Sheet-2015-06-17-02-Chinese.pdf
•
Google, Android Physical Identifier Privacy, Google, 2016.
•
https://developer.android.com/about/versions/marshmallow/android-6.0-changes.html#behavior-hardware-id
•
Apple, iOS Physical Identifier Privacy, Apple, 2016.
https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDevice_Class
•
N. Gupta, Inside Bluetooth Low Energy. Artech House, 2013.
•
Le IoT 想想物联网 Blog, 2016 
https://thinkingiot.blogspot.tw/