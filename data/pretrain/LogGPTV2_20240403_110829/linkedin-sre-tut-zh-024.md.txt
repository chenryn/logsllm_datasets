# 一些 Python 概念
> 原文：
虽然期望您了解 python 及其基本语法，但是让我们讨论一些基本概念，这将帮助您更好地理解 python 语言。
Python 中的一切都是对象。
这包括函数、列表、字典、类、模块、运行函数(函数定义的实例)，一切。在 CPython 中，这意味着每个对象都有一个底层结构变量。
在 python 当前的执行上下文中，所有变量都存储在一个 dict 中。这将是一个字符串到对象的映射。如果您在当前上下文中定义了一个函数和一个浮点变量，下面是它在内部的处理方式。
```sh
>>> float_number=42.0
>>> def foo_func():
...     pass
...
# NOTICE HOW VARIABLE NAMES ARE STRINGS, stored in a dict
>>> locals()
{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': , '__spec__': None, '__annotations__': {}, '__builtins__': , 'float_number': 42.0, 'foo_func': } 
```
## Python 函数
因为函数也是对象，我们可以看到函数包含的所有属性如下
```sh
>>> def hello(name):
...     print(f"Hello, {name}!")
...
>>> dir(hello)
['__annotations__', '__call__', '__class__', '__closure__', '__code__', '__defaults__', '__delattr__', '__dict__',
'__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__get__', '__getattribute__', '__globals__', '__gt__',
'__hash__', '__init__', '__init_subclass__', '__kwdefaults__', '__le__', '__lt__', '__module__', '__name__',
'__ne__', '__new__', '__qualname__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__',
'__subclasshook__'] 
```
虽然有很多，让我们来看看一些有趣的
#### **globals**
顾名思义，这个属性引用了全局变量。如果你需要知道在这个函数的范围内所有的全局变量是什么，这将告诉你。看看函数是如何在全局变量中发现新变量的
```sh
>>> hello.__globals__
{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': , '__spec__': None, '__annotations__': {}, '__builtins__': , 'hello': }
# adding new global variable
>>> GLOBAL="g_val"
>>> hello.__globals__
{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': , '__spec__': None, '__annotations__': {}, '__builtins__': , 'hello': , 'GLOBAL': 'g_val'} 
```
### **代码**
这个很有意思！因为 python 中的一切都是对象，这也包括字节码。编译后的 python 字节码是一个 python 代码对象。这可以通过这里的`__code__`属性访问。一个函数有一个相关的代码对象，它携带一些有趣的信息。
```sh
# the file in which function is defined
# stdin here since this is run in an interpreter
>>> hello.__code__.co_filename
''
# number of arguments the function takes
>>> hello.__code__.co_argcount
1
# local variable names
>>> hello.__code__.co_varnames
('name',)
# the function code's compiled bytecode
>>> hello.__code__.co_code
b't\x00d\x01|\x00\x9b\x00d\x02\x9d\x03\x83\x01\x01\x00d\x00S\x00' 
```
您可以通过`>>> dir(hello.__code__)`登记更多的代码属性
## 装修工
与函数相关，python 还有一个特性叫做 decorators。让我们看看这是如何工作的，记住`everything is an object`。
下面是一个装饰示例:
```sh
>>> def deco(func):
...     def inner():
...             print("before")
...             func()
...             print("after")
...     return inner
...
>>> @deco
... def hello_world():
...     print("hello world")
...
>>>
>>> hello_world()
before
hello world
after 
```
这里使用了`@deco`语法来修饰`hello_world`函数。本质上和做是一样的
```sh
>>> def hello_world():
...     print("hello world")
...
>>> hello_world = deco(hello_world) 
```
`deco`函数内部的内容可能看起来很复杂。让我们试着揭开它。
1.  功能`hello_world`已创建
2.  它被传递给`deco`功能
3.  `deco`创建新功能
    1.  这个新功能就是调用`hello_world`功能
    2.  还做了一些其他的事情
4.  `deco`返回新创建的函数
5.  `hello_world`替换为上述功能
为了更好的理解，让我们把它形象化
```sh
 BEFORE                   function_object (ID: 100)
       "hello_world"            +--------------------+
               +                |print("hello_world")|
               |                |                    |
               +--------------> |                    |
                                |                    |
                                +--------------------+
       WHAT DECORATOR DOES
       creates a new function (ID: 101)
       +---------------------------------+
       |input arg: function with id: 100 |
       |                                 |
       |print("before")                  |
       |call function object with id 100 |
       |print("after")                   |
       |                                 |
       +---------------------------------+
                                   ^
                                   |
       AFTER                       |
                                   |
                                   |
       "hello_world" +-------------+ 
```
注意`hello_world`名称是如何指向一个新的函数对象的，但是这个新的函数对象知道原始函数的引用(ID)。
## 一些问题
*   虽然用 python 构建原型非常快，并且有大量可用的库，但是随着代码库复杂性的增加，类型错误变得更加常见，并且变得难以处理。(这个问题有解决方案，比如 python 中的类型注释。结帐 [mypy](http://mypy-lang.org/) 。)
*   因为 python 是动态类型语言，这意味着所有类型都是在运行时确定的。这使得 python 与其他静态类型语言相比运行速度非常慢。
*   Python 有一种叫做 [GIL](https://www.dabeaz.com/python/UnderstandingGIL.pdf) (全局解释器锁)的东西，这是利用多个 CPU 内核进行并行计算的一个限制因素。
*   python 做的一些奇怪的事情:https://github.com/satwikkansal/wtfpython