title:ABSynthe: Automatic Blackbox Side-channel Synthesis on Commodity Microarchitectures
author:Ben Gras and
Cristiano Giuffrida and
Michael Kurth and
Herbert Bos and
Kaveh Razavi
ABSynthe: Automatic Blackbox Side-channel
Synthesis on Commodity Microarchitectures
Ben Gras∗†, Cristiano Giuffrida∗, Michael Kurth∗, Herbert Bos∗, and Kaveh Razavi∗
∗Vrije Universiteit Amsterdam
†Intel Corporation
Abstract—The past decade has seen a plethora of side-channel
attacks on various CPU components. Each new attack typically
follows a whitebox analysis approach, which involves (i) identify-
ing a speciﬁc shared CPU component, (ii) reversing its behavior
on a speciﬁc microarchitecture, and (iii) surgically exploiting
such knowledge to leak information (e.g., by actively evicting
shared entries to monitor victim accesses). This approach requires
lengthy reverse engineering, repeated for every component and
microarchitecture, and does not allow for attacking unknown
shared resources.
In this paper, we present ABSynthe, a system that takes a
target program and a microarchitecture as inputs and auto-
matically synthesizes new side channels. The key insight is that
by limiting ourselves to (typically on-core) contention-based side
channels, we can treat the target CPU microarchitecture as a
black box, enabling automation. To make ABSynthe possible,
we have automatically generated leakage maps for a variety of
x86_64 microarchitectures. These leakage maps show a complex
picture of interaction between different x86_64 instructions and
justify a black box approach to ﬁnding the best sequence of
instructions that cause information to leak from a given software
target, which we also treat as a black box. To recover the
secret information using the optimized sequence of instructions,
ABSynthe relies on a recurrent neural network to craft practical
side-channel attacks that recover a secret bit stream. Our
evaluation shows that ABSynthe can synthesize better attacks
by exploiting contention on multiple components at the same
time compared to state of the art contention-based attacks that
focus on a single component. Furthermore, the automation made
possible by ABSynthe allows us to synthesize cross-thread attacks
for a variety of microarchitectures (from Intel, AMD and ARM)
on four different cryptographic software targets, in both native
and virtualized environments. The results show that ABSynthe
can recover cryptographic key bit streams with high accuracy. As
an example, ABSynthe recovers a full 256-bit EdDSA key from
just a single trace capture with 100% success rate on one of our
test beds.
I.
INTRODUCTION
Modern processors provide strong isolation guarantees be-
tween distrusting execution contexts at the architectural level
of abstraction. These guarantees are unfortunately not enforced
at the microarchitectural level. A plenitude of existing side-
channel attacks show one can leak secret information (e.g.,
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.23018
www.ndss-symposium.org
cryptographic keys) by examining changes made by a victim’s
execution to the state of shared microarchitectural components
such as caches [1, 2, 3, 4, 5], cache directories [6], TLBs [7],
and branch predictors [8, 9]. Such attacks are typically based
on whitebox side-channel analyses which require heroic reverse
engineering efforts to gain a deep understanding of the tar-
get component and then craft component-speciﬁc exploitation
primitives (e.g., the ability to track victim cache accesses by
actively forcing evictions). Such manual efforts need to be re-
peated for each new component and each (micro)architecture,
in search of new, dedicated exploitation primitives.
In this paper, we present ABSynthe, an automatic, black
box approach towards synthesizing microarchitectural side
channels in a more general and sustainable fashion, by exploit-
ing contention on shared resources. Its blackbox analysis re-
quires no reverse engineering effort on the part of the attacker,
and eschews complicated eviction strategies that require deep
understanding of the dimensions, organization and policies that
govern certain wide-exploited shared resource such as CPU
caches. Instead, ABSynthe exploits the insight that the mere
presence or absence of contention on shared resources often
leads to measurable performance differences.
For efﬁciency reasons, microarchitectures today include
a large number of shared resources that may, potentially,
serve in side channels attacks. Examples include per-core
caches, execution units, and execution ports, but there are
many others. Since any of these resources may harbor a
side channel, we designed ABSynthe as a generic solution
to measure and optimize the information leakage—for any
component, software, and (micro)architecture. Interestingly,
during our analysis we also found new sources of leakage,
including some that we cannot easily associate with a single
component. By focusing exclusively on contention-based side
channels, ABSynthe can treat the target CPU microarchitecture
and its components as black boxes, while synthesizing side
channels that are stealthy [10, 11], that are easy to regenerate
across different architectures, and that may even combine
multiple microarchitectural components to boost the signal and
outperform state-of-the-art side-channel attacks.
Microarchitectural side-channel attacks Existing microar-
chitectural side-channel attacks rely on leakage primitives
derived from the reverse engineering of a speciﬁc microar-
chitectural component. Such whitebox side-channel strategies
often take the form of eviction-based attacks—attacks that
exploit knowledge of the target component to measure modi-
ﬁcations made to the microarchitectural state by the victim’s
secret operation. At their core, these measurements involve
the eviction of certain state from the component of interest.
For example, in FLUSH+RELOAD, the attacker evicts a shared
cache line and later checks whether it is reloaded by the
victim in a secret operation. While attacks on CPU caches
are the most common, attackers may equally target other
microarchitectural components, including cache directories [6],
TLBs [7], and branch predictors [9]. Some recent efforts,
such as PortSmash [10] and SMoTherSpectre [11], show that
one can also leak secret information by crafting contention-
based attacks that exploit contention on execution ports. The
high-level strategy in contention-based attacks is to replace
the active evictions of prior efforts with passive monitoring,
which also vastly improves the stealthiness of the attack [10].
However, these efforts still rely on exploitation primitives spe-
ciﬁc to a particular microarchitectural component, in particular
execution ports.
ABSynthe In this paper, we present the ﬁrst complete Syn-
chronous Multithreading (SMT) leakage maps for different
microarchitectures implementing the x86_64 ISA. These leak-
age maps show complex interactions between different x86_64
instructions and allow us to make a number of observations.
First, there are many different microarchitectural components
that leak secret information and allow for practical contention-
based attacks. Second, by testing different instructions, we
can create contention on arbitrarily different microarchitectural
components without any knowledge of the contended com-
ponent(s) or of the microarchitecture, opening the door for
attack automation. Third, the instructions that create observable
contention on one microarchitecture do not necessarily do
so on others. This means that contention-based attacks are
not always portable across different processors with different
microarchitectures. Building on these insights, we present
ABSynthe, the ﬁrst system to automatically synthesize new
side-channel attacks on a given microarchitecture and a given
software target.
To build ABSynthe, we combine a number of novel tech-
niques. First, to automatically detect secret-dependent control
ﬂows in a given software target, we employ taint analysis
similar to DATA [12]. We further reﬁne the analysis by relying
on performance monitoring counters to identify the target
branches. Once ABSynthe identiﬁes the target branches, it tries
to ﬁnd a sequence of instructions from the leakage maps that
maximizes the information leakage from the target branches.
ABSynthe relies on a genetic algorithm to ﬁnd a combination
of instructions that create the best contention to leak the
maximum amount of information from the target software.
The result is a highly optimized target-speciﬁc sequence of
instructions that performs better than any single instruction
used in recent work [10, 11]. Using a number of different
cryptographic functions and commodity CPU architectures
(Intel, AMD, ARM), we show that ABSynthe is effective in
synthesizing practical cross-thread attacks in native and virtu-
alized environments. Lastly, ABSynthe employs a Recurrent
Neural Network (RNN) for complete cryptographic key bit
stream recovery using the synthesized attacks. As we later
show with an example, an analyst armed with ABSynthe’s
results can then recover the ﬁnal secret key with basic post
processing techniques.
Like fuzzers and other testing techniques, ABSynthe may
primarily serve as a powerful regression testing framework for
Fig. 1: Simpliﬁed diagram of a superscalar, out-of-order ex-
ecution pipeline showing the stream of instructions being
dispatched and retired (green, thick arrows), units that hold
and process them (red, thick boxes), the memory request and
data stream (purple, thin arrows), and their supporting micro-
architectural caches and data structures (blue, thin boxes).
both hardware vendors to ﬁnd new side channel leakages in
their microarchitectures and software developers to determine
if their, say, crypto algorithm is vulnerable to contention-based
side channels on a target CPU.
Contributions This paper makes the following contributions:
• We present the ﬁrst complete leakage maps for a number
of x86_64 microarchitectures in SMT settings which
additionally provide us with new insights for building
contention-based side-channel attacks.
• We present ABSynthe, a fully automated approach for
synthesizing side-channel attacks on arbitrary microar-
chitectures and software targets (by treating both as
blackboxes)—eliminating the need for per-component
reverse engineering and enabling a portable, multi-
component side-channel analysis on commodity CPUs.
• We show that ABSynthe can synthesize side-channel
attacks on a variety of cryptographic routines on differ-
ent architectures (Intel, AMD, ARM) and environments
(native, virtualized) by creating contention on different
microarchitectural components. Surprisingly, these attacks
perform even better than creating contention on a single
speciﬁc component as done in prior work [10, 11].
II. BACKGROUND
We discuss the microarchitectures of modern processors to
get an overview of shared components across different execu-
tion contexts. We then discuss how some of these components
are prone to contention-based side channels.
A. Microarchitectural components
CPUs implement their Instruction Set Architecture (ISA)
using microarchitectural components. Such components in-
crease in number, size and complexity with each new CPU
generation. Given that these components are not visible to
software, their low-level details can only be uncovered by
careful reverse engineering. Furthermore,
the properties of
each of these components can change between CPU revisions,
without posing compatibility problems for the software, but
2
memoryrequestsThread 0 micro-operationsMerged streamsof micro-operationsOut-of-orderstream ofmicro-operationsCompleted micro-operationsIn-orderstream ofinstructionsThread 1 micro-operationsbranch uopsFrontend Fed byper-threadarchitecturalinstructionstreams ResourceAllocation ReservationStation memorydata memory uopsBTBPHTTLBload buffersstore buffersL1 cacheL2 cacheL3 cacheRetirementUnit ExecutionUnits prompting new, lengthy reverse engineering efforts every time
for side channel researchers.
Figure 1 shows the high-level overview of some of these
microarchitectural components in a modern CPU, using Intel
terminology as a reference. The micro-architecture can be
divided in two main parts: (a) the frontend, which decodes
the architectural instruction stream operating on architectural
registers from multiple, in this case two, logical processors into
micro-operations (micro-ops) operating on microarchitectural
registers (physical registers), and (b) the backend, which
operates on a stream of micro-ops merged from the 2 thread
streams, allocates the necessary resources, and schedules them
for execution in an out-of-order fashion. We focus on compo-
nents in the CPU backend. While late in the pipeline, these
components operate at the stage where the instruction streams
of the multiple hardware threads have merged and resources
are mostly shared between the threads. Signiﬁcantly, these
threads can be executing in different security domains.
We will not go into detail for all micro-architectural
components depicted in the ﬁgure. After all, the objective
of this paper is to exploit resource sharing without relying
on the knowledge of the workings, or even the existence, of
these components. We nevertheless brieﬂy discuss the use of
execution ports and units by micro-ops, as dispatched from the
reservation station. In particular, the Reservation Station (RS)
holds a collection of in-ﬂight micro-ops which have allocated
resources (e.g., physical registers) and are ready to execute
once their operands are available. Micro-ops in the RS are
mixed from both threads already. Meanwhile, the execution
units run the actual micro-ops that are dispatched from the
RS. After execution, micro-ops are sent
to the retirement
unit and retired in-order. Execution units are reached through
execution ports that are typically numbered in a fairly intuitive
manner (P 0, P 1, P 5, etc.) and sometimes one micro-op can
be executed on any of a set of ports (expressed as P 06). As
we shall see in Section IV, execution ports and units will play
a large role in contention on shared resources.
B. Simultaneous Multi-Threading (SMT)
SMT is an architectural technology that is primarily in-
tended to enable cross-thread sharing of on-core resources that
would otherwise be unused [13, 14, 15]. When transitioning
from a single-threaded to a multi-threaded core design, on-core
resources are owned in one of three ways [16]:
1) Replicated: there is one instance per thread for private
use. This happens for microarchitectural state such as the
architectural register ﬁle and the instruction pointer.
2) Partitioned: there is a static assignment of ownership of
half of the resource to each thread. Examples include the
iTLB [7] and the Physical Register File (PRF) [17].
3) Competitive: there is a full resource pool available to all
threads. Examples include execution slots in the reserva-
tion station, CPU caches, load/store buffers, L1 dTLB,
Shared TLB (STLB) [7], and execution units [10].
As we will see in Section IV, measurable interference
can occur across security boundaries on resources that are
competitively shared, possibly leading to information leaking.
3
C. Eviction- vs. contention-based attacks
Existing side-channel attacks on microarchitectural com-
ponents are largely eviction-based. That is, they use evictions
to bring the target component to a known state. After the
secret operation, they can then examine the state to infer any
changes that leak information about the secret operation. As an
example, the PRIME+PROBE attack primes the CPU cache by
accessing a set of memory addresses (evicting other addresses).
It then waits for the victim operation to execute. Finally, it
probes the cache by checking whether any of the previously
accessed addresses has been evicted from the cache. These
attacks are powerful, as an attacker can actively control the
microarchitectural behavior of the victim, but also hinge on
(i) intimate knowledge of the target microarchitectural com-
ponent, and on (ii) an active eviction strategy that reduces the
stealthiness of the attack and is amenable to mitigations [18].
To address the latter, some recent attacks [10, 11] rely
on the available bandwidth to execution ports to stealthily
leak information across threads. The attacker simply measures
the bandwidth (i.e., operations per second) over time and,
by observing its ﬂuctuations, can infer information about
the victim’s operation. This contention-based attack relies on
passive monitoring rather than active evictions, improving the
stealthiness and mitigation-resistance of the attack. However,
the exploitation strategy is still targeted to a speciﬁc component
and requires assumptions on the underlying microarchitecture
and its interactions with the target software.
This paper’s contribution is twofold. First, we show there
are many more components amenable to contention-based
attacks and it is not clear a-priori which component (or set of
components) is the most effective on a given software target.
Second, we show we can automatically synthesize contention-
based side-channel attacks on any given microarchitecture. We
discuss the ﬁrst in Section IV and the second in Section V.
III. THREAT MODEL
We assume an attacker who has code execution on the
victim machine. The aim of the attacker is to leak sensitive
data, such as cryptographic keys, from a victim process or VM.
Similar to existing contention-based attacks [10], we primarily
focus on a victim executing on a (sibling) hardware thread on
the same core as the attacker. In Section VIII-A, we discuss
how we can generalize our analysis to non-SMT settings. We
further assume that all state-of-the-art side-channel protections
are enabled, but
the target software is vulnerable to side
channels (e.g., due to vulnerable coding practices [19]). The
attacker seeks to automatically synthesize contention-based
side-channel attacks against the given vulnerable software and
microarchitecture. We focus our analysis on recovering the
control ﬂow of a target and use common examples with secret-
dependent control ﬂow.
IV. SIDE CHANNELS ON CONTENDED COMPONENTS
To motivate our work, we systematically study the possibil-
ity of creating contention-based attacks on different shared mi-
croarchitectural components normally accessed by victim soft-
ware. We take a fully black-box, microarchitecture-agnostic
Fig. 2: Exhaustive map of instruction interference grouped by 4 different execution port sets on 3 different microarchitectures.
For each microarchitecture, we visualize the matrix CCB,A as constructed using Algorithm 1.
approach by measuring instruction interference of every in-
struction vs. every other instruction, and ﬁnd signiﬁcant unex-
plained sources of contention.
Data: List of x86 instructions
Result: Matrix CCB,A, the latency increase of each
instruction B under the inﬂuence of A
compared to nop.
On a core with SMT1 and SMT2:
for Every x86 instruction A do
On SMT1: start a loop of sequence A;
for Every x86 instruction B do
On SMT2: LATB,A ←− rdtscp(sequence B) ;
end
end
end
for Every x86 instruction pair (A, B) do
Compute CCB,A ←− LATB,A/LATB,nop