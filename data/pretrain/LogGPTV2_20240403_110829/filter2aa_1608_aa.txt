I Know What 
You Are By the 
Smell of Your 
Wi-Fi
Denton Gentry
@dgentry
PI:EMAIL
We’re here today to talk about a mechanism which identifies the type of device 
connecting to a Wi-Fi network. It can be quite specific: it can tell the difference 
between an iPhone 5 and an iPhone 5s, between a Samsung Galaxy S7 and an S8, 
between a Withings scale and a Nest Thermostat.
Classically, this kind of client detection would be called “fingerprinting” like the OS 
fingerprinting mechanisms in nmap. However, in modern usage the term 
“fingerprinting” has evolved to mean identification of specific users, such as browser 
fingerprinting to identify a specific individual.
As the mechanism discussed here identifies the species of the device, not the unique 
individual, we refer to it as Wi-Fi Taxonomy.
0:50
Try It!
1%
10%
Poll: Wi-Fi at DEFCON for a demo
89%
bad idea.
worst idea.
what could go wrong?
SSID: SmellOfWifiTalk
You can try it! Joining SmellOfWifiTalk will print the system’s estimation of what your 
device is, for however long a rogue Wi-Fi network lasts at DEFCON. It will be printed 
in that terminal window up on the screen.
0:30
MAC Sublayer Management Entity (MLME)
Probe Request: Asks nearby APs to respond.
Association Request: join the Wi-Fi network
Probe Request
Association Request
Probe Response
Association Response
Try It!    SSID: SmellOfWifiTalk
The mechanism works by examining Wi-Fi Management frames, called MLME 
frames. These frames are used to join, leave, and configure the Wi-Fi network. They 
are not TCP/IP packets, they are not routable and they do not leave the Wi-Fi 
network.
We’ll focus on two specific frames:
1.
Probe Request, where a client can ask all nearby APs or one specific AP to 
respond. The client includes information about itself and its capabilities in the 
request, and the AP can respond with its own capabilities in the response.
2.
We’ll also look at the Association Request, when a client joins a Wi-Fi network. 
The client includes many of the same capabilities as in the Probe Request, 
plus a few more.
There are a bunch of other types of frames, like the Authentication frame or Action 
frames to adjust various parameters, but the Taxonomy mechanism we’re talking 
about today relies on these two.
0:50
Signature: Information Elements
Tag #0
Tag #1
Tag #33
Tag #36
Tag #48
Tag #70
Tag #45
Tag #191
Tag #221, Vendor OUI  00:17:f2, #10
Tag #221, Vendor OUI  00:10:18, #2
Tag #221, Vendor OUI  00:50:f2, #2
0,1,33,36,48,70,45,191,
221(0017f2,10),221(0010
18,2),221(0050f2,2)
Try It!    SSID: SmellOfWifiTalk
Information Elements are Type-Length-Value tuples packed one after the other in the 
management frame. They are all optional, though in practice a few are universal 
because Wi-Fi can’t really work without them. Each Wi-Fi standard has added more 
Information Elements. In 802.11b days there were very few. 802.11g added a few, 
802.11n and ac added a bunch more, and so on.
In addition to the standard elements, there is a mechanism for vendors to define their 
own. Vendor extensions are type 221 with an identifier for the vendor called the 
Organizationally Unique Identifier or OUI, and finally by a subtype so the vendor can 
define multiple extensions. Because the Length provides enough information to skip 
over the IE, any Wi-Fi device can interoperate whether it understands the vendor 
extensions or not. It can skip over those it doesn’t implement.
This is the Association Request from an iPhone 7+, as broken out by Wireshark. The 
Association Request includes the SSID the client wants to join, information about its 
supported rates and channels, about its power levels and radio management 
capabilities, plus three vendor extensions from Microsoft, Broadcom, and Apple.
A few of the vendor extensions are extremely widespread. The Microsoft extension 
shown above is for prioritization, and it’s widely present even on devices not running 
any kind of Windows OS. The Broadcom vendor extension is also very widespread, 
owing to how common Broadcom chipsets are. The Apple extension shown here was 
added in iOS 10.2 on all iOS devices.
The signature lists the tag numbers of the IEs present in the frame, in the order they 
appear, as a text string of decimal numbers. For vendor extensions it additionally 
includes the OUI of the vendor and the subtype. For this first part of the signature, we 
end up with the text string shown in red.
This part of the signature is most strongly influenced by the OS of the client device, 
where the client Wi-Fi stack is implemented.
It is next most strongly influenced by the Wi-Fi chipset, both in terms of the standards 
it supports and for any vendor extensions implemented by that vendor in their driver.
2:10
Signature: Capability bitmasks
Transmit power
HT Capabilities bitmask (802.11n)
VHT Capabilities bitmask (802.11ac)
Try It!    SSID: SmellOfWifiTalk
0,1,33,36,48,70,45,191,221
(0017f2,10),221(001018,2),
221(0050f2,2),txpow:13f9,
htcap:006f,vhtcap:0f811032
In addition to the tag numbers, a few of the Information Elements contain capability 
bitmasks or other information which is useful in identifying the device. For example:
●
802.11n defines 16 bits of optional capabilities, 802.11ac defines another 32 
bits. This is most strongly influenced by the chipset, and the subset of the 
standard implemented by the ASIC.
●
The TX Power IE depends strongly on the board design, in how the antennas 
are laid out. Two devices built by the same manufacturer, using the same 
software and the same Wi-Fi chipset will often have different TX Power values.
●
The number of antennas is encoded in the dot11n and ac capabilities, and is 
also indicative of a board design.
●
There is an Extended Capabilities bitmask containing even more optional 
elements. It is most strongly influenced by the driver and WPA supplicant 
software.
A number of the capability bitmasks are appended to the signature to further 
differentiate it, as shown in red here.
1:00
Distinctiveness Over Time
iPhone, 2007
0,1,48,50
iPhone 4s, 2011
0,1,48,50,45,221(001018,2),221(00904c,51),221(0050f2,2),
htcap:0100,htagg:19,htmcs:000000ff
iPhone 7, 2016
0,1,33,36,48,70,54,45,127,191,199,221(0017f2,10),221(001
018,2),221(0050f2,2),htcap:006f,htagg:17,htmcs:0000ffff,
vhtcap:0f811032,vhtrxmcs:0000fffa,vhttxmcs:0000fffa,txpo
w:13f9,extcap:000008
Try It!    SSID: SmellOfWifiTalk
Looking at the signature as we’ve discussed it so far, it has become more distinctive 
over time. This shows the Associate Request portion of the signatures for three 
devices.
The first is from an original iPhone, which is a dot11g device. The Taxonomy 
mechanism really wouldn’t have worked in that timeframe, there was almost no 
differentiation in the contents of MLME frames.
iPhone 4s is an dot11n device, introduced about 4 years later. It adds a number of 
options to its management frames.
iPhone 7 is from about 5 years after that, and is an dot11ac device. It added even 
more.
0:40
Signatures in their Final Form
Xbox One
wifi4|probe:0,1,45,50,htcap:058f,htagg:03,htmcs:0000ffff|assoc:0,1,33
,36,221(0050f2,2),45,htcap:058f,htagg:03,htmcs:0000ffff,txpow:1208
Nest Thermostat v3
wifi4|probe:0,1,45,221(001018,2),221(00904c,51),htcap:0062,htagg:1a,h
tmcs:000000ff|assoc:0,1,33,36,48,45,221(001018,2),221(00904c,51),221(
0050f2,2),htcap:0062,htagg:1a,htmcs:000000ff,txpow:0f09
Chromecast v1
wifi4|probe:0,1,3,45,50,htcap:0120,htagg:03,htmcs:00000000|assoc:0,1,
48,50,127,221(0050f2,2),45,htcap:012c,htagg:03,htmcs:000000ff,extcap:
0000000000000140
Try It!    SSID: SmellOfWifiTalk
The full signature contains the list of IEs and the various bitmasks from each of the 
Probe Request and the Associate Request, separated by a pipe. The whole thing is 
prefaced by “wifi4” as this is the fourth iteration on the signature format. Including the 
prefix allowed the wifi, wifi2, and wifi3 signatures to remain in the database while 
updating.
We shall speak no more of the earlier three.
0:25
Mobile Only!
Taxonomy identifies the Wi-Fi circuitry, device driver, and OS.
●
Works for highly integrated devices: mobile and IOT.
●
With a Wi-Fi card in a laptop... it identifies the card.
Try It!    SSID: SmellOfWifiTalk
The Wi-Fi taxonomy signature is influenced by the client OS, by its Wi-Fi chipset, and 
its board layout. The current database of signatures identifies the most common Wi-Fi 
devices: overwhelmingly phones nowadays. We have signatures for most widely sold 
phones and tablet devices of the last few years, and a selection of other types of 
devices like:
●
Media streaming devices from Google, Apple, Roku, Amazon, et cetera
●
Internet of Things devices from Nest, Honeywell, Withings, and so forth
For larger devices like laptops and desktops which use a separate Wi-Fi card: the 
mechanism identifies the card. We had signatures from some laptop and desktop 
devices, but it was kindof ridiculous.
●
One model of Apple Airport Extreme card could be a MacBook, or iMac, or 
Mac Pro. That’s pretty much the entire generation of machines, we couldn’t 
distinguish them using this mechanism.
●
Intel Centrino chipsets as used in Windows laptops are even less distinctive. It 
could be almost anything.
So at this point, we don’t even try and don’t add signatures from laptops or desktops 
into the database. It tends to just result in confusion, and it isn’t useful.
Additionally, there are a few classes of device which we choose not to gather 
signatures for:
●
We only want to focus on common devices, things which a lot of people are 
likely to have. We use lists of top-selling electronics to target what we want to 
gather signatures for. If it is something unique or only in very low volume, we 
don’t really want to add it to the database.
●
We don’t put in labels for things which might make someone uncomfortable if 
they see it in the UI from their router. That includes medical devices, devices 
of an adult nature, home incarceration monitoring, and so on.
1:50
Multiple Signatures
wifi4|probe:0,1,45,221(0050f2,8),191,127,htcap:01ef,htagg:1f,htmcs:0000ff
ff,vhtcap:339071b2,vhtrxmcs:030cfffa,vhttxmcs:030cfffa,extcap:04000000000
0004080|assoc:0,1,48,45,221(0050f2,2),191,127,htcap:01ef,htagg:1f,htmcs:0
000ffff,vhtcap:339071b2,vhtrxmcs:030cfffa,vhttxmcs:030cfffa,extcap:04000a
020100004080
wifi4|probe:0,1,45,221(0050f2,8),191,127,htcap:01ef,htagg:1f,htmcs:0000ff
ff,vhtcap:339031b2,vhtrxmcs:030cfffa,vhttxmcs:030cfffa,extcap:04000000000
0004080|assoc:0,1,48,45,221(0050f2,2),191,127,htcap:01ef,htagg:1f,htmcs:0
000ffff,vhtcap:339031b2,vhtrxmcs:030cfffa,vhttxmcs:030cfffa,extcap:04000a
020100004080