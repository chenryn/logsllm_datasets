previous example, the expression results in an unsigned int, regardless of the value of 
choice. 
Type Conversion Summary 
Table 6-7 shows the details of some common type conversions. 
Table 6-7. Default Type Promotion Summary 
Operation 
Operand Types 
Conversions 
Resulting 
Type 
Typecast 
(type)expression 
Expression is 
converted to type 
using simple 
conversions 
Type 
Assignment = 
Right operand 
converted to left 
operand type using 
simple conversions 
Type of left 
operand 
Function call with 
prototype 
Arguments converted 
using simple 
Return type of 
function 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
260 
Table 6-7. Default Type Promotion Summary 
Operation 
Operand Types 
Conversions 
Resulting 
Type 
conversions according 
to prototype 
Function call 
without prototype 
Arguments promoted 
via default argument 
promotions, which are 
essentially integer 
promotions 
int 
Return Unary +, - 
+a 
-a 
~a 
Operand must be 
arithmetic type 
Operand undergoes 
integer promotions 
Promoted type 
of operand 
Unary ~ ~a 
Operand must be 
integer type 
Operand undergoes 
integer promotions 
Promoted type 
of operand 
Bitwise > 
Operands must be 
integer type 
Operands undergo 
integer promotions 
Promoted type 
of left operand 
switch statement 
Expression must have 
integer type 
Expression undergoes 
integer promotion; 
cases are converted to 
that type 
Binary +, - 
Operands must be 
arithmetic type 
*Pointer arithmetic 
covered in "Pointer 
Arithmetic(? [????.])" 
Operands undergo 
usual arithmetic 
conversions 
Common type 
from usual 
arithmetic 
conversions 
Binary * and / 
Operands must be 
arithmetic type 
Operands undergo 
usual arithmetic 
conversions 
Common type 
from usual 
arithmetic 
conversions 
Binary % 
Operands must be 
integer type 
Operands undergo 
usual arithmetic 
conversions 
Common type 
from usual 
arithmetic 
conversions 
Binary subscript []   
Interpreted as 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
261 
Table 6-7. Default Type Promotion Summary 
Operation 
Operand Types 
Conversions 
Resulting 
Type 
a[b] 
*((a)+(b)) 
Unary ! 
Operand must be 
arithmetic type or 
pointer 
int, value 0 or 1 
sizeof 
size_t 
(unsigned 
integer type) 
Binary   
== != 
Operands must be 
arithmetic type 
*Pointer arithmetic 
covered in "Pointer 
Arithmetic(? [????.])" 
Operands undergo 
usual arithmetic 
conversions 
int, value 0 or 1 
Binary & ^ | 
Operands must be 
integer type 
Operands undergo 
usual arithmetic 
conversions 
Common type 
from usual 
arithmetic 
conversions 
Binary && || 
Operands must be 
arithmetic type or 
pointer 
int, value 0 or 1 
Conditional ? 
2nd and 3rd operands 
must be arithmetic 
type or pointer 
Second and third 
operands undergo 
usual arithmetic 
conversions 
Common type 
from usual 
arithmetic 
conversions 
, 
Type of right 
operand 
Auditing Tip: Type Conversions 
Even those who have studied conversions extensively might still be surprised at the 
way a compiler renders certain expressions into assembly. When you see code that 
strikes you as suspicious or potentially ambiguous, never hesitate to write a simple 
test program or study the generated assembly to verify your intuition. 
If you do generate assembly to verify or explore the conversions discussed in this 
chapter, be aware that C compilers can optimize out certain conversions or use 
architectural tricks that might make the assembly appear incorrect or inconsistent. At 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
262 
a conceptual level, compilers are behaving as the C standard describes, and they 
ultimately generate code that follows the rules. However, the assembly might look 
inconsistent because of optimizations or even incorrect, as it might manipulate 
portions of registers that should be unused. 
7.2.6 Type Conversion Vulnerabilities 
Now that you have a solid grasp of C's type conversions, you can explore some of the 
exceptional circumstances they can create. Implicit type conversions can catch 
programmers off-guard in several situations. This section focuses on simple 
conversions between signed and unsigned types, sign extension, truncation, and the 
usual arithmetic conversions, focusing on comparisons. 
Signed/Unsigned Conversions 
Most security issues related to type conversions are the result of simple conversions 
between signed and unsigned integers. This discussion is limited to conversions that 
occur as a result of assignment, function calls, or typecasts. 
For a quick recap of the simple conversion rules, when a signed variable is converted 
to an unsigned variable of the same size, the bit pattern is left alone, and the value 
changes correspondingly. The same thing occurs when an unsigned variable is 
converted to a signed variable. Technically, the unsigned-to-signed conversion is 
implementation defined, but in twos complement implementations, usually the bit 
pattern is left alone. 
The most important situation in which this conversion becomes relevant is during 
function calls, as shown in this example: 
int copy(char *dst, char *src, unsigned int len) 
{ 
    while (len--) 
        *dst++ = *src++; 
} 
The third argument is an unsigned int that represents the length of the memory 
section to copy. If you call this function and pass a signed int as the third argument, 
it's converted to an unsigned integer. For example, say you do this: 
int f = -1; 
copy(mydst, mysrc, f); 
The copy() function sees an extremely large positive len and most likely copies until 
it causes a segmentation fault. Most libc routines that take a size parameter have an 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
263 
argument of type size_t, which is an unsigned integer type that's the same width as 
pointer. This is why you must be careful never to let a negative length field make its 
way to a libc routine, such as snprintf(), strncpy(), memcpy(), read(), or strncat(). 
This situation occurs fairly often, particularly when signed integers are used for length 
values and the programmer doesn't consider the potential for a value less than 0. In 
this case, all values less than 0 have their value changed to a high positive number 
when they are converted to an unsigned type. Malicious users can often specify 
negative integers through various program interfaces and undermine an application's 
logic. This type of bug happens commonly when a maximum length check is 
performed on a user-supplied integer, but no check is made to see whether the 
integer is negative, as in Listing 6-7. 
Listing 6-7. Signed Comparison Vulnerability Example 
int read_user_data(int sockfd) 
{ 
    int length, sockfd, n; 
    char buffer[1024]; 
    length = get_user_length(sockfd); 
    if(length > 1024){ 
        error("illegal input, not enough room in buffer\n"); 
        return 1; 
    } 
    if(read(sockfd, buffer, length) < 0){ 
        error("read: %m"); 
        return 1; 
    } 
    return 0; 
} 
In Listing 6-7, assume that the get_user_length() function reads a 32-bit integer 
from the network. If the length the user supplies is negative, the length check can be 
evaded, and the application can be compromised. A negative length is converted to a 
size_t type for the call to read(), which as you know, turns into a large unsigned 
value. A code reviewer should always consider the implications of negative values in 
signed types and see whether unexpected results can be produced that could lead to 
security exposures. In this case, a buffer overflow can be triggered because of the 
erroneous length check; consequently, the oversight is quite serious. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
264 
Auditing Tip: Signed/Unsigned Conversions 
You want to look for situations in which a function takes a size_t or unsigned int 
length parameter, and the programmer passes in a signed integer that can be 
influenced by users. Good functions to look for include read(), recvfrom(), memcpy(), 
memset(), bcopy(), snprintf(), strncat(), strncpy(), and malloc(). If users can 
coerce the program into passing in a negative value, the function interprets it as a 
large value, which could lead to an exploitable condition. 
Also, look for places where length parameters are read from the network directly or 
are specified by users via some input mechanism. If the length is interpreted as a 
signed variable in parts of the code, you should evaluate the impact of a user 
supplying a negative value. 
As you review functions in an application, it's a good idea to note the data types of 
each function's arguments in your function audit log. This way, every time you audit 
a subsequent call to that function, you can simply compare the types and examine the 
type conversion tables in this chapter's "Type Conversions(? [????.])" section to 
predict exactly what's going to happen and the implications of that conversion. You 
learn more about analyzing functions and keeping logs of function prototypes and 
behavior in Chapter 7(? [????.]), "Program Building Blocks." 
Sign Extension 
Sign extension occurs when a smaller signed integer type is converted to a larger type, 
and the machine propagates the sign bit of the smaller type through the unused bits 
of the larger type. The intent of sign extension is that the conversion is 
value-preserving when going from a smaller signed type to a larger signed type. 
As you know, sign extension can occur in several ways. First, if a simple conversion is 
made from a small signed type to a larger type, with a typecast, assignment, or 
function call, sign extension occurs. You also know that sign extension occurs if a 
signed type smaller than an integer is promoted via the integer promotions. Sign 
extension could also occur as a result of the usual arithmetic conversions applied after 
integer promotions because a signed integer type could be promoted to a larger type, 
such as long long. 
Sign extension is a natural part of the language, and it's necessary for 
value-preserving promotions of integers. So why is it mentioned as a security issue? 
There are two reasons: 
In certain cases, sign extension is a value-changing conversion that has an 
unexpected result. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
265 
Programmers consistently forget that the char and short types they use are 
signed! 
To examine the first reason, if you recall from the conversion section, one of the more 
interesting findings was that sign extension is performed if a smaller signed type is 
converted into a larger unsigned type. Say a programmer does something like this: 
char len; 
len=get_len_field(); 
snprintf(dst, len, "%s", src); 
This code has disaster written all over it. If the result of get_len_field() is such that 
len has a value less than 0, that negative value is passed as the length argument to 
snprintf(). Say the programmer tries to fix this error and does the following: 
char len; 
len=get_len_field(); 
snprintf(dst, (unsigned int)len, "%s", src); 
This solution sort of makes sense. An unsigned integer can't be negative, right? 
Unfortunately, sign extension occurs during the conversion from char to unsigned int, 
so the attempt to get rid of characters less than 0 backfired. If len happens to be 
below 0, (unsigned int)len ends up with a large value. 
This example might seem somewhat arbitrary, but it's similar to an actual bug the 
authors recently discovered in a client's code. The moral of the story is that you 
should always remember sign extension is applied when converting from a smaller 
signed type to a larger unsigned type. 
Now for the second reasonprogrammers consistently forget that the char and short 
types they use are signed. This statement rings quite true, especially in network code 
that deals with signed integer lengths or code that processes binary or text data one 
character at a time. Take a look at a real-world vulnerability in the DNS 
packet-parsing code of l0pht's antisniff tool 
(http://packetstormsecurity.org/sniffers/antisniff/). It's an excellent bug for 
demonstrating some vulnerabilities that have been discussed. A buffer overflow was 
first discovered in the software involving the improper use of strncat(), and after that 
vulnerability was patched, researchers from TESO discovered that it was still 