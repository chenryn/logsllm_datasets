title:Veil: Private Browsing Semantics Without Browser-side Assistance
author:Frank Wang and
James Mickens and
Nickolai Zeldovich
Veil: Private Browsing Semantics Without
Browser-side Assistance
Frank Wang
MIT CSAIL
PI:EMAIL
James Mickens
Harvard University
PI:EMAIL
Nickolai Zeldovich
MIT CSAIL
PI:EMAIL
Abstract—All popular web browsers offer a “private browsing
mode.” After a private session terminates, the browser is supposed
to remove client-side evidence that the session occurred. Unfortu-
nately, browsers still leak information through the ﬁle system, the
browser cache, the DNS cache, and on-disk reﬂections of RAM
such as the swap ﬁle.
Veil is a new deployment framework that allows web devel-
opers to prevent these information leaks, or at least reduce their
likelihood. Veil leverages the fact that, even though developers do
not control the client-side browser implementation, developers do
control 1) the content that is sent to those browsers, and 2) the
servers which deliver that content. Veil web sites collectively store
their content on Veil’s blinding servers instead of on individual,
site-speciﬁc servers. To publish a new page, developers pass their
HTML, CSS, and JavaScript ﬁles to Veil’s compiler; the compiler
transforms the URLs in the content so that, when the page loads
on a user’s browser, URLs are derived from a secret user key.
The blinding service and the Veil page exchange encrypted data
that is also protected by the user’s key. The result is that Veil
pages can safely store encrypted content in the browser cache;
furthermore, the URLs exposed to system interfaces like the
DNS cache are unintelligible to attackers who do not possess the
user’s key. To protect against post-session inspection of swap ﬁle
artifacts, Veil uses heap walking (which minimizes the likelihood
that secret data is paged out), content mutation (which garbles
in-memory artifacts if they do get swapped out), and DOM
hiding (which prevents the browser from learning site-speciﬁc
HTML, CSS, and JavaScript content in the ﬁrst place). Veil pages
load on unmodiﬁed commodity browsers, allowing developers to
provide stronger semantics for private browsing without forcing
users to install or reconﬁgure their machines. Veil provides these
guarantees even if the user does not visit a page using a browser’s
native privacy mode; indeed, Veil’s protections are stronger than
what the browser alone can provide.
I.
INTRODUCTION
Web browsers are the client-side execution platform for
a variety of online services. Many of these services handle
sensitive personal data like emails and ﬁnancial transactions.
Since a user’s machine may be shared with other people, she
may wish to establish a private session with a web site, such
Network and Distributed Systems Security (NDSS) Symposium 2018
18-21 February 2018, San Diego, CA, USA
ISBN 1-1891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23117
www.ndss-symposium.org
that the session leaves no persistent client-side state that can
later be examined by a third party. Even if a site does not
handle personally identiﬁable information, users may not want
to leave evidence that a site was even visited. Thus, all popular
browsers implement a private browsing mode which tries to
remove artifacts like entries in the browser’s “recently visited”
URL list.
Unfortunately, implementations of private browsing mode
still allow sensitive information to leak into persistent stor-
age [2], [28], [35], [46]. Browsers use the ﬁle system or a
SQLite database to temporarily store information associated
with private sessions; this data is often incompletely deleted
and zeroed-out when a private session terminates, allowing
attackers to extract images and URLs from the session. During
a private session, web page state can also be reﬂected from
RAM into swap ﬁles and hibernation ﬁles; this state is in
cleartext, and therefore easily analyzed by curious individuals
who control a user’s machine after her private browsing session
has ended. Simple greps for keywords are often sufﬁcient to
reveal sensitive data [2], [28].
Web browsers are complicated platforms that are contin-
ually adding new features (and thus new ways for private
information to leak). As a result, it is difﬁcult to implement
even seemingly straightforward approaches for strengthening
a browser’s implementation of incognito modes. For example,
to prevent secrets in RAM from paging to disk, the browser
could use OS interfaces like mlock() to pin memory pages.
However, pinning may interfere in subtle ways with other
memory-related functionality like garbage collecting or tab
discarding [50]. Furthermore, the browser would have to use
mlock() indiscriminately, on all of the RAM state belonging
to a private session, because the browser would have no way
to determine which state in the session is actually sensitive,
and which state can be safely exposed to the swap device.
In this paper, we introduce Veil, a system that allows web
developers to implement private browsing semantics for their
own pages. For example, the developers of a whisteblowing
site can use Veil to reduce the likelihood that employers can
ﬁnd evidence of visits to the site on workplace machines.
Veil’s privacy-preserving mechanisms are enforced without
assistance from the browser—even if users visit pages using a
browser’s built-in privacy mode, Veil provides stronger assur-
ances that can only emerge from an intentional composition of
HTML, CSS, and JavaScript. Veil leverages ﬁve techniques to
protect privacy: URL blinding, content mutation, heap walking,
DOM hiding, and state encryption.
• Developers pass their HTML and CSS ﬁles through
Veil’s compiler. The compiler locates cleartext URLs in
the content, and transforms those raw URLs into blinded
references that are derived from a user’s secret key and are
cryptographically unlinkable to the original URLs. The
compiler also injects a runtime library into each page;
this library interposes on dynamic content fetches (e.g.,
via XMLHttpRequests), and forces those requests to
also use blinded references.
• The compiler uploads the objects in a web page to Veil’s
blinding servers. A user’s browser downloads content
from those blinding servers, and the servers collaborate
with a page’s JavaScript code to implement the blinded
URL protocol. To protect the client-side memory artifacts
belonging to a page, the blinding servers also dynami-
cally mutate the HTML, CSS, and JavaScript in a page.
Whenever a user fetches a page, the blinding servers
create syntactically different (but semantically equivalent)
versions of the page’s content. This ensures that two
different users of a page will each receive unique client-
side representations of that page.
• Ideally, sensitive memory artifacts would never swap
out in the ﬁrst place. Veil allows developers to mark
JavaScript state and renderer state as sensitive. Veil’s
compiler injects heap walking code to keep that state from
swapping out. The code uses JavaScript reﬂection and
forced DOM relayouts to periodically touch the memory
pages that contain secret data. This coerces the OS’s least-
recently-used algorithm to keep the sensitive RAM pages
in memory.
• Veil sites which desire the highest
level of privacy
can opt to use Veil’s DOM hiding mode. In this mode,
the client browser essentially acts as a dumb graphical
terminal. Pages are rendered on a content provider’s
machine, with the browser sending user inputs to the
machine via the blinding servers; the content provider’s
machine responds with new bitmaps that represent the
updated view of the page. In DOM hiding mode, the
page’s unique HTML, CSS, and JavaScript content is
never transmitted to the client browser.
• Veil also lets a page store private, persistent state by
encrypting that state and by naming it with a blinded
reference that only the user can generate.
By using blinded references for all content names (includ-
ing those of top-level web pages), Veil avoids information
leakage via client-side, name-centric interfaces like the DNS
cache [19], the browser cache, and the browser’s address bar.
Encryption allows a Veil page to safely leverage the browser
cache to reduce page load times, or store user data across
different sessions of the private web page. A page that desires
the highest level of security will eschew even the encrypted
cache, and use DOM hiding; in concert with URL blinding, the
hiding of DOM content means that the page will generate no
greppable state in RAM or persistent storage that could later
be used to identify the page. Table I summarizes the different
properties of Veil’s two modes for private browsing.
In summary, Veil is the ﬁrst web framework that allows
developers to implement privacy-preserving browsing se-
mantics for their own pages. These semantics are stronger
than those provided by native in-browser incognito modes;
however, Veil pages load on commodity browsers, and do
not require users to reconﬁgure their systems or run their
browsers within a special virtual machine [17]. Veil can
translate legacy pages to more secure versions automatically,
or with minimal developer assistance (§V), easing the barrier
to deploying privacy-preserving sites. Experiments show that
Veil’s overheads are moderate: 1.25x–3.25x for Veil with
encrypted client-side storage, mutated DOM content, and heap
walking; and 1.2x–2.1x for Veil in DOM hiding mode.
II. DEPLOYMENT MODEL
Veil uses an opt-in model, and is intended for web sites that
want to actively protect client-side user privacy. For example,
a whistleblowing site like SecureDrop [75] is incentivized
to hide client-side evidence that the SecureDrop website has
been visited; strong private browsing protections give people
conﬁdence that visiting SecureDrop on a work machine will
not lead to incriminating aftereffects. As another example of
a site that is well-suited for Veil, consider a web page that
allows teenagers to ﬁnd mental health services. Teenagers who
browse the web on their parents’ machines will desire strong
guarantees that the machines store no persistent records of
private browsing activity.
Participating Veil sites must explicitly recompile their
is not
content using the Veil compiler. This requirement
unduly burdensome, since all non-trivial frameworks for web
development impose a developer-side workﬂow discipline. For
example, Aurelia [9], CoffeeScript [12], and Meteor [38]
typically require a compilation pass before content can go live.
Participating Veil sites must also explicitly serve their
content from Veil blinding servers. Like Tor servers [15], Veil’s
blinding servers can be run by volunteers, although content
providers can also contribute physical machines or VMs to
the blinding pool (§IV-B).
Today, many sites are indifferent towards the privacy impli-
cations of web browsing; other sites are interested in protecting
privacy, but lack the technical skill to do so; and others are
actively invested in using technology to hide sensitive user
data. Veil targets the latter two groups of site operators. Those
groups are currently in the minority, but they are growing.
An increasing number of web services deﬁne their value in
terms of privacy protections [16], [18], [53], [54], and recent
events have increased popular awareness of privacy issues [49].
Thus, we believe that frameworks like Veil will become more
prevalent as users demand more privacy, and site operators
demand more tools to build privacy-respecting systems.
III. THREAT MODEL
As described in Section II, Veil assumes that a web service
is actively interested in preserving its users’ client-side privacy.
Thus, Veil trusts web developers and the blinding servers.
Veil’s goal is to defend the user against local attackers who take
control of a user’s machine after a private session terminates.
If an attacker has access to the machine during a private
session, the attacker can directly extract sensitive data, e.g.,
via keystroke logging or by causing the browser to core dump;
such exploits are out-of-scope for this paper.
Veil models the post-session attacker as a skilled system
administrator who knows the location and purpose of the swap
2
Browsing mode
Regular browsing
Regular incognito mode
Veil with encrypted
client-side storage, mutated
DOM content, heap walking
Veil with DOM hiding
Persistent, per-site client-side
storage
Yes (cleartext by default)
No
Information leaks
through client-side,
name-based interfaces
Yes
Yes
Per-site browser RAM artifacts
Yes
Yes
GUI interactions
Locally processed
Locally processed
Yes (always encrypted)
No (blinding servers)
Yes (but mutated and heap-walked)
Locally processed
No
No (blinding servers)
No
Remotely processed
TABLE I.
A COMPARISON BETWEEN VEIL’S TWO BROWSING MODES, REGULAR INCOGNITO BROWSING, AND REGULAR BROWSING THAT DOES NOT
USE INCOGNITO MODE.
ﬁle, the browser cache, and ﬁles like /var/log/* that record
network activity like DNS resolution requests. Such an attacker
can use tools like grep or find to look for hostnames, ﬁle
types, or page content that was accessed during a Veil session.
The attacker may also possess off-the-shelf forensics tools like
Mandiant Redline [36] that look for traces of private browsing
activity. However, the attacker lacks the skills to perform a
customized, low-level forensics investigation that, e.g., tries to
manually extract C++ data structures from browser memory
pages that Veil could not prevent from swapping out.
Given this attacker model, Veil’s security goals are weaker
than strict forensic deniability [17]. However, Veil’s weaker
type of forensic resistance is both practically useful and, in
many cases,
the strongest guarantee that can be provided
without forcing users to run browsers within special OSes or
virtual machines. Veil’s goal is to load pages within unmodiﬁed
browsers that run atop unmodiﬁed operating systems. Thus,
Veil is forced to implement privacy-preserving features using
browser and OS interfaces that are unaware of Veil’s privacy
goals. These constraints make it impossible for Veil to provide
strict forensic deniability. However, most post-session attackers
(e.g., friends, or system administrators at work, Internet cafes,
or libraries) will lack the technical expertise to launch FBI-
style forensic investigations.
Using blinded URLs, Veil
tries to prevent data leaks
through system interfaces that use network names. Examples
of name-based interfaces are the browser’s “visited pages”
history,
the browser cache, cookies, and the DNS cache
(which leaks the hostnames of the web servers that a browser
contacts [2]). It is acceptable for the attacker to learn that a
user has contacted Veil’s blinding servers—those servers form
a large pool whose hostnames are generic (e.g., veil.io)
and do not reveal any information about particular Veil sites
(§IV-B).
Veil assumes that web developers only include trusted
content that has gone through the Veil compiler. A page may
embed third party content like a JavaScript library, but the
Veil compiler analyzes both ﬁrst party and third party content
during compilation (§IV-A).
Heap walking (§IV-E) allows Veil
to prevent sensitive
RAM artifacts from swapping to disk. Veil does not
try
to stop information leaks from GPU RAM [31], but GPU
RAM is never swapped to persistent storage. Poorly-written or
malicious browser extensions that leak sensitive page data [32]
are also outside the scope of this paper.
IV. DESIGN
As shown in Figure 1, the Veil framework consists of three
components. The compiler transforms a normal web page into
a new version that implements static and dynamic privacy
protections. Web developers upload the compiler’s output to
blinding servers. These servers act as intermediaries between
content publishers and content users, mutating and encrypting
content. To load the Veil page, a user ﬁrst loads a small
bootstrap page. The bootstrap asks for a per-user key and the
URL of the Veil page to load; the bootstrap then downloads the
appropriate objects from the blinding servers and dynamically
overwrites itself with the privacy-preserving content in the
target page.
In the remainder of this section, we describe Veil’s architec-
ture in more detail. Our initial discussion involves a simple,
static web page that consists of an HTML ﬁle, a CSS ﬁle,
a JavaScript ﬁle, and an image. We iteratively reﬁne Veil’s