---
title: App consent grant investigation
description: Learn how to identify and investigate app consent attacks, protect data, and minimize further risks.
keywords: app consent grant, investigation, attack, illicit consent grant, microsoft threat protection, microsoft 365, search, query, telemetry, security events, antivirus, firewall, Microsoft Defender XDR
search.product: DART
search.appverid: met150
ms.service: microsoft-365-security
ms.custom: has-azure-ad-ps-ref
ms.mktglfcycl: deploy
ms.sitesec: library
ms.pagetype: security
f1.keywords:
  - NOCSH
ms.author: dansimp
author: dansimp
localization_priority: Normal
manager: dansimp
audience: ITPro
ms.collection:
  - msftsolution-secops
ms.topic: article
ms.subservice:: m365d
---
# App consent grant investigation
This article provides guidance on identifying and investigating app consent attacks, protecting information, and minimizing further risks.
This article contains the following sections:
- **Prerequisites:** Covers the specific requirements you need to complete before starting the investigation. For example, logging that should be turned on, roles and permissions required, among others.
- **Workflow:** Shows the logical flow that you should follow to perform this investigation.
- **Checklist:** Contains a list of tasks for each of the steps in the flow chart. This checklist can be helpful in highly regulated environments to verify steps taken or simply as a quality gate for yourself.
- **Investigation steps:** Includes a detailed step-by-step guidance for this specific investigation.
- **Recovery:** Contains high level steps on how to recover/mitigate from an Illicit Application Consent grant attack.
- **References:** Contains more reading and reference materials.
## Prerequisites
Here are general settings and configurations you should complete to perform an investigation for Application Consent Grants. Before starting the investigation, make sure read about the types of consent permissions explained in [Consent permission types](/azure/active-directory/develop/v2-permissions-and-consent).
### Customer data
To start the investigation process, you need the following data:
- Access to the tenant as a Global Admin - A Cloud only account (not part of their on-premises environment)
- Detail of indicators of compromise (IoCs)
- The date and time when you noticed the incident
- Date range
- Number of compromised accounts
- Name(s) of compromised accounts
- Roles of the compromised account
- Are the accounts highly privileged (GA Microsoft Exchange, SharePoint)?
- Are there any Enterprise Applications that are related to the incident?
- Did any users report about any applications that were requesting permissions to data on their behalf?
### System requirements
Ensure you complete the following installations and configuration requirements:
1. The AzureAD PowerShell module is installed.
2. You have global administrator rights on the tenant that the script run against.
3. You're assigned local administrator role on the computer that you use to run the scripts.
#### Install the AzureAD module
Use this command to install the AzureAD module.
```powershell
Install-Module -Name AzureAD -Verbose
```
> [!NOTE]
> If you're prompted to install the modules from an untrusted repository, type **Y** and press **Enter**.
#### Install the MSOnline PowerShell module
1. Run the Windows PowerShell app with elevated privileges (run as administrator).
2. Run this command to allow PowerShell to run signed scripts.
    ```powershell
    Set-ExecutionPolicy RemoteSigned
    ```
3. Install the MSOnline module with this command.
    ```powershell
    Install-Module -Name MSOnline -Verbose
    ```
    > [!NOTE]
    > If you're prompted to install the modules from an untrusted repository, type **Y** and press **Enter**.
#### Download the AzureADPSPermissions Script from GitHub
1. Download the [Get-AzureADPSPermissions.ps1](https://gist.github.com/psignoret/41793f8c6211d2df5051d77ca3728c09) script from GitHub to a folder from which you run the script. The output file "*permissions.csv*" is also be written to this same folder.
2. Open a PowerShell instance as an administrator and open the folder in which you saved the script.
3. Connect to your directory using the `Connect-AzureAD` cmdlet. Here's an example.
    ```powershell
    Connect-AzureAD -tenantid "2b1a14ac-2956-442f-9577-1234567890ab" -AccountId "PI:EMAIL"
    ```
4. Run this PowerShell command.
    ```powershell
    Get-AzureADPSPermissions.ps1 | Export-csv -Path "Permissions.csv" -NoTypeInformation
    ```
    Disconnect your AzureAD session with this command.
    ```powershell
    Disconnect-AzureAD
    ```
## Consent terminologies
### What are application consent grants?
Consent is the process of granting authorization to an application to access protected resources on the users' behalf. An administrator or user can be asked for consent to allow access to their organization/individual data.
An application is granted access to data based on a particular user or for the entire organization. Attackers can misuse these consents to gain persistence to the environment and access sensitive data. These types of attacks are called Illicit Consent Grants, which can happen through a phishing email, a user account compromise through password spray, or when an attacker registers an application as a legitimate user. In scenarios where a Global Admin account is compromised, then the registration and consent grant are for tenant-wide and not just for one user.
Before an application can access your organization's data, a user must grant the application permissions to do so. Different permissions allow different levels of access. By default, all users are allowed to consent to applications for permissions that don't require administrator consent. For instance, by default, a user can consent to allow an app to access their mailbox but can't consent to allow an app unfettered access to read and write to all files in your organization.
> [!NOTE]
> By allowing users to grant apps access to data, users can easily acquire useful applications and be productive. However, in some situations, this configuration can represent a risk if it's not monitored and controlled carefully.
### Roles that can grant consent on behalf of the organization
To be able to grant **tenant-wide admin consent**, you must sign in as one of the following:
- Global Administrator
- Application Administrator
- Cloud Application Administrator
### Consent types
- **Administrator -** Indicates the consent was provided by the administrator (on behalf of the organization)
- **Individual user -** Indicates the consent was granted by the user and only has access to that user's information
- **Accepted values**
  - *AllPrincipals -* Consented by an administrator for the entire tenancy
  - *Principal â€“* Consented by the individual user for data only related to that account
### Consent and permissions
The actual user experience of granting consent differs depending on the policies set on the user's tenant, the user's scope of authority (or role), and the type of permissions requested by the client application. This means that application developers and tenant admins have some control over the consent experience. Admins have the flexibility of setting and deactivating policies on a tenant or app to control the consent experience in their tenant. Application developers can dictate what types of permissions are requested and if they want to guide users through the user consent flow or the admin consent flow.
- **User consent flow** - When an application developer directs users to the authorization endpoint with the intent to record consent for only the current user.
- **Admin consent flow** - When an application developer directs users to the admin consent endpoint with the intent to record consent for the entire tenant. To ensure the admin consent flow works properly, application developers must list all permissions in the **RequiredResourceAccess** property in the application manifest.
### Delegated permissions vs. application permissions
Delegated permissions are used by apps that have a signed-in user present and can have consents applied by the administrator or user.
Application permissions are used by apps that run without a signed-in user present. For example, apps that run as background services or daemons. Application permissions can be consented only by an administrator.
For more information, see:
- [Admin consent workflow for admin approval for specific applications](/azure/active-directory/manage-apps/configure-admin-consent-workflow)
- [Publisher verification program](/azure/active-directory/develop/publisher-verification-overview#:~:text=Publisher%20verification%20%28preview%29%20helps%20admins%20and%20end%20users,application%20developers%20integrating%20with%20the%20Microsoft%20identity%20platform.)
- [Configure how end users consent to applications](/azure/active-directory/manage-apps/configure-user-consent)
### Classifying risky permissions
There are thousands (at least) of permissions in the system, and not feasible to list out or parse all of these. The following list addresses commonly misused permissions and others that would create catastrophic impact if misused.
At a high level, DART has observed the following "root" delegated (App+User) permissions being misused in consent phishing attacks. Root equates to the top level. For example, *Contacts.\** means to include all delegated permutations of Contacts permissions: *Contacts.Read*, *Contacts.ReadWrite*, *Contacts.Read.Shared*, and *Contacts.ReadWrite.Shared*.
1. *Mail.\* (including Mail.Send\*, but not Mail.ReadBasic\*)*
2. *Contacts. \**
3. *MailboxSettings.\**
4. *People.\**
5. *Files.\**
6. *Notes.\**
7. *Directory.AccessAsUser.All*
8. *User\_Impersonation*
The first seven permissions in the list above are for Microsoft Graph and the "legacy" API equivalents, such as Azure Active Directory (Azure AD) Graph and Outlook REST. The eighth permission is for Azure Resource Manager (ARM) and could also be dangerous on any API that exposes sensitive data with this blanket impersonation scope.
Based on DART's observations, attackers use a combination of the first six permissions in 99% of the consent phishing attacks. Most people don't think of the delegated version of *Mail.Read* or *Files.Read* as a high-risk permission, however, the attacks DART has seen are generally widespread attacks targeting end users, rather than spear phishing against admins who can actually consent to the dangerous permissions. It's recommended to bubble apps with these "critical" level of impact permissions. Even if the applications don't have malicious intent, and if a bad actor were to compromise the app identity, then your entire organization could be at risk.
**For the highest risk impact permissions, start here:**
- Application permission (AppOnly/AppRole) versions of all the above permissions, where applicable
**Delegated and AppOnly versions of the following permissions:**
- *Application.ReadWrite.All*
- *Directory.ReadWrite.All*
- *Domain.ReadWrite.All\**
- *EduRoster.ReadWrite.All\**
- *Group.ReadWrite.All*
- *Member.Read.Hidden\**
- *RoleManagement.ReadWrite.Directory*
- *User.ReadWrite.All\**
- *User.ManageCreds.All*
- All other AppOnly permissions that allow write access
**For the lowest risk impact permissions list, start here:**
- *User.Read*
- *User.ReadBasic.All*
- *Open\_id*
- *Email*
- *Profile*
- *Offline\_access* (only if paired with other permissions on this "lowest risk" list)
### Viewing permissions
1. To view the permissions, navigate to the **Registration** screen in the enterprise application.
    :::image type="content" source="./media/incident-response-playbook-app-consent/Viewpermissions.png" alt-text="view permissions":::
2. Select **View API permissions**.
    :::image type="content" source="./media/incident-response-playbook-app-consent/Viewapipermissionbutton.png" alt-text="apipermissions":::
3. Select **Add a permission** and the following screen is displayed.
    :::image type="content" source="./media/incident-response-playbook-app-consent/Commonapi.png" alt-text="api":::
4. Select **Microsoft Graph** to view the different types of permissions.
    :::image type="content" source="./media/incident-response-playbook-app-consent/RequestAPIpermissions.png" alt-text="types of permissions":::
5. Select the type of permissions the registered application is using: **Delegated** **permissions** or **Application** **permissions**. In the above image, **Application permissions** is selected.
6. You can search for one of the high-risk impact permissions such as **EduRoster**.
    :::image type="content" source="./media/incident-response-playbook-app-consent/RequestAPIpermissions_edu.png" alt-text="examplepermission":::
7. Select **EduRoster** and expand the permissions.
    :::image type="content" source="./media/incident-response-playbook-app-consent/RequestAPIpermissions_selecteduroster.png" alt-text="eduroster":::
8. You can now assign or review these permissions.
    For more information,  [Graph Permissions](/graph/permissions-reference).
## Workflow
[![App consent grant investigation workflow](./media/incident-response-playbook-app-consent/Appconsent_flow.png)]
You can also:
- Download the app consent grant and other incident response playbook workflows as a [PDF](https://download.microsoft.com/download/2/9/a/29a32dc4-d126-42af-a825-ffb944135a50/Incident-Response-Playbook-Workflows.pdf).
- Download the app consent grant and other incident response playbook workflows as a [Visio file](https://download.microsoft.com/download/2/9/a/29a32dc4-d126-42af-a825-ffb944135a50/Incident-Response-Playbook-Workflows.vsdx).
## Checklist
Use this checklist to perform application consent grant validation.
- **Requirements**
  Make sure you have access to the tenant as a Global Admin. This is a cloud-only account and isn't part of your on-premises environment.
- **Indicators of compromise (IoC)**
  Check the following indicators of compromise (IoC):
  - When did you notice the incident?
  - Date range of the incident (how far left is the goal post?)
  - Number of compromised accounts
  - Name(s) of compromised accounts
  - Roles of the compromised account(s)
  - Are the compromised accounts highly privileged, a standard user, or a combination
- **Roles**
  You must be assigned with these roles:
  - Global administrator rights on the tenant to execute the script
  - Local Administrator role on the computer from which you run the script
- **PowerShell configuration**
  Configure your PowerShell environment with these steps:
  1. Install the Azure AD PowerShell module.
  2. Run the Windows PowerShell app with elevated privileges. (Run as administrator).
  3. Configure PowerShell to run signed scripts.
  4. Download the [Get-AzureADPSPermissions.ps1](https://gist.github.com/psignoret/41793f8c6211d2df5051d77ca3728c09) script.
- **Investigation triggers**
  - Account compromise
  - App Consent settings modified on the tenant