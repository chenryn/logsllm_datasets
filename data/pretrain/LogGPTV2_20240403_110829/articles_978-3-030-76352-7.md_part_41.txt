References
1. Akcay, S., Atapour-Abarghouei, A., Breckon, T.P.: GANomaly: semi-supervised
anomaly detection via adversarial training. In: Jawahar, C.V., Li, H., Mori, G.,
Schindler, K. (eds.) ACCV 2018. LNCS, vol. 11363, pp. 622–637. Springer, Cham
(2019). https://doi.org/10.1007/978-3-030-20893-6 39
2. Andrea,K.,Shevlyakov,G.,Smirnov,P.:Detectionofoutlierswithboxplots(2013)
3. Chandola,V.,Banerjee,A.,Kumar,V.:Anomalydetection:asurvey.ACMCom-
put. Surv. (CSUR) 41(3), 1–58 (2009)
4. Dang, Y., Lin, Q., Huang, P.: AIOps: real-world challenges and research innova-
tions.In:2019IEEE/ACM41stInternationalConferenceonSoftwareEngineering:
Companion Proceedings (ICSE-Companion), pp. 4–5. IEEE (2019)
5. Doersch,C.:Tutorialonvariationalautoencoders.arXivpreprintarXiv:1606.05908
(2016)
SLMAD: Statistical Learning-Based Metric Anomaly Detection 263
6. Gao, J., Song, X., Wen, Q., Wang, P., Sun, L., Xu, H.: RobustTAD: robust time
series anomaly detection via decomposition and convolutional neural networks.
arXiv preprint arXiv:2002.09545 (2020)
7. Gulenko, A.: Autonomic self-healing in cloud computing platforms (2020)
8. Hochenbaum, J., Vallis, O.S., Kejariwal, A.: Automatic anomaly detection in the
cloud via statistical learning. arXiv preprint arXiv:1704.07706 (2017)
9. Laptev, N., Yosinski, J., Li, L.E., Smyl, S.: Time-series extreme event forecasting
with neural networks at Uber. In: International Conference on Machine Learning,
vol. 34, pp. 1–5 (2017)
10. Liu,D.,Zhao,Y.,Xu,H.,Sun,Y.,Pei,D.,Luo,J.,Jing,X.,Feng,M.:Opprentice:
towardspracticalandautomaticanomalydetectionthroughmachinelearning.In:
Proceedings of the 2015 Internet Measurement Conference, pp. 211–224 (2015)
11. Lu, W., Ghorbani, A.A.: Network anomaly detection based on wavelet analysis.
EURASIP J. Adv. Signal Process. 2009, 1–16 (2008)
12. Mahimkar, A., et al.: Rapid detection of maintenance induced changes in service
performance. In: Proceedings of the Seventh Conference on Emerging Networking
Experiments and Technologies, pp. 1–12 (2011)
13. Masood, A., Hashmi, A.: AIOps: predictive analytics & machine learning in oper-
ations. Cognitive Computing Recipes, pp. 359–382. Apress, Berkeley, CA (2019).
https://doi.org/10.1007/978-1-4842-4106-6 7
14. Ren,H.,etal.:Time-seriesanomalydetectionserviceatmicrosoft.In:Proceedings
of the 25th ACM SIGKDD International Conference on Knowledge Discovery &
Data Mining, pp. 3009–3017 (2019)
15. Rosner,B.:PercentagepointsforageneralizedESDmany-outlierprocedure.Tech-
nometrics 25(2), 165–172 (1983)
16. Salinas, D., Flunkert, V., Gasthaus, J., Januschowski, T.: Deepar: probabilistic
forecasting with autoregressive recurrent networks. Int. J. Forecast. 36(3), 1181–
1191 (2020)
17. Shipmon,D.T.,Gurevitch,J.M.,Piselli,P.M.,Edwards,S.T.:Timeseriesanomaly
detection;detectionofanomalousdropswithlimitedfeaturesandsparseexamples
in noisy highly periodic data. arXiv preprint arXiv:1708.03665 (2017)
18. Taylor, S.J., Letham, B.: Forecasting at scale. Am. Stat. 72(1), 37–45 (2018)
19. Vercruyssen, V., Meert, W., Davis, J.: Transfer learning for anomaly detection
through localized and unsupervised instance selection. In: The Thirty-Fourth
AAAI Conference on Artificial Intelligence, AAAI 2020, pp. 6054–6061. AAAI
Press (2020)
20. Walker, M., Dovoedo, Y., Chakraborti, S., Hilton, C.: An improved boxplot for
univariate data. Am. Stat. 72(4), 348–353 (2018)
21. Wei,L.,Kumar,N.,Lolla,V.N.,Keogh,E.J.,Lonardi,S.,Ratanamahatana,C.A.:
Assumption-free anomaly detection in time series. SSDBM 5, 237–242 (2005)
22. White, G., Clarke, S.: Short-term qos forecasting at the edge for reliable service
applications. IEEE Transactions on Services Computing pp. 1–1 (2020)
23. Yeh, C.C.M., Zhu, Y., Ulanova, L., Begum, N., Ding, Y., Dau, H.A., Silva, D.F.,
Mueen, A., Keogh, E.: Matrix profile i: all pairs similarity joins for time series:
a unifying view that includes motifs, discords and shapelets. In: 2016 IEEE 16th
international conference on data mining (ICDM). pp. 1317–1322. Ieee (2016)
24. Zhang, Y., Ge, Z., Greenberg, A., Roughan, M.: Network anomography. In: Pro-
ceedings of the 5th ACM SIGCOMM conference on Internet Measurement. pp.
30–30 (2005)
Software Reliability Engineering
for Resilient Cloud Operations
B
Michael R. Lyu( ) and Yuxin Su
The Chinese University of Hong Kong, Hong Kong, China
{lyu,yxsu}@cse.cuhk.edu.hk
Abstract. In the last decade, cloud environments become the most
sophisticated software systems. Due to the inevitable occurrences of
failures, software reliability engineering is top priority for cloud devel-
opers and maintainers. In this essay, we introduce several frameworks
to provide resilient cloud operations from different development phases,
ranging from fault prevention before deployment and fault removal at
run-time.
·
Keywords: Software reliability engineering Resilient cloud
· ·
operation Fault prevention Fault removal
1 Introduction
Intherecentyears,ITenterpriseshavedrasticallyincreaseddevelopmentoftheir
applications and services on cloud computing platforms, such as search engine,
instant messaging app and online shopping. As cloud systems continue to grow
intermsofcomplexityandvolume,cloudfailuresbecomeinevitableandcritical,
which may lead to service interruptions or performance degradation. Whether
cloud failures can be properly managed will greatly impact company revenue
and customer satisfaction. For example, in 2017, a downtime in Amazon led to
a loss of 150+ million US dollars. Thus, the reliability of modern software is
of paramount importance. Consequently, we identified severalcritical challenges
commonlyseeninindustrialcloudsystemsandprovideageneralroad-mapfrom
fault prevention and fault removal to improve the cloud reliability by resilient
operations. First, as cloud systems are actively undergoing continuous feature
upgrade and system evolution, the statistical properties of system monitoring
data may change from time to time. Hence, to impede the deployment of the
buggy cloud service, a fast and effective fault prevention mechanism for the
source code and cloud services interface is a crucial task to address. In practice,
however, fault prevention is hard to offer perfect cloud services without any
runtime bugs or errors. Fault removal mechanisms can come to rescue after
cloud deployment.
(cid:2)c SpringerNatureSwitzerlandAG2021
H.Hacidetal.(Eds.):ICSOC2020Workshops,LNCS12632,pp.264–268,2021.
https://doi.org/10.1007/978-3-030-76352-7_27
Software Reliability Engineering for Resilient Cloud Operations 265
2 Fault Prevention for Cloud Services
In this section, we introduce fault prevention before the deployment of cloud
services.Weattempttodetectbuggycodewhiletheserviceisunderdevelopment
anddiscussthetestingapproachestoverifythecorrectnessofcloudservicebefore
actual deployment.
2.1 RESTful API Testing
MostindustrialscalecloudservicesareprogrammaticallyaccessedthroughRep-
resentational State Transfer (REST) APIs, which are a clear trend as compos-
able paradigm to create and integrate cloud software. One of the key benefits
of involving RESTful APIs is a systematic approach to software logic modeling
leveraged by a growing usage of standardized cloud software stack. In the last
few years, the OpenAPI Specification (OAS) has gradually become the de-facto
standardtodescribeRESTfulAPIsfromafunctionalperspective.Theadequate
testingofstatefulcloudservicesviaOpenAPIisdifficultandcostly.Failuresgen-
erated by complex stateful interactions can be of high impact to customer, but
they are hard to replicate.
Toaddressthetestingprobleminanautomaticwaywouldcertainlyincrease
the reliability of cloud services. Fuzzing is a widely adopted approach to find
bugs in software by feeding variety of test input. RESTler [1] first performs a
lightweight static analysis on the API specification of a target cloud service and
detects dependencies among test input. However, the automatically-generated
fake paths will limit the combinatorial explosion of the fuzzing space due to the
lack of feedback about grammar. To effectively induce the fuzzers to focus on
fake paths (or branches), we consider the following design aspects. We main-
tain a resource pool which stores a sufficient number of fake paths to affect
the fuzzing policy. Typically, as the fuzzer generates various mutations from
one startup input, fake paths should provide different request coverage and be
directly affected by the input so that the fuzzer will keep uncovering the trap.
Various mechanisms for RESTful API testing based on this direction will be
investigated and evaluated.
2.2 Software Defect Prediction
To improve software reliability, software defect prediction is utilized to assist
developers in finding potential bugs and allocating their testing efforts. Tradi-
tionaldefectpredictionstudiesmainlyfocusondesigninghand-craftedfeatures,
whichareinputintomachinelearningclassifierstoidentifydefectivecode.How-
ever,thesehand-craftedfeaturesoftenfailtocapturethesemanticandstructural
information of programs. Such information is important in modeling program
functionality and can lead to more accurate defect prediction. Software defect
prediction is a process of building classifiers to predict code areas that poten-
tially contain defects, using information such as code complexity and change
history. The prediction results (i.e., buggy code areas) can place warnings for
266 M. R. Lyu and Y. Su
code reviewers and allocate their efforts. The code areas could be files, changes
or methods.
Inthisessay,weintroduceaframeworkcalledDefectPredictionviaConvolu-
tionalNeuralNetwork(DP-CNN)[4],whichleveragesdeeplearningforeffective
feature generation. We evaluate our method on seven open source projects in
terms of F-measure in defect prediction. The experimental results show that in
average, DP-CNN improves the state-of-the-art method by 12%.
3 Fault Removal after Deployment
In this section, we introduce several fault removal approaches from different
perspectives,e.g.loganalysis,emergingincidentdetectionandfaultlocalization.
3.1 Automated Log Mining for Fault Management
Logsaresemi-structuredtextgeneratedbyloggingstatementsinsoftwaresource
code. In recent decades, logs generated from cloud service have become imper-
ative in the reliability assurance mechanism of cloud systems because they are
often the only data available that traces cloud runtime information.
This essay presents a general overview of log mining techniques including
howtoautomateandassistthewritingofloggingstatementsandhowtoemploy
logstodetectanomalies,predictfailures,andfacilitatediagnosis[3].Traditional
log analysis that is mainly based on ad-hoc domain knowledge or manually
constructed and maintained rules is inefficient and ineffective for cloud systems
due to its large scale and high complex in structure. This brings three major
challenges to modern log analysis for cloud services. (1) Quality of the logging
statements varies to a large extent because developers from different groups
usually write logging statements based on their own domain knowledge and ad-
hoc designs. (2) log mining based on manual rules is prohibited due to large
volume of logs generated in a short time. (3) Due to the wide adoption of the
DevOps software development concept, a new software version often appears in
ashort-termmanner.Thus,correspondingloggingstatementsupdatefrequently
aswell.Toaddressthesechallenges,weintroduceseveralworkaboutautomated
rule construction and critical information extraction.
3.2 Automatic Emerging Incident Mining from Discussion
When a high-damaging incident happens in cloud system, developers and main-
tainersgenerateanincidentticketorestablishesawar-roomtodiscussthepoten-
tial reasons and possible solution to fix the incident. Detecting emerging bugs
or errors timely and precisely is crucial for developers and maintainers to pro-
vide resilient cloud services. However, the tremendous quantities of discussion
comments, together with their imprecise and noisy descriptions increase the dif-
ficulties inaccurately identifying newly-appearing issues.Inthis essay,weintro-
duce an automated framework IDEA [2] to identify any new issues based on
Software Reliability Engineering for Resilient Cloud Operations 267
maintainers’ discussions. IDEA takes the discussion of different incident tickets
or war-room about the same target as input. To track the topic variations over
discussion,AOLDA(AdaptivelyOnlineLatentDirichletAllocation)isemployed
for generating discussion-sensitive topic distributions. The emerging topics are
then identified based on the typical anomaly detection method. Finally, IDEA
visualizesthevariationsofdifferentissuesalongwithdiscussions,andhighlights
the emerging ones for better understanding.
3.3 Fault Localization from Structural Information
A critical research direction in cloud computing has been the defense against
inevitablecloudfailuresandtheirpreventionfromcausingserviceinterruptionor
servicedegradation.Wehaveconsequentlyidentifiedtwocriticalchallengescom-
monlyseeninindustrialcloudsystems.First,whendiagnosingfailuresforlarge-
scale cloud systems, there is currently a lack of means to incorporating expert
knowledgeintothetrainingofautomateddetectionmodels.Second,althoughthe
dependenciesofcloudservice/resourcecanproviderichinformationfortracking
thecascadingeffectofcloudfailures,theyhavenotbeenexplicitlyconsideredin
existing methods of root cause analysis.
Toaddresstheabovechallenges,weintroducearesilientcloudsystemsframe-
work by incorporating structural information and knowledge about the cloud
systems.Ourgoal istocomprehensivelyimprove thereliability ofcloudsystems
and services. Particularly, the framework consists of an end-to-end pipeline of
software reliability engineering, i.e., anomaly detection, failure diagnosis, and
fault localization.Anomalydetectionlooksforsystems’anomalouspatternsthat
do not conform to normal behaviors, such as high CPU usage, low through-
put. We propose a log-based anomaly detection model which can quickly learn
unprecedented log patterns in an online manner and dynamically adapt to con-
cept drift caused by system evolution. Moreover, failure diagnosis attempts to
find the most significant problems directly induced by the failures; for exam-
ple, abnormal Key Performance Indicator (KPIs). We therefore introduce an
adaptive failure diagnosis algorithm with a human-in-the-loop strategy for effi-
cientmodeltraining.Lastly,faultlocalizationlocatestherootcauseofafailure,
suchasafailedmicroserviceordevice.Wealsodevelopanovelfaultlocalization
techniqueformicroservicearchitectureusingdependency-awarecollaborativefil-
tering.Experimentalevaluationswillbeconductedonthisend-to-endframework
regarding its effectiveness in providing resilient cloud operations.
References
1. Atlidakis, V., Godefroid, P., Polishchuk, M.: RESTler: stateful REST API fuzzing.
In:Proceedingsofthe41stInternationalConferenceonSoftwareEngineering,ICSE
2019 (2019)
2. Gao, C., Zeng, J., Lyu, M.R., King, I.: Online app review analysis for identifying
emerging issues. In: Proceedings of the 40th International Conference on Software
Engineering, ICSE (2018)
268 M. R. Lyu and Y. Su
3. He,S.,Zhu,J.,He,P.,Lyu,M.R.:Experiencereport:systemloganalysisforanomaly
detection. In: Proceedings of the 27th IEEE International Symposium on Software
Reliability Engineering (ISSRE) (2016)
4. Li,J.,He,P.,Zhu,J.,Lyu,M.R.:Softwaredefectpredictionviaconvolutionalneural
network. In: Proceedings of IEEE International Conference on Software Quality,
Reliability and Security (QRS)
AI-Enabled Process Automation
(AI-PA 2020)
Introduction to the 1st International Workshop
on AI-enabled Process Automation
(AI-PA 2020)
The1stInternationalWorkshoponAI-enabledProcessAutomation(AI-PA2020)was
heldasoneoftheworkshopsofthe 18th InternationalConferenceonServiceOriented
Computing (ICSOC 2020). The AI-PA workshop aims at providing a forum for
researchersandprofessionalsinterestedinArtificialIntelligence(AI)enabledBusiness
Processes and Services, and in understanding, envisioning, and discussing the oppor-
tunitiesandchallenges ofintelligentProcess Automation,ProcessDataAnalytics,and
providingCognitiveAssistantsforknowledgeworkers.Recognizingthebroadscopeof
thepotentialareasofinterest,theworkshopwasorganizedintofourthemesasfollows:
(cid:129) Theme 1: Artificial Intelligence (AI), Services and Processes
(cid:129) Theme 2: BigData, Services and Processes
(cid:129) Theme 3: Smart Entities, Services and Processes
(cid:129) Theme 4: Industry Applications
Thepapersselectedforpresentationandpublicationinthisvolumeshowcasefresh