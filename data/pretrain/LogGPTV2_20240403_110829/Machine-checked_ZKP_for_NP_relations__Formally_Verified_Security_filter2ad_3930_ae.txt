op valid_inputs x ws =
‚àÄ i j, i ‚àà partyset ‚àß j ‚àà partyset ‚áí consistent_inputs x i j ws[i] ws[j]
op consistent_trace x tr : bool =
‚àÄ i j, i ‚àà partyset ‚àß j ‚àà partyset ‚áí
consistent_views x i j (get_view i tr) (get_view j tr).
lemma local_global_consistency x tr :
consistent_trace x tr = (‚àÉ ws rs,
valid_rands x rs ‚àß valid_inputs x ws (protocol x ws rs).`1 = tr).
This abstract theory can be applied to any protocol that can be
expressed in this syntax. As mentioned in the previous section, we
instantiate this result to derive the lemma for our new formalization
of Maurer‚Äôs protocol, as they were developed at the same time. We
have not integrated it with the pre-existing BGW formalization,
which continues to rely on an axiom for this property. Our library
also includes general MPC correctness and security results for
abstract circuits, where each gate corresponds to a round in the
next-message syntax. Our definitions and proofs for next-message
protocols instantiate the abstract theory presented in Section 3.2.
4 VERIFIED IMPLEMENTATIONS
We divide this section into three parts. First, we briefly describe how
we reused the results in [19] to obtain an implementation based
on the BGW protocol [11]. We then present a second instantiation
where we use Jasmin to obtain an optimized formally verified imple-
mentation of Maurer‚Äôs MPC protocol [27]. We conclude the section
with a discussion of the advantages and disadvantages of both
approaches wrt to assurance, development time and performance.
The two implementations are obtained using an extended ver-
sion of the EasyCrypt extraction tool developed in [19], following
two approaches to code extraction. The first approach is a complete
extraction of the fully instantiated top-level MitH functional opera-
tors (modules, imperative procedures and proofs are ignored during
extraction). The second approach is an independent extraction of
each component (MitH formalization, MPC protocol, commitment
scheme, etc.) with pruning to allow plugging-in optimized and
Session 10B: Crypto and Protocol Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2595verified Jasmin implementations of certain operators. The main
difference between the two is that the first approach completely
flattens the development, making the resulting code hard to manage.
The second, more modular approach allows us to rely on different
extraction options for each component, and to easily replace one
component with another. The caveat is that the integration of the
various components is done by hand. In each instantiation below
we explain how the code extraction was conducted.
4.1 Instantiation based on the BGW Protocol
We refine the notion of MPC protocol to the concrete case of se-
cure arithmetic circuit evaluation where parties evaluate addition,
multiplication and scalar multiplication gates sequentially.
type wire_t = t. type topology_t = int * int * int * int.
type gates_t = [
| PInput of int | SInput of int | Constant of int & t
| Addition of int & gates_t & gates_t
| Multiplication of int & gates_t & gates_t
| SMultiplication of int & gates_t & gates_t ].
type circuit_t = topology_t * gates_t.
The circuit is defined over wires, which are elements of a finite
field t. The topology (type topology_t) is a tuple of integers that
fixes the number of public input wires, the number of secret input
wires, the number of gates in the circuit, and the number of output
wires. Intuitively, when ùëõ parties securely evaluate such a circuit,
all of them will receive the values of the public input wires in the
clear, which is consistent with our assumption in Section 3.2 that
all parties receive the same public input. The gates_t type permits
specifying the different gates that may occur in the circuit (above
all gates also carry a gate identifier of type int); note that in this
formalization of the BGW protocol a circuit for a boolean function
is specified as a value in an inductive type, which is essentially a
tree: the output gate is the root, nodes correspond to arithmetic
gates, and the input gates form the leaves.
We define the secure evaluation of a circuit by fixing a secret
sharing scheme and a set of protocols to compute arithmetic gates
over secret shares.6 The sinput_t type for secret inputs is defined
as a list of finite field values, and the secret input gate performs a
fresh secret sharing. The BGW protocol is obtained by instantiating
the secret sharing scheme with Shamir‚Äôs secret sharing and the
low-level arithmetic gate protocols (including the refresh output
gate) with the BGW gates proved secure in [19].
The output gate performs a share-rerandomization followed by
an explicit unsharing where all parties publish the final shares of
the output wires. This allows for a compositional proof, where
simulators for low-level gates can be combined modularly to obtain
a simulator for the entire protocol. This compositional property is
studied in [3, 14] and its formalization was adapted from [19].
We briefly describe how correctness and security of the full pro-
tocol are proved in EasyCrypt. Correctness is proved by induction
on the structure of the circuit and relying on the correctness of the
low-level gates at each inductive step. The 2-privacy of the protocol
is obtained by instantiating the secure composition theorem, as-
suming that the low-level arithmetic gates guarantee a weak notion
6Recall that in the MitH construction these secret input values will be an additive
splitting of a witness, but this should not be confused with the secret sharing performed
inside the MPC protocol that we consider in this section.
of security we call ùë°-pre-output-privacy and that the refresh gate
satisfies ùë°-privacy. We note that the tree/inductive-type representa-
tion of circuits we use in the BGW instantiation allowed for simpler
proofs, as it allows directly applying the EasyCrypt logic to perform
inductive reasoning over the structure of the circuit. However, we
concluded that this introduces an unnecessary abstraction gap to
more efficient implementations that see circuits as a list of gates
(under some topological sorting). Our second instantiation, which
we describe in the next subsection, uses the latter approach but still
retains the modularity on arithmetic gates.
For this instantiation based on BGW we initially performed a
fully automatic extraction using Pedersen commitments, which
exactly matches the implementation in [19]. Field operations and
basic data structures were mapped to unverified OCaml libraries. As
a first optimization, we formalized a PRF-based commitment scheme
following [21], which upon extraction we map to an unverified
HMAC implementation. This is the implementation for which we
collect performance data at the end of this section.
4.2 Instantiation based on Maurer‚Äôs Protocol
We developed a new Jasmin implementation of the arithmetic gates
used by the passively secure variant of Maurer‚Äôs protocol [27].
Again, we consider the specific case of 5 computing parties, which
can be plugged into the abstract MitH construction we discussed
earlier as an alternative to the BGW instantiation.
Simultaneously, we specified the full MPC protocol in EasyCrypt
following the next-message syntax introduced in Section 3.4 and
a list-based representation of the arithmetic circuit. The proofs of
correctness and security of the protocol in EasyCrypt follow the
overall strategy described in the previous section (with induction
performed over the list structure of the circuit, which requires
slightly more involved invariants that make explicit the state kept
by parties). However, we introduced two simplifications in the
resulting ZK protocol to illustrate how optimizations at the crypto-
graphic design level can be carried out with reasonable effort. The
remaining differences in the proofs are due to syntactic definitional
choices made to allow for an easy and efficient integration of the
Jasmin gates. We first give a short overview of the improvements at
the cryptographic design level, and then we explain in more detail
how we connect the formally verified Jasmin results for the Jasmin
implementation with the EasyCrypt code extraction mechanism.
Simplification of the MitH transformation. We first modify the se-
cret sharing step performed by the prover to be the same used by
the MPC protocol. This removes the need to use input gates and
perform an oblivious unsharing of the additive splitting within
the MPC protocol; however, it requires a slight modification to the
proof of soundness of the MitH construction to obtain the same
result: one needs to take advantage of the fact that the verifier
checks for well-formedness of inputs to the MPC protocol to guar-
antee that one catches the prover when providing an invalid secret
sharing. The second simplification removes the final output reshar-
ing step and directly proves that this is not necessary in the MitH
setting. This is because the simulator has enough information in
the specific case of 2-out-of-5 corrupted parties to complete the
simulated views without the need to introduce extra randomness
(ZKBoo [20] performs a similar optimization). These simplifications
Session 10B: Crypto and Protocol Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2596rely on well-known properties of Maurer‚Äôs protocol and do not
have a huge impact in performance, but we believe that they fur-
ther support our claim that our approach extends to other protocols
of comparable design and proof complexity.
A stateful arithmetic gate API. Our EasyCrypt specification of Mau-
rer‚Äôs protocol relies on the following gate-level operators:
op mul_start(wi wj : wid, wst : wire_st, r : rand) : msgs =
let (w,wires) = wst in let swi = oget wires[wi] in let swj = oget wires[wj]
in share (cross swi swj) r.
op mul_end(ms : msgs, wst : wire_st) : wire_st =
let (w,wires) = wst in
let ss = add_shr ms[0] ms[1] in let ss = add_shr ss ms[2] in
let ss = add_shr ss ms[3] in let ss = add_shr ss ms[4] in
(w + 1, wires[w ‚Üê ss]).
op add(wi wj : wid, wst : wire_st) : wire_st =
let (w,wires) = wst in
let ash = add_shr (oget wires[wi]) (oget wires[wj]) in (w+1,wires[w ‚Üê ash]).
These operators permit an orchestrator, e.g., the prover in the
MitH construction, to execute the whole protocol in rounds. For
an addition gate, only a call per party is needed, since the add gate
does not involve communications (this is the same for the scalar
multiplication gate which we omit for brevity). Multiplication gates
execute in three steps: the mul_start operator must first be called for
all parties, at which point they all define the messages to be sent in
that round; this is then followed by a call to a dispatch routine that
rearranges the transmitted messages so that they are accessible to
the intended parties; finally, the mul_end operator must be called for
all parties to conclude the operation and consolidate the local states.
Indeed, these operators model stateful parties evaluating a circuit
gate-by-gate (i.e., wire-by-wire): on each step they take a current
state which includes secret shares for all previously computed wires
and possibly some randomness. When the round is completed they
add a new secret share for the wire that was just computed.
The sharing of inputs, which is carried out by the prover is
modelled using an input gate, whereas the reconstruction of the
output by all parties is modelled using an output gate.
op input_start(v : val, r : rand) : msgs = share v r.
op input_end(m : msg, wst : wire_st) : wire_st =
let (w,wires) = wst in (w + 1, wires[w ‚Üê m]).
op output_start(wo : wid, wst : wire_st) : msgs =
let (w,wires) = wst in Array5.create (oget wires[wo]).
op output_end(ms : msgs) : val = unshare ms.
Here, the share operator takes a finite field element (the secret)
and randomness corresponding to 9 more finite field elements. It
performs an additive secret sharing that splits the secret into 10
parts and then constructs secret shares for all parties by providing
them with a subset of 6 of those parts. This assignment guarantees
that any set of 3 or more parties can reconstruct the secret, but
2 shares reveal nothing about the secret. Moreover we carefully
tailored the way in which shares are stored by each party, so that
a single implementation of the code for gates could work for all
parties, independently of the party number. This greatly simplified
the implementation effort and the verification effort as we describe
next. In the output gate, parties simply send their shares to each
other and perform the unsharing by recovering the 10 parts of the
secret and summing them. The gate specification and proofs are
fully generic wrt to the prime that defines the finite field.
A verified Jasmin implementation. The Jasmin implementation
offers an interface which matches the gate operators shown above.
We give here the Jasmin entry points
fn add5(reg u64 status w1 w2 curwire) ‚Üí reg u64
fn mult_start5(reg u64 status w1 w2 outI randomnessI)
fn mult_end5(reg u64 all_messages status curwire) ‚Üí reg u64
and the corresponding C declarations
u i n t 6 4 _ t add5 ( u i n t 6 4 _ t ‚àó , u i n t 6 4 _ t , u i n t 6 4 _ t , u i n t 6 4 _ t ) ;
void m u l t _ s t a r t 5 ( u i n t 6 4 _ t ‚àó , u i n t 6 4 _ t , u i n t 6 4 _ t , u i n t 6 4 _ t ‚àó , u i n t 6 4 _ t ‚àó ) ;
u i n t 6 4 _ t mult_end5 ( u i n t 6 4 _ t ‚àó , u i n t 6 4 _ t ‚àó , u i n t 6 4 _ t ) ;
which allow high-level code to call the Jasmin-generated assembly.
The state is passed in as a pointer, whereas the input wire num-
bers are simply integers stored in registers. We have a proof of
functional correctness that gates implemented in Jasmin are correct
with respect to the EasyCrypt operator that is used in the high-
level formalization. These proofs are created in EasyCrypt over
a representation of the Jasmin program semantics. We give here
an example correctness lemma, where the hypotheses establish
well-formedness conditions on the calling arguments and the initial
state of the memory mem, as per the inlined comments.
lemma add5_correct_pr mem st (cwire wr1 wr2 : int) (wst : wire_st) :
wst.1 = cwire ‚áí (* cwire = correct number of wires *)
elems (fdom wst.2) = iota_ 0 cwire ‚áí (* the state is well formed *)
0 ‚â§ wr1 < cwire ‚áí 0 ‚â§ wr2 < cwire ‚áí (* valid input wires *)
good_wire st cwire ‚áí (* valid memory region to write to *)
good_wire_shares mem st cwire ‚áí (* valid memory region to read from *)
wst = lift_state_mem mem st cwire ‚áí (* region stores state *)
hoare [
M.add5 : Glob.mem = mem ‚àß to_uint status = st ‚àß to_uint curwire = cwire ‚àß
to_uint w1 = wr1 ‚àß to_uint w2 = wr2 ‚áõ
good_wire_shares Glob.mem st (cwire + 1) ‚àß
lift_state_mem Glob.mem st (cwire+1) = add wr1 wr2 wst ‚àß
touches mem Glob.mem (st+cwire*6*8*L) 6 ].
The hoare claim establishes a Hoare triple that relates the Jasmin
implementation M.add5 to the functional specification add. This
triple states that if the program starts from an initial memory that
encodes some initial party internal state wst and input wires wr1
and wr2, then the final memory will encode add wr1 wr2 wst, i.e.,