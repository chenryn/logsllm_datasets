### large bin
大于512（1024）字节的chunk称之为large chunk，large bin就是用于管理这些large chunk的
Large bins 中一共包括 63 个 bin，index为64~126，每个 bin 中的 chunk 的大小不一致，而是处于一定区间范围内
largebin 的结构和其他链表都不相同，更加复杂
largebin里除了有fd、bk指针，另外还有fd_nextsize 和 bk_nextsize 这两个指针
而且largebin的插入顺序不再是LIFO或FILO，而是一种全新的方式，我们来测试一下
我们先malloc六个堆块，实际大小为0x400，0x410，0x420，0x430，然后我们依次free可以得到下面这幅图
借用V师傅的总结（相同index下）
  * 按照大小从大到小排序
  * 若大小相同,按照free时间排序
  * 若干个大小相同的堆块,只有首堆块的`fd_nextsize`和`bk_nextsize`会指向其他堆块,后面的堆块的`fd_nextsize`和`bk_nextsize`均为0
  * size最大的chunk的`bk_nextsize`指向最小的chunk; size最小的chunk的`fd_nextsize`指向最大的chunk
下面我们看下与large bin有关的具体代码:
    while ((victim = unsorted_chunks (av)->bk) != unsorted_chunks (av))
    {
        bck = victim->bk;
        if (__builtin_expect (chunksize_nomask (victim)  av->system_mem, 0))
                malloc_printerr (check_action, "malloc(): memory corruption",
                                 chunk2mem (victim), av);
        size = chunksize (victim);
        /*
          If a small request, try to use last remainder if it is the
          only chunk in unsorted bin.  This helps promote locality for
          runs of consecutive small requests. This is the only
          exception to best-fit, and applies only when there is
          no exact fit for a small chunk.
        */
        if (in_smallbin_range (nb) &&
            bck == unsorted_chunks (av) &&
            victim == av->last_remainder &&
            (unsigned long) (size) > (unsigned long) (nb + MINSIZE))
        {
            /* split and reattach remainder */
            remainder_size = size - nb;
            remainder = chunk_at_offset (victim, nb);
            unsorted_chunks (av)->bk = unsorted_chunks (av)->fd = remainder;
            av->last_remainder = remainder;
            remainder->bk = remainder->fd = unsorted_chunks (av);
            if (!in_smallbin_range (remainder_size))
            {
                remainder->fd_nextsize = NULL;
                remainder->bk_nextsize = NULL;
            }
            set_head (victim, nb | PREV_INUSE |
                      (av != &main_arena ? NON_MAIN_ARENA : 0));
            set_head (remainder, remainder_size | PREV_INUSE);
            set_foot (remainder, remainder_size);
            check_malloced_chunk (av, victim, nb);
            void *p = chunk2mem (victim);
            alloc_perturb (p, bytes);
            return p;
        }
        /* remove from unsorted list */
        unsorted_chunks (av)->bk = bck;
        bck->fd = unsorted_chunks (av);
        /* Take now instead of binning if exact fit */
        if (size == nb)
        {
             set_inuse_bit_at_offset (victim, size);
             if (av != &main_arena)
                 set_non_main_arena (victim);
             check_malloced_chunk (av, victim, nb);
             void *p = chunk2mem (victim);
             alloc_perturb (p, bytes);
             return p;
        }
        /* place chunk in bin */
        if (in_smallbin_range (size))
        {
            victim_index = smallbin_index (size);
            bck = bin_at (av, victim_index);
            fwd = bck->fd;
        }
        else
        {
            victim_index = largebin_index (size);
            bck = bin_at (av, victim_index);
            fwd = bck->fd;
            /* maintain large bins in sorted order */
            if (fwd != bck)
            {
                 /* Or with inuse bit to speed comparisons */
                 size |= PREV_INUSE;
                 /* if smaller than smallest, bypass loop below */
                 assert (chunk_main_arena (bck->bk));
                 if ((unsigned long) (size) bk))
                 {
                     fwd = bck;
                     bck = bck->bk;
                     victim->fd_nextsize = fwd->fd;
                     victim->bk_nextsize = fwd->fd->bk_nextsize;
                     fwd->fd->bk_nextsize = victim->bk_nextsize->fd_nextsize = victim;
                  }
                  else
                  {
                      assert (chunk_main_arena (fwd));
                      while ((unsigned long) size fd_nextsize;
                          assert (chunk_main_arena (fwd));
                      }
                      if ((unsigned long) size == (unsigned long) chunksize_nomask (fwd))
                            /* Always insert in the second position.  */
                            fwd = fwd->fd;
                      else
                      {
                          victim->fd_nextsize = fwd;
                          victim->bk_nextsize = fwd->bk_nextsize;
                          fwd->bk_nextsize = victim;
                          victim->bk_nextsize->fd_nextsize = victim;
                      }
                      bck = fwd->bk;
                  }
              }
              else
                  victim->fd_nextsize = victim->bk_nextsize = victim;
        }
        mark_bin (av, victim_index);
        victim->bk = bck;
        victim->fd = fwd;
        fwd->bk = victim;
        bck->fd = victim;
在循环的每次迭代中，将检索当前unsorted bin的最后一个chunk。如果unsorted bin中没有更多可用的chunk，则循环将结束  
将按以下步骤处理检索到的chunk
    if (in_smallbin_range (nb) &&
            bck == unsorted_chunks (av) &&
            victim == av->last_remainder &&
            (unsigned long) (size) > (unsigned long) (nb + MINSIZE))
如果堆块是unsorted bin中的最后一个chunk，检索到的chunk的大小适合所请求的chunk，检索到的块是last
remainder并且请求的字节小于 _MIN_LARGE_SIZE_
，，检索到的chunk将被分割成所请求大小的chunk和剩余chunk。请求大小的chunk将返回给用户，剩余的chunk将再次插入unsorted
bin中
    if (size == nb)
如果被free的堆块的大小等于请求的大小，则直接返回块
    if (in_smallbin_range (size))
如果被free的堆块的大小在small bin的范围内，则获取相应的small bin的index，并将块插入small bin
如果以上条件都不满足，则认为其在large bin大小范围，进入chunk插入large bin的步骤
    if (fwd != bck)
    {
       ~~~~~~~~~~~~       
    }
    else
        victim->fd_nextsize = victim->bk_nextsize = victim;
首先判断large bin是否为空，为空的话，直接将 chunk 的 fd_nextsize bk_nextsize 设置为自身
不为空则进行下一步
    if ((unsigned long) (size) bk))
    {
        fwd = bck;
        bck = bck->bk;
        victim->fd_nextsize = fwd->fd;
        victim->bk_nextsize = fwd->fd->bk_nextsize;
        fwd->fd->bk_nextsize = victim->bk_nextsize->fd_nextsize = victim;
    }
如果被free的堆块的大小小于large bin中最后一个块的大小，我们将被free的堆块作为最后一个块插入large bin中
    else
    {
        assert (chunk_main_arena (fwd));
        while ((unsigned long) size fd_nextsize;