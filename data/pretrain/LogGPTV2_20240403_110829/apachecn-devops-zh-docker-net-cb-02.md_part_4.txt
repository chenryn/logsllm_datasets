user@docker1:~$
```
如您所见，我们不再从映射的容器中获得响应。映射容器模式适用于需要向现有容器提供服务，但不需要将任何映射容器的端口直接发布到 Docker 主机或外部网络的情况。尽管有一个限制，映射容器不能发布它们自己的任何端口，但这并不意味着我们不能提前发布它们。
例如，我们可以在运行主容器时公开端口`8080`:
```
user@docker1:~$ docker run --name web4 -d --expose 8080 \
-P jonlangemak/web_server_4_redirect
user@docker1:~$ docker run --name web3 -d --net=container:web4 \
jonlangemak/web_server_3_8080
```
因为我们在运行主容器(`web4`)时发布了映射容器的端口，所以在运行映射容器(`web3`)时不需要发布。我们现在应该能够通过每个服务的发布端口直接访问每个服务:
```
user@docker1:~$ docker port web4
80/tcp -> 0.0.0.0:32771
8080/tcp -> 0.0.0.0:32770
user@docker1:~$
user@docker1:~$ curl localhost:32771
    Web Server #4 - Running on port 80
user@docker1:~$ curl localhost:32770
    Web Server #3 - Running on port 8080
user@docker1:~$
```
在映射容器模式下，应注意不要试图在不同的容器上公开或发布相同的端口。由于映射的容器与主容器共享相同的网络结构，这将导致端口冲突。
# 以主机模式连接容器
在此点之前，我们所做的所有配置都依赖于使用`docker0`桥来促进容器之间的连接。我们必须考虑端口映射、接口和容器连接点。必须考虑这些因素，因为我们连接和处理容器的方式以及确保灵活部署模型的性质。主机模式采用不同的方法，将容器直接绑定到 Docker 主机的接口。这不仅消除了对入站和出站 NAT 的需求，还限制了我们如何部署容器。由于容器将与物理主机处于相同的网络结构中，因此我们不能重叠服务端口，因为这会导致冲突。在本食谱中，我们将介绍如何在主机模式下部署容器，并描述这种方法的优缺点。
## 做好准备
您需要访问 Docker 主机，并了解您的 Docker 主机是如何连接到网络的。在本食谱中，我们将使用之前食谱中使用的`docker1`和`docker2`主机。您需要确保有权查看`iptables`规则以验证网络过滤策略。如果您希望下载并运行示例容器，您的 Docker 主机也需要访问互联网。在某些情况下，我们所做的更改可能要求您具有对系统的根级访问权限。
## 怎么做…
从 Docker 的角度来看，以这种模式部署容器相当容易。很像映射容器模式，我们将一个容器放入另一个容器的网络结构中；主机模式将容器直接放入 Docker 主机的网络结构中。端口不再需要被发布和公开，因为您将容器直接映射到主机的网络接口上。这意味着容器进程可以执行某些权限操作，例如打开主机上的低级端口。因此，应谨慎使用此选项，因为在此配置中，容器将有更多的权限访问系统。
这也意味着 Docker 不知道您的容器正在使用什么端口，并且无法阻止您部署具有重叠端口的容器。让我们在主机模式下部署一个测试容器，这样您就可以明白我的意思了:
```
user@docker1:~$ docker run --name web1 -d --net=host \
jonlangemak/web_server_1
64dc47af71fade3cde02f7fed8edf7477e3cc4c8fc7f0f3df53afd129331e736
user@docker1:~$
user@docker1:~$ curl localhost
    Web Server #1 - Running on port 80
user@docker1:~$
```
为了实现主机模式，我们在容器运行时传递`--net=host`标志。在这种情况下，您可以看到，没有任何端口映射，我们仍然可以访问容器中的服务。Docker 只是将容器绑定到 Docker 主机，这意味着容器提供的任何服务都会自动映射到 Docker 主机的接口。
如果我们尝试在港口`80`运行另一个提供服务的容器，我们会发现 Docker 不会试图阻止我们:
```
user@docker1:~$ docker run --name web2 -d --net=host \
jonlangemak/web_server_2
c1c00aa387111e1bb09e3daacc2a2820c92f6a91ce73694c1e88691c3955d815
user@docker1:~$
```
虽然从 Docker 的角度来看看起来是一个成功的容器开始，但容器实际上在被繁殖后就死亡了。如果我们检查容器`web2`的日志，我们会看到它遇到了冲突，无法启动:
```
user@docker1:~$ docker logs web2
apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1 for ServerName
(98)Address already in use: make_sock: could not bind to address 0.0.0.0:80
no listening sockets available, shutting down
Unable to open logs
user@docker1:~$
```
在主机模式下部署容器会限制您可以运行的服务数量，除非您的容器被构建为在不同的端口上提供相同的服务。
因为服务的配置和它消耗的端口是容器的责任，所以有一种方法可以让我们部署多个容器，每个容器使用同一个服务端口。以我们前面的两个 Docker 主机为例，每个主机都有两个网络接口:
![How to do it…](img/B05453_02_11.jpg)
在 Docker 主机有多个网络接口的情况下，您可以让容器绑定到同一个端口，但在不同的接口上。同样，由于这是容器的责任，只要您不试图将同一个端口绑定到多个接口，Docker 就无法看到您是如何实现这一点的。
解决方案是改变服务绑定到接口的方式。大多数服务在服务启动时绑定到所有接口(`0.0.0.0`)。例如，我们可以看到我们的容器`web1`绑定到 Docker 主机上的`0.0.0.0:80`:
```
user@docker1:~$ sudo netstat -plnt
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      3724/apache2
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1056/sshd
tcp6       0      0 :::22                   :::*                    LISTEN      1056/sshd
user@docker1:~$ 
```
我们可以通过将服务绑定到特定的接口来限制服务的范围，而不是将服务绑定到所有的接口。如果我们可以将一个容器服务只绑定到一个接口，我们就可以将同一个端口绑定到不同的接口，而不会导致冲突。出于这个例子的目的，我创建了两个容器映像，允许您向它们传递一个环境变量(`$APACHE_IPADDRESS`)。该变量在 Apache 配置中被引用，并指定服务应该绑定到哪个接口。我们可以通过在主机模式下将两个容器部署到同一台主机来测试这一点:
```
user@docker1:~$ docker run --name web6 -d --net=host \
-e APACHE_IPADDRESS=10.10.10.101 jonlangemak/web_server_6_pickip
user@docker1:~$ docker run --name web7 -d --net=host \
-e APACHE_IPADDRESS=192.168.10.101 jonlangemak/web_server_7_pickip
```
注意在每种情况下，我都会给容器传递一个不同的 IP 地址，让它绑定。快速查看主机上的端口绑定应该会确认容器不再绑定到所有接口:
```
user@docker1:~$ sudo netstat -plnt
[sudo] password for user:
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 192.168.10.101:80       0.0.0.0:*               LISTEN      1518/apache2
tcp        0      0 10.10.10.101:80         0.0.0.0:*               LISTEN      1482/apache2
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1096/sshd
tcp6       0      0 :::22                   :::*                    LISTEN      1096/sshd
user@docker1:~$
```
请注意，Apache 不再绑定到所有接口，我们有两个 Apache 进程，一个绑定到 Docker 主机的每个接口。来自另一个 Docker 主机的测试将证明每个容器都在各自的接口上为 Apache 服务:
```
user@docker2:~$ curl http://10.10.10.101
    Web Server #6 - Running on port 80
user@docker2:~$
user@docker2:~$ curl http://192.168.10.101
    Web Server #7 - Running on port 80
user@docker2:~$
```
虽然对主机模式有一些限制，但它也不那么复杂，可能会提供更高的性能，因为缺少 NAT 和使用`docker0`桥。
### 注
请记住，由于 Docker 不参与主机模式，如果您有一个基于主机的防火墙正在强制实施策略，以便可以访问容器，那么您可能需要手动打开防火墙端口。
# 配置服务级别设置
虽然许多设置可以在容器运行时配置，但有些设置必须作为启动 Docker 服务的一部分进行配置。也就是说，它们需要在服务配置中被定义为 Docker 选项。在早期的菜谱中，我们接触到了其中一些服务级别选项，例如`--ip-forward`、`--userland-proxy`和`--ip`。在本食谱中，我们将介绍如何将服务级别参数传递给 Docker 服务，并讨论一些关键参数的功能。
## 做好准备
您需要访问 Docker 主机，并了解您的 Docker 主机是如何连接到网络的。在本食谱中，我们将使用之前食谱中使用的`docker1`和`docker2`主机。您需要确保您有权查看`iptables`规则以验证网络过滤策略。如果您希望下载并运行示例容器，您的 Docker 主机也需要访问互联网。
## 怎么做…
为了将运行时选项或参数传递给 Docker，我们需要修改服务配置。在我们的例子中，我们使用的是 Ubuntu 版本，它使用`systemd`来管理运行在 Linux 主机上的服务。向 Docker 传递参数的推荐方法是使用`systemd`文件拖放。要创建拖放文件，我们可以按照以下步骤创建服务目录和 Docker 配置文件:
```
sudo mkdir /etc/systemd/system/docker.service.d
sudo vi /etc/systemd/system/docker.service.d/docker.conf
```
在`docker.conf`配置文件中插入以下几行:
```
[Service] 
ExecStart= 
ExecStart=/usr/bin/dockerd
```
如果您希望将任何参数传递给 Docker 服务，您可以通过将它们附加到第三行来实现。例如，如果我想在服务启动时禁用 Docker 在主机上自动启用 IP 转发，我的文件将如下所示:
```
[Service] 
ExecStart= 
ExecStart=/usr/bin/dockerd --ip-forward=false
```
更改系统相关文件后，需要询问`systemd`重新加载配置。这是通过以下命令完成的:
```
sudo systemctl daemon-reload
```
最后，您可以重新启动服务以使设置生效:
```
systemctl restart docker
```
每次更改配置时，您都需要重新加载`systemd`配置并重新启动服务。
### 桥寻址
正如我们前面看到的，`docker0`桥的 IP 地址默认为`172.17.0.1/16`。但是，如果您愿意，您可以使用`--bip`配置标志更改该 IP 地址。例如，您可能希望将`docker0`网桥子网更改为`192.168.127.1/24`。这可以通过将以下选项传递给 Docker 服务来实现: