0x40013800
0x00000000
Size
4GB
32B
4KB
512B
256MB
Protects
Default
unsafestack Guard
SCB
Alias. Ctrl. Reg
Executable Code
Our basis template uses ﬁve regions as shown in Table I.
Region 0 encodes default permissions. Using region 0 ensures
all other regions override these permissions. We then use the
highest regions and work down to assign permissions to ensure
that the appropriate permissions are enforced. Region 7 is used
to enforce W ⊕ X on executable memory. This region covers
both the executable memory and its aliased addresses starting
at address 0. The three remaining regions (4-6) can be deﬁned
in any order and protect the SCB, alias control register, and
the unsafestack guard.
The template can be modiﬁed to accommodate system
speciﬁc requirements, e.g., changing the start address and size
of a particular region. For example, the two micro-controllers
used for evaluation place the alias control register at different
physical addresses. Thus, we modiﬁed the start address and
size for each micro-controller. Regions 1-3 are unused and
can be used to protect sensitive IO that is application speciﬁc.
To do this, the start address and size cover the peripheral and
permissions are set to (P-RW,U-RW,XN). The addresses for
all peripherals are given in micro-controller documentation
provided by the vendor. The use of the template enables system
speciﬁc access controls to be placed on the system. It also
decouples the development of access control mechanisms and
application logic.
We implemented a pass in LLVM that generates code to
conﬁgure the MPU based on the template. The code writes
the appropriate values to the MPU conﬁguration registers to
enforce the access controls given in the template, and then
reduces execution privileges. The code is called at the very
beginning of main. Thus all of main and the rest of the
program executes with reduced privileges.
B. Privilege Overlays
Privileged overlay mechanisms (i.e., privilege elevation and
restricted operation identiﬁcation) are implemented using an
LLVM pass. To elevate privileges two components are used.
They are a privilege requester and a request handler. Requests
are made to the handler by adding code which performs the
operations around restricted operations, as shown in Algorithm
1. This code saves the execution state and executes a SVC
(SVC FE) to elevate privileges. The selected instructions are
then executed in privileged mode, followed by a code sequence
that drops privileges by setting the zero bit in the control
register. Note that this sequence of instructions can safely be
executed as part of an interrupt handler routine as interrupts
execute with privileges and, in that mode, the CPU ignores
both the SVC instruction and the write to the control register.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:08 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 4. Diagrams showing how diversiﬁcation is applied. (a) Shows the RAM layout with SafeStack applied before diversiﬁcation techniques are applied. (b)
Shows RAM the layout after diversiﬁcation is applied. Note that unused memory (gray) is dispersed throughout RAM, the order of variables within the data
section (denoted 1-7) and bss section (greek letters) are randomized. Regions A, B, C, and D are random sizes, and G is the unsafestack guard region. (c)
Layout of functions before protection; (d) Layout of functions after trapping and randomizing function order.
Save Register and Flags State
if In Unprivileged Mode then
Algorithm 1 Procedure used to request elevated privileges
1: procedure REQUEST PRIVILEGED EXECUTION
2:
3:
4:
5:
6:
7:
8:
9: end procedure
end if
Restore Register and Flags
Execute Restricted Operation
Set Bit 0 of Control Reg (Reduces Privileges)
Execute SVC FE (Elevates Privileges)
Save Process State
if Interrupt Source == SVC FE then
Algorithm 2 Request handler for elevating privileges
1: procedure HANDLE PRIVILEGE REQUEST
2:
3:
4:
5:
6:
7:
8:
9:
10: end procedure
Clear bit 0 of Control Reg (Elevates Privileges)
Return
Restore State
Call Original Interrupt Handler
else
end if
The request handler intercepts three interrupt service rou-
tines and implements the logic shown in Algorithm 2. The
handler stores register state (R0-R3 and LR – the remaining
registers are not used) and checks that the caller is an SVC
FE instruction. Authenticating the call site ensures that only
requests from legitimate locations are allowed. Due to W ⊕X,
no illegal SVC FE instruction can be injected. If the interrupt
was caused by something other than the SVC FE instruction
the original interrupt handler is called.
The request handler is injected by the compiler by intercept-
ing three interrupt handlers. These are: the SVC handler, the
Hard Fault handler, and the Non Maskable Interrupt handler.
Note that executing an SVC instruction causes an interrupt.
When interrupts are disabled the SVC results in a Hard Fault.
Similarly, when the Fault Mask is set all interrupt handlers
except the Non-Maskable Interrupt handler are disabled. If
an SVC instruction is executed when the fault mask is set it
causes a Non-Maskable Interrupt. Enabling and disabling both
interrupts and faults are privileged operations, thus all three
interrupt sources need to be intercepted by the request handler.
Privileged requests are injected for every identiﬁed restricted
296
operation. The static analyses used to identify restricted op-
erations are implemented in the same LLVM pass. It adds
privilege elevation request to all CPS instructions, and all
MSR instructions that use a register besides the APSR regis-
ters. These instructions require execution in privileged mode.
To detect loads and stores from constant addresses we use
LLVM’s use-def chains to get the back slice for each load
and store. If the pointer operand can be resolved to a constant
address it is checked against the access controls applied in
the MPU. If the MPU’s conﬁguration restricts that access a
privilege elevation request is added around the operation. This
identiﬁes many of the restricted operations. Annotations can
be used to identify additional restricted operations.
C. SafeStack and Diversiﬁcation
The SafeStack in EPOXY extends and modiﬁes the SafeS-
tack implemented in LLVM 3.9. Our changes enable support
for the ARMv7-M architecture, change the stack to grow up,
and use a global variable to store the unsafestack pointer. Stack
offsets are applied with global data randomization. Global data
randomization is applied using a compiler pass. It takes the
amount of unused RAM as a parameter which is then randomly
split into ﬁve groups. These groups specify how much memory
can be used in each of the following regions: stack offset,
data region, bss region, unsafestack offset, and unused. The
number of bytes added to each section is a multiple of four
to preserve alignment of variables on word boundaries. The
data and bss region diversity is increased by adding dummy
variables to each region. Note that adding dummy variables
to the data regions increases the Flash used because the initial
values for the data section are stored as an array in the Flash
and copied to RAM at reset. However, Flash capacity on a
micro-controller is usually several times larger than the RAM
capacity and thus, this is less of a concern. Further an option
can be used to restrict the amount of memory for dummy
variables in the data section. Dummy variables in the bss do
not increase the amount of Flash used.
Another LLVM pass is used to randomize the function order.
This pass takes the amount of memory that can be dispersed
throughout the text section. It then disperses this memory
between the function by adding trap functions to the global
function list. The global function list is then randomized,
and the linker lays out the functions in the shufﬂed order in
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:08 UTC from IEEE Xplore.  Restrictions apply. 
THE RUNTIME AND ENERGY OVERHEADS FOR THE BENCHMARKS
EXECUTING OVER 2 MILLION CLOCK CYCLES. COLUMNS ARE SAFESTACK
ONLY (SS), PRIVILEGE OVERLAY ONLY (PO), AND ALL PROTECTIONS OF
TABLE II
EPOXY APPLIED, AVERAGED ACROSS 20 VARIANTS (ALL), AND THE
NUMBER OF CLOCK CYCLES EACH BENCHMARK EXECUTED, IN MILLIONS
OF CLOCK CYCLES. AVERAGE IS FOR ALL 75 BENCHMARKS
% Runtime
Benchmark
crc32
sg..insearch
ndes
levenshtein
sg..quicksort
slre
sgl..htable
sgl..dllist
edn
sg..insertsort
sg..heapsort
sg..queue
sg..listsort
fft
bubblesort
matmult int
adpcm
sglib rbtree
mat..ﬂoat
frac
st
huffbench
ﬁr
cubic
stb perlin
mergesort
qrduino
picojpeg
blowﬁsh
dijkstra
rijndael
sqrt
whetstone
nbody
fasta
wikisort
lms
sha
Average
%Energy
PO
-0.6
-0.9
1.2
0.8
-0.5
-0.3
-0.7
-0.1
1.5
-1.6
1.4
-0.9
-0.5
0.6
1.0
-0.4
2.3
-0.7
0.1
2.8
-0.3
1.2
1.5
-0.2
-3.0
-0.4
-0.7
0.0
-1.3
0.0
-0.4
1.8
0.3
0.9
0.4
0.1
0.3
-0.2
-0.2
Clk
2.2
2.2
2.4
2.6
2.7
2.9
2.9
3.7
3.8
3.9
4.0
4.6
4.9
5.1
6.8
6.8
7.3
7.4
8.6
9.9
19.0
20.9
21.0
30.1
31.6
44.0
46.0
54.3
56.9
70.5
94.9
116.2
135.5
139.0
157.1
179.6
225.2
392.9
26.3
All
2.5
0.5
3.4
3.8
-0.3
8.1
3.4
2.6
4.2
1.6
1.9
-3.4
2.4
-0.3
2.6
0.7
0.6
3.7
1.2
4.0
1.2
4.5
3.1
0.6
0.4
3.1
-0.6
0.2
0.5
-7.3
2.0
2.1
1.6
2.5
1.2
3.0
0.2
0.2
2.5
SS
-0.1
-0.2
2.4
1.7
-2.8
-2.0
-1.0
0.3
1.9
-0.1
-0.1
-4.2
-0.1
-0.1
-0.1
-0.1
0.1
0.1
0.0
2.4
-0.9
7.3
-2.0
0.0
0.0
-1.0
-0.1
0.0
1.4
-0.1
-0.6
0.0
0.8
0.9