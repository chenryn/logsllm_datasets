title:A Call to ARMs: Understanding the Costs and Benefits of JIT Spraying
Mitigations
author:Wilson Lian and
Hovav Shacham and
Stefan Savage
A Call to ARMs: Understanding the Costs and
Beneﬁts of JIT Spraying Mitigations
Wilson Lian
UC San Diego
PI:EMAIL
Hovav Shacham
UC San Diego
PI:EMAIL
Stefan Savage
UC San Diego
PI:EMAIL
Abstract—JIT spraying allows an attacker to subvert a Just-
In-Time compiler, introducing instruction sequences useful to the
attacker into executable regions of the victim program’s address
space as a side effect of compiling seemingly innocuous code in
a safe language like JavaScript.
We present new JIT spraying attacks against Google’s V8
and Mozilla’s SpiderMonkey JavaScript engines on ARM. The
V8 attack is the ﬁrst JIT spraying attack not
to rely on
instruction decoding ambiguity, and the SpiderMonkey attack
uses the ﬁrst ARM payload that executes unintended instructions
derived from intended instruction bytes without resynchronizing
to the intended instruction stream. We review the JIT spraying
defenses proposed in the literature and their currently-deployed
implementations and conclude that the current state of JIT
spraying mitigation, which prioritizes low performance overhead,
leaves many exploitable attacker options unchecked.
We perform an empirical evaluation of mitigations with low
but non-zero overhead in a uniﬁed framework and ﬁnd that full,
robust defense implementations of diversiﬁcation defenses can
effectively mitigate JIT spraying attacks in the literature as well
as our new attacks with a combined average overhead of 4.56%
on x86-64 and 4.88% on ARM32.
I.
INTRODUCTION
Web browsers are complex programs and continue to
exhibit soundness errors in their memory access patterns that
form the basis for a broad array of exploits. The combination
of the large legacy software footprint and performance over-
head concerns have limited the practical effect of proposals
to rewrite browsers in memory-safe languages or with tight
runtime control ﬂow integrity checks. Instead, most industrial
browser developers focus on the use of mitigations that prevent
control ﬂow violations from being reliably exploited (e.g.,
stack cookies, W ⊕ X, Address Space Layout Randomization
(ASLR), safe memory management functions, pointer encryp-
tion, Microsoft EMET, etc.) While none of these are fool proof,
taken together they have been highly effective at complicating
the exploitation of vulnerabilities.
However, one major loophole remains in the form of “Just-
In-Time” (JIT) compilation. All of today’s browsers make use
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes is granted provided that copies bear this notice and the full citation 
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23108
of JIT compilation to improve JavaScript performance and
thus require data pages be writable and executable (and for
reasons we will explain, typically allow pages to be in both
states simultaneously for extended periods of time). Thus,
by combining this implicit ability to create new executable
code (implicitly bypassing W ⊕ X) with the heap spraying
technique commonly used to bypass ASLR defenses, attackers
can still inject new code and blindly redirect to it. While a
range of defenses against such “JIT spraying” attacks have ben
proposed, modern browsers typically only implement versions
of those mitigations that have extremely low overhead (e.g.,
occasionally blinding large constants).
In this paper we explore the practical import of these
choices. Our ﬁrst contribution is to demonstrate the feasibility
of two new JIT spraying attacks affecting web browsers on
Android phones, the ﬁrst of which provides practical code
injection against the Chrome V8 JIT on ARM and the second
of which provides Turing-complete malicious computation
against Mozilla’s SpiderMonkey JIT on ARM. Thus, taken
together with recent work by Lian et al. [17] showing JIT
spraying vulnerabilities in Webkit (i.e., Apple phones), all
major smartphone browsers (almost 2 billion computers) are
vulnerable to this style of attack. Our second contribution is a
collection of open source implementations of existing proposed
JIT spraying mitigations for SpiderMonkey on both ARM32
and x86-64 and empirical evaluations of their performance
overhead on a consistent testing platform. We ﬁnd that en-
abling constant blinding—which incurs the highest overhead
of any single mitigation that we implemented—can reduce
the probability of landing a JIT spray exploit by a factor of
2.41 × 10462 with an overhead of just 1.39% and 3.99% on
x86-64 and ARM32, respectively. We argue that the value of
mitigation justiﬁes the small performance penalty and that JIT
developers should implement register randomization, constant
blinding, call frame randomization, random NOP insertion,
and base offset randomization (with combined average runtime
overheads of 4.56% and 4.88% on x86-64 and ARM32,
respectively) to close this remaining code reuse loophole.
II. BACKGROUND
When a JIT compiler compiles code in a high level
language into native instructions, the opcodes and operands it
emits are heavily inﬂuenced by the potentially-untrusted high
level code. Furthermore, the high level code can create new
native code at-will by dynamically creating and evaluating new
code. This grants the untrusted party who wrote the high level
code unprecedented inﬂuence over large swaths of executable
memory in the language runtime’s address space. Blazakis [7]
Fig. 1: Illustration of a NOP sled encoded in the bytes imple-
menting the statement x = 0x3c909090 ˆ0x3c909090
ˆ0x3c909090;
was the ﬁrst to publicize an attack which leveraged these
properties of a JIT compiler to perform code injection on x86.
In the attack, the adversary encodes a NOP sled and shellcode
in a seemingly-innocuous sequence of bitwise XOR operations
resembling the following:
x = 0x3c909090 ˆ 0x3c909090 ˆ 0x3c909090;
When compiling the above, the ActionScript JIT compiler
produces the bytes shown in dashed boxes in Figure 1, which
encode the x86 instructions shown in the solid-bordered boxes
below them. However, since x86 instructions have variable
lengths and can be decoded at any byte alignment, an alternate
decoding of the bytes can be observed by disassembling from
any unintended instruction boundary, as shown in the bottom
row of Figure 1 in double-lined boxes. This alternate decoding
functions as a NOP sled which lands at 4 out of 5 byte offsets
and can be extended without resynchronizing to the intended
instruction stream as long as the opcode bytes for XOR (the
0x35 bytes) continue to be consumed as instruction operands.
In an actual attack, the NOP sled would be lengthened
by extending the chain of XORed 0x3c909090 constants,
and eventually the 0x90 bytes would be replaced with the
encodings for shellcode instructions, with the limitation that
each shellcode instruction ﬁt into three consecutive 0x90 byte
slots. The attacker would place the XOR chain statement in a
function then repeatedly declare and invoke it in order to cause
the JIT compiler to ﬁll as many pages as possible of executable
memory with the hidden NOP sled and shellcode. By spraying
NOP sleds that are much larger than the shellcode, execution
beginning at a random address in sprayed code has nearly an
80% chance of successfully executing the shellcode.
More generally, the opportunities for exploitation intro-
duced by JIT compilers are code reuse (e.g.,
the attack
described above) and code corruption, wherein the attacker
abuses the fact that JIT code memory must, at some point in
time (or for many JITs, at all times), be writable. Writable
code memory—once thought
to be a relic of the bygone
pre-W ⊕ X era—is necessary not only for the JIT to create
and delete code, but also for the frequent patching many
JIT implementations undertake to support inline caching, a
performance optimization employed by nearly all JavaScript
JIT compilers to ease the burden of the dynamic type system.
Since Blazakis ﬁrst brought JIT spraying into the public
eye, it has been extended to JavaScriptCore’s non-optimizing
JIT for x86 [26], Mozilla’s JaegerMonkey and TraceMonkey
JITs [25] for x86, the Tamarin ActionScript JIT for ARM [6],
and JavaScriptCore’s optimizing JIT for ARM’s Thumb-2
instruction set [17]. JIT compilers have also been abused to
construct ROP gadgets that are exploited with the aid of a
memory disclosure vulnerability [4], [18]. With the exception
of [18], all past incarnations of JIT spraying have relied on
constant values supplied by the attacker in high level code; and
without exception, all past JIT spraying attacks have made use
of malicious instructions encoded at instruction boundaries not
intended by the JIT compiler. These attacks would be thwarted
by a robust implementation of constant blinding (cf. §IV). In
§III-B, we will introduce a new JIT spraying attack against V8
on ARM which is the ﬁrst JIT spraying attack that does not
rely on the execution of JIT code at unintended instruction
boundaries and, like [18], does not abuse the translation of
untrusted constants into instruction operands in JIT code.
III. NOVEL JIT SPRAYING THREATS AGAINST ARM
In this section, we present two novel JIT spraying threats
against ARM. The ﬁrst (§III-B) is a proof of concept end-to-
end attack against Chrome’s V8 JavaScript engine that applies
Lian et al.’s gadget chaining technique [17]. Its novelty rests
in the distinction that, unlike all prior JIT spraying attacks,
this one does not rely on the improper disassembly of JIT
code. Afterwards, we describe a method for encoding a “self-
sustaining” JIT spraying payload which, in contrast to prior
JIT spraying payloads for ARM, can execute an arbitrary
number of malicious instructions without resynchronizing to
the intended instruction stream (§III-C). We used this method
to implement a proof of concept payload against Mozilla’s
SpiderMonkey JavaScript engine which interprets instructions
for a One Instruction Set Computer.
A. Instruction sets on ARM
The discussion of our new threats hinge on an under-
standing of certain low-level details of the ARM architecture.
Therefore, we brieﬂy introduce relevant aspects of the instruc-
tion sets supported by 32-bit ARM chips1. Recent ARM chip
designs (ARMv6T2 and later) have mandatory support for
at least two instruction sets. These are the original “ARM”
instruction set, and the newer “Thumb-2” instruction set. The
ARM instruction set is composed of ﬁxed-width 32-bit instruc-
tions stored in memory as 32-bit-aligned words. The Thumb-2
instruction set, on the other hand, is designed for improved
code density and contains both 16-bit and 32-bit wide instruc-
tions stored in memory as a single 16-bit aligned halfword and
two consecutive 16-bit aligned halfwords, respectively.
At any given time, a 32-bit ARM core is said to be exe-
cuting in either “ARM mode” or “Thumb mode.” Interworking
between ARM code and Thumb-2 code is possible through the
use of unprivileged interworking branch instructions, which
either unconditionally toggle the processor between modes
or derive the desired execution mode of the branch target
from the least signiﬁcant bit of the branch target address.
Since both ARM and Thumb-2 instructions are aligned to at
least 16-bit boundaries, the least signiﬁcant bit of any valid
instruction address is unused. Interworking branch instructions
take advantage of this by repurposing the bit. If the bit is set,
the target is executed in Thumb mode; otherwise it is executed
in ARM mode.
1Support for a 64-bit instruction set called A64 was introduced in ARMv8-
A. However, since support for A64 is not mandatory in ARMv8-A, and many
32-bit ARM chips remain on the market, we do not consider omission of A64
a signiﬁcant limitation.
2
9090B89090903C359090903C35903Cmov eax, 3c909090hxor eax, 3c909090hxor eax, 3c909090hNOPcmp al, 35hNOPNOPcmp al, 35hNOPNOPNOPNOPNOPNOPB. JIT spraying on ARM without improper disassembly
In this subsection, we describe a new proof of concept
attack against Chrome’s V8 JavaScript engine on ARM which
demonstrates—for the ﬁrst time against any architecture—the
feasibility of carrying out a JIT spraying attack that uses JIT-
emitted instruction bytes without exploiting ambiguity in the
decoding of those instructions. In fact, this attack relies on
neither untrusted constants appearing in JIT code as immediate
operands nor execution of JIT code at unintended instruction
boundaries. Since V8’s JIT compiler emits ﬁxed-width 32-bit
ARM instructions, the latter non-dependency is trivial, pro-
vided that the JIT spraying payload is executed in ARM mode.
The V8 attack uses the gadget chaining technique intro-
duced by Lian et al.[17]; gadget chaining is a technique in
which an attacker’s high level language (HLL) code (e.g.,
JavaScript) is able to treat unsafe computation performed by
reused code as though it were a subroutine. The attacker’s HLL
code invokes a control ﬂow vulnerability to branch to a reused
code snippet, which performs unsafe computation then returns
control ﬂow back to the HLL code. Each reused snippet is
referred to as a “gadget,” and each gadget may or many not
take arguments or return values to the HLL code. The use of
gadget chaining gadgets differs from ROP gadgets, however,
in that control ﬂow after a gadget chaining gadget returns does
not continue directly to another gadget, but rather back to the
language runtime where the HLL code resumes execution.
The high level structure of the proof of concept attack is as
follows. After JIT spraying a particular store instruction (the
store gadget) into memory, the attacker clears the victim’s i-
cache of the sprayed store gadgets by calling numerous DOM
functions. She then guesses the address of a store gadget and
uses a hijacked virtual host function call2 to simultaneously
branch to that address and control the contents of the input
registers used by the store gadget. The ﬁrst invocation of
the store gadget writes a return instruction (bx lr) into JIT
code a short distance after the store instruction. Subsequent
invocations are made in order to write 4 bytes at a time
of shellcode into the memory following the injected return
instruction. The victim’s i-cache is cleared once more, and
a ﬁnal invocation of the store gadget overwrites the injected
return instruction with a NOP instruction and the execution of
the shellcode. The details of gadget layout and creation, the
artiﬁcial control ﬂow vulnerability, and failure-tolerant gadget
invocation are described below.
1) Gadget layout and creation: The sprayed store gadget
consists of an intended store instruction used to spill a live
value onto the stack followed by at least one i-cache line (128
bytes on our test machine) of padding instructions that perform
bitwise operations over caller-saved registers. The injected
return instruction will be written after the one i-cache line
padding so that it will be executed during the same gadget
invocation that it is injected. The padding instructions must not
access memory because they are likely to cause a segmentation
fault or clobber critical machine state. They must also operate
only on caller-saved registers because they will execute as
intended and must preserve the values of callee-saved registers
for when the gadget returns.
2This was a vulnerability which we artiﬁcially injected into V8.
It is necessary to inject a return instruction rather than
allowing control ﬂow fall through into the enclosing function’s
epilogue and return instruction because the epilogue performs
stack cleanup and loads the return address from the stack,
both of which would prevent a proper return to high level
language (HLL) code given our decision to use an injected
control ﬂow vulnerability in the form of a hijacked virtual host
function call. When control ﬂow arrives at the gadget under
those circumstances, the stack is not setup properly for a JIT
function epilogue to clean it up, and the return address resides
in the link register (LR) rather than on the stack. However, once
the store instruction has written its return instruction during its
ﬁrst invocation, the gadget is a reusable primitive that can be
called repeatedly to overwrite arbitrary words in memory.
The
sprayed store
instruction is str r2, [r11,
#-20], where r11 is used as a frame pointer register in
V8’s JIT code. The JavaScript function whose JIT compilation
results in the emission of a spray gadget deﬁnes numerous
variables which are used in the computation of the return value.
By deﬁning more such variables than there are allocatable
registers, V8’s optimizing JIT will begin spilling values onto
the stack. The sprayed store instruction is one such spilling
instruction. We eval() the deﬁnition and repeated invocation
of the sprayed function to trigger optimized compilation and
the spraying of a store gadget. Optimized compilation is neces-
sary because only the optimized compiler allocates and spills
registers, which are necessary to create the store instruction
and the subsequent memory-access-free padding instructions.
2) Artiﬁcial control ﬂow vulnerability: For our proof of