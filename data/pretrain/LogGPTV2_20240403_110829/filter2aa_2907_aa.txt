# Triton and Symbolic Execution on GDB

**Presenter: Wei-Bo Chen (@bananaappletw)**  
**Affiliation: Software Quality Laboratory, NCTUCSC Co-founder, Bamboofox Member**  
**Specialization: Symbolic Execution, Binary Exploitation**  
**Talks: HITCON CMT 2015, HITCON CMT 2017**  
**Date: May 11, 2018**

## Outline
1. Why Symbolic Execution?
2. What is Symbolic Execution?
3. Triton
4. SymGDB
5. Conclusion
6. Drawbacks of Triton
7. Comparison with Other Symbolic Execution Frameworks

### Why Symbolic Execution?

In the past, program analysis was primarily conducted through:
- **Static Analysis:** Tools like `objdump` and `IDA Pro`
- **Dynamic Analysis:** Tools like `GDB`, `ltrace`, and `strace`

However, these methods have limitations, and symbolic execution offers a more powerful approach.

### What is Symbolic Execution?

Symbolic execution is a method for analyzing a program to determine what inputs cause each part of the program to execute. It can be categorized into:
- **System-Level:** S2E (https://github.com/dslab-epfl/s2e)
- **User-Level:** Angr (http://angr.io/), Triton (https://triton.quarkslab.com/)
- **Code-Based:** KLEE (http://klee.github.io/)

### Triton

**Website:** https://triton.quarkslab.com/  
**Overview:**
- A dynamic binary analysis framework written in C++.
- Developed by Jonathan Salwan.
- Includes Python bindings.

**Components:**
- Symbolic Execution Engine
- Tracer
- Abstract Syntax Tree (AST) Representations
- Satisfiability Modulo Theories (SMT) Solver Interface

**Structure:**
- **Symbolic Execution Engine:**
  - Maintains a table of symbolic register states.
  - Maps symbolic memory states.
  - Tracks all symbolic references.
- **Triton Tracer:**
  - Provides current opcode executed.
  - Captures state context (registers and memory).
  - Translates control flow into AST representations.
  - Supports Pin tracer.
- **AST Representations:**
  - Converts x86 and x86-64 instruction set semantics into AST.
  - Expressions are in Static Single Assignment (SSA) form.
  - Example: `add rax, rdx` translates to `ref!41 = (bvadd (_ extract 63 0 ref!40) (_ extract 63 0 ref!39))`.

**Static Single Assignment Form (SSA):**
- Each variable is assigned exactly once.
- Example: `y := 1; y := 2; x := y` turns into `y1 := 1; y2 := 2; x1 := y2`.

**Symbolic Variables:**
- If one operand of an instruction is symbolic, the resulting register or memory will also be symbolic.
- Methods:
  - `convertRegisterToSymbolicVariable(const triton::arch::Register &reg)`
  - `isRegisterSymbolized(const triton::arch::Register &reg)`

**Example:**
1. Make `ecx` a symbolic variable.
   - `convertRegisterToSymbolicVariable(Triton.registers.rcx)`
   - `isRegisterSymbolized(Triton.registers.rcx) == True`
2. `test ecx, ecx`
   - ZF = AND(ecx, ecx) == 0
   - If `ecx == 0`: Set ZF to 1
   - Else: Set ZF to 0
3. `je +7 (eip)`
   - If ZF == 1: Jump to `nop`
   - Else: Execute next instruction
   - `isRegisterSymbolized(Triton.registers.eip) == True`

**SMT Solver Interface:**
- Example: Defcamp 2015 r100
  - Program requires a password input.
  - Password length up to 255 characters.
  - Performs serial operations to check the password.

**Steps:**
1. Import Triton and initialize context.
2. Set architecture.
3. Load segments into Triton.
4. Define fake stack (RBP and RSP).
5. Symbolize user input.
6. Start processing opcodes.
7. Set constraints at specific points.
8. Get symbolic expression and solve it.

### Some Problems with Triton

- The procedure is complex.
- High learning cost.
- With debugger support, many steps could be simplified.

### SymGDB

**Repository:** https://github.com/SQLab/symgdb  
**Overview:**
- Symbolic execution support for GDB.
- Combines GDB Python API, Triton, and symbolic environment.
- Features:
  - Symbolize `argv`
  - Debug tips
  - Demo

**Design and Implementation:**

- **GDB Python API:**
  - Register GDB command.
  - Register event handler (e.g., breakpoint).
  - Execute GDB command and get output.
  - Read, write, search memory.

- **Failed Method:**
  - Tried using Triton callbacks to get memory and register values.
  - Callbacks: `needConcreteMemoryValue`, `needConcreteRegisterValue`.
  - Problem: Values from GDB were out of date.

- **Tried Solutions:**
  - Check if needed value is not in Triton's context yet.
  - Not working: Triton falls into an infinite loop.

- **Successful Method:**
  - Copy GDB context into Triton.
  - Load all segments into Triton context.
  - Symbolic execution does not affect the original GDB state.

### Conclusion

Symbolic execution is a powerful technique for program analysis, and tools like Triton and SymGDB provide robust frameworks for implementing it. However, there are challenges such as complexity and high learning costs that need to be addressed.

### Drawbacks of Triton

- Complex setup and usage.
- High learning curve.
- Requires significant manual intervention.

### Comparison with Other Symbolic Execution Frameworks

- **S2E:** System-level symbolic execution.
- **Angr:** User-level symbolic execution with a rich feature set.
- **KLEE:** Code-based symbolic execution, suitable for smaller programs.

Each tool has its strengths and weaknesses, and the choice depends on the specific use case and requirements.