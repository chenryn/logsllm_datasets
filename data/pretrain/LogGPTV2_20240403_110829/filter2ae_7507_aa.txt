**作者：六炅  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
## Preface
`CodeQL`是一款不错的代码分析扫描工具，于我而言对漏洞挖掘有很大的帮助。使用它也有一定时间了，之前一直接触的是开源项目，所以借助`CodeQL`进行数据库创建和分析还是相对简单的，不会有过多的限制。最近在进行`Java`反序列化利用链挖掘时，接触了[gadgetinspector](https://github.com/JackOfMostTrades/gadgetinspector.git)，它通过分析字节码来获取`AST`语法树并根据预定条件生成可能的调用链。于是我想如果借助`CodeQL`这类来分析应该会更方便些，可是在没有源码的情况对于编译型语言，无法从正常途径创建数据库。虽然网上已有部分此类的小工具，但还是希望通过了解`CodeQL`的部分原理来找寻无源码创建数据库的方式并加深对静态代码分析的理解。
以下内容以`Java`语言作为分析对象，分析的结论并不保证与实际完全相符。文章所用的测试项目可在[github](https://github.com/trganda/app)获取，包含`.idea/`你可以用`IDEA`打开，只需修改文件路径即可自己调试分析。
## Pre Request
  * CodeQL CLI 2.9.1
  * Jdk 16
  * Windows OS
## Building Database
在`CodeQL`的历史文档中（加入`Github`之前），有大致描述其创建数据库的过程，如下图，见[1]
它的工作流程大致是，在`javac`编译目标代码时，通过`Extractor`与其进行交互。`Extractor`会根据每一个`java`文件的内容生成一个`trap`文件，后续再根据`trap`文件生成实际的数据库。同时它会将处理的每一个`java`文件拷贝一份保存在数据中，便于后续展示查询结果时能看到代码的上下文。
而针对不同的语言都有各自独立的`Extractor`，文档中解释这样做的好处，毕竟不同语言特性不同。
`CodeQL`可以通过以下命令创建一个数据库，这里以一个最简单的`maven`项目为例，该项目仅包含一个输出`Hello World`的`java`文件
    codeql database create -l java -c "mvn clean compile" C:\Users\trganda\Documents\databases\app
创建好的数据库的目录结构如下
    |-- codeql-database.yml
    |-- db-java # 数据库关系文件
    |-- log # 各类日志
    |   |-- agent.9008554372696040130.log
    |   |-- agent.11337701303103251140.log
    |   |-- build-tracer.log
    |   |-- database-create-20220509.114127.634.log
    |   |-- database-index-files-20220509.114151.283.log
    |   |-- ext 用于javac的配置文件
    |   |   |-- javac.args
    |   |   |-- javac.env
    |   |   |-- javac.orig
    |   |   `-- javac.properties
    |   |-- javac-errors.log
    |   |-- javac-extractor-1683275.log
    |   `-- javac-output-11812.log
    `-- src.zip # 源码文件
### Analyze Build Process
由官方文档[using-indirect-build-tracing](https://codeql.github.com/docs/codeql-cli/creating-codeql-databases/#using-indirect-build-tracing)和`database-create-20220509.114127.634.log`可以看到数据库的创建过程其实是被分为了多个子步骤的。各步骤执行的命令如下
    codeql database init --language=java --source-root=C:\Users\trganda\Documents\app --allow-missing-source-root=false --allow-already-existing -- C:\Users\trganda\Documents\databases\app
    codeql database trace-command --working-dir=C:\Users\trganda\Documents\app --index-traceless-dbs --no-db-cluster -- C:\Users\trganda\Documents\databases\app mvn clean compile
    codeql database finalize --mode=normal --no-db-cluster -- C:\Users\trganda\Documents\databases\app
        |-- codeql database trace-command --working-dir=C:\Users\trganda\Documents\app --no-tracing -- C:\Users\trganda\Documents\databases\app C:\Program Files\codeql\java\tools\pre-finalize.cmd
        |-- codeql dataset import --dbscheme=C:\Program Files\codeql\java\semmlecode.dbscheme -- C:\Users\trganda\Documents\databases\app\db-java C:\Users\trganda\Documents\databases\app\trap\java
        |-- codeql database cleanup --mode=normal -- C:\Users\trganda\Documents\databases\app
        `-- codeql dataset cleanup --mode=normal -- C:\Users\trganda\Documents\databases\app\db-java
与`Extractor`有关的为第二条命令，下面来看看它具体做了什么。
`codeql`命令对应的执行文件位于其安装目录下`codeql.cmd`，内容如下
    @echo off
    rem Wrapper provided for users who explicitly configured VS Code to point to codeql.cmd
    "%~dp0\codeql.exe" %*
    exit /b %errorlevel%
在`win`平台，它借助`exe`文件来处理要执行的命令，这不是我们想看到的。好在还有另一个`shell`脚本文件`codeql`，为`linux`平台提供服务。可以通过它来了解`codeql.exe`的内部逻辑
它的大概意思是，设置环境变量`CODEQL_PLATFORM`，`CODEQL_JAVA_HOME`和`CODEQL_DIST`后，执行`codeql.jar`。再回过头细看`database-create-20220509.114127.634.log`里面会记录使用成功加载`java`的`extracotr`（ **Successfully
loaded extractor Java** ），位于`java\tools`目录下
    |-- COPYRIGHT
    |-- LICENSE
    |-- codeql-extractor.yml
    |-- semmlecode.dbscheme
    |-- semmlecode.dbscheme.stats
    `-- tools
        |-- autobuild-fat.jar
        |-- autobuild.cmd
        |-- autobuild.sh
        |-- codeql-java-agent.jar
        |-- compiler-tracing.spec
        |-- linux
        |   `-- ...
        |-- pre-finalize.cmd
        |-- pre-finalize.sh
        |-- semmle-extractor-java.jar
        `-- tracing-config.lua
这里可以看到一些`jar`包和脚本，以及配置文件`codeql-extractor.yml`。`codeql-java-agent.jar`为`agent`，在整个编译期开始前注入`jvm`中并用于执行`extractor`操作。而其它的部分内容，通过日志的信息，可以猜测其含义，这里暂不细纠。
既然是`jar`包，那么就能比较容易的去分析它。这里将`codeql.jar`和`java\tools`目录下的`autobuild-fat.jar`，`codeql-java-agent.jar`和`semmle-extractor-java.jar`拖入`IDEA`和`jd-gui`。
在`IDEA`的`Run/Debug Configurations`中新增`2`个`Jar Application`，配置分别如下
`codeql database init`
    Path to JAR: C:\Program Files\codeql\tools\codeql.jar
    VM options: --add-modules jdk.unsupported
    Program arguments: database init --language=java --source-root= --allow-missing-source-root=false --allow-already-existing -- 
    Working directory: 
    Enviroment variables: CODEQL_DIST=C:\Program Files\codeql;CODEQL_JAVA_HOME=C:\Program Files\codeql\tools\win64\java;CODEQL_PLATFORM=win64
`codeql database trace-command`
    Path to JAR: C:\Program Files\codeql\tools\codeql.jar
    VM options: --add-modules jdk.unsupported
    Program arguments: database trace-command --working-dir= --index-traceless-dbs --no-db-cluster --  mvn clean compile
    Working directory: 
    Enviroment variables: CODEQL_DIST=C:\Program Files\codeql;CODEQL_JAVA_HOME=C:\Program Files\codeql\tools\win64\java;CODEQL_PLATFORM=win64
这里调试的目标是`codeql database trace-command`，在调试前先执行一次`codeql database
init`完成数据库初始化。并在`com.semmle.cli2.CodeQL#main`打下断点再调试`codeql database trace-command`，与`database`相关的命令处理逻辑位于`com.semmle.cli2.database`，从类的名字可以很好找到与`trace-command`相关的类为`com.semmle.cli2.database.TraceCommandCommand`。大致查看这个类的代码，执行逻辑在`com.semmle.cli2.database.TraceCommandCommand#executeSubcommand`
    protected void executeSubcommand() {
        this.actionVersion = new CodeQLActionVersion() {
            protected boolean isVeryOldAction() {
                return TraceCommandCommand.this.command.size() == 3 && ((String)TraceCommandCommand.this.command.get(1)).endsWith(File.separator + "working" + File.separator + "tracer-env.js") && ((String)TraceCommandCommand.this.command.get(2)).endsWith(File.separator + "working" + File.separator + "env.tmp");
            }
        };
        super.executeSubcommand();
    }
在此处也打下一个断点，然后开启调试，顺利的话会执行到`super.executeSubcommand();`也就是`DatabaseProcessCommandCommon#executeSubcommand`这个方法，它的内容比较长，直接看尾部的一部分代码，
    protected void executeSubcommand() {
        ...
        Iterator var32 = commandlines.iterator();
        while(var32.hasNext()) {
            List cmdArgs = (List)var32.next();
            this.printProgress("Running command in {}: {}", new Object[]{workingDir, cmdArgs});
            Builder8 p = new Builder8(cmdArgs, LogbackUtils.streamFor(this.logger(), "build-stdout", true), LogbackUtils.streamFor(this.logger(), "build-stderr", true), Env.systemEnv().getenv(), workingDir.toFile());
            this.env.addToProcess(p);
            List cmdProcessor = new ArrayList();
            CommandLine.addCommandProcessor(cmdProcessor, this.env.expander);
            p.prependArgs(cmdProcessor);
            tracerSetup.enableTracing(p);
            StreamAppender streamOutAppender = new StreamAppender(Streams.out());
            int result;
            try {
                LogbackUtils.addAppender(streamOutAppender);
                result = p.execute();
            } finally {
                LogbackUtils.removeAppender(streamOutAppender);
            }
            if (result != 0) {
                cmdProcessor.addAll(cmdArgs);
                throw new UserError("Exit status " + result + " from command: " + cmdProcessor);
            }
        }
        ...
    }
它根据传入的命令`mvn clean
compile`构造了一个`Buildr8`，它封装了`ProcessBuilder`，在构造完成后会调用`p.execute()`执行命令，完整执行的命令为
    "C:\Program Files\codeql\tools\win64\tracer.exe" "C:\Program Files\codeql\tools\win64\runner.exe" cmd.exe /C type NUL && mvn clean compile
相关的环境变量（由`codeql`增加的）如下
    CODEQL_PLATFORM=win64;
    CODEQL_PLATFORM_DLL_EXTENSION=.dll;
    CODEQL_EXTRACTOR_JAVA_LOG_DIR=C:\Users\trganda\Documents\databases\app2\log;
    CODEQL_JAVA_HOME=C:\Program Files\codeql\tools\win64\java;
    CODEQL_EXTRACTOR_JAVA_SCRATCH_DIR=C:\Users\trganda\Documents\databases\app2\working;
    ODASA_TRACER_CONFIGURATION=C:\Users\trganda\Documents\databases\app2\working\tracing\compiler-tracing1707598060791117786.spec;
    SEMMLE_JAVA_TOOL_OPTIONS='-javaagent:C:\Program Files\codeql\java\tools/codeql-java-agent.jar=ignore-project,java' '-Xbootclasspath/a:C:\Program Files\codeql\java\tools/codeql-java-agent.jar';
    CODEQL_EXTRACTOR_JAVA_WIP_DATABASE=C:\Users\trganda\Documents\databases\app2;
    CODEQL_EXTRACTOR_JAVA_ROOT=C:\Program Files\codeql\java;
    CODEQL_EXTRACTOR_JAVA_TRAP_DIR=C:\Users\trganda\Documents\databases\app2\trap\java;
    CODEQL_TRACER_LOG=C:\Users\trganda\Documents\databases\app2\log\build-tracer.log;
    CODEQL_EXTRACTOR_JAVA_SOURCE_ARCHIVE_DIR=C:\Users\trganda\Documents\databases\app2\src;
    CODEQL_DIST=C:\Program Files\codeql;
环境变量中出现了很多熟悉的面孔，在`java`的`extractor`中见过它们。由于前面执行的命令涉及到`tracer.exe`和`runner.exe`，如果直接以它们为目标进行分析需要借助其它逆向工具，导致问题过于复杂，先不走这条路。这里先通过`process
hacker`查看这条命令执行过程中的变化
从进程创建的结构看，后`3`个`java.exe`依次执行的命令如下
    "C:\Program Files\Common Files\Oracle\Java\javapath\java.exe" -classpath "C:\Program Files\JetBrains\IntelliJ IDEA 2021.3\plugins\maven\lib\maven3\bin\..\boot\plexus-classworlds-2.6.0.jar"   "-Dclassworlds.conf=C:\Program Files\JetBrains\IntelliJ IDEA 2021.3\plugins\maven\lib\maven3\bin\..\bin\m2.conf"   "-Dmaven.home=C:\Program Files\JetBrains\IntelliJ IDEA 2021.3\plugins\maven\lib\maven3\bin\.."   "-Dlibrary.jansi.path=C:\Program Files\JetBrains\IntelliJ IDEA 2021.3\plugins\maven\lib\maven3\bin\..\lib\jansi-native"   "-Dmaven.multiModuleProjectDirectory=C:\Users\trganda\Documents\app"   org.codehaus.plexus.classworlds.launcher.Launcher clean compile
    "C:\Program Files\Java\jdk-16.0.1\bin\java.exe" -classpath "C:\Program Files\JetBrains\IntelliJ IDEA 2021.3\plugins\maven\lib\maven3\bin\..\boot\plexus-classworlds-2.6.0.jar" "-Dclassworlds.conf=C:\Program Files\JetBrains\IntelliJ IDEA 2021.3\plugins\maven\lib\maven3\bin\..\bin\m2.conf" "-Dmaven.home=C:\Program Files\JetBrains\IntelliJ IDEA 2021.3\plugins\maven\lib\maven3\bin\.." "-Dlibrary.jansi.path=C:\Program Files\JetBrains\IntelliJ IDEA 2021.3\plugins\maven\lib\maven3\bin\..\lib\jansi-native" -Dmaven.multiModuleProjectDirectory=C:\Users\trganda\Documents\app org.codehaus.plexus.classworlds.launcher.Launcher clean compile
    "C:\Program Files\Java\jdk-16.0.1\bin\java.exe" -Dfile.encoding=windows-1252 -Xmx1024M -Xms256M --add-opens java.base/sun.reflect.annotation=ALL-UNNAMED -classpath "C:\Program Files\codeql\java\tools\semmle-extractor-java.jar" com.semmle.extractor.java.JavaExtractor --jdk-version 16 --javac-args @@@C:\Users\trganda\Documents\databases\app\log\ext\javac.args
前两个是调用了`maven`工具链，而这里最引人注目的是最后一条命令的内容，它执行`semmle-extractor-java.jar`，并传入`javac.args`文件，这个文件的内容长这样
    -Xprefer:source
    -d
    C:\Users\trganda\Documents\app\target\classes
    -classpath
    C:\Users\trganda\Documents\app\target\classes;
    -sourcepath
    C:\Users\trganda\Documents\app\src\main\java;C:\Users\trganda\Documents\app\target\generated-sources\annotations;
    -s
    C:\Users\trganda\Documents\app\target\generated-sources\annotations
    -g
    -nowarn
    -target
    1.7
    -source
    1.7
    -encoding
    UTF-8
    C:\Users\trganda\Documents\app\src\main\java\org\example\App.java
这个文件称为[Command-Line Argument
Files](https://docs.oracle.com/en/java/javase/13/docs/specs/man/javac.html?msclkid=bebf72cecf7611ecaa58ff68bdfe6baa#Command-Line%20Argument%20Files)，用于给`javac`传递参数，它应该是通过执行`maven`来生成的。
### Tracer
这里可能会疑惑`semmle-extractor-java.jar`是怎么被执行的，虽然并没有对`trace.exe`和`runner.exe`进行分析，但是可以从`javac.env`和环境变量`SEMMLE_JAVA_TOOL_OPTIONS`猜测出在`"C:\Program
Files\codeql\tools\win64\tracer.exe" "C:\Program
Files\codeql\tools\win64\runner.exe" cmd.exe /C type NUL && mvn clean
compile`执行过程中时，通过`agent`的方式向`jvm`植入了`codeql-java-agent.jar`。
> 下面这一段内容是新加入的
在`$CODEQL_HOME/tools`目录下，有一个`tracer`目录，里面放着名为`base.lua`的问题，打开这个文件可以看到注释中大大方方的写着它的用途。
    -- Overview:
    -- Each traced language contains a `tracing-config.lua` file that defines two functions:
    -- GetCompatibleVersions() -> [versionNumbers]. This function returns a list of major versions that
    --   are compatible with this `tracing-config.lua` file.
    -- RegisterExtractorPack(languageId) -> [matchers]. This function is called at by
    --   the Lua tracer runtime. It returns a list of matchers for this language.
    --   A matcher is a  function of the form function(compilerName, compilerPath, compilerArguments, languageID) -> Table | nil.
    --   The return value of a matcher is either `nil` (no match) or a table with the following keys:
    --     `trace`: True if the processes created by the compiler (and extractor) should be traced for the current language
    --     `replace`: If true, then the compiler process is not run