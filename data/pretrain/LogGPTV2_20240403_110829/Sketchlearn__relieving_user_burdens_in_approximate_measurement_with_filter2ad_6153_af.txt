accurate, and general, with minimum user burdens on con-
figurations. The source code of SketchLearn is available at:
https://github.com/huangqundl/SketchLearn.
Acknowledgments. We thank our shepherd, Walter Will-
inger, and the anonymous reviewers for their valuable com-
ments. The work was supported in part by CAS Pioneer
Hundred Talents Program, National Key R&D Program of
China (2016YFB1000200), Research Grants Council of Hong
Kong (GRF 14204017), National Natural Science Foundation
of China (61420106013), and Outstanding Member Award of
Youth Innovation Promotion Association of CAS.
(a) Heavy changer
(b) Entropy
Figure 14: (Exp#9) Arbitrary flowkey definitions.
Figure 15: (Exp#10) Attaching error measures.
(a) Heavy hitter
(b) Cardinality and entropy
Figure 16: (Exp#11) Network-wide coordination.
detection, and cardinality estimation. We use 64KB mem-
ory and set the detection threshold 0.1% and 0.5%. Figure 15
shows that for heavy hitter and heavy changer detection,
error filtering improves the precision to above 90% for thresh-
old 0.1%, and to 100% for threshold 0.5%. It also decreases
the error for cardinality from 4.25% to 3.07%.
7.4 Network-wide Coordination
We evaluate network-wide coordination of SketchLearn us-
ing our simulator, in which we build an 8-ary Fat-Tree with
128 hosts and 80 switches. We evaluate three network-wide
statistics: heavy hitters, cardinality, and entropy.
(Experiment 11) Network-wide coordination. Figure 16(a)
shows network-wide heavy hitters. In our 8-ary Fat-Tree
topology, a flow traverses at most seven devices (two soft-
ware switches in hosts and five hardware switches). We vary
the number of measurement points x from one to seven; for
each x (1 ≤ x ≤ 7), we analyze all flows that traverse x
devices, on which we deploy measurement points. We use
an extremely small threshold, 0.01% of the total frequency,
to show the improvement of network-wide coordination. Ini-
tially, when the number of measurement points is one, the
precision and recall are only around 70% and 40%, respec-
tively. However, the accuracy significantly improves as the
number of measurement points increases. When the number
is four, the precision is 100%, and the recall reaches 80% when
1001001001001001000501005−TupleSrcAddr+DstAddrSrcAddr+SrcPortAccuracy (%)PrecisionRecall9.3511.1611.970510155−TupleSrcAddr+DstAddrSrcAddr+SrcPortRelative Error (%)92.7278.9294.1271.3410094.8510095.45050100HH(Thresh=0.1%)PrecisionHC(Thresh=0.1%)PrecisionHH(Thresh=0.5%)PrecisionHC(Thresh=0.5%)PrecisionAccuracy (%)w/o Filteringw/ Filtering3.074.2505CardinalityRelative Error (%)w/o Filteringw/ Filtering4060801001234567# of Measurement PointsAccuracy (%)PrecisionRecall0.02.55.07.510.01248163264128# of HostsRelative Error (%)CardinalityEntropySIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
Huang et al.
REFERENCES
[1] Omid Alipourfard, Masoud Moshref, and Minlan Yu. 2015. Re-
evaluating Measurement Algorithms in Software. In Proc. of HotNets.
[2] Mohammad Alizadeh, Albert Greenberg, David A Maltz, and Jitendra
Padhye. 2010. Data Center TCP (DCTCP). In Proc. of SIGCOMM.
[3] Ziv Bar-Yossef, T. S. Jayram, Ravi Kumar, D. Sivakumar, and Luca
Trevisan. 2002. Counting Distinct Elements in a Data Stream. In Proc.
of RANDOM.
[4] Barefoot’s Tofino. 2018.
https://www.barefootnetworks.com/
technology. (2018).
[5] Ran Ben Basat, Gil Einziger, Roy Friedman, Marcelo C Luizelli, and
Erez Waisbard. 2017. Constant Time Updates in Hierarchical Heavy
Hitters. In Proc. of SIGCOMM.
[6] Theophilus Benson, Aditya Akella, and David A. Maltz. 2010. Network
Traffic Characteristics of Data Centers in the Wild. In Proc. of IMC.
[7] Tian Bu, Jin Cao, Aiyou Chen, and Patrick P. C. Lee. 2010. Sequential
Hashing: A Flexible Approach for Unveiling Significant Patterns in
High Speed Networks. Computer Networks 54, 18 (2010), 3309–3326.
[8] Caida Anonymized Internet Traces 2016 Dataset. 2018. http://www.
caida.org/data/passive/passive_2016_dataset.xml. (2018).
[9] Marco Canini, Damien Fay, David J. Miller, Andrew W. Moore, and Raf-
faele Bolla. 2009. Per Flow Packet Sampling for High-Speed Network
Monitoring. In Proc. of COMSNETS.
[10] George Casella and Roger Berger. 2001. Statistical Inference. Duxbury
Resource Center.
[11] Amit Chakrabarti, Graham Cormode, and Andrew Mcgregor. 2007. A
Near-Optimal Algorithm for Computing the Entropy of a Stream. In
Proc. of SODA.
[12] Moses Charikar, Kevin Chen, and Martin Farach-Colton. 2004. Finding
Frequent Items in Data Streams. Theoretical Computer Science 312, 1
(2004), 3–15.
[13] Surajit Chaudhuri, Bolin Ding, and Srikanth Kandula. 2017. Approxi-
mate Query Processing: No Silver Bullet. In Proc. of SIGMOD.
[14] Yi-Chao Chen, Lili Qiu, Yin Zhang, Guangtao Xue, and Zhenxian Hu.
2014. Robust Network Compressive Sensing. In Proc. of MOBICOM.
[15] Graham Cormode and Marios Hadjieleftheriou. 2010. Methods for
Finding Frequent Items in Data Streams. The VLDB Journal 19, 1 (2010),
3–20.
[16] Graham Cormode, Flip Korn, S. Muthukrishnan, and Divesh Srivastava.
2003. Finding Hierarchical Heavy Hitters in Data Streams. In Proc. of
VLDB.
[17] Graham Cormode and S. Muthukrishnan. 2004. What’s New: Finding
Significant Differences in Network Data Streams. In Proc. of IEEE
INFOCOM.
[18] Graham Cormode and S. Muthukrishnan. 2005. An Improved Data
Stream Summary: The Count-Min Sketch and its Applications. Journal
of Algorithms 55, 1 (2005), 58–75.
[19] Graham Cormode and S. Muthukrishnan. 2005. Space Efficient Mining
of Multigraph Streams. In Proc. of PODS.
[20] Ítalo Cunha, Renata Teixeira, Nick Feamster, and Christophe Diot. 2009.
Measurement Methods for Fast and Accurate Blackhole Identification
with Binary Tomography. In Proc. of IMC.
[21] Ralph D’Agostino and Egon S Pearson. 1973. Tests for Departure
from Normality. Empirical Results for the Distributions of b2 and √b1.
Biometrika 60, 3 (1973), 613–622.
[22] Data Plane Development Kit. 2018. https://dpdk.org. (2018).
[23] Xenofontas Dimitropoulos, Paul Hurley, and Andreas Kind. 2008. Prob-
abilistic Lossy Counting: An Efficient Algorithm for Finding Heavy
Hitters. ACM SIGCOMM Computer Communication Review 38, 1 (2008).
[24] Philippe Flajolet, Éric Fusy, Olivier Gandouet, and Frédéric Meunier.
2007. HyperLogLog: The Analysis of A Near-optimal Cardinality
Estimation Algorithm. In Proc. of AOFA. 127–146.
[25] Philippe Flajolet and G. Nigel Martin. 1985. Probabilistic Counting
Algorithms for Data Base Applications. J. Comput. System Sci. 31, 2
(1985), 182–209.
[26] Nate Foster, Rob Harrison, Michael J. Freedman, Christopher Monsanto,
Jennifer Rexford, Alec Story, and David Walker. 2011. Frenetic: A
Network Programming Language. In Proc. of ICFP.
[27] Sriram Govindan, Jie Liu, Aman Kansal, and Anand Sivasubramaniam.
2011. Cuanta: Quantifying Effects of Shared On-chip Resource Inter-
ference for Consolidated Virtual Machines. In Proc. of SoCC.
[28] Arpit Gupta, Rüdiger Birkner, Marco Canini, Nick Feamster, Chris
Mac-Stoker, and Walter Willinger. 2016. Network Monitoring as a
Streaming Analytics Problem. In Proc. of HotNets.
[29] Nikhil Handigol, Brandon Heller, Vimalkumar Jeyakumar, David Maz-
ières, and Nick McKeown. 2014. I Know What Your Packet Did Last
Hop: Using Packet Histories to Troubleshoot Networks. In Proc. of
NSDI.
[30] Nicholas J.A. Harvey, Jelani Nelson, and Krzysztof Onak. 2008. Sketch-
ing and Streaming Entropy via Approximation Theory. In Proc. of
FOCS.
[31] Stefan Heule, Marc Nunkesser, and Alexander Hall. 2013. HyperLogLog
in Practice: Algorithmic Engineering of a State of The Art Cardinality
Estimation Algorithm. In Proc. of EDBT.
[32] Qun Huang, Xin Jin, Patrick P C Lee, Runhui Li, Lu Tang, Yi-Chao Chen,
and Gong Zhang. 2017. SketchVisor: Robust Network Measurement
for SoÅ£tware Packet Processing. In Proc. of SIGCOMM.
[33] Qun Huang and Patrick P. C. Lee. 2015. A Hybrid Local and Distributed
Sketching Design for Accurate and Scalable Heavy Key Detection in
Network Data Streams. Computer Networks 91 (2015), 298–315.
[34] Qun Huang, Patrick P. C. Lee, and Yungang Bao. 2018.
SketchLearn: Relieving User Burdens
in Approximate Mea-
surement with Automated Statistical Inference (Technical Report).
https://github.com/huangqundl/SketchLearn/blob/master/TechReport.pdf.
(2018).
[35] Vimalkumar
Jeyakumar, Mohammad Alizadeh, Yilong Geng,
Changhoon Kim, and David Mazières. 2014. Millions of Little Minions:
Using Packets for Low Latency Network Programming and Visibility.
In Proc. of SIGCOMM.
[36] Lavanya Jose, Minlan Yu, and Jennifer Rexford. 2011. Online Measure-
ment of Large Traffic Aggregates on Commodity Switches. In USENIX
HotICE.
[37] Srikanth Kandula and Ratul Mahajan. 2009. Sampling Biases in Net-
work Path Measurements andWhat To Do About It. In Proc. of IMC.
[38] Abhishek Kumar, Minho Sung, Jun (Jim) Xu, and Jia Wang. 2004. Data
Streaming Algorithms for Efficient and Accurate Estimation of Flow
Size Distribution. In Proc. of SIGMETRICS.
[39] Patrick P. C. Lee, Tian Bu, and Girish Chandranmenon. 2010. A Lock-
Free, Cache-Efficient Multi-Core Synchronization Mechanism for Line-
Rate Network Traffic Monitoring. In Proc. of IPDPS.
[40] Yuliang Li, Rui Miao, Changhoon Kim, and Minlan Yu. 2016. FlowRadar:
A Better NetFlow for Data Centers. In Proc. of NSDI.
[41] Xuemei Liu, Meral Shirazipour, Minlan Yu, and Ying Zhang. 2016.
MOZART: Temporal Coordination of Measurement. In Proc. of SOSR.
[42] Zaoxing Liu, Antonis Manousis, Gregory Vorsanger, Vyas Sekar, and
Vladimir Braverman. 2016. One Sketch to Rule Them All: Rethinking
Network Flow Monitoring with UnivMon. In Proc. of SIGCOMM.
[43] Gurmeet Singh Manku. 2002. Approximate Frequency Counts over
Data Streams. In Proc. of VLDB.
[44] Ahmed Metwally, Divyakant Agrawal, and Amr El Abbadi. 2005. Effi-
cient Computation of Frequent and Top-k Elements in Data Streams.
In Proc. of ICDT.
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
[66] Kyu-Young Whang, Brad T. Vander-Zanden, and Howard M. Taylor.
1990. A Linear-time Probabilistic Counting Algorithm for Database
Applications. ACM Trans. Database Systems 15, 2 (1990), 208–229.
[67] Minlan Yu, Lavanya Jose, and Rui Miao. 2013. Software Defined Traffic
Measurement with OpenSketch. In Proc. of NSDI.
[68] Qiao Zhang, Vincent Liu, Hongyi Zeng, and Arvind Krishnamurthy.
2017. High-Resolution Measurement of Data Center Microbursts. In
Proc. of IMC.
[69] Yin Zhang, Matthew Roughan, Walter Willinger, and Lili Qiu. 2009.
Spatio-Temporal Compressive Sensing and Internet Traffic Matrices.
In Proc. of SIGCOMM.
[70] Yibo Zhu, Nanxi Kang, Jiaxin Cao, Albert Greenberg, Guohan Lu,
Ratul Mahajan, Dave Maltz, Lihua Yuan, Ming Zhang, Ben Y. Zhao,
and Haitao Zheng. 2015. Packet-Level Telemetry in Large Datacenter
Networks. In Proc. of SIGCOMM.
[45] Rui Miao, Hongyi Zeng, Changhoon Kim, Jeongkeun Lee, and Minlan
Yu. 2017. SilkRoad: Making Stateful Layer-4 Load Balancing Fast and
Cheap Using Switching ASICs. In Proc. of SIGCOMM.
[46] J. Misra and David Gries. 1982. Finding repeated elements. Science of
Computer Programming 2, 2 (1982), 143–152.
[47] Masoud Moshref, Minlan Yu, Ramesh Govindan, and Amin Vahdat.
2014. DREAM: Dynamic Resource Allocation for Software-defined
Measurement. In Proc. of SIGCOMM.
[48] Masoud Moshref, Minlan Yu, Ramesh Govindan, and Amin Vahdat.
2015. SCREAM: Sketch Resource Allocation for Software-defined
Measurement. In Proc. of CoNEXT.
[49] Masoud Moshref, Minlan Yu, Ramesh Govindan, and Amin Vahdat.
2016. Trumpet: Timely and Precise Triggers in Data Centers. In Proc.
of SIGCOMM.
[50] Srinivas Narayana, Mina Tashmasbi Arashloo, Jennifer Rexford, and
David Walker. 2016. Compiling Path Queries. In Proc. of NSDI.
[51] Srinivas Narayana, Anirudh Sivaraman, Vikram Nathan, Prateesh
Goyal, Venkat Arun, Mohammad Alizadeh, Vimalkumar Jeyakumar,
and Changhoon Kim. 2017. Language-Directed Hardware Design for
Network Performance Monitoring. In Proc. of SIGCOMM.
[52] OpenvSwitch. 2018. http://openvswitch.org. (2018).
[53] P4 Language. 2018. https://p4.org. (2018).
[54] Ben Pfaff, Justin Pettit, Teemu Koponen, Ethan J. Jackson, Andy Zhou,
Jarno Rajahalme, Jesse Gross, Alex Wang, Jonathan Stringer, Pravin
Shelar, Keith Amidon, and Martín Casado. 2015. The Design and
Implementation of Open vSwitch. In Proc. of NSDI.
[55] Jeff Rasley, Brent Stephens, Colin Dixon, Eric Rozner, Wes Felter, Kanak
Agarwal, John Carter, and Rodrigo Fonseca. 2014. Planck: Millisecond-
scale Monitoring and Control for Commodity Networks. In Proc. of
SIGCOMM.
[56] Arjun Roy, Hongyi Zeng, Jasmeet Bagga, George Porter, and Alex C
Snoeren. 2015. Inside the Social Network’ s (Datacenter) Network. In
Proc. of SIGCOMM.
[57] Arjun Roy, Hongyi Zeng, Jasmeet Bagga, and Alex C Snoeren. 2017.
Passive Realtime Datacenter Fault Detection and Localization. In Proc.
of NSDI.
[58] Robert Schweller, Zhichun Li, Yan Chen, Yan Gao, Ashish Gupta, Yin
Zhang, Peter Dinda, Ming Yang Kao, and Gokhan Memik. 2007. Re-
versible Sketches: Enabling Monitoring and Analysis over High-Speed
Data Streams. IEEE/ACM Trans. on Networking 15, 5 (2007), 1059–1072.
[59] Vyas Sekar, Michael K. Reiter, Walter Willinger, Hui Zhang, Ra-
mana Rao Kompella, and David G. Andersen. 2008. cSAMP: A System
for Network-Wide Flow Monitoring. In Proc. of USENIX NSDI.
[60] Vyas Sekar, Michael K Reiter, and Hui Zhang. 2010. Revisiting the
Case for a Minimalist Approach for Network Flow Monitoring. In Proc.
of IMC.
[61] S. S. Shapiro and M. B. Wilk. 1965. An Analysis of Variance Test for
Normality (Complete Samples). Biometrika 52, 3/4 (1965), 591–611.
[62] Vibhaalakshmi Sivaraman, Srinivas Narayana, Ori Rottenstreich, S.
Muthukrishnan, and Jennifer Rexford. 2017. Heavy-Hitter Detection
Entirely in the Data Plane. In Proc. of SOSR.
[63] Haoyu Song, Sarang Dharmapurikar, Jonathan Turner, and John Lock-
wood. 2005. Fast Hash Table Lookup using Extended Bloom Filter. In
Proc. of SIGCOMM.
[64] Daniel Stutzbach, Reza Rejaie, Nick Duffield, Subhabrata Sen, and
Walter Willinger. 2009. On Unbiased Sampling for Unstructured Peer-
to-peer Networks. IEEE/ACM Trans. on Networking 17, 2 (2009), 377–
390.
[65] Olivier Tilmans, Tobias Bühler, Ingmar Poese, Stefano Vissicchio, and
Laurent Vanbever. 2018. Stroboscope: Declarative Traffic Mirroring
on a Budget. In Proc. of NSDI.