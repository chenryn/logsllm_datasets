measurement is also computed as a percentage of the
maximum data rate sustainable by the server and the data
link between it and the server broker.
4.2 Results
2.
We performed three sets of experiments that were
designed to study the behaviors of MbSQD system in res-
ponse to three different kinds of DDoS attacks:
1. TCP-SYN Attacks: in these experiments, the rogue
clients flood the server with SYN packets with forged
source IP addresses in order to overwhelm the server
with half-opened TCP connections;
Server Flooding Attacks: in these experiments, the
rogue clients flood the server with frequent and long
TCP connections uploading large amount of data to
the server; this set of experiments were also designed
to examine the effects of using computational proof-
of-work as a method of payments offered by the
clients;
the
Server Draining Attack: in these experiments,
rogue clients
initiate frequent TCP connections
downloading large amount of data from the server
(e.g. an HTTP server). This set of experiments also
examines the effects of using fungible payments as a
means of payments.
3.
Experiments of
type (1) and (2) were run with 25
legitimate clients requesting TCP connections of random
exponentially distributed durations (average 0.5 seconds)
separated by random exponentially distributed intervals
(average 0.1 seconds). Each of the legitimate clients
would establish a connection with the server and upload a
relatively small amount of data. Experiments were run
a
of
random,
response
Experiments of type (3) were run with 128 legitimate
clients opening TCP connections and sending requests
requiring a
exponentially
distributed size (average 17,000 bytes) at exponentially
distributed intervals (average 0.1 seconds). Experiments
were run with from 0 to 512 rogue clients. The rogue
clients
requiring
random, exponentially distributed sizes of a larger average
(average 100,000 bytes).
loop continuously sending requests
4.2.1 Mitigation against TCP-SYN Attacks
the
rogue
In these
experiments,
clients were
programmed as constant bit sources, generating SYN
packets as fast as they can without completing the
connection establishment. The attack did not start until 0.5
seconds into the experiment, and stopped 1.5 seconds
before the end of the test. Figure 4-2 displays the result of
the experiment. The graph plots two traces: the number of
packets from the legitimate clients that were delivered to
the server agent while MbSQD was running verses the
same measurement without MbSQD. The vertical axis
shows the total packet count (over the course of the entire
experiment). The horizontal axis is the ratio of Good
Clients to DDoS attacking agents. As the graph shows, the
intensity of the attack has little impact on the throughput
of the legitimate clients when MbSQD is active; on the
other hand, the service is effectively denied in the absence
of MbSQD.
14000
12000
10000
8000
6000
4000
2000
0
1
d
e
r
e
v
i
l
e
D
t
e
k
c
a
P
t
n
e
i
l
C
d
o
o
G
0.01
0.1
GoodClient Ratio
NoMbSQD
MbSQD
Figure 4-2. MbSQD mitigation against TCP-SYN
attacks
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:10 UTC from IEEE Xplore.  Restrictions apply. 
These drastically different
results have a simple
explanation. By requiring a proof-of-work response from
the clients before the brokers would forward packets, the
impact of the SYN attacks is shifted from the server to the
gateways that host the brokers. A naive SYN packet flood
has no impact on the server because the server broker
discards all the attacker packets without burdening the
server with them.
4.2.2 Mitigation against Server Flooding
In these experiments, the rogue clients had similar but
more aggressive behaviors than the legitimate clients: their
average connection interval was set to be 0.01 second and
their average duration was 0.7 second; in other words, the
rogue clients requested connections much more frequently
than the legitimate clients, and held onto them for a little
longer. The resource protected by the server broker
includes the server node, the server broker, and the link
between them. In these experiments, the price was linearly
proportional to the number of open connections at the
server broker (and at the server). The token of payment
was proof-of-work computation that
the clients must
perform in response to the challenges from the client
broker.
We ran three sets of simulations: a control case
without MbSQD action, one with the server broker
charging a price for the establishment of each connection
and the other one with the server broker charging a price
for every pass of 32 packets. As a measure of service
quality, we counted the number of
legitimate-client
requests delivered to the server during ten seconds of
simulation time. (We also verified that the total number of
requests delivered to the server remained at 10000, no
matter how many rogue clients were present.) Figure 4-3
14000
12000
10000
8000
6000
4000
2000
0
1
displays the results of the experiment.
The graph shows that all attacks were ultimately
effective even with the use of MbSQD. However,
it
required eight times as many rogue clients in order to
achieve the same level of service degradation when the
brokers were active. Since our pricing strategy throttled
both legitimate and rogue clients, the effects were not
quite as dramatic as those of the first set of experiments,
but it remains the case that an attacker must infect two to
three times as many hosts in order to achieve and sustain a
significant level of service degradation.
4.2.3 Mitigation against Server Draining
In this experiment, the results of which are shown in
Figure 4-4, the rogue clients are attempting to act as a
drain on a server’s bandwidth. They attempt to repeatedly
download
of
connections available for legitimate requests (the size of
their download is large simply to let them sit on the
connection once they have it).
exhausting
number
large
files,
the
In this experiment, users leased connections. The
lease period was set so that, in an unloaded system, 90%
of all legitimate tasks would complete requiring only one
payment.
That
function
diminishes under heavy load comes as no surprise − as the
load increases, a constant time lease covers less data. An
experiment based on amount of data transmitted (as
opposed to connection duration) should prove more robust
effectiveness of
this price
the
4000
3500
3000
2500
2000
1500
1000
500
0
1
d
e
r
e
v
i
l
e
D
s
t
e
k
c
a
P
t
n
e
i
l
C
d
o
o
G
f
o
r
e
b
m
u
N
0.1
No MbSQD
Charged Per Connection
Charged per 32 Packet
0.1
0.01
Figure 4-4. MbSQD mitigation against server
draining
Figure 4-3. MbSQD mitigation against server
flooding
GoodClientNumbervs. TotalClientNumber
Non-MbSQD
ExpPrice&Scrip
ExpPrice&POW
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:10 UTC from IEEE Xplore.  Restrictions apply. 
at the higher attack rates.
5. Conclusions
In this paper, we have explored the application of
dynamic pricing mechanisms in mitigating DDoS attacks.
We have presented the MbSQD architecture and protocol
which supports both proof-of-work and monetary-like
micropayment schemes. We have prototyped the MbSQD
system using the ns-2 simulator. We also presented
simulation results on the effectiveness of different pricing
strategies
some DDoS scenarios based on a
monopolistic service model.
for
5.1 Lessons learned
We made the following observations from the simu-
lation experiments we have conducted:
•  Pushing costs back onto clients appears
to be
effective for mitigating server-based DDoS attacks.
Specifically, MbSQD does
for
maintaining control of client-server traffic flows over
the Internet. Traffic parameters can be implicitly
exploited to maintain control even under changing
conditions
show promise
•  Proof-of-work methods are effective for elimination
of spoofed requests or flooding via a limited number
of machines. Scrip based payment methods can be
effective if integrity can be maintained over the
money supply.
•  Different client behaviors can be discriminated by
different server pricing strategies. Service Brokers
can work to favor certain traffic behaviors in the
range of scenarios we have studied.
•  As to be expected, the choice of a pricing function
will have a very strong effect on the effectiveness of
MbSQD.
Pricing functions can favor either the
defender or the attacker and care must be taken to
choose
behavior
conducive to the accomplishment of the mission of
the server(s) being controlled.
functions
pricing
that
elicit
5.2 Suggested Directions for Future Research
The
investigation
presented
preliminary in nature. We suggest
possible extensions of the current system.
this
is
in
the following two
paper
5.2.1 Dynamic Subscription Parameters
Currently, subscription parameters types and limiting
values are fixed throughout
the process. However, a
service provider might define a business logic in which
lengthy subscriptions are offered when the service is not
busy, but allowed length may shrink in response to service
load. Alternately, a service might offer free service until
its resources are depleted to a certain level, at which point
the service becomes fee-for-use until utilization drops
again. By the same token, a service might use a linear or
constant pricing algorithm until
some threshold of
resource use was reached, using an exponential strategy
thereafter.
5.2.2 Service Differentiation
Service providers may want clients
to receive
different levels of access to resources or pricing based on
the service category to which they belong. Service
category in this case is an abstract group defined by the
service provider that might relate to factors such as the
client's service use profile e.g., "well-behaved" clients vs.
"poorly-behaved" clients or some out-of-band, cached
relationship e.g., "AOL customers" vs. education domain
clients. Below are a few possible ways that a service might
employ to differentiate between clients.
Buyer's Clubs: the price that a client pays depends upon
the last price category it was in. Hence, people who paid
for premium service might get a price break the next time
they renew their subscription, or might receive a price
break if they purchase a large enough unit of service.
service categories
Threshold-based Packet-Dropping:
such as gold, silver, and bronze correspond to certain
price thresholds and packets for a particular subscription
are dropped whenever the price rises above the level of
service that
if a client
purchases “silver” service, packets are dropped at some
fixed rate whenever the price is above a threshold.
Queuing Manipulation: level of service corresponds to the
delay that the client experiences in having its packets
processed.
Subscription Parameter Modification: the level of service
corresponds to a certain set of values for subscription
parameters. Example: Subscriptions are sold by packet. If
a client purchases gold service, it is able to receive 50
packet blocks; silver = 30 packet blocks; bronze = 10
packet blocks.
the client paid. For example,
Further research is necessary to determine how to
combine different dynamic pricing mechanisms in order to
enhance overall system survivability by discriminating
against different kinds of adversarial behavior. However,
our preliminary results indicate that dynamic pricing
strategies offer a promising new direction in countering
server-directed DDoS attacks on the Internet.
6. Bibliography
[BBC01]http://news.bbc.co.uk/low/english/sci/tech/newsi
d 1348000/1348820.stm
[CAIDA01] www.caida.org/outreach/papers/backscatter/
[Jue99] A. Juels and J. Brainard, “Client Puzzles: A
Cryptographic Defense Against Connection Depletion
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:10 UTC from IEEE Xplore.  Restrictions apply. 
Attacks,” Network and Distributed System Security
Symposium '99, San Diego, CA, USA, February 1999.
[Ful00] E. Fulp and D. Reeves, “A Multi-Market
Approach to Resource Allocation,” Proc. of Networking
2000, Lecture Notes in Computer Science, G. Pujolle, ed.,
No. 1815, pp. 945-956, May 2000.
[Bla98] S. Blake, D. Black, M. Carlson, E. Davies, Z.
Wang, and W. Weiss, “RFC 2475: An Architecture for
Differentiated Services,” December 1998.
[Gib01] S. Gibson, “The Strange Tale of the Denial of
Service Attacks against GRC.com”,
www.grc.com/grcdos.html”, June 2001.
[Fis99] P. C. Fishburn and A. M. Odlyzko, “Competitive
Pricing of Information Goods: Subscription Pricing
Versus Pay-Per-Use,” Economic Theory, Vol. 13, pp.
447-470, 1999.
[Niv73] L. Niven, “Flash Crowd,” The flight of the horse,
Ballantine Books, 1973.
[Bak99] Y. Bakos and E. Brynjolfsson, “Bundling
Information Goods: Pricing, Profits, and Efficiency,”
Management Science, December 1999.
[Dwo92] C. Dwork and M. Naor, “Pricing via Processing
or Combating Junk Mail,” in Ernest F. Brickell, ed.,
Crypto '92, Vol. 740, Lecture Notes in Comp Science, pp.
139-147. Springer-Verlag, 16-20 August 1992.
[Riv97] R. Rivest and A. Shamir, “PayWord and
MicroMint: Two Simple Micro-payment Schemes, ”
Lecture Notes in Comp. Science, vol. 1189, Proc. Security
Protocols Workshop, Springer-Verlag, pp. 69-87, 1997.
[Jak99] M. Jakobsson and A. Juels, “Proofs of Work and
Bread Pudding Protocols,” In B. Preneel, ed.,
Communications and Multimedia Security. Kluwer
Academic Publishers, pp. 258-272, 1999.
[Cha83] D. Chaum, “Blind Signatures for Untraceable
Payments,” Advances in Cryptology--Crypto '82,
Springer-Verlag, pp. 199-203, 1983.
[Sno01] A.C. Snoeren, C. Partridge, L.A. Sanchez, C.E.
Jones, F. Tchakountio, S. T. Kent, and W. T. Strayer,
Proc. ACM SIGCOMM 2001, August 2001.
[MPAPI] W3C Micro-payments API and Markup WGs,
www.w3.org/ECommerce/Micro-payments/
[Milli] Compaq Millicent, www.millicent.digital.com
[Pay] PayPal, www.paypal.com
[NS2] NS-2 simulator, http://www.isi.edu/nsnam/ns
[Arq] The ARQoS Project, http://arqos.csc.ncsu.edu/
[Free] The FreeHaven Project, http://www.freehaven.net/
[Digi] DigiCash, http://www.digicash.com
[Hash] A. Back, “Hash Cash: A Partial Hash Collision
Based Postage Scheme,”
www.cypherspace.org/~adam/hashcash.
[Mojo] Mojo Nation, http://www.mojonation.net/
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:10 UTC from IEEE Xplore.  Restrictions apply.