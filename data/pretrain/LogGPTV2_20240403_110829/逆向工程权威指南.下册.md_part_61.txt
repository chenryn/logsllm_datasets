push
。 SS:[rrrc] = 140h and Ss:[77re] - 2147h
aX
:XX - 140h, BX = 140h,
0109 58
pop
SP = FFFEh and SS: [FFE] = 214Fh
bX
 AX = 11Ch, BX = 140h,
010A 34 5C
xor
SP = FFFEh and SS: [FFFE] - 214Fh
a1, 5Ch
0S 2010
push
pop
aX
 AX = 11Ch, BX = 140h,
0100 5a
DK = 11Ch,
dx
0108 58
SP = FFFEh and SS: [FFFE] = 214Fh
AX = 214Fh, BX = 140h
pop
， D区 = 11ch and SP = 0
aX
AX -97Bh, BX = 140h,
010F 35 34 28
xor
IK - 11Ch and SP = 0
ax, 2834h
95 Z110
push
0113 58
: AX = 97Bh, BX =
81
0114 29 37
sub
[bx], s1
11Ch,
q8L6 = 1S
0116 43
0117 43
ine
inc
bx
bx
0118 29 37
sub
[bx], s1
011A 70 24
011C 45 49 43 .*
1ge
-STANDARDANTIVIPROS-TEST-FILE1$*
short near ptr vord_10140
0140 48 28 word_10140
0142 48 2A
dv 2848h
dv 2A48h
n: CD 20 (INT 20) vi11 be here
11 CD 21 (INT 21) vi11l be here
0144 0D
h
0145 0A
dOAh
笔者在上述代码里追加了各种注释，以介绍执行指令后各寄存器和栈的状态。
本质上说，这个程序的关键指令（下文简称“核心指令”）只有：
BA 1C 01 MOV DOK, 11Ch
B409
.6*BV AOR
① ll8 E https://en.wikipedia.org/wilki/EICAR_test_file,
---
## Page 336
812
逆向工程权威指南（下册）
CD 21
CD 20
INT 21h
INT 20h
INT21的第9号功能（AH寄存器）的作用是显示字符串，系统中断从DS:DX获取字符串的指针，然
后把它输出在屏幕上，另外，这种字符串必须以“S”字符结尾。当今的操作系统显然继续兼容了这种指令。
不过这种指令属于CP/M（Control Program for Microcomputers），来自比 MS-DOS 还要古老的磁盘操作系统。
由此可见，EICAR的主要功能是：
●向寄存器（AH和DX）传递预定值。
●在内存中准备 INT 21 和INT20的opcode。
●执行INT21和INT20。
严格地讲，核心指令的opcode基本都不是屏显字符。EICAR采用“拼淡”指令的方法，把核心指令
有关“可用屏显字符表示的opcode”，请参见本书附录A.6.5。
---
## Page 337
第83章
实例演
示
编写Demo程序不仅要求编程人员具备熟练的数学技巧、卓越的计算机绘图水平，而且还非常考验他们
手写x86代码的基本功。
83.110PRINTCHR$(205.5+RND(1))::GOTO10
本节介绍的程序都是MS-DOS环境下的.COM程序。
在参考资料[a12]里，我们找到了一个非常简单的随机图案生成程序。虽然它的功能只是不停地在屏
幕上打印斜杠和反斜杠，但是这两种字符最终可构成一种几何图案，如图83.1所示，
图 83.1一种随机几何图案
在16位的x86平台上，这种算法非常多。
83.1.1Trixter的42字节程序
Trixter在他的网站上°公开了具备42字节大小的程序。笔者把它摘录出来，并标注上了自己的注释：
00000000: 8001
mov
a1,1
1 set 40x25 video mode
0004: 30FF
010:200
Lnt
010
00000
xor
bh, bh
1 set video page for int 10h ca11
000
06:
B90007
cx, 00700
: 2000 characters to output
000
009: 31C0
008: 9C
xor
aX, ax
pushf
: posh flag8
: get
Som
value
from
cli
tiner
ch1p
043, 81
: disable interrupts
: read 16-bit value fron port 40h
out
: xrite 0 to port 43h
108111000
000F: 8440
mor
in
a1, 040
ah, a1
① htp:/trixteroldskool.org/2012/12/17s
---
## Page 338
814
逆向工程权威指南（下册）
00000013: E440
in
a1, 040
00000015: 90
popf
: enable interrupts by restoring IF flag
00000016: 86C4
16-bit pseudorandon value
xchg
ah,a1
: here ve
8310 :81000000
:have
0000001A: D1E8
shz
shr
ax,1
: CF currently have
 second bit from the value
ax, 1
:1f CP=1, skip the next instruction
0000001C: B05C
00000018：7202
:if CF=o, reload AL register with another character
220000000
00000020: B02F
: output character
B0V
a1,02F ;*/*
00000022: B40S
30
ah, 0E
00000024:CD10
80 000 00:600000000
010
00000028:CD20
00000026: 8281
int
020
2 exit to Dos
实际上，上述程序里的伪随机数是Intel8253计时器芯片（硬件）回传过来的时间信息。它选用了零
号计时器，而时钟决定这个计时器每秒递增18.2次。
用二进制计数（返回值是二进制数字，而非BCD码）”这三条指令。。
当程序执行POPF指令时，CPU恢复IF标识的同时会恢复终端功能。
在使用IN指令读取数据时，返回值必须写到AL寄存器里，所以后面出现了数据交换指令xchg。
83.1.2笔者对Trixter算法的改进：27字节
这个程序并没有使用计时器查询确切时间，而是用它来生成伪随机数。因此，我们没有必要屏蔽系统
中断。此外，我们只需要返回值的低8位数据，所以读这低8位数据即可，
笔者对Trixter的程序稍作精简，把它改进为27字节的程序：
00000000:B90007
cx,00700: 1init output to 2000 characters
00000005：2643
00000003:31c0
xor
043, a1
8x,8X
1 cotnand to tiner chip
00000007: 6440
eut
160000000
1.n
a1, 040
ax, 1
get second bit to CF flag
I read 8-bit of timer
0000000B:
D1E8
D1E8
shr
ax, 1
000000F:7202
a1,05c
1. azedaad :
00000011: B02F
3C
000000013
:output character to screen
a1, 02F
/.azrda2d !
00000013: B40E
ah, 00E
00000015: CD10
00000017:E2EA
Int
1oop
000000003
010
 exit to DoS
00000019: CD20
Int
020
83.1.3从随机地址读取随机数
MS-DOS系统完全没有内存保护技术的概念。换句话说，应用程序可以任意访问内存地址。不仅如此，
在使用LODSB指令从DS:SI读取单字节数据的时候，即使程序没有预先给寄存器赋值也没有问题—它
会从任意地址读取一个字节！
Trixter甚至在其网页里*推荐不初始化相关寄存器就直接使用LODSB指令。
原文同时建议使用SCASB指令替代LODSB指令，因为前者可以在读取数据的同时，根据数据直接设
置标识位，
①实际上，8位控制字相当于四条指令。因为另一个指令没有在本程序发挥作用，所以本文没有进行介绍。
② htp:/trixter.oldskool.org/2012/12/17/maze-generation-in-hirtees-bytes/,
---
## Page 339
第83章实例演示
815
此外，使用 DOS系统的 syscall INT 29h还能对程序进行进一步精简。这个中断可以在屏幕上输出
AL寄存器里的字符。
Peter Ferrie 和Andrey“hermlt”Baranovich 分别写出了 11字节和 10字节的程序
指令清单 83.1Andreyherm1t”Baranovich:11 bytes
000：00000000
a1, 05C:*\*
HY 120000000
/read AL, byte from randon place of metory
[9Aqxouosaopuex - s)aaed (esqAaoeaopuex T)xed - 34 (
scasb
D0000003: 7A02
00000005: B02F
JP
000000007
nov
a1,02F
029
:*/
00000007: CD29
00000009: EBF5
int:
000000000 ; 1oop endlessly
output AL to screen
JmP
SCASB指令计算“AL-{随机地址]”，并设置相应标识位。JP指令比较少见，触发JP转移的条件是奇偶标识
位PF为1（偶数）。在这个程序里，输出的字符不再由随机字节的某个比特位决定，而是由这个字节的各个比特
位共同决定。因此，这个程序的散列程度有望更好一些。
如果使用x86未公开的SALC指令（即SETALC）、单指令完成“SETALCF”，那么整个程序还可以
更短。这个指令最初出现在NECv20CPU上。用自然语言解释的话，它的功能就是“有CF标识位填充
AL寄存器“若CF为1，则AL的值将会是0xFF；否则AL的值就是零，受到SALC适用性的影响，任8086/8088
平台上这个程序应该跑不起来。
指令清单 83.2Peter Ferrie:10 bytes
: AL is random at this point
/ CP Ls set according subtracting randos neaory byte fron AL.
3V100000000
scasb
7so It ia somewhat randon at this point
 RL is set to OxFF if CF=1 or to 0 if otherwise
90110000000
setalc
 AL bere is 0x2D or 0
00000002:242D
and
a1, 020 '-*
: AL here is 0x5C or 0x2F
00000004:042F
add
a1, 02F =′/*
00000006: C029
029 . : output AL to screen
9383:80000000
sspuo dct 00o000
因此，完全有可能微底抛弃条件转移指令。反斜杠（"\"）和斜杠（"/"）的ASCI值分别是0x5C和
0x2F。余下的问题就是：可否根据CF的（伪随机）状态把AL寄存器的值设置为0x5C和0x2F。
实际上解决方法十分简单：无论AL的值是0还是0xFF，我们把它和0x2D进行“与”运算，即可得到0
和0x2D。再把这个值与0x2F租加，就得到了0x2F和0x5C，然后把AL寄存器里的值打印到屏幕上即可。
83.1.4其他
应当注意的是：在DOSBox、Windows NT 主机、其至是MS-DOS 主机上运行同一个程序，看到的图
案都可能是不同的。影响程序结果的因素有：模拟器对Intel8253计时器的不网模拟方式、寄存器的不网
初始值，以及其他因素。
83.2曼德博集合
多少年来，编程人员不懈地钻研曼德博集合的各种算法。本文将要介绍的，是Sir_Lagsalot 在2009年发
①请步抓 httpc//pferrie.host2.com/misc/10print.htm.
②还被评作曼德布洛特集合，英文原文是Mandelbrot set.
---
## Page 340
816
逆向工程权威指南（下册）
表的曼德博集合的Demo程序°，这个程序由30个16位x86指令构成，文件大小仅为64字节。
它绘制的图案如图83.2所示。
图83.2曼德薄集合Demo程序绘制的图案
本节将介绍这个程序的工作原理。
83.2.1理论
复数
复数是二元有序实数对，由实部（Re0）和虚部（ImO）两部分构成。在复数概念的二维空间里，任
意复数的实部和虚部都可表示为二维坐标，从而把该复数表示为平面的一个点。
本节用到的复数运算的基本法则有：
●加mi法：(a+bi)+(c+ai)=(a+c)+(b+a)i
即：
Re(sum) = Re(α) + Re(b)
Im(sum) = Im(a) + Im(b)
●乘法： (a + bi(c + di) = (ac  bd) + (bc + ad)i
即：
Re(product)  Re(a) • Re(c)Re(b) • Re(d)
Im(product) = Im(b) ● Im(c) + Im(a) + Im(d)
●平方：(a+bi)²= (a+bi)（a+bi)（a²b²)+(2ab)i
即：
Re(square) = Re(a)²Im(a)²
Im(square) = 2 • Re(a) • Im(a)
曼德博集合的绘制方法
曼德博集合可以由复二次多项式来定义：对于由复数Z0构成的递归序列z=z+c来说，不同的参
数c可能使序列的绝对值逐渐发散到无限大，也可能收效在有限的区域内。曼德博集合就是使序列不延伸
至无限大的所有复数c的集合。
82Cs=pa;dpoalμuranodmm/d ①
---
## Page 341
第83章实例演示
817
简单地说，普通程序的做法大致如下：
把屏幕划分为像限/取值区域。
将每个坐标点视为一个c值，并验证它是否属于曼德布洛特集合。
验证各坐标的方法如下：
将每个坐标点视为一个复数参数c。
一
描述该点的复数值。
计算复数值的平方。
计算上述值与初始值的矢量和*。
判断上述结果是否逃逸。如果逃逸则立刻终断。
一在一定的选代次数（n）内，进行复数二项式z=z+c的选代。
·如果这个点所代表的c值不会使递归序列的值逃逸到无限大，那么就在屏幕上用某种颜色标注这
个点。
·如果这个点所代表的c值会使递归序列的值选逸，则：
一
（黑白构图）不给这个点着色。
（彩色构图）把逃逸时的选代次数转换成某种颜色，并用这种颜色给这个点着色。因此，彩
色曼德博集合图上的颜色，描述的是该点的选逸速度。
笔者编写了两个程序，分别以复数（宏观参数）和代数二项式（表达形式）两种角度实现上述算法。
指令清单83.3For complexnumbers
def check_if_is_in_set (P):
P_start=P
Iterations=0
vhile Trve:
:(epunoqca)31
P=P^2+P_start
break
if Iteratlons > max_iterations:
iterations++
break
return Lterations
 black-white
for each point on screen P:
if check_if_is_in_set (P)  bounds) :
nev_Xx*2 - Y*2 + X_start
break
new_Y=2*x*Y + T_start
1f iterations > max_iterations1
iterations+*
break
return iterations
 black-white
for X = min_x to nax:
for Y = nin_Y to max_Y:
if check_if_is_in_set (x, Y) < max_iterations1
drav point at X, Y
Eor X = min_X to nax_X:
I colored
for Y = nin_r to sax_Y:
Iterations = if check_if_is_in_set (x,Y)
xx e xuTod 2o[0o xe2p
map Itezations to co1or
维基百科的网站介绍了一种以C#语言实现的曼德博集合算法”。不过，那个源程序只能用符号显示选
代次数的信息。笔者把它改得更为直观了一些，让它能够显示出序列的选代次数：
using System,Collections.Genericj
using Systesj
using System.Ling
using System,Text!
namespace Mno]