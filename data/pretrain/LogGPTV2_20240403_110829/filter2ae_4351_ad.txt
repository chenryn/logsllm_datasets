      [37] = ' '
      [38] = '1'
      [39] = '0'
      [40] = ' '
      [41] = '2'
      [42] = '3'
      [43] = ':'
      [44] = '0'
      [45] = '6'
      [46] = ':'
      [47] = '1'
      [48] = '4'
      [49] = ' '
      [50] = 'P'
      [51] = 'D'
      [52] = 'T'
      [53] = ' '
      [54] = '2'
      [55] = '0'
      [56] = '1'
      [57] = '8'
      [58] = ';'
      [59] = ' '
      [60] = 'r'
      [61] = 'o'
      [62] = 'o'
      [63] = 't'
      [64] = ':'
      [65] = 'x'
      [66] = 'n'
      [67] = 'u'
      [68] = '-'
      [69] = '4'
      [70] = '5'
      [71] = '7'
      [72] = '0'
      [73] = '.'
      [74] = '7'
      [75] = '1'
      [76] = '.'
      [77] = '1'
      [78] = '3'
      [79] = '~'
      [80] = '1'
      [81] = '/'
      [82] = 'D'
      [83] = 'E'
      [84] = 'V'
      [85] = 'E'
      [86] = 'L'
      [87] = 'O'
      [88] = 'P'
      [89] = 'M'
      [90] = 'E'
      [91] = 'N'
      [92] = 'T'
      [93] = '_'
      [94] = 'X'
      [95] = '8'
      [96] = '6'
      [97] = '_'
      [98] = '6'
      [99] = '4'
      [100] = '\0'
    }
    (lldb)
实际上，借助于`x `命令，我们可以将该内存地址处的内容转储出来。那好，让我们开始下手吧。
    (lldb) x 0xffffff802f0f68f0
    0xffffff802f0f68f0: 44 61 72 77 69 6e 20 4b 65 72 6e 65 6c 20 56 65  Darwin Kernel Ve
    0xffffff802f0f6900: 72 73 69 6f 6e 20 31 37 2e 37 2e 30 3a 20 57 65  rsion 17.7.0: We
    (lldb)
看起来，这些内容延续至地址0xffffff802f0f6900处，所以，我们继续进行转储：
    (lldb) x 0xffffff802f0f6900
    0xffffff802f0f6900: 65 72 73 69 6f 6e 20 36 39 2e 30 30 20 57 65 65  rsion 17.7.0: We
    0xffffff802f0f6910: 64 20 4f 63 74 20 31 30 20 32 33 3a 30 36 3a 31  d Oct 10 23:06:1
    (lldb)
太好了！看见44617277696E没？这是单词Darwin的十六进制表示形似。如果我们将其改为十六进制表示的“geosn0w”，就相当于修改了内核名称了。对于版本号的修改，可以如法炮制。
为此，我们需要一个文本到十六进制的转换工具。不要担心，这类工具在网上随处可见，例如我用的[这个](http://www.unit-conversion.info/texttools/hexadecimal/
"这个")。需要注意的是，如果写入的字符串太长的话，就会覆盖其他内容。所以，单词可以更短一些，剩下的空间可以用NOP(0x90)进行填充，但不能更长，因为它会覆盖内存中的其他内容。所以，只要对文本进行精心设计，它既可以删除一些东西，也可以添加一些东西，但一定不要越过边界：不要超过现有字符串中的字符数量。
最后，我是用的十六进制数据是这样的：
    47 65 6f 53 6e 30 77 20 4b 65 72 6e 65 6c 20 56 = "GeoSn0w Kernel V"
    65 72 73 69 6f 6e 20 36 39 2e 30 30 20 57 65 65 = "ersion 69.00 Wee"
现在，我们还不能把它写到这两个地址，因为必须先在所有字符前添加“0x”。最终，它们变为下面的样子：
    0x47 0x65 0x6f 0x53 0x6e 0x30 0x77 0x20 0x4b 0x65 0x72 0x6e 0x65 0x6c 0x20 0x56 = "GeoSn0w Kernel V"
    0x65 0x72 0x73 0x69 0x6f 0x6e 0x20 0x36 0x39 0x2e 0x30 0x30 0x20 0x57 0x65 0x65 = "ersion 69.00 Wee"
现在，我们就可以将这些字节写入内存中了。下面，让我们先从第一个地址开始。就我而言，所用命令如下所示：
    (lldb) memory write 0xffffff802f0f68f0 0x47 0x65 0x6f 0x53 0x6e 0x30 0x77 0x20 0x4b 0x65 0x72 0x6e 0x65 0x6c 0x20 0x56
    (lldb) x 0xffffff802f0f68f0
    0xffffff802f0f68f0: 47 65 6f 53 6e 30 77 20 4b 65 72 6e 65 6c 20 56  GeoSn0w Kernel V
    0xffffff802f0f6900: 72 73 69 6f 6e 20 31 37 2e 37 2e 30 3a 20 57 65  rsion 17.7.0: We
    (lldb)
现在，我们已经将这个字符串完整地存放到了0xffffff802f0f6900地址处：
    (lldb) memory write 0xffffff802f0f6900 0x65 0x72 0x73 0x69 0x6f 0x6e 0x20 0x36 0x39 0x2e 0x30 0x30 0x20 0x57 0x65 0x65
    (lldb) x 0xffffff802f0f6900
    0xffffff802f0f6900: 65 72 73 69 6f 6e 20 36 39 2e 30 30 20 57 65 65  ersion 69.00 Wee
    0xffffff802f0f6910: 64 20 4f 63 74 20 31 30 20 32 33 3a 30 36 3a 31  d Oct 10 23:06:1
    (lldb)
现在，让我们解冻调试对象上的内核:
    (lldb) c
    Process 1 resuming
    (lldb) Loading 1 kext modules warning: Can't find binary/dSYM for com.apple.driver.AppleXsanScheme (79D5E92F-789E-3C37-BE0E-7D1EAD697DD9)
    . done.
    Unloading 1 kext modules . done.
    Unloading 1 kext modules . done.
    (lldb)
然后，让我们在调试对象的终端中运行uname -a命令：
现在，它将显示我们植入的字符串:
    Last login: Sun Dec  2 07:12:19 on ttys000
    Isabella:~ geosn0w$ uname -a
    Darwin Isabella.local 17.7.0 GeoSn0w Kernel Version 69.00 Weed Oct 10 23:06:14 PDT 2018; root:xnu-4570.71.13~1/DEVELOPMENT_X86_64 x86_64
    Isabella:~ geosn0w$
好了，我们已经通过示例讲解了如何在macOS上进行内核调试，希望对大家有所启发。需要注意的是，在完成调试之后，需要将boot-args重新设置为stock，这样才能启动正常的RELEASE版本的内核。为此，可以在调试对象机器上面的终端窗口中运行以下命令：sudo nvram
boot-args=""。然后，转至/System/Library/Kernels/目录下面，并删除kernel.development文件。
    Isabella:~ geosn0w$ sudo nvram boot-args=""
    Password:
    Isabella:~ geosn0w$
现在，在终端中执行以下两个命令，使KextCache无效：
    sudo touch /Library/Extensions
以及：
    sudo touch /System/Library/Extensions
在此之后，重新启动，计算机就能正常启动RELEASE版本的内核了。