    ``` literallayout
    # lsmod | grep vhost
    vhost_net              32768  1
    vhost                  53248  1 vhost_net
    tap                    24576  1 vhost_net
    tun                    57344  6 vhost_net
    ```
    如果这个命令的输出为空，请启用 `vhost_net`{.literal} 内核模块：
    ``` literallayout
    # modprobe vhost_net
    ```
[设置多队列 virtio-net]{.term}
:   要为虚拟机设置 [*多队列 virtio-net*]{.emphasis} 功能，请使用
    `virsh edit`{.literal} 命令编辑虚拟机的 XML 配置。在 XML
    中，将以下内容添加到 ``{.literal} 部分，并使用虚拟机中的
    vCPU 数量替换 `N`{.literal}，最多为 16：
    ``` literallayout
    ```
    如果虚拟机正在运行，重启它以使更改生效。
:::
::: variablelist
[批量网络数据包]{.term}
:   在带有长传输路径的 Linux
    虚拟机配置中，在将数据包提交到内核前，对数据包进行批处理可能会提高缓存利用率。要设置数据包批处理，在主机上使用以下命令，并将
    [*tap0*]{.emphasis} 替换为虚拟机使用的网络接口的名称：
    ``` literallayout
    # ethtool -C tap0 rx-frames 64
    ```
[SR-IOV]{.term}
:   如果您的主机 NIC 支持 SR-IOV，请为您的 vNIC 使用 SR-IOV
    设备分配。如需更多信息，请参阅管理 SR-IOV 设备。
:::
::: itemizedlist
**其他资源**
-   [了解虚拟网络](#configuring-virtual-machine-network-connections_configuring-and-managing-virtualization.html#understanding-virtual-networking-overview_configuring-virtual-machine-network-connections "了解虚拟网络"){.link}
:::
:::
::: section
::: titlepage
# []{#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#virtual-machine-performance-monitoring-tools_optimizing-virtual-machine-performance-in-rhel}虚拟机性能监控工具 {.title}
:::
要识别哪些因素会占用最多 VM
资源，以及虚拟机性能需要优化的方面，可以使用一般和虚拟机特定工具。
::: title
**默认操作系统性能监控工具**
:::
对于标准性能评估，您可以使用主机和虚拟机操作系统默认提供的实用程序：
::: itemizedlist
-   在 RHEL 9 主机上，以 root 用户身份使用 `top`{.literal} 实用程序或
    [**系统监控**]{.strong} 应用程序，并在输出中查找 `qemu`{.literal} 和
    `virt`{.literal}。这显示了您的虚拟机消耗的主机系统资源量。
    ::: itemizedlist
    -   如果监控工具显示任何 `qemu`{.literal} 或 `virt`{.literal}
        进程消耗大量主机 CPU 或内存容量，请使用 `perf`{.literal}
        实用程序进行调查。详情请查看以下信息。
    -   另外，如果 `vhost_net`{.literal} 线程进程（如
        [*vhost_net-1234*]{.emphasis} ）被显示为消耗大量主机 CPU
        容量，请考虑使用
        [虚拟网络优化功能](optimizing-virtual-machine-network-performance_optimizing-virtual-machine-performance-in-rhel){.link}，如
        `multi-queue virtio-net`{.literal}。
    :::
-   在客户端操作系统中，使用系统中可用的性能实用程序和应用程序来评估哪些进程会占用最多系统资源。
    ::: itemizedlist
    -   在 Linux 系统中，您可以使用 `top`{.literal} 实用程序。
    -   在 Windows 系统中，您可以使用 [**Task Manager**]{.strong}
        应用程序。
    :::
:::
::: title
**perf kvm**
:::
您可以使用 `perf`{.literal} 实用程序收集有关 RHEL 9
主机性能的特定虚拟化统计。要做到这一点：
::: orderedlist
1.  在主机上安装 [*perf*]{.emphasis} 软件包：
    ``` literallayout
    # dnf install perf
    ```
2.  使用 `perf kvm stat`{.literal} 命令之一显示虚拟化主机的 perf 统计：
    ::: itemizedlist
    -   对于虚拟机监控程序的实时监控，请使用
        `perf kvm stat live`{.literal} 命令。
    -   要在一段时间内记录虚拟机监控程序的 perf 数据，请使用
        `perf kvm stat record`{.literal}
        命令激活日志。在命令被取消或中断后，数据保存在
        `perf.data.guest`{.literal} 文件中，可以使用
        `perf kvm stat report`{.literal} 命令进行分析。
    :::
3.  分析 `VM-EXIT`{.literal} 事件及其分布的类型的 `perf`{.literal}
    输出。例如，`PAUSE_INSTRUCTION`{.literal}
    事件应该不经常发生，但在以下输出中，这个事件出现的频率较高，这代表主机
    CPU 没有很好地处理正在运行的
    vCPU。在这种情况下，请考虑关闭部分运行的虚拟机、从这些虚拟机中移除
    vCPU，或 [调整 vCPU
    的性能](#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#optimizing-virtual-machine-cpu-performance_optimizing-virtual-machine-performance-in-rhel "优化虚拟机 CPU 性能"){.link}。
    ``` literallayout
    # perf kvm stat report
    Analyze events for all VMs, all VCPUs:
                 VM-EXIT    Samples  Samples%     Time%    Min Time    Max Time         Avg time
      EXTERNAL_INTERRUPT     365634    31.59%    18.04%      0.42us  58780.59us    204.08us ( +-   0.99% )
               MSR_WRITE     293428    25.35%     0.13%      0.59us  17873.02us      1.80us ( +-   4.63% )
        PREEMPTION_TIMER     276162    23.86%     0.23%      0.51us  21396.03us      3.38us ( +-   5.19% )
       PAUSE_INSTRUCTION     189375    16.36%    11.75%      0.72us  29655.25us    256.77us ( +-   0.70% )
                     HLT      20440     1.77%    69.83%      0.62us  79319.41us  14134.56us ( +-   0.79% )
                  VMCALL      12426     1.07%     0.03%      1.02us   5416.25us      8.77us ( +-   7.36% )
           EXCEPTION_NMI         27     0.00%     0.00%      0.69us      1.34us      0.98us ( +-   3.50% )
           EPT_MISCONFIG          5     0.00%     0.00%      5.15us     10.85us      7.88us ( +-  11.67% )
    Total Samples:1157497, Total events handled time:413728274.66us.
    ```
    其他可以在 `perf kvm stat`{.literal} 输出中指出问题的事件类型包括：
    ::: itemizedlist
    -   `INSN_EMULATION`{.literal} - 建议子优化 [VM I/O
        配置](#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#optimizing-virtual-machine-i-o-performance_optimizing-virtual-machine-performance-in-rhel "优化虚拟机 I/O 性能"){.link}.
    :::
:::
有关使用 `perf`{.literal} 监控虚拟化性能的更多信息，请参阅
`perf-kvm`{.literal} man page。
::: title
**numastat**
:::
要查看系统的当前 NUMA 配置，您可以使用 `numastat`{.literal}
实用程序，该实用程序通过安装 [**numactl**]{.strong} 软件包来提供。
以下显示了一个有 4 个运行虚拟机的主机，各自从多个 NUMA
节点获取内存。这不是 vCPU
性能的最佳方案，并[保证调整](#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#configuring-numa-in-a-virtual-machine_optimizing-virtual-machine-cpu-performance "在虚拟机中配置 NUMA"){.link}：
``` literallayout
# numastat -c qemu-kvm
Per-node process memory usage (in MBs)
PID              Node 0 Node 1 Node 2 Node 3 Node 4 Node 5 Node 6 Node 7 Total
---------------  ------ ------ ------ ------ ------ ------ ------ ------ -----
51722 (qemu-kvm)     68     16    357   6936      2      3    147    598  8128
51747 (qemu-kvm)    245     11      5     18   5172   2532      1     92  8076
53736 (qemu-kvm)     62    432   1661    506   4851    136     22    445  8116
53773 (qemu-kvm)   1393      3      1      2     12      0      0   6702  8114
---------------  ------ ------ ------ ------ ------ ------ ------ ------ -----
Total              1769    463   2024   7462  10037   2672    169   7837 32434
```
相反，以下显示单个节点为每个虚拟机提供内存，这效率显著提高。
``` literallayout
# numastat -c qemu-kvm
Per-node process memory usage (in MBs)
PID              Node 0 Node 1 Node 2 Node 3 Node 4 Node 5 Node 6 Node 7 Total
---------------  ------ ------ ------ ------ ------ ------ ------ ------ -----
51747 (qemu-kvm)      0      0      7      0   8072      0      1      0  8080
53736 (qemu-kvm)      0      0      7      0      0      0   8113      0  8120
53773 (qemu-kvm)      0      0      7      0      0      0      1   8110  8118
59065 (qemu-kvm)      0      0   8050      0      0      0      0      0  8051
---------------  ------ ------ ------ ------ ------ ------ ------ ------ -----
Total                 0      0   8072      0   8072      0   8114   8110 32368
```
:::
::: section
::: titlepage
# []{#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#related-information-optimizing-virtual-machine-performance-in-rhel}其他资源 {.title}
:::
::: itemizedlist
-   优化 Windows 虚拟机
:::
:::
:::
[]{#securing-virtual-machines-in-rhel_configuring-and-managing-virtualization.html}
::: chapter
::: titlepage
# []{#securing-virtual-machines-in-rhel_configuring-and-managing-virtualization.html#securing-virtual-machines-in-rhel_configuring-and-managing-virtualization}第 18 章 保护虚拟机 {.title}
:::
作为使用虚拟机(VM)的 RHEL 9
系统管理员，确保您的虚拟机的安全性会尽可能地降低您的客户机和主机操作系统被恶意软件推断的风险。
本文档概述了在 RHEL 9 主机上 [保护虚拟机的机制 ，并提供提高虚拟机
安全性的方法列表](#securing-virtual-machines-in-rhel_configuring-and-managing-virtualization.html#how-security-works-in-virtual-machines_securing-virtual-machines-in-rhel "虚拟机中的安全性是如何工作的"){.link}。
::: section
::: titlepage
# []{#securing-virtual-machines-in-rhel_configuring-and-managing-virtualization.html#how-security-works-in-virtual-machines_securing-virtual-machines-in-rhel}虚拟机中的安全性是如何工作的 {.title}
:::
通过使用虚拟机，可在单一主机机器中托管多个操作系统。这些系统通过管理程序与主机连接，通常也通过虚拟网络连接。因此，每个虚拟机可用作使用恶意软件攻击主机的向量，主机可以用作攻击任何虚拟机的向量。
::: figure
[]{#securing-virtual-machines-in-rhel_configuring-and-managing-virtualization.html#idm139624608929408}
**图 18.1. 在虚拟化主机上潜在的恶意软件攻击向量**
::: figure-contents
::: mediaobject
![virt sec 成功攻击](images/virt-sec_successful-attack.png)
:::
:::
:::
因为虚拟机监控程序使用主机内核来管理虚拟机，所以在虚拟机操作系统中运行的服务通常会被利用来将恶意代码注入主机系统。但是，您可以使用主机和您的客体系统中的[安全功能](#securing-virtual-machines-in-rhel_configuring-and-managing-virtualization.html#best-practices-for-securing-virtual-machines_securing-virtual-machines-in-rhel "保护虚拟机的最佳实践"){.link}来保护您的系统不受此类安全隐患。
这些功能（如 SELinux 或 QEMU
沙盒）提供了各种措施，使恶意代码难以攻击管理程序并在您的主机和虚拟机之间进行传输。
::: figure
[]{#securing-virtual-machines-in-rhel_configuring-and-managing-virtualization.html#idm139624682521648}
**图 18.2. 防止对虚拟化主机进行恶意软件攻击**
::: figure-contents
::: mediaobject
![Virt sec 阻止安全攻击](images/virt-sec_prevented-attack.png)
:::
:::
:::
RHEL 9
为虚拟机安全性提供的许多功能始终处于活动状态，且不必启用或配置。详情请查看
["虚拟机安全性的自动功能"一节](#securing-virtual-machines-in-rhel_configuring-and-managing-virtualization.html#automatic-features-for-virtual-machine-security_securing-virtual-machines-in-rhel "虚拟机安全性的自动功能"){.xref}。
另外，您可以遵循各种最佳实践来最小化虚拟机和虚拟机监控程序的漏洞。更多信息请参阅
["保护虚拟机的最佳实践"一节](#securing-virtual-machines-in-rhel_configuring-and-managing-virtualization.html#best-practices-for-securing-virtual-machines_securing-virtual-machines-in-rhel "保护虚拟机的最佳实践"){.xref}。
:::
::: section
::: titlepage
# []{#securing-virtual-machines-in-rhel_configuring-and-managing-virtualization.html#best-practices-for-securing-virtual-machines_securing-virtual-machines-in-rhel}保护虚拟机的最佳实践 {.title}
:::
根据以下步骤，您的虚拟机被恶意代码利用，并用作攻击向量攻击您的主机系统的风险会大幅降低。
[**在客户端中：**]{.strong}
::: itemizedlist
-   象保护物理机器一样保护虚拟机的安全。增强安全性的具体方法取决于客户端操作系统。
    如果您的虚拟机正在运行 RHEL 9，请参阅 [保护 Red Hat Enterprise Linux
    9](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/){.link}
    的安全以改进客户端系统的安全性。
:::
[**在主机端：**]{.strong}
::: itemizedlist
-   当远程管理虚拟机时，请使用加密的工具（如
    [**SSH**]{.strong}）和网络协议（如
    [**SSL**]{.strong}）连接到虚拟机。
-   确定 SELinux 处于 Enforcing 模式：
    ``` literallayout
    # getenforce
    Enforcing
    ```
    如果 SELinux 被禁用或者处于 [*Permissive*]{.emphasis}
    模式，请参阅[使用
    SELinux](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/using_selinux/changing-selinux-states-and-modes_using-selinux#changing-to-enforcing-mode_changing-selinux-states-and-modes){.link}
    文档来激活 Enforcing 模式。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}