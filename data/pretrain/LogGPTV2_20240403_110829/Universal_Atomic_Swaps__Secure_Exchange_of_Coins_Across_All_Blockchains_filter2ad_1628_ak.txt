the multi-lock signature is unforgeable. Leakage resilient PRGs
(with arbitrary polynomial stretch) can be constructed from
S := {σ1, . . . , σn}
˜σ ← ΠDS.Sign( ˜sk , ˜m)
(cid:96)k ← mLock(n, S, ˜σ)
else
(st, (cid:96)k )
(cid:96)k ← Sim(n, PK, ˜pk , M, ˜m)
∗ ← AO
b
∗
b0 := (b = b
)
b1 := ( ˜m /∈ ˜Q)
return b0 ∧ b1
Fig. 11: Experiment for hiding of multi-lock signatures
signature σi and the hash Hi of the locking signature ˜σ.
Provided the hash of the locking signature Hi(˜σ) is a random
string with high entropy, we can see that intuitively the locked
signature σi is hidden inside (cid:96)i, similar to a one-time pad. The
release procedure is an xor of Hi(˜σ) and the values (cid:96)i in the
lock for i ∈ [n], similar to the decryption of a one-time pad.
mLock(n, S, ˜σ)
parse S := {σ1, . . . , σn}
parse M := {m1, . . . , mn}
for i ∈ [n] do
(cid:96)i := σi ⊕ H(˜σ, i)
(cid:96)k := ((cid:96)1, . . . , (cid:96)n)
return (cid:96)k
mRel((cid:96)k , M, ˜m, PK, ˜pk , ˜σ)
parse (cid:96)k := ((cid:96)1, . . . , (cid:96)n)
for i ∈ [n] do
σi ← (cid:96)i ⊕ Hi(˜σ)
if σi = ⊥ then
return ⊥
S := {σ1, . . . , σn}
return S
Fig. 12: Generic construction of Multi-lock Signatures
In the theorem below, we prove that our generic construction
satisﬁes unlockability (Deﬁnition 14) and hiding (Deﬁnition 15),
as deﬁned before. In favor of a simpler analysis, we model
each of the hash functions Hi as random oracles, that can be
instantiated as H(i||·) where H is a random oracle.
Theorem A.1 (Unlockability & Hiding): Let ΠDS =
(KGen, Sign, Vf) be a strongly unforgeable digital signature
scheme. Then ΠMLS := (mLock, mRel) is unlockable and
hiding in the random oracle model.
25
extremely lossy functions [42], which in turn can be built from
the subexponential hardness of the DDH problem.
2) Commitment Schemes: A commitment scheme is a digital
analogue of sealing a message inside an envelope. Formally,
it consists of the following tuple of efﬁcient algorithms: A
commitment generation algorithm Commit(1λ, m) that takes
as input a security parameter and a message m to commit
to, and outputs a commitment c and a corresponding opening
information d. The opening algorithm Open(c, d) takes as
input a commitment c and a opening information d and outputs
the committed message m or outputs a special symbol ⊥ if
d is not the valid opening information for the commitment
c. In addition to the standard binding and hiding properties
(who’s UC formalization can be found in [50]), we require
that the commitment scheme has unique openings. I.e. for all
commitments there exists a single valid message that causes
the Open algorithm to accept.
3) Veriﬁable Timed Signatures: Veriﬁable timed signatures
was proposed by Boneh and Naor [32] and subsequently studied
and improved by [33], [34]. Here, a committer creates a timed
commitment C of a signature σ on a message m under a
public key pk, such that the commitment C can be opened in
time T. The committer also generates a proof π to prove that
the commitment is well-formed. The veriﬁer can verify if the
commitment is well-formed and proceeds to force open the
commitment and learns the embedded signature σ in time T.
We recall the formal deﬁnition below.
Deﬁnition 16 (Veriﬁable Timed Signatures): A VTS for a
signature scheme ΠDS = (KGen, Sign, Vf) is a tuple of four
algorithms (Commit, Verify, Open, ForceOp) where:
(C, π) ← Commit(σ, T): the commit algorithm (randomized)
takes as input a signature σ (generated using Π.Sign(sk , m))
and a hiding time T and outputs a commitment C and a proof
π.
0/1 ← Verify(pk , m, C, π): the verify algorithm takes as input
a public key pk, a message m, a commitment C of hardness
T and a proof π and accepts the proof by outputting 1 if
and only if, the value σ embedded in c is a valid signature
on the message m with respect to the public key pk (i.e.,
ΠDS.Vf(pk , m, σ) = 1). Otherwise it outputs 0.
(σ, r) ← Open(C): the open phase where the committer takes
as input a commitment C and outputs the committed signature
σ and the randomness r used in generating C.
σ ← ForceOp(C): the force open algorithm takes as input the
commitment C and outputs a signature σ.
The security requirements for a VTS are that (soundness) the
user is convinced that, given C, the ForceOp algorithm will
produce the committed signature σ in time T and that (privacy)
all PRAM algorithms whose running time is at most t (where
t  ˜T, all PRAM algorithms A
whose running time is at most t < T, all messages m ∈ {0, 1}∗,
and all λ ∈ N it holds that
A(pk , m, C, π) = 1 :
A(pk , m, C, π) = 1 :
Pr
− Pr
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
(pk , sk ) ← KGen(1λ)
m ← A(pk )
σ ← Sign(sk , m)
(C, π) ← Commit(σ, T)
(pk , sk ) ← KGen(1λ)
(C, π) ← S(pk , T)
m ← A(pk )
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
≤ negl(λ)
4) 2-Party Protocols: We require 2 party computation
protocols for various functionalities as detailed below.
Joint Key Generation. We require a 2 party protocol Γ1
for creating a shared public key tpk whose secret key is
shared among parties U0 and U1. Speciﬁcally, the protocol
computes a commitment c of the secret key tsk (of the public
key tpk) and the opening information d of this commitment.
Finally, the protocol gives as output to U0 a share d0 of
the opening information d and a share tsk0 of the secret
key tsk. Analogously, U1 receives d1 and tsk1, such that
tsk = tsk0 ⊕ tsk1 and d = d0 ⊕ d1.
Joint Signature Generation. We require another interactive
2 party protocol Γ2 for jointly generating a signature σ on a
message m under a shared public key tpk. Each party inputs
their share of the secret key and the output of Γ2 is such that
party U0 receives nothing while U1 receives the signature σ.
Joint Lock Generation. Finally, we require the 2 party
protocol Γ3 for jointly computing mLock of ΠMLS that is run
among party P0 and P1. The protocol Γ3 takes as input n
secret key shares and opening information shares from each
party, commitments to the n secret keys, and n shared public
keys corresponding to the n locked signatures and secret key
shares of a shared public key corresponding to the locking
signature. The output of Γ3 is ordered in its output, giving the
lock (cid:96)k ﬁrst to P0 before giving the locking signature ˜σ to P1.
26
Looking ahead, this ordering is crucial since we want balance
security in our atomic swap protocol. If instead, ˜σ was output
to P1 ﬁrst, the party could use it to initiate the swap and abort
the computation in Γ3. This results in party P0 not learning
the lock (cid:96)k and therefore not able to call mRel and learn the
signatures {σ1, . . . , σn}, which means P0 cannot complete the
swap. We can instantiate these 2 party protocols with a general
purpose 2 party computation protocols [31].
i
i
to a joint address pk (01)
5) High level overview: The protocol as described in Fig-
for i ∈ [n]
ure 15, begins with party wanting to swap v(0)
for k ∈ [˜n] coins of P1. Just as in the adaptor
coins for v(1)
k
signature based construction Figure 5, the protocol proceeds
in three phases.
Swap Setup Phase. The coins to swap are frozen in joint
keys during this phase. Speciﬁcally, the parties call a Freeze
interface in Figure 13, where P0 sends the i-th coin v(0)
from
for i ∈ [n]. Analogously
its keys pk (0)
party P1 does the same by sending the k-th coin v(1)
from
k
for k ∈ [˜n]. At the end
its key pk (1)
of this phase, for every i ∈ [n], party P0 also learns VTS
k
commitments C (0)
i with timing hardness T0, which embeds
a valid signature on a redeem transaction tx (0)
rfnd,i that spends
all the coins from pk (01)
to some key of P0. This is to ensure
that coins v(0)
are not forever locked in the joint key pk (01)
.
Similarly, for every k ∈ [˜n], P1 also learn VTS commitments
C (1)
k with timing hardness T1 that embeds a signature which
lets P1 redeem the coins from pk (10)
to a joint keys pk (10)
to itself.
k
i
i
i
i
i
k
swp,i and tx (0)
swp,k where σ(0)
for the k-th coin v(1)
In this phase, both parties additionally learn commitments
to the joint secret keys corresponding to the joint public keys.
Each party receives a share of this secret key and a share of
the opening information of the corresponding commitment. We
require this to ensure that the parties input consistent values
during the swap lock phase, which is next.
Swap Lock Phase. During this phase, the parties run a 2 party
protocol Γ3 for k ∈ [˜n] times, each time for a n-to-1 swap.
That is, all the coins v(0)
k . The parties
generate appropriate swap transactions (tx (1)
swp,k for
i ∈ [n] and k ∈ [˜n]) and run Γ3 to generate the lock (cid:96)kk
and the signature σ(0)
swp,k is a valid signature on
from pk (10)
tx (0)
swp,k (transaction spending v(1)
to some key of
k
P0) under the public key pk (10)
. Internally, Γ3 checks if the
parties input the correct secret key shares by checking their
input with respect to the commitments that were generated in
the freeze coin phase. At the end of the phase, party P1 receives
.
((cid:96)k1, . . . , (cid:96)k˜n) while party P0 receives
Swap Complete Phase. During the swap complete phase,
party P0 initiates the swap by posting the transaction tx (0)
swp,k for k ∈ [˜n]. Party P1
(cid:110)
and the associated signature σ(0)
can complete the swap by using σ(0)
swp,k and (cid:96)kk to run mRel
σ(1)
swp,1, . . . , σ(1)
algorithm of ΠMLS, and learning
. With
these signatures, party P1 can complete the swap by posting
tx (1)
swp,i for i ∈ [n] on the blockchain.
swp,1, . . . , σ(0)
σ(0)
swp,i and σ(1)
(cid:111)
(cid:16)
(cid:17)
swp,n
swp,˜n
swp,k
k
k
Swap Time-out Phase. If party P0 does not post a swap
transaction with a valid signature before time T1 or if P1 does
not posts its swap transaction and a signature before time T0,
the other party by then force opens the VTS commitment of
the corresponding coin. Using the redeem transaction for that
coin, and the force opened signature, the party can redeem the
coins to itself during this time-out phase.
The security of our generic construction for atomic swap as
described in Figure 15 is stated in the following theorem. The
formal analysis of the theorem can be found in Appendix H5.
Theorem A.2: Let ΠMLS be a hiding and an unlockable multi-
lock signature scheme with respect to the signature scheme
ΠDS that is strongly unforgeable. Let (Commit, Open) be a
UC-secure commitment scheme and Γ1, Γ2, Γ3 be UC-secure
2PC for general functions. Let ΠVTS be a timed private and
sound veriﬁable timed signature scheme. Then, the atomic swap
protocol described in Figure 15 with access to (FB,Fsmt,Fclock)
UC-realizes the functionality Fswap.
Proof 7 (Proof of Theorem A.2): We now prove that our
protocol in Figure 15 securely UC-realizes the atomic swap
functionality from Figure 3.
We describe a simulator S that handles either of the parties P0
or P1 that are corrupted by a PPT A and simulates the real world
execution protocol while interacting with the ideal functionality
Fswap. We have a static corruption where the environment E
at the beginning of a session speciﬁes the corrupted parties
and the honest parties. The simulator S faithfully impersonates
the honest party. For operations exclusively among corrupted
users, the environment does not expect any interaction with
the simulator. Similarly, communications exclusively among
honest nodes happen through secure channels and therefore
the attacker does not gather any additional information other
than the fact that the communication took place. For simplicity,
we omit these operations in the description of our simulator.
The random oracle H is simulated by S via lazy-sampling.
The operations to be simulated for a n-to-˜n atomic swap are
described in the following.
In describing S’s operations for swapping, we begin by
describing a series of hybrid executions, where we begin with
a real world execution and gradually change the simulation
in these hybrids and then we argue about the proximity of
neighbouring experiments. Simulator S’s execution for the
payment operation is deﬁned as the ﬁnal hybrid’s execution.
Below we describe the hybrid executions ﬁrst and later argue
about their proximity. Note that the switching of hybrid
executions is performed over every session, but one at a time
and we only discuss here a single time for simplicity and
readability.
Hybrid H0: This is the same as the real execution of the
protocol in Figure 15.
Hybrid H1: This is the same as the above execution except
now the 2PC protocol Γ1 in the freezing coins of swap setup
phase to generate shared keys is simulated using S2pc,1 for the
corrupted parties. Rest of the execution is unchanged as in the
previous hybrid.
27
i
Input: First party U0 has inputs (pk , sk , v, T) and second party U1 has inputs (pk , v, T). Parties U0 and U1 do the following:
1) They run a 2PC protocol Γ1 that computes the following functionality:
• Compute (tpk, tsk) ← ΠDS.KGen(1λ) and (c, d) ← ΠC.Commit(cid:0)1λ, tsk(cid:1).