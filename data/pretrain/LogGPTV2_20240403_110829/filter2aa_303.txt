**File Infection Comparison: Windows and Linux**

**Date:** March 14, 2008

**Disclaimer:**
The author of this document is not responsible for any damage that may result from the misuse of the information provided. The objective of this paper is solely for educational and research purposes. It is intended to provide an understanding of virus mechanisms, not to promote or facilitate intentional harm or damage to computer systems.

**Author:** lclee_vx  
**Contact Email:** PI:EMAIL  
**Version:** 1.0

### 1.0 Introduction
This paper documents common file infection strategies used by virus writers over the years, focusing on the comparison between Portable Executable (PE) file infections on the Windows platform and Executable and Linking Format (ELF) file infections on the Linux platform. The goal is to provide an overview of the PE and ELF file formats, demonstrate simple file infection methods, and include source code examples for both platforms. The two primary file infection techniques covered are:
1. Appending a new section to the PE file – Windows Platform
2. Writing parasite code at the entry point and storing the original data at the end of the file – Linux Platform

**Note:**
This document is not perfect, and feedback on possible errors is appreciated. Please contact the author at the following:
- **Email:** PI:EMAIL
- **Group:** F-13 Labs
- **Personal Website:** [http://www.f13-labs.net](http://www.f13-labs.net)

### 2.0 Tools and References
Before starting to code a virus on either the Linux or Windows platform, you will need the following tools and references:

**Windows:**
1. TASM 5.0 – Win32 Assembly Language Compiler
2. API List (Win32 API Help File)
3. PE File Format – Recommended: Matt Pietrek's Document
4. Basic Knowledge of Win32 Assembly Language
5. Assembly IDE – RadASM version 2.2.0.2
6. Debugger – OllyDbg version 1.10
7. Platform – Windows XP

**Linux:**
1. NASM (Netwide Assembler) version 0.98.39 – Assembly Language Compiler for Linux
2. i386-PC-Linux System Call Reference
3. ELF File Format
4. Basic Knowledge of Linux Assembly Language
5. IDE/Editor – vi
6. Debugger – Data Display Debugger (DDD) version 3.3 and GNU Project Debugger (GDB)
7. Platform – Red Hat 8.0

### 3.0 Introduction to Portable Executable (PE) File Format
Win32 refers to the Application Programming Interface (API) available in Windows operating systems. It consists of system functions that are part of the operating system and can be called from a Win32 (32-bit) Windows application.

The i386 architecture has four privilege levels, also known as rings (Ring 0 to Ring 3), which control memory access and access to certain sensitive CPU instructions. In a 32-bit environment on the Windows platform, memory addresses are 32 bits (00000000h – FFFFFFFFh), and the memory layout is as follows:
- 00000000h – 3FFFFFFFh: Application code and data
- 40000000h – 7FFFFFFFh: Shared memory (system DLLs)
- 80000000h – BFFFFFFFh: Kernel
- C0000000h – FFFFFFFFh: Device Drivers

For more detailed information, refer to the Microsoft website. In this document, we will create a simple virus that infects PE files at the Ring 3 level (00000000h – 3FFFFFFFh) by adding a new section.

Understanding the structure of the PE header, section offsets, and PE format layout is crucial. PE stands for Portable Executable, the native file format for Win32 binary programs (exe, dll, sys, scr) and object files (bpl, dpl, cpl, ocx, acm, ax). The "Portable" in PE means that the file format is universal across Win32 platforms such as Windows 98, 2K, and NT. The PE loader on every Win32 platform recognizes and uses this file format, even when running on non-Intel CPUs.

PE files have different sections such as .text, .data, .rdata, .bss, and .reloc. The most important aspect of PE files is that executable code on disk does not require relocation for library calls; instead, the import address table (IAT) is used by the system loader. Additionally, PE files are not simply mapped into memory as a single memory-mapped file. The system loader examines the PE file and decides which portions to map into memory.

**Figure 1: PE File Layouts on Disk and in RAM**

[Insert Figure 1]

For more detailed information on the PE file format, refer to 'Overview of PE file format' by Iczelion.

**Table 1: Summary of Important Fields in PE Files**

| Field Name | Functionality |
|------------|----------------|
| Machine | Indicates the CPU type for which the file is intended. Viruses check this to ensure they only infect x86 platforms. |
| NumberOfSections | The number of sections in the file. This field is updated after the virus adds a new section. |
| Characteristics | Specifies the type of file (Exe or DLL). |
| SizeOfCode | Total size of all code sections. |
| AddressOfEntryPoint | The relative virtual address (RVA) where execution begins. Viruses change this to point to the virus code. |
| ImageBase | First byte of the image in memory. |
| SizeOfImage | The size of the image. |
| VirtualSize | Total size of the section in memory. |
| SizeOfRawData | Size of the section on disk. |
| Characteristic | Specifies the type of section. |
| Import Table | Used by viruses to look up the address of any API functions they need to call. |

### 4.0 Introduction to Executable and Linking Format (ELF)
The Executable and Linking Format (ELF) was originally developed by UNIX System Laboratories (USL) as part of the Application Binary Interface (ABI). The Tool Interface Standards (TIS) committee selected the evolving ELF standard as a portable object file format for 32-bit Intel Architecture environments across various operating systems. There are three types of object files:
1. Relocatable file – Holds code and data for linking with other object files.
2. Executable file – Holds a program suitable for execution.
3. Shared object file – Holds code and data suitable for linking in two contexts.

**Figure 2: ELF File Layout**

[Insert Figure 2]

An ELF header resides at the beginning of the file and provides a "road map" describing the file's organization. It includes information such as offsets to program header and section header tables, sizes, and the number of entries.

A section header table is used to locate and interpret all of the file's sections. The table is an array [e_shnum] of Elf32_Shdr structures, holding information about section sizes, locations, and virtual addresses.

A program header table describes segment information needed by the system to prepare the program for loading and execution. It holds information such as virtual addresses, file size, segment attributes, and more.

**Table 2: Summary of Important Fields in ELF Files**

| Field Name | Functionality |
|------------|----------------|
| e_ident | Holds the magic values 0x7f, 'ELF', and some flags. |
| e_entry | Virtual address of the entry point. |
| e_ehsize | Size of the ELF header. |
| e_phentsize | Size of one entry in the program header. |
| e_phnum | Number of entries in the program header. |
| p_vaddr | Virtual address in memory. |
| p_addr | Physical address. |
| p_memsz | Size of the segment in memory. |

### 5.0 Demonstration of PE/ELF File Infection
Let's review the file infection process on both Windows and Linux. Refer to the attachments for the source code of the PE/ELF infector.

**PE Infection:**
1. Calculate the delta offset – where the code will execute.
2. Obtain the address of Kernel32.dll.
3. Retrieve the following API functions:
   - LoadLibraryA
   - GetProcAddress
   - GetCurrentDirectoryA
   - SetCurrentDirectoryA
   - FindFirstFileA
   - FindNextFileA
   - FindClose
   - GetFileAttributesA
   - SetFileAttributesA
   - CreateFileA
   - GetFileSize
   - GlobalAlloc
   - ReadFile
   - SetFilePointer
   - WriteFile
   - GlobalFree
   - CloseHandle
   - ExitProcess
4. Scan the target file in the current directory.
5. Open the file to check if it is already infected.
6. If infected, exit and return to the host program.
7. If not infected, inject the virus by adding a new section.
8. Copy the virus body into the new section.
9. Exit and return control to the host program.

**ELF Infection:**
1. Calculate the delta offset – where the code will execute.
2. Control access to a region of memory, allowing system calls with int 80h.
3. Scan the target file in the current directory.
4. Open the file to check if it is already infected.
5. If infected, search for another file (maximum 3 files).
6. If not infected, overwrite the host code with viral code. Store the original host code at the end of the file.
7. Exit and return control to the host program.

For detailed demonstrations, please refer to the attached source code.

### 6.0 Conclusion
There are several reasons why Linux viruses are less prevalent:
1. For a Linux binary virus to infect ELF executables and spread, those executables must be writable by the user activating the virus. This is unlikely, as files/programs are often owned by power users like root, and the user is typically running from a non-privileged account.
2. Even if a Linux virus successfully infects a program owned by the user, its propagation is hindered by the limited access rights of the user account.
3. Most Linux applications and software are open source, making it difficult for a virus to hide. Binary-only products are rare.
4. These factors collectively reduce the reproduction rate of Linux viruses.

### References
1. Szor, Peter. "Attacks on Win32." Virus Bulletin Conference, October 1998, Munich/Germany, pages 57-84.
2. Inside Windows: An In-Depth Look into the Win32 Portable Executable File Format: [http://msdn.microsoft.com/msdnmag/issues/02/02/PE/default.aspx](http://msdn.microsoft.com/msdnmag/issues/02/02/PE/default.aspx)
3. Microsoft Portable Executable and Common Object File Format Specification: [http://www.microsoft.com/whdc/system/platform/firmware/PECOFF.mspx](http://www.microsoft.com/whdc/system/platform/firmware/PECOFF.mspx)
4. Cesare, Silvio. "Unix Viruses," 1999.
5. Belcebu, Billy. "Viruses under Linux," Xine – Issue #5, 1999.
6. @Computer Knowledge 2000. "Computer Knowledge Virus Tutorial," 2000.

### Credits
1. The Linux ELF infector is inspired by the Winux virus of Benny/29A.
2. Billy Belcebu, "Virus under Unix."
3. Contributions from izee, skyout, robinh00d, synge, and moaphie.