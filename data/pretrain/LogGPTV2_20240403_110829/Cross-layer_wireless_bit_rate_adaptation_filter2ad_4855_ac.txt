ure 5. In general, one can ﬁnd n levels of rate increase and decrease
thresholds αn
i for every rate i, using which the algorithm
jumps n bit rates at a time in the direction of the best bit rate. Our
current implementation does up to two rate jumps at a time.
i and βn
3.4 Behavior Over Time-Varying Channels
We now discuss why the algorithm described above works well
across a wide range of wireless propagation environments. There
are two sources of variation in the sender’s signal at the receiver:
1. Changes in the large-scale attenuation of the signal, often due
to changes in distance between the sender and receiver.
2. Multipath fading, the result of multiple copies of a signal being
time- or frequency-offset due to mobility.
The coherence time of the channel is approximately the duration of
time over which multipath fading effects are expected to stay the
Figure 5: BER at the QPSK 3/4 rate vs. BER at other bit rates
from Table 2, using data from the walking trace in Table 4.
3.3 The SoftRate Algorithm
The design of SoftRate centers on three main mechanisms.
1. It uses a heuristic to predict channel BER at a few other bit rates
using the BER estimate at one bit rate.
2. Using the above BER prediction heuristic, it computes optimal
thresholds αi and βi for each rate Ri such that, when the BER
at rate Ri is in the range (αi, βi), then Ri is the optimal trans-
mit bit rate. The computation of the thresholds depends on the
error recovery mechanism employed by the link layer.
3. Given the interference-free BER estimate from the receiver and
optimal thresholds at each bit rate, the SoftRate sender adjusts
its bit rate in the direction of the optimal rate.
Note that SoftRate works when conditions experienced on the up-
coming transmission are similar to those on the previous transmis-
sion. A wide variety of situations satisfy this criterion (§3.4).
BER prediction. If one knew the detailed relationship between
the BER and SNR for each bit rate, then the problem of predicting
BER at multiple bit rates using the BER at the current rate would be
an easy one. One could simply look up the SNR corresponding to
the BER for the current bit rate, and then consult the various SNR-
BER curves to determine the BER at each of the other rates. Un-
fortunately, because the SNR-BER curves depend heavily on both
the characteristics of the radio and the environment (see §5.2), this
method is unlikely to work robustly.
Instead of relying on SNR-BER relationships, SoftRate uses the
two observations below to predict BER.
1. At any SNR, the BER is a monotonically increasing function of
the bit rate (this observation is well-known and used by many
other protocols).
2. Within the BER range that a bit rate is usable (i.e., BER below
10−2), its BER at a given SNR is at least a factor of 10 higher
than that of the next-lower bit rate.
The second observation is general enough to hold in practice, in-
dependent of radio and environment characteristics. To see why,
note that system designers avoid redundancy in bit rates and offer
a set of rates that have at least an order of magnitude difference in
error performance at a given SNR. And even if the second obser-
vation does not hold in the system, the rate adaptation algorithm
can always pick a subset of rates with the above property and use
those rates alone for rate adaptation. For example, Figure 5 shows
a plot of the measured BER at the QPSK 3/4 rate plotted against the
measured BER at two of the higher and two of the lower bit rates;
10-910-810-710-610-510-410-310-210-110010-910-810-710-610-510-410-310-210-1100BER at other bit-ratesBER at QPSK 3/4BPSK 1/2QPSK 1/2QAM16 1/2QAM16 3/47Modulation Code Rate
802.11 Rate
Implemented?
BPSK
BPSK
QPSK
QPSK
QAM16
QAM16
QAM64
QAM64
1/2
3/4
1/2
3/4
1/2
3/4
1/2
2/3
6 Mbps
9 Mbps
12 Mbps
18 Mbps
24 Mbps
36 Mbps
48 Mbps
54 Mbps
Yes
Yes
Yes
Yes
Yes
Yes
No
No
Table 2: Combinations of modulations and coding rates used in
802.11, the raw throughput achieved over a 20 MHz channel,
and their implementation status in our prototype.
same. In a slow fading channel, which occurs at walking speeds
(or even when the nodes are static, but objects in the environment
aren’t), coherence times are tens of milliseconds long. Hence, fad-
ing and attenuation happen at a timescale corresponding to mul-
tiple frame transmissions. In such a channel, the sender’s signal
fades sharply once every 10-100 milliseconds, typically resulting
in a burst of frame losses at higher bit rates. In response to such
fading-induced changes, SoftRate lowers the bit rate quickly; it
also adapts “upwards” quickly, soon after conditions become better.
This adaptation also handles changes in channel attenuation.
Fast fading channels occur at vehicular speeds, where the chan-
nel coherence time is between 10 and a few hundred microseconds.
This duration is shorter than the transmission time of a frame. How-
ever, even in this environment, the BER measured by SoftPHY
hints accurately reﬂects the true BER of the channel, as we show
in §5.2. As a result, SoftRate converges to the best transmit bit rate
that maximizes throughput, and adapts this best bit rate in response
to changes in large-scale attenuation.
Bit rate adaptation is a very hard problem when the coherence
time of the channel is in between the two extremes of fast and slow
fading, say, equal to two or three frame durations [23]. The way to
adapt bit rate in such cases using SoftRate is to increase the packet
size to turn it into the fast fading case, or decrease the packet size
to turn it into the slow fading case (provided that the packet size is
big enough to make this feasible).
4.
IMPLEMENTATION
Our 802.11a/g-like physical layer builds on the OFDM (Orthog-
onal Frequency Division Multiplexing) GNU Radio software-de-
ﬁned radio codebase and the USRP hardware. At the transmit-
ter, incoming data passes through a standard rate-1/2 convolutional
encoder, after which it is punctured at varying code rates. The
punctured bits are then mapped to OFDM subcarriers, using either
BPSK, QPSK, QAM16, or QAM64 modulation. The combinations
of modulations and coding rates used in 802.11a/g and the corre-
sponding raw 802.11 throughput on a 20 MHz channel are shown
in Table 2. The decoding process at the receiver ﬁrst demodulates
the received data, and then decodes it using the soft output BCJR
decoder [2], which outputs LLRs that are used to compute the Soft-
PHY hints (§3.1). Our prototype also computes an SNR estimate
for each received frame using the Schmidl-Cox method [22]. Our
soft output decoder adds negligible overhead in terms of both re-
ceiver complexity and per-packet processing cost.
Interference detector. While mapping coded data onto subcar-
riers in one OFDM symbol, the transmitter interleaves the data onto
non-adjacent (in frequency) OFDM subcarriers. This mitigates bit
errors from frequency-selective fading, which causes adjacent sub-
carriers to fade simultaneously. A collision, however, still causes
i=1
1
Nbps
(4)
pj =
interference on all subcarriers. We therefore detect collisions as
sudden jumps in BER between adjoining OFDM symbols.
Suppose we receive a frame of S OFDM symbols, each symbol
containing Nbps bits, for a total of N = Nbps · S bits, with corre-
sponding SoftPHY hints sk, k = 1 . . . N. First, we compute pk,
k = 1 . . . N from the sk (§3.1). Then, we average pk, Nbps bits at
a time, to obtain S average BERs pj, one for each symbol j:
NbpsX
˛˛. Note that this algorithm detects
the difference dj =˛˛pj − pj−1
Finally, our collision detection algorithm is a simple threshold on
pi+(j−1)·Nbps .
interference that starts after the receiver has synchronized with the
signal of interest from a sender. We have not yet implemented the
postamble detection logic that will enable identiﬁcation of interfer-
ence that starts before the signal of interest.
If the PHY uses time interleaving of bits in a frame, then the bit
errors that occur due to interference will be dispersed all over the
frame. In such cases, interference detection must be performed be-
fore the deinterleaving to capture the temporal patterns of bit con-
ﬁdences. If the deinterleaving occurs before decoding (i.e., before
SoftPHY hints are generated), then the interference detection al-
gorithm can work on the inputs to the decoder as well. We note
that if the PHY uses some form of interference cancellation [9, 7],
then the interference detection strategy remains the same, though
the fraction of time interference-related losses occur may be lower.
Fading channel simulator. We implement a Rayleigh fading
channel simulator in GNU Radio using a Jakes simulator model
[26]. We use the channel simulator to connect the software radio
sender and receiver blocks in a local loopback conﬁguration to test
our implementation in a variety of channel conditions.
4.1 SoftRate Implementation
The high latency incurred in both procuring RF samples from
the USRP front-end and sending link-layer BER feedback makes
it impractical to implement and evaluate SoftRate using software
radios. We therefore simulate SoftRate and other rate adaptation
algorithms in the ns-3 network simulator. However, to keep the
simulations realistic and to obtain SoftPHY information on recep-
tions, we replace the ns-3 physical layer models with packet traces
collected from our live software radio experiments (§6.1).
We modify the ns-3 802.11 acknowledgment frame structure to
include a 32-bit estimate of the received frame’s interference-free
bit error rate. We also simulate postamble detection; when this
option is enabled, the receiver sends an acknowledgment even if
the preamble is not detected but the postamble is interference-free.
5. SOFTPHY EVALUATION
SoftRate relies on the following properties of SoftPHY hints:
1. SoftPHY hints can accurately estimate channel BER across a
wide variety of wireless propagation channels.
2. SoftPHY hints can be used to distinguish interference losses
from fading losses.
In this section, we experimentally evaluate the SoftPHY hints
we introduced in §3.1 to verify the above two points, in order to
establish their utility in the SoftRate algorithm.
5.1 Method
We present a combination of live experiments and controlled
simulations using our OFDM prototype. We subsequently evaluate
SoftPHY hints and SoftRate using traces from these experiments.
8Experiment
Static
Used in
§5.2
Method
Six static sender-receiver pairs operating in the long range mode were used. Each sender transmitted
100 960-byte packets each at 20 different sender transmit powers and 6 different bit rates.
Walking
Simulation
Static
(interference)
Static
(short range)
§5.2, §6.2 One sender transmitting in short range mode was moved at walking speed away from the receiver in
10 experimental runs of 10 seconds each. A total of 4,000 packets per bit rate were transmitted.
§5.3
§5.2, §6.3 A sender and receiver were connected by our GNU Radio fading channel simulator. The Doppler
spread of the channel was varied from 40 Hz to 4 KHz. One hundred packets each were transmitted
at 20 different transmit powers of the sender at each of the Doppler spread values.
A sender and interferer transmitted packets simultaneously to a receiver in the long range mode. A
random jitter of around one packet-time was added between both transmissions. One hundred packets
each were transmitted at ﬁve different interferer transmit powers and six different bit rates.
Single static sender transmitted packets in short range mode in 10 experimental runs of 10 seconds
each. A total of 4,000 packets were transmitted at each of the bit rates across all the runs.
§6.4
Table 4: A summary of the experiments used to evaluate SoftPHY (§5) and SoftRate (§6).
48) because a higher number of subcarriers enables better physical
layer synchronization and channel estimation.
We run a variety of live experiments in static and mobile con-
ﬁgurations on the testbed shown in Figure 6. We also run con-
trolled simulation experiments with our fading channel simulator
by varying the “Doppler spread” parameter of the fading channel
from 40 Hz to 4 KHz. This variation corresponds to channel co-