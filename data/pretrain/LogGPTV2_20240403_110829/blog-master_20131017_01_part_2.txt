#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_LWLOCK_WAIT_START_ENABLED() __builtin_expect (lwlock__wait__start_semaphore, 0)  
#define postgresql_lwlock__wait__start_semaphore lwlock__wait__start_semaphore  
#else  
#define TRACE_POSTGRESQL_LWLOCK_WAIT_START_ENABLED() __builtin_expect (postgresql_lwlock__wait__start_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_lwlock__wait__start_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_LWLOCK_WAIT_START(arg1,arg2) \  
DTRACE_PROBE2(postgresql,lwlock__wait__start,arg1,arg2)  
/* TRACE_POSTGRESQL_LWLOCK_WAIT_DONE ( int, int) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_LWLOCK_WAIT_DONE_ENABLED() __builtin_expect (lwlock__wait__done_semaphore, 0)  
#define postgresql_lwlock__wait__done_semaphore lwlock__wait__done_semaphore  
#else  
#define TRACE_POSTGRESQL_LWLOCK_WAIT_DONE_ENABLED() __builtin_expect (postgresql_lwlock__wait__done_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_lwlock__wait__done_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_LWLOCK_WAIT_DONE(arg1,arg2) \  
DTRACE_PROBE2(postgresql,lwlock__wait__done,arg1,arg2)  
/* TRACE_POSTGRESQL_LWLOCK_CONDACQUIRE ( int, int) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_LWLOCK_CONDACQUIRE_ENABLED() __builtin_expect (lwlock__condacquire_semaphore, 0)  
#define postgresql_lwlock__condacquire_semaphore lwlock__condacquire_semaphore  
#else  
#define TRACE_POSTGRESQL_LWLOCK_CONDACQUIRE_ENABLED() __builtin_expect (postgresql_lwlock__condacquire_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_lwlock__condacquire_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_LWLOCK_CONDACQUIRE(arg1,arg2) \  
DTRACE_PROBE2(postgresql,lwlock__condacquire,arg1,arg2)  
/* TRACE_POSTGRESQL_LWLOCK_CONDACQUIRE_FAIL ( int, int) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_LWLOCK_CONDACQUIRE_FAIL_ENABLED() __builtin_expect (lwlock__condacquire__fail_semaphore, 0)  
#define postgresql_lwlock__condacquire__fail_semaphore lwlock__condacquire__fail_semaphore  
#else  
#define TRACE_POSTGRESQL_LWLOCK_CONDACQUIRE_FAIL_ENABLED() __builtin_expect (postgresql_lwlock__condacquire__fail_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_lwlock__condacquire__fail_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_LWLOCK_CONDACQUIRE_FAIL(arg1,arg2) \  
DTRACE_PROBE2(postgresql,lwlock__condacquire__fail,arg1,arg2)  
/* TRACE_POSTGRESQL_LWLOCK_WAIT_UNTIL_FREE ( int, int) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_LWLOCK_WAIT_UNTIL_FREE_ENABLED() __builtin_expect (lwlock__wait__until__free_semaphore, 0)  
#define postgresql_lwlock__wait__until__free_semaphore lwlock__wait__until__free_semaphore  
#else  
#define TRACE_POSTGRESQL_LWLOCK_WAIT_UNTIL_FREE_ENABLED() __builtin_expect (postgresql_lwlock__wait__until__free_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_lwlock__wait__until__free_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_LWLOCK_WAIT_UNTIL_FREE(arg1,arg2) \  
DTRACE_PROBE2(postgresql,lwlock__wait__until__free,arg1,arg2)  
/* TRACE_POSTGRESQL_LWLOCK_WAIT_UNTIL_FREE_FAIL ( int, int) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_LWLOCK_WAIT_UNTIL_FREE_FAIL_ENABLED() __builtin_expect (lwlock__wait__until__free__fail_semaphore, 0)  
#define postgresql_lwlock__wait__until__free__fail_semaphore lwlock__wait__until__free__fail_semaphore  
#else  
#define TRACE_POSTGRESQL_LWLOCK_WAIT_UNTIL_FREE_FAIL_ENABLED() __builtin_expect (postgresql_lwlock__wait__until__free__fail_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_lwlock__wait__until__free__fail_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_LWLOCK_WAIT_UNTIL_FREE_FAIL(arg1,arg2) \  
DTRACE_PROBE2(postgresql,lwlock__wait__until__free__fail,arg1,arg2)  
/* TRACE_POSTGRESQL_LOCK_WAIT_START ( unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, int) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_LOCK_WAIT_START_ENABLED() __builtin_expect (lock__wait__start_semaphore, 0)  
#define postgresql_lock__wait__start_semaphore lock__wait__start_semaphore  
#else  
#define TRACE_POSTGRESQL_LOCK_WAIT_START_ENABLED() __builtin_expect (postgresql_lock__wait__start_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_lock__wait__start_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_LOCK_WAIT_START(arg1,arg2,arg3,arg4,arg5,arg6) \  
DTRACE_PROBE6(postgresql,lock__wait__start,arg1,arg2,arg3,arg4,arg5,arg6)  
/* TRACE_POSTGRESQL_LOCK_WAIT_DONE ( unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, int) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_LOCK_WAIT_DONE_ENABLED() __builtin_expect (lock__wait__done_semaphore, 0)  
#define postgresql_lock__wait__done_semaphore lock__wait__done_semaphore  
#else  
#define TRACE_POSTGRESQL_LOCK_WAIT_DONE_ENABLED() __builtin_expect (postgresql_lock__wait__done_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_lock__wait__done_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_LOCK_WAIT_DONE(arg1,arg2,arg3,arg4,arg5,arg6) \  
DTRACE_PROBE6(postgresql,lock__wait__done,arg1,arg2,arg3,arg4,arg5,arg6)  
/* TRACE_POSTGRESQL_DEADLOCK_FOUND () */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_DEADLOCK_FOUND_ENABLED() __builtin_expect (deadlock__found_semaphore, 0)  
#define postgresql_deadlock__found_semaphore deadlock__found_semaphore  
#else  
#define TRACE_POSTGRESQL_DEADLOCK_FOUND_ENABLED() __builtin_expect (postgresql_deadlock__found_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_deadlock__found_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_DEADLOCK_FOUND() \  
DTRACE_PROBE(postgresql,deadlock__found)  
```  
4\. 探针在源码中的信息:   
轻量锁  
src/backend/storage/lmgr/lwlock.c  
```  
/*  
 * LWLockAcquire - acquire a lightweight lock in the specified mode  
 *  
 * If the lock is not available, sleep until it is.  
 *  
 * Side effect: cancel/die interrupts are held off until lock release.  
 */  
void  
LWLockAcquire(LWLockId lockid, LWLockMode mode)  
...  
                TRACE_POSTGRESQL_LWLOCK_WAIT_START(lockid, mode);  
                for (;;)  
                {  
                        /* "false" means cannot accept cancel/die interrupt here. */  
                        PGSemaphoreLock(&proc->sem, false);  
                        if (!proc->lwWaiting)  
                                break;  
                        extraWaits++;  
                }  
                TRACE_POSTGRESQL_LWLOCK_WAIT_DONE(lockid, mode);  
...  
        /* We are done updating shared state of the lock itself. */  
        SpinLockRelease(&lock->mutex);  
        TRACE_POSTGRESQL_LWLOCK_ACQUIRE(lockid, mode);  
...  
/*  
 * LWLockConditionalAcquire - acquire a lightweight lock in the specified mode  
 *  
 * If the lock is not available, return FALSE with no side-effects.  
 *  
 * If successful, cancel/die interrupts are held off until lock release.  
 */  
bool  
LWLockConditionalAcquire(LWLockId lockid, LWLockMode mode)  
{  
...  
        /* We are done updating shared state of the lock itself. */  
        SpinLockRelease(&lock->mutex);  
        if (mustwait)  
        {  
                /* Failed to get lock, so release interrupt holdoff */  
                RESUME_INTERRUPTS();  
                LOG_LWDEBUG("LWLockConditionalAcquire", lockid, "failed");  
                TRACE_POSTGRESQL_LWLOCK_CONDACQUIRE_FAIL(lockid, mode);  
        }  
        else  
        {  
                /* Add lock to list of locks held by this backend */  
                held_lwlocks[num_held_lwlocks++] = lockid;  
                TRACE_POSTGRESQL_LWLOCK_CONDACQUIRE(lockid, mode);  
        }  
...  
/*  
 * LWLockAcquireOrWait - Acquire lock, or wait until it's free  
 *  
 * The semantics of this function are a bit funky.      If the lock is currently  
 * free, it is acquired in the given mode, and the function returns true.  If  
 * the lock isn't immediately free, the function waits until it is released  
 * and returns false, but does not acquire the lock.  
 *  
 * This is currently used for WALWriteLock: when a backend flushes the WAL,  
 * holding WALWriteLock, it can flush the commit records of many other  
 * backends as a side-effect.  Those other backends need to wait until the  
 * flush finishes, but don't need to acquire the lock anymore.  They can just  
 * wake up, observe that their records have already been flushed, and return.  
 */  
bool  
LWLockAcquireOrWait(LWLockId lockid, LWLockMode mode)  
{  
...  
                TRACE_POSTGRESQL_LWLOCK_WAIT_START(lockid, mode);  
                for (;;)  
                {  
                        /* "false" means cannot accept cancel/die interrupt here. */  
                        PGSemaphoreLock(&proc->sem, false);  
                        if (!proc->lwWaiting)  
                                break;  
                        extraWaits++;  
                }  
                TRACE_POSTGRESQL_LWLOCK_WAIT_DONE(lockid, mode);  
...  
        /*  
         * Fix the process wait semaphore's count for any absorbed wakeups.  
         */  
        while (extraWaits-- > 0)  
                PGSemaphoreUnlock(&proc->sem);  
        if (mustwait)  
        {  
                /* Failed to get lock, so release interrupt holdoff */  
                RESUME_INTERRUPTS();  
                LOG_LWDEBUG("LWLockAcquireOrWait", lockid, "failed");  
                TRACE_POSTGRESQL_LWLOCK_WAIT_UNTIL_FREE_FAIL(lockid, mode);  
        }  
        else  
        {  
                /* Add lock to list of locks held by this backend */  
                held_lwlocks[num_held_lwlocks++] = lockid;  
                TRACE_POSTGRESQL_LWLOCK_WAIT_UNTIL_FREE(lockid, mode);  
        }  
...  
/*  
 * LWLockRelease - release a previously acquired lock  
 */  
void  
LWLockRelease(LWLockId lockid)  
{  
...  
        /* We are done updating shared state of the lock itself. */  
        SpinLockRelease(&lock->mutex);  
        TRACE_POSTGRESQL_LWLOCK_RELEASE(lockid);  
```  
重量锁  
src/backend/storage/lmgr/lock.c  
```  
/*  
 * LockAcquireExtended - allows us to specify additional options  
 *  
 * reportMemoryError specifies whether a lock request that fills the  
 * lock table should generate an ERROR or not. This allows a priority  
 * caller to note that the lock table is full and then begin taking  
 * extreme action to reduce the number of other lock holders before  
 * retrying the action.  
 */  
LockAcquireResult  
LockAcquireExtended(const LOCKTAG *locktag,  
                                        LOCKMODE lockmode,  
                                        bool sessionLock,  
                                        bool dontWait,  
                                        bool reportMemoryError)  
{  
...  
                /*  
                 * Sleep till someone wakes me up.  
                 */  
                TRACE_POSTGRESQL_LOCK_WAIT_START(locktag->locktag_field1,  
                                                                                 locktag->locktag_field2,  
                                                                                 locktag->locktag_field3,  
                                                                                 locktag->locktag_field4,  
                                                                                 locktag->locktag_type,  
                                                                                 lockmode);  
                WaitOnLock(locallock, owner);  
                TRACE_POSTGRESQL_LOCK_WAIT_DONE(locktag->locktag_field1,  
                                                                                locktag->locktag_field2,  
                                                                                locktag->locktag_field3,  
                                                                                locktag->locktag_field4,  
                                                                                locktag->locktag_type,  
                                                                                lockmode);  
...  
```  
死锁  
src/backend/storage/lmgr/deadlock.c  
```  
/*  
 * DeadLockCheck -- Checks for deadlocks for a given process  
 *  
 * This code looks for deadlocks involving the given process.  If any  
 * are found, it tries to rearrange lock wait queues to resolve the  
 * deadlock.  If resolution is impossible, return DS_HARD_DEADLOCK ---  
 * the caller is then expected to abort the given proc's transaction.  
 *  
 * Caller must already have locked all partitions of the lock tables.  
 *  
 * On failure, deadlock details are recorded in deadlockDetails[] for  
 * subsequent printing by DeadLockReport().  That activity is separate  
 * because (a) we don't want to do it while holding all those LWLocks,  
 * and (b) we are typically invoked inside a signal handler.  
 */  
DeadLockState  
DeadLockCheck(PGPROC *proc)  
{  
...  
        /* Search for deadlocks and possible fixes */  
        if (DeadLockCheckRecurse(proc))  
        {  
                /*  
                 * Call FindLockCycle one more time, to record the correct  
                 * deadlockDetails[] for the basic state with no rearrangements.  
                 */  
                int                     nSoftEdges;  
                TRACE_POSTGRESQL_DEADLOCK_FOUND();  
                nWaitOrders = 0;  
                if (!FindLockCycle(proc, possibleConstraints, &nSoftEdges))  
                        elog(FATAL, "deadlock seems to have disappeared");  
                return DS_HARD_DEADLOCK;        /* cannot find a non-deadlocked state */  
        }  
```  
5\. LWLockID 类型定义  
src/include/storage/lwlock.h  
```  
/*  
 * We have a number of predefined LWLocks, plus a bunch of LWLocks that are  
 * dynamically assigned (e.g., for shared buffers).  The LWLock structures  
 * live in shared memory (since they contain shared data) and are identified  
 * by values of this enumerated type.  We abuse the notion of an enum somewhat  
 * by allowing values not listed in the enum declaration to be assigned.  
 * The extra value MaxDynamicLWLock is there to keep the compiler from  
 * deciding that the enum can be represented as char or short ...  
 *  
 * If you remove a lock, please replace it with a placeholder. This retains  
 * the lock numbering, which is helpful for DTrace and other external  
 * debugging scripts.  
 */  
typedef enum LWLockId  
{  
        BufFreelistLock,  
        ShmemIndexLock,  
        OidGenLock,  
        XidGenLock,  
        ProcArrayLock,  