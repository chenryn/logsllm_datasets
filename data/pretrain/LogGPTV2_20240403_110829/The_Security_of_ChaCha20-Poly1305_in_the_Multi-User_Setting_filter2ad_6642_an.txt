As 𝜎𝑒 ≤ 2 𝑛−𝑘
2
, we obtain
2 · 𝜎𝑒(𝜎𝑒 − 1)
2𝑛−𝑘
𝑖
2𝑛−𝑘 = 1 − 1
(cid:21)
.
(27)
Pr
A𝐺Ideal-muAE
ChaCha20-Poly1305[𝜋] ⇒ 1
≥ 1
2 .
Recall that in the real world, 𝑊𝑗 = [𝜋(𝑍∥𝐾∥𝑖∥𝑁)]𝐾-. Thus, if
𝑊𝑗 ≠ 𝑊𝑗′, then the two corresponding calls to the underlying ideal
permutation are distinct. As 𝑊𝑗 ≠ 𝑊𝑗′ for all 𝑗 ≠ 𝑗′, the adversary
outputs 1 only if it makes 𝜎𝑒 distinct calls to the underlying ideal
permutation that doesn’t collide on the first 𝑛 − 𝑘 bit with the
previous queries,
(cid:20)
(cid:18)
𝜎𝑒−1
𝑖=0
𝜎𝑒−1∑︁
𝑖=0
(cid:19)
(cid:20)
Pr
=
A𝐺Real-muAE
ChaCha20-Poly1305[𝜋] ⇒ 1
=
(cid:32) 2𝑛 − 𝑖 · 2𝑘
(cid:33)
2𝑛 − 𝑖
𝜎𝑒−1
𝑖=0
=
= Pr
A𝐺Ideal-muAE
ChaCha20-Poly1305[𝜋] ⇒ 1
𝑖=0
Moreover, as (2𝑛 − 𝑖) · (2𝑛 + 𝑖) ≤ 22𝑛, then
(cid:19)
(cid:21)
(cid:18)
𝑖=0
1 − 𝑖
2𝑛−𝑘
·
𝜎𝑒−1
(cid:32)
(cid:33)
1 − 𝑖(2𝑘 − 1)
(cid:18) 2𝑛
(cid:19)
𝜎𝑒−1
2𝑛 − 𝑖
(cid:18) 2𝑛
(cid:19)
𝜎𝑒−1
(cid:19)
(cid:18)
𝜎𝑒−1
2𝑛 − 𝑖
(cid:19)
𝑖=0
·
.
1 + 𝑖
2𝑛
.
=
𝑖=0
2𝑛 − 𝑖
𝑖=0
(cid:20)
𝜎𝑒−1
(cid:20)
𝜎𝑒−1
𝜎𝑒−1
(cid:20)
(cid:20)
𝑖=0
Pr
(cid:21)
(cid:18) 2𝑛 + 𝑖
𝜎𝑒−1∑︁
(cid:21)
2𝑛
𝑖
(cid:19)
(cid:19)
(cid:18) 2𝑛
(cid:18)
2𝑛 − 𝑖
1 + 𝑖
2𝑛
𝜎𝑒−1
𝑖=0
≥
≥ 1 +
Using Weierstrass product inequality,
𝑖=0
A𝐺Real-muAE
𝑖=0
ChaCha20-Poly1305[𝜋] ⇒ 1
Thus, Pr
A𝐺Ideal-muAE
ChaCha20-Poly1305[𝜋] ⇒ 1
.
2𝑛 = 1 + 𝜎𝑒(𝜎𝑒 − 1)
2𝑛+1
(cid:19)
(cid:18)
(cid:21)
is greater or equal to
1 + 𝜎𝑒(𝜎𝑒 − 1)
·
2𝑛+1
.
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2002hence 2−𝑏𝑑. Throwing up to 𝑞 balls means there are at most(cid:0) 𝑞
(cid:1)
𝑑+1
sets of 𝑑 + 1 balls. So, by the union bound,
Pr(cid:104)B sets bad in 𝐺Ideal-muAE
(cid:105) ≤
𝛱 [𝜋]
(cid:19)
(cid:18) 𝑞
𝑑 + 1
We can now apply Case 4 of Lemma A.1 with 𝑚 = 𝑑+1, 𝑄 = 𝑞, 𝐵 =
2−𝑏,(cid:101)𝑚 = 𝛿𝑏, and 𝑡 = 2, to upper-bound the bad-event probability
that any bin contains 𝑚 = 𝑑 + 1 or more balls at 𝑡−(cid:101)𝑚 = 2−𝛿𝑏 as
claimed. For 𝑞 ≤ 2𝑏 · (𝛿+1)·𝑏
· 2−𝑏𝑑 .
(cid:24)
3
, we obtain
(𝛿 + 1) · 𝑏
max(1, 𝑏 − log2(𝑞))
(cid:25)
− 1. □
𝑑 = 𝑚 − 1 =
(cid:21)
Therefore,
ChaCha20-Poly1305[𝜋](A) ≥
muAE
𝜎𝑒(𝜎𝑒 − 1)
Adv
ChaCha20-Poly1305[𝜋] ⇒ 1
The final bound is obtained by applying (27) to this inequality.
A𝐺Ideal-muAE
2𝑛+1
· Pr
.
D PROOF FOR NONCE RANDOMIZATION (XN
TRANSFORM)
The proof follows the same strategy as for [15, Theorem 4.2], but
then applies our generalized bound from Lemma A.1. The 𝑑-repeat-
ing reduction B samples nonce randomizer values 𝐽𝑖 for each user 𝑖,
used to derive the effective nonce 𝑁∗ = 𝑁 ⊕ 𝐽 in encryption and
verification queries forwarded to its multi-user AE game. It keeps a
counter for any used nonce value 𝑁∗ in encryption queries, count-
ing the number of users for which B queried this effective nonce
to its encryption oracles. When any such counter reaches 𝑑 + 1, B
sets a bad flag bad, stops immediately, and outputs 1 (ensuring that
B is 𝑑-repeating4); otherwise, B relays the bit output by A.
In the real world,
(cid:20)
(cid:20)
(cid:20)
(cid:21)
Pr
B𝐺Real-muAE
𝛱 [𝜋] ⇒ 1
≥ Pr
A𝐺Real-muAE
𝛱∗ [𝜋] ⇒ 1
,
(cid:21)
Pr
(cid:21)
(cid:20)
muAE
𝛱 [𝜋]
𝛱 [𝜋]
(cid:105),
A𝐺Ideal-muAE
B𝐺Ideal-muAE
𝛱 [𝜋] ⇒ 1
𝛱∗ [𝜋] ⇒ 1
as B either outputs 1 or repeats A’s output. Furthermore, B simu-
lates the ideal world for A perfectly until the bad flag is set, by the
identical-until-bad lemma [3],
≤ Pr
(cid:20)
(cid:21)
+ Pr(cid:104)B sets bad in 𝐺Ideal-muAE
(cid:105) .
𝛱∗[𝜋](A) − Pr(cid:104)B sets bad in 𝐺Ideal-muAE
Overall, this yields
𝛱 [𝜋] (B) ≥ Adv
muAE
In 𝐺Ideal-muAE
Adv
so it remains to bound the probability of B setting bad in the ideal
world game.
, the oracles answer independently of the queried
𝛱 [𝜋]
effective nonces and B’s randomizer values 𝐽𝑖. The bad flag is set
when across all encryption (and, for the strongly 𝑑-repeating case,
also verification) queries, an effective nonce derived by B is used
across 𝑑 + 1 users. We can view each effective nonce 𝑁∗ queried
to a user 𝑖, as throwing a ball 𝑖 into one of 2𝑏 bins, where the bin
represents the nonce queried. In total, we throw at most 𝑞 balls,
where 𝑞 = 𝑞𝑒 for the 𝑑-repeating case and 𝑞 = 𝑞𝑒 + 𝑞𝑣 for the
strongly 𝑑-repeating case. With this perspective, if the flag bad
is set, then there exist a set of 𝑑 + 1 balls corresponding to 𝑑 + 1
distinct user in the same bin. Thus we can bound the probability
that bad is set by the probability that there exist a set of 𝑑 + 1 balls
corresponding to 𝑑 + 1 distinct user in the same bin.
For distinct users, the ball throws are independent and uniformly
random distributed through the randomizer values 𝐽𝑖. The proba-
bility for any set of 𝑑 + 1 balls of distinct users to hit the same bin is
4For the strongly 𝑑-repeating case, B counts the number of users using a particular
effective nonce 𝑁 ∗ across both its encryption and verification queries. Aborting when
a counter reaches 𝑑 + 1 then ensures B is strongly 𝑑-repeating.
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2003