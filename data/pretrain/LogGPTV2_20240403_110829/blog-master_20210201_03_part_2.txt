+) search breadth first by f, t set seq  
+select * from search_graph order by seq;  
+ f | t |   label    |   seq     
+---+---+------------+---------  
+ 1 | 2 | arc 1 -> 2 | (0,1,2)  
+ 1 | 3 | arc 1 -> 3 | (0,1,3)  
+ 1 | 4 | arc 1 -> 4 | (0,1,4)  
+ 2 | 3 | arc 2 -> 3 | (0,2,3)  
+ 4 | 5 | arc 4 -> 5 | (0,4,5)  
+ 2 | 3 | arc 2 -> 3 | (1,2,3)  
+ 4 | 5 | arc 4 -> 5 | (1,4,5)  
+(7 rows)  
+  
+-- various syntax errors  
+with recursive search_graph(f, t, label) as (  
+       select * from graph0 g  
+       union all  
+       select g.*  
+       from graph0 g, search_graph sg  
+       where g.f = sg.t  
+) search depth first by foo, tar set seq  
+select * from search_graph;  
+ERROR:  search column "foo" not in WITH query column list  
+LINE 7: ) search depth first by foo, tar set seq  
+          ^  
+with recursive search_graph(f, t, label) as (  
+       select * from graph0 g  
+       union all  
+       select g.*  
+       from graph0 g, search_graph sg  
+       where g.f = sg.t  
+) search depth first by f, t set label  
+select * from search_graph;  
+ERROR:  search sequence column name "label" already used in WITH query column list  
+LINE 7: ) search depth first by f, t set label  
+          ^  
+with recursive search_graph(f, t, label) as (  
+       select * from graph0 g  
+       union all  
+       select g.*  
+       from graph0 g, search_graph sg  
+       where g.f = sg.t  
+) search depth first by f, t, f set seq  
+select * from search_graph;  
+ERROR:  search column "f" specified more than once  
+LINE 7: ) search depth first by f, t, f set seq  
+          ^  
+with recursive search_graph(f, t, label) as (  
+       select * from graph0 g  
+       union all  
+       select * from graph0 g  
+       union all  
+       select g.*  
+       from graph0 g, search_graph sg  
+       where g.f = sg.t  
+) search depth first by f, t set seq  
+select * from search_graph order by seq;  
+ERROR:  with a SEARCH or CYCLE clause, the left side of the UNION must be a SELECT  
+with recursive search_graph(f, t, label) as (  
+       select * from graph0 g  
+       union all  
+       (select * from graph0 g  
+       union all  
+       select g.*  
+       from graph0 g, search_graph sg  
+       where g.f = sg.t)  
+) search depth first by f, t set seq  
+select * from search_graph order by seq;  
+ERROR:  with a SEARCH or CYCLE clause, the right side of the UNION must be a SELECT  
+-- test ruleutils and view expansion  
+create temp view v_search as  
+with recursive search_graph(f, t, label) as (  
+       select * from graph0 g  
+       union all  
+       select g.*  
+       from graph0 g, search_graph sg  
+       where g.f = sg.t  
+) search depth first by f, t set seq  
+select f, t, label from search_graph;  
+select pg_get_viewdef('v_search');  
+                 pg_get_viewdef                   
+------------------------------------------------  
+  WITH RECURSIVE search_graph(f, t, label) AS (+  
+          SELECT g.f,                          +  
+             g.t,                              +  
+             g.label                           +  
+            FROM graph0 g                      +  
+         UNION ALL                             +  
+          SELECT g.f,                          +  
+             g.t,                              +  
+             g.label                           +  
+            FROM graph0 g,                     +  
+             search_graph sg                   +  
+           WHERE (g.f = sg.t)                  +  
+         ) SEARCH DEPTH FIRST BY f, t SET seq  +  
+  SELECT search_graph.f,                       +  
+     search_graph.t,                           +  
+     search_graph.label                        +  
+    FROM search_graph;  
+(1 row)  
+  
+select * from v_search;  
+ f | t |   label      
+---+---+------------  
+ 1 | 2 | arc 1 -> 2  
+ 1 | 3 | arc 1 -> 3  
+ 2 | 3 | arc 2 -> 3  
+ 1 | 4 | arc 1 -> 4  
+ 4 | 5 | arc 4 -> 5  
+ 2 | 3 | arc 2 -> 3  
+ 4 | 5 | arc 4 -> 5  
+(7 rows)  
+  
 --  
 -- test cycle detection  
 --  
@@ -701,6 +885,380 @@ select * from search_graph order by path;  
  5 | 1 | arc 5 -> 1 | t        | {"(5,1)","(1,4)","(4,5)","(5,1)"}  
 (25 rows)  
+-- CYCLE clause  
+with recursive search_graph(f, t, label) as (  
+       select * from graph g  
+       union all  
+       select g.*  
+       from graph g, search_graph sg  
+       where g.f = sg.t  
+) cycle f, t set is_cycle to true default false using path  
+select * from search_graph;  
+ f | t |   label    | is_cycle |                   path                      
+---+---+------------+----------+-------------------------------------------  
+ 1 | 2 | arc 1 -> 2 | f        | {"(1,2)"}  
+ 1 | 3 | arc 1 -> 3 | f        | {"(1,3)"}  
+ 2 | 3 | arc 2 -> 3 | f        | {"(2,3)"}  
+ 1 | 4 | arc 1 -> 4 | f        | {"(1,4)"}  
+ 4 | 5 | arc 4 -> 5 | f        | {"(4,5)"}  
+ 5 | 1 | arc 5 -> 1 | f        | {"(5,1)"}  
+ 1 | 2 | arc 1 -> 2 | f        | {"(5,1)","(1,2)"}  
+ 1 | 3 | arc 1 -> 3 | f        | {"(5,1)","(1,3)"}  
+ 1 | 4 | arc 1 -> 4 | f        | {"(5,1)","(1,4)"}  
+ 2 | 3 | arc 2 -> 3 | f        | {"(1,2)","(2,3)"}  
+ 4 | 5 | arc 4 -> 5 | f        | {"(1,4)","(4,5)"}  
+ 5 | 1 | arc 5 -> 1 | f        | {"(4,5)","(5,1)"}  
+ 1 | 2 | arc 1 -> 2 | f        | {"(4,5)","(5,1)","(1,2)"}  
+ 1 | 3 | arc 1 -> 3 | f        | {"(4,5)","(5,1)","(1,3)"}  
+ 1 | 4 | arc 1 -> 4 | f        | {"(4,5)","(5,1)","(1,4)"}  
+ 2 | 3 | arc 2 -> 3 | f        | {"(5,1)","(1,2)","(2,3)"}  
+ 4 | 5 | arc 4 -> 5 | f        | {"(5,1)","(1,4)","(4,5)"}  
+ 5 | 1 | arc 5 -> 1 | f        | {"(1,4)","(4,5)","(5,1)"}  
+ 1 | 2 | arc 1 -> 2 | f        | {"(1,4)","(4,5)","(5,1)","(1,2)"}  
+ 1 | 3 | arc 1 -> 3 | f        | {"(1,4)","(4,5)","(5,1)","(1,3)"}  
+ 1 | 4 | arc 1 -> 4 | t        | {"(1,4)","(4,5)","(5,1)","(1,4)"}  
+ 2 | 3 | arc 2 -> 3 | f        | {"(4,5)","(5,1)","(1,2)","(2,3)"}  
+ 4 | 5 | arc 4 -> 5 | t        | {"(4,5)","(5,1)","(1,4)","(4,5)"}  
+ 5 | 1 | arc 5 -> 1 | t        | {"(5,1)","(1,4)","(4,5)","(5,1)"}  
+ 2 | 3 | arc 2 -> 3 | f        | {"(1,4)","(4,5)","(5,1)","(1,2)","(2,3)"}  
+(25 rows)  
+  
+with recursive search_graph(f, t, label) as (  
+       select * from graph g  
+       union distinct  
+       select g.*  
+       from graph g, search_graph sg  
+       where g.f = sg.t  
+) cycle f, t set is_cycle to 'Y' default 'N' using path  
+select * from search_graph;  
+ f | t |   label    | is_cycle |                   path                      
+---+---+------------+----------+-------------------------------------------  
+ 1 | 2 | arc 1 -> 2 | N        | {"(1,2)"}  
+ 1 | 3 | arc 1 -> 3 | N        | {"(1,3)"}  
+ 2 | 3 | arc 2 -> 3 | N        | {"(2,3)"}  
+ 1 | 4 | arc 1 -> 4 | N        | {"(1,4)"}  
+ 4 | 5 | arc 4 -> 5 | N        | {"(4,5)"}  
+ 5 | 1 | arc 5 -> 1 | N        | {"(5,1)"}  
+ 1 | 2 | arc 1 -> 2 | N        | {"(5,1)","(1,2)"}  
+ 1 | 3 | arc 1 -> 3 | N        | {"(5,1)","(1,3)"}  
+ 1 | 4 | arc 1 -> 4 | N        | {"(5,1)","(1,4)"}  
+ 2 | 3 | arc 2 -> 3 | N        | {"(1,2)","(2,3)"}  
+ 4 | 5 | arc 4 -> 5 | N        | {"(1,4)","(4,5)"}  
+ 5 | 1 | arc 5 -> 1 | N        | {"(4,5)","(5,1)"}  
+ 1 | 2 | arc 1 -> 2 | N        | {"(4,5)","(5,1)","(1,2)"}  
+ 1 | 3 | arc 1 -> 3 | N        | {"(4,5)","(5,1)","(1,3)"}  
+ 1 | 4 | arc 1 -> 4 | N        | {"(4,5)","(5,1)","(1,4)"}  
+ 2 | 3 | arc 2 -> 3 | N        | {"(5,1)","(1,2)","(2,3)"}  
+ 4 | 5 | arc 4 -> 5 | N        | {"(5,1)","(1,4)","(4,5)"}  
+ 5 | 1 | arc 5 -> 1 | N        | {"(1,4)","(4,5)","(5,1)"}  
+ 1 | 2 | arc 1 -> 2 | N        | {"(1,4)","(4,5)","(5,1)","(1,2)"}  
+ 1 | 3 | arc 1 -> 3 | N        | {"(1,4)","(4,5)","(5,1)","(1,3)"}  
+ 1 | 4 | arc 1 -> 4 | Y        | {"(1,4)","(4,5)","(5,1)","(1,4)"}  
+ 2 | 3 | arc 2 -> 3 | N        | {"(4,5)","(5,1)","(1,2)","(2,3)"}  
+ 4 | 5 | arc 4 -> 5 | Y        | {"(4,5)","(5,1)","(1,4)","(4,5)"}  
+ 5 | 1 | arc 5 -> 1 | Y        | {"(5,1)","(1,4)","(4,5)","(5,1)"}  
+ 2 | 3 | arc 2 -> 3 | N        | {"(1,4)","(4,5)","(5,1)","(1,2)","(2,3)"}  
+(25 rows)  
+  
+-- multiple CTEs  
+with recursive  
+graph(f, t, label) as (  
+  values (1, 2, 'arc 1 -> 2'),  
+         (1, 3, 'arc 1 -> 3'),  
+         (2, 3, 'arc 2 -> 3'),  
+         (1, 4, 'arc 1 -> 4'),  
+         (4, 5, 'arc 4 -> 5'),  
+         (5, 1, 'arc 5 -> 1')  
+),  
+search_graph(f, t, label) as (  
+        select * from graph g  
+        union all  
+        select g.*  
+        from graph g, search_graph sg  
+        where g.f = sg.t  
+) cycle f, t set is_cycle to true default false using path  
+select f, t, label from search_graph;  
+ f | t |   label      
+---+---+------------  
+ 1 | 2 | arc 1 -> 2  
+ 1 | 3 | arc 1 -> 3  
+ 2 | 3 | arc 2 -> 3  
+ 1 | 4 | arc 1 -> 4  
+ 4 | 5 | arc 4 -> 5  
+ 5 | 1 | arc 5 -> 1  
+ 2 | 3 | arc 2 -> 3  
+ 4 | 5 | arc 4 -> 5  
+ 5 | 1 | arc 5 -> 1  
+ 1 | 4 | arc 1 -> 4  
+ 1 | 3 | arc 1 -> 3  
+ 1 | 2 | arc 1 -> 2  
+ 5 | 1 | arc 5 -> 1  
+ 1 | 4 | arc 1 -> 4  
+ 1 | 3 | arc 1 -> 3  
+ 1 | 2 | arc 1 -> 2  
+ 4 | 5 | arc 4 -> 5  
+ 2 | 3 | arc 2 -> 3  
+ 1 | 4 | arc 1 -> 4  
+ 1 | 3 | arc 1 -> 3  
+ 1 | 2 | arc 1 -> 2  
+ 4 | 5 | arc 4 -> 5  
+ 2 | 3 | arc 2 -> 3  
+ 5 | 1 | arc 5 -> 1  
+ 2 | 3 | arc 2 -> 3  
+(25 rows)  
+  
+-- star expansion  
+with recursive a as (  
+       select 1 as b  
+       union all  
+       select * from a  
+) cycle b set c to true default false using p  
+select * from a;  
+ b | c |     p       
+---+---+-----------  
+ 1 | f | {(1)}  
+ 1 | t | {(1),(1)}  
+(2 rows)  
+  
+-- search+cycle  
+with recursive search_graph(f, t, label) as (  
+       select * from graph g  
+       union all  
+       select g.*  