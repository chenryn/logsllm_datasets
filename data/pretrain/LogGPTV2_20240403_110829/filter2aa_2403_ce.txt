  and      eax, 1 
; EAX = EAX&1 = (a>>i)&1 
  test     rax, rax 
; the last bit is zero? 
; skip the next ADD instruction, if it was so. 
  je       .L3 
  add      DWORD PTR [rbp-12], 1    ; rt++ 
.L3: 
  add      QWORD PTR [rbp-8], 1     
; i++ 
.L2: 
  cmp      QWORD PTR [rbp-8], 63    ; i>CL 
 9  
  and  
esi, 1  
; ESI=ESI&1 
10 ; the last bit is 1? If so, write "new version of rt" into EAX 
11  
  cmovne eax, edx 
12  
  add  
rcx, 1  
; RCX++ 
13  
  cmp  
rcx, 64 
14  
  jne  
.L3 
15  
  rep ret   
; AKA fatret 
这段程序简洁又兼具特色。在本节前面介绍过的各个例子里，程序都是先比较特定位、然后在递增“rt”
的值。但是这段程序的顺序有所不同，它先递增rt再把新的值写到EDX寄存器。这样一来，如果最后的比
特位是 1，那么程序将使用CMOVNE
①指令（等同于CMOVNZ
②
最后一则指令是REP RET（opcode为F3 C3）。它就是MSVC里的FATRET。这个指令是由RET衍生出来
的向优化指令。AMD建议：如果RET指令的前一条指令是条件转移指令，那么在函数最后的返回指令最好
使用REP RET指令。（请参见AMD13b，p15）
）把EDX寄存器（rt的候选值）传递给EAX
寄存器（当前的rt值，也是函数的返回值），从而完成rt的更新。所以，无论输入值是什么，每次迭代结束
之后，循环控制变量的值都要进行递增，它肯定会被递增 64 次。 
因为它只含有一个条件转移指令（在循环的尾部），所以这种编译方法独具优势。如果编译的方式过于
机械化，那么程序要在递增 rt 和循环尾部进行两次条件转移。现在的 CPU 都具有分支预测的功能（请参
加本书 33.1 节）。在性能方面，本例这类程序的效率更高。 
③
Optimizing MSVC 2010 
指令清单 19.31  MSVC 2010 
a$ = 8 
f        PROC 
; RCX = input value 
  xor  
eax, eax 
  mov      edx, 1 
  lea      r8d, QWORD PTR [rax+64] 
; R8D=64 
  npad     5 
$LL4@f: 
  test     rdx, rcx 
; there are no such bit in input value? 
; skip the next INC instruction then. 
  je       SHORT $LN3@f 
  inc      eax     ; rt++ 
$LN3@f: 
  rol      rdx, 1  ; RDX=RDX<<1 
  dec      r8      ; R8-- 
  jne      SHORT $LL4@f 
  fatret   0 
f  
  ENDP 
本例中，编译器用 ROL 指令替代了 SHL 指令。ROL 的确切作用是“rotate left”，SHL 的含义则是“shift 
left”。不过在本例中，它们的效果相同。 
有关旋转指令的详细介绍，请参见附录 A.6.3。 
R8 的值将从 64 逐渐递减为 0，它的变化过程和变量 i 完全相反。 
在程序的执行过程中，寄存器的关系如下图所示。 
① Conditional MOVe if Not Equal。 
② Conditional MOVe if Not Zero。 
③ 更多介绍请参见 http://repzret.org/p/repzret/。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 19 章  位  操  作 
291 
RDX 
R8 
0x0000000000000001 
64 
0x0000000000000002 
63 
0x0000000000000004 
62 
0x0000000000000008 
61 
…… 
…… 
0x4000000000000000 
2 
0x8000000000000000 
1 
程序最后使用了 FATRET 指令，我们在上一个例子里已经介绍过它了。 
Optimizing MSVC 2012 
指令清单 19.32  MSVC 2012 
a$ = 8 
f        PROC 
; RCX = input value 
  xor      eax, eax 
  mov      edx, 1 
  lea      r8d, QWORD PTR [rax+32] 
; EDX = 1, R8D = 32 
  npad     5 
$LL4@f: 
; pass 1 ------------------------------------ 
  test     rdx, rcx 
  je       SHORT $LN3@f 
  inc      eax     ; rt++ 
$LN3@f: 
  rol      rdx, 1  ; RDX=RDX<<1 
; ------------------------------------------- 
; pass 2 ------------------------------------ 
  test     rdx, rcx 
  je       SHORT $LN11@f 
  inc      eax     ; rt++ 
$LN11@f: 
  rol      rdx, 1  ; RDX=RDX<<1 
; ------------------------------------------- 
  dec      r8      ; R8-- 
  jne      SHORT $LL4@f 
  fatret  0 
f        ENDP 
MSVC 2012 优化编译而生成的代码与 MSVC 2010 大体相同。但是 MSVC 2012 把迭代次数为 64 次的
循环，拆解为两个迭代 32 次的循环。坦白讲，笔者也不清楚个中缘由。或许是优化的结果，或许循环体更
长一些比较好。总之，我特地把这个例子记录下来，希望读者注意：编译器可能生成各种匪夷所思的代码，
但是这些代码的功能仍然会忠实于源程序。 
19.5.3 ARM + Optimizing Xcode 4.6.3 (LLVM) + ARM mode 
指令清单 19.33  Optimizing Xcode 4.6.3 (LLVM) (ARM mode) 
MOV              R1, R0 
MOV              R0, #0 
MOV              R2, #1 
MOV   
R3, R0 
loc_2E54 
TST              R1, R2,LSL R3 ; 根据 R1 & (R2<<R3)设置标记 
ADD              R3, R3, #1    ; R3++ 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
292 
逆向工程权威指南（上册） 
ADDNE            R0, R0, #1    ; if ZF flag is cleared by TST, then R0++ 
CMP              R3, #32 
BNE              loc_2E54 
BX               LR 
ARM 模式的 TST 指令相当于 x86 指令集的 TEST 指令。 
ARM 模式的指令里没有单独的位移操作指令（参见本书 41.2.1 节）。但是在数据处理指令——即 MOV、TST、
CMP、ADD、SUB、RSB 指令中，可以使用参数调节符（如 LSL、LSR、ASR、ROR、RRX）实现位移运算。 
通过“参数调节符（modificators）”进行位移运算的指令，必须明确位移的方法和位移的位数。 
此处的“TST R1, R2, LSL R3”，可理解为 R1^(R2<<R3)。 
19.5.4 ARM + Optimizing Xcode 4.6.3（LLVM）+ Thumb-2 mode 
Thumb-2 模式的代码与 ARM 模式的代码基本相同。只不过在 Thumb-2 模式下，不可能直接在 TST 指
令里直接使用参数调节符 LSL，所以它使用 LSL.W 和 TST 指令替代了 ARM 模式下的单条 TST 指令。 
MOV              R1, R0 
MOVS             R0, #0 
MOV.W            R9, #1 
MOVS             R3, #0 
loc_2F7A 
LSL.W            R2, R9, R3 
TST              R2, R1 
ADD.W            R3, R3, #1 
IT NE 
ADDNE            R0, #1 
CMP  
R3, #32 
BNE   
loc_2F7A 
BX               LR 
19.5.5 ARM64 + Optimizing GCC 4.9 
本节使用的源程序，是 19.5.2 节中所示程序的 64 位修改版。 
指令清单 19.34  Optimizing GCC (Linaro) 4.8 
f: 
  mov      w2, 0        
; rt=0 
  mov      x5, 1 
  mov      w1, w2 
.L2: 
  lsl      x4, x5, x1   
; w4 = w5<<w1 = 1<<i 
  add      w3, w2, 1    
; new_rt=rt+1 
  tst      x4, x0       
; (1<<i) & a 
  add      w1, w1, 1    
; i++ 
; result of TST was non-zero? 
; then w2=w3 or rt=new_rt. 
; otherwise: w2=w2 or rt=rt (idle operation) 
  csel     w2, w3, w2, ne 
  cmp      w1, 64       
; i<64? 
  bne      .L2          
;yes 
  mov      w0, w2       
; return rt 
  ret 
这个程序与 GCC 生成的 x64 程序（请参见指令清单 19.30）十分相似。 
其中，CSEL 指令的全称是“Conditional SELect”。它依据 TST 指令设置的标志位，相应地从候选的两
个操作符中选取一个数据并复制给 W2。本例中，它传递的值是 rt。 
19.5.6 ARM64 + Non-optimizing GCC 4.9 
本节再次使用 19.5.2 节中所示程序的 64 位修改版。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 19 章  位  操  作 
293 
由于编译时关闭了优化功能，所以编译器生成的代码十分庞大。 
指令清单 19.35  Non-optimizing GCC (Linaro) 4.8 
f: 
  sub  
sp, sp, #32 
  str  
x0, [sp,8]  
; store "a" value to Register Save Area 
  str  
wzr, [sp,24]  
; rt=0 
  str  
wzr, [sp,28]  
; i=0 
  b   
.L2 
.L4: 
  ldr  
w0, [sp,28] 
  mov  
x1, 1 
  lsl  
x0, x1, x0  
; X0 = X1<<X0 = 1<<i 
  mov  
x1, x0 
; X1 = 1<<1 
  ldr  
x0, [sp,8] 
; X0 = a 
  and  
x0, x1, x0 
; X0 = X1&X0 = (1<<i) & a 
; X0 contain zero? then jump to .L3, skipping "rt" increment 
  cmp  
x0, xzr 
  beq  
.L3 
; rt++ 
  ldr  
w0, [sp,24] 
  add  
w0, w0, 1 
  str  
w0, [sp,24] 
.L3: 
; i++ 
  ldr  
w0, [sp,28] 
  add  
w0, w0, 1 
  str  
w0, [sp,28] 
.L2: 
; i<=63? then jump to .L4 
  ldr  
w0, [sp,28] 
  cmp  
w0, 63 
  ble  
.L4 
; return rt 
  ldr  
w0, [sp,24] 
  add  
sp, sp, 32 
  ret 
19.5.7 MIPS 
Non-optimizing GCC 
指令清单 19.36  Non-optimizing GCC 4.4.5 (IDA) 
f: 
; IDA is not aware of variable names, we gave them manually: 
rt 
= -0x10 
i  
= -0xC 
var_4   
= -4 