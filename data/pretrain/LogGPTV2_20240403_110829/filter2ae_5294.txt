**作者：慢雾安全团队**  
**原文链接：**
# 前言
据链闻消息，4 月 18 日，Tokenlon 宣布暂停 imBTC 转账，因其发现有攻击者通过 ERC777 在 Uniswap
流动性合约中的重入漏洞，对 ETH-imBTC 池循环套利。此次的攻击手法是一个存在于 Uniswap v1 上的已知漏洞，该漏洞首先由 Consensys
于 2019 年 4 月发现，当时 Consensys 只是发现了该风险，并还没有发现可以利用这种手法进行攻击的 token。随后，在 imBTC 上线
Uniswap 后，由于 imBTC 是基于 ERC777 实现的，通过组合 ERC777 的特 性及 Uniswap
代码上的问题，使攻击者可以通过重入漏洞实现套利。下面，我们将来分析此次套利中的攻击手法和具体的细节。
# 知识准备
ERC777 协议是以太坊上的代币标准协议，该协议是以太坊上 ERC20 协议的改进版，主要的改进点如下：
**1、使用和发送以太相同的理念发送 token，方法为：send(dest, value, data)**
**2、合约和普通地址都可以通过注册 tokensToSend hook
函数来控制和拒绝发送哪些token（拒绝发送通过在hook函数tokensToSend 里 revert 来实现）**
**3、合约和普通地址都可以通过注册 tokensReceived hook
函数来控制和拒绝接受哪些token（拒绝接受通过在hook函数tokensReceived 里 revert 来实现）**
**4、tokensReceived 可以通过 hook 函数可以做到在一个交易里完成发送代币和通知合约接受代币，而不像 ERC20
必须通过两次调用（approve/transferFrom）来完成**
**5、持有者可以"授权"和"撤销"操作员（operators: 可以代表持有者发送代币）** 这些操作员通常是（去中心化）交易所、支票处理机或自动支付系统
**6、每个代币交易都包含 data 和 operatorData 字段， 可以分别传递来自持有者和操作员的数据**
**7、可以通过部署实现 tokensReceived 的代理合约来兼容没有实现tokensReceived 函数的地址**
在这里，我们需要特别关注的点是第二点，即 ERC777 标准中的 tokenToSend 函数，根据 ERC777 协议的定义，遵循该标准的 token
代币在每一次发生代币转账的时候都会去尝试调用代币发送者 tokensToSend 函数，而代币持有者可以通过在 ERC1820
注册合约注册自己的合约并通过在这个 hook 函数中定义一些操作来处理代币转账的过程中的某些流程，如拒绝代币发送或其他操作。
了解这些关键点，有助于我们理解这次攻击的具体攻击手法。现在开始，我们可以稍微加速，看看对于 Uniswap 而言，这次到底发生了什么？
# 细节分析
通过 Etherscan 查询攻击者的其中一笔交易
`0x32c83905db61047834f29385ff8ce8cb6f3d24f97e24e6101d8301619efee96e`
可以发现，攻击者两度向 Uniswap 合约转帐 imBTC，金额同样是 0.00823084，然后从 Uniswap 收取了两笔
ETH，看上去似乎是十分正常的两笔交易，实际上却是暗流涌动，另有玄机。为了更好的了解整一笔交易的细节，我们需要通过 bloxy.info
来查看交易的具体细节。
通过查询交易的细节，我们发现，攻击者首先是通过 `ethToTokenSwapInput`函数向 Uniswap 兑换了一些 imBTC，然后再通过
`tokenToEthSwapInput` 函数开始第一次用 imBTC 换取 ETH，然后 Uniswap 先将 ETH 转给了攻击者，再调用 imBTC
的 transferFrom 函数，由于 imBTC 实现了 ERC777 标准，所以在调用 imBTC 的 trasferFrom 函数的时候，
imBTC 会对攻击者的 tokensToSend 函数进行调用。随后，在攻击者的 tokensToSend 函数中，攻击者会进行第二次用 imBTC 换取
ETH，然后流程结束。
从交易细节上看，这里似乎还是没有什么问题，我们继续跟踪 UniSwap 的代码。
上面是代码是 Uniswap 的 `ethToTokenSwapInput` 函数的代码，根据代码分析， `UniSwap` 的
`ethToTokenSwapInput` 函数会调用 `ethToTokenInput` 函数，然后会先通过 getInputPrice 获取代币能换取的
eth 数量，之后通过 send 函数将 eth 发给用户，最后再通过 `transferFrom` 把代币转进合约。我们继续跟进
`getInputPrice` 函数。
通过分析 `getInputPrice` 函数，我们能知道，ETH 获取量计算的公式为
把该公式放到 `ethToTokenInput` 函数的上下文中，该公式就变成了
在该公式下，一次正常的 imBTC 兑换 ETH 的过程中，作为分母的 imBTC 储备量在兑换过后应该要上升，对应的 ETH 储备量会变小。
但是回顾攻击者的操作方式，在攻击者第一次发送 imBTC 兑换 ETH 的过程中，Uniswap 会先发送 ETH 给攻击者，这时候 Uniswap 中
ETH 储备量减少，然后 Uniswap 调用 transferFrom 函数，(注意此时还未将攻击者的 imBTC 扣除)， 紧接着在
transferFrom 函数中攻击者调用的第二次的 `ethToTokenSwapInput` 时，通过 `getInputPrice` 获取兑换的
ETH 数量的公式会变成这样：
注意看，在第二次的兑换计算中，只有 ETH 的储备量变少了，而 imBTC 的储备量并未增加，这导致相比与单独的调用
`ethToTokenSwapInput` 函数，攻击者可以通过重入的方式，在第二次使用 imBTC 兑换 ETH
的过程中，使计算公式的分子发生了变化，而公式的分母不会发生变化。相比正常的兑换，攻击者通过重入方式进行的第二次兑换会获取微小的利润，导致有利可图。重复这样的过程，就能通过等量的
imBTC 获取更多的 ETH，导致 Uniswap 做事商的损失。
# 防御方法
  1. 在 Uniswap 的中 加入 OpenZeppelin 的 tokenToEthSwapInput 函数中加入 ReentrancyGuard 函数，防止重入问题。
  2. 在进行代币交换的时候，先扣除用户的代币，再将 ETH 发送给用户。
同时，针对本次攻击事件慢雾安全团队建议：
  1. 在关键的业务操作方法中加入锁机制，如：OpenZeppelin 的 ReentrancyGuard
  2. 开发合约的时候采用先更改本合约的变量，再进行外部调用的编写风格
  3. 项目上线前请优秀的第三方安全团队进行全面的安全审计，尽可能的发现潜在的安全问题
  4. 多个合约进行对接的时候也需要对多方合约进行代码安全和业务安全的把关，全面考虑各种业务场景相结合下的安全问题
  5. 合约尽可能的设置暂停开关，在出现“黑天鹅”事件的时候能够及时发现并止损
  6. 安全是动态的，各个项目方也需要及时捕获可能与自身项目相关的威胁情报，及时排查潜在的安全风险
# 最后的思考
这两天的 DeFi 世界被闹得沸沸扬扬，imBTC 作为 ERC777 代币首当其冲，ERC777
协议也饱受诟病，但是看完分析，造成此次的攻击事件原因，真的是 imBTC 或者是 ERC777 协议的问题吗？
如果 Uniswap 做好了 ERC777 的兼容，使用 ReentrancyGuard，并在代币交换的时候先扣除用户的代币，再将 ETH
发送给用户，这样的问题是不是就不会发生？
imBTC 作为 以太坊上 token 化的比特币代币协议，其安全性在自身单独运行的时候并不存在问题，第三方 DeFi
平台在接入的时候，应需要充分考虑平台本身的业务逻辑与接入代币之间的兼容性，才能避免因兼容性发生不必要的安全问题。而不是简单的将问题归咎于协议和代币提供方。
* * *