30.7.2 数据模板
ContentControl元素的内容可以是任意内容——不仅可以是XAML元素，还可以
是.NET对象。例如，可以把Country类型的对象赋予Button类的内容。下面的示例创建
Country类，以表示国家名称和国旗（用一幅图像的路径表示）。这个类定义Name和
ImagePath属性，并重写ToString（）方法，用于默认的字符串表示（代码文件
Models[WPF | UWP]/Country.cs）：
    public class Country
    {
      public string Name { get; set; }
      public string ImagePath { get; set; }
      public override string ToString() => Name;
    }
这些内容在按钮或任何其他ContentControl中会如何显示？默认情况下会调用
ToString（）方法，显示对象的字符串表示。
要获得自定义外观，还可以为Country类型创建一个DataTemplate。示例代码定义了
CountryDataTemplate键，这个键可以用于引用模板。在DataTemplate内部，主元素是一个
文本框，其Text属性绑定到Country的Name属性上，Source属性的Image绑定到Country的
ImagePath属性上。Grid和Border元素定义了布局和可见外观（代码文件Templates[WPF 
|
UWP]/Styles/DataTemplates.xaml）：
在Window或Page的XAML代码中，定义一个简单的Button元素button1：
在代码隐藏文件中，实例化一个新的Country对象，并把它赋给button1的Content属性
（代码文件Templates[WPF | UWP]/StyledButtons.xaml.cs）：
    this.countryButton.Content = new Country
    {
      Name = "Austria",
      ImagePath = "images/Austria.bmp"
    };
运行这个应用程序，可以看出，DataTemplate应用于
Button，因为Country数据类型有默认的模板，如图30-17
所示。
当然，也可以创建一个控件模板，并从中使用数据模
板。
30.7.3 样式化ListView
更改按钮或标签的样式是一个简单的任务，例如改变包含一个元素列表的父元素的样
式。如何更改ListView？这个列表控件也有操作方式和外观。它可以显示一个元素列表，
用户可以从列表中选择一个或多个元素。至于操作方式，ListView类定义了方法、属性和
事件。ListView的外观与其操作是分开的。ListView元素有一个默认的外观，但可以通过
创建模板，改变这个外观。
为了给ListView填充一些项，类CountryRepository返回几个要显示出来的国家（代码
文件Models[WPF | UWP]/CountryRepository.cs）：
    public sealed class CountryRepository
    {
      private static IEnumerable s_countries;
      public IEnumerable GetCountries() =>
        s_countries ? ? (s_countries = new List
        {
        new Country { Name="Austria", ImagePath = "Images/Austria.bmp" },
        new Country { Name="Germany", ImagePath = "Images/Germany.bmp" },
        new Country { Name="Norway", ImagePath = "Images/Norway.bmp" },
        new Country { Name="USA", ImagePath = "Images/USA.bmp" }
        });
    }
在代码隐藏文件中，在StyledList类的构造函数中，使用CountryRepository的
GetCountries方法创建并填充只读属性Countries（代码文件Templates[WPF 
|
UWP]/StyledList.xaml.cs）：
    public ObservableCollection Countries { get; } =
      new ObservableCollection();
    public StyledListBox()
    {
      this.InitializeComponent();
      this.DataContext = this;
      var countries = new CountryRepository().GetCountries();
      foreach (var country in countries)
      {
        Countries.Add(country);
      }
    }
DataContext是一个数据绑定功能，参见下一章。
在XAML代码中，定义了countryList1列表视图。countryList1只使用元素的默认外
观。把ItemsSource属性设置为Binding标记扩展，它由数据绑定使用。从代码隐藏文件
中，可以看到数据绑定用于一个Country对象数组。图30-18显示了ListView的默认外观。
在默认情况下，只在一个简单的列表中显示ToString（）方法返回的国家的名称（代码文
件Templates[WPF | UWP]/ StyledList.xaml）。
图30-18
30.7.4 ListView项的数据模板
接下来，使用之前为ListView控件创建的DataTemplate。DataTemplate可以直接分配
给ItemTemplate属性（代码文件Templates[WPF | UWP]/StyledList.xaml）：
图30-19
有了这些XAML，项就如图30-19所示。
当然也可以定义一个引用数据模板的样式（代码文件
Templates[WPF | UWP]/Styles/ListTemplates. xaml）：
在ListView控件中使用这个样式（代码文件
Templates[WPF |UWP]/StyledList.xaml）:
30.7.5 项容器的样式
数据模板定义了每一项的外观，每项还有一个容器。ItemContainerStyle可以定义每项
的容器的外观，例如，选择、按下每个项时，应给画笔使用什么前景和背景，等等。对于
容器边界的简单视图，设置Margin和Background属性（代码文件TemplatesUWP
/Styles/ListTemplates.xaml）：
在WPF中，ListViewItemPresenter不可用，但可以使用ContentPre-senter，如下面的代
码片段所示（代码文件TemplatesWPF/Styles/ListTem-plates.xaml）：
图30-20
样式与ListView的ItemContainerStyle属性相关联。这
种样式的结果如图30-20所示。这个图很好地显示了项容
器的边界（代码文件Templates 
（WPF 
| 
UWP]/
StyledList.xaml）：
30.7.6 项面板
默认情况下，ListView的项垂直放置。这不是在这个视图中安排项的唯一方法，还可
以用其他方式安排它们，如水平放置。在项控件中安排项由项面板负责。
下面的代码片段为ItemsPanelTemplate定义了资源，水平布置ItemsStackPanel，而不是
垂直布置（代码文件TemplatesUWP / Styles / listTemplates.xaml）：
在WPF的版本中，VirtualizingStackPanel（而不是ItemsStackPanel）的用法有点不同
（代码文件TemplatesWPF / Styles / listTemplates.xaml）:
下面的ListView声明使用与之前相同的Style和ItemContainerStyle，但添加了
ItemsPanel的资源。图30-21显示，项现在水平布置（代码文件Templates（WPF | UWP]/
StyledList.xaml）：
图30-21
30.7.7 列表视图的控件模板
该控件还没有介绍的是滚动功能，以防项不适合放在屏幕上。定义ListView控件的模
板可以改变这个行为。
样式ListViewStyle2将根据需要定义水平和垂直滚动条的行为，且项水平布置。这个
样式还包括对日期模板的资源引用和前面定义的容器项模板。设置Template属性，现在还
可以更改整个ListView控件的UI 
（代码文件TemplatesUWP 
/ 
Styles 
/
ListTemplates.xaml）：
  注意： 在WPF中，ListView控件的模板与UWP模板相似。ItemsPresenter没有
提供UWP ItemsPresenter的许多属性，如与平移相关的属性。
有了这个资源，ListView的定义就很简单了，因为只需要引用ListViewStyle2和
ItemsSource，来检索数据（代码文件Templates[WPF | UWP]/StyledList.xaml）:
新视图如图30-22所示。现在滚动条可用了。
图30-22