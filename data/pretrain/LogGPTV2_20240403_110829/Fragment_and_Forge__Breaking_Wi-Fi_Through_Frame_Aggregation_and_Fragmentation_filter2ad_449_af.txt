### LLC/SNAP Header and Subframe Processing

The presence of an LLC/SNAP header (as shown in Figure 8) can cause the destination and source addresses of the first subframe to become invalid, leading to the receiver discarding this subframe. However, subsequent subframes are still processed. This vulnerability allows an attacker to inject arbitrary packets into devices that accept plaintext A-MSDUs with the first 8 bytes matching an EAPOL LLC/SNAP header.

For FreeBSD and several other devices listed in Tables 1 and 2, this vulnerability enables an adversary to inject plaintext A-MSDU frames. Some devices are only vulnerable during the execution of the 4-way handshake. For example, on a Windows 10 system with an AWUS036ACH, an A-MSDU starting with a valid EAPOL header can result in a blue screen of death.

Certain implementations strip the first 8 bytes of an A-MSDU if they match a valid LLC/SNAP header, as discussed in Section 3.6. This practice is non-compliant with the standard and does not prevent attacks on vulnerable devices.

### EAPOL Forwarding and Fragmentation

As mentioned in the previous section, devices must accept plaintext 4-way handshake frames when a client is connecting to a network. We discovered that some devices also forward plaintext handshake frames destined for other clients in the network, even if the sender has not yet authenticated (CVE-2020-26139). Affected devices include FreeBSD and NetBSD APs, as well as certain home routers like the Asus RT-N10 and Linksys WAG320N.

An adversary can exploit this by performing the A-MSDU attack from Section 3 using a multi-channel Man-in-the-Middle (MitM) position. The adversary first associates with the target network, then sends a handshake (EAPOL) frame to the AP, with the final destination being a client connected to the network. A vulnerable AP will accept and forward this EAPOL frame to the targeted client, encrypting it in the process. The adversary can then use their MitM position to set the A-MSDU flag in the encrypted EAPOL frame, allowing them to inject arbitrary packets by constructing an EAPOL frame as illustrated in Figure 8 and placing the packet to be injected in the second A-MSDU subframe.

Against a NetBSD AP, an adversary can also send a large EAPOL frame, which the AP will fragment, encrypt, and forward to the targeted client. This allows the adversary to generate encrypted fragments, which can be combined with the cache attack by first poisoning the fragment cache of the victim. The adversary can then generate a second encrypted fragment through the NetBSD AP, causing the victim to reassemble the fragments and process the injected packet. Another option is to exploit this against clients that accept fragmented frames, provided the last fragment is encrypted. However, most NetBSD drivers do not support sending fragmented frames and only send the first fragment, dropping subsequent ones. Drivers like ath, however, transmit all fragments, which an adversary can exploit to perform fragmentation-based attacks more easily.

### Skipping the TKIP Authenticity Check

Fragmentation attacks should be impossible against TKIP because it verifies the authenticity of the full (reassembled) frame. However, we found several network cards on Linux and Windows that do not verify the authenticity of reassembled TKIP frames (CVE-2020-26141). On Windows, the AWUS036H, AWUS036ACH, and TL-WN725N are affected, and on Linux, the NWD6505 and AWUS036ACM are affected. Against these devices, our fragmentation-based attacks are possible even if the old TKIP protocol is used.

### Treating Fragments as Full Frames

Some implementations, such as OpenBSD and the ESP-12F, do not support A-MSDUs or fragmented frames but are still vulnerable to attacks because they treat all frames as non-fragmented ones (CVE-2020-26142). An adversary can exploit this to inject arbitrary network packets by controlling the content included in one of the fragments. This can be achieved in the relaxed BEAST threat model by making the client load an attacker-controlled URL or resource, resulting in a request or response that is fragmented at the Wi-Fi layer, with one of the fragments consisting entirely of attacker-controlled data (treated as a full frame).

In the case of OpenBSD, the "more fragments" flag is not included in the associated metadata when decrypting a fragment, causing decryption to fail on all but the last fragment. The last fragment, which does not have this flag set, is successfully decrypted and processed as a full frame. OpenBSD can also offload decryption to the Wi-Fi chip, in which case all fragments are properly decrypted, but each decrypted fragment is treated as an unfragmented frame. In both cases, it is possible to inject arbitrary network packets by controlling the content included in the last fragment.

We confirmed the resulting attacks against the ESP-12F, which even accepted plaintext frames, and against OpenBSD 6.6 when it acted as a client using a Belkin F5D8053 v3 or Intel 8265. We conjecture that other devices that do not support fragmentation can be attacked in similar ways.

### Related Work & Discussion

#### Related Work

**Aggregation:** Robyns et al. presented packet-in-packet attacks that exploit aggregated MPDUs where (encrypted) frames are aggregated close to the physical layer [45]. In this aggregation method, encryption happens before aggregation, and their attacks enabled the remote injection of frames in open (but not protected) Wi-Fi networks. Similarly, other packet-in-packet attacks against different protocols are only feasible in open networks [15, 23]. We study aggregation at a higher network layer, where encryption takes place after aggregation. Our resulting attacks apply to protected Wi-Fi networks and allow an adversary within radio range of victims to inject packets. In other work, A-MSDUs were abused to more easily trigger key reinstallations [58], but no attention was paid to the unauthenticated A-MSDU flag.

**Fragmentation:** Previous work abused fragmentation to more efficiently exploit known flaws in WEP [13] but did not uncover flaws in (de)fragmentation features themselves. Schepers et al. found that OpenBSD incorrectly handled fragmented TKIP frames [50], allowing Denial-of-Service (DoS) attacks and packet injection, but this was an implementation vulnerability and not a design flaw in the standard.

**Implementation Flaws:** Implementation flaws in IPv4 and IPv6 (de)fragmentation have been abused for DoS attacks, firewall evasion, etc. [9, 36]. It was also abused to launch off-path DNS cache poisoning attacks by bypassing its plaintext challenge-response protocol [28]. This was possible because the first fragment of a response contains the unpredictable challenge values, and an adversary can replace the second fragment with malicious data. In contrast, our attacks work against encrypted protocols. Nowadays, IP fragmentation is considered fragile [14]. Against 6LoWPAN, fragmentation was abused to launch a DoS attack by preventing (correct) packet reassembly [29].

**Formal Models:** Cremers et al. formally modeled WPA2 and demonstrated the correctness of key reinstallation defenses. Their model did not include aggregation and fragmentation functionality and therefore missed the attacks that we discovered [18]. Other work on formally verifying and modeling WPA2 only focuses on the 4-way handshake [26, 51].

**Wi-Fi Security:** Major advancements have been made in Wi-Fi security, including the discovery and prevention of key reinstallations in WPA2 [57, 58], the release of WPA3 [60], and extra defenses such as operating channel validation and beacon protection [54, 55]. Although shortcomings in WPA3 were identified [40, 59], these have been addressed in an update to the standard [25]. A recent update to WPA3 improves the security of enterprise networks, as these were often insecurely configured [10, 16]. Other work studied Wi-Fi provisioning schemes [38], inferred and analyzed state machines [52], and studied potential electromagnetic side-channel leaks in 802.11 radios [17].

#### Countermeasures for Design Flaws

**Spoofing Aggregated Frames:** The aggregation attack of Section 3 can be prevented by updating the standard to ensure the A-MSDU flag is always authenticated, i.e., ensuring only SPP A-MSDUs are used. This can be accomplished by setting and adhering to the "SPP A-MSDU required" flag in the RSN element when connecting to another station or network. In theory, this ensures all stations either: (1) never accept/send A-MSDUs; or (2) always authenticate the A-MSDU flag in sent and received frames [31, Table 11-12].

The RSN element also contains a flag to indicate whether the device supports SPP A-MSDUs. When a device does not set this flag but sets the SPP required flag, it means no A-MSDUs should be sent to it. In other words, if a device does not support SPP A-MSDUs, this flag combination instructs peers to never accept or send A-MSDUs [31, Table 11-12]. This flag combination also prohibits the device itself from sending or accepting A-MSDUs, preventing all possible aggregation attacks.

Unfortunately, most devices ignore the SPP flags in the RSN element and will send or accept non-SPP A-MSDUs regardless of these flags. Therefore, if a device sets the SPP required flag and a peer still sends non-SPP A-MSDUs, these will be dropped. Setting the SPP required flag may degrade reliability. It also means the attack of Section 3.5 remains possible because, when the sender does not authenticate the A-MSDU flag, it masks the A-MSDU flag to zero in the authenticated metadata (recall Section 2.1). As a result, an attacker can unset the A-MSDU flag without the receiver noticing. Nevertheless, the impact of this attack appears low, and as a defense, we recommend setting and adhering to the SPP required flag in the RSN element.

If dropping non-SPP A-MSDUs is not feasible, attacks can be mitigated by dropping the full A-MSDU frame if any of the subframe's MAC addresses do not belong to connected stations. Specifically, A-MSDUs must be dropped if their first 6 bytes equal the start of an LLC/SNAP header, i.e., if the destination address of the first subframe is AA:AA:03:00:00:00. Although this prevents our main attack, other novel aggregation-based attacks may remain possible.

**Mixed Key Attack:** Mixed key attacks of Section 4 can be prevented by not reassembling fragments that were decrypted using different keys, which is backward-compatible because this does not occur in normal circumstances. The standard and all implementations should be updated to include this check. An efficient way to implement this is to assign an incremental key identifier to decrypted fragments, increase this identifier whenever a new key is installed, and verify that all fragments were decrypted using the same key identifier.

To mitigate (but not prevent) attacks against receivers, a transmitter can decide to never use fragmentation. However, this may reduce reliability. Note that clearing the fragment cache whenever installing a key does not prevent mixed key attacks when using multiple key support (recall Section 4.4).

**Cache Attack:** The fragment cache attack of Section 5 can be prevented by updating clients to clear the fragment cache whenever (re)connecting or (re)associating with a network. Similarly, an AP should clear all fragments received by a specific client when this client reconnects, reassociates, or disconnects from the network. These changes are backward-compatible since legitimate devices do not rely on this vulnerable behavior. The 802.11 standard and all existing implementations should be updated to perform these actions.

#### Overall Discussion

**Test Considerations:** Several devices were not affected by our default attacks but only to minor variants, e.g., FreeBSD and OpenBSD. Therefore, we recommend considering a device secure only if there are explicit checks in the code to prevent attacks and if practical tests show it is indeed not vulnerable. To test attacks, driver and firmware patches are required to reliably inject fragmented frames. Otherwise, important fields may be overwritten, causing attacks to fail. This obstacle when testing attacks may be one reason why the discovered design flaws went unnoticed for more than two decades.

**Future Work:** Crucial future work includes formally modeling 802.11’s aggregation and fragmentation features to evaluate and increase confidence in the correctness of our defenses. It is also worthwhile to investigate how 802.11ax can be abused to induce fragmentation in practice, as this would increase the impact of our fragmentation-based attacks. We also believe it is important to study in more detail how different flaws can be combined in practical attacks. Finally, analyzing other (proprietary) protocols for similar fragmentation-based flaws is interesting future work.

### Conclusion

We discovered widespread design and implementation flaws related to frame aggregation and fragmentation. Interestingly, our aggregation attack could have been avoided if devices had implemented optional security improvements earlier. This highlights the importance of deploying security improvements before practical attacks are known. The two fragmentation-based design flaws were, at a high level, caused by not adequately separating different security contexts. From this, we learn that properly separating security contexts is an important principle to take into account when designing protocols.

In practice, our implementation-specific vulnerabilities are the most devastating. Several enable the trivial injection of frames, which we abused to trick a victim into using a malicious DNS server to intercept most of the victim’s traffic.

### Acknowledgments

We thank LANCOM, Aruba, and Cisco for their test devices, and thank Cisco for help with the disclosure. This work was supported by the Center for Cyber Security at New York University Abu Dhabi (NYUAD). The author holds a Postdoctoral fellowship from the Research Foundation Flanders (FWO).

### References

[1] https://github.com/vanhoefm/fragattack
[2] Md Sohail Ahmad. Wpa too! In DEF CON, 2010.
[3] Nadhem J. Al Fardan and Kenneth G. Paterson. Lucky thirteen: Breaking the TLS and DTLS record protocols. In IEEE S&P, 2013.
[4] Martin R Albrecht and Kenneth G Paterson. Lucky microseconds: a timing attack on Amazon’s s2n implementation of TLS. In Eurocrypt, 2016.
[5] Nadhem AlFardan, Daniel Bernstein, Kenneth Paterson, Bertram Poettering, and Jacob Schuldt. On the security of RC4 in TLS and WPA. In USENIX Security, 2013.
[6] Wi-Fi Alliance. Hotspot 2.0 Specification Ver. 3.1, 2019.
[7] Amazon. AWS IP address ranges. Retrieved 3 June 2020 from https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html, 2020.
[8] Arch Linux Wiki. Network configuration / wireless. Retrieved 18 February 2020 from https://wiki.archlinux.org/index.php/Network_configuration/Wireless, 2020.
[22] Christina Garman, Kenneth G. Paterson, and Thyla Van der Merwe. Attacks only get better: Password recovery attacks against RC4 in TLS. In USENIX Security, 2015.
[23] Travis Goodspeed, Sergey Bratus, Ricky Melgares, Rebecca Shapiro, and Ryan Speers. Packets in packets: Orson Welles’ in-band signaling attacks for modern radios. In USENIX WOOT, 2011.
[9] Antonios Atlasis. Attacking IPv6 implementation using fragmentation. In Black Hat EU Briefings, 2012.
[24] Finn Michael Halvorsen and Olav Haugen. Cryptanalysis of IEEE 802.11i TKIP. Master’s thesis, 2009.
[10] Alberto Bartoli, Eric Medvet, Andrea De Lorenzo, and Fabiano Tarlao. (in)secure configuration practices of WPA2 enterprise supplicants. In WiSec, 2018.
[11] Johannes Berg. mac80211: check PN correctly for GCMP-encrypted fragmented MPDUs. Linux commit 9acc54beb474, 2016.
[12] Karthikeyan Bhargavan and Gaëtan Leurent. On the practical (in-)security of 64-bit block ciphers: Collision attacks on HTTP over TLS and OpenVPN. In CCS, 2016.
[13] Andrea Bittau, Mark Handley, and Joshua Lackey. The final nail in WEP’s coffin. In IEEE S&P, 2006.
[14] Ron Bonica, Fred Baker, Geoff Huston, Bob Hinden, Ole Trøan, and Fernando Gont. IP fragmentation considered harmful. In IETF, 2010.