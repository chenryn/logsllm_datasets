LLC/SNAP header (see Figure 8). Although this causes the
destination and source address of the ﬁrst subframe to be
invalid, meaning the receiver drops this subframe, other sub-
frames are still processed. Hence, an attacker can inject arbi-
trary packets against devices that accept plaintext A-MSDUs
whose ﬁrst 8 bytes equal an EAPOL LLC/SNAP header.
Against FreeBSD and several devices shown in Table 1
and 2, this allows an adversary to inject plaintext A-MSDU
frames. Similar to Section 6.4, some devices are only vulner-
able during the execution of the 4-way handshake. Against
an AWUS036ACH on Windows 10, an A-MSDU starting
with a valid EAPOL header resulted in a blue screen of death.
Finally, some implementations strip away the ﬁrst 8 bytes of
an A-MSDU if these bytes equal a valid LLC/SNAP header
(recall Section 3.6). This is not compliant with the standard
and does not prevent attacks against vulnerable devices.
6.6 EAPOL forwarding & fragmentation
As highlighted in the previous section, devices must accept
plaintext 4-way handshake frames when a client is connecting
to a network. We found that some devices also forward plain-
text handshake frames if they are destined to other clients
in the network, even when the sender has not yet authenti-
cated (CVE-2020-26139). Affected devices are FreeBSD and
NetBSD APs, and certain home routers such as our Asus
RT-N10 and Linksys WAG320N. An adversary can abuse this
to perform the A-MSDU attack from Section 3 using only a
multi-channel MitM position. In particular, the adversary ﬁrst
associates with the target network. Then, instead of starting
the 4-way handshake, the adversary will send a handshake,
i. e., EAPOL, frame to the AP with as ﬁnal destination a client
that is connected to the network. A vulnerable AP accepts
and forwards this EAPOL frame to its destination, in this case
the targeted client. Moreover, the AP will encrypt this frame
towards the client. The adversary can then uses its MitM posi-
tion to set the A-MSDU ﬂag in the encrypted EAPOL frame.
An adversary can then inject arbitrary packets by constructing
an EAPOL frame as illustrated in Figure 8 and placing the
packet to be injected in the second A-MSDU subframe.
Against a NetBSD AP, an adversary can also send a large
EAPOL frame, after which the AP will fragment, encrypt, and
forward it to the targeted client. In other words, the adversary
can abuse a NetBSD AP to generate encrypted fragments.
This can be combined with the cache attack by ﬁrst poisoning
the fragment cache of the victim, and then generating a second
encrypted fragment through the NetBSD AP that causes the
victim to reassemble the fragments and process the injected
packet. Another option is to abuse this against clients that
accept fragmented frames as long as the last fragment is en-
crypted. Unfortunately, most NetBSD drivers do not support
sending fragmented frames, and only send the ﬁrst fragment
and drop subsequent ones. Nevertheless, drivers such as ath
do transmit all fragments, which an adversary can exploit to
more easily perform fragmentation-based attacks.
6.7 Skipping the TKIP authenticity check
Fragmentation attacks should be impossible against TKIP
because it veriﬁes the authenticity of the full (reassembled)
frame. However, we found several network cards on Linux
and Windows that do not verify the authenticity of reassem-
bled TKIP frames (CVE-2020-26141). On Windows, the
AWUS036H, AWUS036ACH, and TL-WN725N are affected,
and on Linux the NWD6505 and AWUS036ACM are af-
fected. Against these devices our fragmentation-based attacks
are possible even if the old TKIP protocol is used.
6.8 Treating fragments as full frames
Certain implementations, such as OpenBSD and the ESP-12F,
do not support A-MSDUs or fragmented frames. However,
USENIX Association
30th USENIX Security Symposium    173
they are still vulnerable to attacks because they treat all frames
as non-fragmented ones (CVE-2020-26142). An adversary
can abuse this to inject arbitrary network packets by control-
ling the content that is included in one of the fragments. This
can be accomplished in the relaxed BEAST threat model by
making the client load an attacker-controlled URL or resource,
such that the resulting request or response is fragmented at
the Wi-Fi layer, and one of the fragments purely consists of
attacker-controlled data (which is then treated as a full frame).
In the case of OpenBSD, the more fragments ﬂag is not
included in the associated metadata when decrypting a frag-
ment, causing decryption to fail on all but the last fragment.
The last fragment does not have this ﬂag set, meaning it is
successfully decrypted and will be processed as a full frame.
OpenBSD can also ofﬂoad decryption to the Wi-Fi chip. In
that case, all fragments are properly decrypted, but OpenBSD
treats each decrypted fragment as an unfragmented frame. In
both cases it is possible to inject arbitrary network packets by
controlling the content that is included in the last fragment.
We conﬁrmed the resulting attack(s) against the ESP-12F,
which even accepted plaintext frames, and against OpenBSD
6.6 when it acted as a client using a Belkin F5D8053 v3 or
Intel 8265. We conjecture that other devices, which also do
not support fragmentation, can be attacked in similar ways.
7 Related Work & Discussion
In this section we cover related work, give an overview of all
our countermeasures, discuss results, and explore future work.
7.1 Related work
Aggregation Robyns et al. presented packet-in-packet
attacks that exploit aggregated MPDUs where (encrypted)
frames are aggregated close to the physical layer [45]. In this
aggregation method, encryption happens before aggregation,
and their attacks enabled the remote injection of frames in
open (but not protected) Wi-Fi networks. Similarly, other
packet-in-packet attacks against different protocols are also
only feasible in open networks [15,23]. We study aggregation
at a higher network layer, where encryption takes places after
aggregation. Our resulting attacks apply to protected Wi-Fi
networks and allow an adversary, that is within radio range
of victims, to inject packets. In other work, A-MSDUs were
abused to more easily trigger key reinstallations [58], but no
attention was paid to the unauthenticated A-MSDU ﬂag.
Fragmentation Previous work abused fragmentation to
more efﬁciently exploit known ﬂaws in WEP [13], but did not
uncover ﬂaws in (de)fragmentation features itself. Schepers et
al. found that OpenBSD incorrectly handled fragmented TKIP
frames [50], allowing Denial-of-Service (DoS) attacks and
packet injection, but this was an implementation vulnerability
and not a design ﬂaw in the standard.
Implementation ﬂaws in IPv4 and IPv6 (de)fragmentation
have been abused for DoS attacks, ﬁrewall evasion, etc [9,36].
It was also abused to launch off-path DNS cache poisoning
attacks by bypassing its plaintext challenge-response proto-
col [28]. This was possible because the ﬁrst fragment of a
response contains the unpredictable challenge values, and
an adversary can replace the second fragment with malicious
data. In contrast, our attacks work against encrypted protocols.
Nowadays, IP fragmentation is considered fragile [14].
Against 6LoWPAN, fragmentation was abused to launch a
DoS attack by preventing (correct) packet reassembly [29].
Formal models Cremers et al. formally modeled WPA2
and demonstrated the correctness of key reinstallation de-
fenses. Their model did not include aggregation and fragmen-
tation functionality, and therefore missed the attacks that we
discovered [18]. Other work on formally verifying and mod-
eling WPA2 only focuses on the 4-way handshake [26, 51].
Wi-Fi security Lately major advancements have been
made to the security of Wi-Fi. This includes the discovery
and prevention of key reinstallations in WPA2 [57, 58], the
release of WPA3 [60], and extra defenses such as operating
channel validation and beacon protection [54, 55]. Although
shortcomings in WPA3 were identiﬁed [40, 59], these have
been addressed in an update to the standard [25]. Finally, a
recent update to WPA3 improves the security of enterprise
networks, as these were often insecurely conﬁgured [10, 16].
Other work studied Wi-Fi provisioning schemes [38], in-
ferred and analyzed state machines [52], and studied potential
electromagnetic side-channel leaks in 802.11 radios [17].
7.2 Countermeasures for the design ﬂaws
Spooﬁng aggregated frames The aggregation attack of
Section 3 can be prevented by updating the standard to assure
the A-MSDU ﬂag is always authenticated, i. e., assuring only
SPP A-MSDUs are used. This can be accomplished by setting
and adhering to the “SPP A-MSDU required” ﬂag in the RSN
element when connecting to another station or network. In
theory, this assures all stations either: (1) never accept/send
A-MSDUs; or (2) always authenticate the A-MSDU ﬂag in
sent and received frames [31, Table 11-12].
The RSN element also contains a ﬂag to indicate whether
the device supports SPP A-MSDUs. When a device does not
set this ﬂag, but does set the SPP required ﬂag, this means no
A-MSDUs should to sent to it. In other words, if a device does
not support SPP A-MSDUs, this ﬂag combination instructs
peers to never accept or send A-MSDUs [31, Table 11-12].
This ﬂag combination also prohibits the device itself to send or
accept A-MSDUs, preventing all possible aggregation attacks.
Unfortunately, most devices ignore the SPP ﬂags in the
RSN element, and will send or accept non-SPP A-MSDUs
independent of these ﬂags. Therefore, if a device sets the SPP
required ﬂag, and a peer still sends non-SPP A-MSDUs, these
174    30th USENIX Security Symposium
USENIX Association
will be dropped. In other words, setting the SPP required ﬂag
may degrade reliability. It also means the attack of Section 3.5
remains possible because, when the sender does not authen-
ticate the A-MSDU ﬂag, it masks the A-MSDU ﬂag to zero
in the authenticated metadata (recall Section 2.1). As a result,
an attacker can unset the A-MSDU ﬂag without the receiver
noticing this. Nevertheless, the impact of this attack appears
low, and as a defense we therefore still recommend to set and
adhere to the SPP required ﬂag in the RSN element.
If dropping non-SPP A-MSDUs is not feasible, attacks can
be mitigated by dropping the full A-MSDU frame if any of
the subframe’s MAC addresses do not belong to connected
stations. In particular, A-MSDUs must be dropped if their ﬁrst
6 bytes equal the start of an LLC/SNAP header, i. e., if the des-
tination address of the ﬁrst subframe is AA:AA:03:00:00:00.
Although this prevents our main attack, other novel aggrega-
tion-based attacks may remain possible.
Mixed key attack Mixed key attacks of Section 4 can be
prevented by not reassembling fragments that were decrypted
using different keys, which is backwards-compatible because
this does not occur in normal circumstances. The standard
and all implementations should be updated to include this
check. An efﬁcient way to implement this is to assign an in-
cremental key identiﬁer to decrypted fragments, increase this
identiﬁer whenever a new key is installed, and verifying that
all fragments were decrypted using the same key identiﬁer.
To mitigate (but not prevent) attacks against receivers, a
transmitter can decide to never use fragmentation. However,
this may reduce reliability. Note that clearing the fragment
cache whenever installing a key does not prevent mixed key
attacks when using multiple key support (recall Section 4.4).
Cache attack The fragment cache attack of Section 5
can be prevented by updating clients to clear the fragment
cache whenever (re)connecting or (re)associating with a net-
work. Similarly, an AP should clear all fragments received by
a speciﬁc client when this client reconnects, reassociates, or
disconnects from the network. These changes are backwards-
compatible since legitimate devices do not rely on this vul-
nerable behavior. The 802.11 standard and all existing imple-
mentations should be updated to perform these actions.
7.3 Overall discussion
Test considerations Several devices were not affected by
our default attack(s), but only to minor variants, e. g., FreeBSD
and OpenBSD. Therefore, we recommend to only consider a
device secure if there are explicit checks in the code to prevent
attacks and if practical tests show it is indeed not vulnerable.
To test attacks, driver and ﬁrmware patches are required to
reliably inject fragmented frames. Otherwise important ﬁelds
may be overwritten, causing attacks to fail. This obstacle
when testing attacks may be one reason why the discovered
design ﬂaws went unnoticed for more than two decades.
Future work Crucial future work is formally modeling
802.11’s aggregation and fragmentation features to evaluate,
and increase conﬁdence in, the correctness of our defenses.
It is also worthwhile to investigate how 802.11ax can be
abused to induce fragmentation in practice, since this would
increase the impact of our fragmentation-based attacks.
We also believe it is important to study in more detail how
different ﬂaws can be combined in practical attacks. Finally,
we consider it interesting future work to analyze other (pro-
prietary) protocols for similar fragmentation-based ﬂaws.
8 Conclusion
We discovered widespread design and implementation ﬂaws
related to frame aggregation and fragmentation. Interestingly,
our aggregation attack could have been avoided if devices
had implemented optional security improvements earlier. This
highlights the importance of deploying security improvements
before practical attacks are known. The two fragmentation-
based design ﬂaws were, at a high level, caused by not ade-
quately separating different security contexts. From this we
learn that properly separating security contexts is an important
principle to take into account when designing protocols.
In practice, our implementation-speciﬁc vulnerabilities are
the most devastating. Several enable the trivial injection of
frames, which we abused to trick a victim into using a mali-
cious DNS server to then intercept most of the victim’s trafﬁc.
Acknowledgments
We thank LANCOM, Aruba, and Cisco for their test devices,
and thank Cisco for help with the disclosure. This work was
supported by the Center for Cyber Security at New York Uni-
versity Abu Dhabi (NYUAD). The author holds a Postdoctoral
fellowship from the Research Foundation Flanders (FWO).
References
[1] https://github.com/vanhoefm/fragattack
[2] Md Sohail Ahmad. Wpa too! In DEF CON, 2010.
[3] Nadhem J. Al Fardan and Kenneth G. Paterson. Lucky
thirteen: Breaking the TLS and DTLS record protocols.
In IEEE S&P, 2013.
[4] Martin R Albrecht and Kenneth G Paterson. Lucky
microseconds: a timing attack on amazon’s s2n imple-
mentation of TLS. In Eurocrypt, 2016.
[5] Nadhem AlFardan, Daniel Bernstein, Kenneth Paterson,
Bertram Poettering, and Jacob Schuldt. On the security
of RC4 in TLS and WPA. In USENIX Security, 2013.
[6] Wi-Fi Alliance. Hotspot 2.0 Speciﬁcation Ver. 3.1, 2019.
USENIX Association
30th USENIX Security Symposium    175
[7] Amazon.
AWS IP address ranges.
Retrieved
3 June 2020 form https://docs.aws.amazon.com/
general/latest/gr/aws-ip-ranges.html, 2020.
[8] Arch Linux Wiki.
Network conﬁguration /
Retrieved 18 February 2020 from
wireless.
https://wiki.archlinux.org/index.php/
Network_configuration/Wireless, 2020.
[22] Christina Garman, Kenneth G. Paterson, and Thyla Van
der Merwe. Attacks only get better: Password recovery
attacks against RC4 in TLS. In USENIX Security, 2015.
[23] Travis Goodspeed, Sergey Bratus, Ricky Melgares, Re-
becca Shapiro, and Ryan Speers. Packets in packets:
Orson welles’ in-band signaling attacks for modern ra-
dios. In USENIX WOOT, 2011.
[9] Antonios Atlasis. Attacking IPv6 implementation using
fragmentation. In Black Hat EU Brieﬁngs, 2012.
[24] Finn Michael Halvorsen and Olav Haugen. Cryptanaly-
sis of ieee 802.11i TKIP. Master’s thesis, 2009.
[10] Alberto Bartoli, Eric Medvet, Andrea De Lorenzo, and
Fabiano Tarlao. (in)secure conﬁguration practices of
WPA2 enterprise supplicants. In WiSec, 2018.
[11] Johannes Berg. mac80211: check PN correctly for
GCMP-encrypted fragmented MPDUs. Linux commit
9acc54beb474, 2016.
[12] Karthikeyan Bhargavan and Gaëtan Leurent. On the
practical (in-)security of 64-bit block ciphers: Collision
In CCS,
attacks on HTTP over TLS and OpenVPN.
2016.
[13] Andrea Bittau, Mark Handley, and Joshua Lackey. The
ﬁnal nail in WEP’s cofﬁn. In IEEE S&P, 2006.
[14] Ron Bonica, Fred Baker, Geoff Huston, Bob Hinden, Ole
Trøan, and Fernando Gont. IP fragmentation considered