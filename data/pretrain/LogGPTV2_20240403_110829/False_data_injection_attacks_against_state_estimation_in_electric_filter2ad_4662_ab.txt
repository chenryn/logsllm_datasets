to identify multiple interacting bad measurements. For ex-
ample, Asada et al proposed an intelligent bad data identi-
ﬁcation strategy based on tabu search to deal with multiple
interacting bad measurements [4].
Recently, the focus in bad measurement processing is on
the improvement of the robustness using phasor measure-
ment units (PMUs) [6,7,35,36]. For example, Chen et al. [7]
23used PMUs to transform the critical measurements into re-
dundant measurements such that the bad measurements can
be detected by the measurement residual testing.
It would seem that at least the approaches targeting at
arbitrary, interacting bad measurements (e.g., [4, 12, 21, 25])
can also defeat the malicious ones injected by attackers, since
such malicious measurements are indeed arbitrary, interact-
ing bad measurements. However, despite the variations in
these approaches, all of them use the same method (i.e.,
(cid:4)z − Hˆx(cid:4) > τ ) to detect the existence of bad measure-
ments. In this paper, we show that an attacker can system-
atically bypass this detection method, and thus all existing
approaches.
3. FALSE DATA INJECTION ATTACKS
We assume that there are m meters that provide m mea-
surements z1, ..., zm and there are n state variables x1, ..., xn.
The relationship between these m meter measurements and
n state variables can be characterized by an m × n matrix
H, as discussed in Section 2. In general, the matrix H of a
power system is a constant matrix determined by the topol-
ogy and line impedances of the system. How the control
center constructs H is illustrated in [23]. We also assume
that the attacker can have access to the matrix H of the
target power system, and can inject malicious measurements
into compromised meters to undermine the state estimation
process.
As discussed earlier, we consider two realistic attack goals:
random false data injection attacks, in which the attacker
aims to ﬁnd any attack vector as long as it can result in a
wrong estimation of state variables, and targeted false data
injection attacks, in which the attacker aims to ﬁnd an at-
tack vector that can inject a speciﬁc error into certain state
variables. While the latter attacks can potentially cause
more damage to the system, the former ones are easier to
launch, as shown in Section 4.
Besides describing the basic false data injection attacks,
we also use the following two realistic attack scenarios to
facilitate the discussion on how the attacker can construct
attack vectors to bypass the current bad measurement de-
tection scheme. Note, however, that the false data injection
attacks are not constrained by these attack scenarios.
• Scenario I – Limited Access to Meters: The at-
tacker is restricted to accessing some speciﬁc meters
due to, for example, diﬀerent physical protection of
meters.
• Scenario II – Limited Resources to Compro-
mise Meters: The attacker is limited in the resources
required to compromise meters. For example, the at-
tacker only has resources to compromise up to k meters
(out of all the meters). Due to the limited resources,
the attacker may also want to minimize the number of
meters to be compromised.
In the following, we ﬁrst show the basic principle of false
data injection attacks. We then focus on the two attack
scenarios and show how to construct attack vectors for both
random and targeted false data injection attacks.
3.1 Basic Principle
Let za represent the vector of observed measurements
that may contain malicious data. za can be represented
as za = z + a, where z = (z1, ..., zm)T is the vector of orig-
inal measurements and a = (a1, ..., am)T is the malicious
data added to the original measurements. We refer to a as
an attack vector. The i-th element ai being non-zero means
that the attacker compromises the i-th meter, and then re-
places its original measurement zi with a phony measure-
ment zi + ai.
The attacker can choose any non-zero arbitrary vector as
the attack vector a, and then construct the malicious mea-
surements za = z + a. Let ˆxbad and ˆx denote the estimates
of x using the malicious measurements za and the original
measurements z, respectively. ˆxbad can be represented as
ˆx + c, where c is a non-zero vector of length n. Note that c
reﬂects the estimation error injected by the attacker.
As discussed in Section 2, the bad measurement detec-
tion algorithm computes the L2-norm of the corresponding
measurement residual to check whether there exist bad mea-
surements or not. However, if the attacker uses Hc as the
attack vector a (i.e., a = Hc), then the L2-norm of the mea-
surement residual of za is equal to that of z, as shown in
Theorem 1. In other words, if the attacker chooses a as a
linear combination of the column vectors of H, za can pass
the detection as long as z can pass the detection.
Theorem 1. Suppose the original measurements z can
pass the bad measurement detection. The malicious mea-
surements za = z + a can pass the bad measurement detec-
tion if a is a linear combination of the column vectors of H
(i.e., a = Hc).
Proof. Since z can pass the detection, we have (cid:4)z −
Hˆx(cid:4) ≤ τ , where τ is the detection threshold. ˆxbad, the
vector of estimated state variables obtained from za, can be
represented as ˆx + c. If a = Hc, i.e., a is a linear combina-
tion of the column vectors h1, ..., hn of H, then the resulting
L2-norm of the measurement residual is
(cid:4)za − Hˆxbad(cid:4) = (cid:4)z + a − H(ˆx + c)(cid:4)
= (cid:4)z − Hˆx + (a − Hc)(cid:4)
= (cid:4)z − Hˆx(cid:4) ≤ τ.
(5)
Thus, the L2-norm of the measurement residual of za is less
than the threshold τ . This means that za can also pass the
bad measurement detection.
In this paper, we refer to an attack in which the attack
vector a equals Hc, where c is an arbitrary non-zero vector,
as a false data injection attack. By launching false data
injection attacks, the attacker can manipulate the injected
false data to bypass the bad measurement detection and
also introduce arbitrary errors into the output of the state
estimation (since each element of c could be an arbitrary
number).
3.2 Scenario I – Limited Access to Meters
We assume that the attacker has access to k speciﬁc me-
ters. Assume Im = {i1, ..., ik} is the set of indices of those
meters. In other words, the attacker can modify zij , where
ij ∈ Im. To launch a false data injection attack without
being detected, the attacker needs to ﬁnd a non-zero attack
vector a = (a1, ..., am)T such that ai = 0 for i /∈ Im and
a is a linear combination of the column vectors of H (i.e.,
a = Hc).
243.2.1 Random False Data Injection Attack
As discussed earlier, the non-zero attack vector a satisﬁes
the condition a = (a1, ..., am)T = Hc with ai = 0 for i /∈ Im.
In a random false data injection attack, the vector c (i.e., the
errors introduced to the state variables) can be any value.
The attacker can ﬁnd an attack vector a as follows. First,
the attacker can compute an equivalent form of the rela-
−1HT, and
tion a = Hc by eliminating c. Let P = H(HTH)
B = P − I. It is easy to see that PH = H. The attacker
can simply multiply P to both sides of the relation a = Hc
to obtain a sequence of equivalent forms, as shown below:
a = Hc ⇔ Pa = PHc ⇔ Pa = Hc ⇔ Pa = a
⇔ Pa − a = 0 ⇔ (P − I)a = 0
⇔ Ba = 0.
(6)
This means that a vector a satisﬁes the relation a = Hc if
and only if it satisﬁes the relation Ba = 0. The attacker
needs to ﬁnd a non-zero attack vector a such that Ba = 0
and ai = 0 for i /∈ Im.
There are many known methods to obtain attack vectors
from the above equation. Here is a simple one: Repre-
sent a as a = (0, ..., 0, ai1 , 0, ..., 0, ai2 , 0, ..., 0, aik , 0, ..., 0)T ,
where ai1 , ai2 , ..., aik are the unknown variables. Let B =
(b1, ..., bm), where bi (1 ≤ i ≤ m) is the i-th column vector
of B. Thus, Ba = 0 ⇔ (..., bi1 , ..., bi2 , ..., bik , ...)(0, ..., 0, ai1 ,
0, ..., 0, ai2 , 0, ..., 0, aik , 0, ..., 0)T = 0. Let the m × k matrix
(cid:3)
= (ai1 , ..., aik )T .
= (bi1 , ..., bik ) and the length k vector a
(cid:3)
B
We have
(cid:3)
(cid:3)
Ba = 0 ⇔ B
= 0.
(cid:3)
(cid:3)
is less than k, B
a
(cid:3)
(cid:3)
If the rank of B
(cid:3)
is a rank deﬁcient
matrix, and there exist inﬁnite number of non-zero solutions
(cid:3)
a
= 0 [20]. According to [20], the solution
that satisfy B
= (I − B
(cid:3)
(cid:3)−
is a
is the Matrix 1-inverse of
and d is an arbitrary non-zero vector of length k.
B
If the rank of B
is not a rank deﬁcient matrix
and the relation B
= 0 [20].
This means that no error can be injected into the state es-
timation, and the attacker vector does not exist.
a
B)d, where B
(cid:3)
(cid:3)
= 0 has a unique solution a
is k, then B
(cid:3)
a
(cid:3)−
(cid:3)
(cid:3)
Existence of Attack Vectors: It is possible that the at-
tack vector does not exist if k is too small. However, if
k ≥ m − n + 1, the attack vector always exists, as shown in
Theorem 2. Moreover, as long as the attacker can compro-
mise m− n + 1 or more meters, he/she can always construct
an attack vector to bypass the detection.
Theorem 2. If the attacker can compromise k speciﬁc
meters, where k ≥ m−n+1, there always exist attack vectors
a = Hc such that a (cid:7)= 0 and ai = 0 for i /∈ Im.
Proof. According to Equation (6), a = Hc ⇔ Ba = 0,
where B = P − I = H(HTH)
−1HT − I. H should be an
m × n full rank matrix to allow the estimation of x from
z [31]. Without loss of generality, we further assume m ≥
−1HT, P is
n. Thus, rank(H) = n. Since P = H(HTH)
a projection matrix of H. Thus, rank(P) = rank(H) = n,
and n eigenvalues of P are 1’s and the remaining m − n
eigenvalues of P are 0’s [20]. Obviously, for B = P − I, m−
n eigenvalues of B are 1’s and n eigenvalues of B are 0’s.
Therefore, rank(B) = m − n. The matrix B
is a m × k
) ≤ m − n. Further considering k ≥
matrix. So rank(B
m− n + 1, we have rank(B
is rank deﬁcient
matrix and there exist inﬁnite number of non-zero solutions
) < k. Thus, B
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
a
(cid:3)a(cid:3)
to solve B
that satisfy the relation B
= 0. This means there
for a
exist many non-zero attack vectors a in which ai = 0 for
i /∈ Im.
Construction of Attack Vectors: When k ≥ m − n + 1,
the attacker does not need to compute the matrices B and
(cid:3)
B
= 0. Instead, the attacker can perform col-
umn transformations on H directly such that some column
vectors in the resulting matrix become linear combinations
of column vectors in H and at the same time, the elements
corresponding to the meters not controlled by the attacker
are eliminated (i.e., ai = 0 for i /∈ Im). Each such vector
can be used as an attack vector.
Speciﬁcally, let ¯Im = {j|1 ≤ j ≤ m, j /∈ Im}, and H =
(h1, ..., hn), where hi = (h1,i, ..., hm,i)T for 1 ≤ i ≤ n. For
a random j ∈ ¯Im (i.e., the meter not under the attacker’s
control), the attacker ﬁrst scans H to look for a column
vector whose j-th element is not zero. If the attacker can
ﬁnd such a vector, the attacker swaps it with h1. Then,
the attacker can construct an m × (n − 1) matrix H1 =
(h1
n−1) by performing column transformations on
H (to zero out the j-th element in all column vectors):
if hj,i+1 (cid:7)= 0, 1 ≤ i ≤ n − 1
if hj,i+1 = 0, 1 ≤ i ≤ n − 1
i = h1− hj,1
hj,i+1 hi+1,
hi+1,
1, ..., h1
1
h
(7)
If the j-th element is zero for all the column vectors of
i = hi for 1 ≤ i ≤ n − 1. As a result, the j-th
H, then h1
row of H1 are all zeros. The attacker repeats this process
to the reduced matrix H1 and the reduced matrices there-
after using a diﬀerent element in ¯Im, until all elements in
¯Im are exhausted. Finally, the attacker can get a matrix
having at least one column vector, since m − k ≤ n − 1.
Obviously, the column vectors of the ﬁnal matrix are linear
combinations of the column vectors of H, and the m − k
rows with index j ∈ ¯Im of this matrix consist of all 0’s. Any
column vector can be used as an attack vector. The number
of arithmetic operations in the elementary transformations
is at most m(n − 1) + m(n − 2) + ... + 1 =
mn(n−1)
.
2
3.2.2 Targeted False Data Injection Attack
In a targeted false data injection attack, the attacker in-
tends to inject speciﬁc errors into the estimation of certain
chosen state variables. This attack can be represented math-
ematically as follows. Let Iv = {i1, ..., ir}, where r < n,
denote the set of indexes of the r target state variables
chosen by the attacker. (That is, the attacker has chosen
xi1 , xi2 , ..., xir to compromise.) In this attack, the attacker
intends to construct an attack vector a such that the result-
ing estimate ˆxbad = ˆx + c, where c = (c1, c2, ..., cn)T and ci
for i ∈ Iv is the speciﬁc error that the attacker has chosen
to inject to ˆxi. That is, the attacker wants to replace ˆxi1 , ...,
and ˆxir with ˆxi1 + ci1 , ..., and ˆxir + cir , respectively.
We consider two cases for the targeted false data injection
attack: A constrained and an unconstrained case.
In the
constrained case, the attacker wants to launch a targeted
false data injection attack that only changes the target state
variables but does not pollute the other state variables. The
constrained case represents the situations where the control
center (software or operator) may know ways to verify the
estimates of the other state variables. In the unconstrained
case, the attacker has no concerns on the impact on the other
state variables when attacking the chosen ones.
25Constrained Case: The construction of an attack vector
a becomes rather simple in the constrained case. Consider
the relation a = Hc. As discussed earlier, the attack vector
a must satisfy the condition that ai = 0 where i /∈ Im.
Note that every element ci in c is ﬁxed, which is either
the chosen value when i ∈ Iv or 0 when i /∈ Iv. Thus, the
attacker can substitute c back into the relation a = Hc, and
check if ai = 0 for ∀i /∈ Im. If yes, the attacker succeeds
in constructing the (only) attack vector a. Otherwise, the
attack is impossible.
Unconstrained Case: In this case, only the elements ci of
c for i ∈ Iv are ﬁxed; the other elements cj for j /∈ Iv can
be any values. The attacker can ﬁrst transform a = Hc into
an equivalent form without having c, and then solve a from
the equivalent form.
Note that a = Hc =i /∈Iv hici +j∈Iv hj cj. Let Hs =
(hj1 , ..., hjn−r ) and cs = (cj1 , ..., cjn−r )T , where ji /∈ Iv for
1 ≤ i ≤ n−r. Let b =j∈Iv hj cj , Ps = Hs(HT
−1HT
s ,
Bs = Ps − I, and y = Bsb. Thus, the relation a = Hc can
be transformed into the following equivalent form:
a = Hc ⇔ a = (cid:9)i /∈Iv
hj cj = Hscs + b
s Hs)
hici + (cid:9)j∈Iv
⇔ Psa = PsHscs + Psb
⇔ Psa = Hscs + Psb
⇔ Psa = a − b + Psb
⇔ (Ps − I)a = (Ps − I)b
⇔ Bsa = Bsb ⇔ Bsa = y.
(8)
This implies that a satisﬁes the relation a = Hc if and only if
a satisﬁes the relation Bsa = y. (It is easy to see that Bs is
an m×m matrix.) Thus, the attacker needs to ﬁnd an attack
vector a such that Bsa = y where a = (a1, a2, ..., am)T and
ai = 0 for i /∈ Im.
There are k unknown elements in a at positions i1, ..., ik,
where i1, ..., ik ∈ Im. Thus, the vector a can be written
as a = (0, ..., 0, ai1 , 0, ..., 0, aik , 0, ..., 0)T , where aij ’s are un-
known elements to be solved. Suppose Bs = (bs1 , ..., bsm ),
where bsi (1 ≤ i ≤ m) is the i-th column vector of Bs.
We follow the same reasoning as in Section 3.2.1 to denote
(cid:3)
= (ai1 , ..., aik )T . Then we have
B