### Table I: Number of SSL/TLS Certificates Used by Different Implementations for Testing

| Implementation | Certificate Count |
|----------------|-------------------|
| NSS            | 64                |
| GnuTLS         | 51                |
| OpenSSL        | 44                |
| PolarSSL       | 18                |
| CyaSSL         | 9                 |
| MatrixSSL      | 9                 |

Testing with a limited number of valid certificates is unlikely to uncover vulnerabilities, omissions, and implementation flaws in the certificate validation logic. For example, we found that GnuTLS mistakenly accepts all version 1 certificates, even though the default flag is set to accept only locally trusted version 1 root certificates (see Section IX). This vulnerability would not have been discovered with their existing test suite, as it only contains version 3 certificates.

Automated adversarial testing is rarely, if ever, performed for SSL/TLS implementations. As demonstrated in this paper, systematic testing with inputs that do not satisfy the protocol specification significantly improves the chances of uncovering subtle implementation flaws.

Several SSL/TLS implementations in our study, including OpenSSL, NSS, and MatrixSSL, have been tested and certified according to FIPS 140-2 [30], the U.S. government computer security standard for cryptographic modules. However, as our testing results show, FIPS certification does not guarantee that an implementation performs authentication correctly or is secure against man-in-the-middle attacks.

---

### Table II: 20 Most Common Issuers in Our Corpus

| Common Name (CN) | Occurrences |
|------------------|-------------|
| Cybertrust Public SureServer SV CA | 30066 |
| Go Daddy Secure Certification Authority | 13300 |
| localhost.localdomain | 7179 |
| GeoTrust SSL CA | 7171 |
| COMODO SSL CA | 7114 |
| RapidSSL CA | 6358 |
| COMODO SSL CA 2 | 5326 |
| BMS | 4878 |
| DigiCert High Assurance CA-3 | 4341 |
| Hitron Technologies Cable Modem Root Certificate Authority | 4013 |
| VeriSign Class 3 Secure Server CA - G3 | 3837 |
| COMODO High-Assurance Secure Server CA | 3681 |
| PositiveSSL CA 2 | 2724 |
| Entrust Certification Authority - L1C | 2719 |
| Daniel | 2639 |
| Vodafone (Secure Networks) | 2634 |
| 192.168.168.168 | 2417 |
| GeoTrust DV SSL CA | 2174 |
| localhost | 2142 |
| Parallels Panel | 2084 |

### VI. Collecting Certificates

We used ZMap [26] to scan the Internet and attempt an SSL connection to every host listening on port 443. If the connection was successful, the certificate presented by the server was saved along with the IP address of the host.

This scan yielded a corpus of 243,246 unique certificates. 23.5% of the collected certificates were already expired at the time they were presented by their servers, and 0.02% were not yet valid. The certificates in our corpus were issued by 33,837 unique issuers, identified by the value of their CN ("Common Name") field. Table II shows the 20 most common issuers.

23,698 of the certificates are X.509 version 1 (v1) certificates, 4,974 of which are expired. This is important because, as our testing has uncovered, any v1 certificate issued by a trusted CA can be used for man-in-the-middle attacks against several SSL/TLS implementations (see Section IX). 20,391 v1 certificates are self-signed. Table III shows the 10 most common issuers of the other 3,307 certificates.

localhost, localdomain, and 192.168.1.1 are all self-issued certificate chains, but many v1 certificates have been issued by trusted issuers, especially manufacturers of embedded devices. For example, Remotewd.com is used for remote control of Western Digital Smart TVs, while UBNT and ZTE make networking equipment. As shown in Section IX, SSL/TLS implementations that specifically target embedded devices handle v1 certificates incorrectly and are thus vulnerable to man-in-the-middle attacks using these certificates.

437 certificates in our corpus have version 4, even though there is no X.509 version 4. 434 of them are self-signed, and the other 3 are issued by Cyberoam, a manufacturer of hardware "security appliances." We conjecture that the cause is an off-by-one bug in the certificate issuance software: the version field in the certificate is zero-indexed, and if set to 3 by the issuer, it is interpreted as version 4 by SSL/TLS implementations.

Table IV shows the number of times various extensions appear in our corpus and how many unique values we observed for each extension. Extensions are labeled by short names if known, otherwise by their object identifiers (OID).

### Table III: 10 Most Common Issuers of X.509 Version 1 Certificates

| Common Name (CN) | Occurrences |
|------------------|-------------|
| BMS              | 4877        |
| Parallels Panel  | 2003        |
| localhost        | 1668        |
| brutus.neuronio.pt | 1196     |
| plesk            | 1163        |
| remotewd.com     | 1120        |
| UBNT             | 1094        |
| localdomain      | 986         |
| 192.168.1.1      | 507         |
| ZTE Corporation  | 501         |

### Table IV: Extensions Observed in Our Corpus

| Name or OID | Occurrences | Unique Values |
|-------------|-------------|---------------|
| basicConstraints | 161723 | 13 |
| authorityKeyIdentifier | 161572 | 21990 |
| subjectKeyIdentifier | 151823 | 72496 |
| keyUsage | 132970 | 54 |
| extendedKeyUsage | 131453 | 83 |
| crlDistributionPoints | 126579 | 4851 |
| subjectAltName | 101622 | 59767 |
| authorityInfoAccess | 89005 | 3864 |
| certificatePolicies | 81264 | 418 |
| nsCertType | 63913 | 21 |
| nsComment | 5870 | 185 |
| 1.3.6.1.4.1.311.20.2 | 2897 | 11 |
| issuerAltName | 1519 | 115 |
| 1.3.6.1.5.5.7.1.12 | 1474 | 2 |
| SMIME-CAPS | 915 | 4 |
| 1.3.6.1.4.1.311.21.10 | 875 | 16 |
| 1.3.6.1.4.1.311.21.7 | 873 | 312 |
| privateKeyUsagePeriod | 871 | 798 |
| 2.5.29.1 | 175 | 133 |
| nsRevocationUrl | 112 | 39 |
| nsCaRevocationUrl | 104 | 52 |
| nsCaPolicyUrl | 74 | 32 |
| nsSslServerName | 73 | 17 |
| nsBaseUrl | 63 | 31 |
| 1.2.840.113533.7.65.0 | 59 | 6 |
| 2.16.840.1.113719.1.9.4.1 | 54 | 26 |
| nsRenewalUrl | 33 | 7 |
| 2.5.29.80 | 10 | 10 |
| qcStatements | 8 | 7 |
| 2.5.29.7 | 7 | 6 |
| 2.16.840.1.113733.1.6.15 | 6 | 1 |
| 2.5.29.10 | 5 | 4 |
| 1.3.6.1.4.1.3401.8.1.1 | 4 | 3 |
| freshestCRL | 4 | 2 |
| subjectDirectoryAttributes | 4 | 2 |
| 1.3.6.1.4.1.311.10.11.11 | 3 | 2 |
| 2.5.29.3 | 3 | 1 |
| 2.16.840.1.113733.1.6.7 | 3 | 1 |
| 1.3.6.1.4.4324.33 | 2 | 1 |
| 1.3.6.1.4.4324.36 | 2 | 1 |
| 1.3.6.1.4.4324.34 | 2 | 1 |
| 1.3.6.1.4.4324.35 | 2 | 1 |
| 1.2.40.0.10.1.1.1 | 2 | 1 |
| 1.3.6.1.4.1.311.21.1 | 1 | 1 |
| 1.3.6.1.4.1.7650.1 | 1 | 1 |
| 1.3.6.1.4.1.311.10.11.87 | 1 | 1 |
| 1.3.6.1.4.1.311.10.11.26 | 1 | 1 |
| 1.3.6.1.4.1.8173.2.3.6 | 1 | 1 |
| 1.2.40.0.10.1.1.2 | 1 | 1 |
| 2.5.29.4 | 1 | 1 |
| 1.2.250.1.71.1.2.5 | 1 | 1 |
| 1.3.6.1.4.1.6334.2.2 | 1 | 1 |

### VII. Generating Frankencerts

The key challenge in generating test inputs for SSL/TLS implementations is creating strings that (1) are parsed as X.509 certificates by the implementations, but (2) exercise parts of their functionality that are rarely or never executed when processing normal certificates.

We use our corpus of real certificates (see Section VI) as the source of syntactically valid certificate parts. Our algorithm then assembles these parts into random combinations we call frankencerts. One limitation of the certificates in our corpus is that they all conform to the X.509 specification. To test how SSL/TLS implementations behave when faced with syntactically valid certificates that do not conform to X.509, we also synthesize artificial certificate parts and add them to the inputs of the frankencerts generator (see Section VII-B).

#### A. Generating Frankencerts

Algorithm 1 describes the generation of a single frankencert. Our prototype implementation of Frankencert is based on OpenSSL. It uses parts randomly selected from the corpus, with two exceptions: it generates a new RSA key and changes the issuer so that it can create chains where the generated frankencert acts as an intermediate certificate. The issuer field of each frankencert must be equal to the subject of the certificate one level higher in the chain, or else all tested implementations fail to follow the chain and do not attempt to validate any other part of the certificate. For every other field, the generator picks the value from a randomly chosen certificate in the corpus (a different certificate for each field).

Extensions are set as follows. The generator chooses a random number of extensions from among all extensions observed in the corpus (Table IV). For each extension, it randomly chooses a value from the set of all observed values for that extension. Each value, no matter how common or rare, has an equal probability of appearing in a frankencert.

We use two CAs as roots of trust, with an X.509 version 1 certificate and an X.509 version 3 certificate, respectively. For the purposes of testing, both root CAs are installed in the local root of trust and thus trusted by all tested SSL/TLS clients.

Each frankencert is a well-formed X.509 certificate signed by a locally trusted CA, but it may be invalid for a number of reasons. By design, the frankencert generator does not respect the constraints on X.509 extensions. It also randomly designates extensions as critical or non-critical in each generated frankencert, violating the requirement that certain extensions must be critical (Section IV). This allows us to test whether SSL/TLS implementations reject certificates with unknown critical extensions, as required by the X.509 RFC [69].

For certificate chains, we use between 0 and 3 frankencerts. Each intermediate certificate uses the previous certificateâ€™s (randomly chosen) subject as its issuer and is signed by the previous certificate, creating a chain that SSL/TLS implementations can follow. These chains are well-formed but may still be invalid due to the contents of random frankencerts.