title:How'd Security Benefit Reverse Engineers? : The Implication of Intel
CET on Function Identification
author:Hyungseok Kim and
Junoh Lee and
Soomin Kim and
Seungil Jung and
Sang Kil Cha
1
6
0
0
0
.
2
2
0
2
.
5
0
4
3
5
N
S
D
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
1
-
3
9
6
1
-
4
5
6
6
-
1
-
8
7
9
|
)
N
S
D
(
s
k
r
o
w
t
e
N
d
n
a
s
m
e
t
s
y
S
e
l
b
a
d
n
e
p
e
D
n
o
e
c
n
e
r
e
f
n
o
C
l
a
n
o
i
t
a
n
r
e
t
n
I
P
I
F
I
/
E
E
E
I
l
a
u
n
n
A
d
n
2
5
2
2
0
2
2022 52nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
How’d Security Beneﬁt Reverse Engineers?
The Implication of Intel CET on Function Identiﬁcation
Hyungseok Kim∗†, Junoh Lee†, Soomin Kim†, Seungil Jung‡, Sang Kil Cha†
∗The Afﬁliated Institute of ETRI, †KAIST, ‡KAIST CSRC
PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract—As CPU vendors
introduce various hardware-
assisted security features, modern compilers have started to
produce binaries containing security-related instructions. Inter-
estingly, such instructions tend to alter the shape of resulting
binaries, which can potentially affect the effectiveness of binary
analysis. This paper presents the ﬁrst systematic study on
the implication of the Intel CET (Control-ﬂow Enforcement
Technology) instructions on function identiﬁcation. Our study
ﬁnds that CET-relevant instructions provide useful, although
limited, hints for function entries. Therefore, we devise a novel
function identiﬁcation algorithm that utilizes the usage patterns
of CET instructions, and demonstrate a tool named FunSeeker
that implements the idea. Our evaluation shows that FunSeeker
signiﬁcantly outperforms current state-of-the-art function iden-
tiﬁcation tools in terms of both correctness and speed.
Index Terms—function identiﬁcation, binary analysis, Intel
CET, reverse engineering
I. INTRODUCTION
Memory corruption bugs have been existed for about a half
century. Yet, they pose a signiﬁcant security threat, allowing
an attacker to take full control over the victim machines.
Although there have been a variety of research attempts
to mitigate memory-based exploits [1], [10], [18], [25], [27],
[34], [34], [47], those techniques suffer from signiﬁcant perfor-
mance overhead, making them difﬁcult to be used in practice.
Hardware vendors attempt to address the performance chal-
lenge by introducing various security features as well as
new instruction sets. For example, Intel CET (Control-ﬂow
Enforcement Technology) [22], which is designed to enforce
the Control-Flow Integrity (CFI) [1] at a hardware level,
employs a set of new instructions to protect indirect branches
with negligible performance overhead [45]. In particular, po-
tential
instruction
(ENDBR32 or ENDBR64), indicating a valid destination of
an indirect jump. We call such a marker instruction as end-
branch instruction. ARM (ARMv8-A) also supports CFI by
introducing an end-branch instruction named BTI (Branch
Target Identiﬁcation) [5], which behaves similarly to Intel’s
ENDBR32 (or ENDBR64).
jump targets are marked with a special
Recently, major compilers, such as GCC and Clang, have
been adapted to emit such end-branch instructions by default.
In an ideal scenario, compilers should place an end-branch
instruction only at a target of an indirect branch. In practice,
however, compilers often regard most function entries as a
potential jump target as it is difﬁcult to statically resolve all
indirect jump targets.
Thus, the natural questions arise: Can an end-branch instruc-
tion exist at a program point other than a function entry? How
many functions in a CET-enabled binary start with an end-
branch instruction? Can CPU-based security features, such as
CET, beneﬁt reverse engineers?
To answer these questions, we perform a systematic study
that analyzes the distribution and the characteristics of end-
branch instructions in CET-enabled binaries. In our study,
we ﬁnd that (1) there are several program points other than
function entries where an end-branch instruction is used, and
(2) not every function contains an end-branch instruction. That
is, one cannot simply identify functions by solely relying on
the locations of end-branch instructions.
However, our study also reveals two syntactic properties
in CET-enabled binaries, which can indeed help identify
functions in them. First,
there are several program points
other than a function entry at which compilers place an end-
branch instruction, and they share a common syntactic pattern.
Therefore, one can exploit such a pattern to discern whether
an end-branch instruction represents a function entry or not.
Second, functions that do not include an end-branch instruction
are mostly a static function that is only accessed through a
direct reference. Therefore, one can recursively follow direct
call targets to identify them.
Based on the observed properties, we devise a novel func-
tion entry identiﬁcation algorithm, which does not rely on
any complex algorithms nor machine-learning techniques, and
demonstrate a tool, named FunSeeker, implementing the
algorithm. Our tool achieves signiﬁcantly better performance
than the current state-of-the-art tools in terms of both correct-
ness and speed. Speciﬁcally, FunSeeker achieves over 99%
precision and recall rates on a large dataset of CET-enabled
binaries, while being signiﬁcantly faster than existing tools.
In summary, the key contributions of this paper are:
1) We present the ﬁrst systematic study on the distribution
of Intel CET instructions in real-world binaries.
2) We design and implement FunSeeker, a function
identiﬁcation tool that outperforms the current state-of-
the-art tools in terms of both correctness and speed.
3) We publicize our tool (anonymized for submission)
as well as our large-scale benchmark to boost future
research in the ﬁeld.
II. INTEL CET BACKGROUND
Intel Control-ﬂow Enforcement Technology (CET) is de-
signed to enforce Control-Flow Integrity (CFI) at a hardware
level. Particularly, Intel CET includes two different mem-
ory protection mechanisms—Shadow Stack (SS) and Indirect
2158-3927/22/$31.00 ©2022 IEEE
DOI 10.1109/DSN53405.2022.00061
559
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:22 UTC from IEEE Xplore.  Restrictions apply. 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
void foo() { ... }
int main() {
// ..
void (*fp)();
fp = &fun;
switch(input)
{
case ’1’:
// ..
}
fp();
// ..
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
foo:
endbr64
push
# ...
rbp
main:
endbr64
# ...
lea
mov
# ...
add
notrack jmp
rdx, rax
rdx
rcx, [rip + foo]
[rbp - 16], rcx
.LBB1_1:
mov
# ...