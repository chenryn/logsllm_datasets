2.olevba：  
该工具可以有效的提取office文档中的宏代码，需要python环境支持。
上面这张图列举了olevba所支持的类型，和一些值得关注的地方，比如自动触发代码、一些危险的关键词（Downloads、File writes、Shell
execution DLL calls等）、还有一些IOCs
当然很多时候静态分析不能解决问题，还是需要动态分析才能更好地了解恶意代码的功能。这里分享一个软件ViperMonkey：
运行结构如下：
###  mraptor
mraptor是github上一个开源的宏代码检测项目  
大概介绍一下原理：  
mraptor有三个检测标准，分别是：  
A 自动执行（触发器）  
W 写入文件系统或内存  
X 在VBA上下文外执行文件或任何payload  
当某个office宏满足了A条件，那么W和X只要满足任意一条，则会被mraptor标注为恶意。  
该项目依赖python环境，用法如下：
    Usage: mraptor [options]  [filename2 ...]
    Options:
      -h, --help            show this help message and exit
      -r                    find files recursively in subdirectories.
      -z ZIP_PASSWORD, --zip=ZIP_PASSWORD
                            if the file is a zip archive, open all files from it,
                            using the provided password (requires Python 2.6+)
      -f ZIP_FNAME, --zipfname=ZIP_FNAME
                            if the file is a zip archive, file(s) to be opened
                            within the zip. Wildcards * and ? are supported.
                            (default:*)
      -l LOGLEVEL, --loglevel=LOGLEVEL
                            logging level debug/info/warning/error/critical
                            (default=warning)
      -m, --matches         Show matched strings.
    An exit code is returned based on the analysis result:
     - 0: No Macro
     - 1: Not MS Office
     - 2: Macro OK
     - 10: ERROR
     - 20: SUSPICIOUS
如果要扫描单个文件，可以使用如下命令  
mraptro file.doc
## 0x02 TransparentTribe的Dropper样本
样本md5:bce8a8ea8d47951abffeec38fbeeeef1  
样本app.any.run沙箱链接：
且从any的沙箱中，我们可以看到，该样本原始类型是xls。
我们将样本下载到本地，然后添加xls后缀打开(本地测试环境为office2013)。
该样本打开之后，没有任何的信息，office官方弹框提示用户选择启用/禁用宏。  
这里如果选择禁用的话，那么后续文档将显示为空：
这是攻击者一种迷惑用户的手法，诱导用户第二次重新打开并启用宏：
翻译后内容大概如下：
翻译文档内容的意义在于，通常来说，为了隐藏攻击痕迹，攻击者都会使用一个看起来正常的文档以迷惑用户。让用户以为打开的就是正常的文档，当用户认定这是一个正常文档，文档中的内容有”价值”时，往往就不会起疑心，木马就能够长时间的运行在用户的计算机上。所以我们通过文档的内容，通常情况下就可以推测出受攻击的目标。可以在攻击的背景分析中提供一些有用的信息。
我们从该样本的文档内容中大概可以得知此次攻击的目标是国防部，文档中提到了一个[PI:EMAIL](mailto:PI:EMAIL)的邮箱，我们通过对后面域名的查询，基本可以确定该文档是针对印度国防部的攻击文档：
由这个信息，我们也可以大概的对攻击者进行一个猜测。  
由攻击目标为印度，根据已有的信息，我们可以找到一些针对印度的攻击组织，如Confucius 、APT36(C-Major、Transparent
Tribe)、GravityRAT等。
接下来我们看看具体的恶意宏代码。
在打开的xls文档中，安ALT + F11，即可打开宏窗口，红框中的内容即为该文档的宏对象。
依次展开选项卡，可以看到有两个对象有数据，一个是名为UserForm1的窗体，一个是名为Module1的模块
我们直接将鼠标光标定位到右边的Module1模块中，然后按下键盘的F8，开始调试。  
在通过office调试宏代码时，调试的快捷键和od、x64dbg这种调试器有部分区别，具体如下：
这里F8类似于od中的F7，会逐语句执行代码，当遇到函数调用时，F8会跟进到函数内部。
逐过程Shift + F8相当于od中的F8，遇到函数调用时，将会直接执行完函数而不进入函数。
运行到光标处 Ctrl + F8 相当于od中的F4
此外，在宏调试器中，设置断点是F9，运行程序是F5。所以我们之后在调试宏代码时，我们也可以直接在某行代码设置断点，然后F5运行到断点处。
我们这里直接F8就是在当前的模块窗口中，开始调试宏代码，调试的方式是单步运行。
通常来说，F8运行之后，程序就会停在该模块的入口点。标黄显示，并且在最下面的本地窗口中会显示一些将要使用到的变量。
有时候不小心关闭了本地窗口，我们需要在视图窗口中重新打开。
接下来我们来看看代码，既然是调试VBA的代码，我们需要先对VBA的语法有个认识。比如应该知道Dim用于定义变量。  
在代码最开始，程序定义了多个变量
        Dim path_Aldi_file As String
        Dim file_Aldi_name  As String
        Dim zip_Aldi_file  As Variant
        Dim fldr_Aldi_name  As Variant
        Dim byt() As Byte
        Dim ar1Aldi() As String
然后通过  
file_Aldi_name = “rlbwrarhsa”  
对file_Aldi_name进行了赋值。
通过  
fldr_Aldi_name = Environ$(“ALLUSERSPROFILE”) & “Tdlawis”  
对fldr_Aldi_name进行赋值。  
其中，Environ$(“ALLUSERSPROFILE”) 表示获取%ALLUSERSPROFILE%环境变量，&符号表示拼接。  
所以该语句运行完之后，fldr_Aldi_name = %ALLUSERSPROFILE%Tdlawis  
当然，我们也可以直接按F8单步往下走，在调试器中查看对应的值，这是最快的方法。
接下来，程序通过VBA的Dir方法判断上面的fldr_Aldi_name路径是否存在，如果不存在则通过MkDir创建该路径。
    If Dir(fldr_Aldi_name, vbDirectory) = "" Then
       MkDir (fldr_Aldi_name)
    End If
Tdlawis路径创建成功之后，程序将对fldrz_Aldi_name
重新赋值，并且通过同样的手法尝试创建%ALLUSERSPROFILE%Dlphaws路径。
        fldrz_Aldi_name = Environ$("ALLUSERSPROFILE") & "Dlphaws"
        If Dir(fldrz_Aldi_name, vbDirectory) = "" Then
            MkDir (fldrz_Aldi_name)
        End If
接下来程序通过  
zip_Aldi_file = fldrz_Aldi_name & “omthrpa.zip”  
声明一个zip路径，路径应该为%ALLUSERSPROFILE%Dlphawsomthrpa.zip
通过  
path_Aldi_file = fldr_Aldi_name & file_Aldi_name & “.exe”  
声明一个path路径，路径应该为：%ALLUSERSPROFILE%Tdlawisrlbwrarhsa.exe
接下来，程序通过Application.OperatingSystem获取当前操作系统的版本并根据不同的情况进行不同的处理，如果当前系统版本为6.02或6.03，程序将获取UserForm1.TextBox2.Text的信息赋值给ar1Aldi。否则获取UserForm1.TextBox1.Text的内容赋值给ar1Aldi。
        If InStr(Application.OperatingSystem, "6.02") > 0 Or InStr(Application.OperatingSystem, "6.03") > 0 Then
            ar1Aldi = Split(UserForm1.TextBox2.Text, ":")
        Else
            ar1Aldi = Split(UserForm1.TextBox1.Text, ":")
        End If
关于获取操作系统版本信息的文档，可在[这里](https://docs.microsoft.com/zh-cn/office/vba/api/excel.application.operatingsystem)找到。
操作系统判断完成之后，程序就会将我们之前看到的窗体中的数据赋值给ar1Aldi变量：
然后通过一个for each循环对刚才赋值的ar1Aldi进行解密：
        For Each vl In ar1Aldi
            ReDim Preserve btsAldi(linAldi)
            btsAldi(linAldi) = CByte(vl)
            linAldi = linAldi + 1
        Next
然后我们可以直接光标定位到循环后面的代码，按Ctrl + F8 跑完循环
这里我们可以看到，程序会通过二进制流的方式打开zip_Aldi_file，也就是先前定义的zip文件，然后将刚才的btsAldi进行写入。
        Open zip_Aldi_file For Binary Access Write As #2
             Put #2, , btsAldi
        Close #2