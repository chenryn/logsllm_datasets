### 3.2 Extracting Abandoned Internet Resources

Our next step was to determine whether the 103,841 APKs contained abandoned Internet resources that could be hijacked. To achieve this, we developed a tool using the Androguard framework [4] to decompile and extract all hardcoded URLs from the APKs. We acknowledge that static analysis has certain limitations, which will be discussed in Sections 4.5 and 6.2.

In many cases, we could infer the type of service running on the resource by examining the URL. For example, a URL like `http://foo.test/rssFeed` indicates an RSS feed. We also extracted the line of code, function name, class name, and package name where the URL was found. We excluded schema URIs such as `http://schemas.android.com/apk/res/android`. Additionally, we were aware that some developers obfuscate their code before publishing the app. We filtered out these obfuscated codes, as they are often indicative of malicious apps, while our focus was on legitimate apps with abandoned Internet resources.

Next, we extracted the hostname from the URLs. If the hostname was a fully qualified domain name (FQDN), we used the Public Suffix List [15] to extract its effective second-level domain (e2LD). If the hostname was an IP address, we left it as is. From the distinct domains, we identified abandoned Internet resources using the following methods:

- **Expired Domain**: By sending a WHOIS query, we checked if a domain had expired or been deleted. We then verified if the domain was available for purchase through the GoDaddy Domain Availability API [11].
- **Parked Domain**: To determine if a domain was parked, we used the same technique as in [38]. When a domain is converted into a parked domain, its Name Server (NS) is configured to point to the domain parking service's NS. Vissers et al. studied 15 popular domain parking services and provided known NS record configurations for each [38]. We followed this information to identify parked domains.
- **Dangling Records (Dare)**: We used the methodology from Liu et al. [30] to search for IP addresses in Cloud Dare. We first determined if a domain pointed to an IP address in EC2 [7] or Azure [13] and scanned the IP address. During port scanning, we prioritized custom port numbers found in the URL. Otherwise, we assumed the app contacted the server using standard HTTP (port 80) or HTTPS (port 443). We performed a second scan two weeks after the first to confirm the host's status. We focused only on dangling records associated with EC2 or Azure.

For any hardcoded IP addresses found in the URLs, we checked if they fell within the EC2 or Azure IP address ranges. If so, we applied the same scanning methodology used for dangling records.

### 3.3 Classifying the Resources

To understand the potential for hijacking resources, we classified them into three categories: private service, third-party library, and third-party service. Figure 5 illustrates how we determined if a resource was used by a third-party library. Using LibRadar [31], we extracted information on the third-party libraries used by each APK. LibRadar provided the package names of third-party libraries even when obfuscated. We compared the package name of the resource found by our tool with the package name in LibRadar; if they matched, the resource was deemed to be used by a third-party library.

For classifying domains into private service or third-party service, we used several heuristics, as illustrated in Figure 6:

1. **Step 1**: If a resource was used by multiple APKs, we checked if the APKs had the same base package name and were published by the same developer by examining the developer information from the Google Play page.
2. **Step 2**: We then checked if the resource was found inside the base main package.
3. **Step 3**: If the resource was a domain, we used Fuzzy String Matching [10] to check if the domain resembled the package name or developer name. This library uses Levenshtein Distance to calculate the similarity between strings.

We also considered cases where the domain did not resemble the package name. In such instances, we examined the URL. Often, we found parts of the URL that resembled the domain and package/developer name. For example, several APKs (e.g., `appinventor.foo.x`, `appinventor.abc.yzx`, `appinventor.lll.mnl`) used the same domain (`foo.test`) and were developed by the same developer (MMDeveloper). However, only one APK had a base package name similar to the domain name (`appinventor.foo.x` and `foo.test`). In this case, we categorized it as a private service. It appears the developer initially bought this domain to support one specific APK but later used it for other APKs.

For the remaining domains that did not meet the criteria, we suspected they were third-party services. We used the following heuristics, as shown in Figure 7:

1. **Step 1**: If the domain was used by more than one APK but the APKs did not have the same base package name, we checked if they used it in the main package. Since the domain name did not resemble the package or developer name, we assumed it was likely a third-party service.
2. **Step 2**: We examined the URL to determine the type of service running on the domain (e.g., `http://www.foo.test/rssFeed`, `http://example.com/service.asmx?WSDL`, `http://example.org/wp-content`).
3. **Step 3**: If the subdomain of a domain was `www`, it was likely a website used by the apps. We confirmed this using archive.org.

For domains that could not be classified using these methods, we manually classified them through Google searches or manual code inspection. This method also failed in some cases.

### 3.4 Obtaining the Abandoned Resource

After confirming the existence of an abandoned Internet resource used by a mobile app, we attempted to determine if the app still had users by obtaining the resource. Before acquiring the domain, we checked the last query timestamp of the domain using Passive DNS. For expired domains, we re-registered them. For parked domains, we purchased them from the domain parking service that owned them. For dangling records, we "milked" the IP address from EC2 using a tool similar to IPScouters [30]. All limitations set in [30] were applied in our experiment. The IP address milking activity lasted two weeks. Unlike [30], where all acquired IP addresses were released, we kept the IP address and launched an instance on it. We set up a web server on the resource and captured all traffic that came to the server. We used the user-agent string in the HTTP Header to distinguish mobile traffic and sent it to a service [1] to filter out crawler traffic.

### 4. Measurement Results

From our measurement study conducted from June to November 2017, we found that abandoned Internet resources used by Android apps existed in various forms, as discussed earlier. In this section, we provide a high-level overview of our results, describe the characteristics of the resources, and present the impact of the found abandoned Internet resources, including findings on bogus domains. Finally, we discuss the threats to validity.

#### 4.1 Abandoned Internet Resources in the Wild

Table 1 presents the number of abandoned Internet resources found in our dataset of Android apps. In total, we found 3,628 hijackable abandoned Internet resources in 7,104 APKs. While this number is smaller than the total number of APKs, many APKs use more than one type of resource in their code.

Based on the numbers, expired domains are the most prevalent abandoned Internet resources found in mobile apps. Under the expired domain category, we included 350 domains (connected to 662 APKs) that had passed the expiration date and were in the Redemption Grace Period (RGP), after which they become available for public purchase. For parked domains, the number of APKs using these domains is 3.5 times higher than the number of domains, indicating they are high-traffic domains used by mobile apps.

The number of dangling records in EC2 and Azure, along with their corresponding APKs, are almost equal because most dangling records are used by one APK. Given that a host in EC2 is automatically assigned a domain name in the format `ec2-ip.compute-1.amazonaws.com`, we found many domains in this form among the dangling records in EC2. For dangling records in Azure, the number of APKs (55) is greater than the number of dangling records (56) due to an APK using two dangling record domains: `analytics.tapcontext.com` and `register.tapcontext.com`.

We also found several hardcoded IP addresses in EC2. Based on scan results, we concluded that these IP addresses were vacant and obtainable. There was a significant gap between the number of APKs using hardcoded IP addresses and the number of IP addresses themselves. This is due to one IP address found in a push notification library used by over 1,000 APKs, which will be discussed in detail in the next section. While we found hardcoded IP addresses in EC2, we did not find any in the Azure range.

#### 4.2 Characteristics of the Abandoned Internet Resources

Using the heuristics introduced in Section 3.3, we classified the abandoned Internet resources into three categories, as shown in Table 2. We found that the majority of expired domains were attributed to private services or third-party services.

In the private service category, we found 381 apps developed using the AppInventor [14] tool, which loads websites using WebView. Most of these websites are owned by the same developer, as the domain resembles part of the package name. For example, `appinventor.ai_emailrobind.PriceComparisonUSA-3.apk` and `pricecomparisonusa.com`. Another example is `ch.xot.latestbash` consuming `http://abash.at/rss.php` for content. Many APKs using third-party services load content from RSS feeds, web pages as WebViews, or scrape other websites. Resources that could not be classified with the heuristics were categorized as "unknown." All APKs in this category were obfuscated, and neither the domain name nor URL could be used to identify the developer. A search on archive.org produced no results.

Table 3 shows the number of distinct APKs for each category. There were 227 apps that belonged to one or more categories. Although there were only 100 resources in the third-party library category, they were used by 2,440 APKs. Thus, a change of ownership for this category of resources would have a widespread impact.

Table 4 presents the top 10 most used abandoned Internet resources. The IP address used by a third-party library developed by UrbanAirship is in first place. The library provides push notification services using the IP address and custom port number 8090 to access client configurations. Scanning results indicate that the custom port 8090, as well as ports 80 and 443, are not open. We suspect this IP address is obtainable, but despite continuous efforts to milk the IP address in EC2 for several days, we were unable to obtain it. It is possible that the company still retains this IP address even though it is no longer in use.

We consider private service type resources to be a more serious threat. In many cases, the app developer, who also manages and owns the resource, uses it to provide a critical feature, such as a web service. An example is the domain `kryptomens.com` owned by MYAPPHONE SAS, which supports a deprecated Google service called C2DM (Cloud to Device Messaging) [5]. To use this service, the app must register the device with the C2DM service and send the registration ID to the developer's server (see Listing 2). Among the dangling records, we found several such web services. We believe the developer would not have leased a cloud server if they did not intend to run a critical or heavy service on it. This case study is further discussed in Section 5.1.

```java
public static boolean registerDevice(String p8, String p9){
    try {
        // Code for registering the device
    } catch (Exception e) {
        // Handle exception
    }
}
```

This comprehensive approach allowed us to systematically identify and classify abandoned Internet resources, providing insights into the potential security risks and the need for better management of these resources in mobile applications.