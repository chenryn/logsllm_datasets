# 【技术分享】Android代码混淆技术总结（一）

## 译文声明
本文为翻译文章，原文来源：安全客。译文仅供参考，具体内容及含义请以原文为准。

## 作者信息
- 作者：[ix__xi](http://bobao.360.cn/member/contribute?uid=2858581749)
- 预估稿费：500RMB
- 投稿方式：发送邮件至linwei#360.cn，或登录网页版在线投稿

## 一、前言
最近我一直在学习有关Android加固的知识，阅读了许多论文、技术博客以及GitHub上的源代码。本文将对混淆技术进行总结，旨在为有兴趣学习加固技术的读者提供一些基础知识。文中提到的所有论文、资料和源码链接将在文中提供，以便大家深入学习。此外，我计划将这些内容整理成一个系列的文章，如果在后续文章中未提及某些混淆技术，欢迎大家提出意见，共同交流学习。

## 二、Android混淆技术介绍

### 2.1 控制流平坦化

#### 2.1.1 概念和思路
控制流平坦化是指在不改变源代码功能的前提下，将C或C++代码中的if、while、for、do等控制语句转换为switch分支语句。这种技术通过模糊switch中case代码块之间的关系，增加了分析难度。具体实现方法是将目标方法拆分为多个基本块（即case代码块）和一个入口块，每个基本块都有唯一的编号，并且共享相同的前驱模块和后继模块。前驱模块负责分发基本块，而后继模块则用于更新switch变量值并跳转回switch开始处。详细概念可参考文献[1]。

#### 2.1.2 开源项目
目前最常用的开源混淆方案是OLLVM（Obfuscator-LLVM），许多国内的安全厂商都在使用它。该项目提供了三种保护方式：控制流平坦化、虚假控制流和指令替换。其项目地址如下：
[OLLVM GitHub](https://github.com/obfuscator-llvm/obfuscator)

#### 2.1.3 对抗
对于OLLVM的反混淆，通常采用基于符号执行的方法来消除控制流平坦化。具体的分析思路可以参考Quarkslab撰写的文章[3]。

### 2.2 花指令

#### 2.2.1 概念和思路
花指令也称为垃圾指令，是在原始程序中插入一组无用字节，但不会改变程序逻辑。当反汇编工具尝试解析这些字节时，会导致错误，从而增加破解难度。花指令的主要思想是插入随机但不完整的指令，确保它们位于永远不被执行的路径上。这样，在程序运行时不会受到影响，但在反汇编时会导致错误。

#### 2.2.2 开源项目
- [Dalvik Bytecode Obfuscation on Android](http://www.dexlabs.org/blog/bytecode-obfuscation) 利用了线性扫描算法的特点，插入fill-array-data-payload花指令。
- 意大利萨尼奥大学laswatlab团队开发的恶意软件免杀工具，其中包括花指令插入技术。详见文献[4]。
- APKFuscator通过插入特定的垃圾指令使反汇编器出错。

#### 2.2.3 对抗
检测出花指令的位置和长度，然后用NOP指令替换即可。

### 2.3 标识符混淆

#### 2.3.1 概念和思路
标识符混淆是对源程序中的包名、类名、方法名和变量名进行重命名，用无意义的标识符替换，使得逆向分析更加困难。最常用的工具是ProGuard。了解Dex文件格式有助于理解该技术原理，具体实现可以参考文献[10]。

#### 2.3.2 开源项目
- ProGuard
- DexConfuse：一个简单的dex混淆器，可以混淆类名、方法名和字段名。
- APKFuscator：通过修改Dex文件格式，使类名字符个数超过255个，导致反汇编器报错。

#### 2.3.3 对抗
文献[8]提出了一种反混淆方法，通过大规模学习未混淆的APK，构建概率模型来识别混淆后的代码。具体流程包括生成依赖关系图、导出限制规则以及根据概率模型预测和恢复原始名称。

### 2.4 字符串混淆

#### 2.4.1 概念和思路
字符串混淆是将关键字符串变量进行处理，使其难以被直接分析。Java层的字符串混淆可以通过编码或加密实现。例如，先将字符串转换为十六进制数组或Unicode编码，使用时再恢复；或者在本地加密字符串，硬编码密文并在引用时调用解密函数。同样，也可以对SO文件中的只读常量区进行加密混淆。

#### 2.4.2 开源项目
- obfuseSmaliText：同程安全员工开发的免费字符串混淆工具，采用异或+十六进制的方式进行混淆。

#### 2.4.3 对抗
对于已混淆的字符串，找到相应的解密函数并调用解密即可恢复明文。

## 三、结束语
本文介绍了几种常见的Android代码混淆技术及其对抗方法。后续还将继续补充其他混淆技术，如控制流变换、模拟器检测、反调试、Java代码native化等。

## 参考文献
1. obfuscating C++ Programs via Control Flow Flattening
2. 利用符号执行去除控制流平坦化
3. Deobfuscation: recovering an OLLVM-protected program.
4. Evaluating malwares obfuscation techniques against antimalware detection algorithms.
5. Dalvik Bytecode Obfuscation on Android
6. Detecting repackaged android apps using server-side analysis
7. [AndroidObfuseDictionary GitHub](https://github.com/ysrc/AndroidObfuseDictionary)
8. Statistical Deobfuscation of Android Application.
9. Android字符串及字典开源混淆实现
10. Dex混淆的原理及实现
11. Android Code Protection via Obfuscation Techniques Past, Present and Future Directions.