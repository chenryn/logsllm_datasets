# .NET Deserialization Security Analysis

## JavaScriptSerializer
- **Namespace**: `System.Web.Script.Serialization.JavaScriptSerializer`
- **Security**:
  - By default, it does not include type discriminator information, making it a secure serializer.
  - A Type Resolver can be configured to include this information, but this should be done with caution.
  - Weak Type control: Post-deserialization cast operation.
  - During deserialization, it calls setters.
  - It can be used securely as long as a type resolver is not used or the type resolver is configured to whitelist valid types.

  ```csharp
  JavaScriptSerializer sr = new JavaScriptSerializer(new SimpleTypeResolver());
  string reqdInfo = apiService.authenticateRequest();
  reqdDetails det = (reqdDetails)sr.Deserialize(reqdInfo);
  ```

## DataContractJsonSerializer
- **Namespace**: `System.Runtime.Serialization.Json.DataContractJsonSerializer`
- **Security**:
  - Performs a strict type graph inspection and prevents deserialization of certain types.
  - If an attacker can control the expected type used to configure the deserializer, they may gain code execution.
  - Invokes:
    - Setters
    - Serialization Constructors
  - Can be used securely as long as the expected type cannot be controlled by users.

  ```csharp
  var typename = cookie["typename"];
  var serializer = new DataContractJsonSerializer(Type.GetType(typename));
  var obj = serializer.ReadObject(ms);
  ```

## Json.NET
- **Security**:
  - Secure by default unless `TypeNameHandling` other than `None` is used.
  - Even if `TypeNameHandling` is enabled, attackers still need to find an entry point in the object graph.
  - Invokes:
    - Setters
    - Serialization callbacks
    - Type Converters
  - Use `SerializationBinder` to whitelist Types if `TypeNameHandling` is required.

  ```csharp
  public class Message { 
    [JsonProperty(TypeNameHandling = TypeNameHandling.All)] 
    public object Body { get; set; } 
  }
  ```

### Demo 1: Breeze (CVE-2017-9424)
- **Fixed in**: Breeze 1.6.5 onwards
- **Serializer Settings**: 
  - [JdbcRowSetImpl](http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/com/sun/rowset/JdbcRowSetImpl.java/)
- **Unsafe Deserialization & Entrypoint**:
  - [Breeze.ContextProvider](https://github.com/Breeze/breeze.server.net/blob/master/AspNet/Breeze.ContextProvider/ContextProvider.cs)

### Similar Research
- **Java Unmarshaller Security**
  - **Author**: Moritz Bechler
  - **Published**: May 22, 2017
  - **Focus**: Exclusively on Java
  - **Overlaps with our research on**:
    - Jackson and JSON-IO libraries
    - JdbcRowSetImpl.setAutoCommit gadget
    - Other interesting gadgets
  - **Repository**: [marshalsec](https://github.com/mbechler/marshalsec)

## .NET Formatters
### Introduction
- **Attacks on .NET formatters** are not new.
- **James Forshaw** introduced them at BlackHat 2012 for:
  - BinaryFormatter
  - NetDataContractSerializer
- **Lack of RCE gadget** until recently.
- **Goals**:
  - Raise awareness about the perils of .NET deserialization.
  - Present new vulnerable formatter scenarios.
  - Present new gadgets.
  - Need new gadgets that work with formatters other than BinaryFormatter.

### PSObject Gadget
- **Bridges to custom deserializer**:
  - [PSObject.cs](https://github.com/stangelandcl/pash-1/blob/master/System.Management.Automation/System.Management.Automation/PSObject.cs)
  - [InternalDeserializer.cs](https://github.com/stangelandcl/pash-1/blob/master/System.Management.Automation/System.Management.Automation/InternalDeserializer.cs)
- **LanguagePrimitives.FigureConversion()** allows:
  - Call the constructor of any public Type with one argument (attacker controlled).
  - Call any setters of public properties for the attacker-controlled type.
  - Call the static public `Parse(string)` method of the attacker-controlled type.
  - [LanguagePrimitives.cs](https://github.com/stangelandcl/pash-1/blob/master/System.Management.Automation/System.Management.Automation/LanguagePrimitives.cs)
- **RCE via XamlReader.Parse()**:
  - [XamlReader.Parse()](https://github.com/stangelandcl/pash-1/blob/master/System.Management.Automation/System.Management.Automation/LanguagePrimitives.cs)

### .NET Native Formatters I
- **SoapFormatter**
  - Serializes objects to and from SOAP XML format.
  - Similar to `BinaryFormatter` in many aspects.
  - Invokes similar methods upon deserialization: setters, `ISerializable` constructor, `OnDeserialized` annotated methods, and `OnDeserialization` callback.
- **JavaScriptSerializer**
  - Covered in the JSON section.

### .NET Native Formatters II
- **ObjectStateFormatter**
  - Used by `LosFormatter` as a binary formatter for persisting the view state for Web Forms pages.
  - Uses `BinaryFormatter` internally and offers a similar attack surface.
- **XmlMessageFormatter**
  - Default formatter used by MSMQ.
  - Uses `XmlSerializer` internally and is vulnerable to the same attack patterns.
- **BinaryMessageFormatter**
  - Used by MSMQ as a binary formatter for sending messages to queues.
  - Uses `BinaryFormatter` internally and offers a similar attack surface.

### .NET Native Formatters III
- **DataContractSerializer**
  - Inspects the object graph of the expected type and limits deserialization to only those types known at construction time.
  - Suitable for handling untrusted data unless:
    - Using a weak type resolver.
    - Using user-controlled expected type.
  - Invokes multiple methods which can be used to initiate an RCE gadget chain such as setters and serialization constructors.
- **DataContractJsonSerializer**
  - Covered in the JSON section.
  - Very similar to `DataContractSerializer`.
  - No type resolvers can be used.

  ```csharp
  Type objType = Type.GetType(message.Label.Split('|')[1], true, true);
  DataContractSerializer serializer = new DataContractSerializer(objType);
  serializer.ReadObject(message.BodyStream);
  ```

### .NET Native Formatters IV
- **XmlSerializer**
  - Inspects the expected type at construction time and creates an ad-hoc serializer that will only know about those types appearing in the object graph.
  - Prevents deserialization of interface members.
  - Only vulnerable configuration is when the attacker can control the expected type.
  - Overcoming type limitations can be challenging, but it can be done with some tricks.

  ```csharp
  var typename = cookie["typename"];
  var typeName = xmlItem.GetAttribute("type");
  var xser = new XmlSerializer(Type.GetType(typeName));
  ```

### Demo 2: NancyFX (CVE-2017-9785)
- **Fixed in**: version 1.4.4 / 2.0-dangermouse onwards
- **NCSRF Cookie**:
  - Latest stable version used a `BinaryFormatter` serialized cookie (1.x).
  - Pre-released 2.x used a custom JSON parser to make it compatible with .NET Core first versions.
  - Pre-auth RCE in both versions.

### Generalizing the Attacks
- **Requirements**:
  - Attacker can control the type to be instantiated upon deserialization.
  - Methods are called on the reconstructed objects.
  - Gadget space is large enough to find types we can chain to get RCE.
- **Examples**:
  - **FsPickler (xml/binary)**: Fast, multi-format messaging serializer for .NET.
  - **SharpSerializer**: XML and binary serialization for .NET and Silverlight.
  - **Wire/Hyperion**: High-performance polymorphic serializer for the .NET framework used by Akka.NET.

### Beware of Rolling Your Own Format
- **NancyFX**: Custom JSON parser replacing `BinaryFormatter` (Pre-released 2.x) to make it compatible with .NET Core first versions.
- **DotNetNuke CMS (DNN Platform)**: Wraps `XmlSerializer` around a custom XML format which includes the type to be used to create the `XmlSerializer`.

### Overcoming XmlSerializer Constraints
- **Types with interface members** cannot be serialized.
- **System.Windows.Data.ObjectDataProvider** is `XmlSerializer` friendly.
- **XamlReader.Load(String)** -> RCE
- **ObjectStateFormatter.Deserialize(String)** -> RCE
- **DotNetNuke.Common.Utilities.FileSystemUtils.PullFile(String)** -> WebShell
- **DotNetNuke.Common.Utilities.FileSystemUtils.WriteFile(String)** -> Read files
- **Runtime Types** need to be known at serializer construction time.

### Demo 3: DotNetNuke (CVE-2017-9822)
- **Fixed in**: DNN Platform 9.1.1 or EVOQ 9.1.1 onwards
- **Source**:
  - [PersonalizationController.cs](https://github.com/dnnsoftware/Dnn.Platform/blob/a142594a0c18a589cb5fb913a022eebe34549a8f/DNN%20Platform/Library/Services/Personalization/PersonalizationController.cs#L72)
- **Sink**:
  - [XmlUtils.cs](https://github.com/dnnsoftware/Dnn.Platform/blob/a142594a0c18a589cb5fb913a022eebe34549a8f/DNN%20Platform/Library/Common/Utilities/XmlUtils.cs#L201)

### Wrap-Up
- **Main Takeaways**:
  - Do not deserialize untrusted data!
  - Evaluate the security of the chosen library.
  - Avoid libraries without strict Type control.
  - Type discriminators are necessary but not sufficient.
  - Never use user-controlled data to define the deserializer expected Type.
  - Do not roll your own format.

Thank you!

**Presented by**:
- Alvaro Mu√±oz (@pwntester)
- Oleksandr Mirosh