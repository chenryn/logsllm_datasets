我们遵循与 Facebook 软件工程相同的团队选择模型。PE
花三到四周的时间在训练营中获得基本技术知识，然后花两个多星期进行团队选择。我们举办一个招聘会，因为缺少一个更好的术语，所有寻找人的团队会和所有寻找团队者的引导员聚在一起。我们尝试根据团队的需要和个人的技能组合和愿望来寻找匹配。例如，有些人对安全性有亲和力，而另一些人则对面向产品的服务或后端系统具有亲和力。在大多数情况下，这工作正常，但团队选择过程并不总是适用于所有人。我们雇佣的一些人希望在加入
Facebook
之前了解他们将要从事的团队。因此，我们花一点时间预先了解他们，然后缩小团队范围，使其更容易一点。
随着时间的推移，我们发现仍有某种类型的工作不一定适用于加入 Facebook
的每个软件工程师。因此，我们创建了另一个迷你训练营，我们称之为PE
基础。该课程专门面向生产工程师、网络工程师和其他类似的运维团队。在
Bootcamp
中，我们试图在短时间内打包大量信息。我认为它总体上非常成功，但内容没有那么有意义，直到工程师加入他们的团队，并花了足够时间了解基础结构。在
PE 退出 Bootcamp
并加入他们的团队大约四周后，他们又回到了一组更需要动手的课程，这些课程解释了我们工具的细微差别。现在，他们已经接触了正在开发的系统，可以在他们心目中更好地了解我们的工具如何应用于他们的工作。
我们还在 PE
基础知识领域进行更多的入职文化介绍。例如，我们介绍如何应用一些健康的张力，而不过度。当我们与工程师讨论他们的解决方案时，我们需要小心，不要总是反对，因为有些东西可能并不完美。在这些入职演示中，我们不能总是说"不"，其他
PE
会分享他们经历的冲突，以便新人能够在他们心目中形成如何处理团队中潜在分歧的印象。PE
学习成为文化的一部分，使其他人能够解决自己的问题，而不是成为改变的阻碍者。 
**大卫：** 让我们以生产工程为模型，从更广泛的方面来了解一下。我们已经在
Facebook 上讨论了 PE 组织的独特性。你是否认为 PE 组织可以在 Facebook
之外实施，并且仍然感觉自己是一个 PE 组织？
**佩德罗：**是的，我认为类似的 PE 组织可以在其他地方创建。我相信
Facebook
的神秘力量实际上是源自我们雇佣的人，以及他们是如何把事情做好的。有很多文化因素可能需要存在，但我自信地认为，我们是不多的拥有自主、独立、赋权和健康辩论等文化的公司。我确实担心其他公司可能会采用
PE 这个名字，并且不会采纳伴随它们附带的文化影响。我与一些将建立 SRE
团队的大公司以外的许多团队进行了交谈，实际上，这只是一个重新命名的
SysAdmin
团队，具有完全独立的运维角色，对自动化、协作和平等没有兴趣。我相信这是因为他们希望能够吸引外部的人，但工作不一定改变。与软件工程师的接洽模式不会改变。影响变化的能力没有不同。领导层的关系和共同的问责制并不存在。
我坚信软件团队最终应该对其运维负责，但我也承认，PE
可以帮忙确保团队不会过于繁忙。我想再次强调，PE 不应该*为*SWE
执行运维，它们应该与它们*一起*运维。如果存在这种*与*他人而不是*为*他人合作的机制，那么我认为此模型可以在其他地方工作。
**大卫：**那么，你如何知道组织是否与你定义它的方式相同？
**佩德罗：**我想明确一点，我们构建和运行组织的方式并不是唯一的方法。许多公司都在试图找出如何最好地在其环境中执行运维，如果他们寻求其他模型来参考，这一点很棒------我们都应该相互学习。然而，这种模式不是一刀切的。当公司试图建立他们的组织时，他们应该选择适合他们的东西和可以应用于其环境的东西。如果他们选择实现我讨论过的一些概念，修改它们，并使它们成为他们自己的概念，那太好了。但是，如果他们试图持守一些严格的教条，我几乎可以保证它会失败，因为每个人都是不同的，每个公司是不同的，每个基础设施的挑战是不同的。
话虽如此，如果我必须快速总结评估 PE
模型的方法，以下是需要考虑的主要事项：
-   使用嵌入式和协作模式共享轮值
-   与技术信誉有牢固的关系
-   运维和功能之间的平衡
-   领导为提供功能丰富且稳定的系统提供决策上支持
让我们把这些分解成更详细一点。
当我想衡量另一个团队与我们的 PE
模型有多近时，我问的第一个问题是："谁在轮值？当运维进展不顺时，谁在响应故障恢复？"
如果他们回应说是 SRE、生产工程、DevOps 或其他什么，而不是软件工程师（或
SWE 和运营团队之间的共享轮值），那么我知道他们不是在以我们定义的方式构建
PE
模型。我认为，服务稳定性的最终责任需要落在那些正在构建服务的人身上。如果主要构建者是
SWE，那么他们就需要轮值。
在确定某人的实现与我们的模型相似程度时，我寻找的另一个因素与平等和感知有关。根据我的经验，有些软件工程团队对运维工作看不上，相反，还有不尊重纯软件工作的运维团队。在公司内部，我使用一个大的画框，突出显示"不同
！= 糟糕"。
通常，软件工程师将精神时间花在算法和功能上，而不是考虑操作复杂性。这本身并不坏，但它可能导致运维的感知问题。另一方面，PE
将精神时间和精力花在了其他不是纯粹的软件上。关注可用性、可扩展性、可操作性、故障模式、安全性、部署、可靠性和监视，而不是软件本身，这也并非坏事。脑力上的时间只是花在不同的事情上。每个人都有责任确保团队中每个人的决策和行动有共同的环境。我在评估其他人是否正在实施类似模型时，寻找这种类型的共识。
我典型的后续问题是功能是否优先于运维稳定性。当面临功能和运维稳定性之间的抉择时，牺牲运维稳定性的频率是多少？当团队想要构建服务并反复选择否决稳定性时，即使他们明白运维债务会很高，团队也不会在此模式下取得成功。
这使我提出了另一组与运维团队何时参与有关系统体系结构的讨论相关的问题。如果软件团队将
PE、SRE
等视为相等的参与者，则与体系结构相关的讨论将与会议室中的两组人员进行。如果它们不被视为平等，并且在事后咨询运维团队，那么实现就不那么顺利了。
我不认为任何系统或团队会是完美的，但团队需要存在多元化的思想，才能在压力下构建功能丰富且具有弹性的东西。与技术知识水平相比，最后一个因素与团队的关系要大很多。如果关系是对抗性的，或者如果两组之间存在较大的技术差距，则结果将是一个较弱的系统。如果各组之间有信任，有共同的技术理解，对话是建设性的，那么一个更好，更强大的系统将建立起来。
当谈到功能与稳定性时，我认为每个人都应该有输有赢。软件团队有时应取消功能优先级以确保稳定性。PE
团队有时应该取消稳定性方面的某些收益，以确保功能的构建。稳定性不应倒退，但有时可能可以适当让步。软件团队需要不断创新，PE
的作用是通过减少运维负载并通过软件解决运维问题来帮助实现这一创新。PE
还需要与软件团队同时合作，以降低操作复杂性。如果 PE 100%
专注于稳定性和可靠性，那么软件团队可能会解雇它们，并且关键工作无法推进。这项工作需要在较长的时间范围内得到平衡。例如，有些月份可能会严重偏向功能，而接下来的月份可能会严重偏向操作稳定性。只要这是平衡的，那么实现就正常了。
最后一个组成部分与问责制有关。如果系统功能不丰富且稳定，软件和运维领域的领导者是否负责？在晋升和绩效评估方面，这些是否保持同等标准，还是不同？例如，在
Facebook 上，当我们评估高级领导者在 SWE 和 PE
中的表现时，我们会在同一组讨论中讨论他们。他们的影响、执行能力、跨职能工作，以及构建健康的组织，都应坚持相同的标准。
正如我前面所说，我确实认为每个人的实施可能略有不同，他们应该挑选在环境中工作良好的东西。我已经和几家公司谈过了，虽然他们做的事情和我们以前完全一样，但总的来说，我认为它们在实施中是成功的。     
# 编者介绍
Pedro Canahuati 在软件设计、架构和大规模运营稳健服务方面拥有超过 20
年的经验，是 Facebook 生产工程和安全副总裁。以这个身份，他负责确保
Facebook 的基础设施是稳定的，其超过 20 亿用户的数据是安全的。
在他的整个职业生涯中，建立并管理了全球工程团队，专注于规模化的公司运维，为用户提供最佳体验。