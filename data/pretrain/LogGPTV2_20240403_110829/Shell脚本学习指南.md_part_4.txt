近几年，我们不只看过Shell仿制品，还看过整个完整的UNIX环境的仿制品。其中两
个就是使用bash与ksh93，其他则是提供自有的Shell重新实现（reimplementation）。
本节将依次（以字母顺序）予以介绍，并附上联络方式与Internet下载信息。
www.TopSage.com
---
## Page 23
前言
11
Cygwin
Cygnus Consulting（现为Red Hat）建立了cygwin环境。首先出现的是提供UNIX系
统调用模拟器的共享程序库cgywin.d11，该公司释出了许多GNU工具程序，供各种不
同的MicrosoftWindows版本使用。模拟器还包括了Berkeley socketAPI的TCP/IP网
络。在Windows/NT、Windows 2000与Windows XP下，功能性最佳，不过在Windows
95/98/ME下也是可以运行的。
cygwin环境使用自己的 Shell、自己的C编译器GCC，以及搭配其UNIX工具集里的
GNU工具程序。设计精良的mount命令提供了将WindowsC：\path的标记方式对应
到UNIX文件名。
http://www.cygwin.com/是你了解cygwin项目的起点。第一步就是下载它的安装程序，
执行时，你可以选择要安装哪些额外包。整个安装过程都是在Internet上进行，没有官
方的cygwinCD，至少项目的维护人员并没有提供。
DJGPP
DJGPP程序组提供了MS-DOS环境下所使用的32位GNU工具程序，以下内容摘自其
网页：
DJGPP为执行MS-DOS的Intel80386（及史高级的）个人计算机提供了完整的32
位C/C++开发系统。其中包含许多GNU开发工具程序。这盛开发的工具必须在
80386或史高级的计算机上执行产生程序，大部分情况下，其所产生的程序可做商
亚用途而无缓授权或版税。
其名称一开始是来自D.J.Delorie，D.J.Delorie将GNUC++编译器g++移植到MS-
DOS，而g++一开始的名称为GPP.之后逐渐茁壮成长，成为MS-DOS下完整的UNIX
环境不可或的要素，井带有GNU工具，以bash作为其Shell.不同于cygwin或UWIN
的是：不需要使用任何的Windows版本，只要有完整的32位处理器与MS-DOS即可（当
然，你也可以在Windows的MS-DOS窗口下使用DJGPP）。官方网站为hrtp://
www.delorie.com/djgpp/.
MKSToolkit
个人计算机世界里的UNIX环境有许多都是以MorticeKernSystems的MKSToolkit建
立的：
www.TopSage.com
---
## Page 24
12
前言
MKS Canada  Corporate Headquarters
410 Albert Street
Waterloo, ON
Canada N2L 3V3
1-519-884-2251
1-519-884-8861 (FAX)
1-800-265-2797 (Sales)
http://www,mks.com/
MKSToolkit版本非常多，根据你的开发环境和开发人员的数量来决定要用哪一个版本。
其中包含了与POSIX兼容的Shell，拥有1988Korn Shell里的所有功能，超过300种
的工具组，例如awk、per1、vi、make等。MKS程序库支持超过1500个UNIX API，
使它更为完整，更易于应用在Windows环境下，
AT&TUWIN
UWIN包是DavidKorn与同事为了在MicrosoftWindows下使用UNIX环境而产生的
项目。其架构类似先前讨论的cygwin。共享程序库posix.dl1提供了UNIX系统调用
API的模拟器。其系统调用模拟器相当完整。其中一个有趣的创新就是将Windows的登
录改为可在/reg文件系统下访问的方式。UwIN环境依赖原始的MicrosoftVisual C/
C++编泽器，不过仍可自行下载GNU开发工具用于UWIN下。
http://www.research.alt.com/sw/tools/uwin/是此项目的网页，说明可供下载的有哪些，
井附上二进制文件的下载链接，还有与UWIN的使用许可权相关的信息，除此之外，另
有UWIN的各类报告、额外的好用软件及其他类似包的链接。
UWIN包最大的优势为：它的Shell是一个真正的ksh93，因此在与UNIX的ksh93版
本的兼容性上不会有问题。
联系我们
请将关于本书的意见和问题通过以下地址提供给出版商：
美国：
O'Reilly Media, Inc.
1005 Gravenstein Highway North
Sebastopo1, CA 95472
www.TopSage.com
---
## Page 25
前言
网
中国：
lopsage.com
100035北京市西城区西直门南大街2号成铭大厦C座807室
奥莱利技术咨询（北京）有限公司
O'Reily公司是世界性的计算机信息出版公司。我们永远乐意听到读者对出版物的意见，
包括如何让本书可以更好的建议，指正本书的错误或是读者建议本书往后改版时应该再
加人的其他主题。以下是英文原书的联络数据：
hp://oreilly.com/catalog/9780596005955/index.html
如果想要发表关于本书的评论和技术问题，请发邮件至：
bookquestions@ oreilly.com
PI:EMAIL
关于图书、会议、资源中心和O'Reilly网络的更多信息，请查看我们的站点：
hp://www.oreilly.com
hp://www.oreilly.com.cn
致谢
我们俩要感谢对方的付出。虽然我们未曾见面，但协同作业的工作一直进行得很好。除
了对彼此献上最热忱的感激，还要谢谢我们挚爱的要子，谢谢她们在这段期间的贡献、
耐心、爱，以及在此书编写期间的支持。
bash的维护人员ChetRamey回答了许许多多与POSIXShell相关的细微问题。AT&T
Research 的 Glenn Fowler 与 David Korn，与GNU Project 的 Jim Meyering，也提供不
少解答。我们以字母顺序排列下面要致谢的人：KeithBostic、George Coulouris、Mary
Ann Horton、Bill Joy、Rob Pike、Hugh Redelmeier、Dennis Ritchie,他f为 UNIX 的
历史问题解感。由于O'Reilly Media 的 Nat Torkington、Allison Randall、Tatiana Diaz
的指导，让本书由概念逐渐成型。感激O'Reilly的RobertRomano将我们原始的ASCII
草图与pic略图作成图片。也谢谢Angela Howard为本书制作全面性索引，造福读者。
以下仍以字母期序：谢谢Geoff Collyer、Robert Day、Leroy Eide、John Halleck、Mark
Lucking与Henry Spencer为本书初稿再作技术上的检阅，及Sean Burke审阅第2版草
稿。谢谢他们提供无价且非常有帮助的回馈。
UNIXGuru的UNIX Guru（精神导师）Henry Spencer，谢谢你为本书作的序。
www.TopSage.com
---
## Page 26
14
前言
感谢University of Utah的Electrical and Computer Engineering、Mathematics,与Physics
等系所，以及Center for High-Performance Computing，提供UNIX系统供访问，还有
IBM与Hewlett-Packard提供访客访问，让我们取得编写本书所需的软件以供检别，谢
谢，谢谢他们。
Arnold Robbins
Nelson H.F. Beebe
www.TopSage.com
---
## Page 27
第1章
背景知识
本章将简述UNIX系统的发展史。了解UNIX在何处开发、如何开发，以及它的设计动
机，这有助于用户善加利用UNIX所提供的工具。此外，本章将介绍软件工具的设计原
则。
1.1
UNIX简史
或许你对于UNIX的发展史已有些了解，并且已经有很多介绍UNIX完整发展历史的资
料。这里，我们只想让你知道：UNIX是在何种环境下诞生的，以及它如何影响软件工
具的设计。
UNIX最初是由贝尔电话实验室（Bell Telephone Laboratories，注1）的计算机科学研
究中心（Computing SciencesResearchCenter）开发的。第一版诞生于1970年——也
就是在贝尔实验室（BellLabs）退出Multics项目不久，在UNIX广受欢迎的功能中，有
许多便是来自Multics操作系统，其中最著名的有：将设备视为文件，以及特意不将命
令解释器（commandinterpreter）或Shell整合到操作系统中。更完整的历史信息可在
http://www.bell-labs.com/history/unix 找到。
由于UNIX是在面向研究的环境下开发的，因而没有必须生产或销售成品的盈利压力。
这使其具有下列优势：
系统由用户自行开发。他们使用这套系统来解决每天所遇到的计算问题。
注 1:
该名称至今已定受数次，本书从这里开始都以口语式名称“目尔实验室”（BellLabs）称
它。
15
www.TopSage.com
---
## Page 28
16
研究人员可以不受拘束地进行实验，必要时也可任意变换程序，由于用户群不大O1m1
若程序有必要整个重写，多半也不会太难。由于用户即为开发人员，发现问题时便
能随即修正，有地方需要加强时，也可以马上就做。
UNIX已历经数个版本，各个版本以字母V加上数字作为简称，如V6、V7，等等。
（正式名称则是遵循发行的使用手册的修订次数编号来命名，例如FirstEdition、
Second Edition，等等。这两种名称的对应其实很直接：V6=SixthEdition、V7=
SeventhEdition，和大多数有经验的UNiX程序员一样，这两种命名方式我们都会
用到）。影响最深远的UNIX系统是1979年所发行的第7版（SeventhEdition），但
是在最初的几年，它仅应用于学术教育机构领城。值得一提的是：第7版的系统同
时提出了awk与BourneShell，这二者是POSIXShell的基础，同时，第一本讨
论UNIX的书也在此诞生。
贝尔实验室的研究人员都是计算机科学家。他们所设计的系统不单单是自己使用，
还要分享给同事一—这些人一样也是计算机科学家。因此，衍生出“务实”（no
nonsense）的设计模式：程序会执行你所赋予的任务，但不会跟你对话，也不会问
一堆“你确定吗？”之类的问题。
除了精益求精，在设计与问题解决上，他们也不断地追求“优雅”（elegance）。关
于“优雅”有一个贴切的定义：简单就是力量（powercloaked in simplicity，注2）。
贝尔实验室自由的环境，所造就的不仅是一个可用的系统，也是一一个优雅的系统。
当然，自由同样也带来了一些缺点。当UNIX流传至开发环境以外的地方，这些问题也
逐一浮现：
工具程序之间存在许多不一致的地方。例如，同样的选项字母，在不同程序之间有
完全不一样的定义；或是相同的工作却需要指定不同的选项字母。此外，正则表达
式的语法在不同程序之间用法类似，却又不完全一致，易产生混淆——这种情况
其实可以避免。（直至正则表达式的重要性受到认可，其模式匹配机制才得以收录
在标准程序库中。）
诸多工具程序具有缺陷，例如输人行（inputlines）的长度，或是可打开的文件个
数，等等。（现行的系统多半已经修正这些缺陷。）
有时程序并未经过彻底测试，这使得它们在执行的时候一不小心就会遭到破坏。这
注2：
我最初是在20世纪80年代从DanForsyth口中听到这个定义的。
www.TopSage.com
---
## Page 29
背景知识
12
可能会导致核心转储（coredumps，译注1），令用户不知所措。幸好，现行的UNIX
系统极少会面临这样的问题。
系统的文档尽管大致上内容完备，但通常极为简单。使得用户在学习时很难找到所
需要的信息（注3）。
本书之所以将重点放在文本（而非二进制）数据的处理与运用上，是由于UNIX早期的
发晨都源自于对文本处理的强烈需录，不过除此之外还有另外的重要理由（马上会讨论
到）。事实上，贝尔实验室专利部门（Bell Labs PatentDepartment）在UNIX系统上所
使用的第一套产品，就是进行文本处理和编排工作的。
最初的UNIX机器（DigitalEquipmentCorporationPDP-11s）不能运行大型程序，要
完成复杂的工作，得先将它分割成更小的工作，再用程序来完成这些更小的工作。某些
常见的工作（从数据行中取出某些字段、替换文本，等等）也需见于许多大型项目，最
后就成了标准工其。人们认为这种自然而生的结果是件好事：由于缺乏大型的解决空间，
医而产生了更小、更简单、更专用的程序。
许多人在UNIX的使用上采用半独立的工作方式，重复套用被此间的程序。由于版本之
间的差异，而且不需要标准化，导致许多日常工具程序的发展日渐分歧，举例来说，grep
在某系统里使用-i来表示“查找时忽略大小写”，但在另一个系统中，却使用-Y来代
表同样的事！无独有偶，这种怪事也发生在许多工具程序上，还有，一些常用的小程序
可能会取相同的名字，针对某个UNIX版本所编写的Shell程序，不经修改可能无法在
另一个版本上执行。
最后，对常用标准工具组与选项的需求终于明朗化，POSIX标准即为最后的结果。现行
标准IEEEStd.1003.1-2004包含了C的库层级的主题，还有Shell语言与系统工具及其
选项。
好消息是，在这些标准上所做的努力有了回报。现在的商用UNIX系统，以及可免费使
译注1：在UNIX 系统中、常辖“主内存”（main memory）数为核心（core），图为在使用平寻
体作为内夺材料之败，使是使用核心（core），而核心映像（core image）就是“进程”
（process）执行当时的内存内客，当选程发生婚误或收到“综号”（signal）而终止执行
时，系统会转核心映像写人一个文件，以作为调试之用、这就是所谓的核心转储（core
dump),
2 3:
系统文档分成两个部分：参考于需与使用于，后者是系统各功能的救学手册。虽然把
整份文件读完就可能学会UNIX-事实上有评多人（也据作者）真的是这么做，不
过现今的系统，已不再附上打印好的文件，
www.TopSage.com
---
## Page 30
18
第1章
用的同类型产品，例如GNU/Linux与BSD衍生系统，都兼容POSIX。这样一来，学习
UNIX变得更容易，编写可移植的Shell脚本也成为可能（详见第14章）。
值得注意的是：POSIX并非UNIX标准化的唯一成果，POSIX之外仍有其他标准。例
如，欧洲计算机制造商协会自行发起了一套名为X/Open的标准，其中最受欢迎的是1988
年首度出现的XPG4（X/Open Portability Guide，Fourth Edition）。另外还有XPG5，其
更广为人知的名称为UNiX98标准，或SingleUNIXSpecification，XPG5很大程度上
把POSIX纳人为一个子集，同样深具影响力（注4）。
XPG标准在措辞上可能不够严谨，但其内容却较为广泛，其自标是将现存于UNIX系统
上实际用到的各种功能正式生成文档。（POSIX的目的在于建立一套正式的标准，让从
头开始的实践者有指导方针可以套用一一即便是在非UNIX的平台上。因此，许多
UNIX系统上常见的功能，一开始就排除在POSIX标准之外）。2001POSIX标准由于纳
人了X/Open System Interface Extension（XSI）而有了双重身份，也叫数XPG6，这
是它首度正式扩张POSIX版图。此文档的特色在于：让系统不只兼容POSIX，也兼容
于XSI。所以，当你在编写工具或应用程序时，必须参考的正式文件只有一份（就叫做
Single UNIX Standard)。
本书自始至终都把重点放在根据POSIX标准所定义的Shel1语言与UNIX工具程序。重
点部分也会加入XSI定义的说明，因为你很可能会用得到。
1.2软件工具的原则
随着时闻的流逝，人们开发出了一套设计与编写软件工具的原则。在本书用来解决问题
的程序中，你将会看到这些原则的应用示例。好的软件工具应该具备下列特点：
一次做好一件事
在很多方面，这都是最重要的原则：若程序只微一件事，那么无论是设计、编写、
调试、维护，以及生成文件都会容易得多，举例来说，对于用来查找文件中是否有
符合样式的grep程序，不应该指望用它来执行算术运算。
这个原则的结果，自然就是会不断产生出更小、更专用于特定功能的程序，就像专
业木匠的工具箱里，永远会有一堆专为特定用途所设计的工具。
处理文本行，不要处理二进制数据