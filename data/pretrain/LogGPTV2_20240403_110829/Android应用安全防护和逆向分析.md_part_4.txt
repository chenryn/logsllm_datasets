第一种是最常用的方式。第二种是当调用这个函数的时候有一个指向参数表的va_list变量时使用的（很少使用）。第三种是当调用这个函数的时候有一个指向jvalue或jvalue数组的指针时用的。
jvalue在jni.h头文件中定义是一个union联合体，在C/C++中，union可以存放不同类型的值，但是当你给其中一个类型赋值之后，这个union就是这种类型了，比如你给jvalue中的s赋值的话，jvalue就变成了jshort类型了，所以可以定义一个jvalue数组（这样就可以包含多种类型的参数了）传递到方法中，如下所示：
::: bodypic-c
![](OEBPS/Images/023-i.jpg){.calibre76}
:::
假如现在Java中有这样的一个方法：
::: bodypic-c
![](OEBPS/Images/023-2-i.jpg){.calibre77}
:::
1）在C++中使用第一种方式调用function方法：
::: bodypic-c
![](OEBPS/Images/023-3-i.jpg){.calibre78}
:::
obj是方法funtion的对象。id_function是方法function的id，可以通过GetMethodID（）方法获取。然后就是对应的参数，这和Java中的可变参数类似。最后一个char类型的参数L\'a\'为什么前面要加一个L呢？原因是Java中的字符是Unicode双字节的，而C++中的字符是单字节的，所以要变成宽字符，即前面加一个L。
2）在C++中使用第三种方式调用function方法：
::: bodypic-c
![](OEBPS/Images/023-4-i.jpg){.calibre79}
:::
例子：C++中调用Java中的方法。
Java代码如下：
::: bodypic-c
![](OEBPS/Images/023-5-i.jpg){.calibre80}
:::
这时候用javap获取max方法的签名，如下所示。
::: bodypic-c
![](OEBPS/Images/024-i.jpg){.calibre81}
:::
max方法的签名是（DD）D。在C++中的代码如下：
::: bodypic-c
![](OEBPS/Images/024-2-i.jpg){.calibre82}
:::
编译成动态文件后，到Eclipse中执行sayHello方法，运行结果如图2-25所示。
::: bodypic-c
![](OEBPS/Images/2a25-i.jpg){.calibre83}
:::
图2-25 运行成功效果图
可见，成功地输出了最大值。
##### 2.4.2 Java和C++中的多态机制 {.bodycontent-title3}
JNIEnv中有一个特殊的方法CallNonvirtual\Method，如下所示：
::: bodypic-c
![](OEBPS/Images/024-3-i.jpg){.calibre84}
:::
::: bodypic-c
![](OEBPS/Images/025-i.jpg){.calibre85}
:::
首先来了解一下，上面调用的function是子类的function方法，但是在C++中就不一样了：
::: bodypic-c
![](OEBPS/Images/025-2-i.jpg){.calibre86}
:::
这段C++代码中执行的是父类的function方法，如果想执行子类的function方法怎么办呢？就需要将父类的function方法定义成virtual虚函数：
::: bodypic-c
![](OEBPS/Images/025-3-i.jpg){.calibre87}
:::
所以，C++和Java对于继承后执行的是父类还是子类的方法是有区别的，在Java中所有的方法都是虚拟的，所以总是调用子类的方法，因此CallNonVirtual\Method方法就出来了，这个方法可以帮助调用Java中父类的方法。
在JNI中定义的CallNonvirtual\Method能够实现子类对象调用父类方法的功能，如果想要调用一个对象的父类方法，而不是子类的方法，就可以使用CallNonvirtual\Method。要使用它，首先要获得父类及其要调用的父类方法的jmethodID，然后传入到这个函数就能通过子类对象调用被覆写的父类方法了。
例如：在Java中定义Father类：
::: bodypic-c
![](OEBPS/Images/026-i.jpg){.calibre88}
:::
定义一个子类Child，继承Father类，重写父类中的function方法：
::: bodypic-c
![](OEBPS/Images/026-2-i.jpg){.calibre89}
:::
在JNIDemo代码，定义Father类型的属性：
::: bodypic-c
![](OEBPS/Images/026-3-i.jpg){.calibre90}
:::
再来看一下C++中的代码：
::: bodypic-c
![](OEBPS/Images/026-4-i.jpg){.calibre91}
:::
编译成功.dll文件，回到Eclipse中运行结果参如图2-26所示。
::: bodypic-c
![](OEBPS/Images/2a26-i.jpg){.calibre92}
:::
图2-26 运行结果
其中：
·Child：function是调用env-\>CallVoidMethod（\...）方法的。
·Father：function是调用env-\>CallNonvirtualMethod（\...）方法的。
这样就能够控制到底调用哪个类的function方法了。
[]{#015.xhtml}
#### 2.5 创建Java对象及字符串的操作方法 {.bodycontent-title2}
首先来看一下C/C++中怎么创建Java对象，然后再介绍如何操作Java字符串。
##### 2.5.1 native中创建Java对象 {.bodycontent-title3}
在JNIEnv中有两种方法创建Java对象，下面分别介绍。
###### 第一种方法创建Java对象 {.section-subtitle}
代码如下：
::: bodypic-c
![](OEBPS/Images/027-i.jpg){.calibre93}
:::
参数如下：
·clazz：是需要创建的Java对象的Class对象。
·methodID：是传递一个方法的ID，想一想Java对象在创建的时候，需要执行什么方法呢？对，没错那就是构造方法。
·第三个参数：是构造函数需要传入的参数值（默认的构造方法是不需要传入这个参数的）。所以在创建Java对象之前要做的工作就是要获取这个对象的class对象，然后再获取该对象的构造方法。想要获取方法的id，就需要方法的签名，因为构造方法没有返回值，所以认为类的默认构造方法的返回值类型的签名始终是"（）V"（因为默认的构造方法是没有参数的），方法的名称始终为"\"。
在C++中构造Java中的Date对象，并且调用它的getTime（）方法打印当前时间。
Java中的代码不需要改变，主要是在C++代码中改写：
::: bodypic-c
![](OEBPS/Images/027-2-i.jpg){.calibre94}
:::
::: bodypic-c
![](OEBPS/Images/028-i.jpg){.calibre95}
:::
编译成.dll文件，在Eclipse中运行结果如图2-27所示。
::: bodypic-c
![](OEBPS/Images/2a27-i.jpg){.calibre96}
:::
图2-27 运行结果
###### 第二种方法创建Java对象 {.section-subtitle}
用AllocObject函数创建一个对象，可以根据传入的jclass创建一个Java对象，但是状态是非初始化的，在这个对象之前绝对要用CallNonvirtualVoidMethod来调用该jclass的构造函数，这样就可以延迟构造函数的调用。这种方法用得很少，下面只对代码做简单的说明。
Java中的代码不做任何修改，C++代码修改如下：
::: bodypic-c
![](OEBPS/Images/028-2-i.jpg){.calibre97}
:::
##### 2.5.2 native中操作Java字符串 {.bodycontent-title3}
首先来了解一下Java和C/C++中字符串的区别。在Java中，使用的字符串String对象是Unicode（UTF-16）码，即每个字符不论是中文还是英文还是符号，一个字符总是占两个字节。Java通过JNI接口可以将Java的字符串转换到C/C++中的宽字符串（wchar_t\*），或传回一个UTF-8的字符串（char\*）到C/C++；反过来，C/C++可以通过一个宽字符串，或一个UTF-8编码的字符串来创建一个Java端的String对象。
接下来看一下JNIEnv中的一些C++方法。
1）获取字符串的长度：
::: bodypic-c
![](OEBPS/Images/029-i.jpg){.calibre98}
:::
参数j_msg是一个jstring对象。
2）将jstring对象拷贝到const jchar\*指针字符串：
::: bodypic-c
![](OEBPS/Images/029-2-i.jpg){.calibre56}
:::
这是在Java
1.2出来的函数，这个函数把Java字符串的内容直接拷贝到C/C++的字符串数组中，在调用这个函数之前必须有一个C/C++分配出来的字符串（具体看下面的例子），然后传入到这个函数中进行字符串的拷贝。
由于C/C++中分配内存开销相对小，而且Java中的String内容拷贝的开销可以忽略，更好的一点是此函数不分配内存，不会抛出OutOfMemoryError异常。
参数j_msg是一个jstring对象，start是拷贝字符串的开始位置，len是拷贝字符串的长度，jstr是目标指针字符串。
3）生成一个jstring对象：
::: bodypic-c
![](OEBPS/Images/029-3-i.jpg){.calibre99}
:::
参数：jstr是字符串指针，size是字符串长度。
这个方法可以认为是将字符串指针jstr转换成字符串对象jstring。
4）将jstring对象转换成const
jchar\*字符串指针。有两个方法：GetStringChars和GetStringUTFChars方法。
GetStringChars方法如下：
::: bodypic-c
![](OEBPS/Images/029-4-i.jpg){.calibre100}
:::
返回一个UTF-16编码的宽字符串（jchar\*）。
参数如下：
·j_msg是字符串对象。
·copied是指传入的是一个jboolean指针，用来标识是否对Java的String对象进行了拷贝，如果传入的这个jboolean指针不是NULL，则它会给该指针所指向的内存传入JNI_TRUE或JNI_FALSE标识是否进行了拷贝，传入NULL表示不关心是否拷贝字符串，也就不会给jboolean\*指向的内存赋值。
其对应的释放内存指针的方法：
::: bodypic-c
![](OEBPS/Images/030-i.jpg){.calibre49}
:::
参数：j_msg是jstring对象，jstr是字符串指针。
GetStringUTFChars方法如下：
::: bodypic-c
![](OEBPS/Images/030-2-i.jpg){.calibre101}
:::
这个方法是可以取得UTF-8编码的字符串（char\*）。参数的含义和GetStringChars方法是一样的。这个方法也有对应的一个释放内存的方法：
::: bodypic-c
![](OEBPS/Images/030-3-i.jpg){.calibre67}
:::
参数的含义和上面的ReleaseStringChars方法的参数的含义是一样的。
[提示：]{.yanse}这两个函数分别都会有两个不同的动作：
·开辟一个新内存，然后在Java中的String拷贝到这个内存中，然后返回指向这个内存地址的指针。
·直接返回指向Java中String的内存的指针，这个时候千万不要改变这个内存的内容，这个将会破坏String在Java中始终是常量的这个原则。
5）将jstring对象转化成const jchar\*字符串指针：
::: bodypic-c
![](OEBPS/Images/030-4-i.jpg){.calibre78}
:::
参数j_msg是字符串对象，copied同上面的解释，这里就不多说了。
这个方法的作用是为了增加直接传回指向Java字符串的指针的可能性（而不是拷贝），JDK
1.2出来了新的函数GetStringCritical/ReleaseStringCritical。
在GetStringCritical/ReleaseStringCritical之间是一个关键区，在这个关键区域之间不能调用JNI的其他函数，否则将造成关键区代码执行期间垃圾回收器停止运作，任何触发垃圾回收器的线程也会暂停，其他的触发垃圾回收器的线程不能前进直到当前线程结束而激活垃圾回收器。就是说在关键区域中千万不要出现中断操作，或在JVM中分配任何新对象；否则会造成JVM死锁。虽然这个函数会增加直接传回指向Java字符串的指针的可能性，不过还是会根据情况传回拷贝过的字符串。不支持GetStringUTFCritical，没有这样的函数，由于Java字符串用的是UTF-16，要转成UTF-8编码的字符串始终需要进行一次拷贝，所以没有这样的函数。
这个方法和第四个方法是一样的。其对应的释放内存指针的方法如下：
::: bodypic-c
![](OEBPS/Images/030-5-i.jpg){.calibre102}
:::
下面来看一下实例：在Java中定义一个String属性，通过控制台输入值，然后定义一个本地方法callCppFunction，在C++中这个方法的实现就是：获取到Java中这个字符串属性，将其进行倒序操作，然后再从Java中输出。
先来看一下Java代码：
::: bodypic-c
![](OEBPS/Images/030-6-i.jpg){.calibre103}
:::
::: bodypic-c
![](OEBPS/Images/031-i.jpg){.calibre104}
:::