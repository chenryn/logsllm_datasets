R← [0, p − 1]
X2 := {gx1 , gx2 , gx1x2}
F l2 := {ID, X2}
x2
?
V (F l2)
= 1
R← [0, p − 1]
x3
X3 := {gx1x2 , gx1x3 ,
gx2x3 , gx1x2x3}
F l3 := {ID, X3}
x4
?
V (F l3)
= 1
R← [0, p − 1]
X4 := {gx1x2x4 , gx1x3x4 ,
gx2x3x4 , gx1x2x3}
F l4 := {ID, X4}
K := (gx1x2x3 )x4
←−−−−−−−−−−−−−−
[F l4]U4
− − − − −
− − − − −−
←−−−−−−−−−−−−−−
[F l4]U4
←−−−−−−−−−−−−−−
[F l4]U4
− − − − −
− − − − −
− − − − −−
− − − − −−
?
= 1
K := (gx2x3x4 )x1
V (F l4)
?
= 1
K := (gx1x3x4 )x2
V (F l4)
?
= 1
K := (gx1x2x4 )x3
V (F l4)
Figure 1: Protocol AKE1. An example of a honest execution with 4 players: ID = {U1, U2, U3, U4}. The shared
session key SK is sk = H(U1, U2, U3, U4, F l4, gx1x2x3x4 ).
Theorem 1. Let A be an adversary against the AKE se-
curity of protocol P within a time bound t, after qse inter-
actions with the parties and qh hash queries. Then we have:
Advake
P (t, qse, qh) ≤
) + n · Succcma
se · SuccgcdhΓ
(cid:2)
2qhqn
Σ (t
(t
(cid:2)(cid:2) ≤ t + qsenTexp(k); Texp(k)
(cid:2) ≤ t + qsenTexp(k) and t
where t
is the time of computation required for an exponentiation
modulo a k-bit number and Γ corresponds to the elements
adversary A can possibly view:
(cid:2)(cid:2)
)
G
(cid:4)
Γ =
1≤j≤n
{{i| 1 ≤ i ≤ j, i (cid:11)= l} | 1 ≤ l ≤ j}
Before describing the details of the proof let us ﬁrst pro-
vide the main ideas. We consider an adversary A attacking
the protocol P and then “breaking” the AKE security. A
would have carried out her attack in diﬀerent ways: (1) she
may have got her advantage by changing the content of the
ﬂows, hence forging a signature with respect to some player’s
long-lived public key (otherwise, the player would have re-
jected). We will then use A to build a forger by “guessing”
for which player A will produce her forgery. (2) she may
have broken the scheme without altering the content of the
ﬂows. We will use it to solve an instance of the G-CDH
problem, by “guessing” the moment at which A will make
the Test-query and by injecting into the game the elements
from the G-CDH instance received as input.
6.4 Security Proof
Proof. Let A be an adversary that can get an advantage
 in breaking the AKE security of protocol P within time
(cid:2)(cid:2)
t. We construct from it a (t
)-G-
CDHΓ-attacker ∆ .
)-forger F and a (t
, 
, 
(cid:2)(cid:2)
(cid:2)
(cid:2)
6.4.1 Forger F.
(cid:2)(cid:2)
, 
Let’s assume that A breaks the protocol P because she
forges a signature with respect to some player’s (public) LL-
key and she is able to do it with probability greater than ν.
)-forger F which outputs a
(cid:2)(cid:2)
We construct from it a (t
forgery (σ, m) with respect to a given (public) LL-key Kp
(Of course Kp was produced by GLL(1k)).
F receives as input Kp and access to a (public) signing
oracle. F provides coin tosses to GLL, A and all Πs
U . F picks
at random i ∈ [1, n] and runs GLL(1k) to set the players’ LL-
keys. However for player i, F sets LLi to Kp. F then starts
running A as a subroutine and answers the oracle queries
made by A as explained below. F also uses a variable K,
initially set to ∅.
When A makes a Send-query, F answers in a straight-
forward way, using LL-keys to sign the ﬂows, except if the
i ,∗) (∀s ∈ N). In this latter case
query is of the form Send(Πs
the answer goes through the signing oracle, and F stores in
K the request to the signing oracle and the signing oracle
response. When A makes a Reveal-query or a Test-query,
F answers in a straightforward way. When A makes a Cor-
rupt-query, F answers in a straightforward way except if the
query is of the form Corrupt(Πs
In this latter
case, since F does not know the LL-key Ks for player i, F
stops and outputs “Fail”. But anyway, no signature forgery
occurred before, and so, such an execution can be used with
the other reduction. When A makes a Hash-query, F an-
swers the query as depicted on Figure 2.
If A has made a query of the form Send(∗, (σ, m)) where σ
is a valid signature on m with respect to Kp and (σ, m) /∈ K,
then F halts and outputs (σ, m) as a forgery. Otherwise the
process stops when A terminates and F outputs “Fail”.
The probability that F outputs a forgery is the probabil-
ity that A produces a valid ﬂow by itself multiplied to the
probability to “correctly guess” the value of i:
i ) (∀s ∈ N).
Succcma
Σ (F ) ≥ ν
n
260The runnning time of F is the running time of A added
to the time to process the Send-queries. This is essentially
a constant value. This gives the formula for t:
(cid:2)(cid:2) ≤ t + qsenTexp(k)
t
6.4.2 G-CDHΓ-attacker ∆.
(cid:2)
, 
Let’s assume that A gets its advantage without producing
a forgery. (Here with probability greater than ν the valid
ﬂows signed with LLU come from oracle U before U gets
corrupted and not from A.) We construct from A a (t
(cid:2)
)-
G-CDHΓ-attacker ∆ which receives as input an instance of
G-CDHΓ and outputs the group Diﬃe-Hellman secret value
relative to this instance.
∆ receives as input an instance D = (({1}, gx1 ), ({2}, gx2 ),
. . . , F ln) of the G-CDHΓ problem, where F ln are the terms
corresponding to subsets of indices of cardinality n− 1 (with
the same structure as in the broadcast). ∆ provides coin
tosses to GLL, A, all Πs
U , and runs GLL(1k) to set the play-
ers’ LL-keys. ∆ picks at random n values u1 through un
in [1, qse]n. Then ∆ starts running A as a subroutine and
answers the oracle queries made by A as explained below.
∆ uses a set of counters ci through cn, initially set to zero.
When A makes a Send-query to some instance of player
Ui, then ∆ increments ci and proceeds as in protocol P
using a random value. However if ci = ui and m is the
ﬂow corresponding to the instance D, ∆ answers using the
elements from the instance D. When A makes a Corrupt-
query, ∆ answers in a straightforward way. When A makes
a Hash-query, F answers the query as depicted on Figure 2.
When A makes a Reveal-query, ∆ answers in straightforward
way. However, if the session key has to be constructed from
the instance D, ∆ halts and outputs “Fail”. When A makes
the Test-query, ∆ answers with a random string.
We emphasize that, since ∆ knows all the keys except for
the execution involving D in all
one execution of P (i.e.
ﬂows), this simulation is perfectly indistinguishable from an
execution of the real protocol P .
The probability that ∆ correctly “guesses” on which ses-
sion key A will make the Test-query is the probability that
∆ correctly “guesses” the values u1 through un. That is:
(cid:6)
n
δ =
1
qse
=
1
qn
se
(cid:2)
Then, when A terminates outputting a bit b
In this case, ∆ is actually able to answer to all Reveal-
queries, since Reveal-query must be asked to a Fresh ora-
cle, holding a key diﬀerent from the Test-ed one, and thus,
known to ∆.
, ∆ looks in
the H-list to see if some queries of the form Hash(U1, . . . , Un,
F ln,∗) have been asked. If so, ∆ chooses at random one of
them, halts and outputs the remaining part “∗” of the query.
Let Ask be the event that A makes a Hash-query on (U1, ...,
Un, F ln, gx1···xn ). The advantage of A in breaking the AKE
security without forging a signature, conditioned by the fact
that we correctly guessed all ui’s, is:
 − ν
P (A) = 2 Pr[b = b
qn
se
≤ Advake
(cid:2)
] − 1
(cid:2)|¬Ask] Pr[¬Ask] +
2 Pr[b = b
(cid:2)|¬Ask] − 1 + 2 Pr[Ask] = 2 Pr[Ask]
(cid:2)|Ask] Pr[Ask] − 1
≤ 2 Pr[b = b
= 2 Pr[b = b
In the random oracle model, 2 Pr[b = b
(cid:2)|¬Ask] − 1 = 0,
since A can not gain any advantage on a random value with-
out asking for it.
The success probability of ∆ is the probability that A asks
the correct value to the hash oracle multiplied by the prob-
ability that ∆ correctly chooses among the possible Hash-
queries:
SuccgcdhΓ
G
(∆) ≥ Pr[Ask]
qh
≥  − ν
2qn
se
× 1
qh
The runnning time of ∆ is the running time of A added
to the time to process the Send-queries. This is essentially n
modular exponentiation computation per Send-query. Then
(cid:2) ≤ t + qsenTexp(k)
t
Hash function H
−−−−−−−−−−−−−→ If m (cid:11)∈ H-list, then r R←∈ {0, 1}(cid:28),
query m
H(m)
←−−−−−−−−−−−−−
and H-list ← H-list!(m, r).
Otherwise, r is taken from H-list.
List
H-list
H-list
Members Meaning
H(m) = r;
Hash query has been made on m
(m, r)
Figure 2: Hash-oracle simulation.
6.5 Result Analysis
The quality of the reduction measures how much secu-
rity of the G-CDH and the signature scheme is injected into
AKE1. We view qse as an upper bound on the number of
queries we are willing to allow (e.g., qse = 230 and qh = 260)
and n as the number of participants involved in the execu-
tion of AKE1 (e.g., current scientiﬁc collaborations involve
up to 20 participants). Moreover, because of the network
latency and computation cost, the practicability of AKE1
becomes an issue with groups larger than 40 members oper-
ating in a wide-area environment [1].
We may then ask how the security proof is meaningful
in practice. First, one has to be clear that such a proof of
security is much better than no proof at all and that AKE1
is the ﬁrst AKE scheme to have a proof of security. Second,
several techniques can be used to carry out a proof which
achieves a better (or tighter) security reduction.
In eﬀect the reduction can be improved using a technique
of Shoup [29]. Shoup’s technique runs two attackers, similar
to the one above, in parallel on two diﬀerent instances ob-
tained by random self-reducibility [25], and a common value
will appear in the H-list of the attackers with overwhelming
probability and thus leads to the right solution for G-CDH.
The reduction can also be improved if the security of
AKE1 is based on the G-DDH assumption. The idea is
to use a technique similar to the one used by Coron [16] and
to use the random self-reducibility of G-DDHΓ to generate
many instances D(cid:2)
lie in the
from D such that all the D(cid:2)
261same distribution as D, either G-DDHΓ or RΓ. Such in-
stances are randomly used. But then, the resulting session
key will be unknown. Therefore, the reduction will work
if all the Reveal-queries are asked for known session keys,
but the Test-query is asked to one involving an instance D(cid:2)
.
By correctly tuning the probability of using a D(cid:2)
instance
or not, one can slightly improve the eﬃciency of the reduc-
tion4. Moreover, if the session key is simply ﬁxed as gx1···xn
the proof can be carried out in the standard model.
7. ADDING AUTHENTICATION
(cid:2)
In this section we sketch generic transformations for turn-
ing an AKE protocol P into a protocol P
that provides
player-to-players authentication (PPsA) and mutual authen-
tication (MA). Then, we prove in the ideal hash model that
the transformation provides a secure MA scheme and com-
ment on the security theorem.
It may be argued that PPsA and MA are not absolutely
necessary, can be achieved by a variety of means (e.g, en-
cryption could begin on some carefully chosen known data)
or even that MA does give real security guarantees in prac-
tice. However, the task of a cryptographic protocol designer
is to make no assumptions about how system designers will
use the session key and provide application developers with
protocols requiring only a minimal degree of cryptographic
awarness.
7.1 Approach
The well-known approach uses the shared session key to
construct a simple “authenticator” for the other parties.
However, one has to be careful in the details and this is
a common “error” in the design of authentication protocols.
Actually the protocols oﬀered by Ateniese et al. [2] are seen
insecure under our deﬁnitions since the “authenticator” is
computed as the hash of the session key sk and sk is the
same as the ﬁnal session key SK. The adversary learns some
information about the session key sk – the hash of sk – and
can use it to distinguish SK from a session key selected at
random from session-key space SK. Therefore these proto-
cols sacriﬁce the security goal that a protocol establishes a
semantically secure session key.
7.2 Description of the Transformations
The transformation AddPPsA (adding player-to-players
authentication) for player U consists of adding to protocol
P one more round in such a way that the partners of U are
convinced they share sk with U . As an example, on ﬁgure 3
player Un sends out H(sk, n).
(cid:2)
More formally the transformation AddPPsA works as fol-
lows. Suppose that in protocol P player Un has accepted
holding skUn , sidUn , pidUn and has terminated.
In proto-
= AddPPs(P ), Un sends out one additional ﬂow
col P
authUn = H(skUn , n), accepts holding sk
Un = H(skUn , 0),
(cid:2)
(cid:2)
(cid:2)
Un = sidUn , pid
Un = pidUn , and then terminates. Sup-
sid
pose now that in P the partner Ui (i (cid:11)= n) of Un has ac-
cepted holding skUi , sidUi , pidUi and has terminated.
In
, Ui receives one additional ﬂow authUn and
protocol P