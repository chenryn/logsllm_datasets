1
Java⼩trick之在懵逼中为Random跪下
LxLN 问题
LxLO 解答
LxLO.N 初步解答
LxLO.O 回看问题
LxLP 思考
LxLQ 杂项
LxLS 总结
这个⽉在逛着https://stackoverﬂow.com突然发现个有点意思的⼀段代码,或者说是有点意思的猴戏 
怎么说呢,就是看完以后,不知道为啥⼦,我就在懵逼中跪下了... 
为了解决疑问,快速爬起来,我就决定解决这个疑问 
先给你们看看这个问题是啥,你们就知道我为何懵逼了 
https://stackoverﬂow.com/questions/15182496/why-does-this-code-using-random-strings-
print-hello-world 
翻译过来就是⼀句话:下⾯的代码将打印“hello world”,有⼈能解释⼀下吗? 
⼤概是这个意思,我也是有道云翻译的.... 
0x01 问题 
2
给出的代码也超级简单,可以拿idea跑⼀下看看结果 
3
Java
复制代码
// 让⼈懵逼的代码
package Test2;
import java.util.Random;
public class Test1 {
    public static void main(String[] args) {
        System.out.println(randomString(-229985452) + " " + 
randomString(-147909649));
    }
    public static String randomString(int i) {
        Random ran = new Random(i);
        StringBuilder sb = new StringBuilder();
        while (true) {
            int k = ran.nextInt(27);
            if (k == 0) {
                break;
            }
            sb.append((char) ('`' + k));
        }
        return sb.toString();
    }
}
// 运⾏结果
hello world
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
4
就问你... 
这个代码给你,你第⼀眼看到输出个“hello world”懵逼不懵逼? 
懵逼完了以后,就可以开始想想为什么了 
先看了⼀眼源码,有点拗⼝,让我有点懒的思考,于是决定去看看⽂章的评论 
0x02 解答 
0x02.1 初步解答 
5
我这么懒的逼,当然是选择看评论拉,看到⼀个⾼赞回答,看看写了啥先 
有道翻译是这么说的:  
当使⽤特定的种⼦值(seed)(在本例中是  -229985452 与  -147909649 )构
建 java.util.Random 的实例时 
那么 java.util.Random 将从指定的种⼦值(seed)开始⽣成随机数 
⽤相同的种⼦值(seed)构建的每⼀个 java.util.Random 对象,每次都会产⽣相同的数字 
是不是感觉还是有点懵逼,简单的说就是当这个种⼦值(seed)是固定的时,那么⽣成出来的结果也是固定的 
6
这⾥我们做个⼩实验,写⼀段代码,运⾏⼀下,你就会恍然⼤悟说的是啥了 
Java
复制代码
// 随机数固定结果测试
package Test2;
import java.util.Random;
public class Test2 {
    public static void main(String[] args) {
        randomString(-229985452);
        System.out.println("--------------");
        randomString(-229985452);
    }
    private static void randomString(int i) {
        Random ran = new Random(i);
        System.out.println(ran.nextInt());
        System.out.println(ran.nextInt());
        System.out.println(ran.nextInt());
        System.out.println(ran.nextInt());
        System.out.println(ran.nextInt());
    }
}
// 运⾏结果
-755142161
-1073255141
-369383326
1592674620
-1524828502
--------------
-755142161
-1073255141
-369383326
1592674620
-1524828502
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
7
可以发现,我这边在种⼦值(seed)⼀致的情况下,运⾏⼆次的结果返回都是⼀致的 
当然读者也可以试试运⾏,你的结果⼀定也是会和我⼀致的 
也就是说在使⽤ java.util.Random 时,如果指定的种⼦值(seed)是相同的 
那么他们⽣成并返回的其实是看起来是随机的固定数字
8
⽽且我们都知道 java.util.Random 本身就是⼀个伪随机算法 
⽽当使⽤特定的种⼦值(seed)构建 java.util.Random 的实例时,那就成了⼀个更加伪的伪随机算法了 
这么说是因为如果能猜测出,种⼦值(seed)或是种⼦值(seed)泄漏了,那么理论上就可以推测出随机数⽣成
的结果
好了前⾯逼逼那么多,现在也应该知道  java.util.Random 中指定种⼦值(seed)的关键了 
现在让读者们,随我在回去看看问题,应该就可以看出来是为啥了 
主要看循环⾥⾯的代码即可
先了解个基础的⼩知识,带参的  nextInt(int x) 会⽣成⼀个范围在  0~x(不包含x) 内的任意正整数 
现在看 int k = ran.nextInt(27); 这句话,这表示  k 这个变量返回的值⼀定是  [0,26] 内的⼀
个正整数
if (k == 0) 的意思就是说,如果  k 这个变量,返回  0 就退出循环,这个没啥⼦好说的 
在进⾏下⼀步之前,打印看看  int k = ran.nextInt(27); 具体会返回什么 
0x02.2 回看问题 
9
10
有个印象即可,⽆需特别在意 
在看个基础的⼩知识,  Java 中的单引号表示字符⼀般是  char 类型 
现在看 (char) ('`' + k) 其中  '`' 是个  char 类型,看到  char  +  int 条件反射的想到  ASC
II 码 
⽽且 '`' 的  ASCII 码是  96  
并且 k 返回的是  [0,26] 内的⼀个正整数 
因此 (char) ('`' + k) 这个代码的范围就是  [96+1,96+26]  
去除返回值为 0 的,最终只需要对照着  ASCII 码表,就能看出是对其的那些字⺟了 
Plain Text
复制代码
// int k = ran.nextInt(27);两个种⼦值(seed)的返回结果
----------------
种⼦值(seed): -229985452
返回值:8
返回值:5
返回值:12
返回值:12
返回值:15
返回值:0
----------------
种⼦值(seed): -147909649
返回值:23
返回值:15
返回值:18
返回值:12
返回值:4
返回值:0
----------------
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
11
到这⾥,对于为什么这⼀段谜⼀样的代码能输出“hello world”,我们已经了然于胸了 
看穿了以后,也就是个⼩把戏罢了 
然后我就开始想这个东⻄如果拿来写⻢⼦,⽤于关键字混淆什么的,那不是会很棒? 
于是就开始思考如何改造最前⾯的demo,让它啥⼦单词都能打出来,因为现在这个代码只能输出“hello 
world” 
所以当务之急是找或写⼀个可以把字符串变成种⼦值(seed)的函数
当然我这么懒,所以我选择了找,然后还真被我找到了 
0x03 思考 
Plain Text
复制代码
96 + 8 = 104 -> h
96 + 5 =101 -> e
96 + 12 = 108 -> l
96 + 12 = 108 -> l
96 + 15 = 111 -> o
96 + 23 = 119 -> w
96 + 15 = 111 -> o
96 + 18 = 114 -> r
96 + 12 = 108 -> l
96 + 4 = 100 -> d
1
2
3
4
5
6
7
8
9
10
12
拷⻉⼀下,本地试试 
13
很好,但是还差点,因为它只能跑  a-z ,这可不太⾏啊 
因为我们写⻢的时候,各种特殊符号之类的,可是都要有的,所以还是需要⼀个⼩⼩的改动 
14
Java
复制代码
// 最终改动完成的代码
// 注意: 种⼦⽣成的时间,会因为代码的⻓度与复杂度的增加⽽增加
import java.util.*;
import java.util.stream.Collectors;
public class Test3 {
    public static void main(String[] args) {
        long start = System.currentTimeMillis();
        long[] seedList = generateSeedList("java.lang.Runtime");
        for (long seed : seedList) {
            System.out.println("种⼦值(seed): " + seed);
            System.out.println("对应字符串: " + 
seedConversionString(seed));
            System.out.println("------");
        }
        System.out.println("种⼦⽣成花费时间: " + (double) 
(System.currentTimeMillis() - start) / 1000 + "秒");
        String data = seedListConversionString(seedList);
        System.out.println("种⼦列表转换结果: " + data);
    }
    /**
     * 测试使⽤
     * 输出所有字符的种⼦与解析结果
     */
    public static void test() {
        String str = " !\"#$%&'()*+,-./0123456789:;?
@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
        String[] strs = str.split("");
        for (String s : strs) {
            System.out.println("----");
            long dataSeed = generateSeed(s);
            System.out.println("种⼦值(seed): " + dataSeed);
            System.out.println("对应字符串: " + 
seedConversionString(dataSeed));
            System.out.println("-----");
        }
    }
    /**
     * 功能: 输⼊字符串获取种⼦数组
     *
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
15
     * @param goal 要转为种⼦的字符串
     * @return
     */
    public static long[] generateSeedList(String goal) {
        List dataSourceList = Arrays.asList(goal.split(""));
        int groupSize = (int) Math.ceil((double) goal.length() / 3);
        List seedList = new ArrayList<>();
        for (List stringList : listChunkSplit(dataSourceList, 
groupSize)) {
            long seed = 
generateSeed(stringList.stream().collect(Collectors.joining("")));
            seedList.add(seed);
        }
        return seedList.stream().mapToLong(t -> t).toArray();
    }
    /**
     * 功能: 输⼊字符串获取种⼦
     * 注: 单词越⻓,需要查找的时间就越⻓,个⼈建议1-3个字符为⼀个种⼦,可以基本可以⽆
感知的快速⽣成种⼦
     *
     * @param goal 要转为种⼦的字符串
     * @return
     */
    public static long generateSeed(String goal) {
        String str = " !\"#$%&'()*+,-./0123456789:;?
@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
        for (String s : goal.split("")) {
            if (!str.contains(s)) {
                throw new RuntimeException(String.format("%s 该字符,不是符
合条件的字符,请修改", s));
            }
        }
        char[] input = goal.toCharArray();
        char[] pool = new char[input.length];
        label:
        for (long seed = Integer.MIN_VALUE; seed < Integer.MAX_VALUE; 
seed++) {
            Random random = new Random(seed);
            for (int i = 0; i < input.length; i++) {
                pool[i] = (char) (31 + random.nextInt(96));
            }
            if (random.nextInt(96) == 0) {
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70