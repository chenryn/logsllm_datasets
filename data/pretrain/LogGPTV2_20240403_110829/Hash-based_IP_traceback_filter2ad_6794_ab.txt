or one can attempt to infer the route based upon its impact on the
state of the network. Both approaches become increasingly difﬁcult
as the size of the ﬂow decreases, but the latter becomes infeasible
when ﬂow sizes approach a single packet because small ﬂows gen-
erally have no measurable impact on the network state.
Route inference was pioneered by Burch and Cheswick [5] who
considered the restricted problem of large packet ﬂows and pro-
posed a novel technique that systematically ﬂoods candidate net-
work links. By watching for variations in the received packet ﬂow
due to the restricted link bandwidth, they are able to infer the ﬂow’s
route. This requires considerable knowledge of network topology
and the ability to generate large packet ﬂoods on arbitrary network
links.
One can categorize auditing techniques into two classes according
to the way in which they balance resource requirements across the
network components. Some techniques require resources at both
the end host and the routing infrastructure, others require resources
only within the network itself. Of those that require only infrastruc-
ture support, some add packet processing to the forwarding engine
of the routers while others ofﬂoad the computation to the control
path of the routers.
3.1 End-host schemes
Some auditing approaches attempt to distribute the burden by stor-
ing state at the end hosts rather than in the network. Routers notify
the packet destination of their presence on the route. Because IP
packets cannot grow arbitrarily large, schemes have been developed
to reduce the amount of space required to send such information.
Recently proposed techniques by Savage et al. [21] and Bellovin [2]
explore in-band and out-of-band signaling, respectively.
Because of the high overhead involved, neither Savage nor Bellovin
attempt to provide audit information for every packet. Instead, each
employs probabilistic methods that allow sufﬁciently large packet
ﬂows to be traced. By providing partial information on a subset
of packets in a ﬂow, auditing routers enable an end host to recon-
struct the entire path traversed by the packet ﬂow after receiving a
sufﬁcient number of packets belonging to the ﬂow.
The two schemes diverge in the methods used to communicate the
information to the end host. Savage et al. employ a packet marking
scheme that encodes the information in rarely-used ﬁelds within
the IP header itself. This approach has been improved upon by
Song and Perrig to improve the reconstruction of paths and authen-
ticate the encodings [23]. In order to avoid the backwards compat-
ibility issues and increased computation required by the sophisti-
cated encoding schemes employed in the packet marking schemes,
Bellovin’s scheme (and later extensions by Wu et al. [25]) simply
sends the audit information in an ICMP message.
3.2 Infrastructure approaches
End-host schemes require the end hosts to log meta data in case an
incoming packet proves to be offensive. Alternatively, the network
itself can be charged with maintaining the audit trails.
The obvious approach to auditing packet ﬂow is simply to log pack-
ets at various points throughout the network and then use appropri-
ate extraction techniques to discover the packet’s path through the
network. Logging requires no computation on the router’s fast path
and, thus, can be implemented efﬁciently in today’s router architec-
ture. Sager suggests such a monitoring approach [19]. However,
the effectiveness of the logs is limited by the amount of space avail-
able to store them. Given today’s link speeds, packet logs quickly
grow to intractable sizes, even over relatively short time frames. An
OC-192 link is capable of transferring 1.25GB per second. If one
allows 60 seconds to conduct a query, a router with 16 links would
require 1.2TB of high-speed storage.
These requirements can be reduced by sampling techniques similar
to those of the end-host schemes, but down-sampling reduces the
probability of detecting small ﬂows and does not alleviate the se-
curity issues raised by storing complete packets in the router. The
ability of an attacker to break into a router and capture terrabytes of
actual trafﬁc has severe privacy implications.
Alternatively, routers can be tasked to perform more sophisticated
auditing in real time, extracting a smaller amount of information
as packets are forwarded. Many currently available routers support
input debugging, a feature that identiﬁes on which incoming port
a particular outgoing packet (or set of packets) of interest arrived.
Since no history is stored, however, this process must be activated
before an attack packet passes by. Furthermore, due to the high
overhead of this operation on many popular router architectures,
activating it may have adverse effects on the trafﬁc currently being
serviced by the router.
3.3 Specialized routing
One of the main problems with the link testing or logging meth-
ods above is the large amount of repetition required. A trace is
conducted in a hop-by-hop fashion requiring a query at each router
along the way. Once the incoming link or links have been identiﬁed,
the process must be repeated at the upstream router.
Several techniques have been developed to streamline and automate
this process. Some ISPs have developed their own ad hoc mecha-
nisms for automatically conducting input debugging across their
networks. Schnackenberg et al. [22] propose a special Intruder
Detection and Isolation Protocol (IDIP) to facilitate interaction be-
tween routers involved in a traceback effort. IDIP does not specify
how participating entities should track packet trafﬁc; it simply re-
quires that they be able to determine whether or not they have seen
a component of an attack matching a certain description. Even with
automated tools, however, each router in the ISP must support input
debugging or logging which are not common in today’s high-speed
routers for reasons discussed above.
In order to avoid this requirement, Stone [24] suggests constructing
an overlay network connecting all the edge routers of an ISP. By
using a deliberately simple topology of specialized routers, suspi-
cious ﬂows can be dynamically rerouted across the special tracking
network for analysis. This approach has two major shortcomings.
First, the attack must be sufﬁciently long-lived to allow the ISP to
effect the rerouting before the relevant ﬂow terminates. Second, the
routing change is perceptible by the attacker, and an especially mo-
tivated attacker may be able to escape detection by taking appropri-
ate action. While techniques exist to hide precisely what changed
about the route, changes in layer-three topology are hard to mask.
4 PACKET DIGESTING
SPIE, the Source Path Isolation Engine, uses auditing techniques to
support the traceback of individual packets while reducing the stor-
age requirements by several orders of magnitude over current log-
based techniques [19]. Trafﬁc auditing is accomplished by comput-
ing and storing 32-bit packet digests rather than storing the packets
themselves. In addition to reducing storage requirements, storing
packet digests instead of the actual packet contents preserves traf-
ﬁc conﬁdentiality by preventing SPIE from being used as a tool for
eavesdropping.
Version
Header
Length
Type of Service
Total Length
Identiﬁcation
D
F
M
F
Fragment Offset
TTL
Protocol
Checksum
Source Address
Destination Address
Options
Payload
s
t
e
k
c
a
P
d
e
d
i
l
l
o
C
f
o
n
o
i
t
c
a
r
F
1
0.1
0.01
0.001
0.0001
1e-05
1e-06
WAN
LAN
20
22
24
26
28
30
32
34
36
38
40
Prefix Length (in bytes)
Figure 2: The ﬁelds of an IP packet. Fields in gray are masked
out before digesting, including the Type of Service, Time to Live
(TTL), IP checksum, and IP options ﬁelds.
4.1 Hash input
The packet content used as input to the hash function must uniquely
represent an IP packet and enable the identiﬁcation of the packet
across hops in the forwarding path. At the same time, it is desir-
able to limit the size of the hash input both for performance and
for reasons discussed below (c.f. section 5.3). Dufﬁeld and Gross-
glauser encountered similar requirements while sampling a subset
of forwarded packets in an attempt to measure trafﬁc ﬂows [7]. We
use a similar approach, masking variant packet content and select-
ing an appropriate-length preﬁx of the packet to use as input to the
digesting function. Our choice of invariant ﬁelds and preﬁx length
is slightly different, however.
Figure 2 shows an IP packet and the ﬁelds included by the SPIE di-
gesting function. SPIE computes digests over the invariant portion
of the IP header and the ﬁrst 8 bytes of the payload. Frequently
modiﬁed header ﬁelds are masked prior to digesting. Note that be-
yond the obvious ﬁelds (TTL, TOS, and checksum), certain IP op-
tions cause routers to rewrite the option ﬁeld at various intervals. To
ensure a packet appears identical at all steps along its route, SPIE
masks or compensates for these ﬁelds when computing the packet
digests. It is important to note that the invariant IP ﬁelds used for
SPIE digesting may occasionally be modiﬁed by a packet transform
(c.f. section 5.3).
Our research indicates that the ﬁrst 28 invariant bytes of a packet
(masked IP header plus the ﬁrst 8 bytes of payload) are sufﬁcient
to differentiate almost all non-identical packets. Figure 3 presents
the rate of packet collisions for an increasing preﬁx length for two
representative traces: a WAN trace from an OC-3 gateway router,
and a LAN trace from an active 100Mb Ethernet segment. (Results
were similar for traces across a number of sites.) Two unique pack-
ets which are identical up to the speciﬁed preﬁx length are termed
a collision. A 28-byte preﬁx results in a collision rate of approxi-
mately 0.00092% in the wide area and 0.139% on the LAN.
Unlike similar results reported by Dufﬁeld and Grossglauser [7, ﬁg.
4], our results include only unique packets; exact duplicates were
removed from the packet trace. Close inspection of packets in the
Figure 3: The fraction of packets that collide as a function of pre-
ﬁx length. The WAN trace represents 985,150 packets (with 5,801
duplicates removed) collected on July 20, 2000 at the University of
Florida OC-3 gateway [14]. The LAN trace consists of one million
packets (317 duplicates removed) observed on an Ethernet segment
at the MIT Lab for Computer Science.
wide area with identical preﬁxes indicates that packets with match-
ing preﬁx lengths of 22 and 23 bytes are ICMP Time Exceeded
error packets with the IP identiﬁcation ﬁeld set to zero. Similarly,
packets with matching preﬁxes between 24 and 31 bytes in length
are TCP packets with IP identiﬁcations also set to zero which are
ﬁrst differentiated by the TCP sequence number or acknowledg-
ment ﬁelds.2
The markedly higher collision rate in the local area is due to the lack
of address and trafﬁc diversity. This expected result does not sig-
niﬁcantly impact SPIE’s performance, however. LANs are likely to
exist at only two points in an attack graph: immediately surround-
ing the victim and the attacker(s). False positives on the victim’s
local network can be easily eliminated from the attack graph—they
likely share the same gateway router in any event. False positives
at the source are unlikely if the attacker is using spoofed source ad-
dresses, as this provides the missing diversity in attack trafﬁc, and
remain in the immediate vicinity of the true attacker by deﬁnition.
Hence, for the purposes of SPIE, IP packets are effectively distin-
guished by the ﬁrst 28 invariant bytes of the packet.
4.2 Bloom ﬁlters
Storing the set of digests for the trafﬁc forwarded by the router
would require massive amounts of storage. Instead, SPIE uses a
space-efﬁcient data structure known as a Bloom ﬁlter to record
packet digests [4]. A Bloom ﬁlter computes k distinct packet di-
gests for each packet using independent uniform hash functions,
and uses the n-bit results to index into a 2n-sized bit array. The
array is initialized to all zeros, and bits are set to one as packets are
received. Figure 4 depicts a Bloom ﬁlter with k hash functions.
Membership tests can be conducted simply by computing the k di-
gests on the packet in question and checking the indicated bit posi-
2Further investigation indicates a number of current operating systems,
including recent versions of Linux, frequently set the IP ID to zero.
H1(P)
H2(P)
H3(P)
.
.
.
Hk(P)
n bits
1
1
1
1
2n
bits
DGA
Router
Router
Router
SCAR
DGA
Router
Router
Router
ISP's Network
DGA
Router
Router
STM
Figure 4: For each packet received, SPIE computes k independent
n-bit digests, and sets the corresponding bits in the 2n-bit digest
table.
Figure 5: The SPIE network infrastructure, consisting of Data Gen-
eration Agents (DGAs), SPIE Collection and Reduction Agents
(SCARs), and a SPIE Traceback Manager (STM).
tions. If any one of them is zero, the packet was not stored in the
table. If, however, all the bits are one, it is highly likely the packet
was stored. It is possible that some set of other insertions caused all
the bits to be set, creating a false positive, but the rate of such false
positives can be controlled [8].
prints, but that is the common case already. The third, and most
difﬁcult attack, is to create an attack packet with the same ﬁnger-
print as another, non-attack packet. In general, this attack simply
yields one more false-positive path, usually only for one hop (as
the hash functions change at each hop).
4.3 Hash functions