i7-8850H CPU 2.60GHz, 16 GB of memory, running Windows
OS and .NET Framework 4.8.04084. The analysis results and
data are available in SerialDetector’s repository [41].
First, SerialDetector indexes all code of the .NET Frame-
work and detects the list of sensitive sinks. The .NET
Framework consists of 269 managed assemblies with 466,218
methods and 50,399 types. SerialDetector completes this step
in 12.4 seconds and detects 123 different sensitive sinks.
Not all sensitive sinks create new objects dynamically based
on input data, hence we ﬁlter out such sensitive sinks
after manual analyisis. For example,
the external method
Interlocked.CompareExchange is considered as sensitive
sink, however it only implements atomic operations like com-
paring two objects, hence we exclude it from our list.
Detection phase. To evaluate true positives, false positives,
and false negatives of the detection phase, we run SerialDetec-
tor against known OIVs in .NET Framework and third-party
libraries using insecure serializers from the YSoSerial.Net
project [3]. We use the deserialization methods of insecure se-
rializers as entry points for our data ﬂow analysis. The analyzer
generates OIV patterns for each deserializer. We then match the
attack triggers with gadgets from YSoSerial.Net as an indicator
of effectiveness. SerialDetector conﬁrmed exploitable patterns
for 10 deserializers. It also reported warning for 5 deserializers
DataContractJsonSerializer, DataContractSerializer, FsPickler,
NetDataContractSerializer, and XmlSerializer since it lacks
support for delegates calls. If a code snippet uses a delegate
to create a type, we lose information about that type, hence
SerialDetector cannot resolve virtual calls of that type.
Table I presents the results of our experiments. We report
the Version of the library or the framework containing that
library, and the number of different Methods analyzed for
each entry point. The analyzer generates a summary for each
method. We need re-analyze some methods, for example,
recursive methods or methods with virtual calls that must be re-
analyzed after creating an instance of the type with a concrete
implementation. Therefore, the number of summaries is always
greater than the analyzed methods.
The column Patterns shows the number of unique OIV
patterns for each serializer, while Priority Patterns shows
patterns that contain the methods of known gadgets. The
pattern consists of the attack triggers that are called on a
unique tainted object. It is unclear whether or not the rest of
attack triggers is exploitable, since this requires detection of
new gadgets, which we do not address in this work. Therefore,
the number of (priority) patterns minus one corresponds to the
number of (gadget speciﬁc) false positives.
Exploitation phase. We carry out an in-breadth analysis
of .NET applications vulnerable to OIVs using the follow-
ing methodology: (1) We collected vulnerabilities from the
National Vulnerability Database using the keyword ".NET"
and category "CWE-502 Deserialization of Untrusted Data"
as of January 1st, 2019. As a result, we obtained 55 matched
records; (2) We inspected the vulnerabilities manually and
found that 11 vulnerabilities were actually detected in .NET
applications, of which only 5 vulnerable applications were
available for download; (3) We analyzed these applications
with SerialDetector as reported in the ﬁrst part of Table II;
(4) Since not all vulnerabilities of insecure deserialization are
marked as CWE-502, we searched the Internet for additional
OIVs and added them in our experiments, including the new
vulnerabilities that we found in Azure DevOps Server. In total,
we run SerialDetector against 7 different applications with
10 OIVs. SerialDetector detected vulnerable calls of insecure
deserializers and related entry points in all applications except
for the Telerik UI product, which uses the Reﬂection API
to call an insecure conﬁguration of JavaScriptSerializer. The
current version of SerialDetector does not support reﬂection
for reconstructing the call graph and ignores such calls.
Table II contains information about
the number of as-
semblies and analyzed instructions to illustrate the size of
applications. The column "Entry Points w/o Threat Model"
provides information about the count of all detected entry
points that reach insecure serializer calls. However, not all
assembly entry points are available for attackers to execute.
Some are never called by an application, while others require
privileges that are inaccessible to the attacker. The exploitable
entry points depend on the threat model which is speciﬁc to
an application. We describe the possible threat models for a
web application in Section VII-B. To provide an assessment
in line with the actual operation mode of SerialDetector, we
leverage the (known) vulnerable entry points and compute the
number of detected entry points for a speciﬁc threat model.
Thus, an attacker ﬁrst identiﬁes the parts of the target system
(assemblies) that are reachable for a threat model and then
runs a detailed analysis. The column "Entry Points w/ Threat
Model" reports the results of SerialDetector. The total number
of entry points estimates the upper bound (it also includes true
positives) on the number of false positives of our analysis.
12
BinaryFormatter
DataContractJsonSerializer
DataContractSerializer
.NET 4.8.04084
.NET 4.8.04084
.NET 4.8.04084
FastJSON
FsPickler
JavaScriptSerializer
LosFormatter
NetDataContractSerializer
Newtonsoft.Json
ObjectStateFormatter
SharpSerializer
SoapFormatter
XamlReader
XmlSerializer
YamlDotNet
Version
2.3.2
4.6
.NET 4.8.04084
.NET 4.8.04084
.NET 4.8.04084
.NET 4.8.04084
12.0.3
3.0.1
.NET 4.8.04084
.NET 4.8.04084
.NET 4.8.04084
4.3.1
Time
(sec)
1.5
122.2
51.9
3.3
1.5
44.9
86.3
158.2
7.6
2.5
47.9
8.0
10.4
158.2
6.0
Memory
(Mb)
7,208
16,042
13,942
7,495
7,216
13,234
15,278
17,578
7,776
7,213
13,180
7,743
7,754
16,766
7,754
Patterns
6
73
73
24
7
121
9
72
13
9
69
12
133
82
44
Priority
Patterns Methods
5,263
14,091
13,631
6,564
3,552
18,616
18,941
14,021
12,560
6,287
12,819
11,552
14,627
14,511
7,253
6
-
-
15
-
9
9
-
10
9
2
12
23
-
2
Summaries
6,342
16,230
15,748
7,701
4,302
19,727
21,631
15,613
14,373
8,407
14,340
12,786
17,209
16,022
8,441
Method
Calls
31,600
112,322
109,179
41,615
22,927
130,426
146,864
104,941
90,385
47,756
94,317
79,603
109,160
114,808
54,581
Applied
Summaries
Instructions
29,094
102,079
99,294
37,740
20,362
120,007
135,843
96,216
84,208
43,495
87,830
73,698
101,921
106,728
51,080
214,784
576,896
562,410
273,806
152,343
665,524
773,037
545,699
496,888
314,952
500,922
444,448
594,230
583,887
300,192
TABLE I: Evaluation results for the insecure serializers
Software
Version
Serializer
CVE-2020-14030
CVE-2020-10915
CVE-2020-10914
CVE-2019-18935
CVE-2019-10068
CVE-2019-19470
Ozeki SMS Gateway
4.17.6
BinaryFormatter
VEEAM One Agent
10.0.0.750
BinaryFormatter
Telerik UI
for ASP.NET AJAX
2019.2.514
JavaScriptSerializer
Kentico
TinyWall
12.0.0
2.1.8
SoapFormatter
BinaryFormatter
CVE-2019-0604
Microsoft SharePoint
Server 2019
16.0.
10337.12109
XmlSerializer
CVE-2019-1306
CVE-2019-0866
CVE-2019-0872
Azure DevOps
Server 2019
Azure DevOps
Server 2019
17.143.
28621.4
RC2
BinaryFormatter
YamlDotNet
Entry Points
w/ Threat Model
(False Positives UB)
Entry Points
w/o Threat Model
(False Positives UB)
Assemblies/
Instructions
Payload
Changes
31
29
-
1
4
9
14
3
6,283
Microsoft.SharePoint.dll;
Microsoft.SharePoint.Portal.dll
220
29
-
1
30
49,007
20
13
84/
10/
1,866,312
199,185
-
191/