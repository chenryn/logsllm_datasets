### System Configuration
The system is equipped with an Intel i7-8850H CPU running at 2.60GHz and 16 GB of memory, operating on Windows OS with .NET Framework 4.8.04084. The analysis results and data are available in the SerialDetector repository [41].

### Indexing and Sensitive Sink Detection
SerialDetector first indexes all code within the .NET Framework to detect a list of sensitive sinks. The .NET Framework comprises 269 managed assemblies, containing 466,218 methods and 50,399 types. This indexing process is completed in 12.4 seconds, resulting in the detection of 123 different sensitive sinks.

Not all detected sensitive sinks create new objects dynamically based on input data. Therefore, we manually filter out such sinks. For example, the external method `Interlocked.CompareExchange` is considered a sensitive sink, but it only implements atomic operations like comparing two objects. As a result, it is excluded from our list.

### Detection Phase
To evaluate the true positives, false positives, and false negatives in the detection phase, we run SerialDetector against known Object Injection Vulnerabilities (OIVs) in the .NET Framework and third-party libraries using insecure serializers from the YSoSerial.Net project [3]. We use the deserialization methods of insecure serializers as entry points for our data flow analysis. The analyzer generates OIV patterns for each deserializer, which we then match with gadgets from YSoSerial.Net to indicate effectiveness.

SerialDetector confirmed exploitable patterns for 10 deserializers and reported warnings for 5 deserializers: `DataContractJsonSerializer`, `DataContractSerializer`, `FsPickler`, `NetDataContractSerializer`, and `XmlSerializer`. These warnings are due to the lack of support for delegate calls. If a code snippet uses a delegate to create a type, SerialDetector loses information about that type and cannot resolve virtual calls for it.

### Experimental Results
Table I presents the results of our experiments. It includes the version of the library or framework, the number of different methods analyzed for each entry point, and the number of summaries generated. Some methods, such as recursive ones or those with virtual calls, require re-analysis after creating an instance of the type with a concrete implementation. Thus, the number of summaries is always greater than the number of analyzed methods.

- **Patterns**: Shows the number of unique OIV patterns for each serializer.
- **Priority Patterns**: Shows patterns that contain the methods of known gadgets. The pattern consists of attack triggers called on a unique tainted object. The number of (priority) patterns minus one corresponds to the number of (gadget-specific) false positives.

### Exploitation Phase
We conducted an in-breadth analysis of .NET applications vulnerable to OIVs using the following methodology:

1. **Vulnerability Collection**: We collected vulnerabilities from the National Vulnerability Database using the keyword ".NET" and category "CWE-502 Deserialization of Untrusted Data" as of January 1, 2019, resulting in 55 matched records.
2. **Manual Inspection**: We manually inspected these vulnerabilities and found that 11 were actually detected in .NET applications, of which only 5 were available for download.
3. **Application Analysis**: We analyzed these applications with SerialDetector, as reported in the first part of Table II.
4. **Additional OIVs**: Since not all vulnerabilities of insecure deserialization are marked as CWE-502, we searched the internet for additional OIVs, including new vulnerabilities found in Azure DevOps Server. In total, we ran SerialDetector against 7 different applications with 10 OIVs.

SerialDetector detected vulnerable calls of insecure deserializers and related entry points in all applications except for the Telerik UI product, which uses the Reflection API to call an insecure configuration of `JavaScriptSerializer`. The current version of SerialDetector does not support reflection for reconstructing the call graph and thus ignores such calls.

### Application Size and Entry Points
Table II provides information about the number of assemblies and analyzed instructions to illustrate the size of the applications. The column "Entry Points w/o Threat Model" lists all detected entry points that reach insecure serializer calls. However, not all assembly entry points are accessible to attackers. Some are never called by the application, while others require privileges that are inaccessible to the attacker. The exploitable entry points depend on the specific threat model of the application, described in Section VII-B.

To provide an assessment in line with the actual operation mode of SerialDetector, we leverage the known vulnerable entry points and compute the number of detected entry points for a specific threat model. An attacker first identifies the parts of the target system (assemblies) that are reachable under a given threat model and then runs a detailed analysis. The column "Entry Points w/ Threat Model" reports the results of SerialDetector. The total number of entry points estimates the upper bound on the number of false positives in our analysis.

### Summary
- **BinaryFormatter, DataContractJsonSerializer, DataContractSerializer, etc.**: Various insecure serializers were analyzed, and their performance metrics (time, memory, patterns, priority patterns, methods, and summaries) are presented in Table I.
- **Exploitation Analysis**: Detailed analysis of specific software versions and their associated vulnerabilities, along with the number of entry points and payload changes, is provided in Table II.

This structured approach ensures a comprehensive and accurate evaluation of the security risks associated with OIVs in .NET applications.