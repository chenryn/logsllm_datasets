Session 6A: IoT SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand457be compromised only to the extent that the attacker can control
its user interface. We implemented the attacker in device B as a
full-screen app that receives the six-digit code over the 4G data
connection and emulates the pairing process without doing actually
anything. Thus, the vulnerability occurs relatively often in practice,
even though we do not know of actual attack implementations
outside our laboratory.
The above attack against Bluetooth pairing will work for any
version of SSP or Legacy Pairing. Indeed, we believe it will work for
all device-pairing protocols where the device identity is determined
by physical access to the device alone.
3.2 IoT device bootstrapping case study
We will now look at a protocol for security-bootstrapping and
registration of Internet-of-Things (IoT) devices to an online server.
Although the protocol differs considerably from device pairing, they
are similar in the sense that the identity of the correct device is
defined by physical access to it. This makes the protocol vulnerable
to identity misbinding attacks.
Extensible Authentication Protocol (EAP) [3] is an authentication
framework used, for example, in enterprise wireless networks. It
normally assumes that the wireless devices are pre-registered at a
back-end authentication server. This means that the deployment of
new wireless devices is a multi-step process that includes device
registration and credential provisioning.
Nimble out-of-band authentication for EAP (EAP-NOOB) [8] is
an authentication method for EAP that also supports user-assisted
bootstrapping and registration of new devices. It is intended for
off-the-shelf IoT devices that initially have no known identifiers, no
credentials, and no knowledge of their intended owner and network.
EAP-NOOB registers the new devices to the authentication server
and associates them with the user’s account on the server. The
device, called peer, first performs an ECDH key exchange with
the server. The authentication takes place when the user delivers
a single out-of-band (OOB) message from the peer device to the
server, or in case of peer devices with only input capability such as
cameras, from the server to the peer device. Information delivered
in the OOB message enables mutual authentication of the peer and
server, and it authorizes, on one hand, the server and user to take
control of the device and, on the other, the device to be registered to
the server and user account. The protocol does not limit the ways
in which the OOB message is transferred; the implemented ways
include a QR code, an NFC message, and an audio clip. After the
OOB message has been delivered, the device registration completes
in-band between the peer and the server.
The misbinding attack (shown in Figure 5) arises when the peer
device B is compromised. It can trick the user into registering a
different peer device C to the user’s account in the server. From the
user’s and the attacker’s points of view, the following steps occur
in the attack:
(1) Alice initiates the registration of her web camera B to the
wireless network and authentication server. Unknown to
Alice, camera B is compromised and under the control of
Mallory. Camera B pretends to start the EAP-NOOB protocol
with the server.
Figure 4: Bluetooth Secure Simple Pairing with numeric
comparison [43]
Figure 4, has several phases that must be completed before an
initiating device A and a non-initiating device B are paired securely.
In phase 1, the devices perform an ECDH key exchange. In phase 2,
the non-initiating device commits to a random nonce Nb, which it
reveals after the initiating device has sent its own nonce Na. Device
A checks the commitment to ensure that the nonces have been fairly
chosen. The user-assisted authentication then takes place. Each of
the devices displays to the human user a six-digit verification code,
which it computes from the ECDH key shares and nonces. If the
codes match, the user confirms successful pairing on both devices,
which allows them to continue. In phase 3, the devices confirm
cryptographically the derived ECDH secret and their input and
output capabilities, which were used to select the authentication
mode in the beginning. In phase 4, the devices derive a link key,
i.e. a shared session key. Finally, in phase 5, they use the link key
for encryption in the Link Manager Protocol.
The critical thing to observe about the SSP protocol is that it does
not even try to verify the device names (or other device properties
like make, model and serial number). This is understandable because
Bluetooth device names do not uniquely identify a device. The
protocol does bind the link key to the link-layer addresses of the
two devices, but during the pairing each device will accept any peer
address.
Note that only the software in device B needs to be compromised
for the misbinding attack, while devices A and C can be entirely
normal. The only access the attacker needs on device C is to make
it discoverable, to change its name if necessary, and to confirm
the code comparison. Moreover, the attack requires device B to
Session 6A: IoT SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand458Figure 5: Misbinding attack against EAP-NOOB
(2) At the same time, Mallory initiates the registration of another
web camera C to the same network and authentication server.
Camera C starts the EAP-NOOB protocol with the server.
(3) Alice logs into her user account on the server with her mobile
phone and searches for new cameras available for registra-
tion. Finding a new camera that matches the model of camera
B, she retrieves a QR code encoding the OOB message and
shows it to camera B.
(4) The compromised camera B scans the QR code and secretly
passes a picture of it to Mallory. Mallory shows the QR code
to her camera C. This authorizes the registration of camera
C to Alice’s account on the server.
(5) The web camera C and the server now complete the registra-
tion of camera C to the authentication server, associating it
with Alice’s account, and establish credentials for future au-
thentication and wireless network access. Alice mistakenly
believes that the new camera associated with her account is
B, when in fact, it is C.
In order to trick Alice into selecting the wrong camera from the
server, the attacker needs to match its make and model or other
metadata that the user is likely to search for. The attacker can
achieve this by using another camera of the same type. In that case,
the attacker does not need to modify camera C in any way. She
must be able to start the EAP-NOOB registration process on device
C, but this is not difficult: the EAP-NOOB specification suggests
that the protocol could be activated by powering up the device for
the first time or after a hard reset. An alternative for the attacker
is to have an entirely fake device C that is under her control and
spoofs the device metadata copied from B. It could even copy the
serial number of device B.
Unlike in device pairing, Mallory’s device C does not have to be
in close proximity to Alice’s device B. Mallory can run the EAP-
NOOB protocol on her device C from anywhere in the coverage
area of the wireless networks served by the same authentication
server. She only needs the capability of sending or receiving the
OOB message to or from the compromised device B.
Device bootstrapping and registration with EAP-NOOB is de-
signed to be efficient for deploying large numbers of devices. Thus,
the person installing the devices might not be the eventual user,
and the failure of device B to associate with the server might go
unnoticed for some time. In comparison, device pairing with Blue-
tooth is often followed by another user action such as transfer of
media, which may lead to the user detecting the failure of device B
to pair.
4 FORMAL ANALYSIS OF MISBINDING
We modelled the case-study protocols and their security require-
ments with ProVerif [10, 11]. First, we wanted to enhance previous
models of device pairing and especially Bluetooth SSP to capture
the misbinding attack. It was not clear to us why the existing mod-
els missed the attack when so many other, even more subtle issues
have been detected. We also wondered if the attack and the security
goals it violates can be reduced to previously known ones. As a re-
sult, we learned that the formal models can be made more complete
so that they discover the misbinding attack, and that the violated
security properties are different from what has previously been
analyzed. Another goal of our modelling work was to understand
how pairing protocols differ from each other in relation to the mis-
binding vulnerability, and whether registering a physical device
to an online service is fundamentally different from pairing two
physical devices. We found that misbinding occurs in a wide range
of protocols where endpoints are defined by physical access. We
also found that the attacks can be classified into a small number of
variants, and not all protocols are vulnerable to all of them.
4.1 Modelling device pairing
We will mainly discuss Bluetooth SSP with numeric comparison be-
cause of its familiarity to many readers. However, we also modelled
the SSP OOB mode and Wi-Fi Direct [4] with similar results.
In addition to the protocol messages and the device state ma-
chines, we model the security ceremony that includes user intentions,
choices and actions. We follow the example of Carlos [12] and model
the user as a separate process in ProVerif. However, while Carlos
considers pairing between two devices belonging to different users,
we consider pairing where a single user has physical access to both
Session 6A: IoT SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand459intended endpoints. Thus, our model consists of three kinds of
processes: user, initiating device A, and non-initiating device B.
The challenging part of the model was capturing the user inten-
tion, i.e. decision to pair specific two devices, when the devices are
identified by physical access and do not have names or other iden-
tifiers. In the end, the solution is fairly simple and intuitive: the
users and devices have identifiers in the model (see below), but the
identifiers can never be communicated over a channel or used as in-
put to a cryptographic function. Instead, they are used for marking
local events and for checking correspondence properties between
the events, such as whether the user intended the devices to be
paired. This inability to communicate the identifiers goes a long
way towards explaining why the traditional solutions of adding
explicitly or implicitly communicated identifiers are not applicable
to device pairing.
Similar to Chang et al. [14], we use private channels in ProVerif
to model the physical access by the user to the devices. These chan-
nels protect both secrecy and integrity of the communication. In
the case of Bluetooth, the private channels are used both for read-
ing the numeric codes and, if the values match, for confirming the
match to the devices. To initiate pairing, user needs to have access
to two private channels, PhysicalChannelA to an initiator device
and PhysicalChannelB to a non-initiator device. We use these phys-
ical channels as the device identifiers, which is both practical and
semantically correct. For the users, on the other hand, we simply
create new identifiers.
Compromised endpoints are commonly modelled by leaking
their secrets, such as private keys, to a public channel. Consequently,
the built-in attacker model of the model-checking tool can emulate
any honest or malicious behavior by that endpoint. In the Bluetooth
model, however, the devices do not have any master secrets. Instead,
we model the compromise of a device by leaking its private channel to
the network. This allows the attacker to take control of that channel.
In addition to modelling the compromise of devices, we also
model the compromise of a user. This is done to conceptually dis-
tinguish between a tampered device and a malicious user having
physical access to an intact device. There is no real difference be-
tween the two in the Bluetooth case.
The user model is shown below. The user (i) selects two devices
and logs her decision to pair them as an event, (ii) compares the six-
digit verification codes displayed by the devices, and (iii) confirms
a match to the devices. The user may be compromised any time,
yielding control of the physical access channels to the attacker.
l e t User Proce ss ( User : User_t , PhysicalChannelA : channel ,
PhysicalChannelB : channel ) =
(
event HasAccess ( User , PhysicalChannelA ) ;
event HasAccess ( User , PhysicalChannelB ) ;
( ∗ Decide to p a i r A and B with A as
event
I n t e n d T o P a i r ( User , PhysicalChannelA ,
i n i t i a t o r
∗ )
PhysicalChannelB ) ;
( ∗ Receive Va and Vb ∗ )
in ( PhysicalChannelA ,
in ( PhysicalChannelB ,
( ∗ Numeric comparison ∗ )
i f Va = Vb then
( ∗ Confirm to A ∗ )
out ( PhysicalChannelA ,
( ∗ Confirm to B ∗ )
(= CodeTag , Va : Hash_t ) ) ;
(= CodeTag , Vb : Hash_t ) ) ;
( OkTag , Va ) ) ;
( OkTag , Vb ) )
out ( PhysicalChannelB ,
(
|
event CompromiseUser ( User ) ;
out ( c , PhysicalChannelA ) ;
out ( c , PhysicalChannelB )
)
) .
Intuitively, misbinding is a violation of the following security
property: two devices are paired only if their user intended them to be.
When formalizing the absence of misbinding as a correspondence
property in ProVerif, we need to be more precise: If two devices
complete the pairing with the same link key and a user has physical
control of at least one of them, then either the user previously intended
the two devices to be paired, the user is compromised, or both devices
are compromised. In ProVerif, this correspondence property can be
defined as follows:
query PhysicalChannelA : channel , PhysicalChannelB : channel ,
K : Key_t , User : User_t ;
( event ( HasAccess ( User , PhysicalChannelA ) ) && ( ∗ or B ∗ )
event ( I n i t i a t o r C o m p l e t e ( PhysicalChannelA , K) ) &&
event ( N o n i n i t i a t o r C o m p l e t e ( PhysicalChannelB , K) ) )