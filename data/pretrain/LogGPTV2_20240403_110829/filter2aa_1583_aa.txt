Room for Escape: Scribbling Outside the 
Lines of Template Security 
Oleksandr Mirosh​ (PI:EMAIL) ​& Alvaro Muñoz​ (PI:EMAIL) 
Abstract 
Now more than ever, digital communication and collaboration are essential to the modern
human experience. People around the globe work together online as they share information,
create documents, send emails, and collaborate on spreadsheets and presentations. Shared
digital content is everywhere and networked communication platforms and software play a
crucial role. Content Management Systems (CMS) allow the user to design, create, modify, and
visualize dynamic content. For many companies, CMS platforms are pivotal to their content
pipelines and workforce collaboration. 
In our research, we discovered multiple ways to achieve Remote Code Execution (RCE) on
CMS platforms where users can create or modify templates for dynamic content. In today's
multi-tenancy ecosystems, this often implies that a co-tenant on the same system can take over
control of the CMS resources on which your organization relies. 
Using Microsoft Sharepoint and a variety of Java template engines as our main CMS attack
surface, we combined implementation and design flaws with framework and language specific
features to find more than twenty unique RCE vulnerabilities in Microsoft Sharepoint, Atlassian
Confluence, Alfresco, Liferay, Crafter CMS, dotCMS, XWiki, Apache Ofbiz, and more. 
This paper presents our analysis of how these products and frameworks implement security
controls and reviews techniques we used to bypass them. We describe all the vulnerabilities we
uncovered in detail and show working demos of the most interesting attacks where unprivileged
users can run arbitrary commands on SharePoint or Liferay servers. 
Finally, we present our general review methodologies for systems with dynamic content
templates and provide practical recommendations to better protect them. 
Security Review of Microsoft SharePoint Server 
Introduction to SharePoint security 
Security review of Content Management Systems (CMS) where the user is able to design,
create, modify, and visualize dynamic content is not a trivial task. There may be plenty of
interesting and promising vectors for potential attacks. To show examples of such vectors, we
decided to perform a review of one of the most widely used servers by enterprise customers –
Microsoft SharePoint server. It is highly configurable, provides great flexibility, and has many
available features that allows customers to use SharePoint as a solution for very different tasks
(including CMS, document management, file hosting, or even bug tracking). On the other hand
enabling such a variety of usages impacts on the security design and implementation of
SharePoint that cannot be simple and satisfies requirements of all these uses at the same time.
For a detailed review of SharePoint’s security design you can look at this documentation or this
series of articles​. 
For our research, the most interesting security principle in SharePoint can be found ​here​: 
A fundamental assumption of the Windows SharePoint Services technology is that "untrusted
users" can upload and create ASPX pages within the system on which Windows SharePoint
Services is running. These users should be prevented from adding server-side code within
ASPX pages, but there should be a list of approved controls that those untrusted users can use.
One way to provide these controls is to create a Safe Controls list in the web.config file. 
Another important principle of SharePoint design for us – all content and configuration
information is stored in SQL. In this context, we can divide ASPX pages of any SharePoint site
into two types: 
1.
Application pages are stored in file directories and processed by the Web Server as
regular unrestricted ASPX files. Each of these pages is part of SharePoint server and
implements some application logic. Users are not able to modify them.  
2.
Site pages are customized pages that are saved in the content database. Users can
customize them. They are parsed using safe mode processing that guarantees that there
is no inline script, or other dangerous elements such as server-side includes from files
system or unsafe page and control attributes. Also, customized pages can only have
controls that are defined as safe in the ​web.config​ file’s ​SafeControls​ ​tag.  
To work with pages from the SQL database and from the files on the file system, SharePoint
uses virtual provider ​SPVirtualPathProvider. For all site pages, the virtual provider reads
content from the content database and passes it to the ASP.NET runtime. For all application
pages, ​SPVirtualPathProvider ​goes to the directory, parses it, and then passes it to the
ASP.NET runtime.  
To implement safe mode for site pages, ​SPVirtualPathProvider ​uses a page parser filter
SPPageParserFilter​. 
// Microsoft.SharePoint.ApplicationRuntime.SPPageParserFilter 
protected​ ​override​ void Initialize​() 
{ 
    ​if​ ​(!​SPRequestModule​.​IsExcludedPath​(base.​VirtualPath​,​ ​false)) 
    ​{ 
        ​this.​_pageParserSettings ​= 
SPVirtualFile​.​GetEffectivePageParserSettings​(base.​VirtualPath​,​ ​out 
this.​_safeControls​,​ ​out​ ​this.​_cacheKey​,​ ​out​ ​this.​_isAppWeb​); 
        ​this.​_safeModeDefaults ​=​ SafeModeSettings​.​SafeModeDefaults​; 
        ​return; 
    ​} 
... 
    ​this.​_exclusion ​=​ ​true; 
    ​this.​_pageParserSettings ​=​ ​null; 
    ​this.​_safeControls ​=​ ​null; 
} 
For example, if a page is taken from an excluded path on the file system, it is processed without
restrictions. However if it is a site page from the content database, ​SPPageParserFilter
applies safe mode restrictions. Usually it is no-compile mode without inline scripts and only
SafeControls are allowed. 
We are not the first to raise the question about the security of site pages in SharePoint. In
“​SharePoint Security and a Web Shell​” Liam Cleary is discovering what configurations should
be made to SharePoint to execute arbitrary code in site pages. Recently, Soroush Dalili
published a blog post “​A Security Review of SharePoint Site Pages​“ where he reviews main
attack
vectors
and
provides
several
new
interesting
attacks
for
unsafe
non-default
configurations. Along with unsafe non-default configurations of SharePoint server, most attacks
described in both articles require compilation for the controlled page. This means that we should
be in “non-restricted” mode before .NET starts processing the current page. Usually this is true
for pages from the file system. If we take into account the SharePoint design principle that all
content and configuration information is stored in a SQL database, bugs where an attacker can
control files on the file system seem uncommon and are out of scope of our research. We were
interested in finding ways to escape or bypass safe mode of site pages and focused only on the
default SharePoint server configuration. 
As mentioned, the key element in SharePoint to filter dangerous content in site pages is
SPPageParserFilter​. Obviously the SharePoint team spent a lot of resources on the secure
implementation and testing of this component and therefore finding bugs in it is not an easy
task. What if we could find places where ​SPPageParserFilter is not used? Let’s look closely at
the second parameter for the ​TemplateControl.ParseControl()​ method:  
The ​ignoreParserFilter ​parameter allows the PageParserFilter class ​to be ignored​. The
PageParserFilter class is used by the ASP.NET parser to determine whether an item is allowed
in the page at parse time 
Note that if this method is called with only one parameter, the page parser filter is also ignored: 
// System.Web.UI.TemplateControl 
public Control ParseControl(string content) 
{ 
   return this.ParseControl(content, ​true​); 
} 
[Code Ref #1] 
There is another very important remark about this method: 
The ​content ​parameter contains a user control (the contents of an .ascx file). This string
cannot contain any code, because the ​ParseControl method never causes compilation 
As a result, we cannot use inline code or other attacks that require compilation. Instead we can
only use unsafe controls, attributes, or directives. 
A similar situation, where the page parser filter is ignored, can be observed during processing of
ASPX markup in design mode (usually this is done by ​DesignTimeTemplateParser​). Take a
look at how ​TemplateParser​ ​initializes the page parser filter:  
// System.Web.UI.TemplateParser 
internal PagesSection PagesConfig 
{ 
    get 
    { 
        return this._pagesConfig; 
    } 
} 
// System.Web.UI.TemplateParser 
internal virtual void ProcessConfigSettings() 
{ 
... 
    ​if (this.PagesConfig != null) 
    { 
... 
        if (!this.flags[33554432]) 
        { 
            this._pageParserFilter = PageParserFilter.Create(this.PagesConfig, 
base.CurrentVirtualPath, this); 
        } 
    } 
} 
[Code Ref #2] 
The page parser filter is not created if ​_pagesConfig ​is ​null​, and this is true for processing in
design mode: 
// System.Web.UI.TemplateParser 
internal virtual void PrepareParse() 
{ 
... 
   if (!this.​FInDesigner​) 
   { 
      this._compConfig = 
MTConfigUtil.GetCompilationConfig(base.CurrentVirtualPath); 
      this.​_pagesConfig​ = 
MTConfigUtil.GetPagesConfig(base.CurrentVirtualPath); 
   } 
   this.ProcessConfigSettings(); 
... 
[Code Ref #2] 
We
discovered
several
places
where
the
SharePoint
server
uses
the
TemplateControl.ParseControl() method and ignores the page parser filter or where
users can specify ASPX markup for processing in design mode, but in all these cases
SharePoint verifies input by another method: 
EditingPageParser.VerifyControlOnSafeList(). This method is designed to perform
the same tasks as ​SPPageParserFilter (block processing of dangerous controls or unsafe
content), but in contrast to ​SPPageParserFilter​, it is more flexible and allows some
verification to be disabled by its arguments. We will provide details of one of our vulnerabilities a
bit later where ​VerifyControlOnSafeList() is called with an argument that allows us to use
unsafe elements in our ASPX markup.  
Each
bypass
of
safe
mode
restrictions
in
​SPPageParserFilter
or
verification
by
VerifyControlOnSafeList() method is a separate vulnerability and we will show examples
in the next section, but now let’s hold the assumption that we have already bypassed
SPPageParserFilter or ​VerifyControlOnSafeList()​. What can be used for an arbitrary
code execution attack that leads to a compromise of the target SharePoint server? We already
mentioned that the ​ParseControl() method never causes compilation and we are not able to
use server-side code or perform other attacks that require this compilation. However, we still are
able to use unsafe controls or ASPX directives.  
The best example of such unsafe controls is ​ObjectDataSource​. ​It allows us to call ​an
arbitrary public method​ of any ​desired public Type​. 
This is actually arbitrary code execution. Here is an example of a payload that launches a
calculator: 
In addition to the “direct” arbitrary code execution vector, we can try to get the value of
ValidationKey ​from the ​MachineKey ​section in the ​web.config file and use it for an unsafe
deserialization attack by ViewState. More information about this attack can be found ​here and
here​. We can use several different unsafe controls to read ​web.config​ on the target server: 
XmlDataSource​ control with ​DataFile​ attribute:  
Xml​ control with ​DocumentSource​ ​attribute: 
We can also use the ​Server-Side Include (SSI) directive​ to retrieve the ​web.config​ file content: 
or 
Now that we have basic knowledge about the security design of the SharePoint server and
know how we can compromise it if safe mode for site pages is bypassed, we focus on the actual
ways to bypass this safe mode in our next section.  
Breaking out of Safe Mode: SharePoint Edition  
To show multiple ways to achieve arbitrary code execution on CMS-like systems we use the
SharePoint server as our target and present five different vulnerabilities to illustrate interesting
types of security problems. 
All the attacks were performed by unprivileged users and enabled us to execute arbitrary code
on the target and compromise the SharePoint server with a default configuration. All identified
vulnerabilities were triaged through coordinated disclosure with their respective vendors. 
Access to sensitive server resources   
CVE-2020-0974 
A sensitive piece of information is always a primary target for attackers. A sandbox, or other
security controls, should prevent access to resources with sensitive configuration or business
information. It can be files on the file system, logs, database tables, or even process memory.  
As mentioned, the contents of the ​web.config file on a SharePoint server should be considered
a resource with highly sensitive information because it contains crypto keys that open doors for
remote code execution attacks. 
The main parser filter in SharePoint ​SPPageParserFilter ​does not allow inclusion of server
files in site pages. However, as previously mentioned, this filter is not used if ASPX markup is
parsed in design mode. In this case, input is verified by the ​VerifyControlOnSafeList()
method: 
// Microsoft.SharePoint.EditingPageParser 
i​nternal static void VerifyControlOnSafeList(string dscXml, 
RegisterDirectiveManager registerDirectiveManager, SPWeb web, bool 
blockServerSideIncludes​ = false) 
{ 
... 
    EditingPageParser.InitializeRegisterTable(hashtable, 
registerDirectiveManager); 
    EditingPageParser.ParseStringInternal(dscXml, hashtable2, hashtable, 
list​); 
    if (​blockServerSideIncludes​ && ​list.Count​ > 0) 
    { 
        ULS.SendTraceTag(42059668u, ULSCat.msoulscat_WSS_General, 
ULSTraceLevel.Medium, "VerifyControlOnSafeList: Blocking control XML due to 
unsafe server side includes"); 
        ​throw new System.ArgumentException("Unsafe server-side includes", 
"dscXml")​; 
    } 
... 
If the ​blockServerSideIncludes ​argument is ​false​, there is no limitation on files in the
server-side include directive. The SharePoint server used this unsafe value during validation of
ASPX markup in design mode: 
// Microsoft.SharePoint.ServerWebApplication 
bool IServerWebApplication.CheckMarkupForSafeControls(string controlMarkup, 
RegisterDirectiveManager registerDirectiveManager) 
{ 
    if (this._spWeb != null) 
    { 
        EditingPageParser.VerifyControlOnSafeList(controlMarkup, 
registerDirectiveManager, this._spWeb, ​false​); 
        return true; 
    } 
    return false; 
} 
We could obtain the content of the ​web.config ​file by using the next ASPX markup as the value
of
the
​webPartXml
​parameter
in
the
​RenderWebPartForEdit
​SOAP
request
of
WebPartPagesWebService​: 
     ​ 
After this attack, we obtained the value of ​ValidationKey ​from the ​MachineKey ​section and
we successfully used it for a ViewState-based deserialization attack that gave us the ability to
execute arbitrary OS commands on the SharePoint server. 
Abusing not-so-safe items from Allowlist 
CVE-2020-1147 
In systems with a sandbox, there is a list of allowed or available elements. In some CMS
systems such as SharePoint, this list can contain hundreds or thousands of elements or controls
and it might be a good idea to review them by searching for any elements with potentially
dangerous behavior.  
In SharePoint, the list of allowed controls is defined in the ​SafeControl ​section of the
web.config file and is quite long so it probably contains some interesting items. We found one
control that gave us RCE at the end of our attack: 
Microsoft.SharePoint.Portal.WebControls.ContactLinksSuggestionsMicroView​. ​It
i​s marked as safe - the relevant line from the ​web.config​ file: 
... 
... 
The following is the dangerous code from the previously mentioned control: 
// Microsoft.SharePoint.Portal.WebControls.ContactLinksSuggestionsMicroView 
protected void PopulateDataSetFromCache(DataSet ds) 
{ 
    string ​value​ = 
SPRequestParameterUtility.GetValue(this.Page.​Request​, 
"​__SUGGESTIONSCACHE__​", SPRequestParameterSource.​Form​); 
    using (XmlTextReader xmlTextReader = new XmlTextReader(new 
System.IO.StringReader(​value​))) 
    { 
        xmlTextReader.DtdProcessing = DtdProcessing.Prohibit; 
        ​ds.ReadXml​(xmlTextReader); 
        ds.AcceptChanges(); 
    } 
} 
This method takes a ​__SUGGESTIONSCACHE__ form parameter from the current HTTP Request
and passes its value to the ​DataSet.ReadXml() ​method. Our attacker can control this
parameter but we still have two open questions: (1) how can we reach this vulnerable method,
and (2) how can we exploit this call of ​DataSet.ReadXml()​? Let’s try to answer the first
question. ​PopulateDataSetFromCache()​ is called from: 