title:The Betrayal At Cloud City: An Empirical Analysis Of Cloud-Based Mobile
Backends
author:Omar Alrawi and
Chaoshun Zuo and
Ruian Duan and
Ranjita Pai Kasturi and
Zhiqiang Lin and
Brendan Saltaformaggio
The Betrayal At Cloud City: An Empirical Analysis 
Of Cloud-Based Mobile Backends
Omar Alrawi, Georgia Institute of Technology; Chaoshun Zuo, Ohio State University; 
Ruian Duan and Ranjita Pai Kasturi, Georgia Institute of Technology; Zhiqiang Lin, 
Ohio State University; Brendan Saltaformaggio, Georgia Institute of Technology
https://www.usenix.org/conference/usenixsecurity19/presentation/alrawi
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.The Betrayal At Cloud City:
An Empirical Analysis Of Cloud-Based Mobile Backends
Omar Alrawi*
Georgia Institute of Technology
Chaoshun Zuo*
The Ohio State University
Ruian Duan
Georgia Institute of Technology
Ranjita Pai Kasturi
Georgia Institute of Technology
Zhiqiang Lin
The Ohio State University
Brendan Saltaformaggio
Georgia Institute of Technology
Abstract
Cloud backends provide essential features to the mobile
app ecosystem, such as content delivery, ad networks, ana-
lytics, and more. Unfortunately, app developers often disre-
gard or have no control over prudent security practices when
choosing or managing these services. Our preliminary study
of the top 5,000 Google Play Store free apps identiﬁed 983
instances of N-day and 655 instances of 0-day vulnerabilities
spanning across the software layers (OS, software services,
communication, and web apps) of cloud backends. The mo-
bile apps using these cloud backends represent between 1M
and 500M installs each and can potentially affect hundreds
of thousands of users. Further, due to the widespread use of
third-party SDKs, app developers are often unaware of the
backends affecting their apps and where to report vulnera-
bilities. This paper presents SkyWalker, a pipeline to auto-
matically vet the backends that mobile apps contact and pro-
vide actionable remediation. For an input APK, SkyWalker
extracts an enumeration of backend URLs, uses remote vet-
ting techniques to identify software vulnerabilities and re-
sponsible parties, and reports mitigation strategies to the app
developer. Our ﬁndings suggest that developers and cloud
providers do not have a clear understanding of responsibil-
ities and liabilities in regards to mobile app backends that
leave many vulnerabilities exposed.
1
Introduction
Cloud-based mobile backends provide a wide array of
features, such as ad networks, analytics, content delivery,
and much more. These features are supported by multiple
layers of software and multiple parties including content
delivery networks (CDNs), hosting providers, and cloud
providers who offer virtual/physical hardware, provisioned
operating systems, and managed platforms. Due to the in-
herent complexity of cloud-based backends, deploying and
maintaining them securely is challenging. Consequently,
*Authors contributed equally.
mobile app developers often disregard prudent security
practices when choosing cloud infrastructure, building, or
renting these backends.
Recent backend breaches of the British Airways [1] app
and Air Canada [2] app demonstrate how wide-spread these
incidents are. More recently, the hijacking of the Fortnite
mobile game [3] showed how incrementally-downloaded
content from mobile backends can allow an attacker to in-
stall additional mobile apps without the user’s consent. Ad-
ditional cases [4] involving the exposure of 43TB of enter-
prise customer names, email addresses, phone numbers, PIN
reset tokens, device information, and password lengths was
due to insecure mobile backends and not the developer’s mo-
bile app code.
Even for security-conscious developers, it is not clear
what backends their mobile app will interact with because
of third-party libraries. Third-party libraries do not expose
their backends to developers, instead, they offer an applica-
tion program interface (API) that developers use. Many of
these vulnerabilities can be identiﬁed ahead of time if de-
velopers have the right tools and resources to evaluate the
security of their backends. Further, identifying vulnerable
software layers and the responsible party can expedite reme-
diation and therefore lower the risk of exposure.
To deal with the complexities in cloud infrastructure, the
research community surveyed [5] and proposed several tax-
onomies [6], ontologies [7], assessment models [8], and
threat classiﬁcations [9]. Unfortunately, these approaches
provide few practical recommendations for mobile app de-
velopers. Recent works on server-side vulnerability discov-
ery of mobile apps [10]–[12] have shown that a lack of secu-
rity awareness among app developers is a growing problem.
Yet, these works only scratch the surface by examining only
the software service layer of mobile backends.
A systematic study is needed to identify the most pressing
issues facing mobile backends. Moreover, to conduct such
a study, the analysis must be reproducible, transparent, and
easy to interpret for developers. The study should be done
on a representative mobile app ecosystem to provide real in-
USENIX Association
28th USENIX Security Symposium    551
sight into the backend vulnerability landscape. Finally, the
study should offer practical steps to guide and inform app
developers on the security of their mobile backends.
To this end, this paper presents the design and implemen-
tation of SkyWalker, an analysis pipeline to study mobile
backends. Using SkyWalker, we conducted an empirical
analysis of the top 5,000 free mobile apps in the Google Play
store from August 2018. Based on this study, we uncovered
655 0-day instances and 983 N-day instances affecting
thousands of apps. We used Google Play Store metadata to
measure the impact of our ﬁndings and estimate the number
of affected users. We propose mitigation strategies for dif-
ferent types of vulnerabilities and guidelines for developers
to follow. Lastly, we offer the SkyWalker analysis pipeline
as a free public web-service to help developers identify
what backends their mobile apps interact with, the security
state of the backends, and recommendations to address any
detected issues.
Our empirical study found 983 N-day instances of 52
vulnerabilities affecting hypervisors, operating systems,
databases, mail servers, DNS servers, web servers, scripting
language interpreters, and others. We found 655 0-day in-
stances of SQL injection (SQLi), cross-site-scripting (XSS),
and external XML entity (XXE). These affected thousands
of mobile apps, with some apps having over 50M+ installs
and more than 332,000 reviews. We present two case studies
to demonstrate the vulnerabilities affecting a speciﬁc devel-
oper and vulnerabilities affecting a platform that is used by
many developers.
We found these backends to be geographically distributed
across the globe and hosted on 6,869 different networks.
We notiﬁed all affected parties about the ﬁndings, and
were careful to follow ethical and legal guidelines when
conducting this study, additional details are in Section 8. We
propose mitigation strategies for developers to follow based
on the issues found and the types of backends. We conclude
with recommendations for deploying and maintaining secure
backends.
2 A Motivating Example
Mobile apps use cloud-based backend services to support ex-
tensive functions like ads, telemetry, content delivery, and
analytics. Unfortunately, a mobile app developer who wants
to audit the backends their app uses will quickly ﬁnd that this
is harder than it seems. The ﬁrst thing the developer must
do is simply enumerate those mobile backends. Consider
the Crime City Real Police Driver (com.vg.crazypoliceduty)
app, a mobile game with over 10M+ installs and 126,257
reviews. The mobile app uses several third-party SDK li-
braries including Amazon In-App Billing, SupersonicAds,
Google AdMob, Unity3D, Nuance Speech Recognition Kit,
and Xamarin Mono. The developer may not be aware of
many of the backends that are invoked from imported native
or Java libraries, i.e., the Unity3D backends. In most cases,
the developer will ﬁrst have to employ static binary analy-
sis tools or dynamically instrument the app to track multiple
levels of SDK inclusion. SkyWalker automatically identiﬁed
13 unique backends from this app’s APK (shown in Table 1)
and mapped them to the modules they were found in, i.e.,
library backends versus developer backends.
Party
Hybrid
Third
Vendor
Vasco
Games
Unity3D
Sizmek
Moat
Google
Backend
androidha.vascogames.com
api.uca.cloud.unity3d.com
cdn-highwinds.unityads.unity3d.com
conﬁg.uca.cloud.unity3d.com
impact.appliﬁer.com
bs.serving-sys.com
secure-ds.serving-sys.com
px.moatads.com
z.moatads.com
googleads.g.doubleclick.net
pagead2.googlesyndication.com
tpc.googlesyndication.com
www.google-analytics.com
Purpose
Game
Content
Telemetry
Ads
Telemetry
Telemetry
Ads
Ads
Analytics
Ads
Ads
Ads
Ads
Analytics
Table 1: Backends identiﬁed for Crime City Real Police
Drive and their purpose. The red cells indicate vulnerable
backends.
Backends have layers of software (components) that sup-
port the web application software (AS), including an oper-
ating system (OS), software services (SS), and communi-
cation services (CS). The developer now has to ﬁngerprint
the backends to inventory the software layers and identify
the software type, version, and its purpose. Using this in-
formation, the developer can then check to see if any of
their software is outdated or affected by a known vulnera-
bility [13], a laborious and time-consuming task. SkyWalker
identiﬁed that the game content backend runs Debian 6 for
the OS; OpenSSH 6.5p1, Apache httpd 2.2.22, PHP/5.4.4-
14, and Apache-Coyote/1.1 for the SS; and uses the HTTP
protocol for CS. SkyWalker’s search of the national vulner-
ability database (NVD) [13] and correlation with the ﬁnger-
print results showed multiple common vulnerability expo-
sure (CVE) entries affecting PHP 5.4.4-14. Further, the De-
bian version running on the backend is no longer supported
and does not receive any updates from the vendor.
In addition to these issues, the developer’s AS can contain
bugs that must be audited. The developer can check the AS
by auditing the parameters passed to each API and testing
for SQLi, XSS, XXE, or any other applicable vulnerabilities
from OWASP’s top 10 common issues [14]. This task re-
quires secure programming experience and security domain
expertise to identify bugs in the source code. SkyWalker
found that the game content backend interface is vulnera-
ble to SQLi for some parameters passed by the mobile app,
which is due to the AS not properly sanitizing the input.
The developer must now remediate or mitigate these risks,
but each backend layer may be operated by different entities
that provide hardware and software as a service. Therefore,
552    28th USENIX Security Symposium
USENIX Association
before ﬁxing any issues, they must ﬁgure out what party is re-
sponsible for each component. SkyWalker ﬁngerprinted the
Crime City Real Police Driver game content backend, an-
droidha.vascogames.com, as being hosted on a Google Com-
pute Engine Flexible Environment instance (which provides
virtual hardware, operating system, and PHP). We refer to
this type of backend model as hybrid since Google is par-
tially responsible for the virtual environment and the devel-
oper is responsible for the AS and CS.
The developer must come up with a remediation strategy
to address these problems. Google advertises that they patch
any vulnerable software affecting the OS and SS, but this is
only applicable to non-deprecated versions. In the case of
Crime City Real Police Driver app, the developer is respon-
sible for all the software layers since the OS and SS versions
are deprecated. The developer must upgrade to a supported
OS, apply patches to the PHP interpreter (SS), patch the AS
source code against SQLi, and support HTTPS for secure CS.
The Unity3D, Sizmek, and Moat backends shown in Ta-
ble 1 are called third-party, since the developer has no con-
trol over them. This evaluation must also be carried out
on third-party backends to identify additional vulnerabilities
(potentially affecting all apps which use those shared ser-
vices). SkyWalker found that the Crime City Real Police
Driver app uses the conﬁg.uca.cloud.unity3d.com backend,
which contains an XXE vulnerability, and the bs.serving-
sys.com backend that contains an XSS vulnerability. Ideally,
the developer could report those vulnerabilities to the plat-
form through a bug bounty program or migrate their app to
backends that are not vulnerable.
This manual assessment procedure is very involved and
requires extensive security domain knowledge, which many
app developers may not have. Instead, SkyWalker gives all
mobile app developers the ability to identify the backends
invoked by their app, assess their software layers, and sug-
gest remediation strategies to improve the security for their
mobile app backends.
3 Background
This section deﬁnes an abstraction to model mobile backends
for our empirical study. We also deﬁne our labeling for back-
ends and create a mapping between responsible stakeholders
and resources. We outline how we count vulnerabilities and
deﬁne them in the context of this work.
3.1 Mobile App Backend Model
We follow the standard deﬁnition for mobile backends used
by industry leaders [15]–[18], which encompass many cloud
features, such as storage, user management, notiﬁcations,
and APIs for various services, regardless of who maintain-
s/owns them. We breakdown mobile backends into a stack
representation that consists of ﬁve layers:
• Hardware (HW) refers to the physical or virtual hard-
ware that hosts the backend.
• Operating System (OS) refers to the OS running on the
hardware, i.e., Linux or Windows.
• Software Services (SS) refers to software services run-
ning in the OS, i.e., database service, web service, etc.
• Application Software (AS) refers to the custom appli-
cation interface used by mobile apps to interact with the
running services.
• Communication Services (CS) refers to the communi-
cation channel supported between the mobile app and
the mobile backend.
Our approach does not consider the hardware layer
because 1) we would need root-level access on the backend
to evaluate the hardware and 2) mobile app developers have
no direct way of addressing hardware vulnerabilities, i.e.,
manufacturers must issue ﬁrmware updates or replace the
hardware.
It is important to note that this work does not
consider the mobile app security, instead we leverage the
mobile app to study the backend.
We differentiate between mobile backends by ownership,
which provides a granular mapping between stakeholders
and resources. We deﬁne four labels for the mobile back-
ends with respect to the app developer:
• First-Party (B1st) refers to backends that are fully man-
aged by the mobile app developers (i.e., full control
over the backend).
• Third-Party (B3rd) refers to backends that are fully
managed by third-parties (i.e., no control over the
backend).
• Hybrid (Bhyb) refers to backends that are co-managed
by third-parties and developers such as cloud infras-
tructure (i.e., some control over the mobile backend).
• Unknown (Bukn) refers to backends that ownership
could not be established with high conﬁdence.
In our model, there are two primary stakeholders, the app
developers (D) and the cloud service providers (SP). There