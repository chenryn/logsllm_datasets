# The Betrayal At Cloud City: An Empirical Analysis Of Cloud-Based Mobile Backends

**Authors:**
- Omar Alrawi, Georgia Institute of Technology
- Chaoshun Zuo, The Ohio State University
- Ruian Duan, Georgia Institute of Technology
- Ranjita Pai Kasturi, Georgia Institute of Technology
- Zhiqiang Lin, The Ohio State University
- Brendan Saltaformaggio, Georgia Institute of Technology

**Publication:**
This paper was presented at the 28th USENIX Security Symposium, August 14–16, 2019, in Santa Clara, CA, USA. Open access to the proceedings is sponsored by USENIX.

**Abstract:**
Cloud backends are essential for the mobile app ecosystem, providing services such as content delivery, ad networks, and analytics. However, app developers often neglect or lack control over the security practices of these services. Our preliminary study of the top 5,000 free apps on the Google Play Store identified 983 N-day and 655 0-day vulnerabilities across various software layers (OS, software services, communication, and web apps) of cloud backends. These vulnerabilities can potentially affect hundreds of thousands of users. Additionally, due to the widespread use of third-party SDKs, developers are often unaware of the backends their apps interact with and where to report vulnerabilities. This paper introduces SkyWalker, a pipeline that automatically vets the backends contacted by mobile apps and provides actionable remediation. For an input APK, SkyWalker extracts backend URLs, identifies software vulnerabilities and responsible parties, and reports mitigation strategies to the app developer. Our findings suggest that developers and cloud providers have unclear responsibilities and liabilities regarding mobile app backends, leaving many vulnerabilities exposed.

## 1. Introduction
Cloud-based mobile backends offer a wide range of features, including ad networks, analytics, and content delivery, supported by multiple software layers and parties such as CDNs, hosting providers, and cloud providers. Due to the inherent complexity, deploying and maintaining these backends securely is challenging. Consequently, mobile app developers often overlook prudent security practices when choosing and managing these backends.

Recent incidents, such as the breaches of the British Airways and Air Canada apps, highlight the prevalence of these issues. The Fortnite mobile game hijacking demonstrated how incrementally-downloaded content from insecure backends can allow attackers to install additional apps without user consent. Another case involved the exposure of 43TB of sensitive enterprise data due to insecure mobile backends, not the app code itself.

Even security-conscious developers face challenges because third-party libraries do not expose their backends, instead offering APIs. Identifying vulnerabilities in these backends requires the right tools and resources. Existing research provides taxonomies, ontologies, and threat classifications but offers few practical recommendations for mobile app developers. Recent works on server-side vulnerability discovery [10]–[12] show a growing lack of security awareness among developers, though they only examine the software service layer.

A systematic study is needed to identify the most pressing issues facing mobile backends. Such a study should be reproducible, transparent, and easy to interpret, conducted on a representative mobile app ecosystem. It should also provide practical steps for developers to secure their mobile backends.

To address these needs, we present SkyWalker, an analysis pipeline for studying mobile backends. Using SkyWalker, we conducted an empirical analysis of the top 5,000 free mobile apps in the Google Play Store from August 2018. We uncovered 655 0-day and 983 N-day vulnerabilities affecting thousands of apps. We used Google Play Store metadata to measure the impact and estimate the number of affected users. We propose mitigation strategies and guidelines for developers and offer SkyWalker as a free public web-service to help developers identify and secure their mobile backends.

## 2. A Motivating Example
Mobile apps rely on cloud-based backend services for functions like ads, telemetry, content delivery, and analytics. However, auditing these backends is complex. Consider the Crime City Real Police Driver app, which has over 10M+ installs and 126,257 reviews. The app uses several third-party SDKs, including Amazon In-App Billing, SupersonicAds, Google AdMob, Unity3D, Nuance Speech Recognition Kit, and Xamarin Mono. The developer may not be aware of all the backends invoked by these SDKs.

SkyWalker automatically identified 13 unique backends from the app's APK and mapped them to their modules (Table 1). Each backend has layers of software supporting the web application, including an operating system (OS), software services (SS), and communication services (CS).

| Party | Backend | Purpose |
|-------|---------|---------|
| Hybrid | androidha.vascogames.com | Game Content |
| Third | api.uca.cloud.unity3d.com | Telemetry |
| Third | cdn-highwinds.unityads.unity3d.com | Ads |
| Third | config.uca.cloud.unity3d.com | Telemetry |
| Third | impact.applifier.com | Telemetry |
| Third | bs.serving-sys.com | Ads |
| Third | secure-ds.serving-sys.com | Ads |
| Third | px.moatads.com | Ads |
| Third | z.moatads.com | Ads |
| Third | googleads.g.doubleclick.net | Ads |
| Third | pagead2.googlesyndication.com | Ads |
| Third | tpc.googlesyndication.com | Ads |
| Third | www.google-analytics.com | Analytics |

SkyWalker fingerprinted the game content backend, identifying it as running Debian 6, OpenSSH 6.5p1, Apache httpd 2.2.22, PHP/5.4.4-14, and Apache-Coyote/1.1. The backend uses HTTP for communication. SkyWalker's search of the National Vulnerability Database (NVD) revealed multiple CVE entries affecting PHP 5.4.4-14, and the Debian version is no longer supported.

The developer must now remediate these risks. For the Crime City Real Police Driver app, the backend is hosted on a Google Compute Engine Flexible Environment instance, making it a hybrid model. The developer is responsible for upgrading the OS, patching the PHP interpreter, fixing SQL injection vulnerabilities in the application software, and supporting HTTPS for secure communication.

For third-party backends, the developer can report vulnerabilities through bug bounty programs or migrate to more secure backends. SkyWalker found that the Unity3D, Sizmek, and Moat backends contain XXE and XSS vulnerabilities.

This manual assessment requires extensive security knowledge, which many developers lack. SkyWalker simplifies this process by identifying backends, assessing their software layers, and suggesting remediation strategies.

## 3. Background
This section defines an abstraction to model mobile backends for our empirical study. We also define labels for backends and map responsible stakeholders and resources. We outline how we count and define vulnerabilities.

### 3.1 Mobile App Backend Model
We follow the standard definition for mobile backends, encompassing cloud features such as storage, user management, notifications, and APIs. We break down mobile backends into a stack representation consisting of five layers:

- **Hardware (HW):** Physical or virtual hardware hosting the backend.
- **Operating System (OS):** OS running on the hardware (e.g., Linux, Windows).
- **Software Services (SS):** Software services running in the OS (e.g., database, web service).
- **Application Software (AS):** Custom application interface used by mobile apps.
- **Communication Services (CS):** Communication channel between the mobile app and backend.

Our approach does not consider the hardware layer, as evaluating it requires root-level access, and developers cannot directly address hardware vulnerabilities.

We differentiate mobile backends by ownership, providing a granular mapping between stakeholders and resources:

- **First-Party (B1st):** Fully managed by the mobile app developers.
- **Third-Party (B3rd):** Fully managed by third-parties.
- **Hybrid (Bhyb):** Co-managed by third-parties and developers.
- **Unknown (Bukn):** Ownership could not be established with high confidence.

In our model, the primary stakeholders are the app developers (D) and the cloud service providers (SP).