entire range we benchmarked, although for sufﬁciently
large sizes Circuit ORAM will eventually do better. For
64 pairs, Square Root ORAM is over 9 times faster
(ﬁnishing in 145 seconds); for 512 pairs, stable matching
requires just over 33 hours using Square-Root ORAM
and 52.5 hours with Circuit ORAM.
F. Oblivious Scrypt
To explore the possibility of using ORAMs in a
challenging cryptographic application, we implemented
the key derivation function scrypt [27]. Scrypt was
originally intended to be difﬁcult
to parallelize, and
therefore difﬁcult to break by brute force, even with
custom high performance hardware. It achieves this
goal by repeatedly enciphering a single block of data,
retaining each intermediate result in memory. It then
performs a second round of encipherment, mixing the
block with an intermediate result from the ﬁrst round
selected according to the current value. In an oblivious
context, scrypt requires the use of an ORAM of some
sort, as the indices of the memory accesses in the second
phase depend upon oblivious data generated in the ﬁrst
phase. Due to its unpredictable memory access pattern,
the scrypt algorithm is designed to require sequential
execution with no signiﬁcant shortcuts.
With typical parameters, scrypt requires a relatively
small ORAM element count. For instance, Litecoin,
which uses scrypt as a cryptocurrency proof-of-work,
speciﬁes N = 210 elements [22], and Colin Percival, the
designer of scrypt, recommends a minimum of N = 214
elements for normal use [27]. On the other hand, Percival
recommends that each element be 1KB in size — much
larger than required by any of our other application
benchmarks. In the course of execution, scrypt performs
exactly one access per element.
We tested scrypt using the recommended parameters
and test vectors from the scrypt speciﬁcation [27], r = 8
and p = 1, and we varied N from 4 to 214. In addition,
we benchmarked the parameters used by Litecoin, (r = 1,
p = 1, N = 210). A few representative combinations are
presented in Table I. As in the other benchmarks, linear
scan is marginally more efﬁcient when the number of
blocks (N) is small. Otherwise, Square-Root ORAM is
preferred; it exceeds the performance of linear scan by
approximately one order of magnitude when N = 210,
and this ratio improves as N increases.
The largest parameters we benchmarked are Perci-
val’s recommended minimum parameters (r = 8, p = 1,
N = 214), which he originally chose on the basis that they
required less than 100ms to execute on contemporary
hardware, this being what he considered a reasonable
threshold for interactive use [27]. On our EC2 test node,
the reference (non-oblivious) scrypt implementation re-
quires 35ms with the same parameters. With Square-
Root ORAM as the underlying primitive, execution
took 32 minutes, compared with 47 minutes for Circuit
ORAM. The large block size required by scrypt causes
block access time to form a greater portion of the total
cost than in our other application benchmarks. As a
result, Circuit ORAM becomes competitive earlier than
in the other cases. We did not benchmark linear scan for
the recommended parameters; we estimated that it would
require roughly 7 days to complete, well beyond what
could reasonably be considered useful in practice.
Even with Square-root ORAM, scrypt requires 55,000
times longer to execute with real-world parameters as
an MPC protocol than it does to execute conventionally.
This is almost certainly too expensive to be practical
for any interactive application today, but shows that
even complex algorithms designed intentionally to be
expensive to execute are not beyond the capabilities of
general-purpose MPC today.
VI. CONCLUSION
The success of MPC depends upon enabling de-
velopers to create efﬁcient privacy-preserving applica-
tions, without requiring excessive effort, expertise, or
231231
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:03 UTC from IEEE Xplore.  Restrictions apply. 
resources. It is important that MPC protocols be com-
patible with conventional programming techniques and
data structures with depend on random access memory.
Our Square-Root ORAM design provides a general-
purpose oblivious memory that can be used anywhere
a programmer would normally use an array. We have
presented a new approach for designing ORAMs for
MPC, which demonstrates how hierarchical ORAM de-
signs can be implemented efﬁciently, and how they can
overcome the high initialization costs and parameter
restrictions of previous ORAM designs. This represents
a step towards a programing model for MPC in which
standard algorithms can be efﬁciently implemented as
MPCs, using oblivious memory just like conventional
memory is used today.
ACKNOWLEDGMENTS
We would like to thank Yilei Chen and Oxana
Poburinnaya for engaging discussions during the early
phases of this work. The Gale-Shapley benchmark was
suggested by abhi shelat.
This work was partially supported by grants from
the National Science Foundation SaTC program (Xiao
Wang and Jonathan Katz supported in part by NSF
Award CNS-1111599; Jack Doerner, David Evans, and
Samee Zahur supported in part by NSF Award CNS-
1111781), the Air Force Ofﬁce of Scientiﬁc Research,
and Google. Work of Mariana Raykova, Samee Zahur
and Xiao Wang was done in part while at SRI In-
ternational and was supported by NSF awards CNS-
1421102,1633282 and CCF-1423296. Work of Adrià
Gascón was supported by the SOCIAM project, funded
by the UK Engineering and Physical Sciences Research
Council (EPSRC) under grant EP/J017728/2, and the
NSF award CCF-1423296.
REFERENCES
[1] Arash Afshar, Zhangxiang Hu, Payman Mohassel, and Mike
Rosulek. How to Efﬁciently Evaluate RAM Programs with
Malicious Security. In EUROCRYPT, 2015.
[2] Gilad Asharov, Yehuda Lindell, Thomas Schneider, and Michael
Zohner. More Efﬁcient Oblivious Transfer and Extensions for
Faster Secure Computation. In ACM Conference on Computer
and Communications Security, 2013.
[3] Mihir Bellare, Viet Tung Hoang, Sriram Keelveedhi, and Phillip
Rogaway. Efﬁcient Garbling from a Fixed-Key Blockcipher. In
IEEE Symposium on Security and Privacy, 2013.
[4] Vincent Bindschaedler, Muhammad Naveed, Xiaorui Pan, Xi-
aoFeng Wang, and Yan Huang. Practicing Oblivious Access on
Cloud Storage: the Gap, the Fallacy, and the New Way For-
ward. In ACM Conference on Computer and Communications
Security, 2015.
[5] Marina Blanton, Aaron Steele, and Mehrdad Alisagari. Data-
oblivious Graph Algorithms for Secure Computation and Out-
sourcing. In ACM Symposium on Information, Computer and
Communications Security, 2013.
[6] Ivan Damgård, Matthias Fitzi, Eike Kiltz, Jesper Buus Nielsen,
and Tomas Toft. Unconditionally Secure Constant-rounds
Multi-Party Computation for Equality, Comparison, Bits and
Exponentiation. In Theory of Cryptography, 2006.
[7] Sky Faber, Stanislaw Jarecki, Sotirios Kentros, and Boyang Wei.
Three-Party ORAM for Secure Computation. In ASIACRYPT,
2015.
[8] David Gale and Lloyd S. Shapley. College Admissions and the
Stability of Marriage. The American Mathematical Monthly,
69(1):9–15, 1962.
[9] Craig Gentry, Kenny A Goldman, Shai Halevi, Charanjit Julta,
Mariana Raykova, and Daniel Wichs. Optimizing ORAM
In Privacy
and Using it Efﬁciently for Secure Computation.
Enhancing Technologies, 2013.
[10] Craig Gentry, Shai Halevi, Charanjit Jutla, and Mariana
Raykova. Private Database Access with HE-over-ORAM Archi-
tecture. In Applied Cryptography and Network Security, 2015.
[11] Oded Goldreich, Silvio Micali, and Avi Wigderson. How to Play
any Mental Game or A Completeness Theorem for Protocols
In ACM Symposium on the Theory of
with Honest Majority.
Computing, 1987.
[12] Oded Goldreich and Rafail Ostrovsky. Software Protection and
Simulation on Oblivious RAMs. Journal of the ACM, 43(3),
1996.
[13] Michael T. Goodrich and Michael Mitzenmacher. Privacy-
Preserving Access of Outsourced Data via Oblivious RAM Sim-
ulation. In International Colloquium on Automata, Languages
and Programming, 2011.
[14] Michael T. Goodrich, Michael Mitzenmacher, Olga Ohrimenko,
and Roberto Tamassia. Privacy-preserving Group Data Access
via Stateless Oblivious RAM Simulation. In ACM-SIAM Sym-
posium on Discrete Algorithms, 2012.
[15] S. Dov Gordon, Jonathan Katz, Vladimir Kolesnikov, Fernando
Krell, Tal Malkin, Mariana Raykova, and Yevgeniy Vahlis. Se-
cure Two-Party Computation in Sublinear (Amortized) Time. In
ACM Conference on Computer and Communications Security,
2012.
[16] Yan Huang, David Evans, and Jonathan Katz. Private Set Inter-
section: Are Garbled Circuits Better than Custom Protocols? In
Network and Distributed Systems Security Symposium, 2012.
[17] Yan Huang, David Evans, Jonathan Katz, and Lior Malka.
Faster Secure Two-Party Computation using Garbled Circuits.
In USENIX Security Symposium, 2011.
[18] Marcel Keller and Peter Scholl. Efﬁcient, Oblivious Data
Structures for MPC. In ASIACRYPT, 2014.
[19] Vladimir Kolesnikov, Ahmad-Reza Sadeghi, and Thomas
Improved garbled circuit building blocks and ap-
In Cryptology
Schneider.
plications to auctions and computing minima.
and Network Security, pages 1–20. Springer, 2009.
[20] Vladimir Kolesnikov and Thomas Schneider.
Improved Gar-
bled Circuit: Free XOR Gates and Applications. Automata,
Languages and Programming, 2008.
[21] Eyal Kushilevitz, Steve Lu, and Rafail Ostrovsky. On the
(In)security of Hash-Based Oblivious RAM and a New Bal-
In ACM-SIAM Symposium on Distributed
ancing Scheme.
Algorithms, 2012.
[22] Litecoin Project. scrypt.cpp. https://github.com/litecoin-project/
litecoin/blob/master-0.10/src/crypto/scrypt.cpp, 2015.
232232
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:03 UTC from IEEE Xplore.  Restrictions apply. 
[23] Chang Liu, Yan Huang, Elaine Shi, Jonathan Katz, and
Michael W. Hicks. Automating Efﬁcient RAM-Model Secure
In IEEE Symposium on Security and Privacy,
Computation.
2014.
[24] Chang Liu, Xiao Shaun Wang, Kartik Nayak, Yan Huang, and
Elaine Shi. ObliVM: A Programming Framework for Secure
In IEEE Symposium on Security and Privacy,
Computation.
2015.
[25] Steve Lu and Rafail Ostrovsky. Distributed Oblivious RAM
for Secure Two-Party Computation. In Theory of Cryptography
Conference, 2013.
[26] Dahlia Malkhi, Noam Nisan, Benny Pinkas, and Yaron Sella.
In
Fairplay — a Secure Two-Party Computation System.
USENIX Security Symposium, 2004.
[27] Colin Percival. Stronger key derivation via sequential memory-
hard functions. http://www.tarsnap.com/scrypt/scrypt.pdf, 2009.
[28] Benny Pinkas and Tzachy Reinman. Oblivious RAM Revisited.
In CRYPTO 2010, 2010.
[29] Benny Pinkas, Thomas Schneider, Nigel P. Smart, and
Stephen C. Williams. Secure Two-Party Computation Is Prac-
tical. In ASIACRYPT, 2009.
[30] Elaine Shi, T.-H. Hubert Chan, Emil Stefanov, and Mingfei
In
Li. Oblivious RAM with O((logN)3) Worst-Case Cost.
ASIACRYPT 2011, 2011.
[31] Ebrahim M. Songhori, Siam U. Hussain, Ahmad-Reza Sadeghi,
Thomas Schneider, and Farinaz Koushanfar. TinyGarble: Highly
Compressed and Scalable Sequential Garbled Circuits. In IEEE
Symposium on Security and Privacy, 2015.
[32] Emil Stefanov, Marten van Dijk, Elaine Shi, Christopher W.
Fletcher, Ling Ren, Xiangyao Yu, and Srinivas Devadas. Path
ORAM: An Extremely Simple Oblivious RAM Protocol.
In
ACM Conference on Computer and Communications Security,
2013.
[33] Abraham Waksman. A Permutation Network. Journal of the
ACM, 15(1), January 1968.
[34] Xiao Wang, Hubert Chan, and Elaine Shi. Circuit ORAM: On
Tightness of the Goldreich-Ostrovsky Lower Bound. In ACM
Conference on Computer and Communications Security, 2015.
[35] Xiao Shaun Wang, S. Dov Gordon, Allen McIntosh, and
Jonathan Katz. Secure Computation of MIPS Machine Code.
Cryptology ePrint Archive, Report 2015/547, 2015. http://eprint.
iacr.org/2015/547.
[36] Xiao Shaun Wang, Yan Huang, T.-H. Hubert Chan, Abhi Shelat,
and Elaine Shi. SCORAM: Oblivious RAM for Secure Compu-
tation. In ACM Conference on Computer and Communications
Security, 2014.
[37] Peter Williams and Radu Sion. Single Round Access Privacy
on Outsourced Storage. In ACM Conference on Computer and
Communications Security, 2012.
[38] Andrew Chi-Chih Yao. How to Generate and Exchange Secrets
In IEEE Symposium on Foundations of
(Extended Abstract).
Computer Science, 1986.
[39] Samee Zahur and David Evans. Circuit Structures for Improving
Efﬁciency of Security and Privacy Tools. In IEEE Symposium
on Security and Privacy, 2013.
[40] Samee Zahur and David Evans. Obliv-C: A Lightweight
Compiler for Data-Oblivious Computation. Cryptology ePrint
Archive, Report 2015/1153, 2015. http://oblivc.org.
[41] Samee Zahur, Mike Rosulek, and David Evans. Two Halves
Make a Whole - Reducing Data Transfer in Garbled Circuits
Using Half Gates. In EUROCRYPT, 2015.
APPENDIX
Figure 11 shows the actual Obliv-C source code of
our ORAM construction, copied verbatim. The obliv
keyword denotes secret variables. The variable ram→cpy
is a structure with block size and copy constructor
information. Since block size is only known at run-
time, a pointer to array[i] must be obtained by calling
element(ram→cpy, array, i). The actual Obliv-C code
closely follows the pseudocode presented in Figure 5.
233233
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:03 UTC from IEEE Xplore.  Restrictions apply. 
static void∗ element(OcCopy∗ cpy, void∗ arr, int i) obliv
{ return i ∗ cpy→eltsize + (char∗)arr; }
void ocSqrtOramAccess(OcSqrtOram∗ ram, obliv int index,
ocBlockAccessFunction fn, void∗ data)
{
int i;
obliv bool foundi = false;
// Scan through stash
for (i=0; i<ram→time; ++i) obliv if (index == ram→stashi[i])
{ fn(ram→cpy, element(ram→cpy, ram→stash, i), data);
found=true;
}
// Fake/unfake posmap lookup
int lookupIndex = ram→pos→getPos(ram→pos, index, found);
// Access one more element from shufﬂed array
ocCopy(ram→cpy, element(ram→cpy, ram→stash, ram→time),
element(ram→cpy, ram→shuff, lookupIndex));
ram→usedShuff[lookupIndex] = true;
ram→stashi[ram→time] = ram→shufﬁ[lookupIndex];
obliv if(!found)
ram→time++;
if (ram→time == ram→period) {
fn(ram→cpy, element(ram→cpy, ram→stash, ram→time), data);
ocSqrtOramRefresh(ram);
}
}
Fig. 11: Obliv-C implementation of the Access function of our ORAM construction
234234
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:03 UTC from IEEE Xplore.  Restrictions apply.