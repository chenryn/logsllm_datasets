### Entire Range and Performance Comparison
Throughout the entire range we benchmarked, Square-Root ORAM outperforms Circuit ORAM, although for sufficiently large sizes, Circuit ORAM will eventually perform better. Specifically, for 64 pairs, Square-Root ORAM is over 9 times faster, completing in 145 seconds. For 512 pairs, stable matching using Square-Root ORAM requires just over 33 hours, whereas with Circuit ORAM, it takes 52.5 hours.

### Oblivious Scrypt
To explore the feasibility of using ORAMs in a challenging cryptographic application, we implemented the key derivation function scrypt [27]. Scrypt was designed to be difficult to parallelize, making it resistant to brute-force attacks even with custom high-performance hardware. It achieves this by repeatedly enciphering a single block of data and retaining each intermediate result in memory. In the second round, it mixes the block with an intermediate result from the first round, selected based on the current value. In an oblivious context, scrypt requires the use of some form of ORAM because the indices of memory accesses in the second phase depend on the oblivious data generated in the first phase. The unpredictable memory access pattern of scrypt necessitates sequential execution with no significant shortcuts.

#### Parameters and Benchmarks
With typical parameters, scrypt requires a relatively small ORAM element count. For instance, Litecoin, which uses scrypt as a proof-of-work mechanism, specifies \( N = 2^{10} \) elements [22]. Colin Percival, the designer of scrypt, recommends a minimum of \( N = 2^{14} \) elements for normal use [27]. Additionally, Percival recommends that each element be 1KB in size, which is much larger than required by our other benchmarks. During execution, scrypt performs exactly one access per element.

We tested scrypt using the recommended parameters and test vectors from the scrypt specification [27], with \( r = 8 \) and \( p = 1 \), and varied \( N \) from 4 to \( 2^{14} \). We also benchmarked the parameters used by Litecoin (\( r = 1 \), \( p = 1 \), \( N = 2^{10} \)). A few representative combinations are presented in Table I. As in other benchmarks, linear scan is marginally more efficient when the number of blocks (N) is small. Otherwise, Square-Root ORAM is preferred, outperforming linear scan by approximately one order of magnitude when \( N = 2^{10} \), and this ratio improves as \( N \) increases.

The largest parameters we benchmarked are Percival’s recommended minimum parameters (\( r = 8 \), \( p = 1 \), \( N = 2^{14} \)), which he originally chose because they required less than 100ms to execute on contemporary hardware, a threshold he considered reasonable for interactive use [27]. On our EC2 test node, the reference (non-oblivious) scrypt implementation requires 35ms with the same parameters. With Square-Root ORAM, execution took 32 minutes, compared to 47 minutes with Circuit ORAM. The large block size required by scrypt means that block access time forms a greater portion of the total cost than in our other benchmarks. Consequently, Circuit ORAM becomes competitive earlier than in other cases. We did not benchmark linear scan for the recommended parameters; we estimated that it would require roughly 7 days to complete, which is impractical for most real-world applications.

Even with Square-Root ORAM, scrypt requires 55,000 times longer to execute as an MPC protocol than it does conventionally. This is almost certainly too expensive for any interactive application today, but it demonstrates that even complex algorithms designed to be computationally expensive can be handled by general-purpose MPC.

### Conclusion
The success of MPC depends on enabling developers to create efficient privacy-preserving applications without requiring excessive effort, expertise, or resources. It is crucial that MPC protocols be compatible with conventional programming techniques and data structures that rely on random access memory. Our Square-Root ORAM design provides a general-purpose oblivious memory that can be used anywhere a programmer would normally use an array. We have presented a new approach for designing ORAMs for MPC, demonstrating how hierarchical ORAM designs can be implemented efficiently and overcome the high initialization costs and parameter restrictions of previous ORAM designs. This represents a step towards a programming model for MPC where standard algorithms can be efficiently implemented using oblivious memory, similar to how conventional memory is used today.

### Acknowledgments
We would like to thank Yilei Chen and Oxana Poburinnaya for engaging discussions during the early phases of this work. The Gale-Shapley benchmark was suggested by Abhi Shelat.

This work was partially supported by grants from the National Science Foundation SaTC program, the Air Force Office of Scientific Research, and Google. Work by Mariana Raykova, Samee Zahur, and Xiao Wang was done in part while at SRI International and was supported by NSF awards CNS-1421102, 1633282, and CCF-1423296. Work by Adrià Gascón was supported by the SOCIAM project, funded by the UK Engineering and Physical Sciences Research Council (EPSRC) under grant EP/J017728/2, and the NSF award CCF-1423296.

### References
[References listed as provided in the original text]

### Appendix
Figure 11 shows the actual Obliv-C source code of our ORAM construction, copied verbatim. The `obliv` keyword denotes secret variables. The variable `ram->cpy` is a structure with block size and copy constructor information. Since the block size is only known at runtime, a pointer to `array[i]` must be obtained by calling `element(ram->cpy, array, i)`. The actual Obliv-C code closely follows the pseudocode presented in Figure 5.

```c
static void* element(OcCopy* cpy, void* arr, int i) obliv
{ return i * cpy->eltsize + (char*)arr; }

void ocSqrtOramAccess(OcSqrtOram* ram, obliv int index,
                       ocBlockAccessFunction fn, void* data)
{
    int i;
    obliv bool found = false;

    // Scan through stash
    for (i = 0; i < ram->time; ++i) {
        if (index == ram->stashi[i]) {
            fn(ram->cpy, element(ram->cpy, ram->stash, i), data);
            found = true;
        }
    }

    // Fake/unfake posmap lookup
    int lookupIndex = ram->pos->getPos(ram->pos, index, found);

    // Access one more element from shuffled array
    ocCopy(ram->cpy, element(ram->cpy, ram->stash, ram->time),
           element(ram->cpy, ram->shuff, lookupIndex));
    ram->usedShuff[lookupIndex] = true;
    ram->stashi[ram->time] = ram->shuffi[lookupIndex];

    if (!found) {
        ram->time++;
    }

    if (ram->time == ram->period) {
        fn(ram->cpy, element(ram->cpy, ram->stash, ram->time), data);
        ocSqrtOramRefresh(ram);
    }
}
```

**Figure 11: Obliv-C implementation of the Access function of our ORAM construction**