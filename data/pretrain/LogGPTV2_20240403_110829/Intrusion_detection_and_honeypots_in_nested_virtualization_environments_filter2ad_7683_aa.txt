# Intrusion Detection and Honeypots in Nested Virtualization Environments

**Authors:**
- Michael Beham
- Marius Vlad
- Hans P. Reiser

**Affiliation:**
Institute of IT-Security and Security Law, University of Passau, Germany

**Email:**
- PI:EMAIL
- {mv, hr}@sec.uni-passau.de

## Abstract
Several research projects have developed intrusion detection systems (IDS) and honeypot architectures based on virtual machine introspection (VMI). These systems benefit from the use of virtualization technology, but VMI typically requires direct interaction with the virtual machine monitor (VMM), which is often not available to clients in public clouds. Recently, nested virtualization has gained attention as a method to enable cloud customers to use virtualization-based solutions by nesting two VMMs, with the inner one under the client's control. In this paper, we compare the performance of existing nested-virtualization solutions and analyze the impact of the performance overhead on VMI-based IDS and honeypot systems.

**Keywords:**
- Intrusion detection
- Honeypots
- Nested virtualization
- Cloud computing

## 1. Introduction
Virtualization is a key enabling technology for cloud computing, with applications ranging from live migration to system security, resource-efficient replication, and malware analysis. These approaches leverage hypervisor-level features to inspect, control, and manipulate guest virtual machines (VMs). However, such access is typically restricted in public clouds, limiting the use of these techniques. Nested virtualization, where a second VMM runs within an existing VMM, offers a potential solution. This paper explores the feasibility of combining VMI-based IDS and honeypots with nested virtualization, presenting experimental results and discussing the implications for cloud infrastructures.

## 2. Nested Virtualization

### 2.1 Background
Nested virtualization involves running a second virtualization layer above an existing layer. In an Infrastructure-as-a-Service (IaaS) cloud, the provider manages the first-level (L1) hypervisor, while clients control the second-level (L2) hypervisor. This setup can enable clients to deploy VMI-based security solutions.

#### 2.1.1 CPU Virtualization
CPU virtualization in nested environments presents challenges. Modern CPUs support hardware-assisted virtualization (HVM) through Intel VMX and AMD SVM. Nested virtualization requires either:
- Implementing the L2 hypervisor without HVM, using paravirtualization or binary translation.
- Emulating HVM instructions in the L1 hypervisor, allowing the L2 hypervisor to use full virtualization but increasing complexity.

#### 2.1.2 Memory Virtualization
Memory virtualization in nested environments requires an additional address translation step. Single-level virtualization uses two-level translation, while nested virtualization requires three levels. Hardware support (nested page tables for AMD, extended page tables for Intel) only covers two levels, necessitating software solutions for the third level.

#### 2.1.3 I/O Virtualization
I/O devices can be accessed via direct assignment, emulation, or paravirtualization. Direct assignment offers high performance but limits device access to a single VM. Emulation and paravirtualization are more suitable for monitoring, with paravirtualization generally providing better performance.

### 2.2 Practical Systems
Several practical systems support nested virtualization:
- **KVM**: Initial support for AMD SVM was introduced in 2008, followed by Intel VMX support in 2010.
- **Turtles Project**: Developed support for Intel VMX in 2010, addressing the complexities of nested virtualization.
- **Xen**: Partial support for nested virtualization was added in 2012, with full support in later versions.

### 2.3 Performance Measurements
We conducted experiments to compare the performance of different nested virtualization configurations, focusing on KVM/KVM and KVM/Xen setups. Our test environment used servers with 32 GB RAM and two AMD Opteron 4280 CPUs, running Linux kernel 3.3.2, qemu-kvm 1.1.2, and Xen 4.2.

#### 2.3.1 CPU Performance
We used the wprime benchmark to measure CPU performance. The results showed a negligible 4% overhead for KVM/KVM, but a significant 300% slowdown for KVM/Xen.

#### 2.3.2 Network Performance
Network performance was measured using iperf. Pure emulation resulted in a significant drop in throughput, while paravirtualization (virtio) provided better performance, though still with a notable decrease in nested environments.

#### 2.3.3 Disk Performance
Disk performance was measured using HDTune. Paravirtualization generally improved performance, but write throughput on Xen was better with emulation. Overall, disk performance in nested environments dropped significantly compared to single-level virtualization.

## 3. Experiences with Honeymon IDS in Nested Virtualization
We deployed the Honeymon IDS within a nested virtualization environment to evaluate its performance. The results indicated that while the system is functional, the performance overhead is substantial. We discuss the applicability of this approach to public clouds and the lessons learned from our experiments.

## 4. Related Work
Previous studies have explored various aspects of nested virtualization, including performance, security, and implementation. Berghmanns' work in 2010 compared several nested virtualization approaches, but did not include performance measurements for HVM-on-HVM configurations. Recent developments in Xen and KVM have improved support for nested virtualization, making it a viable option for cloud-based security solutions.

## 5. Conclusions
Our experiments demonstrate that while nested virtualization can enable the use of VMI-based IDS and honeypots in cloud environments, it comes with significant performance overhead. KVM-based nested virtualization outperforms Xen, but both configurations show substantial performance degradation compared to single-level virtualization. Further optimization and research are needed to make nested virtualization a practical solution for cloud security.

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the original text.