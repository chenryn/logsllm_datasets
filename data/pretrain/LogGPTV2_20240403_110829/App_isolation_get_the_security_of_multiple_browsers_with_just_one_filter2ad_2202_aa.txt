title:App isolation: get the security of multiple browsers with just one
author:Eric Yawei Chen and
Jason Bau and
Charles Reis and
Adam Barth and
Collin Jackson
Get the Security of Multiple Browsers with Just One
App Isolation:
Eric Y. Chen
Carnegie Mellon University
PI:EMAIL
Mountain View, CA
Jason Bau
Stanford University
Stanford, CA
PI:EMAIL
Charles Reis
Google, Inc.
Seattle, WA
PI:EMAIL
Adam Barth
Google, Inc.
Mountain View, CA
PI:EMAIL
Collin Jackson
Carnegie Mellon University
Mountain View, CA
PI:EMAIL
ABSTRACT
Many browser-based attacks can be prevented by using sepa-
rate browsers for separate web sites. However, most users
access the web with only one browser. We explain the secu-
rity beneﬁts that using multiple browsers provides in terms
of two concepts: entry-point restriction and state isolation.
We combine these concepts into a general app isolation mech-
anism that can provide the same security beneﬁts in a single
browser. While not appropriate for all types of web sites,
many sites with high-value user data can opt in to app
isolation to gain defenses against a wide variety of browser-
based attacks. We implement app isolation in the Chromium
browser and verify its security properties using ﬁnite-state
model checking. We also measure the performance overhead
of app isolation and conduct a large-scale study to evaluate
its adoption complexity for various types of sites, demon-
strating how the app isolation mechanisms are suitable for
protecting a number of high-value Web applications, such as
online banking.
Categories and Subject Descriptors
H.4.3 [Information Systems Applications]: Communica-
tions Applications—Information browsers; K.6.5 [Management
of Computing and Information Systems]: Security and
Protection
General Terms
Security, Design, Veriﬁcation
Keywords
Web Browser Architecture, Isolation, Web Application Secu-
rity, Security Modeling, Cross-Site Request Forgery, Cross-
Site Scripting
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’11, October 17–21, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.
1.
INTRODUCTION
Security experts often advise users to use more than one
browser: one for surﬁng the wild web and others for visit-
ing “sensitive” web sites, such as online banking web sites
[1, 2]. This advice raises a number of questions. Can us-
ing more than one browser actually improve security? If
so, which properties are important? Can we realize these
security beneﬁts without resorting to the use of more than
one browser?
In this paper, we seek to answer these questions by crystal-
lizing two key security properties of using multiple browsers,
which we refer to as entry-point restriction and state isola-
tion. We ﬁnd that these two properties are responsible for
much of the security beneﬁt of using multiple browsers, and
we show how to achieve these security beneﬁts in a single
browser by letting web sites opt in to these behaviors.
Consider a user who diligently uses two browsers for secu-
rity. This user designates one browser as “sensitive” and one
as “non-sensitive”. She uses the sensitive browser only for
accessing her online bank (through known URLs and book-
marks) and refrains from visiting the general Web with the
sensitive browser. Meanwhile, she uses only the non-sensitive
browser for the rest of the Web and does not use it to visit
high-value sites.
Using two browsers in this manner does have security
beneﬁts. For example, consider the case of reﬂected cross-site
scripting (XSS). In a reﬂected XSS attack, the attacker crafts
a malicious URL containing an attack string and navigates
the user’s browser to that URL, tricking the honest web site
into echoing back the attack string in a dangerous context.
The attack has more diﬃculty succeeding if the user runs
more than one browser because the attack relies on which of
the user’s browsers the attacker navigates. If the attacker
navigates the user’s non-sensitive browser to a maliciously
crafted URL on the user’s bank, the attack will have no
access to the user’s banking-related state, which resides in
another browser.
From this discussion, one might conclude that isolation
of credentials and other state is the essential property that
makes using two browsers more secure. However, another
security property provided by using multiple browsers is
equally important: entry-point restriction. To illustrate
entry-point restriction by its absence, imagine if the attacker
could arbitrarily coordinate navigation of the users’ two
browsers and open an arbitrary bank URL in the sensitive
browser. Now, the attacker’s maliciously crafted URL and
attack string can be transplanted from the non-sensitive
browser to the sensitive browser, leading to disaster.
In reality, it is extremely diﬃcult for Web attackers to
coordinate the navigation of two diﬀerent browsers on the
users’ computer. This isolation between the two browsers
provides the entry-point restriction property. Namely, ses-
sions in the sensitive browser with an honest web site always
begin with a ﬁxed set of entry points (e.g., the site’s home
page or a set of bookmarks) and then proceed only to URLs
chosen by the web site itself, not those chosen by a third
party. Because the bank’s entry points are restricted, the
attacker is unable to inject the attack string into the user’s
session with the bank.
State isolation, in turn, augments the security provided
by entry-point restriction when using two browsers. State
isolation plays a critical role, for example, in preventing
history sniﬃng [3, 4] and cache timing attacks [4, 5] because
these attacks do not rely upon the attacker navigating the
user’s browser to a maliciously crafted URL. State isolation
between browsers can even protect a user’s high-value session
data against exploits of browser vulnerabilities that give the
attacker control of the rendering process [6, 7]. In concert,
entry-point restriction and state isolation provide the lion’s
share of the security beneﬁts of using two browsers.
In our example above, we use a single high-value site to
illustrate the security beneﬁt of isolation using two browsers,
but the isolation beneﬁts extend naturally to accessing mul-
tiple sites, each in their own browser. In this paper, we show
that we can realize these security beneﬁts within a single
browser by allowing web sites to whitelist their entry points
and request isolated storage. This is not a pinpoint defense
against a speciﬁc attack but rather a general approach that
has beneﬁts in a number of attack scenarios.
The security beneﬁts of our mechanism do come with a
compatibility cost for certain types of web sites, as it places
some limitations on deep links and third-party cookies. To
avoid disrupting existing web sites, we advocate deploying
our mechanism as an opt in feature. Furthermore, we hy-
pothesize and experimentally verify the types of web sites
that are suitable for our mechanism. Our experiments mea-
sured the number of entry points used by popular sites in a
study of 10,551 browsers running Mozilla’s Test Pilot plat-
form [8]. Over 1 million links were included in our study.
We discovered that many security sensitive sites such as on-
line banking applications can easily deploy our mechanisms.
However, highly social or content-driven applications such as
Facebook and New York Times will have diﬃculties adopting
our proposal.
To evaluate the security beneﬁts of app isolation, we model
our proposals in the Alloy language, leveraging previous work
on modeling web security concepts in Alloy [9]. We enrich our
existing Alloy model with new concepts, such as EntryPoints
and RenderingEngines, to model the essential concepts in
our proposal. Our analysis revealed two issues with our
initial proposals: one related to HTTP redirects and one
related to an unexpected interaction between entry-point
restriction and state isolation. We repair these errors and
validate that our improved proposals pass muster with Alloy.
We view our main contributions in this paper as follows.
• We crystallize the security beneﬁts of using multiple
browsers into two basic concepts.
• We provide a security mechanism that grants a sin-
gle browser the security beneﬁts of multiple browsers,
compatible with certain types of existing sites.
• We validate the security of our mechanism using formal
modeling, adjusting our design to patch uncovered
vulnerabilities.
• We evaluate the compatibility of our mechanism using
Mozilla’s Test Pilot platform. We are the ﬁrst to utilize
this platform to conduct an academic study.
1.1 Organization.
The rest of this paper is organized as follows. Section 2
presents related app isolation work. Section 3 identiﬁes the
key security beneﬁts of using multiple browsers. Section 4
discusses how browsers can identify apps that have opted
in to our proposal. Section 5 and Section 6 describe our
design in detail. Section 7 evaluates our proposal in terms of
its security, complexity to adopt, and performance, and we
conclude in Section 8.
2. BACKGROUND
In this section, we examine how the security properties of
using multiple browsers have surfaced in related work and
compare them to our proposal.
2.1
Isolation with multiple browsers
For users who choose to browse the web using multiple
browsers, site-speciﬁc browsers (SSBs) can make the brows-
ing experience simpler and more convenient. SSBs provide
customized browsers that are each dedicated to accessing
pages from a single web application. Examples of SSBs
include Prism [10] and Fluid [11].
SSBs are simply special-purpose browsers and can pro-
vide the security beneﬁts of using multiple general-purpose
browsers. However, SSBs can become diﬃcult to manage
when users interact with and navigate between a large num-
ber of diﬀerent web applications. We show that a single
browser can realize the security beneﬁts of SSBs without the
management burden on the user. For example, our proposal
allows users to seamlessly and securely follow a link from
one app to another, even in a single browser tab.
2.2
Isolation within a single browser
The concept of ﬁner-grained isolation inside a single browser
has been explored by many researchers. However, prior work
has not identiﬁed the essential factors needed for a single
browser to achieve the same security beneﬁts as using multi-
ple browsers.
Recent browsers have begun employing sandbox technol-
ogy that protects the local ﬁle system from attacks that
exploit browser vulnerabilities. For example, Internet Ex-
plorer on Windows Vista introduced Protected Mode [12],
which protects the local ﬁle system from being modiﬁed
by a compromised rendering engine. The Google Chrome
browser’s sandbox additionally protects the local ﬁle system
from being read by a compromised by a rendering engine [6].
Unfortunately, neither of these sandboxing technologies pro-
tect web application state, such as cookies and local storage
data, from being accessed by a compromised rendering en-
gine.
The OP browser [13] isolates plugins from state associ-
ated with other applications by enforcing restrictions on the
cross-origin request API exposed to plugins. The Gazelle
browser [14] goes a step further by restricting the cross-
origin request API for the entire rendering engine. Under
the Gazelle approach, a web application’s state is only vis-
ible to the rendering engine containing it. This prevents a
malicious web entity from compromising its own rendering
engine to gain access to the state of other web applications.
However, because Gazelle denies rendering engines from
requesting cross-origin resources unless their MIME type
indicates a library format such as JavaScript or Cascading
Style Sheets (CSS), it imposes a compatibility cost on many
web sites [15].
One approach that can mitigate the compatibility costs of
restricting the cross-origin request API is to allow an appli-
cation to explicitly declare the URLs that compose it. One
example of this approach is the Tahoma browser [16], which
allows applications to specify a manifest ﬁle listing which
URLs should be included in the same protection domain.
Tahoma uses a separate state container for each application,
so state associated with one application will be inaccessible
in another. Although Tahoma realized the importance of iso-
lating web application state, it did not incorporate the other
beneﬁt of using multiple browsers: restricting non-sensitive
web sites from directing the user to a sensitive URL.
OMash [17] only attaches cookies to same-origin requests,
eﬀectively isolating state within a particular site. Each
new entry into a site creates a new session. This approach
mitigates reﬂected XSS, cross-site request forgery (CSRF),
and click-jacking, since another site cannot hi-jack an existing
session with a hyperlink or iframe. However, the drawback
of OMash lies in its inability to maintain user state across
multiple browsing sessions.
Content Security Policy [18] attempts to mitigate XSS by
allowing web sites to only execute scripts from whitelisted
external JavaScript ﬁles. SOMA [19] aims to alleviate XSS
and CSRF by making the host of web content mutually
approve the content request with the web content embedder.
Unfortunately, both of these defenses are geared to counter
individual attacks such as XSS and CSRF. They do not
achieve the full security beneﬁts as using multiple browsers,
such as defenses against rendering engine exploits.
In contrast, our work aims to capture the same underlying
properties of using separate browsers for sensitive web apps,
gaining the security beneﬁts in a single browser.
3. SECURELY ISOLATING WEB SITES
In this section, we investigate exactly which security ben-
eﬁts can be achieved by visiting sensitive web sites in a
diﬀerent web browser than non-sensitive web sites. We clas-
sify many common browser-based attacks and show that a
large number of them can be mitigated through the use of
multiple browsers. We then introduce two new mechanisms
in a single browser that can be used to achieve these same
beneﬁts, for particular web sites that choose to opt in and
accept the compatibility implications.
3.1 Beneﬁts of Multiple Browsers
Suppose a user wishes to protect certain sensitive web sites
from more dangerous ones by using two browsers, A and B.
To achieve this, she must abide by the following rules:
1. Only type in passwords for sensitive web sites with
Browser A. This rule ensures that user state for the
sensitive web sites are stored only in Browser A.
2. Never type in URLs or click on bookmarks to non-
sensitive web sites with Browser A, and never type into
Browser A URLs received from non-sensitive web sites
or other untrusted sources. This rule prevents Browser
A from leaking any sensitive information to Browser B
and prohibits Browser B from contaminating sensitive
states in Browser A.
If the user strictly abides by the rules above, all sensitive
state would reside in Browser A, isolated from non-sensitive
web sites and unable to leak to Browser B. Furthermore,