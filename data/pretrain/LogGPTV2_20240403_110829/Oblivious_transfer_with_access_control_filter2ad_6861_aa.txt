title:Oblivious transfer with access control
author:Jan Camenisch and
Maria Dubovitskaya and
Gregory Neven
Oblivious Transfer with Access Control
Jan Camenisch
IBM Research – Zurich
Maria Dubovitskaya
IBM Russian Systems and
Technology Laboratory,
Moscow Engineering Physics
Institute (State University)
Gregory Neven
IBM Research – Zurich
ABSTRACT
We present a protocol for anonymous access to a database
where the diﬀerent records have diﬀerent access control per-
missions. These permissions could be attributes, roles, or
rights that the user needs to have in order to access the
record. Our protocol oﬀers maximal security guarantees
for both the database and the user, namely (1) only autho-
rized users can access the record; (2) the database provider
does not learn which record the user accesses; and (3) the
database provider does not learn which attributes or roles
the user has when she accesses the database.
We prove our protocol secure in the standard model (i.e.,
without random oracles) under the bilinear Diﬃe-Hellman
exponent and the strong Diﬃe-Hellman assumptions.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—
access controls, authentication, cryptographic controls; E.3
[Data]: Data Encryption
General Terms
Algorithms, Security, Veriﬁcation.
Keywords
Keywords: Privacy, Oblivious Transfer, Anonymous Cre-
dentials.
1.
INTRODUCTION
More and more transactions in our daily life are performed
electronically. People enter their credentials online and into
various databases and disclose their personal information to
diﬀerent organisations with the belief that small amounts
of information cannot reveal enough about them to impact
them in a negative way. When using the internet extensively
however, they can give away much more information about
themselves than they may care to admit.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’09, November 9–13, 2009, Chicago, Illinois, USA.
Copyright 2009 ACM 978-1-60558-352-5/09/11 ...$10.00.
Also to protect sensitive information such as medical or
ﬁnancial data we need to provide strong access control to be
sure that only those people who have the necessary permis-
sions can access it. But statistics about what sort of data
people query also reveals a lot of information about them.
It is possible to build a complete picture of someone’s
movements, transactions, locations and relationships from
the trail left from interaction with websites and various data-
bases. So personal security has become a serious issue.
To protect the users’ privacy, it is important that all elec-
tronic transactions can be performed without revealing more
personal information than is absolutely necessary.
In this
paper we consider the case of access to a database where
the diﬀerent records in the database have diﬀerent access
control conditions. These conditions could be certain at-
tributes, roles, or rights that a user needs to have to access
the records. The assigning of attributes to users is done by
a separate entity called the issuer, external to the database.
To provide the maximal amount of privacy, a protocol is
required such that:
• Only users satisfying the access conditions for a record
can access that record;
• The service (database) provider does not learn which
record a user accesses;
• The service (database) provider shall not learn which at-
tributes, roles, etc. a user has when she accesses a record,
i.e., access shall be completely anonymous, nor shall it learn
which attributes the user was required to have to access the
record.
One real-life example where such a protocol is important
are DNA databases, containing information about the pur-
pose of each gene. Such databases are extremely valuable
and thus there are not sold on a whole, but rather customers
are charged per access to the database. On the other hand,
the particular DNA sequences accessed by a customer reveal
a lot of information about her interests, e.g., for which dis-
ease it is developing medication. Moreover, it is quite likely
that subscription prices vary with the diﬀerent species. Us-
ing our protocol, the database can charge diﬀerent rates for
the DNA sequences of mice and apes, without forcing its
customers to reveal which species they’re interested in.
Other examples of databases where users have an inter-
est to keep their queries hidden are stock quotes, since they
can reveal information about their investment strategy, and
patent search, since they can reveal sensitive business infor-
mation. Our protocol directly addresses these problems and
provides a practical solution for it.
1311.1 Construction Overview
We now describe the main ideas underlying our proto-
col. We build upon the oblivious transfer protocol by Ca-
menisch, Neven, and Shelat [14] which we describe ﬁrst. In
their scheme, the server ﬁrst encrypts each record with a
unique key and publishes these encryptions. The encryp-
tion key is derived from the index of the record and a secret
of the database server. Although the secret of the database
is the same for all record keys, it is not possible to derive the
encryption key for one record from that of another record.
Thus, to be able to access a record, a user needs to retrieve
the corresponding key from the server. To this end, Ca-
menisch et al. give a protocol ensuring that 1) the user can
retrieve exactly one key per protocol run and 2) the server
does not learn which key the user obtained.
The main ideas of our scheme are as follows. First, we
issue anonymous credentials [19, 20, 26, 22, 8, 31, 11] to a
user, each certifying a category of records the user is allowed
to access. Recall that anonymous credentials allow the user
to later prove that she possesses a credential without reveal-
ing any other information whatsoever. We note that the
name “category” is inspired by the diﬀerent data categories
that a user is allowed to access. However, the category could
just as well encode the right, role, or attribute that a user
needs to have in order to access a record. In the following we
will only use the word category, however. Also, note that
if a record has several categories attached to it, then the
user must have a credential for all these categories, basical-
ly implementing an AND condition. If one would want to
specify an OR condition, one could duplicate the record in
the database with a second set of categories.
To allow the user oblivious access a record for which she
has the necessary credentials, we extend the Camenisch et
al. oblivious transfer protocol in two ways: 1) The keys for
a record are derived not only from the index of the record
and the secret key of the server but also from the categories
of the record. 2) We extend the protocol so that the user,
while retrieving a key, gives a zero-knowledge proof of knowl-
edge that she possess credentials on all the categories that
are encoded into the key that she wants to retrieve. Using
anonymous credentials and the speciﬁc features of the Ca-
menisch et al. protocol, we can do this without letting the
server learn the categories nor any other information about
the key which the user obtains trough the protocol.
1.2 Related Work
There is of course a large body of works on oblivious trans-
fer which per se oﬀers users access to a database without the
server learning the contents of the query. In its basic form,
oblivious transfer puts no restrictions on which records a
particular user can access. There are a couple of papers
that consider oblivious transfer with access control, each of
them, however, aiming at a goal diﬀerent from ours.
Aiello, Ishai, and Reingold [1] present priced oblivious
transfer. Here, each record has attached a (possibly diﬀer-
ent) price. The user holds a (homomorphically) encrypted
balance which is reduced with each transfer. Thus, the user
can only retrieve records as long as her balance is positive.
Another related ﬂavor is conditional oblivious transfer, pro-
posed by Di Crescenzo, Ostrovsky, and Rajagopolan [27],
where access to a record is only granted if the user’s secret
satisﬁes some given predicate. However, none of these pro-
tocols oﬀer anonymity to the users.
Approach 1:
∅
R1
{c1}
R2
{c2}
{c3}
R1, R2, R3
R1, R3
R2
R1, R2, R3, R4
{c1, c2}
{c1, c3}
{c2, c3}
{c1, c2, c3}
Approach 2:
R1
{c1}
R2
{c2}
R3
R4
{c1, c2}
{c1, c3}
Figure 1: Access control graphs when implement-
ing AC-OT using Coull et al.’s protcol for database
(R1,{c1}), (R2,{c2}), (R3,{c1, c2}), (R4,{c1, c3}).
Herranz [30] proposes restricted oblivious transfer, which
also protects each record with an access control policy. In his
case the policy consists of a list saying which user has access
to which record, and the user authenticates to the server
openly.
In contrast, our protocol employs a more power-
ful attribute-based access control paradigm, and guarantees
user anonymity.
To the best of our knowledge, the only paper considering
oblivious transfer with access control is the recent work by
Coull, Green, and Hohenberger [23]. They propose a scheme
for controlling access to records using state graphs. With
each access a user transitions from one state to another,
where the transition is deﬁned by the index of the record
the user has accessed. By restricting the possible transitions
between states, a user being in a particular state can only
access the records corresponding to the possible transitions.
An exact comparison between our protocol and that of [23]
depends on the particular access structure of the database
and on how the AC-OT primitive is translated into a graph
structure. In general however, our protocol is more eﬃcient
because it avoids re-issuing user credentials at each transfer.
We discuss two ways of implementing AC-OT using Coull
et al.’s protocol below.
One approach (see Approach 1 in Figure 1) could be to
assign a state to each subset of categories that a user could
have access to, with a self-loop for each record that can be
accessed using this subset. When given access to a new
category, the user is re-initialized in the state representing
her new set of categories. For a database of N records and
C diﬀerent categories, this yields a graph of 2C nodes and
up to N edges per node, yielding an encrypted database size
of O(2C N) using Coull et al.’s protocol, versus O(N) using
ours.
Another approach (Approach 2 in Figure 1) could be to
assign a state to each subset of categories that appears as an
access control list in the database, and a self-loop for each
record having that access control list. Users are in multiple
states simultaneously, namely in all those corresponding to
access control policies that they satisfy. This yields a graph
of up to N nodes and N edges total, reducing the encrypt-
ed database size to O(N), but requires users to store up
to min(2C , N) diﬀerent credentials, and partly destroys the
intuitive aspect of using data categories for access control.
1322. DEFINITION OF AC-OT
2.1 Overview
An oblivious transfer protocol with access control (AC-
OT) is run between the following parties:
• users (U1, . . ., UM ) known by pseudonyms;
• an issuer I providing access credentials to users for the
data categories that they are entitled to access;
• a database DB hosting the list of records and giving users
access to those records that they are entitled to access.
In a nutshell, an oblivious transfer protocol with access
control works as follows.
1. The issuer I generates his key pair for issuing creden-
tials and publishes the public key as a system-wide
parameter.
2. The database server initiates a database containing
records protected by access control lists: generates the
encrypted database and makes it available to all users,
e.g. by posting it on a website.
3. Users contact the issuer to obtain credentials for the
data categories that they want or are entitled to access.
4. When a user wants to access a record in the database,
she proves to the database, in a zero-knowlege way,
that she possesses credentials for all categories associ-
ated with this record. If she succeeds then she can de-
crypt that record, otherwise, she cannot. The database
learns nothing about the index of the record that is be-
ing accessed, nor about the categories associated to the
record.
2.2 Syntax
If κ ∈ N, then 1κ is the string consisting of κ ones. The
empty string is denoted ε. If A is a randomized algorithm,
$← A(x) denotes the assignment to y of the output of
then y
A on input x when run with fresh random coins.
Unless noted, all algorithms are probabilistic polynomial-
time (PPT) and we implicitly assume they take an extra
parameter 1κ in their input, where κ is a security parameter.
A function ν : N → [0, 1] is negligible if for all c ∈ N there
exists a κc ∈ N such that ν(κ)  κc.
We consider a setting with one issuer, one database, and
one or more users. Data categories are bit strings taken from
the category universe C ⊆ {0, 1}∗
. A database consists of
a list of N couples ((R1, ACL1), . . . , (RN , ACLN )), contain-
ing database records R1, . . . , RN ∈ {0, 1}∗
and associated
access control lists ACL1, . . . , ACLN ⊆ C . The semantics of
the access control lists is that only users who have creden-
tials for all data categories in ACLi can access Ri. In other
words, the access control list is a conjunction of keywords;
disjunctions can be realized by letting the same record ap-
pear multiple times in the database. Finally, users interact
with the database directly to obtain those records that they
are entitled to receive.
An adaptive oblivious transfer protocol with access con-
trol (AC-OT) for category universe C ⊆ {0, 1}∗
is a tu-
ple of polynomial-time algorithms and protocols AC -OT =
(ISetup, Issue, DBSetup, Transfer).
Issuer input: sk I
User input: stU
User output: cred c or ⊥, stU
(cid:3)
(cid:3)
.
(cid:2)
pk I, DB = (Ri, ACLi)i=1,...,N
A user obtains an access credential for data category c ∈
C by engaging in the Issue protocol with the issuer. The
issuer’s public key pk I and the data category c are common
inputs. The issuer uses his secret key sk I as an input and
the user possibly maintains his state stU. At the end of the