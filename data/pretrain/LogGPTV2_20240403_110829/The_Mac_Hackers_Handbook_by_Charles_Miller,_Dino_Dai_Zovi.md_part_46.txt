http://developer.apple.com/documentation/Darwin/Conceptual/
KEXTConcept/KEXTConceptIOKit/hello_iokit.html#//apple_ref/doc/
uid/20002366
Dai Zovi, Dino. “Hardware Virtualization Rootkits,” http://www
.blackhat.com/presentations/bh-usa-06/BH-US-06-Zovi.pdf
Rutkowska, Joanna. “Subverting the Vista Kernel for Fun and Profi t,”
http://www.blackhat.com/presentations/bh-usa-06/BH-US-06-
Rutkowska.pdf
Rutkowska, Joanna and Alexander Tereshkin. “New Blue Pill,” http://
bluepillproject.org/
Nemo, “Mac OS X Wars—A XNU Hope,” http://www.phrack.com/
issues.html?issue=64&id=11
9955336633cc1122..iinndddd 335588 11//2255//0099 44::4433::2211 PPMM
Index
A ARP (Address Resolution attack surface, client side
ABI (Application Binary Protocol) requests, Bonjour, cutting into, 72–75
Interface), PowerPC, 219 36 references, 81
abstractions, Mach, 294 The Art of Assembly Language (No Safari, 75–81
Address Resolution Protocol Starch, 2003), 164, 238 attack surface, defi ned, 63
(ARP) requests, Bonjour, 36 ASCII characters attack surface, server side
address space layout smashing stack on PowerPC, nonstandard listening
randomization (ASLR), 22 167–168 processes, 68–72
administrative interface, smashing stack on x86, 171 references, 81
QuickTime Streaming Server, ASLR (address space layout searching, 63–68
54 randomization), 22
agents, daemons vs., 20 assembly B
AIM (AOL Instant Messaging), The Art of Assembly Language
iChats spy, 325 (No Starch, 2003), 164 Berkeley Software Distribution.
analysis Intel x86 exploit payloads, 238 See BSD (Berkeley Software
combining static and dynamic, Mac OS X payload Distribution)
115 development, 214–215 binaries
dynamic, 114 PowerPC exploit payloads, EIP-relative data addressing
source code. See source-code 219–221, 223 when disassembling, 136
analysis system calls at level of, 330 fi nding bugs using static
static, 114 trampoline code for x86, 303 analysis, 114
ANNOUNCE method, RTSP, AT&T syntax, x86 assemblies, oddities of Mach-O, 138–140
52–53 238 patching, 154–156
AOL Instant Messaging (AIM), atom. mov fi les, 47–52 reverse-engineering with Pai
iChats spy, 325 .atr extension, 75 Mei, 102–107
Apple attack strings reversing Obj-C. See Obj-C
AppleFileServer security bugs, mDNSResponder UPnP exploit (Objective-C), reversing
71 on x86, 279–283 universal, 13–17
Kernel Programming Guide, QuickTime RTSP exploit, 266 blr (branch and link) register,
295 QuickTime RTSP exploit on PowerPC, 219
prelease-vulnerability Leopard, 269–273 Blue Pill, hardware-
collection, 124–125 QuickTime RTSP exploit on virtualization rootkit, 354,
security of open-source code x86, 273–276 357
used by. See source-code smashing stack on PowerPC, Bonjour, 35–47
analysis 166–170 disabling, 40
Application Binary Interface smashing stack on x86, 171–173 interacting with, 40–41
(ABI), PowerPC, 219 triggering vulnerabilities with, IP address requirement, 36–37
architecture. See Mac OS X 162 mDNSResponder, 41–44
architecture using return into system( ), minimizing exposure to
173–176 attacks on, 64–67
359
9955336633bbiinnddeexx..iinndddd 335599 11//2255//0099 44::4433::3399 PPMM
360 Index ■ C–D
name translation setup hiding fi les, 334 compileBranch( ) function,
requirement, 37 in source code, 47 regular expressions, 121
overview of, 35 triggering vulnerability on complex instruction set
real-world exploit. See PowerPC, 265–266 computer (CISC), x86, 239
mDNSResponder, UPnP conditional jumps, 211
location header overfl ow Contents folder, application
C
references, 61 bundles, 17–18
requirements for, 36 C++, Objective-C vs., 10–11 Content-Type header. See
service discovery requirement, caches, PowerPC, 225 QuickTime RTSP Content-
37–39 calculateCompiledPatternLength( Type header overfl ow
source code, 44–47 ) function, 121 control channel, rootkit, 349–352
Xcode project and, 42–44 Calculator program CORE IMPACT penetration-
BootX booter, 346 patching binaries, 154–156 testing tool, 290
bp_set( ) function, PyDbg, 97 reverse engineering case study, CPU registers, 301–302
branch and link (blr) register, 150–154 CrashReporter. See ReportCrash
PowerPC, 219 working with Pai Mei, 103–107 (CrashReporter)
breakpoints canary value, and stack CSGCamera class, 311–313
QuickTime RTSP exploit, 267 protection, 27 CSGCameraDelegate class,
setting with Pai Mei, 103–104 CanSecWest 2008 bug 311–313
setting with PyDgb script, 101 case study, 207–209 CSGCameraDelete class, 311
BSD (Berkeley Software immediate patch-release for, ctr register, PowerPC, 219
Distribution) 124 CUPS (Common Unix Printing
Mac OS X architecture, 5 overview of, 121–122 System)
Mac OS X kernel based on, 294 QuickTime for Java real-world history of security bugs, 64
Robert Morris Internet worm exploit, 287–290 nonstandard listening
and, 161 CANVAS penetration-testing processes, 71
within XNU kernel, 4 tool, 290 searching for server-side
buffer overfl ows capability-based security model, attacks, 67
discovering vulnerabilities, Mach, 296–300
121–123 case studies
exploiting heap. See heap exploiting heap overfl ows, D
overfl ows, exploiting 207–209 D compiler, dtrace invoking,
exploiting Location headers in reverse engineering, 150–154 87–88
UPnP, 277–287 CD Sharing option, Sharing D programming language,
exploiting stack. See stack Pane, 68–69 88–89, 95
overfl ows, exploiting CFBundleDocumentTypes, 73–74 DAAP (port 3689), attacks on
fi nding bugs in WebKit, CFBundleTypeRole, 73–74 iTunes, 67–68
122–123 changelogs, bugs lurking in, daemons, agents vs., 20
fi nding heap, 132 122–123 Darwin core, 7
searching for, 114 chread_set_self( ) function, Darwin Streaming Server, for
stack protection from, 27–28 Mach injection, 302–304 RTSP, 54–59
bugs, searching for, 113–134 CISC (complex instruction set Data Execution Prevention
Apple’s prerelease- computer), x86, 239 (DEP), Windows, 24
vulnerability collection, class-dump tool, method data region, Mach-O fi le format,
124–125 swizzling, 319 15–17
in changelogs, 122–123 client side attacks data segment buffer overfl ow.
fi le fuzzing and, 129–133 cutting into, 72–75 See mDNSResponder, UPnP
fuzzing and, 125–126 references, 81 location header overfl ow
network fuzzing and, 126–129 Safari and, 75–81 _DATA segments, overwriting
overview of, 113 coalescing, szone, 187 heap metadata, 198
references, 134 CocoaSequenceGrabber, 311 database
strategies for, 113–115 code coverage application information stored
using source-code analysis. See CanSecWest 2008 bug, 121–122 in, 74
source-code analysis discovering vulnerabilities querying information, 74–75
bundle injection. See also Mach with, 116–121 debugging. See also GDB (GNU
injection monitor, 93–96 Debugger)
Mach-O inject_bundle exploit using Pai Mei for binary, case study using reverse
payload, 244–254, 256–258 102–107 engineering, 150–154
references, 326 code execution, overwriting creating in mDNSResponder,
testing, 254–256 heap metadata, 197–201 42–43
bundles CollectorBlocks, WebKit, 206 method swizzling using,
Mac OS X architecture, 17–19 Common Unix Printing System. 319–320
types of documents supported See CUPS (Common Unix using special heaps for, 186
by, 73 Printing System) decimalNumberByAdding, 152,
byte order commpage, 183 154–155
9955336633bbiinnddeexx..iinndddd 336600 11//2255//0099 44::4433::3399 PPMM
Index ■ E–F 361
decimalNumberBySubtracting, overview of, 87–88 exploit payloads
154–155 dup2_std_fds, 234–235 constraints on, 214
decode_longxor, 225–230, 238 DVD Sharing option, Sharing defi ned, 162
decoders Pane, 68–69 dynamically injecting code
decode_longxor, 225–230, 238 dyld (dynamic linker) into, 161
payload decoder stubs, 217 executing payload from heap, executing from heap, 176–181
defragmenting heap, feng shui, 176–177, 179–181 Intel x86. See x86 exploit
202–203, 210–211 fi nding useful instruction payloads
defragmenting packets, kernel, sequences, 182–183 Mac OS X. See Mac OS X
353–354 smashing stack on PowerPC, exploit payloads
deny-by-default policy, 67 166 PowerPC. See PowerPC exploit
DEP (Data Execution x86 inject_bundle payload, payloads
Prevention), Windows, 24 247–253 references, 259–260
DESCRIBE method, RTSP, 52–53 DYLD_INSERT_LIBRARIES, 156 shellcode vs., 213
device drivers dynamic analysis, 115. See also smashing stack on PowerPC,
adding and managing with fuzzing 169–170
I/O Kit, 5–7 dynamic binding, Objective-C, exploitation
adding and removing new 10 of heap overfl ows. See heap
code, 328 dynamic libraries, loading, overfl ows, exploiting
maintaining access across 307–310 real-world exploits. See real-
reboots, 346–349 dynamic linker. See dyld world exploits
Dictionary app program, attack (dynamic linker) of stack overfl ows. See stack
surface, 77–78 overfl ows, exploiting
directories
E
device driver, 6
mDNSResponder, 42 EAX register F
systemwide launched executing payload from heap, feng shui, heap, 202–204, 207–211
confi guration fi les, 20 178–179 fi le formats
disassembly executing system calls on x86, client-side attacks on Safari-
analyzing for bugs in static 240, 330–331 supported, 80–81
analysis, 114 exploiting vulnerability, 281 Safari safe fi les, 79–80
easier to read after Obj-C clean fi nding useful instruction Safari’s extended attack
up, 144–145 sequences in, 183–184 surface, 75–79
IDA Pro starting for Pai Mei, x86, defi ned, 239 fi le fuzzing
104 effective user IDs, 215 overview of, 129–133
oddities of Mach-O binaries, EIP-relative data addressing, of QuickTime Player, 126–129
135–140 136, 137 File Sharing option, System
smashing stack on x86, 172 encoders Preference, 69
using otool to get listing for, 8 encode_longxor encoder, Filemon utility, 90–91
disassembly grep method 237–238 Finder, hiding fi les in rootkit,
mDNSResponder UPnP payload. See payload encoders 332–336
overfl ow exploit, 285 encryption, fuzzing using, 99 fi rewall, Leopard security and,
QuickTime RTSP exploit, EngineNotifi cationProc, RTSP, 29
266–267 59–60 fi xobjc.idc fi le, cleaning up Obj-
QuickTime RTSP exploit on ENOTSUP, vfork( ), 235 C, 144–145
Leopard, 271 epilog, subroutine, 162, 163 4-byte overwrite, arbitrary,
dlopen( ) function, 310 exceptions, Mach, 298–300, 193–195
dlsym( ) function, 310 305–306 frame pointer
.dmg fi les, 54 exec-payload-from-heap stub, defi ned, 162
DNS, Multicast DNS vs., 37 179–181, 275–276 executing payload from heap,
DNS-SD (DNS Service executable heap, 24–26 178
Discovery), 38–39 Execute Disable (XD) bit, 24–25 exploitation on x86, 275
DTrace, 87–96 execve( ) setting breakpoint after
D programming language, calling vfork( ) prior to calling, setting, 321
88–89 235 smashing stack on x86, 172
describing probes, 89–90 executing shell, 216 stack usage on PowerPC, 163
fi nding and exploiting bugs, forking new process, 215–216 stack usage on x86, 164–165
90–91 execve_binsh frames, stack memory, 162
fi nding executed library calls, defi ned, 218 free lists, szone
91–92 executing shell, 216 defi ned, 187
getting instruction tracer/ PowerPC exploit payloads, freeing and allocating memory,
code-coverage monitor, 221–223 187–192
93–95 putting together simple obtaining code execution,
Mac OS X architecture, 9–10 payloads, 237–238 197–201
memory tracer example, 95–96 testing, 237
9955336633bbiinnddeexx..iinndddd 336611 11//2255//0099 44::4433::3399 PPMM
362 Index ■ G–I
overwriting heap metadata, H method swizzling and, 318–322
193–197 handler_breakpoint function, IDA Pro
FreeBSD code, within XNU PyDbg, 97 cleaning up Obj-C, 141–145
kernel, 5, 294 hardware, protecting, 24–25 correcting messed-up jump
fs_usage, DTrace, 90–91 hardware-virtualization tables, 137–138
function hooking rootkits, 354–358 ida-x86emu emulator for,
overview of, 314 hyperjacking, 355–356 146–150
references, 326 hypervisor, 356–358 identifying missing binary
SSLSpy example, 315–318 overview of, 354–355 functions, 138–140
function pointers hashing function, x86 inject_ patching binaries within, 155
in data segment buffer bundle, 247–253 reverse engineering case study,
overfl ows, 277, 280 headers 150–154
exploiting on PowerPC using, Mach-O fi le format, 14–15, 16, setting breakpoints in Pai Mei,
283 245 103–104
heap spraying and, 211 RTSP request, 53 IDAPython, 104
hooking functions using, RTSP response, 53 ida-x86emu emulator, 146–150
315–316 heap IDE (Integrated Development
obtaining code execution, 198 diffi culty of fi nding buffer Enviroment), XCode, 42–43
system calls, 331 overfl ows, 132 IETF (Internet Engineering Task
WebKit’s JavaScript and, 207 executable, 24–26 Force), Zero Confi guration
functions, identifying missing executing payload from, Working Group, 36
binary, 138–140 176–181 _IMPORT segments, overwriting
fuzzing memory tracer analysis, 95–96 heap metadata, 198–200
defi ned, 99 overview of, 185–186 info mach-region command,
with dynamic analysis, 114 unpredictability of, 201 GDB, 87
fi le, 129–133 heap overfl ows, exploiting, info sharedlibrary command,
.mov fi le format for, 49 185–212 QuickTime, 58–59
network, 126–129 case study, 207–209 Info.plist fi le
overview of, 125–126 creating heap spray, 201–202 determining client-side attack
PyDbg in-memory, 99–102 feng shui, 202–204 surface from, 72–76
Fuzzing: Brute Force Vulnerability feng shui case study, 209–211 for hello_kernel extension, 329
Discovery (Sutton, Greene the heap, 185–186 maintaining access across
and Amini), 126 heap spray case study, 211 reboots, 346–349
FZMessage, 322, 325–326 overwriting heap metadata, from QuickTime Player, 18–19
192–201 inject_bundle
G references, 212 injecting code into another
scalable zone allocator, 186–192 process using Mach,
garbage collection, forcing WebKit’s JavaScript, 204–207 298–300
JavaScript heap sprays Intel x86 exploit payload,
feng shui case study, 209–210 defi ned, 201 244–254
WebKit’s JavaScript, 205–206 feng shui approach vs., 202–204 loading dynamic library or
GDB (GNU Debugger) overview of, 211 bundle, 307–310
attaching to iTunes with, hello-kernel extension, 328–330 testing, 256–258, 311
108–110 hiding usage, 311
exploiting UPnP vulnerability fi les, creating simple rootkit injection vectors
on x86, 279–283 for, 332–342 defi ned, 162
method swizzling using, 319 rootkits, 342–345 exploit payloads. See exploit
overview of, 86–87 Honoroff, Jake, 122 payloads
payload development using, hooking functions. See function exploiting heap overfl ows.
215 hooking See heap overfl ows,
ptrace and, 85–86 HTTP (HyperText Transfer exploiting
triggering vulnerability on Protocol), RTSP vs., 52 exploiting stack overfl ows.
PowerPC, 264 huge allocations, szone, 186–187 See stack overfl ows,
generation-based approach, to human-readable names, probes, exploiting
fuzzing, 125–126 89 in-memory fuzzing, PyDbg,
generic kernel extensions, 328, hyperjacking, 354–356 99–102
346 HyperText Transfer Protocol input approaches, fuzzing,
getdirentriesattr( ) function, (HTTP), RTSP vs., 52 125–126
332–340 hypervisor, 355–358 instruction sequences
GNU Assembler syntax, 238 exploitation techniques, 181
GNU Debugger. See GDB (GNU PowerPC stack exploit, 181–182
Debugger) I x86 stack exploit, 182–184
Guard Malloc, 132 iChats instruction tracer/code-coverage
gzip fi les, client-side attacks injectable bundle to spy on, monitor, DTrace, 93–95
on, 81 322–326
9955336633bbiinnddeexx..iinndddd 336622 11//2255//0099 44::4433::3399 PPMM
Index ■ J–M 363
integer overfl ow, real-world maintaining access across QuickTime RTSP exploit on
exploit, 287–290 reboots, 346–349 x86 and, 275–276
Integrated Development managing and organizing in return-to-libc exploits, 174
Enviroment (IDE), XCode for kernel, 343–344 linked lists
Apple, 42–43 overview of, 327–328 detecting heap memory
Intel kextstat command corruption, 188
syntax, 238 hiding fi les within rootkit, disadvantage of heap spraying,
VT-x virtualization, 354–355 330, 342 202
x86. See x86 hiding rootkit, 345 hiding rootkit by removing
interfaces, Mach, 294 listing all loaded drivers, 6 from, 344
Internet Engineering Task Force kmod (kernel module) kernel modules stored in, 343
(IETF), Zero Confi guration defi ned, 330 _LINKEDIT segment, x86 inject_
Working Group, 36 managing and organizing, bundle, 245–246
interprocess communication 343–344 load commands, Mach-O fi le
(IPC), Mach, 294–295 kmod_hider, 344–345 format
invalid inputs KPI (kernel programming bundle-injection payload
in fuzzing, 125–126 interface), IP Filter, 352–354 component, 249–250
testing application using, 114 Ktrace, 8–9 defi ned, 15
I/O Kit, Mac OS X, 5–7 KUNCExecute( ) function, header format, 245
IOKit drivers, 328, 346–349 rootkit IP Filter, 354 LC_SEGMENT format, 246
IP addresses, Bonjour, 36–37 LC_SYMTAB format, 246
IP Filter, rootkit, 352–354 loading dynamic library or
L
IPC (interprocess bundle, Mach injection,
communication), Mach, Label key, 20 307–310
294–295 large allocations, szone, 186–187 local-privilege escalation attacks,
ipf_add4() function, rootkit IP large arbitrary memory 22
Filter, 353 overwrite, 195–197 longjmp( ) function, 176–177
iPhone bug, 123–124 Last Stage of Delirium (LSD) lr (link register)
iSight photo capture, 311–314 Research Group, 215 defi ned, 219
island function, 314–315 last-free cache, szone, 187, 192 smashing stack on PowerPC,
IsRegister program, 74–75 launchd, 19–21 169–170
iTunes LaunchServices, 72, 74–76 stack usage on PowerPC, 163
anti-debugging features in, LC_SEGMENT load command, LSD (Last Stage of Delirium)
108–109 x86 inject_bundle, 245–246 Research Group, 215
debugging and tracing, 110–111 LC_SYMTAB load command, ltrace, 91–92
disabling anti-debugging x86 inject_bundle, 246
features, 154–156 Leopard
remote attacks on, 67–68 mDNSResponder running as M
unprivileged user, 276 .m fi le extension, Objective-C, 11
retargeting exploit on Mac OS X architecture
J QuickTime RTSP to, basics, 3–4
JavaScript, exploiting WebKit, 269–273 BSD kernel, 5
204–207 Leopard security, 21–34 bundles, 17–19
jmp_buf [JB_EBP], 178–179 executable heap, 24–26 Darwin, 7
.jp2 fi les, 129–132 fi rewall, 29 DTrace, 9–10
JRSwizzle, 322 library randomization, 22–24 I/O Kit, 5–7
jsRegExpCompile function, 93, Mach model, 297 kernel. See XNU (Mac OS X)
121 overview of, 21 kernel
jump tables, messed-up, 137–138 references, 34 Ktrace, 8–9