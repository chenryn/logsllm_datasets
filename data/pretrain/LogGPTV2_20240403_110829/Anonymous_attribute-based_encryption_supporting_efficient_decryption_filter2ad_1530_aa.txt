title:Anonymous attribute-based encryption supporting efficient decryption
test
author:Yinghui Zhang and
Xiaofeng Chen and
Jin Li and
Duncan S. Wong and
Hui Li
Security Weaknesses of an “Anonymous Attribute
Based Encryption” appeared in ASIACCS’13
Payal Chaudhari, Manik Lal Das, Anish Mathuria
{payal chaudhari, maniklal das, anish mathuria}@daiict.ac.in
DA-IICT, Gandhinagar, India
Abstract
Attribute-based Encryption (ABE) has found enormous application in
ﬁne-grained access control of shared data, particularly in public cloud. In
2013, Zhang et al proposed a scheme called match-then-decrypt [1], where
before running the decryption algorithm the user requires to perform a
match operation with attribute(s) that provides the required information
to identify whether a particular user is the intended recipient for the ci-
phertext. As in [1], the match-then-decrypt operation saves the computa-
tional cost at the receiver and the scheme supports receivers’ anonymity.
In this paper, we show that Zhang et al ’s scheme [1] does not support re-
ceivers’ anonymity. Any legitimate user or an adversary can successfully
check whether an attribute is required in the matching phase, in turn, can
reveal the receivers’ identity from the attribute.
Keywords. Attribute Based Encryption, Anonymity, Anonymous En-
cryption, Bilinear Pairing.
1
Introduction
With the advancement of cloud computing vast volume of data including sensi-
tive data is outsourced and stored in public clouds. As a result, securing data
from unauthorized access is a challenging task, which has recently got attraction
from research community. In other words, the cloud system must assure users
about the privacy and security of their data, and at the same time, making data
available to authorized users.
Attribute-based encryption (ABE) [2], [3] has been considered as a highly ca-
pable public key primitive for implementing ﬁne-grained access control system,
where diﬀerential access rights can be assigned to individual users. There are
two kinds of ABE – key-policy based ABE (KP-ABE) [2], [3] and ciphertext-
policy based ABE (CP-ABE) [4]. In KP-ABE each ciphertext is labeled by the
encryptor with a set of descriptive attributes and the private key of a user is
associated with an access structure that speciﬁes which type of ciphertext the
key can decrypt. In CP-ABE a user is identiﬁed by a set of attributes which are
1
included in his private key and the encryptor can decide the access structure
while generating the ciphertext that the user can decrypt with his private key.
Our discussion in this paper is limited to CP-ABE.
ABE schemes [3], [4] require to send the information about the necessary at-
tributes of receiver along with the ciphertext. From the set of attributes one
can identify who is the target receiver, which costs the receiver’s privacy. Fur-
thermore, by knowing the receiver’s identity, one can guess the nature/meaning
of the plaintext (e.g., the plaintext could be examination related if the receiver
is a student). Therefore, protecting user’s privacy in access control system is an
essential requirement in many real applications. In order to meet this require-
ment, a few anonymous ABE (AABE) schemes have appeared in [5], [6], [7],
[8]. In anonymous CP-ABE, access policy is hidden in the ciphertext. A user
requires to decrypt a ciphertext using the secret key belongs to his attributes.
If his secret key matches with the access policy then the user can successfully
decrypt the ciphertext. If the attribute set associated with the secret key does
not match with the access policy, then the user cannot decrypt and guess what
access policy was speciﬁed by the sender. In most of AABE schemes [5], [6], [7],
[8] the user is required to run the whole decryption algorithm to verify if he is
the intended receiver for the ciphertext, which creates a large overhead on the
user because the decryption procedure requires a number of expensive bilinear
pairings operations. In 2013, Zhang et al [1] proposed an eﬃcient mechanism to
address this issue by introducing a matching phase before decryption process.
Before decryption the user requires to perform the match procedure using his
secret key components to check if he is the intended recipient of the ciphertext.
We found that the scheme proposed in [1] does not provide receiver’s anonymity,
which is the main claim of the scheme. We show that how one (an attacker or
any legitimate user of the system) can ﬁnd if an attribute is included in the
access policy of the ciphertext, in turn, can deduce the identity/attribute of the
target receiver of the ciphertext.
The remainder of the paper is organized as follows. Section 2 gives some prelim-
inaries. Section 3 reviews Zhang et al ’s scheme. Section 4 presents the security
ﬂaws of Zhang et al ’s scheme. We conclude the paper in Section 5.
2 Preliminaries
2.1 Bilinear Mapping
Let G1 and G2 be two multiplicative cyclic groups of prime order p. Let g be a
generator of G1. We say G1 has an admissible bilinear map, e : G1 × G1 → G2,
into G2 if e satisﬁes the following properties:
- Bilinearity: for all u, v ∈ G1 and a, b ∈ Zp, e(ua, vb) = e(u, v)ab.
- Non-degeneracy: e(g, g) (cid:54)= 1.
2
- Computable: e is eﬃciently computable.
2.2 Complexity assumption
Discrete Logarithm Problem (DLP). Let p and q be two prime numbers
such that q|(p − 1). Let g be a random element with order q ∈ Z∗
p , and y be
a random element generated by g. Then, for any probabilistic polynomial time
algorithm B, the probability Pr[B(p, q, g, y) = x— such that gx = y mod p] is a
negligible advantage .
Decisional Bilinear Diﬃe-Hellman (BDH) Assumption. Let a, b, c, r ∈R
Zp be chosen at random and g be a generator of G1. The decisional BDH as-
sumption is that no probabilistic polynomial-time algorithm B can distinguish
the tuple (A = ga, B = gb, C = gc; e(g,g)abc) from the tuple (A = ga, B = gb,
C = gc, e(g,g)r) with more than a negligible advantage .
The advantage of B is Pr[B(A, B, C, e(g,g)abc) = 0] - Pr[B(A, B, C, e(g,g)r) =
0] = .
Decisional Linear (D-Linear) Assumption. Let z1, z2, z3,z4, r ∈ Zp be cho-
sen at random and g be a generator of G 1. We say that the D-Linear assumption
holds in G if no probabilistic polynomial-time algorithm B can distinguish the
tuple (g, Z1=gz1 , Z2=gz2 , Z3=gz1z3, Z4=gz2z4, T=gz3+z4 ) from the tuple (g,
Z1=gz1 , Z2= gz2, Z3= gz1z3, Z4=gz2z4, T=gr) with non-negligible advantage .
The advantage of B is Pr[B(Z1,Z2,Z3,Z4, e(g,g)z3+z4) = 0] - Pr[B(Z1,Z2,Z3,Z4,e(g,g)r)
= 0] = .
2.3 Access Structure
Let there are n attributes in the universe and each attribute i for all 1 ≤ i ≤ n
has value set Vi = {vi,1, vi,2,··· , vi,ni}. L = [L1, L2,··· , Ln] is an attribute
list, where each Li represents one value from the value set of attribute i. A
ciphertext policy W = [W1, W2,··· , Wn], where each Wi represents the set of
permissible values of an attribute i in order to decrypt the ciphertext or * in
case of don’t care attribute values. An access structure W is a rule that returns
1 when given a set L of attributes if L matches with W else it returns 0. An
attribute list L satisﬁes W , if Li ∈ Wi or Wi = * for all 1≤ i ≤ n.
3 Zhang et al’s Scheme
3.1 The Scheme Structure
The anonymous CP-ABE scheme proposed by Zhang et al consists of four algo-
rithms : Setup, KeyGen, Encrypt, and Decrypt.
- Setup(1λ) → (PK, MK ): The setup algorithm is run by the Attribute
Center, a trusted authority. On input a security parameter λ it returns
3
the system public key PK which is distributed to users, and the master
key MK which is kept secret.
- KeyGen(PK, MK, L) → SKL: This algorithm is also run by the Attribute
Center. On input the public key PK, the master key MK and an attribute
List L, it outputs SKL as the secret key associated with the attribute list
L.
- Encrypt(PK, M, W ) → CTW : This is a probabilistic algorithm that takes
input as the public key PK, a message M, and a ciphertext policy W, and
it outputs the ciphertext CTW with respect to W.
- Decrypt(PK, CTW , SKL) → M or ⊥: The decryption algorithm is de-
terministic and it involves two phases, attribute matching detection and
decryption algorithm. When a user inputs the system public key PK, a
ciphertext CTW and a secret key SKL associated with L, the decryption
phase proceeds as follows :
1. Matching Phase: If the attribute list L associated with SKL matches
with the ciphertext policy W of CTW then it invokes the Decryption
algorithm; else, it returns ⊥.
2. Decryption algorithm: The decryption algorithm returns the message
M.
3.2 Detailed Scheme
- Setup(1λ): Let G1, G2 be cyclic multiplicative groups of prime order p,
and e : G1 × G1 → G2 be a bilinear map. H :{0, 1}∗ → G1 is a function
that takes a string as input and outputs a member in G1. The attribute
center chooses y ∈R Zp, g, g1, g2 ∈R G1, and computes Y = e(g1, g2)y.
The system public key is PK = (cid:104)g, g1, g2, Y (cid:105) The master key M K is a
pair (cid:104)y(cid:105).
- KeyGen(PK, MK, L): Let L=[L1, L2,··· , Ln] be the attribute list for the
user who requires a secret key. The attribute center chooses r1, r2, ··· ,
i=1 ri mod p. Then, the attribute
i=1 ˆri
1]. For 1≤ i ≤ n, the attribute center
, gr
rn−1 ∈R Zp and computes rn = y - (cid:80)n−1
center chooses r ∈R Zp and { ˆri, λi, ˆλi ∈R Zp} 1≤i≤n, sets ˆr = (cid:80)n
2
and computes [ ˆD0, D∆,0 ] = [gy−ˆr
computes
[D∆,i, Di,0, Di,1, ˆDi,0, ˆDi,1] =
2 H(i(cid:107)vi,ki)r,gλi
[g ˆri
The secret key is
SKL = (cid:104) ˆD0, D∆,0, {D∆,i, Di,0, Di,1, ˆDi,0, ˆDi,1 }1≤i≤n(cid:105)
1 H(0(cid:107)i(cid:107)vi,ki)λi,g
2 ,gri
ˆλi
1 ,gri
2 H(1(cid:107)i(cid:107)vi,ki)ˆλi], where Li = vi,ki
4
1
1 , C1 = gs(cid:48)(cid:48)
2 , ˆC1 = gs−s(cid:48)(cid:48)
- Encrypt(PK, M, W ): For encryption of a message M with respect to
access control policy W, data owner selects s, s(cid:48), s(cid:48)(cid:48) ∈R Zp and computes ˜C
= MYs, C∆ = e(g, g)sY s(cid:48), C0 = gs, ˆC0 = gs(cid:48)
. Then,
for 1≤ i ≤ n and 1≤ j ≤ ni the encryptor computes [Ci,j,∆, Ci,j,0, ˆCi,j,0]
as follows:
If vi,j ∈ Wi then [Ci,j,∆, Ci,j,0, ˆCi,j,0] =
[H(i(cid:107)vi,j)s(cid:48), H(0(cid:107)i(cid:107)vi,j)s(cid:48)(cid:48), H(1(cid:107)i(cid:107)vi,j)s−s(cid:48)(cid:48)]
else, if vi,j /∈ Wi then [Ci,j,∆, Ci,j,0, ˆCi,j,0] will be random elements.
The encryptor prepares CTW =
(cid:104)C∆, C0, ˆC0, ˜C, C1, ˆC1, {{Ci,j,∆, Ci,j,0, ˆCi,j,0}1≤j≤ni}1≤i≤n(cid:105)
- Decrypt(PK, CTW , SKL): A user checks ﬁrst the matching phase and if