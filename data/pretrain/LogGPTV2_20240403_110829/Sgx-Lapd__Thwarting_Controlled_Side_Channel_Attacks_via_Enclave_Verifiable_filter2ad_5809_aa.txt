title:Sgx-Lapd: Thwarting Controlled Side Channel Attacks via Enclave Verifiable
Page Faults
author:Yangchun Fu and
Erick Bauman and
Raul Quinonez and
Zhiqiang Lin
SGX-LAPD: Thwarting Controlled Side Channel
Attacks via Enclave Veriﬁable Page Faults
Yangchun Fu1, Erick Bauman2(B), Raul Quinonez2, and Zhiqiang Lin2
1 Google Inc., Mountain View, USA
PI:EMAIL
2 The University of Texas at Dallas, Richardson, USA
{erick.bauman,raul.quinonez,zhiqiang.lin}@utdallas.edu
Abstract. To make outsourcing computing more practical,
Intel
recently introduced SGX, a hardware extension that creates secure
enclaves for the execution of client applications. With SGX, instruction
execution and data access inside an enclave are invisible to the under-
lying OS, thereby achieving both conﬁdentiality and integrity for out-
sourced computing. However, since SGX excludes the OS from its trusted
computing base, now a malicious OS can attack SGX applications, partic-
ularly through controlled side channel attacks, which can extract applica-
tion secrets through page fault patterns. This paper presents Sgx-Lapd,
a novel defense that uses compiler instrumentation and enclave veriﬁable
page fault to thwart malicious OS from launching page fault attacks. We
have implemented Sgx-Lapd atop Linux kernel 4.2.0 and LLVM 3.6.2.
Our experimental results show that it introduces reasonable overhead for
SGX-nbench, a set of SGX benchmark programs that we developed.
Keywords: SGX · Trusted Execution · Controlled channel attack ·
Page fault
1 Introduction
Trusted computing, or Trusted Execution Environment (TEE), is a foundational
technology to ensure conﬁdentiality and integrity of modern computing. Over
the past few decades, a considerable amount of research has been carried out to
search for practical ways for trusted computing, e.g., by using a formally veriﬁed
operating system (OS) [16], or using a virtual machine monitor (VMM), hypervi-
sor [9,25], system management mode (SMM) [30], and even BIOS [28] to monitor
the kernel and application integrity, or with hardware support [17]. Increasingly,
hardware based technologies for TEE (e.g., TPM [20], TrustZone [23]) have
rapidly matured. The most recent advancement in this direction is the Intel
Software Guard eXtensions (SGX) [13,18].
Electronic supplementary material The online version of this chapter (doi:10.
1007/978-3-319-66332-6 16) contains supplementary material, which is available to
authorized users.
c(cid:2) Springer International Publishing AG 2017
M. Dacier et al. (Eds.): RAID 2017, LNCS 10453, pp. 357–380, 2017.
DOI: 10.1007/978-3-319-66332-6 16
358
Y. Fu et al.
At a high level, SGX allows an application or part of an application to run
inside a secure enclave, which is an isolated execution environment. SGX hard-
ware, as a part of the CPU, prevents malicious software, including the OS, hyper-
visor, or even low-level ﬁrmware (e.g., SMM) from compromising its integrity
and secrecy. SGX provides opportunities for securing many types of software
such as system logs [15] and computer games [5]. The isolation enabled by
SGX is particularly useful in cloud computing, where customers cannot con-
trol the infrastructure owned by cloud providers. Haven [6] pioneered the idea of
enabling unmodiﬁed application binaries to run on SGX in a cloud by utilizing a
library OS [22]. VC3 [24] demonstrated privacy-aware data analytics in the cloud.
Ohrimenko et al. [19] presented a number of privacy preserving multi-party
machine learning algorithms running in SGX machines for cloud users, while
Chandra et al. [7] provide a more scalable solution on larger models using
randomization.
Unfortunately, since SGX excludes the OS kernel from its trusted computing
base, SGX enclave programs can certainly be attacked by the underlying OS. A
powerful demonstration of this is controlled channel attacks, which can extract
application secrets using the page fault patterns of an enclave’s execution [31].
In particular, by controlling the page table mappings of an enclave program, a
malicious OS can observe a number of patterns regarding an application’s page
access footprint, such as the number of page faults, the base virtual address
of the faulting pages, the sequence of page faults, and even the timing of page
faults. If an attacker also has the binary code of the enclave program, he or
she can recover a lot of secrets (e.g., text documents, outlines of JPEG images)
based exclusively on the page access patterns.
Given such a signiﬁcant threat from page-fault side channel attacks, it is
imperative to design new defenses. Thus in this paper we present Sgx-Lapd,
a system built atop both OS kernel and compilers to ensure that the LArge
Pages are veriﬁeD by the enclave (Lapd) and attacker triggered page faults are
detectable by the enclave itself. The key insight is that page-fault side channel
attacks are very eﬀective when the OS uses 4 KB pages; if we can enlarge the
page size, most programs will trigger few code page faults—and data page faults
can also be signiﬁcantly reduced (by three orders of magnitude if we use MB level
pages). Thus, the challenge lies in how to make sure that the OS has cooperated
and really provided large pages to the enclave programs.
Since the only trust for SGX programs is the underlying hardware and the
enclave code itself, we have to rely on the enclave program itself to verify whether
an OS indeed has provided large pages. As a page-fault attack often incurs signif-
icant delays during cross-page control ﬂow transfers, an intuitive approach would
be to detect the latency at each cross small-page control ﬂow transfer point. How-
ever, there is no reliable way of retrieving the hardware timing information inside
the enclave (e.g., RDTSC instruction is not supported in SGX v1 [14]), and mean-
while it can also be attacked by the OS. Note that RDTSC reads the Time-Stamp
Counter from the TSC MSR which can be modiﬁed by WRMSR instruction [3].
SGX-LAPD: Thwarting Controlled Side Channel Attacks
359
Also, the API sgx get trusted time provided by Intel SGX SDK is also only
available in simulation mode.
Interestingly, we notice that each enclave contains a data structure, EXINFO,
that tracks the page fault address if a page fault causes the enclave exit [14].
Therefore, we can detect whether an OS has indeed provided large pages by
traversing this data structure when there is a page fault. However, when to incur
a page fault is decided by the OS, and the enclave program has to deliberately
trigger a page fault for such a veriﬁcation. Therefore, if we can instrument the
enclave program to automatically inject a page access and then verify whether
a page fault was triggered by checking the EXINFO data structure, we can then
detect whether the underlying OS has cooperated. Sgx-Lapd is designed exactly
based on this idea.
We have implemented Sgx-Lapd atop a recent Linux kernel 4.2.0 and LLVM
3.6.2. Speciﬁcally, we implemented an OS kernel module to enable the OS to
support large page tables, and we implemented a compiler pass in LLVM to
recognize the cross small-page control ﬂow transfer points and insert the self-
veriﬁcation code. We have evaluated our system using a number of benchmarks.
In order to test Sgx-Lapd on actual SGX hardware, we had to port a bench-
mark, since there are no existing SGX programs to test. We therefore manually
created SGX-nbench, a modiﬁed version of nbench 2.2.3 running on real SGX
hardware. Our experimental results show that Sgx-Lapd introduces reasonable
performance overhead for the tested benchmarks.
In short, we make the following contributions:
– We present Sgx-Lapd, a system that uses large paging via kernel module and
self-veriﬁable page faults through compiler instrumented code to defeat the
controlled side channel attacks.
– We have also developed a new SGX benchmark suite SGX-nbench, for mea-
suring the performance overhead of real SGX programs.
– We have evaluated Sgx-Lapd with SGX-nbench and showed that it introduces
reasonable overhead for detecting both non-present and non-executable page
fault attacks.
2 Background and Related Work
In this section, we provide the background on the page fault side channel attacks
using a running example in Sect. 2.1, and then discuss the possible defenses and
related work in Sect. 2.2. Finally, we reveal how an enclave program handles
exceptions in Sect. 2.3, which comprises the basic knowledge in order to under-
stand our defense.
2.1 The Page-Fault Side Channel Attack
An SGX enclave program is executed in user mode (ring-3), and it has to ask
the underlying OS to provide resources such as memory, CPU, and I/O. As
360
Y. Fu et al.
such, this gives a hostile OS (ring-0) the opportunity to attack enclave pro-
grams from various vectors, such as manipulating system call execution (e.g.,
Iago [8] attacks) or controlling page fault access patterns to infer the secrets
inside enclave programs [31].
The virtual memory pages of a process are managed by the underlying OS.
Speciﬁcally, when launching a new process, the OS ﬁrst creates the page tables
and initializes the page table entries for virtual addresses speciﬁed in the appli-
cation binary. When a process is executed, if the corresponding virtual page
has not been mapped in the page table yet, a page fault exception will occur,
and the CPU will report the faulting address as well as the type of page access
(read or write) to the page fault handler, which will be responsible for mapping
the missing pages. When a process terminates, the OS will delete the virtual to
physical mappings and reclaims all the virtual pages.
Page faults for SGX processes are treated in the same way as regular
processes, with the only diﬀerence that the page fault handler can observe just
the base address of the faulting address. Therefore, by controlling the page table
mappings, a hostile OS can observe all of the page access patterns of a vic-
tim SGX process. If the attacker also has the detailed virtual address mappings
(e.g., when owning a copy of the SGX enclave binary), such a page fault attack
is extremely powerful as demonstrated by Xu et al. [31].
A Running Example. To understand clearly the nature of the page fault side
channel attack, we use example code from [31] as a running example to explain
how Sgx-Lapd works to defeat this attack. The source code of this example is
shown in Fig. 1(a). At a high level, this enclave program takes user input GENDER
and returns a welcome string based on whether the GENDER is MALE or FEMALE. To
show this program is vulnerable to the page fault attack, we compile its source
code using LLVM deliberately with the option “align-all-function=12” that
aligns each function at a 4 KB boundary. The resulting disassembled code for this
example is presented in Fig. 1(b), where ﬁve control ﬂow transfer instructions
inside WelcomeMessage are highlighted.
We can notice that a hostile OS can infer whether a user enters MALE
or FEMALE to the program by observing the page fault proﬁles. Speciﬁcally,
when all other pages except 0x404000 are marked unmapped:
if a subse-
quent page fault accesses page 0x403000 (for control ﬂow transfer “callq
WelcomeMessageForFemale”), then an attacker can infer GENDER is FEMALE; oth-
erwise an attacker can conclude GENDER is MALE when page 0x402000 is accessed.
2.2 Possible Defenses and Related Work
In the following, we examine various possible defenses. At a high level, we cate-
gorize them into hardware assisted and software based defenses.
Hardware-Assisted Defenses. As the hardware of a system is usually in the
TCB, it can be helpful to utilize the hardware to enforce security.
SGX-LAPD: Thwarting Controlled Side Channel Attacks
361
Fig. 1. Our running example.
– Enclave Managed Paging. A very intuitive approach is to allow the enclave
itself to manage the paging (i.e., self-paging [12]). Once the enclave has been
granted this capability, it can disable paging out sensitive pages, or enforce
large pages, etc.
– Hardware Enforced Contractual Execution. Recently, Shinde et al. [27]
proposed having the hardware enforce a contract between the application and
the OS. Such a contract states that the OS will leave a certain number of
pages in memory; if a page fault that violates the contract does occur, the
hardware reports the violation to the secure application.
While the hardware-assisted approaches sound appealing, they have to mod-
ify the hardware to add new mechanisms, such as securely delivering the page
fault address to the application page fault handler without relying on the OS.
In addition, hardware modiﬁcations require signiﬁcant time before widespread
adoption is possible.
362
Y. Fu et al.
Software-Based Defenses. Software defenses have signiﬁcant advantages over
hardware modiﬁcations, one of which is that they can work on existing platform.
We focus more on software defenses due to this. Note that software approaches
can have the freedom of rewriting the binary code or recompiling the program
source to add new capabilities on the enclave program. A number of defenses
can be designed:
– ORAM. ORAM [11,21] is a technique for hiding the memory contents and
access patterns of a trusted component from an untrusted component. Initially
it was a software obfuscation technique, but recently there has been increasing
interest in applying ORAM to build practical cloud storage. Theoretically,
ORAM can be applied to protect the page fault patterns, but ORAM has
large space requirements and high overhead.
– Normalization. Another approach is to make sensitive portions of the code
behave identically for all possible inputs. However, this is diﬃcult because
not only must all page accesses be identical, but also each execution branch
should take the same time to execute. Meanwhile, as demonstrated by Shinde
et al. [27] in their use of deterministic multiplexing to execute the sensitive
code, such an approach runs the risk of imposing extremely high overhead
(up to 4000X), as the execution of any path must also perform all the page
faults that every other path might make.
– Randomization and Noise Injection. Alternatively, if the code is hard to
normalize, then we can introduce randomization and noise to make attacks
harder. For instance, we can apply the same principle as ASLR [29] by per-
forming ﬁne-grained randomization (e.g., [4,10]) of code and data locations
to hide from an attacker what code or data is actually being accessed, or
inject noise into normal program behavior to hide legitimate page accesses
among random fake ones. However, the challenge lies in how to make the
randomization or noise indistinguishable from the normal page fault patterns.
– Detection. If an application is able to detect a controlled page fault attack,
then it has the ability to abort execution before an attacker can extract the
secret. However, the challenge lies in extracting the unique signatures for this
attack. Recently, T-SGX [26] leverages code instrumentation and Transac-
tional Synchronization Extensions (TSX) mechanism to detect whether there
is any exception occurs inside a transaction. Similar to T-SGX, we also take
a detection approach and we both use compiler instrumentation to insert the
detection logic. However, the diﬀerence is that T-SGX relies on TSX whereas
Sgx-Lapd does not depend on this hardware feature and instead it uses large
pages.
2.3 Exception Handling Inside SGX
Since a page fault is an exception and Sgx-Lapd needs to use some internal
enclave data structures for the defense, we would like to examine in greater
detail how SGX handles exceptions. The following study is based on the trace
from a real SGX platform by executing our instrumented running example and
conﬁrmed with the description from the SGX programming reference [14].
SGX-LAPD: Thwarting Controlled Side Channel Attacks
363
EXINFO
EXINFO
Page
Fault
Address
GPRSGX
SSA
SSA
XSAVE    
...
-16 EXINFO
EXINFO
0
GPRSGX
GS:0x20: GPRSGXbase
0x0: MADDR
0x8: ERRCD
0xC: RESERVED
By design, an exception will trigger
an asynchronous enclave exit (AEX),
and the CPU execution has to leave
the enclave and come back through
an ENTER or ERESUME instruction. In
general, there are 10 exceptions [14]
an SGX enclave can capture, and the
type of the exception is stored in
the EXITINFO.VECTOR ﬁeld, which is
at oﬀset 0xA0 in the GPRSGX region,
as illustrated in Fig. 2. Note that the
4 bytes of EXITINFO contain the infor-
mation that reports the exit reasons
(i.e., which exception) to the software
inside the enclave, and the ﬁrst byte is
the VECTOR ﬁeld. The GPRSGX region
holds the processor general purpose
registers as well as the AEX information. Among the 10 exceptions, we are
interested in GP, general protection fault, which is caused by illegal access, e.g.,
accessing thread control structure (TCS) inside an enclave and PF, the page
fault exception. Exceptions such as DV (divide by zero), BP (int 3 for debug-
ging), and UD (undeﬁned instruction, e.g., executing CPUID inside enclave) etc.,
are out of our interest, though they are all handled similarly as GP by the CPU.
Page Fault Exceptions. An exception is handled by system software ﬁrst,
and then by the application deﬁned code. A page fault exception can be entirely
handled by the system software (only requires 3 steps of execution), but other
exceptions such as GP, DV, or UD require 8 steps, as illustrated in Fig. 3.