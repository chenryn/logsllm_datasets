//CallJNIOnLoad.Wehavetooverride thecurrent class
850
//loader,which will always benull since the stuff at the
851
// topof the stack is around Runtime.loadLibrary().(See
852
//the comments in the JNI FindClassfunction.)
853
ScopedLocalRef old_class_loader(env, env->NewLocalRef(self->
GetClassLoaderOverride()));
854
self->SetClassLoaderOverride(class_loader);
855
856
VLOG(jni)(sym);
859
int version=(ini_on_load)(this,nullptr);
860
861
if（runtime_->GetTargetSdkVersion()!=0&&runtime_->GetTargetSdkVersion(
）SetClassLoaderOverride(old_class_loader.get();
866
867if (version ==JNI_ERR){
868StringAppendF(error_msg,“JNI_ERRreturned from JNI_OnLoad in \%sl
path.c_str();
869}elseif(IsBadJniVersion（version){
870StringAppendF(error_msg,“BadJNI version returned from JNI_OnLoad in \%
sl": %d",
871
path.c_str(),version);
872
/..
878}else{
879
was_successful = true;
880
881
VLOG(jni)SetResult(was_successful);
886return was_successful;
887}
简单解释一下上面的代码。
首先，声明一个SharedLibrary类型的指针library用于指向加载之
后的lib库文件，程序首先会检查目标ib库文件是否已经加载，如果已
经加载，则直接返回，如果未加载则会调用
android::OpenNativeLibrary函数进行加载。
android:OpenNativeLibrary函数位于/system/core/libnativeloader/
native_loader.cpp路径下，主要功能是调用Linker（Android系统中的
连接器）的dlopen函数加载lib库。
---
## Page 931
CTF特训营：技术详解、解题方法与
25.1.2JNI调用特征分析
931/1144
dlopen调用完成后，会使用library-
>FindSymbol("JNi_OnLoad"nullptr)命令查找lib库中是否有名为
JNI_OnLoad”的导出函数。如果没有，则返回；如果有，则调用它
然后判断它的返回值是否合法，如果返回值合法，则加载库函数成功
以上就是Java加载外部lib库的大概流程，我们不难看出其中包含
两个关键代码：一个是dlopen函数的调用，另一个是JNl_OnLoad函
数的调用。这两个调用都是能够被我们自定义的代码打断的。
对于dlopen调用，熟悉Linux系统编程的同学应该知道，dlopen调
用时会搜索自标lib文件代码中是否包含init_array段，如果包含这个
段，则dlopen会在加载的时候运行它。
对于JNI_OnLoad调用，如果lib文件中真有该导出函数，在加载
过程中会自动运行它。
因此，上述两个调用，是Android题目中中等难题和难题经常使
用的两个技术点，下面我们举个例子来看一下。
首先看一下JNI_OnLoad函数，如下代码是一个JNI_OnLoad函数
动态注册Native方法的示例：
---
## Page 932
CTF特训营：技术详解、解题方法与
25.1.2JNI调用特征分析
932/1144
#include
#include 
#include
#include 
#include
/* This is a trivial JNI example where we use a native method
*toretun anewVMString.SeethecorrespondingJava source
*file located at:
*
apps/samples/hello-jni/project/src/com/example/HelloJni/HelloJni.java
*/
jstring native_hello(JNIEnv*env,jobject thiz）
return（*env)->NewStringUTF(env，“动态注册JNI");
}
/**
方法对应表
*/
staticJNINativeMethod gMethods={
{"stringFromJNI",“(0Ljava/lang/String;"，（void*)native_hello}，/绑定
1*
为某一个类注册本地方法
*/
staticintregisterNativeMethods(JNIEnv*env
,constchar*className
JNINativeMethod*gMethods,int numMethods){
jclass clazz;
clazz =(*env)->FindClass(env, className);
if (clazz ==NULL){
return JNI_FALSE;
if ((*env)->RegisterNatives(env, clazz,gMethods,numMethods)GetEnv（vm,（void*)&env,JNI_VERSION_1_4）!=JNI_OK）{
return-1;
assert(envI=NULL);
if（!registerNatives(env)){/注册
return-1;
/成功
result = JNI_VERSION_1_4;
return result;
再来看一下init_array的内容，下面的范例能够在initarray中添加
内容，代码如下：
voidmy_init(void)
attribute（（constructor));
void my_init(void)
/Do something
---
## Page 934
CTF特训营：技术详解、解题方法与
25.1.2JNI调用特征分析
934/1144
同样，在这个代码段里运行（*env)->RegisterNatives函数，也可
以动态地增加Native调用。
综上所述，我们在解题过程中需要重点关注两个入口一
JNI_OnLoad函数和init_array段，重点关注一个函数一（env）
>RegisterNatives函数，那么所有动态注册的Native函数就尽在掌握
了。
在25.2节中，我们将学习高效的逆向ib库文件。
---
## Page 935
CTF特训营：技术详解、解题方法与
25.2使用IDAPro静态分析935/1144
25.2使用IDAPro静态分析
对于静态分析来说，最知名同时也是使用得最多的当属大名鼎鼎
的静态反汇编分析工具IDAPro了。IDAPro从6.1版本开始，提供了对
Android程序的逆同与动态调试功能。自前最新的lDAPro7.0已经内
置了AndroidNDK中关键数据结构的定义，已经可以不用添加外置
".h”头文件来解码AndroidNDK中的结构定义了。
因此，本节将主要介绍IDAPro在静态分析中的使用方法，其他
静态分析工具本节暂不介绍了，有兴趣的读者可以自行查看相关文
档。同样的，本节也不是IDAPro的入门教程，重点在介绍使用IDA
Pro逆向过程中用到的一些技巧。
按照做题的一般步骤，拿到APK文件后，通过unzip解压缩，在
ib目录下一般会看到相应的so文件，很显然，将这个so文件拖入IDA
Pro，我们的逆向旅程就正式开始了。
打开一个so文件的第一步，就是查看其导出表，即Exports选项
卡，查看是否有我们感兴趣的函数。根据25.1节的内容，我们感兴趣
的函数有两类，一类是标准的Native方法命名的函数，另一类是
---
## Page 936
CTF特训营：技术详解、解题方法与
25.2使用IDAPro静态分析
936/1144
JNI_OnLoad函数，如图25-1所示。
ID...
Pseud...
He.
ASt...
En..
Im...
Ex.
Name
Address
Ordinal
__aeabi_unwind_cpp_pro
0000256C
JN_OnLoad
000019B0
_aeabi_unwind_cpp_pr1
00002574
_aeabi_unwind_cpp_pr2
0000257C
_gnu_Unwind_Restore_VFP_D
00002914
_gnu_Unwind_Restore_VFP
00002904
gnu_Unwind_Restore_VFP_D_16_to_31
00002924
gnu_Unwind_Restore_WMMXD
00002934
_gnu_Unwind_Restore_WMMXC
000029BC
restore_core_regs
000028F0
Unwind_GetCFA
00001E30
团
gnu_Unwind_RaiseException
00001E38
gnu_Unwind_ForcedUnwind
00001EDC
_gnu_Unwind_Resume
00001EF8
_gnu_Unwind_Resume_or_Rethrow
00001F6C
_Unwind_Complete
00001F8C
_Unwind_DeleteException
00001F90
Lleuind vDc_Co
00001CAO
图25-1IDAPro查看导出表
在这个so文件中没有找到标准的Native方法命名的函数，但是找
到了JNI_OnLoad函数，双击该函数，如图25-2所示。
---
## Page 937
CTF特训营：技术详解、解题方法与
25.2使用IDAPro静态分析
937/1144
.text:000019B0
.text:000019B0
EXPORT JNI_OnLoad
.text:000019B0
.text:000019B0
.text:000019B0
var_10
-0x10
.text:000019B0
.tex6:00001980
var_c
-0xC
.text:000019B0
HSO
.text:000019B2
ADD
{R4,R6,R7,LR)
.text:000019B4
SUB
R7,
SP,#8
.text:000019B6
LDR
SP,
R1,
SP,
18
0x10006
.text:000019B8
MOVS
ADD
R4,
.text:000019BE
R1,
PC
stack_chk_guard_ptr
.text:000019c0
AOH
R2,
R4
text:000019c2
LDR
RI,
[R1]
stack_chk_guard
text:000019c4
text:000019c6
STR
LDR
R1,
R1,
[SP,#0x10+vax_C]
[R1]
.text:000019c8
LDR
R1,
text:000019c
LDR
R3.
[R1,+0x18]
[RO]
text:000019cC
text:000019CE
BLX
MOV
R1,
R3
SP
.text:000019D0
ZED
RO,
loc_19D8
.text:000019D2
MOV.W
text:000019D6
1oc_19E6
R4,
.text:000019D8
图25-2IDAPro查看JNI_OnLoad函数
在没有加入混淆的情况下，直接按F5键，就可以反编译成C语言
的形式（若不能反编译，请考虑一下是否定义了函数，在汇编语言的
第一句按p定义函数），效果如图25-3所示。
1intfastcall JNI_OnLoad（int al)
21
signedintvl;//r4@1
4
intv3//[sp+0h][bp-10h]@3
intresult;//r0@5
5
intv4;//[sp+4h][bp-Ch]é5
7
8
v1=65542;
6
（（）（（Z+E（OM））（（PTO△）（）uT）））F
10
1.1
v1=-1;
1.2
ET
else if（1sub_1900（v3)）
1 4
1.5
v1=-1;
16
1.7
result =_stack_chk_guard
18
V4:
19
result=v1;
20
return result;