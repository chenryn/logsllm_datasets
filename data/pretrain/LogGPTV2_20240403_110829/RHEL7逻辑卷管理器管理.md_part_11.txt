# lvconvert -m1 my_vg/my_lv
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices                      
  my_lv            100.00 my_lv_rimage_0(0),my_lv_rimage_1(0)
  [my_lv_rimage_0]        /dev/sde1(1)                 
  [my_lv_rimage_1]        /dev/sdf1(1)                 
  [my_lv_rmeta_0]         /dev/sde1(0)                 
  [my_lv_rmeta_1]         /dev/sdf1(0)
```
::: para
下面的命令将三向 RAID1 逻辑卷转换为双向 RAID1 逻辑卷，指定包含删除为
`/dev/sde1`{.literal} 映象的物理卷。
:::
``` screen
# lvconvert -m1 my_vg/my_lv /dev/sde1
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices                      
  my_lv            100.00 my_lv_rimage_0(0),my_lv_rimage_1(0)
  [my_lv_rimage_0]        /dev/sdf1(1)                 
  [my_lv_rimage_1]        /dev/sdg1(1)                 
  [my_lv_rmeta_0]         /dev/sdf1(0)                 
  [my_lv_rmeta_1]         /dev/sdg1(0)
```
:::
::: section
::: titlepage
### [⁠]{#LVM_CLI.html#RAID-imagesplit}4.4.3.5. 将 RAID 映像拆分为独立的逻辑卷 {.title}
:::
::: para
可拆分 RAID 逻辑卷映像，以便组成新的逻辑卷。这个拆分 RAID
映像的过程与拆分镜像逻辑卷冗余映像的过程一样，如 [第 4.4.4.2 节
"拆分镜像逻辑卷的冗余映象"](#LVM_CLI.html#mirror_split){.xref} 所述。
:::
::: para
拆分 RAID 映像的命令格式如下：
:::
``` screen
lvconvert --splitmirrors count -n splitname vg/lv [removable_PVs]
```
::: para
与从现有 RAID1 逻辑卷中删除 RAID 映像一样（如 [第 4.4.3.4 节 "更改现有
RAID1 设备中的映像数"](#LVM_CLI.html#RAID-upconvert){.xref}
所述），从该设备中间删除 RAID
数据子卷（及其关联元数据子卷）时，所有较高编号的映像都会向下填入该槽。因此组成
RAID 阵列的逻辑卷索引号不会破坏其整数顺序。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
如果该 RAID1 阵列未同步则无法拆分 RAID 映像。
:::
:::
:::
::: para
下面的示例演示了如何将双向 RAID1 逻辑卷 `my_lv`{.literal}
拆分为两个线性逻辑卷 `my_lv`{.literal} 和 `new`{.literal}。
:::
``` screen
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices                      
  my_lv             12.00 my_lv_rimage_0(0),my_lv_rimage_1(0)
  [my_lv_rimage_0]        /dev/sde1(1)                 
  [my_lv_rimage_1]        /dev/sdf1(1)                 
  [my_lv_rmeta_0]         /dev/sde1(0)                 
  [my_lv_rmeta_1]         /dev/sdf1(0)                 
# lvconvert --splitmirror 1 -n new my_vg/my_lv
# lvs -a -o name,copy_percent,devices my_vg
  LV      Copy%  Devices     
  my_lv          /dev/sde1(1)
  new            /dev/sdf1(1)
```
::: para
下面的示例演示了如何将三向 RAID1 逻辑卷 `my_lv`{.literal}
拆分为一个双向逻辑卷 `my_lv`{.literal} 和一个线性逻辑卷
`new`{.literal}。
:::
``` screen
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices                                     
  my_lv            100.00 my_lv_rimage_0(0),my_lv_rimage_1(0),my_lv_rimage_2(0)
  [my_lv_rimage_0]        /dev/sde1(1)                                
  [my_lv_rimage_1]        /dev/sdf1(1)                                
  [my_lv_rimage_2]        /dev/sdg1(1)                                
  [my_lv_rmeta_0]         /dev/sde1(0)                                
  [my_lv_rmeta_1]         /dev/sdf1(0)                                
  [my_lv_rmeta_2]         /dev/sdg1(0)                                
# lvconvert --splitmirror 1 -n new my_vg/my_lv
# lvs -a -o name,copy_percent,devices my_vg
  LV            Copy%  Devices                      
  my_lv            100.00 my_lv_rimage_0(0),my_lv_rimage_1(0)
  [my_lv_rimage_0]        /dev/sde1(1)                 
  [my_lv_rimage_1]        /dev/sdf1(1)                 
  [my_lv_rmeta_0]         /dev/sde1(0)                 
  [my_lv_rmeta_1]         /dev/sdf1(0)                 
  new                     /dev/sdg1(1)
```
:::
::: section
::: titlepage
### [⁠]{#LVM_CLI.html#raid-splitmerge}4.4.3.6. 拆分及合并 RAID 映象 {.title}
:::
::: para
可与 `lvconvert`{.command} 命令的 `--splitmirrors`{.option} 参数联合使用
`--trackchanges`{.option} 参数临时拆分 RAID1
阵列，同时跟踪所有变更。这样可稍后将该映象合并回该阵列，同时只重新同步那些将该映象拆分后阵列有变化的部分。
:::
::: para
`lvconvert`{.command} 命令拆分 RAID 映象的格式如下。
:::
``` screen
lvconvert --splitmirrors count --trackchanges vg/lv [removable_PVs]
```
::: para
使用 `--trackchanges`{.option} 参数拆分 RAID
映象时，可指定要拆分的映象，但不能更改要拆分的卷名称。另外，得到的卷有以下限制。
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    所创建新卷为只读。
    :::
-   ::: para
    无法重新定义新卷大小。
    :::
-   ::: para
    无法重新命名剩余阵列。
    :::
-   ::: para
    无法重新定义剩余的阵列大小。
    :::
-   ::: para
    可单独激活新卷及剩余的阵列。
    :::
:::
::: para
可通过随后执行附带 `--merge`{.option} 参数的 `lvconvert`{.command}
命令指定 `--trackchanges`{.option}
参数，以合并拆分的映象。合并该映象时，只重新同步拆分该映象后更改的那部分阵列。
:::
::: para
合并 RAID 映象的 `lvconvert`{.command} 命令格式如下。
:::
``` screen
lvconvert --merge raid_image
```
::: para
下面的示例创建了一个 RAID1
逻辑卷，然后从该卷中拆分出一个映象，同时跟踪剩余阵列的变化。
:::
``` screen
# lvcreate --type raid1 -m 2 -L 1G -n my_lv .vg
  Logical volume "my_lv" created
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices                                     
  my_lv            100.00 my_lv_rimage_0(0),my_lv_rimage_1(0),my_lv_rimage_2(0)
  [my_lv_rimage_0]        /dev/sdb1(1)                                
  [my_lv_rimage_1]        /dev/sdc1(1)                                
  [my_lv_rimage_2]        /dev/sdd1(1)                                
  [my_lv_rmeta_0]         /dev/sdb1(0)                                
  [my_lv_rmeta_1]         /dev/sdc1(0)                                
  [my_lv_rmeta_2]         /dev/sdd1(0)                                
# lvconvert --splitmirrors 1 --trackchanges my_vg/my_lv
  my_lv_rimage_2 split from my_lv for read-only purposes.
  Use 'lvconvert --merge my_vg/my_lv_rimage_2' to merge back into my_lv
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices                                     
  my_lv            100.00 my_lv_rimage_0(0),my_lv_rimage_1(0),my_lv_rimage_2(0)
  [my_lv_rimage_0]        /dev/sdb1(1)                                
  [my_lv_rimage_1]        /dev/sdc1(1)                                
  my_lv_rimage_2         /dev/sdd1(1)                                
  [my_lv_rmeta_0]         /dev/sdb1(0)                                
  [my_lv_rmeta_1]         /dev/sdc1(0)                                
  [my_lv_rmeta_2]         /dev/sdd1(0)
```
::: para
下面的示例演示了从
RAID1卷中拆分出一个映象，同时追踪剩余阵列的变化，然后将该卷合并回该阵列。
:::
``` screen
# lvconvert --splitmirrors 1 --trackchanges my_vg/my_lv
  lv_rimage_1 split from my_lv for read-only purposes.
  Use 'lvconvert --merge my_vg/my_lv_rimage_1' to merge back into my_lv
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices                      
  my_lv            100.00 my_lv_rimage_0(0),my_lv_rimage_1(0)
  [my_lv_rimage_0]        /dev/sdc1(1)                 
  my_lv_rimage_1          /dev/sdd1(1)                 
  [my_lv_rmeta_0]         /dev/sdc1(0)                 
  [my_lv_rmeta_1]         /dev/sdd1(0)                 
# lvconvert --merge my_vg/my_lv_rimage_1
  my_vg/my_lv_rimage_1 successfully merged back into my_vg/my_lv
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices                      
  my_lv            100.00 my_lv_rimage_0(0),my_lv_rimage_1(0)
  [my_lv_rimage_0]        /dev/sdc1(1)                 
  [my_lv_rimage_1]        /dev/sdd1(1)                 
  [my_lv_rmeta_0]         /dev/sdc1(0)                 
  [my_lv_rmeta_1]         /dev/sdd1(0)
```
::: para
从 RAID1 卷中拆分出映象后，再次运行 `lvconvert --splitmirrors`{.command}
命令，即重复最初用来拆分该映象的 `lvconvert`{.command} 命令，但不指定
`--trackchanges`{.option} 参数，即可永久获得该拆分。这样会破坏
`--trackchanges`{.option} 参数生成的链接。
:::
::: para
使用 `--trackchanges`{.option}
参数拆分映象后，则无法在那个阵列中继续使用
`lvconvert --splitmirrors`{.command} 命令，除非要永久拆分所跟踪的映象。
:::
::: para
下面的一系列命令可拆分映象，并跟踪该映象，然后永久拆分那个跟踪的映象。
:::
``` screen
# lvconvert --splitmirrors 1 --trackchanges my_vg/my_lv
  my_lv_rimage_1 split from my_lv for read-only purposes.
  Use 'lvconvert --merge my_vg/my_lv_rimage_1' to merge back into my_lv
# lvconvert --splitmirrors 1 -n new my_vg/my_lv
# lvs -a -o name,copy_percent,devices my_vg
  LV   Copy%  Devices     
  my_lv          /dev/sdc1(1)
  new            /dev/sdd1(1)
```
::: para
注：但以下命令系列会失败。
:::
``` screen
# lvconvert --splitmirrors 1 --trackchanges my_vg/my_lv
  my_lv_rimage_1 split from my_lv for read-only purposes.
  Use 'lvconvert --merge my_vg/my_lv_rimage_1' to merge back into my_lv
# lvconvert --splitmirrors 1 --trackchanges my_vg/my_lv
  Cannot track more than one split image at a time
```
::: para
同样，下面的命令系列也会失败，因为拆分的映象不是跟踪的映象。
:::
``` screen
# lvconvert --splitmirrors 1 --trackchanges my_vg/my_lv
  my_lv_rimage_1 split from my_lv for read-only purposes.
  Use 'lvconvert --merge my_vg/my_lv_rimage_1' to merge back into my_lv
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices                      
  my_lv            100.00 my_lv_rimage_0(0),my_lv_rimage_1(0)
  [my_lv_rimage_0]        /dev/sdc1(1)                 
  my_lv_rimage_1          /dev/sdd1(1)                 
  [my_lv_rmeta_0]         /dev/sdc1(0)                 
  [my_lv_rmeta_1]         /dev/sdd1(0)                 
# lvconvert --splitmirrors 1 -n new my_vg/my_lv /dev/sdc1
  Unable to split additional image from my_lv while tracking changes for my_lv_rimage_1
```
:::
::: section
::: titlepage
### [⁠]{#LVM_CLI.html#raid-faultpolicy}4.4.3.7. 设定 RAID 错误策略 {.title}
:::
::: para
LVM RAID 根据 `lvm.conf`{.filename} 文件中 `raid_fault_policy`{.literal}
字段所定义的属性，以自动方式处理设备失败。
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    如果将 `raid_fault_policy`{.literal} 字段设定为
    `allocate`{.literal}，则系统会尝试使用该卷组中的可用设备替换失败的设备。如果没有可用的剩余设备，则会在系统日志中记录。
    :::
-   ::: para
    如果将 `raid_fault_policy`{.literal} 字段设定为
    `warn`{.literal}，则该系统会生成警告，并在日志中记录该设备已失败。这样可让用户决定要采取的行动。
    :::
:::
::: para
只要有足够的设备可供使用，RAID 逻辑卷就会继续运行。
:::
::: section
::: titlepage
#### [⁠]{#LVM_CLI.html#raid-allocate-faultpolicy}4.4.3.7.1. allocate RAID 错误策略 {.title}
:::
::: para
在下面的示例中，已在 `lvm.conf`{.filename} 文件中将
`raid_fault_policy`{.literal} 字段设定为 `allocate`{.literal}。RAID
逻辑卷的布局如下。
:::
``` screen
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices                                     
  my_lv            100.00 my_lv_rimage_0(0),my_lv_rimage_1(0),my_lv_rimage_2(0)
  [my_lv_rimage_0]        /dev/sde1(1)                                
  [my_lv_rimage_1]        /dev/sdf1(1)                                
  [my_lv_rimage_2]        /dev/sdg1(1)                                
  [my_lv_rmeta_0]         /dev/sde1(0)                                
  [my_lv_rmeta_1]         /dev/sdf1(0)                                
  [my_lv_rmeta_2]         /dev/sdg1(0)
```
::: para
如果 `/dev/sde`{.filename} 设备失败，则系统日志中会显示出错信息。
:::
``` screen
# grep lvm /var/log/messages 
Jan 17 15:57:18 bp-01 lvm[8599]: Device #0 of raid1 array, my_vg-my_lv, has failed.
Jan 17 15:57:18 bp-01 lvm[8599]: /dev/sde1: read failed after 0 of 2048 at
250994294784: Input/output error
Jan 17 15:57:18 bp-01 lvm[8599]: /dev/sde1: read failed after 0 of 2048 at
250994376704: Input/output error
Jan 17 15:57:18 bp-01 lvm[8599]: /dev/sde1: read failed after 0 of 2048 at 0:
Input/output error
Jan 17 15:57:18 bp-01 lvm[8599]: /dev/sde1: read failed after 0 of 2048 at
4096: Input/output error
Jan 17 15:57:19 bp-01 lvm[8599]: Couldn't find device with uuid
3lugiV-3eSP-AFAR-sdrP-H20O-wM2M-qdMANy.
Jan 17 15:57:27 bp-01 lvm[8599]: raid1 array, my_vg-my_lv, is not in-sync.
Jan 17 15:57:36 bp-01 lvm[8599]: raid1 array, my_vg-my_lv, is now in-sync.
```
::: para
因为已将 `raid_fault_policy`{.literal} 字段设定为
`allocate`{.literal}，因此会使用该卷组中的新设备替换失败的设备。
:::
``` screen
# lvs -a -o name,copy_percent,devices vg
  Couldn't find device with uuid 3lugiV-3eSP-AFAR-sdrP-H20O-wM2M-qdMANy.
  LV            Copy%  Devices                                     
  lv            100.00 lv_rimage_0(0),lv_rimage_1(0),lv_rimage_2(0)
  [lv_rimage_0]        /dev/sdh1(1)                                