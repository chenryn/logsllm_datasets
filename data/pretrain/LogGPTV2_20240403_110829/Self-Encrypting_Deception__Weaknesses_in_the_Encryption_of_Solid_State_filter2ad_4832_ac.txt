a similar fashion; i.e. no derivation of the DEK from the
password. Each locking range is encrypted with a unique key.
These keys are stored encrypted using a single key, effectively
negating the potential advantages of unique per-range keys.
Other ﬁndings All key material is generated by entropy
generating hardware, which the ﬁrmware refers to as a TRNG.
All information related to full-disk encryption is stored in SPI
ﬂash, with no wear leveling applied. Several vendor-speciﬁc
commands were encountered that allow engineers to diagnose
the device. A non-exhaustive list is given in Appendix A.
The Crucial MX200 is a SATA SSD released in 2015.
It
is essentially an MX100 with some write performance
advantages. The MX200 is built around the same 88SS9189
controller. The ﬁrmware is very similar to that of the MX100.
In terms of the issues listed in section IV,
the MX200
performs identical to the MX100. It too suffers from the lack
of derivation of the DEK from the password. Furthermore,
the vendor-speciﬁc commands found in the MX100 are also
present in the MX200 (see Appendix A).
Attack strategy: The attack strategy is identical to that of
the MX100. See Section VI-A.
C. Crucial MX300
The Crucial MX300 is a SATA SSD released in 2016.
Similar to both its predecessors, it supports the ATA security
feature set, as well as TCG Opal version 1 and 2. The MX300
is ﬁtted with a Marvell 88SS1074 controller, the successor to
the 88SS9189. The MX300 differs from its predecessors in
some aspects, including the controller’s JTAG feature being
switched off, and the code related to cryptography being
subject to a major revision.
Debugging: A ﬁrmware image can be obtained through
Micron’s website. Hence, it can be analyzed. As stated in
Section V-A2, JTAG allows for low level monitoring and
control of the storage controller’s CPU. It signiﬁcantly aids
the analysis, as it allows for veriﬁcation of assumptions and
ﬁndings, and possibly exploitation of weaknesses. Hence,
absence of this feature is problematic. Therefore, we used the
strategies listed in Section V-B2 in order to gain arbitrary
code execution on the device. We found that the vendor-
speciﬁc commands present in the MX100 and MX200 are still
present. However, since the MX300, the unlock mechanism
(cid:24)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:15 UTC from IEEE Xplore.  Restrictions apply. 
88SS1074 Boot ROM code
SPI ﬂash code
Incoming Password#2
PBKDF2
Key#2
Range key (DEK) table
Load stage 2 from SPI ﬂash
Success
Fail
Load ﬁrmware from NAND
Fail
Success
Salt#2
Ciphertext#2
Transfer control to ﬁrmware
Boot failure
Fig. 1. Crucial MX300 boot process.
Credential table
Decrypt
is replaced by one that relies on asymmetric cryptographic
signatures. Hence,
the vendor commands no longer serve
as a vehicle for unsigned code execution. Furthermore, we
identiﬁed several memory corruption vulnerabilities, however
we could not exploit them to gain control over the execution.
We have acquired arbitrary code execution by manipulating
the device’s SPI ﬂash, which is described below.
Findings: We used an external SPI communication device
to communicate with the drive’s SPI ﬂash chip, allowing its
contents to be retrieved and manipulated. In order to leverage
this into unsigned code execution, we must ﬁrst understand the
drive’s boot process, which we reverse engineered. A diagram
depicting the boot process is given in Figure 1. Once the
storage controller is powered on, the ﬁrst instructions executed
by its CPU are located in a ROM, embedded within the
controller. The ROM code loads its next stage, which we refer
to as stage 2, from the SPI ﬂash, located on the drive’s PCB.
Stage 2 is responsible for retrieving the drive’s ﬁrmware from
NAND, and then transfering control to it. Hence, by modifying
the stage 2 code, one can (indirectly) change the behavior
of the drive’s ﬁrmware. I.e., by injecting code at a particular
location so that it runs after the ﬁrmware is retrieved from
NAND, but before transfering control to it. This way, one can,
for example, remove cryptographic signature checks applied
during a ﬁrmware update.
Ideally, we would like to have the capability of reading,
writing and executing arbitrarily within the drive’s address
space. We crafted a modiﬁed ﬁrmware image, which includes
these capabilities, and installed it by means of the aforemen-
tioned cryptographic signature circumvention technique. Once
the process is completed, we have these capabilities.
Key derivation scheme We have reverse engineered the key
derivation scheme of the MX300. It is depicted in Figure 2.
Unlike its predecessors, the MX300 derives the DEK from the
password.
Each MX300 drive has a per-device unique key, which
we refer to as the device key. It
is stored in one-time-
programmable memory contained within the controller. As
such, an attacker is unable to obtain it, unless he has the ability
to execute arbitrary code on the controller’s CPU.
As is mandated by Opal, the scheme allows for multiple
credentials and ranges. Each credential has a data structure
associated stored within the SPI ﬂash. This is what we
refer to as the credential table. Entries within this table are
encrypted using the device key. Each entry contains a salt and
a ciphertext. The random salt and the user-supplied password
are fed to PBKDF2. The result is then used as a key in an
attempt to decrypt the ciphertext. If the password is correct,
the decrypted result is the RDS key (referred to by the ﬁrmware
Decrypt
RDS Key
Decrypt
Protected Range Key#0
Protected Range Key#1
Protected Range Key#2
Protected Range Key#3
Unprotected Range Key#4
...
Range Key#3
Device Key
Decrypt
Range Key#4
Stored Credential#0
Stored Credential#1
Stored Credential#2
Stored Credential#3
Stored Credential#4
...
Fig. 2. Scheme used to obtain a range key (DEK) from the user-supplied
password. In this example, credential #2 is used to unlock range #3.
as such). All stored credentials yield the same RDS key.
Each locking range is protected with its own unique DEK.
The DEKs are stored in the, what we refer to as, range key ta-
ble. All keys corresponding to protected ranges (i.e. requiring
a password before becoming accessible) are encrypted using
the RDS key. All other DEKs are encrypted using the device
key and are therefore always accessible.
From the description given above, we can already see that
the RDS key can be obtained once only a single password
is known. Subsequently, the RDS key allows access to all
protected ranges. The drive will refuse to unlock a range for
a user who does not have permission to access it. However,
this check is not cryptographically enforced. This is already a
weakness in the design of the key derivation scheme. However,
we found that even a single password need not be known,
which we explain in detail below.
Opal Setup
During the set-up phase of TCG Opal, the
credential table and range key table are populated. In order
to better understand this process, we used our arbitrary write
capabilities to inject tracing functionality at various places
in the ﬁrmware. The execution trace generated during the
BitLocker set-up phase is given in Appendix D. If sedutil
is used instead of BitLocker, the result is similar. Pseudocode
for some of the routines captured is given in Appendix C.
From the execution trace, we can clearly see that once the
BitLocker set-up phase is completed, the RDS key is protected
(encrypted) with a zero buffer as a password, and stored in all
credential table slots between 11 and 29, with the exception
of slot 15. Hence, the RDS key can be recovered from any of
these slots, by invoking the VerifyPasswd on one of them. We
use our unsigned code execution capability to do so. As such,
this allows any DEK to be decrypted without a password.
ATA security
the MASTER
PASSWORD CAPABILITY bit determines whether the factory-
set Master password may unlock the drive. In order for
the end user to prevent using the Master password, (s)he
either has to set the MASTER PASSWORD CAPABILITY bit to
Maximum, or change the Master password. In the case of the
MX300, the former approach is insufﬁcient. We found that
As stated in Section II-B,
(cid:24)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:15 UTC from IEEE Xplore.  Restrictions apply. 
the Master password allows for successful decryption of the
RDS key, regardless of the MASTER PASSWORD CAPABILITY
bit. Hence, in case the end user has set it to Maximum, but
has not changed the Master password, the drive’s contents is
still accessible to anyone in possession of the default Master
password. In the case of the MX300, this is an empty string.
Other ﬁndings
Similar to the MX100 and MX200, keys
are randomly generated by a hardware RNG. All information
related to full-disk encryption is stored in SPI ﬂash, with no
wear leveling applied.
Attack strategy: In order to recover the data from a locked
MX300 drive, we ﬁrst install a modiﬁed ﬁrmware that in-
cludes arbitrary read/write/execute capabilities. The process
is described in detail in Section VI-C. The following steps
describe how to recover the data from a drive that is set up
through TCG Opal, or ATA security, respectively.
TCG Opal We use our custom ﬁrmware’s arbitrary write
and execute capability in order to write executable code in the
device’s address space and execute it. Our code invokes the
VerifyPasswd function with a zero buffer as password, using
credential slot 11 and with bExtractRdsKey set to true. At
this point, the RDS key is recovered, allowing for all DEKs
to be decrypted. By using the arbitrary write capability once
more, we modify the VerifyPasswd function such that it always
returns SUCCESS. Note that by doing so, the function will
no longer affect the global RDS key buffer, which is desired
behavior since it already contains the correct key. At this point,
any password can be used to ‘authenticate’ successfully. Note
that permission checks are still enforced. However, we can
impersonate any desired user.
ATA security We use the arbitrary write capability in order
to change the MASTER PASSWORD CAPABILITY bit in RAM
from Max (1) to High (0). Then, we authenticate to the drive
as normal, using an empty string as the Master password, and
unlock the drive. Note that this approach will not work in
case ATA security is used instead of Opal, with the Master
password changed rather than disabled. However, we believe
only a small minority of full-disk encryption users will fall
under this category.
D. Sandisk X600
The Sandisk X600 is a SATA SSD released in Decem-
ber 2017. It
is built around the same Marvell 88SS1074
controller as the Crucial MX300. The X600 supports both
ATA security and TCG Opal version 2. Firmware updates
are distributed through Sandisk’s SSD Dashboard tool. By
reverse engineering this tool we gained the opportunity to
download ﬁrmware images for all Sandisk SSDs, including the
X600. However, the X600’s ﬁrmware image is encrypted and
decryption is performed within the drive itself. The controller’s
JTAG feature is switched off by Sandisk, thus recovery of the
encryption keys is not straightforward.
Since the X600 is built around the same controller as the
Crucial MX300, its boot process is similar: a bootstrap image
located in ROM retrieves stage 2 from an SPI ﬂash chip
(see Figure 1). By manipulating the stage 2 code with an
(cid:24)(cid:26)
external reader, the drive can be re-programmed to expose
its ﬁrmware encryption keys, or its main ﬁrmware as a whole.
Contrary to the MX300, however, the X600 has the controller’s
cryptographic signature validation feature enabled over stage
2. Therefore, modifying it will invalidate its signature, and the
controller will refuse to execute it.
We obtained a copy of the 88SS1074 boot ROM by extract-
ing it from our Crucial MX300. Subsequent analysis revealed
a weakness, which exists within all 88SS1074 controllers, that
allows us to bypass this cryptographic signature validation. As
such, unsigned code execution can be obtained on all drives
based on this controller, including the X600. No further details
about this weakness will be disclosed in this paper, as they are
under responsible disclosure embargo at time of publication.
We extracted the ﬁrmware from the drive by exploiting the
abovementioned weakness (combined with injecting additional
code) so that, once the ﬁrmware has been retrieved from ﬂash
and decrypted, it is copied into the SPI ﬂash. The ﬁrmware
can then be retrieved with an external reader.
Findings: As stated above,
the boot-time cryptographic
signature validation feature can be bypassed. This can not only
be leveraged into obtaining a copy of the ﬁrmware, but also
into full control over the device. We used the opportunity of
manipulating stage 2 to insert modiﬁcations into the ﬁrmware,
so that the device accepts an ATA command allowing for
reading, writing, and executing within the device’s address
space. This functionality greatly beneﬁts our analysis, as it
allows the device’s memory to be inspected and manipulated
at runtime. We found that the X600 derives the DEK from the
user password. However, other severe issues exist allowing for
the full-disk encryption to be compromised in many situations.
TCG Opal. Although the X600 shares no code with the
Crucial MX300, the design pattern behind its Opal imple-
mentation is similar: all passwords allow for a single key
(RDS key in Crucial terminology, we continue to use this
term here) to be obtained, which allows the DEK associated
with any range to be decrypted (see Figure 2). Contrary to
the MX300, the code does not follow alternative paths for
protected versus unprotected ranges. Thus, in case one or more
unprotected ranges exists, the RDS key must be available in
order to support this use case. The drive does this by keeping
a so-called anonymous key-encrypting-key (KEK), which is
essentially the RDS key encrypted with a zero buffer. We
found that the anonymous KEK is absent only in case a the
global range is the only range deﬁned, and it is password
protected. Any other conﬁguration causes the anonymous KEK
to be present, effectively reducing the security to the equivalent
of no encryption.
ATA security. We found that, in case the drive’s full-disk
encryption is conﬁgured by means of ATA security, the user-
supplied password (be it a user or master password) is used in
a scheme that yields the RDS key. However, we also found that
the anonymous KEK remains present within ﬁle 97 (see below)
at all times. As such, no password is required in order to access
the drive’s contents. Moreover, in case the user upgrades from
high to max mode, cryptographic key information allowing
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:15 UTC from IEEE Xplore.  Restrictions apply. 
the RDS key to be derived from the master password is not
erased. Therefore, the master password still serves as a means
to access the drive’s contents.
Wear leveling The X600 stores settings and other internal
data in a small internal ﬁle system. The ﬁle system uses ﬁle
numbers rather than names, but apart from this pecularity,
functionality seems to be similar to any other ﬁle system. The
ﬁle system has a wear leveling feature built-in. File number
97 contains all information related to cryptography.
We used our arbitrary write primitive to alter the behavior
of a function issued by the ﬁle system driver that retrieves
data from the raw ﬂash. We did so such that, besides its
normal behavior, its arguments (block number, die number,
plane number, etc.) are stored in a buffer, so that they can
later be inspected. Through this we learned that each time ﬁle
97 is written to, its physical location within ﬂash changes.
However, in case the anonymous KEK is removed from ﬁle
97, the drive immediately issues a routine referred to as ﬁle
system compaction, which erases previous copies of any ﬁle