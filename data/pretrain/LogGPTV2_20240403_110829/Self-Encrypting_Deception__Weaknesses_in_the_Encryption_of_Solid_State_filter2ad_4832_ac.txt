### Key Derivation and Encryption Mechanisms

In a similar fashion, the Data Encryption Key (DEK) is not derived from the password. Each locking range is encrypted with a unique key, which are then stored in an encrypted form using a single key. This effectively negates the potential advantages of having unique per-range keys.

### Other Findings

All key material is generated by hardware-based entropy sources, referred to as a True Random Number Generator (TRNG). All information related to full-disk encryption is stored in SPI flash without wear leveling. Several vendor-specific commands were discovered that allow engineers to diagnose the device. A non-exhaustive list of these commands is provided in Appendix A.

### Crucial MX200

The Crucial MX200, a SATA SSD released in 2015, is essentially an upgraded version of the MX100, offering improved write performance. It uses the same 88SS9189 controller and has firmware very similar to the MX100. The MX200 shares the same issues as the MX100, including the lack of DEK derivation from the password. Additionally, the vendor-specific commands found in the MX100 are also present in the MX200 (see Appendix A).

**Attack Strategy:**
The attack strategy for the MX200 is identical to that of the MX100. Refer to Section VI-A for details.

### Crucial MX300

The Crucial MX300, a SATA SSD released in 2016, supports the ATA security feature set and TCG Opal versions 1 and 2. It is equipped with a Marvell 88SS1074 controller, the successor to the 88SS9189. The MX300 differs from its predecessors in several aspects, including the disabling of the JTAG feature and a major revision of the cryptographic code.

**Debugging:**
A firmware image can be obtained from Micron’s website, allowing for analysis. As mentioned in Section V-A2, JTAG facilitates low-level monitoring and control of the storage controller’s CPU, aiding in the verification of assumptions and findings, and potentially exploiting weaknesses. The absence of this feature is problematic. Therefore, we used the strategies listed in Section V-B2 to gain arbitrary code execution on the device. We found that the vendor-specific commands present in the MX100 and MX200 are still available. However, the unlock mechanism now relies on asymmetric cryptographic signatures, rendering the vendor commands ineffective for unsigned code execution. We identified several memory corruption vulnerabilities but could not exploit them to gain control over the execution. We achieved arbitrary code execution by manipulating the device’s SPI flash, as described below.

**Findings:**
We used an external SPI communication device to interact with the drive’s SPI flash chip, allowing us to retrieve and manipulate its contents. To leverage this into unsigned code execution, we reverse-engineered the drive’s boot process, depicted in Figure 1. Upon power-on, the storage controller's CPU executes instructions from a ROM embedded within the controller. The ROM code loads stage 2 from the SPI flash, which in turn retrieves the drive’s firmware from NAND and transfers control to it. By modifying stage 2, one can indirectly change the behavior of the drive’s firmware. For example, by injecting code at a specific location, one can remove cryptographic signature checks during a firmware update.

Ideally, we would like to have the capability to read, write, and execute code arbitrarily within the drive’s address space. We crafted a modified firmware image with these capabilities and installed it using the aforementioned cryptographic signature circumvention technique. Once completed, we have these capabilities.

**Key Derivation Scheme:**
We reverse-engineered the key derivation scheme of the MX300, as shown in Figure 2. Unlike its predecessors, the MX300 derives the DEK from the password. Each MX300 drive has a per-device unique key, referred to as the device key, stored in one-time-programmable memory within the controller. An attacker cannot obtain this key unless they can execute arbitrary code on the controller’s CPU.

As mandated by Opal, the scheme allows for multiple credentials and ranges. Each credential has a data structure stored in the SPI flash, known as the credential table. Entries in this table are encrypted using the device key. Each entry contains a salt and a ciphertext. The random salt and the user-supplied password are fed to PBKDF2, and the result is used to decrypt the ciphertext. If the password is correct, the decrypted result is the RDS key. All stored credentials yield the same RDS key. Each locking range is protected with a unique DEK. The DEKs are stored in the range key table. Keys for protected ranges are encrypted using the RDS key, while other DEKs are encrypted using the device key and are always accessible.

From the above description, it is evident that the RDS key can be obtained once a single password is known, allowing access to all protected ranges. The drive will refuse to unlock a range for a user who does not have permission, but this check is not cryptographically enforced, which is a weakness in the design. We found that even a single password need not be known, as detailed below.

**Opal Setup:**
During the setup phase of TCG Opal, the credential table and range key table are populated. To better understand this process, we injected tracing functionality at various points in the firmware. The execution trace generated during the BitLocker setup phase is provided in Appendix D. Pseudocode for some of the captured routines is given in Appendix C. From the execution trace, we observed that after the BitLocker setup, the RDS key is protected with a zero buffer as a password and stored in all credential table slots between 11 and 29, except slot 15. Thus, the RDS key can be recovered from any of these slots by invoking the VerifyPasswd function on one of them. Using our unsigned code execution capability, we can decrypt any DEK without a password.

**ATA Security:**
The MASTER PASSWORD CAPABILITY bit determines whether the factory-set Master password can unlock the drive. To prevent the use of the Master password, the end user must either set the MASTER PASSWORD CAPABILITY bit to Maximum or change the Master password. In the case of the MX300, setting the bit to Maximum is insufficient. We found that the Master password allows for successful decryption of the RDS key, regardless of the MASTER PASSWORD CAPABILITY bit. If the end user sets it to Maximum but does not change the Master password, the drive’s contents remain accessible to anyone with the default Master password, which is an empty string.

**Other Findings:**
Similar to the MX100 and MX200, keys are randomly generated by a hardware RNG. All information related to full-disk encryption is stored in SPI flash without wear leveling.

**Attack Strategy:**
To recover data from a locked MX300 drive, we first install a modified firmware with arbitrary read/write/execute capabilities. The process is detailed in Section VI-C. The following steps describe how to recover data from a drive set up through TCG Opal or ATA security, respectively.

- **TCG Opal:**
  - Use the custom firmware’s arbitrary write and execute capability to write executable code in the device’s address space.
  - Invoke the VerifyPasswd function with a zero buffer as the password, using credential slot 11 and setting bExtractRdsKey to true.
  - Recover the RDS key, allowing all DEKs to be decrypted.
  - Modify the VerifyPasswd function to always return SUCCESS, ensuring the global RDS key buffer remains unaffected.
  - Any password can now be used to authenticate successfully, though permission checks are still enforced.

- **ATA Security:**
  - Use the arbitrary write capability to change the MASTER PASSWORD CAPABILITY bit in RAM from Max (1) to High (0).
  - Authenticate to the drive using an empty string as the Master password and unlock the drive.
  - Note that this approach will not work if the Master password is changed rather than disabled, but we believe only a small minority of full-disk encryption users fall under this category.

### Sandisk X600

The Sandisk X600, a SATA SSD released in December 2017, is built around the same Marvell 88SS1074 controller as the Crucial MX300. It supports both ATA security and TCG Opal version 2. Firmware updates are distributed through Sandisk’s SSD Dashboard tool. By reverse-engineering this tool, we gained access to firmware images for all Sandisk SSDs, including the X600. However, the X600’s firmware image is encrypted, and decryption is performed within the drive itself. The controller’s JTAG feature is disabled, making key recovery challenging.

Since the X600 uses the same controller as the Crucial MX300, its boot process is similar: a bootstrap image in ROM retrieves stage 2 from an SPI flash chip (see Figure 1). By manipulating the stage 2 code with an external reader, the drive can be reprogrammed to expose its firmware encryption keys or the main firmware. Unlike the MX300, the X600 has cryptographic signature validation enabled for stage 2, so modifying it will invalidate the signature, and the controller will refuse to execute it.

We obtained a copy of the 88SS1074 boot ROM from a Crucial MX300 and identified a weakness in all 88SS1074 controllers that allows bypassing the cryptographic signature validation. This enables unsigned code execution on all drives based on this controller, including the X600. No further details about this weakness will be disclosed due to responsible disclosure embargo at the time of publication.

We extracted the firmware from the drive by exploiting the identified weakness and injecting additional code, causing the firmware to be copied into the SPI flash upon retrieval and decryption. The firmware can then be retrieved with an external reader.

**Findings:**
The boot-time cryptographic signature validation can be bypassed, enabling not only the extraction of the firmware but also full control over the device. We used this opportunity to modify stage 2, inserting code that allows for reading, writing, and executing within the device’s address space. This functionality greatly aids our analysis by allowing the inspection and manipulation of the device’s memory at runtime. We found that the X600 derives the DEK from the user password, but other severe issues exist, compromising full-disk encryption in many situations.

- **TCG Opal:**
  - The X600’s Opal implementation follows a similar design pattern to the Crucial MX300: all passwords yield a single key (RDS key), which allows the DEK associated with any range to be decrypted (see Figure 2).
  - Unlike the MX300, the code does not differentiate between protected and unprotected ranges. If one or more unprotected ranges exist, the RDS key must be available, and the drive keeps an anonymous key-encrypting-key (KEK), which is the RDS key encrypted with a zero buffer.
  - The anonymous KEK is absent only if the global range is the only defined range and is password-protected. Any other configuration results in the presence of the anonymous KEK, effectively reducing security to the equivalent of no encryption.

- **ATA Security:**
  - If the drive’s full-disk encryption is configured via ATA security, the user-supplied password (user or master password) is used in a scheme that yields the RDS key.
  - The anonymous KEK remains present in file 97 at all times, meaning no password is required to access the drive’s contents.
  - If the user upgrades from high to max mode, cryptographic key information allowing the RDS key to be derived from the master password is not erased, so the master password still provides access to the drive’s contents.

**Wear Leveling:**
The X600 stores settings and other internal data in a small internal file system. The file system uses file numbers instead of names and includes a wear leveling feature. File number 97 contains all information related to cryptography.

We used our arbitrary write primitive to alter the behavior of a function issued by the file system driver that retrieves data from the raw flash. We modified it to store its arguments (block number, die number, plane number, etc.) in a buffer for later inspection. Through this, we learned that each time file 97 is written to, its physical location within the flash changes. However, if the anonymous KEK is removed from file 97, the drive immediately initiates a file system compaction routine, erasing previous copies of any file.