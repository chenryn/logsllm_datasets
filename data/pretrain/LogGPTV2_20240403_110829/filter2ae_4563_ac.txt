需要生成一张按照代码中方法计算得到的`hash`为`0x1046822029745355ca048937f624fb87`且满足`L0_THRES`、`L2_THRES`要求的`28
* 28`大小的攻击图片.
相应的`EXP`如下:
    import numpy as np
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.autograd import Variable
    from pwn import *
    from PIL import Image
    import hashlib
    import string
    class Net(nn.Module):
        def __init__(self):
            super(Net, self).__init__()
            self.conv1 = nn.Conv2d(1, 32, 3, 1)
            self.conv2 = nn.Conv2d(32, 64, 3, 1)
            self.dropout1 = nn.Dropout(0.25)
            self.dropout2 = nn.Dropout(0.5)
            self.fc1 = nn.Linear(9216, 128)
            self.fc2 = nn.Linear(128, 10)
        def forward(self, x):
            x = self.conv1(x)
            x = F.relu(x)
            x = self.conv2(x)
            x = F.relu(x)
            x = F.max_pool2d(x, 2)
            x = self.dropout1(x)
            x = torch.flatten(x, 1)
            x = self.fc1(x)
            return x
    def load_model(path):
        model = Net()
        model.load_state_dict(torch.load(path, map_location="cpu"))
        return model.eval()
    def save_image(arr, path):
        im = Image.fromarray(arr)
        im.save(path)
    def get_hash_sim(adv_hash, std_hash):
        cnt = 0
        for i in range(len(adv_hash[0])):
            tmp1 = adv_hash[0][i] > 0
            tmp2 = std_hash[0][i] > 0
            if tmp1 != tmp2:
                cnt += 1
        return 1 - (cnt / len(adv_hash[0]))
    def cal_hash_bits(out):
        return out
    def hex_hash(hash_bits):
        x = hash_bits.detach().numpy()
        res = [str(int(i > 0)) for i in x[0]]
        return hex(int(''.join(res), 2))
    model = load_model("./model/convNet.pt")
    target_image=torch.FloatTensor(np.load("mnist.npz")['test_images'][8583]).reshape(1,1,28,28)
    target_out = model(target_image).detach()
    target_nsgn=-torch.sign(target_out).detach()
    image = torch.FloatTensor(np.load("mnist.npz")['test_images'][22]).reshape(1,1,28,28)
    adv=Variable(image,requires_grad=True)
    loss_f=nn.L1Loss()
    loss_l2=nn.MSELoss()
    def hex_hash(hash_bits):
        x = hash_bits.detach().numpy()
        res = [str(int(i > 0)) for i in x[0]]
        return hex(int(''.join(res), 2))
    L0_THRES = 54.1
    L2_THRES = 6.45
    src = np.frombuffer(base64.b64decode(
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
                        dtype="float32")
    def hash_buf(buf):
        global src
        arr = np.frombuffer(buf, dtype="float32")
        if arr.shape[0] != 28 * 28:
            raise BufferError("hacker")
        arr = np.clip(arr, 0, 1)
        diff = arr - src
        print(np.linalg.norm(diff, 0), np.linalg.norm(diff, 2))
        if np.linalg.norm(diff, 0) > L0_THRES or np.linalg.norm(diff, 2) > L2_THRES:
            raise BufferError("attack failed")
        arr = torch.FloatTensor(arr).reshape(1, 1, 28, 28)
        # need=0x1046822029745355ca048937f624fb87
        # hash(src)=0x91460a702d62d166a9942cb7fc10d7a2
        return hex_hash(model(arr))
    def getsha256(s):
        sha256=hashlib.sha256()
        sha256.update(str(s).encode('utf-8'))
        ans=sha256.hexdigest()
        return ans
    def attack():
        global adv
        # load model, seed, image
        max_sim = 0
        cnt = 0
        loss_cnt = 0
        losses = []
        lr=0.1
        RATIO=10
        itercnt=0
        best = 9999
        best_l0 = 9999
        best_l2 = 9999
        save_image(image.squeeze().detach().numpy(), 'origion.tiff')
        save_image(target_image.squeeze().detach().numpy(), 'target.tiff')
        for i in range(10000):
            adv_out=model(adv)
            l1l=loss_f(adv,image)*RATIO
            hashl=torch.sum(F.relu(target_nsgn*adv_out))
            l2l=loss_l2(adv,image)
            loss=l1l+hashl
            loss.backward()
            adv.requires_grad=False
            data1 = adv.squeeze().detach().numpy().astype("float32").tobytes()
            arr1 = np.frombuffer(data1, dtype="float32")
            arr1 = np.clip(arr1, 0, 1)
            diff = arr1 - src
            a,b=(np.linalg.norm(diff, 0), np.linalg.norm(diff, 2))
            if hex_hash(adv_out)==hex_hash(target_out) and a< L0_THRES and b < L2_THRES:
                save_image(adv.squeeze().detach().numpy(), 'collision_pic.tiff')
                data = adv.squeeze().detach().numpy().astype("float32").tobytes()
                print(hash_buf(data))
                r = remote("175.27.158.159", "59101")
                context(log_level='debug')
                tmpstr = r.recvline().decode().replace('\n', '')
                sha_ans = tmpstr[45:109]
                sha_str = tmpstr[12:40]
                print(sha_str)
                print(sha_ans)
                print(tmpstr)
                prefix = ''