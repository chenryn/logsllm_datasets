微软的FPSE（FrontPage服务器端扩展）就是服务器扩展的一个实例，它为使用
FrontPage的作者进行Web发布提供支持。FPSE能够对FrontPage客户端发送的
RPC（remote procedure call，远程过程调用）命令进行解释。这些命令会在HTTP
中（具体来说，就是在HTTP POST方法上）捎回。细节请参见19.1节。
8.4 应用程序接口和Web服务
我们已经讨论过可以将资源网关作为Web服务器与应用程序的通信方式使用。更广
泛地说，随着Web应用程序提供的服务类型越来越多，有一点变得越来越清晰了：
HTTP可以作为一种连接应用程序的基础软件来使用。在将应用程序连接起来的过
程中，一个更为棘手的问题是在两个应用程序之间进行协议接口的协商，以便这些
205 应用程序可以进行数据的交换——这通常都是针对具体应用程序的个案进行的。
应用程序之间要配合工作，所要交互的信息比HTTP首部所能表达的信息要复杂得
多。第19章描述了几个用于交换定制信息的扩展HTTP或HTTP上层协议实例。
19.1节介绍的是在HTTP POST报文之上建立RPC层， 19.2节介绍的是向HTTP首
部添加XML的问题。
因特网委员会开发了一组允许Web应用程序之间相互通信的标准和协议。尽管Web
服务（Web service）可以用来表示独立的Web应用程序（构造模块），这里我们还
是宽松地用这个术语来表示这些标准。Web服务的引入并不新鲜，但这是应用程序
共享信息的一种新机制。Web服务是构建在标准的Web技术（比如HTTP）之上的。
Web服务可以用XML通过SOAP来交换信息。XML（Extensible Markup Language，
扩展标记语言）提供了一种创建数据对象的定制信息，并对其进行解释的方法。
SOAP（Simple Object Access Protocol，简单对象访问协议）是向HTTP报文中添加
216 ｜ 第8章
XML信息的标准方式。3
8.5 隧道
我们已经讨论了几种不同的方式，通过这些方式可以用HTTP对不同类型的资源进
行访问（通过网关），或者是用HTTP来启动应用程序到应用程序的通信。在本节
中，我们要看看HTTP的另一种用法——Web隧道（Web tunnel），这种方式可以通
过HTTP应用程序访问使用非HTTP协议的应用程序。
Web隧道允许用户通过HTTP连接发送非HTTP流量，这样就可以在HTTP上捎带
其他协议数据了。使用Web隧道最常见的原因就是要在HTTP连接中嵌入非HTTP
流量，这样，这类流量就可以穿过只允许Web流量通过的防火墙了。
8.5.1 用CONNECT建立HTTP隧道
Web 隧道是用 HTTP 的 CONNECT 方法建立起来的。CONNECT 方法并不是
HTTP/1.1 核心规范的一部分，4但却是一种得到广泛应用的扩展。可以在 Ari
Luotonen 的过期因特网草案规范“Tunneling TCP based protocols through Web
proxy servers”（“通过Web代理服务器用隧道方式传输基于TCP的协议”），或他的
著作Web Proxy Servers中找到这些技术规范，本章末尾引用了这两份资源。 206
CONNECT方法请求隧道网关创建一条到达任意目的服务器和端口的TCP连接，并
对客户端和服务器之间的后继数据进行盲转发。
图8-10显示了CONNECT方法如何建立起一条到达网关的隧道。
• 在图 8-10a 中，客户端发送了一条 CONNECT 请求给隧道网关。客户端的
CONNECT方法请求隧道网关打开一条TCP连接（在这里，打开的是到主机
orders.joes-hardware.com的标准SSL端口443的连接）。
• 在图8-10b和图8-10c中创建了TCP连接。
• 一旦建立了TCP连接，网关就会发送一条HTTP 200 Connection Established响
应来通知客户端（参见图8-10d）。
• 此时，隧道就建立起来了。客户端通过HTTP隧道发送的所有数据都会被直接转
发给输出TCP连接，服务器发送的所有数据都会通过HTTP隧道转发给客户端。
注3： 更多信息，请参见http://www.w3.org/TR/2001/WD-soap12-part0-20011217/。Doug Tidwell、James Snell
和Pavel Kulchenko编写的Programming Web Services with SOAP（SOAP Web服务开发）一书（O’Reilly）
也是非常好的SOAP协议信息资源。
注4： HTTP/1.1规范保留了CONNECT方法，但没有对其功能进行描述。
集成点：网关、隧道及中继 ｜ 217
隧道位于客户端和网关之间
普通的SSL连接
客户端 网关（隧 orders.joes-hardware.com
（a）发送CONNECT请求 道端点）
CONNECT orders.joes-hardware.com:443 HTTP/1.0
User-agent: SuperBrowser4.2
（b）打开到端口443的TCP连接
（d）返回HTTP连接就绪报文
（c）连接已建立
HTTP/1.0 200 Connection established
（e）此时，建立起了原始数据的任意、
双向通信，直到连接关闭为止。
mdsnrt734tngfd/p0f92piub5.
lod9fuo8w34b4/;p-90[g9yk,8
U|t6y6/ $!&9890G&*&98...
mdsnrt734tngfd/p0f92piub5.
lod9fuo8w34b4/;p-90[g9yk,8
U|t6y6/ $!&9890G&*&98...
gal1304-*&hsgd
gal1304-*&hsgd
207 图8-10 用CONNECT建立一条SSL隧道
图8-10中的例子描述了一条SSL隧道，其中的SSL流量是在一条HTTP连接上
发送的，但是通过CONNECT方法可以与使用任意协议的任意服务器建立TCP连
接的。
1. CONNECT请求
除了起始行之外，CONNECT的语法与其他HTTP方法类似。一个后面跟着冒号和
端口号的主机名取代了请求URI。主机和端口都必须指定：
CONNECT home.netscape.com:443 HTTP/1.0
User-agent: Mozilla/4.0
和其他HTTP报文一样，起始行之后，有零个或多个HTTP请求首部字段。这些行
照例以CRLF结尾，首部列表以一个仅有CRLF的空行结束。
218 ｜ 第8章
2. CONNECT响应
发送了请求之后，客户端会等待来自网关的响应。和普通HTTP报文一样，响应码
200表示成功。按照惯例，响应中的原因短语通常被设置为“Connection Established”：
HTTP/1.0 200 Connection Established
Proxy-agent: Netscape-Proxy/1.1
与普通HTTP响应不同，这个响应并不需要包含Content-Type首部。此时连接只
是对原始字节进行转接，不再是报文的承载者，所以不需要使用内容类型了。5
8.5.2 数据隧道、定时及连接管理
管道化数据对网关是不透明的，所以网关不能对分组的顺序和分组流作任何假设。
一旦隧道建立起来了，数据就可以在任意时间流向任意方向了。6
作为一种性能优化方法，允许客户端在发送了CONNECT请求之后，接收响应之
前，发送隧道数据。这样可以更快地将数据发送给服务器，但这就意味着网关必须
能够正确处理跟在请求之后的数据。尤其是，网关不能假设网络I/O请求只会返回
首部数据，网关必须确保在连接准备就绪时，将与首部一同读进来的数据发送给服 208
务器。在请求之后以管道方式发送数据的客户端，如果发现回送的响应是认证请求，
或者其他非200但不致命的错误状态，就必须做好重发请求数据的准备。7
如果在任意时刻，隧道的任意一个端点断开了连接，那个端点发出的所有未传输数
据都会被传送给另一个端点，之后，到另一个端点的连接也会被代理终止。如果还
有数据要传输给关闭连接的端点，数据会被丢弃。
8.5.3 SSL隧道
最初开发Web隧道是为了通过防火墙来传输加密的SSL流量。很多组织都会将所有
流量通过分组过滤路由器和代理服务器以隧道方式传输，以提升安全性。但有些协
议，比如加密SSL，其信息是加密的，无法通过传统的代理服务器转发。隧道会通过
一条HTTP连接来传输SSL流量，以穿过端口80的HTTP防火墙（参见图8-11）。
注5： 为了实现一致性，今后的规范可能会为隧道定义一个媒体类型（比如application/tunnel）。
注6： 隧道的两端（客户端和网关）必须做好在任意时刻接收来自连接任一端分组的准备，而且必须将数据
立即转发出去。由于隧道化协议中可能包含了数据的依赖关系，所以隧道的任一端都不能忽略输入数
据。隧道一端对数据的消耗不足可能会将隧道另一端的数据生产者挂起，造成死锁。
注7： 传送的数据不要超过请求TCP分组的剩余容量。如果在收到所有管道化传输的TCP分组之前，网关
关闭了连接，那么，管道化传输的多余数据就会使客户端TCP重置。TCP重置会使客户端丢失收到
的网关响应，这样客户端就无法分辨错误是由于网络错误、访问控制，还是认证请求造成的了。
集成点：网关、隧道及中继 ｜ 219
（a）防火墙拒绝SSL
端口443
过滤路由器 过滤路由器
客户端 服务器
防火墙代理
SSL
（被拒）
（b）防火墙接受由HTTP承载的SSL
在HTTP
中隧道化
传输的 端口80
SSL（被 过滤路由器 过滤路由器
客户端 接受了） SSL服务器
防火墙代理
图8-11 隧道可以经由HTTP连接传输非HTTP流量
为了让SSL流量经现存的代理防火墙进行传输，HTTP中添加了一项隧道特性，在
此特性中，可以将原始的加密数据放在HTTP报文中，通过普通的HTTP信道传送
209 （参见图8-12）。
在图8-12a中，SSL流量被直接发送给了一个（SSL端口443上的）安全Web服务
器。在图8-12b中，SSL流量被封装到一条HTTP报文中，并通过HTTP端口80上
的连接发送，最后被解封装为普通的SSL连接。
通常会用隧道将非HTTP流量传过端口过滤防火墙。这一点可以得到很好的利用，
比如，通过防火墙传输安全SSL流量。但是，这项特性可能会被滥用，使得恶意协
议通过HTTP隧道流入某个组织内部。
8.5.4 SSL隧道与HTTP/HTTPS网关的对比
可以像其他协议一样，对HTTPS协议（SSL上的HTTP）进行网关操作：由网关
（而不是客户端）初始化与远端HTTPS服务器的SSL会话，然后代表客户端执行
HTTPS事务。响应会由代理接收并解密，然后通过（不安全的）HTTP传送给客户
端。这是网关处理FTP的方式。但这种方式有几个缺点：
• 客户端到网关之间的连接是普通的非安全HTTP；
• 尽管代理是已认证主体，但客户端无法对远端服务器执行SSL客户端认证（基
于X509证书的认证）；
220 ｜ 第8章
• 网关要支持完整的SSL实现。 210
（a）直接的SSL连接
端口443
SSL SSL连接 SSL
客户端 服务器
（b）通过HTTP隧道建立的SSL连接
客户端
SSL SSL SSL连接 SSL 3
3
4
口4
端
隧道起点 隧道终点 服务器
端口80
隧道在一条普通的HTTP连接上
HTTP SSL HTTP连接 HTTP SSL 承载了SSL流量，目标端口443
图8-12 直接的SSL连接与隧道化SSL连接的对比
注意，对于SSL隧道机制来说，无需在代理中实现SSL。SSL会话是建立在产生请
求的客户端和目的（安全的）Web服务器之间的，中间的代理服务器只是将加密数
据经过隧道传输，并不会在安全事务中扮演其他的角色。
8.5.5 隧道认证
在适当的情况下，也可以将HTTP的其他特性与隧道配合使用。尤其是，可以将代
理的认证支持与隧道配合使用，对客户端使用隧道的权利进行认证（参见图8-13）。
8.5.6 隧道的安全性考虑
总的来说，隧道网关无法验证目前使用的协议是否就是它原本打算经过隧道传输的
协议。因此，比如说，一些喜欢捣乱的用户可能会通过本打算用于SSL的隧道，越 211
过公司防火墙传递因特网游戏流量，而恶意用户可能会用隧道打开Telnet会话，或
用隧道绕过公司的E-mail扫描器来发送E-mail。
集成点：网关、隧道及中继 ｜ 221
为了降低对隧道的滥用，网关应该只为特定的知名端口，比如HTTPS的端口443，
打开隧道。
客户端和网关之间的隧道
普通的SSL连接
客户端 网关 orders.joes-hardware.com
（a）发送的CONNECT请求 （隧道端点）
CONNECT orders.joes-hardware.com:443 HTTP/1.0
User-agent: SuperBrowser 4.2
（b）返回的认证请求
HTTP/1.0 407 Proxy authentication required
Proxy-authenticate: Basic realm="wormhole"
（c）发送带有适当认证信息的CONNECT请求
CONNECT orders.joes-hardware.com:443 HTTP/1.0
User-agent: SuperBrowser 4.2
Proxy-authorization: Basic YnJpYW4tdG90dHk6T3ch
（d）打开到端口443的TCP连接
（f H） TT返 P/回 1.H T 2T 00P 连 Co接 nn就 ect绪 io报 文 （e）连接已建立
0 n established
图8-13 网关允许某客户端使用隧道之前，可以对其进行代理认证
8.6 中继
HTTP中继（relay）是没有完全遵循HTTP规范的简单HTTP代理。中继负责处理
HTTP中建立连接的部分，然后对字节进行盲转发。
HTTP很复杂，所以实现基本的代理功能并对流量进行盲转发，而且不执行任何首
部和方法逻辑，有时是很有用的。盲中继很容易实现，所以有时会提供简单的过滤、
诊断或内容转换功能。但这种方式可能潜在严重的互操作问题，所以部署的时候要
特别小心。