# ARM架构下的 Pwn 的一般解决思路
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01 写在前面
本文作为”Multi-arch Pwn 系列”中的文章之一，因为篇幅过长，只能分架构来总结了。
多架构Pwn的题目虽然不多，但还是想要在这里总结一些常见的思路。
本文的部分内容引用了大佬的博客原文，已在文章末尾的参考链接中注明了原作者。
## 0x02.1 前置环境（基于Mac OS的环境搭建）
我们如果要使用多架构进行利用，我们一般需要安装qemu进行调试。
在 Mac OS 下我们可以使用`brew install qemu`来安装我们所需要的qemu。
但是，我们会发现我们无法使用大多数博客所述的`qemu-arm`来运行静态链接的其他架构程序。
经过查阅官方文档，我们发现官网中已经做了明确说明
> ## 5\. QEMU User space emulator
>
> ###  5.1 Supported Operating Systems
>
> The following OS are supported in user space emulation:
>
>   * – Linux (referred as qemu-linux-user)
>   * – BSD (referred as qemu-bsd-user)
>
也就是说，仅限Linux系统和BSD系统才能进行用户级别的仿真运行。那么我们尝试进行系统级别的仿真。
此处我们使用树莓派的系统镜像进行模拟。
### 准备`qemu kernel`
Kernel下载链接：
System Image下载链接：
此处因为网络原因导致镜像下载受阻，于是采用另一位大佬给出的替代方案~
###  关于启动选项的说明
`-kernel kernel-qemu`：指定启动所加载的内核文件类型，此处使用下载的内核映像类型`kernel-qemu`。
`-cpu arm1176`：指定启动所使用的CPU文件，此处模拟`ARM1176 CPU`。`Raspberry Pi`板上搭载了`Broadcom
BCM2835`，这个处理器用的是`ARM1176JZ-F`。
`-m 256`：指定仿真系统可使用的内存大小，此处RAM的大小是256MB. 设定成比256MB大的值板子好像不能启动.
`-M versatilepb`：设定模拟的开发板类型。`versatilepb`是`ARM Versatile Platform Board`。
`-kernel kernel-qemu-4.4.34-jessie`：指定启动所加载的内核镜像，此处使用下载的内核映像`kernel-qemu-4.4.34-jessie`。
`-append "root=/dev/sda2"`：指定内核的命令行。
`-hda 2013-09-25-wheezy-raspbian.img`：`Harddisk 0`使用`2013-09-25-wheezy-raspbian.img`。
## 0x02.2 前置环境（基于Deepin4的环境搭建）
本部分全文基本全文引用[如何 pwn 掉一个 arm 的binary——m4x](https://m4x.fun/post/how-2-pwn-an-arm-binary/)，故做二次版权声明。
###  虚拟机前期准备工作——更新apt源、安装必备软件
    sudo apt-get update
    sudo apt-get upgrade
    sudo apt-get install screenfetch git vim python python-pip python3 python3-pip gdb gdb-multiarch cmake time
    wget -q -O- https://github.com/hugsy/gef/raw/master/scripts/gef.sh | sh
    pip3 install --user unicorn keystone-engine capstone -i https://pypi.tuna.tsinghua.edu.cn/simple
    git clone https://github.com/sashs/filebytes.git
    cd filebytes
    sudo python3 setup.py install
    git clone https://github.com/sashs/ropper.git
    cd ropper
    sudo python3 setup.py install
    cd ~
    wget https://github.com/keystone-engine/keystone/archive/0.9.1.tar.gz
    tar xzvf 0.9.1.tar.gz
    cd keystone-0.9.1/
    mkdir build
    cd build
    ../make-share.sh
    sudo make install
    sudo ldconfig
    kstool
    pip3 install --user ropper keystone-engine -i https://pypi.tuna.tsinghua.edu.cn/simple
    sudo pip install pwntools
###  安装QEMU及其依赖
    sudo apt-get install qemu-user
###  安装动态运行库（不运行此步骤也可以运行静态多架构程序）
使用命令`apt-cache search "libc6" | grep -E "arm|mips"`搜索可用的多架构运行库。
我们只需要安装形如`libc6-*-cross`的运行库即可。
使用命令`sudo apt-get install libc6-arm64-cross libc6-armel-cross libc6-armhf-cross libc6-mips-cross libc6-mips32-mips64-cross libc6-mips32-mips64el-cross
libc6-mips64-cross libc6-mips64-mips-cross libc6-mips64-mipsel-cross
libc6-mips64el-cross libc6-mipsel-cross libc6-mipsn32-mips-cross
libc6-mipsn32-mips64-cross libc6-mipsn32-mips64el-cross libc6-mipsn32-mipsel-cross`安装。
###  安装binutils环境
当我们使用`Pwntools`里的`asm`命令时，可能会报如下错误：
    dpkg-query: 没有找到与 *bin/armeabi*linux*-as* 相匹配的路径
    [ERROR] Could not find 'as' installed for ContextType(arch = 'arm', bits = 32, endian = 'little', log_level = 10)
        Try installing binutils for this architecture:
        https://docs.pwntools.com/en/stable/install/binutils.html
此时我们需要安装binutils依赖，首先使用命令`apt search binutils | grep [arch]`(此处的[arch]请自行替换)
随后安装显示出的包即可完成
## 0x02.3 前置环境（基于ARM_NOW的环境搭建）
项目地址：
根据项目简介所述：
> arm_now is a qemu powered tool that allows instant setup of virtual machines
> on arm cpu, mips, powerpc, nios2, x86 and more, for reverse, exploit,
> fuzzing and programming purpose.
>
> arm_now是一款基于qemu的强大的工具，它允许在arm-> cpu，mips，powerpc，nios2，x86等平台上即时设置虚拟机，以进行程序逆向，利用，模糊测试和编程工作。
项目使用wiki：
## 0x03 相关知识
###  ARM 架构
ARM架构使用了与Intel/AMD架构所不同的精简指令集(RISC)，因此其函数调用约定以及寄存器也有了一定的差异。
####  过程调用标准
ARM/ARM64使用的是AAPCS或ATPCS标准。
ATPCS即为ARM-Thumb Procedure Call Standard/ARM-Thumb过程调用标准，规定了一些子程序间调用的基本规则，这些规则包括子程序调用过程中寄存器的使用规则，数据栈的使用规则，参数的传递规则。有了这些规则之后，单独编译的C语言程序就可以和汇编程序相互调用。使用ADS(ARM
Developer
Suite)的C语言编译器编译的C语言子程序满足用户指定的ATPCS类型。而对于汇编语言来说，则需要用户来保证各个子程序满足ATPCS的要求。而AAPCS即为ARM
Archtecture Procedure Call Standard是2007年ARM公司正式推出的新标准，AAPCS是ATPCS的改进版，目前，
AAPCS和ATPCS都是可用的标准。
####  寄存器规则
  1. 子程序间通过寄存器 **R0～R3** 来 **传递参数** 。这时，寄存器R0～R3可记作arg0～arg3。 **被调用的子程序在返回前无需恢复寄存器R0～R3的内容，R0被用来存储函数调用的返回值** 。
  2. 在子程序中，使用寄存器 **R4～R11** 来 **保存局部变量** 。这时，寄存器R4～R11可以记作var1～var8。如果在子程序中使用了寄存器v1～v8中的某些寄存器，则 **子程序进入时必须保存这些寄存器的值，在返回前必须恢复这些寄存器的值** 。 **R7经常被用作存储系统调用号，R11存放着帮助我们找到栈帧边界的指针，记作FP** 。在Thumb程序中，通常只能使用寄存器R4～R7来保存局部变量。
  3. 寄存器 **R12** 用作 **过程调用中间临时寄存器** ，记作IP。在子程序之间的连接代码段中常常有这种使用规则。
  4. 寄存器 **R13** 用作 **堆栈指针** ，记作SP。在子程序中寄存器R13不能用作其他用途。 **寄存器SP在进入子程序时的值和退出子程序时的值必须相等** 。
  5. 寄存器 **R14** 称为 **连接寄存器** ，记作LR。它用于 **保存子程序的返回地址** 。如果在子程序中保存了返回地址，寄存器R14则可以用作其他用途。
  6. 寄存器 **R15** 是 **程序计数器** ，记作PC。它不能用作其它用途。当执行一个分支指令时， **PC存储目的地址。在程序执行中，ARM模式下的PC存储着当前指令加8(两条ARM指令后)的位置，Thumb(v1)模式下的PC存储着当前指令加4(两条Thumb指令后)的位置** 。
给出ARM架构寄存器与Intel架构寄存器的关系：
ARM架构 寄存器名 | 寄存器描述 | Intel架构 寄存器名  
---|---|---  
R0 | 通用寄存器 | EAX  
R1~R5 | 通用寄存器 | EBX、ECX、EDX、EDI、ESI  
R6~R10 | 通用寄存器 | 无  
R11(FP) | 栈帧指针 | EBP  
R12(IP) | 内部程序调用 | 无  
R13(SP) | 堆栈指针 | ESP  
R14(LP) | 链接寄存器 | 无  
R15(PC) | 程序计数器 | EIP  
CPSR | 程序状态寄存器 | EFLAGS  
####  堆栈(Stack)规则
  1. ATPCS规定堆栈为FD类型，即Full Descending，意思是 **SP指向最后一个压入的值(栈顶)，数据栈由高地址向低地址生长** ，即满递减堆栈，并且对堆栈的操作是8字节对齐。所以经常使用的指令就有 **STMFD和LDMFD** 。
  2. STMFD指令即Store Multiple FULL Descending指令，相当于压栈。`STMFD SP! ,{R0-R7，LR}`实际上会执行以下命令： 
        SP = SP - 9 x 4 (共计压入R0-R7以及LR一共九个寄存器)
    ADDRESS = SP
    MEMORY[ADDRESS] = LR
    for i = 7 to 0
        MEMORY[ADDRESS] = Ri
        ADDRESS = ADDRESS + 4
此处也可以看出，事实上的入栈顺序与`R0-R7，LR`相反。
    1. 执行`SP = SP - 9 x 4`后
    2. 执行`ADDRESS = SP`后
    3. 执行`MEMORY[ADDRESS] = LR`后
    4. 接下来，`ADDRESS`逐次上移，以此填入寄存器的值。
    5. 至此，入栈指令执行结束。
⚠️：若入栈指令为`STMFD SP ,{R0-R7，LR}`，SP指针会在最后回到原位，不会改变SP指针的值。
  3. LDMFD指令即Load Multiple FULL Descending指令，相当于出栈，也就是STMFD指令的逆操作。`LDMFD SP! ,{R0-R7，LR}`实际上会执行以下命令： 
        SP = SP + 9 x 4
    ADDRESS = SP
    for i = 0 to 7
        Ri = MEMORY[ADDRESS]
        ADDRESS = ADDRESS - 4
    LR = MEMORY[ADDRESS]
  4. 对于汇编程序来说，如果目标文件中包含了外部调用，则必须满足下列条件： 
    1. 外部接口的堆栈必须是8字节对齐的。
    2. 在汇编程序中使用PRESERVE8伪指令告诉连接器，本汇编程序数据是8字节对齐的。
####  传参规则
  1. 对于参数个数可变的子程序，当参数个数不超过4个时，可以使用寄存器R0～R3来传递参数；当参数超过4个时，还可以使用堆栈来传递参数。
  2. 在传递参数时，将所有参数看作是存放在连续的内存字单元的字数据。然后，依次将各字数据传递到寄存器R0，R1，R2和R3中。 **如果参数多于4个，则将剩余的字数据传递到堆栈中。入栈的顺序与参数传递顺序相反，即最后一个字数据先入栈。**
####  返回值规则
  1. 结果为一个32位整数时，可以通过寄存器R0返回
  2. 结果为一个64位整数时，可以通过寄存器R0和R1返回
  3. 结果为一个浮点数时，可以通过浮点运算部件的寄存器f0、d0或s0来返回
  4. 结果为复合型浮点数（如复数）时，可以通过寄存器f0～fn或d0～dn来返回
  5. 对于位数更多的结果，需要通过内存来传递。
####  访址规则
  1. 通常，LDR指令被用来从内存中加载数据到寄存器，STR指令被用作将寄存器的值存放到内存中。 
        @ LDR操作：从R0指向的地址中取值放到R2中
    LDR R2, [R0]   @ [R0] - 数据源地址来自于R0指向的内存地址
    @ STR操作：将R2中的值放到R1指向的地址中
    STR R2, [R1]   @ [R1] - 目的地址来自于R1在内存中指向的地址
那么我们给出示例代码和解释：
        .data          /* 数据段是在内存中动态创建的，所以它的在内存中的地址不可预测*/
    var1: .word 3  /* 内存中的第一个变量且赋值为3 */
    var2: .word 4  /* 内存中的第二个变量且赋值为4 */
    .text          /* 代码段开始 */ 
    .global _start
    _start:
        ldr r0, adr_var1  @ 将存放var1值的地址adr_var1加载到寄存器R0中 
        ldr r1, adr_var2  @ 将存放var2值的地址adr_var2加载到寄存器R1中 
        ldr r2, [r0]      @ 将R0所指向地址中存放的0x3加载到寄存器R2中  
        str r2, [r1]      @ 将R2中的值0x3存放到R1做指向的地址，此时，var2变量的值是0x3
        bkpt        
    adr_var1: .word var1  /* var1的地址助记符 */
    adr_var2: .word var2  /* var2的地址助记符 */
接下来我们对这段代码进行反编译，结果如下：
        ldr  r0, [ pc, #12 ]   ; 0x8088 
    ldr  r1, [ pc, #12 ]   ; 0x808c 
    ldr  r2, [r0]
    str  r2, [r1]
    bx   lr
此处，`[PC,#12]`的意义是`PC + 4*3`，可以看出，程序使用了偏移寻址的思路，但是，根据我们所写的汇编码：
        _start: