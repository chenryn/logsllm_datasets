类型，就用 uft8 编码成 str 类型。
## coding: utf-8
from pprint import PrettyPrinter
##  PrettyPrinter format 
class MyPrettyPrinter(PrettyPrinter):
def format(self, object, context, maxlevels, level):
if isinstance(object, unicode):
return (object.encode('utf8'), True, False)
return PrettyPrinter.format(self, object, context, maxlevels, level)
info = [{"id":1580615,"name":u"","packageName":"com.renren.mobile.android","ico
nUrl":"app/com.renren.mobile.android/icon.jpg","stars":2,"size":21803987,"downloadUr
l":"app/com.renren.mobile.android/com.renren.mobile.android.apk","des":u"2011-2017
SNS"},{"id":1540629,"name":u"","pa
ckageName":"com.ct.client","iconUrl":"app/com.ct.client/icon.jpg","stars":2,"size":4
794202,"downloadUrl":"app/com.ct.client/com.ct.client.apk","des":u"271934
"}]
MyPrettyPrinter().pprint(info)
输出如下，已经解决了中文的显示问题：
打印双引号
解决了中文问题后，再来看看如何让 pprint 打印双引号。
在实例化 PrettyPrinter 对象的时候，可以接收一个 stream 对象，它表示你要将内容输出到哪里，
默认是使用 sys.stdout 这个 stream，也就是标准输出。
现在我们要修改输出的内容，也就是将输出的单引号替换成双引号。
那我们完全可以自己定义一个 stream 类型的对象，该对象不需要继承任何父类，只要你实现 write
方法就可以。
有了思路，就可以开始写代码了，如下：
## coding: utf-8
from pprint import PrettyPrinter
class MyPrettyPrinter(PrettyPrinter):
def format(self, object, context, maxlevels, level):
if isinstance(object, unicode):
return (object.encode('utf8'), True, False)
return PrettyPrinter.format(self, object, context, maxlevels, level)
class MyStream():
def write(self, text):
print text.replace('\'', '"')
info = [{"id":1580615,"name":u"","packageName":"com.renren.mobile.android","ico
nUrl":"app/com.renren.mobile.android/icon.jpg","stars":2,"size":21803987,"downloadUr
l":"app/com.renren.mobile.android/com.renren.mobile.android.apk","des":u"2011-2017
SNS"},{"id":1540629,"name":u"","pa
ckageName":"com.ct.client","iconUrl":"app/com.ct.client/icon.jpg","stars":2,"size":4
794202,"downloadUrl":"app/com.ct.client/com.ct.client.apk","des":u"271934
"}]
MyPrettyPrinter(stream=MyStream()).pprint(info)
尝试执行了下，我的天，怎么是这样子的。
[
{
"des"
:
2011-2017SNS
,
"downloadUrl":
"app/com.renren.mobile.android/com.renren.mobile.android.apk"
,
"iconUrl":
"app/com.renren.mobile.android/icon.jpg"
,
"id":
1580615
,
"name":
,
"packageName":
"com.renren.mobile.android"
,
"size":
21803987
,
"stars":
2
}
,
{
"des"
:
271934
,
"downloadUrl":
"app/com.ct.client/com.ct.client.apk"
,
"iconUrl":
"app/com.ct.client/icon.jpg"
,
"id":
1540629
,
"name":
,
"packageName":
"com.ct.client"
,
"size":
4794202
,
"stars":
2
}
]
经过一番研究，才知道是因为 print 函数默认会将打印的内容后面加个 换行符。
那如何将使 print 函数打印的内容，不进行换行呢？
方法很简单，但是我相信很多人都不知道，只要在 print 的内容后加一个 逗号 就行。
就像下面这样。
知道了问题所在，再修改下代码
## coding: utf-8
from pprint import PrettyPrinter
class MyPrettyPrinter(PrettyPrinter):
def format(self, object, context, maxlevels, level):
if isinstance(object, unicode):
return (object.encode('utf8'), True, False)
return PrettyPrinter.format(self, object, context, maxlevels, level)
class MyStream():
def write(self, text):
print text.replace('\'', '"'),
info = [{"id":1580615,"name":u"","packageName":"com.renren.mobile.android","ico
nUrl":"app/com.renren.mobile.android/icon.jpg","stars":2,"size":21803987,"downloadUr
l":"app/com.renren.mobile.android/com.renren.mobile.android.apk","des":u"2011-2017
SNS"},{"id":1540629,"name":u"","pa
ckageName":"com.ct.client","iconUrl":"app/com.ct.client/icon.jpg","stars":2,"size":4
794202,"downloadUrl":"app/com.ct.client/com.ct.client.apk","des":u"271934
"}]
MyPrettyPrinter(stream=MyStream()).pprint(info)
终于成功了，太不容易了吧。
3. 何必折腾
通过上面的一番折腾，我终于实现了我 梦寐以求 的需求。
代价就是我整整花费了两个小时，才得以实现，而对于小白来说，可能没有信心，也没有耐心去做
这样的事情。
所以我想说的是，Python 2 下的 pprint ，真的不要再用了。
为什么我要用这么 说，因为明明有更好的替代品，人生苦短，既然用了 Python ，当然是怎么简单
怎么来咯，何必为难自己呢，一行代码可以解决的事情，偏偏要去写两个类，那不是自讨苦吃吗？
（我这是在骂自己吗？
如果你愿意抛弃 pprint ，那我推荐你用 json.dumps ，我保证你再也不想用 pprint 了。
打印中文
其实无法打印中文，是 Python 2 引来的大坑，并不能全怪 pprint 。
但是同样的问题，在 json.dumps 这里，却只要加个参数就好了，可比 pprint 简单得不要太多。
具体的代码示例如下：
>>> info = [{"id":1580615,"name":"","packageName":"com.renren.mobile.android","
iconUrl":"app/com.renren.mobile.android/icon.jpg","stars":2,"size":21803987,"downloa
dUrl":"app/com.renren.mobile.android/com.renren.mobile.android.apk","des":"2011-2017
SNS"},{"id":1540629,"name":"","pa
ckageName":"com.ct.client","iconUrl":"app/com.ct.client/icon.jpg","stars":2,"size":4
794202,"downloadUrl":"app/com.ct.client/com.ct.client.apk","des":"271934
"}]
>>>
>>> import json
>>>
>>>
>>> print json.dumps(info, indent=4, ensure_ascii=False)
[
{
"downloadUrl": "app/com.renren.mobile.android/com.renren.mobile.android.apk"
,
"iconUrl": "app/com.renren.mobile.android/icon.jpg",
"name": "",
"stars": 2,
"packageName": "com.renren.mobile.android",
"des": "2011-2017SNS",
"id": 1580615,
"size": 21803987
},
{
"downloadUrl": "app/com.ct.client/com.ct.client.apk",
"iconUrl": "app/com.ct.client/icon.jpg",
"name": "",
"stars": 2,
"packageName": "com.ct.client",
"des": "271934",
"id": 1540629,
"size": 4794202
}
]
>>>
json.dumps 的关键参数有两个：
indent=4：以 4 个空格缩进单位
ensure_ascii=False：接收非 ASCII 编码的字符，这样才能使用中文
与 pprint 相比 json.dumps 可以说完胜：
1. 两个参数就能实现所有我的需求（打印中文与双引号）
2. 就算在 Python 2 下，使用中文也不需要用 u'' 这种写法
3. Python2 和 Python3 的写法完全一致，对于这一点不需要考虑兼容问题
4. 总结一下
本来很简单的一个观点，我为了证明 pprint 实现那两个需求有多么困难，花了很多的时间去研究了
pprint 的源码（各种处理其实还是挺复杂的），不过好在最后也能有所收获。
本文的分享就到这里，阅读本文，我认为你可以获取到三个知识点
1. 核心观点：Python2 下不要再使用 pprint
2. 若真要使用，且有和一样的改造需求，可以参考我的实现
3. Python 2 中的 print 语句后居然可以加 逗号
6.5 变量名与保留关键冲突怎么办？
所有的编程语言都有一些保留关键字，这是代码得以编译/解释的基础。
有了这些关键字就组成了语法，当你的变量名和这些保留关键字冲突时，该怎么办呢？
在回答这个问题前，先要看看 Python 中的保留关键字有哪些？
Python 的关键字，可以通过 keyword 这个模块列出来，一共有 33 个。
>>> import keyword;
>>> print('\n'.join(keyword.kwlist))
False
None
True
and
as
assert
break
class
continue
def
del
elif
else
except
finally
for
from
global
if
import
in
is
lambda
nonlocal
not
or
pass
raise
return
try
while
with
yield
>>> len(keyword.kwlist)
33
使用这些关键字来做为变量名，是会报语法错误的。
>>> try = True
File "", line 1
try = True
^
SyntaxError: invalid syntax
关于这个问题，PEP8 建议当你想使用的变量名被关键字所占用时，可以使用 _ 这样在变量后
面加一个单下划线的形式来命名，这种后缀一下划线的方式优先于缩写或拼写错误。
有了 PEP8 做为指导，我们可以这样子写了
>>> try_ = True
6.6 不想让子类继承的变量名该怎么写？
先来看下面这段代码
class Parent:
def __init__(self):
self.name = "MING"
class Son(Parent):
def __init__(self):
self.name = "Xiao MING"
bar = Son()
print(bar.name)
##  Xiao MING
Bar 作为 Foo 的子类，会继承父类的 name 属性。
如果有一些属性，是父类自己独有的，不想被子类继承，该怎么写呢？
可以在属性前面加两个下划线，两个类的定义如下
class Parent:
def __init__(self):
self.name = "MING"
self.__wife = "Julia"
class Son(Parent):
def __init__(self):
self.name = "Xiao MING"
super().__init__()
从本章节的第一篇文章（6.1 不要直接调用类的私有方法）我们知道了私有的变量或函数，是不能
直接调用的，需要用这样的形式才能访问 ___ 。
Son 类的实例的并没有初始化 __wife 属性，但是 Parent 类的实例有，但是由于这个属性是父类
私有的，当子类想要访问时，是会提示该变量不存在。
验证过程如下：
6.7 利用 any 代替 for 循环
在某些场景下，我们需要判断是否满足某一组集合中任意一个条件
这时候，很多同学自然会想到使用 for 循环。
found = False
for thing in things:
if thing == other_thing:
found = True
break
但其实更好的写法，是使用 any() 函数，能够使这段代码变得更加清晰、简洁
found = any(thing == other_thing for thing in things)
使用 any 并不会减少 for 循环的次数，只要有一个条件为 True，any 就能得到结果。
同理，当你需要判断是否满足某一组集合中所有条件，也可以使用 all() 函数。
found = all(thing == other_thing for thing in things)
只要有一个不满足条件，all 函数的结果就会立刻返回 False
6.8 不同条件分支里应减少重合度
如下是一个简单的条件语句模型
if A:
elif B:
else:
如果 code_block_2 和 code_block_1 的代码完全一致，那么应该想办法减少代码冗余。
这边举个例子，下面这段代码中
def process_payment(payment):
if payment.currency == 'USD':
process_standard_payment(payment)
elif payment.currency == 'EUR':
process_standard_payment(payment)
else:
process_international_payment(payment)
其实更好的做法是用 in 来合并条件一和条件二
def process_payment(payment):
if payment.currency in ('USD', 'EUR'):
process_standard_payment(payment)
else:
process_international_payment(payment)
6.9 如无必要，勿增实体噢
删除没必要的调用 keys()
字典是由一个个的键值对组成的，如果你遍历字典时只需要访问键，用不到值，有很多同学会用下
面这种方式：
for currency in currencies.keys():
process(currency)