} 
Seq_Diag_Sec(SeqD: Sequence_Diagram) { 
     For each tree (GMsg, si, ucj) in the forest SeqD.MsgForest { 
         SD_Sec_Check(GMsg, si, ucj); } 
} 
Figure 6. Security Assurance Check for Sequence Diagram. 
In our prototype, we allow the designer to define the ordered set 
of security levels with user-defined labels, from level 0 to level 5 
(more  are  possible  but  may  not  be  practical).  By  editing  a 
configuration  file,  we  are  able  to  modify  the  Default  Options 
Dialog of TCC which allows the user to define string labels for 
the security levels. With this information, our security extensions 
support the definition of MAC CLS or CLR for actors, use cases, 
classes, and methods, by using the previously defined labels for 
the security levels.  
To  integrate  MAC  into  TCC,  we  employ its APIs to extend the 
TCC-Inspector property window for classes, methods, actors and 
use  cases  with  an  additional  page  (tab)  for  “MAC  Settings”, 
which is shown in Figure 7.  The new tab represents the crucial 
component of the security extensions, by providing MAC security 
levels for all of the UML elements that are supported at this time. 
The designer chooses a security level from the previously defined 
security level range for assignment to a UML element. The MAC 
security level is set by using a drop down combo-box. The names 
that  are  shown  in  the  drop down combo-box are the names that 
have been defined in the Default Options Dialog. For example, in 
Figure  7,  the  actor  Senior  Staff  is  assigned  the  security  level  S 
(“Secret”).  The  plug-in  also  inserts  comments  for  the  chosen 
security level values into the generated code, allowing security to 
be tracked into later development and maintenance stages, shown 
in Figure 10 for class Survey_List.  To set a security level for an 
actor,  use  case,  or  method,  the  user  must  select  a  single  MAC 
level.  However, for classes, the “MAC Security” property tab has 
two  entries,  namely  CLS  Min  Level  and  CLS  Max  Level.    This 
allows us verify that the security level of the methods for a class 
fall within this minimum/maximum range. 
Figure 7. The CLR Assignment of Actor Senior. 
The  prototype  under  development  supports  “dynamic”  design-
time checking of MAC Security Assurance Rules between UML 
elements based on the SARs presented in Section 4, as illustrated 
in Figure 8 for the SAR AUC.  Dynamic checking focuses on the 
security  consistency  of  the  MAC  levels  between  two  UML 
elements  which  have  been  associated  via  certain  kinds  of 
connections  (e.g.,  include,  extend,  generalize,  etc.).  If  the 
software  engineer  draws  a  connection  between  two  UML 
elements and the corresponding SAR is violated, an error message 
window will pop up. Suppose there is an association from actor 
Senior Staff (CLR = S) to use case Add Survey Header (CLS = S).  
If  we  attempt  to  connect  an  association  from  actor  Staff  to  use 
case  Add  Survey  Header,  an  error  dialog  is  displayed,  since  the 
Staff.CLR = C < Add_Survey_Header.CLS = S violates the SAR 
AUC.  The  dynamic  checking  module  can  be  activated  or 
deactivated by the user. It may be deactivated if there are many 
different  connections  that  must  be  made,  which  may  cause 
inconsistencies until all connections have been established. 
Figure 8. An Example of Violating SAR AUC. 
Figure 9. An Example of Violating SAR MM. 
/* Generated by Together */ 
package Survey_Package; 
/* Survey List is used to store the list of all survey headers. 
 * Min CLS = "C" and Max CLS = "S" 
 * @stereotype container  
 * @clsPropertyMin Level1: Confidential 
 * @clsPropertyMax Level 2: Secret 
 */ 
public class Survey_List { 
  /* @clsProperty Level 2: Secret */ 
  public int Add_Survey_Header() { 
  } 
   /* @clsProperty Level 2: Secret */ 
  public int Update_Survey_List() { 
  } 
  /* @clsProperty Level 1: Confidential */ 
  public boolean Survey_Title_Search(String aSurvey_Title) { 
  } 
  private String Survey_Title; 
} 
Figure 10. Code Generated for Survey_list Class. 
To  supplement  the  dynamic  check,  the  “Static”  or  post-design-
iteration  check  can  be  performed  over  UML  designs  at 
meaningful increments.  For example, if the dynamic check was 
deactivated  for  a  period  of  time,  the  static  check  can  scan  the 
the 
level  C 
to 
tries 
to  assign 
entire  design  in  search  of  security  conflicts  and  inconsistencies.  
In support of static checking, we have implemented the algorithm 
given  in  Section    4.4  which  conducts  a  comprehensive  security 
analysis of an entire design by verifying use case diagrams where 
the assigned security levels occur in isolation from the SARs. If 
the  designer  has  assigned  all  of  the  elements  of  a  use  case 
diagram with MAC security levels s/he can start the “MAC Static 
Check” and the diagram will be traversed; if a violation of a SAR 
occurs  an  error  message  referring  to  the  affected  elements  and 
violated SAR will be displayed. 
The assurance checks between methods and use cases as well as 
between methods in Sequence Diagrams are being prototyped (in 
progress) as part of our Together MAC plug-in. To illustrate their 
potential usage, a simulated example to enforce the SAR MM is 
shown in Figure 9 (if we adopt the Simple Integrity Property). If 
the  designer 
the  method 
Add_Survey_Header,  SAR  MM  will  be  violated  since  the 
Add_Survey_Header method calls Create_Survey_Header method 
and Add_Survey_Header.CLS = C ≥ Create_Survey_Header.CLS 
= S is no longer true. We anticipate that the algorithms for all of 
the checks associated with the SARs in Sections 4.1 to 4.4 will be 
available for both dynamic and static analysis in the near future. 
6.  RELATED RESEARCH 
There have been a number of other research efforts in security for 
UML,  which  have  similarities  and  differences  to  the  work 
presented herein.  In this section, we briefly review these efforts, 
comparing and contrasting them to our work. In [11], a proposed 
Framework  for  Network  Enterprise  utilizes  UML  notations  to 
describe  a  role-based  access  control  (RBAC)  model,  employing 
UML as a language to represent RBAC requirements. However, 
the representation is too general to incorporate subtle properties of 
RBAC  such  as  separation  of  duty  constraints  (see  [12]  for 
different types of RBAC constraints). In a similar approach, [24] 
proposed  an  alternative  technique  to  utilize  UML  notations  to 
describe  RBAC  modeling  and  processing.  Both  of  these  efforts 
have  focused  on  the  way  that  UML  elements  can  be  used  to 
model roles rather than taking a larger view of examining secure 
software  design,  which  has  been  our  focus.  In  an  effort  that  is 
similar to our work, [15, 16] has proposed extended UML features 
to  accommodate  security  requirements.  Their  effort  utilizes  a 
mathematical Abstract State Machine model [13] (cited in [15]) to 
formalize UML elements (use cases omitted) and extend several 
stereotypes  to  accommodate  their  proposed  security  framework 
towards theoretical security verification with UML. This contrasts 
with our approach to extend properties of essential UML elements 
(use cases, actors, classes, and methods) in order to directly apply 
security  models  (i.e.,  MAC)  for  secure  software  design,  and 
balances  a  theoretical  perspective  (MAC  model  for  UML  with 
security  assurance  checking)  with  a  practical  realization  of  our 
work  into  TCC.  Another  effort  [17]  has  introduced  SecureUML 
for model-driven security with extended meta-model elements for 
RBAC only, which is similar in concept to our work on RBAC for 
UML  [9].  Likewise,  [22]  used  parameterized  UML  elements  to 
model an access control framework combining MAC and RBAC 
which expresses a hybrid access control policy of an organization, 
rather  than  inserting  MAC  features  into  software  design  using 
UML  and  performing  MAC  constraints  checking  as  we  have 
done.  Lastly, in an effort similar to our work, [1, 2] proposed a 
framework  to  incorporate  security  into  UML  design.  However, 
this work only deals with use case modeling without considering 
sequence diagrams. 
7.  CONCLUSION AND ONGOING WORK 
This  paper  has  examined  the  incorporation  of  MAC  into  the 
unified  modeling  language,  UML,  supporting  both  design-time 
and post-design security assurance checking. Section 2 reviewed 
background on MAC and UML. Section 3 proposed guidelines for 
secure  software  design  and  to  interpret  MAC  for  OO  design. 
Section 4 examined security assurance for UML use case, class, 
and  sequence  diagrams,  focusing  on  the  assignment  of  security 
levels to MAC elements (use case, actor, class, and methods), the 
security assurance rules (SARs) that are automatically fired when 
users  connect  elements  with  relationships,  and  algorithms  for 
assurance  of  use  case  and  sequence  diagrams  for  post-design 
checking.    The  integration  of  the  work  of  Section  4  into  the 
Together  Control  Center  prototype  for  design-time  analysis  was 
reviewed  in  Section  5.    Section  6  compared  other  research  on 
UML and security to our own efforts.  
Our ongoing research in this area includes expanding our work to 
also  support  RBAC  for  UML  [9].  In  addition,  we  are  exploring 
the  generation  of  formal  security  requirements  (in  a  logic-based 
programming paradigm) which can then be executed in order to 
identify security problems and inconsistencies.  From a practical 
perspective,  we  are  continuing  our  prototyping  efforts,  to  fully 
support  the  SARs  presented  in  this  paper  in  the  prototype  of 
Section 5, and to also include RBAC support. The work presented 
herein is also related to our ongoing efforts in distributed security 
and  security  assurance  [21].  Please  see  [10]  for  further 
information on our security research.  
8.  REFERENCES 
[1]  Alghathbar,  K.  and  Wijesekera,  D.  AuthUML:  A  Three-
phased Framework to model Secure Use Cases. In Proc. of 
the  Formal  Methods 
in  Security  Engineering  Wksp 
(FMSE’03), Washington D.C., USA, 2003. 
[2]  Alghathbar, K. and Wijesekera, D. Consistent and Complete 
Access  Control  Policies  in  Use  Cases.  In  Proc.  of  UML 
2003, San Francisco, CA, LNCS, 2003. 
[3]  Bell,  D.  and  La  Padula,  L.  Secure  Computer  Systems: 
Mathematical  Foundations  Model.  M74-244,  Mitre  Corp., 
1975. 
[4]  Biba,  K.  Integrity  Considerations  for  Secure  Computer 
Systems. TR-3153, Mitre Corp., 1977. 
[5]  Booch,  G.  Object-Oriented  Design  With  Applications. 
Benjamin/Cummings, 1991. 
[6]  Booch  G.,  et  al.  The  Unified  Modeling  Language  User 
Guide. Addison Wesley, 1999. 
[7]  Budd, T. An Introduction to Object-Oriented Programming. 
Addison-Wesley, 1997. 
[8]  Cormen, T., et al. Introduction to Algorithms. The MIT Press 
and McGraw-Hill, 1990. 
[9]  Doan, T., et al. RBAC/MAC Security for UML. In Proc. of 
the 18th Annual IFIP WG 11.3 Working Conference on Data 
and Applications Security. Sitges, Spain, July, 2004. 
[10] http://www.engr.uconn.edu/~steve/DSEC/dsec.html.  
[11] Epstein,  P.  and  Sandhu,  R.  Towards  A  UML  Based 
Approach  to  Role  Engineering.  In  Proc.  of  the  4th  ACM 
workshop on Role-based Access Control, 1999. 
[12] Ferraiolo, D., et al. Proposed NIST Standard for Role-Based 
Access  Control.  ACM  Trans.  on  Information  and  System 
Security, Vol. 4, No. 3. August 2001. 
[13] Gurevich,  Y.  Evolving  algebras  1993:  Lipari  guide.    In  E. 
Borger,  editor,  Specification  and  Validation  Methods. 
Oxford University Press, 1995. 
[14] Jacobson, I., et al. Object-Oriented Software Engineering: A 
Use Case Driven Approach. Addison-Wesley, 1992.  
[15] Jürjens,  J.  Principles  for  Secure  Systems  Design.  Ph.D. 
dissertation.  Oxford  University  Computing  Laboratory. 
Oxford University, 2002. 
[16] Jürjens,  J.  UMLsec:  Extending  UML  for  Secure  Systems 
Development.  In Proc. of UML 2002, LNCS, Sept. 30 - Oct. 
4, 2002.  
[17] Lodderstedt, T., et al. SecureUML: A UML-Based Modeling 
Language for Model-Driven Security. In Proc. of UML 2002, 
LNCS, 2002. 
[18] OMG. Unified Modeling Language, v.1.5. UML™ Resource 
Page. http://www.omg.org/uml/ 
[19] Osborn, S., et al. Configuring Role-Based Access Control to 
Enforce  Mandatory  and  Discretionary  Access  Control 
Policies.  ACM  Trans.  on  Information  and  System  Security. 
Vol. 3, No. 2, May 2000. 
[20] Osborn, S. Information Flow Analysis of an RBAC System. 
In Proc. of SACMAT’02, June, 2002. 
[21] Phillips,  C.,  et  al.  Security  Assurance  for  an  RBAC/MAC 
Security Model. In Proc. of the 2003 IEEE Info. Assurance 
Wksp., 2003. 
[22] Ray,  I.,  et  al.  Using  Parameterized  UML  to  Specify  and 
Compose  Access  Control  Models.  In  Proc.  of  the  6th  IFIP 
Working Conference on Integrity & Internal Control in Info. 
Systems, 2003. 
[23] Rumbaugh, J., et al. Object-Oriented Modeling and Design. 
Prentice-Hall, 1991. 
[24] Shin, M. and Ahn, G. UML-Based Representation of Role-
Based Access Control. In Proc. of the IEEE 9th Intl. Wksp. 
on  Enabling  Technologies:  Infrastructure  for  Collaborative 
Enterprises, 2000. 
[25] Thuraisingham,  B.  Mandatory  Security  in  Object-Oriented 
Database Systems. In Proc. of 1989 OOPSLA Conf., 1989. 
[26] Zdonik,  S.  and  Maier,  D.  Fundamentals  of Object-Oriented 
in  Object-Oriented  Database 
Databases, 
Systems, S. Zdonik and D. Maier (eds.), Morgan Kaufmann, 
1990.
in  Readings