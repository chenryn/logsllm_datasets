进。 
交付活动 
开展计划、评审会议，以快
速有效的交付业务价值。 
同上一级 
——具备措施减少变更带
来的影响。 
同上一级 
人员组织 
明确产品经理、敏捷教练、
团队三类角色。 
同上一级 
——建立特性团队。 
同上一级 
——采用扁平化的敏捷团
队组织架构。 
6.3 敏捷组织模式 
6.3.1 敏捷角色 
敏捷角色应以价值交付为目标，持续提升交付效率。对照表 6 给定的敏捷角色能力成熟度分级规则，
确定敏捷角色能力成熟度级别。 
表6 敏捷角色 
基础级 
增强级 
先进级 
敏捷角色 
——不同角色具有明确分
工。 
——每个角色具有专一的
专业技术能力。 
——每个角色关注自身的
工作。 
同上一级 
——具有敏捷教练的角色。 
——每个角色在完成自己
身工作的同时，能够快速变
更角色。 
——团队能关注整体交付
进度。 
同上一级 
——没有敏捷教练的情况
下团队依然能够有效运转。 
——团队成员能力趋于多
样化，每个成员有强项，具
备跨功能或角色的能力。 
——协作模式可形成借鉴
或推广的经验积累。 
6.3.2 团队结构 
团队结构是以价值交付的最小实现单元构建最小化的功能团队。对照表 7 给定的团队结构能力成熟
度分级规则，确定团队结构能力成熟度级别。 
表7 团队结构 
基础级 
增强级 
先进级 
团队结构 
——团队足够小，10 以下。 
——具有一致的约定。 
同上一级 
——组建特性团队。 
同上一级 
——能够持续提升团队。 
T/IAC XXXXX—201X 
6 
7 持续交付过程能力要求  
7.1 配置管理 
7.1.1 版本控制管理 
对照表 8 给定的版本控制管理能力成熟度分级规则，确定版本控制管理能力成熟度级别。 
表8 版本控制管理 
基础级 
增强级 
先进级 
版本控制 
——具有版本控制系统。 
——支持分支管理。 
——使用制品库管理构建
产物。 
同上一级 
——将配置文件、构建和部
署等自动化脚本纳入版本
控制系统。 
——分支频繁地向主干合
并。 
——所有交付制品纳入制
品库管理。 
同上一级 
——将软件生命周期的所
有配置纳入版本控制系统
管理。 
——持续优化的分支管理
机制。 
——持续交付的制品管理
机制。 
7.1.2 配置变更管理 
对照表 9 给定的配置变更管理能力成熟度分级规则，确定配置变更管理能力成熟度级别。 
表9 配置变更管理 
基础级 
增强级 
先进级 
变更管理 
——记录代码变更信息。 
——对重点变更进行评审。 
——具有清晰的版本号规
则。 
——手工回滚。 
同上一级 
——所有配置项变更由变
更系统触发。 
——每次变更都进行评审。 
——版本控制系统和变更
管理系统自动化关联。 
——自动化回滚。 
同上一级 
——可视化变更生命周期。 
——变更分级评审机制。 
——各个环节变更信息可
追溯。 
7.2 构建与持续集成 
7.2.1 构建 
构建指通过构建工具将软件代码转为可执行程序的过程。对照表10给定的构建能力成熟度分级规则，
确定能力成熟度级别。 
表10 构建 
基础级 
增强级 
先进级 
构建 
——通过脚本自动化构建。 同上一级 
同上一级 
T/IAC XXXXX—201X 
7 
——有独立的构建服务器。 
——每日自动构建。 
——构建环境和工具由专
人负责维护。 
——结构化的构建脚本。 
——构建环境配置标准化，
有独立的构建资源池。 
——定期自动构建，明确构
建计划和规则。 
——构建环境和工具由细
分的团队人员负责维护。 
——构建方式服务化。 
——构建资源动态弹性按
需分配与回收。 
——按需制定构建计划。 
——构建能力赋予全部团
队成员。 
7.2.2 持续集成    
持续集成是软件工程领域中的一种最佳实践，即鼓励研发人员频繁的向主干分支提交代码，频率为
至少每天一次。每次提交都触发完整的编译构建和自动化测试流程，缩短反馈周期，及时修复问题，从
而保证软件代码质量，减少大规模代码合并的冲突和问题，软件可按照指定时间发布。对照表11给定的
持续集成能力成熟度分级规则，确定持续集成能力成熟度级别。 
表11 持续集成 
基础级 
增强级 
先进级 
持续集成 
——统一的持续集成服务。 
——几天或几周集成一次。 
——代码集成作为软件交
付中的一个独立阶段。 
——集成问题反馈和解决
周期以天计算。 
同上一级 
——专门的持续集成团队。 
——至少每天集成一次。 
——集成问题反馈和解决
在几个小时内完成。 
同上一级 
——持续优化和改进团队
持续集成服务。 
——每天多次集成的能力。 
——集成问题反馈和解决
在半个小时内完成。 
7.3 测试管理 
7.3.1 测试分层策略 
对照表 12 给定的测试分层策略能力成熟度分级规则，确定测试分层策略能力成熟度级别。 
表12 测试分层策略 
基础级 
增强级 
先进级 
测试分层策略： 
——已建立分层策略。 
同上一级 
——测试设计以对接口/服
务级测试为主。 
同上一级 
——测试设计以对代码级
测试为主。 
7.3.2 代码质量管理 
在代码变更后，应对代码质量进行检查、分析，并针对问题给出改进建议。对照表 13 给定的代码
质量管理能力成熟度分级规则，确定代码质量管理能力成熟度级别。 
表13 代码质量管理 
T/IAC XXXXX—201X 
8 
基础级 
增强级 
先进级 
代码质量管理 
——已建立团队级代码质
量规约。覆盖部分代码质量
指标，如代码规范、错误复
杂度等。 
——采用自动化结合手工
方式进行代码质量检查。 
——对代码质量检查结果
给出反馈，只处理部分检查
结果。 
——已建立组织级代码质
量规约。将安全漏洞检查、
合规检查纳入规约。 
——采用完全自动化的方
式进行代码质量检查。 
——对代码质量检查结果
及时处理。 
——建立公司级代码质量
规约。定期对规约进行优
化。 
——具备企业级代码质量
管理平台，以服务的形式提
供对代码质量的检查分析。 
——对代码质量数据进行
统一管理，可有效追溯代码
质量。 
7.3.3 自动化测试 
对照表 14 给定的自动化测试能力成熟度分级规则，确定自动化测试能力成熟度级别。 
表14 自动化测试 
基础级 
增强级 
先进级 
自动化测试 
——对业务级的 UI 测试进
行自动化设计。 
——专人统一管理自动化
测试脚本与工具。 
——支持自动化执行。 
——具备一定的自动化分
析能力。 
——对接口/服务和代码级
测试进行自动化设计。 
——具有统一的自动化测
试框架。 
——自动化测试由流水线
自动化触发。 
——具有较强的自动分析
能力。 
——对性能、稳定性、安全
性等非功能性测试进行自
动化测试。 
——建立自动化测试自服
务平台。 