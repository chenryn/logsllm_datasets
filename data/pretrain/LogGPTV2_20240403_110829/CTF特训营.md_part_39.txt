P->fdnextsize->bk_nextsize=P->bk_nextsize;
P->bk_nextsize->fd_nextsize=P->fd_nextsize;
1
---
## Page 477
CTF特训营：技术详解、解题方法与
13.3.2 unlink
477/1144
其中，最值得注意的是FD->bk!=pllBK->fd!=p，很多利用方式都
难以满足这个条件，详情可以查询AdvancedHeapExploitation。目前
较为有效的突破手段就是freenote（20150CTF的freenote题目）或
stkof（HITCONCTF2014的stkof题目）的方式。详细内容请参见
http://winesap.logdown.com/posts/258859-0ctf-2015-freenode-write-
Lp。
下面介绍freenote的主要利用思路。
freedchunk的双链表结构如下：
FD=p->fd=*（&p+2）
BK=p->bk=*（&p+3）
执行unlink（P，BK，FD）时，需要满足FD->bk==P&&BK->fd==P
条件，即：
d==（+[]d）=（+(+dg））=xq
int main()
char*ptr[4];
int size0,size1,size2;
size0= size1= size2=0x50;
int i;
for (i = 0; i < 4; i++)
{
---
## Page 490
CTF特训营：技术详解、解题方法与
13.3.4 forgotten chunk
490/1144
ptr[] = malloc(0x40);
printf("ptr[%d]=%pin",i,ptr[i]);
int NMP=*（long long*)（ptr[0]+0x48）&0x7;
//modifychunk2'ssizearea
*(long long *)（ptr[0]+0x48)=(size1 +size2)|NMP;
free(ptr[1]);
char*new_ptr;
new_ptr = malloc(0x40+0x50);
printf("-
--In");
for (i = 0; i< 4; i++)
print(" ptr[%d] = %pin", i, ptr[]);
printf(new_ptr = %pln", new_ptr);
测试结果如图13-15所示。
ptr[o]
0x13d3010
ptr[1]
二
0x13d3060
ptr[2]
二
0x13d30b0
ptr[3]
二
0x13d3100
ptr[o]
=
0x13d3010
ptr[1]
0x13d3060
ptr[2]
二
0x13d30b0
ptr[3]
=
0x13d3100
new_ptr
0x13d3060
图13-15测试结果
---
## Page 491
CTF特训营：技术详解、解题方法与
13.3.4 forgotten chunk
491/1144
由图13-15所示可以看到，申请的new_ptr和ptr[2]相同，然而
new_ptr甲请的大小为0x40+0x50，刚好为ptr[1]数据块大小和ptr[2]所
指向的堆块的大小之和，由此可见，此时堆块已经进行了合并，而且
ptr[2]为残留堆块，虽然没有释放，但是与new_ptr发生了重叠。
gdb中的调试过程如下。
在free函数调用处下断点，如图13-16所示。
free调用后，查看内存，如图13-17所示。
可以看到，堆块2和新堆块发生了重叠。new_ptr新申请的堆块就
是该新堆块，在此不再展示。
更多复杂的forgottenchunk的情况可以参考前面给出的资料，其
中对大部分情况进行了详细描述，这对于提高利用技巧大有益，读
者可以自行参考，在此不再赘述
这里主要介绍常用的利用方式，具体如下。
1）堆扩展（extendchunk），分为往后扩展和往前合并，具体如