探寻Tomcat⽂件上传流量层⾯绕waf新姿
势
探寻Tomcat⽂件上传流量层⾯绕waf新姿势
写在前⾯
Pre
前置
深⼊
变形 更新2022-06-20
扩⼤利⽤⾯
更新Spring 2022-06-20
Spring4
Spring5
参考⽂章
写在前⾯
⽆意中看到ch1ng师傅的⽂章觉得很有趣，不得不感叹师傅太厉害了，但我⼀看那长篇的函
数总觉得会有更骚的东西，所幸还真的有，借此机会就发出来⼀探究竟，同时也不得不感慨
下RFC⽂档的妙处，当然本⽂针对的技术也仅仅只是在流量层⾯上waf的绕过
Pre
很神奇对吧，当然这不是终点,接下来我们就来⼀探究竟
前置
这⾥简单说⼀下师傅的思路
部署与处理上传war的servlet是 org.apache.catalina.manager.HTMLManagerServlet
在⽂件上传时最终会通过处
理 org.apache.catalina.manager.HTMLManagerServlet#upload
调⽤的是其⼦类实现
类 org.apache.catalina.core.ApplicationPart#getSubmittedFileName
这⾥获取filename的时候的处理很有趣
看到这段注释，发现在RFC 6266⽂档当中也提出这点
Avoid including the "\" character in the quoted-string form of the 
filename parameter, as escaping is not implemented by some user agents, 
and "\" can be considered an illegal path character.
那么我们的tomcat是如何处理的嘞？这⾥它通过函数 HttpParser.unquote 去进⾏处理
简单做个总结如果⾸位是 " (前提条件是⾥⾯有 \ 字符)，那么就会去掉跳过从第⼆个字符开
始，并且末尾也会往前移动⼀位，同时会忽略字符 \ ，师傅只提到了类似 test.\war 这样的
例⼦
但其实根据这个我们还可以进⼀步构造⼀些看着⽐较恶⼼的⽐如 filename=""y\4.\w\arK"
public static String unquote(String input) {
        if (input == null || input.length() ''} ,分别是编码，语⾔和
待解码的字符串，同时这⾥还适配了对url编码的解码，也就是 fromHex 函数,具体代码如下，
其实就是url解码
因此我们将值当中值得注意的点梳理⼀下
1. ⽀持编码的解码
2. 值当中可以进⾏url编码
3. @code''  中间这位language可以随便写，代码⾥没
有⽤到这个的处理
既然如此那么我们⾸先就可以排出掉utf-8，毕竟这个解码后就直接是明⽂，从Java标准库当中
的charsets.jar可以看出，⽀持的编码有很多
private static byte[] fromHex(final String text) {
  final int shift = 4;
  final ByteArrayOutputStream out = new 
ByteArrayOutputStream(text.length());
  for (int i = 0; i  text.length() - 2) {
        break; // unterminated sequence
      }
      final byte b1 = HEX_DECODE[text.charAt(i++) & MASK];
      final byte b2 = HEX_DECODE[text.charAt(i++) & MASK];
      out.write((b1  maps = Charset.availableCharsets();
StringBuilder sb = new StringBuilder();
sb.append("{");
for (Map.Entry entry : maps.entrySet()) {
  String key = entry.getKey();
  Charset value = entry.getValue();
  sb.append("\"" + key + "\",");
}
sb.deleteCharAt(sb.length() - 1);
sb.append("}");
System.out.println(sb.toString());
//res
这⾥作为掩饰我就随便选⼀个了 UTF-16BE
{"Big5","Big5-HKSCS","CESU-8","EUC-JP","EUC-
KR","GB18030","GB2312","GBK","IBM-
Thai","IBM00858","IBM01140","IBM01141","IBM01142","IBM01143","IBM01144","I
BM01145","IBM01146","IBM01147","IBM01148","IBM01149","IBM037","IBM1026","I
BM1047","IBM273","IBM277","IBM278","IBM280","IBM284","IBM285","IBM290","IB
M297","IBM420","IBM424","IBM437","IBM500","IBM775","IBM850","IBM852","IBM8
55","IBM857","IBM860","IBM861","IBM862","IBM863","IBM864","IBM865","IBM866
","IBM868","IBM869","IBM870","IBM871","IBM918","ISO-2022-CN","ISO-2022-
JP","ISO-2022-JP-2","ISO-2022-KR","ISO-8859-1","ISO-8859-13","ISO-8859-
15","ISO-8859-2","ISO-8859-3","ISO-8859-4","ISO-8859-5","ISO-8859-6","ISO-
8859-7","ISO-8859-8","ISO-8859-9","JIS_X0201","JIS_X0212-1990","KOI8-
R","KOI8-U","Shift_JIS","TIS-620","US-ASCII","UTF-16","UTF-16BE","UTF-
16LE","UTF-32","UTF-32BE","UTF-32LE","UTF-8","windows-1250","windows-
1251","windows-1252","windows-1253","windows-1254","windows-
1255","windows-1256","windows-1257","windows-1258","windows-31j","x-Big5-
HKSCS-2001","x-Big5-Solaris","x-COMPOUND_TEXT","x-euc-jp-linux","x-EUC-
TW","x-eucJP-Open","x-IBM1006","x-IBM1025","x-IBM1046","x-IBM1097","x-
IBM1098","x-IBM1112","x-IBM1122","x-IBM1123","x-IBM1124","x-IBM1166","x-
IBM1364","x-IBM1381","x-IBM1383","x-IBM300","x-IBM33722","x-IBM737","x-
IBM833","x-IBM834","x-IBM856","x-IBM874","x-IBM875","x-IBM921","x-
IBM922","x-IBM930","x-IBM933","x-IBM935","x-IBM937","x-IBM939","x-
IBM942","x-IBM942C","x-IBM943","x-IBM943C","x-IBM948","x-IBM949","x-
IBM949C","x-IBM950","x-IBM964","x-IBM970","x-ISCII91","x-ISO-2022-CN-
CNS","x-ISO-2022-CN-GB","x-iso-8859-11","x-JIS0208","x-JISAutoDetect","x-
Johab","x-MacArabic","x-MacCentralEurope","x-MacCroatian","x-
MacCyrillic","x-MacDingbat","x-MacGreek","x-MacHebrew","x-MacIceland","x-
MacRoman","x-MacRomania","x-MacSymbol","x-MacThai","x-MacTurkish","x-
MacUkraine","x-MS932_0213","x-MS950-HKSCS","x-MS950-HKSCS-XP","x-mswin-
936","x-PCK","x-SJIS_0213","x-UTF-16LE-BOM","X-UTF-32BE-BOM","X-UTF-32LE-
BOM","x-windows-50220","x-windows-50221","x-windows-874","x-windows-
949","x-windows-950","x-windows-iso2022jp"}
同样的我们也可以进⾏套娃结合上⾯的 filename=""y\4.\w\arK" 改成 filename="UTF-
16BE'Y4tacker'%00%22%00y%00%5C%004%00.%00%5C%00w%00%5C%00a%00r%00K"
接下来处理点⼩加强，可以看到在这⾥分隔符⽆限加，⽽且加了
号的字符之后也会去除⼀
个
号
因此我们最终可以得到如下payload，此时仅仅基于正则的waf规则就很有可能会失效
可以看见成功上传
变形 更新2022-06-20
这⾥测试版本是Tomcat8.5.72，这⾥也不想再测其他版本差异了只是提供⼀种思路
在此基础上我发现还可以做⼀些新的东西，其实就是对
org.apache.tomcat.util.http.fileupload.ParameterParser#parse(char[], 
int, int, char) 函数进⾏深⼊分析
在获取值的时候 paramValue = parseQuotedToken(new char[] {separator }); ，其
实是按照分隔符 ; 分割，因此我们不难想到前⾯的东西其实可以不⽤ " 进⾏包裹，在
parseQuotedToken最后返回调⽤的是 return getToken(true); ，这个函数也很简单就不必
多解释
------WebKitFormBoundaryQKTY1MomsixvN8vX
Content-Disposition: form-data*;;;;;;;;;;name*="UTF-
16BE'Y4tacker'%00d%00e%00p%00l%00o%00y%00W%00a%00r";;;;;;;;filename*="UTF-
16BE'Y4tacker'%00%22%00y%00%5C%004%00.%00%5C%00w%00%5C%00a%00r%00K"
Content-Type: application/octet-stream
123
------WebKitFormBoundaryQKTY1MomsixvN8vX--
private String getToken(final boolean quoted) {
        // Trim leading white spaces
        while ((i1 < i2) && (Character.isWhitespace(chars[i1]))) {
            i1++;
可以看到这⾥也是成功识别的
既然调⽤ parse 解析参数时可以不被包裹，结合getToken函数我们可以知道在最后⼀个参数