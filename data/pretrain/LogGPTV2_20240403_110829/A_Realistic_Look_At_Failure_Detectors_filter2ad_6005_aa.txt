# A Realistic Look at Failure Detectors

**Authors:**
- Carole Delporte-Gallet
- Hugues Fauconnier
- Rachid Guerraoui

**Affiliations:**
- Laboratoire d'Informatique, UniversitÃ© Paris VII - Denis Diderot
- Distributed Programming Laboratory, Swiss Federal Institute of Technology in Lausanne

## Abstract
This paper examines the role of failure detectors in environments where the number of faulty processes is unbounded. We demonstrate that the class P of Perfect failure detectors is the weakest (among all failure detector classes) capable of solving fundamental agreement problems such as uniform consensus, atomic broadcast, and terminating reliable broadcast (also known as the Byzantine Generals problem). Specifically, we show that in this environment, the Chandra-Toueg hierarchy of failure detectors collapses, with P being the only class capable of solving these agreement problems. This finding helps explain why most reliable distributed systems rely on group membership services that aim to emulate P.

As a side effect of our work, we establish that in our general environment, uniform consensus is strictly harder than consensus, and both are strictly weaker than terminating reliable broadcast. Our motivation is to determine the exact information required for agreement in an environment with an unbounded number of failures (focusing on process crash-failures).

## 1. Introduction

### 1.1 Motivation
Agreement is a fundamental challenge in reliable distributed computing, especially in failure-prone environments. Without any synchrony assumptions (e.g., bounds on process relative speeds and communication delays), it is impossible for distributed processes communicating through reliable channels to reach agreement if even one of them might fail by crashing [5]. Synchrony assumptions are necessary to provide processes with the information needed to reach agreement.

### 1.2 Background: The Failure Detector Hierarchy
Chandra and Toueg introduced a precise way to measure the information about failures provided by a failure detector [1]. They established a hierarchy of failure detector classes, where each class captures a specific level of information about failures. The hierarchy includes:
- **Eventually Strong (ES)**: Solves consensus if a majority of processes are correct.
- **Strong (S)**: Solves consensus even if the number of faulty processes is unbounded.
- **Perfect (P)**: Solves terminating reliable broadcast even if the number of faulty processes is unbounded.

Chandra, Toueg, and Hadzilacos proved that ES is the weakest class for consensus when a majority of processes are correct [2]. However, ES is not sufficient for consensus or terminating reliable broadcast if the number of faulty processes is unbounded.

### 1.3 Contributions
In an environment where the number of possible failures is unbounded, we show that P is the weakest failure detector class capable of solving consensus (hence atomic broadcast) and terminating reliable broadcast. We use simple algorithmic reductions to prove our result, excluding failure detectors that cannot be implemented under realistic synchrony assumptions.

Interestingly, while S solves consensus even if the number of faulty processes is unbounded, within the space of realistic failure detectors, S and P have the same computational power. This suggests that the difference between these classes is artificial in a general environment.

Our paper also highlights two additional results:
1. In the correct-restricted variant of consensus, P is not the weakest. Uniform consensus is strictly harder than non-uniform consensus.
2. Consensus and atomic broadcast are strictly weaker problems than terminating reliable broadcast.

## 2. System Model

### 2.1 Failure Patterns and Environments
We consider a distributed system with a finite set of processes \( \Pi = \{P_1, P_2, \ldots, P_n\} \) (where \( n > 3 \)). A process \( P_i \) is said to crash at time \( t \) if it does not perform any action after \( t \). Failures are permanent, and a correct process is one that does not crash. A failure pattern \( F \) is a function from the set of natural numbers \( \mathbb{N} \) to the power set of \( \Pi \), where \( F(t) \) denotes the set of processes that have crashed through time \( t \). An environment \( E \) is a set of failure patterns, and in this paper, we consider the environment that contains all possible failure patterns, meaning we do not bound the number of processes that can crash.

### 2.2 Failure Detectors
A failure detector history \( H \) with range \( R \) is a function from \( \Pi \times \mathbb{N} \) to \( R \). For every process \( P_i \in \Pi \) and time \( t \in \mathbb{N} \), \( H(P_i, t) \) denotes the value output by the failure detector module of \( P_i \) at time \( t \). A failure detector \( V \) is a function that maps each failure pattern \( F \) to a set of failure detector histories with range \( R_V \). The failure detectors introduced in [1] all have a range \( R = 2^\Pi \). For any failure pattern \( F \) and any history \( H \in V(F) \), \( H(P_i, t) \) is the set of processes suspected by \( P_i \) at time \( t \).

### 2.3 Algorithms
An algorithm \( A \) is a collection of local algorithms \( A_i \) (one per process \( P_i \)). Each local algorithm \( A_i \) specifies the actions of \( P_i \) based on its local state and the values it receives from other processes and the failure detector.

---

This revised version aims to make the text more coherent, professional, and easier to understand.