ing “normally.”
Research on high-performance operating systems em-
phasizes extensible [5, 31] and minimal [23] kernels.
These systems require novel security mechanisms to
moderate the increased power given to application
programs, relative to operating systems with conven-
In contrast, our work on
tional, monolithic kernels.
biologically-inspired OS extensions assumes a conven-
tional kernel, and aims to increase the stability and secu-
rity of the system.
Adaptive, on-line control has been widely studied as a
method for improving system performance. Whether
motivated by non-stationary workloads [7], extensible
operating systems [32], parallelism [25], or on-line
database transaction processing [39], researchers have
focused on using adaptive methods for improving sys-
tem performance, not robustness. Work in using adap-
tive control in real-time systems [6] has focused on us-
ing adaptation to help meet timing and robustness con-
straints.
Finally, pH can be seen as a type of fault tolerant system
[8, 33, 19], except that we focus on security violations
instead of hardware or software failures.
7 Discussion
A major point of this paper is that it is feasible to use
system-call delays to stop intrusions in real-time, with-
out prior knowledge about what form an attack might
take (unlike signature-based scanners). The three exam-
ple exploits help show that pH can do this, even for very
different types of attacks. However, in practice pH’s ef-
fectiveness is determined by whether it can obtain stable
normals for the binaries on a system. Currently, pH can
do this automatically only for programs which are rel-
atively simple and are called on a regular basis; even
then, there is an ongoing risk that pH could be trained
to accept intrusions as normal behavior. Research still
needs to be done on more effective training heuristics
that minimize the time for pH to obtain a normal proﬁle,
but also minimize the chances of pH tolerizing truly ab-
normal behavior. By incorporating such heuristics into a
pH control daemon, we should be able to minimize the
need for user or administrator intervention.
It may be necessary to implement a default timeout
mechanism through pH, in which any process that is
delayed beyond a certain point is automatically termi-
nated. It may also be necessary to increase pH’s reper-
toire to include actions such as system call parameter
modiﬁcations. Additional response mechanisms may re-
quire computationally expensive analysis algorithms to
be added; because abnormally-behaving processes are
delayed, pH actually has the time to perform more so-
phisticated analysis when anomalies are detected. Our
philosophy, however, is to wait until such a need arises
before implementing additional mechanisms.
Ofﬁce of Naval Research (grant N00014-99-1-0417),
and the Intel Corporation.
A second major point of the paper is to show that system-
call monitoring is practical, even when every executing
process on the system is monitored simultaneously. pH
routinely monitors every system call executed by every
process with little perceptible overhead. Thus, we be-
lieve that the current implementation of pH is efﬁcient
enough to satisfy a wide variety of users.
The current version of pH is not completely secure. pH
does restrict use of the sys pH system call to users who
have the kill capability (which, by default is only root);
however, there are no checks to ensure that a proﬁle has
not been tampered with on disk, or restrictions on user
access to proﬁles — they are currently owned by root,
but readable by anyone. An attacker could use this in-
formation to design a less-detectable attack based on the
system call usage on the target machine. pH could be
used to generate a denial-of-service attack by trigger-
ing abnormal (but otherwise benign) behavior in a target
program. Also, it may be useful to implement mecha-
nisms to prevent users (including root) from being able
to directly modify the stored proﬁles. Such “hardening”
of pH, though, should wait until pH’s basic functionality
has undergone further testing.
In the past, we have emphasized that system call pro-
ﬁling is a suitable technique for monitoring privileged
programs. pH in its current form, however, monitors
and responds to anomalies in all programs. In the fu-
ture, we may decide to restrict monitoring to privileged
programs; yet, with the increasing use of active con-
tent on the Internet, it may also be desirable to have
pH respond to anomalies in word processors and web
browsers. Some large programs such as netscape are im-
plemented using userspace threads, causing system calls
to be interleaved in apparently random patterns due to
variations in thread scheduling; thus, the system call pro-
ﬁles of these programs may never stabilize. We believe,
though, that this will be less of a problem in the future,
as programs switch to using kernel threads. Because
the Linux kernel uses the same data structure to repre-
sent threads and processes, pH is able to monitor kernel
threads individually, avoiding interleaving effects.
Steven Hofmeyr wrote the original program for analyz-
ing system call traces, Julie Rehmeyr rewrote the code
so that it was suitable to run in the kernel, and Ge-
off Hunsicker developed the original login trojan, which
we ported for these experiments. Margo Seltzer sug-
gested some of the benchmarks used in the paper. Erin
O’Neill pointed out to us that the immune system is bet-
ter thought of as a system for maintaining homeostasis
than as a defense mechanism. We are grateful to the
above people and all the members of the Adaptive Com-
putation group at UNM, especially David Ackley, for
their many helpful suggestions and interesting conver-
sations about this work.
9 Availability
The current version of pH may be obtained via the fol-
lowing web page:
http://www.cs.unm.edu/∼soma/pH/
The distribution contains a kernel patch and a few sup-
port programs. All are licensed under the terms of the
GNU General Public License (GPL).
References
[1] Debra Anderson, Thane Frivold, and Alfonso
Valdes. Next-generation intrusion detection expert
system (NIDES): A summary. Technical Report
SRI–CSL–95–07, Computer Science Laboratory,
SRI International, May 1995.
[2] Ivan Arce.
list
BUGTRAQ Mailing
SSH-1.2.27 & RSAREF2
exploit.
(bug-
PI:EMAIL), December 14 1999.
.
8 Acknowledgments
The authors gratefully acknowledge the support of the
National Science Foundation (grant IRI-9711199), the
[3] Axent Technologies,
Inc.
http://www.axent.com, 2000.
Netprowler.
[4] M. J. Bach. The Design of the UNIX Operat-
ing System. Prentice-Hall, Englewood Cliffs, NJ,
1986.
[5] Brian Bershad, Stefan Savage, Przemyslaw
Pardyak, Emin Gun Sirer, David Becker, Marc
Fiuczynski, Craig Chambers, and Susan Eggers.
Extensibility, safety and performance in the spin
operating system.
In Proceedings of the 15th
ACM Symposium on Operating System Principles
(SOSP-15), pages 267–284, Copper Mountain,
CO, 1995.
[6] Thomas E. Bihari and Karsten Schwan. Dynamic
adaptation of real-time software. ACM Transac-
tions on Computer Systems, 9(2):143–174, May
1991.
[7] P.R. Blevins and C.V. Ramamoorthy. Aspects of
a dynamically adaptive operating system.
IEEE
Transactions on Computers, 25(7):713–725, July
1976.
[8] Anita Borg, Wolfgang Blau, Wolfgang Graetsch,
Ferdinand Herrmann, and Wolfgang Oberle. Fault
tolerance under unix. ACM Transactions on Com-
puter Systems, 7(1):1–24, February 1989.
[9] Rodney A. Brooks. A robust layered control
system for a mobile robot. A.I. Memo 864,
Massachusetts Institute of Technology, September
1985.
[10] Rodney A. Brooks and Anita M. Flynn. Fast,
cheap, and out of control: a robot invasion of the
solar system. Journal of The British Interplanetary
Society, 42:478–485, 1989.
[11] A. Brown and M. Seltzer. Operating system bench-
marking in the wake of lmbench: A case study of
the performance of netbsd on the intel x86 archi-
tecture. In Proceedings of the 1997 ACM SIGMET-
RICS Conference on Measurement and Modeling
of Computer Systems, Seattle, WA, June 1997.
[12] Cisco Systems,
Inc.
Cisco secure intrusion
http://www.cisco.com/warp
detection system.
/public/cc/cisco/mkt/security/nranger/tech
/ntran tc.htm, 1999.
[13] Sendmail
Consortium.
sendmail.org.
http://www.sendmail.org/, 2000.
[14] Transmeta Corporation.
Longrun technology.
/crusoe/lowpower/longrun.html, January 2000.
Crusoe processor:
http://www.transmeta.com
[15] Michael D. Ernst, Adam Czeisler, William G. Gris-
wold, , and David Notkin. Quickly detecting rel-
evant program invariants.
In Proceedings of the
22nd International Conference on Software Engi-
neering (ICSE 2000), Limerick, Ireland, June 7–9
2000.
[16] S. Forrest, S. Hofmeyr, A. Somayaji,
and
T. Longstaff. A sense of self for unix processes.
In Proceedings of the 1996 IEEE Symposium on
Computer Security and Privacy. IEEE Press, 1996.
[17] L. T. Heberlein, G. V. Dias, K. N. Levitt,
B. Mukherjee, J. Wood, and D. Wolber. A net-
work security monitor. In Proceedings of the IEEE
Symposium on Security and Privacy. IEEE Press,
1990.
[18] G.J. Henry. The fair share scheduler. Bell Sys-
tems Technical Journal, 63(8):1845–1857, October
1984.
[19] M. A. Hiltunen and R. D. Schlichting. Adaptive
distributed and fault-tolerant systems. Computer
Systems Science and Engineering, 11(5):275–285,
September 1996.
[20] S. Hofmeyr, A. Somayaji, and S. Forrest. Intrusion
detection using sequences of system calls. Journal
of Computer Security, 6:151–180, 1998.
[21] Steven A. Hofmeyr. An Immunological Model of
Distributed Detection and its Application to Com-
puter Security. PhD thesis, University of New
Mexico, 1999.
[22] Internet Security Systems, Inc. RealSecure 3.0.
http://www.iss.net, 1999.
[23] M. Frans Kaashoek, Dawson R. Engler, Gregory R.
Ganger, H´ector M. Brice˜no, Russell Hunt, David
Mazi`eres, Thomas Pinckney, Robert Grimm, John
Jannotti, and Kenneth Mackenzie. Application per-
formance and ﬂexibility on exokernel systems. In
Proceedings of the 16th ACM Symposium on Oper-
ating Systems Principles (SOSP ’97), pages 52–65,
Saint-Malˆo, France, October 1997.
[24] J. Kay and P. Lauder. A fair share scheduler.
Communications of the ACM, 31(1):44–55, Jan-
uary 1988.
[25] D.M. Ogle, K. Schwan, and R. Snodgrass.
Application-dependent dynamic monitoring of dis-
tributed and parallel systems. IEEE Transactions
on Parallel and Distributed Systems, 4(7):762–
778, July 1993.
[26] Erin O’Neill. Personal Communication, October
1998.
[27] P. Porras and P. G. Neumann. EMERALD: Event
monitoring enabling responses to anomalous live
disturbances. In Proceedings National Information
Systems Security Conference, 1997.
[39] G. Weikum, C. Hasse, A. Monkeberg, and P. Zab-
back. The COMFORT automatic tuning project.
Information Systems, 19(5):381–432, July 1994.
[28] Wojciech Purczynski.
Sendmail & procmail
root exploits on Linux kernel up to
local
2.2.16pre5.
(bug-
PI:EMAIL), June 9 2000. Message-
.
BUGTRAQ Mailing list
[29] SSH Communications Security. SSH secure shell.
http://www.ssh.com/products/ssh/, 2000.
[30] R. Sekar, T. Bowen, and M. Segal. On preventing
intrusions by process behavior monitoring. In Pro-
ceedings of the Workshop on Intrusion Detection
and Network Monitoring. The USENIX Associa-
tion, April 1999.
[31] Margo Seltzer, Yasuhiro Endo, Christopher Small,
and Keith Smith. Dealing with disaster: Surviving
misbehaved kernel extensions. In Proceedings of
the 1996 Symposium on Operating System Design
and Implementation (OSDI II), 1999.
Self-
[32] Margo Seltzer and Christopher Small.
monitoring and self-adapting systems.
In
Proceedings of the 1997 Workshop on Hot Topics
on Operating Systems, Chatham, MA, May 1997.
http://www.eecs.harvard.edu/∼vino/vino/papers/
monitor.html.
[33] E. Shokri, H. Hecht, P. Crane, J. Dussault, and
An approach for adaptive fault-
K.H. Kim.
tolerance in object-oriented open distributed sys-
tems. International Journal of Software Engineer-
ing and Knowledge Engineering, 8(3):333–346,
September 1998.
[34] A. Somayaji, S. Hofmeyr, and S. Forrest. Princi-
ples of a computer immune system. In New Secu-
rity Paradigms Workshop, New York, 1998. Asso-
ciation for Computing Machinery.
[35] SPI. Debian. http://www.debian.org/, 2000.
[36] Andrew S. Tanenbaum. Computer Networks, chap-
ter 3, pages 145–146. Prentice Hall PTR, Engle-
wood Cliffs, NJ, 2nd edition, 1989.
[37] timecop. Root kit SSH 5.0.
http://www.ne.jp
/asahi/linux/timecop/, January 2000.
[38] C. Warrender, S. Forrest, and B. Pearlmutter. De-
tecting intrusions using system calls: Alternative
data models.
In Proceedings of the 1999 IEEE
Symposium on Security and Privacy, pages 133–
145, Los Alamitos, CA, 1999. IEEE Computer So-
ciety.