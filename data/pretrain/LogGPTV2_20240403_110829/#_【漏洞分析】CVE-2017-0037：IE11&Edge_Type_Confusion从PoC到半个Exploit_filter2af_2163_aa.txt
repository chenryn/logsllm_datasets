# 【漏洞分析】CVE-2017-0037：IE11&Edge Type Confusion从PoC到半个Exploit
|
##### 译文声明
本文是翻译文章，文章来源：whereisk0shl.top
原文地址：[http://whereisk0shl.top/cve_2017_0037_ie11&edge_type_confusion.html](http://whereisk0shl.top/cve_2017_0037_ie11&edge_type_confusion.html)
译文仅供参考，具体内容表达以及含义原文为准。
****
**前言**
前段时间Google Project
Zero(PJ0)曝光了一个关于IE11和Edge的一个类型混淆造成代码执行的漏洞，微软至今未推出关于这个漏洞的补丁，我对这个漏洞进行了分析，并且通过PoC构造了半个Exploit，为什么是半个呢，首先这个漏洞攻击面比较窄，只能控制Array里+0x4位置的值，通过类型混淆会认为这个值是一个指针，随后会调用指针某偏移处的虚函数，当我们能够控制这个指针的值的时候，虚函数也能够得到控制。这样就能劫持程序流，达到代码执行的效果。但这其中涉及到一个ASLR的问题，由于地址随机化，导致我们就算控制跳转之后，无法通过info
leak来构造ROP，也就是DEP也无法绕过。
这里我也有考虑到袁哥的DVE，但由于我们并没有RW
primitives，因此我们控制关键指针的条件太有限，导致想通过GodMod来执行脚本的方法似乎也不太可行（或者我没有发现？求大牛指教！）。
因此这里，我写了一个在关闭DEP时可以使用的exploit，并且和大家一起分享从PoC到Exp的整个过程，不得不说过程还是很麻烦的，因为想寻找这个Array+0x4位置的控制值如何能够DWORD
SHOOT，我跟了Layout::TableBoxBuilder类下的很多函数。
PJ0 CVE-2017-0037 PoC地址：
目前来看，微软并没有更新这个exp的补丁，但是有人利用0patch修补了这个漏洞，其实我看起来感觉不太像从根本上解决了这个漏洞的问题：
尽管这个Type Confusion攻击面有限，但是Type
Confusion这种漏洞是非常常见的，它的原理一般情况下是由于函数处理时，没有对对象类型进行严格检查，导致可以通过某些手段来造成类型混淆，通过对其他可控类型的控制可以达到代码执行的效果，甚至任意内存读写，比如Memory
Corruption。
好啦，不多说了！下面我们来进入今天的分析，首先我们漏洞分析的环境：
    Windows7 x64 sp1 build 7601
    IE 11.0.9600.17843
**漏洞分析**
首先漏洞的关键出现在boom()中，在PoC中定义了一个table表，其中在标签中定义了表id为th1，在boom()函数中引用到，随后通过setInterval设定事件。
运行PoC，可以捕获到漏洞崩溃，附加Windbg。
    0:003:x86> r
    eax=00000038 ebx=0947ffb0 ecx=0947ffb0 edx=00000002 esi=00000064 edi=6e65c680
    eip=6e20fc87 esp=086abdc0 ebp=086abdec iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010202
    MSHTML!Layout::MultiColumnBoxBuilder::HandleColumnBreakOnColumnSpanningElement+0x2c3d36:
    6e20fc87 833800          cmp     dword ptr [eax],0    ds:002b:00000038=????????
可以看到，这里eax作为指针，引用了一处无效地址，从而引发了崩溃，直接回溯崩溃位置的上下文，可以看到，在cmp汇编指令之前，调用了一处函数Layout::Patchable
>::Readable。
而eax寄存器正是Readable函数的返回值。我们在这个函数call调用位置下断点，重新执行windbg。
    0:007:x86> r
    eax=0a020590 ebx=007e79f0 ecx=007e79f0 edx=007e79f0 esi=00000064 edi=69ad8080
    eip=6968fc82 esp=0900b878 ebp=0900b8a4 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    MSHTML!Layout::MultiColumnBoxBuilder::HandleColumnBreakOnColumnSpanningElement+0x2c3d31:
    6968fc82 e86df072ff      call    MSHTML!Layout::Patchable >::Readable (68dbecf4)
可以看到，ecx寄存器作为第一个参数，看一下这个参数存放的对象。
    0:007:x86> dps ecx
    007e79f0  68d82230 MSHTML!Layout::FlowItem::`vftable'
    007e79f4  00000000 //这个值将会在Readable函数中引用
    007e79f8  00000009
    007e79fc  007ec8d4
    007e7a00  0a020660
    007e7a04  00000064
    007e7a08  00000064
    007e7a0c  007e79f0
    007e7a10  007e79f0
    007e7a14  68d82230 MSHTML!Layout::FlowItem::`vftable'
    007e7a18  00000000
    007e7a1c  00000009
    007e7a20  007ec8d4
    007e7a24  0a01fc60
    007e7a28  00000000
    007e7a2c  00000000
    007e7a30  007e7a14
    007e7a34  007e7a14
这个参数存放的对象是一个Layout::FlowItem::`vftable虚表，随后通过IDA来分析一下这个函数的功能。
    int __thiscall Layout::Patchable>::Readable(int this)
    {
      int v1; // eax@2
      int result; // eax@4
      if ( *(_BYTE *)(*(_DWORD *)(__readfsdword(44) + 4 * _tls_index) + 36) )
      // get tls array
      {
        result = this + 16;
      }
      else
      {
        v1 = *(_DWORD *)(this + 4);
        if ( !v1 )               // 这个位置会检查this＋0x4位置的值，如果为0，则进入处理
          v1 = this;//获取vftable pointer
        result = v1 + 16;
      }
      return result;
    }
这里，读取虚表+0x4位置的值为0，因此会执行if(!v4)中的逻辑，会将this指针交给v1，随后v1+0x10后返回，因此，Layout::FlowItem::`vftable所属指针的这个情况是正常的情况，函数会正常返回进入后续处理逻辑。
    0:007:x86> p
    MSHTML!Layout::Patchable::Readable+0x1e:
    68dbed16 83c010          add     eax,10h
    0:007:x86> p
    MSHTML!Layout::Patchable::Readable+0x21:
    68dbed19 c3              ret//函数正常返回
    0:007:x86> r eax
    eax=007e7a00
    0:007:x86> dps eax
    007e7a00  0a020660
    007e7a04  00000064
    007e7a08  00000064
    007e7a0c  007e79f0
    007e7a10  007e79f0
    0:007:x86> p
    Breakpoint 0 hit//这个地方会引用正常的值
    MSHTML!Layout::MultiColumnBoxBuilder::HandleColumnBreakOnColumnSpanningElement+0x2c3d36:
    6968fc87 833800          cmp     dword ptr [eax],0    ds:002b:007e7a00=0a020660
直接继续执行，程序会第二次命中Readable函数，这次来看一下ecx中存放的对象。
    0:007:x86> r
    eax=0a020000 ebx=0a020120 ecx=0a020120 edx=00000000 esi=00000064 edi=69adc680
    eip=6968fc82 esp=0900b878 ebp=0900b8a4 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    MSHTML!Layout::MultiColumnBoxBuilder::HandleColumnBreakOnColumnSpanningElement+0x2c3d31:
    6968fc82 e86df072ff      call    MSHTML!Layout::Patchable >::Readable (68dbecf4)
    0:007:x86> dps ecx
    0a020120  00000000
    0a020124  00000028
    0a020128  00000050
    0a02012c  00000078
    0a020130  000000a0