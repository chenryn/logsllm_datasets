 Aggregate  (cost=1132.46..1132.47 rows=1 width=8) (actual time=75.613..75.614 rows=1 loops=1)  
   ->  Bitmap Heap Scan on tbl_users  (cost=35.25..1129.96 rows=1000 width=0) (actual time=75.609..75.610 rows=0 loops=1)  
         Recheck Cond: (tags % '{1,2,3}'::integer[])  
         Rows Removed by Index Recheck: 15059  
         Heap Blocks: exact=13734  
         ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..35.00 rows=1000 width=0) (actual time=31.466..31.466 rows=15059 loops=1)  
               Index Cond: (tags % '{1,2,3}'::integer[])  
 Planning Time: 0.408 ms  
 Execution Time: 75.687 ms  
(9 rows)  
```  
smlar插件支持的参数配置如下, 通过配置这些参数, 我们可以控制按什么算法来计算相似度, 相似度的过滤阈值是多少?  
```  
postgres=# select name,setting,enumvals,extra_desc from pg_settings where name ~ 'smlar';  
          name          | setting |        enumvals        |                                 extra_desc  
------------------------+---------+------------------------+-----------------------------------------------------------------------------  
 smlar.idf_plus_one     | off     |                        | Calculate idf by log(1+d/df)  
 smlar.persistent_cache | off     |                        | Cache of global stat is stored in transaction-independent memory  
 smlar.stattable        |         |                        | Named table stores global frequencies of array's elements  
 smlar.tf_method        | n       | {n,log,const}          | TF method: n => number of entries, log => 1+log(n), const => constant value  
 smlar.threshold        | 0.6     |                        | Array's with similarity lower than threshold are not similar by % operation  
 smlar.type             | cosine  | {cosine,tfidf,overlap} | Type of similarity formula: cosine(default), tfidf, overlap  
(6 rows)  
```  
接下来我们来实现上述两种近似搜索:  
- 包含多少个以上的标签  
- 有百分之多少以上的标签重合  
包含多少个以上的标签, `smlar.type = overlap  ,  smlar.threshold = INT`  
```  
set smlar.type = overlap;  
set smlar.threshold = 1;  -- 精确匹配  
select uid from tbl_users where tags % array[2];  
set smlar.type = overlap;  
set smlar.threshold = 1;  -- 匹配到1个以上标签  
select uid from tbl_users where tags % array[2,8];  
set smlar.type = overlap;  
set smlar.threshold = 2;  -- 精确匹配  
select uid from tbl_users where tags % array[2,2696];  
set smlar.type = overlap;  
set smlar.threshold = 5;  -- 匹配到5个以上标签  
select uid from tbl_users where tags % array[2,4356,5064,5711,7363,9417,9444];  
set smlar.type = overlap;  
set smlar.threshold = 6;  -- 精确匹配  
select uid from tbl_users where tags % array[4356,5064,5711,7363,9417,9444];  
```  
使用smlar插件, 数组类型和gin索引后, 查看执行计划和耗时如下:  
```  
postgres=# explain analyze select uid from tbl_users where tags % array[2];  
                                                             QUERY PLAN  
-------------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on tbl_users  (cost=17.65..1112.36 rows=1000 width=4) (actual time=38.272..306.985 rows=77129 loops=1)  
   Recheck Cond: (tags % '{2}'::integer[])  
   Heap Blocks: exact=50082  
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..17.40 rows=1000 width=0) (actual time=26.498..26.498 rows=77129 loops=1)  
         Index Cond: (tags % '{2}'::integer[])  
 Planning Time: 0.414 ms  
 Execution Time: 309.182 ms  
(7 rows)  
postgres=# explain analyze select uid from tbl_users where tags % array[2,8];  
                                                              QUERY PLAN  
--------------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on tbl_users  (cost=26.45..1121.16 rows=1000 width=4) (actual time=33.378..790.183 rows=149118 loops=1)  
   Recheck Cond: (tags % '{2,8}'::integer[])  
   Rows Removed by Index Recheck: 351146  
   Heap Blocks: exact=35117 lossy=33064  
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..26.20 rows=1000 width=0) (actual time=29.934..29.934 rows=149118 loops=1)  
         Index Cond: (tags % '{2,8}'::integer[])  
 Planning Time: 0.924 ms  
 Execution Time: 794.029 ms  
(8 rows)  
postgres=# explain analyze select uid from tbl_users where tags % array[2,2696];  
                                                            QUERY PLAN  
----------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on tbl_users  (cost=26.45..1121.16 rows=1000 width=4) (actual time=6.287..26.042 rows=1028 loops=1)  
   Recheck Cond: (tags % '{2,2696}'::integer[])  
   Heap Blocks: exact=1019  
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..26.20 rows=1000 width=0) (actual time=5.956..5.956 rows=1028 loops=1)  
         Index Cond: (tags % '{2,2696}'::integer[])  
 Planning Time: 0.439 ms  
 Execution Time: 26.218 ms  
(7 rows)  
postgres=# explain analyze select uid from tbl_users where tags % array[2,4356,5064,5711,7363,9417,9444];  
                                                           QUERY PLAN  
---------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on tbl_users  (cost=70.45..1165.16 rows=1000 width=4) (actual time=13.211..13.212 rows=0 loops=1)  
   Recheck Cond: (tags % '{2,4356,5064,5711,7363,9417,9444}'::integer[])  
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..70.20 rows=1000 width=0) (actual time=13.204..13.205 rows=0 loops=1)  
         Index Cond: (tags % '{2,4356,5064,5711,7363,9417,9444}'::integer[])  
 Planning Time: 0.204 ms  
 Execution Time: 13.264 ms  
(6 rows)  
postgres=# explain analyze select uid from tbl_users where tags % array[4356,5064,5711,7363,9417,9444];  
                                                           QUERY PLAN  
---------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on tbl_users  (cost=61.65..1156.36 rows=1000 width=4) (actual time=11.364..11.366 rows=0 loops=1)  
   Recheck Cond: (tags % '{4356,5064,5711,7363,9417,9444}'::integer[])  
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..61.40 rows=1000 width=0) (actual time=11.357..11.358 rows=0 loops=1)  
         Index Cond: (tags % '{4356,5064,5711,7363,9417,9444}'::integer[])  
 Planning Time: 0.264 ms  
 Execution Time: 11.447 ms  
(6 rows)  
```  
有百分之多少以上的标签重合, `smlar.type = cosine    ,  smlar.threshold = FLOAT`  
```  
set smlar.type = cosine;  
set smlar.threshold = 1;  -- 精确匹配, 目标也必须只包含2, 相当于相等  
select uid from tbl_users where tags % array[2];  
set smlar.type = cosine;  
set smlar.threshold = 0.5;  -- 两组标签的交集(重叠标签)占两组标签叠加(并集)后的50%以上  
select uid from tbl_users where tags % array[2,8];  
set smlar.type = cosine;  
set smlar.threshold = 1;  -- 精确匹配, 两组标签的交集(重叠标签)占两组标签叠加(并集)后的100%以上  
select uid from tbl_users where tags % array[2,2696];  
set smlar.type = cosine;  
set smlar.threshold = 0.7;  -- 两组标签的交集(重叠标签)占两组标签叠加(并集)后的70%以上  
select uid from tbl_users where tags % array[2,4356,5064,5711,7363,9417,9444];  
set smlar.type = cosine;  
set smlar.threshold = 0.9;  -- 两组标签的交集(重叠标签)占两组标签叠加(并集)后的90%以上  
select uid from tbl_users where tags % array[4356,5064,5711,7363,9417,9444];  
```  
使用smlar插件, 数组类型和gin索引后, 查看执行计划和耗时如下:  
```  
postgres=# explain analyze select uid from tbl_users where tags % array[2];  
                                                             QUERY PLAN  