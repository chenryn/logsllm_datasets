6 of the CORBA standard 2.1. These interfaces are gener- 
ally considered important because most CORBA programs 
will have to use them directly, or have to inherit from those 
interfaces.  For  example,  CORBA: : ORB-init has  to be 
called by both the client side and server side to initialize the 
ORB for any CORBA 2.1 programs. All CORBA objects 
defined in CORBA 2.1 programs must inherit the base ob- 
ject 
indirectly. 
CORBA: : Context captures important information about 
the client, environment, or circumstances of a request. 
CORBA : : Ob j ect  directly 
or 
Most of the operations under test  are client-ORB inter- 
actions, not  client-server  operations  or  inter-ORB opera- 
tions.  No  GIOP/IIOP  operations  have  been 
tested. 
However, the test set could be expanded in the future to in- 
clude inter-ORB  client-server calls and other new  opera- 
tions defined in later standards, such as POA operations in 
144 
CORBA standard 2.3 supported by Orbix 2000, omniORB 
3.0 and VisiBroker 4.0. 
3.3 Implementation issues 
Although Orbix 3.0.1, omniORB 2.8 and VisiBroker 3.3 
all claim to support or fully comply with CORBA standard 
2.1, and the advanced versions claim to be compatible with 
CORBA standard  2.3,  not  all  operations  in  the  CORBA 
standard are  supported by  every ORB. This  is  partly  be- 
cause  of  rapid  updates  to  and  ambiguities  within  the 
CORBA 2.1 standard. For example, we have observed that 
the same operations may appear under different names on 
different ORBs: CORBA: :Ob] ect operation get-pol- 
icy() is  defined  as  CORBA: :Object: :-get-pol- 
icy ( )  
as 
CORBA: :Object: :get-policy ( )  inVisiBroker[7], 
and is undefined in omniORB [ 111. 
appears 
Orbix 
[SI, 
in 
Some  operations,  such  as  get-default-con- 
text ( )  and  get-service-information ( )  
for 
Orbix  2000,  have  prototypes  defined  but  are  not  imple- 
mented.  They  always  raise  CORBA  system  exception 
CORBA : : NO-IMPLEMENT during testing. Although this 
response  is valid per the CORBA standard, it is unfair to 
compare  these  operations  (which  technically  would  be 
100% robust) with implemented versions from other ORBs 
(which will likely have failures). Therefore, the operations 
without implementations are deleted from Orbix 2000 test 
sets. 
Due  to  the  above  issues,  the  test  operations  actually 
launched  for  each  ORB  are  not  fully  identical.  But  a 
reasonable comparison can still be made by taking averages 
of all the operations tested for each ORB, mitigating this ef- 
fect. 
4. Experimental  results and analysis 
4.1 Overview 
Table 2 summarizes the results for the ORBs under test. 
The total number of test cases and the total number of oper- 
ations tested are given. For example, for the omniOREi 2.8 
Solaris build, there are 6999 test cases launched for 22 op- 
erations,  within  which  one  operation  create-list ( )  
exhibits thread hangs,  17 operations trigger thread aborts, 
and  one  operation  CORBA : : s tring-alloc ( )  raises 
unknown exceptions. 
We have observed another failure mode while testing the 
ORBs, other than the common robustness failures listed in 
Table  1. While  testing  operation  create-list ( )   for 
omniORB 2.8 and omniORB 3.0 on Sun Solaris platform, 
we have found a libthreadpanic failure. The failure is de- 
noted by  a * in Table 2. This failure cannot be isolated to 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:01:43 UTC from IEEE Xplore.  Restrictions apply. 
Table 2.  Overview of ORB robustness testing results. 
Number(#) of  functions exhibiting 
I  RedHat Linux 
I 
kernel version 
each type of failure 
Solaris 5.6 
4.2 Average percentage of failures 
L 
8 
c 
8 
3 
c 
g 
* Y 
s! a 
a 
* libthread panic observed 
- 
16 
17 
- 
17 
- 
14 
- 
17 
20 
- - 
one test  case  because  it  is  related  to  resource  problems; 
however, it does happen  each time create-1ist ( ) 
tested.  One possible  explanation is that  when the testing 
thread times out  and  is killed  when  a thread-hang failure 
happens, libthread has a resource  leakage that  eventually 
leads to a panic. This failure may be unrelated to the ORB 
under test and is not counted in the final results. 
Results are analyzed using a straight aver- 
age across the failure rate for all the operations 
as a comparison metric. Figure 5 shows the ro- 
bustness testing results for the ORBS we have 
tested. Each bar represents an ORB implemen- 
tation, with the average percentage of robust- 
ness  failures (including thread  aborts, thread 
hangs and unknown exceptions) shown at the 
bottom, and the average percentage of robust 
(including  CORBA:  : System- 
behaviors 
Exception, CORBA:  :Exception  and 
no-exception responses) shown at the top. Fig- 
ure  5  shows  that  all  ORB  implementations 
studied  have  a  high  thread-abort  percentage 
under  the  current  test  set,  ranging  from 
25.44% for the omniORB 2.8 Solaris build to 
41.02%  for the VisiBroker  4.0  Solaris build. 
Thread-hang  failures  are  less  common  and 
usually  concentrate in only  a few operations such as ere- 
ate-1 ist ( ) . Orbix 2000 has more unknown exceptions 
than  other  ORB  implementations  but  is  free  of  thread 
hangs. No unknown exceptions are found in the VisiBroker 
group. 
- - 
The omniORB group demonstrates a higher percentage 
of CORBA exceptions, indicating a better exception-han- 
N/A 
N/A 
N/A 
N/A 
N/A 
N/A 
14 
1 
17 21 
1 
0 
Unknown exception% 
NThread abort% 
HThread hang% 
0.00% 
30.1 1% 
1.21% 
2.88% 
31.66% 
0.00% 
3.00% 
38.08% 
0.00% 
0.21% 
25.44% 
0.29% 
0.20% 
32.93% 
4.66% 
0.20% 
28.51% 
0.30% 
0.00% 
26.88% 
0.13% 
0.00% 
41.02% 
0.47% 
0.00% 
36.32% 
0.06% 
145 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:01:43 UTC from IEEE Xplore.  Restrictions apply. 
dling scheme. OmniORB 2.8 has the highest robust excep- 
tion percentage, at over 25%. 
4.3 Discussion 
As  shown  in  Figure  5, the  results  show  a  noticeable, 
sometimes  significant, increase  in  average percentage  of 
robustness failures from an older version of a product to a 
new version. Similar phenomena have also been observed 
in previous Ballista testing results on the HLA RTI simula- 
tion  backplane  [3].  In  POSIX testing  [lo], two operating 
systems  had  an  increase  in  robustness  failure rate  going 
from older versions to newer versions, while three operat- 
ing systems did the opposite. One possible  explanation is 
that adding significant amounts of new code to implement 
new features in a new software release can create robust- 
ness failures until problems are fixed based on field defect 
reports.  If a version change is more evolutionary, then it is 
more  likely  that  robustness  will  improve  with  a  new  re- 
lease. In the case of CORBA ORBs, fast evolution and fre- 
quent updates to the CORBA standard would seem likely to 
force addition of significant amounts of new code into each 
release,  leading  to  a  likely  increase  in  robustness  failure 
rates as shown in Figure 5. 
The differences in results between operating systems are 
not  marked  enough  to  make  definitive  statements  about 
how much operating systems factor into ORB robustness. 
For Orbix 2000, the Solaris build is more robust than the 
Linux version, while for omniORB 3.0 and VisiBroker 4.0, 
the results are the opposite.  However, these differences do 
indicate that  it is the OWORB pair that determine overall 
robustness rather than robustness being solely a property of 
the ORB selected. 
Figure  6  gives  a  snapshot  of  the  testing  results  for 
omniORB 3.0 on Solaris and Linux platforms, where  we 
can see that most operations have the same failure profile 
across platforms, with only a few exceptions. Other than 
the libthread panic  failure observed  on Solaris, the most 
different  testing  result  was  found  for  operation  re- 
solve-initial-references ( ) ,  which  had  a  sig- 
nificant percentage  of thread hangs  on Solaris but  only  a 
small  percentage  of thread-abort  failures  on  Linux.  The 
cause of this difference is currently unknown. 
The operations that have a failure rate higher than 50% 
are as follows: -duplicate ( )  , CORBA: : is-nil ( )  , 
CORBA: : release ( )  ,  -is-equivalent ( )  ,  ob- 
ject-to-string(),send-multiple_requests 
- deferred ( )  ,  and  send-multiple-requests 
oneway ( ) . Among these seven operations, the first five 
take CORBA : : Ob j ect as one of the parameters. The last 
two take RequestSeq, which is a sequence of object ref- 
erences. This indicates that CORBA object and pseudo-ob- 
ject  data  type  implementations  have  more  prevalent 
robustness vulnerabilities than other data types tested  for 
omniORB  implementations. 
platforms, 
operations 
An interesting observation is that for both operating sys- 
-duplicate ( ) , 
tem 
CORBA: : is-nil ( ) , and  CORBA: : release ( )  have 
exactly the same failure profile, and they all take a single 
parameter  typed  CORBA: :Object. It  appears  that  the 
failure profile is correlated with parameter types if the pa- 
rameter types are CORBA object references, or object ref- 
erences  in  general.  It  is  possible  that  these  failures  are 
caused  by  methods  associated  with  objects,  especially  if 
one presumes that different CORBA operations employ the 
same access patterns for object reference data types: calling 
member functions to access private data structures, using 
constructors to create object instances, using destructors to 
deallocate objects, etc. 
The testing results in previous sections have not shown 
us a promising picture of ORB implementation robustness, 
although the CORBA specification explicitly requires ro- 
bust responses. On the other hand, for the ORBs we have 
tested, we have observed that some important and obvious 
exceptional values,  such as NULL value for pointers  and 
references,  are  handled  by  most  ORB  vendors.  In  most 
cases, a CORBA : : BAD-PARAM exception is seen when a 
NULL parameter  is  used  improperly.  Compared  to  some 
POSIX  operating  systems where  NULL causes  a  signifi- 
cant rate of robustness failures for many functions [lo], this 
is certainly an advancement. However, for CORBA appli- 
cations to achieve the level of robustness desirable for criti- 
cal applications, being  able to handle  simple and obvious 
cases, such as NULL as pointer  and reference  values,  or 
zero as divisors, is not sufficient. There are large classes of 
more  subtle  but  realistic  exceptional  input  values,  e.g., 
out-of-range  values,  uninitialized  data  structures, errone- 
ously released objects, and corrupted data structures. Most 
ORB operations we have tested failed to identify these ex- 
ceptional 
a 
CORBA : : BAD-PARAM exception. 
values  gracefully  by 
throwing 
test 
Exception handling is often skimped upon for two main 
reasons.  First, comprehensive  exception handling  is per- 
ceived as costing performance.  Second, it is labor-inten- 
sive  to  develop  individual  parameter  checks  against 
exceptional inputs on a case-by-case basis. As a simple so- 
lution to the first  problem,  ORB vendors can provide  the 
user with an infrastructure that has two different operating 
modes, or with standard exceptional-input checking opera- 
tions for critical scenarios. For the second problem, instead 
of  developing  individual  parameter  checks,  we  can  use 
more advanced techniques such as program assertions [ 191 
and  data  structure  signatures  [21] to  check run-time  data 
consistency and integrity under a CORBA and object-ori- 
ented context. The following section demonstrates that it is 
possible to provide  the user  a means  to  protect against a 
146 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:01:43 UTC from IEEE Xplore.  Restrictions apply. 
1 Thread hang% E l  Thread abort% Ul Unknown exception% 0 No exception% W CORBA.:Exception% U CORBA.:SystemException% 
00% 
80% 
60% 
40% 
20% 
0% 
100% 
80% 
60% 
40% 
20% 
0% 
1 
2 
3 
4 
5 
6 
7 
8 
9 
omniORB 3.0 operations 
13 
10 
11 
12 
14 
15 
16 
17 
18 
19 
20 
21 
C0RBA::Object::-duplicate 
C0RBA::is-nil 
C0RBA::release 
C0RBA::string-alloc 
C0RBA::string-dup 
C0RBA::string-free 
-hash 
1 
2 
3 
4 
5 
6 
7 
Figure 6.  OmniORB 3.0 robustness testing results for selected CORBA functions on Solaris and 
Linux platforms. Each bar represents one CORBA operation whose name is listed in the table. 
object-to-string 