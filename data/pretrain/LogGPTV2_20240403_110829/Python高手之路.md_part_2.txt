熊猫爱中国www.xiongmaoi.com
熊猫爱中国
子一级包中，以便：
同梦魔，但过平的层次结构则会让项目变得臃肿。
1.2项目结构
示例代码中也会涉及，所有本书中的示例代码都同时支持这两个主要版本。
支持 Python 2.3及所有后续版本（http://docs.cherrypy.org/stable/intro/install.html)。
版本基本没什么问题，尽管同时支持所有这些版本是有可能的：CherryPy 项目（http://cherrypy.org）
要保证软件在可预见的未来也能运行，就需要也支持 3.3及更高的版本。忽略那些更老的 Python
编写同时支持Python 2.7和3.3版本的程序的技术将在第13章介绍。某些技术在后续的
一个常犯的错误是将单元测试放在包目录的外面。这些测试实际上应该被包含在软件的
项目结构应该保持简单，审慎地使用包和层次结构，过深的层次结构在目录导航时将如
总之，在确实有需要的情况下支持2.6版本（或者想自我挑战），必须支持2.7版本，如果需
·能够被安装，且其他包能够利用它们构建自己的单元测试。
第1章项目开始
图1-1展示了一个项目的标准的文件层次结构。
本电子书仅限学习交流使用，请勿用于商业用途
test-reqirements,txt
requirements.tot
README.rst
setup.py
foobar
图1-1标准的包目录结构
docs
→index.rst
storage.py
Ad
conf.py
tests
test_storage.
test_cli.py
---
## Page 10
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
能简单而可靠地识别它们需要哪一个版本的包。
本格式，并且在理论上所有的应用程序都应该使用这种格式。这样，其他的应用程序或包就
数据就是版本号。
1.3版本编号
一分类/模块的多个 Python 文件。
织毫无帮助，只能让读代码的人在多个文件之间毫无理由地来回切换。
functions·py 或者exceptions·py这样的文件是很糟糕的方式。这种方式对代码的组
存放并没有一个统一的标准。因此放到任何觉得合适的地方都可以。
理（参见3.1节）。
赖包。最后，docs 文件夹应该包括reStructuredText 格式的文档，以便能够被 Sphinx处
常工作。还可以包含 test-requirements.txt，它应该列出运行测试集所需要的依
赖包，也就是说，所有这些包都会预先通过 pip 这样的工具进行安装以保证你的包能正
适的名字）为用户提供重要信息。requirements.txt 应该包含 Python 包所需要的依
（distuils）进行包的安装。也可以通过README.rst（或者README.txt，或者其他合
PEP440（htp://www.python.org/dev/peps/pep-0440/）针对所有的Python包引入了一种版
此外，应该避免创建那种只有一个_
·data 用来存放其他类型的文件，如媒体文件。
·bin 用来存放将被 setup·py安装的二进制脚本。
●tools用来存放与工具有关的shell脚本。
·etc 用来存放配置文件的样例。
包中还经常需要包含一些额外的数据，如图片、shell脚本等。不过，关于这类文件如何
一个常见的设计问题是根据将要存储的代码的类型来创建文件或模块。使用
setup·py 是 Python 安装脚本的标准名称。在安装时，它会通过 Python 分发工具
下面这些顶层目录也比较常见。
本电子书仅限学习交流使用，请勿用于商业用途
init
_·py文件的目录，例如，如果 hooks.py
1.3版本编号
---
## Page 11
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
的格式 1.0.0.-alpha+001就与 PEP 440不兼容。
一规范和PEP440部分重合，但二者并不完全兼容。例如，语义版本对于预发布版本使用
你可能已经听说过语义版本（http://semver.org/），
注意
这一结构可以满足大部分常见的使用场景。
·.devN（如2.3.4.dev3）表示一个开发版本。因为难以解析，所以这个后缀并不建议使
·postN（如1.4.post2）表示一个后续版本。通常用来解决发行过程中的细小问题（如
·N[.N]+cN或N[.N]+rcN（如0.4rc1）表示候选版本（常缩写为 RC），通常指除非有
·N[.N]+bN（如2.3.1b2）表示一个beta 版本，即此版本功能已经完整，但可能仍有
·N[.N]+aN（如1.2al）表示一个alpha 版本，即此版本不稳定或缺少某些功能。
·1.2等于1.2.0，1.3.4等于1.3.4.0，以此类推。
它允许类似1.2或1.2.3这样的格式，但需注意以下几点。
N[.N]+[(a|b|c|rc)N][.postN] [.devN]
PEP440中定义版本号应该遵从以下正则表达式的格式：
通常用到的还有以下这些后缀。
最终即将发布的组件也可以使用下面这种格式。
第1章项目开始
基于日期的版本（如2013.06.22）被认为是无效的。针对PEP440格式版本号设计的
与 NL.N]+相匹配的版本被认为是最终版本。
本的第三个开发版本，它早于任何的 alpha 版本、beta 版本、候选版本和最终版本。
用。它表示这是一个质量基本合格的发布前的版本，例如，2.3.4.dev3表示2.3.4版
发行文档有错)。如果发行的是bug 修复版本，则不应该使用.postN 而应该增加小的
但如果二者同时使用，rc 版本通常表示比c更新一点。
重大的bug，否则很可能成为产品的最终发行版本。尽管 rc 和c两个后缀含义相同，
bug。
版本号。
一些自动化工具，在检测到版本号大于或等于1980时就会抛出错误。
本电子书仅限学习交流使用，请勿用于商业用途
它对于版本号提出了自己的规则。这
---
## Page 12
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
?
问题。
1.4编码风格与自动检查
它可以基于项目的Git版本自动生成版本号。
码标签这个字段维护一个版本号，并利用它构造一个同PEP440 兼容的版本号的。
中定义的模式兼容：问题就在于，唯一标识的散列字符串不能排序。不过，是有可能通过源
Mercurial，都可以使用唯一标识的散列字符串?作为版本号。但遗憾的是，它不能与PEP440
要求一致的版本号。
peps/pep-0426）中定义的源码标签，这一字段可以用来处理任何版本字符串，并生成同PEP
（http://www.python.org/dev/peps/pep-0008/）标准。这些规范可以归纳成下面的内容。
提示
你可能有不同意见。
·在文件顶端，注释和文档说明之下，每行每条 import 语句只导入一个模块，同时
·采用ASCII或UTF-8编码文件。
●每行最多79个字符。
●每个缩进层级使用4个空格。
而 Python 社区则利用他们的无穷智慧，提出了编写 Python 代码的 PEP 8@
Python 具有其他语言少有的绝佳质量?：使用缩进来定义代码块。乍一看，似乎它解决
没错，编码风格是一个不太讨巧的话题，不过这里仍然要聊一下。
许多分布式版本控制系统（Distributed Version Control System，DVCS）平台，如Git和
如果需要处理更高级的版本号，可以考虑一下PEP 426（http://www.python.org/dev/
）顶层的函数或类的定义之间空两行。
要按标准库、第三方库和本地库的导入顺序进行分组。
本电子书仅限学习交流使用，请勿用于商业用途
1.4编码风格与自动检查
5
---
## Page 13
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
同的意见。
于任何规模的项目这都是非常重要的，因为即使对于空白的顺序，不同的程序员也会有不
比较抓狂，但这让整个代码库的每一部分都保持一致，要知道现在它有167万行代码。对
中将介绍如何将 pep8与tox集成，从而让这些检查自动化。
其集成到测试集中。尽管这似乎有点儿极端，但这能保证代码一直遵守PEP8规范。6.7节
建议还是考虑一下，最好能定期用 PEP8验证工具对代码进行检测。一种简单的方式就是将
空行有关，而以W6开头的警告则表明使用了已废弃的功能。
数看出问题的大概类别。例如，以 E2开头的错误通常与空格有关，以 E3 开头的错误则与
开头的错误码）。跟在字母后面的三位数字则指出具体的错误或警告，可以从错误码的百位
须遵守的规范，则会报出错误（以E开头的错误码），如果是细小的问题则会报警告（以W
示例1.1运行 pep8
否符合PEP8要求，如示例1.1所示。
（https:/pypi.python.org/pypi/pep8）就是用来解决这个问题的，它能自动检查Python文件是
并没有什么不便。
OpenStack 项目从一开始就通过自动检查强制遵守 PEP 8规范。尽管有时候这让新手
社区仍然在争论对并非标准库一部分的代码进行PEP8验证是否是一种好的实践。这里
pep8会显示在哪行哪里违反了 PEP8，并为每个问题给出其错误码。如果违反了那些必
也可以使用--ignore 选项忽略某些特定的错误或警告，如示例1.2所示。
$ pep8 hello.py
然而，犯错在所难免，保持代码符合 PEP 8规范的要求仍是一件麻烦事。工具 pep8
$echo $?
hello.py:4:1: E302 expected 2 blank lines, found.1
这些规范其实很容易遵守，而且实际上很合理。大部分程序员在按照这些规范写代码时
●在小括号、中括号、大括号之间或者逗号之前没有额外的空格。
第1章 
开头定义私有的属性或方法，如_private。
类的命名采用骆驼命名法，如 CamelCase；异常的定义使用Error 前缀（如适用
项目开始
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 14
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
决一类问题。
动检查。如果已经有了代码库，那么一种比较好的方式是先关闭大部分警告，然后每次只解
符串格式化及可能的本地化问题。
以检查 except 语句的错误使用、Python 2与Python3的兼容性问题、导入风格、危险的字
检查。最终 flake8的这个扩展被命名为 hacking（https:/pypi.python.org/pypi/hacking）。它可
的推移，社区的开发者们已经开始利用flake8的可扩展性对提交的代码进行更多潜在问题的
和 pep8合并成了一个命令，而且加入了一些新的功能，如忽略带有#noqa 的行以及通过入
pep8。为了简化操作，一个名为flake8（htps://pypi.python.org/pypi/flake8）的项目将 pyflakes
工具。
peps/pep-0007/ ） 标准描述了应该遵循的相应的编码风格。
如果正在写一些针对 Python 的 C 语言代码( 如模块), 则 PEP 7( http://www.python.org/dev/ 
查，
示例1.2运行pep8时指定--ignore选项
注意
如果你正开始一个新项目，这里强烈建议使用上述工具之一对代码的质量和风格进行自
，这也可以暂时忽略某些问题，从而每次只专注解决一类问题。
尽管没有一种工具能够完美地满足每个项目或者每个人的喜好，但 flake8 和 hacking 的
为了追求优美而统一的代码，OpenStack 选择使用 flake8进行代码检查。不过随着时间
如果选择使用 pyflakes，要注意它按自己的规则检查而非按 PEP 8，所以仍然需要运行
这些工具都是利用静态分析技术，也就是说，解析代码并分析代码而无需运行。
并且支持插件。
●pylint（https://pypi.python.org/pypi/pylint），它支持 PEP8，默认可以执行更多检查，
还有一些其他的工具能够检查真正的编码错误而非风格问题。下面是一些比较知名的
这可以有效地忽略那些不想遵循的 PEP 8 标准。如果使用 pep8 对已有的代码库进行检
$ echo $?
$ pep8 --ignore=E3 hello.py
pyflakes（https://launchpad.net/pyflakes），它支持插件。
本电子书仅限学习交流使用，请勿用于商业用途
1.4
编码风格与自动检查
---
## Page 15
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
的好的开始。
结合使用是持续改进代码质量的良好方式。要是没想好其他的，那么这是一个向此目标前进
Flymake），能够交互地突出显示代码中任何不兼容 PEP 8 规范的部分。这种方式能够非
许多文本编辑器，包括流行的 GNU Emacs （http://www.gnu,org/software/emacs/）和 vim
8
常方便地在代码编写过程中修正大部分风格错误。
提示
第1章
项目开始
本电子书仅限学习交流使用，请勿用于商业用途
都有能够直接对代码运行 pep8 和 flake8这类工具的插件（ 如
---
## Page 16
熊猫爱中国www.xiongmaoi.com
熊猫爱中
2.1导入系统
第2章→
Namespaces are one honking great idea -- let's do more of those!
If the implementation is easy to explain, it may be a good idea.
If the implementation is hard to explain, it's a bad idea.
Although never is often better than *right* now.
Now is better than never.
There should be one-- and preferably only one --obvious way to do it.
Errors should never pass silently.
Although practicality beats purity.
Special cases aren't special enough to break the rules.
Readability counts.
Sparse is better than dense.
Flat is better than nested.
Complex is better than complicated.
Simple is better than complex.
Explicit is better than implicit
Beautiful is better than ugly.
The Zen of Python, by Tim Peters
>>> import this
Python 之禅
要使用模块和库，
Unless explicitly silenced.
模块和库
，需要先进行导入。
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 17
熊猫爱中国www.xiongmaoi.com
熊猫爱中
?
① 说几乎是因为路径并不会被放在列表的同一级上，尽管根据你的使用情况它可能并不重要。
方法,这个加载器对象必须包含一个负责从源文件中加载模块的1oad_module（fullname)
sys.path_hooks 来添加自定义的模块查找器（finder）。
的?。它允许扩展标准的导入机制，并对其进行预处理，也可以通过追加一个工厂类到
术告诉 Python 如何导入其他非标准的.py 或者.pyc 文件的。
可以通过编写 Python 代码直接修改环境变量 PYTHONPATH。下面的方法几乎是相等的。
Python 去哪里搜索要加载的模块。可以在代码中修改这个列表，根据需要添加或删除路径，也
模块可以根据传入 Python 构建系统的编译选项的不同而变化。
（value）是模块对象。