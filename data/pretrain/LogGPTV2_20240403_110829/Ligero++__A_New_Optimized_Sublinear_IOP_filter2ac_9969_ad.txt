𝑖 (·) − 𝑝𝑧
𝑖 (·)𝑝 𝑦
𝑖 (·)𝑝 𝑦
𝑖 (·), 𝑝 𝑦
𝑖 (·) and 𝑝𝑧
The full protocol is presented in Protocol 3.
Theorem 3.5. Protocol 3 is a quadratic constraint testing protocol
with the following properties:
• Completeness. For any valid 𝑥, 𝑦, 𝑧, such that 𝑥 ⊙ 𝑦 − 𝑧 = 0, and
it’s Reed-Solomon code 𝑈 𝑥, 𝑈 𝑦, 𝑈 𝑧 ∈ 𝐿𝑚, the verifier accepts with
probability one.
• Soundness. ([5, 55]) Let 𝑒 be a positive integer such that 𝑒  𝑒: Since 𝑒  |𝑤|.
• P encodes each row 𝑎 in 𝑊 as RS(𝑎) where RS(𝑎) is the reed solomon encoding of message 𝑎. This is done by using interpolation set I1 where |I1| = ℓ to
generate a polynomial of size 𝑘 (𝑘 > ℓ). Then we evaluate this polynomial on an evaluation set E1 where |E1| = 𝑛 (𝑛 > 𝑘). We call this matrix 𝑈 𝑤 which
represents the encoding of vector 𝑤.
• P repeats the encoding on the columns of matrix 𝑈 . Basically P encodes each column 𝑎 in 𝑈 as RS(𝑎) where RS(𝑎) is the reed solomon encoding of message
𝑎. This is done by using interpolation set I2 where |I2| = 𝑚 to generate a polynomial of size ℓ. Then we evaluate this polynomial on an evaluation set E2
where |E2| = 𝑐 (𝑐 > 𝑚). We call this matrix U𝑤 and this represents the oracle of vector 𝑤.
Protocol 5 (Our new argument construction for arithmetic circuits.). Let 𝑤 = {𝛼1, 𝛼2, ..., 𝛼|𝐶| } be the circuit wire value (witness).
(1) pp ← IPA.KeyGen(1𝜆) generate public parameters for IPA.
(2) Convert the input circuit to the Ligero matrix:
(a) Let 𝑚, ℓ be the parameter used in previous protocols. (|𝐶| = 𝑚 × ℓ).
(b) We define a system of constraints that contains the following constraints:
(i) Multiplication:
(ii) Addition:
𝛼𝑎 × 𝛼𝑏 − 𝛼𝑐 = 0
𝛼𝑎 + 𝛼𝑏 − 𝛼𝑐 = 0
where 𝑎, 𝑏, 𝑐 are the wire id of the circuit.
(i) Let 𝛼𝑐 = 𝛼𝑎 × 𝛼𝑏 be the 𝑖-th multiplication gate, P sets 𝑥 [ 𝑗] = 𝛼𝑎, 𝑦[ 𝑗] = 𝛼𝑏, 𝑧[ 𝑗] = 𝛼𝑐 .
(c) P constructs 𝑥, 𝑦, 𝑧 used in Protocol 3 in the following way:
(d) P, V construct the matrices 𝑃𝑥 , 𝑃𝑦, 𝑃𝑧 ∈ F𝑚ℓ×𝑚ℓ such that:
𝑥 = 𝑃𝑥 𝑤, 𝑦 = 𝑃𝑦 𝑤, 𝑧 = 𝑃𝑧 𝑤
(e) P, V construct the matrix 𝑃𝑎𝑑𝑑 ∈ F𝑚𝑘×𝑚𝑘 to handle addition in the following way:
(i) For 𝑗-th addition gate 𝛼𝑎 + 𝛼𝑏 − 𝛼𝑐 = 0, then set 𝑃𝑎𝑑𝑑 [ 𝑗][𝑎] = 𝑃𝑎𝑑𝑑 [ 𝑗][𝑏] = 1 and 𝑃𝑎𝑑𝑑 [ 𝑗][𝑐] = −1.
(ii) Set the other positions to zero.
(3) Encode and generate the oracle:
(a) Encode vectors 𝑤, 𝑥, 𝑦, 𝑧 into encoded matrix 𝑈 𝑤, 𝑈 𝑥 , 𝑈 𝑦, 𝑈 𝑧 ∈ F𝑚×𝑛 and generate oracles U𝑤, U𝑥 , U𝑦, U𝑧 ∈ F𝑐×𝑛 by using Protocol 4. We
would like to state that the oracles U𝑤, U𝑥 , U𝑦, U𝑧 would only be invoked within the IPA protocols.
(4) Test 𝑈 𝑤, 𝑈 𝑥 , 𝑈 𝑦, 𝑈 𝑧 is 𝑒-close to a valid interleaved code by engaging Protocol 1 on the following input:
𝑈 𝑤, 𝑈 𝑥 , 𝑈 𝑦, 𝑈 𝑧
(5) Test addition gate, engage Protocol 2 on the following input:
(𝑃𝑎𝑑𝑑, 𝑈 𝑤)
(cid:27)
(cid:26)𝑈 𝑥
𝑈 𝑤
be a vertically concatenated matrix of size 2𝑚 × 𝑛.
(6) Test multiplication gate by using Protocol 2 and Protocol 3 in the following way:
(a) Let [𝐼𝑚ℓ | − 𝑃𝑥 ] be a horizontally concatenated matrix of size 𝑚 × (2ℓ), and
(b) We define [𝐼𝑚ℓ | − 𝑃𝑦], [𝐼𝑚ℓ | − 𝑃𝑧],
(c) run Protocol 2 on inputs:
(cid:26)𝑈 𝑧
in a similar way.
(cid:27)
𝑈 𝑤
(cid:26)𝑈 𝑦
(cid:26)𝑈 𝑦
𝑈 𝑤
(cid:27)
(cid:27)
,
𝑈 𝑤
(cid:27)
(cid:26)𝑈 𝑥
𝑈 𝑤
(cid:27)
(cid:26)𝑈 𝑧
𝑈 𝑤
([𝐼𝑚ℓ | − 𝑃𝑥 ],
), ([𝐼𝑚ℓ | − 𝑃𝑦],
), ([𝐼𝑚ℓ | − 𝑃𝑧],
(d) this will check 𝑥 = 𝑃𝑥 𝑤, 𝑦 = 𝑃𝑦 𝑤, 𝑧 = 𝑃𝑧 𝑤.
(e) Run Protocol 3 on input: (𝑈 𝑥 , 𝑈 𝑦, 𝑈 𝑧) in Protocol 3.
(f) this will check 𝑧 = 𝑥 ⊙ 𝑦
Complexity. Overall, the prover’s complexity is 𝑂(𝐶 log 𝐶) field
operations, the proof size is 𝑂(polylog𝐶) field elements and the
verifier time is 𝑂(𝐶) field operations.
Extension to boolean circuits. We can extend our IOP argu-
ment to a boolean circuit in a similar fashion as done in [5]. In
essence, we can use linear test to check all gate constraints (XOR
and AND) [5]. This in turn increases the size of extended witness
where instead of 1 element, two elements are used for each gate.
)
Again we also would like to check that each element in the ex-
tended witness is a boolean value i.e., either 0 or 1. This check can
be represented by introducing a quadratic constraint of the form
𝛽2 = 𝛽 and can therefore be checked using the quadratic test.
3.5 Achieving Zero-Knowledge
Finally, in this section, we present the modifications on the proto-
cols to achieve zero knowledge. We use standard techniques from
existing works [5, 20, 55]. In particular, there are two parts of the
Session 6E: Zero Knowledge CCS '20, November 9–13, 2020, Virtual Event, USA2032protocols that leak information about the witness. Taking the in-
terleaved test in Protocol 1 as an example, in the first check in
Step 2, V receives a linear combination of all rows in 𝑈 , which
encodes the witness in the full protocol. In addition, in the second
check in Step 5, the verifier validates the consistency of the linear
combination in the first check with a subset of columns in 𝑈 .
To mitigate the first leakage, the prover appends a random code-
word in 𝐿 as an additional row to 𝑈 . Now the linear combination in
the first check is still a codeword, but leaks no information about
the witness. The dimension of the interleaved code increases by
1 in this approach, i.e., 𝑈 ∈ 𝐿𝑚+1. To mitigate the second leakage,
we increase the degree of the RS code 𝐿 by 𝑡, such that opening
any 𝑡 points of the codeword does not leak any information of
the message. Note that if we do so, the inner product argument
scheme does not have to be zero knowledge, as even revealing all
the vectors leaks no information about the witness encoded in 𝑈 .
Alternatively, we can keep the same degree of 𝐿, but applies a zero
knowledge inner product arguments.
Below we present the modifications required for the modules.
(1) Modifications to Protocol 1.
(a) Modify the original input 𝑈 to 𝑈 ′, where 𝑈 ′ contains an
additional row of random codeword 𝑢′. 𝑈 ′ =
(b) The new random combined codeword in Protocol 1 Step 2
(cid:27)
(cid:26)𝑈