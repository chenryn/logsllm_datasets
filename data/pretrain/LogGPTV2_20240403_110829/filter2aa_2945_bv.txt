This code generates the following output:
Click here to view code image
Employees:
Fred
Bert
Harry
John
James
Customers:
John
Sid
Harry
Diana
Francesca
Customers who are also employees:
John
Harry
Download from finelybook PI:EMAIL
622
Note The System.Collections.Generic namespace also provides the
SortedSet collection type, which operates similarly to the
HashSet class. The primary difference, as the name implies, is that
the data is maintained in a sorted order. The SortedSet and
HashSet classes are interoperable; you can take the union of a
SortedSet collection with a HashSet collection, for example.
Using collection initializers
The examples in the preceding subsections have shown you how to add
individual elements to a collection by using the method most appropriate to
that collection (Add for a List collection, Enqueue for a Queue
collection, Push for a Stack collection, and so on). You can also initialize
some collection types when you declare them by using a syntax similar to that
supported by arrays. For example, the following statement creates and
initializes the numbers List object shown earlier, demonstrating an
alternative to repeatedly calling the Add method:
Click here to view code image
List numbers = new List(){10, 9, 8, 7, 7, 6, 5, 10, 4, 3,
2, 1};
Internally, the C# compiler converts this initialization to a series of calls to
the Add method. Consequently, you can use this syntax only for collections
that actually support the Add method. (The Stack and Queue classes
do not.)
For more complex collections that take key/value pairs, such as the
Dictionary class, you can use indexer notation to specify a
value for each key, like this:
Click here to view code image
Dictionary ages = new Dictionary()
    {
        ["John"] = 53,
Download from finelybook PI:EMAIL
623
        ["Diana"] = 53,
        ["James"] = 26,
        ["Francesca"] = 23
    };
If you prefer, you can also specify each key/value pair as an anonymous
type in the initializer list,  like this:
Click here to view code image
Dictionary ages = new Dictionary()
    {
        {"John", 53},
        {"Diana", 53},
        {"James", 26},
        {"Francesca", 23}
    };
In this case, the first item in each pair is the key, and the second is the
value. To make your code as readable as possible, I recommend that you use
the indexer notation wherever possible when you initialize a dictionary type.
The Find methods, predicates, and lambda expressions
Using the dictionary-oriented collections (Dictionary,
SortedDictionary, and SortedList), you can
quickly find a value by specifying the key to search for, and you can use
array notation to access the value, as you have seen in earlier examples. Other
collections that support nonkeyed random access, such as the List and
LinkedList classes, do not support array notation but instead provide the
Find method to locate an item. For these classes, the argument to the Find
method is a predicate that specifies the search criteria to use. The form of a
predicate is a method that examines each item in the collection and returns a
Boolean value indicating whether the item matches. In the case of the Find
method, as soon as the first match is found, the corresponding item is
returned. Note that the List and LinkedList classes also support
other methods, such as FindLast, which returns the last matching object, and
the List class additionally provides the FindAll method, which returns a
List collection of all matching objects.
The easiest way to specify the predicate is to use a lambda expression. A
lambda expression is an expression that returns a method. This sounds rather
Download from finelybook PI:EMAIL
624
odd because most expressions that you have encountered so far in C# actually
return a value. If you are familiar with functional programming languages
such as Haskell, you are probably comfortable with this concept. If you are
not, fear not: lambda expressions are not particularly complicated, and after
you have become accustomed to a new bit of syntax, you will see that they
are very useful.
Note If you are interested in finding out more about functional
programming with Haskell, visit the Haskell programming language
website at http://www.haskell.org/haskellwiki/.
Chapter 3, “Writing methods and applying scope,” explains that a typical
method consists of four elements: a return type, a method name, a list of
parameters, and a method body. A lambda expression contains two of these
elements: a list of parameters and a method body. Lambda expressions do not
define a method name, and the return type (if any) is inferred from the
context in which the lambda expression is used. In the case of the Find
method, the predicate processes each item in the collection in turn; the body
of the predicate must examine the item and return true or false depending on
whether it matches the search criteria. The example that follows shows the
Find method (highlighted in bold) on a List collection, where
Person is a struct. The Find method returns the first item in the list that has
the ID property set to 3:
Click here to view code image
struct Person
{
   public int ID { get; set; }
   public string Name { get; set; }
   public int Age { get; set; }
}
...
// Create and populate the personnel list
List personnel = new List()
{
   new Person() { ID = 1, Name = "John", Age = 53 },
   new Person() { ID = 2, Name = "Sid", Age = 28 },
Download from finelybook PI:EMAIL
625
   new Person() { ID = 3, Name = "Fred", Age = 34 },
   new Person() { ID = 4, Name = "Paul", Age = 22 },
};
// Find the member of the list that has an ID of 3
Person match = personnel.Find((Person p) => { return p.ID == 3; });
Console.WriteLine($"ID: {match.ID}\nName: {match.Name}\nAge:
{match.Age}");
Here is the output generated by this code:
ID: 3
Name: Fred
Age: 34
In the call to the Find method, the argument (Person p) => { return p.ID
== 3; } is a lambda expression that actually does the work. It has the
following syntactic items:
A list of parameters enclosed in parentheses. As with a regular method,
if the method you are defining (as in the preceding example) takes no
parameters, you must still provide the parentheses. In the case of the
Find method, the predicate is provided with each item from the
collection in turn, and this item is passed as the parameter to the
lambda expression.
The => operator, which indicates to the C# compiler that this is a
lambda expression.
The body of the method. The example shown here is very simple,
containing a single statement that returns a Boolean value indicating
whether the item specified in the parameter matches the search criteria.
However, a lambda expression can contain multiple statements, and
you can format it in whatever way you feel is most readable. Just
remember to add a semicolon after each statement, as you would in an
ordinary method.
Important You also saw in Chapter 3 how the => operator is used to
define expression-bodied methods. Rather confusingly, this is a
somewhat overloaded use of the => operator. Although there are some
notional similarities, expression-bodied methods and lambda
Download from finelybook PI:EMAIL
626
expressions are semantically (and functionally) quite different beasts;
you should not confuse them.
Strictly speaking, the body of a lambda expression can be a method body
containing multiple statements or be a single expression. If the body of a
lambda expression contains only a single expression, you can omit the braces
and the semicolon (but you still need a semicolon to complete the entire
statement). Additionally, if the expression takes a single parameter, you can
omit the parentheses that surround the parameter. Finally, in many cases, you
can actually omit the type of the parameters because the compiler can infer
this information from the context from which the lambda expression is
invoked. A simplified form of the Find statement shown previously looks
like this (which is much easier to read and understand):
Click here to view code image
Person match = personnel.Find(p => p.ID == 3);
The forms of lambda expressions
Lambda expressions are very powerful constructs, and you will encounter
them with increasing frequency as you delve deeper into C# programming.
The expressions themselves can take some subtly different forms. Lambda
expressions were originally part of a mathematical notation called the lambda
calculus, which provides a notation for describing functions. (You can think
of a function as a method that returns a value.) Although the C# language has
extended the syntax and semantics of the lambda calculus in its
implementation of lambda expressions, many of the original principles still
apply. Here are some examples showing the different forms of lambda
expressions available in C#:
Click here to view code image
x => x * x // A simple expression that returns the square of its
parameter
           // The type of parameter x is inferred from the context.
x => { return x * x ; } // Semantically the same as the preceding
                        // expression, but using a C# statement block
as
                        // a body rather than a simple expression
Download from finelybook PI:EMAIL
627
(int x) => x / 2 // A simple expression that returns the value of the
                 // parameter divided by 2
                 // The type of parameter x is stated explicitly.
() => folder.StopFolding(0) // Calling a method
                            // The expression takes no parameters.
                            // The expression might or might not
                            // return a value.
(x, y) => { x++; return x / y; } // Multiple parameters; the compiler
                                 // infers the parameter types.
                                 // The parameter x is passed by
value, so
                                 // the effect of the ++ operation is
                                 // local to the expression.
(ref int x, int y) => { x++; return x / y; } // Multiple parameters
                                             // with explicit types
                                             // Parameter x is passed
by
                                             // reference, so the
effect of
                                             // the ++ operation is
permanent.
To summarize, here are some features of lambda expressions of which
you should be aware:
If a lambda expression takes parameters, you specify them in the
parentheses to the left of the => operator. You can omit the types of
parameters, and the C# compiler will infer their types from the context
of the lambda expression. You can pass parameters by reference (by
using the ref keyword) if you want the lambda expression to be able to
change its values other than locally, but this is not recommended.
Lambda expressions can return values, but the return type must match
that of the corresponding delegate.
The body of a lambda expression can be a simple expression or a block
of C# code made up of multiple statements, method calls, variable
definitions, and other code items.
Variables defined in a lambda expression method go out of scope when
the method finishes.
A lambda expression can access and modify all variables outside the
lambda expression that are in scope when the lambda expression is
Download from finelybook PI:EMAIL
628
defined. Be very careful with this feature!
Lambda expressions and anonymous methods
Lambda expressions were added to the C# language in version 3.0. C#
version 2.0 introduced anonymous methods, which can perform a
similar task but are not as flexible. Anonymous methods were added
primarily so that you can define delegates without having to create a
named method; you simply provide the definition of the method body in
place of the method name, like this:
Click here to view code image
this.stopMachinery += delegate { folder.StopFolding(0); };
You can also pass an anonymous method as a parameter in place of a
delegate, like this:
Click here to view code image
control.Add(delegate { folder.StopFolding(0); } );
Notice that whenever you introduce an anonymous method, you
must prefix it with the delegate keyword. Also, any parameters needed
are specified in parentheses following the delegate keyword, as
illustrated in the following example:
Click here to view code image
control.Add(delegate(int param1, string param2)
  { /* code that uses param1 and param2 */ ... });
Lambda expressions provide a more succinct and natural syntax than
anonymous methods, and they pervade many of the more advanced
aspects of C#, as you will see throughout the subsequent chapters in this
book. Generally speaking, you should use lambda expressions rather
than anonymous methods in your code.
Comparing arrays and collections
Download from finelybook PI:EMAIL
629
Here’s a summary of the important differences between arrays and
collections:
An array instance has a fixed size and cannot grow or shrink. A
collection can dynamically resize itself as required.
An array can have more than one dimension. A collection is linear.
However, the items in a collection can be collections themselves, so
you can imitate a multidimensional array as a collection of collections.
You store and retrieve an item in an array by using an index. Not all
collections support this notion. For example, to store an item in a
List collection, you use the Add or Insert method, and to retrieve
an item, you use the Find method.
Many of the collection classes provide a ToArray method that creates
and populates an array containing the items in the collection. The items
are copied to the array and are not removed from the collection.
Additionally, these collections provide constructors that can populate a
collection directly from an array.
Using collection classes to play cards
In the next exercise, you will convert the card game developed in Chapter 10
to use collections rather than arrays.
Use collections to implement a card game
1. Start Microsoft Visual Studio 2017 if it is not already running.
2. Open the Cards solution, which is located in the \Microsoft
Press\VCSBS\Chapter 18\Cards folder in your Documents folder.
This project contains an updated version of the project from Chapter 10
that deals hands of cards by using arrays. The PlayingCard class is
modified to expose the value and suit of a card as read-only properties.
3. Display the Pack.cs file in the Code and Text Editor window. Add the
following using directive to the top of the file:
using System.Collections.Generic;
4. In the Pack class, change the definition of the cardPack two-
Download from finelybook PI:EMAIL
630
dimensional array to a Dictionary> object, as
shown here in bold:
Click here to view code image
class Pack
{
    ...
    private Dictionary> cardPack;
    ...
}
The original application used a two-dimensional array for representing a
pack of cards. This code replaces the array with a Dictionary, where the
key specifies the suit and the value is a list of cards in that suit.
5. Locate the Pack constructor. Modify the first statement in this
constructor to instantiate the cardPack variable as a new Dictionary
collection rather than as an array, as shown here in bold:
Click here to view code image
public Pack()
{
    this.cardPack = new Dictionary>
(NumSuits);
    ...
}
Although a Dictionary collection will resize itself automatically as items
are added, if the collection is unlikely to change in size, you can specify
an initial size when you instantiate it. This helps to optimize the memory
allocation (although the Dictionary collection can still grow if this size
is exceeded). In this case, the Dictionary collection will contain a
collection of four lists (one list for each suit), so it is allocated space for
four items (NumSuits is a constant with the value 4).
6. In the outer for loop, declare a List collection object
called cardsInSuit that is big enough to hold the number of cards in each
suit (use the CardsPerSuit constant), as follows in bold:
Click here to view code image
public Pack()
{
    this.cardPack = new Dictionary>
(NumSuits);
Download from finelybook PI:EMAIL
631
    for (Suit = Suit.Clubs; suit  cardsInSuit = new List
(CardsPerSuit);
        for (Value value = Value.Two; value  cardsInSuit = new List
(CardsPerSuit);
   for (Value value = Value.Two; value  cardsInSuit = new List
(CardsPerSuit);
    for (Value value = Value.Two; value  cardsInSuit = this.cardPack[suit];
    PlayingCard card = cardsInSuit.Find(c => c.CardValue ==
value);
    cardsInSuit.Remove(card);
    return card;
}
10. Locate the IsCardAlreadyDealt method.
This method determines whether a card has already been dealt by
checking whether the corresponding element in the array has been set to
null. You need to modify this method to determine whether a card with
the specified value is present in the list for the suit in the cardPack
Dictionary collection.
To determine whether an item exists in a List collection, you use the
Exists method. This method is similar to Find in as much as it takes a
predicate as its argument. The predicate is passed each item from the
collection in turn, and it should return true if the item matches some
Download from finelybook PI:EMAIL
633
specified criteria, and false otherwise. In this case, the List
collection holds PlayingCard objects, and the criteria for the Exists
predicate should return true if it is passed a PlayingCard item with a suit
and value that matches the parameters passed to the IsCardAlreadyDealt
method.
Update the method, as shown in the following example in bold:
Click here to view code image
private bool IsCardAlreadyDealt(Suit suit, Value value)
{
  List cardsInSuit = this.cardPack[suit];