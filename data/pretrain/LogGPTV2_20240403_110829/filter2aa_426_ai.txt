it might not always be as easy as for websites, injecting payloads in Electron apps is definitely possible
through protocol handlers, remote content, etc.
Existing vulnerabilities in three Electron apps were discussed. This revealed the following common secu-
rity weaknesses that were considered further in the next steps: XSS due to use of dangerous functions, RCE
due to use of shell.openExternal(), XSS escalation to RCE due to Node integration and XSS escalation
to RCE due to insecure preload or no context isolation.
A method for analysing Electron apps large-scale was presented, consisting of three steps with the first
step collecting open source apps from GitHub and both open and closed source apps from the Electron app
list; the second step automatically downloading these apps and extracting the source code from closed source
apps; and the final step analysing the apps using npm audit and a custom version of the Electronegativity
security scanner.
The results from this analysis gave an insight into the security-consciousness of Electron app developers.
They showed that while on the one hand, the situation is improving with more and more settings moving
to secure defaults and developers starting to be aware of the necessary security considerations for Electron,
on the other hand, a lot is still left to do. A worrying amount of apps is using Electron versions that have
been unsupported for a long time, the use of potentially dangerous functions is common and most apps
don’t go beyond the defaults, not explicitly setting secure preferences and not making use of additional
security features like CSPs.
To help with this, recommendations were given to the Electron developers and individual app developers.
Most importantly, Electron needs to improve its documentation to consistently push secure practices, they
should implement safe wrappers around dangerous functions for common use cases and continue the move
to secure defaults. App developers need to regularly update their dependencies, particularly Electron itself,
and consciously set secure preferences. Using automated security scanners like Electronegativity can help
catch problems early.
Finally, the manual analysis showed that there are still low-hanging fruit vulnerabilities even in fairly high-
profile Electron apps. The found exploitable vulnerabilities have been reported to the respective projects
with one having already been fixed as of the time of writing.
9.1. Future Work
The analysis presented in this thesis gave a snapshot into the security practices of Electron apps as of mid
2020. It would be interesting to see how these change over time. Previous research has focussed only on
analysing a small number of apps (see Section 8.2). Using the GitHub API, it should be possible to obtain
older versions of a large number of apps and run the scripts explained in this thesis on them. This could of
9.1. Future Work
51
course also be done with future versions of the apps once they are released.
Further, one could look at particular subsets of apps to analyse. For example, it was shown that some
apps are only wrappers around existing websites. For these apps, secure settings are even more crucial, and
analysing just these apps could show if there are any differences in the findings. Alternatively, one could
filter the apps to be considered by when they were last updated or when the last commit was made to weed
out discontinued apps. Future work could also focus on particular aspects, going more in-depth where this
thesis only gave a broad overview of the situation. For example, the CSPs used by the apps were already
collected by the scripts but not further analysed.
Of course, similar research could also be done for the other frameworks discussed in Section 8.3.
Going in the other direction, there are also possibilities to extend the analysis. For example, while most
closed source apps could be extracted successfully, for some the automated extractors failed. Some apps
were also missed due to false negatives in the Electron detection. Naturally, one could also think of more
checks to be run. One potential area here are the installers and updaters that are commonly used for
Electron apps. Vulnerabilities have already been discovered in those [99], so they present an additional
attack vector.
Apart from analysing many apps, improving tools to analyse individual apps is also important. Elec-
tronegativity offers great potential here. It would for example be helpful to many developers to improve
the checks that report items as “review manually” to avoid false positives. And finally, security researchers
should of course continue to look for specific vulnerabilities in Electron apps and report them to the projects.
10. Bibliography
[1] OpenJS Foundation and The Electron contributors, “Homepage,” Electron, 02-Jun-2020. [Online]. Avail-
able: https://www.electronjs.org/. [Accessed: 13-Jul-2020]
[2] K. Sawicki, “Atom Shell is now Electron,” Electron Blog, 23-Apr-2015. [Online]. Available: https://
www.electronjs.org/blog/electron. [Accessed: 13-Jul-2020]
[3] C. Kerr and S. Nguy, “Electron Governance,” Electron Blog, 18-Mar-2019. [Online]. Available: https:
//www.electronjs.org/blog/governance. [Accessed: 13-Jul-2020]
[4] F. Rieseberg, “Electron joins the OpenJS Foundation,” Electron Blog, 11-Dec-2020. [Online]. Available:
https://www.electronjs.org/blog/electron-joins-openjsf. [Accessed: 13-Jul-2020]
[5] OpenJS Foundation, “Hosted Projects,” OpenJS Foundation, 26-Jun-2020. [Online]. Available: https:
//openjsf.org/projects/. [Accessed: 13-Jul-2020]
[6] C. Griﬀith and L. Wells, Electron: From Beginner to Pro, 1st ed. Apress, 2017 [Online]. Available:
https://www.apress.com/de/book/9781484228258. [Accessed: 12-Jul-2020]
[7] F. Rieseberg, S. Vohr, J. Goldberg, C. Kerr, and C. Hawkes, “Application Architecture,” Electron
Documentation, 30-Sep-2019. [Online]. Available: https://www.electronjs.org/docs/tutorial/
application-architecture. [Accessed: 13-Jul-2020]
[8] C. Nokes, “Deep dive into Electron’s main and renderer processes,” 26-Oct-2016. [Online]. Avail-
able:
https://cameronnokes.com/blog/deep-dive-into-electron's-main-and-renderer-
processes/. [Accessed: 13-Jul-2020]
[9] S. Powers, Learning Node: Moving to the Server-Side. O’Reilly Media, Inc., 2016.
[10] M. Burda et al., “Writing Your First Electron App,” Electron Documentation, 03-Feb-2020. [Online].
Available: https://www.electronjs.org/docs/tutorial/first-app. [Accessed: 13-Jul-2020]
[11] C. Zhao et al., “Application Distribution,” Electron Documentation, 13-Apr-2020. [Online]. Avail-
able: https://www.electronjs.org/docs/tutorial/application-distribution. [Accessed: 25-
Jul-2020]
[12] F. Rieseberg et al., “Notifications (Windows, Linux, macOS),” Electron Documentation, 08-Jan-2019.
[Online]. Available: https://www.electronjs.org/docs/tutorial/notifications. [Accessed: 13-
Jul-2020]
[13] M. Lee, J. Kleinschmidt, V. Hashimoto, F. Rieseberg, and C. Kerr, “macOS Dock,” Electron Documen-
tation, 31-Mar-2020. [Online]. Available: https://www.electronjs.org/docs/tutorial/macos-
dock. [Accessed: 13-Jul-2020]
[14] The OWASP Foundation, “OWASP Top Ten Web Application Security Risks,” 20-Nov-2017. [Online].
Available: https://owasp.org/www-project-top-ten/. [Accessed: 09-Jun-2020]
[15] D. Ray and J. Ligatti, “Defining Injection Attacks,” in Information Security, Cham, 2014, pp. 425–441,
doi: 10.1007/978-3-319-13257-0_26.
[16] L. Tal, Essential Node.js Security. Lulu.com, 2017.
10. Bibliography
53
[17]
The
OWASP
Foundation,
“A2:2017-Broken
Authentication,”
OWASP
Top
Ten
2017.
[On-
line]. Available: https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_
A2-Broken_Authentication.html. [Accessed: 09-Jun-2020]
[18] The MITRE Corporation, “CWE-200: Exposure of Sensitive Information to an Unauthorized Ac-
tor (4.0),” Common Weakness Enumeration. [Online]. Available: https://cwe.mitre.org/data/
definitions/200.html. [Accessed: 09-Jun-2020]
[19] L. Carettoni and L. Stella, “Electronegativity Checks,” Electronegativity Wiki, 14-Apr-2020. [On-
line]. Available: https://github.com/doyensec/electronegativity/wiki#electronegativity-
checks. [Accessed: 13-Jun-2020]
[20] PortSwigger Ltd., “What is XXE (XML external entity) injection? Tutorial & Examples,” Web Security
Academy. [Online]. Available: https://portswigger.net/web-security/xxe. [Accessed: 10-Jun-
2020]
[21] The MITRE Corporation, “CWE-284: Improper Access Control (4.0),” Common Weakness Enumer-
ation. [Online]. Available: https://cwe.mitre.org/data/definitions/284.html. [Accessed: 10-
Jun-2020]
[22] The OWASP Foundation, “A6:2017-Security Misconfiguration,” OWASP Top Ten 2017. [On-
line]. Available: https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_
A6-Security_Misconfiguration.html. [Accessed: 10-Jun-2020]
[23] S. Gupta and B. B. Gupta, “Cross-Site Scripting (XSS) attacks and defense mechanisms: classifica-
tion and state-of-the-art,” Int J Syst Assur Eng Manag, vol. 8, no. 1, pp. 512–530, Jan. 2017, doi:
10.1007/s13198-015-0376-0.
[24] Acunetix Ltd, “What is Insecure Deserialization?” Web Security Zone (The Acunetix Blog), 07-
Dec-2017. [Online]. Available: https://www.acunetix.com/blog/articles/what-is-insecure-
deserialization/. [Accessed: 11-Jun-2020]
[25] OpSecX, “Exploiting Node.js deserialization bug for Remote Code Execution,” OpSecX, 08-
Feb-2017. [Online]. Available: https://opsecx.com/index.php/2017/02/08/exploiting-node-
js-deserialization-bug-for-remote-code-execution/. [Accessed: 11-Jun-2020]
[26] M. Morszczyzna, “What’s really wrong with node_modules and why this is your fault,” Hacker
Noon, 27-Nov-2017. [Online]. Available: https://hackernoon.com/whats-really-wrong-with-
node-modules-and-why-this-is-your-fault-8ac9fa893823. [Accessed: 25-Jul-2020]
[27] A. Baldwin, “npm audit: identify and fix insecure dependencies,” The npm Blog, 09-May-2018. [On-
line]. Available: https://blog.npmjs.org/post/173719309445/npm-audit-identify-and-fix-
insecure. [Accessed: 11-Jun-2020]
[28] The OWASP Foundation, “A10:2017-Insuﬀicient Logging & Monitoring,” OWASP Top Ten 2017. [On-
line]. Available: https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_
A10-Insufficient_Logging%252526Monitoring.html. [Accessed: 11-Jun-2020]
[29] P. Tsakalidis, “How To Backdoor Any Electron Application,” Context Information Security
Blog, 24-Jan-2019. [Online]. Available: https://www.contextis.com/en/blog/basic-electron-
framework-exploitation. [Accessed: 13-Jun-2020]
[30] J. Harrison, “Issue #123: Code Signing of ASAR files, especially for Windows operating system,”
electron/asar Issue Tracker on GitHub, 27-May-2017. [Online]. Available: https://github.com/
10. Bibliography
54
electron/asar/issues/123. [Accessed: 13-Jun-2020]
[31] M. Stockley, “How scammers abuse Google Search’s open redirect feature,” Naked Security, 15-
May-2020. [Online]. Available: https://nakedsecurity.sophos.com/2020/05/15/how-scammers-
abuse-google-searchs-open-redirect-feature/. [Accessed: 13-Jun-2020]
[32] K. Kotowicz, “Open redirects that matter,” Google Bughunter University, 20-Oct-2016. [On-
line].
Available:
https://sites.google.com/site/bughunteruniversity/best-reports/
openredirectsthatmatter. [Accessed: 13-Jun-2020]
[33] L. Carettoni, “Electron Security Checklist: A guide for developers and auditors,” Doyensec,
LLC.,
Jul.
2017
[Online].
Available:
https://doyensec.com/resources/us-17-Carettoni-
Electronegativity-A-Study-Of-Electron-Security-wp.pdf. [Accessed: 13-Jun-2020]
[34] M. Bentkowski, “Vulnerability in Hangouts Chat: from open redirect to code execution,” MB
blog, 23-Jul-2018. [Online]. Available: https://blog.bentkowski.info/2018/07/vulnerability-
in-hangouts-chat-aka-how.html. [Accessed: 13-Jun-2020]
[35] M. Austin, “I found the path to full Remote Code Execution in @SecurityMB’s open redirect in Google
Chat Desktop, good for @GoogleVRP for paying it out!” Twitter, 27-Jul-2018. [Online]. Available:
https://twitter.com/mattaustin/status/1022648925902200832. [Accessed: 13-Jun-2020]
[36] MDN contributors, “Content Security Policy (CSP),” MDN Web Docs, 02-Jun-2020. [Online]. Available:
https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP. [Accessed: 13-Jun-2020]
[37] S. Lekies, K. Kotowicz, S. Groß, E. A. Vela Nava, and M. Johns, “Code-Reuse Attacks for the Web:
Breaking Cross-Site Scripting Mitigations via Script Gadgets,” in Proceedings of the 2017 ACM
SIGSAC Conference on Computer and Communications Security, Dallas, Texas, USA, 2017, pp.
1709–1723, doi: 10.1145/3133956.3134091.
[38] F. Rieseberg et al., “Electron Security Warnings,” Electron Documentation, 01-Jun-2020. [On-
line]. Available: https://www.electronjs.org/docs/tutorial/security#checklist-security-
recommendations. [Accessed: 14-Jun-2020]
[39] Jeremy Rose et al., “Breaking Changes,” Electron Documentation, 19-May-2020. [Online]. Available:
https://www.electronjs.org/docs/breaking-changes. [Accessed: 13-Jun-2020]
[40] S. Miskin, “Pull Request #19732: docs: update contextIsolation documentation on access to globals,”
electron/electron Issue Tracker on GitHub, 13-Aug-2019. [Online]. Available: https://github.com/
electron/electron/pull/19732. [Accessed: 10-Jul-2020]
[41] M. Kinugawa, “Electron: Abusing the lack of context isolation,” CureCon 08/2018, 18-Aug-2018 [On-
line]. Available: https://speakerdeck.com/masatokinugawa/electron-abusing-the-lack-of-
context-isolation-curecon-en. [Accessed: 14-Jul-2020]
[42] S. Attard and M. Lee, “contextBridge,” Electron Documentation, 28-Jan-2020. [Online]. Available:
https://www.electronjs.org/docs/api/context-bridge. [Accessed: 10-Jul-2020]
[43] S. Attard, “Context Isolation,” Electron Documentation, 11-May-2020. [Online]. Available: https://
www.electronjs.org/docs/tutorial/context-isolation. [Accessed: 10-Jul-2020]
[44] C. Zhao et al., “Remote module,” Electron Documentation, 01-Jun-2020. [Online]. Available: https:
//www.electronjs.org/docs/api/remote. [Accessed: 14-Jun-2020]
[45] C. Zhao et al., “Class: BrowserWindow,” Electron Documentation, 01-Jun-2020. [Online]. Available:
https://www.electronjs.org/docs/api/browser-window#class-browserwindow. [Accessed: 14-
10. Bibliography
55
Jun-2020]
[46] J. Rose, “Electron’s ‘remote’ module considered harmful,” Medium, 06-Feb-2020. [Online]. Avail-
able:
https://medium.com/@nornagon/electrons-remote-module-considered-harmful-
70d69500f31. [Accessed: 14-Jun-2020]
[47] M. Burda et al., “sandbox Option,” Electron Documentation, 01-Jun-2020. [Online]. Available: https:
//www.electronjs.org/docs/api/sandbox-option. [Accessed: 14-Jun-2020]
[48] L. Stella, “CUSTOM_ARGUMENTS_JS_CHECK,” Electronegativity Wiki, 09-Apr-2019. [Online].
Available: https://github.com/doyensec/electronegativity. [Accessed: 14-Jun-2020]
[49]
C.
Zhao
et
al.,
“ses.setPermissionRequestHandler(handler),”
Electron
Documentation,
01-Jun-2020.
[Online].
Available:
https://www.electronjs.org/docs/api/session#
sessetpermissionrequesthandlerhandler. [Accessed: 14-Jun-2020]
[50] C. Zhao et al., “protocol,” Electron Documentation, 01-Jun-2020. [Online]. Available: https://www.
electronjs.org/docs/api/protocol. [Accessed: 14-Jun-2020]
[51] C. Zhao et al., “app,” Electron Documentation, 01-Jun-2020. [Online]. Available: https://www.
electronjs.org/docs/api/app. [Accessed: 14-Jun-2020]
[52] L. Carettoni, “Subverting Electron Apps via Insecure Preload,” Doyensec Blog, 03-Apr-2019.
[Online]. Available: https://blog.doyensec.com/2019/04/03/subverting-electron-apps-via-
insecure-preload.html. [Accessed: 14-Jun-2020]
[53]
L.
Carettoni,
“Democratizing
Electron
Security,”
Covalence
2020,
24-Jan-2020
[On-
line].
Available:
https://doyensec.com/resources/Covalence-2020-Carettoni-
DemocratizingElectronSecurity.pdf. [Accessed: 10-Jul-2020]
[54] The Leanote contributors, “leanote/leanote,” GitHub, 09-Apr-2019. [Online]. Available: https://
github.com/leanote/leanote. [Accessed: 25-Jun-2020]
[55] S. Väli, “Issue #284: XSS to code execution,” leanote/desktop-app Issue Tracker on GitHub, 01-Dec-
2017. [Online]. Available: https://github.com/leanote/desktop-app/issues/284. [Accessed: 25-
Jun-2020]
[56] Packt Publishing and jQuery Foundation,“.append(),” jQuery API Documentation, 17-May-2016. [On-
line]. Available: https://api.jquery.com/append/. [Accessed: 25-Jun-2020]
[57] D. Sacerdote, “nc — arbitrary TCP and UDP connections and listens,” Ubuntu Manpages, 27-
Dec-2018. [Online]. Available: http://manpages.ubuntu.com/manpages/focal/man1/nc_openbsd.
1.html#client/server%20model. [Accessed: 26-Jun-2020]
[58] R. Walikar, “Nodejs RCE and a simple reverse shell,” i break software, 23-Aug-2016. [Online]. Available:
https://ibreak.software/2016/08/nodejs-rce-and-a-simple-reverse-shell/. [Accessed: 26-
Jun-2020]
[59] imagemlt, “Issue #345: markdown feature XSS to code execution,” leanote/desktop-app Issue Tracker
on GitHub, 08-Oct-2019. [Online]. Available: https://github.com/leanote/desktop-app/issues/
345. [Accessed: 26-Jun-2020]
[60] The Leanote contributors, “Creating groups and adding members,” Leanote manual, 10-Jul-2015. [On-
line]. Available: http://leanote.leanote.com/post/group. [Accessed: 26-Jun-2020]
[61] The Leanote contributors, “Sharing notebooks and notes with friends and groups,” Leanote manual, 10-
10. Bibliography
56
Jul-2015. [Online]. Available: http://leanote.leanote.com/post/share. [Accessed: 26-Jun-2020]