chitecture, we follow the memory access with the address
above ebp, such as ebp + 4 or ebp + 8, to ﬁnd the num-
ber and variables for the arguments, and the last value of
eax will be the return value. Supporting additional calling
conventions is straight-forward, e.g., adding fastcall would
entail adding constraints that the ﬁrst two arguments are
passed in ecx and edx.
Constraints for structural data. To infer the type of
structural data, we restate the rules in Figure 7. Binary
programs access the structural data in two ways: 1) access
via pointers, where binary programs calculate the address
of ﬁelds by arithmetic operations on the base pointer, and
2) direct access, where the structural data reside in the stack
as multiple variables, and the ﬁelds are accessed directly.
Unfortunately, directly accessing structure ﬁelds is indis-
tinguishable from accessing local variables on the stack.
Therefore, we use the access via pointers as a hint that re-
veals the presence of structural data.
Figure 8 gives the intuition of constraint generation for
structural data. A variable m of a two-ﬁeld structure bar
is located on the stack and a pointer p points to m. When
the second ﬁeld size is accessed through p, its address
is calculated by applying an add operation with pointer p.
Thus, we can tell that p points to structural data, which has
at least one ﬁeld at offset 4.
To handle constraints for such hints, we redeﬁne the rules
for e1 +32 e2. If a pointer is used in addition with a constant
value, we infer it as a pointer to structural data as follows.
(τe1  Tγ ∧ Tγ  ptr(Tβ))
∨(τe1  ptr(Tβ)),
pname : Tαsize : Tβpoints+4{0 : Tα, 4 : Tβ} Ptr {0 : Tα, 4 : Tβ} mwhere [e1] and [e2] are the value of e1 and e2, respectively.
For example, the constraint generated for p is (we show the
2nd disjunctive constraint) ··· ∨ (τp  ptr(Tβ)) ∨ ··· .
6.3 Constraint Solving
The ﬁnal step in TIE is solving the generated type con-
straints. In this section we present our constraint solving al-
gorithm, that takes in a list of type constraints C and returns
a map from type variables to the inferred type interval. We
use a uniﬁcation algorithm extended to support subtypes.
During the constraint solving process, we keep a working
set that contains the current state of our algorithm. The
working set consists of the following:
• C: the list of type constraints that remain to be pro-
• S and ⊥,
respectively. Every time we process a subtype relation con-
straint that involves a type α, the closure algorithm uses
the constraint to reﬁne the type interval of α. For exam-
ple, the constraint α 
T1 : ptr(P1) T2 : ptr(P2) ptr(P1 u P2) ‘ T3
T1 t T2 ‘ T3
J-PTR
J-NOREL
α t T ‘ α ∪ T
U : {li : Si} V ∈ τ base U t {0 : V } ‘ T
J-TYPEVAR
U t V ‘ T
J-RECBASE
Figure 9. Rules for u and t operations
Decomposition Rules. Before solving a subtype relation
constraint, we try to simplify it by applying decomposition
rules. For instance, if a type is a subtype of an intersection
type, S  T and
α  V , both satisﬁable with the current working
set. The disjunctive constraints are
(α  T ) ∨ (α  V ) =
(α  T ∧ β :> V )
(2)
If Eq.2 holds for α and β , the more conservative condition
α  T ∩ V also holds. Thus, the above
disjunctive constraints can be conservatively merged into
conjunctive constraints: (α  T ∩ V ).
6.3.5 Collection and interpretation of results
After solving all the constraints (C = ∅), each working set
is a solution. Since our type system has richer types than C,
we generalize the solution.
(a) Precision
(b) Conservativeness rate
Figure 10. Summary of precision (left) and conservativeness (right)
Type interval.
In the working set, the upper bound and
lower bound provide the range of the inferred type for the
variable. We call the interval from the lower bound to the
upper bound of a variable α as a “type interval,” denoted by
[B↓(α),B↑(α)].
Structural equality in results. The real types in C source
codes has struct and arrays for structural types. However,
pointers are also used interchangeably with them. Thus, the
three types are not distinguishable because their behavior is
the same in binary programs. In our type system, we assume
they are in structural equivalence as follows:
ptr(α) ≡ {0 7→ α} ≡ α[](array)
When we compare two structural equivalent types. We con-
vert the type into a record type {0 7→ α}, which is the most
general form.
Collection and generalization. We convert each work-
ing set into a ﬁnal solution. First, if a type variable, Tα,
is remained in B↑ and B↓, we replace it as B↑(Tα) in B↑
and B↓(Tα) in B↓, respectively. We also generalize record
types. If B↑ of record types has ﬁelds of >, we remove the
ﬁelds. If all the ﬁelds in B↑ are of the same type, {li : T ∀i},
we convert it to more general structure form, {0 : T}, ac-
cording to the structural equivalence. Second, for each term
t, we ﬁnd a matching type variable Tt and a type interval
of [B↓(α),B↓(α)].
If S= has a mapping for Tt, we use
the equivalent type variable of Tt in S= instead of Tt. At
last, we collect the result for memory and group them by
its address. Since we are based on the SSA form, we may
have more than one variable for each memory address and
it means the memory location is reused by various data of
different type. Thus, we combine members for the same
address as a union type of them. Through this collection
process, each variable has a ﬁnal type interval.
7 Implementation
TIE is primarily implemented in 29k of OCaml code,
most of which is generic binary analysis code such as a
data-ﬂow framework, building CFG’s, etc. Our static anal-
ysis component uses a linear sweep disassembler written
in C build on top of libopcodes (more advanced disas-
sembly such as dealing with obfuscated code is left outside
the scope of this paper, but such routines can be plugged
into our infrastructure). We base our dynamic analysis on
PIN [13], and currently there are about 1.4k lines of C++
code to create the instruction trace. The variable recovery
and type inference are approximately 3.6 and 2.1K lines of
OCaml, respectively.
8 Evaluation
8.1 Evaluation Setup
We have
evaluated TIE on 87 programs
from
coreutils (v8.4). We compiled the programs with de-
bug support but only use the information for measuring type
inference accuracy. The type information was extracted us-
ing libdwarf. TIE’s inter-procedural analysis used func-
tion prototypes for libc, as extracted from the appropriate
header ﬁles. All experiments are performed on 32-bit x86
binaries in Linux.
We measure the accuracy of TIE against
the RE-
WARDS [12] code given to use by the authors for the dy-
namic analysis setting, and against Hex-rays decompiler