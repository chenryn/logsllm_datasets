###  列出所有已注册的ETW提供者
`logman query
providers`命令列出所有已注册的ETW提供者，还有它们的名称和GUID。如果将二进制manifest保存在`HKLMSOFTWAREMicrosoftWindowsCurrentVersionWINEVTPublishers{PROVIDER_GUID}`注册表项中，则将注册ETW提供者。例如，`Microsoft-Windows-PowerShell`提供者具有以下注册表值：
ETW和事件日志知道如何根据在`ResourceFileName`注册表值中列出的二进制文件中的`WEVT_TEMPLATE`的序列化二进制信息正确地解析事件信息并向用户显示事件信息。该资源是[工具清单(instrumentation
manifest)](https://docs.microsoft.com/en-us/windows/desktop/wes/writing-an-instrumentation-manifest)的二进制表示。我们没有关于`WEVT_Template`二进制结构的说明文档，但至少有两个工具可用于帮助解析和恢复事件模式(event
schema)：[WEPExplorer](https://github.com/lallousx86/WEPExplorer)和[Perfview](https://github.com/Microsoft/perfview)。
###  单独查看提供者
logman打印提供者的基本信息。例如：
    > logman query providers Microsoft-Windows-PowerShell
    Provider                        GUID
    ----------------------------------------------------------------------    Microsoft-Windows-PowerShell    {A0C1853B-5C40-4B15-8766-3CF1C58F985A}
    Value               Keyword              Description
    ----------------------------------------------------------------------    0x0000000000000001  Runspace             PowerShell Runspace
    0x0000000000000002  Pipeline             Pipeline of Commands
    0x0000000000000004  Protocol             PowerShell remoting protocol
    0x0000000000000008  Transport            PowerShell remoting transport
    0x0000000000000010  Host                 PowerShell remoting host proxy calls
    0x0000000000000020  Cmdlets              All remoting cmdlets
    0x0000000000000040  Serializer           The serialization layer
    0x0000000000000080  Session              All session layer
    0x0000000000000100  Plugin               The managed PowerShell plugin worker
    0x0000000000000200  PSWorkflow           PSWorkflow Hosting And Execution Layer
    0x0001000000000000  win:ResponseTime     Response Time
    0x8000000000000000  Microsoft-Windows-PowerShell/Operational Microsoft-Windows-PowerShell/Operational
    0x4000000000000000  Microsoft-Windows-PowerShell/Analytic Microsoft-Windows-PowerShell/Analytic
    0x2000000000000000  Microsoft-Windows-PowerShell/Debug Microsoft-Windows-PowerShell/Debug
    0x1000000000000000  Microsoft-Windows-PowerShell/Admin Microsoft-Windows-PowerShell/Admin
    Value        Level                Description
    --------------------------------------------------------------------    0x02         win:Error            Error
    0x03         win:Warning          Warning
    0x04         win:Informational    Information
    0x05         win:Verbose          Verbose
    0x14         Debug                Debug level defined by PowerShell (which is above Informational defined by system)
    PID          Image
    ----------------------------------------------------------------------    0x00000730   C:WindowsSystem32WindowsPowerShellv1.0powershell.exe
    0x0000100c   C:WindowsSystem32WindowsPowerShellv1.0powershell.exe
结果显示了可用的关键字和日志记录值，以及通过该提供者注册发出事件的所有进程。这些输出对于了解现有跟踪会话如何在提供者上筛选非常有用，还有助于初步发现其他有趣的信息，这些信息可以通过ETW跟踪收集。
特别要注意的是，PowerShell提供者似乎支持基于在定义的关键字中的保留关键字进行日志记录。并不是所有的ETW提供者都用于事件日志；相反，许多ETW提供者只是用于低级别的跟踪、调试和最近应用的安全测试。例如，Windows
Defender Advanced Threat Protection严重依赖ETW作为补充的检测数据源。
###  查看所有接收特定进程事件的提供者
另一种发现目标提供者的方法是查看所有接收特定进程事件的提供者。例如，下面显示了与`MsMpEng.exe`(Windows
Defender服务，在本例中通过PID 5244运行)相关的所有提供者：
    > logman query providers -pid 5244
    Provider                                 GUID
    -------------------------------------------------------------------------------    FWPUCLNT Trace Provider                  {5A1600D2-68E5-4DE7-BCF4-1C2D215FE0FE}
    Microsoft-Antimalware-Protection         {E4B70372-261F-4C54-8FA6-A5A7914D73DA}
    Microsoft-Antimalware-RTP                {8E92DEEF-5E17-413B-B927-59B2F06A3CFC}
    Microsoft-Antimalware-Service            {751EF305-6C6E-4FED-B847-02EF79D26AEF}
    Microsoft-IEFRAME                        {5C8BB950-959E-4309-8908-67961A1205D5}
    Microsoft-Windows-AppXDeployment         {8127F6D4-59F9-4ABF-8952-3E3A02073D5F}
    Microsoft-Windows-ASN1                   {D92EF8AC-99DD-4AB8-B91D-C6EBA85F3755}
    Microsoft-Windows-AsynchronousCausality  {19A4C69A-28EB-4D4B-8D94-5F19055A1B5C}
    Microsoft-Windows-CAPI2                  {5BBCA4A8-B209-48DC-A8C7-B23D3E5216FB}
    Microsoft-Windows-COM-Perf               {B8D6861B-D20F-4EEC-BBAE-87E0DD80602B}
    Microsoft-Windows-COM-RundownInstrumentation {2957313D-FCAA-5D4A-2F69-32CE5F0AC44E}
    Microsoft-Windows-COMRuntime             {BF406804-6AFA-46E7-8A48-6C357E1D6D61}
    Microsoft-Windows-Crypto-BCrypt          {C7E089AC-BA2A-11E0-9AF7-68384824019B}
    Microsoft-Windows-Crypto-NCrypt          {E8ED09DC-100C-45E2-9FC8-B53399EC1F70}
    Microsoft-Windows-Crypto-RSAEnh          {152FDB2B-6E9D-4B60-B317-815D5F174C4A}
    Microsoft-Windows-Deplorch               {B9DA9FE6-AE5F-4F3E-B2FA-8E623C11DC75}
    Microsoft-Windows-DNS-Client             {1C95126E-7EEA-49A9-A3FE-A378B03DDB4D}
    Microsoft-Windows-Heap-Snapshot          {901D2AFA-4FF6-46D7-8D0E-53645E1A47F5}
    Microsoft-Windows-Immersive-Shell-API    {5F0E257F-C224-43E5-9555-2ADCB8540A58}
    Microsoft-Windows-Kernel-AppCompat       {16A1ADC1-9B7F-4CD9-94B3-D8296AB1B130}
    Microsoft-Windows-KnownFolders           {8939299F-2315-4C5C-9B91-ABB86AA0627D}
    Microsoft-Windows-MPS-CLNT               {37945DC2-899B-44D1-B79C-DD4A9E57FF98}
    Microsoft-Windows-Networking-Correlation {83ED54F0-4D48-4E45-B16E-726FFD1FA4AF}
    Microsoft-Windows-NetworkProfile         {FBCFAC3F-8459-419F-8E48-1F0B49CDB85E}
    Microsoft-Windows-RPC                    {6AD52B32-D609-4BE9-AE07-CE8DAE937E39}
    Microsoft-Windows-RPC-Events             {F4AED7C7-A898-4627-B053-44A7CAA12FCD}
    Microsoft-Windows-Schannel-Events        {91CC1150-71AA-47E2-AE18-C96E61736B6F}
    Microsoft-Windows-Shell-Core             {30336ED4-E327-447C-9DE0-51B652C86108}
    Microsoft-Windows-URLMon                 {245F975D-909D-49ED-B8F9-9A75691D6B6B}
    Microsoft-Windows-User Profiles General  {DB00DFB6-29F9-4A9C-9B3B-1F4F9E7D9770}
    Microsoft-Windows-User-Diagnostic        {305FC87B-002A-5E26-D297-60223012CA9C}
    Microsoft-Windows-WebIO                  {50B3E73C-9370-461D-BB9F-26F32D68887D}
    Microsoft-Windows-Windows Defender       {11CD958A-C507-4EF3-B3F2-5FD9DFBD2C78}
    Microsoft-Windows-WinHttp                {7D44233D-3055-4B9C-BA64-0D47CA40A232}
    Microsoft-Windows-WinRT-Error            {A86F8471-C31D-4FBC-A035-665D06047B03}
    Microsoft-Windows-Winsock-NameResolution {55404E71-4DB9-4DEB-A5F5-8F86E46DDE56}
    Network Profile Manager                  {D9131565-E1DD-4C9E-A728-951999C2ADB5}
    Security: SChannel                       {37D2C3CD-C5D4-4587-8531-4696C44244C8}
    Windows Defender Firewall API            {28C9F48F-D244-45A8-842F-DC9FBC9B6E92}
    WMI_Tracing                              {1FF6B227-2CA7-40F9-9A66-980EADAA602E}
    WMI_Tracing_Client_Operations            {8E6B6962-AB54-4335-8229-3255B919DD0E}
    {05F95EFE-7F75-49C7-A994-60A55CC09571}   {05F95EFE-7F75-49C7-A994-60A55CC09571}
    {072665FB-8953-5A85-931D-D06AEAB3D109}   {072665FB-8953-5A85-931D-D06AEAB3D109}
    {7AF898D7-7E0E-518D-5F96-B1E79239484C}   {7AF898D7-7E0E-518D-5F96-B1E79239484C}
    ... output truncated ...
带有GUID的是缺少manifest的提供者。它们通常与[WPP](https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/wpp-software-tracing)或[TraceLogging](https://docs.microsoft.com/en-us/windows/desktop/tracelogging/trace-logging-portal)有关，这些都超出了本文的范围。可以检索这些提供者类型的名称和事件元数据。例如，下面是解析后一些上面未命名提供者的名称：
  * 05F95EFE-7F75–49C7-A994–60A55CC09571 Microsoft.Windows.Kernel.KernelBase
  * 072665FB-8953–5A85–931D-D06AEAB3D109 Microsoft.Windows.ProcessLifetimeManage
  * 7AF898D7–7E0E-518D-5F96-B1E79239484C Microsoft.Windows.Defender
## 事件提供者的内部
查看内置Windows二进制文件中的ETW相关代码，可以帮助你了解ETW事件是如何构造的，以及它们是如何在事件日志中显示的。下面是两个示例，`System.Management.Automation.dll`(PowerShell程序集核心)和`amsi.dll`。
###  System.Management.Automation.dll事件跟踪
PowerShell v.5最大的安全特性之一是[scriptblock
autologging](https://blogs.msdn.microsoft.com/powershell/2015/06/09/powershell-the-blue-team/)；启用后，如果脚本包含任何可疑代码，则在`Microsoft-Windows-PowerShell/Operational`事件日志中自动记录脚本内容和事件ID 4104(警告级别)。执行以下C#代码以生成事件日志：
    if (scriptBlock._scriptBlockData.HasSuspiciousContent)
    {
      PSEtwLog.LogOperationalWarning(PSEventId.ScriptBlock_Compile_Detail, PSOpcode.Create, PSTask.ExecuteCommand, PSKeyword.UseAlwaysAnalytic, new object[]
      {
        segment + 1,
        segments,
        textToLog,
        scriptBlock.Id.ToString(),
        scriptBlock.File ?? string.Empty
      });
    }
LogOperationalWarning方法实现如下：
    internal static void LogOperationalInformation(PSEventId id, PSOpcode opcode, PSTask task, PSKeyword keyword, params object[] args)
    {
      PSEtwLog.provider.WriteEvent(id, PSChannel.Operational, opcode, PSLevel.Informational, task, keyword, args);
    }