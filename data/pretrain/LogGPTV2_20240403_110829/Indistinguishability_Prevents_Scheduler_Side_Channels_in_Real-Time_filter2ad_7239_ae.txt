real applications to demonstrate its usability and understand its
security and performance impact in a real-world setting. A design
space exploration using simulated tasks is presented in Section 8.
7.1 Autonomous Rover System
7.1.1 Experiment Setup. We first conducted a set of experiments
on a 1/24 scale rover running an autopilot application, RoverBot9,
on the RPi4 platform introduced in Section 6. The autopilot appli-
cation consists of 7 tasks (i.e., Actuator, RCInput, BatteryMonitor,
AHRS, Localizer, Navigator and GroundControl). Each task runs as
a process in Linux and can be configured as a real-time or non-real-
time task. The system is equipped with an Intel RealSense T265
tracking camera10 that enables precise indoor localization as well
as indoor navigation. With such features, we let the rover steer
through a series of predefined way points that form a closed loop
and record the resulting trajectory under both (a) Vanilla EDF and
(b) 𝜖-Scheduler, both with 𝜖 = 10 and 𝜖 = 103. An additional test
that uses a different set of predefined way points and associated
results are presented in Appendix C.1 for reference. In each test,
we let the rover run three rounds following the ways points. To
analyze the performance of the system, we focus on adding noise to
the Actuator task that receives control commands and sends PWM
9https://github.com/bo-rc/Rover
10https://www.intelrealsense.com/tracking-camera-t265
updates for driving, steering and throttle (at 100𝐻𝑧), while keeping
other tasks as non-real-time tasks.
7.1.2 Results. The experiment results are shown in Figure 5. In
all test cases, the rover always starts at the coordinate (0, 0). As
the results suggest, 𝜖 = 10 demonstrated a larger deviation in
the trajectory compared to 𝜖 = 103. The mean task frequency is
65.06𝐻𝑧 with 𝜖 = 103 and 10.22𝐻𝑧 with 𝜖 = 10. On the other hand,
the trajectories show that the rover is still able to hit the target way
points in both 𝜖 = 103 and 𝜖 = 10 cases. In particular, the trajectory
of 𝜖 = 103 matches that of Vanilla EDF with small deviations. This
shows that the 𝜖-Scheduler can be applied to real applications and
also meet users’ needs (e.g., better protection or better performance)
using the adjustable 𝜖 parameter.
Table 1 shows the values obtained from the kolmogorov-smirnov
(K-S) tests [45] (detailed in Appendix C.2) and the average mini-
mum distance between the paths followed by the rover with the
respective schedulers. The very small K-S statistic values and very
large corresponding 𝑝-values confirm that the rover paths with
both 𝜖-Schedulers (𝜖 = 103 and 𝜖 = 10), closely follow the original
way points as Vanilla EDF and that the former two paths closely
resemble each other. The last column in the table shows the aver-
age minimum distance between a point in the observed path (with
𝜖-Scheduler 𝜖 = 103 or 𝜖 = 10) and a point in the reference path
(Vanilla EDF). Firstly, for each point in the observed path, we find
a point in the reference path that corresponds to the minimum
distance. Then, we simply take the average of all such minimum
distances. The very small values of average minimum distances
show that the observed paths closely follow the reference path.
Hence, we can conclude from our evaluation above that although
running the rover with our 𝜖-Scheduler (𝜖 = 103 or 𝜖 = 10) causes
small deviations from the expected trajectory, the deviations them-
selves are negligible, making the performance drop relatively in-
significant. However, the security improves greatly due to the ran-
domization introduced by our 𝜖-Scheduler.
7.2 Video Streaming over the Internet
7.2.1 Experiment Setup. We conducted another set of experiments
to test the effectiveness of our 𝜖-Scheduler on RTS. We built a video
streaming application using Dynamic Adaptive Streaming over
HTTP (DASH) as the video streaming standard and flask [24] for
our web application. Our goal was to show that the 𝜖-Scheduler
is useful in negating traffic-based attacks (types of data leakage
attacks as presented by Gu et al. [25]11) on such video streaming
applications without significantly affecting the performance of the
application itself. The video stream is hosted by a server and the
client is the receiver of the video stream that is transmitted via
the application over the internet over a distance of 1800 miles. Our
attacker is placed in between the server and the client, so that
11We created the attack from scratch as the authors denied us access to the source
code.
−1.0−0.50.00.51.01.52.0∆X(meters)0.00.51.01.52.02.53.0∆Y(meters)VanillaEDF−Sched(103)−1.0−0.50.00.51.01.52.0∆X(meters)0.00.51.01.52.02.53.0∆Y(meters)VanillaEDF−Sched(10)Session 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea674(a) Vanilla EDF
(b) 𝜖-Scheduler (𝜖 = 103)
(c) 𝜖-Scheduler (𝜖 = 10)
Figure 6: The similarity distance measures for 15 traffic samples with the server running on RPi4. We shaded the region
between the maximum and the minimum distances. The mean distances are shown in gray dotted lines as references. Clearly,
the similarity distances between the traffic patterns and video 1’s fingerprints are rarely the minimum across the 15 tests with
𝜖-Scheduler (2 out of 15 with 𝜖 = 103 and 0 out of 15 with 𝜖 = 10), while they are the minimum with Vanilla EDF in 13 out
of 15 tests. This shows that the random noise added to the traffic patterns under 𝜖-Scheduler reduces the effectiveness of the
traffic-based video identification attack.
Table 2: FPS Observed by The Client (Video 1)
CV
0.02
0.07
0.22
Max Mean
29.90
32.00
28.00
25.87
9.23
14.00
𝜖-Scheduler (𝜖 = 103)
𝜖-Scheduler (𝜖 = 10)
Scheduler
Vanilla EDF
Min
28.00
22.00
6.00
Std
0.68
1.71
2.07
eavesdropping on the network traffic can be easily carried out.
The performance of the application is measured using the frames
per second (FPS) of the video. Ideally, the FPS of the video at the
client’s end is similar to the FPS of the video sent from the server.
It is important to note that the 𝜖-Scheduler only randomizes the
arrival time of video frames to the client and does not change the
content of the video. An attack can be devised on such applications
by exploiting some key properties of DASH video streaming. The
details of how the attack works are presented in Appendix D.
In this experiment, we set 𝜖-Scheduler with Δ𝜂 = 190𝑚𝑠, 𝐽 = 16
with the desired protection duration to be 𝜆 = 500𝑚𝑠12 for the video
streaming task running at 30𝐻𝑧. Our evaluation verifies whether
the video identification attack in the case of the 𝜖-Scheduler shows
results that are random at best. In our setup, we use five videos with
varying content, frame rates and resolutions13 (see Appendix D).
We consider a total of five streaming scenarios, each scenario being
the event when only one of the five videos is being streamed via
our application, i.e., only video 𝑥 is being streamed, where 𝑥 ∈
{1, 2, ..., 5}. Eavesdropping is done for 30 seconds with 2 seconds
as the segment length and the corresponding traffic patterns are
captured using Wireshark. For repeatability, this is done fifteen
times for each scheduler (Vanilla EDF, 𝜖-Scheduler with 𝜖 = 10 and
𝜖 = 103), resulting in 45 traffic pattern samples for each scenario.
7.2.2 Experiment Results. For identification purposes, we calculate
the distance metric 𝑑𝑖𝑠𝑡, which is representative of the similarity
between a given traffic pattern and a video fingerprint. Hence,
given a traffic pattern and a dataset containing 𝑛 videos, there are
𝑛 distances generated (𝑛 = 5 in our case). The smaller the value
of 𝑑𝑖𝑠𝑡, the greater the probability for the traffic pattern matching
12It is shown that the security tasks are typically assigned periods in the range
[250𝑚𝑠, 500𝑚𝑠] [27]. In our evaluation, we take 500𝑚𝑠 (i.e., the worst protection) to
estimate protection duration 𝐽 .
13The video resolutions used in our experiments are constrained by (i) the hardware
used (i.e., a single processor in RPi4 in our setup), (ii) the implementation of the
streaming application and (iii) the target streaming frame rate. It is not a limitation
of the proposed scheduling scheme and the 𝜖-Scheduler can work with any video
resolution as long as computation power is available and the workloads are feasible
for the underlying hardware platform.
the video fingerprint, which is equivalent to the probability of the
corresponding video being streamed during the eavesdropping. In
order to compensate for our relatively short eavesdropping time,
instead of setting thresholds on distances to identify the target
video as done by Gu et al. [25], we simply identify the target video
as being the one that had the minimum distance out of the five
calculated distances. Figure 6 shows the similarity distances for the
traffic samples collected when video 1 was being streamed. The
results obtained when the other videos (2,3,4 and 5) were being
streamed, closely match that of video 1.
Table 2 shows the FPS statistics observed at the client’s end over
a duration of 30 seconds for video 1 in which an FPS data point is
computed using the number of frame packets received from the
Internet per 0.5 seconds. The FPS of video 1 sent from the server
is 30. The CV (Coefficient of Variation) value represents relative
variability of the FPS in each scheduler configuration. It reveals
that FPS in the case of Vanilla EDF has the smallest variability as
there is no randomization while it shows the largest variability in
the case of 𝜖-Scheduler with 𝜖 = 10. In the case of 𝜖-Scheduler with
𝜖 = 103, it has a reasonably small CV value and slightly decreased
mean FPS with a good protection against the eavesdropping attack
that’s comparable to 𝜖 = 10 (see Figure 6). As a result, it shows
that a balance between performance (i.e., FPS) and security can be
reached by using 𝜖-Scheduler with 𝜖 = 103 in this experiment.
8 DESIGN SPACE EXPLORATION
Besides the evaluation with real applications, we also conduct an
evaluation with using simulations as well as a real hardware plat-
form (i.e., RPi4). The simulation enables us to explore a larger design
space while the hardware platform enables us to understand the
true scheduling overheads in a realistic environment.
8.1 Experiment Setup
Simulation. A set of simulated tasks with timing parame-
8.1.1
ters of avionics system [49] (total task utilization 0.64) is used to
examine the outcome of the 𝜖-Scheduler in the first part of our
evaluation. The tasks’ parameters are shown in Table 6 in Appen-
dix. The 𝜖-Scheduler is also tested extensively using simulation
tasks generated from a mechanism is commonly used in litera-
ture [7, 14, 27, 61]. The details for the generation of the 6000 tested
task sets are provided in Appendix E.
12345678910111213141515 tests for video 1 [vanilla, t=30s]0.0100.0150.0200.0250.0300.0350.0400.045distancetruth (vid1)inferredmean distance12345678910111213141515 tests for video 1 [eps=1000, t=30s]0.0100.0150.0200.0250.0300.0350.0400.045distancevid5vid3vid3vid5vid2vid1vid4vid4vid2vid3vid5vid1vid2vid3vid4truth (vid1)inferredmean distance12345678910111213141515 tests for video 1 [eps=10, t=30s]0.0100.0150.0200.0250.0300.0350.0400.045distancevid5vid2vid2vid4vid3vid2vid4vid5vid2vid3vid4vid5vid3vid4vid5truth (vid1)inferredmean distanceSession 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea675(a) Vanilla EDF
(b) TaskShuffler EDF
(c) 𝜖-Scheduler (𝜖 = 103)
(d) 𝜖-Scheduler (𝜖 = 10)
Figure 7: Results of the DFT analysis for the avionics tasks
(Table 6 in Appendix). The blue lines are the normalized
amplitudes for the corresponding frequency bins and the
green lines are the Z-scored based moving peak threshold
for detecting outstanding peaks. The results suggest that 𝜖-
Scheduler creates a wide range of noise in the frequency
spectrum and is effective in obscuring the periodic elements
enclosed in the original schedule.
To explore the best-case protection as well as the impact on the
system performance, we configure the extended task parameters to
achieve the task-level indistinguishability. The efficacy of job-level
indistinguishability is specifically examined against the ScheduLeak
attack [14] (results presented in Section 8.2.3). To achieve the task-
level indistinguishability, Δ𝜂 is assigned to 200𝑚𝑠 − 10𝑚𝑠 = 190𝑚𝑠.
𝐽𝑖 for each task is calculated using Equation 8 with a protection
duration of 500𝑚𝑠 (demonstrated to be practical to perform periodic
security checks RTS [27]). We consider two 𝜖 settings 10 and 103
that represent values that one may reasonably choose based on the
noise range shown in Figure 4. In our experiments, we use a fixed
simulation duration (5000𝑚𝑠) so that we are able to compare the
experiment results across different task sets.
We also include the vanilla EDF scheduler and a state-of-the-art
randomization-based scheduler for comparison. The randomization-
based scheduler, labeled as “TaskShuffler EDF”, is an EDF-based
scheduler that ports the TaskShuffler’s randomization protocol.
8.1.2 Measuring Scheduling Overheads. To evaluate the scheduling
overheads, we conduct experiments on the RPi4 platform running
RT Linux. We use the built-in SCHED_DEADLINE scheduler as the
Vanilla EDF scheduler and an implementation of TaskShuffler EDF
for comparison. The timing overheads for a function is measured
using the trace-cmd command. For evaluating power consump-
tion, we use a High Voltage (HV) Power Monitor manufactured
by Monsoon14 that supplies a 5.2𝑉 power to the RPi4 board. The
power consumption is then monitored in the monitor’s software,
PowerTool version 5.0.0.25.
8.2 Experiment Results
8.2.1 Discrete Fourier Transform Analysis. First we try to under-
stand the (deterministic) periodicity in the schedules produced by:
(a) Vanilla EDF scheduler, (b) TaskShuffler EDF scheduler and (c)
our 𝜖-Scheduler (with 𝜖 = 103 and 𝜖 = 10). Since we are concerned
about the periodic components in the task schedules, frequency
spectrum analysis tools such as DFT [42] can be useful (the details
of measurement for DFT are provided in Appendix F).
We conduct the DFT analysis on the schedules based on the