memory if they are chosen too big. However, the nInBufferSize and
nOutBufferSize parameters are not ‘blindly’ accepted by the system. The upper
limit is dened by a system depended constant; I couldn’t nd super accurate
information about this constant (and didn’t dig through the headers); This
post indicates that it’s ~4GB for an x64 Windows7 system. 
>> Small buffers: A buffer size of 0 is absolutely valid for nInBufferSize and
nOutBufferSize. If the system would strictly enforce what it’s been told you
wouldn’t be able to write anything to your pipe, cause a buffer of size 0 is …
well, a not existing buffer. Gladly the system is smart enough to understand
that you’re asking for a minimum buffer and will therefore expand the actual
buffer allocated to the size it receives, but that comes with a consequence to
performance. A buffer size of 0 means every byte must be read by the process
on the other side of the pipe (and thereby clearing the buffer) before new data
can be written to the buffer. This is true for both, the nInBufferSize and
nOutBufferSize. A buffer of size 0 could thereby cause server delays.
Once again we can make this chapter about how to set and control the security of a
named pipe rather short, but it’s important to be aware how this is done.
The only gear you can turn when you want to secure your named pipe setup is
setting a Security Descriptor for the named pipe server as the last parameter
(lpSecurityAttributes) to the CreateNamedPipe call. 
If you want some background on what a Security Descriptor is, how it’s used and
how it could look like you’ll nd the answers in my post A Windows Authorization
Guide.
Named Pipe Security
Setting this Security Descriptor is optional; A default Security Descriptor can be be
set by specifying NULL to the lpSecurityAttributes parameter. 
The Windows docs dene what the default Security Descriptor does for your named
pipe server:
The ACLs in the default security descriptor for a named pipe grant
full control to the LocalSystem account, administrators, and the
creator owner. They also grant read access to members of the
Everyone group and the anonymous account. 
Source: CreateNamedPipe > Paremter > lpSecurityAttributes
So by default Everyone can read from your named pipe server if you don’t specify a
Security Descriptor, regardless if the reading client is on the same machine or not. 
If you connect to a named pipe server without a Security Descriptor set but still get
an Access Denied Error (error code: 5) be sure you’ve only specied READ access
(note that the example above species READ and WRITE access with GENERIC_READ
| GENERIC_WRITE ).
For remote connections, note once again - as described at the end of the Named
Pipe Messaging chapter - that the network authentication protocol is negotiated
between the client and server through the SMB protocol. There is no way to
programmatically enforce the use of the stronger Kerberos protocol (you only could
disable NTLM on the server host).
Impersonation is a simple concept that we’ll need in the following section to talk
about attack vectors with named pipes. 
If you’re familiar with Impersonation feel free to skip this section; Impersonation is
not specic to Named Pipes.
If you’re not yet came across Impersonation in a Windows environment, let me
summarize this concept quickly for you:
Impersonation is the ability of a thread to execute in a security context different
from the security context of the process that owns the thread. Impersonation
typically applies in a Client-Server architecture where a client connects to the server
and the server could (if needed) impersonate the client. Impersonation enables the
server (thread) to perform actions on behalf of the client, but within the limits of
the client’s access rights. 
A typical scenario would be a server that wants the access some records (say in
database), but only the client is allowed to access its own records. The server could
now reply back to the client, asking to fetch the records itself and send these over
to the server, or the server could use an authorization protocol to prove the client
allowed the server to access the record, or - and this is what Impersonation is - the
client sends the server some identication information and allows the server to
switch into the role of the client. Somewhat like the client giving its driver license
Impersonation
to the server along with the permission to use that license to identify towards other
parties, such as a gatekeeper (or more technically a database server).
The identication information, such as the information specifying who the client is
(such as the SID) are packed in a structure called a security context. This structure is
baked deeply into the internals of the operating system and is a required piece of
information for inter process communication. Due to that the client can’t make an
IPC call without a security context, but it needs a way to specify what it allows the
server to know about and do with its identity. To control that Microsoft created so
called Impersonation Levels. 
The SECURITY_IMPERSONATION_LEVEL enumeration structure denes four
Impersonation Levels that determine the operations a server can perform in the
client’s context.
SECURITY_IMPERSONATION_LEVEL
Description
SecurityAnonymous
The server cannot impersonate or identify
the client.
SecurityIdentication
The server can get the identity and
privileges of the client, but cannot
impersonate the client.
SecurityImpersonation
The server can impersonate the client’s
security context on the local system.
SecurityDelegation
The server can impersonate the client’s
security context on remote systems.
For more background information on Impersonation have a read through Microsoft’s
docs for Client Impersonation. 
For some context around Impersonation have a look at the Access Tokens and the
following Impersonation section in my post about Windows Authorization.
Okay, so while we’re on the topic and in case you’re not totally bored yet. Let’s have
a quick run down of what actually happens under the hood if a server impersonated
a client. 
If you’re more interested in how to implement this, you’ll nd the answer in my
sample implementation here.
>> Step 1: The server waits for an incoming connection from a client and
afterwards calls the ImpersonateNamedPipeClient function.
>> Step 2: This call results in a call to NtCreateEvent (to create a callback event)
and to NtFsControlFile, which is the function executing the impersonation.
>> Step 3: NtFsControlFile is a general purpose function where its action is
specied by an argument, which in this case is FSCTL_PIPE_Impersonate.
Impersonating a Named Pipe Client
The below is based on the open source code of ReactOS, but i think it’s fair to
assume the Windows Kernel Team implemented it in a similar way.
>> Step 4: Further down the call stack NpCommonFileSystemControl is called
where FSCTL_PIPE_IMPERSONATE is passed as an argument and used in a
switch-case instruction to determine what to do.
>> Step 5: NpCommonFileSystemControl calls NbAcquireExeclusiveVcb to lock
an object and NpImpersonate is called given the server’s pipe object and the
IRP (I/O Request Object) issued by the client.
>> Step 6: NpImpersonate then in turn calls SeImpersonateClientEx with the
client’s security context, which has been obtained from the client’s IRP, as a
parameter.
>> Step 7: SeImpersonateClientEx in turn calls PsImpersonateClient with the
server’s thread object and the client’s security token, which is extracted from
the client’s security context
>> Step 8: The server’s thread context is then changed to the client’s security
context.
>> Step 9: Any action the server takes and any function the server calls while in
the security context of the client are made with the identify of the client and
thereby impersonating the client.
>> Step 10: If the server is done with what it intended to do while being the
client, the server calls RevertToSelf to switch back to its own, original thread
context.
Sooo nally we’re talking about attack surface. The most important attack vector
based on named pipes is Impersonation. 
Luckily we’ve introduced and understood the concept of Impersonation already in
the above section, so we can dive right in.
Impersonation with named pipes can best be abused when you got a service,
program or routine that allows you to specify or control to access a le (doesn’t
matter if it allows you READ or WRITE access or both). Due to the fact that Named
Pipes are basically FILE_OBJECTs and operate on the same access functions as
regular les (ReadFile, WriteFile, CreateFile, …) you can specify a named pipe
instead of a regular le name and make your victim process connect to a named
pipe under your control.
There are two important aspects you need to check when attempting to
impersonate a client. 
The rst is to check how the client implements the le access, more specically
does the client specify the SECURITY_SQOS_PRESENT ag when calling CreateFile ?
Attack Surface
Client Impersonation
Attack scenario
Prerequisites
A vulnerable call to CreateFile looks like this:
hFile = CreateFile(pipeName, GENERIC_READ, 0, NULL, OPEN_EXISTING, 0, 
NULL); 
Whereas a safe call to CreateFile like this:
// calling with explicit SECURITY_IMPERSONATION_LEVEL 
hFile = CreateFile(pipeName, GENERIC_READ, 0, NULL, OPEN_EXISTING, SEC
URITY_SQOS_PRESENT | SECURITY_IDENTIFICATION , NULL); 
// calling without explicit SECURITY_IMPERSONATION_LEVEL 
hFile = CreateFile(pipeName, GENERIC_READ, 0, NULL, OPEN_EXISTING, SEC
URITY_SQOS_PRESENT, NULL); 
By default a call without explicitly specifying the
SECURITY_IMPERSONATION_LEVEL (as with the later example above) is made with
the Impersonation Level of SecurityAnonymous.
If the SECURITY_SQOS_PRESENT ag is set without any additional
Impersonation Level (IL) or with an IL set to
SECURITY_IDENTIFICATION or SECURITY_ANONYMOUS you cannot
impersonate the client. 
The second important aspect to check is the le name, aka. the lpFileName
parameter, given to CreateFile. There is an important distinction between calling
local named pipes or calling remote named pipes.
A call to a local named pipe is dened by the le location \\.\pipe\ . 
Calls to local pipes can only be impersonated when the SECURITY_SQOS_PRESENT
ag is explicitly set with an Impersonation Level above SECURITY_IDENTIFICATION.
Therefore a vulnerable call looks like this:
hFile = CreateFile(L"\\.\pipe\fpipe", GENERIC_READ, 0, NULL, OPEN_EXIS
TING, SECURITY_SQOS_PRESENT | SECURITY_IMPERSONATION, NULL); 
To be clear. A safe call to a local pipe would look like this:
hFile = CreateFile(L"\\.\pipe\fpipe", GENERIC_READ, 0, NULL, OPEN_EXIS
TING, 0, NULL); 
This later call is safe even without the SECURITY_SQOS_PRESENT, because a local
pipe is called.
A remote named pipe on the other hand is dened by a lpFileName beginning with a
hostname or an IP, such as: \\ServerA.domain.local\pipe\ . 
Now comes the important bit:
When the SECURITY_SQOS_PRESENT ag is not present and a
remote named pipe is called the impersonation level is dened by
the user privileges running the name pipe server.
That means that when you call a remote named pipe without the
SECURITY_SQOS_PRESENT ag, your attacker user that runs the pipe must hold the
SeImpersonatePrivilege (SE_IMPERSONATE_NAME) in order to impersonate the
client. 
If your user does not hold this privilege the Impersonation Level will be set to
SecurityIdentication (which allows you to identify, but not impersonate the user). 
But that also means that if your user holds the SeEnableDelegationPrivilege
(SE_ENABLE_DELEGATION_NAME), the Impersonation Level is set to
SecurityDelegation and you can even authenticate the victim user against other
network services.
An important take away here is:
You can make a remote pipe call to a named pipe running on the
same machine by specifying \\127.0.0.1\pipe\
To nally bring the pieces together:
>> If the SECURITY_SQOS_PRESENT is not set you can impersonate a client if
you have a user with at least SE_IMPERSONATE_NAME privileges, but for
named pipes running on the same machine you need to call them via
\\127.0.0.1\pipe\...
>> If the SECURITY_SQOS_PRESENT is set you can only impersonate a client if
an Impersonation Level above SECURITY_IDENTIFICATION is set along with it
(regardless if you call a named pipe locally or remote).
Microsoft’s documentation about Impersonation Levels (Authorization) states the
following:
When the named pipe, RPC, or DDE connection is remote, the ags
passed to CreateFile to set the impersonation level are ignored. In
this case, the impersonation level of the client is determined by the
impersonation levels enabled by the server, which is set by a ag on
the server’s account in the directory service. For example, if the
server is enabled for delegation, the client’s impersonation level will
also be set to delegation even if the ags passed to CreateFile
specify the identication impersonation level. 
Source: Windows Docs: Impersonation Levels (Authorization)
Be aware here that this is technically true, but it’s somewhat misleading… 
The accurate version is: When calling a remote named pipe and you only specify
Impersonation Level ags (and nothing else) to CreateFile then these will be ignore,
Misleading Documentation
but if you specify Impersonation Flags alongside with the
SECURITY_SQOS_PRESENT ag, then these will be respected.
Examples:
// In the below call the SECURITY_IDENTIFICATION flag will be respecte
d by the remote server 
hFile = CreateFile(L"\\ServerA.domain.local", GENERIC_READ, 0, NULL, O
PEN_EXISTING, SECURITY_SQOS_PRESENT | SECURITY_IDENTIFICATION, NULL); 
/* --> The server will obtain a SECURITY_IDENTIFICATION token */ 
// In this call the SECURITY_IDENTIFICATION flag will be ignored 
hFile = CreateFile(L"\\ServerA.domain.local", GENERIC_READ, 0, NULL, O
PEN_EXISTING, SECURITY_IDENTIFICATION, NULL); 