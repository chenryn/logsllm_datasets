It is very common for application developers to test their components with
their templates. Internally we call these tests "component tests" (as opposed
to unit- or integration-tests). These tests are not unit tests as they
exercise more than just the component class. Nor are they integration tests as
far as the application is concerned; that term is reserved for testing cross-
component interactions, full application tests, and tests that involve the
back-end.
Here are the requirements:
  * instantiate a component in a test along with its template and child components
  * replace child components with mocks
  * pass bound values to the component
  * trigger change detection
  * fake the event loop, a la FakeAsync
  * verify that component implement change detection correctly (e.g. via observables, immutables)
  * access underlying DOM to trigger user events, such as click on buttons (this is usually done with the assistance of the Page Objects framework)
Strawman:
    // This annotation tells Angular about test-specific dependency overrides
    @ComponentTest(
      component: MyComponent,
      dependencyOverrides: const {
        ChildComponent: MockChildComponent,
        RealGoogleMap: MockGoogleMap,
      }
    )
    main() {
      describe("my-component", () {
        TestBed testBed;
        beforeEach(() {
          testBed = createTestBedFor(MyComponent);
        });
        it("should work as intended", fakeAsync(async) {
          // instantiates a new component
          MyComponent cmp = testBed.component();
          // pass bindings using normal setters
          cmp.field1 = "hello";
          cmp.field2 = "world";
          // detectChanges runs change detection and returns how many
          // components ended up reevaluated, allowing testing correctness
          // of change detection
          expect(testBed.detectChanges().length, 5);
          // emulate passage of time
          async.flushMicrotasks();
          async.elapse(seconds: 1);
          // get access to the DOM
          Element rootElem = testBed.element();
          rootElem.querySelector('some-button').click();
          expect(cmp.buttonClicked, true);
        });
      });
    }