```  
if (log.isDebugEnabled()){  
  log.debug("111");  
}  
if (log.isInfoEnabled()){  
  log.info("222");  
}  
if (log.isWarnEnabled()){  
  log.warn("333");  
}  
if (log.isErrorEnabled()){  
  log.error("444");  
}  
if (log.isFatalEnabled()){  
  log.fatal("555");  
}  
```  
## 例子  
```  
package TestLog4j;  
import org.apache.log4j.Logger;  
import org.apache.log4j.PropertyConfigurator;  
import org.apache.log4j.Priority;  
import TestLog4j.TestLog4j2.TestLog4j2;  
public class TestLog4j  
{  
  static Logger logger = Logger.getLogger(TestLog4j.class.getName()); //（2）  
  public TestLog4j(){}  
  public static void main(String[] args)  
  {  
      //同时输出到控制台和一个文件的实例并实现了Logger的继承  
      PropertyConfigurator.configure("F:\\nepalon\\log4j2.properties");  
      logger.debug("Start of the main() in TestLog4j");  
      logger.info("Just testing a log message with priority set to INFO");  
      logger.warn("Just testing a log message with priority set to WARN");  
      logger.error("Just testing a log message with priority set to ERROR");  
      logger.fatal("Just testing a log message with priority set to FATAL");  
      logger.log(Priority.WARN, "Testing a log message use a alternate form");  
      logger.debug(TestLog4j.class.getName());  
      TestLog4j2 testLog4j2 = new TestLog4j2(); //（1）  
      testLog4j2.testLog();  
  }  
}  
```  
在类TestLog4j中我们调用了另一个类TestLog4j2，下面看一下类TestLog4j2的代码。  
例4-b：  
```  
package TestLog4j.TestLog4j2;  
import org.apache.log4j.Logger;  
import org.apache.log4j.PropertyConfigurator;  
import org.apache.log4j.Priority;  
public class TestLog4j2  
{  
  static Logger logger = Logger.getLogger(TestLog4j2.class.getName()); //（1）  
  public TestLog4j2(){}  
  public void testLog()  
  {  
  //同时输出到控制台和一个文件的实例  
    PropertyConfigurator.configure("F:\\nepalon\\log4j2.properties");  
    logger.debug("2Start of the main()");  
    logger.info("2Just testing a log message with priority set to INFO");  
    logger.warn("2Just testing a log message with priority set to WARN");  
    logger.error("2Just testing a log message with priority set to ERROR");  
    logger.fatal("2Just testing a log message with priority set to FATAL");  
    logger.log(Priority.DEBUG, "Testing a log message use a alternate form");  
    logger.debug("2End of the main()");  
  }  
}  
```  
## 另一篇  
log4j.properties 使用  
### 一. 参数意义说明  
输出级别的种类  
```  
ERROR、WARN、INFO、DEBUG  
ERROR 为严重错误 主要是程序的错误  
WARN 为一般警告，比如session丢失  
INFO 为一般要显示的信息，比如登录登出  
DEBUG 为程序的调试信息  
```  
### 配置日志信息输出目的地  
```  
log4j.appender.appenderName = fully.qualified.name.of.appender.class  
1. org.apache.log4j.ConsoleAppender（控制台）  
2. org.apache.log4j.FileAppender（文件）  
3. org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）  
4. org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）  
5. org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）  
```  
### 配置日志信息的格式  
```  
log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class  
1. org.apache.log4j.HTMLLayout（以HTML表格形式布局），  
2. org.apache.log4j.PatternLayout（可以灵活地指定布局模式），  
3. org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），  
4. org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）  
```  
### 目的地 org.apache.log4j.ConsoleAppender 选项  
Threshold=DEBUG  : 指定日志消息的输出最低层次。  
ImmediateFlush=true  : 默认值是true,意谓着所有的消息都会被立即输出。  
Target=System.err  : 默认情况下是：System.out,指定输出控制台  
### 目的地 org.apache.log4j.FileAppender 选项  
Threshold=DEBUG  :指定日志消息的输出最低层次。  
ImmediateFlush=true  :默认值是true,意谓着所有的消息都会被立即输出。  
File=mylog.txt  :指定消息输出到mylog.txt文件。  
Append=false  :默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。  
### 目的地 org.apache.log4j.RollingFileAppender 选项  
Threshold=DEBUG  :指定日志消息的输出最低层次。  
ImmediateFlush=true  :默认值是true,意谓着所有的消息都会被立即输出。  
File=mylog.txt  :指定消息输出到mylog.txt文件。  
Append=false  :默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。  
MaxFileSize=100KB  :后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。  
MaxBackupIndex=2  :指定可以产生的滚动文件的最大数。  
### 日志格式  
例如  
```  
log4j.appender.A1.layout.ConversionPattern=%-4r %-5p %d{yyyy-MM-dd HH:mm:ssS} %c %m %n  
```  
日志信息格式中几个符号所代表的含义：  
```  
 -X号: X信息输出时左对齐；  
 %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,  
 %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921  
 %r: 输出自应用启动到输出该log信息耗费的毫秒数  
 %c: 输出日志信息所属的类目，通常就是所在类的全名  
 %t: 输出产生该日志事件的线程名  
 %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main (TestLog4.java:10)  
 %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。  
 %%: 输出一个"%"字符  
 %F: 输出日志消息产生时所在的文件名称  
 %L: 输出代码中的行号  
 %m: 输出代码中指定的消息,产生的日志具体信息  
 %n: 输出一个回车换行符，Windows平台为"\r\n"，Unix平台为"\n"输出日志信息换行  
```  
可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：  
```  
 1) %20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。  
 2) %-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。  
 3) %.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。  
 4) %20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边较远输出的字符截掉。  
```  
### 二. 文件配置  
#### Sample1  
```  
log4j.rootLogger=DEBUG,A1,R  
#log4j.rootLogger=INFO,A1,R  
# ConsoleAppender 输出  
log4j.appender.A1=org.apache.log4j.ConsoleAppender  
log4j.appender.A1.layout=org.apache.log4j.PatternLayout  
log4j.appender.A1.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss,SSS} [%c]-[%p] %m%n  
# File 输出 一天一个文件,输出路径可以定制,一般在根路径下  
log4j.appender.R=org.apache.log4j.DailyRollingFileAppender  
log4j.appender.R.File=blog_log.txt  
log4j.appender.R.MaxFileSize=500KB  
log4j.appender.R.MaxBackupIndex=10  
log4j.appender.R.layout=org.apache.log4j.PatternLayout  
log4j.appender.R.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} [%t] [%c] [%p] - %m%n  
```  
#### Sample2  
下面给出的Log4J配置文件实现了输出到控制台，文件，回滚文件，发送日志邮件，输出到数据库日志表，自定义标签等全套功能。  
```  
log4j.rootLogger=DEBUG,CONSOLE,A1,im   
#DEBUG,CONSOLE,FILE,ROLLING_FILE,MAIL,DATABASE  
log4j.addivity.org.apache=true  
###################   
# Console Appender   
###################   
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender   
log4j.appender.Threshold=DEBUG   
log4j.appender.CONSOLE.Target=System.out   
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout   
log4j.appender.CONSOLE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n   
#log4j.appender.CONSOLE.layout.ConversionPattern=[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[THREAD] n%c[CATEGORY]%n%m[MESSAGE]%n%n  
#####################   
# File Appender   
#####################   
log4j.appender.FILE=org.apache.log4j.FileAppender   
log4j.appender.FILE.File=file.log   
log4j.appender.FILE.Append=false   
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout   
log4j.appender.FILE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n   
# Use this layout for LogFactor 5 analysis  
########################   
# Rolling File   
########################   
log4j.appender.ROLLING_FILE=org.apache.log4j.RollingFileAppender   
log4j.appender.ROLLING_FILE.Threshold=ERROR   
log4j.appender.ROLLING_FILE.File=rolling.log   
log4j.appender.ROLLING_FILE.Append=true   
log4j.appender.ROLLING_FILE.MaxFileSize=10KB   
log4j.appender.ROLLING_FILE.MaxBackupIndex=1   
log4j.appender.ROLLING_FILE.layout=org.apache.log4j.PatternLayout   
log4j.appender.ROLLING_FILE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n  
####################   
# Socket Appender   
####################   
log4j.appender.SOCKET=org.apache.log4j.RollingFileAppender   
log4j.appender.SOCKET.RemoteHost=localhost   
log4j.appender.SOCKET.Port=5001   
log4j.appender.SOCKET.LocationInfo=true   
# Set up for Log Facter 5   
log4j.appender.SOCKET.layout=org.apache.log4j.PatternLayout   
log4j.appender.SOCET.layout.ConversionPattern=[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[THREAD]%n%c[CATEGORY]%n%m[MESSAGE]%n%n  
########################   
# Log Factor 5 Appender   
########################   
log4j.appender.LF5_APPENDER=org.apache.log4j.lf5.LF5Appender   
log4j.appender.LF5_APPENDER.MaxNumberOfRecords=2000  
########################   
# SMTP Appender   
#######################   
log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender   
log4j.appender.MAIL.Threshold=FATAL   
log4j.appender.MAIL.BufferSize=10   
log4j.appender.MAIL.From=PI:EMAIL  
log4j.appender.MAIL.SMTPHost=mail.hollycrm.com   
log4j.appender.MAIL.Subject=Log4J Message   
log4j.appender.MAIL.To=PI:EMAIL  
log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout   
log4j.appender.MAIL.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n  
########################   
# JDBC Appender   
#######################   
log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender   
log4j.appender.DATABASE.URL=jdbc:mysql://localhost:3306/test   
log4j.appender.DATABASE.driver=com.mysql.jdbc.Driver   
log4j.appender.DATABASE.user=root   
log4j.appender.DATABASE.password=   
log4j.appender.DATABASE.sql=INSERT INTO LOG4J (Message) VALUES ('[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n')   
log4j.appender.DATABASE.layout=org.apache.log4j.PatternLayout   