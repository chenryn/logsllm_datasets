title:SoK: Security Evaluation of Home-Based IoT Deployments
author:Omar Alrawi and
Chaz Lever and
Manos Antonakakis and
Fabian Monrose
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
SoK: Security Evaluation of Home-Based IoT
Deployments
‚àó
Omar Alrawi
, Chaz Lever
‚Ä†
, Fabian Monrose
‚àó
‚àó
, Manos Antonakakis
Georgia Institute of Technology
‚àó
{alrawi, chazlever, manos}@gatech.edu
University of North Carolina at Chapel Hill
‚Ä†
PI:EMAIL
Abstract‚ÄîHome-based IoT devices have a bleak reputation
regarding their security practices. On the surface, the insecurities
of IoT devices seem to be caused by integration problems that
may be addressed by simple measures, but this work Ô¨Ånds that
to be a naive assumption. The truth is, IoT deployments, at
their core, utilize traditional compute systems, such as embedded,
mobile, and network. These components have many unexplored
challenges such as the effect of over-privileged mobile applica-
tions on embedded devices.
Our work proposes a methodology that researchers and
practitioners could employ to analyze security properties for
home-based IoT devices. We systematize the literature for home-
based IoT using this methodology in order to understand attack
techniques, mitigations, and stakeholders. Further, we evaluate 45
devices to augment the systematized literature in order to identify
neglected research areas. To make this analysis transparent and
easier to adapt by the community, we provide a public portal to
share our evaluation data and invite the community to contribute
their independent Ô¨Åndings.
I. INTRODUCTION
Security problems involving Internet of Things (IoT) con-
tinue to cause severe operational
issues with high-proÔ¨Åle
attacks [1], mass exploitation of devices [2], and eye-catching
headlines about ‚Äúexotic‚Äù device hacking [3]. The demand for
IoT devices ‚Äî especially in the multi-billion-dollar residential
market [4] ‚Äî has created a modern-day gold rush. New
and established companies are rushing to grab a piece of
the IoT market. As time-to-market and production costs take
priority over prudent security practices, the all-too-familiar
sight of compromised IoT devices is numbing. Researchers
and vendors are playing catch-up to address IoT insecurities,
but much of the efforts are indistinct and ad-hoc.
Several working groups and market leaders have proposed
standardizations for IoT devices [5]‚Äì[12], but unfortunately,
they have not agreed on a solution. Additionally, the het-
erogeneity of home-based IoT devices contributes to these
insecurities because although core functionalities are alike,
speciÔ¨Åc features based on the device type can be vastly
different. For example, an IoT vacuum cleaner and a home
assistant device may use an embedded Linux operating system,
but the running services on the device will be different. These
differences make it difÔ¨Åcult to analyze diverse home-based IoT
products.
State-sponsored adversaries are well aware of these predica-
ments, and they have taken advantage to run sophisticated
cyber operations [1]. To make matters worse, some vendors
leave service backdoors in their devices that are later dis-
covered and exploited by botnets [13]. Even unsophisticated
criminal groups are taking advantage of the rampant insecu-
rities to run distributed denial-of-service (DDoS) attacks [2].
Unfortunately, cleanup efforts and vulnerability patching are
far from perfect, and as additional devices come online, the
threats that target them become versatile, which enables them
to spread even further [14]. To systematically address these
security issues, researchers need to understand the landscape
by conducting measurements and in-depth studies to classify
and address the vulnerabilities. There are ample research
efforts for home-based IoT security, but they are scattered. Our
community needs an understanding of the current literature, a
derivation of insights, and an identiÔ¨Åcation of security gaps.
The insights would allow the research community to formalize
what insecurities are perpetuated, what are the proposed mit-
igations, and what responsibilities stakeholders bear. Further,
these in-depth studies and classiÔ¨Åcations of literature can guide
the community to help prioritize their efforts.
In this work, we propose a modeling methodology to study
home-based IoT devices and evaluate their security posture
based on component analysis, namely: the IoT device, the
companion mobile application, the cloud endpoints, and the
associated communication channels. Leveraging our approach,
we systematize the research literature for home-based IoT
devices to understand attack techniques, proposed mitigations,
and stakeholder responsibilities. We use the knowledge to
derive insights and identify research opportunities for our com-
munity. Additionally, we evaluate 45 home-based IoT devices
that are available on the market today and provide an overview
of their security properties across the IoT components.
Based on the systematization and evaluation, we compare
the insights found between both approaches showing the
commonalities and differences. We provide a list of mitiga-
tions for each component and propose strategies for different
stakeholders to address the issues found. Most importantly,
we establish a portal1 where we invite our fellow researchers,
vendors, and power-users to contribute new device evaluations
and to reproduce our results using the published dataset and
proposed methodology.
1The evaluation portal is available online at: https://yourthings.info.
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:48)(cid:78)(cid:66)(cid:83)(cid:1)(cid:34)(cid:77)(cid:83)(cid:66)(cid:88)(cid:74)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:18)(cid:20)
(cid:18)(cid:20)(cid:23)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:49 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1: Typical home-based IoT setup.
Fig. 2: Single IoT deployment.
Fig. 3: IoT graph model.




















c1
d‚àó
0
c0
a0
d2
d1
	






	
II. METHODOLGY
The contribution of our work is two-fold, the systemati-
zation of literature and the evaluation of home-based IoT
devices. The work relies on an abstract model that segments
IoT deployments into components, which we apply to the
research literature and the device evaluations uniformly.
A. Abstraction Model Overview
We propose an abstract model to represent IoT deployments
and their topologies. Figure 1 is an example of an IoT con-
nected home with multiple devices. The approach involves
segmenting each device into its respective topology as shown
in Figure 2. Formally, we deÔ¨Åne an IoT deployment as a set
of vertices V and edges E as illustrated in Figure 3. Overall,
our abstract model has four main components: a set of devices
(D), a set of cloud endpoints (C), a set of mobile applications
(A), and a set of communication channels (E).
where:
A, C, D ‚äÇ V ; D : {di, i ‚àà Z};
C : {cj, j ‚àà Z}; A : {ak, k ‚àà Z};
E : {el, l ‚àà Z}
For each device deployment, we construct a representative
graph and examine the security properties for each component.
B. Security Properties
The security properties have three categories: attack vectors,
mitigations, and stakeholders. Attack vectors are the methods
used to circumvent
the security of the IoT system. The
mitigations deÔ¨Åne which measures should be taken to address
the attack vectors. Lastly, the stakeholders represent the party
responsible for mitigation.
Attack Vector. The device has three attack categories: vulner-
able services, weak authentications, and default conÔ¨Ågurations
that are deÔ¨Åned as follows:
‚Ä¢ Vulnerable services refers to vulnerabilities in running
‚Ä¢ Weak authentications refers to weak or guessable cre-
services.
dentials.
‚Ä¢ Default conÔ¨Ågurations refers to the device operating
with insecure factory settings.
The mobile application has three attack categories, permis-
sions, programming, and data protection that are deÔ¨Åned as
follows:
‚Ä¢ Permissions refers to a mobile application being over-
privileged.
‚Ä¢ Programming refers to the mobile application containing
vulnerable implementations, including improper use of
cryptographic protocols.
‚Ä¢ Data protection refers to the mobile application hard
coding sensitive information.
The communication of the components have two attack cat-
egories, encryption and man-in-the-middle (MITM) that are
deÔ¨Åned as follows:
‚Ä¢ Encryption refers to lack of encryption or support of
weak encryption protocols.
‚Ä¢ MITM refers to the susceptibility to a man-in-the-middle
attack.
The cloud endpoint shares the following attack categories with
devices and communication edges: vulnerable services, weak
authentications, and encryption, as deÔ¨Åned above.
Mitigation. The mitigation categories, patching and frame-
work, span all four components. Patching refers to mitigating
an attack vector by patching the components through vendor
updates or user attentiveness. The framework category miti-
gates fundamental problems that require a new approach.
Stakeholders. The stakeholder categories, vendors and end-
users, span all four components. These categories indicate
which stakeholder is responsible for mitigation. Figure 1
segments the IoT deployment into vendor-and-user-controlled
networks. The cloud endpoint is controlled and mitigated by
the vendor, while the components within the home network
may expose conÔ¨Åguration parameters so users can disable
vulnerable features. For example, if the device has a known
default password and the vendor allows users to change the
default password, then the end-user can change the password
to secure the device.
C. Systematization Approach
The systematization uses the proposed abstract model,
which presents the literature uniformly across the categories
discussed earlier identifying their attack techniques, proposed
mitigations, and stakeholder responsibilities. Each work can
Ô¨Åt into one or more of the IoT components. The literature for
the systematization is chosen based on the following criteria:
‚Ä¢ Merit: The work is unique and among the Ô¨Årst to explore
a given security predicament.
(cid:18)(cid:20)(cid:23)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:49 UTC from IEEE Xplore.  Restrictions apply. 
‚Ä¢ Scope: The work focuses on the security (offensive and
defensive) of home-based IoT systems.
‚Ä¢ Impact: The work is regarded as signiÔ¨Åcant based on the
number of citations.
‚Ä¢ Disruption: The work uncovers a new area that
the
community is currently investigating.
D. Evaluation Scope and Attack Model
Evaluation Scope. Our second contribution is the evaluation
of home-based IoT devices using the abstract model to assess
the security properties. We limit our scope to home-based IoT
devices because they are relevant to the systematized work,
they are readily available, and the experiment setup can be
easily reproduced.
Attack Model. For the evaluation, we simplify the attack
model
to an Internet protocol (IP) network attacker. We
recognize that there are more powerful adversaries that can
attack low-energy (LE) based devices [15], but they require
specialized resources that are not available in many home net-
works. We consider the exploitation of a hub device (commu-
nication bridge between low-energy and IP) to be equivalent
to exploiting all the connected low-energy devices because
a trust session exists between the hub and the low-energy
devices. We exclude direct evaluation of low-energy devices
but consider their hubs for evaluation. Finally, we consider
the home network to be an untrusted network and we make
no assumptions about the security state of mobile applications,
modems/routers, or web browsers that have complete visibility
to the home network ([16]).
III. SYSTEMIZATION OF KNOWLEDGE
This section presents the systematization of home-based IoT
research based on the abstract graph model (see Figure 3).
Table I presents an overview of the systematized work and
their corresponding subsections where we discuss the literature
in detail. The component classiÔ¨Åcation highlights the focus of
the work while the attack vectors, mitigations, and stakehold-
ers identify the approach. The systematization highlights repre-
sentative work; hence it does not provide an all-encompassing
reference to every related work.
A. Device
Most of the home-based IoT research focuses on the device
because the device component is the cornerstone of an IoT
deployment.
1) Attack Vector: Several works ([17]‚Äì[20]) explored IoT
device conÔ¨Åguration insecurities. Barnes [17], building on the
Ô¨Åndings of Clinton et al. [18], demonstrated how exposed
hardware pins on a device allowed him to gain privilege access
and spy on the end-users. Insecure conÔ¨Ågurations combined
with weak or a lack of authentication can exacerbate the
problem as shown by Chapman [21] and Rodrigues [22].
Weak or a lack of authentication in running services is a key
contributor to several documented attacks [23]‚Äì[26]. These
attacks demonstrate that device setup and conÔ¨Åguration is an
important process that the vendor must consider and evaluate
for security Ô¨Çaws. Vendors should enforce strict authentication
policies and for end-users to conÔ¨Ågure the device before
allowing it to operate.
Max [23] assessed the security of the August Smart Lock
and found that weak authentication and insecure default con-
Ô¨Åguration broke the security of the lock. He found hard-coded
credentials and debug conÔ¨Ågurations that allows modiÔ¨Åcation
and introspection of the lock. The work of Obermaier et
al. [25] on cloud-based cameras found that although the device
had what appeared to be a strong password (36 characters of
alphanumeric and symbols), the password was the MAC ad-
dress of the camera reversed and Base64 encoded. Kavalaris et
al. [26] showed that the Sonos device runs undocumented and
unauthenticated services on high ports allowing LAN clients to
fully control the device. The Sonos device was susceptible to
unauthorized device pairing due to the lack of authentication.
SmartAuth [24] found that the authentication problem also
manifests itself in the IoT application platforms through over-
privileged applications. Device pairing establishes a trusted
channel between a client and their device. Further, IoT hubs
bridge LE devices to IP networks, which have a pre-established
trust relationship as shown in Figure 3. An attacker would
exploit this speciÔ¨Åc process to circumvent the device or use it
as a pivot point.
trust
IoT application platforms expose a permission-based model
to allow third-party applications to run. Fernandes et al. [27]‚Äì
[29] showed how implicit
to third-party applications
can have major implications on the security of the device.
There are many subcomponents within the device‚Äôs platform,
which can make securing the device difÔ¨Åcult. Many vendors
have good practices in place to ensure secure authentica-
tion and secure default conÔ¨Ågurations (as demonstrated by
O‚ÄôFlynn [30]), but core device services can suffer from side-
channel information leakage. Ronen et al. [15] showed that
although the Philips Hue device was reasonably secure, they
were able to extract the master encryption key through a side-
channel attack and combine it with a vulnerability found in
the communication protocol, which resulted in a wormable
exploit.
Flaws in Ô¨Årmware allow attackers to steal WiFi creden-
tials [31], turn smart thermostats into spy gadgets [32], ransom
them [33], run arbitrary commands on smart TVs [34], and
control home assist devices covertly [35]. Costin et al. [36]
conducted a large-scale study on Ô¨Årmware analysis and found
an array of Ô¨Çaws. The literature showed that device security re-
quires defensive approaches to secure side-channel, Ô¨Årmware,
and hardware. The toolchain for software and hardware de-
velopment has a well-deÔ¨Åned secure development process that
vendors must utilize.
2) Mitigations: To address vulnerable services, misconÔ¨Ågu-
ration, and weak authentication, vendors patch through device
updates, while inherent design Ô¨Çaws in IoT platforms are
mitigated through new frameworks. Wang et al. [37] proposed
a provenance-based framework to aggregates device activities
across a deployment
that can detect errors and malicious
activities.
(cid:18)(cid:20)(cid:23)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:49 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I: Systematization of the current literature using component based analysis. Each section corresponds to a graph
component discussed in the methodology spanning attack vectors, mitigations, and stakeholders. The implies the category of
attack, mitigation, or stakeholder applies to the discussed literature.
Component
e
c
i
v
e
D
A
-
I
I
I
n
o
i
t
c
e
S
e
l
i
b
o
M
n
o
i
t
a
c
i
l
p
p
A
B
-
I
I
I
n
o
i
t
c
e
S
d
u
o
l
C
t
n
i
o
p
d
n
E
C
-
I
I
I
n
o
i
t
c
e
S
n
o
i
t
a
c
i
D
-
I
I
I
n
u
m
m
o
C
n
o
i
t
c
e
S
Ref
Ur13 [19]
Costi14 [36]
Chapm14 [21]
Kaval14 [26]
Wuess15 [20]
Rodri15 [22]
Lodge16 [31]
Ike16 [18]
Franc16 [33]
O‚ÄôFly16 [30]
Ferna16 [27]
Max16 [23]
FlowF16 [28]
Oberm16 [25]
Barne17 [17]
Herna17[32]
Morge17 [34]
Ferna17 [29]
Ronen17 [15]
Dolph17 [35]
Tian17 [24]
Wang18 [37]
Barre10 [38]
Au12 [39]
Egele13 [40]
Vienn14 [41]
Max16 [23]
Sivar16 [16]
Demet17 [42]
IoTFu18 [43]
Max16 [23]
Oberm16 [25]
Nandi16 [44]
Blaic16 [45]
Wilso17 [46]
Surba17 [47]
DTAP18 [48]
BEAST11 [49]
Garci11 [50]
LUCKY13 [51]
Ryan13 [52]
Foula13 [53]
Alfar13 [54]
Selvi14 [55]
POODL14 [56]
FREAK15 [57]
CRIME15 [58]
SMACK15[59]
Adria15 [60]
Zilln15 [61]
DROWN16 [62]
Jasek16 [63]
Kinti16 [64]
Aptho17 [65]
Wood17 [66]
Attack Vector
Vuln. Services Weak Auth
Default ConÔ¨Åg




- -










- -



- -



- -






- -





- -
Permissions
Programming Data Protection













Vuln. Services Weak Auth
Encryption









Encryption
MITM
















- -












- -
(cid:18)(cid:20)(cid:23)(cid:22)
Mitigations
Stakeholders
Patching
Framework Vendor
End User









- -












- -
- -

- -



- -



- -
- -







- -













- -















- -











- -
- -







- -



- -


- -







- -
- -
- -



- -



- -

- -


- -


- -


- -
- -
- -

Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:49 UTC from IEEE Xplore.  Restrictions apply. 
SmartAuth [24] is a framework that
identiÔ¨Åes required
permissions for IoT applications running on platforms like
SmartThings and Apple Home. FlowFence [28] is a framework
that splits application codes into sensitive and non-sensitive
modules and orchestrates the execution through opaque han-
dlers. This approach burdens developers because they must be
mindful of what code operates on sensitive and non-sensitive
data. Further, researchers can adapt techniques found in mobile
application frameworks to address IoT platform insecurities.
3) Stakeholders: Table I shows that the main stakeholder is
the vendor. Vendors are responsible for patching and updating
vulnerable devices but can delegate some of the responsibil-
ities to users through conÔ¨Ågurations. For example, users can
mitigate insecurities by disabling problematic services on the
device. SmartAuth [24] provides a derived authentication ap-
proach for applications on the device, but the implementation
must be done by the vendor. Users gain control by having
a choice about what permissions to authorize for third-party
applications. Kavalaris et al. [26] showed how services that the
Sonos device exposes create a security risk. Users can mitigate
this risk through network segmentation, but it requires some
technical expertise.
Not many devices allow users to fully conÔ¨Ågure running
services or even disable them unless they have privileged
access. Based on all the proposed mitigations, end-users can
manage conÔ¨Åguration or network segmentation residing on the
home demarcation side as shown in Figure 1. End-users do not
have much control and often are given a minimalistic interface,
which limits the mitigation of vulnerable services. Vendors, on
the other hand, bear the responsibility for keeping the device
up to date.
4) Take Away: The literature addresses some aspects of
device security. Devices have many components that contribute
to their overall security like the platform permissions, unau-
thenticated services, insecure conÔ¨Ågurations, and software and
hardware bugs. Further, they are ampliÔ¨Åed when combined.
The device security is not purely in software, but vulnera-
bilities manifest themselves in hardware and side-channels as
well. Embedded Linux is found in many of the devices, but
there is no secure open IoT platform, which can incorporate
newly proposed frameworks [24], [28], [37] by the community.
System patching addresses most of the vulnerabilities. The
patching process is not perfect [32] and can be improved by
good practices implemented in other areas of computing [67].
The end-users have almost no control or visibility into the
operation of the device. Securely providing health telemetry
and Ô¨Åne-grained conÔ¨Åguration parameters can empower users
to mitigate immediate risks. Users can deploy the device in
many ways that go beyond the vendor‚Äôs permissive assump-
tions, hence vendors should assume the device is Internet-
facing when building security measures.
IoT devices.
Device: Vulnerabilities in IoT systems manifest themselves
in hardware, software, and side-channels and they are
exacerbated when combined. There are efforts to address
the security problems in IoT platforms, but common
vulnerabilities across different products need a system-
atic analysis. Mitigating vulnerabilities relies heavily on
vendors, but vendors should provide a way for users
to control, inspect, and evaluate their devices. Adapting
mature technology to manage IoT devices can signiÔ¨Åcantly
improve the security of IoT.
B. Mobile Application
Many of the home-based IoT devices have a companion
mobile application to control, conÔ¨Ågure, and interface with
the device. We represent the mobile application as a vertex in
our abstract model (see Figure 3). Mobile applications can be
leveraged as an attack surface against IoT deployments.
1) Attack Vector: Acar et al. [68] identiÔ¨Åed Ô¨Åve different
areas of Android mobile application issues, namely permission
evolution, permission revolution, webiÔ¨Åcation, programming-
induced leakage, and software distribution. We adapted Acar‚Äôs
approach and identiÔ¨Åed three major classes of insecurities
that effect IoT devices: over-privilege (permissions [38], [39]),
programming errors (programming [40]), and hard-coded sen-
sitive information (data protection [41]). Max [23] showed
how programming errors leak sensitive information about
the device and the cloud endpoint. Max used the sensitive
information to dump credentials, escalate privileges, and cir-
cumvent the security of the August Smart Lock. Apart from
Max‚Äôs work, there are no direct attacks leveraging the mobile
application to circumvent an IoT device.
Chen et al. [43] presented IoTFuzzer that instruments the
mobile application within an IoT deployment to Ô¨Ånd bugs on
the IoT device. Chen‚Äôs approach is unique and leverages the
semantics that the vendor programmed into the application.
Although there are no reports of this technique used in the
wild, theoretically an attacker can use the same approach to
escalate privilege on an IoT device. Sivaraman et al. [16]
showed how a mobile application can be used on a local
network to collect information about available home devices
and then reconÔ¨Ågure the router/modem Ô¨Årewall rules to make
the devices Internet facing. Hanguard [42] showed how per-
missive security assumptions by vendors about the LAN can
expose an IoT device. Companion mobile applications are an
entry point to the device and vendors often assume that the
deployment network is trusted and secure. These assumptions
can have grave effects on the security of the device especially
when devices rely on unauthenticated services or unencrypted
communications.
2) Mitigation: Hanguard [42] proposed a user-space mobile
application that interfaces with the router to control access
through role-based access control (RBAC). Hanguard‚Äôs ap-
proach will prevent
the attack discussed by Sivaraman et
al. [16] but cannot stop attacks from a compromised compan-
ion application. Securing the mobile application by adhering
Similar problems are faced with general purpose computing
systems that are publicly accessible and running vulnerable
services or using weak authentication (SSH with guessable
password). Adapting techniques from secure platforms and
operating systems will improve the security posture of many
(cid:18)(cid:20)(cid:23)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:49 UTC from IEEE Xplore.  Restrictions apply. 
to best practices discussed in Pscout [39], Barrera et al. [38],
Egele et al. [40], and Viennot et al. [41], reduces the attack
surface. Unfortunately, as Viennot et al. [41] showed, a large
portion of the applications in the Google Play Store contain
issues relating to permissions, programming errors, and in-
formation leakage. Mobile application platforms are mature
and have built-in security facilities to promote good practices.
Developers and vendors should adhere to best practices and
audit their mobile applications periodically.
3) Stakeholders: The mobile application component relies
on both the user and the vendor. This is partly due to the
permission model that most mobile platforms provide to end-
users. Hanguard [42] provides the user with a system to deploy
inside the local network through routing rules (user demarca-
tion Figure 1), which does not involve the vendor. Sivaraman
et al. [16] proposes that users should be vigilant when running
mobile applications on their networks and only use authorized
stores (Google Play, Apple App Store, etc.). The vendors must
address programming errors and secure information storage
through updates. Vendors must familiarize themselves with
the mobile platforms to deploy secure applications or use a
reputable third-party developer to provide secure development
expertise.
4) Take Away: The work of Acar et al. [68] showed the
maturity of the mobile application security Ô¨Åeld. An inherent
trust is given to mobile applications, which in many cases
control core components of an IoT device or a cloud service.
Max [23] and IoTFuzzer [43] demonstrated how to abuse the
implicit trust between mobile applications and IoT devices
or cloud services. IoT vendors and developers should adhere
to platform development guidelines and leverage security
features to ensure proper deployments. Limiting mobile appli-
cation access to the device through Ô¨Åne-grained controls is a
promising direction that can reduce the attack impact. Lastly,
Hanguard‚Äôs [42] approach should be further investigated to
provide end-users with control to mitigate risks.
Mobile Application: Mobile applications are trusted by
IoT devices and attackers have leveraged that trust as an at-
tack point. Vendors should make conservative assumptions
about the trust relationship and limit the interactions with
core services. Mobile applications still suffer from over-
privileged permissions, programming errors, and hard-
coded sensitive data. Adhering to established secure devel-
opment guidelines in mobile platforms will improve IoT
security.
C. Cloud Endpoint
Cloud endpoints are the Internet components of the IoT
deployment, and in a sense, they deÔ¨Åne what IoT is. They
provide core services like remote administration, alerts, and
digital content. The IoT devices and their mobile applications
trust these cloud endpoints, which gives adversaries an addi-
tional attack point. We model the cloud endpoints as vertices
in the abstract graph model (see Figure 3).
1) Attack Vector: The attack by Max [23] is a great example
that touches on all components of the IoT ecosystem. The
attack discovered insecure application program interface (API)
on the cloud endpoint for the August Smart Lock, which esca-
lated a guest account to an administrator account. Blaich [45]
audited the WiÔ¨Å Barbie doll for various vulnerabilities and
found that the cloud endpoints did not authenticate Ô¨Årmware
downloads, had multiple cross-site-scripting vulnerabilities,
allowed username enumeration, had no brute force limiting,
and issued never expiring cookies. Obermaier et al. [25] au-
dited the cloud endpoints of surveillance cameras and showed
that an attacker can inject footage, trigger false alarms, and
carry out a denial-of-service attack against the camera system.
These attacks were possible due to vulnerabilities introduced
in the conÔ¨Åguration of the infrastructure, vulnerable services,
and insecure APIs. Zuo et al. [69] leveraged client-to-cloud
trust to implement AutoForge, which forges requests from the
mobile applications to the cloud endpoints enabling password
brute-forcing, password probing, and security access token
hijacking. Implicit trust between IoT components is sensitive
and vendors must verify endpoints before allowing them
unfettered access.
IoT integration platforms, like IFTTT [70], automate.io [71],
and CloudWork [72], are third-party cloud endpoints. They use
OAuth tokens to connect multiple IoT devices to perform user
programmed tasks. Surbatovich et al. [47] studied the security
implications on privacy and integrity when using recipes2 and
showed that some recipes can allow attackers to distribute
malware and carry out denial-of-service attacks. Nandi et
al. [44] reported a similar type of user-induced programming
error through trigger-action programming (TAP), which led to
an incorrect event triggering or a lack thereof. Fernandes et
al. [48] pointed out that the cloud integration platforms can
be compromised, which might expose the user‚Äôs OAuth tokens
publicly. These scenarios are likely to happen based on recent
platform compromises like Equifax [73] and Orbitz [74]. The
work of Wilson et al. [46] did not identify an attack vector
on the IoT ecosystem, but it studied the privacy and trust
that users place with IoT vendors. These attacks show that
cloud integration services lack Ô¨Åne-grained control and they
leak private and sensitive information that can lead to a breach.
2) Mitigation: To mitigate these attacks, Max [23], Ober-
maier et al. [25], and Blaich [45] recommend proper con-
Ô¨Åguration and secure authentication mechanisms. Surbatovich
et al. [47] offered a framework to analyze the cloud platform
recipes, which motivated later work. Nandi et al. [44] proposed
an automatic trigger generation system that analyzes user-
deÔ¨Åned triggers for errors and rectiÔ¨Åes them by rewriting
the triggers. Fernandes et al. [48] proposed the use of a
decentralized framework for trigger-action programmable plat-
forms called DTAP. The DTAP platform is a shim between
the IoT cloud platform and the user‚Äôs local network and
brokers access to the IoT devices based on transfer tokens
2recipes are high-level programmable instructions that are used to trigger
IoT device actions based on an occurrence of an event.
(cid:18)(cid:20)(cid:23)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:49 UTC from IEEE Xplore.  Restrictions apply. 
(XTokens). The mitigation techniques include securing cloud
endpoints, offering tools to analyze third-party integration