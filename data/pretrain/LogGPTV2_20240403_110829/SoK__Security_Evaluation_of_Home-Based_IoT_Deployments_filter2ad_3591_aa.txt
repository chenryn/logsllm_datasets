# SoK: Security Evaluation of Home-Based IoT Deployments

## Authors
Omar Alrawi, Chaz Lever, Manos Antonakakis, and Fabian Monrose  
Georgia Institute of Technology  
University of North Carolina at Chapel Hill

## Abstract
Home-based Internet of Things (IoT) devices are often criticized for their poor security practices. While these insecurities may seem to stem from simple integration issues, this work reveals that the underlying challenges are more complex. IoT deployments rely on traditional computing systems such as embedded, mobile, and network components, which introduce unexplored security challenges, such as the impact of over-privileged mobile applications on embedded devices.

This paper proposes a methodology for researchers and practitioners to analyze the security properties of home-based IoT devices. We systematize the literature on home-based IoT using this methodology to understand attack techniques, mitigations, and stakeholders. Additionally, we evaluate 45 devices to identify neglected research areas. To promote transparency and community involvement, we provide a public portal to share our evaluation data and invite contributions from the community.

## I. Introduction
Security issues in Internet of Things (IoT) continue to cause significant operational problems, including high-profile attacks, mass exploitation, and sensational headlines about "exotic" device hacking. The demand for IoT devices, especially in the multi-billion-dollar residential market, has created a modern-day gold rush. New and established companies are rushing to capture a share of the IoT market, often prioritizing time-to-market and production costs over robust security practices. As a result, compromised IoT devices have become a common sight.

Researchers and vendors are working to address these insecurities, but their efforts are often disjointed and ad-hoc. Several working groups and market leaders have proposed standardizations for IoT devices, but there is no consensus on a solution. The heterogeneity of home-based IoT devices further complicates these insecurities, as core functionalities can vary significantly based on the specific device type. For example, an IoT vacuum cleaner and a home assistant device may both use an embedded Linux operating system, but their running services will differ, making it challenging to analyze diverse home-based IoT products.

State-sponsored adversaries and unsophisticated criminal groups are exploiting these vulnerabilities to run sophisticated cyber operations and distributed denial-of-service (DDoS) attacks. Some vendors leave service backdoors in their devices, which are later discovered and exploited by botnets. Cleanup efforts and vulnerability patching are far from perfect, and as more devices come online, the threats targeting them become more versatile, enabling them to spread even further.

To systematically address these security issues, researchers need to understand the landscape through measurements and in-depth studies to classify and address vulnerabilities. There are numerous research efforts focused on home-based IoT security, but they are scattered. Our community needs a comprehensive understanding of the current literature, insights, and identification of security gaps. These insights would allow the research community to formalize the insecurities, propose mitigations, and define stakeholder responsibilities. In-depth studies and classifications of literature can guide the community to prioritize their efforts.

In this work, we propose a modeling methodology to study home-based IoT devices and evaluate their security posture based on component analysis, including the IoT device, companion mobile application, cloud endpoints, and associated communication channels. Using this approach, we systematize the research literature for home-based IoT devices to understand attack techniques, proposed mitigations, and stakeholder responsibilities. We also evaluate 45 home-based IoT devices available on the market today, providing an overview of their security properties across the IoT components.

Based on the systematization and evaluation, we compare the insights found between both approaches, highlighting commonalities and differences. We provide a list of mitigations for each component and propose strategies for different stakeholders to address the identified issues. Most importantly, we establish a public portal where we invite fellow researchers, vendors, and power-users to contribute new device evaluations and reproduce our results using the published dataset and proposed methodology.

**Portal:** [https://yourthings.info](https://yourthings.info)

## II. Methodology
Our work makes two primary contributions: the systematization of literature and the evaluation of home-based IoT devices. We rely on an abstract model that segments IoT deployments into components, which we apply uniformly to both the research literature and device evaluations.

### A. Abstraction Model Overview
We propose an abstract model to represent IoT deployments and their topologies. Figure 1 shows an example of an IoT-connected home with multiple devices. The approach involves segmenting each device into its respective topology, as shown in Figure 2. Formally, we define an IoT deployment as a set of vertices \( V \) and edges \( E \), as illustrated in Figure 3. Overall, our abstract model has four main components: a set of devices \( D \), a set of cloud endpoints \( C \), a set of mobile applications \( A \), and a set of communication channels \( E \).

\[
A, C, D \subset V; \quad D : \{d_i, i \in \mathbb{Z}\}; \quad C : \{c_j, j \in \mathbb{Z}\}; \quad A : \{a_k, k \in \mathbb{Z}\}; \quad E : \{e_l, l \in \mathbb{Z}\}
\]

For each device deployment, we construct a representative graph and examine the security properties for each component.

### B. Security Properties
The security properties are categorized into three areas: attack vectors, mitigations, and stakeholders.

#### Attack Vectors
- **Device:**
  - **Vulnerable Services:** Vulnerabilities in running services.
  - **Weak Authentications:** Weak or guessable credentials.
  - **Default Configurations:** Insecure factory settings.

- **Mobile Application:**
  - **Permissions:** Over-privileged mobile applications.
  - **Programming:** Vulnerable implementations, including improper use of cryptographic protocols.
  - **Data Protection:** Hard-coded sensitive information.

- **Communication Channels:**
  - **Encryption:** Lack of encryption or support for weak encryption protocols.
  - **Man-in-the-Middle (MITM):** Susceptibility to MITM attacks.

- **Cloud Endpoint:**
  - **Vulnerable Services, Weak Authentications, and Encryption:** As defined above.

#### Mitigations
- **Patching:** Addressing attack vectors through vendor updates or user attentiveness.
- **Framework:** Mitigating fundamental problems that require a new approach.

#### Stakeholders
- **Vendors:** Responsible for mitigation through vendor-controlled networks.
- **End-Users:** Responsible for mitigation through user-controlled networks, such as disabling vulnerable features.

### C. Systematization Approach
The systematization uses the proposed abstract model to present the literature uniformly across the categories discussed, identifying attack techniques, proposed mitigations, and stakeholder responsibilities. Each work can fit into one or more of the IoT components. The literature for systematization is chosen based on the following criteria:
- **Merit:** Unique and among the first to explore a given security issue.
- **Scope:** Focuses on the security (offensive and defensive) of home-based IoT systems.
- **Impact:** Regarded as significant based on the number of citations.
- **Disruption:** Uncovers a new area currently under investigation by the community.

### D. Evaluation Scope and Attack Model
- **Evaluation Scope:** Our second contribution is the evaluation of home-based IoT devices using the abstract model to assess their security properties. We limit our scope to home-based IoT devices because they are relevant to the systematized work, readily available, and easily reproducible.
- **Attack Model:** For the evaluation, we simplify the attack model to an Internet Protocol (IP) network attacker. While more powerful adversaries can attack low-energy (LE) based devices, they require specialized resources not typically available in home networks. We consider the exploitation of a hub device (communication bridge between LE and IP) to be equivalent to exploiting all connected LE devices due to the trust session between the hub and LE devices. We exclude direct evaluation of LE devices but include their hubs in the evaluation. Finally, we consider the home network to be untrusted and make no assumptions about the security state of mobile applications, modems/routers, or web browsers that have complete visibility to the home network.

## III. Systematization of Knowledge
This section presents the systematization of home-based IoT research based on the abstract graph model (see Figure 3). Table I provides an overview of the systematized work and their corresponding subsections, where we discuss the literature in detail. The component classification highlights the focus of the work, while the attack vectors, mitigations, and stakeholders identify the approach. The systematization highlights representative work and does not provide an all-encompassing reference to every related work.

### A. Device
Most home-based IoT research focuses on the device, as it is the cornerstone of an IoT deployment.

#### 1. Attack Vector
Several works have explored IoT device configuration insecurities. For example, Barnes [17] demonstrated how exposed hardware pins on a device allowed him to gain privileged access and spy on end-users. Insecure configurations combined with weak or lack of authentication can exacerbate the problem, as shown by Chapman [21] and Rodrigues [22]. Weak or lack of authentication in running services is a key contributor to several documented attacks [23]–[26]. These attacks highlight the importance of secure device setup and configuration. Vendors should enforce strict authentication policies and ensure users configure the device before allowing it to operate.

Max [23] assessed the security of the August Smart Lock and found that weak authentication and insecure default configuration broke the lock's security. He discovered hard-coded credentials and debug configurations that allowed modification and introspection of the lock. Obermaier et al. [25] found that although a cloud-based camera had a strong password, it was derived from the MAC address of the camera, reversed and Base64 encoded. Kavalaris et al. [26] showed that the Sonos device runs undocumented and unauthenticated services on high ports, allowing LAN clients to fully control the device. The Sonos device was susceptible to unauthorized device pairing due to the lack of authentication.

SmartAuth [24] found that the authentication problem also manifests in IoT application platforms through over-privileged applications. Device pairing establishes a trusted channel between a client and their device. Further, IoT hubs bridge LE devices to IP networks, which have a pre-established trust relationship. An attacker could exploit this process to circumvent the device or use it as a pivot point.

IoT application platforms expose a permission-based model to allow third-party applications to run. Fernandes et al. [27]–[29] showed how implicit trust in third-party applications can have major implications on the security of the device. Many subcomponents within the device’s platform can make securing the device difficult. While many vendors have good practices in place to ensure secure authentication and default configurations, core device services can suffer from side-channel information leakage. Ronen et al. [15] showed that although the Philips Hue device was reasonably secure, they were able to extract the master encryption key through a side-channel attack and combine it with a vulnerability in the communication protocol, resulting in a wormable exploit.

Flaws in firmware allow attackers to steal WiFi credentials [31], turn smart thermostats into spy gadgets [32], ransom them [33], run arbitrary commands on smart TVs [34], and control home assist devices covertly [35]. Costin et al. [36] conducted a large-scale study on firmware analysis and found an array of flaws. The literature shows that device security requires defensive approaches to secure side-channels, firmware, and hardware. The toolchain for software and hardware development must follow a well-defined secure development process.

#### 2. Mitigations
To address vulnerable services, misconfiguration, and weak authentication, vendors patch through device updates, while inherent design flaws in IoT platforms are mitigated through new frameworks. Wang et al. [37] proposed a provenance-based framework to aggregate device activities across a deployment, which can detect errors and malicious activities. SmartAuth [24] is a framework that identifies required permissions for IoT applications running on platforms like SmartThings and Apple Home. FlowFence [28] is a framework that splits application codes into sensitive and non-sensitive modules and orchestrates the execution through opaque handlers. This approach burdens developers, as they must be mindful of what code operates on sensitive and non-sensitive data. Researchers can adapt techniques found in mobile application frameworks to address IoT platform insecurities.

#### 3. Stakeholders
Table I shows that the main stakeholder is the vendor. Vendors are responsible for patching and updating vulnerable devices but can delegate some responsibilities to users through configurations. For example, users can mitigate insecurities by disabling problematic services on the device. SmartAuth [24] provides a derived authentication approach for applications on the device, but the implementation must be done by the vendor. Users gain control by choosing what permissions to authorize for third-party applications. Kavalaris et al. [26] showed how services that the Sonos device exposes create a security risk. Users can mitigate this risk through network segmentation, but it requires some technical expertise.

Not many devices allow users to fully configure running services or even disable them unless they have privileged access. Based on all the proposed mitigations, end-users can manage configuration or network segmentation residing on the home demarcation side. End-users do not have much control and often are given a minimalistic interface, which limits the mitigation of vulnerable services. Vendors bear the responsibility for keeping the device up to date.

#### 4. Takeaways
The literature addresses some aspects of device security. Devices have many components that contribute to their overall security, such as platform permissions, unauthenticated services, insecure configurations, and software and hardware bugs. These vulnerabilities are amplified when combined. Device security is not purely in software; vulnerabilities manifest in hardware and side-channels as well. Embedded Linux is found in many devices, but there is no secure open IoT platform that can incorporate newly proposed frameworks [24], [28], [37] by the community. System patching addresses most vulnerabilities, but the patching process is not perfect and can be improved by implementing good practices from other areas of computing [67].

End-users have almost no control or visibility into the operation of the device. Securely providing health telemetry and fine-grained configuration parameters can empower users to mitigate immediate risks. Users can deploy the device in ways that go beyond the vendor’s permissive assumptions, so vendors should assume the device is Internet-facing when building security measures.

**Key Points:**
- **Device:** Vulnerabilities in IoT systems manifest in hardware, software, and side-channels and are exacerbated when combined. Efforts to address security problems in IoT platforms exist, but common vulnerabilities across different products need systematic analysis. Mitigating vulnerabilities relies heavily on vendors, who should provide a way for users to control, inspect, and evaluate their devices. Adapting mature technology to manage IoT devices can significantly improve their security.

### B. Mobile Application
Many home-based IoT devices have a companion mobile application to control, configure, and interface with the device. We represent the mobile application as a vertex in our abstract model (see Figure 3). Mobile applications can be leveraged as an attack surface against IoT deployments.

#### 1. Attack Vector
Acar et al. [68] identified five different areas of Android mobile application issues: permission evolution, permission revolution, webification, programming-induced leakage, and software distribution. We adapted Acar’s approach and identified three major classes of insecurities that affect IoT devices: over-privilege (permissions [38], [39]), programming errors (programming [40]), and hard-coded sensitive information (data protection [41]). Max [23] showed how programming errors leak sensitive information about the device and the cloud endpoint, which he used to dump credentials, escalate privileges, and circumvent the security of the August Smart Lock. Apart from Max’s work, there are no direct attacks leveraging the mobile application to circumvent an IoT device.

Chen et al. [43] presented IoTFuzzer, which instruments the mobile application within an IoT deployment to find bugs on the IoT device. Chen’s approach is unique and leverages the semantics that the vendor programmed into the application. Although there are no reports of this technique being used in the wild, theoretically, an attacker could use the same approach to escalate privileges on an IoT device. Sivaraman et al. [16] showed how a mobile application can be used on a local network to collect information about available home devices and then reconfigure the router/modem firewall rules to make the devices Internet-facing. Hanguard [42] showed how permissive security assumptions by vendors about the LAN can expose an IoT device. Companion mobile applications are an entry point to the device, and vendors often assume that the deployment network is trusted and secure. These assumptions can have grave effects on the security of the device, especially when devices rely on unauthenticated services or unencrypted communications.

#### 2. Mitigation
Hanguard [42] proposed a user-space mobile application that interfaces with the router to control access through role-based access control (RBAC). Hanguard’s approach prevents the attack discussed by Sivaraman et al. [16] but cannot stop attacks from a compromised companion application. Securing the mobile application by adhering to best practices discussed in Pscout [39], Barrera et al. [38], Egele et al. [40], and Viennot et al. [41] reduces the attack surface. Unfortunately, as Viennot et al. [41] showed, a large portion of the applications in the Google Play Store contain issues related to permissions, programming errors, and information leakage. Mobile application platforms are mature and have built-in security facilities to promote good practices. Developers and vendors should adhere to best practices and audit their mobile applications periodically.

#### 3. Stakeholders
The mobile application component relies on both the user and the vendor. This is partly due to the permission model that most mobile platforms provide to end-users. Hanguard [42] provides the user with a system to deploy inside the local network through routing rules (user demarcation in Figure 1), which does not involve the vendor. Sivaraman et al. [16] propose that users should be vigilant when running mobile applications on their networks and only use authorized stores (Google Play, Apple App Store, etc.). Vendors must address programming errors and secure information storage through updates. Vendors must familiarize themselves with mobile platforms to deploy secure applications or use a reputable third-party developer to provide secure development expertise.

#### 4. Takeaways
The work of Acar et al. [68] showed the maturity of the mobile application security field. An inherent trust is given to mobile applications, which in many cases control core components of an IoT device or a cloud service. Max [23] and IoTFuzzer [43] demonstrated how to abuse the implicit trust between mobile applications and IoT devices or cloud services. IoT vendors and developers should adhere to platform development guidelines and leverage security features to ensure proper deployments. Limiting mobile application access to the device through fine-grained controls is a promising direction that can reduce the attack impact. Lastly, Hanguard’s [42] approach should be further investigated to provide end-users with control to mitigate risks.

**Key Points:**
- **Mobile Application:** Mobile applications are trusted by IoT devices, and attackers have leveraged that trust as an attack point. Vendors should make conservative assumptions about the trust relationship and limit interactions with core services. Mobile applications still suffer from over-privileged permissions, programming errors, and hard-coded sensitive data. Adhering to established secure development guidelines in mobile platforms will improve IoT security.

### C. Cloud Endpoint
Cloud endpoints are the Internet components of the IoT deployment and, in a sense, define what IoT is. They provide core services like remote administration, alerts, and digital content. The IoT devices and their mobile applications trust these cloud endpoints, which gives adversaries an additional attack point. We model the cloud endpoints as vertices in the abstract graph model (see Figure 3).

#### 1. Attack Vector
Max [23] discovered an insecure application program interface (API) on the cloud endpoint for the August Smart Lock, which escalated a guest account to an administrator account. Blaich [45] audited the Wi-Fi Barbie doll and found that the cloud endpoints did not authenticate firmware downloads, had multiple cross-site scripting vulnerabilities, allowed username enumeration, had no brute force limiting, and issued never-expiring cookies. Obermaier et al. [25] audited the cloud endpoints of surveillance cameras and showed that an attacker could inject footage, trigger false alarms, and carry out a denial-of-service attack against the camera system. These attacks were possible due to vulnerabilities introduced in the configuration of the infrastructure, vulnerable services, and insecure APIs. Zuo et al. [69] leveraged client-to-cloud trust to implement AutoForge, which forges requests from the mobile applications to the cloud endpoints, enabling password brute-forcing, password probing, and security access token hijacking. Implicit trust between IoT components is sensitive, and vendors must verify endpoints before allowing them unfettered access.

IoT integration platforms, like IFTTT [70], automate.io [71], and CloudWork [72], are third-party cloud endpoints. They use OAuth tokens to connect multiple IoT devices to perform user-programmed tasks. Surbatovich et al. [47] studied the security implications on privacy and integrity when using recipes and showed that some recipes can allow attackers to distribute malware and carry out denial-of-service attacks. Nandi et al. [44] reported a similar type of user-induced programming error through trigger-action programming (TAP), which led to incorrect event triggering or a lack thereof. Fernandes et al. [48] pointed out that cloud integration platforms can be compromised, which might expose the user’s OAuth tokens publicly. These scenarios are likely to happen based on recent platform compromises like Equifax [73] and Orbitz [74]. Wilson et al. [46] did not identify an attack vector on the IoT ecosystem but studied the privacy and trust that users place with IoT vendors. These attacks show that cloud integration services lack fine-grained control and leak private and sensitive information, leading to breaches.

#### 2. Mitigation
To mitigate these attacks, Max [23], Obermaier et al. [25], and Blaich [45] recommend proper configuration and secure authentication mechanisms. Surbatovich et al. [47] offered a framework to analyze the cloud platform recipes, which motivated later work. Nandi et al. [44] proposed an automatic trigger generation system that analyzes user-defined triggers for errors and rectifies them by rewriting the triggers. Fernandes et al. [48] proposed the use of a decentralized framework for trigger-action programmable platforms called DTAP. The DTAP platform is a shim between the IoT cloud platform and the user’s local network, brokering access to the IoT devices based on transfer tokens (XTokens). The mitigation techniques include securing cloud endpoints, offering tools to analyze third-party integration, and providing decentralized frameworks.

#### 3. Stakeholders
The cloud endpoint component primarily relies on the vendor. Vendors must ensure proper configuration and secure authentication mechanisms. They should also provide tools to analyze and secure third-party integrations and consider decentralized frameworks to broker access to IoT devices.

#### 4. Takeaways
The literature shows that cloud endpoints are a critical attack surface in IoT deployments. Vulnerabilities in cloud endpoints, such as insecure APIs, configuration issues, and lack of fine-grained control, can lead to significant security breaches. Vendors must adopt best practices for securing cloud endpoints and provide tools and frameworks to help users and developers mitigate risks.

**Key Points:**
- **Cloud Endpoint:** Cloud endpoints are a critical attack surface in IoT deployments. Vulnerabilities in cloud endpoints, such as insecure APIs, configuration issues, and lack of fine-grained control, can lead to significant security breaches. Vendors must adopt best practices for securing cloud endpoints and provide tools and frameworks to help users and developers mitigate risks.

## Conclusion
In conclusion, our work proposes a methodology for analyzing the security properties of home-based IoT devices. We systematize the literature on home-based IoT to understand attack techniques, mitigations, and stakeholders. Additionally, we evaluate 45 devices to identify neglected research areas. To promote transparency and community involvement, we provide a public portal to share our evaluation data and invite contributions from the community. By adopting the proposed methodologies and mitigations, the IoT ecosystem can become more secure and resilient to emerging threats.