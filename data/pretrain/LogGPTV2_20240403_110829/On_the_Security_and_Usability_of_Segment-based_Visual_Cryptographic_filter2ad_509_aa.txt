title:On the Security and Usability of Segment-based Visual Cryptographic
Authentication Protocols
author:Tianhao Wang and
Huangyi Ge and
Omar Chowdhury and
Hemanta K. Maji and
Ninghui Li
On the Security and Usability of Segment-based
Visual Cryptographic Authentication Protocols
Tianhao Wang, Huangyi Ge, Omar Chowdhury, Hemanta K. Maji, Ninghui Li
Department of Computer Science
{tianhaowang, geh, ochowdhu}@purdue.edu, {hmaji, ninghui}@cs.purdue.edu
Purdue University
West Lafayette, IN, USA
ABSTRACT
Visual cryptography has been applied to design human com-
putable authentication protocols.
In such a protocol, the
user and the server share a secret key in the form of an im-
age printed on a transparent medium, which the user super-
imposes on server-generated image challenges, and visually
decodes a response code from the image. An example of
such protocols is PassWindow, an award-winning commercial
product. We study the security and usability of segment-
based visual cryptographic authentication protocols (SVAPs),
which include PassWindow as a particular case. In an SVAP,
the images consist of segments and are thus structured. Our
overall ﬁndings are negative. We introduce two attacks that
together can break all SVAPs we considered in the paper.
Moreover, our attacks exploit fundamental weaknesses of
SVAPs that appear diﬃcult to ﬁx. We have also evaluated
the usability of diﬀerent SVAPs and found that the protocol
that oﬀers the best security has the poorest usability.
Keywords
Visual Cryptography; User Authentication; Attack
1.
INTRODUCTION
Authentication protocols allow a user to identify herself to
a centralized server while ensuring that no adversary, with-
out possession of the secret, can impersonate her. Human-
computable authentication protocols rely on human’s cogni-
tive capability (and, often memory) to carry out the authen-
tication process. These protocols do not rely on the trust-
worthiness of the user’s computing device and hence hold the
promise of providing moderately secure and usable second-
factor authentication mechanisms. However, most human-
computable authentication protocols are either tough to use
or very insecure.
The concept of visual cryptography (VC) [26, 27] oﬀers
the potential of designing such human-computable, second-
factor authentication protocols. VC is a more human intelli-
gible principle of cryptographic protocol design that involves
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24-28, 2016, Vienna, Austria
c(cid:13) 2016 ACM. ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978417
no end-user cryptographic computations and has, subse-
quently, inspired a wide array of cryptographic applications
[30, 20, 5, 14]. A typical VC-based human-computable au-
thentication protocol may proceed as follows. The user and
the server share a secret key in the form of an image printed
on a transparent key card, e.g., a special credit card with a
transparent portion. One authentication session consists of
one or more rounds. In each round, an image of challenge
frame is shown to the user on a display (e.g., a phone or a
computer); then the user overlays her key card on top of the
challenge frame to obtain a new superimposed image, inter-
prets the image visually and replies back with a response.
Since VC-based protocols use an image card, it can store
a high-entropy key that the user does not need to remember;
this opens up the possibility of designing a secure and usable
scheme. A prominent representative example of such pro-
tocols is PassWindow [28, 4], a commercial product available
from a startup company, which won the Wall Street Journal
Asian Innovation Awards [33]. The design of PassWindow re-
lies on the visual decoding of digits represented in 7-segment
LED-style and is signiﬁcantly more user-friendly than other
human-computable cryptographic authentication proposals
in the research literature.
In this paper, we study the security and usability of
segment-based visual cryptographic authentication protocols
(SVAPs), which includes PassWindow as a particular case. In
SVAPs, the images are segment-based and structured. More
speciﬁcally, each frame of image consists of segments such
that a group of adjacent segments can be used to display a
symbol from some pre-deﬁned set, e.g., digits or letters. We
call each such group which can display symbols a position.
The security expectation from SVAPs is that an eavesdrop-
ping attacker (e.g., a malware on the client device) who in-
tercepts the challenge-response pairs belonging to multiple
authentication sessions cannot impersonate the user. Our
overall ﬁndings are negative. We introduce two classes
of attacks that together can break all SVAPs we consider.
While some designs (such as having the response computed
from multiple displayed digits) can slightly improve security,
they hurt usability. Furthermore, our attacks are applicable
so long as the images are segment-based and symbol-based.
Contributions. To conduct a systematic study of SVAPs,
we introduce a framework and a security deﬁnition for them.
Our security deﬁnition is inspired by [25]: An attack algo-
rithm ((cid:96), p)-breaks an SVAP if it can successfully respond to a
new challenge with probability p on average after observing
a transcript of (cid:96) successful authentication sessions.
We generalize PassWindow to the class of uni-symbol SVAPs,
603in which each challenge frame can yield at most one symbol
(e.g., a digit for PassWindow). The security of uni-symbol
SVAPs relies on the assumption that an adversary is uncer-
tain which position in the frame displays a response symbol.
However, through experiences of breaking and ﬁxing Pass-
Window and similar protocols, we gained the following key in-
sight: Knowing that only one symbol s ∈ Σ is displayed in a
frame yields the deﬁnite information that no other symbol in
Σ is displayed at any position of the frame. This information
can be exploited to reduce the plausible key universe with-
out any expensive searching, and applies to all uni-symbol
SVAPs.
We develop Search, an attack targeting uni-symbol SVAPs.
Search hinges on the following three key ideas. (1) Given a
transcript of challenge-response pairs, we can use the above
insight to eliminate keys that are inconsistent with the ob-
served transcript. (2) We can perform a bounded search to
exploit non-deﬁnite information leaked through challenge-
response pairs. After the key universe is reduced signiﬁ-
cantly by exploiting deﬁnite information, such a search be-
comes highly eﬀective. (3) It is not necessary to recover the
key fully for the purpose of computing a correct response to
challenges. We ﬁnd that, while PassWindow has been found
to oﬀer strong security in previous studies [28, 1], and such
analysis results have been accepted at face value [11], Search
is extremely eﬀective against our reconstruction of PassWin-
dow, as well as other uni-symbol SVAPs we have developed.
To summarize, uni-symbol SVAPs’ fundamental weakness is
that each challenge frame encodes at most one symbol.
To overcome this fundamental weakness of uni-symbol
SVAP, we design multi-symbol SVAPs where each challenge
frame displays more than one symbol, and the user applies
a transformation on the symbols to obtain the response of
that frame. Given a frame that encodes two digits d1 and d2,
we considered two ways to generate the response code: (a)
(d1 + d2) mod 10 (hashing based double-digit SVAP, in short,
HDD) and (b) either d1 or d2 is acceptable (either of double-
digit SVAP, in short, EDD). We also investigated a general-
ization of HDD to three digits which we identify as hashing
based triple digit SVAP (HTD). EDD and HTD leaks no deﬁnite
information, and Search is totally ineﬀective against them.
We introduce the SolveLP attack that works for both uni-
and multi- symbol SVAPs. This attack encodes the imperson-
ation attack as a constraint satisfaction problem, where each
variable encodes whether the key contains a particular pat-
tern in a given position. However, oﬀ-the-shelf solvers are
found to be ineﬀective at solving the resulting constraints.
We thus developed an algorithm for solving them, exploiting
the linear programming relaxation technique. That is, in-
stead of assigning binary values to the variables, we consider
a relaxation that assigns fractional values to them, and in-
terpret a larger value as more likely to be 1 (cf., the random-
ized rounding technique [29]). We further apply the iterative
multiplicative update technique to solve the resulting linear
programming problem. Our experimental evaluation shows
that all the newly introduced multi-symbol SVAPs are sus-
ceptible to this attack, although they do oﬀer higher security
than uni-symbol SVAPs.
Our security analysis exposes a fundamental limitation of
SVAPs, that is, one can attain a compact representation of
the partial knowledge about the key based on each position
independently. SolveLP takes advantage of the compact rep-
resentation by treating whether a speciﬁc pattern appears in
Figure 1: An example of key, challenge and com-
bined frames for an SVAP authentication round.
Figure 2: Visual representation of PassWindow’s Σ.
a given position of the key as a variable to be solved. Any
authentication protocol whose human-computable transfor-
mation for deriving the response code from the displayed
symbols is expressible as constraints is vulnerable to this
attack.
Finally, we also carried out a user study on Amazon Me-
chanical Turk service to evaluate the usability of some of the
concrete SVAPs we have analyzed for security. Some repre-
sentative notable ﬁndings of our usability analysis are as
follows.
(1) EDD performs the best based on completion
time and accuracy. However, EDD is very insecure against
SolveLP. (2) The computation required for HDD and HTD im-
poses signiﬁcant cognitive overhead for the users, and HTD,
which is the most secure protocol, has signiﬁcantly worse us-
ability than other protocols. (3) HDD oﬀers stronger security
than PassWindow with similar usability. (4) For EDD, conven-
tional wisdom indicates that the chance of the left digit get-
ting picked in higher, au contraire, our study demonstrates
that the probability of the user picking the left or the right
digit is roughly equal.
Roadmap. The paper is organized as follows. We present
our framework, the adversarial model we consider, and the
security deﬁnition for SVAPs in Section 2. Section 3 describes
the concrete uni- and multi-symbol SVAPs we analyze in this
paper.
In Sections 4 and 5, we present the Search and
SolveLP attack strategies, respectively. Sections 6 and 7
present the experimental results concerning the SVAP secu-
rity and usability, respectively. We discuss related work in
Section 8 and conclude with Section 9.
2. A FRAMEWORK FOR SVAPS
In visual cryptographic authentication protocols, the user
and the server share a secret key in the form of an image
printed on a transparent key card, which the user superim-
poses on server-generated challenge images, interprets the
resulting image visually, and replies back with appropriate
responses.
In this paper, we focus on Segment-based Vi-
sual Authentication Protocols (in short, SVAPs), where each
frame of (key or challenge) image consists of segments and
is structured so that a group of adjacent segments can en-
code a symbol. See Figure 1 for an example of the visual
key/secret, challenge, and the result of superimposing the
key on top of the challenge.
In this section, we ﬁrst give a general framework for SVAPs,
then give the adversarial model and the security deﬁnition
for SVAPs. We use PassWindow as an example to illustrate the
framework.
2.1 The Framework
SVAP Primitives. Each SVAP is based on a Visual Primi-
keychallengewhat user sees604Figure 3: Example of visual component of an SVAP
Figure 4: An example key and challenge-response.
The response should be the sequence 8596, encoded
in frames 4, 5, 6, 7.
tive, which is speciﬁed by a tuple (cid:104)Σ, image, code(cid:105). Σ gives
the set of all symbols used in the SVAP; it can be a set of
digits, a set of letters, or some other set of symbols. The
function image maps a bitstring to a segment-based image;
each segment is turned on (or opaque) if and only if its cor-
responding bit is ‘1’. For example, Figure 3 shows how a
21-bit string is visualized as an image with three 7-segment
groups. The function code maps a bitstring to a multisets
over Σ; e.g., code of the bitstring in Figure 3 yields {2, 2}.
In SVAPs, the images are created by mapping each bit to
a segment; and a group of adjacent segments may display
a symbol. We call each such group where a symbol can be
displayed a position. Multiple positions may overlap with
each other. The number of positions is considered a security
parameter of an SVAP. Note that overlaying one transparent
image on top of the other corresponds to the bit-by-bit ‘or’
operation of the bitstrings.
In PassWindow, Σ = {P, 0, 2, 3, . . . , 9}, and their visual rep-
resentation is given in Figure 2. The letter “P” is used to
warn users about the upcoming symbols. The digit “1” is not
used because it is shown when just 2 out of the 7 segments
are on, and this can leak a signiﬁcant amount of information
and also imposes restrictions on the set of valid challenges
and keys.
SVAPs. An SVAP AV is a tuple (cid:104)PV, α, λ, keyGen,
challengeGen, response(cid:105) in which PV states the SVAP primitive
the protocol is based on, α denotes the number of rounds,
i.e., the number of challenge frames that are shown to the
user during an authentication session, λ denotes the security
parameter, and the other components are explained below.
The function keyGen : 1λ → {0, 1}p(λ) takes as input the
security parameter λ and generates a secret key x of length
p(λ). For PassWindow, the security parameter λ speciﬁes the
number of positions that a digit can be shown. Moreover,
two adjacent positions share a common vertical line. Thus,
a frame of λ positions consist of p(λ) = 5λ + 2 segments.
Figure 4 gives us an example of PassWindow with λ = 8.
The function challengeGen takes as input a key x, and re-
turns a sequence of α challenges frames y = (cid:104)y1, y2, . . . , yα(cid:105).
Challenges are represented in bitstrings.
The function response deﬁnes what are considered as valid
responses when given a key x and a challenge y. Any
response r in the set of valid responses will be accepted.
In Figure 4, the response function will return the response
r = 8596.
SVAP Authentication Process. An SVAP is used in the
following way. There are two stakeholders, namely, the
server (denoted by Server) and the user who wants to au-
thenticate herself to Server (denoted by User). The inter-
action proceeds as follows.
[Initialization.]
• Server chooses an SVAP.
[User registration. (Over a secure channel.)]
• User sends name u to Server.
• Server generates a secret visual key x using the keyGen
function, x $← keyGen(1λ).
• Server stores (cid:104)u, x(cid:105) and sends the image image(x)
(likely in the form of a transparency) to User.
[User authentication.]
• User sends name u to Server.
• Server looks up (cid:104)u, x(cid:105), generates challenge frames
y $← challengeGen(x), and sends the following chal-
lenge frames image(y1),. . . , image(yα) to User.
• User overlays the key transparency on top of each of
the challenge images, identiﬁes the symbols di’s, com-
putes the response r, and sends r to Server.
• Server accepts the user’s response and successfully
completes the authentication process if and only if