You can find that tool here
Note that this program does not run in kernel land, so I’d expect better results with the WinDbg 
command, but it does its job to list some ALPC ports used by various processes. By iterating over 
all processes that we have access to, we can also calculate some basic stats about ALPC usage, as 
shown above. These numbers are not 100% accurate, but with - on average - around 14 ALPC 
communication port handles used per process we can definitely conclude that ALPC is used quite 
frequently within Windows.
Once you identify a process that sounds like an interesting target WinDbg can be used again to 
dig deeper …
Use Event Tracing For Windows
Although ALPC is undocumented a few ALPCs events are exposed as Windows events that can be 
captured through Event Tracing for Windows (ETW). One of the tools that helps with ALPC events 
is ProcMonXv2 by zodiacon.
After a few seconds of filtering for the five exposed ALPC events we get over 1000 events, another 
indication that ALPC is used quite frequently. But apart from that there is not much that ETW can 
offer in terms of insights into the ALPC communication channels, but anyhow, it did what it was 
intended to do: Identify ALPC targets.
Impersonation and Non-Impersonation
As with the previous post of the series (see here & here) one interesting attack vector is 
impersonation of another party. 
As last time, I’m not going to cover Impersonation again, but you’ll find all the explanation that you’ll 
need in the in the Impersonation section of the Named Pipe Post. 
For ALPC communication the impersonation routines are bound to messages, which means that 
both client and server (aka. each communicating party) can impersonate the user on the other 
side. However, in order to allow for impersonation the impersonated communication partner has 
to allow to for impersonation to happen AND the impersonating communication partner needs to 
hold the SeImpersonate privilege (it’s still a secured communication channel, right?)… 
Looking at the code there seem to be two options to fulfil the first condition, which is to allow 
being impersonated:
The first option: Through the PortAttributes , e.g. like this:
The second option: Through the ALPC_MESSAGE_SECURITY_ATTRIBUTE  message attribute
If you’re not super familiar with VC++/ALPC code, these snippets might not tell you anything, which is 
totally fine. The point here is: In theory there are two options to specify that you allow impersonation. 
However, there is a catch:
If the server (the one with the connection port handle) wants to impersonate a client then 
impersonation is allowed if the client specified EITHER the first option OR the second (or 
both, but one option is sufficient).
However if the client wants to impersonate the server, then the server has to provide the 
2nd option. In other words: The server has to send the ALPC_MESSAGE_SECURITY_ATTRIBUTE  
to allow the client to impersonate the server.
I’ve looked at both routes: A server impersonating a client and a client impersonating a server. 
My first path was finding clients attempting to connect to a server port that does not exist in order 
to check for impersonation conditions. I tried various methods, but so far I haven’t figured a great 
way to identify such clients. I managed to use breakpoints in the kernel to manually spot some 
cases, but so far couldn’t find any interesting ones that would allow for client impersonation. 
Below is an example of the “ApplicationFrameHost.exe” trying to connect to an ALPC port that 
does not exist, which I could catch with my sample server, however, the process does not allow 
impersonation (and the application runs as my current user)…
Not a successful impersonation attempt, but at least it proves the idea.
// QOS
SecurityQos.ImpersonationLevel = SecurityImpersonation;
SecurityQos.ContextTrackingMode = SECURITY_STATIC_TRACKING;
SecurityQos.EffectiveOnly = 0;
SecurityQos.Length = sizeof(SecurityQos);
// ALPC Port Attributs
PortAttributes.SecurityQos = SecurityQos;
PortAttributes.Flags = ALPC_PORTFLG_ALLOWIMPERSONATION;
pMsgAttrSend = setup_sample_message_attributes(hSrvCommPort, NULL, 
ALPC_MESSAGE_SECURITY_ATTRIBUTE); // setup security attribute
pMsgAttrSend->ValidAttributes |= ALPC_MESSAGE_SECURITY_ATTRIBUTE; // specify it 
to be valid for the next message
NtAlpcSendWaitReceivePort(...) // send the message
Onto the other path: I located a bunch of ALPC connection ports using Get-AccessibleAlpcPort as 
shown previously and instructed my ALPC client to connect to these in order to verify whether 
these a) allow me to connect, b) send me any actual message back and c) send impersonation 
message attributes along with a message. For all of the ALPC connection ports I checked at best I 
got some short initialization message with an ALPC_MESSAGE_CONTEXT_ATTRIBUTE back, which is 
not useful for impersonation, but at least once again it showcases the idea here:
Server Non-Impersonation
In the RPC Part of the series I mentioned that it could also be interesting to connect to a server, 
that does use impersonation to change the security context of its thread to the security context of 
the calling client, but does not check if the impersonation succeeds or fails. In such a scenario the 
server might be tricked into executing tasks with its own - potentially elevated - security context. 
As detailed in the post about RPC, finding such occasions comes down to a case-by-base analysis 
of a specific ALPC server process you’re looking at. What you need for this is:
A server process opening an ALPC port that your client can connect to
The server has to accept connection messages and must attempt to impersonate the server
The server must not check if the impersonation succeeds or fails
(For relevant cases the server must run in a different security context then your client, aka. 
different user or different integrity level)
As of now I can’t think of a good way of automating or semi-automating the process of finding 
such targets. The only option that comes to mind is finding ALPC connection ports and reversing 
the hosting processes. 
I’ll get this post updated if I stumble across anything interesting in this direction, but for the main part I 
wanted to re-iterate the attack path of failed impersonation attempts.
Unfreed Message Objects
As mentioned in the ALPC Message Attributes section there are several message attributes that a 
client or server can send along with a message. One of these is the ALPC_DATA_VIEW_ATTR attribute 
that can be used to send information about a mapped view to the other communication party. 
To recall: This could for example be used to store larger messages or data in a shared view and 
send a handle to that shared view to the other party instead of using the double-buffer messaging 
mechanism to copy data from one memory space into another. 
The interesting bit here is that a shared view (or section as its called in Windows) is mapped into 
the process space of the receiver when being referenced in an ALPC_DATA_VIEW_ATTR attribute. 
The receiver could then do something with this section (if they are aware of it being mapped), but 
in the end the receiver of the message has to ensure that a mapped view is freed from its own 
memory space, and this requires a certain number of steps, which might not be followed 
correctly. If a receiver fails to free a mapped view, e.g. because it never expected to receive a view 
in the first place, the sender can send more and more views with arbitrary data to fill the 
receiver’s memory space with views of arbitrary data, which comes down to a Heap Spray attack.
I only learned about this ALPC attack vector by (once again) listening to Alex Ionescu’s SyScan 
ALPC Talk and I think there is no way to better phrase and showcase how this attack vector works 
then he does in this talk, so I’m not going to copy his content and words and just point you to 
minute 32 of his talk, where he starts to explain the attack. Also you want to see minute 53 of his 
talk for a demo of his heap spray attack.
https://www.youtube.com/embed/UNpL5csYC1E?start=3180
The same logics applies with other ALPC message attributes, for example with handles that are 
send in ALPC_MESSAGE_HANDLE_INFORMATION via the ALPC handle attribute.
Finding vulnerable targets for this type of attacks is - once again - a case-by-case investigative 
process, where one has to:
Find processes (of interest) using ALPC communication
Identify how a target process handles ALPC message attributes and especially if ALPC 
message attributes are freed
Get creative about options to abuse non-freed resources, where the obvious PoC option 
would be to exhaust process memory space
Of course, another valid approach would be to pick a target and just flood it with views (as an 
example) to check if the result is a lot of shared memory regions being allocated within the 
target’s address space. A useful tool to inspect the memory regions of a process is VMMap from 
the Sysinternals suite, which is what I’ve used as a PoC below. 
As an example I’ve flooded my ALPC sample server with 20kb views as shown below:
This does work because I did not bother to make any effort to free any allocated attributes in my 
sample ALPC server. 
I’ve also randomly picked a few - like four or five - of Microsoft’s ALPC processes (that I identified 
using the above shown techniques), but the ones I picked do not seem to make the same mistake. 
Honestly, it might be valuable to check more processes for this, but as of know I have no use for 
this kind of bug other than crashing a process, which - if critical enough - might crash the OS as 
well (Denial of Service).
Interesting Side note: 
In his talk Alex Ionescu mentions that the Windows Memory Manager allocates memory regions 
on 64kb boundaries, which means that whenever you allocate memory the Memory Manager 
places this memory at the start of the next available 64kb block. Which allows you, as an attacker, 
to create and map views of arbitrary size (preferably smaller than 64kb to make the memory 
exhaustion efficient) and the OS will map the view in the server’s memory and mark 64kb-
YourViewSize as unusable memory, because it needs to align all memory allocation to 64kb 
boundaries. You want to see minute 54 of Alex’s talk to get a visual and verbal explanation of this 
effect. 
Raymond Chen explains the reasoning behind the 64kb granularity here.
At the end of the day memory exhaustion attacks are of course not the only viable option to use a 
memory/heap spray primitive, which people smarter than me can turn into a exploit path…
Conclousion
ALPC is undocumented and quite complex, but as a motivational benefit: Vulnerabilities inside of 
ALPC can become very powerful as ALPC is ubiquitous within the Windows OS, all of the built-in 
high privileged processes use ALPC and due to its communication architecture it is an attractive 
target even from a sandbox perspective.
There is much more to ALPC than I have covered in this post. Potentially one could write an entire 
book about ALPC, but I hope to have at least touched the basics to get you started in getting 
interested in ALPC.
To get a first “Where and how much ALPC is in my PC”-impression I recommend starting 
ProcMonXv2 (by zodiacon) on your host to see thousands of ALPC events firing in a few seconds.
To continue from there you might find my ALPC client and server code useful to play around with 
ALPC processes and to identify & exploit vulnerabilities within ALPC. If you find yourself coding 
and/or investigating ALPC make sure to check out the reference section for input on how others 
dealt with ALPC.
Finally as a last word and to conclude my recommendation from the beginning: If you feel like you 
could hear another voice & perspective on ALPC, I highly recommend to grab another beverage 
and an enjoy the following hour of Alex Ionescu talk about LPC, RPC and ALPC:
https://www.youtube.com/embed/UNpL5csYC1E
Appendix A: The use of connection and
communication ports
When looking into ALPC I initially thought that a server listens on its communication port, which 
it receives when accepting a client connection via NtAlpcConnectPort. This would have made 
sense, since it’s called communication port. However, listening for incoming messages on the 
server’s communication port resulted in a blocking call to NtAlpcSendWaitReceivePort that never 
came back with a message. 
So my assumption about the server’s ALPC communication port must have been wrong, which 
puzzled me, since the client on the other side does get messages on his communication port. I 
hung on this question for a while until I reached out to Alex Ionescu to ask him about this and I 
learned that my assumption was indeed incorrect, but to be more precise it has become incorrect 
over time: Alex explained to me that the idea I had (server listens and sends messages on its 
communication port) was the way that LPC (the predecessor of ALPC) was designed to work. This 
design however would force you to listen on a growing number of communication ports with each 
new client the server accepts. Imagine a server has 100 clients talking to it, then the server needs 
to listen on 100 communication ports to get client messages, which often resulted in creating 100 
threads, where each thread would communicate with a different client. This was deemed 
inefficient and a much more efficient solution was to have a single thread listening (and sending) 
on the server’s connection port, where all messages are being send to this connection port. 
That in turn means: A server accepts a client connection, receives a handle to a client’s 
communication port, but still uses the server’s connection port handle in calls to 
NtAlpcSendWaitReceivePort in order to send and receive messages from all connected clients.
Does that mean that the server’s communication port is obsolete then (and this was my follow up 
question to Alex)? His answer, once again, made perfect sense and cleared my understanding of 
ALPC: A server’s per client communication port is used internally by the OS to tie a message, send 
by a specific client, to this client’s specific communication port. This allows the OS to tie a special 
context structure to each client communication port that can be used to identify the client. This 
special context structure is the PortContext, which can be any arbitrary structure, that can be 
passed to NtAlpcAcceptConnectPort and which can later be extracted from the any message with 
the ALPC_CONTEXT_ATTR message attribute. 
That means: When a server listens on its connection port it receives messages from all clients, but 
if it wants to know which client send the message, the server can get the port context structure 
(through the ALPC_CONTEXT_ATTR message attribute), that it assigned to this client upon accepting 
the connection, and the OS will fetch that context structure from the internally preserved client 
communication port.
This far we can conclude that the server’s per-client communication port is still important for the 
OS and still has its place and role in the ALPC communication structure. That does, however, not 
answer the question why the server would actually need a handle to each-clients communication 
port (because the client’s PortContext can be extracted from a message, which is received by using 
the connection port handle). 
The answer here is impersonation. When the server wants to impersonate a client it needs to 
pass the client’s communication port to NtAlpcImpersonateClientOfPort. The reason for this is 
that the security context information that are needed to perform the impersonation are bound (if 
allowed by the client) to the client’s communication port. It would make no sense to attach these 
information to the connection port, because all clients use this connection port, whereas each 
client has it own unique communication port for each server. 
Therefore: If you want to impersonate your clients you want to keep each client’s communication 
port handle.
References
Below are a few resources that I found helpful to learn and dig into ALPC.
Reference Projects that make use of ALPC
https://github.com/microsoft/terminal/blob/main/src/interactivity/onecore/ConIoSrvComm.c
pp
https://github.com/DownWithUp/ALPC-Example
https://github.com/DynamoRIO/drmemory
https://github.com/hakril/PythonForWindows
https://docs.rs/
https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools
https://processhacker.sourceforge.io/doc/ntlpcapi_8h.html
https://github.com/bnagy/w32
https://github.com/taviso/ctftool
References to ALPC implementation details
https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools/blob/main/NtApi
DotNet/NtAlpcNative.cs
https://processhacker.sourceforge.io/doc/ntlpcapi_8h.html
https://github.com/hakril/PythonForWindows/blob/master/windows/generated_def/windef.p
y
Talks about ALPC
Youtube: SyScan’14 Singapore: All About The Rpc, Lrpc, Alpc, And Lpc In Your Pc By Alex 
Ionescu
Slides: SyScan’14 Singapore: All About The Rpc, Lrpc, Alpc, And Lpc In Your Pc By Alex Ionescu
Youtube: Hack.lu 2017 A view into ALPC-RPC by Clement Rouault and Thomas Imbert
Slides: ALPC Fuzzing Toolkit
LPC References:
https://github.com/avalon1610/LPC