原文链接：[JSON hijacking for the modern
web](http://blog.portswigger.net/2016/11/json-hijacking-for-modern-web.html)
原作者： **[Gareth Heyes](https://www.blogger.com/profile/10856178524811553475)**
译： **Holic (知道创宇404安全实验室)**
Benjamin Dumke-von der Ehe 发现了一种有趣的[跨域窃取数据](http://balpha.de/2013/02/plain-text-considered-harmful-a-cross-domain-exploit/)的方法。使用[JS
代理](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Proxy)，他能够创建一个
handler，可以窃取未定义的 JavaScript 变量。这个问题在 FireFox 浏览器中似乎被修复了，但是我发现了一种对 Edge
进行攻击的新方式。虽然 Edge 好像是阻止了分配 `window.__proto__` 的行为，但他们忘了 Object.setPrototypeOf
这个方法。利用这个方法，我们可以使用代理过的 `__proto__` 来覆盖 `__proto__` 属性。就像这样：
#### [Edge PoC stealing undefined variable](http://portswigger-labs.net/jsproxy/edge_proxy_undefined_variable_read/)
如果你在跨域脚本中包含 stealme，你将会看到浏览器弹出了该值的警告，即它是一个未定义的变量。
经过进一步的测试，我发现通过覆盖`__proto __.__ proto__`可以实现相同的效果，在 Edge 浏览器上对应的是 [object
EventTargetPrototype] 。
#### [Edge PoC stealing undefined variable method 2 ](http://portswigger-labs.net/jsproxy/edge_proxy_undefined_variable_read/index2.html)
很好，我们已经能跨域窃取数据了，但我们还能做什么呢？所有主流浏览器都支持脚本的 charset 属性。而我发现 UTF-16BE
字符集尤其有意思。UTF-16BE 是一个多字节编码的字符集，那么实际上是两个字节组成了一个字符。例如你的脚本以 `["` 开头，它将被认为是 0x5b22
而不是 0x5b 0x22。而 0x5b22 恰好是一个有效的 JavaScript 变量 =) 你能看懂这是怎么回事吗？
假设我们有一个来自 Web 服务器的响应，返回一个数组文本，我们便可以控制它的一部分。我们可以使用 UTF-16BE 字符集使数组文本成为未定义的
JavaScript 变量，并使用上面的技术窃取到它。唯一要注意的是，组成的字符必须形成一个有效的 JavaScript 变量。
例如，让我们看看以下响应：
    ["supersecret","input here"]
为了窃取到 supersecret，我们需要注入一个空字符，后面带着两个 a's ，出于某些原因，Edge 不会将其视为
UTF-16BE，除非它具有这些注入的字符。或许它在进行一些字符编码的扫描，亦或是截断响应和 NULL 后面的字符在 Edge 上不是一个有效的 JS
变量。这点我不确定，但是在我的测试中，似乎需要一个 NULL 与其他一些填充字符。参见下面的例子：
    aa"] -->
#### [Edge PoC stealing JSON feeds](http://portswigger-labs.net/utf-16be/edge_steal_json_data_with_proxy/index2.php)
所以我们像以前一样代理 `__proto__` 属性，使用 UTF-16BE 编码包含此脚本，而且响应的字符文本中包含了一个 NULL，后面跟着两个
a's。然后我解码了移八位编码的 UTF-16BE ，获得第一个字节；并且通过按位“与”操作获得了第二个字节。结果是一个警告的弹出窗口，
`["supersecret","`。如你所见，Edge 似乎在 NULL 后截断了响应。请注意这种攻击是相当受限的，因为许多字符组合不会产生有效的
JavaScript 变量。然而，窃取少量数据可能是有用的。
### 在 Chrome 中窃取 JSON 推送
情况变得更糟了。Chrome 更加开放，有更多的异域字符编码。你不需要控制任何响应，Chrome
就可以使用该字符编码。唯一的要求便是之前所述，组合在一起的字符产生了一个有效的 JavaScript
变量。为了利用这个“特征”，我们需要另一个未定义的变量泄漏。一眼看上去 Chrome 似乎阻止了覆盖 `__proto__` 的行为，但是它却忘记了
`__proto__` 的深度。
**注意: 这一点已经在 Chrome 54 版本被修复**
[Chrome PoC stealing JSON feeds works in version 53](http://portswigger-labs.net/utf-16be/chrome_steal_json_data_with_proxy/index2.html)
我们在 `__proto__` 链中深入 5
层，并用我们的代理覆盖它，接下来的事情就很有意思了。尽管命名参数不包含我们未定义的变量，但是函数的调用者是包含的！它返回了一个带有我们变量名的函数！显然它用
UTF-16BE 编码了，看起来像是这样子的：