## Page 670
Return a list ans of heights. Each height ans [i] represents the current highest height of any
 suoasod a paasadau saenbs uddop ae addop aeu am aenbs
positions[1], ..., positions[i]]
Example 1:
Input: [[1, 2], [2, 3], [6, 1]]
Output: [2, 5, 5]
Exp1anation:
After the first drop of positions [0] = [1, 2] : _aa _aa -------] The maximum height of any
Square is 2.
soo
Jaljews aun jo do uo sAeas ajenbs jaue au1 's s) auenbs Aue jo suglau wunwjxew au1 ---
square despite where its center of gravity is, because squares are infinitely sticky on their bottom
edge.
----= The maximum height of any square is still 5. Thus, we return an answer of [2, 5, 5]-
Example 2:
Input: [[100, 100], [200, 100]]
Output: [100, 100]
Explanation: Adjacent squares don't get stuck prematurely - only their bottom
edge can stick to surfaces.
Note:
●1 >1
if nums[mid] == target {
return mid
}else if nums[mid]> target {
high = mid - 1
}else{
1ow = mid + 1
1
return -1
705.DesignHashSet
题目
Design a HashSet without using any built-in hash table libraries.
To be specific, your design should include these functions:
●add(value) : Insert a value into the HashSet.
● contains (value) : Return whether the value exists in the HashSet or not.
● remove (value) : Remove a value in the HashSet. If the value does not exist in the HashSet,
do nothing.
Example:
---
## Page 675
MyHashSet hashSet = new MyHashSet();
hashset.add(1) ;
hashSet.add(2) ;
hashSet.contains(1) ;
// returns true
hashset.contains(3);
// returns false (not found)
hashset.add(2);
hashset.contains(2) ;
// returns true
hashset.remove (2) ;
hashset.contains(2) ;
// returns false (already removed)
Note:
●All values will be in the range of [0, 10ooooo]]
● The number of operations will be in the range of [1, 1ooo0] .
● Please do not use the built-in HashSet library.
题目大意
不使用任何内建的哈希表库设计一个哈希集合具体地说，你的设计应该包含以下的功能：
·add（value)：向哈希集合中插入一个值。
·contains(value)：返回哈希集合中是否存在这个值。
·remove(value)：将给定值从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。
注意：
●所有的值都在[1，1000000]的范围内。
·操作的总数目在[1，10000]范围内。
·不要使用内建的哈希集合库。
解题思路
·简单题，设计一个hashset的数据结构，要求有
add(value)，contains(value)，remove（value)，这3个方法。
代码
package leetcode
type MyHashSet struct {
data []boo]
/* Initialize your data structure here.*/
func Constructor705() MyHashSet {
return MyHashSet{
data: make([]bool, 1000001),
---
## Page 676
func（this *MyHashSet) Add(key int){
this.data[key]= true
}
func （this *MyHashSet) Remove(key int){
this.data[key] = false
}
/** Returns true if this set contains the specified element */
func (this *MyHashSet) Contains(key int) bool {
return this.data [key]
* Your MyHashset object will be instantiated and called as such:
obj ：= ConstructorO;
:(Ax)pp(qo=
*obj.Remove(key);
*param_3 := obj.Contains(key);
*/
706.DesignHashMap
题目
Design a HashMap without using any built-in hash table libraries.
To be specific, your design should include these functions:
●put(key, value) : Insert a (key, value) pair into the HashMap. If the value already exists in
the HashMap, update the value.
● get(key) : Returns the value to which the specified key is mapped, or -1 if this map contains
no mapping for the key.
● remove (key) : Remove the mapping for the value key if this map contains the mapping for
the key.
Example:
---
## Page 677
 ()dewysehAw mau = dewysey dewysew
hashMap.put(1, 1);
hashMap.put(2, 2);
hashMap-get(1) ;
//returns 1
hashMap get(3);
// returns -1 (not found)
hashMap.put(2, 1);
// update the existing value
hashMap-get(2) :
// returns 1
hashMap.remove (2) ;
// remove the mapping for 2
hashMap-get(2) ;
// returns -1 (not found)
Note:
●All keys and values will be in the range of [0, 1o0ooo0] -
● The number of operations will be in the range of [1, 1oooo] .
● Please do not use the built-in HashMap library.
题目大意
不使用任何内建的哈希表库设计一个哈希映射具体地说，你的设计应该包含以下的功能：
·put(key，value)：向哈希映射中插入（键，值）的数值对。如果键对应的值已经存在，更新这个值。
·get(key)：返回给定的键所对应的值，如果映射中不包含这个键，返回-1。
·remove(key)：如果映射中存在这个键，删除这个数值对。
注意：
●所有的值都在[1，1000000]的范围内。
·操作的总数目在[1，10000]范围内。
·不要使用内建的哈希库。
解题思路
·简单题，设计一个hashmap的数据结构，要求有put（key，
value)，get（key)，remove（key)，这3个方法。设计一个map主要需要处理哈希冲突，一
般都是链表法解决冲突。
代码
package leetcode
const Len int = 100000
type MyHashMap struct {
content [Len]*HashNode
type HashNode struct {
keyint
---
## Page 678
int
next *HashNode
func (N *HashNode) Put(key int, value int) {
if N.key == key {
N.val = value
return
if N.next == nil {
N.next = &HashNode{key, value, ni1}
return
N.next.Put (key, value)
func (N *HashNode) Get(key int) int {
if n.key == key {
return N.val
if N.next == nil {
return -1
3
return N.next.Get(key)
}
func (N *HashNode) Remove(key int) *HashNode {
if N.key == key {
p := N.next
N.next = ni1
return p
if N.next != nil {
return N.next.Remove (key)
return ni1
/*Initialize your data structure here.*/
func Constructor706() MyHashMap {
return MyHashMap{}
}
/t value will always be non-negative. */
func (this *MyHashMap) Put(key int, value int) {
node := this.content[this.Hash(key)]
if node == nil {
this.content[this.Hash(key)] = &HashNode{key: key, val: value, next: ni1}
return
---
## Page 679
node.Put(key, value)
/t Returns the value to which the specified key is mapped, or -1 if this map
contains no mapping for the key */
func (this *MyHashMap) Get(key int) int {
HashNode := this .content[this.Hash(key)]
if HashNode == ni1 {
return -1
return HashNode.Get(key)
/ Removes the mapping of the specified value key if this map contains a
mapping for the key */
func (this *MyHashMap) Remove(key int){
HashNode := this .content[this.Hash(key)]
if HashNode == ni1 {
return
this . content [thi s .Hash(key)]= HashNode .Remove (key)
}
func (this *MyHashMap) Hash(value int) int {
return value % Len
/**
*obj = constructorO;
* obj .put(key,value);
*param_2 := obj.Get(key);
*obj.Remove(key);
*/
707. Design Linked List
题目
Design your implementation of the linked list. You can choose to use the singly linked list or the
dloubly linked list. A node in a singly linked list should have two attributes: val and next. val is the
value of the current node, and next is a pointer/reference to the next node. If you want to use the
doubly linked list, you will need one more attribute prev to indicate the previous node in the
linked list. Assume all nodes in the linked list are O-indlexed.
Implement these functions in your linked list class:
---
## Page 680
● get(index) : Get the value of the index-th node in the linked list. If the index is invalid, return
-1.
● addAtHead(val) : Add a node of value val before the first element of the linked list. After the
insertion, the new node will be the first node of the linked list.
● addAtTail(val) : Append a node of value val to the last element of the linked list.
● addAtlndex(indlex, val) : Add a node of value val before the index-th node in the linked list. If
indlex equals to the length of linked list, the node will be appendled to the end of linked list. If
 index is greater than the length, the node will not be inserted.
● dleleteAtlndlex(index) : Delete the index-th node in the linked list, if the index is valid.