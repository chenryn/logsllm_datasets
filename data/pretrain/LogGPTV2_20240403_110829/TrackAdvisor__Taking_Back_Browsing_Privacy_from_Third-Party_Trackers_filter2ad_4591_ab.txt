(a) Expiration time
(b) Length of value
Fig. 1. Diﬀerence between tracker and non-tracker cookies
of tracker cookies have a lifetime of a single day or less, at least 80 % of non-
tracker cookies have such short lifetime. Furthermore, Fig. 1(b) shows that the
length of the value is at least 35 characters for 80 % of the tracker cookies, while
80 % of the non-tracker cookies have values that are shorter than 35 characters.
The next important question to answer is, then, how we can exploit these
characteristics in an eﬀort to correctly classify HTTP requests as either going to
third-party trackers and carrying user-identiﬁable information or harmless and
carrying no sensitive information.
B. TrackAdvisor: Identifying trackers, one HTTP request at a time.
We present TrackAdvisor, our solution for the problem of identifying third-party
trackers. TrackAdvisor looks at all of the cookies carried by each outgoing HTTP
request, extract collective statistics, and performs classiﬁcation to determine
whether it is heading for a tracker.
TrackAdvisor is a supervised Machine Learning-based application that we
envision to reside inside the browser, where it can inspect each outgoing HTTP
request and inform the user if the HTTP request carries information that may
be able to uniquely identify the user. TrackAdvisor takes as input the cook-
ies exchanged between the browser and the remote websites and identiﬁes the
websites that are third-party trackers.
Feature selection: First, we deﬁne CookieJar(A, B) as the group of all third-
party cookies exchanged between the host A and the remote website B. Note
that we exclude the Session cookies because Session cookies are created during
a browsing session and are destroyed once the browser is closed. Because of
their short-lived nature, Session cookies are unlikely to be used as a tracking
mechanism.
Instead of looking at the cookies in CookieJar(A, B) individually, TrackAd-
visor looks at CookieJar(A, B) in its entirety, extracts relevant statistics, and
performs classiﬁcation.
We started with considering a large number of features, including maximum
Lifetime, minimum ValueLength, mean ValueLength, maximum ValueLength, as
well as others. This set of features is then reduced to only three by the Recursive
Feature Elimination (RFE) functionality of WEKA [19] which, at a high level,
recommends a subset of features that achieves the best accuracy. In our case,
the ﬁnal three features are:
282
T.-C. Li et al.
(a) Minimum lifetime: Lmin
A,B = minc [Lifetime(c)]. This feature is selected because
trackers, as discussed earlier, tracker cookies tend to have longer lifetime than
non-tracker cookies.
(c) Augmented Lifetime: Laug
(b) Number of third-party cookies in CookieJar(A, B): NA,B. This feature is
selected because of the trackers’ tendency to utilize more cookies than benign
third-parties in order to record as much information about the user as pos-
sible.
c [ValueLength(c) × Lifetime(c)]. The Aug-
mented Lifetime captures at once captures two important characteristics
of tracker cookies: long Lifetime and long ValueLength, and it is also cru-
cial to future-prooﬁng TrackAdvisor’s performance against two possible
evasive tactics from third-party trackers: cookie chunking and lifetime
reduction. We will discuss the two techniques, as well as how robust Track-
Advisor is against them at the end of Sect. 4.
A,B =
(cid:2)
The steps that TrackAdvisor executes are:
1. Retain only third-party HTTP requests from the browser. A third-party
HTTP request is one that is sent toward an URL that does not share the same
hostname as the website the user intentionally visits. TrackAdvisor achieves
this by looking at the referrer of the request and ignoring requests where the
hostnames in the referrer and URL ﬁelds are the same.
2. For each CookieJar(A, B) representing an HTTP request sent by host A to
website B, TrackAdvisor calculates three features of CookieJar(A, B), that
we described above: (a) Lmin
3. Use a binary classiﬁer to classify the tuple (cid:2)Laug
A,B, (b) NA,B, and (c) Laug
A,B.
A,B, NA,B(cid:3).
A,B, Lmin
A positive output from the classiﬁer means that the tuple belongs in an inter-
action with a third-party tracker and a negative otherwise. We will discuss
how to create the classiﬁer from training data in Sect. 4.
4. If the module returns a positive value, we label B as a third-party tracker
and add it to a list that will be presented to the user later.
4 Experiments and Evaluation
In this section we will (a) describe our data collection and preliminary labeling
processes and (b) compare the performance of Microsoft’s Tracking Protection
Lists against that of TrackAdvisor.
A. Data Collection. Our dataset is created by visiting the landing pages
Alexa’s Top 10K Global list [2] during the month of July of 2012. We collected
our data using FourthParty [4], a Firefox extension that collects data in the
background as the user browses the Web. The data that we collected are: (a)
the header of each HTTP request, (b) the header of each HTTP response, and
(c) the cookie log associated with each request and response. We used the
automation framework Selenium [9] with FourthParty installed to collect 563,031
HTTP requests and 99,397 cookies. Of all 563,031 requests, 202,556 were sent to
TrackAdvisor: Taking Back Browsing Privacy from Third-Party Trackers
283
third-party websites and 78,213 contain cookies. Out of 99,397 cookies, 22,270
cookies were sent to third-party websites.
B. Creating training and testing data sets. From the set of all HTTP
requests to third-party websites, we created a training and a testing data-set as
follows:
– Dtrain: includes 500 randomly chosen requests such that roughly half of them
were dispatched to third-party trackers and half were meant to retrieve third-
party content and containing no tracking information.
– Dtest: includes 500 HTTP requests that were randomly chosen in a similar
fashion to the ones in Dtrain.
Dtrain and Dtest are mutually exclusive. The former is used to train Track-
Advisor and the latter will be used for testing both TrackAdvisor and Tracking
Protection Lists.
To establish the ground truth, we label the websites in Dtrain and Dtest
(1,000 in total) as either third-party trackers or benign third-party websites using
extensive and careful manual evaluation. In our evaluation, we label a website
as a third-party tracker by combining the information gained from the three
following processes: (a) a manual inspection the website, (b) a consultation with
multiple black lists speciﬁcally created for third-party tracker, and (c) a careful
inspection of cookie properties. To label something as athird-party tracker, we
require signiﬁcant supporting evidence to that eﬀect. We argue that this method
is essentially the same used by the contributors to third-party tracking lists.
For transparency, we will make our two labelled sets available to the research
community.
C. Reference: Microsoft’s Tracking Protection List. We compare our
approach against Tracking Protection Lists, which is a black list-based compo-
nent that is used in Microsoft’s Internet Explorer. We selected Tracking Protec-
tion Lists because: (a) it uses the same popular black lists (FanBoy, EasyList,
EasyPrivacy, etc.) that empower AdBlock Plus and (b) it has been shown that
the a combination of the popular black lists achieved comparable performance
to Ghostery’s [15].
D. Creating a classiﬁer for TrackAdvisor from Dtrain. Recall from the
beginning of this section that we have constructed a training dataset and a
testing dataset called Dtrain and Dtest. Also recall that each request in Dtrain
is represented by a tuple (cid:2)Laug
A,B, NA,B(cid:3). Since each tuple is labeled, we
are able to use the WEKA Machine Learning suite [19] to build classiﬁers. The
algorithm that we picked from the suite is Support Vector Machine because it
oﬀers the best performance in terms of Precision and Recall, where Pr = TP /
(TP + FP) and Re = TP / (TP + FN). TP is the number of True Positives, FP
the number of False Positives, and FN the number of False Negatives.
A,B, Lmin
284
T.-C. Li et al.
Before we start the testing, we examine the sensitivity of our approach to the
training input by performing a ten-fold cross-validation on Dtrain. The assess-
ment yields a combined Precision of 0.998 and Recall of 0.998 (one FN and one
FP). We conclude that our approach is robust to the training data.
(a)
(b)
Fig. 2. Classiﬁcation results for HTTP requests (a) and domains (b)
E. Evaluation of classiﬁcation on Dtest. First, we check the URLs of Dtest
against Tracking Protection Lists. As shown in Fig. 2(a), TPL achieves a Pre-
cision and Recall of 96.3 % and 72.2 % respectively (13 FPs and 134 FNs).
In contrast, TrackAdvisor achieves perfect Recall and nearly perfect Precision
(0 FPs and 2 FNs).
One possible reason why TPL has so many False Negatives could be that
TPL is better tuned to recognize the trackers more relatively well-known to the
community, as it relies signiﬁcantly on user reports to populate the list.
F. Possible evasive tactics from third-party trackers: An inquisitive
reader may ask why we simply did not use only ValueLength and Lifetime as
features for the classiﬁer even though as we have shown in Fig. 1 that the Value-
Lengths and Lifetimes of non-tracker cookies are diﬀerent from those of tracker
cookies. The reason is that a classiﬁer built from only ValueLength and Lifetime
is ineﬀective against two possible evasive tactics from third-party trackers:
T1. Cookie Chunking: Instead of using a single cookie that contains an iden-
tiﬁer, third-party trackers can chop it into multiple cookies with diﬀerent
names that will be combined later when the HTTP requests are processed
at the server. This way, they can reduce the lengths of the cookies and help
them avoid detection.
T2. Lifetime Reduction: Instead of setting a large value for the expiration of
the cookies, trackers can use smaller values depending on their own popu-
larity. For example, a very popular website like Google can set their cookie
lifetime to a month or even a week instead of a year because Google knows
people visit the site frequently.
We have conducted extensive experiments on the robustness of TrackAdvisor
against T1 and T2 where we (a) identify every tracker cookie in each HTTP
TrackAdvisor: Taking Back Browsing Privacy from Third-Party Trackers
285
request (in both Dtrain and Dtest) that we manually label as going to third-
party trackers, (b) either split them up according to T1 or reduce their lifetimes
according to T2, and (c) re-train our classiﬁer on Dtrain and re-test on Dtest.
We cannot describe the experiments in details due to space limitation but we
ﬁnd that TrackAdvisor’s performance is unchanged even when we execute T1
and T2.
5 The Pervasiveness of Third-Party Trackers
In this section, we quantify the extent of third-party tracking by analyzing the
Alexa Top 10 K websites. Overall, we ﬁnd a signiﬁcant presence of third-party
tracking that would be disconcerting to privacy advocates.
(A) 46 % of the Alexa Top 10 K websites have at least one third-party
tracker on them. By applying TrackAdvisor on our entire dataset, we found
that 46 % of the Alexa Top 10 K websites had at least one third-party tracker on
them. We use the term “target website” to refer to the Alexa website that was
explicitly visited by the user in each request as we explained earlier. We plot the
cumulative coverage in terms of unique target sites as a function of the number