however, these filters take place after the host and op-
erating system have enumerated the device and loaded
any device drivers. USBFILTER applies filtering at the
USB packet layer, preventing unauthorized access to in-
terfaces regardless of whether they have been approved
elsewhere. Since our system operates between the device
drivers and the USB host controller and traces packets
back to their source or destination application, USBFIL-
TER can uniquely filter access to any USB interface.
While USBFILTER working in the host operating sys-
tem directly, other USB security solutions make use of
virtualization. GoodUSB [41] leverages a QEMU-KVM
as a honeypot to analyze malicious USB devices, while
Cinch [3] separates the trusted USB host controller and
untrusted USB devices into two QEMU-KVMs, between
which a gateway is used to apply policies on USB pack-
ets. By mitigating the need for additional components
for standard operation, be believe that USBFILTER is bet-
ter suited for adoption within operating system kernels.
USBFILTER protects the host machine from malicious
USB devices, but there are solutions as well for exploring
the protection of devices from malicious hosts. USB fin-
gerprinting [6] establishes the host machine identity us-
ing USB devices, while Kells [8] protects the USB stor-
age device by attesting the host machine integrity.
Wang and Stavrou [47] suggest that a “USB firewall”
might protect against exploitation attacks but do not dis-
cuss the complexities of how such a mechanism could be
designed or implemented.
8 Conclusion
USB attacks rely on hosts automatically authorizing any
physically-attached device. Attackers can discreetly con-
nect unknown and unauthorized interfaces, causing de-
vice drivers to be automatically loaded and allowing ma-
licious devices access to the host. In this paper, we pre-
vent unauthorized devices from accessing a host with
USBFILTER, the first packet-level access control system
for USB. Through tracing each packet back to its associ-
ated process, our system can successfully block unautho-
rized interfaces and restrict access to devices by process.
With a default deny policy for new devices, administra-
tors can restrict connection of unknown devices using
granular identifiers such as serial number. Our experi-
ments test USBFILTER using a range of I/O benchmarks
and find that it introduces minimal overhead. The re-
sult is a host that is unresponsive to attacks that may try
to discreetly introduce unknown functionality via USB
while maintaining high performance.
Acknowledgements
This work is supported in part by the US National Sci-
ence Foundation under grant numbers CNS-1540217,
CNS-1540218 and CNS-1464088.
References
[1] TURNIPSCHOOL - NSA playset.
nsaplayset.org/turnipschool.
http://www.
[2] J. P. Anderson. Computer Security Technology Planning Study.
Technical Report ESD-TR-73-51, Air Force Electronic Systems
Division, 1972.
[3] S. Angel, R. S. Wahby, M. Howald, J. B. Leners, M. Spilo,
Z. Sun, A. J. Blumberg, and M. Walfish. Defending against ma-
licious peripherals. arXiv preprint arXiv:1506.01449, 2015.
[4] J. Bang, B. Yoo, and S. Lee. Secure usb bypassing tool. digital
investigation, 7:S114–S120, 2010.
[5] Basemark, Inc.
Basemark browsermark.
basemark.com/, 2015.
http://web.
[6] A. Bates, R. Leonard, H. Pruse, K. R. B. Butler, and D. Lowd.
Leveraging USB to Establish Host Identity Using Commodity
Devices.
In Proceedings of the 2014 Network and Distributed
System Security Symposium, NDSS ’14, February 2014.
[7] M. Brocker and S. Checkoway.
iseeyou: Disabling the mac-
book webcam indicator led. In 23rd USENIX Security Symposium
(USENIX Security 14), pages 337–352, 2014.
[8] K. R. B. Butler, S. E. McLaughlin, and P. D. McDaniel. Kells:
a protection framework for portable data. In Proceedings of the
26th Annual Computer Security Applications Conference, pages
231–240. ACM, 2010.
[9] A. Caudill and B. Wilson.
Phison 2251-03 (2303) Custom
Firmware & Existing Firmware Patches (BadUSB). GitHub, 26,
Sept. 2014.
[10] Compaq, Hewlett-Packard, Intel, Microsoft, NEC, and Phillips.
Universal Serial Bus Specification, Revision 2.0, April 2000.
[11] D. Diaz et al. The GNU Prolog web site. http://gprolog.
org/.
[12] S. A. Diwan, S. Perumal, and A. J. Fatah. Complete security
package for USB thumb drive. Computer Engineering and Intel-
ligent Systems, 5(8):30–37, 2014.
[13] W. Enck, P. McDaniel, and T. Jaeger. PinUP: Pinning user
files to known applications. In Computer Security Applications
Conference, 2008. ACSAC 2008. Annual, pages 55–64. ieeex-
plore.ieee.org, Dec. 2008.
[14] J. Erdfelt and D. Drake. Libusb homepage. Online, http://www.
libusb. org.
[15] N. Falliere, L. O. Murchu, and E. Chien. W32. Stuxnet Dossier.
2011.
[16] U. I. Forum. Media Agnostic Universal Serial Bus Specification,
Release 1.0a, July 2015.
[17] D. Genkin, A. Shamir, and E. Tromer. RSA key extraction via
Low-Bandwidth acoustic cryptanalysis. In Advances in Cryptol-
ogy – CRYPTO 2014, Lecture Notes in Computer Science, pages
444–461. Springer Berlin Heidelberg, 17 Aug. 2014.
428  25th USENIX Security Symposium 
USENIX Association
14
[39] The Information Assurance Mission at NSA. Defense against
Malware on Removable Media. https://www.nsa.gov/
ia/_files/factsheets/mitigation_monday_3.
pdf, 2007.
[40] The Netfilter Core Team. The Netfilter Project: Packet Mangling
for Linux 2.4. http://www.netfilter.org/, 1999.
[41] D. J. Tian, A. Bates, and K. Butler. Defending against malicious
USB firmware with GoodUSB. In Proceedings of the 31st An-
nual Computer Security Applications Conference, ACSAC 2015,
pages 261–270, New York, NY, USA, 2015. ACM.
[42] A. Tirumala, F. Qin, J. Dugan, J. Ferguson, and K. Gibbs. Iperf:
The tcp/udp bandwidth measurement tool. htt p://dast. nlanr.
net/Projects, 2005.
[43] M. Tischer, Z. Durumeric, S. Foster, S. Duan, A. Mori,
E. Bursztein, and M. Bailey. Users Really Do Plug in USB Drives
They Find. In Proceedings of the 37th IEEE Symposium on Se-
curity and Privacy (S&P ’16), San Jose, California, USA, May
2016.
[44] USB Implementers Forum.
regarding
USB security. http://www.usb.org/press/USB-IF_
Statement_on_USB_Security_FINAL.pdf.
USB-IF statement
[45] A. Vahldiek-Oberwagner, E. Elnikety, A. Mehta, D. Garg, P. Dr-
uschel, R. Rodrigues, J. Gehrke, and A. Post. Guardat: Enforcing
data policies at the storage layer. In Proceedings of the Tenth Eu-
ropean Conference on Computer Systems, page 13. ACM, 2015.
[46] J. Walter. "Flame Attacks": Briefing and Indicators of Compro-
mise. McAfee Labs Report, May 2012.
[47] Z. Wang and A. Stavrou. Exploiting Smart-phone USB Connec-
tivity for Fun and Profit. In Proceedings of the 26th Annual Com-
puter Security Applications Conference, ACSAC ’10, 2010.
[48] B. Yang, D. Feng, Y. Qin, Y. Zhang, and W. Wang. TMSUI:
A Trust Management Scheme of USB Storage Devices for In-
dustrial Control Systems. Cryptology ePrint Archive, Report
2015/022, 2015. http://eprint.iacr.org/.
[18] Hak5. Episode 709: USB Rubber Ducky Part 1. http:
//hak5.org/episodes/episode-709, 2013.
[19] Hewlett-Packard, Intel, LSI, Microsoft, NEC, Samsung, and
ST-Ericsson. Wireless Universal Serial Bus Specification 1.1,
September 2010.
[20] B. Hicks, S. Rueda, L. St.Clair, T. Jaeger, and P. McDaniel.
A Logical Specification and Analysis for SELinux MLS Policy.
ACM Trans. Inf. Syst. Secur., 13(3):26:1–26:31, July 2010.
[21] T. Hirofuchi, E. Kawai, K. Fujikawa, and H. Sunahara. USB/IP-
A peripheral bus extension for device sharing over IP network. In
Proceedings of the annual conference on USENIX Annual Tech-
nical Conference, pages 42–42, 2005.
[22] IronKey, Inc. Access Enterprise. http://www.ironkey.
com/en-US/access-enterprise/, 2015.
[23] Jeremy Moskowitz. Managing hardware restrictions via group
https://technet.microsoft.com/en-us/
policy.
magazine/2007.06.grouppolicy.aspx, 2007.
[24] A. Kivity, Y. Kamay, D. Laor, U. Lublin, and A. Liguori. kvm:
the linux virtual machine monitor. In Proceedings of the Linux
symposium, volume 1, pages 225–230, 2007.
[25] T. Kojm. Clamav, 2004.
[26] Microsoft Windows Embedded 8.1 Industry. Usb filter (in-
https://msdn.microsoft.com/en-us/
dustry 8.1).
library/dn449350(v=winembedded.82).aspx,
2014.
[27] K. Nohl and J. Lell. BadUSB–On accessories that turn evil. Black
Hat USA, 2014.
[28] D. V. Pham, M. N. Halgamuge, A. Syed, and P. Mendis. Opti-
mizing Windows Security Features to Block Malware and Hack
Tools on USB Storage Devices. In Progress in Electromagnetics
Research Symposium, 2010.
[29] PJRC. Teensy 3.1. https://www.pjrc.com/teensy/
teensy31.html, 2013.
[30] R. Russell. virtio: towards a de-facto standard for virtual i/o de-
vices. ACM SIGOPS Operating Systems Review, 42(5):95–103,
2008.
[31] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn. Design and
Implementation of a TCG-based Integrity Measurement Archi-
tecture. Proceedings of the 13th USENIX Security Symposium,
2004.
[32] SANS Institute.
Real World ARP Spoofing.
http:
//pen-testing.sans.org/resources/papers/
gcih/real-world-arp-spoofing-105411, 2003.
[33] S. Schumilo, R. Spenneberg, and H. Schwartke. Don’t trust your
USB! How to find bugs in USB device drivers. In Blackhat Eu-
rope, Oct. 2014.
[34] S. Shin and G. Gu. Conficker and Beyond: A Large-scale Em-
pirical Study. In Proceedings of the 26th Annual Computer Secu-
rity Applications Conference, ACSAC ’10, pages 151–160, New
York, NY, USA, 2010. ACM.
[35] S. Smalley, C. Vance, and W. Salamon. Implementing SELinux
as a Linux security module. NAI Labs Report, 1:43, 2001.
[36] J. Stewart. Dns cache poisoning–the next generation, 2003.
[37] Sun Microsystems,
Inc. and FSL at Stony Brook Univer-
http://filebench.sourceforge.
Filebench.
sity.
net/wiki/index.php/Main_Page, 2011.
[38] A. Tetmeyer and H. Saiedian. Security Threats and Mitigating
Risk for USB Devices. Technology and Society Magazine, IEEE,
29(4):44–49, winter 2010.
15
USENIX Association  
25th USENIX Security Symposium  429
Appendix
* lbsw - A LUM kernel module
* used to block SCSI write command within USB packets
*/
"block_scsi_write"
15
* Define the filter function
* Return 1 if this is the target packet
* Otherwise 0
*/
return 0;
return 0;
char opcode;
/* Has to be an OUT packet */
if (usb_pipein(urb->pipe))
1 /*
2
3
4
5 #include 
6 #include 
7 #include 
8
9 #define LUM_NAME
10 #define LUM_SCSI_CMD_IDX
11
12 static struct usbfilter_lum lbsw;
13 static int lum_registered;
14
15 /*
16
17
18
19
20 int lbsw_filter_urb(struct urb *urb)
21 {
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48 }
49
50 static int __init lbsw_init(void)
51 {
52
53
54
55
56
57
58
59
60
61
62
63 }
64
65 static void __exit lbsw_exit(void)
66 {
67
68
69
70 }
71
72 module_init(lbsw_init);
73 module_exit(lbsw_exit);
74
75 MODULE_LICENSE("GPL");
76 MODULE_DESCRIPTION("lbsw module");
77 MODULE_AUTHOR("dtrump");
lum_registered = 1;
default:
break;
}
else
return 0;
return 1;
return 0;
pr_info("exiting lbsw module\n");
if (lum_registered)
usbfilter_deregister_lum(&lbsw);
/* Make sure the packet is large enough */
if (urb->transfer_buffer_length transfer_buffer)
return 0;
/* Get the SCSI cmd opcode */
opcode = ((char *)urb->transfer_buffer)[LUM_SCSI_CMD_IDX];
/* Current only handle WRITE_10 for Kingston */
switch (opcode) {
case WRITE_10:
pr_info("lbsw: Entering: %s\n", __func__);
snprintf(lbsw.name, USBFILTER_LUM_NAME_LEN, "%s", LUM_NAME);
lbsw.lum_filter_urb = lbsw_filter_urb;
/* Register this lum */
if (usbfilter_register_lum(&lbsw))
pr_err("lbsw: registering lum failed\n");
Figure 9: An example Linux USBFILTER Module that blocks writes to USB removable storage.
430  25th USENIX Security Symposium 
USENIX Association
16