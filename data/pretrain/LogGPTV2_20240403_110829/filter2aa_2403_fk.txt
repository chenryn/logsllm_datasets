seg000:00101B40               
.set arg_8, 8 
seg000:00101B40 
seg000:00101B40 7C 08 02 A6  
   mflr     %r0 
seg000:00101B44 90 01 00 08  
   stw      %r0, arg_8(%sp) 
seg000:00101B48 94 21 FF C0  
   stwu     %sp, -0x40(%sp) 
seg000:00101B4C 48 01 6B 39  
   bl       check2 
seg000:00101B50 60 00 00 00  
   nop 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 78 章  加  密  狗 
731 
seg000:00101B54 80 01 00 48  
   lwz      %r0, 0x40+arg_8(%sp) 
seg000:00101B58 38 21 00 40  
   addi     %sp, %sp, 0x40 
seg000:00101B5C 7C 08 03 A6  
   mtlr     %r0 
seg000:00101B60 4E 80 00 20  
   blr 
seg000:00101B60                
# End of function check1 
在 IDA 中，我们可以清楚地观察到：虽然程序的多个指令都调用了这个函数，但是调用方函数在调用
结束之后只访问了 r3 寄存器的值。这个函数只起到调用其他函数的功能，因此它就是形实转换函数：即使
函数序言和函数尾声都十分完整，但是对 r3 寄存器完全没有操作。据此判断，check1()函数的返回值与 check()
函数一致。 
BLR指令
①
① BLR 是 Branch to Link Register 的缩写。 
似乎是函数返回语句，可作为划分函数模块的标识。但是IDA能够识别并划分函数体，因
此我们可以先不管它。由于本程序采用的是RISC（精简指令集）指令，调用方函数会通过链接寄存器（Link 
Register）向被调用方函数传递返回地址。就这些特征来看，PowerPC的程序与ARM程序有很多共同点。 
check2()函数略为复杂： 
seg000:00118684         
 check2: # CODE XREF: check1+Cp 
seg000:00118684 
seg000:00118684         
 .set var_18, -0x18 
seg000:00118684         
 .set var_C, -0xC 
seg000:00118684         
 .set var_8, -8 
seg000:00118684         
 .set var_4, -4 
seg000:00118684         
 .set arg_8,  8 
seg000:00118684 
seg000:00118684 93 E1 FF FC   stw     %r31, var_4(%sp) 
seg000:00118688 7C 08 02 A6   mflr     %r0 
seg000:0011868C 83 E2 95 A8   lwz      %r31, off_1485E8 # dword_24B704 
seg000:00118690                 .using dword_24B704, %r31 
seg000:00118690 93 C1 FF F8   stw      %r30, var_8(%sp) 
seg000:00118694 93 A1 FF F4   stw      %r29, var_C(%sp) 
seg000:00118698 7C 7D 1B 78   mr       %r29, %r3 
seg000:0011869C 90 01 00 08   stw      %r0, arg_8(%sp) 
seg000:001186A0 54 60 06 3E   clrlwi  %r0, %r3, 24 
seg000:001186A4 28 00 00 01   cmplwi  %r0, 1 
seg000:001186A8 94 21 FF B0   stwu     %sp, -0x50(%sp) 
seg000:001186AC 40 82 00 0C   bne     loc_1186B8 
seg000:001186B0 38 60 00 01   li       %r3, 1 
seg000:001186B4 48 00 00 6C   b        exit 
seg000:001186B8 
seg000:001186B8               loc_1186B8: # CODE XREF: check2+28j 
seg000:001186B8 48 00 03 D5   bl      sub_118A8C 
seg000:001186BC 60 00 00 00   nop 
seg000:001186C0 3B C0 00 00   li      %r30, 0 
seg000:001186C4 
seg000:001186C4               skip:        # CODE XREF: check2+94j 
seg000:001186C4 57 C0 06 3F   clrlwi. %r0, %r30, 24 
seg000:001186C8 41 82 00 18   beq      loc_1186E0 
seg000:001186CC 38 61 00 38   addi    %r3, %sp, 0x50+var_18 
seg000:001186D0 80 9F 00 00   lwz      %r4, dword_24B704 
seg000:001186D4 48 00 C0 55   bl       .RBEFINDNEXT 
seg000:001186D8 60 00 00 00   nop 
seg000:001186DC 48 00 00 1C   b        loc_1186F8 
seg000:001186E0 
seg000:001186E0               loc_1186E0: # CODE XREF: check2+44j 
seg000:001186E0 80 BF 00 00   lwz      %r5, dword_24B704 
seg000:001186E4 38 81 00 38   addi     %r4, %sp, 0x50+var_18 
seg000:001186E8 38 60 08 C2   li       %r3, 0x1234 
seg000:001186EC 48 00 BF 99   bl       .RBEFINDFIRST 
seg000:001186F0 60 00 00 00   nop 
seg000:001186F4 3B C0 00 01   li      %r30, 1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
732 
逆向工程权威指南（下册） 
seg000:001186F8 
seg000:001186F8               loc_1186F8: # CODE XREF: check2+58j 
seg000:001186F8 54 60 04 3F   clrlwi. %r0, %r3, 16 
seg000:001186FC 41 82 00 0C   beq      must_jump 
seg000:00118700 38 60 00 00   li       %r3, 0             # error 
seg000:00118704 48 00 00 1C   b        exit 
seg000:00118708 
seg000:00118708               must_jump:  # CODE XREF: check2+78j 
seg000:00118708 7F A3 EB 78   mr       %r3, %r29 
seg000:0011870C 48 00 00 31   bl       check3 
seg000:00118710 60 00 00 00   nop 
seg000:00118714 54 60 06 3F   clrlwi. %r0,%r3, 24 
seg000:00118718 41 82 FF AC   beq      skip 
seg000:0011871C 38 60 00 01   li      %r3, 1 
seg000:00118720 
seg000:00118720               exit:        # CODE XREF: check2+30j 
seg000:00118720                             # check2+80j 
seg000:00118720 80 01 00 58   lwz    %r0, 0x50+arg_8(%sp) 
seg000:00118724 38 21 00 50   addi   %sp, %sp, 0x50 
seg000:00118728 83 E1 FF FC   lwz    %r31, var_4(%sp) 
seg000:0011872C 7C 08 03 A6   mtlr   %r0 
seg000:00118730 83 C1 FF F8   lwz    %r30, var_8(%sp) 
seg000:00118734 83 A1 FF F4   lwz    %r29, var_C(%sp) 
seg000:00118738 4E 80 00 20   blr 
seg000:00118738               # End of function check2 
因为可执行文件保留了部分函数名称，所以分析的难度并非很高。例如，程序文件里有.RBEFINDNEXT() 
和 .RBEFINDFIRST()等函数名。这可能是编译器留下的调试符号。虽然无法确定这种情况的具体原因，但
是在不了解文件格式的情况下，我们可以参考与之类似的 PE 文件格式（可参考 68.2.7 节）。而这些函数最
终都调用了.GetNextDeviceViaUSB()函数和.USBSendPKT()函数。从函数名称可以判断，它们都是访问 USB
加密狗的函数。 
程序里甚至还直接调用了.GetNextEve3Device()函数。这个函数在 20 世纪 90 年代就非常著名。程序往
往通过这个函数访问 Mac 设备上的 ADB 口，最终访问 Sentinel Eve3 加密狗。 
我们首先要把其他问题搁置一边，重点关注 r3 寄存器在函数返回前的赋值过程。在分析前面的指令时，
我们已经知道，如果 r3 寄存器的值为零，那么程序将转向错误提示信息的信息窗口；所以，我们关注的是
对 r3 寄存器进行非零赋值的指令。 
上述程序中，有两条“li %r3,｛非零值｝”指令，有一条“li %r3, 0”指令。LI 是 Load Immediate 的缩
写，可见 li 指令的作用是“令寄存器加载立即数”。第一条指令的地址是 0x001186B0。坦白地讲，如果要
了解它的具体作用，还需要进一步学习 PowerPC 平台的汇编语言。 
然而下一处简明易懂。它调用.RBEFINDFIRST()函数。如果函数验证失败，则 r3 的值为 0，程序将跳
转到 exit（退出）；否则，继续调用 check3()函数。如果 check3()函数的验证失败，那么程序将调
用.RBEFINDNEXT()函数，大概是检测下一个 USB 口的意思吧。 
前文我们介绍过“clrlwi %r0, %r3, 16”的具体功能了。要注意的是，它清除的是 16 位数据。这就代表
着.REBFINDFIRST()函数的返回值多半也是 16 位数据。 
此外，B（branch）指令是无条件转移指令，BEQ 的触发条件和 BNE 相反。这些指令就不再介绍了。 
下面来分析 check3()函数： 
` 
seg000:0011873C       
  check3: # CODE XREF: check2+88p 
seg000:0011873C 
seg000:0011873C         
  .set var_18, -0x18 
seg000:0011873C         
  .set var_C, -0xC 
seg000:0011873C         
  .set var_8, -8 
seg000:0011873C         
  .set var_4, -4 
seg000:0011873C         
  .set arg_8,   8 
seg000:0011873C 
seg000:0011873C 93 E1 FF FC    stw     %r31, var_4(%sp) 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 78 章  加  密  狗 
733 
seg000:00118740 7C 08 02 A6    mflr   %r0 
seg000:00118744 38 A0 00 00    li      %r5, 0 
seg000:00118748 93 C1 FF F8    stw     %r30, var_8(%sp) 
seg000:0011874C 83 C2 95 A8    lwz    %r30, off_1485E8 # dword_24B704 
seg000:00118750                  .using dword_24B704, %r30 
seg000:00118750 93 A1 FF F4    stw     %r29, var_C(%sp) 
seg000:00118754 3B A3 00 00    addi    %r29, %r3, 0 
seg000:00118758 38 60 00 00    li      %r3, 0 
seg000:0011875C 90 01 00 08    stw     %r0, arg_8(%sp) 
seg000:00118760 94 21 FF B0    stwu    %sp, -0x50(%sp) 
seg000:00118764 80 DE 00 00    lwz     %r6, dword_24B704 
seg000:00118768 38 81 00 38    addi    %r4, %sp, 0x50+var_18 
seg000:0011876C 48 00 C0 5D    bl      .RBEREAD 
seg000:00118770 60 00 00 00    nop 
seg000:00118774 54 60 04 3F    clrlwi. %r0, %r3, 16 
seg000:00118778 41 82 00 0C    beq     loc_118784 
seg000:0011877C 38 60 00 00    li      %r3, 0 
seg000:00118780 48 00 02 F0    b       exit 
seg000:00118784 
seg000:00118784                loc_118784: # CODE XREF: check3+3Cj 
seg000:00118784 A0 01 00 38    lhz     %r0, 0x50+var_18(%sp) 
seg000:00118788 28 00 04 B2    cmplwi %r0, 0x1100 
seg000:0011878C 41 82 00 0C    beq     loc_118798 
seg000:00118790 38 60 00 00    li      %r3, 0 
seg000:00118794 48 00 02 DC    b       exit 
seg000:00118798 
seg000:00118798                loc_118798: # CODE XREF: check3+50j 
seg000:00118798 80 DE 00 00    lwz     %r6, dword_24B704 
seg000:0011879C 38 81 00 38    addi    %r4, %sp, 0x50+var_18 
seg000:001187A0 38 60 00 01    li      %r3, 1 
seg000:001187A4 38 A0 00 00    li      %r5, 0 
seg000:001187A8 48 00 C0 21    bl      .RBEREAD 
seg000:001187AC 60 00 00 00    nop 
seg000:001187B0 54 60 04 3F    clrlwi. %r0, %r3, 16 
seg000:001187B4 41 82 00 0C    beq     loc_1187C0 
seg000:001187B8 38 60 00 00    li      %r3, 0 
seg000:001187BC 48 00 02 B4    b       exit 
seg000:001187C0 
seg000:001187C0                loc_1187C0: # CODE XREF: check3+78j 
seg000:001187C0 A0 01 00 38    lhz     %r0, 0x50+var_18(%sp) 
seg000:001187C4 28 00 06 4B    cmplwi %r0, 0x09AB 
seg000:001187C8 41 82 00 0C    beq   loc_1187D4 
seg000:001187CC 38 60 00 00    li      %r3, 0 
seg000:001187D0 48 00 02 A0    b       exit 
seg000:001187D4 
seg000:001187D4                loc_1187D4: # CODE XREF: check3+8Cj 
seg000:001187D4 4B F9 F3 D9    bl     sub_B7BAC 
seg000:001187D8 60 00 00 00    nop 
seg000:001187DC 54 60 06 3E    clrlwi %r0, %r3, 24 
seg000:001187E0 2C 00 00 05    cmpwi  %r0, 5 
seg000:001187E4 41 82 01 00    beq     loc_1188E4 
seg000:001187E8 40 80 00 10    bge     loc_1187F8 
seg000:001187EC 2C 00 00 04    cmpwi  %r0, 4 
seg000:001187F0 40 80 00 58    bge    loc_118848 
seg000:001187F4 48 00 01 8C    b       loc_118980 
seg000:001187F8  
seg000:001187F8                loc_1187F8: # CODE XREF: check3+ACj 
seg000:001187F8 2C 00 00 0B    cmpwi  %r0, 0xB 
seg000:001187FC 41 82 00 08    beq     loc_118804 
seg000:00118800 48 00 01 80    b       loc_118980 
seg000:00118804 
seg000:00118804                loc_118804: # CODE XREF: check3+C0j 
seg000:00118804 80 DE 00 00    lwz     %r6, dword_24B704 
seg000:00118808 38 81 00 38    addi    %r4, %sp, 0x50+var_18 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
734 
逆向工程权威指南（下册） 
seg000:0011880C 38 60 00 08    li      %r3, 8 
seg000:00118810 38 A0 00 00    li      %r5, 0 
seg000:00118814 48 00 BF B5    bl      .RBEREAD 
seg000:00118818 60 00 00 00    nop 
seg000:0011881C 54 60 04 3F    clrlwi. %r0, %r3, 16 
seg000:00118820 41 82 00 0C    beq     loc_11882C 
seg000:00118824 38 60 00 00    li      %r3, 0 
seg000:00118828 48 00 02 48    b       exit 
seg000:0011882C  
seg000:0011882C                loc_11882C: # CODE XREF: check3+E4j 
seg000:0011882C A0 01 00 38    lhz     %r0, 0x50+var_18(%sp) 
seg000:00118830 28 00 11 30    cmplwi %r0, 0xFEA0 
seg000:00118834 41 82 00 0C    beq    loc_118840 
seg000:00118838 38 60 00 00    li      %r3, 0 
seg000:0011883C 48 00 02 34    b       exit 
seg000:00118840  
seg000:00118840                loc_118840: # CODE XREF: check3+F8j 
seg000:00118840 38 60 00 01    li     %r3, 1 
seg000:00118844 48 00 02 2C    b      exit 
seg000:00118848 
seg000:00118848                loc_118848: # CODE XREF: check3+B4j 
seg000:00118848 80 DE 00 00    lwz     %r6, dword_24B704 
seg000:0011884C 38 81 00 38    addi   %r4, %sp, 0x50+var_18 
seg000:00118850 38 60 00 0A    li     %r3, 0xA 
seg000:00118854 38 A0 00 00    li     %r5, 0 
seg000:00118858 48 00 BF 71    bl     .RBEREAD 
seg000:0011885C 60 00 00 00    nop 
seg000:00118860 54 60 04 3F    clrlwi. %r0, %r3, 16 
seg000:00118864 41 82 00 0C    beq     loc_118870 
seg000:00118868 38 60 00 00    li      %r3, 0 
seg000:0011886C 48 00 02 04    b       exit 
seg000:00118870 
seg000:00118870                loc_118870: # CODE XREF: check3+128j 
seg000:00118870 A0 01 00 38    lhz     %r0, 0x50+var_18(%sp) 
seg000:00118874 28 00 03 F3    cmplwi  %r0, 0xA6E1 
seg000:00118878 41 82 00 0C    beq     loc_118884 
seg000:0011887C 38 60 00 00    li      %r3, 0 
seg000:00118880 48 00 01 F0    b       exit 
seg000:00118884 
seg000:00118884                loc_118884: # CODE XREF: check3+13Cj 
seg000:00118884 57 BF 06 3E    clrlwi %r31, %r29, 24 
seg000:00118888 28 1F 00 02    cmplwi %r31, 2 
seg000:0011888C 40 82 00 0C    bne     loc_118898 
seg000:00118890 38 60 00 01    li      %r3, 1 
seg000:00118894 48 00 01 DC    b       exit 
seg000:00118898 
seg000:00118898                loc_118898: # CODE XREF: check3+150j 
seg000:00118898 80 DE 00 00    lwz     %r6, dword_24B704 
seg000:0011889C 38 81 00 38    addi    %r4, %sp, 0x50+var_18 
seg000:001188A0 38 60 00 0B    li      %r3, 0xB 
seg000:001188A4 38 A0 00 00    li      %r5, 0 
seg000:001188A8 48 00 BF 21    bl      .RBEREAD 
seg000:001188AC 60 00 00 00    nop 
seg000:001188B0 54 60 04 3F    clrlwi. %r0, %r3, 16 
seg000:001188B4 41 82 00 0C    beq     loc_1188C0 
seg000:001188B8 38 60 00 00    li      %r3, 0 
seg000:001188BC 48 00 01 B4    b       exit 
seg000:001188C0 
seg000:001188C0                loc_1188C0: # CODE XREF: check3+178j 
seg000:001188C0 A0 01 00 38    lhz     %r0, 0x50+var_18(%sp) 
seg000:001188C4 28 00 23 1C    cmplwi %r0, 0x1C20 
seg000:001188C8 41 82 00 0C    beq     loc_1188D4 
seg000:001188CC 38 60 00 00    li      %r3, 0 
seg000:001188D0 48 00 01 A0    b       exit 
seg000:001188D4  
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 78 章  加  密  狗 
735 
seg000:001188D4                loc_1188D4: # CODE XREF: check3+18Cj 
seg000:001188D4 28 1F 00 03    cmplwi %r31, 3 
seg000:001188D8 40 82 01 94    bne    error 
seg000:001188DC 38 60 00 01    li      %r3, 1 
seg000:001188E0 48 00 01 90    b       exit 
seg000:001188E4  
seg000:001188E4                loc_1188E4: # CODE XREF: check3+A8j 
seg000:001188E4 80 DE 00 00    lwz     %r6, dword_24B704 
seg000:001188E8 38 81 00 38    addi    %r4, %sp, 0x50+var_18 
seg000:001188EC 38 60 00 0C    li      %r3, 0xC 
seg000:001188F0 38 A0 00 00    li      %r5, 0 
seg000:001188F4 48 00 BE D5    bl      .RBEREAD 
seg000:001188F8 60 00 00 00    nop 
seg000:001188FC 54 60 04 3F    clrlwi. %r0, %r3, 16 
seg000:00118900 41 82 00 0C    beq     loc_11890C 
seg000:00118904 38 60 00 00    li      %r3, 0 
seg000:00118908 48 00 01 68    b      exit 
seg000:0011890C 
seg000:0011890C                loc_11890C: # CODE XREF: check3+1C4j 
seg000:0011890C A0 01 00 38    lhz     %r0, 0x50+var_18(%sp) 
seg000:00118910 28 00 1F 40    cmplwi %r0, 0x40FF 
seg000:00118914 41 82 00 0C    beq     loc_118920 
seg000:00118918 38 60 00 00    li      %r3, 0 
seg000:0011891C 48 00 01 54    b       exit 
seg000:00118920 
seg000:00118920                loc_118920: # CODE XREF: check3+1D8j 
seg000:00118920 57 BF 06 3E    clrlwi %r31, %r29, 24 
seg000:00118924 28 1F 00 02    cmplwi %r31, 2 
seg000:00118928 40 82 00 0C    bne     loc_118934 
seg000:0011892C 38 60 00 01    li      %r3, 1 