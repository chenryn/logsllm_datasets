# 【技术分享】CVE-2017-0290：史上最严重的Windows远程代码执行漏洞

## 译文声明
本文为翻译文章，原文来源于0patch.blogspot.jp。译文仅供参考，具体内容及含义请以原文为准。

**翻译者**：[shan66](http://bobao.360.cn/member/contribute?uid=2522399780)  
**稿费**：240 RMB  
**投稿方式**：发送邮件至 linwei#360.cn 或登录网页版在线投稿

## 前言
最近一周内，众多安全事件引起了广泛关注。其中，Google Project Zero 的 Natalie Silvanovich 和 Tavis Ormandy 发现了 Microsoft 恶意软件保护引擎中的一个严重漏洞。攻击者可以利用该漏洞在运行了任何 Microsoft 反恶意软件产品（如 Security Essentials 或 Windows Defender）的 Windows 计算机上执行任意代码。攻击方法非常简单，只需让目标计算机访问一个恶意文件即可。此外，攻击向量多种多样，包括通过电子邮件、即时通讯工具（如 Skype 或 Messenger）发送文件，或将其托管在恶意网站上等。

不同于其他报道，本文将重点介绍该漏洞的技术细节、根本原因以及如何为其编写微补丁。

## 为什么需要微补丁？
虽然微软在修复此漏洞方面反应迅速，并在周末就提供了更新，但并非所有计算机都会自动更新。企业管理员通常会控制更新的应用时间，以便在部署到组织内的计算机之前进行必要的测试。如果新版本的 mpengine.dll 存在缺陷，可能会阻止用户访问合法文件。因此，编写微补丁不仅可以帮助那些尚未更新的系统，还能让我们学习如何修补安全产品，并向读者介绍漏洞分析和微补丁编写的知识。

## 复现 CVE-2017-0290
复现漏洞是分析的第一步。Project Zero 报告提供了一个可下载的概念验证文件，尽管扩展名为 .zip，但实际上是一个包含少量漏洞利用代码和大量随机 HTML 内容的类 HTML 文件，以确保引擎处理该文件。

在 64 位 Windows 8.1 上复现此漏洞非常简单：只需下载并保存文件即可使 Windows Defender 服务崩溃。崩溃后，应用程序事件日志会记录相关错误，显示崩溃模块为 mpengine.dll，崩溃位置在偏移 0x21745a 处。请注意，我使用的是版本 1.1.13701.0，这是修复前的最后一个易受攻击版本。

## CVE-2017-0290 漏洞分析
成功复现漏洞后，接下来需要进行详细分析。Natalie 和 Tavis 在报告中详细介绍了这是一个类型混淆错误，具体来说，某些函数期望接收一个 string 对象，但却得到了一个 number 对象，导致调用字符串 vtable 函数时出错。

对于类型混淆漏洞，常见的修复方法是添加类型检查。我们可以通过比较有漏洞的代码和修复后的代码来识别这些修复点。

### 使用 IDA 进行分析
下图显示了崩溃的函数——确切的访问违例出现在 mov rax, [rcx] 指令处，地址为 0x75A31745A，距离 mpengine.dll 默认基地址的偏移为 0x21745a。

![IDA 分析截图](https://example.com/ida_analysis.png)

### 代码对比
我分析了两个版本的 mpengine.dll：易受攻击的 1.1.13701.0 版本和修复后的 1.1.13704.0 版本。共有 38440 个匹配的函数。我们需要比较导致崩溃的函数。如果幸运的话，很快就能找到补丁。

这两个函数在逻辑上相同，这意味着缺陷和补丁位于调用堆栈的更高层。我们可以比较所有调用这个函数的函数，但这里有大约 50 个函数，如果所有函数都相同，这将是一个艰巨的任务。

### 调用堆栈分析
由于 Windows Defender 是受保护的服务，无法直接调试。但我们可以通过 PoC 使其崩溃，然后重命名 LaunchProtected 注册表值并重启计算机，配置 Windows 错误报告以生成崩溃进程的转储文件。

再次使 Windows Defender 崩溃后，转储文件中包含完整的调用堆栈：
```
mpengine!FreeSigFiles+0x11ea9a 
mpengine!FreeSigFiles+0x12046f 
mpengine!FreeSigFiles+0x111e81 
mpengine!FreeSigFiles+0x111d9e 
mpengine!FreeSigFiles+0x125eaa 
mpengine!FreeSigFiles+0x3de1d  
mpengine!FreeSigFiles+0x3dbf5  
mpengine!FreeSigFiles+0x125eaa 
mpengine!FreeSigFiles+0x117ade 
mpengine!FreeSigFiles+0x120146 
mpengine!FreeSigFiles+0x113d76 
mpengine!FreeSigFiles+0xcce7f  
mpengine+0x54a99               
mpengine+0x865e1               
mpengine+0x50f3f               
mpengine+0x50d1f               
mpengine+0x8c208               
mpengine+0x8bf47               
mpengine!FreeSigFiles+0x174a3  
mpengine+0x13b7d               
mpengine!FreeSigFiles+0x1535a  
mpengine!_rsignal+0x243        
mpengine!_rsignal+0xe7
```

第一个地址是我们已经知道的崩溃位置。接下来继续分析第二个地址 FreeSigFiles + 0x12046f。