someone's password and answers to their security questions alone,
without needing their MFA device.
如果攻击者可以直接访问https://example.com/security_questions/，他们可以完全绕过多因素身份验证。他们可能只需要使用某人的密码和安全问题的答案就能够登录，而无需使用他们的MFA设备。
Another time application logic errors tend to manifest is during
multistep checkout processes. Let's say an online shop allows users to
pay via a saved payment method. When users save a new payment method,
the site will verify whether the credit card is valid and current. That
way, when the user submits an order via a saved payment method, the
application won't have to verify it again.
另一个应用程序逻辑错误往往在多步结帐过程中显现。假设一个在线商店允许用户通过保存的付款方式支付。当用户保存新的付款方式时，网站将验证信用卡是否有效和当前。这样，当用户通过保存的付款方式提交订单时，应用程序就不需要再次验证。
Say that the POST request to submit the order with a saved payment
method looks like this, where the `      payment_id     ` parameter
refers to the ID of the user's saved credit card:
POST请求识别出具有已保存付款方式的订单，其形式如下，其中payment_id参数指的是用户保存的信用卡的ID：
    POST /new_order
    Host: shop.example.com
    (POST request body)
    item_id=123
    &quantity=1
    &saved_card=1
    &payment_id=1
Users can also pay with a new credit card for each order. If users pay
with a new credit card, the card will be verified at the time of
checkout. Say the POST request to submit the order with a new payment
method looks like this:
用户还可以使用每个订单的新信用卡进行付款。如果用户使用新信用卡付款，该信用卡将在结帐时进行验证。提交带有新付款方式的POST请求如下所示：
    POST /new_order
    Host: shop.example.com
    (POST request body)
    item_id=123
    &quantity=1
    &card_number=1234-1234-1234-1234
To reiterate, the application will verify the credit card number only if
the customer is using a new payment method. But the application also
determines whether the payment method is new by the existence of the
`      saved_card     ` parameter in the HTTP request. So a malicious
user can submit a request with a `      saved_card     ` parameter and a
fake credit card number. Because of this error in payment verification,
they could order unlimited items for free with the unverified card:
强调一下，只有当客户使用新的支付方法时，应用程序才会验证信用卡号。但是，应用程序还通过HTTP请求中已保存的card参数来确定付款方式是否为新，因此恶意用户可以提交一个带有saved_card参数和虚假信用卡号的请求。由于付款验证中的这个错误，他们可以使用未经验证的卡无限制免费订购商品。
    POST /new_order
    Host: shop.example.com
    (POST request body)
    item_id=123
    &quantity=1
    &saved_card=1
    &card_number=0000-0000-0000-0000
Application logic errors like these are prevalent because these flaws
cannot be scanned for automatically. They can manifest in too many ways,
and most current vulnerability scanners don't have the intelligence to
understand application logic or business requirements.
应用程序逻辑错误像这样是普遍的，因为这些漏洞无法自动扫描。它们可能以太多方式表现出来，并且大多数当前的漏洞扫描器没有理解应用程序逻辑或业务要求的智能。
## Broken Access Control {#c17.xhtml#h1-501546c17-0002}
Our credit card processing example could also be classified as a broken
access control issue. *Broken access control* occurs when access control
in an application is improperly implemented and can be bypassed by an
attacker. For example, the IDOR vulnerabilities discussed in [ Chapter
10 ]{.xref itemid="xref_target_Chapter 10"} are a common broken access
control issue that applications face.
"我们的信用卡处理示例也可以被归类为破损的访问控制问题。破损的访问控制指的是当应用程序的访问控制不正确地实施时，攻击者可以绕过。例如，第10章讨论的IDOR漏洞是应用程序面临的常见破损的访问控制问题。"
But there are many other broken access control issues common in web
applications that you should learn about if you hope to become an
effective hacker. Let's look at a few of them.
然而，许多其他的 Web
应用程序也存在许多常见的访问控制问题，如果你希望成为一个有效的黑客，你必须学习它们。让我们看一些例子。
### Exposed Admin Panels {#c17.xhtml#h2-501546c17-0001}
Applications sometimes neglect or forget to lock up sensitive
functionalities such as the admin panels used to monitor the
application. Developers may mistakenly assume that users can't access
these functionalities because they aren't linked from the main
application, or because they're hidden behind an obscure URL or port.
But attackers can often access these admin panels without
authentication, if they can locate them. For example, even if the
application *example.com* hides its admin panel behind an obscure URL
such as *https://example.com/YWRtaW4/admin.php* , an attacker might
still be able to find it via Google dorks or URL brute-forcing.
应用程序有时会忽略或忘记锁定敏感功能，比如用于监控应用程序的管理面板。开发人员可能错误地认为用户无法访问这些功能，因为它们没有链接到主应用程序，或者因为它们隐藏在一个晦涩的
URL
或端口后面。但是，攻击者通常可以在不进行身份验证的情况下访问这些管理面板，如果他们能够找到它们的话。例如，即使应用程序
example.com 将其管理面板隐藏在一个晦涩的 URL
https://example.com/YWRtaW4/admin.php 后面，攻击者仍然可能通过 Google
dorks 或 URL 等方式找到它。
Sometimes applications don't implement the same access control
mechanisms for each of the various ways of accessing their sensitive
functionalities. Say the admin panel is properly secured so that only
those with valid admin credentials can access it. But if the request is
coming from an internal IP address that the machine trusts, the admin
panel won't ask the user to authenticate. In this case, if an attacker
can find an SSRF vulnerability that allows them to send internal
requests, they can access the admin panel without authentication.
有时，应用程序在访问其敏感功能的各种方式上可能没有实现相同的访问控制机制。比如说，管理员面板被适当地保护，只有持有有效管理员凭证的人才能访问。但是，如果请求来自机器信任的内部
IP
地址，管理员面板就不会要求用户进行身份验证。在这种情况下，如果攻击者能够找到
SSRF
漏洞并发送内部请求，他们就能够在不进行身份验证的情况下访问管理员面板。
Attackers might also be able to bypass access control by tampering with
cookies or request headers if they're predictable. Let's say the admin
panel doesn't ask for credentials as long as the user requesting access
presents the cookie `      admin=1     ` in their HTTP request. All the
attacker has to do to bypass this control is to add the cookie
`      admin=1     ` to their requests.
攻击者如果能够预测，也可以通过篡改cookie或者请求头来绕过访问控制。比如，假设管理员面板只要求用户在HTTP请求中携带名为admin=1的cookie，就可以直接访问，而无需验证凭据。攻击者只需将cookie
admin=1添加到其请求中，就能够绕过此控制。
Finally, another common access control issue occurs when users can force
their browsing past the access control points. To understand what [
]{#c17.xhtml#Page_279 .pagebreak title="279"} this means, let's say the
usual way of accessing *example.com* 's admin panel is via the URL
*https://example.com/YWRtaW4/admin.php* . If you browse to that URL,
you'll be prompted to log in with your credentials. After that, you'll
be redirected to *https://example.com/YWRtaW4/dashboard.php* , which is
where the admin panel resides. Users might be able to browse to
*https://example.com/YWRtaW4/dashboard.php* and directly access the
admin panel, without providing credentials, if the application doesn't
implement access control at the dashboard page.
最后，另一个常见的访问控制问题是用户可以强制浏览器绕过访问控制点。为了理解这意味着什么，假设访问example.com的管理员面板的通常方法是通过URL
https://example.com/YWRtaW4/admin.php。如果您浏览到该URL，您将被提示使用凭据登录。之后，您将被重定向到https://example.com/YWRtaW4/dashboard.php，其中管理员面板位于该处。如果应用程序不在仪表板页面实施访问控制，则用户可能能够浏览到https://example.com/YWRtaW4/dashboard.php并直接访问管理员面板，而无需提供凭据。
### Directory Traversal Vulnerabilities {#c17.xhtml#h2-501546c17-0002}
*Directory traversal vulnerabilities* are another type of broken access
control. They happen when attackers can view, modify, or execute files
they shouldn't have access to by manipulating filepaths in user-input
fields.
目录遍历漏洞是另一种破损的访问控制类型。攻击者可以通过操纵用户输入字段中的文件路径来查看、修改或执行他们本不应该访问的文件。
Let's say *example.com* has a functionality that lets users access their
uploaded files. Browsing to the URL
*http://example.com/uploads?file=example.jpeg* will cause the
application to display the file named *example.jpeg* in the user's
uploads folder located at */var/www/html/uploads/USERNAME/* .
假设Example.com有一项功能，让用户可以访问他们上传的文件。浏览URL
http://example.com/uploads?file=example.jpeg
将导致应用程序在用户的上传文件夹中显示名为example.jpeg的文件，该文件夹位于
/var/www/html/uploads/ USERNAME/路径下。
If the application doesn't implement input sanitization on the file
parameter, a malicious user could use the sequence `      ../     ` to
escape out of the uploads folder and read arbitrary files on the system.
The `      ../     ` sequence refers to the parent directory of the
current directory on Unix systems. For instance, an attacker could use
this request to access the */etc/shadow* file on the system:
如果应用程序没有对文件参数执行输入清理，则恶意用户可以使用序列../来逃脱上传文件夹并在系统上读取任意文件。../序列指Unix系统上当前目录的父目录。例如，攻击者可以使用此请求访问系统上的/etc/shadow文件。
    http://example.com/upload?file=../../../../../etc/shadow
The page would navigate to
*/var/www/html/uploads/USERNAME/../../../../../etc/shadow* , which
points to the */etc/shadow* file at the system root! In Linux systems,
the */etc/shadow* file contains the hashed passwords of system users. If
the user running the web server has the permissions to view this file,
the attacker could now view it too. They could then crack the passwords
found in this file to gain access to privileged users' accounts on the
system. Attackers might also gain access to sensitive files like
configuration files, log files, and source code.
该页面将导航到/var/www/html/uploads/USERNAME/../../../../../etc/shadow，该文件指向系统根路径下的/etc/shadow文件！在Linux系统中，/etc/shadow文件包含系统用户的哈希密码。如果运行Web服务器的用户具有查看此文件的权限，则攻击者也可以查看该文件。然后，他们可以破解在该文件中找到的密码以访问系统上的特权用户帐户。攻击者还可能获得访问敏感文件（如配置文件、日志文件和源代码）的权限。
## Prevention {#c17.xhtml#h1-501546c17-0003}
You can prevent application logic errors by performing tests to verify
that the application's logic is working as intended. This is best done
by someone who understands both the business requirements of the
organization and the development process of the application. You'll need
a detailed understanding of how your application works, how users
interact with each other, how functionalities are carried out, and how
complex processes work.
通过执行测试来验证应用程序的逻辑是否按预期工作，您可以预防应用程序逻辑错误。最好由既了解组织业务需求又熟悉应用程序开发过程的人员执行此项任务。你需要对应用程序的工作原理，用户之间的互动方式，功能的开展方式以及复杂过程的运作方式有详尽的了解。
Carefully review each process for any logical flaws that might lead to a
security issue. Conduct rigorous and routine testing against each
functionality that is critical to the application's security.
仔细检查每个过程是否存在逻辑缺陷，可能会导致安全问题。对于应用的安全至关重要的每个功能进行严密和常规测试。
[ ]{#c17.xhtml#Page_280 .pagebreak title="280"} Next, prevent broken
access control issues with a variety of countermeasures. First,
implement granular access control policies on all files and actions on a
system. The code that implements the access control policies should also
be audited for potential bypasses. You can conduct a penetration test to
try to find holes in the access policy or its implementation. Make sure
that access control policies are accurate. Also, make sure that the
multiple ways of accessing a service have consistent access control
mechanisms. For example, it shouldn't matter whether the application is
accessed via a mobile device, desktop device, or API endpoint. The same
authentication requirements, such as MFA, should apply for every
individual access point.
接下来，使用多种对策来防止破解访问控制问题。首先，在系统中对所有文件和操作实施细粒度访问控制策略。实施访问控制策略的代码还应受到潜在绕过漏洞的审计。您可以进行渗透测试，尝试找到访问策略或其实现中的漏洞。确保访问控制策略准确无误。同时，确保访问服务的多种方式具有一致的访问控制机制。例如，无论是通过移动设备、桌面设备还是API端点访问应用程序，都应该应用相同的身份认证要求，如MFA。
## Hunting for Application Logic Errors and Broken Access Control {#c17.xhtml#h1-501546c17-0004}
Application logic errors and access control issues are some of the
easiest bugs for beginners to find. Hunting for these vulnerabilities
doesn't involve tampering with code or crafting malicious inputs;
instead, it requires creative thinking and a willingness to experiment.
应用逻辑错误和访问控制问题是初学者最容易发现的漏洞之一。寻找这些漏洞并不涉及篡改代码或制作恶意输入；相反，它需要创造性思维和愿意尝试的精神。
### Step 1: Learn About Your Target {#c17.xhtml#h2-501546c17-0003}
Start by learning about your target application. Browse the application
as a regular user to uncover functionalities and interesting features.
You can also read the application's engineering blogs and documentation.
The more you understand about the architecture, development process, and
business needs of that application, the better you will be at spotting
these vulnerabilities.
开始学习您的目标应用程序。像普通用户一样浏览应用程序，以发现功能和有趣的特点。您还可以阅读应用程序的工程博客和文档。您对该应用程序的架构、开发流程和业务需求的了解越多，就越能发现这些漏洞。
For example, if you find out that the application just added a new
payment option for its online store, you can test that payment option
first since new features are often the least tested by other hackers.
And if you find out that the application uses WordPress, you should try
to access */wp-admin/admin.php* , the default path for WordPress admin
portals.
例如，如果你发现这个应用程序刚刚为其在线商店添加了一种新的支付选项，你可以先测试这个支付选项，因为新功能往往是其他黑客测试最少的。而如果你发现这个应用程序使用WordPress，你应该尝试访问/wp-admin/admin.php，这是WordPress管理门户的默认路径。
### Step 2: Intercept Requests While Browsing {#c17.xhtml#h2-501546c17-0004}
Intercept requests while browsing the site and pay attention to
sensitive functionalities. Keep track of every request sent during these
actions. Take note of how sensitive functionalities and access control
are implemented, and how they interact with client requests. For the new
payment option you found, what are the requests needed to complete the
payment? Do any request parameters indicate the payment type or how much
will be charged? When accessing the admin portal at
*/wp-admin/admin.php* , are any special HTTP headers or parameters sent?
在浏览网站时拦截请求并注意敏感功能。 跟踪在这些操作期间发送的每个请求。
注意敏感功能和访问控制是如何实现以及如何与客户端请求交互的。