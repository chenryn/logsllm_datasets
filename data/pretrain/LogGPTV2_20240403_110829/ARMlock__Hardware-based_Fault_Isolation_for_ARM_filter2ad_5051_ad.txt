own independent DACR. A thread running simultaneously on an-
other CPU core cannot access the host memory unless that core’s
DACR legitimately allows it.
The host and the sandbox may also use shared memory to com-
municate. This may be exploited by the attacker, say, through
race conditions. For example, the attacker may modify the shared
memory when it is being accessed by the host if the host is multi-
threaded. To mitigate it, the host should copy data from the shared
memory before processing it. If large blocks of memory are fre-
quently exchanged, ARMlock can be extended to support swapping
the ownership of the shared memory so that only one domain can
access it at a time.
System call interposition and exceptions: ARMlock imposes
no limitations on the instructions of the sandboxed code. It can is-
sue system calls or cause exceptions (#3 and #4 in Figure 5). A
wide open system call interface is detrimental for security because
many system calls are less exercised and have a higher chance to
contain vulnerabilities. In ARMlock, the host deﬁnes the allowed
system calls and their parameters for an untrusted module. Simi-
lar to a ﬁrewall policy, the host should by default deny all system
calls and only allow necessary ones. For example, our porting of
tcpdump puts its protocol parsers in the sandbox and gives them
access to the open socket. The parsers can read that socket but can-
not create new ones. This minimalist policy helps to avoid many
pitfalls in the system call interposition for whole applications [10].
Moreover, exceptions can be delivered to the sandbox. ARMlock
leverages the existing signal delivery system in the kernel, one of
the most mature features in the kernel. As mentioned earlier, the
forwarding of selected signals to the host may be disrupted by the
untrusted code, a denial-of-service threat. However, such behavior
can be easily detected by ARMlock, for example, by maintaining a
counter of domain faults in the kernel and the host and comparing
them for diﬀerences.
Case studies:
to demonstrate the eﬀectiveness of ARMlock,
we examine vulnerabilities in some popular programs and show
how ARMlock can help to conﬁne damages. The ﬁrst program
we examined is gzip. A recent version of gzip (1.2.4) contains a
buﬀer overﬂow vulnerability that can be triggered when an input
ﬁle name is longer than 1,020 bytes [13]. This bug may be ex-
ploited remotely if gzip is running by a server such as the Apache
web server. To conﬁne this vulnerability, we use ARMlock to iso-
late the functions that handle the untrusted command line input
(in getopt.c). Even though the bug can still be exploited, the
damage is conﬁned to the sandbox and cannot spread to the host
application or the whole system. Functions like getopt can be
easily converted to coroutines because they closely follow the pro-
ducer/consumer model. Moreover, gzip contains several algorithms
to compress/decompress untrusted data. They should also be iso-
lated.
The second program (library) we examined is libpng, the oﬃ-
cial PNG reference library [18]. Despite having been “extensively
tested for over 18 years”, new security vulnerabilities are still being
discovered in the library with 27 CVE reports (the most recent one
was reported in 2012). We can use ARMlock to sandbox the library
together with the zlib it depends on. However, this will lead to
many inter-module calls because libpng has a fairly ﬁne-grained
interface. To address that, we provide a simple wrapper function
around libpng with a higher level interface (e.g., decode this png
ﬁle into the buﬀer we provided), and sandbox libpng along with
the wrapper. Moreover, libpng uses setjmp/longjmp to handle
errors, a feature that can naturally be supported by ARMlock with-
out any special handling.
The last program we examined is tcpdump [40]. The current
version of tcpdump contains 124 protocol parsers. Vulnerabilities
have been reported for multiple protocol parsers in tcpdump such as
BGP, GRE and LDP. These parsers can be easily isolated in ARM-
lock and prevented from compromising the host.
4.2 Performance Evaluation
The performance of ARMlock can be characterized by the do-
main switch latency and the execution speed of code in the sand-
box. Normally, the host and its untrusted modules are tightly cou-
pled and have close interactions that require inter-domain com-
munications. It is therefore critical for ARMlock to keep the do-
main switch latency as low as possible. Because each inter-module
call requires two system calls to ARMlock’s kernel module, this
latency is bounded by twice the time of a null system call (e.g.,
getpid). Moreover, it is ideal for instructions running inside a
sandbox to execute as fast as those outside the sandbox. There is
a trade-oﬀ between the domain switch latency and the execution
speed of the sandboxed code in the design of SFI systems. For ex-
ample, SFI systems that rely on binary rewriting may have lower
domain switch latency but constantly suﬀer from the performance
overhead when running inside the sandbox. The way a program
is organized can also aﬀect its performance. Domain switch has
a (mostly) constant latency, it is beneﬁcial to structure the pro-
gram so that the frequency of domain switches is minimized, for
example, by deﬁning the interface at a higher semantic level. Our
performance evaluation accordingly consists of two sets of experi-
ments: micro-benchmarks that measure the domain switch latency,
and macro-benchmarks that test the performance of sandboxed pro-
grams. Our experiments are based on Raspberry Pi, a popular and
aﬀordable single board computer. It has a low-end ARMv6 proces-
sor and 512MB memory [29]. Table 2 lists the conﬁguration of our
experiment environment.
To measure the domain switch latency, we implemented a sim-
ple inc function in the sandbox which returns its parameter in-
creased by one. We call this function from the host for 10 million
times and measure the elapsed time with the clock libc function.
The result shows that even on this relatively low performance ARM
processor, ARMlock can perform 903,342 inter-module calls every
second. That is, each inter-module call takes about 1.1µs. There-
fore, each ARMlock system call takes about 0.55µs because every
inter-module call consists of two domain switches (thus two system
calls). To compare it with common system calls, we also measured
the latency of getpid 3 and several other system calls of the origi-
nal Linux kernel with LMbench [19]. Figure 6 shows the latency of
these system calls relative to getpid (in log scale). In particular,
an inter-module call in ARMlock takes about 2.6 times of getpid
or the null system call in LMbench.
Our second set of experiments measures the performance over-
head for instructions running inside the sandbox. Speciﬁcally, we
3We use syscall (__NR_getpid) to make sure the kernel is en-
tered to avoid the impact of VDSO [42].
Figure 6: ARMlock domain switch latency relative to that of
getpid
run nbench [24] – a computation-intensive benchmark of CPU,
FPU, and memory system – both inside the sandbox and natively,
and then compared their relative performance. The result is shown
in Figure 7 (marked as internal). It is clear that in ARMlock in-
structions running inside the sandbox is as fast as outside the sand-
box. Notice that this experiment represents the ideal scenario for
ARMlock because the sandboxed code is almost self-contained and
thus cross-domain communication is not frequent. To further mea-
sure the performance under frequent inter-module calls, we mod-
ify two benchmarks in nbench, Fourier and Neural Net, to use
ﬂoating-point functions in the host. Both benchmarks rely heavily
on ﬂoating-point functions such as pow, sin, and cos. This set-
ting represents almost a worst-case scenario for ARMlock because
of the frequent inter-module calls. In both cases, the performance
drops to about 62% of the native nbench. Moving those ﬂoating
point functions back into the sandbox makes the performance al-
most the same as the native nbench. In general, it will beneﬁt per-
formance (sometimes signiﬁcantly) to move closely related func-
tions into the sandbox together. This observation also applies to
the three programs in our case studies (Section 4.1). None of them
exhibited more than 1% performance overhead. For example, our
modiﬁed tcpdump reads packets from an open socket and parses
them in the sandbox. It has virtually no overhead.
5. DISCUSSION
In this section, we discuss issues related to ARMlock and soft-
ware fault isolation in general. We also suggest possible future
work for ARMlock.
Architecture support for fault isolation: ARMlock is a hardware-
based fault isolation for the ARM architecture.
It leverages the
memory domain feature in ARM to conﬁne memory access. The
memory domain feature has clear advantage in implementing SFI
over previous hardware features, namely segmentation [9, 46] and
paging [36, 39]. With segmentation, an application can create mul-
tiple segments that each speciﬁes the valid base and length of a
memory region. It can further use an instruction preﬁx to specify
which data or code segment the instruction refers to. This creates
a number of issues. Particularly, the untrusted code needs to be in-
strumented to prevent it from changing segments and/or jumping
over the segment override preﬁx to refer to the unintended seg-
ment. Self-modifying code and dynamically-loaded code are also
challenging to support: the system needs to have the capability to
instrument code at run-time. Meanwhile, page-table based sand-
boxes suﬀer from high domain switch overhead because TLB and
cache may be aﬀected. Likely, it could not support applications
that require frequent inter-module calls well. In contrast, memory
domain in ARM ﬁts better than segmentation and paging. Speciﬁ-
Figure 7: Relative performance of nbench in ARMlock
cally, it assigns to each top-level page table a domain ID, an index
into the domain access control register (DACR). This can be ef-
ﬁciently integrated into the processor implementation: each TLB
entry can be extended to include a domain ID ﬁeld. When there
is a memory access, the processor uses the domain ID to retrieve
the access right from DACR. This can be handled in parallel to the
memory access. Although memory domain is not available on x86,
we speculate that recent x86 CPUs could be extended to support
it with some minor modiﬁcations. Intel introduced a feature called
page attribute table (PAT) in Pentium III to allow the kernel to spec-
ify cacheability of virtual memory [15]. PAT has a similar structure
as memory domain in ARM: a special register (IA32_PAT MSR)
contains eight page attribute ﬁelds to specify a memory type such as
uncacheable, write-combined, write-through, write-back,
reserved, etc. A page table entry has three bits (the PAT, PCD, and
PWT bits) that index into this register to determine the cacheability
of its mapped memory. However, attempting to write the reserved
memory type into the IA32_PAT register will trigger a general-
protection fault [15]. To enable the memory domain like support,
we need to allow reserved to be written into IA32_PAT and de-
lay the fault until the memory of this type is accessed. After this
change, we could use a similar design to implement ARMlock on
the x86 architecture.
Software support for fault isolation: Hardware assisted fault
isolation often requires software support at both the kernel and
the user levels. ARMlock’s kernel module is more or less an af-
terthought “patch” to the existing kernel in favor of compatibility.
A cleaner design could introduce domains into the kernel’s process
management. A domain is a group of resources (similar to the name
space in Linux but at a lower level). Each domain should have its
own memory, system call table, open ﬁle table, signal delivery etc.
A master and slave relation can also be established among domains.
A master domain can control a slave domain’s resource allocation
and override its system call table. The kernel may also provide
a hook for SFI to customize domain switch. Without doubt, this
cleaner design requires more intrusive and extensive changes to the
kernel and may not be practical.
A SFI system should facilitate the adoption of its programming
paradigm. ARMlock leverages the PLT/GOT structure to shield the
programmer from the details of inter-module calls. Inevitably, the
programmer still needs to refactor the application into domains, or
compartments [45]. This task can be aided with software develop-
ment tools to suggest source code partitioning and wrap remote
calls in RPC. Moreover, the system should provide common li-
braries ported to the sandbox. Domain switch is a waste of CPU
time because it does not perform useful computation. Porting these
libraries to the sandbox may signiﬁcantly reduce the overhead (Sec-
tion 4). Projects such as NaCl have ported many libraries to their
  1x  10x  100x  1,000x  10,000xARMlockclockexecforkgetpidnullsig_handlesig_installstatLatency relative to getpid (in logscale)  0%  20%  40%  60%  80%  100%AssignmentBitfieldFP_emulationFourierHuffmanIDEALU_decompositionNeural_netNumeric_sortString_sort Relative PerformanceInternalExternalsandbox and may be reused by other SFI systems. In addition, the
dynamic loader and linker could be made SFI-aware so that the bi-
nary of these libraries can be shared by all the sandboxes in the
system to reduce the memory footprint.
Many sub-architectures of ARM: unlike the stable x86 archi-
tecture, the ARM architecture has a large number of slightly in-
compatible sub-architectures each with diﬀerent features, power
consumption, and performance. Some of them might not support
memory domain required by ARMlock. Moreover, the ARM ar-
chitecture has two proﬁles. Proﬁle A targets full-ﬂedged appli-
cations with virtual memory support; proﬁle M is designed for
low-performance and lower-power embedded devices which do not
need paging. In addition, recent extensions in high-end ARM pro-
cessors add a new page table format, i.e., the long format. This
format removes the memory domain support despite the fact that
there are enough unused bits to accommodate a domain ID. How-
ever, these processors are backward compatible with ARMlock be-
cause memory domain is still supported by the short page-table for-
mat. In the case that the short format is also deprecated, ARMlock
can switch to page table based isolation. Even though ARMlock is
not completely future proof for high-end ARM processors, it will
remain useful and functional for low-to-medium-end processors,
for example, to run untrusted plugins in smart devices (e.g., smart
watch) or Internet of Things.
Kernel-level Sandbox: ARMlock is a user-level sandbox.
It
relies on memory domain for isolation. Memory domain is also
available in the kernel space.
It requires the following changes
for ARMlock to become a kernel-level sandbox. First, the code
running in the sandbox, even though conﬁned, still has the kernel-
level privilege. It is thus imperative to control the instructions of
untrusted modules. For example, they should not be allowed to
change DACR or even disable paging. This consequently will limit
the support of self-modifying code or JIT (those features probably
are not as useful for a kernel-level sandbox anyway). We can de-
sign a veriﬁer to prove that a binary is safe to run in the kernel
sandbox [46]. Second, the domain switch mechanism needs to be
changed as well. ARMlock depends on the kernel to switch do-
mains. The kernel is always accessible in ARMlock. This is not
the case for a kernel-level sandbox since only part of the kernel is
accessible at any time. We need to design a software-based do-
main switch mechanism, potentially with the help of some form of
control-ﬂow integrity [44, 46]. Third, the interrupt handling has
to be adapted so that interrupt handlers are accessible in both the
main kernel and the sandbox. In addition, the veriﬁer should be
applied to those handlers to prevent them from being misused. In-
terrupts happened in the sandbox are rerouted to the main kernel
for processing.
Close-sourced OS support: our prototype targets Linux, ar-
guably the most popular OS for the ARM processors. However,
the design of ARMlock is neutral to the underlying OS. Particu-
larly, it might be possible to adapt ARMlock to the Windows RT
operating system. Close-sourced OSes pose extra challenges: al-
though ARMlock can be implemented as a loadable kernel module
or device driver, there might exist incompatibility in the main ker-
nel such as the exception handling that we adjusted for Linux. To
address this, the kernel could be dynamically patched to resolve
the incompatibility. Diﬀerent releases of the kernel may require
diﬀerent patches, leading to higher maintenance eﬀorts.
6. RELATED WORK