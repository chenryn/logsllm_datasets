zero-knowledge and signatures from symmetric-key primitives. In ACM
CCS, Oct. 2017.
[33] A. Chiesa, M. A. Forbes, and N. Spooner. A zero knowledge sumcheck
and its applications. CoRR, abs/1704.02086, 2017.
[34] A. Chiesa, E. Tromer, and M. Virza. Cluster computing in zero
knowledge. In EUROCRYPT, Apr. 2015.
[35] G. Cormode, M. Mitzenmacher, and J. Thaler. Practical veriﬁed
computation with streaming interactive proofs. In ITCS, Jan. 2012.
[36] C. Costello, C. Fournet, J. Howell, M. Kohlweiss, B. Kreuter, M. Naehrig,
B. Parno, and S. Zahur. Geppetto: Versatile veriﬁable computation. In
IEEE S&P, May 2015.
[37] R. Cramer and I. Damgård. Zero-knowledge proofs for ﬁnite ﬁeld
arithmetic, or: Can zero-knowledge be for free? In CRYPTO, Aug. 1998.
[38] Debian, the unversal operating system. https://www.debian.org.
[39] A. Delignat-Lavaud, C. Fournet, M. Kohlweiss, and B. Parno. Cinderella:
Turning shabby X.509 certiﬁcates into elegant anonymous credentials
with the magic of veriﬁable computation. In IEEE S&P, May 2016.
[40] D. Dolev, C. Dwork, and M. Naor. Non-malleable cryptography. In
STOC, 1991.
[41] A. Fiat and A. Shamir. How to prove yourself: Practical solutions to
identiﬁcation and signature problems. In CRYPTO, Aug. 1986.
[42] D. Fiore, C. Fournet, E. Ghosh, M. Kohlweiss, O. Ohrimenko, and
B. Parno. Hash ﬁrst, argue later: Adaptive veriﬁable computations on
outsourced data. In ACM CCS, Oct. 2016.
[43] D. Fiore, R. Gennaro, and V. Pastro. Eﬃciently veriﬁable computation on
encrypted data. In ACM CCS, Nov. 2014.
[44] M. Fredrikson and B. Livshits. ZØ: An optimizing distributing
zero-knowledge compiler. In USENIX Security, Aug. 2014.
[45] E. Fujisaki and T. Okamoto. Statistical zero knowledge protocols to prove
modular polynomial relations. In CRYPTO, Aug. 1997.
[46] R. Gennaro, C. Gentry, B. Parno, and M. Raykova. Quadratic span
programs and succinct NIZKs without PCPs. In EUROCRYPT, 2013.
[47] I. Giacomelli, J. Madsen, and C. Orlandi. ZKBoo: Faster zero-knowledge
for Boolean circuits. In USENIX Security, Aug. 2016.
[48] O. Goldreich, S. Micali, and A. Wigderson. Proofs that yield nothing but
their validity or all languages in NP have zero-knowledge proof systems.
J. ACM, 38(3):690–728, 1991.
[49] S. Goldwasser, Y. T. Kalai, and G. N. Rothblum. Delegating computation:
Interactive proofs for muggles. J. ACM, 62(4):27:1–27:64, Aug. 2015.
Preliminary version STOC 2008.
[50] S. Goldwasser, S. Micali, and C. Rackoﬀ. The knowledge complexity of
interactive proof systems. SIAM J. Computing, 18(1):186–208, 1989.
[51] J. Groth. Simulation-sound nizk proofs for a practical language and
constant size group signatures. In ASIACRYPT, Dec. 2006.
[52] J. Groth. Linear algebra with sub-linear zero-knowledge arguments. In
We have released Hyrax’s source code and our BCCGP-sqrt and
Bulletproofs implementations as open-source software [58].
Acknowledgments
This work was funded by DARPA grant HR0011-15-2-0047 and
NSF grants CNS-1423249, TWC-1646671, and TWC-1664445;
and by Nest Labs and a Google Research Fellowship. Justin
Thaler was supported by a Research Seed Grant from Georgetown
University’s Massive Data Institute. The authors thank Muthu
Venkitasubramaniam for help with Ligero, and Eli Ben-Sasson,
Iddo Bentov, and Michael Riabzev for help with libSTARK.
References
[1] S. Ames, C. Hazay, Y. Ishai, and M. Venkitasubramaniam. Ligero:
Lightweight sublinear arguments without a trusted setup. In ACM CCS,
Oct. 2017.
[2] D. F. Aranha, P. S. L. M. Barreto, G. C. C. F. Pereira, and J. E. Ricardini.
A note on high-security general-purpose elliptic curves. Cryptology
ePrint Archive, Report 2013/647, 2013.
[3] AWS EC2. https://aws.amazon.com/ec2/instance-types/.
[4] M. Backes, M. Barbosa, D. Fiore, and R. M. Reischuk. ADSNARK:
Nearly practical and privacy-preserving proofs on authenticated data. In
IEEE S&P, May 2015.
[5] M. Backes, D. Fiore, and R. M. Reischuk. Veriﬁable delegation of
computation on outsourced data. In ACM CCS, Nov. 2013.
[6] S. Bayer and J. Groth. Eﬃcient zero-knowledge argument for correctness
of a shuﬄe. In EUROCRYPT, Apr. 2012.
[7] M. Bellare and P. Rogaway. Random oracles are practical: a paradigm for
designing eﬃcient protocols. In ACM CCS, Nov. 1993.
[8] M. Ben-Or, O. Goldreich, S. Goldwasser, J. Håstad, J. Kilian, S. Micali,
and P. Rogaway. Everything provable is provable in zero-knowledge. In
CRYPTO, Aug. 1990.
[9] E. Ben-Sasson, I. Ben-Tov, A. Chiesa, A. Gabizon, D. Genkin,
M. Hamilis, E. Pergament, M. Riabzev, M. Silberstein, E. Tromer, and
M. Virza. Computational integrity with a public random string from
quasi-linear PCPs. In EUROCRYPT, Apr. 2017.
[10] E. Ben-Sasson, I. Bentov, Y. Horesh, and M. Riabzev. Fast
Reed-Solomon interactive oracle proofs of proximity. Electronic
Colloquium on Computational Complexity (ECCC), 24:134, 2017.
[11] E. Ben-Sasson, I. Bentov, Y. Horesh, and M. Riabzev. Scalable,
transparent, and post-quantum secure computational integrity.
Cryptology ePrint Archive, Report 2018/046, 2018.
[12] E. Ben-Sasson, A. Chiesa, C. Garman, M. Green, I. Miers, E. Tromer,
and M. Virza. Decentralized anonymous payments from Bitcoin. In
IEEE S&P, May 2014.
[13] E. Ben-Sasson, A. Chiesa, D. Genkin, E. Tromer, and M. Virza.
SNARKs for C: Verifying program executions succinctly and in zero
knowledge. In CRYPTO, Aug. 2013.
[14] E. Ben-Sasson, A. Chiesa, and N. Spooner. Interactive oracle proofs. In
IACR TCC, Oct. 2016.
[15] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza. Scalable zero
knowledge via cycles of elliptic curves. In CRYPTO, Aug. 2014.
[16] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza. Succinct
non-interactive zero knowledge for a von Neumann architecture. In
USENIX Security, Aug. 2014.
[17] E. Ben-Sasson and M. Sudan. Short PCPs with polylog query complexity.
SIAM J. Computing, 38(2):551–607, May 2008.
[18] D. J. Bernstein. Curve25519: new Diﬃe-Hellman speed records. In PKC,
Apr. 2006.
[19] D. J. Bernstein, J. Doumen, T. Lange, and J.-J. Oosterwijk. Faster batch
forgery identiﬁcation. Dec. 2012.
[20] N. Bitansky, R. Canetti, A. Chiesa, and E. Tromer. From extractable
collision resistance to succinct non-interactive arguments of knowledge,
and back again. In ITCS, Jan. 2012.
939
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:14 UTC from IEEE Xplore.  Restrictions apply. 
[53] J. Groth. Short pairing-based non-interactive zero-knowledge arguments.
[90] C. P. Schnorr. Eﬃcient signature generation by smart cards. J.
chosen-ciphertext security. In FOCS, Oct. 1999.
CRYPTO, Aug. 2009.
In ASIACRYPT, 2010.
[54] J. Groth and Y. Ishai. Sub-linear zero-knowledge argument for
correctness of a shuﬄe. In EUROCRYPT, Apr. 2008.
[55] J. Groth and A. Sahai. Eﬃcient non-interactive proof systems for bilinear
groups. In EUROCRYPT, Apr. 2008.
[56] J. Håstad, R. Impagliazzo, L. A. Levin, and M. Luby. A pseudorandom
generator from any one-way function. SIAM J. Computing,
28(4):1364–1396, 1999.
[57] S. Hohenberger, S. Myers, R. Pass, and abhi shelat. ANONIZE: A
large-scale anonymous survey system. In IEEE S&P, May 2014.
[58] Hyrax reference implementation. https://github.com/hyraxZK.
[59] Y. Ishai, E. Kushilevitz, and R. Ostrovsky. Eﬃcient arguments without
short PCPs. In IEEE CCC, June 2007.
[60] Y. Ishai, E. Kushilevitz, R. Ostrovsky, and A. Sahai. Zero-knowledge
from secure multiparty computation. In STOC, 2007.
[61] A. Kate, G. M. Zaverucha, and I. Goldberg. Constant-size commitments
to polynomials and their applications. In ASIACRYPT, Dec. 2010.
[62] J. Kilian. A note on eﬃcient zero-knowledge proofs and arguments
(extended abstract). In STOC, May 1992.
[63] J. Kilian. Improved eﬃcient arguments (preliminary version). In
CRYPTO, pages 311–324, Aug. 1995.
[64] A. E. Kosba, D. Papadopoulos, C. Papamanthou, M. F. Sayed, E. Shi, and
N. Triandopoulos. TrueSet: Faster veriﬁable set computations. In
USENIX Security, Aug. 2014.
[65] B. Libert, S. Ramanna, and M. Yung. Functional commitment schemes:
From polynomial commitments to pairing-based accumulators from
simple assumptions. In ICALP, July 2016.
[66] libsnark. https://github.com/scipr-lab/libsnark.
[67] libSTARK. https://github.com/elibensasson/libSTARK.
[68] Y. Lindell. Parallel coin-tossing and constant-round secure two-party
computation. J. Cryptology, 16(3):143–184, 2003.
[69] H. Lipmaa. Progression-free sets and sublinear pairing-based
non-interactive zero-knowledge arguments. In IACR TCC, 2011.
[70] C. Lund, L. Fortnow, H. J. Karloﬀ, and N. Nisan. Algebraic methods for
interactive proof systems. J. ACM, 39(4):859–868, Oct. 1992.
[71] U. Maurer. Unifying zero-knowledge proofs of knowledge. In
AFRICACRYPT, June 2009.
[72] R. C. Merkle. A digital signature based on a conventional encryption
function. In CRYPTO, Aug. 1987.
[73] S. Micali. Computationally sound proofs. SIAM J. Computing,
30(4):1253–1298, 2000.
[74] MIRACL crypto SDK. https://libraries.docs.miracl.com/.
[75] M. Naor. Bit commitment using pseudorandomness. J. Cryptology,
4(2):151–158, 1991.
[76] A. Naveh and E. Tromer. PhotoProof: Cryptographic image
authentication for any set of permissible transformations. In IEEE S&P,
May 2016.
[77] A. V. Oppenheim and A. S. Willsky. Signals and Systems. Pearson, 1996.
[78] C. Papamanthou, E. Shi, and R. Tamassia. Signatures of correct
computation. In IACR TCC, Mar. 2013.
[79] B. Parno, C. Gentry, J. Howell, and M. Raykova. Pinocchio: Nearly
practical veriﬁable computation. In IEEE S&P, May 2013.
[80] T. P. Pedersen. Non-interactive and information-theoretic secure
veriﬁable secret sharing. In CRYPTO, Aug. 1991.
[81] Pepper project. https://github.com/pepper-project.
[82] Reference implementation of the Picnic post-quantum signature scheme.
https://github.com/Microsoft/Picnic.
[83] N. Pippenger. On the evaluation of powers and monomials. SIAM J.
Computing, 9(2):230–250, 1980.
[84] A. Poelstra. Updates on conﬁdential transactions eﬃciency. Sent to the
bitcoin-dev email list.
https://lists.linuxfoundation.org/pipermail/bitcoin-
dev/2017-December/015346.html.
[85] D. Pointcheval and J. Stern. Security proofs for signature schemes. In
EUROCRYPT, May 1996.
[86] PyPy. https://pypy.org.
[87] O. Reingold, G. N. Rothblum, and R. D. Rothblum. Constant-round
interactive proofs for delegating computation. In STOC, June 2016.
[88] SageMath. http://www.sagemath.org/.
[89] A. Sahai. Non-malleable non-interactive zero knowledge and adaptive
Cryptology, 4(3):161–174, 1991.
[91] S. Setty, B. Braun, V. Vu, A. J. Blumberg, B. Parno, and M. Walﬁsh.
Resolving the conﬂict between generality and plausibility in veriﬁed
computation. In EuroSys, Apr. 2013.
[92] S. Setty, R. McPherson, A. J. Blumberg, and M. Walﬁsh. Making
argument systems for outsourced computation practical (sometimes). In
NDSS, Feb. 2012.
[93] S. Setty, V. Vu, N. Panpalia, B. Braun, A. J. Blumberg, and M. Walﬁsh.
Taking proof-based veriﬁed computation a few steps closer to practicality.
In USENIX Security, Aug. 2012.
[94] V. Shoup. NTL: A library for doing number theory.
[95] E. G. Straus. Addition chains of vectors (problem 5125). Amer. Math.
http://www.shoup.net/ntl/.
Monthly, 70:806–808, 1964.
[96] O. Tange. GNU Parallel: The command-line power tool. ;login: The
USENIX Magazine, 36(1):42–47, 2011.
[97] J. Thaler. Time-optimal interactive proofs for circuit evaluation. In
CRYPTO, Aug. 2013. Full version:
https://arxiv.org/abs/1304.3812.
[98] J. Thaler. A note on the GKR protocol.
http://people.seas.harvard.edu/~jthaler/GKRNote.pdf,
2015.
[99] J. Thaler, M. Roberts, M. Mitzenmacher, and H. Pﬁster. Veriﬁable
computation with massively parallel interactive proofs. In USENIX
HotCloud Workshop, June 2012.
[100] K. Turkowski. Filters for common resampling tasks. In Graphics Gems,
pages 147–165. Academic Press, 1990.
[101] M. Venkitasubramaniam. Personal communication, 2018.
[102] V. Vu, S. Setty, A. J. Blumberg, and M. Walﬁsh. A hybrid architecture for
interactive veriﬁable computation. In IEEE S&P, May 2013.
[103] R. S. Wahby, M. Howald, S. Garg, abhi shelat, and M. Walﬁsh. Veriﬁable
ASICs. In IEEE S&P, May 2016.
[104] R. S. Wahby, Y. Ji, A. J. Blumberg, abhi shelat, J. Thaler, M. Walﬁsh, and
T. Wies. Full accounting for veriﬁable outsourcing. In ACM CCS, Oct.
2017. Full version: https://eprint.iacr.org/2017/242/.
[105] R. S. Wahby, S. Setty, Z. Ren, A. J. Blumberg, and M. Walﬁsh. Eﬃcient
RAM and control ﬂow in veriﬁable outsourced computation. In NDSS,
Feb. 2015.
[106] R. S. Wahby, I. Tzialla, abhi shelat, J. Thaler, and M. Walﬁsh. Doubly
eﬃcient zkSNARKs without trusted setup. Cryptology ePrint Archive,
Report 2017/1132, 2017.
[107] ZCash. https://z.cash.
[108] Y. Zhang, D. Genkin, J. Katz, D. Papadopoulos, and C. Papamanthou.
vSQL: Verifying arbitrary SQL queries over dynamic outsourced
databases. In IEEE S&P, May 2017.
[109] Y. Zhang, D. Genkin, J. Katz, D. Papadopoulos, and C. Papamanthou. A
zero-knowledge version of vSQL. Cryptology ePrint Archive, Report
2017/1146, 2017.
[110] Y. Zhang, D. Genkin, J. Katz, D. Papadopoulos, and C. Papamanthou.
vRAM: Faster veriﬁable RAM with program-independent preprocessing.
In IEEE S&P, May 2018.
[111] ZKBoo. https://github.com/Sobuno/ZKBoo.
A Instantiations of commitment schemes
In this section, we review the Pedersen commitment scheme [80]
(Fig. 4) and related protocols.
Theorem 7 ([80]). The Pedersen commitment scheme is a non-
interactive commitment scheme assuming the hardness of the
discrete logarithm problem in G.
Knowledge of opening. Schnorr [90] shows how P can give a
ZK proof that it knows an x, r such that C0 = Com(x; r).
Theorem 8 ([90]). proof-of-opening is complete, honest-veriﬁer
perfect ZK, and special sound under the discrete log assumption.
Commitment to the same value. Using similar ideas, P can
show in ZK that C1 = Com(v1; s1) and C2 = Com(v2; s2) are
940
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:14 UTC from IEEE Xplore.  Restrictions apply. 
Pedersen Commitment Scheme
Deﬁnitions: Let G be a (multiplicative) cyclic group of prime
order qG with group operation (cid:14) and inverse (cid:19). V publishes
generators g, h ∈ G.
Com(m): P picks s $← {1, . . . , qG} and sends gm (cid:14) hs.
Open(α): P sends (m, s). V checks α ?= gm (cid:14) hs.
Multi-commitments: For commitments to vectors, V publishes

generators g1, . . . , gn, h ∈ G and P sends
Com((m1, . . . , mn)) = hs (cid:14)
gmi
i
i
Figure 4—The Pedersen commitment scheme.
proof-of-product(X, Y, Z)
Inputs: X = gx (cid:14) hrX , Y = gy (cid:14) hrY , and Z = gx·y (cid:14) hrZ .
P knows x,y,rX,rY, and rZ.
1. P picks b1, . . . , b5 $← {1, . . . , qG} and sends
δ ← X b3 (cid:14) hb5
α ← gb1 (cid:14) hb2
β ← gb3 (cid:14) hb4
2. V sends a challenge c $← {1, . . . , qG}
3. P sends
z1 ← b1 + c · x
z4 ← b4 + c · ry
z2 ← b2 + c · rx
z5 ← b5 + c(rz − rx y)
z3 ← b3 + c · y
4. V checks that
α (cid:14) X c ?= gz1 (cid:14) hz2
β (cid:14) Y c ?= gz3 (cid:14) hz4
δ (cid:14) Z c ?= X z3 (cid:14) hz5
(7)
(8)
(9)
Figure 5—ZK proof of knowledge for a product relationship (§A.1).
commitments to the same value, i.e., v1 = v2. Given Cu =
Com(u; su) and a value v, P can also convince V that u = v.
Theorem 9 (Folklore). proof-of-equality is complete, honest-
veriﬁer perfect zero-knowledge, and special sound under the
discrete log assumption.
A.1 Proving a product relationship
Figure 5 gives a protocol in which P convinces V that it has
openings to three Pedersen commitments having a product rela-
tionship. This is folklore; for example, we know that Maurer [71]
describes a very similar protocol.
Theorem 10. Given commitments X, Y, and Z, proof-of-product
proves that Z is a commitment to the product of the values
committed in X and Y. This protocol is complete, honest-veriﬁer
perfect zero-knowledge, and special sound under the discrete log
assumption.
The proof of Theorem 10 is standard; we leave it to the full
version [106] because of space constraints.
proof-of-dot-prod(ξ, τ, (cid:17)a)
Inputs: Commitments ξ = Com((cid:17)x; rξ), τ = Com(y; rτ), and a
vector (cid:17)a, where (cid:17)x, (cid:17)a ∈ Zn
P knows (cid:17)x, rξ, y, and rτ.
1. P samples the vector (cid:17)d $← {1, . . . , qG}n and the values
qG and y = (cid:6)(cid:17)x, (cid:17)a(cid:7) ∈ ZqG.
