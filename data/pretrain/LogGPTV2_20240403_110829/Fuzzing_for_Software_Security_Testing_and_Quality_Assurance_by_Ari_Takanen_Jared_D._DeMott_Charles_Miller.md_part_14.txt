quality assurance so that the end customer will understand it. Quality assurance
needs to be measurable, but the customer of the quality assurance process has to
be able to define and validate the metrics used. In some cases, the customer has to
also be able to rerun and validate the actual tests.
Our purpose in this book is to look at quality from the security testing perspec-
tive, and also to look at quality assurance definitions mainly from the third-party per-
spective. This, in most cases, means we are limited to black-box testing approaches.
3.3 Testing for Quality
Testing does not equal quality assurance. The main goal of testing is to minimize
the number of flaws in released products. Testing is part of a typical quality assur-
ance process, but there are many other steps before we get to testing. Understanding
different quality assurance methods requires us to understand the different steps
in the software development life cycle (SDLC). There have been many attempts to
describe software development processes, such as the waterfall approach, iterative
development, and component-based development.
3.3.1 V-Model
V-model is not necessarily the most modern approach to describing a software devel-
opment process. In real life, software development rarely follows such a straightfor-
ward process. For us, the V-model still offers an interesting view of the testing side
of things in the SDLC. Analyzing the software development from simple models is
useful no matter what software development process is used. The same functional
6760 Book.indb 79 12/22/17 10:50 AM
80 Quality Assurance and Testing
methods and tools are used in all software development including agile methods
and spiral software development processes.
The traditional V-model is a very simplified graphical view of typical software
development practices. It maps the traditional waterfall development model into
various steps of testing. Note that we are not promoting the V-model over any other
software development model. You should not use the V-model in your real-life soft-
ware development without careful consideration. Let’s analyze the steps in typical
V-model system development, shown in Figure 3.1.
The phases on the left-hand side are very similar to the overly simplified school-
book waterfall model of software development. It goes through the different steps,
from gathering requirements to the various steps of design and finally to the pro-
gramming phase. To us, the goal of the V-model is to enforce natural system bound-
aries at various steps and to enforce test-driven development at different levels of
integration. The requirements step results in creation of the acceptance criteria
used in acceptance testing. The first set of specifications describes the system at a
high level and sets the functional criteria for system testing. Architectural design
makes decisions on high-level integration of components that will be used to test
against in integration testing. Finally, detailed design defines the most detailed
testable units and the test criteria of unit testing. The V-model does not consider
the different purposes of testing; it only looks at the different levels of integration.
There are many specifics missing from the V-model when viewed from the security
testing perspective. Nevertheless, it is a good starting point when used in black-box
testing processes.
3.3.2 Testing on the Developer’s Desktop
Another set of quality assurance practices takes place even before we enter the testing
phase inside a typical waterfall model of software development. A majority of bugs
are caught in the programming phase. All the tools in the developer’s desktop are
tuned to catch human errors made during the programming and building phases.
Figure 3.1 V-model for the system development life cycle.
6760 Book.indb 80 12/22/17 10:50 AM
3.4 Main Categories of Testing 81
When code is submitted to build, it typically goes through rigorous code auditing.
This can be either manual or automated. Also, manual programmers use fuzzing
as part of unit testing.
3.3.3 Testing the Design
Software inspections and peer reviews are static analysis approaches to assessing
various attributes in software development documentation and code. Verification
of the design phase requires a formal review and complex automation tools. The
formal methods employed can include mathematical proofs of encryption algorithms
and analyses of the message flows used. For example, when a new protocol specifi-
cation is being designed, the dynamic operation of the protocol message exchange
needs to be carefully analyzed from the security perspective.
State machines in complex interfaces can also act as a source of information for
black-box testing. Test automation can help in trying out a complex state machine
to ensure that there are no deadlocks or unhandled exceptional situations.4
3.4 Main Categories of Testing
Software quality assurance techniques such as testing can be based on either static
analysis or dynamic analysis. Static analysis is offline analysis that is done to the
source code without any requirement to run the code. Dynamic analysis is a runtime
method that is performed while the software is executing. A good test process can
combine both of these approaches. For example, code optimization tools can aug-
ment the code when the code is executed with information that can later be used
in a static analysis. There are many different ways that the methods of testing can
be partitioned.
3.4.1 Validation Testing versus Defect Testing
Sommerville5 divides testing into validation testing and defect testing. The purpose
of validation testing is to show that the software functions according to user require-
ments. On the other hand, defect testing intends to uncover flaws in the software
rather than simulate its operational use. Defect testing aims at finding inconsisten-
cies between the system and its specification.
3.4.2 Structural versus Functional Testing
Another division of testing is based on access to the source code. These two catego-
ries are structural testing and functional testing.
Structural testing, or white-box testing, uses access to the source code to reveal
flaws in the software. Structural testing techniques can also be used to test the
4 An example of test automation framework that generates test cases from a state chart is the Con-
formiq Test Generator. www.conformiq.com/.
5 Ian Sommerville. Software Engineering, 8th ed. New York: Addison Wesley, 2006.
6760 Book.indb 81 12/22/17 10:50 AM
82 Quality Assurance and Testing
object code. Structural testing can be based on either static or dynamic analysis, or
their combination. The focus is on covering the internals of the product in detail.
Various source code coverage techniques are used to analyze the depth of structural
testing. One example of white-box testing is called unit testing, which concentrates
on testing each of the functions as you see them in the code.
Functional testing, or black-box testing, tests the software through external
interfaces. Functional testing is always dynamic and is designed on the basis of vari-
ous specification documents produced in different phases of the software develop-
ment process. A functional tester does not necessarily need to know the internals
of the software. Access to the code is unnecessary, although it can be helpful in
designing the tests.
Finally, gray-box testing is a combination of both the white-box and black-box
approaches, and it uses the internals of the software to assist in the design of the
tests of the external interfaces.
3.5 White-Box Testing
White-box testing has the benefit of having access to the code. In principle, the
only method of reaching 100% coverage (of some sort) in testing is with white-box
techniques. Different white-box testing techniques can be used to catch suspicious
code during the programming phase and also while the code is being executed. We
will next look at some relevant aspects of white-box testing techniques.
3.5.1 Making the Code readable
A prerequisite for catching problems is to make the code more readable and thereby
easier to understand and debug. Good programming practices and coding conven-
tions can help in standardizing the code, and they will also help in implementing
various automated tools in the validation process. An example of such quality
improvements is compile-time checks, which will detect use of insecure function
calls and structures.
3.5.2 Inspections and reviews
Static analysis methods, such as various types of inspections and reviews, are widely
used, and they are critical to the development of good-quality software. Inspections
can focus on software development documents or the actual code. A requirement for
successful inspections and reviews is agreeing on a policy on how the code should
be implemented. Several industry standards from bodies like IEEE have defined
guidelines on how and where inspections and reviews should be implemented.
3.5.3 Code Auditing
The simplest form of white-box testing is code auditing. Some people are more
skilled at noticing flaws in code, including security mistakes, than others. From
the security perspective, the most simple code auditing tools systematically search
6760 Book.indb 82 12/22/17 10:50 AM
3.5 White-Box Testing 83
the code looking for vulnerable functions, such as sprintf(), strcpy(), gets(), mem-
cpy(), scanf(), system(), and popen(), because they are often responsible for overflow
problems. Such a simplistic approach will necessarily reveal many false positives
because these functions can be used safely. More complex auditing tools analyze
the entire program’s structure, have models that represent common programming
errors, and compare the structure of the program to these models. Such tools will
greatly reduce the number of false positives as instead of just reporting the use of
‘strcpy,’ it analyzes whether the input is tainted by external data, or if the input has
been validated to be within relevant boundaries.
A code review can take place either offline or during compilation. Some static
analysis tools check the compiled result of the code, analyzing weaknesses in the
assembly code generated during compilation of the software module. Compilers
themselves are also integrated with various quality-aware functionalities, issuing
warnings when something suspicious is seen in the code or in an intermediate rep-
resentation. As mentioned above, the most common problem encountered with code
auditing tools is the number of false-positive issues, which are security warnings that
do not pose a security risk. Another problem with all code-auditing practices is that
they can only find problems they are taught to find. For example, the exploitable
security flaw in the following code snippet from an X11 bitmap-handling routine
might easily be missed by even the most skilled code auditing people and tools:
01 / *Copyright 1987, 1998 The Open Group – Shortened for
presentation!
02 * Code to read bitmaps from disk files. Interprets
03 * data from X10 and X11 bitmap files and creates
04 * Pixmap representations of files.
05 * Modified for speedup by Jim Becker, changed image
06 * data parsing logic (removed some fscanf()s). Aug 5, 1988 */
07
08 int XReadBitmapFileData (_Xconst char *filename,
09 unsigned int *width, / *RETURNED */
10 unsigned int *height, / *RETURNED */
11 unsigned char **data, / *RETURNED */
12 int *x_hot, / *RETURNED */
13 int *y_hot) / *RETURNED */
14
15 unsigned char *bits = NULL; / *working variable */
16 int size; / *number of data bytes */
17 int padding; / *to handle alignment */
18 int bytes_per_line; / *per scanline of data */
19 unsigned int ww = 0; / *width */
20 unsigned int hh = 0; / *height */
21
22 while (fgets(line, MAX_SIZE, file)) {
23 if (strlen(line) == MAX_SIZE-1) {
24 RETURN (BitmapFileInvalid);
25 }
26 if (sscanf(line,”#define %s %d”,name_and_type,&value) == 2) {
27 if (!(type = strrchr(name_and_type, ‘_’)))
6760 Book.indb 83 12/22/17 10:50 AM
84 Quality Assurance and Testing
28 type = name_and_type;
29 else
30 type++;
31
32 if (!strcmp(“width”, type))
33 ww = (unsigned int) value;
34 if (!strcmp(“height”, type))
35 hh = (unsigned int) value;
36 continue;
37 }
38
39 if (sscanf(line, “static short %s = {“, name_and_type) == 1)
40 version10p = 1;
41 else if (sscanf(line,”static unsigned char %s = {“,name_and_type)
== 1)
42 version10p = 0;
43 else if (sscanf(line, “static char %s = {“, name_and_type) == 1)
44 version10p = 0;
45 else
46 continue;
47
48 if (!(type = strrchr(name_and_type, ‘_’)))
49 type = name_and_type;
50 else
51 type++;
52
53 if (strcmp(“bits[]”, type))
54 continue;
55
56 if (!ww __ !hh)
57 RETURN (BitmapFileInvalid);
58
59 if ((ww % 16) && ((ww % 16) < 9) && version10p)
60 padding = 1;
61 else
62 padding = 0;
63
64 bytes_per_line = (ww+7)/8 + padding;
65
66 size = bytes_per_line * hh;
67 bits = (unsigned char *) Xmalloc ((unsigned int) size);
68 if (!bits)
69 RETURN (BitmapNoMemory);
n /* ... */
n+1 *data = bits;
n+2 *width = ww;
n+3 *height = hh;
n+4
n+5 return (BitmapSuccess);
n+6 }
6760 Book.indb 84 12/22/17 10:50 AM
3.6 Black-Box Testing 85
The simple integer overflow flaw in this example is on line 64:
bytes_per_line = (ww+7)/8 + padding;
This integer overflow bug does not have an adverse effect on the library routine
itself. However, when returned dimensions of width and height do not agree with
actual data available, this may cause havoc among downstream consumers of data
provided by the library. This indeed took place in most popular Web browsers on the
market and was demonstrated with PROTOS file fuzzers in July 2002 to be exploit-
able beyond denial of service.6 Full control over the victim’s browser was gained over
a remote connection. The enabling factor for full exploitability was conversion of
library routine provided image data from row-first format into column-first format.
When width of the image (ww) is in the range of (MAX_UINT6). .MAX_UINT;
that is, 4294967289 . . . 4294967295 on 32-bit platforms, the calculation overflows
back into a small integer.
This example is modified from X11 and X10 Bitmap handling routines that
were written as part of the X Windowing System library in 1987 and 1988, over 30
years ago. Since then, this image format has refused to go away, and code to handle
it is widely deployed in open source software and even on proprietary commercial
platforms. Most implementations have directly adopted the original implementa-
tion, and the code has been read, reviewed, and integrated by thousands of skilled
programmers. Very persistently, this flaw keeps reappearing in modern software.
3.6 Black-Box Testing
Testing will always be the main software verification and validation technique,
although static analysis methods are useful for improving the overall quality of
documentation and source code. When testing a live system or its prototype, real
data is sent to the target and the responses are compared with various test criteria to
assess the test verdict. In black-box testing, access to the source code is not necessary,
although it will help in improving the tests. Black-box testing is sometimes referred
to as functional testing, but for the scope of this book this definition can be mis-
leading. Black-box testing can test more than just the functionality of the software.
3.6.1 Software Interfaces
In black-box testing, the system under test is tested through its interfaces. Black-box
testing is built on the expected (or nonexpected) responses to a set of inputs fed to
the software through selected interfaces. As mentioned in Chapter 1, the interfaces
to a system can consist of, for example:
6 The PROTOS file fuzzers are one of the many tools that were never released by University of Oulu,
but the same functionality was included in the Codenomicon Images suite of fuzzing tools, released
in early 2003.
6760 Book.indb 85 12/22/17 10:50 AM
86 Quality Assurance and Testing
• User interfaces: GUI, command line;
• Network protocols;
• Data structures such as files;
• System APIs such as system calls and device drivers.
These interfaces can be further broken down into actual protocols or
data structures.
3.6.2 Test Targets
Black-box testing can have different targets. The various names of test targets
include, for example:
• Implementation under test (IUT);
• System under test (SUT);
• Device under test (DUT).