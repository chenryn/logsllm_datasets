        3. 为我的服务器上的“ nms”用户生成SSH密钥，并将公共密钥复制到NMS服务器中。（authorized_keys）
        4. 配置运行在NMS上的SSH服务器（以启用root权限登录PermitRootLogin）、TCP端口转发和网关端口。（即SSH -g开关）
        5. 将NMS服务器配置为充当内网探测的SOCKS代理。（动态SSH隧道）
        6. SOCKS隧道现在已加密，我可以使用此隧道利用Metasploit进行内网扫描。
### 开始行动
首先，我首先在服务器上添加用户`nms`，以便可以生成用户特定的SSH密钥。
我甚至更改了服务器的主机名，使其与NMS服务器的主机名完全相同，因此当我使用SSH登录时，日志将显示用户登录条目为nms@[REDACTED]_NMS[REDACTED]
接下来，我在本地服务器上为“ nms”用户生成了SSH密钥。
除此之外，还必须更改NMS服务器上的SSH配置，因此我从服务器下载了sshd_config文件，并更改了其中的一些内容。
**AllowTCPForwarding：** 此选项用于启用TCP端口转发。  
**GatewayPorts：**
此选项用于启用端口，该端口绑定到远程端口上的接口（回环除外）。（我启用了此选项，是为了此服务器上其他内部系统的反连shell能够通过反向端口转发将shell转发回本地）
PermitRootLogin：此选项允许客户端使用“ root”权限连接到SSH服务器。  
StrictModes：此选项指定SSH在接受登录之前，是否应检查用户在其主目录中的权限。
现在配置已完成，我迅速将sshd_config文件上传（更像是覆盖）到NMS服务器。
而且我还将SSH公钥复制到“ root”用户的authorized_keys文件中。
设置完所有内容后，我随后尝试了一个测试连接，看看能否在NMS服务器上使用“ root”来执行SSH！
额滴天鹅，成功了。
通过HTTP连接的TCP隧道的SSH（基于ABPTTS
Shell（JSP）的通过HTTP连接创建的TCP隧道上的SSH端口转发）。。。。（能不能再拗口点！！！）
### 动态端口转发（动态SSH隧道）
让我们看看维基百科是怎么定义的
>
> 动态端口转发（DPF）是一种通过使用防火墙针孔遍历防火墙或NAT的按需方法。目的是使客户端能够安全地连接到受信服务器，该受信服务器充当中介，目的是向一个或多个目标服务器发送/接收数据。  
>  DPF可以通过将本地应用程序（例如SSH）设置为SOCKS代理服务器来实现，用于处理通过网络或Internet的数据传输。  
>  建立连接后，可以使用DPF为连接到不受信任网络的用户提供额外的安全性。由于数据必须先通过安全隧道到达另一台服务器，然后再转发到其原始目的地，
> **因此可以保护用户免受LAN上数据包嗅探的影响。**
因此，我要做的就是创建一个 **动态SSH隧道** ，让NMS服务器可以充当SOCKS代理服务器。使用SOCKS隧道的一些好处：
    1. 通过NMS服务器间接访问其他网络设备/服务器（**NMS服务器成为我的网关**）
    2. 由于使用了**动态SSH隧道**，所有从本地服务器到NMS服务器的流量都已加密（使用SSH连接）
    3. 即使服务器管理员坐在NMS服务器上并监视网络，他也无法立即找到根本原因。（敬业的管理员可能会发现蛛丝马迹）
    4. 连接是稳定的（使用HTTP 的原因），现在所有这些递归隧道都可以顺利运行，因为通过HTTP实现的TCP隧道非常稳定。
当我通过SSH登录到NMS服务器时，这是'w'命令显示的内容：
现在，我要做的就是创建SOCKS隧道，使用以下命令：
    ssh -NfCq -D 9090 -i   -p 
基于这个原因，`sshd_config`文件中的“`PermitRootLogin`参数已被更改（以root权限登录到NMS服务器）。
担心服务器管理员会对设置有怀疑？通常，当打开SSH连接时，服务器管理员有时会检查登录的用户名和用于登录的授权密钥，但在大多数情况下，他会检查发起连接的主机名/IP。
就我而言，我使用2222端口（由于HTTP上的TCP隧道）从地址为127.0.0.1的服务器启动了连接，目标地址为`127.0.0.1`的`NMS`服务器。现在，由于有了此设置，他所看到的只是由NMS服务器到NMS服务器的SSH连接，该连接使用存储为用户`nms`的授权密钥（公共密钥）（这就是为什么我在主机上创建相同用户以生成密钥），即使管理员检查了`known_hosts文`件，他所看到的只是`nms@[REDACTED]_NMS[REDACTED]`用户已连接到SSH，其IP为`127.0.0.1`，而该ip早已存在于NMS中的用户配置文件中。
为了确认SOCKS隧道，我检查了本地服务器上的连接表，端口9090/tcp处于LISTEN状态。  
很棒！SOCKS隧道已准备就绪！
### 专业提示！
通过SSH连接到服务器时，将自动分配伪TTY。当然，当您通过SSH（单线）执行命令时，不会发生这种情况。因此，每当您想通过SSH建立隧道或创建SOCKS隧道时，请尝试使用-T选项禁用伪TTY分配。您还可以使用以下命令：
    ssh -NTfCq -L  
    ssh -NTfCq -D  
要检查所有SSH交换机，您可以参考SSH手册（强烈推荐！）。当使用交换机创建隧道时（如上所示），您可以创建一个无需分配TTY的隧道，并且隧道端口可以正常工作！
* * *
在上一部分中，我提到了使用本地服务器2222端口创建SSH隧道进行隐身SSH访问时的步骤。本部分将展示如何使用SOCKS隧道进行内网侦察，以及如何渗透内部服务器来访问存储在服务器中的CDR。
### 内网情况
在参与过程中，通过HTTP上的TCP隧道创建一个动态SSH隧道，这样的shell就很nice！  
接着在9090端口上配置了SOCKS隧道，然后通过代理使用NMap进行扫描。  
与NMap相比，Metasploit的扫描覆盖范围更大，并且更能够轻松管理内网IP扫描。为了对所有模块使用代理，设置`setg Proxies
socks4：127.0.0.1：9090`命令（全局设置代理选项）。使用了auxiliary/scanner/http/http_version模块来寻找内网服务器。  
由于使用了setg命令设置了Proxies选项，现在要做的只是提供IP子网范围并运行该模块。  
我找到了一些远程管理控制器（iRMC），一些SAN交换机（switchExplorer.html）和一个JBoss实例……
内部还有另一个JBoss实例吗？
### 渗透内网
因此，在内部IP
10.xxx的80端口上运行了另一个JBoss实例，因此，我要做的就是使用代理链并在内网IP上再次运行JexBoss（我也可以在JexBoss中使用-P选项来提供代理地址）。
该JBoss服务器很easy也攻下了。因此，我能够从我的关键机器（初始立足机器）获得RCE到下一个内部JBoss服务器。
获得shell之后，使用以下命令获取`/home/`位置下的所有文件和目录：
    cd /home/ | find . -print | sed -e “s;[^/]*/;|_ _ _ _;g;s;_ _ _ _|; |;g” 2>&1
输出结果发现一个有趣的.bat文件：`ss7-cli.bat`（该脚本配置了SS7命令行管理程序引导环境）
在同一台内部JBoss服务器中，还存储了一个访问者位置寄存器（VLR,Visitor Location
Register）控制台客户端应用程序，方便从数据库访问VLR信息。  
#### 什么是SS7？
>
> №7信令系统（SS7）是1975年开发的一组电话信令协议，用于在世界范围内的公共交换电话网（PSTN）的大部分地区建立和断开电话呼叫。该协议还执行号码转换、本地号码可携带性、预付费计费、短消息服务（SMS）等其他服务。资料来源：维基百科
为了监视SS7/ISDN链接、解码协议标准并生成CDR以进行计费，需要一个控制台客户端，该客户端与系统进行交互。  
您可能会问，为什么JBoss上运行着一个SS7客户端应用程序？一个字：`Mobicents`
### Mobicents
>
> Mobicents是一个用Java编写的开源VoIP平台，可帮助创建、部署、管理服务和应用程序，这些服务和应用程序可跨一系列IP和传统通信网络集成语音、视频和数据。资料来源：维基百科
>
> Mobicents支持服务构建模块（SBB,Service Building
> Blocks）的组合，例如呼叫控制，计费，用户供应，管理以及与状态相关的功能。这使Mobicents服务器成为电信运营支持系统（OSS）和网络管理系统（NMS）的便捷选择。资料来源：design.jboss.org
因此，看起来该JBoss服务器正在运行VoIP网关程序（SIP服务器），该应用程序正在使用SS7与公共交换电话网（PSTN）进行交互。（在没有任何类型的网络体系拓扑图的情况下，了解内网结构真是累死个人）
### 更进一步
当我在运行VoIP网关的内网JBoss程序中进行更多信息侦察时，发现有一些内部网关服务器，CDR备份数据库，存储了SS7和USSD协议备份配置的FTP服务器等（感谢`/etc/hosts`）  
从hosts文件中，我发现了很多FTP服务器，这些服务器起初我并不觉得很重要，但是后来我发现了CDR-S和CDR-L
FTP服务器。这些服务器分别存储备份的CDR S-Records和CDR L-Records。
使用Metasploit，我快速扫描了这些FTP服务器，检查它们的身份验证状态。  
无需任何身份验证即可访问FTP服务器
也许FTP服务器已被VoIP应用程序或其他程序当作内部专用，但捡着就是宝，不用白不用！
因此，我能够访问几乎所有移动订户以XLS格式存储的CDR备份。（由于是非常重要的信息，这里不得不马赛克）  
上图中，A Number是呼叫始发地（呼叫方），B
Number是所拨打的号码。CDR记录还包括IMSI和IMEI号码，呼叫开始/结束日期和时间戳，呼叫持续时间，呼叫类型（呼入或呼出），服务类型（电信服务公司），Cell
ID-A（来自此处的Cell Tower）呼叫始发和Location-A（呼叫者的位置）
当我们的团队询问客户有关我们对CDR备份服务器的访问权限时，客户便要求我们在此处结束我们的合作。我想他们可能接受不了这样的结果
the end
PS.原博主是分了四篇文章介绍这个过程的，我把它合成一篇了。
原文链接：  