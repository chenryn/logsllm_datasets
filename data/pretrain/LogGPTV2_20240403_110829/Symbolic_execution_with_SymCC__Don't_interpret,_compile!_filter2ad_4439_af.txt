### 基于方法的分析
基于方法的分析非常快速，甚至比当前无IR的技术更快。

### 致谢
我们特别感谢QSYM的第一作者Insu Yun，他帮助我们复现了QSYM论文[45]中报告的实验结果。此外，我们对Khaled Yakdan在本文早期版本中提供的反馈表示衷心的感谢。最后，我们要感谢匿名论文和工件评审者花时间研究我们的工作，并提供了建设性的反馈。本研究得到了DAPCODS/I-OTics ANR 2016项目（ANR-16-CE25-0015）的支持。

### 可用性
SYMCC可以在以下网址公开获取：http://www.s3.eurecom.fr/tools/symbolic_execution/symcc.html。该页面还包含了我们在评估中使用的所有程序的源代码链接以及实验的原始结果。SYMCC的代码库经过全面文档化，以供社区未来的研究使用。

### 参考文献
[1] Apple Inc. Swift.org – 编译器和标准库。https://swift.org/compiler-stdlib/#compiler-architecture.

[2] Fabrice Bellard. QEMU: 一个快速且可移植的动态翻译器。USENIX Annual Technical Conference, FREENIX Track, 卷41, 页46, 2005.

[3] Rastislav Bodík, Kartik Chandra, Phitchaya Mangpo Phothilimthana, 和 Nathaniel Yazdani. 领域特定符号编译。第2届编程语言进展峰会（SNAPL 2017）。Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik, 2017.

[4] Marcel Böhme, Van-Thuan Pham, Manh-Dung Nguyen, 和 Abhik Roychoudhury. 有向灰盒模糊测试。2017 ACM SIGSAC计算机与通信安全会议论文集, 页2329–2344. ACM, 2017.

[5] Cristian Cadar, Daniel Dunbar, 和 Dawson R. Engler. KLEE: 复杂系统程序的无人协助和自动生成高覆盖率测试。OSDI, 卷8, 页209–224, 2008.

[6] Cristian Cadar, Vijay Ganesh, Peter M. Pawlowski, David L. Dill, 和 Dawson R. Engler. EXE: 自动生成死亡输入。ACM信息与系统安全事务 (TISSEC), 12(2):10, 2008.

[7] Sang Kil Cha, Thanassis Avgerinos, Alexandre Rebert, 和 David Brumley. 在二进制代码上释放Mayhem。2012 IEEE安全与隐私研讨会, 页380–394. IEEE, 2012.

[8] Hongxu Chen, Yinxing Xue, Yuekang Li, Bihuan Chen, Xiaofei Xie, Xiuheng Wu, 和 Yang Liu. Hawkeye: 一种期望的有向灰盒模糊测试工具。2018 ACM SIGSAC计算机与通信安全会议论文集, 页2095–2108. ACM, 2018.

[9] Vitaly Chipounov, Volodymyr Kuznetsov, 和 George Candea. S2E: 一种用于软件系统多路径分析的平台。ACM SIGARCH计算机架构新闻, 卷39, 页265–278. ACM, 2011.

[10] Nassim Corteggiani, Giovanni Camurati, 和 Aurélien Francillon. Inception: 真实嵌入式系统软件的全系统安全性测试。27th USENIX Security Symposium (USENIX Security 18), 页309–326, 2018.

[11] Leonardo De Moura 和 Nikolaj Bjørner. Z3: 一种高效的SMT求解器。国际工具和算法构造及系统分析会议, 页337–340. Springer, 2008.

[12] Joe W. Duran 和 Simeon Ntafos. 关于随机测试的报告。第五届国际软件工程会议 (ICSE '81) 论文集, 页179–183, Piscataway, NJ, USA, 1981. IEEE Press.

[13] E. Allen Emerson 和 Edmund M. Clarke. 使用不动点表征并行程序的正确性属性。自动机、语言和编程国际学术讨论会, 页169–181. Springer, 1980.

[14] Shuitao Gan, Chao Zhang, Xiaojun Qin, Xuwen Tu, Kang Li, Zhongyu Pei, 和 Zuoning Chen. CollAFL: 路径敏感的模糊测试。2018 IEEE安全与隐私研讨会, 页679–696. IEEE, 2018.

[15] Go git 存储库。https://go.googlesource.com/gollvm/.

[16] Patrice Godefroid, Nils Klarlund, 和 Koushik Sen. DART: 有向自动化随机测试。ACM Sigplan Notices, 卷40, 页213–223. ACM, 2005.

[17] Patrice Godefroid, Michael Y. Levin, 和 David Molnar. Sage: 用于安全测试的白盒模糊测试。ACM通讯, 55(3):40–44, 2012.

[18] Alex Horn. Clang CRV前端。https://github.com/ahorn/native-symbolic-execution-clang, 2014.

[19] Alex Horn. SMT Kit。https://github.com/ahorn/smt-kit, 2014.

[20] C.-A. Hsieh, M. T. Conte, T. L. Johnson, J. C. Gyllenhaal, 和 W.-W. Hwu. 提高Java性能的编译器。Computer, 30(6):67–75, 1997年6月.

[21] Soomin Kim, Markus Faerevaag, Minkyu Jung, SeungIl Jung, DongYeop Oh, JongHyup Lee, 和 Sang Kil Cha. 二进制分析的中间表示测试。第32届IEEE/ACM国际自动化软件工程会议论文集, 页353–364. IEEE Press, 2017.

[22] James C. King. 符号执行和程序测试。ACM通讯, 19(7):385–394, 1976.

[23] George Klees, Andrew Ruef, Benji Cooper, Shiyi Wei, 和 Michael Hicks. 模糊测试评估。2018 ACM SIGSAC计算机与通信安全会议论文集, 页2123–2138, 2018.

[24] Volodymyr Kuznetsov, Johannes Kinder, Stefan Bucur, 和 George Candea. 符号执行中的高效状态合并。ACM Sigplan Notices, 卷47, 页193–204. ACM, 2012.

[25] Chris Lattner 和 Vikram Adve. LLVM: 一种用于终生程序分析与转换的编译框架。国际代码生成和优化研讨会: 反馈导向和运行时优化, 页75. IEEE Computer Society, 2004.

[26] LLVM项目. "libc++" C++标准库。https://libcxx.llvm.org/.

[27] LLVM项目. libFuzzer – 一种基于覆盖率引导的模糊测试库。https://llvm.org/docs/LibFuzzer.html.

[28] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, 和 Kim Hazelwood. Pin: 使用动态插桩构建定制程序分析工具。ACM Sigplan Notices, 卷40, 页190–200. ACM, 2005.

[29] Nicholas Nethercote 和 Julian Seward. Valgrind: 一种重型动态二进制插桩框架。ACM SIGPLAN 2007编程语言设计与实现会议 (PLDI 2007), 卷42, 页89–100. ACM, 2007.

[30] Anh Nguyen-Tuong, David Melski, Jack W. Davidson, Michele Co, William Hawkins, Jason D. Hiser, Derek Morris, Ducson Nguyen, 和 Eric Rizzi. Xandra: 一种自主网络战斗系统。IEEE安全与隐私, 16(2):42–51, 2018.

[31] Sebastian Österlund, Kaveh Razavi, Herbert Bos, 和 Cristiano Giuffrida. Parmesan: 清洁器引导的灰盒模糊测试。第29届USENIX安全研讨会 (USENIX Security 20), 2020.

[32] Sebastian Poeplau 和 Aurélien Francillon. 符号执行系统的系统比较: 中间表示及其生成。第35届年度计算机安全应用会议论文集, 页163–176. ACM, 2019.

[33] Jean-Pierre Queille 和 Joseph Sifakis. CESAR中的并发系统规范与验证。编程国际学术讨论会, 页337–351. Springer, 1982.

[34] Florent Saudel 和 Jonathan Salwan. Triton: 一种动态符号执行框架。信息安全与通信技术研讨会, SSTIC, 法国, 雷恩, 2015年6月3-5日, 页31–54. SSTIC, 2015.

[35] Koushik Sen, Darko Marinov, 和 Gul Agha. CUTE: 一种C语言的共构单元测试引擎。ACM SIGSOFT软件工程笔记, 卷30, 页263–272. ACM, 2005.

[36] Konstantin Serebryany, Derek Bruening, Alexander Potapenko, 和 Dmitriy Vyukov. AddressSanitizer: 一种快速地址检查器。2012 USENIX年度技术会议 (USENIX ATC 12), 页309–318, 2012.

[37] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino, Andrew Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel, 等. SoK: (现状) 二进制分析的进攻技术。2016 IEEE安全与隐私研讨会, 页138–157. IEEE, 2016.

[38] Evgeniy Stepanov 和 Konstantin Serebryany. MemorySanitizer: 一种快速检测C++中未初始化内存使用的工具。第13届年度IEEE/ACM代码生成与优化国际研讨会论文集, 页46–55. IEEE Computer Society, 2015.

[39] Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu Wang, Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, 和 Giovanni Vigna. Driller: 通过选择性符号执行增强模糊测试。NDSS, 卷16, 页1–16, 2016.

[40] Clang团队. Clang C语言家族前端。https://clang.llvm.org/, 2019.

[41] Rust编程语言团队. rustc开发指南。https://rust-lang.github.io/rustc-guide/, 2019.

[42] Emina Torlak 和 Rastislav Bodik. 一种轻量级的符号虚拟机，用于辅助主机语言。ACM SIGPLAN Notices, 卷49, 页530–541. ACM, 2014.

[43] Trail of Bits. 使用KLEE-Native进行二进制符号执行。https://blog.trailofbits.com/2019/08/30/binary-symbolic-execution-with-klee-native/, 2019.

[44] Clark Wiedmann. APL解释器和编译器之间的性能比较。SIGAPL APL Quote Quad, 13(3):211–217, 1983年3月.

[45] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, 和 Taesoo Kim. QSYM: 一种适用于混合模糊测试的实际共构执行引擎。第27届USENIX安全研讨会 (USENIX Security 18), 页745–761, 2018.

[46] Michał Zalewski. American Fuzzy Lop. http://lcamtuf.coredump.cx/afl/.

### SYMCC使用示例
图4展示了与SYMCC交互的一个示例：首先编译显示在清单3中的程序，模拟登录界面。然后我们用初始测试输入运行程序，并演示了共构执行如何生成新的测试输入，使我们能够访问程序中最有趣的部分。尽管这是一个非常基础的例子，但我们希望它能让读者了解如何使用SYMCC。

```c
#include <iostream>
int main(int argc, char *argv[]) {
    std::string name;
    std::cout << "What's your name? ";
    std::cin >> name;
    if (name == "root")
        std::cout << "Hello, root!" << std::endl;
    else
        std::cout << "Hello, " << name << "!" << std::endl;
}
```

```shell
$ symcc -o login login.cpp
$ ./login
What's your name?
john
Hello, john!
$ cat /tmp/symcc/000008-optimistic
root
```

清单4: 展示用户如何编译和运行清单3中的程序的shell会话。以美元符号开头的行表示用户输入的命令。请注意，分析建议“root”作为新的测试输入。

在较大的软件项目中，通常只需在调用相应的构建系统之前导出`CC=symcc`和`CXX=sym++`；它将拾取编译器设置并透明地构建一个插桩的目标程序。

### NRFIN_00007的奇怪案例
CGC程序NRFIN_00007包含一个bug，该bug会根据编译器和编译标志改变程序的可观测行为。我们认为这与程序中预期的漏洞（即由某些用户输入触发的缓冲区溢出）无关。清单5显示了程序主函数的一个摘录。在初始化期间（在读取任何用户输入之前），它检查未初始化的变量`ret`，如果其值非零则提前退出。在实际执行中，这会导致程序根据编译器选择的堆栈布局提前退出。由于SYMCC、KLEE和QSYM都使用不同的方式来编译目标程序，这个bug会在我们的评估中引入错误；因此我们将NRFIN_00007从测试集中排除。

```c
int main(void) {
    int ret;
    size_t size;
    malloc_init();
    if (ret != 0)
        _terminate(ret);
    // ...
}
```

清单5: NRFIN_00007代码中的一个bug。变量`ret`被未初始化使用；如果其值非零，程序将在从未读取用户输入的情况下提前退出。