### Optimization of Variable Intervals and Control Flow Analysis

When a variable's interval is updated more than a specified number of times, we expand it to \((-\infty, \infty)\). In our experiments, this threshold is set to 5. Additionally, we limit the maximum number of variables in a function to 50. We also specify that 40% of the code should be contained within loops.

For control flow analysis, we initialize some identity functions at the beginning and use branches in the main function to adjust the possible functions a variable can refer to. We define "multiplicity" as the maximum number of functions a variable can reference, setting this value to 8. The maximum number of variables in a function remains 50. The remaining program is generated using random statements.

### Experimental Results

We present the size of the circuits produced by our zero-knowledge abstract interpretation schemes for three types of analyses (tainting, interval, and control flow) on synthetic programs with varying parameters and sizes in Figure 6 of Appendix E. All programs are scaled to the largest instances that can be handled on our machine, and the performance of these largest programs is detailed in Table 3. Our results show that we can perform tainting analysis on a program with 12,800 lines of code, interval analysis on a program with 2,000 lines of code, and control flow analysis on a program with 4,000 lines of code. The R1CS (Rank-1 Constraint System) produced by our zkAI (Zero-Knowledge Abstract Interpretation) ranges from 41.3 to 57 million constraints. We successfully run the backend of Spartan [61] on these R1CS instances. For example, the tainting analysis has a prover time of 406 seconds, a proof size of 282 KB, and a verifier time of 65.8 seconds. The SNARK backend [42] runs out of memory but can handle half of these largest instances, with an estimated prover time of around 4500 seconds, a proof size of 128 bytes, and a verification time of 1.4 milliseconds.

### Proving Absence of Bugs

We selected two examples from our experiments: tainting analysis on synthetic programs with 50 variables and interval analysis on synthetic programs with 50 variables and 20% of the code in loops. We implemented their corresponding validation algorithms in Algorithm 5, and Figure 5 shows the circuit sizes. As depicted in Figure 5, the circuit size is 1.9-2× smaller for tainting checks and 2.4-2.8× smaller for interval analysis. This improvement is primarily due to the validation algorithm only traversing all flows once, whereas the worklist algorithm iterates until convergence. The savings from reducing push operations in the queue and join operations in the lattice are relatively small.

### Conclusion

We have demonstrated the application of zero-knowledge proofs to static program analysis, specifically using the framework of abstract interpretation. We described both intra-procedural and inter-procedural analyses for a core imperative language, provided implementation details for efficient execution in zero knowledge, and presented evaluation results showing the practicality of our approach in real-world settings.

Although our focus is on a scenario where a prover demonstrates that a secret program is free of bugs, there are broader applications of zero-knowledge abstract interpretation to explore in future work. For instance, this approach could accelerate the performance of demonstrating proof-of-exploit in zero knowledge. Prior work on proof-of-exploit involves simulating the concrete execution of a program from a specific input that reaches the exploit. By applying the abstract interpretation framework to compute sound under-approximations, we could significantly enhance the efficiency of zero-knowledge proof of exploit. Such an approach could be efficiently verified without computing fixpoints, as shown for over-approximations in Section 5, and provide an irrefutable guarantee of the exploit's existence (i.e., no false positives).

### Acknowledgment

We thank Michael Walfish for his valuable discussions, which inspired this work. This research was supported by DARPA under Contract No. HR001120C0087 and by NSF under awards CCF-2119939. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of DARPA.

### References

[References section remains unchanged]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the essential content and structure of the original text.