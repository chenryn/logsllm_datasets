1 (gmi)byi. It
then randomizes these to obtain E(cid:48)
y (by multiplying with an encryption of 0 using randomness
rx, ry ∈R Fp respectively). It sends (σw, σz, E(cid:48)
y) to the user and gives a proof that these values
have been generated correctly with respect to ( (cid:126)X, (cid:126)Y , Cx0, Cy0, Cz) (i.e., a proof of knowledge of the
appropriate ((cid:126)x, (cid:126)y, z, ˜x, ˜y, ˜z, b, rx, ry)). If the proof does not verify, the user outputs ⊥. Otherwise, the
user decrypts E(cid:48)
1 (gmi)bxi and an encryption Ey of σy = gby0(cid:81)n
y to get σx and σy respectively, and outputs σ = (σw, σx, σy, σz).
x and E(cid:48)
x and E(cid:48)
x, E(cid:48)
As with the MACGGM scheme, credential translation is also possible with the MACDDH scheme.
Credential presentation. Here we present a construction for Show and ShowVerify. Again, we focus
on how to show that the credential certiﬁes attributes matching those in a given set of commitments.
i ): The prover chooses r, rx, ry, z1, . . . , zn ∈R Fp and parses cred =
Show(params, iparams, φ, cred ,{mi}n
y, and
(σw, σx, σy, σz). It ﬁrst randomizes the credential by computing σw = σr
σz = σr
z, and then computes
w, σx = σr
x, σy = σr
{Cmi := σmi
w hzi}n
i=1, Cσx := σxgrx, Cσy := σygry , Vx := g−rx
i , and Vy := g−ry
X zi
Y zi
i
.
n(cid:89)
n(cid:89)
i=1
i=1
10
It then sends σ = (σw, σz, Cσx, Cσy , Vx, Vy,{Cmi}n
computes as
n(cid:89)
π = PK{ (cid:126)m, (cid:126)z,−rx,−ry) : φ(m1, . . . , mn) = 1 ∧ Cmi = σm1
zi ∧ Vy = g−ry
∧ Vx = g−rx
Xi
n(cid:89)
i }.
Y zi
w hz1 ∀ i ∈ {1, . . . , n}
i ) along with a proof of knowledge π, which it
ShowVerify(params, iparams, φ,{xi, yi}n
Cσy ) and veriﬁes that
Vx =
i=1
i=1
i , z, σ, π): The veriﬁer parses σ = (σw, σy, σz, Vx, Vy,{Cmi}n
(cid:81)n
(cid:81)n
i , Cσx,
σx0
w
i=1 Cxi
mi
Cσx
and Vy =
σy0
w
i=1 Cyi
mi
Cσy
.
It then veriﬁes the proof π.
(Cm1, . . . , Cmn), and otherwise it rejects and outputs ⊥.
If the proof is valid and if σz = σz
w it accepts and outputs
Security. We give a formal proof of the following theorem in Appendix C.
Theorem 4. If DDH holds and the proof system is a zero-knowledge proof of knowledge satisfying the
property described in Appendix D, the above algorithms (CredKeygen, Issue, CredVerify, Show, ShowVerify,
BlindIssue, BlindObtain) make up a secure keyed-veriﬁcation credential system.
Intuitively, credential unforgeability follows from the unforgeability of the MAC (which is based on
DDH) and extractability of the proofs; credential anonymity follows from the zero knowledge property
of the proofs; blind issuance follows from zero knowledge and extractability of the proofs and the IND-
CPA security of the encryption scheme (which, for ElGamal, follows from DDH); and key-parameter
consistency follows from the binding property of the commitment scheme (which, for Pedersen com-
mitments, follows from the discrete log assumption, which is implied by DDH). In Appendix D we
discuss several possible instantiations of the zero-knowledge proof of knowledge.
5 Eﬃciency
In this section we compare the eﬃciency of our new schemes to U-Prove and Idemix. We focus on
the computational cost of creating a presentation proof, as this operation typically must be done
by the largest range of devices. We consider the MACGGM- and MACDDH-based schemes, where the
proof system is implemented with Fiat-Shamir (full details of MACGGM are given in Appendix E, and
MACDDH is very similar). Using the proof system from [16] will have essentially the same computational
cost. Complete descriptions of Idemix and U-Prove are available in [22] and [25] respectively. As the
recent scheme of Baldimtsi and Lysyanskaya [2], is strictly less eﬃcient than U-Prove, we omit it from
our comparison. For the bilinear CL signature schemes [1, 10], detailed speciﬁcations and paramter
choies are not available; we made a rough estimate assuming the scheme was implemented with a
256-bit elliptic curve group, and that a pairing requires 1ms on our benchmark hardware. We ignored
the cost of arithemtic in the target group (i.e., GT the range of the pairing).
Credential Size. Table 1 shows the size of a credential in all four schemes, both asymptotically,
and for a concrete choice of parameters. The parameter s is the number of times the credential may be
shown unlinkably (which is relevant for U-Prove). The size only counts the cryptographic components
of the credential, the metadata and attribute values are assumed to be the same for all systems. The
overhead of MACGGM is the lowest, followed by MACDDH, which is the size of a single U-Prove token.
The size of SRSA group elements makes Idemix credentials larger than MACGGM and MACDDH, and
Idemix credentials are smaller than U-Prove credentials once s > 5.
11
Credential size for s shows, n attributes
Asymptotic
Concrete (in bits)
U-Prove
Idemix
Bilinear CL
MACGGM
MACDDH
O(s)
O(1)
O(n)
O(1)
O(1)
1024s
5369
512n + 768
512
1024
Table 1: Comparison of credential sizes of U-Prove, Idemix, MACGGM and MACDDH. The number of times the
credential may be shown is denoted s. U-Prove, bilinear CL, MACGGM and MACDDH use a 256-bit elliptic curve
group. Idemix uses a 2048-bit modulus.
Computation Cost for Presentation. We estimate the cost of creating a presentation proof and
compare the four schemes. Our estimate is formed by counting the number of multi-exponentiations
required to create a presentation proof. We use the notation (cid:96)-exp to denote computing the product
of (cid:96) powers. To realistically estimate the performance of Idemix, the bitlengths of the exponents
must also be considered, so we use the notation (cid:96)-exp(b1, . . . , b(cid:96)) to denote the product of (cid:96) powers
when the bitlengths of the exponents are b1, . . . , b(cid:96). These bitlengths are calculated from the Idemix
speciﬁcation [22]. For U-Prove, MACGGM and MACDDH the bitlength of the exponent is always the
length of the group order (256-bits in our comparison).
Table 2 gives the number of multi-exponentiations in terms of three parameters: n is the number
of attributes in a credential, r is the number of revealed attributes in a presentation proof, and c is the
number of committed attributes. (As discussed in section 4, we focus on the part of the protocol which
proves that certiﬁed attributes match those in a set of commitments; the rest of the presentation
is essentially the same in all of the schemes we consider. We diﬀerentiate between revealed and
committed attributes because one can simplify the protocols in the case where attributes will be
directly revealed.) For each committed attribute m, a separate Pedersen commitment is output. As
a further comparison, Table 2 includes the time required to compute these multi-exponentiations for
a given choice of parameters (n, c, r). Our multi-exponentiation implementation in G uses the NIST
256-bit elliptic curve, and for Idemix uses the parameters in [22]. The benchmarks were computed on
an Intel Xeon CPU (E31230, quad core, 3.2 GHz) on an HP Z210 workstation running Windows 7
(64-bit). The times are in milliseconds, and are the average of 100 runs.
The times given in Table 2 show that the new schemes are competitive with U-Prove, especially
when most of the attributes are committed, and that they are much faster than Idemix. In particular,
in the ﬁrst benchmark (when (n, c, r) = (10, 2, 2)), MACGGM is 6.28 times faster than Idemix, and
MACDDH is 4.7 times faster than Idemix. Compared to U-Prove, MACGGM and MACDDH are 3.4 and
4.5 times slower, much less than the 21.2 times slowdown for Idemix.
In the second benchmark, when (n, c, r) = (10, 10, 0), the performance of U-Prove, MACGGM and
MACDDH are very similar. MACGGM and MACDDH are only 1.04 and 1.5 times slower than U-Prove.
Idemix is 18.2, 16.3 and 12.5 times slower than U-Prove, MACGGM and MACDDH, respectively.
There is a large diﬀerence between the two benchmarks for U-Prove, Idemix and bilinear CL, but
only a small diﬀerence for MACGGM and MACDDH. This is because the presentation protocols for the
new schemes create commitments for all unrevealed attributes, so any change in the c parameter will
not aﬀect their performance. In the ﬁrst set of benchmarks, with two fewer unrevealed attributes,
MACGGM and MACDDH are slightly faster, because they save computing two commitments and proving
knowledge of the openings. Designing a presentation protocol for MACGGM which uses a multicommit-
12
U-Prove
MACGGM
MACDDH
Idemix
Number of exponentiations
1 (n − r + 1)-exp, 2c 2-exp
3 1-exp, 1 (n − r + 1)-exp
2(n − r) 2-exp
6 1-exp, 2 (n − r + 1)-exp
2(n − r + 1) 2-exp
1 1-exp(2048)
c 2-exp(256, 2046)
c 2-exp(592, 2385)
1 (n − r + 2)-exp(456,3060,592,. . . ,592)
Time (in ms) when (n, c, r) =
(10,2,2)
(10,10, 0)
3.38
11.42
15.31
71.72
12.43
13.93
18.10
226.79
Bilinear CL 3 + n pairings
20.98
28.32
(3 + n) 1-exp, 2c 2-exp
Table 2: Comparison of estimated presentation proof generation cost. U-Prove, bilinear CL, MACGGM and
MACDDH use 256-bit elliptic curve parameters, and Idemix uses a 2048-bit modulus.
ment to all unrevealed attributes (as U-Prove and Idemix do) is an interesting open problem — this
would close the performance gap when compared to U-Prove.
Discussion. These performance estimates show that the new schemes do provide a considerable
performance advantage when compared to Idemix, and a small decrease compared to U-Prove. The
other protocols, namely issuance and veriﬁcation, have similar relative performance (for the user and
issuer). In the case of issuance, our new schemes are expected to have slightly higher computational
cost than issuing a single U-Prove token, but with one less round of interaction (when implemented with
Fiat-Shamir proofs). When issuing multiple tokens, MACGGM and MACDDH have the best performance.
In all protocols, the cost of veriﬁcation is within a small factor of the cost of proof generation.
We note some limitations of our comparison. First, the comparison is limited to applications
where the issuer and veriﬁer share a key; otherwise MACGGM and MACDDH are not applicable. The
parameter set used for Idemix is not believed to provide 128-bit security, so this favors Idemix in the
comparison. For RSA, a 3072-bit modulus is required for 128-bit security, and for strong RSA we
are unaware of any published guidance on choosing the modulus size. (Idemix would need at least
a 3072-bit modulus for 128-bit security.) Another limitation is our choices of (n, c, r), which will be
diﬀerent across applications. Once an application is ﬁxed, optimizations may be possible, such as
creating a single commitment to multiple attributes, or re-using the same commitment in multiple
presentations (e.g., when the commitment is used as a pseudonym).
References
[1] M. Au, W. Susilo, and Y. Mu. Constant-size dynamic k-TAA. Proceedings of SCN 2006, LNCS 4116 (2006), 111-125.
[2] F. Baldimtsi and A. Lysyanskaya. Anonymous Credentials Light. Proceedings of ACM CCS 2013, ACM Press, (2013).
To appear.
[3] M. Belenkiy, J. Camenisch, M. Chase, M. Kohlweiss, A. Lysyanskaya and H. Shacham. Randomizable proofs and
delegatable anonymous credentials. Proceedings of CRYPTO 2009, LNCS 5677, (2009), 108–125.
[4] M. Bellare and O. Goldreich. On Deﬁning Proofs of Knowledge. Proceedings of CRYPTO 1992, LNCS 740 (1993),
390–420
13
[5] P. Bichsel, J. Camenisch, T. Groß, and V. Shoup. Anonymous Credentials on a Standard Java Card. Proceedings
ACM CCS 2009, ACM Press, (2009) 600–610.
[6] D. Boneh. The Decision Diﬃe-Hellman Problem. Proceedings of ANTS-III, LNCS 1423 (1998), 48–63.
[7] S. Brands. Rethinking Public Key Infrastructures and Digital Certiﬁcates. The MIT Press, August 2000.
[8] J. Camenisch and A. Lysyanskaya. An Eﬃcient System for Non-Transferable Anonymous Credentials with Optional
Anonymity Revocation. Proceedings of EUROCRYPT 2001, LNCS 2045 (2001), 93–118.
[9] J. Camenisch and A. Lysyanskaya. A Signature Scheme with Eﬃcient Protocols. Proceedings of SCN 2003, LNCS
2576 (2003), 268–289.
[10] J. Camenisch and A. Lysyanskaya. Signature Schemes and Anonymous Credentials from Bilinear Maps. Proceedings
of CRYPTO 2004, LNCS 3152 (2004), 56–72.
[11] J. Camenisch and M. Stadler. Proof Systems for General Statements About Discrete Logarithms. Technical Report
TR 260 (1997), Institute for Theoretical Computer Science, ETH Zurich.
[12] D. Cash, E. Kiltz, and V. Shoup. The Twin Diﬃe-Hellman Problem and Applications Proceedings of Eurocrypt
2008, LNCS 4965 (2008), 127–145.
[13] D. Chaum. Security without Identiﬁcation: Transaction Systems to Make Big Brother Obsolete. Communications
of the ACM 28(10) (1985), 1030–1044.
[14] J. Chen, H. Lim, S. Ling, H. Wang, and H. Wee. Shorter IBE and Signatures via Asymmetric Pairings. Proceedings
of Pairing 2012, LNCS 7708,(2012), 122–140.
[15] R. Cramer, R. Gennaro, and B. Schoenmakers. A Secure and Optimally Eﬃcient Multi-Authority Election Scheme.
Proceedings of EUROCRYPT’97, LNCS 1233, (1997), 103–118.
[16] I. Damg˚ard. Eﬃcient Concurrent Zero-Knowledge in the Auxiliary String Model. Proceedings of EUROCRYPT
2000, LNCS 1807 (2000), 418430.
[17] Y. Dodis, E. Kiltz, K. Pietrzak, D. Wichs. Message Authentication, Revisited. Proceedings of EUROCRYPT’12,
LNCS 7237 (2012), 355–374.