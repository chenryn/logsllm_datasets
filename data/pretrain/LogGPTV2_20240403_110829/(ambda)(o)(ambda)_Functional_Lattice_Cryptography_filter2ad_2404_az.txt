observed by the adversary, times a poly(𝑛) factor [Alw+13]). However, as discussed
in [BPR12], the family may not require such large parameters for concrete security. Indeed,
even for rather small values of 𝑛 and 𝑝—much smaller than those typically required for
public-key schemes—the family appears to be secure against all classes of attacks that are
usually employed against lattice-based cryptography. (See section 6.5 for further details.)
6.4.2 PRF Instantiation
We instantiate this PRF with 𝑚 = 128 (corresponding to 𝑛 = 64) and 𝑝 = 32. Our
implementation uses the arithmetization given in section 6.3, which is the most efﬁcient for
this choice of 𝑝. We emphasize that these parameters are substantially more aggressive than
those that have been proven secure based on LWE and worst-case lattice problems [BPR12;
Alw+13]. However, as we show in section 6.5, they still appear to provide more than 100
bits of security against all known attacks. This state of affairs may be explained by the fact
that the known proofs of security (which only provide lower bounds on security) appear
quite loose in terms of parameters.
Here we summarize how the parameters 𝑛 and 𝑝 affect the security of our PRF instantia-
tion and the efﬁciency of its homomorphic evaluation.
184
• The ring dimension 𝑛 of 𝑅 is the primary security parameter of the PRF, i.e., security
grows exponentially with 𝑛 (for large enough 𝑝). Since secret-key elements from 𝑅𝑝
are encrypted under the SHE, this ring will be the initial SHE plaintext space; however,
for security it must be embedded in a much larger ciphertext ring (see section 4.3).
Therefore, 𝑛 turns out to have almost no effect on the efﬁciency of the homomorphic
(subset-)product. However, it does moderately affect the efﬁciency of the rounding
step, because we need to switch to a different ring 𝑆 (via the tunneling procedure
in section 4.2; see below) having at least 𝑛 CRT slots.
• The weak PRF is evaluated homomorphically by composing the ring-tunneling proce-
dure with the (batch) integer rounding procedure. The former operation is linear in
the plaintext, but the computation and noise growth of each of the (at most) log(𝑛)
ring switches is roughly comparable to that of a homomorphic multiplication. The
latter procedure has multiplicative depth log(𝑝/2).
Since the efﬁciency of homomorphic encryption schemes degrades primarily with the
multiplicative depth supported, for efﬁciency we want to minimize 𝑛 and 𝑝 while ensuring
that the weak PRF is secure. In section 6.5 we argue that 𝑛 ≥ 64, 𝑝 ≥ 32 sufﬁces against all
known attacks.
The full evaluation of the BPR weak PRF has the same multiplicative depth as the ring
rounding evaluation, namely, log 𝑛 + log(𝑝/2), which for our choices of parameters ranges
between 8 and 10, and the total number of homomorphic multiplications (of two ciphertexts)
is only 𝑝/4. We note that while an arithmetic depth of 8 might initially seem a bit worrisome
in terms of security (certainly compared to the depth of AES, say), the operations performed
at each level of the circuit are much more complex than simple binary logic gates, since they
correspond to arithmetic operations in complex rings.
185
6.4.3 Homomorphic Evaluation
Given an encryption of 𝑠 ∈ 𝑅𝑝 and an input 𝑎 ∈ 𝑅𝑝 (in the clear), the homomorphic
evaluation of 𝑓𝑠(𝑎) proceeds in two steps:
• Multiply: The (encrypted) key element 𝑠 and the input 𝑎 are homomorphically
multiplied to obtain the (encrypted) element 𝑎 · 𝑠 ∈ 𝑅𝑝. Since 𝑎 is public, the
product is cheaply computed as a “scalar” multiplication with the encryption of 𝑠 (i.e.,
no key-switching or degree/modulus reduction is required, and there is little noise
growth.)3
• Round: The coefﬁcients of the product 𝑎 · 𝑠 ∈ 𝑅𝑝 are homomorphically rounded,
resulting in an element of the quotient ring 𝑅2 (representing the 𝑛-bit output). This
step uses the homomorphic evaluation of ring rounding described in the previous
section.
See subsection 6.5.1 for a security analysis of the PRF instantiation, and subsection 6.5.2
for details about the parameters used for homomorphic evaluation, as well as a security
analysis of the SHE instantiation.
We note that for fast evaluation “in the clear,” it is best if the modulus 𝑝 is a prime
congruent to 1 modulo 128, so that efﬁcient Chinese remaindering techniques can be used.
But for such moduli, it is somewhat cumbersome to round in a way that produces unbiased
output bits. In our setting, we can conveniently set 𝑝 to be a power of 2, thus ensuring
unbiased rounding, while using Chinese remaindering on the HE ciphertexts to speed up
computation.
3If 𝑎 were also encrypted, then the product could still be computed using a “true” homomorphic multiplica-
tion, but at greater expense.
186
6.5 Security of the PRF Instantiation
In this section we analyze the security of our BPR instantiation from section 6.4, and its
homomorphic evaluation, against known classes of attacks. To summarize:
• The security of the weak PRF is syntactically equivalent to the hardness of the
corresponding ring-LWR problem. The best known attacks against ring-LWR are those
against the corresponding ring-LWE problem, where the round-off term is viewed as
the error.
• Our parameters are such that the corresponding ring-LWR/LWE problem enjoys more
than 100 bits of security against all known attacks.
• We choose conservative parameters for our SHE scheme, which should offer at least
128 bits of security.
6.5.1 Security of PRF
We brieﬂy point out that the input space of the weak PRF is 𝑝𝑛, which for our parameters is
more than enough to defeat birthday attacks on the standard weak-PRF encryption scheme.
PRF Attacks as Learning Problems Breaking the weak PRF is syntactically equivalent
to the ring-LWR𝑅,𝑝,2 problem, which is to distinguish between uniformly random pairs in
𝑅𝑝 × 𝑅2, and pairs of the form (𝑎 ← 𝑅𝑝, 𝑏 = ⌊𝑎 · 𝑠⌉2) for some unknown 𝑠 ∈ 𝑅𝑝. By
scaling 𝑏 up by a factor of 𝑝/2, we can equivalently interpret the latter pairs as ring-LWE
2 · 𝑏 = 𝑎 · 𝑠 + 𝑒) ∈ 𝑅𝑝 × 𝑅𝑝, where 𝑒 ∈ 𝑅 is the uniquely determined “small” error
pairs (𝑎, 𝑝
4 ) ∩ Z that makes (𝑎 · 𝑠 + 𝑒) a multiple of 𝑝/2. Note that if
term with coefﬁcients in [− 𝑝
4 , 𝑝
𝑠 ∈ 𝑅*
𝑝 (i.e., it is a unit), then 𝑒 is uniformly random in its domain, over the random choice
of 𝑎. Therefore, the LWR problem can be modelled as LWE with uniformly random error of
rate 1/2, i.e., the range of the error term’s coefﬁcients covers half of Z𝑝 (although unlike in
LWE, the error is not independent of 𝑎).
187
Hardness of the Learning Problems
For relatively small values of 𝑛 and 𝑝—quite a bit smaller than those typically required for
public-key lattice cryptography—the ring-LWR𝑅,𝑝,2 problem appears to be secure against all
attacks that are usually employed against lattice-based cryptography and related learning
problems. This is primarily because the 1/2 error rate is much larger than the inverse-
polynomial (or smaller) rates required in public-key cryptography.
The main classes of attacks against noisy learning problems like LWR and LWE are:
(1) brute-force attacks on the secret, (2) combinatorial attacks [BKW03; Wag02; MR09],
(3) lattice attacks, and (4) algebraic attacks [AG11]. We consider each of these in turn.
Brute-force and combinatorial attacks. A brute-force attack on the weak PRF involves
searching for the secret 𝑠 ∈ 𝑅𝑝, or for the error terms in enough samples to uniquely
determine 𝑠. The secret and rounding errors come from sets of size at least (𝑝/2)𝑛, which
is prohibitively large for all our parameters. Combinatorial (or “generalized birthday”)
attacks [BKW03; Wag02] work by drawing an exponential number of samples (𝑎𝑖, 𝑏𝑖) and
ﬁnding (via birthday collisions) a small combination of the 𝑎𝑖 that sums to zero, then testing
whether the same combination applied to the 𝑏𝑖 is small, or noticeable non-uniform. This
works for small error rates because the combination of the 𝑏𝑖 is exactly the combination of
their error terms. However, because our error terms are so large, even an optimally small
combination does not yield a small value when applied to the 𝑏𝑖, nor is the value statistically
biased in any way that is efﬁciently exploitable. Therefore, combinatorial attacks do not
appear to work at all in this setting.
Lattice attacks. Lattice attacks on (ring-)LWE/LWR typically work by casting it as a
bounded-distance decoding (BDD) problem on a lattice (see, e.g., [MR09; LP11; LN13;
PS13b]). At a high level, the attack draws a sufﬁciently large number 𝐿 of samples
(𝑎𝑖, 𝑏𝑖) ∈ 𝑅𝑝 × 𝑅𝑝, so that the secret (in the LWE case) is uniquely determined with good
188
probability. With error rate 1/2, we need 𝐿 ≥ log(𝑝/2) by a simple information-theoretic
argument. The attack collects the samples into vectors ⃗𝑎,⃗𝑏 ∈ 𝑅𝐿
𝑝 , and considers the “𝑝-ary”
lattice ℒ of dimension 𝑁 = 𝑛𝐿 (over Z) corresponding to the set of vectors 𝑠·⃗𝑎 ∈ 𝑅𝐿
𝑝 for all
𝑠 ∈ 𝑅𝑝. It then attempts to determine whether ⃗𝑏 is sufﬁciently close to ℒ, which corresponds
to whether (𝑎𝑖, 𝑏𝑖) are LWE samples or uniform. In our setting, because the error rate 1/2 is
so large, the distance from ⃗𝑏 to ℒ (in the LWE case) is nearly the minimum distance of the
lattice, up to a constant factor no larger than four (this is a conservative bound). Therefore,
for the attack to succeed it needs to solve BDD (or the shortest vector problem SVP) on ℒ to
within an very small constant approximation factor. For the parameters in our instantiations,
the lattice dimension is at least 𝑁 ≥ 𝑛 log(𝑝/2) ≥ 256 (and likely more). For this setting,
the state of the art in BDD and SVP algorithms [CN11; LN13; MV10b], take time at least
2120, and likely more. Moreover, the SVP algorithm of [MV10b], which appears to provide
the best heuristic runtime in this setting, as a most conservative estimate requires space at
least 20.18𝑁 ≥ 246.
Algebraic attacks. Finally, the algebraic “linearization” attack of Arora and Ge [AG11]
yields a lower bound on 𝑝 for security. The attack is applicable when every coefﬁcient of
every error term is guaranteed to belong to a known set of size 𝑑; in our setting, 𝑑 = 𝑝/2.
The attack requires at least 𝑁/𝑛 ring-LWE samples to set up and solve a dense linear system
of dimension 𝑁, where
(︂𝑛 + 𝑑
)︂
𝑛
𝑁 =
≈ 2(𝑛+𝑑)·𝐻(𝑛/(𝑛+𝑑))
and 𝐻(𝛿) = −𝛿 log(𝛿) − (1 − 𝛿) log(1 − 𝛿) is the binary entropy function for 𝛿 ∈ (0, 1).
Therefore, the attack requires time and space at least 𝑁 2, which is at least 2109 for all our
parameters.
189
Table 6.2: Sequence of plaintext (PT) and ciphertext (CT) cyclotomic ring indices used for
ring tunneling from 𝑅 = 𝒪128 to 𝑆 = 𝒪7,680.
PT index
128
64 · 17
16 · 13 · 17
4 · 5 · 13 · 17
3 · 5 · 13 · 17
CT index
128 · 243
64 · 27 · 17
16 · 9 · 13 · 17
4 · 5 · 7 · 13 · 17
3 · 5 · 13 · 17
CT dim
10,368
9,216
9,216
9,216
7,680
6.5.2 Security of Homomorphic Evaluation
We use what we believe to be quite conservative parameters in our SHE scheme, i.e., large
dimensions for the noise rates in our SHE ciphertexts and key-switching hints. Following
the methodology of [MR09] for estimating the security of LWE-based encryption, in order
to break (ring-)LWE according to lattice attacks it is necessary to have 22
𝑛 log 𝑄 log 𝛿  32. For type safety, we must compute
the input type from the output type (i.e., 𝑅2) and 𝑘 using the following type family:
type family PreRescalePTPow2 intp k r2 where
PreRescalePTPow2 intp 1
r2 = r2
PreRescalePTPow2 intp (k+1) r2 =
PreMul intp (PreDiv2 intp (PreRescalePTPow2 intp k r2))
recalling from section 6.3 that each additional power of two adds another layer to the round-
ing tree, and computing the next layer (for a pair of inputs) involves a single multiplication
followed by a division. This order is reversed above since we compute the type starting from
the output. The Haskell compiler uses the type family to infer the object-language input
type. of the the main interface to ring rounding:
rescalePTPow2 :: (Lambda intp, k > 1, ...)
191
=> Tagged k (expr e (PreRescalePTPow2 expr (k+1) r2 -> r2))
rescalePTPow2 = tag $ lam $
let v’
= v0 *: (one >+: v0)
kval
= proxy value (Proxy::Proxy k) :: Int
pDiv4 = 2^(kval-2)
in let_ v’ $ treeMul (Proxy::Proxy k) $
map ((div2_ $:) . (>+: v0)) $ take pDiv4 $
[fromInteger $ y * (-y+1) | y = 4. rescalePTPow2 is a (tagged) DSL expression
representing a function from PreRescalePTPow2 expr k r2 to r2, where r2 represents the
integers mod 2 (or, in the next subsection, a cyclotomic ring with Z2 slots via the Chinese
remainder theorem). The code above implements the optimization in the ﬁrst level of the
rounding tree explained at the end of section 6.3. We ﬁrst compute 𝑥 · (𝑥 + 1) and share it
using let_. We then add constant offsets of the form 𝑖 · (−𝑖 + 1) to create the ﬁrst level of
leaf nodes. These are passed to treeMul, which handles the main recursive algorithm.
We emphasize that this expression is not a language component, but rather a higher-level
expression written in terms of existing language components. However, the programmer
uses this expression like they would any other language component.
Below we give a small example which shows the implementation when 𝑝 = 4:
-- expr :: (Lambda intp, AddLit intp (PreMul intp (PreDiv2 intp z2)),
--