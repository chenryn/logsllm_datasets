# TCP States and DDoS Attack Analysis

## Demo 2: TCP FIN_WAIT_1
### From RFC:
- **FIN-WAIT-1 STATE**: In addition to the processing for the ESTABLISHED state, if our FIN is now acknowledged, enter FIN-WAIT-2 and continue processing in that state.
- **FIN-WAIT-2 STATE**: In addition to the processing for the ESTABLISHED state, if the retransmission queue is empty, the user's CLOSE can be acknowledged ("ok") but do not delete the TCB.
- **CLOSE-WAIT STATE**: Do the same processing as for the ESTABLISHED state.
- **CLOSING STATE**: In addition to the processing for the ESTABLISHED state, if the ACK acknowledges our FIN, then enter the TIME-WAIT state; otherwise, ignore the segment.
- **LAST-ACK STATE**: The only thing that can arrive in this state is an acknowledgment of our FIN. If our FIN is now acknowledged, delete the TCB, enter the CLOSED state, and return.
- **TIME-WAIT STATE**: The only thing that can arrive in this state is a retransmission of the remote FIN. Acknowledge it and restart the 2 MSL timeout.

### Key Points:
- **Timeout Duration**: The timeout duration varies by OS, typically around 60 seconds, and is difficult to fine-tune on a server.
- **RFC Specification**: "The client can still receive data from the server but will no longer accept data from its local application to be sent to the server."
- **Resource Allocation**: The server allocates resources to handle web services, and during an attack, the web application may hold these resources, leading to memory overflow.
- **Network Security Devices**: Most network security devices can set the timeout value, but they are easily overwhelmed by the web application.

### Goals:
- Check the TCP first FIN_WAIT1 timeout value.
- Wait for RST/ACK initiated by the requestor, target’s server, or CDN.

## Demo 3: TCP Established
### From RFC:
- **TCP Established State**: Represents an open connection where data received can be delivered to the user. This is the normal state for the data transfer phase of the connection.

### Key Points:
- **Active Connection**: An active connection where the server allocates significant resources to handle web services and applications.
- **Timeout Duration**: The timeout for the TCP Established state is very long (around 3600 seconds) and cannot be too short.
- **Resource Usage**: This state uses the most resources on the server compared to other TCP states.
- **HTTP Method Exploitation**: By using HTTP methods like POST with a large content length or GET with fragmented packets, the server can be forced to use more resources.
- **Incomplete Requests**: Incomplete HTTP requests can bypass network security devices, with timeouts depending on the application and server, ranging from 30 seconds to 10 minutes or more.

### Comparison with Slowloris:
- **Slowloris**: Extends the TCP Established State in one connection, slowly filling the server's resource pool.
- **Demo 3**: Finds the maximum size of the resource "hole" and digs many holes of random sizes.

### Goals:
- Check the TCP establishment timeout value.
- Check the TCP first PSH/ACK timeout value.
- Check the TCP continuous ACK timeout value.
- Wait for FIN/ACK initiated by the target’s server.
- Submit a packet to the target with a wrong IP checksum and check for any response.
- Use incomplete HTTP packets that cannot be detected and are treated as data trunks.

## Attack Conclusion
### For Demos 1-3:
- **Signature-Based Detection**: Not effective as HTTP fields can be randomized.
- **Customized Attacks**: Each attack is customized for the target, with content length and rate limits tested.
- **Confusion Tactics**: Confuse security detection devices with "look-like" real HTTP requests.

### Proof of Concept (PoC):
- **Slowloris Example**: A good example for Demo 3.
- **Demos 1-3**: PoCs for the analysis results and impact discussed in Part 1.

## Empowering a Zombie
### Before Taking Action:
- **Attack Server**: Backtrack 5, 512M RAM, 2 CPU (VM).
- **Web Server**: Windows Server 2008 R2, IIS 7.5, 2G RAM, no application or database, hardware PC.

### Attack Goal:
- Empower a zombie without establishing any connection and intensively use memory and CPU.

### Demo:
- Launch the attack with a designed zombie using stuck TCP Established state techniques.

### Demo Steps:
1. Show the attack server’s resource status.
2. Generate the attack.
3. Show the target server’s status.
4. Show the attack server status after the attack.

### Zombie Features:
- Can launch attacks against multiple targets.
- Uses all available layer-7 attack methods.
- Most victims get stuck in the TCP Established state.

### Design and Power-Up Your Zombie:
- Different types of soldiers, e.g., Zombie + Syncookie, syncache, shared database with HTTP requests.

## Part 3: Defense Model
### Existing DDoS Mitigation Countermeasures:
- **TCP Layer Authentication**
- **HTTP Layer Authentication** (redirect, URL)
- **HTTP Layer Interrupt** (Captcha)
- **Signature-Based Application Detection**
- **Rate Limiting**

### Design Overview – Application Gateway (AG):
- **Apache Module**: Develop an Apache module for defending against Layer 7 DDoS.
- **Components**:
  - Apache Web Service
  - Hardened Apache Server
  - Authentication Code Module
  - Control Policy Module
  - Routing and Forwarding Engine
  - GUI Control Panel

### Deployment Modes:
- **Host Mode**: Develop a module in Apache.
- **Transparent Mode**: Easy to deploy, in front of the web server.
- **Reverse Proxy Mode**: Easy to deploy.
- **Load Balancer Mode**: Similar to proxy but less effective against high-volume attacks.

### Best Deployment Locations:
- **Before the Firewall, Behind the Router**: Analyze and filter high-volume traffic.
- **Behind the Firewall (with Content Forward)**: Redirect HTTP traffic to the Apache gateway, analyze, and send clean traffic back to the firewall.
- **Behind the Firewall (Route Mode, Proxy Mode)**: Analyze traffic, then route clean traffic to the web server.
- **Integrated with the Load Balancer**: Process and analyze HTTP traffic, then load balance to the web server farm.

### Roadmap:
- **Phase 1**: Integrate IDS/IPS, Firewall, and black hole system with the Layer-7 Anti-DDoS Gateway.
- **Phase 2**: Develop API for custom scripts.
- **Phase 3**: Develop a blacklist system for IP addresses grouped by time and generation mechanism.

## Contact Information
- **Tony**: mt[at]vxrl[dot]org
- **Alan**: avenir[at]vxrl[dot]org
- **Kelvin**: captain[at]vxrl[dot]org
- **Anthony**: darkfloyd[at]vxrl[dot]org

Thank you for your attention.