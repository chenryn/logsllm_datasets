TBC
7/11/12
Demo 2. TCP FIN_WAIT_1
Demo 2. TCP FIN_WAIT_1
From RFC:
“FIN-WAIT-1 STATE            
In addition to the processing for the ESTABLISHED state, if our FIN is now acknowledged then 
enter FIN-WAIT-2 and continue processing in that state. 
FIN-WAIT-2 STATE            
In addition to the processing for the ESTABLISHED state, if the retransmission queue is empty, 
the user's CLOSE can be acknowledged ("ok") but do not delete the TCB.          
CLOSE-WAIT STATE            
Do the same processing as for the ESTABLISHED state.          
CLOSING STATE            
In addition to the processing for the ESTABLISHED state, if the ACK acknowledges our FIN then 
enter the TIME-WAIT state, otherwise ignore the segment.         
LAST-ACK STATE            
The only thing that can arrive in this state is an acknowledgment of our FIN.  If our FIN is now 
acknowledged, delete the TCB, enter the CLOSED state, and return.   
TIME-WAIT STATE            
The only thing that can arrive in this state is a retransmission of the remote FIN.  Acknowledge it, 
and restart the 2 MSL timeout.” 
Demo 2. TCP FIN_WAIT_1
•Depends on OS, time out around 60s and hard to fine tune in Server.
•RFC: “Client can still receive data from the server but will no longer accept 
data from its local application to be sent to the server.”
•Server will allocate resource to handle web service
•Web application will keep holding the resource and memory overflow during 
the attack
•Most of network security devices can set the timeout value, but easy to crush 
the web application….
Demo 2 - The Key for goal
• Check the TCP first FIN_WAIT1 timeout 
value
• Wait for RST/ACK – Initiated by 
requestor, target’s server or CDN
7/11/12
Demo 2 - The Key for goal
TBC
7/11/12
Demo 3. TCP Established 
Demo 3. TCP Established 
•RFC: ” represents an open connection, data received can be delivered to the 
user. The normal state for the data transfer phase of the connection.”
•TCP Established, it is an active connection.
•Server will allocate a lot resource to handle web service and web application.
•The time out of TCP Established state is very long. (around 3600s)
•The time out of TCP Established state can’t be too short. 
•Compare all of the other TCP state, this case will use most of resource in the 
server.
Demo 3. TCP Established 
•
Base on the design of HTTP method, we can force the server to use 
more resources.
•
Fragmented and incomplete packet continuously
•
In this example:
-
HTTP POST Method + “Content-length: 99999”
•
HTTP GET Method with packet size over 1500 without 
“\r\n\r\n”,  are same result.
•
It is an incomplete HTTP request
•
Timeout depends on application and server, may be 30s, 5mins, 
10mins or more.
•
Incomplete HTTP request can bypass the Network Security devices.
Demo 3. Vs Slowloris
Slowloris:
Slowloris is extent the TCP Established State in ONE connections. Just 
like we try to dig a hole(HTTP request) on the ground(Server resource) 
and fill in the water(packets) slowly.
Our Demo 3
Our Demo 3, it is find out the max size of hole, and dig many of holes . 
The size is random.
Demo 3 - The Key for goal
•
Check the TCP establishment timeout value
•
Check the TCP first PSH/ACK timeout value
•
Check the TCP continuous ACK timeout value
•
Wait for FIN/ACK – Initiated by target’s server
•
Submit a packet to the target with wrong IP checksum 
and check whether there is any replied packet.
•
It is an incomplete HTTP packet, which cannot be 
detected and it is treated as  a data trunk.
7/11/12
Demo 3 - The Key for goal
TBC
7/11/12
Attack Conclusion 
For Demos 1-3 
•
Signature-based detection cannot be useful to detect our 
attack as the HTTP fields could be randomized.
•
Our attack is customized for each target individually.
•
For example, the content length is decided based on the 
Web application and test the boundary values of rate limit 
of any security and detection devices.
•
Confuse the security detection device with “look-like” real 
HTTP request. 
PoC of Case study
• Slowloris is a good example for Demo 3
• Demo 1-3 are PoC for the analysis result 
and impact in Part 1.
7/11/12
We have a great weapon and need
a best solider
7/11/12
Before taking empower 
Zombie ...
Let us give another demo:
Attack Server: Backtrack 5, 512M Ram, 2 CPU (VM)
Web Server: Windows server 2008 R2, IIS 7.5 with a text web 
page, 2G RAM, no application and database, hardware PC.
7/11/12
Attack Goal
Empower a Zombie “without” established 
any connection and intensive use of memory 
and CPU
7/11/12
Demo
• We launched the attack with our designed 
Zombie (in demo 4) with stuck TCP 
Establish state (in demo 3) technique
7/11/12
Demo time
7/11/12
Our Zombie’s Design
7/11/12
Design Overview
•
Current DDoS mitigation method violates RFC 
standard.
•
Our Zombie also adopt DDoS mitigation methods into 
the design
•
Our Zombie’s protocol design “looks like” fulfilling a RFC 
standard. We simply adopt the DDoS mitigation method 
and design into our Zombie.
•
This solider design is for our Demo 3 attack technique.
7/11/12
1. Show Attack Server’s 
Resources Status
7/11/12
2. Generating an attack 
7/11/12
3. Show the target’s server 
status
7/11/12
4. Show attack server status 
AFTER attack
7/11/12
Zombie Features
• Our designed zombie could launch attack 
against multiple targets
• All available  layer-7 attack methods (e.g. 
XXX flood) could fuck up the target.
• Most of the victims stuck in TCP 
established  state. 
7/11/12
Design and power-up your 
zombie
It could have many different types of solider. 
E.g. Zombie + Syncookie, syncache, share 
database with HTTP request……
7/11/12
Part 3: Defense Model
Existing DDoS mitigation 
countermeasure
• TCP Layer Authentication
• HTTP Layer Authentication (redirect, 
URL)
• HTTP Layer interrupt (Captcha)
• Signature base application detection
• Rate limit
7/11/12
Design Overview – Application 
Gateway (AG)
• Develop the apache module for defense 
Layer 7 DDoS.
•
Apache Web Service
•
Hardened Apache Server 
•
Authentication code module
•
Control Policy module 
•
Routing and Forwarding 
Engine 
•
GUI Control Panel 
7/11/12
7/11/12
I have a Dream~
7/11/12
Apache Gateway with 
Loadbalancers group
Custom Filter 
by script
All zombie 
suicide 
All the DDoS 
attack can auto 
mitigated
7/11/12
POST / GET Flood to AG
(First handshake phase)
Attack example : GET / HTTP/1.1 or GET / 
 / 1.1
•If the Attack cannot be redirect
•
Check the HTTP field, and will drop the non standard 
HTTP request.
•
Close the connection, and afterwards, attack 
suspended.
•
(Most of the zombie cannot handle the redirect)
7/11/12
POST / GET Flood to AG
(First handshake phase) (cont.)
• If the Attack can be redirect
•
Response action
•
Redirect the Get Flood (Redirect 301) to phase 2, with new 
session
•
Close the existing connection in AG
7/11/12
POST / GET Flood to AG
(Second handshake phase)
• User send the GET request with HTTP 
field Referrer.
•
With Referrer (Allow Traffic):
•
Assign a checkable value and referrer value  to the user’s 
web browser 
•
Optional : Require the client side running the formula 
with JavaScript, and the result will be used in phase 3. 
(use for increase the client side CPU usage.)
•
Redirect the request to phase 3 with new session
•
Close the current connection in AG
7/11/12
•
Without Referrer (Attack) (Drop Traffic) :
•
Close the connection
•
For HTTP POST request, it will be dropped instantly.
7/11/12
POST / GET Flood to AG
(Second handshake phase) (cont)
POST / GET Flood to AG
(Third handshake phase)
• User send the GET request to the 
checking page with the checkable value 
received in Phase 2.
•
Incomplete HTTP request will be dropped.
•
Set the passed traffic in the white list.
•
Set the connection limit per IP address 
•
(eg. Block the IP address, over 10 request per minute.)
•
Set the limit per request, per URL
•
Set the time limit value.
•
Set the time out value.
7/11/12
Deploying mode
• Host mode
•
E.g. Develop a module in Apache
• Transparent mode
•
Easy to deploy; In front of Web server.
• Reverse proxy mode
•
Easy to deploy
• Load balancer mode
•
Same as proxy, but it cannot handle a high volume 
bandwidth attack.
7/11/12
Best deployment location
• Before the firewall, behind the router
•
Analyzing and filtering over the high volume traffic happens in 
the first place so as to prevent the high volume DoS attack.
• Behind the firewall (with content forward)
i.
The firewall redirects the http traffic to the apache gateway. 
(eg. Check Point CVP or Juniper UTM Redirect Web Filtering)
ii.
After the HTTP traffic analysis, the clean traffic will be  sent 
back to the firewall.
iii.
The firewall will continue process the traffic by rule
7/11/12
Best deployment location (cont’)
• Behind the firewall (route mode, proxy mode)
i.
After the traffic analysis by the firewall, the traffic will pass 
to the apache gateway
ii.
After the analysis, the clean traffic will route to the web 
server
• Install & integrate with the web server
i.
The traffic input to the Apache gateway (filtering module)
ii.
After the Apache gateway (filtering module) analysis 
complete
iii.
 The (filtering module) will pass the traffic to the web page 
module (or other web server program.)
7/11/12
Best deployment location (cont’)
• Integrated with the load balancer
i.
The http traffic will input to the Apache Gateway
ii. The Apache will process & analysis the HTTP 
traffic
iii. The clean traffic will transfer to the load balancer
iv. The load balancer will load sharing the traffic to 
the  Web Server farm
7/11/12
Roadmap
Phase 1: Integrate the IDS/IPS, Firewall 
and 
black hole system with the 
Layer-7 Anti-DDoS Gateway.
Phase 2: Develop the API for custom script
Phase 3: Develop a Blacklist on IP 
addresses grouped by time and IP 
address Blacklist system. and 
Generation mechanism.
7/11/12
Thank you very much 
for your listening
Tony: mt[at]vxrl[dot]org
Alan: avenir[at]vxrl[dot]org
Kelvin: captain[at]vxrl[dot]org
Anthony: darkfloyd[at]vxrl[dot]org