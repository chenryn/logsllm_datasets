can forge the expected response from Alice by recovering k from
ψ2. However, if Bob does not know SKC, then he cannot simulate
a response; Justin has caught Bob attempting to deceive him.
This attack weakens online repudiation in a nuanced manner. If
Justin receives a response purportedly from Alice, then he knows
that either Bob was communicating with the real Alice, or Charlie’s
secret key was compromised by Bob (and not only by Justin). If
Justin does not receive a response, then he knows that either the
real Alice did not respond to the (forged) message from Charlie, or
Bob has attempted to deceive Justin by simulating Alice. Note that
this situation only occurs when Justin “probes” the honesty of Bob
by sending a message from Charlie; Justin does not accomplish his
primary objective of incriminating Alice. If Bob predicts that Justin
is going to attempt such a probe, he can establish a connection to
Alice and relay ψ2 honestly—but if Bob’s prediction is incorrect,
then he will unintentionally incriminate Alice. In practice, Justin
will always have some uncertainty about the veracity of Alice’s
responses to Bob.
6.5 Non-interactive Spawn∗
1,1 , ψAlice
The main advantage of Spawn∗ is that, unlike Φdre and RS-
DAKE, it can be used in a non-interactive setting. Non-interactive
Spawn∗ is implemented with the assistance of an untrusted central
server tasked with the distribution of prekeys. It is natural to con-
sider this version of the protocol in the context of mobile text mes-
saging. Initially, Alice uses her phone’s data connection to connect
to a central server operated by the developer of a secure commu-
nication app using Spawn∗. Alice generates a set of n messages,
{ψAlice
1,n }, where each message is a valid message
ψ1 for a Spawn∗ session. Alice uploads all n message to the cen-
tral server.5 Later, Bob uses his phone’s data connection to request
one of Alice’s messages from the server. The server sends an avail-
1,i , 1 ≤ i ≤ n, to Bob and removes it from its list.
able message ψAlice
Bob now uses ψAlice
to complete the
1,i
key exchange. He sends ψAlice
2,i along with his message, encrypted
with k, to Alice over his text messaging service. Upon receiving
the message, Alice locates the corresponding secret keys for the
message to recover k.
to compute a response ψAlice
2,i
1,2 , ..., ψAlice
5The server can deniably authenticate uploaded keys by receiving
keys within an interactive Spawn∗ or RSDAKE session.
Unfortunately, this non-interactive capability comes at a cost:
the deniability of the protocol is not as strong as the interactive
version. Intuitively, the issue is that ψ1 is no longer part of a sin-
gle protocol session; it has been moved into a cross-session global
infrastructure. This allows an online judge to request a genuine
prekey from the server, overriding any simulated prekey produced
by a misinformant. In practice, this means that Spawn∗ does not
provide online repudiation when R attempts to simulate I in the
non-interactive setting. However, I still maintains online repudi-
ation in this setting—I can reliably simulate a response from any
party, even in the presence of online judges—and all other security
properties of the protocol continue to hold. Thus, non-interactive
Spawn∗ still provides stronger deniability guarantees than triple
Difﬁe-Hellman (3-DH), the current (non-interactive) TextSecure
key exchange protocol.
6.6 Conjecture: TextSecure Iron Triangle
Given the incomplete online repudiation of Spawn∗ when it is
used non-interactively, an obvious question to ask is whether the
protocol can be modiﬁed to address these problems. We may also
wonder more generally about all key exchanges suitable for use in
the TextSecure setting. We deﬁne a TextSecure-like key exchange
as a one-round key exchange protocol in which the initiator I does
not initially know the identity of the responder R. Our results lead
us to an unfortunate suspicion about the nature of such protocols:
any TextSecure-like key exchange cannot simultaneously provide
non-interactivity, (weak) forward secrecy, and online repudiation
with respect to R simulating I.
Intuitively, this conﬂict arises from the set of secrets required to
recover the session key k from the protocol transcript. In general,
both I and R may have short-term secrets (skI and skR, respec-
tively) and long-term secrets (SKI and SKR, respectively). In a
non-interactive setting, R cannot simulate I’s generation of skI to
an online judge (for the reasons given in Section 6.5), and the on-
line judge can insist on generating skR itself. Consequently, the
only secret information known only by R in this case is SKR. If
R is able to recover k from the transcript, then this implies that the
protocol does not have forward secrecy (because only long-term
secrets are required to recover k).
If R is not able to recover k
from the transcript, then this implies that the protocol lacks online
repudiation (because R cannot simulate I’s subsequent use of k).
Additionally, there is no way to force the judge to reveal any secrets
to R since the judge can always insist on the use of a secure multi-
party computation protocol to generate any required response.
6.7 A Practical Relaxation: Spawn
The security properties of Spawn∗ hold in a very strong threat
model: the adversary can adaptively corrupt parties, and no infor-
mation can ever be erased. In practice, these assumptions may not
hold. If either assumption is removed, then the security model will
admit a modiﬁed version of Spawn∗ with substantially increased
performance. Spawn is a protocol that is equivalent to Spawn∗,
except that it replaces the use of non-committing encryption in ψ2
with a standard public-key cryptosystem. PKGen is used to gen-
erate an ephemeral key pair (epk, esk) rather than the (npk, nsk)
pair produced by NCGen in Spawn∗. The motivation for this mod-
iﬁcation is that non-committing encryption schemes are extremely
expensive compared to standard public-key cryptosystems (e.g., the
NCE scheme described by Walﬁsh [29] makes 2λn calls to the
PKEnc function of an underlying 1-bit PKE scheme to encrypt an
n-bit message with security parameter λ).
In practice, it is reasonable to accept this weaker threat model
in many common environments. Security and privacy tools such
as hard drive encryption utilities and secure messaging tools com-
monly assume that cryptographic keys can be limited to RAM stor-
age, and RAM can be securely erased while a machine is uncor-
rupted. It is also reasonable to assume that corruptions are not fully
adaptive. When Spawn is used interactively, I can easily erase esk
if a timely response is not received from R (e.g., if an adversary
prevents delivery of ψ2 in an attempt to cause I to retain esk for
later corruption). In the non-interactive setting, online repudiation
of Spawn∗ is already weakened (see Section 6.5); there are no prac-
tical situations in non-interactive Spawn∗ that actually require the
use of NCEqv for simulation. For this reason, the use of Spawn in-
stead of Spawn∗ causes no loss of deniability beyond that already
incurred due to use in a non-interactive environment.
6.8 Bootstrapping Axolotl
One of the most innovative features of TextSecure is its per-
message forward and backward secrecy [28]; if keys are compro-
mised during a conversation, messages sent before or after the com-
promise cannot be decrypted by the adversary. TextSecure achieves
these properties by using the 3-DH DAKE to initialize Axolotl, a
scheme that refreshes cryptographic keys over time [21]. While 3-
DH provides deniability against ofﬂine judges, it does not defend
against online judges. Spawn can improve the deniability proper-
ties of TextSecure by replacing the 3-DH key exchange.
When Axolotl begins, I and R perform a 3-DH key exchange to
obtain a shared secret k. A key derivation function is used to derive
a variety of keys from k that are used internally by Axolotl. Spawn
(or Spawn∗) can be used instead of 3-DH to share k, which can then
be passed through the key derivation function in the same manner.
One complication that arises comes from the fact that 3-DH is a
contributory DAKE, while Spawn is non-contributory. Axolotl nor-
mally encrypts the ﬁrst message in the conversation using, in part,
an ephemeral secret key generated by R, for which there is no ana-
log in Spawn. Luckily, this is easily solved by encrypting the ﬁrst
message using a key derived solely from k; the details of Axolotl
ensure that subsequent messages are encrypted using freshly gen-
erated ephemeral keys. The thesis describes the complete technical
details of incorporating Spawn into TextSecure [27, §3.8.10].
7.
IMPLEMENTATION
Currently, there exists a disconnect between secure messaging
system developers and the academic community; there is an abun-
dance of solutions described in the literature that are never imple-
mented [28]. It has become clear that describing a new system and
writing security proofs, while necessary, are insufﬁcient for making
cryptography usable; we need to do more if we want actual users to
beneﬁt from our schemes. One way to bridge this gap is to provide
open implementations of our designs to encourage use by devel-
opers of consumer security products. We developed open-source
implementations6 of the key exchanges presented in this work us-
ing the Go programming language [14].
Our primary development objective was to implement Φdre with
non-interactive DRE, Φdre with interactive DRE (hereafter referred
to as Φidre), RSDAKE, and Spawn. Since the specialized cryp-
tosystems used by these protocols lack widely available implemen-
tations, we also developed implementations of these underlying
schemes as part of our development effort. In summary, we pro-
duced the following libraries:
• Pairing-Based Cryptography Library [17] wrapper for Go;
6The resulting libraries can be found at https://crysp.
uwaterloo.ca/software/.
• Shacham-Waters [26] ring signatures;
• HORS [23] one-time signatures with HORS+ [30] improvement;
• Cramer-Shoup cryptosystem [10], both in ﬁnite ﬁelds of prime
order and elliptic curve groups;
• Chow-Franklin-Zhang [9] BDDH-based DRE;
• Interactive DRE (deﬁned in Section 4.2);
• Φdre [29] (the ﬁrst public implementation);
• RSDAKE (deﬁned in Section 5.2);
• Spawn (deﬁned in Section 6.7).
We used the Chow-Franklin-Zhang non-interactive DRE scheme
in Φdre and Spawn, the Shacham-Waters ring signature scheme
in RSDAKE and Spawn, the Cramer-Shoup cryptosystem in Φdre
and Spawn, and ECDSA [18] in RSDAKE and Spawn. All of the
implemented schemes are provably secure in the standard model
(i.e., they do not require random oracles). Our implementations
each come with predeﬁned parameters to approximate security lev-
els between 80 and 256 bits. Precise details about the operation
of our libraries, and the exact standard-model security assumptions
made by each, are available in the thesis [27, §4].
8. EVALUATION
To compare the performance of the key exchange implementa-
tions, we instantiated a simulation of an interactive session between
two parties over the Internet. This simulation modeled a duplex
connection with conﬁgurable transmission latency and bandwidth
restrictions. We evaluated the performance of four protocols: Φdre,
Φidre, RSDAKE, and Spawn. We tested each protocol in a variety
of simulated network conditions at 112-, 128-, and 192-bit approx-
imate security levels. We simulated message latencies at 0, 50,
100, 300, 1000, 2000, 5000, and 10000 milliseconds. We sim-
ulated communication channel bandwidth at 10 Gib/s, 100 Mib/s,
20 Mib/s, 5 Mib/s, 500 Kib/s, and 50 Kib/s. We performed each test
200 times on 3.6 GHz processor cores with access to RAM provid-
ing 15 GiB/s read and write speeds with 63 ns latency. All graphs
in this section make use of logarithmic vertical axes and error bars.
The error bars, which denote the standard error of the mean, are
typically too small to see.
8.1 Space Complexity
All four schemes transmit different amounts of data during the
protocol session. The amount of data transmitted depends only on
the choice of protocol and the security level; it does not depend
on the speed of the network connection. Figure 4 shows the total
amount of data transmitted by each protocol during a session; this
total represents the sum of the number of bytes written at the ap-
plication layer by each party. All schemes are relatively expensive
compared to a simple SIGMA protocol; all four schemes require
at least 4 KiB to complete a session with at least 112 bits of secu-
rity. However, both Φdre and Spawn require signiﬁcantly more data
transmission than Φidre or RSDAKE; additionally, Φdre transmits
approximately three times more data than Spawn. The reason for
this disparity is the use of the HORS+ one-time signature scheme
by the non-interactive DRE implementation. Since Φdre makes use
of three DRE encryptions and Spawn makes use of only one, Φdre
requires nearly three times more data than Spawn to complete the
exchange. The use of interactive DRE in Φidre dramatically re-
duces the data costs of the protocol; Φidre consistently uses the
least data of all four protocols.
While RSDAKE uses nearly as little data as Φidre for the 112-bit
security level, its costs increase much faster as the security level is
Φdre
Φidre
RSDAKE
Spawn
)
i
B
K
(
a
t
a
d
d
e
t
t
i
m
s
n
a
r
T
512
256
128
64
32
16
8
4
Φdre
Φidre
RSDAKE
Spawn
)
s
m
(