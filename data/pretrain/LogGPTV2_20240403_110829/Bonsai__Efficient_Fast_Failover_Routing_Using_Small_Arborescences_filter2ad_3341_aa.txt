title:Bonsai: Efficient Fast Failover Routing Using Small Arborescences
author:Klaus-Tycho Foerster and
Andrzej Kamisinski and
Yvonne Anne Pignolet and
Stefan Schmid and
Gilles Tr&apos;edan
Bonsai: Efﬁcient Fast Failover Routing
Using Small Arborescences
Klaus-Tycho Foerster∗ Andrzej Kamisi´nski∗∗
Yvonne-Anne Pignolet‡
Stefan Schmid∗ Gilles Tredan⋄
∗∗AGH University of Science and Technology, Poland
‡DFINITY, Switzerland
⋄LAAS-CNRS, France
∗Faculty of Computer Science, University of Vienna, Austria
Abstract—To provide high availability despite link failures,
many modern communication networks feature fast failover
mechanisms in the data plane, which operates orders of mag-
nitude faster than the control plane. While the conﬁguration of
highly resilient data planes using the shortest possible back-up
routes is known to be a difﬁcult combinatorial problem, over
the last years, much progress has been made in the design of
algorithms which provably guarantee connectivity even under
many concurrent link failures. However, while these algorithms
provide connectivity, the resulting routes after failures can be
very long, which in turn can harm performance.
In this paper, we propose, analyze, and evaluate methods for
fast failover algorithms which account for the quality of the routes
after failures, in addition to connectivity. In particular, we revisit
the existing approach to cover the to-be-protected network with
arc-disjoint spanning arborescences to deﬁne alternative routes to
the destination, aiming to keep the stretch imposed by these trees
low (hence the name of our method: Bonsai). We show that the
underlying problem is NP-hard on general topologies and present
lower bound results that are tight for various topologies, for any
class of fast failover algorithms. We also present heuristics for
general networks and demonstrate their performance beneﬁts in
extensive simulations. Finally, we show that failover algorithms
using low-stretch arborescences, as a side effect, can provide
connectivity under more general failure models than usually
considered in the literature.
I. INTRODUCTION
Communication networks have become mission critical and
reliability is one of the main concerns of network operators
today [1]. Ensuring a high network availability however is
often non-trivial, especially under frequent and concurrent link
failures, which are becoming more likely with the increasing
scale of communication networks including datacenters [2],
backbones [3], [4] or enterprise [5] networks, but also due to
virtualization and shared risk link groups [6].
Fast rerouting in the data plane is an important mechanism
to meet availability guarantees: as reaction times to failures
in the data plane are several orders of magnitude shorter than
in the control plane [7], many communication networks today
support statically precomputed conditional failover paths [8]
(e.g., using IP Fast Reroute [9], [10], MPLS Fast Reroute [11],
or OpenFlow fast-failover groups [12]), along which trafﬁc
can be rerouted in case failures are encountered. Interestingly,
allocating such conditional failover paths introduces a chal-
lenging combinatorial problem: as the forwarding rules on
the switches or routers need to be installed beforehand and
without knowledge of the actual failures which may occur, the
forwarding decisions must be robust to all possible additional
failures which may occur downstream.
The underlying algorithmic problem is related to distributed
computing problems (due to the switch or router’s local view
on failures) [13]. Over the last years, much progress has been
made (e.g., [4], [14], [15], [16], [17]) toward the design of
polynomial-time algorithms to precompute failover rules which
provide optimal connectivity [18]: failover routes are guaranteed
as long as the underlying network remains physically connected.
However, while connectivity is important, connectivity alone
is not sufﬁcient to meet performance requirements, also the
quality of the resulting failover routes matters [8]. In particular,
long failover routes may introduce additional delays: if the
length of the old and the new path differ, this can temporarily
lead to packet reorderings and an overestimation of the
congestion of the network, harming TCP throughput [19].
More importantly, long routes also increase the likelihood
of congestion, as bandwidth needs to be allocated on a per-hop
basis and longer ﬂows may interfere with more other ﬂows.
Thus we focus in this paper on minimizing the maximal stretch
which can be introduced by rerouting.
Contributions. We investigate deterministic fast failover mech-
anisms which not only provide provable connectivity under
multiple link failures, but also account for the quality in terms of
the resulting route lengths, namely the stretch: the actual length
of the failover route, minus the shortest originally possible
distance. At the same time, previous fast failover works focused
mostly on connectivity alone and they often required dynamic
routing tables or modiﬁcations of packet headers. Reducing
the route length and stretch, compared to earlier work, has a
positive impact on latency and jitter.
We consider the state-of-the-art approach to resilient routing,
which protects a network by covering it with arc-disjoint
spanning arborescences [18] (arborescences are used to deﬁne
alternative routes to the destination in the case of failed links).
We motivate our approach with the fact that focusing only
on the connectivity can lead to very long failover paths,
where we also give some appropriate lower bounds. We thus
investigate algorithms which compute an arc-disjoint spanning
arborescence packing, where each arborescence provides low
stretch, hence optimizing the maximum stretch: the idea is
that this results in shorter failover routes, without sacriﬁcing
connectivity. Since we keep failover arborescences (“trees”)
small, we call our approach Bonsai.
1
t
T1
u
v
x
w
t
T2
x
w
u
v
Fig. 1. Example of a ﬁve node graph with two different choices of failover
routes T1, T2, depicted in blue (dashed) and red (dotted). In both T1, T2,
routing can switch to a second arc-disjoint arborescence if a failure is
encountered. T1 is inspired by routing along a Hamiltonian cycle, either
clock- or counter-clockwise. The arborescences in T2 optimize for short paths.
As we prove the problem to be NP-hard for general
network topologies, we present a fast and ﬂexible heuristic
that takes stretch optimization criteria into account. We report
on extensive experiments of this heuristic, for different random
and real-world networks. Our results show that we can signif-
icantly improve the stretch for many scenarios, in particular
when the network size increases, in comparison to currently
used methods. Moreover, our techniques also provide good
performance gains in other aspects, such as the computation
time or stretch in relation to network connectivity. Finally, we
demonstrate the beneﬁts of low-stretch failover algorithms to
support more general failure models than usually studied in the
literature: when the failures are appropriately clustered, low-
stretch arborescences greatly increase network survivability.
Example. To illustrate our problem and show the need for
route length-aware arborescences, we consider the network
with ﬁve nodes in Fig. 1. In this simple example, we consider
ﬂows that need to be routed to the destination t, in the top of
the ﬁgure. In the absence of link failures, the ﬂows could be
routed along e.g. the dotted red paths. In the case of incident
link failures, any node y will apply conditional rules which
have been pre-installed. These rules can only be conditioned on
the availability of links incident to the node y and the in-port,
i.e., rerouting decisions are purely local. We refer to Sec. II
(and related work [13], [14], [16], [20]) for a detailed model.
We are interested in strategies to pre-compute such condi-
tional failover rules which ensure that one is still able to route
to t, even in the presence of multiple failures. In the example
in Fig. 1, node x has a conditional failover rule which reroutes
trafﬁc if the dotted red arc (x, t) is not available. In the case of
the T1 tree, trafﬁc might be rerouted to node w via the dashed
blue arc (x, w). If w would not match on the incoming port,
then the packet might be forwarded again to x, resulting in a
forwarding loop.
Prior work provided important insights in how failover rules
should be deﬁned in order to avoid such loops, even under
multiple link failures, for example, relying on Hamiltonian
cycles [15, §B.6]. However, in the worst case, these schemes
can result in very long paths: if x resorts to the alternative
counter-clockwise route indicated by dashed blue arcs in T1,
the stretch is on the order of the number of nodes, which is
especially harmful when larger examples are considered. On the
other hand, the routing as described in T2 on the right side just
induces a stretch of one extra hop. Thus, we aim to ensure that
failover paths “preserve locality”, without sacriﬁcing resiliency.
As such, we are interested in algorithms to compute static
failover rules which result in paths like the one indicated in T2.
A large body of work on routing schemes resilient to
single failures as well as routing schemes resilient to multiple
failures with dynamic failover tables (where link reversal
approaches [21] can be used) exists, as we will discuss in
more details in the related work section. However, much
less is known about the design of resilient static forwarding
tables, especially for scenarios where packet-header rewriting
or packet-duplication is impossible or undesired (the former
consumes header space and the latter introduces additional
loads). The most closely related works to ours are by Chiesa et
al. [14], [15], [18], [22], Stephens et al. [16], [17], and Pignolet
et al. [13], [23], who developed robust failover schemes using
static forwarding tables. These approaches provide very high
resilience. However, they do not guarantee any non-trivial
deterministic bounds on the resulting path lengths. The work
of Foerster et al. [8] provides bounds on the resulting path
lengths, however just for specialized regular topologies such
as the 2d-torus, grids, and data center topologies based on
complete bipartite graphs—these constructions are specialized
and cannot be extended to more general graph classes.
This paper aims to ﬁll this gap, by considering the study
of deterministic local algorithms for short failover paths on
general network topologies. We build upon the concepts of arc-
disjoint spanning arborescences, which were also exploited
in prior work [8], [14], [15], [18], [22], [24], [25] and are
reminiscent of work on homotopic routing problems [26].
Organization. We present our formal model in Section II,
followed by Section III, where we introduce the concepts of arc-
disjoint spanning arborescences and derive lower bounds on the
possible stretch, along with proving optimal stretch computation
to be NP-hard. Section IV investigates the construction of
stretch-aware arborescences, where we ﬁrst introduce prior
methods and then present our own round-robin approach, which
can efﬁciently swap links for optimization purposes. In the next
Section V, we also provide positive evaluation results which
showcase that our new approach performs well in practice,
in comparison to prior work. We furthermore show that low-
stretch arborescences also have a positive inﬂuence on the
resiliency, by investigating theoretical guarantees for distributed
failure clusters in Section VI. We then discuss related work in
Section VII and lastly conclude in Section VIII.
II. NETWORK AND ROUTING MODEL
We model the network as a graph G = (V, E), connecting
n nodes in set V (switches, routers, hosts) using bidirected
links E (i.e., a full-duplex symmetric digraph). That is, if there
is a link (u, v), then there is also always a link (v, u) in the
opposite direction. When focusing on the directed nature of a
link, we often use the term arc to emphasize this.
We assume that forwarding rules can match the destination
ﬁeld from the packet header as well as the in-port (the port
2
from which a packet arrives at v)1, and depending on this
match, deﬁne the outgoing port to which a packet is forwarded
at v. In other words, the focus of this paper is on oblivious
routing algorithms which do not rely on any dynamic state
at nodes (e.g., no counters), nor in packets: we do not allow
packet tagging. While marking packets is known to improve
the robustness of routing [14], [27], it may not be possible
in practice to add additional header ﬁelds or to reuse existing
ﬁelds, as they are needed by other protocols.
The failover mechanisms needs to be statically pre-
conﬁgured: at the time the failover rules are installed, the
set of link failures F is not known yet. The mechanism must
be conﬁgured such that for any possible set of local link
failures, a failover action is taken which provides connectivity
and stretch guarantees, independently of the additional failures
that may be encountered down-stream.
More precisely, we say that a failover algorithm A has a
resiliency of |F |, if for any source-destination pair s, t ∈ V it
holds: the route taken by packets from s according to algorithm
A leads to t despite any |F | link failures.
Note that statically preconﬁgured failover allows a network
to react seamlessly to local failures, whether they are transient
or permanent. In case of permanent link problems, the recon-
struction of routes can be triggered in addition, if necessary.
The focus of this work is on the properties of such local failover
algorithms and not on the reconstruction of permanent failures.
III. ROOTED SPANNING ARBORESCENCES
In order to obtain efﬁcient local fast failover algorithms, we
leverage a known approach for resilient routing [14], [18], [22],
[25], based on rooted arc-disjoing spanning arborescences2:
routing is performed along arborescences, where upon hitting a
failure, the packet switches to another arborescence and follows
it—without modifying the packet header.
A. Arborescence Preliminaries and Prior Work
We now formally deﬁne the concept of rooted arc-disjoint
spanning arborescences and how to use them for failover routing
as discussed in prior work, e.g., by switching between them
in a circular order [14], [15], [18], [22].
Arborescence properties. Let (u, v) denote a directed arc from
node u to v. A directed subgraph T is an r-rooted spanning
arborescence of G if (i) r ∈ V (G), (ii) V (T ) = V (G), (iii) r
is the only node without outgoing arcs and (iv), for each v ∈
V \ {r}, there exists a single directed path from v to r. When
it is clear from the context, we use the term ”arborescence“
to refer to a t-rooted spanning arborescence, where t is the
destination node.
Generating arc-disjoint arborescences. A packing (set) of
arborescences T = {T1, . . . Tk} is arc-disjoint if no pair of
1The in-port is crucial for resiliency. E.g., consider a network with a dead-
end, e.g., a node v which can only be reached via a link from u after the
failures. As packets are forced to return back to u along link (v, u), i.e., the
same link from which they arrived, matching the in-port is needed to facilitate
a different routing decision at v, avoiding a loop.
2Also denoted as branchings or directed rooted trees in the literature.
arborescences in T shares common arcs, i.e., if (u, v) ∈ E(Ti)
then (u, v) /∈ E(Tj) for all i 6= j. It is known that k arc-disjoint
arborescences exist in any k-connected graph [28] and that they
can be computed efﬁciently [29], with a runtime of O(|E| +
nk3 log2 n). In a simpler (and slower) version, one creates a
spanning arborescence s.t. the remaining graph remains k − 1
connected, and repeating this process k − 2, k − 3, . . . , until
k arc-disjoint arborescences are obtained [30]. A conceptually
different approach is proposed by Chiesa et al. [15], using
link-disjoint Hamiltonian cycles: given k/2 such cycles, they
can be turned into k arc-disjoint arborescences, two for each
cycle, in opposite directions. However, k-connectedness does
not imply k/2 disjoint Hamiltonian cycles.
Resilient routing on arc-disjoint arborescences. Elhourani et
al. [24] and Chiesa et al. [15] showed how decompositions of G
into T can be used to deﬁne failover routes for packets destined
to t. These packets are routed according to an arborescence
Ti by forwarding them along the unique directed path of Ti
towards the root t. If a link (u, v) ∈ E(Ti) that should be
used for the next hop is not available, the affected packets
are forwarded along a different arborescence Tj at u, i.e., the
packet switches from Ti to Tj at u.
When arborescences are arc-disjoint, a failed arc only
disconnects one arborescence, i.e., in a k-connected graph, k−1
failures leave at least one arborescence intact. On the other
hand, k failures can physically disconnect the destination from