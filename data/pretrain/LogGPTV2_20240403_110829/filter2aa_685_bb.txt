### Type Compatibility

You may wonder why the `cstring` and `cint` types are necessary in the `printf` procedure. Why can't you use `string` and `int`? Let's explore this by modifying your `ffi.nim` file.

Modify the `printf` procedure to return an `int` type and accept a `string` type as its first argument. Then, recompile and run the program. You will likely see no output, which highlights the potential dangers of using the Foreign Function Interface (FFI). In this case, the procedure call appears to do nothing, but in other cases, it might cause the program to crash. The compiler relies on you to specify the correct types, as it cannot infer them.

When you change the `cstring` type to `string`, you pass a Nim string object to the C `printf` procedure, which expects a `const char*` type. Receiving the wrong type can lead to various issues, including memory corruption. A Nim string is an object that contains two fields: the length of the string and a pointer to an array of characters. This structure allows a Nim string to be easily converted to a `const char*`. However, even though this conversion is straightforward, it is not implicit when passing a `string` to `printf`, which expects a `cstring`.

### Conversion from `cstring` to `string`

Converting from `cstring` to `string` is not implicit due to the overhead involved. Therefore, you must perform this conversion explicitly using a type cast or the `$` operator.

The `cint` type is very similar to the `int` type. As per the Nim documentation, `cint` is an alias for `int32`: [Nim Documentation](http://nim-lang.org/docs/system.html#cint). The difference between `int` and `int32` is that the former's bit width depends on the current architecture, while the latter is always 32 bits.

The system module defines many more compatibility types, many of which are inspired by C. There will be times when you need to import types defined in C. The next section will show you how to do this.

### Wrapping C Types

Most of the work in interfacing with C libraries involves wrapping procedures. The second most common task is wrapping types, which we will discuss now.

In the previous section, I showed you how to wrap the `printf` procedure. In this section, you will learn how to wrap the `time` and `localtime` procedures, which allow you to retrieve the current system time in seconds and convert that time into calendar time, respectively. These procedures return custom types that need to be wrapped first.

#### Wrapping the `time` Procedure

The `time` procedure returns the number of seconds since the UNIX epoch (January 1, 1970). Its prototype is:

```c
time_t time(time_t *arg);
```

Research indicates that `time_t` is a signed integer. The following listing shows the declaration in Nim:

```nim
type
  CTime = int64

proc time(arg: ptr CTime): CTime {.importc, header: "".}
```

Here, you wrap the `time_t` type yourself. The procedure declaration uses the `ptr` keyword to emulate the `time_t*` type, which is a pointer to a `time_t` type.

#### Wrapping the `localtime` Procedure

The `localtime` procedure takes a pointer to a `time_t` value and returns a pointer to a `struct tm` value. Its prototype is:

```c
struct tm *localtime(const time_t *time);
```

The `struct tm` type is more complex, containing nine integer fields. The definition in C would look like this:

```c
struct tm {
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};
```

Wrapping this type is straightforward. For now, let's wrap the `tm_min` and `tm_hour` fields:

```nim
type
  TM {.importc: "struct tm", header: "".} = object
    tm_min: cint
    tm_hour: cint
```

Then, wrap the `localtime` procedure and use it with the `time` procedure:

```nim
type
  CTime = int64
  TM {.importc: "struct tm", header: "".} = object
    tm_min: cint
    tm_hour: cint

proc time(arg: ptr CTime): CTime {.importc, header: "".}
proc localtime(time: ptr CTime): ptr TM {.importc, header: "".}

var seconds = time(nil)
let tm = localtime(addr seconds)
echo(tm.tm_hour, ":", tm.tm_min)
```

Save this code as `ffi2.nim`, compile, and run it. You should see the current time displayed, such as `18:57`.

### Main Takeaways

- Wrapping a type involves copying its structure into a Nim type definition.
- Field names must match those of the C type. You can rename them using the `importc` pragma.
- When passing a pointer to a C procedure, use the `addr` keyword to get the address of a variable.

### Wrapping an External C Library

So far, I have shown you how to wrap simple procedures from the C standard library. Now, let's wrap a small part of the SDL (Simple DirectMedia Layer) library, which is widely used for multimedia applications.

#### Downloading the Library

Before writing the wrapper, download the SDL runtime binaries from [SDL Downloads](www.libsdl.org/download-2.0.php#source).

#### Creating the Wrapper

A library wrapper consists of one or more modules that contain wrapped procedures and type definitions. For large libraries like SDL, you don't need to wrap everything; just the necessary parts.

##### Dynamic Linking

For dynamic linking, you must provide the filename of the shared library. The filenames for different operating systems are:

- **Windows**: `SDL2.dll`
- **Linux**: `libSDL2.so`
- **Mac OS**: `libSDL2.dylib`

Define these in your `sdl` module:

```nim
when defined(Windows):
  const libName* = "SDL2.dll"
elif defined(Linux):
  const libName* = "libSDL2.so"
elif defined(MacOsX):
  const libName* = "libSDL2.dylib"
```

Use the `dynlib` pragma to dynamically link C procedures:

```nim
proc init*(flags: uint32): cint {.importc: "SDL_Init", dynlib: libName.}
```

##### Wrapping the Types

Define the necessary types:

```nim
type
  SdlWindow = object
  SdlWindowPtr* = ptr SdlWindow
  SdlRenderer = object
  SdlRendererPtr* = ptr SdlRenderer
```

##### Wrapping the Procedures

Wrap the required SDL procedures:

```nim
{.push dynlib: libName.}
proc init*(flags: uint32): cint {.importc: "SDL_Init".}
proc createWindowAndRenderer*(width, height: cint, window_flags: cuint,
                              window: var SdlWindowPtr, renderer: var SdlRendererPtr): cint
  {.importc: "SDL_CreateWindowAndRenderer".}
proc pollEvent*(event: pointer): cint {.importc: "SDL_PollEvent".}
proc setDrawColor*(renderer: SdlRendererPtr, r, g, b, a: uint8): cint
  {.importc: "SDL_SetRenderDrawColor", discardable.}
proc present*(renderer: SdlRendererPtr) {.importc: "SDL_RenderPresent".}
proc clear*(renderer: SdlRendererPtr) {.importc: "SDL_RenderClear".}
proc drawLines*(renderer: SdlRendererPtr, points: ptr tuple[x, y: cint],
                count: cint): cint {.importc: "SDL_RenderDrawLines", discardable.}
{.pop.}
```

This ensures that each procedure gets the `dynlib` pragma. The `var` keyword is used in place of `ptr` to store results in variables passed as parameters. The `pointer` type in Nim is equivalent to `void*` in C, which is a pointer to any type.