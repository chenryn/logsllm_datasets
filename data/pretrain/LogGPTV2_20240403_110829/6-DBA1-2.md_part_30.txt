auto.cnf ibdata1 ib_logfile1 mysql mysql3308.pid mysql3308.sock.lock sys
ib_buffer_pool ib_logfile0 ibtmp1 mysql3308.err mysql3308.sock
performance_schema
### 2.3.2查看服务信息
\[root@client-50 \~\]# netstat -ntulp \| grep 3307
tcp6 0 0 :::3307 :::\* LISTEN 5278/mysqld
\[root@client-50 \~\]# netstat -ntulp \|grep 3308
tcp6 0 0 :::3308 :::\* LISTEN 5805/mysqld
\[root@client-50 \~\]# netstat -nultp \|grep mysqld
tcp6 0 0 :::3307 :::\* LISTEN 6117/mysqld
tcp6 0 0 :::3308 :::\* LISTEN 5805/mysqld
### 2.3.3访问服务
\[root@client-50 \~\]# /usr/local/mysql/bin/mysql -uroot
-p\'+lak&lTbh2sc\' -S /dir1/mysql3307.sock
mysql\> alter user root@\"localhost\" identified by \"123456\";
#修改初始密码
Query OK, 0 rows affected (0.00 sec)
\[root@client-50 \~\]# /usr/local/mysql/bin/mysql -uroot
-p\"pqMSsswNL8\ alter user root@\"localhost\" identified by \"123456\";
Query OK, 0 rows affected (0.00 sec)
\[root@client-50 \~\]# /usr/local/mysql/bin/mysql -uroot -p123456 -S
/dir1/mysql3307.sock
### 2.3.4存储数据
mysql\> create database bbsdb;
Query OK, 1 row affected (0.00 sec)
mysql\> create table bbsdb.a(id int);
Query OK, 0 rows affected (0.24 sec)
mysql\> insert into bbsdb.a values(11);
Query OK, 1 row affected (0.03 sec)
### 2.3.5停止服务
\[root@client-50 \~\]# /usr/local/mysql/bin/mysqld_multi \--user=root
\--password=123456 stop 1
\[root@client-50 \~\]# /usr/local/mysql/bin/mysqld_multi \--user=root
\--password=123456 stop 2
#### 2.3.6 性能调试
\[root@client-50 \~\]# vim /etc/my.cnf
\[mysqld1\]
server_id=1
log-bin=mysql111
\[root@client-50 \~\]# /usr/local/mysql/bin/mysql -uroot -p123456 -S
/dir1/mysql3307.sock
mysql\> show master status;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| File \| Position \| Binlog_Do_DB \| Binlog_Ignore_DB \|
Executed_Gtid_Set \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| mysql111.000001 \| 154 \| \| \| \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
授权使用:
允许客户端使用admin用户连接50数据库服务,数据存储在实例2服务的db8库的a表
1\. 开启实例2,并登录
\[root@client-50 \~\]# /usr/local/mysql/bin/mysqld_multi start 2
\[root@client-50 \~\]# /usr/local/mysql/bin/mysql -uroot -p123456 -S
/dir2/mysql3308.sock
2.  管理员授权admin
mysql\> grant all on db8.\* to admin@\"%\" identified by \"123456\";
Query OK, 0 rows affected, 1 warning (0.00 sec)
3.  客户端登录,按照端口登录相应实例
\[root@sql52 \~\]# mysql -h192.168.4.50 -P3308 -uadmin -p123456
4.  操作数据库
mysql\> show databases;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Database \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| information_schema \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
mysql\> create database db8;
Query OK, 1 row affected (0.00 sec)
mysql\> create table db8.a(id int);
Query OK, 0 rows affected (0.29 sec)
mysql\> insert into db8.a values(66);
Query OK, 1 row affected (0.04 sec)
mysql\> insert into db8.a values(88);
Query OK, 1 row affected (0.02 sec)
mysql\> select \* from db8.a;
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 66 \|
\| 88 \|
+\-\-\-\-\--+
2 rows in set (0.00 sec)
5.  
6.  
#  三 Mysql性能调忧
(在nosql 第一天中午时段讲)
提高mysql系统的性能,响应速度
-   替换有问题的硬件(cpu/磁盘/内存等)
-   服务程序的运行参数调整
-   对sql查询进行优化
-   网络带宽,网络架构
\[root@client-50 \~\]# uptime #查看cpu使用情况
11:28:01 up 3:25, 1 user, load average: 0.06, 0.03, 0.05
\[root@client-50 \~\]# iostat
Linux 3.10.0-693.el7.x86_64 (client-50) 2019年02月27日 \_x86_64\_ (1
CPU)
avg-cpu: %user %nice %system %iowait %steal %idle
0.05 0.00 0.08 0.19 0.03 99.64
Device: tps kB_read/s kB_wrtn/s kB_read kB_wrtn
vda 1.24 22.79 5.16 281286 63650
dm-0 1.19 22.04 4.99 272051 61602
dm-1 0.00 0.09 0.00 1060 0
#Iowait -等待
\[root@client-50 \~\]# free -m #查看内存
total used free shared buff/cache available
Mem: 992 313 344 7 334 488
Swap: 0 0 0
## 查看数据库相关配置
### 连接数/并发量
mysql\> show variables like \"%conn%\";
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| character_set_connection \| utf8 \|
\| collation_connection \| utf8_general_ci \|
\| connect_timeout \| 10 \|
\| disconnect_on_expired_password \| ON \|
\| init_connect \| \|
\| max_connect_errors \| 100 \|
\| max_connections \| 151 \| #并发连接数
\| max_user_connections \| 0 \|
\| performance_schema_session_connect_attrs_size \| 512 \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
9 rows in set (0.00 sec)
mysql\> set global max_connections=200; #修改并发连接为200
Query OK, 0 rows affected (0.00 sec)
mysql\> show variables like \"%max_connection%\";
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| max_connections \| 200 \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
1 row in set (0.01 sec)
### 连接超时
mysql\> show variables like \"%timeout%\";
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+
\| connect_timeout \| 10 \| #单位为s,10s内连接失败,
\| delayed_insert_timeout \| 300 \|
\| have_statement_timeout \| YES \|
\| innodb_flush_log_at_timeout \| 1 \|
\| innodb_lock_wait_timeout \| 50 \|
\| innodb_rollback_on_timeout \| OFF \|
\| interactive_timeout \| 28800 \|
\| lock_wait_timeout \| 31536000 \|
\| net_read_timeout \| 30 \|
\| net_write_timeout \| 60 \|
\| rpl_stop_slave_timeout \| 31536000 \|
\| slave_net_timeout \| 60 \|
\| wait_timeout \| 28800 \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+
13 rows in set (0.00 sec)
mysql\>
### 缓存相关参数
mysql\> show variables like \"%buffer%\";
### 查询优化
mysql\> show global status like\"%qcache%\" ;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+
\| Qcache_free_blocks \| 1 \|
\| Qcache_free_memory \| 1031832 \|
\| Qcache_hits \| 0 \| #查询缓存里被查找到数据的次数
\| Qcache_inserts \| 0 \| #查询请求总数
\| Qcache_lowmem_prunes \| 0 \| #清除查询缓存数据的次数
\| Qcache_not_cached \| 1 \|
\| Qcache_queries_in_cache \| 0 \|
\| Qcache_total_blocks \| 1 \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+
8 rows in set (0.00 sec)
### 优化程序元访问数据的sql命令
数据库服务日志类型:服务的日记文件
错误日志 binlog日志 查询日志 慢查询日志
#### 错误日志:
默认启用 记录服务启动和运行过程中的信息 /var/log/mysql.log
#### binlog日志:
#### 查询日志:
记录执行的所有sql命令
> 在my.cnf文件中添加:general-log 重启服务,得到 主机名.log 日志文件
>
> 可实时监控 tail -f /var/lib/mysql/主机名.log
>
> \[root@client-50 \~\]# vim /etc/my.cnf
>
> \[mysqld\]
>
> general-log
>
> \[root@client-50 \~\]# systemctl restart mysqld
>
> \[root@client-50 \~\]# vim /var/lib/mysql/client-50.log
>
> \[root@client-50 \~\]#tail -f /var/lib/mysql/主机名.log
>
> /usr/sbin/mysqld, Version: 5.7.17-log (MySQL Community Server (GPL)).
> started with:
>
> Tcp port: 0 Unix socket: /var/lib/mysql/mysql.sock
>
> Time Id Command Argument
>
> 2019-02-27T07:28:42.921195Z 1 Query SELECT TABLE_SCHEMA, TABLE_NAME
> FROM INFORMATION_SCHEMA.TABLES WHERE CREATE_OPTIONS LIKE
> \'%partitioned%\';
>
> 2019-02-27T07:30:57.504272Z 3 Connect root@localhost on using Socket
>
> 2019-02-27T07:30:57.504996Z 3 Query select @@version_comment limit 1
>
> 2019-02-27T07:31:11.846030Z 3 Query show databases
#### 慢查询日志
记录耗时较长或不使用索引的查询操作
记录超过指定时间(默认10s)显示
![](media/image36.png){width="5.766666666666667in"
height="2.209722222222222in"}
\[root@client-50 \~\]# vim /etc/my.cnf
\[mysqld\]
slow-query-log
long-query-time=5
log-queries-not-using-indexes
\[root@client-50 \~\]# systemctl restart mysqld
\[root@client-50 \~\]# tail -f /var/lib/mysql/client-50-slow.log
/usr/sbin/mysqld, Version: 5.7.17-log (MySQL Community Server (GPL)).
started with:
Tcp port: 0 Unix socket: /var/lib/mysql/mysql.sock
Time Id Command Argument
\# Time: 2019-02-27T07:47:27.910641Z
\# User@Host: root\[root\] @ localhost \[\] Id: 3
\# Query_time: 6.000552 Lock_time: 0.000000 Rows_sent: 1 Rows_examined:
0
SET timestamp=1551253647;
select sleep(6);
\[root@client-50 \~\]# mysqldumpslow /var/lib/mysql/client-50-slow.log
#统计日志记录信息
Reading mysql slow query log from /var/lib/mysql/client-50-slow.log
Count: 1 Time=0.00s (0s) Lock=0.00s (0s) Rows=0.0 (0), 0users@0hosts
\# Time: N-N-27T07:N:N.910641Z
\# User@Host: root\[root\] @ localhost \[\] Id: N
\# Query_time: N.N Lock_time: N.N Rows_sent: N Rows_examined: N
SET timestamp=N;
select sleep(N)
\[root@client-50 \~\]# mysqldumpslow /var/lib/mysql/client-50-slow.log
\>sql.txt
案例1：实现MySQL读写分离
案例2：配置MySQL多实例
案例3：MySQL性能优化
1 案例1：实现MySQL读写分离
1.1 问题
搭建一主一从结构
配置maxscale代理服务器
测试分离配置
1.2 方案
使用4台RHEL
7虚拟机，如图-1所示。其中192.168.4.10和192.168.4.20，分别提供读、写服务，均衡流量，通过主从复制保持数据一致性，由MySQL代理192.168.4.100面向客户端，收到SQL写请求时，交给服务器A处理，收到SQL读请求时，交给服务器B处理。linux客户机用于测试配置，可以使用真机代替
图－1
1.3 步骤
实现此案例需要按照如下步骤进行。
步骤一：搭建主从
1）搭建一主一从结构，主库192.168.4.10上面操作
\[root@master10 \~\]# vim /etc/my.cnf
\[mysqld\]
server_id=10 //指定服务器ID号
log-bin=master10 //启用binlog日志，并指定文件名前缀
\...
\[root@master10 \~\]# systemctl restart mysqld //重启mysqld
2）从库192.168.4.20上面操作
\[mysqld\]
server_id=20 //指定服务器ID号，不要与Master的相同