title:Binsec/Rel: Efficient Relational Symbolic Execution for Constant-Time
at Binary-Level
author:Lesly-Ann Daniel and
S&apos;ebastien Bardin and
Tamara Rezk
2020 IEEE Symposium on Security and Privacy
BINSEC/REL: Efﬁcient Relational Symbolic
Execution for Constant-Time at Binary-Level
Lesly-Ann Daniel∗, Sébastien Bardin∗, Tamara Rezk†
∗ CEA, List, Université Paris-Saclay, France
† INRIA Sophia-Antipolis, INDES Project, France
PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract—The constant-time programming discipline (CT) is
an efﬁcient countermeasure against timing side-channel attacks,
requiring the control ﬂow and the memory accesses to be
independent from the secrets. Yet, writing CT code is challenging
as it demands to reason about pairs of execution traces (2-
hypersafety property) and it is generally not preserved by the
compiler, requiring binary-level analysis. Unfortunately, current
veriﬁcation tools for CT either reason at higher level (C or
LLVM), or sacriﬁce bug-ﬁnding or bounded-veriﬁcation, or do
not scale. We tackle the problem of designing an efﬁcient
binary-level veriﬁcation tool for CT providing both bug-ﬁnding
and bounded-veriﬁcation. The technique builds on relational
symbolic execution enhanced with new optimizations dedicated
to information ﬂow and binary-level analysis, yielding a dramatic
improvement over prior work based on symbolic execution. We
implement a prototype, BINSEC/REL, and perform extensive
experiments on a set of 338 cryptographic implementations,
demonstrating the beneﬁts of our approach in both bug-ﬁnding
and bounded-veriﬁcation. Using BINSEC/REL, we also automate
a previous manual study of CT preservation by compilers.
Interestingly, we discovered that gcc -O0 and backend passes
of clang introduce violations of CT in implementations that
were previously deemed secure by a state-of-the-art CT veriﬁ-
cation tool operating at LLVM level, showing the importance of
reasoning at binary-level.
I. INTRODUCTION
Timing channels occur when timing variations in a sequence
of events depends on secret data. They can be exploited by
an attacker to recover secret information such as plaintext
data or secret keys. Timing attacks, unlike other side-channel
attacks (e.g based on power-analysis, electromagnetic radiation
or acoustic emanations) do not require special equipment and
can be performed remotely [1], [2]. First timing attacks ex-
ploited secret-dependent control ﬂow with measurable timing
differences to recover secret keys [3] from cryptosystems. With
the increase of shared architectures (e.g. infrastructure as a
service) arise more powerful attacks where an attacker can
monitor the cache of the victim and recover information on
secret-dependent memory accesses [4]–[6].
it
Therefore,
is of paramount
importance to implement
adequate countermeasures to protect cryptographic implemen-
tations from these attacks. Simple countermeasures consisting
in adding noise or dummy computations can reduce timing
variations and make attacks more complex. Yet, these miti-
gations eventually become vulnerable to new generations of
attacks and provide only pseudo security [7].
The
(CT)
constant-time programming discipline
[8],
a.k.a. constant-time policy, is a software-based countermeasure
to timing attacks which requires the control ﬂow and the
memory accesses of the program to be independent from the
secret input1. Constant-time has been proven to protect against
cache-based timing attacks [8], making it the most effective
countermeasure against timing attacks, already widely used
to secure cryptographic implementations (e.g. BearSSL [9],
NaCL [10], HACL* [11], etc).
Problem. Writing constant-time code is complex as it requires
low-level operations deviating from traditional programming
behaviors. Moreover, this effort is brittle as it is generally
not preserved by compilers [12], [13]. For example, reasoning
about CT requires to know whether the code c=(x 0). Second, self-composition is applied on the
formula with precondition λ = λ(cid:48) to constraint the low inputs
to be equal in both executions. Finally, a postcondition c (cid:54)= c(cid:48)
asks whether the value of the conditional can differ, resulting