## 重新发现PostgreSQL之美 - 20 为什么啤酒&纸尿裤最搭      
### 作者        
digoal        
### 日期        
2021-06-12        
### 标签        
PostgreSQL , 营销 , 捆绑销售 , 品牌策略 , 数据挖掘 , 最佳拍档 , 标签关联性分析            
----        
## 背景        
视频回放: https://www.bilibili.com/video/BV13B4y1M7K4/  
场景:      
- 电商、零售等行业, 根据用户购物车、订单等数据找到最合理的搭配组合. 用于引导营销策略.     
    - 或者以用户最近N笔或N天的订单内的所有商品作为一个大的group    
- 根据用户评论涉及的关键词, 找到最佳搭配关键词. 用于引导品牌策略.       
挑战:      
- 每一个组合都是一组商品、标签或关键词. 相当于需要从现有的海量组合中找到高频组合(最搭组合).       
- 传统数据库不支持多值列(数组), 展开成多条记录数据量至少上升1个量级, 而且需要Join聚合才能得到最佳组合, 效率极差.      
- 在划窗分析需求中, 需要大量历史数据的基础进行计算, 性能差   
PG解决方案:      
- 1、内置数组, 数据量节省至少1个量级.       
- 2、内置数组倒排索引, 快速定位想要得到的搭配组合.       
- 3、内置数组的元素级别统计信息, 可以利用统计信息快速定位到最佳组合.       
- 4、datasketches 近似解, 支持海量数据毫秒级别实时输出搭配组合.       
- 5、使用topn的方法, 可以每天为每个商品存储1条记录, 这样就能实行实时滑窗分析, 也是传统数据库无法高效实现的.    
## 例子      
1、购物车、订单场景      
每个元素都有标签, 在一起就形成了标签集合       
```      
订单a : [商品1, 商品2, ...] -> [标签1, 标签2, ...]       
...      
订单xxx : [商品1, 商品2, ...] -> [标签1, 标签2, ...]       
```      
2、评论场景      
```      
评论1 : [分词1, 分词2, ...] -> [标签2, 标签3, ...]       
...      
评论xxx : [分词1, 分词2, ...] -> [标签2, 标签3, ...]       
```      
### 以购物车、订单场景为例      
1、传统数据库表结构:      
每个订单需要N条记录(取决于订单内有多少商品)      
```      
create table t (      
  order_id int8,  -- 订单id      
  itemid int  -- 商品id      
);      
```    
传统结构找到商品ID=1的最佳TOP 10组合.   
```  
select itemid,count(*) from t where order_id in   
  (select order_id from t where itemid=1)   
group by itemid order by count(*) desc limit 11;   
```   
2、PG 数据库, 一条订单只需要一条记录:      
```      
create unlogged table t (      
  order_id serial8 primary key,  -- 订单id       
  itemid int[]  -- 商品id数组       
);      
```      
3、生成测试数据: 使用长尾分布, 容易观察到近似搜索的效果      
```      
\set o1 random_zipfian(1,100000,1.2)      
\set o2 random_zipfian(10,100000,1.2)      
\set o3 random_zipfian(20,100000,1.2)      
\set o4 random_zipfian(30,100000,1.2)      
\set o5 random_zipfian(40,100000,1.2)      
\set o6 random_zipfian(50,100000,1.2)      
\set o7 random_zipfian(60,100000,1.2)      
\set o8 random_zipfian(70,100000,1.2)      
\set o9 random_zipfian(80,100000,1.2)      
\set o10 random_zipfian(90,100000,1.2)      
insert into t (itemid) values (array[:o1,:o2,:o3,:o4,:o5,:o6,:o7,:o8,:o9,:o10]::int[]);      
```      
```      
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 12 -j 12 -t 300000      
```      
共360万个订单       
```      
postgres=# select count(*) from t;      
  count        
---------      
 3600000      
(1 row)      
```      
4、对 itemid 创建gin索引       
```      
create index idx_t_1 on t using gin (itemid);      
```      
商品ID 1和哪10个商品最搭配?        
#### 传统方法:  
```      
create unlogged table tt (      
  order_id int8,  -- 订单id      
  itemid int  -- 商品id      
);      
create index idx_tt on tt (order_id);  
insert into tt select order_id, unnest(itemid) from t;  
select count(*) from tt;  
-- 展开商品后记录数比PG多了10倍  
```    
传统结构找到商品ID=1的最佳TOP 10组合, 使用了hash agg和index的情况下需要4.8秒.   
```  
select itemid,count(*) from tt where order_id in   
  (select order_id from tt where itemid=1)   
group by itemid order by count(*) desc limit 11;   
 itemid | count    
--------+--------  
      1 | 706647  
     90 | 157916  
     80 | 157076  
     70 | 156776  
     60 | 155228  
     50 | 153810  
     40 | 152431  
     30 | 149441  
     20 | 146573  
     10 | 139074  
     91 |  78262  
(11 rows)  
Time: 4832.984 ms (00:04.833)  
```   
#### 方法1:      
PG可以自定义一个新的聚合函数 ```array_aggn(anyarray, order, n)```, 对数组进行聚合, 得到一个二维数组, 返回按元素出现频率的前N或后N个元素.        
``` [元素][元素出现频率] ```      
```      
select array_aggn(itemid, 'desc', 5) from t where itemid @> array[1];         
```      
这条SQL可以通过GIN索引快速定位到包含1的订单记录, 同时对订单中的商品进行聚合, 返回元素出现频率最高的前5个元素以及频率.      
例如得到      
```      
[[99,2,300,203,10],[10000,8220,6543,5432,4566]]      
```      
自定义聚合的方法:  
[《PostgreSQL 10 自定义并行计算聚合函数的原理与实践 - (含array_agg合并多个数组为单个一元数组的  
例子)》](../201801/20180119_04.md)    
[《PostgreSQL Oracle 兼容性之 - 自定义并行聚合函数 PARALLEL_ENABLE AGGREGATE》](../201803/2018031  
2_03.md)    
[《PostgreSQL 并行计算解说 之9 - parallel 自定义并行聚合》](../201903/20190317_01.md)    
##### 扩展
除了用array来存储商品和标签, 也可以使用roaringbitmap来存储, 同样需要对rb类型新增一个聚合函数, 返回元素和元素出现频率.  
使用rb存储的好处是压缩存储, 效率更高一点.   
[《PostgreSQL pg_roaringbitmap - 用户画像、标签、高效检索》](../201911/20191118_01.md)    
https://github.com/ChenHuajun/pg_roaringbitmap  
#### 方法2:      
用统计信息得到近似解.       
例如要计算商品ID=1的商品和哪些商品最搭        
```      
create unlogged table tmp_t as select itemid from t where itemid @> array[1];         
SELECT 706647      
Time: 926.742 ms      
```      
```      
postgres=# select * from tmp_t limit 10;      
                 itemid                       
----------------------------------------      
 {1,15,616,652,40,122,124,74,47543,167}      
 {1,54477,112,35,72,50,76,70,91,103}      
 {1,373,338,31,41,50,305,341,82,3478}      
 {1,10,20,33,66,97,42797,151,205,316}      
 {1,69,49,106,52,55,63,7390,315,90}      
 {1,12,38,31,48,77,68,751,217,215}      
 {1,10,147,92,41,69,77,74,81,90}      
 {1,17,21,37,114,68609,72,73,1098,144}      
 {1,37,21,44,44,50,84,70,3202,97}      
 {1,5483,25,84,91,56,68,6944,332,190}      
(10 rows)      
```      
统计信息内有数组的element统计, 如下      
```      
postgres=# \d pg_stats      
                     View "pg_catalog.pg_stats"      
         Column         |   Type   | Collation | Nullable | Default       
------------------------+----------+-----------+----------+---------      
 schemaname             | name     |           |          |       
 tablename              | name     |           |          |       
 attname                | name     |           |          |       
 inherited              | boolean  |           |          |       
 null_frac              | real     |           |          |       
 avg_width              | integer  |           |          |       
 n_distinct             | real     |           |          |       
 most_common_vals       | anyarray |           |          |       
 most_common_freqs      | real[]   |           |          |       
 histogram_bounds       | anyarray |           |          |       
 correlation            | real     |           |          |       
 most_common_elems      | anyarray |           |          |       
 most_common_elem_freqs | real[]   |           |          |       
 elem_count_histogram   | real[]   |           |          |       
```      
收集统计信息      
```      
postgres=# analyze tmp_t;      
ANALYZE      
Time: 15.658 ms      
```      
查询购物车数组字段的统计信息详情      
```      