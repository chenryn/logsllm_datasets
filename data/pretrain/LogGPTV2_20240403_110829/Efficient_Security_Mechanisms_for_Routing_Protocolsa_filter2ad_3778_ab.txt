ing table listing all possible destinations within the network.
Each entry in a node’s routing table contains the address
(identity) of some destination, this node’s shortest known
distance (usually in number of hops) to that destination, and
the address of this node’s neighbor router that is the (cid:2)rst hop
on this shortest route to that destination; the distance to the
destination is known as the metric in that table entry. When
routing a packet to some destination, the node transmits the
packet to the indicated neighbor router for that destination,
and each router in turn uses its own routing table to forward
the packet along its next hop toward the destination.
To maintain the routing tables, each node periodically
transmits a routing update to to each of its neighbor routers,
containing the information from its own routing table. Each
node uses this information advertised by its neighbors to up-
date its own table, so that its route for each destination uses
as a next hop the neighbor that claimed the shortest distance
to that destination; the node sets the metric in its table entry
for that destination to 1 (hop) more than the metric in that
neighbor’s update.
4.2. Attacks to Distance Vector Routing
Without security mechanisms, a distance vector routing pro-
tocol may be vulnerable to a number of attacks from mali-
cious routers. For example, a malicious router could per-
form the following types of attacks [8, 14, 18, 20, 21, 28,
38, 40]:
(cid:15) Try to attract as much traf(cid:2)c as possible by adver-
tising short distances to all destinations. This attack
is sometimes referred to as a blackhole attack [14].
The blackhole attack is quite powerful, because the
malicious router can control any communication that
passes through it. The router can eavesdrop on data,
selectively drop or alter packets, or inject packets.
Otherwise eavesdropping on a speci(cid:2)c target may be
challenging in in today’s Internet, as one would need
to access the network link to the target, but by claim-
ing a short distance to the target, a malicious router can
attract the target’s traf(cid:2)c.
(cid:15) Try to claim longer distances. This attack results in
less traf(cid:2)c (cid:3)owing across the attacking router, poten-
tially allowing the attacker to obtain network services
without (for example, in the case of a multihop wire-
less ad hoc network) using its own network band-
width and battery power to forward packets from other
nodes. We do not attempt to prevent this attack, since
it is weaker than a malicious router arbitrarily discard-
ing, delaying, or reordering packets sent to it for for-
warding.
(cid:15) Inject routing loops. This is a powerful attack if the
resulting routing loop does not go through the mali-
cious router, since a single packet sent along that loop
can cause the packet to be forwarded a large number
of times. However, if the routing loop goes through
a malicious router, this attack is equivalent to a data
(cid:3)ooding attack: for example, if an attacker forms a
loop from itself through routers n1;n2; : : : ;nx and back
to itself, then each time it forwards the packet around
the loop, it is equivalent to sending a packet traversing
x routers.
network bandwidth and router processing time.
(cid:15) Inject a large number of route updates, to consume
Most of these attacks are forms of denial-of-service
attacks, either consuming network resources or preventing
packet delivery. Of these attacks, the most powerful attacks
are the blackhole attack and the routing loop attack (when
the attacker is not in the loop). As a result, we aim to pre-
vent a malicious router from claiming a shorter distance to a
target than it actually has, and to prevent a loop from form-
ing such that an attacker is not in the loop.
4.3. Overview of Previous Work on Securing Distance
Vector Routing and the Remaining Challenges
We brie(cid:3)y reviewed previous work on secure routing in
Section 1. SEAD is a recent secure distance vector routing
protocol we designed, that is particularly ef(cid:2)cient because
it uses one-way hash chains and no asymmetric cryptogra-
phy. We brie(cid:3)y overview SEAD and discuss the remaining
research challenges.
SEAD, the Secure Ef(cid:2)cient Ad hoc Distance vector rout-
ing protocol [13], is based on based on DSDV [30], and we
secure SEAD using hash chains. As in other distance vec-
tor protocols such as RIP [11, 23], SEAD requires some
limit on hop count (metric), denoted as k (cid:0) 1. A dis-
tance vector update originated from a node in SEAD con-
tains a sequence number and a metric for each destina-
v15
v10
v5
v14
v13
v12
v11
v9
v4
v8
v3
v7
v2
v6
v1
v0
Figure 2: An example of a SEAD hash chain, with k = 5 and n = 3. Arrows show the direction of hash chain
generation; hash chain usage proceeds in the opposite direction.
tion. The sequence number is used to indicate the fresh-
ness of each route update. The metric is the distance,
measured in number of hops, from the originating node
to the destination. When a node receives a route update,
for each entry in the route update, it accepts the entry if
the entry has a higher sequence number, or if the entry
has equal sequence number and a lower metric than the
route entry currently in the node’s route table for that des-
tination. In order to prevent attacks on the route updates,
the sequence number and metric must both be authenti-
cated.
SEAD authenticates the sequence numbers and met-
rics in route updates using one-way hash chains. As out-
lined in Section 4.2, we are mainly concerned about the
authenticity of a route update, and that a node cannot
make a route shorter (in order to prevent the blackhole
attack). To initialize, each node N forms a one-way hash
chain vkn;vkn(cid:0)1; : : : ;v0, with vi(cid:0)1 = H[vi], as we describe in
Section 3.2, where k(cid:0) 1 is the maximum hop count, and n
is the maximum sequence number this hash chain allows.
These values are used to authenticate routing update entries
that specify this node N as a destination. To allow values
vkn;vkn(cid:0)1; : : : ;v1 to be authenticated, an authentic v0 is pub-
lished as an authenticated seed value for the node N, for
example by a Certi(cid:2)cate Authority. The value vki+ j will
be used to authenticate a route update entry with sequence
number i and metric k (cid:0) j for the node N as a destination
when 1 (cid:20) j (cid:20) k.
For example, a hash chain for a node N is depicted in
Figure 2, where k = 5 and n = 3. To initialize, v0 is pub-
lished as an authenticated seed value for node N. To start
the (cid:2)rst route update for entries with N as the destination,
the node N (cid:2)rst sends v5 as an authenticator for sequence
number 0 and metric 0. A recipient would (cid:2)rst authenticate
v5 using the public authenticated value v0, and then compute
v4 from v5; the node would then advertise sequence number
0 and metric 1 using authenticator v4. Similarly, recipients
of that update would advertise sequence number 0 metric 2
using authenticator v3, and so forth. The next time the node
N starts route updates for entries with N as the destination,
it would disclose v10 to authenticate sequence number 1 and
metric 0.
Because of the properties of a one-way hash chain, a
node cannot forge a routing update with higher sequence
number, nor can it forge a routing update with an equal
sequence number and lower metric.
Larger sequence
numbers take precedence over smaller ones, so nodes would
simply drop updates with smaller sequence numbers, even
if the metric is lower.
Since a node selects the next-hop router towards a des-
tination to be the source address of the routing update with
the shortest distance it receives, the source address of each
routing update must be authenticated. This authentication
can be achieved with a signature, broadcast authentication,
or pairwise shared keys. SEAD speci(cid:2)es the use of pair-
wise shared keys, which exploits the periodic nature of the
protocol. When two nodes A and B move within range, one
of the two nodes (for example, A) will hear an update sent
by the other (B). That node A can begin including in each
of its updates symmetric authentication to the new neigh-
bor B. Conversely, when B hears one of A’s updates, it will
respond by including in B’s updates symmetric authentica-
tion to its new neighbor A. When the two nodes move away
from each other such that they are no longer neighbors, their
routing tables will re(cid:3)ect that. For example, when A and B
move apart, A’s routing table will show that B is no longer
a neighbor, as an update with a fresh sequence number will
override an older update received directly from B. A can
then stop including in its routing updates symmetric authen-
tication to node B.
Although SEAD does prevent a number of attacks, some
attacks and shortcomings remain:
(cid:15) SEAD does not prevent same-distance fraud:
that
is, a node receiving an advertisement for sequence
number s and distance (metric) d can re-advertise the
same sequence number s and distance d. Section 4.4
presents an approach that prevents this same-distance
fraud.
(cid:15) Another drawback of SEAD is that an attacker can
force a victim node to verify a hash chain as long as
O(ks), where k is the maximum number of hops and
s is the maximum number of sequence numbers rep-
resented by a hash chain. Section 4.5 describes the
tree-authenticated one-way chains mechanism, which
bounds this effort by O(k + lgs). The same scheme
prevents the sequence number rushing attack, which
we present in Section 4.5.
(cid:15) The overhead to verify authentication values can be
large if a node has missed several routing updates.
An attacker can exploit this overhead to perform a
denial-of-service attack by sending bogus routing up-
dates, forcing a node to spend considerable effort ver-
ifying the authenticity. In Section 4.6, we introduce a
novel authentication scheme that is a hybrid between
a one-way chain and a one-time signature which we
call an MW-chain. Based on the MW-chain, we intro-
duce in Section 4.7 a one-way chain that is very ef(cid:2)-
cient to verify in case of missed routing updates. In a
network with maximum diameter k, this approach re-
duces the veri(cid:2)cation overhead to O(c cpk +lgs) for ar-
bitrary positive integers c. Finally, we reduce the over-
head of setting up a single hash chain from O(ks) to
O(s).
We now discuss mechanisms that can solve these remain-
ing challenges. Our mechanisms can be generalized to se-
cure many other distance vector protocols.
4.4. Hash Tree Chains for Preventing
Same-Distance Fraud
We present an alternative called hash tree chains to one-way
hash chains for authenticating the distance metric in dis-
tance vector protocols, to prevent the same-distance fraud
attack introduced above. Our new mechanism forces a node
to increase the distance to the destination when sending
a routing update. As noted in Section 2, we use packet
leashes [15] to prevent an adversary from replaying a rout-
ing update in wireless networks, so that the adversary would
be a (cid:147)stealth node(cid:148) on that route. The packet leash also pro-
vides hop-by-hop authentication, preventing an adversary
from impersonating another node.
To prevent same-distance fraud, we need to prevent an
attacker from replaying the same hash value (thus without
increasing the metric) but replacing the node id with the
attacker’s node id. We construct a special one-way chain,
which we call a hash tree chain, where each element of the
chain encodes the node id, thus forcing a node to increase
the distance metric if it wants to encode its own id. Each
step in this one-way chain contains a collection of values,
one or more of which are used to authenticate any partic-
ular node. These values are authenticated using a Merkle
tree, and the root of that Merkle tree is used to generate the
collection of values in the next step.
A hash tree chain is a hybrid between a hash tree and
a one-way chain. The one-way chain property is used in
the same way as in SEAD (to enforce that nodes cannot
decrease the distance metric), and the hash tree property is
used to authenticate the node id. We construct the hash tree
between each pair vi(cid:0)1;vi of one-way chain values as fol-
lows. From the value vi, we derive a set of values b0; : : : ;bn,
using a one-way hash function H as b j = H[vi jj j], for each
j. We then build a hash tree above those values as described
in Section 3.1. The root of the tree becomes the previous
value of the one-way chain vi(cid:0)1 = b0n. Figure 3 shows an
example. The node with the id 1 forwards the shaded val-
ues b00, b1, and b23 to the neighboring nodes, which can
compute the one-way hash tree chain forward to verify the
authenticity of values b00, b1, and b23, and use the value b03
to sign their own id when forwarding the route update, thus
automatically increasing the distance metric.
We now present two examples of how the hash tree chain
can be used: when a single value corresponds to a node,
and when a g-tuple of values corresponds to a node. For
notational and analytic convenience, we describe hash tree
chains for which the number of values between each hash
chain value is a power of two.
In a small network, each value b j can correspond to a
single node; since no two nodes share a single value, an
attacker has no way to derive its value from the advertise-
ments of neighboring nodes, and hence it must follow the
hash tree chain to the next step in order to provide a valid
authenticator.
In larger networks, with n nodes, the O(n) overhead of
generating each step of the chain may be too great; as a
result, we authenticate each node with a g-tuple of val-
ues. Although two nodes share the same g-tuple of val-
ues, an attacker could learn each of its g values from dif-
ferent neighbors that advertise the same metric, and could
then forge an advertisement without increasing the metric.
We show that an attacker’s probability of success may be
suf(cid:2)ciently small. We also change the encoding of a node
id for each update, so that an attacker in a static network
cannot continue to forge updates once it (cid:2)nds an appropri-
ate set of values from its neighbors. Consider a hash tree
chain with 2m values in each step (and thus a hash tree
of height m + 1). For example, if each node has a unique
g (cid:1) (cid:0) 1, then the g-tuple encodes
g (cid:1), such that
node id between 0 and (cid:0)2m
x = (node id + H[sequence number]) mod(cid:0)2m
the g-tuple changes for each sequence number.
We now analyze the security of hash tree chains as the
probability that a malicious node can forge an advertisement
based on the advertisements from its neighbors. Clearly,
if each value corresponds to a single node id, no forgery
is possible. We now consider the case in which a pair of
values (i.e., g = 2) represents each node. For our analy-
sis, we consider a hash tree chain with 2m values at each
Generation
Usage
b0 = H[vi jj 0]
b00 = H[b0]
b01 = H[b00 jj b01]
PSfrag replacements
b1 = H[vi jj 1]
b01 = H[b1]
vi
vi(cid:0)1 = b03 =
H[b01 jj b23]
b2 = H[vi jj 2]
b02 = H[b2]
b3 = H[vi jj 3]
b03 = H[b3]
b23 = H[b02 jj b03]
Figure 3: Authenticating one distance metric within a sequence of a hash tree chain. In this example, each element
bi stands for one router, so this hash tree chain supports 4 routers.
2(cid:1) nodes. We compute
step, used in a network with n = (cid:0)2m
the probability that an attacker can claim the same metric
after it has heard the same metric advertised from q other
nodes. For each of the two values the attacker must produce,
there are 2m (cid:0) 2 other nodes that have that particular value.
It follows that the attacker has (cid:0)(n(cid:0)1)(cid:0)(2m(cid:0)2)
(cid:1) = (cid:0)n(cid:0)2m+1
(cid:1)
ways of failing to get a predetermined one of the two val-
ues. We now compute the probability that the attacker is
unable to obtain either value. Since the set of nodes from
which an attacker can receive either value are disjoint, there
are 2(2m(cid:0) 2) nodes that have one of those two values. As a
result, the attacker has (cid:0)(n(cid:0)1)(cid:0)2(2m(cid:0)2)
(cid:1) ways
of failing to get either of the two values. Applying the
inclusion-exclusion principle, we now compute the number
of ways the attacker can fail to obtain both values it needs: