  * 首先会初始化一些 `dynamorio` 的信息， 然后根据用户的参数来选择是使用基本块覆盖率（`instrument_bb_coverage`）还是使用边覆盖率(`instrument_edge_coverage`)。
  * 然后再注册一些事件的回调。
  * 之后就是设置命名管道和共享内存以便和 `afl-fuzz` 进行通信。
### 覆盖率记录
通过 `drmgr_register_bb_instrumentation_event`
我们就可以在每个基本块执行之前调用我们设置回调函数。这时我们就可以统计覆盖率信息了。具体的统计方式如下：
**instrument_bb_coverage 的方式**
    // 计算基本块的偏移并且取  MAP_SIZE 为数， 以便放入覆盖率表
    offset = (uint)(start_pc - mod_entry->data->start);
    offset &= MAP_SIZE - 1; // 把地址映射到 map中
    afl_map[offset]++
**instrument_edge_coverage 的方式**
    offset = (uint)(start_pc - mod_entry->data->start);
    offset &= MAP_SIZE - 1; // 把地址映射到 map中
    afl_map[pre_offset ^ offset]++
    pre_offset = offset >> 1
afl_map 适合 afl-fuzz 共享的内存区域， afl-fuzz 和 winafl.dll 通过 afl_map 来传递覆盖率信息。
### 效率提升方案
在
`event_module_load`会在每个模块被加载时调用，这个函会根据用户的参数为指定的目标函数设置一些回调函数，用来提升模糊测试的效率。主要代码如下：
    static void
    event_module_load(void *drcontext, const module_data_t *info, bool loaded)
    {
        if(options.fuzz_module[0]) {
            if(strcmp(module_name, options.fuzz_module) == 0) {
                if(options.fuzz_offset) {
                    to_wrap = info->start + options.fuzz_offset;
                } else {
                    //first try exported symbols
                    to_wrap = (app_pc)dr_get_proc_address(info->handle, options.fuzz_method);
                    if(!to_wrap) {
                        DR_ASSERT_MSG(to_wrap, "Can't find specified method in fuzz_module");                
                        to_wrap += (size_t)info->start;
                    }
                }
                if (options.persistence_mode == native_mode)
                {
                    drwrap_wrap_ex(to_wrap, pre_fuzz_handler, post_fuzz_handler, NULL, options.callconv);
                }
                if (options.persistence_mode == in_app)
                {
                    drwrap_wrap_ex(to_wrap, pre_loop_start_handler, NULL, NULL, options.callconv);
                }
            }
        module_table_load(module_table, info);
    }
在找到 `target_module` 中的 `target_method` 函数后，根据是否启用 `persistence` 模式，采用不同的方式给
`target_method` 函数设置一些回调函数，默认情况下是不启用 `persistence` 模式 ， `persistence`
模式要求目标程序里面有不断接收数据的循环，比如一个 `TCP` 服务器，会循环的接收客户端的请求和数据。下面分别分析两种方式的源代码。
#### 不启用 persistence
会调用
    drwrap_wrap_ex(to_wrap, pre_fuzz_handler, post_fuzz_handler, NULL, options.callconv);
这个语句的作用是在目标函数 `to_wrap` 执行前调用 `pre_fuzz_handler` 函数， 在目标函数执行后调用
`post_fuzz_handler` 函数。
下面具体分析
    static void
    pre_fuzz_handler(void *wrapcxt, INOUT void **user_data)
    {
        char command = 0;
        int i;
        void *drcontext;
        app_pc target_to_fuzz = drwrap_get_func(wrapcxt);
        dr_mcontext_t *mc = drwrap_get_mcontext_ex(wrapcxt, DR_MC_ALL);
        drcontext = drwrap_get_drcontext(wrapcxt);
        // 保存目标函数的 栈指针 和 pc 指针， 以便在执行完程序后回到该状态继续运行
        fuzz_target.xsp = mc->xsp;
        fuzz_target.func_pc = target_to_fuzz;
        if(!options.debug_mode) {
            WriteCommandToPipe('P');
            command = ReadCommandFromPipe();
            // 等待 afl-fuzz 发送 F ， 收到 F 开始进行 fuzzing
            if(command != 'F') {
                if(command == 'Q') {
                    dr_exit_process(0);
                } else {
                    DR_ASSERT_MSG(false, "unrecognized command received over pipe");
                }
            }
        } else {
            debug_data.pre_hanlder_called++;
            dr_fprintf(winafl_data.log, "In pre_fuzz_handler\n");
        }
        //save or restore arguments， 第一次进入时保存参数， 以后都把保存的参数写入
        if (!options.no_loop) {
            if (fuzz_target.iteration == 0) {
                for (i = 0; i xsp = fuzz_target.xsp;
        mc->pc = fuzz_target.func_pc;
        drwrap_redirect_execution(wrapcxt);
    }
### 启用 persistence
在 `fuzz` 网络应用程序时，应该使用该模式
    -persistence_mode in_app
在这个模式下，对目标函数的包装就没有 `pre_fuzz....` 和 `post_fuzz.....` 了， 此时就是在每次运行到目标函数就清空覆盖率，
因为程序自身会不断的调用目标函数。
    /* 每次执行完就简单的重置 aflmap， 这种模式适用于程序自身就有循环的情况 */
    static void
    pre_loop_start_handler(void *wrapcxt, INOUT void **user_data)
    {
        void *drcontext = drwrap_get_drcontext(wrapcxt);
        if (!options.debug_mode) {
            //let server know we finished a cycle, redundunt on first cycle.
            WriteCommandToPipe('K');
            if (fuzz_target.iteration == options.fuzz_iterations) {
                dr_exit_process(0);
            }
            fuzz_target.iteration++;
            //let server know we are starting a new cycle
            WriteCommandToPipe('P'); 
            //wait for server acknowledgement for cycle start
            char command = ReadCommandFromPipe(); 
            if (command != 'F') {
                if (command == 'Q') {
                    dr_exit_process(0);
                }
                else {
                    char errorMessage[] = "unrecognized command received over pipe: ";
                    errorMessage[sizeof(errorMessage)-2] = command;
                    DR_ASSERT_MSG(false, errorMessage);
                }
            }
        }
        else {
            debug_data.pre_hanlder_called++;
            dr_fprintf(winafl_data.log, "In pre_loop_start_handler\n");
        }
        memset(winafl_data.afl_area, 0, MAP_SIZE);
        if (options.coverage_kind == COVERAGE_EDGE || options.thread_coverage) {
            void **thread_data = (void **)drmgr_get_tls_field(drcontext, winafl_tls_field);
            thread_data[0] = 0;
            thread_data[1] = winafl_data.afl_area;
        }
    }
# 总结
通过对 `afl-fuzz.c` 的分析，我们知道 winafl 提供了两种有意思的功能，即数据修正功能 和
自定义数据发送功能。这两种功能可以辅助我们对一些非常规目标进行 fuzz, 比如网络协议、数据加密应用。通过对 `winafl.c` 可以清楚的知道如何使用
dynamorio 统计程序的覆盖率， 并且明白了 winafl 通过多次在内存中执行目标函数来提升效率的方式，
同时也清楚了在程序内部自带循环调用函数时，可以使用 persistence 模式来对目标进行 fuzz，比如一些网络服务应用。
# 参考
[http://riusksk.me/2019/02/02/winafl%E4%B8%AD%E5%9F%BA%E4%BA%8E%E6%8F%92%E6%A1%A9%E7%9A%84%E8%A6%86%E7%9B%96%E7%8E%87%E5%8F%8D%E9%A6%88%E5%8E%9F%E7%90%86/](http://riusksk.me/2019/02/02/winafl中基于插桩的覆盖率反馈原理/)