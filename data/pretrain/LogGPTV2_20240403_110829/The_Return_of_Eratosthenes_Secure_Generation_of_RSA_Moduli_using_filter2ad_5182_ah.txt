cobi test, we can assume that ˜𝑁 =(𝑁 −𝑝−𝑞+1)/4≠0 mod𝜙(𝑁) and
that the adversary introduced an error Δ𝑗 such that 𝑦′ =𝛾
˜𝑁+Δ𝑗 =±1
mod𝑁 . When the adversary cheats in the broadcast of the consis-
tencycheck,thesimulatorcomputes𝛾𝑡Int+Δ𝑡 ,where Δ𝑡 ≠0represents
the error introduced by A. Thus, for the equality to hold, A needs
to commit to Δ𝑡 during the broadcast, such that 𝛾𝑥 ˜𝑁+Δ𝑡 =𝑦𝑥 =𝛾𝑥 ˜𝑁
mod𝑁 . Since the distribution of 𝑥 ˜𝑁 is uniform with a min-entropy
of 2−𝜎, because of the sampling of 𝑥,A has probability at most 2−𝜎+1
of finding the correct Δ𝑡. We finally note that Δ𝑡 cannot simply be
the right value in the group of exponents with higher probability
than this, because Rosser and Schoenfeld [34] showed that
𝜙(𝑁) >
𝑁
𝑒𝛾loglog𝑁
,
where 𝛾 is the Euler–Mascheroni constant. This gives us that
log2(𝜙(𝑁)) > 𝜎, when log2(𝑁) >2048 and 𝜎 ∼80.
𝑗=1(𝑣 ( 𝑗),ℓgcd), and stores them.
𝑗=1(𝑎( 𝑗),ℓgcd), and stores them.
GCD Test:
(1) When all parties call FAdvMPC−CRT.Rand2k in Step 2, S
samples a random 𝑎  𝑏; thus, by sampling a random ˜𝑧 such that
gcd(𝑁 ,˜𝑧) =max{𝑏,𝑏′}, the simulator remains consistent with both 𝑏
and the probability that gcd(𝑁 ,𝑎) =𝑏′ >𝑏 occurs, since 𝑎 is sampled
identically. By adding a sufficiently random 𝑣 to 𝑧 any information
about 𝑝+𝑞−1 other than 𝑏 is masked, therefore the distribution of
the modified ˆ𝑧 output by the simulator is both statistically close to
the distribution of ˆ𝑧 in the protocol, and consistent with the (𝑁 ,𝑝,𝑞)
values generated by FRSAGen.
□
Lemma A.1. In Step 5 of the Sampling Phase of ΠRSAGen,
the distribution of each 𝑝( 𝑗) value is within statistical distance
(1−𝜖)𝜖𝑀sample/𝑆 of uniform over [2𝜆,2𝜆+𝜎), where 𝑆 = 2𝜆+𝜎 −2𝜆 is
the size of the range and 𝜖 = 𝑆/𝑀sample−(cid:4)𝑆/𝑀sample
(cid:5) ∈ [0,1) is the
decimal remainder in the division of the range size by 𝑀sample.
Proof. We can write 𝑆 =𝑀sample(⌊𝑆/𝑀sample⌋+𝜖) with 0≤ 𝜖 <1.
When dividing the range of size 𝑆 into blocks of size 𝑀sample, the
last block will not be complete (if 𝑀sample does not divide 𝑆). When
reducing the elements of [2𝜆,2𝜆+𝜎) modulo 𝑀sample, some residue
classes will therefore be present one more time than others: those
classes which have representatives in the included portion of the last
block. Let 𝑋1 denote the subset of 𝑥 ∈ [2𝜆,2𝜆+𝜎), whose residue class
is more present, and let 𝑋2 =[2𝜆,2𝜆+𝜎)\𝑋1 be those elements, whose
residue class does not have a representative in the included portion.
Let 𝑥 ∈ [2𝜆, 2𝜆+𝜎), by Euclidean division, 𝑥 can be uniquely
written as 𝑥 = 𝑎𝑀sample+𝑏 with 𝑎 ∈ N and 𝑏 ∈ [0,𝑀sample). As 𝑝( 𝑗)
is computed as 𝑝( 𝑗) =𝑝′( 𝑗)+𝑟 ( 𝑗) ·𝑀sample in Step 5 of the sampling
phase, this implies:
Pr(cid:104)𝑝( 𝑗) =𝑥(cid:105)
𝑀sample
𝑀sample
=
1
1
=Pr(cid:104)𝑝′( 𝑗) =𝑏∧𝑟 ( 𝑗) =𝑎(cid:105)
·
·
1
1
⌊𝑆/𝑀sample⌋+1
⌊𝑆/𝑀sample⌋
𝑥 ∈𝑋1,
𝑥 ∈𝑋2,
[0, 𝑀sample),
𝑝′( 𝑗)
is
uniform in
of
as
FABBWithErrors.Share(𝑝′) and 𝑟 ( 𝑗)
is uniform subject to the
condition that 𝑝( 𝑗) ∈ [2𝜆,2𝜆+𝜎). Let 𝑃 denote the above probability
distribution. To compute the statistical distance between 𝑃 and
uniform, we compute the size of both 𝑋1 and 𝑋2, which is
because
(cid:18)(cid:22)
This yields the following distance calculation:
Δ(𝑃,𝑈) =
|Pr[𝑃 =𝑥]−Pr[𝑈 =𝑥]|
|𝑋1| =𝜖𝑀sample·
𝑆
𝑀sample
|𝑋2| =(1−𝜖)𝑀sample·
𝑆
1
2
|𝑋1|·
𝑥∈[2𝜆,2𝜆+𝜎)
∑︁
(cid:12)(cid:12)(cid:12)(cid:12)Pr[𝑃 =𝑥 | 𝑥 ∈𝑋1]− 1
(cid:12)(cid:12)(cid:12)(cid:12)+|𝑋2|·
(cid:18)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)𝜖− 𝜖𝑀sample
(cid:107)+1(cid:17)
(cid:16)(cid:106)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(1−𝜖)−
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
(cid:106)
(cid:107)
(cid:12)(cid:12)(cid:12)(cid:12) (1−𝜖)𝜖𝑀sample
(cid:18)(cid:12)(cid:12)(cid:12)(cid:12)𝜖𝑀sample(𝜖−1)
(1−𝜖)𝑀sample
𝑆
𝑀sample
𝑆
(cid:12)(cid:12)(cid:12)(cid:12)+
𝑀sample
𝑆
𝑆
𝑆
(cid:12)(cid:12)(cid:12)(cid:12)(cid:19)
1
2
1
2
=
=
+1
2
1
2
(1−𝜖)𝜖𝑀sample
𝑆
.
=
=
𝑆
(cid:23)
(cid:19)
+1
(cid:22)
and
(cid:23)
.
𝑆
𝑀sample
(cid:12)(cid:12)(cid:12)(cid:12)Pr[𝑃 =𝑥 | 𝑥 ∈𝑋2]− 1
𝑆
(cid:12)(cid:12)(cid:12)(cid:12)(cid:19)
□
B STANDARD FUNCTIONALITIES
We include standard functionalities for MPC for reference.
C UNAUTHENTICATED
ARITHMETIC BLACK BOX PROTOCOLS
We include standard protocols for MPC for reference.
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea608ΠInputTuple
Input: On Input (Input,𝑃 𝑗) from all parties do the following:
(1) 𝑃 𝑗 samples 𝑟
(2) All parties output [𝑟] and 𝑃 𝑗 outputs 𝑟.
$← F
Figure 18: Protocol for passively secure Input Tuples as
presented in MASCOT [27].
ΠTripleGeneration
Multiply:
(1) Each party samples 𝑎(𝑖) $← F,𝑏(𝑖) $← F.
(2) Every ordered pair of parties 𝑃𝑖,𝑃 𝑗 does the following:
, where 𝑃𝑖 inputs (𝑎(𝑖)
(a) Both parties call F𝑘,𝑘
ROT
1,ℎ ∈ F, and 𝑃𝑖 receives 𝑠(𝑖,𝑗)
,𝑞( 𝑗,𝑖)
g−1(𝑎(𝑖)) ∈ F𝑘
2 .
(b) 𝑃 𝑗 receives 𝑞( 𝑗,𝑖)
0,ℎ
1 , ... , 𝑎(𝑖)
= 𝑞( 𝑗)
𝑎(𝑖)
ℎ
𝑘 ) =
,
,ℎ
ℎ
for ℎ =1,...,𝑘.
(c) 𝑃 𝑗 sends 𝑑 ( 𝑗,𝑖)
ℎ
(d) 𝑃𝑖 sets 𝑡 (𝑖,𝑗)
=𝑞( 𝑗,𝑖)
= 𝑠(𝑖,𝑗)
ℎ =1,...𝑘. Set 𝑞( 𝑗,𝑖)
ℎ
ℎ
ℎ
0,ℎ −𝑞( 𝑗,𝑖)
1,ℎ +𝑏( 𝑗) ,ℎ ∈ [𝑘].
= 𝑞( 𝑗,𝑖)
+ 𝑎(𝑖) · 𝑑 ( 𝑗,𝑖)
=𝑞( 𝑗,𝑖)
0,ℎ
ℎ
.
0,ℎ + 𝑎(𝑖)
ℎ · 𝑏( 𝑗) , for
(𝑖)
𝑖,𝑗 = ⟨g,t⟩ ∈ F, for t the above 𝑘-element vector.
( 𝑗)
𝑖,𝑗 =−⟨g,q⟩ ∈ F, for q the above 𝑘-element vector.
(e) 𝑃𝑖 sets c
(f) 𝑃 𝑗 sets c
(g) Now we have: c
(3) Each party 𝑃𝑖 computes: c(𝑖) =𝑎(𝑖) ·𝑏( 𝑗) +𝑗≠𝑖 (c
( 𝑗)
𝑖,𝑗 =𝑎(𝑖) ·𝑏( 𝑗) ∈ F
(𝑖)
𝑖,𝑗 +c
(𝑖)
𝑖,𝑗 +c
(𝑖)
𝑗,𝑖 )
Combine:
(1) Sample 𝑟,ˆ𝑟
(2) Each party 𝑃𝑖 sets:
$← FRand(F).
(a) 𝑎(𝑖) = ⟨𝑎(𝑖) ,𝑟⟩,𝑐(𝑖) = ⟨𝑐(𝑖) ,𝑟⟩, and
(b) ˆ𝑎(𝑖) = ⟨𝑎(𝑖) ,ˆ𝑟⟩,ˆ𝑐(𝑖) = ⟨𝑐(𝑖) ,ˆ𝑟⟩
Output: ([𝑎],[𝑏],[𝑐]) as a valid triple.
Figure 19: Protocol for Triple Generation adjusted for passive
security from MASCOT [27].
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea609