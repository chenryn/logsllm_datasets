206
第7章动态链接
0x00000003(PLTGOT)
0x15c8
0x00000002 (PLTRELS2)
32(bytes)
(1380)1000000X0
0x00000014  (PLTREL)
REL
0x2f0
0x00000011
21000000x0
(REL)
(RELSZ)
0x2c8
40 (bytes)
0x00000013 (RELENT)
0x6ffffffe
8(bytes)
0x6fffffff
(VERNEED)
(VERNEEDNUM)
862x0
0x6ffffffo (vERSYM)
0x280
1
0x6ffffffa (RELCOUNT)
0x00000000 (NULL)
0x0
另外Linux还提供了一个命令用来查看一个程序主模块或一个共享库依赖于哪些共享
库：
$ 1dd Programl
1inux-gate,so.1 =>(0xffffe000)
1ibc.so.6 => /1ib/t1s/i686/cmov/1ibc.8o.6 (0xb7e0d000)
/Lib.so (0xb7f62000)
/1ib/1d-1inux,8o.2 (0xb7f66000)
注
这里可以看到有个linux-gate.so.1的共享对象很特殊，它的装载地址很奇怪，
意
是Oxfffe000，这个地址是32位地址空间的末尾4096字节，属于Linux内
核地址空间。你在整个文件系统中都搜索不到这个文件，因为它根本不存在于
文件系统中。它实际上是一个内核虚拟共享对象（KernelVirtualDSO），这涉
及到Linux的系统调用和内核，我们将在第4部分介绍linux-gate.so.1相关
内容。
7.5.3动态符号表
为了完成动态链接，最关键的还是所依赖的符号和相关文件的信息。我们知道在静态链
接中，有一个专门的段叫做符号表“symtab”（SymbolTable），里面保存了所有关于该目标
文件的符号的定义和引用。动态链接的符号表示实际上它跟静态链接十分相似，比如前面例
子中的 Program1程序依赖于Lib.so，引用到了里面的foobarO函数。那么对于 Programl来
说，我们往往称Program1导入（lmport）了foobar函数，foobar是Program1的导入函数（Import
Function）：而站在Lib.so的角度来看，它实际上定义了foobarO函数，并且提供给其他模块
使用，我们往往称Lib.so导出（Expont）了foobar()函数，foobar是Lib.so的导出函数（Export
Function）。把这种导入导出关系放到静态链接的情形下，我们可以把它们看作普通的函数
定义和引用。
为了表示动态链接这些模块之间的符号导入导出关系，ELF专门有一个叫做动态符号表
程序员的自我修养一链接、装载与库
---
## Page 230
7.5动态链接相关结构
207
对于那些模块内部的符号，比如模块私有变量则不保存。很多时候动态链接的模块同时拥有
的符号。
与”symtab”类似，动态符号表也需要一些辅助的表，比如用于保存符号名的字符串
表。静态链接时叫做符号字符串表“strtab”（StringTable），在这里就是动态符号字符串表
“.dynstr”（Dynamic StringTable）：由于动态链接下，我们需要在程序运行时查找符号，为
了加快符号的查找过程，往往还有辅助的符号哈希表（°.hash”）。我们可以用readelf工具来
查看ELF文件的动态符号表及它的哈希表：
$readelf -sD Lib.80
Symbol table for image:
Num BuC:
00000310
Value
Size
FUNC GLOBAL DEFAULT
adAL
9_init
Ndx Name
0:
0 :
000015ec
0
0:
685
NOTYPE GLOBAL DEFAULT ABS _edata
00000000
PUNC GLOBAL DBPAULT UND 8leep
2
0:
00000000
NOTYPE
WEAK DEFAULT UND
_Jv_RegisterClasses
0:
0:0000042c
00000000
57
NOTYPE
PUNC GLOBAL DEPAULT 11 fOObar
WEAK DEFAULT UND
10
gnon_start
6
1 :
000015f0
0
NOTYPE GLOBAL DEFAULT ABS
11
1:000004a4
FUNC GLOBAL DEFAULT
12 _fini
_end
5
2 :
00000000
245
0
NOTYPE GLOBAL DEFAULT ABS
FUNC
WEAK DBFAULT UND
_bss_start
Cxa_finalize
8
2:00000000
2: 000015ec
57
FUNC GLOBAL DEPAULr UND printf
Symbol table of ".gnu.hash' for image1 
Num BuC1
Value
Size
NOTYPE GLOBAL DEFAULT ABS _end
adA
STA Puta
Ndx Name
0:000015f0
0: 000015ec
0
NOTYPE GLOBAL DEPAULT ABS
1: 000015ec
NOTYPE GLOBAL DBPAULT ABS
_edata
8
_bss_start
9
2:0000042c 57
1 :
00000310
0
FUNC GLOBAL DEFAULT 11foObar
FUNC GLOBAL DEFAULT
9_init
10
2: 000004a4
FUNC GLOBAL DEFAULT  12 _fini
动态链接符号表的结构与静态链接的符号表几乎一样，我们可以简单地将导入函数看作
是对其他目标文件中函数的引用：把导出函数看作是在本目标文件定义的函数就可以了。
7.5.4
动态链接重定位表
共享对象需要重定位的主要原因是导入符号的存在。动态链接下，无论是可执行文件或
共享对象，一旦它依赖于其他共享对象，也就是说有导入的符号时，那么它的代码或数据中
就会有对于导入符号的引用。在编译时这些导入符号的地址未知，在静态链接中，这些未知
的地址引用在最终链接时被修正。但是在动态链接中，导入符号的地址在运行时才确定，所
以需要在运行时将这些导入符号的引用修正，即需要重定位。
我们在前面的地址无关章节中也提到过，动态链接的可执行文件使用的是PIC方法，但
程序员的自我修养-—链接、装载与库
---
## Page 231
208
第7章动态链接
这不能改变它需要重定位的本质，对于动态链接来说，如果一个共享对象不是以PIC模式编
译的，那么毫无疑问，它是需要在装载时被重定位的：如果一个共享对象是PIC模式编译的，
那么它还需要在装载时进行重定位吗？是的，PIC模式的共享对象也需要重定位。
对于使用PIC技术的可执行文件或共享对象来说，虽然它们的代码段不需要重定位（因
为地址无关），但是数据段还包含了绝对地址的引用，因为代码段中绝对地址相关的部分被
分离了出来，变成了GOT，而GOT实际上是数据段的一部分。除了GOT以外，数据段还
可能包含绝对地址引用，我们在前面的章节中已经举例过了。
动态链接重定位相关结构
唯一有区别的是目标文件的重定位是在静态链接时完成的，而共享对象的重定位是在装裁时
完成的。在静态链接中，目标文件里面包含有专门用于表示重定位信息的重定位表，比如
我们可以使用readelf来查看一个动态链接的文件的重定位表：
$readelf -r Lib.80
ottset
000015e4
00000008 R_386_RELATIVE
Info
gdA1
Sym. Value
Sym. Name
000015e8
000015bc
00000206 R_386_GL0B_DAT
00000106
5 R_386_GL0B_DAT
00000000
000015c0
00000000
_Jv_RegisterClasses
_gmon_start,
000015c4
00000506 R_386_GL0B_DAT
00000000
_cxa_tinalize
Relocation section *,rel.plt' at offset 0x2f0 contains 4 entries:
000015d4
Offset
00000107 R_386_JUMP_SLOT
Info
Type
Syn.Value
00000000
Sym. Nane
gmon_etart..
000015d8
000015dc
00000307
00000407
00000000
00000000
sleep
printf
09510000
00000507 R_386_JUMP_SLOT
00000000
_cxa_finalize
[19]got
-got .p1t
PROGBITS
000015bc0005bc00000c 04WA0
[21].data
[20]
PROGBITS
PROGBITS
000015c8 0005c8 00001c 04
000015e4 0005e4000008 00WA0
WA0
在静态链接中我们已经碰到过两种类型的重定位入口R_386_32和R_386_PC32，这里
可以看到儿种新的重定位入口类型：R_386_RELATIVE、R_386_GLOB_DAT和
程序员的自我修养一链接、装载与库
---
## Page 232
7.5动态链接相关结构
209
R_386_JUMP_SLOT。实际上这些不同的重定位类型表示重定位时有不同的地址计算方法，
在前面的静态链接中已经介绍过了R_386_32和R_386_PC32的地址计算方法，实际上它们
已经是比较复杂的重定位类型了。这里的R_386_RELATIVE、R_386_GLOB_DAT 和
R_386_JUMP_SLOT都是很简单的重定位类型，我们先来看看R_386_GLOB_DAT和
R_386_JUMP_SLOT，这两个类型的重定位入口表示，被修正的位置只需要直接填入符号的
地址即可。比如我们看printf这个重定位入口，它的类型为R_386_JUMP_SLOT，它的偏移