User表: 存储授权用户的访问权限
db表: 存储授权用户对数据库的访问权限
tables_priv表: 存储授权用户对表的访问权限
Columns_priv表: 存储授权用户对表字段的访问权限
## 密码恢复以及设置
修改数据库管理员root本机登录密码,只有操作系统管理员root能修改
只有操作系统管理员root才有权限修改配置文件,和修改user表记录
**恢复步骤：**
> 1.停止MySQL服务程序
>
> 2.跳过授权表启动MySQL服务程序,将skip-grant-tables 写入/etc/my.cnf
>
> 3.重设root密码(更新user表记录)
>
> 4.以正常方式重启MySQL服务程序
\[root@sql51 \~\]# systemctl stop mysqld #停用数据库
\[root@sql51 \~\]# vim /etc/my.cnf #配置文件
\[mysqld\]
#secure_file_priv=\"/mydatadir\" #注释掉
#default-storage-engine=myisam #注释掉
#validate_password_length=6 #注释掉
#validate_password_policy=0 #注释掉
skip-grant-tables #新增\-\--此行将跳过授权表启动MySQL数据库
\[root@sql51 \~\]# systemctl start mysqld
\[root@sql51 \~\]# mysql
mysql\> #不需要密码直接登录数据库成功
mysql\> use mysql
mysql\> show tables;
mysql\> desc user;
mysql\> select host,user,authentication_string from user;
+\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| host \| user \| authentication_string \|
+\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| localhost \| root \| \*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 \|
\| localhost \| mysql.sys \| \*THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE
\|
+\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
2 rows in set (0.00 sec)
mysql\> update mysql.user set authentication_string=password(\"654321\")
#修改密码
-\> where
-\> host=\"localhost\" and user=\"root\";
mysql\> flush privileges; #刷新mysql 新设置用户或更改密码后需用flush
privileges刷新MySQL的系统权限相关表，否则会出现拒绝访问，还有一种方法，就是重新启动mysql服务器，来使新设置生效。
## MySQL管理工具phpMyAdmi
## 数据库备份与恢复
**Mysqldump工具完全备份：**
1、mysqldump -u用户 -p密码 数据库名 \>备份文件名.sql #备份单个数据库
2、mysqldump -u用户 -p密码 all \>备份文件名.sql #备份所有的数据库
\[root@dbsvr1 \~\]# mysqldump -u root -p \--all-databases \>
/root/alldb.sql
3、mysqldump -u用户 -p密码 数据库名 表名 \>备份文件名.sql
#备份单张表，数据库名表名不带点、
\[root@sql51 mysqlbak\]# mysqldump -uroot -p654321 db3 user
\>/mysqlbak/db3_user.sql
4、mysqldump -u用户 -p密码 -B 数据库名1 数据库名2 表名 \>备份文件名
#备份多个数据库，加-B
\[root@sql51 mysqlbak\]# mysqldump -uroot -p654321 -B db2 db4
\>/mysqlbak/twodb.sql
**Mysqldump工具完全恢复：**恢复数据表需要加库名
恢复数据库之前,要先创建新库,备份数据库时用-B
备份的多个数据库的,恢复时可以省略数据库名
1、mysql -u用户 -p密码 \ show master status; #查看binlog日志
mysql\> flush logs; #刷新日志,将会重新生成日志从0001开始
\[root@sql51 \~\]# systemctl restart mysqld
#重启数据库服务,将会生成新的日志,接着原有编号
\[root@sql51 \~\]# mysql -uroot -p654321 -e \"flush logs\"
#未登录,直接执行mysql命令方式刷新日志
\[root@sql51 \~\]# mysqldump -uroot -p654321 \--flush-logs db1 \>
/mysqlbak/db1logtest.sql #导入时
mysql\> purge master logs to \"zdd.000005\";
#删除zdd.000005之前的日志,不包括0005的mysql\> reset master;
#重置主服务.也会重新生成日志.从0001开始
**增量备份:**
\[root@sql51 \~\]# mysqlbinlog /logdir/plj.000002 #查看日志文件内容
\[root@sql51 \~\]# mysqlbinlog /logdir/plj.000001 \| grep insert
#查看日志文件内容并筛选
\[root@sql52 mysqld\]# mysqlbinlog /root/plj.000001 \| mysql -uroot
-p654321 #恢复日志内所有语句
\[root@sql52 \~\]# mysqlbinlog \--start-position=560
\--stop-position=924 /root/plj.000001 \|mysql -uroot -p654321
#恢复指定部分范围内的数据
\*\*选择范围必须包含日志文件的commit \*\*不指定开头,默认从最前面开始
\*\*不指定结束,默认执行到最后
**差异备份:**
**\
**
**XtraBackup 工具备份**
\[root@sql51 \~\]# yum -y install libev-4.15-1.el6.rf.x86_64.rpm
\[root@sql51 \~\]# yum install -y
percona-xtrabackup-24-2.4.7-1.el7.x86_64.rpm
3.4.1数据完全备份与恢复
Innobackupex恢复数据要求数据库清空mysql目录,因此那怕你只需要备份多个库中其中一个库,也要将数据库三个系统库(mysql
sys performance_schema)一起备份
3.4.1.1完全备份:
案例:将所有库完全备份到/backup(目录不需事先创建,备份程序自动创建)
格式:Innobackupex \--user root \--password 123456 /allbak -no-timestamp
Innobackupex 选项
\--host 主机名
\--user 用户名
\--port 端口号(默认3306可不用写)
\--databases 数据库名(不写将备份所有数据库)
\--no-timestamp 不用时间戳,不用日期命名备份文件存储的子目录名
Innobackupex 备份之后有两种文件1是数据文件,2是备份信息文件
1数据文件,用来恢复数据
2备份配置文件:有备份信息,用来做增量备份或者差异备份等的参考
## 主从
主库配置:
\[mysqld\]
bind-address=0.0.0.0 #监听地址，有些版本差异，添上不会出问题
server-id= {{id.stdout}} #用ansible批量传送，传参方式获取
binlog-format=mixed #binglog日志格式
log_bin=/var/log/mysql/mysql-bin
relay-log=/var/log/mysql/relay-log #relay-log中继日志
relay-log-index=/var/log/mysql/relay-log.info #relay-log中继日志
relay-log-info-file=/var/log/mysql/relay-log.info
relay_log_purge=0 #不删除日志，MHA用得上
> #以下是主从半同步复制的配置（semi sync master/slave）
plugin-load=rpl_semi_sync_master=semisync_master.so
#加载主半同步复制模块
plugin-load=rpl_semi_sync_slave=semisync_slave.so #加载从半同步复制模块
rpl_semi_sync_slave_enabled=1 #启用从半同步复制模式
rpl_semi_sync_master_enabled=1 #启用主半同步复制模式
rpl_semi_sync_master_timeout=3000
log_slave_updates #开启级联复制功能,既为主又为从的服务器
binlog_do_db=name #设置master对哪些库记日志(允许同步的库)
binlog_ignore_db=name #设置master对哪些库不记日志(不允许同步的库)
replicate_do_db=db8,db9 #主从只同步指定的数据库
replicate_ignore_db=db7,db6 #主从不同步指定的数据库
mysql\> show master status; #查看日志信息
mysql\> grant replication slave on \*.\* to repluser@\"%\" identified by
\"123456\";
从库配置:
\[root@sql52 \~\]# vim /etc/my.cnf
\[mysqld\]
server_id=52
\[root@sql52 \~\]# systemctl restart mysqld
mysql\> change master to
master_host=\"192.168.4.51\", #主服务器IP地址
master_user=\"repluser\", #主服务器授权的用户
master_password=\"123456\", #授权用户的密码
master_log_file=\"master51.000001\", #日志文件
master_log_pos=441; #偏移位置
mysql\> start slave;
mysql\> show slave status\\G;
## MySQL数据读写分离(maxscale)
1配主从并且创建相关权限的用户
mysql\> grant replication slave,replication client on \*.\* to
maxmon@\"%\" #maxscale用来监控服务
mysql\> grant select on \*.\* to scaluser@\"%\" identified by
\"123456\"; #maxscale用来检查查询用户
mysql\> grant select,insert on \*.\* to jim@\"%\" identified by
\"123456\"; #插入数据用户
2安装maxscale-2.1.2-1.rhel.7.x86_64.rpm(单独安装包)
3配置:vim /etc/maxscale.cnf
> 定义数据库server主机,定义监视的数据库,定义只读,定义读写分离,手动添加管理端口
4启动服务:\[root@sql57 \~\]# maxscale -f /etc/maxscale.cnf
5停止服务:\[root@sql57 \~\]# killall -9 maxscale
6测试数据准备:在主库上插入若干数据,从库自动同步,
在从库上单独插入若干数据,主库不同步,用来测试读
7客户端远程:\[root@client-50 \~\]# mysql -h(maxscale服务主机地址) -P4006
-ujim -p123456
8测试:
1,在主库上查询数据,看不到从库的数据,在客户端远程登录后能查询到从库数据,说明读的是从库的数据
2,在客户端远程登录后插入数据,主库有数据,且从库也有数据
以上两点满足,则读写分离配置成功.
## MHA集群