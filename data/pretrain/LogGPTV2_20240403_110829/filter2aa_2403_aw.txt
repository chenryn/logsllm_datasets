经 GCC 编译后，f_unsigned()函数使用的条件转移指令是 JBE（Jump if Below or Equal，相当于 JLE）
和 JAE（Jump if Above or Equal，相当于 JGE）。JA/JAE/JB/JBE 与 JG/JGE/JL/JLE 的区别，在于它们检查的
标志位不同：前者检查借/进位标志位 CF（1 意味着小于）和零标志位 ZF（1 意味着相等），后者检查“SF 
XOR OF”（1 意味着异号）和 ZF。从指令参数的角度看，前者适用于 unsigned（无符号）类型数据的（CMP）
运算，而后者的适用于 signed（有符号）类型数据的运算。 
本书第 30 章会介绍 signed 类型数据。可见，根据条件转移的指令，我们可以直接判断 CMP 所比较的
变量的数据类型。 
接下来，我们一起研究 main()函数的汇编代码。 
指令清单 12.3  main() 
_main   PROC 
        push    ebp 
         mov     ebp, esp 
         push    2 
         push    1 
         call    _f_signed 
         add     esp, 8 
         push    2 
         push    1 
         call    _f_unsigned 
         add     esp, 8 
         xor     eax, eax 
         pop     ebp 
         ret     0 
_main   ENDP 
x86 + MSVC + OllyDbg 
我们可以通过 OllyDbg 直观地观察到指令对标志寄存器的影响。我们先用 OllyDbg 观察 f_unsigned()
函数比较无符号数的过程。f_unsigned()函数使用了 CMP 指令，分三次比较了两个相同的 unsigned 类型数
据。因为参数相同，所以 CMP 设置的标志位必定相同。 
如图 12.1 所示，在运行到第一个条件转移指令时，C=1, P=1, A=1, Z=0, S=1, T=0, D=0, O=0。OllyDbg
会使用标志位的首字母作为该标志位的简称。 
图 12.1  使用 OllyDbg：观察 f_unsigned()的第一个条件转移指令 
OllyDbg 在左下窗口进行提示，JBE 条件跳转指令的条件已经达成，下一步会进行相应跳转。这种预
测准确无误，JBE 的触发条件是（CF=1 或 ZF=1）。条件表达式为真时，JBE 确实会进行跳转。 
如图 12.2 所示，在运行到第二个条件转移指令——JNZ 指令时，ZF=0。所以 OllyDbg 能够判断程序会
进行相应跳转。 
如图 12.3 所示，运行到第三个条件转移指令——JNB 指令的时候，借/进位标志 CF＝0，条件表达式
异步社区会员 dearfuture(15918834820) 专享 尊重版权
106 
逆向工程权威指南（上册） 
会为假，所以不会发生跳转，程序将执行第三个 printf()指令。 
图 12.2  使用 OllyDbg 观察 f_unsigned()函数的第二个条件转移指令 
图 12.3  使用 OllyDbg 观察 f_unsigned()函数的第三个条件转移指令 
现在来调试下示例程序里的 f_signed()函数，它的参数为 signed 型数据。 
在运行 f_signed()函数时，标志位的状态和刚才一样。即，运行 CMP 指令之后，C=1, P=1, A=1, Z=0, S=1, 
T=0, D=0, O=0。 
第一个条件转移指令——JLE 指令将会被触发，如图 12.4 所示。 
图 12.4  使用 OllyDbg 观察 f_signed()函数的第一个条件转移指令 
参照［Int13］，触发 JLE 的条件是 ZF=1 或 SF≠OF。本例满足 SF≠OF 的条件。 
由于 ZF＝0，第二个条件转移指令——JNZ 指令会被触发，如图 12.5 所示。 
图 12.5  使用 OllyDbg 观察 f_signed()函数的第二个条件转移指令 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 12 章  条件转移指令 
107 
而第三个条件转移指令——JGE 指令不会被触发。触发 JGE 的条件是 SF=OF，而当前情形不满足这个条件，
如图 12.6 所示。 
图 12.6  使用 OllyDbg 观察 f_signed()函数的第三个条件转移指令 
x86 + MSVC +Hiew 
我们还可以用 Hiew 给可执行文件打补丁，强制 f_unsigned()函数永远打印“a==b”、忽略它的输入参
数，如图 2.7 所示。 
图 12.7  使用 Hiew 打开 f_unsigned() 函数 
本文将分 3 次修改上述可执行程序，分别完成下述三个任务： 
 强制触发第一个条件转移指令。 
 强制屏蔽第二个条件转移指令。 
 强制触发第三个条件转移指令。 
我们可以直接修改程序，令程序流永远转向第二个 printf()函数并打印“a==b”。 
故而需要修改三条指令（3 个字节）： 
 把第一个条件转移指令改为 JMP，并保留原始的转移偏移量(jump offset)。 
 第二个条件转移指令的触发条件不一定成立。无论触发条件是否成立，我们都要它跳转到下一条
指令。所以，我们把转移偏移量设置为零。对于条件转移语句来说，跳转的目标地址是下一条地
址与转移偏移量的和。把转移偏移量设置为零之后，程序会继续执行下一条指令。 
 第三个条件转移指令的修改方法和第一个条件转移指令的修改方法相同。我们只需把将条件转移
指令换成 JMP（无条件转移指令）即可。 
修改之后的 f_unsigned()函数如图 12.8 所示。 
三个条件转移指令全部都要修改。如果少修改了一个指令，它就可能会多次调用 printf()函数，与我们
异步社区会员 dearfuture(15918834820) 专享 尊重版权
108 
逆向工程权威指南（上册） 
的预期——只调用一次 printf()函数的任务目标相悖。 
图 12.8  经过修改之后的 f_unsigned() 函数 
Non-optimizing GCC 
如果关闭了GCC的优化选项，那么它编译出来的程序和MSVC编译出来的程序没什么区别，只不过就
是把printf()函数替换为了puts()函数
①
Optimizing GCC 
。 
聪明的您一定会问，既然 CMP 比较的是相同的值，比较之后的标志位的状态也相同，那么何必要对
同样的参数进行多次比较呢？或许 MSVC 真的不能再智能一些了；但是启用优化选项后，GCC 4.8.1 确实
能够进行这种深度优化。 
指令清单 12.4  GCC 4.8.1 f_signed() 
f_signed: 
  mov     eax, DWORD PTR [esp+8] 
  cmp     DWORD PTR [esp+4], eax 
  jg      .L6 
  je      .L7 
  jge     .L1 
  mov     DWORD PTR [esp+4], OFFSET FLAT:.LC2 ; "ab" 
  jmp     puts  
.L1: 
  rep     ret  
.L7: 
  mov     DWORD PTR [esp+4], OFFSET FLAT:.LC1 ; "a==b" 
  jmp     puts         
很明显，它使用 jmp 指令替代了臃肿的“CALL ……puts …… RETN”指令。本书将在 13.1.1 节里详
细解说这种编译技术。 
我们不得不说在 x86 的系统中，这种程序比较少见。MSVC 2012 做不到 GCC 那种程度的深度优化。
另一方面，汇编语言的编程人员确实可能学会 Jcc 指令的连用技巧。所以，如果您遇到了这样精简的程序，
① 请参见本书 3.4.3 节的解释。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 12 章  条件转移指令 
109 
而且还能够判断出它不是 GCC 编译出来的程序，那么您基本上可以判断它是手写出来的汇编程序。 
即使开启了同样的优化选项，f_unsigned()函数对应的指令也没有那么精致。 
指令清单 12.5  GCC 4.8.1 f_unsigned() 
f_unsigned: 
  push    esi 
  push    ebx 
  sub     esp, 20 
  mov     esi, DWORD PTR [esp+32] 
  mov     ebx, DWORD PTR [esp+36] 
  cmp     esi, ebx 
  ja      .L13 
  cmp     esi, ebx        ; instruction may be removed 
  je      .L14 
.L10: 
  jb      .L15 
  add     esp, 20 
  pop     ebx 
  pop     esi 
  ret 
.L15: 
  mov     DWORD PTR [esp+32], OFFSET FLAT:.LC2 ; "ab" 
  call    puts 
  cmp     esi, ebx 
  jne     .L10 
.L14: 
  mov     DWORD PTR [esp+32], OFFSET FLAT:.LC1 ; "a==b" 
  add     esp, 20 
  pop     ebx 
  pop     esi 
  jmp     puts 
程序中只有两条 CMP 指令，至少它优化去了一个 CMP 指令。可见，GCC 4.8.1 的优化算法还有改进
的空间。 
12.1.2 ARM 
32 位 ARM 程序 
Optimizing Keil 6/2013 (ARM mode) 
指令清单 12.6  Optimizing Keil 6/2013 (ARM mode) 
.text:000000B8  
  EXPORT f_signed 
.text:000000B8             
f_signed   
; CODE XREF: main+C 
.text:000000B8 70 40 2D E9  
  STMFD 
SP!, {R4-R6,LR} 
.text:000000BC 01 40 A0 E1  
  MOV  
R4, R1 
.text:000000C0 04 00 50 E1  
  CMP  
R0, R4 
.text:000000C4 00 50 A0 E1  
  MOV  
R5, R0 
.text:000000C8 1A 0E 8F C2  
  ADRGT 
R0, aAB   ; "a>b\n" 
.text:000000CC A1 18 00 CB  
  BLGT 
__2printf 
.text:000000D0 04 00 55 E1  
  CMP  
R5, R4 
.text:000000D4 67 0F 8F 02  
  ADREQ 
R0, aAB_0; "a==b\n" 
.text:000000D8 9E 18 00 0B  
  BLEQ 
__2printf 
.text:000000DC 04 00 55 E1  
  CMP  
R5, R4 
.text:000000E0 70 80 BD A8  
  LDMGEFD  SP!, {R4-R6,PC} 
.text:000000E4 70 40 BD E8  
  LDMFD 
SP!, {R4-R6,LR} 
.text:000000E8 19 0E 8F E2  
  ADR  
R0, aAB_1 ; "ab /n”的地址
赋值给 R0 寄存器，成为了 printf()的参数，而 BLGT 负责调用 printf()。可见，当且仅当在 R0 的值（变量 a）大于
R4 的值（变量 b）的情况下，计算机才会运行后面那组带有-GT 后缀的指令。很显然，这是一组相互关联的指令。 
后面的 ADREQ 和 BLEQ 指令，都在最近一个 CMP 的操作数相等的情况下才会讲行 ADR 和 BL 指令
的操作。程序之中连续两次出现“CMP R5, R4”指令，这是因为夹在其间的 printf()函数可能会影响标志位。 
LDMGEFD 是“Great or Equal（大于或等于）”的情况下进行 LDMFD (Load Multiple Full Descending) 操
作的指令。 
依此类推，“LDMGEFD SP!, {R4-R6,PC}”指令起到函数尾声的作用，不过它只会在“a>=b”的时候
才会结束本函数。 
如果上述条件不成立，即“ab\n" 
.text:0000007E 06 F0 B7 F8  BL       __2printf 
.text:00000082 
.text:00000082              loc_82 ; CODE XREF: f_signed+8 
.text:00000082 A5 42         CMP      R5, R4 
.text:00000084 02 D1         BNE      loc_8C 
.text:00000086 A4 A0         ADR      R0, aAB_0    ; "a==b\n" 
.text:00000088 06 F0 B2 F8  BL       __2printf 
.text:0000008C 
.text:0000008C              loc_8C ; CODE XREF: f_signed+12 
.text:0000008C A5 42         CMP      R5, R4 
.text:0000008E 02 DA         BGE      locret_96 
.text:00000090 A3 A0         ADR      R0, aAB_1       ; "ab) 
  beq     .L20     ; Branch if Equal (a==b) 
  bge     .L15     ; Branch if Greater than or Equal (a>=b) (impossible here) 
  ; ab" 
① 即 predicated instructions，泛指 BLGT/ADREQ 这类混合条件判定功能的操作指令。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
112 
逆向工程权威指南（上册） 
  add     x0, x0, :lo12:.LC9 
  b       puts 
.L15:   ; impossible here 
         ret  
.L20: 
         adrp    x0, .LC10       ; "a==b" 
         add     x0, x0, :lo12:.LC10 
         b       puts 