such bold and questionable moves to popularize it, nobody actually wanted
to write XBAP applets, and inch by inch, the technology followed Java into
the dustbin of history.
Eventually, Microsoft appeared to acknowledge this failure and chose to
focus on Silverlight instead. Beginning with Internet Explorer 9, XBAP is dis-
abled by default for Internet-originating content, and the dubious Firefox
and Chrome plug-ins are no longer automatically pushed to users. Neverthe-
less, it seems reasonable to assume that at least 10 percent of all Internet
users may be still browsing with a complex, partly abandoned, and largely
unnecessary plug-in installed on their machines and will continue to do so
for the next couple of years.
ActiveX Controls
At its core, ActiveX is the successor to Object Linking and Embedding
(OLE), a 1990 technology that made it possible for programs to reuse com-
ponents of other applications in a standardized, language-independent way.
A simple use case for ActiveX would be a spreadsheet application wishing to
embed an editable vector image from a graphics-editing program or a simple
game that wants to embed a video player.
The idea is not controversial, but by the mid-1990s Microsoft had decided
that ActiveX made sense in the browser, too. After all, wouldn’t websites want
to benefit from the same Windows components that desktop applications could
rely on? The approach violates the idea of nurturing an open, OS-independent
web, but it’s otherwise impressive, as illustrated by the following JavaScript
example that casually creates, edits, and saves an Excel spreadsheet:
var sheet = new ActiveXObject("Excel.Sheet");
sheet.ActiveSheet.Cells(42,42).Value = "Hi mom!";
sheet.SaveAs("c:\\spreadsheet.xls");
sheet.Application.Quit();
136 Chapter 8
Standards compliance aside, Microsoft’s move to ActiveX proved disas-
trous from a security standpoint. Many of the exposed ActiveX components
were completely unprepared to behave properly when interacting with
untrusted environments, and over the next 15 years, researchers discovered
several hundred significant security vulnerabilities in web-accessible ActiveX
controls. Heck, the simple observation that Firefox does not support this
technology helped bolster its security image at the onset of the Second
Browser Wars.
Despite this fiasco, Microsoft stood by ActiveX defiantly, investing in grad-
ually limiting the number of controls that could be accessed from the Inter-
net and fixing the bugs in those it considered essential. Not until Internet
Explorer 9 did Microsoft finally decide to let go: Internet Explorer 9 disables
all ActiveX access by default, requiring several extra clicks to use it when needed.
NOTE The wisdom of delegating the choice to the user is unclear, especially since the permission
granted to a site extends not only to legitimate content on that website but also to any
payloads injected due to application bugs such as XSS. Still, Internet Explorer 9 is
some improvement.
Living with Other Plug-ins
So far, we have covered almost all general-purpose browser plug-ins in use
today. Although there is a long tail of specialized or experimental plug-ins,
their use is fairly insignificant and not something that we need to take into
account when surveying the overall health of the online ecosystem.
Well, with one exception. An unspecified but probably significant
percentage of online users can be expected to have an assortment of web-
exposed browser plug-ins or ActiveX controls that they never knowingly
installed, or that they were forced to install even though it’s doubtful that
they would ever benefit from the introduced functionality.
This inexcusable practice is sometimes embraced by otherwise reputable
and trusted companies. For example, Adobe forces users who wish to down-
load Adobe Flash to also install GetRight, a completely unnecessary third-
party download utility. Microsoft does the same with Akamai Download Man-
ager on its developer-oriented website, complete with a hilarious justification
(emphasis mine):15
What is the Akamai Download Manager and why do I have to use it?
To help you download large files with reduced chance of inter-
ruption, some downloads require the use of the Akamai Download
Manager.
The primary concern with software installed this way and exposed
directly to malicious input from anywhere on the Internet is that unless it
isdesigned with extreme care, it is likely to have vulnerabilities (and sure
enough, both GetRight and Akamai Download Manager had some). There-
fore, the risks of browsing with a completely unnecessary plug-in that only
served a particular purpose once or twice far outweigh the purported (and
usually unwanted) benefits.
Content Rendering with Browser Plug-ins 137
Security Engineering Cheat Sheet
When Serving Plug-in-Handled Files
 Data from trusted sources: Data from trusted sources is generally safe to host, but remem-
ber that security vulnerabilities in Flash, Java, or Silverlight applets, or in the Adobe Reader
JavaScript engine, may impact the security of your domain. Avoid processing user-supplied
URLs and generating or modifying user-controlled HTML from within plug-in-executed
applets. Exercise caution when using the JavaScript bridge.
 User-controlled simple multimedia: User-controlled multimedia is relatively safe to host,
but be sure to validate and constrain the format, use the correct Content-Type, and consult
the cheat sheet in Chapter 13 to avoid security problems caused by content-sniffing flaws.
 User-controlled document formats: These are not inherently unsafe, but they have an
increased risk of contributing security problems due to plug-in design flaws. Consider host-
ing from a dedicated domain when possible. If you need to authenticate the request to an
isolated domain, do so with a single-use request token instead of by relying on cookies.
 User-controlled active applications: These are unsafe to host in sensitive domains.
When Embedding Plug-in-Handled Files
Always make sure that plug-in content on HTTPS sites is also loaded over HTTPS,* and always
explicitly specify the type parameter on  or . Note that because of the non-
authoritative handling of type parameters, restraint must be exercised when embedding plug-
in content from untrusted sources, especially on highly sensitive sites.
 Simple multimedia: It is generally safe to load simple multimedia from third-party sources,
with the caveats outlined above.
 Document formats: These are usually safe, but they carry a greater potential for plug-in
and browser content-handling issues than simple multimedia. Exercise caution.
 Flash and Silverlight: In principle, Flash and Silverlight apps can be embedded safely
from external sources if the appropriate security flags are present in the markup. If the
flags are not specified correctly, you may end up tying the security of your site to that of
the provider of the content. Consult the cheat sheet in Chapter 9 for advice.
 Java: Java always ties the security of your service to that of the provider of the content,
because DOM access to the embedding page can’t be reliably restricted. See Chapter 9.
Do not load Java apps from untrusted sites.
If You Want to Write a New Browser Plug-in or ActiveX Component
Unless you are addressing an important, common-use case that will benefit a significant
fraction of the Internet, please reconsider. If you are scratching an important itch, consider
doing it in a peer-reviewed, standardized manner as a part of HTML5.
* If loading an HTTP-delivered applet on an HTTPS page is absolutely unavoidable, it is safer to place it inside an
intermediate HTTP frame rather than directly inside the HTTPS document, as this prevents the applet-to-JavaScript
bridge from being leveraged for attacks.
138 Chapter 8
PART II
B R O W S E R S E C U R I T Y
F E A T U R E S
Having reviewed the basic building blocks of the Web,
we can now comfortably examine all the security fea-
tures that keep rogue web applications at bay. Part II
of this book takes a look at everything from the well-
known but often misunderstood same-origin policy to
the obscure and proprietary zone settings of Internet
Explorer. It explains what these mechanisms can do
for you—and when they tend to fall apart.
C O N T E N T I S O L A T I O N L O G I C
Most of the security assurances provided by web brows-
ers are meant to isolate documents based on their ori-
gin. The premise is simple: Two pages from different
sources should not be allowed to interfere with each
other. Actual practice can be more complicated, how-
ever, as no universal agreement exists about where a
single document begins and ends or what constitutes asingle origin. The
result is a sometimes unpredictable patchwork of contradictory policies that
don’t quite work well together but that can’t be tweaked without profoundly
affecting all current legitimate uses of the Web.
These problems aside, there is also little clarity about what actions should
be subject to security checks in the first place. It seems clear that some inter-
actions, such as following a link, should be permitted without special restric-
tions as they are essential to the health of the entire ecosystem, and that others,
such as modifying the contents of a page loaded in a separate window,
should require a security check. But a large gray area exists between these
extremes, and that middle ground often feels as if it’s governed more by a
roll of the dice than by any unified plan. In these murky waters, vulnerabili-
ties such as cross-site request forgery (see Chapter 4) abound.
It’s time to start exploring. Let’s roll a die of our own and kick off the
journey with JavaScript.
Same-Origin Policy for the Document Object Model
The same-origin policy (SOP) is a concept introduced by Netscape in 1995
alongside JavaScript and the Document Object Model (DOM), just one year
after the creation of HTTP cookies. The basic rule behind this policy is
straightforward: Given any two separate JavaScript execution contexts, one
should be able to access the DOM of the other only if the protocols, DNS
names,* and port numbers associated with their host documents match
exactly. All other cross-document JavaScript DOM access should fail.
The protocol-host-port tuple introduced by this algorithm is commonly
referred to as origin. As a basis for a security policy, this is pretty robust: SOP
is implemented across all modern browsers with a good degree of consis-
tency and with only occasional bugs.† In fact, only Internet Explorer stands
out, as it ignores the port number for the purpose of origin checks. This
practice is somewhat less secure, particularly given the risk of having non-
HTTP services running on a remote host for HTTP/0.9 web servers (see
Chapter 3). But usually it makes no appreciable difference.
Table 9-1 illustrates the outcome of SOP checks in a variety of situations.
Table 9-1: Outcomes of SOP Checks
Originating document Accessed document Non–IE browser Internet Explorer
http://example.com/a/ http://example.com/b/ Access okay Access okay
http://example.com/ http://www.example.com/ Host mismatch Host mismatch
http://example.com/ https://example.com/ Protocol mismatch Protocol mismatch
http://example.com:81/ http://example.com/ Port mismatch Access okay
NOTE This same-origin policy was originally meant to govern access only to the DOM ; that is,
the methods and properties related to the contents of the actual displayed document. The
policy has been gradually extended to protect other obviously sensitive areas of the root
JavaScript object, but it is not all-inclusive. For example, non-same-origin scripts can usu-
ally still call location.assign() or location.replace(...) on an arbitrary window or a
frame. The extent and the consequences of these exemptions are the subject of Chapter 11.
* This and most other browser security mechanisms are based on DNS labels, not on examin-
ing the underlying IP addresses. This has a curious consequence: If the IP of a particular host
changes, the attacker may be able to talk to the new destination through the user’s browser, pos-
sibly engaging in abusive behaviors while hiding the true origin of the attack (unfortunate, not
very interesting) or interacting with the victim's internal network, which normally would not be
accessible due to the presence of a firewall (a much more problematic case). Intentional change
of an IP for this purpose is known as DNS rebinding. Browsers try to mitigate DNS rebinding to
some extent by, for example, caching DNS lookup results for a certain time (DNS pinning), but
these defenses are imperfect.
† One significant source of same-origin policy bugs is having several separate URL-parsing
routines in the browser code. If the parsing approach used in the HTTP stack differs from that
used for determining JavaScript origins, problems may arise. Safari, in particular, combated a
significant number of SOP bypass flaws caused by pathological URLs, including many of the
inputs discussed in Chapter 2.
142 Chapter 9
The simplicity of SOP is both a blessing and a curse. The mechanism
isfairly easy to understand and not too hard to implement correctly, but its
inflexibility can be a burden to web developers. In some contexts, the policy
is too broad, making it impossible to, say, isolate home pages belonging to
separate users (short of giving each a separate domain). In other cases, the
opposite is true: The policy makes it difficult for legitimately cooperating sites
(say, login.example.com and payments.example.com) to seamlessly exchange data.
Attempts to fix the first problem—to narrow down the concept of an
origin—are usually bound to fail because of interactions with other explicit
and hidden security controls in the browser. Attempts to broaden origins or
facilitate cross-domain interactions are more common. The two broadly sup-
ported ways of achieving these goals are document.domain and postMessage(...),
as discussed below.
document.domain
This JavaScript property permits any two cooperating websites that share a
common top-level domain (such as example.com, or even just .com) to agree
that for the purpose of future same-origin checks, they want to be considered
equivalent. For example, both login.example.com and payments.example.com may
perform the following assignment:
document.domain = "example.com"
Setting this property overrides the usual hostname matching logic during
same-origin policy checks. The protocols and port numbers still have to match,
though; if they don’t, tweaking document.domain will not have the desired effect.
Both parties must explicitly opt in for this feature. Simply because
login.example.com has set its document.domain to example.com does not mean
that it will be allowed to access content originating from the website hosted
at http://example.com/. That website needs to perform such an assignment,
too, even if common sense would indicate that it is a no-op. This effect is sym-
metrical. Just as a page that sets document.domain will not be able to access
pages that did not, the action of setting the property also renders the caller
mostly (but not fully!)* out of reach of normal documents that previously
would have been considered same-origin with it. Table 9-2 shows the effects
of various values of document.domain.
Despite displaying a degree of complexity that hints at some special sort
of cleverness, document.domain is not particularly safe. Its most significant
weakness is that it invites unwelcome guests. After two parties mutually set
this property to example.com, it is not simply the case that login.example.com
and payments.example.com will be able to communicate; funny-cat-videos.example
.com will be able to jump on the bandwagon as well. And because of the degree
* For example, in Internet Explorer, it will still be possible for one page to navigate any other doc-
uments that were nominally same-origin but that became “isolated” after setting document.domain,
to javascript: URLs. Doing so permits any JavaScript to execute in the context of such as a pseudo-
isolated domain. On top of this, obviously nothing stops the originating page from simply setting
its own document.domain to a value identical with that of the target in order to eliminate the bound-
ary. In other words, the ability to make a document non-same-origin with other pages through
document.domain should not be relied upon for anything even remotely serious or security relevant.
Content Isolation Logic 143
of access permitted between the pages, the integrity of any of the participat-
ing JavaScript contexts simply cannot be guaranteed to any realistic extent.
In other words, touching document.domain inevitably entails tying the security
of your page to the security of the weakest link in the entire domain. An
extreme case of setting the value to *.com is essentially equivalent to assisted
suicide.
Table 9-2: Outcomes of document.domain Checks
Originating document Accessed document Outcome
document document
URL .domain URL .domain
http://www.example.com/ example.com http://payments.example.com/ example.com Access okay
http://www.example.com/ example.com https://payments.example.com/ example.com Protocol
mismatch
http://payments.example.com/ example.com http://example.com/ (not set) Access denied
http://www.example.com/ (not set) http://www.example.com/ example.com Access denied
postMessage(...)
The postMessage(...) API is an HTML5 extension that permits slightly less
convenient but remarkably more secure communications between non-same-
origin sites without automatically giving up the integrity of any of the parties
involved. Today it is supported in all up-to-date browsers, although because it
is fairly new, it is not found in Internet Explorer 6 or 7.
The mechanism permits a text message of any length to be sent to any
window for which the sender holds a valid JavaScript handle (see Chapter 6).
Although the same-origin policy has a number of gaps that permit similar
functionality to be implemented by other means,* this one is actually safe to
use. It allows the sender to specify what origins are permitted to receive the
message in the first place (in case the URL of the target window has changed),
and it provides the recipient with the identity of the sender so that the integ-
rity of the channel can be ascertained easily. In contrast, legacy methods that
rely on SOP loopholes usually don’t come with such assurances; if a particu-
lar action is permitted without robust security checks, it can usually also be
triggered by a rogue third party and not just by the intended participants.
To illustrate the proper use of postMessage(...), consider a case in which a
top-level document located at payments.example.com needs to obtain user login
information for display purposes. To accomplish this, it loads a frame point-
ing to login.example.com. This frame can simply issue the following command:
parent.postMessage("user=bob", "https://payments.example.com");
* More about this in Chapter 11, but the most notable example is that of encoding data in URL
fragment identifiers. This is possible because navigating frames to a new URL is not subject to
security restrictions in most cases, and navigation to a URL where only the fragment identifier
changes does not actually trigger a page reload. Framed JavaScipt can simply poll location.hash
and detect incoming messages this way.
144 Chapter 9
The browser will deliver the message only if the embedding site indeed
matches the specified, trusted origin. In order to securely process this response,
the top-level document needs to use the following code:
// Register the intent to process incoming messages:
addEventListener("message", user_info, false);
// Handle actual data when it arrives:
function user_info(msg) {
if (msg.origin == "https://login.example.com") {
// Use msg.data as planned
}
}
PostMessage(...) is a very robust mechanism that offers significant benefits
over document.domain and over virtually all other guerrilla approaches that
predate it; therefore, it should be used as often as possible. That said, it can
still be misused. Consider the following check that looks for a substring in