title:Scriptless Timing Attacks on Web Browser Privacy
author:Bin Liang and
Wei You and
Liangkun Liu and
Wenchang Shi and
Mario Heiderich
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Scriptless Timing Attacks on Web Browser Privacy
Bin Liang, Wei You, Liangkun Liu, Wenchang Shi
Renmin University of China, Beijing, P. R. China
{liangb, youwei, lacon, wenchang}@ruc.edu.cn
Mario Heiderich
Ruhr-University Bochum, Germany
PI:EMAIL
Abstract—The existing Web timing attack methods are
heavily dependent on executing client-side scripts to measure
the time. However, many techniques have been proposed to
block the executions of suspicious scripts recently. This paper
presents a novel timing attack method to sniff users’ browsing
histories without executing any scripts. Our method is based
on the fact that when a resource is loaded from the local
cache, its rendering process should begin earlier than when it
is loaded from a remote website. We leverage some Cascading
Style Sheets (CSS) features to indirectly monitor the rendering
of the target resource. Three practical attack vectors are
developed for different attack scenarios and applied to six
popular desktop and mobile browsers. The evaluation shows
that our method can effectively sniff users’ browsing histories
with very high precision. We believe that modern browsers
protected by script-blocking techniques are still likely to suffer
serious privacy leakage threats.
Keywords-timing attack; scriptless attack; Web privacy;
browsing history;
I. INTRODUCTION
History snifﬁng has received much attention in recent
years [6, 8, 9, 25]. The attack allows the adversary to learn
whether the user has recently visited some speciﬁc URLs by
prompting him or her to visit a malicious page. Researchers
have discovered that dozens of top websites used simple
JavaScript tricks to inspect visitors’ web browsing histories
[22]. According to a test of the most popular Internet
websites, Janc et al. [21] point out that at least 76% of
Internet users are vulnerable to history snifﬁng.
The most widespread history snifﬁng attack relies on
inspecting the visual style difference between the visited and
unvisited links. In modern browsers, Cascading Style Sheets
(CSS) [2] can be employed to make visited and unvisited
links take different colors or amounts of space. Based on
this, attackers can place a list of URLs that they want to
inspect in a web page and set the visited links to take a
different style than the unvisited ones by using CSS. When
a victim opens the page, a client-side script embedded in the
page will check the style of links in the list or the positions of
other elements, subsequently determining whether the victim
has recently visited a speciﬁc URL. For example, attackers
can use CSS a:visited selector to set the font color of
visited links to red and unvisited links to green. After the
page has been rendered by the victim’s browser, the attack
script can get the color of target links via invoking some
API functions, e.g., getComputedStyle in JavaScript.
If the font color of a link is red, a request can be submitted
to a remote server controlled by attackers to inform them
the link has been visited by the victim. Essentially, this
kind of attack exploits browser bugs, e.g., [27], to extract
the visited status of given links. Fortunately, these bugs are
easy to ﬁx. In 2010, Baron of Mozilla Corporation [10]
proposed a solution for mitigating this kind of attack. All
mainstream browsers, including Firefox, Chrome, Safari and
IE, have adopted this solution. As a result, attackers cannot
distinguish visited links from unvisited ones according to
their styles. It can be predicted that this kind of history
snifﬁng technique will completely disappear following the
update of users’ browsers.
The cache-based timing attack proposed by Felten and
Schneider [15] is another history snifﬁng technique. Web
browsers usually perform various forms of caching to im-
prove performance. In general, loading a resource from a
cache (visited) is faster than from the original source (un-
visited). Consequently, attackers can learn whether the user
has visited a web page by measuring the time that victim’s
browser spent on loading a speciﬁc resource embedded in
the page. A script program can be used to measure the time
both before and after loading a resource ﬁle to get the access
latency. For example, if Bob wants to ﬁnd out whether Alice
has visited Charlie’s website, Bob can embed a resource
related to Charlie’s site (such as the logo image of Charlie’s
homepage) and an attack script in a malicious page. The
attack page can be written as shown in Fig. 1.
Figure 1. A timing attack page for detecting whether Alice has visited
Charlie’s website.
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
DOI 10.1109/DSN.2014.93
DOI 10.1109/DSN.2014.93
DOI 10.1109/DSN.2014.93
112
112
112
During the attack, Alice is prompted to visit the malicious
page. When Alice views the page, the attack script is auto-
matically run in her browser. The time required to load the
logo image will be measured and reported to Bob. If the time
is less than a pre-established threshold, Bob can conclude
that the image exists in the cache of Alice’s browser and
she has recently visited Charlie’s site. According to the
experiments of Felten and Schneider, the accuracy of attacks
can be above 90% when using a JavaScript program to
measure loading time.
The most critical step of this attack is to accurately
measure the time the victim’s browser spent on loading a
speciﬁc resource. So far, these timing attack techniques are
hinging on executing some of the client-side scripts, such
as a JavaScript program or a Java applet. However, due to
serious threats posed by client-side scripts, many defense
techniques have been proposed to block the execution of
suspicious scripts in users’ browsers in recent years, such
as NoScript extension [24] for Firefox, NotScripts [7] for
Chrome, JavaScript Blocker [5] for Safari, HTML5 IFrame
sandbox [4], Content Security Policy (CSP) [1, 28], and
various script ﬁltering mechanisms have been integrated into
web applications. Based on these techniques, the scripts
in attack vectors will be heavily restricted or completely
disabled in a number of attack scenarios. When these
techniques are introduced to user’s browser, he or she is
unlikely to become a victim of script-based timing attacks.
For example, it is difﬁcult for the attackers to deploy the
timing attack pages on a website that has been identiﬁed as
trusted by users and recorded in their CSP whitelists.
Felten and Schneider also proposed a method trying to
deal with this problem in their paper [15]. It loads three
URLs in the attacker’s web page. The ﬁrst and the third are
known URLs of the attacker’s site, and the second is the
target URL. Then the attacker’s web server can measure the
times at which it receives the two hits. Subtracting these two
times, the attacker can get a measure of how long the target
URL took to be loaded. According to the experiment de-
scribed in their paper, the attack can achieve 96.7% accuracy.
However, this method can hardly be implemented today after
more than ten years of ongoing browser development. The
multi-threading technology has been widely used in most
of popular modern browsers. That means, the URLs will
be loaded concurrently and their loading times have little
relationship to whether or not the second URL is cached.
We repeat Felten’s experiment in some modern browsers
to determine whether the scriptless attack method is still ef-
fective today. According to the experiment method described
in the paper [15], we launched 200 times experiments, half
of which is performed when the test URL is cached and the
other half when non-cached. Fig. 2 shows the distribution of
times we measured for known cache hits and known cache
misses in Firefox 19.0. We can see very clearly that the two
distributions overlap each other heavily. In fact, even under
Figure 2. Distribution of access times for known cache hits and known
cache misses, as measured by server-side time measurement for Firefox 19.
the best condition, i.e., choosing threshold to be 35ms, the
false positive rate is higher than 40%. The experiment result
shows that this attack method is completely impractical now.
Based on the above discussions, a natural and important
question is whether the attacker can still effectively perform
cache-based timing attacks to sniff the users’ browsing
histories without executing scripts. In this paper, we want to
identify and develop a new scriptless timing attack method
that can be applied to modern browsers, and capable of
bypassing the above defense techniques.
In order to improve user experiences and provide more
ﬂexibility and control, mainstream browsers support some
CSS markup features to a certain degree. Some CSS features
can be used to provide dynamic page presentations based on
client-side environments or page contents, and they are not
dependent on JavaScript or other client-side script languages.
In practice, these features make it possible for attackers to
obtain users’ sensitive information without using scripts. For
example, Heiderich et al. [18] and Zalewski [32] presented
some alternatives to direct script injection that would enable
page contents exﬁltration. Their studies have demonstrated
that attackers can successfully steal within-page content by
abusing legitimate browser characteristics.
Inspired by the studies of Heiderich et al., we propose
a novel timing attack method, operating without executing
scripts. Our approach is based on the observation that the
rendering process of resources can be sensed via elaborated
CSS3 [3] markups. Speciﬁcally, we employ CSS animation,
scrollbar customization and media queries to monitor the
rendering of the target resource indirectly rather than use
scripts to observe their loading directly. Combining these
components with plain HTML, we found that
the start
time of rendering a resource can be accurately measured.
In fact, when a resource is loaded from the local cache,
113113113
its rendering process should begin earlier than when it is
loaded from a remote website. As a result, attackers can
learn whether a user has visited a speciﬁc resource. To
demonstrate the effectiveness of our method, we develop
three practical attack vectors for different attack scenarios.
We have applied them to six popular desktop and mobile
browsers (IE, Firefox, Chrome, Safari, Dolphin and Android
built-in browser). The attack experiment results show that
our attack method can effectively detect users’ browsing
histories.
style markup shown in Fig. 3 as example, it will pro-
duce an animation named scaling for a div container
x and set the animation cycle time to 100 milliseconds.
In addition, three keyframes are also speciﬁed for the
animation. In the ﬁrst keyframe, the height of x is set
to 200 pixels at the beginning of the animation cycle.
By 50% of the animation duration time, the height is
animated to 100 pixels. At the end of the animation
cycle, the height will return to 200 pixels.
In summary, this paper makes following contributions:
div.x {
• We propose a new CSS features exploit method. In
this study, CSS features are employed as a timing
measure tool, not a page content extractor. Compared
with previous exploit methods, we demonstrate that
CSS features can be leveraged to sense out-of-page
sensitive information rather than only the within-page
content.
• We present a novel timing attack method and three
practical attack vectors for stealing browsing histo-
ries without executing client-side scripts. The attack
method is sophisticated enough to be applicable to
modern browsers. The evaluations performed on pop-
ular browsers show that
they are effective to sniff
browsing histories with very high precision.
• We prove that modern browsers protected by script-
blocking settings or extensions are still likely to suffer
serious privacy leakage threats.
II. EXPLOITABLE CSS FEATURES
In this section, we discuss the details of the exploitable at-
tack components, which can be employed to bypass defense
techniques aimed at script-based attacks and are applicable
to modern browsers. In fact, our approach leverages some
elaborated CSS3 [3] markups. CSS3 is the latest standard for
CSS. All the major browsers are already supporting CSS3
features to different degrees.
In practice, some of CSS features can be used to provide
dynamic page presentations resulting from client-side envi-
ronments or page contents. Essentially, the browser cache is
also a part of client-side environment. If one such feature
can sense the time of resources loading or rendering, it
can be used as an indirect timing measurement tool. With
a thorough analysis, we identiﬁed certain CSS3 features
as these capable of providing potential ways to measure
resource loading time and send requests at appropriate
moments without executing any scripts.
• CSS Animations: With CSS3, users can create anima-
tions without executing scripts. A CSS animation can
contain a set of keyframes that describe how the
animated element should be rendered at a given time
during the animation sequence. Furthermore, we can
accurately specify how many seconds or milliseconds
an animation takes to complete one cycle. Taking the
-webkit-animation-duration: 100ms;
-webkit-animation-name: scaling;
}
@-webkit-keyframes scaling {
from { height: 200px; }
50%
{ height: 100px; }
100% { height: 200px; }
}
Figure 3. An example of CSS animations.
• CSS Scrollbar Customization: CSS markups can also
be used to customize the display of scrollbars. We may
use a CSS style to make the appearance of a scrollbar
be automatically changed for different scrollbar states.
For example, if the space of a container (e.g., a div) is
not large enough to hold the embedded content (e.g.,
an image), one or two scrollbars will appear and their
track pieces will be equally visible, as shown in Fig. 4.
We can use CSS to make the background of the track
piece be changed to a customized color. For Webkit-
based browsers, the background property of scrollbar
components can even be set with a URL for requesting
a remote resource, such as an image in a website. Using
the style shown in Fig. 5, the background of the vertical
track piece of a div scrollbar can be changed to an
image (i.e., http://evil.com/bg.png) when the increment
track piece appears. Regrettably, customizing the back-
ground of a track piece with a remote resource is only
supported in Webkit-based browsers.
track
piece
track piece
Figure 4.
Placing an image which exceeds the width and height of the
div in a div container will result in the appearance of the horizontal and
vertical scrollbars. The increment and decrement track pieces of the two
scrollbars will also occur. The increment track pieces are visible by default.
• CSS Media Queries: CSS media queries allow web
developers to check against certain physical character-
istics of a device before applying related styles. For
114114114
div.a::-webkit-scrollbar-track-piece
:vertical:increment {
background: url("http://evil.com/bg.png");
}
Figure 5. An example of scrollbar customization.
a media type (e.g., screen), a media query can be
used to check the conditions of media features such
as width, height and color, resulting in applications of
different style to page components for different feature
conditions. As shown in Fig. 6, if the width of the
current screen is equal or larger than 300 pixels, the
background of the page body will be changed to a
remote image. Unlike the CSS scrollbar customization,
using media queries to request a remote resource is
supported by almost all popular browsers. One thing
should be noted: when a page is embedded in an
IFrame, the size of its screen is determined by the size
of the IFrame container.
@media screen and (min-width: 300px){
body{ background: url("http://evil.com/bg.png"); }
}
Figure 6. An example of CSS media queries.
Taking the attacker’s viewpoint, we believe that CSS
animations actually provide a precise timer that can be
exploited to measure a period of time. Further, CSS scrollbar
customization and media queries can be exploited to observe
the rendering of the content embedded in a container and
trigger a request to a remote machine. By leveraging these
CSS features, we can launch a timing attack and bypass
existing defense techniques. Our idea is to place a resource
(e.g., a logo image) related to the target URL in a container
as the attack object and let the browser send a request to
report the starting of its rendering process by customizing
the scrollbar of the container or performing a media query.
Consequently, the start time of target resource rendering can
be observed remotely through setting an animation to control
the size of the container according to an appropriate timing
distribution, or by comparing it with the rendering of some
baseline resources that do not exist in the cache. Based on
these observations, we developed three attack vectors for
different attack scenarios.
III. SCRIPTLESS TIMING ATTACKS
By leveraging the exploitable features described in Section
II, we propose two scriptless attack approaches for different
scenarios, which can be applicable to modern browsers.
A. Measurement-based Attack
terpart. For a resource, a time point in the duration of the
page rendering can be identiﬁed. As such, the resource can
always begin to be rendered before that point when cached
and always after it when it is non-cached. Having this time
point, we can determine whether the resource exists in the
cache by measuring the relative start time of its rendering
process.
As described in Section II, if the resource is placed in