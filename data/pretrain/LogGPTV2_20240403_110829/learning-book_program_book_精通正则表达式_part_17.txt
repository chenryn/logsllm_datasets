---
## Page 107
使用正则表达式修改文本
81
示例2-4：用Java解决重复单词的问题
import java.io.*;
import
java.util.regex.Pattern;
import java.util.regex.Matcher;
public class TwoWord
public static void main(String [] args)
{
Pattern regexl = Pattern.compile(
\\b（[a-z]+)（（?:\\s1\1]+\1>)+)(\\1\\b）",
Pattern.CASE_INSENSITIVE);
Pattern regex3 = Pattern.compile("([^\\n]+)",Pattern.MULTILINE);
//对于命令行的每个参数进行如下处理
for (int i=0;i<args.length;i++)
try(
BufferedReader in = new BufferedReader(new FileReader(args[i]));
String text;
//For eachparagraph of each file...
while ((text = getPara(in)) = null)
{
//应用3条替换规则
text = regexl.matcher(text).replaceAll(replacel);
text = regex2.matcher(text).replaceAll(*");
text = regex3.matcher(text).replaceAll(args[i]+":$1");
//显示结果
System.out.print(text);
1
)catch
（IOExceptione）（
System.err.println("can't read ["+args[i]+"]:*+ e.getMessage());
1
//用于读入“一段”文本的子程序
static String getPara(BufferedReader in)throws java.io.IOException
StringBuffer buf = new StringBuffer();
String line;
while ((line = in.readLine()) != null &&
（buf.1ength() ==011 1ine.length()!=0))
buf.append(1ine+"\n);
、
return buf.length() == 0 ? null : buf.toString() ;
1
---
## Page 109
3.
第一
正则表达式的特性和流派概览
OveroiewofRegularExpressionFeaturesandFlaoors
现在我们稍微找到点感觉了，也见识了若干使用正则表达式的工具软件，你可能觉得，该
坐下来潜心研究研究如何使用它们了。不过，比较比较第1章中不同版本的egrep，或是前
一章中Perl程序和Java程序的区别就会发现，工具不同，正则表达式的写法和用法都有很
大的不同。
在某种特定的宿主语言或工具软件中使用正则表达式时，主要有3个问题值得注意：
支持的元字符，以及这些元字符的意义。这通常称为正则表达式的“流派（flavor）”。
正则表达式与语言或工具的“交互”（interface）方式。警如如何进行正则表达式操作，
容许进行哪些操作，以及这些操作的目标文本类型。
正则表达式引擎如何将表达式应用到文本。语言或工具的设计者实现正则表达式的方
法，对正则表达式能够取得的结果有重要的影响。
正则表达式和汽车
购买汽车时，我们需要考虑的问题和上面3点很相似。正则表达式中的元字符是应当首先
关注的，它相当于汽车的造型、色彩和内饰，例如CD播放器和真皮座椅。印刷光鲜的宣传
册上经常可以见到这些信息，在正则表达式的世界中，与之对应的就是第32页的元字符列
表。这些信息很重要，但还不是全部。
---
## Page 110
84
第3章：正则表达式的特性和流派概览
正则表达式与宿主语言的交互方式（interface）也很重要。交互方式的一部分内容起到装饰
性作用，描述对应的编程语言中正则表达式的应用规则。另一部分内容定义功能，它们决
定了语言所能支持的操作，以及操作的难易程度。对应于汽车的例子，它相当于汽车与我
们和我们的生活相“结合”的程度。某些问题可能是装饰性的，例如加油口在车的哪一侧，
车窗是否能电动升降。其他问题可能重要些，例如是手动变速还是自动变速。还有些关于
功能的问题：你的军怎样开进车库？它能装得下一个大号床垫吗？如果是滑雪板呢？或者
五个大人？（以及这些人如何进出，在这个问题上四门车显然比两门车有优势）。宜传册会
介绍一些此类信息，不过你可能需要阅读封底的小字才能了解所有细节。
最后需要关注的是引擎，以及引擎驱动车轮的原理。汽车的类比在这里不适用，因为大家
都理解汽车发动机工作的基本知识：如果是汽油发动机，人们就不会往油箱里加柴油。如
果是手动变速，他们不会忘记踩离合器。但是，在正则表达式的世界中，即使是一些最基
本的知识：例如正则引擎的匹配原理，以及该原理对表达式的调校和使用的影响，通常都
没有文档介绍。但是，这些细节对实际使用正则表达式又极其重要，所以我们会在下一章
用整章的篇幅来讲解。
本章的内容
如标题所示，这一一章讲解正则表达式的特性和流派。它介绍了经常使用的元字符，以及在
具体的工具软件中使用正则表达式的方式。这些内容涵盖了上文提到的前面两点。第三点
-—正则引擎是如何工作的，这些工作原理有什么实际意义一一会在下面的几章中涉及。
关于本章，我要说的一点是，它并不能告诉你某种工具软件中的正则表达式提供了哪些特
性，也不会教育你如何使用在提过的各种工具软件和编程语言中运用正则表达式。相反，
它的目的是，提供关于正则表达式本身和使用它的工具软件的完整图景。如果我们与世隔
绝，只使用一件工具，或许不需要关心其他的工具（或者是该工具的其他版本）有什么差
异。但现实情况并非如此，所以了解我们所用工具的技术渊源，或许能够提供有趣而又有
价值的启示。
SL
---
## Page 111
在正则的世界中漫步
85
在正则的世界中漫步
A Casual Stroll Across the Regex Landscape
我喜欢在故事的开头讲讲某些正则表达式的流派以及相应程序的演变过程。所以，请准备
一杯你最喜欢的热（或凉的）饮料，放轻松，我们一起来看看今天的正则表达式背后古怪
的发展史。这样做是为了让你全面了解正则表达式，培养追问“为什么会如此”的习惯。
我们为有兴趣的读者准备了一些脚注，不过大部分脚注只能算是博得读者一笑的花絮。
正则表达式的起源
The OriginsofRegularExpressions
关于正则表达式，最初的想法来自20世纪40年代的两位神经学家，WarrenMcCulloch和
WalterPitts，他们研究出一种模型，认为神经系统在神经元层面上就是这样工作的（注1)。
若干年后，数学家StephenKleene在代数学中正式描述了这种被他称为“正则集合”（regular
sets）的模型，正则表达式才成为现实。Stephen发明了一套简洁的表示正则集合的方法，
他称之为“正则表达式”（regularexpressions）。
20世纪50年代和60年代，理论数学界对正则表达式进行了充分的研究。RobertConstable
的文章为那些对数学感兴趣的读者提供了很不错的简介（注2）。
尽管存在更古老的应用正则表达式的证据，但我能找到的是，关于在计算方面使用正则表
达式的资料，最早发表的是1968年KenThompson的文章RegularExpressionSearch
Algorithm（注3)，在文中，他描述了一种正则表达式编译器，该编译器生成了IBM7094
的object代码。由此也诞生了他的qed，这种编辑器后来成了Unix中ed编辑器的基础。
ed的正则表达式并不如ged的先进，但是这是正则表达式第一次在非技术领域大规模使用。
ed有条命令，显示正在编辑的文件中能够匹配特定正则表达式的行。该命令“g/Regular
个功能非常实用，最终成为独立的工具grep（之后又产生了egrep扩展的grep)。
注1：文章的标题是Alogicalcalculusoftheideasimminentinnervousactivity、首次刊载于Bulletin
ofMath.Biophysics5(1943)、然后收录于EmbodimentsofMind（MlTPress1965）。这篇文章
的并头简要描述了种经细胞的行为方式（你知道神经脉冲的迷度在毒秒1米到150米之间
吗？），下面就都是各种算式了，反正我是一点也不懂。
注2:Robert L.Constable，“The Role of Finite Automata in the Development of Moderm Computing
Theory,”in The Kleene Symposium, Eds.Barwise,Keisler, and Kunen (North-Holland
Publishing Company, 1980), 61-83。
注3：Communications of theACM,Vol.11,No.6,June1968
---
## Page 112
86
第3章：正则表达式的特性和流派概览
Grep中的元字符
相比egrep，grep和其他早期工具所支持的元字符相当有限。元字符*是受支持的，但是+和？
则不受支持（不支持问号是很严重的缺陷）。Grep中用于捕获元字符的是\（\），而未转义
的括号会当作普通字符（注4)。grep支持行锚点（lineanchors），但方式十分有限。如果
出现在正则表达式的并头，它就是匹配行并头的元字符。否则它就不是一个元字符，而只
是一个普通的脱字符。同样，$只有出现在正则表达式的末尾时才被当作元字符。结果，用
户没法使用ends|^start这样的表达式。不过这不要紧，因为grep不支持多选结构。
元字符的作用规则也很重要。例如，grep的最大问题或许在于，星号无法用来限定括号内
的子表达式，而只能用于限定普通的字符、字符组，或者点号。所以，在grep中，括号的
作用仅限于捕获已匹配的文本，而不能用来进行普通的分组。实际上，某些早期版本的grep
甚至不支持括号嵌套。
Grep的发展历程
尽管今天的许多系统都有对应的grep，但你会注意到，本书中提到grep时使用的都是过去
时态（译注1)。过去时对应旧版本所属的流派，它们的历史都超过30年了。在这段时间中，
技术在不断进步，旧的程序也会加入新的特性，grep也不例外。
在最老版本的grep之上，AT&T的贝尔实验室加人了一些新的特性，例如从lex程序中借鉴
来的\（min，max\）。他们还修正了-y选项，早期版本的grep通过-y进行不区分大小写的匹
配，但此功能并不正常。同时，Berkeley的人加人了表示单词开头和结束的元字符，把-y
改为-i。不幸的是，星号或其他量词仍然无法作用于括号内的表达式。
Egrep的发展历程
此时，AlfredAho（同样是AT&T的贝尔实验室）写出了egrep、它提供了第1章介绍的各
种元字符中的大部分元字符。更重要的是，它以一种全然不同（但总的来说更好）的方式
实现了这些功能。不但加上了+和？，还容许量词作用于括号内的表达式，这大大增强了
egrep的表达能力。
注4：历史遗留问题：ed（因此也包括grep）使用转义的括号来分组，是因为KenThompson觉
得正则表达式主要用于C代码，因此匹配普通括号会比回溯更常用。
译注1：汉语无法完整地表现时态。
期
---
## Page 113
在正则的世界中漫步
87
同时，多选结构加人了，行锚点也升级到“基础级别”，可以在正则表达式的任何地方使用。
不过，egrep也不够完美一一有时候它能匹配，但不会显示结果，而且它缺乏某些当今流行
的特性。不过无论如何，它都比grep有用得多。
其他工具的发展历程
就在egrep演变的同时，其他程序，例如awk、lex和sed，也在按各自的脚步前进。通常，
开发人员会把某个程序中自己喜欢的特性添加到其他程序中。有时候，结果并不尽如人意。
例如，如果要在grep中增加对“+的支持，就不能直接使用‘+'，因为长期来以来在grep
中‘，’都不是元字符，突然进行这种修改会让大家感到不适应。因为‘\+’可能是grep
有时候，添加新特性也会带来新的bug。另外一些时候，新添加的特性不久后又被删除了。
构成流派的各个细微的方面，几乎都没有什么文档，所以新的工具软件要么形成了自己的
流派，要么尝试模仿其他工具，提供“看来相似”的功能。
这一切，加上漫长的发展史，众多的程序员，结果就是巨大的谜局（注5)。
POSIX标准化的尝试
诞生于1986年的POSIX是PortableOperatingSystemInterface（可移植操作系统接口）的缩
写，它是一系列标准，确保操作系统之间的移植性。该标准的某些部分关乎正则表达式和
使用他们的传统工具，所以值得我们关注。不过，本书涉及的各种流派无一严格地遵守了
所有的相关规定。为了厘清正则表达式的混乱局面，POSIX把各种常见的流派分为两大类：
须支持其中的任意一种。下页的表3-1简要介绍了这两种流派的元字符。
格式、货币币值、字符编码对应的意义等一-的设定。locals的目的在于让程序变得国际化。
它们不是正则表达式相关的概念，尽管它们会影响正则表达式的使用。举例来说，工作于
注5：尤其是你尝试一下子解决所有问题的时候更是如此，我现在对此体会深刻。
---
## Page 114
88
第3章：正则表达式的特性和流派概览
表3-1：POSIX正则表达式流派概览
正则表达式特性
BREs
EREs
点号、、S、[…]、[….]
“任意数目”量词
*
+和？量词
+?
区间量词
(min,max\)
(min,max)
分组
(…)
(.)
量词可否作用于括号
反向引用
\1到\9
多选结构
Latin-1编码（也称为“ISO-8859-1"）之中时，a和A（分别对应十进制编码224和160）
另一个例子是\w，通常用于表示“构成单词的字符”（在很多流派中，它等价于
[a-zA-Z0-9_])。这个特性并不是POSIX中必须的，但容许出现。如果支持的话，\w就能
对应locale中的所有字母和数字，而不仅仅限于ASCII编码的字符和数字。
如果程序支持Unicode，那么关于locale的问题就极大地简化了。Unicode的详细讨论从106
页开始。
HenrySpencer的正则表达式包
同样是在1986年，发生了于一件更重要的事情，HenrySpencer发布了用C语言写的正则表
达式包，这个包可以毫无困难地置人其他程序中一—这在当时具有开创性的意义。每一个
折去修改。
Perl的发展历程
差不多在同时，LarryWall开始开发一种工具，也就是日后的Perl语言。他的patch程序已
经大大促进了分布式软件开发（distributed softwaredevelopment），但是Perl注定要产生重
大的影响。
1987年12月，Larry发布了PerlVersion1。Perl很快引起了关注，因为它标合了其他语言
的众多特性，但指向一个明确的目的：就是我们日常所说的“实用（useful）”。
---
## Page 115
在正则的世界中漫步
89
Perl的特性中值得一提的是，它提供了传统上只有专用工具sed和awk才提供的正则表达式
操作符-这在通用脚本语言中是个首创。正则引擎的代码来自-一个早期的项目-Larry