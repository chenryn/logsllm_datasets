如果已经了解CodeQL基础知识相信如下内容对各位有一定的帮助
## 功能
> 编译
闭源项目创建数据库，可以使用该工具：
> 历史查询
在VSCode左侧可以的QUERY HISTORY可以点击切换历史查询内容，也可以右键比对查询结果等功能  
> 查看AST
在VSCode左侧选中要查看的java文件之后，点击View AST即可查看，并且鼠标点击到java文件中的类、方法等，AST
VIEWER中会自动帮助我们定位到该项  
> 快速查询
在我们编写的一些谓词上方有个快速查询按钮，点击之后可以快速查询当前谓词的结果。  
## 语法
列出个人经常用到的语法和一些注意事项
### 获取具体QL类型
不确定使用什么方式获取目标时，除了通过查看AST，还可以通过词`getAQlClass()`获取调用它实体的具体QL类型。
    from Expr e, Callable c
    where e.getEnclosingCallable() = c
    select e, e.getAQlClass()
### 尽可能缩小范围
如下定义，如果项目代码量很大，则非常耗时
    override predicate isSink(DataFlow::Node sink) {
        sink.asExpr().getParent() instanceof ReturnStmt
    }
可以设置return语句在哪个函数中调用来缩小范围，乃至其Type的全限定名
    override predicate isSink(DataFlow::Node sink) {
        sink.asExpr().getParent() instanceof ReturnStmt
        and sink.asExpr().getEnclosingCallable().hasName("xxxxx")
    }
### 个人使用的几个规则
    // 以某个方法的参数作为source (添加了几种过滤方式，第一个参数、该方法当前类的全限定名为xxxx)
    override predicate isSource(DataFlow::Node source) {
        exists(Parameter p |
            p.getCallable().hasName("readValue") and
            source.asParameter() = p and
            source.asParameter().getPosition() = 0
            and p.getCallable().getDeclaringType().hasQualifiedName("com.service.impl", "xxxxx")
        )
    }
    // 以某个实例的所有参数作为source(`X1 x1 = new X1(a,b)`，这里a、b作为source)，过滤：调用该实例的方法名称为`Caller`，实例类型名称为`X1`
    override predicate isSource(DataFlow::Node source) {
        exists(ClassInstanceExpr ma |
            source.asExpr() = ma.getAnArgument()
            and ma.getTypeName().toString() = "X1"
            and ma.getCaller().hasName("Caller")
        )
    }
### 调用端点路径
比如我们想知道方法A到方法G之间调用端点路径，则可以使用`edges`谓词，编写如下所示，如果也想找覆写的某个方法（如：接口实现类中的方法）可以将`calls`替换为`polyCalls`
    import java
    class StartMethod extends Method {
      StartMethod() { getName() = "main" }
    }
    class TargetMethod extends Method {
      TargetMethod() { getName() = "vulMain" }
    }
    query predicate edges(Method a, Method b) { a.calls(b) }
    from TargetMethod end, StartMethod entryPoint
    where edges+(entryPoint, end)
    select end, entryPoint, end, "Found a path from start to target."
得到的结果如图所示  
### 对某接口实现
主要是通过codeql自带谓词`overridesOrInstantiates`判断该函数是否进行了重写。  
如下，就能获取实现`JSONStreamAware`接口，重写的方法
    class JsonInterface extends Interface{
        JsonInterface(){
            this.hasQualifiedName("com.alibaba.fastjson", "JSONStreamAware")
        }
        Method getJsonMethod(){
            result.getDeclaringType() = this
        }
    }
    class CMethod extends Method{
        CMethod(){
            this.overridesOrInstantiates*(any(JsonInterface i).getJsonMethod())
        }
    }
    from CMethod m select m, m.getDeclaringType()
### 查询Select
如果编写查询不规范可能会经常碰到类似如下错误  
Showing raw results instead of interpreted ones due to an error. Interpreting
query results failed: [xxxxx] Exception caught at top level: Could not process
query metadata. Error was: Expected result pattern(s) are not present for
problem query: Expected exactly one pattern. [INVALID_RESULT_PATTERNS]
这种情况的注意事项如下：  
在不使用path查询时，元数据为`@kind problem`，并且也别导入path相关内容，如：`import
DataFlow::PathGraph`，否则查询时会一直产生失败日志，而且当string中使用了`$@`占位符时会一直失败使其当作正常字符串展示在结果中。  
这种查询由两列组成`select element, string`
使用path查询时，元数据为`@kind path-problem`，查询模板为`select element, source, sink, string`  
当`element`指定为`source`节点时最先显示的是`source`  
当`element`指定为`sink`节点时最先显示的是`sink`  
## AdditionalTaintStep
在为一些项目编写规则查询时，经常碰到数据流中断的情况，下面列出经常碰到中断的情况和解决方案。
### setter和getter
场景1：在做GitHub CTF案例时这块有体会，CodeQL为减少误报很多地方都需要我们根据相应场景自己连接数据流，比如getter。  
这种情况需要将调用方法的对象（通过`getQualifier`谓词获取限定符）和调用方法的返回值连接起来。如下操作就是从`get%`方法访问到它的限定符作为附加步骤重新连接起来。
    class GetSetTaintStep extends TaintTracking::AdditionalTaintStep{
        override predicate step(DataFlow::Node src, DataFlow::Node sink){
            exists(MethodAccess ma |
                (ma.getMethod() instanceof GetterMethod or ma.getMethod() instanceof SetterMethod or ma.getMethod().getName().matches("get%") or ma.getMethod().getName().matches("set%"))
                and
                 src.asExpr() = ma.getQualifier()
                and sink.asExpr() = ma
                )
        }
    }
### mapper
场景2：使用mybatis通常将接口命名为xxxxMapper或者xxxxDao这种形式，在xml配置文件中通过namespace指定其全限定名，当数据流需要经过数据库查询到这里会断开，那么需要手动将其连接起来。
如下我们使用普通查询从接收请求到`return`语句结束  
最后会在此处中断  
对应xml配置  
那么需要添加`AdditionalTaintStep`将中断进行拼接。这里将污染源查询的`id`和某个方法连接（该方法的对象类型名称是`xxxxDao`），当然有的可能名称是`xxxxMapper`，根据情况而定
    class MapperTaintStep extends TaintTracking::AdditionalTaintStep{
        override predicate step(DataFlow::Node src, DataFlow::Node sink){
            exists(MethodAccess ma |
                (ma.getQualifier().getType().getName().matches("%Dao") or ma.getQualifier().getType().getName().matches("%Mapper"))
                // and (src.asExpr() = ma.getAnArgument() or src.asExpr() = ma.getAnArgument().getAChildExpr())
                and src.asExpr() = ma.getAnArgument()
                and sink.asExpr() = ma
            )
        }
    }
最后查询结果：  
### 污染源作为参数传入
场景3：如下图所示，`instance`作为污染源，`workNode`也被污染，将其传入`t.setSceneKey`为`t`对象的`sceneKey`属性赋值，那么这里`t`对象理应也是被污染的。但当我们将`instance`作为`source`，`return
t`作为`sink`是获取不到路径的，需要加上额外步骤。  
代码如下，将调用方法的所有参数作为`source`(图中`setSceneKey`方法的`workNode.getSceneKey()`参数)，将调用方法的对象作为`sink`(图中的`t`对象)
    class SrcTaintStep extends TaintTracking::AdditionalTaintStep{
        override predicate step(DataFlow::Node src, DataFlow::Node sink){
            exists(MethodAccess ma |
                (ma.getMethod() instanceof SetterMethod or ma.getMethod().getName().matches("set%"))
                and
                    src.asExpr() = ma.getAnArgument()
                and sink.asExpr() = ma.getQualifier()
                )
        }
    }
可以猜猜上图中总共需要添加几个额外步骤（3个，第一：刚刚讲的；第二：`instance`的getter；第三：`workNodeMapper`）
### 实例化
场景4：如下图，将`req`传入`UploadFile`中创建`UploadFile`对象，再将其传入`systemService.uploadFile`方法中，这种情况，`uploadFile`对象应该是受污染的，但是默认情况下，我们像让数据流进入`systemService.uploadFile`中是不行的，因为在`new
UploadFile`就已经断开了。那么就需要将其连接起来  