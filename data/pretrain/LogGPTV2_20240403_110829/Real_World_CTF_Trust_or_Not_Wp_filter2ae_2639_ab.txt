    // File Mask: 
    //  ID Bytes: 
    //   History: 
    //------------------------------------------------    #define TEE_FS_HTREE_IV_SIZE 16
    #define TEE_FS_HTREE_TAG_SIZE 16
    #define TEE_FS_HTREE_FEK_SIZE 16
    typedef struct _tee_fs_htree_meta {
        UINT64 length;
    }tee_fs_htree_meta;
    typedef struct _tee_fs_htree_imeta {
        struct tee_fs_htree_meta meta;
        UINT32 max_node_id;
        UINT32 nop;
    }tee_fs_htree_imeta;
    typedef struct _tee_fs_htree_image {
        UCHAR iv[TEE_FS_HTREE_IV_SIZE];
        UCHAR tag[TEE_FS_HTREE_TAG_SIZE];
        UCHAR enc_fek[TEE_FS_HTREE_FEK_SIZE];
        UCHAR imeta[sizeof(struct tee_fs_htree_imeta)];
        UINT32 counter;
    }tee_fs_htree_image;
    #define TEE_FS_HTREE_HASH_SIZE        32
    #define TEE_FS_HTREE_IV_SIZE 16
    #define TEE_FS_HTREE_TAG_SIZE 16
    typedef struct _tee_fs_htree_node_image {
        /* Note that calc_node_hash() depends on hash first in struct */
        UCHAR hash[TEE_FS_HTREE_HASH_SIZE];
        UCHAR iv[TEE_FS_HTREE_IV_SIZE];
        UCHAR tag[TEE_FS_HTREE_TAG_SIZE];
        USHORT flags;
    }tee_fs_htree_node_image;
    //--------------------------------------    LittleEndian();
    tee_fs_htree_image  ver0_head;
    tee_fs_htree_image  ver1_head;
    FSeek(0x1000);
    tee_fs_htree_node_image ver0_root_node;
    tee_fs_htree_node_image ver1_root_node;
    FSeek(0x2000);
在上面的结构中我们可以看到 enc_fek 是存在 ver0_head 和 ver1_head 中的，对应的我们将存储 flag 的文件中对应部分读取出来。
    0000000 5e8e 9760 37e9 9170 a110 7f2f 4ef2 3b89
    0000010 f90c 165b 6c1e 0c5d 3421 2aa0 910c 770f
    0000020 9ae4 f295 f4b5 049c 07f6 fb9f 2ef0 efd2
    0000030 2c73 5363 58f7 3774 07a1 4c4f 846f 3035
    0000040 0002 0000 707f 7ba1 2738 1add e4b5 e4e0
    0000050 3e7d a3e5 fcbe 2384 440e 0ac1 2f7c c4aa
    0000060 d51f 6f9f 9ae4 f295 f4b5 049c 07f6 fb9f
    0000070 2ef0 efd2 3963 d3ef c803 0dca 36f5 178c
    0000080 5e15 7fed 0003 0000 0000 0000 0000 0000
    0000090 0000 0000 0000 0000 0000 0000 0000 0000
再通过偏移计算可以计算出 enc_fek 的值为
“\xe4\x9a\x95\xf2\xb5\xf4\x9c\x04\xf6\x07\x9f\xfb\xf0\x2e\xd2\xef” (ver0_head
和 ver1_head 中的 enc_fek 的值是相同的)
通过以下脚本计算出 fek 的值
    import os
    import struct
    from hashlib import sha256
    from hmac import HMAC
    from Crypto.Cipher import AES 
    import binascii
    def bytesToHexString(bs):
        return ''.join(['%02X ' % b for b in bs])
    def AES_Decrypt_ECB(key, data):
        cipher = AES.new(key, AES.MODE_ECB)
        text_decrypted = cipher.decrypt(data)
        return text_decrypted
    HUK = b'\x00'*0x10
    chip_id = b'BEEF'*8
    static_string = b'ONLY_FOR_tee_fs_ssk'
    message = chip_id + static_string
    SSK = HMAC(HUK, message, digestmod=sha256).digest()
    print ("SSK: " + bytesToHexString(SSK))
    ta_uuid =  b'\xbb\x50\xe7\xf4\x37\x14\xbf\x4f\x87\x85\x8d\x35\x80\xc3\x49\x94'
    TSK = HMAC(SSK, ta_uuid, digestmod=sha256).digest()
    print ("TSK: " + bytesToHexString(TSK))
    Enc_FEK = b'\xe4\x9a\x95\xf2\xb5\xf4\x9c\x04\xf6\x07\x9f\xfb\xf0\x2e\xd2\xef'
    FEK = AES_Decrypt_ECB(TSK, Enc_FEK)
    print ("FEK: " + bytesToHexString(FEK))
可以得到 FEK 的值为
    FEK: 9C 83 DB 49 07 2D BE CB E9 9C 8D 70 AA 91 2C 6E
###  解密
现在所有的密钥的值我们都得到了，只需要进行最后一步解密就可以了。按照下图的步骤进行解密即可：
首先现将 iv 和 tag 提取出来
    0001000 d563 3c8b be23 9f8d 0874 6deb 6caa 3f30
    0001010 37df 5faa 0498 3153 cbd6 c372 260b 6847
    0001020 1d81 5649 4a30 cb52 518a 7f9c 4354 cc00
    0001030 e272 8fd9 4820 3d76 4c1c 7578 a58f 56cf
    0001040 0001 be9b bb08 b8a6 601a a293 8320 a977
    0001050 f935 cb11 5410 f54e 1643 0a7c 7531 5bb9
    0001060 8334 c9b4 226a 36e6 cf72 446a 108f 11a3
    0001070 6844 65ce 73de f908 0921 d2f2 9f99 b4a4
    0001080 51e7 0000 0000 0000 0000 0000 0000 0000
    0001090 0000 0000 0000 0000 0000 0000 0000 0000
通过 010 的模板我们可以得到
    iv:
    B4 C9 6A 22 E6 36 72 CF 6A 44 8F 10 A3 11 44 68
    tag:
    CE 65 DE 73 08 F9 21 09 F2 D2 99 9F A4 B4 E7 51
现在所有未知的内容我们都已经获得到了，那么就可以开始进行解密了，解密脚本如下：
    import os
    import struct
    from hashlib import sha256
    from hmac import HMAC
    from Crypto.Cipher import AES 
    import binascii
    def bytesToHexString(bs):
        return ''.join(['%02X ' % b for b in bs])
    def AES_Decrypt_ECB(key, data):
        cipher = AES.new(key, AES.MODE_ECB)
        text_decrypted = cipher.decrypt(data)
        return text_decrypted
    fp = open("2","rb")
    data = fp.read()
    fp.close()
    HUK = b'\x00'*0x10
    chip_id = b'BEEF'*8
    static_string = b'ONLY_FOR_tee_fs_ssk'
    message = chip_id + static_string + b'\x00'
    SSK = HMAC(HUK, message, digestmod=sha256).digest()
    # print ("SSK: " + bytesToHexString(SSK))
    ta_uuid =  b'\xbb\x50\xe7\xf4\x37\x14\xbf\x4f\x87\x85\x8d\x35\x80\xc3\x49\x94'
    TSK = HMAC(SSK, ta_uuid, digestmod=sha256).digest()
    # print ("TSK: " + bytesToHexString(TSK))
    Enc_FEK = b'\xe4\x9a\x95\xf2\xb5\xf4\x9c\x04\xf6\x07\x9f\xfb\xf0\x2e\xd2\xef'
    FEK = AES_Decrypt_ECB(TSK, Enc_FEK)
    # print ("FEK: " + bytesToHexString(FEK))
    # print ("........ decrypt block data ...........")
    block_0 = data[0x2000:0x3000]
    Tee_fs_htree_node_image_1_iv = b'\xB4\xC9\x6A\x22\xE6\x36\x72\xCF\x6A\x44\x8F\x10\xA3\x11\x44\x68'
    Tee_fs_htree_node_image_1_tag = b'\xCE\x65\xDE\x73\x08\xF9\x21\x09\xF2\xD2\x99\x9F\xA4\xB4\xE7\x51'
    cipher = AES.new(FEK, AES.MODE_GCM, nonce = Tee_fs_htree_node_image_1_iv)
    cipher.update(Enc_FEK)
    cipher.update(Tee_fs_htree_node_image_1_iv)
    plaintext = cipher.decrypt_and_verify(block_0, Tee_fs_htree_node_image_1_tag)
    print (plaintext)
运行即可得到 flag 为 rwctf{b5f3a0b72861b4de41f854de0ea3da10} 。
## 总结
Real World 题目质量很不错，从比赛中也能学到新的东西，希望下次能不爆零。结尾需要说明由于本人对密码学仅有微薄的了解所以文中解题使用的脚本是参考了
r3kapig 的 wp ，希望之后能加强一下这方面的技能。自己的搜索能力以及高效阅读文档的能力也需要提升。
## 参考链接