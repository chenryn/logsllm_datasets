in an isolated processor environment that operates transpar-
ently to the operating system. SMM is deﬁned to be a real-
mode environment with 32-bits data access when operand-
and address-size override preﬁxes1 are used. Otherwise,
operand’s and address’s size is restricted to 16-bits.
The only way to exit from the SMM operation mode is
by means of the rsm instruction that is available only in the
SMM. The rsm instruction takes care of restoring the saved
state of the processor, and returns the control to the inter-
rupted program. When the processor is in SMM all hard-
ware interrupts, but software-invoked interrupts and excep-
tions, are disabled.
During boot time, it is a duty of the BIOS ﬁrmware to in-
tialize SMRAM, copy the SMI handlers to it, and, as a form
of protection, lock SMRAM to disallow any further writing
accesses to this area. In fact, SMM is the mode of opera-
tion with the greatest level of privilege, informally named
ring −2, and has to be as safe as possible from malicious
users. The solution presented in this paper works properly
only if the SMRAM has been locked at boot time.
3.1 Threat Model
Before describing the technique we devised, we must de-
lineate the threat model in which we expect SMMDumper to
be used. Our model assumes the availability of an hardware
method to trigger an SMI and trasfer control to SMMDumper,
such as the one brieﬂy depicted in Section 1. At the end of
the section, however, we discuss what are the consequences
of being unable to adopt an hardware solution.
The machine, which memory we must acquire, has al-
legedly been compromised and these conditions may hold:
• The attacker (or malware) has root access to the com-
promised system.
• The attacker has compromised other machines in the
same network of the target.
• The attacker can perform network attacks (e.g., inter-
cepting and modifying packets).
On the other hand, SMMDumper is not able to deal with the
following situations:
• The attacker has access to the smartcard containing
the private key used to sign collected memory.
• The attacker exploits vulnerabilities that allow write
access to SMM memory of the target system [25].
• The attacker has physical access to the target system
and is able to power it down or mount a DMA attack
that wipes the memory before it is collected [24].
1Intel and AT&T syntaxes, respectively provide A32, O32
and addr32, data32 as explict address- (0x67) and operand-
size (0x66) override preﬁxes.
81
We are well-aware that an attacker could write a mal-
ware able to thwart the execution of the memory dump,
whether we use our fallback software-based solution to trig-
ger an SMI. Speciﬁcally, the malware must have adminis-
tration privileges in order to launch the attack, tamper our
SMI triggering solution and subsequently prevent the launch
of the dump of the system memory. To achieve its goal, the
malware modiﬁes I/O APIC Redirection Table by setting
the delivery mode of the IRQ1 to Fixed and the Interrupt
Vector ﬁeld to the malicious interrupt vector in the IDT. By
doing so, the malware disables the ability of an user to trig-
ger an SMI by pressing a speciﬁc keystroke that launches
the memory dump. With respect to others techniques to
trigger an SMI [22], the technique that we adopt, presented
in Section 4.1, is more challenging to be silently disabled by
a malware. This is due to the fact that it requires the mod-
iﬁcation of an oﬀset of the well-known address of the I/O
APIC Redirection Table. This behavior can be considered
“suspicious” at least and may ring an alarm bell for com-
mon anti-virus software. This, of course, is far from being
an optimal solution: as we already stated, the best solution
would be a dedicated hardware method. Furthermore, to the
best of our knowledge, every technique proposed so far that
leverages SMM and needs to trigger an SMI on an allegedly
compromised system, suﬀers from the same problem [22].
4. SMM-BASED MEMORY DUMP
This section describes in detail the design and implemen-
tation of SMMDumper, the SMM-based infrastructure we
have devised to perform a consistent and unforgeable dump
of the volatile memory of a running operating system.
As brieﬂy outlined in Section 1, SMMDumper can be logi-
cally divided in two components: a triggering module and a
memory collector module. The former component is respon-
sible for invoking SMIs and thus entering SMM. Ideally, this
component should be implemented in hardware to provide
strong guarantees and resiliency against malware threats.
Instead, we have opted for a software-based implementation
to allow our solutions to be used on commodity hardware.
The memory collector module represents the main compo-
nent of SMMDumper. It is in charge of reading the physical
memory of the target host and transmit it over the network.
It is a BIOS extension loaded in SMRAM at boot time and
unauthorized modiﬁcations of its content are prevented by
having the BIOS locking write access to that speciﬁc region.
A global overview of SMMDumper architecture can be
observed in Figure 1.
Intuitively, a forensic analyst in-
vokes SMMDumper by initiating a predeﬁned keystroke se-
quence (1). This sequence is immediately intercepted by the
triggering module, which switches the system CPU to SMM.
The memory collector module (2) starts subsequently, initi-
ating the host physical memory dump over the network (3).
As we will see shortly, before the acquisition process actu-
ally starts, SMMDumper waits for detecting the presence of
a commodity cryptographic device, which must be plugged
into the system after entering SMM. This device is respon-
sible for creating on-chip digital signatures and to provide
strong integrity guarantees of the transmitted data (4).
Running code at system management mode privilege opens
a number of challenges that need to be properly addressed to
achieve the goals mentioned at the beginning of this section.
In particular, we must (i) trigger system management inter-
rupts to switch to SMM, (ii) be able to accessall the physical
[md5 (pkt) | pkt]
(1)
(3)
SMM
(2)
C = md5(mem)
(4)
sign(C)
[0x00... - 0xff...]
Figure 1: Overview of the system
memory of the target system, even when more than 4GB of
physical memory is installed on 32-bit hosts, (iii) guaran-
tee the integrity of the collected data on the host as well as
while in transit to a generic—but trusted—device. Meeting
such challenges clearly guarantees the atomicity (i and ii),
reliability (iii), and availability (iii) forensic requirements
illustrated in Section 1.
4.1 System Management Interrupts
Intel CPUs enter SMM by invoking a System Manage-
ment Interrupt (SMI). SMIs can be triggered through either
an external SMM interrupt pin (SMI#) or the Advanced Pro-
grammable Interrupt Controller (APIC). Even though only
one SMI pin is physically hard-wired to the CPU, diﬀer-
ent events—generally speciﬁed by the I/O Controller Hub
(ICH)—can trigger SMIs. Modern chipsets, such as the Intel
ICH10 [5], have approximately 40 diﬀerent ways to trigger an
SMI, such as power management, USB, Total Cost Of Own-
ership (TCO), writing to the Advanced Power Management
Control port register, periodic timer expiration and SMBus
events. In addition, some motherboards are equipped with
dedicated hardware that can be legitimately exploited to
raise SMIs. For example, an SMM interrupt switch installed
on the motherboard to allow users to suspend the system
when turned on (power-save mode). Nonetheless, triggering
an SMI requires a proper software register conﬁguration.
Switching to SMM to start a whole-system memory dump
requires raising an SMI whenever a speciﬁc keystroke se-
quence is detected. To this end, our approach builds on [3] to
implement a fully-functional SMM-based keylogger. In par-
ticular, everything revolves around the Intel Advanced Pro-
grammable Interrupt Controller (APIC), which overlooks
the communication between the CPU and external devices.
The APIC is divided into I/O and Local APIC. They are
located on the chipset and integrated onto the CPU, respec-
tively, and communicate over a dedicated APIC bus. The
I/O APIC receives external interrupt events from the sys-
tem hardware and its associated I/O devices and, depending
on the conﬁguration of its Redirection Table, routes them to
the Local APIC as interrupt messages. The Local APIC de-
livers the interrupts received from the I/O APIC to the CPU
82
1 start :
2
$0x4 , % eax
% eax , $0x1000
start
(% eax ) , % ebx
$0xdeadbeef , % eax
data32
movl
data32
addr32
movl
; ; Do s o m e t h i n g with % ebx
data32
addl
data32
cmpl
jl
3
4
5
6
7
8
9
10
11
12
Checksum(pkt[x:n])
phy addr
chunk
0
x
n
Figure 3: Packet format
Figure 2: Accessing physical memory from SMM
it belongs to (after consulting the Local Vector Table, which
speciﬁes how interrupts are delivered to the CPU and their
priorities). Finally, the Interrupt Descriptor Table (IDT) is
indexed with the vector number by the CPU to select the
proper Interrupt Service Routine (ISR) handler to invoke.
Overall, the Redirection Table plays a crucial role in the
above-sketched process, as it speciﬁes the interrupt vector
and delivery mode of each interrupt pin. In particular, the
delivery mode is fundamental to accomplish the goal of trig-
gering an SMI when an arbitrary, custom and predeﬁned,
keystroke sequence is observed. To this end, we set the de-
2 to SMI and the vector information
livery mode of the IRQ1
to 0s to properly forward that IRQ line to our SMI handler.
Our SMM ISR handler extracts the keyboard scancode
from the keyboard controller buﬀer, reading from the I/O
port 0x60. Any scancode mismatching the predeﬁned key-
stroke sequence is properly re-injected to the keyboard con-
troller buﬀer by writing the keyboard controller command
0xd2 to the I/O port 0x64 [18].
Modifying the I/O APIC Redirection Table to deliver an
SMI when the IRQ1 IRQ line is asserted requires to forward
the interrupt to the CPU. This is achieved by sending Inter-
processor Interrupts (IPIs) from software by properly conﬁg-
uring the Local APIC Interrupt Command Register (ICR).
To this end, we set the ICR Destination Field to self and
the Delivery Mode to fixed. Writing to the least-signiﬁcant
doubleword of the ICR causes an IPI message to be sent out
and the interrupt to eﬀectively be delivered to the CPU as
soon as the rsm instruction is executed.
4.2 Accessing Physical Memory
As noted elsewhere, SMM is similar to real mode. There-
fore, the size of operands and addresses of the instructions
executed in SMM are limited to 16 bits, restricting the ad-
dressable memory to 1MB. However, override preﬁxes are
generally used to access up to 4GB of the addressable mem-
ory space [8], as brieﬂy sketched in Figure 2. In particular,
the snippet of code iteratively reads 4KB of memory starting
from the address 0xdeadbeef. It is worth noting that run-
ning code in SMM disables paging, allowing for a direct ac-
cess to physical—rather than virtual—memory. While this
has the clear beneﬁt of allowing a straightforward memory
access without worrying about virtual-to-physical address
translations (and viceversa), it has drawbacks too. Accord-
ing to the Intel speciﬁcations [8], SMM can only access up
2We intercept PS/2 and USB keyboard when its state is set
as legacy mode.
to 4GB of physical memory, even on CPUs that support
Physical Address Extension (PAE) or long mode with IA-
32e. To overcome such a limitation, one may think about
enabling paging in SMM to populate a custom Page Table
to map physical-to-virtual pages and access them through
virtual addresses. Unfortunately, enabling paging requires
to switch the CPU to protected mode (the de-facto default
mode of operation of Intel-like CPUs nowadays). Within
SMM, this can only be achieved by executing the rsm as-
sembly instruction, which causes an exit from SMM too [7].
We defer the solution SMMDumper adopts to Section 4.4.
4.3 Data Integrity and Transmission
Direct physical memory access alone does not meet all
the forensics requirements sketched in Section 1.
Ideally,
SMMDumper could just read memory one byte at a time and
send it oﬀ over the network. However, this would hardly
represent a reliable solution. Running SMM code is also
similar to running in hypervisor mode: there is no operating
system service we can rely on and it is like being executed
directly on the bare metal. Therefore, transmission errors
may just occur and there are no in-place mechanisms to
address such issues (e.g., data loss or integrity corruptions).
To overcome such limitations and meet the reliability foren-
sic requirement outlined in Section 1, we have designed a
simple, yet eﬀective, communication protocol.
Intuitively,
SMMDumper divides the physical memory into chunks of
ﬁxed size (1KB in our current implementation). Each chunk
is then embedded in a packet structured as shown in Fig-
ure 3. The base address of the memory chunk contained
in the packet (i.e., phy addr) is metadata and represents a
unique label that is used by the receiver to correctly handle
out-of-order or missing chunks. Checksum over the whole
packet payload (metadata and the physical memory chunk),
instead, oﬀers the opportunity to detect integrity violations.
4.3.1 Data Signing
Clearly, the simple checksum-based scheme outlined above
protects only against transient network transmission errors
(similar to what a TCP segment checksum does), but it eas-
ily fails against an attacker that purposely modiﬁes data on-
the-ﬂy and recomputes the checksum to reﬂect such changes.
To address this threat, SMMDumper computes an incremen-
tal checksum C of the whole physical memory, as individual
packets are sent oﬀ3. Subsequently, when the transfer of the
whole physical memory is completed, SMMDumper signs C
3While details of the actual network transmission and re-
transmission due to loss or incorrect data are described next,
let us just assume here that all the packets have been cor-
rectly transmitted to the receiver and that the whole system
physical memory has thus been dumped.
83
and sends the resulting ciphertext blob to the receiver, which
veriﬁes the signature and compares C against a freshly com-