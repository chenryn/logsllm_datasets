k ∈ G(i).
(11)
Notice that (11) can also be written as degw (v(i)
where a(i)
[p(i)
jk —
jk is deﬁned in (10). Using (11), we can compute P(i) =
j ) = Pk a(i)
jk ] for weighted graphs, where
p(i)
jk =(w(v(i)
0
j
, v(i)
k )/degw (v(i)
j )
k ∼ v(i)
v(i)
otherwise
k ∈ G(i)
.
(12)
In a matrix form, P(i) can be deﬁned as P(i) = (D(i))−1A(i)
where D(i) is a diagonal matrix computed from A(i), where the
diagonal element d(i)
jj in D(i) is the sum of ones in the j-th row
in A(i) (that is, the degree of node vix in G(i)). At any time slot
i, we deﬁne the bounding distribution of the Markov chain on the
graph Gi as in literature deﬁned [deg (v(i)
j )/2m(i)]. It is, however,
unclear how to proceed with the different snapshots of the same
graphs at different times.
and v(1)
As shown in Figure 1, both nodes v(1)
are connected,
but not with their future images—v(2)
2 , re-
spectively. This also applies to states in the future not connected to
the past images. In the following, we investigate several techniques
for modeling the dynamic social graph as a graph where transitions
from future states to past states is possible. Techniques utilize here
are generic, and can be used to any graph with multiple labels.
1
or v(2)
and v(2)
or v(3)
2
1
1
2
Prior work in the literature has tried to model dynamic graphs
as 3-mode tensor [1] or union multigraph [5]. However, while the
ﬁrst uses high dimensionality—making computations on the ten-
sor computationally expensive, the second technique reduces di-
mensionality and loses some information about the graph. Indeed,
the second technique computes the union between multiple graphs
(edge- and node-wise) and omits any potential multiple edges be-
tween two nodes in the union. While this is meaningful to un-
derstand a union snapshot of multiple graphs, demonstrate con-
nectivity characteristics of the union graph driven from multiple
attributes, and potentially other beneﬁts, it does not capture the
“depth” of edges and does not differentiate between different edges
based on their “real value”. For example, while edges in the union
Figure 3: An example of multigraph conversion into weighted
graph by summing weights of edges between pairs of nodes.
multigraph are all the same, some in reality might be the result of
multiple edges whereas others could be the result of a single edge.
3.2 Dynamic Graphs as Multigraphs
Formally, for the dynamic graph G = {G(i)} described in sec-
tion 3.1, we deﬁne a multigraph G as G = (V, E), where
V = [i=1...t
{V (i)}, and E = ]i=1...t
{E(i)}.
(13)
Notice that ∪ is a set union, which does not allow repetition of ver-
tices, whereas ⊎ is a multiset union, which allows edge repetition.
When E is computed, the index that corresponds to the time of the
edges in Ei can be removed for simplicity. A simple toy exam-
ple of transforming the multiple snapshots of the dynamic graph in
Figure 1 into a multigraph is in Figure 2.
Our formalization above of the graph as a multigraph (rather than
union multigraph as per the way deﬁned in [5]) follows the intuition
of what a dynamic graph could yield of associations at any time.
At a time i, where 1 ≤ i ≤ t, constructing the proper graph for
operating a potential system, like mixing-based anonymous com-
munication system, and maintaining the same information driven
from the original multiple snapshots of the graph is possible.
3.3 Dynamic Graphs as Weighted Graphs
Now, we convert the dynamic graph model represented as a multi-
graph, as in (13), into a weighted graph. We generalize formal-
izations in section 3.1.
In particular, the model in (10) can be
rewritten (for weighted undirected graph) as A = [ajk]n×n—here,
n = |V|—where
ajk = Xi=1...t
w(v(i)
j
, v(i)
k ), v(i)
j ∼ v(i)
k ∈ G(i)∀i.
Similarly, we extend the model in (11) into
degw (vj) = Xi=1...t
degw (v(i)
=X∀k Xi=1...t
a(j)
k
j ) =X∀k
w(v(i)
j
, v(i)
k ), v(i)
j ∼ v(i)
k ∈ G(i).
(14)
(15)
(16)
We can further extend the transition probability formulation to cover
the weighted graph by plugging both (14) and (15) into a similar
169v2
α1a1
12 + α3a3
12
α2a2
23 + α3a3
23
α1a1
13 + α2a2
13 + α3a3
13
v1
v3
Figure 4: A weighted graph model to express dynamic graphs.
model to that of (12), to get P = [pjk]n×n, where
pjk = ajk/ degw(vj)
(17)
For a random walk deﬁned on G according to the transition prob-
ability deﬁned in (17), the following theorem states the stationary
distribution. This theorem (and the proof herein) are essential for
latter results on characterizing and operating on dynamic graphs.
Also, the proof of Theorem 1 follows similarly as in below.
THEOREM 2. Let G = (V, E) be a connected, undirected, and
weighted graph deﬁned as in (13). For a random walk following
transition probabilities as in (17), the stationary distribution is de-
ﬁned as π = [πi]1×n (for n = |V|), where:
πi = degw(vi)/ Xk=1...n
degw (vk)
(18)
PROOF. See the appendix. The proof is also in [2].
3.4 Generalized weighted graphs
In many natural social contexts, recent associations are more val-
ued than older ones, or vice-versa. Accordingly, a general frame-
work for quantifying the potential of any system on top of social
networks should consider implicit social network characteristics,
such as link age, in addition to the explicit differences among links
captured by the topological structure. We generalize the model in
section 3.3 to accommodate for implicit values of associations over
time. Without losing generality, let αi (for 1 ≤ i ≤ t) be a set of
parameters that take numerical values. An extension of the social
graph model in (14) is as follows:
ajk = Xi=1...t
αiw(v(i)
j
, v(i)
k ), v(i)
j ∼ v(i)
k ∈ G(i)∀i.
(19)
The rest of the model in section 3.3, particularly in (15) onward,
holds for this generalization after adjusting ajk as in (19). A toy
example demonstrating the adjustment of weights in Figure 3 is
shown in Figure 4.
4. RESULTS
4.1 Datasets and Data Preprocessing
Our sources of data are the Facebook social network dataset [18]
and the DBLP [8] co-authorship graph, which are explained below.
The DBLP Dataset. The DBLP dataset represents co-authorship
graph, where nodes are authors and a link between two authors im-
plies that the authors have co-authored a paper. The original DBLP
dataset consists of 943, 316 nodes and 6, 379, 554 edges between
them, for publication records until May 2011 in computer science
areas. The largest connected component consists of 769, 642 and
3, 051, 127 undirected edges. To generate dynamic graphs from
that component, we select the period of 2006 to 2010 inclusive, by
selecting authors who have publications in each and every of these
years. The result is a multigraph where two nodes would have an
edge if they co-authored a paper in a given year, and number of
Table 1: Statistics of DBLP time-varying graphs. Metrics of
comparison are number of nodes (n), number of edges (m), av-
erage clustering coefﬁcient, diameter, and radius.
nodes
edges
clustering
diameter
radius
DBLP (1)
DBLP (2)
DBLP (3)
DBLP (4)
DBLP (5)
31704
33012
33923
33071
26150
71994
79475
84125
82282
62161
0.483
0.480
0.467
0.453
0.419
26
27
24
23
24
14
14
13
12
13
such papers per year is used as weight for weighted graphs. Multi-
ple edges could be created between two authors if they co-authored
over multiple years. Multiple edges are labeled with respect to
the year of publication. The ﬁnal multigraph has 46, 994 nodes
and 458, 736 edges. We decompose each multigraph to multiple-
graphs with respect to the edge label. Finally, as some nodes who
published in the given period could be isolated in a certain year, we
remove these nodes so as each resulting graph is connected. Statis-
tics of the different resulting graphs are shown in Table 1. For our
study, we consider several cases of the same graph including both
weighted and unweighted, with respect to the time.
Graphs used in our experiments are as follows. (i) Unweighted
graph with respect to each year (5 graphs). (ii) Unweighted single
graph representing the entire dataset (1 graph). (iii) Weighted sin-
gle graph representing the entire dataset. The weight on an edge
connecting two nodes is the sum of all weights of edges between
these nodes over time from the beginning to the end of recording
the graph structure.
(iv) Weighted multiple snapshot graphs (up
to each year; 5); a graph G1i combines all nodes in G1 to Gi and
edges between them. (v) Unweighted multiple snapshot (up to each
year; 5). These graphs are obtained using the same method as in
the previous step but without weights. (vi) Weighted graphs with
weights assigned based on the age of the link. We use geometrical
(21−x; x = 1 newest) and reciprocal (1/x) decay distributions.
In Table 1 and Table 2, the basic structural properties are as fol-
lows. (i) Graph size: the number of nodes and number of edges in
the social graph (denoted as n and m). (ii) Clustering coefﬁcient:
is the average (thus in [0, 1]) of local clustering coefﬁcient for all
nodes. The local clustering coefﬁcient for a node is the fraction
of possible triangles that go through that node. (iii) Diameter: the
longest of eccentricities among all nodes in the graph. The eccen-
tricity of a node is deﬁned as the longest shortest path from that
node to other nodes in the graph. (iv) Radius: shortest eccentricity.
The Facebook Dataset. The Facebook dataset [18] is for wall
posts in New Orleans regional network from 2004 to 2009. A link
between two nodes indicates that the ﬁrst node has interacted with
the second node. Further details on statistics of the entire dataset
is in [18]. To obtain a dynamic graph from this dataset, we limit
ourselves to the last 30 months of interactions, with each graph ob-
tained over 6 months of interaction. The resulting ﬁve graphs are
shown in Table 2. The same variations used above are also used for
Facebook.; we omit details for the lack of space.
4.2 Results
In the following we outline the results of utilizing the differ-
ent social graphs obtained in section 4.1, using the techniques de-
scribed earlier in this work. Our main measurement metric is the
achieved anonymity in terms of the total entropy in the distribu-
tion of the last hop in a random walk, as the length of the random
walk increases; computed as in (1). We keep in mind that potential
utilization of social graphs for anonymity systems would be sub-
170Table 2: Statistics of Facebook time-varying graphs. Metrics
of comparison are number of nodes (n), number of edges (m),
average clustering coefﬁcient, diameter, and radius.
in all of these graphs, the achieved anonymity is good enough (as a
portion of the maximal) even with a walk length of 10, suggesting
the usefulness of this design. Both remarks apply to both datasets,
though bias is a lot higher in Facebook than in DBLP.
nodes
edges
clustering
dimeter
radius
Facebook (1)
Facebook (2)
Facebook (3)
Facebook (4)
Facebook (5)
9154
13288
16540
23879
35665
23245
37908
42427
59190
86525
0.102
0.101
0.092
0.085
0.084
19
18
19
21
18
10
10
10
11
10
ject to the performance of this systems, which necessitate to a short
random walk length. We consider walk lengths varying from 1 to
20 steps, where walk lengths of 1 − 12 are demonstrated in most
experiments. As the entropy varies depending on the source of the
random walk, we are interested in the maximum, minimum (advo-
cated in section 2.4 and expressed in (6)), and mean entropies for a
given dataset as the walk length increases.
Original Unweighted Graphs. We ﬁrst consider operating the
anonymity system on top of the graphs shown in Table 1 and Ta-
ble 2. First, we observe that lower-bound on the achieved entropy
or the entire system is much smaller than that of the average and
maximum entropy, for any walk length. This tells that the measure
of the lower-bound on the entropy, while theoretically appealing
for the guarantees advocated earlier, do not provide a representative
measure for the whole set of nodes in the system or graph. Second,
we observe that both the mean and the maximum of the entropy in
each of the graphs stabilizes, and reaches its potential maximum
entropy within a relatively smaller number of steps, corresponding
to shorter random walk length. This indeed interesting, and agrees
with prior work in [14], despite that the results in the prior work
have been on relatively a faster mixing social graph [13].
Dynamics as Weights. We consider modeling dynamics of so-
cial graphs as weights on edges. We use the method in 3.3 for
generating these graph with weights. The method of obtaining the
graphs is explained in 4.1. Similar observations on the results for
the tendency of weights is made as on the previous measurements.
Furthermore, the general tendency of improvement of the entropy
value as the time goes is made clear in both measurements.
Unweighted Dynamic Graphs. We consider removing weights
from the different dynamic graphs to observe how this affects the
entropy as walks length increases. For the same experiment above,
with the only difference being deletion of weights. The most impor-
tant point made clear in this experiment is that unweighted graph
generated from these weighted dynamic graphs provide higher en-
tropy for the same walk length (over the same number of nodes).
Different Weighting Scenarios. We consider the potential ways of
assigning the different weights on the social graph, based on the age
of the link, and how this impacts the achieved anonymity on these
graphs. We consider the graphs constructed from the multiple-
snapshots, according to the way described in section 3.3 and sec-
tion 3.4. We use the result in section 3.3 to generate a “linear”
weighting factor (the coefﬁcient is 1), and thus the weight of an
edge is the number of interactions between the two nodes over all
years. We consider the same graph generated in this step without
weights as well. Finally, we use the model in section 3.4 to gener-
ate generalized weighted graphs, where weights are formed accord-
ing to the reciprocal or geometrical decay distributions explained
in 4.1. In these measurements, and somewhat counter-intuitively,