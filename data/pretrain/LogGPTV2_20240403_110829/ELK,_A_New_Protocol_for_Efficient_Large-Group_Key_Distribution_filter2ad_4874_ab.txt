If  a  member joins  the  group,  the  key  server  authenti- 
cates the member and assigns it  to a leaf  node of  the key 
tree.  The key server will  then  send all the keys on the key 
path  to the member.  To preserve backward secrecy  all the 
keys that the new member receives  need to be independent 
from any previous keys (the new member should not be able 
'The issues of member authentication and secure channel setup me or- 
thogonal to the main thrust of this paper and we assume that secure mech- 
anisms are used. 
to decrypt traffic that was sent before it joined the group). 
Hence, the  key  server replaces  all  keys  on the  new  mem- 
ber’s keypath with  fresh, random  keys  and  sends each of 
these new keys to the group on a “need to know” basis.  We 
illustrate  this  protocol  with  an  example.  Assume  the  set- 
ting depicted by  figure  1 and for simplicity  we assume that 
a new member M4  joins the group.  Assuming that the last 
leaf of the tree is empty, the key server places the new mem- 
ber M4  at that leaf, chooses new the keys on M4’s key path 
and sends K:,  Kh, and  K; to  M4  over a secure  link.  To 
update the  key  paths  of  the previous members, the  server 
broadcasts the following key  update message to the group: 
( K i } ~ j ,  {K;}K*. Member M3  needs to  update 
{ K ~ } K ~ ,  
keys K3 and K1 on its key path. Since M3 knows KG, it can 
decrypt the first part of the key update message and recover 
KA, and as soon as it knows Ki it can decrypt the new group 
key Ki. Members 1111 and M2  both know Ka, so they can 
decrypt the new group key K ;  from the final part of the key 
update message.  Below  we show how  to improve on  this 
join protocol so no broadcast  message is necessary. 
The group leave,  however,  is  more difficult  to  perform 
efficiently.  The challenge is  to  replace the  current group 
key such that only the legitimate members receive  the new 
key but the leaving member does not.  In  fact, all keys that 
the  leaving member  knows  need  to  be  changed  to ensure 
forward secrecy.  The keys  are replaced sequentially from 
the leaf  up to the root key.  This protocol is best explained 
with an example. We assume the group that figure  1 shows, 
where member M3  leaves  the  group.  The key  server up- 
dates the keys K1, K3 and generates the new keys K ; ,  KA. 
It then broadcasts the message { K ~ ) K , ,  { K { } K ; ,  { K : } K ~ .  
Member M4  knows K7  and can  hence decrypt and obtain 
Kh, which  allows it  to  obtain  K;. Members Ad1  and h.r, 
know K2 and so they can directly obtain the new group key 
K;. Leaves are efficient because they only require updating 
[log(N)I  keys, where N  is the number of  group members 
and assuming that the key tree is balanced. 
5  Reliability for Key Update Messages 
When members join or leave a group, the key server up- 
dates the group key  and broadcasts a key  update message 
to the group.  If  a group member does not receive  the key 
update message,  it  will  not  be  able to  decrypt the  subse- 
quent messages  encrypted with  the  new  group key.  With 
the exception of the recently proposed Keystone protocol by 
Wong and Lam [38], previous systems addressed the prob- 
lem of lost key updates only marginally.  Previous schemes 
assume to recover from lost key updates through the follow- 
ing mechanisms: 
1.  A  naive approach is to let members request a key up- 
date by  unicast  from the key server.  Clearly the naive 
unicast  recovery  mechanism does not scale, although 
it can be used in conjunction with  other techniques as 
a fallback recovery mechanism. In fact, both ELK and 
the Keystone protocol  use unicast as a fallback mech- 
anism.  We  sketch  such  a  recovery  protocol  in  Ap- 
pendix A. 
2.  Another  approach  is  to  replicate  key  update  pack- 
ets  (multi-send).  Although replication  is  a  powerful 
method  to  achieve robustness,  it  is  well  known  that 
packet loss in the Internet is correlated [26]. This im- 
plies that key  update packets  sent in  close succession 
risk loss if the first one is lost.  A strategy which sepa- 
rates redundant packets  would cause the client to wait 
for  replicated key  update  messages  when  it  receives 
data that it cannot decrypt. 
3.  Reliable  multicast  schemes,  such  as  SRM  [ 111  or 
STORM [40] may be used  to achieve reliable  delivery 
of  key  updates.  These schemes add substantial  com- 
plexity and might not scale to TV-size audiences. Fur- 
thermore,  these  systems are  not designed  for robust- 
ness  in  an adversarial  environment, and hence oppor- 
tunities for denial-of-service attacks exist.  Similarly, 
a reliable group communication toolkit, such as those 
used in small-group key agreement protocols, such as 
TOTEM [23], or HORUS [33] are prohibitively expen- 
sive and would not scale to large groups. 
4. Wong  and  Lam  [38]  use  forward-error correction  or 
error-correcting codes for key update packets [ 17, 271. 
More  specifically,  the  idea  is  to  use  a  scheme  such 
as  Rabin’s  IDA  [28],  Reed-Solomon  [29] codes,  or 
Digital  Fountain  codes  [5] to  split  up  a  key  update 
packet into n packets, and when the receiver  gets any 
m packets it can  reconstruct the key  update.  In  such 
a scheme the receiver needs to receive  sufficient pack- 
ets to reconstruct the desired information.  Moreover, 
since packet loss is correlated, packets that are sent in 
close succession may  all be dropped [26].  Wong and 
Lam  assume statistical  independent loss,  which  does 
not cover correlated packet loss (e.g. due to temporary 
congestion) [38]. 
In  this work, we use a combination of new mechanisms 
to achieve reliable key  updates.  Our work  is motivated  by 
the following observations: 
1.  Member joins are free in our model  if no broadcast is 
necessary. Our member join protocol  does not require 
any broadcast message. However, if a large number of 
members join  concurrently, the  key  server may  need 
to distribute a message of length [logz(N)l bits to en- 
code the location  of the joining node, where N  is the 
number of group members.  Since member join events 
250 
usually require no broadcast  information, no informa- 
tion can get lost. 
In  the  case of  a key  update  message after a  member 
leaves,  half  the  members  only  need  a  single  key  in 
the key update message (assuming our key tree is bal- 
anced).  Similarly,  one  quarter  of  the  members only 
need two keys to update their key path. In general 1/22 
of  the members only  need  i  keys  to update their  key 
path.  Another  way  of  viewing  this  is  that  sending i 
keys will help 1 - 2-i  of the members to update their 
key path. We call the keys that help more members the 
maximum impact keys (MIK). 
Most key  management protocols separate key  update 
messages  and  encrypted data  packets.  The  receiver 
must receive  both  of them  to read  encrypted data.  In 
ELK, we add the key update directly  to the data pack- 
ets.  Since space in data packets  is limited, we can  at 
most add  a small  amount of  key  update  information. 
Previous protocols had  lengthy  key  update messages, 
so they could not use this approach. 
ELK features a method to compress key updates by trad- 
ing off key update message size and receiver computation. 
The resulting  key  update  is  small  enough  that  the  sender 
can piggyback it in data packets.  The details are described 
below. 
With  these  mechanisms in  place, the majority  of group 
members can recover from a lost key update if they receive 
the  hints  in  a  data packet.  The  remaining small  fraction 
needs to contact the key server through unicast. 
6  ELK: An  Efficient Large-Group Key  Dis- 
tribution Protocol 
ELK stands for Efficient Large-Group Key distribution 
protocol. We describe ELK in this section. We first describe 
the basic key  update mechanism, followed  by  the join and 
leave protocols.  We then analyze the security  of ELK, and 
discuss ELK'S  advantages.  Later  we  will  show how  ELK 
allows member joins  without  requiring  broadcasts.  (Only 
unicasts  to  adjacent members of  the  new  member are re- 
quired.  See Section 6.2.1 for details.) 
6.1  Basic ELK Mechanisms 
In ELK all members are at leaves in the logical key hier- 
archy. ELK is composed of two basic mechanisms: 
0  Key update 
Key recovery (through hints) 
From now on we assume that the key length is n bits. 
6.1.1  Child Contribution for Parent Key Update 
As we discuss in section 3, the server updates the keys of the 
key tree when members leave the group. We use a new key 
update protocol  in ELK, where the left and right child keys 
contribute to update the parent key.  This approach is sim- 
ilar in  nature to the OFT protocol [ 2 ] ,  but our construction 
allows small hints that allow legitimate members to recon- 
struct the key without the key update, as we shall see in the 
next section. 
We  consider the  case  where  we  want  to  update  a  key 
K  that has the two child keys K L  and KR. The new  key 
K'  is  derived  from  K  and  contributions from  both  chil- 
dren.  The left child key K L  contributes n1  bits to the new 
key, which are derived by a pseudo-random function  using 
key  K L  and  applied  to  K .   We  call  the  left  contribution 
CL = PRF$;"')(K) 
(nl bits  long).  Similarly, CR is 722 
bits  long and is derived from  the  right  child  key  KR and 
K  as follows:  CR = PRFg;nZ)(K). 
The right child key 
K R  contributes  n2  bits, hence CR is n2  bits long. We con- 
catenate the two contributions to form a new key of length 
n1 + n2: CLR = CLICR. To compute K'  we compute a 
pseudo-random function with  CLR as the key and the pre- 
vious key K  as the data:  K'  = PRFc,,(K).  Without  loss 
of generality we assume that n1  5 722.  Since the security of 
this key  distribution  scheme is  at most  O(2")  (because of 
the n bit key length), we have n1 + n2  5 n. 
The key update message needs to contain  enough infor- 
mation that the members on the left who know K L  can re- 
compute K', as well as the members on the right who know 
KR. The left members can derive CL themselves, but they 
need CR. Hence the key update message contains { C R } K ~ ,  
which  is  722  bits  long.  Similarly, for the  members on  the 
right,  the  key  update contains  {CL}K,, which  is  n1  bits 
long. 
The details of  this  key  update are  listed  in  the  box  la- 
beled Procedure 1. This construction allows us to construct 
compact hint messages, that enable the legitimate receivers 
to reconstruct  the updated key, as we will see below. 
6.1.2  Key Recovering Using Hints 
Instead  of  broadcasting the  key  update  message  that  has 
length  of  n1  + 722  bits,  legitimate members who  know K 
and either K L  or K R  can also recover the new key K'  from 
a hint that is smaller than the key update message, by  trad- 
ing off computation for communication.  If we assume that 
a member can perform 2"'  computations, we can construct 
a smaller key update that we call a hint. 
Consider first the right-hand members that know K  and 
KR. They  can  derive the right  contribution  CR that  is n 2  
bits long.  If  they  would  also have a checksum, they  could 
brute force the missing n1  bits of K'  from the left side con- 
251 
K'7 
{ L S B ( n 2 - " ' ) ( P R F ~ ~ " Z ) ( K ) ) } K ~  
K," 
and 
I PRF;;"~)(K). 
The hint message is composed of  the key  verification  and 
the partial right contribution: 
vfp = PRF("'"3)(0), 
Recall that  K ' Y   = PRF;,";-'")(3). 
The key  reconstruction 
is  slightly  different for  the  members in  the  left  and  right 
sub tree. Recall that the updated key is 
K' = PRF&:")(K) 
cLR  = PRF$;"~)(K) 
The  members  on  the  left  know  KL, derive  Kf, and 
can  hence  decrypt  part  of  the  right  key's  contribution 
Now  they  know  all but  721 
LSB("""')(PRFZ;7;;'"')(K)). 
bits to compute I?  = PRF("l+"z'") 
ciR = PRF("-'"~)(K) 
CL R 
12 I LSB("Z-"I)  ( P R F & + " ~ ) ( K ) ) ,  
The  members  can  exhaustively  try  all  2"'  possibilities 
for z  and  verify  the  resulting  guess K by  using  the  key 
verification: PRF$7""3)(0)AV~f. If they match, the key is 
a candidate. 
The members  on  the  right  know  K R  and  they  can  com- 
pute 722  bits of CLR, so they only need to exhaustively try 
2"'  combinations for 2: K = PRF"+""") 
(K), where 
CL A 
C i R  = z I  PRFgc"')(K).  They also use the same hint 
information to verify the validity of the key. 
(K), with 
The left-hand contribution is CL = PRFg?"l)(K) 
The right-hand contribution is CR = PRF$cnZ)(K) 
Hence CLR = CL 1  CR 
The new key becomes K' = PRFgz")(K) 
Recall from section 3 that KZ  = PRFEL'")(l) 
Kf = PRFgzn)(2). The purpose of this key derivation is 
to make KZ  and Kf independent. 
To update the key, the server broadcasts 
{PRF&""2)(K)}K;, 
This  key  update  message  has  a  length  of  n1  + 722  bits. 
The  members  who  know  K L  can  derive  KE,  decrypt 
PRF&?"')(K) 
from the key update, and compute K'. The 
same applies to the members who know K R .  