(2) Profiling: During the profiling phase, the Sentinel allows all
network traffic to and from the device and computes packet
signatures for all the network connections to characterize
the device. The connection signatures are used to register the
new device to the blockchain regrouping all the devices with
a similar network footprint. This profiling phase usually re-
quires about 1 minute for most IoT devices tested during our
evaluation (see Section 4.3). If the corresponding blockchain
does not exist (i.e., it is the first device with this network
footprint to be connected to a Sentinel), a new device specific
chain is initialized.
(3) Enforcement: Once the device has been registered to a
blockchain, the Sentinel downloads the blockchain to build
the policy and begins blocking all the packets whose signa-
tures don’t match the policy. The Sentinel also starts report-
ing newly recorded packet signatures to the allow list.
(4) Behavior change / Policy update: If the behavior of the
protected devices changes, the Sentinel will vote to decide
whether these changes need to be incorporated into the pol-
icy based on the majority’s observations. As expected, if the
majority of nodes on a chain are malicious and controlled by
a single attacker, it will be possible to incorporate anomalous
packet signatures into the allow list. We discuss this issue
further in the security evaluation Section 4.5
Figure 6: Multichain support in SERENIoT. Block headers
of device specific blockchains are incorporated into a single
control chain.
defined specification. Network traffic is either permitted or blocked,
with no notion of confidence or likelihood of attack, as is the case
with anomaly-based IDS. Specification-based IDS is also different
from signature-based IDS, where experts define signatures of all
known attacks. SERENIoT seeks to define signatures of known good
behavior and block all other network traffic.
To do so, Sentinels use allow lists to record the packet signatures
characterizing devices’ intended behaviors. When a packet from
an IoT device is recorded by a Sentinel, the Sentinel computes its
signature and verifies whether the signature exists in the allow list
for the device. If the signature is trusted, the packet is forwarded to
its destination. Otherwise the packet is blocked, and the Sentinel
reports the packet signature (i.e., adds it to current block candidate
of the allow list). It will eventually be appended to the allow list
if the majority of Sentinels also report it. This mechanism allows
Sentinels to detect and block anomalous behaviors that are only
observed on a small proportion of monitored devices.
3.6.1 Updating the policy. When a device’s behavior changes, other
Sentinels on the network report whether they also observed the
change. The behavioral change can be the result of a firmware
update or of an attack. To decide if the new behavior is legitimate,
Sentinels rely on the majority’s observation: if the change has been
observed by the majority of Sentinels, it is considered as legitimate
and will be added to the allow list. Otherwise it will be considered as
anomalous and will be blocked. This logic is based on the idea that
if the majority of devices of the same type share the same behavior,
this is their “intended” behavior. Note that intended behavior may
itself be anomalous: for example, in January 2020, Google revoked
Xiaomi’s access to the Google Home Hub ecosystem after users
were able to view the video feeds of strangers’ security cameras [2].
548ACSAC 2020, December 7–11, 2020, Austin, USA
Corentin Thomasset and David Barrera
4 EVALUATION
To ensure correct system behavior, we conducted a small scale
experiment using real IoT devices. We then tested the compati-
bility, scalability and robustness of SERENIoT using larger scale
simulations on Amazon AWS.
4.1 Implementation
The proof of concept of the SERENIoT Sentinel is developed in
node.js10, a cross platform, open source javascript runtime envi-
ronment designed to build event-driven and asynchronous web
applications. We implemented the blockchain component from
scratch, without the use of existing blockchain frameworks. Sen-
tinels communicate with peers using WebRTC11 and websockets12.
We use netfilterqueue13 to intercept, inspect and block network
packets forwarded by the Sentinels. In addition, we developed a
Web UI using the VueJs framework14 to monitor Sentinels in real
time and to manage experimental instances. Screenshots of the Web
UI are presented in Appendix A.1.
4.2 Functional real world experiment
The goal of our experimental set-up (see Figure 8) was to simulate
the network topology of a real IoT network. We installed the Sen-
tinel software on 3 Raspberry Pis (model 3B+) configured as WiFi
hotspots and connected one LIFX Mini Smart bulb to each Sentinel.
The router plays the role of the home gateway.
Figure 8: Physical devices used for our real experimental set-
up.
The goal of the real world experiment was to validate the opera-
tion of SERENIoT by testing it on real IoT devices. Sentinels were
initialized with no prior knowledge of the devices’ behavior and
with empty security policies. During the experiment we interacted
with devices through the manufacturers’ mobile app.
This first experiment validates the concept behind SERENIoT;
The 3 Sentinels were successfully able to record the packets from the
bulbs and to converge on the list of the resulting packet signatures
10https://nodejs.org/
11https://webrtc.org/
12https://developer.mozilla.org/docs/Web/API/WebSockets_API
13netfilterqueue
ac-
around libnetfilter_queue
cess to the packets matched by specific iptables rules. More information:
https://netfilter.org/projects/libnetfilter_queue/
14https://vuejs.org/
a wrapper
is
that gives
shown in Table 1. A security policy was successfully generated. We
also noted during this experiment that there was no perceptible
delay introduced by the Sentinel and we were able to interact in real
time with the bulb through the LIFX mobile app. While we did not
conduct a thorough performance overhead analysis in this exper-
iment, SERENIoT posed no noticeable interference with between
the smart bulbs and our commands.
Recorded packet
UDP time1.google.com R123
TCP 104.198.46.246 R56700
Pkt. Signature
0cca40...aed4d4
4e2b3d...2a4474
Desc.
NTP
LIFX API
Table 1: Packet signatures recorded for the LIFX Smart Bulb
during our experiment. Signatures have been truncated.
4.3 Compatibility and scalability simulation
For testing compatibility and scalability, we set-up a virtualized
testbed with 1000 Sentinels on Amazon AWS. Each Sentinel was
run in a separated Docker container and we used Docker Swarm to
orchestrate our cluster and deploy the Sentinels’ containers on AWS
instances. We used 10 Amazon EC2 c5.2.xlarge instances hosting
each 100 Sentinels and connected through a Docker virtual network.
Each Sentinel was simulating a set of devices from the dataset
of Alrawi et al. [4]. This dataset provides packet captures of an IoT
network with 53 different devices for 9 continuous days. Devices
were simulated by replaying these packets in random order and
at random intervals to imitate the unpredictable aspect of user
interactions (for a example a smart light bulb might be powered
off during a period of time and the user can interact with it at any
time).
4.3.1 Dataset analysis. Based on these captures, we extracted the
devices’ behavior by isolating packets generating unique signatures.
Figure 9 shows the evolution of the number of unique packet signa-
tures for the devices in the dataset. We clearly denote two classes
of IoT devices: devices with a simple behavior characterized by a
small number of packet signatures as LIFX Smart Bulb, TPLink WiFi
plug or Nest Guard and other more complex multipurpose devices
such as iPads, smart TVs, etc. We also observe on Figure 9 that
devices with a simple functionality are characterized by a stable
behavior over time that does not change often. This validates our
initial hypothesis that IoT devices’ typical behavior only contains a
small set of actions which remain constant over time.
Simulations. The goal of the simulations was to validate the
4.3.2
compatibility of SERENIoT with multiple simulated devices and to
validate the scalability of the system on a larger scale experiment. To
do so, we ran multiple simulations for different time periods (from 1
hour to multiple days) and with different number of Sentinels (from
20 to 1000). The Sentinels were initialized with no prior knowledge
of the devices behavior and with empty security policies before
each simulation.
Sentinels were able to converge and produced lists of trusted
packet signatures for simple devices. Sentinels were also able to
identify and block anomalous packets injected in a small number
of Sentinels’ devices’ behavior while keeping the device functional.
549SERENIoT
ACSAC 2020, December 7–11, 2020, Austin, USA
Figure 9: CDF of distinct packet signatures per device recorded over a 9-day period. Labeled lines identify general purpose
devices.
A screenshot showing the identification and rejection of a fork
with anomalous packet signatures can be found in Appendix A.1.
However, they were unable to converge on a security policy for
general purpose devices as iPads, iPhones and Android tablets.
This experiment show that SERENIoT also behave as expected
with a larger set of simulated devices. Sentinels are able to generate
security policies for IoT devices with a simple network footprint and
to identify and block anomalous packets. We have observed during
the simulations that the breaking point where behavior changes
are incorporated in the trusted list of packet signatures usually
happens when 51% of the Sentinels record a same packet signature.
This means that 51% of the Sentinels need to record a same packet
signature to be authoritative on the longest chain and include the
packet signature in the allow list for a given device. Thus, popular
devices are less likely to be attacked as more Sentinels need to be
infected to incorporate malicious packet signatures in the allow list.
However, they also require more time for updates to be deployed
as updates need to reach a greater number of devices before being
trusted.
4.4 Blockchain performance evaluation
This section evaluates the capacity of our system to run over long
periods of time. During our experiments we measured the growth
of the blockchains and monitored the runtime metrics of the Docker
containers running the Sentinels.
Blockchains size. Sentinels store blocks as JSON files. To measure
the blockchain growth we connected to different Sentinels during
a 24-hour experiment and recorded the number of stored blocks as
well as the size of the blocks directory after 1 hour, 5 hours and 24
hours. For this experiment we used 20 simulated Sentinels with one
Belkin Netcam connected. The number of Sentinels in the network
does not influence the blockchain size as the block production rate
is fixed and determined by the consensus algorithm. Sentinels also
delete rejected fork blocks as soon as they converge on a longest
chain.
Table 2 shows that the control chain block size tends to be con-
stant over time. The block size for the control chain is determined
by the number of different IoT devices types protected by the Sen-
tinels. Indeed, each device type has is own device chain and each
device chain is indexed into the control chain. Control chain blocks
list the block headers of the latest produced blocks from the device
chains, containing at maximum the number of device chains, block
headers. Block headers are SHA256 hashes and have a fixed size of
32 bytes. It is thus straightforward to compute the control chain
block size for a given number of IoT devices. Based on our mea-
surements, the control chain with 1 IoT device should be around
511MB after one year running.
1.4MB ∗ 365days = 511MB/year
If we consider 10K different IoT device types protected by our
Sentinels, the control chain should be around 511GB after one year
running.
4384blocks ∗ 10000 ∗ 32B + 1.4MB = 1.4GB/day
1.4GB ∗ 365days = 511GB/year
Table 3 shows that the device chain block size also tends to be
constant. Indeed, most of the blocks in device chains are empty
as blocks list packet signatures of newly observed behaviors. In
the long run, the majority of blocks will thus be empty as new
behaviors are rarely recorded. Based on our measurements, device
chains should be around 474MB after one year running.
1.3MB ∗ 365days = 474MB/year
Sentinels are required to maintain a copy of the control chain.
However, they only need to download and maintain the device
chains corresponding to the device types they protect. Thus, a
Sentinel with 10 different IoT devices would need to maintain a
copy of the control chain and 10 device chains.
Future work will explore a block expiration feature where out-
dated blocks will be deleted. This feature would prevent the blockchains
to grow infinitely while allowing old policies to be updated by
deleting outdated behaviors no longer in use by the majority of the
devices.
550ACSAC 2020, December 7–11, 2020, Austin, USA
Corentin Thomasset and David Barrera
Elaps. Time No. of blocks
1 hour
5 hours
24 hours
205
918
4384
Avg. block size
Size
64KB
312B
291KB 316B
1.4MB 316B
Table 2: Block size measurements for the control chain with
1 IoT device.
Elaps. Time No. of blocks
1 hour
5 hours
24 hours
Table 3: Block size measurements for a device chain.
Avg. block size
Size
59KB
304B
268KB 296B
1.3MB 295B
193
906
4367
Sentinels runtime metrics. To record Sentinels’ metrics, we used
the docker stats command15. We recorded the metrics for 20 simu-
lated Sentinels during a 24 hours experiment after 1 hour, 5 hours
and 24 hours. These metrics show the CPU, memory and network us-
age. We observed that Sentinels use approximately 140MiB of RAM
after running for 24 hours (with an initial usage of 120MiB of RAM)
and that their network usage is correlated with the blockchains
growth. Sentinels only download blocks for the control chain and
for the device chains they are registered to. The network usage
varies between two Sentinels based on the number of different IoT
devices they are protecting. Finally, Sentinels were using a simu-
lated proof of work consensus algorithm to run the experiment.
Their CPU usage is thus not representative of the usage one would
observe if the Sentinels were using real proof of work instead. In
the case of real proof of work we expect CPU usage to be maxed
out at 100% for all Sentinels.
4.5 Security evaluation
When a new IoT device is connected to a Sentinel, the Sentinel de-
termines the corresponding allow list based on the device behavior.
Thus, devices behaving similarly will be grouped on the same allow
list and already compromised devices behaving differently will be
assigned to a separate list.
Uncompromised devices are thereby grouped, and the corre-
sponding allow list will only contain packet signatures reflecting
the behavior of these devices. In this section, we consider the differ-
ent attack vectors that may lead to successful attacks incorporating
malicious packet signatures into an allow list or exploiting devices
to change their behavior.
Attacks against IoT devices during profiling. During the pro-
filing phase (see Section 3.7), Sentinels allow all the traffic and don’t
enforce any network filtering for the newly connected IoT device.
Even if this phase only lasts a few minutes, an attacker could use
this window to perform an attack. In this case, the attack will mod-
ify the network footprint of the device which will likely cause it
to be registered to a different chain than other benign devices of
the same type. This chain will regroup all the devices of this type
that have produced the same network footprint during the profiling
15More information on the Docker
runtime metrics can be found here:
https://docs.docker.com/config/containers/runmetrics/
phase (i.e., all the devices of the same type that have been targeted
by the same attack during the profiling phase) and the Sentinels
will not filter the resulting malicious network connections.
Devices may already be infected when initially connecting to
Sentinels. In this case, if the infected devices’ behavior is similar to
benign devices of the same type, they will be registered to the same