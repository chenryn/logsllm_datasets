    0006    RET0     0   1
    -- BYTECODE -- hello.lua:0-14
    0001    FNEW     0   0      ; hello.lua:2
    0002    GSET     0   1      ; "add"
    0003    FNEW     0   2      ; hello.lua:5
    0004    GSET     0   3      ; "showinfo"
    0005    FNEW     0   4      ; hello.lua:9
    0006    GSET     0   5      ; "showstr"
    0007    KSHORT   0   6
    0008    KSHORT   1   1
    0009    UCLO     0 => 0010
    0010 => RET1     1   2
当然，也可以使用它直接反汇编`Lua`代码生成指令信息，如下所示：
    $ luajit -jbc -e 'local x=0; for i=1,1e6 do x=x+i end; print(x)'
    -- BYTECODE -- (command line):0-1
    0001    KSHORT   0   0
    0002    KSHORT   1   1
    0003    KNUM     2   0      ; 1000000
    0004    KSHORT   3   1
    0005    FORI     1 => 0008
    0006 => ADDVV    0   0   4
    0007    FORL     1 => 0006
    0008 => GGET     1   0      ; "print"
    0009    MOV      2   0
    0010    CALL     1   1   2
    0011    RET0     0   1
如果要查看已经生成的hello.luajit的指令信息，可以使用`Luajit`的-bl参数，执行如下命令，与上面`luajit -jbc`的输出是一样的：
    $ luajit -bl ./hello.lua
bc.lua中提供了`bcline()`反汇编引擎来实现指令的反汇编，它基于`lj_bc_mode`返回的指令`BCMode`来生成`ma`、`mb`与`mc`，但没有经过移位处理，如果没`Luajit`的指令格式不太熟悉，可能不能马上理解它的含义。当然，编写指令解析时，也可以直接本地定义一份指令Opcode与模式之前的表，解析时不需要用到`lj_bc_mode`，并且解析速度更快，反汇编工具`ljd`就是这么干的。下面，我们为`010
Editor`编写反汇编引擎时，由于模板语法的限制，最终选择了结合它们两种的处理方法。
编写基本的Luajit.bt功能之前已经实现，这里主要集中在反汇编引擎`InstructionRead()`的实现上，由于指令中需要用到当前指令地址`pc`以及指令中访问同级常量表中的信息，因此，对Luajit.bt进行了之前Luac.bt一样的重构，将当前`Proto`中所有的指令`Instruction`封装成`Instructions`，然后内联声明到`Proto`中，如下所示：
    typedef struct {
        ProtoHeader header;
        typedef struct(int inst_count) {
            local int pc = 1;
            local int inst_count_ = inst_count;
            while (inst_count_-- > 0) {
                Instruction inst(pc);
                pc++;
            }
        } Instructions;
        if (uleb128_value(header.size) > 0) {
            if (uleb128_value(header.instructions_count) > 0)
                local int inst_count = uleb128_value(header.instructions_count);
                Instructions insts(inst_count);
            if ((header.upvalues_count == 0) && (uleb128_value(header.complex_constants_count) == 0) && (uleb128_value(header.numeric_constants_count) == 0)) {
            } else {
                Constants constants(header.upvalues_count, uleb128_value(header.complex_constants_count), uleb128_value(header.numeric_constants_count));
            }
            if (header.debuginfo_size_ > 0)
                DebugInfo debuginfo(uleb128_value(header.first_line_number), uleb128_value(header.lines_count), uleb128_value(header.instructions_count), header.debuginfo_size_, header.upvalues_count);
            local int64 end = FTell();
            if (uleb128_value(header.size) != end - header.start) {
                Warning("Incorrectly read: from 0x%lx to 0x%lx (0x%lx) instead of 0x%lxn", header.start, end, end - header.start, uleb128_value(header.size));
            }
        }
    } Proto ;
这样做之后，可以通过`parentof(parentof(inst))`访问到指令所在的`Proto`信息，进行获取`Proto`中其他字段的信息。
反汇编引擎的实现分为以下几步：
  1. 获取指令`BCOp`，解析不同的指令。
  2. 解析与处理指令的参数，这里通过`BCMode`来完成。
  3. 字符串与跳转处理。达到更好的反汇编输出效果。
  4. 输出指令`BCOp`与操作数，完成指令反汇编引擎。
### 指令`BCOp`解析
解析指令的`BCOp`很简单，只需要取指令的最低8位即可，获取指令`BCOp`只需要如下一行代码：
    local INSTRUCTION_OPCODES op = (INSTRUCTION_OPCODES)codeword & 0xff;
这里的`INSTRUCTION_OPCODES`为声先声明好的指令枚举类型。获取指令`BCOp`后，需要处理指令的参数。`010
Editor`模板不支持定义的本地数组结构直接赋值，因此，只能声明一个数组后，一行行的赋值，比较尴尬，代码片断如下：
    local uint16 modes[93];
    void init_modes() {
        modes[0] = 0x3183;
        modes[1] = 0x3183;
        modes[2] = 0x3983;
        ......
        modes[91] = 0xb004;
        modes[92] = 0xb004;
    }
`init_modes()`需要在模板最外层，`Luajit lj;`声明前调用一次。然后在代码中就可以访问每一条指令对应的Mode了，编写代码如下：
    uint16 get_mode(INSTRUCTION_OPCODES op) {
        return modes[op];
    }
    BCMode get_mode_a(INSTRUCTION_OPCODES op) {
        return get_mode(op) & 7;
    }
    BCMode get_mode_b(INSTRUCTION_OPCODES op) {
        return (get_mode(op) >> 3) & 15;
    }
    BCMode get_mode_c(INSTRUCTION_OPCODES op) {
        return (get_mode(op) >> 7) & 15;
    }
###  参数处理
参数的处理不难，根据前面分析的规则，通过`ma`、`mb`、`mc`的值即可完成。首先，需要判断参数的个数是否为3个，然后，通过它来确定是`ABC`还是`AD`模式，代码如下：
    int get_args_count(INSTRUCTION_OPCODES op) {
        local int count = 0;
        local BCMode ma = get_mode_a(op);
        local BCMode mb = get_mode_b(op);
        local BCMode mc = get_mode_c(op);
        if (ma != BCMnone)
            count++;
        if (mb != BCMnone)
            count++;
        if (mc != BCMnone)
            count++;
        return count;
    }
获取参数个数后，就可以设置`A`、`B`、`CD`的值了。代码片断如下：
    local int args_count = get_args_count(op);
    local int A=0, B=0, CD=0;
    if (args_count == 3) {
        A = (codeword >> 8) & 0xFF;
        CD = (codeword >> 16) & 0xFF;
        B = (codeword >> 24) & 0xFF;
    } else {
        A = (codeword >> 8) & 0xFF;
        CD = (codeword >> 16) & 0xFFFF;
    }
###  字符串与跳转处理
获取了`A`、`B`、`CD`的值后，并不能直接输出反汇编，因为，针对不同类型的指令操作数，它的取值可能需要进行处理。例如对于`BCMstr`、`BCMtab`、`BCMfunc`、`BCMcdata`类型的操作数，它表示的是一个`ComplexConstant`的索引值，需要到指令所在的`Proto`的`ComplexConstant`中取数据，而且取数据的索引值与需要从`ComplexConstant`表相反的方向进行获取，即如下的代码所示：
    local int idx = complex_constants_count - operand - 1;
还有，针对`BCMjump`类型的操作数，它跳转的地址计算方法是当前操作数的值加上当前指令`pc`减去0xFFFF。
终上所述，可以写出指令操作数处理函数`process_operand()`，代码如下：
    string process_operand(Instruction &inst, int complex_constants_count, BCMode operand_type, int operand, int pc) {
        local string str;
        if ((operand_type == BCMstr) || 
                (operand_type == BCMtab) || 
                (operand_type == BCMfunc) || 
                (operand_type == BCMcdata)) {
            local int idx = complex_constants_count - operand - 1;
            SPrintf(str, "%d  ;  %s", idx, get_data_from_constants(inst, idx));
        } else if (operand_type == BCMjump) {
            SPrintf(str, "==> %04d", operand + pc - 0x7FFF);
        } else {
            SPrintf(str, "%d", operand);
        }
            return str;
    }
`get_data_from_constants()`的代码如下：
    string get_data_from_constants(Instruction &inst, int idx) {
        local string str = ComplexConstantRead(parentof(parentof(inst)).constants.constant[idx]);
        if (str == "BCDUMP_KGC_CHILD")
            return "0";
        else
            return str;
    }
`complex_constants_count`与`inst`一起作为参数传递，而不是在`process_operand()`中计算获取，是因为该方法会被多次调用，这样做可以提高代码执行效率。
###  完成指令反汇编引擎
最终，完成指令的反汇编引擎代码如下：
    string InstructionRead(Instruction &inst) {
        local uint32 codeword = inst.inst;
        local INSTRUCTION_OPCODES op = (INSTRUCTION_OPCODES)codeword & 0xff;
        local uint16 mode = get_mode(op);
        local BCMode ma = get_mode_a(op);
        local BCMode mb = get_mode_b(op);
        local BCMode mc = get_mode_c(op);
        local int args_count = get_args_count(op);
        local int A=0, B=0, CD=0;
        if (args_count == 3) {
            A = (codeword >> 8) & 0xFF;
            CD = (codeword >> 16) & 0xFF;
            B = (codeword >> 24) & 0xFF;
        } else {
            A = (codeword >> 8) & 0xFF;
            CD = (codeword >> 16) & 0xFFFF;
        }
        local int complex_constants_count = uleb128_value(parentof(parentof(inst)).header.complex_constants_count);
        local string tmp;
        SPrintf(tmp, "%04d    ", inst.pc_);
        local string line = tmp + EnumToString(op);
        if (ma != BCMnone) {
            SPrintf(tmp, "%s", process_operand(inst, complex_constants_count, ma, A, inst.pc_));
            line += " " + tmp;
        }
        if (mb != BCMnone) {
            SPrintf(tmp, "%s", process_operand(inst, complex_constants_count, mb, B, inst.pc_));
            line += " " + tmp;
        }
        if (mc != BCMnone) {
            SPrintf(tmp, "%s", process_operand(inst, complex_constants_count, mc, CD, inst.pc_));
            line += " " + tmp;
        }
        return line;
    }
使用`010 Editor`打开hello.luajit，并加载编写好的模板，效果如图所示：  
完整的luajit.bt文件可以在这里找到：。