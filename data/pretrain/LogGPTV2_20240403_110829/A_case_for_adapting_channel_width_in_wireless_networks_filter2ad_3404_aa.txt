title:A case for adapting channel width in wireless networks
author:Ranveer Chandra and
Ratul Mahajan and
Thomas Moscibroda and
Ramya Raghavendra and
Paramvir Bahl
A Case for Adapting Channel Width in Wireless Networks
Ranveer Chandra, Ratul Mahajan, Thomas Moscibroda, Ramya Raghavendra†, Paramvir Bahl
Microsoft Research, Redmond, WA
{ranveer,ratul,moscitho,bahl}@microsoft.com
†University of California Santa Barbara, CA
PI:EMAIL
ABSTRACT
We study a fundamental yet under-explored facet in wireless communica-
tion – the width of the spectrum over which transmitters spread their signals,
or the channel width. Through detailed measurements in controlled and live
environments, and using only commodity 802.11 hardware, we ﬁrst quan-
tify the impact of channel width on throughput, range, and power consump-
tion. Taken together, our ﬁndings make a strong case for wireless systems
that adapt channel width. Such adaptation brings unique beneﬁts. For in-
stance, when the throughput required is low, moving to a narrower channel
increases range and reduces power consumption; in ﬁxed-width systems,
these two quantities are always in conﬂict.
We then present SampleWidth, a channel width adaptation algorithm for
the base case of two communicating nodes. This algorithm is based on a
simple search process that builds on top of existing techniques for adapting
modulation. Per speciﬁed policy, it can maximize throughput or minimize
power consumption. Evaluation using a prototype implementation shows
that SampleWidth correctly identities the optimal width under a range of
scenarios.
In our experiments with mobility, it increases throughput by
more than 60% compared to the best ﬁxed-width conﬁguration.
Categories and Subject Descriptors:
C.2.1 [Computer-Communication Network]: Wireless
General Terms: Measurement, Performance
Keywords: Channel width, spectrum, Wi-Fi
1.
INTRODUCTION
Most wireless communication today involves the use of chan-
nels with preset widths. A wireless channel is the frequency spec-
trum block over which nodes transmit; it is uniquely speciﬁed by
its center frequency and width. The use of preset channel widths
is a direct result of how the available spectrum is divided by ex-
isting wireless technologies. For example, in 802.11 (Wi-Fi) b/g,
the spectrum block is divided into 11 overlapping channels that are
20 MHz each and are separated by 5 MHz. Wi-Fi nodes commu-
nicate over one of these channels. In some cases, such as WiMax,
the spectrum block is divided into channels of different widths. But
even there the channel width is statically assigned.
In this paper, we argue that nodes in Wi-Fi networks should
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’08, August 17–22, 2008, Seattle, Washington, USA.
Copyright 2008 ACM 978-1-60558-175-0/08/08 ...$5.00.
adapt the width of the communication channel based on their cur-
rent needs and environmental conditions. To our knowledge, such
adaptation has not been proposed or explored before. We ﬁnd it sur-
prising that Wi-Fi nodes dynamically change many variables today
to improve communication, such as center frequency, transmission
power, and modulation, except one of the most fundamental vari-
able — the channel width.
We make our case in three steps. First, using measurements from
controlled and live environments, we study properties of different
channel widths. We use commodity Wi-Fi hardware manufactured
by Atheros and make software modiﬁcations that lets these NICs
to communicate at 5, 10, and 40 MHz channels in addition to the
standard 20 MHz. We ﬁnd that different widths perform differ-
ently on many measures of interest. Narrower channels have lower
throughput but they have longer range, are more resilient to multi-
path delay spread, and consume less power. While these properties
are broadly expected based on how our NICs implement different
widths, our measurement study provides a detailed and systematic
quantiﬁcation. Actual and expected behaviors can differ quite a bit
for commodity wireless hardware [5].
In the second step, based on our ﬁndings, we identify several
unique beneﬁts of dynamically changing channel width that are
otherwise not available today. For instance, in times of low through-
put requirement, nodes can simultaneously increase range and re-
duce power; in ﬁxed-width systems, these two highly desirable
properties are perennially in conﬂict. Another example is that to-
tal network capacity may be increased without increasing spectrum
usage, by splitting multiple ﬂows that share a wide channel into
narrower channels. Yet another example is that nodes can substan-
tially improve throughput by adapting channel width, because dif-
ferent widths offer the best throughput in different conditions.
Realizing these beneﬁts requires practical channel width adapta-
tion algorithms; in the third and ﬁnal step, we show that this task
is feasible at least in certain settings. We design a channel width
adaptation algorithm, called SampleWidth, for the base case of two
communicating nodes. It enables the nodes to adapt to optimize
the throughput or power consumption of their communication. For
efﬁcient search and sampling, SampleWidth builds on top of exist-
ing techniques for adapting modulation. We present analysis and
empirical evidence that its search converges to the optimal width.
We have prototyped SampleWidth on top of the same Atheros
Wi-Fi NICs. Our experiments show that SampleWidth’s simple
adaptation scheme correctly approximates the optimal width in a
range of distances between the sender and receiver. Even after in-
cluding all sampling and channel switching related overheads, it
stays within 10% of the optimal. In our mobile experiment, Sam-
pleWidth improves throughput by more than 60% compared to the
best ﬁxed-width system.
Symbol Duration
SIFS
Slot Duration
Guard Interval
5 MHz
16 μs
40 μs
20 μs
3.2 μs
10 MHz
20 MHz
40 MHz
8 μs
20 μs
20 μs
1.6 μs
4 μs
10 μs
20 μs
0.8 μs
2 μs
5 μs
20 μs
0.4 μs
Table 1: A few 802.11 timing parameters across channel
widths.
40 MHz is 3.2 μs at 5 MHz. We list a few important parameters
that have different values at different channel widths in Table 1.
We note that only timing parameters are affected. Therefore, irre-
spective of channel width, modulation 24 OFDM coding (24 Mbps
at 20 MHz using 16-QAM, 1/2 rate encoder) carries the same 96
data bits per symbol. However, since symbol lengths are different
across channel widths, modulation 24 coding scheme gives 6 Mbps
at 5 MHz, 12 Mbps at 10 MHz, 24 Mbps at 20 MHz, and 48 Mbps
at 40 MHz.
2.2 Implementation Details
All our changes are limited to the device driver software. The
most important of these changes are as follows. We added a sepa-
rate rate table with different rates supported by each channel width.
The rate table is loaded by the driver when the channel width is
changed. To ensure fair contention among ﬂows on various chan-
nel widths, we modiﬁed the 802.11 slot time to be the same (20 μs)
across all channel widths. The computation for packet durations
were adjusted accordingly for different widths. For interoperabil-
ity with 802.11b stations, 802.11g uses 4 802.11b DSSS rates (1,
2, 5.5 and 11), and 6 OFDM rates (12 to 54 Mbps), and uses a
44 MHz clock frequency. To isolate the impact of channel width,
we modiﬁed the driver to use only OFDM rates (6 to 54 Mbps) in
802.11g mode. Also, for ease of exposition, we modiﬁed the clock
frequency to 40 MHz so that channel widths scaled in multiples of
2. Finally, we added support to dynamically change the channel
width without breaking 802.11 associations.
Figure 1 shows a spectrum analyzer screenshot on which differ-
ent widths have been overlaid. It can be seen that while the center
frequency for all widths during this measurement was 2412 MHz
(corresponding to Channel 1 of IEEE 802.11 b/g), the channel width
changes.
3.
IMPACT OF CHANNEL WIDTH
In this section, we characterize the impact of channel widths on
three of the key metrics of wireless communication: ﬂow through-
put, packet reception range, and power consumption. In all cases,
we explain the underlying reason for the observed behavior and
how it differs from what may be expected. The ﬁndings of this
section form the basis of our arguments for dynamic adaptation of
channel width.
Setup: For our experiments, we use two kinds of Atheros cards:
i) Netgear WAG 511 (Atheros chipsets 5211 and 5212) which have
a PCMCIA form factor for insertion into laptops; and ii) Netgear
EnGenius’ EMP-8602 modules, which are based on the Atheros
5213 chipset. These cards have a PCI form factor for insertion into
desktops.
We performed experiments in a controlled emulator setup and in
an indoor ofﬁce environment. 2 We used CMU’s wireless channel
emulator [9], which has two laptops connected through an FPGA.
The FPGA implements the digital signal processing (DSP) routines
2We also validated our results using an RF attenuator and outdoor
experiments, but do not present results in this paper.
Figure 1: Screenshot of the spectrum analyzer showing 20MHz,
10MHz and 5MHz signals.
2. CHANGING CHANNEL WIDTH
We use the following terminology throughout this paper:
Channel width: The width of the spectrum over which the radio
transmits (and receives) its signals; speciﬁed in MHz.
Throughput: Number of data bytes transmitted per second, in-
cluding MAC-layer headers; speciﬁed in Mbps. We avoid the term
bandwidth in this paper, as this term is frequently used to refer to
both channel width and throughput.
Modulation: The speciﬁc modulation used by the radio while
transmitting. We restrict our analysis to 802.11-based OFDM mod-
ulations that give data rates of 6, 9, 12, 18, 24, 36, 48 and 54 Mbps
when the channel width is 20 MHz.
2.1 Methodology
In this section, we describe the details of how we achieved dif-
ferent channel widths. The channel width of a wireless card is
determined by the frequency synthesizer in the Radio Frequency
(RF) front end circuitry. In most wireless systems, the frequency
synthesizer is implemented using a Phase Locked Loop (PLL). A
frequency divider on the PLL feedback path determines the center
frequency of the card, and the reference clock frequency used by
the PLL determines the channel width. Beyond this very high level
description, we refer to [14] for details on the RF front end design
of a wireless card.
We varied the channel width by changing the frequency of the
reference clock that drives the PLL. We implemented this technique
on off-the-shelf Atheros-based NICs. These cards use a clock fre-
quency of 20 MHz to generate a 20 MHz wide signal. The value
of the clock frequency can be conﬁgured in multiples of 2 using a
hardware register. We changed the register values to generate sig-
nals on four channel widths of 5, 10, 20, and 40 MHz.1
We note that most Wi-Fi chipset designs, including Atheros, use
a common reference clock for the RF transceiver and the base-
band/MAC processor [4, 13, 19]. The baseband/MAC processor
uses the reference clock to control access to the wireless network by
regulating timing, encryption, encoding/decoding, and data trans-
mission. Therefore, slowing or increasing the clock rate affects
802.11 timing parameters. For example, a 4 μs OFDM symbol in
20 MHz channel width gives symbols of length 2 μs in 40 MHz,
and 16 μs in 5 MHz. Similarly, a 400 ns OFDM guard interval at
1Our 40 MHz channel width implementation is different from
Atheros Turbo/SuperG mode. See Section 8 for a detailed discus-
sion.
data is divided into a series of symbols, each encoding a number
of bits. At modulation-R, 4 · R data bits are encoded per symbol.
The transmission time for each symbol is tsymb = 4 μs, and the
data symbols are wrapped by a 20 μs preamble (synchronization
and PLCP header) and a 6 μs signal extension.
To extend this model to adaptive channel width, we need to pro-
portionally scale some of these timings with the width. Let B
and R be the channel width and modulation, respectively, and let
B = 20M Hz/B be a scaling ratio. With the exception of the slot-
time tslot, all aforementioned timing parameters are scaled by the
factor B. Moreover, we discovered empirically (by varying tslot
and minimum contention window, CWmin) that the Atheros cards
wait for an additional time of tCW = tslot·CWmin/2 = 8tslot per
packet. Therefore, putting all together, for a packet size of s bits,
the time required for one single packet transaction is therefore
Figure 2: Impact of channel width on peak throughput of a
UDP ﬂow when packets are sent with different modulations.
t = tCW + tDIF S + tdata + tSIF S + tack
= 8tslot + (2tslot + B · tSIF S)
+B · (20 + tsymb(cid:2)sdata/(4R)(cid:3) + 6)
+B · tSIF S + B · (20 + tsymb(cid:2)sack/(4Rack)(cid:3) + 6)
Figure 3: Actual throughput and model predictions for UDP
trafﬁc at different modulations for 5 and 40 MHz channels.
that model signal propagation effects, such as small scale fading
and signal attenuation.
3.1 Peak Throughput
We start by understanding the impact of channel width on peak
throughput of the communication. We measure peak throughput
using the emulator to minimize the impact of external interference.
In these experiments the signal is attenuated by only 20 dB. In other
words, the receiver gets packets with good signal strength.
Figure 2 shows the throughput obtained by a UDP ﬂow when
using different channel widths and modulations. As expected, the
throughput increases as the channel width or the modulation rate is
increased.
According to Shannon’s capacity formula the theoretical capac-
ity of a communication channel is proportional to the channel width.
Our measurements on commodity Atheros cards follow this rela-
tionship approximately but not exactly. The increase in throughput
from doubling the channel width is less than a factor of two. For in-
stance, at modulation 24, for 5 and 10 MHz the throughput is 4.04
and 7.65 respectively, which represents a factor of 1.89.
This less-than-doubling behavior is due to overheads in the 802.11