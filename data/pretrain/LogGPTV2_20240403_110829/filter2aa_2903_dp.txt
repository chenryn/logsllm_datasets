就会缺少调用这个函数的记录。因此，禁止编译器对函数做FPO优化有
利于调试。在代码中通过编译器指令（directive）可以禁止使用FPO。
举例来说，如果在源程序文件中加入#pragma optimize( "y", off )，那么
这个指令后的函数就不会被FPO优化，直到再开启FPO为止。Windows
Vista的大多数模块都不再使用FPO。
迄今为止，还没有非常方便而且开销低的方法来实现数据的可追溯
性。因为要给变量赋一个新的值，便会覆盖掉它以前的值。要想记住旧
的值，必须先保存起来，这必然需要额外的时间和空间开销。以下是几
种可能的解决方案。
第一，通过日志（log）的方式将变量的每个值以文件或其他方式
记录下来。
第二，如果允许使用数据库，那么可以利用数据库本身的功能或编
写脚本记录一个字段每次的取值。
第三，编写专门的类，为要追溯的数据定义用于记录其历史取值的
环形缓冲区，重载赋值运算符。当每次赋值时，先将当前值保存在缓冲
区中。
第16章将进一步讨论实现可追溯性的方法，并给出一些演示性的代
码。
15.3.5 可控制原则
简言之，可控制原则是指通过简单的方式就可以控制程序的执行轨
迹。
软件功能的可控性（controllability）和灵活性（flexibility）是软件
智能的重要体现，对于软件调试也有重要意义。就调试而言，可控性意
味着调试人员可以轻易地调整软件的执行路线，使其沿着需要跟踪和分
析的路线执行。很多时候，测试人员报告软件错误时会给出重现这个问
题的一系列步骤。为了发现问题的根源，调试时通常也需要沿着这些步
骤来进行跟踪和分析。但在很多情况下，调试环境与用户环境可能有较
大的差异。比如某个问题只发生在1GB内存的情况下，而调试环境为
2GB内存。这时一种方法是更换内存或寻找1GB内存的系统，但如果被
调试的系统（操作系统）支持通过配置选项来指定只使用1GB的内存，
就方便得多。Windows操作系统中启动配置文件中的/MAXMEM选项恰
好提供了这样的功能。
与可控制原则有关的一个原则是可重复原则。
15.3.6 可重复原则
简言之，可重复原则是指使程序的行为可以简单地重复。
这一原则的初衷是可以比较简单地重复执行程序的某个部分或整
体。因为在调试过程中，很多时候我们要反复跟踪和观察某段代码才能
发现其中的问题。如果每次重新执行都需要大量烦琐的操作，那么必然
会影响调试的效率。举例来说，如果要重新执行某个函数，就需要重新
启动一次计算机，或者要复位很多其他关联的程序，那么这就是有悖于
可重复（repeatable）原则的。
对于某些与硬件协同工作的软件，重复某个操作的成本可能很高。
以用于医疗等用途的图像采集和分析软件为例，让硬件反复拍摄照片是
有较大开销的。这时，可以考虑使用模拟程序来伪装硬件，这样程序员
在调试时就不必担心反复运行的次数。当然，模拟器并不能完全代替真
实的硬件，在模拟器上运行没有问题后还是应该测试与真实硬件一起工
作的情况。
可重复原则的一个隐含要求是每次重复执行时，程序的执行行为应
该是有规律的。这个规律越简单就越有利于调试，如果这个规律比较复
杂，那么它应该是调试人员所能理解并可控制的。举例来说，某些软件
会记录是否是第一次运行。如果是，就做很多初始化操作；如果不是，
便跳过初始化过程。依据本原则，调试人员应该总是可以通过简单的操
作就模拟第一次执行的情况，以便反复跟踪这种情况。如果执行过一
次，一定要重新安装这个软件（甚至整个系统）才能再次跟踪初始化过
程，那么就会影响调试的效率。
15.3.7 可观察原则
简言之，可观察原则是指使软件的特征和内部状态可以方便地观
察。
这一原则的目的是提高软件的可观察性（observability），让调试
人员可以方便地观察到程序的静态特征和动态特征。静态特征包括文件
（映像文件、源文件、符号文件和配置文件等）信息、函数信息等。动
态特征是指处于运行状态的软件在某一时刻的属性，包括程序的执行位
置、变量取值、内存和资源使用情况等。
可观察性的好与坏通常是相对的，根据达到观察目的所需要的“成
本”，可以初步分成如下一些级别。
不需要任何额外工具，通过软件自身提供的功能就可以观察到。
借助软件运行环境中的通用工具可以观察到，比如操作系统的文件
浏览工具和文件显示工具。
借助通用的调试器和其他通用工具可以观察到。
购买和安装专门的软硬件工具才可以观察到。
只有安装被调试软件的特殊版本才可以观察到。
以上几点基本上是按可观察性从高到低的顺序来编排的。高可观察
性有利于发现系统的状态和可能存在的问题，便于调试。尤其是当软件
故障发生时的动态特征对于调试特别有意义。但是以所有用户都可以访
问的方式来显示过多的内部信息可能存在泄露技术和商业秘密等风险。
因此，比较好的做法是根据用户的身份来决定哪些信息对其是可见的。
15.3.8 易辨识原则
简言之，易辨识原则是指可以简单地辨识出每个模块乃至类或函数
的版本。
版本错误是滋扰软件团队的一个古老话题，某些时候，花了很大工
夫得出的唯一结论就是使用的版本不对。为了防止这样令人哭笑不得的
事情发生，设计和编码时就应该重视版本问题，提高每个软件模块的可
辨识性（identifiability）。比如，有固定的版本记录机制，并及时更新
其中的版本信息，通过一种简单的方式就可以访问到这个信息等。
15.3.9 低海森伯效应原则
简言之，低海森伯效应原则是指在提高可调试性时应该尽可能减小
副作用，使海森伯效应最低。
海森伯效应（Heisenberg Effect）来源于德国著名物理学家沃纳·海
森伯（Werner Heisenberg）的不确定原理（Uncertainty Principle）。这
个原理指出不可能同时精确地测量出粒子的动量和位置，因为测量仪器
会对被测量对象产生干扰，测量其动量就会改变其位置，反之亦然。不
确定原理也称为测不准原理，即测量的过程会影响被测试的对象。换句
话说，因为海森伯效应的存在，测量的过程会影响被测量对象从而使测
量结果不准确。
在计算机领域，人们把调试时可以稳定复现的错误称为波尔错误
（Bohr Bug），把无法复现或调试时行为发生改变的错误称为海森伯错
误（Heisen berg Bug）。因为在调试环境下无法稳定重现，所以调试海
森伯错误通常更加难以解决。
为了降低调试设施对被调试软件所造成的影响，设计调试设施的一
个根本原则就是使海森伯效应最低。换句话说，就是要使调试设施对被
调试对象的影响尽可能小，或者说二者的关系最好是互不影响，互不干
涉。但是为了实现调试设施，调试设施又必须与被调试程序建立起比较
密切的联系。也就是说，强大的调试功能要求调试设施可以便捷地访问
被调试程序，有时还要求对被调试程序有较高的可控性，这意味着二者
要建立密切的关系。而海森伯效用又要求调试设施和被调试对象的关系
不能太紧密。看来这两者之间存在着一定的矛盾，如何平衡这个矛盾是
设计调试设施时要考虑的一个关键问题。
 老雷评点 
低海森伯效应原则为本书第2版新增的，写于西湖孤山之西
泠印社。
本节介绍了提高软件可调试性的一些基本原则，这些原则从不同的
角度来降低软件调试的复杂度。但需要声明的是，这些原则并不是用之
四海皆准的灵丹妙药，应该根据具体项目的特征和需求制定具体的方
案。
15.4 不可调试代码
我们把调试器无法跟踪或无法对其设置断点的代码称为不可调试代
码。当然，这种不可调试性是相对于调试器而言的。比如使用软件调试
器不可调试的代码可能可以被硬件调试器调试。考虑到软件调试器是最
常用的调试工具，所以本节将先介绍几种不可被软件调试器（例如
WinDBG）调试的典型实例，然后讨论如何降低它们对调试的影响。
15.4.1 系统的异常分发函数
通常，操作系统的异常分发函数是不可以调试的，如果对其强行设
置断点或单步跟踪，那么通常会因为递归而导致被调试系统崩溃。举例
来说，当进行内核调试时，如果对Windows内核的KiDispatchException
函数设置断点，那么一旦该断点被触发，被调试系统就会自动重启。这
是因为断点事件本身也会被当作异常来分发，而当分发过程执行到
KiDispatchException函数时会再次触发断点异常，这样的死循环很快就
导致CPU复位了。
因为硬件中断需要及时确认（acknowledge），所以通常最好也不
要在中断处理例程的入口处设置断点，以防止系统无法及时确认中断，
而导致硬件反复发送中断请求，即所谓的中断风暴（interrupt storm）。
15.4.2 提供调试功能的系统函数
提供调试功能的很多系统函数是不可以调试的，因为如果这些函数
中的断点被触发后很可能会导致死循环。比如在内核调试中，对于负责
与调试器通信的nt!KdSendPacket和nt!KdReceive Packet函数，都不可以
设置断点和单步跟踪，因为发送断点事件会再次触发断点。
类似地，某些注册在调试事件循环中的函数也是不可以调试的。在
这些函数中使用与调试有关的API也需要慎重，以防止导致递归调用。
举例来说，在向量化异常处理程序（VEH）中不可以一开始就调用
OutputDebugString函数。本书后续分卷介绍OutputDebugString函数的工
作原理，简单来说，它是靠RaiseException来产生一个特殊的异常而工
作的。因此，如果在VEH中没采取任何措施就调用OutputDebugString函
数，那么OutputDebugString函数产生的异常会触发VEH再次被调用，如
此循环不断，直到栈溢出而程序崩溃。因为系统是在寻找基于帧的异常
处理器之前调用VEH的，所以应用程序错误对话框也不会弹出来，从表
面上看程序只是突然消失掉。
解决这个问题的办法是在VEH中将OutputDebugString函数所产生的
异常排除掉，然后调用OutputDebugString函数就没有问题了。
LONG WINAPI MyVectoredHandler( struct _EXCEPTION_POINTERS *ExceptionInfo )
{
    // 这里调用OutputDebugString会导致死循环
    if(ExceptionInfo->ExceptionRecord->ExceptionCode==0x40010006L)
        return EXCEPTION_CONTINUE_SEARCH;
    // 现在可以调用OutputDebugString了
    OutputDebugString(_T(“MyVectoredHandler is invoked”));
    // …
}
这个问题是作者在一个实际软件项目中遇到的，在产品即将发布的
最后阶段，项目中的一个主要程序突然出现问题，运行一段时间后进程
悄无声息地消失，没有错误窗口，没有征兆，经历了近一个小时的追查
后终于发现是VEH中新加入的OutputDebugString调用引起的，增加上面
代码中的判断语句后问题就解决了。
15.4.3 对调试器敏感的函数
某些函数会检测当前是否在调试，如果不在调试过程中，会执行一
种路线，如果在调试过程中，会执行另一种路线。这样一来，前一种路
线便成为不可调试代码。比如位于NTDLL中的UnhandledExceptionFilter
函数，如果当前程序不在调试过程中，它会启动WER机制报告应用程
序错误；如果当前程序在调试过程中，那么它会简单地返回
EXCEPTION_CONTINUE_SEARCH，引发第二轮异常分发和处理。这
样一来，启动WER并报告应用程序错误的代码就变得不可调试。当
然，不可调试永远是相对的，可以使用特别的方法来调试产生错误对话
框的过程（详见本书后续分卷）。
15.4.4 反跟踪和调试的程序
出于各种考虑，某些程序会故意阻止被跟踪或调试。当检测到被调
试时，它们会通过进入死循环等方式抵抗跟踪；清除断点寄存器破坏断
点工作；插入所谓的花指令干扰反汇编程序进行反汇编等。被这些逻辑
所保护和遮挡的代码是难以调试的。
15.4.5 时间敏感的代码
当软件在调试器中运行时，它的运行速度通常会变慢，如果进行单
步跟踪和交互式调试，那么被调试软件可能长时间停留在一个位置。为
了支持调试，应该尽可能地避免编写时间敏感的代码，保证软件在被调
试时仍以原来的逻辑运行。
15.4.6 应对措施
不可调试代码的存在会为调试增添难度。这没有通用的方法来解
决，以下是可能的一些方案。
第一，使用不同的调试器，特别是硬件调试器，比如第7章介绍的
ITP/XDP调试器。
第二，动态修改调试器是否存在的检测结果（寄存器），调试
UnhandledExceptionFilter函数的方法就是这样做的。
第三，修改程序指针寄存器（EIP）强制跳转到要调试的程序路
径。比如在WinDBG中使用r命令就可以修改EIP寄存器的值。不过这样
做有较大的风险，容易破坏栈平衡，使程序异常终止。
第四，使用调试器的汇编功能动态修改阻碍调试的代码。举例来
说，如果被调试的路径上有一条断点指令（INT 3）防止我们向前跟
踪，那么可以使用WinDBG的a命令将其替换为nop指令。操作步骤是执
行a ，然后在WinDBG的交互式编辑提示框中输入nop，按Enter
键后WinDBG便把nop指令编译到指定的地址，然后直接按Enter键结束
编辑。
15.5 可调试性例析