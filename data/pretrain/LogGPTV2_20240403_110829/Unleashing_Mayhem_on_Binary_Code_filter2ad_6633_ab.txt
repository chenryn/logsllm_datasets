executors and the CEC checkpoints/restores the provided
execution state and continues execution. To do so, the CEC
maintains a virtualization layer to handle the program inter-
action with the underlying system and checkpoint/restore
between multiple program execution states (§IV-C).
7) When MAYHEM detects a tainted jump instruction, it
builds an exploitability formula, and queries an SMT
solver to see if it is satisﬁable. A satisfying input will
be, by construction, an exploit. If no exploit is found on
the tainted branch instruction, the SES keeps exploring
execution paths.
8) The above steps are performed at each branch until an
exploitable bug is found, MAYHEM hits a user-speciﬁed
maximum runtime, or all paths are exhausted.
III. BACKGROUND
Binary Representation in our language. Basic symbolic
execution is performed on assembly instructions as they
execute. In the overall system the stream comes from the CEC
383
as explained earlier; here we assume they are simply given
to us. We leverage BAP [15], an open-source binary analysis
framework to convert x86 assembly to an intermediate
language suitable for symbolic execution. For each instruction
executed, the symbolic executor jits the instruction to the
BAP IL. The SES performs symbolic execution directly on
the IL, introduces additional constraints related to speciﬁc
attack payloads, and sends the formula to an SMT solver to
check satisﬁability. For example, the IL for a ret instruction
consists of two statements: one that loads an address from
memory, and one that jumps to that address.
Symbolic Execution on the IL. In concrete execution, the
program is given a concrete value as input, it executes
statements to produce new values, and terminates with ﬁnal
values. In symbolic execution we do not restrict execution to a
single value, but instead provide a symbolic input variable that
represents the set of all possible input values. The symbolic
execution engine evaluates expressions for each statement
in terms of the original symbolic inputs. When symbolic
execution hits a branch, it considers two possible worlds:
one where the true branch target is followed and one where
the false branch target is followed. It does so by forking off
an interpreter for each branch and asserting in the generated
formula that the branch guard must be satisﬁed. The ﬁnal
formula encapsulates all branch conditions that must be met
to execute the given path, thus is called the path formula or
path predicate.
In MAYHEM, each IL statement type has a corresponding
symbolic execution rule. Assertions in the IL are immediately
appended to the formula. Conditional jump statements create
two formulas: one where the branch guard is asserted true
and the true branch is followed, and one which asserts the
negation of the guard and the false branch is followed. For
example, if we already have formula f and execute cjmp
e1, e2, e3 where e1 is the branch guard and e2 and e3
are jump targets, then we create the two formulas:
f ∧ e1 ∧ F SE(pathe2 )
f ∧ ¬e1 ∧ F SE(pathe3 )
where F SE stands for forward symbolic execution of the
jump target. Due to space, we give the exact semantics in a
companion paper [15], [24].
IV. HYBRID SYMBOLIC EXECUTION
MAYHEM is a hybrid symbolic execution system. Instead
of running in pure online or ofﬂine execution mode, MAY-
HEM can alternate between modes. In this section we present
the motivation and mechanics of hybrid execution.
A. Previous Symbolic Execution Systems
Ofﬂine symbolic execution—as found in systems such as
SAGE [13] —requires two inputs: the target program and an
initial seed input. In the ﬁrst step, ofﬂine systems concretely
execute the program on the seed input and record a trace. In
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:45 UTC from IEEE Xplore.  Restrictions apply. 
Ofﬂine
1
millions of 
instructions
Online
millions of 
instructions
2
3
4
1
2
3
4
Hybrid
1
millions of 
instructions
2
3
4
Figure 3: Hybrid execution tries to combine the speed of
online execution and the memory use of ofﬂine execution to
efﬁciently explore the input space.
)
.
c
e
s
/
m
u
n
(
t
u
p
h
g
u
o
r
h
t
.
n
e
g
e
s
a
c
t
s
e
T
 1.4
 1.2
 1
 0.8
 0.6
 0.4
 0.2
 0
5.0 x 105
1.0 x 106
1.5 x 106
2.0 x 106
Memory Use (KBytes)
2.5 x 106
3.0 x 106
Figure 4: Online execution throughput versus memory use.
the second step, they symbolically execute the instructions in
the recorded trace. This approach is called concolic execution,
a juxtaposition of concrete and symbolic execution. Ofﬂine
execution is attractive because of its simplicity and low
resource requirements; we only need to handle a single
execution path at a time.
The top-left diagram of Figure 3 highlights an immediate
drawback of this approach. For every explored execution path,
we need to ﬁrst re-execute a (potentially) very large number
of instructions until we reach the symbolic condition where
execution forked, and then begin to explore new instructions.
Online symbolic execution avoids this re-execution cost
by forking two interpreters at branch points, each one having
a copy of the current execution state. Thus, to explore a
different path, online execution simply needs to perform a
context switch to the execution state of a suspended interpreter.
S2E [28], KLEE [9] and AEG [2] follow this approach by
performing online symbolic execution on LLVM bytecode.
However, forking off a new executor at each branch can
quickly strain the memory, causing the entire system to grind
to a halt. State-of-the-art online executors try to address this
problem with aggressive copy-on-write optimizations. For
example, KLEE has an immutable state representation and
S2E shares common state between snapshots of physical
memory and disks. Nonetheless, since all execution states
384
are kept in memory simultaneously, eventually all online
executors will reach the memory cap. The problem can be
mitigated by using DFS (Depth-First-Search)—however, this
is not a very useful strategy in practice. To demonstrate the
problem, we downloaded S2E [28] and ran it on a coreutils
application (echo) with 2 symbolic arguments, each one
10 bytes long. Figure 4 shows how the symbolic execution
throughput (number of test cases generated per second) is
slowed down as the memory use increases.
B. Hybrid Symbolic Execution
MAYHEM introduces hybrid symbolic execution to actively
manage memory without constantly re-executing the same
instructions. Hybrid symbolic execution alternates between
online and ofﬂine modes to maximize the effectiveness of
each mode. MAYHEM starts analysis in online mode. When
the system reaches a memory cap, it switches to ofﬂine mode
and does not fork any more executors. Instead, it produces
checkpoints to start new online executions later on. The crux
of the system is to distribute the online execution tasks into
subtasks without losing potentially interesting paths. The
hybrid execution algorithm employed by MAYHEM is split
into four main phases:
1. Initialization: The ﬁrst time MAYHEM is invoked for a
program, it initializes the checkpoint manager, the checkpoint
database, and test case directories. It then starts online
execution of the program and moves to the next phase.
2. Online Exploration: During the online phase, MAYHEM
symbolically executes the program in an online fashion,
context-switching between current active execution states,
and generating test cases.
3. Checkpointing: The checkpoint manager monitors online
execution. Whenever the memory utilization reaches a cap,
or the number of running executors exceeds a threshold, it
will select and generate a checkpoint for an active executor.
A checkpoint contains the symbolic execution state of the
suspended executor (path predicate, statistics, etc.) and replay
information1. The concrete execution state is discarded. When
the online execution eventually ﬁnishes all active execution
paths, MAYHEM moves to the next phase.
4. Checkpoint Restoration: The checkpoint manager selects
a checkpoint based on a ranking heuristic IV-D and restores
it in memory. Since the symbolic execution state was saved
in the checkpoint, MAYHEM only needs to re-construct the
concrete execution state. To do so, MAYHEM concretely
executes the program using one satisﬁable assignment of
the path predicate as input, until the program reaches the
instruction when the execution state was suspended. At that
point, the concrete state is restored and the online exploration
(phase 2) restarts. Note that phase 4 avoids symbolically re-
executing instructions during the checkpoint restoration phase
1Note that the term “checkpoint” differs from an ofﬂine execution “seed”,
which is just a concrete input.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:45 UTC from IEEE Xplore.  Restrictions apply. 
(unlike standard concolic execution), and the re-execution
happens concretely. Figure 3 shows the intuition behind
hybrid execution. We provide a detailed comparison between
online, ofﬂine, and hybrid execution in §VIII-C.
C. Design and Implementation of the CEC
The CEC takes in the binary program, a list of input
sources to be considered symbolic, and an optional check-
point input that contains execution state information from
a previous run. The CEC concretely executes the program,
hooks input sources and performs taint analysis on input
variables. Every basic block that contains tainted instructions
is sent to the SES for symbolic execution. As a response,
the CEC receives the address of the next basic block to
be executed and whether to save the current state as a
restoration point. Whenever an execution path is complete,
the CEC context-switches to an unexplored path selected
by the SES and continues execution. The CEC terminates
only if all possible execution paths have been explored or a
threshold is reached. If we provide a checkpoint, the CEC
ﬁrst executes the program concretely until the checkpoint
and then continues execution as before.
Virtualization Layer. During an online execution run, the
CEC handles multiple concrete execution states of the
analyzed program simultaneously. Each concrete execution
state includes the current register context, memory and
OS state (the OS state contains a snapshot of the virtual
ﬁlesystem, network and kernel state). Under the guidance
of the SES and the path selector, the CEC context switches
between different concrete execution states depending on the
symbolic executor that is currently active. The virtualization
layer mediates all system calls to the host OS and emulates
them. Keeping separate copies of the OS state ensures there
are no side-effects across different executions. For instance,
if one executor writes a value to a ﬁle, this modiﬁcation
will only be visible to the current execution state—all other
executors will have a separate instance of the same ﬁle.
Efﬁcient State Snapshot. Taking a full snapshot of the
concrete execution state at every fork is very expensive. To
mitigate the problem, CEC shares state across execution
states–similar to other systems [9], [28]. Whenever execution
forks, the new execution state reuses the state of the parent
execution. Subsequent modiﬁcations to the state are recorded
in the current execution.
D. Design and Implementation of the SES
The SES manages the symbolic execution environment
and decides which paths are executed by the CEC. The
environment consists of a symbolic executor for each path,
a path selector which determines which feasible path to run
next, and a checkpoint manager.
The SES caps the number of symbolic executors to keep in
memory. When the cap is reached, MAYHEM stops generating
new interpreters and produces checkpoints; execution states
that will explore program paths that MAYHEM was unable
to explore in the ﬁrst run due to the memory cap. Each
checkpoint is prioritized and used by MAYHEM to continue
exploration of these paths at a subsequent run. Thus, when all
pending execution paths terminate, MAYHEM selects a new
checkpoint and continues execution—until all checkpoints
are consumed and MAYHEM exits.
Each symbolic executor maintains two contexts (as state):
a variable context containing all symbolic register values
and temporaries, and a memory context keeping track of all
symbolic data in memory. Whenever execution forks, the
SES clones the current symbolic state (to keep memory low,
we keep the execution state immutable to take advantage of
copy-on-write optimizations—similar to previous work [9],
[28]) and adds a new symbolic executor to a priority queue.
This priority queue is regularly updated by our path selector
to include the latest changes (e.g., which paths were explored,
instructions covered, and so on).
Preconditioned Symbolic Execution: MAYHEM imple-
ments preconditioned symbolic execution as in AEG [2].
In preconditioned symbolic execution, a user can optionally
give a partial speciﬁcation of the input, such as a preﬁx
or length of the input, to reduce the range of search space.
If a user does not provide a precondition, then SES tries
to explore all feasible paths. This corresponds to the user
providing the minimum amount of information to the system.
Path Selection: MAYHEM applies path prioritization
heuristics—as found in systems such as SAGE [13] and
KLEE [9]—to decide which path should be explored next.
Currently, MAYHEM uses three heuristic ranking rules: a)
executors exploring new code (e.g., instead of executing
known code more times) have high priority, b) executors
that identify symbolic memory accesses have higher priority,
and c) execution paths where symbolic instruction pointers
are detected have the highest priority. The heuristics are
designed to prioritize paths that are most likely to contain a
bug. For instance, the ﬁrst heuristic relies on the assumption
that previously explored code is less likely to contain a bug
than new code.
E. Performance Tuning
MAYHEM employs several optimizations to speed-up
symbolic execution. We present three optimizations that
were most effective: 1) independent formula, 2) algebraic
simpliﬁcations, and 3) taint analysis.
Similar to KLEE [9], MAYHEM splits the path predicate
to independent formulas to optimize solver queries. A
small implementation difference compared to KLEE is that
MAYHEM keeps a map from input variables to formulas at all
times. It is not constructed only for querying the solver (this
representation allows more optimizations §V). MAYHEM also
applies other standard optimizations as proposed by previous
systems such as the constraint subsumption optimization [13],
a counter-example cache [9] and others. MAYHEM also
385
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:45 UTC from IEEE Xplore.  Restrictions apply. 
simpliﬁes symbolic expressions and formulas by applying
algebraic simpliﬁcations, e.g. x ⊕ x = 0, x & 0 = 0,
and so on.
Recall from §IV-C, MAYHEM uses taint analysis [11],
[23] to selectively execute instruction blocks that deal with
symbolic data. This optimization gives a 8× speedup on
average over executing all instruction blocks (see §VIII-G).
V. INDEX-BASED MEMORY MODELING
MAYHEM introduces an index-based memory model as a
practical approach to handling symbolic memory loads. The
index-based model allows MAYHEM to adapt its treatment
of symbolic memory based on the value of the index. In this
section we present the entire memory model of MAYHEM.
MAYHEM models memory as a map μ : I → E from 32-
bit indices (i) to expressions (e). In a load(μ,i) expression,
we say that index i indexes memory μ, and the loaded value
e represents the contents of the ith memory cell. A load with
a concrete index i is directly translated by MAYHEM into
an appropriate lookup in μ (i.e., μ[i]). A store(μ, i, e)
instruction results in a new memory μ[i ← e] where i is
mapped to e.
A. Previous Work & Symbolic Index Modeling
A symbolic index occurs when the index used in a memory
lookup is not a number, but an expression—a pattern that
appears very frequently in binary code. For example, a C
switch(c) statement is compiled down to a jump-table
lookup where the input character c is used as the index.
Standard string conversion functions (such as ASCII to
Unicode and vice versa, to_lower, to_upper, etc.) are
all in this category.
Handling arbitrary symbolic indices is notoriously hard,
since a symbolic index may (in the worst case) reference any
cell in memory. Previous research and state-of-the-art tools
indicate that there are two main approaches for handling a
symbolic index: a) concretizing the index and b) allowing
memory to be fully symbolic.
First, concretizing means instead of reasoning about
all possible values that could be indexed in memory, we
concretize the index to a single speciﬁc address. This
concretization can reduce the complexity of the produced
formulas and improve solving/exploration times. However,
constraining the index to a single value may cause us to
miss paths—for instance, if they depend on the value of
the index. Concretization is the natural choice for ofﬂine
executors, such as SAGE [13] or BitBlaze [5], since only a
single memory address is accessed during concrete execution.
Reasoning about all possible indices is also possible by
treating memory as fully symbolic. For example, tools such
as McVeto [27], BAP [15] and BitBlaze [5] offer capabilities
to handle symbolic memory. The main tradeoff—when
compared with the concretization approach—is performance.
Formulas involving symbolic memory are more expressive,
thus solving/exploration times are usually higher.
B. Memory Modeling in MAYHEM
The ﬁrst implementation of MAYHEM followed the simple
concretization approach and concretized all memory indices.
This decision proved to be severely limiting in that selecting
a single address for the index usually did not allow us to
satisfy the exploit payload constraints. Our experiments show
that 40% of the examples require us to handle symbolic
memory—simple concretization was insufﬁcient (see §VIII).
The alternative approach was symbolic memory. To avoid
the scalability problems associated with fully symbolic
memory, MAYHEM models memory partially, where writes
are always concretized, but symbolic reads are allowed to be
modeled symbolically. In the rest of this section we describe
the index-based memory model of MAYHEM in detail, as
well as some of the key optimizations.
Memory Objects. To model symbolic reads, MAYHEM
introduces memory objects. Similar to the global memory μ,
a memory object M is also a map from 32-bit indices to
expressions. Unlike the global memory however, a memory
object is immutable. Whenever a symbolic index is used to
read memory, MAYHEM generates a fresh memory object
M that contains all values that could be accessed by the
index—M is a partial snapshot of the global memory.
Using the memory object, MAYHEM can reduce the
evaluation of a load(μ, i) expression to M[i]. Note, that
this is semantically equivalent to returning μ[i]. The key
difference is in the size of the symbolic array we introduce
in the formula. In most cases, the memory object M will
be orders of magnitude smaller than the entire memory μ.
Memory Object Bounds Resolution. Instantiating the mem-
ory object requires MAYHEM to ﬁnd all possible values of
a symbolic index i. In the worst case, this may require up
to 232 queries to the solver (for 32-bit memory addresses).
To tackle this problem MAYHEM exchanges some accuracy
for scalability by resolving the bounds [L,U] of the memory
region—where L is the lower and U is the upper bound of the
index. The bounds need to be conservative, i.e., all possible
values of the index should be within the [L,U ] interval. Note
that the memory region does not need to be continuous, for
example i might have only two realizable values (L and U).
To obtain these bounds MAYHEM uses the solver to
perform binary search on the value of the index in the context
of the current path predicate. For example, initially for the
lowest bound of a 32-bit i: L ∈[0 , 232 − 1]. If i < 232−1
2 − 1] while unsatisﬁability
is satisﬁable then L ∈[0 , 232−1
indicates that L ∈ [ 232−1
, 232 − 1]. We repeat the process
until we recover both bounds. Using the bounds we can now
instantiate the memory object (using a fresh symbolic array
M) as follows: ∀i ∈ [L,U] : M[i] = μ[i].
2
2
The bounds resolution algorithm described above is
sufﬁcient to generate a conservative representation of memory
objects and allow MAYHEM to reason about symbolic
memory reads. In the rest of the section we detail the main
386
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:45 UTC from IEEE Xplore.  Restrictions apply. 
ite( n < 128, L, R )
ite( n < 91,  ite( n < 64, n, n + 32 ), n )
L = ite( n < 64, ... )
R = ite( n < 192, ... )
e
u
a
v