（RedHat
import
Dec
122017,
u'wusb'}，{'ename':u'macc'}]
14:17:04)
on
HttpResponseRedirect
linux2
目前数据结果集为空。
第11章运维开发基础”445
---
## Page 468
446丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
的语法是一样的。里面的每个元素的输出是使用{{tmp_data.empno”}这种方式。
一个结果集，我们选代一下，可以使用 for tmp_data in emp_data 的方式来做，和 Python
render to
DATABASES ={
配置 settings.py文件，修改以下的配置。
（1）修改数据源为MySQL
数据库默认是 sqlite，
5．接入 MySQL
前端页面中，对于后端返回的数据，可以使用标签来实现，比如 emp_data的数据是
浏览器访问URL，得到的结果如下图11-11 所示。
{{
{{
{(emp_data}}
helloteam
emplist.html的内容如下：
我们修改一下前端页面，把返回的数据展现出来。
（6）优化前端页面
return
endfor%}
for tmp_data in emp_data %}
emp_
tmp_data.empno }}
data
HOST':'127.0.0.1
PASSWORD':'XXXX',
'USER'
NAME'
3macc
2wusb
1jeanron
hello team [, , ]
= emp.objects.all()
:3306,
R
，无须修改任何配置，建议修改为 MySQL 的数据源配置。
django',
}
192.168.56.102
图11-11
---
## Page 469
至此，一个基于 Django 的基础 Web 开发就完成了。
可以参考官方文档做更多的定制。
from emp_test.models import emp
（2）配置model到AdminSite
list
list_display
fields
filter
ename
category_emp)
ame'1
如下：
第11章运维开发基础|447
---
## Page 470
问题：
权限申请和性能优化等方面会有越来越多的需求，但随着新业务的接入，将面临以下
掉不少时间和精力，随着数据规模和业务范围的扩大，各个部门对数据库资源申请、
12.1.1
的数据库运维系统。
过程中会沉淀下来经验，对我们的工作效率算是反哺，DBA 应该建设一个面向业务服务
12.1
结果为导向来重新审视我们的设计，继而完善规划设计，最终不断演进和迭代设计。
属性，同时我们也要拥抱改变，鼓励创新，在系统建设中不是一成不变，而是需要以目的和
由于运维系统是一个相对庞大的体系，在技术价值和业务价值上，它一定有难以替代的价值
数据库基础运维工作繁琐而复杂，会因为重复性手工操作和繁琐的操作环节花费
DBA工作的一个大的方面就是解决问题，解决的问题越多，成长就会越快，而这个
·元信息零散：元数据的变更缺少流程支持，数据的持续更新会因为数据源不够统
无论从哪个方面讲，运维系统的设计是重点也是难点，其中架构设计更是首要的任务，
·人员稳定性和持续发展：DBA不可避免地在做一些重复劳动，工作激情削弱，部
·技术方向分散：部分核心项目需要持续锁定DBA 资源，团队内对于业务的支持力
·运维流程繁琐：目前的业务支持主要是手工操作为主，流程相对较多，手工检查
先静之，再思之，五六分把握即做之。一
度和效率难以平衡。
和处理效率难以保证，同时有误操作的潜在风险。
分工单响应时间和处理质量开始下降，同时个人运维经验无法有效地沉淀转化。
一出现元数据不一致的问题。
运维问题梳理
第12章
自动化运维意义和价值
自动化运维架构设计和规划
一曾国藩
---
## Page 471
能够发挥最大价值，下图12-1是一个运维系统和其他业务结合的结构设计图。
多业务场景的接入和任务跟踪。
台接入提供支撑。在保证高效的迭代前提下，为和前端团队对接提供基础。
化的前端需求实现和后端逻辑的对接集成，后端逻辑是实现脚本化、API化，为后续的平
日常的基础平台化管理工作，而平台前端的目标用户是业务同学，可以通过丰富、定制
端的概念，本地前端的目标用户是后端管理同学，可以使用基础的前端功能即可，满足
管理、数据生命周期管理、分布式管理等。
核、DBA工单规范化接入等。
场景有：数据库实例一键部署、权限开通、数据库备份恢复、数据库服务启停、SQL审
MIS，OA等，可以对接工单接口，工作流接口，系统服务器接口，即时通信接口等。
度来建设和接入数据库，对外提供API接口支持数据的查询提取。
平台建设提供技术基础和积累。构建数据库运维系统应实现以下目标：
批量执行，基本解放基础运维的繁琐工作，同时实现系统的架构完善，为后期的私有云
维流程，通过标准化、规范化的操作减少误操作和人为故障，通过任务调度实现任务的
化，需要对接多个业务系统，逐步完善流程，实现业务操作的流程闭环，梳理数据库运
12.1.2
综上，运维系统需要结合业务，能够细化，能够走出去，实现运维体系的流程化才
构建任务系统和调度系统，
5．任务批量异步处理
通过改进前后端分离的设计方式，对已有的系统进行重构，引入本地前端和平台前
4．前后端架构分离和解耦
需要接入的运维优化场景有：SQL 审核、SQL自动化上线、业务巡检、慢日志平台
完善数据库运维流程，使得数据库操作符合运维规范，需要接入和完善的基础运维
3．数据库操作规范化 
对接业务系统，对接接口，完善运维系统的流程化建设，比如公司的平台系统，如
2.
将零散的数据库元信息进行归纳和整理，
1．元数据标准化
建设一个面向业务服务的数据库运维系统，通过构建元数据模块实现元数据的标准
业务系统对接流程化
运维系统的目标怎么定
实现任务的批量和异步处理，提高系统处理效率，实现
，对内从系统、实例、应用、集群等 4个维
第12章自动化运维架构设计和规划”449
---
## Page 472
450丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
数据处理层和数据服务层，侧重于运维保障和运维优化，并提供全面的运维自助服务。
有扩展性。对于数据库运维平台的整体规划如下图12-2 所示，主要有物理层、系统层、
12.2
运维系统的架构设计就好比一座房子的骨架，骨架够稳固，系统才能稳定，更加具
以一持万：运维系统架构设计
系统层
元数据管理
日志检索
实例管理
运维保障
安装部
故障自意
图12-2
图12-1
运维优化
数据库服务器
化索
本管理
通用模块
系统安全
数据安全
服务安全
网络安全
---
## Page 473
有一个中控的概念，也就是如下图12-4所示的CM Server，也可以理解是代理服务器。
12.3.1执行路径统一规划
势，这类技术需要更多的经验和技术沉淀，对于架构和产品设计能力都是很大的挑战。
就意味着稳定和难以替代，在系统建设中可以更加聚焦，这样才有系统独有的特点和优
12.3
浅色的部分是目前数据库方向欠缺的地方，也是重点要改进和建设的部分。
不单单是数据库服务，这样一来，你的工作成果就算是业务也能够感受到的，而且有了
一种衡量的标准。
够把这些经验提炼，转化为产品思维。
作，而运维优化则基于业务场景和性能负载进行，这些内容需要沉淀一些技术经验，
运维保障主要负责基础运维和运维管理的工作，也就是我们通常理解中的数据库运维工
针对目前的系统建设情况，对数据库管理系统包含如下图12-3所示的一些功能模块，
通常对于服务执行，很多情况下是通过 ssh 等连接方式在服务端执行，在此我们需要
对于运维系统的建设，我们需要自我审视一下，我们有哪些关键技术，关键技术也
而在这些打好基础之后，数据库其实可以提供很多的数据服务，注意是数据服务而
在建设的过程中，还有一些通用模块属于共享型服务，可以在建设的过程中不断的迭代。
其中数据处理层是重点建设的目标，分为两个大的模块：运维保障和运维优化部分，
纲举目张：运维系统的关键技术
安装部署
高可用
性能优化
规范和标准
数据备份
数据库平台-自动化，智能化
数据恢复
分布式方案
SQL审核
图12-3
软硬件验
数据扩容，
数据管理
架构和选型
任务调度
第12章自动化运维架构设计和规划|451
数据迁移
---
## Page 474
452丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
12.3.2
于任何单一的技术的。
就会存在明显的性能瓶颈，可以根据自己的业务现状进行改进，本身从设计上就不局限
Ansible的方式相对清晰简单，可以满足基础运维需求，但是在服务器数量较大的情况下，
而且接入方式更加统一，这个过程中的调用关系和逻辑如何保证呢，其实是在2+3的过程中写了
我还是选择了最难的一条路，就是1+2+3，因为这个过程中对于整个环境的没有依赖和侵入性，
或者加一层中控，op_to_cm（运维机器到中控），cm_db（中控到DB 实例）来实现，
Ops_to_db（运维机器到DB 实例）如果使用程序脚本逻辑的方式，那么 SQL 的方式就满足不了
实例）、ops_to_host（运维机器到DB 服务器）等等。
和 DB 实例-DB。
器，右上角的是DB 服务器，右下角的是DB 服务器中的数据库。
一个简单的 agent 的角色。从这一步开始我就会明确我们需要实现脚本化到工具化的转变。
，运维服务器连接到目标数据库实例，有路径1+2+3或者1+4甚至5都可以满足需求，最后
当然，如上的方式也可以基于 SaltStack 的方式改进，在中小型服务器规模下，基于
对于每一个路径或者分支我们可以使用多种方式来实现，总体思路是把路径串联起来，比如
那样下来就可以拆分为多种访问路径，比如ops_to_cm（运维机器到中控）、cm_to_host
对基础的运维流程进行梳理，评估接入自动化流程的可行性。比如 MySQL 运维方向
我计划把相关的服务对象分成几种类型：运维机器-Ops、中控-CM、DB 服务器-host
如果面对的场景不确定如何能够做到一种灵活的插件方式呢。
比如通过运维机器来访问数据库，我们有很多的路径可选。
假设通过左侧的运维机器要访问数据库，有很多种路径可以实现。中间的是中控机
运维流程深度梳理
OPS server
Ansible Server
CM server
图12-4
N
DB Instance
Agent
DBserver
---
## Page 475
的备份恢复流程如下图12-5所示。
吉果表名
各价能功记录
图12-5
备份是否
辣
1.向结果表中插入失败记录
1.向结果表中插入失败记录
第12章自动化运维架构设计和规划|453
---
## Page 476
454丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
评估不够准确，使得产品的问题修复周期加长。
晰，使得项目在落地在推动的过程中会有一些难度和瓶颈，同时对于存在问题的优先级
SQL质量使用了打分系统来进行对标，在建设的过程中，也因为对于产品的定位不够清
度定制，截止目前已深度定制规则达15 条以上，基本完成了SQL 审核业务的需求。对于
12.3.4
业务场景。
问题更多，我们需要权衡，也需要在开源的基础上进行深度定制，让方案更适合我们的
或者说某些开源项目的环境依赖和公司的不能兼容，到底是解决的问题更多还是带来的
来一系列的问题，比如有些开源项目维护一段时间就停更了，对公司来说就有潜在风险
理性的态度，那就是开源虽然能够解决我们固有的一些问题，同时引入开源也势必会带
提高工作效率的一个制胜法宝，当然开源是一把双刃剑，我们对待开源也需要保持一种
12.3.3
一个事情是需要大量的调试和失败的。
简单审核后可以自动开始恢复业务，搭建从库，我就可以安心的睡觉了；但要实现这样
系统初始化密切关联，所以我在此基础上整理了如下图12-6的一个流程草图。
高可用恢复
高可用切换一元数据变更
高可用管理监控
SQL 审核项目集成了行业内的优秀思想，在此基础上结合公司的业务特性进行了深
开源方案在互联网行业中是一种流行的工作方式，也是我们避免重复造轮子、快速
可以想象，如果实现了这个功能，幸福感会大大提高。如果半夜出现了宕机事件，
资源池
比如在梳理的过程中，我发现备份恢复不是一个单一独立的流程，而是和高可用、
通过流程的细化和梳理，能够明确运维改进的地方，也可以发现固有流程的瓶颈。
SQL 审核
开源深度定制
申请资源
备份恢复配置高可用配置
高可用元数据
搭建从库
数据库恢复
软件初始化
图12-6
数据车件权后化
设置slave
Bilog增备恢复
任务调度
增备恢复
全库恢复
系统初始化
Binlog备份
增量备份数据备份
全库备份
核心业务元数据
单点实例元数据
数据车实例元数据
备份元数据
---
## Page 477
完成，则标识整个工单完成，会触发标识概要工单完成，即第6步所做的工作。
态，如果子工单完成则记录相应的状态，即第5 步所做的工作，如果相关的子工单全部
多个工单，其中一个通用的子工单就是分解工单状态表，这个状态表只标识子工单的状
标识。
象变更工单就流转到对象变更的页面，在这里是根据单号做一个分发器和总体状态的
比如这是一个权限申请工单，这是一个对象变更工单，这是第2步的工作。
明细信息，有了这一层保证，如果存在接收端逻辑或者解析异常，就可以尝试重试的方