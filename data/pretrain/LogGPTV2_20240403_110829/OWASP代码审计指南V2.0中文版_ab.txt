集成代码审计。同样，这些类型的代码审计更倾向于组织内部的编码策略。正在集成到
项目中的代码是否经过了 IT 管理层的全面审核和批准？许多安全漏洞现在都是通过使
13 
用开源库来实现的，这可能会带来不安全的依赖关系。 
⚫ 
测试代码审计。敏捷和测试驱动设计，程序员创建单元测试来证明代码方法如程序员所
愿。此代码不是测试软件的指南。代码审计者可能希望关注单元测试用例，以确保所有
方法都有适当的异常；代码以安全的方式失败。如果可能的话，代码中的每个安全控制
都有适当的单元测试用例。 
3.代码安全审计者，希望获得关于如何将代码安全审计集成到组织的安全软件开发生命
周期中的更新指南。这本书也将作为代码审计流程中的代码审计参考指南。这本书提供了代
码审计者所需的完整信息来源。首先应该把它作为一个关于代码审计的故事来阅读，然后作
为桌面参考指南来阅读。 
2 相关技术和方法 
2.1 代码安全审计 
2.1.1 代码审计技术参考 
在这里，该指南深入探讨了常见的漏洞和技术控制，包括 XSS、SQL 注入、会话跟踪、
身份验证、授权、日志记录和信息泄漏，并提供了各种语言的代码示例来指导审计者。 
本节可用于学习各种控制的重要方面，并作为进行代码安全审计时的参考。 
我们从 OWASP 的十大问题开始，描述每一个问题需要考虑的技术方面。然后，我们
14 
将讨论其他常见的应用程序安全问题，这些问题并不特定于 OWASP 十大问题 
代码安全审计可能是在系统开发生命周期早期识别安全漏洞的最有效的技术。当与自动
和手动渗透测试一起使用时，代码审计可以显著提高应用程序安全验证工作的成本效益。 
本指南没有规定执行代码安全审计的过程。相反，它提供了如何组织和执行工作的指导。
该指南还侧重于审计代码中某些漏洞的机制。 
手动代码安全审计提供了对与不安全代码相关的“真实风险”的洞察。这种上下文相关
的白盒方法有着简单，重要的价值。审计者可以理解代码中的错误或漏洞的相关性。前提是
审计人员要理解被评估的内容。借助适当的上下文，可以对攻击的可能性和违规的业务影响
进行认真的风险评估。漏洞的正确分类有助于优先修复准确和重要的漏洞，而不是浪费时间
修复一切。 
2.1.2 为什么代码有漏洞？ 
MITRE 已经记录了 CWE 项目中大约 1000 种不同的软件缺陷。这些都是软件开发人员
可能犯错误导致不安全的不同方式。这些弱点中的每一个都很微妙，许多都非常棘手。软件
开发人员在学校里没有被告知这些弱点，大多数人也没有接受过任何关于这些问题的在职培
训。 
这些问题在最近几年变得如此重要，因为我们在以极快的速度增加互联方式，技术和协
议。发明技术的能力已经远远超过了保护技术的能力。今天使用的许多技术根本没有受到足
够(或任何)的安全审计。 
15 
企业没有在安全上花费适当的时间有许多原因。最直观的原因是源于软件市场的一个潜
在问题。因为软件本质上是一个黑盒，客户很难区分安全和不安全代码。没有这种可见性，
就不鼓励供应商花费额外的精力来生产安全的代码。尽管如此，当信息安全专家提倡代码安
全审计时，他们经常会遇到阻力，他们会为没有在安全方面投入更多精力找以下(不合理的)
借口: 
“我们从不被黑(据我所知)，我们不需要安全” 
“我们有防火墙来保护我们的应用程序” 
“我们相信我们的员工不会攻击我们的应用程序” 
在过去的 10 年里，参与 OWASP 代码审计项目的团队已经执行了数千次应用程序审计，
并发现每一个应用程序都有安全漏洞。如果代码没有经过安全漏洞审计，应用程序出现问题
的可能性几乎是 100%。 
尽管如此，仍有许多组织选择不去了解他们代码的安全性。对他们来说，信奉拉姆斯菲
尔德对我们实际所知的神秘解释: 
“..我们知道，有已知的知识；有些事情我们知道我们知道。我们也知道有已知的未知；
也就是说，我们知道有些事情我们不知道。但也有未知的未知-那些我们不知道我们不知道
的。” 
-唐纳德·拉姆斯菲尔德 
如果在企业风险测量的基础上做出明智的决策，这会得到充分的支持。然而，如果不理
16 
解风险，公司就没有尽职尽责，对股东和客户都不负责任。 
2.1.3 什么是代码安全审计？ 
代码审计旨在识别应用程序中与其特性和设计相关的安全缺陷，以及产生缺陷的根本原
因。随着应用程序的日益复杂和新技术的出现，传统的测试方法可能无法检测到应用程序中
存在的所有安全缺陷。人们必须理解应用程序、外部组件和配置的代码，这样才能更好地发
现缺陷。如此深入地研究应用程序代码也有助于确定可用于避免安全缺陷的确切缓解技术。 
审核应用程序源代码的过程是为了验证适当的安全和逻辑控制是否存在，它们是否按预
期工作，以及它们是否在正确的位置被调用。代码审计是一种帮助确保应用程序开发的方式
可以在给定的环境中进行“自我保护”。 
代码安全审计允许公司确保应用程序开发人员遵循安全开发技术。一般的经验法则是，
在应用程序经过适当的代码安全审计后，渗透测试不应发现与开发的代码相关的任何其他应
用程序漏洞。或者发现很少的问题。 
所有的代码安全审计都是人力和技术支持的结合。可以一个没有经验的文本编辑者，抑
或是是拥有先进静态分析(SAST)工具的专家安全团队。不幸的是，有效地使用当前的应用
程序安全工具需要相当高水平的专业知识。他们也不懂动态数据流或者业务逻辑。SAST 工
具非常适合覆盖范围和设定最低基线。 
工具可以用来执行这个任务，但是它们总是需要人工验证。他们不理解上下文，而上下
文是代码安全审计的基石。工具擅长评估大量代码并指出可能的问题，但是一个人需要验证
每个结果，以确定它是否是一个真正的问题，它是否实际上是可利用的，并计算对企业的风
17 
险。人工审计者也是必要的，以填补自动化工具，根本无法审计的重大盲点。 
2.1.4 代码审计和代码安全审计的区别是什么？ 
能力成熟度模型是一个被广泛认可的过程模型，用于度量软件开发组织的开发过程。它
的范围从“第 1 级”到“第 5 级”，在“第 1 级”中，开发过程是临时的、不稳定的和不
可重复的，在“第 5 级”中，开发过程是组织良好的、文档化的和不断改进的。假设一个
公司的开发过程将从第一级开始(也称为启动模式)，随着组织的成熟和改进，它将变得更加
明确、可重复和专业。当一个组织达到 2 级(可重复)或 3 级(已定义)时，引入执行代码审计
的能力(注意，这还没有处理安全的代码审计)。 
代码安全审计是对标准代码审计实践的增强，其中重新审计过程的结构将安全考虑(如
公司安全标准)置于决策的最前沿。本文档将解释其中的许多决定，并试图确保审计过程能
够充分涵盖代码库中的安全风险，例如，确保对高风险代码进行更深入的审计，确保审计人
员在审计代码时有正确的安全上下文，确保审计人员有必要的技能和安全的编码知识来有效
地评估代码。 
2.1.5 确定安全源代码审计的规模？ 
安全源代码审计的级别将根据软件的业务或法规需求、编写应用程序的软件开发组织的
规模以及人员的技能而有所不同。类似于软件开发的其他方面，如性能、可伸缩性和可维护
性，安全性是应用程序成熟度的一种度量。安全性是一种非功能性需求，应该内置于用于商
业或政府目的的每一个应用程序或工具中。 
18 
如果开发环境由一个人作为爱好进行编程，并编写一个程序来跟踪他们在 visual basic
中每周的购物(CMM 级别 1)，那么该程序员不太可能使用本文档中的所有建议来执行广泛
级别的代码安全审计。在另一个极端，一个拥有数千名开发人员编写数百个应用程序的大型
组织(如果他们希望成功的话)会非常认真地对待安全性，就像他们会认真对待性能和可伸缩
性一样。 
不是每个开发组织都有必要或资源来遵循和实现本文档中的所有主题，但是所有组织都
应该能够开始以一种能够适应对他们来说最重要的过程和技术建议的方式来编写他们的开
发过程。随着组织的发展和成熟，这些过程应该是可扩展的，以适应更多的代码安全审计考
虑。 
在一个由 3 个人组成的黑暗房间里，不会有一个“代码审计小组”来发送代码，取而
代之的是角落里的一个家伙，他曾经读过一本安全的代码书，现在用它来支撑他的显示器。 
在一个中等规模的公司中，可能有 400 名开发人员，其中一些人将安全性作为兴趣或
专长，但是组织的流程可能会给与同样多的时间来审计 3 行 CSS 更改，就像它给与旗舰产
品认证码的重新设计一样。这里的挑战是增加员工的安全编码知识(一般来说)，并通过威胁
建模和代码安全审计来改进流程。 
对于一些拥有成千上万开发人员的大公司来说，对安全的需求是最大的，但是过程效率
对底线有影响。以一家拥有 5000 名开发人员的大公司为例。如果流程发生变化，导致每个
开发人员每周多花 15 分钟来完成一项任务，那么整个公司每周就要多花 1250 个小时.这样
一来，每年就需要额外增加 30 个全职开发人员来完成任务(假设每周 40 个小时)。这里的挑
战是确保对生命周期的安全更改是有效的，并且不妨碍开发人员执行他们的任务。 
培训员工进行代码安全审计 
19 
似乎有一个带有以下情绪的陷阱：由于许多代码开发人员不了解或不熟悉安全性，公司
应该在开发人员之间实现对等的代码安全审计。 
员工如何引入安全技能来实施安全的代码审计方法？许多安全成熟度模型(例如。
BSIMM 或 OpenSAMM)讨论核心安全团队的概念，他们是熟练的开发人员和技能安全主
题专家(SMEs)。在一家公司推出阿瑟治愈代码审计流程的早期，安全中小企业将成为高风
险审计的核心，利用他们的经验和知识指出代码中可能引入风险的方面。 
除了核心安全团队之外，另一组对安全感兴趣的开发人员可以充当本地安全中小企业团
队，参与许多代码安全审计。这些卫星(BSIMM 称之为卫星)将由核心安全团队在技术问题
上进行指导，并将有助于鼓励安全编码。 
随着时间的推移，一个组织在其核心和附属团队中构建安全知识，这反过来将安全知识
传播给所有开发人员，因为大多数代码审计都将有一个安全中小企业参与。 
这给所有开发人员的“在职”培训非常重要。一个组织可以派他们的开发人员参加培训
课程(课堂或案例教学)，向他们介绍常见的安全主题并提高他们的意识，但没有一个培训课
程能 100%与开发人员的工作相关。在代码安全审计过程中，每个提交代码的开发人员都会
收到与他们完全相关的安全相关的反馈，因为审计是针对他们生成的代码的。 
但是必须记住，不管组织的规模有多大，执行安全代码重新审计的原因是为了捕捉更多
的错误，确保在 S-SDLC 中更早地捕捉它们。与在测试或生产中发现 bug 相比，通过这种
方式进行安全的代码审计并发现 bug 更快。进行代码审计耗费的时间，对于 5000 人的组
织来说，在测试、调查、重新编码、重新审计、重新发布和重新测试中发现一个缺陷需要多
长时间？如果代码投入生产，项目管理和支持人员将参与跟踪问题并与客户沟通，会怎么样？
也许一周 15 分钟看起来很划算。 
20 
2.1.6 我们无法保证自己的安全 
渗透测试通常是一个黑盒测试，应该在源代码的每个发布(或构建)上重复。许多连续集
成工具(例如。Jenkins/Hudson) 可以针对产品的构建和安装版本进行可重复的测试，包括
自动渗透测试。 
随着源代码的变化，未维护渗透测试结果的价值会随着时间而降低。还有隐私、合规性、
稳定性和可用性问题，这些问题可能不包括在渗透测试中，但可以包括在代码审计中。例如，
云环境中的数据信息泄漏可能不会通过渗透测试被发现。因此，渗透测试应该被看作是武器
库中的一个重要工具，但是仅仅依靠它并不能确保产品软件是安全的。 
识别软件项目中漏洞的常见方法有: 
⚫ 
使用针对源代码存储库或模块运行的自动化工具进行源代码扫描，查找被认为可能导致
安全漏洞的字符串模式。 
⚫ 
自动渗透测试(黑盒/灰盒)。渗透测试工具安装在测试网站的网络上，利用自动扫描，
针对网站网址运行一组预定义的测试。 
⚫ 
手动渗透测试。同样使用工具，但是具有执行更复杂测试的渗透测试专业知识。 
⚫ 
由安全专家进行代码安全审计。 
⚫ 
应该注意的是，没有一种方法能够识别软件项目可能遇到的所有漏洞，但是深度防御方
法将降低生产软件中包含未知问题的风险。 
21 
在美国证券交易委员会 2015 年的一项调查中，受访者对以下哪种安全方法最有效进行
了评价: 
1)一般安全漏洞 
2)隐私问题 
3)业务逻辑错误 
4)合规问题(如 HIPPA、PCI 等)。 
5)可用性问题 
调查结果如下： 
渗透测试 
22 
这些调查表明，手动代码审计应该是公司安全生命周期的一个组成部分，因为在许多情
况下，它与其他检测安全问题的方法一样好，甚至更好。 
2.1.7 耦合源代码审计和渗透测试 
术语“360 度审计”指的是一种方法，其中源代码审计的结果用于计划和执行渗透测试，
渗透测试的结果又用于通知源代码审计。 
渗透测试 
23 
从代码审计中了解内部代码结构，并利用该知识形成测试用例和滥用用例，称为白盒测
试(也称为透明盒和玻璃盒测试)。这种方法可以导致更有效的渗透测试，因为测试可以集中
在可疑甚至已知的漏洞上。利用网络应用中使用的特定框架、库和语言的知识，渗透测试可
以集中于那些框架、库和语言中已知存在的弱点。 
白盒渗透测试也可用于确定通过代码审计发现的漏洞带来的实际风险。由于代码审计者
没有考虑保护措施(例如，输入验证)，在代码审计期间发现的漏洞可能无法在测试期间被利
用。虽然这种情况下的漏洞是真实的，但由于缺乏暴露，实际风险可能会更低。不过，增加
渗透测试仍然有一个好处，即保护措施在将来有可能会发生变化，从而暴露漏洞。 
虽然白盒渗透测试(基于代码安全审计)中利用的漏洞确实存在，但是应该仔细分析这些
漏洞的实际风险。让攻击者获得目标 web 应用程序的源代码和开发人员的建议是不现实的。
24 
因此，外部攻击者利用白盒渗透测试器发现的漏洞的风险可能更低。然而，如果 web 应用
程序组织担心有内部消息的攻击者的风险(以前的雇员或与现在的雇员或承包商勾结)，现实
世界的风险可能同样高。 
渗透测试的结果可以用来确定代码审计的附加区域。除了解决测试中利用的特定漏洞之
外，寻找存在同一类漏洞的其他地方也是一个很好的做法，即使在测试中没有明确利用。例
如，如果应用程序的某个领域没有使用输出编码，并且渗透测试利用了这一点，则很有可能
应用程序的其他地方也没有使用输出编码。 
2.1.8 代码审计对开发实践的潜在优势 
将代码审计集成到公司的开发过程中有很多好处，这取决于执行代码审计所使用的过程
和工具、数据的备份情况以及这些工具的使用情况。将开发人员带进一个房间并在投影仪上
显示代码，同时将审计结果记录在打印件上的日子已经一去不复返了，如今有许多工具可以
提高代码审计的效率，并跟踪审计记录和决策。当代码审计过程结构正确时，审计代码的行
为可以是有效的，并为组织提供教育、审计和历史方面的好处。本节枚举了代码审计过程可
以给开发组织带来的好处。 
提供历史记录 
如果任何一个开发人员加入了一家公司，或者在一家公司内部调整了团队，不得不维护
或增强几年前编写的一段代码，最大的挫折之一可能是新开发人员对旧代码缺乏了解。关于
代码文档存在各种不同的观点，既有代码内部的(注释)，也有代码外部的(设计和功能文档、