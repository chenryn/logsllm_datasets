Deﬁne Finternal.state
sstorestate, oramstate, params)
Finternal
alias
:= (ssid, time, rdata, cpustate,
// execute program
On receive (“execute one step”) from Ftoken:
1: assert time ≤ params.T
2: (cpustate, op) ← Π(cid:48)(cpustate, rdata)
3: Send op to ORAM[PRFK2(ssid), oramstate] ⇔
sstore[PRFK3(ssid), sstorestate] ⇔ Ftoken, wait
for output from ORAM, abort
if sstore aborts;
/* instantiate ORAM with state oramstate, instanti-
ate sstore with state sstorestate, connect ORAM’s
communication tape to sstore’s input tape, connect
sstore’s communication tape to caller Ftoken. This
represents a multi-round protocol. */
4: If op = (read, . . .), let rdata := output
5: time := time + 1
6: If time = params.T : send (“okay”, rdata) to Ftoken
Else send (“okay”, ⊥) to Ftoken
Fig. 3: Functionality Ftoken. For succinctness, encryption
of some data is represented using an overline on it, e.g.,
state = EncK1 (state), where Enc denotes a IND-CPA + INT-
CTXT-secure authenticated encryption scheme. “ ” denotes a
wildcard ﬁeld that matches any string.
8
Protobf [sender, receiver ]
(“store key”, K) to Ftoken, await “done”
Sender:
On receive (“create”, RAM = (cid:104)cpustate0, mem0(cid:105)) from env:
$← {0, 1}3λ, send
1: If not initialized: K := (K1, K2, K3)
2: mem0 := {EncK1(mem0[i])}i∈|mem0|
3: HS := digest(mem0)
4: header := EncK1(cpustate0||HS||RAM.params)
5: Send (header, mem0, RAM.params) to receiver
// HS: program Merkle root
RAM.params.HS = pid if not received already
Receiver:
On receive (“execute”, pid, inp) from env:
1: Await (header, mem0, RAM.params) from sender s.t.
2: Initialize mem := mem0||inp||(cid:126)0
3: Send (“initialize”, header, HR := digest(inp)) to Ftoken,
4: for t in {1, . . . , T}:
5:
6:
Send (“execute one step”, state) to Ftoken
Await (oper, state) from Ftoken;
with the received value
), repeat:
Until oper = (“okay”,
await state from Ftoken
// state overwritten
//multiple memory
requests for the RAM step due to ORAM
perform the operation oper on mem and let the
7:
8:
9:
(res,
forward
response be res
state)
(oper, state) from Ftoken;
to Ftoken,
10: Parse oper := (“okay”, outp), output outp
Fig. 4: Protocol Protobf. Realizes FRAM
hybrid model.
obf
and
await
in the Ftoken-
The receiver. On the receiver’s side, the token functionality
makes use of an ORAM and a secure store sstore. The token
functionality (trusted hardware functionality) is modeled by an
augmented RAM machine.
1) ORAM. ORAM takes in [κ := PRFK2(ssid), oramstate]
(where ssid := (HS, HR)) as internal secret state of the
algorithm. κ is a session-speciﬁc seed used to generate all
pseudorandom numbers needed by the ORAM algorithm
— recall that all randomness needed by ORAM is replaced
by pseudorandomness to avoid rewinding attacks. As men-
tioned in Section IV-A, we assume that the ORAM initial-
ization is performed during the ﬁrst read/write operation. At
this point, the ORAM reads the ﬁrst N memory locations
to read the program and the input, and inserts them into
the ORAM data structure within mem.
2) Secure store module sstore. sstore is a stateful deter-
ministic secure storage module that sits in between the
ORAM module and the untrusted memory implemented
by the receiver. Its job is to provide appropriate mem-
ory encryption and authentication. sstore’s internal state
includes κ := PRFK3(ssid) and sstorestate. sstorestate
contains a succinct digest of program, input and memory to
perform memory authentication. κ is a session-speciﬁc seed
used to generate all pseudorandom numbers for memory
encryption.
At the beginning of an execution, sstorestate is initialized
Fig. 5: Augmented Random Access Machine. In this ﬁgure,
cpustatei is denoted by csi and rdatai is denoted by rdi.
to sstorestate := (HS, HR, H(cid:48) := 0), where HS denotes
the Merkle root of the encrypted program provided by the
sender, HR denotes the Merkle root of the (cleartext) input
and H(cid:48) denotes the Merkle root of the memory mem. By
convention, we assume that if a Merkle tree or any subtree’s
hash is 0, then the entire subtree must be 0. The operational
semantics of sstore is as follows: upon every data access
request (read, addr) or (write, addr, wdata):
• If addr is in the mem0 part of the memory (the sender-
provided encrypted program), interact with mem and use
HS to verify responses. Update HS appropriately if the
request type is write.
• If addr is in the inp part of the memory (the receiver-
provided input), interact with mem and use HR to verify
responses.
• Otherwise,
responses. Update H(cid:48) appropriately.
interact with mem and use H(cid:48)
to verify
Upon successful completion, sstore outputs the data fetched
for read requests, and outputs 0 or 1 for write requests.
Note that the sstore algorithm simply aborts if any of the
responses fail veriﬁcation.
to support
3) Augmented Random Access Machines. We now extend
the RAM model
instruction scheduling and
a scratchpad (Sections III-C and III-D). RAM can be
augmented to use a next instruction circuit Π(cid:48) := ΠN for
a ﬁxed N, with the following modiﬁcations:
a) Π(cid:48) is a combinational circuit, which consists of N next-
instruction circuits Πi cascaded as shown in Figure 5.
b) The Πi’s use an additional shared memory, referred to as
scratchpad. Each Πi (except Π1) operates on the output
of Πi−1 and an operand rdatai−1 read from scratchpad.
The next instruction circuit Π(cid:48) outputs opN to retrieve
rdata from mem, which is subsequently used by Π1.
On input inp, the execution of RAM[T, N, (cid:96)in, (cid:96)out, w] :=
(cid:104)Π(cid:48), cpustate, mem(cid:105) is similar to what was deﬁned in
Section IV-A but uses Π(cid:48) as the next instruction circuit. The
augmented random access machine RAM(cid:48) models a RAM
that performs N instructions followed by an ORAM access.
If some opi cannot be served by the scratchpad, subsequent
Πj for i + 1 ≤ j ≤ N do not update cpustatej and output
opN = opi to load the required data in scratchpad.
Remark. For augmented random access machines that uses
a scratchpad, rdata would typically be larger than a memory
word (e.g. 512 bits).
We now explain how the receiver executes the program
using the token described in Figure 3 and protocol in Figure 4.
Program execution. For ease of explanation,
let us ﬁrst
assume that the ORAM is initialized and contains the program
and input. The execution for any input proceeds in T time steps
9
1...cs0rd0cs1op1cs2csN−1csNopNΠ1Π2ΠNopScratchpadrd1op2opN−1rdN−1rd2cpustatecpustaterdata(Figure 4 line 4). At each time step, the receiver interacts with
the token with two types of queries. For each type of query,
Ftoken decrypts state (aborts if decryption fails), instantiates
Finternal with state and forwards the request to Finternal. At
the end of query, the state is sent to the receiver along with
the query response.
• Execute one step: This is shown in Figure 3 and Figure 4
line 5. When this query is invoked, Finternal executes
instruction circuit Π(cid:48) of the RAM machine to
the next
obtain an updated cpustate and an op ∈ {read, write}.
Once operation op is performed by the ORAM algorithm,
Finternal updates state.time to reﬂect the execution of the
instruction (Figure 3 line 5). The message “okay” is then
sent to the receiver. At time = T , Finternal returns the
program output to the receiver (Figure 3 line 6).
• ORAM queries: ORAMs can use a multi-round protocol
(with possibly different
types of queries) to read/write
(Figure 3 line 3). It
the
receiver through Ftoken (Figure 4 lines 7-9). To account for
instantiation of any ORAM, Ftoken is shown to receive any
query from receiver (indicated by wildcard ( ) in Figures 3
and 4). These queries are sent to Finternal and vice-versa.
For each interaction with mem, sstore encrypts (resp. de-
crypts) data sent to (resp. from) the receiver. Moreover, sstore
authenticates the data sent by the receiver. This completes the
description of execution of the program.
interacts with mem stored at
Initialization. To initialize the execution, the receiver ﬁrst
starts by storing the program and input inp in its memory
mem := mem0||inp||(cid:126)0. It commits to its input by invoking
“initialize” (Figure 4 line 3) and sending a Merkle root
of its input (HR = digest(inp)) along with header
:=
EncK1(cpustate0||HS||RAM.params). Ftoken initializes the
parameters, creates state and sends it to the receiver.
The ORAM and sstore are initialized during the ﬁrst
invocation to “execute one step”, i.e., t = 1 in Figure 4, line 4.
The required randomness is generated pseudorandomly based
on (K2, HS, HR) for ORAM and (K3, HS, HR) for sstore.
As mentioned in Section IV-A, during initialization, ORAM
in Ftoken reads mem0 word by word (not shown in ﬁgure).
For each word read, sstore performs Merkle tree veriﬁcation
with HS := digest(mem0). Similarly, when the input is read,
sstore veriﬁes it with HR := digest(inp). sstorestate and
oramstate uniquely determine the initialization state. Hence,
if the receiver rewinds, the execution trace remains the same.
The commitment HR ensures that the receiver cannot change
his input after invoking “initialize”. This completes the formal
scheme description of the UC functionality Ftoken.
D. Proof of Security
Theorem 1. Assuming that Enc is an INT-CTXT + IND-
CPA authenticated encryption scheme, ORAM satisﬁes obliv-
iousness (Section IV-A), sstore adopts a semantically secure
encryption scheme and a collision resistant Merkle hash tree
scheme and the security of PRF, the protocol described in
Figures 3 and 4 UC realizes FRAM
(Figure 2) in the Ftoken-
hybrid model.
obf
Fig. 6: HOP Architecture
Proof. We refer the reader to the full version of the paper for
a detailed proof of security.
V.
IMPLEMENTATION
The ﬁnal architecture of HOP (with the optimizations
from Section III) is shown in Figure 6. We now describe
implementation-speciﬁc details for each major component.
A. Modiﬁed RISC-V Processor and Scratchpad
We built HOP with a RISC-V processor which implements
a single stage 32bit integer base user-level ISA developed
at UC Berkeley [12]. A RISC-V C cross-compiler is used
to compile C programs to be run on the processor. The
RISC-V processor is modiﬁed to include a 16 KB instruction
scratchpad and a 512 KB data scratchpad (Section III-D). The
RISC-V processor and the compiler are modiﬁed accordingly
to accommodate the new scratchpad load/unload instructions
(described below). While HOP uses a single stage RISC-V
processor, our system does not preclude additional hardware
optimizations in commodity processors such as multi-issue,
branch predictor, etc. Our only requirement to support such
processor structures is the ability to calculate, for that program
over all inputs, a suitably conservative maximum runtime T .
New scratchpad instructions. For our prototype, we load
the scratchpad using a new instruction called spld, which is
speciﬁed as follows:
spld addr, #mem, spaddr
In particular, addr is used to specify the starting address of the
memory that needs to be loaded in scratchpad. #mem is the
number of memory locations to be loaded on the scratchpad
starting at addr and spaddr is the location in scratchpad
to store the loaded data. When the processor intercepts an
spld instruction, it performs two operations: 1. It writes back
the data stored in this scratchpad location to the appropriate
address in main memory (ORAM). 2. It reads #mem memory
locations starting at main memory address addr into scratch-
pad locations starting at spaddr. Of course, spld’s precise
design is not fundamental: we need a way to load an on-chip
memory such that it is still feasible to statically determine T .
Example scratchpad use. Figure 7 shows an example sce-
nario where spld is used. The program shows a part of the code
10
ModiﬁedRISC-VProcDataScratchpadORAMControllerInstructionScratchpadDRAM(ORAMBank)HostProcessorTrustBoundaryEncryptionUnitObfuscatedProgram+InputOutputEncryptionUnitint compLen = 0;
// initial processing
burrowsWheeler(chunk, compLen);
// more processing
writeOutput(chunk);
return compLen;
1: int decompress(char *chunk) {
2:
3:
4:
5:
6:
7:
8: }
9: void main() {
10:
11:
12:
13:
14:
15: }
}
char *inp = readInput();
for (i = 0; i < len(inp); i += len) {
spld(inp + i, CSIZE, 0);
len = decompress(inp + i);
Fig. 7: Example program using spld: bzip2
used for decompressing data using the bzip2 compression
algorithm. The algorithm decompresses blocks of compressed
data and outputs data of size CSIZE independently. Each block
of data may be read and processed multiple times during
different steps of compression (run-length encoding, Burrows-
Wheeler transform, etc.). Hence, each such block is loaded
into the scratchpad (line 12) before processing. This ensures
that every subsequent access to this data is served by the
scratchpad instead of memory (thereby reducing expensive
ORAM accesses). After decompressing the block, spld is
executed for the next block of compressed data.
B. ORAM Controller
We use a hardware ORAM controller called ‘Tiny ORAM’
from [19], [20]. The ORAM controller implements an ORAM
tree with 25 levels, having 4 blocks per bucket. Each block
is 512 bits (64 Bytes) to match modern processor cache line