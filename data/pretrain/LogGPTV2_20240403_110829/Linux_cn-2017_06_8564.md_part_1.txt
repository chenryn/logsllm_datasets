---
author: Jon Calhoun
category: 软件开发
comments_data:
- date: '2017-06-02 17:21:10'
  message: 使用Python这个功能没啥好说的
  postip: 120.197.32.8
  username: 来自广东广州的 Firefox 47.0|Windows 7 用户
count:
  commentnum: 1
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 8861
date: '2017-06-02 09:49:00'
editorchoice: false
excerpt: 在 Go 中同时有数组（array）和切片（slice）。这可能令人困惑，但一旦你习惯了，你会喜欢上它。请相信我。
fromurl: https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go
id: 8564
islctt: true
largepic: /data/attachment/album/201706/02/010040jzhp12rlrd2lhktp.jpg
permalink: /article-8564-1.html
pic: /data/attachment/album/201706/02/010040jzhp12rlrd2lhktp.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 在 Go 中同时有数组（array）和切片（slice）。这可能令人困惑，但一旦你习惯了，你会喜欢上它。请相信我。
tags:
- Golang
- 数组
thumb: false
title: 在 Go 中如何使用切片的容量和长度
titlepic: true
translator: geekpi
updated: '2017-06-02 09:49:00'
---
![](/data/attachment/album/201706/02/010040jzhp12rlrd2lhktp.jpg)
快速测试 - 下面的代码输出什么？
```
vals := make([]int, 5)  
for i := 0; i < 5; i++ {  
  vals = append(vals, i)
}
fmt.Println(vals)  
```
*[在 Go Playground 运行一下](https://play.golang.org/p/7PgUqBdZ6Z)*
如果你猜测的是 `[0 0 0 0 0 0 1 2 3 4]`，那你是对的。
*等等，什么？* 为什么不是 `[0 1 2 3 4]`?
如果你在测试中做错了，你也不用担心。这是在过渡到 Go 语言的过程中相当常见的错误，在这篇文章中，我们将说明为什么输出不是你预期的，以及如何利用 Go 的细微差别来使你的代码更有效率。
### 切片 vs 数组
在 Go 中同时有数组（array）和切片（slice）。这可能令人困惑，但一旦你习惯了，你会喜欢上它。请相信我。
切片和数组之间存在许多差异，但我们要在本文中重点介绍的内容是数组的大小是其类型的一部分，而切片可以具有动态大小，因为它们是围绕数组的封装。
这在实践中意味着什么？那么假设我们有数组 `val a [10]int`。该数组具有固定大小，且无法更改。如果我们调用 `len(a)`，它总是返回 `10`，因为这个大小是类型的一部分。因此，如果你突然需要在数组中超过 10 个项，则必须创建一个完全不同类型的新对象，例如 `val b [11]int`，然后将所有值从 `a` 复制到 `b`。
在特定情况下，含有集合大小的数组是有价值的，但一般而言，这不是开发人员想要的。相反，他们希望在 Go 中使用类似于数组的东西，但是随着时间的推移，它们能够随时增长。一个粗略的方式是创建一个比它需要大得多的数组，然后将数组的一个子集视为数组。下面的代码是个例子。
```
var vals [20]int  
for i := 0; i < 5; i++ {  
  vals[i] = i * i
}
subsetLen := 5
fmt.Println("The subset of our array has a length of:", subsetLen)
// Add a new item to our array
vals[subsetLen] = 123  
subsetLen++  
fmt.Println("The subset of our array has a length of:", subsetLen)  
```
*[在 Go Playground 中运行](https://play.golang.org/p/Np6-NEohm2)*
在代码中，我们有一个长度为 `20` 的数组，但是由于我们只使用一个子集，代码中我们可以假定数组的长度是 `5`，然后在我们向数组中添加一个新的项之后是 `6`。
这是（非常粗略地说）切片是如何工作的。它们包含一个具有设置大小的数组，就像我们前面的例子中的数组一样，它的大小为 `20`。
它们还跟踪程序中使用的数组的子集 - 这就是 `append` 属性，它类似于上一个例子中的 `subsetLen` 变量。
最后，一个切片还有一个 `capacity`，类似于前面例子中我们的数组的总长度（`20`）。这是很有用的，因为它会告诉你的子集在无法容纳切片数组之前可以增长的大小。当发生这种情况时，需要分配一个新的数组，但所有这些逻辑都隐藏在 `append` 函数的后面。
简而言之，使用 `append` 函数组合切片给我们一个非常类似于数组的类型，但随着时间的推移，它可以处理更多的元素。
我们再来看一下前面的例子，但是这次我们将使用切片而不是数组。
```
var vals []int  
for i := 0; i < 5; i++ {  
  vals = append(vals, i)
  fmt.Println("The length of our slice is:", len(vals))
  fmt.Println("The capacity of our slice is:", cap(vals))
}
// Add a new item to our array
vals = append(vals, 123)  
fmt.Println("The length of our slice is:", len(vals))  
fmt.Println("The capacity of our slice is:", cap(vals))
// Accessing items is the same as an array
fmt.Println(vals[5])  
fmt.Println(vals[2])  
```
*[在 Go Playground 中运行](https://play.golang.org/p/M_qaNGVbC-)*
我们仍然可以像数组一样访问我们的切片中的元素，但是通过使用切片和 `append` 函数，我们不再需要考虑背后数组的大小。我们仍然可以通过使用 `len` 和 `cap` 函数来计算出这些东西，但是我们不用担心太多。简洁吧？
### 回到测试
记住这点，让我们回顾前面的测试，看下什么出错了。
```
vals := make([]int, 5)  
for i := 0; i < 5; i++ {  
  vals = append(vals, i)
}
fmt.Println(vals)  
```
当调用 `make` 时，我们允许最多传入 3 个参数。第一个是我们分配的类型，第二个是类型的“长度”，第三个是类型的“容量”（*这个参数是可选的*）。
通过传递参数 `make([]int, 5)`，我们告诉程序我们要创建一个长度为 5 的切片，在这种情况下，默认的容量与长度相同 - 本例中是 5。
虽然这可能看起来像我们想要的那样，这里的重要区别是我们告诉我们的切片，我们要将“长度”和“容量”设置为 5，假设你想要在初始的 5 个元素*之后*添加新的元素，我们接着调用 `append` 函数，那么它会增加容量的大小，并且会在切片的最后添加新的元素。
如果在代码中添加一条 `Println()` 语句，你可以看到容量的变化。
```
vals := make([]int, 5)  
fmt.Println("Capacity was:", cap(vals))  
for i := 0; i < 5; i++ {  
  vals = append(vals, i)
  fmt.Println("Capacity is now:", cap(vals))
}
fmt.Println(vals)  
```
*[在 Go Playground 中运行](https://play.golang.org/p/d6OUulTYM7)*
最后，我们最终得到 `[0 0 0 0 0 0 1 2 3 4]` 的输出而不是希望的 `[0 1 2 3 4]`。
如何修复它呢？好的，这有几种方法，我们将讲解两种，你可以选取任何一种在你的场景中最有用的方法。
#### 直接使用索引写入而不是 `append`
第一种修复是保留 `make` 调用不变，并且显式地使用索引来设置每个元素。这样，我们就得到如下的代码：
```
vals := make([]int, 5)  
for i := 0; i < 5; i++ {  
  vals[i] = i
}
fmt.Println(vals)  
```
*[在 Go Playground 中运行](https://play.golang.org/p/JI8Fx3fJCU)*
在这种情况下，我们设置的值恰好与我们要使用的索引相同，但是你也可以独立跟踪索引。
比如，如果你想要获取 map 的键，你可以使用下面的代码。