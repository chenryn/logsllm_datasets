title:Refocusing in 802.11 Wireless Measurement
author:Udayan Deshpande and
Chris McDonald and
David Kotz
Refocusing in 802.11 Wireless Measurement
Udayan Deshpande1, Chris McDonald2, and David Kotz1
1 Institute for Security Technology Studies,
Department of Computer Science, Dartmouth College
2 School of Computer Science and Software Engineering,
The University of Western Australia
Abstract. The edge of the Internet is increasingly wireless. To under-
stand the Internet, one must understand the edge, and yet the measure-
ment of wireless networks poses many new challenges. IEEE 802.11 net-
works support multiple wireless channels and any monitoring technique
involves capturing traﬃc on each of these channels to gather a represen-
tative sample of frames from the network. We call this procedure channel
sampling, in which each sniﬀer visits each channel periodically, resulting
in a sample of the traﬃc on each of the channels.
This sampling approach may be suﬃcient, for example, for a system
administrator or anomaly detection module to observe some unusual
behavior in the network. Once an anomaly is detected, however, the
administrator may require a more extensive traﬃc sample, or need to
identify the location of an oﬀending device.
We propose a method to allow measurement applications to dynami-
cally modify the sampling strategy, refocusing the monitoring system to
pay more attention to certain types of traﬃc than others. In this paper
we show that refocusing is a necessary and promising new technique for
wireless measurement.
1 Introduction
The new edge of the Internet is wireless. At Dartmouth College, all undergradu-
ate students own wireless laptops, and take advantage of ubiquitous 802.11 cover-
age on campus. Most large enterprises provide wireless coverage for employee use.
Many cities are deploying or considering large-scale municipal wireless-access
networks. Although these networks were originally intended as a convenience,
an overlay for the wired network, for many users and in many places the wireless
network is of fundamental importance. To understand the edge of the Internet,
we need eﬀective wireless measurement.
Consequently, there are many motivations for monitoring wireless networks,
including network management, security, and research. We consider situations
where the network of wireless access points (APs) is augmented with interspersed
wireless air monitors (AMs). These dedicated sniﬀers can provide real-time cap-
ture of wireless traﬃc and measurement of MAC-layer conditions for network
analysis and management [6], and intrusion-detection systems (IDS) can analyze
live streams of traﬃc from these AMs to monitor the network for attacks [2,9].
M. Claypool and S. Uhlig (Eds.): PAM 2008, LNCS 4979, pp. 142–151, 2008.
c(cid:2) Springer-Verlag Berlin Heidelberg 2008
Refocusing in 802.11 Wireless Measurement
143
Wireless (802.11) networks allow traﬃc on multiple parallel channels, and yet
all practical monitoring systems can listen to only one or two channels at a
time. This approach is limited because there may be a need to monitor all the
channels (e.g. to locate the presence of ad-hoc networks or rogue APs.) If there
is only one channel to be monitored, the radio can simply monitor that channel
continuously [6]. If no speciﬁc channel is desired, most scanning systems simply
capture traﬃc on all channels with a predeﬁned time spent on each channel [11].
Earlier work [2,6] acknowledges the need for smart channel-sampling strategies
in security and management applications.
Our earlier work [9] demonstrates how to improve the capture by dynamically
scheduling AMs to spend more time on channels with higher frame rates. In
this work we extend our sampling philosophy by demonstrating a technique
and framework that allows external applications— such as an administrator’s
console, or an IDS– to dynamically instruct the AMs to put more eﬀort into
capturing traﬃc that meets a given condition.
We describe the traﬃc trace that a monitoring application requires at any
time by its focus. An application can, of course, ﬁlter the stream of captured
frames to suit its interests, but we want to allow the application to refocus
the measurement system to skew its ongoing traﬃc capture towards this new
focus, capturing more of the desired frames. We recognize that many important
scenarios require the capture of a baseline sample, suitable for basic monitoring
by multiple applications, and simultaneously a more focused sample(s) required
by one or more applications.
For example, an application may be content with a traﬃc trace that consists
of equal samples from each of the channels being monitored in the network. After
observing some event, it may wish to refocus most of the sampling eﬀort on the
channels where a speciﬁc MAC address was observed. This application could
be a WLAN intrusion-detection system, an application that displays locations
of 802.11 devices around an oﬃce, or a system that monitors the quality of
voice-over-wireless calls.
We claim that dynamic refocusing helps the wireless-network measurement
system be more responsive to the needs of the subscribers of measured data. We
describe a method and a tool that enables refocusing.
2 Related Work
We draw on related work in wireless measurement and 802.11 security. Few large-
scale 802.11 measurement studies have attempted to capture wireless frames
from the air. Although a few papers characterize traﬃc at meetings and confer-
ences [10,13], none consider channel sampling or refocusing. To our knowledge,
no commercial products provide refocusing, although some do allow channel
sampling; for example, Aruba Networks [1], and Kismet [11]. Our own ear-
lier work [9] focused on the challenge of sampling traﬃc from many channels,
and merging frames from many AMs; in this paper we look at the problem of
144
U. Deshpande, C. McDonald, and D. Kotz
refocusing through a large-scale experimental deployment. We compare one of
the strategies used in the previous paper with our refocusing mechanism.
Security in 802.11 remains a challenge, because there are many vulnerabilities
in the protocol and its implementations [2,4,14, for example]. We expect refo-
cusing to help in capturing more information about an ongoing attack that is
ﬁrst detected during baseline sampling of a network.
A few recent papers describe oﬄine tools to capture and merge wireless frames
from multiple AMs located around a building [8,12,15]. These papers concentrate
on methods for synchronizing traces collected across multiple AMs into a sin-
gle chronological trace, inferring missing frames, reconstructing transport-layer
ﬂows, and detecting performance artifacts and network ineﬃciencies. Most of
these tools work only on oﬄine traces. One, Jigsaw [8], requires four radios per
location, clearly a more expensive solution. When few AMs are available, each
radio must sample many channels, and our system of refocusing helps to gather
the most relevant information with limited resources. In Jigsaw [8], the authors
place 39 monitoring “pods” around the building with four radios each. Each ra-
dio (AM) monitors a separate channel (Channels 1, 6, 11 and another “center”
frequency). In their coverage experiments, their clients associate with APs and
transfer data using scp. They report that their sniﬀers capture about 90% of all
the scp frames sent to and from the clients. This experiment assumes that only
traﬃc on the same channels as the APs that can be observed by both the AM
and the client, or that can be observed by both the AM and the AP, needs to
be monitored. There is no experiment in the paper that measures the coverage
in the scenario where only the AP or the client is in the range of a transmitting
radio but not the nearby AM. Due to the static allocation of channels to AMs,
if there is an AM in range, it may be on a diﬀerent channel. This case is, of
course, important in a security scenario. With the increasing numbers of chan-
nels available for transmission in 802.11 networks, simply increasing the number
of radios in a “pod” cannot be the answer. It is clear, therefore, that channel
sampling is the only practical technique to cover a large monitoring area. The
claim made in the Jigsaw paper [7] that monitoring platforms from DAIR [2]
and Jigsaw provide “the ability to observe every link-layer network transmission
across location, frequency and time” is overly optimistic.
The DAIR system [2] uses USB NICs to turn an enterprise’s desktop comput-
ers into AMs, and could beneﬁt from our sampling techniques for collection of
traﬃc from production networks. The newer DAIR-based network management
system [6] simply assigns the USB NICs to the channels of the nearby access
points, missing important security-related traﬃc on non-production channels.
3 Dingo: A Coordinated Sniﬀer
We developed a set of software components, named dingo,1 that collectively
enable a variety of packet sampling policies to be deﬁned and controlled, and
1 A dingo is an Australian native dog renowned for its ability to track prey in bleak
conditions.
Refocusing in 802.11 Wireless Measurement
145
their eﬀects monitored. dingo comprises two main components: amsniﬀer, which
runs on each AM device, and amcontroller, which runs on a more powerful
central Linux server. dingo also employs an additional software component, a
merger developed as part of earlier work, and described below. Figure 1 shows
the principal components of this software and the communication paths between
them.
Dingo
AM
amsniffer
predicates
statistics
AM
amsniffer
frames
frames
amcontroller
frames
Merger
frames
Application
Fig. 1. The Sampling Architecture
The amsniﬀer component runs on each AM; multi-radio AMs can run an
instance for each radio. (In our experiments we found that it is more eﬀective
to invoke two instances of amsniﬀer, each listening on a diﬀerent interface, than
it is for a single process to monitor two interfaces in an interleaved manner.)
Command-line options to amsniﬀer indicate which wireless interface should be
employed, the default sniﬃng policy to be followed, and the destination for
captured frames.
The amsniﬀer captures features from each frame header and transmits it over
a wired Ethernet infrastructure to the merger using UDP/IP. The role of the
merger is to interleave the AMs’ streams of frames into a chronologically con-
sistent ordering, and to remove frames captured in duplicate by multiple AMs.
For duplicates, the output record includes a list of the receiving AMs and signal
strength. The merger’s output is forwarded to subscribing applications and to
our amcontroller.
The role of the amcontroller is to determine scheduling policies and to dis-
seminate them to the AMs. Policies specify a sequence of channel numbers,
and the duration for which the interface should listen on each channel. A typ-
ical scheduling cycle will involve visiting each channel, collecting a variety of
statistics about the traﬃc observed on each channel. Each instance of amsniﬀer
executes its current scheduling policy for a requested number of cycles or until
directed by amcontroller to execute a new policy, either an existing pre-stored
146
U. Deshpande, C. McDonald, and D. Kotz
policy or one computed by the amcontroller. We found our devices can experi-
ence a signiﬁcant delay when changing from one channel to another, and that
this delay is minimized by visiting requested channels in ascending order (ap-
prox. 30ms when ascending, 300ms when descending), so we limit all schedules
to this order, descending only once at the end of the cycle.
Notice that our approach does not require speciﬁc policies to be “hard-wired”
into amsniﬀer. Each amsniﬀer may receive a distinct scheduling policy, perhaps
determined from the type and extent of traﬃc recently sampled by that amsniﬀer
and its neighbors, or to consistently monitor traﬃc in a particular geographical
region. The ability to remotely program the AMs provides the greatest oppor-
tunity to experiment with new sampling strategies.
While sampling traﬃc, each amsniﬀer maintains a small number of counters,
including the number of frames captured on each channel, the total length of
those frames, and the number of frames matching one or more Boolean predi-
cates provided by the amcontroller. At the end of each cycle, amsniﬀer sends
its counters to the amcontroller for consideration in future scheduling decisions.
The range of policies described in our earlier work [9] are based on these simple
counts gathered at the AMs. For example, a policy employing proportional sam-
pling spends time on each channel proportional to the recently observed frame
rate on that channel.
The predicates are written in a small language, similar to C’s expressions. The
language supports all precedence levels, equality and relational operators, and
data types including integer, Boolean, string, and MAC address. About 30 key-
words in the language correspond to the attributes of each captured frame and
the wireless environment in which it was captured. Our predicates provide access
to the 802.11 header attributes and a few PHY-layer attributes, and are analo-
gous to the expressions supported by the popular tcpdump utility and Berkeley
packet ﬁlter. For example, predicates may determine whether a captured frame
was a control, management, or data frame, may examine the source, destination,
and BSSID MAC addresses of frames, examine a frame’s length, payload length,
the channel on which it arrived, or its relative signal strength.
To support refocusing, dingo’s amcontroller uses the predicate counters in a
modiﬁed form of proportional sampling, scheduling each amsniﬀer to spend time
on each channel in proportion to the number of frames matching the predicate.
In this manner, amsniﬀers focus on the traﬃc of interest, while still devoting
a small amount of time on other channels to determine if the traﬃc pattern
is observed there. For example, the predicate "src == 00:16:cb:b7:18:82"
could be used to focus on traﬃc from a stolen laptop’s wireless interface. Any