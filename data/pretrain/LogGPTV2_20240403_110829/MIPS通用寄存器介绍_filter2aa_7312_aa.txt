###  MIPS通用寄存器介绍
MIPS 有 32 个通用寄存器 （General purpose registers），以美元符号 （`$`） 表示。可以表示为 `$0~$31`，也可以用寄存器名称表示如，`$sp` 、 `$t9` 、`$fp` 等等。
| Register Number | Conventional Name | Usage                                                  | Usage                                                     |
| --------------- | ----------------- | ------------------------------------------------------ | --------------------------------------------------------- |
| $0              | $zero             | Hard-wired to 0                                        |                                                           |
| $1              | $at               | Reserved for pseudo-instructions                       |                                                           |
| $2 - $3         | $v0, $v1          | Return values from functions                           | 保存表达式或者函数返回值                                  |
| $4 - $7         | $a0 - $a3         | Arguments to functions - not preserved by subprograms  | 函数的参数                                                |
| $8 - $15        | $t0 - $t7         | Temporary data, not preserved by subprograms           |                                                           |
| $16 - $23       | $s0 - $s7         | Saved registers, preserved by subprograms              |                                                           |
| $24 - $25       | $t8 - $t9         | More temporary registers, not preserved by subprograms | 临时寄存器，作为 $t0 - $t7 的补充，$t9 通常与调用函数有关 |
| $26 - $27       | $k0 - $k1         | Reserved for kernel. Do not use.                       |                                                           |
| $28             | $gp               | Global Area Pointer (base of global data segment)      |                                                           |
MIPS 作为一种 load-store 架构，意味着当我们要访问内存必须要通过加载和存储指令才能访问。所有其他指令（add，sub，mul，div等等）必须从寄存器获取其操作数并将其结果存储在寄存器中。例如下面的例子：
```
    sum = x + y
```
我们假设 sum 和 x , y 是程序中的变量，其 MIPS 汇编表示为：
```
    # sum = x + y
    lw      $t0, x          # Load x from memory into a CPU register
    lw      $t1, y          # Load y from memory into a CPU register
    add     $t0, $t0, $t1   # Add x and y
    sw      $t0, sum        # Store the result from the CPU register to memory
```
### MIPS特殊寄存器介绍
MIPS32 架构还定义了3个特殊寄存器，分别是 PC（程序计数器）、HI （乘除结果高位寄存器）和 LO （乘除结果低位寄存器）。在进行乘运算的时候，HI 和 LO 保存乘法的结果，其中 HI 保存高32位，LO 保存低32位。而在除法运算中，HI 保存余数，LO 保存商。
### MIPS指令**ADD – Add (with overflow)**
| Description: | Adds two registers and stores the result in a register |
| ------------ | ------------------------------------------------------ |
| Operation:   | $d = $s + $t; advance_pc (4);                          |
| Syntax:      | add $d, $s, $t                                         |
| Encoding:    | `0000 00ss ssst tttt dddd d000 0010 0000`              |
### MIPS指令**ADDI -- Add immediate (with overflow)**
| Description: | Adds a register and a sign-extended immediate value and stores the result in a register |
| ------------ | ------------------------------------------------------------ |
| Operation:   | $t = $s + imm; advance_pc (4);                               |
| Syntax:      | addi $t, $s, imm                                             |
| Encoding:    | `0010 00ss ssst tttt iiii iiii iiii iiii`                    |
### MIPS指令**ADDIU -- Add immediate unsigned (no overflow)**
| Description: | Adds a register and a sign-extended immediate value and stores the result in a register |
| ------------ | ------------------------------------------------------------ |
| Operation:   | $t = $s + imm; advance_pc (4);                               |
| Syntax:      | addiu $t, $s, imm                                            |
| Encoding:    | `0010 01ss ssst tttt iiii iiii iiii iiii`                    |
### MIPS指令**ADDU -- Add unsigned (no overflow)**
| Description: | Adds two registers and stores the result in a register |
| ------------ | ------------------------------------------------------ |
| Operation:   | $d = $s + $t; advance_pc (4);                          |
| Syntax:      | addu $d, $s, $t                                        |
| Encoding:    | `0000 00ss ssst tttt dddd d000 0010 0001`              |
### MIPS指令**AND -- Bitwise and**
| Description: | Bitwise ands two registers and stores the result in a register |
| ------------ | ------------------------------------------------------------ |
| Operation:   | $d = $s & $t; advance_pc (4);                                |
| Syntax:      | and $d, $s, $t                                               |
| Encoding:    | `0000 00ss ssst tttt dddd d000 0010 0100`                    |
### MIPS指令**ANDI -- Bitwise and immediate**
| Description: | Bitwise ands a register and an immediate value and stores the result in a register |
| ------------ | ------------------------------------------------------------ |
| Operation:   | $t = $s & imm; advance_pc (4);                               |
| Syntax:      | andi $t, $s, imm                                             |
| Encoding:    | `0011 00ss ssst tttt iiii iiii iiii iiii`                    |
### MIPS指令**BEQ -- Branch on equal**
| Description: | Branches if the two registers are equal                     |
| ------------ | ----------------------------------------------------------- |
| Operation:   | if $s == $t advance_pc (offset = 0 advance_pc (offset = 0 $31 = PC + 8 (or nPC + 4); advance_pc (offset  0 advance_pc (offset << 2)); else advance_pc (4); |
| Syntax:      | bgtz $s, offset                                           |
| Encoding:    | `0001 11ss sss0 0000 iiii iiii iiii iiii`                 |
### MIPS指令**BLEZ -- Branch on less than or equal to zero**
| Description: | Branches if the register is less than or equal to zero     |
| ------------ | ---------------------------------------------------------- |
| Operation:   | if $s <= 0 advance_pc (offset << 2)); else advance_pc (4); |
| Syntax:      | blez $s, offset                                            |
| Encoding:    | `0001 10ss sss0 0000 iiii iiii iiii iiii`                  |
### MIPS指令**BLTZ -- Branch on less than zero**
| Description: | Branches if the register is less than zero                |
| ------------ | --------------------------------------------------------- |
| Operation:   | if $s < 0 advance_pc (offset << 2)); else advance_pc (4); |
| Syntax:      | bltz $s, offset                                           |
| Encoding:    | `0000 01ss sss0 0000 iiii iiii iiii iiii`                 |
### MIPS指令**BLTZAL -- Branch on less than zero and link**
| Description: | Branches if the register is less than zero and saves the return address in $31 |
| ------------ | ------------------------------------------------------------ |
| Operation:   | if $s < 0 $31 = PC + 8 (or nPC + 4); advance_pc (offset << 2)); else advance_pc (4); |
| Syntax:      | bltzal $s, offset                                            |
| Encoding:    | `0000 01ss sss1 0000 iiii iiii iiii iiii`                    |
### MIPS指令BNE -- Branch on not equal
| Description: | Branches if the two registers are not equal                 |
| ------------ | ----------------------------------------------------------- |
| Operation:   | if $s != $t advance_pc (offset << 2)); else advance_pc (4); |
| Syntax:      | bne $s, $t, offset                                          |
| Encoding:    | `0001 01ss ssst tttt iiii iiii iiii iiii`                   |
### MIPS指令**DIV -- Divide**
| Description: | Divides $s by $t and stores the quotient in $LO and the remainder in $HI |
| ------------ | ------------------------------------------------------------ |
| Operation:   | $LO = $s / $t; $HI = $s % $t; advance_pc (4);                |
| Syntax:      | div $s, $t                                                   |
| Encoding:    | `0000 00ss ssst tttt 0000 0000 0001 1010`                    |
### MIPS指令**DIVU -- Divide unsigned**
| Description: | Divides $s by $t and stores the quotient in $LO and the remainder in $HI |
| ------------ | ------------------------------------------------------------ |
| Operation:   | $LO = $s / $t; $HI = $s % $t; advance_pc (4);                |
| Syntax:      | divu $s, $t                                                  |
| Encoding:    | `0000 00ss ssst tttt 0000 0000 0001 1011`                    |
### MIPS指令**J -- Jump**
| Description: | Jumps to the calculated address                     |
| ------------ | --------------------------------------------------- |
| Operation:   | PC = nPC; nPC = (PC & 0xf0000000) \| (target << 2); |
| Syntax:      | j target                                            |
| Encoding:    | `0000 10ii iiii iiii iiii iiii iiii iiii`           |
### MIPS指令**JAL -- Jump and link**
| Description: | Jumps to the calculated address and stores the return address in $31 |
| ------------ | ------------------------------------------------------------ |
| Operation:   | $31 = PC + 8 (or nPC + 4); PC = nPC; nPC = (PC & 0xf0000000) \| (target << 2); |
| Syntax:      | jal target                                                   |
| Encoding:    | `0000 11ii iiii iiii iiii iiii iiii iiii`                    |
### MIPS指令**JR -- Jump register**
| Description: | Jump to the address contained in register $s |
| ------------ | -------------------------------------------- |
| Operation:   | PC = nPC; nPC = $s;                          |
| Syntax:      | jr $s                                        |
| Encoding:    | `0000 00ss sss0 0000 0000 0000 0000 1000`    |
### MIPS指令**LB -- Load byte**
| Description: | A byte is loaded into a register from the specified address. |
| ------------ | ------------------------------------------------------------ |
| Operation:   | $t = MEM[$s + offset]; advance_pc (4);                       |
| Syntax:      | lb $t, offset($s)                                            |
| Encoding:    | `1000 00ss ssst tttt iiii iiii iiii iiii`                    |
### MIPS指令**LUI -- Load upper immediate**
| Description: | The immediate value is shifted left 16 bits and stored in the register. The lower 16 bits are zeroes. |