parse_qs and then urlencode, things will changed.
test code and result
Thank you for this great lib,
the result of parse_qs is something like {'oauth': ['sig'], 'status': ['hanzi
ok']}  
urlencode can't handle list as dictionary value without doseq  
doseq does three things,
  1. if value is not list or unicode, behave like doseq=False
  2. if value is unicode, decode unicode
  3. if value is list, handle list as dict value
it will fall to decode if the unicode value is not encoded in ascii, Chinese
for example.  
but _encode_params already made sure that no unicode will pass to urlencode,  
so I think it's safe to add doseq.
snippet from Python2.7/Lib/urllib.py
       if not doseq:
            # preserve old behavior
            for k, v in query:
                k = quote_plus(str(k))
                v = quote_plus(str(v))
                l.append(k + '=' + v)
        else:
            for k, v in query:
                k = quote_plus(str(k))
                if isinstance(v, str):
                    v = quote_plus(v)
                    l.append(k + '=' + v)
                elif _is_unicode(v):
                    # is there a reasonable way to convert to ASCII?
                    # encode generates a string, but "replace" or "ignore"
                    # lose information and "strict" can raise UnicodeError
                    v = quote_plus(v.encode("ASCII","replace"))
                    l.append(k + '=' + v)
                else:
                    try:
                        # is this a sufficient test for sequence-ness?
                        len(v)
                    except TypeError:
                        # not a sequence
                        v = quote_plus(str(v))
                        l.append(k + '=' + v)
                    else:
                        # loop over the sequence
                        for elt in v:
                            l.append(k + '=' + quote_plus(str(elt)))
it's the first time I use github, I'm sorry for the duplicated pull request  
reallly appreciate for this great lib, it helps me a lot.  
and I'm looking forward to oauth feature so I don't need to roll my own:)
    @@ -230,7 +230,7 @@ class Request(object):
                 for (k, v) in data.items():
                     result[k.encode('utf-8') if isinstance(k, unicode) else k] \
                          = v.encode('utf-8') if isinstance(v, unicode) else v  
    -            return result, urllib.urlencode(result)
    +            return result, urllib.urlencode(result, doseq=True)
             else:
                 return data, data