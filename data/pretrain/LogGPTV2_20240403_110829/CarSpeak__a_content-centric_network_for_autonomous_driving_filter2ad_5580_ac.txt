ted subtrees contain paths of all vertices to the root of the region.
Hence, vertices at higher levels in the tree are less likely to be lost
than vertices at lower levels. Thus, the loss of a packet typically
results in the loss of resolution as opposed to complete loss of in-
formation.
7. CONTENT CENTRIC MAC
CarSpeak adopts a content-centric MAC that focuses on the ap-
plication’s goals and requirements. In CarSpeak, regions, as op-
posed to senders, contend for the medium. The MAC tracks region
requests and allocates to each region a medium share proportional
0 ? 1 0 0 ? 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 0 1 ? ? ? ? 0 0 0 ? 0 0 ? 1 0 0 ? 0 1 0 0 1 1 1 1 0 0 0 ? 0 1 1 1 0 0 1 0 0 0 0 ? ? 0 0 1 1 ? 0 1 0 ? 0 0 0 ? 0 0 ? 0 Symbol Meaning
Si
CWmin,i
Rr
Pi,r
Node i’s desirable share of the medium
Contention window of node i
Region r’s desirable share of the medium
Probability of transmitting packets from
region r at node i
The quality-function at node i for region r
Q(i, r)
Table 1— Table of Notations. We use i to iterate over nodes, and
r to iterate over regions
to how often it is requested. Further, it ensures that the number of
transmissions each node makes on behalf of a region is proportional
to the quality of information that the node has about the region as
measured by the function Q(i, r). Below we describe how the MAC
performs these functions.
7.1 Tracking Region Requests
The content-centric MAC handles requests for different regions
both from its own vehicle and other vehicles. The module records
REQs, a measure of requests made for each region s by various
nodes. In our implementation, REQs is set to one plus the number
of requests made for region s. This is to ensure that in the absence
of requests all regions get equal share of the medium.
Internal Requests: When the MAC receives requests from its own
car, it broadcasts them to other vehicles over the wireless medium.
It also keeps track of past requests and times them out after a
minute. When packets with region data arrive, the module checks
whether they answer a request that has not timed out, in which case
it passes them to the compression module for decoding.
External Requests: The MAC actively listens on the medium to
track the requests made for various regions, and to identify which
regions are observed by vehicles in the network. When a vehicle
receives a request for region s, it updates REQs accordingly, which
biases it to transmit more information about region s, if available.
7.2 Region Contention
CarSpeak aims to share the medium among regions proportion-
ally to the number of requests they receive.
(a) Sharing the Medium Among Regions. Let Rr be region’s r
share of the wireless medium, i.e., the percentage of transmissions
that should describe region r. We can write:
pos((cid:80)
s pos((cid:80)
(cid:80)
Rr =
i Q(i, r))REQr
(2)
where REQs
i Q(i, s))REQs
pos(x) = 1 if x > 0 and 0 otherwise. The function pos((cid:80)
is a measure of requests made for region s, and
i Q(i, r))
ensures that only regions for which some node has information ac-
quire a share of the medium. Regions that no node has sensed (i.e.,
Q(i, r) = 0,∀i) do not get a share of the medium.
But how does a node obtain the information it needs to substitute
in the above equation in order to compute Rr? CarSpeak dissemi-
nates this information as annotation on the data packets transmitted
by each node. Speciﬁcally, every CarSpeak packet sent by node j
includes a list of region ids for which node j has information and
their corresponding Q(j, r)’s. By default this list has 5 entries for a
total of 40 bytes (6 bytes for region ids and 2 bytes for Q(j, r)).
CarSpeak nodes listen on the medium and collects information
about the different regions and quality of information that other
nodes have for these regions. They use this information to popu-
late a table of region ids, and the quality of information the vari-
ous nodes have for each region. A garbage collection thread that
runs every 10 seconds multiplies Q(i, r) values by a factor µ,
(0 < µ < 1) in order to age-out quality information that is out-
dated it also timeout requests that have not been refreshed in the
past minute.
(b) Controlling Medium Access. Using its estimate of the share
of the various regions of the medium, Rr’s, a node can estimate how
often it should transmit, i.e., its own share of the medium. Let Si be
the medium share of node i. Node i’s share of the medium is the
sum of its contribution to the transmissions related to all regions
for which i has data. This contribution is also proportional to the
quality of information the node has about each of these regions.
Thus:
(cid:88)
r
Q(i, r)(cid:80)
j Q(j, r)
Si =
Rr
.
(3)
Conceptually, once a node knows its share of the wireless
medium, it should be able to transmit according to that share. At
ﬁrst, it seems that the node can achieve this goal by simply waiting
for a transmission opportunity – i.e., the medium being idle – and
using such opportunities as often as its share permits. For example,
if its share is 20% of the medium time, it then transmits once every
ﬁve times it senses the medium to be idle. Unfortunately, this ap-
proach does not work in practice. In practice, the decision to trans-
mit upon the detection of an idle medium is performed in the card
itself and cannot be controlled in software.
Thus, we will enforce the node share indirectly by controlling
its contention window CWmin. The relation between the contention
window and the resulting share of the wireless medium is given
in [1] as:
CWmin,i =
.
(4)
2 − Si
Si
2
2
The above relation is derived from a detailed Markov chain model
of the progression of the contention window in 802.11 [1]. Intu-
itively, however, one can understand it as follows: In 802.11 a node
picks a random value between 0 and CWmin. Thus, the average con-
tention value is CWmin+1
. Thus, on average the node accesses the
medium once every CWmin+1
, and hence its share of the medium
Si =
(c) Partitioning a Node’s Transmissions Among Regions. While
the above ensures that the node gets the proper share of the medium,
the node still has to divide this share between various regions de-
pending on: 1) each region’s share of the medium, and 2) the quality
of information the node has about the region. To achieve this goal,
whenever the node has an opportunity to transmit a packet, it picks
the packet from region r with the following probability:
1+CWmin
.
2
Rr × Q(i,r)(cid:80)
(cid:80)
s Rs × Q(i,s)(cid:80)
j Q(j,r)
j Q(j,s)
× Q(i, r)(cid:80)
j Q(j, r)
=
Rr
Si
(5)
Pi,r =
Clearly(cid:80)
r Pi,r = 1, for every wireless node i.
The above is implemented using a non-blocking UDP socket.
Whenever the socket has space for new packets, the node picks
those packets from the regions according to the probabilities Pi,r’s.
7.3 Scaling
The above design has an important side beneﬁt: it provides con-
gestion control for 802.11 broadcast mode. Speciﬁcally, the pres-
ence of many 802.11 senders can lead to excessive collisions and
a congestion collapse. This effect is countered in 802.11 unicast
mode by the fact that a node that does not receive an ACK for its
packet, backs off and doubles its contention window. Hence, during
congestion, nodes tend to back off and reduce the number of colli-
sions. In contrast, 802.11 broadcast mode does not have ACKs and
hence it cannot use the lack of ACK as a signal of congestion to
which it reacts by backing off. This leaves the broadcast mode with
no protection against medium congestion. The resulting problem is
typically referred to as a broadcast storm [19, 30]. In contrast, Car-
Speak scales with a large number of senders because senders do not
contend for the medium. It also scales with a large number of re-
gions because as the number of regions increases the share of each
region decreases because Rr depends on a region’s share of the total
number of requests.
8. DISCUSSION
Figure 8—CarSpeak’s Indoor Testbed. The blue circles denote
candidate locations for robots and gray boxes denote obstacle loca-
tions.
In this section, we discuss some design considerations in imple-
menting CarSpeak:
Communicating Processed Information. An important design de-
cision is whether CarSpeak nodes should send processed sensor in-
formation, such as locations of pedestrians or whether a road is
congested, instead of raw sensor information. While this approach
may be sufﬁcient for specialized scenarios, they are not suitable for
general-purpose communication between autonomous vehicles. In
the most general applications, transmitting nodes in networks of au-
tonomous vehicles need not know how receivers plan to process this
information. Furthermore, different receivers may process the same
sensor information to achieve different objectives. Native sensor in-
formation, available at different resolutions, is the only representa-
tion generic enough to cater to varied objectives, such as evaluating
road congestion, detecting pedestrians, avoiding vehicles, enabling
better localization, route planning, and curb-detection amongst oth-
ers.
One Hop vs. Multi-Hops. One design decision is whether CarS-
peak nodes should relay requests, in an attempt to ﬁnd the rele-
vant information at vehicles that are multiple hops away from the
originator. We chose not to do so, i.e., we do not make vehicles
forward region requests. Our reasoning is based on the tradeoff be-
tween bandwidth consumption and the value of information about
relatively distant locations. CarSpeak targets urban environments
and speeds lower than 20 miles per hour. For autonomous driving
applications, and even with a conservative estimate, a car should
not need information from locations that are farther than half to
one minute away. At the above speeds, this translates into locations
that are 100 to 200 meters away, which are typically within radio
range.2 Hence, we believe that limiting access to only information
that is within the radio range of the requester is a reasonable design
choice that enables each region to expend its wireless bandwidth on
serving its local, and hence most urgent, requests.
Regular Trafﬁc. CarSpeak can support 802.11 trafﬁc unrelated to
autonomous driving as well. Such trafﬁc can be represented sim-
ply as a virtual region in space. The designer can decide how to
weigh this region in comparison to autonomous driving regions.
For example, one may want to divide the medium equally between
autonomous driving and other applications by setting Rvirtual = 0.5,
in which case the autonomous driving application can use half the
medium share (as well as any resource unused by the virtual re-
gion).
9.
IMPLEMENTATION
We implement CarSpeak’s multi-resolution naming, addressing,
and information sharing system as a module (“ROS node”) in the
2For example, the Dedicated Short Range Communication (DSRC)
technology, which was adopted by the intelligent transportation
system (ITS) has a radio range of up to 1000 meters [21].
Robot Operating System. We operate ROS on the Ubuntu 11.04 dis-
tribution (with linux kernel version 2.6.38-8-generic), that runs on
the ASUS netbooks attached to the iCreate robots. Our implemen-
tation of CarSpeak’s multi-resolution naming system maintains the
Octree datastructure with L = 8 and three levels of region sub-trees.
We also implement CarSpeak’s garbage collection as a ROS timer
thread with a threshold of 10 seconds for the freshness of sensor
information.
Our implementation of CarSpeak’s multi-resolution naming sys-
tem subscribes to multiple topics containing sensor information in
ROS’s PointCloud format. It publishes the /car_speak topic, in
ROS’s PointCloud format, based on UDP packets received from
the MAC layer. In this sense, CarSpeak behaves as any other sen-
sor module in ROS. We implement CarSpeak’s Octree-based com-
pression framework to sub-sample the Octree and generate UDP
packets to be forwarded to the MAC module.
CarSpeak’s content centric MAC implementation has two key
requirements: 1) The ability to modify channel access parameters
such as the contention window size and, 2) Accurate timing to en-
sure packets are transmitted by the driver with minimum queuing
delay. We chose the open-source ath9k driver+ﬁrmware for Atheros
802.11n based chipsets because it met our requirements. In our im-
plementation, whenever the driver receives a packet (over-the-air or
from userspace), it searches for a CarSpeak header within the pay-
load of the packet to identify it as a CarSpeak packet. If the packet is
from userspace, the driver places it in a queue corresponding to the
region for which the packet contains information. The driver does
not directly transmit the packet because the next packet to trans-
mit (based on region sampling probabilities) may not correspond
to the region for which the packet contains information. For actual
transmission, we create a separate high priority thread within the
driver to schedule packets based on the region sampling probabili-
ties discussed in Section §3. Once a region is chosen for transmis-
sion, the thread dequeues the packet from the region’s queue, sets
the CWMin for the hardware’s queue, and writes the packet into the
hardware’s queue. To minimize waisted airtime, we schedule this