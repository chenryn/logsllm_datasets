shared memory which is part of the protected SANCTUARY
memory region assigned to the SANCTUARY core.
SANCTUARY allows two different implementation variants for
SA to TA communication: (i) the OP-TEE driver is included in
Zircon and the world switch to the secure world is performed
by the SANCTUARY core itself, and (ii) the connection to
the secure world is triggered by the SA’s corresponding LA.
This means an SA ﬁrst has to communicate with the normal
world before it can communicate with a TA. However, the
data exchanged between TA and SA remains unaccessible to
the LA. We implement the second variant in our prototype
since it requires less modiﬁcations to the Zircon kernel.
Sanctuary Teardown. The three-step teardown of the SANC-
TUARY is triggered by the LA. The ﬁrst step is to shut down
the SANCTUARY core when the LA signals to the SA that
its services are not needed anymore. Subsequently, the SA
saves its state (if needed) using e.g. the sealing services. Next,
internal clean up actions bring the Zircon kernel back in its
original state and invalidate the L1 cache to prevent data
leakage. Then, the SL signals the STA that it successfully
performed the clean up action. Subsequently, the TF is used
to shut down the core. The second step is to unlock the
SANCTUARY memory. Analogously to the locking in the setup
phase this is performed by the STA. Again, the modiﬁed TF
checks that the SANCTUARY core is indeed shut down before
performing the world switch and handing control over to the
STA. The STA checks if the SA was able to perform its clean
up action. Then, the secure shared memory and Sanctuary Data
memory are zeroed to prevent leakage of SA data. Finally,
the conﬁguration of the TZC-400 is reverted such that the
SANCTUARY memory region and the SANCTUARY core are
freed. In the third step of the teardown process, the KM uses
the Linux hotplug mechanism to reclaim the available core.
VI. SECURITY ANALYSIS
The goal of SANCTUARY is to protect against a strong attacker,
as described by our adversary model (see Section III-A). We
also derived the requirements for our design of SANCTUARY
in Section III-B. For a systematic analysis of SANCTUARY,
we will now look at all possible attack vectors that are
available to an adversary in our threat model. In particular,
we can see from Figure 2 that attacks can originate from three
different locations on the platform: (i) the normal-world user
space, (ii) the normal-world OS, and (iii) a malicious SA.
In all three cases, the goal of the attacker is to compromise
the integrity or data conﬁdentiality of a victim SA or gain
control over the LOS. This can happen at any point in time
during the life-cycle of an SA (i.e., setup, boot, execution,
or tear-down), and hence, we will discuss each case in the
following. In particular, malicious code in the normal world
can aim at either manipulating the SL and SA binaries before
they are loaded (Section VI-A), overcome the isolation of
SANCTUARY (Section VI-B), manipulate persistently stored
data of an SA (Section VI-C), or extract information from
an SA via the cache (Section VI-D). We discuss the case of
malicious SAs in Section VI-E. As we will show, an adversary
cannot compromise the security of SANCTUARY in any of
those cases, and does not gain any advantage from executing
code inside an SA over regular normal-world execution.
A. Binary Integrity
SL’s and SAs’s binaries are saved unencrypted in normal-
world memory. Nevertheless, SANCTUARY ensures integrity
of these binaries by using local attestation and by providing
functionalities for remote attestation, respectively. SANCTU-
ARY stores a signature of the SL in the secure-world memory.
Before a SANCTUARY Instance is started, the STA performs a
local attestation by measuring the SL binary and by verifying
it against the stored signature. If veriﬁcation fails, SANC-
TUARY’s setup is aborted and the modiﬁed code therefore
never executed. Developers can verify an SA’s integrity using
remote attestation. Whenever an SA connects to a server, TEE
functionalities are used to establish a secure connection to the
server. Moreover, the STA creates a signature of the SA which
is also send to the server. Thus, the server can check if the SA
is in a valid state before provisioning sensitive data to it.
These properties, together with the properties in Section VI-B,
fulﬁll security requirement 1: Code and data integrity.
B. Code and Data Isolation
The SANCTUARY design provides strong hardware-enforced
isolation of code and data. The SANCTUARY memory isolation
is enforced by TrustZone before the integrity of the SL is
veriﬁed. Once the SANCTUARY memory is locked, no core
except the selected SANCTUARY core can perform non-secure
reads or writes on the SANCTUARY memory region. The
selected SANCTUARY core always boots in the TF and then
jumps to an address in the SL which is set as a constant in the
TF. During the boot process of the SANCTUARY Instance, the
SL ensures that all interrupts from the system-wide interrupt
controller, triggered from other cores than the SANCTUARY
core, are disabled. Only a core itself can conﬁgure its interface
to the GIC. Therefore, the execution of a SANCTUARY Instance
cannot be interrupted by another core. Moreover, only the
SANCTUARY core can shut itself down. During runtime, the
SANCTUARY design makes sure that sensitive data is only
passed to and received from a locked SANCTUARY Instance.
When performing a world switch to the secure world, the TF
veriﬁes that the call was issued from the SANCTUARY core.
Access from all other cores to the trusted functionalities in
the TEE will be blocked. If the call was issued from the
SANCTUARY core, the vendor TAs in the TEE use the STA
to check if the SANCTUARY Instance is in correct state before
reading or writing any data to the memory shared between
secure world and SA. SANCTUARY also prevents the injection
of data into the free SANCTUARY memory space before a
SANCTUARY Instance is locked and the extraction of data
after a SANCTUARY Instance is unlocked. The secure-world
9
STA overwrites SANCTUARY memory not reserved for either
SL or SA with a ﬁxed value after a SANCTUARY Instance is
locked and before it is unlocked, including the secure shared
memory. Besides, the SL is reset to its original state during
shutdown, hence, it will not contain last executed SA’s data.
These properties fulﬁll security requirement 1: Code and
data integrity in combination with the properties in Sec-
tion VI-A. Additionally, in combination with the properties
in Section VI-C, security requirement 2: Data conﬁdentiality
is fulﬁlled. Moreover, SANCTUARY’s temporal and spatial
hardware-enforced isolation fulﬁlls security requirement 5:
Hardware-enforced resource partitioning (in combination with
the properties in Section VI-D). Finally, the exclusive shared
memory between a SANCTUARY Instance and the secure world
fulﬁlls security requirement 3: Secure channel to secure world.
C. Secure Storage
SANCTUARY allows the secure and persistent storage of SA
data using the STA and security services from the secure
world. SANCTUARY ensures that the data is sealed to a SA
entity using keys that are derived from a hash value computed
over the SA binary. As a result, only an unmodiﬁed SA can
successfully decrypt its own data. For the persistent storage of
the sealed data, a SANCTUARY Instance uses the functionalities
provided by the TEE. Depending on the TEE implementation,
this might also allow the SA to bind its data to the device or to
save it in roll-back protected memory. These properties fulﬁll
security requirement 2: Data conﬁdentiality (in combination
with the properties from Section VI-B).
D. Cache Attack Resilience
As shown by recent Spectre [33] attacks, cache-based attacks
can be very powerful. An attacker could, for instance, try to
mount a software side-channel attack to extract data from
cache lines used by a SANCTUARY Instance. Thus,
these
attacks are considered in SANCTUARY’s design and implemen-
tation. As usual on ARMv8 platforms, we assume presence of
ﬁrst-level cache (L1) and second level cache (L2). On these
platforms, ﬁrst-level caches (L1) are core-exclusive, while
the L2 cache is shared. This conﬁguration allows two attack
scenarios: direct attacks, and side-channel attacks.
Direct Attacks. A privileged attacker in the normal world
could map the SANCTUARY memory region into an attacker-
controlled memory space. This could potentially give an at-
tacker direct access to the cached data of a SANCTUARY
Instance, even without the permission to read the main memory
for this physical address. For the L1 cache, we prevent this
by running a SANCTUARY Instance on its own core and by
invalidating the L1 cache before a SANCTUARY Instance is
shutdown and unlocked. For the L2 cache,
there are two
ways to prevent direct attacks. One way is to conﬁgure the
SANCTUARY memory region as outer non-cacheable,
whereas the outer domain is represented by all caches outside
of a particular CPU core. As a result, the SANCTUARY memory
is never cached in the shared L2 cache. In Section VII, we
show that this still gives practical performance. Alternatively,
changes to the caches could be made on the hardware level to
extend the enforcement of identity-based ﬁltering to the L2.
This prevents an attacker from directly accessing cache lines
uses by a SANCTUARY Instance. In both cases, an attacker
side-channel
attacks
could also not inject own malicious data into the L2 cache. On
ARMv8, data caches are normally either Physically Indexed,
Physically Tagged (PIPT) or Virtually Indexed, Physically
Tagged (VIPT) [3]. This means cache lines are tagged using
physical addresses in both conﬁgurations. Since the attacker
cannot write to or read from the physical addresses of the
SANCTUARY memory, the attacker can also not ﬁll the cache
for those addresses.
Side-Channel Attacks. An unprivileged attacker could
mount
[43] or
Flush+Reload [53] to leak data from L1 or L2 caches. For
the L1 cache, this is prevented by running a SANCTUARY
Instance on its own core, i.e. the attacker cannot measure
accesses to the SANCTUARY core’s L1 cache while it is run-
ning. To prevent measurements after shutdown, a SANCTUARY
Instance invalidates its L1 cache before it is shut down and
unlocked. For the L2 cache, implementing the identity-based
ﬁltering does not solve the cache-side channel issue. Thus,
cache partitioning (or a similar approach) is needed to prevent
leakage. We prevent side-channel attacks on the L2 cache
by excluding SANCTUARY memory from L2, which yields
practical performance (cf. Section VII).
like Prime+Probe
E. Malicious Sanctuary App
One strength of SANCTUARY is that third-party developers
can easily create and deploy own SAs. This, however, also
allows attackers to create malicious SAs. If an user is tricked
into installing such an SA, it will be executed as a valid SA
in a SANCTUARY Instance. The attacker could then try to
attack the normal world or secure world from such a malicious
SA, hence, SANCTUARY must protect against malicious SAs.
With a malicious SA, an attacker might attack the LOS and
LAs running in the normal world. Yet, an SA only has user
privileges (EL0), EL1 is controlled by the device vendor pro-
viding the SL. If the attacker is able to successfully perform a
privilege-escalation attack and compromise the SL, the secure-
world memory is still not accessible for the attacker since
the SA runs in normal world. In particular, since only the
SANCTUARY memory is assigned to the SANCTUARY core,
remaining normal-world memory could still not be accessed.
Only the non-secure shared memory to the LA (developed by
the attacker anyway) would be affected. An attacker could try
to use a malicious SA to leak data from either other SAs or
from TAs. However, since the SANCTUARY design dedicates
CPU cores to SAs one at a time, unintended information ﬂow
between SAs is prevented. These properties fulﬁll security
requirement 4: Protection from malicious SAs.
VII. EVALUATION
We evaluate SANCTUARY by implementing a real-world use-
case in our prototype and by thoroughly measuring the per-
formance of all SANCTUARY components. As mentioned in
Section V, the overall implementation minimizes TCB changes
by adding less than 1400 LOC. Thus, SANCTUARY fulﬁlls
functional requirement 6: Minimal software changes from
Section III-B. The evaluation was performed on the HiKey
960 development board. The HiKey 960 provides an ARMv8
SoC design with an ARM big.LITTLE processor architecture
equipped with four ARM Cortex-A73 and four Cortex-A53
cores. Every Cortex-A73 core has 64KB L1 instruction caches
10
Measurement
with L2 (us)
without L2 (us)
Measurement
with L2 (ms)
without L2 (ms)
LA to STA
LA to TA
LA to SA
SA to TA
98
123
150
310
[88]
[120]
249
353
Table II: Performance Sanctuary Communication, square
brackets indicate that deactivating L2 for the SANCTUARY
Instance had no effect.
and 64KB L1 data caches. Moreover, all Cortex-A73 cores
share a uniﬁed L2 with a size of 2MB. The energy-efﬁcient
Cortex-A53 cores share a uniﬁed L2 cache of 512KB. Besides,
every Cortex-A53 core has exclusively access to 32KB L1I and
32KB L1D caches.
A. Microbenchmarks
We evaluated the performance of SANCTUARY by measuring
the run time of the individual components and operations of
our prototype. We performed the evaluation for the SANCTU-
ARY conﬁgurations with both, active and deactivated L2 cache
for the SANCTUARY core (other cores are unaffected by this).
For an active L2 cache, we consider a weaker attacker model,
that is similar to the one of Intel SGX, i.e., side-channel attacks
are out of scope; orthogonal approaches like cache partitioning
are needed. Furthermore, we assume that the identity-based
ﬁltering is also implemented in shared L2.
When not caching the SANCTUARY memory in L2, we can
consider a stronger adversary that leverages software side-
channel attacks. Square brackets in the results for the con-
ﬁguration without L2 highlight that these measurements are
not inﬂuenced by the SANCTUARY L2 cache conﬁguration.
The shown deviations can be attributed to the complexity of
modern processors which causes timing differences between
consecutive runs. We used the generic timer available on
ARM-based architectures to perform all our measurements.
Moreover, we computed the relative standard deviation of our
measurements to assess SANCTUARY’s stability. The presented
results are averaged over 100 runs per conﬁguration. Based
on these numbers, we conclude that latency introduced by
SANCTUARY is practical in real-world applications.
1) Sanctuary Communication: Table II contains measurements
for the different communication channels that exist in the
SANCTUARY design. The ﬁrst two measurements, LA to STA
and LA to TA show how long it takes to perform a call from
an LA to a TA or a STA. These measurements are completely
independent from a SANCTUARY Instance but can be used
to assess the performance of SANCTUARY’s communication
channels. The time required to perform a call from an LA