```c
#include <stdio.h>
#include <stdlib.h>

typedef struct BiTNode {
    int data;
    struct BiTNode *lchild, *rchild;
} BiTNode, *BiTree;

int a[10] = {62, 88, 58, 47, 35, 73, 51, 99, 37, 93};
BiTree T = NULL;

BiTree DeleteBST(BiTree T, int key) {
    if (T == NULL) return NULL; // 没有找到关键字等于key的数据元素
    if (key < T->data)
        T->lchild = DeleteBST(T->lchild, key);
    else if (key > T->data)
        T->rchild = DeleteBST(T->rchild, key);
    else { // 找到关键字等于key的数据元素
        if (T->lchild == NULL && T->rchild == NULL) { // 叶子节点
            free(T);
            T = NULL;
        } else if (T->lchild == NULL) { // 只有右子树
            BiTree temp = T;
            T = T->rchild;
            free(temp);
        } else if (T->rchild == NULL) { // 只有左子树
            BiTree temp = T;
            T = T->lchild;
            free(temp);
        } else { // 左右子树均存在
            BiTree q = T, s = T->lchild;
            while (s->rchild != NULL) { // 寻找前驱结点
                q = s;
                s = s->rchild;
            }
            T->data = s->data; // 替换数据
            if (q != T) {
                q->rchild = s->lchild; // 修改指针
            } else {
                q->lchild = s->lchild; // 修改指针
            }
            free(s); // 释放前驱结点
        }
    }
    return T;
}

// 主函数用于测试
int main() {
    // 构建二叉排序树
    for (int i = 0; i < 10; i++) {
        // 插入代码省略
    }

    // 删除操作
    T = DeleteBST(T, 47);

    return 0;
}
```

### 说明

这段代码实现了从二叉排序树中删除指定结点的功能。以下是详细的步骤和解释：

1. **查找结点**：
   - 如果当前结点为空，返回 `NULL`。
   - 如果要删除的键值小于当前结点的键值，递归地在左子树中查找并删除。
   - 如果要删除的键值大于当前结点的键值，递归地在右子树中查找并删除。

2. **删除结点**：
   - **叶子结点**：直接释放该结点。
   - **只有右子树**：将当前结点替换为其右子树，并释放当前结点。
   - **只有左子树**：将当前结点替换为其左子树，并释放当前结点。
   - **左右子树均存在**：
     - 找到当前结点的前驱结点（即左子树中的最右结点）。
     - 将前驱结点的数据替换到当前结点。
     - 根据前驱结点的位置，修改相应的指针，并释放前驱结点。

### 二叉排序树总结

- **存储方式**：二叉排序树以链接的方式存储，保持了链式存储结构在执行插入或删除操作时不需要移动元素的优点。
- **时间性能**：插入和删除操作只需要修改指针，时间复杂度为 O(h)，其中 h 是树的高度。
- **查找性能**：查找的时间复杂度取决于树的高度。理想情况下，二叉排序树的高度为 log(n)，查找效率较高。但在极端情况下（如完全不平衡的树），高度可能达到 n，查找效率较低。

### 示例

对于数组 `{62, 88, 58, 47, 35, 73, 51, 99, 37, 93}`，可以构建一个平衡性较好的二叉排序树。但如果数组是有序的，如 `{35, 37, 47, 51, 58, 62, 73, 88, 93, 99}`，则会形成一个极端的右斜树，查找效率大大降低。

通过这种方式，我们可以有效地管理和操作二叉排序树，确保其在各种情况下的高效运行。