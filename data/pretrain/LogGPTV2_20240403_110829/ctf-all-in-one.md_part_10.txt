例如 printf("%2d", 3) 输出 " 3 "，而 printf("%02d", 3) 输出
0
" 03 "。如果 0 与 - 均出现，则 0 被忽略，即左对齐依然用空格
填充
（可选）宽度
105
1.5.1 C/C++ 语言基础
是一个用来指定输出字符的最小个数的十进制非负整数。如果实际位数多于定义的
宽度,则按实际位数输出；如果实际位数少于定义的宽度则补以空格或 0。
（可选）精度
精度是用来指示打印字符个数、小数位数或者有效数字个数的非负十进制整数。对
于 d 、 i 、 u 、 x 、 o 的整型数值，是指最小数字位数，不足的位要在左
侧补 0，如果超过也不截断，缺省值为 1。对于 a , A , e , E , f , F 的浮
点数值，是指小数点右边显示的数字位数，必要时四舍五入；缺省值为 6。对于
g , G 的浮点数值，是指有效数字的最大位数。对于 s 的字符串类型，是指输
出的字节的上限，超出限制的其它字符将被截断。如果域宽为 * ，则由对应的函
数参数的值为当前域宽。如果仅给出了小数点，则域宽为 0。
（可选）长度
字符 描述
hh 对于整数类型， printf 期待一个从 char 提升的 int 整型参数
h 对于整数类型， printf 期待一个从 short 提升的 int 整型参数
对于整数类型， printf 期待一个 long 整型参数。对于浮点类
型， printf 期待一个 double 整型参数。对于字符串 s 类
l
型， printf 期待一个 wchar_t 指针参数。对于字符 c 类
型， printf 期待一个 wint_t 型的参数
对于整数类型， printf 期待一个 long long 整型参数。Microsoft
ll
也可以使用 I64
L 对于浮点类型， printf 期待一个 long double 整型参数
z 对于整数类型， printf 期待一个 size_t 整型参数
j 对于整数类型， printf 期待一个 intmax_t 整型参数
t 对于整数类型， printf 期待一个 ptrdiff_t 整型参数
例子
106
1.5.1 C/C++ 语言基础
printf("Hello %%"); // "Hello %"
printf("Hello World!"); // "Hello World!"
printf("Number: %d", 123); // "Number: 123"
printf("%s %s", "Format", "Strings"); // "Format Strings"
printf("%12c", 'A'); // " A"
printf("%16s", "Hello"); // " Hello!"
int n;
printf("%12c%n", 'A', &n); // n = 12
printf("%16s%n", "Hello!", &n); // n = 16
printf("%2$s %1$s", "Format", "Strings"); // "Strings Format"
printf("%42c%1$n", &n); // 首先输出41个空格，然后输出 n 的低八
位地址作为一个字符
这里我们对格式化输出函数和格式字符串有了一个详细的认识，后面的章节中我们
会介绍格式化字符串漏洞的内容。
关于 C++
107
1.5.2 x86/x64 汇编基础
1.5.2 x86/x64 汇编基础
x86
x64
参考资料
x86
IA-32 体系结构提供了 16 个基础寄存器，可分为下面几组：
通用寄存器：8 个通用寄存器用于存储操作数、运算结果和指针。
段寄存器：包括 6 个段选择器。
EFLAGS 寄存器：用于显示程序执行的状态和允许对处理器进行有限的（应用
层）控制。
EIP 寄存器：包含一个 32 位的指针，指向下一条被执行的指令
通用寄存器
EAX：操作数和结果数据的累加器。
EBX：指向 DS 段中数据的指针。
ECX：用于字符串和循环操作的计数器。
EDX：I/O 指针。
ESI：指向由 DS 寄存器指向的段中的数据的指针；字符串操作的源指针。
EDI：指向由 ES 寄存器指向的段中的数据（或目标地址）的指针；字符串操
108
1.5.2 x86/x64 汇编基础
作的目标指针。
ESP：栈指针（位于 SS 段）。
EBP：指向栈上数据的指针（位于 SS 段）。
段寄存器
段寄存器用于保存 16 位的段选择器。段选择器是一种特殊的指针，用于确定内存
中某个段的位置。
段寄存器的使用取决于操作系统的内存管理模型。
平坦内存模型：
分段内存模型：
109
1.5.2 x86/x64 汇编基础
EFLAGS
110
1.5.2 x86/x64 汇编基础
标志位寄存器统称为 EFLAGS：
状态标志
CF（bit 0）：进位标志，用于表示无符号数运算是否产生进位或者借位，
如果产生了进位或借位则值为 1，否则值为 0。
PF（bit 2）：奇偶标志，用于表示运算结果中 1 的个数的奇偶性，偶数个
1 时值为 1，奇数个 1 时值为 0。
AF（bit 4）：辅助进位标志，在字操作时标记低位字节（低 4 位）是否向
高位字节（高 4 位）进位或借位。
ZF（bit 6）：零标志，用于表示运算结果是否为 0，结果为 0 时其值置
1，否则置 0。
SF（bit 7）：符号标志，用来标记有符号数运算结果是否小于 0，小于 0
时置 1，否则置 0。
OF（bit 11）：溢出标志，用于表示有符号运算结果是否溢出，发生溢出
时置 1，否则置 0。
DF（bit 10）：方向标志，决定串操作指令执行时指针寄存器的调整方向。
系统标志和 IOPL 域
TF（bit 8）：跟踪标志，用于程序调试，置 1 时 CPU 处于单步执行状
态，置 0 时处于连续工作状态。
IF（bit 9）：中断允许标志，决定 CPU 是否响应 CPU 外部的可屏蔽中断
发出的中断请求，置 1 时可以响应中断，置 0 时不响应中断。
IOPL（bits 12,13）：I/O 特权标志，用于表示当前进程的 I/O 特权级别，
只有当前进程的 CPL 小于或等于 IOPL 时才能访问 I/O 地址空间，只有
CPL 为 0 时才能修改 IOPL 域。
NT（bit 14）：嵌套任务标志，置 1 时表示当前任务是在另一个任务中嵌
套执行，置 0 时表示非嵌套。
RT（bit 16）：恢复标志，用于表示是否响应指令断点，置 1 禁用指令断
点，置 0 允许指令断点。
VM（bit 17）：虚拟 8086 模式标志，用于表示进程是运行在虚拟 8086
模式还是保护模式，置 1 运行在虚拟 8086 模式，置 0 运行在保护模式。
AC（bit 18）：对齐检测标志，与 CR0 寄存器的 AM 标志联合使用，这
两个标志位同时置 1 启用对内存引用的对齐检查，同时置 0 表示禁用对齐
检查。对齐检查仅在用户态下进行，0 特权级下不做检查。
VIF（bit 19）：虚拟中断标志，是 IF 标志的一个虚拟映像，与 VIP 标志
一起使用，当控制寄存器 CR4 中的 VME 或者 PVI 标志位置 1 且 IOPL 小
于 3 时，处理器只识别 VIF 标志。
111
1.5.2 x86/x64 汇编基础
VIP（bit 20）：虚拟中断等待标志，置 1 表示有一个等待处理的中断，置
0 表示没有等待处理的中断。
ID（bit 21）：识别标志，置 1 表示支持 CPUID 指令，置 0 表示不支持。
EIP 寄存器
指令指针寄存器存储了当前代码段的偏移，指向了下一条要执行的指令，系统根据
该寄存器从内存中取出指令，然后再译码执行。
x64
参考资料
Intel® 64 and IA-32 Architectures Software Developer Manuals
112
1.5.3 Linux ELF
1.5.3 Linux ELF
一个实例
elfdemo.o
ELF 文件结构
参考资料
一个实例
在 1.5.1节 C语言基础 中我们看到了从源代码到可执行文件的全过程，现在我们来
看一个更复杂的例子。
#include
int global_init_var = 10;
int global_uninit_var;
void func(int sum) {
printf("%d\n", sum);
}
void main(void) {
static int local_static_init_var = 20;
static int local_static_uninit_var;
int local_init_val = 30;
int local_uninit_var;
func(global_init_var + local_init_val +
local_static_init_var );
}
然后分别执行下列命令生成三个文件：
113
1.5.3 Linux ELF
gcc -m32 -c elfDemo.c -o elfDemo.o
gcc -m32 elfDemo.c -o elfDemo.out
gcc -m32 -static elfDemo.c -o elfDemo_static.out
使用 ldd 命令打印所依赖的共享库：
$ ldd elfDemo.out
linux-gate.so.1 (0xf77b1000)
libc.so.6 => /usr/lib32/libc.so.6 (0xf7597000)
/lib/ld-linux.so.2 => /usr/lib/ld-linux.so.2 (0xf77b3000
)
$ ldd elfDemo_static.out
not a dynamic executable
elfDemo_static.out 采用了静态链接的方式。
使用 file 命令查看相应的文件格式：
114
1.5.3 Linux ELF
$ file elfDemo.o
elfDemo.o: ELF 32-bit LSB relocatable, Intel 80386, version 1 (S
YSV), not stripped
$ file elfDemo.out
elfDemo.out: ELF 32-bit LSB shared object, Intel 80386, version
1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, fo
r GNU/Linux 3.2.0, BuildID[sha1]=50036015393a99344897cbf34099256
c3793e172, not stripped
$ file elfDemo_static.out
elfDemo_static.out: ELF 32-bit LSB executable, Intel 80386, vers
ion 1 (GNU/Linux), statically linked, for GNU/Linux 3.2.0, Build
ID[sha1]=276c839c20b4c187e4b486cf96d82a90c40f4dae, not stripped
$ file -L /usr/lib32/libc.so.6
/usr/lib32/libc.so.6: ELF 32-bit LSB shared object, Intel 80386,
version 1 (GNU/Linux), dynamically linked, interpreter /usr/lib
32/ld-linux.so.2, BuildID[sha1]=ee88d1b2aa81f104ab5645d407e190b2
44203a52, for GNU/Linux 3.2.0, not stripped
于是我们得到了 Linux 可执行文件格式 ELF （Executable Linkable Format）文件
的三种类型：
可重定位文件（Relocatable file）
包含了代码和数据，可以和其他目标文件链接生成一个可执行文件或共享
目标文件。
elfDemo.o
可执行文件（Executable File）
包含了可以直接执行的文件。
elfDemo_static.out
共享目标文件（Shared Object File）
包含了用于链接的代码和数据，分两种情况。一种是链接器将其与其他的
可重定位文件和共享目标文件链接起来，生产新的目标文件。另一种是动
态链接器将多个共享目标文件与可执行文件结合，作为进程映像的一部
分。
elfDemo.out
libc-2.25.so
115
1.5.3 Linux ELF
此时他们的结构如图：
可以看到，在这个简化的 ELF 文件中，开头是一个“文件头”，之后分别是代码段、
数据段和.bss段。程序源代码编译后，执行语句变成机器指令，保存
在 .text 段；已初始化的全局变量和局部静态变量都保存在 .data 段；未初始
化的全局变量和局部静态变量则放在 .bss 段。
把程序指令和程序数据分开存放有许多好处，从安全的角度讲，当程序被加载后，
数据和指令分别被映射到两个虚拟区域。由于数据区域对于进程来说是可读写的，
而指令区域对于进程来说是只读的，所以这两个虚存区域的权限可以被分别设置成
可读写和只读，可以防止程序的指令被改写和利用。
elfDemo.o
接下来，我们更深入地探索目标文件，使用 objdump 来查看目标文件的内部结构:
116
1.5.3 Linux ELF
$ objdump -h elfDemo.o
elfDemo.o: file format elf32-i386
Sections:
Idx Name Size VMA LMA File off Algn
0 .group 00000008 00000000 00000000 00000034 2**2
CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
1 .text 00000078 00000000 00000000 0000003c 2**0
CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
2 .data 00000008 00000000 00000000 000000b4 2**2
CONTENTS, ALLOC, LOAD, DATA
3 .bss 00000004 00000000 00000000 000000bc 2**2
ALLOC
4 .rodata 00000004 00000000 00000000 000000bc 2**0
CONTENTS, ALLOC, LOAD, READONLY, DATA
5 .text.__x86.get_pc_thunk.ax 00000004 00000000 00000000 00
0000c0 2**0
CONTENTS, ALLOC, LOAD, READONLY, CODE
6 .comment 00000012 00000000 00000000 000000c4 2**0
CONTENTS, READONLY
7 .note.GNU-stack 00000000 00000000 00000000 000000d6 2**0
CONTENTS, READONLY
8 .eh_frame 0000007c 00000000 00000000 000000d8 2**2
CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
可以看到目标文件中除了最基本的代码段、数据段和 BSS 段以外，还有一些别的
段。注意到 .bss 段没有 CONTENTS 属性，表示它实际上并不存在，.bss 段只是为
为未初始化的全局变量和局部静态变量预留了位置而已。
代码段
$ objdump -x -s -d elfDemo.o
......
Sections:
Idx Name Size VMA LMA File off Algn
......
117
1.5.3 Linux ELF
1 .text 00000078 00000000 00000000 0000003c 2**0
CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
......
Contents of section .text:
0000 5589e553 83ec04e8 fcffffff 05010000 U..S............
0010 0083ec08 ff75088d 90000000 005289c3 .....u.......R..
0020 e8fcffff ff83c410 908b5dfc c9c38d4c ..........]....L
0030 240483e4 f0ff71fc 5589e551 83ec14e8 $.....q.U..Q....
0040 fcffffff 05010000 00c745f4 1e000000 ..........E.....
0050 8b880000 00008b55 f401ca8b 80040000 .......U........
0060 0001d083 ec0c50e8 fcffffff 83c41090 ......P.........
0070 8b4dfcc9 8d61fcc3 .M...a..
......
Disassembly of section .text:
00000000 :
0: 55 push %ebp
1: 89 e5 mov %esp,%ebp
3: 53 push %ebx
4: 83 ec 04 sub $0x4,%esp
7: e8 fc ff ff ff call 8 
8: R_386_PC32 __x86.get_pc_thunk.ax
c: 05 01 00 00 00 add $0x1,%eax
d: R_386_GOTPC _GLOBAL_OFFSET_TABLE_
11: 83 ec 08 sub $0x8,%esp
14: ff 75 08 pushl 0x8(%ebp)
17: 8d 90 00 00 00 00 lea 0x0(%eax),%edx
19: R_386_GOTOFF .rodata
1d: 52 push %edx
1e: 89 c3 mov %eax,%ebx
20: e8 fc ff ff ff call 21 
21: R_386_PLT32 printf