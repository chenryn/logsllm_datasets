      return stringPrototypeLink.apply(this, arguments);
    };
    const stringPrototypeLocaleCompare = String.prototype.localeCompare;
    String.prototype.localeCompare = function() {
      return stringPrototypeLocaleCompare.apply(this.toString(), arguments);
    };
    const stringPrototypeMatch = String.prototype.match;
    // TODO propagate taints of the regexp argument
    String.prototype.match = function() {
      if (__is_dombasedxssfinder_string(this)) {
        const array = stringPrototypeMatch.apply(this.toString(), arguments);
        if (array === null) {
          return null;
        }
        for (let i = 0; i  sources.push(e));
      }
      if (__is_dombasedxssfinder_string(this)) {
        this.sources.forEach(e => sources.push(e));
      }
      if (sources.size > 0) {
        const str = stringPrototypePadEnd.apply(this.toString(), arguments);
        return new __dombasedxssfinder_String(str, { sources });
      }
      return stringPrototypePadEnd.apply(this, arguments);
    };
    const stringPrototypePadStart = String.prototype.padStart;
    String.prototype.padStart = function() {
      const sources = [];
      arguments[1] = __convert_to_dombasedxssfinder_string_if_location(arguments[1]);
      if (__is_dombasedxssfinder_string(arguments[1])) {
        arguments[1].sources.forEach(e => sources.push(e));
      }
      if (__is_dombasedxssfinder_string(this)) {
        this.sources.forEach(e => sources.push(e));
      }
      if (sources.size > 0) {
        const str = stringPrototypePadStart.apply(this.toString(), arguments);
        return new __dombasedxssfinder_String(str, { sources });
      }
      return stringPrototypePadStart.apply(this, arguments);
    };
    const stringPrototypeRepeat = String.prototype.repeat;
    String.prototype.repeat = function() {
      if (__is_dombasedxssfinder_string(this)) {
        const str = stringPrototypeRepeat.apply(this.toString(), arguments);
        return new __dombasedxssfinder_String(str, this);
      }
      return stringPrototypeRepeat.apply(this, arguments);
    };
    const stringPrototypeReplace = String.prototype.replace;
    String.prototype.replace = function() {
      const sources = [];
      arguments[1] = __convert_to_dombasedxssfinder_string_if_location(arguments[1]);
      if (__is_dombasedxssfinder_string(arguments[1])) {
        arguments[1].sources.forEach(e => sources.push(e));
      }
      if (__is_dombasedxssfinder_string(this)) {
        this.sources.forEach(e => sources.push(e));
      }
      if (sources.size > 0) {
        const str = stringPrototypeReplace.apply(this.toString(), arguments);
        return new __dombasedxssfinder_String(str, { sources });
      }
      return stringPrototypeReplace.apply(this, arguments);
    };
    const stringPrototypeSearch = String.prototype.search;
    String.prototype.search = function() {
      return stringPrototypeSearch.apply(this.toString(), arguments);
    };
    const stringPrototypeSlice = String.prototype.slice;
    String.prototype.slice = function() {
      if (__is_dombasedxssfinder_string(this)) {
        const str = stringPrototypeSlice.apply(this.toString(), arguments);
        return new __dombasedxssfinder_String(str, this);
      }
      return stringPrototypeSlice.apply(this, arguments);
    };
    const stringPrototypeSmall = String.prototype.small;
    String.prototype.small = function() {
      if (__is_dombasedxssfinder_string(this)) {
        const str = stringPrototypeSmall.apply(this.toString(), arguments);
        return new __dombasedxssfinder_String(str, this);
      }
      return stringPrototypeSlice.apply(this, arguments);
    };
    const stringPrototypeSplit = String.prototype.split;
    String.prototype.split = function() {
      if (__is_dombasedxssfinder_string(this)) {
        const array = stringPrototypeSplit.apply(this.toString(), arguments);
        for (let i = 0; i  this.sources.push(e));
    this.valueOf = function() {
      return this;
    };
    this.toString = function() {
      return this.str;
    };
    // str.length
    Object.defineProperty(this, 'length', {
      set: () => null,
      get: () => this.str.length
    });
    // str[0]
    for (let i = 0; i < this.str.length; i++) {