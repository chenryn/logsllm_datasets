### Output Format

The output can be in one of the following formats:

- **Text**: This is the default format, which provides a human-readable representation of the data.
- **JSON**: This is a standard JSON format that can be directly processed by any application that supports JSON.

### Sample Output

Below are three examples of the program's output. The first example uses the default formatting option, making the output more readable. The second example uses the `-d` option, which does not translate MQI constants and may be preferable for some scripting tools. The third example shows the JSON output.

#### Example 1: Default Formatting
```
**** Message (320 Bytes) on Queue SYSTEM.ADMIN.QMGR.EVENT ****
Event Type : Queue Mgr Event
Reason : Unknown Alias Base Queue
Event created : 2015/06/17 13:47:07.02 GMT
Queue Mgr Name : V8003_A
Queue Name : EVT.NO.BASE.QUEUE
Base Object Name : EVT.NOT.DEFINED
Appl Type : Unix
Appl Name : amqsput
Base Type : Queue
```

#### Example 2: Alternative Formatting with `-d` Option
```
**** Message (320 Bytes) on Queue SYSTEM.ADMIN.QMGR.EVENT ****
Event Type : MQCMD_Q_MGR_EVENT
Reason : MQRC_UNKNOWN_ALIAS_BASE_Q
Event created : 2015/06/17 13:52:48.18 GMT
MQCA_Q_MGR_NAME : V8003_A
MQCA_Q_NAME : EVT.NO.BASE.QUEUE
MQCA_BASE_OBJECT_NAME : EVT.NOT.DEFINED
MQIA_APPL_TYPE : MQAT_UNIX
MQCACF_APPL_NAME : amqsput
MQIA_BASE_TYPE : MQOT_Q
```

#### Example 3: JSON Output
```json
{
  "eventSource": {
    "objectName": "SYSTEM.ADMIN.TRACE.ACTIVITY.QUEUE",
    "objectType": "Queue"
  },
  "eventType": {
    "name": "Activity Trace",
    "value": 209
  },
  "eventReason": {
    "name": "None",
    "value": 0
  },
  "eventCreation": {
    "timeStamp": "2018-07-10T12:44:26Z",
    "epoch": 1531226666
  },
  "eventData": {
    "queueMgrName": "QM1",
    "hostName": "",
    "startDate": "2018-07-10",
    "startTime": "13:44:25",
    "endDate": "2018-07-10",
    "endTime": "13:44:26",
    "commandLevel": 910,
    ...
  }
}
```

### Example Usage

To use more than one queue, you can specify multiple queues as shown in the following command:
```sh
amqsevt -m QM1 -q SYSTEM.ADMIN.QMGR.EVENT -q SYSTEM.ADMIN.PERM.EVENT -w 1
```

### Related Concepts

- **Event Monitoring**: This process involves detecting occurrences of instrumentation events in a queue manager network. An instrumentation event is a logical combination of events detected by a queue manager or channel instance, causing the queue manager to put an event message on an event queue.
- **Instrumentation Events**: These are logical combinations of conditions detected by a queue manager or channel instance, resulting in the creation of an event message on an event queue.

### Related Reference

- **C Programming**: See "Sample C program to monitor the logger event queue" on page 49 for a sample C program that monitors the logger event queue for new event messages, reads those messages, and outputs their contents to `stdout`.

### Message Monitoring

Message monitoring is the process of identifying the route a message has taken through a queue manager network. By tracking the types and sequence of activities performed on behalf of a message, the message route can be determined. As a message passes through the network, various processes perform activities on its behalf. Techniques such as the IBM MQ display route application, activity recording, and trace-route messaging can be used to determine the message route and achieve the following objectives:

- Record message activity.
- Determine the last known location of a message.
- Detect routing problems in the queue manager network.
- Assist in determining the causes of routing problems.
- Confirm that the queue manager network is running correctly.
- Familiarize yourself with the operation of the queue manager network.
- Trace published messages.

### Activities and Operations

Activities are discrete actions performed by applications on behalf of a message. Each activity consists of one or more operations, which are single pieces of work. Examples of activities include:

- A message channel agent (MCA) sending a message from a transmission queue down a channel.
- An MCA receiving a message from a channel and putting it on its target queue.
- An application getting a message from a queue and putting a reply message in response.
- The IBM MQ publish/subscribe engine processing a message.

For example, the activity of an MCA sending a message from a transmission queue down a channel consists of the following operations:
1. Getting a message from a transmission queue (a Get operation).
2. Sending the message down a channel (a Send operation).

In a publish/subscribe network, the activity of the IBM MQ publish/subscribe engine processing a message can consist of the following operations:
1. Putting a message to a topic string (a Put operation).
2. Zero or more operations for each of the subscribers that are considered for receipt of the message (a Publish operation, a Discarded Publish operation, or an Excluded Publish operation).

### Information from Activities

By recording information as the message is routed through the queue manager network, you can identify the sequence of activities performed on the message. This information can help determine the route of the message and provide the following details:

- The last known location of a message if it does not reach its intended destination.
- Configuration issues with the queue manager network, such as a message taking an alternative route due to an inactive channel.

### Message Routes

Depending on your reason for determining a message route, you can use the following general approaches:

- **Using Activity Information Recorded for a Trace-Route Message**: Trace-route messages record activity information for a specific purpose. They can be used to determine configuration issues with the queue manager network or the last known location of a message.
- **Using Activity Information Recorded for the Original Message**: You can enable any message for activity recording and have activity information recorded on its behalf. If a message does not reach its intended destination, the recorded activity information can be used to determine the last known location of the message.

**Warning**: Avoid enabling all messages in a queue manager network for activity recording, as this can significantly increase network traffic.

### Related Concepts

- **Message Monitoring**: The process of identifying the route a message has taken through a queue manager network.
- **Message Route Techniques**: Activity recording and trace-route messaging are techniques that allow you to record activity information for a message as it is routed through a queue manager network.

### Activity Recording

If a message has the appropriate report option specified, it requests that applications generate activity reports as it is routed through the queue manager network. When an application performs an activity on behalf of a message, an activity report can be generated and delivered to an appropriate location. The activity information collected using activity reports must be arranged in order before a message route can be determined.

### Trace-Route Messaging

Trace-route messaging involves sending a trace-route message into a queue manager network. When an application performs an activity on behalf of the trace-route message, activity information can be accumulated in the message data of the trace-route message, or activity reports can be generated. If activity information is accumulated in the message data of the trace-route message, when it reaches its target queue, a trace-route reply message containing all the information from the trace-route message can be generated and delivered to an appropriate location.

### Comparison of Activity Recording and Trace-Route Messaging

| Benefit | Activity Recording | Trace-Route Messaging |
|---------|--------------------|-----------------------|
| Can determine the last known location of a message | Yes | Yes |
| Can determine configuration issues with a queue manager network | Yes | Yes |
| Can be requested by any message | Yes | No |
| Message data is left unmodified | Yes | No |
| Message processed normally | Yes | No |
| Activity information can be accumulated in the message data | No | Yes |
| Optional message delivery to target queue | No | Yes |
| If a message is caught in an infinite loop, it can be detected and dealt with | No | Yes |
| Activity information can be put in order reliably | No | Yes |
| Application provided to display the activity information | No | Yes |

### Message Route Completeness

In some cases, it is not possible to identify the full sequence of activities performed on behalf of a message, so only a partial message route can be determined. The completeness of a message route depends on the level of the queue managers in the queue manager network:

- **Queue Managers at IBM WebSphere MQ 6.0 and Subsequent Releases**: MCAs and user-written applications connected to these queue managers can record information related to the activities performed on behalf of a message. If a queue manager network consists of queue managers at IBM WebSphere MQ 6.0 or subsequent releases, complete message routes can be determined.
- **Queue Managers Before IBM WebSphere MQ 6.0**: Applications connected to these queue managers do not record the activities they have performed on behalf of a message. If a queue manager network contains any queue manager prior to IBM WebSphere MQ 6.0, only a partial message route can be determined.

### How Activity Information is Stored

IBM MQ stores activity information in activity reports, trace-route messages, or trace-route reply messages. In each case, the information is stored in a structure called the Activity PCF group. Trace-route messages or trace-route reply messages can contain many Activity PCF groups, depending on the number of activities performed on the message. Activity reports contain one Activity PCF group because a separate activity report is generated for every recorded activity.

With trace-route messaging, additional information can be recorded and stored in a structure called the TraceRoute PCF group. The TraceRoute PCF group contains a number of PCF structures that store additional activity information and specify options for handling the trace-route message as it is routed through the queue manager network.

### Related Concepts

- **Activity Recording**: A technique for determining the routes that messages take through a queue manager network by recording the activities performed on behalf of the message.
- **Trace-Route Messaging**: A technique that uses trace-route messages to record activity information for a message.

### Related Reference

- **The TraceRoute PCF Group**: Attributes in the TraceRoute PCF group control the behavior of a trace-route message. The TraceRoute PCF group is in the message data of every trace-route message.
- **Activity Report Message Data**: Use this page to view the parameters contained by the Activity PCF group in an activity report message. Some parameters are returned only when specific operations have been performed.

### Controlling Activity Recording

To enable or disable activity recording at the queue manager level, use the MQSC command `ALTER QMGR`, specifying the parameter `ACTIVREC`. The value can be:

- **MSG**: The queue manager is enabled for activity recording. Any activity reports generated are delivered to the reply-to queue specified in the message descriptor of the message. This is the default value.
- **QUEUE**: The queue manager is enabled for activity recording. Any activity reports generated are delivered to the local system queue `SYSTEM.ADMIN.ACTIVITY.QUEUE`. The system queue can also be used to forward activity reports to a common queue.
- **DISABLED**: The queue manager is disabled for activity recording. No activity reports are generated while in the scope of this queue manager.

For example, to enable a queue manager for activity recording and specify that any activity reports generated are delivered to the local system queue `SYSTEM.ADMIN.ACTIVITY.QUEUE`, use the following MQSC command:
```sh
ALTER QMGR ACTIVREC(QUEUE)
```

**Remember**: When you modify the `ACTIVREC` queue manager attribute, a running MCA does not detect the change until the channel is restarted.

### Setting Up a Common Queue for Activity Reports

To determine the locations of the activity reports related to a specific message when the reports are delivered to the local system queue, it is more efficient to use a common queue on a single node. To set up a common queue, perform the following steps:

1. **Select or Define a Queue Manager as the Single Node**.
2. **On the Single Node, Select or Define a Queue for Use as the Common Queue**.
3. **On All Queue Managers Where Activity Reports Are to Be Delivered to the Common Queue, Redefine the Local System Queue `SYSTEM.ADMIN.ACTIVITY.QUEUE` as a Remote Queue Definition**:
   - Specify the name of the single node as the remote queue manager name.
   - Specify the name of the common queue as the remote queue name.

### Determining Message Route Information

To determine a message route, obtain the information from the activity reports collected.