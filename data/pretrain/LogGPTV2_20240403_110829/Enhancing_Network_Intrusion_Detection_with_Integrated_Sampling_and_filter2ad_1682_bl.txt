p
population contained in densely populated preﬁxes, each with a fraction of the total
Internet population greater than the cutoﬀ P0.99.
empty. Therefore, the goal is to determine a value for β such that the sampling
process detects the live preﬁxes that contain the majority of the live population.
In more speciﬁc terms, we deﬁne β as the threshold value of live host occupancy
(pl,g) at which the sampling process—with high probability—detects the set
of live preﬁxes that contain 99% of the total Internet live population. Clearly,
ﬁnding this set of live preﬁxes requires knowledge of the distribution of live hosts
over the /16 address preﬁxes. We term this distribution as P (g), which denotes
the fraction of the overall Internet live population residing in the /16 preﬁx g.
Assuming that P (g) is known, pl,g can then be expressed as:
pl,g = P (g) · N
216
(3)
where N is the total number of live hosts in the Internet. The numerator in the
expression above is the expected number of live hosts in /16 preﬁx g, while the
denominator is the size of a /16 preﬁx.
As illustrated in Figure 2, 99% of the live population (the unshaded area) is
contained in the most densely populated live preﬁxes with P (g) greater than
a cutoﬀ probability termed P0.99. Therefore to detect these live preﬁxes we set
(P (g) = P0.99) in Equation 3. Calculating pl,g in Equation 3 at the point corre-
sponding to (P (g) = P0.99) yields the minimum threshold occupancy β required
to calculate the maximum number of samples n.
Unfortunately, P0.99 cannot be directly determined since the distribution P (g)
is unknown. Indeed, if this distribution was known the entire sampling process
would be superﬂuous. While P (g) can be reliably estimated using a pilot Monte
Carlo study, this would require a large sample size. Instead, we consider how P (g)
can be estimated using a small learning set of live IP addresses that can be easily
Fast and Evasive Attacks: Highlighting the Challenges Ahead
211
obtained from various sources (e.g., a pilot limited-scale random probing, historic
logs, or traces of traﬃc arriving at unused IP space). Using this dataset, we
∗(g), the marginal distribution of P (g), deﬁned as the distribution of
estimate p
∗(g) by aggregating the IP addresses
live hosts at the /8 preﬁx level. We derive p
from the learning set to their common /8 preﬁxes. Due to space constraints,
the discussion about the quality of this estimator is presented in the extended
version of this paper [26] in which we derive a theoretical error bound for this
estimator. Our results show that with a small learning dataset of only 20, 000 live
∗(g) with an empirical estimation
IP addresses one can estimate distribution p
error of e = 4.3 × 10−5.
∗(g), we can determine the cutoﬀ probability P0.99. Then, using an
estimate N of the number of lives host in the Internet we ﬁnd the number of live
hosts in the /8 preﬁx corresponding to P0.99. Assuming that hosts within that
particular /8 preﬁx are uniformly distributed across all of its /16 siblings 3 (i.e.,
P (g) = P0.99/256), then from Equation 3, β = P0.99·N
256 . 216 . Finally, n can now be
calculated by substituting pl,g with β in Equation 2.
Given p
3 Sampling Process Evaluation
First, we illustrate the sampling process by using two distributions of live hosts
derived from two independent datasets. The ﬁrst dataset was obtained from
DShield [6] and consists of intrusion logs from over 1,600 intrusions detection
systems distributed around the globe. The second dataset was collected at a
local darknet covering a large number of /24 preﬁxes. Table 2 summarizes the
statistics for both datasets. From each dataset, we independently derive two
distributions: one for live hosts at the /16 level and another at the /8 level.
Although collected from two distinct sources, the distributions at the /8 level are
strikingly similar (see Figure 3) 4. The reason behind this similarity is due to the
fact that vulnerable hosts in both cases are selected from the same underlying
distribution of live hosts which conﬁrms a similar observation recently made
in [2]. In what follows, we use these distributions as representatives of the live
host distribution over the whole Internet.
Following the process described earlier, we ﬁrst estimate the marginal live
∗(g)) using a small learning dataset of
host distribution over the /8 preﬁxes (p
live IP addresses. A uniform random sample of 20,000 source IP addresses taken
∗(g) we ﬁnd
from the darknet dataset is used as the initial learning set. From p
the cutoﬀ live population density P0.99. In this case P0.99 = 0.00065. Assuming a
population of approximately 300 million live hosts [10], the estimated number of
hosts in the /8 preﬁx with density P0.99 is 180,000. Assuming that these hosts are
uniformly distributed among its constituent /16 preﬁxes, we ﬁnd that β = 0.012.
3 While this is not the case in practice, this assumption does not skew our calculations
signiﬁcantly since it is only applied to the sparsely populated /8 preﬁx with density
≤ P0.99.
4 A similar relation was observed for the /16 distributions but is not shown due to
space constraints.
212
M.A. Rajab, F. Monrose, and A. Terzis
Table 2. Summary of the data-set
DShield dataset
Data Collection Period
Total Unique sources
Sources attacking port 80
three months (Oct. to Dec., 2004)
31,864,871
632,472
Darknet dataset
Data Collection Period
Total Unique sources
one month (Oct., 2005)
1,153,599
F
D
P
 0.1
 0.01
 0.001
 1e-04
 1e-05
 1e-06
 1e-07
 1e-08
 1
darknet dataset
DShield dataset
 10
 100
 1000
Prefix Rank
Fig. 3. Fraction of live addresses per /8 preﬁx for the DShield dataset compared to
the darknet dataset
This corresponds to /16 preﬁxes that contain as few as (0.012 × 216 = 760) live
hosts. Finally, substituting β in Equation 2 we ﬁnd that n = 400 samples. This
means that using a maximum of 400 probes per /16 preﬁx it is possible, with
high probability (α = 0.99), to detect the /16 preﬁxes that contain 99% of the
overall Internet live population.
To validate the above result, we simulated the sampling process over a syn-
thetic population of 300 million live host, distributed according to the DShield
dataset. The simulated sampling process simply generates up to 400 random IP
addresses from each /16 preﬁx. If at least one IP address exists in the hypothet-
ical live host set we mark that preﬁx as live. Our results show that the sampling
process successfully detected live preﬁxes containing 98% of the live population
and isolated all empty and sparsely populated ones.
However, an attacker’s ultimate purpose is to ﬁnd the vulnerable popula-
tion (i.e., the subset of the live population that is susceptible to the attack).
Therefore, a pertinent question is what percentage of the vulnerable population
is contained in the live preﬁxes detected by the sampling process. To answer
this question, we generated a hypothetical vulnerable population by extracting
Fast and Evasive Attacks: Highlighting the Challenges Ahead
213
all the sources from the DShield dataset that contacted port 80 and mapped
each source to its corresponding /16 preﬁx. Our results show that 96% of the
addresses from the vulnerable population are contained in detected live preﬁxes.
This result shows that the sampling process accurately detects live preﬁxes with-
out undue loss of the vulnerable population.
That said, the above trace-driven simulation implicitly assumes that all live
networks are reachable and so responses (or lack thereof) to the sampling probes
are indicative of network liveliness. In practice, perimeter security defenses such
as ﬁrewalls that silently drop probes, can decrease the reachability of the live
address space, negatively impacting the accuracy of the sampling process. In the
next section, we evaluate the impact of such defenses on the eﬀectiveness of the
sampling process through a large scale IP space probing experiment.
3.1 Results from the Wild
We further explored the eﬀectiveness of this approach by conducting a large scale
probing experiment based on the methodology presented in Section 2. The set
of /8 preﬁxes sampled in this experiment was selected from publicly available
information (e.g., IANA [9] and ISC [10]) and excludes all unallocated or reserved
/8 preﬁxes. We also excluded “sensitive” preﬁxes such as those used by certain
government agencies. The outcome of this selection process was a list of 69 /8
preﬁxes. These preﬁxes were then sampled using 256 nodes of the PlanetLab
distributed platform [21], each of which were assigned a set of /8 preﬁxes. Each
node selected a /16 preﬁx from its assigned set and sent a maximum of (n = 400)
SYN packets with destination port 80 to randomly generated IP addresses within
that preﬁx. Probes were sent at a rate of one probe every 5 seconds 5. Once the
ﬁrst response was received from an IP address within the probed preﬁx, the preﬁx
was marked as live and outstanding probes to that preﬁx were terminated. If all
the 400 samples received no response, the preﬁx was marked as empty.
The best way to validate the accuracy of the sampling process is to compare
the results to the actual address space usage. Unfortunately, that information
is not readily available, and so in lieu of that we resort to a simple heuristic
to indirectly assess the quality of the sampling results. Speciﬁcally, using BGP
snapshots from RouteViews [29], we examine the reachability of the preﬁxes
we probed. The intuition is that preﬁxes that were not advertised in the BGP
snapshots are unreachable and therefore should appear as empty in the sampling
results. Consequently, if the sampling process marks a non-advertised preﬁx as
empty, then the sampling decision is indeed correct. Note that the converse is
not true—preﬁxes that have no live hosts can still be reachable. For instance,
address space monitored by a network telescope is practically empty space but
it is advertised in order to receive the “unwanted” traﬃc.
Figure 4 visualizes the results of the probing experiment. The x-axis shows the
probed /8 preﬁxes. To preserve the privacy of these networks, we anonymized
the ﬁrst octet of these preﬁxes and present them in a random order. The y-axis
5 The choice of the target port as well as the probing rate are speciﬁc to the conditions
of our experiment. In practice, faster and more sophisticated techniques can be used.
214
M.A. Rajab, F. Monrose, and A. Terzis
Fig. 4. Summary of results from the probing experiment
shows the /16 preﬁx index within each /8. Each block in the map is colored ac-
cording to the sampling result of the corresponding /16 preﬁx. The white blocks
in the ﬁgure show the empty and unreachable (non-advertised) preﬁxes. Overall,
63% of the empty preﬁxes were not advertised in the RouteViews dataset. The
gray blocks show empty, but reachable, preﬁxes. These preﬁxes correspond to
allocated but unused space or to passive network monitors. Interestingly, the
sampling process successfully detected two large network monitors belonging to
two diﬀerent research institutions, which we veriﬁed using out-of-band informa-
tion. All the detected live preﬁxes, shown by the black clusters on the map,
were advertised in the RouteViews dataset. Finally, notice that the detected live
preﬁxes within each /8 are highly clustered, which is a direct result of common
preﬁx allocation practices.
The sampling process sent a total number of 3.3 million probes, which is
signiﬁcantly less than the 2.43 billion probes used by Bethencourt et.al. [3] 6. In-
terestingly, the number of probes required to detect a live preﬁx follows a heavy
tailed distribution with a mean of only 50 probes. This is due to the underly-
ing live host distribution, and shows the eﬀectiveness of the bound derived in
Section 2.
Next, we examine the percentage of the live population that resides in the
detected live preﬁxes. We do so using the two datasets mentioned earlier (see
Table 2). Of all the sources that reside in the probed /8 preﬁxes, 86% of the
DShield sources and 88% of the darknet sources belong to live preﬁxes detected
by our probing experiment. This result further proves the eﬀectiveness of the
probing process in locating the majority of the live population. Moreover, it
6 The total number of probes in [3] was actually ∼ 9 billion, but we scale it to the
69 /8 preﬁxes we targeted.
Fast and Evasive Attacks: Highlighting the Challenges Ahead
215
shows the minimal impact that current network perimeter defenses have in hiding
the live address space.
While the previous experiment tested the accuracy of the sampling process
at the /16 preﬁx level, we also examined its eﬀectiveness at the /24 level. To
do so, we selected two /8 preﬁxes belonging to two diﬀerent major ISPs and
applied the sampling process to detect live /16 and /24 preﬁxes. We found that
the sampling process was equally eﬀective in detecting these preﬁxes, requiring
only 5 probes, on average, per /24 preﬁx.
4 Evasive Malware Attacks
Without question, the sampling mechanism presented in Section 2 can poten-
tially be abused for nefarious purposes. For example, information about the loca-
tion of live hosts could be exploited to launch targeted attacks against selected
preﬁxes—a behavior widely exhibited by botnets. More importantly, malware
strains that incorporate knowledge about the location of empty preﬁxes to guide
their scans could potentially evade detection by passive network monitors. We
demonstrate the practicality of this threat through two sample infection strate-
gies outlined in the sections that follow. Later, we turn our attention to ways in
which this threat can be mitigated.
4.1 Worm Spreading Using Oﬀ-Line Sampling Knowledge
We ﬁrst consider a scenario where the attacker samples the address space prior
to launching the actual attack. The knowledge from the sampling process is
encoded and shared as a hierarchical bitmap (similar to that shown in Figure 5.a)
representing the live preﬁxes at each layer of the hierarchy.
 256 bits
Live /16s
1
1
1
1
Live /24s
Sampling Results
a. Oﬀ-line Samplimg
256 bits
Completed /16s
b. Online
Fig. 5. Part (a) shows the information collected during oﬄine sampling for a given /8;
the index of the bitmap represents the preﬁx ID. Live preﬁxes are encoded as “1” in
the bitmap and only live preﬁxes are expanded. Part (b) shows the online case where
nodes only share progress information.
The infection phase begins by targeting an initial hit-list to which the attacker
disseminates the constructed bitmap. Each infected node from the hit-list then
starts scanning the IP space uniformly, but only sends scans to IP addresses
216
M.A. Rajab, F. Monrose, and A. Terzis
Table 3. Worm Simulation Parameters
630,000
Number of Vulnerable hosts
Average scanning rate per infected host (s) 350 scans/sec
Size of initial Hit List
Scanning Algorithm
Monitors conﬁguration
Network Delay
Sampling Interval per /16 preﬁx
Sampling Interval per /24 preﬁx
Number of delegated /8 preﬁxes per host
(for the on-line case)
256
Uniform with evasion
256 /16 (randomly deployed)
µ = 50 ms , σ = 20 ms
3 sec
1 sec
1
within live preﬁxes. Furthermore, each new victim receives a copy of the bitmap
along with the malware payload.
Propagation Model: This infection strategy can be modeled by extending the
worm spreading models presented in [4,27]. The worm search space in this case is
reduced from the entire 232 IP address space to the sum of the space covered by
all the detected live preﬁxes. Therefore, the probability of contacting a certain
host is equal to the probability (p) of contacting a host in the live space. Given
p, the expected number of infected hosts It+1 at time t + 1 is given by:
1 − (1 − p)sIt
!
It+1 = It + (Vt − It)
(4)
where Vt is the total number of vulnerable hosts and sIt is the total number
of scans generated by all currently infected hosts It, each scanning at a rate
of s scans/time step. Since p > 1
232 the infection speed is higher than that of
a uniform scanning worm. Moreover, since p increases as the live portion of
the address space decreases, worm speed increases proportionally to the size
of the un-scanned (empty) space. Therefore, sampling not only improves the
stealthiness of the worm but increase its spreading speed as well.
We evaluate malware spreading in this case via simulation and compare it to
a conventional uniform scanning worm outbreak. The simulation parameters we
used are shown in Table 3. Network monitors in our simulation are abstracted
as IP preﬁxes that record the source IP address of each connection attempt.