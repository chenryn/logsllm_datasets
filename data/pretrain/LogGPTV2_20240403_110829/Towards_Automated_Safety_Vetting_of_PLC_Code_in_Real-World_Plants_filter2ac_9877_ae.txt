the existing temporal relations in the graph but may also
introduce new temporal dependencies. This is because the
code we analyze represents only a partial view of the entire
ICS environment and therefore does not contain all the event
relations. As a complement, mining runtime data traces offers
a holistic view of the plant and can further uncover implicit
dependencies hidden from controller code.
VI. SAFETY VETTING WITH TIMED EVENT SEQUENCES
A. Timed Event Sequences
Once we have constructed the TECG, we can generate event
sequences based upon this graph. The major challenge is how
to create event permutations that conform to the quantitative
dependencies illustrated by TECG. Generally speaking,
to
encode the mined time range of an event (i.e., “soft” temporal
invariant) into a sequence, we discretize the continuous range
(cid:22)(cid:20)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:08 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)
event
)
Setevent ← GETEVENTSET(TECGin)
← DISCRETIZE(Setevent, ρ)
SEQ ← PERMUTE(Set
for ∀SEQ ∈ SEQ do
for ∀ev ∈ SEQ do
Algorithm 2 Generation of Timed Event Sequences
1: procedure BUILDTSEQS(TECGin, ρ)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
end for
12:
return SEQ
13:
14: end procedure
Path ← FINDALLSOLUTIONS(TECGin, ev)
if (cid:3)path ∈ Path : path ⊆ SEQ.SUBSEQ(0, ev) then
end if
SEQ ← SEQ − SEQ
(cid:2)
event
Set
end for
to multiple time slices and introduce a versioned event for
each slice to represent its possible occurrences. To reﬂect the
qualitative relations among events, we check every possible
permutation against the graph, so as to guarantee the prereq-
uisite for each event happens before its occurrence.
it
Our algorithm BUILDTSEQS is presented in Algorithm 2. It
takes two arguments. The ﬁrst one is TECGin, a reduced version
of TECG, which preserves solely the nodes that are PLC inputs.
These input events are the necessary ones to exercise the PLC
code. The second argument ρ is the discretization parameter
that indicates the number of slices every time duration is
divided into. On startup, our algorithm ﬁrst retrieves all the
events in the graph TECGin to generate an event set Setevent.
Next, for any event in Setevent, whose starting time is within
a certain range (i.e., its incoming edge is labeled with an
invariant), the range is discretized using ρ to create multiple
versioned events. We then replace the original event with a
set of versioned ones. For instance, since Part AtConveyor
is enabled 3 to 39.4 seconds after Deliver Part,
is
discretized to be a set {P ACT +3, P ACT +10, P ACT +18,
P ACT +25, P ACT +32, P ACT +39} when ρ is 5.
Hence, we extend Setevent to be a new set Set
(cid:2)
event. Then,
(cid:2)
we permute all the events in Set
event to create sequences.
Notice that in every permutation, only one versioned event
from the same set can be chosen. The result of this PERMUTE
is a set SEQ containing all candidate sequences. We further
check each candidate SEQ to see if it contradicts the causalities
indicated by TECGin, and if so, it will be discarded. To do so,
we iterate over each event ev in a sequence SEQ, and ﬁnd all
the “solutions” for ev on its hosting and-or graph TECGin. A
solution for ev is a path, from ev to a top-level vertex, which
includes all of its prerequisites that are required to cause ev to
happen. If any solution path is covered by the subsequence
from the ﬁrst element of SEQ to ev, we keep this candidate
SEQ. Otherwise, it is removed from SEQ. Finally, we output
the result SEQ as the generated timed event sequences.
For our motivating example, we can create a timed
sequence, 1:Pallet Sensor (cid:2) 2:¬ Part Sensor (cid:2)
3:CNC Part Ready (cid:2) 4:Robot Ready (cid:2) 5:¬ Part -
AtConveyor (cid:2) 6:Part AtConveyorT +10 (cid:2) 7:RFID -
IO CompleteT +20, which can lead to the safety violation
due to premature termination of 6:Part AtConveyorT +10.
Detailed implementation can be found in Appendix D.
Selection of ρ. A na¨ıve way for discretizing a time range
is to merely consider its lower and upper bounds (i.e., ρ = 1).
Theoretically, it is sufﬁcient to detect the possible presence of
timing-related safety violations. However, this is too coarse-
grained and can only tell if an error will occur when a machine
operates at its maximum or minimum speed. On the contrary, it
is in fact crucial to understand the range of machine speeds that
can lead to errors. Such contextual evidence can help security
investigators draw a better conclusion whether a logic error is
caused by attacks. For example, prior work [38] has correlated
the narrowness of an error trigger with its malice. Thus,
ideally, we expect to always select a larger ρ. However, the
increase in time slices also leads to the growth of total number
of permutations. To understand how to strike a balance, we
have an empirical study in the evaluation. Nevertheless, it
is noteworthy that, while a better ρ can provide informative
evidence with lower cost, the selection of ρ does not affect
whether we can detect a safety defect.
B. Safety Speciﬁcation
The event sequences that we generate can facilitate auto-
mated path exploration for testing PLC code. However, the fact
that we can reach an unsafe state does not necessarily mean
we can automatically detect the problem. To enable automated
detection, we need to further specify certain safety rules and
programmatically verify them at runtime.
time does not suggest
Prior work [54] has adopted linear temporal logic (LTL)
to formally deﬁne safety requirements for ICSs. However,
at runtime, it is hard to enforce an LTL-based rule which
requires an activity to be followed by another (e.g., overﬂow
avoidance), because the absence of a required event during
limited test
its absence at a later
time. Although, in practice, these required actions must be
accomplished within a certain amount of time, LTL however
is not capable of describing such temporal relations in a
quantitative fashion. To address this limitation, we again use
TPTL [26] to quantitatively express safety speciﬁcations.
Deﬁnition 3. Let P be a set of atomic logical proposi-
tion symbols about the system {p1, p2, ...p|A|}, e.g., sensor
Pallet Sensor is on, and let Σ = 2A be a ﬁnite alphabet
composed of these propositions. Then, the set of TPTL-based
Safety Requirements is inductively deﬁned by the grammar:
π := x + c | c
φ := p|π1 ≤ π2|π1 ≡d π2|f alse|φ1 → φ2| (cid:8) φ|φ1U φ2|x.φ
The grammar of TPTL is further explained in Appendix E.
Table II demonstrates 5 typical classes of safety speciﬁcations,
which have been studied by previous academic work or
required by OSHA (Occupational Safety and Health Admin-
istration). We categorize the policies based on the root causes
of industrial hazards. First, a majority of safety incidents are
caused by dangerous machine-machine interactions, including
machine collision, machines facing overﬂow or underﬂow due
to upstream machines. Second, failure to separate humans
from life-threatening machines may result in fatal accidents.
Last but not least, individual machines, even without interac-
(cid:22)(cid:20)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:08 UTC from IEEE Xplore.  Restrictions apply. 
Typical Hazard
Collision
Overﬂow
Underﬂow
Non-Separation When the gate for robot is opened, robot must stop working.
Danger Zone
TABLE II: Categories of Safety Speciﬁcations
Example Speciﬁcation to Avoid Hazard
Formal Deﬁnition
(cid:3)(Conveyor Running → ¬♦Robot Pickup)
Whenever conveyor belt starts running, a robot arm cannot come down to pick up items.
(cid:3)tx.(Pallet → ♦ty.(Retract ∧ ty − tx ≤ 30s)) Motivating Example
Once a pallet enters a cell, the stopper must be retracted within 30 seconds to release it.
(cid:3)(Purify Start → ¬♦(water level ≤ L))
When water puriﬁcation starts, water level of tanks must not below L.
(cid:3)(Gate Open → ¬♦Robot On)
Upon start, the frequency of a motor in a nuclear centrifuge is between 807 and 1210 Hz. (cid:3)(Start → (cid:3)(807Hz ≤ speed ≤ 1210Hz))
References
TSV [54]
Chen et al. [33]
OSHA Instr. [59]
Stuxnet Dossier [36]
tion with any other entities, can still result in critical damage
because they operate spatially or temporally in unsafe zones.
C. Trace-based Veriﬁcation.
We carry out runtime veriﬁcation based upon execution
traces of PLC code. Note that, while in our testbeds, all
controllers (i.e., for PLCs, robots, CNCs) can physically
operate and thus produce real events, in our simulations, we
only analyze PLC code while modeling and simulating the
inputs (i.e., events) from remote devices.
Particularly, we ﬁrst run a PLC program repeatedly, while
each time we exercise the code using an individual event
sequence. To this end, we convert PLC ST programs into
C code using the MATIEC compiler [13] and then utilize a
PLC simulator [14] to execute the code. To produce execution
traces, we further instrument the generated C code to dump
all instructions and variable values that originated from PLC
code. In the end, we conduct runtime veriﬁcation for TPTL
speciﬁcations on the traces. In theory, we can follow a prior
approach [32] to perform comprehensive interpretation and
translation of TPTL languages. However, since our safety
speciﬁcations are deﬁned at a high level and usually straight-
forward, thus, in practice, our runtime monitor only focuses on
this small subset that we use to describe safety requirements.
VII. EVALUATION
A. Experimental Setup
To evaluate the effectiveness and efﬁciency of our approach,
we follow the methodology of previous studies [33], [43],
[54] to test VETPLC on different PLC programs. However,
in contrast to prior work that experimented on either synthe-
sized PLC code without necessary physical contexts [43] or
simple, isolated logic without machine interactions (e.g., trafﬁc
lights) [54], we apply VETPLC to real-world PLC programs
that are tightly coupled with speciﬁc scenarios involving
interconnected physical devices. To further demonstrate the
generality of VETPLC, unlike Chen et al.’s work [33] that
focused on only one particular testbed, we hope to evaluate
our system on multiple scenarios for different ICS settings.
This, however, is a challenging task because it requires
a deep understanding of both physical and logical domains
of real-world control systems. Nevertheless, we developed 10
scenarios on two realistic testbeds, SMART and Fischertechnik,
that have completely different physical compositions. The
SMART testbed has been introduced in Section III. The Fis-
chertechnik testbed (Figure 10) is a miniature that emulates
consecutive processing of parts. It connects 4 cells and 2 push
rams using multiple conveyors and sensors, while each cell
consists of a PLC and a CNC machine. Interested readers can
refer to Appendix F to learn more details about this testbed.
Table III lists the 10 scenarios from these two testbeds.
invariant mining,
We perform causality graph generation,
event sequence construction and safety vetting on them. Our
experiments have been conducted on a test machine equipped
with Intel(R) Core(TM) i7-2600 CPU @ 3.40GHz and 16GB
of physical memory. The OS is Ubuntu 16.04.4 LTS (64bit).
B. Result Overview
To show the effectiveness of VETPLC, we would like to
carry out comparative experiments. Unfortunately, existing
work on PLC vetting, such as TSV [54] or SYMPLC [43],
cannot generate event sequences to automatically analyze real-
world event-driven PLC code. Nevertheless, these state-of-the-
art analyzers can always be enhanced to handle event-driven
code if they adopt ALLSEQS [27] to calculate all possible
event permutations. Therefore, we implement an ALLSEQS-
based baseline safety analyzer for the comparison purpose.
We apply VETPLC and the baseline analyzer to our 10
scenarios, and study 3 methods that create event sequences:
1) the baseline (ALLSEQS), 2) using VETPLC to generate
untimed event sequences (VETPLC-SEQS), and 3) applying
VETPLC to timed sequence generation. When creating timed
sequences, we select three different discretization parameters,
ρ = 2 (VETPLC-TSEQS-2), ρ = 5 (VETPLC-TSEQS-5) and
ρ = 10 (VETPLC-TSEQS-10). Figure 6 depicts the number of
sequences each method creates, while Table IV demonstrates
whether generated event sequences can lead to the discovery
of safety violations. Further, for safety-related errors triggered
by timed event sequences, the table also shows the ranges of
corresponding machine speeds that can cause the problem.
As shown in the table, pure ordering-based event per-
mutations, ALLSEQS and VETPLC-SEQS, cannot
lead to
the hidden safety violations in timing-sensitive PLC code.
We do observe, from Figure 6, a dramatic decrease (up to
96%) of event permutations for VETPLC-SEQS (green curve)
compared to ALLSEQS (red curve). Although the decline of
possible event sequences results in much less analysis runtime
overhead, it does not affect whether a violation can be detected
in our cases. However, provided that a timing-insensitive safety
problem can be detected by ALLSEQS, VETPLC can achieve
it two orders of magnitude faster.
In contrast, all the timed event sequences can result in
safety problems.
In fact, some of the error cases, such as
conveyor overﬂow and frozen robots, can in fact be observed
occasionally from our testbeds during daily work but cannot be
easily diagnosed manually. VETPLC not only helps uncover
their root causes but also ﬁnds other, previously unknown,
problems. Although the vulnerabilities detected in our work all
originate from human mistakes, it is also possible for insiders
to actively inject safety faults into PLC source code. Note
that, however, VETPLC can detect any safety violations in
(cid:22)(cid:20)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:08 UTC from IEEE Xplore.  Restrictions apply. 
#
1
2
3
4
5
6
7
8
9
10
Scenario Name
Conveyor Overﬂow #1
Robot in Danger Zone
Conveyor Overﬂow #2
Part-Gate Collision
CNC Overﬂow
Ram-Part Collision
CNC-Part Collision
Conveyor Overﬂow #3
Conveyor Underﬂow
Ram-Part Collision #2
TABLE III: Scenarios of Safety Violations
Description of Hazard
Testbed
SMART Motivating Example. See Section III
SMART
SMART