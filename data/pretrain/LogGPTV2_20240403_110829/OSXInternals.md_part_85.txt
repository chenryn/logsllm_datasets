Chapter 7. Processes Page 74 of 107
#!/bin/sh
# sched_tick.sh
SCHED_TICK_ADDR="0x`nm /mach_kernel | grep -w _sched_tick | awk '{print $1}'`"
if [ "$SCHED_TICK_ADDR" == "0x" ]
then
echo "address of _sched_tick not found in /mach_kernel"
exit 1
fi
dd if=/dev/kmem bs=1 count=4 iseek=$SCHED_TICK_ADDR of=/dev/stdout | hexdump -d
sleep 10
dd if=/dev/kmem bs=1 count=4 iseek=$SCHED_TICK_ADDR of=/dev/stdout | hexdump -d
exit 0
$ sudo ./sched_tick.sh 2>/dev/null
0000000 00035 09878
0000004
0000000 00035 09958
0000004
7.4.1.6. Some Periodic Kernel Activities
We have already seen what rtclock_intr() does. Let us briefly look at the operations of hertz_tick(),
timer_call_interrupt(), and sched_tick_continue().
hertz_tick() [osfmk/kern/mach_clock.c] performs certain operations on all processors, such as
gathering statistics, tracking thread states, and incrementing user-mode and kernel-mode thread timers.
Examples of statistics gathered include the total number of clock ticks and profiling information (if
profiling is enabled). On the master processor, hertz_tick() additionally calls bsd_hardclock().
bsd_hardclock() [bsd/kern/kern_clock.c] performs several operations if there is a valid, current
BSD process and the process is not exiting. If the processor was in user mode, bsd_hardclock() checks
whether the process has a virtual interval timerthat is, an interval timer of type ITIMER_VIRTUAL that
decrements in process-virtual time (only when the process is executing). Such a timer can be set by
setitimer(2). If such a timer exists and has expired, bsd_hardclock() arranges for a SIGVTALRM signal
to be delivered to the process.
As we saw in Chapter 6, the USER_MODE() macrodefined in osfmk/ppc/proc_reg.his used to examine
the saved SRR1, which holds the old contents of the MSR. The PR (privileged) bit of the MSR
distinguishes between kernel and user mode.
bsd_hardclock() performs other operations regardless of whether the processor was in user mode, as
long as the processor was not idle. It charges the currently scheduled process with resource utilization for
a tick. It then checks whether the process has exceeded its CPU time limit (as specified by the
RLIMIT_CPU resource limit), sending it a SIGXPU signal if it has. Next, it checks whether the process has a
profiling timerthat is, an interval timer of type ITIMER_PROF. Such a timer decrements both in process-
virtual time and when the kernel is running on behalf of the process. It can also be set by setitimer(2).
If such a timer exists and has expired, bsd_hardclock() arranges for a SIGPROF signal to be delivered to
the process.
timer_call_interrupt() [osfmk/kern/timer_call.c] traverses the timer call queue for the current
processor and calls handlers for those timers whose deadlines have expired (Figure 744).
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 75 of 107
Figure 744. Timer call processing
// osfmk/kern/timer_call.c
#define qe(x) ((queue_entry_t)(x))
#define TC(x) ((timer_call_t)(x))
static void
timer_call_interrupt(uint64_t timestamp)
{
timer_call_t call;
queue_t queue;
simple_lock(&timer_call_lock);
queue = &PROCESSOR_DATA(current_processor(), &timer_call_queue);
call = TC(queue_first(queue));
while (!queue_end(queue, qe(call))) {
if (call->deadline func(), passing it call->param0 and call->param1
...
} else
break;
call = TC(queue_first(queue));
}
...
}
sched_tick_continue() [osfmk/kern/sched_prim.c] performs periodic bookkeeping functions for the
scheduler. As Figure 745 shows, it increments the sched_tick global variable by 1, calls
compute_averages() [osfmk/kern/sched_average.c] to compute the load average and the Mach
factor, and calls tHRead_update_scan() [osfmk/kern/sched_prim.c] to scan the run queues of all
processor sets and processors to possibly update thread priorities.
Figure 745. The scheduler's bookkeeping function
// osfmk/kern/sched_prim.c
void
sched_tick_continue(void)
{
uint64_t abstime = mach_absolute_time();
sched_tick++;
// compute various averages
compute_averages();
// scan the run queues to account for timesharing threads that may need
// to be updated -- the scanner runs in two passes
thread_update_scan();
// compute next deadline for our periodic event
clock_deadline_for_periodic_event(sched_tick_interval,
abstime, &sched_tick_deadline);
assert_wait_deadline((event_t)sched_tick_thread, THREAD_UNINT,
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 76 of 107
sched_tick_deadline);
thread_block((thread_continue_t)sched_tick_continue);
// NOTREACHED
}
7.4.2. Scheduler Operation
Mac OS X is primarily a timesharing system in that threads are subject to timesharing scheduling unless
explicitly designated otherwise. Typical timesharing scheduling aims to providewithout guaranteeseach
competing thread a fair share of processor time, where fairness implies that the threads receive roughly
equal amounts of processor resources over a reasonably long time.
Mapping the Scheduler
Figure 746 shows a call graph consisting of several key functions that are involved in the
execution and scheduling of threads. Given the density of the graph, we will not discuss it in
this chapter. However, it can be used as an accessory to further study of the Mac OS X
scheduler.
Figure 746. A nonexhaustive call graph of functions involved in thread execution and scheduling
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 77 of 107
The following general points are noteworthy about scheduling on Mac OS X.
The scheduler schedules only Mach threads and no other higher-level entities.
The scheduler does not use the knowledge that two or more threads may belong to the same task to
select between them. In theory, such knowledge could be used to optimize intratask context
switching.
Mach uses the same scheduler for both multiprocessors and uniprocessors. In fact, Mac OS X uses
the same kernelthe multiprocessor versionregardless of the number of processors on a machine.[16]
[16] The multiprocessor kernel runs with some overhead on uniprocessor systems.
The Mac OS X kernel supports handoff scheduling, wherein a thread can directly yield the
processor to another thread without fully involving the scheduler. The kernel's message-passing
mechanism can use handoff scheduling while sending a messageif a thread is waiting to receive a
message, the sending thread can directly switch to the receiving thread. The receiver effectively
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 78 of 107
inherits the sender's scheduling attributes, including the remainder of the sender's current quantum.
Once this quantum expires, however, the effects of the "inheritance" disappear.
The Mac OS X scheduler supports multiple scheduling policies, including a "soft" real-time policy.
However, the scheduler does not provide an interface for loading custom policies.[17]
[17] For example, the Solaris operating system supports dynamically loadable
scheduling policies.
Each processor has its own, dedicated idle thread that looks for other threads to execute while it
runs.
7.4.2.1. Priority Ranges
The Mac OS X scheduler is priority-based. The selection of threads for running takes into account the
priorities of runnable threads. Table 72 shows the various priority ranges in the scheduling
subsystemnumerically higher values represent higher priorities. The HOST_PRIORITY_INFO flavor of the
host_info() Mach routine can be used to retrieve the values of several specific priorities.
Table 72. Mac OS X Scheduler Priorities
Levels Description
010 This range contains the lowest priorities (aged, idle) to lowered priorities
(aged). The lowest priority (0) has several synonyms, such as
MINPRI_USER, MINPRI, IDLEPRI (idle priority), and DEPRESSPRI (depress
priority).
1130 This range contains lowered priorities.
31 This is the default base priority (BASEPRI_DEFAULT) for user threads.
host_info() returns this value as the user priority.
3251 This range contains elevated priorities, such as those attainable through
task_policy_set(). For example, BASEPRI_BACKGROUND (46),
BASEPRI_FOREGROUND (47), and BASEPRI_CONTROL (48) correspond to the
base priorities of tasks that have been designated as background,
foreground, and control tasks, respectively.
5263 This range also contains elevated priorities. MAXPRI_USER (63) is set as a
new task's maximum priority when the task is created.
6479 This range contains high priorities normally reserved for the system. The
end points64 and 79are called MINPRI_RESERVED and MAXPRI_RESERVED,
respectively. MINPRI_RESERVED is returned as the server priority by
host_info().
8095 This range contains kernel-only priorities. The priorities 80, 81, 93, and 95
are called MINPRI_KERNEL, BASEPRI_KERNEL, BASEPRI_PREEMPT, and
MAXPRI_KERNEL, respectively. host_info() returns MINPRI_KERNEL as
the value of both the kernel and system priorities.
96127 The priorities in this range are reserved for real-time threads and are
attainable through tHRead_policy_set(). The priorities 96, 97, and 127
are called BASEPRI_REALTIME, BASEPRI_RTQUEUES, and MAXPRI,
respectively.
7.4.2.2. Run Queues
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 79 of 107
A fundamental data structure maintained by the Mach scheduler is a run queue. Each run queue structure
(Figure 747) represents a priority queue of runnable threads and contains an array of NRQS doubly linked
lists, one corresponding to each priority level. The structure's highq member is a hint that indicates the
likely location of the highest priority thread, which may be at a priority lower than the one specified by
highq but will not be at a higher priority. Recall that each processor set has a run queue and each
processor has a local run queue.
Figure 747. The run queue structure
// osfmk/kern/sched.h
#define NRQS 128 // 128 levels per run queue
#define NRQBM (NRQS/32) // number of words per bitmap
#define MAXPRI (NRQS-1) // maximum priority possible
#define MINPRI IDLEPRI // lowest legal priority schedulable
#define IDLEPRI 0 // idle thread priority
#define DEPRESSPRI MINPRI // depress priority
...
struct run_queue {
int highq; // highest runnable queue
int bitmap[NRQBM]; // run queue bitmap array
int count; // number of threads total
int urgency; // level of preemption urgency
queue_head_t queues[NRQS]; // one for each priority
};
7.4.2.3. Scheduling Information in Tasks and Threads
To balance processor usage among threads, the scheduler adjusts thread priorities to account for each
thread's usage. Associated with each thread and task are several priority-related limits and measurements.
Let us revisit the task and thread structures to examine some of the scheduling-related information
contained within them. The relevant portions of the structures are annotated in Figure 748.
Figure 748. Important scheduling-related fields of the task and thread structures
// osfmk/kern/task.h
struct task {
...
// task's role in the system
// set to TASK_UNSPECIFIED during user task creation
task_role_t role;
// default base priority for threads created within this task
// set to BASEPRI_DEFAULT during user task creation
integer_t priority;
// no thread in this task can have priority greater than this
// set to MAXPRI_USER during user task creation
integer_t max_priority;
...
};
// osfmk/kern/thread.h
struct thread {
...
// scheduling mode bits include TH_MODE_REALTIME (time-constrained thread),
// TH_MODE_TIMESHARE (uses standard timesharing scheduling),
// TH_MODE_PREEMPT (can preempt kernel contexts), ...
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 80 of 107
//
// TH_MODE_TIMESHARE is set during user thread creation
integer_t sched_mode;
integer_t sched_pri; // scheduled (current) priority
// base priority
// set to parent_task->priority during user thread creation
integer_t priority;
// maximum base priority
// set to parent_task->max_priority during user thread creation
integer_t max_priority;
// copy of parent task's base priority
// set to parent_task->priority during user thread creation
integer_t task_priority; // copy of task's base priority
...
// task-relative importance
// set to (self->priority - self->task_priority) during user thread creation
integer_t importance;
// parameters for time-constrained scheduling policy
struct {
...
} realtime;
uint32_t current_quantum; // duration of current quantum
...
// last scheduler tick
// set to the global variable sched_tick during user thread creation
natural_t sched_stamp;
// timesharing processor usage
// initialized to zero in the "template" thread
natural_t sched_usage;
// factor for converting usage to priority
// set to the processor set's pri_shift value during user thread creation
natural_t pri_shift;
};
As shown in Figure 748, each thread has a base priority. However, the thread's scheduled priority is the
one that the scheduler examines while selecting threads to run.[18] The scheduled priority is computed
from the base priority along with an offset derived from the thread's recent processor usage. The default
base priority for timesharing user threads is 31, whereas the minimum kernel priority is 80. Consequently,
kernel threads are substantially favored over standard user threads.
[18] This discussion applies only to timesharing threads. Real-time threads are treated
specially by the scheduler.
7.4.2.4. Processor Usage Accounting
As a thread accumulates processor usage, its priority decreases. Since the scheduler favors higher
priorities, this could lead to a situation where a thread has used so much processor time that the scheduler
will assign it no further processor time owing to its greatly lowered priority. The Mach scheduler
addresses this issue by aging processor usageit exponentially "forgets" a thread's past processor usage,
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 81 of 107
gradually increasing that thread's priority. However, this creates another problem: If the system is under
such heavy load that most (or all) threads receive little processor time, the priorities of all such threads
will increase. The resultant contention will deteriorate system response under heavy load. To counter this
problem, the scheduler multiplies a thread's processor usage by a conversion factor related to system load,
thereby ensuring that thread priorities do not rise because of increased system load alone. Figure 749
shows the calculation of a thread's timesharing priority based on its processor usage and the system's load.
Figure 749. Computation of the timesharing priority of a thread
// osfmk/kern/priority.c
#define do_priority_computation(thread, pri) \
do { \
(pri) = (thread->priority) /* start with base priority */ \
- ((thread)->sched_usage >> (thread)->pri_shift); \
if ((pri)  MAXPRI_KERNEL) \
(pri) = MAXPRI_KERNEL; \
} while (FALSE);
We see in Figure 749 that the thread's processor usage (thread->sched_usage), after being lowered by a
conversion factor (thread->pri_shift), is subtracted from its base priority (thread->priority) to
yield the scheduled priority. Let us now see how the conversion factor is calculated and how the thread's
processor usage decays over time.
update_priority() [osfmk/kern/priority], which is frequently called as part of the scheduler's
operation, under certain conditions updates the thread's conversion factor value by setting it to that of the
processor set containing the thread.
The conversion factor consists of two components: a fixed part based on the machine-dependent absolute-
time unit and a dynamic part based on system load. The global variable sched_pri_shift contains the
fixed part, which is computed during scheduler initialization. The dynamic part is an entry in a constant
array, with the array index based on the system load. Figure 750 shows a user-space implementation of a
function to convert clock intervals to absolute-time intervals. Using this function, we can reconstruct the