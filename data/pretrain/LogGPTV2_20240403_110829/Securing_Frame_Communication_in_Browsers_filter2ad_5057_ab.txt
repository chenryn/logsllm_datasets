from the restrictions imposed by the browser’s frame
navigation policy. Top-level frames are less vulnerable
to frame navigation attacks because the browser displays
their location in the location bar. Internet Explorer and
Safari do not restrict the navigation of top-level frames
at all. Firefox restricts the navigation of top-level frames
based on their openers, but this restriction can be circum-
vented [2]. Opera implements a number of restrictions
on the navigation of top-level frames based on the cur-
rent location of the frame.
3.2 Cross-Window Attacks
In 1999, Georgi Guninski discovered that the permis-
sive frame navigation policy admits serious attacks [16].
Guninski discovered that, at the time,
the password
ﬁeld on the CitiBank login page was contained within
a frame. Because the permissive frame navigation policy
lets any frame navigate any other frame, a web attacker
can navigate the password frame on CitiBank’s page
to https://attacker.com/, replacing the frame
with identical-looking content that sends the user’s pass-
word to attacker.com.
In the modern web, this
cross-window attack might proceed as follows:
1. The user reads a popular blog that displays a Flash
advertisement provided by attacker.com.
2. The user opens a new window to bank.com,
which displays its password ﬁeld in a frame.
3. The malicious advertisement navigates the pass-
word frame to https://attacker.com/. The
location bar still reads bank.com and the lock icon
is not removed.
otherWindow.frames[0].location =
"https://attacker.com/";
4. The user enters his or her password, which is then
submitted to attacker.com.
navigates the frame to https://attacker.com/.
This has the effect of replacing the frame’s docu-
ment with content retrieved from that URL. Under
the permissive policy, this navigation succeeds even if
otherWindow contains content from a different secu-
rity origin. There are a number of other idioms for navi-
gating frames, including
window.open("https://attacker.com/",
"frameName");
which requests that the browser search for a frame named
frameName and navigate the frame to the speciﬁed
URL. Frame names exist in a global name space and are
not restricted to a single security origin.
Of the browsers in heavy use today, Internet Explorer 6
and Safari 3 both implement the permissive policy. In-
ternet Explorer 7 and Firefox 2 implement stricter poli-
cies (described in subsequent sections). However, Flash
Player can be used to circumvent the stricter navigation
policy of Internet Explorer 7, effectively reducing the
policy to “permissive.” Many web sites are vulnerable to
this attack, including Google AdSense, which displays
its password ﬁeld inside a frame; see Figure 1.
Window Policy.
Mozilla implemented a stricter policy in 2001:
In response to Guninski’s report,
Window Policy
A frame can navigate only frames in its window.
 0 
17th USENIX Security Symposium 
USENIX Association
Figure 1: Cross-Window Attack: The attacker controls the password ﬁeld because it is contained within a frame.
This policy prevents the cross-window attack because the
web attacker does not control a frame in the same win-
dow as the CitiBank or the Google AdSense login page.
Without a foothold in the window, the attacker cannot
navigate the login frame to attacker.com.
3.3 Same-Window Attacks
The window frame navigation policy is neither univer-
sally deployed nor sufﬁciently strict to protect users on
the modern web because mashups violate its implicit se-
curity assumption that an honest principal will not embed
a frame to a dishonest principal.
Mashups. A mashup combines content from multiple
sources to create a single user experience. The party
combining the content is called the integrator and the
integrated content is called a gadget.
• Aggregators.
Gadget aggregators,
[15], My Yahoo [40],
such as
and Win-
iGoogle
dows Live [28], are one form of mashup. These
sites let users customize their experience by se-
lecting gadgets (such as stock tickers, weather
predictions, news feeds, etc) to include on their
home page. Third parties are encouraged to develop
gadgets for the aggregator. These mashups embed
the selected gadgets in a frame and rely on the
browser’s frame isolation to protect users from
malicious gadgets.
• Advertisements. Web advertising is a simple form
of mashup, combining ﬁrst-party content, such as
news articles or sports statistics, with third-party ad-
vertisements. Typically, the publisher (the integra-
tor) delegates a portion of its screen real estate to an
advertisement network, such as Google, Yahoo, or
Microsoft, in exchange for money. Most advertise-
ments, including Google AdWords, are contained in
frames, both to prevent the advertisers (who provide
the gadgets) from interfering with the publisher’s
site and to prevent prevent the publisher from using
JavaScript to click on the advertisements.
We refer to aggregators and advertisements as simple
mashups because these mashups do not involve commu-
nication between the gadgets and the integrator. Simple
mashups rely on the browser to provide isolation but do
not require inter-frame communication.
Gadget Hijacking Attacks. Mashups invalidate an
implicit assumption of the window policy, that an hon-
est principal will not embed a frame to a dishonest prin-
cipal. A gadget attacker, however, does control a frame
embedded by the honest integrator, giving the attacker
the foothold required to mount a gadget hijacking at-
tack [22].
In such an attack, a malicious gadget navi-
gates a target gadget to attacker.com and imperson-
ates the gadget to the user.
• Aggregator Vulnerabilities. iGoogle is vulnerable
to gadget hijacking in browsers, such as Firefox 2,
that implement the permissive or window policies;
see Figure 2. Consider, for example, one popu-
lar iGoogle gadget that lets users access their Hot-
mail inbox.
(This gadget is neither provided nor
endorsed by Microsoft.) If the user is not logged
into Hotmail, the gadget requests the user’s Hotmail
password. A malicious gadget can replace the Hot-
mail gadget with content that asks the user for his or
her Hotmail password. As in the cross-window at-
tack, the user is unable to distinguish the malicious
password ﬁeld from the honest password ﬁeld.
USENIX Association  
17th USENIX Security Symposium 
 1
(a) Before
(b) After
Figure 2: Gadget Hijacking Attack. Under the window policy, the attacker gadget can navigate the other gadgets.
• Advertisement Vulnerabilities. Although text ad-
vertisements often do not contain active content
(e.g., JavaScript), other forms of advertising, such
as Flash advertisements, do contain active content.
An attacker who provides such an advertisement
can steal advertising impressions allotted to other
advertisers via gadget hijacking. A malicious ad-
vertisement can traverse the page’s frame hierar-
chy and navigate frames containing other advertise-
ments to attacker.com, replacing the existing
content with the attacker’s advertisement.
3.4 Stricter Policies
Although browser vendors do not document their naviga-
tion policies, we were able to reverse engineered the nav-
igation policies of existing browsers, and we conﬁrmed
our understanding with the browsers’ developers. The
existing policies are shown in Table 2.
In addition to
the permissive and window policies described above, we
discovered two other frame navigation policies:
Descendant Policy
A frame can navigate only its descendants.
Child Policy
A frame can navigate only its direct children.
The Internet Explorer 6 team wanted to enable the child
policy by default, but shipped the permissive policy be-
cause the child policy was incompatible with a large
number of web sites. The Internet Explorer 7 team de-
signed the descendant policy to balance the security re-
quirement to defeat the cross-window attack with the
compatibility requirement to support existing sites [33].
Pixel Delegation. The descendant policy provides the
most attractive trade-off between security and compat-
ibility because it is the least restrictive policy that re-
spects pixel delegation. When one frame embeds another
frame, the parent frame delegates a region of the screen
to the child frame. The browser prevents the child frame
from drawing outside of its bounding box but does al-
low the parent frame to draw over the child using the
position: absolute style. The descendant policy
permits a frame to navigate a target frame precisely when
the frame could overwrite the screen real estate of the tar-
get frame. Although the child policy is stricter than the
descendant policy, the additional strictness does not pre-
vent many additional attacks because a frame can sim-
ulate the visual effects of navigating a grandchild frame
by drawing over the region of the screen occupied by
the grandchild frame. The child policy’s added strictness
does, however, reduce the policy’s compatibility with ex-
isting sites, discouraging browser vendors from deploy-
ing the child policy.
Origin Propagation. A strict interpretation of the de-
scendant policy prevents a frame from navigating its sib-
lings, even if the frame is from the same security origin
as its parent. In this situation, the frame can navigate its
sibling indirectly by injecting script into its parent, which
can then navigate the sibling because the sibling is a de-
scendant of the parent frame. In general, browsers should
decide whether or not to permit a navigation based on the
active frame’s security origin. Browsers should let an ac-
tive frame navigate a target frame if there exists a frame
in the same security origin as the active frame that has
the target frame as a descendant. By recognizing this ori-
gin propagation, browsers can achieve a better trade-off
17th USENIX Security Symposium 
USENIX Association


between security and compatibly. These additional navi-
gations do not sacriﬁce security because an attacker can
perform the navigations indirectly, but allowing them is
more convenient for honest web developers.
3.5 Deployment
We collaborated with the HTML 5 working group [18]
and browser vendors to deploy the descendant policy in
several browsers:
• Safari. We implemented the descendant policy as
a patch for Safari. Apple accepted our patch and
deployed the descendant policy to Mac OS X and
Windows Safari users as a security update [30]. Ap-
ple also deployed our patch to all iPhone and iPod
touch users.
• Firefox. We implemented the descendant policy as
a patch for Firefox. Before accepting our patch,
Mozilla requested tests for all their previous frame
navigation regressions. We provided them with ap-
proximately 1000 lines of regression tests for their
automatic test harness, covering the frame naviga-
tion security vulnerabilities from the past ten years.
Mozilla accepted our patch and deployed the de-
scendant policy in Firefox 3 [1].
• Flash. We reported to Adobe that Flash Player by-
passes the descendant policy in Internet Explorer 7.
Adobe agreed to ship a patch to all Internet Explorer
users in their next security update.
• Opera. We notiﬁed Opera Software about inconsis-
tencies in Opera’s child policy that can be used in
gadget hijacking attacks. They plan to ﬁx these vul-
nerabilities in the upcoming release of Opera 9.5,
and are evaluating the compatibility beneﬁts of
adopting the descendant policy [35].
4 Frame Communication
Over the past few years, web developers have built so-
phisticated mashups that, unlike simple aggregators and
advertisements, are comprised of gadgets that commu-
nicate with each other and with their integrator. Yelp,
which integrates the Google Maps gadget, motivates the
need for secure inter-frame communication by illustrat-
ing how communicating gadgets are used in real de-
ployments. Sections 4.1 and 4.2 analyze and improve
fragment-identiﬁer messaging and postMessage.
Google Maps. One popular gadget is the Google Maps
API [14]. Google provides two mechanisms for integrat-
ing Google Maps:
• Frame. In the frame version of the gadget, the in-
tegrator embeds a frame to maps.google.com,
which Google ﬁlls with a map centered at the speci-
ﬁed location. The user can interact with map, but
the integrator is oblivious to this interaction and
cannot interact with the map directly.
• Script.
In the script version of the gadget, the
integrator embeds a  tag that executes
JavaScript from maps.google.com. This script
creates a rich JavaScript API the integrator can use
to interact with the map, but the script runs with all
of the integrator’s privileges.
Yelp. Yelp is a popular review web site that uses the
Google Maps gadget to display the locations of restau-
rants and other businesses it reviews. Yelp requires a
high degree of interactivity with the Maps gadget be-
cause it places markers on the map for each restaurant
and displays the restaurant’s review when the user clicks
on the marker. In order to deliver these advanced fea-
tures, Yelp must use the script version of the Maps gad-
get. This design requires Yelp to trust Google Maps com-
pletely because Google’s script runs with Yelp’s priv-
ileges in the user’s browser, granting Google the abil-
ity to manipulate Yelp’s reviews and steal Yelp’s cus-
tomer’s information. Although Google might be trust-
worthy, the script approach does not scale beyond highly
respected gadget providers. Secure inter-frame commu-
nication provides the best of both alternatives: Yelp (and
similar sites) can realize the interactivity of the script ver-
sion of Google Maps gadget while maintaining the secu-
rity of the frame version of the gadget.
4.1 The Fragment Identiﬁer Channel
Although the browser’s scripting policy isolates frames
from different security origins, clever mashup designers
have discovered an unintended channel between frames:
the fragment identiﬁer channel [3, 36]. This channel is
regulated by the browser’s less-restrictive frame naviga-
tion policy. This “found” technology lets mashup devel-
opers place each gadget in a separate frame and rely on
the browser’s security policy to prevent malicious gad-
gets from attacking the integrator and honest gadgets.
Mechanism. Normally, when a frame is navigated to
a new URL, the browser retrieves the URL from the
network and replaces the frame’s document with the
retrieved content. However,
if the new URL differ-
ent from the old URL only in the fragment (the por-
then the browser does not reload
tion after the #),
the frame.
If frames[0] is currently located at
http://example.com/doc,
USENIX Association  
17th USENIX Security Symposium 


IE 6 (default)
Permissive
IE 6 (optional)
Child
IE 7 (default)
Descendant
IE 7 (optional)
Permissive
Firefox 2
Window Permissive
Safari 3
Opera 9
Child
Table 2: Frame navigation policies deployed in existing browsers.
frames[0].location =
"http://example.com/doc#message";
changes the frame’s location without reloading the frame