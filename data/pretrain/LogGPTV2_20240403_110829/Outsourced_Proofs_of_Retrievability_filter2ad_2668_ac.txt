pseudo-randomness to sample the parameters of the POR. An im-
portant property is that in case of potential conﬂicts, e.g., if the ﬁle
gets lost, the auditor can provide an irrefutable cryptographic proof
that he correctly followed the protocol. This can be achieved by
opening the auditor’s key for which a commitment has been signed
in the beginning, i.e., during the Store protocol. Owing to the fact
that any random bits extracted from Bitcoin can be uniquely recon-
structed at any later point in time, the whole POR can be re-played
to check if (i) the auditor did send the correct challenges and (ii) the
response sent by the service provider has been correct. We show
that Fortress incurs negligible overhead on the auditor, and scales
well with the number of clients.
Figure 1: Sketch of Fortress. Fortress relies on a time-
dependent source of pseudo-randomness (e.g., Bitcoin) to sam-
ple the parameters of the POR.
3.2 Protocol Speciﬁcation
In this section, we describe, Fortress, a concrete instantiation of
an OPOR. We start by outlining the main building blocks that are
used in Fortress.
Building Blocks.
Unless otherwise speciﬁed, all operations in Fortress are per-
formed in the ﬁnite ﬁeld F = Zp. Fortress makes use of a num-
ber of established cryptographic building blocks: a pseudo-random
function f : {0, 1}∗ × {0, 1}(cid:96)prf → F, a cryptographic hash
function H, a signature scheme (KeyGen, Sign, Verify), and a
pseudo-random bit generator:
g : {0, 1}(cid:96)seed × {0, 1}(cid:96)prbg → {0, 1}∗
.
Here, we assume that the output of the PRBG is long enough to ex-
tract the number of pseudo-random bits as required in the protocol.
The bit length of p, (cid:96)prf, (cid:96)seed, (cid:96)prbg are all chosen equal to the
intended security level.
The GetRandomness Procedure.
In addition, Fortress leverages a time-dependent pseudo-random-
ness generator:
GetRandomness : Γ → {0, 1}(cid:96)seed .
GetRandomness has access to a secure time-dependent source. Let
cur denote the current time. On input t ∈ Γ with Γ being a time set,
GetRandomness outputs a uniformly random string in {0, 1}(cid:96)seed
if t ≥ cur, otherwise GetRandomness outputs ⊥. GetRandomness
is secure, if the output of GetRandomness(t) cannot be predicted
with probability signiﬁcantly better than 2−(cid:96)seed as long as t <
cur. In Fortress, we elect to instantiate GetRandomness by lever-
aging functionality from Bitcoin, since the latter offers a secure and
convenient way (e.g., by means of API) to acquire time-dependent
pseudo-randomness.
Bitcoin [9] relies on blocks, a hash-based Proof of Work (PoW)
concept, to ensure the security of transactions. In particular, given
the set of transactions that have been announced since the last block,
and the hash of the last block, Bitcoin miners need to ﬁnd a nonce,
that would make the hash of the formed block smaller than a 256-
bit number target:
hash{Bl || MR(TR1, . . . , TRn) || nonce} ≤ target,
where Bl denotes the hash of last generated block, MR(x) denotes
the root of the Merkle tree with elements x, TR1 || . . . || TRn
is a set of transactions that have been chosen by the miners to be
included in the block.
The difﬁculty of block generation in Bitcoin is adjusted so that
blocks are generated once every 10 minutes on average; it was
shown in [25] that the block generation in Bitcoin follows a shifted
geometric distribution with parameter p = 0.19.
Given this, GetRandomness then unfolds as follows. On input
time t, GetRandomness outputs the hash of the latest block that
has appeared since time t in the Bitcoin block chain. Clearly, if
t is in the future, then GetRandomness will output ⊥, since the
hash of a Bitcoin block that would appear in the future cannot
be predicted. On the other hand, it is straightforward to compute
GetRandomness(t), for a past time t, by fetching the hash of pre-
vious Bitcoin blocks.
We now detail the speciﬁcations for the four protocols Setup,
Store, POR, CheckLog, and ProveLog in Fortress.
Speciﬁcation of the Setup Protocol.
Each party P ∈ {U,A,S} executes the key generation algo-
rithm KeyGen of the digital signature scheme to receive a secret
signing key skP and a public veriﬁcation key pkP. The public keys
are distributed amongst all parties.
Speciﬁcation of the Store Protocol.
This Store protocol is initiated by the user U, holding a ﬁle M.
First, the user executes an information dispersal algorithm (i.e., era-
sure code) to disperse M into n blocks (for a given n, and a recon-
struction threshold), each s sectors long: {mij}1≤i≤n,1≤j≤s. This
will be the actual input to the interactive Store protocol. For com-
munication links, we assume that they are authenticated, which can
be realized by means of the TLS protocol as public/private key pairs
are established.
User-controlled parameters: The user samples the values that are
necessary for verifying a POR as mandated by PSW. More pre-
R← {0, 1}(cid:96)prf and s el-
cisely, he samples a key for the PRF kprf
R← F. Finally, the user
ements of the ﬁnite ﬁeld, i.e, α1, . . . , αs
computes for each i, 1 ≤ i ≤ n:
s(cid:88)
j=1
s(cid:88)
σi ← fkprf (i) +
αjmij
∈ F.
deﬁne the processed ﬁle (cid:102)M := ({mij},{σi}1≤i≤n). The ﬁle (cid:102)M
The user sets τU := (kprf , α1, . . . , αs) and keeps it secret. We
is uploaded to the server S.
Auditor-controlled parameters: The auditor A also samples se-
cret values to verify a POR in PSW. That is, he samples a key for
R← {0, 1}(cid:96)prf and s elements of the ﬁnite ﬁeld, i.e,
the PRF k(cid:48)
R← F. Then, the ﬁle M(cid:48) will be fetched2 and parsed
α(cid:48)
1, . . . , α(cid:48)
by the auditor from the service provider S. Finally, the auditor
computes for each i, 1 ≤ i ≤ n:
prf
s
i ← fk(cid:48)
(cid:48)
σ
prf
(i) +
(cid:48)
(cid:48)
jm
ij
α
∈ F.
j=1
i}1≤i≤n. The auditor sets τA := (k(cid:48)
i}1≤i≤n and {σi}1≤i≤n to the
The auditor uploads the values {σ(cid:48)
provider, and sends them also to the user together with a correctness
proof (see below). The ﬁnal ﬁle stored at S is M∗, composed of
s) and
(cid:102)M and {σ(cid:48)
access rights over (cid:102)M which is stored at the cloud.
follows the protocol and no errors occur, it holds M(cid:48) = (cid:102)M.
2In a practical instantiation, we assume that the auditor has read
If everyone
keeps it secret.
1, . . . , α(cid:48)
prf , α(cid:48)
Proving correctness of σ(cid:48)
i: The auditor needs now to convince
the user that he correctly computed σ(cid:48)
i. Therefore, user and audi-
tor choose an RSA modulus N. The auditor should not know the
factorisation, to ensure that he cannot compute the inverse modulo
ϕ(N ). Similarly, the user must not be able to compute discrete log-
arithms in this group. We therefore elect that the user and auditor
agree on an external mutually trusted number N, e.g., the value N
of the root certiﬁcate of a certiﬁcation authority. Then, both entities
pick a generator g < N in ZN , whose order is unknown (at least)
to the auditor.
pseudo-random values used in computing σ(cid:48)
putes the following commitments:
The auditor commits to the secret values α(cid:48)
i as well as to the
i. In particular, A com-
gj := gα(cid:48)
j mod N,
fk(cid:48)
(i)
hi := g
prf
mod N,
for 1 ≤ j ≤ s,
for 1 ≤ i ≤ n.
As the values σ(cid:48)
computes for i ∈ {1, . . . , n} over the integers Z
i were computed in F, i.e. mod p, the auditor
(cid:48)Z
i = fk(cid:48)
prf
σ
(i) +
(cid:48)
(cid:48)
jm
ij
α
∈ Z
s(cid:88)
j=1
?= hi · s(cid:89)
gσ(cid:48)
i
and determines by means of integer division the values qi with σ(cid:48)
i =
i − qi · p, where p is the prime used for the ﬁnite ﬁeld F =
σ(cid:48)Z
Zp. The auditor also computes commitments gqi and sends all
commitments to the user U.
Next, the user and the auditor execute a zero-knowledge-proof
(ZKP) whose purpose is to show that the auditor indeed knows the
discrete logarithms of the values gi, hj and gqi. For this purpose,
Fortress leverages a non-interactive Schnorr ZKP protocol [34].
Here, to verify the knowledge, e.g., of α(cid:48)
i, the auditor chooses
a random value ri ∈ Z, computes ci = H(gri mod N ), and
di = ri + ci · α(cid:48)
i. The values {ci, di} are then sent to the user,
who veriﬁes gdi = gri · (gi)ci mod N. In our implementation,
we sample ri as a 240-bit random number and we use a 160-bit ci.
U can now use all received commitments to check whether:
gmij
j
/ (gqi )p for i ∈ {1, . . . , n}.
j=1
If all veriﬁcations return TRUE, U then signs the commitments
and sends his signature to A.
Agreements: Besides the agreement on the values σ(cid:48)
i, Fortress
requires additional agreements between the user and the auditor,
namely:
• All parties need to agree on the ﬁle that is stored. The provider
will sign H(M∗) once uploaded by the user and send the sig-
nature to the user to conﬁrm reception of the ﬁle. The user
forwards the receipt to the auditor, who will download the re-
spective ﬁle and verify the H and the signature. Additionally,
the auditor signs H(M∗) and sends the signature to the user.
The user veriﬁes the signature and compares with H(M∗).
If any veriﬁcation fails, user or auditor abort the protocol.
• User and auditor need to further agree on the conditions of
their contract. We assume that the user and the auditor agree
on the latest block Bl which has appeared in the Bitcoin
block chain, and an interval d, which dictates the frequency
at which the auditor performs the POR. User and auditor also
agree on the sample sizes (cid:96)U and (cid:96)A to be checked in the
POR. The user then requires the auditor to perform a POR
with the cloud provider whenever d new Bitcoin blocks ap-
pear in the Bitcoin chain3. This approximately corresponds
to conducting a POR every 10d minutes starting from block
Bl which marks the setup time. The auditor and user sign
H(Bl, d, (cid:96)U , (cid:96)A) and store it together with the signed ﬁle as
conﬁrmation of the contract.
Speciﬁcation of the POR Protocol.
Our POR protocol corresponds to two parallel executions of PSW.
Similar to the PSW, the auditor starts by generating two random
POR challenges of size (cid:96) ∈ {(cid:96)A, (cid:96)U} for the two POR schemes
established in Store. Here, note that (cid:96)U (cid:28) (cid:96)A since the user will
batch-verify a number of log entries.
To generate a challenge of length (cid:96), the veriﬁer picks a random
(cid:96)-element subset I of the set {1, . . . , n}, and for each i ∈ I, a ran-
R← F. The output of this algorithm, denoted by
dom element νi
Sample((cid:96)), is the set {(i, νi)}i∈I of size (cid:96). Recall that any proba-
bilistic algorithm can be considered as a deterministic algorithm if
we specify the internal random coins θ as input, i.e., Sample(θ, (cid:96)).
The core idea in our scheme is that the random coins θ are not
sampled by the user and/or auditor, but are determined from the
pseudo-random number generator g that is initialized with the seed
obtained from GetRandomness(t) for the current time t.
The auditor A inputs t ∈ Γ to GetRandomness in order to get
a seed y ∈ {0, 1}(cid:96)seed. Then, the PRBG is invoked on the seed y
to get sufﬁcient random bits θ = (θU , θA) for use in the two al-
gorithms Sample(θA, (cid:96)A) and Sample(θU , (cid:96)U ) to obtain the chal-
lenge sets QA and QU . This challenges are sent to the provider
who has to respond with two POR responses: one based on the
values σi that have been provided by the user and one using the
auditor’s σ(cid:48)
i values. The provider now behaves exactly a in the SW
j, σ, σ(cid:48) ∈ F, for 1 ≤ j ≤ s:
scheme and computes the values µj, µ(cid:48)
(cid:48)
µ
νimij,
νimij,
j ← (cid:88)
(cid:48) ← (cid:88)
(i,νi)∈QA
(i,νi)∈QA