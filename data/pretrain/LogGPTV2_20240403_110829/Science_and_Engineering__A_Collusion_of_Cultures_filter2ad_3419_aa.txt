title:Science and Engineering: A Collusion of Cultures
author:Tony Hoare
Science and Engineering: a collusion of cultures 
Tony Hoare 
Microsoft Research Ltd., Cambridge 
PI:EMAIL 
Abstract 
The  cultures  of  science  and  engineering  are 
diametrically opposed along a number of dimensions: 
long-term/short-term, idealism/compromise, formality/ 
intuition, 
certainty/risk  management,  perfection/ 
adequacy, originality/familiarity, generality/specificity, 
unification/diversity, 
of 
concerns.  You  would  expect 
two  such  radically 
different  cultures  to  collide.  Yet  all  the  technological 
advances  of  the  modern  era  result  not  from  their 
collision but from their collusion—in its original sense 
of a fruitful interplay of ideas from both cultures. 
separation/amalgamation 
I  will  illustrate  these  points  by  the  example  of 
research  into  program  verification  and  research  into 
dependability  of  systems.  The  first  of  these  aims  at 
development and exploitation of a grand unified theory 
of  programming,  and  therefore  shares  more  the 
culture  of  science.  The  second  is  based  on  practical 
experience  of  projects  in  a  range  of  important 
computer applications, and it shares more the culture 
of  engineering.  A  collision  of  cultures  would  not  be 
unexpected. But I will suggest that the time has come 
for  collusion,  and  I  will  suggest  how.  We  need  to 
define  an  interface  across  which  the  cultures  can 
explicitly collaborate.  
common 
important  and 
Dependability  research  can  deliver  its  results  in 
the form of a library of realistic domain models for a 
variety  of 
computer 
applications.    A  domain  model  is  a  reusable  pattern 
for many subsequently conceived products or product 
lines.  It  includes  a  mix  of  informal  and  formal 
descriptions of the environment in which the computer 
system or network is embedded.  It concentrates on the 
interfaces  to  the  computer  system,  and  the  likely 
requirements  and  preferences  of  its  community  of 
users.  The  practicing  software  engineer  takes  the 
relevant  application  domain  model  as  the  starting 
point for a new project or project proposal, and then 
specializes  it  to  accord  with  the  current  environment 
and  current  customer  requirements.  Domain  models 
and 
are  most  likely  to  emerge  as  the deliverable result of 
good research into dependability. 
theories 
possible 
detecting 
If  the  available  tools  are  powerful  enough, 
verification can begin already at this stage to deliver 
benefit,  by  checking  the  consistency  of  formalized 
requirements, 
feature 
interactions.  Ideally,  implementation  proceeds  from 
then  on  in  a  manner  that  ensures  correctness  by 
construction.  At  all  stages  the  project  should  be 
supported by verification tools.  That is the long-term 
goal of a new initiative in Verified Software, which is 
international  computing 
under  discussion  by 
the 
research  community.  This 
initiative  has  both  a 
scientific  strand  and  an  engineering  strand.  The 
scientific  strand  develops  the  necessary  unified  and 
comprehensive 
it 
implements  the  tools  that  apply  the  theory  to  actual 
program verification; and it tests both the theory and 
the tools by application to a representative corpus of 
real  or  realistic  programs.  The  engineering  strand 
develops a library of domain models and specifications 
which enable practicing engineers to apply the theory 
and  the  tools  to  new  programs  in  the  relevant 
application  domain.  We  hope  that  the  results  of  this 
research will contribute to the reduction of the current 
significant costs of programming error. To achieve this 
will require a successful collusion of the scientific and 
engineering cultures. 
1. Introduction 
programming; 
of 
further 
It  has  made 
Computing  Science  has  made  enormous  direct 
contributions  to  the  prosperity  and  well-being  of  the 
modern  world. 
indirect 
contributions through its services to other branches of 
modern  science  and  technology.    In  coming  years  it 
promises even more.  But is Computing Science itself 
to  be  judged  like  plumbing  or  brick-laying,  solely  in 
terms of its engineering success in delivery of benefits 
promised?  Or is it allowed to be a scientific discipline 
in its own  right, with its own scientific goals,  its  own  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:50:40 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007to 
theory 
from  pure  and  abstract 
ideals, and its own recondite conceptual framework for 
the  cumulative  advancement  of  knowledge  and 
understanding?  In other words, is computing research 
allowed, like research in other branches of science, to 
range 
through 
experimental  confirmation  to  concrete  and  practical 
application?   In the next three sections I will explore 
and  contrast  the  attributes  of  the  pure  scientist  with 
those of the practicing engineer; and I will suggest that 
Computer Science does in fact span the whole range.  
In  particular,  programming  theory,  semantics,  and 
correctness of code (my own topics of research) have 
many of the attributes of pure science.  If we interpret 
dependability  in  its  broadest  sense,  research  into 
dependability has many of the attributes of engineering 
research,  and  like  other  engineering  disciplines,  it 
exploits  and  adapts  the  results  of  science  wherever 
relevant to the needs of its clients. 
Good  communication  across 
the  whole  range 
is 
stretching  between 
essential. 
  It  is  essential  to  the  coherence  and 
intellectual  integrity  of  our  subject,  as  well  as  its 
promise 
society. 
Communication  is  mediated  by  the  exchange  of  the 
results of research at each point in the range, in terms 
that  are  comprehensible  on  one  side,  and  exploitable 
on  the  other.  I  will  suggest  that  domain  models  play 
this  essential  role  for  linking  dependability  research 
with  research  in  program  verification.    Furthermore, 
domain models break through one of the main barriers 
to  application  of  both  dependability  and  verification 
technology: they give essential guidance and assistance 
to  a  convincing  and  comprehensive  formalization  of 
the assumptions and expectations of the users of a new 
computer 
specifications  are  an 
indispensible starting point for useful verification. 
science  and  engineering 
of  maximum 
system.  Good 
benefit 
to  cover 
Finally,  I  will  draw  your  attention  to  a  new 
international  initiative  of  long-term  research  into 
Verified  Software.  It  aims 
the  whole 
programming process, from domain modeling through 
specification, design, coding, testing, delivery, right up 
to in-service upgrades of running code.  It will develop 
the necessary unified theories; and based upon them, it 
will  develop  an  integrated  set  of  verification  tools  to 
support  the  programming  process  from  end  to  end.  
Finally, 
it  will  conduct  a  convincing  series  of 
verification experiments applying the prototype toolset 
on  a  substantial  body  of  real  or  realistic  application 
code from many application domains. The title of the 
project is therefore ‘Verified Software: Theory, Tools, 
Experiments’ (VSTTE). The breadth of applicability of 
this  research  is  utterly  dependent  on  the  research  in 
dependability engineering, delivering its results in the 
form of domain models.  I very much hope that we can 
and 
recruit  assistance  of  experienced  dependability 
researchers  to  play  this  pivotal  role  in  the  Verified 
Software Initiative. 
2. Science and engineering 
example, 
engineers.  For 
Some people are pure scientists. Others are entirely 
practical engineers. But far more numerous are people 
who are, in varying degrees and at varying times, both 
scientists 
any 
experimental  scientist  must  be  an  engineer  when 
constructing  experimental  equipment  to  test  a  new 
theory.  Any  ambitious  engineer  must  be  a  scientist 
when attempting to apply or adapt a scientific theory to 
fulfill  a  task  never  before  attempted.  Researchers  in 
Computer  Science,  like  those  in  other  branches  of 
engineering  science,  may  choose  to  concentrate  more 
or less on one end of the range or the other; or indeed 
they may prefer to remain precariously perched in the 
middle. The message of my talk is that there must be a 
constant 
interchange  of  research  results  between 
scientists and engineers occupying different points on 
the spectrum.  Such communication can be blocked by 
a failure to appreciate how wide the spectrum is.  So in 
this  section  I  will  concentrate  on  the  widest  possible 
gap,  that  which  stretches  between  the  two  extreme 
ends of the spectrum. In later sections I will describe 
some  intermediate  positions.    For  convenience,  I  will 
assume  that  the  research  scientist  at  one  end  of  the 
spectrum  is  a  man  and  the  practicing  engineer  at  the 
other end is a woman. 
The  scientist  works  for  posterity.  He  wants  to 
discover  the  absolute  truth  about  the  natural  world, 
however  long  it  takes,  and  however  much  it  costs.  
Truth  is  permanent,  and  the  knowledge  of  truth  will 
never lose its literally inestimable value. The engineer 
works  for  a  known  client,  or  for  a  known  or 
speculative  niche  in  an  existing  market.  She  is 
committed to a fixed budget and a fixed delivery date 
for  the  product  of  her  labours.  The  service  life  of  an 
engineering product is known to be limited, and so is 
its market life of a product line. In compensation, the 
engineer gains recognition sooner than the scientist, in 
the form of appreciation from grateful client or profits 
from a commercially successful product. 
the 
pursues 
accuracy 
physicist 
The scientist pursues absolute scientific ideals. For 
example, 
of 
measurement, the chemist pursues purity of materials, 
and  the  computing  scientist  pursues  correctness  of 
programs;  and  they  pursue  their  respective  ideals  far 
beyond the current needs of the market place, or even 
its future projected needs. The engineer learns to live 
with the imperfections of the real world.  She develops 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:50:40 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007to 
her ingenuity to avoid them, to work around them, and 
to  come  up  with  compromises  which  are  only  just 
good enough for present needs. 
The  scientist  seeks  certainty,  backed  up  by  an 
overwhelming  mass  of  convincing  experimental 
evidence.  The  engineer 
the 
innumerable uncertainties of the real world, and finds 
ways of managing the inevitable risks involved. 
live  with 
learns 
The  scientist  separates  concerns.  He  isolates  all 
extraneous  factors  and  conducts  experiments  in  the 
cleanest possible laboratory environment. That is why 
researchers  in  programming  language  design  test  a 
new idea or a new feature in the context of the simplest 
possible  programming  language.  The  engineer  has  to 
bring  together  an  almost  unbounded  collection  of 
relevant concerns, and resolve them all simultaneously; 
none of them can be controlled, none can be ignored, 
and very few can be elegantly simplified. 
The  scientist  expresses  scientific  knowledge  in 
precise  mathematical  formulae,  often  surprisingly 
simple.  Their  consequences  can  then  be  deduced  by 
mathematical  calculations  or  even  proofs.  The 
calculations  are  often  messy  and 
laborious,  but 
fortunately they can be carried out by computer, using 
software  tools  into  which  the  relevant  theories  have 
been  embedded.  Many  engineers  would  confess  that 
they never enjoyed their mathematical studies, and that 
they  have  thankfully  forgotten  most  them.  Nowadays 
the  practicing  engineer  exploits  mathematics  only 
through the available engineering toolsets, which have 
evolved from the software written and previously used 
by  scientists.  In  places  where  tools  cannot  reach,  she 
relies  on  her  strong  and  sound  engineering  intuition 
about  the  relevant  technologies,  and  about  the  real 
world environment in which the technologies are to be 
applied. 
The scientist insists on originality in pursuit of new 
results,  and  in  making  corrections  or  refinements  to 
established theories.  For the engineer originality only 
adds  to  the  risks  of  failure.    She  therefore  relies  on 
tried  and  true  methods  wherever  applicable,  and 
reduces  the  role  of  innovation  to  an  inescapable 
minimum  required  by  the  ambition  of  her  current 
project. 
The scientist pursues generalization and unification 
of theory for its own sake.  A unified theory is one that 
has a number of established theories as special cases.  
The  unified  theory  gains  the  support  of  all  the 
available evidence for all the theories that it unifies. So 
does  each  and  every  one  of  the  unified  theories.  The 
skill of the engineer lies in understanding diversity and 
particularity. 
particular 
circumstances of her current project, and its acceptable 
explores 
She 
the 
limitations;  and  she  ingeniously  exploits  them  to 
improve quality and to reduce costs and timescales. 
These extreme portraits of science and engineering 
are  interesting  only  because  they  define  the  range  of 
possibilities  that  lie  between  them.    Let  us  withdraw 
from  the  extremes,  and  talk  now  about  researchers 
closer to the middle point of the range.  I classify them 
as  engineering  scientists  if  they  are  on  the  scientific 
side of the midpoint, and as scientific engineers if they 
are  on  the  engineering  side.    Within  each  category, 
there is still a wide range. 
3. The engineering scientist 
for  example,  Aerodynamics 
The  defining  characteristic  of  an  engineering 
scientist  is  that  he  conducts  scientific  research  in  an 
area  of  science  that  is  relevant  to  some  branch  of 
engineering.  So, 
is 
relevant  for  airplane  design,  Hydrodynamics  for  ship 