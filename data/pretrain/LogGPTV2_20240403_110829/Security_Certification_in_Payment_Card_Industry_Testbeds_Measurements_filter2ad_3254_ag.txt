cessfully negotiate with a ciphersuite that contains a weak cipher
(i.e., IDEA, DES, MD5).
Rules 12, 14, 15, 16 & 17. Retrieving and examining the certificate. We
use OpenSSL’s s_client tool to retrieve the SSL certificate of a remote
server. To parse the certificate, we use APIs from java.security.cert
package. To check whether a certificate is self-signed (Case 12), we
used the public key of the certificate to verify the certificate itself. To
check whether the certificate is expired, we use the checkValidity()
method of X509Certificate API (Case 14). If the subject domainname
(DN) or any alternate DN of a certificate doesn’t match with the
server domainname, then PciCheckerLite raises an alert (Case
15). Regarding the public key sizes for factoring modulus (e.g., RSA,
DSA), the discrete logarithm (e.g., Diffie-Hellman), and the elliptic
curve (e.g., ECDSA) based algorithms, NIST recommends them to
be 2048, 224 and 224 bits, respectively [33]. PciCheckerLite raises
alert if the key size is smaller than what is recommended (Case 16).
If the signing algorithm uses any of the weak hashing algorithms
(e.g., MD5, SHA, SHA1, SHA-1), PciCheckerLite raises warnings
(Case 17).
Rule 25. Script source integrity check. A website is expected to check
the integrity of any JavaScript code that is loaded externally to
the browser. To enable script source integrity check, a server can
use the “integrity” attribute of the script tag. In the “integrity” at-
tribute, the server should mention the hashing algorithm and the
hash value of the script that should be used to check the integrity.
PciCheckerLite downloads the index page of a website. After that,
it collects all the script tags, and checks if the script tags contain any
external URL (excluding the website’s CDN URLs). Then it looks
for the integrity attribute for the scripts loaded from external URLs,
and raises alert if the integrity attribute is missing. We only perform
this test for the index page (instead of all the pages) of a website
to keep the test lightweight. The number of vulnerable websites
detected by this test can only be interpreted as a lower bound.
Rule 30. Checking for browsable directories. We check whether the
directories are browsable in a website. To avoid redundant traffic,
we reuse the collected JavaScript script URLs for case 25. We then
examine the common parent directory of all the internal URLs. Fi-
nally, we send a GET request to fetch the content of the directory.
If directory browsing is enabled, the server will return a response
with code 200 with a page containing the listing of files and direc-
tories of the specified path. Otherwise, it should return an error
Self-assessment questionaire A(SAQ A)Self-assessment questionaire D-Mer(SAQ D-Mer)Self-assessment questionaire A-EP(SAQ A-EP)Doesn't TouchCardholder DataDoesn't StoreCardholder DataProcess orStoreCardholder DataE-commerce TypeRelevant SAQThe card verification code or value (three digit or four-
digit number printed on the front or back of a payment
card) is not stored after authorization?
Yes
with
CCW No
(cid:50)
(cid:50)
Yes
(cid:50)
N/A
(cid:50)
Not
Tested
(cid:50)
Figure 7: A sample question from the Self-Assessment Questionnaire D (SAQ D) [28]. “Yes with CCW” means “the expected
testing has been performed, the requirement has been met with the assistance of a compensating control, and a Compensating
Control Worksheet (CCW) is required to be submitted along with the questionnaire” .
Table 7: A summary of the guidelines for ASV scanners [19]. In the fourth column, we show the categories that are required
to be fixed. “∗" means that in the SSL/TLS category, all the vulnerabilities are required to be fixed, except case 18.
Target Component
Firewalls and Routers
Operating Systems
Database Servers
Web Servers
Application Servers
Common Web Scripts
Built-in Accounts
DNS and Mail Servers
Virtualization components
Web Applications
Other Applications
Common Services
Wireless Access Points
Backdoors/Malware
SSL/TLS
Anonymous Key agreement
Protocol
Remote Access
Point-of-sale (POS) Software
Embedded links or code
from out-of-scope domains
Insecure Services/
industry-deprecated protocols
Unknown services
Expectation
1. Must scan all network devices such as firewalls and external routers.
2. Must test for known vulnerabilities and patches.
1. Must scan to determine the OS type and version.
2. An unsupported OS must be marked as an automatic failure.
1. Must test for open access to databases from the Internet.
2. If found - must be marked as an automatic failure (Req. 1.3.6)
1. Must be able to test for all known vulnerabilities and configuration issues.
2. Report if directory browsing is observed.
1. Must be able to test for all known vulnerabilities and configuration issues.
1. Must be able to find common web scripts (e.g., CGI, e-commerce, etc.).
1. Look for default username/passwords in routers, firewalls, OS and web or DB servers.
2. Such vulnerability must be marked as an automatic failure. (Req 2.1)
1. Must be able to detect the presence
2. Must test for known vulnerabilities and configuration issues
3. Report if a vulnerability is observed (automatic failure for DNS server vulnerabilities).
1. Must be able to test for all known vulnerabilities
Must find common vulnerabilities (automatically/manually) including the following:
1. Unvalidated parameters that might lead to SQL injection.
2. Cross-site scripting (XSS) flaws
3. Directory traversal vulnerabilities
4. HTTP response splitting/header injection
5. Information leakage: phpinfo(), Insecure HTTP methods, detailed error msg
6. If found any of the above must be marked as an automatic failure
1. Must test for known vulnerabilities and configuration issues
1. Must test for known vulnerabilities and configuration issues
1. Must be able to detect wireless access points
2. Must test and report known vulnerabilities and configuration issues
1. Must test for remotely detectable backdoors/malware
2. Report automatic failure if found one
Must find:
1. Various version of crypto protocols
2. Detect the encryption algorithms and encryption key strengths
3. Detect signing algorithms used for all server certificates
4. Detect and report on certificate validity
5. Detect and report on whether CN matches the hostname
6. Mark as failure if supports SSL or early versions of TLS.
1. Must identify protocols allowing anonymous/non-authenticated cipher suites
2. Report if found one
1. Must be able to detect remote access software
2. Must report if one is detected.
3. Must test and report known vulnerabilities and configuration issues
1. Should look for POS software
2. If found - ask for justification
1. Should look for out-of-scope links/code
2. If found - ask for justification
1. If found one - ask for justification
1. Should look for unknown services and report if found
Test-cases
Must fix?
1
-
2
30
29, 33
-
5, 6
-
-
21, 22, 23,
24, 25, 26, 27,
28, 31, 32
20
19
-
-
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
12-18
Yes∗
-
3, 4
19, 20
-
-
-
-
Yes
Yes
No
No
No
No
response code (e.g., 404 - not found, 403 - Forbidden). This test only
determines if a directory is browsable. We never store any of the
returned pages during the test.
Rule 31. HTTP TRACE supported. HTTP TRACE method is used for
diagnostic purposes. If it is enabled, the web server will respond
to a request by echoing in its response the exact request that it
has received. In [55], the author has shown that HTTP TRACE can
be used to steal sensitive information (e.g., cookie, credentials). To
examine the HTTP TRACE configuration, we send a HTTP request
by setting the method to TRACE. If the TRACE method is enabled
by the server, the server will echo the request in the response with
a code 200.
Table 8: Specifications defined by the PCI Security Standard Council (SSC) along with their targets, evaluators, assessors and
whether it is enforced by SSC. “COTS" stands for Commercial Off-The-Shelf.
PCI Specifications
Data Security Standard (DSS) [27]
Card Production and Provisioning (CPP) [17, 18]
Payment Application DSS (PA DSS) [9]
Point-to-Point Encryption (P2PE) [6]
PIN Transaction Security (PTS) [10, 30]
3-D Secure (3DS) [16]
Software-Based PIN Entry on COTS (SPoC) [31]
Token Service Provider (TSP) [7]
Target(s)
Merchant, Acquirer Bank, Issuer Bank,
Token Service Provider,
Service Provider
Card Issuer,
Card Manufacturer,
Token Service Provider
PA Vendors
POS Device Vendors
PIN Pad Vendors
3DS Server,
3DS Directory Server,
3DS Access Control Server
PIN-based Cardholder verification method (CVM) Apps
Token Service Providers
Evaluator(s)
Assessor(s): Type
Required?
Acquirer,
Payment Brand
QSA: Manual
ASV: Automated
Yes
Payment Brand
CPP-QSA: Manual
Yes
PA-QSA
P2PE-QSA
PTS Labs
PA-QSA: Manual
P2PE-QSA: Manual
PTS Labs: Manual
Optional
Optional
Optional
Payment Brand
3DS-QSA: Manual
Optional
SPoC Labs
P2PE-QSA
SPoC Labs: Manual
P2PE-QSA: Manual
Optional
Optional
Table 9: PCI DSS requirements are presented with expected testing (from SAQ D-Mer) and the potential test-cases that can be
used to evaluate the ASV scanning.
Requirement
Formalize testing when firewall configurations change
Build a firewall to restrict "untrusted" traffic
to cardholder data environment
Prohibit direct public access between Internet
and cardholder data environment
Install a firewall on computers that have connectivity
to the Internet and organization’s network
Always change vendor-supplied defaults before
installing a System on the network
Develop a configuration standards for all system
components that address all known security vulnerabilities.
Encrypt using Strong cryptography all non-console
administrative access such as browser/web-based
management tools
Shared hosting providers must also comply
with PCI DSS requirements
Establish cardholder data retention and disposal policies
Do not store sensitive authentication data
(even it is encrypted)
Mask PAN when displayed
Render PAN unreadable anywhere it is stored
Secure keys that are used to encrypt stored
cardholder data or other keys
Document all key-management process
Expected Testing
1. Review current network diagram
2. Examine network configuration
1. Review firewall and router config
2. Examine firewall and router config
1. Examine firewall and router config
1. Examine employee owned-devices
1. Examine vendor documentations
2. Observe system configurations
1. Examine vendor documentations
2. Observe system configurations
1. Examine system components
2. Examine system configurations
3. Observe an administrator log on
1. Examine system inventory
1. Review data retention and disposal policies
1. Examine system configurations
2. Examine deletion processes
1. Examine system configurations
2. Observe displays of PAN
1. Examine data repositories
2. Examine removable media
3. Examine audit logs
1. Examine system configurations
2. Examine key storage locations
1. Review key-management procedures
Use strong cryptography and security protocols
during transmission of cardholder data.
1. Review system configurations
Never send PAN over unprotected user
messaging technologies.
Deploy anti-virus software on all systems
Ensure all anti-virus mechanisms are current,
running and generating audit log
Ensure that all system components are protected
from known vulnerabilities
Establish a process to identify and assign risk
to newly discovered security vulnerabilities
Develop software applications in accordance
with PCI DSS and industry best practices
Follow change control processes and procedures
for all changes to system components
No.
1.1
1.2
1.3
1.4
2.1
2.2
2.3
2.4
3.1
3.2
3.3
3.4
3.5
3.6
4.1
4.2
5.1
5.2
6.1
6.2
6.3
6.4
6.5
6.6
7
8.47
9
10
11
12
Testcase
N/A
1. Enable/disable firewall.
2. Expose Mysql to the Internet
3. SSH over public Internet
4. Remote access to PhpMyadmin
N/A
5. Use default DB user/password
6. Use default Phpmyadmin user/password
N/A
7. Sensitive information over HTTP
N/A
N/A
8. Store CVV in DB
9. Show unmask PAN
10. Store plain-text PAN (OpenCart)
11. Use hardcoded key for encrypting PAN
N/A
12. Use self-signed certificate
13. Use insecure block cipher
14. Use Expired certificate
15. Use cert. with wrong hostname
16. Use 1024 bit DH modulus.
17. Use weak hash in SSL certificate
18. Use TLSv1.0
N/A
N/A
N/A
19. Use vulnerable of OpenSSH
20. Use vulnerable PhpMyadmin
N/A
N/A
21. Implant SQL injection in admin login
22. Implant SQL injection in customer login
23. Disable password retry limit
24. Disable restriction on password length.
25. Use JS from external source insecurely
26. Do not hide program crashes
27. Implant XSS
28. Implant CSRF
29. Present server info in security Headers.
30. Browsable web directories.
31. Enable HTTP Trace/Track
32. Enable phpinfo()
33. Disable security headers
N/A
34. Store unsalted customer passwords
35. Store plaintext passwords
N/A
N/A
N/A
N/A
1. Review policies and procedures
1. Examine system configurations 2. Interview personnel
1. Examine anti-virus configurations
2. Review log retention process
3. Examine system configurations
1. Examine system components
2. Compare the list of security patches
1. Review policies and procedures
1. Review software development process
N/A
1. Review change control process
Develop applications based on secure coding
guidelines and review custom application code
1. Review software-development policies
Ensure all public-facing applications are
protected against known attacks
Restrict access to cardholder data
based on roles
Render all passwords unreadable during storage
and transmission for all system components
Restrict physical access to cardholder data
Track and monitor all access to network
resource and cardholder data
Regularly test security systems and processes
Maintain a policy that addresses information
security for all personnel
1. Examine system configuration
1. Examine access control policy
2. Review vendor documentation
3. Examine system configuration
4. Interview personnel
1. Examine system configuration
1. Observe process
2. Review policies and procedures
3. Interview personnel
1. Interview personnel
2. Observe audit logs
3. Examine audit log settings
1. Interview personnel
2. Examine scope of testing
3. Review results of ASV scans
1. Review formal risk assessment
2. Review security policy
3. Interview personnel.
7 Other requirements under 8 are not testable.