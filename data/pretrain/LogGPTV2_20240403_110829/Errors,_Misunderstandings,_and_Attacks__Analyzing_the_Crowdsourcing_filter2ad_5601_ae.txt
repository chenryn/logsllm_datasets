PopAds
Propellerads
Yavli
Uponit
Hilltopads
Tag adservers
Admiral
Server Domains
Added Removed
8,541
910
338
207
155
47
47
38
2
6
1
3
2
4
Since
Sep-2016
Apr-2016
Oct-2014
Feb-2018
Jan-2018
Feb-2017
Jan-2017
Table 10: Number of Ad-server domains that are added or removed
to/from the blacklist of EasyList. The date indicates the first time
when the first domain was added to EasyList.
filter list. Among all other websites, 57% of the filters used this
syntax function to block ads on Facebook. We did not find any case
that encrypted the URLs to circumvent ad blockers.
4. Factoring Acceptable Ads List Sitekeys. Walls at el. [82]
present a way to circumvent EasyList and exhibit the ads by crack-
ing the whitelist sitekeys. Sitekeys are filters that have base64 rep-
resentation of RSA public keys used to identify accepted ads by
ad-block software. However, we did not find any report complaining
about this issue.
5.2 Less-Studied Attacks
The ad servers are used to
1. Changing Ad-Server Domains.
store, maintain and serve advertisements to website visitors when
the web pages are loaded. Iqbal at el. [30] and Vastel at el. [77]
state that ad networks often change ad server domains to avoid
being blocked. However, they did not provide large-scale statistical
analysis (or evidences). As such, we empirically examine how these
ad networks exploited EasyList using our dataset.
Our dataset shows that the number of ad server domains and
IPs has increased from 505 in 2009 to 15,500 in January 2019. The
average number of domains added to EasyList per month during the
last 9 years was 146, while the average number of domains removed
was 72. About 20% of the ad server domains listed in the EasyList
(as of January 15, 2019) belonged to 7 ad networks. Table 10 shows
the number of ad-server domains that were added or removed
from EasyList. We observe that the number of added domains is
significantly larger than the number of removed domains. After
further investigation, we conclude that EasyList did not properly
handle the obsolete and redundant domains. We found 104 domains
listed in EasyList in May 2017 were duplicated with other domains,
and they belonged to Propellerads [59]. The problem was discovered
and the filters of such domains were removed in March 2018.
We also looked beyond our dataset to demonstrate the existence
of this attack. More specifically, we measured the number of Internet
users who visited the ad servers before and after they were added
to EasyList. For this analysis, we obtained the historical traffic
information of the ad-severs from Alexa Web Information Service
(AWIS) [5]. AWIS offers traffic ranks of the websites, based on a
combined measure of unique visitors and page views on a daily
basis. Note that the AWIS API only provides the traffic history of a
given server for the last 4 years, which is sufficient for our analysis.
Analyzing the Crowdsourcing Process of Ad-blocking Systems
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Using the 4-years of AWIS dataset, We analyzed 567,293 records
of 6,903 ad-server domains. We found that 52% of the ad servers’ traf-
fic activities disappeared three days after these ad-server domains
were added to EasyList. This was because EasyList was set to be
expired (updated) every four days. Lately, the versions of EasyList
used by Adblock Plus (and some other lists such as EasyPrivacy
Tracking Protection List) has changed the update frequency to be
one day [54, 56, 57]. We further observed that 84% of these 52%
ad servers were blocked shortly after they were created. Shortly
after their traffic activities started, their domains were added to the
EasyList in the same day. The reason was that certain ad networks
randomly generated ad server domains. The EasyList community
(including editors and Adblock Plus developers) ran code to mon-
itor the changes of certain websites to detect the change of ad
servers [20, 22]. Those randomly generated domains thus were
quickly detected and added to EasyList for blocking.
The next question is whether the EasyList’s blocking signifi-
cantly reduces the ad-network domains’ traffic in a longer term. We
applied t-test to find if blocking by EasyList had a significant im-
pact on the ad servers. To hold the normality assumption from both
groups, we used the traffic activities of ad servers for 30 records
before and 30 records after the blocking. The significance level
α = 0.05. We tested the differences in the records’ average means
of 1,400 ad-server domains and found only 61% of the ad servers
were significantly influenced by the blocking.
2. Changing Ad-Element Attributes. Website developers can
circumvent ad blockers by changing the ad element attributes [30,
71]. We studied the reaction of EasyList against this evasion using
our dataset. We found that EasyList did not have the capability
to automatically trace the change of ad elements. The changed ad
elements were given new signatures and were treated as new ones.
These new elements were blocked only if they were reported by
crowdsourcing. Occasionally, EasyList could recognize the change
of an ad attribute when a popular ad network changes it for all its
websites. In this case, EasyList editors would replace an old filter
with a new one.
To analyze this behavior, we extracted the corresponding filters
that have common signatures from dataset D1. More specifically,
we look for cases where the old signature(s) were removed and
new signature(s) were added to the same EasyList version. If a
new signature was applied to the same website, we conclude that
EasyList was chasing after the website to detect the modification of
an ad-element attribute. We only found 553 instances that EasyList
changed the filters in response to this type of evasions. The average
delay of changing the attributes was 10.3 days. From these instances,
we found 311 websites changing their attributes. About 88% of them
were the clients of the ad network Yavli (yavli.com).
EasyList filters match a
3. Changing the Path of Ad Source.
request using the domain name or the URLs path. Therefore, the
ad publishers may change the “path” of the URLs to circumvent ad
blockers. Like the previous analysis, we identified the signatures
added and removed form each EasyList version that were applied
on the same websites. In total, we found 644 websites changed their
the ad URL’s paths to circumvent blocking. About 47.6% of them
were clients of the ad network Yavli.
5.3 Nonstudied Attacks
From our dataset, we have identified 8 types of evasion attacks that
are not yet studied by the research community. We further inves-
tigated the error reports of EasyList, the public reports of other
active filter lists such as uAssets filter list [73], and the technical
issue reports of Adblock Plus [55] and uBlockOrigin [74]. We con-
clude that although some evasion attacks are known by certain ad
blockers, they are not known by all ad blockers. The following are
our discoveries on these nonstudied attacks.
EasyList did not
1. Exploiting Obsolete Whitelist Filters.
track the domains in the whitelist filters. The whitelist includes
the exception filters indicating the elements and URLs on which
ad blockers do not take effect. EasyList editors manually main-
tained and removed the obsolete filters over time (every 2 − 3
months). Over the past 9 years, EasyList editors handled dead fil-
ters 82 times and removed 353 domains from the whitelist. Some
of the whitelisted domains have been abused to deliver ads. For
instance, shackvideo.com is a domain name added to whitelist
filters in November 2010. Using Hosterstats [27], we found that the
domain was deleted in May 2016. After that, a website exploited it
to deliver ads. EasyList discovered this issue in January 2017 and
deleted the filter.
2. Using Generic Exception Rules. When a user visits a web-
site with anti-ad blocker(s), the anti-ad blocker script tests the states
of ad elements to detect the presence of ad blockers. To counter this
practice, EasyList would block the anti-ad blocker script or exclude
the corresponding ad elements by putting them in the whitelist. To
bypass ad blocking, some ad networks and developers introduced
elements that could trigger anti-ad blocking and distributed them
across many websites. With this, it was arduous for EasyList to
discover all the websites that were using these elements; therefore,
EasyList would add a generic exception rule for those elements. We
have observed many websites abused generic exception filters to
bypass EasyList. For instance, jpost.com exploited the exception
filters,
@@||redtube.com*/adframe.js
to bypass EasyList and deliver ads using the following URL:
http://redtube.com.umamdmo.com/vp?&i=110
...=true&cb=OYmZJ&dr=true&q=/adframe.js
The exception rule was created in January 2014 and the abuse was
discovered in November 2016.
Some websites applied
3. Exploiting False Positive Errors.
self-defacement to create difficulties for users that use ad blockers.
We observed that some websites associated and linked the ad ele-
ments with their legitimate elements. When ads were blocked, the
non-ad elements were blocked too, causing false positives for the
ad-blocker. They linked the ad elements with legitimate elements
using the signatures to match the EasyList filters with their ad
elements.
Despite the secu-
4. First-Party Content and Inline Script.
rity risk of using the inline scripts [32, 36] , websites have been
using them to detect ad blockers in order to perform anti-ad blocker
240
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Alrizah et al.
tasks [89]. Accordingly, EasyList made exception rules for ad el-
ements that were used as inline script triggers. However, this be-
havior has tempted the web developers to increase the utilization
of inline scripts and the first-party content. The web developers
have utilized inline scripts to create network requests to deliver the
ads directly or using the first-party content to host the ad URLs.
EasyList started to take advantage of the Content Security Poli-
cies (CSP) [50] to block inline scripts. The first version of EasyList
containing a CSP-based filter appeared in May 2018. Within six
months, EasyList added 142 websites to the blacklist, 78% of which
were in the top 100K Alexa rank.
To deliver ads to users, Internet Service
5. ISP Injecting Ads.
Providers (ISPs) may inject HTML, CSS, or/and Javascript into
HTTP responses. This strategy was limited to the websites that use
HTTP. Existing works have discussed this method of delivering
ads [10, 52, 72]. However, this method may also be exploited to
circumvent filter lists. The traditional method of blocking the ad
server domain is no longer effective in this case, because there is no
HTTP request to be blocked and the ads are appended to the first-
party content. Moreover, an ISP is able to append an ad to a different
URL each time. Among all the FN reports, we found only one report
that indicated an FN error due to ISP ads injection, performed by the
ISP named Optimum [6]. A countermeasure adopted by EasyList
was to block the IP addresses that served the ads, which is not a
fundamental solution.
Ad publishers may circumvent
6. Background Redirection.
browser’s pop-up ad blockers by using a technique known as Tab-
unders. Specifically, when users click on a link in a web page, the
link is opened in a new tab and the background of the old tab is
redirected to an advertisement page. Based on our analysis of the
crowdsourcing reports, we found that this problem was reported in
May 2015. However, until today, EasyList is still unable to address
this issue. Recently, Chrome (version 68.0 and above) has blocked
Tab-under navigation [75], but other browsers such as Firefox have
not yet taken actions.
7. Exploiting WebRTC. WebRTC, using Real-Time Communi-
cations (RTC), is an open-source project providing APIs to enable
browsers and mobile applications to communicate without requir-
ing an intermediary. Security concerns of using WebRTC [85] have
been reported recently [61, 62]. However, ad networks have utilized
WebRTC to establish real-time communications between servers
and browsers and used RTCPeerConnection APIs to send ads. In
May 2018, EasyList and Adblock Pulse started to block ads that
use WebRTC by wrapping the RTCPeerConnection. EasyList added
to its blacklist 220 website domains and 139 ad-server domains
that used WebRTC. Uponit ad servers used 136 domains based on
WebRTC.
Some websites used CSS
8. CSS Background Image Hack.
background image hacks to exhibit the ads. EasyList created special
filters used by Adblock Plus and uBlock Origin with a new syntax to
countermeasure the attack. The syntax is [-abp-properties=
‘data:’], which allows ad-blocking software to recognize the ad
elements according to their properties. We observed that EasyList
applied the new syntax on 40 websites in 2016 and 2017.
6 DISCUSSIONS
Our analysis shows that the number of FP
Key Implications.
errors is non-trivial. The website owners who used unsuitable ele-
ment attributes and EasyList that created bad signatures were both
responsible for the FP errors. However, it seems to be impossible
to establish the communication between the two parties to avoid
and mitigate such errors because of the “enmity” between them.
This increases the responsibility of the researchers to build more
effective systems to detect and resolve such errors. In this work,
we aim to build a foundation for future research by analyzing the
sources of the errors from different aspects.
Ad block systems are consid-
Ad block Systems in General.
ered as a security-enhancing measure. With the quick expanding
in employing these systems, many security tasks were assigned to
them by introducing new filter lists to provide protections against
malvertising, phishing, spamming, crypto-mining, clickbaiting, and
others. We depended heavily on EasyList in our analysis for two
reasons. First, as we have indicated, it is the most used filter list.
That created a lot of adversaries against it, and expand the scope
of our research to find all the possible attacks and vulnerabilities.
Second, many ad-blocking software use it as a default filter list, and
many filter lists directly inherit from it or follow its way to filter
ads.
Consequences of Filter Lists’ Limitations. We highlighted
the errors and the misunderstandings, and we provided intensive
analysis of 15 attacks on the core of the systems – filter lists. One
of the main goals is to contribute a lighthouse for research and
industry communities about systems used by hundreds of millions.
We notice there is a considerable amount of research depends on
EasyList for their evaluation measurement [13, 31, 64, 87, 90]. The
lack of understanding the limitations of EasyList may lead to in-
accurate results. Recent works start to address the issues of filter
lists. For example, Zhu at el. [90] also highlighted the issue of “ad
rotation networks” and “automatically generated domain names”,
and proposed solutions. We show that EasyList community is also
adding new syntaxes to overcome these attacks, and researchers
should cross-compare the results to provide new gains. Another
recent work [31] proposed a machine learning approach to block
ads automatically which can block 16% more ads than the filter lists.
Systems as such help to address the false negatives of the filter list
but may also introduce new false positives. Our study has shown
that more than one-third of the community effort was to correct
FP errors, which is a factor that cannot be overlooked.
Advanced Attacks Against Adblockers. We presented the 15
possible countermeasures against ad blockers as the basic evasion
attacks. There are some advanced countermeasures. For instance,
Carasso in a Google patent[16] illustrated a method of delivering
ads using a bypass loader and a bypass proxy. The loader checks
the presence of ad blockers, and then the ads are delivered using
a bypass proxy that changes its domain frequently. Indeed, the
method is combined of two types of evasion attacks: changing the
Ad-Server Domains and Anti-ad Blocker.
First, our dataset covered the historical data back
Limitations.
to 2009. We could not find any data before November 2009, or infer
241
Analyzing the Crowdsourcing Process of Ad-blocking Systems
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
when the rules were added in the first snapshot. Second, when
extracting the ground-truth error reports, we chose a conservative
approach to link the reported errors to the EasyList updates. This
was to ensure the correctness of the linking and the reliability of the
results, but we had to sacrifice the coverage. It is a trade-off between