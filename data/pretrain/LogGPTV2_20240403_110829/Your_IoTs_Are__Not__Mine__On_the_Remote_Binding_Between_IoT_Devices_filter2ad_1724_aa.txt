title:Your IoTs Are (Not) Mine: On the Remote Binding Between IoT Devices
and Users
author:Jiongyi Chen and
Chaoshun Zuo and
Wenrui Diao and
Shuaike Dong and
Qingchuan Zhao and
Menghan Sun and
Zhiqiang Lin and
Yinqian Zhang and
Kehuan Zhang
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Your IoTs Are (Not) Mine: On the Remote Binding
Between IoT Devices and Users
∗
Jiongyi Chen
†
, Chaoshun Zuo
, Wenrui Diao
‡§
∗
, Shuaike Dong
†
, Qingchuan Zhao
,
Menghan Sun
∗
†
, Zhiqiang Lin
†
, Yinqian Zhang
∗
, and Kehuan Zhang
∗
†
The Chinese University of Hong Kong
The Ohio State University
‡
§
Shandong University
Jinan University
Abstract—Nowadays, IoT clouds are increasingly deployed to
facilitate users to manage and control their IoT devices. Unlike
the traditional cloud services with communication between a
client and a server, IoT cloud architectures involve three parties:
the IoT device, the user, and the cloud. Before a user can
remotely access her IoT device, remote communication between
them is bootstrapped through the cloud. However, the security
implications of such a unique process in IoT are less understood
today.
In this paper, we report the ﬁrst step towards systematic
analyses of IoT remote binding. To better understand the
problem, we describe the life cycle of remote binding with a
state-machine model which helps us demystify the complexity in
various designs and systematically explore the attack surfaces.
With the evaluation of 10 real-world remote binding solutions,
our study brings to light questionable practices in the designs
of authentication and authorization, including inappropriate use
of device IDs, weak device authentication, and weak cloud-side
access control, as well as the impact of the discovered problems,
which could cause sensitive user data leak, persistent denial-of-
service, connection disruption, and even stealthy device control.
I. INTRODUCTION
One of the fastest growing industries today is the Internet-
of-Things (IoT), which connects the smart computing devices
embedded in our daily lives and allows them to be sensed
and controlled remotely via the Internet. Many applications
with IoT have been developed over the past a few years,
ranging from smart homes, smart health, to smart cities and
beyond. Numerous beneﬁts can be gained by using the IoT,
such as improved efﬁciency and accuracy, and reduced human
intervention.
However, not all IoT devices are connected to the Internet
directly. To enable their remote management, typically there
is a cloud service acting as a relay between the end user
and the device. For instance, in a smart home solution, even
when a user is not at home, she can still remotely operate
the IoT devices using the corresponding mobile apps installed
on her phone. Such convenience is made possible by the
IoT cloud. Unlike the traditional server/client communication
architecture, a typical IoT system involves three parties: the
IoT device, the end user (or the mobile app as the user agent)
The bulk of work was performed while the ﬁrst author was visiting The
Ohio State University in spring and summer of 2018.
and the IoT cloud. However, it is unclear today whether the
introduction of a third party (i.e., the IoT device) comes with
new security challenges, especially when bootstrapping and
removing remote communication between the user and the
device through the IoT cloud.
Remote binding of IoT. The remote communication boot-
strapping process is also known as remote binding. In general,
there are four steps in the life cycle of remote binding: (1) at
ﬁrst, the user and the device are authenticated to the cloud
respectively; (2) Then, the user and the device need to bind
with each other on the local network. After local binding, a
device-speciﬁc secret such as the device ID is delivered to the
user; (3) Next, they both talk to the cloud, and the user submits
such a device ID to the cloud to create a binding with the
speciﬁed device. At this moment, the user can remotely control
her device; (4) Later on, when the user resets her device, the
binding in the cloud will be revoked. Therefore, to support
those operations, the cloud needs to authenticate the device
and the user, and correctly assign the binding permissions to
the user.
Our study and ﬁndings. Given the complexity of remote
binding, we need a systematic methodology to decompose
existing designs into primitives so that the security risk can be
analyzed and understood clearly. To this end, we model and
describe the functional design using a state-machine model,
in which the procedures of remote binding are represented as
cloud-side device state transitions in response to primitives
messages sent by the device and the user. Such a process
model captures the essential functional demands, which helps
us demystify various design principles.
With the assistance of our state-machine model, we were
able to inspect the remote binding designs of 10 IoT vendors
and systematically evaluate their security risks. Our study
reveals that, for most of the devices, security measures are
either nonexistent or incorrectly designed and implemented.
As such, remote attacks can be realistically orchestrated by
abusing device IDs and exploiting ﬂawed authorization, which
allows the attacker to exﬁltrate sensitive information remotely,
launch denial-of-service to the user’s binding, disrupt
the
user’s connection, or even take absolute control of the device.
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00034
222
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:13:41 UTC from IEEE Xplore.  Restrictions apply. 
In fact, we found that such a threat is completely realistic,
as the user’s device ID could be easily leaked in practice:
on the one hand, some vendors simply use weak device IDs,
such as MAC addresses, allowing attackers to enumerate or
brute-force them within a small search space (with vendor-
speciﬁc bytes excluded, the search space of MAC addresses is
often within 3 bytes). Even worse, recent attacks indicate that
some device IDs only contain 6 or 7 digits [14], [18], allowing
attackers to traverse all possible IDs within an hour. On the
other hand, the IoT device is a “thing” in nature and the device
ID could be leaked through ownership transfer in real life, for
example, during shipping, distribution, or redistribution in a
supply chain.
Today, security risks in the IoT remote binding are not
well understood, and more secure practices are needed in IoT
development. As such, we highlight two signiﬁcant misunder-
standings in our study: ﬁrst, static identiﬁers should never be
used for device authentication. Instead, a better approach is
to adopt dynamic authentication tokens. Second, proper au-
thorization mechanisms should be used in the remote binding
and unbinding operations, to conﬁrm a user’s ownership to the
device.
Contributions. We summarize this paper’s contributions as
below:
1) New ﬁndings and understandings. We conducted the ﬁrst
systematic study on the security of IoT remote binding.
Notably, we use a state-machine model to decompose
the remote binding process, further evaluating various
designs and exploring the attack surfaces. Our study
reveals multiple design ﬂaws in the mainstream binding
solutions, which could cause serious consequences such
as user data leak, binding denial-of-service, connection
disruption, as well as complete device control.
2) Real-world case studies. To conﬁrm the potential design
and implementation ﬂaws, we studied ten real-world IoT
remote binding solutions. The experimental results align
with the systematic investigation and demonstrate that
the attacks are serious and realistic. With the real-world
case studies, our study sheds light on a new class of
vulnerabilities and contributes to a better understanding
of the rapidly growing IoT area.
Roadmap. The rest of the paper is organized as follows:
Section II provides the background information for our study.
Section III describes the adversary model, the investigation,
and the state-machine model. Section IV elaborates on the
existing designs of remote binding. Section V presents the
attack surfaces in remote binding. Section VI gives the results
of the real-world attacks. Section VII summarizes the lessons
learned in our study. Section VIII details the limitations and
future directions of this work. Section IX surveys the prior
related research, and Section X concludes this paper.
II. BACKGROUND
In this section, we give the necessary knowledge of the
typical IoT communication architecture and the procedures of
the remote binding.
(cid:47)(cid:381)(cid:100)(cid:3)(cid:24)(cid:286)(cid:448)(cid:349)(cid:272)(cid:286)
(cid:104)(cid:400)(cid:286)(cid:396)(cid:3)(cid:4)(cid:393)(cid:393)
(cid:18)(cid:367)(cid:381)(cid:437)(cid:282)
(cid:104)(cid:400)(cid:286)(cid:396)(cid:3)(cid:258)(cid:437)(cid:410)(cid:346)(cid:286)(cid:374)(cid:410)(cid:349)(cid:272)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)
(cid:3)(cid:69)(cid:286)(cid:410)(cid:449)(cid:381)(cid:396)(cid:364)(cid:3)(cid:393)(cid:396)(cid:381)(cid:448)(cid:349)(cid:400)(cid:349)(cid:381)(cid:374)(cid:349)(cid:374)(cid:336)(cid:3)(cid:258)(cid:374)(cid:282)(cid:3)(cid:282)(cid:286)(cid:448)(cid:349)(cid:272)(cid:286)(cid:3)(cid:258)(cid:437)(cid:410)(cid:346)(cid:286)(cid:374)(cid:410)(cid:349)(cid:272)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)
(cid:62)(cid:381)(cid:272)(cid:258)(cid:367)(cid:3)(cid:271)(cid:349)(cid:374)(cid:282)(cid:349)(cid:374)(cid:336)
(cid:17)(cid:349)(cid:374)(cid:282)(cid:349)(cid:374)(cid:336)(cid:3)(cid:272)(cid:396)(cid:286)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)(cid:3)(cid:349)(cid:374)(cid:349)(cid:410)(cid:349)(cid:258)(cid:410)(cid:286)(cid:282)(cid:3)
(cid:271)(cid:455)(cid:3)(cid:410)(cid:346)(cid:286)(cid:3)(cid:258)(cid:393)(cid:393)
(cid:17)(cid:349)(cid:374)(cid:282)(cid:349)(cid:374)(cid:336)(cid:3)(cid:272)(cid:396)(cid:286)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)(cid:3)(cid:349)(cid:374)(cid:349)(cid:410)(cid:349)(cid:258)(cid:410)(cid:286)(cid:282)(cid:3)(cid:271)(cid:455)(cid:3)(cid:410)(cid:346)(cid:286)(cid:3)(cid:282)(cid:286)(cid:448)(cid:349)(cid:272)(cid:286)
(cid:882)(cid:882)(cid:3)(cid:90)(cid:286)(cid:373)(cid:381)(cid:410)(cid:286)(cid:3)(cid:18)(cid:381)(cid:374)(cid:410)(cid:396)(cid:381)(cid:367)(cid:3)(cid:882)(cid:882)
(cid:17)(cid:349)(cid:374)(cid:282)(cid:349)(cid:374)(cid:336)(cid:3)(cid:396)(cid:286)(cid:448)(cid:381)(cid:272)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)(cid:3)
(cid:349)(cid:374)(cid:349)(cid:410)(cid:349)(cid:258)(cid:410)(cid:286)(cid:282)(cid:3)(cid:271)(cid:455)(cid:3)(cid:410)(cid:346)(cid:286)(cid:3)(cid:258)(cid:393)(cid:393)
(cid:17)(cid:349)(cid:374)(cid:282)(cid:349)(cid:374)(cid:336)(cid:3)(cid:396)(cid:286)(cid:448)(cid:381)(cid:272)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)(cid:3)(cid:349)(cid:374)(cid:349)(cid:410)(cid:349)(cid:258)(cid:410)(cid:286)(cid:282)(cid:3)(cid:271)(cid:455)(cid:3)(cid:410)(cid:346)(cid:286)(cid:3)(cid:282)(cid:286)(cid:448)(cid:349)(cid:272)(cid:286)
Fig. 1: Procedures of remote binding
A. IoT Communication Architecture
The communication in IoT environments usually involves
three parties: the IoT device, the user (or the mobile app as
the user agent), and the cloud. Each of them takes different
responsibilities:
• The IoT device acts as the information collector. Often-
times, multiple devices can be deployed and work col-
laboratively in a smart home to monitor the environment
status.
• The IoT app is developed by vendors to facilitate user
operations. It is used to interpret or visualize sensor data
of IoT devices and interact with users.
• As a connector between the device and the user, the
IoT cloud enables the user and IoT device to remotely
communicate with each other.
To connect the user with the device, there are two con-
nection modes in IoT systems: local connection and remote
connection:
• Local connection allows the user and the device to
communicate within local networks, where home routers
are typically used as local delegations to relay messages
between the user and the device.
• In remote connection, the user’s phone is not in the same
LAN with the IoT devices. Therefore, the cloud is needed
to relay messages between the user and the device.
B. Procedures of Remote Binding
Here we consider the entire life cycle of remote binding,
involving user authentication, local conﬁguration (i.e., device
authentication and local binding), binding creation, and bind-
ing revocation. In particular, as Figure 1 shows, user ﬁrst logs
in and authenticates herself to the cloud. Then, she needs
223
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:13:41 UTC from IEEE Xplore.  Restrictions apply. 
to conﬁgure the device to associate with her mobile app
and access the local network. Next, both the phone and the
IoT device communicate with the cloud to create a binding
relationship in the cloud for subsequent remote connection.
Finally, if the user resets the device, the binding in the cloud
should also be revoked. To get an idea, we describe the typical
design of remote binding as below:
IoT vendors
usually
• User
authentication.
deploy
password-based schemes to authenticate users [52].
Speciﬁcally, this involves two steps: ﬁrst, the user logs
in the cloud; then the cloud returns a user token as the
credential for subsequent steps.
• Local conﬁguration. In this step, the IoT device is set up
to access the LAN (Wi-Fi) and authenticate to the cloud.
In the meantime, the device is also conﬁgured to pair
with the user’s IoT app.
– Network provisioning. To provide network connec-
tion for IoT devices, network cable-based devices
can directly connect with the home router using the
DHCP protocol. For wireless devices, there are some
well-known techniques, such as SmartConﬁg [13] and
Airkiss [16], that can facilitate the operation.
– Device authentication. Once the device can access the
network, it is authenticated to the cloud by sending the
authentication token that contains its device informa-
tion. Meanwhile, it also reports the device status and
attributes, such as the ﬁrmware version and the model
name, to the cloud.
– Local binding. When both the app and the device are
connected to the same local network, they need to
discover and associate with each other. In some solu-
tions, service discovery protocols like Simple Service
Discovery Protocol (SSDP) [12] are used to broadcast
self-descriptions and exchange information between
the device and the app. Alternatively, some vendors
attach labels containing device information (e.g., De-
vice IDs or pairing IDs) on devices, and ask users to
input such IDs in their apps. When the app obtains the
device information, the app will broadcast messages
containing such information to locally bind with the
device.
• Binding creation. Since the cloud relays the messages
between a speciﬁc device and a speciﬁc user, a binding re-
lationship of the device and the user should be maintained
in the cloud. As such, a binding message that contains
the device information and the user information (such as
the user token) will be sent to the cloud by the app, or
alternatively by the device (notated with dashed arrows
in Figure 1). After the binding is created, the app and the
device can remotely communicate with each other.
• Binding revocation. When the user resets a device or
deletes the device in the app,
the binding should be
revoked in the cloud. In this case, to notify the cloud,
an unbinding message should be sent by the app or the
device (notated with dashed arrows in Figure 1).
Given that
there are already mature solutions for user
authentication and local binding, in the following sections, we
focus on the security threats in device authentication, binding
creation, and binding revocation.
III. PRELIMINARIES
In this section, we ﬁrst describe the adversary model. Then,
we present the state-machine model that helps systematically
decompose the remote binding designs and analyze security
vulnerabilities.