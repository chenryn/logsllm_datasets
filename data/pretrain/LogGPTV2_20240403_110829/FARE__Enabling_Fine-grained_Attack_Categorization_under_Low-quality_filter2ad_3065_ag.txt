以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 参考文献

[30] D. Hendrycks 和 K. Gimpel, “神经网络中误分类和分布外样本检测的基线方法,” 在 ICLR 会议论文集, 2017.

[31] S. T. Jan, Q. Hao, T. Hu, J. Pu, S. Oswal, G. Wang, 和 B. Viswanath, “在有限数据下使用神经数据增强检测机器人,” 在 IEEE S&P 会议论文集, 2020.

[32] A. Javaid, Q. Niyaz, W. Sun, 和 M. Alam, “基于深度学习的网络入侵检测系统,” 在 BIONETICS 会议论文集, 2016.

J. Jia, B. Wang, 和 N. Z. Gong, “基于随机游走的在线社交网络虚假账户检测,” 在 DSN 会议论文集, 2017.

[33]

[34] H. Jiang, B. Kim, M. Guan, 和 M. Gupta, “信任还是不信任分类器,” 在 NeurIPS 会议论文集, 2018.

[35] L. Jiang, Z. Zhou, T. Leung, L.-J. Li, 和 L. Fei-Fei, “MentorNet: 学习非常深神经网络的数据驱动课程,” 在 ICML 会议论文集, 2018.

[36] R. Jordaney, K. Sharad, S. K. Dash, Z. Wang, D. Papini, I. Nouretdinov, 和 L. Cavallaro, “Transcend: 检测恶意软件分类模型中的概念漂移,” 在 USENIX Security 会议论文集, 2017.

[37] KDDCup, “网络入侵数据,” 1999, https://www.kdd.org/kdd-cup/view/kdd-cup-1999/Data.

[38] A. Khraisat, I. Gondal, P. Vamplew, 和 J. Kamruzzaman, “入侵检测系统综述: 技术、数据集和挑战,” Cybersecurity, 2019.

[39] D. S. Kim, H.-N. Nguyen, 和 J. S. Park, “改进基于 SVM 的网络入侵检测系统的遗传算法,” 在 AINA 会议论文集, 2005.

J. Kinable 和 O. Kostakis, “基于调用图聚类的恶意软件分类,” 计算机病毒学杂志, 2011.

[40]

[41] D. P. Kingma 和 J. Ba, “Adam: 一种随机优化方法,” arXiv 预印本 arXiv:1412.6980, 2014.

[42] A. Kraskov, H. Stögbauer, 和 P. Grassberger, “估计互信息,” 物理评论 E, 2004.

[43] M. Kruczkowski 和 E. N. Szynkiewicz, “支持向量机在恶意软件分析和分类中的应用,” 在 WIIAT 会议论文集, 2014.

[44] S. Kudugunta 和 E. Ferrara, “用于机器人检测的深度神经网络,” 信息科学, 2018.

[45] P. Laskov 和 N. Šrndić, “静态检测包含恶意 JavaScript 的 PDF 文档,” 在 ACSAC 会议论文集, 2011.

[46] Y. LeCun, Y. Bengio, 和 G. Hinton, “深度学习,” 自然, 2015.

[47] W. Lee, S. J. Stolfo, 和 K. W. Mok, “构建入侵检测模型的数据挖掘框架,” 在 IEEE S&P 会议论文集, 1999.

[48] H. Li, X.-H. Guan, X. Zan, 和 C.-Z. HAN, “基于支持向量机的网络入侵检测,” 计算机研究与发展, 2003.

[49] Z. Li, Y. Li, 和 L. Xu, “基于粒子群优化的 k-means 聚类算法的异常入侵检测方法,” 在 ICM 会议论文集, 2011.

[50] N. Milosevic, A. Dehghantanha, 和 K.-K. R. Choo, “机器学习辅助的 Android 恶意软件分类,” 计算机与电气工程, 2017.

[51] Y. Mirsky, T. Doitshman, Y. Elovici, 和 A. Shabtai, “Kitsune: 基于自编码器集成的在线网络入侵检测,” 在 NDSS 会议论文集, 2018.

[52] K. P. Murphy, 机器学习: 一个概率视角. MIT 出版社, 2012.

[53] C. K. Ng, F. Jiang, L. Y. Zhang, 和 W. Zhou, “使用增强深度嵌入方法的静态恶意软件聚类,” 并发计算: 实践与经验, 2019.

[54] X. Niu, L. Wang, 和 X. Yang, “信用卡欺诈检测的比较研究: 有监督与无监督,” arXiv 预印本 arXiv:1904.10604, 2019.

[55] A. Paszke, S. Gross, S. Chintala, 和 G. Chanan, “PyTorch: Python 中具有强 GPU 加速的张量和动态神经网络,” PyTorch, 2017.

[56] F. Pendlebury, F. Pierazzi, R. Jordaney, J. Kinder, 和 L. Cavallaro, “TESSERACT: 消除跨时空恶意软件分类中的实验偏差,” 在 USENIX Security 会议论文集, 2019.

[58]

[57] C. Phua, V. Lee, K. Smith, 和 R. Gayler, “基于数据挖掘的欺诈检测研究综合调查,” arXiv 预印本 arXiv:1009.6119, 2010.

J. Quionero-Candela, M. Sugiyama, A. Schwaighofer, 和 N. D. Lawrence, 机器学习中的数据集偏移. MIT 出版社, 2009.

[59] A. Rasmus, M. Berglund, M. Honkala, H. Valpola, 和 T. Raiko, “基于梯形网络的半监督学习,” 在 NeurIPS 会议论文集, 2015.

J. Rivero, B. Ribeiro, N. Chen, 和 F. S. Leite, “零样本学习的 Grassmannian 方法在网络入侵检测中的应用,” 在 ICONIP 会议论文集, 2017.

[60]

[61] P. J. Rousseeuw, “轮廓系数: 一种解释和验证聚类分析的图形辅助工具,” 计算与应用数学杂志, 1987.

[62] A. S. Sabau, “基于聚类的金融欺诈检测研究综述,” 经济信息学, 2012.

[63] T. Shon, Y. Kim, C. Lee, 和 J. Moon, “基于 SVM 和 GA 的网络异常检测机器学习框架,” 在 IEEE SMC 信息安全研讨会论文集, 2005.

[64] C. Smutz 和 A. Stavrou, “使用元数据和结构特征的恶意 PDF 检测,” 在 ACSAC 会议论文集, 2012.

[65] R. Sommer 和 V. Paxson, “封闭世界之外: 使用机器学习进行网络入侵检测,” 在 IEEE S&P 会议论文集, 2010.

J. Stallkamp, M. Schlipsing, J. Salmen, 和 C. Igel, “德国交通标志识别基准: 多类分类竞赛,” 在 IJCNN 会议论文集, 2011.

[66]

[67] A. Strehl 和 J. Ghosh, “聚类集成—一种结合多个划分的知识重用框架,” 机器学习研究杂志 (JMLR), 2002.

[68] G. Stringhini, P. Mourlanne, G. Jacob, M. Egele, C. Kruegel, 和 G. Vigna, “EvilCohort: 检测在线服务中的恶意账户社区,” 在 USENIX Security 会议论文集, 2015.

J. L. Suárez, S. García, 和 F. Herrera, “距离度量学习教程: 数学基础、算法和软件,” arXiv 预印本 arXiv:1812.05944, 2018.

[69]

[70] M. Tavallaee, E. Bagheri, W. Lu, 和 A. A. Ghorbani, “对 KDD Cup 99 数据集的详细分析,” 在 CISDA 会议论文集, 2009.

[71] K. Thomas, D. McCoy, C. Grier, A. Kolcz, 和 V. Paxson, “贩卖虚假账户: 地下市场在 Twitter 垃圾邮件和滥用中的作用,” 在 USENIX Security 会议论文集, 2013.

[72] O. Varol, E. Ferrara, C. A. Davis, F. Menczer, 和 A. Flammini, “在线人机交互: 检测、估计和表征,” 在 AAAI Weblogs and Social Media 研讨会论文集, 2017.

[73] P. Vibert, “勒索软件行业的迅速演变,” 2019, https://www.cybersecurity-review.com/articles/the-rapid-evolution-of-the-ransomware-industry/.

[74] N. X. Vinh, J. Epps, 和 J. Bailey, “聚类比较的信息论度量: 变体、性质、归一化和机会校正,” 机器学习研究杂志, 2010.

[75] G. Wang, T. Wang, H. Zheng, 和 B. Y. Zhao, “人 vs. 机器: 恶意众包工作者的实际对抗检测,” 在 USENIX Security 会议论文集, 2014.

[76] D.-J. Wu, C.-H. Mao, T.-E. Wei, H.-M. Lee, 和 K.-P. Wu, “DroidMat: 通过清单和 API 调用跟踪的 Android 恶意软件检测,” 在亚洲信息安全联合会议论文集, 2012.

[77] X. Wu, T. Ma, J. Cao, Y. Tian, 和 A. Alabdulkarim, “聚类集成算法的比较研究,” 计算机与电气工程, 2018.

---

### 表格 V
**不同广义零样本学习方法（GZSL）的平均互信息（AMI）及其标准差。**

| 标签条件 | nc = ⌊n/2⌋, 1% 标签 | ng = ⌊n/2⌋, 1% 标签 |
| --- | --- | --- |
| 入侵 | 0.74 ± 0 | 0.75 ± 0 |
| 恶意软件 | 0.63 ± 0.06 | 0.64 ± 0.09 |

---

### 图 4
**FARE 与基线方法在缺失类别上的比较。**

---

### 表格 VI
**混淆矩阵示例。第 2 列到第 4 列表示每个预测簇与真实类别之间重叠样本的数量。第 5 列和第 4 行分别汇总了预测簇和真实类别的样本数。**

| 预测 | 簇 1 | 簇 2 | 总计 |
| --- | --- | --- | --- |
| 类别 1 | 960 | 20 | 980 |
| 类别 2 | 18 | 0 | 18 |
| 类别 3 | 2 | 0 | 2 |
| 总计 | 980 | 20 | 1000 |

---

### 图 5
**FARE 与基线方法在粗粒度标签上的比较。**

---

### 附录 A：实现和超参数
我们使用 PyTorch [55] 包实现了 FARE。K-means 和 DBSCAN 采用 scikit-learn 包中的 API 实现，并采用了 scikit-learn 包建议的超参数。DEC 的网络架构与其他 DNN 相同，具体如下：
1. **网络结构**：我们使用了一个 MLP，其架构为“输入维度-500-500-2000-32”，每层使用 Tanh 激活函数。还采用了权重衰减（强度为 0.01）作为正则化。
2. **小批量大小**：我们创建了两个小批量采样器，分别从未标记和已标记数据中采样。监督 DNN 仅使用已标记采样器。MixMatch 和 Ladder 同时使用这两个采样器，以确保每个批次都包含未标记和已标记数据。已标记和未标记采样器的批量大小分别为 64 和 128。
3. **训练轮次**：最大训练轮次为 1000。我们采用了提前停止机制：当验证集上的损失在连续两个轮次内增加，或训练集上的损失减少低于 0.01 时停止训练。这些 DNN 使用 Adam 优化器，学习率为 0.001。

关于 FARE 的超参数，首先，我们使用上述超参数运行 DEC、K-means 和 DBSCAN 各 50 次。结合“给定标签”，总共构建了 M = 151 个邻域模型。然后设置距离半径 α = 32 和正则化系数 λ = 0.01。“给定标签”的权重 p1 采用第三节 D 部分介绍的选择机制，在恶意软件数据集中设为 10，在网络入侵数据集中设为 {1, 7, 10}（ng/nc = 7 时使用 1，ng/nc = 4 和 ng = 1 时使用 7，其余情况使用 10）。最后，对于输入转换网络，我们使用了与半监督基线相同的超参数集。

---

### 附录 B：基线性能
**FARE 与半监督基线的比较**。图 4 和图 5 显示了 FARE 与基线原始实现之间的比较。随着 nc 和 ng 的增加，基线的 AMI 显著下降，最差的 AMI 甚至低于 0.1。结果表明，如果没有进一步的适应，任何基线都无法处理缺失类别或粗粒度标签数据。因此，我们在评估中对所有基线进行了修正。

**FARE 与广义零样本学习方法的比较**。我们将 FARE 与两种代表性的 GZSL 方法 OSDN [4] 和 DEM [80] 进行了比较，在低质量标签设置下进行测试。对于缺失类别设置，我们固定了 nc = ⌊n/2⌋ 对每个数据集，并在每个已知类别中保留 1% 的标记训练样本。我们在构造的训练集上运行 FARE、OSDN 和 DEM，并比较它们的测试 AMI。对于粗粒度标签设置，我们固定了 ng = ⌊n/2⌋ 对每个数据集，并遵循相同的程序。在这两个实验中，每种方法运行 10 次。需要注意的是，DEM 需要关于训练集和测试集之间联系的共享语义属性的侧信息。由于我们的数据集不提供此类侧信息，我们为 DEM 提供了随机信息。

如表 V 所示，FARE 在两种设置下均显著优于 OSDN 和 DEM。这是因为 GZSL 需要丰富的已知类别的训练样本。然而，在我们的设置中，每个已知类别中只有 1% 的标签。此外，没有有意义的侧信息，DEM 完全无法完成任务。这表明 GZSL 方法不适合我们的设置。因此，我们没有将它们作为基线纳入实验。

---

### 表格 VII
**在选定的缺失类别和粗粒度标签设置下的准确性比较。**

| 数据集 | 标签设置 | FARE | MixMatch+ | Ladder+ | DNN+ |
| --- | --- | --- | --- | --- | --- |
| 恶意软件 | nc = 2 | 0.92 ± 0.03 | 0.92 ± 0.03 | 0.86 ± 0.05 | 0.88 ± 0.06 |
|  | ng = 2 | 0.88 ± 0.02 | 0.89 ± 0.01 | 0.87 ± 0.01 | 0.88 ± 0.02 |
| 网络入侵 | nc = 4 | 1 ± 0 | 0.97 ± 0.01 | 0.97 ± 0.02 | 0.98 ± 0 |
|  | ng = 4 | 0.99 ± 0 |

---

希望这些优化能使文本更加清晰、连贯和专业。如果需要进一步修改，请告知。