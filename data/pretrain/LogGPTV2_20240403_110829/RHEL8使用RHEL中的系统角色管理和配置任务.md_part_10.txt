:::
:::
::: section
::: titlepage
## []{#using-the-logging-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html#configuring-server-logging-with-tls_using-logging-system-role-with-tls}使用 TLS 配置服务器日志 {.title}
:::
您可以使用日志记录系统角色将 RHEL 系统登录配置为服务器，并通过运行
Ansible playbook 从带有 TLS 的远程日志记录系统接收日志。
此流程在 Ansible 清单的服务器组所有主机上配置 TLS。
::: itemizedlist
**先决条件**
-   您有权限在要在其上配置 TLS 的受管节点上运行 playbook。
-   受管节点列在控制节点上的清单文件中。
-   在控制节点上安装 `ansible`{.literal} 和
    `rhel-system-roles`{.literal} 软件包。
:::
::: orderedlist
**流程**
1.  使用以下内容创建 `playbook.yml`{.literal} 文件：
    ``` screen
    ---
    - name: Deploying remote input and remote_files output with certs
      hosts: server
      roles:
        - rhel-system-roles.logging
      vars:
        logging_pki_files:
          - ca_cert_src: /local/path/to/ca_cert.pem
            cert_src: /local/path/to/cert.pem
            private_key_src: /local/path/to/key.pem
        logging_inputs:
          - name: input_name
            type: remote
            tcp_ports: 514
            tls: true
            permitted_clients: ['clients.example.com']
        logging_outputs:
          - name: output_name
            type: remote_files
            remote_log_path: /var/log/remote/%FROMHOST%/%PROGRAMNAME:::secpath-replace%.log
            async_writing: true
            client_count: 20
            io_buffer_size: 8192
        logging_flows:
          - name: flow_name
            inputs: [input_name]
            outputs: [output_name]
    ```
    playbook 使用以下参数：
    ::: variablelist
    [`logging_pki_files`{.literal}]{.term}
    :   您可以使用这个参数配置 TLS，且必须传递
        `ca_cert_src`{.literal}、`cert_src`{.literal} 和
        `private_key_src`{.literal} 参数。
    [`ca_cert`{.literal}]{.term}
    :   表示 CA 证书的路径。默认路径是
        `/etc/pki/tls/certs/ca.pem`{.literal}，文件名由用户设置。
    [`cert`{.literal}]{.term}
    :   表示证书路径.默认路径是
        `/etc/pki/tls/certs/server-cert.pem`{.literal}，文件名由用户设置。
    [`private_key`{.literal}]{.term}
    :   表示到私钥的路径。默认路径是
        `/etc/pki/tls/private/server-key.pem`{.literal}，文件名由用户设置。
    [`ca_cert_src`{.literal}]{.term}
    :   Reprents 本地 CA 证书文件路径，复制到目标主机上。如果指定了
        `ca_cert`{.literal}，则会将其复制到该位置。
    [`cert_src`{.literal}]{.term}
    :   修复复制到目标主机的本地证书文件路径。如果指定了
        `cert`{.literal}，则会将其复制到该位置。
    [`private_key_src`{.literal}]{.term}
    :   表示复制到目标主机上的本地密钥文件路径。如果指定了
        `private_key`{.literal}，则会将其复制到该位置。
    [`tls`{.literal}]{.term}
    :   使用此参数可以确保通过网络安全传输日志。如果您不想安全打包程序，您可以设置
        `tls: true`{.literal}。
    :::
2.  验证 playbook 语法：
    ``` screen
    # ansible-playbook --syntax-check playbook.yml
    ```
3.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory_file playbook.yml
    ```
:::
:::
:::
::: section
::: titlepage
# []{#using-the-logging-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html#additional_resources_2}其它资源 {.title}
:::
::: itemizedlist
-   [RHEL
    系统角色入门](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#getting-started-with-rhel-system-roles_getting-started-with-system-administration){.link}
-   安装 `rhel-system-roles`{.literal} 软件包，文档位于
    `/usr/share/ansible/roles/rhel-system-roles.logging/README.html`{.literal}
-   [RHEL
    系统角色知识库文章](https://access.redhat.com/node/3050101){.link}
-   有关 `ansible-playbook`{.literal} 命令的详情请参考
    `ansible-playbook(1)`{.literal} man page。
:::
:::
:::
[]{#configuring-secure-communication-with-the-ssh-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html}
::: chapter
::: titlepage
# []{#configuring-secure-communication-with-the-ssh-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#configuring-secure-communication-with-the-ssh-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel}第 8 章 配置与 SSH 系统角色的安全通信 {.title}
:::
作为管理员，您可以使用 SSHD 系统角色配置 SSH 服务器和 SSH
系统角色，通过使用 Red Hat Ansible Automation Platform 在任意数量的 RHEL
系统上一致地配置 SSH 客户端。
::: section
::: titlepage
# []{#configuring-secure-communication-with-the-ssh-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#sshd-system-role-variables_configuring-secure-communication-with-the-ssh-system-roles}SSHD 系统角色变量 {.title}
:::
在 SSHD 系统角色 playbook 中，您可以根据您的偏好和限制定义 SSH
配置文件的参数。
如果没有配置这些变量，系统角色会生成与 RHEL 默认值匹配的
`sshd_config`{.literal} 文件。
在所有情况下，布尔值在 `sshd`{.literal} 配置中都正确呈现为
`yes`{.literal} 和 `no`{.literal}。您可以使用 list
定义多行配置项。例如：
``` screen
sshd_ListenAddress:
  - 0.0.0.0
  - '::'
```
呈现为：
``` screen
ListenAddress 0.0.0.0
ListenAddress ::
```
::: variablelist
**SSHD 系统角色的变量**
[`sshd_enable`{.literal}]{.term}
:   如果设置为 `False`{.literal}，则该角色被完全禁用。默认值为
    `True`{.literal}。
[`sshd_skip_defaults`{.literal}]{.term}
:   如果设置为 `True`{.literal}，系统角色不会应用默认值。您可以使用
    `sshd`{.literal} 字典或 `sshd_Key`{.literal}
    变量指定完整的配置默认值集合。默认值为 `False`{.literal}。
[`sshd_manage_service`{.literal}]{.term}
:   如果设置为
    `False`{.literal}，该服务不会被管理，这意味着它不会在引导时启用，且不会启动或重新载入。除非在容器内或
    AIX 中运行，否则默认为 `True`{.literal}，因为 Ansible
    服务模块目前不支持 AIX 的 `enabled`{.literal}。
[`sshd_allow_reload`{.literal}]{.term}
:   如果设置为 `False`{.literal}，`sshd`{.literal}
    不会在更改配置后重新载入。这可帮助进行故障排除。要应用更改后的配置，请手动重新载入
    `sshd`{.literal}。默认为与 `sshd_manage_service`{.literal}
    相同的值，但 AIX 除外，其中 `sshd_manage_service`{.literal} 默认为
    `False`{.literal}，但 `sshd_allow_reload`{.literal} 默认为
    `True`{.literal}。
[`sshd_install_service`{.literal}]{.term}
:   如果设置为 `True`{.literal}，该角色将为 `sshd`{.literal}
    服务安装服务文件。这会覆盖操作系统中提供的文件。不要设置为
    `True`{.literal}，除非您要配置第二个实例，而且您还要更改
    `sshd_service`{.literal} 变量。默认值为 `False`{.literal}。
    该角色使用以下变量指向的文件作为模板：
    ``` screen
    sshd_service_template_service (default: templates/sshd.service.j2)
    sshd_service_template_at_service (default: templates/PI:EMAIL)
    sshd_service_template_socket (default: templates/sshd.socket.j2)
    ```
[`sshd_service`{.literal}]{.term}
:   此变量更改 `sshd`{.literal} 服务名称，这有助于配置第二个
    `sshd`{.literal} 服务实例。
[`sshd`{.literal}]{.term}
:   包含配置的字典。例如：
    ``` screen
    sshd:
      Compression: yes
      ListenAddress:
        - 0.0.0.0
    ```
[`sshd_OptionName`{.literal}]{.term}
:   您可以使用由 `sshd_`{.literal}
    前缀和选项名称组成的简单变量而不是字典来定义选项。简单的变量覆盖
    `sshd`{.literal} 字典中的值。例如：
    ``` screen
    sshd_Compression: no
    ```
[`sshd_match`{.literal} 和 `sshd_match_1`{.literal} 至 `sshd_match_9`{.literal}]{.term}
:   Match 部分的字典或字典列表。请注意，这些变量不会覆盖
    `sshd`{.literal}
    字典中定义的匹配块。所有源都会反映在生成的配置文件中。
:::
::: title
**SSHD 系统角色的辅助变量**
:::
您可以使用这些变量覆盖与每个支持的平台对应的默认值。
::: variablelist
[`sshd_packages`{.literal}]{.term}
:   您可以使用此变量覆盖安装的软件包的默认列表。
[`sshd_config_owner`{.literal}、`sshd_config_group`{.literal} 和 `sshd_config_mode`{.literal}]{.term}
:   您可以使用这些变量为此角色生成的 `openssh`{.literal}
    配置文件设置所有权和权限。
[`sshd_config_file`{.literal}]{.term}
:   此角色保存生成的 `openssh`{.literal} 服务器配置的路径。
[`sshd_binary`{.literal}]{.term}
:   到 `openssh`{.literal} 的 `sshd`{.literal} 可执行文件的路径。
[`sshd_service`{.literal}]{.term}
:   `sshd`{.literal} 服务的名称。默认情况下，这个变量包含目标平台使用的
    `sshd`{.literal} 服务的名称。当角色使用
    `sshd_install_service`{.literal} 变量时，您还可以使用它来设置自定义
    `sshd`{.literal} 服务的名称。
[`sshd_verify_hostkeys`{.literal}]{.term}
:   默认值为 `auto`{.literal}。当设置为 `auto`{.literal}
    时，它会列出生成的配置文件中存在的所有主机密钥，并生成所有不存在的路径。此外，权限和文件所有者被设置为默认值。如果部署阶段使用该角色来确保服务能够在第一次尝试时启动，这非常有用。要禁用这个检查，将此变量设置为空列表
    `[]`{.literal}。
[`sshd_hostkey_owner`{.literal}, `sshd_hostkey_group`{.literal}, `sshd_hostkey_mode`{.literal}]{.term}
:   使用这些变量从 `sshd_verify_hostkeys`{.literal}
    设置主机密钥的所有权和权限。
[`sshd_sysconfig`{.literal}]{.term}
:   在基于 RHEL 的系统中，这个变量配置 `sshd`{.literal}
    服务的详情。如果设置为
    `true`{.literal}，这个角色也会根据以下配置管理
    `/etc/sysconfig/sshd`{.literal} 配置文件。默认值为
    `false`{.literal}。
[`sshd_sysconfig_override_crypto_policy`{.literal}]{.term}
:   在 RHEL 8 中，当设置为 `true`{.literal}
    时，这个变量会覆盖系统范围的加密策略。默认值为 `false`{.literal}。
[`sshd_sysconfig_use_strong_rng`{.literal}]{.term}
:   在基于 RHEL 的系统中，这个变量可强制 `sshd`{.literal}
    重新排序带有作为参数给出的字节数的 `openssl`{.literal}
    随机数生成器。默认值为
    `0`{.literal}，它会禁用此功能。如果系统没有硬件随机数字生成器，请不要打开此项。
:::
:::
::: section
::: titlepage
# []{#configuring-secure-communication-with-the-ssh-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#configuring-openssh-servers-using-the-sshd-system-role_configuring-secure-communication-with-the-ssh-system-roles}使用 SSHD 系统角色配置 OpenSSH 服务器 {.title}
:::
您可以通过运行 Ansible playbook，使用 SSHD 系统角色来配置多个 SSH
服务器。
::: itemizedlist
**先决条件**
-   [*访问一个或多个受管节点*]{.emphasis}，它们是您要使用 SSHD
    系统角色配置的系统。
-   [*对控制节点的访问和权限*]{.emphasis}，这是 Red Hat Ansible Engine
    配置其他系统的系统。
    在控制节点上：
    ::: itemizedlist
    -   已安装 Red Hat Ansible Engine。
    -   已安装 `rhel-system-roles`{.literal} 软件包。
    -   列出受管节点的清单文件。
    :::
:::
::: orderedlist
**流程**
1.  为 SSHD 系统角色复制示例 playbook:
    ``` screen
    # cp /usr/share/doc/rhel-system-roles/sshd/example-root-login-playbook.yml path/custom-playbook.yml
    ```
2.  使用文本编辑器打开复制的 playbook，例如：
    ``` screen
    # vim path/custom-playbook.yml
    ---
    - hosts: all
      tasks:
      - name: Configure sshd to prevent root and password login except from particular subnet
        include_role:
          name: rhel-system-roles.sshd
        vars:
          sshd:
            # root login and password login is enabled only from a particular subnet
            PermitRootLogin: no
            PasswordAuthentication: no
            Match:
            - Condition: "Address 192.0.2.0/24"
              PermitRootLogin: yes
              PasswordAuthentication: yes
    ```
    playbook 将受管节点配置为 SSH 服务器，以便：
    ::: itemizedlist
    -   禁用密码和 `root`{.literal} 用户登录
    -   只有在子网中启用密码和 `root`{.literal} 用户登录
        `192.0.2.0/24`{.literal}
    :::
    您可以根据您的偏好修改变量。如需了解更多详细信息，请参阅 [SSHD
    服务器系统角色变量](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/some-guide/sshd-system-role-variables_configuring-secure-communication-with-the-sshd-system-role){.link}。
3.  可选：验证 playbook 语法。
    ``` screen
    # ansible-playbook --syntax-check path/custom-playbook.yml
    ```
4.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory_file path/custom-playbook.yml
    ...
    PLAY RECAP
    **************************************************
    localhost : ok=12 changed=2 unreachable=0 failed=0