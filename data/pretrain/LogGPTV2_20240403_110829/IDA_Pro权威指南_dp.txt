get_member_name(m, buf, sizeof(buf));
return qstrdup(buf); 
GetMemberOffset
return get_member_by_name(get_struc(id), member_name)->soff;
GetMemberQty
get_struc(id)->memqty;
GetMemberSize
member_t  *m = get_member(get_struc(id), offset);
return get_member_size(m); 
GetMemberStrId
tid_t m = get_member(get_struc(id), offset)->id;
return netnode n(m).altval(3) - 1; 
GetMinSpd
func_t  * f = get_func(ea);
return f ? get_min_spd_ea(f) : BADADDR; 
GetMnem
ua_mnem(ea, buf, sizeof(buf));
 return qstrdup(buf); 
GetModuleName
 module_info_t modinfo;
if (base == 0)
   get_first_module(&modinfo);
else
   modinfo.base = base - 1; 
   get_next_module(&modinfo);
return qstrdup(modinfo.name); 
GetModuleSize
 module_info_t modinfo;
if (base == 0)
   get_first_module(&modinfo);
else
   modinfo.base = base - 1;
   get_next_module(&modinfo);
return modinfo.size; 
GetNextBmask
return get_next_bmask(eum_id, value);
GetNextConst
return get_next_const(enum_id, value, bmask);
GetNextFixupEA
return get_next_fixup_ea(ea);
GetNextHashKey
netnode n(id).hashnxt(idx, buf, sizeof(buf));
return qstrdup(buf); 
GetNextIndex
return netnode n(id).supnxt(idx, tag);
GetNextModule
 module_info_t modinfo;
modinfo.base = base;
get_next_module(&modinfo);
return modinfo.base; 
GetNextStrucIdx
return get_next_struc_idx();
GetOpType
* buf = 0;
if (isCode(get_flags_novalue(ea)))
   ua_ana0(ea);
   return cmd.Operands[n].type; 
GetOperandValue
Use ua_ana0 to fill command struct then return
appropriate value based on cmd.Operands[n].type 
GetOpnd
* buf = 0;
if (isCode(get_flags_novalue(ea)))
   ua_outop2(ea, buf, sizeof(buf), n);
tag_remove(buf, buf, sizeof(buf));
return qstrdup(buf); 
GetOriginalByte
return get_original_byte(ea);
GetPrevBmask
return get_prev_bmask(enum_id, value);
GetPrevConst
return get_prev_const(enum_id, value, bmask);
GetPrevFixupEA
return get_prev_fixup_ea(ea);
GetPrevHashKey
netnode n(id).hashprev(idx, buf, sizeof(buf));
return qstrdup(buf); 
GetPrevIndex
return netnode n(id).supprev(idx, tag);
GetPrevStrucIdx
return get_prev_struc_idx(index);
GetProcessName
process_info_t  p;
pid_t pid = get_process_info(idx, &p);
return qstrdup(p.name); 
GetProcessPid
return get_process_info(idx, NULL);
GetProcessQty
return get_process_qty();
GetProcessState
return get_process_state();
GetReg
return getSR(ea, str2reg(reg));
GetRegValue
 regval_t  r;
get_reg_val(name, &r);
if (is_reg_integer(name))
   return (int)r.ival;
else
   //memcpy(result, r.fval, 12); 
GetSegmentAttr
segment_t * s = get_seg(segea);
return internal_get_attr(s, attr); 
GetShortPrm
if (offset &lt= 190)
   return * (unsigned short * )(offset + (char* )&inf); 
GetSourceFile
return qstrdup(get_sourcefile(ea));
GetSpDiff
return get_sp_delta(get_func(ea), ea);
GetSpd
return get_spd(get_func(ea), ea);
GetString
if (len == -1)
   len = get_max_ascii_length(ea, type, true);
get_ascii_contents(ea, len, type, buf, sizeof(buf));
return qstrdup(buf); 
GetStringType
return netnode n(ea).altval(16) - 1;
GetStrucComment
get_struc_cmt(id, repeatable, buf, sizeof(buf));
return qstrdup(buf); 
GetStrucId
return get_struc_by_idx(index);
GetStrucIdByName
return get_struc_id(name);
GetStrucIdx
return get_struc_idx(id);
GetStrucName
 get_struc_name(id,  buf,  sizeof(buf));
return qstrdup(buf); 
GetStrucNextOff
return get_struc_next_offset(get_struc(id), offset);
GetStrucPrevOff
return get_struc_prev_offset(get_struc(id), offset);
GetStrucQty
return get_struc_qty();
GetStrucSize
return get_struc_size(id);