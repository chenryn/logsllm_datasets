title:HyperFuzzer: An Efficient Hybrid Fuzzer for Virtual CPUs
author:Xinyang Ge and
Ben Niu and
Robert Brotzman and
Yaohui Chen and
HyungSeok Han and
Patrice Godefroid and
Weidong Cui
HyperFuzzer: An Efficient Hybrid Fuzzer for Virtual CPUs
Xinyang Ge
Microsoft Research
PI:EMAIL
Yaohui Chen
Facebook
PI:EMAIL
Ben Niu
Microsoft
PI:EMAIL
PI:EMAIL
HyungSeok Han
KAIST
Robert Brotzman
Penn State University
PI:EMAIL
Patrice Godefroid
Microsoft Research
PI:EMAIL
Weidong Cui
Microsoft Research
PI:EMAIL
ABSTRACT
In this cloud computing era, the security of hypervisors is critical
to the overall security of the cloud. In particular, the security of
CPU virtualization in hypervisors is paramount because it is imple-
mented in the most privileged CPU mode. Blackbox and graybox
fuzzing are limited to finding shallow virtual CPU bugs due to its
huge search space. Whitebox fuzzing can be used for systematic
analysis of CPU virtualization, but existing implementations rely
on slow hardware emulators to enable dynamic symbolic execution.
In this paper, we present HyperFuzzer, the first efficient hybrid
fuzzer for virtual CPUs. Our key observation is that a virtual CPU’s
execution is determined by the VM state. Based on this observation,
we design a new fuzzing setup that uses complete VM states as
fuzzing inputs, and a new fuzzing technique we call Nimble Sym-
bolic Execution to enable dynamic symbolic execution for CPU
virtualization running on bare metal. Specifically, it uses the hard-
ware to log the control flow efficiently, and then reconstructs an
approximate execution trace from only the control flow and the
fuzzing input. The reconstructed execution trace is surprisingly
sufficient for precise dynamic symbolic execution of virtual CPUs.
We have built a prototype of HyperFuzzer based on Intel Proces-
sor Trace for Microsoft Hyper-V. Our experimental results show
that HyperFuzzer can run thousands of tests per second, which is 3
orders of magnitude faster than using a hardware emulator. When
compared with a baseline using full (control+data) execution traces,
HyperFuzzer can still generate 96.8% of the test inputs generated
by the baseline. HyperFuzzer has found 11 previously unknown
virtual CPU bugs in the Hyper-V hypervisor, and all of them were
confirmed and fixed.
CCS CONCEPTS
• Security and privacy → Software and application security;
Systems security.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea.
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484748
KEYWORDS
fuzzing, symbolic execution, virtualization, hypervisor
ACM Reference Format:
Xinyang Ge, Ben Niu, Robert Brotzman, Yaohui Chen, HyungSeok Han,
Patrice Godefroid, and Weidong Cui. 2021. HyperFuzzer: An Efficient Hybrid
Fuzzer for Virtual CPUs. In Proceedings of the 2021 ACM SIGSAC Conference
on Computer and Communications Security (CCS ’21), November 15–19, 2021,
Virtual Event, Republic of Korea. ACM, New York, NY, USA, 13 pages. https:
//doi.org/10.1145/3460120.3484748
1 INTRODUCTION
Hardware-assisted virtualization is one of the most disruptive tech-
nologies in the past two decades. The increasing growth of the cloud
computing industry makes virtualization more prevalent than ever.
As a result, most people today run their computation tasks on top
of virtualization either explicitly or implicitly.
Root mode
Non-root mode
Ring 0 Virtual CPU (Both) Virtual I/O (Type-1)
Ring 3
Virtual I/O (Type-1)
Virtual I/O (Type-2)
Table 1: The CPU mode where virtual CPU and virtual I/O
are implemented in type-1 and type-2 hypervisors on x86.
Hypervisors implement the abstraction of virtual machines (VMs)
and allow them to share resources on a single physical machine.
This makes the security of hypervisors paramount for the cloud—
Microsoft offers up to $250,000 bounty for a single bug in Hyper-
V [7]. A hypervisor has two main tasks: CPU virtualization and I/O
virtualization as listed in Table 1. While I/O virtualization can be im-
plemented in a less-privileged user-mode process [11] or offloaded
to dedicated hardware [2], CPU virtualization is at the heart of a
hypervisor and implemented in the most privileged CPU mode (e.g.,
root mode, ring 0 on x86). Therefore, a security vulnerability in CPU
virtualization can lead to catastrophic consequences (e.g., allowing
a malicious VM to take control of the entire physical machine).
Searching for CPU virtualization bugs is challenging because
the search space consists of all possible architectural states. This
huge search space is reflected in the almost 5,000 dense pages of
the latest Intel Software Developer Manual [32] that describes the
interface implemented by a modern CPU. For example, one bug
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea366we found in this work requires that (1) the guest VM runs in the
16-bit protected mode, (2) attempts to execute an instruction from
a memory-mapped I/O region, and (3) places a specific instruction
at the guest physical address 0. It is almost impossible for random
testing to hit all these conditions at once to trigger the bug.
Existing solutions for securing hypervisors are insufficient. For-
mal verification techniques have been applied to individual compo-
nents of commercial hypervisors [37] or to simpler non-commercial
hypervisors [13, 21, 31, 36], but they currently do not scale to full-
fledged commercial hypervisors like those deployed in the pub-
lic cloud. Manually-written [6, 14] or randomly-generated [4, 8–
10, 44, 45] tests are unlikely to catch bugs involving complex trigger
conditions (like the one mentioned above) due to their blackbox
or graybox nature. For example, the state-of-the-art hypervisor
fuzzer called Nyx [45] employs a coverage-guided graybox fuzzing
setup, and only finds ring-3 I/O virtualization bugs in KVM/QEMU.
Dynamic symbolic execution (for whitebox fuzzing) can be used to
search for bugs with complex trigger conditions, but existing white-
box fuzzing systems for hypervisors have low fuzzing throughput.
For instance, MultiNyx [24] incurs significant slowdown by execut-
ing the hypervisor on a hardware emulator [3] which itself runs
on a binary instrumentation framework [38].
This motivates us to build an efficient hybrid fuzzer tailored for
CPU virtualization in hypervisors. Hybrid fuzzing [17, 39, 48, 50, 53]
is an automatic test generation technique that combines coverage-
guided random input mutation with precise input generation based
on path constraints derived from dynamic symbolic execution [30].
Hybrid fuzzing has shown its effectiveness in finding security
vulnerabilities in user-mode programs: graybox fuzzing quickly
explores easy-to-find program paths with simple random input
mutations, while whitebox fuzzing extends the search frontier to
harder-to-find program paths with precise path constraint solving.
We introduce HyperFuzzer, the first efficient hybrid fuzzer for
virtual CPUs. In the rest of the paper, we refer to hypervisor as
its virtual CPU implementation unless specified otherwise. The
key observation driving the design of HyperFuzzer is that a virtual
CPU’s execution is determined by the VM’s state, not by the hypervi-
sor’s internal state. This is similar to a real CPU whose execution
is driven by the software state (e.g., registers and memory), not by
the CPU’s internal state.
Based on this observation, we design a new fuzzing setup for
HyperFuzzer. First, we use a complete VM state as the fuzzing
input. This allows HyperFuzzer to mutate both the instruction
to be executed by the VM and the architectural environment in
which the instruction is executed. Mutating the full VM state is
crucial for catching CPU virtualization bugs that depend on some
uncommon architectural state (e.g., 16-bit protected mode). Second,
we construct a VM’s state as a fuzzing input from scratch. We only
include data required for a valid architectural state in a fuzzing
input, which allows it to be as small as a few hundred bytes. The
small size of fuzzing inputs is important for effective input mutation
and fast VM restore. Third, we only fuzz the (short) virtual CPU
execution of the first VM trap triggered by a fuzzing input. We do
not need to fuzz the execution of multiple VM traps because each
subsequent trap can be explored by a different fuzzing input. The
short execution size of fuzzing sessions is important for precise
dynamic symbolic execution.
To make HyperFuzzer hybrid, we must support both coverage-
guided random mutation and precise input generation based on
dynamic symbolic execution. To make HyperFuzzer efficient, we
must run the hypervisor natively on a real CPU instead of on a
hardware emulator. This is seemingly contradictory because hybrid
fuzzing usually requires instrumentation or emulation to record the
execution of the fuzzing target. The key enabling technology for Hy-
perFuzzer is a new dynamic symbolic execution technique we call
Nimble Symbolic Execution (NSE). NSE uses hardware tracing, such
as Intel Processor Trace (PT) [32, Chap. 35], to record the complete
control flow of the virtual CPU’s execution in the hypervisor with
low performance overhead. The recorded control flow is obviously
sufficient for coverage-guided fuzzing [18, 46, 52]. Unfortunately, it
does not include data values for registers or memory locations, and
is thus insufficient for dynamic symbolic execution that requires
both the control and data flows.
To overcome this limitation, NSE reconstructs an approximate
execution trace based on the fuzzing input and the recorded control
flow of the virtual CPU. In principle, this reconstruction is incom-
plete because the hypervisor’s memory and register values during
the execution are not recorded and thus unknown. However, thanks
to our specific fuzzing setup and our key observation that the VM
state determines the execution of a virtual CPU, NSE reconstructs
execution traces with high precision sufficient for dynamic sym-
bolic execution. This allows HyperFuzzer to generate the majority
of new fuzzing inputs that would be generated by a baseline sys-
tem that uses a hardware emulator to record full-fidelity execution
traces but is orders-of-magnitude slower than HyperFuzzer.
We have implemented a prototype of HyperFuzzer based on Intel
PT for Microsoft Hyper-V. By launching a VM to directly trigger
a hypervisor’s native execution on a real CPU, HyperFuzzer can
run thousands of tests per second, which is 3 orders of magnitude
faster than using a hardware emulator like Bochs [3]. When com-
paring NSE against a baseline with full-fidelity execution traces
(control+data), we find that NSE can generate 96.8% of the new
fuzzing inputs generated by the baseline while only relying on the
recorded control flows and the fuzzing inputs. Finally, HyperFuzzer
has found 11 previously unknown virtual CPU bugs in the Hyper-V
hypervisor, including 6 security critical ones that allow a malicious
guest VM to compromise the underlying physical machine. All 11
bugs were confirmed and fixed.
using a slow hardware emulator.
In particular, we make the following contributions:
• The first efficient hybrid fuzzer for virtual CPUs without
• The Nimble Symbolic Execution technique that enables white-
box fuzzing for virtual CPUs with only a control-flow trace
recorded by the commodity hardware.
• An effective prototype of HyperFuzzer that has found 11
previously unknown virtual CPU bugs in the Hyper-V hy-
pervisor.
2 MOTIVATION
In this section, we use a real-world bug found by HyperFuzzer to
motivate our design. We first describe the bug, then explain the
root cause, and finally discuss the requirements for HyperFuzzer.
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea367whole system. We assume an adversary has complete control inside
a guest VM, which is consistent with the threat model used by
cloud operators. Specifically, we assume the adversary controls the
virtual disk image and thus controls the booting code and the guest
OS. This would allow the adversary to directly boot the guest VM
into a bug-inducing VM state to trigger a bug in the hypervisor.
We show the end-to-end fuzzing setup of HyperFuzzer in Fig-
ure 1. HyperFuzzer begins with a set of fuzzing inputs. Each fuzzing
input is a complete VM state including the VM’s registers and entire
memory. This allows HyperFuzzer to mutate both the instruction to
be executed by the VM and the architectural environment in which
the instruction is executed (e.g., the interrupt descriptor table, the
segment attributes, the page tables). Instead of taking a snapshot of
a traditional VM, we construct the seed fuzzing inputs from scratch
for two reasons. First, this allows us to make a VM’s state as small as
a few hundred bytes by only including data required architecturally.
The small size of the fuzzing inputs is important for HyperFuzzer’s
efficiency. Second, it allows us to construct an uncommon but archi-
tecturally valid VM state against the hypervisor. Such a VM state
may not be reached by a traditional operating system.
HyperFuzzer runs its fuzzing loop in the management VM of
Hyper-V (also known as the root partition [41]). For each fuzzing
input, HyperFuzzer creates a dedicated testing VM and resumes its
execution from the state specified in the input. The VM will trigger
some virtual CPU execution. HyperFuzzer then halts the VM after
its first trap into the hypervisor. During this process, HyperFuzzer
leverages efficient hardware tracing, such as Intel PT [32, Chap. 35],
to record the control flow of the virtual CPU’s execution during
the first trap.
For coverage-guided fuzzing, HyperFuzzer derives the hyper-
visor branch coverage from the recorded control flow, and feeds
the information to a coverage-guided fuzzer such as AFL [1]. The
coverage-guided fuzzer will maintain a list of interesting VM states
that have triggered new code coverage, and repeatedly apply ran-
dom mutations to them.
For whitebox fuzzing, HyperFuzzer marks the entire VM state
as symbolic, and performs Nimble Symbolic Execution (NSE) based
on the recorded control flow and the fuzzing input. NSE iterates
over the recorded instruction sequence, detects the hypervisor’s
accesses to the symbolic VM state, tracks the path constraints for
input-dependent conditional branches, and generates new inputs
by solving the negated constraints to flip these branches. The key
challenge for NSE is to perform these steps with only the recorded
control flow (i.e., no register or memory values are recorded).
4 DESIGN
In this section, we present the design of HyperFuzzer by focusing
on how it enables efficient dynamic symbolic execution for virtual
CPUs in the hypervisor. We first describe the fuzzing setup of Hy-
perFuzzer that enables hypervisor-only symbolic execution. Then
we present how it performs symbolic execution based on only the
control flow and the fuzzing input.
4.1 Fuzzing Setup
In HyperFuzzer, we use the complete VM state as the fuzzing input.
In general, a guest VM runs most of its instructions natively on the
Figure 1: Overview of HyperFuzzer’s design.
This particular virtual CPU bug is triggered when the guest VM
is in the following state. It runs in the 16-bit protected kernel mode
with paging disabled and attempts to execute an instruction from
the memory-mapped I/O region of the Advanced Programmable
Interrupt Controller (APIC), which is mapped at the physical ad-
dress 0xFEE00000 on x86. The hypervisor traps all the guest’s APIC
accesses for emulation. In this case, the hypervisor detects that the
guest VM runs in the 16-bit mode, so it truncates the guest’s in-
struction pointer to the lower 16 bits. This causes the hypervisor to
erroneously emulate the guest’s instruction at the guest physical
address 0. This inconsistency crashes the hypervisor eventually.
The root cause of this bug is a misunderstanding of the architec-
tural difference between the 16-bit real mode and the 16-bit protected
mode on x86. While the effective address for data operands is 16-bit
for both modes, the instruction pointer is 16-bit in the former but
32-bit in the latter. Furthermore, this difference is not explicit in
Intel’s Software Developer Manual [32, Chapter 3]. The complexity
of the modern CPU architecture not only makes the virtual CPU
implementation error-prone, but also makes it difficult to find bugs
in its huge search space.