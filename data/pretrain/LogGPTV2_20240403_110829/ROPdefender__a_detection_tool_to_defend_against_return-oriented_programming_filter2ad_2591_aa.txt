title:ROPdefender: a detection tool to defend against return-oriented programming
attacks
author:Lucas Davi and
Ahmad-Reza Sadeghi and
Marcel Winandy
ROPdefender: A Detection Tool to Defend Against
Return-Oriented Programming Attacks
Lucas Davi†, Ahmad-Reza Sadeghi†, Marcel Winandy‡
†System Security Lab
Technische Universität Darmstadt
Darmstadt, Germany
‡Horst Görtz Institute for IT-Security
Ruhr-Universität Bochum
Bochum, Germany
ABSTRACT
Modern runtime attacks increasingly make use of the pow-
erful return-oriented programming (ROP) attack techniques
and principles such as recent attacks on Apple iPhone and
Acrobat products to name some. These attacks even work
under the presence of modern memory protection mecha-
nisms such as data execution prevention (DEP). In this pa-
per, we present our tool, ROPdefender , that dynamically de-
tects conventional ROP attacks (that are based on return in-
structions). In contrast to existing solutions, ROPdefender
can be immediately deployed by end-users, since it does not
rely on side information (e.g., source code or debugging in-
formation) which are rarely provided in practice. Currently,
our tool adds a runtime overhead of 2x which is comparable
to similar instrumentation-based tools.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
General Terms
Security
Keywords
return-oriented programming, detection, binary instrumen-
tation
1.
INTRODUCTION
Runtime attacks on software aim at subverting the execu-
tion ﬂow of a program by redirecting execution to malicious
code injected by the adversary. Typically, the control-ﬂow
of a program is subverted by exploiting memory vulnera-
bilities. Despite extensive research and many proposed so-
lutions in the last decades, such vulnerabilities (e.g., stack
overﬂow [4], heap overﬂow [5], integer overﬂow [6], format
string [27]) are still the main source of vulnerabilities in to-
day’s applications. Figure 1 shows that the number of buﬀer
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’11, March 22–24, 2011, Hong Kong, China.
Copyright 2011 ACM 978-1-4503-0564-8/11/03 ...$10.00.
overﬂow vulnerabilities (according to the NIST1 Vulnerabil-
ity database) continues to range from 600 to 700 per year.
Operating systems and processor manufactures provide
solutions to mitigate these kinds of attacks through the
W ⊕ X (Writable XOR Executable) security model [49, 43],
which prevents an adversary from executing malicious code
by marking a memory page either writable or executable.
Current Windows versions (such as Windows XP, Vista, or
Windows 7) enable W ⊕ X (named data execution preven-
tion (DEP) [43] in the Windows world) by default.
Return-oriented Programming.
Return-oriented programming (ROP) attacks [53], bypass
the W ⊕ X model by using only code already residing in
the process’s memory space. The adversary combines short
instruction sequences from diﬀerent locations in memory,
whereas each sequence ends with a return instruction that
enables the chained execution of multiple instruction se-
quences. The ROP attack method has been shown to be
Turing-complete and its applicability has been demonstrated
on a broad range of architectures: x86 [53], Atmel AVR [24],
SPARC [8], ARM [38], Z80 [12], and PowerPC [41].
ROP attacks are increasingly used in practice, in particu-
lar, the recent ROP-based attacks on well-established prod-
ucts such as Adobe Reader [36, 50], Adobe Flashplayer [3],
or Quicktime Player [28]. Moreover, ROP has been also
adapted to kernel exploits: Hund et al. [32] presented a
ROP-based rootkit for the Windows operating system which
bypasses kernel integrity protection mechanisms. ROP at-
tacks have been also launched on Apple iPhone to perform a
jailbreak [30] or to steal a user’s SMS database [35]. Finally,
tools have been developed enabling the automatic identiﬁ-
cation of instruction sequences and gadgets [32, 38, 22].
However, ROP can not bypass address space layout ran-
domization (ASLR), a well-known memory protection mech-
anism available for Linux [49] and Windows [31]. Basically,
ASLR randomizes the base addresses of memory and code
segments so that the adversary can no longer predict start
addresses of instruction sequences. However, recent attacks
show that ASLR is often vulnerable to information leakage
attacks [57, 52, 60] allowing adversaries to gain useful infor-
mation on the memory layout of the running process. This in
turn allows the adversary to calculate the start addresses of
the instruction sequences. Moreover, several ASLR instanti-
ations do not randomize all memory segments of a process,
or are unable to randomize several dynamic libraries, be-
1National Institute of Standards and Technology
Figure 1: Buﬀer overﬂow vulnerabilities from 2005 to 2009
cause these are not ASLR compatible. Hence, the adversary
still has a large enough code space to mount a ROP attack
as shown in [51, 39].
Existing Tools and Countermeasures.
We already mentioned that ROP bypasses W ⊕X and can
be also applied to ALSR protected programs (e.g., [51, 39]).
On the other hand, there exists a large number of proposals
that aim to detect corruption of return addresses. These so-
lutions can be categorized in compiler -based solutions [19,
59, 15, 40, 48]; instrumentation-based solutions [37, 16, 1, 2,
29, 55]; and hardware-facilitated solutions [26, 25]. However,
as we discuss in detail in related work (Section 6), the exist-
ing solutions suﬀer from various shortcomings and practical
deﬁciencies: They either cannot provide complete detection
of ROP attacks [16, 29, 37], or require side information such
as debugging information [1, 2] or source code [19, 59, 15, 40,
48], which are rarely provided in practice. Moreover, many
of the instrumentation-based tools suﬀer from false positives
because they do not handle exceptional cases such as C++
exceptions, Unix signals, or lazy binding. Finally, compiler-
based solutions are from end-user’s perspective not always
suﬃcient, because they will only be eﬀective if all software
vendors really employ these compilers. However, in practice,
software vendors often focus on performance rather than on
security, and thus, many applications still suﬀer from various
memory errors (see Figure 1) allowing ROP attacks.
Our Contributions.
We present the design and implementation of ROPde-
fender , a practical tool that enforces return address protec-
tion to detect ROP attacks. We improve existing proposals
by detecting unintended return instructions issued in a ROP
attack without requiring any side information. Our tool is
built on top of the Pin framework [42], which provides just-
in-time (jit) binary instrumentation. Pin is typically used for
program analysis such as performance evaluation and proﬁl-
ing2. However, we developed a new Pintool, ROPdefender ,
that enforces return address checks at runtime. One of our
main design goals was to create a practical tool that can
be used without the need to change hardware. Hence, we
aimed to adopt already existing techniques such as shadow
stack [15, 59, 26] for return addresses, and the concept of
binary instrumentation as used in taint tracking [47, 17] or
return address protection [29, 16, 37].
In particular, our
contributions are:
2Moreover, it has been used in [61] for a checksum-aware
fuzzing tool and in [17] as dynamic taint analysis system.
• Defense technique: ROPdefender detects sophis-
ticated ROP attacks (based on return instructions)
without requiring speciﬁc side information. As proof
of concept we show in Section 5.2 that ROPdefender
detects recent ROP-based exploits in Adobe Reader.
• Flexibility and interoperability: ROPdefender can
be applied to complex multi-threaded applications such
as Adobe Reader or Mozilla Firefox. It can be deployed
on Windows and Linux for Intel x86 based systems re-
quiring no new hardware features. As we will discuss in
Section 4, ROPdefender is able to handle a wide range
of exceptions which violate the calling convention.
• Performance: ROPdefender induces an overhead by
a factor of about 2x. In Section 5.1 we discuss that
comparable jit-based instrumentation tools add higher
or comparable performance overhead and discuss how
the performance of ROPdefender could be improved.
Our reference implementation of ROPdefender detects all
ROP attacks based on returns. Further, it detects any attack
that is based on corrupting a return address, e.g., conven-
tional stack smashing [4] or return-into-libc [56]. Lastly, it
should be mentioned that our current implementation does
not detect the recent ROP attack [11] which uses indirect
jumps rather than returns. We will discuss in Section 5.3
how such ROP attacks can be addressed in the future.
Outline.
The remainder of this paper is organized as follows. Sec-
tion 2 provides an overview to ROP attacks. We present the
main idea of our approach and the architecture of ROPde-
fender in Section 3. We describe the details of our imple-
mentation in Section 4 and evaluate its performance and
security in Section 5. We discuss related work in Section 6
and conclude the paper in Section 7.
2. BACKGROUND
Return-oriented programming (ROP) is basically a gen-
eralization of return-into-libc [56, 44] attacks. It allows an
adversary to induce arbitrary program behavior without in-
jecting any malicious code. Rather than returning to func-
tions in libc, ROP returns to short instruction sequences
each terminating in a return instruction. The return in-
struction ensures that one sequence is executed after the
other: It pops the address of the subsequent instruction se-
quence from the stack and transfers control to it. Multiple
instruction sequences can be combined to a gadget which
represents a particular atomic task (e.g., load, store, add,
20052006200720082009050100150200250300350400340224255903910714129023023266961261121289510915216118815262428Other Buffer Overflows (not             further specified)Stack OverflowInteger OverflowHeap OverflowFormat StringNumber of VulnerabilitiesConsider for instance the following x86 code with the given
intended instruction sequence:
b8 13 00 00 00
f f
e9 c3 f 8 f f
mov $0x13 ,% eax
jmp 3 a a e 9
If the interpretation of the byte stream starts two bytes
later, the following unintended instruction sequence would
be executed by an Intel x86 processor:
00 00
00 e9
c3
add %a l ,(% eax )
add %ch ,% c l
r e t
In particular, solutions only securing returns in function epi-
logues are not able to detect ROP attacks that are based on
these sequences. We will describe in the next section how to
instantiate a ROP attack that is only based on unintended
instruction sequences.
2.2 Why Protecting Returns in Function Epi-
logues Does Not Help
There exists several compiler and instrumentation-based
solutions that aim to detect return address attacks [15, 26,
59, 16, 29, 55]. The main idea of these proposals is to
keep copies of return addresses in a dedicated memory area,
referred to as shadow stack. Upon function return, they
check if the return address has been modiﬁed. We show in
the following that countermeasures (integrated in compilers
or based on instrumentation techniques) checking only in-
tended returns can not prevent ROP attacks that are based
on unintended instruction sequences.
As mentioned in Section 2.1, the ﬁrst steps of a ROP
attack include: (Step 2) moving the stack pointer (SP) to
the ﬁrst return address and (Step 3) redirecting execution
to the ﬁrst instruction sequence, i.e., changing the instruc-
tion pointer (IP) to the ﬁrst instruction of instruction se-
quence 1. However, return address checkers like [15, 26, 59,
16, 29] can prevent the ROP attack if these two steps are
performed by overwriting the return address of a vulnera-
ble function, because these tools perform a return address
check in the function epilogue. In order to avoid detection
by such countermeasures, these two steps have to performed
without using a return instruction in an intended function
epilogue. Further, the instruction sequences executed must
be unintended to bypass checks for intended return instruc-
tions. Unintended sequences can be often found on Intel x86
as shown in [53].3
There exists several attack techniques for gaining control
over SP (Step 2) and IP (Step 3) without using intended re-
turns. For instance, the well-known vulnerabilities such as
heap overﬂows [5], integer overﬂows [6] or format strings [27]
allow an adversary to write arbitrary integer values into a
program’s memory space.
Instead of overwriting a return
address, the adversary could overwrite pointers, e.g., func-
tion pointers or entries of the Global Oﬀset Table (GOT)4.
If an adversary overwrites such a pointer, and the pointer is
used as a jump target afterwards, the execution will be redi-
rected to code of the adversary’s choice. Hence, such pointer
manipulations allow an adversary to take control over IP.
However, the adversary has also to ensure that SP points
to return address 1. In general, this can be performed by a
3The instruction sequence search algorithm (GALILEO)
proposed in [53] avoids intended function epilogues.
4In Unix-based systems the GOT holds absolute virtual ad-
dresses to library functions.
Figure 2: A general ROP attack
etc.). The attack technique is considered Turing-complete,
if the adversary is able to construct gadgets for all basic
operations: memory operations, arithmetic and logical op-