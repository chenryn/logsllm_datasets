title:Secret Handshakes from Pairing-Based Key Agreements
author:Dirk Balfanz and
Glenn Durfee and
Narendar Shankar and
Diana K. Smetters and
Jessica Staddon and
Hao-Chi Wong
Secret Handshakes from Pairing-Based Key Agreements
∗2,
Dirk Balfanz1, Glenn Durfee1, Narendar Shankar
Diana Smetters1, Jessica Staddon1, Hao-Chi Wong1
1 Palo Alto Research Center
3333 Coyote Hill Road
Palo Alto, CA 94304
{balfanz, gdurfee, smetters, staddon, hcwong}@parc.com
2 University of Maryland
A. V. Williams Building
College Park, MD 20742
PI:EMAIL
Abstract
Consider a CIA agent who wants to authenticate herself
to a server, but does not want to reveal her CIA credentials
unless the server is a genuine CIA outlet. Consider also that
the CIA server does not want to reveal its CIA credentials
to anyone but CIA agents – not even to other CIA servers.
In this paper we ﬁrst show how pairing-based cryptog-
raphy can be used to implement such secret handshakes.
We then propose a formal deﬁnition for secure secret hand-
shakes, and prove that our pairing-based schemes are se-
cure under the Bilinear Difﬁe-Hellman assumption. Our
protocols support role-based group membership authenti-
cation, traceability, indistinguishability to eavesdroppers,
unbounded collusion resistance, and forward repudiability.
Our secret-handshake scheme can be implemented as a
TLS cipher suite. We report on the performance of our pre-
liminary Java implementation.
1. Introduction
The folklore of exclusive societies or groups includes
the notion of a secret handshake whose purpose is to al-
low members of the group to identify each other. Secret
handshakes guarantee the following: 1) non-members can-
not recognize the handshake, and therefore are not able to
recognize group members; and 2) non-members can’t per-
form the handshake and therefore are unable to fool group
members into thinking they are also members.
In this paper, we propose a scheme that can be used by
members of a group to authenticate each other with the
same guarantees as a secret handshake. Moreover, group
members can play different roles within a group, and can
∗
This work was done while visiting the Palo Alto Research Center.
if G1 does not equal G2;
authenticate themselves in these roles. For example, if the
group is a secret society with different membership levels
(novice, grand master, etc), then not only is group member-
ship authenticated, but the membership level (role) of the
other party is as well. Thus, if party A is a member of group
G1 and has the role rA, and B is a member of group G2 with
role rB, our scheme is such that, after a handshake between
A and B,
• Neither A nor B learns anything about the other party
• Both A and B learn their respective group memberships
only if G1 equals G2 (i.e., if they are, in fact, members
of the same group);
• A can choose to only authenticate to members with cer-
tain roles. For example, A can decide not to reveal
anything about itself unless B is a member of the same
group as A, and has role rB. The same is true for B.
• A third party observing the exchange between A and
B does not learn anything (including whether A and B
belong to the same group, the speciﬁc identities of the
groups, or the roles of either A or B).
Our scheme can also provide traceability (if an adversary
breaches the scheme by corrupting a true member, or a set
of members, then that member will be traceable), forward
repudiability (a successful handshake interaction between
two members U1 and U2 does not give either of them the
ability to prove the membership of the other to a third party),
and collusion resistance (the system remains secure even if
collections of users pool their secrets in an attempt to under-
mine the system). However, unlike a physical handshake,
our scheme is asymmetric, and fairness cannot be guaran-
teed.
Our scheme is a simple adaptation of the non-interactive
key agreement scheme of Sakai, Ohgishi and Kasahara [27],
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
and its security rests on the hardness of the bilinear Difﬁe-
Hellman problem (see, for example, [6]). In addition to pre-
senting the scheme, we offer a formal notion of secure se-
cret handshakes, and prove that our construction satisﬁes
the formal deﬁnition of security. Both the deﬁnition of se-
cure secret handshakes and the analysis that our scheme sat-
isﬁes it are novel, and constitute the core of our contribu-
tions.
Secret handshakes can be used to securely discover ser-
vices that are restricted to authorized users. For example, if
an “air marshal service” is deployed at an airport, secret
handshakes can be used to ensure that only air marshals
can discover and use that service. Likewise, other service
providers (like weather forecasters or commercial service
providers) can be prevented from learning of the presence
of air marshals through the use of secret handshakes.
Secret handshakes can also be used for privacy-
preserving authentication. Unlike other solutions (e.g., [8]),
the use of secret handshakes does not require users to blind,
or withhold, part of their credentials in order to achieve pri-
vacy.
Instead, users can present all their credentials, and
rest assured that the receiving party will not learn anything
about credentials that were issued by a different group.
The ability of our scheme to handle different roles
within a group has practical applications. For example,
while a pro-democracy movement may have a ﬂat organi-
zation (every member is a peer), and members authenticate
each other simply as “member-of-the-movement”, in some
groups members play different roles. In a group that im-
plements the trafﬁc-regulating arm of the government, two
roles are clearly needed: “trafﬁc cop” and “vehicle opera-
tor”. A vehicle operator should be able to authenticate to a
legitimate trafﬁc cop if and only if the operator is certiﬁed
to operate a vehicle. If, however, an impostor is posing as
a trafﬁc cop then he will be unable to verify the driver’s li-
cense of the other party, (even if the impostor is a certiﬁed
vehicle operator).
This paper is organized as follows. We start off dis-
cussing, and contrasting secret handshakes with, related
work. We then run through an extensive example that ex-
plains how our scheme works. In Section 4 we give a more
detailed treatment of our scheme – we introduce the notion
of a secret handshake, explain what it means for a secret
handshake to be secure, and show that indeed our scheme
implements a secure secret handshake. Our implementation
experience is discussed in Section 6. We conclude with a
discussion of practical issues in Section 7.
2. Related Work
Secret handshakes require a mechanism for group-based
authentication. That is, users must only be able to authen-
ticate themselves as members of a group to other members
of the group. In addition, handshakes can be performed in
a privacy-preserving manner, meaning that as a result of
the handshake each user only learns that the other party
is a member of the group, not the party’s identity. The
group membership detection problem has been studied in
a variety of settings that overlap partially, but not com-
pletely, with ours. In the following we describe a number
of these works and explain why they don’t solve the secret-
handshake problem.
KEY AGREEMENT/EXCHANGE. We use the novel key
agreement protocol of Sakai, Ohgishi and Kasahara [27] to
build a new tool:
the secret handshake. This key agree-
ment protocol is used in [24] to accomplish authenticated
identity-based encryption in a simpler setting than the one
we consider (i.e., there is no notion of roles or groups). In
our scheme, completing the secret handshake is essentially
equivalent to computing a key that is particular to the two
interacting group members. Hence, the secret handshake
changes according to the group members involved. This
gives us the opportunity to ensure collusion resistance: a
coalition of corrupted groups members should not be able
to perform the handshakes of group members outside the
coalition. Requiring collusion resistance means that some
care must be used if a key agreement protocol forms the
foundation of a handshaking scheme. For example, such
collusion resistance is not even an option with a shared
group key. Further, a scheme based on shared group keys
has the additional disadvantages of untraceable key leaks,
rekeying upon every member revocation and no role capa-
bility. The Two-party Difﬁe-Hellman [17] key agreement
scheme provides pair-speciﬁc handshakes but no collusion
resistance (for details on this point see Section 5.3). In fact,
the goals of key agreement protocols do not include group-
based authentication, so as a class such protocols don’t ﬁt
our needs. We use the Sakai et al. scheme because it is se-
cure against colluding sets of users of unbounded size pro-
vided the discrete log problem is hard.
The standardized key exchange scheme IKE [20] in
its identity protection mode uses unauthenticated Difﬁe-
Hellman key agreements to hide the identities of the par-
ticipants from eavesdroppers. It does not, however, provide
identity protection from active attackers. Similarly, [1] pro-
vides protection against eavesdroppers but doesn’t preserve
the privacy of the communicating parties.
ANONYMOUS CREDENTIALS. When group membership
is proven via credentials obtained from a central authority,
anonymity can still be achieved. For example, if a restric-
tive blind signature issuing protocol [8] or self-blinding cer-
tiﬁcates [29] are used, the amount of identifying informa-
tion that is revealed can be limited by blinding parts of the
certiﬁcate. In addition, Chaum’s [13] pseudonym systems
(see also [25, 10]) allow users to prove membership via cer-
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
tiﬁcates issued under unlinkable pseudonyms. In either of
these approaches there is an untraceable key that can be
used by anyone to verify membership. Although public ver-
iﬁability is a useful attribute that’s quite difﬁcult to achieve,
it is not appropriate for secret handshakes. Even though our
system makes use of pseudonyms, veriﬁcation is only pos-
sible by group members because it relies on unique, secret
information (i.e., the secret handshake).
SIGNATURES. There are a variety of techniques that al-
low users to generate signatures with anonymity. For ex-
ample, signatures generated with a group signature scheme
[14, 11, 18, 9] only allow the veriﬁer to determine the sig-
nature was generated by someone in the group.
Identity
escrow schemes [23] are essentially equivalent. Ring signa-
tures [26] provide group signatures for ad hoc groups. Both
techniques are inappropriate for secret handshakes for the
same reason as anonymous credentials, namely, anyone can
verify the signatures. This is somewhat remedied by des-
ignated veriﬁer signatures [22]. With a designated veriﬁer
scheme the signer can generate signatures that are only ver-
iﬁable by a set of users of the signer’s choosing. However,
when designating the set it is necessary to know the public
keys of the members of the set, hence such schemes aren’t
immediately applicable to the secret-handshake setting in
which users are relying on the handshakes themselves to
discover group members. Finally, although our handshake
schemes build on previous work in identity-based cryptog-
raphy, identity-based signatures (see, for example [28, 12])
aren’t appropriate here because they aren’t intended to re-
strict veriﬁcation to group members.
MATCHMAKING. The setting of private matchmaking [30]
is similar to ours in that the goal is to allow members of the
same group to authenticate each other. However, it’s quite
possible that non-members will be able to identify mem-
bers. For example, in the schemes in [30] any user may
search for air marshals by generating the key corresponding
to the term “air marshals”.
ACCUMULATORS. A group of users who wish to recog-
nize each other without the use of membership lists or a
central authority may choose to form an object called an ac-
cumulator and witnesses for each user in the accumulator
[5, 2, 19, 10]. To authenticate each other, two users ex-
change witnesses and perform operations that result in the
original accumulator if indeed they are both members. Al-
though accumulators can be used to achieve anonymous au-
thentication they are ill-suited to the secret-handshake prob-
lem for the following reasons. First, the accumulator is
an untraceable object that can be used to verify (but not
prove) membership. We require that membership can only
be proven to other group members. Second, adjustments to
both the accumulator and the witnesses are necessary when
members leave the group. We present a scheme in which
both proofs and veriﬁcations of membership require trace-
able keys and no modiﬁcation of existing keys is needed
when membership changes.
Finally, we note that we provide traitor tracing in the
sense of [15]. That is, if an adversary uses a compromised
user’s keys to engage in handshakes the adversary is not au-
thorized to perform, it is possible to trace the identity of the
compromised user by examining the handshake transcripts.
3. An Example
3.1. Preliminaries
Pairing-based cryptography is ﬁnding an ever-expanding
ﬁeld of applications, ranging from identity-based encryp-
tion [6], to signature schemes [21, 7], to key agreements
[27]. In this paper, we use pairing-based cryptography to
perform secret handshakes.
Before we give an example of our protocol, we remind
the reader that pairing-based cryptography is based on bi-
linear maps over groups of large prime order. For example,
if G1 and G2 are two cyclic groups of some large prime or-
der q, then ˆe : G1× G1 −→ G2 is called a bilinear map if for
all a, b ∈ Zq, P, Q ∈ G1 we have ˆe(aP, bQ) = ˆe(P, Q)ab.
Modiﬁed Weil and Tate pairings on supersingular ellip-
tic curves are examples of such bilinear maps that are efﬁ-
ciently computable, non-degenerate,1 and for which the Bi-
linear Difﬁe-Hellman Problem is assumed to be hard, i.e.,
it is assumed that, given P, aP, bP, cP for random a, b, c ∈ Zq
and P ∈ G1, it is hard to compute ˆe(P, P)abc. Armed with
such a particular map ˆe and a hash function H1 : {0,1}∗ →
G1 that maps from arbitrary strings to points in G1, we can
now describe our secret handshake protocols by way of an
example.
3.2. Protocol Sketch
Let’s consider a user Alice who lives in a country with
a questionable human-rights record. The ministry of trans-
portation in that country possesses a master secret t ∈ Zq,
and issues driver’s licenses to all drivers who have passed
the driving test. For Alice, this license comes in the way of
a pseudonym and a secret point TA in G1. Let’s say Alice’s
driver’s license looks like this:
(“p65748392a”, TA)
where TA = tH1(“p65748392a-driver”). Alice can show
her pseudonym to anyone, but keeps her secret point secret.
The ministry for transportation also issues credentials for
trafﬁc cops. Bob is such a trafﬁc cop, and this is his trafﬁc
1i.e., ˆe(P, Q) does not map to the identity for all P and Q
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
cop credential:
(“xy6542678d”, TB)
where TB = tH1(“xy6542678d-cop”).
Alice is on her way to a secret meeting of a pro-
democracy movement of which she is a member. Since she
is late, she is speeding on the highway and gets pulled over
by Bob. Bob demands to see Alice’s driver’s license. Alice
wants to make sure that Bob is a real cop, and not an im-
postor. She therefore asks him for his pseudonym, which
he sends to her:
“xy6542678d”
−−−−−−−−→ Alice
Bob
Alice, in return, sends her pseudonym to Bob:
“p65748392a”
−−−−−−−−→ Bob
Alice
Now, Alice generates a session key KA by calculating
KA = ˆe(H1(“xy6542678d-cop”), TA)
By calculating the session key this way, Alice makes sure
that she will only end up communicating with Bob if he is a
real cop. Bob also calculates a session key KB by calculating
KB = ˆe(TB, H1(“p65748392a-driver”))
A simple calculation, using the bilinear properties of ˆe,
shows that these two session keys are, in fact, the same.
Once Alice notices that she can communicate with Bob us-
ing her session key, she will be convinced that Bob is in-
deed a cop. Bob, on the other hand, will have learned that
Alice is a legitimate vehicle operator. Note that an impos-
tor Igor in Bob’s stead might have sent his own pseudonym,