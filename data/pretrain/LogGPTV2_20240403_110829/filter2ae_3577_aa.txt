本文是[Windows Exploitation Tricks: Arbitrary Directory Creation to Arbitrary
File Read](https://googleprojectzero.blogspot.com/2017/08/windows-exploitation-tricks-arbitrary.html)的翻译文章。
# 前言
在过去的几个月里，我一直在几个会议上展示我的“Windows逻辑提权研讨会简介”。由于在限制的2小时内没能完成最后一步，我想一些有趣的提示和技巧会被删减掉。因此，不太可能会在近期出完整的培训课程了。但我会把一系列不规则的文章整理在一起。如果您在Windows中发现类似的安全漏洞，可以使用自包含的利用技巧。
在这篇文章中，我将介绍一种从任意目录创建漏洞到任意文件读取的技术。 任意目录创建漏洞确实存在 -例如，这是Linux子系统中存在的[漏洞](https://bugs.chromium.org/p/project-zero/issues/detail?id=891) \- 但是，如果将DLL丢弃到某个地方，任意文件创建的对比并不明显。
你可以利用[DLL重定向支持](https://docs.microsoft.com/zh-cn/windows/desktop/Dlls/dynamic-link-library-redirection)，创建一个目录调用program.exe.local进行DLL劫持，但这并不可靠，因为你只能重定向不在同一目录下的DLL（如System32）和那些通常会通过并排加载的DLL。
在这篇博客中，我们将使用我在[Workshop](https://github.com/tyranid/windows-logical-eop-workshop)中的示例驱动程序，该驱动程序包含易受攻击的目录创建bug，然后编写一个Powershell脚本来使用我的[NtObjectManager](https://www.powershellgallery.com/packages/NtObjectManager/1.0.7)模块来利用它。
我将要解释的技术不是漏洞，但如果你有单独的目录创建bug，也可以使用它。
# 漏洞类
处理来自Win32 API的文件时，你有两个函数，[CreateFile](https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858\(v=vs.85).aspx)和[CreateDirectory](https://docs.microsoft.com/zh-cn/windows/desktop/api/fileapi/nf-fileapi-createdirectorya)。 分离这两个操作是有道理的。
但是在Native API级别只有[ZwCreateFile](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/ntifs/nf-ntifs-ntcreatefile)，内核分离文件和目录的方式是在调用ZwCreateFile时将`FILE_DIRECTORY_FILE`或`FILE_NON_DIRECTORY_FILE`传递给CreateOptions参数。
至于为什么系统调用是用于创建文件，而标志被命名为if目录是主要文件类型我不知道。  
漏洞示例如下所示：
    NTSTATUS KernelCreateDirectory(PHANDLE Handle, 
                                   PUNICODE_STRING Path) {
      IO_STATUS_BLOCK io_status = { 0 };
      OBJECT_ATTRIBUTES obj_attr = { 0 };
      InitializeObjectAttributes(&obj_attr, Path, 
         OBJ_CASE_INSENSITIVE | OBJ_KERNEL_HANDLE);
      return ZwCreateFile(Handle, MAXIMUM_ALLOWED, 
                          &obj_attr, &io_status,
                          NULL, FILE_ATTRIBUTE_NORMAL,
                         FILE_SHARE_READ | FILE_SHARE_DELETE,
                         FILE_OPEN_IF, FILE_DIRECTORY_FILE, NULL, 0);
    }
关于此代码有三个重要事项需要注意，以确定它是否是易受攻击的目录创建漏洞。  
首先，它将`FILE_DIRECTORY_FILE`传递给`CreateOptions`，这意味着它将创建一个目录。  
其次，它作为Disposition参数`FILE_OPEN_IF`传递。 这意味着如果目录不存在，将创建目录，如果存在，则打开目录。  
第三，也许最重要的是，驱动程序正在调用Zw函数，这意味着创建目录的调用将默认使用内核权限运行，这会禁用所有访问检查。
防止这种情况的方法是在`OBJECT_ATTRIBUTES`中传递`OBJ_FORCE_ACCESS_CHECK`属性标志，但是我们可以看到传递给InitializeObjectAttributes的标志在这种情况下没有设置标志。
仅从这段代码中我们得不到目标路径的来源，它可以来自用户，也可以被修复。 只要此代码在当前进程的上下文中运行（或冒充您的用户帐户），这并不重要。
为什么在当前用户的上下文中运行如此重要？ 它确保在创建目录时，该资源的所有者是当前用户，这意味着你可以修改安全描述符以授予你对该目录的完全访问权限。
在许多情况下，即使这样也不是必需的，因为许多系统目录都有一个CREATOR OWNER访问控制条目，可确保所有者立即获得完全访问权限。
# 创建任意目录
如果你想跟着本文进行实验，首先需要设置一个Windows 10
VM（无论是32位还是64位），并参考我的Workshop驱动程序的[zip](https://github.com/tyranid/windows-logical-eop-workshop/releases/download/BSIDES-LON-2017/release-20170606.zip)中setup.txt的详细信息。 然后安装[NtObjectManager
Powershell](https://github.com/google/sandbox-attacksurface-analysis-tools/tree/master/NtObjectManager)模块。 它可以在Powershell
Gallery上找到，这是一个在线模块库，所以请按照那里的[详细信息](https://www.powershellgallery.com/packages/NtObjectManager/1.0.7)。
假设一切都完成了，让我们开始工作吧。首先看看如何在驱动程序中调用易受攻击的代码。驱动程序向用户公开名为`\Device\WorkshopDriver`的设备对象（我们可以在[源代码](https://github.com/tyranid/windows-logical-eop-workshop/blob/05f84282cb3b34d398ada0c653e5a0040b68fefe/LogicalEoPWorkshopDriver/driver.c#L168)中看到设置）。
然后，通过向设备对象发送设备IO Control请求来执行所有“漏洞”。 IO
Control处理的代码在[device_control.c](https://github.com/tyranid/windows-logical-eop-workshop/blob/05f84282cb3b34d398ada0c653e5a0040b68fefe/LogicalEoPWorkshopDriver/device_control.c)中，我们对[调度](https://github.com/tyranid/windows-logical-eop-workshop/blob/05f84282cb3b34d398ada0c653e5a0040b68fefe/LogicalEoPWorkshopDriver/device_control.c#L282)特别感兴趣。
代码ControlCreateDir是我们正在寻找的代码，它接收来自用户的输入数据，并将其用作未经检查的UNICODE_STRING传递给代码来创建目录。
如果我们查找代码来创建IOCTL编号，会发现ControlCreateDir是2，所以我们使用以下PS代码创建一个任意目录。
    Import-Module NtObjectManager
    # Get an IOCTL for the workshop driver.
    function Get-DriverIoCtl {
        Param([int]$ControlCode)
        [NtApiDotNet.NtIoControlCode]::new("Unknown",`
            0x800 -bor $ControlCode, "Buffered", "Any")
    }
    function New-Directory {
      Param([string]$Filename)
      # Open the device driver.
      Use-NtObject($file = Get-NtFile \Device\WorkshopDriver) {
        # Get IOCTL for ControlCreateDir (2)
        $ioctl = Get-DriverIoCtl -ControlCode 2
        # Convert DOS filename to NT
        $nt_filename = [NtApiDotNet.NtFileUtils]::DosFileNameToNt($Filename)
        $bytes = [Text.Encoding]::Unicode.GetBytes($nt_filename)
        $file.DeviceIoControl($ioctl, $bytes, 0) | Out-Null
      }
    }
New-Directory函数会先打开设备对象，将路径转换为本机NT格式作为字节数组，并在设备上调用DeviceIoControl函数。
我们可以为控制代码传递一个整数值，但是我写的NT API库有一个NtIoControlCode类来为你打包值。
让我们试一试，看看它是否可以创建目录c:\windows\abc。  
可以看到，我们成功地创建任意目录。 这只是为了检查我们使用Get-Acl来获取目录的安全描述符，我们可以看到所有者是“user”帐户，这意味着可以获得对该目录的完全访问权限。
现在的问题是如何处理这种能力？ 毫无疑问，某些系统服务可能会在目录列表中查找要运行的可执行文件或要解析的配置文件。 但是不要依赖这样的东西会很好。
正如标题建议我们将其转换为任意文件读取，但我们要怎么做呢？
# 利用挂载点
如果你看过我关于利用Windows符号链接的讨论，你就会知道NTFS挂载点（或者有时候是Junction）是如何工作的。
`$ REPARSE_POINT
NTFS`属性与NTFS驱动程序在打开目录时读取的目录一起存储。该属性包含到符号链接目标的备用本机NT对象管理器路径，该路径将传递回IO管理器以继续处理。
这允许挂载点在不同的卷之间工作，但它确实有一个有趣的结果。 具体来说，路径不必实际指向另一个目录，那如果我们给它一个文件路径怎么办？
如果你使用Win32 API，会失败，如果你直接使用NT apis，你会发现你最终陷入了一个奇怪的悖论。
如果你尝试将挂载点作为文件打开，则错误将表明它是一个目录，如果您尝试打开它作为目录，它又会告诉你，这实际上是一个文件。
如果未指定`FILE_DIRECTORY_FILE`或`FILE_NON_DIRECTORY_FILE`，那么NTFS驱动程序将通过其检查，并且挂载点实际上可以重定向到文件。  
也许我们可以找到一些系统服务，它将打开我们的文件而没有任何这些标志（如果你将FILE_FLAG_BACKUP_SEMANTICS传递给CreateFile，这也将删除所有标志）并在理想情况下获取服务以读取和返回文件数据？
# 国际语言支持
Windows支持许多不同的语言，并且为了支持非unicode编码，仍然支持代码页。
很多都是通过国际语言支持（NLS）库公开的，你可以假设这些库完全以用户模式运行，但是如果你看一下内核，你会发现一些系统调用来支持NLS。
本文最感兴趣的是`NtGetNlsSectionPtr`系统调用。
此系统调用将System32目录中的代码页文件映射到进程的内存，其中库可以访问代码页数据。
它还没完全清楚为什么它需要处于内核模式，也许只是让这些部分在同一台机器上的所有进程之间共享。 让我们看一下代码的简化版本：
    NTSTATUS NtGetNlsSectionPtr(DWORD NlsType, 
                                DWORD CodePage, 
                                PVOID *SectionPointer, 
                                PULONG SectionSize) {
      UNICODE_STRING section_name;
      OBJECT_ATTRIBUTES section_obj_attr;
      HANDLE section_handle;
      RtlpInitNlsSectionName(NlsType, CodePage, &section_name);
      InitializeObjectAttributes(&section_obj_attr, 
                                 &section_name, 
                                 OBJ_KERNEL_HANDLE | 
                                 OBJ_OPENIF | 
                                 OBJ_CASE_INSENSITIVE | 
                                 OBJ_PERMANENT);
      // Open section under \NLS directory.
      if (!NT_SUCCESS(ZwOpenSection(&section_handle, 