title:To Err.Is Human: Characterizing the Threat of Unintended URLs in Social
Media
author:Beliz Kaleli and
Brian Kondracki and
Manuel Egele and
Nick Nikiforakis and
Gianluca Stringhini
To Err.Is Human: Characterizing the Threat of
Unintended URLs in Social Media
Beliz Kaleli
Boston University
PI:EMAIL
Brian Kondracki
Stony Brook University
PI:EMAIL
Manuel Egele
Boston University
PI:EMAIL
Nick Nikiforakis
Stony Brook University
PI:EMAIL
Gianluca Stringhini
Boston University
PI:EMAIL
Abstract—To make their services more user friendly, online so-
cial media platforms automatically identify text that corresponds
to URLs and render it as clickable links. In this paper, we show
that the techniques used by such services to recognize URLs are
often too permissive and can result in unintended URLs being
displayed in social network messages. Among others, we show that
popular platforms (such as Twitter) will render text as a clickable
URL if a user forgets a space after a full stop at the end of a
sentence, and the ﬁrst word of the next sentence happens to be a
valid Top Level Domain. Attackers can take advantage of these
unintended URLs by registering the corresponding domains and
exposing millions of Twitter users to arbitrary malicious content.
To characterize the threat that unintended URLs pose to social
media users, we perform a large-scale study of unintended URLs
in tweets over a period of 7 months. By designing a classiﬁer
capable of differentiating between intended and unintended URLs
posted in tweets, we ﬁnd more than 26K unintended URLs posted
by accounts with tens of millions of followers. As part of our study,
we also register 45 unintended domains and quantify the trafﬁc
that attackers can get by merely registering the right domains
at the right time. Finally, due to the severity of our ﬁndings,
we propose a lightweight browser extension which can, on the
ﬂy, analyze the tweets that users compose and alert them of
potentially unintended URLs and raise a warning, allowing users
to ﬁx their mistake before the tweet is posted.
I.
INTRODUCTION
Social media platforms
like Twitter, Facebook, and
Linkedin are increasingly becoming the main way in which
people obtain news and communicate with the rest of the
world. Twitter, as one of the most popular of these platforms,
was shown to be able to shape political campaigns [29] and
even affect
the number of citations that academic papers
receive [23]. At the same time, the popularity of the platform
has made it the ideal target for a variety of malicious activities,
from spam [18], [25], [41], to online harassment [20], [32],
[38], [46], to misinformation [16], [39], [53]. In the most
recent high-proﬁle example (July 2020), a sophisticated tar-
geted attack showed the consequences that a compromise of
the platform can have, resulting in multiple popular accounts
posting links to a Bitcoin scam [7].
To improve the usability of their platforms, many online
social networks automatically recognize links as users type
Network and Distributed Systems Security (NDSS) Symposium 2021
21-25  February  2021, Virtual 
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24322
www.ndss-symposium.org
them and render them as clickable. For example, if Twitter
detects a URL in the text of a tweet,
that part will be
highlighted and users that have access to the tweet will be
able to visit the link by just clicking on it. If the target Web
page contains a so-called Twitter Card, a preview of the link
will also be added to the tweet [1].
In this paper, we identify a potential attack vector in the
way in which online social networks parse text and decide
which parts of it should be rendered as clickable URLs. We
show that it is not uncommon for social network users to
supply text that is not supposed to be rendered as a clickable
URL, yet the automated means by the social network platform
mistakenly render it as such. Figure 1 depicts three typical
examples of unintended URLs included in tweets. These
examples showcase how unintended URLs enable third parties
(well-meaning or malicious) to compromise the integrity of
Twitter messages and expose the followers of popular Twitter
accounts to arbitrary content. For example, when Rudy Giu-
liani (with 714.2K followers) tweeted the following on Novem-
ber 30, 2018: “[...] as the President left for
G-20.In July he indicted [...] [10],” the miss-
ing space between “G-20.” and “In” caused Twitter to
interpret that part of the sentence (g-20.in) as a URL (even
though that domain was not registered at the time) and made
that part clickable. The g-20.in domain was registered on
the same day and served content that was critical of Mr.
Giuliani and his policies.
We present the ﬁrst analysis of the threat of unintended
URLs on social media, with a particular focus on Twitter. We
start by presenting a threat model detailing how unintended
URLs can result from user posts which pose a threat to anyone
who has access to these posts. As part of this process, we
evaluate nine popular social media platforms and instant mes-
saging applications (including Twitter, Facebook, LinkedIn,
and Slack) to understand their behavior and identify the logic
that they follow for expanding text into clickable URLs.
To characterize the threat of unintended URLs in the wild,
we perform a large-scale measurement study on Twitter where
we analyze public tweets from the 1% streaming API posted
between January 2020 and July 2020, in search of unintended
URLs. By manually analyzing tweets that include URLs, we
build a ground truth dataset of intended and unintended URLs
which we use to train a machine learning model that can
differentiate between these two classes with 94% accuracy.
We use this model to set up a pipeline that automatically
identiﬁes unintended URLs; over a period of 7 months, our
pipeline identiﬁed 26,596 unintended URLs. In parallel to
• We conduct a large-scale analysis of unintended URL
websites using an automated data-collection infras-
tructure. By registering 45 domains that appear as un-
intended URLs on Twitter, we ﬁnd that these domains
receive spikes in trafﬁc after a tweet is published. We
also discover malicious content present on unintended
URL websites.
• We build a Chrome extension for Twitter as a counter-
measure to the problem at hand that can preemptively
predict unintended URLs in tweets and warns the
author.
II. MOTIVATION AND BACKGROUND
In this section, we ﬁrst present background information
on the DNS system and then deﬁne unintended URLs. Next,
we report on a number of experiments that we conducted to
understand how different online services identify and render
links. We then provide a rationale for why we focus on Twitter
in this paper and provide background information about the
platform. Finally, we present a threat model illustrating how an
adversary could exploit unintended URLs for malicious gain.
A. Top Level Domains (TLD)
A top level domain (TLD) is the domain at the highest level
in the hierarchical Domain Name System. The TLD is the last
label in a domain name, e.g., in “www.twitter.com,” the
com label is the TLD. ICANN controls generic TLDs such as
.com and .net whereas country-code TLDs (such as, .it
and .es) are controlled by institutions within their respective
countries. In this paper, we are mostly interested in the TLDs
that are also valid dictionary words, either by chance (such
as the article “it” also being the cc-TLD for Italy) or on
purpose (such as “online” which is also a recent generic
TLD available to the public).
B. Unintended URLs
In this paper, we consider an unintended URL as any string
that is typed by a user on an online service and is rendered
as a clickable link without the user intending it to be a URL.
To be interpreted as a URL by an online service, a string has
to contain at least two substrings, a dot and no spaces. In
particular, the last substring needs to be a TLD.
A common reason that causes unintended URLs to occur is
users making a typo [12] omitting a space after a dot at the end
of a sentence, where the ﬁrst word of the next sentence happens
to be a TLD. For example, consider the following text extracted
from a real tweet: “I will always support you.You always
support others.” Here the unintended URL is you.You and
it is converted to a clickable link by Twitter since “You” is
an actual TLD name.
A similar error made by users is forgetting a space after
a number when they are listing items. For example, in the
following tweet: “1.Team Leader - Outlet 2.Assistant Manager
- Outlet 3.Executive Housekeeper” the user forgot to put a
space for all
items. However, only “1.Team” is
converted to a URL since “Team” is a real TLD whereas
“Assistant” and “Executive” are not.
the list
Fig. 1: Examples of unintentional URLs posted by popular accounts
on Twitter. (Rudy Giuliani: 714.2K followers, Urban Dictionary:
300.1K followers, Kanye West: 30.6M followers.)
scanning the unintended URLs for evidence of abuse, we use
our model to register a total of 45 domains, within hours after
they were tweeted by popular accounts. Through this process,
we ﬁnd that unintended URLs receive an average of 103.65
visitors within one day of appearing in a tweet, with our most
popular URL receiving 755 visits. Our results demonstrate
the very real danger that unintended URLs pose to social
media and how opportunistic attackers can hijack the content
of social media posts, without compromising the user who
posted them. Finally, to help users defend against unintended
URLs, we implement our classiﬁer in a browser extension that
warns users whenever they type an unintended URL before
posting a tweet, allowing them to correct their mistake. We
will publicly release the source code of this browser extension
upon publication of this paper.
In summary, the contributions of this paper are as follows:
• We show that automatically rendering unintended
URLs can cause vulnerabilities in online services, and
present a threat model in which an adversary abuses
this phenomenon to launch various attacks on users
who click on those unintentional links.
• We identify characteristics of unintended URLs by
building a classiﬁer that predicts those URLs in col-
lected Twitter data and analyzing our results.
2
Another common way to cause an unintended URL is users
putting a dot between two words in the same sentence instead
of a space. Users sometimes use this method to emphasize
these words. For instance, we excerpted the following from a
real tweet: “Dont you know who.I.am?” The proper punctua-
tion would be to put spaces between the words “who,” “I” and
“am”. The author put dots instead of spaces and caused the
unintended URL, “who.I.am” to be rendered as clickable by
Twitter.
C. Understanding the Link Rendering Behavior of Online
Services
In an effort to make their platforms more user friendly,
online services automatically render the text that they identify
as a URL, as clickable links. The precise algorithm for rec-
ognizing URLs in the user-provided text is something internal
to each online service and, to the best of our knowledge, not
known to the public.
In this section, we aim to understand the mechanisms used
by different online services to identify and render clickable
links. To this end, we test nine popular social media and
instant messaging platforms for their automatic URL rendering
functionality, applying 23 different test cases to each one. Our
test cases are essentially strings without spaces containing at
least one dot so that they can be interpreted as URLs. We
try posting these strings in different platforms and observe
whether the posted string is clickable (i.e., rendered as a URL
by each platform). These strings are different combinations of
the following conditions:
Contains an existing domain name (XDOMAIN)
Contains a non-existing domain name (NXDOMAIN)
Contains a capital letter after a dot
Contains a traditional TLD (e.g., .net)
Contains a new TLD (e.g., .dev)
Contains an invalid TLD (i.e., .ttt)
Contains a number as the domain name
Starts with “www”
Contains a subdomain
•
•
•
•
•
•
•
•
•
Our test results are shown in Table
I. The platforms
that resulted in the exact same results for all 23 test cases
are grouped together. For all tested platforms, test cases that
contain NXDOMAIN and XDOMAIN (conjugates of each
other) returned the same results. Thus, we conclude that
none of the platforms perform a name server lookup before
automatic rendering. We observe that Linkedin does not have
any sort of mechanism to distinguish between an unintentional
and an intentional URL. Twitter, Snapchat and Whatsapp Web
do not render text as a link if the text contains an invalid TLD.
Slack, Facebook and Whatsapp Mobile do not render the links
with the recent TLD .dev. The reason could be that those
platforms have not yet updated their TLD list in their servers
since they also did not render the link with an invalid TLD.
Telegram was the only platform that has an algorithm that
checks the occurrence of a capital letter after a dot and the
validity of a TLD. Skype and Google Hangouts only rendered
a link if it starts with “www.”
Our experiments show that the most permissive platforms
are Linkedin, Twitter, Snapchat, and Whatsapp Web. To further
understand the threats posed by unintended URLs we decide
to focus on Twitter for the rest of this paper. Our reasons for
this decision have to do with the nature of social media vs.
instant messaging applications as well as the overall popularity
of the Twitter platform. Speciﬁcally, the potential threat posed
by unintended URLs on instant messaging apps is lower than
on social media platforms, because only the users inside the
chat can access the unintended URLs. In terms of popularity,
Twitter is not only more popular than LinkedIn (Alexa Rank
50 vs. 63) but Twitter posts are public by default, thereby
exposing more users to the threat of unintended URLs.
D. Twitter Features
In this section we brieﬂy describe the Twitter features
relevant to the issue of unintended URLs, to allow unfamiliar
readers to follow the remaining of the paper.
a) Link Preview and Rendering: Twitter detects links
in plain text and automatically renders them as URLs. As a
user types a tweet, Twitter shows it as a link by turning that
portion of the text blue. Twitter also provides a link preview
functionality. If a linked website uses Twitter Cards [1], the
posted tweet will include a link preview consisting of an image,
title and description of the posted link. These types of previews
are generated by Twitter after the user posts a tweet, whereas
the link highlighting happens as users type their tweets.
b) Retweet Types: Retweeting is a mechanism that
allows Twitter users to share another user’s tweet and making
it appear on their timeline, which is also accessible by the
user’s followers. As a result, retweeting increases the impact
of the tweet because it makes it visible to more users. Twitter
allows two different types of retweets. The ﬁrst one is simple
retweeting, in which the other user’s tweet appears exactly as it
is in the retweeter’s timeline. This method increases the retweet
count of a tweet by one each time a different user retweets.
The second method is retweeting with a comment. Here, the
original tweet is compressed in a box and the comment is
shown as a regular tweet on top of this box. The original tweet
loses its features, such as the link preview, highlighted links
and images. This method does not increase the retweet count
of a tweet.
E. Threat Model
Twitter does not have a mechanism to check spelling or
punctuation and anyone can create an account and post tweets
in seconds. According to our data gathering, approximately
400 million tweets are posted by users on a daily basis. Given
the lack of native spell checking, the onus (or choice) of proper
spelling falls unto the users. As a result, tweets including typos
are not uncommon. Due to the aforementioned retweeting
mechanism, a typo in a tweet of an unpopular user can still
be shown to millions of users, if a popular user somehow
discovers and retweets that typo-including tweet. The same
goes for other types of unintended URLs.