distances (up to ZigBee wireless range that can be as far as
70 meters indoors or 400 meters outdoors [14]), using only
standard Philips Hue lamps. Our attack does not assume any
prior knowledge about the attacked lamps, and does not even
require the knowledge of the ZLL’s secret master key. This
attack can run simultaneously on all lamps within range. As
we demonstrate, this attack can be used in wardriving and
warﬂying scenarios.
Our novel CPA attack targets the veriﬁcation phase of the
CCM mode. Our attack has several advantages over previous
power analysis attacks against AES-CCM:
1) It does not assume any knowledge about the nonce or
IV.
2) It works with any type of counter implementation.
3) It does not require any valid encryption sample.
4) It requires at most the veriﬁcation of messages as short
5) It requires at most twice the number of traces required
as 2 blocks.
to break ECB mode.
We used this novel attack to recover the Philips Hue OTA
update veriﬁcation and encryption keys. With those keys we
were able to create a malicious software update and load it
to a Philips Hue light.
2.3. Creating Widespread Infections
Consider a city whose area is A, and assume that its
shape is roughly circular (i.e., it is ﬂat, convex, not too
elongated, and without holes). We place N smart lamps
at random locations within the city, and deﬁne an infec-
tion graph by connecting any two lamps whose distance
is smaller than D by an edge. The connected components
in this graph deﬁne the possible infection patterns which
can be started by plugging in a single infected light. For
197
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:22:14 UTC from IEEE Xplore.  Restrictions apply. 
Figure 2. The ZLL architecture.
Figure 1. 2D continuum percolation with disks (ﬁgure from [15])
a small N all the components are likely to consist of just
a few vertices, but as N increases, the graph goes through
a sudden phase change in which a single giant connected
component (that contains most of the vertices) is created.
This is the critical mass at which the infection is likely to
spread everywhere in the city instead of remaining isolated
in a small neighborhood.
The mathematical ﬁeld dealing with such problems is
called Percolation Theory, and the critical N is called the
Percolation Threshold. A good survey of many variants of
this problem can be found in [15], and the particular version
we are interested in appears in the section on thresholds
for 2D continuum models, which deals with long range
connectivity via overlapping two dimensional disks of radius
R, as described in Fig 1. Since two points are within a
distance D from each other if and only if the two disks of
radius R = D/2 around them intersect, we can directly use
that model to ﬁnd the critical mass in our model: It is the
value N for which the total area of all the randomly placed
disks (i.e., πR2N) is about 1.128 times larger than the total
area A of the city. In other words, N = 1.128A/π(D/2)2.
To get a feeling for how large this N can be, consider a
typical city like Paris, which is fairly ﬂat, circular in shape,
and with few skyscrapers that can block the available lines
of sight. Its total area is about 105 square kilometers [16].
According to the ofﬁcial ZigBee Light Link website [14],
the range of ZigBee communication is between 70 meters
indoors and 400 meters outdoors 1. There is probably no
single number that works in all situations, but to estimate
N it is reasonable to assume that one lamp can infect other
lamps if they are within a distance of D = 100 meters,
and thus the disks we draw around each lamp has a radius
of R = 50 meters. By plugging in these values into the
formula, we get that the critical mass of installed lamps in
the whole city of Paris is only about N = 15, 000. Since
1. The Philips engineers we talk with stated that in a dense urban
environment, the effective range can be less than 30 meters
Figure 3. Philips Hue bridge (gateway), lamps, and wireless switch.
the Philips Hue smart lamps are very popular in Europe
and especially in afﬂuent areas such as Paris, there is a very
good chance that this threshold had in fact been exceeded,
and thus the city is already vulnerable to massive infections
via the ZigBee chain reaction described in this paper.
3. ZLL (ZigBee Light Link) and Smart Light
systems
As seen in Figure 2, smart light systems, give users
wireless control over lamps either from a remote control or
from a smart-phone application using a gateway [14]. The
gateway is used to bridge the IP world to the ZLL world.
ZLL, is an industry standard intended “for interoperable and
very easy-to-use consumer lighting and control products. It
allows consumers to gain wireless control over all their LED
ﬁxtures, light bulbs, timers, remotes and switches” [14],
[17]. It is developed and supported by most of the major
home lighting manufacturers like Philips, GE and OSRAM.
3.1. The Philips Hue personal wireless lighting sys-
tem
Philips Lighting had 2015 sales of 7.4 Billion EUR,
of which 7% was for consumer products (as opposed to
industrial solutions) [18]. If even a small ( 5%) of these
consumer sales were for smart lighting product, this would
translate to millions of shipped units in 2015 alone.
Although it is hard to get reliable ﬁgures, Philips Hue
is considered the most popular smart light system. It was
ﬁrst released in 2012 and since then a large variety of Hue
products were introduced. As can be seen in ﬁgure 3 their
product line includes different models of lamps, bridges
and switches. Philips provides an open API to the bridge,
198
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:22:14 UTC from IEEE Xplore.  Restrictions apply. 
allowing 3rd parties to develop applications that can control
the lamps.
3.2. ZLL Touchlink Commission protocol
In the ZLL ofﬁcial website [14], we can ﬁnd the “adver-
tised security” of the ZLL standard, claiming to use authen-
tication to “secures networks from neighboring networks”,
while allowing interoperability of products from different
vendors. The basis for this is the ZLL Touchlink commission
protocol deﬁned in the ZLL standard [17]. This protocol is
used to establish PANs (Personal Area Networks) and then
instruct new devices (such as light, remotes etc.) to join
the PAN and to receive the encryption key. Each PAN has
its own unique encryption key which is used to encrypt and
authenticate the messages sent in the PAN. For example, the
Philips Hue starter kit includes two lightbulbs and a bridge
that can be connected to a router for internet access. The
controller and lightbulbs are preconﬁgured to be in the same
PAN sharing a secret key. To connect a new lightbulb to the
bridge, the Touchlink protocol is used to join the lightbulb
to the existing PAN.
The ZLL protocol messages are not encrypted or signed.
Encryption is only used to encrypt the unique encryption key
sent to new devices joining the network. For this encryption,
a secret “Master ZLL key” is used. This key is shared by and
stored on all ZLL certiﬁed products. It is not speciﬁed in the
standard and is only provided to ZigBee alliance members
that are developing ZLL certiﬁed products. Unsurprisingly
this master key was leaked in 2015 and can be found on-line
[7]
Each Touchlink protocol instance is called a transaction.
A transaction involves an initiator (in our example a bridge)
and one or more targets. The initiator starts a transaction
by sending a broadcast message called Scan request. Each
transaction is identiﬁed by a unique 32-bit random nonzero
ID that is sent in the Scan request. All other messages in the
transaction will include this Transaction ID. Upon receiving
the Scan request, the target sends a Scan response message
that includes a random nonzero 32-bit Response ID. The
combination of the Transaction and Response ID’s identiﬁes
a unique transaction between an initiator and a speciﬁc
target. There are 2 types of messages that can change the
state of a lightbulb.
1) Reset to factory new request – Receiving this message
with a valid Transaction ID will cause the target device
to reset to factory new, deleting all PAN information
and keys.
2) Join (or start) network request – These messages in-
struct the target to join the initiator PAN. They include
the PAN’s unique encryption key, encrypted using the
ZLL master key derived with the Transaction and Re-
sponse ID.
3.2.1. Touchlink’s proximity check protection mecha-
nism. The Touchlink protocol allows any initiator with the
ZLL master key to force any lightbulb to reset to factory
new or to join a new PAN. For example one can try to use
199
Figure 4. Philips Hue board
a bridge to take over his neighbor’s lightbulbs. To prevent
this ZLL enforces a proximity check mechanism, that checks
that the initiator is in very close physical proximity to the
target.
The Scan request is sent with a nominal output power of
0 dBm. Upon receiving this Scan request the target device
checks if the measured RSSI (Received Signal Strength In-
dication) is above a certain manufacturer speciﬁc threshold.
Otherwise it will ignore the request. In our experiments with
the First Gen Philips Hue bridge, an older model lightbulb
(Hue LCT001) will respond from about 1 meter distance, but
a newer model (Lux LWB004) will only respond from about
45 centimeters. However in the Second Gen Bridge it seems
that Philips increased the transmission power signiﬁcantly
and for the same Lux model the range increased to about
75 centimeters (about 2.7 times stronger).
3.3. Zigbee OTA (Over The Air) update
The ZigBee alliance provides a standard for OTA up-
dates [19]. As written in the standard: “The main goal of
Over The Air Upgrade cluster is to provide an interoperable
mean for devices from different manufacturers to upgrade
each others image”. The standard deﬁnes a client server
protocol for the transfer of an update image to the client
(a lightbulb in our case). Although the standard suggests
using asymmetric veriﬁcation of authenticity and integrity,
this is not mandatory for most ZigBee applications including
ZLL.
3.4. Philips Hue light hardware and software
Although the ﬁrst version of the Philips Hue light used
Texas Instruments’ CC2530 SoC (System on Chip), it was
discontinued in 2012 and all lamps produced afterwards use
Atmel’s ATmega2564RFR2 SoC. This SoC includes many
different components:
1) An Atmel AVR microprocessor.
2) 256KB ﬂash for bootloader and ﬁrmware code.
3) 32KB SRAM for program data.
4) An AES hardware accelerator.
5) An IEEE 802.15.4 low-power radio transceiver.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:22:14 UTC from IEEE Xplore.  Restrictions apply. 
6) Anti debug fuses can be set to protect the ﬁrmware and
internal data from being accessed from the outside.
These elements allow Philips to provide a system where
the ﬁrmware, keys and all sensitive operations are protected
inside the SoC with no access from outside the SoC. The
Philips Hue light also comes with an external 4Mbit SPI
(Serial Peripheral Interface) ﬂash chip. Part of this ﬂash is
used to store the encrypted OTA images. A board that was
extracted out of a Philips Hue Lux model light can be seen
in Figure 4.
We assumed that Philips used Atmel’s open source Bit-
Cloud ZLL stack as a base for their code. This assumption
can be veriﬁed by viewing the SoC serial interface log
messages which reference the BitCloud ZLL stack [9].
4. Experimental Setup
4.1. Overview
Our experimental setup includes three main parts:
1) A research experimental setup used to test the ZLL
protocol and its implementation.
2) A hardware attack setup used to reverse engineer and
attack the Philips Hue OTA update process.
3) A ZLL attack setup used for testing and demonstrating
our takeover attack.
4.2. The ZLL experimental setup
We created an experimental setup that allows us to send
and receive ZLL messages and run complex state machines
in order to research and implement our attacks. Although
similar work had been done previously by Wright [20] and
Goodspeed et al. [21] we decided to create our own setup
that was more suitable to our available hardware and our
speciﬁc needs, and also to implement the relevant parts of
the ZLL standard that were not previously available.
4.2.1. Hardware setup. We needed a RF transceiver ca-
pable of sending and receiving ZigBee messages. We have
chosen to use Texas Instruments’ CC2531EMK evaluation
board. It is a USB dongle that can be connected to a PC,
and uses the same CC253x family chip and ZLL stack as
the older Philips Hue lamps (the only difference is the added
USB support). The default software provided allows for
snifﬁng of raw ZigBee messages. We have compiled our
own code to be able to also send raw ZigBee messages.
4.2.2. Software framework. We created a Python imple-
mentation of most of the ZLL stack. This provides us a
simple and quick method to generate and parse ZigBee and
ZLL messages, and also to implement a state machine for
implementing our attack.
Figure 5. ChipWhisperer-Lite (top left), connected to a custom PCB with
the ATMega2564RFR2 mounted (middle blue PCB) and a Bus Pirate
(bottom small PCB) to reprogram the SPI ﬂash chip
Lux (white-only) bulbs were disassembled. The 2nd (and
later) generation Lux bulbs are using an Atmel AT-
Mega2564RFR2 device. Our ﬁrst power analysis was done
on a modiﬁed Hue board. Later, a custom PCB was designed
to ﬁt the ATMega2564RFR2 along with support circuitry
such as the SPI ﬂash chip. Several of these boards were
built: some were loaded with chips removed from production
Hue lamps, some were loaded with blank chips. The power
measurement is taken using the ChipWhisperer hardware
platform [22], and a photo of the power measurement setup
is shown in Figure 5.
The boards loaded with Hue chips were used in breaking
the actual bootloader and encryption key, whereas the blank
chips were used in investigating the power signature of
the ATMega2564RFR2 when performing known tasks, and
determining the rough amount of power traces required to
break the hardware AES peripheral. Full details of this are
given in the Appendix.
4.4. ZLL attack setup
For our attack demonstrations we used a slightly differ-
ent setup. For our transceiver we used the same TI CC2531
chip but on a Zlight2 evaluation board. This board has a
slightly better RF characteristics and it is easier to mount on
a drone during warﬂying missions. As we wanted our attack
kit to be fully autonomous we have implemented our attack
logic in C code using Texas Instruments’ ZigBee ZStack.
We bought 4 different models of the Philips Hue lamps
to test our attack on.
5. Creating a lightbulb worm
4.3. Power analysis setup
5.1. Attack scenario
4.3.1. Philips Hue board. Several of the 1st-generation
Philips Hue (BR30 color) and 2nd-generation Philips Hue
Our goal is to create a worm that can automatically
spread among physically adjacent lamps in a chain reaction
200
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:22:14 UTC from IEEE Xplore.  Restrictions apply. 
which spread over a large area using only the standard
ZigBee wireless interface. Our worm will spread from one
lightbulb to all the neighboring lightbulbs and from one ZLL
network to another. For this we require two main abilities:
1) Persistence of code execution on a lightbulb.
2) Lateral movement - a method for one lightbulb to infect
another lightbulb.