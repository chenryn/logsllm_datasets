## PostGIS空间索引(GiST、BRIN、R-Tree)选择、优化 - 阿里云RDS PostgreSQL最佳实践    
### 作者      
digoal      
### 日期       
2017-08-20      
### 标签      
PostgreSQL , Greenplum , PostGIS , GiST , R-Tree , BRIN , 相关性 , 网格 , BOX , K-Mean         
----                  
## 背景    
空间数据的搜索需求通常包括：  
1、平面、三维、多维对象 几何相交、不相交、相邻。  
2、平面、三维、多维对象的方位判断（相交或严格在左边、右边、上边、下边），类似数值的大于、小于、大于等于、小于等于。  
3、平面、三维、多维对象 包含 另一个对象  
4、平面、三维、多维对象 等于 另一个对象  
5、平面、三维、多维对象 与另一个对象的（边、最近、中心点的）距离，按距离排序输出满足条件的行，输出距离在XX以内的行。  
操作符如下  
http://postgis.net/docs/manual-2.3/reference.html#Operators  
```  
&& — Returns TRUE if A's 2D bounding box intersects B's 2D bounding box.  
&&(geometry,box2df) — Returns TRUE if a geometry's (cached) 2D bounding box intersects a 2D float precision bounding box (BOX2DF).  
&&(box2df,geometry) — Returns TRUE if a 2D float precision bounding box (BOX2DF) intersects a geometry's (cached) 2D bounding box.  
&&(box2df,box2df) — Returns TRUE if two 2D float precision bounding boxes (BOX2DF) intersect each other.  
&&& — Returns TRUE if A's n-D bounding box intersects B's n-D bounding box.  
&&&(geometry,gidx) — Returns TRUE if a geometry's (cached) n-D bounding box intersects a n-D float precision bounding box (GIDX).  
&&&(gidx,geometry) — Returns TRUE if a n-D float precision bounding box (GIDX) intersects a geometry's (cached) n-D bounding box.  
&&&(gidx,gidx) — Returns TRUE if two n-D float precision bounding boxes (GIDX) intersect each other.  
& — Returns TRUE if A' bounding box overlaps or is to the right of B's.  
> — Returns TRUE if A's bounding box is strictly to the right of B's.  
@ — Returns TRUE if A's bounding box is contained by B's.  
@(geometry,box2df) — Returns TRUE if a geometry's 2D bounding box is contained into a 2D float precision bounding box (BOX2DF).  
@(box2df,geometry) — Returns TRUE if a 2D float precision bounding box (BOX2DF) is contained into a geometry's 2D bounding box.  
@(box2df,box2df) — Returns TRUE if a 2D float precision bounding box (BOX2DF) is contained into another 2D float precision bounding box.  
|&> — Returns TRUE if A's bounding box overlaps or is above B's.  
|>> — Returns TRUE if A's bounding box is strictly above B's.  
~ — Returns TRUE if A's bounding box contains B's.  
~(geometry,box2df) — Returns TRUE if a geometry's 2D bonding box contains a 2D float precision bounding box (GIDX).  
~(box2df,geometry) — Returns TRUE if a 2D float precision bounding box (BOX2DF) contains a geometry's 2D bonding box.  
~(box2df,box2df) — Returns TRUE if a 2D float precision bounding box (BOX2DF) contains another 2D float precision bounding box (BOX2DF).  
~= — Returns TRUE if A's bounding box is the same as B's.  
 — Returns the 2D distance between A and B.  
|=| — Returns the distance between A and B trajectories at their closest point of approach.  
 — Returns the 2D distance between A and B bounding boxes.  
> — Returns the n-D distance between the centroids of A and B bounding boxes.  
> — Returns the n-D distance between A and B bounding boxes.  
```  
这些操作符是否支持索引，支持哪些索引接口，索引是如何做到这些操作符的高效率减少的，各种索引的效率如何，数据编排上有什么优化手段？  
## PostgreSQL 支持的索引种类  
关于PostgreSQL支持的9种索引接口（实际上还可以继续扩展更多接口），我以前写过文档，详细的描述。这里不再赘述。  
[《PostgreSQL 9种索引的原理和应用场景》](../201706/20170627_01.md)    
### B-Tree  
B-Tree毫无疑问是最简单，最容易理解的索引，按顺序将KEY分成几个层次（根、分支、叶子）组织起来，在VALUE中存储数据的实际行号。  
这种索引结构在排序、范围查询(大于、小于、大于等于、小于等于)、精确查询（等于）的场景中非常有效。  
但是它没有办法支持空间搜索中提到的几何对象的搜索需求（相交，包含，距离等）。  
### R-Tree  
将空间数据按长方形组织，大的长方形套小的长方形。顶层是最大的长方形，接下来是很多小的长方形，再接下来更小，不停的切成多个层次。类似B-Tree的根、分支、叶子结构。  
很早以前PostgreSQL中支持R-Tree，但是后来被更好的GiST接口取代了。  
### GiST  
GiST是一个通用的索引接口，全称Generalized Search Trees。不仅仅适合空间数据类型的检索，同样适合其他数据类型。  
在GIS数据的GiST索引实现中，将空间数据按“在另一边(上、下、左、右)”，“相交”，“包含”使用R-Tree结构组织。  
同时，GIS索引能够支持在一个索引结构中，存储平面、三维、多维的数据。这是很了不起的功能。  
### BRIN  
BRIN是块级索引(9.5以上版本)，存储每个（或每连续几个）块的边界值，例如：  
数值类型：存储每个BLOCK（或每连续若干BLOCK）包含的记录中，最大值和最小值。（理论上还可以扩展BRIN索引的功能，例如包含记录数、平均值、SUM等信息，但是索引会更重）  
几何类型：存储每个BLOCK（或每连续若干BLOCK）包含的记录中，能够包含下这些几何对象的最小的BOX。例如这些记录中（最左下的点、最右上的点 造成的BOX）。  
[《PostgreSQL 物联网黑科技 - 瘦身几百倍的索引(BRIN index)》](../201604/20160414_01.md)    
## GiST和BRIN 如何选择  
### GiST和BRIN索引分别支持什么空间搜索需求？  
1、GiST索引支持什么查询需求？  
除了前面提到的哪些几何操作符（相交、包含、方位、距离、距离排序等），还有大量的函数支持索引的使用。  
详见  
http://postgis.net/docs/manual-2.3/reference.html  
2、BRIN索引支持什么查询需求？  
BRIN索引中存储的信息量比较有限，实际上就是包含每个（每连续几个）BLOCK中所有几何数据的最小BOX（或多维BOX）。  
现在能使用BRIN来优化 包含、相交、不相交 的几何搜索。  
```  
&&, ~ and @ operators can be used for the 2D cases (both for "geometry" and for "geography"),   
&&& operator can be used for the 3D geometries.  
```  
### GiST和BRIN索引的overhead  
索引都会引入Overhead，那么哪个引入的OVERHEAD比较大呢？  
GiST索引引入的overhead比较大，它需要存储的信息量较大，支持更多的搜索需求。  
举例  
创建PostGIS扩展。  
```  
create extension postgis;  
```  
创建测试表。  
```  
postgres=# create table gis_idx_test(id int, info text, pos geometry) with (autovacuum_enabled=off,toast.autovacuum_enabled=off);  
CREATE TABLE  
```  
1、写入速度对比，（写入1000万随机POINT）：  
GiST，219秒。  
```  
postgres=# \timing  
Timing is on.  
create index idx_gis_idx_test on gis_idx_test using gist (pos);  
insert into gis_idx_test select id, md5(random()::text), ST_SetSRID(ST_Point(180-random()*360, 90-random()*180),4326) from generate_series(1,10000000) t(id);  
INSERT 0 10000000  
Time: 219213.503 ms  
```  
BRIN（每个BLOCK统计一个BOX），33秒。  
```  
drop index idx_gis_idx_test;  
truncate gis_idx_test;  
create index idx_gis_idx_test on gis_idx_test using brin (pos) with (pages_per_range =1);  
insert into gis_idx_test select id, md5(random()::text), ST_SetSRID(ST_Point(180-random()*360, 90-random()*180),4326) from generate_series(1,10000000) t(id);  
INSERT 0 10000000  
Time: 32621.684 ms  
```  
2、无索引插入速度，30秒。BRIN索引对插入几乎没有影响。  
```  
drop index idx_gis_idx_test;  
truncate gis_idx_test;  
insert into gis_idx_test select id, md5(random()::text), ST_SetSRID(ST_Point(180-random()*360, 90-random()*180),4326) from generate_series(1,10000000) t(id);  
INSERT 0 10000000  
Time: 29696.020 ms  
```  
3、创建速度对比（1000万随机POINT）：  
GiST，164秒。  
```  
drop index idx_gis_idx_test;  
create index idx_gis_idx_test on gis_idx_test using gist (pos);  
CREATE INDEX  
Time: 163988.002 ms  
```  
BRIN，3.5秒。  
```  
drop index idx_gis_idx_test;  
create index idx_gis_idx_test on gis_idx_test using brin (pos) with (pages_per_range =1);  