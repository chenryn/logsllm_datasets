1
example is to use this tool to generate a PPE circuit for verifying
this VRF proof œÄ; AutoPPE [45] output unknown on this scheme.
, ¬∑ ¬∑ ¬∑ , –¥
j
and proof œÄ =
i s.t. xi =1 ai
i s.t. xi =1 ai
c¬∑a2
, –¥
1
Figure 9 shows how to encode this scheme as input for
j‚àà[n‚àí1]
AutoCircuitPPE. For space reasons, we will let n = 2. The pairing
information is specified using the line maps G1*G1->GT, which
denotes a Type I pairing15. The trusted set of polynomials (vk)
along with their group identifiers are specified by trusted_polys
[_] in G_, and the untrusted set of polynomials (VRF output)
along with their group identifiers by untrusted_polys[_] in G_.
For each polynomial, we also specify a formal variable F_ which is
used in the PPE circuit output by the tool. Each bit of VRF input
x is treated as a variable in Zp and specified using Zp_vars [_].
Internally for every problem instance Œ†, for each trusted polynomial
15Alternately, a Type II pairing could be specified by maps G1*G2-> GT, isos G1
-> G2, and a Type III pairing could be specified by maps G1*G2->GT.
Session 2B: Applied Cryptography CCS '20, November 9‚Äì13, 2020, Virtual Event, USA399Including polynomial F0 = 1 in trusted set of groups G1, GT.
Output of the Tool
Trusted set in G1: F1 = a1*c, F2 = a2*c, F3 = c
Untrusted set in G1: F4 = 1 - x1 + a1*x1, F5 = 1 - x1 - x2 + a1*x1 + a2*x2 +
x1*x2 - a1*x1*x2 - a2*x1*x2 + a1*a2*x1*x2,
rule 3 on F4. isidentity := F3 = I
1*e(F1,F0^x1)*e(F0,F3)
C := e(F4,F3) = (e(F3,F0^x1))^-
Trusted set in G1: F1 = a1*c, F2 = a2*c, F3 = c, F4 = 1 - x1 + a1*x1
Untrusted set in G1: F5 = 1 - x1 - x2 + a1*x1 + a2*x2 + x1*x2 - a1*x1*x2 -
a2*x1*x2 + a1*a2*x1*x2,
rule 3 on F5. isidentity := F3 = I
1*e(F2^x2,F4)*e(F3,F4)
C := e(F5,F3) = (e(F3^x2,F4))^-
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 1 - x1 + a1*x1
Untrusted set in G1: F5 = 1 - x1 - x2 + a1*x1 + a2*x2 + x1*x2 - a1*x1*x2 -
a2*x1*x2 + a1*a2*x1*x2,
rule 4 on F5 and variable a2. isidentity := F4^x2 = I
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 1 - x1 + a1*x1
Untrusted set in G1: F5 = 1 - x1 + a1*x1,
rule 1 on F5. C := F5 = F4
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0
Untrusted set in G1: F4 = 1 - x1 + a1*x1, F5 = 1 - x1 - x2 + a1*x1 + a2*x2 +
x1*x2 - a1*x1*x2 - a2*x1*x2 + a1*a2*x1*x2,
rule 4 on F4 and variable a1. isidentity := F0^x1 = I
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 1 - x1 + a1*x1
Untrusted set in G1: F5 = 1 - x1 - x2 + a1*x1 + a2*x2 + x1*x2 - a1*x1*x2 -
a2*x1*x2 + a1*a2*x1*x2,
rule 4 on F5 and variable a2. isidentity := F4^x2 = I
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 1 - x1 + a1*x1
Untrusted set in G1: F5 = 1 - x1 + a1*x1,
rule 1 on F5. C := F5 = F4
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0,
Untrusted set in G1: F4 = 1, F5 = 1 - x2 + a2*x2,
rule 1 on F4. C := F4 = F0
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 1
Untrusted set in G1: F5 = 1 - x2 + a2*x2,
rule 4 on F5 and variable a2. isidentity := F0^x2 = I
Trusted set in G1: F1 = 0, F2 = 0, F3 = 0, F4 = 1
Untrusted set in G1: F5 = 1,
rule 1 on F5 = 1. C := F5 = F0
Execution time : 1.682712s
((((NOT F3 = I) AND e(F4,F3) = (e(F3,F0^x1))^-1*e(F1,F0^x1)*e(F0,F3))
AND ((((NOT F3 = I) AND e(F5,F3) = (e(F3^x2,F4))^-1*e(F2^x2,F4)*e(F3,F4))
AND ACC) OR (F3 = I AND (((NOT F4^x2 = I) AND ACC) OR (F4^x2 = I
AND (F5 = F4 AND ACC)))))) OR (F3 = I AND (((NOT F0^x1 = I) AND
(((NOT F4^x2 = I) AND ACC) OR (F4^x2 = I AND (F5 = F4 AND ACC))))
OR (F0^x1 = I AND (F4 = F0 AND (((NOT F0^x2 = I) AND ACC) OR
(F0^x2 = I AND (F5 = F0 AND ACC))))))))
G5 : F5 = F4
G6 : F0^x1 = I
G7 : F4 = F0
G2 : e(F4,F3) = (e(F3,F0^x1))^-1*e(F1,F0^x1)*e(F0,F3)
List of gates after optimizing the circuit
G1 : F3 = I
G3 : e(F5,F3) = (e(F3^x2,F4))^-1*e(F2^x2,F4)*e(F3,F4)
G4 : F4^x2 = I
G8 :
F0^x2 = I G9 : F5 = F0 G10 : NOT G1 G11 : G10 AND G2 G12
: G11 AND G3
G15 : G4 AND G5
G16 : G14 OR G15 G17 : G13 AND G16 G18 : NOT G8 G19 : G8
AND G9
G22 : G6 AND
G25 : G12 OR G24
G21
G21 : G7 AND G20
G24 : G1 AND G23
G20 : G18 OR G19
G23 : G17 OR G22
G13 : NOT G6
G14 : NOT G4
Figure 10: Output of the tool on Dodis VRF scheme when
input length is 2.
Figure 8: The workflow of the AutoCircuitPPE tool. The tool
first preprocesses the problem instance, i.e., for every poly-
nomial f in the trusted set and variable v in Zp_vars, the
tool adds the polynomial f ¬∑ v to the trusted set. It then
runs the QSearch algorithm, which may output a new prob-
lem instance. AutoCircuitPPE preprocesses this instance be-
fore feeding it back to Qsearch. The tool utilizes and adapts
portions of existing tools such as the GGA and AutoPPE
for handling polynomials and completion sets and the Sage-
Math package for solving systems of linear equations.
Input File Example
(*input x*)
maps G1 * G1 ->GT.
Zp_vars [x1, x2].
trusted_polys [F1 = a1*c, F2 = a2*c, F3 = c] in G1.
untrusted_polys [F4 = (a1*x1 + (1-x1))] in G1.
untrusted_polys [F5 = (a1*x1 + (1-x1)) * (a2*x2 + (1-x2))] in G1.
(*VRF output*)
(*proof*)
(*public key*)
Figure 9: Input file for Dodis VRF scheme when input length
is 2.
f and a Zp variable xi, the AutoCircuitPPE tool adds xi ¬∑ f to the
trusted set16. Comments are specified with (*....*).
Figure 10 shows AutoCircuitPPE‚Äôs output the Figure 9 input.
The tool applies the QSearch algorithm (see Section 4.3). For each
recursive call made to QSearch, it prints the trusted and untrusted
set polynomials, along with each rule applied. It then prints the
PPE circuit output by QSearch. As this PPE circuit may contain
some redundancy, the tool further optimizes the PPE circuit using
simple tricks such as evaluating common sub-circuits only once
and replacing a sub-circuit of the form x AND ((NOT x) OR y)
with a circuit of the form (x AND y). The tool finally outputs the
list of gates in the optimized PPE circuit, which we show pictorially
in Figure 11.
5.3 Case Studies
We evaluated AutoCircuitPPE on various types of pairing-based
schemes using a MacBook Pro 2015 laptop with 2.7GHz Intel Core
i5 processor and 8GB 1867MHz DDR3 RAM. We present the results
along with average execution times over 10 runs in Table 1.
We retain AutoPPE‚Äôs optimizations for computing PPEs in the
rules efficiently. Like AutoPPE, we simplified checking whether the
constant d is relatively prime to p ‚àí 1 in Rule 2 and 4, by checking
16Ideally, for each polynomial poly on Zp variables x, one should include poly(x)¬∑f
in the trusted set. The AutoCircuitPPE tool supports such an operation for all bounded
degree polynomials on Zp variables. However, for this example, it suffices to include
only xi ¬∑ f to trusted set.
Input:AutoCircuitPPEOutput:PPE circuit‚Äúunknown‚ÄùSageMathPPE Instance-pairing Info-Trustedpolys-Untrustedpolys-group ids ùõÇ+-Variables in ZpQsearchGGA, AutoPPENew PPE Instance-pairing Info-Trusted‚Äôpolys-Untrustedpolys-group ids ùõÇ+-Variables in ZpPreprocessSession 2B: Applied Cryptography CCS '20, November 9‚Äì13, 2020, Virtual Event, USA400#PPE
Gates
#Bool
Gates
1
1
1
1
1
5
0
14
27
1
2
4
4
16
1
1
9
25
5
5
5
5
9
9
1
0
0
9
6
0
0
0
0
0
4
0
31
124
0
1
3
3
15
0
0
16
49
4
4
4
4
8
8
0
0
0
16
9
Run
Time
1.63s
1.54s
167s
10.92s
1.62s
5.04s
105.37s
4.57s
18.39s
1.69s
2.32s
1.60s
1.57s
16.06s
9.83s
1.49s
1.68s
41.34s
109.81s
22.70s
26.05s
11.92s
10.01s
5.20s
4.99s
4.48s
1.2s
4.76s
3.58s
VRF
VRF
VRF
VRF
VRF
VRF
Scheme
Pairing
Type
IBE
IBE
HIBE
IBE
IBE
HIBE
IBE
IBE
BLS01 ([29])
CL04 Scheme A ([32])
CL04 Scheme B ([32])
CL04 Scheme B ([32])
PPE Circuit
Testability
Testable
Testable
Testable
Testable
Testable
Testable
Waters09 ([54])
BBG05 ([27]) (‚Ñì = 8)
BKPW12 ([24]) (|id| = 4)
Boyen-Waters ([30])