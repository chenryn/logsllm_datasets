negation
equality
less than
E ::=
N
|
|a |
| E + E
| E − E
arithmetic expression
32-bit constant
length of a secret
addition
subtraction
Figure 1: Syntax of BitML contracts.
only condition that can be checked is that persistent deposits are
spent contextually with appending Tinit: this can be obtained by
setting the inputs of Tinit to these deposits. Note also that condi-
tion (iv) is not restrictive in practice: we can craft a contract that
allows a participant A to deposit just a small fraction of bitcoin,
and then immediately transfer it back to A through a split.
Semantics We introduce a reduction semantics of BitML. Because
of space limitations, here we provide the underlying intuitions,
relegating the full formalisation to Appendix A.2. The rules of the
semantics are grouped into four sets: (i) rules for managing deposits;
(ii) rules for advertising contracts and stipulating them; (iii) rules
for executing active contracts; (iv) rules for handling time. The
untimed rules follow a common pattern, in order to perform an
operation: first, the involved participants give their authorization;
then, the operation is actually performed. Both cases are rendered as
transitions in the semantics. Transitions are decorated with labels,
which describe the performed actions. For simplicity, we ignore
these labels in our informal description below.
The configurations of the semantics contain the following terms:
(i) contract advertisements {G}C represent a contract which has
been proposed, but not stipulated yet; (ii) active contracts ⟨C , v⟩x
represent a stipulated contract, holding a current balance of vB. The
name x uniquely identifies the active contract; (iii) personal deposits
⟨A, v⟩x represent a fund of vB owned by A, and with unique name x;
(iv) authorizations A[χ] represent the consent of A to perform some
operation χ; (v) committed secrets {A : a#N}, represent A who has
committed a random nonce a of (secret) length N , by broadcasting
its hash H (a ); (vi) revealed secrets A : a#N represent the fact that
A has revealed her secret a (hence, its length N ).
Definition 4 (Configurations). The syntax of configurations is:
Γ ::= 0
| {G}C
| ⟨C , v⟩x
| ⟨A, v⟩x
| A[χ]
| {A : a#N}
| A : a#N
| Γ | Γ
′
empty
contract advertisement
an active contract containing vB
a deposit of vB redeemable by A
authorization of A to perform χ
committed secret of A (N ∈ N ∪ {⊥})
revealed secret of A (N ∈ N)
parallel composition
Further, Γ | t is a timed configuration, where t ∈ N is a global time.
6
We now illustrate the BitML semantics through a series of exam-
ples, which cover all the primitives. When time is immaterial, we
will only show the steps of the untimed semantics. A full execution
of the timed commitment contract is shown in Appendix A.2.
Deposits. When a participant A owns a deposit ⟨A, v⟩x , she can
employ that amount for several operations: she can divide the
deposit into two smaller deposits, or join it with another deposit
of hers to form a larger one; the deposit can also be transferred
to another participant, or destroyed. For instance, to authorize the
join of two deposits, A can perform the following step:
′⟩y | A[χx ]
′⟩y −→ ⟨A, v⟩x | ⟨A, v
⟨A, v⟩x | ⟨A, v
where χx = x, y ▷ ⟨A, v + v′⟩ means that A authorizes to spend x.
After A also provides the dual authorization χy, any participant
can perform the actual join as follows:
⟨A, v⟩x | ⟨A, v
′⟩y | A[χx ] | A[χy] −→ ⟨A, v + v
′⟩z
Advertisement. Any participant, at any time, can advertise a new
contract C (with preconditions G) by performing the following step:
Γ −→ Γ | {G}C
The rule requires that all the deposits mentioned in G exist in Γ,
that secrets names are fresh, and that at least one of the participants
in G is honest. The last condition, useful to obtain computational
soundness, does not limit the power of adversary. Indeed, the same
effect of executing a contract among dishonest participants can be
obtained by the adversary using the deposit rules, only.
Stipulation. To perform a stipulation, turning a contract adver-
tising into an active contract, a few steps are needed. For instance,
consider G = A:! 1B @ x | A:? 1B @ y | A:secret a , and let C be
an arbitrary contract, only involving A. Assuming A honest, our
semantics gives the following steps:
⟨A, 1B⟩x | ⟨A, 1B⟩y | {G}C
−→ ⟨A, 1B⟩x | ⟨A, 1B⟩y | {G}C | {A : a#N} | A[# ▷ {G}C]
−→ Γ | A[x ▷ {G}C]
−→ ⟨A, 1B⟩y | ⟨C , 1B⟩z | {A : a#N}
= Γ
The rules require all participants to commit to their secrets (and
to their lengths). Above, this step adds {A : a#N} | A[# ▷ {G}C]
to the configuration, where N is the committed length. After that,
all participants must authorize to spend their persistent deposits.
Above, this step adds A[x ▷ {G}C] to the configuration. After all
such authorizations have been performed, any participant can spend
the persistent deposits to create the active contract. Above, this step
consumes ⟨A, 1B⟩x (and all the authorizations) to create ⟨C , 1B⟩z.
We anticipate that, in the computational setting, committing
to a secret a is performed by generating a random nonce sa and
broadcasting its hash ha = H (sa ). Note that a dishonest A could
perform a fake commitment, by broadcasting a value ha without
knowing its preimage. In the symbolic setting, we model this situa-
tion by allowing a dishonest A to produce a term {A : a#⊥}, where
⊥ represents an “invalid” hash. In the subsequent steps, A will not
be able to reveal the secret, coherently with the fact that, in the
computational setting, A is not able to compute a preimage of ha .
Withdraw. We now exemplify the rules for active contracts. Exe-
cuting withdraw A transfers the whole contract balance to A:
⟨withdraw A + C
′
, v⟩x −→ ⟨A, v⟩y
This step terminates the contract, and creates a deposit owned by A,
with a fresh name y. Above, withdraw A is executed as a branch
within a choice: as usual, taking a branch discards the other ones
(denoted as C ′). Below, C ′ always denotes the discarded branches.
Split. split can be used to spawn several new concurrent con-
tracts, dividing the balance among them:
⟨(split v1 → C1 | v2 → C2) + C
, v1 + v2⟩x −→ ⟨C1, v1⟩y | ⟨C2, v2⟩z
The balance of the initial contract, (v1 + v2)B, is split between two
newly spawned contracts: C1, receiving v1B, and C2, receiving v2B.
After this step, the two new contracts are executed independently.
Put. put x rakes the volatile deposit x within the contract:
′
⟨put x .C + C
′
, v⟩y | ⟨A, v
′⟩x −→ ⟨C , v + v
′⟩z
′
′
This step can only be performed if x is still unspent; otherwise, the
put prefix is stuck. This action naturally generalizes to multiple
volatile deposits ⃗x (if any of them is spent, the prefix is stuck).
Reveal. reveal a if p can be fired when the previously commit-
ted secret a has been revealed, and it satisfies the guard p. E.g.:
if N = M
, v⟩x | {A : a#N}
, v⟩x | A : a#N
⟨reveal a if |a| = M. C + C
−→ ⟨reveal a if |a| = M. C + C
−→ ⟨C , v⟩y | A : a#N
In the first step, A reveals her secret a. In the second step, any
participant can cause the contract to take the reveal branch, pro-
vided that the length of a is M, as required by the predicate. This
action naturally generalizes to the case of multiple secrets ⃗a (all of
the must be revealed), and to the case where put and reveal are
performed atomically, e.g. in an action put ⃗x & reveal ⃗a if p.
Authorizations. When a branch is decorated by A :· · · it can be
taken only after A has provided her authorization. For instance:
′
′
⟨A : withdraw B + C
−→⟨A : withdraw B + C
, v⟩x
, v⟩x | A[x ▷ A : withdraw B] −→ ⟨B, v⟩y
In the first step, A authorizes the contract to take the branch
withdraw B. After that, any participant can fire such branch. When
multiple authorizations are required, the branch can be taken only
after all of them occur in the configuration.
Time. We now discuss the rules for handling time. These rules
describe transitions between timed configurations Γ | t where t
denotes the current time. We always allow time t to advance by a
delay δ > 0, through the rule: Γ | t −→ Γ | t + δ. We allow a contract
branch decorated with after t to be taken only when the current
time is greater than t. For instance, if t0 + δ ≥ t:
⟨after t : withdraw B , v⟩x | t0
−→ ⟨after t : withdraw B , v⟩x | t0 + δ −→ ⟨B, v⟩y | t0 + δ
For the branches not guarded by an after, we lift transitions from
untimed to timed configurations, without making them affect time.
Namely, for an untimed transition Γ −→ Γ′, we also have the timed
transition Γ | t −→ Γ′ | t. This makes actions instantaneous (similarly
to many timed process calculi [50]) reflecting the assumption that
participants can always meet deadlines, if they want to.
α0−−→ Γ1 | t1
5 SYMBOLIC STRATEGIES & ADVERSARIES
Symbolic runs. A symbolic run Rs is a (possibly infinite) sequence
Γ0 | t0
α1−−→ · · · where αi are the transition labels, Γ0
contains only deposits, and t0 = 0. If Rs is finite, we write ΓRs for
its last untimed configuration.
Stripping. The strategy of a participant can inspect the whole
past run, except for the (lengths of the) unrevealed secrets. The
stripping of a run censors this information: technically, it replaces
each committed secret {A : a#N} with a term {A : a#⊥}.
Symbolic participant strategies. A symbolic strategy Σs
is a
A
PPTIME algorithm which allows A to select which action(s) to per-
form, among those permitted by the BitML semantics. Σs
receives
A
as input a stripped run Rs∗, and outputs a finite set of actions (possi-
bly, time delays) that A wants to perform. The choice among these
actions is controlled by the adversary strategy, specified below. We
to output authorizations for participants B (cid:44) A. Further,
forbid Σs
A
strategies must be persistent: if on a run Σs
chooses an action α,
A
and α is not taken as the next step in the run (e.g., because some
must still choose α after that
other participant acts earlier), then Σs
A
step, if still enabled. In this way, once Σs
has chosen α (implicitly,
A
giving to the adversary her consent to schedule such action), she
cannot change her mind.
Symbolic adversary strategies. The adversary Adv acts on be-
half of all the dishonest participants, and controls the scheduling
among all participants (including the honest ones). Her symbolic
strategy Σs
takes as input the current run and the sets of moves
outputted by the strategies of honest participants. Both the run and
the moves are stripped, to prevent the adversary from inferring the
lengths of secrets. The output of Σs
is a single action λs (to be
appended to the current run), only subject to the following con-
straints: (i) if λs is an authorization by some honest A, then it must
be chosen by Σs
; (ii) if λs is a time delay, then all the honest partic-
A
ipants must agree. Condition (i) rules out authorization forgeries,
while (ii) prevents the adversary from delaying the honest partici-
pants. Were this condition dropped, honest participants could be
prevented from meeting deadlines: e.g., in the timed commitment
contract, the adversary could collude with B by enabling the after
branch before A had the possibility to reveal her secret.
Adv
Adv
7
Symbolic conformance. Strategies are PPTIME algorithms: so,
besides the other inputs, they also implicitly take as input a stream
r of random bits. Fixing this stream and a set of strategies Σs —
both for the honest participants and for the adversary — we obtain
a unique run, which is made by the sequence of actions chosen by
when taking as input the outputs of the honest participants’
Σs
Adv
strategies. We say that this run is conformant to Σs (and r). When
(cid:60) Σs, we say that Rs conforms to Σs (and r) when there exists
Σs
Adv
some Σs
such that Rs conforms to Σs ∪ {Σs
} (and r).
Adv
Adv
6 COMPUTATIONAL MODEL
In this section we introduce our computational model, which will
be the target of the BitML compiler. We start by briefly recapping
Bitcoin transactions (referring to [16] for a full formal model).
In Bitcoin, transactions describe transfers of cur-
Transactions.
rency. The log of all transactions is maintained on a public, im-
mutable and decentralised data structure called blockchain. We
represent transactions as records, with fields in, wit, out and absLock.
For instance, consider the transactions T1 and T2 below:
T1
T2
in: 0 (cid:55)→ (T1, 0)
wit: 0 (cid:55)→ sigK(A )
out: 0 (cid:55)→ (λx .H (x ) = k, v0B)
absLock: t
in: · · ·
wit: · · ·
out: 0 (cid:55)→ (λς .versigK(A ) (ς ), v0B)
1 (cid:55)→ (λς .versigK(B ) (ς ), v1B)
The transaction T1 has two outputs: the v0B in out(0) can be re-
deemed by any transaction T whose in field refers to (T1, 0), and
whose wit field satisfies the predicate in out(0) (similarly for the
other output). This is the case e.g. of the transaction T2 above. Its