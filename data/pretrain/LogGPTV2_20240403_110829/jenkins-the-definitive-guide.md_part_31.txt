### Configuring a Manual Step in the Build Pipeline

To proceed with the next step in your project, select the "Require manual build executor" option (refer to Figure 10.55, "Configuring a manual step in the build pipeline").

**Figure 10.55. Configuring a manual step in the build pipeline**

Once you have configured the build process to your satisfaction, you can set up the build pipeline view. This view can be created in the same manner as any other view (see Figure 10.56, "Creating a Build Pipeline view").

**Figure 10.56. Creating a Build Pipeline view**

However, there is a specific method for configuring this view. At the time of writing, there is no direct menu option or button for configuration. Instead, you need to manually enter the URL. To do this, simply append `/configure` to the end of the URL displayed when viewing the build pipeline. For example, if your view is named "phoenix-build-pipeline," the configuration URL would be `http://my_jenkins_server/view/phoenix-build-pipeline/configure` (see Figure 10.57, "Configuring a Build Pipeline view").

**Figure 10.57. Configuring a Build Pipeline view**

The most crucial configuration in this screen is the initial job, which marks the starting point of your build pipeline. You can define multiple build pipeline views, each with a different starting job. Additionally, you can configure the maximum number of build sequences to display on the screen at once.

After setting the starting point, return to the view to see the current state of your build pipeline. Jenkins will display successive related build jobs horizontally, using colors to indicate the outcome of each build (see Figure 10.58, "A Build Pipeline in action"). Each build job in the pipeline has its own column. When the initial build job starts, a new row appears on the page. As the build progresses through the pipeline, Jenkins adds colored boxes in the successive columns to indicate the outcome of each stage. Clicking on a box provides more detailed information about a specific build result. If a manual execution is required, a button will be displayed for the user to trigger the job.

**Figure 10.58. A Build Pipeline in action**

This plugin is relatively new and may not integrate with all other plugins. It is designed primarily for linear build pipelines and does not handle branches or parallel build jobs well. However, it provides an excellent overview of the build pipeline.

### Conclusion

Continuous Integration (CI) build jobs are more than just scheduled executions of build scripts. In this chapter, we have reviewed various tools and techniques that allow you to go beyond typical build jobs by combining them into a larger process. We have explored how parameterized and multiconfiguration build jobs add flexibility by allowing the same build job to run with different parameters. Other tools help coordinate and orchestrate groups of related build jobs. The Joins and Locks and Latches plugins assist in coordinating parallel build jobs, while the Build Promotions and Build Pipelines plugins, along with the Copy Artifacts plugin, make it easier to design and configure complex build promotion strategies for your projects.

### Chapter 11: Distributed Builds

#### 11.1 Introduction

One of the most powerful features of Jenkins is its ability to distribute build jobs across multiple machines. Setting up a farm of build servers is straightforward and can significantly increase the capacity of your CI infrastructure. Distributed builds are used to absorb extra load, such as spikes in build activity, or to run specialized build jobs in specific environments. For example, web tests using Internet Explorer require a Windows machine, or resource-heavy build jobs may need a dedicated machine to avoid impacting other jobs.

Demand for build servers can also fluctuate over time. During product release cycles, more comprehensive functional and regression test suites may be run more frequently, requiring a higher number of build jobs.

In this chapter, we will discuss how to set up and manage a farm of build servers using Jenkins.

#### 11.2 The Jenkins Distributed Build Architecture

Jenkins uses a master/slave architecture for distributed builds. The main Jenkins server is the master, responsible for scheduling build jobs, dispatching them to slaves for execution, monitoring the slaves, and recording and presenting the build results. Even in a distributed setup, the master can execute build jobs directly.

Slaves execute build jobs dispatched by the master. You can configure a project to always run on a specific slave machine, a particular type of slave machine, or let Jenkins choose the next available slave.

A slave is a small Java executable that runs on a remote machine and listens for requests from the Jenkins master. Slaves can run on various operating systems and communicate with the master over a TCP/IP connection.

#### 11.3 Master/Slave Strategies in Jenkins

There are several ways to set up a distributed build farm in Jenkins, depending on your operating systems and network architecture. The fact that a build job is running on a slave and how that slave is managed is transparent to the end-user; build results and artifacts always end up on the master server.

Creating a new Jenkins slave node is straightforward. Go to the Manage Jenkins screen, click on Manage Nodes, and then click on New Node. This screen displays the list of slave agents (also known as "Nodes") (see Figure 11.1, "Managing slave nodes").

**Figure 11.1. Managing slave nodes**

There are several strategies for managing Jenkins slave nodes, depending on your target operating systems and architectural considerations. These strategies affect the way you configure your slave nodes. In the following sections, we will look at the most frequently used methods:

- The master starts the slave agents via SSH
- Starting the slave agent manually using Java Web Start
- Installing the slave agent as a Windows service
- Starting the slave agent directly from the command line on the slave machine

Each strategy has its advantages and disadvantages. Let's examine each one in detail.

#### 11.3.1 The Master Starts the Slave Agent Using SSH

If you are working in a Unix environment, using SSH to start a Jenkins slave is the most convenient method. Jenkins has a built-in SSH client, and most Unix environments support SSH out of the box.

To create a Unix-based slave, click on the New Node button. Enter the name and type of your slave (see Figure 11.2, "Creating a new slave node"). At the time of writing, only "dumb slaves" are supported, which are passive and respond to build job requests from the master.

**Figure 11.2. Creating a new slave node**

Provide a unique name for your slave. When you click OK, Jenkins will prompt you for more specific details about your slave machine (see Figure 11.3, "Creating a Unix slave node").

**Figure 11.3. Creating a Unix slave node**

The name should be unique and URL-friendly. The description is for human consumption and can indicate why you would use this slave. The number of executors defines how many concurrent build jobs the node can execute.

Every Jenkins slave needs a dedicated directory on the slave machine for running build jobs. Define this directory in the Remote FS root field. Nothing critical is stored here, so backups are usually not necessary.

Labels are useful for categorizing build nodes. You can define labels and configure build jobs to run only on slaves with specific labels. For example, you could configure WebDriver/Selenium tests to run only on slaves with the "windows" label.

The Usage field lets you configure how intensively Jenkins will use the slave. You can choose to use it as much as possible, reserve it for dedicated build jobs, or bring it online as required.

The launch method determines how Jenkins starts the node. For Unix machines, choose "Launch slave agents on Unix machines via SSH." Provide additional details like the host name, login, password, and port number. You can also use a private key file for password-less authentication.

You can configure when Jenkins starts and stops the slave. By default, Jenkins keeps the slave running and uses it whenever required. Alternatively, Jenkins can take the slave offline when it is not needed to conserve system resources.

Jenkins needs to know where to find the build tools on the slave machines. If you have configured automatic installation, no extra configuration is needed. Otherwise, provide the local paths for the tools.

Once configured, your new slave node will appear in the list of computers on the Jenkins Nodes page (see Figure 11.6, "Your new slave node in action").

**Figure 11.6. Your new slave node in action**

#### 11.3.2 Starting the Slave Agent Manually Using Java Web Start

Another option is to start a slave agent using Java Web Start (JNLP). This approach is useful if the server cannot connect to the slave, such as when the slave is behind a firewall. It works on any operating system but is more commonly used for Windows slaves.

To create a JNLP slave, click on the New Node menu entry in the Nodes screen. Choose "Launch slave agents via JNLP" in the Launch Method field (see Figure 11.7, "Creating a slave node for JNLP").

**Figure 11.7. Creating a slave node for JNLP**

Log on to the slave machine and open the Slave node screen in a browser. Click the Launch button to start the slave agent (see Figure 11.8, "Launching a slave via Java Web Start").

**Figure 11.8. Launching a slave via Java Web Start**

If successful, a small window will indicate that the slave agent is running (see Figure 11.9, "The Jenkins slave agent in action").

**Figure 11.9. The Jenkins slave agent in action**

For a more reliable approach, start the slave from the command line:

```sh
javaws http://build.myorg.com/jenkins/computer/windows-slave-1/slave-agent.jnlp
```

If security is enabled, Jenkins will use a nonstandard port. If this port is inaccessible, the slave will fail to start (see Figure 11.10, "The Jenkins slave failing to connect to the master").

**Figure 11.10. The Jenkins slave failing to connect to the master**

To resolve this, configure a fixed port in the System configuration screen (see Figure 11.11, "Configuring the Jenkins slave port").

**Figure 11.11. Configuring the Jenkins slave port**

#### 11.3.3 Installing a Jenkins Slave as a Windows Service

To ensure the slave starts automatically on a Windows machine, install it as a Windows service. Select the "Install as Windows Service" menu option in the File menu of the slave agent window (see Figure 11.12, "Installing the Jenkins slave as a Windows service").

**Figure 11.12. Installing the Jenkins slave as a Windows service**

Once installed, the slave will start automatically and can be managed like any other Windows service (see Figure 11.13, "Managing the Jenkins Windows service").

**Figure 11.13. Managing the Jenkins Windows service**

#### 11.3.4 Starting the Slave Node in Headless Mode

You can also start a slave agent in headless mode from the command line. This is useful if you don't have a user interface available, such as on a Unix machine. Use the `slave.jar` file located in `JENKINS_HOME/war/WEB-INF/slave.jar`:

```sh
java -jar slave.jar -jnlpUrl http://build.myorg.com/jenkins/computer/windows-slave-1/slave-agent.jnlp
```

If authentication is required, pass the `-auth username:password` option:

```sh
java -jar slave.jar -jnlpUrl http://build.myorg.com/jenkins/computer/windows-slave-1/slave-agent.jnlp -auth username:password
```

By following these steps, you can effectively set up and manage a distributed build farm using Jenkins.