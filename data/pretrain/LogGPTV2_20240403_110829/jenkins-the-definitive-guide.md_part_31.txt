the next step in your project, and tick the “Require manual build executor” option (see Figure 10.55,
“Configuring a manual step in the build pipeline”).
Figure 10.55. Configuring a manual step in the build pipeline
Once you have set up your build process to your satisfaction, you can configure the build pipeline view.
You can create this view just like any other view (see Figure 10.56, “Creating a Build Pipeline view”).
Figure 10.56. Creating a Build Pipeline view
There is a trick when it comes to configuring the view, however. At the time of writing, there is no menu
option or button that lets you configure the view directly. In fact, you need to enter the URL manually.
Fortunately, this is not difficult: just add /configure to the end of the URL shown when you are
displaying this view. For example, if you have named your view “phoenix-build-pipeline”, as shown
here, the URL to configure this view would be http://my_jenkins_server/view/phoenix-
build-pipeline. (see Figure 10.57, “Configuring a Build Pipeline view”).
302
Figure 10.57. Configuring a Build Pipeline view
The most important thing to configure in this screen is the initial job. This marks the starting point of
your build pipeline. You can define multiple build pipeline views, each with a different starting job.
You can also configure the maximum number of build sequences to appear on the screen at once.
Once you have configured the starting point, you can return to the view to see the current state of your
build pipeline. Jenkins displays the successive related build jobs horizontally, using a color to indicate
the outcome of each build (Figure 10.58, “A Build Pipeline in action”). There is a column for each build
job in the pipeline. Whenever the initial build job kicks off, a new row appears on this page. As the
build progresses through the successive build jobs in the pipeline, Jenkins will add a colored box in
the successive columns, indicating the outcome of each stage. You can click on the box to drill down
into a particular build result for more details. Finally, if a manual execution is required, a button will
be displayed where the user can trigger the job.
303
Figure 10.58. A Build Pipeline in action
This plugin is still relatively new, and does not integrate with all of the other plugins we have seen here.
In particular, it is really designed for a linear build pipeline, and does not cope well with branches or
parallel build jobs. Nevertheless, it does give an excellent global vision of a build pipeline.
10.8. Conclusion
Continuous Integration build jobs are much more than simply the scheduled execution of build scripts. In
this chapter we have reviewed a number of tools and techniques enabling you to go beyond your typical
build jobs, combining them so that they can work together as part of a larger process. We have seen how
parameterized and multiconfiguration build jobs add an element of flexibility to ordinary build jobs by
allowing you to run the same build job with different sets of parameters. Other tools help coordinate and
orchestrate groups of related build jobs. The Joins and Locks and Latches plugins helps you coordinate
build jobs running in parallel. And the Build Promotions and Build Pipelines plugins, with the help of
the Copy Artifacts plugin, make it relatively easy to design and configure complex build promotion
strategies for your projects.
304
Chapter 11. Distributed Builds
11.1. Introduction
Arguably one of the more powerful features of Jenkins is its ability to dispatch build jobs across a large
number of machines. It is quite easy to set up a farm of build servers, either to share the load across
multiple machines, or to run build jobs in different environments. This is a very effective strategy which
can potentially increase the capacity of your CI infrastructure dramatically.
Distributed builds are generally used either to absorb extra load, for example absorbing spikes in
build activity by dynamically adding extra machines as required, or to run specialized build jobs in
specific operating systems or environments. For example, you may need to run particular build jobs
on a particular machine or operating system. For example, if you need to run web tests using Internet
Explorer, you will need to be use a Windows machine. Or one of your build jobs may be particularly
resource-heavy, and need to be run on its own dedicated machine so as not to penalize your other build
jobs.
Demand for build servers can also fluctuate over time. If you are working with product release cycles,
you may need to run a much higher number of builds jobs towards the end of the cycle, for example,
when more comprehensive functional and regression test suites may be more frequent.
In this chapter, we will discuss how to set up and manage a farm of build servers using Jenkins.
11.2. The Jenkins Distributed Build Architecture
Jenkins uses a master/slave architecture to manage distributed builds. Your main Jenkins server (the one
we have been using up until present) is the master. In a nutshell, the master’s job is to handle scheduling
build jobs, dispatching builds to the slaves for the actual execution, monitor the slaves (possibly taking
them online and offline as required) and recording and presenting the build results. Even in a distributed
architecture, a master instance of Jenkins can also execute build jobs directly.
The job of the slaves is to do as they are told, which involves executing build jobs dispatched by the
master. You can configure a project to always run on a particular slave machine, or a particular type of
slave machine, or simply let Jenkins pick the next available slave.
A slave is a small Java executable that runs on a remote machine and listens for requests from the
Jenkins master instance. Slaves can (and usually do) run on a variety of operating systems. The slave
instance can be started in a number of different ways, depending on the operating system and network
architecture. Once the slave instance is running, it communicates with the master instance over a TCP/
IP connection. We will look at different setups in the rest of this chapter.
11.3. Master/Slave Strategies in Jenkins
There are a number of different ways that you can configure set up a distributed build farm using Jenkins,
depending on your operating systems and network architecture. In all cases, the fact that a build job is
being run on a slave, and how that slave is managed, is transparent for the end-user: the build results
and artifacts will always end up on the master server.
Creating a new Jenkins slave node is a straightforward process. First, go to the Manage Jenkins screen
and click on Manage Nodes. This screen displays the list of slave agents (also known as “Nodes” in
more politically correct terms), shown in Figure 11.1, “Managing slave nodes”. From here, you can set
up new nodes by clicking on the New Node button. You can also configure some of the parameters
related to your distributed build setup (see Section 11.5, “Node Monitoring”).
Figure 11.1. Managing slave nodes
There are several different strategies when it comes to managing Jenkins slave nodes, depending on
your target operating systems and other architectural considerations. These strategies affect the way you
configure your slave nodes, so we need to consider them separately. In the following sections, we will
look at the most frequently used ways to install and configure Jenkins slaves:
• The master starts the slave agents via ssh
• Starting the slave agent manually using Java Web Start
• Installing the slave agent as a Window service
• Starting the slave agent directly from the command line on the slave machine from the command
line
Each of these strategies has its uses, advantages, and inconveniences. Let’s look at each in turn.
11.3.1. The Master Starts the Slave Agent Using SSH
If you are working in a Unix environment, the most convenient way to start a Jenkins slave is
undoubtedly to use SSH. Jenkins has its own build-in SSH client, and almost all Unix environments
support SSH (usually sshd) out of the box.
306
To create a Unix-based slave, click on the New Node button as we mentioned above. This will prompt
you to enter the name of your slave, and its type (see Figure 11.2, “Creating a new slave node”). At the
time of writing, only “dumb slaves” are supported out of the box; “dumb” slaves are passive beasts, that
simply respond to build job requests from the master node. This is the most common way to set up a
distributed build architecture, and the only option available in a default installation.
Figure 11.2. Creating a new slave node
In this screen, you simply need to provide a name for your slave. When you click on OK, Jenkins will
let you provide more specific details about your slave machine (see Figure 11.3, “Creating a Unix slave
node”).
Figure 11.3. Creating a Unix slave node
The name is simply a unique way of identifying your slave machine. It can be anything, but it may help
if the name reminds you of the physical machine it is running on. It also helps if the name is file-system
and URL-friendly. It will work with spaces, but you will make life easier for yourself if you avoid them.
So “Slave-1” is better than “Slave 1”.
307
The description is also purely for human consumption, and can be used to indicate why you would use
this slave rather than another.
Like on the main Jenkins configuration screen, the number of executors lets you define how many
concurrent build job this node can execute.
Every Jenkins slave node also needs a place that it can call home, or, more precisely, a dedicated
directory on the slave machine that the slave agent can use to run build jobs. You define this directory
in the Remote FS root field. You need to provide a local, OS-specific path, such as /var/jenkins for
a Unix machine, or C:\jenkins on Windows. Nothing mission-critical is stored in this directory—
everything important is transferred back to the master machine once the build is done. So you usually
don’t need to be so concerned with backing up these directories as you should be with the master.
Labels are a particularly useful concept when your distributed build architecture begins to grow in size.
You can define labels, or tags, to each build node, and then configure a build job to run only on a slave
node with a particular label. Labels might relate to operating systems (unix, windows, macosx, etc.),
environments (staging, UAT, development, etc.) or any criteria that you find useful. For example, you
could configure your automated WebDriver/Selenium tests to run using Internet Explorer, but only on
slave nodes with the “windows” label.
The Usage field lets you configure how intensively Jenkins will use this slave. You have the choice of
three options: use it as much as possible, reserve it for dedicated build jobs, or bring it online as required.
The first option, “Utilize this slave as much as possible”, tells Jenkins to use this slave freely as soon
as it becomes available, for any build job that it can run. This is by far the most commonly used one,
and is generally what you want.
There are times, however, when this second option comes in handy. In the project configuration, you can
tie a build job to a specific node—this is useful when a particular task, such as automated deployment
or a performance test suite, needs to be executed on a specific machine. In this case, the “Leave this
machine for tied jobs only” option makes good sense. You can take this further by setting the maximum
number of Executors to 1. In this case, not only will this slave be reserved for a particular type of job, but
it will only ever be able to run one of these build jobs at any one time. This is a very useful configuration
for performance and load tests, where you need to reserve the machine so that it can execute its tests
without interference.
The third option is “Take this slave on-line when in demand and off-line when idle” (see Figure 11.4,
“Taking a slave off-line when idle”). As the name indicates, this option tells Jenkins to bring this slave
online when demand is high, and to take it offline when demand subsides. This lets you keep some
build slaves in reserve for periods of heavy use, without having to maintain a slave agent running on
them permanently. When you choose this option, you also need to provide some extra details. The “In
demand delay” indicates how many minutes jobs must have been waiting in the queue before this slave
will be brought online. The Idle delay indicates how long the slave needs to be idle before Jenkins will
take it off-line.
308
Figure 11.4. Taking a slave off-line when idle
The launch method is where you decide how Jenkins will start the node, as we mentioned earlier. For
the configuration we are discussing here, you would choose “Launch slave agents on Unix machines
via SSH”. The Advanced button lets you enter the additional details that Jenkins needs to connect to
the Unix slave machine: a host name, a login and password, and a port number. You can also provide a
path to the SSH private key file on the master machine (e.g., id_dsa or id_rsa) to use for “password-
less” Public/Private Key authentication.
You can also configure when Jenkins starts and stops the slave. By default, Jenkins will simply keep the
slave running and use it whenever required (the “Keep this slave on-line as much as possible” option).
If Jenkins notices that the slave has gone offline (for example due to a server reboot), it will attempt
to restart it if it can. Alternatively, Jenkins can be more conservative with your system resources, and
take the slave offline when it doesn’t need it. To do this, simply choose the “Take this slave on-line
when in demand and off-line when idle” option. This is useful if you have regular spikes and lulls of
build activity, as an unused slave can be taken offline to conserve system resources for other tasks, and
brought back online when required.
Jenkins also needs to know where it can find the build tools it needs for your build jobs on the slave
machines. This includes JDKs as well as build tools such as Maven, Ant, and Gradle. If you have
configured your build tools to be automatically installed, you will usually have no extra configuration to
do for your slave machines; Jenkins will download and install the tools as required. On the other hand,
if your build tools are installed locally on the slave machine, you will need to tell Jenkins where it can
find them. You do this by ticking the Tool Locations checkbox, and providing the local paths for each
of the tools you will need for your build jobs (see Figure 11.5, “Configuring tool locations”).
309
Figure 11.5. Configuring tool locations
You can also specify environment variables. These will be passed into your build jobs, and can be a
good way to allow your build jobs to behave differently depending on where they are being executed.
Once you have done this, your new slave node will appear in the list of computers on the Jenkins Nodes
page (see Figure 11.6, “Your new slave node in action”).
Figure 11.6. Your new slave node in action
11.3.2. Starting the Slave Agent Manually Using Java Web Start
Another option is to start a slave agent from the slave machine itself using Java Web Start (JNLP).
This approach is useful if the server cannot connect to the slave, for example if the slave machine is
310
running on the other side of a firewall. It works no matter what operating system your slave is running
on, however it is more commonly used for Windows slaves. It does suffer from a few major drawbacks:
the slave node cannot be started, or restarted, automatically by Jenkins. So, if the slave goes down, the
master instance cannot restart it.
When you do this on a Windows machine, you need to start the Jenkins slave manually at least once.
This involves opening a browser on the machine, opening the slave node page on the Jenkins master,
and launching the slave using a very visible JNLP icon. However, once you have launched the slave,
you can install it as a Windows service.
There are also times when you need to do this from the command line, in a Unix environment. You
may need to do this because of firewalls or other networking issues, or because SSH is not available
in your environment.
Lets step through both these processes.
The first thing you need to do in all cases is create a new slave. As for any other slave node, you do this
by clicking on the New Node menu entry in the Nodes screen. When entering the details concerning
your slave node, make sure you choose “Launch slave agents via JNLP” in the Launch Method field
(see Figure 11.7, “Creating a slave node for JNLP”). Also remember that if this is to be a Windows slave
node, the Remote FS root needs to be a Windows path (such as C:\jenkins-slave). This directory
does not have to exist: Jenkins will create it automatically if it is missing.
Figure 11.7. Creating a slave node for JNLP
Once you have saved this configuration, Next, log on to the slave machine and open the Slave node
screen in a browser, as shown in Figure 11.8, “Launching a slave via Java Web Start”. You will see
a large orange Launch button—if you click on this button, you should be able to start a slave agent
directly from within your browser.
311
Figure 11.8. Launching a slave via Java Web Start
If all goes well, this will open up a small window indicating that your slave agent is now running (see
Figure 11.9, “The Jenkins slave agent in action”).
Figure 11.9. The Jenkins slave agent in action
Browsers are fickle, however, and Java Web Start is not always easy to use. This approach usually works
best with Firefox, although you must have the Java JRE installed beforehand to make Firefox Java-
aware. Using JNLP with Internet Explorer requires some (considerable) fiddling to associate *.jnlp
files with the Java Web Start executable, a file called javaws, which you will find in the Java bin
directory. In fact it is probably easier just to start it from the command line as discussed below.
A more reliable, albeit low-level, approach is to start the slave from the command line. To do this,
simply invoke the javaws executable from a command window as shown here:
C:> javaws http://build.myorg.com/jenkins/computer/windows-slave-1/slave-agent.jnlp
312
The exact command that you need to execute, including the correct URL, is conveniently displayed on
the Jenkins slave node window just below the JNLP launch button (see Figure 11.8, “Launching a slave
via Java Web Start”).
If security is activated on your Jenkins server, Jenkins will communicate with the slave on a specific
nonstandard port. If for some reason this port is inaccessible, the slave node will fail to start and will
display an error message similar to the one shown in Figure 11.10, “The Jenkins slave failing to connect
to the master”.
Figure 11.10. The Jenkins slave failing to connect to the master
This is usually a sign that a firewall is blocking a port. By default, Jenkins picks a random port to use
for TCP communication with its slaves. However if you need to have a specific port that your firewall
will authorize, you can force Jenkins to use a fixed port in the System configuration screen by selecting
Fixed in the “TCP port for JNLP slave agents” option, as shown in Figure 11.11, “Configuring the
Jenkins slave port”.
Figure 11.11. Configuring the Jenkins slave port
11.3.3. Installing a Jenkins Slave as a Windows Service
Once you have the slave up and running on your Windows machine, you can save yourself the bother of
having to restart it manually each time your machine reboots by installing it as a Windows service. To
do this, select the “Install as Windows Service” menu option in the File menu of the slave agent window
(see Figure 11.12, “Installing the Jenkins slave as a Windows service”).
313
Figure 11.12. Installing the Jenkins slave as a Windows service
Once this is done, your Jenkins slave node will start automatically whenever the machine starts up,
and can be administered just like any other Windows service (see Figure 11.13, “Managing the Jenkins
Windows service”).
Figure 11.13. Managing the Jenkins Windows service
11.3.4. Starting the Slave Node in Headless Mode
You can also start a slave agent in headless mode, directly from the command line. This is useful if
you don’t have a user interface available, for example if you are starting a JNLP slave node on a Unix
machine. If you are working with Unix machines, it is generally easier and more flexible just to use
an SSH connection, but there are sometimes network or architecture constraints that prevent you from
using SSH. In cases like this, it is still possible to run a slave node from the command line.
To start the slave node this way, you need to use Jenkins’ slave.jar file. You can find this in
JENKINS_HOME/war/WEB-INF/slave.jar. Once you have located this file and copied it onto the
Windows slave machine, you can run it as follows:
java -jar slave.jar \
-jnlpUrl http://build.myorg.com/jenkins/computer/windows-slave-1/slave-agent.jnlp
And if your Jenkins server requires authentication, just pass in the -auth username:password option:
314
java -jar slave.jar \
-jnlpUrl http://build.myorg.com/jenkins/computer/windows-slave-1/slave-agent.jnlp