title:RT-TEE: Real-time System Availability for Cyber-physical Systems
using ARM TrustZone
author:Jinwen Wang and
Ao Li and
Haoran Li and
Chenyang Lu and
Ning Zhang
4
0
6
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
RT-TEE: Real-time System Availability for
Cyber-physical Systems using ARM TrustZone
Jinwen Wang, Ao Li, Haoran Li, Chenyang Lu, Ning Zhang
Washington University in St. Louis, MO, USA
Abstract—Embedded devices are becoming increasingly per-
vasive in safety-critical systems of the emerging cyber-physical
world. While trusted execution environments (TEEs), such as
ARM TrustZone, have been widely deployed in mobile platforms,
little attention has been given to deployment on real-time cyber-
physical systems, which present a different set of challenges com-
pared to mobile applications. For safety-critical cyber-physical
systems, such as autonomous drones or automobiles, the current
TEE deployment paradigm, which focuses only on conﬁdentiality
and integrity, is insufﬁcient. Computation in these systems also
needs to be completed in a timely manner (e.g., before the car hits
a pedestrian), putting a much stronger emphasis on availability.
To bridge this gap, we present RT-TEE, a real-time trusted
execution environment. There are three key research challenges.
First, RT-TEE bootstraps the ability to ensure availability using
a minimal set of hardware primitives on commodity embed-
ded platforms. Second, to balance real-time performance and
scheduler complexity, we designed a policy-based event-driven
hierarchical scheduler. Third, to mitigate the risks of having
device drivers in the secure environment, we designed an I/O
reference monitor that leverages software sandboxing and driver
debloating to provide ﬁne-grained access control on peripherals
while minimizing the trusted computing base (TCB).
We implemented prototypes on both ARMv8-A and ARMv8-M
platforms. The system is tested on both synthetic tasks and real-
life CPS applications. We evaluated rover and plane in simulation
and quadcopter both in simulation and with a real drone.
I. INTRODUCTION
The software of modern cyber-physical systems (CPSs) is
often highly complex. For example, the code in a modern
automobile such as the Chevy Volt is as complex as the total
ﬂight software of the Boeing 787 airplane [1]. Under the
pressure to include more features and to save on production
cost, weight, and testing, CPS system designers are consoli-
dating more and more functionalities on a single system-on-
chip (SoC) [2], [3]. Numerous software vulnerabilities have
been discovered on modern cyber-physical systems such as
drones [4], [5] and automobiles [6]. While some of these
vulnerabilities are only nuisances [7], others allow attackers
to escalate into system privilege [7], [8], [4], [9] and can have
life or death implications [6].
Lack of availability protection in existing defenses: Rec-
ognizing the importance of embedded system security, there
has been signiﬁcant interest in hardening the software using
security mechanisms, such as control-ﬂow integrity, privilege
minimization, specialized reference monitor, etc. [10], [11],
[12], [13]. Common to all software approaches is the reliance
on a trusted OS. However, many existing embedded systems,
microcontrollers in particular, have a large amount of code in
the privilege mode [14] for convenience of development or
performance.
Trusted Execution Environment [15], [16], [17], [18] is a
complementary approach that provides a powerful abstraction
of a trusted machine even if the system software is compro-
mised. TEE technologies, such as TrustZone, are now a de
facto solution for mobile device security [19], [20], [21], [22],
[23], [24], [25], [26]. However, similar to all existing software
solutions, when the attackers can escalate their privilege into
the OS, current TEE software stacks offer little assurance
for system availability. Since the current TEE design only
protects computation conﬁdentiality [19] and integrity [20],
management of resources, including process scheduling, is
left to the non-secure OS. Recently, there has been increasing
interest in enabling availability protection using new hardware
designs [27], [28], [29], [30]. However, the application of such
hardware primitives in real-time cyber-physical systems, such
as autonomous drones, remains an open question.
Importance of availability in CPS: A deﬁning characteristic
of real-time CPSs is their continuous interaction with the
physical world. Therefore, it is crucial that system resources
are made available to safety-critical tasks in a timely manner.
For example, the pedestrian detection algorithm on a self-
driving car is a real-time task with a direct connection to
the physical world process. A delay in the execution of this
workload by the attacker can render the result utterly useless,
since a catastrophic accident may have already happened, as
recently demonstrated in [31], [32]. To further motivate the
problem, we have also developed a new attack called time
warping attack, which exploits access to Dynamic Voltage
and Frequency Scaling (DVFS) to tamper with the timing
characteristics of critical control components protected with
TEE, leading to control destabilization crashing the robot.
Real-Time Trusted Execution Environment: In this paper,
we assume a strong adversary that can exploit vulnerabilities
in CPS ﬁrmware [5], [4], [6] to take control of the OS, and
we address the research question of how to use security prim-
itives on commodity embedded hardware to provide system
availability assurance for real-world CPSs.
Our main contribution is the design, implementation, and
evaluation of RT-TEE, a real-time trusted execution environ-
ment that protects system availability using hardware-assisted
system resource partitioning on embedded platforms, such as
ARM TrustZone. Availability entails the guarantee of timely
access to system resources, including both computation (con-
© 2022, Jinwen Wang. Under license to IEEE.
DOI 10.1109/SP46214.2022.00144
352
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:09 UTC from IEEE Xplore.  Restrictions apply. 
trol) and I/O (sensing and actuation). However, moving the
critical processes and resource management into the TEE not
only signiﬁcantly increases the system trusted computing base
(TCB), but also degrades the performance. There are three key
research challenges:
Challenge 1) Minimal hardware abstraction for availability
guarantee in CPS: To provide availability guarantee, the TCB
has to assert complete mediation over resources needed by the
safety/security critical tasks for availability. However, resource
management is commonly implemented by the untrusted OS
in existing TEE designs. Building on the concept of control
loops, we formulate the requirements on the minimal set of
capabilities the hardware has to provide and show how they
can be met using primitives from the TEE. This allows us to
construct the rest of the design using a minimized hardware
abstraction. From a high level, to ensure availability for CPS,
RT-TEE relies on the secure timer to trap execution back
to TCB to provide computational availability for the control.
It also relies on a secure I/O reference monitor to enforce
isolation and protection for sensing and actuation.
Challenge 2) Real-time computation availability: Due to the
strong temporal afﬁnities of CPS, computation resources not
only have to be available, but also have to be in real-time.
Contrary to the popular belief that real-time processes have to
ﬁnish in a very short time, the key requirement is on meeting
the deadlines from the perspective of real-time computing [33],
[34]. This is typically accomplished using a trusted real-time
scheduler. A naive approach is to directly implement such
a scheduler inside the TCB for all secure and non-secure
processes, but it signiﬁcantly increases the TCB complexity.
Another approach is to always complete the secure tasks
ﬁrst, also known as idle scheduling. However, this design
can lead to unnecessary starvation of non-secure tasks, which
hurts overall system performance since critical/secure tasks
may not need to be executed immediately; they just need to
be completed before the deadlines. For example, the battery
checking task is secure safety-critical but doesn’t have to be
executed immediately, while the video streaming application
on the drone is not safety-critical but should be accommodated
to the extent that secure tasks do not miss their deadlines.
To minimize the penalty on performance without signiﬁ-
cantly increasing the complexity of the secure scheduler, we
propose a policy-based event-driven hierarchical scheduler.
Our hierarchical scheduler has two layers. Only the top-
level scheduler has to be added to the TCB to guarantee
secure processes have the resources to meet the deadlines.
This is because the theoretical guarantee on the completion of
secure tasks by compositional schedulability analysis makes
no assumption on the behavior of the non-secure environment.
Challenge 3) Fine-grained peripheral availability: Naive use
of TEE to protect I/O resources is neither sufﬁcient nor
effective for two reasons. It is insufﬁcient because device level
protection may not be universally available on all peripherals.
Using SPI bus as an example, the access control is coarse
grained, only specifying if a security domain has access to the
bus or not. It is also not effective because migrating device
drivers into the TCB will signiﬁcantly increase its complexity.
To enable ﬁne-grained access control on the peripherals, we
designed and implemented an I/O reference monitor on top of
TEE to remove the assumption on trusted drivers. To minimize
the impact on the TCB, we leveraged the unique characteristics
of cyber-physical systems, where each control loop performs
the same set of I/O actions, to allow for signiﬁcant driver de-
bloating, where only a subset of the driver functionality is
maintained for sensing and actuation. To enable feature-rich
drivers without increasing the TCB, we proposed to sandbox
the driver in conjunction with the I/O reference monitor to
prevent compromised drivers from harming the system.
Prototype and Contribution: We have implemented a pro-
totype on both ARMv8-A and ARMv8-M architecture, using
Raspberry Pi and NXP LPC 55S69 development board, respec-
tively. Using Raspberry Pi as the controller running ArduPilot,
we assembled a quadcopter to test the impact of security
protection on both real-time properties and control variation.
To show how the environment can be used, we presented
two concrete use cases on autonomous drones, protecting
the entire ﬂight controller or just the fail-safe controller for
emergency recovery of the autonomous aerial vehicle. To
evaluate the performance and understand the limitation of our
proposed approach, we conducted a series of experiments on
both synthetic workloads and real-life applications on both
simulator and real-world systems. We found that our RT-TEE
introduces a small overhead in task execution time on real-
world drone applications.
In Summary, we have made the following contributions,