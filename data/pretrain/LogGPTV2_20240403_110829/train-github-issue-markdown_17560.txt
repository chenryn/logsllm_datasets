The compiler API does compile the source code and emits a sourcemap, but the
filenames in the emit map are not correct.
This example shows a basic discrepancy:
    const [diag, emit] = await Deno.compile("https://deno.land/std@0.64.0/examples/welcome.ts");
    console.log(Object.keys(emit));
    /*
    [
      "https://deno.land/std@0.64.0/examples/welcome.js.map",
      "https://deno.land/std@0.64.0/examples/welcome.js"
    ]
    */
    const [diagHash, emitHash] = await Deno.compile(
      "https://deno.land/std@0.64.0/examples/welcome.ts#1"
    );
    console.log(Object.keys(emitHash));
    /*
    [
      "https://deno.land/std@0.64.0/examples/welcome.ts#1.js.map",
      "https://deno.land/std@0.64.0/examples/welcome.ts#1.js"
    ]
    */
Using something with a circular dependency like
`https://deno.land/std@0.64.0/http/server.ts` obviously renders both because
the hash or search is only in the root module:
    const [diag, emit] = await Deno.compile("https://deno.land/std@0.64.0/http/server.ts?abc=def");
    console.log(Object.keys(emit));
    /*
    [
      ...
      "https://deno.land/std@0.64.0/http/server.js.map",
      "https://deno.land/std@0.64.0/http/server.js",
      ...
      "https://deno.land/std@0.64.0/http/server.ts?abc=def.js.map",
      "https://deno.land/std@0.64.0/http/server.ts?abc=def.js"
    ]
    */