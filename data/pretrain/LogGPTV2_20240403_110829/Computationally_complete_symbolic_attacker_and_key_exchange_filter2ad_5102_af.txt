### 21. Key-Dependent Message (KDM) Security

For some (hence for all) fresh random input \( R' \) generated inside \( S \), the following conditions hold:
- If \( \mathcal{M}_c, \Pi, S, \sigma \models 21 (\hat{\varphi}, \vec{x}, \{0\}) \), then
  \[
  \mathcal{M}_c, \Pi, S, \sigma \models 21 (\hat{\varphi}, \vec{x}, \{AOO\})
  \]
- If \( \mathcal{M}_c, \Pi, S, \sigma \models 22 (\hat{\varphi}, \vec{x}, \{0\}) \), then
  \[
  \mathcal{M}_c, \Pi, S, \sigma \models 22 (\hat{\varphi}, \vec{x}, \{AOO\})
  \]

In the KDM case, \( R \) is generated honestly and statistically independently of the interpretations of \( \hat{\varphi} \), \( \vec{x} \), and \( x \). For some (hence for all) fresh random input \( R' \) generated inside \( S \):
- If \( \mathcal{M}_c, \Pi, S, \sigma \models 21 (\hat{\varphi}, \vec{x}, \{x\}) \), then
  \[
  \mathcal{M}_c, \Pi, S, \sigma \models 21 (\hat{\varphi}, \vec{x}, \{0\})
  \]
- If \( \mathcal{M}_c, \Pi, S, \sigma \models 22 (\hat{\varphi}, \vec{x}, \{x\}) \), then
  \[
  \mathcal{M}_c, \Pi, S, \sigma \models 22 (\hat{\varphi}, \vec{x}, \{0\})
  \]

Let \( \mathcal{M}_c, \Pi, S, \sigma | c = \hat{\varphi}, \vec{x} \models O_x \) if and only if \( \mathcal{M}_c, \Pi, S, \sigma | s4 = 23 (\hat{\varphi}, \vec{x} \models O_x) \). Recall from Section 6 that 23 means "there is a non-negligible set \( S' \subseteq S \) such that for all \( S'' \)...". Note that while \( R \) does not have to be generated inside \( S \), \( R' \) does. This is essential for the usability of the axioms, as the non-negligible sets on which we need to apply the axioms may depend on values of an encryption, and hence values of \( R \).

In the KDM case, \( x \) does not have to be computed from \( \hat{\varphi} \) and \( \vec{x} \); it could be a secret nonce. This corresponds to the fact that in the semantics of \( \Box_O \) in the KDM case, we allowed the functions submitted to the oracles to depend on such items not known to the protocol adversary.

### 8.1.2 Axioms for CCA2 Key Compromise

We now present the axioms for key compromise. First, the core axioms for which soundness does not need CCA2 security.

#### Core Axioms for the Key Compromise Predicate

- **Same Encryption Constraint**: Let \( SameEnc(\vec{x}; \vec{y}) \) be the constraint as before. Then
  \[
  SameEnc(\vec{x}; \vec{y}) \land \vec{x}, x = \vec{y}, y \rightarrow (\hat{\varphi}, \vec{x} \models O_x \leftrightarrow \hat{\varphi}, \vec{y} \models O_y)
  \]
- **Derivability Implies Compromise**: 
  \[
  \hat{\varphi}, \vec{x} \vdash O_K \rightarrow \hat{\varphi}, \vec{x} \models O_K
  \]
  If \( K \) is computable for the adversary, then it is compromised.
- **Increasing Capabilities for Key Compromise**:
  - **Commutativity**: If \( \vec{x}' \) is a permutation of \( \vec{x} \), then
    \[
    \hat{\varphi}, \vec{x} \models O_K \leftrightarrow \hat{\varphi}, \vec{x}' \models O_K
    \]
  - **Transitivity**: 
    \[
    \hat{\varphi}, \vec{x} \vdash \vec{y} \land \hat{\varphi}, \vec{x}, \vec{y} \models O_K \rightarrow \hat{\varphi}, \vec{x} \models O_K
    \]
  The intuitive reason is clear: \( \vec{y} \) just contains extra information that can be computed from \( \hat{\varphi}, \vec{x} \), so it is not actually needed in the compromise. This, along with the derivability axiom, implies:
  \[
  \hat{\varphi}, \vec{x}, f(\vec{x}) \models O_K \rightarrow \hat{\varphi}, \vec{x} \models O_K
  \]
  With the increasing capabilities axiom, we get:
  \[
  \hat{\varphi}, f(\vec{x}) \models O_K \rightarrow \hat{\varphi}, \vec{x} \models O_K
  \]
  We refer to these as function application.
- **Uncompromised Keys Securely Encrypt**:
  - **IND-CCA2 Case**: If \( O \) is either \( aic2 \) or \( sic2 \), then
    \[
    RanGen(K) \land fresh(R; \hat{\varphi}, \vec{x}, x, y, K) \land \hat{\varphi}, \vec{x}, \{x\}_R^e \vdash O_y \land \vec{x}, x, y \models \hat{\varphi}
    \]
    \[
    \rightarrow \hat{\varphi}, \vec{x}, x \models O_K \lor \hat{\varphi}, \vec{x} \vdash O_y
    \]
    This formula means that if the key is uncompromised, i.e., \( \hat{\varphi}, \vec{x}, x \not\models O_K \), then \( \{x\}_R^e \) cannot help in deriving \( y \). In other words, if it is possible to derive \( y \) with \( \{x\}_R^e \), then it is also possible to derive it without \( \{x\}_R^e \).
  - **KDM-CCA2 Case**: If \( O \) is \( akc2 \) or \( skc2 \), then
    \[
    RanGen(K) \land fresh(R; \hat{\varphi}, \vec{x}, x, y, K) \land \hat{\varphi}, \vec{x}, \{x\}_R^e \vdash O_y \land \vec{x}, x, y \models \hat{\varphi}
    \]
    \[
    \rightarrow \hat{\varphi}, \vec{x} \models O_K \lor \hat{\varphi}, \vec{x} \vdash O_y
    \]
    The difference here from the IND-CCA2 case is that in \( \hat{\varphi}, \vec{x} \models O_K \) there is no \( x \). This corresponds to the fact that the encrypted message \( x \) is allowed to contain the decryption key or leak it somehow together with \( \hat{\varphi}, \vec{x} \).

- **Encryptions with Uncompromised Keys Do Not Compromise**:
  - **IND-CCA2 Case**: If \( O \) is either \( aic2 \) or \( sic2 \), then
    \[
    RanGen(K) \land RanGen(K') \land fresh(R; \hat{\varphi}, \vec{x}, x, K, K') \land \vec{x}, x \models \hat{\varphi} \land \hat{\varphi}, \vec{x}, \{x\}_R^{e'} \models O_K'
    \]
    \[
    \rightarrow \hat{\varphi}, \vec{x}, x \models O_K \lor \hat{\varphi}, \vec{x} \models O_K'
    \]
  - **KDM-CCA2 Case**: If \( O \) is \( akc2 \) or \( skc2 \), then
    \[
    RanGen(K) \land RanGen(K') \land fresh(R; \hat{\varphi}, \vec{x}, x, K, K') \land \vec{x}, x \models \hat{\varphi} \land \hat{\varphi}, \vec{x}, \{x\}_R^{e'} \models O_K'
    \]
    \[
    \rightarrow \hat{\varphi}, \vec{x} \models O_K \lor \hat{\varphi}, \vec{x} \models O_K'
    \]

- **Axioms for Freshly Generated Items**:
  - **Fresh Keys Are Not Compromised**:
    \[
    keyfresh(K; \hat{\varphi}, \vec{x}) \land \vec{x} \models \hat{\varphi} \rightarrow \hat{\varphi}, \vec{x} \not\models O_K
    \]
    This axiom is sound if the encryption for which \( K \) is generated is CCA2 secure.
  - **Fresh Items Do Not Compromise**:
    \[
    fresh(x; \hat{\varphi}, \vec{x}, y) \land \vec{x}, y \models \hat{\varphi} \land \hat{\varphi}, \vec{x}, x \models O_y \rightarrow \hat{\varphi}, \vec{x} \models O_y
    \]

### 8.2.2 Axioms for Unforgeability Key Compromise

- **Same Encryption Constraint**: Let \( SameEnc(\vec{x}; \vec{y}) \) be the constraint as before. Then
  \[
  SameEnc(\vec{x}; \vec{y}) \land \vec{x}, x = \vec{y}, y \rightarrow (\hat{\varphi}, \vec{x} \models ic_x \leftrightarrow \hat{\varphi}, \vec{y} \models ic_y)
  \]
- **Derivability Implies Compromise**:
  \[
  \hat{\varphi}, \vec{x} \vdash K \rightarrow \hat{\varphi}, \vec{x} \models ic_K
  \]
- **Increasing Capabilities for Key Compromise**:
  - **Commutativity**: If \( \vec{x}' \) is a permutation of \( \vec{x} \), then
    \[
    \hat{\varphi}, \vec{x} \models ic_K \leftrightarrow \hat{\varphi}, \vec{x}' \models ic_K
    \]
  - **Transitivity**:
    \[
    \hat{\varphi}, \vec{x} \vdash \vec{y} \land \hat{\varphi}, \vec{x}, \vec{y} \models ic_K \rightarrow \hat{\varphi}, \vec{x} \models ic_K
    \]
- **Encryption with Uncompromised Key Cannot Be Faked**:
  \[
  \hat{\varphi}, \vec{x} \models ic_K \rightarrow \hat{\varphi}, \vec{x}, x \models ic_K
  \]
  \[
  \hat{\varphi}, \vec{x} \models ic_K \rightarrow \hat{\varphi}, \vec{x}' \models ic_K
  \]