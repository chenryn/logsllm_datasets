21 ( ˆφ, (cid:126)x,{0
AOO
• Or Mc, Π, S, σ ||=
21 ( ˆφ, (cid:126)x,{AOO
AOO
( ˆφ, (cid:126)x)}R
eK )
and for some (hence for all) R(cid:48) fresh random input generated
inside S, Mc, Π, S, σ ||=
22 ( ˆφ, (cid:126)x,{AOO
eK ) (cid:54)= AOO
( ˆφ, (cid:126)x)}R
( ˆφ,(cid:126)x)|}R(cid:48)
eK )
1
1
1
1
1
|AOO
|AOO
( ˆφ,(cid:126)x)|}R(cid:48)
( ˆφ,(cid:126)x)|}R(cid:48)
eK )
22 ( ˆφ, (cid:126)x,{0
eK ) = AOO
AOO
21 ( ˆφ, (cid:126)x,{0
In the KDM case
• R is generated honestly, statistically independently of the in-
• Either Mc, Π, S, σ ||=
AOO
21 ( ˆφ, (cid:126)x,{x}R
terpretations of ˆφ, (cid:126)x, x, and Mc, Π, S, σ |c= x (cid:52) ˆφ, (cid:126)x and
22 ( ˆφ, (cid:126)x,{x}R
eK ) = AOO
eK )
and for some (hence for all) R(cid:48) fresh random input generated
inside S, Mc, Π, S, σ ||=
AOO
21 ( ˆφ, (cid:126)x,{0
• Or Mc, Π, S, σ ||=
|x|}R(cid:48)
eK ) (cid:54)= AOO
22 ( ˆφ, (cid:126)x,{0
|x|}R(cid:48)
eK )
AOO
21 ( ˆφ, (cid:126)x,{x}R
eK ) (cid:54)= AOO
22 ( ˆφ, (cid:126)x,{x}R
eK )
and for some (hence for all) R(cid:48) fresh random input generated
inside S, Mc, Π, S, σ ||=
|x|}R(cid:48)
AOO
21 ( ˆφ, (cid:126)x,{0
eK ) = AOO
22 ( ˆφ, (cid:126)x,{0
|x|}R(cid:48)
eK )
Let Mc, Π, S, σ |c= ˆφ, (cid:126)x (cid:73)Ox iff Mc, Π, S, σ |s4= 23( ˆφ, (cid:126)x (cid:73)Ox).
Recall from Section 6 that 23 means "there is a non-negligible
S(cid:48) ⊆ S such that for all S(cid:48)(cid:48)..." Also note that as we required our
non-negligible sets to be in Σf , it is always possible to toss fresh
coins inside the non-negligible sets.
Note that while R does not have to be generated inside S, R(cid:48)
does. In particular, S may actually depend on R, which is essential
for the usability of the axioms, because the non-negligible sets on
which we need to apply the axioms may depend on values of an
encryption, and hence values of R. On the other hand, S is not al-
lowed to depend on R(cid:48), which is essential for proving that a freshly
generated key is not compromised.
Note, in the KDM case, x does not have to be computed from
ˆφ, (cid:126)x, it could be a secret nonce. This corresponds to the fact that in
the semantics of Oin the KDM case (as we noted after the deﬁni-
tion) we allowed the functions submitted to the oracles to depend
on such items not known to the protocol adversary.
8.1.2 Axioms for CCA2 Key Compromise
We now present the axioms for key compromise. First the core
axioms for which soundness does not need CCA2 security.
Core Axioms for the Key Compromise Predicate.
• Let SameEnc((cid:126)x; (cid:126)y) be the constraint as before. Then
SameEnc((cid:126)x; (cid:126)y) ∧ (cid:126)x, x = (cid:126)y, y −→ ( ˆφ, (cid:126)x (cid:73)Ox ↔ ˆφ, (cid:126)y (cid:73)Oy).
• Derivability implies compromise: ˆφ,(cid:126)x OK−→ ˆφ,(cid:126)x (cid:73)OK
If K is computable for the adversary, then it is compromised.
Note, this axiom and the self derivability axiom (from 7.2)
imply that ˆφ, (cid:126)x, K (cid:73)OK
ˆφ, (cid:126)x (cid:73)OK −→ ˆφ, (cid:126)x, x (cid:73)OK
ˆφ, (cid:126)x (cid:73)OK −→ ˆφ, (cid:126)x(cid:48) (cid:73)OK
• Increasing capabilities for key compromise:
• Commutativity: If (cid:126)x(cid:48) is a permutation of (cid:126)x, then
• Transitivity: ˆφ, (cid:126)x O(cid:126)y ∧ ˆφ, (cid:126)x, (cid:126)y (cid:73)OK −→ ˆφ, (cid:126)x (cid:73)OK
The intuitive reason is very clear: (cid:126)y just contains extra infor-
mation, that can be computed from ˆφ, (cid:126)x, so it is not actually
needed in the compromise. This, and the functions are deriv-
able axiom imply ˆφ, (cid:126)x, f ((cid:126)x) (cid:73)O K −→ ˆφ, (cid:126)x (cid:73)O K. With
the increasing capabilities axiom, we get ˆφ, f ((cid:126)x) (cid:73)OK −→
ˆφ, (cid:126)x (cid:73)OK. We refer to these as function application.
• Uncompromised keys securely encrypt:
– If O is either aic2 or sic2, then
RanGen(K) ∧ fresh(R; ˆφ, (cid:126)x, x, y, K)
eK Oy
∧ (cid:126)x, x, y (cid:52) ˆφ ∧ ˆφ, (cid:126)x,{x}R
−→ ˆφ, (cid:126)x, x (cid:73)OK ∨ ˆφ, (cid:126)x Oy
This formula means that if the key is uncompromised,
that is, ˆφ, (cid:126)x, x(cid:54)(cid:73)OK, then {x}R
eK cannot help in de-
riving y. In other words, if it is possible to derive y
with {x}R
eK, then it is also possible to derive it without
{x}R
eK. The freshness and random generation condi-
tions ensure that {x}R
eK is indeed a good encryption
eK or {N}eK
(e.g. {N}N
eK are not good), and also that
y cannot depend on {x}R
eK is not
good). Moreover, (cid:126)x, x, y (cid:52) ˆφ ensures that handles in
these terms are given values the adversary can compute
(otherwise e.g.
taken x = h, the handle h cannot be
dK if dK was never sent, and it cannot be R either).
This formula is completely analogous to the secrecy ax-
iom in [5] but dK (cid:118) ˆφ, (cid:126)x, x there is replaced now with
ˆφ, (cid:126)x, x (cid:73)aic2 K as we can now allow dK to appear
inside a secure encryption for example.
eK (e.g. y = {x}R
– If O is either akc2 or skc2, then
RanGen(K) ∧ fresh(R; ˆφ, (cid:126)x, x, y, K)
eK Oy
∧ (cid:126)x, x, y (cid:52) ˆφ ∧ ˆφ, (cid:126)x,{x}R
−→ ˆφ, (cid:126)x (cid:73)OK ∨ ˆφ, (cid:126)x Oy
The difference here from the axiom for IND-CCA2 se-
curity is that in ˆφ, (cid:126)x (cid:73)O K now there is no x. This
corresponds to the fact that the encrypted message x is
allowed to contain the decryption key, or it may leak it
somehow together with ˆφ, (cid:126)x. For more, see Section 11.
It may be surprising however, that these core axioms do not
require any security of the encryption. It is purely a conse-
quence of the deﬁnition of key compromise and derivability
predicates. (The axiom that requires CCA2 security is the
fresh keys are uncompromised axiom later.)
Here we want to allow x to be any secret thing, such as a
nonce, so only x (cid:52) ˆφ was assumed. That is why in the KDM
deﬁnition of key compromise we needed to allow functions
depending on such secret items to be submitted to the en-
cryption oracles in the semantics of Oand (cid:73)O.
• Encryptions with uncompromised keys do not compromise:
1240– IND-CCA2 case. If O is either aic2 or sic2, then
) ∧ fresh(R; ˆφ, (cid:126)x, x, K, K
RanGen(K) ∧ RanGen(K
(cid:48)
(cid:48)
)
eK(cid:48) (cid:73)OK
(cid:48) ∨ ˆφ, (cid:126)x (cid:73)OK
∧ (cid:126)x, x (cid:52) ˆφ ∧ ˆφ, (cid:126)x,{x}R
−→ ˆφ, (cid:126)x, x (cid:73)OK
That is, if ˆφ, (cid:126)x,{x}R
eK(cid:48) compromised K, then either K
is already compromised without {x}R
eK(cid:48), or K(cid:48) was al-
ready compromised by ˆφ, (cid:126)x, x. Note that this includes
x, the encrypted term. This means that x itself (with
ˆφ, (cid:126)x) should not compromise K(cid:48) if we want {x}R
eK(cid:48) to
be safe. This is the generalization of that key cycles
may compromise CCA2 encryption. In Section 11 we
will see how this axiom deals with key cycles.
– KDM-CCA2 case. If O is akc2 or skc2, then
RanGen(K) ∧ RanGen(K
) ∧ fresh(R; ˆφ, (cid:126)x, x, K, K
)
(cid:48)
(cid:48)
∧ (cid:126)x, x (cid:52) ˆφ ∧ ˆφ, (cid:126)x,{x}R
−→ ˆφ, (cid:126)x (cid:73)OK
(cid:48) ∨ ˆφ, (cid:126)x (cid:73)OK
eK(cid:48) (cid:73)OK
This is basically the same as the previous one, except
again that ˆφ, (cid:126)x (cid:73) K(cid:48) does not contain x.
Again, soundness of these axioms follow directly from the
deﬁnition of key usability, and it does not depend on what
encryption is used.
In the above formulas, K and K(cid:48) could be allowed to encrypt
different kinds of encryptions, not necessarily the same, we
just did not want to overload our formulas.
• Axioms for Freshly Generated Items.
– Fresh keys are not compromised: The intuition of this
axiom is that if K is fresh, then it can be used for secure
encryption: keyfresh(K; ˆφ, (cid:126)x)∧ (cid:126)x (cid:52) ˆφ −→ ˆφ, (cid:126)x(cid:54)(cid:73)OK
This axiom is sound if the encryption for which K is
generated is CCA2 secure. Depending on which O is
in the axiom, the encryption needs to have the corre-
sponding level of security. This is the only axiom where
the security of the encryption is necessary. The reader
may wonder that proving the KDM case, what happens
to the variables not known to the protocol adversary in
the submitted functions as the standard KDM encryp-
tion oracle only ﬁlls in the gaps of keys, not other un-
known items. However, in a KDM attack created by
the failure of the axiom, the attacker simulates the pro-
tocol, and all honestly generated items except for the
keys and random inputs to the encryptions in question
are available to him.
– Fresh items do not compromise: they were generated
independently and as they have not been sent out, they
have not had a chance to compromise other items:
fresh(x; ˆφ, (cid:126)x, y)∧ (cid:126)x, y (cid:52) ˆφ∧ ˆφ, (cid:126)x, x (cid:73)Oy → ˆφ, (cid:126)x (cid:73)Oy
And on S, the output of AOsic2
( ˆφ, (cid:126)x) is not equal any of the outputs
of the encryption oracles, and it is not any of the bit strings corre-
sponding to the honest encryptions in ˆφ, (cid:126)x. Let
Mc, Π, S, σ |c= ˆφ, (cid:126)x (cid:73)ic x iff Mc, Π, S, σ |s4= 23( ˆφ, (cid:126)x (cid:73)ic x).
The reason for using oracle Osic2 is that the deﬁnition of INT-CTXT
security [13] allows the use of encryption and decryption oracles.
8.2.2 Axioms for Unforgeability Key Compromise
• Let SameEnc((cid:126)x; (cid:126)y) be the constraint as before. Then
SameEnc((cid:126)x; (cid:126)y) ∧ (cid:126)x,x = (cid:126)y,y−→ ( ˆφ, (cid:126)x (cid:73)ic x ↔ ˆφ, (cid:126)y (cid:73)ic y).
• Derivability implies compromise: ˆφ, (cid:126)x  K −→ ˆφ, (cid:126)x (cid:73)ic K
• Increasing capabilities for key compromise:
• Commutativity: If (cid:126)x(cid:48) is a permutation of (cid:126)x, then
• Transitivity: ˆφ, (cid:126)x  (cid:126)y ∧ ˆφ, (cid:126)x, (cid:126)y (cid:73)ic K −→ ˆφ, (cid:126)x (cid:73)ic K
• Encryption with uncompromised key cannot be faked:
ˆφ, (cid:126)x (cid:73)ic K −→ ˆφ, (cid:126)x, x (cid:73)ic K
ˆφ, (cid:126)x (cid:73)ic K −→ ˆφ, (cid:126)x(cid:48) (cid:73)ic K.