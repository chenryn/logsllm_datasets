code to monitor data structure integrity.
DriverSlicer consists of two parts: a splitter and a code
generator. The splitter analyzes a device driver and identi-
ﬁes functions that must execute in the kernel, i.e., those that
require kernel privilege to access the device or those that are
performance critical. To do so, it uses programmer-supplied
speciﬁcations in the form of type signatures, to identify such
functions. For example, it identiﬁes interrupt handlers based
upon their function prototypes; in Linux interrupt handlers
always return a value of type irqreturn t. Similarly, func-
tions responsible for transmitting network packets typically
have two parameters: a pointer to an sk buff structure, and a
pointer to a net device structure. Such type signatures need
only be supplied once per family of drivers, e.g., one set of
type signatures suﬃces to identify performance critical and
privileged functions for most network drivers. The splitter
uses a statically-extracted call-graph of the device driver to
mark (1) all functions that match these type signatures; and
(2) all functions potentially called (transitively) by such func-
tions as those that must execute in the k-driver; the remaining
functions are relegated to the u-driver.
DriverSlicer’s code generator uses the output of the split-
ter to partition the driver into a k-driver and a u-driver, and
generates RPC code to transfer control and data. In doing
so, it may require programmer-supplied annotations to clar-
ify the semantics of pointers. For example, to generate code
to marshal an object referenced by a void * pointer, the
code generator must be supplied with an annotation that de-
termines the type of the object. Similarly, the code genera-
tor also requires annotations to determine whether a pointer
refers to one instance of an object or to an array of instances.
DriverSlicer currently uses eight kinds of annotations, details
of which appear elsewhere [21]. DriverSlicer uses these an-
notations to generate RPC code that minimizes the amount of
data copied between the u-driver and the k-driver; it does so
by using static analysis to determine variables and data struc-
ture ﬁelds that are read/modiﬁed by the u-driver and only
generating marshaling code to copy these variables and ﬁelds
using RPC.
4.2. Monitoring kernel data structure updates
This section describes an anomaly detection-based ap-
proach to infer and enforce invariants on kernel data struc-
305
tures. The approach has two phases: a training phase, in
which invariants are inferred by executing the driver on be-
nign workloads, and an enforcement phase, in which the
RPC monitor enforces these invariants. The training phase
is a one-time activity that can possibly be completed dur-
ing driver development. Section 4.2.1 presents an automated
technique to infer invariants during training; Section 4.2.2
describes how these invariants are enforced.
Inferring data structure integrity constraints
4.2.1
To identify kernel data structure invariants, we adapted
Daikon [19], an invariant inference tool. Daikon consists of
two components, namely, a front end that records the values
of variables during application execution and an inference
engine that uses these values to hypothesize likely invariants.
The front end records the values of global variables and for-
mal parameters of functions at key program points, such as
function entries and exits, as the application executes a set
of test inputs. The inference engine uses these values to hy-
pothesize invariants. For example, if the value of a variable
is observed to be a constant across multiple executions of
the program, Daikon hypothesizes that the variable is likely
a constant. Daikon infers over 75 diﬀerent kinds of invari-
ants, including constancy of scalar-valued variables, arrays
and pointers, bounds of scalars, and relationships between
diﬀerent variables.
Daikon currently only applies to user-space applications.
However, our architecture executes the u-driver as a user-
space process, which allows Daikon to be applied to driver
code. We use Daikon’s front end to monitor the execution of
a u-driver as it runs several benign workloads for each driver,
such as device initialization, conﬁguration and shutdown,
that exercise functionality implemented in the u-driver. The
front end records a trace of values of all the global variables
and formal parameters of functions that cross the user/kernel
boundary. Daikon’s inference engine processes this trace
and hypothesizes invariants. Figure 3 presents several ex-
amples of invariants that Daikon identiﬁed for the 8139too
network driver; the left column shows several functions that
appear in the u-driver of the 8139too microdriver, and indi-
cates whether the invariant was inferred at the entry or exit
(or both program points) of the function. Invariants inferred
at the exits of upcall functions are enforced by the RPC mon-
itor (Section 4.2.2). We discuss below several classes of in-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:08:20 UTC from IEEE Xplore.  Restrictions apply. 
Function
rtl8139 init module (entry)
rtl8139 init module (exit)
rtl8139 get ethtool stats (exit)
Invariant
rtl8139 intr mask == C07F, rtl8139 norx intr mask == C02E
rlt8139 intr mask == Orig(rtl8139 intr mask)
rtl8139 norx intr mask == Orig(rtl8139 norx intr mask)
rtl8139 rx config == Orig(rtl8139 rx config)
rtl8139 tx config == Orig(rtl8139 tx config)
rtl chip info has only one value
dev->hard start xmit has only one value
dev->base addr ∈ {0x0531C468, 0x06520468}
Length(dev->mc list) == Orig(Length(dev->mc list))
rtl8139 get link (exit)
rtl8139 open (entry/exit)
rtl8139 get link (exit)
Figure 3. Examples of invariants extracted from the 8139too driver.
variants that we found useful in our experiments.
(1) Constancy of scalars and pointers. Daikon determines
whether a scalar-valued variable (i.e., a value of a base type,
such as int or char) remains constant during driver exe-
cution.
If so, it also records the constant value that the
variable acquires. For example, consider the integer-valued
global variable rtl8139 intr mask of the 8139too driver,
which represents a 16-bit mask. Daikon infers that this
variable has a constant value of C07F when the function
rtl8139 init module is invoked (see Figure 3). Indeed, an
analysis of the driver shows that this variable is always ini-
tialized in the k-driver to this value.
In addition to scalar variables, Daikon also determines
whether a pointer always refers to the same object during
program execution. For example, Daikon infers that the
pointer-valued global variable rtl chip info is not modiﬁed
by the rtl8139 get ethtool stats function. Similarly, it in-
fers that the function pointer dev->hard start xmit is un-
modiﬁed by a call to rtl8139 get link (and most other func-
tions in the u-driver). Inferring and enforcing such invariants
on function pointers can prevent control hijacking attacks. In
fact, a recent study of 25 Linux rootkits revealed 22 rootk-
its that hijacked kernel control ow by modifying function
pointers to point to attacker-deﬁned code [34]. Note that for
pointers that refer to the same object, Daikon only reports
that the pointer is a constant and does not report the actual
value of the pointer (which would vary across reboots).
(2) Relationships between variables. Daikon correlates the
values of variables and discovers relationships between them.
For example, it can discover that two variables always ac-
quire the same value at runtime. Importantly, Daikon can de-
termine whether the value of a variable remains unchanged
during a function call by observing its values at function
entry (the Orig value of the variable) and exit. For exam-
ple, it determines that the value of rtl8139 intr mask is un-
changed by a call to rtl8139 init module. Enforcing such
an invariant constrains the values of rtl8139 intr mask that
can otherwise be modiﬁed by a compromised u-driver to ini-
tiate I/O to unauthorized ports.
(3) Ranges/sets of values. In several cases, a variable may
not be a constant, but acquire one of a small set of values.
As Figure 3 shows, Daikon infers such invariants as well;
for example, it infers that the dev->base addr, which repre-
sents the base address of I/O memory, can only acquire one
of two values during driver execution. This constraint must
be enforced when the k-driver’s copy of dev->base addr is
synchronized with the u-driver’s copy; for otherwise, a com-
promised u-driver could coerce the k-driver into writing to
arbitrary I/O memory addresses belonging to other devices.
(4) Linked list invariants. The Linux kernel uses linked
lists extensively to manage several critical data structures.
306
Prior work demonstrates that kernel linked lists can be
stealthily modiﬁed to achieve malicious goals [33]. Unfor-
tunately, Daikon’s C front end does not support inference of
invariants on linked lists.
We therefore extended Daikon to infer invariants on
linked lists.
In particular, we augmented the marshaling
protocol with code that records the contents of linked lists
that cross the user/kernel boundary. Daikon then processes
this trace of values and hypothesizes invariants. Our imple-
mentation currently supports inference of invariants that in-
dicate that the length of a linked list is unmodiﬁed by a func-
tion call. Figure 3 presents one such invariant, which states
that the linked list dev->mc list is unmodiﬁed by a call to
rtl8139 get link.
A key feature of the above invariants is their ability to
monitor the integrity of both control and non-control data
in the kernel. For example, by inferring the constancy of
function pointers, Daikon can detect attacks that hijack con-
trol ow by modifying function pointers to attacker-deﬁned
code. Similarly, Daikon can detect attacks that modify I/O
memory addresses and allow a rogue driver to write to arbi-
trary memory locations, thereby preventing this non-control
data attack. Daikon’s dynamic analysis approach enables it
to infer several kinds of invariants that would be diﬃcult to
discover using static analysis of the driver. For example,
static analysis is ill-suited to infer invariants on lengths of
linked lists. Similarly, in pointer-intensive code (as is com-
mon in device drivers), it is hard to statically infer whether a
heap object is unmodiﬁed by a function call without access
to precise aliasing information.
One of the challenges that we faced during development
was the sheer quantity of data recorded by Daikon’s front end
during the execution of a u-driver. This in turn resulted in two
problems. First, Daikon’s inference engine took longer to in-
fer invariants, and sometimes even exhausted the memory
available on the machine. Second, Daikon inferred several
hundred invariants per function, which resulted in increased
memory consumption during enforcement. For example,
consider the 8139cp network microdriver: Daikon inferred
an average of 878 invariants at the exit of each function in the
u-driver. Worse, several of these invariants were serendipi-
tous, i.e., they were overly speciﬁc to the workloads used
during inference and were not satisﬁed by other workloads,
thereby resulting in false positives during enforcement.
To overcome these problems, we incorporated two key op-
timizations. First, we conﬁgured Daikon’s front end to only
record values transmitted to u-driver functions that commu-
nicate directly with the k-driver via upcalls and downcalls,
and do not record values for functions internal to the u-driver.
Second, we conﬁgured the front end so that only the values
of variables that are accessed in the u-driver are recorded.
For example, if a u-driver function only reads/modiﬁes cer-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:08:20 UTC from IEEE Xplore.  Restrictions apply. 
tain ﬁelds of an otherwise large C struct, we only record
the values of the ﬁelds that are read/modiﬁed by that func-
tion. To implement this optimization, we employed a con-
servative static analysis of the u-driver to determine the ﬁelds
read/modiﬁed by functions in the u-driver. Because Driver-
Slicer’s code generator emits marshaling and unmarshaling
code only for variables and ﬁelds of data structures that are
read/modiﬁed by the u-driver, as discussed in Section 4.1,
malicious modiﬁcations by the u-driver on other variables
and data structure ﬁelds will not be synchronized with the
k-driver; hence, they need not be monitored.
These optimizations drastically reduce the number of in-
variants that Daikon infers, which in turn reduces the mem-
ory consumption of the invariant table (described below) dur-
ing enforcement. For example, in the 8139cp network mi-
crodriver, the average number of invariants at function exits
drops over forty-fold.
We expect that inferring invariants would be a one-time
activity, accomplished either during driver development (if
the driver is developed as a microdriver), or when a legacy
driver is split with DriverSlicer; these invariants can be dis-
tributed by vendors along with drivers. Note, however, that
some invariants inferred by Daikon must be modiﬁed to be
widely applicable across multiple installations and conﬁgu-
rations. For example, the invariant for dev->base addr in
Figure 3 refers to speciﬁc I/O memory addresses, and is not
applicable across multiple installations (the other invariants
in Figure 3 are portable across multiple installations). To be
portable, this invariant would have to be modiﬁed to gener-
ically state that dev->base addr has only two values, rather
than referring to speciﬁc I/O memory addresses, e.g., as with
the invariant for dev->hard start xmit in Figure 3.
4.2.2 Enforcing data structure integrity constraints
The invariants inferred by Daikon are enforced by the RPC
monitor when the k-driver receives marshaled data from the
u-driver. The RPC monitor unmarshals this data into a vault
area in the kernel’s address space. Data structures in the vault
area are only accessed by the RPC monitor and not by the
kernel.
The RPC monitor itself is implemented as a kernel mod-
ule that manages two tables: an invariant table and a vault
table. The invariant table stores the set of invariants indexed
by the u-driver variable(s) that it is associated with, and is
initialized when the microdriver is loaded. The vault table
stores pointers to data structures in the vault area and is ﬁlled
by the RPC monitor when it populates the vault area.
The RPC monitor enforces invariants on data received
from the u-driver by ﬁrst unmarshaling this data into the vault
area and inserting pointers to these resulting data structures
in the vault table. This unmarshaling code is automatically
generated by DriverSlicer’s code generator. The marshaling
code emitted by the code generator also makes a copy of the
original values of variables before an upcall to support in-
variants that refer to the Orig value of a variable. To enforce
invariants, the RPC monitor retrieves the invariants associ-
ated with each variable in the vault table using the invariant
table, and veriﬁes that the invariant is satisﬁed. For invariants
on variables that point to the head of a linked list, the RPC
monitor traverses the list and ensures that the invariant is sat-
isﬁed. Any failures raise an alert and can trigger recovery
mechanisms, such as restarting the u-driver. If all invariants
are satisﬁed, then the marshaling procotol synchronizes ker-
nel data structures by overwriting them with their copies in
the vault area.
5. Evaluation