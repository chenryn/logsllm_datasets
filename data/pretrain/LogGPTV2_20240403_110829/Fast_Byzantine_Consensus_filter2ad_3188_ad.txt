cepted by at least a majority of the acceptors, at most one
value is chosen per proposal number.
Lemma 4. If some pair o = (v, pn) is chosen, then ev-
(cid:8) > pn will
ery progress certiﬁcate for proposal number pn
vouch for o and no other value.
Proof. Assume o = (v, pn) is chosen; then, at least c =
(cid:4)(a + f + 1)/2(cid:5) correct acceptors Q have accepted o. Let
(cid:8) > pn.
pc be a progress certiﬁcate for proposal number pn
Consider the pairs contained in pc. Since these pairs are
signed, they cannot have been manufactured by the leader;
further, since by the protocol no correct acceptor would ac-
(cid:8) > pn, all correct ac-
cept o if it had received pc with pn
ceptors that accepted o must have done so before receiving
pc. Since, by deﬁnition, pc contains a− f pairs signed by
acceptors, the number of these pairs that come from the ac-
ceptors in Q is at least a − f + c − a, which simpliﬁes to
c− f = (cid:4)(a + f + 1)/2− f(cid:5) = (cid:4)(a− f + 1)/2(cid:5). By deﬁni-
tion, then, pc vouches for o and no other value.
In short, the lemmas state that each leader can choose at
most one value, and if some leader chose a value then no
subsequent leader can choose a different value. It follows
directly that at most one value can be chosen.
CS3. Only a chosen value may be learned by a correct
learner.
Proof. Suppose that a correct learner learns value v from
(v, pn). There are two ways for a learner to learn a value in
FaB Paxos.
• (cid:4)(a+ f +1)/2+ f(cid:5) acceptors reported having accepted
(v, pn). At least (cid:4)(a + f + 1)/2(cid:5) of these acceptors are
correct, so by deﬁnition (v, pn) was chosen.
• f + 1 other learners reported that (v, pn) was chosen.
One of these learners is correct—so, by induction on
the number of learners, it follows that (v, pn) was in-
deed chosen.
We say that a value is stable if it is learned by (cid:4)(l + f +
1)/2(cid:5) learners. FaB Paxos only guarantees liveness when
the execution is synchronous and there exists a time after
which leaders that do not create a stable value are correctly
deemed to be faulty. In this case, the leader election proto-
col ensures that a new leader is elected, and, further, that if
the leader is correct then it will not be suspected. We as-
sume this much in the the following lemma and proofs for
CL1 and CL2.
Lemma 5. Some value is eventually stable.
Proof. Since the number of proposers p is larger than f ,
eventually either some value is stable or a correct leader (cid:95)
is elected. We show that if (cid:95) is correct then some value will
be stable. Let us, for a moment, assume reliable links.
The correct leader will gather a progress certiﬁcate and
propose a value to all the acceptors. By construction, all
progress certiﬁcates vouch for at least one value—and cor-
rect acceptors will accept a value vouched by a progress cer-
tiﬁcate. Since (cid:95) is correct, it will propose the same value to
all acceptors and all a− f correct acceptors will accept the
proposed value. Given that a > 3 f , (cid:4)(a+ f + 1)/2(cid:5) ≤ a− f
and so by deﬁnition that value will be chosen.
However, links are not reliable, but only fair. The end-to-
end retransmission protocol ensures that (cid:95) will continue to
resend its proposed value until it hears from (cid:4)(l + f + 1)/2(cid:5)
learners that they have learned a value—that is, until the
value is stable.
CL1.
Some proposed value is eventually chosen.
Proof. By Lemma 5 eventually some value is stable, i.e.
(cid:4)(l + f + 1)/2(cid:5) > f learners have learned it. One of these
learners is correct, and by CS3 a correct learner only learns
a value after it is chosen. Therefore, the stable value is cho-
sen.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:08:46 UTC from IEEE Xplore.  Restrictions apply. 
To prove CL1 it sufﬁces to show that the correct leader
does not stop retransmission until a value is chosen. In prac-
tice, it is desirable for the leader to stop retransmission once
it is. Since l > 3 f , there are at least (cid:4)(l + f + 1)/2(cid:5) correct
learners and so retransmissions will eventually stop.
CL2. Once a value is chosen, correct learners eventually
learn it.
Proof. By Lemma 5, some value v is eventually stable, i.e.
(cid:4)(l + f + 1)(cid:5) ≥ 2 f + 1 learners eventually claim to have
learned the value. Since at most f learners are faulty, at
least f + 1 of the learners that claim to have learned v are
correct.
Even if the leader is not retransmitting anymore, the re-
maining correct learners can determine the chosen value
when they query their peers with the “pull” requests and
receive f + 1 matching responses. So eventually, all correct
learners learn the chosen value.
6 Parameterized FaB
Previous Byzantine Paxos protocols requires 3 f + 1 pro-
cesses and may complete in three communication steps
when there is no failure; FaB requires 5 f + 1 processes and
may complete in two communication steps despite up to f
failures—FaB uses the additional replication for speed. It
may not be necessary to ensure 2-step operation even when
all f processes fail; in some circumstances we may only be
concerned with 2-step operation as long as, say, at most one
process is faulty.
The Parameterized FaB protocol generalizes FaB by de-
coupling replication for fault tolerance from replication for
speed. Parameterized FaB requires 3 f + 2t + 1 processes to
guarantee safety and liveness despite up to f Byzantine fail-
ures, and guarantees common-case 2-step operation despite
up to t Byzantine failures. In one extreme (a = 5 f + 1) the
protocol has the same properties as non-parameterized FaB.
In the other, the protocol only requires the minimal number
of processes for consensus (3 f + 1) while at the same time
allowing 2-step operation when there are no faults. For ex-
ample, if seven machines are available, an administrator can
choose between tolerating two Byzantine failures but slow-
ing down at the ﬁrst failure ( f = 2,t = 0) or tolerating only
one Byzantine failure but maintaining 2-step operation de-
spite the failure ( f = 1,t = 1).
Parameterizing FaB adds one additional round, which is
only used when there are not enough correct acceptors to
ensure 2-step progress. This round is similar to that in ordi-
nary three-step Byzantine consensus protocols [2].
When an acceptor i accepts pair (v, r), it signs a message
(v, r,i) and sends it to all acceptors. When an acceptor has
proof that q = (cid:4)(a + f + 1)/2(cid:5) acceptors have accepted the
same value pair vp, it can generate a commit proof for vp.
The commit proof is the set of q signed (v, r, i) messages
from different acceptors but with the same value for v and
r. The acceptors report the commit proof along with their
accepted value to the learners.
A value pair vp is chosen if (cid:4)(a + f + 1)/2(cid:5) correct ac-
ceptors have accepted vp or if (cid:4)(a + f + 1)/2(cid:5) acceptors
have a commit proof for vp. Learners learn vp when they
know vp has been chosen.
We also modify the structure of progress certiﬁcates.
When the new leader queries n − f acceptors, the accep-
tors add to the signed pair they return either their commit
proof, or a signed statement that they have none. These
commit proofs (or non-commit proofs) are integrated into
the progress certiﬁcate. A progress certiﬁcate now vouches
contained (cid:4)(a + f +
(cid:8)
for value v
1)/2− f(cid:5) times in the progress certiﬁcate and the progress
certiﬁcate does not contain a commit proof for any value
d (cid:7)= v
(cid:8)
if there is no value d (cid:7)= v
(cid:8)
.
These changes maintain the properties that at most one
value can be chosen and that, if some value was chosen,
then future progress certiﬁcates will vouch only for it. This
ensures that the changes do not affect safety. Liveness
is maintained despite f failures because there are at least
(cid:4)(a + f + 1)/2(cid:5) correct acceptors, so, if the leader is cor-
rect, then eventually all of them will have a commit proof,
thus allowing the proposed value to be learned.
7 State Machine Replication
Fast consensus translates directly into fast state machine
replication:
in general, state machine replication requires
one fewer round with FaB Paxos than with a traditional
three-round Byzantine consensus protocols.
A straightforward implementation of Byzantine state
machine replication on top of FaB Paxos requires only four
rounds of communication—one for the clients to send re-
quests to the proposers;
two (rather than the traditional
three) for the learners to learn the order in which requests
are to be executed; and a ﬁnal one, after the learners have
executed the request, to send the response to the appropriate
clients. FaB can accomodate existing leader election proto-
cols (e.g. [2]).
The number of rounds of communication can be reduced
down to three using tentative execution [2], an optimization
proposed by Castro and Liskov for their PBFT protocol that
applies equally well to FaB Paxos. As shown in Figure 3,
learners tentatively execute clients’ requests as supplied by
the leader before consensus is reached. The acceptors send
to both clients and learners the information required to de-
termine the consensus value, so clients and learners can at
the same time determine whether their trust in the leader
was well put. In case of conﬂict, tentative executions are
rolled back and the requests are eventually re-executed in
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:08:46 UTC from IEEE Xplore.  Restrictions apply. 
request
response
Client
Proposers
Acceptors
Learners
tentative
execution
verification
Figure 3. FaB state machine with tentative ex-
ecution.
the correct order.
FaB Paxos loses its edge, however, in the special case
of read-only requests that are not concurrent with any read-
write request. In this case, a second optimization proposed
by Castro and Liskov allows both PBFT and FaB Paxos to
service these requests using just two rounds.
The replicated state machine protocol can be further op-
timized to limit the amount of work in recovery and to re-
quire only 2 f + 1 learners (reducing the development cost
since each learner must have a different version of the pro-
gram being replicated). We discuss these optimizations in
our extended technical report [15].
8 Conclusion
FaB Paxos is the ﬁrst Byzantine consensus protocol to
achieve consensus in just two communication steps in the
common case. This protocol is optimal in that it uses the
minimal number of steps for consensus, and it uses the min-
imal number of processes to ensure 2-step operation in the
common case. Additionally, FaB Paxos in the common case
does not require expensive digital signatures.
The price for common-case 2-step termination is a
higher number of acceptors than in previous Byzantine con-
sensus protocols. These additional acceptors are precisely
what allows a newly elected leader in FaB Paxos to deter-
mine, using progress certiﬁcates, whether or not a value had
already been chosen—a key property to guarantee the safety
of FaB Paxos in the presence of failures.
In traditional state machine architectures, the cost of this
additional replication would make FaB Paxos unattractive
for all but the applications most committed to reducing la-
tency. However, the number of additional acceptors is rel-
atively modest when the goal is to tolerate a small number
of faults. In the state machine architecture that we have re-
cently proposed, where acceptors are signiﬁcantly cheaper
to implement [20], the design point occupied by FaB Paxos
becomes much more intriguing.
Even though 5 f + 1 acceptors is the lower bound for 2-
step termination, it is possible to sometimes complete in two
communication steps even with fewer acceptors. Param-
eterized FaB Paxos decouples fault-tolerance from 2-step
termination by spanning the design space between a Byzan-
tine consensus protocol with the minimal number of servers
(but that only guarantees 2-step execution when there are
no faults) to the full FaB protocol in which all common
case executions are 2-step executions. Parameterized FaB
requires 3 f + 2t + 1 servers to tolerate f Byzantine failures
and completes in two communication steps in the common
case when there are at most t failures.
References
[1] R. Boichat, P. Dutta, S. Frolund, and R. Guerraoui. Reconstructing
paxos. SIGACT News, 34(2), 2003.
[2] M. Castro and B. Liskov. Practical byzantine fault tolerance.
In
OSDI: Symposium on Operating Systems Design and Implementa-
tion. USENIX Association, Co-sponsored by IEEE TCOS and ACM
SIGOPS, 1999.
[3] M. Castro and B. Liskov. Proactive recovery in a Byzantine-fault-
tolerant system. In Proc. 4th OSDI, pages 273–287, 2000.
[4] P. Dutta, R. Guerraoui, and M. Vukoli´c.
ity of asynchronous byzantine consensus.
EPFL/IC/200499, EPFL, Feb. 2005.
Best-case complex-
Technical Report
[5] M. Fischer and N. Lynch. A lower bound for the time to assure
interactice consistency. Information Processing Letters, 14(4):183–
186, June 1982.
[6] M. Fischer, N. Lynch, and M. Paterson. Impossibility of distributed
consensus with one faulty process. J. ACM, 32(2):374–382, 1985.
[7] M. Hurﬁn and M. Raynal. A simple and fast asynchronous consensus
protocol based on a weak failure detector. Distributed Computing,
12(4):209–223, September 1999.
[8] I. Keidar and S. Rajsbaum. On the cost of fault-tolerant consensus
when there are no faults. Technical Report MIT-LCS-TR-821, 2001.
[9] K. Kursawe. Optimistic byzantine agreement. In Proc. 21st SRDS,
2002.
[10] L. Lamport. Time, clocks, and the ordering of events in a distributed
system. Communications of the ACM, 21(7):558–565, July 1978.
[11] L. Lamport. The part-time parliament. ACM Trans. Comput. Syst.,
16(2):133–169, 1998.
[12] L. Lamport. Paxos made simple. ACM SIGACT News (Distributed
Computing Column), 32(4):51–58, December 2001.
[13] L. Lamport. Lower bounds for asynchronous consensus.
In Pro-
ceedings of the International Workshop on Future Directions in Dis-
tributed Computing, June 2002.
[14] D. Malkhi and M. Reiter. Byzantine quorum systems. Distributed
Computing 11/4, pages 203–213, 1998.
[15] J.-P. Martin and L. Alvisi. Fast Byzantine Paxos. Technical Report
TR-04-07, University of Texas at Austin, Department of Computer
Sciences, February 2004.
[16] J.-P. Martin, L. Alvisi, and M. Dahlin. Minimal Byzantine storage. In
Distributed Computing, 16th international Conference, DISC 2002,
pages 311–325, October 2002.
[17] R. Rodrigues, M. Castro, and B. Liskov. BASE: Using abstraction to
improve fault tolerance. In Proc. 18th SOSP, Oct. 2001.
[18] A. Schiper. Early consensus in an asynchronous system with a weak
failure detector. Distributed Computing, 10(3):149–157, Apr. 1997.
[19] F. B. Schneider. Implementing fault–tolerant services using the state
machine approach: A tutorial. Computing Surveys, 22(3):299–319,
September 1990.
[20] J. Yin, J.-P. Martin, A. Venkataramani, L. Alvisi, and M. Dahlin.
Separating agreement from execution for Byzantine fault tolerant ser-
vices. In Proc. 19th SOSP, pages 253–267. ACM Press, 2003.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:08:46 UTC from IEEE Xplore.  Restrictions apply.