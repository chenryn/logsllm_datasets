E1f32_Ha1f
e_shentsize;
Elf32_Halt e_shstrndx;
1 E1f32_8hdr;
让我们拿 ELF文件头结构跟前面readelf输出的 ELF文件头信息相比照，可以看到输出
的信息与 ELF文件头中的结构很多都一对应。有点例外的是“Elf32_Ehdr”中的e_idcmt
这个成员对应了readelf 输出结果中的°Class"、“Data”、“Version”、“OS/ABI”和"ABI Version”
这5个参数。剩下的参数与“EIf32_Ehdr”中的成员都—一对应。我们在表3-4中简单地列
举一下，让大家有个初步的印象，详细的定义可以在ELF标准文档里面找到，表34是ELF
文件头中各个成员的含义与readelf输出结果的对照表。
表3-4ELF文件头结构成员含义
成员
readelf输出结果与含义
e_ident
7f45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00
Class:
ELF32
Data:
2's complement, litle endian
Version:
1 (current)
OS/ABI:
UNIX - System V
ABI Version:0
e_type
Type: REL (Relocatable file)
ELF文件类型
c_machine
Machine: Intel 80386
ELF文件的CPU平台属性，相关常量以EM_开头
e_version
Version: 0x1
ELF版本号。
一般为常数1
e_entry
Entry point address: 0x0
入口地址，规定ELF程序的入口虚拟地址，操作系统在加载究该程序后从
这个地址开始执行进程的指令，可重定位文件一般没有入口地址，则这个
值为0
e_phoff
Start of program headers: 0 (bytes into file)
这个暂时不关心，请参考后面的“ELF链接视图和执行视图”一节
e_shoff
Start of section headers: 280 (bytes into file)
段表在文件中的偏移，上面的例子里这个值是280，也就是段表从文件的
第281个字节开始
程序员的自我修养——链接、装载与库
---
## Page 95
72
第3章目标文件里有什么
续表
成员
readelf输出结果与含义
e_word
Flags: 0x0
ELF标志位，用来标识一些ELF文件平台相关的属性，相关常量的格式一
般为 EF_machine_flag，machine 为平台，flag 为样志
e_ehsize
Size of this header: 52 (bytes)
即ELF文件头本身的大小，这个例子里面为52字节
e_phentsize
Size of program headers: O (bytes)
这个暂时不关心，请参考后面的“ELF健接视图和执行视图”一节
e_phnum
Number of program headers: 0
这个暂时不关心，请参考后面的“ELF链接视图和执行视图”
一节
e_shentsize
Size of section headers: 40 (bytes)
段表描述符的大小、这个一般等于sizeof(Elf32_Shdr).具体参照“段表”
节
wnuus"a
Number of section headers: 11
段表描述符数量，这个值等于ELF文件中拥有的段的数量、上面部个例子
里面为11
e_shstrndx
Section header string table index: 8
段表字符串表所在的段在段表中的下标，这个名称有点绕口，
一下子反应
不过来？没美系，让我们后面探讨了什么是字符串表之后再回头来看这个
这些字段的相关常量都定义在“elfh”里面。我们在表3-5中会列举一些常见的常量。
完整的常量定义请参考“elf.h”。
ELF魔数我们可以从前面 readelf 的输出看到，最前面的“Magic”的 16个字节刚好
对应“EIf32_Ehdr”的e_ident这个成员。这16个字节被ELF标准规定用来标识ELF 文件
的平台属性，比如这个ELF字长（32位/64位）、字节序、ELF文件版本，如图3-5所示。
字书序
0无效格式
ELF 记 0x7F
1小端格式
'E'
"L"
“F“
2大镇格式
7f454c4601
0101000000000000000000
ELF文件类
ELF版本
0无效文件
132位ELF文件
2 64位ELF文件
图3-5ELF魔数
程序员的自我修养一键接、装载与库
---
## Page 96
3.4ELF文件结构描述
73
最开始的4个字节是所有ELF文件都必须相同的标识码，分别为0x7F、0x45、0x4c、
0x46，第一个字节对应ASCII字符单面的DEL控制符，后面3个字节刚好是ELF这3个字
母的ASCII码。这4个字节又被称为ELF文件的魔数，儿乎所有的可执行文件格式的最开
始的儿个字节都是魔数。比如a.out格式最开始两个字节为0x01、0x07：PE/COFF文件最
开始两个个字节为0x4d、0x5a，即ASCI1字符MZ。这种魔数用来确认文件的类型，操作系
统在加载可执行文件的时候会确认魔数是否正确，如果不正确会拒绝加载。
接下来的一个字节是用来标识ELF的文件类的，0x01表示是32位的，0x02表示是
64位的：第6个字是字节序，规定该ELF文件是大端的还是小端的（见附录：字节序）。
第7个字节规定ELF文件的主版本号，一般是1，因为ELF标准自1.2版以后就再也没有
更新了。后面的9个字节ELF标准没有定义，般填0，有些平台会使用这9个字节作为
扩展标志。
各种魔数的由来
a.out格式的魔数为0x01、0x07，为什么会规定这个魔数呢？
UNIX早年是在PDP小型机上诞生的，当时的系统在加载一个可执行文件后直接从文
件的第一个字节开始执行，人们一般在文件的最开始放置一条跳转（jump）指令，这
条指令负责跳过接下来的7个机器字的文件头到可执行文件的真正入口。而0x010x07
这两个字节刚好是当时PDP-11的机器的跳转7个机器字的指令。为了跟以前的系统
计算机系统中有很多怪异的设计背后有着很有趣的历史和传统，了解它们的由来可以
让我们了解到很多很有意忠的事情。这让我想起了经济学里面所请的“路径依赖”，其
ELF文件标准历史
20世纪90年代，一些厂商联合成立了一个委员会，起草并发布了一个ELF文件格式
标准供公开使用，并且希望所有人能够遵循这项标准并且从中获益。1993年，委员会
发布了ELF文件标准。当时参与该委员会的有来自于编译器的厂商，如Watcom和
Borland; 来自 CPU 的广商如 IBM 和 Intel;来自操作系统的广商如 IBM 和 Microsoft。
1995年，委员会发布了ELF1.2标准，自此委员会完成了自己的使命，不久就解散了。
所以ELF文件格式标准的最新版本为1.2
文件类型e_type成员表示ELF文件类型，即前面提到过的3种ELF文件类型，每个
文件类型对应一个常量。系统通过这个常量来判断ELF的真正文件类型，而不是通过文件
的扩展名，相关常量以“ET_”开头，如表3-5所示。
程序员的自我修养一链接、装载与库
---
## Page 97
74
第3章目标文件里有什么
表3-5
常量
值
含义
ET_REL
1
可重定位文件，一般为0文件
ET_EXEC
2
可执行文件
ET_DYN
3
类享目标文件，一般为s0文件
机器类型
ELF文件格式被设计成可以在多个平台下使用。这并不表示同一个ELF文
件可以在不同的平台下使用（就像java的字节码文件那样），而是表示不同平台下的ELF文
件都遵循同一套ELF标准。e_machine成员就表示该ELF文件的平台属性，比如3表示该
ELF文件只能在Intelx86机器下使用，这也是我们最常见的情况。相关的常量以“EM_”
开头，如表3-6所示。
表3-6
常量
值
含义
EM_M32
1
AT&T WE 32100
EM_SPARC
2
SPARC
EM_386
3
Intel x86
EM_68K
4
Motorola 68000
EM_88K
5
Motorola 88000
EM_860
6
Intel 80860
3.4.2
段表
我们知道ELF文件中有很多各种各样的段，这个段表（SectionHeaderTable）就是保
存这些段的基本属性的结构。段表是ELF文件中除了文件头以外最重要的结构，它描述了
ELF的各个段的信息，比如每个段的段名、段的长度、在文件中的偏移、读写权限及段的其
他属性。也就是说，ELF文件的段结构就是由段表决定的，编译器、链接器和装裁器都是依
靠段表来定位和访问各个段的属性的。段表在ELF文件中的位置由ELF文件头的“e_shof”
成员决定，比如 SimpleSection.o中，段表位于偏移0x118。
前文中我们使用了“objudmph”来查看ELF文件中包含的段，结果是SimpleSection
里面看到了总共有6个段，分别是“.code”、“.data”、“.bss”、“rodata”、".commemt”和
“note.GNU-stack”。实际上的情况却有所不同，“objdump-h”命令只是把ELF文件中关键
的段显示了出来，而省略了其他的辅助性的段，比如：符号表、字符串表、段名字符串表、
重定位表等。我们可以使用readelf工具来查看ELF文件的段，它显示出来的结果才是真正
的段表结构：
程序员的自我修养一链接、装载与库
---
## Page 98
3.4ELF文件结构描述
75
$ readelf -S SimpleSection.o
There are 11 section headers,
starting at offset Ox118:
Section Headers:
9ueN [3N]
adAL
Addr
00000000000000
off
[0]
NULL
00000000
Size
ES Flg Lk Inf A1
[ 1]
.text
PROGBITS
00000000 000034 00005b00 AX
0
0
[2]
.rel.text
REL
00000000 000428
80 820000
9
[ 3]
, data
PROGBITS
00000000
000090
000008 00
WA
0
0
1
[  4 ]
,bs8
NOBITS
00000000000098
000004 00 WA
0
[ 6 ]
[5]
. rodata