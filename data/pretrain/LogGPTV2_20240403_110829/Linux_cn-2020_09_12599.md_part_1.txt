---
author: Dave Mckay
category: 技术
comments_data:
- date: '2020-09-11 10:41:06'
  message: nmcli 需要 NetworkManager ，但是一般情况下 NetworkManager 都是关闭的。
  postip: 218.205.56.222
  username: 来自浙江绍兴的 Chrome 85.0|Windows 10 用户
count:
  commentnum: 1
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 18114
date: '2020-09-10 10:03:19'
editorchoice: false
excerpt: nmcli 命令赋予你直接在 Linux 命令行操作 NetworkManager 工具的能力。
fromurl: https://opensource.com/article/20/7/nmcli
id: 12599
islctt: true
largepic: /data/attachment/album/202009/10/100302z2xq9cieqyekxbdc.jpg
permalink: /article-12599-1.html
pic: /data/attachment/album/202009/10/100302z2xq9cieqyekxbdc.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: nmcli 命令赋予你直接在 Linux 命令行操作 NetworkManager 工具的能力。
tags:
- nmcli
- 网络
thumb: false
title: 在命令行中使用 nmcli 来管理网络连接
titlepic: true
translator: FSSLC
updated: '2020-09-10 10:03:19'
---
> 
> nmcli 命令赋予你直接在 Linux 命令行操作 NetworkManager 工具的能力。
> 
> 
> 
![](/data/attachment/album/202009/10/100302z2xq9cieqyekxbdc.jpg)
[nmcli](https://developer.gnome.org/NetworkManager/stable/nmcli.html) 命令赋予你直接在 Linux 命令行操作 NetworkManager 工具的能力。它是 NetworkManager 软件包集成的一部分，通过使用一些 [应用程序接口](https://en.wikipedia.org/wiki/Application_programming_interface)（API）来获取 NetworkManager 的功能。
`nmcli` 发布于 2010 年，用以替代其他配置网络接口和连接的方法，例如 [ifconfig](https://man7.org/linux/man-pages/man8/ifconfig.8.html)。因为它是一个 [命令行界面](https://en.wikipedia.org/wiki/Command-line_interface)（CLI）工具，被设计用在终端窗口和脚本中，所以对于那些工作在没有 [图形用户界面](https://en.wikipedia.org/wiki/Graphical_user_interface)（GUI）的系统的管理员来说，它是一个非常理想的工具。
### ncmli 的语法
`nmcli` 命令可以使用*选项*来更改它的行为，使用*子命令*来告诉 `nmcli` 想使用它的那部分功能，使用*操作*来告诉 `nmcli` 你想执行什么操作。
```
$ nmcli   
```
`nmcli` 一共有 8 个子命令，每个子命令有一些相关的网络操作：
* `help` 提供有关 `nmcli` 命令和使用方法的帮助信息
* `general` 返回 NetworkManager 的状态和总体配置信息
* `networking` 提供命令来查询某个网络连接的状态和启动、禁用连接的功能
* `radio` 提供命令来查询某个 WiFi 网络连接的状态和启动、禁用连接的功能
* `monitor` 提供命令来监控 NetworkManager 的活动并观察网络连接的状态改变
* `connection` 提供命令来启用或禁用网络接口、添加新的连接、删除已有连接等功能
* `device` 主要被用于更改与某个设备（例如接口名称）相关联的连接参数或者使用一个已有的连接来连接设备
* `secret` 注册 `nmcli` 来作为一个 NetworkManager 的秘密代理，用以监听秘密信息。这个子命令很少会被用到，因为当连接到网络时，`nmcli` 会自动做这些事
### 简单的示例
首先，我们验证一下 NetworkManager 正在运行并且 `nmcli` 可以与之通信：
```
$ nmcli general
STATE      CONNECTIVITY  WIFI-HW  WIFI     WWAN-HW  WWAN    
connected  full          enabled  enabled  enabled  enabled
```
探测总是管理一个系统的首要部分。为了列出内存或磁盘上的网络连接配置，可以使用下面的命令：
```
$ nmcli connection show
NAME                UUID                                  TYPE      DEVICE
Wired connection 1  ac3241e4-b424-35d6-aaa7-07498561688d  ethernet  enp0s3
Wired connection 2  2279d917-fa02-390c-8603-3083ec5a1d3e  ethernet  enp0s8
Wired connection 3  52d89737-de92-35ec-b082-8cf2e5ac36e6  ethernet  enp0s9
```
上面的命令使用了 `connection` 子命令中的 `show` 操作。
用来运行上面这个例子的测试机器上运行着 Ubuntu 20.04，它安装了 3 个网络适配器：`enp0s3`、`enp0s8`和 `enp0s9`。
### 连接管理
理解 `nmcli` 的术语是非常重要的。一个网络 连接   connection 包含了一个连接的所有信息。你可以将它看作一个网络 配置   configuration 。“连接”包含了与其相关的所有信息，包括 [数据链路层](https://en.wikipedia.org/wiki/Data_link_layer) 和 [IP 地址信息](https://en.wikipedia.org/wiki/IP_address) 。它们是 [OSI 网络模型](https://en.wikipedia.org/wiki/OSI_model) 中的第 2 和第 3 层。
当你在 Linux 上配置网络时，通常来说你是在为某个网络设备（它们是安装在一个电脑中的网络接口）配置连接。当一个连接被某个设备所使用，那么就可以说这个连接被 激活   active 或者 上线   up 了，反之是 停用   inactive 或 下线   down 。
#### 添加网络连接
`nmcli` 允许你快速地创建网络连接并同时为该连接指定参数。为了通过使用“有线连接 2” `enp0s8` 来创建一个新的连接，你可以利用 `sudo` 来运行下面的命令：
```
$ sudo nmcli connection add type ethernet ifname enp0s8
Connection 'ethernet-enp0s8' (09d26960-25a0-440f-8b20-c684d7adc2f5) successfully added.
```
其中 `type` 选项指定需要一个 [Ethernet](https://en.wikipedia.org/wiki/Ethernet) 类型的连接，而 `ifname`（接口名）选项指定你想要为这个连接使用的网络接口设备。
让我们看看发生了什么变化：
```
$ nmcli connection show
NAME                UUID                                  TYPE      DEVICE
Wired connection 1  ac3241e4-b424-35d6-aaa7-07498561688d  ethernet  enp0s3
Wired connection 2  2279d917-fa02-390c-8603-3083ec5a1d3e  ethernet  enp0s8
Wired connection 3  52d89737-de92-35ec-b082-8cf2e5ac36e6  ethernet  enp0s9
ethernet-enp0s8     09d26960-25a0-440f-8b20-c684d7adc2f5  ethernet  --  
```
通过上图可以看到新的连接 `ethernet-enp0s8` 已经创建好了。它的    通用唯一标识符    Universally Unique IDentifier （UUID）也一同被赋予，并且其连接类型为 “Ethernet”。我们可以使用 `up` 子命令再加上连接名称（或 UUID）来使得这个连接被激活：
```
$ nmcli connection up ethernet-enp0s8
Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/4)
```
再次查看激活的连接：
```
$ nmcli connection show --active
NAME                UUID                                  TYPE      DEVICE
Wired connection 1  ac3241e4-b424-35d6-aaa7-07498561688d  ethernet  enp0s3
ethernet-enp0s8     09d26960-25a0-440f-8b20-c684d7adc2f5  ethernet  enp0s8
Wired connection 3  52d89737-de92-35ec-b082-8cf2e5ac36e6  ethernet  enp0s9
```
可以看到新的连接 `ethernet-enp0s8` 现在已经被激活了，并且与 `enp0s8` 网络接口设备绑定。
#### 调整连接
`nmcli` 命令使得调整现有连接的参数变得更加容易。也许你想将某个网络接口从    动态主机配置协议    Dynamic Host Configuration Protocol （DHCP）改为静态 IP 地址。
假设你需要为你的新连接分配一个固定的 IP 地址 `192.168.4.26`，那么你需要使用两个命令，一个用于设定 IP 地址，另一个用来将获取 IP 地址的方法改为 `manual`（手动）：
```
$ nmcli connection modify ethernet-enp0s8 ipv4.address 192.168.4.26/24
$ nmcli connection modify ethernet-enp0s8 ipv4.method manual
```
记得指定 [子网掩码](https://en.wikipedia.org/wiki/Subnetwork)，在我们这个测试的连接中，它是    无类域间路由    Classless Inter-Domain Routing （CIDR）中的 `255.255.255.0` 或 `/24`
为了使得你的更改生效，你需要通过停止再重新启用该连接。下面的第一个命令是停用该连接，第二个命令则是启用它：
```