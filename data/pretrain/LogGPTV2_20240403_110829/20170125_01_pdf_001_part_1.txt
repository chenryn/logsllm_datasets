基准测试
PostgreSQL,Greenplum
和最佳实践
digoal
自我介绍
• PGer
• 乐于分享，撰写技术类文章2000余篇。
• http://blog.163.com/digoal@126/
•
• PostgreSQL 中国社区发起人之一。
• PostgreSQL 中国社区PG大学发起人之一。
• DBA+社群联合发起人之一。
• 数十项数据库，网络相关专利。
• 曾就职于斯凯网络，负责数据库部门。主导了集团数据库系统、存储、主机、操
作系统，多IDC的架构设计和部署。数据库的HA、容灾、备份、恢复、分布式、数
据仓库架构设计。数据库管理和开发的标准化体系建立。在公司上市前使用
PostgreSQL完成去O，并顺利通过SOX审计。
• 现就职于阿里巴巴，AliCloudDB RDS PG内核组。
目录
• TPC-C 介绍
• TPC-H 介绍
• benchmarkSQL for TPC-C
• dbgen & pg-tpch for TPC-H
• PostgreSQL 最佳实践
• Greenplum 最佳实践
• tpc.org 参考数据
介绍
TPC-C
• 数据关系
• 公司 -> 仓库(W)
• 仓库 -> 销售点(10)
• 销售点 -> 客户(3000)
• W是生成测试数据时用户可以指定的
TPC-C
• 数据关系
10
Warehouse District
(W) (W*10)
3k
History
10w
(W*10*3k)+ 1+
Customer
Stock (W*10*3k)
(W*10w)
New Order
3+ (W*5k)
1+
0-1
Order Line
Item Order
(W*10*3k*10
(W*10w) (W*10*3k)+
10-15
)+
新建订单
• 事务内容：对于任意一个客户端,从固定的仓库随机选取 5-15 件商品,创建新订单.其中
1%的订单要由假想的用户操作失败而回滚。
• 45%
• "SELECT c_discount, c_last, c_credit, w_tax" +
• " FROM benchmarksql.customer, benchmarksql.warehouse" +
• " WHERE w_id = ? AND w_id = c_w_id" +
• " AND c_d_id = ? AND c_id = ?");
• "SELECT d_next_o_id, d_tax FROM benchmarksql.district" +
• " WHERE d_id = ? AND d_w_id = ? FOR UPDATE");
• "INSERT INTO benchmarksql.NEW_ORDER (no_o_id, no_d_id, no_w_id) " +
• "VALUES ( ?, ?, ?)");
• "UPDATE benchmarksql.district SET d_next_o_id = d_next_o_id + 1 " +
• " WHERE d_id = ? AND d_w_id = ?");
• "INSERT INTO benchmarksql.OORDER " +
• " (o_id, o_d_id, o_w_id, o_c_id, o_entry_d, o_ol_cnt, o_all_local)" +
• " VALUES (?, ?, ?, ?, ?, ?, ?)");
• "SELECT i_price, i_name , i_data FROM benchmarksql.item WHERE i_id = ?");
• "SELECT s_quantity, s_data, s_dist_01, s_dist_02, s_dist_03, s_dist_04, s_dist_05, " +
• " s_dist_06, s_dist_07, s_dist_08, s_dist_09, s_dist_10" +
• " FROM benchmarksql.stock WHERE s_i_id = ? AND s_w_id = ? FOR UPDATE");
• "UPDATE benchmarksql.stock SET s_quantity = ? , s_ytd = s_ytd + ?, s_remote_cnt = s_remote_cnt + ? " +
• " WHERE s_i_id = ? AND s_w_id = ?");
• "INSERT INTO benchmarksql.order_line (ol_o_id, ol_d_id, ol_w_id, ol_number, ol_i_id, ol_supply_w_id," +
• " ol_quantity, ol_amount, ol_dist_info) VALUES (?,?,?,?,?,?,?,?,?)");
支付
• 事务内容：对于任意一个客户端,从固定的仓库随机选取一个辖区及其内用户,采用随机
的金额支付一笔订单,并作相应历史纪录.
• 43%
• "UPDATE benchmarksql.warehouse SET w_ytd = w_ytd + ? WHERE w_id = ? ");
• "SELECT w_street_1, w_street_2, w_city, w_state, w_zip, w_name" +
• " FROM benchmarksql.warehouse WHERE w_id = ?");
• "UPDATE benchmarksql.district SET d_ytd = d_ytd + ? WHERE d_w_id = ? AND d_id = ?");
• "SELECT d_street_1, d_street_2, d_city, d_state, d_zip, d_name" +
• " FROM benchmarksql.district WHERE d_w_id = ? AND d_id = ?");
• "SELECT count(*) AS namecnt FROM benchmarksql.customer " +
• " WHERE c_last = ? AND c_d_id = ? AND c_w_id = ?");
• "SELECT c_first, c_middle, c_id, c_street_1, c_street_2, c_city, c_state, c_zip," +
• " c_phone, c_credit, c_credit_lim, c_discount, c_balance, c_since " +
• " FROM benchmarksql.customer WHERE c_w_id = ? AND c_d_id = ? AND c_last = ? " +
• "ORDER BY c_w_id, c_d_id, c_last, c_first ");
• "SELECT c_first, c_middle, c_last, c_street_1, c_street_2, c_city, c_state, c_zip," +
• " c_phone, c_credit, c_credit_lim, c_discount, c_balance, c_since " +
• " FROM benchmarksql.customer WHERE c_w_id = ? AND c_d_id = ? AND c_id = ?");
• "SELECT c_data FROM benchmarksql.customer WHERE c_w_id = ? AND c_d_id = ? AND c_id = ?");
• "UPDATE benchmarksql.customer SET c_balance = ?, c_data = ? " +
• " WHERE c_w_id = ? AND c_d_id = ? AND c_id = ?");
• "UPDATE benchmarksql.customer SET c_balance = ? WHERE c_w_id = ? AND c_d_id = ? AND c_id = ?");
• "INSERT INTO benchmarksql.history (h_c_d_id, h_c_w_id, h_c_id, h_d_id, h_w_id, h_date, h_amount, h_data) " +
• " VALUES (?,?,?,?,?,?,?,?)");
订单状态查询
• 事务内容：对于任意一个客户端,从固定的仓库随机选取一个辖区及其内用户,读取其最
后一条订单,显示订单内每件商品的状态.
• 4%
• "SELECT count(*) AS namecnt FROM benchmarksql.customer" +
• " WHERE c_last = ? AND c_d_id = ? AND c_w_id = ?");
• "SELECT c_balance, c_first, c_middle, c_id FROM benchmarksql.customer" +
• " WHERE c_last = ?" +
• " AND c_d_id = ?" +
• " AND c_w_id = ?" +
• " ORDER BY c_w_id, c_d_id, c_last, c_first");
• "SELECT c_balance, c_first, c_middle, c_last" +
• " FROM benchmarksql.customer" +
• " WHERE c_id = ?" +
• " AND c_d_id = ?" +
• " AND c_w_id = ?");
• "SELECT MAX(o_id) AS maxorderid FROM benchmarksql.oorder" +
• " WHERE o_w_id = ?" +
• " AND o_d_id = ?" +
• " AND o_c_id = ?");
• "SELECT o_carrier_id, o_entry_d" +
• " FROM benchmarksql.oorder" +
• " WHERE o_w_id = ?" +
• " AND o_d_id = ?" +
• " AND o_c_id = ?" +
• " AND o_id = ?");
• "SELECT ol_i_id, ol_supply_w_id, ol_quantity," +
• " ol_amount, ol_delivery_d" +
• " FROM benchmarksql.order_line" +
• " WHERE ol_o_id = ?" +
• " AND ol_d_id =?" +
• " AND ol_w_id = ?");
发货
• 事务内容：对于任意一个客户端,随机选取一个发货包,更新被处理订单的用户余额,并
把该订单从新订单中删除.
• 4%
• "SELECT no_o_id FROM benchmarksql.new_order WHERE no_d_id = ?" +
• " AND no_w_id = ?" +
• " ORDER BY no_o_id ASC");
• "DELETE FROM benchmarksql.new_order" +
• " WHERE no_d_id = ?" +
• " AND no_w_id = ?" +
• " AND no_o_id = ?");
• "SELECT o_c_id" +
• " FROM benchmarksql.oorder" +
• " WHERE o_id = ?" +
• " AND o_d_id = ?" +
• " AND o_w_id = ?");
• "UPDATE benchmarksql.oorder SET o_carrier_id = ?" +
• " WHERE o_id = ?" +
• " AND o_d_id = ?" +
• " AND o_w_id = ?");
• "UPDATE benchmarksql.order_line SET ol_delivery_d = ?" +
• " WHERE ol_o_id = ?" +
• " AND ol_d_id = ?" +
• " AND ol_w_id = ?");
• "SELECT SUM(ol_amount) AS ol_total" +
• " FROM benchmarksql.order_line" +
• " WHERE ol_o_id = ?" +
• " AND ol_d_id = ?" +
• " AND ol_w_id = ?");
• "UPDATE benchmarksql.customer SET c_balance = c_balance + ?" +
• ", c_delivery_cnt = c_delivery_cnt + 1" +
• " WHERE c_id = ?" +
• " AND c_d_id = ?" +
• " AND c_w_id = ?");
库存状态查询
• 事物内容：对于任意一个客户端,从固定的仓库和辖区随机选取最后 20 条订单,查看订
单中所有的货物的库存,计算并显示所有库存低于随机生成域值的商品数量.
• 4%
• "SELECT d_next_o_id" +
• " FROM benchmarksql.district" +
• " WHERE d_w_id = ?" +
• " AND d_id = ?");
• "SELECT COUNT(DISTINCT (s_i_id)) AS stock_count" +
• " FROM benchmarksql.order_line, benchmarksql.stock" +
• " WHERE ol_w_id = ?" +
• " AND ol_d_id = ?" +
• " AND ol_o_id = ? - 20" +
• " AND s_w_id = ?" +
• " AND s_i_id = ol_i_id" +
• " AND s_quantity < ?");
介绍
TPC-H
• 模拟决策支持系统中的数据库操作，测试数据库系
统复杂查询的响应时间，以每小时执行的查询数
(TPC-H QphH) 作为度量指标
• 22 个查询语句
– TPC- H 测试围绕22 个SELECT 语句展开，每个SELECT严
格定义，遵守SQL-92语法，并且不允许用户修改。
– 标准中从4 个方面定义每个SELECT 语句，即商业问题、
SELECT 的语法、参数和查询确认。
– 这些SELECT 语句的复杂程度超过大多数实际的OLTP 应
用，一个SELECT 执行时间少则几十秒，多则达15 小时
以上，22 个查询语句执行一遍需数个小时。
介绍
TPC-H
• 2 个更新操作
– 为了逼真地模拟数据仓库的实际应用环境，在22
个查询执行的同时，还有一对更新操作RF1 和RF2
并发地执行。
– RF1向Order 表和Lineitem 表中插入原行数的0.1%
的新行，模拟新销售业务的数据加入到数据库中；