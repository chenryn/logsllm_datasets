means that we can use simpler cryptographic protocols,
and can attempt to automatically secure all of our email
and network trafﬁc.
1.2.2 Overview
In the remainder of the paper, we will present a prac-
tical system for deploying identity-based cryptography
(shown in Figure 1). In Section 2.1, we begin with an
USENIX Association
12th USENIX Security Symposium 
217
overview of the design issues important in embedding
IBC into existing protocols. In Sections 2.3, and 2.2, we
describe the components of our system. In Section 3,
we describe an email client that uses our approach to
secure mail, and in Section 4, we describe how to use
this system to secure IPsec trafﬁc. Finally, we present
our (in-progress) Linux implementation of this system
in Section 5, and ﬁnish with related work and conclu-
sions.
2 System Design
We have designed a system for using domain-based trust
to implement identity-based cryptography. The overall
structure of this system can be seen in Figure 1. Such a
system consists of a number of components: ﬁrst, a set
of system parameters and a domain master secret, cre-
ated by a setup procedure. Second, a private key genera-
tor, or PKG, that distributes private keys to authenticated
members of the domain. Third, a modiﬁed nameserver
capable of providing copies of the system parameters to
communicating peers. And ﬁnally, client software capa-
ble of using DNS-based IBC (DNSIBC) to secure com-
munications.
2.1
IBC Setup
The ﬁrst step in enabling DNSIBC in a domain is the cre-
ation of the domain’s IBC system parameters (labeled
setup in Figure 1). In what follows, we focus on IBC
systems implemented using operations over supersingu-
lar elliptic curves [2], as there are a large number of en-
cryption, signature, and key exchange protocols than can
be used with a single private key pair derived for such a
scheme.1
To specify the domain’s system parameters, we ﬁrst
specify a set of elliptic curve group parameters (“group-
params”). These consist of the choice of the curve it-
self, the ﬁeld it is deﬁned over, and a generator point,
referred to as P. These can be considered as analogous
to the group parameters used in standard Difﬁe-Hellman
systems, whether deﬁned over an elliptic curve or over a
prime ﬁeld (where the corresponding choice would be of
a prime, p, and a generator, g). Like the group parame-
ters used with Difﬁe-Hellman schemes, these parameters
can be shared by many domains, and sets of such param-
eters can be predeﬁned by standards bodies for general
1Note that in the presentation here and in what follows, we use
notation common for the mathematics of elliptic curves – P is a point
on a curve, x is an integer drawn from the ﬁeld over which the curve
is deﬁned, and  is the elliptic curve equivalent of the
standard Difﬁe-Hellman tuple .
use. This is done, for example, for Difﬁe-Hellman pa-
rameters for use in IPsec [15], allowing hosts that choose
to use the standard groups to simply transmit short iden-
tiﬁers in place of the group parameters.
Once the group-params have been selected, each do-
main creates its own master-secret, sd, which is a ran-
dom value in a range speciﬁed by the group-params.
The group-parameters and the master-secret are used to
derive a corresponding public domain-public-key, sdP.
The master-secret is used later by the PKG to derive the
private-key corresponding to any identity string, id, by
ﬁrst converting that id to a point Qid on the curve using a
hash function mapToPoint, Qid = mapToPoint(id), and
calculating the private-key as Sid = sdQid.
The resulting domain-params consist of:
domain-params := (group-params, domain-public-key)
The master-secret must be stored securely for use by the
PKG, while the domain-params are published publicly
using the DNS, as shown in Figure 2.
this
Revocation To add the ability to revoke identities in
this system, we add a form of key expiration [2].
In-
stead of using the identity id as the public key of a
user or host, we use salt(cid:3)id, where salt is a random
string long enough to be unlikely to be chosen at ran-
dom again (say, ten bytes), and (cid:3) indicates concatena-
tion. For instance, if your id was PI:EMAIL,
and the current salt for parc.com was OVQpMJJPpgZn,
your public key for
time period would be
OVQpMJJPpgZnsmetters@parc.com. The salt is pub-
lished in the DNS along with the domain-params. When
the domain’s salt changes, keyholders in the domain
know to automatically contact the PKG to update their
private keys. By using lifetimes in the DNS (see sec-
tion 2.2) to control the interval at which we have mem-
bers of the domain and communicating peers check for
an updated salt value, we can control the revocation in-
terval for keys in this system. Because peers will au-
tomatically update their cached copy of this domain’s
system salt, we can easily revoke keys on any schedule
with much lower bandwidth requirements than, say, the
distribution of Certiﬁcate Revocation Lists (CRLs).
2.2 DNS
We extend the Domain Name Service [21, 22] to sup-
port publication of the domain-params and salt. We do
this by adding two resource record (RR) types to the
218
12th USENIX Security Symposium 
USENIX Association
setup
master-secret, KeyServer
salt
salt
private-key
client
1.1.1.1.
domain-params, salt
N.
encrypted 
email
3.
2.
IPsec
DNS
domain-params, salt
peer
Figure 1: The architecture of our DNSIBC system. The step labeled “N.” can take place any time after step “1.”
Encrypted email is sent normally: i.e., through a standard mail server, without direct interaction between sender and
recipient.
DNS. These are PARAMS, which encodes the domain-
params, and PSALT, which encodes the salt to be used
with these parameters.
In this section, we discuss the
format and values of the RR ﬁelds associated with the
new RR types.
The NAME ﬁeld of the PARAMS and PSALT RRs must
be the domain name for which these are the domain-
params and salt, respectively. The use of DNS abbrevi-
ated names is allowed (although care must be taken so
that this does not interact poorly with signing of RRs,
discussed below.)
The TTL ﬁeld of the PARAMS RR should be set to an inter-
val that adequately protects against compromise of the
master-secret. In particular, if an unauthorized party ob-
tains the master-secret, she can compute the private-key
of any user or machine in the affected domain. If the
master-secret is compromised, use of the IBC system
should be immediately discontinued until a new master-
secret has been generated and corresponding domain-
params have propagated to the DNS system. At this
point, all previous private-keys and the original master-
key are now useless to the attacker. One way to guar-
antee this recovery happens quickly is to set the TTL
ﬁeld of the PARAMS record to an interval short enough to
force frequent updates due to TTL expiration. However,
given the typical size of the PARAMS record (approxi-
mately 286 bytes with standardized group-params and
690 bytes without), and the unlikelihood of the master-
secret compromise (which is presumably on a closely-
monitored and well-protected machine accessible from
only inside the domain), one can set the PARAMS TTL to
a reasonably long period of time (e.g., on the order of
days).
The TTL ﬁeld of the PSALT RR should be set to an in-
terval that protects against compromise of an individual
private-key. If a private-key has been compromised, use
of IBC on the compromised machine (or user’s email
account) must be discontinued until a new salt has been
generated and propagated to the DNS system. Note that
other machines/users may safely continue using IBC-
protected IPsec/email. The use of a new salt necessitates
(eventual) distribution of a new private-key to every ma-
chine/user enrolled in the system. This might place a
heavy load on the key server if the update is performed
all at once; however, an update could be performed in-
crementally, as machines discover they are using ex-
pired salts, or by having several PSALT records avail-
able for a domain used by disjoint blocks of addresses2.
Since the compromise of an individual private-key is
more likely than compromise of the master-secret, and
the PSALT RR is signiﬁcantly shorter than the PARAMS
RR, it makes sense to use a much shorter time for the
TTL of the PSALT RR, perhaps on the order of several
hours. We note that even after the TTL of a PSALT or
PARAMS record runs out, it does not necessarily have to
be changed. For efﬁciency, we suggest keeping PARAMS
and PSALT records unchanged for long periods of time
or until replacement becomes necessary. For the case of
the PSALT, this would be until the occurrence of an ac-
tual key compromise, or several weeks have passed. The
PARAMS could be expected to remain unchanged unless
2For example, the PSALT record could be augmented with a ﬁeld
indicating it is to be used for all email address starting with letters a–h.
For conciseness, we will not discuss the many interesting variants on
the PSALT ﬁeld that might arise in such a system.
USENIX Association
12th USENIX Security Symposium 
219
struct group_params {
big_int p, q;
point_Fp P;
};
struct domain_params {
struct group_params gp;
point_Fp domain_public_key;
};
struct DNS_PARAMS_RR {
unsigned char *NAME;
uint16
uint32
uint16
uint16
uint8
uint8
struct domain_params *domain_params;
TYPE, CLASS;
TTL;
RDLENGTH;
flags;
protocol;
algorithm;
// RDATA start
};
parc.com. IN PSALT 0VQpMJJPpgZn
parc.com. IN PARAMS 256 1 1 MIICrgKBgC2c\
33lfS7BexMEzGkWGYcIBPrIH9l5TnE6c06Ifg\
fnZBK1cz/PGrF36Z7n1hrHGFHb0hmmHBZb17a\
YjEG2+MbxvN801DFE6sihKXw0RlLkk5DtuD...
Figure 3: Example zone ﬁle containing PSALT and
PARAMS DNS resource records.
KEY, and it would be improper to have one KEY record
be used to sign a KEY record at the same level. Third, the
domain-params are not a public key, and should not be
treated as such (for the purposes of revocation, select-
ing a TTL, etc.) Placing them in a KEY record encour-
ages confusion in this regard, and is in any case depre-
cated [19].
The RDATA ﬁeld of the PSALT RR type consists of simply
the bytes that make up the salt.
Figure 2: Internal format of the PARAMS DNS resource
record and related types.
2.2.1 DNSSEC Records for IBE
the master-secret was compromised.
To simplify implementation, the RDATA (record type-
speciﬁc) portion of the PARAMS resource record uses
the same format as that of the KEY RR [9] (see Fig-
ure 4). This record contains ﬁelds for key usage flags,
a protocol and an algorithm (see Figure 2). We
suggest using only a subset of the flags possible for
the KEY record: bits 0 and 1 (prohibition of use of the
domain-params for authentication and conﬁdentiality,
respectively), and bit 8 (allowing use of domain-params
for IPsec). The protocol ﬁeld, which further speciﬁes
how this key can be used, should allow an additional
value beyond those available in the KEY record: an index
for “IBC”. The algorithm ﬁeld indicates which basic
IBC system is being used, in this case an index indicat-
ing the use of IBC based on supersingular elliptic curves.
One might notice that instead of creating a new RR
speciﬁcally to house the domain-params, we could have
extended the KEY resource record type. However, we
feel this would be inappropriate for several reasons.
First, DNS servers are only required to handle two KEY
RRs associated with a DNS name [9]; presumably one
is already used as the DNSSEC signing key for this do-
main, so spending the other on IBC unnecessarily lim-
its further use of the KEY RR type. Second, we wish
to use DNSSEC to verify the integrity of a signature on
the PARAMS record; this will be signed by the domain
In order to bootstrap trust in a domain’s IBC domain-
params there must be a way to verify the validity of the
PARAMS and PSALT RRs retrieved from the DNS. We
recommend using DNSSEC [9]. A SIG record should
be added for the PARAMS resource record owned by this
domain. If present, the SIG record must be veriﬁable us-
ing the domain’s (traditional) cryptographic public key,
which must be available as a KEY record.
2.3 Private Key Generator
In our system, the Private Key Generator (PKG) is a
service that computes an entity’s private-key using the
groups-params, the master-secret, and the client’s iden-
tity (which could be an email address or a hostname),
and the current salt. The PKG obtains the group-params
and master-secret from the output of the setup proce-
dure (see Section 2.1). This setup procedure could be
run automatically as part of (PKG) initialization. The
PKG then waits for key retrieval requests from clients.
Initial Client Key Retrieval Perhaps the most difﬁ-
cult problem in designing a system to easily deploy IBC