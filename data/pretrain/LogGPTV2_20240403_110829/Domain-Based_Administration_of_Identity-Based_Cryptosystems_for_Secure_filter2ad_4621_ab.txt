### 1.2.2 Overview
In the remainder of this paper, we will present a practical system for deploying identity-based cryptography (IBC), as illustrated in Figure 1. In Section 2.1, we provide an overview of the key design considerations for integrating IBC into existing protocols. Sections 2.2 and 2.3 detail the components of our system. Section 3 describes an email client that uses our approach to secure mail, while Section 4 explains how to use this system to secure IPsec traffic. Finally, in Section 5, we present our (ongoing) Linux implementation of this system, followed by a discussion of related work and conclusions.

### 2 System Design
We have designed a system that leverages domain-based trust to implement identity-based cryptography. The overall structure of this system is depicted in Figure 1. The system comprises several components: first, a set of system parameters and a domain master secret, generated through a setup procedure. Second, a Private Key Generator (PKG) that distributes private keys to authenticated members of the domain. Third, a modified nameserver capable of providing copies of the system parameters to communicating peers. Lastly, client software that can use DNS-based IBC (DNSIBC) to secure communications.

#### 2.1 IBC Setup
The initial step in enabling DNSIBC in a domain is the creation of the domain’s IBC system parameters, as shown in the "setup" step in Figure 1. Our focus is on IBC systems implemented using operations over supersingular elliptic curves [2], as they support a wide range of encryption, signature, and key exchange protocols with a single private key pair.

To specify the domain’s system parameters, we first define a set of elliptic curve group parameters ("group-params"). These include the choice of the curve, the field it is defined over, and a generator point, denoted as P. These parameters are analogous to those used in standard Diffie-Hellman systems, whether defined over an elliptic curve or a prime field. Like Diffie-Hellman parameters, these can be shared by multiple domains and pre-defined by standards bodies for general use. For example, Diffie-Hellman parameters for IPsec [15] allow hosts to transmit short identifiers instead of the full group parameters.

Once the group-params are selected, each domain generates its own master-secret, \( s_d \), which is a random value within a range specified by the group-params. The group-parameters and the master-secret are used to derive a corresponding public domain-public-key, \( s_dP \). The master-secret is later used by the PKG to derive the private key corresponding to any identity string, \( id \), by first converting \( id \) to a point \( Q_{id} \) on the curve using a hash function, \( Q_{id} = \text{mapToPoint}(id) \), and then calculating the private key as \( S_{id} = s_dQ_{id} \).

The resulting domain-params consist of:
\[ \text{domain-params} := (\text{group-params}, \text{domain-public-key}) \]

The master-secret must be securely stored for use by the PKG, while the domain-params are published publicly using the DNS, as shown in Figure 2.

**Revocation:**
To add the ability to revoke identities in this system, we incorporate a form of key expiration [2]. Instead of using the identity \( id \) as the public key, we use \( \text{salt} \parallel id \), where \( \text{salt} \) is a random string long enough to be unlikely to be chosen again (e.g., ten bytes), and \( \parallel \) indicates concatenation. For example, if your \( id \) is \( \text{PI:EMAIL} \) and the current salt for parc.com is \( \text{OVQpMJJPpgZn} \), your public key for a given time period would be \( \text{OVQpMJJPpgZnsmetters@parc.com} \). The salt is published in the DNS along with the domain-params. When the domain’s salt changes, keyholders in the domain know to automatically contact the PKG to update their private keys. By using lifetimes in the DNS (see Section 2.2) to control the interval at which domain members and communicating peers check for an updated salt value, we can manage the revocation interval for keys in this system. This approach allows for easy key revocation with lower bandwidth requirements compared to distributing Certificate Revocation Lists (CRLs).

#### 2.2 DNS
We extend the Domain Name Service (DNS) [21, 22] to support the publication of domain-params and salt. We achieve this by adding two new resource record (RR) types to the DNS: PARAMS, which encodes the domain-params, and PSALT, which encodes the salt to be used with these parameters.

In this section, we discuss the format and values of the RR fields associated with the new RR types.

- **NAME Field:** The NAME field of the PARAMS and PSALT RRs must be the domain name for which these are the domain-params and salt, respectively. DNS abbreviated names are allowed, but care must be taken to avoid issues with RR signing.
- **TTL Field (PARAMS):** The TTL field of the PARAMS RR should be set to an interval that adequately protects against the compromise of the master-secret. If the master-secret is compromised, the IBC system should be immediately discontinued until a new master-secret is generated and the corresponding domain-params are propagated to the DNS. Given the typical size of the PARAMS record (approximately 286 bytes with standardized group-params and 690 bytes without), and the unlikelihood of master-secret compromise, the TTL can be set to a reasonably long period (e.g., days).
- **TTL Field (PSALT):** The TTL field of the PSALT RR should be set to an interval that protects against the compromise of an individual private key. If a private key is compromised, IBC use on the affected machine or user’s email account must be discontinued until a new salt is generated and propagated. Other machines/users can continue using IBC-protected IPsec/email. The use of a new salt requires eventual distribution of a new private key to every enrolled machine/user. To manage the load on the key server, updates can be performed incrementally or by having multiple PSALT records available for disjoint blocks of addresses. Since the compromise of an individual private key is more likely than that of the master-secret, and the PSALT RR is shorter, a much shorter TTL (e.g., several hours) is recommended.

**Example Zone File:**
```
parc.com. IN PSALT 0VQpMJJPpgZn
parc.com. IN PARAMS 256 1 1 MIICrgKBgC2c\
33lfS7BexMEzGkWGYcIBPrIH9l5TnE6c06Ifg\
fnZBK1cz/PGrF36Z7n1hrHGFHb0hmmHBZb17a\
YjEG2+MbxvN801DFE6sihKXw0RlLkk5DtuD...
```

#### 2.2.1 DNSSEC Records for IBE
To bootstrap trust in a domain’s IBC domain-params, there must be a way to verify the validity of the PARAMS and PSALT RRs retrieved from the DNS. We recommend using DNSSEC [9]. A SIG record should be added for the PARAMS resource record owned by the domain. If present, the SIG record must be verifiable using the domain’s traditional cryptographic public key, which must be available as a KEY record.

#### 2.3 Private Key Generator (PKG)
In our system, the Private Key Generator (PKG) is a service that computes an entity’s private key using the group-params, the master-secret, and the client’s identity (which could be an email address or a hostname), and the current salt. The PKG obtains the group-params and master-secret from the output of the setup procedure (see Section 2.1). This setup procedure can be run automatically as part of PKG initialization. The PKG then waits for key retrieval requests from clients.

**Initial Client Key Retrieval:**
Perhaps the most challenging aspect of designing a system to easily deploy IBC is the initial key retrieval process. Clients must securely obtain their private keys from the PKG, and this process must be both efficient and secure.