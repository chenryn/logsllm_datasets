1 to disable WER
DisableQueue
Determines whether reports are to be 
queued
1 to disable queue
DontShowUI
Disables or enables the WER UI
1 to disable UI
540 
CHAPTER 10 Management, diagnostics, and tracing
Settings
Meaning
Values
DontSendAdditionalData
Prevents additional crash data from be-
ing sent
1 not to send
ExcludedApplicationsAppName
List of applications excluded from WER
String containing the application list
ForceQueue
Whether reports should be sent to the 
user queue
1 to send reports to the queue
LocalDumpsDumpFolder
Path at which to store the dump files
String containing the path
LocalDumpsDumpCount
Maximum number of dump files in the 
path
Count
LocalDumpsDumpType
Type of dump to generate during a crash
0 for a custom dump, 1 for a minidump, 2 
for a full dump
LocalDumpsCustomDumpFlags
For custom dumps, specifies custom 
options
Values defined in MINIDUMP_TYPE (see 
Chapter 12 for more information)
LoggingDisabled
Enables or disables logging
1 to disable logging
MaxArchiveCount
Maximum size of the archive (in files)
Value between 1–5000
MaxQueueCount
Maximum size of the queue
Value between 1–500
QueuePesterInterval
Days between requests to have the user 
check for solutions
Number of days
The Windows Fault Reporting process started with the -u switch starts the report generation: 
the process maps again the shared memory section containing the crash data, identifies the exception’s 
record and descriptor, and obtains the snapshot taken previously. In case the snapshot does not 
exist, the WerFault process operates directly on the faulting process, which is suspended. WerFault 
first determines the nature of the faulting process (service, native, standard, or shell process). If the 
faulting process has asked the system not to report any hard errors (through the SetErrorMode API), 
the entire process is aborted, and no report is created. Otherwise, WER checks whether a default 
post-mortem debugger is enabled through settings stored in the AeDebug subkey (AeDebugProtected 
for protected processes) under the HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ root 
registry key. Table 10-20 describes the possible values of both keys.
TABLE 10-20 Valid registry values used for the AeDebug and AeDebugProtected root keys
Value name
Meaning
Data
Debugger
Specify the debugger executable to be 
launched when an application crashes.
Full path of the debugger executable, with 
eventual command-line arguments. The -p 
switch is automatically added by WER, pointing 
it to the crashing process ID.
ProtectedDebugger
Same as Debugger but for protected 
processes only.
Full path of the debugger executable. Not valid 
for the AeDebug key.
Auto
Specify the Autostartup mode
1 to enable the launching of the debugger in 
any case, without any user consent, 0 other-
wise.
LaunchNonProtected
Specify whether the debugger should be ex-
ecuted as unprotected. 
This setting applies only to the 
AeDebugProtected key.
1 to launch the debugger as a standard 
process.
CHAPTER 10 Management, diagnostics, and tracing
541
If the debugger start type is set to Auto, WER starts it and waits for a debugger event to be sig-
naled before continuing the report creation. The report generation is started through the internal 
GenerateCrashReport routine implemented in the User Mode Crash Reporting DLL (Faultrep.dll). 
The latter configures all the WER plug-ins and initializes the report using the WerReportCreate 
API, exported from the WER.dll. (Note that at this stage, the report is only located in memory.) The 
GenerateCrashReport routine calculates the report ID and a signature and adds further diagnostics 
data to the report, like the process times and startup parameters or application-defined data. It then 
checks the WER configuration to determine which kind of memory dump to create (by default, a 
minidump is acquired). It then calls the exported WerReportAddDump API with the goal to initialize the 
dump acquisition for the faulting process (it will be added to the final report). Note that if a snapshot 
has been previously acquired, it is used for acquiring the dump.
The WerReportSubmit API, exported from WER.dll, is the central routine that generates the dump 
of the faulting process, creates all the files included in the report, shows the UI (if configured to do so 
by the DontShowUI registry value), and sends the report to the Online Crash server. The report usually 
includes the following:
I 
A minidump file of the crashing process (usually named memory.hdmp)
I 
A human-readable text report, which includes exception information, the calculated signature
of the crash, OS information, a list of all the files associated with the report, and a list of all the
modules loaded in the crashing process (this file is usually named report.wer)
I 
A CSV (comma separated values) file containing a list of all the active processes at the time of
the crash and basic information (like the number of threads, the private working set size, hard
fault count, and so on)
I 
A text file containing the global memory status information
I 
A text file containing application compatibility information
The Fault Reporting process communicates through ALPC to the WER service and sends commands 
to allow the service to generate most of the information present in the report. After all the files have 
been generated, if configured appropriately, the Windows Fault Reporting process presents a dialog 
box (as shown in Figure 10-39) to the user, notifying that a critical error has occurred in the target 
process. (This feature is disabled by default in Windows 10.)
FIGURE 10-39 The Windows Error Reporting dialog box.
542 
CHAPTER 10 Management, diagnostics, and tracing
In environments where systems are not connected to the Internet or where the administrator wants 
to control which error reports are submitted to Microsoft, the destination for the error report can 
be configured to be an internal file server. The System Center Desktop Error Monitoring (part of the 
Microsoft Desktop Optimization Pack) understands the directory structure created by Windows Error 
Reporting and provides the administrator with the option to take selective error reports and submit 
them to Microsoft.
As previously discussed, the WER service uses an ALPC port for communicating with crashed 
processes. This mechanism uses a systemwide error port that the WER service registers through 
NtSetInformationProcess (which uses DbgkRegisterErrorPort). As a result, all Windows processes have 
an error port that is actually an ALPC port object registered by the WER service. The kernel and the 
unhandled exception filter in Ntdll use this port to send a message to the WER service, which then 
analyzes the crashing process. This means that even in severe cases of thread state damage, WER is still 
able to receive notifications and launch WerFault.exe to log the detailed information of the critical er-
ror in a Windows Event log (or to display a user interface to the user) instead of having to do this work 
within the crashing thread itself. This solves all the problems of silent process death: Users are notified, 
debugging can occur, and service administrators can see the crash event.
EXPERIMENT: Enabling the WER user interface
Starting with the initial release of Windows 10, the user interface displayed by WER when an ap-
plication crashes has been disabled by default. This is primarily because of the introduction of the 
Restart Manager (part of the Application Recovery and Restart technology). The latter allows ap-
plications to register a restart or recovery callback invoked when an application crashes, hangs, 
or just needs to be restarted for servicing an update. As a result, classic applications that do 
not register any recovery callback when they encounter an unhandled exception just terminate 
without displaying any message to the user (but correctly logging the error in the system log). 
As discussed in this section, WER supports a user interface, which can be enabled by just adding a 
value in one of the WER keys used for storing settings. For this experiment, you will re-enable the 
WER UI using the global system key. 
From the book’s downloadable resources, copy the BuggedApp executable and run it. After 
pressing a key, the application generates a critical unhandled exception that WER intercepts 
and reports. In default configurations, no error message is displayed. The process is terminated, 
an error event is stored in the system log, and the report is generated and sent without any 
user intervention. Open the Registry Editor (by typing regedit in the Cortana search box) and 
navigate to the HKLM\SOFTWARE\Microsoft\Windows \Windows Error Reporting registry key. 
If the DontShowUI value does not exist, create it by right-clicking the root key and selecting New, 
DWORD (32 bit) Value and assign 0 to it.
If you restart the bugged application and press a key, WER displays a user interface similar 
to the one shown in Figure 10-39 before terminating the crashing application. You can repeat 
the experiment by adding a debugger to the AeDebug key. Running Windbg with the -I switch 
performs the registration automatically, as discussed in the “Witnessing a COM-hosted task” 
experiment earlier in this chapter.
EXPERIMENT: Enabling the WER user interface
Starting with the initial release of Windows 10, the user interface displayed by WER when an ap-
plication crashes has been disabled by default. This is primarily because of the introduction of the 
Restart Manager (part of the Application Recovery and Restart technology). The latter allows ap-
plications to register a restart or recovery callback invoked when an application crashes, hangs, 
or just needs to be restarted for servicing an update. As a result, classic applications that do 
not register any recovery callback when they encounter an unhandled exception just terminate 
without displaying any message to the user (but correctly logging the error in the system log). 
As discussed in this section, WER supports a user interface, which can be enabled by just adding a 
value in one of the WER keys used for storing settings. For this experiment, you will re-enable the 
WER UI using the global system key. 
From the book’s downloadable resources, copy the BuggedApp executable and run it. After 
pressing a key, the application generates a critical unhandled exception that WER intercepts 
and reports. In default configurations, no error message is displayed. The process is terminated, 
an error event is stored in the system log, and the report is generated and sent without any 
user intervention. Open the Registry Editor (by typing regedit in the Cortana search box) and 
navigate to the HKLM\SOFTWARE\Microsoft\Windows \Windows Error Reporting registry key. 
If the DontShowUI value does not exist, create it by right-clicking the root key and selecting 
DontShowUI value does not exist, create it by right-clicking the root key and selecting 
DontShowUI
New, 
DWORD (32 bit) Value and assign 0 to it.
If you restart the bugged application and press a key, WER displays a user interface similar 
to the one shown in Figure 10-39 before terminating the crashing application. You can repeat 
the experiment by adding a debugger to the AeDebug key. Running Windbg with the -I switch 
performs the registration automatically, as discussed in the “Witnessing a COM-hosted task” 
experiment earlier in this chapter.
CHAPTER 10 Management, diagnostics, and tracing
543
Kernel-mode (system) crashes
Before discussing how WER is involved when a kernel crashes, we need to introduce how the ker-
nel records crash information. By default, all Windows systems are configured to attempt to record 
information about the state of the system before the Blue Screen of Death (BSOD) is displayed, and 
the system is restarted. You can see these settings by opening the System Properties tool in Control 
Panel (under System and Security, System, Advanced System Settings), clicking the Advanced tab, 
and then clicking the Settings button under Startup and Recovery. The default settings for a Windows 
system are shown in Figure 10-40.
FIGURE 10-40 Crash dump settings.
Crash dump files
Different levels of information can be recorded on a system crash:
I 
Active memory dump An active memory dump contains all physical memory accessible and
in use by Windows at the time of the crash. This type of dump is a subset of the complete mem-
ory dump; it just filters out pages that are not relevant for troubleshooting problems on the
host machine. This dump type includes memory allocated to user-mode applications and active
pages mapped into the kernel or user space, as well as selected Pagefile-backed Transition,
Standby, and Modified pages such as the memory allocated with VirtualAlloc or page-file
backed sections. Active dumps do not include pages on the free and zeroed lists, the file cache,
guest VM pages, and various other types of memory that are not useful during debugging.
544 
CHAPTER 10 Management, diagnostics, and tracing
I 
Complete memory dump A complete memory dump is the largest kernel-mode dump file
that contains all the physical pages accessible by Windows. This type of dump is not fully sup-
ported on all platforms (the active memory dump superseded it). Windows requires that a page
file be at least the size of physical memory plus 1 MB for the header. Device drivers can add up
to 256 MB for secondary crash dump data, so to be safe, it’s recommended that you increase
the size of the page file by an additional 256 MB.
I 
Kernel memory dump A kernel memory dump includes only the kernel-mode pages allo-
cated by the operating system, the HAL, and device drivers that are present in physical memory
at the time of the crash. This type of dump does not contain pages belonging to user processes.
Because only kernel-mode code can directly cause Windows to crash, however, it’s unlikely that
user process pages are necessary to debug a crash. In addition, all data structures relevant for
crash dump analysis—including the list of running processes, the kernel-mode stack of the cur-
rent thread, and list of loaded drivers—are stored in nonpaged memory that saves in a kernel
memory dump. There is no way to predict the size of a kernel memory dump because its size
depends on the amount of kernel-mode memory allocated by the operating system and drivers
present on the machine.
I 
Automatic memory dump This is the default setting for both Windows client and server
systems. An automatic memory dump is similar to a kernel memory dump, but it also saves
some metadata of the active user-mode process (at the time of the crash). Furthermore, this
dump type allows better management of the system paging file’s size. Windows can set the size
of the paging file to less than the size of RAM but large enough to ensure that a kernel memory
dump can be captured most of the time.
I 
Small memory dump A small memory dump, which is typically between 128 KB and 1 MB in
size and is also called a minidump or triage dump, contains the stop code and parameters, the
list of loaded device drivers, the data structures that describe the current process and thread
(called the EPROCESS and ETHREAD—described in Chapter 3 of Part 1), the kernel stack for the
thread that caused the crash, and additional memory considered potentially relevant by crash
dump heuristics, such as the pages referenced by processor registers that contain memory ad-
dresses and secondary dump data added by drivers.
Note Device drivers can register a secondary dump data callback routine by calling 
KeRegisterBugCheckReasonCallback. The kernel invokes these callbacks after a crash and a 
callback routine can add additional data to a crash dump file, such as device hardware mem-
ory or device information for easier debugging. Up to 256 MB can be added systemwide by 
all drivers, depending on the space required to store the dump and the size of the file into 
which the dump is written, and each callback can add at most one-eighth of the available 
additional space. Once the additional space is consumed, drivers subsequently called are 
not offered the chance to add data.
The debugger indicates that it has limited information available to it when it loads a minidump, and 
basic commands like !process, which lists active processes, don’t have the data they need. A kernel 
CHAPTER 10 Management, diagnostics, and tracing
545
memory dump includes more information, but switching to a different process’s address space map-
pings won’t work because required data isn’t in the dump file. While a complete memory dump is a 
superset of the other options, it has the drawback that its size tracks the amount of physical memory on 
a system and can therefore become unwieldy. Even though user-mode code and data usually are not 
used during the analysis of most crashes, the active memory dump overcame the limitation by storing 
in the dump only the memory that is actually used (excluding physical pages in the free and zeroed 
list). As a result, it is possible to switch address space in an active memory dump.
An advantage of a minidump is its small size, which makes it convenient for exchange via email, 
for example. In addition, each crash generates a file in the directory %SystemRoot%\Minidump with 
a unique file name consisting of the date, the number of milliseconds that have elapsed since the 
system was started, and a sequence number (for example, 040712-24835-01.dmp). If there's a conflict, 
the system attempts to create additional unique file names by calling the Windows GetTickCount 
function to return an updated system tick count, and it also increments the sequence number. By 
default, Windows saves the last 50 minidumps. The number of minidumps saved is configurable 
by modifying the MinidumpsCount value under the HKLM\SYSTEM\CurrentControlSet\Control\ 
CrashControl registry key.
A significant disadvantage is that the limited amount of data stored in the dump can hamper effective 
analysis. You can also get the advantages of minidumps even when you configure a system to generate 
kernel, complete, active, or automatic crash dumps by opening the larger crash with WinDbg and using 
the .dump /m command to extract a minidump. Note that a minidump is automatically created even if 
the system is set for full or kernel dumps.
Note You can use the .dump command from within LiveKd to generate a memory image 
of a live system that you can analyze offline without stopping the system. This approach is 
useful when a system is exhibiting a problem but is still delivering services, and you want to 
troubleshoot the problem without interrupting service. To prevent creating crash images 
that aren’t necessarily fully consistent because the contents of different regions of memory 
reflect different points in time, LiveKd supports the –m flag. The mirror dump option pro-
duces a consistent snapshot of kernel-mode memory by leveraging the memory manager’s 
memory mirroring APIs, which give a point-in-time view of the system.
The kernel memory dump option offers a practical middle ground. Because it contains all kernel-
mode-owned physical memory, it has the same level of analysis-related data as a complete memory 