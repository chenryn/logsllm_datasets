的碎片，当它们被发送到网络上时，接收系统把数据包碎片还原到原来的状态。然而，泪滴以
一种系统不能将文件还原在一起的方式分割数据包。旧的系统无法处理这种情况，并会崩溃，
但补丁解决了这个问题。此外，入侵检测系统可以检查畸形数据包。
7.Land 攻击（自己搞自己）
Land 攻击是指攻击者使用受害者的 IP 地址作为源 IP 地址和目的 IP 地址，并发送伪造
的 SYN 包给受害者。这使系统不断地对自己做出应答，并最终可能会冻结，崩溃或重新启动。
这种攻击在 1997 被第一次发现，它又几次攻击不同的端口。保持一个系统更新并使用过滤流
量检测相同的源和目的地地址，有助于防止 Land 攻击的发生。
8.零日攻击 Zero-day Exploit
零日漏洞是指利用他人未知的系统漏洞对系统发起攻击，也指无法修补的漏洞。
9.恶意代码 Malicious Code
恶意代码是指在计算机系统上执行不必要的、未经授权的或未知活动的脚本或程序。恶意
—294—
代码可以采取多种形式，包括病毒，蠕虫，木马，具有破坏性宏的文件，和逻辑炸弹。它通常
被称为恶意软件，或恶意代码。恶意代码存在于每一种类型的计算机或计算设备，是现今最常
见的安全漏洞。
10.中间人攻击 Man-in-the-Middle Attacks
当一个恶意用户能够在一个正在进行的通信的两个端点之间的逻辑上获得一个位置时，
一个中间人攻击就会产生。中间人攻击有两种。一个涉及复制或刺探双方通信，这基本上算是
嗅探器攻击；另一种类型是攻击者在通信线上定位自己，他们将其作为一个存储和转发或代理
机制，客户端和服务器认为它们是直接连接的。攻击者可以收集登录凭据和其他敏感数据，以
及改变两个系统之间交换的消息内容。
中间人攻击比其他许多攻击需要更多技术性，因为从客户角度出发，攻击者需要冒充服务
器，从服务器的角度来看，还要模拟客户端。中间人攻击往往需要一个组合的多个攻击。例如
攻击者可能会改变路由信息和 DNS 的值，或伪造地址解析协议(ARP)查找。
11.战争拨号 War Dialing
使用调制解调器搜索接受入站连接尝试的系统的行为，就是大量拨号。一旦检测到某个计
算机载波音，战争拨号器就会在搜索过程结束时所生成的报告中添加相应的电话号码。一种新
的战争拨号的形式能够在不适用调制解调器的情况下，使用语音互联网协议(VoIP)拨号，这使
得攻击者能够扫描到更多的电话号码，并发现除了调制解调器以外的其他设备，如传真机、语
音信箱、拨号音和人类的声音。
抵御恶意战争拨号攻击的对策包括：实施强大的远程访问安全性(主要依靠强的身份验
证)，确保不存在未授权的调制解调器，以及使用回叫安全机制、协议约束与呼叫登入。
12.破坏 Sabotage
员工破坏指的是员工对单位的破坏行为。员工被解雇后必须立即终止或禁用其账户，预防
员工破坏的其他保障措施还存定期审计、监测异常或未经授权的活动，保持员工和管理人员之
间的沟通开放，并适当奖励员工。
13.间谍 Espionage
间谍活动是一种收集专有的、秘密的、私人的、敏感的或机密信息的恶意行为。
十、针对数据库的攻击（第八域）
1.聚合 Aggregation
聚集攻击是通过收集大量的低安全级别的或低价值的数据，将它们结合起来，创造较高安
全级别或有价值的信息。对于数据库来讲，就必须严格控制对聚合函数的访问并且充分估计可
能展示给未授权个体的潜在信息，这些对数据库安全管理员来说是特别重要的。
SQL 就供了许多可从一个或多个表中组合记录并生成有用信息的函数包括 count，mm，
mate，sum，avg 等，这一过程就是聚合。数据库管理员应该严格控制聚合函数的访问，并且
可以使用视图(view)的访问方式。防范聚合的对策有：
①基于内容的访问控制(Content-dependent access control)：根据数据本身的敏感度来
管理访问控制。
②数据库分区技术可以防止聚合和推理。每个分区都具有唯一的、不同安全级别的内容。
—295—
③视图可以防止聚合攻击。在数据库中实现多级安全性的一种途径是使用数据库视图。视
图可以整理来自多个表的数据、聚合单独的记录或限制用户访问数据库属性和/或记录的有限
子集。在数据库中，视图被存储为 SQL 语旬，而不是被存储为数据表。这样可以减少所需的数
据库空间，并且允许视图违反应用于数据表的规格化规则。因为视图非常灵活，所以许多数据
库管理员将视图作为一种安全工具使用，就是允许用户只与受限的视图交互，而非与作为视图
基础的原始数据表交互。
④结合严格访问控制、“需知”和最小特权原则来预防聚合攻击。
2.推理 Inference
推理与聚合有点像，推理攻击利用几个非敏感信息片的组合，从而获得对应该属于更高级
分类的信息。推理需要利用人的推断能力，而聚合只是简单的叠加。对于推理攻击的最好的防
范是对有特权的个人用户保持持续的警惕。此外，数据的故意混淆可以被用来防止对敏感信息
的推理。最后，你可以使用数据库分区帮助降低这些攻击。防范推理攻击的方法有：
①单元抑制(cell suppression)：隐藏特定存储单元的内容，限制用户对特定内容的访问。
②数据库分隔/分区(database partition)：把数据库逻辑分区，用视图来提供访问。
③噪声与扰动(noise and perturbation)：在数据库中插入伪造信息，误导和迷惑攻击者。
④基于上下文的访问控制(Contest-dependent access control)：根据访问的状态或者顺
序来限制对某些内容的访问，需要一定的学习功能。
⑤基于内容的访问控制(Content-dependent access control)：根据数据本身的敏感度来
管理访问控制。（信息分级）
⑥多实例（Plolyinstantiation）在同一个关系数据库表中两行或更多行（无组）具有相
同的主键，且为不同密级的用户提供不同的数据查询结果，就是多实例。主要防范推理攻击。
（这个点经常考到）
③旁路攻击
用户试图绕过数据训应用的前端控制访问数据。
④并发
并发相关的问题包括使用旧数据执行过程，不一致的更新，或发生死锁。
⑤死锁
当两个用户同时访问信息而且都被拒绝时就发生死锁。
⑥攻击数据库视图以非法访问
用户可能试图受限视图或修改一个已经存在的视图；在数据库接口设计中经常使用的分层
模型提供了一个相同数据的多条路径，不是所有的路径都受到保护。
⑦拒绝服务
任务类型的可以阻止授权用户共聚信息的攻击或行动。
⑧不当信息修改
未授权或授权用户可能故意或无意的错误地修改信息。
⑨查询攻击
用户尝试使用查询工具来访问不能正常地通过可信前端访问的数据。
⑩服务器访问
—296—
数据库运行的服务器必须防止未授权的逻辑访问同时也要防止未授权的物理访问以防止
逻辑控制被禁用。
⑾数据污染
由于输入数据错误或错误的处理导致的数据完整性破坏。
⑿数据拦截（中间人）
如果允许拨号或其它类型的远程访问，必须控制拦截会话或修改传输中的数据的威胁。
⒀检查时间／使用时间(TOC/TOU)（必考）
TOC/TOU 也可能发生在数据库中。一个例子是，一些类型的恶意代码或特权访问可以改变
数据，在用户的查询被许可时和数据展现给用户时。
⒁未授权访问
故意可无意地将信息发布给未授权用户。例如系统的错误消息或系统提示，提供了关于服
务功能特性等方面的信息。
要实现多种等级的数据库访问控制和安全防护，有很多方法：
①使用视图 Views
视图可以防止聚合攻击。在数据库中实现多级安全性的一种途径是使用数据库视图。视图
可以整理来自多个表的数据、聚合单独的记录或限制用户访问数据库属性和/或记录的有限子
集。在数据库中，视图被存储为 SQL 语旬，而不是被存储为数据表。这样可以减少所需的数据
库空间，并且允许视图违反应用于数据表的规格化规则。因为视图非常灵活，所以许多数据库
管理员将视图作为一种安全工具使用，就是允许用户只与受限的视图交互，而非与作为视图基
础的原始数据表交互。
②并发性 Concurrency
并发性使用“锁定”功能来允许己授权用户更改数据，同时拒绝其他用户访问查看或更改
数据元素。只有更改完成并“解锁”后，才允许其他用户访问。并发性或编辑控制是一种预防
性的安全机制，这种机制试图使数据库中存储的数据始终是正确的，或者至少使其完整性和可
用性受到保护。
③语义完整性 Semantic integrity
语义完整性是 DBMS 的一种常见安全特性，确保用户的动作不会违反任何结构上的规则。
此外，还检查所有存储的数据类型都是有效的，符合逻辑的，并且确认系统遵守任何和所有的
唯一性约束。
④时间戳 Time stamp
通过标记日期和时间来维护数据的完整性和可用性。
⑤细粒度控制 granularly
DBMS 的另一个常见安全特性是在数据库内能够细粒度控制对象。例如：内容相关的访问
控制（基于内容）Content-dependent，分析内容之间的关系来阻止用户访问与他无关的数据，
或者有利益冲突的数据。
⑥单元抑制 cell suppression
对单独的数据库字段或单元隐藏或强加更安全的约束。
⑦上下文相关的访问控制（基于上下文环境）Context-dependent
—297—
上下文相关的访问控制通过宏观评估来制定访问控制策略，它分析每个对象、数据包或字
段如何与总体的活动或通信相联系，在较大的上下文环境中就会表露出是有益的还是有害的。
⑧数据库分区 database partitioning
数据库分区技术可以防止聚合和推理漏洞。
⑨多实例 Polyinstantiation
在同一个关系数据库表中两行或更多行具有相同的主键，且为不同密级的用户提供不同的
数据查询结果，就是多实例。主要防范推理攻击。（这个点经常考到）
⑩噪声和干扰 false or misleading data
在 DBMS 中插入错误的或伪造的数据，从而重定向或阻挠窃密攻击。但一定要确保插入到
数据库中的噪声不影响业务运营。
⑾锁控制
锁用来控制读和写访问特定的关系系统中的数据行或面向对象系统中的对象。可以在表，
行，记录，或甚至字段上加锁，这些相关的要求也被称为 ACID 测试。
十一、针对软件开发的攻击（第八域）
客户端都要通过发送指令、表单什么的请求 WEB 服务，必须要对 WEB 输入的内容进行验证，
不然会因为输入一些特殊字符而被攻击。如：
1.路径/目录遍历(Path or directory traversal)：这个攻击又被称为“点-点-斜线”、
“../”dot dot slash；在 URL 中接入几个“../”就可以访问上级的文件目录了。
2.统一代码编码(Unicode encoding)：Unicode 是一种行业标准，开发他的目的是为了以
标准的编码格式来表示世界上的 10 万多个文本字符。Web 服务器通过 Unicode 来支持不同的
字符，在 Unicode 下，攻击者不用“../”来攻击，而使用 Unicode 的“%C1%lc，%c0%9v，
and %C0%af”来攻击。
3.网址编码(URL encoding)：在 URL 中，“空格“表示为“%20”，其实其它字符也可以
在 URL 里用特殊的方式来发送。
4.客户端验证(Client-side validation )：是指将指令发送到服务器之前在客户端进行
验证，如果黑客劫持攻击者环境，插入恶意数据，也就绕过了这个验证了。
1.缓冲区溢出 Buffer Overflows
输入内存的数据太大，就会“溢出”其存储空间（编程函数先定义一个变量 var 什么的，
执行时操作系统会给程序一个内存空间的），溢到隔壁的存储空间里，可能被正常执行了或影
响别的进程了。利用缓冲区溢出漏洞可以在服务器上执行任意代码。
许多编程语言对变量的长度不强制实施限制，这就要求编程人员对代码进行边界检查。只
要允许用户输入程序变量，编程人员就应当采取有效措施，确保满足下列各项条件：
①用户输入的值的长度不能超过任何存放它的缓冲区的大小。
②用户不能向保存输入值的变量类型输入无效的值。
③用户输入的数值不能超出程序规定的参数操作范围。
如果没有执行对上述条件的简单检查，那么就可能造成缓冲区溢出漏洞。
—298—
2.检验时间/使用时间攻击 Time of Check to Time of Use（必考）
也称为异步攻击(asychronous attack)，有的人把竞争条件（race condition）也看作是
这种攻击，其实是不一样的，竞争条件是改变进程的顺序（排序）；TOC/TOU 是进入 2 个进程
之间进行更改（插队）。
检验时间到使用时间(time-of-check-to-time-of-use，TOCTTOU 或 TOC/TOU)是一个时间
型漏洞，当程序检查访问许可权限的时间早于资源请求的时间时，就会出现这种问题。例如，
如果操作系统针对用户登录建立了一个综合的访问许可权限列表并且在整个登录会话期间查
询这个列表，那么就存在 TOC/TOU 漏洞。如果系统管理员取消了某个特殊的权限，那么这个限
制只有在用户下次登录时才会起作用。如果在用户登录的时候正好发生取消访问许可权限的操
作，那么用户是否能够访问资源就是不确定的。用户只需保留会话打开数天之久，新的限制就