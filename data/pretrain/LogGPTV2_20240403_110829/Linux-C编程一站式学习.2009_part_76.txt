626
---
## Page 627
核在进程控制块中设置该信号的未决标志，直到信号递达才清除该标志。在上图的例子中，
以上我们讨论了信号产生（Generation）的各种原因，
3.1.信号在内核中的表示 请点评
3.阻塞信号 请点评
个bit的未决标志,
达之前产生多次可以依次放在一个队列里。本章不讨论实时信号。从上图来看，
如果在进程解除对某信号的阻塞之前这种信号产生过多次，将如何处理？POSIX.1允许系统递送该
可选的一种处理动作。信号在内核中的表示可以看作是这样的：
执行递达的动作。注意，阻塞和忽略是不同的，
（Block）某个信号。被阻塞的信号产生时将保持在未决状态，
达（Delivery）
3．SIGQUIT信号未产生过，一旦产生SIGQUIT信号将被阻塞，它的处理动作是用户自定义函
2．SIGINT信号产生过,
上一页
1．SIGHUP信号未阻塞也未产生过，当它递达时执行默认处理动作。
数sighandler。
有解除阻塞之前不能忽略这个信号，
task_struct
图 33.1.信号在内核中的表示示意图
SIGHUP(1]
 信号从产生到递达之间的状态，
非0即1,
SIGQUIT(3)
SIGINT(2)
但正在被阻塞，
，不记录该信号产生了多少次，阻塞标志也是这样表示的。
oloc
全国嵌入式人才培训基地
+**+**
，因为进程仍有机会改变处理动作之后再解除阻塞。
所以暂时不能递达。
0
第33章信号
3.阻塞信号
、只要信号被阻塞就不会递达，而忽略是在递达之后
SIG_IGN
SIG_DFL
andler
称为信号未决（Pending）
，而实际执行信号的处理动作称为信号递
虽然它的处理动作是忽略，
直到进程解除对此信号的阻塞，才
void sighandler(int signo)
User Space
。进程可以选择阻塞
，每个信号只有一
因此，
但在没
，未决和
627
---
## Page 628
表说明了how参数的可选值。
返回值：若成功则为0，若出错则为-1
调用函数sigprocmask可以读取或更改进程的信号屏蔽字。
3.3. sigprocmask 请点评
sigset_t类型对于每种信号用一个bit表示"有效"或"无效"状态，
3.2.信号集操作函数 请点评
屏蔽字备份到oset里，
更改进程的信号屏蔽字，
如果oset是非空指针，
用sigemptyset或sigfillset做初始化,
该信号集的有效信号包括系统支持的所有信号。注意，在使用sigset_t类型的变量之前，
有意义的。
些bit则依赖于系统实现,
略。
阻塞信号集也叫做当前进程的信号屏蔽字（Signal Mask）：
号集中"有效"和“无效"的含义是该信号是否处于未决状态。
号，若包含则返回1，
SIG_SETMASR 设置当前信号屏蔽字为set所指向的值，
SIG_UNBLOCK
SIG_BLOCK
表33.1.how参数的含义
int sigprocmask(int how, const sigset_t *set, sigset_t *oset);
#include 
..3
int sigemptyset(sigset_t *set);
#include 
int
5
t
t
 sigismember(const sigset_t 
sigfillset(sigset
，而不应该对它的内部数据做任何解释，
set包含了我们希望从当前信号屏蔽字中解除阻塞的信号，相当
set包含了我们希望添加到当前信号屏蔽字的信号，相当
于mask=mask&~set 
于mask=mask|set 
，然后根据set和now参数更改信号屏蔽字。假设当前的信号屏蔽字为mask，
、则读取进程的当前信号屏蔽字通过oset参数传出。如果set是非空指针,
，不包含则返回0，出错返回-1。
参数how指示如何更改。如果oset和set都是非空指针,
，从使用者的角度是不必关心的，
.........................
一个布尔函数,
+
*set);
使信号集处于确定的状态。
...........
使其中所有信号的对应bit清零，
*set，
用于判断-
int
 signo);
使用者只能调用以下函数来操 
，这里的"屏蔽"应该理解为阻塞而不是忽
下一节将详细介绍信号集的各种操作。
相当于mask=set
 使其中所有信号的对应bit置位，
一个信号集的有效信号中是否包含某种
至于这个类型内部如何存储这
 表示该信号集不包含
则先将原来的信号
一定要调
，表示
2
则
---
## Page 629
sigpending读取当前进程的未决信号集，通过set参数传出。调用成功则返回0，出错则返回-1。
使sIGINT信号处于未决状态，按Ctrl-\仍然可以终止程序，因为SIGQUIT信号没有阻塞。
3.4. sigpending 请点评
2.产生信号
程序运行时,
如果调用sigprocmask解除了对当前若干个未决信号的阻塞，！
下面用刚学的几个函数做个实验。程序如下:
上一页
一个信号递达。
Quit (core dumped)
0000000000000000000000000000000
int main(void)
void printsigset(const sigset_t *set)
#include 
#include 
int sigpending(sigset_t *set);
0100000000000000000000000000000
 每秒钟把各信号的未决状态打印一遍，
return 0;
sigset_t S, 
puts("");
for (i = l; i
，赋值为一个函数指针表示用自定义函数捕捉信号，
struct sigaction {
sigaction *oact);
int sigaction(int signo, const struct sigaction *act, struct
#include 
void
/* alternate handler */
void
(*sa_sigaction)(int, siginfo_t *, void *);
(*sa_handler)(int);
可以带-
则用sa_mask字段说明这些需要额外屏蔽的信号，
。若act指针非空，则根据act修改该信号的处理动作。若oact指针非
，有兴趣的读者参考[APUE2e]。
，如果在调用信号处理函数时，
 这样就保证了在处理某个信号时，
内核自动将当前信号加入进程的信号屏蔽字,
一个int参数，
，通过参数可以得知当前信号的编号,
￥
/*
 additional
 addr of signal handler,
￥
或者说向内核注册了
则进程继续处于挂起状态，pause不返
，赋值为常数sIG_DFL表示执行系统默
除了当前信号被自动屏蔽之外，
signals
or SIG_DFL */
）。错误码EINTR表
，则进程终
，当信号处理函数返
当信号处理函数返
一个信号处理函
*/
 出错则返回-
，这样就可以
*/
28
，那
---
## Page 633
3．调用pause等待，内核切换到别的进程运行。
1．main函数调用mysleep函数，
动作。
内核，再返回用户态继续执行进程的主控制流程（main函数调用的mysleep函数）。
从内核态返回这个进程的用户态之前处理未决信号，发现有sIGALRM信号，其处理函数
 nsecs秒之后，闹钟超时，内核发sIGALRM给这个进程。
例 33.2.mysleep
int main(void)
unsigned int mysleep(unsigned int nsecs)
void sig_alrm(int signo)
#include
#include
！
，然后调用alarm(o)取消闹钟，
return 0;
while(1){
return unslept;
pause();
alarm(nsecs);
sigaction(SIGALRM,
newact.sa_handler = sig_alrm;
struct sigaction newact, oldact;
/* nothing to do */
后者调用sigaction注册了sIGALRM信号的处理函数sig_alrm。
fiags
seconds passed\n");
‘&oldact， NULL);
&newact,
，调用sigaction恢复sIGALRM信号以前的处理
 &oldact);
633
---
## Page 634
像上例这样，insert函数被不同的控制流程调用，
时候，因为硬件中断使进程切换到内核，再次回用户态之前检查到有信号待处理，
main函数调用insert函数向一个链表head中插入节点nodel,
流程是异步的，
4.4.可重入函数请点评
3、mysleep函数的返回值表示什么含义？什么情况下返回非0值？。
2、为什么在mysleep函数返回前要恢复sIGALRM信号原来的sigaction？
向链表中插入两个节点，
往下执行，
两步都做完之后从sighandler返回内核态,
使得一个进程具有多个控制流程,
号处理函数返回后再继续执行主控制流程。信号处理函数是一
当捕捉到信号时，
理函数可以吗？
1、信号处理函数sig_alrm什么都没干，为什么还要注册它作为sIGALRM的处理函数？不注册信号处
以下问题留给读者思考：
图33.3.不可重入函数
head
先前做第一步之后被打断，
head-
insert(&node1);
intmain()
node_tnodel,node2, *head;
node2
日
nodel
日
node2
8
node1
8
 二者不存在调用和被调用的关系，
不论进程的主控制流程当前执行到哪儿，
日
，而最后只有一个节点真正插入链表中了。
void insert(node_t *p)
，如果这些控制流程访问相同的全局资源（全局变量、硬件资源
head/
head-
再次回到用户态就从main函数调用的insert函数中继续
/nodel
node2
日
node1
node2
日
日
，有可能在第-
，并且使用不同的堆栈空间。引入了信号处理函数
void sighandler(int signo)void insert(node_t *p)
insert(&node2);
HI
 都会先跳到信号处理函数中执行，
插入操作分为两步,
一个单独的控制流程,
一次调用还没返回时就再次进入该函
head
2m
个
node1
日
head=p:
.p->next=head;
de2
，于是切换
刚做完第一步的
因为它和主控制
634
从信
---
## Page 635
不是原子操作。请读者设想一种时序，main和sighandler都对这个变量a赋值，最后变量a的值发生
带调试信息编译，然后带源代码反汇编：
如，main和sighandler都对一个全局变量赋值，会不会出现错乱呢？比如下面的程序：
4.5. sig_atomic_t类型与volatile限定符请点评
如果上述程序在64位机上编译执行,
错乱。
不是原子操作。同样地，
虽然C代码只有一行，
其中main函数的指令中有:
现在想一下，如果对全局数据的访问只有一行代码，
中间不可能被打断，就不会出现错乱了。
在上面的例子中，
SUS规定有些系统函数必须以线程安全的方式实现，这里就不列了，请参考[APUE2e]
果a是32位的int变量，
如果一个函数符合以下条件之一则是不可重入的：
会造成错乱？
函数。想一下,
不可重入函数,
数
一个变量，
，对全局链表的插入操作要分两步完成，
·调用了标准IO库函数。标准I/O库的很多实现都以不可重入的方式使用全局数据结构。
·调用了malloc或free，因为malloc也是用全局链表来管理堆的。
这称为重入，
8048363:
804835c:
8048359:
8048352:
，要保证对它的读写都是原子操作，应该采用什么类型呢？为了解决这些平台相关的问
，为什么两个不同的控制流程调用同一个函数，访问它的同一个局部变量或参数就不
反之，