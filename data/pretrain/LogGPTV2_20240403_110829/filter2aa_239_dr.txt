开所分配的MemoryStream 
（使用leaveOpen参数），所以MemoryStream在关闭读取器后
也可以使用：
    public static void DecompressFile(string fileName)
    {
      FileStream inputStream = File.OpenRead(fileName);
      using (MemoryStream outputStream = new MemoryStream())
      using (var compressStream = new DeflateStream(inputStream,
            CompressionMode.Decompress))
      {
        compressStream.CopyTo(outputStream);
        outputStream.Seek(0, SeekOrigin.Begin);
        using (var reader = new StreamReader(outputStream, Encoding.UTF8,
        detectEncodingFromByteOrderMarks: true, bufferSize: 4096,
        leaveOpen: true))
        {
        string result = reader.ReadToEnd();
        WriteLine(result);
        }
        // could use the outputStream after the StreamReader is closed
      }
    }
23.6.2 压缩文件
今天，ZIP文件格式是许多不同文件类型的标准。Word文档（docx）以及NuGet包都
存储为ZIP文件。在.NET中，很容易创建ZIP归档文件。
要创建ZIP归档文件，可以创建一个ZipArchive对象。ZipArchive包含多个
ZipArchiveEntry对象。ZipArchive类不是一个流，但是它使用流进行读写。下面的代码片
段创建一个ZipArchive，将压缩内容写入用File.OpenWrite打开的文件流中。添加到ZIP归
档文件中的内容由所传递的目录定义。Directory. 
EnumerateFiles枚举了目录中的所有文
件，为每个文件创建一个ZipArchiveEntry对象。调用Open方法创建一个Stream对象。使用
要读取的Stream的CopyTo方法，压缩文件，写入ZipArchiveEntry 
（代码文件
CompressFileSample / Program.cs）：
    public static void CreateZipFile(string directory, string zipFile)
    {
      FileStream zipStream = File.OpenWrite(zipFile);
      using (var archive = new ZipArchive(zipStream, ZipArchiveMode.Create)
)
      {
        IEnumerable files = Directory.EnumerateFiles(
        directory, "＊", SearchOption.TopDirectoryOnly);
        foreach (var file in files)
        {
        ZipArchiveEntry entry = archive.CreateEntry(Path.GetFileName(file));
        using (FileStream inputStream = File.OpenRead(file))
        using (Stream outputStream = entry.Open()
)
        {
          inputStream.CopyTo(outputStream);
        }
        }
      }
    }
23.7 观察文件的更改
使用FileSystemWatcher可以监视文件的更改。事件在创建、重命名、删除和更改文件
时触发。这可用于如下场景：需要对文件的变更做出反应，例如，服务器上传文件时，或
文件缓存在内存中，而缓存需要在文件更改时失效。
因为FileSystemWatcher易于使用，所以下面直接开始一个示例。FileMonitor的示例代
码利用以下依赖项和名称空间：
依赖项
    NETStandard.Library
    System.IO.FileSystem.Watcher
名称空间
    System.IO
    static System.Console
示例代码在WatchFiles（）方法中开始观察文件。使用FileSystemWatcher的构造函数
时，可以提供应该观察的目录。还可以提供一个过滤器，只过滤出与过滤表达式匹配的特
定文件。当设置属性IncludeSubdirectories时，可以定义是否应该只观察指定目录中的文
件，或者是否还应该观察子目录中的文件。对于Created、Changed、Deleted和Renamed事
件，提供事件处理程序。所有这些事件的类型都是FileSystemEventHandler，只有Renamed
事件的类型是RenamedEventHandler。RenamedEventHandler派生自
FileSystemEventHandler，提供了事件的附加信息（代码文件FileMonitor/Program.cs）：
    public static void WatchFiles(string path, string filter)
    {
      var watcher = new FileSystemWatcher(path, filter)
      {
        IncludeSubdirectories
 = true
      };
      watcher.Created
 += OnFileChanged;
      watcher.Changed
 += OnFileChanged;
      watcher.Deleted
 += OnFileChanged;
      watcher.Renamed
 += OnFileRenamed;
      watcher.EnableRaisingEvents = true;
      WriteLine("watching file changes...");
    }
因文件变更而接收到的信息是FileSystemEventArgs类型。它包含了变更文件的名字，
这种变更是一个WatcherChangeTypes类型的枚举：
    private static void OnFileChanged(object sender, FileSystemEventArgs e)
    {
      WriteLine($"file {e.Name} {e.ChangeType}");
    }
重命名文件时，通过RenamedEventArgs参数收到其他信息。这个类型派生自
FileSystemEventArgs，它定义了文件原始名称的额外信息：
    private static void OnFileRenamed(object sender, RenamedEventArgs e)
    {
      WriteLine($"file {e.OldName} {e.ChangeType} to {e.Name}");
    }
指定要观察的文件夹和*.txt作为过滤器，启动应用程序，创建文件sample1.txt，添加
内容，把它重命名为sample2. txt，最后删除它，输出如下。
    watching file changes...
    file New Text Document.txt Created
    file New Text Document.txt Renamed to sample1.txt
    file sample1.txt Changed
    file sample1.txt Changed
    file sample1.txt Renamed to sample2.txt
    file sample2.txt Deleted
23.8 使用内存映射的文件
内存映射文件允许访问文件，或在不同的进程中共享内存。这个技术有几个场景和特
点：
● 使用文件地图，快速随机访问大文件
● 在不同的进程或任务之间共享文件
● 在不同的进程或任务之间共享内存
● 使用访问器直接从内存位置进行读写
● 使用流进行读写
内存映射文件API允许使用物理文件或共享的内存，其中把系统的页面文件用作后备
存储器。共享的内存可以大于可用的物理内存，所以需要一个后备存储器。可以为特定的
文件或共享的内存创建一个内存映射文件。使用这两个选项，可以给内存映射指定名称。
使用名称，允许不同的进程访问同一个共享的内存。
创建了内存映射之后，就可以创建一个视图。视图用于映射完整内存映射文件的一部
分，以访问它，进行读写。
MemoryMappedFilesSample利用下面的依赖项和名称空间：
依赖项
    NETStandard.Library
    System.IO.MemoryMappedFiles
名称空间
    System
    System.IO
    System.IO.MemoryMappedFiles
    System.Threading
    System.Threading.Tasks
    static System.Console
示例应用程序演示了如何通过内存映射文件，使用这两种视图访问器和流完成多个任
务。一个任务是创建内存映射文件和写入数据；另一个任务是读取数据。
  注意： 示例代码使用了任务和事件。任务参见第21章。事件参见第22章。
准备好映射，写入数据时，需要一些基础设施来创建任务，发出信号。映射的名称和
ManualResetEventSlim对象定义为Program类的一个成员（代码文件
MemoryMappedFilesSample/Program.cs）：
    private ManualResetEventSlim _mapCreated =
      new ManualResetEventSlim(initialState: false);
    private ManualResetEventSlim _dataWrittenEvent =
      new ManualResetEventSlim(initialState: false);
    private const string MAPNAME = "SampleMap";
在Main方法中使用Task.Run方法开始执行任务：
    public void Run()
    {
      Task.Run(() => WriterAsync());
      Task.Run(() => Reader());
      WriteLine("tasks started");
      ReadLine();
    }
现在使用访问器创建读取器和写入器。
23.8.1 使用访问器创建内存映射文件
为了创建一个基于内存的内存映射文件，写入器调用了
MemoryMappedFile.CreateOrOpen方法。这个方法打开第一个参数指定名称的对象，如果
它不存在，就创建一个新对象。要打开现有的文件，可以使用OpenExisting方法。为了访
问物理文件，可以使用CreateFromFile方法。
示例代码中使用的其他参数是内存映射文件的大小和所需的访问。创建内存映射文件
后，给事件_mapCreated发出信号，给其他任务提供信息，说明已经创建了内存映射文
件，可以打开它了。调用方法CreateViewAccessor，返回一个
MemoryMappedViewAccessor，以访问共享的内存。使用视图访问器，可以定义这一任务
使用的偏移量和大小。当然，可以使用的最大大小是内存映射文件的大小。这个视图用于
写入，因此文件访问设置为MemoryMappedFileAccess.Write。
接下来，使用MemoryMappedViewAccessor的重载Write方法，可以将原始数据类型写
入共享内存。Write方法总是需要位置信息，来指定数据应该写入的位置。写入所有的数
据之后，给一个事件发出信号，通知读取器，现在可以开始读取了（代码文件
MemoryMappedFilesSample /Program.cs）:
    private async Task WriterAsync()
    {
      try
      {
        using (MemoryMappedFile mappedFile = MemoryMappedFile.CreateOrOpen(
        MAPNAME, 10000, MemoryMappedFileAccess.ReadWrite))
        {
        _mapCreated.Set(); // signal shared memory segment created
        WriteLine("shared memory segment created");
        using (MemoryMappedViewAccessor accessor = mappedFile.CreateViewAccessor(
              0, 10000, MemoryMappedFileAccess.Write))
        {
          for (int i = 0, pos = 0; i < 100; i++, pos += 4)
          {
            accessor.Write(pos, i);
            WriteLine($"written {i} at position {pos}");
            await Task.Delay(10);
          }
          _dataWrittenEvent.Set(); // signal all data written
          WriteLine("data written");
        }
        }
      }
      catch (Exception ex)
      {
        WriteLine($"writer {ex.Message}");
      }
    }
读取器首先等待创建内存映射文件，再使用MemoryMappedFile.OpenExisting打开
它。读取器只需要映射的读取权限。之后，与前面的写入器类似，创建一个视图访问器。
在读取数据之前，等待设置_dataWrittenEvent。读取类似于写入，因为也要提供应该访问
数据的位置，但是不同的Read方法，如ReadInt32，用于读取不同的数据类型：
    private void Reader()
    {
      try
      {
        WriteLine("reader");
        _mapCreated.Wait();
        WriteLine("reader starting");
        using (MemoryMappedFile mappedFile = MemoryMappedFile.OpenExisting(
        MAPNAME, MemoryMappedFileRights.Read))
        {
        using (MemoryMappedViewAccessor accessor = mappedFile.CreateViewAccessor(
          0, 10000, MemoryMappedFileAccess.Read))
        {
          _dataWrittenEvent.Wait();
          WriteLine("reading can start now");
          for (int i = 0; i < 400; i += 4)
          {
            int result = accessor.ReadInt32(i);
            WriteLine($"reading {result} from position {i}");
          }
        }
        }
      }
      catch (Exception ex)
      {
        WriteLine($"reader {ex.Message}");
      }
    }
运行应用程序，输出如下：
    reader
    reader starting
    tasks started
    shared memory segment created
    written 0 at position 0
    written 1 at position 4
    written 2 at position 8
    ...
    written 99 at 396
    data written
    reading can start now
    reading 0 from position 0
    reading 1 from position 4
    ...
23.8.2 使用流创建内存映射文件
除了用内存映射文件写入原始数据类型之外，还可以使用流。流允许使用读取器和写
入器，如本章前面所述。现在创建一个写入器来使用StreamWriter。MemoryMappedFile中
的方法CreateViewStream（）返回MemoryMappedViewStream。这个方法非常类似于前面
使用的CreateViewAccessor（）方法，也是在映射内定义一个视图，有了偏移量和大小，
可以方便地使用流的所有特性。
然后使用WriteLineAsync（）方法把一个字符串写到流中。StreamWriter缓存写入操
作，所以流的位置不是在每个写入操作中都更新，只在写入器写入块时才更新。为了用每
次写入的内容刷新缓存，要把StreamWriter的AutoFlush属性设置为true（代码文件
MemoryMappedFilesSample /Program.cs）:
    private async Task WriterUsingStreams()
    {
      try
      {
        using (MemoryMappedFile mappedFile = MemoryMappedFile.CreateOrOpen(
          MAPNAME, 10000, MemoryMappedFileAccess.ReadWrite))
        {
        _mapCreated.Set(); // signal shared memory segment created
        WriteLine("shared memory segment created");
        MemoryMappedViewStream stream = mappedFile.CreateViewStream(
            0, 10000, MemoryMappedFileAccess.Write);
        using (var writer = new StreamWriter(stream))
        {
          writer.AutoFlush = true;
          for (int i = 0; i < 100; i++)
          {
            string s = $"some data {i}";
            WriteLine($"writing {s} at {stream.Position}");
            await writer.WriteLineAsync(s);
          }
        }
        _dataWrittenEvent.Set(); // signal all data written
        WriteLine("data written");
        }
      }
      catch (Exception ex)
      {
        WriteLine($"writer {ex.Message}");
      }
    }