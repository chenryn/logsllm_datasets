## 精确度量Linux下进程占用多少内存的方法           
### 作者                                                                                                                 
digoal                                                                                                                  
### 日期                                                                                                                
2016-06-08                          
### 标签                                                                                                                
PostgreSQL , Linux , 进程内存 , map , rss , pss                                                                            
----                                                                                                                
## 背景    
在Linux中，要了解进程的信息，莫过于从 proc 文件系统中入手去看。    
proc的详细介绍，可以参考内核文档的解读，里面有很多内容      
```  
yum install -y kernel-doc  
cat /usr/share/doc/kernel-doc-3.10.0/Documentation/filesystems/proc.txt  
```  
## proc主要内容    
```  
Table of Contents  
-----------------  
  0     Preface  
  0.1   Introduction/Credits  
  0.2   Legal Stuff  
  1     Collecting System Information  
  1.1   Process-Specific Subdirectories  
  1.2   Kernel data  
  1.3   IDE devices in /proc/ide  
  1.4   Networking info in /proc/net  
  1.5   SCSI info  
  1.6   Parallel port info in /proc/parport  
  1.7   TTY info in /proc/tty  
  1.8   Miscellaneous kernel statistics in /proc/stat  
  1.9 Ext4 file system parameters  
  2     Modifying System Parameters  
  3     Per-Process Parameters  
  3.1   /proc//oom_adj & /proc//oom_score_adj - Adjust the oom-killer  
                                                                score  
  3.2   /proc//oom_score - Display current oom-killer score  
  3.3   /proc//io - Display the IO accounting fields  
  3.4   /proc//coredump_filter - Core dump filtering settings  
  3.5   /proc//mountinfo - Information about mounts  
  3.6   /proc//comm  & /proc//task//comm  
  3.7   /proc//task//children - Information about task children  
  3.8   /proc//fdinfo/ - Information about opened file  
  4     Configuring procfs  
  4.1   Mount options  
```  
## 和进程内存相关的几个信息    
```  
 maps           Memory maps to executables and library files    (2.4)  
 statm          Process memory status information  
 status         Process status in human readable form  
 smaps          a extension based on maps, showing the memory consumption of  
                each mapping and flags associated with it  
```  
## 详解    
### status    
这里可以看到概貌的内存统计    
程序启动后，进程的内存占用可能包括程序本身的空间，共享的内存空间，mmap，malloc 的等    
```  
 VmPeak                      peak virtual memory size  
 VmSize                      total program size  
 VmLck                       locked memory size  
 VmHWM                       peak resident set size ("high water mark")  
 VmRSS                       size of memory portions  
 VmData                      size of data, stack, and text segments  
 VmStk                       size of data, stack, and text segments  
 VmExe                       size of text segment  
 VmLib                       size of shared library code  
 VmPTE                       size of page table entries  
 VmSwap                      size of swap usage (the number of referred swapents)  
```  
### statm  
内存统计信息，单位为PAGE ，通过getconf可以获得操作系统的page大小     
getconf PAGE_SIZE    
```  
 Field    Content  
 size     total program size (pages)            (same as VmSize in status)  
 resident size of memory portions (pages)       (same as VmRSS in status)  
 shared   number of pages that are shared       (i.e. backed by a file)  
 trs      number of pages that are 'code'       (not including libs; broken,  
                                                        includes data segment)  
 lrs      number of pages of library            (always 0 on 2.6)  
 drs      number of pages of data/stack         (including libs; broken,  
                                                        includes library text)  
 dt       number of dirty pages                 (always 0 on 2.6)  
```  
### maps  
进程与可执行程序或动态库文件相关的映射信息    
```  
address           perms offset  dev   inode      pathname  
08048000-08049000 r-xp 00000000 03:00 8312       /opt/test  
08049000-0804a000 rw-p 00001000 03:00 8312       /opt/test  
0804a000-0806b000 rw-p 00000000 00:00 0          [heap]  
a7cb1000-a7cb2000 ---p 00000000 00:00 0  
a7cb2000-a7eb2000 rw-p 00000000 00:00 0  
a7eb2000-a7eb3000 ---p 00000000 00:00 0  
a7eb3000-a7ed5000 rw-p 00000000 00:00 0          [stack:1001]  
a7ed5000-a8008000 r-xp 00000000 03:00 4222       /lib/libc.so.6  
a8008000-a800a000 r--p 00133000 03:00 4222       /lib/libc.so.6  
a800a000-a800b000 rw-p 00135000 03:00 4222       /lib/libc.so.6  
a800b000-a800e000 rw-p 00000000 00:00 0  
a800e000-a8022000 r-xp 00000000 03:00 14462      /lib/libpthread.so.0  
a8022000-a8023000 r--p 00013000 03:00 14462      /lib/libpthread.so.0  
a8023000-a8024000 rw-p 00014000 03:00 14462      /lib/libpthread.so.0  
a8024000-a8027000 rw-p 00000000 00:00 0  
a8027000-a8043000 r-xp 00000000 03:00 8317       /lib/ld-linux.so.2  
a8043000-a8044000 r--p 0001b000 03:00 8317       /lib/ld-linux.so.2  
a8044000-a8045000 rw-p 0001c000 03:00 8317       /lib/ld-linux.so.2  
aff35000-aff4a000 rw-p 00000000 00:00 0          [stack]  
ffffe000-fffff000 r-xp 00000000 00:00 0          [vdso]  
```  
1\. where "address" is the address space in the process that it occupies, "perms"  
is a set of permissions:  
```  
 r = read  
 w = write  
 x = execute  
 s = shared  
 p = private (copy on write)  
```  
2\. "offset" is the offset into the mapping,   
3\. "dev" is the device (major:minor),   
4\. "inode" is the inode  on that device.    
```  
0 indicates that  no inode is associated with the memory region, as the case would be with BSS (uninitialized data).  
```  
5\. The "pathname" shows the name associated file for this mapping.    
```  
If the mapping is not associated with a file:  
 [heap]                   = the heap of the program  
 [stack]                  = the stack of the main process  
 [stack:1001]             = the stack of the thread with tid 1001  
 [vdso]                   = the "virtual dynamic shared object",  
                            the kernel system call handler  
 or if empty, the mapping is anonymous.  
```  
### smaps  
对应每个映射的内存开销详情    
```  
08048000-080bc000 r-xp 00000000 03:02 13130      /bin/bash  
Size:               1084 kB  
Rss:                 892 kB  
Pss:                 374 kB  
Shared_Clean:        892 kB  
Shared_Dirty:          0 kB  
Private_Clean:         0 kB  
Private_Dirty:         0 kB  
Referenced:          892 kB  
Anonymous:             0 kB  
Swap:                  0 kB  
KernelPageSize:        4 kB  
MMUPageSize:           4 kB  
Locked:              374 kB  
VmFlags: rd ex mr mw me de  
1. the size of the mapping(size),   
2. the amount of the mapping that is currently resident in RAM (RSS),   
3. the process' proportional share of this mapping (PSS),   
4. the number of clean and dirty private pages in the mapping.    
Note that even a page which is part of a MAP_SHARED mapping, but has only a single pte mapped,   
i.e.  is currently used by only one process, is accounted as private and not as shared.    
5. "Referenced" indicates the amount of memory currently marked as referenced or accessed.  
6. "Anonymous" shows the amount of memory that does not belong to any file.    
Even a mapping associated with a file may contain anonymous pages:   
when MAP_PRIVATE and a page is modified, the file page is replaced by a private anonymous copy.  
7. "Swap" shows how much would-be-anonymous memory is also used, but out on  
swap.  
8. "VmFlags" field deserves a separate description.   
This member represents the kernel flags associated with the particular virtual memory area in two letter encoded manner.   
The codes are the following:    
    rd  - readable  
    wr  - writeable  
    ex  - executable  
    sh  - shared  
    mr  - may read  
    mw  - may write  
    me  - may execute  
    ms  - may share  
    gd  - stack segment growns down  
    pf  - pure PFN range  
    dw  - disabled write to the mapped file  
    lo  - pages are locked in memory  
    io  - memory mapped I/O area  
    sr  - sequential read advise provided  
    rr  - random read advise provided  
    dc  - do not copy area on fork  
    de  - do not expand area on remapping  
    ac  - area is accountable  
    nr  - swap space is not reserved for the area  
    ht  - area uses huge tlb pages  
    nl  - non-linear mapping  
    ar  - architecture specific flag  
    dd  - do not include area into core dump  
    mm  - mixed map area  
    hg  - huge page advise flag  
    nh  - no-huge page advise flag  
    mg  - mergable advise flag  
```  
一般来说，业务进程使用的内存主要有以下几种情况：    
（1）用户空间的匿名映射页（Anonymous pages in User Mode address spaces），比如调用malloc分配的内存，以及使用MAP_ANONYMOUS的mmap；当系统内存不够时，内核可以将这部分内存交换出去；    
（2）用户空间的文件映射页（Mapped pages in User Mode address spaces），包含map file和map tmpfs；前者比如指定文件的mmap，后者比如IPC共享内存；当系统内存不够时，内核可以回收这些页，但回收之前可能需要与文件同步数据；    
（3）文件缓存（page in page cache of disk file）；发生在程序通过普通的read/write读写文件时，当系统内存不够时，内核可以回收这些页，但回收之前可能需要与文件同步数据；    
（4）buffer pages，属于page cache；比如读取块设备文件。    
进程RSS, 进程使用的所有物理内存（file_rss＋anon_rss），即Anonymous pages＋Mapped apges（包含共享内存）    
```  