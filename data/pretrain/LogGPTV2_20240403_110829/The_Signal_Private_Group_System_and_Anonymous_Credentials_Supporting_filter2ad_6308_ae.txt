i=1, Cx0, Cx1, CV , πP ).
Z = CV /(W Cx0
x0Cx1
x1
4(cid:89)
i=1
Cyi
yi)
using the secret key (W, x0, x1, y1, . . . , y4), and then veriﬁes πP .
6
Implementation
This system has been implemented and is undergoing testing before being deployed to
Signal users. This implementation instantiates the cryptography as follows:
• G: For the group G we use ristretto255 [HdVLA19], a prime-order group built on
top of the (non-prime-order) Curve25519 elliptic curve [Ber06].
• HashToG: For most HashToG operations we use the HashToGroup operation deﬁned
for Ristretto in [HdVLA19]. This operation take a 64-byte hash output and converts
each of the 32-byte halves to a ﬁeld element (an integer module 2255−19). These ﬁeld
elements are converted to group elements using the Ristretto version of the Elligator2
map, and then these groups elements are added together to ensure this operation is
a surjection onto the entire Ristretto group. HashToG for M4 is handled diﬀerently
for performance reasons; see next bullet.
• EncodeToG: For EncodeToG we have to contend with the fact that the “inverse”
of the Elligator map on Ristretto will return from one to eight ﬁeld elements, only
one of which is the value that was originally encoded. Since our encryption scheme
MACs the plaintext before encoding (to compute the E1 value), decryption tests the
candidates and returns the correct value.
Encoding a 256-bit proﬁle key into a single Ristretto group element is not possible,
as the Ristretto group order is less than 2256. Thus, we can’t decode the EB2 element
of a proﬁle-key ciphertext directly into a single proﬁle key; rather we decode it into
1/b1 == HashToG(p) for each
64 diﬀerent candidates, and then test whether EB1
candidate proﬁle key p. For eﬃciency, we deﬁne this HashToG operation to comprise
only a single Elligator map on 32 bytes, since having it cover the entire Ristretto
group is unnecessary.
• Zero-knowledge proofs of knowledge: The proofs of knowledge are implemented using
the ”generic linear” generalization of Schnorr’s protocol described in [BS20, Ch. 19],
made noninteractive with the Fiat-Shamir transform [FS87].
26
• Hash functions: For hashing and key-derivation within the proofs of knowledge and
elsewhere we use HMAC-SHA256 within a new “stateful hash object” construction
which provides labels for domain-separation, extensible output, and other convenient
features.
The implementation is available online under an open source license (GPL), in the form
of three libraries written in Rust:
• zkgroup: This is the main library, providing a high-level API and bindings so the
library can be used in other programming languages.
• poksho: This library implements what we call the POKSHO construction for zero-
knowledge proofs of knowledge; and the SHO/HMAC-SHA256 construction for hashing.
• curve25519-dalek: We modiﬁed the curve25519-dalek library from Henry de Va-
lence and Isis Lovecruft to add support for Elligator inverse and decoding byte strings
from Ristretto elements, as discussed above.
Table 1 lists the main objects the zkgroup library deals with, and gives their sizes
and the amount of time taken to produce (i.e., issue a credential, encrypt a ciphertext) or
consume (i.e., verify, decrypt) them on a ThinkPad X1 Carbon laptop with an Intel Core
i7-8650U processor.
The listed times cover encryption and decryption for the ciphertext objects, and ad-
ditionally cover creating and verifying proofs of knowledge for the other objects. The
presentation objects contain ciphertext objects, so the ciphertext costs in space and time
are included for AuthCredentialPresentation and ProﬁleKeyCredentialP resentation. For
comparison, each Ristretto group element or scalar is stored in 32 bytes. A variable-base
scalar multiplication on this computer takes around 60 microseconds, while decoding or
encoding a group element to 32 bytes, or applying the Elligator map, takes around 4 mi-
croseconds. This implementation is well-optimized for object sizes but could be further
optimized for time.
The most expensive operations are FetchGroupMembers when the number of users in
the group is large, or adding a large number of users to a group. For a group with n users,
FetchGroupMembers requires users download about 128n bytes and spend about n(0.86 +
0.18) ms to decrypt. Adding members scales linearly with the number of members added,
with 713 bytes and 2.87 ms required to produce each ProﬁleKeyCredentialP resentation.
The small ciphertexts are a notable feature of this system. We only need a 64-byte
ciphertext to encrypt a 16-byte UID or a 32-byte proﬁle key. We had prototyped an
alternative using the MAC from [CMZ14] with exponential Elgamal encryption where
plaintexts are MAC’d and encrypted in 16-bit chunks (so that the discrete log computations
required for decryption are practical). The ciphertext (including a MAC) for a 16 byte
UID was 600+ bytes.
27
Object
name
UidCiphertext
ProﬁleKeyCiphertext
AuthCredentialResponse
AuthCredentialPresentation
ProﬁleKeyCredentialRequest
ProﬁleKeyCredentialResponse
ProﬁleKeyCredentialPresentation
Size Time to produce Time to consume
bytes
milliseconds
milliseconds
64
64
361
493
329
457
713
0.13
0.13
1.95
2.16
1.48
2.70
2.87
0.18
0.86
0.98
1.17
-
0.97
1.53
Table 1: Benchmarks of the main operations in the Signal Private Group System. The sizes
are in bytes and the times are in milliseconds, measured on an Intel Core i7-8650U proces-
sor. Producing a ProﬁleKeyCredentialResponse involves verifying a ProﬁleKeyCredential-
Request, so the times are combined.
7 Security Analysis
In this section we analyze the security of: the encryption scheme deﬁned in Section 4.1, our
new algebraic MAC from Section 3.1, and the security of the keyed-veriﬁcation anonymous
credential system built on top of the MAC.
We then discuss security of the system as a whole in Section 7.5 with respect to the ideal
functionality in Appendix A. In [CPZ19, Appendix B], we also sketch a simulation-based
security proof for the system.
7.1 Weak PRFs and fk
Below we give a deﬁnition of weak pseudorandom functions (wPRF) [NR95], tailored to
our setting, and deﬁne a speciﬁc wPRF which we will use in analyzing encryption and
credential security.
Deﬁnition 4. Let G be a group of prime order q. A function fk : G → G with key k ∈ Zq
is said to be a weak pseudorandom function (wPRF), if the following two sequences (of
length polynomial in κ) are indistinguishable
(x1, fk(x1)), (x2, fk(x2)), . . .
and
where xi and ri are sampled from the uniform distribution on G.
(x1, r1), (x2, r2), . . .
Weak PRFs are useful because they are PRFs when the inputs are chosen at random.
The speciﬁc wPRF we use in our security analysis is the function fk : G → G deﬁned as
28
fk(x) = xk. The fact that fk is a wPRF is known in the literature, and for completeness
we include a proof (similar to the one in [NPR99]).
Theorem 5. Let G be a group of prime order q, with generator g. Then the family of
functions fk : G → G deﬁned as f (x) = xk is a wPRF with key k ∈ Zq if the DDH problem
is hard in G.
Proof. Suppose A is an adversary that can distinguish the sequences in Deﬁnition 4 with
probability . We construct an algorithm B for the DDH problem that uses A as a sub-
routine. Suppose that DDH is ddh-hard in G, i.e., no polynomial time algorithm exists for
DDH that succeeds with probability better than ddh.
The DDH instance (A, B, C) is provided as input to B, who must decide whether this
triple has the form (Ga, Gb, Gab) or (Ga, Gb, Gr) for a random r (here G ∈ G is part of the
group description). B constructs a wPRF instance for A as follows:
(B, C), (Gr1, Ar1), (Gr2, Ar2), . . .
where ri are chosen uniformly at random in Zq. When B is given a DDH triple, the sequence
is
(Gb, Gab), (Gr1, Gar1), (Gr2, Gar2), . . .
which is a valid sequence of random group elements, and their images under fa. When B
is given a non-DDH triple, the sequence is
(Gb, Gr), (Gr1, Gar1), (Gr2, Gar2), . . . ,
By a hybrid argument, B can replace the ﬁrst pair in the sequence with a random one,
and A’s success probability will diﬀer by at most ddh. We can argue similarly that the
remaining elements in the sequence are indistinguishable from random.
7.2 Security of Encryption
In this section we deﬁne the security notions for deterministic symmetric-key encryption
with public veriﬁability. Unique ciphertexts (Deﬁnition 8) and correctness under adversar-
ially chosen keys (Deﬁnition 9) are new to this work, while CPA, CCA, plaintext integrity
(PI) and ciphertext integrity (CI) are direct adaptations of deﬁnitions from [BS20] to de-
terministic encryption.
We show that the encryption scheme of §4.1 is CPA secure and has ciphertext integrity,
properties that together imply CCA security and authenticated encryption [BS20, Deﬁni-
tion 9.2]. We prove CPA-security directly. We prove CI by proving unique ciphertexts and
PI (which together imply CI).
29
Deterministic Encryption We start by showing that the encryption scheme of §4.1 is
CPA secure. Our deﬁnition uses a real-or-random experiment [BDJR97], and to model the
deterministic property, the encryption oracle can only be queried once per plaintext. By
adding the same restriction on encryption queries, we can adapt the common CCA security
deﬁnition (see, e.g., [BS20, Deﬁnition 9.5]) to the deterministic case.
Deﬁnition 6. For a deterministic symmetric key cipher with public veriﬁability (KeyGen, Enc,
Dec), we deﬁne CPA security by the following security game.
• The challenger generates (k, pk) ← KeyGen(1κ), and a random bit b.
• The attacker is given pk and an oracle Ok(·) that outputs Enck(·) when b = 0 and
Enck(r) for uniformly random r (of the same length) when b = 1. Ok outputs ⊥ if
the input was previously queried.
• A outputs a guess bit b(cid:48) and wins if b = b(cid:48).
We say the encryption scheme is CPA-secure if A wins with probability non-negligibly
diﬀerent from 1/2.
In the following proof and throughout this section, we use the shorthand H to denote
HashToG, and N to denote EncodeToG.
Theorem 7. The encryption scheme of Section 4.1 is CPA secure for deterministic en-
cryption, in the random oracle model, assuming the DDH problem is hard in G.
Proof. Let A be an attacker in the CPA game. We construct a DDH distinguisher B that
uses A as a subroutine. We proceed with a hybrid argument. Let Gi be the probability
that A outputs 1 in Game i.
Game 0 This is the real CPA game, where B is the challenger, and H is modeled as a
random oracle. The probability that A breaks CPA security of the scheme is G0.
Game 1 is the same as Game 0, but B replaces pk with a random value. We claim that
G1 − G0 ≤ ddh. Let B have a DDH triple as input, (A, B, C) = (Ga1, Gb, Ga1b or Gz) for
a random z ∈ Zq. B chooses a2 at random and creates pk, by ﬁrst programming H so
that Ga1 = B = Gb (this is possible since Ga1 is derived using H). Then B computes
a2. On hash queries H(m), B outputs Gr for random r and stores (m, r).
pk = CGa2
To answer Enc(m) queries, B programs H (or has already) so that H(m) = Gr, then
Ar = Ga1r = H(m)a1. B outputs (E1, E2) = (Ar, (E1)a2N (m)).
When the DDH triple is real, games G0 and G1 are identical, and when the triple is
random, pk is uniformly distributed in G. The output of Enc queries is always the same in
both games because it doesn’t depend on C. Therefore, G1 − G0 ≤ ddh.
30
Game 2 is the same as Game 1, except B replaces E1 with a random value when A makes
an Enc query. B chooses a2 at random, and acts as a wPRF attacker, for an instance where
a1 is the secret. When A queries H(m), B queries the wPRF oracle to get (U, U(cid:48)). B
programs H(m) = U , then outputs (E1, E2) = (U(cid:48), (E1)a2N (m)). Note that since m
never repeats, U is a fresh random group element for every Enc query with overwhelming
probability. When the wPRF oracle outputs real pairs then B outputs E1 = U(cid:48) = U a1 =
H(m)a1, and G2 = G1. When the wPRF output is random, then E1 is uniformly distributed
in G. Therefore B is a distinguisher for the wPRF game (and hence DDH) with probability
G2 − G1 ≤ ddh.
Game 3 is the same as 2 but now E2 is replaced with a random value. B does not
use a1, and again plays the wPRF game, this time for an instance with secret a2. When
A makes an Enc(m) query, B queries the wPRF oracle to get (U, U(cid:48)), and B outputs
(E1, E2) = (U, U(cid:48)N (m)). E1 is uniformly distributed in both games 2 and 3. For E2, when
the wPRF output is real, we have E2 = (E1)a2N (m), exactly as in Game 2, and when the
wPRF output is random, E2 is uniformly distributed. Therefore G3 − G2 ≤ ddh.
In Game 3 B no longer uses m. By a union bound
Pr[A wins the CPA game ] ≤ 3ddh
Now we formally deﬁne the unique ciphertexts property.
Deﬁnition 8. We say a symmetric-key encryption scheme (KeyGen, Enc, Dec) has unique
ciphertexts if for all polynomial-time A,
Pr[(k, c1, c2) ← A(1κ) : c1 (cid:54)= c2 ∧ Deck(c1) = Deck(c2) (cid:54)= ⊥]
is negligible in κ.
Next we deﬁne correctness under adversarially chosen keys. Our deﬁnition refers to the
Derive hash function from our construction, used to derive the secret key from a seed.
Deﬁnition 9. We say a symmetric-key encryption scheme (KeyGen, Enc, Dec) is correct
under adversarially chosen keys if for all polynomial-time A,
Pr[(k0, m) ← A(1κ) : sk = Derive(k0) ∧ Decsk(Encsk(m)) (cid:54)= m]
is negligible in κ.
Now we prove that our encryption scheme has unique ciphertexts (Deﬁnition 8) and is
correct under adversarially chosen keys(Deﬁnition 9).
31
Theorem 10. The encryption scheme of Section 4.1 has unique ciphertexts, and is correct
under adversarially chosen keys assuming HashToG and Derive are random functions.
1 , E∗
2 /(E∗
1 then E2 = E∗
2 .
2 /(E∗
1 )a2). Provided DecodeFromG is invertible then E2/E1
2 ) that decrypt successfully to the same m, then m = DecodeFromG(E2/E1
a2 = E∗
Proof. First we prove that the scheme has unique ciphertexts. Because decryption re-
computes E(cid:48)