GEThttp://server/report/2008/02
1010111
客户端
0100010
1001011
缓存
服务器
1100110
image/ipg
图5-5：在面向资源的环境中协商内容
除了支持在解析请求的上下文中选择物理表示形式之外，我们还可
以支持服务根据用户的身份和使用的应用程序等信息来决定返回多
少引用数据。我们可以想象这样一种场景：呼叫中心的座席人员需
要通过一个相关的应用来访问敏感的信息，以解决问题。这些信息
可能包括社会保险号码、信用卡号码（可能只是最后4位数字）
家庭地址等。这是一个特殊的业务，需要允许座席人员访问这些信
息，所以我们可以用一个声明式的策略来支持这种情况。如果同样
的雇员在不同的环境下使用不同的应用程序（也许是一个市场分析
软件），在业务上就不太可能需要访问这些敏感信息，虽然我们可
能仍然需要查找同样的客户，访问她的统计信息和购买历史。在这
种情况下，上下文环境将不允许访问敏感数据，我们将强制通过
个自化的过滤过程来移除或加密敏感信息。采用哪种方式取决于数
据需要发送到哪里。加密的数据要求取得密钥，这会带来额外的管
理负担。我们很容易移除这些敏感数据，并在需要的时候将它们放
在不同的解析上下文里。
976
---
## Page 978
管理单点访问控制对于传统的企业架构来说可能不是什么大问题。
但是，考虑到不断增加的工作流，显式的、模型化的业务处理过程
以及诸如此类的东西，我们有充分的理由认为一个应用程序的用户
会需要在多种情况下调用一项功能或一个服务。如果我们在系统之
间传递实际的数据，应用程序的开发者就有责任知道在跨应用边界
时的访问控制问题。如果我们只是传递数据的引用，那么最初的应
用就不再需要负责，我们就可以确保实现信息驱动的、集中式的访
问控制。许多现有的SOA系统根据身份或角色来限制访问权限，但
它们基本上不支持对服务之间传递的具体数据的限制。这种局限性
也是传统Web服务既复杂又不够安全的原因之一。访问控制策略应
该在某个上下文环境中应用于行为和数据，但如果不能够命名这些
数据并包含上下文信息，这就变得非常困难。
当人们开始研究面向资源的架构时，他们考虑到了通过链接暴露敏
感信息的问题。在某种程度上说，在透明的查询之后返回大块的数
据似乎更安全。他们很难从上下文中分离数据标识和数据解析的行
为。上下文中包含的信息足够决定是否要向特定的用户提供信息。
它与请求本身是无关的，要符合组织机构中现有的认证和授权系
统。从HTTP基本认证，到IBMTivoliAccess Manager，到OpenID或
其他联合身份系统，都可以用来保护数据。我们可以检查谁可以访
问什么数据，通过单向或双向SSL来加密传输数据，防止窃听。可
以寻址并不等于安全性脆弱。实际上，传递引用的策略比传递数据
更安全、伸缩性更好。面向资源的方式不会因为它没有复杂的安全
特性（如XML加密、XML签名、XKMS、XACML、WS-Security、
WS-Trust、XrML等）变得更脆弱，反而可能更安全，因为人们可以
真正明白威胁模式以及如何应用保护策略。
当我们面对需要说明满足法规要求这一令人生畏而又非常严肃事实
时，这些思想就变得非常的重要。信用卡公司、医疗监控机构、公
司治理审计者等组织机构会对公司的审计动真格，要求证明只有在
工作中必须访问这些敏感信息的雇员才能看到这些信息。即使你的
公司是满足要求的，但如果很难说明这一点（“首先，看系统中的
这部分日志，然后跟踪流过这些中介的消息，它在这里被选取并处
理成一个查询，你可以在另一个日志中看到这一点...."），那么
审计过程的代价会变得巨大。针对逻辑引用解析来使用声明式的访
问控制策略，可以明确谁、何时知道什么（而且容易遵守）。
[1].http://restlet.org
977
---
## Page 979
5.5数据驱动的应用
当组织机构摆脱了数据寻址的麻烦之后，就可以得到一些好处，除
了可以让后台系统缓存结果之外，还可以通过谨慎的方式迁移一些
新技术。具体来说，我们可以引入一些全新的数据驱动的应用程序
和集成策略。当我们可以对数据命名，并通过应用友好的方式来请
求数据时，我们就很容易实现一些数据查看、商务智能、知识管
理，让大多数分析师看到它的时候感到异常兴奋。Simile项目l是
W3C和MITCSAIL小组的合作项目，他们已经做了大量的工作来展
示这些思想，展示真正能够带来多少兴奋。
请考虑这样一种情况：根据网站上的访问量和销售来追踪各种市场
策略的效果。我们可能需要从电子表格、数据库和来自Web分析软
件的一些日志文件和报表中取得信息。虽然将这些东西结合起来不
需要像造火箭那样，但这的确需要不小的工作量来发现、请求、转
换和发表这些结果。如果只是生成一份电子表格汇总，然后通过邮
件分发它，那么我们实际上在将来需要查看这些结果时，就需要在
我们的大堆文件中翻找。采用CMS或其他的文档管理管理系统只会
增加得到结果所需的时间。无论生成这些报告的频度如何，我们每
次都需要重复这些过程。
在面向资源的架构中，我们可以为每项数据元素确定地址，并请求
USON格式的数据，然后在基于浏览器的环境中使用它。源自Simile
的Exhibit项目L有一个Timeline视图L，差不多为我们提供了这种
功能。花一点工夫将Excel表格转换成JSON对象，我们就有了一个
可复用的环境，有了它之后，我们就能在几秒钟里组合并发布这些
市场报告。接下来你会想到同样的基础设施可以将其他格式的数据
放在一起，很容易地实现不同类型的分析和报表，这样你就会意识
到Web和可寻址的数据的价值。这种环境正在企业中出现，如果你
的组织机构还不能够这样容易地组织数据，那么它应该做到这一
点。
[1]_http:/simile.mit.edu.
[2]_http://simile.mit.edu/exhibit.
[3]http://simile.mit.edu/timeline
5.6应用面向资源的架构
978
---
## Page 980
最近，我通过重新架构我公司的PersistentURL（PURL）系统，创建
一个面向资源的系统。原来的PURL-是在大约15年前实现的。它
是从Apache1.0中分支出来的，用C语言写成，反映了当时的水平[2]
。它从那时起就成了Intermnet基础设施的一个稳定组成部分，但它逐
渐显现老态，需要现代化，特别是需要支持W3CTAG的303建议以
及大量的使用。大量的数据可以通过网页或简单的CGI-bin脚本来访
问，因为在那时候，浏览器似乎像是唯一要面对的客户端。随着我
们逐渐认识到语义网、生命科学、出版业和类似的一些社区需要长
期不变的、无歧义的标识符，我们就知道是时候来重新考虑架构，
并让它对人和软件更有用了。
PURL系统的设计目的是缓解好的名字和可解析的名字之间的紧张
关系。任何在Web上发布过信息的人都知道，当内容被移动时，链
接就不能使用了。PersistentURL的思想就是用一个好的、符合逻辑
的名称映射到可以解析的位置。例如，一个PURL可以定义从
http://purl.org/people/briansletten指向http://bosatsu.net/foaf/brian.rdf并
返回一个303来表示“参见"响应。我不是一个网络可寻址的资源，
但是从我"朋友的朋友（FOAF）"文件3L可以找到关于我的更多信
息。我可以将这个PURL传给所有想链接到我的FOAF文件的人。如
果我转到了其他公司，我可以更新PURL，让我的FOAF文件指向一
个新的位置。所有现有的链接将继续有效，它们只是通过303指向
了新的位置。这个过程如图5-6所示。PURL服务器实现了W3C技术
架构小组（TAG）的建议，即响应码303可以用于提供非网络可寻
址的资源的更多信息。
303
重定向
缓存
PURL服务器
客户端
缓存
内容服务器
图5-6：PURL的“参见”重定向
除了支持PURL重定向，我们还想将PURL系统中的每个主要数据部
分作为一个可寻址的信息资源。这不仅简化了与用户接口的交互，
979
---
## Page 981
也支持潜在可能的数据复用，也许超出我们原本的计划。对资源的
操作要求所有者凭证，但所有人都可以取得一个PURL的定义。对
点击http://purl.org/employee/briansletten这样的PURL有一个直接的解
析过程（它将导致303重定向），也有一个过程处理PURL资源的间
接RESTful地址（http://purl.org/admin/purl/employee/briansletten），
它将返回该PURL的定义，目前看起来是这样的：
/employee/briansletten
303
brian
http:/ /bosatsu.net/foaf/brian.rdf
PURL服务器的客户可以在数据定义上"冲浪”，作为发现有关PURL
资源的一种手段，而不必真正解析它。不需要编写代码来取得这些
信息。我们可以在浏览器中查看它，或通过curl在命令行访问它。
这样，我们就可以设想编写一些shell脚本，利用来自信息源的数
据，检查PURL是否指向了有效的资源，并返回合理的结果。如果
没有，我们可以找到PURL的所有者，向账号相关的邮件地址发出
一份邮件通知。可寻址、可访问的数据可以用于各种意想不到的设
计、脚本、应用和桌面控件，因为这样做很容易，也很有用。
有趣的完整故事是，我们没有在最初的版本中支持JSON的请求格
式，这使得AJAX用户接口变得复杂了。JavaScript的XML处理远不
是人们所期望的。即使我们在内部使用XMIL格式，我们也应该不怕
麻烦，提供JSON格式让浏览器来处理。你可以相信我们很快就会弥
980
---
## Page 982
补这个疏忽，但是我想在这里有必要突出这一点，如果我们一开始
就做对，会很有好处。你不需要一开始就支持所有数据格式，但在
今天，从XML和JSON开始是很好的。作为一项有趣的补充说明
我们可以选择几种容器和工具来实现前面介绍的这种架构。所有响
应HTTP请求的软件都可以作为PURL服务器。这体现了RESTful接口
和面向资源架构的浅显而有用的概念，如图5-7所示。任何Web服务
器或应用服务器都可以作为简单的面向资源的引擎。逻辑HTTP请
求被解释为对Servlet、Restlet或类似的可寻址功能的请求。
传输
1
-
逻辑请求
面向资源
的引擎
物理表现形式
图5-7：简单的面向资源的架构