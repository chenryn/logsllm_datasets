 (Thumb mode) ........................... 278 
19.2.4  
ARM + Optimizing Xcode 
(LLVM)+ ARM mode ................. 278 
19.2.5 ARM：BIC 指令详解 .............. 278 
19.2.6 ARM64: Optimizing  
GCC(Linaro) 4.9 ......................... 278 
19.2.7 ARM64: Non-optimizing GCC 
(Linaro) 4.9 ................................. 279 
19.2.8 MIPS ......................................... 279 
19.3 位移 ..................................................... 279 
19.4 在 FPU 上设置特定位......................... 279 
19.4.1 XOR 操作详解 ......................... 280 
19.4.2 x86 ............................................. 280 
19.4.3 MIPS ......................................... 282 
19.4.4 ARM.......................................... 282 
19.5 位校验.................................................. 284 
19.5.1 x86 ............................................. 286 
19.5.2 x64 ............................................. 289 
19.5.3 ARM + Optimizing Xcode 4.6.3 
 (LLVM) + ARM mode .............. 291 
19.5.4 ARM + Optimizing Xcode 4.6.3 
（LLVM）+ Thumb-2 mode ...... 292 
19.5.5 ARM64 + Optimizing 
 GCC 4.9 .................................... 292 
19.5.6 ARM64 + Non-optimizing 
 GCC 4.9 .................................... 292 
19.5.7 MIPS ......................................... 293 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
目    录 
5 
19.6 本章小结 ............................................. 295 
19.6.1 检测特定位（编译阶段） ....... 295 
19.6.2 检测特定位（runtime 阶段）.... 295 
19.6.3 设置特定位（编译阶段） ....... 296 
19.6.4 设置特定位（runtime 阶段）.... 296 
19.6.5 清除特定位（编译阶段） ....... 296 
19.6.6 清除特定位（runtime 阶段）.... 297 
19.7 练习题 ................................................. 297 
19.7.1 题目 1 ....................................... 297 
19.7.2 题目 2 ....................................... 298 
19.7.3 题目 3 ....................................... 301 
19.7.4 题目 4 ....................................... 301 
第 20 章 线性同余法与伪随机函数 ........ 304 
20.1 x86 ....................................................... 304 
20.2 x64 ....................................................... 305 
20.3 32 位 ARM .......................................... 306 
20.4 MIPS .................................................... 306 
MIPS 的重新定位 .................................. 307 
20.5 本例的线程安全改进版 ..................... 309 
第 21 章 结 构 体 .................................... 310 
21.1 MSVC: systemtime ........................... 310 
21.1.1 OllyDbg .................................... 311 
21.1.2 以数组替代结构体 .................. 312 
21.2 用 malloc()分配结构体的空间 ........... 313 
21.3 UNIX: struct tm ................................... 315 
21.3.1 Linux ......................................... 315 
21.3.2 ARM ......................................... 317 
21.3.3 MIPS ......................................... 319 
21.3.4 数组替代法 .............................. 320 
21.3.5 替换为 32 位 words .................. 322 
21.3.6 替换为字节型数组 .................. 323 
21.4 结构体的字段封装 ............................. 325 
21.4.1 x86 ............................................ 325 
21.4.2 ARM ......................................... 329 
21.4.3 MIPS ......................................... 330 
21.4.4 其他 .......................................... 331 
21.5 结构体的嵌套 ..................................... 331 
OllyDbg .................................................. 332 
21.6 结构体中的位操作 ............................. 333 
21.6.1 CPUID ...................................... 333 
21.6.2 用结构体构建浮点数............... 337 
21.7 练习题 ................................................. 339 
21.7.1 题目 1 ....................................... 339 
21.7.2 题目 2 ........................................ 340 
第 22 章 共用体（union）类型 ................ 345 
22.1 伪随机数生成程序 .............................. 345 
22.1.1 x86 ............................................. 346 
22.1.2 MIPS ......................................... 347 
22.1.3 ARM (ARM mode) ................... 348 
22.2 计算机器精度 ...................................... 349 
22.2.1 x86 ............................................. 350 
22.2.2 ARM64 ...................................... 350 
22.2.3 MIPS ......................................... 351 
22.2.4 本章小结 ................................... 351 
22.3 快速平方根计算 .................................. 351 
第 23 章 函数指针 ......................................... 352 
23.1 MSVC .................................................. 353 
23.1.1 MSVC+OllyDbg ....................... 354 
23.1.2 MSVC+tracer ............................ 355 
23.1.3 MSVC + tracer（指令分析） ...... 356 
23.2 GCC ..................................................... 357 
23.2.1 GCC + GDB（有源代码的 
情况） ....................................... 358 
23.2.2 GCC+GDB（没有源代码的 
情况） ....................................... 359 
第 24 章 32 位系统处理 64 位数据 ......... 362 
24.1 64 位返回值 ......................................... 362 
24.1.1 x86 ............................................. 362 
24.1.2 ARM.......................................... 362 
24.1.3 MIPS ......................................... 362 
24.2 参数传递及加减运算 .......................... 363 
24.2.1 x86 ............................................. 363 
24.2.2 ARM.......................................... 365 
24.2.3 MIPS ......................................... 365 
24.3 乘法和除法运算 .................................. 366 
24.3.1 x86 ............................................. 367 
24.3.2 ARM.......................................... 368 
24.3.3 MIPS ......................................... 369 
24.4 右移 ..................................................... 370 
24.4.1 x86 ............................................. 370 
24.4.2 ARM.......................................... 371 
24.4.3 MIPS ......................................... 371 
24.5 32 位数据转换为 64 位数据 ............... 371 
24.5.1 x86 ............................................. 372 
24.5.2 ARM.......................................... 372 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
6 
逆向工程权威指南（上册） 
24.5.3 MIPS ......................................... 372 
第 25 章 SIMD .............................................. 373 
25.1 矢量化 ................................................. 373 
25.1.1 用于加法计算 .......................... 374 
25.1.2 用于内存复制 .......................... 379 
25.2 SIMD 实现 strlen() .............................. 383 
第 26 章 64 位平台 ....................................... 387 
26.1 x86-64 .................................................. 387 
26.2 ARM .................................................... 394 
26.3 浮点数 ................................................. 394 
第 27 章 SIMD 与浮点数的并行运算 ... 395 
27.1 样板程序 ............................................. 395 
27.1.1 x64 ............................................ 395 
27.1.2 x86 ............................................ 396 
27.2 传递浮点型参数 ................................. 399 
27.3 浮点数之间的比较 ............................. 400 
27.3.1 x64 ............................................ 400 
27.3.2 x86 ............................................ 401 
27.4 机器精 ................................................. 402 
27.5 伪随机数生成程序（续）.................. 402 
27.6 总结 ..................................................... 403 
第 28 章 ARM 指令详解 ............................ 404 
28.1 立即数标识（#） ............................... 404 
28.2 变址寻址 ............................................. 404 
28.3 常量赋值 ............................................. 405 
28.3.1 32 位 ARM ............................... 405 
28.3.2 ARM64 ..................................... 405 
28.4 重定位 ................................................. 406 
第 29 章 MIPS 的特点 ............................... 409 
29.1 加载常量 ............................................. 409 
29.2 阅读推荐 ............................................. 409 
第二部分 硬件基础 
第 30 章 有符号数的表示方法 ................. 413 
第 31 章 字节序 ............................................. 415 
31.1 大端字节序 ......................................... 415 
31.2 小端字节序 ......................................... 415 
31.3 举例说明 ............................................. 415 
31.4 双模二元数据格式 .............................. 416 
31.5 转换字节序 .......................................... 416 
第 32 章 内存布局 ......................................... 417 
第 33 章 CPU.................................................. 418 
33.1 分支预测 .............................................. 418 
33.2 数据相关性 .......................................... 418 
第 34 章 哈希函数 ......................................... 419 
单向函数与不可逆算法 ................................. 419 
第三部分 一些高级的例子 
第 35 章 温度转换 ......................................... 423 
35.1 整数值.................................................. 423 
35.1.1 x86 构架下 MSVC 2012 优化 .... 423 
35.1.2 x64 构架下的 MSVC 2012 
优化 ........................................... 425 
35.2 浮点数运算 .......................................... 425 
第 36 章 斐波拉契数列 ............................... 428 
36.1 例子 1 .................................................. 428 
36.2 例子 2 .................................................. 430 
36.3 总结 ..................................................... 433 
第 37 章 CRC32 计算的例子 .................... 434 
第 38 章 网络地址计算实例 ...................... 437 
38.1 计算网络地址函数 calc_network_ 
address() ............................................... 438 
38.2 函数 form_IP() ..................................... 439 
38.3 函数 print_as_IP() ................................ 440 
38.4 form_netmask()函数和 set_bit()函数 ..... 442 
38.5 总结 ..................................................... 442 
第 39 章 循环：几个迭代 ........................... 444 
39.1 三个迭代器 .......................................... 444 
39.2 两个迭代器 .......................................... 445 
39.3 Intel C++ 2011 实例 ............................ 446 
第 40 章 达夫装置 ......................................... 449 
第 41 章 除以 9 .............................................. 452 
41.1 x86 ....................................................... 452 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
目    录 
7 
41.2 ARM .................................................... 453 
41.2.1 ARM 模式下，采用 Xcode 4.6.3 
（LLVM）优化 ......................... 453 
41.2.2 Thumb-2 模式下的 Xcode 4.6.3 
优化（LLVM） ....................... 454 
41.2.3 非优化的 Xcode 4.6.3(LLVM)  
以及 Keil 6/2013 ...................... 454 
41.3 MIPS .................................................... 454 
41.4 它是如何工作的 ................................. 455 
41.4.1 更多的理论 .............................. 456 
41.5 计算除数 ............................................. 456 
41.5.1 变位系数#1 .............................. 456 
41.5.2 变位系数#2 .............................. 457 
41.6 练习题 ................................................. 458 
第 42 章 字符串转换成数字， 
函数 atoi()...................................... 459 
42.1 例 1 ...................................................... 459 
42.1.1 64 位下的 MSVC 2013 优化 ... 459 
42.1.2 64 位下的 GCC 4.9.1 优化 ...... 460 
42.1.3 ARM 模式下 Keil 6/2013 优化 ... 460 
42.1.4 Thumb 模式下 Keil 6/2013 
优化 .......................................... 461 
42.1.5 ARM64 下的 GCC 4.9.1 优化 ... 462 
42.2 例 2 ...................................................... 462 
42.2.1 64 位下的 GCC 4.9.1 优化 ...... 463 
42.2.2 ARM 模式下的 Keil6/2013 
优化 ............................................. 464 
42.3 练习题.................................................. 465 
第 43 章 内联函数 ......................................... 466 
43.1 字符串和内存操作函数 ...................... 467 
43.1.1 字符串比较函数 strcmp()......... 467 
43.1.2 字符串长度函数 strlen() .......... 469 
43.1.3 字符串复制函数 strcpy() .......... 469 
43.1.4 内存设置函数 memset() ........... 470 
43.1.5 内存复制函数 memcpy() .......... 471 
43.1.6 内存对比函数 memcmp()........ 473 
43.1.7 IDA 脚本 ................................... 474 
第 44 章 C99 标准的受限指针 .................. 475 
第 45 章 打造无分支的 abs()函数 ........... 478 
45.1 x64 下的 GCC 4.9.1 优化 .................... 478 
45.2 ARM64 下的 GCC 4.9 优化 ................ 478 
第 46 章 变长参数函数 ............................... 480 
46.1 计算算术平均值 .................................. 480 
46.1.1 cdecl 调用规范 ......................... 480 
46.1.2 基于寄存器的调用规范 ........... 481 
46.2 vprintf()函数例子 ................................ 483 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第一
一部
部分
分  
指
指令
令讲
讲解
解  
在最初接触 C/C++时，我就对程序编译后的汇编指令十分着迷。按照从易到难的顺序，我循序渐进地
研究了 C/C++语言编译器生成汇编指令的模式。经过日积月累的努力，现在我不仅可以直接阅读 x86 程序
的汇编代码，而且能够在脑海里将其还原成原始的 C/C++语句。我相信这是学习逆向工程的有效方法。为
了能够帮助他人进行相关研究，我把个人经验整理成册，以待与读者分享。 
本书包含大量 x86/x64 和 ARM 框架的范例。如果读者熟悉其中某一种框架，可以跳过相关的篇幅。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
2 
逆向工程权威指南 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 11 章
章    CCPPUU 简
简介
介  
CPU 是执行程序机器码的硬件单元。简要地说，其相关概念主要有以下几项。 
指令码：CPU 受理的底层命令。典型的底层命令有：将数据在寄存器间转移、操作内存、计算运算等
指令。每类 CPU 都有自己的指令集架构（Instruction Set Architecture，ISA）。 
机器码：发送给 CPU 的程序代码。一条指令通常被封装为若干字节。 
汇编语言：为了让程序员少长白头发而创造出来的、易读易记的代码，它有很多类似宏的扩展功能。 
CPU 寄存器：每种 CPU 都有其固定的通用寄存器（GPR）。x86 CPU 里一般有 8 个 GPR，x64 里往往
有 16 个 GPR，而 ARM 里则通常有 16 个 GPR。您可以认为 CPU 寄存器是一种存储单元，它能够无差别
地存储所有类型的临时变量。假如您使用一种高级的编程语言，且仅会使用到 8 个 32 位变量，那么光 CPU
自带的寄存器就能完成不少任务了！ 
那么，机器码和编程语言（PL）的区别在哪里？CPU 可不像人类那样，能够理解 C/C++、Java、Python
这类较为贴近人类语言的高级编程语言。CPU 更适合接近硬件底层的具体指令。在不久的将来，或许会出
现直接执行高级编程语言的 CPU，不过那种尚未问世的科幻 CPU 必定比现在的 CPU 复杂。人脑和计算机
各有所长，如果人类直接使用贴近硬件底层的汇编语言编写程序，其难度也很高——因为那样很容易出现
大量的人为失误。可见，我们需要用一种程序把高级的编程语言转换为 CPU 能受理的底层汇编语言，而这
种程序就是人们常说的编译器/Compiler。 
1.1 指令集架构 
在 x86 的指令集架构（ISA）里，各 opcode（汇编指令对应的机器码）的长度不尽相同。出于兼容性
的考虑，后来问世的 64 位 CPU 指令集架构也没有大刀阔斧地摒弃原有指令集架构。很多面向早期 16 位
8086 CPU 的指令，不仅被 x86 的指令集继承，而且被当前最新的 CPU 指令集继续沿用。 
ARM属于RISC
① CPU，它的指令集在设计之初就力图保持各opcode的长度一致。在过去，这一特性的
确表现出了自身的优越性。最初的时候，所有ARM指令的机器码都被封装在 4 个字节里
②
不久，他们就发现这种模式并不划算。在实际的应用程序中，绝大多数的CPU指令
。人们把这种运
行模式叫作“ARM模式”。 
③
① Reduced instruction computing /精简指令集。 
② 这种固定长度的指令集，特别便于计算前后指令的地址。有关特性将在 13.2.2 节进行介绍。 
③ 即 MOV/PUSH/CALL/Jcc 等指令。 
很少用满那 4 个
字节。所以他们又推出了一种把每条指令封装在 2 个字节的“Thumb”模式的指令集架构。人们把采用这
种指令集编码的指令叫作“Thumb模式”指令。然而Thumb指令集并不能够封装所有的ARM指令，它本身
存在指令上的局限。当然，在同一个程序里可以同时存在ARM模式和Thumb模式这两种指令。 
之后，ARM 的缔造者们决定扩充 Thumb 指令集。他们自 ARM v7 平台开始推出了 Thumb-2 指令集。
Thumb-2 指令基本都可封装在 2 个字节的机器码之中，2 个字节封装不下的指令则由 4 字节封装。现在，
多数人依然错误地认为“Thumb-2 指令集是 ARM 指令集和 Thumb 指令集的复合体”。实际上，它是一种
充分利用处理器性能、足以与 ARM 模式媲美的独立的运行模式。在扩展了 Thumb 模式的指令集之后，
Thumb-2 现在与 ARM 模式不相上下。由于 Xcode 编译器默认采用 Thumb-2 指令集编译，所以现在主流的
iPod/iPhone/iPad 应用程序都采用了 Thumb-2 指令集。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
4 
逆向工程权威指南（上册） 
64 位的 ARM 处理器接踵而至。这种 CPU 的指令集架构再次使用固定长度的 4 字节 opcode，所以不
再支持 Thumb 模式的指令。相应地，64 位 ARM 工作于自己的指令集。受到指令集架构的影响，ARM 指
令集分为 3 类：ARM 模式指令集、Thumb 模式指令集（包括 Thumb-2）和 ARM64 的指令集。虽然这些指
令集之间有着千丝万缕的联系，需要强调的是：不同的指令集分别属于不同的指令集架构；一个指令集绝
非另一个指令集的变种。相应地，本书会以 3 种指令集、重复演示同一程序的指令片段，充分介绍 ARM
应用程序的特点。 
除了 ARM 处理器之外，还有许多处理器都采用了精简指令集。这些处理器多数都使用了固定长度的
32 位 opcode。例如 MIPS、PowerPC 和 Alpha AXP 处理器就是如此。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 22 章
章    最