# K-Nearest Neighbor (KNN) Search and Indexing Strategies

## KNN Search: Algorithm and Strategy
For non-KNN search, all distances are set to zero. This effectively turns the priority queue (PQ) into a stack, transforming the Breadth-First Search (BFS) into a Depth-First Search (DFS). Both normal search and KNN search can be handled with a single strategy.

### Key Points:
- **Non-KNN Search**: All distances are zero, so PQ behaves like a stack.
- **BFS to DFS**: The transformation from BFS to DFS occurs when all distances are zero.
- **Unified Strategy**: A single strategy can be used for both normal and KNN searches.

## KNN Search: Requirements and Solutions
### Requirements:
1. **Avoid Full Table Scan**:
   - **Solution**: Use an index to read only the necessary tuples.
2. **Avoid Sorting**:
   - **Solution**: Read tuples in order using a special traversal strategy.
3. **Support Tuple Visibility**:
   - **Solution**: Enable resumption of index traversal.
4. **Support Multiple Data Types**:
   - **Solution**: Modify the Generalized Search Tree (GiST) to accommodate different data types.

## KNN Search: Example
### Synthetic Data
- **Table Creation**:
  ```sql
  CREATE TABLE qq (id SERIAL, p POINT, s INT4);
  ```
- **Data Insertion**:
  ```sql
  INSERT INTO qq (p, s)
  SELECT point(p.lat, p.long), (random() * 1000)::INT
  FROM (
    SELECT (0.5 - random()) * 180 AS lat, random() * 360 AS long
    FROM generate_series(1, 1000000) AS t
  ) AS p;
  ```
- **Index Creation**:
  ```sql
  CREATE INDEX qq_p_s_idx ON qq USING GIST(p);
  ANALYZE qq;
  ```
- **Query**:
  ```sql
  SET enable_indexscan = on|off;
  EXPLAIN (ANALYZE ON, BUFFERS ON)
  SELECT * FROM qq ORDER BY (p <-> '(0,0)') ASC LIMIT 10;
  ```

### Index Statistics
- **Configuration**:
  - `shared_buffers = 512MB`
  - `work_mem = 32MB`
  - `maintenance_work_mem = 256MB`
  - `checkpoint_segments = 16`
  - `effective_cache_size = 1GB`
- **Index Details**:
  - Number of levels: 3
  - Number of pages: 8787
  - Number of leaf pages: 8704
  - Number of tuples: 1008786
  - Number of invalid tuples: 0
  - Number of leaf tuples: 1000000
  - Total size of tuples: 44492028 bytes
  - Total size of leaf tuples: 44104448 bytes
  - Total size of index: 71983104 bytes

### Query Performance
- **k=1, n=1,000,000**:
  - **Limit (cost=0.00..0.08 rows=1 width=24)**:
    - Actual time: 0.104 ms
    - Buffers: shared hit=4
  - **Index Scan (cost=0.00..82060.60 rows=1000000 width=24)**:
    - Actual time: 0.104 ms
    - Sort Cond: (p <-> '(0,0)')
    - Buffers: shared hit=4
  - **Total runtime**: 0.117 ms

- **Full Table Scan**:
  - **Limit (cost=24853.00..24853.00 rows=1 width=24)**:
    - Actual time: 469.129 ms
    - Buffers: shared hit=7353
  - **Sort (cost=24853.00..27353.00 rows=1000000 width=24)**:
    - Actual time: 469.128 ms
    - Sort Method: top-N heapsort Memory: 25kB
    - Buffers: shared hit=7353
  - **Seq Scan (cost=0.00..19853.00 rows=1000000 width=24)**:
    - Actual time: 0.007 ms
    - Buffers: shared hit=7353
  - **Total runtime**: 469.150 ms

### Real Data Example
- **US Geonames**:
  - **Table Creation**:
    ```sql
    CREATE TABLE geo (asciiname TEXT, point POINT);
    CREATE INDEX pt_fts_idx ON geo USING GIST(point, to_tsvector('english', asciiname));
    ```
  - **Query**:
    ```sql
    EXPLAIN (ANALYZE ON, BUFFERS ON)
    SELECT asciiname, point, (point <-> '5.0,5.0'::POINT) AS dist
    FROM geo
    WHERE to_tsvector('english', asciiname) @@ to_tsquery('english', 'mars')
    ORDER BY dist ASC LIMIT 10;
    ```

### Existing Solutions
- **Inefficient Query**:
  - **Query**:
    ```sql
    SELECT id, date, event FROM events ORDER BY date <-> '1957-10-04'::DATE ASC LIMIT 10;
    ```
  - **Time**: 115.548 ms
  - **Issues**:
    - Full table scan
    - B-tree index on date is not helpful
    - Full table sort

- **Efficient Query with btree_gist**:
  - **Query**:
    ```sql
    SELECT id, date, event FROM events ORDER BY date <-> '1957-10-04'::DATE ASC LIMIT 10;
    ```
  - **Time**: 0.590 ms
  - **Improvements**:
    - 8 index pages read + 10 tuples read
    - No sorting
    - About 200 times faster

### pg_trgm Support
- **Query**:
  ```sql
  SELECT date, event, ('jeorge ewashington' <-> event) AS dist
  FROM events
  ORDER BY dist ASC LIMIT 10;
  ```
  - **Time**: 187.604 ms

### Corner Case: Equal Distances
- **Table Creation**:
  ```sql
  CREATE TABLE circle (id SERIAL, p POINT, s INT4);
  INSERT INTO circle (p, s)
  SELECT point(p.x, p.y), (random() * 1000)::INT
  FROM (
    SELECT t.x, sqrt(1 - t.x * t.x) AS y
    FROM (
      SELECT random() AS x, generate_series(1, 1000000)
    ) AS t
  ) AS p;
  CREATE INDEX circle_p_idx ON circle USING GIST(p);
  ANALYZE circle;
  ```
- **Query**:
  ```sql
  EXPLAIN (ANALYZE ON, BUFFERS ON)
  SELECT * FROM circle ORDER BY (p <-> '(0,0)') ASC LIMIT 10;
  ```
  - **Time**: 230.885 ms
  - **Buffers**: shared hit=8276
  - **Still faster than sequential scan (454.331 ms)** due to no sorting.

## Bloom Index (Prototype)
### Overview
- **Data with Many Attributes**:
  - Too many indexes for arbitrary attribute combinations.
  - High space usage and slow updates.
- **Equality Queries**:
  - Hash all attributes to a bit-signature of fixed size.
  - Store signatures in a file.
  - Search performance is O(N), insert O(1).

### Example
- **Table Creation**:
  ```sql
  CREATE INDEX bloomidx ON tbloom(i1, i2, i3)
  WITH (length=5, col1=2, col2=2, col3=4);
  ```
- **Parameters**:
  - `length`: Number of uint16 in signature.
  - `colN`: Number of bits for column N.

### Better Cost Estimation for GIN Index Scan
- **Problem**:
  - Planner chooses sequential scan over index scan, affecting FTS users.
  - Current cost of GIN index scan is over-estimated.
- **Solution**:
  - Calculate cost of search in ENTRY tree.
  - Estimate cost of reading POSTING list or tree.
  - Hack: Adjust DataPageEstimate based on selectivity and relpages.

### References
- **KNN Patches**:
  - [builtin_knngist_itself-0.7.gz](http://www.sigaev.ru/misc/builtin_knngist_itself-0.7.gz)
  - [builtin_knngist_contrib_btree_gist-0.6.gz](http://www.sigaev.ru/misc/builtin_knngist_contrib_btree_gist-0.6.gz)
  - [builtin_knngist_contrib_pg_trgm-0.6.gz](http://www.sigaev.ru/misc/builtin_knngist_contrib_pg_trgm-0.6.gz)
  - [builtin_knngist_planner-0.6.gz](http://www.sigaev.ru/misc/builtin_knngist_planner-0.6.gz)
  - [builtin_knngist_proc-0.6.gz](http://www.sigaev.ru/misc/builtin_knngist_proc-0.6.gz)
- **Bloom Index**:
  - [bloom-0.3.tar.gz](http://www.sigaev.ru/misc/bloom-0.3.tar.gz)
- **GIN Cost Estimate**:
  - [gincostestimate-0.17.gz](http://www.sigaev.ru/misc/gincostestimate-0.17.gz)

Presented by Oleg Bartunov and Teodor Sigaev at PGCon-2010, Ottawa, May 20-21, 2010.