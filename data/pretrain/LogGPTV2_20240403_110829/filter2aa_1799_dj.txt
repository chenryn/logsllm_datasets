Enablement
Information [8]
Filter
Data
Reg. List Entry
ETW_GUID ptr.
Process A
Session ID 0x4
Callback’s Info
Flags
Traits
Reg. Enablement
Mask
ETW_GUID List
entry
ETW registrations
List head
Provider’s
GUID
Security
Descriptor
Ref.
Counter
Enablement
Information [8]
Filter
Data
FIGURE 10-34 The ETW_GUID_ENTRY data structure and the ETW_REG_ENTRY.
At this stage, the provider is registered and ready to be enabled in the session(s) that requested it 
(through the EnableTrace API). In case the provider has been already enabled in at least one session before 
its registration, ETW enables it (see the next section for details) and calls the Enablement callback, which can 
be specified by the caller of the EventRegister (or EtwRegister) API that started the registration process.
508 
CHAPTER 10 Management, diagnostics, and tracing
EXPERIMENT: Enumerating ETW providers
As for ETW sessions, XPERF can enumerate the list of all the current registered providers (the 
WEVTUTIL tool, installed with Windows, can do the same). Open an administrative command 
prompt window and move to the Windows Performance Toolkit path. To enumerate the reg-
istered providers, use the -providers command option. The option supports different flags. 
For this experiment, you will be interested in the I and R flags, which tell XPERF to enumerate 
the installed or registered providers. As we will discuss in the “Decoding events” section later 
in this chapter, the difference is that a provider can be registered (by specifying a GUID) but 
not installed in the HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WINEVT\Publishers 
registry key. This will prevent any consumer from decoding the event using TDH routines. The 
following commands
cd /d “C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit” 
xperf -providers R > registered_providers.txt 
xperf -providers I > installed_providers.txt
produce two text files with similar information. If you open the registered_providers.txt file, 
you will find a mix of names and GUIDs. Names identify providers that are also installed in the 
Publisher registry key, whereas GUID represents providers that have just been registered through 
the EventRegister API discussed in this section. All the names are present also in the installed_
providers.txt file with their respective GUIDs, but you won’t find any GUID listed in the first text 
file in the installed providers list.
XPERF also supports the enumeration of all the kernel flags and groups supported by system 
loggers (discussed in the “System loggers” section later in this chapter) through the K flag (which 
is a superset of the KF and KG flags).
Provider Enablement
As introduced in the previous section, a provider should be associated with an ETW session to be able 
to generate events. This association is called Provider Enablement, and it can happen in two ways: 
before or after the provider is registered. A controller application can enable a provider on a session 
through the EnableTraceEx API. The API allows you to specify a bitmask of keywords that determine the 
category of events that the session wants to receive. In the same way, the API supports advanced filters 
on other kinds of data, like the process IDs that generate the events, package ID, executable name, 
and so on. (You can find more information at https://docs.microsoft.com/en-us/windows/win32/api/
evntprov/ns-evntprov-event_filter_descriptor.)
Provider Enablement is managed by ETW in kernel mode through the internal EtwpEnableGuid 
function. For user-mode requests, the function performs an access check on both the session and 
provider security descriptors, requesting the TRACELOG_GUID_ENABLE access right on behalf of 
the calling process’s token. If the logger session includes the SECURITY_TRACE flag, EtwpEnableGuid 
requires that the calling process is a PPL (see the “ETW security” section later in this chapter for more 
details). If the check succeeds, the function performs a similar task to the one discussed previously for 
provider registrations:
EXPERIMENT: Enumerating ETW providers
As for ETW sessions, XPERF can enumerate the list of all the current registered providers (the 
WEVTUTIL tool, installed with Windows, can do the same). Open an administrative command 
prompt window and move to the Windows Performance Toolkit path. To enumerate the reg-
istered providers, use the -providers command option. The option supports different flags. 
For this experiment, you will be interested in the I and R flags, which tell XPERF to enumerate 
the installed or registered providers. As we will discuss in the “Decoding events” section later 
in this chapter, the difference is that a provider can be registered (by specifying a GUID) but 
not installed in the HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WINEVT\Publishers 
registry key. This will prevent any consumer from decoding the event using TDH routines. The 
following commands
cd /d “C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit”
xperf -providers R > registered_providers.txt
xperf -providers I > installed_providers.txt
produce two text files with similar information. If you open the registered_providers.txt file, 
you will find a mix of names and GUIDs. Names identify providers that are also installed in the 
Publisher registry key, whereas GUID represents providers that have just been registered through 
the EventRegister API discussed in this section. All the names are present also in the installed_
EventRegister API discussed in this section. All the names are present also in the installed_
EventRegister
providers.txt file with their respective GUIDs, but you won’t find any GUID listed in the first text 
file in the installed providers list.
XPERF also supports the enumeration of all the kernel flags and groups supported by system 
loggers (discussed in the “System loggers” section later in this chapter) through the K flag (which 
is a superset of the KF and KG flags).
CHAPTER 10 Management, diagnostics, and tracing
509
I 
It allocates and initializes an ETW_GUID_ENTRY data structure to represent the provider or use
the one already linked in the global ETW per-silo data structure in case the provider has been
already registered.
I 
Links the provider to the logger session by adding the relative session enablement information
in the ETW_GUID_ENTRY.
In case the provider has not been previously registered, no ETW registration object exists that’s 
linked in the ETW_GUID_ENTRY data structure, so the procedure terminates. (The provider will be 
enabled after it is first registered.) Otherwise, the provider is enabled.
While legacy MOF providers and WPP providers can be enabled only to one session at time, 
Manifest-based and Tracelogging providers can be enabled on a maximum of eight sessions. As previ-
ously shown in Figure 10-32, the ETW_GUID_ENTRY data structure contains enablement information 
for each possible ETW session that enabled the provider (eight maximum). Based on the enabled ses-
sions, the EtwpEnableGuid function calculates a new session enablement mask, storing it in the ETW_
REG_ENTRY data structure (representing the provider registration). The mask is very important because 
it’s the key for event generations. When an application or driver writes an event to the provider, a 
check is made: if a bit in the enablement mask equals 1, it means that the event should be written to the 
buffer maintained by a particular ETW session; otherwise, the session is skipped and the event is not 
written to its buffer.
Note that for secure sessions, a supplemental access check is performed before updating the ses-
sion enablement mask in the provider registration. The ETW session’s security descriptor should allow 
the TRACELOG_LOG_EVENT access right to the calling process’s access token. Otherwise, the relative 
bit in the enablement mask is not set to 1. (The target ETW session will not receive any event from the 
provider registration.) More information on secure sessions is available in the “Secure loggers and ETW 
security” section later in this chapter. 
Providing events
After registering one or more ETW providers, a provider application can start to generate events. Note 
that events can be generated even though a controller application hasn’t had the chance to enable the 
provider in an ETW session. The way in which an application or driver can generate events depends on 
the type of the provider. For example, applications that write events to manifest-based providers usu-
ally directly create an event descriptor (which respects the XML manifest) and use the EventWrite API 
to write the event to the ETW sessions that have the provider enabled. Applications that manage MOF 
and WPP providers rely on the TraceEvent API instead.
Events generated by manifest-based providers, as discussed previously in the “ETW session” sec-
tion, can be filtered by multiple means. ETW locates the ETW_GUID_ENTRY data structure from the 
provider registration object, which is provided by the application through a handle. The internal 
EtwpEventWriteFull function uses the provider’s registration session enablement mask to cycle between 
all the enabled ETW sessions associated with the provider (represented by an ETW_LOGGER_CONTEXT). 
For each session, it checks whether the event satisfies all the filters. If so, it calculates the full size of the 
event’s payload and checks whether there is enough free space in the session’s current buffer.
510 
CHAPTER 10 Management, diagnostics, and tracing
If there is no available space, ETW checks whether there is another free buffer in the session: free 
buffers are stored in a FIFO (first-in, first-out) queue. If there is a free buffer, ETW marks the old buffer 
as “dirty” and switches to the new free one. In this way, the Logger thread can wake up and flush the 
entire buffer to a log file or deliver it to a real-time consumer. If the session’s log mode is a circular log-
ger, no logger thread is ever created: ETW simply links the old full buffer at the end of the free buffers 
queue (as a result the queue will never be empty). Otherwise, if there isn’t a free buffer in the queue, 
ETW tries to allocate an additional buffer before returning an error to the caller. 
After enough space in a buffer is found, EtwpEventWriteFull atomically writes the entire event 
payload in the buffer and exits. Note that in case the session enablement mask is 0, it means that no 
sessions are associated with the provider. As a result, the event is lost and not logged anywhere. 
MOF and WPP events go through a similar procedure but support only a single ETW session and 
generally support fewer filters. For these kinds of providers, a supplemental check is performed on the 
associated session: If the controller application has marked the session as secure, nobody can write 
any events. In this case, an error is yielded back to the caller (secure sessions are discussed later in the 
“Secure loggers and ETW security” section).
EXPERIMENT: Listing processes activity using ETW
In this experiment, will use ETW to monitor system’s processes activity. Windows 10 has two provid-
ers that can monitor this information: Microsoft-Windows-Kernel-Process and the NT kernel log-
ger through the PROC_THREAD kernel flags. You will use the former, which is a classic provider and 
already has all the information for decoding its events. You can capture the trace with multiple tools. 
You still use XPERF (Windows Performance Monitor can be used, too). 
Open a command prompt window and type the following commands:
cd /d “C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit” 
xperf -start TestSession -on Microsoft-Windows-Kernel-Process -f c:\process_trace.etl
The command starts an ETW session called TestSession (you can replace the name) that will 
consume events generated by the Kernel-Process provider and store them in the C:\process_
trace.etl log file (you can also replace the file name). 
To verify that the session has actually started, repeat the steps described previously in the 
“Enumerating ETW sessions” experiment. (The TestSession trace session should be listed by both 
XPERF and the Windows Performance Monitor.) Now, you should start some new processes or 
applications (like Notepad or Paint, for example). 
To stop the ETW session, use the following command:
xperf -stop TestSession
The steps used for decoding the ETL file are described later in the “Decoding an ETL file” 
experiment. Windows includes providers for almost all its components. The Microsoft-Windows-
MSPaint provider, for example, generates events based on Paint’s functionality. You can try this 
experiment by capturing events from the MsPaint provider.
EXPERIMENT: Listing processes activity using ETW
In this experiment, will use ETW to monitor system’s processes activity. Windows 10 has two provid-
ers that can monitor this information: Microsoft-Windows-Kernel-Process and the NT kernel log-
ger through the PROC_THREAD kernel flags. You will use the former, which is a classic provider and 
already has all the information for decoding its events. You can capture the trace with multiple tools. 
You still use XPERF (Windows Performance Monitor can be used, too). 
Open a command prompt window and type the following commands:
cd /d “C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit”
xperf -start TestSession -on Microsoft-Windows-Kernel-Process -f c:\process_trace.etl
The command starts an ETW session called TestSession (you can replace the name) that will 
consume events generated by the Kernel-Process provider and store them in the C:\process_
trace.etl log file (you can also replace the file name). 
To verify that the session has actually started, repeat the steps described previously in the 
“Enumerating ETW sessions” experiment. (The TestSession trace session should be listed by both 
XPERF and the Windows Performance Monitor.) Now, you should start some new processes or 
applications (like Notepad or Paint, for example). 
To stop the ETW session, use the following command:
xperf -stop TestSession
The steps used for decoding the ETL file are described later in the “Decoding an ETL file” 
experiment. Windows includes providers for almost all its components. The Microsoft-Windows-
MSPaint provider, for example, generates events based on Paint’s functionality. You can try this 
experiment by capturing events from the MsPaint provider.
CHAPTER 10 Management, diagnostics, and tracing
511
ETW Logger thread
The Logger thread is one of the most important entities in ETW. Its main purpose is to flush events to 
the log file or deliver them to the real-time consumer, keeping track of the number of delivered and 
lost events. A logger thread is started every time an ETW session is initially created, but only in case the 
session does not use the circular log mode. Its execution logic is simple. After it’s started, it links itself 
to the ETW_LOGGER_CONTEXT data structure representing the associated ETW session and waits on 
two main synchronization objects. The Flush event is signaled by ETW every time a buffer belonging 
to a session becomes full (which can happen after a new event has been generated by a provider—for 
example, as discussed in the previous section, “Providing events”), when a new real-time consumer 
has requested to be connected, or when a logger session is going to be stopped. The TimeOut timer is 
initialized to a valid value (usually 1 second) only in case the session is a real-time one or in case the user 
has explicitly required it when calling the StartTrace API for creating the new session.
When one of the two synchronization objects is signaled, the logger thread rearms them and 
checks whether the file system is ready. If not, the main logger thread returns to sleep again (no ses-
sions should be flushed in early boot stages). Otherwise, it starts to flush each buffer belonging to the 
session to the log file or the real-time consumer.
For real-time sessions, the logger thread first creates a temporary per-session ETL file in the 
%SystemRoot%\ System32\LogFiles\WMI\RtBackup folder (as shown in Figure 10-35.) The log file name 
is generated by adding the EtwRT prefix to the name of the real-time session. The file is used for saving 
temporary events before they are delivered to a real-time consumer (the log file can also store lost events 
that have not been delivered to the consumer in the proper time frame). When started, real-time auto-
loggers restore lost events from the log file with the goal of delivering them to their consumer. 
FIGURE 10-35 Real-time temporary ETL log files.
512 
CHAPTER 10 Management, diagnostics, and tracing
The logger thread is the only entity able to establish a connection between a real-time consumer 
and the session. The first time that a consumer calls the ProcessTrace API for receiving events from a 
real-time session, ETW sets up a new RealTimeConsumer object and uses it with the goal of creating a 
link between the consumer and the real-time session. The object, which resolves to an ETW_REALTIME_
CONSUMER data structure in the NT kernel, allows events to be “injected” in the consumer’s process 
address space (another user-mode buffer is provided by the consumer application).
For non–real-time sessions, the logger thread opens (or creates, in case the file does not exist) the 
initial ETL log file specified by the entity that created the session. The logger thread can also create a 
brand-new log file in case the session’s log mode specifies the EVENT_TRACE_FILE_MODE_NEWFILE 
flag, and the current log file reaches the maximum size.
At this stage, the ETW logger thread initiates a flush of all the buffers associated with the session 
to the current log file (which, as discussed, can be a temporary one for real-time sessions). The flush is 
performed by adding an event header to each event in the buffer and by using the NtWriteFile API for 
writing the binary content to the ETL log file. For real-time sessions, the next time the logger thread 
wakes up, it is able to inject all the events stored in the temporary log file to the target user-mode real-
time consumer application. Thus, for real-time sessions, ETW events are never delivered synchronously.
Consuming events
Events consumption in ETW is performed almost entirely in user mode by a consumer application, 
thanks to the services provided by the Sechost.dll. The consumer application uses the OpenTrace API 
for opening an ETL log file produced by the main logger thread or for establishing the connection to 
a real-time logger. The application specifies an event callback function, which is called every time ETW 
consumes a single event. Furthermore, for real-time sessions, the application can supply an optional 
buffer-callback function, which receives statistics for each buffer that ETW flushes and is called every 
time a single buffer is full and has been delivered to the consumer. 
The actual event consumption is started by the ProcessTrace API. The API works for both standard 
and real-time sessions, depending on the log file mode flags passed previously to OpenTrace.
For real-time sessions, the API uses kernel mode services (accessed through the NtTraceControl 
system call) to verify that the ETW session is really a real-time one. The NT kernel verifies that the secu-
rity descriptor of the ETW session grants the TRACELOG_ACCESS_REALTIME access right to the caller 
process’s token. If it doesn’t have access, the API fails and returns an error to the controller applica-
tion. Otherwise, it allocates a temporary user-mode buffer and a bitmap used for receiving events and 
connects to the main logger thread (which creates the associated EtwConsumer object; see the “ETW 
logger thread” section earlier in this chapter for details). Once the connection is established, the API 
waits for new data arriving from the session’s logger thread. When the data comes, the API enumerates 
each event and calls the event callback.
For normal non–real-time ETW sessions, the ProcessTrace API performs a similar processing, but 
instead of connecting to the logger thread, it just opens and parses the ETL log file, reading each buf-
fer one by one and calling the event callback for each found event (events are sorted in chronological 
order). Differently from real-time loggers, which can be consumed one per time, in this case the API 
CHAPTER 10 Management, diagnostics, and tracing
513
can work even with multiple trace handles created by the OpenTrace API, which means that it can parse 
events from different ETL log files.
Events belonging to ETW sessions that use circular buffers are not processed using the described 
methodology. (There is indeed no logger thread that dumps any event.) Usually a controller applica-
tion uses the FlushTrace API when it wants to dump a snapshot of the current buffers belonging to an 
ETW session configured to use a circular buffer into a log file. The API invokes the NT kernel through 
the NtTraceControl system call, which locates the ETW session and verifies that its security descrip-
tor grants the TRACELOG_CREATE_ONDISK access right to the calling process’s access token. If so, 
and if the controller application has specified a valid log file name, the NT kernel invokes the internal 
EtwpBufferingModeFlush routine, which creates the new ETL file, adds the proper headers, and writes 
all the buffers associated with the session. A consumer application can then parse the events written in 
the new log file by using the OpenTrace and ProcessTrace APIs, as described earlier.
Events decoding
When the ProcessTrace API identifies a new event in an ETW buffer, it calls the event callback, which 
is generally located in the consumer application. To be able to correctly process the event, the con-
sumer application should decode the event payload. The Event Trace Decode Helper Library (TDH.dll) 
provides services to consumer applications for decoding events. As discussed in the previous sections, 
a provider application (or driver), should include information that describes how to decode the events 
generated by its registered providers. 
This information is encoded differently based on the provider type. Manifest-based providers, for 
example, compile the XML descriptor of their events in a binary file and store it in the resource section 
of their provider application (or driver). As part of provider registration, a setup application should 
register the provider’s binary in the HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WINEVT\
Publishers registry key. The latter is important for event decoding, especially for the following reasons:
I 
The system consults the Publishers key when it wants to resolve a provider name to its GUID
(from an ETW point of view, providers do not have a name). This allows tools like Xperf to dis-