title:Protocols for Checking Compromised Credentials
author:Lucy Li and
Bijeeta Pal and
Junade Ali and
Nick Sullivan and
Rahul Chatterjee and
Thomas Ristenpart
Protocols for Checking Compromised Credentials
Junade Ali
Cloud(cid:131)are Inc.
Bijeeta Pal
Lucy Li
Cornell University
Nick Sullivan
Cloud(cid:131)are Inc.
Cornell University
Rahul Cha(cid:138)erjee
University of Wisconsin–Madison &
Cornell Tech
(cid:140)omas Ristenpart
Cornell Tech
9
1
0
2
p
e
S
4
]
R
C
.
s
c
[
3
v
7
3
7
3
1
.
5
0
9
1
:
v
i
X
r
a
ABSTRACT
To prevent credential stu(cid:129)ng a(cid:138)acks, industry best practice now
proactively checks if user credentials are present in known data
breaches. Recently, some web services, such as HaveIBeenPwned
(HIBP) and Google Password Checkup (GPC), have started provid-
ing APIs to check for breached passwords. We refer to such services
as compromised credential checking (C3) services. We give the (cid:128)rst
formal description of C3 services, detailing di(cid:130)erent se(cid:138)ings and
operational requirements, and we give relevant threat models.
One key security requirement is the secrecy of a user’s pass-
words that are being checked. Current widely deployed C3 services
have the user share a small pre(cid:128)x of a hash computed over the
user’s password. We provide a framework for empirically analyz-
ing the leakage of such protocols, showing that in some contexts
knowing the hash pre(cid:128)xes leads to a 12x increase in the e(cid:129)cacy
of remote guessing a(cid:138)acks. We propose two new protocols that
provide stronger protection for users’ passwords, implement them,
and show experimentally that they remain practical to deploy.
1 INTRODUCTION
Password database breaches have become routine [9]. Such breaches
enable credential stu(cid:129)ng a(cid:138)acks, in which a(cid:138)ackers try to com-
promise accounts by submi(cid:138)ing one or more passwords that were
leaked with that account from another website. To counter cre-
dential stu(cid:129)ng, companies and other organizations have begun
checking if their users’ passwords appear in breaches, and, if so,
they deploy further protections (e.g., rese(cid:138)ing the user’s passwords
or otherwise warning the user). Information on what usernames
and passwords have appeared in breaches is gathered either from
public sources or from a third-party service. (cid:140)e la(cid:138)er democra-
tizes access to leaked credentials, making it easy for others to help
their customers gain con(cid:128)dence that they are not using exposed
passwords. We refer to such services as compromised credential
checking services, or C3 services in short.
Two prominent C3 services already operate. HaveIBeenPwned
(HIBP) [46] was deployed by Troy Hunt and CloudFlare in 2018
and is used by many web services, including Firefox [14], EVE On-
line [10], and 1Password [5]. Google released a Chrome extension
called Password Checkup (GPC) [44, 45] in 2019 that allows users
to check if their username-password pairs appear in a compromised
dataset. Both services work by having the user share with the C3
server a pre(cid:128)x of the hash of their password or of the hash of their
username-password pair. (cid:140)is leaks some information about user
passwords, which is problematic should the C3 server be compro-
mised or otherwise malicious. But until now there has been no
thorough investigation into the damage from the leakage of current
C3 services or suggestions for protocols that provide be(cid:138)er privacy.
We provide the (cid:128)rst formal treatment of C3 services for di(cid:130)erent
se(cid:138)ings, including an exploration of their security guarantees. A
C3 service must provide secrecy of client credentials, and ideally, it
should also preserve secrecy of the leaked datasets held by the C3
server. (cid:140)e computational and bandwidth overhead for the client
and especially the server should also be low. (cid:140)e server might hold
billions of leaked records, precluding use of existing cryptographic
protocols for private set intersection (PSI) [29, 36], which would
use a prohibitive amount of bandwidth at this scale.
Current industry-deployed C3 services reduce bandwidth re-
quirements by dividing the leaked dataset into buckets before ex-
ecuting a PSI protocol. (cid:140)e client shares with the C3 server the
identi(cid:128)er of the bucket where their credentials would be found, if
present in the leak dataset. (cid:140)en, the client and the server engage
in a protocol between the bucket held by the server and the cre-
dential held by the client to determine if their credential is indeed
in the leak. In current schemes, the pre(cid:128)x of the hash of the user
credential is used as the bucket identi(cid:128)er. (cid:140)e client shares the hash
pre(cid:128)x (bucket identi(cid:128)er) of their credentials with the C3 server.
Revealing hash pre(cid:128)xes of credentials may be dangerous. We
outline an a(cid:138)ack scenario against such pre(cid:128)x-revealing C3 services.
In particular, we consider a conservative se(cid:138)ing where the C3
server a(cid:138)empts to guess the password, while knowing the username
and the hash pre(cid:128)x associated with the queried credential. We
rigorously evaluate the security of HIBP and GPC under this threat
model via a mixture of formal and empirical analysis.
We start by considering users with a password appearing in
some leak and show how to adapt a recent state-of-the-art creden-
tial tweaking a(cid:138)ack [40] to take advantage of the knowledge of
hash pre(cid:128)xes. In a credential tweaking a(cid:138)ack, one uses the leaked
password to determine likely guesses (usually, small tweaks on the
leaked password). Via simulation, we show that our variant of cre-
dential tweaking successfully compromises 83% of such accounts
with 1,000 or fewer a(cid:138)empts, given the transcript of a query made
to the HIBP server. Without knowledge of the transcript, only 56%
of these accounts can be compromised within 1,000 guesses.
We also consider user accounts not present in a leak. Here we
found that the leakage from the hash pre(cid:128)x disproportionately
a(cid:130)ects security compared to the previous case. For these user
accounts, obtaining the query to HIBP enables the a(cid:138)acker to guess
71% of passwords within 1,000 a(cid:138)empts, which is a 12x increase
over the success with no hash pre(cid:128)x information. Similarly, for
GPC, our simulation shows 33% of user passwords can be guessed
in 10 or fewer a(cid:138)empts (and 60% in 1,000 a(cid:138)empts), should the
a(cid:138)acker learn the hash pre(cid:128)x shared with the GPC server.
(cid:140)e a(cid:138)ack scenarios described are conservative because they
assume the a(cid:138)acker can infer which queries to the C3 server are
associated to which usernames. (cid:140)is may not be always possible.
Nevertheless, caution dictates that we would prefer schemes that
leak less. We therefore present two new C3 protocols, one that
checks for leaked passwords (like HIBP) and one that checks for
leaked username-password pairs (like GPC). Like GPC and HIBP,
we partition the password space before performing PSI, but we do
so in a way that reduces leakage signi(cid:128)cantly.
Our (cid:128)rst scheme works when only passwords are queried to
the C3 server. It utilizes a novel approach that we call frequency-
smoothing bucketization (FSB). (cid:140)e key idea is to use an estimate of
the distribution of human-chosen passwords to assign passwords to
buckets in a way that (cid:131)a(cid:138)ens the distribution of accessed buckets.
We show how to obtain good estimates (using leaked data), and,
via simulation, that FSB reduces leakage signi(cid:128)cantly (compared to
HIBP). In many cases the best a(cid:138)ack given the information leaked
by the C3 protocol works no be(cid:138)er than having no information at all.
While the bene(cid:128)ts come with some added computational complexity
and bandwidth, we show via experimentation that the operational
overhead for the FSB C3 server or client is comparable with the
overhead from GPC, while also leaking much less information than
hash-pre(cid:128)x-based C3 protocols.
We also describe a more secure bucketizing scheme that pro-
vides be(cid:138)er privacy/bandwidth trade-o(cid:130) for C3 servers that store
username-password pairs. (cid:140)is scheme was also (independently)
proposed in [45], and Google states that they plan to transition
to using it in their Chrome extension. It is a simple modi(cid:128)cation
of their current protocol. We refer to it as IDB, ID-based bucke-
tization, as it uses the hash pre(cid:128)x of only the user identi(cid:128)er for
bucketization (instead of the hash pre(cid:128)x of the username-password
pair, as currently used by GPC). Not having password information
in the bucket identi(cid:128)er hides the user’s password perfectly from an
a(cid:138)acker who obtains the client queries (assuming that passwords
are independent of usernames). We implement IDB and show that
the average bucket size in this se(cid:138)ing for a hash pre(cid:128)x of 16 bits
is similar to that of GPC (average 16,122 entries per bucket, which
leads to a bandwidth of 1,066 KB).
Contributions. In summary, the main contributions of this paper
are the following:
• We provide a formalization of C3 protocols and detail the
security goals for such services.
• We discuss various threat models for C3 services, and ana-
lyze the security of two widely deployed C3 protocols. We
show that an a(cid:138)acker that learns the queries from a client
can severely damage the security of the client’s passwords,
should they also know the client’s username.
• We give a new C3 protocol (FSB) for checking only leaked
passwords that utilizes knowledge of the human-chosen
password distribution to reduce leakage.
• We give a new C3 protocol for checking leaked username-
password pairs (IDB) that bucketizes using only usernames.
• We analyze the performance and security of both new C3
protocols to show feasibility in practice.
We will release as public, open source code our server and client
implementations of FSB and IDB.
Figure 1: A C3 service allows a client to ascertain whether
a username and password appear in public breaches known
to the service.
2 OVERVIEW
We investigate approaches to checking credentials present in pre-
vious breaches. Several third party services provide credential
checking, enabling users and companies to mitigate credential stu(cid:130)-
ing and credential tweaking a(cid:138)acks [24, 40, 47] , an increasingly
daunting problem for account security.
To date, such C3 services have not received in-depth security
analyses. We start by describing the architecture of such services,
and then we detail relevant threat models.
C3 settings. We provide a diagrammatic summary of the abstract
architecture of C3 services in Figure 1. A C3 server has access to
a breach database ˜S. We can think of ˜S as a set of size N , which
consists of either a set of passwords {w1, . . . , wN } or username-
password pairs {(u1, w1), . . . ,(uN , wN )}. (cid:140)is corresponds to two
types of C3 services — password-only C3 services and username-
password C3 services. For example, HIBP [6] is a password-only
C3 service,1 and Google’s service GPC [44] is an example of a
username-password C3 service.
A client has as input a credential s = (u, w) and wants to deter-
mine if s is at risk due to exposure. (cid:140)e client and server therefore
engage in a set membership protocol to determine if s ∈ ˜S. Here,
clients can be users themselves (querying the C3 service using, say,
a browser extension), or other web services can query the C3 ser-
vice on behalf of their users. Clients may make multiple queries to
the C3 service, though the number of queries might be rate limited.
(cid:140)e ubiquity of breaches means that, nowadays, the breach data-
base ˜S will be quite large. A recently leaked compilation of previous
breached data contains 1.4 billion username password pairs [21].
(cid:140)e HIBP database has 501 million unique passwords [6]. Google’s
blog speci(cid:128)es that there are 4 billion username-password pairs in
their database of leaked credentials [44].
C3 protocols should be able to scale to handle set membership
requests for these huge datasets for millions of requests a day. HIBP
reported serving around 600,000 requests per day on average [7].
(cid:140)e design of a C3 protocol should therefore not be expensive for
the server. Some clients may have limited computational power,
so the C3 protocol should also not be expensive on the client-side.
(cid:140)e number of network round trips required must be low, and we
restrict a(cid:138)ention to protocols that can be completed with a single
1HIBP also allows checking if a user identi(cid:128)er (email) is leaked with a data breach. We
focus on password-only and username-password C3 services.
Login RequestLeaksC3 ServerUserWebsite𝑢,𝑤𝑢,𝑤𝑢,𝑤HTTPS request. Finally, we will want to minimize bandwidth usage.
(cid:135)reat model. We consider the security of C3 protocols relative
to two distinct threat models: (1) a malicious client that wants to
learn a di(cid:130)erent user’s password; and (2) an honest-but-curious C3
server that aims to learn the password corresponding to a C3 query.
We discuss each in turn.
A malicious client may want to use the C3 server to discover
another user’s password. (cid:140)e malicious client may know the tar-
get’s username and has the ability to query the C3 server. (cid:140)e C3
server’s database ˜S should therefore be considered con(cid:128)dential,
and our security goal here is that each query to the C3 server can
at most reveal whether a particular w or (u, w) is found within
the breach database, for password-only and username-password
services, respectively. Without some way of authenticating own-
ership of usernames, this seems the best possible way to limit
knowledge gained from queries. We note that most breach data
is in fact publicly available, so we should assume that dedicated
adversaries in this threat model can (cid:128)nd (a substantial fraction of)
any C3 service’s dataset. For such adversaries, there is li(cid:138)le value
in a(cid:138)empting to exploit the C3 service via queries. Nevertheless,
deployments should rate-limit clients via IP-address-based query
thro(cid:138)ling as well as via slow-to-compute hash functions such as
Argon2 [2].
(cid:140)e trickier threat model to handle is (2), and this will consume
most of our a(cid:138)ention in this work. Here the C3 server may be
compromised or otherwise malicious, and it a(cid:138)empts to exploit
a client’s queries to help it learn that client’s password for some
other target website. We assume the adversary can submit pass-
word guesses to the target website, and that it knows the client’s
username. We refer to this se(cid:138)ing as a known-username a(cid:138)ack
(KUA). We conservatively2 assume the adversary has access to the
full breach dataset, and thus can take advantage of both leaked
passwords available in the breach dataset and information leaked
about the client’s password from C3 queries. Looking ahead, for
our protocols, the information potentially leaked from C3 queries
is the bucket identi(cid:128)er.
It is context-dependent whether a compromised C3 server will
be able to mount KUAs. For example, in deployments where a web
server issues queries on behalf of their users, queries associated to
many usernames may be intermingled. In some cases, however, an
adversary may be able to link usernames to queries by observing
meta-data corresponding to a query (e.g., IP address of the querying
user or the timing of a request). One can imagine cross-site scripting
a(cid:138)acks that somehow trigger requests to the C3 service, or the
adversary might send tracking emails to leaked email addresses
in order to infer an IP address associated to a username [27]. We
therefore conservatively assume the malicious server’s ability to
know the correct username for a query.
In our KUA model, we focus on online a(cid:138)ack se(cid:138)ings, where
the a(cid:138)acker tries to impersonate the target user by making remote
login a(cid:138)empts at another web service, using guessed passwords.
(cid:140)ese are easy to launch and are one of the most prevalent forms
of a(cid:138)acks [16, 28]. However, in an online se(cid:138)ing, the web service