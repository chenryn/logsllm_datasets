title:QuickSilver: Efficient and Affordable Zero-Knowledge Proofs for Circuits
and Polynomials over Any Field
author:Kang Yang and
Pratik Sarkar and
Chenkai Weng and
Xiao Wang
QuickSilver: Efficient and Affordable Zero-Knowledge Proofs
for Circuits and Polynomials over Any Field
Kang Yang
Beijing, China
PI:EMAIL
Chenkai Weng
State Key Laboratory of Cryptology
Northwestern University
Evanston, USA
PI:EMAIL
Pratik Sarkar
Boston University
Boston, USA
PI:EMAIL
Xiao Wang∗
Northwestern University
Evanston, USA
PI:EMAIL
ABSTRACT
Zero-knowledge (ZK) proofs with an optimal memory footprint
have attracted a lot of attention, because such protocols can easily
prove very large computation with a small memory requirement.
Such ZK protocol only needs O(M) memory for both parties, where
M is the memory required to verify the statement in the clear. In
this paper, we propose several new constant-round ZK protocols
in this setting, which improve the concrete efficiency and, at the
same time, enable sublinear amortized communication for circuits
with some notion of relaxed uniformity.
(1) In the circuit-based model, where the computation is repre-
sented as a circuit over a field, our ZK protocol achieves a com-
munication complexity of 1 field element per non-linear gate
for any field size while keeping the computation very cheap.
We implemented our protocol, which shows extremely high effi-
ciency and affordability. Compared to the previous best-known
implementation, we achieve 6×–7× improvement in computa-
tion and 3×–7× improvement in communication. When running
on intro-level AWS instances, our protocol only needs one US
dollar to prove one trillion AND gates (or 2.5 US dollars for one
trillion multiplication gates over a 61-bit field).
(2) In the setting where part of the computation can be represented
as a set of polynomials with a “degree-separated” format, we can
achieve communication sublinear to the polynomial size: the
communication only depends on the total number of distinct
variables in all the polynomials and the highest degree of all
polynomials, independent of the number of multiplications to
compute all polynomials.
Using the improved ZK protocol, we can prove matrix multi-
plication with communication proportional to the input size,
rather than the number of multiplications. Proving the multipli-
cation of two 1024 × 1024 matrices, our implementation, with
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484556
one thread and 1 GB of memory, only needs 10 seconds and
communicates 25 MB.
CCS CONCEPTS
• Theory of computation → Cryptographic protocols.
KEYWORDS
Zero-knowledge proofs
ACM Reference Format:
Kang Yang, Pratik Sarkar, Chenkai Weng, and Xiao Wang∗. 2021. Quick-
Silver: Efficient and Affordable Zero-Knowledge Proofs for Circuits and
Polynomials over Any Field. In Proceedings of the 2021 ACM SIGSAC Confer-
ence on Computer and Communications Security (CCS ’21), November 15–19,
2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 16 pages.
https://doi.org/10.1145/3460120.3484556
1 INTRODUCTION
Zero-knowledge (ZK) proofs allow a prover in possession of a
witness w to prove to a verifier that C(w) = 1 for some public circuit
C. Until recently, most works focus on non-interactive ZK proofs
with a small proof size (e.g., [1, 7, 8, 10, 13, 19, 20, 29, 42, 45, 52] and
references therein), most of which suffer from a scalability problem.
Specifically, to prove a circuit with t gates, these protocols require
memory of size proportional to t. As a result, the memory constraint
quickly becomes the bottleneck on the scale of computation that
can be efficiently processed by a ZK proof.
Recently, ZK protocols with essentially unlimited scalability
gained a lot of attention. Here, the protocol should use the mini-
mal amount of memory possible, which is the memory required to
evaluate the circuit in the clear. For example, ZK protocols based
on privacy-free garbled circuits [27, 31, 33] satisfy this require-
ment and are also concretely efficient. However, due to the lower
bound on garbled circuits, the best communication complexity
one can hope for is κ bits per AND gate in the gate-by-gate par-
adigm, where κ is the computational security parameter. Some
ZK proofs [23, 28, 34] using the “MPC-in-the-head” paradigm [32]
are also streamable, thus achieving a small memory overhead, but
the overall computation and communication complexities are still
high. For zero-knowledge succinct non-interactive arguments of
∗Corresponding author
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2986Protocol
Wolverine [48]
Mac′n′Cheese [3]
LPZK [25]
QuickSilver
Speed
1.25 M/sec
Boolean Circuit
Size
7
−
−
1
7.7 M/sec
−
−
Speed
Arithmetic Circuit
Size
4
3
1
1
0.66 M/sec
0.4 M/sec
4.8 M/sec
−
Table 1: Comparing our work (QuickSilver) with prior related
work. Size represents the number of field elements to send for each
multiplication gate, which is also the number of (s)VOLEs. Speed
represents the number of multiplication gates that can be executed
per second with unlimited bandwidth and a single thread.
knowledge (zk-SNARKs), the only exception is to use recursive com-
position [11]. However, compared to the state-of-the-art memory-
heavy zk-SNARKs [42, 43], those using recursive composition are
still orders of magnitude slower [12, 24].
A recent promising line of work to build constant-round ZK
proofs based on (subfield) Vector Oblivious Linear Evaluation [16–
18, 41, 49], or (s)VOLE for short, provides a new direction to accom-
plish this goal. Weng, Yang, Katz and Wang [48] proposed a ZK
protocol (Wolverine) that can prove circuits over any field with the
communication complexity roughly (3ρ/log t +1) field elements per
multiplication gate where t is the circuit size and ρ is the statistical
security parameter; in the case of large fields1, the communication
can be reduced to 4 field elements (or 2 field elements with much
higher computational cost) per multiplication gate. Another recent
work by Baum, Malozemoff, Rosen and Scholl (Mac′n′Cheese) [4]
proposed a similar ZK protocol for large fields with the communica-
tion cost of 3 field elements per multiplication gate. Line-Point ZK
(LPZK) by Dittmer, Ishai, and Ostrovsky [25] achieves seemingly
optimal communication cost (i.e., one field element per multiplica-
tion gate) in the gate-by-gate paradigm, but their protocol is only
for large fields and has not been studied for implementation yet.
Challenges. The recent line of work has significantly improved
the efficiency of ZK proofs with essentially unlimited scalability
but there are still some challenges.
(1) LPZK is great in communication but it only supports large fields.
For small fields (e.g., binary fields), the best known ZK protocol
Wolverine is still based on the cut-and-choose technique and
thus incurs a high overhead.
(2) All of the above memory-efficient protocols require commu-
nication linear to the number of multiplication gates in the
circuits (except for zk-SNARKs with recursive composition).
One would naturally desire concretely efficient protocols with
the same memory efficiency while only requiring sublinear
communication cost. Mac′n′Cheese partially addressed this
issue by incorporating the “stacking” technique [31], but its
applicability is rather limited to circuits with many branches.
1.1 Our Contributions
In this paper, we present a set of new constant-round ZK protocols
that achieve unprecedented practical performance while being able
1In this paper, we say a “large field” meaning that the field size is at least 2ρ .
to scale to billions and even trillions of gates without any mem-
ory issue. Our circuit-based ZK protocol only needs to send one
field element per multiplication gate (and free for addition gates)
for any field size with very high computational efficiency. Our
polynomial-based ZK protocol can further reduce the communica-
tion for commonly encountered statements.
Optimally efficient ZK proof for any field in the gate-by-gate
paradigm. As summarized in Table 1, the recent LPZK protocol
achieves the best communication cost in the gate-by-gate paradigm
for large fields. However, when it comes to small fields like Boolean
circuits, the cost of the best-known protocol [48] is still much high
due to the usage of cut-and-choose. Our ZK protocol is developed
on top of Wolverine and LPZK to achieve the best of both protocols:
it needs to send one field element and a single sVOLE correlation
per non-linear gate for any field (including the case of Boolean
circuits). See Section 3.1 for a detailed explanation of the protocol.
Our implementation can prove Boolean circuits at a speed of
7.7 million AND gates per second (with one thread) and can prove
arithmetic circuits over a 61-bit field at a speed of 4.8 million mul-
tiplication gates per second (with one thread). The performance
could be doubled using four threads (See Section 6).
Efficient ZK proof beyond the gate-by-gate paradigm. The
above ZK protocol, which only sends one field element per non-
linear gate, reminds us of the story in garbled circuits. After a
long history of optimizations [6, 35, 36, 39], the half-gates garbling
scheme [50] achieves free for XOR gates and 2κ-bit communication
per AND gate, which is also proven to be optimal when the garbling
algorithm takes one gate as input at a time (a.k.a., the gate-by-
gate paradigm). The lower bound soon spawned new researches
to bypass it by garbling not in the gate-by-gate framework. For
example, Ball et al. [2] observed that garbling Boolean formulas as
a whole can further improve communication efficiency.
Our optimized protocol puts us in a similar situation, where the
gate-by-gate paradigm limits further improvement. Inspired by the
above successful story in garbling, we study the case of proving
polynomial satisfiability as a whole. As we discuss in Section 3.2,
we find that it is possible to prove a set of degree-d polynomials on
totally n distinct variables with communication cost of n + d field
elements, independent of the number of multiplications to compute
all the polynomials. Here, we require that all the polynomials are
represented in a “degree-separated” format, meaning that any mul-
h=0 fh
such that all terms in fh have degree exactly h. The computation is
highly efficient, and is linear to the total number of terms in all the
polynomials and quadratic to degree d.
tivariable polynomial f with a degree d is represented asd
This ZK proof for polynomial satisfiability has a direct applica-
tion to prove knowledge of a solution of the short-integer-solution
(SIS) problem, where verifying that all secret inputs are bounded in
a small range can be viewed as low-degree polynomials. Our ZK pro-
tocol could prove knowledge of a solution of the SIS problem with
8× improvement in proof size and 110× improvement in execution
time, compared with the state-of-the-art implementation [48].
Sublinear ZK proof for circuits with relaxed uniformity. The
above polynomial-based ZK protocol is sublinear when we compare
the communication cost with the number of multiplications in the
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2987Functionality FZK
Upon
circuit
Input. Upon receiving (input, id , w) from a prover P and (input, id)
from a verifier V, with id a fresh identifier, store (id , w).
receiving
satisfiability.
Prove
(prove, C, id1, . . . , idn)
from P and (verify, C, id1, . . . , idn)
from V where id1, . . . , idn are present in memory, retrieve
(idi , wi) for i ∈ [n] and define a vector w = (w1, . . . , wn). Send
true to V if C(w) = 1 and false otherwise.
Prove polynomial satisfiability. Upon receiving (prove, {fi }i∈[t],
id1, . . . , idn) from P and (verify, {fi }i∈[t], id1, . . . , idn) from V
where id1, . . . , idn are present in memory, retrieve (idi , wi) for
i ∈ [n] and define a vector w = (w1, . . . , wn). Then send true to V
if fi(w) = 0 for all i ∈ [t] and false to V otherwise.
Figure 1: Zero-knowledge functionality for circuit and poly-
nomial satisfiability.
polynomial set. Using this result, we can improve the efficiency of
many applications and reach amortized communication sublinear
to the circuit size as long as the circuit satisfies some weak no-
tion of uniformity. More specifically, as long as the circuit contains
many sub-circuits such that their polynomial representations are
all bounded by some degree d, our technique can reduce the com-
munication cost for proving these sub-circuits. For example, we can
prove matrix multiplication in communication complexity of O(n
2)
where two matrices are of dimension n × n, and a gate-by-gate pro-
tocol needs O(n
3) communication. We discuss more complicated
examples, as well as the general applicability in Section 3.3, which
opens a new space of improvements for real-world applications.
For matrix multiplication, our implementation can prove an
instance with n = 1024, which contains about one billion multipli-
cations over a 61-bit field, in about 25 MB of communication and
10 seconds of execution time using just 1 GB of memory. This is
35× faster than the prior best-known implementation [52], which
needs 148 GB of memory to accomplish this task.
More discussion on related work. This work focuses on design-
ing concretely efficient ZK protocols with a small memory (com-
pared with the statement size). As a result, our protocol is interactive
and has a relatively large proof size. Nevertheless, our ZK protocol
provides a fast prover time. On the other hand, a lot of prior works
mentioned earlier achieve a smaller proof size, and could be made
non-interactive and publicly verifiable; but these ZK protocols have
a large memory consumption linear to the circuit size and a slower
prover time. We view the two types of ZK protocols as comple-
ment to one another: our protocol is more suitable to prove large
statements to a small number of verifiers, while prior works are
more suitable for proving medium-sized statements to potentially
unlimited number of verifiers. More recently, an updated version of
Mac′n′Cheese reduced the communication cost to 1 and support
boolean circuits as well; their concrete efficiency is still worse than