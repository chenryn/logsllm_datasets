1
⼀个图标伪装上线⽊⻢分析
事件背景
分析经过
并不简单
娱乐⼀下
⽊⻢IOC
加⼊社区
某重要活动结束前⼀天，安全的⽭与盾星球内部交流群⾥有位蓝队兄弟扔出来三个公鸡队样本让群⾥还
在的师傅帮忙分析⼀下，由此便展开了下⾯的分析经过。
⾸先拿到样本之后，⽤file命令做简单识别，file能识别的⽂件格式还是很多的。但这三个样本不巧，被公
鸡队做了⼿脚，已经混淆了⽂件头。
⽤010Editor打开⽂件，简单查看了下，发现⽂件当中存在明⽂字符串，整体来说此时样本⽐较奇怪。 
事件背景
分析经过
2
这时候坤佬（wonderkun）在群⾥来了句，看出来⽂件混淆的⽅式了，⽤0xEE异或即可得到混淆前的原
⽂件。具体原理坤佬解释这是统计学：不知道异或的密钥是⼏个字节，所以要统计单字节，双字节和四
字节。 由于pe⽂件中出现最多的是 0x00 ，所以按照单字节统计，出现次数最多的就密钥，双字节，四
字节以此类推。   
看⼀下此时⽂件的头部的分布，的确0xEE出现次数最多，坤佬太强了，学到了。 
3
按照坤佬的统计，并且结合⽂件后半部分存在明⽂，可得知只是头部数据被0xEE异或混淆，⼤概在
010Editor中查看数据后，发现前0x400字节存在问题，所以只需要对前0x400字节做0xEE异或即可。 
4
去除头部的混淆之后，1⽂件为EXE（console）程序，2⽂件为DLL，3⽂件依然是未知格式。 
并且1.exe为微软签名的程序，结合2⽂件为DLL，3⽂件未知，以及常⻅的恶意软件loader加载⽅式，这
⾥猜测2.dll为恶意DLL程序，通过运⾏1.exe实现⽩加⿊DLL劫持，再加载运⾏3样本中实际的后⻔指令。
⼜通过进⼀步分析，1.exe为MpRunCmd.exe，2.dll应该为mpclient.dll。 
5
所以这⾥的mpclient.dll应该就是恶意软件的loader所在模块。IDA中直接载⼊，分析后发现，所有导出函
数都会调⽤loader的加载函数，这样做可以保证loader⼀定会被执⾏。 
6
接着对loader函数进⾏分析。⾸先是调⽤ShowWindow隐藏MpCmdRun.exe进程的窗⼝。 
然后是获取程序的⽂件名，不过这个Filename始终没有被⽤到，猜测应该是之前从⼀些功能函数⾥copy
的代码，没有删除不必要的函数调⽤。
最后是loader的主要函数，以字符串"kuailele"为解密key解密⽂件当中的后⻔指令，并加载。 
7
跟进函数sub_180001870，⾸先是对明⽂字符串进⾏加密、解密，最后还是明⽂字符串，这⾥搞不懂作
者想⼲啥。
此时得到的v2依然为宽字符串"C:\ProgramData\TU.IO"。接下来调⽤sub_180001710并传⼊v2，经过
调试分析，作者⾃实现了GetProcAddress函数，采⽤计算字符串Hash并⽐较的⽅式，规避调⽤系统
GetProcAddress，以及隐藏导⼊表函数的敏感特征。函数sub_180001710的实际作⽤是读取传⼊⽂件名
也就是C:\ProgramData\TU.IO到Func程序全局变量当中。 
8
接下来调⽤sub_180001680函数对读取的⽂件内容进⾏解码。 
跟进函数sub_180001680，发现函数第⼀个参数是需要解码的buffer，第⼆个参数为buffer的⻓度，第三
个参数也就是a1（这⾥是"kuailele"）为key，第四个参数为key的⻓度，并且以key的⻓度-1为循环⻓
度，对buffer的数据进⾏异或解码。这⾥存在⼀个问题，key的最后⼀个字节没有被⽤到，猜测可能是作
者编写程序循环⻓度判断有些问题，这⾥正常应该以key的全部⻓度为循环异或解码。 
9
接下来动态获取函数VirtualProtect并调⽤，修改Func指向地址的内存属性为64，也就是
PAGE_EXECUTE_READWRITE。 
10
最后通过EnumObjects回调执⾏Func指向内存的指令。 
为了验证分析的结果是否正确，这⾥笔者⽤星球专版CS IceRiver⽣成⼀个64位的beacon.bin⽂件，并
以"kuailele"为key通过循环异或对beacon.bin进⾏编码，将编码后的⽂件复制
到"C:\ProgramData\TU.IO"⽂件当中，然后双击执⾏1.exe，观察IceRiver是否收到beacon权限。 
11
可以看到成功接收到了beacon权限，且所在进程为1.exe，这说明分析是正确的。 
上⾯分析的是⽩加⿊loader的处理过程，奇怪的问题是即使对样本3⽂件进⾏循环异或编码，获取到的⽂
件依然是未知格式，并且在010Editor当中也看不到任何明⽂数据，这说明样本3应该还有其他混淆的存
在。群⾥那位蓝队的师傅说，这三个⽂件是通过钓⻥⽊⻢反向溯源到的远程⽂件，也就是说很可能在钓
⻥⽊⻢当中存在对样本3的解码过程。 
并不简单
12
⾸先按照群⾥师傅提供的信息，这三个样本是在http://112.74.109.76:5559/下载到的。 
确定是回连到CobaltStrike监听器。且回连地址为https://service-baw5g4iz-
1309608249.bj.apigw.tencentcs.com，攻击者通过图标伪装的⽅式，诱导⽬标⽤户点击诱饵.exe上线。 
由于已经确定是CobaltStrike C2，所以这⾥先决定对teamserver进⾏反制，利⽤CVE-2021-36798尝试
DOS teamserver（可能没有什么效果，但总要尝试⼀下，尽⼈事听天命）。 
接下来对钓⻥⽊⻢.exe进⾏分析。IDA载⼊，发现在⼊⼝函数的第⼀个调⽤的函数，被做了⼿脚，突⺎的
出现⼀条直接跳转到text段起始地址的指令。 
13
并随着对text开始的指令进⾏分析，“诡异”也越来越多。 
14