User: 请回答以下安全问题安全的方式发送文件到服务器，存储，然后检索我今天正在寻找想法。
问题是：
敏感文件通过REST（当然是通过SSL）发送到第三方服务器。在它们到达服务器之前，我无法以编程方式触摸它们。这些文件存储在那里，直到用户通过SFTP下载并从服务器上删除它们。每个文件将在此服务器上驻留大约一周。
目标：
在每个步骤中保护文件，直到它们位于用户的计算机上。
我的计划：
因为在文件到达第三方服务器之前，我无法对其进行加密，所以我对安全性的唯一希望是SSL连接。我想确保只有我的文件保存在服务器上，所以我想我应该在文件的同时发送一个密码。什么比静态密码更好？我想使用唯一的密码，但我不确定从哪里开始。
当一个文件被下载到服务器上时，我将把流复制到临时内存中，并用RSA加密数据。我可以把私钥保存在用户的机器上，只把公钥存储在服务器上。（请注意，服务器没有硬件加密。）当用户通过SFTP连接时，他可以下载加密的文件，只有在离线后才能在自己的机器上解密。有没有更好的方法来保存文件，直到用户可以访问它们？
任何其他建议都将不胜感激！
使现代化
经过修改和反思，我发现这个解决方案是最合适的，因为我对启动服务器的控制有限：
https://stackoverflow.com/a/19758235/1008395
总之，通过SSL将文件从A发送到B。当文件到达B时，使用随机生成的密钥进行AES-256加密。使用RSA 2048（公钥）加密该随机密钥。将所有内容保存在服务器上，直到可以下载为止。一旦文件在用户的计算机上，使用RSA的私钥（仅离线存储）解密随机密钥，然后使用该密钥解密文件上的AES加密。混合对称/非对称加密的原因是我想要公私密钥格式，但RSA将数据大小限制为256位（对于2048；对于1024，它仅为128位）。因此，我们分别对数据和密钥进行加密，然后发送两者。是的，这导致了3个密钥：每次随机生成一个，一个公钥和一个私钥（永远看不到互联网的光）。
Nihvel在发送加密的随机密钥并将其保存在服务器A上之前对文件进行了加密，从而以更高的安全性解决了这一问题。因此，两者从未在同一服务器上。谢谢你的帮助！

Assistant: 我已经在做完全相同的事情，但我的加密竞争不同。我会告诉你我的观点。
您有服务器A。
第三方服务主机服务器B。
用户（n）是用户[n]。
你将创建一个随机密钥，用这个密钥加密你的文件X。
您将使用您的公钥加密随机密钥。
您将创建一个HASH，将加密文件与随机密钥链接起来。
您将仅使用HTTPS将加密文件X从A发送到B（当然，使用第二个证书）。
B将存储您的加密，直到用户[n]将其与HASH文件一起下载。
用户[n]将通过webgui（为什么不）、登录后（为什么不..）以及上传HASH文件后到达您的服务器A，您的系统可以解密该文件并让用户下载。
当然，没有人会知道你的私钥，也没有人会得到公钥文件。
即使他们愿意，你也会在A中存储你用来加密文件的随机密钥。
这在很大程度上总结了我的想法，其中80%应用于我的环境中（剩下的20%是其他检查）。
当然还有一些工作要做，但甚至没有那么多。我在一天内完成了这个，但我甚至不太擅长。
编辑：
我最近完成了备份和加密postgresql数据库的脚本。
在这里，除了创建HASH之外，您将找到所需的一切。
至少加密/解密的部分是您可能想要的。
https://github.com/Nihvel/Backup-Scripts/blob/master/postgresql_database_backup