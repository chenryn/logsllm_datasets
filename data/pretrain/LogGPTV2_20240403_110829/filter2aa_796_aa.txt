1
WMCTF 2022 部分 WRITEUP
前⾔
WEB
subconverter
RCE?
⽂件写⼊
任意⽂件读取
构造quickjs脚本
RCE 链
RCE!
⼩插曲
easyjeecg
Java
ssrf
spark
bash延时"注⼊"
交互shell
6166lover
信息泄露
代码审计
cpython简单的沙箱逃逸
数据恢复?
k8s 容器逃逸
PWN
Ubuntu
MISC
Hacked_by_L1near
permessage-deﬂate
Checkin
2
作者:⽩帽酱 
这次WMCTF拿了3个⼀⾎ 
题⽬设计⾮常有趣  其中还有⼏个0day  很多实际渗透遇到的问题也考虑到了 
题⽬给了⼀个开源的代理订阅转换器
是个C++的项⽬ 
拿到源码 ⾸先先寻找路由 查看鉴权逻辑 
前⾔
WEB 
subconverter 
3
/*
webServer.append_response("GET", "/", "text/plain", [](RESPONSE_CALLBACK_
ARGS) -> std::string
{
return "subconverter " VERSION " backend\n";
});
*/
webServer.append_response("GET", "/version", "text/plain", [](RESPONSE_CA
LLBACK_ARGS) -> std::string
    {
        return "subconverter " VERSION " backend\n";
    });
webServer.append_response("GET", "/refreshrules", "text/plain", [](RESPON
SE_CALLBACK_ARGS) -> std::string
    {
        if(global.accessToken.size())
        {
            std::string token = getUrlArg(request.argument, "token");
            if(token != global.accessToken)
            {
                response.status_code = 403;
                return "Forbidden\n";
            }
        }
        refreshRulesets(global.customRulesets, global.rulesetsContent);
        return "done\n";
    });
webServer.append_response("GET", "/readconf", "text/plain", [](RESPONSE_C
ALLBACK_ARGS) -> std::string
    {
        if(global.accessToken.size())
        {
            std::string token = getUrlArg(request.argument, "token");
            if(token != global.accessToken)
            {
                response.status_code = 403;
                return "Forbidden\n";
            }
        }
        readConf();
        if(!global.updateRulesetOnRequest)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
src/main.cpp
C++
复制代码
4
            refreshRulesets(global.customRulesets, global.rulesetsContent
);
        return "done\n";
    });
webServer.append_response("POST", "/updateconf", "text/plain", [](RESPONS
E_CALLBACK_ARGS) -> std::string
    {
        if(global.accessToken.size())
        {
            std::string token = getUrlArg(request.argument, "token");
            if(token != global.accessToken)
            {
                response.status_code = 403;
                return "Forbidden\n";
            }
        }
        std::string type = getUrlArg(request.argument, "type");
        if(type == "form")
            fileWrite(global.prefPath, getFormData(request.postdata), tru
e);
        else if(type == "direct")
            fileWrite(global.prefPath, request.postdata, true);
        else
        {
            response.status_code = 501;
            return "Not Implemented\n";
        }
        readConf();
        if(!global.updateRulesetOnRequest)
            refreshRulesets(global.customRulesets, global.rulesetsContent
);
        return "done\n";
    });
webServer.append_response("GET", "/flushcache", "text/plain", [](RESPONSE
_CALLBACK_ARGS) -> std::string
    {
        if(getUrlArg(request.argument, "token") != global.accessToken)
        {
            response.status_code = 403;
            return "Forbidden";
        }
        flushCache();
        return "done";
    });
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
5
显然  token参数 ⽤于部分路由的鉴权 
其中 /version 路由可以获取当前版本 访问之 
发现题⽬中给出的是 f9713b4分⽀版本的代码 
webServer.append_response("GET", "/sub", "text/plain;charset=utf-8", subc
onverter);
webServer.append_response("GET", "/sub2clashr", "text/plain;charset=utf-
8", simpleToClashR);
webServer.append_response("GET", "/surge2clash", "text/plain;charset=utf-
8", surgeConfToClash);
webServer.append_response("GET", "/getruleset", "text/plain;charset=utf-
8", getRuleset);
webServer.append_response("GET", "/getprofile", "text/plain;charset=utf-
8", getProfile);
webServer.append_response("GET", "/qx-script", "text/plain;charset=utf-8"
, getScript);
webServer.append_response("GET", "/qx-rewrite", "text/plain;charset=utf-
8", getRewriteRemote);
webServer.append_response("GET", "/render", "text/plain;charset=utf-8", r
enderTemplate);
webServer.append_response("GET", "/convert", "text/plain;charset=utf-8", 
getConvertedRuleset);
if(!global.APIMode)
{
webServer.append_response("GET", "/get", "text/plain;charset=utf-8", [](R
ESPONSE_CALLBACK_ARGS) -> std::string
{
std::string url = urlDecode(getUrlArg(request.argument, "url"));
return webGet(url, "");
});
webServer.append_response("GET", "/getlocal", "text/plain;charset=utf-8",
 [](RESPONSE_CALLBACK_ARGS) -> std::string
{
return fileGet(urlDecode(getUrlArg(request.argument, "path")));
});
}
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
6
是⼀个未release的最新版本  看来是个0day 
重新pull代码 开始审计最新版本 
项⽬内置了⼀个脚本引擎quickjs 
追踪调⽤ 发现脚本引擎在profile 转换时调⽤且需要鉴权 
RCE? 
引擎初始化 包含库
7
URL满⾜script: 开头即可进⼊分⽀  
其中读取脚本时使⽤了fileGet函数来读取⽂件 只能读取普通⽂件 
该点的利⽤条件: 鉴权 + 写⼊⽂件 
继续查看其他eval调⽤ 
在定时任务中同样也使⽤了这个脚本引擎
这⾥与之前不同的是此处使⽤的是fetchFile函数 
8
定时任务的脚本路径使⽤了配置⽂件中的配置项
利⽤条件: 修改配置⽂件 
这个函数⽀持 data: http: https: ⽂件读取
9
webGet下⽅的代码引起了我的注意 
这个函数实现了⼀个简单的缓存功能⽤于缓存远程订阅
在缓存过程的中写⼊了⽂件
只有cache_ttl>0时请求才会被缓存 
⼀番搜索过后发现了⼀个添加ttl的缓存路由 
访问  /convert?url=http://1.1.1.1:8000/1.js 即可发起⼀个缓存请求 
convert路由调⽤了fetchFile函数 获取⽂件内容 这个函数可以读取本地⽂件 
convert读取⽂件后只对⽂件进⾏了简单的正则替换 所以,我们可以利⽤这个路由读取任意⽂件. 
⽂件写⼊
任意⽂件读取
10
成功读取当前⽬录下的配置⽂件  (其实这个项⽬还有⼀堆⽂件读取点 x) 
鉴权token到⼿ 
在官⽅⽂档中查找代码中引⼊的库所对应的函数列表
很快在std库中发现了⼀个常⻅的命令执⾏函数popen 
构造quickjs脚本 
11
直接构造⼀个反弹shell 
到这⾥可以整理出最简单的两条RCE链: 
修改配置⽂件->添加计划任务->计划任务执⾏脚本 
写⼊⽂件->转换profile->执⾏本地脚本 
修改配置⽂件的路由是POST⽅法 
后来发现题⽬使⽤的中间件代理只允许GET请求,还限制了传⼊参数.所以第⼀条只能放弃. 