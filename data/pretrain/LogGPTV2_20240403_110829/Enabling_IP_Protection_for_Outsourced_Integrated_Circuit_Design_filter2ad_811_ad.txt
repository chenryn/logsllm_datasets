2.2
4.2
15.8
18.9
21.6
26.9
t
to+ti
Speedup
6.3 ×
7.1 ×
4.6 ×
5.0 ×
4.8 ×
4.5 ×
leon3mp
netcard
t(ks)
b18
b19
Benchmark
#Vb Baseline
Name
|Vb|
0.6K
0.5K
2.4K
3.8K
3.3K
1.5K
14
30
73
95
104
120
leon2
leon3
that the saving is slightly smaller than the public ratio due
to the overhead of other operations in Integrate such as the
vertex index recovering. As mentioned in Section 4.6, if the
critical ratio increases, CS will process less non-critical data.
Hence, the saving gained from CS will decrease and the lo-
cal cost will increase linearly in the total size of critical IP
blocks. As a result, our system eﬀectiveness will be reduced
if an IC contains a large portion of critical design data.
Compute introduces the computational overhead compar-
ing to PERT due to the splitting of sequential computation
for privacy concerns.
In Table 2, we evaluate the overall
time cost of our system, which is equal to the summation of
Integrate time and the Compute time ti + m ∗ to, where m is
100, the number of Compute instances in our setting. From
Algorithm 1, the complexity of pair-wised graph traversal
in Compute is O(N|Vb|(|Vo| + |Eo|)). Therefore, when the
size of outsourced timing graph and the number of boundary
vertices go large, the overhead will increase. In this exper-
iment, the total time is roughly 10 times than the baseline
time, but such overhead can be amortized due to the parallel
simulations across multiple instances.
As mentioned, each simulation in Compute is independent,
executing it in a parallel and scalable manner leads to faster
the response time of CS to generate Gr, and improves the
system response time for overall timing analysis, where sys-
tem response time is equal to the time interval of running
timing analysis at both LS and CS ti + to. Table 2 also
presents our system response time speedup from the ben-
eﬁts of parallel Compute. The system response time under
the setting of 100 Compute instances is average 5 times faster
than the baseline. Such speedup can be further maximized
on the scalable cloud by using more instances to perform
Compute. Note that we ignore the transmission time of in-
termediate results because 1GB data can be downloaded
for seconds by dedicated connections. Therefore, IC design
companies can rent more instances to shorten the cycle of
timing analysis and IC design, which will result in early
market share and huge proﬁle margin in IC industry. Given
that, the additional overhead of our design is tolerable.
Bandwidth cost and reduction evaluation. Figure 6
depicts the bandwidth cost between LS and CS. We focus
on analyzing the data transfer bandwidth from CS to LS. In
our experiment, ﬂoating-point number (4 bytes) is used to
represent an edge weight, so the bandwidth cost of interme-
diate results, i.e., the size of reduced timing graph Gr, are
equal to 4N|Er| for N simulations. The reduced bandwidth
cost is also reported after applying our heuristic reduction
algorithm, and the average saving ratio is 47%. Note that
the saving varies and it is design dependent. The more prime
paths that share vertices, the more saving will be obtained.
As mentioned, through high speed transmission, LS is ex-
pected to receive Gr in dozens of seconds or less. Hence,
such overhead can be deemed acceptable considering that
the large portion of workload is shifted to CS. Meantime,
the upload cost from LS to CS is negligible to the inter-
mediate results Gr, because only the outsourced graph and
related coeﬃcients of delay models will be uploaded to CS.
Price estimation on using real cloud infrastructure.
To show the economy of our proposed system in real world,
we estimate the price when using the services such as Ama-
zon EC2 and Amazon Direct Connect7. For the computing
instances, we select the Compute Optimized Instance with
32 cores, and the rent fee is $0.36 per hour. Assume that 4
instances with total over 100 cores are rent for 100 parallel
Compute running on HTCondor. The price paid for compu-
tation can be estimated. Amazon Direct Connect’s 1G port
speed is $0.30 per hour and the data transfer price is $0.03
per GB. In Figure 7, more computing resources are pur-
chased when the circuit size increases, while the charges on
bandwidth is within a certain range. The estimated charges
on using Amazon web services are only few US dollars which
is extremely economic. Thus, comparing the possible huge
proﬁt margin from shorting the design procedure, the in-
vestment on using cloud infrastructure is negligible.
7. RELATED WORKS
Integrated circuit IP protections. Many works on
hardware watermarking [1] and ﬁngerprint techniques [23]
are proposed to tag and track used/reused components within
several processes of IC design ﬂow. Hence, IC design compa-
nies can claim the authorship and prevent the illegal copies
by the manufactory. However, the above protection tech-
niques don’t provide proactive prevention of IP theft, such
as threats on functionality and structural design. They only
aﬀord a very low-level form of security which does not meet
our protection goal. To protect IC’s functionality, hard-
ware metering schemes [4] are designed to provide post-
fabrication control for IP design companies. Power, timing
measurements and analyses based techniques are proposed
to detect the malicious manufacturing such as Trojan cir-
cuitries [13]. Other works on hardware obfuscation adds
dummy gates as IC camouﬂaging to resist the reverse en-
gineering [21], but those camouﬂaging gates will introduce
overhead in IC design procedure on analysis and veriﬁcation.
Besides, such technique focuses on functionality protection,
and a part of netlist is disclosed.
7AWS Direct Connect: Private Network Connection to
AWS, online at http://aws.amazon.com/directconnect/
245Figure 6: Bandwidth cost with and without reduction
Figure 7: Estimated Charges on Amazon
Meanwhile, several works also leverage the idea of “split”
to ensure the conﬁdentiality of IC’s full knowledge. In [22],
the layout of IC is split into diﬀerent layers or multiple par-
titions to prevent an attacker from obtaining the gate-level
netlist and improve the security strength against reverse en-
gineering on I/O relationships. Such split manufacturing
for obfuscation is further investigated in [15]. The precise
notion of security is provided, and the computational abil-
ity of attackers and the complexity are thoroughly analyzed.
However, the above protections focus on the security in the
post-fabrication of IC design procedure at the IC foundry.
We note that our system focuses on the diﬀerent stage of
IC design procedure to provide a security guarantee for the
design automation outsourced at cloud.
Privacy-preserving computation outsourcing. There
are several works that utilize hybrid cloud to perform privacy-
preserving intensive computations. In [27], Sedic, a hybrid
cloud framework, is proposed to perform MapReduce tasks
involving sensitive data. It splits the data and computation
workload by security labels. The private data are uploaded
to private nodes and private tasks are assigned to private
nodes, while public data and tasks are outsourced to pub-
lic nodes. Our design shares the similar hybrid clouds alike
approaches for privacy-preserving computation. However,
Sedic is built on Hadoop - a MapReduce framework, which
focuses on how to auto-place the MapReduce tasks accord-
ing the data security label, while we focus on graph-based
computations.
In Sedic, the implicitly assumption is that
the computation on public data by default can be separated
from private data, which is no longer the case in our problem
and requires specialized new algorithm design.
Another related work based via hybrid clouds studies the
private human genomic sequence mappings in DNA analy-
sis [9]. The proposed approach splits the genomic sequence
mapping tasks into Seeding and Extension. Public cloud
runs Seeding which compares the hashed seeds to the hashed
reference previously computed and uploaded to cloud. Ex-
tension at private cloud checks the edit distance for every
matched pair derived from Seeding. Their design does not
split the input data. Instead, they prepossess the input for
security consideration and split the computation process.
Privacy-preserving graph-based computation. Re-
call that a circuit gate-level timing graph is generated as the
inputs for timing analysis and optimizations. Therefore, we
study privacy-preserving graph publishing and graph-based
computation. For privacy-preserving graph publishing, a
graph partition scheme called k-isomorphism partitions the
graph into k disjoint components [10]. And another graph
encryption scheme is designed for encrypting graph data
while allowing for neighbour and adjacency queries [8]. How-
ever, they don’t support computations over the encrypted or
partitioned graph traversal.
Several studies emphasize on privacy-preserving graph-
based computation.
In [12], the original graph is trans-
formed into a linked graph and a set of outsourced graphs
for the shortest path query. Their topologies are totally
diﬀerent with the original graph and the edge weights of
outsourced graph should be computed before being trans-
ferred to cloud. In [17], private information retrieval (PIR)
protocol is used as building blocks. Client poses a query
through a multiple round protocol on the encrypted connec-
tion to compute the shortest path. In [6], privacy-preserving
graph algorithms are realized by techniques like linear secret
sharing, threshold homomorphic encryption, or Boolean gar-
bled circuits. And their approach only support the matrix
presentation of graph which is more expensive than adja-
cent list presentation for sparse graphs, while circuit graph
is usually sparse. In a word, those works will introduce a
great amount of overhead on graph transformation, encryp-
tion, bandwidth due to over ten thousands of simulations in
timing analysis.
8. CONCLUSION
This paper proposes the ﬁrst privacy-preserving system to
outsource timing analysis on integrated circuits. Our design
is built on the observation from IP reuse - the modern IC
design methodology. Most of reused IP blocks are standard
units and universally shared. Therefore, our system protects
the critical design in a “data-splitting” way, which extracts
the critical data from the whole design and outsources the
non-critical data to cloud. To break the computation de-
pendency over critical and non-critical data, we design a
new algorithm to enable intensive computations over the
outsourced data at cloud, so cloud can generate intermedi-
ate results, which the local private server can integrate with
the critical design data for ﬁnalizing timing analysis results.
The suﬃcient evaluation demonstrates our design achieves
the security, eﬃciency, correctness, and economy.
In future, we will extend our system to other computations
that involve both public and sensitive data and complete
our system by adding the veriﬁcation module to verify the
computations from cloud.
b18 b19 leon3mp netcard leon2 leon3 Comm. 0.99 0.57 2.37 1.96 1.11 4.82 Rd. Comm. 0.72 0.36 1.31 1.25 0.57 0.56 0 1 2 3 4 5 Comm. cost (GB) Comm. Rd. Comm. b18 b19 leon3mp netcard leon2 leon3 I/O 0.32 0.31 0.34 0.34 0.32 0.32 Computing 0.06 0.09 0.70 0.90 1.10 1.30 0.00 0.20 0.40 0.60 0.80 1.00 1.20 1.40 1.60 1.80 Amazon cloud charges ($) I/O Computing 246Acknowledgment
This work was supported in part by Research Grants Coun-
cil of Hong Kong (Project No. CityU 138513), and by US
National Science Foundation under grant CNS-1262277.
9. REFERENCES
[1] A. B. Kahng et al. Constraint-based watermarking
techniques for design IP protection. IEEE TCAD,
20(10):1236–1252, 2001.
[2] A. Kuehlmann et al. Does IC design have a future in
the clouds. In Proc. of DAC, 2010.
[3] C. Albrecht. IWLS 2005 benchmarks. In International
Workshop for Logic Synthesis (IWLS): http://www.
iwls. org, 2005.
[4] Y. Alkabani and F. Koushanfar. Active hardware
metering for intellectual property protection and
security. In Proc. of USENIX Security, 2007.
[5] B. Bailey. How much of the chip does IP ﬁll. Online at
http://www.eetimes.com/author.asp?section_id=
36&doc_id=1287320, 2013.
[6] M. Blanton, A. Steele, and M. Alisagari.
Data-oblivious graph algorithms for secure
computation and outsourcing. In Proc. of AISACCS,
2013.
[7] C. Visweswariah et al. First-order incremental
block-based statistical timing analysis. IEEE TCAD,
25(10):2170–2180, 2006.
[8] M. Chase and S. Kamara. Structured encryption and
controlled disclosure. In Proc. of ASIACRYPT. 2010.
[9] Y. Chen, B. Peng, X. Wang, and H. Tang. Large-scale
privacy-preserving mapping of human genomic
sequences on hybrid clouds. In Proc. of NDSS, 2012.
[10] J. Cheng, A. W. Fu, and J. Liu. K-isomorphism:
privacy preserving network publication against
structural attacks. In Proc. of SIGMOD, 2010.
[11] C. Forzan and D. Pandini. Statistical static timing
analysis: A survey. The VLSI Journal on
INTEGRATION, 42(3):409–435, 2009.
[12] J. Gao, Y. Xu, R. Jin, J. Zhou, T. Wang, and D. Yang.
Neighborhood-privacy protected shortest distance
computing in cloud. In Proc. of SIGMOD, 2011.
[13] Y. L. Gwon, H. Kung, and D. Vlah. DISTROY:
Detecting integrated circuit Trojans with compressive
measurements. In Proc. of HotSec, 2011.
[14] A. Hamid. Design reuse without veriﬁcation reuse is
useless. Online at http:
//www.eetimes.com/document.asp?doc_id=1280157,
2012.
[15] F. Imeson, A. Emtenan, S. Garg, and M. V.
Tripunitara. Securing computer hardware using 3D
Integrated Circuit (IC) technology and split
manufacturing for obfuscation. In Proc. of USENIX
Security, 2013.
[16] M. Mitzenmacher and E. Upfal. Probability and
computing: Randomized algorithms and probabilistic
analysis. Cambridge University Press, 2005.
[17] K. Mouratidis and M. L. Yiu. Shortest path
computation with no information leakage. Proc. of the
VLDB Endowment, 5(8):692–703, 2012.
[18] Oﬃce of Technology Evaluation at Bureau of Industry
and Security in U.S. Department of Commerce. U.S.
Integrated circuit design and fabrication capability.
Online at http://www.bis.doc.gov, 2009.
[19] R. Saleh et al. System-on-chip: reuse and integration.
Proc. of the IEEE, 94(6):1050–1069, 2006.
[20] J. Rajendran, Y. Pino, O. Sinanoglu, and R. Karri.
Logic encryption: A fault analysis perspective. In
Proc. of DATE, 2012.
[21] J. Rajendran, M. Sam, O. Sinanoglu, and R. Karri.
Security analysis of integrated circuit camouﬂaging. In
Proc. of ACM CCS, 2013.
[22] J. Rajendran, O. Sinanoglu, and R. Karri. Is split
manufacturing secure? In Proc. of DATE, 2013.
[23] S. Maeda et al. An artiﬁcial ﬁngerprint device (AFD):
a study of identiﬁcation number applications utilizing
characteristics variation of polycrystalline silicon
TFTs. IEEE TED, 50(6):1451–1458, 2003.
[24] R. Torrance and D. James. The state-of-the-art in IC
reverse engineering. In Proc. of Cryptographic
Hardware and Embedded Systems. Springer, 2009.
[25] N. Westte and D. Harris. CMOS VLSI Design.
Pearson-Addison-Wesley, 2011.
[26] L. Yuan, G. Qu, L. Ghouti, and A. Bouridane. VLSI
design IP protection: solutions, new challenges, and
opportunities. In Proc. of IEEE NASA/ESA on
Adaptive Hardware and Systems, 2006.
[27] K. Zhang, X. Zhou, Y. Chen, X. Wang, and Y. Ruan.
Sedic: privacy-aware data intensive computing on
hybrid clouds. In Proc. of ACM CCS, 2011.
APPENDIX
PERT Algorithm. The Program Evaluation and Review
Technique (PERT) in Algorithm 4 is used to compute the
longest path delay for a given circuit timing graph.
Algorithm 4: PERT Critical Path Delay
Data: G(V, E): the circuit timing graph;
Result: D: the longest path delay.
begin
1
2
3
4
5
6
7
Topologically sorting G(V, E);
for each vi ∈ V do
ti ← 0;
for i ← 2 to |V | do
for each vj ∈ vi.adjin do
ti ← max{wj,i + tj, ti}
D ← t|V |
is deﬁned as: d = a0 +(cid:80)n
Delay model. The canonical ﬁrst-order delay model [7]
i=1 ai∆xi + an+1∆Ra, where d is
the gate delay, a0 is the mean of delay, ∆xi represents the
variation of Xi, i.e., a device parameter with correlations on
other parameters, ∆Ra is the variation of an independent
random variable Ra, i.e., a device parameter independent
with others, ai is the sensitivity of each variation. We as-
sume that the random gate delay is Gaussian distributed.
By scaling the sensitivity ai, ∆xi and ∆Ra are unit Gaus-
sian distributed N (0, 1).
247