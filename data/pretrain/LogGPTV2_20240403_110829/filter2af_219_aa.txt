在这篇博文中，我将解释我最近在[DOMPurify](https://github.com/cure53/DOMPurify/)\--流行的HTML过滤库中的绕过。简而言之，DOMPurify的工作是将一个不受信任的HTML片段删除所有可能导致跨站点脚本（XSS）的元素和属性。
这是Bypass：
相信我，这段话中没有一个元素是多余的。  
为了理解为什么这段代码能够工作，我需要给你介绍一下HTML规范中的一些有趣的功能，我使用这些功能来进行Bypass工作。
## DOMPurify的用法
我们先从基础知识开始，解释一下DOMPurify通常是如何使用的。假设我们在htmlMarkup中有一个不受信任的HTML，我们想把它分配给某个div，我们使用下面的代码来使用DOMPurify对它进行过滤并分配给div。
    div.innerHTML = DOMPurify.sanitize(htmlMarkup)
就 HTML 的解析和序列化以及对 DOM 树的操作而言，在上面的简短片段中发生了以下操作。
  * 1.htmlMarkup被解析到DOM树中。
  * 2.DOMPurify对DOM树进行过滤（简而言之，这个过程就是要走遍DOM树中的所有元素和属性，并删除所有不在允许列表中的节点）。
  * 3.DOM树被序列化回HTML标记。
  * 4.分配到innerHTML后，浏览器再次解析HTML标记。
  * 5.解析后的DOM树被追加到文档的DOM树中。
让我们在一个简单的例子上看看。假设我们的初始标记是AB。在第一步中，它被解析成以下的树。
然后，DOMPurify对其进行过滤，留下以下DOM树。  
然后将其序列化为。
    AB
而这就是DOMPurify.sanitize返回的内容。然后在分配给innerHTML时，浏览器会再次解析这些标记。  
该DOM树与DOMPurify工作的DOM树相同，然后将其附加到文档中。  
所以简而言之，我们的操作顺序如下：解析➡️序列化➡️解析。按照直觉可能是序列化一棵DOM树并再次解析它应该总是返回初始的DOM树。但事实完全不是这样。在[HTML规范中](https://html.spec.whatwg.org/multipage/parsing.html#serialising-html-fragments:escapingString-3:~:text=It%20is%20possible%20that%20the%20output,not%20return%20the%20original%20tree%20structure)甚至有一节关于序列化HTML片段的警告。
> It is possible that the output of this algorithm [serializing HTML], if
> parsed with an HTML parser, will not return the original tree structure.
> Tree structures that do not roundtrip a serialize and reparse step can also
> be produced by the HTML parser itself, although such cases are typically
> non-conforming.
重要的启示是，序列化-解析前后并不能保证返回原始DOM树（这也是被称为mXSS（突变XSS）的根本原因）。虽然通常这些情况是由于某种解析器/序列化器错误造成的，但至少有两种符合规范的变种情况。
## 嵌套FORM元素
其中一种情况与FORM元素有关。在HTML中，它是一个相当特殊的元素，因为它本身不能嵌套。规范中明确规定，[它不能嵌套FORM为其子元素](https://html.spec.whatwg.org/#the-form-element)。  
这可以在任何浏览器中确认，并使用以下标记。
    INSIDE_FORM1
    INSIDE_FORM2
这将产生以下DOM树。  
第二种形式在DOM树中完全被省略了，就像它从来没有出现过一样。
现在是有趣的部分。如果我们继续阅读HTML规范，它实际上给出了一个例子，说明只要有一个稍有破绽的标记和错误的嵌套标签，就有可能创建嵌套表单。这里是（直接摘自规范）。
它产生了以下DOM树，其中包含一个嵌套的表单元素。  
这不是任何特定浏览器的bug，而是直接来自HTML规范，并在解析HTML的算法中进行了描述。下面是大意。
  * 当你打开一个标签时，解析器需要记录它是用一个表单元素指针打开的（规范中是这样称呼的）。如果指针不是空的，那么就不能创建表单元素。
  * 当你结束一个标签时，表单元素指针总是被设置为null。
因此，回到这个片段。
一开始，表单元素指针被设置为id="external"的那个。然后是一个div，结束标签将表单元素指针设置为null。因为它是空的，所以可以创建下一个id="inner"的表单；而且因为我们当前在div中，所以我们实际上有一个嵌套在表单中的表单。
现在，如果我们尝试序列化产生的DOM树，我们将得到以下标记。
注意，这个标记不再有任何错误嵌套的标记。而当再次解析该标记时，就会创建以下DOM树。  
所以这就是一个证明，序列化-再解析 前后并不能保证返回原始DOM树。而更有趣的是，这基本上是一个 **符合规范的突变** 。
自从我意识到这个怪癖的那一刻起，我就非常确定，一定可以通过某种方式滥用它来绕过HTML
sanitizers。而在很长时间没有得到任何利用它的想法后，我终于偶然发现了HTML规范中的另一个怪癖。不过在说具体的怪癖本身之前，先说说我最喜欢的HTML规范的潘多拉盒子：
## 外部内容
外部内容就像一把瑞士军刀，可以用来突破解析器和过滤器。我在之前的[DOMPurify绕过](https://research.securitum.com/dompurify-bypass-using-mxss/)以及[Ruby sanitize库的绕过](https://research.securitum.com/html-sanitization-bypass-in-ruby-sanitize-5-2-1/)中使用了它。
HTML解析器可以创建一个包含三个命名空间元素的DOM树。
  * HTML命名空间()
  * SVG命名空间（
  * MathML命名空间()
默认情况下，所有的元素都在HTML命名空间；但是如果解析器遇到或元素，那么它就会分别 "切换
"到SVG和MathML命名空间。而这两个命名空间都会产生外来内容。
在外来内容标记中，与普通HTML中的解析方式不同。这一点在元素的解析上可以最清楚的表现出来。在HTML命名空间中，只能包含文本，不能有子元素，而且HTML实体不被解码。而在外来内容中就不一样了：外来内容的可以有子元素，实体也会被解码。
考虑以下标签。
    ABCABC