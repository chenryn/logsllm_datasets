A; ; π ‘ e0 : t{q/α} ∆ ‘ p (cid:22) q ∆ ‘ l
A; ; π ‘ pack (X1 (cid:22) X2, e0) : (∃α (cid:22) q. t)l
—T-Pack:
By the induction hypothesis on e1,
(1) e0 = v: e = pack (X1 (cid:22) X2, v) is a value.
(2) A, e0 −→ A, e0
e0 = pack (X1 (cid:22) X2, e0
0).
0: by evaluation context E = pack (X1 (cid:22) X2, E), we have
A; ; π ‘ e1 : (∃α (cid:22) p. t1)l A, α (cid:22) p; x : t1; ‘ e2 : t2 α 6∈ ftv(Γ) ∪ ftv(t2)
A; ; π ‘ open (α, x) = e1 in e2 : t2 t l
—T-Open:
By the induction hypothesis on e1,
(1) A, e1 −→ A, e0
1: by evaluation context E = open (α, x) = E in e2, we have
(2) e1 = v: by Lemma 8 (canonical forms), if e1 = pack (X1 (cid:22) X2, e), then by
e0 = open (α, x) = e0
1 in e2.
E-Some, e0 = e2{X1/α, v/x}.
A; ; π ‘ e0 : t1 A ‘ t1 ≤ t2
A; ; π ‘ e0 : t2
By the induction hypothesis on e0.
—T-Sub:
5.2 Preservation
Lemma 10 (Inversion).
(1 ) If ∆; Γ; π ‘ inl v : (t1 + t2)l, then ∆; Γ; π ‘ v : t1.
(2 ) If ∆; Γ; π ‘ inr v : (t1 + t2)l, then ∆; Γ; π ‘ v : t2.
(3 ) If ∆; Γ; π ‘ λx: t1. e : (t1 → t2)l, then ∆; Γ, x : t1 ‘ e : t2.
(4 ) If ∆; Γ; π ‘ Λα (cid:22) p. e : (∀α (cid:22) p. t)l, then ∆, α (cid:22) p; Γ; π ‘ e : t.
(5 ) If ∆; Γ; π ‘ pack (p (cid:22) q, e) : (∃α (cid:22) p. t)l, then ∆; Γ; π ‘ e : t{q/α}.
Proof. By normalizing the typing derivations (via collapsing multiple applica-
tions of T-Sub into one application of T-Sub).
Lemma 11 (Weakening).
(1 ) If ∆; Γ; π ‘ e : t, then (∆, p1 (cid:22) p2); (Γ, x : t0); (π, p . i) ‘ e : t.
(2 ) If ∆ ‘ t1 ≤ t2, then ∆, p (cid:22) q ‘ t1 ≤ t2.
(3 ) If ∆ ‘ l1 v l2, then ∆, p (cid:22) q ‘ l1 v l2.
(4 ) If ∆ ‘ c1 v c2, then ∆, p (cid:22) q ‘ c1 v c2.
(5 ) If ∆ ‘ p1 (cid:22) p2, then ∆, p (cid:22) q ‘ p1 (cid:22) p2.
Lemma 12 (Substitution for subtyping).
(1 ) If ∆ ‘ t1 ≤ t2, δ |= ∆ and A = δ(∆), then A ‘ δ(t1) ≤ δ(t2)
(2 ) If ∆ ‘ l1 v l2, δ |= ∆ and A = δ(∆), then A ‘ δ(l1) v δ(l2)
(3 ) If ∆ ‘ c1 v c2, δ |= ∆ and A = δ(∆), then A ‘ δ(c1) v δ(c2)
(4 ) If ∆ ‘ p1 (cid:22) p2, δ |= ∆ and A = δ(∆), then A ‘ δ(p1) (cid:22) δ(p2)
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
Run-time Principals in Information-ﬂow Type Systems
·
33
(5 ) If ∆, α (cid:22) p ‘ t1 ≤ t2 and ∆ ‘ p0 (cid:22) p, then ∆{p0/α} ‘ t1{p0/α} ≤ t2{p0/α}.
(6 ) If ∆, α (cid:22) p ‘ l1 v l2 and ∆ ‘ p0 (cid:22) p, then ∆{p0/α} ‘ l1{p0/α} v l2{p0/α}.
(7 ) If ∆, α (cid:22) p ‘ c1 v c2 and ∆ ‘ p0 (cid:22) p, then ∆{p0/α} ‘ c1{p0/α} v c2{p0/α}.
(8 ) If ∆, α (cid:22) p ‘ p1 (cid:22) p2 and ∆ ‘ p0 (cid:22) p, then ∆{p0/α} ‘ p1{p0/α} (cid:22) p2{p0/α}.
The last four rules are special cases of the ﬁrst four. The ﬁrst four rules are used
in proving Lemma 4 (substitution for logical relations), while the last four are used
in proving Lemma 13 (substitution for typing).
Lemma 13 (Substitution for typing).
(1 ) If ∆; Γ; π ‘ e : t, δ |= ∆, A = δ(∆) and A ‘ γ |= δ(Γ), then A; ; π ‘ γδ(e) : δ(t).
(2 ) If ∆; Γ, x : t0; π ‘ e : t and ∆; Γ; π ‘ v : t0, then ∆; Γ; π ‘ e{v/x} : t.
(3 ) If ∆, α (cid:22) p; Γ; π ‘ e : t and ∆ ‘ X (cid:22) p, then ∆{X/α}; Γ{X/α}; π{X/α} ‘
e{X/α} : t{X/α}.
The last two rules are special cases of the ﬁrst. The ﬁrst rule is used in proving
Lemma 4 (substitution for logical relations), while the last two are used in proving
Theorem 14 (preservation).
Theorem 14 (Preservation). If A; ; π ‘ e : t and A, e −→ A, e0, then A0; ; π0 ‘
e0 : t for some A0 and π0 such that A (cid:22) A0 and π (cid:22) π0.
Proof. By induction on the typing derivations. For steps taken with some
evaluation context, the typing holds simply because of the induction hypothesis.
In case of T-Var, T-Unit, T-Fun, T-Name, T-Cap, T-Gen, or T-Pack, there is no
evaluation.
For steps taken with some lifting rule described at the end of Section 4.2, the
typing holds simply because of weakening. For example, in case of function appli-
cations, A, (let X1 (cid:22) X2 in v1) v2 −→ A, let X1 (cid:22) X2 in (v1 v2). By Lemma 11
(weakening), A, X1 (cid:22) X2; ; π1 ‘ v2 : t1. The result follows by T-App.
A; ; π ‘ e0 : (t1 + t2)l
A; ; π|l ‘ v1 : ([π2] t1 → t0)l
A ‘ π2 (cid:22) (π|l)
A; ; π|l ‘ v2 : ([π2] t2 → t0)l
—T-Case:
A; ; π ‘ case e0 v1 v2 : t0 t l
Case E-CaseInl: A, case (inl v) v1 v2 −→ A, v1 v. By Lemma 10 (inversion),
A; ; π ‘ v : t1. The result follows by Lemma 11 (weakening)and T-App.
Case E-CaseInr: symmetric to E-CaseInl.
A; ; π1 ‘ e1 : ([π2] t1 → t2)l A; ; π1 ‘ e2 : t1 A ‘ π2 (cid:22) (π1|l)
A; ; π1 ‘ e1 e2 : t2 t l
—T-App:
Case E-Fun: A, (λx: t1. e0) v −→ A, e0{v/x}. By Lemma 10 (inversion), ∆; Γ, x : t1 ‘
e0 : t2. Then, by Lemma 13 (substitution for typing), A; ; π ‘ e0{v/x} : t2. The
result follows by T-Sub.
A; ; π ‘ e1 : (Pp1)l
A, p1 (cid:22) p2; ; π ‘ e3 : t0
A; ; π ‘ e2 : (Pp2)l
A; ; π ‘ e4 : t0
A; ; π ‘ if (e1 (cid:22) e2) e3 e4 : t0 t l
—T-IfDel:
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
·
34
Stephen Tse and Steve Zdancewic
Case E-IfDelYes:
result follows by Lemma 11 (weakening)and T-Sub.
A, if (X1 (cid:22) X2) e3 e4 −→ A, e3. Let A0 = A, p1 (cid:22) p2. The
A ‘ X1 (cid:22) X2
Case E-IfDelNo: similar to E-IfDelYes.
A; ; π ‘ e1 : (Pp1)l A; ; π ‘ e2 : (Pp2)l A; ; π ‘ e3 : t0
—T-LetDel:
A; ; π ‘ let (e1 (cid:22) e2) in e3 : t0 t l
Case E-LetDel: by Lemma 11 (weakening)and T-Sub.
A; ; π ‘ e1 : Cl A; ; π ‘ e2 : (Pp)l A; (π, p . i)|l ‘ e3 : t0 A; ; π|l ‘ e4 : t0
—T-IfCert:
A; ; π ‘ if (e1 ⇒ e2 . i) e3 e4 : t0 t l
A ‘ X1{i} ⇒ X2 . i
Case E-IfCertYes:
result follows by T-Sub.
A, if (X1{i} ⇒ X2 . i) e3 e4 −→ A, e3. Let π0 = π, p . i. The
Case E-IfCertNo: similar to E-IfCertYes.
A; ; π ‘ e0 : t2 A ‘ t2 − t1 = s A ‘ s (cid:22) π(declassify)
A; ; π ‘ declassify e0 t1 : t1
—T-Dcls:
Case E-Dcls: A, declassify v t0 −→ A, v. Assume we only declassify a label at
the top-level type, that is A ‘ ul0 − ul = s, where t2 = ul0 and t1 = ul. Since we
can assign any label to the top-level type of a value (according to T-Unit, T-Inl,
T-Inr, T-Fun, T-Name, T-Cap, T-All, and T-Pack), we can change the type of v
from A; ; π ‘ v : ul0 to A; ; π ‘ v : ul.
If we declassify a label inside the structure of a type (in particular, the parameter
type of a function), we need to weaken the theorem such that evaluation preserves
types only in the erasure semantics. That is, if A; ; π ‘ e : t and A,bec −→
A,be0c, then A; ; π ‘ be0c : t, where b·c is the type-erasure function. We omit the
proof for this general case here.
∆; Γ; π ‘ e : t ∆ ‘ p (cid:22) π(endorse)
∆; Γ; π ‘ endorse e p : t u {!p}
—T-Endr:
Case E-Endr: A, endorse v p −→ A, v. Similar to T-Dcls, we can change the
type of v from A; ; π ‘ v : ul0 to A; ; π ‘ v : ul.
A; ; π ‘ e0 : (Pp)l
A; ; π ‘ acquire e0 . i : (Cl + 1l)l
—T-Acq:
Case E-AcqYes:
E ‘ X{i}
A, acquire X . i −→ A, inl X{i}. By T-Cap and T-Inl.
Case E-AcqNo: similar to E-AcqYes.
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
Run-time Principals in Information-ﬂow Type Systems
·
35
A; ; π ‘ e0 : (∀α (cid:22) p2. t0)l A ‘ p1 (cid:22) p2
A; ; π ‘ e0 [p1] : t0 t l
—T-Inst:
Case E-All: A, (Λα (cid:22) p. e0) [X] −→ A, e0{X/α}. By Lemma 10 (inversion),
∆; Γ, α ‘ e0 : t0 t l. Then, by Lemma 13 (substitution for typing), A; ; π ‘
e0{X/α} : t0. The result follows by Lemma 11 (weakening)and T-Sub.
A; ; π ‘ e1 : (∃α (cid:22) p. t1)l A, α (cid:22) p; x : t1; ‘ e2 : t2 α 6∈ ftv(Γ) ∪ ftv(t2)
A; ; π ‘ open (α, x) = e1 in e2 : t2 t l
—T-Open:
Case E-Some: A, open (α, x) = (pack (X1 (cid:22) X2, v)) in e2 −→ A, e2{X1/α, v/x}.
By Lemma 13 (substitution for typing), A; ; π ‘ e2{X1/α, v/x} : t2. The result
follows by T-Sub.
A; ; π ‘ e0 : t1 A ‘ t1 ≤ t2
A; ; π ‘ e0 : t2
—T-Sub:
By the induction hypothesis on e0.
6. PKI AND APPLICATION
6.1 Public key infrastructures
This section considers some possible implementations of run-time principals, con-
centrating on one interpretation in terms of a public key infrastructure.
If run-time principals are added to an information-ﬂow type system whose pro-
grams are intended to run within a single, trusted execution environment, the
implementation is straightforward: the trusted run time maintains an immutable
(and persistent) mapping of principal names to unique identiﬁers, the acts-for hier-
archy is a directed graph with nodes labeled by identiﬁers, and capabilities can be
implemented as (unforgeable) handles to data structures created by the run-time
system—this is the strategy currently taken by Jif.
If the programs are intended to run in a distributed setting, the implementa-
tion becomes more challenging. Fortunately, the appropriate machinery (principal
names, delegation, and capabilities) has already been developed using public-key
cryptography [Gasser and McDermott 1990; Howell and Kotz 2000]. We can inter-
pret the acts-for hierarchy and run-time tests of λRP in terms of PKI as follows:
run-time principals are implemented via public keys, the acts-for hierarchy is imple-
mented via certiﬁcate chains, and capabilities are implemented as digitally signed
certiﬁcates.
Formally, we have the following interpretation that maps the abstract syntax for
privileges, capabilities, and the principal comparison tests of λRP into their concrete
X {[[i]]} is a
representations. Here, KX is the public key corresponding to X and K−1
certiﬁcate containing [[i]] signed using X’s private key. The strings dcls and del
provide the content for the certiﬁcates, and they indicate the type of privilege
granted by possession of the the certiﬁcate. The remaining constructs (the acts-for
relation and the privileged operations) are simply interpreted as tuples of data:
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
·
36
Stephen Tse and Steve Zdancewic
[[X]] = KX
[[X1 (cid:22) X2]] = (KX1, KX2)
[[X{i}]] = K−1
X {[[i]]}
[[X . i]] = (KX , [[i]])
[[declassify]] = dcls
[[delegateX1(cid:22)X2]] = (del, KX1, KX2)
The judgment A ‘ X1 ⇒ X2 . i, which is used in the rule E-IfCertYes translates
to the following rule:
(KX2, KX1) ∈ [[A]]∗
X1{[[i]]} ⇒ (KX2, [[i]])
A ‘ K−1
Here, the interpretation of the acts-for hierarchy, [[A]]∗, is a binary relation on
public keys—the reﬂexive, transitive closure of the point-wise interpretation of the
delegation pairs.
Given these deﬁnitions, it is clear how to interpret the capability veriﬁcation—
we use cryptographic primitives to verify that the digital certiﬁcate is signed by
the corresponding public key. In the reﬂexive case, we need to check whether the
capability X1{i} permits the privilege X2 . j (in this instance, the judgment is
A ‘ X{i} ⇒ X . j). The translation of the capability is K−1
X1{[[i]]}; the translation
of the privilege is the pair (KX2, [[j]]). Operationally, the implementation tries to
use the key KX2to verify the signature, and if the signature is valid (which implies
that KX1= KX2) also checks to make sure that the contents of the certiﬁcate match
(it checks whether [[i]]= [[j]]). If all of these checks succeed, the acts-for hierarchy
permits the privilege (and evaluation proceeds according to rule E-IfCertYes). If the
check fails, the implementation must check for a sequence of delegation certiﬁcates
that permits the privilege.
The implementation uses graph reachability to test for transitive acts-for relations
in A. It is easy to show that the existence of a path in [[A]]∗ implies the existence
of a valid certiﬁcate chain. In general, the justiﬁcation for constraint p1 (cid:22) π(i) is
the existence of some certiﬁcate chain of the form:
p2 {[[p2 (cid:22) p3]]} ↔ . . . ↔ K−1
p1 {[[p1 (cid:22) p2]]} ↔ K−1
K−1
Only key Kp1 is needed to validate this chain, since each delegation certiﬁcate
contains the key needed to validate the next certiﬁcate in the sequence. The PKI
implementation must ﬁnd such a chain at run time to justify granting privilege i.
The initial acts-for hierarchy contains only information relating principals to the
universally trusted principal >. The principal > behaves as a certiﬁcate authority
that generates private keys and issues certiﬁcates binding principal names to their
corresponding public keys. To satisfy the axiom ∆ ‘ X (cid:22) >, we assume that each
X {[[X (cid:22) >]]} and (KX , K>) ∈ [[A]] for each X—
host’s run-time is conﬁgured with K−1
this information would be acquired by a host when it receives the binding between
principal X and key KX from the certiﬁcate authority. The initial hierarchy consists
of (KX , K>) pairs. As the program runs, additional delegation key pairs are added