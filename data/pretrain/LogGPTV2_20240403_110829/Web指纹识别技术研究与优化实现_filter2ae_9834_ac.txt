                print '[!] Get link error'
                pass
            return links
        except:
            return [] 
有兴趣的可以查看具体代码文件。
爬取的结果如下：
[](https://github.com/TideSec/TideFinger/blob/master/images/021.png)
当然了，里面肯定很多都属于误报，比如上图中第一个其实是个500错误页面，所以出现的比较多，第二个是政府网站最下边那个常见的“纠错”的js，所以用的也比较多…
经过一些分析整理也发现了一些小众的CMS和建站系统的指纹，比如三一网络建站系统的newsxx.php，比如大汉JCM的jhelper_tool_style.css等等，后续会持续把这些新的指纹丰富到指纹库中去。
###
[](https://github.com/TideSec/TideFinger/blob/master/Web%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%8E%E4%BC%98%E5%8C%96%E5%AE%9E%E7%8E%B0.md#%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E8%84%9A%E6%9C%AC)指纹识别脚本
有了指纹库之后，识别脚本就相对比较简单了，已有的一些也都比较成熟了，直接使用了webfinger和whatcms的部分代码并进行了整合优化，于是就有了TideFinger。
1、功能逻辑都比较简单，先用fofa库去匹配，然后获取一定banner，如果banner中识别除了cms，则返回结果，如果未识别到cms，则会调用cms规则库进行匹配各规则。
2、脚本支持代理模式，当设置了-p参数，且proxys_ips.txt文件包含代理地址时，脚本会随机调用代理地址进行扫描，以避免被封ip，不过这样的话效率可能会低一些。毕竟搜集的免费代理质量还是差一些，速度会慢很多。有钱人可以找收费代理池，然后每个规则都用不同代理去请求，这样肯定不会被封！
代理地址的搜集可以使用我修改的另一个代理池，提供了自动化的代理ip抓取+评估+存储+展示+接口调用。
3、经测试，一般网站把所有指纹跑一遍大约需要30秒时间，个别的网站响应比较慢的可能耗时更长一些，可以通过设置网站超时时间进行控制。
安装python2依赖库
    pip install lxml
    pip install requests
    pip install bs4
    说明：sqlite3库在Python 2.5.x 以上版本默认自带了该模块，如提示sqlite3出错请自行排查。
执行脚本
    $ python TideFinger.py
        Usage: python TideFinger.py -u http://www.123.com [-p 1] [-m 50] [-t 5]
        -u: 待检测目标URL地址
        -p: 指定该选项为1后，说明启用代理检测，请确保代理文件名为proxys_ips.txt,每行一条代理，格式如: 124.225.223.101:80
        -m: 指纹匹配的线程数，不指定时默认为50
        -t: 网站响应超时时间，默认为5秒
指纹识别界面如下：
[](https://github.com/TideSec/TideFinger/blob/master/images/022.png)
###
[](https://github.com/TideSec/TideFinger/blob/master/Web%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%8E%E4%BC%98%E5%8C%96%E5%AE%9E%E7%8E%B0.md#%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E5%B9%B3%E5%8F%B0)指纹识别平台
在有了指纹库和识别脚本之后，我们想继续完善下这个功能，于是又加入了其他一些功能，有了这个在线指纹查询平台[http://finger.tidesec.net](http://finger.tidesec.net/)。
开始想加的很多，但后来在速度和时间方面不得不进行了一定的取舍，于是就有了目前如下的功能。
1、网站信息：网站标题、状态码、302跳转信息等；
2、IP地址信息：IP归属地、IP服务商信息、GPS信息；
3、CDN识别：对目标是否使用CDN进行检测，但目前CDN识别指纹还不多，对部分识别出使用CDN的目标还会列出来CNAME；
4、中间件识别：主要通过http头信息中的XPB、server等字段获取中间件信息，如nginx、iis、tomcat等；
5、更多banner：主要是调用了whatweb和Wapplyzer进行更多banner信息的获取，如jquery、bootstrap等；
6、操作系统识别：识别比较简单，通过ttl值和文件大小写是否敏感…用nmap去识别的话速度太慢…
7、本来还加入了子域名发现、端口扫描和waf探测等等，但发现耗时相对较长，而且比较容易被封IP，所以又去掉了。
团队没有专门做前端的，看云悉界面比较美观，所以就参考了云悉和WTF_Scan的界面布局，大佬不要打我们…使用了TP5框架，因为平台的功能都比较low，以防被喷就不放源码了。
大家可以试用下，给我们提提意见[http://finger.tidesec.net](http://finger.tidesec.net/)
注册需要验证码，关注下我们公众号回复“潮汐指纹”即可被逼拉流量O(∩_∩)O哈哈
[](https://github.com/TideSec/TideFinger/blob/master/images/023.png)
## 待解决的问题
1、指纹库的继续完善：这是个旷日持久的工作，希望能坚持下去，我们也会持续的开源最新指纹库，希望大家手头有好的资源也可以贡献出来。
2、代理问题：虽然集成了代理功能，但经实际使用来看，搜集的免费代理质量还是差一些，速度会慢很多。
3、IP会被封：有的网站防护对目录枚举或一些路径非常敏感，会封IP地址；
4、下一步尝试对http头进行语义分析，从海量网站中提取分析header的共性，更高效的发现未知指纹；
5、因为穷，所以目前还是单节点进行指纹的识别，如果是第三步进入常规目录检测的方式的话可能速度会比较慢。
## 参考资料
在指纹库搜集和脚本开发过程中，查阅了大量资料，下面列举的可能不全，在此一并感谢这些无私奉献的安全研究者。
###
[](https://github.com/TideSec/TideFinger/blob/master/Web%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%8E%E4%BC%98%E5%8C%96%E5%AE%9E%E7%8E%B0.md#%E5%B0%8F%E7%A6%8F%E5%88%A9)小福利
1、指纹检测工具下载
我们把上面的13款指纹识别工具和搜集到的一些论文资料进行了汇总打包，大家可以直接下载。
下载地址： 提取码：5y4o
解压密码[www.tidesec.net](www.tidesec.net)
后续如有更新，会在我们公众号TideSec安全团队上提供下载，回复“指纹工具”即可获取最新指纹识别工具下载地址。
2、指纹库下载
我们在GitHub上提供的是2019年4月的指纹库（还未进行大量的命中率测试），后续我们还会优化调整命中策略、未知指纹识别方法，持续更新优化指纹库。
最新指纹库的下载请关注我们公众号TideSec安全团队，回复“指纹库”即可获取最新指纹库下载地址。
###
[](https://github.com/TideSec/TideFinger/blob/master/Web%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%8E%E4%BC%98%E5%8C%96%E5%AE%9E%E7%8E%B0.md#%E5%85%B3%E6%B3%A8%E6%88%91%E4%BB%AC)关注我们
TideSec安全团队：
Tide安全团队正式成立于2019年1月，是以互联网攻防技术研究为目标的安全团队，目前聚集了十多位专业的安全攻防技术研究人员，专注于网络攻防、Web安全、移动终端、安全开发、IoT/物联网/工控安全等方向。
想了解更多Tide安全团队，请关注团队官网: [http://www.TideSec.net](http://www.tidesec.net/)
或关注公众号：
[](https://github.com/TideSec/TideFinger/blob/master/images/ewm.png)