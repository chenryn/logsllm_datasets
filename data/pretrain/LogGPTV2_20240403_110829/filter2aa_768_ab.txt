31.5.6  在.Net 程序中使用 WMI............................................................................... 103 
31.6  调试 WMI ................................................................................................................. 104 
31.6.1  WMI 日志文件 .............................................................................................. 104 
31.6.2  WMI 的计数器类 .......................................................................................... 105 
31.6.3  WMI 的故障诊断类 ...................................................................................... 106 
31.6  本章总结................................................................................................................... 109 
补编内容 9 CPU 异常逐一描述 ..................................................................................................110 
CPU 异常详解................................................................................................................................111 
C.1  除零异常（#DE）......................................................................................................111 
C.2  调试异常（#DB）......................................................................................................111 
C.3  不可屏蔽中断（NMI）..............................................................................................112 
C.4  断点异常（#BP）.......................................................................................................112 
C.5  溢出异常（#OF） ......................................................................................................113 
C.6  数组越界异常（#BR）..............................................................................................113 
C.7  非法操作码异常（#UD）..........................................................................................114 
C.8  设备不可用异常（#NM）.........................................................................................115 
C.9  双重错误异常（#DF） ..............................................................................................115 
C.10  协处理器段溢出异常 ...............................................................................................117 
C.11  无效 TSS 异常（#TS）............................................................................................117 
C.12  段不存在异常（#NP） ............................................................................................119 
C.13  栈错误异常（#SS）................................................................................................ 120 
《软件调试》补编 
- 8 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
C.14  一般性保护异常（#GP） ....................................................................................... 121 
C.15  页错误异常（#PF）................................................................................................ 123 
C.16  x87 FPU 浮点错误异常（#MF） ........................................................................... 125 
C.17  对齐检查异常（#AC）........................................................................................... 126 
C.18  机器检查异常（#MC） .......................................................................................... 128 
C.19  SIMD 浮点异常（#XF） ........................................................................................ 128 
补编内容 10 《软件调试》导读............................................................................................... 131 
《软件调试》导读之提纲挈领.................................................................................................. 132 
从最初的书名说起...................................................................................................... 132 
2005 年时的选题列选单............................................................................................. 134 
重构.............................................................................................................................. 135 
目前的架构.................................................................................................................. 135 
《软件调试》导读之绪论篇...................................................................................................... 138 
《软件调试》导读之 CPU 篇...................................................................................................... 139 
《软件调试》导读之操作系统篇.............................................................................................. 142 
补编内容 11 “调试之剑”专栏之启动系列................................................................................. 145 
举步维艰——如何调试显示器点亮前的故障 .......................................................................... 146 
权利移交——如何调试引导过程中的故障.............................................................................. 152 
步步为营——如何调试操作系统加载阶段的故障 .................................................................. 159 
百废待兴——如何调试内核初始化阶段的故障 ...................................................................... 166 
《软件调试》补编 
- 9 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
补编内容
补编内容
补编内容
补编内容 1 错误提示机制之消息框
错误提示机制之消息框
错误提示机制之消息框
错误提示机制之消息框 
补编说明： 
这一节本来属于《软件调试》第 13 章的第 1 节，旨在介绍消息框这种简单的
错误提示机制。凡是做过 Windows 编程的人都知道，消息框用起来很简单，
但是大多数人没有仔细思考过它内部是如何工作的，这个问题其实不是很容
易说清楚的。 
在《软件调试》正式出版前压缩篇幅时，这一节被删除了。主要原因是相
对于其它内容，这个内容略显次要，作者也担心有人会提出这样的质疑：
“花好几页就写个消息框实在是不值得！”。 
13.1  MessageBox 
消息对话框（message box）是 Windows 中最常见的即时错误提示方法。利用系统提
供的 MessageBox API，弹出一个图形化的消息框对程序员来说真是唾手可得。而且不论
是程序本身带有消息循环的 Win32 GUI 程序，还是用户代码中根本没有消息循环的控制
台程序，都可以调用这个 API，清单 13-1 所示的代码显示了名为 MsgBox 的控制台程序是
如何调用 MessageBox API 的。 
清单 13-1  MsgBox 程序的源代码（部分） 
#include  
void main() 
{ 
    MessageBox(NULL, "Simplest way for interactive Instant Error Notification", 
        "Instant Error Notification",    MB_OK); 
} 
编写过 Windows 程序消息循环的读者看了清单 13-1 中的代码很可能有个疑问：
Windows 窗口都是靠清单 13-2 所示的消息循环来驱动的，但上面的控制台程序根本没有
消息循环，消息窗口是如何工作的呢？ 
清单 13-2  Windows 程序的消息循环 
    while( (bRet = GetMessage( &msg, NULL, 0, 0 )) != 0) 
    {  
        if (bRet == -1) 
        { 
            // handle the error and possibly exit 
        } 
        else 
        { 
            TranslateMessage(&msg);  
            DispatchMessage(&msg);  
        } 
《软件调试》补编 
- 10 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
    }  
使用 WinDBG 跟踪 MessageBox 函数的执行过程，就可以回答上面的问题了。清单
13-3 显示了 MessageBox 函数的内部执行过程。 
清单 13-3  MessageBox 函数的执行过程 
0:000> knL 
 # ChildEBP RetAddr   
00 0012f990 77d48b04 SharedUserData!SystemCallStub 
// 进入内核态执行 
01 0012f994 77d48ae7 USER32!NtUserPeekMessage+0xc 
// 调用子系统的内核服务 
02 0012f9bc 77d48c07 USER32!_PeekMessage+0x72 
// 内部函数 
03 0012f9e8 77d4e5d9 USER32!PeekMessageW+0xba 
// 调用查取消息的 API 
04 0012fa30 77d53e2a USER32!DialogBox2+0xe2 
// 显示对话框并开始消息循坏 
05 0012fa58 77d6e6a8 USER32!InternalDialogBox+0xce 
// 创建对话框 
06 0012fd10 77d6e12b USER32!SoftModalMessageBox+0x72c // 动态产生对话框资源 
07 0012fe58 77d6e7ef USER32!MessageBoxWorker+0x267 
// 工作函数 
08 0012feb0 77d6e8d7 USER32!MessageBoxTimeoutW+0x78 // UNICODE 版本 
09 0012fee4 77d6e864 USER32!MessageBoxTimeoutA+0x9a // 带超时支持的消息框函数 
0a 0012ff04 77d6e848 USER32!MessageBoxExA+0x19 
// 统一到 MessageBoxEx API 
0b 0012ff1c 0040103e USER32!MessageBoxA+0x44 
// 调用 MessageBox API 
0c 0012ff80 00401199 msgbox!main+0x2e  
// main 函数 
0d 0012ffc0 77e8141a msgbox!mainCRTStartup+0xe9  
// C 运行库的入口函数 
0e 0012fff0 00000000 kernel32!BaseProcessStart+0x23 // 进程的启动函数 
通过以上函数调用序列，我们可以很清楚地看出 MessageBox API 的执行过程。下面
逐步来进行分析。因为 k 命令是照按从（栈）顶到（栈）底的顺序显示的，所以函数调用
的关系是下面的调用上面的。最下面的 BaseProcessStart 是系统提供的进程启动代码，
普通Windows进程的初始线程都是从此开始运行的。接下来是VC编译器插入的入口函数，
而后是我们代码中的 main 函数。我们在 main 函数中调用了 MessageBox API，因为是
ANSI 程序（非 Unicode），所以链接的是 MessageBoxA（MessageBoxW 是用于 Unicode 程
序）。MessageBoxA 内部的没有做任何处理，只是简单地调用另一个 API MessageBoxEx。 
13.1.1  MessageBoxEx 
MessageBoxEx API 的函数原型只比 MessageBox 多一个参数 wLanguageId，即： 
int MessageBoxEx( HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, 
UINT uType, WORD wLanguageId); 
其中，hWnd 用来指定父窗口句柄，如果没有父窗口，那么可以将其设置为 NULL。lpText
和 lpCaption 分别是消息框的消息文本和标题。uType 用来定制消息框的行为，我们稍
后再讨论。wLanguageId 参数用来指定语言，目前这个参数保留未用，调用时只要指定为
0 即可。因此，MessageBox 和 MessageBoxEx 这两个 API 是等价的。 
13.1.2  MessageBoxTimeout 
接下来被调用的是 MessageBoxTimeout，它是一个广被使用但却未文档化的 API，
其函数原型如下： 
int MessageBoxTimeout(HWND hWnd, LPCSTR lpText,  
    LPCSTR lpCaption, UINT uType, WORD wLanguageId, DWORD dwMilliseconds); 
与 MessageBoxEx 相比 ， MessageBoxTimeout 也只 是多 了最 后一 个参 数， 即
dwMilliseconds。这是因为 MessageBoxTimeout 函数具有定时器（timer）功能，当定
时器指定的时间到期（timeout）时，它会自动关闭对话框，dwMilliseconds 参数就是用
来指定定时器的时间长度的，单位是毫秒（1/1000 秒）。尽管没有文档化，但是 USER32.DLL
输出了 MessageBoxTimeout 函数，因此可以用通过 GetProcAddress 函数获取这个函数
的 指 针 来 动 态 调 用 它 ， MsgBox
小 程 序 中 包 含 了 详 细 的 源 代 码
《软件调试》补编 
- 11 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
（code\chap13\msgbox\msgbox.cpp）。 
接下来，MessageBoxTimeoutA在把所有字符串类型的参数都转为 UNICODE 类型后，
调用 MessageBoxTimeoutW。这是自 Windows 2000 以来的典型做法，大多数包含字符串
类型参数的 API 都有 UNICODE 和 ANSI 两个版本，一个版本在将参数转换为另一个版本
的参数后便交由另一个版本统一处理。 
MessageBoxTimeoutW 将所有参数放入一个与 MSDN 中文档化了的 MSGBOXPARAMS 结构
非常类似的内部结构中，然后将该结构的指针作为参数调用 MessageBoxWorker 函数。另
一个消息框 API MessageBoxIndirect 使用了 MSGBOXPARAMS 结构。 
13.1.3  MessageBoxWorker 
MessageBoxWorker 做了很多琐碎的参数检查和处理工作，比如，根据 dwStyle（对
应于顶层的 uType 参数）和 dwLanguageId 参数确定按钮和加载按钮文字等。在准备好这
些信息并将其放到刚才所说的内部结构中后，MessageBoxWorker 便完成任务了，它会把
接下来的工作交给 SoftModalMessageBox 函数。 
需要说明的是，如果 uType 参数中指定了 MB_SERVICE_NOTIFICATION 或 MB_ 
DEFAULT_DESKTOP_ONLY 标志，那么 MessageBoxWorker 会调用 ServiceMessageBox 函
数来处理。ServiceMessageBox 判断，如果对话框应该显示在其他 Station（工作站），那
么便调用 WinStationSendMessage 将其转发到其他 Windows Station，如果对话框应该显
示在当前 Station，那么便调用 NtRaiseHardError 服务将其发给 Windows 子系统进程
（CSRSS）来处理。下一节将详细讨论 NtRaiseHardError 的工作原理。 
首先，SoftModalMessageBox 做的工作更加具体，包括计算消息文字所需的长度，
按钮和消息窗口的位置及大小等。然后 SoftModalMessageBox 将这些信息放到一个自己
动态创建的窗口模板（template）中。大家知道我们在设计对话框时都需要在资源中创建
对话框模板，其中包含了对话框的位置、布局、内容等信息。因为我们在调用 MessageBox
函数时没有提供资源模板，所以 SoftModalMessageBox 在这里动态创建了一个。在有了
资源模板后，SoftModalMessageBox 将其传递给 InternalDialogBox，让其产生对话框。 
13.1.4  InternalDialogBox 
接下来的过程就与使用 DialogBox API 产生的模态对话框的过程基本一致了。
InternalDialogBox 首先检查参数中的拥有者窗口（owner）句柄是否为空，如果不为空，
那么便调用 NtUserEnableWindow 将其禁止，这是为什么在一个程序弹出模态对话框（消
息对话框总是模态的）后，父窗口就不响应了的原因。接下来，Internal- DialogBox 调
用 InternalCreateDialog 创建对话框窗口，如果创建失败，则恢复父窗口后返回。如果
成功，它会调用 NtUserShowWindow 显示消息框，然后调用 DialogBox2。 
正如大家所估计的，DialogBox2 内部包含了一个类似清单 13-2 所示的消息循环。该
循环反复调用 PeekMessage 来从本线程的消息队列中获取消息，然后处理。这样，消息框
窗口便可以与用户交互了。 
图 13-1 左侧是 MsgBox 程序在 Windows XP 英文版上运行时弹出的消息框，右侧是在
Windows 2000 中文版上运行时弹出的消息框。显而易见，二者除了窗口风格略有差异外，
OK 按钮的文字是与操作系统的语言相一致的，这是因为 MessageBoxWorker 函数是根据
《软件调试》补编 
- 12 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
语言 ID 来加载合适的字符串资源的。 
图 13-1  MessageBox API 弹出的消息框 
13.1.5  消息框选项（uType） 
在对 MessageBox 的工作原理有了较深入的了解后，下面我们回过头来仔细考察它的
uType 参数。uType 参数的类型是无符号的整数（32 位），用来指定控制 MessageBox 外
观和行为的各种选项。为了便于使用，每一种选项被定义为一个以 MB_开始的宏（定义
在 winuser.h 文件中），如 MB_YESNO 表示消息框中应该包含 YES 和 NO 按钮。迄今为止，
已经定义了将近 40 个这样的宏，按照类型被分为 6 个组（group），表 13-1 按类别列出了
这些宏的定义和用途。 
表 13-1  MessageBox API 的选项标志 
宏定义/类 
值/类掩码 
含义 
按钮类（MB_TYPEMASK） 
0x0000000FL 
用来定义包含的按钮 
MB_OK 
0x00000000L 
显示 OK 按钮 
MB_OKCANCEL 
0x00000001L 
显示 OK 和 Cancel 按钮 
MB_ABORTRETRYIGNORE 
0x00000002L 
显示 Abort、Retry 和 Ignore 按钮 
MB_YESNOCANCEL 
0x00000003L 
显示 Yes、No 和 Cancel 按钮 
MB_YESNO 
0x00000004L 
显示 Yes 和 No 按钮 
MB_RETRYCANCEL 
0x00000005L 
显示 Retry 和 Cancel 按钮 
MB_CANCELTRYCONTINUE 
0x00000006L 
显示 Cancel、Try Again 和 Continue
按钮 