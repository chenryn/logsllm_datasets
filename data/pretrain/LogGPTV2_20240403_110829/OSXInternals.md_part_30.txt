a cycle-by-cycle sequence of processor events. These are denoted by labels, examples of which are
shown in Table 313.
Figure 337. simg5 output
[View full size image]
Table 313. Processor Event Labels
Label Event Notes
FVB Fetch Instruction fetched into the
instruction buffer
D Decode Decode group formed
M Dispatch Dispatch group dispatched
su Issue Instruction issued
E Execute Instruction executing
f Finish Instruction finished execution
C Completion Instruction group completed
In the simg5 output, we can see the breaking down of architected instructions into iops. For example,
the second instruction of interest in Figure 336 has two corresponding iops.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 1 of 86
Chapter 4. The Firmware and the Bootloader
When a computer system's power is turned on, or the system is reset, the process of its "coming up" is
called bootstrapping, or simply booting.[1] A modern Apple computer presents a capable and interesting
firmware environment even before an operating system runs on it. In this chapter, we will explore this
environment on a PowerPC-based Macintosh computer. We will also look at the sequence of events that
happens during bootingup to the point where the Mac OS X kernel gains control. Finally, we will briefly
discuss an equally interesting firmware environment (EFI) for x86-based Macintosh computers.
[1] The term is an allusion to the expression "lifting oneself up by the bootstraps."
4.1. Introduction
As we saw in Chapter 3, a representative computer system consists of a main logic board (or the
motherboard), one or more CPUs, busses, memory, storage devices, and so on. The computer's operating
system resides on a storage device that is either locally attached or is accessible over a network
connection. The operating system must somehow be loaded into memory as the computer boots. In the
most commonly used approach, the master CPU[2] has access to some read-only memory (ROM) from
which it executes an initial piece of code. This code is commonly called the Basic Input/Output System
(BIOS), particularly in the context of x86-based computers. Modern BIOSs usually reside in
programmable read-only memory (PROM) or one of its variants, such as flash memory, to allow easy
upgrades. This "software embedded in hardware" represents a middle ground between hardware and
software and is therefore called firmware. A typical BIOS is also firmware, but not every piece of
firmware is considered a BIOS. The BIOS's analog is called Open Firmware on modern PowerPC-based
Apple computers and Extensible Firmware Interface (EFI) on x86-based Apple computers. It must be
noted that the roles and capabilities of both Open Firmware and EFI far exceed those of a typical PC
BIOS.
[2] In a multiprocessor system, one CPU is usually designated as a master (or main) CPU
using some platform-specific algorithm.
The PC BIOS is as old as the PC itself, whereas the acronym BIOS is even older, dating back to the CP/M
operating system. BIOS was one of the three primary components of CP/M, the other two being BDOS
(Basic Disk Operating System) and CCP (Console Command Processor).
In a typical booting scenario, after the system is powered on, the CPU, or the designated master CPU in a
multiprocessor system, finds and executes firmware-resident code. The firmware performs a power-on
self-test (POST), which is a series of initialization and testing routines for various hardware components.
The firmware then loads a bootloader, a program that can load a more complex program such as an
operating system or perhaps the next-stage bootloader in what could be a multistage bootloading
mechanism. A bootloader may provide a user interface for selecting one of many operating systems to
boot and may also prompt for arguments to be passed to the selected operating system.
4.1.1. Varieties of Firmware
Specific firmware implementations may differ fromor may have details in addition tothe generic
discussion so far. In most cases, a platform-dependent entity, such as an even lower-level firmware than
the BIOS or Open Firmware, may be the very first stored program to gain control of the machine. This
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 2 of 86
firmware may perform some fundamental initialization and tests before passing control to the main user-
visible firmware, which is often called the CPU or system firmware. Installed hardware cards such as
SCSI, network, and video adapter cards may contain their own firmware in their own ROMs. During boot,
the main firmware passes control to these ancillary firmware modules.
In this chapter, we will discuss only user-visible firmware, which, for the sake of simplicity, may be
visualized as sitting directly atop the hardware. Typically, both the bootloader and the operating system
interact with the firmware. Moreover, we will use the term firmware by itself generically, to denote a
BIOS, Open Firmware, EFI, or any other variant.
Note that although modern operating systems typically do not use the BIOS once they finish booting,
older systems such as MS-DOS and CP/M made heavy use of BIOS services for implementing large parts
of their functionality.
Entire operating systems may also reside in firmware, as is the case with many embedded systems that use
a PROM as a boot device. It is even possibleand arguably usefulto use a conventional operating system as
a computer's firmware. The LinuxBIOS project is one such example.
4.1.2. Preferential Storage
User-configurable settings that are referenced during boot by the BIOSand in some cases by the operating
systemare stored in a low-power, battery-backed memory such as a CMOS-based device. A reserved area
on a disk drive may also be used to store such settings.
Modern Apple computers have a power management unit (PMU), a microcontroller chip that controls the
power consumption behavior of various devices. Still newer models have a more advanced system
management unit (SMU) instead of the PMU. The SMU also is an onboard microcontroller that controls
the computer's power functions.
The PMU takes care of spinning down hard disks and adjusting the backlight. It handles the machine's
sleep, wake-up, idle, turn-on, and turn-off behaviors, including deciding when not to put the machine to
sleepfor example, in the case of an active modem connection. The PMU also manages the onboard real-
time clock and maintains the parameter memory (PRAM). The SMU performs many similar functions.
Apple's SMU-related kernel extensions (such as AppleSMU.kext, AppleSMUMonitor.kext, and
IOI2CControllerSMU.kext) provide internal APIs for accessing battery information, controlling fans,
managing date and time, controlling the power supply, maintaining the PRAM, and so on.
The PRAM is a battery-backed memory used to store miscellaneous system configuration information
such as startup chime volume, time zone, speaker volume, DVD region setting, and the text corresponding
to a kernel panic. The PRAM's exact contents depend on the specific computer system and its
configuration. On a system running Mac OS X, less information is stored in the PRAM as compared to the
same computer running an earlier Apple operating system. The Mac OS X kernel accesses PRAM
contents through the Platform Expert.
The Reset Set
The PMU and the SMU can be reset in a model-dependent manner. For example, whereas a
notebook computer model may allow you to reset the PMU using a combination of the power
button and one or more keys, a Power Mac model may require a button to be pressed on the
logic board. The SMU on certain models can be reset by simply unplugging the power for a
few seconds.
Note that resetting the PMU or the SMU does not reset the PRAM. You can reset a
computer's PRAM by pressing and holding the key combination as you turn
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 3 of 86
the computer on. You must press the keys before the gray screen appears and must keep them
pressed until the computer restarts and you hear the startup chime for the second time.
Open Firmware uses another nonvolatile memorythe NVRAMfor storing its user-configurable variables
and some other startup information. The NVRAM is accessed by Open Firmware during system startup.
EFI similarly uses and accesses its own NVRAM. A typical NVRAM is based on flash memory.
4.2. A Whole New World
The Macintosh was not designed to run multiple operating systems. The Macintosh ROM contained both
low-level and high-level code. The low-level code was for hardware initialization, diagnostics, drivers,
and so on. The higher-level Toolbox was a collection of software routines meant for use by applications,
quite like a shared library. Toolbox functionality included the following:
Management of dialog boxes, fonts, icons, pull-down menus, scroll bars, and windows
Event handling
Text entry and editing
Arithmetic and logical operations
Before the iMac was introduced, Apple computers used a large, monolithic ROMalso called the Toolbox
ROMthat contained a substantial part of the system software as both low-level and high-level code.
Examples of low-level, hardware-specific code included hardware initialization code, drivers, feature
tables, and diagnostics. Examples of higher-level code included the 68K emulator, the nanokernel,
Toolbox managers, SCSI Manager, and QuickDraw. Note that the ROM contained not only code that was
needed by the computer at power-up time but also code that provided application-level APIs.
As Macintosh system software increased in functionality and complexity, it became increasingly difficult
to maintain the ROM. Apple attempted to ameliorate the situation by redirecting modifications and
changes to disk-resident files instead of changing the ROM itself. For example, the System File, which
was loaded early on during the boot process, contained portions of the Toolbox, ROM extensions and
patches, fonts, sounds, and other resources. The System File was loaded into RAM, after which its
contents were available to the operating system and applications. The concept of a System Enabler was
introduced in 1992 along with System 7.1. System Enablers allowed Apple to introduce new Macintoshes
without revising the base system software. For example, the Macintosh 32-bit System Enabler was a
system software extension and a replacement for the MODE32 software, which provided access to
memory-addressing features of System 7.1.
MODE32 Software
Certain machines such as the Macintosh II, IIx, IIcx, and SE/30 could have 32-bit support
and a larger virtual memory capability through a 32-bit System Enabler program (called
MODE32) on System 7. The standard ROMs of these machines were not 32-bit clean and
therefore were compatible only with 24-bit addressing. MODE32 allowed selecting and
changing between 24-bit and 32-bit addressing modes. With 32-bit addressing, it was
possible to use more than 8MB of contiguous physical memory. With virtual memory, it was
possible to use hard disk space as "swap" space to run programs.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 4 of 86
4.2.1. "New" Is Good News
With the introduction of the iMac, Apple reached a far cleaner separation between the hardware-specific
and generic (across various Apple computers) parts of the system software. The new approach used a
small Boot ROM that contained only the code needed to boot the computer, with the remaining
components of the system software residing as files on diskeffectively, a software ROM. The Boot ROM
has the ability to load the software ROM into a portion of physical memory (RAM). This portion, which is
marked read-only, is unavailable for other use. Apple used the term New World to refer to this
architecture. This was also called the ROM-in-RAM design. Another important feature of the New World
machines was the extensive use of Open Firmware. Although it had been introduced in earlier Apple
computers, Open Firmware's use was minimal in the so-called Old World machines. Table 41 summarizes
the temporal worldliness of the Macintosh family.
Table 41. The Macintosh Family: New and Old Worlds
CPU Bus ROM Software ROM World
68K NuBus Mac OS ROM (68K)
PowerPC PCI System ROM
(PowerPC)
Mac OS ROM (68K)
[a]
PowerPC PCI Open Firmware 1.x Old
Mac OS ROM
PowerPC PCI Open Firmware 2.x Old
Mac OS ROM
PowerPC PCI Open Firmware 3.x Mac OS ROM New
PowerPC PCI Open Firmware 4.x BootX (Mac OS New
X)
[a] The PowerPC System ROM started the nanokernel, on which the 68K Mac OS ROM ran
largely unmodified.
The iMac's ROM image resided in a file called Mac OS ROM in the System Folder. It contained the
Toolbox, kernel, and the 68K emulator. Once loaded, the ROM consumed approximately 3MB of physical
memory.
NuBus
NuBusspecified by the IEEE 1196 standardwas a simple 32-pin bus originally developed at
the Laboratory for Computer Science (LCS), Massachusetts Institute of Technology (MIT). It
was used in Apple computers beginning with the Macintosh II, until Apple switched to the
PCI bus. NeXT computers also used NuBus.
4.2.2. Modern Boot ROM (PowerPC)
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 5 of 86
The Boot ROM of a modern PowerPC-based Macintosh is stored in up to 2MB[3] of flash EEPROM.[4]
Over time, and especially with the advent of Mac OS X, the composition of the ROM has changed
greatly. For example, the modern ROM does not contain a 68K emulator or the nanokernel. The
firmware-resident code in the Boot ROM includes POST functionality for hardware initialization and
diagnostics. The firmware also contains Open Firmware, which completes hardware initialization,[5]
incrementally builds a description of the system's hardware, loads initial operating system software (the
bootloader), and eventually transfers control to the latter. Several properties of the Boot ROM can be
viewed on Mac OS X using the ioreg command-line utility.
[3] A dual-processor 2.7GHz Power Mac G5 contains 1MB of onboard flash EEPROM.
[4] The "EE" in EEPROM stands for electrically eraseable.
[5] Open Firmware automatically assigns interrupts to PCI devices.
$ ioreg -p IODeviceTree -n boot-rom -w 0 | less
...
| +-o boot-rom@fff00000 
| | {
| | "reg" = 
| | "has-config-block" = <>
| | "image" = 
| | "AAPL,phandle" = 
| | "security-modes" = 
| | "write-characteristic" = 
| | "BootROM-build-date" = 
| | "model" = 
| | "info" = 
| | "name" = 
| | "BootROM-version" = 
| | "hwi-flags" = 
| | }
...
The Boot ROM also contains device drivers for certain fundamental devices, such as the USB hub, Apple
USB keyboard and mouse, and Apple Bluetooth keyboard and mouse. Therefore, even with a wireless
(Bluetooth) keyboard and mouse, you can drop into the firmware before the operating system boots and
interact with the system.
The file type of Apple's software ROM file is tbxi, which stands for Toolbox imagea remnant of the Old
World. The Toolbox image file is also called a bootinfo file. It resides on the boot device and has a
localizable name. Therefore, it is searched for based on file typenot filename. Its default location is in the
directory marked as the "blessed folder" in the HFS Plus volume header.[6] If you perform a file search
using the Finder on Mac OS X and specify tbxi as the file type to search for, you should get one result on
a computer with a single Mac OS X installation: /System/Library/CoreServices/BootX, which is the
Mac OS X bootloader. The same search under Mac OS 9 or Mac OS 8 would yield the file /System
Folder/Mac OS ROM. On a Mac OS X 10.4 or newer system, such a search could be performed through
Spotlight. The four-character file type is converted to a four-byte (32-bit) integer, each of whose bytes is
the ASCII value of the corresponding file type character. The ASCII values of "t", "b", "x", and "i" are
0x74, 0x62, 0x78, and 0x69, respectively. Therefore, the file type to use while searching with Spotlight is
0x74627869.
[6] We will look at details of HFS Plus in Chapter 12.
$ mdfind 'kMDItemFSTypeCode == 0x74627869'
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 6 of 86
/System/Library/CoreServices/BootX
/System Folder/Mac OS ROM
$
The specifier for Open Firmware's default boot device contains \\:tbxi as the filename component,
which tells the firmware to look for a file of type tbxi in the boot directory. The volume header of an
HFS Plus file system contains an eight-element array called finderInfo. Each element of this array is a
32-bit unsigned integer. The first element contains the ID of the blessed folder, which contains BootX on
Mac OS X, and Mac OS ROM under Mac OS 9. This way, Open Firmware can easily find a bootable
systemif one exists. You can use bless(8) to set volume bootability and startup disk options. The -info
argument of bless displays relevant elements of the finderInfo array.
$ bless -info /
finderinfo[0]: 3317 => Blessed System Folder is /System/Library/CoreServices
finderinfo[1]: 0 => No Startup App folder (ignored anyway)
finderinfo[2]: 0 => Open-folder linked list empty
finderinfo[3]: 877875 => OS 9 blessed folder is /System Folder
finderinfo[4]: 0 => Unused field unset
finderinfo[5]: 3317 => OS X blessed folder is /System/Library/CoreServices
64-bit VSDB volume id: 0x79A955B7E0610F64
Note that on an x86-based Macintosh computer, the second element of the finderInfo array contains the
ID of the blessed system file, which is the EFI bootloader in its case.
$ hostinfo
...
2 processors are physically available.
2 processors are logically available.
Processor type: i486 (Intel 80486)
...
$ bless -info /
finderinfo[0]: 3050 => Blessed System Folder is /System/Library/CoreServices
finderinfo[1]: 6484 => Blessed System File is /System/Library/CoreServices/boot.efi
...
4.3. Power-On Reset
When a PowerPC-based Apple computer system is powered on, a power-on reset (POR) unit handles the
"coming to life" of a processor. On the 970FX, the POR sequence consists of seven phases tracked by
hardware state machines. The sequence involves communication between the processor core, the North
Bridge (the U3H), and a custom microcontroller. During the sequence, the processor is initialized by a
hardcoded set of instructions, which also run certain tests and synchronize the processor-interconnect
interfaces. In the third phase of the POR sequence, the hardware interrupt offset register (HIOR) is
initialized. The HIOR is used for interrupt vector relocation: It defines the base physical address for the
interrupt vectors. In the last phase, the processor's storage subsystem clock is started and the storage
interface is reset. At this point, the processor starts fetching instructions at the system reset exception
vector. The system reset exception is a nonmaskable, asynchronous exception that has the highest priority
of all exceptions. It causes the processor's interrupt mechanism to ignore all other exceptions and generate
a non-context-synchronizing interruptthe system reset interrupt (SRI).
Machine Check Exception
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 7 of 86
Another example of a nonmaskable, asynchronous exception is the machine check exception
(MCE). It can only be delayed by a system reset exception.
The handler for the SRI is the first entry in the PowerPC interrupt vector table. Its effective address is
calculated by combining its vector offset, which is 0x100, with certain bits of the HIOR. Thus, the
processor core resumes execution at HIOR + 0x0000_0000_0000_0100. At power-on, the SRI handler,
and any others in the table, all belong to Open Firmware, which is in control of the processor. At this
point, the processor is in real address modethat is, memory translation is disabled (an effective address is
the same as a physical address). Moreover, the processor caches are disabled.
Note that a system reset exception could be due to a hard or a soft reset. A hard resetsuch as one due to a
real PORis seen only by Open Firmware. In contrast, the Mac OS X kernel will see only a soft
resetregardless of whether the processor is being brought up after a POR or is waking up from sleep.
On a multiprocessor system, Open Firmware selects one processor, using a suitable algorithm, to be the
master processor, which is then responsible for booting the client and providing the Open Firmware user
interface. The other processors are typically stopped so they do not interfere with the master processor.
4.4. Open Firmware
Open Firmware originated at Sun Microsystems in 1988. The "pizza-box" SPARCstation 1 was released
in 1989 with OpenBoot 1.0, the first shipping implementation of Open Firmware. The firmware standard
was later adopted by Apple, IBM, and other vendors such as those creating ARM-based[7] and PowerPC-
based embedded systems. Sun's implementation is trademarked as OpenBoot, whereas Apple simply calls