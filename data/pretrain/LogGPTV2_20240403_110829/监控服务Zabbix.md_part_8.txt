马哥教育
11:04:30
11:04:40
11:04:50
状态  可用性
群组所有
11:05:00
aの支持Eshare ?
11:05: 10
11:05:20
11:05:30
创建主机
11:05:40
11:05:50
agent代理程序-->创建代理:
4.3.4.3：zabbixweb添加主动代理：
4.3.4.2：重启zabbix proxy服务：
4.3.4.1：zabbix proxy主动配置:
root@zabbix-proxy-active:~# systemctl
root@zabbix-proxy-active:~# systemctl 
web服务器IP：172.31.0.107
主动模式服务器IP：172.31.0.102
zabbix server: 172.31.0.101
LogslowQueries=3000 #毫秒，多久的数据库查询会被记录到日志
Timeout=30 #监控项超时时间，单位为秒
HistoryIndexCacheSize=128M#历史索引缓存的大小
Historycachesize=2G #保存监控历史数据占用的最大内存
cachesize=2G #保存监控项而占用的最大内存 
StartJavaPollers=20 
JavaGateway=172.31.0.104 #java gateway服务器地址,当需要监控java的时候必须配置否则监控不到数据
StartPollers=20
DataSenderFrequency=5 #数据发送时间间隔，默认为1秒，范围为1-3600秒，被动模式不使用 
HeartbeatFrequency=60 
ProxyofflineBuffer=720 #未提交到zabbi×server的时间保留时间
ProxyLocalBuffer=720
DBPort=3306 #数据库端口
DBPassword=123456 #数据库用户密码
DBName=zabbix_proxy_active #使用的数据库名称
DBHost=172.31.0.104
ListenPort=10051 #zabbix proxy监听端
name是一致的！
Hostname=magedu-jiege-proxy-active#代理服务器名称，需要与zabbix server添加代理时候的proxy
ProxyMode=0 #0为主动，1为被动
# vim /etc/zabbix/zabbix_proxy.conf 
LogFile=/tmp/zabbix_proxy.log 
Server=172.31.0.101 #zabbixserver服务器的地址或主机名
User=proxy 
马哥教
#连接数据库的用户名称
#启动的数据采集器数量
#启动多少个线程采集数据
#数据库服务器地址
#心跳间隔检测时间，默认60秒，范围0-3600秒，被动模式不使用
#已经提交到zabbi×server的数据保留时间
马哥教育
 enable  zabbix-proxy
 restart zabbix-proxy
马哥教育
哥
---
## Page 65
需要修改zabbix agent中配置文件ServerActive的值为主动模式zabbix proxy。
4.3.4.5：zabbix agent配置文件:
验证当前主机和主动模式proxy状态：
使用主动模式proxy：
修改或者新添加一台zabbix agent，并使用zabbix主动模式代理服务器进行监控：
4.3.4.4：zabbix agent使用主动代理：
主机群组   模板   主机  维护  动作   关联项事件   自动发现   服务
ZABBIX监测资产记录 报表 配置 管理
agent代理程序
主机
ZABBIX
agent代理程序
magedu-jege-prxy-active: 1.
名称
agent代理程序
由agent代理程序监测
*agent代理程序名称magedu-jege-proxy-active
加密
监测  资产记录•报表 配置  管理
系统代理程序模式主动式被动式
认证用户群组 用户
已启用
描述
代理地址172.31.0.102
L
magedu-jiege-proxy-active
描述
更新
壳隆全克隆删除取消
应用集 10监控项 41触发器17图形7
应用集
报警媒介类型
监控项
脚本 队列
触发器
图形
agent代理程序
要监控什么任何服务器agent代理程序
自动发现2 Web监测
自动发现
模板
在此输入搜索
哥教育
Web监测
172.31.0.106: 10050
接口
应用
选
---
## Page 66
zabbix agent与zabbix proxy与zabbix srver的交互过程
4.3.3.8：交互过程：
4.3.3.7：验证主机监控数据及图形：
4.3.3.6：zabbixweb验证当前主机状态：
图形
仪表板问题
ZABBIX监测资产记录报表配置管理
主机
主机群组   模板   主机   维护   动作   关联项事件   自动发现   服务
ZABBIX 监测资产记录报表 配置  管理
172.31. 10-web61
名称
# systemctl 
Include=/etc/zabbix/zabbix_agentd.d/*.conf
Hostname=172.31.0.106
ServerActive=172.31.0.102
Server=172.31.0.101,172.31.0.103 #zabbix server与zabbix passive代理的地址
LogFilesize=0 
LogFile=/var/log/zabbix/zabbix_agentd.log
PidFile=/var/run/zabbix/zabbix_agentd.pid 
# grep "^[a-z]" /etc/zabbix/zabbix_agentd.conf
0.2Kbp
0.4Kbps
0.6 Kbp
0bpg
12-151414
19:15:00
Web监测
 restart zabbix-agent
最新数据图形聚合图形
agent代理程序
要监控什么 任何服务器 agent代理程序
9:19:00
模板 在此输入搜索
应用集 监控项 触发器  图形  自动发现  Web监测  接口
19:22:00
19:22:30
拓扑图 自动发现服务
19:23:00
1-
172.31.0.107-web2: Network traffic on etho
19:24:3
19:2500
19:25:3
应用重设
群组Linux servrs主机17231.0.107-web2图形Networktafic onetho0
选择
选择
9:27:0
19:27:3
19:28:0
DNS
模板
9: 29 :0
19:29:3
9:30:0
19:31:3
9:32:0
19:32:3
9:33:0
2019-12-15 19:14:14
9: 34:0
状态  可用性 
群组 所有 
教
支持Share
9:35:0
1111
支持
9: 38:00
19: 38:3
无
---
## Page 67
6408390,"ns":889276519},
{"host":"172.31.0.107","key":"system. cpu.switches","value":"218790","id" :47,"clock": 157
{"host":"172.31.0.107","key":"system.cpu.load[percpu,avg5]","value":"0.005000","id" :46,
{"host":"172.31.0.107"
{"host":"172.31.0.107","key":"system.cpu.intr","value":"164526","id":43,"clock":1576408
data","session" :"a62af26d487fd475d3f94d36c58880e5","data":
#收到zabbix agent返回的监控数据
[255,10276,10270]]3,"hostmacro":{"fields":
#收到zabbix server返回的监控项
null]
S! plasou-s6elt'y pue (t'o) u! snzess'y pue 20t'o'te'z4t,=asou'y auaum 
{"host":"172.31.0.107","key":"system.cpu.load[percpu,avg15]","value" :"0.000000","id":44
390,"ns":886469760},
 zua6e,..+sanbau.3. 106 uaddeu2 296'419161:51216107:5711
["globalmacroid","macro","value"],"data": [2,"{$SNMP_cOMMUNITY}","public"]]?,"hosts":
h.
#zabbi× proxy向zabbi× server发起请求获取主机监控项
{"fields":
found"}]
zabbix agent向zabbix proxy申请监控项：
# vim /var/log/zabbix/zabbix_proxy.log
"clock":1576408390,"ns":887917992},
"clock":1576408390,"ns":887473903}，
,"clock" :1576408390,"ns":887003663},
':885729681},
["hostmacroid","hostid","macro","value"],"data":[]} 
["hosttemplateid","hostid","templateid"],"data": [251,10270,10050],
[7,10276,1,1,1,"172.31.0.107","",
I"interfaceid","hostid","main","type","useip","ip","dns","port","bulk"],"data"
(clock,host,listen_ip,listen_dns,listen_port,host_metadata) values 
 361:20191215:191141.647 Received [f"globalmacro":{"fields":
 4697:20191215:185229.431 query [txnlev:1] [insert into proxy-autoreg_host 
.hostid,h.status,h.tls_accept,h.tls_issuer,h.tls_subject,h.tls_psk_identity,a.host_met
 4697:20191215:185229.426 query [txnlev:0] [select 
4697:20191215:185229.4261
 2219:20191215:185229.416 In parse_list_of_checks(
2219:20191215:185229.416 got ["response":"failed","info":"host [172.31.0.107] not
 2219:20191215:185229.406 before read 
,"tls_issuer"
,"ipmi_available","snmp-available",
,"key":"system.cpu.load[percpu,avgl]","value":"0.010000","id":45,
,"tls_subject"
 In get_hostid_by_host() host:'172.31.0.107' metadata:''
,"10050",1ll3,"hosts_templates":{"fields":
,"tls_psk_identity",'
---
## Page 68
5.1.1：TCP端口的十一种连接状态：
在建立连接的时候，所谓的客户端与服务端是相对应的，即要看是谁主动连接的谁，如果A主动连接B那么A就是客
性的应答，否则发送方将认为此数据丢失，并重新发送此数据。
作，在发送数据前它需要在发送方和接收方建立一个连接，数据在发送出去后，发送方会等待接收方给出一个确认
5.1：监控LinuxTCP连接状态：
户端而B是服务端，如果返过来B主动连接A，那么B就是客户端而A就成了服务端。
服务，TCP的工作主要是建立连接，然后从应用层程序中接收数据并进行传输。
验证数据
自定义模板和图形及触发器
zabbix agent获取监控项数据
通过脚本采集监控项数据
自定义监控项
五：zabbix监控案例实战：
TCP，全称Transfer Control Protocol，中文名为传输控制协议，它工作在OSI的传输层，提供面向连接的可靠传输
FIN报文后，并没有收到对方的ACK报文，反而却也收到了对方的FIN报文。什么情况下会出现此种情况呢？其实细想-
文后，按理来说是应该先收到（或同时收到）对方的 ACK报文，再收到对方的FIN报文。但是CLOSING状态表示你发送
CLOSING：这种状态比较特殊，实际情况中应该是很少见，属于一种比较罕见的例外状态。正常情况下，当你发送FIN报
TIME_WAIT状态，而无须经过FIN_WAIT_2状态。
CLOSED可用状态了。如果FIN_WAIT_1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到
TIME_WAIT：出现在主动关闭方，表示收到了对方的FIN请求关闭报文，并发送出了ACK报文，就等2MSL后即可回到
FIN_WAIT_2：出现在主动关闭方，当被动方回应FIN_WAIT_1的ACK报文后，则进入到FIN_WAIT_2状态
FIN_WAIT_1状态一般是比较难见到的，而FIN_WAIT_2状态还有时常常可以用netstat看到。
后，则进入到FIN_WAIT_2状态，当然在实际的正常情况下，无论对方何种情况下，都应该马上回应ACK报文，所以
闭连接，向对方发送了FIN=1的断开连接请求报文，此时该SOCKET即 进入到FIN_WAIT_1状态。而当对方回应ACK报文
FIN_WAIT_1：出现在主动关闭方，FIN_WAIT_1状态实际上是当SOCKET在ESTABLISHED状态时，当任意一方想主动关
务器第三次收到客户端的ACk确认就会将端口置为ESTABLISHED并开始传输数据。
ESTABLISHED：表示已经连接成功，客户端收到服务器的确认报文会回复服务器，然后就将端口置为ESTABLISHED，服
SYN_SENT：SYN_SENT状态表示客户端已发送SYN=1的请求连接报文，发送之后客户端就会将自己的端口状态置为
将在自己的端口置为SYN_RCVD。
SYN_SENT.
暂，正常在服务器上是很少看到的，除非服务器故意不发送最后一次握手数据包，服务器返回给客户端SYN确认之后就会
LISTEN:
CLOSED：端口默认是关闭状态。
服务器程序开始监听一个端口，就是LISTEN状态。
TCP采用虚电路连接方式进行工
---
## Page 69
5.1.3.1：TCP三次握手：
5.1.3：TCP三次握手与四次断开：
安装服务端与客户端将端口状态区分：
5.1.2：端口转换状态：
都具有的：CLOSED、ESTABLISHED
被动断开方：LISTEN、SYN_RCVD、CLOSE_WAIT、LAST_ACK
主动端口方：SYN_SENT、FIN_WAIT1、FIN_WAIT2、CLOSING、TIME_WAIT
可以进入到CLOSED可用状态了。
LAST_ACK：是被动关闭方在主动关闭一方在发送FIN报文后，最后等待对方的ACK报文，当再次收到ACK报文后，也即
CLOSE_WAIT:
下，
k确认
→端口关闭
→
→服务端端口状态转换
，也不难得出结论：那就是如果双方几乎在同时close一个sOCKET的话，那么就出现了双方同时发送FIN报文的情
客户端端口状态转换
FIN_WAIT_2
FIN_WAIT_1
SYN_RCVD
表示在等待关闭端口，这种状态存在于被动关闭的一方。
下收到工服务用时
1. 发送FIN主动申请断开
服务端瘤用属序主动
CLOSED
马哥教育
2. 收到客户端FIN并回复Ack 
1.客户端打开随机端口发送SYN给服务端
等待2MSL的超时时间
而元恨
SYN_SENT
CLOSE_WAIT
LAST_ACK
。收害户端的hc,将者增
3.发送FIN和ACK给客户端
---
## Page 70
5.1.4：监控TCP连接数脚本：
5.1.3.2：TCP四次断开:
申请主动类闭
ESTABLISHED
main({
/tmp/tcp_conn.txt 
tcp_conn_status(){
#!/bin/bash
FIN_WAIT_2
#Author:zhang Shijie
TIME_WAIT
2 MSL时间
CLOSED
ESTABLISHED
程序调用端口：
关闭
 SYN_SENT
TCP_NUM=$(grep "$TCP_STAT" 
< ,]s' ud (s u )o a ]s++ <N, e 丨 ue- ss
echo $TCP_NUM
fi
TCP_STAT=$1
 Closed
在释放连接之前，主动断开方必须等
 待2 MSL的TIME_WAIT超时时间
Client
 TCP_NUM=0
agentd.d/tcp_conn_plugin.sh
 ACK=1,FIN=1,Ack=y(500),
(OTT10001110010100100)
SYN=1, ACK=0, Seq=x(100)
'/tmp/tcp-conn.txt| cut -d'＇-f2)
,FIN=1
Data
我
: Seq=y(
,Seq=x(200)
马哥教育
Server
 Server
 ESTABLISHED 
SYN_RCVD
LISTEN:程序开启监听
Closed
默认端口关闭状态:
LAST_ACK
CLOSE_WAIT 
ESTABLISHED
被动关闭
---
## Page 71
5.1.7.1：导入模板：
5.1.7：zabbixweb导入模板：
5.1.6：zabbix server测试监控项数据：
zabbix agent添加自定义监控项并调用脚本获取到监控项数据
5.1.5：zabbix agent添加自定义监控项：
配置-模板-导入：
297 UserParameter=linux_status[*],/etc/zabbix/zabbix_agentd.d/tcp_conn_plugin.sh "$1"
# vim /etc/zabbix/zabbix_agentd.conf 
"linux_status["tcp_status","LISTEn"]"
main $1 $2 
6
 chmod a+x /etc/zabbix/zabbix_agentd.d/tcp_conn_plugin.sh
$2
 systemctl
马哥教育
马哥教育
esac
case $1 in 
tcp_status)
restart zabbix-agent #重启zabbix agent
 tcp_conn_status $2; 
马哥教育
马哥教育
哥教育
马哥教育
马哥教育
马哥教育
---
## Page 72
5.1.8：将TCP监控模板关联至主机：
5.1.7.2：模板导入成功：
导入
ZABBIX
导入
ZABBIX
已成功导入
监测
监测
导入文件选择文件未选择任何文件
资产记录  报表  配置 管理
资产记录报表  配置管理
规则
规则
导入取消
映射值
拓扑图
聚合图形
自动发现规则
应用集
模板间的关联
模板聚合图形
导入
映射值
拓扑图 
聚合图形
Web 场景
触发器
自动发现规则
监控项 
应用集
模板间的关联 
模板聚合图形
取消
更新现有的 创建新的 删除失败 
□□00
□
口
口
口
口
囚
囚
口
□□□
□□□
区
四四
口
□□ □ □□
口
教育
马哥教育
马哥教育
---
## Page 73
5.2.1：安装memcache服务：