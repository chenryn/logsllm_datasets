3.1 Passive DNS Data
Our approach is a graph analysis technique of data from
passive DNS replication. Passive DNS replication captures
inter-server DNS messages through sensors that are vol-
untarily deployed by contributors in their DNS infrastruc-
tures. The captured DNS messages are further processed
and then stored in a central DNS record database which can
be queried for various purposes [14]. Though passive DNS
data contain rich information of diﬀerent aspects of DNS, in
this work we focus on analyzing A records in the database.
Speciﬁcally, each record is of the form (cid:104)d, i, Tf , Tl, c(cid:105), mean-
ing domain d is resolved to IP i, and Tf and Tl are the
timestamps when this resolution was observed for the ﬁrst
and the last time respectively in the database, and c is the
number of times that this resolution was observed via pas-
sive DNS replication. We call the period (Tf , Tl) the ob-
servation window of the resolution. In practice, a domain
may be hosted in multiple IPs, and an IP may host multiple
domains during diﬀerent periods of time. A unique record
exists for each diﬀerent domain to IP resolution. Further
it is possible (in fact many such cases exist) in the passive
DNS database that two records have the same domain but
diﬀerent IPs with overlapping observation windows, which
suggests that the domain is alternatively hosted in diﬀerent
IPs. Similarly, records with the same IP but diﬀerent do-
mains with overlapping observations windows may suggest
the IP hosts multiple domains at the same time. Given a
set of A records in the passive DNS database, we can easily
construct a domain-resolution graph, a bipartite graph with
one side corresponds to domains and the other side to IPs.
An edge is formed from a domain node u to an IP node i if
record (cid:104)d, i, Tf , Tl, c(cid:105) exists. Our goal is to identify malicious
domains based on a domain-resolution graph.
Several recent eﬀorts propose to identify malicious do-
mains through host-domain graphs [7] (also called user query
behavior [8]), i.e., which host or user queries the DNS servers
about which domain in an enterprise or an ISP. Compared
with host-domain graphs, domain-resolution graphs oﬀer sev-
eral practical advantages. First, passive DNS replication
collects data globally from a large group of contributors. It
oﬀers a more comprehensive view of mapping between do-
mains and IPs, while host-domain graphs are usually limited
to the perspective of a single enterprise or an ISP. Second,
host-domain graphs contain private information about in-
dividual users, which tends to be very sensitive. It would
be hard to share such information without raising serious
privacy concerns. Domain-resolution graphs, on the other
hand, are aggregated information of domain-ip mapping in-
stead of about individuals. They are publicly available, and
any ﬁndings over them can be shared without privacy risks.
Third, the association revealed between domains through
domain-resolution graphs is not tightly coupled with the be-
havior of individual users, and therefore tends to be harder
to manipulate, which we will elaborate more in the rest of
this section. Nevertheless, domain-resolution graphs and
host-domain graphs are two important data sources for mali-
cious domain discovery. Techniques developed for each type
of graphs are complementary and could be combined to oﬀer
eﬀective techniques to defend against malicious domains.
We are not the ﬁrst to utilize domain-resolution data to
identify malicious domains. For example, both Notos [1]
and Exposure [3] use features derived from passive DNS
data. However, as mentioned in section 1, most of these
features are local, in the sense that they are measured from
the perspective of individual domains (e.g., statistics of IPs
associated with a domain and average length and charac-
ter distributions of domain names). We instead focus on
global structural patterns among domains rather than local
features. Therefore, our approach can be seen as comple-
mentary to those approaches, by exploring the problem from
a diﬀerent dimension. Also note that some of the features
used in past work (e.g., time-based features like daily simi-
larity, repeating patterns, average TTL etc.) require access
to DNS responses to each individual DNS query, which may
be quite sensitive and often not publicly available. On the
other hand, our technique targets totally public passive DNS
data, and do not require such features.
3.2 Domain Graph
Our approach is based on a simple intuition. If a domain
d is known to be malicious, another domain with “strong as-
sociation” with d is likely to be malicious as well. Therefore,
hopefully from a small set of known malicious domains, we
can discover a large set of unknown malicious ones. The key
questions are (1) how to deﬁne association between domains
from passive DNS data that supports such inferences; and
(2) how to determine maliciousness of domains that have
no direct associations with known malicious domains. Intu-
itively, if two domains are hosted at the same IP during a
certain period of time, they are somewhat related. For ex-
ample, they may be owned by the same owner, so that they
can be arranged to be hosted alternatively at the IP. Ap-
parently, the more IPs that the two domains are co-hosted
at, the more likely there exists strong associations between
them. The same intuition can also be applied to discover
strong association between two IPs if they host many com-
mon domains. Admittedly, there are many situations in
practice where two domains are co-hosted at many IPs but
they are not related in any way in terms of malicious domain
inferences, which we will discuss later. Next, we will present
in detail how to deﬁne the association between domains, as
well as the inference process of malicious domains.
A domain resolution graph is an undirected bipartite graph
G(D, I, E) where D is a set of domains, I is a set of IPs, and
an edge {d, i} ∈ E if domain d is resolved to IP i. Given a
domain d, we denote ip(d) the set of IPs that d is resolved
to. Similarly, domain(i) denotes the set of domains resolved
to an IP i. In practice, we will limit our analysis to passive
DNS records within a certain period of time to ensure rel-
evance of the analysis results. The tradeoﬀ between longer
and shorter analysis periods is discussed later.
Given a domain resolution graph, we construct a domain
graph, an undirected weighted graph DG(D, E), where D is
a set of domains, and an edge e = {d1, d2} ∈ E if ip(d1) ∩
ip(d2) (cid:54)= ∅, i.e., d1 and d2 are co-hosted at some common IPs.
The weight of an edge {d1, d2}, denoted w({d1, d2}), should
reﬂect the strength of association between the two domains.
There are many possible ways to deﬁne edge weights. In this
paper, we deﬁne
(cid:26) 1 −
1
w(d1, d2) =
1
1+|ip(d1)∩ip(d2)|
if d1 (cid:54)= d2
otherwise
to reﬂect two intuitions. First, the more common IPs two
domains resolve to, the stronger their association, there-
fore, the bigger the weight. Second, when the association
is strong enough, adding additional common IPs would not
4
Figure 1: An example domain resolution graph and its cor-
responding domain graph
make much diﬀerence in terms of association. For exam-
ple, two domains with 50 common IPs would already have
very strong association. Their edge weight therefore should
be close to (instead of for example half of) that of the case
if they share 100 common IPs. On the other hand, when
the number of common IPs is small, increasing common IPs
should have a bigger impact on the strength of association
and thus edge weights as well. Note that when two domains
d1 and d2 do not share any common IPs, w(d1, d2) = 0
according to our deﬁnition. Clearly w(d1, d2) ∈ [0, 1) if
d1 (cid:54)= d2. Figure 1 shows an example domain resolution
graph and its corresponding domain graph.
Another seemingly compelling way to measure associa-
tion between domains is to use Jaccard similarity, which
has been applied in many applications, including in security
contexts [13]. In our problem, it would be deﬁned as
|ip(d1) ∩ ip(d2)|
|ip(d1) ∪ ip(d2)|
We did not choose to use Jaccard similarity in our work, due
to the observation that the set of common IPs alone reﬂects
strong association between domains, even if each domain
has many of their own unique IPs beside the common ones
(which will result in low Jaccard similarity).
A domain graph often reveals implicit association between
domains. When visualized, we often ﬁnd interesting com-
munities of domains, which may guide further investigation
when combined with other intelligence. For example, ﬁg-
ure 2 shows the domain graph extracted from the subdo-
mains of 3322.org (a dynamic DNS service known to have
many malicious subdomains) from the passive DNS dataset
of March 2014. We can clearly see the structures and com-
munities among those subdomains. Though in this paper we
explore how to utilize domain graphs to discover malicious
domains, we believe domain graphs will be useful for many
other domain related security analysis and intelligence.
3.3 Path-based Inference
Given a set of known malicious domains, called seeds, our
goal is to infer the maliciousness of unknown domains based
on their associations with the seeds. For those directly con-
D1	
  D2	
  D3	
  D4	
  D5	
  D6	
  D1	
  D2	
  D3	
  D4	
  D5	
  D6	
  0.75	
  0.5	
  0.67	
  0.5	
  0.8	
  0.5	
  0.67	
  Domain	
  IP	
  Domain	
  Resolu9on	
  Graph	
  Domain	
  Graph	
  malicious domain. Second, weak association with multiple
known malicious domains cannot be easily accumulated to
form strong evidence of a domain’s maliciousness, because
weak association may happen in many legitimate network
management scenarios. Our goal is to conduct inferences
through strong, beyond normal associations to ensure infer-
ence accuracy. The use of exponential decay reﬂects this
intuition.
It is easy to see that mal(d, S) is in the range
[0, 1], as the latter part of the equation is weighted by a
factor 1 − assoc(s1, d).
Note that we do not simply deﬁne
(cid:88)
i=1,...,n
mal(d, S) =
1
2i−1 assoc(si, d))
Figure 2: The domain graph of subdomains of 3322.org
extracted from a passive DNS database
nected with the seeds in the domain graph, we can use edge
weights directly to capture such associations. Next we show
how to infer associations between domains which do not
share any IP (i.e., no direct edge between them).
edge weights in P , i.e., w(P ) = (cid:81)
Let P = (d1, d2, . . . , dn−1, dn) be a path between d1 and
dn. We deﬁne the weight of P to be the product of all the
1≤i≤n−1 w(di, di+1). A
path implies a sequence of inferences of association. The
longer the path is, the less the certainty of the inference.
Therefore, we choose to discount the association by the edge
weight of each hop. As multiple paths may exist between
two domains, we choose the weight of the strongest path
(i.e., with the largest weight among all paths) to capture
their association, i.e., given all paths P1, . . . , Pk between do-
mains d1 and d2, we deﬁne assoc(d1, d2) = max1≤i≤kw(Pi).
Note that it is possible that the association between two
connected domains is larger than their edge weight, because
though they may not share many common IPs, they may
form strong association through other domains. Such in-
direct association allows us to “propagate” maliciousness of
the seed domains to the whole graph instead of only to their
direct neighbors. Next we deﬁne the malicious score of do-
mains based on their association with the seed domains.
Let S be the set of seeds. Given a domain d, denote M (d)
as the list (assoc(s1, d), . . . , assoc(sn, d)), where si ∈ S and
assoc(si, d) >= assoc(si+1, d), for i = 1, . . . , n − 1. In other
words, M (d) is a sorted list of the association of d to each of
those in the seeds. The malicious score of d given S is then
deﬁned as:
(cid:16)
mal(d, S) = assoc(s1, d)+
1 − assoc(s1, d)
(cid:17) (cid:88)
i=2,...,n
1
2i−1 assoc(si, d))
Intuitively, the largest association between d and a known
malicious domain contributes the most to the maliciousness
of d. This is further enhanced with its association with
other seeds in an exponential decay manner. This design
is to capture two intuitions of malicious domain inferences.
First, a strong association with even a single known mali-
cious domain would be convincing evidence of a potential
5
A mathematical reason is that this deﬁnition will produce a
score between 0 and 2 instead of between 0 and 1. We could
certainly scale it back to the range [0-1]. But a more tech-
nical reason is that this deﬁnition will give quite diﬀerent
score to the cases where (1) a domain has a strong asso-
ciation with a single malicious seed, and (2) a domain has
strong associations with several malicious seeds. The latter
case’s score would be approximately up to two times of that
of the former case. As mentioned above, we would like to
treat the former case as already with convincing evidence,
and thus should have a score close to the latter case, which
is the rational of the weight 1 − assoc(s1, d).
Once the malicious score for each domain is computed, we
can specify a threshold t between [0,1] such that domains
whose malicious score is over t will be labeled as potential
malicious domain.
Example 3.1. Consider the simple domain graph in ﬁg-
ure 1. Assume D3 and D5 are known to be malicious, i.e.,
S = {D3, D5}, and we would like to compute mal(D1, S).
We see that the strongest path between D1 and D3 is sim-
ply the edge connecting them. Therefore, assoc(D1, D3) =
0.5. Similarly, the strongest path between D1 and D5 is
(D1, D4, D5), and we have assoc(D1, D5) = 0.536. Then,
since assoc(D1, D5) > assoc(D1, D3), we have mal(D1, S) =
0.536 + (1 − 0.536) × 0.5 × 1
21 = 0.625. We can compute
similarly that mal(D2, S) = 0.788, mal(D4, S) = 0.85 and
mal(D6, S) = 0.714. If we set the threshold t = 0.75, D2
and D4 will be ﬂagged as potential malicious domains.
3.4 Practical Considerations
Our discussion so far is based on the observation that a
strong association between two domains exists if they are
hosted at many common IPs in a period of time. This as-
sociation may suggest that they are controlled by the same
owner. For example, a botnet master may deploy phishing
websites among a subset of bots it controls. These web-
sites will then be associated due to the IPs of those bots.
However, as readers may have already noticed, there are
many legitimate scenarios where domains share IPs. For
example, an organization may also host several of its own
domains among a set of servers for load balancing or fault
tolerance. Such a scenario does not invalidate our infer-
ence, as those domains are still “controlled” by the same
entity. If one of them is malicious due to the compromise
of such servers, other domains hosted at the same servers
could also likely be malicious. A more challenging case is
due to “public IPs”, such as those in web hosting, cloud
and content delivery networks (CDN), where domains from
unrelated owners would be hosted at the same pool of IPs.
For example, two domains hosted at Amazon Web Service
(AWS) could have many shared IPs. But the fact that one
domain serves malicious contents does not imply that the
other will have high chance to be malicious as well, which
renders our observation invalid. Note that this situation is
diﬀerent from dynamic DNS services such as no-ip.com and
dnsdynamic.org. In dynamic DNS, though a user can create
multiple subdomains under a top domain, no hosting service
is provided. The user still has to host those subdomains in
his own servers, which results in linking those subdomains
together when they share IPs.
An obvious way to ﬁx this problem is to exclude from
our analysis such public IPs, e.g., those belonging to AWS,
CloudFlare and Akamai. However, it would be impracti-
cal to list all public IPs, given the large number of service
providers in the Internet. In this paper, we adopt two heuris-
tics to deal with this problem pragmatically. First, if an IP
hosts a huge number of domains in a period of time, it is
likely to be a public IP. Therefore, we exclude IPs if they host
more than t domains within a certain time period, where t is
a conﬁgurable parameter. Second, to further strengthen our
conﬁdence of domain associations, instead of simply count-
ing the number of common IPs that two domains share, we
consider the diversity of the shared IPs as reﬂected by their
ASNs when computing their edge weight. Speciﬁcally, given
a set I of IPs, let asn(I) denote the set of ASNs that the