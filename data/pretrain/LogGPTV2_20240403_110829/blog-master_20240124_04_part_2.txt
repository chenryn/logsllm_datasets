初始化读写节点的本地数据目录 `~/primary/`：  
```  
$HOME/tmp_basedir_polardb_pg_1100_bld/bin/initdb -D $HOME/primary  
```  
在共享存储的 `/nvme1n1/shared_data/` 路径上创建共享数据目录，然后使用 `polar-initdb.sh` 脚本初始化共享数据目录：  
```  
# 使用 pfs 创建共享数据目录  
sudo pfs -C disk mkdir /nvme1n1/shared_data  
# 初始化 db 的本地和共享数据目录  
sudo $HOME/tmp_basedir_polardb_pg_1100_bld/bin/polar-initdb.sh \
    $HOME/primary/ /nvme1n1/shared_data/  
```  
编辑读写节点的配置。打开 `~/primary/postgresql.conf`，增加配置项：  
```  
port=5432  
polar_hostid=1  
polar_enable_shared_storage_mode=on  
polar_disk_name='nvme1n1'  
polar_datadir='/nvme1n1/shared_data/'  
polar_vfs.localfs_mode=off  
shared_preload_libraries='$libdir/polar_vfs,$libdir/polar_worker'  
polar_storage_cluster_name='disk'  
logging_collector=on  
log_line_prefix='%p\t%r\t%u\t%m\t'  
log_directory='pg_log'  
listen_addresses='*'  
max_connections=1000  
synchronous_standby_names='replica1'  
```  
编辑读写节点的客户端认证文件 `~/primary/pg_hba.conf`，增加以下配置项，允许只读节点进行物理复制：  
```  
host	replication	postgres	0.0.0.0/0	trust  
# 注意, 如果你知道ECS主机的网段, 建议把 0.0.0.0/0 配置为网段 例如 192.168.1.0/24   
```  
插入知识点开始.    
在不同主机上的容器之间的通信问题请参考:  
- https://superuser.com/questions/1141553/communication-between-docker-containers-on-differents-hosts-in-the-same-local-ne    
要使 Docker 容器在不同主机上彼此之间通过 IP 网络互相访问，你需要设置一个跨主机的网络。Docker 的内置解决方案是使用 overlay 网络。Overlay 网络允许容器分布在多个 Docker 守护进程主机上，并且这些容器能够安全地相互通信。  
以下是设置容器跨主机通信的步骤：  
2\.5\.1、安装 Docker Engine  
确保所有的主机上都安装了 Docker Engine，并且版本都是 1.12 或更高。  
2\.5\.2、设置 Docker Swarm  
Overlay 网络需要 Docker Swarm，所以你要初始化 Swarm 模式。  
在你选定的第一个主机（Manager Node）上运行：  
```bash  
docker swarm init --advertise-addr   
```  
其中 `` 是该主机的 IP 地址。  
初始化 Swarm 之后，将其他主机加入为 Worker Nodes：  
```bash  
docker swarm join --token  :2377  
```  
`` 通过在 Manager Node 上运行 `docker swarm join-token worker` 获得。  
2\.5\.3、创建 Overlay 网络  
在任何一个 Swarm Manager 上创建一个 overlay 网络：  
```bash  
docker network create --driver overlay --attachable my-overlay-network  
```  
这里 `my-overlay-network` 是你为 overlay 网络自定义的名称，使用 `--attachable` 参数允许非 Swarm 服务的容器连接到这个网络。  
2\.5\.4、运行容器并加入网络  
在任何 Swarm 节点上启动你的容器，并将其连接到先前创建的 overlay 网络：  
```bash  
docker run -d --name my-container --network my-overlay-network my-image  
```  
这里 `my-container` 是为你的容器指定的名字，`my-image` 是你容器的镜像。  
2\.5\.5、容器间通信  
容器现在可以使用容器名称作为主机名来互相通信。例如，如果你在 `my-overlay-network` 网络上启动了两个名为 `container1` 和 `container2` 的容器，那么 `container1` 可以通过 `container2` 的名称来解析 `container2` 的 IP 地址。  
请注意，这些步骤假设所有的主机都能够相互访问。如果你的主机在不同的网络中，例如它们之间受到防火墙或者 NAT 的限制，你可能需要进行一些额外的网络配置，比如设置适当的防火墙规则或者使用 VPN 等。  
另外，如果你使用的是 Docker Desktop（如在 Windows 或 Mac 上），Swarm 和 Overlay 网络的设置可能会有一些不同，因为 Docker Desktop 附带了一个内置的虚拟化环境。  
插入知识点结束.   
最后，启动读写节点：  
```  
$HOME/tmp_basedir_polardb_pg_1100_bld/bin/pg_ctl start -D $HOME/primary  
```  
检查读写节点能否正常运行：  
```  
$HOME/tmp_basedir_polardb_pg_1100_bld/bin/psql \
    -p 5432 \
    -d postgres \
    -c 'SELECT version();'  
            version  
--------------------------------  
 PostgreSQL 11.9 (POLARDB 11.9)  
(1 row)  
```  
在读写节点上，为对应的只读节点创建相应的复制槽，用于只读节点的物理复制：  
```  
$HOME/tmp_basedir_polardb_pg_1100_bld/bin/psql \
    -p 5432 \
    -d postgres \
    -c "SELECT pg_create_physical_replication_slot('replica1');"  
 pg_create_physical_replication_slot  
-------------------------------------  
 (replica1,)  
(1 row)  
```  
2\.6、PolarDB 只读节点部署  
在作为PolarDB RO节点的主机的容器中进行部署.  
在只读节点本地磁盘的 `~/replica1` 路径上创建一个空目录，然后通过 `polar-replica-initdb.sh` 脚本使用共享存储上的数据目录来初始化只读节点的本地目录。初始化后的本地目录中没有默认配置文件，所以还需要使用 `initdb` 创建一个临时的本地目录模板，然后将所有的默认配置文件拷贝到只读节点的本地目录下：  
```  
mkdir -m 0700 $HOME/replica1  
sudo ~/tmp_basedir_polardb_pg_1100_bld/bin/polar-replica-initdb.sh \
    /nvme1n1/shared_data/ $HOME/replica1/  
$HOME/tmp_basedir_polardb_pg_1100_bld/bin/initdb -D /tmp/replica1  
cp /tmp/replica1/*.conf $HOME/replica1/  
```  
编辑只读节点的配置。打开 `~/replica1/postgresql.conf`，增加配置项：  
```  
port=5433  
polar_hostid=2  
polar_enable_shared_storage_mode=on  
polar_disk_name='nvme1n1'  
polar_datadir='/nvme1n1/shared_data/'  
polar_vfs.localfs_mode=off  
shared_preload_libraries='$libdir/polar_vfs,$libdir/polar_worker'  
polar_storage_cluster_name='disk'  
logging_collector=on  
log_line_prefix='%p\t%r\t%u\t%m\t'  
log_directory='pg_log'  
listen_addresses='*'  
max_connections=1000  
```  
创建只读节点的复制配置文件 `~/replica1/recovery.conf`，增加读写节点的连接信息，以及复制槽名称：  
```  
polar_replica='on'  
recovery_target_timeline='latest'  
primary_slot_name='replica1'  
primary_conninfo='host=[读写节点所在IP] port=5432 user=postgres dbname=postgres application_name=replica1'  
```  
最后，启动只读节点：  
```  
$HOME/tmp_basedir_polardb_pg_1100_bld/bin/pg_ctl start -D $HOME/replica1  
```  
检查只读节点能否正常运行：  
```  
$HOME/tmp_basedir_polardb_pg_1100_bld/bin/psql \
    -p 5433 \
    -d postgres \
    -c 'SELECT version();'  
            version  
--------------------------------  
 PostgreSQL 11.9 (POLARDB 11.9)  
(1 row)  
```  
2\.7、PolarDB 集群检查和测试  
部署完成后，需要进行实例检查和测试，确保读写节点可正常写入数据、只读节点可以正常读取。  
登录 读写节点，创建测试表并插入样例数据：  
```  
$HOME/tmp_basedir_polardb_pg_1100_bld/bin/psql -q \
    -p 5432 \
    -d postgres \
    -c "CREATE TABLE t (t1 INT PRIMARY KEY, t2 INT); INSERT INTO t VALUES (1, 1),(2, 3),(3, 3);"  
```  
登录 只读节点，查询刚刚插入的样例数据：  
```  
$HOME/tmp_basedir_polardb_pg_1100_bld/bin/psql -q \
    -p 5433 \
    -d postgres \
    -c "SELECT * FROM t;"  
 t1 | t2  
----+----  
  1 |  1  
  2 |  3  
  3 |  3  
(3 rows)  
```  
在读写节点上插入的数据对只读节点可见，这意味着基于共享存储的 PolarDB 计算节点集群搭建成功。  
### 3、更多部署环境
请参考 [PolarDB for PostgreSQL 开源官方手册](https://apsaradb.github.io/PolarDB-for-PostgreSQL/zh/)     
- curve 分布式存储    
- ceph 分布式存储    
- nbd     
- 传统存储    
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 开源数据库](https://openpolardb.com/home "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's Github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")