title:Constraint-enhanced role engineering via answer set programming
author:Jinwei Hu and
Khaled M. Khan and
Yun Bai and
Yan Zhang
Constraint-Enhanced Role Engineering
via Answer Set Programming
Jinwei Hu1 Khaled M. Khan1 Yun Bai2 Yan Zhang2
1Department of Computer Science and Engineering, Qatar Univeristy, Doha 2713, Qatar
2School of Computing and Mathematics, University of Western Sydney, Sydney 1797, Australia
{jinwei, k.khan}@qu.edu.qa {ybai, yan}@scm.uws.edu.au
ABSTRACT
Role engineering (RE) aims to develop and maintain appropriate
role-based access control (RBAC) conﬁgurations. However, RE
with constraints in place is not well-studied. Constraints usually
describe organizations’ security and business requirements. An in-
consistency between conﬁgurations and constraints compromises
security and availability, as it may authorize otherwise forbidden
access and deprive users of due privileges. In this paper, we apply
answer set programming (ASP) to discover RBAC conﬁgurations
that comply with constraints and meet various optimization objec-
tives. We ﬁrst formulate the need of supporting constraints as a
problem independent of and complementary to existing RE prob-
lems. We then present a ﬂexible framework for translating the pro-
posed problem to ASP programs. In this way, the problem can be
addressed via ASP solvers. Finally, we demonstrate the effective-
ness and efﬁciency of our approach through experimental results.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Access con-
trols; K.6.5 [Management of Computing and Information Sys-
tems]: Security and Protection
General Terms
Security, Management
Keywords
RBAC, Constraint, Role Engineering, Answer Set Programming
1.
INTRODUCTION
It proves challenging to build a secure and manageable access
control system. By introducing “roles” as an intermediate level
between users and permissions, role-based access control (RBAC)
mitigates the difﬁculty. There, users are assigned to roles; roles
in turn are associated with permissions [9, 24]. RBAC has been
regarded as an effective approach to the access control problem of
medium and large size organizations [23].
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’12, May 2–4, 2012, Seoul, Korea.
Copyright 2012 ACM 978-1-4503-1303-2/12/05 ...$10.00.
However, RBAC systems are costly to develop and maintain.
Putting aside other problems, the creation of an RBAC conﬁgu-
ration, which consists of identifying a set of appropriate roles and
assigning users and permissions to roles, is not easy [14, 21]. As
such, various role engineering (RE) approaches have been pro-
posed to ﬁnd “good” conﬁgurations, e.g., [5, 8, 21, 29]. Provided
with certain information about the organization in question, an RE
tool produces a conﬁguration. Nonetheless, one main limitation of
existing approaches is that, the discovered conﬁguration does not
necessarily meet constraints.
Organizations’ security ofﬁcers often specify constraints to en-
force high-level security objectives. One typical example is a
separation-of-duty policy, which, for example, prohibits a user
from performing two mutually exclusive permissions (e.g., prepare
a check and authorize a check).1 Moreover, constraints could also
be used to model business requirements. For example, an organi-
zation may place a constraint that a role emergencyManager be
assigned to at least two users, so that at least two managers are
available in an emergency. As an inherent part of the classic RBAC
models [24] and the standards [2, 9], constraints play an important
part in capturing organizations’ requirements [1, 7, 17, 27].
A conﬁguration inconsistent with constraints, if deployed, may
undermine organizations’ interests, by means of authorizing other-
wise forbidden accesses or depriving users of due privileges. This
poses continual challenges. When being deployed, the conﬁgura-
tion ought to comply with constraints. Afterwards, this compli-
ance should persist. However, organizations’ security and business
requirements are subject to constant changes. One misleading as-
sumption is that people can establish their requirements once for
all; it obstructs the integration of research efforts with practices
[26]. Hence, a deployed conﬁguration needs updating from time to
time to reﬂect organizations’ requirements [8, 21].
Unfortunately, so far little effort has been devoted to constraint
support when organizations are adopting RBAC conﬁgurations or
undergoing evolution. On the one hand, the state of the art of RE
barely takes constraints into consideration; as a result, it is neces-
sary to adapt discovered conﬁgurations for constraints. As pointed
out in [21, 29], a post-processing like this is often unavoidable and,
if done manually, is a large bottleneck. Hence, an effective and
efﬁcient support of constraints for RE is worth investigation. On
the other hand, the research literature on constraints in access con-
trol has focused mainly on checking if there exists a conﬁguration
consistent with constraints (e.g., [27]) or if a change to a conﬁgura-
tion is safe with respect to constraints (e.g., [7, 17]). They provide
inadequate help. Although some approaches such as [27] gener-
ate conﬁgurations in presence of constraints, they are not tailored
1To increase the cost of an fraud, it is often required that no user
can both prepare and authorize a check.
language eases the understanding and explanation of the problem
and the approach. The main contributions of this work are:
• We propose and formally deﬁne the problem of supporting
constraints in role engineering. RCP is formulated as a
problem independent of and complementary to existing role
engineering problems. Among others, this enables us to add
the support of constraints modularly. We also study the com-
putional complexity of RCP.
• We present a framework for encoding RCP in ASP. RCP
can thus be addressed via existing ASP solvers. The frame-
work is ﬂexible in that various RCP variants can be encoded
in a straightforward manner.
• We undertake experiments to validate the practicality of the
framework.
The rest of the paper is organized as follows. In Section 2, we re-
view the notions of RBAC. In Section 3, we propose the constraint
language, deﬁne RCP, and study its computational complexity;
two examples of RCP are also given. In Section 4, we present a
transformation of RCP into ASP. We show the experiment results
in Section 5. In Section 6, we discuss the assumptions and RCP
variants. Finally, related work is discussed in Section 7, followed
by conclusions in Section 8.
2. ROLE-BASED ACCESS CONTROL
An RBAC conﬁguration is a tuple γ = (cid:104)U,R,P, UA, PA(cid:105),
where U is a set of users , R is a set of roles, and P is a set of
permissions, UA ⊆ R×U is the user-role relation, assigning users
to roles, and PA ⊆ R × P is the role-permission relation, associ-
ating permissions with roles. Based on UA and PA, one derives
γ’s user-permission relation UPA = {(u, p) | ∃r ∈ R : (r, u) ∈
UA ∧ (r, p) ∈ PA}. We usually denote an RBAC conﬁguration as
γ, possibly with subscripts; unless otherwise stated, a conﬁguration
γi denotes a tuple (cid:104)Ui,Ri,Pi, UAi, PAi(cid:105).
Example 1. Consider access control of grades in a university: four
representative users alice, bob, carl, and dave,2 may be assigned to
roles stu (student), ta (teaching assistant), fac (faculty), and dean;
roles could be assigned to four permissions: assign, view, receive,
and change grades (denoted as asg, view, rec, and chg, respec-
tively). Figure 2 shows an example conﬁguration of this scenario,
denoted as γuni. For example, alice is assigned to the roles stu and
ta, and the role stu is assigned to rec. Therefore, alice is able to
receive grades with the role stu.
Figure 2: An example RBAC conﬁguration γuni. Solid lines rep-
resent the user-role relation, and dashed lines represent the role-
permission relation.
2Since ASP solvers usually take capitalized words as variables and
others as constants, we write names in lowercase.
Figure 1: The idea of our approach.
for RE. For example, RE aims to discover “good” conﬁgurations;
however, the quality of conﬁgurations is not a concern there.
We treat constraint support as a modular post-processing of con-
ﬁgurations produced by RE tools, as shown in Figure 1. The rea-
sons are many-fold. First, different situations call for different
types of RE tools, depending on available information.
If inte-
grating constraint support with existing functions, one may have to
augment each type of RE tools in order to deal with different situa-
tions. In contrast, modular constraint support as a post-processing
provides a uniform approach. Second, this design also enables us
to combine advantages of existing RE algorithms. In view of the
diversity of RE techniques, different tools may discover multiple
conﬁgurations for a given input; each of them bears properties an
RE tool specializes in. It is likely to (partially) retain the proper-
ties if we take these conﬁgurations into consideration when seeking
a conﬁguration consistent with constraints. Finally, as mentioned
above, constraints are dynamic; a separate module for constraints
is more ﬂexible, manageable, and extensible.
With this choice of design, we are provided with a set of con-
straints, denoted as C, which is speciﬁed by organizations’ security
ofﬁcers, and a set of conﬁgurations, denoted as Γ, which contains
the running conﬁguration and/or conﬁgurations discovered by RE
tools. The problem of supporting constraints for RE, denoted as
Role Constraint Problem (RCP), boils down to ﬁnding a conﬁgu-
ration γ0 that is consistent with C and close to Γ as a whole. The
requirement of closeness attempts to limit the deviation of γ0 from
Γ, as conﬁgurations in Γ may ﬁt the organization in question in
one way or another. Also, in this way, γ0 is expected to be of high
quality among those consistent with C.
To formulate RCP, we ﬁrst deﬁne a simple language for speci-
fying constraints. We then take a declarative approach based on An-
swer Set Programming (ASP) [3]. In brief, we encode each RCP
instance as an ASP program, compute an answer set of the result-
ing program, and extract a solution. Although the applications of
ASP follow the general “encode-compute-extract” way [3], they
differ in problem representations in ASP. In our case, there are two
principal factors which render the proposed problem and approach
non-trivial. First, the constraint language should be amendable to
ASP interpretation, but also expressive enough to capture common
idioms of security and business requirements. There is a trade-off
to make. Second, an ASP encoding should capture requirements
on solutions’ quality, including both the closeness to Γ and other
practical needs.
This ASP-based approach provides a declarative representation
of the problem and allows us to adopt mature ASP solvers that have
been proved to work well in practice. Moreover, its rich modeling
user‐permission assignmentexistingREapproach1existingREapproachn…existing RE approach 1existing RE approach npolicy candidate 1policy candidate m…A post‐processing approachconstraintsnewpolicycandidate1constraintsnew policy candidate view asg rec chg ta bobstu alice fac carldean daveTable 1: Functions of RBAC conﬁgurations.
userγ[x] =
roleγ[x] =
permγ[x] =
r∈roleγ [x] userγ[r]
(cid:26) {u ∈ U | (x, u) ∈ UA}
(cid:83)
(cid:26) {r ∈ R | (r, x) ∈ UA}
(cid:26) (cid:83)
{r ∈ P | (r, x) ∈ PA}
r∈roleγ [x] permγ[r]
{p ∈ P | (x, p) ∈ PA}
if x ∈ R
if x ∈ P
if x ∈ U
if x ∈ P
if x ∈ U
if x ∈ R
Given a conﬁguration γ, we deﬁne three functions as shown in
Table 1. Function userγ[·] : R ∪ P (cid:55)→ 2U gives the set of users
that a role or a permission is associated with in γ. Take γuni for in-
stance; we have userγuni [fac] = {carl, dave} and userγuni [chg] =
{dave}. Function roleγ[·]
: U ∪ P (cid:55)→ 2R returns the set of
roles that are assigned to a user or a permission in γ. For in-
stance roleγuni [bob] = {stu} and roleγuni [asg] = {ta, fac}. Fi-
nally, function permγ[·]
: U ∪ R (cid:55)→ 2P maps the users and
roles to their permissions in γ. For example, permγuni
[dave] =
{asg, view, chg} and permγuni
3. PROBLEM DEFINITION
3.1 Constraint Speciﬁcation
[dean] = {chg}.
A conﬁguration γ decides on which permissions a user may per-
form. The set permγ[u] contains all the permissions available to
u, whereas userγ[p] returns the set of users capable of executing p.
Also, in a sense, a role is identiﬁed by the set of users and/or the set
of permissions that are associated with it. Hence, a conﬁguration
is mostly characterized by the set relationships among users, roles,
and permissions. Accordingly, constraints should concern these set
relationships.
Deﬁnition 2. A set expression is obtained by applying the two rules
ﬁnitely many times: (1) Each of user[x], role[x], and perm[x] is a
set expression, where x ∈ U ∪ R ∪ P. (2) If s1 and s2 are set
expressions, then so are s1 ∩ s2 and s1 ∪ s2.
Set expressions are evaluated against conﬁgurations. The eval-
uation of s against a conﬁguration γ, denoted as s/γ,
is ob-
tained by replacing every appearance of user with userγ, role
with roleγ, and perm with permγ. Formally, it is deﬁned in-
(s1 ∩ s2)/γ = (s1/γ) ∩ (s2/γ), (s1 ∪ s2)/γ =
ductively:
(s1/γ) ∪ (s2/γ), user[x]/γ = userγ[x], role[x]/γ = roleγ[x],
and perm[x]/γ = permγ[x]. For example, user[p1] ∩ user[p2]
is evaluated as userγ[p1] ∩ userγ[p2]. Notice that user[u] evalu-
ates to {u} if u ∈ U, regardless of γ. For simplicity we write set
i=1 user[ui]; similar
{u1,··· , un} ⊆ U as an abbreviation for(cid:83)n
abbreviations apply to role[x] and perm[x].
Deﬁnition 3. A structural constraint has the form s1 ⊆ s2, where
s1 and s2 are set expressions. A conﬁguration γ satisﬁes a con-
straint s1 ⊆ s2 if s1/γ ⊆ s2/γ.
Structural constraints are inspired by the property language in
[18]. They state subset-relationships between sets. Since the sets
are derived from a conﬁguration’s relations, constraints actually
put requirements on the structure of those relations. For example,
user[r1] ⊆ user[p1]∩ user[p2] stipulates that role r1’s user set be a
subset of the intersection of permission p1’s user set and p2’s user
set; in terms of access control, it says that any user in role r1 should
possess the permissions p1 and p2.
Deﬁnition 4. A quantity constraint has the form |s|θn, where θ
is an operator from the set {=,(cid:54)=,≤,≥} and n is an integer. A
conﬁguration γ satisﬁes a constraint |s|θn if |s/γ|θn, where where
| · | denotes the size of a set or a relation.
Quantity constraints concern the size of a set. For example,
|user[p1] ∩ user[p2]| ≥ 1 says that at least one user is able to exer-
cise both p1 and p2. Suppose, for instance, that p1 and p2 are the