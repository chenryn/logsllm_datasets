out the request for CHALLENGE it takes the domain r. However,
this is done only for the ﬁrst request to CHALLENGE. Further re-
quests to this domain are not altered (and would fail, as the domain
CHALLENGE is not listed in the honest DNS server).
We denote web systems as described above by SWS priv
(r), where
r is the domain of the relying party given to the challenge browser
in this system.
We can now deﬁne privacy of SPRESSO. We note that it is not
(·) is the distinguished
important which attacker process in SWS priv
one (in the sense of Section 4).
(r1) and SWS priv
(r1) ≈ SWS priv
(r2) are indistinguishable.
DEFINITION 2. We say that SPRESSO is IdP-private iff for ev-
(·) and domains r1 and r2 of relying parties
(r2), i.e.,
ery web system SWS priv
as described above, we have that SWS priv
SWS priv
Note that there are many different situations where the honest brow-
(·) could be triggered to send an HTTP(S) request to
ser in SWS priv
CHALLENGE. This could, for example, be triggered by the user who
enters a URL in the location bar of the browser, a location header
(e.g., determined by the adversary), an (attacker) script telling the
browser to follow a link or create an iframe, etc.
Now, the above deﬁnition requires that in every stage of a run and
no matter how and by whom the CHALLENGE request was triggered,
no (malicious) IdP can tell whether CHALLENGE was replaced by r1
or r2, i.e., whether this resulted in a login request for r1 or r2. Recall
that the CHALLENGE request is replaced by the honest browser only
once. This is the only place in a run where the adversary does not
know whether this is a request to r1 or r2. Other requests in a run,
even to both r1 and r2, the adversary can determine. Still, he should
not be able to ﬁgure out what happened in the CHALLENGE request.
Hence, this deﬁnition captures in a strong sense the intuition that a
malicious IdP should not be able to distinguish whether a user logs
in/has logged in at r1 or r2.
Analyzing Privacy of SPRESSO. The following theorem says that
SPRESSO enjoys the described privacy deﬁnition.
THEOREM 1. SPRESSO is IdP-private.
The full proof is provided in our technical report [12]. In the
proof, we deﬁne an equivalence relation between conﬁgurations of
SWS priv
(r2), comprising equivalences between
states and equivalences between events (in the pool of waiting
(r1) and SWS priv
1367events). For the states, for each (type of an) atomic DY process in
the web system, we deﬁne how their states are related. For example,
the state of the FWD server must be identical in both conﬁgura-
tions. As another example, roughly speaking, the attacker’s state
is the same up to subterms the attacker cannot decrypt. Regarding
(waiting) events, we distinguish between messages that result (di-
rectly or indirectly) from a CHALLENGE request by the browser and
other messages. While the challenged messages may differ in cer-
tain ways, other messages may only differ in parts that the attacker
cannot decrypt.
Given these equivalences, we then show by induction and an
exhaustive case distinction that, starting from equivalent conﬁg-
urations, every schedule leads to equivalent conﬁgurations. (We
(·) a schedule induces a single run because in
note that in SWS priv
(·) we do not have non-deterministic actions that are not
SWS priv
determined by a schedule: honest servers and scripts perform only
deterministic actions.) As an example, we distinguish between the
potential receivers of an event.
If, e.g., FWD is a receiver of a
message, given its identical state in both conﬁgurations (as per the
equivalence deﬁnition) and the equivalence on the input event, we
can immediately show that the equivalence holds on the output mes-
sage and state. For other atomic DY processes, such as browsers
and RPs, this is much harder to show. For example, for browsers,
we need to distinguish between the different scripts that can poten-
tially run in the browser (including the attacker script), the origins
under which these scripts run, and the actions they can perform.
(r1) and SWS priv
(r2),
we show that the attacker’s views are indistinguishable. Given that
for all SWS priv
(r2) every schedule leads to equiv-
alent conﬁgurations, we have that SPRESSO is IdP-private.
For equivalent conﬁgurations of SWS priv
(r1) and SWS priv
7. AUTHENTICATION OF SPRESSO
We show that SPRESSO satisﬁes two fundamental authentication
properties.
Formal Model of SPRESSO for Authentication. For the authen-
tication analysis, we consider web systems as deﬁned in Section 5
which now contain one network attacker, a ﬁnite set of browsers,
a ﬁnite set of relying parties, a ﬁnite set of identity providers, and
a ﬁnite set of forwarders. Browsers, forwarders, and relying par-
ties can become corrupted by the network attacker. The network
attacker subsumes all web attackers and also acts as a (dishonest)
DNS server to all other parties. We denote a web system in this
class of web systems by SWS auth.
Deﬁning Authentication for SPRESSO. We state two fundamen-
tal authentication properties every SSO system should satisfy. These
properties are adapted from [10].
Informally, these properties can be stated as follows: (A) The
attacker should not be able to use a service of an honest RP as an
honest user. In other words, the attacker should not get hold of (be
able to derive from his current knowledge) a service token issued
by an honest RP for an ID of an honest user (browser), even if the
browser was closed and then later used by a malicious user, i.e.,
after a CLOSECORRUPT (see Section 3.3). (B) The attacker should
not be able to authenticate an honest browser to an honest RP with
an ID that is not owned by the browser (identity injection). For both
properties, we clearly have to require that the forwarder used by the
honest RP is honest as well.
We call a web system SWS auth secure w.r.t. authentication if the
above conditions are satisﬁed in all runs of the system. We refer the
reader to our technical report [12] for the formal deﬁnition of (A)
and (B).
Analyzing Authentication of SPRESSO. We prove the following
theorem:
THEOREM 2. Let SWS auth be an SPRESSO web system as de-
ﬁned above. Then SWS auth is secure w.r.t. authentication.
In other words, the authentication properties (A) and (B) are
fulﬁlled for every SPRESSO web system.
For the proof, we ﬁrst show some general properties of SWS auth.
In particular, we show that encrypted communication over HTTPS
between an honest relying party and an honest IdP cannot be altered
by the (network) attacker, and, based on that, any honest relying
party always retrieves the “correct” public signature veriﬁcation
key from honest IdPs. We then proceed to show that for a service
token to be issued by an honest RP, a request of a speciﬁc form has
to be received by the RP.
We then use these properties and the general web system proper-
ties shown in the full version of [11] to prove properties (A) and (B)
separately. In both cases, we assume that the respective property is
not satisﬁed and lead this to a contradiction. Again, the full proof
is provided in our technical report [12].
8. FURTHER RELATED WORK
As mentioned in the introduction, many SSO systems have been
developed. However, unlike SPRESSO, none of them is privacy-
respecting.
Besides the design and implementation of SPRESSO, the formal
analysis of this system based on an expressive web model is an
important part of our work. The formal treatment of the security
of web applications is a young discipline. Of the few works in this
area even less are based on a general model that incorporates essen-
tial mechanisms of the web. Early works in formal web security
analysis (see, e.g., [3, 8, 15, 16, 24]) are based on very limited mod-
els developed speciﬁcally for the application under scrutiny. The
ﬁrst work to consider a general model of the web, written in the
ﬁnite-state model checker Alloy, is the work by Akhawe et al. [2].
Inspired by this work, Bansal et al. [5, 6] built a more expressive
model, called WebSpi, in ProVerif [7], a tool for symbolic cryp-
tographic protocol analysis. These models have successfully been
applied to web standards and applications. Recently, Kumar [17]
presented a high-level Alloy model and applied it to SAML single
sign-on. The web model presented in [10], which we further extend
and reﬁne here, is the most comprehensive web model to date (see
also the discussion in [10]). In fact, this is the only model in which
we can analyze SPRESSO. For example, other models do not in-
corporate a precise handling of windows, documents, or iframes;
cross-document messaging (postMessages) are not included at all.
9. CONCLUSION
In this paper, we proposed the ﬁrst privacy-respecting (web-
based) SSO system, where the IdP cannot track at which RP a
user logs in. Our system, SPRESSO, is open and decentralized.
Users can log in at any RP with any email address with SPRESSO
support, allowing for seamless and convenient integration into the
usual login process. Being solely based on standard HTML5 and
web features, SPRESSO can be used across browsers, platforms,
and devices.
We formally prove that SPRESSO indeed enjoys strong authenti-
cation and privacy properties. This is important since, as discussed
in the paper, numerous attacks on other SSO systems have been
discovered. These attacks demonstrate that designing a secure SSO
system is non-trivial and security ﬂaws can easily go undetected
when no rigorous analysis is carried out.
1368As mentioned in Section 8, there have been only very few anal-
ysis efforts, based on expressive models of the web infrastructure,
on web applications in general and SSO systems in particular in the
literature so far. Therefore, the analysis carried out in this paper is
also of independent interest.
Our work is the ﬁrst to analyze privacy properties based on an ex-
pressive web model, in fact the most expressive model to date. The
general indistinguishability/privacy deﬁnition we propose, which is
not tailored to any speciﬁc web application, will be useful beyond
the analysis performed in this paper.
10. REFERENCES
[1] M. Abadi and C. Fournet. Mobile Values, New Names, and
Secure Communication. In POPL 2001, pages 104–115.
ACM Press, 2001.
[2] D. Akhawe, A. Barth, P. E. Lam, J. Mitchell, and D. Song.
Towards a Formal Foundation of Web Security. In CSF 2010,
pages 290–304. IEEE Computer Society, 2010.
[3] A. Armando, R. Carbone, L. Compagna, J. Cuéllar, and M. L.
Tobarra. Formal Analysis of SAML 2.0 Web Browser Single
Sign-on: Breaking the SAML-based Single Sign-on for
Google Apps. In FMSE 2008, pages 1–10. ACM, 2008.
[4] G. Bai, J. Lei, G. Meng, S. S. Venkatraman, P. Saxena, J. Sun,
Y. Liu, and J. S. Dong. AUTHSCAN: Automatic Extraction
of Web Authentication Protocols from Implementations. In
NDSS’13. The Internet Society, 2013.
[5] C. Bansal, K. Bhargavan, A. Delignat-Lavaud, and S. Maffeis.
Keys to the Cloud: Formal Analysis and Concrete Attacks on
Encrypted Web Storage. In POST 2013, volume 7796 of
LNCS, pages 126–146. Springer, 2013.
[6] C. Bansal, K. Bhargavan, and S. Maffeis. Discovering
Concrete Attacks on Website Authorization by Formal
Analysis. In CSF 2012, pages 247–262. IEEE Computer
Society, 2012.
[7] B. Blanchet. An Efﬁcient Cryptographic Protocol Veriﬁer
Based on Prolog Rules. In CSFW-14, pages 82–96. IEEE
Computer Society, 2001.
[8] S. Chari, C. S. Jutla, and A. Roy. Universally Composable
Security Analysis of OAuth v2.0. IACR Cryptology ePrint
Archive, 2011:526, 2011.
[9] V. Cheval, H. Comon-Lundh, and S. Delaune. Trace
equivalence decision: negative tests and non-determinism. In
CCS 2011, pages 321–330. ACM, 2011.
[10] D. Fett, R. Küsters, and G. Schmitz. An Expressive Model for
the Web Infrastructure: Deﬁnition and Application to the
BrowserID SSO System. In S&P 2014, pages 673–688. IEEE
Computer Society, 2014.
[11] D. Fett, R. Küsters, and G. Schmitz. Analyzing the
BrowserID SSO System with Primary Identity Providers
Using an Expressive Model of the Web. In ESORICS 2015,
LNCS. Springer, 2015. To appear. Full version available at
http://arxiv.org/abs/1411.7210.
[12] D. Fett, R. Küsters, and G. Schmitz. SPRESSO: A Secure,
Privacy-Respecting Single Sign-On System for the Web.
Technical Report arXiv:1508.01719, arXiv, 2015. Available
at http://arxiv.org/abs/1508.01719.
[13] B. Fitzpatrick, D. Recordon, et al. OpenID Authentication 2.0.
Dec. 5, 2007. http://openid.net/specs/
openid-authentication-2_0.html.
[14] D. Hardt. RFC6749 - The OAuth 2.0 Authorization
Framework. Oct. 2012.
http://tools.ietf.org/html/rfc6749.
[15] D. Jackson. Alloy: A New Technology for Software
Modelling. In TACAS 2002, volume 2280 of LNCS, page 20.
Springer, 2002.
[16] F. Kerschbaum. Simple Cross-Site Attack Prevention. In
SecureComm 2007, pages 464–472. IEEE Computer Society,
2007.
[17] A. Kumar. A Lightweight Formal Approach for Analyzing
Security of Web Protocols. In RAID 2014, volume 8688 of
LNCS, pages 192–211. Springer, 2014.
[18] Mozilla Identity Team. Persona.
https://login.persona.org.
[19] T. Nitot. Persona: more privacy, better security while making
developers and users happy! Beyond the Code Blog. Apr. 9,
2013. https://blog.mozilla.org/beyond-the-code/
2013/04/09/persona-beta2/.
[20] J. Somorovsky, A. Mayer, J. Schwenk, M. Kampmann, and
M. Jensen. On Breaking SAML: Be Whoever You Want to
Be. In USENIX 2012, pages 397–412. USENIX Association,
2012.
[21] P. Sovis, F. Kohlar, and J. Schwenk. Security Analysis of
OpenID. In Sicherheit, volume 170 of LNI, pages 329–340.
GI, 2010.
[22] SPRESSO Demo Site and Source Code, 2015.
https://spresso.me.
[23] S.-T. Sun and K. Beznosov. The Devil is in the
(Implementation) Details: An Empirical Analysis of OAuth
SSO Systems. In CCS’12, pages 378–390. ACM, 2012.
[24] S.-T. Sun, K. Hawkey, and K. Beznosov. Systematically
Breaking and Fixing OpenID Security: Formal Analysis,
Semi-Automated Empirical Evaluation, and Practical
Countermeasures. Computers & Security, 31(4):465–483,
2012.
[25] R. Wang, S. Chen, and X. Wang. Signing Me onto Your
Accounts through Facebook and Google: A Trafﬁc-Guided
Security Study of Commercially Deployed Single-Sign-On
Web Services. In S&P 2012, pages 365–379. IEEE Computer
Society, 2012.
[26] R. Wang, Y. Zhou, S. Chen, S. Qadeer, D. Evans, and
Y. Gurevich. Explicating SDKs: Uncovering Assumptions
Underlying Secure Authentication and Authorization. In
USENIX 2013, pages 399–314. USENIX Association, 2013.
[27] Y. Zhou and D. Evans. SSOScan: Automated Testing of Web
Applications for Single Sign-On Vulnerabilities. In USENIX
2014, pages 495–510. USENIX Association, 2014.
1369