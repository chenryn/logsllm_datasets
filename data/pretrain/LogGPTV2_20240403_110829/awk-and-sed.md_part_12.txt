，这事他们可以提供的惟一方式。那个文件的一部
，它比较两个文件看看是否真的进行
一次一个，并且将输出重定向
第四章
编写 sed 脚本
---
## Page 77
们可以在 sedscr 文件中放置这个命令，并且使用下面的命令进行测试：
它用“.LP”取代每个空行。注意在替换命令的替代部分不必转义字母句点。我
辑操作可以用以下方法非常简单地实现：
才开始测试而且效果很好，然而，
个实现与测试的循环常会向列表添加其他的项目）。
当开始用 sed 处理问题时，
注意，文本已经通过在单词之间添加空格调整过了。还添加了空格来产生左边
导空格并不明显。当清楚空格后，
第一个编辑操作要求匹配空行。但是，在查看输入文件内容时，空行是否有前
C
2
下面是Horsefeathers Software产品说明显然需要做的一个编辑工作的列表：
同
为将每个命令隔离开来可以很容易地看出哪些功能实现了，
这样的工作似乎是非常乏味的过程，而且实际上有许多脚本在一次编写完成后
显
本
界
时尝试几个命令，则在问题出现时需要按和创建命令相反的过程来结束；也
然要做的事情（因为列表不总是很完整的，
。并测试它的作用，
删除添加在两个单词之间的多个空格。
删除打印机下划线的行，
删除每行的所有的前导空格。
用段落宏（.LP）取代所有的空行。
BASIC, BASIC Librarian, and LIDO. These software products can
18 May
Four Types of sed Scripts 65
of Horsefeathers software products --
Bigone Computer offers three software packages from the suite
DESCRIPTION
HORSEFEATHERS SOFTWARE PRODUCT BULLETIN
$ sed -f sedscr horsefeathers
LP
.LP
s/~$/. LP/ 
QQ群：
然后添加另一个命令，
，如果对想要做的事情设计一个备忘录，
50192241
即以“+”开始的行。
，它们没有前导空格，所以空行可以采用模式
，向初学者高难度推荐逐步编写的技术，
- 77 -
，所以称“所有显然的”，
重复这个循环过程知道完成所有
- Horsefeathers Business
第四章
，哪些还没有。
编写 sed 脚本
我们将会把
，而且这
是
---
## Page 78
我们将这个命令添加到脚本中并测试它。
意味着删除了被匹配的字符串。
这个命令删除在行的开头发现的任意空格序列。替换命令的替换部分为空，这
格。匹配序列的模式非常类似于前一个命令的地址。
将这个命令添加到 sed 脚本并进行测试，但是因为它只影响一行，所以我们省
这个命令删除以加号开始并且后面跟有至少一个空格的任意行。模式中指定两
三种表达式：
可以看出，每个正则表达式一次匹配的字符越来越多。只有通过测试才能决定
们可以有许多选择。下面的每一种形式都可以匹配这一行：
行。我们可以使用删除命令d只删除这一行。在编写匹配这一行的模式中，我
我们要做的第二个编辑操作是删除以“+”开始并且包含行式打印机下划线的
之后，你就可以将这部分移植回源文件，
的不同的示列，那么它可以工作得最好。当这个测试文件的所有编辑工作完成
哪些行被改变过是很明显的（将文件的一部分单独隔离出来进行测试常常很有
略
有
个
需
用。如果这一部分足够小，
各了结果的显示并且继续。下一个编辑操作需要删除在行开始位置填充的空
空格，
要多复杂的表达式来匹配特定的行而不是其他的行。在正则表达式中定义的
ability
s/~*// 
+□□*_
 is a full screen program editor, which also provides the 
/~+*/d
machine with UNIX or MS-DOS operating systems. BASIC Librarian
Horsefeathers BASIC is BASIC optimized for use on the BigOne
software customization or development.
general-purpose business software providing you with a base for
fill your requirements for powerful, sophisticated, 
+□□*/
+口
LP
，但是第二个可能个个由“*”修饰，意味着第二个空格可以有也可以没
*
QQ 群:
以使用屏幕范围，
50192241
- 78
并开始第二次测试）。
，同时又足以覆盖你想要进行改变
第四章
编写 sed 脚本
---
## Page 79
我们来测试这个新的脚本：
注3:
个（注3）。
个。有可能是2个，3个或4个连续的空格。不管有多少，都将它们缩减为一
在命令的结尾添加全局标志以便取代所有的出现（不只是第一个），
命令匹配任意连续空格字符串并用一个空格取代它。
下一个编辑操作试图处理为了对齐而添加的额外空格。我们可以编写一个替换
software customization or development.
HORSEFEATHERS SOFTWARE PRODUCT BULLETIN
$ sed -f sedscr horsefeathers 
s/*//g
fill your requirements for powerful, sophisticated, 
BigOne Computer offers three software packages from the suite
is a full screen program editor, which also provides the ability
machine with UNIX or MS-DOS operating systems. BASIC Librarian
Horsefeathers BASIC is BASIC optimized for use on the BigOne
general-purpose business software providing you with a base for
fill your requirements for powerful, sophisticated, 
BASIC, BASIC Librarian, and LIDo. These software products can
BigOne Computer offers three software packages from the suite
DESCRIPTION
HORSEFEATHERS SOFTWARE PRODUCT BULLETIN
$ sed -f sedscr horsefeathers
6
LP
DESCRIPTION
LP
software customization or development.
LP
LP 
这个命令还匹配单个空格。但是因为替换内容也是一个空格，因此有
-种情况实际上“没有工作”
QQ群：
50192241
- 79
第四章
—可能只有一个或多
编写 sed 脚本
要注意，
---
## Page 80
它能正常工作。下面是完整的脚本：
注4：
一个空格。
应该注意，
这个命令用后面跟有两个空格的句点，替换了后面跟有任意多个空格的句点
理这种句点后面跟有空格的特殊情况。
可以完善替换命令以便它不会替换句点后的空格。问题是句点后也可能有3个
文
空
空
查
该脚本就像所建议的那样工作，将两个或多个空格缩减为一个。但是，进一步
（件名text.ext）。这个命令被放置在脚本的结尾处并进行测试：
格，则需要将它们缩减为2个空格。最好的方式似乎是编写独立的命令来处
格。
看会发现该脚本删除了跟在句点后的两个空格序列，而在这里本应该有两个
/^+ */d
s/~$/. LP/
is a full screen program editor, which also provides the ability
machine with UNIX or MS-DOS operating systems. BASIC Librarian 
fill your requirements for powerful, sophisticated, 
BigOne Computer offers three software packages from the suite
$ sed -f sedscr horsefeathers
s/\.*/./g
S/^
software customization or development.
of Horsefeathers software products -- Horsefeathers Business 
DESCRIPTION
HORSEFEATHERS SOFTWARE PRODUCT BULLETIN
machine with UNIX or MS-DOS operating systems. BASIC Librarian 
Horsefeathers BASIC is BASIC optimized for use on the BigOne 
LP
LP
LP
*/ /
这个命令因此可以简化为：
，前面的这个命令将多个空格缩减为一个，
（注4）尽管如此，这种模式不管句点后面有多少个空格都会工
QQ群：
s八\././g
50192241
8
这种形式不会影响出现在文档中的
所以在句点后面只能找到
第四章
编写 sed 脚本
---
## Page 81
用的”术语。
本节中我们看到的例子是转换脚本，
令的列表。当然，这样的脚本不需要有趣，只要它们有用并能节省手动工作就
脚本并不少见也没有趣，它们只是一个将单词或短语变成另一种形式的替换命
sed 的最常见的用法是对一组文件进行一系列搜索和替换编辑操作。通常这些
改变一组文件
样
发和测试信脚本的时间。就像歌手学唱一首歌并把它添加到他或她的歌单中一
的两个空格。要认识到在其他的情况下有多少命令可以重用，这样可以缩减开
本。换句话说，你可以很好的编写其他的脚本，来删除空行或检查跟在句点后
在离开这个脚本之前，需要指出的是，
通过执行runsed，我们改写了原始文件。
人根据列表来创建下面的替换清单。
行。
写
时，
正如我们前面所说的那样，
的，但是脚本中的每个命令都可能会再次用到，尽管可能不会再使用整个脚
可以使用runsed 生成永久性的改变：
s/3B2 [cC]omputer/BigOne XL Computer/g
s/AT&T 3B2 [cC]omputer/BigOne XL Computer/g
s/AT&T 3B20 [cC]omputer/BigOne XL Computer/g 
s/Documentation Road Map/Documentation Directory/g
s/542[05] terminal/PT200 terminal/g
s/TERM=542[05] /TERM=PT200 /g 
s/core system diskettes/core system tape/g
s/[cC]abinet [Ll]ight/control panel light/g
s/STANDBY/STOP/g
s/STANDBY button/STOP
s/ON button/START switch/g
s/ON switch/START switch/g
done
s/\.
s/Teletype 542[05]/Big0ne PT200/g
S
6 runsed hf. product.bulletin
*/. /g
一个人使用文档集来生成一个需要被改变的事情的列表。另一个
QQ群：
上测试脚本并彻底地检查结果。当对这个结果满意
50192241
下一个阶段将使用testsed 在完整的文件
 switch/g
，被用来修改UNIX文档集中的各种“机器专
尽管这个脚本是为处理特殊的文件而编
第四章
编写 sed 脚本 
---
## Page 82
设计这个脚本的第一步是编写提取指定宏的部分，本例指-mm包中的（注5）BL
间）。
的宏定义（它可以节省你用编辑器定位并打开文件和搜索想要检查的行的时
/usr/lib/macros）下的一个文件中。Troff宏定义总是以字符串“.de”开
Troff 宏在宏包中进行定义，它通常是存放在某个目录（例如
提取宏定义
下面有两个示列：从宏包中提取宏定义并且显示文档的提纲。
shel|脚本很好的候选。
与 grep，而且它具有在输出之前修改输入的又一优点。这种类型的脚本是
sed 应用程序的一种典型的用法是从文件中提取相关的材料。sed 这一功能类似 
提取文件的内容 
决由拙劣的脚本导致的问题上花费时间就越少。
比较临时文件和原始文件看看假设是否正确。脚本也许会有错误，需要对它
testsed首先在较小的示列上测试它，然后在许多文件上运行这个脚本。接
试数据来试着验证假设的合法性。
在某些方面，编写脚本就像设计一个假设，给定事实的某种集合。通过增加测
和“diskettes”来寻找在多行上的出现（也可以使用第六章中的 phrase脚
了更加彻底，还可以查找“core”
diskettes"
使用 grep 来检查大量输入是非常有帮助。例如，
种特殊的情况为真，所有的情况就都为真。
常的测试文件是非常重要的。记住，文本之间有很大的不同，所以不能认为一
能很好工作的结论。测试每个文件是不切实际的，
这样的脚本可以节省大量的时间，但是它还是有可能产生导致浪费大量时间的
次处理这里所有的文件。
组成文档集的数百个文件。一旦这个脚本通过了测试，就可以使用runsed 来一
始
行
错
这个脚本非常直观。好处并不在脚本本身，
(Bulleted List）宏。
本
人两个句点（..）开始的行处结束。
台，后面跟有可选的空格或者是由一个或两个字母构成的宏的名字。宏定义在
误。有时人们编写脚本并在数百个文件中的一到两个上测试它，
寻找连续行上的多个单词）。检查输入是了解脚本必须要做什么的最好方
 s/3B2/Big0ne XL Computer/g
”如何出现在文档中，则可以在各处查找（grep）它并注意清单。
QQ群：
50192241
。如果打算在多个文件上运行该脚本，使用
 本节显示的脚本是从一个宏包中提取特殊
“core system"
- 82
而是在于 sed 能将这个脚本应用于
如果要确定“core system
因此选择有代表性且包含异
第四章 
编写 sed 脚本
并得出脚本
着
为
---
## Page 83
这个脚本可以处理任意个宏包。下面的 getmac 版本允许用户将宏包的名字指定
这里的“BL”是第一个命令行参数。它和前面的示列产生同样的输出。
脚本 getmac 可以按下面所示的方式执行：
（“$1”是表示第一个命令行参数的变量），
这个 shell脚本的第一行强制使用Bourne shell进行脚本的解释，
注5：
是$2，以此类推。
中可以使用位置符号来指定命令行上的每个参数：第一个参数是$1,第二个参数
的用法。例如，
显的优点是它保存键入的内容。另一个优点是 shelI脚本可以被设计为更一般
通过将该命令放置在 shelI脚本中可以使它更通用。创建 shelI脚本的一个明
配行的范围）的功能区别。
这两个地址指定了打印命令p 的行范围。这就是这种搜索脚本与 grep（不能匹
两个模式中出现的句点用反斜杠转义。
宏定义的开始“.deBL”
印通过打印命令显示指定的要打印的行。sed 脚本包含两个地址：第一个匹配
可以用-n 选项来调用 sed 从而阻止它打印整个文件。使用这个选项，sed 只打
进
意
本
在
中
行解释。
，括住 sed 脚本的双引号是必须的。如果使用单引号，则 shelI不对“$1
的名字和目的的注释。第三行上的 sed 命令，除了“BL”
现代UNIX系统上都可以使用的“#!”可执行解释程序机制。
可不用硬编码指定宏的名字，
$ getmac BL
sed -n "/^\. de$1/, /^\. \. $/p" /usr/lib/macros/mmt 
#! /bin/sh
.el. LB 0\\$1 0 1 0 1\*(BU 0 1 \} 
$ sed -n "/^\. deBL/, /^\. \. $/p" /usr/lib/macros/mmt 
我们碰巧知道-mm 宏在“-.de”命令之后没有空格。
1 0 na)*ll 0 u 0 u!d)ul 7(' 9$m\i e!'/\ <$)u!
.if\\n(. $=1 
. if\\n(. $<1 . )L \\n(Pin 0 1n 0 \1*(BU
.deBL
，可以允许用户从命令行提供信息。在这种情况下，
，下面是 getmac 脚本：
QQ群：
.LB 0\\$1 0 1 0 \|*(BU
，第二个匹配它的终端“..”
50192241
而是使用命令行参数来提供它。在shel丨脚本
其余的与上一个示列相同。注
第四章
（自成一行）。注意，这
被“$1”取代以外
编写 sed 脚本
第二行是描述脚
在 sed 脚本