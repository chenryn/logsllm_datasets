if A[i] == B[j] {
dp[i][j] = dp[i+1][j+1]  + 1
if dp[i][j] >res {
res = dp[i][j]
return res
719.FindK-thSmallestPairDistance
题目
Given an integer array, return the k-th smallest distance among all the pairs. The distance of a
pair (A, B) is defined as the absolute difference between A and B.
Example 1:
---
## Page 700
Input:
nums = [1,3,1]
k = 1
output: 0
Explanation:
Here are all the pairs:
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
Then the lst smallest distance pair is (1,l), and its distance is 0.
Note:
1.2>1
tmp := findDistanceCount(nums, mid)
if tmp >= k {
high = mid
}else{
1ow = mid + 1
return 1ow
//解法一双指针
func findpistanceCount(nums []int, num int) int {
count,i:=0,0
for j == 1; j num && i len(res) {
res = word
anz =[puom]du
return res
721.AccountsMerge
题目
Given a list accounts, each element accounts [i] is a list of strings, where the first element
accounts [i] [o] is a name, and the rest of the elements are emailsrepresenting emails of the
account.
 Now, we would like to merge these accounts. Two accounts definitely belong to the same person
if there is some email that is common to both accounts. Note that even if two accounts have the
same name, they may belong to different people as people could have the same name. A person
can have any number of accounts initially, but all of their accounts definitely have the same
name.
After merging the accounts, return the accounts in the following format: the first element of each
account is the name, and the rest of the elements are emails in sorted order. The accounts
themselves can be returned in any order.
Example 1:
---
## Page 704
Input:
accounts = [["john", "PI:EMAIL", "PI:EMAIL"], ["john",
"johnnybravo@mail. com"], ["gohn", "PI:EMAIL",
"PI:EMAIL"], ["mary", "mary&mail.com"]]
Output: [["john", 'john0o@mail. com', 'PI:EMAIL’,
'PI:EMAIL'], ["gohn", "PI:EMAIL"], ["mary",
"mary@mai1. com"]]
Explanation:
The first and third John's are the same person as they have the common email
"johnsmi th@mai1. com".
The second John and Mary are different people as none of their email addresses
are used by other accounts.
we could return these lists in any order, for example the answer [['Mary',
'PI:EMAIL'], ['John′, ‘PI:EMAIL′],
['john′, ‘PI:EMAIL',‘PI:EMAIL’,‘PI:EMAIL′]]
would sti11 be accepted.
Note:
●The length of accounts will be in the range [1, 1o00]
●The length of accounts[i] will be in the range [1, 10]]
●The length of accounts[i][j] willbe in the range [1, 30]
题目大意
给定一个列表accounts，每个元素accounts[i]是一个字符串列表，其中第一个元素accounts[i][o]是
名称（name)，其余元素是emails表示该帐户的邮箱地址。现在，我们想合并这些帐户。如果两个帐户
都有一些共同的邮件地址，则两个账户必定属于同一个人。请注意，即使两个账户其有相同的名称，它
们也可能属于不同的人，因为人们可能具有相同的名称。一个人最初可以拥有任意数量的账户，但其所
有帐户都具有相同的名称。合并帐户后，按以下格式返回帐户：每个帐户的第一个元素是名称，其余元
素是按顺序排列的邮箱地址。accounts本身可以以任意顺序返回。
注意：
·accounts的长度将在[1，10oo]的范围内。
●accounts[i] 的长度将在[1，10]的范围内。
●accounts[i]j]的长度将在[1，30]的范围内。
解题思路
·给出一堆账户和对应的邮箱。要求合并同一个人的多个邮箱账户。如果判断是同一个人呢？如果这
个人名和所属的其中之一的邮箱是相同的，就判定这是同一个人的邮箱，那么就合并这些邮箱。
·这题的解题思路是并查集。不过如果用暴力合并的方法，时间复杂度非常差。优化方法是先把每组
数据都进行编号，人编号，每个邮箱都进行编号。这个映射关系用map记录起来。如果利用并查
集的unionO操作，把这些编号都进行合并。最后把人的编号和对应邮箱的编号拼接起来。
·这一题有2处比较“坑“的是，不需要合并的用户的邮箱列表也是需要排序和去重的，同一个人的所
有邮箱集合都要合并到一起。具体见测试用例。不过题目中也提到了这些点，也不能算题目坑，只
---
## Page 705
能归自己没注意这些边界情况。
代码
package leetcode
import (
"sort"
"github.com/halfrost/LeetCode-Go/template"
//解法一并查集优化搜索解法
func accountsMerge(accounts [][]string) (r [][]string) {
uf := template.UnionFind{}
uf.Init(len(accounts))
//emailToID将所有的email邮箱都拆开，拆开与id（数组下标）对应
//idToName将id（数组下标）与name对应
//idToEmails将id（数组下标）与整理好去重以后的email组对应
emailToID, idToName, idToEmails, res := make(map[string]int),
make(map[int]string), make(map[int][]string), [][]string{}
for id, acc := range accounts {
idToName[id] = acc[0]
for i := 1; i 2->3->4, k = 5 // 5 equal parts [[1], [2], [3], [4], null ]
Example 1:
Input:
root = [1, 2, 3], k = 5
output: [[1], [2], [3], [], []]
Exp1anation:
The input and each element of the output are ListNodes, not arrays.
For example, the input root has root.val = 1, root.next.val = 2,
\root.next.next.val = 3, and root.next.next.next = null.
The first element output[o] has output[0].val = 1, output[0].next = nul1.
The last element output[4] is null, but it's string representation as a
ListNode is [].
Example 2:
Input:
root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3
Output: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]
Exp1anation:
The input has been split into consecutive parts with size difference at most
1, and earlier parts are a larger size than the later parts.
Note:
●The length of root will be in the range [0, 1000].
● Each value of a node in the input will be an integer in the range [0, 999]
---
## Page 708
●k will be an integer in the range [1, 50].
题目大意
把链表分成K个部分，要求这K个部分尽量两两长度相差不超过1，并且长度尽量相同。
解题思路
把链表长度对K进行除法，结果就是最终每组的长度n。把链表长度对K进行取余操作，得到的结果
m，代表前m组链表长度为n+1。相当于把多出来的部分都分摊到前面m组链表中了。最终链表是
前m组长度为n+1，后K-m组链表长度是n。
注意长度不足K的时候要用nil进行填充。
代码
package leetcode
import "fmt"
/★
* Definition for singly-linked list.
* type ListNode struct {
Valint
Next *ListNode
*/
func splitListToParts(root *ListNode, k int) []*ListNode {
res := make([]*ListNode, 0)
if root == nil {
for i := 0; i < k; i++ {
res = append(res, ni1)
return res
1ength := getLength(root)
splitNum := 1ength / k
1engNum := 1ength % k
cur := root
head := root
pre := root
fmt.Printf（"总长度%v，分%v组，前面%v组长度为%v，剩余%v组，每组%v\n"，
1ength, k, 1engNum, sp1itNum+l, k-1engNum, sp1itNum)
---
## Page 709
if splitNum == 0 {
for i= 0; i< k; i++ {
if cur != nil {
pre = cur.Next
cur.Next = ni1
res = append(res, cur)
cur = pre
}else{
res = append(res, ni1)
return res
for i:=0;i<1engNum; i++{
forj:=0;j< splitNum;j++{
cur = cur.Next
fmt.Printf("0 刚网出来 head =%v cur =%v pre = %v\n",head，cur，head)
pre = cur.Next
cur.Next = ni1
res = append(res, head)
head = pre
cur = pre
fmt.Printf("0 head = %v cur = %v pre = %v\n", head, cur, head)
for i := 0; i < k-1engNum; i++ {
for j:=0;j< splitNum-l;j++{
cur = cur.Next
fmt.Printf("1 刚网出来 head = %v cur =%v pre = %v\n"，head，cur，head)
pre = cur.Next
cur.Next = ni1
res = append(res, head)
head = pre
cur = pre
return res
726.NumberofAtoms
题目
Given a chemical formula (given as a string), return the count of each atom.
An atomic element always starts with an uppercase character, then zero or more lowercase