    ./prometheus --config.file=prometheus.yml
    ```
    注意
    我们不会显示本章这一部分执行的所有 PromQL 查询的截图，因为我们不想浪费太多空间。但是这些查询应该对我们设置的运行容器和系统都有效。
6.  The bulk of the `cAdvisor` metrics now available in Prometheus will start with the word `container`. Use the `count()` function with the metric `container_memory_usage_bytes` to see the count of the current memory usage in bytes:
    ```
    count(container_memory_usage_bytes)
    ```
    前面的查询在运行它的系统上提供了 28 个结果。
7.  要限制您要查找的信息，请使用花括号进行搜索，或者使用 not search ( `!=`)搜索特定的映像名称，如下命令所示。目前，您只有两个运行映像名称的容器，`cAdvisor`和`web-nginx`。通过使用`scalar()`功能，您可以计算一段时间内系统上运行的容器数量。输入以下查询后，点击`Execute`按钮:
    ```
    scalar(count(container_memory_usage_bytes{image!=""}) > 0)
    ```
8.  Click the `Graphs` tab, and you should now have a plotted graph of the preceding query. The graph should be like the following image in which you started up a third image `web-nginx` container to show how the Prometheus expression browser displays this type of data. Remember that you are only seeing one line in the graph as this is the memory used by the two containers on our system and there is not a separate memory usage value for both:
    ![Figure 13.12: cAdvisor metrics from the expression browser ](img/B15021_13_12.jpg)
    图 13.12:表达式浏览器中的 cAdvisor 度量
9.  Use the `container_start_time_seconds` metric to get the Unix timestamp of when the container started up:
    ```
    container_start_time_seconds{name="web-nginx"}
    ```
    您将看到类似 1578364679 的内容，这是纪元时间(1970 年 1 月 1 日)过去的秒数。
10.  使用`time()`功能获取当前时间，然后从该值中减去`container_start_time_seconds`，以显示容器已经运行了多少秒:
    ```
    (time() - container_start_time_seconds{name="web-nginx"})
    ```
11.  Monitor HTTP requests on your application via Prometheus' `prometheus_http_request_duration_seconds_count` metric. Use the `rate()` function to plot a graph of the duration of each HTTP request to Prometheus:
    ```
    rate(prometheus_http_request_duration_seconds_count[1m])
    ```
    注意
    使用`web-nginx`容器查看其 HTTP 请求时间和延迟会很好，但是该容器尚未设置为向普罗米修斯提供该信息。我们将在本章中很快讨论这个问题。
12.  使用算术运算符将`prometheus_http_request_duration_seconds_sum`除以`prometheus_http_request_duration_seconds_count`，这将提供请求的 HTTP 延迟:
    ```
    rate(prometheus_http_request_duration_seconds_sum[1m]) / rate(prometheus_http_request_duration_seconds_count[1m])
    ```
13.  Run the following command using the `container_memory_usage_bytes` metric to see the memory being used by each of the running containers on your system. In this query, we are using the `sum by (name)` command to add the values per container name:
    ```
    sum by (name) (container_memory_usage_bytes{name!=""})
    ```
    如果执行前面的查询，您将在表达式浏览器中看到显示`web-nginx`和`cAdvisor`容器使用的内存的图表:
    ![Figure 13.13: Memory of both the containers running on our system ](img/B15021_13_13.jpg)
图 13.13:运行在我们系统上的两个容器的内存
本节帮助您对`PromQL`查询语言有了更多的了解，并将您的查询组合在一起，开始从表达式浏览器查看您的度量。下一节将详细介绍如何使用导出器以普罗米修斯友好的方式从您在 Docker 中创建的应用和服务中收集指标。
# 使用普罗米修斯出口商
在这一章中，我们已经配置了应用指标，为 Prometheus 提供数据进行刮取和收集，那么为什么我们需要担心出口商呢？正如您所看到的，Docker 和`cAdvisor`很好地公开了数据端点，普罗米修斯可以从中收集度量。但是这些功能有限。正如我们在新的`web-nginx`网站上看到的，在我们的映像上运行的网页没有暴露相关数据。我们可以使用导出器来帮助从应用或服务中收集指标，然后以普罗米修斯能够理解和收集的方式提供数据。
尽管这似乎是普罗米修斯工作方式的一个主要缺陷，但由于普罗米修斯的使用越来越多，并且它是开源的，供应商和第三方提供商现在正在提供出口商来帮助您从应用中获取指标。
这意味着，通过安装特定的库或使用预构建的 Docker 映像来运行您的应用，您可以公开度量数据以供收集。例如，我们在本章前面创建的`web-nginx`应用正在 NGINK 上运行。为了获得我们的 web 应用的度量，我们可以简单地将`ngx_stub_status_prometheus`库安装到运行我们的 web 应用的 NGINX 实例上。或者更好的是，我们可以找到某人已经构建的 Docker 映像来运行我们的 web 应用。
注意
本章的这一部分集中在 NGINX Exporter 上，但是大量应用的出口商可以在他们的支持文档或 Prometheus 文档中找到。
在下面的练习中，我们将使用我们的`nginx`容器作为示例，并使用带有我们的`web-nginx`容器的导出器来展示普罗米修斯可以收集的度量。
## 练习 13.04:在应用中使用指标导出器
到目前为止，我们已经使用了一个`nginx`容器来提供一个基本的网页，但是我们没有针对我们的网页的具体指标。在本练习中，您将使用一个不同的 NGINX 映像，该映像由一个可以暴露给 Prometheus 的指标导出器构建:
1.  如果`web-nginx`容器仍在运行，用以下命令停止容器:
    ```
    docker kill web-nginx
    ```
2.  在 Docker Hub 中，您有一个名为`mhowlett/ngx-stud-status-prometheus`的映像，它已经安装了`ngx_stub_status_prometheus`库。该库将允许您设置一个 HTTP 端点，从您的`nginx`容器向普罗米修斯提供指标。将这张图片拉下到你的工作环境中:
    ```
    docker pull mhowlett/ngx-stub-status-prometheus
    ```
3.  In the previous exercise, you used the default NGINX configuration on the container to run your web application. To expose the metrics to Prometheus, you will need to create your configuration to override the default configuration and provide your metrics as an available HTTP endpoint. Create a file named `nginx.conf` in your working directory and add the following configuration details:
    ```
    daemon off;
    events {
    }
    http {
      server {
        listen 80;
        location / {
          index  index.html;
        }
        location /metrics {
          stub_status_prometheus;
        }
      }
    }
    ```
    上述配置将确保您的服务器在第 8 行*的端口`80`上仍然可用。*第 11 行*将确保提供您当前的`index.html`页面，*第 14 行*将设置`/metrics`的子域，以提供可从`ngx_stub_status_prometheus`库中获得的详细信息。*
**   为`index.html`文件提供挂载点，以启动`web-nginx`容器，并使用以下命令挂载您在上一步中创建的`nginx.conf`配置:
    ```
    docker run --name web-nginx --rm -v ${PWD}/index.html:/usr/html/index.html -v ${PWD}/nginx.conf:/etc/nginx/nginx.conf -p 80:80 -d mhowlett/ngx-stub-status-prometheus
    ```
    *   您的`web-nginx`应用应该会再次运行，并且您应该能够从您的网络浏览器中看到它。输入网址`http://0.0.0.0/metrics`查看指标端点。您的网络浏览器窗口中的结果应该类似于以下信息:
    ```
    # HELP nginx_active_connections_current Current number of 
    active connections
    # TYPE nginx_active_connections_current gauge
    nginx_active_connections_current 2
    # HELP nginx_connections_current Number of connections currently 
    being processed by nginx
    # TYPE nginx_connections_current gauge
    nginx_connections_current{state="reading"} 0
    nginx_connections_current{state="writing"} 1
    nginx_connections_current{state="waiting"} 1
    …
    ```
    *   You still need to let Prometheus know that it needs to collect the data from the new endpoint. So, stop Prometheus from running. Move into the application directory again, and with your text editor, add the following target to the end of the `prometheus.yml` configuration file:
    普罗米修斯号
    ```
    40   - job_name: 'web-nginx'
    41     scrape_interval: 5s
    42     static_configs:
    43     - targets: ['0.0.0.0:80']
    ```
    这一步的完整代码可以在 https://packt.live/3hzbQgj.找到
    *   保存对配置的更改，并再次启动普罗米修斯运行:
    ```
    ./prometheus --config.file=prometheus.yml
    ```
    *   Confirm whether Prometheus is configured to collect data from the new metrics endpoint you have just created. Open your web browser and enter the URL `http://0.0.0.0:9090/targets`:
    ![Figure 13.14: Targets page showing web-nginx  ](img/B15021_13_14.jpg)* 
 *图 13.14:显示网络引擎的目标页面
在本练习中，您学习了向运行在您的环境中的应用添加导出器。我们首先扩展了我们之前的`web-nginx`应用，允许它显示多个 HTTP 端点。然后，我们使用包含`ngx_stub_status_prometheus`库的 Docker 映像来显示我们的`web-nginx`统计数据。然后，我们配置普罗米修斯从提供的端点收集这些细节。
在下一节中，我们将设置 Grafana，使我们能够更近距离地查看数据，并为我们正在收集的数据提供用户友好的仪表盘。
# 用格拉夫纳延长普罗米修斯号
普罗米修斯网络界面提供了一个功能性的表达式浏览器，允许我们在有限的安装下搜索和查看时间序列数据库中的数据。它提供了一个图形界面，但不允许我们保存任何搜索或可视化。普罗米修斯的网络界面也受到限制，因为它不能在仪表板中对查询进行分组。此外，界面提供的可视化不多。在这里，我们可以使用 Grafana 等应用进一步扩展收集的数据。
Grafana 允许我们直接连接普罗米修斯时间序列数据库，执行查询并创建视觉上吸引人的仪表盘。Grafana 可以作为一个独立的应用在服务器上运行。我们可以预先配置 Grafana Docker 映像以部署到我们的系统上，配置为连接到我们的 Prometheus 数据库，并且已经设置了一个基本的仪表板来监控我们正在运行的容器。
当您第一次登录到 Grafana 时，会出现以下屏幕，即 Grafana 主页仪表板。您可以随时点击屏幕左上角的 Grafana 图标返回此页面。这是您可以开始构建仪表板、配置环境和添加用户插件的主要工作领域:
![Figure 13.15: Grafana Home Dashboard ](img/B15021_13_15.jpg)
图 13.15:格拉夫纳家庭仪表板
屏幕左侧是一个方便的菜单，可以帮助您进一步配置 Grafana。加号将允许您向安装中添加新的仪表板和数据源，而仪表板图标(四个正方形)将所有仪表板组织到一个区域中进行搜索和查看。仪表板图标下面是 explore 按钮，它提供了一个像 Prometheus 一样的表达式浏览器，以便运行 PromQL 查询，而 alerts 图标(bell)将您带到一个窗口，您可以在该窗口中配置在不同事件发生后触发的 alerts。配置图标将带您进入屏幕，您可以在其中配置 Grafana 的操作方式，而服务器管理图标允许您管理谁可以访问您的 Grafana 网络界面以及他们可以拥有哪些权限。
当您在下一个练习中安装 Grafana 时，请随意进一步探索该界面，但我们将尽可能使该过程自动化，以避免对您的工作环境进行任何更改。
## 练习 13.05:在系统上安装和运行 Grafana
在本练习中，您将在系统上设置 Grafana，并允许应用开始使用您存储在普罗米修斯数据库中的数据。您将使用 Grafana 的 Docker 映像安装 Grafana，提供界面的简要说明，并开始设置基本仪表板:
1.  如果普罗米修斯没有运行，请重新启动它。另外，确保您的容器、`cAdvisor`和测试 NGINX 服务器(`web-nginx`)正在运行: