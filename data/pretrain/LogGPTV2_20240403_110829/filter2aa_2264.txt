# Web API 安全漏洞与检测防护
作者：徐诣博  
日期：2017.8.25

## 目录
1. Web API 安全威胁
2. Web API 安全漏洞
3. WAF Web API 漏洞防护
4. Web API 安全开发建议

---

## 第 1 章: Web API 安全威胁

### 什么是 Web API？
- Web API 是通过 HTTP 协议在网络上进行调用的应用程序接口。
- 它允许客户端通过 URI 访问服务器，以实现信息交互或获取存储在服务器上的数据。
- Web API 与 Web Services 的区别在于它们使用的数据格式（如 JSON）。

### 谁在使用 Web API？
- 开发者、企业和服务提供商等广泛使用 Web API 来构建和集成应用程序。

### API 安全威胁
#### 非法信息窃取
- **HTTP/HTTPS 嗅探**：会话劫持攻击可以通过 SSLStrip 或利用 SSL/TLS 漏洞（如 Heartbleed）进行。
- **证书验证漏洞**：不正确的客户端证书验证可能导致中间人攻击。
- **性能问题**：考虑是否所有 Web API 都需要采用 HTTPS。

#### 浏览器访问 Web API 的意外
- **XSS (跨站脚本)**：输入输出过滤及 Content-Type 限制可减轻 XSS 攻击。
- **CSRF (跨站请求伪造)**：使用 CSRF Token 可有效防御。
- **XXE (XML 外部实体)**：安全配置 XML 解析器防止 XXE 攻击。
- **JSON 劫持**：禁止 JavaScript 执行 JSON 数据，并使用 X-Requested-With 头部标识请求来源。

#### Web API 业务逻辑漏洞
- **参数篡改**：例如连续编号 ID 或订单金额被恶意修改。
- **重放攻击**：重复发送已授权的请求来执行未授权操作。
- **权限控制缺陷**：用户可能越权访问敏感资源。

#### 访问速率不当限制
- **大规模访问/DoS 攻击**：应实施 API 访问速率控制策略，包括限制单个用户的请求频率，并返回适当的 429 Too Many Requests 状态码。
- **限速信息传递**：通过 X-RateLimit-* 头部提供详细的限速信息。

#### HTTP 头部设置不当
- **安全相关的头部**：正确配置 X-Content-Type-Options, X-XSS-Protection, X-Frame-Options 和 Content-Security-Policy 可增强安全性。
- **传输层安全**：启用 HSTS 和 HPKP 提升 HTTPS 安全性。
- **Cookie 设置**：确保 Cookie 标记为 Secure 和 HttpOnly。

---

## 第 2 章: Web API 安全漏洞

### 常见的安全漏洞案例
- **WordPress REST API 内容注入**：允许未经身份验证的用户修改文章内容。
- **Drupal Services Module 远程代码执行**：通过反序列化漏洞实现 RCE。
- **SQL 注入**：针对特定 API 端点构造恶意 SQL 查询语句。
- **其他框架和平台中的漏洞**：如 SugarCRM, Apache Struts, Oracle GlassFish 等。

### 渗透测试工具与平台
- **工具**：BurpSuite, Postman, SoapUI NG Pro, Fuzzapi 等。
- **平台**：Hackazon, Mutillidae, DVWS 等用于模拟攻击场景。

---

## 第 3 章: WAF Web API 漏洞防护

### WAF 对 Web API 的保护措施
- **通用漏洞防护**：覆盖 SQL 注入、XSS、CSRF 等常见攻击模式。
- **访问合规检查**：对 URI 和 Content-Type 进行严格校验。
- **访问速率控制**：基于会话或 IP 地址限制请求次数。
- **API 特定挑战**：解析不同格式的数据（JSON/XML/php.serialized），管理权限及优化 WAF 性能。

---

## 第 4 章: Web API 安全开发建议

### 开发指南
- **文档与规范**：编写清晰详尽的 API 文档并遵循行业标准。
- **关键应用隔离**：对于涉及支付和个人信息的关键 API 实施沙盒环境。
- **URI 设计原则**：简洁易读且符合 RESTful 规范。
- **身份认证机制**：推荐使用 OAuth 2.0 和 JWT。
- **响应格式标准化**：默认采用 JSON 格式，避免不必要的 JSONP 支持。
- **错误处理**：提供明确的错误消息和适当的状态码。
- **版本控制**：合理规划 API 版本升级路径并保持向后兼容性。
- **安全特性启用**：强制使用 HTTPS，设置合适的缓存控制头等。

感谢观看！希望这些信息对你有所帮助。