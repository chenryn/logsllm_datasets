### String Functions

- **TRIM**: Removes leading and trailing characters from a string.
  - Example: `TRIM(BOTH 'x' FROM 'yxJohnxx')` → `'John'`

- **ASCII**: Returns the decimal ASCII code of the first character in the string.
  - Example: `ASCII('a')` → `97`

- **INSTR**: Searches for a substring within a string. In PostgreSQL, this can be simulated using built-in functions.
  - Example: `POSITION('xyz' IN 'yxJohnxx')` → `0` (since 'xyz' is not found)

- **LENGTH**: Returns the number of characters in a string.
  - Example: `LENGTH('John S.')` → `7`

- **REGEXP_COUNT**: Returns the number of times a pattern occurs in a source string.
  - Example: `REGEXP_COUNT('yxJohnxx', 'x')` → `3` (if supported by the database)

- **REGEXP_INSTR**: Returns the position of the first occurrence of a regular expression pattern in a string.
  - Example: `REGEXP_INSTR('yxJohnxx', 'J')` → `2` (if supported by the database)

### Date and Time Functions

- **ADD_MONTHS**: Adds a specified number of months to a date.
  - Example: `NOW() + INTERVAL '1 month'` → `2023-11-01 12:00:00` (if current date is `2023-10-01 12:00:00`)

- **CURRENT_DATE**: Returns the current date in the session time zone.
  - Example: `SELECT CURRENT_DATE;` → `2023-10-01`

- **CURRENT_TIMESTAMP**: Returns the current date and time in the session time zone.
  - Example: `SELECT CURRENT_TIMESTAMP;` → `2023-10-01 12:00:00.123456+00`

- **EXTRACT**: Extracts a specified part (e.g., year, hour) from a date or timestamp.
  - Example: `EXTRACT(YEAR FROM DATE '2023-10-01')` → `2023`

- **LAST_DAY**: Returns the last day of the month for a given date.
  - Example: `DATE_TRUNC('month', NOW()) + INTERVAL '1 month - 1 day'` → `2023-10-31` (if current date is `2023-10-01`)

- **MONTHS_BETWEEN**: Returns the number of months between two dates.
  - Example: `DATE_PART('month', AGE(NOW(), NOW() - INTERVAL '100 days'))` → `3` (if current date is `2023-10-01`)

- **SYSDATE**: Returns the current date and time set for the operating system on which the database server resides.
  - Example: `SELECT NOW();` → `2023-10-01 12:00:00.123456+00`

- **SYSTIMESTAMP**: Returns the system date and time, including fractional seconds and time zone.
  - Example: `SELECT NOW();` → `2023-10-01 12:00:00.123456+00`

- **LOCALTIMESTAMP**: Returns the current date and time in the session time zone as a `TIMESTAMP` without time zone.
  - Example: `SELECT LOCALTIMESTAMP;` → `2023-10-01 12:00:00.123456`

- **TO_CHAR**: Converts a date or timestamp to a string in the specified format.
  - Example: `TO_CHAR(NOW(), 'DD-MON-YYYY HH24:MI:SS')` → `01-OCT-2023 12:00:00`

- **TRUNC**: Truncates a date to the specified precision.
  - Example: `DATE_TRUNC('day', NOW())` → `2023-10-01 00:00:00`

### Encoding and Decoding Functions

- **DECODE**: Compares an expression to each search value one by one using an IF-THEN-ELSE statement. PostgreSQL does not have a direct equivalent, but you can use `CASE`.
  - Example: `CASE WHEN condition THEN result [WHEN ...] [ELSE result] END`

- **DUMP**: Returns a `VARCHAR2` value containing the data type code, length in bytes, and internal representation of an expression. Not available in PostgreSQL.

- **ORA_HASH**: Computes a hash value for a given expression. Not available in PostgreSQL.

### Null Functions

- **CASE**: A conditional expression that chooses from a sequence of conditions and runs a corresponding statement.
  - Example: `CASE WHEN condition THEN result [WHEN ...] [ELSE result] END`

- **COALESCE**: Returns the first non-null argument in the list.
  - Example: `COALESCE(NULL, 'a', 'b')` → `'a'`

- **NULLIF**: Compares two expressions. If they are equal, returns null; otherwise, returns the first expression.
  - Example: `NULLIF('a', 'b')` → `'a'`

- **NVL**: Replaces null with a specified string.
  - Example: `COALESCE(NULL, 'a')` → `'a'`

- **NVL2**: Determines the value returned by a query based on whether a specified expression is null or not.
  - Example: Use `CASE` instead.

### Environment and Identifier Functions

- **SYS_GUID**: Generates a globally unique identifier (UUID).
  - Example: `SELECT UUID_GENERATE_V1();` → `90791a6-a359-11e7-a61c-12803bf1597a`

- **UID**: Returns an integer that uniquely identifies the session user. Not available in PostgreSQL.
  - Example: Consider using `CURRENT_USER`.

- **USER**: Returns the name of the session user.
  - Example: `SELECT CURRENT_USER;` → `username`

- **USERENV**: Returns information about the current session using parameters. Not available in PostgreSQL.
  - Example: Refer to PostgreSQL documentation for system functions.

### Conversion Functions

- **CAST**: Converts one data type into another.
  - Example: `CAST('10' AS INT) + 1` → `11`

- **CONVERT**: Converts a character string from one character set to another. Not available in PostgreSQL.
  - Example: Use `TRANSLATE` or other string functions.

- **TO_CHAR**: Converts numeric or date values to a string in the specified format.
  - Example: `TO_CHAR(01234, '00000')` → `'01234'`

- **TO_DATE**: Converts a string to a date.
  - Example: `TO_DATE('01Jan2017', 'DDMonYYYY')` → `2017-01-01`

- **TO_NUMBER**: Converts a string to a numeric value.
  - Example: `TO_NUMBER('01234', '99999')` → `1234`

### Aggregate Functions

- **AVG**: Returns the average value of an expression.
  - Example: `SELECT AVG(salary) FROM employees;`

- **COUNT**: Returns the number of rows returned by the query.
  - Example: `SELECT COUNT(*) FROM employees;`

- **STRING_AGG**: Concatenates input values into a string, separated by a delimiter.
  - Example: `SELECT STRING_AGG(firstname, ', ') WITHIN GROUP (ORDER BY customerid) FROM customer;`

- **MAX**: Returns the maximum value of an expression.
  - Example: `SELECT MAX(salary) FROM employees;`

- **MIN**: Returns the minimum value of an expression.
  - Example: `SELECT MIN(salary) FROM employees;`

- **SUM**: Returns the sum of an expression.
  - Example: `SELECT SUM(salary) FROM employees;`

### Top-N Query

- **FETCH**: Retrieves a specific number of rows from the result set of a multi-row query.
  - Example: `SELECT * FROM customer FETCH FIRST 10 ROWS ONLY;`

### Migrating from Oracle MERGE SQL Syntax

#### Overview
The `MERGE` statement in Oracle provides a way to conditionally perform `INSERT`, `UPDATE`, or `DELETE` operations on a target table. This task would otherwise require multiple logical statements. The `MERGE` statement is deterministic, meaning once a row has been processed, it cannot be processed again in the same statement. It is also known as an "UPSERT" operation.

#### Example
Using Oracle to insert or update employees who are entitled to a bonus (by year):

```sql
CREATE TABLE EMP_BONUS (
    EMPLOYEE_ID NUMERIC,
    BONUS_YEAR VARCHAR2(4),
    SALARY NUMERIC,
    BONUS NUMERIC,
    PRIMARY KEY (EMPLOYEE_ID, BONUS_YEAR)
);

MERGE INTO EMP_BONUS E1
USING (SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, DEPARTMENT_ID
       FROM EMPLOYEES) E2
ON (E1.EMPLOYEE_ID = E2.EMPLOYEE_ID)
WHEN MATCHED THEN
    UPDATE SET E1.BONUS = E2.SALARY * 0.5
    DELETE WHERE (E1.SALARY >= 10000)
WHEN NOT MATCHED THEN
    INSERT (E1.EMPLOYEE_ID, E1.BONUS_YEAR, E1.SALARY, E1.BONUS)
    VALUES (E2.EMPLOYEE_ID, EXTRACT(YEAR FROM SYSDATE), E2.SALARY, E2.SALARY * 0.5)
    WHERE (E2.SALARY < 10000);
```

#### Migration to PostgreSQL

PostgreSQL version 9.6 and later support the `INSERT... ON CONFLICT` clause, which can handle cases where insert clauses might cause a conflict and then redirect the operation as an update.

##### Example
Using the `ON CONFLICT` clause to handle a similar scenario as shown for the Oracle `MERGE` command:

```sql
CREATE TABLE EMP_BONUS (
    EMPLOYEE_ID NUMERIC,
    BONUS_YEAR VARCHAR(4),
    SALARY NUMERIC,
    BONUS NUMERIC,
    PRIMARY KEY (EMPLOYEE_ID, BONUS_YEAR)
);

INSERT INTO EMP_BONUS (EMPLOYEE_ID, BONUS_YEAR, SALARY, BONUS)
SELECT EMPLOYEE_ID, EXTRACT(YEAR FROM NOW()), SALARY, SALARY * 0.5
FROM EMPLOYEES
WHERE SALARY < 10000
ON CONFLICT (EMPLOYEE_ID, BONUS_YEAR) DO UPDATE
SET SALARY = EXCLUDED.SALARY, BONUS = EXCLUDED.BONUS;
```

Running the same operation multiple times using the `ON CONFLICT` clause does not generate an error because the existing records are redirected to the update clause.

For additional details, refer to the following resources:
- [PostgreSQL Documentation](https://www.postgresql.org/docs/current/static/functions.html)
- [PostgreSQL Math Functions](https://www.postgresql.org/docs/current/static/functions-math.html)
- [PostgreSQL String Functions](https://www.postgresql.org/docs/current/static/functions-string.html)
- [PostgreSQL UUID Functions](https://www.postgresql.org/docs/current/static/uuid-ossp.html)