 0
 0
 0.5
100 flows
200 flows
400 flows
800 flows
1600 flows
 1.5
 1
Time since link failure (s)
 2
 2.5
 3
 3.5
Figure 10: Round-trip latencies experienced by packets
through a diamond topology during link failure.
paths—so the network can withstand a link-failure—and measured
the latencies experienced by packets. Failures were simulated by
physically unplugging a link; our results are shown in Figure 10.
In all cases, the path reconverges in under 40ms, but a packet could
be delayed up to a second while the Controller handles the ﬂurry of
requests.
Our network policy allows for multiple disjoint paths to be setup
by the Controller when the ﬂow is created. This way, convergence
can occur much faster during failure, particularly if the Switches
detect a failure and failover to using the backup ﬂow-entry. We
have not implemented this in our prototype, but plan to do so in the
future.
6.3 Flow Table Sizing
Finally, we explore how large the ﬂow table needs to be in the
Switch.
Ideally, the Switch can hold all of the currently active
ﬂows. Figure 9 shows how many active ﬂows we saw in our Ethane
deployment; it never exceeded 500. With a table of 8,192 entries
and a two-function hash-table, we never encountered a collision.
As described earlier in Figure 7, the LBL network did not encounter
more than 1,200 ﬂows in their 8,000 host network.
In practice, the number of ongoing ﬂows depends on where the
Switch is in the network. Switches closer to the edge will see a
number of ﬂows proportional to the number of hosts they connect
to (i.e., their fanout). Our deployed Switches have a fanout of four
and saw no more than 500 ﬂows; we might expect a Switch with
a fanout of, say, 64 to see at most a few thousand active ﬂows. (It
should be noted that this is a very conservative estimate, given the
small number of ﬂows in the whole LBL network.) A Switch at
the center of a network will likely see more active ﬂows, and so we
assume it will see all active ﬂows.
From these numbers we conclude that a Switch—for a university-
sized network—should have ﬂow table capable of holding 8K–
16K entries.
If we assume that each entry is 64B, such a table
requires about 1MB of storage, or as much as 4MB if we use a
two-way hashing scheme [9]. A typical commercial enterprise Eth-
ernet switch today holds 1 million Ethernet addresses (6MB, but
larger if hashing is used), 1 million IP addresses (4MB of TCAM),
1-2 million counters (8MB of fast SRAM), and several thousand
ACLs (more TCAM). Thus, the memory requirements of an Ethane
Switch are quite modest in comparison to today’s Ethernet switches.
To further explore the scalability of the Controller, we tested
its performance with simulated inputs in software to identify over-
heads. The Controller was conﬁgured with a policy ﬁle of 50 rules
and 100 registered principles; routes were precalculated and cached.
Under these conditions, the system could handle 650,845 bind events
per second and 16,972,600 permission checks per second. The
complexity of the bind events and permission checks is dependent
on the rules in use, which, in the worst case, grows linearly with
the number of rules.
7. ETHANE’S SHORTCOMINGS
When trying to deploy a radically new architecture into legacy
networks—without changing the end-host—we encounter some stum-
bling blocks and limitations. These are the main issues that arose:
Broadcast and Service Discovery. Broadcast discovery protocols
(ARP, OSPF neighbor discovery, etc.) wreak havoc on enterprise
networks by generating huge amounts of overhead trafﬁc [17, 20];
on our network, these constituted over 90% of the ﬂows. One of
the largest reasons for VLANs is to control the storms of broadcast
trafﬁc on enterprise networks. Hosts frequently broadcast messages
to the network to try and ﬁnd an address, neighbor, or service. Un-
less Ethane can interpret the protocol and respond on its behalf, it
needs to broadcast the request to all potential responders; this in-
volves creating large numbers of ﬂow entries, and it leads to lots of
trafﬁc which—if malicious—has access to every end-host. Broad-
cast discovery protocols could be eliminated if there was a standard
way to register a service where it can easily be found. SANE pro-
posed such a scheme [12], and in the long-term, we believe this is
the right approach.
Application-layer routing. A limitation of Ethane is that it has to
trust end-hosts not to relay trafﬁc in violation of the network policy.
Ethane controls connectivity using the Ethernet and IP addresses of
the end-points, but Ethane’s policy can be compromised by com-
munications at a higher layer. For example, if A is allowed to talk
to B but not C, and if B can talk to C, then B can relay messages
from A to C. This could happen at any layer above the IP layer, e.g.,
a P2P application that creates an overlay at the application layer, or
multi-homed clients that connect to multiple networks. This is a
hard problem to solve, and most likely requires a change to the
operating system and any virtual machines running on the host.
Knowing what the user is doing. Ethane’s policy assumes that
the transport port numbers indicate what the user is doing: port
80 means HTTP, port 25 is SMTP, and so on. Colluding mali-
cious users or applications can fool Ethane by agreeing to use non-
standard port numbers. And it is common for “good” applications
to tunnel applications over ports (such as port 80) that are likely
to be open in ﬁrewalls. To some extent, there will always be such
problems for a mechanism like Ethane, which focuses on connec-
tivity without involvement from the end-host.
In the short-term,
we can, and do, insert application proxies along the path (using
Ethane’s waypoint mechanism).
Spooﬁng Ethernet addresses. Ethane Switches rely on the bind-
ing between a user and Ethernet addresses to identify ﬂows. If a
user spoofs a MAC address, it might be possible to fool Ethane
into delivering packets to an end-host. This is easily prevented in
an Ethane-only network where each Switch port is connected to
one host: The Switch can drop packets with the wrong MAC ad-
dress. If two or more end-hosts connect to the same Switch port, it
is possible for one to masquerade as another. A simple solution is to
physically prevent this; a more practical solution in larger networks
is to use 802.1X in conjunction with link-level encryption mecha-
nisms, such as 802.1AE, to more securely authenticate packets and
addresses.
8. RELATED WORK
Ethane embraces the 4D [14] philosophy of simplifying the data-
plane and centralizing the control-plane to enforce network-wide
goals [21]. Ethane diverges from 4D in that it supports a ﬁne-
grained policy-management system. We believe that policy deci-
sions can and should be based on ﬂows. We also believe that by
moving all ﬂow decisions to the Controller, we can add many new
functions and features to the network by simply updating the Con-
troller in a single location. Our work also shows that it is possible—
we believe for the ﬁrst time—to securely bind the entities in the net-
work to their addresses, and then to manage the whole namespace
with a single policy.
Ipsilon Networks proposed caching IP routing decisions as ﬂows,
in order to provide a switched, multi-service fast path to traditional
IP routers [18]. Ethane also uses ﬂows as a forwarding primitive.
However, Ethane extends forwarding to include functionality use-
ful for enforcing security, such as address swapping and enforcing
outgoing initiated ﬂows only.
In distributed ﬁrewalls [15], policy is declared centrally in a
topology independent manner and enforced at each end-host. In
addition to the auditing and management support, Ethane differs
from this work in two major ways. First, in Ethane end-hosts can-
not be trusted to enforce ﬁltering. This mistrust is also extended
to the ﬁrst hop switch. With per-switch enforcement of each ﬂow,
Ethane provides maximal defense in depth. Secondly, much of the
power of Ethane is to provide network level guarantees, such as
policy imposed waypoints. This is not possible to do through end-
host level ﬁltering alone.
Pol-Eth, Ethane’s policy language, is inspired by predicate rout-
ing (PR) [22]. PR uniﬁes routing and ﬁltering; a set of predicates
describes all connectivity. Pol-Eth extends this model by making
users ﬁrst-class objects, declaring predicates over high-level names,
and providing support for group declaration and inclusion, multiple
connectivity constraints, and arbitrary expressions.
VLANs are widely used in enterprise networks for segmenta-
tion, isolation, and to enforce coarse-grain policies; and they are
commonly used to quarantine unauthenticated hosts or hosts with-
out health “certiﬁcates” [3, 6]. VLANs are notoriously difﬁcult to
use, requiring much hand-holding and manual conﬁguration; we
believe Ethane can replace VLANs entirely, giving much simpler
control over isolation, connectivity, and diagnostics.
There are a number of Identity-Based Networking (IBN) cus-
tom switches available (e.g., [4]) or secure AAA servers (e.g., [5]).
These allow high-level policy to be declared, but are generally point
solutions with little or no control over the network data-path (ex-
cept as a choke-point). Several of them rely on the end-host for
enforcement, which makes them vulnerable to compromise.
9. CONCLUSIONS
One of the most interesting consequences of building a prototype
is that the lessons you learn are always different—and usually far
more—than were expected. With Ethane, this is most deﬁnitely
the case: We learned lessons about the good and bad properties of
Ethane, and fought a number of ﬁres during our deployment.
The largest conclusion that we draw is that (once deployed) we
found it much easier to manage the Ethane network than we ex-
pected. On numerous occasions we needed to add new Switches,
new users, support new protocols, and prevent certain connectivity.
On each occasion we found it natural and fast to add new policy
rules in a single location. There is great peace of mind to knowing
that the policy is implemented at the place of entry and determines
the route that packets take (rather than being distributed as a set of
ﬁlters without knowing the paths that packets follow). By journal-
ing all registrations and bindings, we were able to identify numer-
ous network problems, errant machines, and malicious ﬂows—and
associate them with an end-host or user. This bodes well for net-
work managers who want to hold users accountable for their trafﬁc
or perform network audits.
We have also found it straightforward to add new features to the
network: either by extending the policy language, adding new rout-
ing algorithms (such as supporting redundant disjoint paths), or in-
troducing new application proxies as waypoints. Overall, we be-
lieve that Ethane’s most signiﬁcant advantage comes from the ease
of innovation and evolution. By keeping the Switches dumb and
simple, and by allowing new features to be added in software on
the central Controller, rapid improvements are possible. This is
particularly true if the protocol between the Switch and Controller
is open and standardized, so as to allow competing Controller soft-
ware to be developed.
We are conﬁdent that the Controller can scale to support quite
large networks: Our results suggest that a single Controller could
manage over 10,000 machines, which bodes well for whoever has
to manage the Controllers. In practice, we expect Controllers to
be replicated in topologically-diverse locations on the network, yet
Ethane does not restrict how the network manager does this. Over
time, we expect innovation in how fault-tolerance is performed,
perhaps with emerging standard protocols for Controllers to com-
municate and remain consistent.
We are convinced that the Switches are best when they are dumb,
and contain little or no management software. We have experi-
ence building switches and routers—for Ethane and elsewhere—
and these are the simplest switches we’ve seen. Further, the Switches
are just as simple at the center of the network as they are at the
edge. Because the Switch consists mostly of a ﬂow table, it is easy
to build in a variety of ways: in software for embedded devices,
in network processors, for rapid deployment, and in custom ASICs
for high volume and low-cost. Our results suggest that an Ethane
Switch will be signiﬁcantly simpler, smaller, and lower-power than
current Ethernet switches and routers.
We anticipate some innovation in Switches too. For example,
while our Switches maintain a single FIFO queue, one can imagine
a “less-dumb” Switch with multiple queues, where the Controller
decides to which queue a ﬂow belongs. This leads to many pos-
sibilities: per-class or per-ﬂow queueing in support of priorities,
trafﬁc isolation, and rate control. Our results suggest that even if
the Switch does per-ﬂow queueing (which may or may not make
sense), the Switch need only maintain a few thousand queues. This
is frequently done in low-end switches today, and it is well within
reach of current technology.
Acknowledgments
We thank Tal Garﬁnkel, Greg Watson, Dan Boneh, Lew Glenden-
ning, John Lockwood, and Aditya Akella for their valuable in-
put. David Mazières, Nickolai Zeldovich, Jennifer Rexford, Sharon
Goldberg and Changoon Kim offered very helpful feedback on
early drafts of this paper. We would also like to thank our shep-
herd, Anja Feldman for her guidance. This paper is based upon
work supported by the National Science Foundation under Grant
No. CNS-0627112 (The 100x100 Clean Slate Program), from the
FIND program with funding from DTO. The research was also sup-
ported in part by the Stanford Clean Slate program. Martìn Casado
was funded by a DHS graduate fellowship.
References
[1] Alterpoint. http://www.alterpoint.com/.
[2] BerkeleyDB.
db.html.
http://www.oracle.com/database/berkeley-
[3] Cisco network admission control. http://www.cisco.com/.
[4] Consentry. http://www.consentry.com/.
[5] Identity engines. http://www.idengines.com/.
[6] Microsoft network access protection.
http://www.microsoft.com/technet/network/nap/default.mspx.
[7] Netfpga home page. http://NetFPGA.org.
[8] Openwrt home page. http://openwrt.org/.
[9] A. Z. Broder and M. Mitzenmacher. Using multiple hash
functions to improve ip lookups. In Proc. INFOCOM, Apr.
2001.
[10] D. Caldwell, A. Gilbert, J. Gottlieb, A. Greenberg, G. Hjalm-
tysson, and J. Rexford. The cutting edge of ip router conﬁgu-
ration. SIGCOMM Computer Comm. Rev., 2004.
[11] D. Caldwell, A. Gilbert, J. Gottlieb, A. Greenberg, G. Hjalm-
tysson, and J. Rexford. The cutting edge of ip router con-
ﬁguration. SIGCOMM Computer Comm. Rev., 34(1):21–26,
2004.
[12] M. Casado, T. Garﬁnkel, A. Akella, M. J. Freedman,
D. Boneh, N. McKeown, and S. Shenker. SANE: A protec-
tion architecture for enterprise networks. In USENIX Security
Symposium, Aug. 2006.
[13] C. Demetrescu and G. Italiano. A new approach to dynamic
all pairs shortest paths. In Proc. STOC’03, 2003.
[14] A. Greenberg, G. Hjalmtysson, D. A. Maltz, A. Myers,
J. Rexford, G. Xie, H. Yan, J. Zhan, and H. Zhang. A clean
slate 4D approach to network control and management.
In
SIGCOMM Computer Comm. Rev., Oct. 2005.
[15] S. Ioannidis, A. D. Keromytis, S. M. Bellovin, and J. M.
Smith. Implementing a distributed ﬁrewall. In ACM Confer-
ence on Computer and Communications Security, pages 190–
199, 2000.
[16] Z. Kerravala. Conﬁguration management delivers business
resiliency. The Yankee Group, Nov. 2002.
[17] A. Myers, E. Ng, and H. Zhang. Rethinking the service
model: Scaling ethernet to a million nodes. In Proc. HotNets,
Nov. 2004.
[18] P. Newman, T. L. Lyon, and G. Minshall. Flow labelled IP: A
connectionless approach to ATM. In INFOCOM (3), 1996.
[19] R. Pang, M. Allman, M. Bennett, J. Lee, V. Paxson, and
B. Tierney. A ﬁrst look at modern enterprise trafﬁc. In Proc.
Internet Measurement Conference, Oct. 2005.
[20] R. J. Perlman. Rbridges: Transparent routing. In Proc. IN-
FOCOM, Mar. 2004.
[21] J. Rexford, A. Greenberg, G. Hjalmtysson, D. A. Maltz,
A. Myers, G. Xie, J. Zhan, and H. Zhang. Network-wide
decision making: Toward a wafer-thin control plane. In Proc.
HotNets, Nov. 2004.
[22] T. Roscoe, S. Hand, R. Isaacs, R. Mortier, and P. Jardet-
zky. Predicate routing: Enabling controlled networking. SIG-
COMM Computer Comm. Rev., 33(1), 2003.
[23] A. Wool. The use and usability of direction-based ﬁltering in
ﬁrewalls. Computers & Security, 26(6):459–468, 2004.
[24] A. Wool. A quantitative study of ﬁrewall conﬁguration errors.
IEEE Computer, 37(6):62–67, 2004.
[25] G. Xie, J. Zhan, D. A. Maltz, H. Zhang, A. Greenberg, and
G. Hjalmtysson. Routing design in operational networks: A
look from the inside. In Proc. SIGCOMM, Sept. 2004.