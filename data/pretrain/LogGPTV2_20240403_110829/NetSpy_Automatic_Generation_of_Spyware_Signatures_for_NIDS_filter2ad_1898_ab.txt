rest of this paper, the term network activity/traﬃc is used
synonymously with out-bound network activity/traﬃc.
A system administrator ﬁrst collects reference net-
work statistics by choosing a set of URLs, such as
www.google.com, as the input with which to run Inter-
net Explorer. For each input URL, Internet Explorer gen-
erates one or more HTTP requests. For example, access-
ing www.google.com generates exactly two requests. The
ﬁrst fetches the root document, and the second fetches the
Google logo, referenced within the root document. Figure 3
shows an example of reference network statistics collected
during an experiment where the input set consists of three
URLs. Note that for some URLs, such as www.apple.com
and slashdot.org, there are multiple requests destined for
diﬀerent host addresses.
Although many web sites update their content frequently
(e.g., slashdot.org), the hosts they access rarely change.
Collecting reference network statistics can thus be an in-
frequent activity (e.g. once a week). Alternately, NetSpy
can be conﬁgured to retrieve the latest network reference
statistics daily, or in extreme cases, each time NetSpy is ex-
ecuted. We leave this as a conﬁgurable parameter for Net-
Spy users. An issue that NetSpy must deal with is the back-
ground traﬃc generated by known benign programs such
as email applications and automatic updates. We maintain a
whitelist to ﬁlter out the network traﬃc generated by benign
processes.
Note that our description of this step and the current im-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:53 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006(Step 1.) Reference Network Statistics
HTTP Requests
host
(Step 2 & 3) Infected Network Statistics
HTTP Requests
host
Input
www.app-
le.com
www.-
google.-
com
www.apple.com
images.apple.com
GET /main/css/globalprint.css
GET /home/2006/ticker.rss
other requests omitted for brevity
www.google.com
GET /
GET /intl/en/images/logo.gif
www.apple.com
images.apple.com
data.browser-
accelerator.com
www.google.com
data.browser-
accelerator.com
slashdot.org
images.slashdot-
.org
data.browser-
accelerator.com
GET /main/css/globalprint.css
GET /home/2006/ticker.rss
other requests omitted for brevity
GET ...&theurl=http://www.apple.com/
more requests omitted for brevity
GET /
GET /intl/en/images/logo.gif
GET ...&theurl=http://www.google.com/
more requests omitted for brevity
GET /
GET /topics/topicnintendo.gif
other requests omitted for brevity
GET ...&theurl=http://slashdot.org/
more requests omitted for brevity
slash-
dot.org
slashdot.org
images.slashdot-
.org
GET /
GET /topics/topicnintendo.gif
other requests omitted for brevity
Figure 3. Network statistics collected for input set {www.google.com, www.apple.com, slashdot.org}.
plementation of NetSpy are tailored to detect spyware pro-
grams that infect Internet Explorer. NetSpy currently can-
not handle other kinds of spyware (e.g., keyloggers). We
plan to extend NetSpy to handle such spyware in the future.
Step 2. Collecting network traﬃc from an altered ma-
chine. NetSpy can determine whether an untrusted pro-
gram installed on a machine is potentially spyware. To
do so, a system administrator runs NetSpy on the machine
(with the untrusted program installed) using the same set of
inputs from Step 1. NetSpy automatically collects the net-
work traﬃc generated by the system.
Suppose that Browser Accelerator has been installed
on a machine. The system administrator invokes NetSpy
with the same set of URLs as used in Step 1, which in
turn simulates browsing activity in Internet Explorer. Be-
cause of the spying behavior of Browser Accelerator, Net-
Spy now records extra network activity for each URL vis-
ited. For example, it records extra traﬃc for the input URL
www.apple.com, as shown in the ﬁrst shaded row in Fig-
ure 3.
A key issue is to determine when to invoke NetSpy.
Several possibilities exist. One option is to invoke Net-
Spy periodically (e.g., overnight) on all machines in the
network. Another option is to invoke NetSpy each time
a new program is installed on any machine on a network.
There are several standard techniques to determine that a
new program has been installed. For example, on Win-
dows 2000/XP systems, it is possible to track all browser
extensions and plug-ins that have been installed on a sys-
tem. Thus NetSpy can automatically be invoked when a
new extension or plug-in is installed on a system. This pa-
per assumes that techniques to determine when a new pro-
gram has been installed are readily available to a system
administrator. It focuses instead on how NetSpy determines
whether an unknown program is spyware and generates a
network-level signature for it.
Step 3. Diﬀerential analysis. The goals of this step are
twofold: (i) to identify network traﬃc generated by an un-
trusted program, and (ii) to determine whether the program
is spyware. Diﬀerential analysis achieves the ﬁrst goal by
comparing network traﬃc gathered in Step 2 against the ref-
erence network statistics, gathered in Step 1. For each cap-
tured network packet, NetSpy identiﬁes the hostname that
the packet is destined to, and the destination port number.
The second goal is achieved by correlating user-input to
network traﬃc. This correlation provides concrete evidence
that a program is indeed spyware, following which a system
administrator can use NetSpy’s signature generation tool to
generate a NIDS signature that characterizes the malicious
substrate of the spyware program’s network activity.
The shaded rows in Figure 3 show the malicious network
activity generated by a Browser Accelerator-infected ver-
sion of Internet Explorer, as identiﬁed by NetSpy. Note
that for every input URL entered, there are extra HTTP
requests generated by the infected version of Internet Ex-
plorer (as compared to the reference network statistics)—a
key characteristic of spyware.
In addition, because input
URLs are correlated to outbound network traﬃc generated
by Browser Accelerator, NetSpy classiﬁes Browser Accel-
erator as a spyware (Section 5). However, this need not
always be the case. For example, because Mirar Toolbar
encrypts the data it sends to its home server, the correla-
tion between user input and contents of network traﬃc is
not as clear. Section 3 describes the heuristics that NetSpy
currently employs to rank an untrusted program as potential
spyware.
Step 4. Generating spyware signatures for NIDS. The
ﬁnal step is to generate a network-level signature for a
program identiﬁed as spyware (in Step 3). To do so,
NetSpy uses the spyware-generated network traﬃc identi-
ﬁed by diﬀerential analysis. However, this traﬃc is typ-
ically dependent on user-input. For example, the HTTP
requests generated by Browser Accelerator for the URL
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:53 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006www.google.com contain the string www.google.com.
These requests, if used directly as the signature, would only
match traﬃc generated by Browser Accelerator when the
user visits www.google.com. Thus we must identify the
invariant portion of network traﬃc generated by a spyware
program. We do so using a modiﬁed version of the Longest
Common Subsequence (LCSeq) algorithm [12]. The mod-
iﬁed algorithm adds a wildcard .∗ at locations in the output
of diﬀerential analysis that vary with user input. Doing so
produces a regular expression which can then be used di-
rectly as a NIDS signature.
GET ...&theurl= http://www.google.com/
HTTP
GET ...&theurl= http://www.apple.com/
Requests
GET ...&theurl= http://slashdot.org/
LCSeq
GET ...&theurl=http://.*/
NIDS Sig.
alert tcp $HOME NET any -> $EXTERNAL NET
$HTTP PORTS (msg:"Browser Accelerator";
flow:established,to server; pcre:"GET
...&theurl=http://[.*]"; nocase;
classtype:trojan-activity; ...
;)
Figure 4. Generating NIDS signatures.
We illustrate this on our running example. The ﬁrst row
in Figure 4 contains the three HTTP requests generated by
Browser Accelerator for three input URLs, as identiﬁed by
NetSpy in Step 3. Note that the three requests are almost
identical to each other, except for the URL strings (shown
in the boxes). The basic LCSeq algorithm, when applied
to these requests, ﬁnds structure common to these requests.
The modiﬁed LCSeq algorithm represents portions speciﬁc
to each request using wild-card entries (shown in the sec-
ond row of Figure 4), thus creating a regular expression,
which can be used to create a signature for use with Snort
or Bro. The last row of the ﬁgure shows a Snort signature
constructed using this regular expression.
3. Diﬀerential analysis
Diﬀerential analysis examines the network traﬃc gener-
ated by a machine with an untrusted program installed and
achieves two goals: (i) it identiﬁes the portion of network
traﬃc generated by the untrusted program, and (ii) it de-
termines whether the program is potentially spyware. The
key observation used here is that a spyware program mon-
itors victim activity and reports this back to a home server.
Thus, network traﬃc generated by spyware must be depen-
dent on user-input, i.e., diﬀerent values for user-input pro-
duce diﬀerent network activity. Diﬀerential analysis em-
ploys heuristics, described below, to assign a score between
1 and 3 to an untrusted program, where a higher score indi-
cates that the program is more likely to be spyware.
3.1. Identifying network traﬃc generated by an un-
trusted program
To isolate network traﬃc generated by an untrusted pro-
gram, diﬀerential analysis records network traﬃc generated
by a machine with the suspicious program installed and
compares that traﬃc with reference network statistics. Be-
cause programs behave diﬀerently under diﬀerent inputs,
network traﬃc generated by a program depends on the input
that it is executed with. To identify network traﬃc generated
by an untrusted program, NetSpy compares the traﬃc gen-
erated by running a machine (with the program installed)
under an input set I against the traﬃc generated by a clean
system fed with the same input set.
In particular, suppose that the input set I consists of the
inputs {i1, i2 . . . in}. On our running example, these will be
URLs with which Internet Explorer is invoked. NetSpy sim-
ulates user activity by feeding each input i ∈ I to the pro-
gram, and records the network traﬃc generated. We denote
the captured traﬃc as a tuple , where Pi itself is a
set of tuples, Pi = {,  . . . },
where each hi represents a destination host address, and
pi denotes the corresponding set of network packets (e.g.,
HTTP requests) destined for that host. Note that an input i
can trigger the machine to send data to multiple hosts and
multiple requests to each of these hosts.
This process is used both to collect reference network
statistics and network traﬃc generated by a machine with an
untrusted program installed. Let O(I) and O′(I) denote, re-
spectively, the reference network statistics, and the network
traﬃc generated by a machine with an untrusted program
when invoked with input set I:
O(I) = {,  . . . }
O′(I) = { . . . , }.
The diﬀerence between the two sets, D = O′(I) − O(I),
where D(i) =, i ∈ I, is the network traﬃc
generated by the untrusted program.
Note that we identify network traﬃc associated with the
program under several inputs. As discussed in detail in Sec-
tion 4, this is necessary to produce a NIDS signature if the
program is identiﬁed as spyware. A NIDS signature must
capture an invariant property of network traﬃc generated by
the spyware program—one that does not depend on speciﬁc
user-input. To identify this invariant, we collect network
traﬃc under several inputs.
3.2. Classifying an untrusted program as spyware
Having identiﬁed network traﬃc generated by the un-
trusted program, the next step is to determine if the pro-
gram is spyware. We assign a score to the program based
upon characteristics of the traﬃc that it generates. The
heuristic currently used to assign this score is shown in
Figure 5.
Speciﬁcally, we assign a score of 3 (most
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:53 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006likely to be spyware) to a program that (i) sends data to
a server previously unseen in reference network statistics,
and (ii) generates this data based upon user-input. For
example, in the case of Browser Accelerator, we observe
that each input URL to Internet Explorer is included as
part of a HTTP request sent by Browser Accelerator to
data.browseraccelerator.com, a server that is not in-
cluded in reference network statistics.
Input: S: the spyware program to be analyzed; I: the set of
inputs {i1, i2 . . . in}; O(I) = {, i ∈ I}, the
reference network statistics;
Output: D(I): the extra network traﬃc generated by S for
the input I; RS : the spyware score of the program
S
sarily contiguous) common to two input strings. We mod-
iﬁed LCSeq in two ways. First, to generate signatures for
NIDS, the output must be a regular expression that repre-
sents network traﬃc, with portions of the traﬃc that vary
with user input replaced by wild-cards. We do so by intro-
ducing markers at locations in the input strings where LC-
Seq identiﬁes diﬀerences. These markers are then used to
place the .* wild-card operator and convert the result into a
regular expression. Second, the standard LCSeq algorithm
works over two input strings. We modiﬁed it to work with
an arbitrary set of input strings. We do so by iterating over
the set of packets and reﬁning a candidate longest common
subsequence as we do so. Algorithm 2 shows NetSpy’s sig-
nature generation algorithm.