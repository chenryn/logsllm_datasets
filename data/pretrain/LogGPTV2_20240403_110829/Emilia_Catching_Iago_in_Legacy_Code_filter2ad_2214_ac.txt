history. For example, certain syscalls return a negative value
as the error code, which can be checked against a predeﬁned
list, such as the negative value returned by accept.
Local: Semantics are only dependent on the arguments that
are local to the syscall. For example, the returned number of
bytes processed (read/written) needs to be less than or equal
to the speciﬁed buffer length as an argument, as in read and
getsockopt.
Stateful: Semantics are dependent on the history of previous
syscalls. Certain states can only be affected by the application
itself, in the case of a well-behaved OS. A representative ex-
ample is the current read/write pointer of an open ﬁle, which
is only determined by the previous syscalls the application
has invoked. Example: the return values of epoll_wait
depend on previous invocations and returns.
Unauthenticated channel: In the case of a multi-component
trusted application, sometimes inter-component communica-
tion uses syscalls, e.g., read/write to transmit data via
pipes between processes/threads. When no authentication is
performed, an Iago may result. Notice that this is to be
distinguished with untrusted payload as both endpoints of
the communication here are part of the trusted application.
External: Semantics depend on information external to the
application. Examples include randomness from the Iago pa-
per and time. In theory, without duplicating the corresponding
functions within the OFL, it would be infeasible or impossible
to verify such semantics.
C. Vulnerabilities found
We now describe the vulnerabilities we found by running
Emilia on our corpus of 17 applications. We ran Emilia using
App
Class
c
i
t
a
t
S
l
a
c
o
L
l
u
f
e
t
a
t
S
l
a
n
r
e
t
x
E
l
e
n
n
a
h
C
Total
OpenSSH
WolfSSH
zlib
libreadline
glibc
Coreutils
BOINC
Evolver
Lightthpd
Apache
MongoDB
Redis
Nginx
Memcached
git
curl
Charybdis
Chromium
Total
4
2
6
6
2
1
1
1
6
1
7
1
1
1
Utility
Computa-
tional
1
Network
Interactive
4
0
2
6
7
2
1
1
2
7
2
9
1
2
1
1
1
2
21
2
26
2
51
1
1
1
1
1
1
1
1
1
1
Table 2: Classiﬁcation of tested applications by functionality
and type of vulnerabilities found
the Stateful fuzzing strategy and random, invalid and valid val-
ues. In total, we ran Emilia for 80 hours across all applications.
We focus on the vulnerabilities found by Emilia here ﬁrst, and
give more detailed measurements of Emilia’s performance at
generating syscall coverage and ﬁnding vulnerabilities under
constrained resources in Section VI.
In total, Emilia discovered 51 memory corruption Iago vul-
nerabilities in our application corpus (including glibc). Every
application had at least one vulnerability except WolfSSH, and
vulnerabilities were also found in every class of applications.
Table 2 breaks down the vulnerabilities by type and application
class. We can see that the largest density of vulnerabilities
(21 in 6 applications) was in the Utility class of applications,
which we felt are also the most likely to be ported into SGX.
In particular, many vulnerabilities were found in key libraries,
such as glibc and libreadline, which are likely to be compiled
into many programs. The next class with the highest density
of vulnerabilities were the Network applications. These results
serve also as a word of caution as simply porting networking
applications directly into SGX is likely very risky, even though
there exist frameworks designed to do just that.3
Table 3 lists the vulnerabilities by syscall and vulnerability
type. We see that the majority of vulnerabilities are Local
(80.39%), followed by Stateful (11.76%). Static and local
vulnerabilities, which, as discussed in Section IV-D can be
easily mitigated by an OFL, account for 82.4% of vulnera-
bilities, suggesting that good design of OFLs will be critical
to allowing easier porting of legacy applications into SGX.
On the other hand, the fair number of Stateful vulnerabilities
suggests that some amount of porting is needed, particularly
in complex network and interactive applications. Our results
2For OpenSSH see https://github.com/mfriedl/sk-sgx.
3For example https://github.com/lsds/sgx-lkl.
7
App
Syscall
Count
Redis
openSSH
Apache-httpd
MongoDB
Redis
Nginx
Evolver
BOINC
Chromium
Coreutils
zlib
curl
libreadline
glibc
openSSH
Redis
libreadline
glibc
openSSH
Lighttpd
zlib
Redis
Memcached
glibc
glibc
Lighttpd
Apache-httpd
MongoDB
Redis
Charybdis
Chromium
Git
glibc
Memcached
Total
accept
read
(27)
readlink
(7)
getsockopt
getsockname
write
epoll wait
recvfrom
recvmsg
getdents
epoll wait
(6)
lseek
fstat
read
1
2
6
1
5
1
1
1
1
2
1
1
2
3
1
1
4
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
51
Type
Static
(1, 1.96%)
Local
(41, 80.39%)
Stateful
(6, 11.76%)
External
(2, 3.92%)
Channel
(1, 1.96%)
Table 3: Detected Iago vulnerabilities
suggest that fuzzers such as Emilia can be valuable in helping
developers ﬁnd and ﬁx Iago vulnerabilities in such code.
We describe in detail some of the vulnerabilities that Emilia
discovered:
Static: Many of the syscalls will return a positive value on
success. The negative return value will be interpreted as an
error code, and the C library will move it to errno and set the
return value of the syscall wrapper function to -1. However,
glibc will not perform this translation if the negative value
is less than -4095 because all valid error codes should ﬁt
into this range. In Redis, we found a piece of code that uses a
ﬁle descriptor returned from accept to index a pre-allocated
ﬁle descriptor array. Before performing indexing, Redis checks
the returned ﬁle descriptor with -1, and compares it against
the max size of the array. Usually, those checks are sufﬁcient
to prevent buffer overﬂow since Redis assumes the negative
value returned from the syscall should be a valid error code
and be moved to errno correctly, -1 should be the only
negative return value from the glibc syscall wrapper. Thus, a
8
crafted negative return value less than -4095 will skip the
translation of glibc, pass all those checks and cause out-of-
bounds indexing. For the syscalls that are not allowed to return
any negative values except error codes, the OFL could check
the negative part against a predeﬁned valid value list to prevent
such vulnerabilities.
Local: Syscalls such as read and getsockopt will ﬁll
1
2
3
4
5
6
7
8
9
char buf[PATH_MAX];
if ((len = readlink(path, buf, sizeof(buf) - 1))
== -1)
...
/* error handling */
else {
...
buf[len] = ’\0’;
...
}
Listing 2: An example (readlink) of the local semantics in
OpenSSH
a buffer provided by the caller. There always exists an input
value to specify the max length of the buffer so the OS will not
overwrite the buffer. Upon completion, the syscall sometimes
returns a value to indicate the actual size it has written into
the buffer. In most cases, a benign OS should never return a
value larger than the speciﬁed max length. Listing 2 shows a
vulnerability caused by an unbounded readlink return value
in OpenSSH.
After reading the content of the symbolic link into the buf,
the program tries to form a zero-terminated string by adding
a zero at the end of the string. Normally, the returned len
should be equal to or less than the input length (PATH_MAX
- 1 in this case) based on the speciﬁcation of the readlink
syscall. So the application feels safe to index buf with len
in line 7. However, a large len which breaks the assumption
will let the attacker set any byte beyond buf to zero.
Stateful: Some state information involved in syscalls is sup-
posed to be exclusively controlled by the application. The
application may make assumptions on return values regarding
such state information based on the syscalls it has invoked
previously. To verify this type of return values, a stateful
OFL that can keep track of all related syscalls is necessary.
Syscalls like epoll_wait and epoll_pwait will return
user data corresponding to the polled ﬁle descriptor. The user
data should contain the same data as was stored in the most
recent call to epoll_ctl. This user data usually speciﬁes
a ﬁle descriptor or a pointer. If the application dereferences
the pointer returned by a malicious OS, the vulnerability will
occur. The common usage of epoll will also use the returned
ﬁle descriptor to index a pre-allocated array to extract the
data regarding this ﬁle descriptor. Listing 3 shows an Iago
vulnerability caused by epoll_wait in Lighttpd.
is
an
ev->epoll_events
buffer
of
output
epoll_wait. The malicious OS controls
its content
after the syscall returns. fd is an integer value returned in this
buffer (line 6). Lighttpd retrieves the corresponding handler
function pointer by indexing (fdnode)ev->fdarray
with the returned fd in fdevent_get_handler (line 14).
Then the function pointer gets called in line 8.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
n = epoll_wait(ev->epoll_fd, ev->epoll_events, ev
->maxfds, timeout_ms);
...
ndx = 0;
do {
...
fd = ev->epoll_events[ndx].data.fd
handler = fdevent_get_handler(ev, fd);
(*handler)(srv, context, revents);
} while (++ndx fdarray[fd] == NULL) ERROR();
if (ev->fdarray[fd]->fd != fd) ERROR();
return ev->fdarray[fd]->handler;
}
Listing 3: An example (epoll wait) of the stateful semantics