*   收集安全和审计日志
*   运行 Docker 容器时使用特权开关
*   设备控制组
*   挂载点
*   安全审计
# 保护 Docker 主机
我们从哪里开始保护我们的主机？我们需要从什么工具开始？在本节中，我们将了解如何使用 Docker Machine，以及如何确保以安全的方式创建我们正在创建的主机。Docker 主持人就像你家的前门，如果你不妥善保护他们，那么任何人都可以直接走进去。我们还将查看**安全性增强的 Linux** ( **SELinux** )和**appamor**，以确保您在创建的主机上拥有额外的安全层。最后，我们将了解一些支持操作系统并在发现安全漏洞时自动修补操作系统的操作系统。
# Docker 机器
Docker Machine 是一个工具，允许你在你的虚拟主机上安装 Docker 守护进程。然后，您可以使用 Docker Machine 管理这些 Docker 主机。Docker 机器可以通过 Windows 和 Mac 上的 **Docker 工具箱**安装。如果您使用的是 Linux，您将通过一个简单的`curl`命令安装 Docker Machine:
```
$ curl -L https://github.com/docker/machine/releases/download/v0.6.0/docker-machine-`uname -s`-`uname -m` > /usr/local/bin/docker-machine && \
$ chmod +x /usr/local/bin/docker-machine
```
第一个命令将 Docker Machine 安装到`/usr/local/bin`目录中，第二个命令更改文件的权限并将其设置为可执行。
在下面的演练中，我们将使用 Docker Machine 来设置一个新的 Docker 主机。
Docker Machine 是您应该或将要用来设置主机的设备。因此，我们将从它开始，以确保您的主机以安全的方式设置。我们将看一看，当您使用 Docker Machine 工具创建主机时，如何判断它们是否安全。让我们看看使用 Docker Machine 创建 Docker 主机时的样子，如下所示:
```
$ docker-machine create --driver virtualbox host1
Running pre-create checks...
Creating machine...
Waiting for machine to be running, this may take a few minutes...
Machine is running, waiting for SSH to be available...
Detecting operating system of created instance...
Provisioning created instance...
Copying certs to the local machine directory...
Copying certs to the remote machine...
Setting Docker configuration on the remote daemon...
```
从前面的输出中，当 create 正在运行时，Docker Machine 正在做一些事情，例如创建机器、等待 SSH 可用、执行操作、将证书复制到正确的位置以及设置 Docker 配置，我们将看到如何将 Docker 连接到该机器，如下所示:
```
$ docker-machine env host1
export DOCKER_TLS_VERIFY="1"
export DOCKER_HOST="tcp://192.168.99.100:2376"
export DOCKER_CERT_PATH="/Users/scottpgallagher/.docker/machine/machines/host1"
export DOCKER_MACHINE_NAME="host1"
# Run this command to configure your shell:
# eval "$(docker-machine env host1)"
```
前面的命令输出显示了为将该机器设置为 Docker 命令现在要运行的机器而运行的命令:
```
 eval "$(docker-machine env host1)"
```
我们现在可以运行常规的 Docker 命令，如`docker info`，它将从`host1`返回信息，现在我们已经将其设置为我们的环境。
从前面突出显示的输出中，我们可以看到从两个导出行开始就安全地设置了主机。这是第一条高亮显示的线:
```
export DOCKER_TLS_VERIFY="1"
```
从另一个突出显示的输出中，`DOCKER_TLS_VERIFY`被设置为`1`或`true`。这是第二条高亮显示的线:
```
export DOCKER_HOST="tcp://192.168.99.100:2376"
```
我们正在设置主机在`2376`的安全端口上运行，而不是在`2375`的不安全端口上运行。
我们还可以通过运行以下命令来获取这些信息:
```
$ docker-machine ls
NAME      ACTIVE   DRIVER       STATE     URL                         SWARM 
host1              *        virtualbox     Running   tcp://192.168.99.100:2376 
```
如果您已经使用前面的说明将您的 Docker 主机和 Docker 容器设置为使用 TLS，请确保检查可以与 Docker Machine 一起使用的 TLS 开关选项。如果您有想要使用的现有证书，这些开关会很有帮助。通过运行以下命令，可以在高亮部分找到这些开关:
```
$ docker-machine --help
Options:
 --debug, -D      Enable debug mode
 -s, --storage-path "/Users/scottpgallagher/.docker/machine"
Configures storage path [$MACHINE_STORAGE_PATH]
 --tls-ca-cert      CA to verify remotes against [$MACHINE_TLS_CA_CERT]
 --tls-ca-key      Private key to generate certificates [$MACHINE_TLS_CA_KEY]
 --tls-client-cert     Client cert to use for TLS [$MACHINE_TLS_CLIENT_CERT]
 --tls-client-key       Private key used in client TLS auth [$MACHINE_TLS_CLIENT_KEY]
 --github-api-token     Token to use for requests to the Github API [$MACHINE_GITHUB_API_TOKEN]
 --native-ssh      Use the native (Go-based) SSH implementation. [$MACHINE_NATIVE_SSH]
 --help, -h      show help
 --version, -v      print the version
```
您也可以使用`regenerate-certs`子命令为机器重新生成 TLS 证书，以防您想要安心或您的密钥被泄露。一个示例命令看起来类似于以下命令:
```
$ docker-machine regenerate-certs host1 
Regenerate TLS machine certs?  Warning: this is irreversible. (y/n): y
Regenerating TLS certificates
Copying certs to the local machine directory...
Copying certs to the remote machine...
Setting Docker configuration on the remote daemon...
```
# SELinux 和 AppArmor
大多数 Linux 操作系统基于这样一个事实，即它们可以利用 SELinux 或 AppArmor 对操作系统上的文件或位置进行更高级的访问控制。使用这些组件，您可以限制容器作为具有根用户权限的根用户执行程序的能力。
Docker 确实提供了一个安全模型模板，它随 AppArmor 一起提供，Red Hat 也为 Docker 提供了 SELinux 策略。您可以利用这些提供的模板在您的环境之上添加额外的安全层。
有关 SELinux 和 Docker 的更多信息，我建议访问以下网站:
[https://www . mankier . com/8/docker _ selinux](https://www.mankier.com/8/docker_selinux)
另一方面，如果你想在 AppArmor 和 Docker 上阅读更多内容，我建议你访问以下网站:
[https://github . com/docker/docker/tree/master/contraib/apparmor](https://github.com/docker/docker/tree/master/contrib/apparmor)
在这里你会发现一个`template.go`文件，这是 Docker 随其应用附带的模板，也就是 AppArmor 模板。
# 自动修补主机
如果你真的想进入高级 Docker 主机，那么你可以使用 **CoreOS** 和 **Amazon Linux AMI** ，它们都以不同的方式执行自动修补。当安全更新出现时，CoreOS 将为您的操作系统打补丁并重新启动您的操作系统，而当您重新启动时，亚马逊 Linux AMI 将完成更新。因此，在设置 Docker 主机时选择使用哪个操作系统时，请确保考虑到这两个操作系统都实现了某种形式的自动修补，但方式不同。您将需要确保您正在实施某种类型的扩展或故障转移，以满足运行在 CoreOS 上的某些东西的需求，以便在重新启动以修补操作系统时不会出现停机。
# 总结
在本章中，我们研究了如何保护我们的 Docker 主机。Docker 主机是第一道防线，因为它们是您的容器运行以及彼此和终端用户通信的起点。如果这些都不安全，那么就没有继续前进的目的。您学习了如何设置 Docker 守护程序，通过为主机和客户端生成适当的证书来安全运行 TLS。我们还研究了使用 Docker 容器的虚拟化和隔离优势，但请务必记住 Docker 守护程序的攻击面。
其他项目包括如何使用 Docker Machine 在具有安全通信的安全操作系统上轻松创建 Docker 主机，并确保在使用它设置容器时使用安全方法进行设置。使用 SELinux 和 AppArmor 等项目也有助于提高您的安全足迹。最后，我们介绍了一些可以用于自动修补的 Docker 主机操作系统，例如 CoreOS 和 Amazon Linux AMI。
在下一章中，我们将研究如何保护 Docker 的组件。我们将着重于保护 Docker 的组件，例如您可以使用的注册表、在您的主机上运行的容器，以及如何对您的映像进行签名。