title:Structuring Protocol Implementations to Protect Sensitive Data
author:Petr Marchenko and
Brad Karp
Structuring Protocol Implementations to Protect Sensitive Data
Petr Marchenko and Brad Karp
University College London, Gower Street, London WC1E 6BT, UK
{p.marchenko,bkarp}@cs.ucl.ac.uk
Abstract
In a bid to limit the harm caused by ubiquitous remotely
exploitable software vulnerabilities, the computer sys-
tems security community has proposed primitives to al-
low execution of application code with reduced privilege.
In this paper, we identify and address the vital and largely
unexamined problem of how to structure implementa-
tions of cryptographic protocols to protect sensitive data
despite exploits. As evidence that this problem is poorly
understood, we ﬁrst identify two attacks that lead to
disclosure of sensitive data in two published state-of-
the-art designs for exploit-resistant cryptographic proto-
col implementations: privilege-separated OpenSSH, and
the HiStar/DStar DIFC-based SSL web server. We then
describe how to structure protocol implementations on
UNIX- and DIFC-based systems to defend against these
two attacks and protect sensitive information from dis-
closure. We demonstrate the practicality and generality
of this approach by applying it to protect sensitive data
in the implementations of both the server and client sides
of OpenSSH and of the OpenSSL library.
Introduction
1
Cryptographic protocols are entrusted to preserve the in-
tegrity and secrecy of sensitive data as it traverses a net-
work. While these protocols incorporate strong mecha-
nisms to defend against in-network eavesdropping and
modiﬁcation of data in transit, such protocols function
in today’s distributed systems only as imperfect, human-
written software. Clearly, the desired outcome for secure
system designers implementing a secure data transfer
protocol like SSH [13] or SSL/TLS [4] is end-to-end in-
tegrity and secrecy for sensitive data, despite not only in-
network threats, but also threats that may arise from the
behavior of the protocol implementation(s) at the ends of
the wire. The dismal past two decades of remotely ex-
ploitable vulnerabilities in software deployed widely on
network-attached hosts are thus real cause for alarm—
even if the abstract design of a cryptographic protocol is
correct, the protocol’s very implementation is a worry-
ingly weak link in achieving end-to-end security goals.
In the quest for a lasting end-to-end defense for sen-
sitive data against disclosure or corruption by a remote
attacker, whatever vulnerabilities and exploits come to
light in the future, the systems research community has
in recent years sought to put the venerable principle of
least privilege [10] into better practice in the software
running on network-connected servers. This design tenet
dictates that the programmer should partition his code
into compartments, each of which executes a portion of
the program with minimal privilege necessary to carry
out its function. Here, privilege corresponds to access
rights for system resources: to read or write the ﬁlesys-
tem, memory, or network, to invoke a system call, &c.
In the context of exploitable vulnerabilities and sensitive
information, least privilege amounts to designing an ap-
plication with the expectation that exploits will occur, but
limiting the harm that they may cause by restricting the
actions that an attacker may take post-exploit.
Early work [5, 9] explored how to minimize priv-
ilege on compartments instantiated as standard UNIX
processes. More recently, the community has devoted
considerable effort to providing various operating system
primitives intended to make it easier for programmers to
adhere to the principle of least privilege. These primitives
range from operating system support for decentralized
information ﬂow control (DIFC) [6, 12, 14, 15], which
limits the privileges of any compartment exposed to sen-
sitive information, to process-like primitives that lessen
the likelihood of accidental propagation of privileges be-
tween compartments against the programmer’s intent [2].
While these results all represent important advances
over the prior state of the art, we believe that proposals
to date for new primitives to encourage programmers’
adherence to least privilege largely ignore a central, vi-
tal question: how should a programmer structure code
and limit privilege to prevent disclosure or corruption of
sensitive data by an attacker who can exploit a vulner-
ability? Regardless of the primitives used, this daunting
question looms. To their credit, the proposers of these
primitives present examples of how to structure applica-
tion code to use them. But these examples are typically
offered as existential evidence that the primitives them-
selves are useful; no guidance or principles are offered
for how one may structure an application’s code to use
the primitives and robustly provide the desired end-to-
end secrecy and/or integrity guarantees.
Moreover, the structures of these example applica-
tions are complex, as they are typically split into many
compartments. To wit, the OKWS web server spreads
its code among at least 5 compartments (processes) [5],
the sthread-partitioned Apache/SSL web server consists
of 9 compartments (sthreads and callgates) [2], and the
HiStar/DStar-labeled Apache/SSL web server consists
of 7 compartments (processes) [15]. Each application’s
many compartments are conﬁgured with different privi-
leges and labels, respectively, and interconnected in com-
plex patterns. Structuring code to use these primitives ap-
pears difﬁcult. Indeed, as we show in Section 3, even
highly security-conscious programmers using state-of-
the-art techniques [9, 15] have not adequately considered
how to defend cryptographic protocol implementations
from exploit-based attacks.
In this paper, we offer a practical improvement over
the status quo: principles to guide programmers in struc-
turing cryptographic protocol implementations so as to
robustly protect sensitive user data end-to-end, including
in cases where a remote attacker exploits untrusted ap-
plication code. Our contributions include:
• We deﬁne two general classes of attack on cryp-
tographic protocol implementations: session key dis-
closure attacks and oracle attacks. We demonstrate
that two state-of-the-art cryptographic protocol imple-
mentations, one in privilege-separated OpenSSH [9]
and the other in a DIFC-labeled Apache/SSL web
server [15], are vulnerable to these attacks.
• We provide protocol-agnostic principles for structur-
ing cryptographic protocol implementations to protect
sensitive data against disclosure and corruption when
an exploitable vulnerability is present in code that pro-
cesses network input.
• As evidence of the practicality and generality of these
principles, we present restructured implementations of
the OpenSSH server and client and of the OpenSSL
library that limit privilege so as to protect users’ sen-
sitive data from an adversary who can remotely ex-
ploit the implementation. This restructured OpenSSL
library can act as a drop-in replacement for the stock
library, bringing robustness against these attacks to a
wide range of SSL-enabled applications.
2 Background
We now summarize the state of the art in protecting sen-
sitive data in network server software. The two main ap-
proaches in use are privilege separation and decentral-
ized information ﬂow control (DIFC).
2.1 Privilege Separation with Processes
In a monolithic application, in which all code executes
in a single compartment (under UNIX or Linux, a pro-
cess), all instructions execute with full privilege. Thus,
an exploit of a vulnerability may result in disclosure of
sensitive data, and more generally, grants the full privi-
lege held by the application to any code injected by the
attacker. Privilege separation [9] has proven effective in
mitigating these threats. This technique follows from the
observation that an application need not execute individ-
ual operations with the union of all privileges needed
by all operations during the application’s entire lifetime.
Many vulnerability-prone operations, such as parsing, do
not require access to sensitive information or the ﬁlesys-
tem. If we partition a monolithic application into com-
partments and restrict some compartments’ privileges, an
exploit in an unprivileged compartment will not be able
to disclose or corrupt sensitive information to which it
does not have access. Code that runs in privileged com-
partments, however, must be carefully audited to protect
the sensitive data it can access.
The privilege-separated OpenSSH server [9] divides
the server’s code into separate standard UNIX/Linux
processes. This partitioning includes a network-facing
unprivileged process that performs key exchange and au-
thentication protocols, and a privileged monitor process
running as root that exports an interface to the unpriv-
ileged process to allow invocation of privileged opera-
tions, such as signing with the server’s private key, veri-
fying user credentials, &c.
This structure is intended to deny the attacker execu-
tion of code with root privilege on the server; the at-
tacker only interacts directly with the unprivileged pro-
cess. Provos et al. state that “programming errors occur-
ring in the unprivileged parts can no longer be abused to
gain unauthorized privileges” [9]. This claim holds be-
cause the unprivileged process executes with restricted
ﬁle system access (enforced with a chroot system
call), and with unused user and group IDs of nobody,
which prevent it from tampering with other processes.
The SELinux security extensions to Linux [7], which
post-date Provos et al.’s work, allow enforcement of ﬂex-
ible mandatory access control policies speciﬁed by a sys-
tem administrator. These policies support ﬁner-grained
restriction of a process’s privileges than under stock
Linux, primarily by checking system call invocations in
the kernel against a per-process access control list. We
employ these extensions in our cryptographic protocol
implementations for OpenSSH and OpenSSL.
2.2 DIFC
Decentralized information ﬂow control (DIFC), as im-
plemented in the research prototype operating systems
Asbestos [12] and HiStar [14], and retroﬁtted to Linux in
Flume [6], offers a different approach to limiting privi-
lege within applications. In these systems, a programmer
expresses an information ﬂow policy by labeling data ac-
cording to its sensitivity level. Should an unprivileged
compartment access data labeled as sensitive, it becomes
tainted, and at run-time, the operating system prevents
it from communicating with compartments tainted with
Figure 1: HiStar-labeled SSL web server. We omit SSLd’s and netd’s
labels in the interest of brevity.
lower levels of sensitivity, or with the network or con-
sole. This way, an unprivileged compartment cannot con-
vey sensitive data out of the application. To allow output,
trusted compartments perform privileged operations on
sensitive data: they own sensitive labels, and are thus al-
lowed by the operating system to declassify sensitive in-
formation, stripping it of its sensitivity label(s).
Building on these DIFC primitives, Zeldovich et
al. present a state-of-the-art privilege-separated SSL web
server [15], shown in slightly simpliﬁed form in Figure 1.
Ovals represent code: shaded ovals are trusted, privileged
compartments, while white ovals are untrusted compart-
ments. A dashed arrow between compartments A and B
indicates that A may invoke an operation in B with argu-
ments and retrieve the result. Boxes represent sensitive
data. A solid arrow from data to a compartment denotes
that the compartment may read that data; an arrow in the
reverse direction denotes write access. Circles annotating
data items and compartments indicate labels; in the latter
case, a compartment is tainted with the label in question.
Finally, a label within a star denotes that a compartment
owns that label (and may declassify data labeled with it).
The HiStar-labeled SSL web server is partitioned into
several untrusted compartments to limit the effect of
a compromise of any single one. The major compart-
ments are per-connection SSLd, per-connection httpd,
and shared RSAd daemons. SSLd handles a client’s SSL
connection and performs key exchange, server authenti-
cation, encryption and decryption. httpd processes clear-
text HTTP requests; it uses SSLd to decrypt requests and
encrypt replies. httpd can obtain ownership of a user’s
label by authenticating with the trusted authd daemon.
Label ownership allows httpd to read the user’s data and
declassify it for transfer over the network. The trusted
netd serves as a barrier between the application and the
network. It passes only declassiﬁed data (with no label)
to the network.
3 Attacks on Protocol Implementations
The designers of cryptographic protocols like SSH and
SSL aim to provide end-to-end conﬁdentiality and in-
tegrity for users’ data transferred during a session. When
applied correctly, both privilege separation and DIFC can
ensure that exploits of unprivileged compartments in a
protocol’s implementation will not lead to violations of
these properties. In this section, we present two attacks
Figure 2: Session key disclosure attack against privilege-separated
OpenSSH server.
that violate the conﬁdentiality and integrity of sensitive
user data in two state-of-the-art privilege-separated sys-
tems: one in privilege-separated OpenSSH, and one in a
HiStar-labeled Apache-derived SSL web server.1
3.1 Session Key Disclosure Attack
The partitioning goal stated by the designers of privilege-
separated OpenSSH was to prevent attackers’ executing
code with root privilege. However, as we will see, that
goal is not sufﬁcient to preserve the conﬁdentiality and
integrity of the user’s sensitive data.
In prior work [2], we described an active man-in-
the-middle attack against an SSL-enabled Apache Web
server. This attack, which we term the session key disclo-
sure attack (SKD attack), is also valid against a privilege-
separated OpenSSH server. While in prior work we only
discussed this attack against an SSL implementation, we
now demonstrate that this attack applies against any pro-
tocol in which the two parties share a symmetric secret
key.
In the SKD attack, an active man in the middle com-
promises an unprivileged compartment on the server, dis-
closes the user’s session key, and can then decrypt the
sensitive data transmitted during the session. This attack
succeeds because the unprivileged compartment respon-
sible for key exchange and server authentication can read
the session key shared between the server and client. We
illustrate the SKD attack on Difﬁe-Hellman (DH) key ex-
change in OpenSSH in Figure 2. Here an unprivileged
compartment processes key exchange messages and in-
vokes a privileged monitor to sign a session ID with
the server’s private key (the privileged monitor is not
shown in the ﬁgure). The user-privileged compartment
executes with the authenticated user’s UID and provides
a remotely accessible shell.
The attacker begins by exploiting the server’s unprivi-
networknetdSSLdRSAdpriv keyhttpduauthduser ﬁleskkuuukMan-In-The-MiddleserverNew keysNew keysclient IDserver IDserver IDclient IDNew keysexploitend of key exchangeencryption startssession keyUser AuthenticationUser Sessionclientunprivilegedcompartmentuser-privilegedcompartmentNew keys.......key exchange messagesThe
leged compartment. He relays all key exchange messages
to and from a legitimate user. The server and user com-
pute a shared session key, which the attacker’s injected
code sends the attacker from the compromised compart-
ment. After user authentication, the user transmits sen-
sitive data encrypted with the compromised session key.
Using the session key, the attacker can reveal the user’s
sensitive data, as well as inject her own commands and
obtain further sensitive information stored on the server.
Moreover, the session key also provides secrecy for user
authentication, so the password of a client using pass-
word authentication will be compromised.
state-of-the-art, HiStar-labeled
SSL web
server [15] aims to safeguard users’ sensitive data
from disclosure to other users. We note with interest
that because the designers of this cryptographic protocol
implementation did not consider the SKD attack when
structuring their code, this server is vulnerable to the
SKD attack in the same way that the privilege-separated
the untrusted SSLd
OpenSSH server is. Speciﬁcally,
compartment computes a session key for a user’s
connection, but if an active man-in-the-middle attacker
compromises this compartment, she may disclose the
session key.
3.2 Oracle Attack
Next, consider the HiStar-labeled SSL web server shown
in Figure 1. Depending on the key exchange protocol in
use, RSAd signs either the ephemeral RSA key or the
public DH components supplied by the untrusted SSLd
with the server’s permanent private key. This signature