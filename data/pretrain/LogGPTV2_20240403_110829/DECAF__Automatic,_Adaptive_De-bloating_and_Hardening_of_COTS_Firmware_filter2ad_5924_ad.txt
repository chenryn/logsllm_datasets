1722    29th USENIX Security Symposium
USENIX Association
similar ﬁrmware). There is almost no difference between dif-
ferent patch versions of the same model (generally a few new
modules added). Given the large amount of overlap between
different UEFI ﬁrmwares, it is easy to see why a vulnerability
found in a single ﬁrmware may be reproducible across a wide
variety of mass-produced hardware (as discussed in [45]).
5.2 Beneﬁts of Reduced Vulnerability Surface
Beneﬁts of code reduction include: reduced TCB – at the
industry-average of 1.5-5% bugs per line of code [27], this
can add up to thousands of (undiscovered) bugs and hundreds
of exploits – reduced boot time, the ability to ﬁt the ﬁrmware
onto a smaller SPI chip etc, removal of physical attack vectors
such as over peripherals (e.g., USB), and a reduction in the
number of Return Oriented Programming (ROP) gadgets etc.
In this section, we provide an analysis of these beneﬁts.
5.2.1 Industry Standard BPLOC Metrics
The number of bytes generated from one line of pre-processed
C code by an optimized compiler has been estimated [16] at
around 14. This allows an estimation of the number of source
code lines used to produce the ﬁrmware images. We can then
calculate the number of lines removed using the reduction in
byte surface area (Table 4).
The industry-average number of bugs per line of code
(BPLOC) [27] has been estimated as 1.5-5%. This allows
an estimation of the number of undiscovered, removed de-
fects for different motherboards. Under aggressive pruning,
an estimated 2261 bugs were removed from the SuperMicro
A1SAi, and 2791 from the Tyan. Under data center pruning,
the number is as high as 1005 (Table 5).
5.2.2 Removing Infrequently Used Features
Further, removing rarely used features (features likely to be
removed by the DECAF pipeline) provides a proportionally
higher beneﬁt. Rarely used features are more likely to contain
errors, since the resulting bugs are less likely to be discovered
and therefore less likely to receive development attention
beyond in-house testing [22].
5.2.3 Pruned Code is not Unreachable
At ﬁrst glance, it may seem that any code whose removal
does not affect functionality is unreachable. This is not the
case with a vast majority of DECAF-pruned modules and can
be validated by the signiﬁcant reduction in boot time which
shows modules are part of the control ﬂow.
Further, there are numerous vectors by which an attacker
indirectly gains access to code that is not entirely run in a
standard boot sequence. For example, consider a ﬁrmware
image that contains two DHCP modules: one from the EDK
II standard and one from the manufacturer. Suppose the EDK
II module contains an exploit, but the manufacturer module is
loaded by default. If an attacker can cause the manufacturer
module to fail to execute (perhaps because it contains a less
signiﬁcant defect), then the EDK II module will be loaded
when another module looks up the DHCP protocol.
Similarly, ROP gadgets can be used to load a normally
unused module directly (Section 5.3).
Finally, consider the case of a driver for an obsolete pe-
ripheral. This code may not execute during a normal boot
sequence, but may be executed if the booted operating sys-
tem requests such a driver. If the module contains a serious
exploit, an attacker that gains control of the operating system
can cause the driver to be executed, escalating an operating
system attack to a ﬁrmware attack. This could pose a serious
permission escalation if, for example, the hardware owner’s
intention was to prevent the OS from accessing the ﬁrmware
payload on the SPI chip (e.g., for bare-metal cloud).
5.3 Mitigating Existing Attacks
Finding and directly patching existing known ﬁrmware bugs
is not within the scope of this work. Indeed as noted in Section
4.5, no CHIPSEC reported bugs disappeared after pruning.
The goal of DECAF is to maximally reduce the vulnerability
surface of the hundreds of bugs that are still unknown.
In fact ﬁrmware vulnerabilities (some fatal [38]) do not
receive anywhere near as much attention, publicity, and track-
ing when compared with OS and software vulnerabilities.
A search for "UEFI" reveals only 23 results in the CVE
database [6], many of which are related to a single USB issue.
Searches for speciﬁc models or product lines we pruned re-
veal a few more, but virtually all relate to the BMC and not
the ﬁrmware itself.
Nevertheless, in addition to reducing the overall vulnera-
bility surface, DECAF also helps mitigate a number of com-
mon attack vectors including: Return Oriented Programming
(ROP), USB attacks, SMM attacks, and network attacks.
5.3.1 Return Oriented Programming (ROP)
ROP allows an attacker to hijack the control ﬂow of a program
by executing a speciﬁc set of instructions that are already
found within the original code. This type of attack is based on
gadgets (short sequences of instructions followed by a return)
assembled together through stack-originated calls. There are
two similar classes of attacks, Call Oriented Programming
(COP) and Jump Oriented Programming (JOP). These are
similar to ROP but make use of call and jump instructions,
respectively. Attacks start with a buffer overﬂow hijacking
the control ﬂow, e.g., by sending malformed network packets
processed by a faulty UEFI driver.
Using the buffer overﬂow, a function pointer or some part
of the executable memory is overwritten with a malicious
sequence. By manipulating the stack, the attacker can then
USENIX Association
29th USENIX Security Symposium    1723
jump into a gadget, and each gadget indirectly branches to
another, allowing execution of arbitrary code, subverting the
original control ﬂow of the application.
Crucially, gadget-style attacks are (sometimes exponen-
tially) easier with increasing code base. A single gadget may
modify the control ﬂow or program memory in a limited way.
However, chained gadgets can be made Turing complete [34].
Firmware contains large numbers of potentially exploitable
gadgets. However, not all gadgets are equal in terms of useful-
ness when mounting an attack. Gality [4] is a tool that seeks to
analyze the entire set of gadgets available in a binary and deter-
mine how many of them are "high-quality." Table 2 and Table
3 illustrate the numbers obtained using this tool on several
ﬁrmware images. DECAF pruning reduces the total gadgets
available by 12 to 64% and reduces the high-quality gadgets
available by 11 to 62%. Gadget quality is evaluated based on
type (arithmetic, logic, control ﬂow, etc), pre-conditions and
side effects on the stack, and whether popular known attacks
are possible with the given gadget collection [15].
5.3.2 USB Attacks
Another extremely common attack vector is a motherboard’s
USB port. There are many known USB attacks, many requir-
ing no further user interaction than plugging in the device,
and some are even able to re-ﬂash the ﬁrmware [30]. For data
center scenarios, DECAF routinely prunes USB and other
unnecessary peripherals, completely eliminating the attack
vector (Section 5.4).
5.3.3 SMM Attacks
System Management Mode (SMM) is a privileged execution
mode. During the DXE phase, System Management Interrupt
(SMI) handlers are loaded into SMRAM. When an SMI is
trigged, the handler runs in this highly privileged state. The
handlers can communicate with the operating system through
a shared buffer. This presents two new attack vectors: 1) if
an attacker can overwrite SMRAM, she can execute arbitrary
code in a highly privileged state, and 2) if she can gain access
to the SMM communication buffer, and there exists an exploit
in an SMI handler, she can escalate an OS attack into a BIOS
attack.
Kallenberg et al. [20] construct an attack of the latter type.
The ﬁrmware in question (Dell Latitude E6400, BIOS revi-
sion A29) provides an SMI routine that allows ﬂashing of
the BIOS from the OS. The routine reads packets from the
SMM communication buffer, reconstructs the BIOS update
image, and veriﬁes its integrity. However, a ﬂaw in the packet
handling allows for a stack smashing style attack, which the
authors show can be used to ﬂash a malicious, unsigned BIOS
image. DECAF can (likely automatically) prune the mod-
ule that installs the BIOS update SMI routine. The BIOS
menu can be kept, thus removing this exploit vector while
still allowing BIOS updates from the BIOS itself.
The above exploit is CVE-2013-3582 [19]. A search for
SMM related CVEs [5] reveals 24 other potential applications
for DECAF. However, many are self-disclosed (e.g., by HP
and others etc) and do not provide attack details.
5.3.4 Network Attacks
Other important attack vectors center around the (sometimes
multiple) network stacks present in the ﬁrmware. The network
stack is needed by services such as DHCP, FTP, and PXE in
the pre-boot environment. Simple attacks include, for exam-
ple, exploiting the lack of signatures and authentication in
certain DHCP servers: preempting a legitimate DHCP server,
and inducing the BIOS to boot a malicious image and take
over the existing operating system. This has been demon-
strated by Matt Weeks at Defcon 19 [42]. DECAF prunes any
unnecessary network stacks and can also be used to remove
associated services (e.g., DHCP) to thus completely remove
an attack vector often exposed by sysadmin negligence.
5.4 Feature-Speciﬁc Pruning
While the primary use-case of DECAF is to produce the most
efﬁcient, minimal images retaining a desired set of functional-
ity, it can also be used to instead remove one or more desired
features while retaining as much of the original image as pos-
sible. For example, some features may not be desirable on
certain critical hardware; removing USB or GPIO support in
order to prevent physical access to a device is a common sce-
nario in security sensitive contexts. Another example would
be disabling unused hardware components to save power.
For this approach a goal can be set for a maximal image
that will behave like the original with the exception of the one
removed feature. To this end, DECAF runs up to the point
where the target feature is pruned. After this, the process is
reversed and modules are inserted back incrementally until
the original image is as close to the original as possible, while
still missing the target feature. Inter-module dependencies
still represent a constraint here and this is the reason why
DECAF cannot simply add everything back after the target
feature is disabled. It is important to note that there is no
guarantee the target feature can be disabled by removing a
single module from the image; a set of modules might be
removed in order to achieve the desired effect.
Further, to disable the support for a given feature, other
side effects may appear – e.g., DECAF may not be able to
remove a single USB port; only all USB ports.
As an example, consider the SuperMicro A1SAi-2550F
motherboard. Pruning to eliminate USB support results in a
removal of 6 modules out of a total of 244.
1724    29th USENIX Security Symposium
USENIX Association
6 Discussion
6.1 Limits of BPLOC as a security metric
Industry-average BPLOC (bugs per line of code) [27] as a
security metric has obvious limitations.
Primarily, it does not really address or represent any ex-
isting known vulnerability. No CVE entry will be related to
generally reducing vulnerability surface.
Secondarily, psychologically it is easy to overlook and posit
that if only developers are more careful, this rate will go down.
Yet, unfortunately this is not true. Even extremely rigorous
processes such as put in place by Microsoft still yield “about
10 - 20 defects per 1000 lines of code [KLOC] during in-house
testing, and 0.5 defect per KLOC in released product”.
Thirdly, not all of the 1.5-5.0 average bugs introduced for
every hundred lines of code can be turned into viable exploits.
Yet, even if only 1% of them do, this results in tens of zero
day vulnerabilities for even the simplest ﬁrmware we tested.
6.2 Limits ROP as a security metric
Using ROP as a security metric in previous works has gar-
nered some criticism. Crucially, ROP gadgets are almost never
eliminated entirely, and therefore the beneﬁt of reducing their
count is reduced by the fact that the remaining gadgets may
still provide viable exploit paths.
[10] shows that in the case of the source code trimming
tools CHISEL and TRIMMER tools, debloating can in fact
introduce new gadgets, including some that are even more
exploitable than what existed previously.
Note, however, that this is only true of intra-source code
trimming techniques, which may result in wildly different
instructions in the ﬁnal binary. Since DECAF prunes entire,
self-contained binaries, it does not rewrite code nor does it
rearrange the existing control graph in binary blobs, and thus
introduces zero new gadgets. This also means that the reduced
gadget count really represents the removal of entire attack
vectors. Removing a module with high quality gadgets means
none of those gadgets can be used to craft an exploit.
Nevertheless, existing ROP-reduction related criticism still
holds: as long as some gadgets are left, ROP may still be
feasible albeit in a more limited form.
6.3 Limitations of Validation
There are, of course, limitations to automated removal. For
example, only the functionality required by the validation
tests is guaranteed to be preserved and special edge cases may
be challenging to handle. For example, a module may depend
on other error handling modules only in the case of hardware
errors (which are not triggered or emulated during pruning).
Pruning the error handling modules may result in undeﬁned
behaviour. This hypothetical may require special handling,
however we note that no such examples can be found in the
core EDK II codebase.
Overall, 100% test case coverage for outlier scenarios is
obviously not feasible. This is why special care must be taken
to ensure that the validation targets match the intended use
cases of a particular pruned ﬁrmware. For example, if the
ﬁrmware is intended to be used in a NAS box, validation
targets will test RAID functionality, read/write speeds, and
(simulate) hardware (e.g., disk I/O) failures. Indeed, the vali-
dation requirements are simplest (and the pruning potential
greatest) where limited functionality is required, such as our
aggressive proﬁle or Data Center pruning (Section 5).
Finally, we note that BIOS functionality is to be minimal
anyway. Apart from driving highly esoteric motherboard-
speciﬁc hardware (which would likely employ non-UEFI
ﬁrmware anyway), most functionality is often taken over by
OS drivers which are more powerful and up to date.
In our experience of successfully running heavily pruned
images in production data centers since 2017, having the OS
successfully boot and pass basic sanity checks is sufﬁcient for
thousands of even the most demanding enterprise applications
running on top.
7 Future Work
In ongoing work, DECAF is being augmented to perform
static analysis and binary module payload reduction on indi-
vidual modules. We’ll use existing work [7] as well as newly
designed mechanisms for symbolic execution to further opti-
mize pruning.
In addition to analyzing and pruning at sub-module level,
DECAF would be greatly enhanced by the ability to patch
modules to enable certain platform protections where they
are missing, such as the ones described in Section 4.5.
Expanding and perfecting our set of validation targets is
something we are continuing to work on. One validation
target that we experimented with was the Firmware Test Suite
(fwts).
fwts [21] is a comprehensive set of tests of operating sys-
tem/ﬁrmware interactions. It executes 113 test suites that in-
clude all CHIPSEC tests, ACPI, error reporting mechanisms,
CPU and memory states, and hand-off to the main OS. We
were able to achieve similar pruning percentages without any
degradation on the test results using only fwts.
To mitigate long running validations, the pipeline will be
extended to allow speciﬁc validation targets to run only in
certain cases (e.g., after a certain pruning size etc), backtrack-
ing to the last passing proﬁle if the target fails. This allows
for longer-running validation targets to be included without
dramatically increasing the overall pipeline runtime.
USENIX Association
29th USENIX Security Symposium    1725
8 Related Work
Program slicing allows programmers to obtain the minimal
software form that provides a particular behavior [44]. This
approach is typically used for speciﬁc purposes such as testing,
debugging, compiler optimization, or software customization.
The reduction of a program can be done either statically, e.g.,
by determining the Control Flow Graph and removing unused
nodes, or dynamically, e.g., by decomposing the program
execution, typically while debugging, and identifying only
statements/variables of interest.
Debloating software is a mechanism that focuses on deter-
mining the unused code of a program and removes it. Modern
compilers already implement functions to eliminate dead code
through static analysis, hence, most recent work focuses on
dynamic elimination. Heo et al. present a novel approach
to program debloating using reinforcement learning [17]. In
their work, they present motivating examples wherein static
analysis and dynamic analysis alone cannot remove all the