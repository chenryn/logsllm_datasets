### 3.3.1 Data Type Consolidation

The `open` system call returns a file descriptor of type `long`, whereas the `read` and `write` system calls use `unsigned int` for their file descriptors. This discrepancy suggests the need for consolidating the various data types. To simplify our analysis, we group the numerous data types into a smaller set of "Macro-Types." Attributes with the same Macro-Type are considered comparable, and their relationships are candidate rules to be learned.

**Table 2: Five Macro-Types in Our System**

| **Macro-Type** | **Data Types Defined in Linux Kernel 2.6.22** |
|----------------|----------------------------------------------|
| **Integer**    | long, int, unsigned int, unsigned long, size_t, pid_t, etc. |
| **Integer***   | int user*, time_t user*, old_sigset_t user*, etc. |
| **String***    | char user*, const char user*, etc. |
| **Struct***    | struct old_kernel_stat user*, struct tms user*, etc. |
| **Others**     | struct pt_regs, void user*, sighandler_t, etc. |

**Table 3: System Call Arguments and Return Values Before and After Data Type Consolidation**

| **syscall Number** | **syscall name** | **attr0 (Return Address)** | **attr1** | **attr2** | **attr3** | **attr4** | **attr5** |
|--------------------|------------------|----------------------------|-----------|-----------|-----------|-----------|-----------|
| **Before Consolidation** | | | | | | | |
| 168                | poll             | long                       | 003       | read      | size_t    | struct pollfd user* | unsigned int | unsigned int | long | null | null |
| 003                | read             | size_t                     | char*     | size_t    | null      | null      | null      |
| 078                | gettimeofday     | long                       | struct timeval user* | struct timezone user* | null | null | null |
| **After Consolidation** | | | | | | | |
| 168                | poll             | Integer                    | Struct*   | Integer   | Integer   | null      | null      |
| 003                | read             | Integer                    | String*   | Integer   | null      | null      | null      |
| 078                | gettimeofday     | Integer                    | Struct*   | Struct*   | null      | null      | null      |

### 3.3.2 Expressions, Operators, and Statements

A simple example of the relations we aim to learn could be: "The first attribute of one system call in a particular system call pattern equals the second attribute of another system call in another pattern." We refer to this simple relation as a statement. Within a statement, attributes are called expressions, and the relation (e.g., "equal") is an operator.

- **Expression (e):** Can be either an attribute (a) or a constant (c).
- **Statement (s):** Defines the relationship between two expressions using an operator (o). Simple operators include equal to, not equal to, greater than, less than, etc.
- **Function:** Takes an expression as input and outputs another expression. For example, a function can find a substring, which can help form a statement that two string expressions share the same prefix. Another important use of functions is to dereference a pointer, making it more meaningful to compare the data that the attributes point to rather than the attributes themselves.

**Grammar:**
- \( a ::= \text{attribute} \)
- \( c ::= \text{constant} \)
- \( e ::= a \mid c \)
- \( o ::= \text{equal} \mid \text{greater than} \mid \text{AND} \mid \text{GIVEN} \mid \text{etc.} \)
- \( s ::= e \, o \, e \mid s \, o \, s \)

### 3.3.3 Three Rule Sets

System call patterns provide context information to differentiate the same system call in different execution contexts. We classify statements into three different Rule Sets, each representing different types of relations among system calls.

- **Rule Set A:** Contains statements where attributes belong to system calls in the same pattern. These statements represent the relations among system calls within the same task.
- **Rule Set B:** Contains statements where attributes belong to system calls in repeated occurrences of a pattern. These statements capture the relations among system calls from repeated patterns.
- **Rule Set C:** Contains statements where attributes belong to system calls in different patterns. These statements govern the relations among system calls from different patterns.

**Examples:**
- **Rule Set A:**
  \[ P[i].S[j].A[k] = P[i].S[j'].A[k'] \]
  Where \( P[i] \) denotes a particular pattern, \( P[i].S[j] \) denotes the jth system call in pattern \( P[i] \), and \( P[i].S[j].A[k] \) denotes the kth attribute of \( P[i].S[j] \).

- **Rule Set B:**
  \[ P[i].S[j].A[k] = c2 \]
  \[ P[i].S[j].A[k] = c1 \, \text{GIVEN} \, \text{Occ}_{m-1} \, \text{Occ}_m \]
  Where \( \text{Occ}_m \, P[i].S[j].A[k] \) denotes the mth occurrence of \( P[i].S[j].A[k] \).

- **Rule Set C:**
  \[ P[i].S[j].A[k] \, \text{dist=} \, P[i'].S[j'].A[k'] \, (\text{dist} < \text{maxdist}) \]
  Where dist represents the number of patterns between \( P[i] \) and \( P[i'] \) in the system call sequence, and maxdist is a threshold denoting the maximum distance between the two patterns where the statement is valid.

### 3.3.4 Minimum Support and Confidence Level

To filter out unreliable statements, we define two thresholds: minimum support (minsup) and minimum confidence (minconf). The support of a statement is the number of times it is found valid in the training data, and the confidence is the (conditional) probability that the statement is found valid. These thresholds help in tuning the intrusion detection system to balance false positives and false negatives.

### 3.4 Online Monitoring

The learned relations can be used for online monitoring. The online monitor intercepts system calls in real-time, analyzes the system call along with its arguments and return value, and tests the arguments and return values against the rules in the three Rule Sets. An alarm is raised when the cumulative number of abnormal behaviors reaches a predefined threshold.

### 4. Evaluation

#### 4.1 Experimental Setup and Learned Relations

##### 4.1.1 Experimental Setup

Our system was implemented on a desktop computer with Linux kernel 2.6.22, hosting an Apache2 web server to simulate the web server of Singapore Management University. We modified the Linux kernel to intercept system calls made by the Apache2 web server to obtain real-time system call information. We replayed 3 days of logs containing 372,940 HTTP requests, extracting 89 system call patterns. We grouped the 111 data types into 5 Macro-Types as shown in Table 2.

##### 4.1.2 Number of Statements in Each Rule Set

**Figure 2: Number of Rules Learned in Each Rule Set for Different Settings of minsup and minconf**

- **X-axis:** minsup
- **Y-axis:** Number of rules
- **Different lines:** Different settings of minconf

This figure shows the number of rules learned in each Rule Set for various settings of minsup and minconf, providing insights into the optimal threshold settings.