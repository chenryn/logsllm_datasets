title:Context-sensitive auto-sanitization in web templating languages using
type qualifiers
author:Mike Samuel and
Prateek Saxena and
Dawn Song
Context-Sensitive Auto-Sanitization in Web Templating
Languages Using Type Qualiﬁers
Mike Samuel
Google Inc.
Mountain View, CA, USA
PI:EMAIL
Prateek Saxena
Computer Science Division
UC Berkeley
Berkeley, CA, USA
Dawn Song
Computer Science Division
UC Berkeley
Berkeley, CA, USA
PI:EMAIL
PI:EMAIL
ABSTRACT
Scripting vulnerabilities, such as cross-site scripting (XSS),
plague web applications today. Most research on defense
techniques has focused on securing existing legacy applica-
tions written in general-purpose languages, such as Java
and PHP. However, recent and emerging applications have
widely adopted web templating frameworks that have received
little attention in research. Web templating frameworks of-
fer an ideal opportunity to ensure safety against scripting
attacks by secure construction, but most of today’s frame-
works fall short of achieving this goal.
We propose a novel and principled type-qualiﬁer based mech-
anism that can be bolted onto existing web templating frame-
works. Our solution permits rich expressiveness in the tem-
plating language while achieving backwards compatibility, per-
formance and formal security through a context-sensitive auto-
sanitization (CSAS) engine. To demonstrate its practicality,
we implement our mechanism in Google Closure Templates,
a commercially used open-source templating framework that
is used in GMail, Google Docs and other applications. Our
approach is fast, precise and retroﬁts to existing commer-
cially deployed template code without requiring any changes
or annotations.
Categories and Subject Descriptors: D.4.6 Operat-
ing Systems: Security and Protection; D.1.2 Programming
Techniques: Automatic Programming
General Terms: Languages, Security
Keywords: Cross-site Scripting, Type Systems
1.
INTRODUCTION
Scripting vulnerabilities, such as cross-site scripting [36]
and cross-channel scripting [6], are pervasive in web applica-
tions [1, 7, 8, 10, 41], embedded systems [6, 17] and on smart-
phone platforms [9]. A central reason for this wide-spread
prevalence is the ad-hoc nature of output generation from
web applications today. Web applications emit code inter-
mixed with data in an unstructured way. Web application
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’11, October 17–21, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.
output is essentially text strings which can be emitted from
the server-side code (in Java or PHP) or from client-side
code in JavaScript. When a portion of the application out-
put controlled by the attacker is parsed by the browser as a
script, a scripting attack results.
The predominant ﬁrst-line of defense against scripting vul-
nerabilities is sanitization—the process of applying encoding
or ﬁltering primitives, called sanitization primitives or san-
itizers, to render dangerous constructs in untrusted inputs
inert [1, 38, 49, 50]. However, the practice of manually apply-
ing sanitizers is notoriously prone to errors [1, 27, 33, 41–43].
Web Templating Frameworks. To streamline the out-
put generation from application code, numerous web tem-
plating frameworks have recently emerged and are gain-
ing wide-spread adoption [11–14, 20, 25, 34, 40, 44, 45, 48, 53,
54]. Web templating frameworks allow developers to specify
their application’s output generation logic in code units or
modules called templates. Templates take untrusted inputs
which may be controlled by the attacker and emit web ap-
plication outputs, such as HTML or CSS code, as strings.
String outputs from templates are composed of static or
constant strings written by developers, which are explic-
itly trusted, and untrusted inputs which must be sanitized.
These templates can be compiled into a target language, such
as JavaScript or Java/PHP, as code functions that take un-
trusted data as template arguments and emit the applica-
tion’s output as strings. Templates are written in a diﬀer-
ent language, called a templating language, the semantics of
which are much simpler as compared to that of the target
language. Notably, complex constructs such as JavaScript’s
eval and document.write are not included in the templat-
ing language. Code external to templates is responsible for
invoking compiled templates to obtain the string outputs
and evaluating/rendering them in the browser.
Vision. Ideally, we would like to create web applications
that are secure by construction.
In fact, web templating
frameworks oﬀer an ideal opportunity to relieve the develop-
ers from the burden of manual sanitization by auto-sanitizing—
inserting sanitization primitives automatically during the
compilation of templates to server-side or client-side code.
Despite this ideal opportunity, research so far has not broached
the topic of building auto-sanitization defenses in today’s
commercial templating frameworks.
Challenges.
In this work, we ﬁrst identify the following
practical challenges in building reliable and usable auto-
sanitization in today’s web templating frameworks:
• Context-sensitivity. XSS sanitization primitives vary
587signiﬁcantly based on the context in which the data
sanitized is being rendered. For instance, applying the
default HTML escaping sanitizer is recommended for
untrusted values placed inside HTML tag content con-
text [38]; however, for URL attribute context (such as
src or href) this sanitizer is insuﬃcient because the
javascript URI protocol (possibly masked) can be
used to inject malicious code [21]. We say, therefore,
that each sanitization primitive matches a context in
which it provides safety. Many developers fail to con-
sistently apply the sanitizers matching the context, as
highlighted in a recent study performed on a large com-
mercial application well-audited for security [43].
• Complexity of language constructs. Templating lan-
guages today permit a variety of complex constructs:
support for string data-type operations, control ﬂow
constructs (if-else, loops) and calls to splice the
output of one template into another. Untrusted input
variables may, in such languages, be used in one con-
text along one execution path and a diﬀerent context
along another path. With such rich language features,
determining the context for each use of untrusted input
variables becomes a path-sensitive, global data-ﬂow
analysis task. Automatically applying correct saniti-
zation on all paths in templating code becomes chal-
lenging.
• Backwards compatibility with existing code. Developers
may have already applied sanitizers in existing tem-
plate code at arbitrary places; an auto-sanitization
mechanism should not undo existing sanitization un-
less it is unsafe. For practical adoption, auto-sanitization
techniques should only supplement missing sanitizers
or ﬁx incorrectly applied ones, without placing unnec-
essary restrictions on where to sanitize data.
• Performance Overhead. Auto-sanitized templates should
have a minimal performance overhead. Previous tech-
niques propose parsing template outputs with a high-
ﬁdelity HTML parser at runtime to determine the con-
text [5]. However, the overhead of this mechanism may
be high and undesirable for many practical applica-
tions.
Context-sensitive Auto-sanitization Problem. We ob-
serve that a set of contexts in which applications commonly
embed untrusted data is known [50]. And, we assume that
for each such context, a matching sanitizer is externally pro-
vided. Extensive recent eﬀort has focused on developing a
library of safe or correctly-implemented sanitization primi-
tives [22, 23, 29, 30, 38, 41]. We propose to develop an auto-
matic system that, given a template and a library of sani-
tizers, automatically sanitizes each untrusted input with a
sanitizer that matches the context in which it is rendered.
By auto-sanitizing templates in this context-sensitive way,
in addition to enforcing the security properties we outline
in Section 2.2, templating systems can ensure that scripting
attacks never result from using template outputs in intended
contexts.
Our Approach & Contributions. In this paper, we ad-
dress the outlined challenges with a principled approach:
• Type Qualiﬁer Based Approach. We propose a type-
based approach to automatically ensure context sen-
sitive sanitization in templates. We introduce context
type qualiﬁers, a kind of type qualiﬁer that represents
the context in which untrusted data can be safely em-
bedded. Based on these qualiﬁers, which reﬁne the
base type system of the templating language, we de-
ﬁne a new type system. Type safety in our type sys-
tem guarantees that well-typed templates have all un-
trusted inputs context-sensitively sanitized.
• Type Inference during Compilation. To transform ex-
isting developer-written templates into well-typed tem-
plates, we develop a Context-Sensitive Auto-Sanitiza-
tion (CSAS) engine which runs during the compila-
tion stage of a web templating framework. The CSAS
engine performs two high-level operations. First, it
performs a static type inference to infer context type
qualiﬁers for all variables in templates. Second, based
on the inferred context types, the CSAS engine auto-
matically inserts sanitization routines into the gener-
ated server-side or client-side code. To the best of
our knowledge, our approach is the ﬁrst principled
approach using type qualiﬁers and type inference for
context-sensitive auto-sanitization in templates.
• Real-world Deployability. To show that our design is
practical, we implement our type system in Google
Closure Templates, a commercially used open-source
templating framework that is used in large applica-
tions such as GMail and Google Docs. Our imple-
mentation shows that our approach requires less than
4000 lines of code to be built into an existing commer-
cial web framework. Further, we show that retroﬁtting
our type system to existing templates used in commer-
cial applications requires no changes or annotations to
existing code.
• Improved Security. Our approach eliminates the criti-
cal drawbacks of existing approaches to auto-sanitiza-
tion in today’s templating frameworks. Though all
the major web frameworks today support customiz-
able sanitization primitives, a majority of them today
do not automatically apply them in templates, leaving
this error-prone exercise to developers. Most others
automatically sanitize all untrusted variables with the
same sanitizer in a context-insensitive manner, a fun-
damentally unsafe design that provides a false sense of
security [50]. Google AutoEscape, the only context-
sensitive abstraction we are aware of, does not handle
the richness of language features we address. We refer
readers to Section 7 for a detailed comparison.
• Fast, Precise and Mostly Static Approach. We eval-
uate our type inference system on 1035 existing real-
world Closure templates. Our approach oﬀers practi-
cal performance overhead of 3 − 9.6% on CPU inten-
sive benchmarks. In contrast, the alternative runtime
parsing approach incurs 78% - 510% overhead on the
same benchmarks. Our approach performs all parsing
and context type inference statically and so achieves
signiﬁcantly better performance. Our approach does
not sacriﬁce any precision in context-determination as
compared to the runtime parsing approach— it defers
context-sensitive sanitization to runtime for a small
fraction of output operations in which pure static typ-
ing is too imprecise. Hence, our type system is mostly
static, yet precise.
2. PROBLEM DEFINITION
The task of auto-sanitization is challenging because state-
588Base Types
Commands
Expressions
α ::= β | η | β1 → β2 → . . . βk → unit
β ::= bool | int | string | unit
S ::= print (e : β)
e ::= (e1 : int) ⊕ (e2 : int)
| (v : β) := (e : β)
| callTemplate f (e1, . . . ,ek)
| c1 ; S1
| if (e : bool) then S1 else S2 ﬁ
| while(e : bool) S1
| return;
| (e1 : bool) (cid:12) (e2 : bool)
| (e1 : string) · (e2 : string)
| const (i : β)
| v : β
| San (f, e : β)
v ::= Identif ier
Figure 1: The syntax of a simple templating language. ⊕ rep-
resents the standard integer and bitvector arithmetic operators,
(cid:12) represents the standard boolean operations and · is string con-
catenation. The San expression syntactically refers to applying
a sanitizer.
of-the-art templating frameworks don’t restrict templates
to be straight-line code.
In fact, most templating frame-
works today permit control-ﬂow constructs and string data
operations to allow application logic to conditionally alter
the template output at runtime. To illustrate the issues,
we describe a simple templating language that captures the
essence of the output-generating logic of web applications.
We motivate our approach by showing the various challenges
that arise in a running example written in our templating
language.
2.1 A Simple Templating Language
Our simple templating language is expressive enough to
model Google Closure Templates and several other frame-
works. We use this templating language to formalize and de-
scribe our type-based approach in later sections. It is worth
noting that the simple templating language we present here
is only an illustrative example—our type-based approach is
more general and can be applied to other templating lan-
guages as well.
The syntax for the language is presented in Figure 1. The
templating language has two kinds of data types in its base
type system: the primitive (string, bool, int) types and
a special type (denoted as η) for output buﬀers, which are
objects to which templates write their outputs. Figure 2(A)
shows a running example in our templating language. For
simplicity, we assume in our language that there is only a
single, global output buﬀer to which all templates append
their output, similar to the default model in PHP.
Command Semantics. The primary command in the lan-
guage is the print command which appends the value of its
only operand as a string to the output buﬀer. The running
example has several print commands. Note that the syntax
ensures that the output buﬀer (η-typed object) can not be
reassigned, or tampered with in the rest of the command
syntax.
Templates are akin to functions: they can call or invoke
other templates via the callTemplate command. This com-
mand allows a template to invoke another template during
its execution, thereby splicing the callee’s outputs into its
own. Parameter passing follows standard pass-by-value se-
mantics.
Figure 2: (A) shows a template used as running example. (B)
shows the output buﬀer after the running example has executed
the path including the true branch of the if statement.
The templating language allows control-ﬂow commands
such as for and if-then-else to allow dynamic construc-
tion of template outputs.
It supports the usual boolean