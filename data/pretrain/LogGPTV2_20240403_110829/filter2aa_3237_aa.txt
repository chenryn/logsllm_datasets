# Stagefright: Scary Code in the Heart of Android

## Researching Android Multimedia Framework Security

### Presenter
**Joshua "jduck" Drake**
- **Date:** August 7, 2015
- **Event:** DEF CON 23

### Agenda
1. Introduction
2. System Architecture
3. Attack Surface
4. Attack Vectors
5. Vulnerability Discovery / Issues Found
6. Exploitability / Mitigations
7. Disclosure
8. Conclusions

## Introduction
### About the Presenter and This Research
- **Presenter:** Joshua J. Drake (aka jduck)
- **Focus:** Vulnerability research and exploit development for over 16 years.
- **Current Affiliations:**
  - Zimperium's VP of Platform Research and Exploitation
  - Lead Author of *Android Hacker's Handbook*
  - Founder of the #droidsec research group
- **Previous Affiliations:**
  - Accuvant Labs (now Optiv)
  - Rapid7's Metasploit
  - VeriSign's iDefense Labs

### Motivations
1. Improve the overall state of mobile security.
2. Discover and eliminate critical vulnerabilities.
3. Spur improvements in mobile software updates.
4. Increase visibility of risky code in Android.
5. Utilize the Droid Army for good.

### Special Thanks
- **Amir Etemadieh** of Optiv/Exploiteers for his assistance.
- Additional thanks to Collin Mulliner and Mathew Solnik.

### Sponsors
- This work was sponsored by Accuvant Labs (now Optiv) with continuing support from Zimperium.

## What is Stagefright?
- **Definition:** Android's multimedia framework library, primarily written in C++.
- **Functionality:**
  - Handles all video and audio files.
  - Provides playback facilities (e.g., {Nu, Awesome}Player).
  - Extracts metadata for the Gallery, etc.

### Brief History
- **Initial Engine:** OpenCORE
- **AOSP Integration:** Added during Android Eclair (2.0) development.
- **Usage:**
  - Optionally used in Android Froyo (2.2).
  - Set as the default engine in Gingerbread (2.3) and later.
  - Also used in Firefox, Firefox OS, Mac OS X, Windows, and Android.
  - Not used on Linux (uses gstreamer).

### Why Stagefright?
1. Exposed via multiple attack vectors, some requiring no user interaction.
2. Binary file format parsers are often vulnerable, especially those in native code.
3. Public mentions of instability (crashes) on platforms like /r/Android and AOSP bug tracker.
4. Related publications about fuzzing the code.

## Related Work
### I. Fuzzing the Media Framework in Android
- **Authors:** Alexandru Blanda and team from Intel
- **Tools Released:** See [link]
- **Results:**
  - Numerous issues reported.
  - 7 accepted as security issues.
  - 3 fixed in AOSP (CVE-2014-7915, CVE-2014-7916, CVE-2014-7917).

### II. On Designing an Efficient Distributed Black-Box Fuzzing System for Mobile Devices
- **Authors:** Wang Hao Lee, Murali Srirangam Ramanujam, and S.P.T. Krishnan from Singapore's Institute for Infocomm Research
- **Focus:** Tooling more than bugs.
- **Findings:**
  - Several bugs found, but analysis seems lacking/incorrect.
  - Unclear if any issues were fixed.

### III. Pulling a John Connor: Defeating Android
- **Author:** Charlie Miller at Shmoocon 2009
- **Focus:** Fuzzing a media player, focused on opencore, not Stagefright.
- **Relevance:** Despite being old, it remains relevant due to the lack of proactive Android security research.

## About This Research
- **Scope:** Focused on MPEG4 format for thoroughness.
- **Specificity:** The presentation will focus on Stagefright's MPEG4 processing.

## System Architecture
### Processes, Privileges, etc.
- **Android Architecture:**
  - Modular with separate processes.
  - Extensive inter-process communications.
  - "Sandbox" relies on a modified scheme based on Linux users and groups.
  - **libstagefright** executes inside the "MEDIA SERVER" process.

### Process Architecture
- **mediaserver:**
  - Runs in the background.
  - Native service started at boot from `/init.rc`.
  - Automatically restarts when it crashes.

### Process Privileges (Nexus 5)
- **Service Definition in `/init.rc`:**
  - `user media`
  - `group audio camera inet net_bt net_bt_admin net_bw_acct drmrpc mediadrm`
- **Privilege Survey:**
  - 51 devices surveyed.
  - Breakdown by OEM: Nexus/Google, Motorola, Samsung, HTC, LG, Sony, Amazon, ASUS, Facebook, OnePlus/Cyanogen, SilentCircle/SGP.
  - Accessible groups include `inet`, `net_bt`, `audio`, `camera`, and more.
  - These privileges allow monitoring, recording, and playing back audio, accessing camera devices, connecting to hosts on the Internet, and configuring Bluetooth.

### Architecture Recap
1. **libstagefright** processes media inside `mediaserver`.
2. The service runs with elevated privileges, potentially even as "system".
3. `mediaserver` automatically restarts.
4. The additional attack surface exposed to a compromised `mediaserver` is large, even compared to ADB.

## Attack Surface
### Locating the Attack Surface
- **Methodology:**
  1. Attach a debugger to the `mediaserver` process.
  2. Place a breakpoint on `open`.
  3. Open an MPEG4 video file.
  4. Sift through breakpoint hits until `r0` points at your file.
  5. Look at the backtrace.
  6. Dig into and read the surrounding code.

### Primary Attack Surface
- **MPEG4Extractor::parseChunk:**
  - Primary dispatch for handling MP4 atoms/FourCC values.
  - Implemented using recursion.
  - Between 80 and 140 FourCC values, depending on the Android version.

## Attack Vectors
### Vector I: HTML5 Video Tag
- **Description:** New in HTML5, allows embedding video content.
- **Behavior:** Works without user interaction.

### Vector II: Browser Auto-download
- **Description:** Servers can force downloads without user prompting.
- **Behavior:** Downloads happen in the background, no option to prompt the user.
- **Feature Request:** Option to prompt the user before auto-downloading.

### Enter the Media Scanner
- **Functionality:** Extracts metadata for the Gallery.
- **Invocation:**
  - Directly via `MediaScannerConnection`.
  - Through `MEDIA_{MOUNTED,SCANNER_SCAN_FILE}` Intents.
  - Classes implementing `MediaScannerConnectionClient`.

### Tons of Attack Vectors
- **Summary:** Any way your device touches media:
  - Mobile Network (MMS)
  - Client Side (Browser, Downloads, Email)
  - Physically Adjacent (NFC, Bluetooth, VCards)
  - Physical (SD Cards, USB OTG Drives, USB MTP/PTP)
  - Misc (Gallery)
- **Total Attack Vectors:** 11+

### The Scariest Part - MMS
- **Behavior:** Media is automatically processed upon MMS receipt, before creating a notification.
- **Risk:** Allows silent, remote, privileged code execution.
- **Mitigation:** Turn off auto-retrieve in messaging apps.

### Triggers Virally
- **Behavior:** Invoked whenever a thumbnail is rendered or metadata is needed.
- **Examples:**
  - Rotating the screen.
  - Starting the Messaging app (conversation list).
  - Viewing the Gallery.
  - Sharing malicious media.

### Other Vectors
- **Considerations:**
  - Downstream modifications (OEM/Carrier).
  - Third-party apps.
  - Untested ideas: Instant messaging, social networks, QR codes.
- **Call to Action:** Reach out with ideas or discoveries of additional vectors.

## Vulnerability Discovery
### Discovery Methodology
- **Basic Methodology:**
  1. Write a fuzzer (basic dumb fuzzer in this case).
  2. Run the fuzzer.
  3. Read code while the fuzzer runs.
  4. Analyze surrounding code when the fuzzer finds crashes.
  5. Repeat until comprehensive.

### First Round Specifics
- **Focus:** MP4 video.
- **Reasons:**
  - Complicated enough.
  - Most lines of code.
  - Same code handles other formats (3GP, M4A).
- **Corpus:**
  - Started with the smallest file possible.
  - @Zenofex created `meow.3gp` (25KB).

### First Round Results
- **Fuzzer Run:** ~1 week on live Android devices.
- **Crashes:** ~6200 total, ~20 unique bugs.
- **Code Review:** Found ~5 memory corruptions nearby.
- **CVEs:** CVE-2015-1538 and CVE-2015-1539.

This structured and detailed approach ensures that the presentation is clear, coherent, and professional.