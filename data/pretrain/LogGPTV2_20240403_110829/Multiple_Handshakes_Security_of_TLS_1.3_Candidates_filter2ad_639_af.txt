draft−10,A
draft−10,A
(cid:3)
3AdvColl
+ ns.(AdvDDH
Sig
+ 2AdvPRF−sec
(cid:4)
,
HKDF.Expand)
+ 2AdvPRF−sec
G
HKDF.Extract
Where ns is the maximum number of sessions and nu is
the maximum number of users.
Lemma 2. If a multiple handshakes protocol Π is Multi-
(cid:2) combining Π
Level&Stage-secure,
then the protocol Π
with a session label(cid:2)
is Match-secure, where the session
label(cid:2) can support all possible primary handshake modes of
3[19] proved that the draft-05 full handshake is Multi-Stage-secure, which
can imply the Match security according the model deﬁnition, and we can
conclude this property for the full handshake in draft-10 since they own the
similar structures, with some minor changes such as key derivation function
from PRF to HKDF, and the keys during computation will be replaced as in
Figure 1.
496496
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:40 UTC from IEEE Xplore.  Restrictions apply. 
TLS 1.3 draft-10.
Proof. We need to show the nine properties of Match Security,
and for the ﬁrst seven ones (the case of same mode and same
level), we only need to show that the session label(cid:2) satisﬁes
the properties since Π is already Multi-Level&Stage-secure.
1. Sessions with the same session identiﬁer for some stage
hold the same session key.
Note that for stage i, if two parties share the identical
session identiﬁer namely sidi for some mode, and note
that the sidi contains the full sidj for all j < i, implying
that the parties share the identical session identiﬁers sidj,
then they both use the same input to the key derivation
functions such as HKDF.Extract and HKDF.Expand, and
hence derive the same session keys in the i-th stage.
2. sessions with the different session identiﬁers for some stage
hold the different session keys.
Note that
in TLS 1.3 draft-10, all protocols include a
hash of all messages exchanged so far in the derivation
of all session keys, thus we can conclude that sessions
with different session identiﬁers have different session keys
based on the collision-resistant property of the secure hash
function.
3. Sessions with the same session identiﬁer for some stage
agree on the authentication mode of the stage.
Note that, sessions with the same session identiﬁer for
stage i implies the same session identiﬁer for stage j such
that j < i, and the exchanged messages except for the
ﬁnished messages contained in sidi uniquely determines
the authenticity property for this stage and the previous
stages. For example in mode M1, obviously auth1 =
unauth. If sid2 additionally contains the ServerCertiﬁcate
and ServerCertiﬁcateVerify messages, they will agree on
auth2 = unilateral. If sid2 moreover contains Certiﬁ-
cateRequest, ClientCertiﬁcate, and ClientCertiﬁcateV-
erify, they will agree on auth2 = mutual.
4. Sessions with the same session identiﬁer for some stage
share the same contributive identiﬁer.
This holds since the contributive identiﬁer cid is ﬁnal once
the session identiﬁer is set.
5. Sessions are partnered with the intended (authenticated)
participant and share the same key index.
First of all note that this case only applies to unilaterally
or mutually authenticated stages only. In TLS, the client
obtains the server’s identity within the ServerCertiﬁcate
or ServerCertiﬁcate−1 (for 0-RTT case) message and the
server obtains the client’s identity (in case of mutual au-
thentication) within the ClientCertiﬁcate message. More-
over, honest clients and servers will not send a certiﬁcate
(cid:3)
attesting an identity different from their own.
For the PSK/resumption
, honest sessions are
assured of the peer’s identity and the key index via the
pre-shared key identiﬁer psidU,V,k, which is included in the
session identiﬁer for all stages. Specially, in the ClientHello
extension, PreSharedExtension identifying the PSK may
-(EC)DHE
(cid:4)
be included. In other words, since each party knows the
unique mapping between pre-shared key identiﬁers and key
indices, a party can determine the peer’s identity from the
psidU,V,k and the mapping.
Thus, agreement on sid implies agreement on the partner’s
identity and the key index used.
6. Session identiﬁers do not match across different stages.
This holds trivially as session identiﬁers monotonically
grow with each stage.
7. At most two sessions have the same session identiﬁer at
any stage.
Note that for each mode, a random nonce of both the
initiator and the responder enters the session identiﬁers.
Therefore, in order to have a threefold collision among
session identiﬁers of honest parties, the third session would
need to pick the same nonce as one of the other two
sessions. The probability that there exists such a collision
−|nonce| where
can hence be bounded from above by n2
|nonce| is the nonce length.
For modes that use Difﬁe-Hellman key, the group element
for that key also enters the session identiﬁers. Similarly,
the probability that there exists a third session picking the
same group element as one of the other two sessions can
hence be bounded by n2
s.1/q where q denotes the group
order.
s.2
8. Session identiﬁers do not match across different modes.
Note that, the exchanged message included in sid1, u-
niquely identiﬁes the handshake mode Mi, for example the
EarlyDataIndication included in sid1 identiﬁes the mode
M2, and sid1 is included in the session identiﬁers of the
later stages. Therefore, we can assert that any sessions with
different modes cannot share the same identiﬁers.
9. Session identiﬁers do not match across different levels.
Since Π is Multi-Level&Stage-secure which implies
Match-secure, we only need to prove that session label(cid:2)
and any session label included in Π such that label(cid:2).lev
(cid:9)= label.lev, cannot share the same session identiﬁers.
Let us assume that label(cid:2).mode = label.mode, as the
case of across different modes has been proved in the
eighth property. Note that, label(cid:2).lev (cid:9)= label.lev, which
implies that label.prelid (cid:9)= label(cid:2).prelid. Moreover, the key
materials in label and label(cid:2) are derived from label.prelid
and label(cid:2).prelid respectively. Hence, session identiﬁers
cannot match between label and label(cid:2).
Lemma 3. If a multiple handshakes protocol Π is Multi-
(cid:2) combining Π with
Level&Stage-secure, then the protocol Π
a session label(cid:2) such that label(cid:2).mode = M2 is secure against
Key Secrecy. Formally, for any efﬁcient adversary A, the Key
Secrecy can be broken with advantage AdvKey−Secrecy,D
such
that
Π(cid:2),A
AdvKey−Secrecy,D
Π(cid:2),A
≤ AdvKey−Secrecy,D
4AdvColl
(cid:3)
Π,A
+ 5ns.
+ ns.(3AdvGap−DH
G
H + 4nu.AdvEUF−CMA
+ 5AdvPRF−sec
+ 2AdvPRF−sec
(cid:4)
,
HKDF.Expand)
HKDF.Extract
Sig
Where ns is the maximum number of sessions and nu is
497497
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:40 UTC from IEEE Xplore.  Restrictions apply. 
the maximum number of users.
Proof Sketch. We only sketch the main steps of the proof
here due to space restrictions, and the complete proof of this
lemma can be found in Appendix A.
First, we describe a dependence relation between Π and the
new added label label(cid:2). During the session label included in Π,
where label(cid:2).prelid = label.lid, the client obtained the server’s
ServerConﬁguration containing gs associated with an unique
Conﬁguration id, together with the server’s ServerCertiﬁ-
cate and ServerCertiﬁcateVerify message for authentication.
Then the client can use the gs and Conﬁguration id to
interact with the server in 0-RTT labeled by label(cid:2). Note that
since Π is Multi-Level&Stage-secure, s can only be known
to the authenticated server, unless the adversary would make a
Corrupt query. Thus, we can now focus on the Key Secrecy
of label(cid:2).
Our subsequent security analysis separately considers two
cases:
1. s is never compromised. We consider the three (disjoint)
cases: the adversary tests a server session without honest
contributive partner in the ﬁrst stage; the adversary tests a
client session without honest contributive partner in the sec-
ond stage; and the tested session has an honest contributive
partner in the second stage. The common game-hopping
techniques are adopted in the proof of all three cases to
bound the adversary’s success probability.
2. s is compromised after handshake. Even though Eadk
in the ﬁrst stage is known to the adversary due to the
compromised s, Key Secrecy of label(cid:2) can still be sat-
isﬁed. Specially, tkhs in the second stage is secure since it
never depends on s; tkapp, RMS and EMS are all secure
since they depend on both mSS and mES, where mSS is
compromised since the compromise of s, however, mES is
still unknown to the adversary. Also, we use the common
game-hopping techniques.
Also, we discuss the privacy property of the early applica-
tion data transmitted on the ﬁrst ﬂight and show this property
can be guaranteed in the security model.
Finally, the Key Secrecy of the protocol Π
(cid:2) follows.
Lemma 4. If a multiple handshakes protocol Π is Multi-
(cid:2) combining Π with
Level&Stage-secure, then the protocol Π
a session label(cid:2) such that label(cid:2).mode = M3 is secure against
Key Secrecy. Formally, for any efﬁcient adversary A, the Key
Secrecy can be broken with advantage AdvKey−Secrecy,D
such
that
(cid:4)
Π,A
AdvColl
HKDF.Extract + 2AdvPRF−sec
HKDF.Expand)
,
Where ns is the maximum number of sessions and nu is
≤ AdvKey−Secrecy,D
+ ns.(3AdvPRF−sec
AdvKey−Secrecy,D
Π(cid:2),A
(cid:3)
+ 4ns.
Π(cid:2),A
H
the maximum number of users.
Proof. Since Π is Multi-Level&Stage-secure, we just need
to show the key secrecy of the added session label(cid:2). Before
giving the detailed proof we need to show the relation between
498498
label(cid:2) and label, where the session label is included in Π,
and label(cid:2).prelid = label.lid. In TLS 1.3 draft 10, the original
session resumption provided by “session resumption” and
“session tickets” in TLS 1.2 has been replaced with a new
mechanism called PSK mode, where once a handshake has
completed, the server can send the client a PSK identity which
corresponds to a key derived during this handshake. Then the
client can use that PSK identity in future PSK/resumption
to negotiate use of the PSK mode. During PSK/resumption
label(cid:2), both the static secret SS and the ephemeral secret
ES are equal to the pre-shared resumption master secret(Pre-
RMS) derived from label and there may be several sessions
share the same Pre-RMS for PSK/based resumption. Thus we
can conﬁdently replace the pre-shared resumption master key
Pre-RMS with a uniformly selected (cid:2)Pre − RMS which will
only be shared between the two honest parties in label(cid:2) based
on the Key Security of label, and now we can focus on the
security of label(cid:2) with (cid:2)Pre − RMS indexed by psidU,V,k as
follows.
(The result for label(cid:2)): PSK/resumption is secure against
Key Secrecy in a key-independent manner with concurrent
authentication properties AUTH = (mutual, mutual, mutual,
mutual).
To prove this result, note that, [19] shows the Multi-stage
security of TLS 1.3 draft-05 session resumption handshake,
here we will explain that their result also adapts to the TLS
1.3 draft-10 PSK/resumption handshake. In each draft when
resumption, either sid or PreSharedKeyExtension will be
contained in both the ClientHello and ServerHello extension-
s.
Compared with TLS 1.3 draft-05, the resumption mode in
TLS 1.3 draft-10 makes the following minor changes:
1. The sid message included in ServerHello message for
the resumption in later connection is replaced with the
NewSessionTicket
transmitted under the protection of