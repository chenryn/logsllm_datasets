设想在Victim公司的网站上有修改密码的功能，用户必须输入旧密码并进行确认才能设置
新密码。实现该功能的查询语句可能与下面的UPDATE语句类似：
UPDATE users
.paonssed neu, = pxonssed L3S
WHERE username = *Bob* and passvord = 'old_password*
如果Bob发现了一个可以影响password字段（旧密码）的SQL注入，并且注入了'OR“1=1，
那么该UPDATE语句为：
UPDATE users
.paonssed nau, = pzonssed L3S
T,=,t, do ,pxonssed pto, - pxonssed pue ,qog, - oueuzosn sa3H
读者可以料想到该SQL注入攻击的后果吗？当然，你猜对了，该攻击将把users表中所有
密码都更新为new_password，因此所有用户都将无法登录该应用程序。
为了尽量精简推断SQL注入的过程，攻击者应构想并理解在服务器端运行的代码以及注
入测试可能带有的潜在效果，这一点非常重要。
与之类似，在DELETE查询中注入OR1=1可以轻而易举地删除该表的所有内容。因此
当测试该类型的查询时，开发人员必须非常小心。
49
---
## Page 64
SQL注入攻击与防御（第2版）
2.数字值内联注入
上面介绍了一个使用字符串内联注入绕过身份验证机制的例子。接下来介绍另一个例子
对数字值执行类似的攻击。
用户可以登录到Victim公司的站点并访问自己的资料，还可以检查其他用户发给自己的消
息（message)。每个用户都拥有唯一的标识符或uid，该标识符或uid用于唯一确定系统中的每
个用户。
负责显示发送给用户的消息的URL拥有下列格式：
http://www.victim.com/messages/list,aspx?uid=45
发送一个单引号以测试uid参数，将得到下列错误：
http: / /www,victim,com/messages/list,aspx?uid=*
Server Error in */' Application.
Unclosed quotation mark before the character string ' ORDER BY received;'.
为获取更多有关查询的信息，可以发送下列请求：
http://www,victim,com/messages/list,aspx?uid=0 having 1=1
服务器响应如下：
Server Error in '/' Application
not contained in an aggregate function and there is no GRouP BY
clause.
根据检索到的信息，可以断定运行在服务器上的SQL代码如下所示：
SELECT *
FROM messages
ORDER BY received;
图2-12展示了注入点、创建的SQL语句和易受攻击的参数。
DlEdt yer Hgey
Bot
Your Messages
图2-12数字值注入示意图
50
---
## Page 65
第2章SQL注入测试
请注意，注入数字时不需要添加开始和结尾的单引号定界符。前面曾经介绍过，数据库处
理数值类型的值时，数值不带引号。本例中我们可以直接对URL中的uid参数进行注入。
这里我们拥有对数据库返回消息的控制权。应用程序没有对uid参数进行任何审查，因而
我们可以干预从message表选择的行。对于这种情况，我们采用的方法是增加一个永真（or1-I)
条件，这样就不会只返回某个用户的消息，而是返回所有用户的消息。URL如下：
http://www,victin,com/messages/list.aspx?uid=45 or 1=1
该请求将返回所有用户的消息，如图2-13所示。
金
Your Messages
8
图2-13利用数字值注入
注入结果将产生下列SQL语句：
SELECT *
FROM messages
WHEREuid=45or1=1/*水真条件*/
ORDER BY received;
由于注入了永真条件（or1=I），因而数据库将返回message表中所有的行，而不仅仅是那
些发送给某个用户的行。第4章将介绍如何进一步利用该漏洞来读取数据库表中的任意数据，
甚至是其他数据库中的数据。
表2-2给出了测试数字值时使用的特征值集合。
表2-2数字值内联注入的特征值
变
种
预期结果
触发错误。如果成功，数据库将返回一个错误
1+1
3-1
如果成功，将返回与操作结果相同的值
value + 0
如果成功，将返回与原来请求相同的值
1 or 1=1
1)or (1=1
永真条件。如果成功，将返回表中所有的行
value or 12
value) or (12
空条件。如果成功，将返回与原来的值相同的结果
1 and 1=2
1) and (12
永假条件。如果成功，将不返回表中任何行
1) or (ab’=s’+
SQL Server字符申连接。如果成功，将返回与永真
A+,E,=,qR, 10 [
条件相同的信息
51
---
## Page 66
SQL注入攻击与防御（第2版）
（续表）
测试字符串
变
预期结果
MySQL字符串连接。如果成功，将返回与永真条
1 or ’ab’=s' b’
1) or (al=a' 
件相同的信息
1 or ’ab’=s I 'b’
1) or (ab'=a' I 
Oracle字符串连接。如果成功，将返回与水真条件
相同的信息
从表2-2中不难发现，所有注入字符申都遵循相似的原则。确认是否存在SQL注入漏洞，
主要是理解服务器端正在执行什么SQL代码，然后针对每种情况注入相应的条件。
2.3.3终止式SQL注入
可以通过多种技术来确认是否存在SQL注入漏洞。上一节介绍了内联注入技术，本节介绍
如何通过终止式注入攻击创建一条有效的SQL语句，终止式SQL注入是指攻击者在注入SQL代
码时，通过将原查询语句的剩余部分注释掉，从面成功结束原来的查询语句。图2-14展示了
终止式SQL注入的示意图。
从图2-14中不难发现，注入的代码终止了原来的SQL语句。除终止该语句外，还需要注
释掉剩下的查询以使其不会被执行。
注入
原求的 SQL 资
注入后的SQL通句
图2-14终止式SQL注入
1.数据库注释语法
从图2-14可以看出，我们需要通过一些方法来阻止SQL语句结尾那部分代码的执行，接
下来要借助的元素是数据库注释，SQL代码中的注释与其他编程语言中的注释类似，可通过注
释向代码中插入一些信息，解释器在解释代码时将忽略这些信息。表2-3给出了向MicrosofSQL
Server、Oracle、MySQL和PostgreSQL数据库添加注释的语法。
表2-3数据库注释
数据库
注
释
描
述
SQL Server、 Oracle 和 PostgreSQL
（双连字符）
用于单行注释
/*
用于多行注释
-（双连字符）
用于单行注释。要求第二个连字符后面跟一个
空格或控制字符（如制表符、换行符等）
MySQL
#
用于单行注释
/
*/
用于多行注释
52
---
## Page 67
第2章SQL注入测试
提示：
防御技术包括从最开始位置检测、清除用户输入中的所有空格或者截短用户输入的值，可
以使用多行注释绕过这些限制，假设正在使用下列攻击注入一个应用：
http:/ /wvv, victim.com/messages/1ist aspx?uid=45 or 1=1
不过，由于应用清除了空格，SQL语句变为：
SELECT *
se5ess9u nos.
WHERE uid=45or1=1
这不会返回我们想要的结来，可以添加不带内容的多行注释来避免使用空格：
http:/ /wwv, victim.com/messages/1ist.aspx?uid=45/**/or/** /1=1
新查询不会在用户输入中包含空格，但是仍然有效，它返回message表中所有的行。
接下来的技术使用SQL注释来确认是否存在漏洞。请看下列请求：
http:/ /www,victim.com/messages/1ist.aspx?uid=45/*he11o yes*/
如果应用程序易受攻击，它将发送后面带有注释的uid值。如果处理该请求时未出现问题，
那么将得到与uid-45相同的结果，即数据库忽略了注释内容。这可能是因为存在SQL注入
漏洞。
2.使用注释
我们看一下如何使用注释来终止SQL语句。
接下来使用Victim公司的Web站点的管理员身份验证机制。图2-15展示了终止式SQL
语句的概念。
Ble[deyewHgtoryBookmartsJoolselp
p
phr
Administration
Usemi
 pwo.wsstd
_SendJ
图2-15利用终止式SQL语句
53
---
## Page 68
SQL注入攻击与防御（第2版）
这里将利用该漏洞来终止SQL语句。我们只向usermame字段注入代码并终止该语句。注
入“'orI=l;--”代码，这将创建下列语句：
SELECT *
FROM administrators
., - p1onssed aNY . --fI-T 1o .. = weuzosn 3aHM
由于存在1=1永真条件，该语句将返回 administrators 表中所有的行。进一步讲，它忽略
了注释后面的查询条件，我们不需要担心ANDpassword="。
还可以通过注入“adminr-”来冒充已知用户。该操作将创建下列语句：
SELECT *
FROM administrators
., /+, = pxonssed any .+/,uTwpe, = eweuxesn 3aHM
该语句将成功绕过身份验证机制并且只返回包含admin用户的行。
有时您会发现在某些场合无法使用双连字符（），可能是因为应用对它进行了过滤，也可
能是因为在注释剩下的查询时产生了错误。在这种情况下，可以使用多行注释（/**/）来替换SQL
语句中原来的注释。该技术要求存在多个易受攻击的参数，而且您要了解这些参数在SQL语
句中的位置。
图2-16展示了一个使用多行注释进行SQL注入攻击的示例。请注意，为清晰起见，这里
以明文方式显示了Password文本框中的文本，从而展示这种使用多行注释的攻击。
Adminictreaon-ViaInc-MozilFFrefo
ex.php
Administration
ord r'
fand
图2-16使用多行注释的攻击
该攻击使用usermame字段选择想要的用户，使用/*序列作为注释的开始，在password字
段中结束了注释（*/）并向语句末尾添加了一个单引号。该语句语法正确且不会对结果产生影响。
最终的SQL语句如下：
SELECT *
FROM administrators
f/+, = pzonssed aNV ,*/,urwpe, = eueuzasn 383Ex