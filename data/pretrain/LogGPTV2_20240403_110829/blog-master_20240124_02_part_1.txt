## 开源PolarDB|PostgreSQL 应用开发者&DBA 公开课 - 5.1 PolarDB开源版本必学特性 - PolarDB 架构解读
### 作者
digoal
### 日期
2024-01-24
### 标签
PostgreSQL, PolarDB, 应用开发者, DBA, 公开课

---

## 背景
在讲解PolarDB架构之前，我们先简要回顾一下PostgreSQL的架构。这将帮助我们更好地理解为什么需要开发PolarDB for PostgreSQL这一云原生分布式数据库。

## PolarDB 架构解读
PolarDB for PostgreSQL是基于PostgreSQL开源版本的云原生分布式数据库。下面我们将详细探讨其架构及其优势。

### 1. PostgreSQL开源版本面临的问题
随着用户业务数据量的增长和复杂性的增加，传统数据库系统面临诸多挑战：
- **存储限制**：单机存储空间有限。
- **成本问题**：通过只读实例进行读扩展时，每个只读实例独享一份存储，增加了成本。
- **性能瓶颈**：创建只读实例需从主库拷贝所有数据，导致创建时间随数据量增加而延长。
- **延迟问题**：高业务压力下产生的WAL日志较多，备库apply WAL的延迟较高，影响读写分离的业务稳定性。
- **分析需求**：面对大量数据分析需求（如生成日报、月报等），或处理复杂的SQL请求及大表索引创建时，无法高效响应，需要引入数据仓库，从而增加业务复杂度、故障率及成本。

### 2. PolarDB 的优势
针对上述问题，阿里云研发了PolarDB云原生数据库，采用计算与存储分离的架构，具备以下优点：
- **扩展性**：存储与计算分离，实现极致弹性。
- **成本效益**：共享同一份数据，降低存储成本。
- **易用性**：一写多读，透明读写分离。
- **可靠性**：三副本备份，秒级恢复。

![PolarDB与PostgreSQL单机版架构对比](20240124_02_pic_001.png)

### 3. PolarDB 存储计算分离架构概述
PolarDB通过Shared-Storage技术实现了计算与存储的分离，支持两种计算引擎：
- **单机执行引擎**：适用于高并发OLTP负载。
- **分布式执行引擎**：适用于大规模OLAP查询。

在相同的硬件资源下，PolarDB的性能可达到传统MPP数据库的90%，并具备SQL级别的弹性：当计算能力不足时，可以随时增加参与OLAP分析的CPU数量，而无需重新分布数据。

#### 3.1 架构原理
- **节点类型**：主节点（RW）可读写，只读节点（RO）仅可读。
- **Shared-Storage层**：只有主节点能写入，确保主节点和只读节点看到一致的数据。
- **同步机制**：只读节点通过回放WAL保持与主节点同步，主节点将WAL日志写入Shared-Storage，只复制WAL元数据给只读节点，后者从Shared-Storage读取并回放WAL。

#### 3.2 低延迟复制
PolarDB对传统流复制进行了优化，减少了网络传输量和IO操作，显著降低了复制延迟：
- **优化1**：只复制WAL元数据，减少网络传输量。
- **优化2**：页面回放优化，将部分IO操作转移到session进程中。
- **优化3**：DDL锁回放优化，避免回放进程因DDL操作被阻塞。
- **优化4**：Recovery优化，利用Lazy回放加速恢复过程。

这些优化使得PolarDB在读写分离、高可用性和稳定性方面表现出色。

### 4. PolarDB HTAP 架构概述
PolarDB通过基于Shared-Storage的MPP分布式并行执行引擎，加速OLTP场景下的OLAP查询。该架构包括：
- **分布式MPP执行引擎**：通过Shuffle算子和ParallelScan算子屏蔽数据分布和共享存储。
- **并行查询**：扩展GPORCA优化器，支持共享存储特性的计划探索。
- **算子并行化**：例如，Seqscan算子按4MB单位切分，充分利用存储带宽。
- **消除数据倾斜**：通过协调节点内部的DataThread和ControlThread，动态调整扫描进度，解决长尾问题。

通过这些创新，PolarDB不仅提高了查询性能，还有效解决了传统MPP系统中的数据倾斜问题，为用户提供了一种高效的HTAP解决方案。

希望以上内容能帮助您更深入地了解PolarDB的架构及其优势。