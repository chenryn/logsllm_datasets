age (AMI), which wraps a standard Linux/Apache distri-
bution along with the code needed to execute the Trans-
form algorithm. Applications can remotely instantiate
the proxy and upload a TK corresponding to a particu-
lar ABE decryption key.11 Depending on the use case,
they can either push ciphertexts to the proxy for transfor-
mation, or direct the proxy to retrieve ABE ciphertexts
from remote locations such as the web or the Amazon S3
storage cloud. The latter technique is helpful when ac-
cessing remotely-held records on a mobile device, since
the proxy transformation dramatically reduces the mo-
bile device’s bandwidth requirements vs. downloading
and decrypting each ABE ciphertext locally. This can
signiﬁcantly enhance device battery life.
6.1 Performance: Microbenchmarks
To evaluate the performance of our CPA-secure CP-ABE
outsourcing scheme in isolation (without confounding
factors such as network lag, ﬁle I/O, etc.) we conducted a
series of microbenchmarks using the libfenc implemen-
tation. For consistency, we ran these tests on two dedi-
cated hardware platforms: a 3GHz Intel Core Duo plat-
form with 4GB of RAM running 32-bit Linux Kernel
version 2.6.32, and a 412MHz ARM-based iPhone 3G
with 128MB of RAM running iOS 4.0.12 We instantiated
the ABE schemes using a 224-bit MNT elliptic curve
from the Stanford Pairing-Based Crypto library [30].13
The existing libfenc implementation implements the
Waters scheme using a Key Encapsulation variant. For
backwards compatibility, we adopted this approach in
our implementation as well. Herein, the ciphertext car-
ries a symmetric session key k that is computed at en-
cryption time as k = H(e(g,g)αs). The element C =
10Indeed, since cloud computing platforms support the creation of
multiple proxy instances, servers can rapidly scale their outsourcing
capability up and down to meet demand.
11The proxy requires only one TK to decrypt an unlimited number
of ciphertexts. However, a proxy can be shared by multiple users, each
with their own TK.
12Note that our tests were single-threaded, and thus used resources
from only a single core of the Intel processor. In all cases we conducted
our timing experiments with accessible background services disabled,
and with the mobile device connected to a power source.
13Although we deﬁne our schemes in the symmetric bilinear group
setting, the MNT curve choice required that we implement the scheme
in asymmetric groups with a pairing of the form G1 × G2 → GT . As
a result we assigned various elements of the ciphertext and key to the
groups G1 and G2 with the aim of minimizing ciphertext size.
M ·e(g,g)αs is omitted from the ciphertext, and any data
payload must be carried via a separate symmetric encryp-
tion under k. The practical impact of this approach is
that the ABE ciphertexts (and partially-decrypted cipher-
texts) are shortened by one element of GT .
Experimental setup. Both decryption time and cipher-
text size in the CP-ABE scheme depend on the com-
plexity of the ciphertext’s policy. To capture this in our
experiments, we ﬁrst generated a collection of 100 dis-
tinct ciphertext policies of the form (A1 AND A2 AND
. . . AND AN), where each Ai is an attribute, for values of
N increasing from 1 to 100. In each case we constructed
a corresponding decryption key that contained the N at-
tributes necessary for decryption. This approach ensures
that the decryption procedure depends on all N compo-
nents of the ciphertext and is a reasonable sample of a
complex policy.
To obtain our baseline results, we encapsulated a ran-
dom 128-bit symmetric key under each of these 100 dif-
ferent policies, then decrypted the resulting ABE cipher-
text using the normal (non-outsourced) Decrypt algo-
rithm.14 To smooth any experimental variability, we re-
peated each of our experiments 100 times on the Intel
device (due to the time consuming nature of the experi-
ments, we repeated the test only 30 times on the ARM
device) and averaged to obtain our decryption timings.
Figure 8 shows the size of the resulting ciphertexts as a
function of N, along with the measured decryption times
on our Intel and ARM test platforms.
Next, we evaluated the algorithms by generating a
Transform Key (TK) from the appropriate N-attribute
ABE decryption key and applying the Transform algo-
rithm to the ABE ciphertext using this key.15 Finally we
decrypted the resulting transformed ciphertext. Figure 8
shows the time required for each of those operations.
Discussion. As expected, the ABE ciphertext size and
decryption/transform time were linear in the complexity
of the ciphertext’s policy (N). However, our results illus-
trate the surprisingly high constants. Encrypting under a
100-component ciphertext policy produced an unwieldy
25KB of ABE ciphertext. The relatively fast Intel proces-
sor required nearly 2 full seconds to decrypt this value.
By comparison, the same machine can perform a 1024-
bit RSA decryption in 1.7 milliseconds.16
The results were more dramatic on the mobile device.
Decrypting a 100-component ciphertext policy on the
14Note that for this experiment we did not employ any symmetric
encryption, hence all times and ciphertext sizes refer to the ABE key
encapsulation ciphertext.
15We used the “backwards-compatible” key generation approach de-
scribed in Section 3.1 to derive a TK from a standard ABE decryption
key, rather than having the PKG generate the TK directly. This allowed
us to retain compatibility with the existing CP-ABE implementation.
16Measured with OpenSSL 1.0 [40].
ABE Ciphertext Size
Partially-decrypted Ciphertext Size
ABE Decryption Time
Outsourcing Keygen (Time)
Transform (Time)
Final Decryption (Time)
Figure 8: Microbenchmark results for our CP-ABE scheme with outsourcing. Timing results are provided for both
Intel and ARM platforms. Key generation times represent the time to convert a standard ABE decryption key into
an outsourcing key, using the “backwards-compatible” approach described in Section 3.1. “Final decryption” refers
to the decryption of a partially-decrypted ciphertext. Note that we present the Transform timing results for the Intel
platform only, since we view this as the more likely outsourcing platform. Intel (resp. ARM) timings represent the
average of 100 (resp. 30) test iterations.
ARM processor required nearly 30 seconds of sustained
computation. Even at lower policy complexities, our re-
sults seem problematic for implementers looking to de-
ploy unassisted ABE on limited computing devices.
Outsourcing substantially reduced both ciphertext size
and the time needed to decrypt the partially-decrypted ci-
phertext. Each partially-decrypted ciphertext was a ﬁxed
188 bytes in size, regardless of the original ciphertext’s
CP-ABE policy. Furthermore, the ﬁnal decryption pro-
cess required only 4ms on the Intel processor and a man-
ageable 60ms on ARM.17 Thus, it appears that outsourc-
ing can provide a noticeable decryption time advantage
for ciphertexts with 10 or more attributes.
Other Implementation Remarks. There are several opti-
mizations and tradeoffs one might explore that could im-
pact both the performance of the existing ABE scheme
and our outsourced scheme. We chose to use the PBC
library due to its use in the libfenc system and its simple
API. However, PBC does not include all of the latest op-
timizations discussed in the research literature. Other fu-
ture optimizations could include the use of multi-pairings
for decryption. We emphasize that while using such op-
17We conducted our experiments on the CPA-secure version of our
scheme. The primary performance differences in the RCCA version
are an extra exponentiation in GT and some additional bytes.
timizations to the existing ABE systems could give some
performance improvements, they will not improve the
size of ABE ciphertexts. Furthermore, decryption time
will still be linear in the size of the satisﬁed formula,
whereas our outsourcing technique transforms the ﬁnal
decryption step to a short El-Gamal-type ciphertext.
A note on policy complexity. The reader might assume
that 50- or 100-component policies are rare in practice.
In fact, we observed that it is relatively easy to arrive
at highly complex policies in typical use cases. This is
particularly true when using policies that contain integer
comparison operators, e.g., “AGE  1262325600 AND TIME < 1267423200)
local-only
(sec)
·
·
·
1.1s
17.3s
local+web
(sec/kb)
·
·
·
proxy
(sec/kb)
93.4 sec
45 sec
2.9 sec
proxy+web
(sec/kb)
93.4 sec
45 sec
2.9 sec
1.2s/1.1k
17.3s/22.8k
.2s/1.4k
1.2s/23.2k
.2s/0.4k
1.2s/0.4k
Figure 9: Some average performance results for the proxy-enhanced iHealthEHR application running on our iPhone
3G. From left to right, “local-only” indicates device-local decryption and storage of ciphertexts, “local+web” indicates
that ciphertexts were downloaded from a web server and decrypted at the device. “proxy” indicates local ciphertext
storage with proxy outsourcing. “proxy+web” indicates that ciphertexts were obtained from the web via the proxy.
Where relevant we provide both timings and total bandwidth transferred (up+down) from the device. Note that proxy
launch times exhibit some variability depending on factors outside of our control.
6.2 Performance: Mobile Example
To validate our ideas in a real application, we incorpo-
rated outsourcing into the iPhone viewer component of
iHealthEHR [3], an experimental system for distributing
Electronic Health Records (EHRs). Since EHRs can con-
tain highly sensitive data, iHealthEHR uses CP-ABE to
perform end-to-end encryption of records from the orig-
ination point to the viewing device. Distinct ciphertext
policies may be applied to each node in an individual’s
health record (e.g., to admit special permissions for psy-
chiatric records).
iHealthEHR supports both local and
cloud-based storage of records.
We modiﬁed the iPhone application to remotely
instantiate our outsourcing proxy on startup, using
a “small” server instance within Amazon’s storage
cloud.18 In our experiments we found that the ﬁrst EC2
instantiation required anywhere from 1-3 minutes, pre-
sumably depending on the system’s load. However, once
the proxy was launched, it could be left running indeﬁ-
nitely and shared by many different users with different
TKs, or — when not in use — paused and brought back
to full operation in as little as 30 seconds (with an av-
erage closer to 45 seconds). During this startup interval
we set the application to locally process all decryption
operations. Once the proxy signaled its availability, the
application pushed a TK to it via HTTP, and outsourced
all further decryption operations.
To evaluate the performance implications, we con-
ducted experiments on the system with outsourcing en-
abled and disabled, considering four likely usage sce-
narios. In the ﬁrst scenario (local-only), we conducted
device-local decryption on ciphertexts stored locally in
the device’s Flash memory. In the second scenario (lo-
cal+web) we downloaded ciphertexts from a web server,
18According to Amazon’s documentation, a small EC2 instance pro-
vides “the equivalent CPU capacity of a 1.0-1.2 GHz 2007 Opteron or
2007 Xeon processor” and 1.7GB of RAM, at a cost of USD $0.085/hr.
[1].
then decrypted them locally at the device. In the third
scenario (proxy), we stored ciphertexts locally and then
uploaded them to the proxy for transformation. In the
ﬁnal scenario (proxy+web) ciphertexts were retrieved
from a web server by the proxy, then Transformed be-
fore being sent to the device. In each case we measured
the time required to decrypt, along with the total band-
width transmitted and received by the device (excepting
the local-only case, which did not employ the network
connection). The results are summarized in Figure 9.
7 Hardening ABE Implementations
Thus far we described outsourcing solely as a means to
improve decryption performance. In certain cases out-
sourcing can also be used to enhance security. By way
of motivation, we observe that ABE implementations
tend to be relatively complex compared to implementa-
tions of other public-key encryption schemes. For ex-
ample, libfenc’s policy handling components alone com-
prise nearly 3,000 lines of C code, excluding library de-
pendencies. It has been observed that the number of vul-
nerabilities in a software product tends to increase in pro-
portion to the code’s complexity [34].
It is common for designers to mitigate software issues
by sandboxing vulnerable processes e.g., [33], or through
techniques that isolate security-sensitive functions within
a process [32]. McCune et al. recently proposed TrustVi-
sor [31], a specialized hypervisor designed to protect and
isolate security-sensitive “Pieces of Application Logic”
(PALs) from less sensitive code.
We propose outsourcing as a tool to harden ABE im-
plementations in platforms with code isolation. For ex-
ample, in a system equipped with TrustVisor, imple-
menters can embed the relatively simple key generation
and Decryptout routines in security-sensitive code (e.g.,
a TrustVisor PAL) and use outsourcing to push the re-
maining calculations into non-sensitive code. This not
only reduces the size of the sensitive code base, it also
simpliﬁes parameter validation for the PAL (since the
partially-decrypted ABE ciphertext is substantially less
complex than the original). We refer to this technique
as “self-outsourcing” and note that it can also be used
in systems containing hardware security modules (e.g.,
cryptographic smart cards). Moreover, based on our ex-
periments of Section 6, we estimate that this approach
will have a minimal impact on performance.
Acknowledgments
We thank the anonymous reviewers for their helpful
comments.
References
[1] Amazon EC2 FAQs. http://aws.amazon.com/
ec2/faqs/, November 2010.
[2] Michel Abdalla, Mihir Bellare, Dario Catalano,
Eike Kiltz, Tadayoshi Kohno, Tanja Lange, John
Malone-Lee, Gregory Neven, Pascal Paillier, and
Haixia Shi. Searchable encryption revisited: Con-
sistency properties, relation to anonymous ibe, and
extensions. In CRYPTO, pages 205–222, 2005.
[3] Joseph A. Akinyele, Christoph U. Lehmann,
Matthew Green, Matthew W. Pagano, Zachary N. J.