The second largest group of false positives contains 13
warnings that can be traced back to ﬁle reads. In our anal-
ysis, we conservatively regarded values originating from
ﬁles as being tainted. In these 13 cases, it turned out that
an attacker is actually not able to inject malicious content
into the ﬁles that were read. However, our conservative
approach led to the detection of two previously unknown
vulnerabilities. The ratio between false positives and vul-
nerabilities for this problem could be improved by tracking
the ﬁles into which an attacker may be able to inject tainted
values.
Since our alias analysis does not cover aliasing relation-
ships for arrays and array elements, a global array and its
content cannot be untainted by statements that are located
inside functions. In seven cases, a global array element is
untainted inside a sanitization function, followed by an out-
put statement that contains the (incorrectly tainted) global.
An interesting kind of false positive with six warnings
arose while scanning PhpNuke. In the YourAccount mod-
ule, values originating from the user are embedded into the
output as attributes of HTML tags. Although these values
were not thoroughly sanitized prior to their use, the existing
sanitization is sufﬁcient because it makes sure that they do
not contain double quotes. But since the attribute ﬁelds are
delimited by double quotes, the attacker’s input is “trapped”
inside these attributes where it is not able to do any harm.
Custom sanitization using regular expressions is a dan-
gerous practice.
It is easy to miss dangerous characters,
especially when the cases get more complex and when the
implementor lacks the necessary expertise. Therefore, Pixy
does not consider the use of such methods as sanitization.
In two cases, values that have undergone such a custom san-
itization were reported as tainted. Manual inspection, how-
ever, did not reveal any ways for circumventing the protec-
tion.
The remaining ﬁve false positives were due to more or
less complex “if”-constructs that are responsible for un-
tainting a critical variable. Under certain conditions, it
might be possible that none of the branches of the construct
is taken, leaving the variable tainted. However, we did not
ﬁnd a way to induce such a bypassing condition.
5. Related Work
Currently, there exist only few approaches that deal with
static detection of web application vulnerabilities. Huang
et al. [10] were the ﬁrst to address this issue in the context
of PHP applications. They used a lattice-based analysis al-
gorithm derived from type systems and typestate, and com-
pared it to a technique based on bounded model checking
in their follow-up paper [11]. A substantial fraction of PHP
ﬁles (8% in their experiments) is rejected due to problems
with the applied parser. In contrast, we are able to parse the
full PHP language. Moreover, Huang et al.’s work leaves
out important issues such as the handling of references, ar-
ray elements, or any of the limitations that we addressed in
Section 3.1. Unfortunately, comparing their results to ours
was not possible due to the limited detail of their reports (no
version numbers or advisory ID’s are given). After request-
ing a copy of their tool, the authors informed us of their
plans to commercialize it, which prevents them to share it
with other researchers.
A recent, unpublished paper by Xie and Aiken [25] ad-
dresses the problem of statically detecting SQL injection
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:50:23 UTC from IEEE Xplore.  Restrictions apply. 
Program
PhpNuke 6.9
File
Reviews Module
LOC Variables Vulnerabilities FP’s Advisories
8409
5 BugTraq: 10493,
3113
15
YourAccount Module
9070
3452
PhpMyAdmin 2.6.0-pl2
Gallery 1.3.3
select server.lib.php
search.php
login.php
Totals
89
1810
1719
21097
23
530
488
7606
9
9
2
1
36
Table 1. Known vulnerabilities discovered by Pixy.
10524, 365368
25 BugTraq: 13007,
394971, 394867,
321324
0
PMASA-2005-01
1 BugTraq: 348514
0 BugTraq: 8039
31
Program
Simple PHP Blog 0.4.5
Serendipity 0.8.4
File
preview cgi.php
preview static cgi.php
colors.php
personal.inc.php
LOC Variables Vulnerabilities FP’s Advisories
6938
6883
6971
6588
5 TUVSA-0511-001,
4 BugTraq 415463
6
1 TUVSA-0509-001,
2342
2316
2313
2305
3
4
1
2
Yapig 0.95b
view.php
5128
Totals
29508
1302
10578
5
15
Table 2. Unknown vulnerabilities discovered by Pixy.
16
BugTraq 412023
0 TUVSA-0510-001,
BugTraq 413255
vulnerabilities in PHP scripts. By applying a custom, three-
tier architecture instead of using full-ﬂedged data-ﬂow anal-
ysis techniques, they operate on a less ambitious conceptual
level than we do. For instance, recursive function calls are
simply ignored instead of being handled correctly. More-
over, alias analysis is not performed at all, which further
lowers the correctness of their approach. Multi-dimensional
arrays also appear to be unsupported. They apply a heuristic
for resolving simple cases of include statements that seems
to yield good results in practice. It should be easy to incor-
porate this approach into our prototype.
Livshits and Lam [15] applied an analysis supported by
binary decision diagrams presented in [24] for ﬁnding se-
curity vulnerabilities in Java applications. Their work dif-
fers from ours in the underlying analysis, which is ﬂow-
insensitive for the most part, and the target language Java,
which is a typed language. This considerably eases the chal-
lenges faced by static analysis.
In [16], a technique for approximating the string output
of PHP programs with a context-free grammar is presented.
While primarily targeted at the validation of HTML output,
the author claims that it can also be used for the detection
of cross-site scripting vulnerabilities. However, without any
taint information or additional checks, it appears to be dif-
ﬁcult to distinguish between malicious and benign output.
Only one discovered XSS vulnerability is reported, and the
observed false positive rate is not mentioned. Moreover, the
presented tool currently supports only “basic features” of
PHP, excluding references.
Engler et al. have published various static analysis ap-
proaches to ﬁnding vulnerabilities and programming bugs
in the context of C programs. For example, in [6], the
authors describe a system that translates simple rules into
automata-based compiler extensions that check whether a
program adheres to these rules or not. An extension to this
work is given in [7], where the authors present techniques
for the automatic extraction of such rules from a given pro-
gram. In [2], tainting analysis is used to identify vulnerabil-
ities in operating system code where user supplied integer
and pointer values are used without proper checking.
An alternative approach aiming at the detection of taint-
style vulnerabilities introduces special type qualiﬁers to the
analyzed programming language. One of the most promi-
nent tools that applies this concept is CQual [8], which has
been, among other things, used by Shankar et al. [22] to
detect format string vulnerabilities in C code. However, it
remains questionable whether this technique can be applied
to untyped scripting languages.
6. Conclusions
Web applications have become a popular and wide-
spread interaction medium in our daily lives. At the same
time, vulnerabilities that endanger the personal data of users
are discovered regularly. Manual security audits targeted at
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:50:23 UTC from IEEE Xplore.  Restrictions apply. 
these vulnerabilities are labor-intensive, costly, and error-
prone. Therefore, we propose a static analysis technique
that is able to detect taint-style vulnerabilities automatically.
This broad class includes many types of common vulnera-
bilities such as SQL injection or cross-site scripting. Our
analysis is based on data ﬂow analysis, a well-understood
and established technique in computer science. To improve
the correctness and precision of our taint analysis, we con-
ducted a supplementary alias analysis as well as literal anal-
ysis. All our analyses are interprocedural, context-sensitive
and ﬂow-sensitive for providing a high degree of precision
and keeping the number of false positives low, making our
tool useful for real-world applications.
We implemented our concepts in Pixy, an open-source
Java tool able to detect cross-site scripting ﬂaws in PHP
scripts.
In the course of our experimental validation, we
discovered and reported 15 previously unknown vulnerabil-
ities and reconstructed 36 known vulnerabilities, while ob-
serving a moderate false positive rate of around 50% (i.e.,
one false positive for each vulnerability on average).
There is an urgent need for automated vulnerability de-
tection in Web application development, especially because
Web applications are growing into large and complex sys-
tems. We believe that our presented concepts provide an
effective solution to this problem, therefore offering bene-
ﬁts to both users and providers of Web applications.
7. Acknowledgments
This work has been supported by the Austrian Science
Foundation (FWF) under grant P18368-N04. We would
like to thank our shepherd for his guidance in preparing the
camera-ready version of the paper, and Markus Schordan
for insightful discussions on the theory of data ﬂow analy-
sis and abstract interpretation.
References
[1] A. V. Aho, R. Sethi, and J. D. Ullman. Compilers: princi-
ples, techniques, and tools. Addison-Wesley Longman Pub-
lishing Co., Inc., Boston, MA, USA, 1986.
[2] K. Ashcraft and D. Engler. Using programmer-written com-
piler extensions to catch security holes. In IEEE Symposium
on Security and Privacy, 2002.
[3] BugTraq.
BugTraq Mailing
List Archive.
http://www.securityfocus.com/archive/1, 2005.
[4] CERT.
CERT Advisory CA-2000-02: Malicious
in Client Web Requests.
HTML Tags Embedded
http://www.cert.org/advisories/CA-2000-02.html, 2005.
[5] CUP.
CUP: LALR Parser Generator
in Java.
http://www2.cs.tum.edu/projects/cup/, 2005.
[6] D. Engler, B. Chelf, A. Chou, and S. Hallem. Checking sys-
tem rules using system-speciﬁc, programmer-written com-
piler extensions. In OSDI 2000, 2000.
2005.
[7] D. Engler, D. Y. Chen, S. Hallem, A. Chou, and B. Chelf.
Bugs as deviant behavior: a general approach to inferring er-
rors in systems code. In SOSP ’01: Proceedings of the 18th
ACM Symposium on Operating Systems Principles, 2001.
[8] J. S. Foster, M. Faehndrich, and A. Aiken. A theory of type
qualiﬁers. In PLDI ’99: Proceedings of the ACM SIGPLAN
1999 Conference on Programming Language Design and
Implementation, 1999.
[9] Y.-W. Huang, S.-K. Huang, T.-P. Lin, and C.-H. Tsai. Web
application security assessment by fault injection and behav-
ior monitoring. In WWW ’03: Proceedings of the 12th In-
ternational Conference on World Wide Web, 2003.
[10] Y.-W. Huang, F. Yu, C. Hang, C.-H. Tsai, D.-T. Lee, and
S.-Y. Kuo. Securing web application code by static analysis
and runtime protection. In WWW ’04: Proceedings of the
13th International Conference on World Wide Web, 2004.
[11] Y.-W. Huang, F. Yu, C. Hang, C.-H. Tsai, D. T. Lee, and
S.-Y. Kuo. Verifying web applications using bounded model
checking. In DSN, 2004.
JFlex: The Fast Scanner Generator for Java.
[12] JFlex.
http://jﬂex.de, 2005.
[13] N. Jovanovic, C. Kruegel, and E. Kirda.
static analysis tool
http://www.seclab.tuwien.ac.at/projects/pixy/, 2006.
Pixy: A
for detecting XSS vulnerabilities.
[14] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic. Noxes:
A client-side solution for mitigating cross-site scripting at-
tacks. In The 21st ACM Symposium on Applied Computing
(SAC 2006).
[15] V. B. Livshits and M. S. Lam. Finding security errors in
In Proceedings of the
Java programs with static analysis.
14th Usenix Security Symposium, Aug. 2005.
[16] Y. Minamide. Static approximation of dynamically gener-
ated web pages. In WWW ’05: Proceedings of the 14th In-
ternational Conference on World Wide Web, 2005.
[17] S. S. Muchnick. Advanced Compiler Design and Implemen-
tation. Morgan Kaufmann, 1997.
[18] A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley, and
D. Evans. Automatically hardening web applications using
precise tainting. In IFIP Security 2005, 2005.
[19] F. Nielson, H. R. Nielson, and C. Hankin. Principles of Pro-
gram Analysis. Springer-Verlag New York, Inc., 1999.
[20] PHP. PHP: Hypertext Preprocessor. http://www.php.net,
[21] T. Pietraszek and C. V. Berghe. Defending against injec-
tion attacks through context-sensitive string evaluation. In
Recent Advances in Intrusion Detection 2005 (RAID), 2005.
[22] U. Shankar, K. Talwar, J. S. Foster, and D. Wagner. De-
tecting format string vulnerabilities with type qualiﬁers. In
Proceedings of the 10th USENIX Security Symposium, 2001.
[23] Stephen Shankland. Andreessen: PHP succeeding where
Java isn’t. http://www.zdnet.com.au, 2005.
[24] J. Whaley and M. S. Lam. Cloning-based context-sensitive
pointer alias analysis using binary decision diagrams.
In
PLDI ’04: Proceedings of the ACM SIGPLAN 2004 Con-
ference on Programming Language Design and Implemen-
tation, 2004.
[25] Y. Xie and A. Aiken.
curity
http://glide.stanford.edu/yichen/research/sec.ps, 2006.
Vulnerabilities
in
Static Detection of Se-
Languages.
Scripting
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:50:23 UTC from IEEE Xplore.  Restrictions apply.