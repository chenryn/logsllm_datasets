### Optimized Text

The second largest category of false positives comprises 13 warnings that can be traced back to file reads. In our analysis, we conservatively treated values originating from files as tainted. In these 13 instances, it was determined that an attacker could not inject malicious content into the files being read. However, our conservative approach led to the discovery of two previously unknown vulnerabilities. The ratio between false positives and vulnerabilities for this issue could be improved by tracking the files into which an attacker might inject tainted values.

Our alias analysis does not cover aliasing relationships for arrays and array elements, meaning that a global array and its content cannot be untainted by statements located inside functions. In seven cases, a global array element is untainted within a sanitization function, but the subsequent output statement incorrectly treats the global as tainted.

An interesting type of false positive, with six warnings, occurred during the scanning of PhpNuke. In the YourAccount module, user-originated values are embedded into the output as HTML tag attributes. Although these values were not thoroughly sanitized, the existing sanitization is sufficient because it ensures they do not contain double quotes. Since the attribute fields are delimited by double quotes, any attacker's input is "trapped" within these attributes and cannot cause harm.

Custom sanitization using regular expressions is a risky practice. It is easy to miss dangerous characters, especially in complex cases or when the implementer lacks the necessary expertise. Therefore, Pixy does not consider such methods as effective sanitization. In two cases, values that underwent custom sanitization were reported as tainted. Manual inspection, however, did not reveal any ways to bypass the protection.

The remaining five false positives were due to more or less complex "if"-constructs responsible for untainting critical variables. Under certain conditions, none of the branches of the construct may be taken, leaving the variable tainted. However, we did not find a way to induce such a bypassing condition.

### Related Work

Currently, there are few approaches that address the static detection of web application vulnerabilities. Huang et al. [10] were the first to tackle this issue in the context of PHP applications. They used a lattice-based analysis algorithm derived from type systems and typestate, and compared it to a technique based on bounded model checking in their follow-up paper [11]. A significant fraction of PHP files (8% in their experiments) was rejected due to parsing issues. In contrast, our tool can parse the full PHP language. Moreover, Huang et al.'s work omits important issues such as handling references, array elements, or the limitations we addressed in Section 3.1. Unfortunately, comparing their results to ours was not possible due to the limited detail in their reports (no version numbers or advisory IDs are provided). After requesting a copy of their tool, the authors informed us of their plans to commercialize it, preventing them from sharing it with other researchers.

A recent, unpublished paper by Xie and Aiken [25] addresses the problem of statically detecting SQL injection vulnerabilities in PHP scripts. By applying a custom, three-tier architecture instead of full-fledged data-flow analysis techniques, they operate on a less ambitious conceptual level than we do. For instance, recursive function calls are ignored rather than handled correctly. Additionally, alias analysis is not performed, further reducing the correctness of their approach. Multi-dimensional arrays also appear to be unsupported. They use a heuristic for resolving simple include statements, which seems to yield good results in practice. It should be straightforward to incorporate this approach into our prototype.

Livshits and Lam [15] applied an analysis supported by binary decision diagrams presented in [24] to find security vulnerabilities in Java applications. Their work differs from ours in the underlying analysis, which is mostly flow-insensitive, and the target language, Java, which is a typed language. This significantly eases the challenges faced by static analysis.

In [16], a technique for approximating the string output of PHP programs with a context-free grammar is presented. While primarily targeted at validating HTML output, the author claims it can also be used to detect cross-site scripting (XSS) vulnerabilities. However, without taint information or additional checks, it is difficult to distinguish between malicious and benign output. Only one discovered XSS vulnerability is reported, and the observed false positive rate is not mentioned. Moreover, the presented tool currently supports only "basic features" of PHP, excluding references.

Engler et al. have published various static analysis approaches for finding vulnerabilities and programming bugs in C programs. For example, in [6], the authors describe a system that translates simple rules into automata-based compiler extensions to check whether a program adheres to these rules. An extension to this work is given in [7], where the authors present techniques for automatically extracting such rules from a given program. In [2], tainting analysis is used to identify vulnerabilities in operating system code where user-supplied integer and pointer values are used without proper checking.

An alternative approach for detecting taint-style vulnerabilities introduces special type qualifiers to the analyzed programming language. One of the most prominent tools that apply this concept is CQual [8], which has been used by Shankar et al. [22] to detect format string vulnerabilities in C code. However, it remains questionable whether this technique can be applied to untyped scripting languages.

### Conclusions

Web applications have become a popular and widespread interaction medium in our daily lives. Simultaneously, vulnerabilities that endanger users' personal data are regularly discovered. Manual security audits for these vulnerabilities are labor-intensive, costly, and error-prone. Therefore, we propose a static analysis technique that can automatically detect taint-style vulnerabilities. This broad class includes many common types of vulnerabilities such as SQL injection and cross-site scripting. Our analysis is based on data flow analysis, a well-understood and established technique in computer science. To improve the correctness and precision of our taint analysis, we conducted supplementary alias and literal analyses. All our analyses are interprocedural, context-sensitive, and flow-sensitive, providing a high degree of precision and keeping the number of false positives low, making our tool useful for real-world applications.

We implemented our concepts in Pixy, an open-source Java tool capable of detecting cross-site scripting flaws in PHP scripts. During our experimental validation, we discovered and reported 15 previously unknown vulnerabilities and reconstructed 36 known vulnerabilities, while observing a moderate false positive rate of around 50% (i.e., one false positive for each vulnerability on average).

There is an urgent need for automated vulnerability detection in web application development, especially as web applications grow into large and complex systems. We believe our presented concepts provide an effective solution to this problem, offering benefits to both users and providers of web applications.

### Acknowledgments

This work has been supported by the Austrian Science Foundation (FWF) under grant P18368-N04. We would like to thank our shepherd for his guidance in preparing the camera-ready version of the paper, and Markus Schordan for insightful discussions on the theory of data flow analysis and abstract interpretation.

### References

[1] A. V. Aho, R. Sethi, and J. D. Ullman. Compilers: principles, techniques, and tools. Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA, 1986.
[2] K. Ashcraft and D. Engler. Using programmer-written compiler extensions to catch security holes. In IEEE Symposium on Security and Privacy, 2002.
[3] BugTraq. BugTraq Mailing List Archive. http://www.securityfocus.com/archive/1, 2005.
[4] CERT. CERT Advisory CA-2000-02: Malicious HTML Tags Embedded in Client Web Requests. http://www.cert.org/advisories/CA-2000-02.html, 2005.
[5] CUP. CUP: LALR Parser Generator in Java. http://www2.cs.tum.edu/projects/cup/, 2005.
[6] D. Engler, B. Chelf, A. Chou, and S. Hallem. Checking system rules using system-specific, programmer-written compiler extensions. In OSDI 2000, 2000.
[7] D. Engler, D. Y. Chen, S. Hallem, A. Chou, and B. Chelf. Bugs as deviant behavior: a general approach to inferring errors in systems code. In SOSP '01: Proceedings of the 18th ACM Symposium on Operating Systems Principles, 2001.
[8] J. S. Foster, M. Faehndrich, and A. Aiken. A theory of type qualifiers. In PLDI '99: Proceedings of the ACM SIGPLAN 1999 Conference on Programming Language Design and Implementation, 1999.
[9] Y.-W. Huang, S.-K. Huang, T.-P. Lin, and C.-H. Tsai. Web application security assessment by fault injection and behavior monitoring. In WWW '03: Proceedings of the 12th International Conference on World Wide Web, 2003.
[10] Y.-W. Huang, F. Yu, C. Hang, C.-H. Tsai, D.-T. Lee, and S.-Y. Kuo. Securing web application code by static analysis and runtime protection. In WWW '04: Proceedings of the 13th International Conference on World Wide Web, 2004.
[11] Y.-W. Huang, F. Yu, C. Hang, C.-H. Tsai, D. T. Lee, and S.-Y. Kuo. Verifying web applications using bounded model checking. In DSN, 2004.
[12] JFlex. JFlex: The Fast Scanner Generator for Java. http://jflex.de, 2005.
[13] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A static analysis tool for detecting XSS vulnerabilities. http://www.seclab.tuwien.ac.at/projects/pixy/, 2006.
[14] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic. Noxes: A client-side solution for mitigating cross-site scripting attacks. In The 21st ACM Symposium on Applied Computing (SAC 2006).
[15] V. B. Livshits and M. S. Lam. Finding security errors in Java programs with static analysis. In Proceedings of the 14th Usenix Security Symposium, Aug. 2005.
[16] Y. Minamide. Static approximation of dynamically generated web pages. In WWW '05: Proceedings of the 14th International Conference on World Wide Web, 2005.
[17] S. S. Muchnick. Advanced Compiler Design and Implementation. Morgan Kaufmann, 1997.
[18] A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley, and D. Evans. Automatically hardening web applications using precise tainting. In IFIP Security 2005, 2005.
[19] F. Nielson, H. R. Nielson, and C. Hankin. Principles of Program Analysis. Springer-Verlag New York, Inc., 1999.
[20] PHP. PHP: Hypertext Preprocessor. http://www.php.net, 2005.
[21] T. Pietraszek and C. V. Berghe. Defending against injection attacks through context-sensitive string evaluation. In Recent Advances in Intrusion Detection 2005 (RAID), 2005.
[22] U. Shankar, K. Talwar, J. S. Foster, and D. Wagner. Detecting format string vulnerabilities with type qualifiers. In Proceedings of the 10th USENIX Security Symposium, 2001.
[23] Stephen Shankland. Andreessen: PHP succeeding where Java isn’t. http://www.zdnet.com.au, 2005.
[24] J. Whaley and M. S. Lam. Cloning-based context-sensitive pointer alias analysis using binary decision diagrams. In PLDI '04: Proceedings of the ACM SIGPLAN 2004 Conference on Programming Language Design and Implementation, 2004.
[25] Y. Xie and A. Aiken. Static Detection of Security Vulnerabilities in Scripting Languages. http://glide.stanford.edu/yichen/research/sec.ps, 2006.

---

This optimized text aims to improve clarity, coherence, and professionalism while maintaining the original content and intent.