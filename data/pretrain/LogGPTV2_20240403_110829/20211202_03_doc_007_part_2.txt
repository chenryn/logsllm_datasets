WHEN >: leave/shortcut loop only if > ≡ true.
EXIT ‹3:293› may also be used to leave a statement block.
Leaving/Shortcutting Loops ✎
>
QNNJ
&₀
⋮
> ┄┄&*4;')k'
QNNJ
⋮
RNhSlhmK outer;
⋮
KnlS inner;
⋮ ┄┄39:=9
Khi QNNJ;
&₁
⋮
Khi QNNJ;
Shortcutting WHILE > leads to re-evaluation of >.
10 ┆ Trapping Exceptions in Blocks
BEGIN
⋮ -- ⎫ errors or LdlPK 9. statements transfer control
&ₓ -- ⎬ to the KnRKJSlNh clause — if &ₓ changed the
⋮ -- ⎭ database, also performs a rollback
EXCEPTION
[ WHEN 9.ᵢ₁ [, 9.ᵢⱼ]٭ THEN &ᵢ ]⁺
END;
&₁ -- next statement if no exception occurred
On error or RAISE, search for first matching exception
category/name 9.ᵢⱼ, execute &ᵢ, then &₁.
If no match is found (or &ᵢ fails), propagate exception
to enclosing block. Abort function if in outermost block.
Raising Exceptions
one expression per '%' in message
s─t─u
➊ RAISE [ 39=93 ] '⋯ % ⋯ % ⋯' [, 9]٭
➋ RAISE [ 39=93 ] 9.
➌ ASSERT > [, 9]
39=93 ∈ {DEBUG,LOG,INFO,NOTICE,WARNING}. Only the default
39=93 ≡ EXCEPTION raises an exception of name
RAISE_EXCEPTION (or 9.5, if provided).
ASSERT > (> :: bool) raises exception ASSERT_FAILURE —
with optional message 9 :: text — if > ≡ false.
5 See https://www.postgresql.org/docs/9.6/static/errcodes-appendix.html for a catalog of exception
categories/names.
.
11 ┆ The Core of a Spreadsheet
 A B C D
/ 1 3.50 A1×B1 €→£ 0.88
2 2 6.10 A2×B2
3 2 0.98 A3×B3
4 #items SUM(A1:A3) total (€) SUM(C1:C3) total (£) D1×C4
Before evaluation
 A B C D
/ 1 3.50 3.50 €→£ 0.88
2 2 6.10 12.20
3 2 0.98 1.96
4 #items 5 total (€) 17.66 total (£) 15.54
After evaluation
A1×B1: formulæ to be evaluated, total (€): static text.
.
A DAG of Cell Dependencies
Spreadsheet formulæ induce a directed dependency graph:
Formulæ in A1-A3, B1-B3,
k&9& A4
D1 may be evaluated first
(and in parallel).
B1 A1 B2 A2 B3 A3
Formula in cell D4 needs
C1 C2 C3
to be evaluated last.
C4 Topologically sort the
graph's cells to derive
D1 D4 an evaluation order.
Topologically Sort a DAG dependencies(cell, uses) ✎
WITH RECURSIVE
earliest(pos, cell) AS (
SELECT DISTINCT 0 AS pos, d.uses AS cell
FROM dependencies AS d
WHERE d.uses NOT IN (SELECT d1.cell -- ⎱ cells 8 with no
FROM dependencies AS d1) -- ⎰ dependencies
UNION
SELECT e.pos + 1 AS pos, d.cell -- ⎫ if cell 8 uses cell 9, 8
FROM earliest AS e, dependencies AS d -- ⎬ can be evaluated directly
WHERE d.uses = e.cell -- ⎭ after 9 at the earliest
),
topo_sort(pos, cell) AS (
SELECT MAX(e.pos) AS pos, e.cell -- ⎫ for each cell 9, pick the
FROM earliest AS e -- ⎬ evaluation time at which all
GROUP BY e.cell -- ⎭ dependencies are available
)
.
Dependencies, Topologically Sorted
Table xyzy_{y|x
k&9& A4 ┌───┬─────┐
│pos│cell │
├───┼╌╌╌╌╌┤
B1 A1 B2 A2 B3 A3 │ 0 │(A,1)│
│ 0 │(A,2)│
│ 0 │(A,3)│
C1 C2 C3 │ 0 │(B,1)│
│ 0 │(B,2)│
│ 0 │(B,3)│
C4 │ 0 │(D,1)│
│ 1 │(A,4)│
│ 1 │(C,1)│
D1 D4 │ 1 │(C,2)│
│ 1 │(C,3)│
• Column zy{ describes parallel evaluation order. │ 2 │(C,4)│
│ 3 │(D,4)│
• Use iKhPK_LdhÉ() to obtain a sequential order. └───┴─────┘
.
Formula Representation
We need a representation of formulæ that supports
1. the extraction of references to other cells and
2. the evaluation of (arithmetic) expressions.
One option: use nested JSON objects to reflect the
hierarchical structure of formulæ:
➊ literal ┆ ➋ cell ref ┆ ➌ +-ary op ┆ ❹ agg over cell range
➊ {"entry":"num", "num":4.2}
➋ {"entry":"cell", "cell":"(A,3)"}
➌ {"entry":"op", "op":"+", args:[‹-4;>'entry'
WHEN 'op' THEN
-- recursively collect references found in operator arguments
RETURN QUERY SELECT c.*
FROM jsonb_array_elements(e->'args') AS arg,
LATERAL refs(arg) AS c; -- # recursive call
WHEN 'agg' THEN
-- all cells in rectangular area are referenced (SQL UDF cells())
RETURN QUERY SELECT c.*
FROM cells(e->>'from', e->>'to') AS c;
WHEN 'cell' THEN RETURN NEXT e->>'cell'; -- reference to single cell
WHEN 'num' THEN hmQQ; -- NULL: do nothing (≡ NOP)
ELSE RAISE EXCEPTION 'refs: unknown cell entry %', e->>'entry';
END CASE;
RETURN;
END;
$$
.
Evaluate a Formula (PL/SQL) ✎
CREATE FUNCTION eval(e jsonb) RETURNS float AS
$$ -- ┌─────────────────────────────────────────────────────┐
DECLARE v float; -- │ PL/SQL UDF áàâäã()) may assume that cell ) contains |
BEGIN -- │ a float literal: if we refer to ), the topological |
CASE e->>'entry' -- │ sort ensures that ) has already been evaluated |
WHEN 'op' THEN -- └─────────────────────────────────────────────────────┘
CASE e->>'op'
WHEN '+' THEN v := eval(e->'args'->0) + eval(e->'args'->1);
⋮
END CASE;
WHEN 'agg' THEN SELECT CASE e->>'agg'
WHEN 'sum' THEN SUM(value(c))
⋮
END
INTO v
FROM cells(e->>'from', e->>'to') AS c;
WHEN 'cell' THEN v := value(e->>'cell');
WHEN 'num' THEN v := e->>'num';
END CASE;
RETURN v;
END;
$$
.
Spreadsheet Evaluation (Query Plan)
1. Store the cells in table sheet(cell, formula :: jsonb).
2. Extract dependencies of each cell's formula (refs()), use
to build topologically sorted array )& of cells.
3. PL/SQL UDF eval_sheet():
For each cell ) in )&:
➊ Read formula 9 for ) off table sheet.
➋ = := eval(9) to find float value = of formula 9.
➌ Update cell ) in sheet to {"entry":"num", "num":=}.
4. All cells in sheet will contain {"entry":"num", …}.
.
Spreadsheet Evaluation (PL/SQL) ✎
CREATE FUNCTION eval_sheet(cs cell[]) RETURNS boolean AS
$$
DECLARE c cell; v float; e jsonb;
BEGIN
FOREACH c IN dLLde cs LOOP
┌ SELECT s.formula
➊ │ INTO e
│ FROM sheet AS s
└ WHERE s.cell = c;
➋ v := eval(e);
┌ UPDATE sheet AS s
➌ │ SET formula = jsonb_build_object('entry', 'num', 'num', v)
└ WHERE s.cell = c;
END LOOP;
RETURN true;
END;
$$
That's All, Folks
Éããz yå çäã|éèåê àåë äåxèâ åãíx xèìã.