title:Address Oblivious Code Reuse: On the Effectiveness of Leakage Resilient
Diversity
author:Robert Rudd and
Richard Skowyra and
David Bigelow and
Veer Dedhia and
Thomas Hobson and
Stephen Crane and
Christopher Liebchen and
Per Larsen and
Lucas Davi and
Michael Franz and
Ahmad-Reza Sadeghi and
Hamed Okhravi
Address-Oblivious Code Reuse:
On the Effectiveness of Leakage-Resilient Diversity
Robert Rudd,∗ Richard Skowyra,∗ David Bigelow,∗ Veer Dedhia,∗ Thomas Hobson,∗
Stephen Crane,† Christopher Liebchen,‡ Per Larsen,§ Lucas Davi,¶
Michael Franz,§ Ahmad-Reza Sadeghi,‡ Hamed Okhravi∗
∗MIT Lincoln Laboratory. {ﬁrstname.lastname,dbigelow}@ll.mit.edu
†Immunant, Inc. PI:EMAIL
‡CYSEC/TU Darmstadt.{christopher.liebchen,ahmad.sadeghi}@trust.tu-darmstadt.de
§University of California, Irvine. {perl,franz}@uci.edu
¶University of Duisburg-Essen. PI:EMAIL
Abstract—Memory corruption vulnerabilities not only allow
modiﬁcation of control data and injection of malicious payloads;
they also allow adversaries to reconnoiter a diversiﬁed program,
customize a payload, and ultimately bypass code randomization
defenses. In response, researchers have proposed and built various
leakage-resilient defenses against code reuse. Leakage-resilient
defenses use memory protection techniques to prevent adversaries
from directly reading code as well as pointer indirection or
encryption techniques to decouple code pointers from the ran-
domized code layout, avoiding indirect leakage. In this paper, we
show that although current code pointer protections do prevent
leakage per se, they are fundamentally unable to stop code
reuse. Speciﬁcally, we demonstrate a new class of attacks we
call address-oblivious code reuse that bypasses state-of-the-art
leakage-resilience techniques by proﬁling and reusing protected
code pointers, without leaking the code layout. We show that
an attacker can accurately identify protected code pointers of
interest and mount code-reuse attacks at the abstraction level
of pointers without requiring any knowledge of code addresses.
We analyze the prevalence of opportunities for such attacks in
popular code bases and build three real-world exploits against
Nginx and Apache to demonstrate their practicality. We analyze
recently proposed leakage resilient defenses and show that they
are vulnerable to address oblivious code reuse. Our ﬁndings
indicate that because of the prevalence of code pointers in realistic
programs and the fundamental need to expose them to “read”
operations (even indirectly), diversity defenses face a fundamental
design challenge in mitigating such attacks.
DISTRIBUTION STATEMENT A. Approved for public release: distribution
unlimited.
This material is based upon work supported by the Department of Defense
under Air Force Contract No. FA8721-05-C-0002 and/or FA8702-15-D-0001.
Any opinions, ﬁndings, conclusions or recommendations expressed in this
material are those of the author(s) and do not necessarily reﬂect the views of
the Department of Defense.
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes  is  granted  provided  that  copies  bear  this  notice  and  the  full  citation 
on  the  ﬁrst  page.  Reproduction  for  commercial  purposes  is  strictly  prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23477
I.
INTRODUCTION
Memory corruption has been a primary attack vector
against computer systems for decades [2]. Memory corruption
attacks range from conventional stack smashing techniques [44]
to more sophisticated code-reuse attacks (CRAs) such as
return-oriented programming (ROP) [50], which emerged in
response to the widespread adoption of defenses such as W⊕X
(Write⊕eXecute). Part of the appeal of memory corruption to
attackers is the ability to execute arbitrary code on a remote
target system after hijacking the control ﬂow. Despite numerous
advances, comprehensively protecting native code written in
C/C++ from ROP and other CRAs remains an open challenge.
Code-reuse defenses are either based on enforcement [1, 33,
41] or randomization [7, 23, 34, 37]. In this paper, we focus
on state-of-the-art code randomization techniques that provide
resilience against information leakage attacks and have shown
to be both efﬁcient and scalable to large codebases. We call
such techniques leakage-resilient defenses.
Preventing all types of information leakage is extremely
challenging. Direct leakage of memory content (a.k.a., memory
disclosure) [53, 56], indirect leakage of addresses from the
stack or heap [17], and side-channels [5, 9, 42, 48] are different
forms of information leakage that have been used successfully
to bypass recent code randomization defenses [17, 18]. Due to
the prevalence and threat of such information leakage attacks,
recent defenses have been based on a threat model that assumes
the attacker can read and write arbitrary memory if allowed
by the page permissions [7, 11, 15, 16].
Execute-only code memory (a.k.a. execute-no-read, XnR,
or X-only) is used by many leakage-resilient defenses [3, 11,
15, 22] to shield randomized code layouts from direct leakage.
Some defenses [3, 58, 61] relax ideal X-only code permissions
to handle legacy binaries that may embed readable data in code,
but these defenses have been shown to be lacking [54, 61]. The
most powerful leakage-resilient defenses also prevent indirect
leakage by hiding code pointer destinations, e.g., using pointer
encryption [38] or an indirection layer [15].
Goals and Contributions.
In this paper, we will consider a state-of-the-art leakage-
resilient defense that combines the strengths of all concrete,
leakage-resilient defenses [3, 11, 15, 16, 22, 38] proposed
to date. We will not consider leakage-tolerant defenses
which seek to obsolete leaked information via runtime re-
randomization [7, 23, 37]. We use Readactor–one of the
most comprehensive implementations of a leakage-resilient
code randomization defense–to demonstrate a new class of
CRAs, which we call Address-Oblivious Code Reuse (AOCR),
that can generically bypass leakage-resilient defenses without
knowledge of the code layout. The intuition behind AOCR
is that execute-only permissions apply just to code, not code
pointers (e.g., function pointers and return addresses). Code
pointers/identiﬁers must be readable for programs to function
correctly. Various execute-only defenses use indirection or
encryption to protect these code pointers, but these alternative
code pointer representations remain exploitable by adversaries.
Speciﬁcally, we demonstrate that an attacker can proﬁle this
layer of indirection in code pointers by observing the state of
the protected program remotely, and extract these indirect code
pointers. We then show that by only reusing these indirect code
pointers, an attacker can achieve malicious behavior without
explicitly requiring read access to the diversiﬁed code. We call
our attack Address-Oblivious Code Reuse because its strength
lies in the fact that it does not need to leak or otherwise learn the
address of code snippets in order to successfully exploit them.
Rather, by stitching together their indirect code pointers, the
attacker can successfully execute code snippets while remaining
oblivious to their randomized (hidden) addresses. Unlike COOP
attacks [47], our AOCR attack does not rely on the layout of
vtables, the allocations, or the use of registers. In a sense, AOCR
can be thought of as position-independent form of CRA.
To accurately proﬁle indirect code pointers in a running
process remotely, we devise a new attack technique that we
call Malicious Thread Blocking (MTB). To chain indirect
code pointers, we show a new exploitation technique against
imperative programming languages we call Malicious Loop
Redirection (MLR).
Using these techniques, we build two real-world AOCR
exploits against Nginx and one against Apache, that each
hijack the control ﬂow and execute arbitrary code. Unlike
recent attacks on some leakage-resilient techniques that focus
on particular technique-speciﬁc or implementation weaknesses
[39], these attacks generically bypass leakage-resilient tech-
niques, and are not limited to Readactor, which we solely
use for demonstration and evaluation purposes. We discuss
the generality of these attacks against other recent defenses
and show that many of them are also vulnerable to AOCR in
Section VII.
In contrast to previous attacks on the implementation of
leakage resilience [39], our AOCR attack can bypass ideal
implementations and comprehensive applications of leakage-
resilience techniques. However, we also show that enforcing
ideal and comprehensive execute-only defenses is surprisingly
difﬁcult. We call these caveats implementation challenges and
discuss two practical attack vectors in Linux systems. The ﬁrst
vector maliciously redirects Direct Memory Access (DMA)
operations that do not abide by page permissions. Unlike related
work in this domain that focuses on abusing DMA through
malicious hardware devices, we show that an attacker can trick
the system to issue malicious DMA requests on its behalf using
software-only attacks. The second vector uses Linux’s proc
ﬁlesystem to directly leak memory content even in the presence
of defenses such as GRSecurity [55]. Both these vectors can
be used to maliciously leak actual non-readable code pages,
after which conventional ROP attacks become straightforward.
In other words, if these vectors are not blocked by the defense,
the attacker can use conventional ROP attacks instead of having
to resort to AOCR.
In summary, our contributions are as follows:
• We present AOCR, a new class of CRAs that generi-
cally bypass state-of-the-art leakage-resilient defenses
by reusing indirect code pointers. Unlike existing
attacks, AOCR does not rely on the layout of vtables
or the allocation and use of registers which renders
COOP-centric defenses ineffective [16, 59].
• We demonstrate that code-reuse attacks can be con-
structed out of protected code pointers without direct
knowledge of the code layout. We do so by building
three AOCR exploits targeting Nginx and Apache.
• We present two techniques to accurately proﬁle the
indirection layer (Malicious Thread Blocking) and
chain (Malicious Loop Redirection) AOCR gadgets
that make our attacks highly practical.
• We discuss two main implementation challenges to
achieve ideal leakage resilience in modern operating
systems that further demonstrate the difﬁculty of effec-
tively and universally enforcing memory permissions.
II. THREAT MODEL
Our threat model assumes that a remote attacker uses a
memory corruption vulnerability to access arbitrary memory
and achieve remote code execution on the victim machine.
We assume W⊕X is deployed to prevent code injection and
modiﬁcation. Moreover, we assume that the software executing
on the target system is protected by a state-of-the-art leakage-
resilient randomization-based defense capable of stopping
conventional [50] and just-in-time [53] CRAs. In particular, we
assume that the target system:
1) maps code pages with execute-only permissions to
2)
3)
4)
prevent direct leakage [3, 15, 22];
hides, encrypts, or obfuscates code pointers to prevent
indirect leakage [11, 15, 38];
randomizes the code layout at any granularity up to
(and including) individual instructions [27, 45];
randomizes the entries of function tables [16] ren-
dering COOP [47] and return-into-libc attacks
cumbersome.
We assume that dynamically generated code is protected in the
same way as code compiled ahead of time since the alternative
is insecure as mentioned by Crane, et al. [15]. We do not
consider side-channel attacks arising from memory sharing
and deduplication between processes and virtual machines or
attacks exploiting weaknesses in the underlying hardware. Our
threat model is consistent with related work on leakage-resilient
randomization-based defenses against code reuse.
While strong enforcement-based and randomization-based
defenses in the literature have assumed that the adversary can
2
read and write arbitrary memory, we demonstrate that practical
attacks can in fact be mounted by a less powerful adversary.
III. ADDRESS-OBLIVIOUS CODE REUSE (AOCR) ATTACK
Current state-of-the-art randomization-based defenses [3, 4,
11, 15, 16, 22, 38] aim to prevent CRAs by limiting an attacker’s
ability to disclose the code layout, either by leaking the code
itself or by leaking code pointers. As noted in Section II,
the adversary is assumed to have arbitrary read and write
capabilities. Two primary techniques are employed to stop
these adversaries:
•
•
Execute-only permissions prevent read accesses to code
pages (existing W⊕X policies already prevent writes
to code pages). Thus, any attempts by an attacker to
directly disclose the locations and contents of code
pages will lead to a segmentation violation. Execute-
only permissions are either implemented in software
using page fault handlers [3] or with hardware-assisted
paging (e.g., Extended Page Tables) [15, 16, 29].
Code pointer indirection and encryption seeks to
prevent indirect memory disclosure by decoupling
code pointers from the code layout. Indirect memory
disclosure happens when an attacker learns about code
locations from the code pointers temporarily stored
on stack or heap. Some approaches alter the pointer
representation using fast XOR encryption [11, 14, 38]
to prevent indirect leakage. Others use indirection
mechanisms [4, 15]. For instance, Readactor [15]
replaces all observable code pointers with pointers to
trampolines. A forward trampoline is simply a direct
jump to a function stored in execute-only memory.
Because the location of the forward trampoline and
the function it jumps to are randomized independently,
attackers cannot infer the function layout by observing
the trampoline layout.
In this section, we describe a code-reuse attack that
generically circumvents leakage-resilience techniques described
above, even under the strong assumption that these techniques
are universally and ideally enforced. We show how an attacker
can indeed use indirect code pointers to launch meaningful
exploits, without requiring the knowledge of code addresses.
This is achieved by proﬁling indirect code pointers to determine
the underlying code to which they point. We demonstrate how
multiple proﬁled indirect code pointers can be used together
to launch a chained AOCR attack akin to traditional ROP, but
at the granularity of code blocks identiﬁed by indirect code
pointers.
A. Proﬁling and Malicious Thread Blocking
The goal of proﬁling is to determine the original function
F() that is invoked by an indirect code pointer icptr. Various
X-only defenses use different names for indirect code pointers.
For example, Readactor [15] calls them trampoline pointers,
while ASLR-Guard [38] calls them encrypted code locators.
We use the generic name “indirect code pointers”, but the
discussions apply to these and similar defenses.
An attacker who can identify the mapping of icptr→F can
redirect control ﬂow to F indirectly via icptr. “→” denotes
Fig. 1.
Unprotected Execution States
Proﬁling of indirect code pointers by comparing Protected and
that icprt is the pointer to the indirection layer (trampoline
or encrypted pointer) that corresponds to F.
To infer this mapping, we exploit the fact that programs
execute in a manner that inherently leaks information about
the state of execution. Knowledge about the execution state of
a program at the time of a memory disclosure enables us to
infer the icptr→F mapping from a leaked icptr.
An attacker can use her knowledge about function addresses