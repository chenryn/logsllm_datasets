platforms. We denote as strategy (cf. Figure 2), or transaction,
a path with parameters for each action (such as coin amounts,
etc.). We consider a state of a DeFi market to change whenever
an action manipulates the amount of assets within this DeFi
market. Note that we only consider the blockchain state at
block-height i after the execution of all transactions within a
block i (i.e., we do not consider intermittent block states).
B. Trader Model
We consider a computationally bounded trader (denoted by
T) which is capable of executing transactions (i.e., perform
actions) across a set of DeFi platforms. T’s cryptocurrency
assets are limited by the supply of liquidity available in
public ﬂash loan pools [53]. The trader is capable of read-
ing the blockchain contents but is not expected to observe
unconﬁrmed blockchain transactions on the network layer. We
assume that the trader is capable of placing a transaction ahead
of other DeFi transactions within a future blockchain block.
Practically, this requires the trader to pay a higher transaction
fee, as most miners appear to order transactions based on gas
price. We assume that the trader is not colluding with a miner,
while this may present an interesting avenue for future work.
We assume that the trader is operating on the blockchain
head, i.e., the most recently mined, valid block, of the re-
spective blockchain. In the case of a Proof-of-Work (PoW)
blockchain, the most recent block shall also be the one with
the most PoW (i.e., the greatest difﬁculty). For simplicity, we
ignore complications resulting from blockchain forks.
3
C. Notation
To ease the understanding of the following paragraphs, we
proceed by introducing the utilized notation.
Assets: The set C denotes the collection of cryptocurrency
assets, which the trader uses to generate trading strategies.
Actions: The set A denotes the collection of actions the trader
selects from the DeFi protocols.
Parameters: The trader T must supply parameters to execute
actions a ∈ A, e.g., the amounts of cryptocurrency assets T
sends to the corresponding DeFi platforms.
Path: A path p ∈ P is a sequence of n non-repeated actions
drawn from A. We denote the power set of all actions with
℘(A), which consists of all subsets of the action set A,
including the empty set. Given a subset K ∈ ℘(A), we denote
the permutations set of K with S(K). The collection of all
paths P can then be deﬁned using Equation 1. Note P consists
of paths of different lengths.
℘(A)
K S(K),
P = ∪
s.t. ∀p = (a1, a2, ..., an) ∈ P
ai ∈ A,∀i ∈ [1, n]
ai (cid:54)= aj,∀ai, aj ∈ A, i (cid:54)= j
Strategy: A strategy consists a path p ∈ P with n actions,
a list of parameters [x1, . . . , xn] for each action in p, and an
initial state (cf. Equation 4) of the model.
Balance function: Given a strategy with n actions, the balance
T
i (c) denotes T’s balance for cryptocurrency asset c
function B
after performing the ith action, where 0 ≤ i ≤ n and c ∈ C.
Storage function: K(a) denotes the set of smart contract
storage variable addresses an action a reads from and writes to.
These addresses are identiﬁed from the underlying blockchain
(a) to denote a subset of
runtime environment. We use K
K(a), which is only relevant to the trader T.
D. States
T
We classify the state variables into two categories, the trader
T represents the trader’s asset portfolio (cf.
and DeFi states. S
Equation 2). SDeFi is the set of all storage variables T reads
from and writes to, for all the DeFi actions in our model (cf.
Equation 3). The union S of these two categories is the overall
state of our system (cf. Equation 4). Given a strategy with n
actions, the state after performing the ith action, where 0 ≤
i ≤ n is denoted as si, with the initial state s0.
(2)
S
T
T
T
(c) : ∀c ∈ C}
(a)
= {B
SDeFi = ∪∀a∈AK
∪ SDeFi
T
S = S
T
(3)
(4)
E. Transitions
Our state transition function is F
(s ∈ S, a ∈ A, x) → S,
outputs the next state if action a with parameter x is performed
on state s by trader T. Given a strategy with n actions,
where ai and xi represents the ith action and parameter
Fig. 3: Technical design choices of DEFIPOSER. DEFIPOSER
consists of three components: 1(cid:13) a path pruning component;
2(cid:13) a parameter search component, and 3(cid:13) a strategy combi-
nation/execution component.
(1)
respectively, and si represents the state after the ith action.
Equation 5 shows the state transition process of this strategy,
while Equation 6 computes the ﬁnal state sn when each action
is sequentially applied to s0.
T
si+1 = F
T
(. . .F
(F
(si, ai+1, xi+1)
T
(s0, a1, x1), a2, x2) . . .)
sn = F
(5)
(6)
T
F. Objective
We choose an asset b ∈ C as our base cryptocurrency asset.
The objective of the trader T is to ﬁnd a strategy, such that
the balance of b (cf. Equation 7) is maximized, whereas the
portfolio balances of the trader, except for b, remain the same.
T
maximisep∈P obj(s0, p) = B
0 (b)
T
with constraints: B
i (c),∀c ∈ C \ b
G. Base cryptocurrency asset
T
n(c) = B
T
n(b) − B
(7)
To identify revenue yielding paths, we make the assumption
that the trader T operates in this work on a single base cryp-
tocurrency asset. Naturally, this can be extended to multiple
base currencies to increase potential ﬁnancial results.
H. DEFIPOSER Design Choices
Figure 3 shows the high-level design choices of the DEFI-
POSER tools we present in this paper. DEFIPOSER consists
of three components: 1(cid:13), a pruning algorithm to ﬁlter poten-
tially proﬁtable paths; 2(cid:13), a search algorithm which searches
parameters to maximize the revenue of a given path, and 3(cid:13) a
strategy combination/execution algorithm, which decides how
the found strategies are executed.
4
BlockchainStateAssets andmarkets toconsiderGenerate allpathcombinationsApplyheuristicsBuild GraphNegativecycledetectionList of PathsBuild ModelUse SMT andbinary searchLocal searchDirectly workwith contractsValidate with concreteexecution, if workingwith ModelFuzzing orotheroptimizationtechniquesA single pathif workwith modelif workwith modelStrategyFind paramsfor all pathsFind paramsfor 1 arbitrarypathPick highestrevenue pathExecuteExecuteFind theoptimal way toexecutemultiple paths.DeFiPoser-Z3DeFiPoser-Z3DeFiPoser-Z3DeFiPoser-Z3DeFiPoser-BFDeFiPoser-BFDeFiPoser-BFDeFiPoser-BFDeFiPoser-BFDeFiPoser-Z3DeFiPoser-Z3DeFiPoser-Z3DeFiPoser-BF123Generally speaking, each instantiation of the different com-
ponents bears its own advantages and disadvantages. For
instance, negative cycle detection only searches cyclic paths,
whereas pruning with heuristics can search for any path
structure. Given a simple path such as a cyclic arbitrage,
we ﬁnd that local search is faster than the SMT solver (cf.
Figure 12), but does not provide satisﬁability proofs. In the
following we present two variants of DEFIPOSER, namely
DEFIPOSER-ARB (cf. Section IV) and DEFIPOSER-SMT
(cf. Section V).
IV. APPLYING NEGATIVE CYCLE DETECTION TO DEFI
ARBITRAGE
Previous works propose negative cycle detection algorithms,
such as the Bellman-Ford-Moore algorithm, to ﬁnd arbitrage
opportunities [18]. In these algorithms, the exchange markets
are modeled as a directed weighted graph (g). Every negative
cycle in the graph then corresponds to an arbitrage opportunity.
A. Negative Cycle Detection to Detect Arbitrage
We adopt
the following notations to translate arbitrage
i,j
detection into a negative cycle detection problem.
Nodes: The set N denotes the collection of nodes. Each node
(vertex) represents a different asset (c ∈ C).
Directed edges: The set E denotes the collection of all edges.
An edge ei,j that points from asset ci to cj represents that there
exist a market where the trader T can sell cryptocurrency asset
ci to purchase cryptocurrency asset cj.
Spot price: The spot price pspot
for edge ei,j is the approx-
imated best current price a trader T ﬁnds on all DeFi AMM
markets, when selling an arbitrarily small amount (close to 0)
of a cryptocurrency asset ci to purchase cj.
ak−1−−−→ ck] consists an
Arbitrage: A path [c1
arbitrage opportunity, if pspot
k−1,k > 1.
Edge weight: To apply negative cycle detection algorithms,
we use the negative log of price wi,j = −log(pspot
i,j ) as the
weights for edge ei,j. An arbitrage opportunity exists if w1,2 +
. . . + wi−1,i  target then
revenuetotal ← revenuetotal + revenue
end
g ← buildGraph(N, E, s)
end
return revenuetotal
Function buildGraph(N, E, s ∈ S) is
# fetch the spot price for each e ∈ E
# build the graph g; where wci,cj = −log(pspot
return g
ci,cj )
end
Function hasNegativeCycle(g) is
return (Detects a negative cycle?)
end
Function getPath(cycle) is
p ∈ P connects T’s baseasset with cycle.
return p
end
Function search(p) is
# ﬁnd the parameters for path p
s’ ← state after executinng the strategy
return (revenue, s’)
end
Subtree traversal [44], etc.) and compared their relative per-
formances. A natural question is whether these cycle detection
algorithms can be directly applied to ﬁnd proﬁtable transac-
tions in DeFi.
the bigger the transaction size,
In bid-ask markets, the price does not change if the trade
volume is within the bid/ask size [17]. DeFi AMM exchanges,
however, follow a dynamic price based on the trade volume.
Intuitively,
the worse the
trading price becomes. Hence, our algorithm needs to consider
dynamic price changes and update the graph g after every
action. On a high level, a Bellman-Ford-Moore inspired algo-
rithm repeatedly performs the following steps: (i) Build the
graph g based on the spot prices from the current state s ∈ S;
(ii) Detect arbitrage cycles in the graph g (Bellman-Ford-
Moore); (iii) Build a path based on the negative cycle, and
ﬁnd the strategy (parameters for the path), ﬁnally (iv) Execute
the strategy and update the state s. Algorithm 1 presents the
details of DEFIPOSER-ARB. To ﬁnd the parameters for a
path, Algorithm 1 gradually increases the amount of base
assets into the path until there is no increase in revenue.
We present DEFIPOSER-ARB’s evaluation in Section VI.
V. DESIGN OF DEFIPOSER-SMT
In this
section, we discuss an alternative technique,
DEFIPOSER-SMT, to ﬁnd proﬁtable transactions in DeFi,
which is more general when compared to DEFIPOSER-ARB.
5
More speciﬁcally, DEFIPOSER-SMT can operate on non-
cyclic strategies, while DEFIPOSER-ARB cannot. We observe
that proﬁtable DeFi strategies do not necessarily form a
complete cycle. For example, Figure 4a shows the graph
for the economic bZx attack (cf. Section VII). The strategy
requires the trader to send Ether to edge 1 without receiving
any assets in return and to then perform an arbitrage cycle
with edge 2 and 3.
A. Choosing an SMT Solver for DEFIPOSER-SMT
To overcome the aforementioned challenges of non-existent
cycles, we chose to adopt a theorem prover for DEFIPOSER-
SMT’s (cf. Figure 1) design. The theorem prover logically
formulates what a proﬁtable strategy entails to locate concrete
proﬁtable instantiations. We perform systematic path explo-
ration to determine if the model (cf. Section III) satisﬁes
the provided requirements, similar to other model checking
systems [13], [16], [36], [43], [45], [48], [56], [57].
Our model requires the SMT solver (such as MathSat [14],
Z3 [21], or Coral [54]) to support ﬂoating-point arithmetic
because we adopt the theory of real numbers (cf. Section III).
We encode the state transition model in three major steps: (i)
Encode the initial state as a predicate; (ii) iteratively apply state
transition actions, and encode the resulting states after each
action as predicates. Then, (iii) convert the objective function
into a set of constraints to ensure that the value of the trader
portfolio increases by Z, and translate the constraints into
predicates. Note that we rely on an optimization algorithm (cf.
Algorithm 3) to ﬁnd the highest possible Z. The optimization
process requires solving the same SMT problem with different
initializations of Z (cf. Appendix C for an example).
B. Path Pruning
One bottleneck of model checking is the combinatorial
path explosion problem. We, therefore, prune the paths by
applying the following heuristics. Note that heuristics may
prune proﬁtable strategies, and DEFIPOSER-SMT is therefore
only a best-effort tool.
Heuristic 1: A proﬁtable strategy must consist of more than
one action. That is because, given an initial state S0, a strategy
with only one action will not increase the balance of the base
cryptocurrency asset while keeping the balance of all other
cryptocurrency assets unchanged.
Heuristic 2: A strategy must start with a sequence of entering
actions. An entering action is deﬁned as any action which takes
the base cryptocurrency asset as input.
Heuristic 3: A strategy must end with a sequence of exiting
actions. An exiting action is deﬁned as any action that outputs