Consider wanting to create a `` component that can use
attributes _or_ properties:
Attribute-based configuration:
      Save
Property-based configuration:
      Save
Good news is this works today. Bad news is that it requires a little non-
intuitive massaging, and could be a lot cleaner for Angular component authors.
For example, here's today's utility functions:
    // Utility functions shared among component authors.
    dynamic getDynamic(inputValue, {defaultValue, onString(String strValue)}) {
      if (inputValue == null) {
        return defaultValue;
      } else if (inputValue is String) {
        return onString(inputValue);
      } else {
        return inputValue;
      }
    }
    bool getBool(
        inputValue, {
        bool defaultValue: false,
        bool onString(String strValue)}) {
      if (inputValue is String && onString == null) {
        return _parseBool(inputValue, defaultValue);
      }
      return getDynamic(
          inputValue,
          defaultValue: defaultValue,
          onString: onString);
    }
And the property setter itself:
    // The component itself
    bool _disabled = false;
    void set disabled(value) {
      _disabled = getBool(value);
    }
## Proposal
Have an alternative/Angular framework assisted way of doing this. Maybe
annotation-based:
    @Attribute.onNull(false)
    void set disabled(bool disabled) {
      _disabled = disabled;
    }
I realize this could be done using pipes, but the following is needed:
  1. Register a pipe that may or may not be used
  2. Inject `PipeRegstry`
  3. Create a transformer from the registry
  4. Use the transformer on the property setter
This could be a lot cleaner/simpler, and is more natural with native/web
components.
(Slightly related to #2869)