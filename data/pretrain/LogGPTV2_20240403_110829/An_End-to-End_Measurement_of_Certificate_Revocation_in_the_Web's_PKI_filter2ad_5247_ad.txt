



















l/w





l/w

l/w















–





















a





a
































–
–

–












–
–
i
–












–
–
i
–












–
–

–
Table 2: Browser test results, when intermediate (Int.) and leaf certiﬁcates are either revoked or have revocation information unavailable.
 means browser passes test in all cases;  means browser fails test in all cases. Other keys include ev (browser passes only for EV
certiﬁcates), l/w (browser passes only on Linux and Windows), a (browser pops up an alert), and i (browser requests OCSP staple but
ignores the response).
Chain Length. Recall that a certiﬁcate chain starts at a
root certiﬁcate, has 0 or more intermediates, and ﬁnally con-
tains a leaf certiﬁcate. As certiﬁcate chains get longer (i.e.,
more intermediates), revocation checking becomes more ex-
pensive for the client. We therefore generate tests that con-
tain between 0 and 3 intermediate certiﬁcates (between 2
and 5 total certiﬁcates, including the root and leaf), with
separate tests where each element of the chain is revoked.
Revocation Protocol. Browsers may treat diﬀerent revo-
cation protocols diﬀerently, so we generate some certiﬁcate
chains that only contain CRL information and others that
only contain OCSP information (i.e., for each chain, all cer-
tiﬁcates contain either CRL distribution points or OCSP
responders), as well as some chains that contain both. We
also implement tests where the server is conﬁgured to per-
form OCSP Stapling if the client requests it.15,16
Extended Validation. Browsers may have special rules
for EV certiﬁcates, so we generate additional tests where the
leaf certiﬁcate contains an object identiﬁer (OID) indicating
that it is an EV certiﬁcate.17
Unavailable Revocation Information. Finally, if the
browser is unable to fetch certiﬁcate revocation informa-
tion (e.g., the OCSP responder or CRL server is down), the
browser must choose whether or not to accept the certiﬁcate
or to try and obtain revocation information using a diﬀerent
15In this case, the OCSP responder is ﬁrewalled from the client, so
the only way the client can access the revocation information is via
the stapled OCSP response.
16By default, Nginx refuses to staple an OCSP response that con-
tains the status revoked or unknown. We modiﬁed Nginx to disable
this behavior.
17We use OID 2.16.840.1.113733.1.7.23.6, an OID used by Verisign
to distinguish EV certiﬁcates.
protocol. We generate additional tests where the revocation
information is unavailable due to four diﬀerent failures: the
domain name of the revocation server does not exist, the
revocation server returns a HTTP 404 error code, the re-
vocation server does not respond, or the OCSP responder
generates a response with status unknown.
Considering all possible combinations, the result is a suite
of 244 diﬀerent tests. When running tests, we also capture
network traces to examine the SSL handshake and commu-
nication with revocation servers.
6.2 Test Suite Implementation
We implement our test suite with a script that,
for
each test, (1) generates a unique DNS name, (2) uses
OpenSSL to generate a certiﬁcate chain and CRLs, (3) con-
ﬁgures OpenSSL OCSP responders18 (if OCSP is used), and
(4) generates an Nginx server conﬁguration for the test.
Thus, each test has a dedicated DNS name, Nginx instance
to serve the certiﬁcate chain, and set of OCSP responders.
We create a web page containing JavaScript that iter-
atively tries to fetch a ﬁle from each test’s domain using
XHRs.19 If the browser determines that one of the certiﬁ-
cates has been revoked, the ﬁle fails to load and our script
gets an error callback. Thus, we can programmatically de-
termine the tests where the browser checks the revocation
status of diﬀerent certiﬁcates.
6.3 Desktop Browsers
We begin by examining the behavior of popular desktop
web browsers. For each browser/OS combination, we create
18By default, the OpenSSL OCSP responder implementation only
supports POST OCSP queries; we modiﬁed it to also support the more
commonly used GET queries.
19Our Nginx instances were conﬁgured to enable CORS.
a distinct virtual machine (VM), conﬁgured with the default
settings. Our only VM conﬁguration was to install our root
certiﬁcate.20 Unless otherwise stated, all tests were done on
Ubuntu 14.04, Windows 8.1, and OS X 10.10.2. Overall,
we tested 30 diﬀerent combinations of OS and browser; our
results are summarized in Table 2.
Chrome. Chrome uses the Mozilla NSS library [1] for SSL
connection establishment, but it uses platform-speciﬁc li-
braries for certiﬁcate validation [3]. Because Chrome aggres-
sively auto-updates (i.e., it checks for new versions every few
days), we only test with the latest version of Chrome (44.0).
On OS X, Chrome treats EV and non-EV certiﬁcates dif-
ferently. For non-EV certiﬁcates, Chrome does not check
any revocation information. For EV certiﬁcates, Chrome
checks all elements of the chain (using either CRLs or
OCSP responders). Chrome does request OCSP staples,
but Chrome does not respect OCSP staples with the sta-
tus of revoked (instead, it attempts to contact the OCSP
responder), and it incorrectly treats OCSP responses with
the unknown status as trusted. When certiﬁcate revocation
information is unavailable, Chrome does try to fetch revo-
cation information from the CRL if the OCSP responder is
not available. If revocation information is still unavailable,
Chrome only rejects the chain if the ﬁrst intermediate’s CRL
is unavailable and the leaf is an EV certiﬁcate. Otherwise,
Chrome silently accepts the certiﬁcate.
On Windows, Chrome also treats EV and non-EV cer-
tiﬁcates diﬀerently. For non-EV certiﬁcates, Chrome only
checks the ﬁrst intermediate in the chain, and only if it
only has a CRL listed (Chrome does not check any non-EV
OCSP responders). For EV certiﬁcates, Chrome checks the
revocation status of all elements of the chain, both OCSP
and CRLs. Additionally, Chrome requests OCSP staples on
Windows for all certiﬁcates. Chrome’s behavior when cer-
tiﬁcate revocation information is unavailable or when the
revocation status is unknown is the same as above, except
that it rejects the chain for non-EV certiﬁcates as well.
On Linux, we were able to import our root certiﬁcate,
but we were unable to get Chrome to use our root certiﬁ-
cate to verify CRL or OCSP signatures (i.e., we observed
that Chrome would request the same certiﬁcate revocation
information multiple times). As a result, we rely on packet
traces to measure Chrome’s behavior, and are unable to test
Chrome with unavailable revocation information or diﬀerent
OCSP response statuses. Overall, we found that Chrome’s
behavior is largely consistent with the other platforms:
it
only checks CRLs and OCSP responders for EV certiﬁcates,
and does request OCSP staples.
In addition to the distribution mechanisms analyzed in
this section, Chrome also has a built-in list of revoked cer-
tiﬁcates called the CRLSet; we explore CRLSets in more
detail in §7.
Firefox. Firefox uses Mozilla’s NSS library [1]. We tested
the most recent version of Firefox (40.0) and found it to
have the same behavior on all platforms.21 Firefox does not
check any CRLs. For OCSP, Firefox treats EV and non-
EV certiﬁcates diﬀerently: for Non-EV certiﬁcates, Firefox
only queries the OCSP responder of the leaf certiﬁcate. For
EV certiﬁcates, Firefox checks all OCSP responders. Firefox
correctly rejects OCSP responses with the unknown status,
but does not try to fetch the CRL if the OCSP responder
is not available.
Instead, if the revocation information is
not available, Firefox accepts the certiﬁcate. Firefox does
request OCSP staples.
Opera. In mid-2013, Opera re-architected its browser: up
through version 12.17, Opera used its own rendering en-
gine; for all versions afterwards, Opera uses a fork of the
Chromium project. These two versions have diﬀerent be-
havior, and we examine them separately.
On Opera 12.17, the behavior is consistent across all OSes.
Opera checks the revocation information for all certiﬁcates
in the chain if they have CRLs listed, but only the leaf
certiﬁcate if the certiﬁcates have OCSP responders listed.
If certiﬁcate revocation information is not available, Opera
accepts the certiﬁcate. Opera correctly rejects OCSP re-
sponses with the unknown status, and requests OCSP staples
on all platforms.
On Opera 31.0, the behavior is largely consistent across
all OSes: Opera checks all certiﬁcates in the chain when