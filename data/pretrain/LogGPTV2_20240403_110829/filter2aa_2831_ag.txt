The Method
63
Additonal Information and Updates: http://www.iftech.com/dcom
The Method
At last, we get to the methods. As an application programmer,
our main interest will be in this section of the code. Our single
Beep() method is defined in the line: 
STDMETHOD(Beep)(/*[in]*/ LONG duration);
STDMETHOD is an OLE macro that translates to the following: 
typedef LONG HRESULT;
#define STDMETHODCALLTYPE       __stdcall
#define STDMETHOD(method)       virtual HRESULT STD-
METHODCALLTYPE method
We could have written the definition in a more familliar C++
style as follows: 
virtual long _stdcall Beep(long lDuration);
We'll find the code for this method in the BeepObj.cpp
module. Because this COM object has only one method, the
COM object's source code is pretty sparse. All the COM logic of
the object was defined in the ATL template classes. We're left
with just the actual application code. When you are writing real
applications, most of your attention will be focused on this mod-
ule. 
STDMETHODIMP CBeepObj::Beep(long lDuration)
{
::Beep( 660, lDuration );
return S_OK;
}
Again, the function definition translates into a standard func-
tion call. 
long _stdcall CBeepObj::Beep( long lDuration )
64    Chapter 5 •
Understanding ATL-Generated Code 
The API beep routine takes two parameters: the frequency
of the beep and its duration in milliseconds. If you're working
with Windows 95, these two parameters are ignored and you get
the default beep. The scope operator "::" is important, but it's
easily forgotten. If you neglect it, the method will be calling
itself.
The _stdcall tag tells the compiler that the object uses stan-
dard windows calling conventions. By default C and C++ use the
__cdecl calling convention. These directives tell the compiler
which order it will use for placing parameters on, and removing
them from, the stack. Win32 COM uses the _stdcall attribute.
Other operating systems may not use the same calling conven-
tions. Notice that our Beep() method returns a status of S_OK.
This doesn't mean that the caller will always get a successful
return status - remember that calls to COM methods aren't like
standard C++ function calls. There is an entire COM layer
between the calling program (client) and the COM server. 
It's entirely possible that the CBeepObj::Beep() method
would return S_OK, but the connection would be lost in the
middle of a COM call. Although the function would return S_OK,
the calling client would get some sort of RPC error indicating the
failure. Even the function result has to be sent through COM
back to the client! 
In this example the COM server is running as an In-Process
server. Being a DLL, the linkage is so tight that there's very little
chance of transmission error. In future examples, where our
COM server is running on a remote computer, things will be very
different. Network errors are all-too-common, and you need to
design your applications to handle them. 
Server Registration
The COM subsystem uses the Windows registry to locate and
start all COM objects. Each COM server is responsible for self-
registering, or writing it's entries into the registry. Thankfully, this
task has been mostly automated by ATL, MIDL and the ATL wiz-
ard. One of the files created by MIDL is a registry script. This
Registry Scripts
65
Additonal Information and Updates: http://www.iftech.com/dcom
script contains the definitions required for the successful opera-
tion of our server. Here is the generated script: 
HKCR
{
    BeepObj.BeepObj.1 = s 'BeepObj Class'
    {
        CLSID = s '{861BFE30-56B9-11D1-BD65-
204C4F4F5020}'
    }
    BeepObj.BeepObj = s 'BeepObj Class'
    {
        CurVer = s 'BeepObj.BeepObj.1'
    }
    NoRemove CLSID
    {
        ForceRemove {
861BFE30-56B9-11D1-BD65-204C4F4F5020} 
= s 'BeepObj Class'
        {
            ProgID = s 'BeepObj.BeepObj.1'
            VersionIndependentProgID = 
s 'BeepObj.BeepObj'
            ForceRemove 'Programmable'
            InprocServer32 = s '%MODULE%'
            {
                val ThreadingModel = s 'Apartment'
            }
        }
    }
}
Registry Scripts
You may be familiar with .REG scripts for the registry. RGS
scripts are similar but use a completely different syntax and are
only used by ATL for object registration. The syntax allows for
simple variable substitution, as in the %MODLUE% variable.
66    Chapter 5 •
Understanding ATL-Generated Code 
These scripts are invoked by the ATL Registry Component (Reg-
istrar). This was defined with a macro in the object header:  
DECLARE_REGISTRY_RESOURCEID(IDR_BEEPOBJ)
Basically, this script is used to load registry settings when
the server calls CComModule::RegisterServer(), and to remove
them when CComModule::UnregisterServer() is called. All COM
registry keys are located in HKEY_CLASSES_ROOT. Here are the
registry keys being set:  
• BeepObj.BeepObj.1 - Current version of the class 
• BeepObj.BeepObj - Identifies the COM object by name 
• CLSID - The unique class identifier for the Object. This
key has several sub-keys. 
1.
ProgID - The programmatic identifier. 
2.
VersionIndependentProgID - Associates a ProgID
with a CLSID. 
3.
InprocServer32 - defines the server type (as a DLL).
This will be different, depending on whether this is
a In-Process, Local, or Remote server. 
4.
ThreadingModel - The COM threading model of the
object. 
5.
TypeLib - The GUID of the type library of the server.
Summary
This chapter has provided a quick tour of most of the ATL code
related to the Beep server. Do you now know everthing about
ATL? No. But you now have a number of landmarks that will
help you in navigating the code that the ATL wizard generates.
See Chapter 15 for additional details. 
S
I
X
6
Understanding 
the Client and 
Server
In the previous chapters we built simple client and server appli-
cations. The emphasis on was on getting a sample application
up-and-running as quickly as possible. That's a great place to
start. After all, building working components is ultimately what
you want to get out of this book. 
This chapter deals with some of the behind-the-scenes detail
of what is going on. We are going to make short work of these
subjects. That isn't because they aren't important, but because
this book focuses on the practical implementation of COM. It's
my experience that the theoretical parts of COM tend to obscure
its simplicity. Once you are able to create useful clients and serv-
ers, the details of COM's implementation become more useful. 
A certain amount of the theory of COM is necessary to prop-
erly use it. I've attempted to distill it into a few short but pithy
segments. 
Principles of COM
Let's start this discussion with five design principles that every-
one who uses COM should understand: 
68    Chapter 6 •
Understanding the Client and Server 
• COM is about interfaces 
• COM is language-independent. 
• COM is built around the concept of transparency 
• Interfaces are contracts between the client and server. 
• COM is a "standard", not a compiler or language. 
COM is About Interfaces
As we've said before, all COM interaction is through interfaces.
It's a point worth repeating. You won't find any shortcuts or end-
runs around this basic principle. The rationale behind interfaces
is that it is critical to isolate a component from its user (client).
Total isolation dramatically limits the amount of coupling
between the client and server. In many ways COM was mis-
named - it should have been called "i++". 
COM is Language-Independent 
Sometimes we programmers are so wrapped up in a particular
language that we begin to see every programming problem in
terms of it. I've written this book with a strong slant towards
C++, and more especially Microsoft's Visual C++. There's a rea-
son for this: you have to implement COM in some language, and
C++ is a very good choice. 
You can, however, write perfectly good COM programs in
Java or C, or even Visual Basic. This means COM methods must
be usable from many different languages. This includes lan-
guages like Visual Basic and Java that don't have pointers. The
concept of an interface is easily expressed as a pointer, but it can
be implemented without them. The most common expression of
this we're likely to see is the use of the IDispatch interface in
Visual Basic. 
One of the essential parts of the COM standard is that it
specifies how clients and servers communicate. In Visual C++,
every COM method is called with "Pascal" calling conventions.
While this isn't an absolute requirement of COM, it is a generally
observed convention. 
Principles of COM
69
Additonal Information and Updates: http://www.iftech.com/dcom
COM is Built Around the Concept of Transparency
In many cases, the COM server and client are running as differ-
ent processes. Your program normally doesn't have access to
address space on the other process. There are ways to get
around this limitation, but not if the server is running on a com-
puter elsewhere on the network. You can't even assume the
computer you're connecting to is running Windows. A client
can't directly access pointers, devices, or anything else on a
remote computer running a DCOM server. 
COM is therefore built around the concept of local/remote
transparency. What transparency means is that the client should
need to know nothing about how the server is implemented.
This enormously simplifies the task of writing client programs.
With COM, both an In-Process server and a remote server
behave exactly the same as far as the client is concerned. Of
course, there are real differences between an In-Process (DLL)
client and a server running on a remote computer, but they
aren't important to the client. 
Much of the design of COM is aimed at hiding local/remote
differences. Interfaces, for example, provide a mask that hides a
great deal of behind-the-scenes implementation. COM defines
the communication protocols and provides standard ways of
connecting to other computers. 
Interfaces are Contracts Between the Client and Server
A contract is an agreement between two or more parties to do
(or not do) some definite thing. A good contract allows both par-
ties to work independently without concern about the rules
changing. 
Even so, contracts are not perfect and they often have to be
flexible. For example, you have to check that the server supports
all the interfaces you are calling every time you connect. Once
you've found an interface, the COM contract guarantees that the
interface you want to use hasn't changed its methods or parame-
ters. If an interface is available it should always behave in a pre-
dictable way. COM guarantees this simply by declaring that
70    Chapter 6 •
Understanding the Client and Server 
Interfaces never change. If this seems like a dangerous method
of enforcement, bear the following in mind: 
COM IS A STANDARD, NOT A COMPILER OR LANGUAGE. 
Actually, COM is a model. By model, we mean an 'ideal'
standard for comparison. Unfortunately, the word model has a
number of other meanings. A standard is a set of rules every-
body agrees on. After all, even a computer language is actually
just a special type of a standard. Usually language compilers pro-
vide you with nice features such as type and syntax checking.
COM is a more loosely defined standard. It defines how clients
and servers can communicate. If everybody follows the standard,
communication will succeed. 
The C++ compiler won't do any COM syntax and type
checking for you. You have to know and follow the rules. Luck-
ily, there is a tool that checks COM rules. It is an 'interface' com-
piler called MIDL. We've mentioned MIDL before several times; it
is a compiler-like tool that generates COM-compliant code. You
don't have to use MIDL. I'm not using MIDL in the simple client
example seen in Chapter 2, mostly because it hides many impor-
tant aspects of COM. When we get to more sophisticated appli-
cations (as we will in subsequent chapters), we'll use MIDL
whenever possible. However, MIDL cannot guarantee that an
interface has the right functions. Only programmers can guaran-
tee that by following and enforcing conventions among them-
selves. 
Software Changes. Interfaces Don't
This brings up the obvious question: What happens when you
need to enhance or change an interface? There are two answers
to this question depending on where you are in the software
development cycle. 
We talk about an interface being 'published'. This doesn't
mean it has been submitted to some academic COM journal,
rather that it has been made known to other users. This may
mean a software release, or some written documentation, or
even a conversation with fellow developers. In any case, once
Activation
71
Additonal Information and Updates: http://www.iftech.com/dcom
people are using your interface, you cannot change it. Obvi-
ously, interfaces are going to need enhancement. This is accom-
plished by creating a completely new interface, and giving it a
new name. One example of this process can be seen in the inter-
face IClassFactory. When Microsoft needed to add licensing to
this interface, they created a new one called IClassFactoryEx (Ex
for extended). The extended interface is quite similar, and may
even be implemented by the same coclass. We can rest assured
that the original IClassFactory interface hasn't changed and will
continue to function normally in older code. The new interface is
something completely separate with a new name and a new
GUID. 
If you're in the midst of developing an interface and it hasn't
been published, feel free to change it. The COM police aren't
going to knock down your doors. It is incumbent on you to
ensure that both the client and server know about the changes. If
you change an interface on the server and don't update your cli-
ent, there will obviously be consequences. Once the interface
has been published, however, you need to leave it alone or
you're going to have angry users. 
Activation
The first time you successfully execute a COM client and server,
you realize there's a lot going on to create components and start
servers. When we ran the client application in the previous sec-
tion there were several pieces of hand waving, and these pieces
require some explanation if you want completely understand
what is happening. Let's look at what happened "behind the
scenes" so that it is clear that COM is doing nothing magic. 
When the client application first called the server, a rather
large collection of software components made the connection
possible. The following figure shows you the components: 
72    Chapter 6 •
Understanding the Client and Server 
There are several important components in this picture: 
• The client and server applications. 
• The COM library. 
• The Service Control Manager. 
• The Windows Registry. 
The COM library is loaded into both the client and server
modules as a DLL. The COM library contains all the "Co" API
functions, like CoInitialize(). Currently the COM library is imple-
mented in the OLE32.DLL module. 
When the client calls CoCreateInstance(), it is calling a
method in the COM library. CoCreateInstance does a number of
things, but the first is to locate the requested components of the
server in the Windows Registry. All the functionality of locating
and starting COM components is handled by a COM "manager"
application called the Service Control Manager (SCM). (in Win-
dows NT the SCM is part of the RPCSS service.) 
The SCM retrieves information about the server from the
Window registry. The registry holds all of the GUIDs for all of
the COM servers and interfaces supported by a given machine.
The registry also maps those GUIDs to specific programs and
Figure 6–1
Components involved in COM interactions
Client Program
COM Library
COM Server
1
COM Library
COM Server
2
COM Library
Registry
Service Control Manager (SCM)
Calls
CoCreateInstance()
Start
Start
More About Interfaces
73
Additonal Information and Updates: http://www.iftech.com/dcom
Services on the machine so that the COM servers can start auto-
matically when they are called. 
The Registry has entries for the different COM servers, their
classes and interfaces. From this registry information, the SCM
can start the correct server for any object requested by the client
application. The SCM works with the COM library to create COM
objects and return pointers to interfaces in objects. 
For an in-process server, starting the server is rather simple.
It involves locating and loading a DLL that contains the
requested coclass. The SCM gets the path to the DLL from the
registry, looking it up by the the GUID. For out-of-process serv-
ers, the SCM will actually start a new process for the server. For
servers on remote computers, the SCM will send requests to the
remote computer's SCM. 
Once the server is started, and the client has a pointer to the
interface, the SCM drops out of the picture. The SCM is only
responsible for the activation of the server. Once everything is
started, the client and server handle their own interaction. Like
most networking, just getting communications started is a major
task. Once communication is established, things tend to run
quite well by themselves. 
More About Interfaces
The end product of CoCreateInstance is a pointer to an interface.
For the C++ programmer, an interface pointer looks exactly like
a pointer to a C++ class. Do not be deceived: a COM interface is
not a C++ class. An interface is a binary object with a rigidly
defined internal structure. Although it looks a lot like a class, it
lives by a different set of rules. This point seems esoteric, but it is
very important. 
Because of the special condition imposed on coclasses, you
must follow these rules when you create a COM interface : 
• All Interfaces must implement methods called QueryInter-
face(), AddRef(), and Release(). In that exact order. This
fact is hidden by high level tools like ATL, but it has been
74    Chapter 6 •
Understanding the Client and Server 
happening behind the scenes because of the activities of
MIDL. These are the "Big Three" methods in all interfaces. 
• Other methods follow, starting in the 4th position. 
• Interfaces never change once they are published. 
• Interfaces are strongly typed. There can be no ambiguity
in parameters. 
• Interfaces are named I*. 
Here is how we define a simple interface with a single
method. This definition was written in straight C++. 
interface IBeep: public IUnknown
{
public:
HRESULT QueryInterface(REFIID, void**);
ULONG AddRef();
ULONG Release();
HRESULT Beep();
};
All COM interfaces are based on IUnknown. IUnknown
always has three methods, QueryInterface, AddRef, and Release.
These methods are pure virtual, which means they have no code
associated with them. We also sometimes call this a pure abstract
class. These three methods MUST be defined in our implementa-
tion of IBeep or the compiler will complain. IUnknown is
defined in several of the standard headers. The definition is as
follows: 
#define interface struct
interface IUnknown
{
public:
virtual HRESULT QueryInterface(REFIID, void**)=0;
virtual ULONG AddRef()=0;