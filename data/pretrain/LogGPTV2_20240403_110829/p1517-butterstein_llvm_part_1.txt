Precision Performance Surgery for PostgreSQL
LLVM–based Expression Compilation, Just in Time
Dennis Butterstein Torsten Grust
Universita¨tTu¨bingen,
Tu¨bingen,Germany
[ dennis.butterstein, torsten.grust ]@uni-tuebingen.de
ABSTRACT 1 SELECTl_returnflag,l_linestatus, 2
2 SUM(l_quantity)ASsum_qty,
We demonstrate how the compilation of SQL expres- 3 SUM(l_extendedprice)ASsum_base_price,
sions into machine code leads to significant query run- 4 SUM(l_extendedprice*(1-l_discount))ASsum_disc_price,
5 SUM(l_extendedprice*(1-l_discount)*(1+l_tax))ASsum_charge,
timeimprovementsinPostgreSQL9. Ourprimarygoalisto 6 AVG(l_quantity)ASavg_qty,
connectrecentresearchinquerycodegenerationwithoneof 7 AVG(l_extendedprice)ASavg_price,
the most widely deployed database engines. The approach 8 AVG(l_discount)ASavg_disc,
9 COUNT(*)AScount_order
callsonLLVMtotranslatearithmeticandfilterexpressions 10 FROMlineitem
into native x86 instructions just before SQL query execu- 11 WHEREl_shipdateHashAggregate(actualtime=32495.849..32495.852)
terpreter (invoked 29447787 times). ->SeqScanonlineitem(actualtime=0.009..6472.002rows=29447776)
Filter:(l_shipdate<=’1998-08-20’)
RowsRemovedbyFilter:552019 1 t 0
#Calls Function Totalruntime:32516.153ms
29447787 ExecProcNode
5 ExecAgg Figure 3: Query plan and breakdown of the 32516ms
29447776 advanceaggregates elapsed execution time for Q1 (EXPLAIN ANALYZE output).
235582212 ExecProject
58895550 Exe Ec xM ea ck Ee vF au ln Sc ct ai lo an rR Ve as ru Fl at ss tNoSets
E x e c E v a l C o n s t
2 float8pl greSQL’sEXPLAIN ANALYZEoutputforQ1 (Figure3)reveals
 f ·l ·o ·a tt g8 em tu al t sh p9a nt tmt ih nse h1s ee 2q nu te en rt pi fa rel esc d5a en vamo luf al tsi on nei ot fige fium eer re 2q 1)u .i or Ife ns h6 i4 e7 2t2 6imm ses b—
s l o ttr 3 e3 4 t( . i1 % o 3 t2 1 6 s, ie e F ltr t th s eis
-
235582208 advancetransitionfunction tweentimestampst andt ,PostgreSQLperformsgrouping
88343328 float8accum 0 1
and aggregation—the evaluation of the arithmetic expres-
235582212 slotgetsomeattrs
29447776 LookupHashTableEntry sions 2 requires one half of this time (39.8% of 32516ms).
176686640 ··· slotgetattr
29447777 ExecScan 2. COMPILATIONOFSQLEXPRESSIONS
29999799 ExecQual
29999794 Ex Ee xc eM ca Ek ve aF lu Cn oc nt si tonResultNoSets greF So Qr Lan iny teg riv pe rn etee rxp wr ie ls ls rio en pee a, tea dt lyqu we ary lkr tu hn et ti rm eee ft oh re ePo as nt d-
1 ExecEvalScalarVarFast invoke the same Exec··· functions in the same order. The
 d sa lt oe tl ge ett ai tm te rstamp
promiseof compilingSQLexpressionsintomachinecode
istoturnthisrepeatedruntimeeffortintoaone-timecom-
ExecProject pile time task. The present work is an exploration of how
ExecQual PostgreSQLcanbenefitifwetradeexpressioninterpretation
39.8 12.1 31.0 68.5 for compilation. Cornerstones of the approach are:
Q1 48.1 Q3 68.5 Q6 30.1 • E tha ac th isar cit oh mm pe ilt eic da inn td ofi alt se er pe ax rap tr ees fs uio nn cte ionis —se toen ina vs oka eu tn hi et
evaluationofe,PostgreSQLwillthuscallasinglefunction.
• The PostgreSQL query optimizer remains unchanged—
33.2 56.3 65.7 expressions are compiled after planning and just before
query execution starts.
64.5
Q10 Q14 40.3 Q19 34.1 • This just-in-time compilation of expressions is based on
theLLVMcompilerinfrastructure[5]whichcomesinshape
of a library that we link with the original PostgreSQL
Figure2: Percentagesofoverallexecutiontimespentinin-
code—LLVM offers high-quality code generation at low
terpreted arithmetic (ExecProject) and filter (ExecQual)
compilation times.
expression evaluation for selected TPC-H queries.
• We adopt a non-invasive approach that—outside of ex-
pression evaluation—retains PostgreSQL’s Volcano-style
pipelining query processor [3].
in the set we observe that the system needs to devote be-
• Compiled and interpreted expression evaluation coexist;
tween 32% and 70% of the query runtime to the evaluation
both can contribute to the execution of the same query.
of SQL expressions.
• Compiled code calls on built-in PostgreSQL routines to
The Interpreter is Calling. Again. The PostgreSQL access columns or convert values—this ensures compati-
family of Exec··· functions together form an interpreter bilitywithvanillaPostgreSQLandaidsrapidprototyping.
that walks a tree-shaped representation of an expression: Suchroutinescanbegraduallyreimplementedintermsof
operator nodes hold a pointer to a function that, when in- LLVM code if desired.
voked, will recursively evaluate subexpressions as well as Ouroverallgoalis toconnectrecentresearchinquerycode
the operator itself. The leaves of this tree represent literals generationwiththeinternalsofadatabasesystemthatsees
(seeExecEvalConstinTable1),rowvariables(ExecScalar- world-wide deployment.
VarFast), or column accesses (slot getattr). While this
2.1 CompilingwithHoles
styleofexpressioninterpreterispervasiveintoday’sdatabase
queryprocessors,ithaslongbeenidentifiedasCPU-intensive To provide an impression of the compilation scheme, let
and outright wasteful on modern computing and memory us focus on the treatment of conjunctions and disjunctions