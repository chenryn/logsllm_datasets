transformation suddenly makes changes to unrelated external
functions, developers will ﬁnd it hard to follow. Thus, if there
is a possibility of a tainted buffer in the external function, we
choose not to perform the transformation.
IV. EVALUATION
To evaluate the usefulness of our program transformations,
we answer the following research questions:
RQ1. Security. Are the program transformations effective
in securing systems? More precisely, do they ﬁx buffer
overﬂow vulnerabilities originating from unsafe library
functions and bad pointer operations?
RQ2. Correctness. Does a program transformation-based
technique work? Do they break the original program? Do
the program transformations scale to large programs?
RQ3. Performance. How is performance affected by the
transformations? Do the safe libraries have additional over-
head? How much overhead do the extra checks in safe data
structure introduce?
Although the two transformations are similar to refactor-
ings, we automated the process of applying the transformations
as a batch in order to answer the three questions better. We
applied the program transformations on all possible targets in
real and benchmark programs. SLR was applied on all target
unsafe functions; it replaced the unsafe functions. STR was
applied on all char pointers; it replaced the char pointers with
a safe data structure (stralloc pointers, Section III-C).
Our test corpus included benchmark programs and real
software. To answer RQ1, we automatically applied the pro-
gram transformations on benchmark programs of NIST’s SA-
MATE reference dataset (Juliet Test Suite for C/C++) [48].
These programs represent many variants of buffer overﬂow
vulnerabilities including the vulnerabilities originating from
the use of unsafe library functions and bad pointer operations.
130130130
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:01:43 UTC from IEEE Xplore.  Restrictions apply. 
We also applied the program transformations on all possible
targets on 4 open source software and demonstrated that
changes made by the program transformations did not break
the programs; this answers RQ2. In order to answer RQ3, we
ran the original program and the modiﬁed program resulting
from applying SLR and STR on all targets. This was done
for 2 of the 4 open source programs.
A. RQ1: Introduce Security Protection
1) Securing Benchmark Programs: The SAMATE bench-
mark presents security errors in design, source code, binaries,
etc. For C/C++ code, SAMATE’s Juliet
test suite version
1.2 provides 61,387 test programs for 118 different Common
Weakness Enumerations (CWE). It is the most comprehensive
benchmark available for C/C++ buffer overﬂow vulnerabilities.
TABLE III.
CWES DESCRIBING BUFFER OVERFLOWS

+.+1.
((
+1
1
1
++.



7-&,! ./!+2)0
7!*,! ./!+2)0
7.""!+4( !+0+%-!
7.""!+./!++! 
7.""!+4( !++! 
74,!)"(($!+!(-'1
(#!+).,.(-%)(
:
:
:
:
:
:
:
:





















KLOC: Lines of code / 1000; PP KLOC: Preprocessed KLOC
Table III lists 6 CWEs that describe buffer overﬂow
vulnerabilities in their benchmarks. STR was applicable in
4,487 programs with 5 CWEs; it replaced char pointers in
these programs. SLR was applicable to 1,758 programs across
CWEs 121, 122, and 242; these CWEs use unsafe library
functions that are ﬁxed by SLR.
CWE 121 consists of 1,877 ﬁles which represent stack
based buffer overﬂow. In these programs, a buffer is created
and a certain amount of memory is allocated to the buffer.
The buffer is then assigned a value that is too large for it to
hold. STR modiﬁed all the programs replacing the assignments
with functions from the stralloc library. The safe data structure
will perform bounds checking. SLR was applied on a subset
of these ﬁles that contain buffer overﬂow due to one of the
unsafe functions targeted by SLR. It transformed 1,096 ﬁles.
CWE 122 consists of 890 ﬁles which represent heap based
buffer overﬂow. Much like the programs from CWE 122, a
buffer is created and allocated a certain amount of memory.
The only difference is that in this case the memory is allocated
on the heap rather than the stack. STR made similar changes.
SLR was applicable to 644 ﬁles that contain buffer overﬂow
due to one of the unsafe functions targeted by SLR.
CWE 124 consists of 680 ﬁles representing a buffer un-
derwrite problem. In these ﬁles, a buffer is initially declared
and allocated. The program then unsafely attempts to access a
memory location before the start of the buffer. The modiﬁed
programs replace the unsafe buffer with a stralloc pointer that
prevents buffer underwrite by checking the bounds at runtime.
CWE 126 consists of 416 ﬁles with buffer overread prob-
lem. In these ﬁles, a buffer is initially declared and allocated.
The program then attempts to access a memory location
beyond the end of the allocated memory due to bad pointer
arithmetic. The modiﬁed programs replace the buffer with a
stralloc pointer which ensures that no unsafe arithmetic occurs.
CWE 127 consists of 624 ﬁles representing a buffer un-
derread problem. In these ﬁles, like those in CWE 124, the
program attempts to access a memory location before the start
of an allocated buffer. The modiﬁed programs replace the
buffer with a stralloc pointer to ensure that an unsafe memory
location is not accessed.
CWE 242 consists of 18 ﬁles representing the use of
an inherently dangerous function—gets. This is because gets
copies input from standard input without any bounds. This
allows users to easily overﬂow the buffer gets writes to. SLR
was applied on gets in each of these ﬁles to replace it with
a safer alternative that limits the number of bytes that can be
written to the buffer.
Programs in SAMATE have a good function and a bad
function. The good function uses a char buffer to perform
some string operation and prints the buffer. The bad function
attempts to do the same, but produces either a segmentation
fault or incorrect output. After applying SLR and STR, the
vulnerability was ﬁxed in bad functions in all test programs.
2) Securing Real Programs: Among the open source soft-
ware that we used to test the correctness of our transformations
(Section IV-B), LibTIFF version 3.8.2 had a reported buffer
overﬂow vulnerability with a known exploit [5]. SLR could
be applied to ﬁx the vulnerability.
The vulnerability is in the ﬁle tools/tiff2pdf.c, function
t2p_write_pdf_string, line 3671.
3664 char buffer[5];
3667 len=strlen(pdfstr);
3669 for (i=0;i<len;i++){
3670
if((pdfstr[i]&0x80) || (pdfstr[i]==127)
|| (pdfstr[i]<32)){
sprintf(buffer, "\\%.3o", pdfstr[i]);
3671
3673
}
There is a vulnerability because the condition in line
3670 will be true if a character in pdfstr[i] has an unsigned
numerical value of 128 or higher (the most signiﬁcant bit is
1). This is because of the pdfstr[i]&0x80 term. If the program
runs the sprintf call on line 3671 when the value in pdfstr[i] is
greater than 128, the value will be sign extended to an integer,
which will produce more digits than expected and overrun the
buffer. The value is signed extended to an integer because
the format string calls for an integer. This vulnerability can
exploited to cause a denial of service attack by trying to convert
a TIFF ﬁle that has UTF-8 characters in its DocumentTag to
PDF using the tiff2pdf tool.
SLR will remove the vulnerability by replacing the sprintf
with g_snprintf and adding a third parameter of sizeof(buffer)
which will allow only ﬁve bytes to be written to the buffer. This
does not ﬁx the program’s behavior when UTF-8 characters
are in a TIFF ﬁle’s DocumentTag, but it does remove the
possibility of buffer overﬂow. The program will work normally
for TIFF ﬁles that do not have an attack vector, but will fail
to generate the PDF ﬁle for the input with the attack vector.
This modiﬁes what was previously acceptable by the program
to be unacceptable now, but such changes are beneﬁcial [53].
131131131
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:01:43 UTC from IEEE Xplore.  Restrictions apply. 
B. RQ2: Correctness of Transformations
Our program transformations modify program behavior to
ﬁx a problem, but should not break normal behavior. We
tested the program transformations on 4 open source programs:
libpng-1.2.6, zlib-1.2.5, GMP-4.3.2, and LibTIFF-4.0.1. The
transformations were each applied to more than 900,000 lines
of code. In order to perform the test, we needed to preprocess
the programs. The transformations ran automatically on 1.7
million lines of preprocessed code in 645 ﬁles (Table IV).
TABLE IV.
TEST PROGRAMS

.+
.+1(

.+


















KLOC: Lines of code / 1000; PP KLOC: Preprocessed KLOC
SLR was applied on six unsafe functions used in the
programs: strcpy, strcat, sprintf, vsprintf, memcpy, and gets. There
were 317 instances of these functions. Of these 317 candidates,
259 were replaced correctly (81.7%). The other 58 candidates
were not replaced because they failed SLR’s preconditions.
There were no cases where a replacement caused a compilation
error. We also ran the test suite of the software (make test)
each time SLR was applied. All the test cases passed. Table
V summarizes the results.
TABLE V.
RUNNING SLR ON TEST PROGRAMS
(
.+
.+1(

.+



















Figure 2 shows the different kinds of unsafe functions and
the percentage of the functions that has been changed. Of the 6
target functions, gets is not shown in the ﬁgure since it was not
used in the open source software we tested. SLR mostly failed
to transform instances of memcpy in code; it only transformed
72 of 115 instances (62.6%). This is because memcpy is is not
limited to char buffers only. The goal of SLR is to replace
unsafe string (char buffer) functions.
In every case where SLR’s precondition failed, the buffer
was of pointer type. We found four different reasons:
(1) In most of the cases, the deﬁnition of a buffer reaching its
use does not contain an explicit heap allocation function
(e.g., malloc). This may happen if the buffer is allocated by
another function or is passed as a parameter from different
call sites. In such cases, using malloc_usable_size is not safe.
(2) In one case, the buffer pointer was a part of a struct that
was aliased. In fact, one other member of the struct was
aliased in this case, not the entire struct. Our alias analysis
treats a struct as an aggregate object (Section III-A).. SLR
determines that it is safe not to transform the code. Our
alias analysis can be made more precise, but that adds to
l
d
e
c
a
p
e
R
%
8/8
(100%)
150/153
(98.0%)