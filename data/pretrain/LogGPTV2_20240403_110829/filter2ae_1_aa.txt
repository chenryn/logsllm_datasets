**作者: f-undefined团队 v1n3gar  
原文链接：**
**知识点** ：
（1）使用 `msg_msg` 构造任意写来篡改 `modprobe_path`， **通过 FUSE 来处理页错误**
（克服5.11版本之后用户没有userfaultfd权限的问题，肯定有一大波CTF题将要效仿）。
（2）由于漏洞对象位于 `8-page`，已经不能用常规的堆喷（slub allocator）来利用了，得利用 **页喷射** （buddy
system），作者分析了伙伴系统的源码，可以学习页喷知识（主要采用 `ring_buffer` 进行页喷和页风水，值得学习）。某种程度上来说本漏洞是一种
`cross-cache overflow`，从一个页溢出覆盖到下一个页上的cache（因为页上可以含有cache也可以是单纯的页）。
（3）采用新的弹性对象来泄露信息，也即
**`user_key_payload`弹性对象**，由于长度变量和数据在一起，所以不担心溢出时覆盖到指针（限制是只能分配最多200个最长20000字节）。
**影响版本** ：Linux-v5.17-rc8 以前，v5.17-rc8已修补。
**测试版本** ：Linux-v5.16.14 [exploit及测试环境下载地址](https://github.com/bsauce/kernel-exploit-factory)
**编译选项** ：所有和 `INET6` / `TUNNEL` / `XFRM` / `CONFIG_NET_KEY` /
`CONFIG_NF_SOCKET_IPV6` 相关的选项都勾上y，特别是以下选项。
    CONFIG_XFRM_ESP=y
    CONFIG_INET_ESP=y
    CONFIG_INET_ESP_OFFLOAD=y
    CONFIG_INET6_ESP=y
    CONFIG_INET6_ESP_OFFLOAD=y
在编译时将`.config`中的`CONFIG_E1000`和`CONFIG_E1000E`，变更为=y。[参考](https://blog.csdn.net/qq_16097611/article/details/104965045)
    $ wget https://mirrors.tuna.tsinghua.edu.cn/kernel/v5.x/linux-5.16.14.tar.xz
    $ tar -xvf linux-5.16.14.tar.xz
    # KASAN: 设置 make menuconfig 设置"Kernel hacking" ->"Memory Debugging" -> "KASan: runtime memory debugger"。
    $ make -j32
    $ make all
    $ make modules
    # 编译出的bzImage目录：/arch/x86/boot/bzImage。
**漏洞描述** ：位于目录 `net/ipv4/esp4.c` 和 `net/ipv6/esp6.c` 中的 IPsec ESP
transformation
代码存在堆溢出。漏洞自2017年引入（[cac2661c53f3](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=cac2661c53f35cbe651bef9b07026a5a05ab8ce0)
/
[03e2a30f6a27](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=03e2a30f6a27e2f3e5283b777f6ddd146b38c738)）。
本漏洞能够在最新的 Ubuntu 21.10 上提权，来自于pwn2own 2022，能够影响 Ubuntu / Fedora / Debian。首次进行
page-level heap fengshui 和 cross-cache overflow（环境：4G内存，2 CPU）。
**补丁**
：[patch](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=ebe48d368e97d007bfeb76fcb065d6cfc4c96645)
补丁引入 `ESP_SKB_FRAG_MAXSIZE`，大小为 32768 ，也就是 8-page，如果 `allocsize` 大于8页，则跳转到
`COW`。
    diff --git a/include/net/esp.h b/include/net/esp.h
    index 9c5637d41d951..90cd02ff77ef6 100644
    --- a/include/net/esp.h
    +++ b/include/net/esp.h
    @@ -4,6 +4,8 @@
     #include 
    +#define ESP_SKB_FRAG_MAXSIZE (PAGE_SIZE tailen;
    +   unsigned int allocsz;
        /* this is non-NULL only with TCP/UDP Encapsulation */
        if (x->encap) {
    @@ -455,6 +456,10 @@ int esp_output_head(struct xfrm_state *x, struct sk_buff *skb, struct esp_info *
                return err;
        }
    +   allocsz = ALIGN(skb->data_len + tailen, L1_CACHE_BYTES);
    +   if (allocsz > ESP_SKB_FRAG_MAXSIZE)
    +       goto cow;
    +
        if (!skb_cloned(skb)) {
            if (tailen tailen;
    +   unsigned int allocsz;
        if (x->encap) {
            int err = esp6_output_encap(x, skb, esp);
    @@ -490,6 +491,10 @@ int esp6_output_head(struct xfrm_state *x, struct sk_buff *skb, struct esp_info
                return err;
        }
    +   allocsz = ALIGN(skb->data_len + tailen, L1_CACHE_BYTES);
    +   if (allocsz > ESP_SKB_FRAG_MAXSIZE)
    +       goto cow;
    +
        if (!skb_cloned(skb)) {
            if (tailen next`（尝试9次）：堆上布局3个相邻的对象—— `vul object` -> `user_key_payload`
-> `msg_msg`。
  * （3-1）耗尽 order-3 的freelist，使得堆排布时从 order-4 取页，保证8-page 相邻：喷射 0x2000 个大小为 0x8000 的 `ring_buffer`；
  * （3-2）耗尽 kmalloc-4k，使得分配 `user_key_payload` 时从 buddy system 取页（order-3）：调用 `setxattr()` 分配 `0x50*8` 个 kmalloc-4k；
  * （3-3） **分配3个连续的 8-page 占位对象** ：采用 `ring_buffer` 对象；
  * （3-4） **释放第2个占位对象** ，分配1个8-page slab（分配1个 `user_key_payload` 和7个 `setxattr()`）；
  * （3-5）喷射 100 个 `seq_operations` 对象，便于之后泄露内核基址；
  * （3-6） **释放第3个占位对象** ，分配1个8-page slab（喷射16个 `msg_msg`，位于 kmalloc-4k / kmalloc-32）；
  * （3-7） **释放第1个占位对象** ，分配漏洞对象，触发越界写来修改 `user_key_payload->datalen`；
  * （3-8）通过 `user_key_payload` 进行越界读，泄露 `msg_msg->next`；
（4）泄露内核基址（尝试50次）：堆上布局2个相邻的对象——`vul object` -> `msg_msg`。
  * （4-1）耗尽 kmalloc-4k，使得分配 `msg_msg` 时从 buddy system 取页（order-3）：堆喷0x100个大小为0x1000 的 `ring_buffer`；
  * （4-2）耗尽 order-3 的freelist，使得堆排布时从 order-4 取页，保证8-page 相邻：喷射 0x100 个大小为 0x8000 大小的 `ring_buffer`；
  * （4-3） **分配8*2个连续的 8-page 占位对象（占位对象）** ：采用 `ring_buffer` 对象；
  * （4-4） **释放第2个占位对象** ，分配1个8-page slab （分配 9 个 `msg_msg`，位于 kmalloc-4k / kmalloc-32）；
  * （4-5） **释放第1个占位对象** ，分配漏洞对象，触发越界写来修改 `msg_msg->m_ts` & `msg_msg->next` （改成上一步泄露的 `msg_msg->next`）；
  * （4-6）通过 `msg_msg` 进行越界读，泄露 `seq_operations->start / stop / next` 指针；
（5）篡改 `modprobe_path` 提权（尝试50次）：堆上布局2个相邻的对象——`vul object` -> `msg_msg`。 \-（5-1）设置 FUSE，页错误处理地址为 `fuse_evil_addr = 0x1339000`（FUSE的 `evil_read_pause()`
函数在处理页错误时，会往该地址写入字符串 `/tmp/get_rooot\x00`，也即提权程序）； \- （5-2）耗尽 order-3
的freelist，使得堆排布时从 order-4 取页，保证8-page 相邻：喷射 0x100 个大小为 0x8000 大小的
`ring_buffer`； \- （5-3） **分配2个连续的 8-page 占位对象（占位对象）** ：采用 `ring_buffer` 对象； \-（5-4） **释放第2个占位对象** ，分配1个8-page slab （分配 9 个 `msg_msg`，位于 kmalloc-4k /
kmalloc-32）（注意，用户message地址设置为 `fuse_evil_addr-8 ==
0x1339000-8`，以便在内核拷贝消息时触发页错误而暂停）； \- （5-5） **释放第1个占位对象** ，分配漏洞对象，触发越界写来修改
`msg_msg->next`（改成 `modprobe_path-8`）； \- （5-6）通过写pipe来通知 FUSE 的
`evil_read_pause()` 函数，结束页错误处理，使得 `msg_msg` 消息完成拷贝，篡改 `modprobe_path`； \-（5-7）执行错误binary文件触发modprobe，完成提权。
* * *
## 1\. 漏洞分析
**简介** ：漏洞来自 Linux esp6 crypto 模块，接收缓冲区是 8-page，但发送者可以发送大于 8-page 的数据，导致页溢出。
### 1-1 漏洞对象创建
**漏洞对象创建**
：[esp6_output_head()](https://elixir.bootlin.com/linux/v5.16.14/source/net/ipv6/esp6.c#L513)
负责创建 receive buffer，`allocsize` 变量不重要，因为
[skb_page_frag_refill()](https://elixir.bootlin.com/linux/v5.16.14/source/net/core/sock.c#L2705)
会默认分配 8-page 内存（order-3 pages）。
**调用栈**
：[sendmsg()](https://elixir.bootlin.com/linux/v5.16.14/source/net/socket.c#L2504)
->
[__sys_sendmsg()](https://elixir.bootlin.com/linux/v5.16.14/source/net/socket.c#L2495)
->
[___sys_sendmsg()](https://elixir.bootlin.com/linux/v5.16.14/source/net/socket.c#L2466)
->
[____sys_sendmsg()](https://elixir.bootlin.com/linux/v5.16.14/source/net/socket.c#L2412)
->
[sock_sendmsg()](https://elixir.bootlin.com/linux/v5.16.14/source/net/socket.c#L724)
->
[sock_sendmsg_nosec()](https://elixir.bootlin.com/linux/v5.16.14/source/net/socket.c#L704)
->
[rawv6_sendmsg()](https://elixir.bootlin.com/linux/v5.16.14/source/net/ipv6/raw.c#L956)
->
[rawv6_push_pending_frames()](https://elixir.bootlin.com/linux/v5.16.14/source/net/ipv6/raw.c#L613)
->
[ip6_push_pending_frames()](https://elixir.bootlin.com/linux/v5.16.14/source/net/ipv6/ip6_output.c#L1935)
->
[ip6_send_skb()](https://elixir.bootlin.com/linux/v5.16.14/source/net/ipv6/ip6_output.c#L1915)
->
[ip6_local_out()](https://elixir.bootlin.com/linux/v5.16.14/source/net/ipv6/output_core.c#L161)
->
[dst_output()](https://elixir.bootlin.com/linux/v5.16.14/source/include/net/dst.h#L450)
->
[xfrm6_output()](https://elixir.bootlin.com/linux/v5.16.14/source/net/ipv6/xfrm6_output.c#L94)
->
[NF_HOOK_COND()](https://elixir.bootlin.com/linux/v5.16.14/source/include/linux/netfilter.h#L287)
->
[__xfrm6_output()](https://elixir.bootlin.com/linux/v5.16.14/source/net/ipv6/xfrm6_output.c#L87)
-> [xfrm_output()]() ->
[xfrm_output2()](https://elixir.bootlin.com/linux/v5.16.14/source/net/xfrm/xfrm_output.c#L614)
->
[xfrm_output_resume()](https://elixir.bootlin.com/linux/v5.16.14/source/net/xfrm/xfrm_output.c#L595)
->