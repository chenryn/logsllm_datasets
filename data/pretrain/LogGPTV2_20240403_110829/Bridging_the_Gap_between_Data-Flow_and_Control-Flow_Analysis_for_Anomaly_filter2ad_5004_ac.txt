b
m
u
N
minsup =     0
minsup =   10
minsup =   50
minsup = 100
0.2
0.4
0.6
minconf
0.8
1.0
700
600
400
200
0
0
s
t
n
e
m
e
t
a
t
S
f
o
r
e
b
m
u
N
minsup =     0
minsup =   10
minsup =   50
minsup = 100
0.2
0.4
0.6
minconf
0.8
1.0
106
105
104
103
102
101
0
0
s
t
n
e
m
e
t
a
t
S
f
o
r
e
b
m
u
N
minsup =     0
minsup =   10
minsup =   50
minsup = 100
0.2
0.6
0.4
minconf
0.8
1.0
(a) Rule Set A
(b) Rule Set B
(c) Rule Set C
Figure 2. Number of rules learned
From the 4 settings of minsup, we can see that the set-
ting of minsup is effective in ﬁltering out statements that
have less coverage in the training data, i.e., when minsup in-
creases, the number of statements drops signiﬁcantly. When
looking at different settings of minconf, we realize that
the setting does not have a signiﬁcant effect except when
minsup = 0. In particular, when both minsup and minconf
are 0, our system learns a large number of statements which
are not useful (their conﬁdence level is 0). However, the
relatively stable results with different settings of minconf
when minsup (cid:3)= 0 suggest that many of the statements
learned by our system with nonzero support have conﬁ-
dence level of 1, which are very reliable rules.
4.1.3 Rule examples
Here we show some examples of the statements found.
397397
Rule Set A The following is an example of statements
found in Rule Set A with a support of 8, 544 and conﬁdence
level of 1.0, which says that within the particular pattern
P [7], the second argument of the 5th system call must be
equal to the return value of the 2nd system call.
P [7].S[2].A[0] = P [7].S[5].A[2]
The details of the pattern P [7] is shown as below:
P[7]: stat64 open socketcall writev sendfile64
socketcall read write close
By analyzing the system calls in P [7], we ﬁnd that this
system call pattern is probably involved in a ﬁle sending
process. After examining the system call attributes, we ﬁnd
that the second argument of system call sendfile64 is
deﬁned as an int, while the system call open returns a
ﬁle descriptor, despite that it is deﬁned as a long.
Rule Set B We ﬁnd another statement about pattern N o.7
in Rule Set B as follows with support of 8, 543 and conﬁ-
dence level of 1.0.
Occm
P [7].S[7].A[1] = Occm−1
P [7].S[7].A[1]
This statement says that when pattern P [7] is used repeat-
edly, the 1st argument of read (the 7th system call) must
not change.
Rule Set C We get the following statement in Rule Set C
P [88].S[2].A[1] dist=0= P [1].S[4].A[1]
with support of 230 and conﬁdence level of 1.0, where
dist = 0 means that pattern P [88] follows pattern P [1] im-
mediately.
System calls in pattern P [88] and pattern P [1] are pre-
sented in the expressions below respectively.
P[88]: poll sendfile64 read write close
P[1] : stat64 open socketcall writev sendfile64
socketcall
This statement says that when P [88] follows P [1] imme-
diately, the 1st argument of the system call sendfile64
in P [88] is the same as the 1st argument of the system call
writev in P [1].
The above examples show that our system is able to learn
important and meaningful rules that govern the system call
arguments and return values. However, we also ﬁnd some
less useful statements, e.g.,
Occm
P [7].S[9].A[0] = Occm−1
P [7].S[9].A[0]
in Rule Set B. The fact is, system call close (the 9th sys-
tem call in pattern P [7]) always returns a value 0 when it
398398
succeeds. This statement is less useful because it does not
express a unique feature of the system calls made by the ap-
plication being monitored. However, it is still a valid and
good statement in the sense that it makes mimicry attacks
more difﬁcult because the attackers need to make sure that
this particular system call returns the right value to avoid
being detected. In contrast, attackers are free to make null
system calls in a mimicry attack [8, 18].
4.2 Real attacks detection
To show the effectiveness of our approach in attack de-
tection, in this subsection we give two examples to demon-
strate the capability of our system of detecting real attacks.
We then show in Section 4.3 that some relations learned by
our system is useful in enhancing the accuracy of the detec-
tion system, which cannot be learned with prior approaches.
For each of the attacks shown in this subsection, we trained
the programs involved with benign input to learn relations
in the three Rule Sets, and then ran the exploits and checked
for the violation of the rules learned.
4.2.1 Attacks on ﬁle descriptors
The fact that programs may make assumptions about the
meanings of ﬁle descriptors, e.g., the descriptor 2 corre-
sponds to stderr, may render the programs vulnerable
to some simple exploits. Chen [3] described in detail a
program with such a vulnerability which contains the code
fragment as shown in Figure 3.
fd = open("/etc/passwd");
str = read_from_user();
fprintf(stderr, "The user entered: \n%s\n", str);
Figure 3. The stderr attack
If the attacker closes stderr before executing this pro-
gram, an open of “/etc/passwd” will return the ﬁle descrip-
tor to both fd and stderr. Subsequently, fprintf will
write user input data into the password ﬁle.
Our system is capable of recognizing the frequently used
system call pattern open, read, write and generat-
ing a rule saying that the return value of system call open
must be not equal to the ﬁrst argument of system call
write. The above mentioned attack was detected by our
system as it violated the rule learned.
4.2.2 Directory traversal attacks
A buffer overﬂow in the GHTTPD web server may be used
by the attacker to evade path checking and execute a mali-
cious program [4]. Consider the code fragment in function
serverconnection as presented in Figure 4.
if (strstr(ptr, "/..")
return ...
Log(...); \\
if (strstr(ptr, "cgi-bin"))
//reject request
execve(ptr, ...);
Figure 4. Directory traversal
This function only checks the presence of “cgi-bin” in
the URL string pointed by the variable ptr before the
CGI request is processed. By exploiting a buffer overﬂow
vulnerability in function Log, attackers can change ptr
to point to a string /cgi-bin/../../../../bin/sh
and successfully gain access to a shell.
Training this program in our system, the repeating ap-
pearances of the system call execve lead to a rule in Rule
Set B saying that the ﬁrst argument of execve must have
the common preﬁx of “/usr/local/ghttpd/cgi-bin/” across its
repeated occurrences. Though our rule was learned by ob-
serving the repeating occurrences of one system call pattern,
it describes the same observation as a unary relation that is
covered by another data-ﬂow analysis technique monitoring
system call arguments [2].
4.3 New rules learned
As shown in Section 1 and Section 2, our technique is
able to leverage results from control-ﬂow analysis to learn
rules that cannot be learned by prior techniques. In this sub-
section, we show a real example of such rules learned in our
trace-driven evaluation.
Our system recognized two patterns P [16] and P [7] from
the trace-evaluation of the Apache2 web server. Both pat-
terns contain system call read followed by system call
write as shown in the following expressions.
P[16]: read poll write close
P[7] : stat64 open socketcall writev sendfile64
socketcall read write close
A rule learned in pattern P [16] shows that system call
read and write share the common ﬁle descriptor in their
arguments. However, this rule is not valid in pattern P [7].
Instead, we learned a different rule for the system calls
read and write in pattern P [7], which says that the string
pointer arguments of these two system calls must point to
strings of the same content.
This is a good example in which control-ﬂow informa-
tion helps learn an accurate and useful rule. Being unable
to recognize the patterns from a system call sequence, prior
approach in data-ﬂow analysis would fail since neither of
the two relations has high probability of being valid in all
occurrences of the system calls read and write in the en-
tire sequence. On the other hand, our technique makes use
of the control-ﬂow information to differentiate the system
calls in two different patterns, which results in two rules that
accurately describe relations in two patterns respectively.
4.4 False alarm rates
To evaluate the false alarm rate of our system simulating
a university production web server, we ﬁrst used 36 hours of
web logs with 178, 043 benign http requests to learn rules
in the three Rule Sets. After that, we consumed 60 hours of
logs with 253, 418 benign requests and recorded the false
alarms generated. Results are presented in Table 4.
Testing
Training
# of syscalls # of syscalls
1.70 × 106
2.89 × 106
False alarm rates in each Rule Set
1.37 × 10−5
9.80 × 10−5
C
B
A
0
Table 4. Evaluation of a web server
We observe that the false alarm rates are of the order of
10−5. In particular, we did not ﬁnd any false alarms for rela-
tions in Rule Set A, and only found a small number of false
alarms in Rule Set B and C. Considering the fact that some
events might actually break the rules respectively from Rule
Set B and Rule Set C simultaneously but we were double
counting the violations, the total false alarm rate would be a
smaller number than the sum of the individual records. Our
system experiences low false alarm rates.
4.5 Speed of convergence
Fig. 5 shows the speed of convergence for each Rule Set
in our evaluation with maxdist = 10, minsup = 100, and
minconf = 1.0.
100
80
60
40
20
0
s
t
n
e
m
e
t
a
t
S
f
o
r
e
b
m
u
N
26
0
0
s
t
n
e
m
e
t
a
t
S
f
o
r
e
b
m