首先检查 文件是否存在 如果存在 则读取内容 否则就跳过 但是不
Shell /etc/profile , , , ,
会报错
。
然后检查主目录 登录目录 中是否存在 文件 如果存在 就读取内容 否则就
( ) .profile , , ,
跳过 也不会报错
, 。
读取完上面两个文件 就会出现 命令提示符
,Shell $ 。
$
在这个提示符后就可以输入命令并调用相应的程序了 注意 上面是 的
。 : BourneShell
初始化过程 和 在初始化过程中还会检查其他文件
,bash ksh 。
3.6.1 .profile文件
文件包含了通用的 初始化信息 由 管理员维护 一般用户无权
/etc/profile Shell , Linux ,
修改 但是用户可以修改主目录下的 文件 增加一些特定初始化信息 包括 设置
。 .profile , , :
默认终端类型和外观样式 设置 命令查找路径 即 变量 设置命令提示符等
; Shell , PATH ; 。
3.6.2 设置终端类型
一般情况下 用户使用的终端是由 或 程序设置的 可能会不符合用户的习
, login getty ,
惯 对于没有使用过的终端 可能会比较生疏 不习惯命令的输出样式 交互起来略显吃力
。 , , , 。
所以 一般用户会将终端设置成下面的类型
, 。
$TERM=vt100
$
是 的缩写 是被绝大多数 系统所支持的一种
vt100 virtualterminate100 。vt100 Linux
虚拟终端规范 常用的还有 等
, ansi、xterm 。
3.6.3 设置PATH变量
在命令提示符下输入一个命令时 会根据 变量来查找该命令对应的程序
,Shell PATH ,
变量指明了这些程序所在的路径
PATH 。
一般情况下 变量的设置如下
,PATH :
48
$PATH= bin usr bin
$
多个路径使用冒号 分隔 如果用户输入的命令在 设置的路径下没有找到
(:) 。 PATH ,
就会报错 例如
, :
$hello
hello not found
$
3.6.4 PS1和PS2变量
变量用来保存命令提示符 可以随意修改 如果用户不习惯使用 作为提示符 也
PS1 , , $ ,
可以改成其他字符 变量被修改后 提示符会立即改变
。PS1 , 。
例如 把命令提示符设置成' '
, => 。
$PS1='= '
=
也可以将提示信息设置成当前目录 例如
, :
= PS1=" u h w $"
\@\ \ \
root ip-72-167-112-17 var www tutorialspoint Linux $
@
命令提示信息包含了用户名 主机名和当前目录 表 中的转义字符可以被用作
、 。 3-5
的参数 以丰富命令提示符信息
PS1 , 。
表3-5 转义字符
转 义 字 符 描 述
当前时间 格式为
\t , HH:MM:SS
当前日期 格式为
\d , WeekdayMonthDate
换行
\n
当前所在目录
\W
当前所在目录的完整路径
\w
用户名
\u
主机名 地址
\h (IP )
输入的命令的个数 每输入一个新的命令就会加
# , 1
如果是超级用户 提示符为 否则为
\$ root, #, $
用户可以在每次登录的时候修改提示符 也可以在 文件中增加 变量 这样
, .profile PS1 ,
每次登录时会自动修改提示符 如果用户输入的命令不完整 则 会使用第二提示符来
。 , Shell
等待用户完成命令的输入 默认的第二命令提示符是 保存在 变量中 可以随意修改
。 >, PS2 , 。
下面的例子使用默认的第二命令提示符
。
$ echo "this is a
test"
49
this is a
test
$
下面的例子通过 变量改变提示符
PS2 。
$ PS2="secondary prompt-"
$ echo "this is a
secondary prompt- test"
this is a
test
$
3.6.5 常用环境变量
表 列出了部分重要的环境变量 这些变量可以通过 节提到的方式修改
3-6 , 3.6.4 。
表3-6 部分重要的环境变量
变 量 描 述
用来设置将图形显示到何处
DISPLAY
当前用户的主目录
HOME
内部域分隔符
IFS
可以让系统支持多语言 例如 将 设为 则可以支持 巴西 葡萄牙语
LANG LANG 。 , LANG pt_BR, ( )
指定 命令的路径
PATH Shell
当前所在目录 即 命令查到的目录
PWD , cd
生成一个 范围内的随机数
RANDOM 0~32767
设置终端类型
TERM
时区 可以是 大西洋标准时间 或 格林尼治标准时间 等
TZ 。 AST( ) GMT( )
以数字形式表示的当前用户 启动时会被初始化
UID ID,Shell
下面的例子中使用了部分环境变量
。
$ echo $HOME
root
$ echo $DISPLAY
$ echo $TERM
xterm
$ echo $PATH
usr local bin bin usr bin home amrood bin usr local bin
$
3.7 Linux yum 命令
是一个在 和 及 中的
Linuxyum(yellowdogupdater,modified) Fedora RedHat SUSE
前端软件包管理器
Shell 。
50
基于 包管理 能够从指定的服务器自动下载 包并且安装 可以
Linuxyum RPM , RPM ,
自动处理依赖性关系 并且一次安装所有依赖的软件包 无须重复下载 安装
, , 、 。
提供了查找 安装 删除某一个或一组甚至全部软件包的命令 而且命令
Linuxyum 、 、 ,
简洁
。
语法如下所示
Linuxyum 。
yum options command package
其中 可选 选项包括 帮助 当安装过程提示选择全部为 不显
,options: , -h( )、-y( yes)、-q(
示安装的过程 要进行的操作 安装的包名
)。command: 。package: 。
常用命令如下所述
Linuxyum 。
列出所有可更新的软件清单命令
(1) :yumcheck-update。
更新所有软件命令
(2) :yumupdate。
仅安装指定的软件命令
(3) :yuminstall package_name 。
仅更新指定的软件命令
(4) :yumupdate package_name 。
列出所有可安装的软件清单命令
(5) :yumlist。
删除软件包命令
(6) :yumremove package_name 。
查找软件包命令
(7) :yumsearch keyword 。
清除缓存命令包括
(8) :
清除缓存目录下的软件包
•yumcleanpackages——— 。
清除缓存目录下的
•yumcleanheaders——— headers。
清除缓存目录下旧的
•yumcleanoldheaders——— headers。
清除
•yumclean,yumcleanall(=yumcleanpackages;yumcleanoldheaders)———
缓存目录下的软件包及旧的
headers。
3.8 Linux apt命令
是一个在 和 中的 前端软件
Linuxapt(advancedpackagingtool) Debian Ubuntu Shell
包管理器
。
命令提供了查找 安装 升级 删除某一个或一组甚至全部软件包的命令 而
Linuxapt 、 、 、 ,
且命令十分简洁
。
命令执行需要超级管理员权限 是 系统管理指令
Linuxapt (root)。Linuxsudo Linux ,
是允许普通用户执行一些或者全部 命令的一个工具 如 关闭系统 重启
root , halt( )、reboot(
系统 变更使用者身份 等 这样不仅减少了 用户的登录和管理时间 也提高了安
)、su( ) 。 root ,
全性
。
语法如下
Linuxapt :
apt options command package
参数设置和 相同 常用命令如下所述
yum 。Linuxapt 。
列出所有可更新的软件清单
(1) :sudoaptupdate。
51
升级软件包
(2) :sudoaptupgrade。
列出可更新的软件包及版本信息
(3) :aptlist-upgradeable。
升级软件包 升级前先删除需要更新的软件包
(4) , :sudoaptfull-upgrade。
安装指定的软件
(5) :sudoaptinstall package_name 。
安装多个软件包
(6) :sudoaptinstall package_1 package_2 package_3 。
更新指定的软件
(7) :sudoaptupdate package_name 。
显示软件包具体信息 例如 版本号 安装大小 依赖关系等
(8) ( , 、 、 ):sudoaptshow package_
name 。
删除软件包
(9) :sudoaptremove package_name 。
清理不再使用的依赖和库文件
(10) :sudoaptautoremove。
移除软件包及配置文件
(11) :sudoaptpurge package_name 。
查找软件包
(12) :sudoaptsearch keyword 。
列出所有已安装的软件包
(13) :aptlist-installed。
列出所有已安装的软件包的版本信息
(14) :aptlist--all-versions。
3.9 本章小结
本章是为后续嵌入式 开发起到铺垫作用的章节 由于 开放源代码 易于
Linux 。 Linux 、
移植 资源丰富 免费等优点 使得它在服务器和 桌面之外的嵌入式领域越来越流行
、 、 , PC 。
更重要的一点 由于嵌入式 与 源于同一套内核代码 只是裁剪的程度不一
, Linux PCLinux ,
样 这使得很多为 开发的软件再次编译之后 可以直接在嵌入式设备上运行 本章介绍
, PC , 。
了 的很多基础命令和组成单元 但是 本身是代码数量在千万行之上的庞大操
Linux , Linux
作系统 资源非常丰富 本章只着重介绍了在嵌入式 领域中会用到的 相关
, , Linux Linux
知识
。
习题
查阅相关资料 进一步了解 的主要发行版本之间的异同
1. , Linux 。
尝试下载典型 发行版本并使用常用的 命令
2. Linux Linux 。
尝试阅读下载的 发行版本的环境变量
3. Linux 。