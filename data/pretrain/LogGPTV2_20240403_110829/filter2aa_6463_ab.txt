.SH "DESCRIPTION 描述"
.IX Header "DESCRIPTION"
Perl 一直是有一个编译器的：你的源文件会被编译成一种内部格式（一种语法分析树），并且在运行前还会被优化。从5.005版本起，Perl 在发行时就带有一个模块可以检查优化过的语法分析树（该模块称作B模块(\f(CW\*(C`B\*(C'\fR)），它被用来编写许多有用的功能，包括一个可以将你的Perl转成C源代码的模块，这样再编译后就可以得到一个可执行的文件了。
.PP
\f(CW\*(C`B\*(C'\fR 模块提供了访问语法分析树的方法, 其它的一些模块（“后端”）则对这个树进行操作。一些把它（语法树）以字节码的形式输出，还有以C源代码形式的输出的，后者以半可读的文本形式输出的。另一些遍历整棵语法树以建立一个关于所使用的子程序，格式及变量的交叉引用表。还有另外一些检查你的代码，看看有没有模棱两可的构造。另一些则重新将语法树导出成Perl代码，可以起代码美化或是消除混乱的代码的作用。
.PP
因为 \&\f(CW\*(C`B\*(C'\fR 模块的最初目的是提供一种能将Perl程序转为对应C代码的方法，接着就能把它变成可执行文件了，所以 \&\f(CW\*(C`B\*(C'\fR 模块和它的那些后端模块就被认为是“编译器”了，即使它们实际上没有做任何编译方面的事。这个编译器的各个部分精确的说应该是个“翻译器”，或者一个“检视器”，但是用Perl的人们想要一个“编译选项”而不是一个叫做“检视器”的小玩艺。你能怎么办呢？
.PP
这篇文章的主要内容是讲Perl编译器的用法：它包含的模块，怎样使用那些最重要的后端模块，它们有什么问题，如何让它们工作。
.Sh "Layout 布局"
.IX Subsection "Layout"
编译器的后端放在 \f(CW\*(C`B::\*(C'\fR 里面，而前端（就是你，编译器的使用者，有时候要与之交互的）是 O 模块。一些后端（如 \f(CW\*(C`B::C\*(C'\fR)）提供了一些程序（如\fIperlcc\fR）来隐藏模块的复杂性。
.PP
这里是一些值得知道的重要后端，并附有它们目前的状态，用0到10的整数表示。（状态0表示目前该部分功能只是有一个框架，还没有实现；状态10则表示如果还有Bug的话，我们会感到很奇怪的）：
.IP "B::Bytecode" 4
.IX Item "B::Bytecode"
将语法树存成机器相关的格式，可供BtyeLoader模块可以在以后重新装入。状态：5（一些部分可以工作，一些不可以，还有一些还没有测试）
.IP "B::C" 4
.IX Item "B::C"
创建C代码文件，其中包括了重建语法树和恢复解释器的代码。状态：6（许多情况下可以正常工作，包括使用了Tk的程序）。
.IP "B::CC" 4
.IX Item "B::CC"
按照语法树中运行期代码的路径创建C代码文件。这是最像 Perl - C 翻译器的一个，但是它生成的代码几乎是不能看懂的，因为它把语法树翻译成了一个巨大的switch结构来操作Perl中的结构。最终的目的是在perl程序中给出足够的类型信息后，可以将 perl 数据结构的操作转换为 c 级别的数据结构，对 int 和 float 的操作。状态：5 (有些可以工作，包括不复杂的 Tk 示例).
.IP "B::Lint" 4
.IX Item "B::Lint"
当发现你的代码中有模棱两可的构造时会发出警告。状态：6（许多情况下可以正常工作，仅仅在很少数的领域内它会停止工作）。
.IP "B::Deparse" 4
.IX Item "B::Deparse"
重新生成Perl代码，试着把代码用一致的格式写出来。状态：8（它工作得很好，只是会略去一些晦涩难懂的部分）。
.IP "B::Xref" 4
.IX Item "B::Xref"
生成关于申明和关于变量以及子程序的使用情况的报告。状态：8（它工作得很好，只是仍有一点延迟方面的bugs）。
.SH "Using The Back Ends 使用后端"
.IX Header "Using The Back Ends"
接下来的部分介绍怎样使用各种各样的编译器后端。介绍的顺序按照后端的成熟程度排列，所以最为稳定的，经过了验证的后端会最先介绍，还在试验中和没有完成的后端就放到后面描述了。
.PP
O模块默认让 \fB\-c\fR 开关有效，这防止Perl在编译完代码后运行程序。这也是为什么所有的后端在产生任何输出前都会打印一句：
.PP
.Vb 1
\&  myperlprogram syntax OK
.Ve
.PP
.Sh "The Cross Referencing Back End 交叉引用后端"
.IX Subsection "The Cross Referencing Back End"
交叉引用后端（B::Xref）生成一个关于你的程序的报表，把各个申明以及子程序，变量（包括格式）的使用情况存入文件中去。举例来说，这有一段摘自对pod2man程序分析后生成的报表（该程序是Perl自带的一个例程）：
.PP
.Vb 12
\&  Subroutine clear_noremap
\&    Package (lexical)
\&      $ready_to_print   i1069, 1079
\&    Package main
\&      $&                1086
\&      $.                1086
\&      $0                1086
\&      $1                1087
\&      $2                1085, 1085
\&      $3                1085, 1085
\&      $ARGV             1086
\&      %HTML_Escapes     1085, 1085
.Ve
.PP
这里展示了\f(CW\*(C`clear_noremap\*(C'\fR 子程序中变量的使用情况。就像变量 \f(CW$ready_to_print\fR 是 \fImy()\fR (词法) 的一个变量，在第1069行被引入( 原文用的词是introduced，也就是在 \fImy()\fR 中第一次被定义的意思 )，然后在第1079行该变量被使用了。从主包（main package）中来的变量 \f(CW$&\fR  又在第1086行被使用, 等等。
.PP
行号前面可能会有一个字母作为前缀，它们的意思是：
.IP "i" 4
.IX Item "i"
变量首次被引入 (在my()中申明) 。
.IP "&" 4
子程序或者方法的引用。
.IP "s" 4
.IX Item "s"
定义的子程序。
.IP "r" 4
.IX Item "r"
定义的格式。
.PP
交叉引用中最为有用的选项就是把报表存入不同的文件，例如要把关于 \&\fImyperlprogram\fR 的报表存入文件 \fIreport\fR 中：
.PP
.Vb 1
\&  $ perl -MO=Xref,-oreport myperlprogram
.Ve
.Sh "The Decompiling Back End 反编译后端"
.IX Subsection "The Decompiling Back End"
反编译后端将把你的Perl语法树重新变成源代码。生成的源代码会按照某种格式组织，所以这个后端可以用来消除代码中的混乱部分。此后端的基本使用方法如下：
.PP
.Vb 1
\&  $ perl -MO=Deparse myperlprogram
.Ve
.PP
你也许马上会发现Perl并不知道如何给你的代码分段。你要自己手动添入新行来把这大断的代码分开。然而现在，让我们看看代码只有一行时情况怎样，这个后端会做些什么：
.PP
.Vb 12
\&  $ perl -MO=Deparse -e '$op=shift||die "usage: $0
\&  code [...]";chomp(@ARGV=<>)unless@ARGV; for(@ARGV){$was=$_;eval$op;
\&  die$@ if$@; rename$was,$_ unless$was eq $_}'
\&  -e syntax OK
\&  $op = shift @ARGV || die("usage: $0 code [...]");
\&  chomp(@ARGV = ) unless @ARGV;
\&  foreach $_ (@ARGV) {
\&      $was = $_;
\&      eval $op;
\&      die $@ if $@;
\&      rename $was, $_ unless $was eq $_;
\&  }
.Ve
.PP
这个后端也有几条选项控制生成的代码，举例说，你可以把缩进的尺寸设在4（最大）到2之间：
.PP
.Vb 1
\&  $ perl -MO=Deparse,-si2 myperlprogram
.Ve
.PP
\fB\-p\fR 开关控制在常常可以不加圆括号的地方加上它们：
.PP
.Vb 6
\&  $ perl -MO=Deparse -e 'print "Hello, world\en"'
\&  -e syntax OK
\&  print "Hello, world\en";
\&  $ perl -MO=Deparse,-p -e 'print "Hello, world\en"'
\&  -e syntax OK
\&  print("Hello, world\en");
.Ve
.PP
要知道更多，请参考 B::Deparse 
.Sh "Lint 后端"
.IX Subsection "The Lint Back End"
lint 后端 （B::Lint） 检察程序中不好的程序风格。一个程序认为的不好风格可能对另外一个程序员来说是用起来很有效的工具，所以有选项让你设定哪些东东将会受到检查。
.PP
要运行一个风格检查器检察你的代码：
.PP
.Vb 1
\&  $ perl -MO=Lint myperlprogram
.Ve
.PP