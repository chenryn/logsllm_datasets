(10 rows)  
postgres=# close cur1;  
CLOSE CURSOR  
postgres=# end;  
COMMIT  
```  
##### 3、UDF3，返回某两个点的最短路径  
返回某两个点的最短路径，同时限定深度，超过深度则认为不可达。  
例如搜索 1 到 100 的最短路径。  
```  
create or replace function graph_search3(  
  IN i_p1 int,                       -- 根据哪个节点开始搜  
  IN i_p2 int,                       -- 游标名  
  IN i_depth int  default 99999,     -- 搜索层级、深度限制  
  OUT o_path int[],                    -- 输出：路径, ID 组成的数组  
  OUT o_point1 int,                    -- 输出：点1 ID  
  OUT o_point2 int,                    -- 输出：点2 ID  
  OUT o_link_prop jsonb,               -- 输出：当前两点之间的连接属性  
  OUT o_depth int                      -- 输出：当前深度、层级  
) returns record as $$  
declare  
  sql text;  
begin  
sql := format($_$  
WITH RECURSIVE search_graph(  
  c1,   -- 点1  
  c2,   -- 点2  
  prop, -- 边的属性  
  depth, -- 深度，从1开始  
  path  -- 路径，数组存储  
) AS (  
        SELECT    -- ROOT节点查询  
          g.c1,   -- 点1  
          g.c2,   -- 点2  
          g.prop,   -- 边的属性  
          1 depth,        -- 初始深度=1  
          ARRAY[g.c1] path   -- 初始路径  
        FROM a AS g  
        WHERE  
          c1 = %s         -- ROOT节点=?      --（最短路径的起点）  
      UNION ALL  
        SELECT     -- 递归子句  
          g.c1,    -- 点1  
          g.c2,    -- 点2  
          g.prop,          -- 边的属性  
          sg.depth + 1 as depth,    -- 深度+1  
          path || g.c1 as path    -- 路径中加入新的点  
        FROM a AS g, search_graph AS sg   -- 循环 INNER JOIN  
        WHERE  
          g.c1 = sg.c2                      -- 递归JOIN条件  
          AND (g.c1 <> ALL(sg.path))        -- 防止循环  
          AND sg.depth >'weight')::float8,0) >= %s          -- 相关性权重  
          -- ORDER BY coalesce((g.prop->>'weight')::float8,0) desc      -- 可以使用ORDER BY，例如返回权重排在前面的N条。  
          limit %s                           -- 每个层级限制多少条？  
        ) t  
      UNION ALL  
        select c1,c2,prop,depth,path,cycle from (  
        SELECT     -- 递归子句  
          g.c1,    -- 点1  
          g.c2,    -- 点2  
          g.prop,          -- 边的属性  
          sg.depth + 1 as depth,    -- 深度+1  
          path || g.c1 as path,    -- 路径中加入新的点  
          (g.c1 = ANY(sg.path)) as cycle    -- 是否循环，判断新点是否已经在之前的路径中  
        FROM a AS g, search_graph AS sg   -- 循环 INNER JOIN  
        WHERE  
          g.c1 = sg.c2         -- 递归JOIN条件  
          AND (g.c1 <> ALL(sg.path))       -- 防止循环  
          AND sg.depth >'weight')::float8,0) >= %s          -- 相关性权重  
          -- ORDER BY coalesce((g.prop->>'weight')::float8,0) desc      -- 可以使用ORDER BY，例如返回权重排在前面的N条。  
          limit %s                           -- 每个层级限制多少条？  
        ) t  
)  
SELECT  
  c1 as o_point1,  
  c2 as o_point2,  
  path as o_path,  
  prop as o_link_prop,  
  depth as o_depth  
FROM search_graph  
  where c2 = %s   -- 最短路径的终点  
  limit 1         -- 查询递归表，可以加LIMIT输出，也可以使用游标  
$_$, i_p1, i_weight, i_limit, i_depth, i_weight, i_limit, i_p2);  
execute sql into o_point1,o_point2,o_path,o_link_prop,o_depth;  
return;  
end;  
$$ language plpgsql strict;  
alter function graph_search4 set enable_hashjoin=off ;  
alter function graph_search4 set enable_mergejoin=off ;  
alter function graph_search4 set max_parallel_workers_per_gather=0 ;  
```  
例子  
```  
postgres=# select * from graph_search4(31208, 50000, 3, 10000, 0);  
       o_path        | o_point1 | o_point2 | o_link_prop | o_depth  
---------------------+----------+----------+-------------+---------  
 {31208,27242,31772} |    31772 |    50000 |             |       3  
(1 row)  
Time: 38.276 ms  
```  
##### 使用psql客户端观测性能  
1、观察N度人脉性能:  
```  
\timing on  
\set v_root_point 1  
\set v_limit_per_layer 100000  
```  
```  
begin;  
set local enable_hashjoin=off;  
set local enable_mergejoin=off;  
set local max_parallel_workers_per_gather=0;  
DECLARE cur1 cursor for  
WITH RECURSIVE search_graph(  
  c1,   -- 点1  
  c2,   -- 点2  
  prop, -- 边的属性  
  depth, -- 深度，从1开始  
  path  -- 路径，数组存储  
) AS (  
        SELECT    -- ROOT节点查询  
          g.c1,   -- 点1  
          g.c2,   -- 点2  
          g.prop,   -- 边的属性  
          1 as depth,        -- 初始深度=1  
          ARRAY[g.c1] as path  -- 初始路径  
        FROM a AS g  
        WHERE  
          c1 = :v_root_point         -- ROOT节点=?  
      UNION ALL  
        SELECT     -- 递归子句  
          g.c1,    -- 点1  
          g.c2,    -- 点2  
          g.prop,          -- 边的属性  
          sg.depth + 1 as depth,    -- 深度+1  
          path || g.c1 as path   -- 路径中加入新的点  
        FROM a AS g, search_graph AS sg   -- 循环 INNER JOIN  
        WHERE  
          g.c1 = sg.c2         -- 递归JOIN条件  
          AND (g.c1 <> ALL(sg.path))        -- 防止循环  
          AND sg.depth <= :v_limit_per_layer   -- 搜索深度=?  
)  