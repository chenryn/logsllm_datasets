the receiver, regardless of the fact that the message can-
not be decrypted by the user eventually. Frequent partial
matchings incur an increasing computation and communica-
tion overhead to the clouds. To overcome these drawbacks,
we propose an enhanced scheme using a chain-cloud struc-
ture and present it in the next section.
4. CHAIN-CLOUD SCHEME
4.1 Overview and System Model
Unlike the parallel-cloud scheme, which requires the send-
ers to connect to a same m cloud servers simultaneously,
the chain-cloud scheme allows each receiver to specify how
many clouds to use and how attributes are delegated to each
cloud. As shown in Figure 2, three receivers choose three
sets of clouds to form three diﬀerent paths to three devices.
Moreover, the chain-cloud scheme allows the sender to en-
crypt a message under an expressive access policy A with
k-threshold gates. That is, an access policy can be satisﬁed
with any k or more attributes.
To support this, we employ a Bloom ﬁlter [5] in each cloud
to hold the part of attributes delegated to it. In particular,
when a cloud receives an encrypted message, it ﬁrst checks
if the attributes that are delegated to it satisfy the access
structure: if so, the cloud server partially decrypts the mes-
sage and sends the result to the receiver; otherwise, it further
looks up all the attributes in the access policy against the
Bloom ﬁlter to check if the attributes have a chance to satisfy
the access structure. If the Bloom ﬁlter look-up returns a
positive result, it indicates that it is possible the receiver has
(cid:53)(cid:68)(cid:81)(cid:74)(cid:72)(cid:29)(cid:3)(cid:1840)(cid:3036)(cid:2878)(cid:2869)
(cid:53)(cid:68)(cid:81)(cid:74)(cid:72)(cid:29)(cid:3)(cid:1840)(cid:3040)
…
(cid:1829)(cid:1864)(cid:1867)(cid:1873)(cid:1856)(cid:3036)(cid:2878)(cid:2869)
(cid:1829)(cid:1864)(cid:1867)(cid:1873)(cid:1856)(cid:3040)
(cid:1828)(cid:1858)(cid:3036)(cid:483)
(cid:19)
(cid:20)
(cid:20)
(cid:17)(cid:17)(cid:17)
(cid:19)
(cid:20)
Figure 3: The Bloom ﬁlter sent to each cloud.
the required attribute(s) to satisfy the access structure. So,
the cloud should decrypt the attributes in the access struc-
ture as many as possible and forward the partially decrypted
message to a next cloud. If the Bloom ﬁlter returns a nega-
tive result, which means the user does not have the required
attribute(s) for sure, the cloud should stop propagating the
message. Starting from the ﬁrst cloud, this process repeats
until either a cloud in the path ﬁnds that the access struc-
ture cannot be satisﬁed, or the partially decrypted message
is successfully forwarded to the receiver.
4.2 Construction
Setup(λ, N ). The setup algorithm is similar to the one in
the parallel-cloud scheme, except that it does not require a
speciﬁc value for m, i.e., the number of clouds to be used.
BloomFilterGen(S, [Cloudi]). In the parallel-cloud sche-
me, the user (i.e., receiver) decides the clouds to be used and
calls the BloomFilterGen algorithm, which takes the user’s
attribute set S and the number of clouds m as input to
generate m Bloom ﬁlters. Therefore, the user has a full con-
trol in deciding how to delegate her attributes to multiple
clouds and in what order, by taking the sensitiveness of her
attributes and her trust to cloud service providers into ac-
count. This not only provides a ﬂexible mechanism for the
user to determine her own multi-cloud platform setting, but
also ﬁts the real-world cloud usage scenario. That is, health-
related attributes are likely to be stored in a private hospital
cloud (and thus more trusted), while proﬁle attributes can
be delegated to public clouds.
The selected m clouds are organized as a chain. Each
cloud delegates a subset of attributes (Si), from which the
Bloom ﬁlter is generated. Here, we use an example to ex-
plain the generation process. Suppose the size of the univer-
sal attribute set N is 200 and the user selects three clouds,
where Cloud1 is responsible for the attributes in S1 ⊆ [1, 100],
Cloud2 for S2 ⊆ [101, 160] and Cloud3 for S3 ⊆ [161, 200].
To build the Bloom ﬁlter BF 1 for Cloud1, the attributes
j ∈ S2 and j′ ∈ S3 are inserted into the BF 1. We can ad-
just the false positive rate by changing the size of the Bloom
ﬁlter and the number of hash functions. To further increase
the probability of false positives, we randomly set some bits
in the ﬁlter to 1 to introduce noise. As shown in Figure 3,
our Bloom ﬁler consists of two parts. The ﬁrst part is a
lookup table used by a cloud to locate the next cloud, which
is in charge of a speciﬁc range of attributes, and the second
part is the noisy Bloom ﬁlter, which contains attributes in
Cloudi+1,··· , Cloudm, and the noise bits.
In the chain-cloud scheme, each user has her own cloud
usage speciﬁcation (CU S) for attribute delegation and can
change it anytime without informing the senders. This makes
it more ﬂexible than the parallel-cloud scheme. Then, the
user sends the cloud usage speciﬁcation to the TA to cor-
rectly distribute the corresponding transformation keys to
the clouds in use.
KeyGen(M K, S, t, CU S). The KeyGen algorithm takes as
34
input the master key, a user’s attribute set S and private key
t, and her cloud usage speciﬁcation CU S. It generates the
private key SK and the transformation key T K in the same
way as described in Section 3.2. Then, the TA sends the cor-
responding transformation key T K to each cloud according
to the CU S.
Encrypt(P K, M , A). The chain-cloud scheme can sup-
port expressive access policies such as access tree deﬁned in
the original CP-ABE [4]. Here, we take access tree as an
example to brieﬂy explain the encryption algorithm.
Let T be the access tree representing the access structure
A. Each non-leaf node x of the tree is a threshold gate
associated with a threshold value kx, where 0 < kx ≤ numx
for a node with numx children. A leaf node is associated
with an attribute and a threshold k = 1. We index the
children of each node from 1 to numx, and use index(x) to
return the index value of x among its sibling nodes.
Upon receiving an encrypted message, the cloud checks if
the access tree is satisﬁed. Let Tx denote a subtree rooted at
node x. If a set of attributes γ satisﬁes the access tree Tx, we
denote it as Tx(γ) = 1. Tx(γ) can be computed recursively:
for a leaf node x, Tx(γ) returns 1 if the attribute of x is in
γ; for a non-leaf node y, the cloud evaluates Ty′ (γ) for all
the children y′ of node y, and sets Ty(γ) to 1 if at least ky
children return 1.
To encrypt a message, the Encrypt() algorithm ﬁrst chooses
a polynomial qx in a top-down manner, starting from the
root R, for each node x in the tree. For each node x in the
tree, the degree dx of the polynomial qx is set to kx−1, where
kx is the threshold. For the root R, the algorithm chooses a
random secret s ∈ Zp and sets qR(0) = s. Then, it chooses
dR additional random values to construct qR completely.
For any other node x, it sets qx(0) = qparent(x)(index(x)),
where parent(x) denote the parent node of x, and chooses
dx additional randoms to deﬁne qx.
Let Y be the set of leaf nodes in A. Once the access tree
is deﬁned, the algorithm encrypts the message as below and
sends the the ciphertext to the ﬁrst cloud server in the chain.
CT =(A,#C = M e(g, g)αs, C = hs,
∀y ∈ Y : Cy = gqy (0), C′y = H(y)qy (0)).
Transform(CT, T Ki). When Cloudi receives the partially
decrypted ciphertext from the previous cloud in the chain,
it calls Transform() for further decryption.
For a leaf node x with attribute j ∈ Ni and j ∈ Si, Cloudi
calls DecryptN ode(), which is described in Section 3.2, and
computes e(Dj ,Cj )
e(D′j ,C′j ) = e(g, g)rqj (0). The node is then marked
as satisf ied and the node value is set to e(g, g)rqj (0).
If j ∈ Ni but j ̸∈ Si, which means attribute j is in charge
of Cloudj but does not belong to the attribute set Sj of the
user, we should set the node value to an error symbol ⊥,
indicating unsatisf ied.
If j ̸∈ Si but j /∈ Ni, the attribute j (i.e., a leaf node) may
be outsourced to another cloud. So, Cloudi looks it up in the
Bloom ﬁlter and sets the node to ⊥ if the result is negative.
Note that, a positive result cannot guarantee the ownership
of the attribute due to the false positive introduced by the
Bloom ﬁlter. Also, not all the leaf nodes are associated
with an attribute. Some are the internal nodes before the
transformation done by the previous cloud.
We then compute the value for the non-leaf nodes in a
bottom-up manner. For a non-leaf node x, we choose an
arbitrary kx−sized set Ex of its child nodes z to test if it
satisﬁes node x. If such set exists, we compute the value of
x as Vx:
∆i,E′x(0)
z
V
, where i=index(z) and E′x={index(z):z∈Ex}
(e(g, g)rqz (0))∆i,E′x
(0)
(e(g, g)r·qparent(z)(index(z)))∆i,E′x
(0)
e(g, g)r·qx(i)·∆i,E′x
(0)
Vx = $z∈Ex
= $z∈Ex
= $z∈Ex
= $z∈Ex
= e(g, g)r·qx(0).
Otherwise, the value of x is set to ⊥. Repeatedly, we com-
pute the value of the root node R as VR = e(g, g, )rqR(0) =
e(g, g)rs.
Next, Cloudi computes #D = e(g, g, )st(α+r) as described
in Section 3.2, and forwards #C, #D, VR to the receiver. If the
computation stops before arriving at root R but the Bloom
ﬁlter indicates that an attribute satisfying the access struc-
ture may exist in subsequent cloud servers, Cloudi looks up
the table in Figure 3 and forwards the intermediate result to
the next cloud that probably hold the attributes to satisfy
the entire tree. If no such cloud exists, it stops propagat-
ing and thus reduces the computation and communication
overhead in the subsequent clouds. In this way, the noisy
Bloom ﬁlter designed for the chain-cloud scheme increases
the transformation eﬃciency. Only when an access policy
can probably be satisﬁed by certain subsequent clouds, the
current cloud forwards the message.
As shown in the example in Figure 4, when Cloud1 ﬁnds
it
that the access tree is satisﬁed by itself and Cloud3,
skips Cloud2 and directly forwards the intermediate result
to Cloud3.
Decrypt(#C, #D, VR, SK). Once receiving the partially de-
crypted message from a cloud server, the receiver performs
the ﬁnal decryption operation as below.
#C
("D)1/t
VR
=
=
#C
(e(g,g)st(α+r))1/t
e(g,g)rs
M e(g, g)αs
e(g, g)αs
=
#C
e(g,g)s(α+r)
e(g,g)rs
= M.
Obviously, the decryption overhead on resource-constrained
devices is reduced to one exponentiation operation in the
chain-cloud scheme.
Verify(M, σ, V ). The veriﬁcation algorithm of the chain-
cloud scheme is similar to the one in the parallel-cloud scheme
discussed in Section 3.2. The sender counts the message
encrypted under the access policy A, generates the veriﬁ-
cation data V = senderID|H1(A)|seq(H1(A))|T , and signs
the message and veriﬁcation data as σ = sign(H1(M|V )).
Once the receiver recovers the plaintext M and the veri-
ﬁcation value V , she ﬁrst checks them against the signature
σ to verify the correctness of the transformation, and then
veriﬁes the completeness by comparing if the received se-
quence number is greater than the stored sequence number
by 1, for the access policy A.
35
3/3
3/3
1/1
1/1
1/1
1/2
(cid:10)(cid:17)(cid:17)(cid:4)
(cid:10)(cid:17)(cid:17)(cid:19)(cid:21)(cid:19)(cid:10)(cid:17)(cid:17)(cid:4)(cid:9)(cid:3)(cid:10)(cid:17)(cid:17)(cid:5)(cid:3)
1/1
1/2
The sender specifies the access 
policy tree and sends it with the 
ciphertext to the first cloud.
2/2
1/2
Value
Satisfied
2/2
(cid:1)
1/1
1/1
1/1
1/1
Not exist
Value
Satisfied
(cid:10)(cid:17)(cid:17)(cid:5)(cid:3)(cid:3)
(cid:10)(cid:17)(cid:17)(cid:5)(cid:3)(cid:3)
(cid:10)(cid:17)(cid:17)(cid:4)(cid:7)(cid:4)
(cid:4)(cid:2)(cid:11)(cid:15)(cid:16)(cid:18)(cid:12)(cid:19) checks the attributes in the tree against the 
(cid:10)(cid:17)(cid:17)(cid:8)(cid:3)
access tree might be satisfied by itself and (cid:11)(cid:15)(cid:16)(cid:18)(cid:12)(cid:20).