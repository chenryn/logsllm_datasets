---
title:  Create materialized view
description: This article describes how to create materialized views in Azure Data Explorer.
ms.reviewer: yifats
ms.topic: reference
ms.date: 03/22/2023
---
# .create materialized-view
A [materialized view](materialized-view-overview.md) is an aggregation query over a source table. It represents a single `summarize` statement.
There are two possible ways to create a materialized view, as noted by the *backfill* option in the command:
**Create the materialized view from now onward:**
* The materialized view is created empty. It includes only records ingested after view creation. Creation of this kind returns immediately, and the view is immediately available for query.
**Create the materialized view based on existing records in the source table:**
* See [Backfill a materialized view](#backfill-a-materialized-view).
* Creation might take a long while to complete, depending on the number of records in the source table. The view won't be available for queries until backfill is complete.
* When you're using this option, the create command must be `async`. You can monitor execution by using the [`.show operations`](../operations.md#show-operations) command.
* You can cancel the backfill process by using the [`.cancel operation`](#cancel-materialized-view-creation) command.
> [!IMPORTANT]
> On large source tables, the backfill option might take a long time to complete. If this process transiently fails while running, it won't be automatically retried. You must then re-execute the create command. For more information, see [Backfill a materialized view](#backfill-a-materialized-view).
## Permissions
You must have at least [Database User](../access-control/role-based-access-control.md) permissions to run this command.
## Syntax
`.create` [`async`] [`ifnotexists`] `materialized-view` [ `with` `(`*PropertyName* `=` *PropertyValue*`,`...`)`] *MaterializedViewName* `on table` *SourceTableName* `{` *Query* `}`
[!INCLUDE [syntax-conventions-note](../../../includes/syntax-conventions-note.md)]
## Parameters
| Name                            | Type   | Required | Description                                                                                                                                                                                                                          |
|---------------------------------|--------|----------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| *PropertyName*, *PropertyValue* | `string` |          | List of properties in the form of name and value pairs, from the list of [supported properties](#supported-properties).                                                                                                                        |
| *MaterializedViewName*          | `string` |  :heavy_check_mark:  | Name of the materialized view. The view name can't conflict with table or function names in the same database and must adhere to the [identifier naming rules](../../query/schema-entities/entity-names.md#identifier-naming-rules). |
| *SourceTableName*               | `string` |  :heavy_check_mark:  | Name of source table on which the view is defined.                                                                                                                                                                                   |
| *Query*                         | `string` |  :heavy_check_mark:  | Query definition of the materialized view. For more information and limitations, see [Query parameter](#query-parameter) section.                                                                                                                                                                                                      |
> [!NOTE]
> If the materialized view already exists:
>
> * If the `ifnotexists` flag is specified, the command is ignored. No change is applied, even if the new definition doesn't match the existing definition.
> * If the `ifnotexists` flag isn't specified, an error is returned.
> * To alter an existing materialized view, use the [.alter materialized-view](materialized-view-alter.md) command.
## Supported properties
The following properties are supported in the `with` `(`*PropertyName* `=` *PropertyValue*`)` clause. All properties are optional.
[!INCLUDE [materialized-view-create-properties](../../../includes/materialized-view-create-properties.md)]
> [!WARNING]
>
> * The system will automatically disable a materialized view if changes to the source table of the materialized view, or changes in data, lead to incompatibility between the materialized view query and the expected materialized view schema.
> * To avoid this error, the materialized view query must be deterministic. For example, the [bag_unpack](../../query/bag-unpack-plugin.md) or [pivot](../../query/pivot-plugin.md) plugin results in a non-deterministic schema.
> * When you're using an `arg_max(Timestamp, *)` aggregation and when `autoUpdateSchema` is false, changes to the source table can also lead to schema mismatches. Avoid this failure by defining the view query as `arg_max(Timestamp, Column1, Column2, ...)`, or by using the `autoUpdateSchema` option.
> * Using `autoUpdateSchema` might lead to irreversible data loss when columns in the source table are dropped.
> * Monitor automatic disabling of materialized views by using the [MaterializedViewResult metric](materialized-views-monitoring.md#materializedviewresult-metric).
> * After you fix incompatibility issues, you should explicitly re-enable the view by using the [enable materialized view](materialized-view-enable-disable.md) command.
### Create materialized view over materialized view
You can create a materialized view over another materialized view only when the source materialized view is a `take_any(*)` aggregation (deduplication). For more information, see [Materialized view over materialized view](materialized-view-overview.md#materialized-view-over-materialized-view) and [Examples](#examples).
**Syntax:**
`.create` [`async`] [`ifnotexists`] `materialized-view` [ `with` `(`*PropertyName* `=` *PropertyValue*`,`...`)`] *MaterializedViewName* `on materialized-view` *SourceMaterializedViewName* `{` *Query* `}`
**Parameters:**
| Name                            | Type   | Required | Description                                                                                                                                                                                                                          |
|---------------------------------|--------|----------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| *PropertyName*, *PropertyValue* | `string` |          | List of properties in the form of name and value pairs, from the list of [supported properties](#supported-properties).                                                                                                                        |
| *MaterializedViewName*          | `string` |  :heavy_check_mark:  | Name of the materialized view. The view name can't conflict with table or function names in the same database and must adhere to the [identifier naming rules](../../query/schema-entities/entity-names.md#identifier-naming-rules). |
| *SourceMaterializedViewName*    | `string` |  :heavy_check_mark:  | Name of source materialized view on which the view is defined.                                                                                                                                                                       |
| *Query*                         | `string` |  :heavy_check_mark:  | Query definition of the materialized view.                                                                                                                                                                                           |
## Examples
* Create an empty `arg_max` view that will materialize only records ingested from now on:
    ```kusto
    .create materialized-view ArgMax on table T
    {
        T | summarize arg_max(Timestamp, *) by User
    }
    ```
* Create a materialized view for daily aggregates with the backfill option, by using `async`:
    ```kusto
    .create async materialized-view with (backfill=true, docString="Customer telemetry") CustomerUsage on table T
    {
        T 
        | extend Day = bin(Timestamp, 1d)
        | summarize count(), dcount(User), max(Duration) by Customer, Day 
    } 
    ```
* Create a materialized view with `backfill` and `effectiveDateTime`. The view is created based on records from the datetime only.
    ```kusto
    .create async materialized-view with (backfill=true, effectiveDateTime=datetime(2019-01-01)) CustomerUsage on table T 
    {
        T 
        | extend Day = bin(Timestamp, 1d)
        | summarize count(), dcount(User), max(Duration) by Customer, Day
    } 
    ```
* Create a materialized view that deduplicates the source table, based on the `EventId` column, by using a lookback of 6 hours. Records will be deduplicated against only records ingested 6 hours before current records.
    ```kusto
    .create materialized-view with(lookback=6h) DeduplicatedTable on table T
    {
        T
        | summarize take_any(*) by EventId
    }
    ```
* Create a downsampling materialized view that's based on the previous `DeduplicatedTable` materialized view:
    ```kusto
    .create materialized-view DailyUsage on materialized-view DeduplicatedTable
    {
        DeduplicatedTable
        | summarize count(), dcount(User) by Day=bin(Timestamp, 1d)
    }
    ```
* The definition can include additional operators before the `summarize` statement, as long as `summarize` is the last one:
    ```kusto
    .create materialized-view CustomerUsage on table T 
    {
        T 
        | where Customer in ("Customer1", "Customer2", "CustomerN")
        | parse Url with "https://contoso.com/" Api "/" *
        | extend Month = startofmonth(Timestamp)
        | summarize count(), dcount(User), max(Duration) by Customer, Api, Month
    }
    ```
* Here are materialized views that join with a dimension table:
    ```kusto
    .create materialized-view with (dimensionTables = dynamic(["DimUsers"])) EnrichedArgMax on table T
    {
        T
        | lookup DimUsers on User  
        | summarize arg_max(Timestamp, *) by User 
    }
    .create materialized-view with (dimensionTables = dynamic(["DimUsers"])) EnrichedArgMax on table T 
    {
        DimUsers | project User, Age, Address
        | join kind=rightouter hint.strategy=broadcast T on User
        | summarize arg_max(Timestamp, *) by User 
    }
    ```
## Remarks
### Query parameter
The following rules limit the query used in the materialized view Query parameter:
* The query should reference a single fact table that is the source of the materialized view. It should include a single `summarize` operator, and one or more [aggregation functions](#supported-aggregation-functions) aggregated by one or more groups by expressions. The `summarize` operator must always be the last operator in the query.
  A materialized view that includes only a single `arg_max`/`arg_min`/`take_any` aggregation might perform better than a materialized view that includes these aggregations along with other aggregations (such as `count`/`dcount`/`avg`). This is because some optimizations are relevant only to these kinds of materialized views. They don't apply when the view includes mixed aggregation functions (where *mixed* means both `arg_max`/`arg_min`/`take_any` and other aggregations in the same view).
* The query shouldn't include any operators that depend on `now()`. For example, the query shouldn't have `where Timestamp > ago(5d)`. Use the retention policy on the materialized view to limit the period of time that the view covers.
* The following operators are not supported in the materialized view query: [`sort`](../../query/sort-operator.md), [`top-nested`](../../query/top-nested-operator.md), [`top`](../../query/top-operator.md), [`partition`](../../query/partition-operator.md), [`serialize`](../../query/serialize-operator.md).
* Composite aggregations are not supported in the definition of the materialized view. For instance, instead of using `SourceTableName | summarize Result=sum(Column1)/sum(Column2) by Id`, define the materialized view as: `SourceTableName | summarize a=sum(Column1), b=sum(Column2) by Id`. During view query time, run `MaterializedViewName | project Id, Result=a/b`. The required output of the view, including the calculated column (`a/b`), can be encapsulated in a [stored function](../../query/functions/user-defined-functions.md). Access the stored function instead of accessing the materialized view directly.
* Cross-cluster and cross-database queries aren't supported.
* References to [external_table()](../../query/external-table-function.md) and [externaldata](../../query/externaldata-operator.md) aren't supported.
* The materialized view query can't include any callouts that require impersonation. Specifically, all [query connectivity plugins](../../query/azure-digital-twins-query-request-plugin.md) that use impersonation aren't allowed.
* In addition to the source table of the view, the query is allowed to reference one or more [dimension tables](../../concepts/fact-and-dimension-tables.md). Dimension tables must be explicitly called out in the view properties. It's important to understand the following behavior when you're joining with dimension tables:
  * Records in the view's source table (the fact table) are materialized only once. Updates to the dimension tables don't have any impact on records that have already been processed from the fact table.
  * A different ingestion latency between the fact table and the dimension table might affect the view results.
    **Example**: A view definition includes an inner join with a dimension table. At the time of materialization, the dimension record was not fully ingested, but it was already ingested into the fact table. This record will be dropped from the view and never processed again.
    Similarly, if the join is an outer join, the record from fact table will be processed and added to view with a null value for the dimension table columns. Records that have already been added (with null values) to the view won't be processed again. Their values, in columns from the dimension table, will remain null.
### Supported aggregation functions
The following aggregation functions are supported:
* [`count`](../../query/count-aggregation-function.md)
* [`countif`](../../query/countif-aggregation-function.md)
* [`dcount`](../../query/dcount-aggfunction.md)
* [`dcountif`](../../query/dcountif-aggregation-function.md)
* [`min`](../../query/min-aggregation-function.md)
* [`max`](../../query/max-aggregation-function.md)
* [`avg`](../../query/avg-aggregation-function.md)
* [`avgif`](../../query/avgif-aggregation-function.md)
* [`sum`](../../query/sum-aggregation-function.md)
* [`sumif`](../../query/sumif-aggregation-function.md)
* [`arg_max`](../../query/arg-max-aggregation-function.md)
* [`arg_min`](../../query/arg-min-aggregation-function.md)
* [`take_any`](../../query/take-any-aggregation-function.md)
* [`take_anyif`](../../query/take-anyif-aggregation-function.md)
* [`hll`](../../query/hll-aggregation-function.md)
* [`make_set`](../../query/make-set-aggregation-function.md)
* [`make_list`](../../query/make-list-aggregation-function.md)
* [`make_bag`](../../query/make-bag-aggregation-function.md)
* [`percentile`, `percentiles`](../../query/percentiles-aggregation-function.md)
* [`tdigest`](../../query/tdigest-aggregation-function.md)
### Performance tips
* **Use a datetime group-by key**: Materialized views that have a datetime column as one of their group-by keys are more efficient than those that don't. The reason is that some optimizations can be applied only when there's a datetime group-by key. If adding a datetime group-by key doesn't change the semantics of your aggregation, we recommend that you add it. You can do this only if the datetime column is *immutable* for each unique entity.
  For example, in the following aggregation:
  ```kusto
      SourceTable | summarize take_any(*) by EventId
  ```
  If `EventId` always has the same `Timestamp` value, and therefore adding `Timestamp` doesn't change the semantics of the aggregation, it's better to define the view as:
  ```kusto
      SourceTable | summarize take_any(*) by EventId, Timestamp