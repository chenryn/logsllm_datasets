### System info
  * Playwright Version: v1.33, All?
### Source code
  * I provided the exact source code that allows reproducing the issue locally.
**Test file (self-contained)**
    // repro.mjs
    import { chromium } from '@playwright/test'
    const browser = await chromium.launch({
      headless: false
    })
    const context = await browser.newContext()
    const page = await context.newPage()
    page.once('load', async page => {
      await page.waitForTimeout(10000)
      console.log('after 10 sec!')
    })
    await page.goto('https://google.com/')
    await page.locator('#L2AGLb').click()
    await page.locator('textarea#APjFqb').first().type('Playwright')
    await page.locator('.FPdoLc input.gNO89b[name="btnK"]').click()
    await page.pause()
**Steps**
  * `npm install @playwright/test`
  * `npx playwright install --with-deps`
  * `node repro.mjs`
**Expected**
I expected that the callback in the event listener would block executing the
rest of the script for 10 seconds.
**Actual**
The script is executed without waiting for the callback to be fulfilled (a
Google search is done first, and a message is logged to the console later).
**Comment**
I wasn't sure if it should be reported as a bug or maybe a feature request, so
please adjust the issue. If an actual implementation has to stay untouched,
then I believe putting information in the docs for that scenario could be
helpful for others. Providing me with a workaround to achieve my goal is also
very welcome here.