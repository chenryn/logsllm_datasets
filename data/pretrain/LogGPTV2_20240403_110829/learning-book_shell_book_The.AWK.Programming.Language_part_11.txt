50.00
to
Carnegie Hall
date
1/3/87
check
tax
charitable contribution
1024
to
American Express
check
1025
amount
75.75
date
1/5/87
We are still using multiline records separated by a single blank line, but within
each record, every piece of data is self-identifying: each field consists of an item
name, a tab, and the information. That means that different records can con-
tain different fields, or similar fields in arbitrary order.
One way to process this kind of data is to treat it as single lines, with occa-
sional blank lines as separators. Each line identifies the value it corresponds to,
but they are not otherwise connected. So to accumulate the sums of deposits
and checks, for example, we could simply scan the input for deposits and checks,
like this:
---
## Page 97
SECTION 3.4
MULTILINE RECORDS 87
check1- print total deposits and checks
/check/
{ck =1；next }
/deposit/{dep=1;next}
/"anount/
{ant = $2;next}
/^s/
(addup()}
END
(addup()
printf(*deposits $%.2f,checks $%.2f\n”,
deposits, checks)
function addup()(
if (ck)
checks += ant
else if (dep)
ck =dep = ant =0
which produces
deposits $500.00, checks $418.95
This is easy, and it works (on correct input) no matter what order the items
of a record appear in. But it is delicate, requiring careful initialization, reini-
cach record as a unit, then pick it apart as needed. The following program
tialization, and end-of-file processing. Thus an appealing alternative is to read
computes the same sums of deposits and checks, using a function to extract the
value associated with an item of a given name:
 check2 - print total deposits and checks
BEGIN
(RS = "; FS - "\n° }
/(~1\n)deposit/(deposits +=field（"amount");next)
/(~!\n)check/
END
(printf("depositg s%.2f，checks s%.2f\n”,
deposits,checks)
}
function field(name,
for（i=1;ifile, the file can be sorted in a
separate step. This applies to all the examples in this chapter.
We have completed the preparation and sort steps; all we need now is to for-
mat this information into the desired report. The program form1 does the job:
---
## Page 101
SECTION 4.1
GENERATING REPORTS
16
 form1 - format countries data by continent,pop.den.
BEGIN ( FS = *:*
printf(*x-15s %-10s %10s x7s x12s\n",
"AREA"，“FOP.DEN.")
{printf(*%-15s %-10s %7d %10d %10.1f\n",
$1,$2,$3,$4,$5)
The desired report can be generated by typing the command line
 aq q p q u dad u axos on se d 
program format its output so that sort doesn’t need any arguments, and then
having the formatting program reformat the lines. By default, the sort com-
tion density. To avoid arguments to sort, the preparation program can put at
the beginning of each line a quantity depending on continent and population
density that, when sorted lexicographically, will automatically order the output
correctly. One possibility is a fixed-width representation of the continent fol-
lowed by the reciprocal of the population density, as in prep2:
prep2 -prepare countries by continent,inverse pop.den.
BEGIN (FS = "\t")
den = 1000+$3/s2
printf(*%-15s:%12.8f:%s:%d:%d:%.1fn,
$4,1/den，$1,$3，s2,den）1*sort"
}
With the countries file as input, here is the output from prep2:
Asia
：
0.00120000:Japan:120:144:833.3
Asia
0.00169839:Ind1a:746: 1267:588.8
Asia
0.00359012:China:1032:3705:278.5
Europe
Asia
0.03145091:USSR:275:8649:31.8
0.00157377:Germany:61:96:635.4
Europe
：
0.00167857:Eng1and:56:94:595.7
Europe
0.00383636:France:55:211:260.7
North America
0.00976923:Mexico:78:762:102.4
North America
North America
：
0.01525316:USA:237:3615:65.6
：
0.15408000:Canada:25:3852:6.5
South America
：
0.02452239:Brazi1: 134:3286:40,8
The format %-15s is wide enough for all the continent names, and %12.8f
covers a wide range of reciprocal densities.The final formatting program is like
that simplifies the sorting options is quite general. We'll use it again in an
---
## Page 102
REPORTS AND DATABASES
CHAPTER 4
indexing program in Chapter 5.
If we would like a slightly fancier report in which only the first occurrence
of each continent name is printed, we can use the formatting program form2 in
place of form1:
forn2 - format countries by continent,pop.den.
。。= S4) NI588
printf(*%-15s %-10s %10s %7s %12s\n",
"CONTINENT",
“AREA"，“POP.DEN.“)
"COUNTRY"，*POPULATION",
{if （$1 1= prev){
prev = $1
print
}else
$1 = **
printf(*%-15s %-10s %7d %10d %10.1f\n”,
$1,$2,$3,$4,$5)
The command line
awk -f prep1 countries 1 avk -f forn2
generates this report:
CONTINENT
COUNTRY
POPULATION
AREA
POP. DEN.
Asia
Japan
120
144
833.3
India
China
746
1267
278.5
588.8
1032
3705
USSR
275
8649
31.8
Europe
Gernany
61
96
635.4
England
56
94
55
595.7
France
211
260.7
North America
Mexico
78
762
102.4
USA
237
3615
Canada
65.6
25
3852
6,5
South America
Brazil
134
3286
40.8
The formatting program form2 is a “control-break" program. The variable
continent name printed. In the next section, we will see a more complicated
example of control-break programming.
A More Complex Report
Typical business reports have more substance (or at least form) than what
we have scen so far. To illustrate, suppose we want continent subtotals and
---
## Page 103
SECTION 4.1
GENERATING REPORTS
6
information about the percentage contributed by each country to the total popu-
lation and area. We would also like to add a title and more column headers:
[*og 20deg
POPULATION,AREA,POPULATION DENSITY
January 1, 1988
CONTINENT
COUNTRY
POPULATION
AREA
POP. DEN.
Mi111ons
Pct.of
Thousands
Pet.of
People per
of People
Total
of sq.Mi.
Total
q.xi.
A81a
Japa
120
26.3
833.3
103
36-6
3705
588.8
China
USSR
278.5
31.8
TOTAL for Anla
2173
77.1
13765
53.6
Europe
Gernany
61
2.2
96
England
55
0.4
635.4
Prance
2.0
2.0
211
94
0.8