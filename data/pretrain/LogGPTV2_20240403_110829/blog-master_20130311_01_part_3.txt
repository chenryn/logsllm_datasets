postgres=# select * from t_ret ;  
 id  |  info  |          crt_time            
-----+--------+----------------------------  
 100 | digoal | 2013-03-10 17:50:04.680794  
(1 row)  
```  
-- 使用这个函数更能观察出after for each row触发器函数的返回值并不影响下一个after for each row的NEW变量.  
-- 因为after for each row 的触发器函数中NEW值(统一来自真正被影响的行数据)  
-- 修改触发器函数 :   
```  
postgres=# create or replace function tg_t_ret() returns trigger as $$                               
declare r record;  
begin  
  NEW.id := NEW.id+1;   
  raise notice '%, id:%', TG_NAME, NEW.id;   
  -- 修改NEW.id , 并返回修改后的NEW .   
  return NEW;  
end;  
$$ language plpgsql;  
CREATE FUNCTION  
```  
-- 插入测试数据  
```  
postgres=# insert into t_ret values (123,'digoal',now());  
NOTICE:  00000: tg01, id:124  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg1, id:125  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg02, id:126  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg2, id:126  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
INSERT 0 1  
```  
-- 注意after for each row的触发器函数中, 原始NEW.id值都是125, 因此打印的修改后的NEW.id都=126.  
-- after for each row触发器函数的返回值并不会影响returning的值, returning的值也是来自真正的行数据. (view的触发器场景除外)  
```  
postgres=# insert into t_ret values (123,'digoal',now()) returning id;  
NOTICE:  00000: tg01, id:124  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg1, id:125  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg02, id:126  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg2, id:126  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
-- 如下, returning 的值为125, 而不是126.  
 id    
-----  
 125  
(1 row)  
INSERT 0 1  
```  
-- DELETE before for each row 触发器函数 接收 OLD, 修改这个record对结果的影响是什么?  
```  
postgres=# create or replace function tg_t_ret() returns trigger as $$                           
declare  
begin  
  OLD.id := OLD.id+1;   
  raise notice '%, id:%', TG_NAME, OLD.id;   
  return OLD;  
end;  
$$ language plpgsql;  
CREATE FUNCTION  
postgres=# create trigger tg3 before DELETE ON t_ret for each row execute procedure tg_t_ret();  
CREATE TRIGGER  
postgres=# delete from t_ret where id=1;  
DELETE 0  
postgres=# delete from t_ret where id=2;  
NOTICE:  00000: tg3, id:3  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
-- 虽然触发器函数返回的OLD.id=3, 但是实际上删除的行是id=2的行. 说明delete before for each row的触发器函数返回值并不能改变行的定位. 与此不同的是, 当delete before for each row触发器函数的返回值为空时, 不会执行delete数据行的操作.  
DELETE 1  
postgres=# select * from t_ret ;  
 id |  info  |          crt_time            
----+--------+----------------------------  
  3 | digoal | 2013-03-10 17:33:32.91286  
  3 | digoal | 2013-03-10 17:34:17.854048  
(2 rows)  
```  
-- 返回空, 不会执行delete操作, 如下  
```  
postgres=# CREATE OR REPLACE FUNCTION public.tg_t_ret()  
 RETURNS trigger  
 LANGUAGE plpgsql  
AS $function$                           
declare  
begin  
  OLD.id := OLD.id+1;   
  raise notice '%, id:%', TG_NAME, OLD.id;   
  return null;  
end;  
$function$;  
CREATE FUNCTION  
postgres=# create trigger tg1 before delete on t_ret for each row execute procedure tg_t_ret();  
CREATE TRIGGER  
postgres=# delete from t_ret where id=1;  
NOTICE:  00000: tg1, id:1  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
DELETE 0  
```  
-- 没有删除数据. 因为tg_t_ret触发器函数返回空.  
```  
postgres=# select * from t_ret;  
 id | info |          crt_time            
----+------+----------------------------  
  1 | abc  | 2013-03-10 20:38:50.951669  
(1 row)  
```  
-- before for each row 的返回值不影响returning的值, returning 的值来自真实的受影响的行数据.  
```  
postgres=# delete from t_ret where id=100 returning *;  
NOTICE:  00000: tg3, id:101  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg3, id:101  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
 id  |  info  |          crt_time            
-----+--------+----------------------------  
 100 | digoal | 2013-03-10 17:50:04.680794  
 100 | digoal | 2013-03-10 17:54:58.572425  
(2 rows)  
DELETE 2  
```  
-- 如上, DELETE before for each row触发器函数的返回值OLD.id=101, 但是returning的值是被删除的行数据的值 , 因此ID=100.  
-- 如下DELETE after for each row的返回值也不影响returning的返回值. returning的值取自真正被影响的行.  
```  
postgres=# create trigger tg04 after DELETE ON t_ret for each row execute procedure tg_t_ret();  
CREATE TRIGGER  
postgres=# delete from t_ret where id=123 returning *;  
NOTICE:  00000: tg3, id:124  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
NOTICE:  00000: tg04, id:124 , 触发器函数返回值OLD.id为124, returning id为123.  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
 id  |  info  |          crt_time            
-----+--------+----------------------------  
 123 | digoal | 2013-03-10 17:55:02.809048  
(1 row)  
DELETE 1  
```  
5\.1\.3 UPDATE before for each row 触发器函数 接收 NEW 还是 OLD? 修改这个record对结果的影响是什么?  
```  
postgres=# drop table t_ret;  
DROP TABLE  
postgres=# create table t_ret(id int, info text, crt_time timestamp);  
CREATE TABLE  
postgres=# insert into t_ret values (1,'digoal',now()), (2,'DIGOAL',now()), (3,'digoal',now()), (4,'abc',now());  
INSERT 0 4  
postgres=# create or replace function tg_t_ret() returns trigger as $$  
declare  
begin  
  OLD.id := OLD.id+1;  
  NEW.id := NEW.id+1;  
  raise notice '%, old.id:%. new.id:%', TG_NAME, OLD.id, NEW.id;  
  return null;  
end;  
$$ language plpgsql;  
CREATE FUNCTION  
postgres=# create trigger tg1 before update ON t_ret for each row execute PROCEDURE tg_t_ret();  
CREATE TRIGGER  
postgres=# create trigger tg2 before update ON t_ret for each row execute PROCEDURE tg_t_ret();  
CREATE TRIGGER  
```  
-- update before for each row 触发器函数返回空, 将不会执行update操作.  
```  
postgres=# update t_ret set info='new' where id=1 returning *;  
NOTICE:  00000: tg1, old.id:2. new.id:2  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
 id | info | crt_time   
----+------+----------  
(0 rows)  
UPDATE 0  
```  
-- 当update before for each row 触发器函数的返回值不为空时, 被更改的行的最终值将与最后一个执行的before for each row 触发器函数的返回值一致.  
-- 本例的tg2是最后一次调用的update before for each row触发器函数, 它的返回值为NEW.id := 3, NEW.info := 'new', NEW.crt_time保持原值.  
-- 因此更新后的值id = 3, 而不是原来的1.  
```  
postgres=# create or replace function tg_t_ret() returns trigger as $$                           
declare  
begin  
  OLD.id := OLD.id+1;  
  NEW.id := NEW.id+1;  
  raise notice '%, old.id:%. new.id:%', TG_NAME, OLD.id, NEW.id;  
  return NEW;   
end;  
$$ language plpgsql;  
CREATE FUNCTION  
postgres=# update t_ret set info='new' where id=1 returning *;  
NOTICE:  00000: tg1, old.id:2. new.id:2  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
-- 前后两次调用的触发器函数OLD的值一样, 说明OLD的值是从原始的HeapTuple拷贝过来的, 而不是拷贝的指针.  
-- 第一个update before for each row触发器函数中的NEW值一部分是从SQL语句传入的(修改的值), 另一部分是从原始的HeapTuple拷贝过来的(未修改的值).  
-- 接下来的update before for each row 触发器函数则是上一个触发器函数的返回值.  
-- 最终被更新的行数据则是最后一个update before for each row 触发器函数的返回值.  
NOTICE:  00000: tg2, old.id:2. new.id:3  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
 id | info |          crt_time            
----+------+----------------------------  
  3 | new  | 2013-03-10 20:56:52.339739  
(1 row)  
UPDATE 1  
postgres=# select * from t_ret ;  
 id |  info  |          crt_time            
----+--------+----------------------------  
  2 | DIGOAL | 2013-03-10 20:56:52.339739  
  3 | digoal | 2013-03-10 20:56:52.339739  
  4 | abc    | 2013-03-10 20:56:52.339739  
  3 | new    | 2013-03-10 20:56:52.339739  
(4 rows)  
```  
-- 返回的record必须与触发这个触发器的表的结构一致. 否则无法转换成该tuple结构. 报错.  
```  
postgres=# create or replace function tg_t_ret() returns trigger as $$  
declare   
  r record;  
begin  
  OLD.id := OLD.id+1;  
  NEW.id := NEW.id+1;  
  select 1 as id into r;   
  raise notice '%, old.id:%. new.id:%', TG_NAME, OLD.id, NEW.id;  
  return r;  
end;  
$$ language plpgsql;  
CREATE FUNCTION  
postgres=# update t_ret set info='new' where id=2 returning *;  
NOTICE:  00000: tg1, old.id:3. new.id:3  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
ERROR:  42804: returned row structure does not match the structure of the triggering table  
DETAIL:  Number of returned columns (1) does not match expected column count (3).  
CONTEXT:  PL/pgSQL function tg_t_ret() during function exit  
LOCATION:  convert_tuples_by_position, tupconvert.c:137  
```  
### 小结1  
#### INSERT 触发器: for TABLE  
1\. before for each statement (触发器函数的返回值无意义)  
2\. before for each row (第一个被触发的触发器, 触发器函数的NEW值取自SQL语句)  
返回值的流水 :   
2\.1 返回值传递给下一个被触发的before for each row触发器, 作为下一个触发器调用的触发器函数的NEW值.  
2\.2 如果下面没有before for each row触发器, 则将返回值传递给操作插入行数据的C函数.   
2\.3 如果返回值为空, 那么跳过本行操作, (如果SQL语句涉及多行, 则跳到下一行的第一个before for each row触发器; 如果SQL不涉及多行或者已经到达最后行, 则直接跳到语句结束或after for each statement的操作;)  
3\. before for each row(可选)  
4\. 检查约束, 插入行的操作  
5\. 以下触发器或returning语句的NEW值取自HeapTuple, 表示物理的数据行中的数据, 因此这里的触发器返回值没有意义, 不会作为NEW值传递给其他触发器.  
after for each row 触发器 (>=0个)  
returning 语句, 被插入的行的真实数据, 其实就是最后一个before for each row触发器函数的返回值.  
after for each statement 触发器 (>=0个)  
#### DELETE 触发器: for TABLE  
1\. before for each statement (触发器函数的返回值无意义)  
2\. before for each row (第一个被触发的触发器, 触发器函数的OLD值取自SQL语句)  
返回值的流水 :   
2\.1 返回值传递给下一个被触发的before for each row触发器, 作为下一个触发器调用的触发器函数的OLD值.  
2\.2 如果下面没有before for each row触发器, 则进入DELETE行的操作, 注意删除行不是通过上面返回的OLD值定位的, 所以before for each row函数的返回值不会篡改删除行的操作. (注意它和INSERT触发器的分别, 已经存在的数据(DELETE)和不存在的数据(INSERT)).  
2\.3 如果返回值为空, 那么跳过本行操作, (如果SQL语句涉及多行, 则跳到下一行的第一个before for each row触发器; 如果SQL不涉及多行或者已经到达最后行, 则直接跳到语句结束或after for each statement的操作;)  
3\. before for each row(可选)  
4\. 检查约束, 删除行的操作  
5\. 以下触发器或returning语句的OLD值取自HeapTuple, 表示物理的数据行中的数据, 因此这里的触发器返回值没有意义, 不会作为OLD值传递给其他触发器.  
after for each row 触发器 (>=0个)  
returning 语句, 被删除的行的原始数据, 注意不是最后一个before for each row触发器函数的返回值.  
after for each statement 触发器 (>=0个)  