groups of users, with each account having the least level of privilege
cc0088..iinndddd 228822 88//1199//22001111 1122::0088::3344 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 283
Chapter 8 n Attacking Access Controls 283
necessary to carry out the actions that group is permitted to perform.
Declarative controls of this kind are declared from outside the applica-
tion. This is a useful application of defense-in-depth principles, because
privileges are imposed on the application by a different component. Even
if a user fi nds a way to breach the access controls implemented within the
application tier in order to perform a sensitive action, such as adding a
new user, he is prevented from doing so. The database account that he is
using does not have the required privileges within the database.
A different means of applying declarative access control exists at the
application server level, via deployment descriptor fi les, which are applied
during application deployment. However, these can be relatively blunt
instruments and do not always scale well to manage fi ne-grained privi-
leges in a large application.
HACK STEPS
If you are attacking an application that employs a multilayered privilege
model of this kind, it is likely that many of the most obvious mistakes that
are commonly made in applying access controls will be defended against. You
may fi nd that circumventing the controls implemented within the application
does not get you very far, because of protection in place at other layers. With
this in mind, several potential lines of attack are still available to you. Most
importantly, understanding the limitations of each type of control, in terms of
the protection it does not offer, will help you identify the vulnerabilities that
are most likely to affect it:
n Programmatic checks within the application layer may be susceptible to
injection-based attacks.
n Roles defi ned at the application server layer are often coarsely defi ned
and may be incomplete.
n Where application components run using low-privileged operating sys-
tem accounts, typically they can read many kinds of potentially sensitive
data within the host fi le system. Any vulnerabilities granting arbitrary fi le
access may still be usefully exploited, even if only to read sensitive data.
n Vulnerabilities within the application server software itself typically
enable you to defeat all access controls implemented within the appli-
cation layer, but you may still have limited access to the database and
operating system.
n A single exploitable access control vulnerability in the right location may
still provide a starting point for serious privilege escalation. For example,
if you discover a way to modify the role associated with your account,
you may fi nd that logging in again with that account gives you enhanced
access at both the application and database layers.
cc0088..iinndddd 228833 88//1199//22001111 1122::0088::3344 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 284
284 Chapter 8 n Attacking Access Controls
Summary
Access control defects can manifest themselves in various ways. In some cases,
they may be uninteresting, allowing illegitimate access to a harmless function
that cannot be leveraged to escalate privileges any further. In other cases, fi nd-
ing a weakness in access controls can quickly lead to a complete compromise
of the application.
Flaws in access control can arise from various sources. A poor application
design may make it diffi cult or impossible to check for unauthorized access, a
simple oversight may leave only one or two functions unprotected, or defective
assumptions about how users will behave can leave the application undefended
when those assumptions are violated.
In many cases, fi nding a break in access controls is almost trivial. You simply
request a common administrative URL and gain direct access to the functional-
ity. In other cases, it may be very hard, and subtle defects may lurk deep within
application logic, particularly in complex, high-security applications. The most
important lesson when attacking access controls is to look everywhere. If you
are struggling to make progress, be patient, and test every step of every applica-
tion function. A bug that allows you to own the entire application may be just
around the corner.
Questions
Answers can be found at http://mdsec.net/wahh.
1. An application may use the HTTP Referer header to control access without
any overt indication of this in its normal behavior. How can you test for
this weakness?
2. You log in to an application and are redirected to the following URL:
https://wahh-app.com/MyAccount.php?uid=1241126841
The application appears to be passing a user identifi er to the MyAccount.php
page. The only identifi er you are aware of is your own. How can you test
whether the application is using this parameter to enforce access controls
in an unsafe way?
3. A web application on the Internet enforces access controls by examining
users’ source IP addresses. Why is this behavior potentially fl awed?
cc0088..iinndddd 228844 88//1199//22001111 1122::0088::3344 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 285
Chapter 8 n Attacking Access Controls 285
4. An application’s sole purpose is to provide a searchable repository of
information for use by members of the public. There are no authentica-
tion or session-handling mechanisms. What access controls should be
implemented within the application?
5. When browsing an application, you encounter several sensitive resources
that need to be protected from unauthorized access and that have the .xls
fi le extension. Why should these immediately catch your attention?
cc0088..iinndddd 228855 88//1199//22001111 1122::0088::3355 PPMM
Stuttard c08.indd V1 - 07/04/2011 Page 286
cc0088..iinndddd 228866 88//1199//22001111 1122::0088::3355 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 287
CHAPTER
9
Attacking Data Stores
Nearly all applications rely on a data store to manage data that is processed
within the application. In many cases this data drives the core application logic,
holding user accounts, permissions, application confi guration settings, and more.
Data stores have evolved to become signifi cantly more than passive containers
for data. Most hold data in a structured format, accessed using a predefi ned
query format or language, and contain internal logic to help manage that data.
Typically, applications use a common privilege level for all types of access
to the data store and when processing data belonging to different application
users. If an attacker can interfere with the application’s interaction with the data
store, to make it retrieve or modify different data, he can usually bypass any
controls over data access that are imposed at the application layer.
The principle just described can be applied to any kind of data store tech-
nology. Because this is a practical handbook, we will focus on the knowledge
and techniques you need to exploit the vulnerabilities that exist in real-world
applications. By far the most common data stores are SQL databases, XML-
based repositories, and LDAP directories. Practical examples seen elsewhere
are also covered.
In covering these key examples, we will describe the practical steps that you
can take to identify and exploit these defects. There is a conceptual synergy in
the process of understanding each new type of injection. Having grasped the
essentials of exploiting these manifestations of the fl aw, you should be confi dent
that you can draw on this understanding when you encounter a new category
287
cc0099..iinndddd 228877 88//1199//22001111 1122::0099::2288 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 288
288 Chapter 9 n Attacking Data Stores
of injection. Indeed, you should be able to devise additional means of attacking
those that others have already studied.
Injecting into Interpreted Contexts
An interpreted language is one whose execution involves a runtime component
that interprets the language’s code and carries out the instructions it contains.
In contrast, a compiled language is one whose code is converted into machine
instructions at the time of generation. At runtime, these instructions are executed
directly by the processor of the computer that is running it.
In principle, any language can be implemented using either an interpreter or
a compiler, and the distinction is not an inherent property of the language itself.
Nevertheless, most languages normally are implemented in only one of these
two ways, and many of the core languages used to develop web applications
are implemented using an interpreter, including SQL, LDAP, Perl, and PHP.
Because of how interpreted languages are executed, a family of vulnerabilities
known as codeinjection arises. In any useful application, user-supplied data is
received, manipulated, and acted on. Therefore, the code that the interpreter
processes is a mix of the instructions written by the programmer and the data
supplied by the user. In some situations, an attacker can supply crafted input
that breaks out of the data context, usually by supplying some syntax that has
a special signifi cance within the grammar of the interpreted language being
used. The result is that part of this input gets interpreted as program instruc-
tions, which are executed in the same way as if they had been written by the
original programmer. Often, therefore, a successful attack fully compromises
the component of the application that is being targeted.
In native compiled languages, on the other hand, attacks designed to execute
arbitrary commands are usually very different. The method of injecting code
normally does not leverage any syntactic feature of the language used to develop
the target program, and the injected payload usually contains machine code
rather than instructions written in that language. See Chapter 16 for details of
common attacks against native compiled software.
Bypassing a Login
The process by which an application accesses a data store usually is the same,
regardless of whether that access was triggered by the actions of an unprivi-
leged user or an application administrator. The web application functions as a
discretionary access control to the data store, constructing queries to retrieve,
add, or modify data in the data store based on the user’s account and type.
A successful injection attack that modifi es a query (and not merely the data
cc0099..iinndddd 228888 88//1199//22001111 1122::0099::2299 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 289
Chapter 9 n Attacking Data Stores 289
within the query) can bypass the application’s discretionary access controls
and gain unauthorized access.
If security-sensitive application logic is controlled by the results of a query, an
attacker can potentially modify the query to alter the application’s logic. Let’s
look at a typical example where a back-end data store is queried for records in
a user table that match the credentials that a user supplied. Many applications
that implement a forms-based login function use a database to store user cre-
dentials and perform a simple SQL query to validate each login attempt. Here
is a typical example:
SELECT * FROM users WHERE username = ‘marcus’ and password = ‘secret’
This query causes the database to check every row within the users table
and extract each record where the username column has the value marcus and
the password column has the value secret. If a user’s details are returned to
the application, the login attempt is successful, and the application creates an
authenticated session for that user.
In this situation, an attacker can inject into either the username or the password
fi eld to modify the query performed by the application and thereby subvert its
logic. For example, if an attacker knows that the username of the application
administrator is admin, he can log in as that user by supplying any password
and the following username:
admin’--
This causes the application to perform the following query:
SELECT * FROM users WHERE username = ‘admin’--’ AND password = ‘foo’
Note that the comment sequence (--) causes the remainder of the query to
be ignored, and so the query executed is equivalent to:
SELECT * FROM users WHERE username = ‘admin’
so the password check is bypassed.
TRY IT!
http://mdsec.net/auth/319/
Suppose that the attacker does not know the administrator’s username. In
most applications, the fi rst account in the database is an administrative user,
because this account normally is created manually and then is used to generate
cc0099..iinndddd 228899 88//1199//22001111 1122::0099::2299 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 290
290 Chapter 9 n Attacking Data Stores
all other accounts via the application. Furthermore, if the query returns the
details for more than one user, most applications will simply process the fi rst
user whose details are returned. An attacker can often exploit this behavior to
log in as the fi rst user in the database by supplying the username:
‘ OR 1=1--
This causes the application to perform the query:
SELECT * FROM users WHERE username = ‘’ OR 1=1--’ AND password = ‘foo’
Because of the comment symbol, this is equivalent to:
SELECT * FROM users WHERE username = ‘’ OR 1=1
which returns the details of all application users.
NOTE Injecting into an interpreted context to alter application logic is a
generic attack technique. A corresponding vulnerability could arise in LDAP
queries, XPath queries, message queue implementations, or indeed any
custom query language.
HACK STEPS
Injection into interpreted languages is a broad topic, encompassing many
different kinds of vulnerabilities and potentially affecting every component of
a web application’s supporting infrastructure. The detailed steps for detecting
and exploiting code injection fl aws depend on the language that is being
targeted and the programming techniques employed by the application’s
developers. In every instance, however, the generic approach is as follows:
1. Supply unexpected syntax that may cause problems within the context of
the particular interpreted language.
2. Identify any anomalies in the application’s response that may indicate the
presence of a code injection vulnerability.
3. If any error messages are received, examine these to obtain evidence
about the problem that occurred on the server.
4. If necessary, systematically modify your initial input in relevant ways in an
attempt to confirm or disprove your tentative diagnosis of a vulnerability.
5. Construct a proof-of-concept test that causes a safe command to be
executed in a verifiable way, to conclusively prove that an exploitable
code injection flaw exists.
6. Exploit the vulnerability by leveraging the functionality of the target
language and component to achieve your objectives.
cc0099..iinndddd 229900 88//1199//22001111 1122::0099::2299 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 291
Chapter 9 n Attacking Data Stores 291
Injecting into SQL
Almost every web application employs a database to store the various kinds of
information it needs to operate. For example, a web application deployed by an
online retailer might use a database to store the following information:
n User accounts, credentials, and personal information
n Descriptions and prices of goods for sale
n Orders, account statements, and payment details
n The privileges of each user within the application
The means of accessing information within the database is Structured Query
Language (SQL). SQL can be used to read, update, add, and delete information
held within the database.
SQL is an interpreted language, and web applications commonly construct
SQL statements that incorporate user-supplied data. If this is done in an unsafe
way, the application may be vulnerable to SQL injection. This fl aw is one of the
most notorious vulnerabilities to have affl icted web applications. In the most
serious cases, SQL injection can enable an anonymous attacker to read and
modify all data stored within the database, and even take full control of the
server on which the database is running.
As awareness of web application security has evolved, SQL injection vulner-
abilities have become gradually less widespread and more diffi cult to detect
and exploit. Many modern applications avoid SQL injection by employing APIs
that, if properly used, are inherently safe against SQL injection attacks. In these
circumstances, SQL injection typically occurs in the occasional cases where these
defense mechanisms cannot be applied. Finding SQL injection is sometimes a
diffi cult task, requiring perseverance to locate the one or two instances in an
application where the usual controls have not been applied.
As this trend has developed, methods for fi nding and exploiting SQL injection
fl aws have evolved, using more subtle indicators of vulnerabilities, and more
refi ned and powerful exploitation techniques. We will begin by examining
the most basic cases and then go on to describe the latest techniques for blind
detection and exploitation.
A wide range of databases are employed to support web applications. Although
the fundamentals of SQL injection are common to the vast majority of these, there
are many differences. These range from minor variations in syntax to signifi cant
divergences in behavior and functionality that can affect the types of attacks you
can pursue. For reasons of space and sanity, we will restrict our examples to the
three most common databases you are likely to encounter — Oracle, MS-SQL,
and MySQL. Wherever applicable, we will draw attention to the differences
between these three platforms. Equipped with the techniques we describe here,
cc0099..iinndddd 229911 88//1199//22001111 1122::0099::2299 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 292
292 Chapter 9 n Attacking Data Stores
you should be able to identify and exploit SQL injection fl aws against any other
database by performing some quick additional research.
TIP In many situations, you will fi nd it extremely useful to have access to
a local installation of the same database that is being used by the applica-
tion you are targeting. You will often fi nd that you need to tweak a piece of
syntax, or consult a built-in table or function, to achieve your objectives. The
responses you receive from the target application will often be incomplete
or cryptic, requiring some detective work to understand. All of this is much
easier if you can cross-reference with a fully transparent working version of
the database in question.
If this is not feasible, a good alternative is to fi nd a suitable interactive
online environment that you can experiment on, such as the interactive tutori-
als at SQLzoo.net.
Exploiting a Basic Vulnerability
Consider a web application deployed by a book retailer that enables users to
search for products by author, title, publisher, and so on. The entire book catalog
is held within a database, and the application uses SQL queries to retrieve details
of different books based on the search terms supplied by users.
When a user searches for all books published by Wiley, the application per-