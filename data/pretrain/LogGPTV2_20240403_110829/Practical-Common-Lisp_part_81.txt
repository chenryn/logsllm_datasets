现在你可以实现特化在html-pretty-printer上的构成后台接口的8个广义函数上的方
你可以从定义带有两个槽的类开始：一个槽用来保存indenting-printer的实例，另一个
(defmethod newline ((pp html-pretty-printer))
函数newline、freshline、indent、unindent和toggle-indenting实现了对于底层
(defmethod freshline ((pp html-pretty-printer))
(defmethod raw-string ((pp html-pretty-printer) string &optional newlines-p)
(defclass html-pretty-printer ()
对于那些只有在*pretty*为真时才发挥作用的方法定义特化在html-raw-printer上的空操作（no-op）方法。
(defmethod indent ((pp html-pretty-printer))
了正确类的实例。但一般来讲，使用多态来替换条件语句是一个好的策略。
不过，在本例中，在定义了所有空操作方法以后，你会得到更多的代码，并且随后还需要确保在正确的时候创建
(when *pretty* (emit-freshline (printer pp))))
(emit-newline (printer pp)))
(tab-width :accessor tab-width :initarg :tab-width :initform 2)))
{(printer
(incf (indentation (printer pp)) (tab-width pp))))
(emit/no-newlines (printer pp) string)))
(emit (printer pp) string)
第30章实践：HTML生成库，解释器部分
:accessor
printer
www.TopSage.com
:initarg :printer)
---
## Page 400
种思想组合在一起从而博采众长。
有用的，但总是使用EVAL显然不是个好主意，所以你可以将EVAL跟状况系统一起使用，将两
以代替x），那么EVAL就可以得到它的值。这样，允许FOO解释器在某些情况下使用EVAL将是
不过，如果x是一个以DEFVAR或DEFPARAMETER声明的动态变量（从而可能会被命名为*x*
原因。
间就不再有必要的关联了。这就是当你认为EVAL是一个解决方案时，可能会判断错误的主要
的关联。Lisp编译器将代码中对x的引用指向该变量，但在代码被编译以后，名字x和该变量之
法访问词法环境。因此，无法让类似下面的代码正常工作：
解释器中，你无法有目的地求值嵌入的Lisp代码，因此这些函数上的相应方法将总是报错。
会输出CommonLisp表达式值的代码，而embed-code用来嵌入一点代码运行并丢弃其结果。在
首先定义当embed-value和embed-code在解释器中调用时你将抛出的一些错误类
(define-condition value-in-interpreter (embedded-lisp-in-interpreter)()
(define-condition embedded-lisp-in-interpreter (error)
其中x是一个词法变量。在运行期传递给emit-html的符号x与同名的词法变量没有特别
(let（（x 10）)（emit-html'（:p x）））
(:report
(（form :initarg :form:reader form)))
一个替代的方法是使用EVAL来求值解释器中的Lisp表达式。这种方法的问题在于EVAL无
(defmethod embed-code ((pp html-pretty-printer) code)
(defmethod embed-value((pp html-pretty-printer)value)
最后，函数embed-value和embed-code只被FOO编译器使用。embed-value用来生成将
(format s *Can't embed code when interpreting. Code: ~s"(form c)))))
(format s "Can't embed values when interpreting.Value:~s"(form c)))))
(error “Can't embed code when interpreting. Code:~s" code))
(error "Can't embed values when
(defmethod unindent ((pp html-pretty-printer))
(when
(when*pretty
(decf(indentation(printer pp))(tab-width pp))))
(setf indenting-p(not indenting-p)))))
*pretty
使用状况系统来解决问题
www.TopSage.com
30.6美化打印器后台
3383双
---
## Page 401
和eval-code仅当其状况中的Lisp形式是一
启动的函数。evaluate再启动函数无条件地调用同名的再启动，而eval-dynamic-variables
来求值Lisp形式的再启动函数。
384
(defun
然后，出于方便的考虑，你可以在特定的情形下提供再启动函数，即可以调用evaluate再
(defun
10
如果你调用evaluate再启动，那么embea-value将EVAL*x*，得到值10，然后生成下面
Can't embed values
然后你将以下列信息进入调试器：
现在你可以做类似下面的事情：
Tdefmethod
X*
TM
when.
第 30章实践：HTML 生成库，解释器部分
eval
evaluate (&optional condition)
(eval code) )))
:report(lambda (s)
rer
LUATE] EVAL
code
(symbolp
art
(format s"EvAL rs in null lexical environment."
nai
*X*
(form condition))
www.TopSage.com
ng
"in null lexical environment
code-in-
pp
"EVAL ~s in nuli-lexical-
condition)
html
一个动态变量或潜在的代码时才调用再启动。
interpreter :form code)
est.
(boundp (form condition)))
value)
envls
onment
 code))
value)
---
## Page 402
现在变量*escapes*中的字符，该变量前面说过是初始绑定到*element-escapes*的值上的。
要么是一个正确格式化了的点对。
码来允许其处理宏和特殊操作符。但目前它看起来像下面这样：
的情况下将其交给process-sexp-html来处理。在下一章里，你将为该函数添加一些额外的代
的简单形式时，该函数可以在处理器上执行下面的调用序列：
象并处理它，其中调用适当的处理器函数来生成HTML。例如，当给定类似
30.7
(:p "Foo")
现在将FOO语言与它的处理器接口连接起来，你所需要的全部就是一个函数，它接受一个对
自求值形式很容易处理，只需用PRINC-TO-STRING将其转化成一个字符串，并转义其中出
(defun sexp-html-p (form)
函数sexp-html-p检查一个给定对象是否是合法的FOo表达式，它要么是一个自求值形式，
(defun process (processor form)
目前你可以定义一个简单的函数，它只是检查一个Lisp形式是否是合法的FOO形式，并在是
(freshline processor)
(raw-string processor 
(freshline processor)
HM>(with-dynamic-evaluation (ivalues t)(emit-html(:p *x*)）)
(or (self-evaluating-p form) (cons-form-p form)))
raw-string proce
(raw-string processor
最后，你可以定义一个宏来提供一
"
.
processor form)
nil)
nil)
 nil
www.TopSage.com
-interpreter.
“s" form)))
一个漂亮的语法绑定两种类型的错误的处理器。
#'evaluate))))
30.7基本求值规则
body
385
---
## Page 403
以临时关闭缩进，这样美化打印器就不会添加任何不属于元素实际内容的空白了。
要特别处理，因为它们没有对应的闭合标签。而在输出那三个内部空白需要保留的标签时，你可
留的三个元素pre、Style和script。前者在生成正规HTML（换句话说，不是XHTML）时需
个成员。
内联元素只是简单地在行内输出。下面3个参数列出了每种类型的元素：
层。当输出段落元素（例如p、li和blockquote）时在开放标签之前和闭合标签之后都要换行。
如body和ul）时在它们的开放标签之前和闭合标签之后都要换行，并且它们的内容需要缩进一
调整缩进。你可以将HTML中定义的所有元素分为三类：块、段落和内联元素。当输出块元素（例
签。这里主要的复杂之处在于为了生成美化的HTML，就需要根据输出的元素类型来输出空行并
点对形式则传递给process-cons-sexp-html来处理,
386
① 你不需要用于*inline-elements*的谓词，因为你只可能测试块和段落元素。在这里，我只是出于完备性的考
(defparameter *empty-elements*
其他两个带有它们自己的谓词的分类是那些总是空的元素，例如br和hr，以及空白需要保
((xsquawata-yoota be1 puti) (bei) d-auawata-yoota ungap)
函数block-element-p和paragraph-element-p测试一个给定标签是否是对应列表的一
函数process-cons-sexp-html随后负责输出开放的标签、任何属性、主体以及闭合的标
(defun process-sexp-html (processor form)
(defun paragraph-element-p (tag) (find tag *paragraph-elements*))
(defparameter *inline-elements*
(defparameter *paragraph-elements*
(defparameter *block-elements* 
虑才包括了该参数。
'{:area :base :br :col :hr :img :input :link :meta :param))
'(:a :abbr 
(:body :colgroup :dl :fieldset :form :head :html :map :noscript :object
:sup :tt :var))
:td :textarea :th :title))
:h2 :h3 :h4 :h5 :h6 :hr
:tr :ul))
:ol :optgroup :pre :script :select :style :table :tbody :tfoot :thead
(process-cons-sexp-html processor form)))
(raw-string processor (escape (princ-to-string form) *escapes*) t)
第30章实践：HTML 生成库，解释器部分
:acronym :address :b :bdo :big :cite :code :del :dfn :em 
 :blockquote :br :button :caption :col :dd :div :dt :hl
www.TopSage.com
:input :li :link :meta :option :p :param 
---
## Page 404
任何其他的真值，那么就将其值替换成该属性的名字。
指定的布尔属性带来方便，这时属性的值就是属性名本身，如果一个属性的值为T一
层process函数来求值那些属性值，同时将*escapes*绑定到*attribute-escapes*。为了给
用“/>”还是“>”来结束标签。
出属性。你需要将元素的主体传递给emit-open-tag，这样它在输出XHTML时，就知道究竟是
放的标签、主体以及闭合的标签。
然后，你用助手函数emit-open-tag、emit-element-body和emit-close-tag来分别输出开
来将列表解析成3个部分：标签符号，一个可能为空的属性键值对以及一个可能为空的主体形式。
出空元素的方式。
① 尽管XHTMIL要求布尔属性必须用其名字作为值以表示一个真值，但在HTML中简单地包含一个没有值的属性名