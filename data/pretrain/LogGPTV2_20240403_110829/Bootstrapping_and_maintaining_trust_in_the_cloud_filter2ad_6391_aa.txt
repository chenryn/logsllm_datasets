title:Bootstrapping and maintaining trust in the cloud
author:Nabil Schear and
Patrick T. Cable II and
Thomas M. Moyer and
Bryan Richard and
Robert Rudd
Bootstrapping and Maintaining Trust in the Cloud ∗
Nabil Schear
MIT Lincoln Laboratory
PI:EMAIL
Patrick T. Cable II
Threat Stack, Inc.
PI:EMAIL
Thomas M. Moyer
MIT Lincoln Laboratory
PI:EMAIL
Bryan Richard
MIT Lincoln Laboratory
PI:EMAIL
Robert Rudd
MIT Lincoln Laboratory
PI:EMAIL
ABSTRACT
Today’s infrastructure as a service (IaaS) cloud environ-
ments rely upon full trust in the provider to secure appli-
cations and data. Cloud providers do not oﬀer the ability
to create hardware-rooted cryptographic identities for IaaS
cloud resources or suﬃcient information to verify the in-
tegrity of systems. Trusted computing protocols and hard-
ware like the TPM have long promised a solution to this
problem. However, these technologies have not seen broad
adoption because of their complexity of implementation, low
performance, and lack of compatibility with virtualized en-
vironments.
In this paper we introduce keylime, a scal-
able trusted cloud key management system. keylime pro-
vides an end-to-end solution for both bootstrapping hard-
ware rooted cryptographic identities for IaaS nodes and for
system integrity monitoring of those nodes via periodic at-
testation. We support these functions in both bare-metal
and virtualized IaaS environments using a virtual TPM.
keylime provides a clean interface that allows higher level
security services like disk encryption or conﬁguration man-
agement to leverage trusted computing without being trusted
computing aware. We show that our bootstrapping proto-
col can derive a key in less than two seconds, we can detect
system integrity violations in as little as 110ms, and that
keylime can scale to thousands of IaaS cloud nodes.
∗This material is based upon work supported by the As-
sistant Secretary of Defense for Research and Engineering
under Air Force Contract No. FA8721-05-C-0002 and/or
FA8702-15-D-0001. Any opinions, ﬁndings, conclusions or
recommendations expressed in this material are those of the
author(s) and do not necessarily reﬂect the views of the As-
sistant Secretary of Defense for Research and Engineering.
c⃝ 2016 Massachusetts Institute of Technology. Delivered
to the U.S. Government with Unlimited Rights, as deﬁned
in DFARS Part 252.227-7013 or 7014 (Feb 2014). Notwith-
standing any copyright notice, U.S. Government rights in
this work are deﬁned by DFARS 252.227-7013 or DFARS
252.227-7014 as detailed above. Use of this work other than
as speciﬁcally authorized by the U.S. Government may vio-
late any copyrights that exist in this work.
ACM acknowledges that this contribution was authored or co-authored by an em-
ployee, or contractor of the national government. As such, the Government retains
a nonexclusive, royalty-free right to publish or reproduce this article, or to allow oth-
ers to do so, for Government purposes only. Permission to make digital or hard copies
for personal or classroom use is granted. Copies must bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. To copy otherwise, distribute, republish, or post, requires prior
speciﬁc permission and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’16, December 05-09, 2016, Los Angeles, CA, USA
c⃝ 2016 ACM. ISBN 978-1-4503-4771-6/16/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2991079.2991104
1.
INTRODUCTION
The proliferation and popularity of infrastructure-as-a-
service (IaaS) cloud computing services such as Amazon
Web Services and Google Compute Engine means more cloud
tenants are hosting sensitive, private, and business critical
data and applications in the cloud. Unfortunately, IaaS
cloud service providers do not currently furnish the build-
ing blocks necessary to establish a trusted environment for
hosting these sensitive resources. Tenants have limited abil-
ity to verify the underlying platform when they deploy to
the cloud and to ensure that the platform remains in a good
state for the duration of their computation. Additionally,
current practices restrict tenants’ ability to establish unique,
unforgeable identities for individual nodes that are tied to a
hardware root of trust. Often, identity is based solely on a
software-based cryptographic solution or unveriﬁable trust
in the provider. For example, tenants often pass unprotected
secrets to their IaaS nodes via the cloud provider.
Commodity trusted hardware, like the Trusted Platform
Module (TPM) [40], has long been proposed as the solution
for bootstrapping trust, enabling the detection of changes to
system state that might indicate compromise, and establish-
ing cryptographic identities. Unfortunately, TPMs have not
been widely deployed in IaaS cloud environments due to a
variety of challenges. First, the TPM and related standards
for its use are complex and diﬃcult to implement. Second,
since the TPM is a cryptographic co-processor and not an
accelerator, it can introduce substantial performance bottle-
necks (e.g., 500+ms to generate a single digital signature).
Lastly, the TPM is a physical device by design and most
IaaS services rely upon virtualization, which purposefully
divorces cloud nodes from the hardware on which they run.
At best, the limitation to physical platforms means that
only the cloud provider would have access to the trusted
hardware, not the tenants [17, 20, 31]. The Xen hypervisor
includes a virtualized TPM implementation that links its se-
curity to a physical TPM [2, 10], but protocols to make use
of the vTPM in an IaaS environment do not exist.
To address these challenges we identify the following de-
sirable features of an IaaS trusted computing system:
• Secure Bootstrapping – the system should enable
the tenant to securely install an initial root secret into
each cloud node. This is typically the node’s long term
cryptographic identity and the tenant chains other se-
crets to it to enable secure services.
• System Integrity Monitoring – the system should
allow the tenant to monitor cloud nodes as they oper-
65
ate and react to integrity deviations within one second.
• Secure Layering (Virtualization Support) – the
system should support tenant controlled bootstrapping
and integrity monitoring in a VM using a TPM in the
provider’s infrastructure. This must be done in collab-
oration with the provider in least privilege manner.
• Compatibility – the system should allow the ten-
ant to leverage hardware-rooted cryptographic keys in
software to secure services they already use (e.g., disk
encryption or conﬁguration management).
• Scalability – the system should scale to support boot-
strapping and monitoring of thousands of IaaS resources
as they are elastically instantiated and terminated.
Prior cloud trusted computing solutions address a subset
of these features, but none achieve all. Excalibur [31] sup-
ports bootstrapping at scale, but does not allow for system
integrity monitoring or oﬀer full support for tenant trusted
computing inside a VM (i.e., layering). Manferdelli et al.
created a system that supports secure layering and boot-
strapping, but does not support system integrity monitor-
ing,
is incompatible with existing cryptographic services,
and has not demonstrated cloud scale operation [25]. Fi-
nally, the Cloud Veriﬁer [34] enables system integrity mea-
surement and cloud scalability but does not fully address
secure layering or enable secure bootstrapping.
In this paper, we introduce keylime; an end-to-end IaaS
trusted cloud key management service that supports all the
above desired features. The key insight of our work is to
utilize trusted computing to bootstrap identity in the cloud
and provide integrity measurement to support revocation,
but then allow high-level services that leverage these iden-
tities to operate independently. Thus, we provide a clean
and easy to use interface that can integrate with existing
security technologies (see Figure 1).
We introduce a novel bootstrap key derivation protocol
that combines both tenant intent and integrity measurement
to install secrets into cloud nodes. We then leverage the
Cloud Veriﬁer [34] pattern of Schiﬀman et al. to enable pe-
riodic attestation that automatically links to identity revo-
cation. keylime supports the above with secure layering in
both bare-metal and virtualized IaaS resources in a manner
that minimizes trust in the cloud provider. We demonstrate
the compatibility of keylime by securely enabling cloud pro-
visioning with cloud-init1, encrypted communication with
IPsec, conﬁguration management with Puppet2, secret man-
agement with Vault3, and storage with LUKS/dm-crypt en-
crypted disks. Unlike existing solutions [39, 25], these ser-
vices don’t need to be trusted computing aware, they just
need to use an identity key and respond to key revocations.
Finally, we show that keylime can scale to handle thou-
sands of simultaneous nodes and perform integrity checks
on nodes at rates up to 2,500 integrity reports (quotes) ver-
iﬁed per second. We present and evaluate multiple options
for deploying our integrity measurement veriﬁer both in the
cloud, in a low-cost cloud appliance based on a Raspberry
Pi, and on-premises. We show that the overhead of securely
1http://launchpad.net/cloud-init
2http://puppetlabs.com/
3http://hashicorp.com/blog/vault.html
ID key 
revoked?
Valid 
TPM?
Software-based Cryptographic Services 
Keylime
Trusted Computing Services 
TPM / Platform Manufacturer Enrollment 
Software
ID Keys 
Signed
EKs
Figure 1: Interface between trusted hardware and
existing software-based security services via the
keylime trusted computing service layer.
provisioning a key using keylime takes less than two sec-
onds. Finally, we ﬁnd that our system can detect integrity
measurement violations in as little as 110ms.
2. BACKGROUND
Trusted Computing The TPM provides the means for
creating trusted systems that are amenable to system in-
tegrity monitoring. The TPM, as speciﬁed by the Trusted
Computing Group (TCG)4, is a cryptographic co-processor
that provides key generation, protected storage, and crypto-
graphic operations. The protected storage includes a set of
Platform Conﬁguration Registers (PCRs) where the TPM
stores hashes. The TPM uses these registers to store mea-
surements of integrity-relevant components in the system.
To store a new measurement in a PCR, the extend opera-
tion concatenates the existing PCR value with the new mea-
surement, securely hashes5 that value, and stores the result-
ing hash in the register. This hash chain allows a veriﬁer to
conﬁrm that a set of measurements reported by the system
has not been altered. This report of measurements is called
an attestation, and relies on the quote operation, which ac-
cepts a random nonce and a set of PCRs. These PCRs can
include measurements of the BIOS, ﬁrmware, boot loader,
hypervisor, OS, and applications, depending on the conﬁgu-
ration of the system. The TPM reads the PCR values, and
then signs the nonce and PCRs with a key that is only ac-
cessible by the TPM. The key the TPM uses to sign quotes
is called an attestation identity key (AIK). We denote a
quote using QuoteAIK(nonce, P CRi : di...) for a quote us-
ing AIK from the TPM with the associated nonce and one
or more optional PCR numbers P CRi and corresponding
data di that will be hashed and placed in P CRi.
The TPM contains a key hierarchy for securely storing
cryptographic keys. The root of this hierarchy is the Stor-
age Root Key (SRK) which the owner generates during TPM
initialization. The SRK in turn protects the TPM AIK(s)
when they are stored outside of the TPM’s nonvolatile stor-
age (NVRAM). Each TPM also contains a permanent cre-
dential called the Endorsement Key (EK). The TPM man-
ufacturer generates and signs the EK. The EK uniquely
identiﬁes each TPM and certiﬁes that it is a valid TPM
hardware device. The private EK never leaves the TPM,
is never erased, and can only be used for encryption and
decryption during AIK initialization to limit its exposure.
4http://trustedcomputinggroup.org
5TPM speciﬁcation version 1.2 uses SHA-1 for measure-
ments. TPM speciﬁcation version 2.0 adds SHA-256 to ad-
dress cryptographic weaknesses in SHA-1.
66
Integrity Measurement To measure a system component,
the underlying component must be trusted computing-aware.
The BIOS in systems with a TPM supports measurement of
ﬁrmware and boot loaders. TPM-aware boot loaders can
measure hypervisors and operating systems [22, 19, 29]. To
measure applications, the operating system must support
measurement of applications that are launched, such as the
Linux Integrity Measurement Architecture [30, 21]. One
limitation of approaches like IMA is the inability to mon-
itor the run-time state of the applications. Nexus aims to
address this limitation with a new OS that makes trusted
computing a ﬁrst-class citizen, and supports introspection
to validate run-time state [37]. Several proposals exist for
providing run-time integrity monitoring including LKIM [24]
and DynIMA [8]. These systems ensure that a running sys-
tem is in a known state, allowing a veriﬁer to validate not
only that what was loaded was known, but that it has not
been tampered with while it was running.
In addition to operating system validation, others have
leveraged trusted computing and integrity measurement to
support higher-level services, such as protected access to
data when the client is oﬄine [23], or to enforce access
policies on data [26]. Others have proposed mechanisms
to protect the server from malicious clients, e.g., in online
gaming [1], or applications from a malicious operating sys-
tem [6, 7, 15]. However, these proposals do not account for
the challenges of migrating applications to a cloud environ-
ment, and often assume existing infrastructure to support
trusted computing key management.
IaaS Cloud Services In the IaaS cloud service model, users
request an individual compute resource to execute their ap-
plication. For example, users can provision physical hard-
ware, virtual machines, or containers.
In this paper, we
refer to any of these tenant-provisioned IaaS resources as
cloud nodes. Users provision nodes either by uploading a
whole image to the provider or by conﬁguring a pared-down
base image that the provider makes available. Users often
begin by customizing a provider-supplied image, then create
their own images (using a tool like Packer6) to decrease the
amount of time it takes for a node to become ready.
cloud-init is a standard cross-provider (e.g., Amazon
EC2, Microsoft Azure...) mechanism that allows cloud ten-
ants to specify bootstrapping data.
It accepts a YAML-
formatted description of what bootstrapping actions should
be taken and supports plugins to take those actions. Exam-
ples of such actions include: adding users, adding package
repositories, or running arbitrary scripts. Users of cloud
computing resources at scale typically spawn new cloud in-
stances using an application programming interface and pass
along enough bootstrapping information to allow the in-
stance to communicate with a conﬁguration management
platform (such as Chef7 or Puppet, etc.) for further instance-
speciﬁc conﬁguration. These bootstrapping instructions are
not encrypted, meaning that a provider could intercept se-
crets passed via the bootstrapping instructions. In our re-
search, we found that organizations will either (a) send an
unprotected pre-shared key for Puppet in their cloud-init
bootstrapping actions, or (b) rely on some weaker method of
proving identity such as going oﬀ the certiﬁcate’s common
name (hostname).
6https://www.packer.io/
7https://www.chef.io/chef/
3. DESIGN
To address the limitations of current approaches, we con-
sider the union of trusted computing and IaaS to provide
a hardware root-of-trust that tenants leverage to establish
trust in the cloud provider’s infrastructure and in their own
systems running on that infrastructure. This section consid-
ers the threats that keylime addresses, and how to leverage
existing trusted computing constructs in a virtualized envi-