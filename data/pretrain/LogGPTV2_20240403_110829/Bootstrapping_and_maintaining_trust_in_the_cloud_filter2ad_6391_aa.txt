# Bootstrapping and Maintaining Trust in the Cloud

**Authors:**
- Nabil Schear, MIT Lincoln Laboratory
- Patrick T. Cable II, Threat Stack, Inc.
- Thomas M. Moyer, MIT Lincoln Laboratory
- Bryan Richard, MIT Lincoln Laboratory
- Robert Rudd, MIT Lincoln Laboratory

**Abstract:**
Modern infrastructure-as-a-service (IaaS) cloud environments often rely on full trust in the provider to secure applications and data. However, cloud providers do not offer the ability to create hardware-rooted cryptographic identities for IaaS resources or provide sufficient information to verify system integrity. Trusted computing protocols and hardware, such as the Trusted Platform Module (TPM), have long been proposed as a solution, but their adoption has been limited due to complexity, performance issues, and lack of compatibility with virtualized environments.

In this paper, we introduce **keylime**, a scalable trusted cloud key management system. Keylime provides an end-to-end solution for bootstrapping hardware-rooted cryptographic identities for IaaS nodes and for system integrity monitoring via periodic attestation. It supports these functions in both bare-metal and virtualized IaaS environments using a virtual TPM. Keylime offers a clean interface that allows higher-level security services, such as disk encryption or configuration management, to leverage trusted computing without requiring deep knowledge of trusted computing principles.

We demonstrate that our bootstrapping protocol can derive a key in less than two seconds, detect system integrity violations in as little as 110ms, and scale to thousands of IaaS cloud nodes.

**Acknowledgments:**
This work is supported by the Assistant Secretary of Defense for Research and Engineering under Air Force Contract No. FA8721-05-C-0002 and/or FA8702-15-D-0001. The opinions, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the Assistant Secretary of Defense for Research and Engineering.

**Copyright:**
© 2016 Massachusetts Institute of Technology. Delivered to the U.S. Government with Unlimited Rights, as defined in DFARS Part 252.227-7013 or 7014 (Feb 2014). Notwithstanding any copyright notice, U.S. Government rights in this work are defined by DFARS 252.227-7013 or DFARS 252.227-7014 as detailed above. Use of this work other than as specifically authorized by the U.S. Government may violate any copyrights that exist in this work.

**ACM Acknowledgment:**
ACM acknowledges that this contribution was authored or co-authored by an employee or contractor of the national government. As such, the Government retains a nonexclusive, royalty-free right to publish or reproduce this article, or to allow others to do so, for Government purposes only. Permission to make digital or hard copies for personal or classroom use is granted. Copies must bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. To copy otherwise, distribute, republish, or post, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

**Conference:**
ACSAC '16, December 05-09, 2016, Los Angeles, CA, USA
© 2016 ACM. ISBN 978-1-4503-4771-6/16/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2991079.2991104

## 1. Introduction

The widespread adoption of infrastructure-as-a-service (IaaS) cloud computing services, such as Amazon Web Services and Google Compute Engine, has led to more organizations hosting sensitive, private, and business-critical data and applications in the cloud. Unfortunately, IaaS cloud service providers do not currently provide the necessary tools to establish a trusted environment for these resources. Tenants have limited ability to verify the underlying platform when deploying to the cloud and ensuring that the platform remains in a good state throughout their computation. Additionally, current practices restrict tenants' ability to establish unique, unforgeable identities for individual nodes tied to a hardware root of trust. Often, identity is based solely on software-based cryptographic solutions or unverifiable trust in the provider. For example, tenants frequently pass unprotected secrets to their IaaS nodes via the cloud provider.

Trusted hardware, such as the Trusted Platform Module (TPM), has long been proposed as a solution for bootstrapping trust, enabling the detection of changes to system state that might indicate compromise, and establishing cryptographic identities. However, TPMs have not been widely deployed in IaaS cloud environments due to several challenges. First, the TPM and related standards for its use are complex and difficult to implement. Second, since the TPM is a cryptographic co-processor and not an accelerator, it can introduce substantial performance bottlenecks (e.g., 500+ms to generate a single digital signature). Lastly, the TPM is a physical device by design, and most IaaS services rely on virtualization, which purposefully divorces cloud nodes from the hardware on which they run. At best, the limitation to physical platforms means that only the cloud provider would have access to the trusted hardware, not the tenants. The Xen hypervisor includes a virtualized TPM implementation that links its security to a physical TPM, but protocols to make use of the vTPM in an IaaS environment do not exist.

To address these challenges, we identify the following desirable features of an IaaS trusted computing system:
- **Secure Bootstrapping**: The system should enable the tenant to securely install an initial root secret into each cloud node. This is typically the node’s long-term cryptographic identity, and the tenant chains other secrets to it to enable secure services.
- **System Integrity Monitoring**: The system should allow the tenant to monitor cloud nodes as they operate and react to integrity deviations within one second.
- **Secure Layering (Virtualization Support)**: The system should support tenant-controlled bootstrapping and integrity monitoring in a VM using a TPM in the provider’s infrastructure. This must be done in collaboration with the provider in a least-privilege manner.
- **Compatibility**: The system should allow the tenant to leverage hardware-rooted cryptographic keys in software to secure services they already use (e.g., disk encryption or configuration management).
- **Scalability**: The system should scale to support bootstrapping and monitoring of thousands of IaaS resources as they are elastically instantiated and terminated.

Prior cloud trusted computing solutions address a subset of these features, but none achieve all. Excalibur [31] supports bootstrapping at scale but does not allow for system integrity monitoring or offer full support for tenant trusted computing inside a VM (i.e., layering). Manferdelli et al. created a system that supports secure layering and bootstrapping but does not support system integrity monitoring, is incompatible with existing cryptographic services, and has not demonstrated cloud-scale operation [25]. Finally, the Cloud Verifier [34] enables system integrity measurement and cloud scalability but does not fully address secure layering or enable secure bootstrapping.

In this paper, we introduce **keylime**, an end-to-end IaaS trusted cloud key management service that supports all the above desired features. The key insight of our work is to utilize trusted computing to bootstrap identity in the cloud and provide integrity measurement to support revocation, but then allow high-level services that leverage these identities to operate independently. Thus, we provide a clean and easy-to-use interface that can integrate with existing security technologies (see Figure 1).

We introduce a novel bootstrap key derivation protocol that combines both tenant intent and integrity measurement to install secrets into cloud nodes. We then leverage the Cloud Verifier [34] pattern of Schiffman et al. to enable periodic attestation that automatically links to identity revocation. Keylime supports the above with secure layering in both bare-metal and virtualized IaaS resources in a manner that minimizes trust in the cloud provider. We demonstrate the compatibility of keylime by securely enabling cloud provisioning with cloud-init, encrypted communication with IPsec, configuration management with Puppet, secret management with Vault, and storage with LUKS/dm-crypt encrypted disks. Unlike existing solutions [39, 25], these services don’t need to be trusted computing aware; they just need to use an identity key and respond to key revocations.

Finally, we show that keylime can scale to handle thousands of simultaneous nodes and perform integrity checks on nodes at rates up to 2,500 integrity reports (quotes) verified per second. We present and evaluate multiple options for deploying our integrity measurement verifier both in the cloud, in a low-cost cloud appliance based on a Raspberry Pi, and on-premises. We show that the overhead of securely provisioning a key using keylime takes less than two seconds. Finally, we find that our system can detect integrity measurement violations in as little as 110ms.

**Figure 1: Interface between trusted hardware and existing software-based security services via the keylime trusted computing service layer.**

## 2. Background

### Trusted Computing
The TPM provides the means for creating trusted systems that are amenable to system integrity monitoring. The TPM, as specified by the Trusted Computing Group (TCG), is a cryptographic co-processor that provides key generation, protected storage, and cryptographic operations. The protected storage includes a set of Platform Configuration Registers (PCRs) where the TPM stores hashes. The TPM uses these registers to store measurements of integrity-relevant components in the system. To store a new measurement in a PCR, the extend operation concatenates the existing PCR value with the new measurement, securely hashes that value, and stores the resulting hash in the register. This hash chain allows a verifier to confirm that a set of measurements reported by the system has not been altered. This report of measurements is called an attestation and relies on the quote operation, which accepts a random nonce and a set of PCRs. These PCRs can include measurements of the BIOS, firmware, boot loader, hypervisor, OS, and applications, depending on the configuration of the system. The TPM reads the PCR values and then signs the nonce and PCRs with a key that is only accessible by the TPM. The key the TPM uses to sign quotes is called an attestation identity key (AIK). We denote a quote using `QuoteAIK(nonce, PCRi : di...)` for a quote using AIK from the TPM with the associated nonce and one or more optional PCR numbers `PCRi` and corresponding data `di` that will be hashed and placed in `PCRi`.

The TPM contains a key hierarchy for securely storing cryptographic keys. The root of this hierarchy is the Storage Root Key (SRK), which the owner generates during TPM initialization. The SRK, in turn, protects the TPM AIK(s) when they are stored outside of the TPM’s nonvolatile storage (NVRAM). Each TPM also contains a permanent credential called the Endorsement Key (EK). The TPM manufacturer generates and signs the EK. The EK uniquely identifies each TPM and certifies that it is a valid TPM hardware device. The private EK never leaves the TPM, is never erased, and can only be used for encryption and decryption during AIK initialization to limit its exposure.

### Integrity Measurement
To measure a system component, the underlying component must be trusted computing-aware. The BIOS in systems with a TPM supports measurement of firmware and boot loaders. TPM-aware boot loaders can measure hypervisors and operating systems [22, 19, 29]. To measure applications, the operating system must support measurement of applications that are launched, such as the Linux Integrity Measurement Architecture [30, 21]. One limitation of approaches like IMA is the inability to monitor the runtime state of the applications. Nexus aims to address this limitation with a new OS that makes trusted computing a first-class citizen and supports introspection to validate runtime state [37]. Several proposals exist for providing runtime integrity monitoring, including LKIM [24] and DynIMA [8]. These systems ensure that a running system is in a known state, allowing a verifier to validate not only that what was loaded was known but that it has not been tampered with while it was running.

In addition to operating system validation, others have leveraged trusted computing and integrity measurement to support higher-level services, such as protected access to data when the client is offline [23], or to enforce access policies on data [26]. Others have proposed mechanisms to protect the server from malicious clients, e.g., in online gaming [1], or applications from a malicious operating system [6, 7, 15]. However, these proposals do not account for the challenges of migrating applications to a cloud environment and often assume existing infrastructure to support trusted computing key management.

### IaaS Cloud Services
In the IaaS cloud service model, users request individual compute resources to execute their applications. For example, users can provision physical hardware, virtual machines, or containers. In this paper, we refer to any of these tenant-provisioned IaaS resources as cloud nodes. Users provision nodes either by uploading a whole image to the provider or by configuring a pared-down base image that the provider makes available. Users often begin by customizing a provider-supplied image, then create their own images (using a tool like Packer) to decrease the amount of time it takes for a node to become ready.

Cloud-init is a standard cross-provider mechanism (e.g., Amazon EC2, Microsoft Azure) that allows cloud tenants to specify bootstrapping data. It accepts a YAML-formatted description of what bootstrapping actions should be taken and supports plugins to take those actions. Examples of such actions include adding users, adding package repositories, or running arbitrary scripts. Users of cloud computing resources at scale typically spawn new cloud instances using an application programming interface and pass along enough bootstrapping information to allow the instance to communicate with a configuration management platform (such as Chef or Puppet) for further instance-specific configuration. These bootstrapping instructions are not encrypted, meaning that a provider could intercept secrets passed via the bootstrapping instructions. In our research, we found that organizations will either (a) send an unprotected pre-shared key for Puppet in their cloud-init bootstrapping actions, or (b) rely on some weaker method of proving identity, such as going off the certificate's common name (hostname).

## 3. Design

To address the limitations of current approaches, we consider the union of trusted computing and IaaS to provide a hardware root-of-trust that tenants can leverage to establish trust in the cloud provider’s infrastructure and in their own systems running on that infrastructure. This section considers the threats that keylime addresses and how to leverage existing trusted computing constructs in a virtualized environment.