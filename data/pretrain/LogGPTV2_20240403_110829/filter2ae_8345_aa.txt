**作者：donky16@360云安全  
本文首发于安全客：**
## 背景介绍
传统waf以规则匹配为主，如果只是无差别的使用规则匹配整个数据包，当规则数量逐渐变多，会造成更多性能损耗，当然还会发生误报情况。为了能够解决这些问题，需要对数据包进行解析，进行精准位置的规则匹配。
正常业务中上传表单使用普遍，不仅能够传参，还可以进行文件的上传，当然这也是一个很好的攻击点，waf想要能够精准拦截针对表单的攻击，需要进行multipart/form-data格式数据的解析，并针对每个部分，如参数值，文件名，文件内容进行针对性的规则匹配拦截。
虽然RFC规范了multipart/form-data相关的格式与解析，但是由于不同后端程序的实现机制不同，而且RFC相关文档也会进行增加补充，最终导致解析方式各不相同。对于waf来说，很难做到对各个后端程序进行定制化解析，尤其是云waf更加无法实现。
所以本文主要讨论，利用waf和后端程序对multipart/form-data的解析差异，造成对waf的bypass。
multipart/form-data相关RFC:
  * 基于表单的文件上传: [RFC1867](https://www.ietf.org/rfc/rfc1867.txt)
  * multipart/form-data: [RFC7578](https://tools.ietf.org/html/rfc7578)
  * Multipart Media Type: [RFC2046#section-5.1](https://tools.ietf.org/html/rfc2046#section-5.1)
## 解析环境
Flask/Werkzeug解析环境：docker/[httpbin](https://github.com/postmanlabs/httpbin)
Java解析环境：Windows10 pro 20H2/Tomcat9.0.35/jdk1.8.0_271/commons-fileupload
Java输出代码：
    String result = "";
    DiskFileItemFactory factoy = new DiskFileItemFactory();
    ServletFileUpload sfu = new ServletFileUpload(factoy);
    try {
        List list = sfu.parseRequest(req);
        for (FileItem fileItem : list) {
            if (fileItem.getName() == null) {
                result += fileItem.getFieldName() + ": " + fileItem.getString() + "\n";
            } else {
                result += "filename: " + fileItem.getName() + "  " + fileItem.getFieldName() + ": " + fileItem.getString() + "\n";
            }
        }
    } catch (FileUploadException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
PHP解析环境：Ubuntu18.04/Apache2.4.29/PHP7.2.24
PHP输出代码：
    <?php
    var_dump($_FILES);
    var_dump($_POST);
## 基础格式
    POST /post HTTP/1.1
    Host: www.example.com:8081
    Accept-Encoding: gzip, deflate
    Accept: */*
    Accept-Language: en
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36
    Connection: close
    Content-Type: multipart/form-data; boundary=I_am_a_boundary
    Content-Length: 303
    --I_am_a_boundary
    Content-Disposition: form-data; name="name"; filename="file.jsp"
    Content-Type: text/plain;charset=UTF-8
    This_is_file_content.
    --I_am_a_boundary
    Content-Disposition: form-data; name="key";
    Content-Type: text/plain;charset=UTF-8
    This_is_a_value.
    --I_am_a_boundary--
此表单数据含有一个文件，name为name，filename为file.jsp，file_content为This_is_file_content.，还有一个非文件的参数，其name为key，value为This_is_a_value.。
httpbin解析结果
    {
      "args": {}, 
      "data": "", 
      "files": {
        "name": "This_is_file_content."
      }, 
      "form": {
        "key": "This_is_a_value."
      }, 
      "headers": {
        "Accept": "*/*", 
        "Accept-Encoding": "deflate, identity;q=0.5", 
        "Accept-Language": "en", 
        "Content-Length": "303", 
        "Content-Type": "multipart/form-data; boundary=I_am_a_boundary", 
        "Host": "www.example.com:8081", 
        "Route-Hop": "1", 
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36"
      }, 
      "json": null, 
      "origin": "10.1.1.1", 
      "url": "http://www.example.com:8081/post"
    }
## 详细解析
### 1\. Content-Type
`Content-Type: multipart/form-data; boundary=I_am_a_boundary`
对于上传表单类型，Content-Type必须为`multipart/form-data`，并且后面要跟一个边界参数键值对（boundary），在表单中分割各部分使用。
倘若`multipart/form-data`编写错误，或者不写`boundary`，那么后端将无法准确解析这个表单的每个具体内容。
### 2\. Boundary
boundary: [RFC2046](https://tools.ietf.org/html/rfc2046#section-5.1)
boundary需要按照以下BNF巴科斯范式
简单解释就是，boundary不能以空格结束，但是其他位置都可以为空格，而且字符长度在1-70之间，此规定语法适用于所有multipart类型，当然并不是所有程序都按照这种规定来进行multipart的解析。
从前面介绍的multipart基础格式可以看出来，真正作为表单各部分之间分隔边界的不仅是Content-Type中boundary的值，真正的边界是由`--`和`boundary`的值和末尾的`CRLF`组成的分隔行，当然为了能够准确解析表单各个部分的数据，需要保证分隔行不会出现在正常的表单中的文件内容或者参数值中，所以RFC也建议使用特定的算法来生成boundary值。
flask解析结果
这里需要注意两个点，第一，最终表单数据最后一个分隔边界，要以`--`结尾。第二，RFC规定原文为
也就是说，整体的分隔边界可以含有`optional linear whitespace`。
#### 空格
注：本文使用空格的地方`[\r\n\t\f\v
]`都可以代替使用，文中只是介绍了使用空格的结果，大家可以测试其他的，waf或者后端程序在解析`\n`时，会产生很多不同结果，感兴趣可自行测试。
首先使用boundary的值后面加空格进行测试，flask和php都能够正常的解析出表单内容。
php解析结果
虽然boundary的值后面加了空格，但是在作为分隔行的时候并没有空格也可以正常解析，但是经测试发现如果按照RFC规定那样直接在分隔行中加入空格，效果就会不一样。
对于flask来说是按照了RFC规定实现，无论Content-Type中boundary的值后面是不加空格还是加任意空格，在表单中非结束分隔行里都可以随意加空格，都不影响表单数据解析，但是需要注意的就是，在最后的结束分隔行中，加空格会导致解析失败。
很有意思的是php解析过程中，在非结束分隔行中不能增加空格，而在结束分隔行中增加空格，却不会影响解析。
可以看到，加了空格的分隔行内的文件内容数据没有被正确解析，而没加空格的非文件参数被解析成功，而且结束分隔行中也添加了空格。
测试的时候偶然发现在如果在`multipart/form-data`和`;`之间加空格，如`Content-Type: multipart/form-data ; boundary="I_am_a_boundary"`，flask会造成解析失败，php解析正常。
正常来说，通过正则进行匹配解析的flask应该不会这样，具体实现在`werkzeug/http.py:L406`。
简单来说就是将`Content-Type: multipart/form-data ;
boundary="I_am_a_boundary"`进行正则匹配，然后将第一组匹配结果当作mimetype，第二组作为rest，由后面处理boundary取值，看下这个正则。
    _option_header_start_mime_type = re.compile(r",\s*([^;,\s]+)([;,]\s*.+)?")
为了看着美观，使用regex101看下。
很明显，由于第一组匹配非空字符，所以到空格处就停了，但是第二组必须是`[;,]`开头，导致第二组匹配值为空，无法获取boundary，最终解析失败。
#### 双引号
boundary的值是支持用双引号进行编写的，就像是表单中的参数值一样，这样在写分隔行的时候，就可以将双引号内的内容作为boundary的值，php和flask都支持这种写法。使用单引号是无法达到效果的，这也是符合上文提到的BNF巴科斯范式的`bcharsnospace`的。
测试一下让重复多个双引号，或者含有未闭合的双引号或者双引号前后增加其他字符会发生什么。
`Content-Type: multipart/form-data; boundary=a"I_am_a_boundary"`
`Content-Type: multipart/form-data; boundary= "I_am_a_boundary"`
`Content-Type: multipart/form-data; boundary= "I_am_a_boundary"a`
`Content-Type: multipart/form-data; boundary=I_am_a_boundary"`