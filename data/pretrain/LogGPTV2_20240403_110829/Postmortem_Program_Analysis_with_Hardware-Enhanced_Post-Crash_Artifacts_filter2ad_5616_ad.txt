Stack overﬂow
Stack overﬂow
Stack overﬂow
Stack overﬂow
Heap overﬂow
Heap overﬂow
Integer overﬂow
Integer overﬂow
Integer overﬂow
Null pointer
Null pointer
Null pointer
Use-after-free
Invalid free
50
90
92
315
867
895
3123
3651
4064
6026
7338
10905
17056
18569
25385
25713
29521
50787
70854
78244
102200
141
28720
158
3426
10494
67
2009
42165
551
672
56.61
59.66
120.95
0.59
0.37
0.34
0.34
0.39
0.58
0.35
0.45
0.40
0.37
0.59
0.32
4.17
0.33
0.33
0.51
0.32
2.43
0.54
0.40
0.62
0.89
4.27
0.37
2.94
0.65
2.14
1.39
3
2
3
3
16
7
7
29
3
6
4
14
11
2
19
3
12
46
49
7
33
3
237
11
31
1
10
23
7
6
16
2
2
2
2
7
4
3
6
2
2
2
10
5
2
6
2
2
5
4
2
5
2
7
4
7
NA
5
2
4
1
4
1
0
0
3
0
10
28
15
4
86
21
7
122
223
0
346
12
730
396
20
1033
0
111
0
117
0
5
79
80
0
0































Time
1 sec
1 sec
1 sec
3 sec
1 sec
1 min
4 min
4 min
44 sec
5 min
30 min
30 sec
8 min
7 min
52 min
40 min
1 min
4 sec
46 min
15 min
6 hour
1 sec
14 min
1 sec
3 min
2 sec
1 sec
1sec
2 min
0.17 sec
13 sec
Table 2: The list of program crashes resulting from various vulnerabilities. CVE-ID speciﬁes the ID of the CVEs. Trace length
indicates the lines of instructions that POMP reversely executed. Size of mem shows the size of memory used by the crashed
program (with code sections excluded). # of taint and Ground truth describe the lines of instructions automatically
pinpointed and manually identiﬁed, respectively. Mem addr unknown illustrates the amount of memory locations, the addresses
of which are unresolvable.
crash. We took our manual analysis as ground truth and
compared them with the output of POMP. In this way,
we validated the effectiveness of POMP in facilitating
failure diagnosis. More speciﬁcally, we compared the
instructions identiﬁed manually with those pinpointed by
POMP. The focuses of this comparison include x examin-
ing whether the root cause of that crash is enclosed in the
instruction set POMP automatically identiﬁed, y investi-
gating whether the output of POMP covers the minimum
instruction set that we manually tracked down, and z
exploring if POMP could signiﬁcantly prune the execution
trace that software developers (or security analysts) have
to manually examine.
In order to evaluate the efﬁciency of POMP, we
recorded the time it took when spotting the instructions
that truly pertain to each program crash. For each test
case, we also logged the instructions that POMP reversely
executed in that this allows us to study the relation be-
tween efﬁciency and the amount of instructions reversely
executed.
Considering pinpointing a root cause does not require
reversely executing the entire trace recorded by Intel PT,
it is worth of noting that, we selected and utilized only a
partial execution trace for evaluation. In this work, our
selection strategy follows an iterative procedure in which
we ﬁrst introduced instructions of a crashing function
to reverse execution. If this partial trace is insufﬁcient
for spotting a root cause, we traced back functions previ-
ously invoked and then included instructions function-by-
function until that root cause can be covered by POMP.
6.3 Experimental Results
We show our experimental results in Table 2. Except
for test cases 0verkill and aireplay-ng, we ob-
serve, every root cause is included in a set of instructions
that POMP pinpointed. Through a comparison mentioned
above, we also observe each set encloses the correspond-
ing instructions we manually identiﬁed (i. e., ground
truth). These observations indicate that POMP is effective
USENIX Association
26th USENIX Security Symposium    27
in locating instructions that truly contribute to program
crashes.
In comparison with instructions that POMP needs to
reversely execute, we observe, the instructions eventu-
ally tainted are signiﬁcantly less. For example, backward
analysis needs to examine 10,905 instructions in order
to pinpoint the root cause for crashing program Unalz,
whereas POMP highlights only 14 instructions among
which half of them truly pertain to the crash. Given that
backward taint analysis mimics how a software developer
(or security analyst) typically diagnoses the root cause of
a program failure, this observation indicates that POMP
has a great potential to reduce manual efforts in failure
diagnosis.
Except for test case coreutils, an instruction set
produced by POMP generally carries a certain amount
of instructions that do not actually contribute to crashes.
Again, take Unalz for example. POMP over-tainted 7
instructions and included them in the instruction set it
identiﬁed. In the usage of POMP, while this implies a
software developer needs to devote additional energies to
those instructions not pertaining to a crash, this does not
mean that POMP is less capable of ﬁnding out instructions
truly pertaining to a crash. In fact, compared with hun-
dreds and even thousands of instructions that one had to
manually walk through in failure diagnosis, the additional
effort imposed by over-tainting is minimal and negligible.
Recall that in order to capture a root cause, the design
of POMP taints all variables that possibly contribute to the
propagation of a bad value. As our backward taint analy-
sis increasingly traverses instructions, it is not difﬁcult to
imagine that, an increasing number of variables might be
tainted which causes instructions corresponding to these
variables are treated as those truly pertaining to program
crashes. As such, we generally observe more instructions
over-tainted for those test cases, where POMP needs to
reversely execute more instructions in order to cover the
root causes of their failures.
As we discuss in Section 4, ideally, POMP can employ
a recursive hypothesis test to perform inverse operations
for instructions that carry unknown memory access. Due
to the concern of computation complexity, however, we
limit the recursion in at most two depths. As such, reverse
execution leaves behind a certain amount of unresolvable
memory. In Table 2, we illustrate the amount of memory
the addresses of which remain unresolvable even after a
2-depth hypothesis test has been performed. Surprisingly,
we discover POMP can still effectively spot instructions
pertaining to program crashes even though it fails to re-
cover a certain amount of memory. This implies that our
design reasonably balances the utility of POMP as well as
its computation complexity.
Intuition suggests that the amount of memory unresolv-
able should correlate with the number of instructions that
POMP reversely executes. This is because the effect of
an unresolvable memory might be propagated as more in-
structions are involved in reverse execution. While this is
generally true, an observation from test case corehttp
indicates a substantially long execution trace does not al-
ways necessarily amplify the inﬂuence of unknown mem-
ory access. With more instructions reversely executed,
POMP may obtain more evidence to reject the hypotheses
that it fail to determine, making unknown memory access
resolvable. With this in mind, we speculate POMP is not
only effective in facilitating failure diagnosis perhaps also
helpful for executing substantially long traces reversely.
As a future work, we will therefore explore this capability
in different contexts.
In Table 2, we also illustrate the amount of time that
POMP took in the process of reverse execution and back-
ward taint analysis. We can easily observe POMP typically
completes its computation in minutes and the time it took
is generally proportional to the number of instructions
that POMP needs to reversely execute. The reason be-
hind this observation is straightforward. When reverse
execution processes more instructions, it typically encoun-
ters more memory aliases. In verifying memory aliases,
POMP needs to perform hypothesis tests which are slightly
computation-intensive and time-consuming.
With regard to test case aireplay-ng in which
POMP fails to facilitate failure diagnosis, we look closely
to instructions tainted as well as those reversely executed.
Prior to the crash of aireplay-ng, we discover the
program invoked system call sys_read which writes a
data chunk to a certain memory region. Since both the
size of the data chunk and the address of the memory
are speciﬁed in registers, which reverse execution fails
to restore, POMP treats sys_read as a “super” interven-
ing tag that blocks the propagation of many deﬁnitions,
making the output of POMP less informative to failure
diagnosis.