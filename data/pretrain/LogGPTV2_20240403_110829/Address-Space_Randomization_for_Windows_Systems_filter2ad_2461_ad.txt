to random addresses. The addition of randomization
has been without a glitch, and has not caused any per-
ceptible loss of functionality or performance.
6.2 Eﬀectiveness on Real-world Attacks
We tested the eﬀectiveness of DAWSON in stopping
several real-world attacks. We used the Metasploit
framework (http://www.metasploit.com/) for test-
ing purposes. Our testing included all working metas-
ploit attacks on Metasploit Version 2.4 that were ap-
plicable to our test platform (Windows XP SP1), and
are shown in Figure 4. We ﬁrst ran the exploits with
DAWSON protections enabled but with randomization
set to zero (i.e., no memory address is randomized)
and veriﬁed that the exploits were successful. We then
used DAWSON with non-zero randomization and ver-
iﬁed that four of the ﬁve failed. The successful attack
was one that relied on predictability of code addresses
in the executable, since DAWSON could not randomize
these addresses due to unavailability of relocation infor-
mation for the executable section for this server. Had
the EXE section been randomized, this attack would
have failed as well10.
10Speciﬁcally, it used a stack-smashing vulnerability to return
to a speciﬁc location in the executable. This location had two pop
instructions followed by a ret instruction. At the point of return,
the stack top contained a pointer that pointed into a buﬀer on
the stack that held the input from the attacker. This meant that
the return instruction transferred control to the attacker’s code
stored in this buﬀer.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:28 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Program
Workload
Base DAWSON
Notepad
Winword
Excel
Powerpoint
Sqlserver
Firefox
Testheap
Start up, open a 1.4 MB text ﬁle
Start up, open a 42 MB word document
Start up, open a 398KB spreadsheet
Start up, open a 4MB powerpoint ﬁle
Startup, login to database, run 5 SQL queries, shutdown
Start up and visit www.google.com
issue 1M malloc’s of random-size blocks ranging up to 64K
Runtime
1.031s
5.489s
0.794s
1.216s
0.992s
1.070s
9.395s
Figure 5. Performance overhead of DAWSON
Standard
Overhead Deviation
2.5%
3.8%
2.6%
2.2%
2.4%
1.2%
1.9%
3.4%
3.2%
2.9%
2.1%
3.1%
10.5%
12.4%
6.3 Eﬀectiveness on Sophisticated Attacks
The problem with real-world attacks is that they tend
to be rather simple. In order to test the eﬀectiveness
against many diﬀerent types of vulnerabilities, we de-
veloped a synthetic application that was seeded with
several vulnerabilities. We then developed 14 distinct
attacks to exploit these vulnerabilities:
• stack buﬀer overﬂow attacks that overwrite
– return address to point to
∗ 1. injected code on stack
∗ existing call esp code in
· 2. the executable
· 3. ntdll DLL
· 4. kernel32 DLL
· 5. one of the application’s DLLs
∗ 6. existing code in a DLL (“return-to-libc”)
Section ﬁeld) with DLL code address
return address on the stack to point to DLL code
– 7. a local function pointer to point to injected code
• heap overﬂow attacks that overwrite
– 8. a local function pointer with address of DLL
– 9. a function pointer in the PEB (RtlCritical-
• 10. a heap lookaside list overﬂow that overwrites the
• 11. a process heap critical section list overﬂow that
• integer overﬂow attacks that overwrite
– 12. a global function pointer with DLL address
– 13. an exception handler pointer stored on the
stack so that it points to existing code in a DLL
• 14. a format string exploit on a sprintf function
overwrites a function pointer with DLL address
that prints to a stack-allocated buﬀer.
We veriﬁed that when DAWSON is run with zero ran-
domization, all these exploits worked on Windows XP
SP1 as well as SP2. Finally, we ran DAWSON in nor-
mal mode and veriﬁed that all 14 attacks failed.
6.4 Runtime performance
Performance measurements were carried out on a
Dell PowerEdge SC420 (2.8GHz Pentium 4 CPU with
2.5GB memory) running Microsoft Windows XP SP2.
Most of DAWSON overhead occurs at application
initialization time. This is because during startup,
operations that are associated with signiﬁcant DAW-
SON overheads occur far more frequently than during
steady-state operation, e.g., DLL rebasing, dynamic
memory allocations and thread creations. For this
reason, our measurements are concerned mainly with
startup times. The overheads that we measured for
various programs are shown in Figure 5. “Base run-
time” refers to the total CPU time (in seconds) for
running a benchmark without DAWSON. The numbers
reported are the average across ten runs. Note that
for most applications, the measured overheads were
around 3%. Since this number is close to the standard
deviation in our measurements, the overhead would es-
sentially be imperceptible to a user. Firefox is an ex-
ception, and our analysis found that it performs a very
large number of memory allocations at startup time
(about 300K). Since DAWSON introduces signiﬁcant
overheads for malloc calls, Firefox startup is slowed
down by 10%. When malloc randomizations were dis-
abled, the overhead fell down to about 1%. This result
is similar to that of testheap, a malloc-intensive micro
benchmark we created.
In addition, we measured boot-time overheads,
which is mainly concerned with creating rebased ver-
sions of ntdll, kernel32 and user32 DLLs on the disk.
DAWSON added 0.53 seconds to the boot time, with
a standard deviation of 3.2% across six runs.
7 Conclusion
In this paper, we presented DAWSON, a lightweight
approach for eﬀective defense of Windows-based sys-
tems against remotely launched memory corruption at-
tacks. DAWSON protects all services and applications
by randomizing their memory layout. Speciﬁcally, all
code sections and writable data segments are rebased,
providing a minimum of 15-bits of randomness in their
locations. Our technique does not require access to the
source code of applications or the operating system.
However, in order to provide full protection, it does re-
quire a minimal level of help from the vendors in terms
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:28 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006of providing relocation information for the executables.
We established the eﬀectiveness of DAWSON using
a combination of theoretical analysis and experiments.
DAWSON introduces low performance overheads, and
does not impact the functionality or usability of pro-
tected systems. These factors make it a practical solu-
tion for stopping a broad range of memory corruption
attacks. A widespread deployment of DAWSON can
signiﬁcantly alleviate the common mode failure prob-
lem for the Windows monoculture.
Acknowledgements
We would like to thank Karl Levitt and Jeﬀ Rowe for
numerous dicussions on the DAWSON project; Tufan
Demir for his contributions to proof-of-concept proto-
types for some of the techniques that were implemented
into DAWSON; and Jason Li for developing an early
version of our vulnerable synthetic application. We
would also like to thank Mark Cornwell for his exten-
sive contributions in testing and evaluation; and Jason
Minto for his help in various phases of this project. Fi-
nally, we would like to thank Sandeep Bhatkar and the
anonymous reviewers for their thoughtful reviews that
signiﬁcantly improved the ﬁnal version of this paper.
References
[1] Arash Baratloo, Navjot Singh, and Timothy Tsai.
Transparent run-time defense against stack smashing
attacks. In USENIX Technical Conference, 2000.
[2] Elena Gabriela Barrantes, David H. Ackley, Stephanie
Forrest, Trek S. Palmer, Darko Stefanovi´c, and
Dino Dai Zovi. Randomized instruction set emulation
to disrupt binary code injection attacks. In ACM Com-
puter and Communications Security (CCS), 2003.
[3] Sandeep Bhatkar, Daniel C. DuVarney, and R. Sekar.
Address obfuscation: An eﬃcient approach to combat
a broad range of memory error exploits. In USENIX
Security Symposium, 2003.
[4] Sandeep Bhatkar, R. Sekar, and Daniel C. DuVarney.
Eﬃcient techniques for comprehensive protection from
memory error exploits. In USENIX Security Sympo-
sium, 2005.
[5] Tzi-cker Chiueh and Fu-Hau Hsu. RAD: A compile-
time solution to buﬀer overﬂow attacks. In IEEE Int’l
Conference on Distributed Computing Systems, 2001.
[6] Crispin Cowan, Steve Beattie, John Johansen, and
Perry Wagle. PointGuard: Protecting pointers from
In USENIX Security
buﬀer overﬂow vulnerabilities.
Symposium, 2003.
[7] Crispin Cowan et al. StackGuard: Automatic adaptive
detection and prevention of buﬀer-overﬂow attacks. In
USENIX Security Symposium, 1998.
[8] Hiroaki Etoh and Kunikazu Yoda.
ing from stack-smashing attacks.
Protect-
Published on
World-Wide Web at URL http://www.trl.ibm.com/
projects/security/ssp/main.html, 2000.
[9] Michael Howard.
ASLR features
in Windows
Published on World-Wide Web at URL
Vista.
http://blogs.msdn.com/michael howard/archive/
2006/05/26/608315.aspx, 2006.
[10] Trevor Jim, Greg Morrisett, Dan Grossman, Micheal
Hicks, James Cheney, and Yanling Wang. Cyclone: a
safe dialect of C. In USENIX Annual Technical Con-
ference, 2002.
[11] Robert W. M. Jones and Paul H. J. Kelly. Backwards-
compatible bounds checking for arrays and pointers
in C programs. In Third International Workshop on
Automated Debugging, 1997.
[12] Yariv Kaplan. API spying techniques for windows 9x,
NT and 2000. Published on World-Wide Web at URL
www.internals.com/articles/apispy/apispy.htm,
2000.
[13] Gaurav S. Kc, Angelos D. Keromytis, and Vassilis
Prevelakis. Countering code-injection attacks with
instruction-set randomization. In ACM Computer and
Communications Security (CCS), 2003.
[14] Vladimir Kiriansky, Derek Bruening, and Saman Ama-
rasinghe. Secure execution via program shepherding.
In USENIX Security Symposium, 2002.
[15] George C. Necula, Scott McPeak, and Westley
Weimer. CCured: type-safe retroﬁtting of legacy code.
In ACM Symposium on Principles of Programming
Languages (POPL), 2002.
[16] PaX.
Published on World-Wide Web at URL
http://pax.grsecurity.net, 2001.
[17] Manish Prasad and Tzi cker Chiueh. A binary rewrit-
ing defense against stack-based buﬀer overﬂow attacks.
In USENIX Annual Technical Conference, 2003.
[18] Mark Russinovich and Bryce Cogswell. Windows NT
system-call hooking. Dr. Dobb’s Journal, Jan 1997.
[19] Olatunji Ruwase and M. S. Lam. A practical dynamic
buﬀer overﬂow detector. In Network and Distributed
System Security Symposium, 2004.
[20] Eugune Tsyrklevich. Ozone. Published on World-Wide
http://www.blackhat.com/presentations/
Web
bh-usa-05/bh-us-05-tsyrklevich.pdf, 2005.
[21] WehnTrust. Published on World-Wide Web at URL
http://www.wehnus.com/products.pl, 2006.
[22] windbg. Published on World-Wide Web at URL
http://www.microsoft.com/whdc/devtools/
debugging/installx86.mspx, 2006.
[23] Jun Xu, Zbigniew Kalbarczyk, and Ravishankar K.
Iyer. Transparent runtime randomization for secu-
rity. In Symposium on Reliable and Distributed Sys-
tems (SRDS), 2003.
[24] Wei Xu, Daniel C. Duvarney, and R. Sekar. An eﬃ-
cient and backwards-compatible transformation to en-
sure memory safety of C programs. In ACM SIGSOFT
International Symposium on the Foundations of Soft-
ware Engineering, 2004.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:28 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006