### 6.2 Effectiveness on Real-World Attacks

We evaluated the effectiveness of DAWSON in mitigating several real-world attacks using the Metasploit framework (http://www.metasploit.com/). Our testing included all working Metasploit attacks applicable to our test platform (Windows XP SP1), as shown in Figure 4. Initially, we ran the exploits with DAWSON's protections enabled but with randomization set to zero (i.e., no memory address randomization). This confirmed that the exploits were successful. Subsequently, we enabled non-zero randomization and found that four out of five attacks failed. The one successful attack exploited the predictability of code addresses in the executable, which DAWSON could not randomize due to the unavailability of relocation information for the executable section. If this section had been randomized, the attack would have failed.

**Note:** Specifically, the successful attack used a stack-smashing vulnerability to return to a specific location in the executable. This location contained two pop instructions followed by a ret instruction. At the point of return, the stack top held a pointer to a buffer on the stack containing the attacker's input, allowing control to be transferred to the attacker's code.

### 6.3 Effectiveness on Sophisticated Attacks

To test DAWSON's effectiveness against more sophisticated vulnerabilities, we developed a synthetic application seeded with various vulnerabilities and created 14 distinct attacks:

1. **Stack Buffer Overflow Attacks:**
   - Overwrite the return address to point to:
     - Injected code on the stack
     - Existing `call esp` code in the executable
     - Code in ntdll DLL
     - Code in kernel32 DLL
     - Code in one of the applicationâ€™s DLLs
     - Existing code in a DLL (return-to-libc)
   - Overwrite a local function pointer to point to injected code

2. **Heap Overflow Attacks:**
   - Overwrite a local function pointer with an address of a DLL
   - Overwrite a function pointer in the PEB (RtlCriticalSection)

3. **Heap Lookaside List Overflow:**
   - Overwrite a heap lookaside list

4. **Process Heap Critical Section List Overflow:**
   - Overwrite a process heap critical section list

5. **Integer Overflow Attacks:**
   - Overwrite a global function pointer with a DLL address
   - Overwrite an exception handler pointer stored on the stack to point to existing code in a DLL

6. **Format String Exploit:**
   - Use a format string exploit on a `sprintf` function to overwrite a function pointer with a DLL address, printing to a stack-allocated buffer

We verified that when DAWSON was run with zero randomization, all these exploits worked on both Windows XP SP1 and SP2. When DAWSON was run in normal mode, all 14 attacks failed.

### 6.4 Runtime Performance

Performance measurements were conducted on a Dell PowerEdge SC420 (2.8GHz Pentium 4 CPU with 2.5GB memory) running Microsoft Windows XP SP2. Most of DAWSON's overhead occurs during application initialization, as operations such as DLL rebasing, dynamic memory allocations, and thread creations are more frequent at startup. Therefore, our measurements focused on startup times. The overheads measured for various programs are shown in Figure 5. "Base runtime" refers to the total CPU time (in seconds) for running a benchmark without DAWSON. The reported numbers are the average across ten runs. For most applications, the measured overheads were around 3%, which is close to the standard deviation, making the overhead imperceptible to users. Firefox is an exception, as it performs a large number of memory allocations at startup (about 300K). DAWSON introduces significant overhead for `malloc` calls, slowing down Firefox startup by 10%. Disabling `malloc` randomizations reduced the overhead to about 1%, similar to the results for `testheap`, a malloc-intensive micro-benchmark we created.

Additionally, we measured boot-time overheads, primarily concerned with creating rebased versions of ntdll, kernel32, and user32 DLLs on the disk. DAWSON added 0.53 seconds to the boot time, with a standard deviation of 3.2% across six runs.

### 7. Conclusion

In this paper, we presented DAWSON, a lightweight approach for defending Windows-based systems against remotely launched memory corruption attacks. DAWSON protects all services and applications by randomizing their memory layout, providing a minimum of 15 bits of randomness in their locations. Our technique does not require access to the source code of applications or the operating system but does need minimal vendor support in providing relocation information for executables.

We established DAWSON's effectiveness through theoretical analysis and experiments. DAWSON introduces low performance overheads and does not impact the functionality or usability of protected systems, making it a practical solution for stopping a broad range of memory corruption attacks. Widespread deployment of DAWSON can significantly alleviate the common mode failure problem for the Windows monoculture.

### Acknowledgements

We thank Karl Levitt and Jeff Rowe for numerous discussions on the DAWSON project; Tufan Demir for his contributions to proof-of-concept prototypes; Jason Li for developing an early version of our vulnerable synthetic application; Mark Cornwell for extensive testing and evaluation; and Jason Minto for his help in various phases of this project. We also thank Sandeep Bhatkar and the anonymous reviewers for their thoughtful reviews, which significantly improved the final version of this paper.

### References

[References listed as in the original text]

---

This optimized version improves the clarity, coherence, and professionalism of the text, ensuring it is well-structured and easy to understand.