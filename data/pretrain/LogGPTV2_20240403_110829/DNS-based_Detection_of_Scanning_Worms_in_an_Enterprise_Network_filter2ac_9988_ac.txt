week period, 74,610 alerts were generated as a result of
worm propagation attempts from the IDN to the lab. Ta-
ble 3 contains the speci(cid:2)c propagation attempts by date for
each worm. Using the Symantec taxonomy for a naming
convention, the three worms detected were: W32.Sasser,
W32.Blaster, and a variant of W32.Gaobot. We estimate
that these worms infect a total of 195 IDN hosts. Figure
4 illustrates the worm activity of the three worms over the
entire analysis period.
Table 3. IDN Worm Activity
Alerts
Date
06-24-2004
06-25-2004
06-26-2004
06-27-2004
06-28-2004
06-29-2004
06-30-2004
Total
Sasser
25,052
5,946
8,894
4,680
739
2,731
1,383
49,425
Blaster
1,104
539
721
1,353
1,085
532
1,680
7,014
Infected Hosts
Worm Sasser
Total
101
Blaster
38
Gaobot
3,299
9,137
761
2,516
21
1,778
659
18,171
Gaobot
56
Table 4. Additional IDN Alerts
Alerts Activity
125 Optix Pro Trojan Horse scan-
ning: port 3410 TCP
5 Random scanning:
port
60510-60518 TCP
12
Ident/auth service: 113 TCP
49 Common Unix Printing Sys-
tem (CUPS): 631 TCP
Total Alerts: 191
Date
06-24-2004
06-25-2004
06-26-2004
06-27-2004
06-28-2004
06-29-2004
06-30-2004
Total
# of Alerts
18
20
1
6
1
4
2
52
Table 5. Lab Alerts
6 Internal Lab, 3 Streaming Audio
4 Streaming Audio
Known False Positives True False Positives
9 HTTP
16 HTTP
1 HTTP
6 HTTP
1 HTTP
2 HTTP
1 HTTP
36
2 Port 90 TCP
1 Port 90 TCP
16
s
n
a
c
S
m
r
o
W
d
e
v
r
e
s
b
O
f
o
r
e
b
m
u
N
Observed Daily Worm Scans
W32.Blaster
W32.HLLW.Gaobot.gen
W32.Sasser
Total Activity
 25000
 20000
 15000
 10000
 5000
 0
24/06/04
25/06/04
26/06/04
28/06/04
29/06/04
30/06/04
27/06/04
Date
Figure 4. IDN Worm Activity
In addition to the worm activity, the prototype detected
other forms of scanning activity and as a result generated
191 alerts. Table 4 reveals the number and type of alerts
generated.
A full analysis of the false positives generated by the
prototype is given in section 4.4.
4.4 False Positives and False Negatives
False Positives Results Analysis
52 false alerts were generated from monitoring the lab
cell, and 191 false alerts from the IDN cell. Based on our
analysis in the previous section, we have categorized these
false positives as occurring due to:
1. Authorized network communications that could be
incorporated into a whitelist but were not in our pro-
totype testing.
2. Network con(cid:2)guration errors that could be elimi-
nated with proper system administration.
3. Suspicious scanning activity other than worm propa-
gation.
4. True false positives.
These are discussed in turn below.
Authorized network communications. For the pur-
poses of our analysis, we initially allowed for a three hour
training period to generate the whitelist. If this was ex-
tended to a few days, the whitelist could be augmented
with additional entries, greatly reducing the instances of
legitimate network activity generating false alerts.
Network con(cid:2)guration errors. 6 of the false positives
were due to an isolated network con(cid:2)guration problem.
Non-routable IP addresses passed through the (cid:2)rewall as
a result of a router con(cid:2)guration error.
Increasing the
training period should also allow for suf(cid:2)cient time to de-
tect any network con(cid:2)gurations errors that may generate
alerts.
Suspicious scanning activity. 125 alerts were gener-
ated as a result of an IDN system scanning for the Optix
Pro Trojan horse [3] (i.e. port 3410 TCP). 5 alerts were
generated as a result of an IDN system scanning for ser-
vices listening on port numbers between the ranges of
60510 and 60518 TCP. Our preliminary version of the pro-
totype software does not distinguish between scanning for
the purposes of worm propagation or for some other activ-
ity. Although these alerts are considered false positives,
they do warn an administrator that potentially malicious
activity is occurring within the network cell. We discuss
this in greater detail in Section 6.
True false positives. Those alerts that cannot be at-
tributed to the previous three categories are considered
true false positives.
After further analysis of the lab monitoring results, we
determined that 10 of the 52 alerts resulted from autho-
rized network communications. 6 of the alerts resulted
from a network con(cid:2)guration error. The remaining 36
alerts we classify as true false positives. With respect to
the IDN monitoring results, we determined that 130 alerts
were caused by non-worm related malicious activity and
61 alerts resulted from authorized network communica-
tions. None of the alerts were what we classify as true
false positives. Table 6 summarizes the number and type
of false positives generated from monitoring the lab and
IDN cells.
Based on manual inspection of the network traces, we
Table 6. False Positive Results Analysis
IDN
Lab
Total Alerts
Worm Propagation Alerts
Pre-Analysis False Positives
Whitelist Inclusion
Network Con(cid:2)guration Errors
Suspicious Activity
True False Positives
52
0
52
10
6
0
36
74,801
74,610
191
61
0
130
0
offer some insight into the cause of the 36 true false posi-
tives. The majority were caused by TCP connections ini-
tiated using a DNS resource record with a very low TTL
and then not properly closed. It was a prototype design
decision to detect a new TCP connection by simply ob-
serving a packet with the SYN (cid:3)ag set. The individual
connections themselves were not tracked and maintained
in state. Subsequently, we have observed HTTP connec-
tions that have been initiated using a DNS resource record
with a TTL as low as 10 seconds. Several of these low
TTL connections, all to the same web server, do not ter-
minate properly. The client (i.e. inside the lab) does not
send the (cid:2)nal ACK in the FIN ACK exchange. Instead, in
some cases, the client sends a SYN to start a new session
with the same server. This connection is initiated after the
TTL has expired.
Approximately 60% (i.e. 22 alerts) of our true false pos-
itives were caused by this type of network traf(cid:2)c. Subse-
quent versions of our detection prototype could account
for this network activity in two ways:
1. Enforce a minimum TTL: those TTL values lower
than a minimum threshold (e.g. 600 seconds), could
be given a default value (e.g. 600 seconds) in the
DCE. According to our analysis, this would have re-
duced our true false positive count from 36 to 14 (i.e.
60% reduction). The increased probability of a false
negative due to this arbitrary increase in TTL values
would be negligible (see discussion later in this sec-
tion).
2. Require a second anomalous connection: we could
modify our algorithm to generate an alert after two
anomalous connections were observed from a sys-
tem trying to connect to two separate systems within
a (cid:2)nite time window. According to our analysis, this
would have reduced our true false positives from 36
to 4. Requiring the observation of a second connec-
tion attempt would greatly reduce our false positives
and only slightly degrade our detection precision (i.e.
detect worm propagation after observing only two in-
fection attempts).
Finally, although no UDP based alerts were generated dur-
ing our analysis, we must comment on the false positive
potential of persistent UDP connections. UDP datagrams
are treated atomically by our prototype in that each data-
gram is veri(cid:2)ed against the connection candidate list. If
the exchange of datagrams between the two systems is
longer than the TTL of the DNS resource record that ini-
tially started the exchange, a false positive will be gen-
erated. This could become a concern if the TTL of the
resource record is very low (i.e. typically the default TTL
value is 1 day).
False Negatives Results Analysis A false negative oc-
curs when malicious activity occurs and no subsequent
alert is generated. It was a design decision to monitor the
network cell at the ingress/egress points, so that all new
connections could be easily detected. Another considera-
tion for this design decision was the fact that an end user
can specify any DNS server they wish to use thus exclud-
ing the one administratively provided to them. As long
as the network egress/ingress point is monitored, any ex-
ternal DNS queries can be detected and incorporated in
the detection algorithm. However, by not monitoring the
cell activity to the local DNS server, we will not be able
to detect when the local systems contact the local DNS
server. The prototype system maintains the DNS resource
records in state respecting the TTL values for each record.
If we detect an internal system starting a new connection
to a remote system, the prototype checks the candidate
connection list to determine if the connection is valid. In
effect, we do not verify that the individual system has ac-
tually requested and received the DNS resource record,
but rather that the resource record is available in the local
DNS server. This is a subtle but important distinction.
Consider the scenario where an internal system be-
comes infected with a scanning worm. There exists the
possibility that it may scan a system whose IP address is
in the connection candidate data structure. That is, the in-
tended victim was previously accessed by a system in the
cell and the associated entry in the connection candidate
data structure still exists. To determine the probability of
this, we used the worm model discussed by Staniford et
al. [7].
We assume that the worm targets victims at random over
the entire IPv4 address space. Therefore, if r is the number
of scans, a single host has a
probability of being
reached by the scan. If N is equal to the number of entries
in the connection candidate data structure, the probability
that a scan from the internal network will be directed at
one of the data structures entries is





(1)


Table 7. Probability of False Negatives due to Remote DNS Monitoring
DNS Records
500
1000
2000
5000
10000
10 Infected Systems
! 
! 
*"+! 
!$
/0
!$

100 Infected Systems
! 
(!$
!$
!$