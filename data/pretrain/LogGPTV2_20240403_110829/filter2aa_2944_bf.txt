up a token in the local token database. For OAuth2, this is no longer quite so simple
when tokens are issued by the AS and not by the API. Although you could share a
token database between the AS and each API, this is not desirable because sharing
database access increases the risk of compromise. An attacker can try to access the
database through any of the connected systems, increasing the attack surface. If just
one API connected to the database has a SQL injection vulnerability, this would
compromise the security of all.
 Originally, OAuth2 didn’t provide a solution to this problem and left it up to the
AS and resource servers to decide how to coordinate to validate tokens. This changed
with the publication of the OAuth2 Token Introspection standard (https://tools.ietf
.org/html/rfc7662) in 2015, which describes a standard HTTP endpoint on the AS
that the RS can call to validate an access token and retrieve details about its scope and
resource owner. Another popular solution is to use JWTs as the format for access
tokens, allowing the RS to locally validate the token and extract required details from
the embedded JSON claims. You’ll learn how to use both mechanisms in this section.
7.4.1
Token introspection
To validate an access token using token introspection, you simply make a POST
request to the introspection endpoint of the AS, passing in the access token as a param-
eter. You can discover the introspection endpoint using the method in section 7.2.3 if
the AS supports discovery. The AS will usually require your API (acting as the resource
server) to register as a special kind of client and receive client credentials to call the
endpoint. The examples in this section will assume that the AS requires HTTP Basic
authentication because this is the most common requirement, but you should check
the documentation for your AS to determine how the RS must authenticate.
TIP
To avoid historical issues with ambiguous character sets, OAuth requires
that HTTP Basic authentication credentials are first URL-encoded (as UTF-8)
before being Base64-encoded.
Listing 7.5 shows the constructor and imports for a new token store that will use
OAuth2 token introspection to validate an access token. You’ll implement the remain-
ing methods in the rest of this section. The create and revoke methods throw an
exception, effectively disabling the login and logout endpoints at the API, forcing
5
True or False: The authorization code grant should always be used in combina-
tion with PKCE.
The answers are at the end of the chapter.
240
CHAPTER 7
OAuth2 and OpenID Connect
clients to obtain access tokens from the AS. The new store takes the URI of the token
introspection endpoint, along with the credentials to use to authenticate. The creden-
tials are encoded into an HTTP Basic authentication header ready to be used. Navi-
gate to src/main/java/com/manning/apisecurityinaction/token and create a new
file named OAuth2TokenStore.java. Type in the contents of listing 7.5 in your editor
and save the new file.
package com.manning.apisecurityinaction.token;
import org.json.JSONObject;
import spark.Request;
import java.io.IOException;
import java.net.*;
import java.net.http.*;
import java.net.http.HttpRequest.BodyPublishers;
import java.net.http.HttpResponse.BodyHandlers;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.*;
import static java.nio.charset.StandardCharsets.UTF_8;
public class OAuth2TokenStore implements SecureTokenStore {
    private final URI introspectionEndpoint;                        
    private final String authorization;
    private final HttpClient httpClient;
    public OAuth2TokenStore(URI introspectionEndpoint,              
                            String clientId, String clientSecret) {
        this.introspectionEndpoint = introspectionEndpoint;         
        var credentials = URLEncoder.encode(clientId, UTF_8) + ":" +   
                URLEncoder.encode(clientSecret, UTF_8);                
        this.authorization = "Basic " + Base64.getEncoder()            
                .encodeToString(credentials.getBytes(UTF_8));          
        this.httpClient = HttpClient.newHttpClient();
    }
    @Override
    public String create(Request request, Token token) {
        throw new UnsupportedOperationException();        
    }
    @Override
    public void revoke(Request request, String tokenId) {
        throw new UnsupportedOperationException();        
    }
}
Listing 7.5
The OAuth2 token store
Inject the URI
of the token
introspection
endpoint.
Build up HTTP
Basic credentials
from the client
ID and secret.
Throw an 
exception to 
disable direct 
login and 
logout.
241
Validating an access token
To validate a token, you then need to make a POST request to the introspection end-
point passing the token. You can use the HTTP client library in java.net.http, which
was added in Java 11 (for earlier versions, you can use Apache HttpComponents,
https://hc.apache.org/httpcomponents-client-ga/). Because the token is untrusted
before the call, you should first validate it to ensure that it conforms to the allowed
syntax for access tokens. As you learned in chapter 2, it’s important to always validate
all inputs, and this is especially important when the input will be included in a call to
another system. The standard doesn’t specify a maximum size for access tokens, but
you should enforce a limit of around 1KB or less, which should be enough for most
token formats (if the access token is a JWT, it could get quite large and you may need
to increase that limit). The token should then be URL-encoded to include in the
POST body as the token parameter. It’s important to properly encode parameters
when calling another system to prevent an attacker being able to manipulate the con-
tent of the request (see section 2.6 of chapter 2). You can also include a token_
type_hint parameter to indicate that it’s an access token, but this is optional.
TIP
To avoid making an HTTP call every time a client uses an access token
with your API, you can cache the response for a short period of time, indexed
by the token. The longer you cache the response, the longer it may take your
API to find out that a token has been revoked, so you should balance perfor-
mance against security based on your threat model.
If the introspection call is successful, the AS will return a JSON response indicating
whether the token is valid and metadata about the token, such as the resource owner
and scope. The only required field in this response is a Boolean active field, which
indicates whether the token should be considered valid. If this is false then the token
should be rejected, as in listing 7.6. You’ll process the rest of the JSON response
shortly, but for now open OAuth2TokenStore.java in your editor again and add the
implementation of the read method from the listing.
@Override
public Optional read(Request request, String tokenId) {
    if (!tokenId.matches("[\\x20-\\x7E]{1,1024}")) {       
        return Optional.empty();
    }
    var form = "token=" + URLEncoder.encode(tokenId, UTF_8) +   
            "&token_type_hint=access_token";                    
    var httpRequest = HttpRequest.newBuilder()
            .uri(introspectionEndpoint)
            .header("Content-Type", "application/x-www-form-urlencoded")
            .header("Authorization", authorization)     
            .POST(BodyPublishers.ofString(form))
            .build();
Listing 7.6
Introspecting an access token
Validate the 
token first.
Encode the 
token into the 
POST form body.
Call the introspection 
endpoint using your 
client credentials.
242
CHAPTER 7
OAuth2 and OpenID Connect
    try {
        var httpResponse = httpClient.send(httpRequest,
                BodyHandlers.ofString());
        if (httpResponse.statusCode() == 200) {
            var json = new JSONObject(httpResponse.body());
            if (json.getBoolean("active")) {     
                return processResponse(json);    
            }
        }
    } catch (IOException e) {
        throw new RuntimeException(e);
    } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
        throw new RuntimeException(e);
    }
    return Optional.empty();
}
Several optional fields are allowed in the JSON response, including all valid JWT
claims (see chapter 6). The most important fields are listed in table 7.1. Because all
these fields are optional, you should be prepared for them to be missing. This is an
unfortunate aspect of the specification, because there is often no alternative but to
reject a token if its scope or resource owner cannot be established. Thankfully, most
AS software generates sensible values for these fields.
Listing 7.7 shows how to process the remaining JSON fields by extracting the resource
owner from the sub field, the expiry time from the exp field, and the scope from the
scope field. You can also extract other fields of interest, such as the client_id, which
can be useful information to add to audit logs. Open OAuth2TokenStore.java again
and add the processResponse method from the listing.
Table 7.1
Token introspection response fields
Field
Description
scope
The scope of the token as a string. If multiple scopes are specified then they are sepa-
rated by spaces, such as "read_messages post_message".
sub
An identifier for the resource owner (subject) of the token. This is a unique identifier, 
not necessarily human-readable.
username
A human-readable username for the resource owner.
client_id
The ID of the client that requested the token.
exp
The expiry time of the token, in seconds from the UNIX epoch.
Check that the 
token is still active.
243
Validating an access token
private Optional processResponse(JSONObject response) {
    var expiry = Instant.ofEpochSecond(response.getLong("exp"));   
    var subject = response.getString("sub");                       
    var token = new Token(expiry, subject);
    token.attributes.put("scope", response.getString("scope"));    
    token.attributes.put("client_id",                              
            response.optString("client_id"));                      
    return Optional.of(token);
}
Although you used the sub field to extract an ID for the user, this may not always be
appropriate. The authenticated subject of a token needs to match the entries in the
users and permissions tables in the database that define the access control lists for
Natter social spaces. If these don’t match, then the requests from a client will be
denied even if they have a valid access token. You should check the documentation for
your AS to see which field to use to match your existing user IDs.
 You can now switch the Natter API to use OAuth2 access tokens by changing the
TokenStore in Main.java to use the OAuth2TokenStore, passing in the URI of your
AS’s token introspection endpoint and the client ID and secret that you registered for
the Natter API (see appendix A for instructions):
var introspectionEndpoint =
     URI.create("https://as.example.com:8443/oauth2/introspect");
SecureTokenStore tokenStore = new OAuth2TokenStore(      
     introspectionEndpoint, clientId, clientSecret);     
var tokenController = new TokenController(tokenStore);
You should make sure that the AS and the API have the same users and that the AS
communicates the username to the API in the sub or username fields from the intro-
spection response. Otherwise, the API may not be able to match the username
returned from token introspection to entries in its access control lists (chapter 3). In
many corporate environments, the users will not be stored in a local database but
instead in a shared LDAP directory that is maintained by a company’s IT department
that both the AS and the API have access to, as shown in figure 7.7. 
 In other cases, the AS and the API may have different user databases that use dif-
ferent username formats. In this case, the API will need some logic to map the user-
name returned by token introspection into a username that matches its local database
and ACLs. For example, if the AS returns the email address of the user, then this
could be used to search for a matching user in the local user database. In more loosely
coupled architectures, the API may rely entirely on the information returned from
the token introspection endpoint and not have access to a user database at all.
Listing 7.7
Processing the introspection response
Extract token 
attributes 
from the 
relevant 
fields in the 
response.
Construct the token 
store, pointing at 
your AS.
244
CHAPTER 7
OAuth2 and OpenID Connect
Once the AS and the API are on the same page about usernames, you can obtain an
access token from the AS and use it to access the Natter API, as in the following exam-
ple using the ROPC grant:
$ curl -u test:password \                                   
  -d 'grant_type=password&scope=create_space+post_message   
➥ &username=demo&password=changeit' \                      
https://openam.example.com:8443/openam/oauth2/access_token
{"access_token":"_Avja0SO-6vAz-caub31eh5RLDU",
 "scope":"post_message create_space",
  "token_type":"Bearer","expires_in":3599}
$ curl -H 'Content-Type: application/json' \
 -H 'Authorization: Bearer _Avja0SO-6vAz-caub31eh5RLDU' \   
 -d '{"name":"test","owner":"demo"}' https://localhost:4567/spaces
{"name":"test","uri":"/spaces/1"}
Attempting to perform an action that is not allowed by the scope of the access token
will result in a 403 Forbidden error due to the access control filters you added at the
start of this chapter:
$ curl -i -H 'Authorization: Bearer _Avja0SO-6vAz-caub31eh5RLDU' \
  https://localhost:4567/spaces/1/messages
HTTP/1.1 403 Forbidden                  
LDAP user
directory
Authorization server
API
Access control
list
Token
introspection
user=alice, permissions=rw
user=alice,name=Alice,address=...
In a corporate environment, the AS
and the API may both have access
to a shared LDAP user directory.
"sub":"alice"
The username communicated in token
introspection must match the LDAP
username and entries in the API’s ACL.
Figure 7.7
In many environments, the AS and the API will both have access 
to a corporate LDAP directory containing details of all users. In this case, 
the AS needs to communicate the username to the API so that it can find 
the matching user entry in LDAP and in its own access control lists.
Obtain an access 
token using ROPC 
grant.
Use the access 
token to perform 
actions with the 
Natter API.
The request is forbidden.
245
Validating an access token
Date: Mon, 01 Jul 2019 10:22:17 GMT
WWW-Authenticate: Bearer
➥ error="insufficient_scope",scope="list_messages"    
7.4.2
Securing the HTTPS client configuration
Because the API relies entirely on the AS to tell it if an access token is valid, and the
scope of access it should grant, it’s critical that the connection between the two be
secure. While this connection should always be over HTTPS, the default connection
settings used by Java are not as secure as they could be:
 The default settings trust server certificates signed by any of the main public
certificate authorities (CAs). Typically, the AS will be running on your own
internal network and issued with a certificate by a private CA for your organiza-
tion, so it’s unnecessary to trust all of these public CAs.
 The default TLS settings include a wide variety of cipher suites and protocol ver-
sions for maximum compatibility. Older versions of TLS, and some cipher
suites, have known security weaknesses that should be avoided where possible.
You should disable these less secure options and re-enable them only if you
must talk to an old server that cannot be upgraded.
The latest and most secure version of TLS is version 1.3, which was released in August
2018. This replaced TLS 1.2, released exactly a decade earlier. While TLS 1.3 is a sig-
nificant improvement over earlier versions of the protocol, it’s not yet so widely
adopted that support for TLS 1.2 can be dropped completely. TLS 1.2 is still a very
TLS cipher suites
A TLS cipher suite is a collection of cryptographic algorithms that work together to cre-
ate the secure channel between a client and a server. When a TLS connection is first
established, the client and server perform a handshake, in which the server authen-
ticates to the client, the client optionally authenticates to the server, and they agree
upon a session key to use for subsequent messages. The cipher suite specifies the
algorithms to be used for authentication, key exchange, and the block cipher and
mode of operation to use for encrypting messages. The cipher suite to use is nego-
tiated as the first part of the handshake.
For example, the TLS 1.2 cipher suite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
specifies that the two parties will use the Elliptic Curve Diffie-Hellman (ECDH) key
agreement algorithm (using ephemeral keys, indicated by the final E), with RSA sig-
natures for authentication, and the agreed session key will be used to encrypt mes-
sages using AES in Galois/Counter Mode. (SHA-256 is used as part of the key
agreement.)
In TLS 1.3, cipher suites only specify the block cipher and hash function used, such
as TLS_AES_128_GCM_SHA256. The key exchange and authentication algorithms are
negotiated separately.
The error message 
tells the client the 
scope it requires.
246
CHAPTER 7
OAuth2 and OpenID Connect
secure protocol, but for maximum security you should prefer cipher suites that offer
forward secrecy and avoid older algorithms that use AES in CBC mode, because these
are more prone to attacks. Mozilla provides recommendations for secure TLS configu-
ration options (https://wiki.mozilla.org/Security/Server_Side_TLS), along with a tool
for automatically generating configuration files for various web servers, load balanc-
ers, and reverse proxies. The configuration used in this section is based on Mozilla’s
Intermediate settings. If you know that your AS software is capable of TLS 1.3, then
you could opt for the Modern settings and remove the TLS 1.2 support.
DEFINITION
A cipher suite offers forward secrecy if the confidentiality of data
transmitted using that cipher suite is protected even if one or both of the par-
ties are compromised afterwards. All cipher suites provide forward secrecy in
TLS 1.3. In TLS 1.2, these cipher suites start with TLS_ECDHE_ or TLS_DHE_. 
To configure the connection to trust only the CA that issued the server certificate used
by your AS, you need to create a javax.net.ssl.TrustManager that has been initial-
ized with a KeyStore that contains only that one CA certificate. For example, if you’re
using the mkcert utility from chapter 3 to generate the certificate for your AS, then
you can use the following command to import the root CA certificate into a keystore:
$ keytool -import -keystore as.example.com.ca.p12 \
    -alias ca -file "$(mkcert -CAROOT)/rootCA.pem"
This will ask you whether you want to trust the root CA certificate and then ask you for
a password for the new keystore. Accept the certificate and type in a suitable password,
then copy the generated keystore into the Natter project root directory.
Certificate chains
When configuring the trust store for your HTTPS client, you could choose to directly
trust the server certificate for that server. Although this seems more secure, it means
that whenever the server changes its certificate, the client would need to be updated
to trust the new one. Many server certificates are valid for only 90 days. If the server
is ever compromised, then the client will continue trusting the compromised certifi-
cate until it’s manually updated to remove it from the trust store.
To avoid these problems, the server certificate is signed by a CA, which itself has a
(self-signed) certificate. When a client connects to the server it receives the server’s
current certificate during the handshake. To verify this certificate is genuine, it looks
up the corresponding CA certificate in the client trust store and checks that the server
certificate was signed by that CA and is not expired or revoked. 
In practice, the server certificate is often not signed directly by the CA. Instead, the
CA signs certificates for one or more intermediate CAs, which then sign server certif-
icates. The client may therefore have to verify a chain of certificates until it finds a
certificate of a root CA that it trusts directly. Because CA certificates might them-
selves be revoked or expire, in general the client may have to consider multiple possible