messages are distinct.
3. For all messages M [i] in M, the environment encrypts mes-
sage M [i] with the MLE scheme:
C0[i] ← enckeygen(M [i])(M [i])
and generates a random string of the same length:
C1[i] ← {0, 1}|C0[i]|
.
4. The adversary obtains the set Cb and outputs a guess for b:
(cid:101)b ← A(P, Cb, Z)
5. The adversary wins if b equals(cid:101)b in this case the experiment
returns 1, otherwise 0.
DEFINITION 6
(DATA CONFIDENTIALITY). We say that the
M LE scheme for message sampling algorithm M is secure, if the
adversary’s advantage in winning the PRV$-CDAA
M LE,M experi-
ment is negligible, i.e.
(cid:105) − 1 ≤ negl(κ),
(cid:104)
2 · P r
1 ← PRV$-CDAA
M LE,M
for a security parameter κ.
Notice that it is integral for both G and S to know the ﬁle sizes
and the download patterns of ﬁles in order to perform correct ac-
counting4. Therefore, hiding this information cannot be part of our
goals.
2.3 Design Goals
In addition to the security goals stated above, our proposed solu-
tion should satisfy the following functional requirements. ClearBox
should work within the APIs provided by current service providers,
without deteriorating the performance witnessed by users when
compared to standard solutions where users directly interface with
S. Similar to existing cloud storage providers such as Amazon S3
and Google Cloud Storage, we assume that S exposes to its clients a
standard interface consisting of a handful of basic operations, such
as storing a ﬁle, retrieving a ﬁle, deleting a ﬁle, generating a signed
URL for sending HTTP commands for storage/retrieval, etc. (cf.
Table 1). Where appropriate, we also discuss the case where S is a
commodity cloud service provider and exposes a simpler interface,
e.g., that does not allow storing a ﬁle using a URL.
4Current cloud services maintain a detailed log containing all the
activities per account.
Command
createBucket(B)
PUT(B, FID)
GET(B, FID)
DELETE(B, FID)
generateURL(COMMAND, t) Generate a URL expiring at time
Description
Creates a bucket B
Upload a ﬁle FID to B
Download a ﬁle FID from B
Delete a ﬁle FID from B
t supporting PUT, GET, DELETE.
Table 1: Sample API exposed by Amazon S3 and Google Cloud
Storage. COMMAND refers to an HTTP command such as
PUT(B, FID).
Moreover, our solution should scale with the number of users,
the ﬁle size, and the number of uploaded ﬁles, and should incur
tolerable overhead on the users when verifying the deduplication
patterns of their ﬁles at the end of every epoch.
3. ClearBox
In this section, we present our solution, and analyze its security
according to the model outlined in Section 2.
3.1 Overview
ClearBox ensures a transparent attestation of the storage con-
sumption of users whose data is effectively being deduplicated—
without compromising the conﬁdentiality of the stored data.
To attest the deduplication patterns to its customers, one naive
solution would be for the gateway to publish the list of all clients
associated to each deduplicated ﬁle (e.g., on a public bulletin board)
such that each client could ﬁrst check if (i) he is a member of the
list and (ii) if the size of the list corresponds to the price reduction
offered by the gateway for storing this ﬁle. Besides the fact that
this solution does not scale, it is likewise within the interest of G
not to publish the entire list of its clients and their ﬁles; for exam-
ple, competitors could otherwise learn information on the service
offered by G (e.g., total turnover).
To remedy this, ClearBox employs a novel Merkle-tree based
cryptographic accumulator which is maintained by the gateway to
efﬁciently accumulate the IDs of the users registered to the same
ﬁle within the same time epoch. Our construct ensures that each
user can check that his ID is correctly accumulated at the end of ev-
ery epoch. Additionally, our accumulator encodes an upper bound
on the number of accumulated values, thus enabling any legitimate
client associated to the accumulator to verify (in logarithmic time
with respect to the number of clients that uploaded the same ﬁle)
this bound.
Clearly, a solution that requires the gateway to publish details
about all the accumulators for all the stored ﬁles does not scale with
the number of ﬁles stored in the cloud. This is why ClearBox relies
on a probabilistic algorithm which selectively reveals details about
a number of ﬁle accumulators in each epoch. However, if the gate-
way could select which ﬁle accumulators to publish, then G could
easily cheat by only creating correct accumulators for the selected
ﬁles, while misreporting the deduplication patterns of the remain-
ing ﬁles. In ClearBox, the choice of which accumulators are pub-
lished in each epoch is seeded by an external source of randomness
which cannot be predicted but can be veriﬁed by any entity. We
show how such a secure source of randomness can be efﬁciently
instantiated using Bitcoin. This enables any client to validate that
the sampling has been done correctly, and as such that he is acquir-
ing the promised price reductions—without giving any advantage
for G to misbehave.
ClearBox enforces ﬁne-grained access control on shared ﬁles by
leveraging self-expiring URLs when accessing content. Namely,
whenever a user wishes to access a given resource, the gateway
generates a URL for that resource on the ﬂy, which expires after
a short period of time. As shown in Table 1, existing cloud APIs
support the dynamic generation of expiring URLs. By doing so,
ClearBox does not only ensure that G can restrict access to the data
stored on the cloud, but also enables G to keep track of the access
patterns of its users (e.g., to be used in billing). ClearBox also relies
on an oblivious server-aided key generation protocol to ensure that
the stored ﬁles are encrypted with keys that are dependent on both
the hash of the ﬁle and the gateway’s secret. This protects against
brute force search attacks when the message content is predictable,
but also ensures that a curious gateway/storage provider which does
not know the ﬁle hash cannot acquire the necessary keys to decrypt
the ﬁle (since the key generation protocol is oblivious). To protect
against malicious users who otherwise have obtained the ﬁle hash
(e.g., by theft/malware) but do not possess the full ﬁle, ClearBox
employs proofs of ownership over the encrypted ﬁle to verify that
a given user is indeed in possession of the full ﬁle.
In the following subsections, we go into greater detail on the
various parts of ClearBox, starting with the building blocks that we
will use in our solution, then moving on to the protocol speciﬁca-
tion, and ﬁnally to its security analysis.
3.2 Building Blocks
Before describing ClearBox in detail, we start by outlining the
building blocks that will be used in ClearBox.
3.2.1 CARDIAC
Cryptographic accumulators (e.g. [12, 20, 21, 22, 30, 33, 39]) ba-
sically constitute one-way membership functions; these functions
can be used to answer a query whether a given candidate belongs
to a set.
In what follows, we show how to construct a cardinality-proving
accumulator (CARDIAC) which leverages Merkle trees in order to
efﬁciently provide proofs of membership and (non-public) proofs
of maximum set cardinality. As we show in Section 3.3, proofs
of cardinality are needed to attest the ﬁle deduplication patterns to
users.
A Merkle tree is a binary tree, in which the data is stored in the
leaves. Let ai,j denote a node in the tree located at the i-th level
and j-th position. Here, the level refers to the distance (in hops) to
the leaf nodes; clearly, leaf nodes are located at distance 0. On the
other hand, the position within a level is computed incrementally
from left to right starting from position 0; for example, the leftmost
node of level 1 is denoted by a1,0. In a Merkle tree, the intermediate
nodes are computed as the hash of their respective child nodes;
namely ai+1,j = H(ai,2j, ai,2j+1).
Given a tree of height (cid:96), CARDIAC accumulates elements of a
set X by assigning these to the leaf nodes (starting from position
0) while the remaining leaf nodes a0,|X|, . . . , a0,2(cid:96)−1 are ﬁlled
with a distinct symbol 0. We call these the zero leaves. Nodes
that can be computed from the zero leaves play a special role.
We denote these as open nodes in the sense that their values are
openly known. More formally, the zero leaves a0,|X|, . . . , a0,2(cid:96) are
open. Moreover, if ai,2j and ai,2j+1 are both open, so is ai+1,j =
H(i + 1, ai,2j, ai,2j+1).
We now outline the main algorithms (Acc, ProveM , VerifyM,
ProveC , VerifyC) provided by CARDIAC. Observe that ProveM
and ProveC will be used to implement Attest and likewise VerifyM
and VerifyM to instantiate Verify.
δ ← Acc(X). This algorithm accumulates the elements of a set
X into a digest δ. In CARDIAC, δ corresponds to the hash
of the root node of the modiﬁed Merkle tree, a(cid:96),0, and the
height (cid:96) of the tree, i.e., δ = H(a(cid:96),0, (cid:96)).
πM ← ProveM (X, x). Given a set X and element x ∈ X, this
algorithm outputs a proof of membership πM asserting that
x ∈ X. πM consists of the sibling path of x in the modiﬁed
Merkle tree and the root a(cid:96),0.
VerifyM(δ, x, πM ). Given δ, an element x, its sibling path and
the root a(cid:96),0, this algorithm outputs true if and only if δ =
H(a(cid:96),0, (cid:96)) where (cid:96) is the length of the sibling path and the
sibling path of x matches the root a(cid:96),0.
πC ← ProveC (X). Given a set X, this algorithm outputs a proof
πC attesting an upper bound on the size |X| of the set. Here,
πC consists of the size of X, the right-most non-zero element
a0,|X|−1, its sibling path, and the root of the tree a(cid:96),0.
VerifyC(δ, c, πC ). Given the digest δ, the cardinality |X| of the
set X, and a proof of cardinality consisting of a0,|X|−1, its
sibling path, and the root of the tree a(cid:96),0, this algorithm out-
puts true if the following conditions are met:
the sibling path,
• it holds that δ = H(a(cid:96),0, (cid:96)) where (cid:96) is the length (cid:96) of
• it holds that 2(cid:96)−1  cur corresponds to a time in the future, then GetRandomness
5This condition minimizes the number of open nodes in the tree,
and hence the effort in proving/verifying membership and cardi-
nality.
h ← H
Client
∗(f )
r R← Z∗
ˆh ← h · gr
p
1
s ← ˆs · y
−r
v1 ← e (s, g2) , v2 ← e (h, y2)
1
If v1 (cid:54)= v2 then ret ⊥
Else ret k ← H(s)
Gateway
ˆs ←(cid:16)ˆh
(cid:17)x
ˆh
ˆs
Figure 2: Server-aided key generation module based on blind
BLS signatures. Here, Γ1, Γ2 are two groups with order p,
g1, g2 generators of Γ1 and Γ2 respectively, the pairing func-
tion e : Γ1 × Γ2 → ΓT , the hash function H
∗ : {0, 1}∗ → Γ1,