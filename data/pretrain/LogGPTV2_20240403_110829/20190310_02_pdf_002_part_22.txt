hr_mgr.hire_clerk
...
END;
hr_mgr
sales_mgr
list_emp hire_clerk
(sales_mgr) (sales_mgr)
new_empno
(hr_mgr)
emp emp dept
next_
empn
o
Figure 3 - Invoker's Rights Programs
Selecting from sales_mgr’s emp table shows that the update was made in this table.
SELECT empno, ename, hiredate, sal, deptno,
hr_mgr.emp_admin.get_dept_name(deptno) FROM sales_mgr.emp;
empno | ename | hiredate | sal | deptno | get_dept_name
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 187
Database Compatibility for Oracle® Developers Guide
-------+--------+--------------------+---------+--------+---------------
7499 | ALLEN | 20-FEB-81 00:00:00 | 1600.00 | 30 | SALES
7521 | WARD | 22-FEB-81 00:00:00 | 1250.00 | 30 | SALES
7654 | MARTIN | 28-SEP-81 00:00:00 | 1250.00 | 30 | SALES
7844 | TURNER | 08-SEP-81 00:00:00 | 1500.00 | 30 | SALES
8000 | JONES | 08-NOV-07 00:00:00 | 950.00 | 40 | OPERATIONS
(5 rows)
The following diagram shows that the SELECT command references the emp table in the
sales_mgr schema, but the dept table referenced by the get_dept_name function in
the emp_admin package is from the hr_mgr schema since the emp_admin package has
definer’s rights and is owned by hr_mgr. The default search path setting with the $user
placeholder resolves the access by user hr_mgr to the dept table in the hr_mgr schema.
(sales_mgr)
SELECT empno, ename...
hr_mgr.emp_admin.get_dept_name...
FROM sales_mgr.emp
hr_mgr
sales_mgr
emp_admin
(hr_mgr)
hire_emp
get_dept_name
emp emp dept
next_
empn
o
Figure 4 Definer's Rights Package
Step 9 – Run Program hire_emp in the emp_admin Package
While connected as user, sales_mgr, run the hire_emp procedure in the emp_admin
package.
EXEC hr_mgr.emp_admin.hire_emp(9001,
'ALICE','SALESMAN',8000,TRUNC(SYSDATE),1000,7369,40);
This diagram illustrates that the hire_emp procedure in the emp_admin definer’s rights
package updates the emp table belonging to hr_mgr since the object privileges of
hr_mgr are used, and the default search path setting with the $user placeholder resolves
to the schema of hr_mgr.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 188
Database Compatibility for Oracle® Developers Guide
(sales_mgr)
EXEC hr_mgr.emp_admin.hire_emp...
hr_mgr
sales_mgr
emp_admin
(hr_mgr)
hire_emp
get_dept_name
emp emp dept
next_
empn
o
Figure 5 Definer's Rights Package
Now connect as user, hr_mgr. The following SELECT command verifies that the new
employee was added to hr_mgr’s emp table since the emp_admin package has definer’s
rights and hr_mgr is emp_admin’s owner.
\c – hr_mgr
SELECT empno, ename, hiredate, sal, deptno,
hr_mgr.emp_admin.get_dept_name(deptno) FROM hr_mgr.emp;
empno | ename | hiredate | sal | deptno | get_dept_name
-------+--------+--------------------+---------+--------+---------------
7369 | SMITH | 17-DEC-80 00:00:00 | 800.00 | 20 | RESEARCH
7499 | ALLEN | 20-FEB-81 00:00:00 | 1600.00 | 30 | SALES
7521 | WARD | 22-FEB-81 00:00:00 | 1250.00 | 30 | SALES
7566 | JONES | 02-APR-81 00:00:00 | 2975.00 | 20 | RESEARCH
7654 | MARTIN | 28-SEP-81 00:00:00 | 1250.00 | 30 | SALES
7698 | BLAKE | 01-MAY-81 00:00:00 | 2850.00 | 30 | SALES
7782 | CLARK | 09-JUN-81 00:00:00 | 2450.00 | 10 | ACCOUNTING
7788 | SCOTT | 19-APR-87 00:00:00 | 3000.00 | 20 | RESEARCH
7839 | KING | 17-NOV-81 00:00:00 | 5000.00 | 10 | ACCOUNTING
7844 | TURNER | 08-SEP-81 00:00:00 | 1500.00 | 30 | SALES
7876 | ADAMS | 23-MAY-87 00:00:00 | 1100.00 | 20 | RESEARCH
7900 | JAMES | 03-DEC-81 00:00:00 | 950.00 | 30 | SALES
7902 | FORD | 03-DEC-81 00:00:00 | 3000.00 | 20 | RESEARCH
7934 | MILLER | 23-JAN-82 00:00:00 | 1300.00 | 10 | ACCOUNTING
9001 | ALICE | 08-NOV-07 00:00:00 | 8000.00 | 40 | OPERATIONS
(15 rows)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 189
Database Compatibility for Oracle® Developers Guide
3.3 Variable Declarations
SPL is a block-structured language. The first section that can appear in a block is the
declaration. The declaration contains the definition of variables, cursors, and other types
that can be used in SPL statements contained in the block.
3.3.1 Declaring a Variable
Generally, all variables used in a block must be declared in the declaration section of the
block. A variable declaration consists of a name that is assigned to the variable and its
data type. Optionally, the variable can be initialized to a default value in the variable
declaration.
The general syntax of a variable declaration is:
name type [ { := | DEFAULT } { expression | NULL } ];
name is an identifier assigned to the variable.
type is the data type assigned to the variable.
[ := expression ], if given, specifies the initial value assigned to the variable when the
block is entered. If the clause is not given then the variable is initialized to the SQL NULL
value.
The default value is evaluated every time the block is entered. So, for example, assigning
SYSDATE to a variable of type DATE causes the variable to have the time of the current
invocation, not the time when the procedure or function was precompiled.
The following procedure illustrates some variable declarations that utilize defaults
consisting of string and numeric expressions.
CREATE OR REPLACE PROCEDURE dept_salary_rpt (
p_deptno NUMBER
)
IS
todays_date DATE := SYSDATE;
rpt_title VARCHAR2(60) := 'Report For Department # ' || p_deptno
|| ' on ' || todays_date;
base_sal INTEGER := 35525;
base_comm_rate NUMBER := 1.33333;
base_annual NUMBER := ROUND(base_sal * base_comm_rate, 2);
BEGIN
DBMS_OUTPUT.PUT_LINE(rpt_title);
DBMS_OUTPUT.PUT_LINE('Base Annual Salary: ' || base_annual);
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 190
Database Compatibility for Oracle® Developers Guide
END;
The following output of the above procedure shows that default values in the variable
declarations are indeed assigned to the variables.
EXEC dept_salary_rpt(20);
Report For Department # 20 on 10-JUL-07 16:44:45
Base Annual Salary: 47366.55
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 191
Database Compatibility for Oracle® Developers Guide
3.3.2 Using %TYPE in Variable Declarations
Often, variables will be declared in SPL programs that will be used to hold values from
tables in the database. In order to ensure compatibility between the table columns and the
SPL variables, the data types of the two should be the same.
However, as quite often happens, a change might be made to the table definition. If the
data type of the column is changed, the corresponding change may be required to the
variable in the SPL program.
Instead of coding the specific column data type into the variable declaration the column
attribute, %TYPE, can be used instead. A qualified column name in dot notation or the
name of a previously declared variable must be specified as a prefix to %TYPE. The data
type of the column or variable prefixed to %TYPE is assigned to the variable being
declared. If the data type of the given column or variable changes, the new data type will
be associated with the variable without the need to modify the declaration code.
Note: The %TYPE attribute can be used with formal parameter declarations as well.
name { { table | view }.column | variable }%TYPE;
name is the identifier assigned to the variable or formal parameter that is being declared.
column is the name of a column in table or view. variable is the name of a variable
that was declared prior to the variable identified by name.
Note: The variable does not inherit any of the column’s other attributes such as might be
specified on the column with the NOT NULL clause or the DEFAULT clause.
In the following example a procedure queries the emp table using an employee number,
displays the employee’s data, finds the average salary of all employees in the department
to which the employee belongs, and then compares the chosen employee’s salary with the
department average.
CREATE OR REPLACE PROCEDURE emp_sal_query (
p_empno IN NUMBER
)
IS
v_ename VARCHAR2(10);
v_job VARCHAR2(9);
v_hiredate DATE;
v_sal NUMBER(7,2);
v_deptno NUMBER(2);
v_avgsal NUMBER(7,2);
BEGIN
SELECT ename, job, hiredate, sal, deptno
INTO v_ename, v_job, v_hiredate, v_sal, v_deptno
FROM emp WHERE empno = p_empno;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 192
Database Compatibility for Oracle® Developers Guide
DBMS_OUTPUT.PUT_LINE('Employee # : ' || p_empno);
DBMS_OUTPUT.PUT_LINE('Name : ' || v_ename);
DBMS_OUTPUT.PUT_LINE('Job : ' || v_job);
DBMS_OUTPUT.PUT_LINE('Hire Date : ' || v_hiredate);
DBMS_OUTPUT.PUT_LINE('Salary : ' || v_sal);
DBMS_OUTPUT.PUT_LINE('Dept # : ' || v_deptno);
SELECT AVG(sal) INTO v_avgsal
FROM emp WHERE deptno = v_deptno;
IF v_sal > v_avgsal THEN
DBMS_OUTPUT.PUT_LINE('Employee''s salary is more than the '
|| 'department average of ' || v_avgsal);
ELSE
DBMS_OUTPUT.PUT_LINE('Employee''s salary does not exceed the '
|| 'department average of ' || v_avgsal);
END IF;
END;
Instead of the above, the procedure could be written as follows without explicitly coding
the emp table data types into the declaration section of the procedure.
CREATE OR REPLACE PROCEDURE emp_sal_query (
p_empno IN emp.empno%TYPE
)
IS
v_ename emp.ename%TYPE;
v_job emp.job%TYPE;
v_hiredate emp.hiredate%TYPE;
v_sal emp.sal%TYPE;
v_deptno emp.deptno%TYPE;
v_avgsal v_sal%TYPE;
BEGIN
SELECT ename, job, hiredate, sal, deptno
INTO v_ename, v_job, v_hiredate, v_sal, v_deptno
FROM emp WHERE empno = p_empno;
DBMS_OUTPUT.PUT_LINE('Employee # : ' || p_empno);
DBMS_OUTPUT.PUT_LINE('Name : ' || v_ename);
DBMS_OUTPUT.PUT_LINE('Job : ' || v_job);
DBMS_OUTPUT.PUT_LINE('Hire Date : ' || v_hiredate);
DBMS_OUTPUT.PUT_LINE('Salary : ' || v_sal);
DBMS_OUTPUT.PUT_LINE('Dept # : ' || v_deptno);
SELECT AVG(sal) INTO v_avgsal
FROM emp WHERE deptno = v_deptno;
IF v_sal > v_avgsal THEN
DBMS_OUTPUT.PUT_LINE('Employee''s salary is more than the '
|| 'department average of ' || v_avgsal);
ELSE
DBMS_OUTPUT.PUT_LINE('Employee''s salary does not exceed the '
|| 'department average of ' || v_avgsal);
END IF;
END;
Note: p_empno shows an example of a formal parameter defined using %TYPE.
v_avgsal illustrates the usage of %TYPE referring to another variable instead of a table
column.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 193
Database Compatibility for Oracle® Developers Guide
The following is sample output from executing this procedure.
EXEC emp_sal_query(7698);
Employee # : 7698
Name : BLAKE
Job : MANAGER
Hire Date : 01-MAY-81 00:00:00
Salary : 2850.00
Dept # : 30
Employee's salary is more than the department average of 1566.67
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 194
Database Compatibility for Oracle® Developers Guide
3.3.3 Using %ROWTYPE in Record Declarations
The %TYPE attribute provides an easy way to create a variable dependent upon a
column’s data type. Using the %ROWTYPE attribute, you can define a record that contains
fields that correspond to all columns of a given table. Each field takes on the data type of
its corresponding column. The fields in the record do not inherit any of the columns’
other attributes such as might be specified with the NOT NULL clause or the DEFAULT
clause.
A record is a named, ordered collection of fields. A field is similar to a variable; it has an
identifier and data type, but has the additional property of belonging to a record, and must
be referenced using dot notation with the record name as its qualifier.
You can use the %ROWTYPE attribute to declare a record. The %ROWTYPE attribute is
prefixed by a table name. Each column in the named table defines an identically named
field in the record with the same data type as the column.
record table%ROWTYPE;
record is an identifier assigned to the record. table is the name of a table (or view)
whose columns are to define the fields in the record. The following example shows how
the emp_sal_query procedure from the prior section can be modified to use
emp%ROWTYPE to create a record named r_emp instead of declaring individual variables
for the columns in emp.
CREATE OR REPLACE PROCEDURE emp_sal_query (
p_empno IN emp.empno%TYPE
)
IS
r_emp emp%ROWTYPE;
v_avgsal emp.sal%TYPE;
BEGIN
SELECT ename, job, hiredate, sal, deptno
INTO r_emp.ename, r_emp.job, r_emp.hiredate, r_emp.sal, r_emp.deptno
FROM emp WHERE empno = p_empno;
DBMS_OUTPUT.PUT_LINE('Employee # : ' || p_empno);
DBMS_OUTPUT.PUT_LINE('Name : ' || r_emp.ename);
DBMS_OUTPUT.PUT_LINE('Job : ' || r_emp.job);
DBMS_OUTPUT.PUT_LINE('Hire Date : ' || r_emp.hiredate);
DBMS_OUTPUT.PUT_LINE('Salary : ' || r_emp.sal);
DBMS_OUTPUT.PUT_LINE('Dept # : ' || r_emp.deptno);
SELECT AVG(sal) INTO v_avgsal
FROM emp WHERE deptno = r_emp.deptno;
IF r_emp.sal > v_avgsal THEN
DBMS_OUTPUT.PUT_LINE('Employee''s salary is more than the '
|| 'department average of ' || v_avgsal);
ELSE
DBMS_OUTPUT.PUT_LINE('Employee''s salary does not exceed the '
|| 'department average of ' || v_avgsal);
END IF;
END;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 195
Database Compatibility for Oracle® Developers Guide
3.3.4 User-Defined Record Types and Record Variables
Records can be declared based upon a table definition using the %ROWTYPE attribute as
shown in Section 3.3.3. This section describes how a new record structure can be defined
that is not tied to any particular table definition.
The TYPE IS RECORD statement is used to create the definition of a record type. A
record type is a definition of a record comprised of one or more identifiers and their
corresponding data types. A record type cannot, by itself, be used to manipulate data.
The syntax for a TYPE IS RECORD statement is:
TYPE rec_type IS RECORD ( fields )
Where fields is a comma-separated list of one or more field definitions of the
following form:
field_name data_type [NOT NULL][{:= | DEFAULT} default_value]
Where:
rec_type
rec_type is an identifier assigned to the record type.
field_name
field_name is the identifier assigned to the field of the record type.
data_type
data_type specifies the data type of field_name.
DEFAULT default_value
The DEFAULT clause assigns a default data value for the corresponding field. The
data type of the default expression must match the data type of the column. If no
default is specified, then the default is NULL.
A record variable or simply put, a record, is an instance of a record type. A record is
declared from a record type. The properties of the record such as its field names and
types are inherited from the record type.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 196
Database Compatibility for Oracle® Developers Guide
The following is the syntax for a record declaration.
record rectype
record is an identifier assigned to the record variable. rectype is the identifier of a
previously defined record type. Once declared, a record can then be used to hold data.
Dot notation is used to make reference to the fields in the record.
record.field
record is a previously declared record variable and field is the identifier of a field
belonging to the record type from which record is defined.
The emp_sal_query is again modified – this time using a user-defined record type and
record variable.
CREATE OR REPLACE PROCEDURE emp_sal_query (
p_empno IN emp.empno%TYPE
)
IS
TYPE emp_typ IS RECORD (
ename emp.ename%TYPE,
job emp.job%TYPE,
hiredate emp.hiredate%TYPE,
sal emp.sal%TYPE,
deptno emp.deptno%TYPE
);
r_emp emp_typ;
v_avgsal emp.sal%TYPE;
BEGIN
SELECT ename, job, hiredate, sal, deptno
INTO r_emp.ename, r_emp.job, r_emp.hiredate, r_emp.sal, r_emp.deptno