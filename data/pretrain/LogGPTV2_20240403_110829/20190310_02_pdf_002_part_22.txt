### 3.3 Variable Declarations

Structured PL/SQL (SPL) is a block-structured language. The first section in a block is the declaration, which includes definitions of variables, cursors, and other types that can be used within the block.

#### 3.3.1 Declaring a Variable

All variables used in a block must be declared in the declaration section. A variable declaration consists of a name and its data type. Optionally, the variable can be initialized to a default value in the declaration.

**Syntax:**
```sql
name type [ { := | DEFAULT } { expression | NULL } ];
```

- `name`: Identifier assigned to the variable.
- `type`: Data type of the variable.
- `:= expression`: Specifies the initial value assigned to the variable when the block is entered. If not provided, the variable is initialized to `NULL`.

The default value is evaluated every time the block is entered. For example, assigning `SYSDATE` to a `DATE` variable will set it to the current date and time each time the block is executed.

**Example:**

```sql
CREATE OR REPLACE PROCEDURE dept_salary_rpt (
    p_deptno NUMBER
)
IS
    todays_date DATE := SYSDATE;
    rpt_title VARCHAR2(60) := 'Report For Department # ' || p_deptno || ' on ' || todays_date;
    base_sal INTEGER := 35525;
    base_comm_rate NUMBER := 1.33333;
    base_annual NUMBER := ROUND(base_sal * base_comm_rate, 2);
BEGIN
    DBMS_OUTPUT.PUT_LINE(rpt_title);
    DBMS_OUTPUT.PUT_LINE('Base Annual Salary: ' || base_annual);
END;
```

**Output:**

```sql
EXEC dept_salary_rpt(20);
Report For Department # 20 on 10-JUL-07 16:44:45
Base Annual Salary: 47366.55
```

#### 3.3.2 Using `%TYPE` in Variable Declarations

Variables in SPL programs often hold values from database tables. To ensure compatibility between table columns and SPL variables, their data types should match. Using `%TYPE` ensures that if the column's data type changes, the variable's data type will automatically update.

**Syntax:**

```sql
name { { table | view }.column | variable }%TYPE;
```

- `name`: Identifier assigned to the variable or formal parameter.
- `table.column`: Qualified column name in dot notation.
- `variable`: Name of a previously declared variable.

**Example:**

```sql
CREATE OR REPLACE PROCEDURE emp_sal_query (
    p_empno IN emp.empno%TYPE
)
IS
    v_ename emp.ename%TYPE;
    v_job emp.job%TYPE;
    v_hiredate emp.hiredate%TYPE;
    v_sal emp.sal%TYPE;
    v_deptno emp.deptno%TYPE;
    v_avgsal v_sal%TYPE;
BEGIN
    SELECT ename, job, hiredate, sal, deptno
    INTO v_ename, v_job, v_hiredate, v_sal, v_deptno
    FROM emp WHERE empno = p_empno;

    DBMS_OUTPUT.PUT_LINE('Employee # : ' || p_empno);
    DBMS_OUTPUT.PUT_LINE('Name : ' || v_ename);
    DBMS_OUTPUT.PUT_LINE('Job : ' || v_job);
    DBMS_OUTPUT.PUT_LINE('Hire Date : ' || v_hiredate);
    DBMS_OUTPUT.PUT_LINE('Salary : ' || v_sal);
    DBMS_OUTPUT.PUT_LINE('Dept # : ' || v_deptno);

    SELECT AVG(sal) INTO v_avgsal
    FROM emp WHERE deptno = v_deptno;

    IF v_sal > v_avgsal THEN
        DBMS_OUTPUT.PUT_LINE('Employee''s salary is more than the department average of ' || v_avgsal);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Employee''s salary does not exceed the department average of ' || v_avgsal);
    END IF;
END;
```

**Sample Output:**

```sql
EXEC emp_sal_query(7698);
Employee # : 7698
Name : BLAKE
Job : MANAGER
Hire Date : 01-MAY-81 00:00:00
Salary : 2850.00
Dept # : 30
Employee's salary is more than the department average of 1566.67
```

#### 3.3.3 Using `%ROWTYPE` in Record Declarations

The `%ROWTYPE` attribute allows you to define a record that contains fields corresponding to all columns of a given table. Each field takes on the data type of its corresponding column.

**Syntax:**

```sql
record table%ROWTYPE;
```

- `record`: Identifier assigned to the record.
- `table`: Name of the table (or view) whose columns define the fields in the record.

**Example:**

```sql
CREATE OR REPLACE PROCEDURE emp_sal_query (
    p_empno IN emp.empno%TYPE
)
IS
    r_emp emp%ROWTYPE;
    v_avgsal emp.sal%TYPE;
BEGIN
    SELECT ename, job, hiredate, sal, deptno
    INTO r_emp.ename, r_emp.job, r_emp.hiredate, r_emp.sal, r_emp.deptno
    FROM emp WHERE empno = p_empno;

    DBMS_OUTPUT.PUT_LINE('Employee # : ' || p_empno);
    DBMS_OUTPUT.PUT_LINE('Name : ' || r_emp.ename);
    DBMS_OUTPUT.PUT_LINE('Job : ' || r_emp.job);
    DBMS_OUTPUT.PUT_LINE('Hire Date : ' || r_emp.hiredate);
    DBMS_OUTPUT.PUT_LINE('Salary : ' || r_emp.sal);
    DBMS_OUTPUT.PUT_LINE('Dept # : ' || r_emp.deptno);

    SELECT AVG(sal) INTO v_avgsal
    FROM emp WHERE deptno = r_emp.deptno;

    IF r_emp.sal > v_avgsal THEN
        DBMS_OUTPUT.PUT_LINE('Employee''s salary is more than the department average of ' || v_avgsal);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Employee''s salary does not exceed the department average of ' || v_avgsal);
    END IF;
END;
```

#### 3.3.4 User-Defined Record Types and Record Variables

You can define a new record structure that is not tied to any particular table using the `TYPE IS RECORD` statement.

**Syntax:**

```sql
TYPE rec_type IS RECORD ( fields );
```

- `rec_type`: Identifier assigned to the record type.
- `fields`: Comma-separated list of field definitions.

**Field Definition Syntax:**

```sql
field_name data_type [NOT NULL][{:= | DEFAULT} default_value]
```

- `field_name`: Identifier assigned to the field.
- `data_type`: Data type of the field.
- `DEFAULT default_value`: Assigns a default data value for the field. If not specified, the default is `NULL`.

**Example:**

```sql
CREATE OR REPLACE PROCEDURE emp_sal_query (
    p_empno IN emp.empno%TYPE
)
IS
    TYPE emp_typ IS RECORD (
        ename emp.ename%TYPE,
        job emp.job%TYPE,
        hiredate emp.hiredate%TYPE,
        sal emp.sal%TYPE,
        deptno emp.deptno%TYPE
    );
    r_emp emp_typ;
    v_avgsal emp.sal%TYPE;
BEGIN
    SELECT ename, job, hiredate, sal, deptno
    INTO r_emp.ename, r_emp.job, r_emp.hiredate, r_emp.sal, r_emp.deptno
    FROM emp WHERE empno = p_empno;

    DBMS_OUTPUT.PUT_LINE('Employee # : ' || p_empno);
    DBMS_OUTPUT.PUT_LINE('Name : ' || r_emp.ename);
    DBMS_OUTPUT.PUT_LINE('Job : ' || r_emp.job);
    DBMS_OUTPUT.PUT_LINE('Hire Date : ' || r_emp.hiredate);
    DBMS_OUTPUT.PUT_LINE('Salary : ' || r_emp.sal);
    DBMS_OUTPUT.PUT_LINE('Dept # : ' || r_emp.deptno);

    SELECT AVG(sal) INTO v_avgsal
    FROM emp WHERE deptno = r_emp.deptno;

    IF r_emp.sal > v_avgsal THEN
        DBMS_OUTPUT.PUT_LINE('Employee''s salary is more than the department average of ' || v_avgsal);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Employee''s salary does not exceed the department average of ' || v_avgsal);
    END IF;
END;
```

This completes the section on variable declarations in SPL, including the use of `%TYPE`, `%ROWTYPE`, and user-defined record types.