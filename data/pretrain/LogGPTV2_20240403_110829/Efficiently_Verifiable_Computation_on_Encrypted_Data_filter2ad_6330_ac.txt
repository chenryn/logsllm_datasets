(x) and τx = τ V
σx = σE
(x), ProbGenV
x ← ProbGenV
x ← ProbGenE
(x) such that:
(x).
SKE
SKV
SKE
SKV
Notice that for a split scheme one can generate valid values σx for any function f to be delegated
before knowing f , since σx is independent of f . This can be done by running (P KE, SKE) ←
KeyGenE(λ), and setting σx ← ProbGenE
(x) before knowing f . The validity of this encoding
applies for all keys (P K, SK) = (P KE, P KV , SKE, SKV ) where (P KV , SKV ) ← KeyGenV (f, λ)
for any f .
SKE
We can now describe the experiment that is used to deﬁne adaptive security for split schemes.
Experiment ExpAdap−V erif
A
[VC, λ]
(P KE, SKE) ← KeyGenE(λ);
For i = 1, . . . , (cid:96)(cid:48) = poly(cid:48)(λ):
1, . . . , x(cid:48)
(x);
(cid:96)(cid:48));
i ← A(P KE, x(cid:48)
x(cid:48)
i ← ProbGenE
σ(cid:48)
1, . . . , x(cid:48)
1, σ(cid:48)
(cid:96)(cid:48), σ(cid:48)
f ← A(x(cid:48)
(P KV , SKV ) ← KeyGenV (f, λ);
(P K, SK) ← (P KE, P KV , SKE, SKV );
For i = 1, . . . , (cid:96) = poly(λ):
i−1, σ(cid:48)
1, σ(cid:48)
i−1);
SKE
xi ← APVerify(P K, x1, σ1, . . . , xi−1, σi−1);
(σi, τi) ← ProbGenSK(xi);
(i, ˆσy) ← APVerify(P K, x1, σ1, . . . , x(cid:96), σ(cid:96));
( ˆacc, ˆy) ← VerifySK(τi, ˆσy);
If ˆacc = 1 and ˆy (cid:54)= f (xi), output ‘1’, else ‘0’.
Deﬁnition 7 (Adaptive Security). A split scheme VC is adaptively secure, if for any adversary
A running in probabilistic polynomial time,
Pr[ExpAdap−V erif
A
[VC, λ] = 1] ≤ negl(λ).
3 A Generic Solution
In this section we describe our generic solution to outsource computation over encrypted data.
As we discussed in the introduction, where we give an intuitive idea about how our scheme
works, we assume the existence of a FHE scheme, and a VC scheme to outsource the computation
11
of generic functions, secure even in the presence of veriﬁcation queries. The latter can be achieved
using a variety of schemes, e.g. [27,36,13,14].
Before proceeding with the actual construction, we give a description of the requirements we
ask for an FHE scheme
3.1 Homomorphic Encryption
A fully homomorphic (public-key) encryption (FHE) scheme is a tuple of PPT algorithms
FHE = (FHE.ParamGen, FHE.KeyGen, FHE.Enc, FHE.Dec, FHE.Eval) deﬁned as follows.
FHE.ParamGen(λ). Deﬁne the parameters for the scheme, such as plaintext space M, ciphertext
space, keyspace, randomness distributions, etc. The output of ParamGen is assumed to be input
to any subsequent algorithm.
FHE.KeyGen(λ) → (pk, evk, dk). Output a public encryption key pk, a public evaluation key evk,
FHE.Encpk(m) → c. Encrypt message m ∈ M under public key pk. Outputs ciphertext c.
FHE.Decdk(c) → b. Decrypt ciphertext c using dk to a plaintext bit m ∈ M.
FHE.Evalevk(g, c1, . . . , ct) → c∗. Given the evaluation key evk, a circuit g : Mt → M, and a set of
and a secret decryption key dk.
t ciphertexts c1, . . . , ct, deterministically compute and output a ciphertext c∗.
An FHE should also satisfy the following properties.
Encryption Correctness. For all m ∈ M we have:
(cid:104)
(cid:105)
= 1.
FHE.Decdk(FHE.Encpk(m)) = m | (pk, evk, dk) $← FHE.KeyGen(λ)
Pr
Evaluation Correctness. For (pk, evk, dk) $← FHE.KeyGen(λ), any ciphertexts c1, . . . , ct such that
FHE.Decdk(ci) = mi ∈ M, and any circuit g : Mt → M, we have
FHE.Decdk(FHE.Evalevk(g, c1, . . . , ct)) = g(m1, . . . , mt).
Succinctness. The ciphertext size is bounded by some ﬁxed polynomial in the security parameter,
and is independent of the size of the evaluated circuit or the number of inputs it takes. I.e. there
$← FHE.KeyGen(λ), the output size of
exists some polynomial p such that, for any (pk, evk, dk)
FHE.Encpk and of Evalevk is bounded by p, for any choice of their inputs.
Semantic Security. An FHE is a semantically secure public-key encryption scheme, where we
consider the evaluation key evk as a part of the public key. I.e. for any PPT attacker A:
|Pr [A(λ, pk, evk, c0) = 1] − Pr [A(λ, pk, evk, c1) = 1]| ≤ negl(λ),
where the probability is over (pk, evk, dk) $← KeyGen(λ), cb
the coins of A.
$← FHE.Encpk(mb), m0, m1
$← M, and
3.2 The Generic Scheme
Let FHE = (FHE.ParamGen, FHE.KeyGen, FHE.Enc, FHE.Dec, FHE.Eval) be an FHE scheme as de-
ﬁned above. Also let VC = (KeyGen, ProbGen, Compute, Verify) be a VC scheme which is
12
correct, secure (resp. adaptively secure), and outsourceable, as deﬁned in Section 2. In particu-
lar note that VC does not need to be private, and that the security (resp. adaptive security) is
guaranteed in the presence of veriﬁcation queries.
We describe a new VC scheme PVC = (PrKeyGen, PrProbGen, PrCompute, PrVerify)
(for private VC) which uses the above two tools as follows.
PrKeyGen(f, λ) → (P KP , SKP ):
– Run FHE.KeyGen(λ) to generate (pk, dk, evk) for FHE.
– Run KeyGen(evalf , λ) to generate the P K, SK for VC, where evalf is the function that
takes as input FHE.Encpk(x) and outputs FHE.Encpk(f (x)). Given pk, evk this function is
eﬃciently computable.
– Set P KP = (P K, pk, evk) and SKP = (P KP , SK, dk).
PrProbGenSKP (x) → (σx, τx):
– Compute Cx = FHE.Encpk(x),
– Run ProbGenSK(Cx) to get (σx, τx).
PrVerifySKP
acc = 1, decrypt y = FHE.Decdk(C).
PrComputeP KP
of Cy = FHE.Evalevk(f, Cx).
(σx) → σy: Run ComputeP K(σx) to compute σy. Note that σy is an encoding
(τx, σy) → (acc, y): Run VerifySK(τx, σy) to get (acc, C). If acc = 0, reject. If
Theorem 1. If FHE is a semantically secure FHE, and VC is a correct, secure (resp. adaptively
secure), and outsourceable VC scheme, then PVC is a correct, secure (resp. adaptively secure),
outsourceable, and private VC scheme.
Proof. Correctness of PVC follows from the correctness of FHE and VC. Similarly the fact that VC
is secure (resp. adaptively secure), and outsourceable implies the same properties for PVC.
The one thing to argue then is privacy for PVC, and we prove that from the semantic security
of FHE. In other words we show that if an adversary A can learn any information about the input
x to PrProbGen in PVC then we can use A to break the semantic security of FHE.
Let us assume then that there exists A, f such that
Pr[ExpP rivA [VC, f, λ] = 1] ≥ ζ
where ζ = ζ(λ) is non-negligible in λ. We build a simulator S which is allowed to query A as an
oracle and such that(cid:12)(cid:12)Pr(cid:2)SA(λ, pk, evk, c0) = 1(cid:3) − Pr(cid:2)SA(λ, pk, evk, c1) = 1(cid:3)(cid:12)(cid:12) ≥ ζ
where the probability is over (pk, evk, dk) ← KeyGen(λ),{cb ← FHE.Encpk(b)}b∈{0,1}, and the coins
of S.
On input pk, evk, cb the simulator S runs as follows:
1. Run KeyGen(evalf , λ) to generate the P K, SK for VC on evalf . It sets P KP = (P K, pk, evk).
2. Run A on P KP . Remember that in this step A is allowed two types of queries:
– Queries to PProbGen which S can answer since it knows the public key pk of FHE and
the secret key SK of VC
13
– Queries to PVerify which S can also answer since it knows the secret key SK of VC.
Remember that PVerify returns only the acceptance/rejection bit acc which S can calculate
using only SK. The secret key dk of FHE (which S does not have) is not needed to answer
these queries.
3. At some point A outputs two inputs x0 (cid:54)= x1. Let us assume for now that x0 and x1 diﬀer in
a single bit, for example the ﬁrst. We will show later how to get rid of this assumption by a
standard hybrid argument. So let’s assume that x0 starts with 0 and x1 starts with 1.
S will construct Cxb by concatenating cb with the encryptions of all the other bits (which S can
compute using pk).
S will ﬁnish to run ProbGen on xb, to compute σxb, τxb and returns σxb to A. This part requires
only knowledge of SK so S can simulate it.
4. A will continue running and making queries to PProbGen and PVerify which the simulator
5. Finally A outputs a bit ˆb which is equal to b with probability 1/2 + ζ. S outputs the same bit,
will be able to answer as above.
and therefore S will also be correct with probability 1/2 + ζ.
To ﬁnish the proof we need to remove the assumption we made on the behavior of A in step
3. Let us assume that x0, x1 ∈ {0, 1}n and set xb = [xb,1xb,2 . . . xb,n]. Deﬁne the string x(j) =
[x1,1x1,2 . . . x1,jx0,j+1 . . . x0,n], so x(0) = x0 and x(n) = x1.
If A distinguishes between x0 and x1 with advantage ζ then by a standard hybrid argument
there must exists a j such that A distinguishes between x(j−1) and x(j) with advantage at least
ζ/n. Notice that in order to be the case we must have x0,j (cid:54)= x1,j. The proof then continues with
S guessing the bit j and placing the challenge ciphertext cb in position j of the ciphertext Cxb sent
to A. S will still guess the correct bit with non-negligible advantage.
Security vs Adaptive Security. Notice that a particular instantiation of our generic scheme
is split. For instance, consider the case in which the VC component of our generic solution is
implemented by using a SNARK (e.g. any of the protocols in [14,27,49,11]). In those protocols
basically τx can be empty (as many of those protocols are publicly veriﬁable). As a consequence
our generic protocol in this case is adaptively secure (the encoding of x is just an FHE encryption
of x, and the secret key SK is the decryption key of the FHE scheme).
Hiding the Function. We point out that by outsourcing the universal circuit computing functions
of a given size, we can hide not only the input data, but also the function being computed, so our
scheme can be compiled into one which is also function private, according to deﬁnition 4, and
without a signiﬁcant loss in performance.
4 Tools
In this section we describe a collection of tools that we will use to design our eﬃcient veriﬁable
computation protocols for ad-hoc functions. The tools include: bilinear groups, an adapted version
of the BV homomorphic encryption scheme, a new notion and realizations of homomorphic hash
functions, and amortized closed-form eﬃcient pseudorandom functions.
Bilinear Groups. Let G(1λ) be an algorithm that on input the security parameter 1λ, outputs the
description of bilinear groups bgpp = (q, G1, G2, GT , e, g, h) where G1, G2 and GT are cyclic groups
of the same prime order q > 2λ, g ∈ G1 and h ∈ G2 are two generators and e : G1 × G2 → GT is
an eﬃciently computable bilinear map. We call such an algorithm G a bilinear group generator.
14
4.1 A Somewhat Homomorphic Encryption for Quadratic Functions
We now describe a slight variation of the somewhat homomorphic encryption scheme by Brakerski
and Vaikuntanathan (BV) [20],3 based on the hardness of the polynomial learning with error
problem (which is a simpliﬁed version of the ring LWE problem [47]). The main diﬀerence compared
to [20] is that the scheme below is specialized to evaluate circuits of multiplicative depth one, and
it has a slightly diﬀerent evaluation algorithm.
HE.ParamGen(λ). Given the security parameter λ, one deﬁnes the polynomial ring R := Z[X]/Φm(X)
where Φm(X) is the m-th cyclotomic polynomial in Z[X], whose degree n = ϕ(m) is lower
bounded by a function of the security parameter λ.
The message space M is the ring Rp := R/pR := Zp[X]/Φm(X). Operations in M are denoted
with + for addition and · for polynomial multiplication modulo Φm(X). The homomorphic
properties of the scheme are over Rp. We choose to represent elements in M as elements in Zn
with inﬁnity norm bounded by p/2.
The ciphertext space is described as follows: pick an integer q > p which is co-prime to p (the
size of q can be determined as it is done in [20], section 2), and deﬁne the ring Rq := R/qR :=
Zq[X]/Φm(X). Ciphertexts can be thought of as polynomials in Zq[X][Y ] as follows:
– level-0 ciphertexts (those created by the encryption procedure and eventually manipulated
via additive operations only) have degree 1 in Y and degree (n − 1) in X, i.e., c ∈ Zq[X][Y ]
such that c = c0 + c1Y with c0, c1 ∈ Rq;
– level-1 ciphertexts (ciphertext manipulated via one multiplication and possibly other diﬀer-
ent homomorphic operations) have degree 2 in Y and degree 2(n−1) in X, i.e., c ∈ Zq[X][Y ]
such that c = c0 + c1Y + c2Y 2 with c0, c1, c2 ∈ Zq[X], degX (ci) = 2(n − 1).
Operations on ciphertexts are the corresponding ring operations over Zq[X][Y ] as described in
the evaluation algorithm.
Finally, the parameter generation algorithm deﬁnes the following distributions:
DZn,σ: the discrete Gaussian with parameter σ: it is the random variable over Zn obtained
from sampling x ∈ Rn with probability e−π·(cid:107)x(cid:107)2/σ2 and then rounding at the nearest lattice
point. Again, we refer to [20] for the speciﬁc choice of σ.
ZOn: sample a vector x = (x1, . . . , xn) with xi ∈ {−1, 0, +1} and Pr[xi = −1] = 1/4; Pr[xi =
1] = 1/4; Pr[xi = 0] = 1/2.
In the following, we assume that the parameters generated here are inputs of any subsequent
algorithm.
HE.KeyGen(1λ) → (pk, dk). Sample a $← Rq, and s, e $← DZn,σ. Considering s and e as elements in
Rq, compute b ← a · s + p · e, and set dk ← s and pk ← (a, b).
HE.Encpk(m, r) → c. Given m ∈ Rp, and r $← (ZOn, DZn,σ, DZn,σ), the message m is parsed as an
element in Rq with inﬁnity norm bounded by p/2, and the randomness r is parsed as a triple
q. The output is c = c0 + c1 · Y ∈ Rq[Y ], where c0 ← b · u + p · w + m and
r = (u, v, w) ∈ R3
c1 ← a · u + p · v.
HE.Evalpk(f, a, b) → c. Given two ciphertexts a, b ∈ Zq[X][Y ], where a = a0 + a1Y + a2Y 2, b =
b0 + b1Y + b2Y 2, and all ai, bj ∈ Zq[X], homomorphic additions and multiplications are the
3 This scheme can also be seen as a stripped down version (without ModSwitch and KeySwitch procedures) of the
scheme by Brakerski, Gentry and Vaikuntanathan [19].
15
corresponding operations over the ring Zq[X][Y ], namely:
(a0 + a1 · Y + a2 · Y 2) + (b0 + b1 · Y + b2 · Y 2) = (a0 + b0 + (a1 + b1) · Y + (a2 + b2) · Y 2)
(a0 + a1 · Y ) · (b0 + b1 · Y ) = (a0 · b0 + (a1 · b0 + b1 · a0) · Y + a1 · b1 · Y 2).
where additions and multiplications above correspond to additions and multiplications over
Zq[X]. We notice that the diﬀerence with the evaluation of the BV scheme is that here polyno-
mial multiplications are over Zq[X] without reducing (mod Φm(X)).