//在.ctors段里添加一个函数指针
ctor_t __attribute_((section (*,ctors*))) my_init_p = &my_init;
int main(1
printf(*World!\n*);
return 0;
如果运行此程序，结果将打印出：HelloWorld！
当然，事实上，gCc里有更加直接的办法来达到相同的目的，那就是使用
_attribute_(constructor)
示例如下：
#include 
void my_init (void)
_attribute_ ((constructor)) ;
void my_init (void)
(. oTtHgud
int main()
printf(*WorldI\n*);
return 0;
析构
对于早期的glibc和GCC，在完成了对象的构造之后，在程序结束之前，cn还要进行
程序员的自我修养一链接、装载与库
---
## Page 386
11.4C++全局构遮与析构
363
对象的析构。实际上正常的全局对象析构与前面介绍的构造在过程上是完全类似的，面且所
绍入口函数时我们可以看到，libc_start_main 将“_libc_csu_fini”通过_cxa_exitO注册到
退出列表中，这样当进程退出前exitO里面就会调用"libc_csu_fini””_fini"的原理和"_init”
基本是一样的，在这里不再一一赘述了。
不过这样做的好处是为了保证全局对象构造和析构的顺序（即先构造后析构），链接器
必须包装所有的“.dtor”段的合并顺序必须是“.ctor”的严格反序，这增加了链接器的工作
量，于是后来人们故弃了这种做法，采用了一种新的做法，就是通过_cxaatexitO在exitO
函数中注册进程退出回调函数来实现析构。
这就要回到我们之前在每个编译单元的全局构造函数GLOBAL_LHwO中看到的神秘
函数。编译器对每个编译单元的全局对象，都会生成一个特殊的函数来调用这个编译单元的
所有全局对象的析构函数，它的调用顺序与GLOBAL_I_HwO调用构造函数的顺序刚好相
反。例如对于前面的例子中的代码，编译器生成的所谓的神秘函数内容大致是：
static void _tcf_1 (void) //这个名宇由编译器生成
Hw, He11oWorld() :
F
此函数负责析构Hw对象，由于在GLOBAL_L_Hw中我们通过_cxa_exitO注册了
_tcf_1，面且通过_cxa_exitO注册的函数在进程退出时被调用的顺序满足先注册后调用的
属性，与构造和析构的顺序完全符合，于是它就很白然被用于析构函数的实现了。
当然在本节中介绍glibc/GCC的全局对象构造和析构时，省略了不少我们认为超出了本
书所要强调的范围细节，真正的构造和析构过程比上面介绍的要复杂一些，并且在动态链接
和静态链接不同的情况下，构造和析构还略有不间，但是不管哪种情况，基本的原理都是相
通的，按照上面介绍的步骤和路径，相信读者也能够白已重新根据真实的情况梳理清楚这条
调用路线。
提
由于全局对象的构建和析构都是由运行库完成的，于是在程序或共享库中有全局对象时，
示
记得不能使用“-nonstartfles”或“-nostdib”选项，否则，构建与析构函数将不能正
常执行（除非你很清楚自己的行为，并且手工构造和析构全局对象。
提
Collect2
示
我们在第2章时曾经碰到过colect2这个程序，在链接时它代替d成为了最终链接器，
一般情况下就可以简单地格它看成id。实标上collect2是d的一个包装，它最终还是调
用Id完成所有的链接工作，那么collect2这个程序的作用是什么呢？
在有些系统上，汇编器和链接器并不支持本节中所介绍的“init”“.ctor”这种机制，
程序员的自我修养一链接、装载与库
---
## Page 387
364
第11章运行库
于是为了实现在main函数前执行代码，必须在链接时进行特殊的处理。Collect2这个程
序就是用来实现这个功能的，它会“收集”（collect）所有输入目标文件中那些命名特殊
的符号，这些特殊的符号表明它们是全局构造函数或在main前执行，collect2会生成一
个临时的.c文件，将这些符号的地址收集成一个数组，然后放到这个.c文件里面，编译
后与其他目标文件一起被链接到最终的输出文件中。
在这些平台上，GCC编译器也会在main函数的开始部分产生一个_main函数的调
用，这个函数实际上就是负责collect2收集来的那些函数。_main函数也是GCC所提
供的目标文件的一部分，如果我们使用“-nostdlb’编译程序，可能得到_main函数未
定义的错误，这时候只要加上“-lgcc”把它链接上即可。
11.4.2MSVCCRT的全局构造和析构
在了解了Glibc/GCC的全局构造析构之后，让我们趁热打铁来看看MSVC在这方面是
如何实现的，有了前面的经验，在介绍MSVCCRT的全局构造和析构的时候使用相对简洁
的方式，因为很多地方它们是相通的。
首先很自然想到在MSVC的入口函数mainCRTStartup里是否有全局构造的相关内容。
我们可以看到它调用了一个函数为：
mainCRrStartup:
mainCRTStartup [}
_initterm( _xc_a, _xc_z );
其中_xc_a和_xc_z是两个函数指针，面initerm的内容则是：
mainCRTStartup -> _initterm:
while ( pfbegin 
define SBCNAME *,CRT$XCG*
#pragma sect ion (SECNAME, 1ong, read)
void foo()
1
std::cout 
class He1loor1d
public1
HelloWorld()(std::cout > qnooiipqs) ()ptxoμottaH-
HelloWorld H;
int main ()
return 0:
1
这里在加粗的位置上设置断点。运行程序并中断之后查看反汇编可以得到初始化函数的
内容：
011B1B70
BOV
eax,@word ptr [_imp_std::cout (11B2054h)]
011B1B75
push
011B1B7A
push
011BLB7B
ca11
std::operator > (11B1140h)
eax
011B1B80
push
offset
dynamic atexit destructor for *Hw** (11B1B90h)
011B1B85
ca11
atexit
(11B13B0h)
011B1B8A
add
011B1B8D
ret
esp, 0Ch
在这里可以看见这段程序首先调用了内联之后的 HelloWorld的构造函数，然后和g++
相同，调用atexit将一个名为 dynamic atexit destructor forHw的函数注册给程序退出时调用。
而这个 dynamic atexit destructor forHw函数的定义也能很容易找到：
'dynamic atexit destructor for ‘Hw*:
011B1B90
BOV
eax,dword ptr (_imp_stdi:cout (1182054h)]
011B1B95
uend
011B1B9A
011B1B9B
push
ca11
std::operator > (11B1140h)
eax
011B1BA0
011B1BA3
add
ret
esp, 8
可以看出，这个函数的作用就是在对象Hw调用内联之后进行析构，看到这里，我想各
位读者肯定有跟我一样的心情，那就是希望举一反三的望并不是不切实际的，它是实实在
在存在的.Glibc下通过_cxa_exitO向exitO函数注册全局析构函数：MSVC CRT也通过atexit()
实现全局析构，它们除了函数命名不同之外几乎没有区别。
程序员的自我修养——链接、装载与库
---