first three accounts could be my target, but are probably not. This is likely just a coincidence. However, we can 
assume that the owner of one of those accounts is the owner of all three since the passwords are identical. The 
fourth response is a toss-up, but worth further investigation.
"myspace" excrar OR exczip OR exc7z OR exttxt OR extsql
Hashes
BDC87B9C894DA5168059E00EBFFB9077
438 Chapter 28
SHA512:
8C7C9D16278AC60A19776F204F3109B1C2FC782FF8B671F42426A85CF72B1021887DD9E4FEBE420DC
D215BA499FF12E230DAF67AFFFDE8BF84BEFE867A8822C4
SHA256:
B9C950640E1B3740E98ACB93E669C65766F6670DD1609BA91FF41052B A48C6F3
SHA1:
E6B6AFBD6D76BB5D2041542D7D2E3FAC5BB05593
several 
are nearly
As a start, you may consider focusing on public credential leaks on Pastebin (pastebin.com). When you search 
an email address on Pastebin via Google, the results often include paste dumps. Clicking on these links will take 
you to the original paste document, which likely has many additional compromised credentials. A query of 
PI:EMAIL on this site wall likely present hundreds of data sets ready for download. Do you remember the 
"Index Of technique mentioned previously? This is very useful in searching for leaks. Any time I see on HIBP 
that a new' public leak has surfaced, I search for that specific data with a custom Google search. If I saw that 
Myspace has been exposed, I would use the following.
I cannot overstate that this instruction is the very’ tip of the iceberg. There are tens of thousands of compromised 
databases online, and more being published every' day. If y'ou find "COMB" to be valuable, y'ou may' consider 
researching others. If you invest some time into seeking the sources of this data, y'ou will quickly become 
overwhelmed at the mass amounts of content to properly' obtain, clean, and store. I can only discuss the basics 
here. It is your job to proceed if you choose.
credentials, 1 disagree. There is great potential value in these data dumps that could solve cases on a grand scale, 
and make a huge impact on the prosecution of serious criminals.
Most websites store passwords in "hashed" form. This guards against the possibility' that someone who gains 
unauthorized access to the database can retrieve the plain-text passwords of every' user in the system. Hashing 
performs a one-way transformation on a password, turning the password into another string, called the hashed 
password. "One-way" means that it was practically impossible to go the other way and turn the hashed password 
back into the original password. This was true many' y'ears ago, but not so much today. There are 
mathematically' complex hashing algorithms that fulfill these needs. Some are very' insecure and others 
impossible to crack. Let's look at a few examples.
MD5: Many' older databases which have been breached possessed simple MD5 password hashes. The password 
of "passw'ordl234" is as follows as an MD5 hash.
There are many online database resources that will sell you the data. Please avoid these. First, you wall likely get 
ripped off a few times before you find an "honest" seller. Second, you are giving money' to criminals, and I don't 
like encouraging that behavior. Many researchers that I know possess over 10,000 databases which contain over 
two terabytes of total information, all found on public sites. A search of this data can take a few minutes.
SHA1: The Sha-1 hash of the same password, "passwordl234", is as follows. Notice this is substantially' longer, 
and a bit more secure. However, it will be quite easy' for us to crack these passwords in just a moment. Below 
this example is the same password in Sha-256 and Sha-512 format. As you can see, these become increasingly 
complicated.
Hashes (hashes.org)
the site, I was
rg -a -F -i -N verybadl234
The result appears similar to the following.
Data Breaches & Leaks 439
MD5 00747af6279313863a0319070bdbfb80:168130
MD5 0075f8d9f099093bdbal0e8b7e88b47c:8208201982
MD5 007be02e9bd7eb4402al5f377ad22e9e:zhangker46
Leaks/713_f orums - nodoubt - com_f ound_hash_algorithm_plain. txt. zip 
MYSQL5 887b0eb63dbc543991567864efc0b05aad5a8ab2:verybadl234
Your target has an email address of "PI:EMAIL". A query of this email address within the COMB 
data reveals a password of "verybadl234". However, this does not tell you which breach is associated with this 
address. Within Terminal, after navigating to the "HashesOrg Archive" folder, the following command is issued.
The data tells us that this specific breach stored passwords in MD5 format. In this excerpt, we know that the 
MD5 hash of "00747af6279313863a0319070bdbfb80" reveals a password of "168130". We also know that a 
password of " zhangker46" was used within the Casio website at the time of the breach. Both of these pieces of 
data will be valuable to us. Let’s conduct an investigation.
https://pastebin.com/pS5AQN VO
https://defuse.ca/b/bgQpxtmO
https://old.reddit.com/r/DataHoarder/comments/ohlcye/hashesorg_archives_of_all_cracked_hash_lists_up
Once complete, you should have a folder titled "HashesOrg Archive" with folders of "Hashlists" and "Leaks 
inside of it. These two folders contain thousands of compressed zip files. While you could issue commands via 
Terminal to decompress all files, 1 find it easier to simply select all files within a folder; right-click on them; and 
select to open with your desired decompression tool. Once you see the ".txt" versions of each file present, you 
might want to delete the original ".zip" files to free some space. Let's take a look inside the "Leaks" folder and 
open the file tided "20_casio-com_found_hash_algorithm_plain.txt". A partial excerpt follows.
The entire archive of hashes and passwords which previously existed on hashes.org is available as a torrent file. 
The following websites contain a "magnet" torrent link within them. Copying and pasting this link within your 
browser should launch your default torrent software and begin the 90GB compressed download. Make sure you 
have plenty of space.
In regard to the various breached databases which you are likely to find on the internet, you will most commonly 
sec MD5 and SHA1 hashed passwords. Some of them possess a "salt". This is a small amount of data added to 
the hashing which makes cracking the password more difficult. If a breach docs not possess the salt, the 
passwords are nearly impossible to crack. If the salt is present, it takes considerable additional resources in order 
to display the text password. The methods of "cracking" passwords exceed the scope of this book. Fortunately, 
we do not need the knowledge and computer horsepower to convert these hashes into valuable passwords. We 
simply need a third-party resource.
Hashes.org attempted to reveal the plain text of your submitted password hash. This was usually done in an 
effort to assist security professionals to evaluate the security provided by the relevant hash submitted. For us, it 
provided a new lead to follow. The database contained billions of cracked hashes available via web search and 
API. If I queried " BDC87B9C894DA5168O59E00EBFFB9077" via the search page on the site, 1 was 
immediately presented with "passwordl234" as the password. Unfortunately, the service disappeared in late 
2020. However, online archives exist. 1 consider the following technique to be advanced, and only suitable for 
those who have a need to reveal hashed passwords as part of their daily operations.
PI:EMAIL:14FDF540E39F0F154C8D0B3BD82ACE100B779DFA
14FDF540E39F0F154C8D0B3BD82ACE100B779DFA - Hash Type: SHA1
rg -a -F -i -N 14FDF540E39FOF154C8DOB3BD82ACE1OOB779DFA
The results appear below.
rg -a -F -i -N stillverybad!234
MD5
440 Chapter 28
482c811da5d5b4bc6d497ffa9849le38:passwordl23
22f4182aae2784fb3dla432d44107f46:readerl2
We now know this is 
Hashes.org data set
PI:EMAIL:482C811DA5D5B4BC6D497FFA98491E38
PI:EMAIL:22F4182AAE2784FB3DlA432D44F07F46
Searching "14FDF540E39FOF154C8DOB3BD82ACE100B779DFA" through the hash identification website 
TunnelsUp (tunnelsup.com/hash-analyzer) reveals the following.
Leaks/706_forums-utorrent-com_-Found_hash_algorithm_plain. txt. zip 
SHA1 14FDF540E39F0F154C8D0B3BD82ACE100B779DFA: Stillverybadl234
Leaks/1182_prowrestlingf ans-com_found_hash_algorithm_plain.txt. zip
SHA1 14FDF540E39F0F154C8D0B3BD82ACE100B779DFA: stillverybad!234
a SHA1 hash which represents a password. We can execute the following within our
Some older data breaches possess passwords hashed with MD5, an extremely insecure method. These hashes 
can be cracked ver}’ quickly. Below are two entries retrieved from various files.
This may identify more data to be analyzed. However, this is all circumstantial. If a password is unique and 
complex, I have more confidence in the relationship to my suspect. If the password is "password 1234" and 
appears on hundreds of sites, this has no value. Let's take a closer look at some popular types of hashes.
We now have circumstantial evidence that a user on a web forum for the band No Doubt was using a password 
of "verybad!234" and the MYSQL5 hash of that password is "887b0eb63dbc543991567864efc0b05aad5a8ab2". 
Does this prove that "PI:EMAIL" was using this forum? No, but it is a solid lead. It could also be 
someone else using the same password. Since Hashes.org does not share the username or email address, wc 
must continue the investigation with the OSINT methods previously explained. Is that email address associated 
with any conversations about the band? That would give me more confidence with the result. We should look 
at the typical way that one would use the Hashes.org data set. Assume that you have identified the following 
data within a breach, leak, or online website.
We now know’ that "PI:EMAIL" likely used a password of "stillverybadl234" at some point in time. 
We also know’ that someone using the password of " still very bad1234" used that password on a uTorrent forum 
and a wrestling w-ebsite, both of which suffered a breach. Are these all the same person? We cannot definitely 
conclude that How’ever, these are great leads. My next search would be the following.
Everything before the colon is the username or email address, and everything after is the MD5 hash. Searching 
these hashes into your Hashes.org data produces the following results. We now know that the first password is 
"passwordl23" and the second is "readerl2".
MD5 + Salt (Vbullctin)
Searching these hashes and salts through your Hashes.org data provides the following results.
SHA1
Online Hash Search Resources
Annas,PI:EMAIL:9d9e3c372d054c0769bd93181240be36:tye
Traor,PI:EMAIL:9274583d060b3efb464115e65a8cl ead:w#
403E35A2B0243D40400AF6BB358B5C546CDDD981:letmein!
BlC4BBC4D7546529895CFABF8C1139CA7E486E18:LetMeIn!
PI:EMAIL:403E35A2B0243D40400AF6BB358B5C546CDDD981
PI:EMAIL:BlC4BBC4D7546529895CFABF8C1139CA7E486E18
https://osintsh/md5/
https://www.md5online.org/md5-decrypt.html
https://md5decrypt.net/en/
https://md5decrypt.net/en/Shal / 
https://www.dcode.fr/shal -hash 
https://md5hashing.net/hash/shal
9d9e3c372d054c0769bd93181240be36:tye:eliza!%
9274583d060b3efb464115e65a8cl ead:w#:runner
scenarios. The password 
very’ limited, but may offer
This format is slightly more secure than MD5, but still extremely easy’ to crack. The passwords obtained from 
the Linkedln breach were all hashed in SHA1. Below are two examples.
be extremely beneficial. It is quite a 
>se. Take some time to think about your
The following websites will convert MD5 and SHA1 hashes into passwords in some 
must be within their limited system and should not be very’ complex. These are 
immediate data.
Searching these can be time consuming. However, the results can 
commitment to download hundreds of gigabytes of data for this purpo: 
own needs. Many people may just need an online sendee to "crack" their hashes.
The results from Hashes follow. These two passwords are identical, but with different case. The first is all 
lowercase while the second contains uppercase. Notice that these create a completely different hash because of 
this. Keep this in mind when investigating passwords of your target.
Data Breaches & Leaks 441
Some hashes will contain a "salt". This is usually’ a small piece of data after the hash, and both pieces are required 
to translate into plain-text. One of the most popular examples of this are the hundreds of Vbulletin online 
forums which have been infiltrated by various hacking groups. In the following examples, the salt is the final 
three characters after the last colon.
In the first example, you see the target password is "eliza!%". This proves that semi-complex passwords 
containing special characters are often dehashed and ready’ for conversion. This is where Hashes sticks out from 
the crowd. There are many online reverse-hashing tools, but most of them focus only on one format, such as 
MD5, and use minimal dictionaries to crack the hashes. Let’s try one more demonstration.
install it within your OS1NT
sudo -H pip install search-that-hash -I
sth —text "5f4dcc3b5aa765d61d8327deb882cf99”
The result appears as follows.
Online Breach Search Resources
Email Address (PI:EMAIL)
Username (test)
Domain (inteltechniques.com)
Telephone (6185551212)
https://dehashed.com/search?query=6185551212
442 Chapter 28
https://haveibeenpwned.com/unifiedsearch/test 
https://dehashed.com/search?query=test
5f4dcc3b5aa765d61d8327deb882cf99
Text : password
Type : MD5
https://haveibeenpwned.com/unifiedsearch/PI:EMAIL
https://dehashed.com/search?query=PI:EMAIL
https://portal.spycloud.com/endpoint/enriched-stats/PI:EMAIL
https://check.cybemews.com/chk/?lang=en_US&e=PI:EMAIL 
https://intekx.io/?s=test@tesLcom
Within Terminal, you can now execute the following to search a hash within multiple online converters.
We now know that the hash value is a MD5 representation of the password "password”. This process is included 
within the script tided "Breaches/Leaks Tool" included in the OS1NT VM. I launch this application daily. When 
it cannot identify the password, 1 rely on my Hashes.org data set If all of this is simply too complicated, we can 
always rely on online sendees, as explained next.
Throughout this book, I have mentioned various websites which allow query of target data against breached and 
leaked content. These do not always display passwords, but will confirm presence within a specific breach. I will 
not revisit each option, as they have all been previously explained, but I will provide a summan’ with direct URL 
submission options. This will be vital for our Data Tool mentioned at the end of the chapter.
https://dehashed.com/search?query=inteltechniques.com
https://intelx.io/?s=inteltechniques.com
If you do not want to build, store, and maintain your own hash data set, 1 recommend Search That Hash 
(github.com/HashPals/Search-That-Hash) over the online options. If you followed the steps in chapters four 
and five, your OSINT VM is already configured for this tutorial. If not, you can i---------- .... J
virtual machine with the following step.
IP Address (l.l.l.l)
Name (Michael Bazzell)
https://dehashed.com/search?query=michael bazzell
Password (password 1234)
Hash (BDC87B9C894DA5168059E00EBFFB9077)
Miscellaneous Sites
H8Mail (github.com/khast3x/h8mail)
Launching rhe script with the following will produce minimal, if any, results.
h8mail -t PI:EMAIL
Data Breaches & Leaks 443
https://dehashed.com/scarch?query=l.l.l.l
https://intelx.io/?s=l .1.1.1
https://dehashed.com/search?query=pass word 1234
https://www.google.com/search?q=password!234
H8Mail attempts to combine many of the breach sendees we have explored into one utility. It should never take 
the place of a full manual review, but the embedded automation can be beneficial to an investigation. If you 
followed the steps in Chapter Five, you already have this program and the automated script (Breaches/Leaks 
Tool) installed. If not, conduct the following within Terminal.
https://dehashed.com/search?query=BDC87B9C894DA5168059E00EBFFB9077
https://www.google.com/search?q=BDC87B9C894DA5168059E00EBFFB9077
• 
sudo —H pip install h8mail -I
• 
cd -/Downloads && h8mail -g
• sed -i ’ s/\; leak\-lookup\_pub/leak\-lookup\_pub/g' h8mail_config.ini
The following websites do not allow submission via URL, but a manual search may be beneficial. Please 
remember that all of these sites come and go quickly. By the time you read this, some of these services may have 
shut down. It is equally possible that new resources are waiting for your discovery'.
LeakPeek (leakpeek.com) 
LeakedSource (leakedsource.ru) 
We Leak Info (weleakinfo.to) 
Beach Directory (breachdirectory.org)
Providing API keys from sendees such as Snusbase, WeLeaklnfo, Leak-Lookup, HavelBeenPwned, Emailrep, 
Dehashed, and Hunterio will provide MANY more results, but these sendees can be quite expensive. If you rely 
on breach data every day; can afford premium sendees; and do not want to collect your own breach data; there 
may be value for you within this option. After you have obtained API keys from your desired sendees, open the 
Files application, enter the Downloads folder, and double-click the file named "h8mail_config.ini". You should 
see text similar to the following partial example. Add your API keys within the appropriate lines, similar to the 
entry' for "leak-lookup pub”, and remove any' semicolons within lines you want to be used. If a semicolon is at 
the beginning of a line, that option is ignored. At the minimum, make sure the semicolon is removed from the
I can now conduct a query within Terminal agaii
• rg -a -F -I -N PI:EMAIL
This results in one entry as follows.
PI:EMAIL:H8teful0ne45
We now know that he used the password of H8tefuI0ne45
rg -a -F -I -N H8teful0ne45
This returned the following results.
444 Chapter 28
test@email. com, LEAKLOOKUP_PUB, ticketfly. com 
PI:EMAIL, LEAKLOOKUP_PUB, truef ire. com 
PI:EMAIL, LEAKLOOKUP_PUB, tumblr.com
Open Terminal, type cd, then space, 
Terminal. This makes sure you are i
■ 
; 
■ 
■ ----- ' - '5 on a site. We should next conduct a search of that
password to see if it is used anywhere else. The following query is appropriate.
johndoel2870gmail. com:H8teful0ne45 
johndoeggmail. com:H8teful0ne45 
johndoel287@hotmail. com:H8tefu!0ne45
;;weleakinfo_priv =
;;weleakinfo_pub =
;hibp =
leak-lookup_pub = Ibf 94f f 907f 68d511de9a610a6f f 9263
;leak-lookup_priv =
;emailrep =
After this new configuration file modification, I executed a search for test@email.com. The result was a file 
which contained 172 results. The following partial view confirms that this address exists within breaches from 
TicketFly, TrueFire, and Tumblr. Eliminating this modification returned no results.
"leak-lookup pub" line and execute another query’. You should see new results. If you conducted the sed 
command on the previous page, this should already be configured for you.
• cd 1 /media/osint/lTBExternal/ 1
I can now conduct a query’ within Terminal against all of my collected data. The following ^r^cs 
email address. Each query could take several minutes if you possess a lot of ata an a s o\
Sample Investigation
We have covered a lot so for within this chapter. Let's pause and conduct an investigation using this data. Assume 
that you possess the databases mentioned previously, especially "COMB". Your investigation identifies a suspect 
with an email address of johndoel287@gmail.com. This appears to be a burner email account, as you find no 
evidence of it anywhere online. It was used to harass your client and likely created only for devious activity. Our 
first step is to query’ the address through all the databases you have acquired. Assume these are all stored on 
your external hard drive, which is plugged into your host computer. You have already connected this dnve to a 
cloned OSINT virtual machine through the "Devices" menu in VirtualBox. Let’s take each step slowly.
, and drag-and-drop the external drive from your Files application into 
in the correct path. My command appears similar to the following.
We can now submit each of these throughout all of our data with the following three commands.
The first query’ returned the following result.
Data Breaches & Leaks 445