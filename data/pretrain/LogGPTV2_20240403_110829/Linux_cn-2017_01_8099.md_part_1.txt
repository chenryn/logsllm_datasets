---
author: David Both
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 2
  likes: 0
  sharetimes: 0
  viewnum: 14472
date: '2017-01-08 09:35:00'
editorchoice: false
excerpt: 探索 /dev 目录可以让您知道如何直接访问到 Linux 中的设备。
fromurl: https://opensource.com/article/16/11/managing-devices-linux
id: 8099
islctt: true
largepic: /data/attachment/album/201701/07/110422hj9xt9xsfgvvbefs.jpg
permalink: /article-8099-1.html
pic: /data/attachment/album/201701/07/110422hj9xt9xsfgvvbefs.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 探索 /dev 目录可以让您知道如何直接访问到 Linux 中的设备。
tags:
- 设备文件
- 文件系统
thumb: false
title: 在 Linux 中管理设备
titlepic: true
translator: erlinux
updated: '2017-01-08 09:35:00'
---
探索 `/dev` 目录可以让您知道如何直接访问到 Linux 中的设备。
![](/data/attachment/album/201701/07/110422hj9xt9xsfgvvbefs.jpg)
Linux 目录结构中有很多有趣的功能，这次我会讲到 `/dev` 目录一些迷人之处。在继续阅读这篇文章之前，建议你看看我前面的文章。[Linux 文件系统](/article-6132-1.html)，[一切皆为文件](/article-7669-1.html)，这两篇文章介绍了一些有趣的 Linux 文件系统概念。请先看看 - 我会等你看完再回来。
……
太好了 ！欢迎回来。现在我们可以继续更详尽地探讨 `/dev` 目录。
### 设备文件
设备文件也称为[设备特定文件](https://en.wikipedia.org/wiki/Device_file)。设备文件用来为操作系统和用户提供它们代表的设备接口。所有的 Linux 设备文件均位于 `/dev` 目录下，是根 （`/`） 文件系统的一个组成部分，因为这些设备文件在操作系统启动过程中必须可以使用。
关于这些设备文件，要记住的一件重要的事情，就是它们大多不是设备驱动程序。更准确地描述来说，它们是设备驱动程序的门户。数据从应用程序或操作系统传递到设备文件，然后设备文件将它传递给设备驱动程序，驱动程序再将它发给物理设备。反向的数据通道也可以用，从物理设备通过设备驱动程序，再到设备文件，最后到达应用程序或其他设备。
让我们以一个典型命令的数据流程来直观地看看。
![dboth-dev-dir_0.png](/data/attachment/album/201701/07/110514xkw0x0jk0o31wom1.png)
*图 1：一个典型命令的简单数据流程。*
在上面的图 1 中，显示一个简单命令的简化数据流程。从一个 GUI 终端仿真器，例如 Konsole 或 xterm 中发出 `cat /etc/resolv.conf` 命令，它会从磁盘中读取 `resolv.conf` 文件，磁盘设备驱动程序处理设备的具体功能，例如在硬盘驱动器上定位文件并读取它。数据通过设备文件传递，然后从命令到设备文件，然后到 6 号伪终端的设备驱动，然后在终端会话中显示。
当然， `cat` 命令的输出可以以下面的方式被重定向到一个文件， `cat /etc/resolv.conf > /etc/resolv.bak` ，这样会创建该文件的备份。在这种情况下，图 1 左侧的数据流量将保持不变，而右边的数据流量将通过 `/dev/sda2` 设备文件、硬盘设备驱动程序，然后到硬盘驱动器本身。
这些设备文件使得使用标准流 (STD/IO) 和重定向访问 Linux 或 Unix 计算机上的任何一个设备非常容易。只需将数据流定向到设备文件，即可将数据发送到该设备。
### 设备文件类别
设备文件至少可以按两种方式划分。第一种也是最常用的分类是根据与设备相关联的数据流进行划分。比如，tty (teletype) 和串行设备被认为是基于字符的，因为数据流的传送和处理是以一次一个字符或字节进行的；而块类型设备（如硬盘驱动器）是以块为单位传输数据，通常为 256 个字节的倍数。
您可以在终端上以一个非 root 用户，改变当前工作目录（`PWD`）到 `/dev` ，并显示长目录列表。 这将显示设备文件列表、文件权限及其主、次设备号。 例如，下面的设备文件只是我的 Fedora 24 工作站上 `/dev` 目录中的几个文件。 它们表示磁盘和 tty 设备类型。 注意输出中每行的最左边的字符。 `b` 代表是块类型设备，`c` 代表字符设备。
```
brw-rw----   1 root disk        8,   0 Nov  7 07:06 sda 
brw-rw----   1 root disk        8,   1 Nov  7 07:06 sda1 
brw-rw----   1 root disk        8,  16 Nov  7 07:06 sdb 
brw-rw----   1 root disk        8,  17 Nov  7 07:06 sdb1 
brw-rw----   1 root disk        8,  18 Nov  7 07:06 sdb2
crw--w----   1 root tty         4,   0 Nov  7 07:06 tty0 
crw--w----   1 root tty         4,   1 Nov  7 07:07 tty1 
crw--w----   1 root tty         4,  10 Nov  7 07:06 tty10 
crw--w----   1 root tty         4,  11 Nov  7 07:06 tty11
```
识别设备文件更详细和更明确的方法是使用设备主要以及次要号。 磁盘设备主设备号为 8，将它们指定为 SCSI 块设备。请注意，所有 PATA 和 SATA 硬盘驱动器都由 SCSI 子系统管理，因为旧的 ATA 子系统多年前就由于代码质量糟糕而被认为不可维护。造成的结果就是，以前被称为 “hd[a-z]” 的硬盘驱动器现在被称为 “sd[a-z]”。
你大概可以从上面的示例中推出磁盘驱动器次设备号的模式。次设备号 0、 16、 32 等等，直到 240，是整个磁盘的号。所以主/次 8/16 表示整个磁盘 `/dev/sdb` ， 8/17 是第一个分区的设备文件，`/dev/sdb1`。数字 8/34 代表 `/dev/sdc2`。
在上面列表中的 tty 设备文件编号更简单一些，从 tty0 到 tty63 。
Kernel.org 上的 [Linux 下的已分配设备](https://www.kernel.org/doc/Documentation/devices.txt)文件是设备类型和主次编号分配的正式注册表。它可以帮助您了解所有当前定义的设备的主要/次要号码。
### 趣味设备文件
让我们花几分钟时间，执行几个有趣的实验，演示 Linux 设备文件的强大和灵活性。 大多数 Linux 发行版都有 1 到 7 个虚拟控制台，可用于使用 shell 接口登录到本地控制台会话。 可以使用 `Ctrl-Alt-F1`（控制台 1），`Ctrl-Alt-F2`（控制台 2）等键盘组合键来访问。
请按 `Ctrl-Alt-F2` 切换到控制台 2。在某些发行版，登录显示的信息包括了与此控制台关联的 tty 设备，但大多不包括。它应该是 tty2，因为你是在控制台 2 中。
以非 root 用户身份登录。 然后你可以使用 `who am i` 命令 — 是的，就是这个命令，带空格 — 来确定哪个 tty 设备连接到这个控制台。
在我们实际执行此实验之前，看看 `/dev` 中的 tty2 和 tty3 的设备列表。
```
ls -l /dev/tty[23]
```
有大量的 tty 设备，但我们不关心他们中的大多数，只注意 tty2 和 tty3 设备。 作为设备文件，它们没什么特别之处。它们都只是字符类型设备。我们将使用这些设备进行此实验。 tty2 设备连接到虚拟控制台 2，tty3 设备连接到虚拟控制台 3。
按 `Ctrl-Alt-F3` 切换到控制台 3。再次以同一非 root 用户身份登录。 现在在控制台 3 上输入以下命令。