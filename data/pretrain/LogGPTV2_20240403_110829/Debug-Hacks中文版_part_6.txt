33
HACK
查看进程ID可以使用ps命令。下面以sleep命令为例介绍调试方法。
法返回控制台的进程时，可以使用attach命令。
要调试守护进程（daemonprocess）等已经启动的进程，或是调试陷入死循环而无
attach到进程
刚才介绍了Linux环境下的标准调试器GDB的基本用法，接下来介绍一些小技巧。
#6
.GDB: The GNU Project Debugger
格式：
参考文献
使用准备、启动、断点设置、栈帧显示、值显示、继续运行等调试的基本过程。
这里介绍了Linux环境中的标准调试器GDB的基本使用方法。内容包括调试器的
总结
析问题原因，或是分析客户现场发生的问题时十分有用。
该命令无须停止正在运行的程序以获得内核转储文件，当需要在其他机器上单独分
32|第2章调试前的必知必会
attachpid
hyoshiok 176060.00.02792620pts/2T+13:410:00
hyoshiok173150.00.389845840pts/4Ss+13:330:00
$psauxlgrep sleep
http://sources.redhat.com/gdb/current/onlinedocs/gdb_toc.html
http://sources.redhat.com/gdb/
调试器
本hack介绍GDB的一些使用技巧。
（GDB）的基本使用方法（之二）
www.TopSage.com
./sleep100
/usr/bin/gdb --anotate=3 sleep
—吉冈弘隆
---
## Page 51
错误（指定了绝不可能变成真的条件而导致的 bug）有很多种。
死循环，就是持续等待某条件变为真，其原因从自旋锁（spin lock）到单纯的逻辑
等待的原因可能有调用输入输出或系统调用时发生阻塞，或等待获得锁等。
导致的等待状况发生时进行调试。
本例并不是有 bug，但通过确认 backtrace，可以在程序陷入死循环或由于其他原因
查看源代码，发现的确是xnanosleep()先调用 nanosleep()。
__nanosleep_nocancel （)函数调用了系统调用，实现了等待。
态的。在 sleep 命令的例子中，从 backtrace 中可以看出，xnanosleep()调用的
用 bt命令显示backtrace（栈帧），即可看出程序是通过怎样的调用途径陷入等待状
用下述方法可以在 GDB中 attach 该进程。
左起第 2 列的数字就是进程 ID（pid)。本例中的 pid 为 17606。
xnanosleep (double seconds)
#2 Ox0804alca in xnanosleep (seconds=100) at xnanosleep.c:112
#1 x410bbdco in _nanosleep_nocancel () from /Lib/tls/i686/cmov/libc.so.6
#0 0xb803d430 in __kernel_ vsyscall ()
src/sleep, process 17606
hyoshiok 17895 0.0 0.0 3044 808 pts/1 S+ 13:50 0:00 grep sleep
gdb)
(gdb）bt
0xb803d430 in _kernel_ vsyscall ()
Loaded symbols for /lib/ld-linux.so.2
Loaded symbols for /lib/tls/i686/cmov/Libc.so.6
'system-supplied DS0 at 0xb801a000' has disappeared; keeping its symbols.
Attaching to program: 
(gdb) attach 17606
break;
if (nanosleep (&ts_sleep, NULL) == 0)
errno = 0;
: /home/hyoshiok/work/coreutils-6.10/build-tree/ coreutils-6.10/
www.TopSage.com
HACK#6 调试器（GDB} 的基本使用方法（之二)I 33
p*iseq
End with a line saying just "end".
Type commands for when breakpoint 2is hit,one per line.
（gdb)command2
Breakpoint 2at 0x811271a:file compile.c,line 425.
(gdb)b425
end
p*iseq
breakpoint alreadyhit 1time
breakpointkeepy
breakpointalreadyhit2times
stop only if node=0
breakpoint keepy
DispEnb
0x081127la in iseq_compile at compile.c:425
0x081126f6iniseq_compile at compile.c:422
Address
www.TopSage.com
---
## Page 56
表2-5命令和简写形式
在命令行模式下使用时，
命令名称在不与其他命令重复的前提下，
常用命令及省略形式
与前面所述的条件断点组合使用，就可以在断点暂停时执行复杂的显示动作等。
381
info
help
generate-core-file
forward-search
frame
edit
down
disable
directory
其他命令
until
X
step
print
next
info breakpoints 
finish
delete
continue
break
backtrace
常
命
break foo if x>0
end
commands
cont
printf "x is %d\n", x
第 2 章调试前的必知必会
www.TopSage.com
，按下 Tab 键，
C、cont
简写形式
一
gcore
f
e
n
S
Jd
P
bt、where
（别名）
，GDB 就会自动补全命令。
可以按照下述方式简写，如表2-5所示。
显示信息
智
生成内核转储
向前搜索 
en
在
禁用断点
插入目录
执行到指定行
业
智
执行下一行
显示断点信息 
删除断点
设置断点
显示backtrace
说明
示帮助一览
择要显示的栈帧
辑文件或函数
倾
当前调用的栈帧中选择要显示的
示内存内容
次执行一行，
行程序
示表达式
行到函数结束
包括函数内部
---
## Page 57
使用。
通过 print 命令显示过的值会记录在内部的值历史中。这些值可以在其他表达式中
值的历史
本 hack 继续介绍Linux 环境下的标准调试器GDB的使用技巧。
参考文献
本 hack 介绍了 GDB 的使用技巧。
总结
部的功能、变量和选项等。
info命令能显示调试对象的各种各样的信息。另一方面，show命令能显示 GDB 内
(gdb) p argc
stepi
sharedlibrary
print-object
nexti
list
其他命令
$1 = (int *) 0xbf926e00
GDB: The GNU Project Debugger
命令
(gdb) p *argc
http://sources.redhat.com/gdb/current/onlinedocs/gdb_toc.html
http://sources.redhat.com/gdb/
本hack 说明历史、初始化文件、命令定义等。
调试器
（GDB）的基本使用方法
share
8
3.
简写形式
51
HACK#7 调试器（GDB)的基本使用方法（之三)I  39
www.TopSage.com
执行下一行
加载共享库的符号
显示目标信息