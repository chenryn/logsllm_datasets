a puzzle must be incompressible in the sense that even the best
adversary can speed up the ﬁnding of a puzzle solution by at
most a factor of µ. More formally, a scratch-off puzzle is µ-
incompressible (where µ ≥ 1) if for any probabilistic poly-
nomial-time adversary A taking at most t · t steps,
 puz ← G(1λ),
Pr
(m, ticket) ← A(puz) :
Verify(puz, m, ticket) = 1
 ≤ ζ +(µt) ± negl(λ).
Note that ζ +(t) = 1−(1−2−d)t+1 is roughly the probability of
outputting a winning ticket after t unit scratch attempts, though
we additionally allow the adversary to make a ﬁnal guess at the
end (as in [42]), and hence the t + 1 in the exponent instead
of just t. Ideally, we would like the compressibility factor µ to
be as close to 1 as possible. When µ = 1, the honest Work
algorithm is the optimal way to solve a puzzle.
This deﬁnition implies, in particular, that solutions to previous
puzzles do not help in solving a freshly generated puzzle unseen
ahead of time.
3.1 Non-Transferability
For a practical scheme we could integrate into Bitcoin, we should
require that the payload of a ticket is non-transferable, in the fol-
lowing sense:
if an honest party publishes a ticket attributed to
a payload m (e.g., containing a public key belonging to the party
to whom the reward must be paid), the adversary should not gain
any advantage in obtaining a puzzle solution attributed to some
different payload m∗ for the same puz. This is because in Bit-
coin, each epoch is deﬁned by a globally known, unique puzzle
instance puz; at most one winning ticket for puz and a payload
message is accepted into the blockchain; and a user who solves a
puzzle only receives the reward if their message is the one that is at-
tributed. If an adversary can easily modify a victim’s winning ticket
to be attributed to a different payload of its choice, then the adver-
sary can listen for when the victim’s ticket is ﬁrst announced in
the network, and then immediately start propagating the modiﬁed
ticket (e.g., containing its own public key for the reward payment)
and attempt to outrace the victim. It is possible that the network
682will now deem the adversary as the winner of this epoch—this
is especially true if the adversary has better network connectivity
than the victim (as described in [18]). For simplicity in develop-
ing our constructions and nonoutsourceable deﬁnition, we deﬁne
this non-transferability requirement separately below. Intuitively,
non-transferability means that seeing a puzzle solution output by
an honest party does not help noticeably in producing a solution
attributed to a different payload m∗.
DEFINITION 2. Let δ be a nonnegative function of (cid:96). A scratch-
off puzzle is δ-non-transferable if it additionally satisﬁes the follow-
ing property:
For any (cid:96) = poly(λ), and for any adversary A taking t · t steps,
Pr
puz ← G(1λ)
m1, m2, . . . , m(cid:96) ← A(1λ)
∀i ∈ [(cid:96)] : ticketi ← WorkTillSuccess(puz, mi),
(puz, m∗, ticket∗) ← A(puz, {mi, ticketi}(cid:96)
i=1) :
Verify(puz, ticket∗, m∗) ∧ (∀i ∈ [(cid:96)] : m∗ (cid:54)= mi)
≤ ζ+((µ + δ)t) + negl(λ)
4. OUTSOURCED MINING AND WEAKLY
NONOUTSOURCEABLE PUZZLES
The Bitcoin scratch-off puzzle described in the previous section
is amenable to secure outsourcing, in the sense that it is possible
for one party (the worker) to perform mining work for the beneﬁt
of another (the pool operator) and to prove to the pool operator that
the work done can only beneﬁt the pool operator.
To give a speciﬁc example, let m be the public key of the pool
operator; if the worker performs 2d(cid:48)
scratch attempts, on average
it will have found at least one value r such that H(puz(cid:107)m(cid:107)r)  10 and te · 2−d 
2 (1 − γ) − negl(λ), and α = O(λ2); and is 0-non-transferable.
1
In other words, if the pool operator’s work tC is a not a signiﬁcant
fraction of te, i.e., work is effectively outsourced, then an adver-
sarial worker will be able to steal the pool operator’s ticket with a
reasonably big probability, and without too much additional work
than the honest worker.
The proof that this puzzle is weakly nonoutsourceable can be
found in our online full version [30], but we sketch the main idea
here.
Informally, to “effectively” outsource work to the worker,
the worker must know more than a constant fraction (say, 1/3) of
the leaves before calling the random oracle to determine whether
an attempt is successful. However, if the worker knows more than
1/3 fraction of the leaves, due to a simple Chernoff bound, it will be
able to easily steal the solution should one be found. To make this
argument formally is more intricate. For lack of space, we defer
(to the full online version of our paper) the proof that this puzzle is
non-transferable.
6. STRONGLY NONOUTSOURCEABLE
PUZZLES
In the previous section, we formally deﬁned and constructed a
scheme for weakly nonoutsourceable puzzles, which ensure that
for any “effective” outsourcing protocol, there exists an adversarial