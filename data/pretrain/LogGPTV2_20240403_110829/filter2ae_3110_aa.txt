最近一直在学习PHP源码，在对PHP各个变量的实现有了一个大概的了解之后，尝试着对PHP的一些特性进行分析。在PHP源码分析方面，我算是一个初学者，如果有错误，欢迎师傅们批评指正。
## 前言
`PHP`中有很多黑魔法，最初入门CTF的时候，就经常遇到考察`PHP`弱类型的题，比如
    "===" {
        RETURN_TOKEN(T_IS_IDENTICAL);
    }
路径：`Zend/zend_language_scanner.l:1476`
    "==" {
        RETURN_TOKEN(T_IS_EQUAL);
    }
我们可以知道，在词法分析时，标识`Token`为`T_IS_EQUAL`和`T_IS_IDENTICAL`，  
接下来语法分析的源码`Zend/zend_language_parser.y`中查找。  
路径：`Zend/zend_language_parser.y:931`
    |   expr T_IS_IDENTICAL expr
                { $$ = zend_ast_create_binary_op(ZEND_IS_IDENTICAL, $1, $3); }
路径：`Zend/zend_language_parser.y:935`
    |   expr T_IS_EQUAL expr
                { $$ = zend_ast_create_binary_op(ZEND_IS_EQUAL, $1, $3); }
可以知道，在语法分析中，调用生成`opcode`的函数为`zend_ast_create_binary_op`，生成的`opcode`分别是`ZEND_IS_EQUAL`和`ZEND_IS_IDENTICAL`。
接下来就是去寻找`opcode`对应的处理函数了。  
路径：`Zend/zend_vm_execute.h`  
根据`Token`可以搜索到很多函数的声明，根据函数名以及我们上面的`vld`扩展的输出，我们可以猜测，命名规则为  
`ZEND_IS_EQUAL_SPEC_`开头，接下来是`OP1`和`OP2`，然后以`HANDLE`结尾。
`ZEND_IS_IDENTICAL`对应函数的的声明也类似。
#### 2.2.1 '==' 源码实现分析
根据`vld`扩展的输出，我们找到对应的函数`ZEND_IS_EQUAL_SPEC_CV_CONST_HANDLER`。  
路径：`Zend/zend_vm_execute.h:36530`
    static ZEND_OPCODE_HANDLER_RET ZEND_FASTCALL ZEND_IS_EQUAL_SPEC_CV_CONST_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
    {
        USE_OPLINE
        zval *op1, *op2, *result;
        op1 = _get_zval_ptr_cv_undef(execute_data, opline->op1.var); // 获取OP1
        op2 = EX_CONSTANT(opline->op2); // 获取OP2
        do {
            int result;
            if (EXPECTED(Z_TYPE_P(op1) == IS_LONG)) {
                if (EXPECTED(Z_TYPE_P(op2) == IS_LONG)) { // 如果OP1和OP2都是长整型，直接作比较并获得结果
                    result = (Z_LVAL_P(op1) == Z_LVAL_P(op2));
                } else if (EXPECTED(Z_TYPE_P(op2) == IS_DOUBLE)) { // 如果OP1是长整型，OP2是浮点型，对OP1进行强制类型转换为浮点型，然后再作比较。
                    result = ((double)Z_LVAL_P(op1) == Z_DVAL_P(op2));
                } else {
                    break; // 跳出
                }
            } else if (EXPECTED(Z_TYPE_P(op1) == IS_DOUBLE)) { 
                if (EXPECTED(Z_TYPE_P(op2) == IS_DOUBLE)) { // 如果OP1和OP2都是浮点型，直接作比较并获得结果
                    result = (Z_DVAL_P(op1) == Z_DVAL_P(op2));
                } else if (EXPECTED(Z_TYPE_P(op2) == IS_LONG)) { // 如果OP1是浮点型，OP2是长整型，对OP2进行强制类型转换为浮点型，然后再作比较
                    result = (Z_DVAL_P(op1) == ((double)Z_LVAL_P(op2)));
                } else {
                    break; // 跳出
                }
            } else if (EXPECTED(Z_TYPE_P(op1) == IS_STRING)) {
                if (EXPECTED(Z_TYPE_P(op2) == IS_STRING)) { // 如果OP1和OP2都是字符串
                    if (Z_STR_P(op1) == Z_STR_P(op2)) { // 取出OP1和OP2的zval.value.str结构体，判断是否相等
                        result = 1;
                    } else if (Z_STRVAL_P(op1)[0] > '9' || Z_STRVAL_P(op2)[0] > '9') { // 如果OP1或者OP2的字符串开头不是数字
                        if (Z_STRLEN_P(op1) != Z_STRLEN_P(op2)) { // 两个字符串长度不相同
                            result = 0;
                        } else {
                            result = (memcmp(Z_STRVAL_P(op1), Z_STRVAL_P(op2), Z_STRLEN_P(op1)) == 0);// 按字节来判断OP1和OP2的字符串结构体是否相等
                        }
                    } else {
                        result = (zendi_smart_strcmp(Z_STR_P(op1), Z_STR_P(op2)) == 0); // 使用zendi_smart_strcmp来判断OP1和OP2的字符串是否相等
                    }
                } else {
                    break;
                }
            } else {
                break;
            }