Again, there is more than one issue. But we can check a performance - 1M iterations needs about 922ms. It is relatively slow - but this language is designed for different purpose - it is glue of SQL. plpgsql_check shows some warnings:  
```  
postgres=# SELECT * FROM plpgsql_check_function('example02', performance_warnings => true);  
+-----------------------------------------------------------------------------------------+  
|                                 plpgsql_check_function                                  |  
+-----------------------------------------------------------------------------------------+  
| performance:42804:3:statement block:target type is different type than source type      |  
| Detail: cast "integer" value to "bigint" type                                           |  
| Hint: Hidden casting can be a performance issue.                                        |  
| Context: during statement block local variable "result" initialization on line 2        |  
| performance:42804:6:assignment:target type is different type than source type           |  
| Detail: cast "numeric" value to "bigint" type                                           |  
| Hint: Hidden casting can be a performance issue.                                        |  
| Context: at assignment to variable "result" declared on line 2                          |  
| warning extra:00000:4:DECLARE:never read variable "i"                                   |  
| performance:00000:routine is marked as VOLATILE, should be IMMUTABLE                    |  
| Hint: When you fix this issue, please, recheck other functions that uses this function. |  
+-----------------------------------------------------------------------------------------+  
(11 rows)  
Time: 2,080 ms  
```  
The most important issues are: 1. lazy casting from numeric inside cycle's body, 2. the function is marked as VOLATILE by default, although it should be marked IMMUTABLE (because doesn't do any operation with tables). The overhead of lazy cast from numeric type is about 470ms. The overhead of default VOLATILE is 200ms. The function   
```  
CREATE OR REPLACE FUNCTION public.example02(integer)  
 RETURNS bigint  
 LANGUAGE plpgsql  
AS $function$  
DECLARE result bigint DEFAULT 0;  
BEGIN  
  FOR i IN 1..$1  
  LOOP  
    result := result + 1;  
  END LOOP;  
  RETURN result;  
END;  
$function$ IMMUTABLE  
```  
needs about 250ms for 1M iterations (good reduction from original 922ms). Probably it should be faster - I have developer build of PostgreSQL with active assertions.  
### SQL injection detection  
动态SQL没有使用identified或format封锁，所以可以被入侵，例如输入变量时采用or条件加注释接口。。  
plpgsql_check can help with most dangerous security issue of SQL world - SQL injection. Here is again buggy code:  
```  
CREATE OR REPLACE FUNCTION count_rows(tablename text)  
RETURNS text AS $$  
DECLARE result int;  
BEGIN  
  EXECUTE 'SELECT count(*) FROM ' || tablename INTO result;  
  RETURN result;  
END   
$$ LANGUAGE plpgsql STABLE;  
CREATE FUNCTION  
postgres=# SELECT count_rows('bigtable');  
+------------+  
| count_rows |  
+------------+  
| 1000000    |  
+------------+  
(1 row)  
```  
This code is terrible bad, but plpgsql_check can to show the problem:  
```  
postgres=# SELECT * FROM plpgsql_check_function('count_rows', security_warnings => true);  
+-----------------------------------------------------------------------------+  
|                           plpgsql_check_function                            |  
+-----------------------------------------------------------------------------+  
| security:00000:3:EXECUTE:text type variable is not sanitized                |  
| Query: SELECT 'SELECT count(*) FROM ' || tablename                          |  
| --                                       ^                                  |  
| Detail: The EXECUTE expression is SQL injection vulnerable.                 |  
| Hint: Use quote_ident, quote_literal or format function to secure variable. |  
+-----------------------------------------------------------------------------+  
(5 rows)  
```  
Fixing is not hard:  
```  
CREATE OR REPLACE FUNCTION count_rows(tablename text)  
RETURNS text AS $$DECLARE result int;  
BEGIN  
  EXECUTE 'SELECT count(*) FROM ' || quote_ident(tablename) INTO result;  
  RETURN result;  
END  
$$ LANGUAGE plpgsql STABLE;  
CREATE FUNCTION  
Time: 51,511 ms  
postgres=# SELECT * FROM plpgsql_check_function('count_rows', security_warnings => true);  
+------------------------+  
| plpgsql_check_function |  
+------------------------+  
+------------------------+  
(0 rows)  
CREATE OR REPLACE FUNCTION count_rows(tablename text)  
RETURNS text AS $$DECLARE result int;  
BEGIN  
  EXECUTE format('SELECT count(*) FROM %I', tablename) INTO result;  
  RETURN result;  
END  
$$ LANGUAGE plpgsql STABLE;  
CREATE FUNCTION  
Time: 55,931 ms  
postgres=# SELECT * FROM plpgsql_check_function('count_rows', security_warnings => true);  
+------------------------+  
| plpgsql_check_function |  
+------------------------+  
+------------------------+  
(0 rows)  
```  
The SQL injection detection is only basic, but almost all bugs of this type are very simple.  
## 小结  
使用plpgsql_check可以帮助用户发现存储过程的问题（不需要run，即可发现问题），例如  
1、客户函数中引用了不存在的表或列。触发器函数引用了不存在的中间表、对象等。  
```  
postgres=# select * from plpgsql_check_function('foo_trg()', 'bar');  
                 plpgsql_check_function                   
--------------------------------------------------------  
 error:42703:3:assignment:record "new" has no field "c"  
(1 row)  
For triggers with transitive tables you can set a oldtable or newtable parameters:  
create or replace function footab_trig_func()  
returns trigger as $$  
declare x int;  
begin  
  if false then  
    -- should be ok;  
    select count(*) from newtab into x;   
    -- should fail;  
    select count(*) from newtab where d = 10 into x;  
  end if;  
  return null;  
end;  
$$ language plpgsql;  
select * from plpgsql_check_function('footab_trig_func','footab', newtable := 'newtab');  
```  
2、帮助用户发现SQL注入的风险。  
3、performance tips：帮助用户发现性能问题，例如没有创建索引，导致性能变差。  
4、plpgsql profiler：帮助用户分析plpgsql函数或存储过程内部执行SQL的平均响应速度，最大响应速度，从而了解plpgsql代码瓶颈。  
如果需要大批量了解plpgsql存储过程是否存在问题，可以使用系统表发觉。  
```  
-- check all nontrigger plpgsql functions  
SELECT p.oid, p.proname, plpgsql_check_function(p.oid)  
   FROM pg_catalog.pg_namespace n  
   JOIN pg_catalog.pg_proc p ON pronamespace = n.oid  
   JOIN pg_catalog.pg_language l ON p.prolang = l.oid  
  WHERE l.lanname = 'plpgsql' AND p.prorettype <> 2279;  
or  
SELECT p.proname, tgrelid::regclass, cf.*  
   FROM pg_proc p  
        JOIN pg_trigger t ON t.tgfoid = p.oid   
        JOIN pg_language l ON p.prolang = l.oid  
        JOIN pg_namespace n ON p.pronamespace = n.oid,  
        LATERAL plpgsql_check_function(p.oid, t.tgrelid) cf  
  WHERE n.nspname = 'public' and l.lanname = 'plpgsql'  
or  
-- check all plpgsql functions (functions or trigger functions with defined triggers)  
SELECT  
    (pcf).functionid::regprocedure, (pcf).lineno, (pcf).statement,  
    (pcf).sqlstate, (pcf).message, (pcf).detail, (pcf).hint, (pcf).level,  
    (pcf)."position", (pcf).query, (pcf).context  
FROM  
(  
    SELECT  
        plpgsql_check_function_tb(pg_proc.oid, COALESCE(pg_trigger.tgrelid, 0)) AS pcf  
    FROM pg_proc  
    LEFT JOIN pg_trigger  
        ON (pg_trigger.tgfoid = pg_proc.oid)  
    WHERE  
        prolang = (SELECT lang.oid FROM pg_language lang WHERE lang.lanname = 'plpgsql') AND  
        pronamespace <> (SELECT nsp.oid FROM pg_namespace nsp WHERE nsp.nspname = 'pg_catalog') AND  
        -- ignore unused triggers  
        (pg_proc.prorettype <> (SELECT typ.oid FROM pg_type typ WHERE typ.typname = 'trigger') OR  
         pg_trigger.tgfoid IS NOT NULL)  
    OFFSET 0  
) ss  
ORDER BY (pcf).functionid::regprocedure::text, (pcf).lineno  
```  
5、限制和参数配置，被动、主动模式配置请参考：   
https://github.com/okbob/plpgsql_check  
## 参考  
http://okbob.blogspot.com/2019/08/why-you-need-plpgsqlcheck-if-you-write.html  
https://github.com/okbob/plpgsql_check  
https://groups.google.com/forum/#!forum/postgresql-extensions-hacking  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")