occur 
covered. 
of Formulas Running Daikon and Traviando 
Derivation 
on this set  of traces, 
Daikon, 169 with Traviando. 
ent types of formulas 
light specific 
properties 
we obtain 1815 formulas 
We will go through 
with 
the differ­
3 and high­
we described 
to illustrate 
in Section 
our experiences. 
Type 1. Daikon rightly 
for all state variables 
produces 
a discrete 
set of values 
of the tagged bot submodel, 
which 
978-1-4244-7501-8/101$26.00 
©2010 IEEE 
602 
DSN 2010: Klock & Kemper 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:04:17 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP 
International 
Conference 
on Dependable 
Systems 
& Networks 
(DSN) 
upper bounds.  Traviando  produces 
lower and up­
e.g., that the total number of active propagation 
lower 
upper bounds for 
It does not produce any 
as well as relative 
only take values in {a, I}. Daikon also produces 
bounds for 15 variables 
3 variables, 
bots is an upper bound for the number of active propaga­
tion bots in the botnet submodel. 
absolute 
per bounds for all 33 variables. 
E was selected to 
ues so the computed upper bounds (even if not exactly 
the maximum legal value 231 - 1 for all state variables) 
high enough to cover experiments 
a formal specification 
know during a runtime 
values in E is insufficient 
rigid enough. 
cases for ranges of val­
at 
are 
In this way, 
generated 
verification 
range of 
phase was not 
from E will let an analyst 
Since our set of test runs 
cover borderline 
and thus the testing 
if the exercised 
of interest. 
is not observed 
for any variables 
these properties. 
both Daikon and Traviando 
Type 2. Monotonicity 
in this model and hence E does not rise to such formu­
las. However, 
recognize 
and bounds of type 1 raises 
does if a bound is reached. 
then the only legal behavior 
value of that variable 
run. When generating 
lyst must be given to consider 
A combination 
the question 
If both observations 
for the model is to keep the 
for the rest of the simulation 
would be able to 
of monotonicity 
these formulas, 
of what the model 
constant 
feedback 
are valid, 
this case. 
to an ana­
invariants 
for 
due to the 
(closed 
recognizes 
computation 
capacity variable 
very simple equations 
that solves a linear equation 
sums, e.g., that the total number of initial 
bot in­
is the sum of those at Botnet and TaggedBot 
or spe­
Type 3. Daikon only obtains 
weighted 
fections 
cial cases such as x =  y. Traviando 
from an invariant 
system. For the botnet model, we obtain invariants 
for the 
tagged bot submodel as well as for the botnet submodel 
since both models are closed subsystems 
idle respectively 
which limit the number 
of tagged bots to one and the number of bots in the botnet 
to 231 -1). Since we added state variables 
submodel 
that 
give the total number of bots in a particular 
state (by adding 
those in the botnet submodel 
the model set of weight vectors 
tains eight different 
a particular 
of invariants 
alert an analyst 
a parsimonious 
for variables 
cause variables 
irregular 
that modify these variables 
are challenging 
calculation, 
I =  379 for the activity 
I Ll(initialbotinfeGtion)
that mod­
for arrivals. 
els the Erlang distribution 
may 
to clean up the model description 
model if desired. 
W that is computed con­
due to the possibility 
vectors 
by a sum of two others. 
The number 
equations 
data values that are changed in an 
and the tagged bot subodel), 
as well as some of Daikon's 
that models the arrivals, 
manner. The activities 
There is no such equation 
for an invariant 
of the submodel 
e.g., E yields 
represent 
to replace 
variable 
to obtain 
be­
in Ll(initialbotinfeGtion) 
those cases impractical. 
of both for state transformation 
state for 
to the starting 
hundreds 
referring 
referring 
x :::; y, x' 
or mixtures 
of when an action 
inequalities 
to the successor 
Daikon recognizes 
of Daikon. Daikon generates 
what it does and what the resulting 
relationships 
=  y, or x' 
of some action a. Traviando 
but it is not checking 
It solely recognizes 
state is, this is 
of equa­
and value sets for combinations 
of vari­
Type 4, 5, and 6. The characterization 
occurs, 
the strength 
tions, 
ables, be it with values of variables 
state for preconditions, 
postconditions 
functions. 
ent variables, 
e.g., 
occurrence 
las for each action, 
different 
conjunction 
state transformation 
each action a. One lists all observed 
other consists only 
of a conjunction 
that gives bounds for the observed 
latter 
infection 
We observe 
makes the formula that enumerates 
The alternative 
-115:::; K' -K :::; 132 with respect 
among differ­
>  y' for the 
formu­
generates 
relations 
as a 
preconditions 
For 
two formulas 
for 
cases in Ll(a). The 
variables 
v' - v. The 
bot 
K. 
useful for the action of the initial 
a random value to state variable 
which 
over all 
difference 
formula that uses ranges simply states 
of ranges of values of individual 
is particularly 
functions, 
variables. 
variables. 
to variable 
that assigns 
379 vectors 
it creates 
between 
K. 
v E V 
that 
to this type of formu­
a formula for each action with an 
(out of 28). An in­
actions 
generates 
successor 
Type 7. Daikon does not contribute 
las. Traviando 
of 8.3 possible 
average 
teresting 
case results 
on the number of active 
of the arrival 
process. 
diately, 
its only observed 
that model that a propagation 
2) returns 
This is a relevant 
there are three actions 
propagation 
for a correct 
property 
from the action that reacts on a change 
bots and forces a restart 
Since this action 
reacts almost imme­
that have only this action as 
to active mode, or 3) is identified 
and removed. 
bot 1) goes into sleep mode, 
model. 
immediate  successor,  namely 
the actions 
of experiments 
that varies 
or defense 
being successful 
does not modify functional 
of the model. A runtime verification 
as expected 
of the gen­
of 
hold. The ones that may fail and de­
simulation 
that almost all 
model are some statistical 
A series 
reveals 
to be successful 
Runtime Verification. 
the probabilities 
of attacks 
mechanisms 
properties 
erated sets of formulas 
formulas 
the derived 
pend on the executed 
ones obtained 
and the incomplete 
tion functions 
las considered 
istic finite automata. 
Mobius simulators 
down the Mobius simulation. 
ification 
where Mobius runs a distributed 
chines. Monitoring 
for a simulation 
and Traviando 
with Daikon that are not backed by the model 
representation 
of the state transforma­
model. All types of formu­
in the arrival 
result in rather simple and small determin­
between 
The socket communication 
clients 
a runtime 
ver­
We performed 
monitoring 
slows 
across five ma­
1815 Daikon-generated 
we 
simulation 
formulas, 
study of 18 model configurations 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
603 
DSN 2010: Klock & Kemper 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:04:17 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP 
International 
Conference 
on Dependable 
Systems 
& Networks 
(DSN) 
a slowdown by a factor of 41. Monitoring 
[5] A. Bauer, M. Leucker, and C. Schallhart. 
Runtime verifica­
imposed a slowdown by a factor of 25, and monitor­
168 
less numerous 
but 
which are 
formulas, 
observed 
Traviando-generated 
longer, 
ing all 1983 formulas 
62. Unless future improvements 
trace data and the evaluation 
head substantially, 
only to simulation experiments 
the overall 
reduces 
the runtime verification 
of formulas 
resulted 
running 
that are short enough to keep 
this over­
can be applied 
times in an acceptable range. 
in a slowdown by a factor of 
for the communication of 
tion for LTL and TLTL. Technical 
Miinchen, 2007. 
report, TUM-I0724, TU 
[6] N. Benes, L. Brim, I. Cema, J. Sochor, P. Verkova, and 
for state/event 
LTL. 
IFM 2009, vol­
B. Zimmerova. P artial order reduction 
In M. Leuschel and H. Wehrheim, editors, 
ume 5423 of LNCS, pages 307-321. Springer, 
2009. 
[7] S. Bensalem and D. P eled, editors. Runtime Verification, 
9th Int. Workshop, 
LNCS. Springer, 2009. 
RV 2009, France, 2009., volume 5779 of 
6. Conclusion 
[8] L. Bodrog, G. Horvath, S. Racz, and M. Telek. A tool sup­
port for automatic analysis based on the tagged customer 
approach. In QEST, pages 323-332. IEEE CS, 2006. 
of a simulation  model 
We presented 
an approach 
to derive a formal specifi­
correct 
traces. Set  is obtained 
discrete 
behavior 
formulated 
simulations 
of a stochastic 
and validation 
The set of properties 
to the long-standing 
cation of the functional 
from a set of finite simulation 
from running 
tems model for verification 
that it is reasonable 
model behavior. 
mainly safety properties 
mulas contributes 
ing appropriate  documentation 
well as achieving 
tion to documentation 
las (possibly 
be used for runtime verification 
production 
fied model much like regression 
opment. We implemented 
Mobius, Daikon, and Traviando 
automated framework 
as its runtime 
event sys­
such 
purposes 
to assume that  represents 
that we derive are 
in LTL. This set of for­
challenge 
of hav­
model as 
of a simulation 
and validation. 
In addi­
set of formu­
ones) can 
model for 
of a modi­
in software 
with the help of 
of a simulation 
evaluations 
purposes, 
with manually 
testing 
our approach 
runs or for consistency 
for the generation 
its verification 
verification. 
the generated 
of formulas 
generated 
enriched 
as well 
devel­
in order to obtain a fully 
[9] S. Chaki, E. Clarke, J. Ouaknine, N. Sharygina, and 
based software model checking. In 
IFM 2004, vol­
N. Sinha. State/event 
E. Boiten, J. Derrick, and G. Smith, editors, 
ume 2999 of LNCS, pages 128-147. Springer, 
2004. 
[10] D. D. Deavours, G. Clark, T. Courtney, D. Daly, S. Derisavi, 
J. M. Doyle, W. H. Sanders, and P. G. Webster.  The 
framework and its implementation. 
969,2002. 
IEEE TSE, 28(10):956-
Mobius 
[11] N. Dinesh, A. K. Joshi, I. Lee, and o. Sokolsky. Checking 
traces for regulatory 
RV, volume 5289 of LNCS, pages 86-103. Springer, 
conformance. 
In M. Leucker, editor, 
2008. 
[12] M. D. Ernst, J.  H. P erkins, P. J. Guo, S. McCamant, 
C. P acheco, M. S. Tschantz, 
tem for dynamic detection 
Program., 69(1-3):35-45, 2007. 
and C. Xiao. The Daikon sys­
of likely invariants. 
Sci. Comput. 
[13] P. Kemper.  Recovering 
model invariants 
from simulation 
traces with P etri net analysis techniques. 
tion Conference. 
ACM, 2009. 
In Winter Simula­
[14] P. Kemper. Report generation 
for simulation 
traces with Tra­
viando. In DSN, pages 347-352. IEEE CS, 2009. 
[15] P. Kemper and C. Tepper. Automated trace analysis of dis­
We thank the reviewers 
Acknowledgements. 
to improve the paper. We also thankfully 
the James Monroe Scholars 
lowship program of the College 
vided funding 
that 
program and the Chappell 
Fel­
of William and Mary pro­
who helped 
acknowledge 
for this undergraduate 
project. 
research 
References 
[1] O. Balci. Quality assessment, 
verification, 
and validation 
of 
modeling and simulation 
Winter Simulation 
applications. 
In Proc. of the 2004 
pages 122-129. IEEE, 2004. 
Conference, 
[2] A. Baliga, V. Ganapathy, 
and L. Iftode. Automatic inference 
and enforcement 
puter Security 
of kernel data structure 
invariants. 
Com­
Applications 
Con!, 0:77-86, 2008. 
[3] A. Bauer, M. Leucker, and C. Schallhart. 
Monitoring 
of real­
In S. Arun-Kumar and N. Garg, editors, 
time properties. 
F SITCS, volume 4337 of LNCS, pages 260-272. Springer, 
2006. 
[16] M. Kim, M. Viswanathan, 
crete event system models. IEEE TSE, 35,2: 195-208, 2009. 
S. Kannan, I. Lee, and o. Sokol­
approach for java pro­
sky. Java-MaC: A run-time assurance 
grams. Formal Methods in System Design, 24(2):129-155, 
2004. 
[17] M. Leucker and C. Schallhart. 
A brief account of runtime 
verification. 
1. Log. Algebr. Program., 78(5):293-303, 
2009. 
[18] O. Mondragon, A. Q. Gates, S. Roach, H. Mendoza, and 
for runtime monitoring 
properties 
o. Sokolsky. Generating 
from software specification 
neering and Knowledge  Engineering, 
patterns. Int 1 Software Engi­
2007. 
Runtime verifica­
tion of c memory safety. In Bensalem and P eled [7], pages 
132-151. 
17(1):107-126,
[19] G. Rosu, W. Schulte, and T.-F. Serbanuta. 
[20] E. V. Ruitenbeek 
and W. H. Sanders. Modeling peer-to-peer 
botnets. In QEST, pages 307-316. IEEE CS, 2008. 
[21] S. Sahoo, M.-L. Li, P. Ramachandran, 
S. Adve, V. Adve, and 
Y. Zhou. Using likely program invariants 
errors. In DSN. IEEE CS, 2008. 
to detect hardware 
[22] R. G. Sargent. Verification 
models. In Winter Simulation 
ACM,2008. 
and validation 
Conference, 
pages 157-169. 
of simulation 
[4] A. Bauer, M. Leucker, and C. Schallhart. 
The good, the bad, 
and the  ugly, 
S. Tasiran, 
138. Springer, 
2007. 
but how ugly is ugly? In O. Sokolsky and 
editors, 
RV, volume 4839 of LNCS, pages 126-
[23] W. Zhou, O. Sokolsky, B. T. Loo, and I. Lee. DMaC: Dis­
and checking. In Bensalem and P eled 
monitoring 
tributed 
[7], pages 184-201. 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
604 
DSN 2010: Klock & Kemper 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:04:17 UTC from IEEE Xplore.  Restrictions apply.