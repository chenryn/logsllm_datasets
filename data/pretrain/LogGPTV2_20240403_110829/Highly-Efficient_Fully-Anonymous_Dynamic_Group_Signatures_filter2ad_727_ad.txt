SignR(M, sk) : On input a representative M = (Mi)i∈[(cid:96)] of equivalence class [M ]R and
a secret key sk = (xi)i∈[(cid:96)] ∈ (Zp)(cid:96), return ⊥ if Mi /∈ G∗
1 for some i ∈ [(cid:96)]. Else, choose
y ←R Zp and output σ ← (Z, Y, ˆY ) with
Y ← 1
y
P
ˆY ← 1
y
ˆP .
Z ← y(cid:80)
i∈[(cid:96)] xiMi
VerifyR(M, σ, pk): On input a representative M = (Mi)i∈[(cid:96)] of equivalence class [M ]R,
a signature σ = (Z, Y, ˆY ) and public key pk = ( ˆXi)i∈[(cid:96)], output 0 if for some i ∈ [(cid:96)]:
Mi /∈ G∗
2. Return 1 if the following
equations hold and 0 otherwise:
2; or if Z /∈ G1 or Y /∈ G∗
1 or ˆXi /∈ G∗
1 or ˆY /∈ G∗
(cid:81)
i∈[(cid:96)] e(Mi, ˆXi) = e(Z, ˆY ) ∧ e(Y, ˆP ) = e(P, ˆY ).
ChgRepR(M, σ, µ, pk): On input a representative M = (Mi)i∈[(cid:96)] of equivalence
class [M ]R, signature σ = (Z, Y, ˆY ), µ ∈ Zp and public key pk, return ⊥ if
VerifyR(M, σ, pk) = 0. Otherwise pick ψ ←R Zp and return ˆσ ← (ψµZ, 1
VKeyR(sk, pk): On input sk = (xi)i∈[(cid:96)] and pk = ( ˆXi)i∈[(cid:96)], output 1 if for all i ∈ [(cid:96)]:
xi ∈ Zp and ˆXi ∈ G∗
2 and xi ˆP = ˆXi; return 0 otherwise.
ψ Y, 1
ˆY ).
ψ
Scheme 2: The SPS-EQ scheme from [FHS18, FHS15]
The group signing key gski consists of a vector of two group elements (R, P ) ∈
1)2 and an SPS-EQ signature σ ∈ G1×G∗
(G∗
2 on this vector. Randomization
of gski with a random value ρ ∈ Z∗
p, i.e., ChgRepR, requires 4 multiplications in
G1 and 1 multiplication in G2. Veriﬁcation of the signature in gski requires 5
pairings.
1×G∗
5.1 CPA-Full Anonymity
Subsequently, we show how Sign and Vrf are instantiated in the CPA-full anonymity
setting. Therefore, let H : {0, 1}∗ → Zp be a random oracle and let x be the
proven statement (which is implicitly deﬁned by the scheme):
Sign(gpk, gski, m) : Parse gski as ((R, P ), σ), choose ρ ←R Zp, compute σ1 = ((R(cid:48),
P (cid:48)), σ(cid:48)) ← ChgRepR(gski, ρ, pkR). Choose ν ←R Zp, compute N ← νP , c ←
H(N||σ1||m||x), z ← ν + c · ρ, set σ2 ← (c, z), and return σ ← (σ1, σ2).
Vrf(gpk, m, σ) : Parse σ as (σ1, σ2) = (((R(cid:48), P (cid:48)), σ), (c, z)), return 0 if VrfR(σ1,
pkR) = 0. Otherwise let N ← zP − cP (cid:48) and check if c = H(N||σ1||m||x) holds.
If so return 1 and 0 otherwise.
The used Σ-protocol is a standard proof of knowledge of the discrete logarithm
logP P (cid:48), and it is easy to see that applying the transformations from [FKMV12]
yields a SoK in the ROM with the properties we require. Group signatures con-
tain 4 elements in G1, 1 element in G2 and 2 elements in Zp. Counting only the
expensive operations, signing costs 5 multiplications in G1 and 1 multiplication
in G2, and veriﬁcation costs 2 multiplications in G1 and 5 pairings.
5.2 CCA2-Full Anonymity
CCA2-full anonymity requires straight-line extractable SoKs, as standard re-
winding would lead to an exponential blowup in the reduction (cf. [BFW15]).
One possibility would be to rely on the rather ineﬃcient approach to straight-line
extraction due to Fischlin [Fis05]. However, as we do not need to straight-line
extract the full witness w, but it is suﬃcient to straight-line extract an image of
w under a one-way function f : ρ (cid:55)→ ρ · ˆP , we can use the notion of straight-line
f -extractable SoKs as recently proposed by Cerulli et al. [BCC+15]. This allows
us to still use the FS paradigm with good eﬃciency. The construction uses the
generic conversion in [FKMV12, BPW12]. The generic trick in [BCC+15] to ob-
tain straight-line f -extractability is by computing an extractable commitment
to the image of the witness w under a function f with respect to an extraction
key in the CRS and proving consistency with the witness.7
For straight-line extractability, we let ˆY be a public key for the ElGamal vari-
ant in G2 from [BCC+15], which is generated upon SoK.Setup and represents
the CRS of SoK. SoK.SSetup additionally returns τ such that ˆY = τ · ˆP . Fur-
thermore, let x be the proven statement (implicitly deﬁned by the scheme and
the generic compiler). Subsequently, we show how Sign and Vrf are instantiated
in this setting, where H : {0, 1}∗ → Zp is modelled as a random oracle:
Sign(gpk, gski, m) : Parse gski as ((R, P ), σ), choose ρ ←R Zp, compute σ1 = ((R(cid:48),
P (cid:48)), σ(cid:48)) ← ChgRepR(gski, ρ, pkR). Choose u, ν, η ←R Zp, compute ( ˆC1, ˆC2) =
(u ˆY , ρ ˆP + u ˆP ), N ← νP , ˆM1 ← η ˆY , ˆM2 ← (ν + η) ˆP , c ← H(N|| ˆM1|| ˆM2||σ1||
m||x), z1 ← ν + c · ρ, z2 ← η + c · u, set σ2 ← ( ˆC1, ˆC2, c, z1, z2), and return
σ ← (σ1, σ2).
Vrf(gpk, m, σ) : Parse σ as (σ1, σ2) = (((R(cid:48), P (cid:48)), σ), (c, z1, z2)), return 0 if Ver-
ifyR(σ1, pkR) = 0. Otherwise let N ← z1P − cP (cid:48), ˆM1 ← z2 · ˆY − c · ˆC1,
ˆM2 ← (z1 + z2) · ˆP − c · ˆC2, and check if c = H(N|| ˆM1|| ˆM2||σ1||m||x) holds. If
so return 1 and 0 otherwise.
Perfect completeness is easy to verify. Below, we prove SHVZK, i.e., that there
is an eﬃcient simulator, and special soundenss, i.e., and that there exists an
extractor. Note that we additionally require the Σ-protocol to provide quasi-
unique responses [Fis05], i.e., given an accepting proof it should be infeasible to
ﬁnd a new valid response for that proof, in order for the compiler in [BCC+15]
to apply.
Lemma 1. The above Σ-protocol is perfectly complete, SHVZK, special-sound
and has quasi-unique responses.
7 Note that one can still obtain the full witness w using a rewinding extractor.
Proof. We investigate all properties, but omit perfect completeness as it is
straight forward to verify.
SHVZK. We describe a simulator which outputs transcripts being indistin-
guishable from real transcripts. First, it chooses P (cid:48) ←R G1, ˆC1 ←R G2, ˆC2 ←R G2.
While P (cid:48) and ˆC1 are identically distributed as in a real transcript, the ran-
dom choice of ˆC2 is not detectable under DDH in G2 which holds in the SXDH
setting (more generally under IND-CPA of the used encryption scheme). Then,
the simulator chooses z1, z2, c ←R Zp and computes N ← z1 · P − c · P (cid:48), ˆM1 ←
z2 · ˆY − c · ˆC1, ˆM2 ← (z1 + z2) · ˆP − c · ˆC2. It is easy to see that the transcript
(P (cid:48), ˆC1, ˆC2, N, ˆM1, ˆM2, z1, z2, c) represents a valid transcript and its distribution
is computationally indistinguishable from a real transcript.
Special soundness. Let us consider that we have two accepting answers (z1, z2,
2, c(cid:48)) from the prover for distinct challenges c (cid:54)= c(cid:48). Then we have
c) and (z(cid:48)
that
1, z(cid:48)
z1 − c · ρ = z(cid:48)
1 − c(cid:48) · ρ and z2 − c · u = z(cid:48)
c−c(cid:48) , u ← z2−z(cid:48)
c−c(cid:48) .
1
2 − c(cid:48) · u,
and extract a witness as ρ ← z1−z(cid:48)
Quasi-unique responses. The answers z1 and z2 are uniquely determined by
the word ˆY , P (cid:48), ˆC1, ˆC2, the commitments N , ˆM1, ˆM2 as well as the challenge c
(and thus the veriﬁcation equation).
2
Lemma 2. Applying the generic conversions from [FKMV12] to the Fiat-Shamir
transformed version of the above Σ-protocol with the setup SoK.Setup as de-
scribed in Section 5.2 produces a signature of knowledge in the random oracle
model, that is extractable and straight-line f -extractable.
Proof. The proof is analogous to [BCC+15], but we re-state it for completeness:
For simulatability, we observe that the CRS output by SoK.SSetup is identical
to the CRS output by SoK.Setup and SoK.SimSign programs the random oracle
to simulate proofs. Simulatability then follows from SHVZK. For extractability
we rely on rewinding, special soundness and quasi-unique responses, using the
results from [FKMV12]. For straight-line f -extractability, we use the trapdoor
τ to decrypt ( ˆC1, ˆC2) in the proof transcript and obtain ρ ˆP = f (ρ).
Switching Groups. The above protocol requires more operations in the more
expensive group G2 than in G1. As we work in the SXDH setting, we can switch
the roles of G1 and G2 and thus all elements in G1 to G2 and vice versa, which
trades computational eﬃciency for signature size.
6 Evaluation and Discussion
We now discuss our work in the light of recent concurrent, independent work.
Then, we provide a performance evaluation targeting resource-constrained de-
vices.
The [BCC+16] Model.
In independent and concurrent work, a new model
for fully-dynamic group signatures was proposed by Bootle et al. in [BCC+16].
Bootle et al. address maliciously generated issuer and opener keys, include the
notion of opening soundness from [SSE+12] and formally model revocation by
means of epochs. Although we target security in a diﬀerent model, we want to
brieﬂy put our construction in context of their recent model.
We could easily incorporate the requirement to support maliciously generated
keys in the fashion of [BCC+16] by extending the actual public keys of issuer
and opener by a (straight-line extractable) zero-knowledge proof of knowledge
of the respective secret keys.
For a practical revocation approach, it seems to be reasonable to choose
a re-issuing based approach, i.e., to set up a new group after every epoch, as
also used in [BCC+16]. Their group signature construction being secure in their
model builds upon accountable ring signatures [BCC+15]. It comes at the cost of
a group public key size linear in the number of group members and a signature
size logarithmic in the number of group members, and the revocation related
re-issuing requires every group member to obtain the new group public key.8
Applying the same revocation approach to our scheme yields public keys as
well as signatures of constant size, and re-issuing requires each remaining group
member to re-join the new group.
While our scheme provides weak opening soundness, achieving the stronger
notion for our scheme (where the opening authority may be malicious) would
require the opening authority to additionally prove that the opened index i cor-
responds to the lowest index in reg so that the respective entry together with the
signature in question satisﬁes the relation RO. Such a proof could eﬃciently be
instantiated using non-interactive plaintext in-equality proofs [BDSS16]. Never-
theless, we opted to stick with weak opening soundness because: (1) The only
beneﬁt of strong opening soundness would be to also cover dishonest opening
authorities, while we believe that assuming the opening authority’s honesty—
given its power to deanonymize every user—is a crucial and very reasonable as-
sumption. (2) Even [SSE+12], who introduced the notion of opening soundness
emphasize that already weak opening soundness addresses all the attacks that
motivated opening soundness in the ﬁrst place. (3) Strong opening soundness
would unnecessarily degrade the simplicity of our scheme.
6.1 Performance Evaluation and Comparison
To underline the practical eﬃciency of our approach, we provide a comparison
of our ROM instantiation with other schemes in the ROM. Although in recent
time we have seen increasing interest in group signatures schemes based on as-
sumptions related to lattices and codes, existing schemes [LLNW16, LLM+16,
ABCG17] are far from being competitive with regard to performance, let alone
their suitability for current resource constrained devices. Consequently, we put
8 There is a recent accountable ring signature scheme [LZCS16], which enables con-
stant size signatures.
our focus on pairing based schemes. In particular we use two schemes who follow
the approach of Bichsel et al., i.e., [BCN+10, PS16], which provide less desir-
able anonymity guarantees (denoted CCA− henceforth), and the well known
BBS scheme [BBS04] (with and without precomputations) providing CPA-full
anonymity. We note that we use the plain BBS scheme for comparison, which
does not even provide non-frameability and the non-frameable version would be
even more expensive. Moreover, we use the group signature scheme with the
shortest known signatures [DP06] (with and without precomputations) being
secure in the strong BSZ model and thus providing CCA2-full anonymity. Fi-
nally, we also compare our scheme to the recent CCA2-fully anonymous scheme
by Libert et al. [LMPY16] which is secure in the ROM under SXDH.
In Table 1 we provide a comparison of the estimated eﬃciency in a 254bit
BN-pairing setting, where we highlight the values where our scheme is currently
the best known scheme among other existing schemes providing the same secu-
rity guarantees. Our estimations are based on performance values on an ARM-
Cortex-M0+ with drop-in hardware accelerator [UW14]. This processor is small
enough to be suited for smart cards or wireless sensor nodes [UW14]. Table 2
provides an abstract comparison regarding signature size, computational costs,
and type of the underlying assumption.
Scheme
[BCN+10]
[PS16]
[BBS04]
[BBS04] (prec.)
Ours
Ours
Ours (switch)
[DP06]
[DP06] (prec.)
[LMPY16]
Anon.
CCA−
CCA−
CPA
CPA
CPA
CCA2
CCA2
CCA2
CCA2
CCA2
Signature Size
1273bit
1018bit
2289bit
2289bit
2037bit
3309bit
3563bit
2290bit
2290bit
2547bit
Sign
351ms
318ms
1545ms
1053ms
266ms
771ms
703ms
1380ms
1020ms
1688ms
Verify
1105ms
777ms
2092ms
1600ms
886ms
1290ms
1154ms
2059ms
1353ms
2299ms
Table 1. Estimations based on a BN-pairing implementation on an ARM-Cortex-
M0+ with drop-in hardware accelerator, operating at 48MHz [UW14]. The performance
ﬁgures using 254-bit curves are 33ms-101ms-252ms-164ms (G1-G2-GT -pairing). For the
estimation of signature sizes, we use 255bit for elements in G1, 509bit for elements in
G2 and 254bit for elements in Zp. The bold values highlight where our schemes are
currently the fastest and have the shortest signatures.
Computational Eﬃciency. When comparing our CPA-fully ano-nymous scheme
as well as our CCA2-fully anonymous scheme to other schemes providing the
same anonymity guarantees, ours are the by now fastest ones regarding signa-
ture generation and veriﬁcation costs. While there are schemes which use slightly
less progressive assumptions, it seems that very good performance requires more
‡
‡
‡
‡
R
C
D
+
)
c
i
t
a
t
s
-
n
o
n
(
e
p
y
T
-
q
R
C
D
+
)
c
i
t
a
t
s
-
n
o
n
(
e
p
y
T
-
q
)
1
(
)
1
(
e
p
y
T
n
o
i
t
p
m
u
s
s
A
n
e
p
O
e
v
i
t
c
a
r