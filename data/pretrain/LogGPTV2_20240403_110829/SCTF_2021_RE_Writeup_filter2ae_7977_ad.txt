                _cxa_throw(v6, (struct type_info *)&`typeinfo for'struct_of_step3, 0i64);
              case 0x6591:
                v4 = (struct_of_step1 *)_cxa_allocate_exception(1ui64);
                struct_of_step1::struct_of_step1(v4);
                _cxa_throw(v4, (struct type_info *)&`typeinfo for'struct_of_step1, 0i64);
              case 0x10A9:
                v5 = (struct_of_step2 *)_cxa_allocate_exception(1ui64);
                struct_of_step2::struct_of_step2(v5);
                _cxa_throw(v5, (struct type_info *)&`typeinfo for'struct_of_step2, 0i64);
            }
            ++cnt;
          }
          while ( cnt != 3 );
        }
        v7 = (last_struct *)_cxa_allocate_exception(1ui64);
        text_84(v7);
        _cxa_throw(v7, (struct type_info *)&`typeinfo for'last_struct, 0i64);
      }
      printf("length error!\n");
      return 0;
    }
效果不错，美中不足的就是前面还留下了一些 exception 相关的函数，都是没用的。这些并不影响分析流程，也就不管了。
继续分析，中间有 srand ，那么 rand 生成的数是完全可预测的，写个程序跑一下就得到了（动调也可以），然后又要处理三个 throw ， Graph
View 里看，很不幸，第一个 case 0x5208: 的 throw 块就没有了指向 catch 块的箭头，这就得手动找一下。
这里有一个 starts at 40273D ，也就是说 try 块是从 0x40273D 开始的，而相应的 catch 块也会有这样的标识，鼠标点下
40273D 使其高亮，然后拖动图在周围找一下高亮，定位到 catch 块：
可以看到这个 catch 块有多个标识： owned by 40273D ，说明有多个 catch 块，而继续定位另两个 case 的 throw
指令，发现指向这块的 throw 正是 case 0x6591 的 throw 块，或许第一个 case 的 throw 没有箭头指向 catch
就是因为有一个 throw 占用了这个箭头。。。
多个 catch 的分发器，由 rdx 的值决定分发给哪个 catch 块，至于 rdx 的值与 catch
块的对应关系，这个暂时还不知道，可能是程序启动时由某个函数注册的吧。要确定上面三个 throw 到这里 catch 块的 rdx 的值，通过动调就可以。
后面的大部分也还是上面的异常处理隐藏流程， patch 为 jmp 就都能恢复了，整体恢复出来如下：
      printf("---------------------Welcome_to_SCTF_2021---------------------\n");
      printf("Please input your flag: \n");
      scanf("%s", data);
      length = strlen(data);
      if ( length == 32 )
      {
        for ( w = 0; w ::allocator(&v62);
          std::__cxx11::basic_string,std::allocator>::basic_string(
            rbx9,
            "init_part",
            &v62);
          std::allocator::~allocator(&v62);
          v13 = _cxa_get_exception_ptr(rbx9);
          std::__cxx11::basic_string,std::allocator>::basic_string(&init, v13);
          _cxa_begin_catch(rbx9);
          qmemcpy(key, "Welcome_to_sctf!", sizeof(key));
          k0_0 = *(_DWORD *)key;
          k1_0 = *(_DWORD *)&key[4];
          k2_0 = *(_DWORD *)&key[8];
          k3_0 = *(_DWORD *)&key[12];
          /*
           set cmp_arr
          /**/
          std::__cxx11::basic_string,std::allocator>::~basic_string(&init);
          _cxa_end_catch();
          for ( i = 0; i ourroundkeys;
              temp_3.ourciphertext = v10->ourciphertext;
              temp_3.ourroundkeys = v50;
              _cxa_begin_catch(v9);
              enc_next_ready(temp_3.ourciphertext, temp_3.ourroundkeys);
              _cxa_end_catch();
            }
            ++x;
          }
          if ( !w )
          {
            for ( i_0 = 0; i_0  1 )
          {
            if ( cnt == 2 )
            {
              *(_QWORD *)_cxa_allocate_exception(8ui64) = 0x4050AA3D70A3D70Ai64;
              temp_1 = *(double *)_cxa_begin_catch(v3);
              for ( i = 0; i ::allocator(&v11);