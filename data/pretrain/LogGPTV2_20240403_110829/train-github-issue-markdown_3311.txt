## Bug Report
**Current Behavior**  
I have an anonymous generic async arrow function which contain Prmose.all, it
work fine when try to compile using tsc but fail using babel. Probably related
to #9086 . I try to create REPL bellow.
**Input Code**
  * REPL
It need plugin tranform typescript
    const a = async (data: T): Promise => Promise.resolve(data)
    const b = async (data: T[]): Promise => {
      const x = await Promise.all(
        data.map(x => Promise.resolve(x));
      )
      return x
    }
    export const c = async (data: T): Promise => Promise.resolve(data)
it will compile if I comment c function
**Expected behavior/code**  
It works with tsc so it should work with babel too.
**Babel Configuration (.babelrc, package.json, cli command)**
    {
     {
      "presets": [
        ["@babel/env", {
          "targets": {
            "node": true
          }
        }],
        "@babel/typescript"
      ],
      "plugins": [
        ["module-resolver", {
          "root": ["./src"],
          "alias": {
            "@": "./src"
          },
          "extensions": [".js", ".ts", ".tsx"]
        }],
        "@babel/proposal-class-properties",
        "@babel/proposal-object-rest-spread"
      ]
    }
    }
**Environment**
  * Babel version(s): v7.3.4
  * Node/npm version: node v10.15.1 / npm 6.4.1
  * OS: v10.15.1
  * Monorepo: yes
  * How you are using Babel: cli
**Possible Solution**  
Probably related to #9086
this is my first issue report in my history, i'm sorry if i made any mistake.