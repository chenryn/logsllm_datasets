HI
(c)
Figure 7.3: Transforming a State Machine.
The  state  machine  is  transformed  so  that  forward  correctable  GNI  can  be
applied to it.  Part (a) shows the replacing  of  high  level  output  transitions
with  l
  transitions  and  (c)
shows the elimination of non-determinism.
  transitions.    (b)  shows  the  elimination  of  the  l
After  the  high  level  output  transitions  have  been  replaced  with  l
  transitions  the
high level input transitions should be removed from the state machine.  The state machine
at this point will only have states with low level event transitions.   Now  the  projections
from each state must be calculated.  The projection indicates the possible futures that the
low  level  user  in  that  state.    Figure  7.4(a)  and  Figure  7.4(b)  show  this  transformation
given causal and non-causal GNI respectively.
- 88 -
(cid:222)
(cid:222)
L2
L1,
L2
1
L
3
5
0
L
(a)
L1, L2
L
L1
L1, L2
2
1
L1,
L2
L
4
3
0
L
2
L1, L2
L1, L2
4
5
(b)
Figure 7.4: State Machines to be used to Calculate Projections.
Figure  (a)  is  the  state  machine  for  forward  correctable  GNI  and  (b)  is  the
state machine to be used for non-forward correctable GNI.
We will now calculate the projections from each state.  For the  state  machine  in
part (a) of Figure 7.4 (Note: ‘+’ means OR):
p (q0) = [L(L1 + L2)*]*
p (q1) = null + L(L1 + L2)*
p (q2) = null + (L1 + L2) [L(L1 + L2)*]*
p (q3) = null + (L1 + L2) [L(L1 + L2)*]*
p (q4) = null + L1[L(L1 + L2)*]*
p (q5) = null + L2[L(L1 + L2)*]*
For the state machine in part (b) of Figure 7.4:
p (q0) = [L(L1 + L2)*]*
p (q1) = null + L(L1 + L2)*
p (q2) = null + (L1 + L2) [L(L1 + L2)*]*
p (q3) = null + (L1 + L2) [L(L1 + L2)*]*
p (q4) = null + (L1 + L2) [L(L1 + L2)*]*
p (q5) = null + (L1 + L2) [L(L1 + L2)*]*
We are ready to apply the unwinding conditions to see if the state machines satisfy
GNI.    For  the  first  state  machine  notice  that  p (q3)  =  null  +  (L1  +  L2)  [L(L1  +  L2)*]*  „
p (q3/HI) = p (q5) = null + L2[L(L1 + L2)*]*.  Therefore this system  does  not  satisfy  GNI.
Another  way  of  seeing  this  is  to  consider  the  trace    and  the  perturbation
.    This  perturbation  does  not  have  a  causal  correction.    This  can  be  seen  by
examining state 5 of Figure 7.2.  There is no L2 transition from this state and all high level
events do not change the state of the system.
- 89 -
Now we will examine the state machine in part (b) of Figure 7.4:
p (q0) = [L(L1 + L2)*]* = p (q0/HI) = p (q1)
p (q1) = p (q1/HI) = p (q1)
p (q2) = null + (L1 + L2) [L(L1 + L2)*]* = p (q2/HI) = p (q4)
p (q3) = null + (L1 + L2) [L(L1 + L2)*]* = p (q3/HI) = p (q5)
p (q4) = p (q4/HI) = p (q4)
p (q5) = p (q5/HI) = p (q5)
Therefore the state machine in part (b) of Figure 7.4 satisfies Forward Correctable
Generalized Noninterference.  But, we have transformed the state machine and hence the
original state machine satisfies Generalized Noninterference.  The trace the gives Forward
Correctable Generalized Noninterference problems, namely , and the perturbation
 has a correction .
7.6.  Unwinding Theorem for PSP
The unwinding theorem for PSP is similar to the one for N-Forward Correctability.
The difference being that in PSP high level outputs cannot be freely inserted to ensure a
correction exists.  Therefore the unwinding theorem for PSP is
Theorem 7.4: If M is the event system acceptor for the event system S, S satisfies PSP if
and only if  " x:H(cid:215)
" q:Q(cid:215)
p ’(q)=p ’(q/x)
Proof:
This  follows  immediately  from  the  definition  of  PSP.    PSP  is  defined  by  saying  that  a
possible high level event can be inserted or not at any point in the trace and the low level
events must stay the same.  This is exactly  what  is  happening  here.    In  any  state  of  the
system, performing a possible high level event must not change the low level users view. G
The unwinding theorem for PSP is simpler than that for the other class of security
properties.  This should not be a surprise since  it  is  also  more  restrictive  then  the  other
class of properties.  The unwinding condition is simple enough that an automated tool can
easily take a description of the state machine under consideration and quickly determine if
it satisfies PSP.
- 90 -
7.7.  Unwinding Theorem for Generalized Noninterference.
The  properties  considered  above  ensure  that  any  high  level  that  occurs  will  not
affect the low level users view of the system.  Generalized Noninterference requires that
for any trace the trace without any high level input events be a trace of the system.  The
unwinding theorem for Generalized Noninterference is similar to the one for  N-Forward
Correctability.  The difference can be illustrated as follows:  If a low level user is in a state
of the state machine he sees a projection p 1.  If no high level input events occur then all
traces in p 1 are possible.  Consider a high level input occurring and the system moving to a
new state with projection p 2.  The property indicates  that  removing  this  event  must  not
decrease  the  possible  futures,  therefore, p 2˝
1.    If  this  is  not  true  then  a  possible  trace
after  the  occurrence  of  the  high  level  event  is  not  possible  if  it  does  not  occur.    The
projections  do  not  have  to  be  equal  (i.e.  p 2=p 1)  since  the  property  merely  requires  the
removing of high level inputs to result in valid traces.  Therefore, the unwinding theorem
for properties like Generalized Noninference is:
" q:Q(cid:215)
" x:HI(cid:215)
p (q)˝
(q/x)
The  proof  that  this  is  the  unwinding  theorem  for  Generalized  Noninference  is
identical to the proof above except the proof of p (q/x)˝
(q) must be removed.
As a special case of the unwinding theorem for Generalized Noninference we can
give an unwinding theorem for Noninference.  The difference between the unwinding
theorem for Noninference and Generalized Noninference is that high level outputs can not
be freely inserted to ensure a trace exists.  Therefore we must use the second version of
the projection operator.  The unwinding theorem becomes: " x:H(cid:215)
" q:Q(cid:215)
p ’(q)˝
’(q/x)
7.8.  Conclusions
In this chapter we have presented a technique to construct an unwinding theorem
for  a  class  of  security  properties.    This  result  and  the  composition  theorems  give  the
system designer all the tools to construct secure systems.
- 91 -
p
p
p
p
8.  Summary and Conclusions
Nothing is worth doing unless the consequences may be serious
George Bernard Shaw (1865-1950)
Anglo-Irish Playwright, critic.
8.1.  Summary
In  this  work  we  have  presented  and  examined  a  framework  for  expressing  and
analyzing security properties.  The use of this framework will allow the system designer to
reason  about  security  properties  both  abstractly  and  in  the  design  of  systems.
Furthermore, it provides a  means  to  ensure  that  the  system  begin  designed  enforces  the
desired security property.
We  began  by  examining  how  low  level  users  can  infer  possibilistic  information
from high level activity.  We then defined a property that has no possibilistic information
flows and is the weakest such property. Examining this property led us to the definition of
a security property.  A security property enforces the existence of certain high level traces
for every possible low level observation.
We  then  examined  the  composition  of  security  properties.    We  began  our
examination  of  secure  composition  with  cascade  composition.    We  demonstrate  how  to
determine the effects of interconnecting two components with known properties.  We next
turned to determining under what conditions a property may emerge under composition.
We  demonstrated  that  if  a  property  satisfies  a  stability  requirement  then  it  may  only
emerge in a very specific fashion.    Finally,  we  turned  to  composition  in  the  presence  of
feedback.    Our  investigation  of  feedback  began  by  considering  what  structures  of  the
system caused feedback to fail.  We discovered that it was when the system graph had a
two  cycle.    We  then  presented  necessary  and  sufficient  conditions  for  the  feedback
composition to succeed.
- 92 -
That last thing we presented was an unwinding theorem.  The unwinding theorem
can be used to determine if a component expressed as a non-deterministic finite automata
satisfies a property.
8.2.  Conclusions
The  ability  to  construct  large  complex  systems  from  smaller  independently
designed and verified components is a requisite in building affordable secure systems.  In
this work we have presented the foundations required to build such systems.  Even though
our  results  have  been  applied  directly  to  the  design  and  analysis  of  secure  computer
systems    we  conjecture  that  what  we  call  a  property  can  be  broadly  extended  beyond
security to many other system features.  Several such areas are fault tolerance, availability
and data integrity.  It may be possible in the future to incorporate some of these ideas into
the software engineering area.
8.3.  Future Work
The previous sections have summarized the results of this thesis.  However, as in
every  research  effort,  the  results  have  indicated  a  number  of  areas  where  further  work
could lead to other important conclusions.  Some of these areas include:
•  Developing a software-base tool that will take a state based definition of a system and
a property and determine if the system satisfies the property.  Such a tool could also be
used to construct systems with a known property from individual components.
•  Work  must  be  done  on  developing  a  secure  refinement  theorem.    System  designers
must know at each step of the design process if the system satisfies the desired secure
property.  Waiting until the design is done to verify the system might result in a large
redesign effort if the desired security property is not satisfied.
• 
It would be interesting to  examine what other types of properties can be handled by
our  approach.    In  this  work  a  security  property  was  defined  as  a  predicate  over  a
bunch  of  traces  that  look  the  same  to  the  low  level  user.    A  fault  tolerant  property
might be defined as a predicate over a bunch of traces with the same external visible
behaviour.
- 93 -
Appendix A  -  Proof  of  Stability 
for  Various  Security
Properties
In this Appendix we will demonstrate that the stability requirement is satisfied by
most of the security properties presented in the literature.  Recall the definition of a stable
property:
Definition 5.3: Stable Property.
A  property  P  will  be  called  stable  if  and  only  if  for  all  systems  S,
:power_set(E)(cid:215) P(S)(cid:222) P(S\a ).
Separability
In a Separability secure system all interleavings of high level traces and low level
traces  are  present.    Removing  an  event,  be  it  high  level  or  low  level,  might  reduce  the
number of traces but all interleavings are still possible.
PSP, GNI and N-Forward Correctability
All of these properties are very similar and hence a similar argument demonstrates
that  they  are  stable  properties.    Consider  a  system,  S,  that  satisfies  one  of  the  above
properties.  Removing a low level event from S will result in a system that still satisfies the
property  since  all  perturbations  of  low  level  traces  still  have  a  correction  but  there  are
fewer low level traces to consider.   Removing a high level input  event  is  not  a  problem
because  this  can  be  viewed  as  a  perturbation  to  the  traces  S  .    We  will  now  examine
removing a high level output event from S.  We will argue that this results in a system that
still satisfies the property.  Consider a trace t  of S such that a perturbation s
 requires some
particular high level output event to have a correction t ’.  The trace t ’ with the high level
outputs removed is a trace of the new system and is a correction  to  the s
  perturbation.
Therefore all of the properties are stable.
Noninference and Generalized Noninference
Removing low level events and high level input events from a system that satisfies
either  of  these  properties  will  result  in  a  system  that  still  satisfies  the  property.    Also
removing  high  level  outputs  for  a  Noninference  secure  system  is  acceptable  since  the
- 94 -
"
a
property requires the trace with no high level events to be trace of the original system.  By
the same argument as that given for the PSP,  GNI and N-Forward Correctability class of
property Generalized Noninference is a stable property.
- 95 -
Appendix B  - Proof that ”
 is an equivalence relation
In this appendix we prove that the following expression is an equivalence relation
on the set of traces, T, of an event system:
s˛ T, t˛ T  s” t iff "
r:E*(cid:215) s^r˛
t^r˛
(1)
Reflexive
Let s be an element of T.  We must show s” s.
Assume (cid:216) s” s
r:E*(cid:215) s^r˛ T(cid:219)
(s^r˛ T(cid:219)
= (cid:216)
= $ r:E*(cid:215)
= ^
s^˛ T
s^˛ T)
Symmetric
Let s˛ T and t˛ T.  We must show s” t (cid:222)
 t” s
s” t
r:E*(cid:215) s^r˛ T(cid:219)
r:E*(cid:215) t^r˛ T(cid:219)
t^˛ T
s^˛ T
= "
= "
= t” s
Transitive
Let s,t,u˛ T we must show s” t(cid:217)
t” u(cid:222)
s” u
t” u
s” t(cid:217)
r:E*(cid:215) s^r˛ T(cid:219)
r:E*(cid:215) s^r˛ T(cid:219)
r:E*(cid:215) s^r˛ T(cid:219)
u^˛ T
 "
 t^r˛ T(cid:219)
r:E*(cid:215) t^r˛ T(cid:219)
u^˛ T
t^˛ T (cid:217)
t^˛ T (cid:217)
u^˛ T
= "
= "
= "
= s” u
Therefore, the relation defined in (1) is an equivalence relation and partitions the
set of traces of an event system into equivalence classes.