### 优化后的文本

---

#### 分析 CRT 堆的源代码

根据对话框中提示的文件名和行号，打开 CRT 堆的源程序文件 `dbgheap.c`（典型路径为 `c:\Program Files\Microsoft Visual Studio\VC98\crt\src`），找到第 1044 行。可以看到该位置确实有断言 `_CrtIsValidHeapPointer(pUserData)`，其上方有一段注释：

```c
/*
 * 如果此断言失败，说明传递了错误的指针。该指针可能完全无效，或者从另一个堆分配。
 * 指针必须来自本地堆。
 */
_ASSERTE(_CrtIsValidHeapPointer(pUserData));
```

上述代码所属的函数处于一个条件编译块中。如果定义了多线程支持标志 `_MT`，则函数名为 `_free_dbg_lk`，会被带有锁定支持的 `_free_dbg` 函数调用；否则，这段代码将被编译为 `_free_dbg` 函数。由于我们的程序中定义了 `_MT` 标志，因此断言发生在 `_free_dbg_lk` 函数中。

注释的意思是：如果断言失败，说明传递给函数的指针有问题，这个指针可能是完全伪造的，也可能是从另一个堆上分配的。要释放的指针必须来源于本地堆。通过这一解释可以推测，断言失败是因为 `_free_dbg_lk` 函数认为传递给它的 `pUserData` 参数有问题。这个参数用于指定要释放的堆块。那么具体是哪个堆块导致了断言失败呢？

#### 分析原因

将 WinDBG 设置为 JIT 调试器（执行 `WinDBG -I`），然后选择“Retry”按钮进行 JIT 调试。在 WinDBG 与 FaultApp 成功建立调试会话后，使用 `k` 命令查看栈回溯信息（清单 23-36）。

**清单 23-36: 析构 string 成员（释放内存）的执行过程（摘要）**

```plaintext
0:000> kpnL // L 代表不显示源文件名
# ChildEBP RetAddr
00 0012fa84 100045ca FaultDll!_free_dbg_lk+0xc8 // lk 代表具有锁定保护
01 0012fa94 1000457e FaultDll!_free_dbg+0x1a
// 调试版本的堆块释放函数
02 0012faa4 1000246c FaultDll!free+0xe
// C 的内存释放函数
03 0012fab0 10001dd6 FaultDll!operator delete+0xc // delete 运算符
04 0012fb0c 100018f2 FaultDll!std::allocator::deallocate+0x26
05 0012fb70 10001497 FaultDll!std::basic_string::_Tidy+0x82
06 0012fbcc 10001245 FaultDll!std::basic_string::~basic_string+0x27
07 0012fc24 004014b8 FaultDll!CFaultClass::~CFaultClass+0x25 // 析构函数
08 0012fc94 00401628 FaultApp!FaultCase+0x88
// 应用程序中使用输出类的函数
09 0012fdb4 7e418724 FaultApp!WndProc+0x118
// 窗口过程，以下栈帧省略
```

从上面的栈回溯信息可以看出，问题与 `FaultApp` 的 `FaultCase` 函数有关。在该函数释放局部对象 `fc` 时，引发调用 `CFaultClass` 的析构函数，后者调用 `string` 类的析构函数 `~basic_string` 来释放成员 `m_cstrMember`。`~basic_string` 函数依次调用 `_Tidy` 方法和内存分配器（allocator）的 `deallocate` 方法，接着 `deallocate` 方法调用 `delete` 运算符来释放 `string` 的缓冲区，从而调用 CRT 堆的堆释放函数 `free_dbg`。由于 `FaultDll` 的 CRT 链接选项包含 `/MT`，即使用多线程支持，所以 `free_dbg` 对堆锁定后调用 `free_dbg_lk` 函数执行释放操作。

通过以上分析，我们知道 `CFaultClass` 类的析构函数在析构 `m_cstrMember` 成员时引发了错误。为了搞清楚这个问题，我们结束 JIT 调试会话，然后在 WinDBG 中打开 `FaultApp.exe` 开始一个新的调试会话。目标是跟踪 `FaultCase` 函数向 `m_cstrMember` 成员赋值的过程，观察 `m_cstrMember` 为其成员分配内存的细节。对 `FaultCase` 函数设置一个断点（`bp FaultCase`），恢复程序执行后选择菜单中的 “Triger Fault” 让该断点命中。为了避免枯燥的单步跟踪，对 `RtlAllocateHeap` 函数设置一个断点（`bp ntdll!RtlAllocateHeap`），因为前面讨论过大多数情况下 CRT 堆使用的都是系统模式，会调用 Win32 堆的分配函数分配堆块。设好断点，让程序执行，断点果然命中，键入 `k` 命令观察栈回溯信息（清单 23-37）。

**清单 23-37: 为 string 成员分配内存的执行过程（摘要）**

```plaintext
0:000> k
ChildEBP RetAddr
0012f8d8 00408f42 ntdll!RtlAllocateHeap
// Win32 堆的分配函数
0012f8f0 00404752 FaultApp!_heap_alloc_base+0xc2 [malloc.c @ 200]
0012f918 00404559 FaultApp!_heap_alloc_dbg+0x1a2 [dbgheap.c @ 378]
0012f964 004020fe FaultApp!operator new+0xf [new.cpp @ 24]
0012f9bc 00402048 FaultApp!std::_Allocate+0x2e […\xmemory @ 30]
0012fa1c 00401ed9 FaultApp!std::allocator::allocate+0x28 [...\xmemory]
0012fb04 0040194b FaultApp!std::basic_string::_Grow+0x120 [… @ 568]
0012fbc4 00401849 FaultApp!std::basic_string::assign+0x36 [… @ 138]
0012fc20 00401473 FaultApp!std::basic_string::operator=+0x29 [… @ 67]
0012fc94 004015ce FaultApp!FaultCase+0x53 [C:\... \FaultApp.cpp @ 126]
```

上面的清单显示了向一个 `string` 对象（`m_cstrMember`）赋值的完整过程。因为要存储的字符串长度超过了 `string` 类现有缓冲区的容量，所以 `assign` 方法调用 `Grow` 方法增大缓冲区，从而引发了调用 `std::_Allocate` 和 `new` 运算符分配内存。

比较清单 23-35 和清单 23-36 中的释放和分配 `string` 对象缓冲区的过程，我们可以明显地看到，分配过程使用的是静态链接到 `FaultApp` 模块中的 CRT 函数（注意每个函数名前的模块名），而释放过程使用的是静态链接到 `FaultDll` 模块中的 CRT 函数。尽管两个模块静态链接的 `string` 类和 CRT 函数的代码应该是相同的（因为我们使用同一个 VC 环境开发），但 CRT 库不仅有代码，还有全局变量，比如 CRT 堆的句柄记录在名为 `_crtheap` 的全局变量中。这样一来，如果这两套函数使用了各自的全局变量，那么它们使用的也是各自的堆。这势必造成分配时使用一个堆，释放时使用的是另一个堆，因而导致了上述问题。使用 WinDBG 观察 `FaultDll` 和 `FaultApp` 中的 `_crtheap` 变量，可以看到它们指向的确实是不同的堆：

```plaintext
0:000> dd FaultDll!_crtheap l1
10039838  003c0000
0:000> dd FaultApp!_crtheap l1
0042e938  003d0000
```

这个例子告诉我们，静态链接到每个模块的 CRT 是相对独立的，它们各自维护自己的全局变量，创建和使用自己的 CRT 堆。在使用 CRT 堆时，应确保在一个 CRT 堆分配的内存也在同一个 CRT 堆上进行释放。

#### 发布版本

刚才我们分析的是调试版本的情况，调试版的 CRT 堆释放函数在释放前的检查中会发现问题并以断言的形式报告出来，即错误的释放动作没有真正执行。那么发布版本的情况如何呢？

为了提高执行速度，发布版本的 CRT 堆函数中不再包含调试版本中的许多检查工作，因此前面的断言不再存在。事实上，运行发布版本的 `FaultApp` 时，其结果是不确定的。如果运行完全使用默认选项编译出的发布版本，那么执行没有任何问题。使用 WinDBG 跟踪 `FaultCase` 函数，可以发现编译器的优化功能将 `string` 类的赋值运算符做了 inline，将该运算符的函数代码直接插入到了 `FaultCase` 函数中，类似的 `CFaultClass` 的析构函数也被 inline 到 `FaultCase` 函数中。这便使得内存分配和删除操作都完全是在 `FaultCase` 函数中发起的。其主要汇编指令如下：

```assembly
call    FaultApp!std::basic_string::_Grow (00401450)  // 分配
rep movs dword ptr es:[edi],dword ptr [esi]  // 赋值
call    FaultApp!operator delete (00401750)  // 释放
```

也就是说，因为编译器对发布版本的优化措施将本来发生在 `FaultDll` 中的释放操作（清单 23-35 的栈帧 #03）移入到了 `FaultApp` 中。这样分配和释放都发生在 `FaultApp` 中，它们使用的都是同一个堆，因此没有问题。

下面我们试一下禁止 inline 的情况。在 `FaultApp` 项目的发布版本属性中将 inline 功能禁止（Project > Settings > C++ > Optimizations > Inline function expansion > Disable），然后编译并执行 `FaultApp` 的发布版本（`bin\release\faultapp.exe`），选择 “Triger Fault” 菜单执行 `FaultCase` 函数。执行一两次时并没有什么异常情况发生，但当执行第 7 次（有随机性）时，应用程序错误对话框弹出，错误的详细信息中显示应用程序执行了非法访问，错误代码是 `0xC000005`。点击调试按钮启动 WinDBG 开始 JIT 调试，WinDBG 显示如下异常现场信息：

```plaintext
(1364.848): Access violation - code c0000005 (!!! second chance !!!)
eax=003d3040 ebx=003c0000 ecx=00000000 edx=00000000 esi=003d3038 edi=003d2378...
ntdll!RtlpCoalesceFreeBlocks+0x36e:
7c910f29 8b09            mov     ecx,dword ptr [ecx]  ds:0023:00000000=????????
```

可见，是因为 `RtlpCoalesceFreeBlocks` 函数访问了空指针，试图读取 `ECX` 指针的内容，但 `ECX` 的值是 0。使用 `kbn` 命令显示栈回溯信息（清单 23-38）。

**清单 23-38: 发布版本中的析构过程**

```plaintext
0:000> kbn
# ChildEBP RetAddr  Args to Child
00 0012fc24 7c910d5c 003d08c0 00000000 0012fcdc ntdll!RtlpCoalesceFreeBlocks+0x36e
01 0012fcf8 10002b9b 003c0000 00000000 003d23b8 ntdll!RtlFreeHeap+0x2e9
02 0012fd0c 10001ba2 003d23b8 10001284 003d23b8 FaultDll!free+0x46
03 0012fd14 10001284 003d23b8 00401230 00401216 FaultDll!operator delete+0x9
04 0012fd20 00401216 00401200 003d23b9 0000000a FaultDll!CFaultClass::~CFau…
05 0012fd40 00401304 00990338 00000000 00000000 FaultApp!FaultCase+0x66
06 0012fdfc 7e418724 00990338 00000111 00008003 FaultApp!WndProc+0xd4
```

从栈帧 #04 可以了解到异常仍与 `CFaultClass` 类的析构函数有关。栈帧 #3 是在执行 `delete` 运算符，栈帧 #1 是调用 Win32 堆的释放函数，栈帧 #0 的 `RtlpCoalesceFreeBlocks` 函数是 Win32 堆中用来合并空闲块的工作函数。仔细观察栈帧 #1 中传递给 `RtlFreeHeap` 函数的参数，其中 `003c0000` 是堆句柄，`003d23b8` 是要释放堆块的用户指针。使用 `!heap` 命令列出进程中的所有堆：

```plaintext
0:000> !heap
Index   Address  Name      Debugging options enabled …
  6:   003c0000
  7:   003d0000
```

根据多次分析 Win32 堆的经验，用户指针 `003d23b8` 显然更像是 7 号堆上的堆块，但现在却是试图从 6 号堆上释放。为了提高运行速度，默认情况下堆的工作函数假定传递给它的用户指针都是正确的，会根据这个指针的地址计算堆块的起始位置，然后修改堆块的属性，更新空闲链表等。因此，当把从一个堆上分配的用户指针和另一个堆的句柄传递给释放函数时，混乱局面便开始了，用户数据和管理数据被张冠李戴，链表指针被错误地指来指去，导致整个堆混乱，即所谓的堆败坏（Heap Corruption）。而且更可怕的是，这种问题并不会立刻暴露出来，`FaultCase` 函数运行了 7 次才有异常发生，这种延迟性显然提高了定位错误根源的难度。

#### 回放混乱过程

尽管刚才的试验中，执行多次 `FaultCase` 函数后问题才显现出来，但事实上第一次执行时就已经导致了问题。为了加深大家的印象，下面我们将跟踪第一次执行错误释放动作时的内部过程。先执行 `gflags /i faultapp.exe +0` 防止在调试器中运行时系统自动开启 Win32 的调试支持。然后重新启动 WinDBG 调试打开发布版本的 `FaultApp.exe`（`code\bin\realease\`），在 `FaultDll!free` 处设置一个断点。选择 “Triger Fault” 菜单项触发应用程序执行 `FaultCase` 函数，点击消息框的 OK 按钮后断点命中，执行 `kv` 命令观察栈回溯，注意关于 `free` 函数的那一行：

```plaintext
0012fd0c 10001ba2 003d07e0 10001284 003d07e0 FaultDll!free (FPO: [1,0,1])
```

其中 `003d07e0` 是 `free` 函数的参数，也就是要释放的用户指针。将这个地址减去 8 便是 `_HEAP_ENTRY` 结构，因此可以使用 `dt _HEAP_ENTRY 003d07e0-8` 来显示要释放堆块的信息，注意它的 Size 信息：

```plaintext
+0x000 Size: 7
```

即这个堆块占用的空间为 `7*8=56` 个字节，那么下一个堆块的地址应该为 `003d07e0-8+0x38=003d0810`。使用 `!heap 0x003d0000 –a` 列出 `0x003d0000` 堆中的所有堆块，可以看到一致的信息：

```plaintext
003d07d8: 00088 . 00038 [01] - busy (30)
003d0810: 00038 . 00af8 [00]
```

在 `003d1d78` 处设置一个数据访问断点，`ba w1 003d07d8`，然后输入 `g` 命令让程序继续执行，断点旋即命中，使用 `kbn` 命令观察栈回溯：

```plaintext
00 0012fc20 7c9105c8 003d07d8 0012fcf8 7c910551
ntdll!RtlpInterlockedPushEntrySList+0xe
01 0012fc2c 7c910551 003c07d8 003d07e0 0012fe64 ntdll!RtlpFreeToHeapLookaside+0x22
02 0012fcf8 10002b9b 003c0000 00000000 003d07e0 ntdll!RtlFreeHeap+0x1e9
03 0012fd0c 10001ba2 003d07e0 10001284 003d07e0 FaultDll!free+0x46
```

可以看到 `RtlpFreeToHeapLookaside` 函数在调用 `RtlpInterlockedPushEntrySList` 将堆块 `003d07d8` 加入到堆的空闲块旁视列表中。但是遗憾的是，`FaultDll!free` 函数调用 `RtlFreeHeap` 指定了错误的堆，现在是从 `0x3c0000` 堆上释放属于 `0x3d0000` 的堆块，所以 `RtlpFreeToHeapLookaside` 函数的第一个参数中所指定的旁视列表是属于 `0x3c0000` 堆的。也就是说，`0x3d0000` 堆上的堆块释放时被记录到了 `0x3c0000` 堆的空闲堆块旁视列表中。

尽管隐患已经埋下，但由于所有调试机制目前都被禁止了，所以错误症状还没有体现出来，`RtlFreeHeap` 函数返回的结果是 1，表示成功。再执行一次 “TrigerFault”，我们可以看到 `0x3d0000` 堆上又多了一个堆块（`003d1da8`）。

```plaintext
003d07d8: 00088 . 00038 [01] - busy (30)
// 第一次执行 TrigerFault 时分配的堆块
003d0810: 00038 . 00038 [01] - busy (30)
// 第二次执行 TrigerFault 时分配的堆块
003d0848: 00038 . 00ac0 [00]
// 下一个空闲块
```

可见，堆管理器把刚才与 `003d07d8` 相邻的空闲块一分为二。事实上，如果不出问题，因为第二次执行时请求的块大小与刚才释放的相同，那么堆管理器从旁视列表（“前端堆”）中就可以找到正好满足要求的空闲块，不需要再分配一个。

类似地，每执行 `FaultCase` 函数一次，`0x3d0000` 堆上会增加一个占用堆块，但再执行几次后访问异常发生了，栈回溯与 JIT 调试看到的一样。

如果是 `FaultDll` 与 `FaultApp` 中的代码交替使用堆，比如每执行一次 `FaultCase` 函数后都选择 File 菜单的 Not My Fault 项执行一次 `FaultDll` 中的 `fnFaultDll` 函数，因为 `fnFaultDll` 函数要分配的空间是 48 个字节，刚好等于 `FaultCase` 函数中释放的大小，所以 `FaultDll` 的堆会尝试使用旁视列表中的这个空闲块来满足 `fnFaultDll` 函数。但因为旁视列表中实际记录的是另一个堆上的堆块，所以我们可能看到 `fnFaultDll` 函数得到的用户指针很奇怪，使用这个指针所指向的空间可能破坏进程中的其他数据，于是局面更加混乱。

#### 思考

如果在 VC2005 中创建类似的 DLL（`FtDllVC8`）和应用程序（`FtAppVC8`），并将相应的代码加入进去，然后运行调试版和发布版本都没有问题。但略加分析，就可以知道这是因为 VC8 默认的链接选项是动态链接 CRT。这样 DLL 和应用程序便共享一个 CRT 堆，因此也就没有上面因为 CRT 堆不同而导致的问题。事实上，在 VC6 中也可以通过将两个项目的链接选项都改为动态链接解决这个问题。但是这种方法是不值得推荐的，因为问题的核心是违背了在哪里分配内存就在哪里释放的基本原则。一种优雅的解决方法是将 `CFaultClass` 的 `m_cstrMember` 成员从公开改为私有或受保护，并公开适当的方法来设置和读取这个成员，这样既可以保证对 `m_cstrMember` 成员的内存分配和释放都发生在同一个地方，又能保持封装性和安全性。

---

希望优化后的文本更加清晰、连贯和专业。如果有进一步的需求，请随时告知。