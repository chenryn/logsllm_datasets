:   为每个应用程序部署类似"边三轮"的高性能代理，如[#service_mesh_architecture](#service_mesh_architecture)所示。此代理以单一语言编写一次，封装了所有必需的功能，旨在使网络对应用程序透明，无论使用哪种语言编写。当每个应用程序都部署在一个边三轮代理旁边时，应用程序只与代理通信，而代理负责发现和相互通信。这样的体系结构现在就是*网格*，确切地说，是服务网格。
![服务网格体系结构。](media/rId27.png){width="2.4849496937882765in"
height="1.9598654855643045in"}
服务网格体系结构
## 边三轮代理的好处
最初，边三轮代理体系结构的好处是违反直觉的。如何在系统中引入全新的组件，提高开发人员的效率及整体可靠性？事实上，这种方法的好处很多，包括：
进程外体系结构
:   边三轮代理是一个独立的服务器，这意味着可以一次性实现各种复杂的功能。然后，您可以将这些功能与任何应用程序语言一起使用，无论是
    Java、Go、Python 还是 Haskell。
高性能代码库
:   由于是独立的服务器，因此理应通过尽可能高性能的方式（比如
    C/C++）来实现代理。以性能较差的语言编写的应用程序仍然能够访问高性能接口（稍后介绍这带来的影响）。
可插拔性
:   可以使代理成为热拔插的，以便它支持不同的协议和功能。例如，除了 HTTP
    之外，代理还可以支持 Redis 和
    MongoDB。可以将连接和/或请求级全局速率限制添加到 HTTP 和 MongoDB
    流量。只要一个代码库就能使得支持各种协议和方案成为可能。
高级协议支持
:   与许多语言和框架相比，边三轮模式将更快地支持最先进的协议。例如，HTTP/2、QUIC
    和 TLS 1.3。
服务发现和主动/被动运行状况检查
:   分布式系统通常使用多种服务发现和运行状况检查。代理可以实现这些功能，或隐藏它们免受应用程序调用。
高级负载平衡
:   具有一致且可靠的重试、超时、熔断、速率限制、阴影、异常值检测等实现对于任何中等大型系统都至关重要。当应用程序可以将这些功能完全卸载到代理时，应用程序代码的编写要简单得多，并且操作员可以放心，每个应用程序都可以访问相同的功能。
可观察性
:   正如已经多次提到的（稍后会展开讨论），边三轮代理提供的最重要的事情目前就是一致的可观察性。操作员可以访问分布式系统中每个跃点的一致统计信息、日志和跟踪。这种
    100%
    的覆盖范围可实现每个服务仪表板和警报的自动生成，以及每个服务和整个组织的高度操作一致性。
作为边缘代理的其他用途
:   事实证明，90%
    的边缘代理和边三轮代理都相同。在两个位置使用相同的软件所获得的运营效率是很大的。如果单个组件可以同时执行这两个作业，为什么还要了解如何部署和监视边代理和边三轮代理？
易于部署和升级
:   边三轮代理易于部署和升级，因为它没有嵌入到应用程序中。运维人员是否应在几分钟内在所有主机上部署新的二进制或代理配置？可能不是。能否使用过程外解决方案？是的。（进一步考虑部署
    TLS 升级以修补每个应用程序中嵌入 TLS 时安全漏洞的示例）。
本章的其余部分介绍了边三轮代理或服务网格体系结构中一些更有趣的细微之处。  
## 最终一致的服务发现
   在分布式系统中，服务发现是分布式进程相互发现的机制。服务发现有很多种，从静态配置的IP到DNS，再到依赖完全一致的领导者选举协议（如
Zookeeper）的系统。在过去的5到10年中，使用完全一致的领导者选举商店（例如
Zookeeper、etcd 和 Consul）进行服务发现已经相当普遍。
完全一致的系统的问题是：虽然某些用例是必需的，但它们极其复杂，需要大量的思考和谨慎才能运行，尤其是在具有大量数据的规模上。大公司有整个团队专门管理
Zookeeper 或
etcd，这种情况并不少见。逻辑告诉我们：除非问题真正需要完全一致性（例如分布式锁），否则不应使用完全一致性！但是，从历史上看，即使服务发现确实是一个最终一致的问题（只要选举肯定可以正确运行，运维人员是否真正关心每个主机是否具有与其他主机相同的网络视图？），很多时候还是使用了完全一致的实现，这许多时候会导致没必要的系统故障。
最佳服务网格设计假定从一开始就使用最终一致的服务发现系统。发现系统的数据与*主动*和*被动*运行状况检查交叉检查。主动运行状况检查是向*/Healthcheck*终点发送专用的
ping 动作（如 HTTP
请求）。被动运行状况检查是监视在线请求/响应数据以确定远程终结点运行状况的行为。例如，连续的三个
HTTP 503 响应可能表示远程终结点不可用。
[#service_discovery_and_active_health_check](#service_discovery_and_active_health_check)显示了边三轮代理如何使用服务发现数据，并结合活动运行状况检查的，共同完成后端主机的总体运行状况状态。主动运行状况检查被认为比服务发现更可靠；这意味着，如果服务发现数据丢失，但活动运行状况检查仍在传递，则代理仍将路由流量。仅当活动运行状况检查失败*且*后端不在服务发现的情况下，才会清除后端。这会产生高可靠性，因为服务发现数据最终可以一致，并且不会因为后端的自动维护而影响生产环境。
服务发现和活动运行状况检查矩阵
  : 服务发现和活动运行状况检查矩阵
运行主动和被动的状况检查与最终一致的发现存储相结合（例如，每分钟都把主机签入具有生存时间的缓存中），这样可以让整个分布式系统保持最高的组件可靠性。
## 可观察性和报警机制
正如我已经多次提到的，可观察性最终是边三轮代理和服务网格体系结构提供的最重要的事情。网络层的问题*肯定会*发生。最重要的是为
SRE
工程师提供工具，以便他们能够识别问题，解决问题并尽快修复。为此，代理提供以下功能：
每个跃点的一致统计信息
:   由于边三轮代理处理系统中每个应用程序的入口和出口流量，因此网格中的每个跃点都由同一组可靠的统计信息覆盖。从相对简单的操作（如每秒请求数、每秒连接数等）到完全动态统计信息（如每秒
    HTTP 502 的个数和每个调用站点每秒的 Mongo 更新命令数等）等。
可以在整个系统中联接日志和跟踪的持久请求 ID
:   代理可以形成跟踪/请求 ID 记录，以便在所有网络跃点系统中保持唯一
    ID。这允许生成跟踪、联接日志以及执行一致的采样。（如果采样是在整个系统中完成的，并且捕获整个请求流与完全随机采样，则
    1% 的采样日志会更有用）。
每个跃点的一致日志记录
:   与统计数据一样，如果所有应用程序都输出相同格式的请求日志（不论采用什么语言开发），则人类和工具可以更容易地处理数据并快速理解数据。
整个系统的分布式跟踪
:   跟踪是可视化分布式系统请求流的一个极其强大的工具。但是，通常情况下，将其引入微服务体系结构非常复杂，因为必须修改每个应用程序以导入跨域编号，并转发上下文等。服务网格可以提供
    100% 的跟踪覆盖率，无需任何应用程序参与。
一致的全系统报警
:   服务网格提供统计信息、日志记录和跟踪，允许为每个服务自动创建基本的警报机制，而不是依赖每个应用程序开发人员围绕服务调用成功率、延迟等设置基本警报。对于
    SRE
    工程师来说，这是一个非常强大的工具，他们现在可以更轻松地实施和审核系统范围的行为。
使用前面描述的工具，可以构建自定义自动生成的仪表板和工具，以便向工程师公开生成的信息，从而更轻松地对所有内容进行排序并确定问题的根本原因。其中包括"服务到服务"仪表板，允许工程师从下拉列表中选择源和目标服务，并查看该跃点的统计信息、跟踪和日志。UI/UX
是太广的话题，所以应该是其他章节的主题！
## 边三轮性能影响
  到目前为止，很明显边三轮或服务网格设计为开发人员和可靠性工程师提供了巨大的好处。然而，经常出现一个共同的问题：性能怎么样？添加所有这些额外的跃点不会减慢很多速度吗？