### 为每个应用程序部署高性能代理

如图[#service_mesh_architecture](#service_mesh_architecture)所示，我们建议为每个应用程序部署一个高性能的“边三轮”代理。该代理采用单一语言编写，并封装了所有必需的功能，旨在使网络对应用程序透明，无论使用哪种编程语言。当每个应用程序都配备了一个边三轮代理时，应用程序仅与代理通信，而代理则负责服务发现和相互间的通信。这种架构被称为*服务网格*。

![服务网格体系结构](media/rId27.png){width="2.4849496937882765in" height="1.9598654855643045in"}

## 边三轮代理的优势

最初，边三轮代理架构的优势可能并不直观。在系统中引入全新的组件如何能够提高开发人员的工作效率并增强系统的整体可靠性？实际上，这种方法具有多方面的好处：

- **进程外架构**：边三轮代理作为一个独立的服务器运行，这意味着可以一次性实现多种复杂功能。这些功能可以与任何应用语言（例如Java、Go、Python或Haskell）无缝集成。
- **高性能代码库**：由于是独立的服务，代理可以通过高效的语言如C/C++来实现。这样即使是以性能较低的语言编写的应用也能通过代理访问到高性能接口。
- **可插拔性**：代理设计成支持热插拔，使其能够适应不同的协议和技术栈。例如，除了HTTP之外，它还可以支持Redis和MongoDB等数据库协议，并且可以在这些流量上添加全局速率限制等功能。
- **先进的协议支持**：相比许多其他语言和框架，边三轮模式能更快地支持最新的协议标准，比如HTTP/2、QUIC以及TLS 1.3。
- **服务发现与健康检查**：分布式系统通常依赖于多种服务发现机制及健康状态监控手段。代理不仅实现了这些功能，还能够将其抽象化，从而简化了应用程序的设计。
- **高级负载均衡**：对于规模较大的系统而言，拥有强大且一致的重试策略、超时管理、断路器机制、限流措施、影子测试及异常检测至关重要。将这些责任卸载给代理后，可以使应用代码更加简洁，同时确保所有应用都能享受到相同级别的服务质量。
- **可观测性**：正如之前多次强调的那样，边三轮代理提供的最核心价值之一就是提供了一致性的可观测能力。运维团队能够获得整个分布式系统内每个跳转点的一致统计数据、日志记录以及跟踪信息，这对于生成统一的服务仪表盘、自动报警规则制定等方面极为有利。
- **作为边缘代理的其他用途**：实践证明，边三轮代理与传统意义上的边缘代理有着90%以上的相似度。在同一位置复用相同的软件组件可以显著提升运营效率。
- **易于部署和升级**：因为边三轮代理并未嵌入到应用程序内部，所以其部署和更新过程相对简单快捷。此外，在处理诸如TLS安全漏洞修复等问题时，也无需对每个单独的应用进行修改。

接下来的部分将进一步探讨边三轮代理或服务网格架构中的更多细节。

### 最终一致性服务发现

在分布式计算环境中，服务发现是指各个分布式进程之间相互识别的过程。服务发现的方式多种多样，从静态配置IP地址到DNS解析，再到基于完全一致性的领导者选举算法（如Zookeeper）。近年来，利用像Zookeeper、etcd和Consul这样的强一致性存储来进行服务发现变得越来越普遍。

然而，完全一致性的系统虽然适用于某些特定场景，但它们往往非常复杂且难以维护，尤其是在大规模数据环境下更是如此。实际上，除非确实需要高度的一致性保证（例如实现分布式锁），否则应避免使用此类方案。历史上，在很多情况下即便最终一致性就足够满足需求时，人们仍然倾向于选择完全一致性的解决方案，这有时会导致不必要的系统故障。

理想的服务网格设计应该从一开始就考虑采用最终一致性服务发现机制。在这种模式下，发现系统中的数据会被主动和被动两种类型的健康检查所验证。主动健康检查指的是定期向特定端点发送探测请求（如HTTP /healthcheck），而被动健康检查则是通过监视实际请求响应情况来评估远程服务的状态。如果连续收到多个错误响应（如三个HTTP 503错误），则表明该远程服务可能存在故障。

图[#service_discovery_and_active_health_check](#service_discovery_and_active_health_check)展示了边三轮代理是如何结合服务发现信息与活动健康检查结果共同决定后端主机的整体健康状况。主动健康检查被认为比服务发现更可靠；因此，即使服务发现数据暂时丢失，只要主动健康检查仍然成功，代理仍将继续路由流量至目标服务。只有当主动健康检查失败并且服务不再出现在服务发现列表中时，才会停止向该服务发送请求。这种方式提高了系统的可靠性，因为它允许服务发现数据逐渐达到一致状态，而不会因临时维护操作影响生产环境稳定性。

### 可观测性和警报机制

正如前面提到的，可观测性是边三轮代理和服务网格架构带来的最重要优势之一。网络层问题不可避免地会发生，关键在于为SRE工程师提供必要的工具以便他们能够快速定位并解决问题。为此，代理提供了以下功能：

- **每跳统计信息**：由于边三轮代理负责处理系统中所有应用程序的进出流量，因此网格内的每一次调用都可以被同一套可靠的指标所覆盖。这些指标范围广泛，包括但不限于每秒请求数量、连接数以及动态变化的数据点（如每秒发生的HTTP 502错误次数或每个客户端每秒执行的MongoDB更新命令数量）。
- **跨服务持久请求ID**：为了便于在整个分布式系统范围内关联日志和追踪信息，代理会生成唯一的请求标识符。这样一来，不仅可以轻松构建完整的事务跟踪链路，还能实现一致的日志采样策略（例如在整个请求流程中以1%的比例随机采样日志条目）。
- **统一的日志格式**：如果所有应用都能按照统一的标准输出请求日志，则无论是人工还是自动化工具都将更容易理解和处理这些数据。
- **全网追踪能力**：追踪技术是理解微服务架构下请求流动路径的强大手段。但是传统上要在每个应用中加入追踪功能是非常繁琐的工作，因为需要修改代码以传递上下文信息。借助服务网格，我们可以轻松实现全面覆盖而无需改动现有业务逻辑。
- **一致性的告警系统**：服务网格提供的丰富统计数据、详细的日志记录以及强大的追踪功能使得为每个服务自动生成基本告警成为可能，而不是依靠每个开发者手动设置相关规则。这对SRE团队来说是一个极其有用的工具，因为他们现在可以更方便地实施和审查整个系统的健康状况。

通过上述工具的支持，我们可以创建出定制化的自动化仪表板和其他辅助工具，帮助工程师更好地理解系统状态并迅速定位潜在问题。其中，“服务间”视图就是一个很好的例子，它允许用户从下拉菜单中选择源服务和目标服务，并查看两者之间的各项指标、日志记录和追踪详情。关于UI/UX的具体设计不在本文讨论范围内。

### 性能考量

尽管边三轮或服务网格架构为开发人员和可靠性工程师带来了诸多好处，但仍有一个常见的担忧：增加额外的网络跃点是否会显著降低系统性能？