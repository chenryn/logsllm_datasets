#include 
#include 
#include 
/*** HELPER FUNCTIONS ***/
const int N = 1024; // General buffer size
int get_number() {
    int k;
    char buffer[N];
    if (fgets (buffer, N, stdin) == NULL) {
        printf("Failed to read number\n");
        exit(-69);
    }
    sscanf(buffer, "%d\n", &k);
    return k;
}
const int l1_len = L1;
const int l2_len = L2;
#define STATE_SIZE_LEN 512
struct global_s {
    int s1_citizens[l1_len];
    int s2_citizens[l2_len];
    char s1_name[STATE_SIZE_LEN]; // Name of state 1
    char s2_name[STATE_SIZE_LEN]; // Name of state 2
    char *announcement;
    int announcement_length;
    int secret;
} global;
#define PSTATE(X) \
    do { \
        printf("State %s\n", global.s##X##_name);\
        int i=-1, length = sizeof(global.s##X##_citizens)/sizeof(int);\
        while (++i = k) {
            global.s1_citizens[i] -= k;
            global.s1_citizens[i+1] += k;
            // If we reach a bankrupt person, 
            // give him the money
            if (global.s1_citizens[i+1] == k) {
                return;
            }
        }
        // Propagate forward s2
        if (global.s2_citizens[i] >= k) {
            global.s2_citizens[i] -= k;
            global.s2_citizens[i+1] += k;
            // If we reach a bankrupt person, 
            // give him the money
            if (global.s2_citizens[i+1] == k) {
                return;
            }
        }
    }
	printf("Final i=%d\n",i);
    for (j=0; j = k) {
            global.s2_citizens[i+j] -= k;
            global.s2_citizens[i+j+1] += k;
            printf("%d:0x%x\n", i+j+1,global.s2_citizens[i+j+1]);
            // If we reach a bankrupt person, 
            // give him the money
            if (global.s2_citizens[i+j+1] == k) {
                return;
            }
        }
    }
}
void propagate_backward(int k) {
    // Somewhere total_length will be used :), with some buffer or heap
    int length_diff = L2 - L1;
    int i,j;
    for (i=0; i = k) {
            global.s1_citizens[i+1] -= k;
            global.s1_citizens[i] += k;
            // If we reach a bankrupt person,
            // give him the money
            if (global.s1_citizens[i] == k) {
                return;
            }
        }
        // Propagate forward s2
        if (global.s2_citizens[i+1] >= k) {
            global.s2_citizens[i+1] -= k;
            global.s2_citizens[i] += k;
            // If we reach a bankrupt person,
            // give him the money
            if (global.s2_citizens[i] == k) {
                return;
            }
        }
    }
    for (j=0; j = k) {
            global.s2_citizens[i+j+1] -= k;
            global.s2_citizens[i+j] += k;
            printf("%d:0x%x\n", i+j+1,global.s2_citizens[i+j+1]);
            // If we reach a bankrupt person,
            // give him the money
            if (global.s2_citizens[i+j] == k) {
                return;
            }
        }
    }
}
// Welcome Message
void greeting() {
    printf("Welcome to the Trump gold sharing simulator!\n");
    printf("The simulator tries to simulate gold transfering between two "
           "states. \n");
    printf("Enter the name of the first state:");
    if (fgets (global.s1_name, STATE_SIZE_LEN, stdin) == NULL) {
        printf("Failed to read name\n");
        exit(-69);
    }
    global.s1_name[strcspn(global.s1_name, "\n")] = 0;
    printf("Enter the name of the second state:");
    if (fgets (global.s2_name, STATE_SIZE_LEN, stdin) == NULL) {
        printf("Failed to read name\n");
        exit(-69);
    }
    global.s2_name[strcspn(global.s1_name, "\n")] = 0;
}
void init_states_wrap () {
    printf("Enter the amount to set the states in: ");
    int k = get_number();
    if (k  1024) {
        printf("ERR: Invalid Length\n");
        return;
    }
    if (global.announcement_length = sizeof(global.s1_citizens))) {
        return -1;
    }
    global.announcement = NULL;
    global.announcement_length = 0;
    greeting();
    menu();
    return 0;
    /*
    printf("OUTPUT S1:\n");
    for (i=0; i<512; i++) printf("%c", global.s1_name[i]);
    printf("END S1:\n");
    printf("OUTPUT S2:\n");
    for (i=0; i<512; i++) printf("%c", global.s2_name[i]);
    printf("END S2:\n");
    */
}