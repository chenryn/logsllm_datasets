Recall that when we derive the system of equations
Theorem 3.5 is no longer valid.
X
λkfk,i)i∈N
(
s6∈K
k
The right hand side of the equation is not a constant any
more; in particular we cannot derive that
∀i, j 6∈ K, oi = oj
Therefore Theorem 3.5 is no longer valid.
In the following three sections we will study three well
known anonymity protocols, namely Dining Cryptographers
[3], Crowds [25] and Onion Routing [24]. Our methodology
will be applied to both symmetric and asymmetric versions
of these protocols, in which the results of the symmetric
versions are in common with [4]. Furthermore, our method-
ology also provides accurate results when the symmetry as-
sumption is not satisﬁed. We will show how the solutions
are derived, as well as what this implies to improve the ano-
nymity of these protocols.
5. DINING CRYPTOGRAPHERS
5.1 Protocol description
Three cryptographers are dining on a round table. After
the dinner, the master decides who will pay (he or one of the
cryptographers), and informs each cryptographer individu-
ally about whether he will pay or not. The cryptographers
wish to know whether the dinner is payed by one of them or
the master, but they also wish to keep the anonymity if one
of them is the payer.
Chaum’s solution is the following: each cryptographer
ﬂips a coin privately and tells the result to the cryptographer
on his right. Then each of them compares the coin to his
left and his own coin. Each cryptographer will announce N
(meaning “disagree”) if the two coins are diﬀerent (head and
tail) or Y (meaning “agree”) if the two coins are the same
(head and head or tail and tail). However, if one of the
cryptographers is the payer, he will announce the opposite.
If there is an even number of “disagree”s then the Master
has paid. Otherwise, the bill has been paid by one of the
cryptographer, but the identity of the payer is not revealed
to any external observer or the other cryptographers.
5.2 Anonymity: symmetric case
We denote the three cryptographers sitting around the
table as A, B, C. Then the table can be regarded as a ring:
A→ B → C → A
The coin takes value from {0, 1}; we write p for the prob-
ability of the coin being 0 and 1− p for 1. Then the protocol
is summarized in Table 2.
The ﬁrst column represents the master’s choice. “000”
method the master pays the bill while “100, 010, 001” means
one of the cryptographer pays. The position of “1” repre-
sents the cryptographer who pays the bill. It can be seen
from the table that the output set for “{100, 010, 001}” ( i.e.
one of the cryptographers pays the bill ) is “{NNN, YNY,
NYY, YYN}”. The output set for “000” (i.e. master pays
the bill) is “{YYY, NYN, YNN, NNY}”. By observing the
outputs one can infer whether the master or the cryptog-
rapher pays the bill because the number of “N” is even in
the master’s output set. Furthermore we deﬁne the secret
as “which cryptographer pays the bill”, i.e. {100, 010, 001}
and denote it as h1, h2, h3.
5.2.1 Lagrange method
The conditional probabilities φ can be written as the weakly
symmetric matrix shown in table 3, where
a = p3 + (1 − p)3, b = p2(1 − p) + (1 − p)2p
All anonymous events may generate the same observa-
211oNYY
a
b
b
oYYN
b
b
a
oNNN
b
b
b
oYNY
b
a
b
h1
h2
h3
Table 3: Probabilities for Dining Cryptographers
tions, i.e.
ˆO1 = ˆO2 = ˆO3 = {NYY, YYN, NNN, YNY}
This implies the following probabilities for each observa-
tion:
oNYY = {ah1 + bh2 + bh3}, oYYN = {bh1 + bh2 + ah3}
oNNN = {bh1 + bh2 + bh3}, oYNY = {bh1 + ah2 + bh3}
a
b
b
oNYY
oNYY
oYYN
oYNY
oYYN
) − b ln(
) − b ln(
) − a ln(
From this and from Theorem 4.1 we deduce that the channel
capacity is given by solving the following equations:
−a ln(
−b ln(
−b ln(
where the term B = −b ln( oNNN
) = 0
(because bh1+bh2+bh3
= 1) can be eliminated. There is only
one λ-term in these equations which is λ0, and there is only
one constraint considered, which is h1 + h2 + h3 = 1.
) − 1 + λ0 = 0
) − 1 + λ0 = 0
) − 1 + λ0 = 0
) − B − b ln(
) − B − a ln(
) − B − b ln(
) = −b ln( bh1+bh2+bh3
oYNY
oYYN
oYNY
b
a
b
oNYY
b
b
a
b
b
b
Let us start with an example where the protocol provides
perfect anonymity. This is the case if the coin-toss is fair;
i.e. p = 1
4 . As result of that, the
three equations reduce to one:
2 and therefore a = b = 1
ln(h1 + h2 + h3) − 1 + λ0 = 0
and because h1 + h2 + h3 = 1, we get λ0 = 1. Now we have
the means to calculate the channel capacity by Proposition
4.2. By plugging in the values of λ0 and hi we conclude
that the channel capacity is 0. Hence there is no loss of
anonymity.
For the extreme cases, i.e. when “p = 0” and “p = 1”,
this results in a = 1 and b = 0. The three equations above
reduce to
ln(hi) − 1 + λ0 = 0
This system has only one solution, namely
h1 = h2 = h3 =
1
3
which results in a channel distribution of log 3 bits, i.e. the
identity of the payer is revealed.
be solved as above by the only constraint ofP
To generalize, with given p, the channel distribution can
i hi = 1, and
the channel capacity of the Dining Cryptographer protocol
can be calculated by
(1 − p + p2) log 3 − (1 − 3p + 3p2) log(
1 − p + p2
1 − 3p + 3p2 ) −
1 − p + p2
p − p2
)
2(p − p2) log(
5.3 Anonymity: asymmetric case
Suppose we now add additional constraints for the dis-
tribution of the secret. For example, if the master is ten
times more likely to choose the ﬁrst cryptographer than the
second, the information can be represented by a constraint:
using this constraint and from Theorem 4.1 we get the
h1 = 10h2
oN Y Y
following equations:
− a ln(
) − b ln(
) − b ln(
− b ln(
) − a ln(
− b ln(
oN Y Y
oN Y Y
a
b
b
oY Y N
b
oY Y N
b
oY Y N
a
Using the constraints
h1 = 10h2,
) − b ln(
) − a ln(
) − b ln(
oY N Y
b
oY N Y
a
oY N Y
) − 1 + λ0 + λ1 = 0
) − 1 + λ0 − 10λ1 = 0
) − 1 + λ0 = 0
b
X
i
hi = 1
this system of equations is simpliﬁed to:
−(1 − 3b) ln(A1) − b ln(A2) − b ln(A3) = B + 1 − λ0 − λ1
−b ln(A1) − b ln(A2) − (1 − 3b) ln(A3) = B + 1 − λ0 + 10λ1
−b ln(A1) − (1 − 3b) ln(A2) − b ln(A3) = B + 1 − λ0
where A1 = 10h2 − 40bh2 + b; A2 = 1− 3b− 11h2 + 44bh2;
A3 = h2 − 4bh2 + b; B = −(1 − 3b) ln(1 − 3b) − 2b ln b.
These equations only include three unknown variables λ0,
λ1 and h2. (b is associated with p which is given.)
By solving these equations the channel capacity is derived
using Proposition 4.2.
The channel capacities for Dining Cryptographers in the
symmetric (unconstrained) case, and in the case with the
additional constraint h1 = 10h2 are plotted in Figure 1, as
a function of p.
Figure 1: Dining Cryptographers: channel capacity
For both versions of the protocol, when p is 0 or 1 the
channel capacity is equal to the entropy of the secret. When
the coin becomes fairer, the channel capacity decreases. As
p increases from 0 to 0.5, the channel capacity decreases to
0. However, the constraint h1 = 10h2 implies there is less
uncertainty in the initial secret, hence the channel capacity
when p = 0 is lower compared to the unconstrained case.
00.10.20.30.40.50.60.70.80.9100.20.40.60.811.21.41.61.82Probability of Coin = 0Channel Capacity (bit)constrainedunconstrained2126. CROWDS
6.1 Protocol description
The Crowds protocol by Reiter and Rubin [25] enables
anonymous Web browsing for end users. The main idea is
to hide each user’s identity by routing them randomly within
a group of similar users.
The routing paths are set up using the following protocol:
• The sender selects a crowd member at random (possi-
bly itself), and forwards the message to it, encrypted
by the corresponding pairwise key.
• The selected member, which now acts as router, ﬂips a
coin. With probability 1 − pf , it delivers the message
directly to the destination. With probability pf , it
selects a crowd member at random (possibly itself) as
the next router in the path, and forwards the message
to it, re-encrypted with the appropriate pairwise key.
The next router then repeats this step.
Theoretically, even if a local eavesdropper or a corrupt
group member observes a message sent by a particular user,
it can not be sure whether the user is the actual sender, or is
routing another user’s message. Previous result states that,
if the crowd contains n members, of which c are corrupt,
the minimum value of pf is required to satisfy the following
condition to guarantee the probable innocence of the real
sender on any single path [4] (i.e., the probability that the
real sender appears on the path immediately before a corrupt
member is less than 0.5):
n ≥ pf
pf − 1
2
(c + 1)
6.2 Anonymity: symmetric case
Suppose there are n normal users and c corrupted nodes in
a network. The attacker is interested in ﬁnding the identity
of the sender, which is the secret; an observation O is the
node being observed (by a corrupted node or the server) to
deliver the message. The observations and their probabilities
are given in Table 4 where we use numbers from 0 to n−1 to
identify the normal users. From Table 4, when the secret is
hi, the probability of observation of hi is (1−pf )+pf
c+1
n+c , in
which (1− pf ) comes from the server and pf
c+1
n+c comes from
corrupt nodes. This is because hi has the probability c+1
n+c
to choose the corrupt node to forward the request to; the
probability of other observations hj(j 6= i) is pf
1
n+c because
they have the same probability to be observed in the routing.
6.2.1 Lagrange method
Now we consider to solve the general case using Lagrange
method.
By deﬁnition φ is:
∀hi : φi,i = (1 − pf ) + pf
c + 1
n + c
Using the relationship between o and φ we get:
∀j 6= i : φi,j = pf
1
n + c
X
oi =
hjφi,j + hiφi,i
0≤j≤n−1,i6=j
h
0
. . .
n-1
O
0
1
2
3
. . .
n-2
n-1
. . .
0
1
2
3
. . .
n-2
n-1
(1 − pf ) + pf
pf
pf
pf
pf
pf
pf
pf
pf
pf
pf
pf
pf
(1 − pf ) + pf
P
c+1
n+c
1
n+c
1
n+c
1
n+c
1
n+c
1
n+c
1
n+c
. . .
1
n+c
1
n+c
1
n+c
1
n+c
1
n+c
1
n+c
c+1
n+c
Table 4: Crowds: observations and probabilities
This can be rewritten into:
oi = { X
0≤j≤n−1,i6=j
(pf