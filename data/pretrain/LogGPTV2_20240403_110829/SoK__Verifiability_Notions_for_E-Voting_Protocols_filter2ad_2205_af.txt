voters who do not verify at the end of the election are at most
dropped, but not changed. This is in contrast to the goals we
have seen so far. In these goals, votes of honest voters who do
not verify might have been tampered with.
Weak veriﬁability. We deﬁne the goal γWV to be the set of all
runs of PCGGI in which either (a) either Reg or B is corrupted,
(b) the result is not output, or (c) the result r of the election is
deﬁned and satisﬁes:
(cid:4){cA
i }nA
for some nA,nB and some cA
i
r = ρ
i=1
, cB
(cid:5)
(cid:5)
(cid:12)R ρ
(cid:4){cB
i }nB
i such that
i=1
• cA
• cB
, . . . , cA
, . . . , cB
nb
nA are the candidates read by honest voters that
∈ C and nb is smaller then the number of voters
1
cast their votes;
1
running a dishonest program.
For the protocol PCGGI, weak veriﬁability by Cortier et
al. can essentially be characterized by the fact that it is (γWV , δ)-
veriﬁable in the sense of Deﬁnition 1.
Note that Item (c) of the goal γWV is stronger than the
corresponding item of γSV (since all honest cast votes shall be
counted). However, the latter is called weak veriﬁability in [19]
because the trust assumptions (Item (a)) are stronger (both the
ballot box and the registrar shall be honest).
VIII. COMPUTATIONAL ELECTION VERIFIABILITY BY
SMYTH ET AL.
This section focuses on the deﬁnitions of individual,
universal and election veriﬁability by Smyth et al. [47]. Smyth
et al. consider two different veriﬁability settings, one for
election schemes with external and the other one for election
schemes with internal authentication (such as Helios and
Civitas, respectively). For the sake of brevity, we focus on
election schemes with external authentication because the issues
discussed in Section VIII-E apply to both of them. We present
the casting of the deﬁnitions of Smyth et al. in the KTV
framework in Appendix C.
A. Model
According to Smyth et al., an election scheme Π is a tuple
(Setup, Vote, Tally, Verify) of probabilistic polynomial-time
algorithms. The algorithms Setup and Vote are deﬁned as
usual. The algorithm Tally is run by the tellers and receives
the content of the bulletin board B and the parameters prm
as input, and outputs the tally along with a non-interactive
proof P for the correctness of the tally. The algorithm Verify
describes the veriﬁcation of the election result and receives the
content of the bulletin board B, the public parameters prmpub,
the tally, denoted by tally, and a proof P, and outputs a bit.
The algorithm Verify is deterministic.
789789
Experiment ExpIV(Π, A)
(cid:16)) ←− A
(1) (prmpub
(2) b ←− Vote(c, prmpub
(cid:16), prmpub
(3) b
(4) if b = b
, c, c
(cid:16) ←− Vote(c
(cid:16) and b (cid:11)= ⊥ and b
)
)
(cid:16) (cid:11)= ⊥ then
return 1 else return 0
Fig. 5: Individual veriﬁability experiment by Smyth et al. [47]
Experiment ExpUV(Π, A)
(cid:16), P
(cid:16)) ←− A
(1) (B, prmpub
, tally
(2) tally ←− correct tally(B, prmpub
(3) if tally (cid:11)= tally
and Verify(B, prmpub
)
(cid:16)
, tally
(cid:16), P
(cid:16)) then
return 1 else return 0
Fig. 6: Universal veriﬁability experiment by Smyth et al. [47]
B. Individual Veriﬁability
According to Smyth et al., an election scheme achieves
individual veriﬁability if, for any two honest voters,
the
probability that their ballots are equal is negligible, which
formally is expressed as follows.
Deﬁnition 7 (Individual veriﬁability). An election scheme Π =
(Setup, Vote, Tally, Verify) achieves individual veriﬁability if
the success rate Succ(ExpIV(Π, A)) of any ppt adversary A in
Experiment ExpIV(Π, A) (Fig. 5) is negligible as a function of
(cid:5).
C. Universal Veriﬁability
According to Smyth et al., an election scheme achieves
universal veriﬁability if no ppt adversary A can simulate a
tallying phase such that, on the one hand, the veriﬁcation
algorithm Verify accepts the output (e.g., all zero-knowledge
proofs are successful), and, on the other hand, the given output
of the tallying phase does not agree with what Smyth et al. call
the correct tally.
The function correct tally, deﬁned as follows, extracts the
actual votes from the ballots on the bulletin board.
Deﬁnition 8 (Correct Tally). The function correct tally maps
) to a vector in {0, . . . , nballots}ncand such
each tuple (B, prmpub
that for every choice c ∈ {1, . . . , ncand} and every number l ∈
{0, . . . , nballots} we have that correct tally(B, prmpub
)[c] = l if
and only if there are exactly l different ballots b ((cid:11)= ⊥) on the
bulletin board B and for each of them there exists a random
bit string r such that b = Vote(c, prmpub;r).
Now, universal veriﬁability is deﬁned as follows according
to Smyth et al.
Deﬁnition 9 (Universal veriﬁability). An election scheme
(Setup, Vote, Tally, Verify) achieves universal veriﬁability if
the success rate Succ(ExpUV(Π, A)) of every ppt adversary A
in Experiment ExpUV(Π, A) (Fig. 6) is negligible as a function
of (cid:5).
D. Election Veriﬁability
The notion of veriﬁability proposed by Smyth et al. now
combines the notions of individual and universal veriﬁability.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:17:36 UTC from IEEE Xplore.  Restrictions apply. 
Deﬁnition 10 (Election Veriﬁability). An election scheme
(Setup, Vote, Tally, Verify) satisﬁes election veriﬁability if
for every ppt adversaries A, there exists a negligible function
μ such that for all security parameters (cid:5), we have that
Succ(ExpIV(Π, A)) + Succ(ExpUV(Π, A)) ≤ μ((cid:5)).
Smyth et al. also consider some soundness properties, including
fairness and correctness, similar to the ones mentioned in
previous sections.
E. Discussion
This deﬁnition has two main shortcomings. First, as stated
by the authors, their “deﬁnitions of veriﬁability have not
addressed the issue of voter intent, that is, whether the ballot
constructed by the Vote algorithm corresponds to the candidate
choice that a voter intended to make.” (Page 12, [47]). In
general, it is not clear that the combination of the proposed
deﬁnitions of veriﬁability along with additional soundness
properties implies any form of end-to-end veriﬁability. More
precisely, if all the veriﬁcation procedures succeed, it is unclear
whether the ﬁnal outcome of an election corresponds to the
voters’ choices at least with reasonable probability.6 We think,
however, that capturing such overall correctness and the voter’s
intent is at the very core of a meaningful notion of veriﬁability.
Second, the deﬁnition considers a restricted class of proto-
cols (the authors themselves provide a list of protocols excluded
by their deﬁnition), some of these restrictions, as pointed out
before, also apply to some of the other deﬁnitions discussed
in this paper: (1) The model captures “single-pass” protocols
only: voters send a single ballot to the election server, without
any further interaction. (2) The authors assume that the whole
ballot is published. (3) The authors assume that the vote can
be recovered directly from the ballot, which excludes protocols
using information-theoretically hiding commitments. (4) There
is no revote. (5) The bulletin board publishes the list of ballots,
as received. And hence, voting schemes such as ThreeBallot
[45] cannot be modeled.
As mentioned before, the casting of the Smyth et al. deﬁ-
nitions in the KTV framework is presented in Appendix C.
IX. FURTHER RELATED WORK
Since the focus of this paper is on veriﬁability notions that
have been formally deﬁned, we excluded those veriﬁability
notions from our analysis which do not fulﬁll this requirement
([46], [30], [51], [43], [41], [42]). An important paper is the
one by Sako and Kilian [46] who were the ﬁrst to propose
the concept of individual and universal veriﬁability. This then
motivated other researchers to regard end-to-end veriﬁability
as the sum of certain veriﬁability subproperties; we discuss
this issue in Section X.
Due to space constraints, a few formal deﬁnitions of
veriﬁability are discussed and cast in the KTV framework
6It indeed seems that this is not the case due to some technical issues: Their
correctness property requires only that Vote correctly encodes the given choice
in the case of the honest setup; it does not guarantee anything for the dishonest
setup which is considered in the veriﬁability games. Therefore, if, for instance,
Vote always produces ⊥ (an invalid ballot) for some dishonestly generated
public key, the system can still be proved veriﬁable according to the deﬁnition
of Smyth et al., although it clearly produces a wrong election outcome. This
particular technicality seems to be easy to ﬁx, but it nevertheless demonstrates
that there is some gap between the given combination of disconnected properties
and an overarching and meaningful veriﬁability notion.
in the appendix or in the full version [20] of this paper only.
We brieﬂy discuss them here.
Kremer et al. [35] (Appendix A) and Cortier et al. [18]
(Appendix B) deﬁne veriﬁability in symbolic models, where
messages are modeled by terms. Kremer et al. propose a
deﬁnition that corresponds to γ0 but under the trust assumption
that every voter is honest and veriﬁes the ﬁnal result, which is
clearly too strong. Cortier et al. [18] devise formulations for
individual veriﬁability, universal veriﬁability, and no clash (two
honest ballots should never collude), and they show that these
three properties imply what they call end-2-end veriﬁability, the
latter being close to the goal γSV (introduced in Section VII),
except that ballot stufﬁng is not prohibited.
In the full version of this paper [20], we also analyze the
deﬁnition by Baum et al. [8] (Szepieniec et al. [49] proposed
a closely related deﬁnition), the one by Chevallier-Mames et
al. [16], and by Hosp et al. [28]. The deﬁnition by Baum et
al. (auditable correctness) can be applied to arbitrary multi-
party computation (MPC) protocols and is based on an ideal
functionality in the Universal Composability (UC) framework.
In the context of e-voting protocols, the goal of this deﬁnition
is γ0. Baum et al. also consider a very (in fact too) strong
fairness condition: auditors have to always accept a protocol run
if the goal γ0 is achieved, regardless of whether, for example,
zero-knowledge proofs are valid or not. As for the deﬁnition by
Chevallier-Mames et al., it captures universal veriﬁability, and
hence, a subproperty of end-to-end veriﬁability only. Hosp et al.
propose information-theoretic measures for the veriﬁability of
voting systems, by comparing these systems to perfect voting
systems which always output the correct result, independently
of voters being honest or dishonest. This deﬁnition is even
much stronger than what is required by γ0, and therefore, does
not seem to be applicable to any practical voting protocol.
X. SUMMARY AND CONCLUSION
In the previous sections, we have studied the formal
deﬁnitions of veriﬁability for e-voting system proposed in the
literature. We have presented the original deﬁnitions and cast
them in the KTV framework. This casting has demonstrated
that the essence of these notions can be captured within a
uniform framework and enabled us to identify their relative
and recurrent merits and weaknesses as well as their speciﬁc
(partly severe) limitations and problems.
In Section X-A, we distill these discussions and insights
into detailed requirements and guidelines that highlight several
aspects any veriﬁability deﬁnition should cover. We also
summarize from the previous sections how the different
existing deﬁnitions of veriﬁability from the literature handle
these aspects, with a brief overview for some of the aspects
provided in Table I. Finally, in Section X-B, as a viable and
concrete embodiment of our guidelines, we instantiate the KTV
framework accordingly, obtaining a solid and ready to use
deﬁnition of veriﬁability.
A. Guidelines
We now present our requirements and guidelines for the
following central aspects, along with a summary of the previous
sections concerning these aspects.
Generality. Many veriﬁability deﬁnitions are designed for
protocols with speciﬁc protocol structures and are tailored to
them (see Sections VI, VII, VIII and Appendix A, B). As a
790790
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:17:36 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I: Overview of Veriﬁability Notions
Notion (Section & Paper)
Veriﬁability (IV, [37])
Veriﬁability (V, [12])
E2E veriﬁability (VI, [34])
Strong veriﬁability (VII, [19])
Weak veriﬁability (VII, [19])
Individual veriﬁability (VIII,
[47])
Universal veriﬁability (VIII,
[47])
Election
[47])
Individual and universal veri-
ﬁability (A, [35])
veriﬁability
(VIII,
Individual