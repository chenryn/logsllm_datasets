tended page tables (EPT) to assign physical pages to a par-
ticular VM. Any access to memory by a VM will cause the
processor hardware to perform a translation using the EPT.
When accessing memory outside of the given VM’s allowed
pages, a violation will occur and the VM will exit to the hy-
pervisor context (which after disengagement is our kill VM
routine). Because of this, the conﬁdentiality and integrity
are tied to the correctness of the hardware EPT implemen-
tation, which we believe will have undergone signiﬁcant test-
ing and veriﬁcation. While all modern hypervisors also use
the EPT mechanism, they may update the mapping when
they provide additional capabilities such as transparent page
sharing among VMs [8]. Consequently, isolation today de-
pends not only on the hardware’s correctness but also on
the complex hypervisor software.
Also of importance is the performance isolation between
VMs in the face of resource sharing. Without a hypervisor,
as in NoHype, hardware is relied on to provide the isolation.
The main shared resources of concern are the network card
(and associated bandwidth) as well as the memory bus. The
network card has queues with ﬂow control mechanisms that
provide a fair allocation of resources. The memory controller
and bus, on the other hand, do not in today’s processors [28].
Figure 6: Quantiﬁcation of the memory side-
channel.
410tem z [29], have support for creating logical domains which
enforce partitioning of resources such as CPU and memory
in hardware.
In contrast, NoHype focuses on commodity
x86 servers used by cloud infrastructure providers.
Hardening the hypervisor: Much of hypervisor-related
work has centered around hardening of the hypervisor, such
as [23, 31, 33]. Especially interesting is HyperSafe [35] which
aims to protect a hypervisor against control-ﬂow hijacking
attacks. They use a non-bypassable memory lockdown tech-
nique (only a special routine in the hypervisor can write to
memory) coupled with a restricted pointer indexing tech-
nique (all function calls in the hypervisor are transformed
to jumps from a special table). While making it more dif-
ﬁcult to subvert the hypervisor, these additions add about
a 5% performance overhead and any bugs in the hypervisor
could still be exploited through one of the attack vectors.
Recently, HyperSentry [9] used the SMM (system manage-
ment mode) to bypass the hypervisor for integrity measure-
ment purposes. Unfortunately, the integrity measurements
only reveal traces of an attack after it has already happened
and are limited to protecting against attacks which persis-
tently modify the hypervisor executable. While the authors
report being able to invoke the measurement every 8 sec-
onds in HyperSentry, this still leaves a window for attack-
ers. Furthermore, their approach results in a 2.4% overhead
if HyperSentry protections are invoked every 8 seconds. In
contrast, NoHype prevents the attacks from happening in
the ﬁrst place, and does this with about a 1% performance
improvement.
Direct access to hardware: NoHype shares much with
exokernels such as ExOS [13] and Nemesis [22] which essen-
tially reduce an operating system to providing only arbitra-
tion to shared resources and give applications more direct
access to hardware. We capitalize on modern hardware ad-
vances to push it even further where the thin software layer
from the exokernels is realized in hardware and full com-
modity operating systems can be run, rather than requiring
applications to be redesigned for the exokernel environment.
There have also been proposals that enable a single operat-
ing system to run without a virtualization layer but can in-
sert a virtualization layer when needed – e.g., to run a second
VM during planned maintenance [25] or to utilize migration
for consolidation [19]. NoHype, on the other hand, can run
multiple VMs simultaneously, each with direct access to its
allocated hardware.
8. CONCLUSIONS AND FUTURE WORK
Today, the hypervisor is the all-powerful system software
layer which controls the resources of a physical system and
manages how they interact with the guest VMs. Because
of its central role, the hypervisor, and other parts of the
virtualization software, is a potent target for attacks, espe-
cially in shared infrastructures which allow multiple parties
to run virtual machines.
In this paper, we presented the
complete design, implementation and evaluation of a work-
ing NoHype system on today’s commodity hardware which
removes the attack surface of the hypervisor and thus elim-
inates the vector by which VMs can exploit vulnerabilities.
We do this by eliminating the VM’s need for a hypervisor
through (i) pre-allocation of processor cores and memory
resources, (ii) using only virtualized I/O devices, (iii) sup-
porting the system discovery process with a temporary hy-
pervisor and a slightly modiﬁed guest OS, and (iv) avoiding
any indirection that would necessitate having a hypervisor.
This allows us to remove the interaction between the guest
VMs and hypervisor and eliminate the attack surface which
a malicious VM could use to compromise the virtualization
layer, and then in turn attack or obstruct other VMs. In
addition, our evaluation with benchmarks showed about 1%
faster run times.
While NoHype signiﬁcantly advances the security of shared
cloud infrastructures, today’s commodity hardware imposes
some limitations; as future work, we will examine minimal
hardware changes to further tighten the security of a No-
Hype system. Also, we will add support for live VM mi-
gration, particularly for the scenario where the initiator of
the migration (the cloud provider) diﬀers from the owner of
the VM (the cloud customer). The disruption this process
causes to the customer’s VM depends on the workload of
the VM [11], yet the provider does not know the workload
or whether it is a particularly bad time to disrupt the guest
VM. We believe the correct model for migration is for the
provider to notify the customer ahead of time, allowing the
customer to prepare for the transient disruption (e.g., by
shedding load or redirecting new requests) and participate
in the migration itself (e.g., through support for OS migra-
tion [20] in the guest). Finally, we plan to explore ways for
the customer to run virtualization software of its own to en-
able nested virtualization, which may also aid in supporting
live migration.
9. ACKNOWLEDGMENTS
This work was supported in part by National Science
Foundation grants: EEC-0540832 and CCF-0917134. Eric
Keller was supported through an Intel Ph.D. Fellowship. We
also beneﬁted from equipment donation from Intel.
We would like to thank Tim Deegan from Citrix, An-
drew Warﬁeld from University of British Columbia, and Don
Banks from Cisco, for discussions and feedback on our No-
Hype design. Additionally, we would like to thank our shep-
herd, Herbert Bos, and the anonymous CCS reviewers for
their comments and suggestions.
10. REFERENCES
[1] ab - Apache HTTP server benchmarking tool. http:
//httpd.apache.org/docs/2.0/programs/ab.html.
[2] Intel 64 and IA-32 Architectures Software Developer’s
Manual Volume 2A: Instruction Set Reference, A-M,
page 274. http:
//www.intel.com/products/processor/manuals/.
[3] Intel 64 and IA-32 Architectures Software Developer’s
Manual Volume 3B: System Programming Guide, Part
2. http:
//www.intel.com/products/processor/manuals/.
[4] Intel Corporation: Intel Virtualization Technology for
Directed I/O. http://download.intel.com/
technology/itj/2006/v10i3/v10-i3-art02.pdf.
[5] iPXE: Open Source Boot Firmware.
http://ipxe.org/.
[6] National Vulnerability Database, CVE and CCE
Statistics Query Page.
http://web.nvd.nist.gov/view/vuln/statistics.
[7] PCI SIG: PCI-SIG Single Root I/O Virtualization.
http://www.pcisig.com/specifications/iov/
single_root/.
411[8] Understanding Memory Resource Management in
VMware ESX Server. VMWare White Paper. 2009.
www.vmware.com/files/pdf/perf-vsphere-memory_
management.pdf.
[9] A. M. Azab, P. Ning, Z. Wang, X. Jiang, X. Zhang,
and N. C. Skalsky. HyperSentry: Enabling stealthy
in-context measurement of hypervisor integrity. In
ACM Conference on Computer and Communications
Security (CCS), pages 38–49, October 2010.
[10] D. Champagne and R. B. Lee. Scalable architectural
support for trusted software. In IEEE International
Symposium on High Performance Computer
Architecture (HPCA), pages 1–12, Jan. 2010.
[11] C. Clark, K. Fraser, S. Hand, J. G. Hansen, E. Jul,
C. Limpach, I. Pratt, and A. Warﬁeld. Live migration
of virtual machines. In 2nd Symposium on Networked
Systems Design and Implementation (NSDI), 2005.
[12] J. Dwoskin and R. B. Lee. Hardware-rooted trust for
secure key management and transient trust. In ACM
Conference on Computer and Communications
Security (CCS), Oct. 2007.
[13] D. R. Engler, M. F. Kaashoek, and J. O’Toole.
Exokernel: An operating system architecture for
application-level resource management. In Symposium
on Operating Systems Principles (SOSP), December
1995.
[14] F. Gens. IT cloud services user survey, pt.2: Top
beneﬁts & challenges, Oct. 2008.
http://blogs.idc.com/ie/?p=210.
[15] J. L. Henning. SPEC CPU2006 benchmark
descriptions. SIGARCH Comput. Archit. News,
34:1–17, September 2006.
distributed multimedia applications. IEEE Journal on
Selected Areas in Communication, 14(7), Sept. 1996.
[23] C. Li, A. Raghunathan, and N. K. Jha. Secure virtual
machine execution under an untrusted management
OS. In Proceedings of the Conference on Cloud
Computing (CLOUD), July 2010.
[24] D. Lie, C. Thekkath, M. Mitchell, P. Lincoln,
D. Boneh, J. Mitchell, and M. Horowitz. Architectural
support for copy and tamper resistant software. In
Architectural Support for Programming Languages and
Operating Systems (ASPLOS), November 2000.
[25] D. E. Lowell, Y. Saito, and E. J. Samberg.
Devirtualizable virtual machines enabling general,
single-node, online maintenance. In Architectural
Support for Programming Languages and Operating
Systems (ASPLOS), October 2004.
[26] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta,
V. Gligor, and A. Perrig. TrustVisor: Eﬃcient TCB
reduction and attestation. In IEEE Symposium on
Security and Privacy, pages 143–158, May 2010.
[27] K. Z. Meth and J. Satran. Design of the iSCSI
protocol. In IEEE Symposium on Mass Storage
Systems, April 2003.
[28] T. Moscibroda and O. Mutlu. Memory performance
attacks: Denial of memory service in multi-core
systems. In Proceedings of USENIX Security
Symposium, August 2007.
[29] L. Parziale, E. L. Alves, E. M. Dow, K. Egeler, J. J.
Herne, C. Jordan, E. P. Naveen, M. S. Pattabhiraman,
and K. Smith. Introduction to the new mainframe:
z/VM basics, Nov. 2007. http://www.redbooks.ibm.
com/redbooks/pdfs/sg247316.pdf.
[16] E. Keller, J. Szefer, J. Rexford, and R. B. Lee.
[30] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage.
NoHype: Virtualized cloud infrastructure without the
virtualization. In International Symposium on
Computer Architecture (ISCA), June 2010.
[17] J. Kelsey, B. Schneier, D. Wagner, and C. Hall. Side
channel cryptanalysis of product ciphers. In J.-J.
Quisquater, Y. Deswarte, C. Meadows, and
D. Gollmann, editors, Computer Security: ESORICS
98, volume 1485 of Lecture Notes in Computer
Science, pages 97–110. 1998.
[18] G. Klein, K. Elphinstone, G. Heiser, J. Andronick,
D. Cock, P. Derrin, D. Elkaduwe, K. Engelhardt,
R. Kolanski, M. Norrish, T. Sewell, H. Tuch, and
S. Winwood. seL4: Formal veriﬁcation of an OS
kernel. In Symposium on Operating Systems Principles
(SOSP), pages 207–220, October 2009.
[19] T. Kooburat and M. Swift. The best of both worlds
with on-demand virtualization. In Workshop on Hot
Topics in Operating Systems (HotOS), May 2011.
Hey, you, get oﬀ of my cloud: Exploring information
leakage in third-party compute clouds. In ACM
Conference on Computer and Communications
Security (CCS), November 2009.
[31] R. Sailer, E. Valdez, T. Jaeger, R. Perez, L. V. Doorn,
J. L. Griﬃn, S. Berger, R. Sailer, E. Valdez, T. Jaeger,
R. Perez, L. Doorn, J. Linwood, and G. S. Berger.
sHype: Secure hypervisor approach to trusted
virtualized systems. Technical Report RC23511, IBM
Research, 2005.
[32] A. Seshadri, M. Luk, N. Qu, and A. Perrig. SecVisor:
A tiny hypervisor to provide lifetime kernel code
integrity for commodity OSes. SIGOPS Oper. Syst.
Rev., 41(6):335–350, December 2007.
[33] U. Steinberg and B. Kauer. NOVA: A
microhypervisor-based secure virtualization
architecture. In European Conference on Computer
Systems, April 2010.
[20] M. A. Kozuch, M. Kaminsky, and M. P. Ryan.
[34] G. E. Suh, C. W. O’Donnell, I. Sachdev, and
Migration without virtualization. In Workshop on Hot
Topics in Operating Systems (HotOS), May 2009.
[21] R. B. Lee, P. C. S. Kwan, J. P. McGregor, J. Dwoskin,
and Z. Wang. Architecture for protecting critical
secrets in microprocessors. In International Symposium
on Computer Architecture (ISCA), June 2005.
[22] I. Leslie, D. McAuley, R. Black, T. Roscoe, P. Barham,
D. Evers, R. Fairbairns, and E. Hyden. The design
and implementation of an operating system to support
S. Devadas. Design and implementation of the AEGIS
single-chip secure processor using physical random
functions. In International Symposium on Computer
Architecture (ISCA), June 2005.
[35] Z. Wang and X. Jiang. HyperSafe: A lightweight
approach to provide lifetime hypervisor control-ﬂow
integrity. In IEEE Symposium on Security and
Privacy, pages 380–395, May 2010.
412