webroot
backup
dist
后面再加上各种压缩文件后缀名，举例如下：
.zip
.tar
.tar.gz
.7z
.rar
---
## Page 147
CTF特训营：技术详解、解题方法与
6.1源码泄露
147/1144
有时候，还可以利用其他可能会泄露目录结构或文件名的敏感文
件来获取备份文件的位置，如”.DS_Store”等。
2.Git泄露
大家对GitHub一定都不陌生，这上面不仅可以找到各种好用的开
源工具，而且可以上传一些自己开发的项目，是我们获取源码的一个
途径。
（1）通过特征搜索
当某个网站存在某个明显特征字符串的时候，就有可能通过
GitHub的搜索功能来搜索到该项目。下面的例子是NJCTF2017的题
目chall，进入题目提供的登录界面后可以看到一个非常显眼的字符
串，如图6-1所示。
请登录，bibibibibibibibibibibibibibi~
passworc
ENTER
图6-1题目界面
---
## Page 148
CTF特训营：技术详解、解题方法与
6.1源码泄露
148/1144
通过搜索“请登录，bibibibibibibibibibibibibibi~”就能够得到源
码，注意一定要登录GitHub后再进行搜索，搜索结果如图6-2所示。
（2）通过.git泄露
我们知道每个git项目的根目录下都存在一个.git文件夹，这个文
件夹的作用就是存储项目的相关信息，这里笔者推荐的工具是
GitHack和scrabble，下面就来结合git原理将scrabble源码简要分析一
遍。
Pull requests Issues Gist
Repositories
Code1
Commits
ssues
Wikis
Users
Olddriver/app-admin.jade
Pug
extends layout
block content
h1请登录，bibibibibibibibibibibibibibi
Fcontainer.col
图6-2GitHub搜索结果
了解git原理之前，我们首先应在本地建立一个git工程并初始化
然后再commit一次，如图6-3所示。
---
## Page 149
CTF特训营：技术详解、解题方法与
6.1源码泄
149/1144
Lastlogin:Sat Jul15 23:13:23onttys000
999Desktopmkdirproject
666Desktopcdproject
666project touch test1test2test3
666project gitinit
Initialized empty Gitrepositoryin/Users/wabzsy/Desktop/project/.git/
666projectgit:（master)xgit add
666projectgit:(master)xgitcommit
t-am"init"
[master（root-commit)67cfb3b]init
3fileschanged,0insertions(+),0deletions(-)
create mode 100644 test1
create mode 100644 test2
create mode 100644test3
666projectgit:(master)
图6-3初始化git工程
然后，进入.git目录下，看看目录中有什么文件，如图6-4所示。
666projectgit:（master)
cd
git
666.gitgit:(master)ls
COMMIT_EDITMSG config
hooks
info
objects
HEAD
description
index
logs
refs
666.gitgit:(master)
图6-4git目录结构
这里列举几个比较关键的文件。
·HEAD：标记当前git在哪个分支中
refs：标记该项目里的每个分支指向的commit。
---
## Page 150
CTF特训营：技术详解、解题方法与
6.1源码泄霜
150/1144
objects：git本地仓库存储的所有对象。
而gi的对象有如下四个。
commit：标记一个项目的一次提交记录。
tree：标记一个项目的目录或者子目录
blob：标记一个项目的文件。
tag：命名一次提交
所以，我们可以通过下面的几个操作找到项自的每个文件夹及文
件，首先是确定commit对象，如图6-5所示。
666.gitgit:(master)catHEAD
ref:refs/heads/master
666.gitgit:(master)catrefs/heads/master
67cfb3ba4a27c203c94bc2decc6047ca4fad08ac
666.gitgit:(master)gitcat-file-p67cfb3
treea62be5b9faa243fe264dd47c1ce659541ee615c1
authorwabzsy1500132582+0800
committerwabzsy1500132582+0800
init
666.gitgit:（master)
图6-5确定commit对象
其中，第三条命令最后的参数只需要输入第二条命令返回结果的
---
## Page 151
CTF特训营：技术详解、解题方法与
6.1源码泄露
151/1144
前6位即可，然后我们就能查看里面的tree对象和blob对象了，如图
6-6所示。
666.gitgit:(master)gitcat-file-pa62be5
100644blobe69de29bb2d1d6434b8b29ae775ad8c2e48c5391
test1
100644b1obe69de29bb2d1d6434b8b29ae775ad8c2e48c5391
test2
100644b1obe69de29bb2d1d6434b8b29ae775ad8c2e48c5391
test3
666.gitgit:(master)gitcat-file-pe69de2
666.gitgit:(master)
图6-6查看对象
这样就可以看到之前commit的三个文件了，由于这三个文件是
空的，所以blob标识是相同的。由于样例文件为空，所以最后一条读
blob数据的命令返回为空，但在实际情况下一般不会这样。
在实战过程中，根据这个原理，可以将当前项自完全还原下来。
接下来，我们来分析一下scrabble的源码，以便更进一步了解从
git目录恢复文件的原理（https://github.com/denny0223/scrabble）。
首先是输入存在“git”目录中的url，接着就是查看HEAD文件获
取分支的位置，然后得到分支的hash值，代码如下：
domain=S1
ref=$（curl-sSdomain/.git/HEAD|awk{print$2})
tmp_dir=echo $domain | awk -F'T/:]《print $4}
---
## Page 152
CTF特训营：技术详解、解题方法与
6.1源码泄
152/1144
mkdir Stmp_dir
pdunspo
lastHash=S(curl-sSdomain/.git/$ref)
得到hash值后首先本地初始化一个git，接着通过parseCommit获
取全部对象，最后使用reset重设分支，这样就将项目重新建立在本
地了，代码如下：
git init
cd.git/objects/
parseCommitSlastHash
cd. .../
echoSlastHash>.git/refs/heads/master
git reset --hard
接下来，我们来看看三个自定义函数：parseCommit、parseTree、
downloadBlob
1）parseCommit函数用于下载commit对象，同时会将其parent也
一并下载下来，代码如下：
functionparseCommit{
echoparseCommit$1
downloadBlob$1
tree=$(git cat-file-p $1| sed-n‘1p'|awk{print $2})
parseTreeStree
parent=$（git cat-file-p$1|sed-n2p'|awk{print$2})
[$[#parent}-eq40]&&parseCommitSparent
---
## Page 153
CTF特训营：技术详解、解题方法与
6.1源码泄露
153/1144
2）parseTree函数用于下载tree对象，同时列出tree下的所有对
象，分类为tree或者blob后处理，代码如下：
functionparseTree{
echo parseTree$1
downloadBlob$1
whileread line
do
type=S(echo Sline|awk(print $2))
hash=S(echo Sline|awk{print $3})
["$type”="tree”]&&parseTree$hash|downloadBlob$hash
done SfilenameBack");
}else{
error("error");
{
?>
通过源码，我们首先可以找到可控的输入点为
---
## Page 158
CTF特训营：技术详解、解题方法与
6.2代码审计的方法与技巧
158/1144
$_FILES、$_SERVER[QUERY_STRING
和
$_SERVER[REQUEST_URI]。然后查看有无过滤，分析上传代码之
后可以找到如下两个过滤函数：
ew($haystack,Sneedle)
/这里判断的是上传文件的后缀名是不是.php
filter_directory()
//这个函数的过滤是使parse_url（S_SERVER[REQUEST_URI])[query]
的结果不能包含”cache
可以发现，输入的S_SERVER[REQUESTURI门经过了函数
parse_ur的处理，那么这个函数有没有什么特性可以利用呢？通过下
面的测试可以看到，我们成功地将query这个结果去掉了，从而绕过
了过滤：
/1.php?url=/home/binarycloud/www/cache
array(2){
["path"]=>string(6)"/1.php"
[query"]=>string(31)"url=/home/binarycloud/www/cache"
/1.php?url=/home/binarycloud/www/cache
array(2){
[host']=> string(10)“1.php?url="
["path"] => string(27)"/home/binarycloud/www/cache”
这样就能成功构造输入，绕过过滤，将文件上传到我们希望的目
---
## Page 159
CTF特训营：技术详解、解题方法与
6.2代码审计的方法与技巧
159/1144
录下了。
2.大型代码
攻防赛及实战中一般都是对CMS型的框架进行审计，漏洞触发
条件一般都不算太难，主要问题还是需要从大量代码中快速定位到这
些漏洞，同样也可以按照下面这几个步骤来进行审计：
1）找到危险函数；
2）向上回溯寻找有无可用输入点；
3）尝试绕过针对输入点的过滤
4）寻找触发漏洞的方法。
这里用的是phpok之前存在的一个注入的例子。首先寻找危险函
数，可以找到一个通用的插入数据库的函数，代码如下：
public function save_log($data)
return Sthis->db->insert_array($data, wealth_log)
然后，查找是否有调用此函数并且有输入点的地方，在
framework/model/wealth.php中发现wealth_autosave满足条件，其中
---
## Page 160
CTF特训营：技术详解、解题方法与
6.2代码审计的方法与技巧
160/1144
存在S_SERVER[QUERY_STRING]可以让我们输
入。S_SERVER[QUERY_STRING]是直接取出来的，没有经过过
滤，代码如下：
$value){
if(!$value[rule]){
unset($wealth_list[Skey]);