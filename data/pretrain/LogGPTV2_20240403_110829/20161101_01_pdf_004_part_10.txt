 5. 删除触发器(安全, 因为无法命中cache是安全的, 但是cache数据和table数据不一致是不安全的)
 CREATE OR REPLACE FUNCTION tbl_user_info_del() RETURNS TRIGGER AS $$
 BEGIN
 PERFORM memcache_delete('tbl_user_info_' || NEW.userid || '_pwd');
 RETURN NULL;
 END;
 $$ LANGUAGE 'plpgsql' STRICT;
 CREATE TRIGGER tbl_user_info_del AFTER DELETE ON tbl_user_info FOR EACH ROW EXECUTE PROCEDURE tbl_user_info_del();
异地高速缓存pgmemcache
 6. 用户密码校验函数 :
 CREATE OR REPLACE FUNCTION auth (i_userid int8, i_pwd text) returns boolean as $$
 declare
 v_input_pwd_md5 text;
 v_user_pwd_md5 text;
 begin
 v_input_pwd_md5 := md5(i_pwd);
 select memcache_get('tbl_user_info_' || i_userid || '_pwd') into v_user_pwd_md5;
 if (v_user_pwd_md5 <> '' ) then
 raise notice 'hit in memcache.';
 if (v_input_pwd_md5 = v_user_pwd_md5) then
 return true;
 else
 return false;
 end if;
 else
 -- 未完
异地高速缓存pgmemcache
 select pwd into v_user_pwd_md5 from tbl_user_info where userid=i_userid;
 if found then
 raise notice 'hit in table.';
 if (v_input_pwd_md5 = v_user_pwd_md5) then
 return true;
 else
 return false;
 end if;
 else
 return false;
 end if;
 end if;
 exception
 when others then
 return false;
 end;
 $$ language plpgsql strict;
练习
 pgbouncer连接池搭建, 几种模式的使用对比
 pgbench压力测试, 测试短连接
 本地高速缓存pgfincore的使用, 测试它带来的性能提升
 异地高速缓存pgmemcached的使用
数据库扩展及复制
 数据库扩展及复制
 目标:
 了解
 数据库热备份与还原,
 数据库集群级流复制,
 表级复制,
 数据库在虚拟化环境下的使用注意事项
PostgreSQL 数据库热备份与还原
 数据库热备份与还原
 物理备份与还原
 备份$PGDATA,归档文件,以及所有的表空间目录. 适用于跨小版本的恢复, 但是不能跨平台.
 需开启归档
 目前PG还不支持基于数据文件数据块变更的增量备份, 仅仅支持数据文件+归档的备份方式
 目前PG官方还不支持基于表空间的备份和还原. 但是可模拟.
http://blog.163.com/digoal@126/blog/static/16387704020123261422581/
 逻辑备份与还原
 备份数据, 适用于跨版本和跨平台的恢复
PostgreSQL 数据库物理备份
 首先要开启归档, 日志模式>=archive, 步骤如下
 创建归档目录
 mkdir -p /ssd4/pg93/arch
 chown -R pg93:pg93 /ssd4/pg93/arch
 配置归档命令
 %p 表示xlog文件名$PGDATA的相对路径, 如pg_xlog/00000001000000190000007D
 %f 表示xlog文件名, 如00000001000000190000007D
 vi $PGDATA/postgresql.conf
 archive_mode = on
 archive_command = 'DATE=`date +%Y%m%d`; DIR="/ssd4/pg93/arch/$DATE"; (test -d $DIR || mkdir -p $DIR) && cp %p
$DIR/%f'
 配置日志模式vi $PGDATA/postgresql.conf; ( wal_level = hot_standby )
 重启数据库(可选, 如果以前已经开启了归档的话则不需要重启数据库)
 测试归档是否正常
 digoal=# checkpoint;
 digoal=# select pg_switch_xlog();
 pg93@db-172-16-3-150-> cd /ssd4/pg93/arch/20131211/
 pg93@db-172-16-3-150-> ll
 -rw------- 1 pg93 pg93 16M Dec 11 09:28 00000001000000180000001F
PostgreSQL 数据库物理备份
 物理备份, 方式很多, 达到目的即可.
 通过pg_basebackup, 流复制协议备份, (本地使用时必须用tar模式. 异地无所谓, 如果要同目录结构的话使用p模式)
 创建replication权限的角色, 或者超级用户的角色.
 digoal=# create role rep nosuperuserreplication login connection limit 32 encrypted password 'rep123';
 CREATE ROLE
 配置pg_hba.conf
 host replication rep 0.0.0.0/0 md5
 pg_ctlreload
 备份, 因为使用流复制协议, 所以支持异地备份.
 mkdir`date +%F` ; pg_basebackup-F t -x -D ./`date +%F` -h 172.16.3.150 -p 1921 -U rep
 备份目录如下
 pg93@db-172-16-3-150-> ll
 total 13G
 -rw-rw-r-- 1 pg93 pg93 955M Dec 11 09:45 66372.tar
 -rw-rw-r-- 1 pg93 pg93 12G Dec 11 09:45 66422.tar
 -rw-rw-r-- 1 pg93 pg93 160M Dec 11 09:46 base.tar
 或者手工拷贝目录的方式备份.
PostgreSQL 数据库物理备份
 数字目录代表表空间的备份包
 pg93@db-172-16-3-150-> cd $PGDATA
 pg93@db-172-16-3-150-> cd pg_tblspc/
 pg93@db-172-16-3-150-> ll
 total 0
 lrwxrwxrwx 1 pg93 pg93 18 Oct 27 07:34 66372 -> /ssd4/pg93/tbs_idx
 lrwxrwxrwx 1 pg93 pg93 21 Oct 28 09:16 66422 -> /ssd3/pg93/tbs_digoal
 base目录代表$PGDATA的备份包, 查看tar包内容.
 pg93@db-172-16-3-150-> tar -tvf base.tar |less
PostgreSQL 数据库物理备份
 手工拷贝目录的方式备份.
 首先要打开强制检查点
 pg93@db-172-16-3-150-> psql
 psql (9.3.1)
 Type "help" for help.
 digoal=# select pg_start_backup(now()::text);
 pg_start_backup
 -----------------
 18/27000028
 (1 row)
 然后备份$PGDATA和表空间目录, 例如拷贝到网络存储.
 拷贝完后后, 关闭强制检查点
 digoal=# select pg_stop_backup();
 最后拷贝强制检查点之间的所有归档文件, 确保备份有效性.
PostgreSQL 数据库物理还原
 物理还原, 顺序读取XLOG的信息进行恢复(xlog数据块中包含了DB数据块的变更, 事务状态信息等, 深究可以去看一下
xlog的头文件以及pg_xlogdump).
 还原点介绍
 #recovery_target_name = ‘’ # e.g. ‘daily backup 2011-01-26‘ -- 不支持inclusive配置. 因为它不需要从abort或commit判断
结束点.
 #
 #recovery_target_time = ‘’ # e.g. ‘2004-07-14 22:39:00 EST‘ -- 时间格式使用当前系统配置的格式, 或从时间函数获取
 #
 #recovery_target_xid = ''
 #
 #recovery_target_inclusive = true
 默认支持3种还原点.
 如果不设置还原点则不会停止恢复, 一般用于建立流复制或容灾环境.
 http://blog.163.com/digoal@126/blog/static/163877040201303082942271/
PostgreSQL 数据库物理还原
 XID还原点, 以commit或abort的xid到达为准.
 xid按请求顺序分配, 但是abort和commit点的xid在XLOG顺序中是无序的, 只要从读取的XLOG abort/commit信息到达指定
xid就停止恢复.
 命名的还原点,
 如果数据库中有多个重复命名的还原点, 遇到第一个则停止.
 同时因为还原点的信息写在单独的xlog数据块中, 不是一条transaction record块, 所以也没有包含或不包含的概念, 直接截
止.
 不需要判断recovery_target_inclusive .
 时间还原点
 在同一个时间点, 可能有多个事务COMMIT/ABORT. 所以recovery_target_inclusive 在这里起到的作用是 :
 截止于这个时间点的第一个提交的事务后 (包含这个时间点第一个遇到的提交/回滚的事务);
 或者截止于这个时间点提交的最后一个事务后 (包括这个时间点提交/回滚的所有事务) .
PostgreSQL 数据库物理还原
 物理还原
 配置还原参数
 模板文件
 $PGHOME/share/recovery.conf.sample
 vi $PGDATA/recovery.conf
 restore_command = 'cp /mnt/server/archivedir/%f %p'
 recovery_target_timeline = 'latest'
 启动数据库
 pg_ctl start
 配置hot_standby参数, 便于判断是否已经到达还原点. (可选, 仅做PITR时需要.一般都是恢复到最后)
 检查是否到达指定还原点. (可选, 仅做PITR时需要.一般都是恢复到最后)
 激活数据库
 自由练习
PostgreSQL 数据库物理还原
Mistake
Checkpoint
Time Line
⑵
1. Compare pd_lsn
Data Changed
2. Dumpdto Disk
⑴ 1.写WAL(或叫XLOG)
2.为了确保数据库在recovery的时候,可以
Which Page the first
恢复到一个一致的状态,shared buffer中的
Modified after Checkpoint
脏数据页在flush到磁盘数据文件中之前,
Write full page to WAL.
WAL 应该确保这个脏页的改变量已经write
through 到XLOG文件了.
3.如何确保先写XLOG再改变DATA-PAGE
Archive 呢?PAGE头信息里面包含了一个pd_lsn位,
用于记录XLOG写该PAGE信息的最后一
个字节的下一个字节.
4. 在写脏页到数据文件前只要确保大于
或等于pd_lsn的XLOG已经write through到
Online Backup File
PITR 磁盘了就行.
lsn :
log sequence number --- in
practice, a WAL file location
基础备份+归档日志
PostgreSQL 数据库逻辑备份
 pg_dump
 -F c 备份为二进制格式, 压缩存储. 并且可被pg_restore用于精细还原
 -F p 备份为文本, 大库不推荐.
 pg_dumpall
 可以备份全局元数据对象, 例如用户密码, 数据库, 表空间.
 pg_dumpall 只支持文本格式.
 COPY命令, 在数据库库中执行COPY, 用于SQL子集或表的备份, 表的还原.
 自由练习
PostgreSQL 数据库逻辑还原
 二进制格式的备份只能使用pg_restore来还原, 可以指定还原的表, 编辑TOC文件, 定制还原的顺序, 表, 索引等.
 文本格式的备份还原, 直接使用用户连接到对应的数据库执行备份文本即可, 例如psql dbname -f bak.sql
 自由练习
PostgreSQL 数据库流复制
 数据库流复制
 9.0开始支持1+n的异步流复制.
 9.1支持1+1+n的同步和异步流复制
 9.2开始支持级联流复制
 9.3开始支持跨平台的流复制协议(目前可用于接收xlog).
 9.3开始流复制协议增加了时间线文件传输的协议, 支持自动切换时间线.
PostgreSQL 数据库流复制
 异步流复制原理
2
Standby
archlog xlog
1
WalRcvData->receivedUpto
Primary
startup
postmaster wal receiver
PM_SHUTDOWN_2
process
send
PMSignal
WalRcvData->conninfo wal sender
3
WalRcvData->receiveStart
recover
read
fork
postmaster