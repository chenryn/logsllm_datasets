MSVC 2010 x86 采用的是 FPU 指令。 
指令清单 35.2  MSVC 2010 x86 优化 
$SG4038 DB   
'Enter temperature in Fahrenheit:', 0aH, 00H 
$SG4040 DB   
'%lf', 00H 
$SG4041 DB   
'Error while parsing your input', 0aH, 00H 
$SG4043 DB   
'Error: incorrect temperature!', 0aH, 00H 
$SG4044 DB   
'Celsius: %lf', 0aH, 00H 
__real@c071100000000000 DQ 0c071100000000000r  ; -273 
__real@4022000000000000 DQ 04022000000000000r  ; 9 
__real@4014000000000000 DQ 04014000000000000r  ; 5 
__real@4040000000000000 DQ 04040000000000000r  ; 32 
_fahr$ = -8  
; size = 8 
_main PROC 
sub     esp, 8 
push     esi 
mov     esi, DWORD PTR __imp__printf 
push     OFFSET $SG4038  
; 'Enter temperature in Fahrenheit:' 
call     esi  
; call printf() 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
426 
逆向工程权威指南（上册） 
lea     eax, DWORD PTR _fahr$[esp+16] 
push     eax 
push     OFFSET $SG4040  
; '%lf' 
call     DWORD PTR __imp__scanf 
add     esp, 12  
; 0000000cH 
cmp     eax, 1 
je     SHORT $LN2@main 
push     OFFSET $SG4041  
; 'Error while parsing your input' 
call     esi  
; call printf() 
add     esp, 4 
push     0 
call     DWORD PTR __imp__exit 
$LN2@main: 
fld     QWORD PTR _fahr$[esp+12] 
fsub    QWORD PTR __real@4040000000000000 ; 32 
fmul    QWORD PTR __real@4014000000000000 ; 5 
fdiv    QWORD PTR __real@4022000000000000 ; 9 
fld     QWORD PTR __real@c071100000000000 ; -273 
fcomp   ST(1) 
fnstsw  ax 
test    ah, 65   
; 00000041H 
jne      SHORT $LN1@main 
push    OFFSET $SG4043  
; 'Error: incorrect temperature!' 
fstp    ST(0) 
call    esi  
; call printf() 
add    esp, 4 
push    0 
call    DWORD PTR __imp__exit 
$LN1@main: 
sub    esp, 8 
fstp    QWORD PTR [esp] 
push    OFFSET $SG4044  
; 'Celsius: %lf' 
call    esi 
add     esp, 12  
; 0000000cH 
; return 0 - by C99 standard 
xor     eax, eax 
pop     esi 
add     esp, 8 
ret     0 
$LN10@main: 
_main ENDP 
但 MSVC 2012 分配的却是 SIMD 指令。 
指令清单 35.3  MSVC 2012 x86 优化 
$SG4228 DB       'Enter temperature in Fahrenheit:', 0aH, 00H 
$SG4230 DB       '%lf', 00H 
$SG4231 DB       'Error while parsing your input', 0aH, 00H 
$SG4233 DB       'Error: incorrect temperature!', 0aH, 00H 
$SG4234 DB       'Celsius: %lf', 0aH, 00H 
__real@c071100000000000 DQ 0c071100000000000r   ; -273 
__real@4040000000000000 DQ 04040000000000000r   ; 32 
__real@4022000000000000 DQ 04022000000000000r   ; 9 
__real@4014000000000000 DQ 04014000000000000r   ; 5 
_fahr$ = -8  
; size = 8 
_main    PROC 
         sub      esp, 8 
         push    esi 
         mov     esi, DWORD PTR __imp__printf 
         push    OFFSET $SG4228   
  ; 'Enter temperature in Fahrenheit:' 
         call    esi  
  ; call printf() 
         lea     eax, DWORD PTR _fahr$[esp+16] 
         push    eax 
         push    OFFSET $SG4230   
  ; '%lf' 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 35 章  温 度 转 换 
427 
         call    DWORD PTR __imp__scanf 
         add     esp, 12  
; 0000000cH 
         cmp      eax, 1 
         je      SHORT $LN2@main 
         push    OFFSET $SG4231   
  ; 'Error while parsing your input' 
         call    esi  
  ; call printf() 
         add     esp, 4 
         push    0 
         call    DWORD PTR __imp__exit 
$LN9@main: 
$LN2@main: 
         movsd   xmm1, QWORD PTR _fahr$[esp+12] 
         subsd   xmm1, QWORD PTR __real@4040000000000000 ; 32 
         movsd   xmm0, QWORD PTR __real@c071100000000000 ; -273 
         mulsd   xmm1, QWORD PTR __real@4014000000000000 ; 5 
         divsd   xmm1, QWORD PTR __real@4022000000000000 ; 9 
         comisd  xmm0, xmm1 
         jbe     SHORT $LN1@main 
         push    OFFSET $SG4233   
  ; 'Error: incorrect temperature!' 
         call    esi  
  ; call printf() 
         add     esp, 4 
         push    0 
         call    DWORD PTR __imp__exit 
$LN10@main: 
$LN1@main: 
         sub     esp, 8 
         movsd   QWORD PTR [esp], xmm1 
         push    OFFSET $SG4234   
  ; 'Celsius: %lf' 
         call    esi  
  ; call printf() 
         add     esp, 12  
   ; 0000000cH 
         ; return 0 - by C99 standard 
         xor     eax, eax 
         pop     esi 
         add     esp, 8 
         ret     0 
$LN8@main: 
_main ENDP 
当然，x86 的指令集确实支持 SIMD 指令，浮点数运算也毫无问题。大概是这种方式的计算指令比较
简单，所以微软的编译器分配了 SIMD 指令。 
我们还注意到绝对零度−273，早早地就导入了寄存器 XMM0。这也没关系，编译器不是按照源代码的
书写顺序分配的汇编指令。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 3366 章
章    斐
斐波
波拉
拉契
契数
数列
列  
在计算机编程方面的教科书里，我们通常都能找到 Fibonacci 数列（斐波拉契数列）（以下简称为
“Fibonacci”）的生成函数。其实这种数列编排的规则非常简单：从第三项开始，后续数字为前两项数字之
和。头两项一般为 0 和 1；也有头两项都是 1 的情况。因此，常见的 Fibonacci 数列大致如下： 
0; 1; 1; 2; 3; 5; 8; 13; 21; 34; 55; 89; 144; 233; 377; 610; 987; 1597; 2584; 4181… 
36.1  例子 1 
Fibonacci 的实现方法比较简单。举例来说，下面这个程序可以生成数值不超过 21 的数列各项： 
#include  
void fib (int a, int b, int limit) 
{ 
          printf ("%d\n", a+b); 
          if (a+b > limit) 
                    return; 
          fib (b, a+b, limit); 
}; 
int main() 
{ 
          printf ("0\n1\n1\n"); 
          fib (1, 1, 20); 
}; 
指令清单 36.1  MSVC 2010 x86 
_TEXT    SEGMENT 
_a$ = 8  
; size = 4 
_b$ = 12  
; size = 4 
_limit$ = 16  
; size = 4 
_fib     PROC 
         push  
ebp 
         mov  
ebp, esp 
         mov  
eax, DWORD PTR _a$[ebp] 
         add  
eax, DWORD PTR _b$[ebp] 
         push  
eax 
         push  
OFFSET $SG2750 ; "%d" 
         call  
DWORD PTR __imp__printf 
         add  
esp, 8 
         mov  
ecx, DWORD PTR _limit$[ebp] 
         push  
ecx 
         mov  
edx, DWORD PTR _a$[ebp] 
         add  
edx, DWORD PTR _b$[ebp] 
         push  
edx 
         mov  
eax, DWORD PTR _b$[ebp] 
         push  
eax 
         call  
_fib 
         add  
esp, 12 
         pop  
ebp 
         ret  
0 
_fib    ENDP 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 36 章  斐波拉契数列 
429 
_main   PROC 
         push  
ebp 
         mov  
ebp, esp 
         push  
OFFSET $SG2753 ; "0\n1\n1\n" 
         call  
DWORD PTR __imp__printf 
         add  
esp, 4 
         push  
20 
         push  
1 
         push  
1 
         call  
_fib 
         add  
esp, 12 
         xor  
eax, eax 
         pop  
ebp 
         ret  
0 
_main   ENDP 
我们重点分析这个程序的栈结构。 
我们在 OllyDbg 中加载本例生成的可执行程序，并跟踪到调用 f()函数的那条指令，如图 36.1 所示。 
图 36.1  OllyDbg 最后一个函数 f() 
让我们来仔细分析栈里的内容。在下面的程序行中，笔者用打括弧的方法加了两个注释。一个是main()
为f1()做准备，另外一个是CRT为main()做准备
①
① 在 OllyDbg 中，可以选择多项指令，再使用 Ctrl+C 组合键把它们复制到剪切板中。本例就是这样做的。 
。 
0035F940   00FD1039   RETURN to fib.00FD1039 from fib.00FD1000 
0035F944   00000008   1st argument: a 
0035F948   0000000D   2nd argument: b 
0035F94C   00000014   3rd argument: limit 
0035F950    /0035F964   saved EBP register 
0035F954    |00FD1039   RETURN to fib.00FD1039 from fib.00FD1000 
0035F958    |00000005   1st argument: a 
0035F95C    |00000008   2nd argument: b 
0035F960    |00000014   3rd argument: limit 
0035F964    ]0035F978   saved EBP register 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
430 
逆向工程权威指南（上册） 
0035F968    |00FD1039   RETURN to fib.00FD1039 from fib.00FD1000 
0035F96C    |00000003   1st argument: a 
0035F970    |00000005   2nd argument: b 
0035F974    |00000014   3rd argument: limit 
0035F978    ]0035F98C   saved EBP register 
0035F97C    |00FD1039   RETURN to fib.00FD1039 from fib.00FD1000 
0035F980    |00000002   1st argument: a 
0035F984    |00000003   2nd argument: b 
0035F988    |00000014   3rd argument: limit 
0035F98C    ]0035F9A0   saved EBP register 
0035F990    |00FD1039   RETURN to fib.00FD1039 from fib.00FD1000 
0035F994    |00000001   1st argument: a 
0035F998    |00000002   2nd argument: b 
0035F99C    |00000014   3rd argument: limit 
0035F9A0    ]0035F9B4   saved EBP register 
0035F9A4    |00FD105C   RETURN to fib.00FD105C from fib.00FD1000 
0035F9A8    |00000001   1st argument: a              \ 
0035F9AC    |00000001   2nd argument: b              | prepared in main() for f1() 
0035F9B0    |00000014   3rd argument: limit         / 
0035F9B4    ]0035F9F8   saved EBP register 
0035F9B8    |00FD11D0   RETURN to fib.00FD11D0 from fib.00FD1040 
0035F9BC    |00000001   main() 1st argument: argc  \ 
0035F9C0    |006812C8   main() 2nd argument: argv  | prepared in CRT for main() 
0035F9C4    |00682940   main() 3rd argument: envp  / 
本例属于递归函数
①
36.2  例子 2 
。递归函数的栈一般都是这样的“三明治”结构。在上述程序中，limit（阈值）
参数总是保持不变（十六进制的 14，也就是十进制的 20），而两个参数a和b在每次调用函数的时候都是不
同的值。此外栈也存储了RA和保存EBP（扩展堆栈指针）的值。OllyDbg能基于EBP的值判断栈的存储结
构，因此它能够用括弧标注栈帧。换而言之，在每个括弧里的一组数值都形成了一个相对独立的栈结构，
即栈帧（stack frame）。栈帧就是每次函数调用期间的数据实体。另一方面，即使从纯萃技术方面看每个被
调用方函数确实可以访问栈帧之外的栈存储空间，但是正常情况下不应当访问栈帧之外的数据（当然除了
获取函数参数的操作以外）。对于没有bug（缺陷）的函数来说，上述命题的确成立。每一个 EBP值都是前