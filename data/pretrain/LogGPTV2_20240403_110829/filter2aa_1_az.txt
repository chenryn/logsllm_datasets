    For example, if you find a feature that processes credit card numbers, you could first look for vulnerabilities that might leak the credit card numbers, such as IDORs (
     Chapter 10
    ). Focus on sensitive features such as credit cards and passwords, because these features are more likely to contain critical vulnerabilities. During your recon, you should be able to get a good idea of what the company cares about and the sensitive data it’s protecting. Go after those specific pieces of information throughout your bug-hunting process to maximize the business impact of the issues you discover. You can also focus your search on bugs or vulnerabilities that affect that particular tech stack you uncovered, or on elements of the source code you were able to find.
    例如，如果您找到一个处理信用卡号码的功能，您可以首先寻找可能泄露信用卡号码的漏洞，比如IDOR（第10章）。专注于敏感特性，如信用卡和密码，因为这些特性更有可能包含关键漏洞。在您的侦查过程中，您应该能够了解公司关心什么以及它正在保护的敏感数据。在您的漏洞测试过程中，专注于这些特定的信息，以最大化您发现问题的业务影响。您还可以将搜索重点放在影响您发现的特定技术堆栈的漏洞或漏洞，或者源代码的某些元素上。
    And don’t forget, recon isn’t a one-time activity. You should continue to monitor your targets for changes. Organizations modify their system, technologies, and codebase constantly, so continuous recon will ensure that you always know what the attack surface looks like. Using a combination of bash, scheduling tools, and alerting tools, build a recon engine that does most of the work for you.
    不要忘了，侦察不是一次性活动。您应该继续监视您的目标以便发现变化。组织会不断修改其系统、技术和代码库，所以持续性的侦察可以确保您始终知道攻击面的情况。使用一系列的bash、调度工具和警报工具，构建一个侦察引擎，它可以为您完成大部分工作。
    Tools Mentioned in This Chapter
    In this chapter, I introduced many tools you can use in your recon process. Many more good tools are out there. The ones mentioned here are merely my personal preferences. I’ve included them here in chronological order for your reference.
    在这一章中，我介绍了许多您可以在侦查过程中使用的工具。还有更多好的工具在市场上。这里提到的只是我个人的偏好。我按照时间顺序将它们列在这里供您参考。
    Be sure to learn about how these tools work before you use them! Understanding the software you use allows you to customize it to fit your workflow.
    在使用这些工具之前一定要了解它们的工作原理！了解你使用的软件可以让你根据自己的工作流程进行定制。
    Scope Discovery
     WHOIS looks for the owner of a domain or IP.
     ViewDNS.info reverse WHOIS (
      https://viewdns.info/reversewhois/
     ) is a tool that searches for reverse WHOIS data by using a keyword.
      nslookup
     queries internet name servers for IP information about a host.
     ViewDNS reverse IP (
      https://viewdns.info/reverseip/
     ) looks for domains hosted on the same server, given an IP or domain.
     crt.sh (
      https://crt.sh/
     ), Censys (
      https://censys.io/
     ), and Cert Spotter (
      https://sslmate.com/certspotter/
     ) are platforms you can use to find certificate information about a domain.
     Sublist3r (
      https://github.com/aboul3la/Sublist3r/
     ), SubBrute (
      https://github.com/TheRook/subbrute/
     ), Amass (
      https://github.com/OWASP/Amass/
     ), and Gobuster (
      https://github.com/OJ/gobuster/
     ) enumerate subdomains.
     Daniel Miessler’s SecLists (
      https://github.com/danielmiessler/SecLists/
     ) is a list of keywords that can be used during various phases of recon and hacking. For example, it contains lists that can be used to brute-force subdomains and filepaths.
     Commonspeak2 (
      https://github.com/assetnote/commonspeak2/
     ) generates lists that can be used to brute-force subdomains and filepaths using publicly available data.
     Altdns (
      https://github.com/infosec-au/altdns
     ) brute-forces subdomains by using permutations of common subdomain names.
     Nmap (
      https://nmap.org/
     ) and Masscan (
      https://github.com/robertdavidgraham/masscan/
     ) scan the target for open ports.
     Shodan (
      https://www.shodan.io/
     ), Censys (
      https://censys.io/
     ), and Project Sonar (
      https://www.rapid7.com/research/project-sonar/
     ) can be used to find services on targets without actively scanning them.
     Dirsearch (
      https://github.com/maurosoria/dirsearch/
     ) and Gobuster (
      https://github.com/OJ/gobuster
     ) are directory brute-forcers used to find hidden filepaths.
     EyeWitness (
      https://github.com/FortyNorthSecurity/EyeWitness/
     ) and Snapper (
      https://github.com/dxa4481/Snapper/
     ) grab screenshots of a list of URLs. They can be used to quickly scan for interesting pages among a list of enumerated paths.
     OWASP ZAP (
      https://owasp.org/www-project-zap/
     ) is a security tool that includes a scanner, proxy, and much more. Its web spider can be used to discover content on a web server.
     GrayhatWarfare (
      https://buckets.grayhatwarfare.com/
     ) is an online search engine you can use to find public Amazon S3 buckets.
     Lazys3 (
      https://github.com/nahamsec/lazys3/
     ) and Bucket Stream (
      https://github.com/eth0izzle/bucket-stream/
     ) brute-force buckets by using keywords.
    OSINT
     The Google Hacking Database (
      https://www.exploit-db.com/google-hacking-database/
     ) contains useful Google search terms that frequently reveal vulnerabilities or sensitive files.
     KeyHacks (
      https://github.com/streaak/keyhacks/
     ) helps you determine whether a set of credentials is valid and learn how to use them to access the target’s services.
     Gitrob (
      https://github.com/michenriksen/gitrob/
     ) finds potentially sensitive files that are pushed to public repositories on GitHub.
     TruffleHog (
      https://github.com/trufflesecurity/truffleHog/
     ) specializes in finding secrets in public GitHub repositories by searching for string patterns and high-entropy strings.
     PasteHunter (
      https://github.com/kevthehermit/PasteHunter/
     ) scans online paste sites for sensitive information.
     Wayback Machine (
      https://archive.org/web/
     ) is a digital archive of internet content. You can use it to find old versions of sites and their files.
     Waybackurls (
      https://github.com/tomnomnom/waybackurls/
     ) fetches URLs from the Wayback Machine.
    Tech Stack Fingerprinting
     The CVE database (
      https://cve.mitre.org/cve/search_cve_list.html
     ) contains publicly disclosed vulnerabilities. You can use its website to search for vulnerabilities that might affect your target.
     Wappalyzer (
      https://www.wappalyzer.com/
     ) identifies content management systems, frameworks, and programming languages used on a site.
     BuiltWith (
      https://builtwith.com/
     ) is a website that shows you which web technologies a website is built with.
     StackShare (
      https://stackshare.io/
     ) is an online platform that allows developers to share the tech they use. You can use it to collect information about your target.
     Retire.js (
      https://retirejs.github.io/retire.js/
     ) detects outdated JavaScript libraries and Node.js packages.
    Automation
     Git (
      https://git-scm.com/
     ) is an open sourced version-control system. You can use its
      git diff
     command to keep track of file changes.
    You should now have a solid understanding of how to conduct reconnaissance on a target. Remember to keep extensive notes throughout your recon process, as the information you collect can really balloon over time. Once you have a solid understanding of how to conduct recon on a target, you can try to leverage recon platforms like Nuclei (
     https://github.com/projectdiscovery/nuclei/
    ) or Intrigue Core (
     https://github.com/intrigueio/intrigue-core/
    ) to make your recon process more efficient. But when you’re starting out, I recommend that you do recon manually with individual tools or write your own automated recon scripts to learn about the process.
    现在你应该已经对如何对目标进行侦查有了深入的理解。记得在整个侦查过程中保持详细的笔记，因为你收集的信息可能会随着时间的推移而不断增加。一旦你对如何在目标上进行侦察有了牢固的理解，你可以尝试利用像 Nuclei（https://github.com/projectdiscovery/nuclei/）或 Intrigue Core（https://github.com/intrigueio/intrigue-core/）这样的侦查平台，使你的侦察过程更加高效。但当你刚开始时，我建议你使用单个工具手动进行侦查，或编写自己的自动化侦查脚本以了解该过程。
Part III
      Web Vulnerabilities
6
      Cross-Site Scripting
    Let’s start with
     cross-site scripting (
     XSS
     )
    , one of the most common bugs reported to bug bounty programs. It’s so prevalent that, year after year, it shows up in OWASP’s list of the top 10 vulnerabilities threatening web applications. It’s also HackerOne’s most reported vulnerability, with more than $4 million paid out in 2020 alone.
    让我们从跨站脚本攻击（XSS）开始，这是报告给赏金计划的最常见的漏洞之一。它如此普遍，以至于它每年都出现在OWASP列出的威胁Web应用程序的前10个漏洞中。它也是HackerOne最常见的漏洞之一，仅2020年就支付了超过400万美元的报酬。
    An XSS vulnerability occurs when attackers can execute custom scripts on a victim’s browser. If an application fails to distinguish between user input and the legitimate code that makes up a web page, attackers can inject their own code into pages viewed by other users. The victim’s browser will then execute the malicious script, which might steal cookies, leak personal information, change site contents, or redirect the user to a malicious site. These malicious scripts are often JavaScript code but can also be HTML, Flash, VBScript, or anything written in a language that the browser can execute.
    XSS漏洞会在攻击者可以在受害者的浏览器上执行自定义脚本时发生。如果应用程序无法区分用户输入和组成网页的合法代码，则攻击者可以将自己的代码注入其他用户查看的页面中。然后，受害者的浏览器将执行恶意脚本，可能窃取cookie，泄露个人信息，更改站点内容或重定向用户到恶意站点。这些恶意脚本通常是JavaScript代码，但也可以是HTML、Flash、VBScript或使用浏览器可以执行的任何语言编写的脚本。
    In this chapter, we’ll dive into what XSS vulnerabilities are, how to exploit them, and how to bypass common protections. We’ll also discuss how to escalate XSS vulnerabilities when you find one.
    本章将深入探讨什么是 XSS 漏洞，如何利用它们以及如何绕过常见保护措施。我们还将讨论在发现 XSS 漏洞时如何升级它们。
    Mechanisms
    In an XSS attack, the attacker injects an executable script into HTML pages viewed by the user. This means that to understand XSS, you’ll have to first understand JavaScript and HTML syntax.
    在XSS攻击中，攻击者向用户查看的HTML页面注入可执行脚本。这意味着要了解XSS，您必须首先了解JavaScript和HTML语法。
    Web pages are made up of HTML code whose elements describe the page’s structure and contents. For example, an
    tag defines a web page’s header, and a
    tag represents a paragraph of text. The tags use corresponding closing tags, like
    and
    , to indicate where the contents of the element should end. To see how this works, save this code in a file named
     test.html
    :
    网页由 HTML 代码构成，其元素描述页面的结构和内容。例如， 标签定义网页标题， 标签表示文本段落。标签使用相应的闭合标签，如  和 ，来指示元素的内容应该在哪里结束。为了看到这个工作原理，请将此代码保存在名为 test.html 的文件中：
  Welcome to my web page.
  Thanks for visiting!
    Now open it with your web browser. You can do this by right-clicking the HTML file, clicking
     Open With
    , and then selecting your preferred web browser, like Google Chrome, Mozilla Firefox, or Microsoft Internet Explorer. Or you can simply open your web browser and drag the HTML file into the browser window. You should see a simple web page like
     Figure 6-1
    .
    现在用您的浏览器打开它。您可以右键点击HTML文件，选择"使用...打开"，然后选择您喜欢的浏览器，如Google Chrome，Mozilla Firefox或Microsoft Internet Explorer。或者您可以直接打开浏览器并将HTML文件拖到浏览器窗口中。您应该会看到一个简单的网页，就像图6-1一样。
       Figure 6-1
      : Our simple HTML page rendered in a browser
      图6-1：我们的简单HTML网页在浏览器上呈现。
    In addition to formatting text, HTML lets you embed images with
    tags, create user-input forms with
    tags, link to external pages with
    tags, and perform many other tasks. A full tutorial on how to write HTML code is beyond the scope of this chapter, but you can use W3School’s tutorial (
     https://www.w3schools.com/html/default.asp
    ) as a resource.
    除了格式化文本外，HTML 还允许您使用  标签嵌入图像，使用  标签创建用户输入表单，使用  标签链接到外部页面以及执行许多其他任务。如何编写HTML代码的完整教程超出了本章的范围，但您可以使用 W3School 的教程（https://www.w3schools.com/html/default.asp）作为资源。
    HTML also allows the inclusion of executable scripts within HTML documents using
    tags. Websites use these scripts to control client-side application logic and make the website interactive. For example, the following script generates a
     Hello!
    pop-up on the web page:
    HTML还允许使用标签在HTML文档中包含可执行脚本。网站使用这些脚本来控制客户端应用程序逻辑并使网站变得交互式。例如，以下脚本会在网页上生成Hello!弹窗：
  Welcome to my web page!
  Thanks for visiting!
    Scripts like this one that are embedded within an HTML file instead of loaded from a separate file are called