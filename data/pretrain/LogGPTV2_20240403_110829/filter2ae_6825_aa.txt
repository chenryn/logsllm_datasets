# Twig模板注入：
我们依然用上次那个图片来看一下：
今天我们就来学习一下`Twig`模板引擎的注入：（网上的师傅写的很不错，结合了两三个来学习学习）
## Twig模板基础语法：
### 变量：
应用程序将变量传入模板中进行处理，变量可以包含你能访问的属性或元素。你可以使用 `.`来访问变量中的属性（方法或 PHP 对象的属性，或 PHP
数组单元），Twig还支持访问PHP数组上的项的特定语法， `foo['bar']`：
    {{ foo.bar }}{{ foo['bar'] }}
### 全局变量：
在Twig模板中存在这些全局变量：
    _self：引用当前模板名称；（在twig1.x和2.x/3.x作用不一）
    _context：引用当前上下文；
    _charset：引用当前字符集。
### 定义变量：
可以为代码块内的变量赋值。赋值使用`set`标签：
    {% set foo = 'foo' %}
    {% set foo = [1, 2] %}
    {% set foo = {'foo': 'bar'} %}
### 过滤器：
变量可以修改为 **过滤器**. 过滤器与变量之间用管道符号隔开 (`|`). 可以链接多个过滤器。一个过滤器的输出应用于下一个过滤器。
下面的示例从 `name`标题是：
    {{ name|striptags|title }}
接受参数的筛选器在参数周围有括号。此示例通过逗号连接列表中的元素：
    {{ list|join }}
    {{ list|join(', ') }}
    {{ ['a', 'b', 'c']|join }}
    Output: abc
    {{ ['a', 'b', 'c']|join('|') }}
    Output: a|b|c
若要对代码部分应用筛选器，请使用`apply`标签：
    {% apply upper %}This text becomes uppercase{% endapply %}
### 控制结构：
控制结构是指所有控制程序流的东西-条件句`(即 if/elseif/else/ for)`循环，以及程序块之类的东西。控制结构出现在 `{{% ...
%}}`中
例如，要显示在名为 `users`使用`for`标签：
    Members
    {% for user in users %}
    {{ user.username|e }}
    {% endfor %}
`if`标记可用于测试表达式：
    {% if users|length > 0 %}
    {% for user in users %}
    {{ user.username|e }}
    {% endfor %}
    {% endif %}
### 函数：
    在 Twig 模板中可以直接调用函数，用于生产内容。如下调用了 range()函数用来返回一个包含整数等差数列的列表：
    {% for i in range(0, 3) %}
    {{ i }},
    {% endfor %}
    // Output: 0, 1, 2, 3,
### 注释：
    {#……#}
### 引入其他模板：
Twig 提供的 `include`函数可以使你更方便地在模板中引入模板，并将该模板已渲染后的内容返回到当前模板
    {{ include('sidebar.html') }}
### 继承：
Twig最强大的部分是模板继承。模板继承允许您构建一个基本的“skeleton”模板，该模板包含站点的所有公共元素并定义子模版可以覆写的 blocks 块。
从一个例子开始更容易理解这个概念。
让我们定义一个基本模板， `base.html`，它定义了可用于两列页面的HTML框架文档：
    {% block head %}
    {% block title %}{% endblock %} - My Webpage
    {% endblock %}
    {% block content %}{% endblock %}
    {% block footer %}
    &copy; Copyright 2011 by you.
    {% endblock %}
在这个例子中，block标记定义了子模板可以填充的四个块。所有的 `block`标记的作用是告诉模板引擎子模板可能会覆盖模板的这些部分。
子模板可能如下所示：
    {% block title %}Index{% endblock %}
    {% block head %}
    {{ parent() }}
    {% endblock %}
    {% block content %}
    Index
    Welcome to my awesome homepage.
    {% endblock %}
其中的
`extends`标签是关键所在，其必须是模板的第一个标签。`extends`标签告诉模板引擎当前模板扩展自另一个父模板，当模板引擎评估编译这个模板时，首先会定位到父模板。由于子模版未定义并重写
`footer`块，就用来自父模板的值替代使用了。
## Twig模板注入原理：
我们来看一段Twig代码：
    require_once dirname(__FILE__).'/../lib/Twig/Autoloader.php';
    Twig_Autoloader::register(true);
    $twig = new Twig_Environment(new Twig_Loader_String());
    $output = $twig->render("Hello {{name}}", array("name" => $_GET["name"]));  
    // 将用户输入作为模版变量的值
    echo $output;
这里我们使用PHP模板引擎Twig作为实例，用这个代码来说明Twig语言的模板注入是怎么进行的。
这段代码使用Twig模板引擎来呈现一个字符串模板，并将$_GET["name"]的值作为模板变量“name”的值。具体来说：
  * 第一行使用PHP的require_once语句引入Twig的自动加载器。
  * 第二行调用Twig_Autoloader::register(true)来注册Twig自动加载器。
  * 第三行创建一个Twig_Environment实例，使用Twig_Loader_String作为模板的加载器。
  * 第四行使用Twig_Environment实例的render()方法渲染模板，将$_GET["name"]的值作为模板变量“name”的值传递。
  * 最后一行使用echo语句将渲染结果输出到浏览器中。
我们看到这个地方用户与服务器所接触的get参数会直接传送至{{}}里面，然后被模板引擎所定义的模板变量进行编码和转义，所以这里并不会产生什么漏洞
而下面这个代码我们再来进行一下对比：
    require_once dirname(__FILE__).'/../lib/Twig/Autoloader.php';
    Twig_Autoloader::register(true);
    $twig = new Twig_Environment(new Twig_Loader_String());
    $output = $twig->render("Hello {$_GET['name']}");  // 将用户输入作为模版内容的一部分echo $output;
我们看到这个地方将get传值拼接到了字符串里面去，然后直接用twig模板引擎中的render进行渲染，我们可以发现用户输入的内容作为了模板的一部分，会原样输出用户所输入的内容，这样的话就会将用户所输入的内容进行模板编译和解析，最后在进行输出。
## Twig模板注入检测：
在 Twig 模板引擎里，{{ var }} 除了可以输出传递的变量以外，还能执行一些基本的表达式然后将其结果作为该模板变量的值，例如这里用户输入
name={{2*10}} ，则在服务端拼接的模版内容为：
    Hello {{2*10}}
Twig 模板引擎在编译模板的过程中会计算 `{{2*10}}`中的表达式，会将其返回值 20 作为模板变量的值输出
现在把测试的数据改变一下，插入一些正常字符和 Twig 模板引擎默认的注释符，构造 Payload 为：
    IsVuln{# comment #}{{2*8}}OK
实际服务端要进行编译的模板就被构造为：
    Hello IsVuln{# comment #}{{2*8}}OK
这里简单分析一下，由于 {# comment #} 作为 Twig 模板引擎的默认注释形式，所以在前端输出的时候并不会显示，而 {{2*8}}
作为模板变量最终会返回 16 作为其值进行显示，因此前端最终会返回内容 Hello IsVuln16OK
所以我们继续回到上面最开始的那个图：
## 版本漏洞:
### Twig1.x:
  * index.php
    render($_GET['name']);
    ?>
在 Twig 1.x 中存在三个全局变量：
  * `_self`：引用当前模板的实例。
  * `_context`：引用当前上下文。
  * `_charset`：引用当前字符集。
对应的代码是：
    protected $specialVars = [
            '_self' => '$this',
            '_context' => '$context',
            '_charset' => '$this->env->getCharset()',
        ];