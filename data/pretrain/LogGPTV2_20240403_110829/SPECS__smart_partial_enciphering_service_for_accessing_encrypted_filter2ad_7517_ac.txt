i = max + ri
i = aπ(i) + si
(cid:46) vi = a(cid:48)
(cid:46) vi = m(cid:48)
i
i
(cid:46) max = vi + (bi − 1) · ri − bi · ti
4.3 Changing the encryption scheme
To enable us to compose various building blocks, we developed a protocol for converting ciphertexts from one encryption
scheme to another while maintaining the underlying plaintexts. We ﬁrst present a protocol that switches between two
encryption schemes with the same plaintext size (such as QR and FHE over bits), and then present a different protocol
for switching from QR to Paillier.
without revealing anything to B about c.
Concretely, consider two additively homomorphic encryption schemes E1 and E2, both semantically secure with the
the secret keys SK1 and SK2 for both schemes and A has the corresponding public keys PK1 and PK2. Party A also
same plaintext space M. Let(cid:74).(cid:75)1 be an encryption using E1 and(cid:74).(cid:75)2 an encryption using E2. Consider that party B has
has a value encrypted with PK1,(cid:74)c(cid:75)1. Our protocol, protocol 2, enables A to obtain an encryption of c under E2,(cid:74)c(cid:75)2
Protocol intuition. The idea is for A to add a random noise r to the ciphertext using the homomorphic property of
which removes the randomness r using the homomorphic property of E2. Even though B was able to decrypt(cid:74)c(cid:48)(cid:75)1, B
E1. Then B decrypts the resulting value with E1 (obtaining x + r ∈ M) and encrypts it with E2, sends the result to A
obtains x + r ∈ M which hides x in an information-theoretic way (it is a one-time pad).
Note that, for some schemes, the plaintext space M depends on the secret keys. In this case, we must be sure that
party A can still choose uniformly elements of M without knowing it. For example, for Paillier, M = Z∗
p × Z∗
N (cid:39) Z∗
where p and q are the private primes. However, in this case, A can sample noise in ZN that will not be in Z∗
N with
negligible probability (1 − 1
Proposition 4.2. Protocol 2 is secure in the honest-but-curious model.
(remember N is large – 1024 bits in our instantiation).
q ) ≈ 1 − 2√
q
p )(1 − 1
N
In our classiﬁers, we use this protocol for M = {0, 1} and the encryption schemes are QR (for E1) and an FHE
scheme over bits (for E2). In some cases, we might also want to switch from QR to Paillier (e.g. reuse the encrypted
9
Input B: Secret keys SK1 and SK2
Protocol 2 Changing the encryption scheme
Input A:(cid:74)c(cid:75)1 and public keys PK1 and PK2
Output A:(cid:74)c(cid:75)2
2: A sends(cid:74)c(cid:48)(cid:75)1 ←(cid:74)c(cid:75)1 ·(cid:74)r(cid:75)1 to B
1: A uniformly picks r ← M
3: B decrypts c(cid:48) and re-encrypts with E2
4: B sends(cid:74)c(cid:48)(cid:75)2 to A
5: A:(cid:74)c(cid:75)2 =(cid:74)c(cid:48)(cid:75)2 ·(cid:74)r(cid:75)−1
6: A outputs(cid:74)c(cid:75)2
2
result of a comparison in a homomorphic computation), which has a different message space. Note that we can simulate
the homomorphic XOR operation and a message space M = {0, 1} with Paillier: we can easily compute the encryption
of b1 ⊕ b2 under Paillier when at most one of the bi is encrypted (which we explain in the next subsection). This is the
case in our setting because party A has the randomness r in the clear.
4.3.1 XOR with Paillier.
Suppose a party gets the bit b1 encrypted under Paillier’s encryption scheme, and that this party only has the public key.
This party knows the bit b2 in the clear and wants to compute the encryption of(cid:74)b1 ⊕ b2(cid:75).
To do so, we just have to notice that
b1 ⊕ b2 =
if b2 = 0
if b2 = 1
b1
1 − b1
(cid:40)
(cid:40)(cid:74)b1(cid:75)
g(cid:74)b1(cid:75)−1 mod N 2
(cid:74)b1 ⊕ b2(cid:75) =
if b2 = 0
if b2 = 1
Hence, it is very easy to compute an encryption of b1 ⊕ b2 if we know the modulus N and the generator g (cf. Paillier’s
scheme construction):
If we want to unveil the result to an adversary who knows the original encryption of b1 (but not the secret key), we
have to refresh the result of the previous function to ensure semantic security.
4.4 Computing dot products
For completeness, we include a straightforward algorithm for computing dot products of two vectors, which relies on
Paillier’s homomorphic property.
Protocol 3 Private dot product
Input A: x = (x1, . . . , xd) ∈ Zd, public key PKP
Output A:(cid:74)(cid:104)x, y(cid:105)(cid:75)
Input B: y = (y1, . . . , yd) ∈ Zd, secret key SKP
2: A computes(cid:74)v(cid:75) =(cid:81)
1: B encrypts y1, . . . , yd and sends the encryptions(cid:74)yi(cid:75) to A
3: A re-randomizes and outputs(cid:74)v(cid:75)
i(cid:74)yi(cid:75)xi mod N 2
Proposition 4.3. Protocol 3 is secure in the honest-but-curious model.
10
(cid:46) v =(cid:80) yixi
4.5 Dealing with ﬂoating point numbers
Although all our protocols manipulate integers, classiﬁers usually use ﬂoating point numbers. Hence, when developing
classiﬁers with our protocol library, we must adapt our protocols accordingly.
Fortunately, most of the operations involved are either additions or multiplications. As a consequence, a simple
solution is to multiply each ﬂoating point value by a constant K (e.g. K = 252 for IEEE 754 doubles) and thus support
ﬁnite precision. We must also consider the bit length for the comparisons. We show an example of a full analysis in
Section 6 for the Naïve Bayes classiﬁer.
5 Private hyperplane decision
Recall from Section 3.1 that this classiﬁer computes
∗
k
= argmax
i∈[k] (cid:104)wi, x(cid:105).
Now that we constructed our library of building blocks, it is straightforward to implement this classiﬁer securely: the
client computes the encryption of(cid:74)(cid:104)wi, x(cid:105)(cid:75) for all i ∈ [k] using the dot product protocol and then applies the argmax
protocol (Protocol 1) to the encrypted dot products.
Protocol 4 Private hyperplane decision
Client’s (C) Input: x = (x1, . . . , xd) ∈ Zd, public keys PKP and PKQR
Server’s (S) Input: {wi}k
Client’s Output: argmax
i=1 where ∀i ∈ [k], wi ∈ Zn, secret keys SKP and SKQR
i∈[k] (cid:104)wi, x(cid:105)
1: for i = 1 to k do
2:
3:
C gets(cid:74)vi(cid:75) the result of the protocol.
C and S run Protocol 3 for private dot product where C is party A with input x and S is party B with input wi.
(cid:46) vi ← (cid:104)x, wi(cid:105)
4: end for
5: C and S run Protocol 1 for argmax where C is the A, and S the B, and(cid:74)v1(cid:75), . . . ,(cid:74)vk(cid:75) the input ciphertexts. C gets
the result i0 of the protocol.
6: C outputs i0
Proposition 5.1. Protocol 4 is secure in the honest-but-curious model.
(cid:46) i0 ← argmax
i∈[k]
vi
6 Secure Naïve Bayes classiﬁer
Section 3.1 describes the Naïve Bayes classiﬁer. The goal is for the client to learn k∗ without learning anything about
the probabilities that constitute the model, and the server should learn nothing about x. Recall that the features values
domain is discrete and ﬁnite.
As is typically done for numerical stability reasons, we work with the logarithm of the probability distributions:
∗
k
= argmax
i∈[k]
= argmax
i∈[k]
log p(C = ci|X = x)
log p(C = ci) +
d(cid:88)
j=1
log p(Xj = xj|C = ci)
(2)
11
6.1 Preparing the model
Since the Paillier encryption scheme works with integers, we convert each log of a probability from above to an integer
by multiplying it with a large number K (recall that the plaintext space of Paillier is large ≈ 21024 thus allowing for a
large K), thus still maintaining high accuracy. The issues due to using integers for bayesian classiﬁcation have been
previously studied in [TRMP12], even though their setting was even more restricting than ours. However, they use a
similar idea to ours: shifting the probabilities logarithms and use ﬁxed point representation.
As the only operations used in the classiﬁcation step are additions and comparisons (cf. Equation (2)), we can just
multiply the conditional probabilities p(xj|ci) by a constant K so to get integers everywhere, while keeping the same
classiﬁcation result.
For example, if we are able to compute the conditional probabilities using IEEE 754 double precision ﬂoating point
numbers, with 52 bits of precision, then we can represent every probability p as
p = m · 2e
where m binary representation is (m)2 = 1.d and d is a 52 bits integer. Hence we have 1 ≤ m  lmax + 1 + λ where λ is the security parameter and N is the modulus
for Paillier’s cryptosystem plaintext space (cf. Section 4.1.2). This condition is easily fulﬁlled as, for a good level of
security, we have to take log2 N ≥ 1024 and we usually take λ ≈ 100.
tables as part of the model, where K is computed as described just before:
• One table for the priors on the classes P : P (i) = (cid:100)K log p(C = ci)(cid:101).
• One table per feature j per class i, Ti,j: Ti,j(v) ≈ (cid:100)K log p(Xj = v|C = ci)(cid:101), for all v ∈ Dj.
The tables remain small: P has one entry by category i.e. k entries total, and T has one entry by category and feature
|Dj|. In our examples, this represents less than 3600 entries. Moreover, this
value i.e. k · D entries where D =(cid:80)
preparation step can be done once and for all at server startup, and is hence amortized.
3If the biggest δi is 10, the ratio between the smallest and the biggest probability is of order 2210
= 21024 ...
12
6.2 Protocol
Let us begin with some intuition. The server encrypts each entry in these tables with Paillier and gives the resulting
encryption (the encrypted model) to the client. For every class ci, the client uses Paillier’s additive homomorphism to
j=1(cid:74)Ti,j(xj)(cid:75). Finally, the client runs the argmax protocol, Protocol 1, to get argmax pi. For
compute(cid:74)pi(cid:75) =(cid:74)P (i)(cid:75)(cid:81)d
completeness, the protocol is shown in Protocol 5.
Protocol 5 Naïve Bayes Classiﬁer
(cid:110)
Client’s (C) Input: x = (x1, . . . , xd) ∈ Zd, public key PKP , secret key SKQR
Server’s (S) Input: The secret key SKP , public key PKQR and probability tables {log p(C = ci)}1≤i≤k and
{log p(Xj = v|C = ci)}v∈Dj
Client’s Output: i0 such that p(x, ci0) is maximum
1≤j≤d,1≤i≤k
(cid:111)
2: The server sends(cid:74)P(cid:75) and {(cid:74)Ti,j(cid:75)}i,j to the client.
3: For all 1 ≤ i ≤ k, the client computes(cid:74)pi(cid:75) =(cid:74)P (i)(cid:75)(cid:81)d
1: The server prepares the tables P and {Ti,j}1≤i≤k,1≤j≤d and encrypts their entries using Paillier.
4: The client runs the argmax protocol (Protocol 1) with the server and gets i0 = argmaxi pi
5: C outputs i0
j=1(cid:74)Ti,j(xj)(cid:75).
Proposition 6.1. Protocol 5 is secure in the honest-but-curious model.
Proof intuition. Given the security property of the argmax protocol, Protocol 1, and the semantic security of the
Paillier cryptosystem, the security of this classiﬁer follows trivially, by invoking a modular composition theorem.
Efﬁciency. Note that the tables P and {Ti,j}1≤i≤k,1≤j≤d can be prepared in advance. Hence the cost of constructing
the tables can be amortized over many uses. To compute the encrypted probabilities pi’s, the client runs d homomorphic
operations (here multiplications) for each i, hence doing kd modular multiplications. Then the parties run a single