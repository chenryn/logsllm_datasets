件架构的榜样，A-7EOFP当然属于我们的艺术馆。我们想放入艺术
馆的另一个架构是朗讯5ESS电话交换机的软件架构（Carney等
1985）。5ESS取得了全球范围的商业成功，为世界各国的网络提供
了核心电话网络交换。它成为性能和可靠性的标准，每个单元每小
时能处理超过100万次的连接，平均每年非计划岩机时间少于10秒
钟（Alcatel-Lucent1999）。该架构的一些统一概念，如管理电话连
接的“半通话模型”，已经成为电话和网络协议领域的标准模式
（Hanmer2001）。除了保持必须处理的通话类型的数目为2n（其中
n是通话协议的数目）之外，半通话模式还在操作系统的进程概念
和电话的通话类型概念之间建立起了联系，从而提供了简单的设计
原则，引入了漂亮的架构一致性。在过去的25年中，开发团队涉及
多达3000个人，他们发展并增强该系统。基于它的商业成功、持久
性和影响，5ESS架构是我们艺术馆的一件好藏品。还有一个我们想
放入美丽架构艺术馆的系统，它就是万维网（WorldWide
Web,WWW）的架构。它由TimBerners-Lee在CERN创建，在
（Bass、Clements和Kazman2003）中有介绍。万维网当然已经取得
了商业上的成功，它转变了人们使用因特网的方式。即使创建了新
的应用、引入了新的功能，它的架构仍然保持不变。该架构的整体
简单性促成了它的概念完整性，但有一些决定导致了该架构的完整
性保持不变，如客户端和服务器端使用同一个库，创建分层架构以
实现分离关注点等。核心万维网架构的持久性和它对新扩展、新功
能持续支持的能力，使它当之无愧地进入了我们的艺术馆。
891
---
## Page 893
什么是建筑师？
夏天很热的一个日子里，一个外乡人沿着一条路在行走。他走着走
看，来到一个人跟前，此人正在路边敲碎石头。
“你在做什么？”他问那个人。
那个人抬头看着他；“我在敲碎石头。你以为我看起来像在干什
么？现在不要妨碍我，让我继续干活。”
这个外乡人继续沿着路走，不久他遇到了第二个在大太阳下敲碎石
头的人。这个人正努力工作，汗滴如雨。
“你在做什么？”外乡人问道。这个人抬头看他，露出微笑。
“我在为谋生而工作，”他说，“但这个工作太辛苦了。也许你能给我
一份更好的工作？”
外乡人摇了摇头，继续前行。没多久，他遇到了第三个敲碎石头的
人。太阳正是最炙热的时候，这个人非常卖力，汗流如注。
“你在做什么？”外乡人问道。
这个人停了一下，喝了一口水，微笑着抬起他的手，指向天空。
“我在建一座大教堂。”他喘看气说。
外乡人看了他一会儿，说：“我们正打算开一家新公司。你来做我
们的总建筑师怎么样？”
我们的最后一个例子是UNIX系统，它展示了概念完整性，使用厂
泛，拥有巨大的影响力。管道和过滤器的设计是讨人喜欢的抽象，
允许我们快速构建新的应用。
在描述架构、架构师的角色和创建架构时的考虑等方面，我们已经
谈了很多，我们也简单介绍了一些美丽架构的例子。接下来我们邀
请你阅读后续章节中详细的例子，这些例子来自于那些技艺精湛的
架构师，本书介绍了他们创建并使用过的那些美丽架构。
[1]参见http://www.sei.cmu.edu/productlines/plp_hof.html.
892
---
## Page 894
[2].参见CHoffiman和Weiss2000）的第6章、第15章和第16章，或在
NRLDigitalArchives（http://torpedo.nrl.navy.mil/tu/ps）中查找"A-
7E”。
致谢
DavidParnas在几篇论文中定义了我们描述的许多结构，其中包括他
的"术语滥用”论文（Parnas1974）。JonBentley为这本书提供了创
作灵感，他和DeborahHill、MarkKlein对早期的草稿提出了许多有
价值的建议。
参考文献
Alcatel-Lucent.1999."Lucent's record-breaking reliability continues to
lead the industry according to latest quality report."Alcatel-Lucent Press
Releases.June 2.http://www.alcatel-lucent.com/wps/portal/News
Releases/DetailLucent?LMSG_CABINET=Docs_and_Resource_Ctr&
LMSG_CONTENT_FILE=News_Releases_LU_1999/LU_News_Article
007318.xml(accessedMay15，2008).Bass,L.，P.Clements,and
R.Kazman.2003.Software Architecture in Practice,Second
Edition.Boston,MA: Addison-Wesley.
Blaauw,G.， and F.Brooks.1997.Computer Architecture: Concepts and
Evolution.Boston,MA:Addison-Wesley.
Booch,G., J.Rumbaugh,and L.Jacobson.1999.The UML Modeling
Language User Guide.Boston,MA:Addison-Wesley
Brooks,F.1995.The Mythical Man-Month.Boston,MA: Addison-Wesley
Carney,D.L.,，et al.1985."The 5ESS switching system: Architectural
overview."AT&T Technical Journal,vol.64，no.6，p.1339
Clements,P.，et al.2003.Documenting Software Architectures:Views
and Beyond.Boston,MA: Addison-Wesley.
Clements,P., R.Kazman,and M.Klein.2002.Evaluating Software
Architectures.Boston:Addison-Wesley.
Conway,M.1968."How do committees invent."Datamation,vol.14, no.4.
893
---
## Page 895
Courtois,P.J.1977.Decomposability:Queuing and Computer
Systems.New York,NY:Academic Press.
Languages.Ed.F.Genuys.New York,NY:Academic Press.
Garlan,D., and D.Perry.1995."Introduction to the special issue on
software architecture."IEEE Transactions on Software
Engineering,vol.21， no.4.
Grinter,R.E.1999."Systems architecture: Product designing and social
engineering."Proceedings of ACM Conference on Work Activities
Coordination and Collaboration(WACC'99）.11-18.SanFrancisco,CA
Programming (PLoP).Monticello,IL.http:/hillside.net/plop/plop2001/a
ccepted_submissions/PLoP2001/rhanmer0/PLoP2001_rhanmer0_1.pdf.
Hoffiman,D.,and D. Weiss.20o0.Software Fundamentals:Collected
Papers by David L.Parnas.Boston,MA: Addison-Wesley.
IEEE. 200o."Recommended practice for architectural description of
software intensive systems."Std 1471.Los Alamitos,CA: IEEE.
Klein,John.2005."How does the architect's role change as the software
ages?"Proceedings of the 5th Working IEEE/IFIP Conference on Software
Architecture（(WICSA）.Washington,DC:IEEE ComputerSociety
Maranzano,J.,et al.2005."Architecture reviews:Practice and
experience."IEEE Software,March/April 2005.
Parnas,David L.1974."On a buzzword:Hierarchical structure.
Proceedings of IFIP Congress.Amsterdam,North Holland.[Reprinted as
Chapter 9 in Hoffiman and Weiss (2000).JWaldo,J.2006."On system
design."OOPLSA'06.October 22-26.Portland,OR
Weiss,D., and C.T.R.Lai.1999.Software Product Line
Engineering.Boston,MA:Addison-Wesley.
第2章两个系统的故事：现代软件神话
894
---
## Page 896
Pete Goodliffe
架构是一种很浪费空间的艺术。
Philip Johnson
软件系统就像一座由建筑和后面的路构成的城市一由公路和旅馆构
成的错综复杂的网络。在繁忙的城市里发生着许多事情，控制流不
断产生，它们的生命在城市中交织在一起，然后死亡。丰富的数据
积聚在一起、存储起来，然后销毁。有各式各样的建筑：有的高大
美丽，有的低矮实用，还有的塌破损。随着数据围绕着它们流
动，形成了交通堵塞和追尾、高峰时段和道路维护。软件之城的品
质直接与其中包含多少城市规划有关。某些软件系统很幸运，创建
时由有经验的架构师进行了深思熟虑的设计，在构建时体现出了优
雅和平衡，有很好的地图，便于导航。另一些软件系统就没有这么
幸运，基本上是一些通过偶然聚集的代码渐渐形成的，交通基础设
施不足，建筑单调而平凡，置身于其中时会完全迷失，找不着路。
在本章中，我将讲述这样两个软件城市的故事。这是真实的故事，
就像所有好的故事一样，这个故事最终是有教育意义的。人们说经
验是伟大的老师，但最好是别人的经验，如果你能从这些项目的错
误和成功之中学习，你（和你的软件）可能会避免很多的痛苦。本
章中的这两个系统特别有趣，因为它们有很大不同，尽管从表面上
看非常相似：
它们具有相似的规模（大约500000行代码）。
它们都是“嵌入式"消费音频设备。
每种软件的生态系统都是成熟的，已经经历了许多的产品版本。
两种解决方案都是基于Linux的。
·编码采用C++语言。
）
道得更多）。
895
---
## Page 897
程序员本身就是架构师。
在这个故事中，人名都已改变，目的是保护那些无辜的人（和有罪
的人）。
2.1混乱大都市
你们修筑、修筑，预备道路，将绊脚石从我百姓的路中除掉。
《以赛业书》第57章14节
我们要看的第一个软件系统名为“混乱大都市”。它是我喜欢回顾的
一个系统一既不是因为它很好，也不是因为它让参与开发的人感到
舒服，而是因为当我第一次参与它的并发时，它教给了我有价值的
软件开发经验。
我第一次接触“混乱大都市”，是在我加入了创建它的公司时。初看
上去这是一份有前途的工作。我将加入一个团队，参与基于Limux
的、“现代"的C++代码集开发，已有的代码集已经开发儿年了。如
果你像我一样拥有特殊的技术崇拜，就会觉得很兴奋。
工作起初并不顺利，但是你不能指望在加入一个新团队、面对新的
代码集时会觉得很轻松。然而，日复一日（周复一周），情况却没
有任何好转。这些代码要花极长的时间来学习，没有显而易见的进
入系统中的路径。这是个警告信号。从微观的层面来说，也就是从
每行程序、每个方法、每个组件来看，代码都是混乱而粗糙地垒在
一起的。不存在一致性、不存在风格、也没有统一的概念能够将不
同的部分组织在一起。这是另一个警告信号。系统中的控制流让人
觉得不舒服，无法预测。这又是一个警告信号。系统中有太多的
“坏味道”（Fowler1999），整个代码集散发着腐烂的气味，是在大
热天里散发着刺激性气体的一个垃圾堆。这是一个清晰的警告信
号。数据很少放在使用它的地方。经常引入额外的巴罗克式缓存
层，目的是试图让数据停留在更方便的地方。这又是一个警告信
号。
当我试图在大脑中建立“大都市"的全图时，没有人能解释它的结
构；没有人知道它的所有层、它的藤蔓，以及那些黑暗、隔离的角
落。实际上，没有人知道它究竞有多少部分是真正能工作的（它实
896
---
## Page 898
一小部分区域，但没人了解整个系统。很自然，没有任何文档。这
也是一个警告信号。我需要的是一份地图。
这是一个悲伤的故事，我曾是其中的一部分：“大都市"是城市规划
的恶梦。在你开始整治混乱之前，先要理解混乱，所以我们花了很
大的精力和毅力，得到了一份“架构图”。我们标出了每一条公路、
每一条主干道、每一条很少人了解的小路、所有灯光昏暗的辅路，