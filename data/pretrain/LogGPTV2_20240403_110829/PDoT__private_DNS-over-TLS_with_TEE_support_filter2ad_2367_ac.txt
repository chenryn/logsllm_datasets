### Challenges and Solutions in TEE

**Communication Limitations:**
The Trusted Execution Environment (TEE) presents a challenge because the Recursive Resolver (RecRes) cannot communicate directly with the outside world. To address this, we introduce an external process that forwards packets from the client to the TEE via ECALLs and sends packets received from the TEE via OCALLs, as detailed in Section 5.1. However, this external process could potentially redirect packets to a malicious process or drop them entirely. This security concern is further discussed in Section 6.1.

**Process Forking:**
Another limitation within the TEE is the inability to fork processes. PDoT uses pthreads to run multiple tasks concurrently within the TEE, thus avoiding the need for forking.

**Limited TEE Memory:**
To manage the limited memory in the TEE, we employ several techniques:
1. **Exclusive Enclave Usage:** We ensure that no other enclaves, except the quoting enclave, run on the RecRes machine. This allows PDoT to utilize all available EPC memory.
2. **Fixed Thread Count:** We fix the number of Query-Handler threads to conserve memory. This is feasible due to the disassociation of QueryHandler and ClientReader/Writer threads.

**OCALL and ECALL Overhead:**
ECALLs and OCALLs introduce overhead, so they should be minimized. For example, all threads must wait for specific information: the ClientReader thread waits for a DNS query from the client, the QueryProcessor thread waits for a query from the inQueryList, and the ClientWriter thread waits for a response from the outQueryList. In PDoT, these threads wait inside the enclave. If they were to wait outside, an ECALL would be required each time the thread proceeds, increasing overhead.

### Evaluation

#### 6.1 Security Analysis

This section discusses how PDoT achieves query privacy (Requirement R1) against two types of adversaries, as outlined in Section 3.1.

**Malicious RecRes Operator:**
A malicious RecRes operator controls the machine running PDoT RecRes. They cannot intercept queries from packets because they are transmitted over an encrypted TLS channel. The local TLS endpoint is within the RecRes enclave, which the operator cannot access due to the protected memory region.

However, a malicious operator might attempt to connect the socket to a malicious TLS server, either in an untrusted region or a separate enclave. In both cases, the client's verification step will fail:
- **Untrusted Region:** The TLS server certificate lacks attestation information.
- **Separate Enclave:** The MRENCLAVE value in the attestation report would differ, leading to rejection by the client.

Thus, the adversary must run the PDoT RecRes code to establish a valid TLS connection, ensuring that the client does not connect to a malicious server.

**Network Adversary:**
This adversary captures all packets to/from PDoT but cannot obtain plaintext queries due to the TLS tunnel. The only accessible information includes cleartext header fields like source and destination IP addresses. Coupled with timing attacks, this information might allow the adversary to correlate packets sent from the client to the NS. The privacy implications of this leakage are discussed in Section 7.1.

#### 6.2 Deployability

PDoT clients do not require special hardware and need only minor software modifications (Requirement R2). To enhance deployability, PDoT offers several configurable parameters, such as the number of QueryHandle threads, memory allocation per thread, and timeout settings for QueryHandle threads. Additionally, PDoT supports incremental deployment, allowing some clients to request DNS-over-TLS without supporting PDoT, by having its TLS certificate signed by a trusted root CA.

On the client side, an ideal deployment involves browser or OS vendors updating their client stubs to support PDoT. Similar to maintaining a list of trusted root CA certificates, vendors can include and update a list of trustworthy MRENCLAVE values for PDoT resolvers. Expert users can manually manage these values.

#### 6.3 Performance Evaluation

We evaluated PDoT on a low-cost Intel NUC with an Intel Pentium Silver J5005 CPU, 128 MB of EPC memory, and 4 GB of RAM, using Ubuntu 16.04 and the Intel SGX SDK version 2.2. The RecRes was configured to support up to 50 concurrent clients and 30 QueryHandle threads. We compared PDoT with Unbound, a popular open-source RecRes.

**Latency Evaluation:**
Our objective was to assess the overhead introduced by running RecRes inside an enclave. We measured the time to resolve a DNS query using PDoT and compared it with Unbound. PDoT should not significantly increase latency compared to Unbound (Requirement R3).

**Experimental Setup:**
- **Client and RecRes:** Both ran on the same physical machine to eliminate network delay.
- **Scenarios:** Cold start (new TLS connection for each query) and warm start (reusing one TLS connection).
- **Queries:** 100 sequential queries for ten different domains from the Majestic Million domain list.

**Results:**
- **Cold Start:** PDoT showed an average 22% overhead compared to Unbound.
- **Warm Start:** PDoT showed an average 9% overhead compared to Unbound.

**Throughput Evaluation:**
Our goal was to measure the rate at which the RecRes can sustainably respond to queries. PDoT’s throughput should be close to that of Unbound (Requirement R4).

**Experimental Setup:**
- **Client and RecRes:** Ran on different machines to use all available resources.
- **Clients:** Varying from 1 to 25, with query rates from 5 to 100 queries per second.
- **Caching:** Disabled for both PDoT and Unbound.

**Results:**
- **Unbound:** Could handle up to 10 queries per second per client.
- **PDoT:** Handled more than 100 queries per second in all cases due to a separate pool of QueryHandle threads.

**Caching Evaluation:**
We evaluated the performance of both resolvers with caching enabled. Unbound used its default caching behavior, while PDoT used a simple proof-of-concept cache.

**Experimental Setup:**
- **Caches:** Pre-populated with varying numbers of domains.
- **Latency Measurement:** For a representative set of 10 popular domains.

**Results:**
- **Unbound:** Consistent latency regardless of cache size.
- **PDoT:** Lower average latencies with a relatively empty cache but higher variability due to unoptimized caching and enclave memory access latency.

### Discussion

#### 7.1 Information Revealed by IP Addresses

Even with TLS encryption, some information, such as source and destination IP addresses, is still leaked. A network adversary can use this information, combined with packet timing, to correlate packets sent from the client to the RecRes and subsequent packets sent from the RecRes to the Name Server (NS).

This correlation allows the adversary to narrow down the client’s domain name query to one of the records served by a specific Authoritative Name Server (ANS). If the ANS serves R domain names, the adversary has a 1/R probability of guessing the queried domain. When R > 1, the ANS is considered privacy-preserving.

To quantify this, we designed a scheme to collect records stored in various ANSs and sent DNS queries for 1,000,000 domains. The results provide insights into the percentage of domains that can be answered by a privacy-preserving ANS and the typical size of the anonymity set (R) provided by such an ANS.