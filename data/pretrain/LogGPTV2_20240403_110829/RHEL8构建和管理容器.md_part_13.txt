        ],
        "Env": null
    }
    ```
3.  解包所有内容：
    ``` literallayout
    $ cd $HOME/TEST
    $ for f in $(ls); do tar xvf $f; done
    ```
4.  检查结果：
    ``` literallayout
    $ find blobs/ rpm_dir/
    blobs/
    blobs/sha256
    blobs/sha256/10914f1fff060ce31388f5ab963871870535aaaa551629f5ad182384d60fdf82
    rpm_dir/
    rpm_dir/gzip-1.9-4.el8.src.rpm
    ```
    如果结果正确，则可使用镜像。
    ::: variablelist
    [备注]{.term}
    :   发布容器镜像后可能需要几小时时间才能使用其相关源容器。
    :::
:::
::: itemizedlist
**其它资源**
-   `skopeo-copy`{.literal} man page
-   `skopeo-inspect`{.literal} man page
:::
:::
:::
[]{#assembly_running-skopeo-buildah-and-podman-in-a-container_building-running-and-managing-containers.html}
::: chapter
::: titlepage
# []{#assembly_running-skopeo-buildah-and-podman-in-a-container_building-running-and-managing-containers.html#assembly_running-skopeo-buildah-and-podman-in-a-container_building-running-and-managing-containers}第 9 章 在容器中运行 Skopeo、Buildah 和 Podman {.title}
:::
本章论述了如何在容器中运行 Skopeo、Buildah 和 Podman。
使用
Skopeo，您可以检查远程注册表中的镜像，而无需下载整个镜像及其所有层。您还可以使用
Skopeo 来复制镜像、签名镜像、同步镜像以及在不同格式和层压缩间转换镜像。
Buildah 处理对 OCI 容器镜像的构建。使用
Buildah，您可以创建一个可运行的容器，可以从头开始，也可以使用一个镜像作为起点。您可以从正常工作的容器或
`Containerfile`{.literal}
中的说明创建镜像。您可以挂载和卸载正常工作容器的根文件系统。
借助
Podman，您可以管理容器和镜像、挂载到这些容器中的卷，以及从容器组生成的
pod。Podman 基于 `libpod`{.literal}
库来管理容器生命周期。`libpod`{.literal}
库提供用于管理容器、Pod、容器镜像和卷的 API。
在容器中运行 Buildah、Skopeo 和 Podman 的原因：
::: itemizedlist
-   [**CI/CD 系统**]{.strong} ：
    ::: itemizedlist
    -   [**Podman 和 Skopeo**]{.strong} ：您可以在 Kubernetes 中运行
        CI/CD 系统，或者使用 OpenShift
        构建容器镜像，也可以在不同的容器注册表之间分发这些镜像。要将
        Skopeo 集成到 Kubernetes 工作流中，您需要在容器中运行它。
    -   [**Buildah**]{.strong}：您希望在 Kubernetes 或 OpenShift CI/CD
        系统中构建持续构建镜像的 OCI/container
        镜像。在以前的版本中，用户使用 Docker 套接字来连接容器引擎并执行
        `docker build`{.literal} 命令。这等同于为系统提供 root
        访问权限而无需一个不安全的密码。因此，红帽建议在容器中使用
        Buildah。
    :::
-   [**不同的版本**]{.strong} ：
    ::: itemizedlist
    -   [**All**]{.strong}
        ：您正在主机上运行一个旧的操作系统，但您想要运行最新版本的
        Skopeo、Buildah 或
        Podman。解决方法是在容器中运行容器工具。例如，这有助于在 RHEL 7
        容器主机上运行 RHEL 8
        中提供的、无法原生访问最新版本的容器工具的最新版本。
    :::
-   [**HPC 环境**]{.strong} ：
    ::: itemizedlist
    -   [**全部**]{.strong} ：HPC 环境中的一个常见的限制是不允许非 root
        用户在主机上安装包。当您在容器中运行 Skopeo、Buildah 或 Podman
        时，您可以以非 root 用户身份执行这些特定任务。
    :::
:::
::: section
::: titlepage
# []{#assembly_running-skopeo-buildah-and-podman-in-a-container_building-running-and-managing-containers.html#proc_running-skopeo-in-a-container_assembly_running-skopeo-buildah-and-podman-in-a-container}在容器中运行 Skopeo {.title}
:::
此流程演示了如何使用 Skopeo 检查远程容器镜像。在容器中运行 Skopeo
意味着容器根文件系统与主机 root
文件系统分离。要在主机和容器间共享或复制文件，您必须挂载文件和目录。
::: itemizedlist
**先决条件**
-   已安装 `container-tools`{.literal} 模块。
    ``` literallayout
    # yum module install -y container-tools
    ```
:::
::: orderedlist
**流程**
1.  登录到 registry.redhat.io registry:
    ``` screen
    $ podman login registry.redhat.io
    Username: PI:EMAIL
    Password: ***********
    Login Succeeded!
    ```
2.  获取 `registry.redhat.io/rhel8/skopeo`{.literal} 容器镜像：
    ``` literallayout
    $ podman pull registry.redhat.io/rhel8/skopeo
    ```
3.  使用 Skopeo 检查远程容器镜像
    `registry.access.redhat.com/ubi8/ubi`{.literal}:
    ``` literallayout
    $ podman run --rm registry.redhat.io/rhel8/skopeo skopeo inspect docker://registry.access.redhat.com/ubi8/ubi
    {
        "Name": "registry.access.redhat.com/ubi8/ubi",
        ...
        "Labels": {
            "architecture": "x86_64",
            ...
            "name": "ubi8",
            ...
            "summary": "Provides the latest release of Red Hat Universal Base Image 8.",
            "url": "https://access.redhat.com/containers/#/registry.access.redhat.com/ubi8/images/8.2-347",
            ...
        },
        "Architecture": "amd64",
        "Os": "linux",
        "Layers": [
        ...
        ],
        "Env": [
            "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
            "container=oci"
        ]
    }
    ```
    `rm`{.literal} 选项会在容器退出后删除
    `registry.redhat.io/rhel8/skopeo`{.literal} 镜像。
:::
::: itemizedlist
**其它资源**
-   [如何在容器文章中运行
    skopeo](https://www.redhat.com/sysadmin/how-run-skopeo-container){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_running-skopeo-buildah-and-podman-in-a-container_building-running-and-managing-containers.html#proc_running-skopeo-in-a-container-using-credentials_assembly_running-skopeo-buildah-and-podman-in-a-container}使用凭证在容器中运行 Skopeo {.title}
:::
使用容器 registry 需要进行身份验证才能访问和更改数据。Skopeo
支持各种指定凭证的方法。
通过这种方法，您可以使用 `--cred USERNAME[:PASSWORD]`{.literal}
选项在命令行中指定凭据。
::: itemizedlist
**先决条件**
-   已安装 `container-tools`{.literal} 模块。
    ``` literallayout
    # yum module install -y container-tools
    ```
:::
::: itemizedlist
**流程**
-   使用 Skopeo 根据锁定的 registry 检查远程容器镜像：
    ``` literallayout
    $ podman run --rm registry.redhat.io/rhel8/skopeo inspect --creds $USER:$PASSWORD docker://$IMAGE
    ```
:::
::: itemizedlist
**其它资源**
-   [如何在容器文章中运行
    skopeo](https://www.redhat.com/sysadmin/how-run-skopeo-container){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_running-skopeo-buildah-and-podman-in-a-container_building-running-and-managing-containers.html#proc_running-skopeo-in-a-container-using-authfiles_assembly_running-skopeo-buildah-and-podman-in-a-container}使用 authfile 在容器中运行 Skopeo {.title}
:::
您可以使用身份验证文件（authfile）来指定凭证。`skopeo login`{.literal}
命令登录到特定的 registry，并将身份验证令牌存储在 authfile 中。使用
authfile 的优点是，无需重复输入凭证。
当在同一主机上运行时，所有容器工具，如 Skopeo、Buildah 和 Podman
共享相同的 authfile。在容器中运行 Skopeo 时，您必须通过在容器中卷挂载
authfile 来共享主机上的 authfile，或者您必须在容器内重新验证。
::: itemizedlist
**先决条件**
-   已安装 `container-tools`{.literal} 模块。
    ``` literallayout
    # yum module install -y container-tools
    ```
:::
::: itemizedlist
**流程**
-   使用 Skopeo 根据锁定的 registry 检查远程容器镜像：
    ``` literallayout
    $ podman run --rm -v $AUTHFILE:/auth.json registry.redhat.io/rhel8/skopeo inspect docker://$IMAGE
    ```
    v `$AUTHFILE:/auth.json`{.literal} 选项 volume-mount 会在容器内的
    /auth.json 挂载 authfile。Skopeo 现在可以访问主机上的 authfile
    中的身份验证令牌，并获得对 registry 的安全访问。
:::
其他 Skopeo 命令也可以工作，例如：
::: itemizedlist
-   使用 `skopeo-copy`{.literal} 命令，通过
    `--source-creds 和 --dest-creds`{.literal} ``{=html}
    选项在命令行中为源和目标镜像指定凭据。它还读取
    `/auth.json`{.literal} authfile。
-   如果要为源和目标镜像指定单独的 authfile，请使用
    `--source-authfile`{.literal} 和 `--dest-authfile`{.literal}
    选项，并将这些 authfiles 从主机挂载到容器中。
:::
::: itemizedlist
**其它资源**
-   [如何在容器文章中运行
    skopeo](https://www.redhat.com/sysadmin/how-run-skopeo-container){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_running-skopeo-buildah-and-podman-in-a-container_building-running-and-managing-containers.html#proc_copying-container-images-to-or-from-the-host_assembly_running-skopeo-buildah-and-podman-in-a-container}将容器镜像复制到主机或从主机复制 {.title}
:::
Skopeo、Buildah 和 Podman
共享相同的本地容器镜像存储。如果要将容器复制到主机容器存储或从主机容器存储中复制，则需要将其挂载到
Skopeo 容器中。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
到主机容器存储的路径在 root
用户(`/var/lib/containers/storage`{.literal})和非 root
用户(`$HOME/.local/share/containers/storage`{.literal})之间有所不同。
:::
::: itemizedlist
**先决条件**
-   已安装 `container-tools`{.literal} 模块。
    ``` literallayout
    # yum module install -y container-tools
    ```
:::
::: orderedlist
**流程**
1.  将 `registry.access.redhat.com/ubi8/ubi`{.literal}
    镜像复制到本地容器存储中：
    ``` literallayout
    $ podman run --privileged --rm -v $HOME/.local/share/containers/storage:/var/lib/containers/storage registry.redhat.io/rhel8/skopeo skopeo copy docker://registry.access.redhat.com/ubi8/ubi containers-storage:registry.access.redhat.com/ubi8/ubi
    ```
    ::: itemizedlist
    -   `privileged 选项`{.literal}
        禁用所有安全机制。红帽建议仅在可信环境中使用这个选项。
    -   为了避免禁用安全机制，请将镜像导出到 tarball
        或其它基于路径的镜像传输,并将其挂载到 Skopeo 容器中：
        ::: itemizedlist
        -   `$ podman save --format oci-archive -o oci.tar $IMAGE`{.literal}
        -   `$ podman run --rm -v oci.tar:/oci.tar registry.redhat.io/rhel8/skopeo copy oci-archive:/oci.tar $DESTINATION`{.literal}
        :::
    :::
2.  可选：列出本地存储中的镜像：
    ``` literallayout
    $ podman images
    REPOSITORY                               TAG     IMAGE ID      CREATED       SIZE
    registry.access.redhat.com/ubi8/ubi      latest  ecbc6f53bba0  8 weeks ago   211 MB
    ```
:::
::: itemizedlist
**其它资源**
-   [如何在容器文章中运行
    skopeo](https://www.redhat.com/sysadmin/how-run-skopeo-container){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_running-skopeo-buildah-and-podman-in-a-container_building-running-and-managing-containers.html#proc_running-buildah-in-a-container_assembly_running-skopeo-buildah-and-podman-in-a-container}在容器中运行 Buildah {.title}
:::
流程演示了如何在容器中运行 Buildah，并根据镜像创建可正常工作的容器。
::: itemizedlist
**先决条件**
-   已安装 `container-tools`{.literal} 模块。
    ``` literallayout
    # yum module install -y container-tools
    ```
:::
::: orderedlist
**流程**
1.  登录到 registry.redhat.io registry:
    ``` screen
    $ podman login registry.redhat.io
    Username: PI:EMAIL
    Password: ***********
    Login Succeeded!
    ```
2.  拉取并运行 `registry.redhat.io/rhel8/buildah`{.literal} 镜像：
    ``` literallayout
    # podman run --rm --device /dev/fuse -it registry.redhat.io/rhel8/buildah  /bin/bash
    ```
    ::: itemizedlist
    -   `--rm`{.literal} 选项会在容器退出后删除
        `registry.redhat.io/rhel8/buildah`{.literal} 镜像。