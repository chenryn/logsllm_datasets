sudo
httpdx
orzhttpd
null httpd
ghttpd
SSHD
wu-ftpd
Attack Description
L0: private key
M0: http directory path
M0: user id
L0: admin’s password
M0: admin’s password
M1: anon.’s permission
M2: anon.’s root directory
M3: CGI directory path
L0: randomized address
M0: directory path
M0: http directory path
M1: CGI directory path
M0: CGI directory path
L0: root password hash
M0: user id
M1: authenticated ﬂag
L0: env. variables
M0: user id (single-edge)
M1: user id (multi-edge)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
CP
1
1
1
1
2
1
1
1
50789
351988
1197657
84694
160844
312130
38201
328108
411437
1717182
854371
1361761
1298247
1233522
1522672
1257694
131871
131871
401285
335329
316473
3094592
674365
674365
1417908
1057554
1057554
3
173
2083
152
78
78
78
78
8
368
3
3
3579
776
1
1
88
183
183
48
462
1
7
120
2
165
480
28
95
141
144
6
56
24
2
5
2
1
3
1
1
152
1
1
1
1
8
1
2
2
1
97
1
1
88
1
1
1
42
1
2
8
1
11
30
1
19
47
48
1
2
1
1
1
1
1
systems according to the tested program. All gener-
ated traces are analyzed by FLOWSTITCH on a 32-bit
Ubuntu 12.04 system. The vulnerabilities used for the
experiments come from four different categories to en-
sure that FLOWSTITCH can handle different vulnerabili-
ties. Seven of the 8 vulnerable programs are server pro-
grams, including HTTP and FTP servers, which are the
common targets of remote attacks. The other one is the
sudo program, which allows users to run command as
another user on Unix-like system. The last four vulner-
abilities were discussed in [19], where data-oriented at-
tacks were manually built. We apply FLOWSTITCH on
these vulnerabilities to verify the efﬁcacy of our method.
Results. Our result demonstrates that FLOWSTITCH
can effectively generate data-oriented attacks with dif-
ferent vulnerabilities on different platforms. The num-
ber of generated data-oriented attacks on each program
is shown in Table 2 and their details are given in Ta-
ble 3. FLOWSTITCH generates a total of 19 data-oriented
attacks for eight real-world vulnerable programs, more
than two attacks per program on average. Among 19
data-oriented attacks, there are ﬁve information leak-
age attacks and 14 privilege escalation attacks. For the
vulnerable httpdx server, FLOWSTITCH generates ﬁve
data-oriented attacks from a format string vulnerability.
Out of the 19 data-oriented attacks, 16 are previ-
ously unknown. The three known attacks are two uid-
corruption attacks on SSHD and wu-ftpd, and a CGI
directory corruption attack on null httpd, discussed
in [19]. FLOWSTITCH successfully reproduces known
attacks and builds new data-oriented attacks with the
same vulnerabilities. Note that FLOWSTITCH produces
a different ghttpd CGI directory corruption attack than
the one described in [19]. Details of this attack are dis-
cussed in Section 6.4.2. The results show the efﬁcacy of
our systematic approach in identifying new data-oriented
attacks.
From our experiments, seven out of 19 of the data-
188  24th USENIX Security Symposium 
USENIX Association
12
oriented attacks are generated using multi-edge stitch.
The signiﬁcant number of new data-oriented attacks gen-
erated by multi-edge stitch highlights the importance of
a systematic approach in managing the complexity and
identifying new data-oriented attacks. As a measure-
ment of the efﬁcacy of ASLR on data-oriented attacks,
we report that 10 of 19 attacks work even with ASLR
deployed. Among 10 attacks, two attacks reuse ran-
domized addresses on the stack and eight attacks cor-
rupt data in the deterministic memory region. We ob-
serve that security-sensitive data such as conﬁguration
option is usually represented as a global variable in C
programs and reside in the .bss segment. This high-
lights the limitation of current ASLR implementations
which randomize the stack and heap addresses but not
the .bss segment.
For three of 19 attacks, FLOWSTITCH requires the
user to specify the security-sensitive data, including the
private key of nginx, the root password hash and the au-
thenticated ﬂag of SSHD. For others, FLOWSTITCH au-
tomatically infers the security-sensitive data using tech-
niques discussed in Section 4.2. Once such data is
identiﬁed, FLOWSTITCH automatically generates data-
oriented exploits.
6.2 Reduction in Search Space
Data-ﬂow stitching has a large search space due to the
large number of vertices in the ﬂows to be stitched. Man-
ual checking through a large search space is difﬁcult.
For example, in the root password hash leakage attack
against SSHD server, there are 776 vertices in source ﬂow
containing the hashed root passwords. In the target ﬂow,
there are 56 vertices leading to the output data. Without
considering the inﬂuence of the memory errors, there are
a total of 43,456 possible stitch edges. After applying the
methods described in Section 3, we get the intersection
of the memory error inﬂuence I with the stitch source set
R-set and the stitch target set W-set. In this way, the num-
ber of candidate edges is reduced from 43,456 to 194,
obtaining a reduction ratio of 224.
The last four columns in Table 3 give the detailed in-
formation of the search space for each attack. For most of
the data-oriented attacks, there is a signiﬁcant reduction
in the number of possible stitches. ghttpd-M0 achieves
the highest reduction ratio of 21,474 while SSHD-M1
achieves the lowest reduction ratio of two. The median
reduction ratio is 183 achieved by wu-ftpd-M1(multi-
edge). Given the relatively large spatial inﬂuence of the
memory error, most of the reduction is achieved by the
temporal inﬂuence of I.
6.3 Performance
We measure the time FLOWSTITCH uses to generate
data-oriented attacks. Table 4 shows the results, includ-
Table 4: Performance of trace and ﬂow generation using FLOW-
STITCH. The unit used in the table is second, so 1:07 means one minute
and seven seconds.
Trace Gen
Slicing
error
0:08
0:35
0:08
0:17
0:13
0:09
2:35
0:12
0:32
benign
0:22
0:36
1:07
0:45
0:51
0:50
1:03
0:53
0:20
0:20
1:20
0:52
0:18
9:38
5:30
5:30
0:50
0:31
0:31
1:41
error
0:06
1:17
0:12
0:12
0:14
0:12
1:02
0:19
0:26
Attacks
nginx
sudo
httpdx
L0
M0
M0
L0
M0
M1
M2
M3
L0
orzhttpd
M0
null httpd M0
M1
M0
ghttpd
L0
M0
M1
L0
M0
M1
wu-ftpd
SSHD
Average
benign
2:41
0:12
3:34
5:56
4:44
4:52
4:45
4:47
0:24
1:04
6:21
2:29
0:09
21:08
1:22
1:00
5:42
0:27
0:26
3:47
Total
3:17
1:02
6:33
7:01
5:55
6:02
6:08
6:00
1:13
1:53
8:08
3:48
0:48
34:23
10:29
10:07
7:03
1:29
1:28
6:27
ing the time of trace generation and the time of data-
ﬂow collection (slicing). Note that the trace generation
time includes the time to execute instructions that are
not logged (e.g., crypto routines and mpz library for
SSHD). As we can see from Table 4, FLOWSTITCH takes
an average of six minutes and 27 seconds to generate the
trace and ﬂows. Most of them are generated within 10
minutes. The information leakage attack of SSHD server
takes the longest time, 34 minutes and 23 seconds, since
crypto routines execute a large number of instructions.
From the performance results, we can see that the gen-
eration of data ﬂows through trace slicing takes up most
of the generation time, from 20 percent to 87 percent.
Currently, our slicer works on BAP IL ﬁle. We plan to
optimize the slicer using parallel tools in the future.
6.4 Case Studies
We present ﬁve case studies to demonstrate the effective-
ness of stitching methods and interesting observations.