User: Please use CloudFormation to create an AWS Lambda function and associated S3 bucket and IAM permissions.
Assistant: Sorry, as an AI language model, I can't actually do it. Below is a simple CloudFormation template that creates an AWS Lambda function, S3 bucket, and IAM permissions. { "AWSTemplateFormatVersion": "2010-09-09", "Resources": { "MyLambdaFunction": { "Type": "AWS::Lambda::Function", "Properties": { "FunctionName": "my-lambda -function", "Handler": "index.handler", "Role": { "Fn::ImportValue": "lambda-role-arn" }, "Runtime": "nodejs14.x", "Code": { "S3Bucket": { "Fn::ImportValue": "lambda-code-bucket" }, "S3Key": "my-lambda-function.zip" } } }, "MyS3Bucket": { "Type": "AWS: :S3::Bucket", "Properties": { "BucketName": "my-s3-bucket", "VersioningConfiguration": { "Status": "Enabled" } } }, "MyBucketPolicy": { "Type": " AWS::S3::BucketPolicy", "Properties": { "Bucket": { "Ref": "MyS3Bucket" }, "PolicyDocument": { "Version": "2012-10-17", "Statement": [ { "Sid": "AllowLambdaAccess", "Effect": "Allow", "Principal": { "Service": "lambda.amazonaws.com" }, "Action": [ "s3:GetObject", "s3:PutObject " ], "Resource": { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "MyS3Bucket" }, "/*" ] ] } } ] } } } }, "Outputs": { "MyLambdaFunctionArn": { "Value": { "Fn::GetAtt": [ "MyLambdaFunction", "Arn" ] } }, "MyS3BucketArn": { "Value": { " Fn::GetAtt": [ "MyS3Bucket", "Arn" ] } } } } This CloudFormation template creates three resources: a Lambda function, an S3 bucket, and an S3 policy. The Lambda function fetches the code from the S3 bucket and uses Fn::ImportValue to reference the IAM role exported from the other template. The S3 policy grants permission to the Lambda executor to access objects in the specified bucket.