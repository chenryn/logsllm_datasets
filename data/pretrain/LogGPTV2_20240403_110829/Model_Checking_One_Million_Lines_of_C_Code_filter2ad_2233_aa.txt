title:Model Checking One Million Lines of C Code
author:Hao Chen and
Drew Dean and
David A. Wagner
Analyzing and Comparing the Protection Quality of
Security Enhanced Operating Systems
Hong Chen
Ninghui Li
Ziqing Mao
Center for Education and Research in Information Assurance and Security
and Department of Computer Science, Purdue University
{chen131, ninghui, zmao}@cs.purdue.edu
Abstract
Host compromise is a serious computer security
problem today. To better protect hosts, several Manda-
tory Access Control systems, such as Security Enhanced
Linux (SELinux) and AppArmor, have been introduced.
In this paper we propose an approach to analyze and
compare the quality of protection offered by these dif-
ferent MAC systems. We introduce the notion of vul-
nerability surfaces under attack scenarios as the mea-
surement of protection quality, and implement a tool
called VulSAN for computing such vulnerability sur-
faces. In VulSAN, we encode security policies, system
states, and system rules using logic programs. Given an
attack scenario, VulSAN computes a host attack graph
and the vulnerability surface. We apply our approach
to compare SELinux and AppArmor policies in several
Linux distributions and discuss the results. Our tool can
also be used by Linux system administrators as a system
hardening tool. Because of its ability to analyze SELinux
as well as AppArmor policies, it can be used for most en-
terprise Linux distributions and home user distributions.
1
Introduction
Host compromise is one of the most serious computer
security problems today. A key reason why hosts can
be easily compromised is that the Discretionary Access
Control (DAC) mechanism in today’s operating systems
is vulnerable to Trojan horses and the exploitation of
buggy software. Recognizing this limitation of exist-
ing DAC mechanisms, in the past decade there have
been a number of efforts aiming at adding some form
of Mandatory Access Control (MAC) to Commercial-
Off-The-Shelf (COTS) operating systems. Examples in-
clude Low Water-Mark Access Control (LOMAC) [6,
7], Security Enhanced Linux (SELinux) [19], AppAr-
mor [5, 1], and Usable Mandatory Integrity Protection
(UMIP) [16]. Some of these systems have been widely
deployed. For example, SELinux is supported in a num-
ber of Linux distributions, including Fedora, Debian,
Gentoo, EnGarde and Ubuntu [3], and AppArmor is sup-
ported in Linux distributions including SUSE, PLD, Par-
dus Linux, Annvix, Ubuntu and Mandriva [2].
Given the existence of these protection systems, a
natural desire is to understand and compare the qual-
ity of protection (QoP) offered by them. A system ad-
ministrator would want to know the QoP offered by the
MAC system he is using. Note that by an MAC system,
we mean both the mechanism (e.g., SELinux or AppAr-
mor) and the speciﬁc policy being used in the system,
because the QoP is determined by both. More specif-
ically, it would be very useful for an administrator to
know: What kinds of attacks are prevented by the MAC
system my host is using? What does it take for an at-
tacker to penetrate the defense of the system, e.g., to in-
stall a rootkit on my host? Can the attacker leave a Tro-
jan horse program on my host such that when the pro-
gram is later accidentally executed by a user, my host is
taken over by the attacker? Would it be more secure if I
use a competing distribution which either has a different
MAC mechanism or or has different policy settings?
In this paper, we develop a tool called Vulnerability
Surface ANalyzer (VulSAN) for answering these ques-
tions. We analyze the QoP by measuring the vulnera-
bility surface for attack scenarios. An attack scenario is
deﬁned by an attack objective and the attacker’s initial
resources. For example, “remote to full control” is an
attack scenario in which a remote attacker wants to fully
control the system. Other attack scenarios can be “re-
mote to leaving a trojan”, “local to full control”, etc. A
vulnerability surface of a system is a list of minimal at-
tack paths. Each attack path consists of a set of programs
such that by compromising those programs the attack
scenario can be realized. Vulnerability surface is related
to attack surface [11] which is a concept in the Microsoft
Security Development Lifecycle (SDL). Attack surface
uses the resources that might be used to attack a sys-
tem to measure the attackability of the system (details
are discussed in Section 2). They are different in that
vulnerability surface provides potential multi-step attack
paths of a system while attack surface considers poten-
tial entrypoints of attacks. VulSAN computes the vulner-
ability surfaces for attack scenarios under SELinux and
AppArmor. To do this, VulSAN encodes the MAC pol-
icy, the DAC policy and the state of the host into Prolog
facts, and generates a host attack graph for each attack
scenario, from which it generates minimal attack paths
which constitute the vulnerability surface.
VulSAN can be used by Linux system administrators
as a system hardening tool. A system administrator can
use VulSAN to compute the host attack graphs for at-
tack scenarios that are of concern. By analyzing these
graphs, the administrator can try to harden the system by
tweaking the system and policy conﬁgurations. For ex-
ample, the administrator can disable some network dea-
mon programs, remove some unnecessary setuid-root
programs, or tweak the MAC (SELinux or AppArmor)
policies to better conﬁne these programs. After mak-
ing these changes, the system administrator can re-run
the analysis to see whether it achieves the desired objec-
tive. Because VulSAN uses intermediate representation
of the system state and policy, it is possible to make the
changes in the representation and to perform analysis,
before actually deploying the changes to the real system.
Because VulSAN can handle both SELinux and AppAr-
mor, which are the two MAC systems used by major
Linux distributions, it can be used for most enterprise
Linux distributions and home user distributions.
VulSAN can also be used to compare the QoP of poli-
cies between different systems. Such comparisons help
system administrators to select which Linux distribu-
tions to use. In addition, they also help system harden-
ing. If an administrator knows that another Linux distri-
bution with the same services does not have a particular
vulnerability path, then the administrator knows that it is
possible to remove such a path while providing the nec-
essary services, and can invest the time and effort to do
so.
We have applied VulSAN to analyze the QoP of sev-
eral Linux distributions with SELinux and AppArmor.
Comparing the default policies of SELinux and AppAr-
mor for the same Linux distribution (namely Ubuntu
8.04 Server Edition), we ﬁnd that AppArmor offers
signiﬁcantly smaller vulnerability surface, while the
SELinux policy with Ubuntu 8.04 offers only slightly
smaller vulnerability surface compared with the case
when no MAC is used. More speciﬁcally, when no MAC
is used, the system has seven length-1 attack paths in
the scenario when a remote attacker wants to install a
rootkit. They correspond to the seven network-facing
daemon programs running as root, namely apache2,
cupsd, nmbd, rpc.mountd, smbd, sshd, and vsftpd.
Among them, the SELinux policy conﬁnes only cupsd.
This shows that the often claimed strong protection of
SELinux is not realized, at least in some popular Linux
distributions. We also note policies in different distribu-
tions offer different levels of protection even when they
use the same mechanism. For example, the SELinux
policy in Fedora 8, which is a version of the targeted
policy, offers tighter protection than that in Ubuntu 8.04,
which is a version of the reference policy. We also
observe that Ubuntu 8.04 and SUSE Linux Enterprise
Server 10 expose different vulnerability surfaces when
they both use AppArmor. Also, one attack scenario that
neither SELinux nor AppArmor offers strong protection
is when a remote attacker leaves a malicious executable
program somewhere in the system and waits for it to be
accidentally executed by users, at which point the pro-
cess would not be conﬁned by the MAC system. This
attack is possible for two reasons. First, both SELinux
and AppArmor conﬁne only a subset of the known pro-
grams and leave any program not explicitly identiﬁed as
unconﬁned. Second, as neither SELinux nor AppArmor
performs information ﬂow tracking, the system cannot
tell a program left by a remote attacker from one origi-
nally in the system.
The rest of the paper is organized as follows: Sec-
tion 2 presents the background and related work. Sec-
tion 3 discusses our analysis approach. Section 4 talks
about the implementation of VulSAN. Section 5 presents
the results of comparing SELinux with AppArmor in
several Linux distributions. Section 6 concludes the pa-
per.
2 Background and Related Work
Security-Enhanced Linux [19] (SELinux) is a secu-
rity mechanism in Linux that has been developed to sup-
port a wide range of security policies. SELinux has been
integrated into Linux Kernel since 2.6. In SELinux, ev-
ery process has a domain and every object has a type.
Objects are categorized into object security classes, such
as ﬁles, folders, sockets, etc. A set of operations are de-
ﬁned over each object security class (e.g., read, write,
execute, lock, create, rename, etc for a ﬁle). A SELinux
policy deﬁnes processes of which domains can access
objects of which types with which operations. A policy
also deﬁnes how to determine the domain of a process
and how the domain changes when a process executes
another program.
AppArmor [1] is an access control system that con-
ﬁnes the access permissions on a per program basis. It
conﬁnes programs that are likely to be attacked, e.g.,
server programs that face network and setuid root pro-
grams. For every protected program, AppArmor deﬁnes
a program proﬁle. A proﬁle is a list of permitted ac-
cesses, including ﬁle accesses and capabilities. The pro-
ﬁles of all protected programs constitute an AppArmor
policy. If a program does not have a proﬁle, it is by de-
fault not conﬁned. If a program has a proﬁle, it only has
permissions speciﬁed in the proﬁle.
Previous approaches for analyzing SELinux security
policies include Gokyo [14, 13], SLAT [8], PAL [21],
APOL [24, 10], SELAC [25], NETRA [18], and
PALMS [9]. Gokyo [14, 13] identiﬁes a set of domains
and types as the implicit Trusted Computing Base (TCB)
of a SELinux policy. Integrity of the TCB holds if no
type in it can be written by a domain outside the TCB.
SLAT [8] veriﬁes if a SELinux policy satisﬁes certain
information ﬂow goals.
It answers questions such as:
Is it true that all information ﬂow paths in a system
from a starting security context to a ﬁnal security con-
text go through a series of speciﬁc steps? PAL [21] pro-
vides similar functionalities to SLAT. It differs in that
it is implemented in XSB, a logic programming sys-
tem. This enables PAL to handle other kinds of queries.
APOL [24] is a tool to analyze the relationships between
domains and types in a SELinux policy. In [10] the au-
thors augment APOL to ﬁnd paths from susceptible do-
mains to security sensitive domains. The selection of
susceptible and security sensitive domains is manually
done. The query language is less ﬂexible than SLAT or
PAL, but it provides a graphical user interface to display
the results. SELAC [] is a formal model to describe the
semantics of a SELinux policy. The authors develop an
algorithm based on SELAC to verify if a given subject
can access a given object in a given mode. NETRA [18]
is a another tool for analyzing explicit information ﬂow
relationships in access control conﬁgurations.
It has
been applied to analyze Windows XP and SELinux poli-
cies. PALMS [9] is a tool for analyzing SELinux MLS
policy, and was used to verify that the SELinux MLS ref-
erence policy satisﬁes the simple security property and
the *-property deﬁned by Bell and LaPadula [4].
Our work is different in the following ways. First,
VulSAN supports analyzing AppArmor in addition to
SELinux. Second, VulSAN utilizes the current system
state (such as which ﬁles exist in the system) as well as
DAC policies (such as which users can write to a ﬁle
according to the DAC permission bits) in addition to
the MAC policies. As shown in Section 5.2, consider-
ing DAC is necessary to obtain accurate analysis results.
Third, our goal, which is to compute the vulnerability
surface under different attack scenarios, is different from
that of existing tools. In particular we need to be con-
cerned with more than just providing a policy analysis