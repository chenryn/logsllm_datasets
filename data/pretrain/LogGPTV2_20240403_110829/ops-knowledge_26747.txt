User: In a tornado request handler if I have to call function foo() which doesn't affect what's returned to the user, it makes sense to return result to the user first and then call foo(). Is it possible to do this easily in tornado (or with some third-party package)?
Assistant: No it's not "easy" out-of-the-box. What you're referring to is "fire and forget". Even if you use a thread pool to farm out the request, that thread pool will belong to the main python process that belongs to Tornado. 
The best approach is a message queue. Something like Carrot. That way, suppose you have a page where users can execute to start generating a HUGE report, you can start it in a message queue and then finish the Tornado request and with some AJAX magic and other tricks (outside the scope of Tornado) you can sit back and wait till the message queue has finished it's job (which could technically be happening on a distributed server in a different physical location).