action with P (x) are indistinguishable.
An example is the following protocol for proving knowl-
edge of the discrete logarithm of x = hr mod p (where q
divides p − 1 and p, q are prime) originally due to Chaum et
al. [6]:
Protocol 1. Zero-knowledge proof of knowledge for dis-
crete logarithms
1. P picks σ ← (cid:1)q,
P −→ V : y = hσ mod p
2. V −→ P : z ← (cid:1)q
3. P −→ V : w = rz + σ mod q
4. V accepts if xzy = hw
The honest-veriﬁer simulator for this protocol ﬁrst selects
the values z, w ← (cid:1)q and sets y = hw/xz mod p, then out-
puts the conversation y, z, w. A prover can cheat in this
protocol only with very small probability, 1/q.
2.5 Secure Multiparty Sum
A secure multiparty addition protocol allows parties P1,
. . . , Pn, each with a private input Xi ∈ (cid:1)m, to compute
X = X1 + . . . + Xn in such a way that Pi, regardless of
its behavior, learns nothing about Xj , i (cid:4)= j, except what
can be derived from X. The following commonly-known
scheme implements secure multiparty addition: each party
Pi splits Xi into n random shares si,1, . . . , si,n such that
j si,j = Xi and sends share si,j to party j; later all parties
add every share that they have received and broadcast the
result. It is easy to see that the sum of all broadcasts equals
X1 + . . . + Xn, and that it is impossible for party j to learn
anything about Xi (for i (cid:4)= j).
For the rest of this paper, we use the following modiﬁ-
cation of the above scheme. The commitments help ensure
that all parties adhere to the protocol (e.g., parties shouldn’t
be able to cheat by sending inconsistent shares):
Protocol 2. Secure Multiparty Sum
1. Commitment Phase:
• Pi splits Xi ∈ (cid:1)q into n random shares si,1, ..., si,n
• Pi chooses ri,j ← (cid:1)q
• Pi computes commitments Ci,j = Cri,j (si,j)
• Pi broadcasts {Ci,j : 1 ≤ j ≤ n}
2. Sharing Phase:
• For each j (cid:4)= i,
Pi −→ Pj
: (ri,j, si,j).
• Pj checks that Cri,j (si,j) = Ci,j
3. Broadcast Phase:
• Pi computes the values Ri = j rj,i mod q and
Si = j sj,i mod q
• Pi broadcasts (Ri, Si)
• All players check that CRi (Si) = 	j Cj,i mod p
4. Result:
Each player computes the result as X = i Si mod q,
computes R = i Ri mod q and checks that CR(X) =
	i,j Ci,j mod p
Note that as long as every party transmits something, the
broadcast does not need to be reliable (i.e. it does not mat-
ter if an adversary conspires to make two diﬀerent players
get diﬀerent values); because of the use of commitments, ei-
ther some value fails a check for some honest player, or the
ﬁnal result is identical to another instance of the protocol
where the adversary does not send diﬀerent messages (a rig-
orous proof of this fact appears in the Appendix). This pro-
tocol is susceptible to only one kind of disruptive attack: se-
lective non-participation, in which an adversary either does
not send some protocol messages to a participant or claims
that it has not received any message from that participant.
As the protocol is stated, there is no way to tell whether
the sender failed to send a message or the receiver is falsely
claiming that it didn’t receive it. Selective non-participation
will be dealt with in later sections.
Secure multiparty addition and anonymous communica-
tion are related (an observation which seems to be due to
David Chaum and forms the basis of DC-Nets), in that a
protocol for secure multiparty addition can be used to per-
form anonymous broadcast. Assume that party j wants to
broadcast the message Xj (cid:4)= 0 anonymously, while the other
parties do not wish to broadcast anything; then by perform-
ing a multiparty addition with Xi = 0 (for i (cid:4)= j), all the
parties learn X1 + . . . + Xn = Xj , but nobody learns where
Xj came from. If more than one party tries to transmit at
the same time, however, a collision occurs and the parties
have to try again. For this reason DC-Nets use a com-
plicated reservation mechanism to keep the adversary from
jamming the channel: jamming can occur when the adver-
sary controls a participant and simply sends a message at
every time step. Our protocol is also based on secure mul-
tiparty sum computations, but one of the novel aspects of
our work is the relatively simple mechanism that we use to
prevent the adversary from jamming the channel.
3. DEFINITIONS
An anonymous communication protocol for message space
M is a computation among n parties P1, . . . , Pn, where
each Pi starts with a private input (msgi, pi) ∈ (M × [n]) ∪
{(nil, nil)}, and each party terminates with a private out-
put from M∗
. To communicate, time will be split into
rounds and the protocol will be run at each round. Intu-
itively, at the end of a round each Pi should learn the set of
messages addressed to him ({msgj : pj = i}), but not the
identity of the senders.
We let H ⊂ {P1, . . . , Pn} denote the set of honest parties.
We denote by P(P1(msg1, p1), . . . , Pn(msgn, pn)) the ran-
dom variable distributed according to the adversary’s view
of the protocol P when each Pi has input (msgi, pi). We de-
note by P(Pi(msgi, pi),∗) the adversary’s view of P when Pi
has input (msgi, pi) and the other inputs are set arbitrarily.
3.1 Full Anonymity
Deﬁnition 2. A protocol P is sender anonymous if for
every pair Pi, Pj ∈ H, and every pair (msg, p) ∈ (M ×
[n])∪{(nil, nil)}, P(Pi(msg, p),∗) and P(Pj(msg, p),∗) are
computationally indistinguishable.
That is, a protocol is sender anonymous if the adversary
may not distinguish between any of the honest parties as
the sender of a message, regardless of who the receiver is;
i.e., the adversary “gains no information” about the sender.
Deﬁnition 3. A protocol P is receiver anonymous if for
(cid:2) ∈ H, for every msg ∈ M and every Pi, Pj ∈ H,
(msg, Pj ),∗) are computation-
(cid:2)
(msg, Pi),∗) and P(P
every P
P(P
ally indistinguishable.
(cid:2)
According to the previous deﬁnitions, the trivial protocol
in which no party transmits anything is both sender and
receiver anonymous. Non-triviality is captured by Deﬁnition
6 below.
Assuming that the protocol is non-trivial (i.e., useful),
sender anonymity requires every honest party, even if they
have no message as an input, to send at least one protocol
message per anonymous message delivered.Thus any proto-
col which is sender anonymous has a worst-case lower bound
of n protocol messages per input message, since in the worst
case, all parties but one have input (nil, nil). If n is large,
this lower bound makes it unlikely that a system providing
full anonymity can be ﬁelded in practice.
3.2 k-Anonymity
Deﬁnition 4. A protocol P is sender k-anonymous if it
induces a partition {V1, . . . , Vl} of H such that:
1. |Vs| ≥ k for all 1 ≤ s ≤ l; and
2. For every 1 ≤ s ≤ l, for all Pi, Pj ∈ Vs, for every
(msg, p) ∈ (M × [n]) ∪ {(nil, nil)}, P(Pi(msg, p),∗)
and P(Pj(msg, p),∗) are computationally indistinguish-
able.
That is, each honest party’s messages are indistinguishable
from those sent by at least k − 1 other honest parties.
Deﬁnition 5. A protocol P is receiver k-anonymous if it
induces a partition {V1, . . . , Vl} of H such that:
1. |Vs| ≥ k for all 1 ≤ s ≤ l; and
2. For every 1 ≤ s ≤ l, for all Pi, Pj ∈ Vs, for every P
H, msg ∈ M: P(P
are computationally indistinguishable.
(msg, Pi),∗) and P(P
(cid:2)
(cid:2) ∈
(msg, Pj ),∗)
(cid:2)
That is, each message sent to an honest party has at least k
indistinguishable recipients.
3.3 Robustness
In addition to the anonymity guarantees, we will require
that the communication protocol be robust against an ad-
versary trying to render it useless. We capture this intuition
with the notion of robustness.
Deﬁnition 6. Let α ∈ [0, 1]. A protocol P is α-robust if in
each round, the protocol satisﬁes at least one of the following
conditions:
prime that divides p − 1 (p is also a prime). We identify
(msgi, gi) = (nil, nil), indicating “no message this round,”
with 0 ∈ (cid:1)q.
Fairness: For all P
(cid:2)
(cid:2) ∈ H and for all (msg, i) ∈ (M × [n]),
has as input (msg, i), the probability (over the
) that party Pi receives msg is at
(cid:2)
if P
randomness of P
least α
Detection: The set S of parties who deviate from P is
non-empty and there is a single Pi ∈ S such that for
all Pj ∈ H, Pj outputs Pi.
That is, for every round, either the protocol was fair, or an
adversarially controlled party was exposed.
4. THE PROTOCOL
Our solution to the k-anonymous message transmission
problem is similar to Chaum’s [4] DC-Nets but features
two important innovations.
First, we partition the n parties into smaller groups of size
M = O(k) such that with high probability k members of
each group are honest. Each group performs essentially the
multiparty sum protocol described in Section 2, where the
input Xi is of the form (msg, g), a pair describing the mes-
sage msg to be transmitted and the group g of the receiver.
This guarantees receiver k-anonymity as well as sender k-
anonymity, because sending to one member of group g is
identical to sending to any other member of g, and there are
always k honest participants in each group.
Second, each group runs 2M copies of the multiparty sum
protocol in parallel, restricting each party to transmit in
at most one parallel copy, so as to provide fairness. We
give a protocol which allows the detection of at least one
non-conforming party in each round where access to this
shared channel was not fair. Since each group has only O(k)
non-conforming parties, an adversary can only cause O(k)
protocol failures in each group, and no protocol failure com-
promises the anonymity of any honest party. In comparison,
previous solutions built around DC-Nets may involve let-
ting a protocol failure go undetected or compromising the
anonymity of a message.
4.1 Description
The protocol will be described in steps for ease of ex-
position. The ﬁrst, Protocol 3, will not be secure against
non-participation.
4.1.1 Transmission
Protocol 3. k-AMT
Precondition: Assume that the n parties are partitioned
into groups of size M , with each group having at least k
honest participants (in Section 5 we discuss how this precon-
dition is met). Below are the instructions to be performed
by each group individually. For notational simplicity, we de-
note the parties in the current group by P1, . . . , PM , and the
public encryption keys of these parties by P K1, . . . , P KM .
“Broadcast” means to send to every other member of the
group.
Input: Each party Pi in the group has input gi, the group
(msgi, gi)
the receiver belongs to, and msgi, a message.
will be interpreted as an element of (cid:1)q, where q is a large
1. Commitment Phase:
and Xi[t] = 0 for t (cid:4)= l ∈ [2M ]
. . . , si,M [t] for t ∈ [2M ]
• Pi chooses l ← [2M ] and sets Xi[l] = (msgi, gi)
• Pi splits Xi[t] ∈ (cid:1)q into M random shares si,1[t],
• Pi chooses ri,j[t] ← (cid:1)q for all j ∈ [M ], t ∈ [2M ]
• Pi computes commitments Ci,j[t] = Cri,j [t](si,j[t])
• Pi broadcasts {Ci,j[t] : j ∈ [M ], t ∈ [2M ]}
2. Sharing Phase:
• For each j (cid:4)= i,
: {(ri,j[t], si,j[t]) : t ∈ [2M ]}
Pi −→ Pj
• Pj checks that Cri,j [t](si,j[t]) = Ci,j[t]
3. Broadcast (only within the group) Phase:
• Pi computes the values Ri[t] = j rj,i[t] mod q
and Si[t] = j sj,i[t] mod q
• Pi broadcasts {(Ri[t], Si[t]) : t ∈ [2M ]}
• All players check that CRi[t](Si[t]) = 	j Cj,i[t]
mod p
4. Result:
Each player computes the result as X[t] = i Si[t] mod
q, computes R[t] = i Ri[t] mod q and checks that
CR[t](X[t]) = 	i,j Ci,j[t] mod p
5. Transmission Phase:
For each X[t] (cid:4)= 0, each Pi interprets X[t] as a pair
(Msg[t], G[t]) and sends Msg[t] to every member of G[t]
4.1.2 Fairness
Suppose at the conclusion of the transmission phase, at
most M of the 2M values X[t] were non-zero. Then this
execution was fair: each Pi had probability at least 1/2,
over its own choices, of successfully transmitting msgi. On
the other hand, if more than M of the X[t] were non-zero,
then at least one Pi had more than one Xi[t] (cid:4)= 0. We now
describe an honest veriﬁer statistical zero-knowledge proof
that allows each honest party to prove that they set at most
one Xi[t] to a non-zero value, assuming it is hard to compute
logg(h) (this allows the honest players to identify at least one
party Pi with more than one Xi[t] not equal to zero).
Informally, this protocol uses the well-known “cut-and-
choose” technique: player Pi prepares new commitments
(cid:2)
C
i[t] to the values Xi[t] and randomly permutes them. Then
the veriﬁer may choose either to have Pi open 2M − 1 of
(cid:2)
the (permuted) C
i[t] values to zero, or to have Pi reveal the
permutation and prove (in zero-knowledge) that he can open
i[t] and Ci[t] (for each t ∈ [2M ]) to the
(cid:2)
the commitments C
same value.
Protocol 4. Zero-knowledge proof of fairness
1. Pi chooses r
permutation on {1, . . . , 2M}). Deﬁne
(cid:2)
[t] ← (cid:1)q, t ∈ [2M ], and π ← (cid:2)2M (a
ρi[t] = (cid:2)
ri,j[t] ,
j
Ci[t] = (cid:3)
Ci,j[t] mod p = Cρi[t](Xi[t]) ,
j
C
[t] mod q ,
(cid:2)
(cid:2)
ρ