Service Oriented
Architectures and Semantic
Web Processes
Jorge Cardoso1, Francisco Curbera2, Amit Sheth3
1University of Madeira (Portugal)
2IBM T.J. Watson Research Center (USA)
3 LSDIS Lab, University of Georgia and Semagix, Inc (USA)
2
Service Oriented Architectures
and Web Services
Semantic Web Processes
2
3
Semantic Web Processes
Part
3
Service Oriented
Architectures and Web
Services
5
Overview
IT for a new business model
Service Oriented Architectures (SOAs).
Web services as an XML based instantiation
of SOA.
Protocols.
Metadata.
Discovery.
Composition.
Summary.
5
6
A New Business Environment
Business outsource every non-essential function.
Concentrate on core function and values.
Vertically integrated enterprises are being broken apart
Replaced by heavily networked ones.
Applications that used to be internal are now provided by outside
parties.
Corporate boundaries become fuzzier.
Does today’s IT models support the new business environment?
IT is too centered on IT!
When enterprises where islands this was sort of OK.
Today it is vital to adapt the computing model to the business
interaction model.
6
7
Enterprises as IT Islands
Value added networks
and proprietary protocols
support most B2B
interactions
Ad-hoc bridges support
interorganizational
interactions.
Most application
interactions take place
inside the enterprise.
Most applications belong
to a single administrative
domain.
7
8
Fully Networked Enterprises
Web based interactions
become pervasive, based
on standard protocols
The frequency of external
interactions and their
reach inside the
Internal applications
enterprise increases
seamlessly reach out of
dramatically.
the enterprise.
Interacting applications
naturally belong to
multiple administrative
domains.
8
Fully Networked Business 9
Interactions
The distinction between
internal and external
applications and providers
looses importance
Many potential providers
can be found for each
required function.
9
10
IT for the New Enterprise:
Business Components
Need to raise the level of IT abstractions.
Concentrate on business function and requirements.
Need to encapsulate business function to make it available to partners:
service components.
Different level granularity – coarse grained business services vs. fine
grained objects.
Services must be defined by explicit contracts to allow independent
party access.
Consequence is automatic binding.
Core concern of business is to integrate business processes and
functions.
Business components are integrated creating service compositions.
New value is created through integration/composition.
New components are recursively created.
10
11
Business Interactions
Business interact over standard protocols.
Businesses interact as peers:
Interactions are not client-server.
They are “conversational” in nature: asynchronous, stateful,
bidirectional.
Business interactions are often multi-party interactions
Business process integration model is intrinsically multi-party.
Distributed multi-party interactions are a cornerstone of
advanced enterprise integration:
Making distributed computing truly distributed.
11
12
What About The SOA
Triangle?
Standard protocols augment the
pool of technically compatible
services.
Explicit contracts allow automatic
discovery.
Central registries build on
registered contracts extend the
reach of the enterprise both as
provider and consumer of
business services.
12
13
Traditional Middleware
Distributed object systems
Based on client-server
paradigm.
Heavily asymmetric
 Client
JNDI
interaction model.
Biased towards
synchronous protocols.
Assigns public interfaces to
Server
network accessible objects.
Name=A?
A
Supports “name-oriented”
object discovery.
Client Client
13
14
Service Oriented Middleware
Service interactions
Peer to peer by nature.
Symmetric interaction Service
model. Registry D
Mixes synchronous and
asynchronous protocols.
Assigns public contracts Server
QoS=A/B?
A
to network accessible Iface=I
etc…
objects.
Service Service
B C
Supports capability
based service discovery.
14
Coupling Between 15
Applications
Interacting applications are
bound by the set of
assumptions each one
Explicit contract
makes about the other:
What message formats can
be sent/received
Constraints on how content
of these messages
Sequencing information.
Required QoS
characteristics of the
Implicit contract
interaction.
15
16
Tight and loose binding
Tight coupling leads to
monolithic and brittle
distributed applications.
Explicit contract
Even trivial changes in one
component lead to
catastrophic breaks in
function.
Small changes in one
application require
matching changes in
partner applications.
Lack of componentization
and explicit contracts.
Broken implicit contract
16
17
A Plan for Building a SOA
Requirement #1: Interaction protocols must be standardized.
Need to ensure the widest interoperability among unrelated institutions.
Requirement #2: Make all contracts explicit.
Explicit contracts define what may be changed in an application without
breaking the interaction.
It is hard or impossible to make all assumptions explicit, but the more the
better.
Requirement #2 : Standardize contract language(s) and formats.
Standard metadata is the basis of interoperable contract selection and
execution.
Requirement #3: Allow for points of variability in the contract.
Dynamic adaptation on variability points.
Increases the number of possible interactions supported.
Requirement #4: Provide native composition models and runtimes.
17
Web Services As a SOA
SOA and Web Services
Where Are We on Web 19
Services?
BBPPEELL44WWSS CCoommppoossiittiioonn
WWSSDDLL,, WWSS--PPoolliiccyy,, UUDDDDII,, IInnssppeeccttiioonn DDeessccrriippttiioonn
RReelliiaabbllee QQuuaalliittyy
SSeeccuurriittyy TTrraannssaaccttiioonnss
MMeessssaaggiinngg ooff SSeerrvviiccee
SSOOAAPP ((LLooggiiccaall MMeessssaaggiinngg))
Other protocols
IInntteerraaccttiioonn
Other services
XXMMLL,, EEnnccooddiinngg
19
Protocols
SOA and Web services
21
Protocols
Provides a common set of universally supported
interaction protocols.
A basic messaging layer
SOAP
Easily extensible, allows QoS protocols to be defined on
top.
Some basic QoS protocols:
Basic requirements of business interactions.
Provide guarantees
Message Reliability, WS-ReliableMessaging
Coordination and transactional interactions.
Message integrity, confidentiality 21
22
SOAP (v1.1)
A lightweight XML-based mechanism for exchanging structured
information between peers in a distributed environment.
A transport-independent messaging model.
Transport bindings for HTTP
An encoding model for a type system, and an RPC convention: a
link to “legacy middleware”.
Built around a standard message format:
Envelope
Headers
Body
Possibly attachments.
22
23
SOAP Messaging
Service Requestor Service Provider
Application Application
web service
1 4 3 2
SOAP Middleware SOAP Middleware
Network Protocol Network Protocol
Response
Request
(service invocation)
23
24
SOAP over HTTP
POST /StockQuote HTTP/1.1
Host: www.stockquoteserver.com
Content-Type: text/xml; charset="utf-8"
Content-Length: nnnn
SOAPAction: "Some-URI"
02/06/01
…
24
25
SOAP Headers
Headers are managed and consumed by the Web services
middleware infrastructure.
Headers support middleware protocols such as security,
transactions, reliability, provisioning, etc.
Extensible nature allows message to endowed with be an
extensible set of QoS protocols.
Header attributes
 actor
Indicates the intended recipient of the header
 http://schemas.xmlsoap.org/soap/actor/next
 mustUnderstand
 encodingStyle
Identifies serialization rules
25
26
SOAP Body and Attachments
Body: belongs and is processed by the application
level.
Is the only part that should be visible by the application
logic.
Business modeling is the modeling deals with what goes in
the body and how it is processed and exchanges.
A separation that shows up in WSDL, BPEL4WS as well.
Attachments: Not all data can be conveniently
placed within an XML document
SOAP Messages with Attachments: How to carry a SOAP
envelope within a MIME Multipart/Related structure
SOAP envelope must be the root part
26
 Type is text/xml
 Uses href attribute to reference parts
27
SOAP Status
SOAP 1.2/XML Protocol is now a W3C
Recommendation.
http://www.w3.org/TR/soap/
SOAP 1.1 is still (and will be for a while) what
is being deployed.
http://www.w3.org/TR/2000/NOTE-SOAP-
20000508/
27
28
WS-Security
for: 
Zoe
authentication, 
confidentiality,
…
Protocols for exchanging 
DJbchm5gK...
security tokens and
establishing trust
relationships built on top.
and identity propagation /
mapping in multi-party 
communication
28
29
WS Protocols - Summary
SOAP defines a standard messaging model in which
transport, service middleware and business
concerns are clearly separated.
Standardized QoS protocols ensure universal “on-
the-wire” interoperability among businesses,
applications.
QoS Protocols build on SOAP header extensibility to
augment business exchanges with QoS properties.
29
Metadata
SOA and Web services
31
Metadata
WSDL: Functional descriptions.
WS-Policy: QoS
Points of variability: dynamic infrastructure.
31
32
What is WSDL
An extensible, platform independent XML language for
“describing” services.
Provides functional description of Web services:
IDL description
Access protocol and deployment details
All of the functional information needed to programmatically
access a service, contained within a machine-readable format
Does not include
QoS
Taxonomies
Business information
WSDL is a component definition language for Web service
component
32
33
WSDL Description Structure
 …
 …
Abstract/
Business
 …
 …
Deployment
33
34
WSDL Parts At a Glance
part types
abstract interface
portType
(abstract)
(concrete)
operation
mes(saabgsetract)
message
concrete implementation
binding
(concrete)
(concrete)
operation
mes(scoangcerete)
message
made concrete by
service concrete endpoint
port 34
contains one or more
35
WSDL in SOA
1. Allow industries to define standardized service interfaces.
 Functional contract definition.
2. As an extended IDL: base for tools generating compliant
client proxy and server stub
 Tool level interoperability.
3. Allowing advertisement of service descriptions,
 enables dynamic discovery of compatible services and
dynamic binding to the actual service provider
 Works within registries and with discovery protocols.
4. As a normalized description of internally heterogeneous
services
35
36
WSDL Status
WSDL 1.1 was submitted to the W3C on February
2001.
http://www.w3.org/TR/WSDL
WSDL 2.0 is now being defined by the WS
Descriptions working group at W3C.
Last draft (June 2002) available at
http://www.w3.org/2002/ws/desc/
36
37
WS-PolicyFramework
Complements functional description of services with
QoS behaviors.
General framework for declaratively asserting how a
service may be accessed:
Requirements
Constraints
Capabilities
WS-Policy provides a general framework in which
arbitrary domain specific “assertions” are used.
Security
Transactions
Reliable messaging
37
38
Policy Expressions
001 
002 
003 
004 
005 wsse:Kerberosv5TGT
006 
007 
008 
009 
010 
011 
012 
013 wsse:X509v3
014 
015 
016 
017 
018 
019 
020  38
39
Policy Expressions
Three generic policy operators allow combining
assertions into groups, options:
Usage attribute allows modification of standard
meaning of assertion:
Usage=“Rejected” prevents requesters from following
certain behaviors (“do not log messages!”).
Policies can be names so they can be referenced