的便捷性。
Go语言将数据类型分为四类：基础类型、复合类型、引用类型和接口类型。本章介绍基础类
型，包括：数字、字符串和布尔型。复合数据类型——数组（§4.1）和结构体（§4.2）——是
通过组合简单类型，来表达更加复杂的数据结构。引用类型包括指针（§2.3.2）、切片
（§4.2)）字典（§4.3）、函数（§5）、通道（§8），虽然数据种类很多，但它们都是对程序
中一个变量或状态的间接引用。这意味着对任一引用类型数据的修改都会影响所有该引用的
拷贝。我们将在第7章介绍接口类型。
基础数据类型 82
gopl
3.1. 整型
Go语言的数值类型包括几种不同大小的整数、浮点数和复数。每种数值类型都决定了对应的
大小范围和是否支持正负符号。让我们先从整数类型开始介绍。
Go语言同时提供了有符号和无符号类型的整数运算。这里有int8、int16、int32和int64四种截
然不同大小的有符号整数类型，分别对应8、16、32、64bit大小的有符号整数，与此对应的
是uint8、uint16、uint32和uint64四种无符号整数类型。
这里还有两种一般对应特定CPU平台机器字大小的有符号和无符号整数int和uint；其中int是应
用最广泛的数值类型。这两种类型都有同样的大小，32或64bit，但是我们不能对此做任何的
假设；因为不同的编译器即使在相同的硬件平台上可能产生不同的大小。
Unicode字符rune类型是和int32等价的类型，通常用于表示一个Unicode码点。这两个名称可
以互换使用。同样byte也是uint8类型的等价类型，byte类型一般用于强调数值是一个原始的
数据而不是一个小的整数。
最后，还有一种无符号的整数类型uintptr，没有指定具体的bit大小但是足以容纳指针。uintptr
类型只有在底层编程时才需要，特别是Go语言和C语言函数库或操作系统接口相交互的地
方。我们将在第十三章的unsafe包相关部分看到类似的例子。
不管它们的具体大小，int、uint和uintptr是不同类型的兄弟类型。其中int和int32也是不同的类
型，即使int的大小也是32bit，在需要将int当作int32类型的地方需要一个显式的类型转换操
作，反之亦然。
其中有符号整数采用2的补码形式表示，也就是最高bit位用来表示符号位，一个n-bit的有符号
数的值域是从$-2^{n-1}$到$2^{n-1}-1$。无符号整数的所有bit位都用于表示非负数，值域是0
到$2^n-1$。例如，int8类型整数的值域是从-128到127，而uint8类型整数的值域是从0到
255。
下面是Go语言中关于算术运算、逻辑运算和比较运算的二元运算符，它们按照先级递减的顺
序的排列：
* / % > & &^
+ - | ^
== !=  >=
&&
||
二元运算符有五种优先级。在同一个优先级，使用左优先结合规则，但是使用括号可以明确
优先顺序，使用括号也可以用于提升优先级，例如 。
mask & (1  大于
>= 大于等于
事实上，布尔型、数字类型和字符串等基本类型都是可比较的，也就是说两个相同类型的值
可以用==和!=进行比较。此外，整数、浮点数和字符串可以根据比较结果排序。许多其它类
型的值可能是不可比较的，因此也就可能是不可排序的。对于我们遇到的每种类型，我们需
要保证规则的一致性。
这里是一元的加法和减法运算符：
+ 一元加法 (无效果)
- 负数
对于整数，+x是0+x的简写，-x则是0-x的简写；对于浮点数和复数，+x就是x，-x则是x 的负
数。
Go语言还提供了以下的bit位操作运算符，前面4个操作运算符并不区分是有符号还是无符号
数：
整型 84
gopl
& 位运算 AND
| 位运算 OR
^ 位运算 XOR
&^ 位清空 (AND NOT)
> 右移
位操作运算符 作为二元运算符时是按位异或（XOR），当用作一元运算符时表示按位取
^
反；也就是说，它返回一个每个bit位都取反的数。位操作运算符 用于按位置零（AND
&^
NOT）：如果对应y中bit位为1的话, 表达式 结果z的对应的bit位为0，否则z对应的
z = x &^ y
bit位等于x相应的bit位的值。
下面的代码演示了如何使用位操作解释uint8类型值的8个独立的bit位。它使用了Printf函数
的%b参数打印二进制格式的数字；其中%08b中08表示打印至少8个字符宽度，不足的前缀部
分用0填充。
var x uint8 = 1>1) // "00010001", the set {0, 4}
（6.5节给出了一个可以远大于一个字节的整数集的实现。）
在 和 移位运算中，决定了移位操作bit数部分必须是无符号数；被操作的x数可以
x>n
是有符号或无符号数。算术上，一个 左移运算等价于乘以$2^n$，一个 右移运算
x>n
等价于除以$2^n$。
左移运算用零填充右边空缺的bit位，无符号数的右移运算也是用0填充左边空缺的bit位，但是
有符号数的右移运算会用符号位的值填充左边空缺的bit位。因为这个原因，最好用无符号运
算，这样你可以将整数完全当作一个bit位模式处理。
整型 85
gopl
尽管Go语言提供了无符号数和运算，即使数值本身不可能出现负数我们还是倾向于使用有符
号的int类型，就像数组的长度那样，虽然使用uint无符号类型似乎是一个更合理的选择。事实
上，内置的len函数返回一个有符号的int，我们可以像下面例子那样处理逆序循环。
medals := []string{"gold", "silver", "bronze"}
for i := len(medals) - 1; i >= 0; i-- {
fmt.Println(medals[i]) // "bronze", "silver", "gold"
}
另一个选择对于上面的例子来说将是灾难性的。如果len函数返回一个无符号数，那么i也将是
无符号的uint类型，然后条件 则永远为真。在三次迭代之后，也就是 时，i--语
i >= 0 i == 0
句将不会产生-1，而是变成一个uint类型的最大值（可能是$2^64-1$），然后medals[i]表达式
将发生运行时panic异常（§5.9），也就是试图访问一个slice范围以外的元素。
出于这个原因，无符号数往往只有在位运算或其它特殊的运算场景才会使用，就像bit集合、
分析二进制文件格式或者是哈希和加密操作等。它们通常并不用于仅仅是表达非负数量的场
合。
一般来说，需要一个显式的转换将一个值从一种类型转化位另一种类型，并且算术和逻辑运
算的二元操作中必须是相同的类型。虽然这偶尔会导致需要很长的表达式，但是它消除了所
有和类型相关的问题，而且也使得程序容易理解。
在很多场景，会遇到类似下面的代码通用的错误：
var apples int32 = 1
var oranges int16 = 2
var compote int = apples + oranges // compile error
当尝试编译这三个语句时，将产生一个错误信息：
invalid operation: apples + oranges (mismatched types int32 and int16)
这种类型不匹配的问题可以有几种不同的方法修复，最常见方法是将它们都显式转型为一个
常见类型：
var compote = int(apples) + int(oranges)
如2.5节所述，对于每种类型T，如果转换允许的话，类型转换操作T(x)将x转换为T类型。许多
整数之间的相互转换并不会改变数值；它们只是告诉编译器如何解释这个值。但是对于将一
个大尺寸的整数类型转为一个小尺寸的整数类型，或者是将一个浮点数转为整数，可能会改
变数值或丢失精度：
整型 86
gopl
f := 3.141 // a float64
i := int(f)
fmt.Println(f, i) // "3.141 3"
f = 1.99
fmt.Println(int(f)) // "1"
浮点数到整数的转换将丢失任何小数部分，然后向数轴零方向截断。你应该避免对可能会超
出目标类型表示范围的数值类型转换，因为截断的行为可能依赖于具体的实现：
f := 1e100 // a float64
i := int(f) // 结果依赖于具体实现
任何大小的整数字面值都可以用以0开始的八进制格式书写，例如0666；或用以0x或0X开头
的十六进制格式书写，例如0xdeadbeef。十六进制数字可以用大写或小写字母。如今八进制
数据通常用于POSIX操作系统上的文件访问权限标志，十六进制数字则更强调数字值的bit位
模式。
当使用fmt包打印一个数值时，我们可以用%d、%o或%x参数控制输出的进制格式，就像下面
的例子：
o := 0666
fmt.Printf("%d %[1]o %#[1]o\n", o) // "438 666 0666"
x := int64(0xdeadbeef)
fmt.Printf("%d %[1]x %#[1]x %#[1]X\n", x)
// Output:
// 3735928559 deadbeef 0xdeadbeef 0XDEADBEEF
请注意fmt的两个使用技巧。通常Printf格式化字符串包含多个%参数时将会包含对应相同数量
的额外操作数，但是%之后的 副词告诉Printf函数再次使用第一个操作数。第二，%后
[1]
的 副词告诉Printf在用%o、%x或%X输出时生成0、0x或0X前缀。
#
字符面值通过一对单引号直接包含对应字符。最简单的例子是ASCII中类似'a'写法的字符面
值，但是我们也可以通过转义的数值来表示任意的Unicode码点对应的字符，马上将会看到这
样的例子。
字符使用 参数打印，或者是用 参数打印带单引号的字符：
%c %q
ascii := 'a'
unicode := '国'
newline := '\n'
fmt.Printf("%d %[1]c %[1]q\n", ascii) // "97 a 'a'"
fmt.Printf("%d %[1]c %[1]q\n", unicode) // "22269 国 '国'"
fmt.Printf("%d %[1]q\n", newline) // "10 '\n'"
整型 87
gopl
整型 88
gopl
3.2. 浮点数
Go语言提供了两种精度的浮点数，float32和float64。它们的算术规范由IEEE754浮点数国际
标准定义，该浮点数规范被所有现代的CPU支持。
这些浮点数类型的取值范围可以从很微小到很巨大。浮点数的范围极限值可以在math包找
到。常量math.MaxFloat32表示float32能表示的最大数值，大约是 3.4e38；对应的
math.MaxFloat64常量大约是1.8e308。它们分别能表示的最小值近似为1.4e-45和4.9e-324。
一个float32类型的浮点数可以提供大约6个十进制数的精度，而float64则可以提供约15个十进
制数的精度；通常应该优先使用float64类型，因为float32类型的累计计算误差很容易扩散，
并且float32能精确表示的正整数并不是很大（译注：因为float32的有效bit位只有23个，其它
的bit位用于指数和符号；当整数大于23bit能表达的范围时，float32的表示将出现误差）：
var f float32 = 16777216 // 1 << 24
fmt.Println(f == f+1) // "true"!
浮点数的字面值可以直接写小数部分，像这样：
const e = 2.71828 // (approximately)
小数点前面或后面的数字都可能被省略（例如.707或1.）。很小或很大的数最好用科学计数法
书写，通过e或E来指定指数部分：
const Avogadro = 6.02214129e23 // 阿伏伽德罗常数
const Planck = 6.62606957e-34 // 普朗克常数
用Printf函数的%g参数打印浮点数，将采用更紧凑的表示形式打印，并提供足够的精度，但是
对应表格的数据，使用%e（带指数）或%f的形式打印可能更合适。所有的这三个打印形式都
可以指定打印的宽度和控制打印精度。
for x := 0; x < 8; x++ {
fmt.Printf("x = %d e^x = %8.3f\n", x, math.Exp(float64(x)))
}
上面代码打印e的幂，打印精度是小数点后三个小数精度和8个字符宽度：
浮点数 89
gopl
x = 0 e^x = 1.000
x = 1 e^x = 2.718
x = 2 e^x = 7.389
x = 3 e^x = 20.086
x = 4 e^x = 54.598
x = 5 e^x = 148.413
x = 6 e^x = 403.429
x = 7 e^x = 1096.633
math包中除了提供大量常用的数学函数外，还提供了IEEE754浮点数标准中定义的特殊值的
创建和测试：正无穷大和负无穷大，分别用于表示太大溢出的数字和除零的结果；还有NaN
非数，一般用于表示无效的除法操作结果0/0或Sqrt(-1).
var z float64