### Retrieving and Implementing Information

The task involves retrieving information about the stack, which is a functionality to retrieve details on callables. A common property shared by these shortcuts is that they all make use of the current stack to check constraints on specific callers. This task is not delegated to helper methods. Through manual review of known shortcuts, we discovered that they either use `sun.reflect.Reflection.getCallerClass` or `java.lang.SecurityManager.getClassContext`.

To find all methods containing call sites for these two methods, we implemented a simple static analysis using the Soot framework [17]. The Soot framework was used only to conveniently locate specific bytecode instructions; the analysis did not require a call graph or consider data flows. While a text-based matching tool like `grep` could have been used, Soot helped avoid mistakes in the process.

Our analysis identified 86 candidate methods, which we manually reviewed to find the subset that actually implements a shortcut. The results are as follows:

- **35 Methods Implement Shortcuts**: These methods check constraints on the call stack and skip a permission check if the constraints are satisfied.
- **6 Methods Do Not Implement Strict Shortcuts**: These methods do not call a `check*` method on the `SecurityManager` to trigger stack inspection under any circumstances. However, they deny access to functionality if the immediate caller’s classloader cannot load a specific class involved in the desired action. This approach represents an undocumented, ad-hoc method for access control.
- **1 Method Does Not Implement a Strict Shortcut**: This method checks if the immediate caller’s classloader is the bootstrap classloader and throws a `SecurityException` otherwise.
- **44 Methods Are Caller-Sensitive but Not for Shortcuts**: These methods use stack inspection for purposes other than shortcuts.

We compared our findings with relevant sections in the JSCG (9.8, 9.9, 9.10), which list 75 caller-sensitive methods. The methods listed in the JSCG constitute a subset of the 86 candidate methods found by our static analysis. The additional 11 methods we found, not covered by the JSCG, include 9 methods that do not perform permission checking, 1 deprecated method, and 1 method part of `sun.misc.Unsafe`, which is not officially supported.

From this, we conclude that the JSCG sufficiently covers the current set of methods that implement shortcuts. For 41 out of the total 75 methods included in the JSCG, we found no indication of shortcuts. These methods typically implement dynamic access checks in the context of reflection or provide dynamic loading capabilities involving the immediate caller’s classloader. Such behavior requires special attention from developers and may introduce potential vulnerabilities, which is why they are discussed in the JSCG. We leave these methods out of the scope of this paper, focusing on shortcuts, though they may be worth investigating further in future work.

### Removing Shortcuts

Out of the 35 methods identified to implement shortcuts, we manually modified 32 to remove conditionals involving properties of the call stack, which may have prevented a permission check. Most shortcuts use `getCallerClass` to retrieve the immediate caller and check if its defining classloader matches a specific instance or is null (i.e., the bootstrap classloader). By removing shortcuts, we transformed 28 out of these 32 methods from caller-sensitive to caller-insensitive, guarding their functionality with a well-defined permission check. We left the remaining 4 methods caller-sensitive because, apart from their original shortcuts, they implement additional functionality such as visibility checks in the context of reflective access.

It is important to note that caller-sensitivity and the notion of shortcuts, as we defined it, are separate concepts: Our notion of shortcuts always implies caller-sensitivity, but the inverse does not always hold.

We removed shortcuts from only 32 out of 35 methods. One method, `SecurityManager.checkMemberAccess`, was removed entirely from the code base because it is deprecated and not used by any other method in the JCL. Two remaining methods, `Class.newInstance` and `getDeclaredField`, could not be modified due to circular dependencies. In the original code, the shortcuts in these methods prevented infinite loops during permission checks. We decided to keep these two shortcuts and leave all calls to `getDeclaredField` and `newInstance` unmodified.

### Adapting All Callers

The final step of our solution is to adapt all immediate calls to the modified methods. In the original code, many JCL callers can access functionality guarded by a shortcut, even with untrusted code on the call stack. After modification, the same call sequence would fail because the permission check now considers the full call stack. To retain backward compatibility, all immediate calls to modified methods must be wrapped into a privileged action.

For the 28 methods that lost their caller-sensitivity through modification, we used static analysis to find all immediate calls. We adapted and reapplied the approach used to locate shortcuts, finding 1,399 calls in the JCL that required modification. For one of the 28 modified methods, we found no callers within the JCL, meaning the transformation for this method was complete.

We used Javassist [18] to implement a bytecode modification tool that automatically adapts all calls. It adds one or more private helper methods to each calling class, each of which instantiates a privileged action that wraps the original target method call and then calls `doPrivileged`. The modification redirects all calls targeting a modified method to one of the newly added helper methods. Each helper method wraps a call to one specific modified method, so multiple helper methods are added to calling classes that target more than one modified method. To avoid adding hundreds of additional classes, we added a small set of commonly accessible privileged actions to `java.lang.Class`, shared among all helper methods.

For the 4 methods that remained caller-sensitive after shortcut removal, we applied a different modification strategy. These methods vary their behavior depending on the immediate caller, which would be the `run` method of a privileged action if we applied the previous modification. In the JCL, only `AtomicReferenceFieldUpdater.newUpdater` out of the 4 methods is called, and it has only 3 callers. We manually modified these 3 callers using a form of double dispatch. We added two private helper methods, `x_newUpdater` and `x_getUpdater`, to each calling class. `x_newUpdater` instantiates a privileged action, whose `run` method calls `x_getUpdater`, which in turn calls `AtomicReferenceFieldUpdater.newUpdater`. Finally, we replaced all original calls to `newUpdater` with calls to `x_newUpdater`.

### Effects on Security and Maintainability

The technique presented removes shortcuts within methods of the JCL, offering two main benefits:
1. **Easier Maintenance**: The resulting JCL code is easier to maintain, reducing the likelihood of introducing new confused-deputy vulnerabilities in future Java versions.
2. **Improved Security**: Some existing attack vectors that depend on shortcuts will become infeasible.

#### Enabling Security-Preserving Code Evolution

By replacing implicit privilege elevation with explicit privilege elevation using `doPrivileged`, we retain backward compatibility to a large extent. However, this retains confused-deputy vulnerabilities already present in the code base at the time of modification. For example, if the vulnerability caused by `Util` is already part of the code base when we apply our transformation, the call to `openFile` in `openFileFromRoot` will be wrapped in a privileged action, just like the call in `readProp`. As a result, the `openFileFromRoot` method will continue to expose critical functionality to attackers even after the program transformation.

It is challenging to determine which method calls under privileged regime are legitimate and which represent vulnerabilities. With our current proof-of-concept implementation, we reduce the possibilities of potentially illegitimate privilege elevation to explicit ones, but still leave the identification of insecure uses of critical functions out of scope. In the future, we plan to extend our proposal by conducting a security review of all callers and deciding on a case-by-case basis whether the introduced explicit privilege elevation with `doPrivileged` is appropriate.

#### Rendering Existing Attack Vectors Infeasible

Even in its current state, our transformation effectively renders existing attack vectors infeasible. Many attacks that exploited previously shortcut-containing methods did not call these methods directly but rather by abusing insecure use of reflection or `invokedynamic` [19]. The proposed transformation does not modify such calls, as `doPrivileged` wrappers are only placed around direct method calls. After the shortcuts are removed, any such attack will be thwarted because the permission check in the reflectively called method will now trigger a stack walk, preventing the action if the call sequence was initiated by untrusted code.

We found four examples of such attacks in a sample set provided by Security Explorations [12]. They leverage vulnerabilities involving the insecure use of reflection to call shortcut-containing methods through a trusted system class. Debugging confirmed that performing permission checks instead of taking shortcuts results in access-control exceptions, thus preventing these attacks. Interestingly, after Security Explorations reported three of these vulnerabilities to the vendor, the released fix did not reliably prevent the attacks. In fact, it still allowed attackers to use shortcuts and other caller-sensitive methods [20], allowing Security Explorations to run three of the four exploits successfully with minor changes.

In conclusion, these findings demonstrate that our proposed solution increases the security of the Java platform and supports our claim that shortcut-containing code should be addressed.