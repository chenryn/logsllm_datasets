drops.
In addition, DLNabs returns to each dialchecker
ui a bit ci which is 1 iff ui has succesfully established a
rendezvous with some dialer. Such information is rea-
sonable to be provided to a dialchecker, as ti might be
a random value that is not an actual dead-drop. Hence,
the bit ci communicates to the dialchecker that she has an
incoming call (if nobody calls the dialchecker, then a ran-
dom dead drop value is returned that nobody else shares
with her). On the other hand, a dialer should not be able
to infer information about the dial trafﬁc and availability
concerning some dialchecker, therefore DLNabs does not
provide this success check to the dialers.
The Conversation program family CNVabs. Given the es-
tablishment of the dead drops, as set by DLNabs, the Con-
versation program family CNVabs realizes the operation
of message exchange, where messages lie in some space
M. The program family CNVabs is presented in Figure 3.
Program family DLNabs parameterized by z
a
vector
of
ui(cid:54)=u j∈U
inputs
– Domain: (DDLNabs ∪{⊥})n, where
(cid:110)(cid:8)(DIAL,ui,u j)(cid:9), (DIALCHECK,ui)
(cid:111)
x = (cid:104)x1, . . . ,xn(cid:105),
then Mi(x) = { j
DDLNabs :=
Namely, let Uact := {ui ∈ U | xi (cid:54)= ⊥}; a valid input xi
for user ui ∈ Uact consists of either (i) a (DIAL,ui,u j)
request for some user u j that ui wants to dial, or (ii) a
(DIALCHECK,ui) request.
For
if
| x j =
xi = (DIALCHECK,ui)
(DIAL,u j,ui)}, else is /0. Parse z as a deterministic
DLN, such that for any x if Mi(x) (cid:54)= /0, then
program Rz
DLN(i,x) ∈ Mi(x), else it is equal to ⊥.
Rz
– Range: YDLNabs := (cid:104){yi | yi ∈ [a,b]}(cid:105)ui∈Uact, where
[a,b] is a predetermined integer interval.
– Function: On input a vector x = (cid:104)x1, . . . ,xn(cid:105) where
each non-⊥ value xi is either a (DIAL,ui,u j) request, or
a (DIALCHECK,ui) request, DLNabs computes a vector
y = (cid:104)yi(cid:105)ui∈Uact, as follows:
• Let Iact := {i | ui ∈ Uact} be the set of indices that refer
to active users. For i, j ∈ Iact, DLNabs samples distinct
random integers ti, j from range [a,b].
• For every i ∈ Iact:
◦ If xi = (DIAL,ui,u j), then if there is a j ∈ Iact such
that x j = (DIALCHECK,u j) and i = Rz
DLN( j,x), then it
sets ti = ti, j. Otherwise (i.e., there is no such j), it sets
ti = ti,i. In both cases, it sets yi = ti.
◦ If xi = (DIALCHECK,u j), then if there is a j ∈ Iact
DLN(i,x) (cid:54)= ⊥, then it sets ti = ti, j and a bit
such that j = Rz
ci = 1. Otherwise (i.e., there is no such j), it sets ti = ti,i
and a bit ci = 0. In both cases, it sets yi = (ti,ci).
• It returns the value vector y := (cid:104)yi(cid:105)ui∈Uact.
Figure 2: The Dialing program family DLNabs : (DDLNabs ∪
{⊥})n −→ YDLNabs with parameter z, where non-⊥ range
values are integers sampled from range [a,b].
1222    26th USENIX Security Symposium
USENIX Association
By the deﬁnition of CNVabs, if every dead drop is not
shared among three or more users, then two users ui,u j
are going to exchange their messages mi,m j only if they
provide the same dead drop ti = t j. Recall that if the
dead drops are computed as outputs of the Dialing pro-
gram family DLNabs w.r.t. the same active set Uact, then
no more than two users share the same dead drop, which
implies the correctness of CNVabs. In the other cases, ei-
ther (i) there is no matching dead drop or (ii) more than
2 matching dead drops exist. In case (ii), the parame-
ter z speciﬁes a deterministic program Rz
CNV among in-
puts which in turn determines the pair of matching dead
drops. In any case, when a message exchange fails for
some user, then CNVabs returns back this message to the
user for resubmission in an upcoming round.
Program family CNVabs parameterized by z
– Domain: (DCNVabs ∪{⊥})n, where
DCNVabs :=(cid:8)(CONV,ti,mi)(cid:9)ti∈[a,b],mi∈M
ui∈U
Namely, let Uact := {ui ∈ U | xi (cid:54)= ⊥}; a valid input
for user ui consists of a (CONV,ti,mi) request for ren-
dezvous point tagged by ti for sending message mi.
For a vector of inputs x, deﬁne Ni(x) = { j | x j =
(CONV,ti,m j)}. Parse z as a deterministic program
CNV, such that for any x if Ni(x) (cid:54)= /0 then Rz
CNV(i,x) ∈
Rz
Ni(x), else it is equal to ⊥.
– Range: (cid:104){mi | mi ∈ Uact}(cid:105)ui∈Uact.
– Function: On input a vector (cid:104)x1, . . . ,xn(cid:105) where each
non-⊥ value xi is a (CONV,ti,mi) request, CNVabs re-
turns a value y = (cid:104)yi(cid:105)ui∈Uact, as follows:
• Let Iact := {i | ui ∈ Uact} be the set of indices that refer
to active users. For every i ∈ Iact: if j = Rz
CNV(i,x) (cid:54)= ⊥,
then it sets yi = m j. Otherwise, it sets yi = mi.
• It returns the value vector y := (cid:104)y1, . . . ,yn(cid:105).
Figure 3: The Conversation program family CNVabs :
(DCNVabs ∪ {⊥})n −→ YCNVabs with parameter z, where
non-⊥ dead drop values are integers sampled from a pre-
determined interval [a,b] and messages are taken from
space M.
tion “rounds.” We note that the value of our relaxation
of MPC security is on the fact that we can realize any
member of the respective families.
Sharemind as a secure MPC platform. As already dis-
cussed, Sharemind will be the building platform for the
implementation of our anonymous messaging scheme.
As shown in [11], Sharemind is information theoreti-
cally secure against a passive (honest-but-curious) adver-
sary that corrupts 1-out-of-3 MPC servers. Subsequent
work [43] provides interesting directions regarding the
active security of Sharemind, even speciﬁcally for novel
oblivious sorting algorithms [38]. However, in our im-
plementation, we consider the case of passive security.
In more detail, let S be the class of programs that
can be written in Sharemind’s supporting language Se-
creC. In our analysis, we claim that Sharemind operates
as a (1,3)-secure MPC platform for any program family
member of the class S against passive adversaries, as in
Deﬁnition 1. Using the above claim, we provide two Se-
creC programs and prove that they realize two members
of the families DLNabs and CNVabs, (cf. Sections 5 and 6)
hence obtaining an anonymous messaging system.
Alternative MPC platforms. For the purpose of the pro-
posed anonymous messaging, Sharemind can be viewed
as a black box providing MPC functionality. Hence,
it is also possible to swap Sharemind for another MPC
implementation providing different deployment or secu-
rity properties. For example, recently, Furukawa et al.
proposed a highly-optimised protocol for computation
with an honest majority and security for malicious ad-
versaries [30], that was further improved by Araki et al.
[4]. Similarly, it is possible to support more than three
computation parties. SPDZ [24] is a practical MPC im-
plementation that provides statistical security against an
active adversary that corrupts up to m − 1 parties.
Its
online computation and communication complexities are
both O(m|C| + m3), where |C| stands for the computable
arithmetic circuit size. In our setting, the lower bound for
this circuit size is the number of users, n. Both actively
secure MPC implementations mentioned here work in a
preprocessing (i.e. ofﬂine/online) model.
4 System Architecture
Anonymous Messaging Systems. An anonymous mes-
saging system is a pair of protocols that realize any two
members of the families DLNabs and CNVabs under the se-
curity guarantee provided in Deﬁnition 1. Given such
realization, anonymous communication can be achieved
as a continuous sequence of interleaved invocations of
dialing and conversation.
In principle, dialing can be
more infrequent compared to conversation, e.g., perform
only a single dialing every certain number of conversa-
Our work is presented in a manner that makes it easy to
implement using any of the aforementioned MPC proto-
cols in Section 2 and with any number of servers. How-
ever, for the sake of presentation, we assume three MPC
servers, denoted by Ser1, Ser2, Ser3. As a general idea,
the protocol works in rounds, where in each round users
break their input into shares and forward the shares to the
servers, with each server receiving one share. Then, the
servers interactively compute the desired output shares,
USENIX Association
26th USENIX Security Symposium    1223
In
which are in turn returned to the respective users.
our description, for simplicity we choose additive secret
sharing, but other sharing schemes would not affect the
functionality of our architecture.
Besides the MPC servers, the complete architecture of
our system comprises an entry and an output server used
to handle user requests. The entry and output servers
may be located on the same or on different physical ma-
chines and are only trusted to relay messages.
Registration phase. At the beginning, the MPC servers
Ser1, Ser2, Ser3 run the Setup phase of the secure mul-
tiple KGC ID-KA protocol (cf. Section 2) playing the
role of three KGCs: KGC1, KGC1, KGC3 generating their
partial master secret keys msk1, msk2, msk3.
Before starting to use the system, each user ui registers
with a unique username UNi of 64 bits. Then, each MPC
server Ser(cid:96), (cid:96) ∈ {1,2,3} generates ui’s partial secret key
ski,(cid:96) and sends it ui. Upon receiving ski,1, ski,2, ski,3, ui
combines the partial keys to obtain her ID-KA secret key
ski as output of the secret key derivation algorithm. In
addition, by performing standard key exchange opera-
tion, ui obtains a symmetric key ki,(cid:96) for communication
with each of Ser(cid:96), (cid:96) ∈ {1,2,3}. From this point on, any
authentication and communication between ui and the
servers is performed using symmetric key cryptography.
In the client-side, ui can compute u j’s ID-KA public key
pk j as a function of her username UN j and agree on the
ID-KA key Ki,(cid:96). In the rest of this paper, we set the length
of the usernames UN1, . . . , UNn ∈ UN, to be 64 bits.
Main phase. The main phase of the protocol for each
round r, consists of the following steps:
1. Encoding: Each user ui generates a request ai, as
input to the MPC that is to be executed.
2. Secret sharing: Each user ui creates three shares
of the request using additive secret sharing, so that
ai = ai,Ser1 + ai,Ser2 + ai,Ser3 holds. Note that the sub-
scripts denote the MPC server that will process the share.
Then each of the three shares intended for one of the
MPC servers is encrypted with the respective symmet-
ric key ki,(cid:96) using authenticated encryption. The result
is a triple of the form a(cid:48)
i,Ser3), where
:= Enkki,(cid:96)(ai,Serj), (cid:96) = {1,2,3}. Then each user
a(cid:48)
i,Ser(cid:96)
sends the encrypted shares along with her username UNi,
as a package to the entry server.
3. MPC input preparation: Before the start of round
r, the entry server groups the packages received already
and sends each share along with its associated username
to the respective MPC servers.
It is important to note
that the use of an entry server is only to synchronize the
MPC servers and to provide the shares in the same or-
der to each of them. For notation simplicity and without
loss of generality, we assume that the entry server ar-
ranges ui as the user that submitted the i-th input. Then,
i,Ser1,a(cid:48)
i,Ser2,a(cid:48)
i = (a(cid:48)
1,Ser(cid:96)
n,Ser(cid:96)
,··· ,a(cid:48)
each MPC server Ser(cid:96) receives a sequence of the form
= (cid:104)a(cid:48)
(cid:105). We denote as n the num-
a(cid:48)
Ser(cid:96)
ber of users that provided an input in round r. In addi-
tion to a(cid:48)
, the MPC servers also receive a sequence of
the users’ usernames in corresponding order, that is a se-
quence of the form UN = (cid:104)UN1,··· , UNn(cid:105), where UNi is
the registered username of the user that provided input i.
Ser(cid:96)
Ser(cid:96),i) are ready for the MPC.
4. Order check: Each MPC server computes a hash
of the usernames in the order they appear in its input
sequence, as H(UN1||···||UNn), and exchanges it with
the other MPC servers. In case the three hashes do not
match, it is implied that the order of the usernames pro-
vided to the three servers was different. Thus, a denial of
service attack has taken place by either the entry server
or one of the MPC servers (considering they reported a
false hash). This step is optional when considering only
privacy implications of a malicious entry server.
5. Decryption and authentication: At this point, au-
thentication is performed implicitly by each server via
decrypting the received share with the symmetric key
corresponding to the username that came with the share.
Thus shares aSer(cid:96) = (cid:104)aSer(cid:96),1,··· ,aSer(cid:96),n(cid:105), with aSer(cid:96),i :=
Decki,(cid:96)(a(cid:48)
6. MPC algorithm: The MPC servers execute the
MPC protocol.
7. Encryption and return: Each MPC server encrypts
each output share with the respective symmetric key and
(cid:105)
forwards shares of the form b(cid:48)
n,Ser(cid:96)
to the output server. The output server collects the shares
corresponding to the same user and returns a package of
the form (b(cid:48)
8. Decryption and reconstruction: Each user decrypts
the received shares with the respective symmetric key
and adds them, resulting in bi = bi,Ser1 + bi,Ser2 + bi,Ser3,
where bi,Ser(cid:96) = Decki,(cid:96)(b(cid:48)
). The value bi is the ﬁnal
output of the MPC protocol for each user ui for round r.
Remark 1. The entry and output servers are used for
practical reasons. The main function they perform is
grouping the received packages of shares and forwarding
them to/from the servers. As they have no information
about the symmetric keys exchanged between users and
servers at the registration phase, they schedule the trafﬁc
consisting of encrypted shared data. Hence, if entry and
output servers are malicious, they can do no more than
an adversary controlling the network.
) to each user ui.
,··· ,b(cid:48)
= (cid:104)b(cid:48)
,b(cid:48)
,b(cid:48)
1,Ser(cid:96)