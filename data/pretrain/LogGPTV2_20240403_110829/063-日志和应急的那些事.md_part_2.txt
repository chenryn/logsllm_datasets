result["error"]=str(e)
finally:
self.Result.append(result)
## 检查是否开启日志审计auditd
def check_auditd(self):
result= {"name":"检查是否开启日志审计auditd",
"level":"high","service":["auditd"],"user":["root"],"filename":[
"/etc/ssh/sshd_config"],"port":["22"],"src_port":[""],"dest_port
":[""],"pid":[""],"protocol":[""],"check":True}
try:
shell_process = os.popen("service auditd
status").read().splitlines()
for info in shell_process:
if "Active: active (running)" in info:
result["msg"]="开启了日志审计auditd"
result["check"]=True
break
else:
result["check"]=False
result["msg"]="没有开启日志审计auditd"
except Exception as e:
result["error"]=str(e)
finally:
self.Result.append(result)
## 历史命令保存的最大条数检测
def check_bash_history(self):
result= {"name":"历史命令保存的最大条数检测",
"level":"high","service":[""],"user":["root"],"filename":["/etc/
profile"],"port":[""],"src_port":[""],"dest_port":[""],"pid":[""
],"protocol":[""],"check":True}
try:
shell_process =
os.popen(self.bash_histrory).read().splitlines()[0]
if int (shell_process)/dev/null |awk '{print $1}'").read().splitlines()
if len(shell_process) != 1: continue
if file == '/etc/passwd' and shell_process[0] !=
'-rw-r--r--':
info= "/etc/passwd
文件权限变更",shell_process[0]
file_info.append(info)
elif file == '/etc/shadow' and shell_process[0]
!= '----------':
info="/etc/shadow
文件权限变更",shell_process[0]
file_info.append(info)
elif file == '/etc/group' and shell_process[0]
!= '-rw-r--r--':
info= "/etc/group
文件权限变更%s",shell_process[0]
file_info.append(info)
elif file == '/etc/securetty' and
shell_process[0] != '-rw-------':
info= "/etc/securetty
文件权限变更",shell_process[0]
file_info.append(info)
elif file == '/etc/services' and
shell_process[0] != '-rw-------':
info= "/etc/services
文件权限变更",shell_process[0]
file_info.append(info)
elif file == '/etc/xinetd.conf' and
shell_process[0] != '-rw-------':
info= "/etc/xinetd.conf
文件权限变更",shell_process[0]
file_info.append(info)
elif file == '/etc/grub.conf' and
shell_process[0] != '-rw-------':
info= "/etc/grub.conf
文件权限变更",shell_process[0]
file_info.append(info)
elif file == '/etc/lilo.conf' and
shell_process[0] != '-rw-------':
info="/etc/lilo.conf
文件权限变更",shell_process[0]
file_info.append(info)
if not file_info:
result["msg"]="重要系统文件权限没有变更。"
else:
result["check"]=False
result["msg"]="文件权限发生变更%s"%str(file_info)
except Exception as e:
result["error"]=str(e)
finally:
self.Result.append(result)
## 检查免密码登录
def check_authorized_keys(self):
result= {"name":"检查ssh免密码登录",
"level":"critical","service":["sshd","ssh"],"user":["root"],"fil
ename":[".ssh/authorized_keys"],"port":[""],"src_port":[""],"des
t_port":[""],"pid":[""],"protocol":[""],"check":True}
try:
for dir in os.listdir('/home/'):
self.file_analysis( os.path.join('%s%s%s' %
('/home/', dir, '/.ssh/authorized_keys')),dir)
self.file_analysis('/root/.ssh/authorized_keys',
'root')
if not self.ssh_authorized_user:
result["msg"]="不存在免密码登录"
else:
result["check"]=False
result["msg"]="存在免密码登录%s"%str(self.ssh_authorized_user)
except Exception as e:
result["error"]=str(e)
finally:
self.Result.append(result)
# 分析authorized_keys文件
def file_analysis(self, file, user):
try:
if os.path.exists(file):
shell_process = os.popen("cat " + file + "
2>/dev/null |awk '{print $3}'").read().splitlines()
# print (shell_process)
if shell_process:
self.ssh_authorized_user[file]=shell_process
#print (self.ssh_authorized_user)
return
except:
return
def run(self):
self.check_passmax()
self.check_passmin()
self.check_passlen()
self.check_passage()
self.check_uid()
self.check_sshdconfig()
self.check_auditd()
self.check_bash_history()
self.check_open_Telnet()
self.check_empty()
self.check_gid()
self.check_sudo()
self.check_open_nfs()
self.check_file_analysis()
self.check_authorized_keys()
if __name__ == '__main__':
obj=Linux_Check()
obj.run()
print (json.dumps(obj.Result,encoding='UTF-8',
ensure_ascii=False))
运行结果
运行的结果，进行了格式化处理，返回JSON字符串，并对进程pid
，服务server,源端口，目标端口，协议，用户，文件等这些基本
而重要的特性进行分类标注。方便如果做大规模分析的时候，可以
把几个单一事件通过这些标注，基本特性关联起来形成一个溯源流
程。（说实话有点太难了o(╥﹏╥)o）。
开源工具进行分析
简述
开源的工具，网上有很多，目前的有驭龙，ossec，和已经封装的w
azuh，osquery都是可以做到。
试想一个场景，一个客户想收集100台开放公网的服务器的应用日志
，而这些机器都部署在某平台的云上，而不是本地机房，如何去实
现，可能想到的办法是日志分析平台，基于端口镜像，把流量转到
硬件设备进行分析，首先不说客户是否有硬件设备，就单单从流量
镜像目前在云上都很难实现。如何收集，其实可以使用elastic 的
beats系列就可以搞定。
个 人 认 为 最 好 的 日 志 收 集 工 具 filebeat ,winlogbeat
,auditbeat
这三个就能满足日常的安全应急的日志收集和分析工作。
关于如何安装，如何使用，小弟我在此就不做介绍了，更多的还是
想法和思路，相信各位大表哥一看便知。
filebeat,auditbeat,winlogbeat
官网地址
https://www.elastic.co/cn/beats/
优点
 轻量级（指的是agent）配置简单，i/o 资源占用小。
 完整的一套分析体系，灵活自定义各组件。
 可以适用任何网络架构平台目前输出支持ES,logstash,kafka,
redis,file,console,…
缺点
 要想真的高效的用起来首先分析平台搭建比较麻烦，需要依赖很
多组件去实现一套完整的流程，下图是国内美团的架构，比较复
杂。
简单的流程
filebeat(auditbeat,winlogbeat)-->logstash-->es--
>Kibana
Osquery
概述
osquery是一个由FaceBook开源用于对系统进行查询、监控以及分
析的一款软件，可以说是一个神器，我了解的很多国内外的甲方都
在 上 面 进 行 了 定 制 和 2 次 开 发 ， 主 要 用 于 HIDS,EDR
项目上，所有的查询操作基本和SQL语言一样。
官方主页
https://osquery.io/
Select 查询操作
 查看下面的所有表（.tables）
 查询系统用户 (select * from user)
 查 询 进 程 打 开 的 文 件 (select * from
process_open_files)
使用osquery进行进程和socket审核
一 般 的 病 毒 木 马 和 反 弹 shell 运 行 在 linux
用 户 层 面 ， 这 个 一 般 的 杀 毒 软 件 和 终 端 防 护 HIDS,EDR
都能检测到，如果hook到内核层，通过动态加载内核模块的方式，
大部分查杀工具都无能无力，比如国内的某云，这其中一个是技术
问题，更大的还是一些HIDS产品为了agent运行稳定，没有进行hoo
k到内核层。只在用户层面进行监控，信息收集。
osquery使用Linux审计系统从内核收集和处理审计事件。它通过h
ook 监 视 execve() syscall 来 实 现 。 然 后 通 过 netlink
方式传输到用户层面，更加的精准，能检测更隐蔽的攻击。
监控执行的命令(audit)
1. 测试启动一个监听进行反弹shell。
2. 查 询 表 process_events
能实时看到刚反弹shell的操作命令。
总结
随着网络安全的高速发展，以及国家的重视，和未来5G的全面商用
和民用，传统的安全已经悄悄发生了变化，对安全人员的要求更高
，除了传统的渗透测试手法，更多的转向社工，信息收集,溯源，自
动化，开源工具的分析，开发。5G的未来速度可能是最没有意义的
事，而是孵化的各种改变我们生活方式的应用，和智慧生活。
安全从早期的人工渗透，脚本工具，到后来的自动化，各种安全产
品。其实对于我自己来理解的话，安全最大的根本还是人，安全离
不开安服人工，也离不开一些优秀的的安全工具和产品。
精选留言
用户设置不下载评论