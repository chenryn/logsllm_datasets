**日志分析软件详细设计**
**\
**
**目录**
[1. 技术架构 [2](#_Toc464246724)](#_Toc464246724)
> [1.1. 日志采集模块 [4](#日志采集模块)](#日志采集模块)
>
> [1.2. 分布式消息处理队列
> [5](#分布式消息处理队列)](#分布式消息处理队列)
>
> [1.3. 数据流处理 [7](#数据流处理)](#数据流处理)
>
> [1.4. 海量数据搜索引擎 [8](#海量数据搜索引擎)](#海量数据搜索引擎)
>
> [1.5. 分布式应用程序协调管理
> [9](#分布式应用程序协调管理)](#分布式应用程序协调管理)
>
> [1.6. web服务 [10](#web服务)](#web服务)
>
> [1.7. 日志配置规则解析 [11](#日志配置规则解析)](#日志配置规则解析)
>
> [1.8. 搜索 [16](#搜索)](#搜索)
>
> [1.9. 统计视图 [18](#统计视图)](#统计视图)
[2. 功能架构 [20](#_Toc464246734)](#_Toc464246734)
> [2.1. 日志管理 [21](#日志管理)](#日志管理)
>
> [2.2. 用户管理 [22](#用户管理)](#用户管理)
>
> [2.3. 日志搜索 [23](#日志搜索)](#日志搜索)
>
> [2.4. 日志统计展现 [38](#日志统计展现)](#日志统计展现)
>
> [2.5. 告警监控 [40](#告警监控)](#告警监控)
>
> [2.6. 日志解析 [42](#日志解析)](#日志解析)
>
> [2.7. API [53](#api)](#api)
>
> [2.8. 日志上传 [65](#日志上传)](#日志上传)
[3. 设备部署 [68](#_Toc464246743)](#_Toc464246743)
> [3.1. 应用部署概况 [69](#应用部署概况)](#应用部署概况)
>
> [3.2. 部署规模与资源需求
> [69](#部署规模与资源需求)](#部署规模与资源需求)
>
> [3.3. 部署方案 [71](#部署方案)](#部署方案)
[4. 产品优势 [72](#_Toc464246747)](#_Toc464246747)
> [4.1. 统一日志管理 [72](#统一日志管理)](#统一日志管理)
>
> [4.2. 功能强大 [72](#功能强大)](#功能强大)
>
> [4.3. 高性能、可扩展 [72](#高性能可扩展)](#高性能可扩展)
>
> [4.4. 操作简明易用 [72](#操作简明易用)](#操作简明易用)
1.  []{#_Toc464246724 .anchor}**技术架构**
> ![屏幕快照 2015-08-26
> 20.19.53.png](media/image1.png){width="6.352004593175853in"
> height="2.758416447944007in"}
>
> 如上图所示，日志分析软件采用分布式计算方式，各模块之间都是项目独立并支持横向扩展极大方便在云环境下的部署，其中：
>
> 1.数据采集层：
>
> （1）支持增量读取文件日志（适用于业务日志）
>
> （2）支持syslog／rsyslog接口（适用于网络设备，安全设备）
>
> （3）支持获取mysql，oracle，sql server等数据库信息；（适用于业务日志）
>
> （4）支持通过flume／ws／api接口，获取业务系统日志；（适用于定制开发）
>
> （5）支持通过agent获取eventlog日志（适用于windows系统）
>
> （6）支持对接流量抓包系统（适用于对接NPM,APM）
>
> 2.分布式消息系统
>
> 日志分析软件采用分布式消息队列系统，用于管理原始数据以及正则提取后的数据，可以通过扩展机器，实现处理万级以上eps数据；
>
> 3.存储层
>
> 基于linux文件系统，分布式存储日志索引文件，无需额外存储系统，在x86服务器（或虚拟机）上挂在磁盘阵列，即可实现索引的分布式存储及副本备份；
>
> 4.数据处理层
>
> 平台采用流处理技术，对接收到的数据都非结构化数据，进行结构化处理，可以通过设备横项扩展，增加平台的数据接入性能，从而实现支持万级EPS数据的接入。
>
> 5.分析引擎
>
> 由于需要对业务数据进行实时告警（涉及到复杂告警判断逻辑，以下需求有描述），同时需要对业务数据进行聚合，将每个用户的操作步骤进行分组聚合根据业务id，业务起点，终点进行聚合，考虑到日志分析软件数据处理灵活性，需要实现结构化数据搜索引擎，可以灵活对各种类型业务数据进行结构化字段提取，统计和分析，并支持分布式计算和存储，通过横向扩展设备，实现性能的扩容；
>
> 6.用户交互层
>
> 平台用户交互采用web架构，用户的所有操作均可通过浏览器完成，包括数据搜索，告警设置，数据分析，数据结构化配置，数据导出，用户管理等
>
> 7.部署方式：包括为企业定制私有云，公有云，集群，单服务器，单笔记本等多种部署形式；
## 日志采集模块
日志采集模块是一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，支持在日志系统中定制各类数据发送方，用于收集数据；同时提供对数据进行简单处理，并写到各种数据接收方（可定制）的能力。
\(1\) 可靠性
当节点出现故障时，日志能够被传送到其他节点上而不会丢失。集群提供了end-to-end模式来保障可靠性：收到数据agent首先将event发送到后端消息队列集群，如果数据发送失败，将event写到磁盘上，可以重新发送。
\(2\) 可扩展性
模块完全是多主平行结构，不存在单点故障问题。
\(3\) 可管理性
每个节点均提供metric
api接口，以json格式数据展现服务状态，方便提供服务指标和运维监控。
日志采集的模块主要分以下几部分：
> Server Agent主要功能：
>
> 1.接收来自syslogd或rsyslogd的普通syslog请求（原始请求不带token，appname，tag)
>
> 2.为每个syslog事件打上本集群的token
>
> 3.根据源IP设置对应的appname，tag
>
> 4.负责将web收到的本地上传日志上传给采集器，这里还需要提供相关Api供前台预览分行结果
>
> Server
> Agent会有一个统一的配置管理页面负责管理源ip与appname，tag的映射关系，且web所在机器的agent有个配置页面，来配置对本地上传日志文件的后续处理。
>
> Client Agent主要功能：
用户在的服务器上（linux/windows）部署Agent，我们称之为 Client Agent。
> 1.可以接入文件,Tcp/Udp,脚本，Windows Evenglog，性能数据等输入
>
> 2.可以限制上报速度
3.  可以在本地做简单的负载均衡，配置多个Collector地址，作为输出
    1.  ## 分布式消息处理队列
分布式消息处理队列用于消息的持久化和缓存。该系统使用磁盘文件做持久化，顺序进行读写，以append方式写入文件。为减少内存copy，集群使用sendfile发送数据，通过合并message提升性能。集群本身不储存每个消息的状态，而使用（consumer/topic/partition）保存每个客户端状态，大大减小了维护每个消息状态的麻烦。在消息推拉的选择上，集群使用拉的方式，避免推的方式下存在的各个客户端的处理能力、流量等不同产生不确定性。以多机形式形成集群，建议3台或3台以上奇数台服务器组建，并且支持分区副本。
**功能特点：**
（1）以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间复杂度的访问性能。
（2）高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒100K条以上消息的传输。
（3）支持Server间的消息分区，及分布式消费，同时保证每个Partition内的消息顺序传输。
（4）同时支持离线数据处理和实时数据处理。
（5）Scale out：支持在线水平扩展。
（6）消息系统在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口。这允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。
（7）有些情况下，处理数据的过程会失败。除非数据被持久化，否则将造成丢失。消息队列把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。许多消息队列所采用的\"插入-获取-删除\"范式中，在把一个消息从队列中删除之前，需要你的处理系统明确的指出该消息已经被处理完毕，从而确保你的数据被安全的保存直到你使用完毕。
（8）因为消息队列解耦了你的处理过程，所以增大消息入队和处理的频率是很容易的，只要另外增加处理过程即可。不需要改变代码、不需要调节参数。扩展就像调大电力按钮一样简单。
（9）在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见；如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。
（10）系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。
（11）在大多使用场景下，数据处理的顺序都很重要。大部分消息队列本来就是排序的，并且能保证数据会按照特定的顺序来处理。分布式消息系统保证一个Partition内的消息的有序性。
（12）在任何重要的系统中，都会有需要不同的处理时间的元素。例如，加载一张图片比应用过滤器花费更少的时间。消息队列通过一个缓冲层来帮助任务最高效率的执行---------写入队列的处理会尽可能的快速。该缓冲有助于控制和优化数据流经过系统的速度。
（13）消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。
## 数据流处理
日志分析软件高性能、分布式日志处理架构可以每秒钟分析百万条日志，每天可以处理几十TB级的日志量，而且处理延时非常短，可以让用户搜索、分析几秒钟之前产生的日志。处理延时非常短，可以让用户搜索、分析几秒钟之前产生的日志。
流式计算集群具有如下特性：
（1）轻量级快速处理：
着眼大数据处理，速度往往被置于第一位。流处理架构允许集群中的应用程序在内存中以100倍的速度运行，即使在磁盘上运行也能快10倍。流处理架构通过减少磁盘IO来达到性能提升，它们将中间处理数据全部放到了内存中。
（2）无数据丢失：
系统需要保证无数据丢失，这也是系统高可用性的保证。系统为了无数据丢失，需要在数据处理失败的时候选择另外的执行路径进行replay（系统不是简单的重新提交运算，而是重新执行调度，否则按照来源的call
stack有可能使得系统永远都在相同的地方出同样的错误）。
（3）容错透明：
用户不会也不需要关心容错。系统会自动处理容错，调度并且管理资源，而这些行为对于运行于其上的应用来说都是透明的。
**功能特点：**
（1）能运行在100+的结点上，并达到秒级延迟。
（2）使用基于内存的计算作为执行引擎，具有高效和容错的特性。
（3）能集成批处理和交互查询。
（4）为实现复杂的算法提供和批处理类似的简单接口。
（5）它通过丰富的API和基于内存的高速计算引擎可以结合流式处理，批处理和交互查询等应用。
（6）计算流程：将流式计算分解成一系列短小的批处理作业。把输入数据按照batch
size（如1秒）分成一段一段的数据。
（7）容错性：对于流式计算来说，容错性至关重要。
（8）实时性：将流式计算分解成多个Job，对于每一段数据的处理都会经过分解，以及任务集的调度过程。
（9）扩展性与吞吐量：能够线性扩展到100个节点（每个节点4Core），可以以数秒的延迟处理万级以上EPS。
## 海量数据搜索引擎
索引集群是一个的分布式搜索引擎，具备高可靠性和高性能。支持时间文本索引和全文检索，提供丰富的api用于索引、检索、修改大多数配置。能够快速搜索数百亿的日志以及TB级的数据，结构化或者非结构化的数据都可以。
集群由2台及2台以上节点组成，其中一个为主节点，节点通过选举产生，主从节点是对于整个集群内部来说的，从外部来看整个集群，逻辑上是一个整体，与任何一个节点的通信和与整个集群通信是完全一致的。集群自动创建索引，通过配置我们可以非常方便的调整索引分片和索引副本。通过索引分片技术，一个大的索引被拆分成多个，然后分布在不同的节点上，以构成分布式搜索。索引副本的作用一是提供系统的容错性，当摸个节点摸个分片损毁或丢失时，可以从副本中恢复；二是提供查询效率，集群内部会自动实现搜索请求的负载均衡。
**功能特点：**
（1）[集群](http://baike.baidu.com/view/302477.htm)部署，集群中有多个节点，其中有一个为主节点，这个主节点是可以通过选举产生的，主从节点是对于集群内部来说的。搜索引擎的一个概念就是去中心化，字面上理解就是无中心节点，这是对于集群外部来说的，因为从外部来看搜索引擎集群，在逻辑上是个整体，你与任何一个节点的通信和与整个es集群通信是等价的。
（2）索引分片，搜索引擎可以把一个完整的索引分成多个分片，这样的好处是可以把一个大的索引拆分成多个，分布到不同的节点上。构成分布式搜索。分片的数量只能在索引创建前指定，并且索引创建后不能更改。
（3）副本，搜索引擎可以设置多个索引的副本，副本的作用一是提高系统的[容错性](http://baike.baidu.com/view/2700299.htm)，当某个节点某个分片损坏或丢失时可以从副本中恢复。二是提高搜索引擎的查询效率，搜索引擎会自动对搜索请求进行负载均衡。
（4）数据恢复或叫数据重新分布，搜索引擎在有节点加入或退出时会根据机器的负载对索引分片进行重新分配，挂掉的节点重新启动时也会进行数据恢复。
（5）数据源，也是其它存储方式（如：数据库）同步数据到搜索引擎的一个方法。它是以插件方式存在的一个搜索引擎服务，通过读取数据源中的数据并把它索引到搜索引擎中。
（6）索引快照的存储方式，搜索引擎默认是先把索引存放到内存中，当内存满了时再持久化到本地硬盘。对索引快照进行存储，当这个搜索引擎集群关闭再重新启动时就会从中读取索引备份数据。搜索引擎支持多种类型的存储方式，有本地文件系统（默认），[分布式文件系统](http://baike.baidu.com/view/771589.htm)。
（7）自动发现节点机制，搜索引擎是一个基于p2p的系统，它先通过广播寻找存在的节点，再通过[多播](http://baike.baidu.com/view/378050.htm)协议来进行节点之间的通信，同时也支持[点对点](http://baike.baidu.com/view/1145124.htm)的交互。
（8）内部节点或集群与客户端的交互方式，默认内部是使用tcp协议进行交互，同时它支持http协议（json格式）、[thrift](http://baike.baidu.com/view/1698865.htm)、servlet、memcached、zeroMQ等的[传输协议](http://baike.baidu.com/view/441895.htm)（通过[插件](http://baike.baidu.com/view/18979.htm)方式集成）
## 分布式应用程序协调管理
一个针对大型分布式系统的高可靠协调系统，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。由3台或3台以上奇数台服务器组建完成，具有如下3个特性：
1.提供丰富的构件来实现多种协调数据结构和协议。
2.访问原子性，客户端要么读到所有数据，要么读取失败，不会出现只读取部分的情况。
3.具有高可用性，帮助系统避免单点故障，故障时可以快速删掉故障服务器。故障回复时，重新加入到集群。
**功能特点：**
（1）最终一致性：client不论连接到哪个Server，展示给它都是同一个视图。
（2）可靠性：具有简单、健壮、良好的性能，如果消息m被到一台服务器接受，那么它将被所有的服务器接受。
（3）实时性：保证客户端将在一个时间间隔范围内获得服务器的更新信息，或者服务器失效的信息。但由于网络延时等原因，不能保证两个客户端能同时得到刚更新的数据，如果需要最新数据，应该在读数据之前调用sync()接口。
（4）等待无关（wait-free）：慢的或者失效的client不得干预快速的client的请求，使得每个client都能有效的等待。
（5）原子性：更新只能成功或者失败，没有中间状态。
（6）顺序性：包括全局有序和偏序两种：全局有序是指如果在一台服务器上消息a在消息b前发布，则在所有Server上消息a都将在消息b前被发布；偏序是指如果一个消息b在消息a后被同一个发送者发布，a必将排在b前面。
## web服务
WEB服务提供了日志分析软件的访问页面，进行数据展现、数据可视化，支持各种统计功能及图表展现，实现流畅的图形用户交互。
服务架构
![](media/image2.png){width="5.214583333333334in"
height="4.1618055555555555in"}
使用界面
![](media/image3.jpeg){width="6.348611111111111in"
height="2.9590277777777776in"}
LADP接入设计
日志分析软件登陆支持OpenLDAP服务，同时保留原始的直接登陆方式用于管理员登陆，用户可在登陆界面进行选择。默认为通过LDAP登录。
首次通过LDAP登陆的用户只具有默认的基本权限，查看指定的默认分组的日志。
为首次通过LDAP登陆的用户在日志分析软件中创建平台用户，用于后续管理员对账户权限的管理。用户LDAP用户无法通过此用户直接登录。
支持日志分析软件管理员可配置接入LDAP的地址，加密方式，用户分组等。
## 日志配置规则解析
实时流处理平台内置了常用的日志解析规则，能够识别、解析常见的日志格式。对于平台预置规则不支持的日志格式，用户可以在产品页面的"设置"标签下的"日志格式"标签里配置日志格式解析规则，抽取自定义字段。
event（事件）: 一条日志称为一个事件
timestamp（时间戳）:
这里的timestamp指日志本身的时间戳而不是进入系统的时间戳
field（字段）:
即通过日志分析软件系统抽取出来的字段，由字母数字下划线组成，例如apache中clientip字段
appname：appname用来标识一个日志格式，由字母数字下划线组成，在上传日志的时候需要指定对应的appname
logtype：logtype可以认为是给用户的日志格式起的一个别名，同样也由字母数字下划线组成（不能设置为security,
appname, hostname, timestamp, tag, raw_message,
index）用户在左侧字段栏和搜索栏中可以通过logtype.field来引用。
**功能特点：**