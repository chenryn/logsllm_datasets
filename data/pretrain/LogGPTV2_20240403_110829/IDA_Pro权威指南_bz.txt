 ，因为它不可能被用作文件中真正的节名称，它充分地描述了节的内容。你可以手动输入段的起始（包括）和结束（不包括）地址，如果你在打开对话框之前已经指定了地址范围，IDA 将自动填写这些地址。SDK 的segment.hpp文件描述了段的基值。对于 x86 二进制文件，IDA 通过将段的基值向左移 4 个位，然后在字节上加上偏移量，从而计算出字节的虚拟地址（virtual=(base<<4)+offset
 ）。如果不使用分段，则应使用基值零。段类别可以用于描述段的内容。IDA 能识别几个预定义的类别名称，如CODE
 、DATA
 和BSS
 。segment.hpp也描述了预定义的段类别。
遗憾的是，创建新的段会产生一个“副作用”，即被定义到段边界中的任何数据（如我们前面格式化的头部）将被取消定义。重新应用前面讨论的所有头部结构体后，我们返回到.text
 节的头部，注意 VirtualAddress
 （➌）字段（1000h
 ）是一个RAV ，它指定应加载段内容的位置的内存地址，SizeOfRawData
 （➍）字段（600h
 ）指出文件中有多少字节的数据。换句话说，这个特殊的节头部告诉我们，.text
 节是通过将文件偏移量 400h
 与9FFh
 之间的600h
 个字节映射到虚拟地址401000h
 与4015FFh
 之间创建而成。
示例文件以二进制模式加载，因此，.text
 节的所有字节出现在数据库中，我们只需要将它们移动到正确的位置即可。创建.headers
 节后，在.headers
 节的末尾部分，我们可以看到类似于下面的代码：
.headers:004003FF               db    0  
.headers:004003FF _headers      ends  
.headers:004003FF  
seg001:00400400 ; ===========================================================  
seg001:00400400  
seg001:00400400 ; Segment type: Pure code  
seg001:00400400 seg001          segment byte public 'CODE' use32  
seg001:00400400                 assume cs:seg001  
seg001:00400400                 ;org 400400h  
seg001:00400400                 assume es:_headers, ss:_headers, ds:_headers  
seg001:00400400                 db  55h ; U
在创建.headers
 节时，IDA 拆分最初的 seg000
 节，构成我们指定的.headers
 节和一个新的seg001
 节，以保存 seg000
 中的剩余字节。在数据库中，.text
 节的内容为 seg001
 节的前600h
 个字节。我们只需要将 seg001
 节移动到正确的位置，并确定.text
 节的正确大小即可。
创建.text
 节的第一步是将 seg001
 移动到虚拟地址 401000h
 处。使用Edit ▶ Segments▶ Move Current Segment 命令为seg001
 指定一个新的起始地址，如图 18-4 所示。
图18-4 移动一个段
下一步，我们将通过Edit ▶ Segments ▶ Create Segment从新移动的 seg001
 节的前600h
 字节中分离出.text 节。用于创建新节的参数如图 18-5 所示，它们取自节的头部值。
图18-5 手动创建.text 节
记住，结束地址并不包含在地址范围内。创建.text
 节将seg001
 分割成新的.text
 节，初始文件的所有剩余字节则构成一个名为 seg002
 的新节，它紧跟在.text
 节的后面。
回到节头部，可以看到第二个节，构建成一个IMAGE_SECTION_HEADER
 结构体后，它的代码如下所示：
.headers:004001A0                 db '.rdata',0,0         ; Name  
.headers:004001A0                 dd 60h                  ; VirtualSize  
.headers:004001A0                 dd 2000h                ; VirtualAddress  
.headers:004001A0                 dd 200h                 ; SizeOfRawData  
.headers:004001A0                 dd 0A00h                ; PointerToRawData  
.headers:004001A0                 dd 0                    ; PointerToRelocations  
.headers:004001A0                 dd 0                    ; PointerToLinenumbers  
.headers:004001A0                 dw 0                    ; NumberOfRelocations  
.headers:004001A0                 dw 0                    ; NumberOfLinenumbers
.headers:004001A0                 dd 40000040h            ; Characteristics
使用我们创建.text
 节时分析的数据字段，我们注意到，这个节名为.rdata
 ，在以文件偏移量0A00h
 为起始地址的文件中占用 200h
 个字节，并与 RVA 2000h
 （虚拟地址 402000h
 ）对应。值得注意的是，现在，由于已经移走了.text
 段，我们不能再轻易地将 PointerToRawData
 字段映射到数据库中的一个偏移量。我们需要以这样一个事实为依据：.rdata
 节的内容紧跟在.text
 节的内容之后。换言之，.rdata
 节当前位于 seg002
 的前200h
 个字节中。或者可以逆向创建这些节：首先创建在头部定义的最后一个节，最后创建.text
 节。这种方法先将节放置在其正确的文件偏移量位置，然后将它们移到对应的虚拟地址。
创建.rdata
 节的方法与创建.text
 节的方法类似。第一步，将seg002
 移到402000h
 ；第二步，创建.rdata
 节，其地址范围为 402000h~402200h
 。
在这个特殊的二进制文件中定义的下一个节称为.bss
 节。.bss
 节通常由编译器生成，用于放置在程序启动时需要初始化为零的静态分配的变量（如全局变量）。具有非零初始值的静态变量通常被分配到.data
 （非常量）或.rdata
 （常量）节中。.bss
 节的优势在于，通常它不会占用磁盘镜像的空间，因为操作系统加载器创建可执行文件的内存镜像时，会为该节分配空间。本示例指定的.bss
 节如下所示：
.headers:004001C8                 db '.bss',0,0,0      ; Name  
.headers:004001C8                 dd 40h  ➋           ; VirtualSize  
.headers:004001C8                 dd 3000h             ; VirtualAddress  
.headers:004001C8                 dd 0  ➊             ; SizeOfRawData  
.headers:004001C8                 dd 0                 ; PointerToRawData  
.headers:004001C8                 dd 0                 ; PointerToRelocations  
.headers:004001C8                 dd 0                 ; PointerToLinenumbers  
.headers:004001C8                 dw 0                 ; NumberOfRelocations  
.headers:004001C8                 dw 0                 ; NumberOfLinenumbers  
.headers:004001C8                 dd 0C0000080h        ; Characteristics
其中节头部指出了该节在文件中的大小，SizeOfRawData
 ➊为零，而该节的Virtual- Size
 ➋为0x40
 （64）字节。要在 IDA 中创建这个节，首先需要在以地址 0x403000
 开头的地址空间中创建一个间隙（因为我们没有文件内容来填充该节），然后定义.bss
 来填补这个间隙。创建这个间隙的最简单方法是将二进制文件的剩余的节移到它们正确的位置。整个过程完成后，“段”窗口如下所示：
Name     Start    End      R W X D L Align Base Type   Class  
.headers 00400000 00400400 ? ? ? . . byte  0000 public DATA   ...  
.text    00401000 00401600 ? ? ? . . byte  0000 public CODE   ...  
.rdata   00402000 00402200 ? ? ? . . byte  0000 public DATA   ...  
.bss     00403000 00403040 ? ? ? . . byte  0000 public BSS    ...  
.idata   00404000 00404200 ? ? ? . . byte  0000 public IMPORT ...  
seg005   00404200 004058DE ? ? ? . L byte  0001 public CODE   ...
为了简单，我们省略了代码清单右侧部分。你可能已经注意到，段的结束地址与随后段的起始地址并不相邻。这是因为，在创建这些段时，使用的是它们的文件大小，而没有考虑它们的虚拟大小及所需的任何节对齐。为了使我们的段反映可执行映像的真正布局，我们可以对每个结束地址进行编辑，以填补段之间的任何间隙。
问号表示每个节的权限位的值未知。对于PE文件，这些值通过每个节头部的Characteristics
 字段中的位来指定。除了通过 IDC 编程或使用插件外，你没有办法为手动创建的节指定权限。下面的IDC 语句对前面代码清单中的.text
 节设置执行权限：
SetSegmentAttr(0x401000, SEGATTR_PERM, 1);
遗憾的是，IDC 并没有为每一个被允许的权限定义符号常量。Unix 用户可以轻易记住节的权限位，它们正好与 Unix 文件系统所使用的权限位完全对应。因此，读为 4，写为 2，执行为1。你可以使用按位 OR
 在一个操作中设置几个权限来组合值。
手动加载过程的最后一步是让 x86 处理器模块为我们工作。一旦二进制文件与各种 IDA 节正确对应起来，我们就可以返回我们在头部中发现的程序入口点（RVA 1000h
 ，虚拟地址 401000h
 ），并要求IDA 将那个位置的字节转换为代码。如果我们想要 IDA 在“Exports”（导出）窗口中将该地址列为入口点，我们必须以编程方式指定它这样做。下面是一行 Python 代码，可用于实现这一目的：
AddEntryPoint(0x401000, 0x401000, 'start', 1);
如果以这种方式调用该入口点，IDA 会将其命名为start
 ，然后将其作为导出符号添加，在指定的地址创建代码，并启动递归下降以尽可能详细地分解相关代码。有关 AddEntryPoint
 函数的详细信息，请参阅 IDA 的内置帮助。
如果一个文件以二进制模式加载，IDA 不会自动分析这个文件的内容。此外，IDA 也不会设法确定创建该文件所使用的编译器和该文件导入的库和函数，也不会自动在数据库中加载类型库或签名信息。你很可能需要做大量的工作，才能生成一个和 IDA 自动生成的反汇编代码清单类似的代码清单。实际上，我们甚至还没有触及 PE头部的其他方面，以及如何将这些额外的信息合并到我们的手动加载过程中。
在结束关于手动加载的讨论之前，想象一下，每次你打开 IDA 无法识别的同一类格式的二进制文件时，你都需要重复本节讨论的每一个步骤。以后你可能会选择编写 IDC 脚本，帮助你执行一些头部解析和段创建任务，对你的一些操作进行自动化。这正是我们创建 IDA 加载器模块的动机所在，也是加载器模块的用途所在，我们将在下一节中讨论 IDA 加载器模块。