        "source": "Deep Analysis",
        "report": null
      },
      {
        "status": "not_found",
        "scan_time": "2023-09-20T16:28:04.3376221Z",
        "source": "Microsoft Defender static analysis",
        "report": null
      }
    ],
    "rescan": null,
    "threat_type": null,
    "behavior": {
      "networkTcpIps": [
        "fe80::5052:d740:21d8:bb2c",
        "ff02::1:3",
        "224.0.0.252",
        "13.107.4.50",
        "ff02::1:2",
        "fe80::e8ce:93e9:5411:20b",
        "168.62.124.16",
        "13.107.48.18",
        "104.218.56.90"
      ],
      "files": {
        "Created": [
          "c:\users\[[deep_analysis_user]]\appdata\roaming\microsoft\windows\recent\customdestinations\8nsg1i8j4247xso0uzvi.temp",
          "c:\users\[[deep_analysis_user]]\appdata\roaming\microsoft\windows\recent\customdestinations\d93f411851d7c929.customdestinations-ms~rf15ec4.tmp",
          "c:\users\[[deep_analysis_user]]\appdata\local\temp\cab6f10.tmp",
          "c:\users\[[deep_analysis_user]]\appdata\local\temp\tar6f11.tmp",
          "c:\users\[[deep_analysis_user]]\appdata\local\temp\cab6f32.tmp",
          "c:\users\[[deep_analysis_user]]\appdata\local\temp\tar6f33.tmp",
          "c:\users\[[deep_analysis_user]]\appdata\local\temp\cab8377.tmp",
          "c:\users\[[deep_analysis_user]]\appdata\local\temp\tar8378.tmp",
          "c:\input\dfir-[[deep_analysis_pc]]-2023-09-20\userinformation\activeusers.txt",
          "c:\users\[[deep_analysis_user]]\appdata\local\temp\cab8a48.tmp",
          "c:\users\[[deep_analysis_user]]\appdata\local\temp\tar8a49.tmp",
          "c:\users\[[deep_analysis_user]]\appdata\local\temp\cab8af6.tmp",
          "c:\users\[[deep_analysis_user]]\appdata\local\temp\tar8af7.tmp",
          "c:\users\[[deep_analysis_user]]\appdata\local\temp\cab8b23.tmp",
          "c:\users\[[deep_analysis_user]]\appdata\local\temp\tar8b24.tmp",
          "c:\users\[[deep_analysis_user]]\appdata\local\temp\cab8b92.tmp",
          "c:\users\[[deep_analysis_user]]\appdata\local\temp\tar8b93.tmp",
          "c:\users\[[deep_analysis_user]]\appdata\local\temp\cabae0d.tmp",
          "c:\users\[[deep_analysis_user]]\appdata\local\temp\tarae0e.tmp",
          "c:\users\[[deep_analysis_user]]\appdata\local\temp\cabae2f.tmp",
          "c:\users\[[deep_analysis_user]]\appdata\local\temp\tarae30.tmp"
        ],
        "Modified": null,
        "Deleted": null
      }
    },
    "has_file": false
  },
  "scan_status": "clean"
}
```
:::
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Audit Live Response
:::
::: details-content
::: admonition-content
All commands and scripts that are executed on any device are logged in
the *command log*. This section could also be used to identify which
commands have been executed and if data has been uploaded or exfiltrated
from the device.
![Live Response Audit](/svg/loading.min.svg){.lazyload
data-src="/images/live-response/Commandslogged.png"
data-srcset="/images/live-response/Commandslogged.png, /images/live-response/Commandslogged.png 1.5x, /images/live-response/Commandslogged.png 2x"
data-sizes="auto"}
:::
:::
:::
# Incident Response Scripts
The real value of Live Response can be leveraged when custom scripts are
uploaded. Those scripts are not limited to the basic or advanced syntax,
thus can execute more powerful scripts. The [Incident Response
PowerShell
repository](https://github.com/Bert-JanP/Incident-Response-Powershell){target="_blank"
rel="noopener noreffer"} contains several scripts that can help you to
perform IR, one of them is discussed below.
Let's first start by adding a custom PowerShell script to our Live
Response library. This can be done in the right top corner (see image
below), by clicking *upload file to library*.
![Upload custom IR script](/svg/loading.min.svg){.lazyload
data-src="/images/live-response/Connection2.png"
data-srcset="/images/live-response/Connection2.png, /images/live-response/Connection2.png 1.5x, /images/live-response/Connection2.png 2x"
data-sizes="auto"}
Once the scripts have been uploaded the *library* command can be
executed to list all the available IR scripts. In our case, the
[DFIR-script.ps1](https://github.com/Bert-JanP/Incident-Response-Powershell/blob/main/DFIR-Script.ps1){target="_blank"
rel="noopener noreffer"} is uploaded and ready to be used.
![List uploaded scripts](/svg/loading.min.svg){.lazyload
data-src="/images/live-response/Listscripts.png"
data-srcset="/images/live-response/Listscripts.png, /images/live-response/Listscripts.png 1.5x, /images/live-response/Listscripts.png 2x"
data-sizes="auto"}
## DFIR Script
The [DFIR
script](https://github.com/Bert-JanP/Incident-Response-Powershell/blob/main/DFIR-Script.ps1){target="_blank"
rel="noopener noreffer"} collects information from multiple sources and
structures the output in the current directory in a folder named
'DFIR-hostname-year-month-date'. This folder is zipped at the end so
that the folder can be remotely collected.
-   Local IP Info
-   Open Connections
-   Aautorun Information (Startup Folder & Registry Run keys)
-   Active Users
-   Local Users
-   Connections Made From Office Applications
-   Active SMB Shares
-   RDP Sessions
-   Active Processes
-   Active USB Connections
-   Powershell History
-   DNS Cache
-   Installed Drivers
-   Installed Software
-   Running Services
-   Scheduled Tasks
For the best experience run the script as admin, then the following
items will also be collected:
-   Windows Security Events
-   Remotely Opened Files
-   Shadow Copies
## Execute DFIR Script
The DFIR script can be executed by running the following command:
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
run DFIR-script.ps1
```
:::
![DFIR Script Execution](/svg/loading.min.svg){.lazyload
data-src="/images/live-response/ScriptExecution.png"
data-srcset="/images/live-response/ScriptExecution.png, /images/live-response/ScriptExecution.png 1.5x, /images/live-response/ScriptExecution.png 2x"
data-sizes="auto"}
This script outputs all the results in a .zip as mentioned above. But
this .zip file is stored on the remote device. Of course, we can use
live response to collect the file for further analysis. This can be done
by using the *getfile* command. This downloads the file to your local
machine.
![Collect output](/svg/loading.min.svg){.lazyload
data-src="/images/live-response/getfile.png"
data-srcset="/images/live-response/getfile.png, /images/live-response/getfile.png 1.5x, /images/live-response/getfile.png 2x"
data-sizes="auto"}
Now the incident responder can investigate the logs for malicious
content. This can be really valuable since more information can be
collected this way, than by collecting the [*Investigation
Package*](DFIRScriptContent){rel=""}.
![DFIR Script ouput](/svg/loading.min.svg){.lazyload
data-src="/images/live-response/DFIRScriptContent.png"
data-srcset="/images/live-response/DFIRScriptContent.png, /images/live-response/DFIRScriptContent.png 1.5x, /images/live-response/DFIRScriptContent.png 2x"
data-sizes="auto"}
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Collection Windows Security Events
:::
::: details-content
::: admonition-content
Even though you might not ingest Windows Security Events in your SIEM,
they can still add value in your incident response process. The script
to collect the events and output them as CSV is already available for
you:
[CollectWindowsSecurityEvents.ps1](https://github.com/Bert-JanP/Incident-Response-Powershell/tree/main/Scripts){target="_blank"
rel="noopener noreffer"}. Now it is up to you to replicate the steps
above to upload, run and collect the results.
To analyze the Windows Security events take a look at [Part 2 of the
Incident Response
series](https://kqlquery.com/posts/kql-incident-response-everything-else/){target="_blank"
rel="noopener noreffer"}, that part will explain how you can analyze the
results using Data Explorer.
:::
:::
:::
# Community Scripts
Before you start asking CHAT-GPT or BingChat to create some incident
response PowerShell scripts have a look at what the community already
provided.
-   [Powershell Digital Forensics & Incident
    Response](https://github.com/Bert-JanP/Incident-Response-Powershell){target="_blank"
    rel="noopener noreffer"}
-   [M365 MDATP Live Response sample
    scripts](https://github.com/YongRhee-MDE/LiveResponse){target="_blank"
    rel="noopener noreffer"}
-   [Remote collection of Windows Forensic Artifacts using KAPE and
    Microsoft Defender for
    Endpoint](https://medium.com/@DFIRanjith/remote-collection-of-windows-forensic-artifacts-using-kape-and-microsoft-defender-for-endpoint-f7d3a857e2e0){target="_blank"
    rel="noopener noreffer"}
# Conclusion
This was the last part of the incident response series, covering
responding using KQL, Azure Data Explorer and Live Response. I hope that
you learned a thing or two ;). What all the parts of the series have in
common is that **preparation is key!** All examples that are shown can
be used very effectively, but you need to test and tune them to your
environment beforehand.
Some tips from my side to prepare for incident response scenarios:
1.  Prepare (or gather) KQL queries for common attack scenarios that
    will help you effectively investigate suspicious actions.
2.  Research which common techniques are covered in the data you ingest
    in your SIEM solution. If possible fill the gaps with data you can
    collect when needed. This data can then be analyzed with KQL using
    Data Explorer as discussed in [Part
    2](https://kqlquery.com/posts/kql-incident-response-everything-else/){target="_blank"
    rel="noopener noreffer"}.
3.  Prepare (or gather) live response scripts that can cover the gaps as
    mentioned in step 2.
4.  Test, test and test. Run a scenario and see what happened, not only
    on the technical side but also on the people and process part.
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Related Blogs
:::
::: details-content
::: admonition-content
-   [KQL Functions For Security
    Operations](https://kqlquery.com/posts/kql-for-security-operations/){target="_blank"
    rel="noopener noreffer"}
-   [Incident Response Part 1: IR on Microsoft Security Incidents (KQL
    edition)](https://kqlquery.com/posts/kql-incident-response/){target="_blank"
    rel="noopener noreffer"}
-   [Incident Response Part 2: What about the other
    logs?](https://kqlquery.com/posts/kql-incident-response-everything-else/){target="_blank"
    rel="noopener noreffer"}
:::
:::
:::
> **Questions?** Feel free to reach out to me on any of my socials.
:::
::: {#post-footer .post-footer}
::: post-info
::: post-info-line
::: post-info-mod
Updated on 2023-10-26
:::
:::
::: post-info-line
::: post-info-md
:::
::: post-info-share
[](javascript:void(0); "Share on Twitter"){sharer="twitter"
url="https://kqlquery.com/posts/leveraging-live-response/"
data-title="Incident Response Part 3: Leveraging Live Response"
via="BertJanCyber"
hashtags="PowerShell"}[](javascript:void(0); "Share on Facebook"){sharer="facebook"
url="https://kqlquery.com/posts/leveraging-live-response/"
hashtag="PowerShell"}[](javascript:void(0); "Share on Linkedin"){sharer="linkedin"
url="https://kqlquery.com/posts/leveraging-live-response/"}[](javascript:void(0); "Share on Reddit"){sharer="reddit"
url="https://kqlquery.com/posts/leveraging-live-response/"}
:::
:::
:::
::: post-info-more
::: {.section .post-tags}
 [PowerShell](/tags/powershell/)
:::
::: section
[Back](javascript:void(0);){onclick="window.history.back()"} \| [Home](/)
:::
:::
::: post-nav
[Incident Response Part 2: What about the other
logs?](/posts/kql-incident-response-everything-else/ "Incident Response Part 2: What about the other logs?"){.prev
rel="prev"} [KQL Functions For Network
Operations](/posts/kql-for-network-operations/ "KQL Functions For Network Operations"){.next
rel="next"}
:::
:::
:::
:::
::: footer-container
::: {.footer-line itemscope="" itemtype="http://schema.org/CreativeWork"}
[2023 - 2024]{itemprop="copyrightYear"}[ [Bert-Jan
Pals](/){target="_blank"}]{.author
itemprop="copyrightHolder"} \| [©]{.license}
:::
:::
:::
::: {#fixed-buttons}
[](# "Back to Top"){#back-to-top .fixed-button}
[](# "View Comments"){#view-comments .fixed-button}
:::