title:What Mobile Ads Know About Mobile Users
author:Sooel Son and
Daehyeok Kim and
Vitaly Shmatikov
What Mobile Ads Know About Mobile Users
Sooel Son
Daehyeok Kim
Vitaly Shmatikov
Google
KAIST
Cornell Tech
Abstract
We analyze the software stack of popular mobile adver-
tising libraries on Android and investigate how they protect
the users of advertising-supported apps from malicious
advertising. We ﬁnd that, by and large, Android adver-
tising libraries properly separate the privileges of the ads
from the host app by conﬁning ads to dedicated browser
instances that correctly apply the same origin policy.
We then demonstrate how malicious ads can infer sensi-
tive information about users by accessing external storage,
which is essential for media-rich ads in order to cache
video and images. Even though the same origin policy
prevents conﬁned ads from reading other apps’ external-
storage ﬁles, it does not prevent them from learning that a
ﬁle with a particular name exists. We show how, depending
on the app, the mere existence of a ﬁle can reveal sensitive
information about the user. For example, if the user has
a pharmacy price-comparison app installed on the device,
the presence of external-storage ﬁles with certain names
reveals which drugs the user has looked for.
We conclude with our recommendations for redesigning
mobile advertising software to better protect users from
malicious advertising.
I.
Introduction
Many mobile apps rely on advertising for at least part of
their revenue. An advertising-supported app typically in-
corporates multiple advertising libraries (AdSDKs). While
the app is running, each AdSDK fetches ads from its
servers, where they have been uploaded by advertisers, and
displays them to the app’s user.
Business imperatives are driving the development of
re-
mobile advertising technology. To increase users’
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full
citation on the ﬁrst page. Reproduction for commercial purposes is strictly
prohibited without
the prior written consent of the Internet Society,
the ﬁrst-named author (for reproduction of an entire paper only), and
the author’s employer if the paper was prepared within the scope of
employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23407
sponse to their ads, advertisers demand that AdSDKs
support media-rich, active ads with JavaScript, images, and
video. Consequently, modern AdSDKs provide facilities
for MRAID (Mobile Rich Media Ad Interface Deﬁnitions),
including local caching of ad content. Furthermore, mobile
ads are fetched dynamically and often originate from other
advertising networks, exchanges, brokers, and auctions.
Redirection, obfuscation, and proliferation of active
content with new features make it difﬁcult for AdSDKs
to analyze or sanitize the content of the ads they serve.
Therefore, AdSDKs must
treat each ad as potentially
untrusted and isolate it to prevent it from damaging the
user’s device or extracting sensitive information.
AdSDKs on Android solve this challenge by applying
privilege separation. They show ads in a separate instance
of the embedded WebView browser that does not have the
same permissions as the host app and the AdSDK. For the
purposes of this paper, we assume that WebView correctly
enforces the same origin policy and prevents JavaScript in
mobile ads from reading any content from other origins,
including local ﬁles on the device.
Our contributions. We study mobile ad isolation in four
popular Android AdSDKs (AdMob, MoPub, AirPush and
AdMarvel) and investigate what a fully conﬁned, privilege-
separated mobile ad can learn about
the user of the
device on which it is displayed. In contrast to prior work,
which focused on threats presented by malicious apps and
advertising libraries, the capabilities of our attacker are
very restricted. We assume that all apps on the user’s
device are benign, AdSDKs are benign as well, and the
attacker cannot monitor or modify the user’s network
communications. The only attack vector available to a
malicious advertiser is an ad-supported app that runs on the
user’s device and displays the attacker’s ads in a conﬁned
WebView instance.
On modern Android devices, external storage is a shared
cache where multiple apps store their ﬁles. As mentioned
above, mobile ads need access to external storage, too, in
order to cache videos and images. That said, when the
same origin policy is enforced correctly, JavaScript in a
malicious ad cannot read external-storage ﬁles belonging
to other apps (although we demonstrate an exception in a
popular AdSDK, which has serious privacy consequences).
The standard same origin policy, however, does not
prevent an ad from determining whether a resource with
a particular name exists on the device. We explain how
a malicious ad running in any Android AdSDK can use
this “local resource oracle” to infer sensitive informa-
tion—which medications the user is taking,
the user’s
gender preference in dating, his or her social circle, and
even identity—if the user has been using certain apps on
his or her device. Many apps cache ﬁles with predictable
names in external storage in a way that depends on the
user’s in-app activities: a pharmacy shopping app caches
images of the drugs that
the user has searched for, a
dating app caches the proﬁles that the user has looked
at, etc. By attempting to load certain external-storage
ﬁles and seeing which loads succeed, a mobile ad can
infer sensitive information about the user even though it
cannot read the loaded ﬁles. We also demonstrate how the
leakage of location information combined with the device
identiﬁer in one of the AdSDKs in our study enables
malicious advertisers to construct partial trajectories of
users’ movements.
We conclude with our proposed short-term defense and
long-term recommendations for re-designing the Android
advertising software stack to better protect mobile users
from malicious advertising.
II. Mobile advertising ecosystem
Mobile advertising helps developers of mobile apps
obtain revenue without directly charging users. Therefore,
advertising is a key component of the mobile app ecosys-
tem. Mobile advertising is typically integrated into mobile
apps via an advertising library or SDK (AdSDK), which
fetches and displays mobile ads while the app is running.
Over 41% of apps in the Google Play Store include at
least one mobile advertising library [6], and it is common
for a single app to include several libraries from multiple
advertising providers [37].
An Android AdSDK is a typically a third-party JAR
library, which is intended to be included into the app’s
code with minimal changes and whose business logic is
opaque to the app’s developer. The code of an AdSDK
runs with the same privileges as its host app. If the AdSDK,
or the ads it is fetching and displaying, need a particular
permission, the app must request this permission from the
user even if it is not needed by the app’s core function-
ality. Some AdSDKs abused these permissions to collect
permanent device identiﬁers or sensitive information about
the user [22, 46]. As we explain in Section III-C, the
information collected by the AdSDK is typically used by
the advertising service internally to decide which ads to
show, but most of it is not disclosed to the ads, nor to the
advertisers who created these ads.
In the rest of this section, we explain the trust rela-
tionships between apps, AdSDKs, and advertisers, and list
the information that may be available to an AdSDK when
choosing ads to show to the user.
Fig. 1: Mobile advertising ecosystem
A. Participants
Figure 1 shows a highly simpliﬁed overview of the
mobile advertising ecosystem. The three main participants
are mobile app developers or publishers, AdSDK providers
(mobile advertising services), and advertisers.
Advertisers or their agencies upload advertising cre-
atives as text, images, URLs, JavaScript, or HTML to the
advertising networks managed by AdSDK providers. As
mentioned above, app developers integrate AdSDKs into
their apps. While the app is running, each AdSDK sends
HTTP(S) requests to the servers of its advertising network
and receives creatives written in HTML, JSON, or XML.
AdSDK then displays the received creatives within Web-
View instances [51]. Each creative delivered and displayed
on a mobile device is called an advertising impression;
impressions are one of the measurement units used to
charge advertisers. Section III describes the software stack
used to support this advertising model on Android.
AdSDK providers play an essential role in connecting
advertisers and app developers. Providers release AdSDK
libraries and maintain advertising servers, which serve
many types of advertising creatives, including banner and
full-screen impressions. To maximize the click-through
rates of their impressions, advertisers seek to enrich users’
experience by making impressions more dynamic and
responsive. To this end, AdSDKs have started to sup-
port mobile rich media advertisement interface deﬁnitions
(MRAID) [26]. MRAID allows advertising creatives to
be written in HTML and to invoke a limited set of
JavaScript methods that require native-level functionalities.
For instance, an MRAID advertising creative can invoke
mraid.storeP icture to store images on a mobile device.
As Figure 1 illustrates, a creative delivered to mobile
devices is not
to the creative that was sub-
mitted by an advertiser. AdSDK providers rewrite the
creatives and add extra functionalities for interacting with
users. For instance, AdMob adds a button that lets users
turn off interest-based advertisement or report offensive
advertising impressions. Furthermore, AdSDK providers
insert trackers into creatives (see Section II-C). Trackers
notify advertisers or AdSDK providers whether delivered
creatives are indeed displayed on users’ devices.
identical
2
B. Threats
For the purposes of this paper, we assume that the
mobile apps and the AdSDKs are benign, but advertisers
are untrusted and their impressions may contain malicious
content. The attacker’s capabilities in this model are sig-
niﬁcantly weaker than in the prior literature on the security
and privacy of mobile advertising (see Section VIII),
which focused on threats from malicious apps and abusive
AdSDKs. That said, advertising-supported mobile apps are
very popular, thus a malicious advertiser has many more
opportunities to have his creatives displayed on users’
devices than a malicious app creator, who must evade app-
store ﬁlters and convince users to install his apps.
This threat model is realistic in today’s mobile advertis-
ing ecosystem. In the U.S. and Europe, apps usually come
from trusted app stores, are vetted by platform providers,
and installed voluntarily by users. AdSDKs are typically
developed and deployed by trusted advertising services
such as AdMob and MoPub, which have their reputation at
stake and are thus incentivized to ensure that their AdSDKs
do not abuse the permissions granted to them.
Advertising impressions, on the other hand, often pass
through multiple layers of brokers, auctions, and exchanges
before arriving to users’ devices. Because of this indi-
rection, the exact origin of a given ad may be opaque.
AdSDK providers depend on real-time monitoring and
manual review to prevent malicious advertisers from serv-
ing offensive or malicious creatives, but these measures
are not perfect. Filtering dynamic, active content such as
JavaScript is notoriously difﬁcult, thus it is not always
feasible for advertising services to ensure that all mobile
ads they serve are free of malicious content, especially if
the content in question is stealthily snooping on the user
rather than actively trying to install malware.
Therefore, modern AdSDKs treat ads as untrusted
content and conﬁne them to ensure that
they cannot
access sensitive information on the devices where they
are displayed. In Section III, we describe the technical
conﬁnement mechanisms used by AdSDKs.
C. Information collected by AdSDKs
Both advertisers and advertising services commonly
“track” users, i.e., link activities performed by the same
user in order to build detailed user proﬁles, learn users’
interests, and better target their advertising.
In the conventional Web ecosystem, tracking is often
performed using third-party cookies [32], although there
are several other mechanisms [1, 35]. In the mobile ecosys-
tem, advertising impressions are displayed not in conven-
tional Web browsers but in WebView instances integrated
into mobile apps. Because WebView instances hosted by
different apps do not share cookies or any other browser
state, AdSDK providers rely on device identiﬁers [27].
Table I shows common identiﬁers used by AdSDKs on
Android. Google Advertising ID (GAID) is a pseudony-
mous identiﬁer that can be reset by the user. The other
3
Identiﬁer
GAID
Android ID
IMEI
IMSI
MAC address
Description
User-resettable 32-digit alphanumeric
identiﬁer
64-bit number randomly generated when
device is set up for the ﬁrst time [5]
15-digit decimal identiﬁer representing
GSM or LTE device
15-digit decimal identiﬁer representing
mobile subscriber identity
48-bit number assigned to the device’s
Wi-Fi network interface
Attribute
Pseudonymous
Semi-permanent
Permanent
Permanent
Permanent
TABLE I: Android device identiﬁers
identiﬁers are permanent and cannot be controlled by the
user (Android ID is semi-permanent because it can be reset
only when the device is restored to its factory setting).
Since August 2014, Google Play developer program policy
requires Android apps to use GAID [2]. However, GAID
is only available on mobile devices that have the Google
Play service installed, and many Android devices without
the Google Play service still use permanent identiﬁers.
Device identiﬁers play a key role for counting user
clicks and advertising impressions served to the user. AdS-
DKs attach identiﬁers to HTTP(S) requests that they send
to their providers’ advertising servers, enabling the latter to
link requests coming from the same device. Some AdSDKs
also make device identiﬁers available to the advertising
creatives they display, enabling the trackers embedded in
these creatives to send the identiﬁers to advertisers. These
trackers are implemented using JavaScript or image DOM
elements (tracking pixels).
AdSDKs typically need access to geolocation and ex-
ternal storage on the device. Location is used to serve
geotargeted advertising because the GPS coordinates from
the device’s onboard sensor are more accurate than the
approximate location inferred from the device’s IP ad-
dress. Many AdSDKs attach location data to advertising
requests [46]. External storage is needed by media-rich
advertising creatives to cache video and image ﬁles. From
the user’s viewpoint, requests for these permissions come
from the mobile app itself. The user cannot tell whether
the app intrinsically requires these permissions for its core
functionality or is requesting them for the beneﬁt of one
of several AdSDKs integrated into the app’s code.
We investigated four popular AdSDK to determine what
information they (1) send to AdSDK providers and (2)
make available to advertisers. For this study, we integrated
each AdSDK into an Android test app following the
provider’s integration guidelines and then used a proxy
server to analyze advertising requests sent by the AdSDK.
Table II shows the results of our study. Observe
that MoPub lets advertisers collect both the location
and the device identiﬁer [33], although ﬁne-grained lo-
cation is available only if the host app has the ACC-
ESS FINE LOCATION permission. MoPub asks devel-
opers to request ACCESS COARSE LOCATION on
its behalf, not ACCESS FINE LOCATION, but an app
may still require ﬁne-grained location for its core func-
tionality. Since GAID is pseudonymous, in theory users
AdSDK
Fine Loc
Information sent to AdSDK providers (AdSDK) or advertisers (Ads)
Android ID
H(Android ID)
AdMob [4]
MoPub [33]
AirPush [36]
AdMarvel [3]
+ Information sent only if Google Play Services are present on the device.
−
AdSDK −, Ads −
AdSDK, Ads
Ads −