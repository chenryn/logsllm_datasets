8317
1034
16662
BW
29
134
124
68
20
9
88
12
711
58
179
54
211
212
4
TABLE V: List of DDoS victims found in the Netﬂow dataset. V
denotes the victim’s identiﬁer, |M| the number of ampliﬁers, Volume
the total attack volume measured in MB, and BW the average attack
bandwidth in Mbit/s.
We veriﬁed our ﬁndings by discussing them with the ISP’s
CERT. All the DNS-based attack victims were known to the
CERT due to basic alerting systems in their networks and the
attacks could be conﬁrmed. Three of the CharGen-based at-
tacks could be conﬁrmed by correlating the victim’s IP address
with the target of preceding DNS-based attacks. The fourth
CharGen-based attack, although relatively small in bandwidth,
severely interfered with a DSL-connected customer. The CERT
was not aware of any DRDoS attack that we did not detect,
indicating a low false negative rate. However, the CERT had
been affected by SNMP-based ampliﬁcation attacks outside
of the timespan that we monitored. This shows that attackers
already abuse some of the protocols which we found to be
prone to DRDoS abuse.
D. Real-world Ampliﬁer Abuse
Next, we aim to identify legitimate services that are abused
as ampliﬁers during a DRDoS attack. Our goal is thus not to
identify the DRDoS victim (as in Section IV-C), but to detect
the ampliﬁcation abuse itself as a ﬁrst step towards service
hardening and egress ﬁltering.
Detecting the abuse of ampliﬁers is signiﬁcantly more
difﬁcult than identifying DRDoS victims. The ratio between
in- and outgoing bytes of victims was quite distinctive in
the previous context. With ampliﬁers, a few complications
are added to the detection. First, ampliﬁers act as servers
and are thus also used by many other,
legitimate clients.
Legitimate clients may have the normal demand for high-
bandwidth communication, thus (again) the bandwidth alone is
not a good indicator for abuse. Second, as opposed to DRDoS
victims, ampliﬁers always have both, incoming and outgoing
trafﬁc within a client/server pair.
Fig. 3: An scenario where A abuses M as ampliﬁer to attack V ,
while M also has two legitimate clients in the internal network (b,
c) and one external client (a).
Figure 3 illustrates a setting in which an ampliﬁer M is
used by three legitimate clients, two of which are internal
(b, c) and one outside the ISP’s network (a). An attacker A
abuses the ampliﬁer to reﬂect trafﬁc to an external victim V . To
detect this abuse in a similar way than we detected the DRDoS
victims, we have to relax the constraint of the expected ratio
between in- and outgoing bytes. From the ISP’s perspective,
V and M have a relatively normal conversation, as the ISP
cannot detect that the attacker spoofs V ’s IP address. What
remains remarkable is a high ampliﬁcation ratio of factor 30
between in- and outgoing bytes between M and V . However,
this alone is not sufﬁciently descriptive, as legitimate clients
may also show similar behavior. For example, the legitimate
client b may request DNSSEC records from M, resulting in
similar ampliﬁcation rates.
Nevertheless, we can re-use the technique presented in
Section IV-C, but with different ﬁltering thresholds. Based on
our insights on average ampliﬁcation rates from Section III, we
chose to ﬂag pairﬂows with (more than) a ﬁvefold BAF, i.e., we
set Tr = 5.0. To focus on aggressive attacks and limit the num-
ber of false positives, we set the threshold for the minimum
number of bytes sent by a potential ampliﬁer to 10 MB, i.e.,
TB = 10,000,000. We further aim to detect ampliﬁers within
the ISP’s network. We thus discard all pairﬂows with external
servers (potential ampliﬁers), i.e., servers that are outside of
the authority of the ISP (and its customers). In favor of fewer
alerts for manual inspection, we also discard pairﬂows with
an average bandwidth of less than 10 Kbit/s. This may cause
that we miss low-volume attacks, but it helps to ﬁlter out the
large number of legitimate client/server pairs with low-volume
communication.
9
VbcM35kB/s972kB/s281kB/s179kB/s3MB/s0kB/s90MB/s45kB/s97kB/sInternalExternalaAResults: Our method ﬂagged 143 pairﬂows in the Netﬂow
dataset as suspicious. We again discussed our insights with the
CERT to evaluate our results. We spotted six open recursive
DNS resolvers that were abused in 55 DRDoS attacks with
BAF between 34–67. In addition, one authoritative name server
was abused in three DRDoS attacks. Our methodology also
ﬂagged four closed DNS recursive resolvers as suspicious.
These servers were mistakenly ﬂagged as ampliﬁers as they
tried to resolve domains from authoritative name servers (all
of which at mail.ru) that faced packet loss and thus rarely
responded to requests. In these cases, the number of packets
and therefore the volume sent was much larger than the volume
of the received responses.
Next to DNS, we identiﬁed four CharGen servers that were
abused to attack 57 victims. The ampliﬁcation factors varied
per CharGen server from 318 to 1395 and was determined by
the length of the response string by the server. We also found
ﬁve SNMP-enabled devices that showed suspicious behavior.
In two separate time spans, one 55 min, another 1:20h, these
devices were abused for simultaneous low-volume attacks with
35 Kbit/s each. Lastly, we found alerts for potential abuses of
three Steam game servers. Unfortunately, we could not verify
these alerts, as the servers had already been taken ofﬂine when
we manually investigated them.
In a different experiment, we inspected the trafﬁc recorded
at our ampliﬁer baits. We observed one case where our
CharGen server was abused as DRDoS ampliﬁer. The attack
started just 14 minutes after the server was ﬁrst discovered
by a host – showing how fast attackers act from identifying
ampliﬁers to abusing them. In seven further incidents, we
found that our Quake 3 game server was abused, in all cases
exactly in the way we describe the attack in Section III. None
of the baits in the P2P networks, neither the benign networks
nor the malicious botnets, were abused in DRDoS attacks. We
had to ignore eight alerts that were caused by UDP-based and
session-aware ﬁle downloads, though, which legitimately have
high ampliﬁcation factors.
Overall, we have identiﬁed dozens of real-world ampliﬁca-
tion DRDoS attacks, showing that ampliﬁcation vulnerabilities
are indeed a problem. Attackers are already exploiting the
ampliﬁcation potential of game server protocols, CharGen,
DNS and SNMP, and will
likely explore further protocol
vulnerabilities in the future.
V. COUNTERMEASURES
We have shown that DRDoS attacks pose a problem
to network administrators, ISPs or even Internet Exchange
Points, which is also documented by past attacks [16, 15, 36].
In this section, we therefore discuss proactive and reactive
countermeasures against DRDoS attacks.
A. Preventing IP Address Spooﬁng
The root cause of ampliﬁcation attacks is that an attacker
can force ampliﬁers to reﬂect responses to victims by spooﬁng
the source IP address. If spooﬁng was not possible, our threat
model and hence all attacks would be mitigated. Lots of effort
has thus been spent on disabling IP source address spooﬁng.
For example, Ferguson and Senie suggest to drop all packets
that do not have IP source addresses an exit router is re-
sponsible for [21]. Many providers acted and prevent spooﬁng
nowadays so that attackers cannot abuse their networks for
ampliﬁcation attacks.
Unfortunately, still a signiﬁcant number of providers allow
IP address spooﬁng. The Spoofer Project, to our knowledge
the best public resource for measures of such kind, stated in
August 2013 that 24.6% of the Autonomous Systems fully
allow and further 13.9% at least partially allow IP address
spooﬁng [1]. Geographical tests show that the networks that
support spooﬁng are distributed worldwide, i.e., we do not face
a regional problem. While we advocate to ban IP spooﬁng, it
remains unclear if at some point all networks will mitigate IP
address spooﬁng.
B. Protocol Hardening
Despite IP address spooﬁng, we found that many protocols
were designed without considering the security implications of
DRDoS attacks. In this section, we will discuss complementary
ways to harden protocols against ampliﬁcation abuse.
1) Session Handling: One of the core issues we identi-
ﬁed is that ampliﬁcation attacks are possible if UDP-based
protocols do not require sessions. For example, the three-
way handshake in TCP would not complete for spoofed IP
addresses and thus effectively mitigates our threat model. A
possible solution for the vulnerable UDP-based protocols is
thus to include similar session handling.
In fact, a few more recent protocols already include session
handling. For example, the QUIC protocol, an UDP-based
version of Google’s SPDY protocol, assigns a source address
token to the client. The token is an authenticated-encryption
block that contains the client’s IP address and a timestamp.
Receipt and successful retransmission of the token by the
client is taken as proof of ownership of the IP. Similarly, in
some BitTorrent tracker implementations, the servers compute
a “connection ID” and send it to the client. Only if the client
retransmit this ID in future requests the tracker will respond. In
Steam, clients have to request a 4-byte-wide challenge before
they can request more elaborate server information, such as
the list of players. In DTLS, a UDP-based variant of TLS, the
server can issue stateless cookies to a client, which a client
must include in follow-up communication. The server proceeds
communication only if it can verify the cookie.
Session handling prevents ampliﬁcation attacks only if all
request types vulnerable to ampliﬁcation demand prior session
instantiation. For example, in the Steam protocol, we found a
BAF of 14.7 for the request types that do not require prior
session agreement. The other downside of sessions is that
they decrease the efﬁciency of protocols. First, establishing a
session may add latency to the initial communication. Second,
the client needs to prove its session within each request, adding
extra bytes to each request.
Lastly, it is tricky – if not impossible – to add session
handling to existing protocols without breaking compatibility
with legacy clients. Session handling typically needs to be
included during a protocol’s design phase and before the
protocol is deployed. A possible solution for protocols that
use UDP and TCP (such as DNS) is switching to TCP mode
if responses exceed a size threshold.
10
2) Request/Response Symmetry: An alternative strategy to
reduce the ampliﬁcation rate is demanding that requests are
similarly large as the expected responses. A server that receives
a request that is “too small” will not, or only partially, respond
to the request, without
the need of any session handling.
Protocols hardened in such a way are not vulnerable for
ampliﬁcation attacks, which causes that many of the existing
protocols cannot be abused by attackers. The downside is that
the efﬁciency of the protocol drops and the clients/servers face
higher loads even in the benign use case.
3) Rate Limiting: Another strategy to harden a protocol is
to limit the number of requests a client may issue. In fact,
a few protocol implementations already deploy rate limiting.
For example, a Reponse Rate Limiting feature is currently
integrated into popular DNS name servers [38]. Administrators
can conﬁgure DNS servers such that they limit the number of
responses per subnet in a given time interval, falling back to
truncated messages if the limit is exceeded. Recent Quake 3
server implementations only respond with a single status report
per requesting IP address and second. Kad implementations
like eMule count the client requests and blacklist peers that
send too many requests. And even in malicious networks like
the Gameover botnet rate limiting is in place – IP addresses are
permanently blacklisted if they issue more than ten requests
per minute [2].
Rate limiting helps to protect against excessive abuse of a
single ampliﬁer. However, an attacker may choose to abuse an
ampliﬁer at a low request rate, such as one request per second.
A single ampliﬁer does not exhibit large amounts of trafﬁc in
such an attack. Combining millions of ampliﬁers results in high
accumulated attack bandwidths, though. We therefore seek to
understand how powerful ampliﬁcation attacks can be even in
presence of rate limiting.
Protocol
SNMP v2
NTP
DNSNS
DNSOR
NetBios
SSDP
CharGen
QOTD
BitTorrent
Kad
Quake 3
Steam
ZAv2
Sality
Gameover
Ampliﬁers
4,832,000
1,451,000
1,404
7,782,000
2,108,000
3,704,000
89,000
32,000
5,066,635
232,012
1,059
167,886
27,939
12,714
2,023
resplen
257.5
4454.8
1178.2
2238.6
191.3
2917.2
358.8
140.3
360.8
543.8
831.2
136.7
575.4
522.8
1999.2
BW in Gb/interval
/24
/32
2546.7
9.8
13,240.0
51.7
0.0
3.4
1,172.8
4.6
826.1
3.2
22,225.1
86.8
65.7
0.3
0.0
9.1
3,743.8
14.6
258.4
1.0
0.0
1.8
47.0
0.2
32.9
0.1
13.6
0.1
0.0