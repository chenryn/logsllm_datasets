● can be anywhere from 50 to a million distinct channel hops 
before the pattern repeats (or more)
– must be able to synchronize with an existing cell or partner
● or become your own master!
– must know channel spacing
– must know channel dwell time (time to sit on each channel)
– likely need to reverse engineer your target
– DSSS requires that you have special hardware
●
military application will be very hard to crack, as it typically will have hops 
based on a synchronized PRNG to select channels
0x4030 – FHSS, the saving graces 
● any adhoc FHSS multi-node network: (power meters / sensor-nets)
– node sync in a reasonable timeframe
● limited channels in the repeated pattern
– each node knows how to talk to a cell
● let one figure it out, then tap the SPI bus to see what the 
pattern is...
● two keys to determining hopping pattern:
– hop pattern generation algorithm 
● often based on the CELL ID
– one pattern gets you the whole cell :)
● others generate a unique pattern per node
– some sync information the cell gives away for free
● gotta tell the n00bs how to sync up, right?
● for single-pass repeating sequences, it's just the channel
0x4040 – FHSS summary
● FHSS comes in different forms for different uses and 
different users
● FHSS is naturally tolerant to interference, and allows a 
device to transmit higher power than nonFHSS comms
● getting the FHSS pattern, timing, and appropriate sync 
 method for proprietary comms can be a reversing 
challenge
● getting a NIC to do something with the knowledge 
gained above has – to date – been very difficult
0x5000 – intro to RfCat
● RfCat: RF Chipcon-based Attack Toolset
● RfCat is many things, but I like to think of it as an interactive 
python access to the  modulation!
● other characteristics discovered using a USRP and baudline 
(and some custom tools, thanks Mike Ossman!)
0x6010 – the discovery process
● glucometer was first captured using Spectrum Analyzer 
(IMME/hedyattack) to validate frequency range from the lay-
documentation
● next a logic analyzer (saleae) used to tap debugging lines
● next, the transmission was captured using a USRP (thank you 
Mike Ossman for sending me your spare!) - alt: FunCube
● next, the “packet capture” was loaded into Baudline, and 
analysis performed to identify baudrate and modulation 
scheme, and get an idea of bits
● next, Mike Ossman did amazing-sauce, running 
the capture through GnuRadio Companion 
(the big picture on next slide)
● RF parameters confirmed through RF analysis, 
and real-life capture.
0x6011 – discovery reloaded
0x6020 –the immaculate reception
●
punched in the RF parameters into a RFCAT dongle
– created subclass of RFNIC (in python) for new RF config
●
dropped into “discover” mode to ensure I had the modem right
●
●
●
●
●
●
returned to normal NIC mode to receive real packets
●
now need the pump to reverse the bi-dir protocol
0x6100 – playing with a power meter
● CAUTION: MUCKING WITH POWER SYSTEMS WITHOUT APPROPRIATE 
AUTHORIZATION IS ILLEGAL, EVEN IF IT IS ON THE SIDE OF YOUR HOUSE!
●
most power meters use their own proprietary “Neighborhood Area Network” 
(NAN), typically in the 900MHz range and sometimes 2.4GHz or licensed 
spectrum.
●
to get the best reception over distance and gain tolerance to interference, all 
implement FHSS to take advantage of the Title 47: Part 15 power 
allowances
●
many of the existing meters use the same cc1111 or cc1110 chips, or the 
cc1101 radio core
●
this is the reason I'm here today
0x6110 – as sands through the hourglass
● power meter RF comms have long been “unavailable” for 
most security researchers
● some vendors understand the benefits of security 
rigor by outside researchers
– others, however, do not.
● the gear used in my presentation was given to me by one 
who understands
– for various reasons, they have asked to remain 
anonymous, however, their security team has a 
well founded approach to finding out “how their 
baby is ugly”  I would like to give them credit for 
their commitment to the improved security of their 
products.
atlas, tell us what you really think
0x6120 – smart meter – the complication
●
power meters are not so simple as glucometers
– proprietary FHSS in a multiple-access topology
– have to endure the RF abuse of the large metropolis
●
complex mac sync/net-registration
●
not easy to show with a single meter without a Master node.
●
initial analysis was performed via my saleae LA:
●
SpecAn code on IMME's and hedyattack dongles
– good for identifying periods of scanning
●
although the dongle can hop along with the meter, we won't be 
demoing synching with the meter today
0x6130 – the approach
●
determine the rf config and hopping pattern through SPI Bus sniffing 
(and my saleae again)
●
●
0x6135 – Logic Analyzer
● decoding:
● custom parser for the
target radio--->>>
0x6140 – the approach (2)
● discover mode:
– disables sync-word so radio sends unaligned bits
– algorithm looks for preamble (0xaa or 0x55)
– then determines possible dwords
● ummm... but that's not any bit-derivation of the sync word(s) I 
expect.  wut? I am confident those are coming from the meter
– intro: Bit Inversion (see highlighted hex)
0x6145 – new developments
● vendors have filed numerous patents with hopping 
pattern calculations, comms parameters, etc...
– WIN!
– plenty of work to be done!  jump right in!
● http://www.patentstorm.us/patents/7064679/fulltext.html
● http://www.patentstorm.us/patents/7962101/fulltext.html
● http://www.patentstorm.us/applications/20080204272/fulltext.html
● http://www.patentstorm.us/applications/20080238716/fulltext.html
“Abuse is no argument” 
- Nevil Maskelyne
0x6150 ­ conclusions
● rfcat discover mode roxors
● rfcat is a foundation for your attack tool
– way more than just a tool in itself
● we are responsible for ensuring our devices use 
appropriate security.  do not simply expect someone 
else to do it.  the first med-device death could be your 
best friend.
References
●
http://rfcat.googlecode.com
●
http://en.wikipedia.org/wiki/Part_15_(FCC_rules)
●
http://en.wikipedia.org/wiki/ISM_band
●
http://www.ti.com/lit/ds/swrs033g/swrs033g.pdf - “the” manual
●
http://edge.rit.edu/content/P11207/public/CC1111_USB_HW_User_s_Guide.pdf
●
http://www.ti.com/litv/pdf/swru082b
●
http://www.ti.com/product/cc1111f32#technicaldocuments
●
http://www.ti.com/lit/an/swra077/swra077.pdf
●
http://www.newscientist.com/article/mg21228440.700-dotdashdiss-the-gentleman-hackers-1903-lulz.html
●
http://saleae.com/
●
http://zone.ni.com/devzone/cda/epd/p/id/5150 - FSK details (worthwhile!)
●
http://www.radagast.org/~dplatt/hamradio/FARS_presentation_on_modulation.pdf
–
very good detailed discussion on deviation/modulation
●
http://en.wikipedia.org/wiki/Frequency_modulation
●
http://en.wikipedia.org/wiki/Minimum-shift_keying
0xgreetz
● power hardware folk who play nice with security researchers
● cutaway and q (awesome hedyattackers)
● gerard van den bosch
● travis and mossman
● sk0d0 and the four J's
● invisigoth and kenshoto
● Jewel, bug, ringwraith, diva
● Jesus Christ