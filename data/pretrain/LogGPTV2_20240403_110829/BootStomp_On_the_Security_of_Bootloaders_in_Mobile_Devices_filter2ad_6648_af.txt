in our attacks in this manner. Furthermore, we note
that many devices today make use of other features from
the same standard, including Replay-protected Memory
Blocks (RPMB) [17] to provide a secure storage accessi-
ble from Secure-World code.
eMMC Power-on Write-protect can be used to pre-
vent any partition the bootloader must read from being
in control of an attacker with root privileges. Before ex-
ecuting the kernel contained in the boot partition, the ﬁ-
nal stage bootloader should enable write protection for
every partition which the bootloader must use to boot
the device. In Android, the system and boot partitions
contain entirely read-only data (excluding during OS up-
dates), which the bootloader must read for veriﬁcation,
and therefore can be trivially protected in this way. To
close any loopholes regarding unlocking the bootloader,
the partition holding device’s security state should also
be write-protected. The misc partition used by Qual-
comm devices, for example is also used to store data
written by the OS, so the creation of an additional parti-
tion to hold the security state can alleviate this problem.
This does not impede any functionality of the device,
or to our knowledge, cause any impact to the user what-
soever. Of course, this cannot be used to protect par-
titions the OS must write to. While the OS does need
to write to system and boot to perform routine soft-
ware updates, this too can be handled, with only small
changes. If an update is available, the bootloader should
simply not enable write-protection when booting, and
perform the update. This increases only marginally the
attack surface, adding only the update-handling code in
the bootloader.
It should be noted that this method cannot protect the
status of the “Allow OEM Unlock” option in the An-
droid Settings menu, which by its very design must be
writable by the OS. This means that a privileged process
can change this setting, but unlocking the bootloader still
requires physical control of the device as well.
Alternative: Security State in RPMB. eMMC Power-
on Write Lock can be used to protect any partition which
is not written to by the OS. If, for whatever reason, this
is not possible, this could also be stored in the Replay-
protected Memory Block (RPMB) portion of the eMMC
USENIX Association
26th USENIX Security Symposium    795
module.
We can enforce the property that the OS cannot tamper
with the security state by having the Trusted OS, residing
in the secure world, track whether the OS has booted, and
only allow a change in the security state if the bootloader
is running. Using RPMB allows us to enforce that only
TrustZone can alter this state, as it holds the key needed
to write the data successfully.
When the device boots to the ﬁnal stage bootloader,
it will signal to TrustZone, allowing modiﬁcations to the
security state via an additional command. Once the boot-
loader is ready to boot the Android OS, it signals again to
TrustZone, which disallows all writes to the device until
it reboots.
While this requires minor modiﬁcations to the Trusted
OS and ﬁnal-stage bootloader,
it does not require a
change in the write-protection status or partition layout.
9 Related Work
Trusted Boot Implementations and Vulnerabilities
Methods that utilize the bootloader to bootstrap a trusted
environment have been studied extensively in the past.
Recent Intel-based PC systems utilize UEFI Secure Boot,
a similar mechanism for providing veriﬁcation of operat-
ing system components at boot-time. This too has been
prone to vulnerabilities.
Speciﬁcally, Wojtczuk et al., studied how unprivileged
code can exploit vulnerabilities and design ﬂaws to tam-
per with the SPI-ﬂash content (containing the code that
is ﬁrst executed when the CPU starts), completely break-
ing the chain-of-trust [34] in Intel systems. Kallenberg
et al., achieved a similar goal by exploiting the update
mechanisms exposed by UEFI code [14]. Researchers
have also shown how the chain-of-trust can be broken on
the Mac platform, using maliciously crafted Thunderbolt
devices [13, 12]. Other research focused on the way in
which Windows bootloader, built on top of UEFI, works
and how it can be exploited [4, 25]. Bazhaniuk et al.,
provided a comprehensive study of the different types
of vulnerabilities found in UEFI ﬁrmware and propose
some mitigations [2], whereas Rutkowska presented an
overview of the technologies available in Intel proces-
sors, which can be used to enforce a trusted boot pro-
cess [26].
All these works show how the complexity of these sys-
tems, in which different components developed by differ-
ent entities have to collaborate, and the different, some-
times conﬂicting, goals they try to achieve has lead to
both “classic” vulnerabilities (such as memory corrup-
tion), but also to hard-to-ﬁx design issues. Our work
shows how this is true also in the mobile world.
While all of the previously mentioned works rely en-
tirely on manual analysis, Intel has recently explored au-
diting its own platform using symbolic execution [3].
This is similar in approach to our work, but it has a differ-
ent goal. In particular they focus on detecting a very spe-
ciﬁc problem in the UEFI-compliant implementation of
BIOS (out of bound memory accesses). Instead, we fo-
cus on vulnerabilities explicitly triggerable by an attacker
inside the bootloader code of ARM mobile device, con-
sidering both memory corruption as well as additional
logic ﬂaws related to unlocking.
A recent work, BareDroid [20], proposes and imple-
ments modiﬁcations to the Android boot process to build
a large-scale bare-metal analysis system on Android de-
vices. Although with a different goal, in this work, au-
thors introduce some aspects related to ours, such as dif-
ﬁculties in establishing a chain of trust in Android de-
vices and how malware could permanently brick a de-
vice. We expand and integrate their ﬁndings, comparing
different implementations and devices.
Automatic Vulnerability Discovery Our approach, as
outlined in Section 6, attempts to automatically locate
vulnerabilities statically. Other approaches include fully-
dynamic analysis, such as coverage-based fuzzing [36],
or hybrid systems, such as Driller [10] and Dowser [29],
which switch between the static and dynamic analysis
to overcome the limitations of both. Unfortunately, we
could not use any approach leveraging concrete dynamic
execution, as it is currently impossible to overcome the
tight coupling of bootloaders and the hardware they run
on. Previous work has looked into hardware-in-the-loop
approaches [35, 15] to address this issue, by passing
events directed at hardware peripherals to a real hardware
device tethered to the analysis system. Unfortunately,
none of this work can be adapted to our platform, as
the hardware under analysis lacks the necessary prereq-
uisites (e.g., a JTAG interface or a completely unlocked
primary bootloader) that would be needed.
Many previous works have also proposed statically
locating memory corruption vulnerabilities,
including
Mayhem [5] and IntScope [32], focusing on user-land
programs. These approaches are not directly applica-
ble to our goals, since in our work we are not focusing
solely on memory corruption and our analysis requires
an ad-hoc modeling and identiﬁcation sources and sinks.
FirmAlice [27] proposes a technique for locating authen-
tication bypass vulnerabilities in ﬁrmware. The vulner-
abilities we wish to locate stem from the presence and
speciﬁc uses of “user input” (in this case, data from the
non-volatile storage), whereas FirmAlice can detect its
absence, en route to a pre-deﬁned program state.
796    26th USENIX Security Symposium
USENIX Association
10 Conclusion
We presented an analysis of modern mobile device boot-
loaders, and showed that current standards and guide-
lines are insufﬁcient to guide developers toward creating
secure solutions. To study the impact of these design de-
cisions, we implemented a static analysis approach able
to ﬁnd locations where bootloaders accept input from
an adversary able to compromise the primary operating
system, such as parsing data from partitions on the de-
vice’s non-volatile storage. We evaluated our approach
on bootloaders from four major device manufacturers,
and discovered six previously-unknown memory corrup-
tion or denial of service vulnerabilities, as well as two
unlock-bypass vulnerabilities. We also proposed miti-
gation strategies able to both limit the attack surface of
the bootloader and enforce various desirable properties
aimed at safeguarding the security and privacy of users.
Acknowledgements
We would like to thank our reviewers for their valu-
able comments and input to improve our paper. We
would also like to thank Terry O. Robinson for several in-
sightful discussions. This material is based on research
sponsored by the Ofﬁce of Naval Research under grant
numbers N00014-15-1-2948 and N00014-17-1-2011, the
DARPA under agreement number N66001-13-2-4039
and the NSF under Award number CNS-1408632. The
U.S. Government is authorized to reproduce and dis-
tribute reprints for Governmental purposes notwithstand-
ing any copyright notation thereon. The views and con-
clusions contained herein are those of the authors and
should not be interpreted as necessarily representing the
ofﬁcial policies or endorsements, either expressed or im-
plied, of DARPA, or the U.S. Government. This work
is also sponsored by a gift from Google’s Anti-Abuse
group.
References
[1] ARM. ARM TrustZone. http://www.arm.com/products/
processors/technologies/trustzone/index.php, 2015.
[2] BAZHANIUK, O., BULYGIN, Y., FURTAK, A., GOROBETS, M.,
LOUCAIDES, J., MATROSOV, A., AND SHKATOV, M. Attacking
and Defending BIOS in 2015. In REcon (2015).
[3] BAZHANIUK, O., LOUCAIDES, J., ROSENBAUM, L., TUTTLE,
M. R., AND ZIMMER, V. Symbolic execution for bios secu-
rity. In Proceedings of the 2015 USENIX Conference on Offensive
Technologies (Washington, DC, USA, 2015), WOOT’15.
[4] BULYGIN, Y., FURTAK, A., AND BAZHANIUK, O. A tale of
one software bypass of Windows 8 Secure Boot. Black Hat USA
(2013).
[5] CHA, S. K., AVGERINOS, T., REBERT, A., AND BRUMLEY, D.
Unleashing mayhem on binary code. In Proceedings of the 2012
IEEE Symposium on Security and Privacy (San Jose, CA, USA,
2012), SP ’12.
[6] GITHUB. ARM Trusted Firmware. https://github.com/
ARM-software/arm-trusted-firmware, 2017.
[7] GOOGLE.
https://support.google.com/nexus/answer/
6172890?hl=en, 2016.
[8] GOOGLE. Verifying Boot. https://source.android.com/
security/verifiedboot/verified-boot.html, 2017.
[9] GSMA. Anti-theft Device Feature Requirements, 2016.
[10] HALLER, I., SLOWINSKA, A., NEUGSCHWANDTNER, M., AND
BOS, H. Dowsing for overﬂows: A guided fuzzer to ﬁnd buffer
boundary violations. In Proceedings of the 2013 USENIX Con-
ference on Security (Washington, DC, USA, 2013), SEC’13.
[11] HEX-RAYS.
IDA Pro.
https://www.hex-rays.com/
products/ida/index.shtml, 2017.
[12] HUDSON, T., KOVAH, X., AND KALLENBERG, C. Thunder-
Strike 2: Sith Strike. Black Hat USA (2015).
[13] HUDSON, T., AND RUDOLPH, L. Thunderstrike: Eﬁ ﬁrmware
bootkits for apple macbooks. In Proceedings of the 2015 ACM
International Systems and Storage Conference (New York, NY,
USA, 2015), SYSTOR ’15.
[14] KALLENBERG, C., KOVAH, X., BUTTERWORTH, J., AND
Extreme privilege escalation on Windows
CORNWELL, S.
8/UEFI systems. BlackHat, Las Vegas, USA (2014).
[15] KOSCHER, K., KOHNO, T., AND MOLNAR, D. SURROGATES:
enabling near-real-time dynamic analyses of embedded systems.
In Proceedings of the 2015 USENIX Conference on Offensive
Technologies (Washington, D.C., 2015), WOOT’15.
[16] LADY, K.
Sixty Percent of Enterprise Android Phones Af-
fected by Critical QSEE Vulnerability.
https://duo.com/
blog/sixty-percent-of-enterprise-android-phones-
affected-by-critical-qsee-vulnerability, 2016.
[17] MICRON TECHNOLOGIES. eMMC Security Features, 2016.
[18] MING, J., WU, D., XIAO, G., WANG, J., AND LIU, P. Taint-
In Proceedings of the
pipe: Pipelined symbolic taint analysis.
2015 USENIX Conference on Security Symposium (Washington,
DC, USA, 2015), SEC’15.
[19] MITRE. LK bootloader security vulnerability, CVE-2014-9798.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=
CVE-2014-9798.
[20] MUTTI, S., FRATANTONIO, Y., BIANCHI, A., INVERNIZZI, L.,
CORBETTA, J., KIRAT, D., KRUEGEL, C., AND VIGNA, G.
Baredroid: Large-scale analysis of android apps on real devices.
In Proceedings of the 2015 Annual Computer Security Applica-
tions Conference (New York, NY, USA, 2015), ACSAC 2015.
[21] OUTLER, A. Have you paid your linux kernel source license
fee? https://www.xda-developers.com/have-you-paid-
your-linux-kernel-source-license-fee/, March 2013.
(L)ittle (K)ernel based Android bootloader.
[22] QUALCOMM.
https://www.codeaurora.org/blogs/little-kernel-
based-android-bootloader.
[23] RAMOS, D. A., AND ENGLER, D. Under-constrained symbolic
execution: Correctness checking for real code. In Proceedings of
the 2015 USENIX Conference on Security Symposium (Washing-
ton, DC, USA, 2015), SEC’15.
[24] RAWAT, S., MOUNIER, L., AND POTET, M.-L. Static taint-
analysis on binary executables, 2011.
lightning.
ring
of
[25] ROL.
securegoldenkeyboot/, 2016.
https://rol.im/
[26] RUTKOWSKA, J. Intel x86 considered harmful, 2015.
USENIX Association
26th USENIX Security Symposium    797
[27] SHOSHITAISHVILI, Y., WANG, R., HAUSER, C., KRUEGEL,
C., AND VIGNA, G. Firmalice - Automatic Detection of Au-
thentication Bypass Vulnerabilities in Binary Firmware. In Pro-
ceedings of the 2015 Network and Distributed System Security
Symposium (San Diego, CA, USA, 2015), NDSS 2015.
[28] SHOSHITAISHVILI, Y., WANG, R., SALLS, C., STEPHENS, N.,
POLINO, M., DUTCHER, A., GROSEN, J., FENG, S., HAUSER,
C., KRUEGEL, C., AND VIGNA, G. SoK: (State of) The Art of
War: Offensive Techniques in Binary Analysis. In Proceedings
of the 2016 IEEE Symposium on Security and Privacy (San Jose,
CA, USA, 2016), SP ’16.
[29] STEPHENS, N., GROSEN, J., SALLS, C., DUTCHER, A.,
WANG, R., CORBETTA, J., SHOSHITAISHVILI, Y., KRUEGEL,
C., AND VIGNA, G. Driller: Augmenting fuzzing through selec-
tive symbolic execution. In Proceedings of the 2016 Network and
Distributed System Security Symposium (San Diego, CA, USA,
2016), NDSS 2016.
[30] VAAS, LISA. Smartphone anti-theft kill switch law goes into
effect in California, 2015.
rity Symposium (Washington, DC, USA, 2015), SEC’15.
[32] WANG, T., WEI, T., LIN, Z., AND ZOU, W. Intscope: Automat-
ically detecting integer overﬂow vulnerability in x86 binary using
In Proceedings of the 2009 Network and
symbolic execution.
Distributed System Security Symposium (San Diego, CA, USA,
2009), NDSS 2009.
[33] WANG, X., JHI, Y.-C., ZHU, S., AND LIU, P. Still: Exploit code
detection via static taint and initialization analyses. In Proceed-
ings of the 2008 Annual Computer Security Applications Confer-
ence (Anaheim, CA, USA, 2008), ACSAC ’08.
[34] WOJTCZUK, R., AND KALLENBERG, C. Attacking UEFI boot
script. In 31st Chaos Communication Congress (31C3) (2014).
[35] ZADDACH,
J., BRUNO, L., FRANCILLON, A., AND
BALZAROTTI, D. AVATAR: A Framework to Support Dynamic
In Pro-
Security Analysis of Embedded Systems’ Firmwares.
ceedings of the 2014 Network and Distributed System Security
Symposium (San Diego, CA, USA, 2014), NDSS 2014.
[31] WANG, S., WANG, P., AND WU, D. Reassembleable disassem-
bling. In Proceedings of the 2015 USENIX Conference on Secu-
[36] ZALEWSKI, M.
//lcamtuf.coredump.cx/afl/, 2007.
American
fuzzy
lop.
http:
798    26th USENIX Security Symposium
USENIX Association