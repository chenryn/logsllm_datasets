tees that k ≤ t + τ andpk(t + τ ) < h ≤ k.
We also note that if we set τ = 0, we get exactly the same
protocol as before, since 0-private ℓ-way shares of Wjc are
just ℓ copies of Wjc itself.
Why does this work? Step S3 computes Ric to be
fj(αi)gjc(αi) = Fc(αi), where Fc
ρijω(i)
jc = X1≤j≤r
X1≤j≤r
is the polynomial Fc = X1≤j≤r
fjgjc of degree at most t + τ .
Note, however, that it is not necessarily the case that the Ric
are (t + τ )-private ℓ-way shares of Fc(0) = Wβc, since the
distribution of the Fc is not uniform. In particular, it may be
possible to learn some information about Wβc given t + τ
of the Fc(αi). However, it is still the case that any t + τ + 1
of the Fc(αi) uniquely determines Fc, and that is the only
fact we use in our reconstruction of Wβc.
Therefore, we have constructed a t-private v-Byzantine-
robust τ -independent k-out-of-ℓ PIR protocol for 0 < t ≤
t + τ < k, and v < k − ⌊pk(t + τ )⌋. This protocol has
communication cost O(ℓ√nw) to retrieve √nw bits of the
database. If there is to be only one client retrieving data, we
can use both the extensions of this section and of section 4 at
the same time, and add ℓ-computationally-private to the list
of properties, at a cost of a factor of 2 in the communication.
6. Implementation details
We implemented the protocols in this paper in C++, us-
ing Victor Shoup’s NTL library [15], except for one part of
step H2 of the HARDRECOVER subroutine, which is cur-
rently performed by the computer algebra system MuPAD
[13]. Our implemenation is available as the Percy++ project
on SourceForge [6].
We measured the computational performance of these
protocols on a Lenovo T60p laptop computer with a
2.16 GHz dual-core Intel CPU running Ubuntu Linux in or-
der to determine their practicality.
We ﬁrst measured the performance of
the proto-
the ℓ-
col of Figure 2;
computationally-private and τ -independent properties. We
used a range of values of n, t, ℓ, and w, and we set k = ℓ in
all cases.
the protocol without
that
is,
the were no Byzantine servers,
Figure 4 shows some representative results.
In
so the
these cases,
HARDRECOVER subroutine was never executed.
Fig-
ure 4(a) shows the client’s processing time, as a function
of the database size, for various values of w. In this plot,
we set (t, k) = (12, 20). The plot suggests a square-root
dependence on the database size, which agrees with an ex-
amination of the algorithm. We conﬁrm this by squaring
the measurements; the results are shown in Figure 4(b),
which indeed produces linear graphs. Figure 4(c) shows
the servers’ processing time, and again as expected, this is
linear in the database size. Finally, Figure 4(d) shows that
for ﬁxed k, the client’s running time depends linearly on the
privacy level t. As a numeric example, for w = 128, the
client processing takes 44√n microseconds, and the server
processing takes 9.6n nanoseconds.
servers,
When we
introduce Byzantine
the
HARDRECOVER subroutine gets executed. As expected,
this is noticeably more expensive than the EASYRECOVER
subroutine. For (t, k) = (5, 10), for example, it adds a
couple of seconds to the client’s processing time. For
(t, k) = (10, 20), it adds several minutes. However, this is
not onerous, since it is likely that the mere ability of the
client to detect which servers are returning incorrect results
will deter the servers from doing so. Therefore, we expect
to use the HARDRECOVER subroutine only rarely.
Adding τ -independence (the modiﬁcation to the protocol
Figure 4 (a)
Figure 4 (b)
w=256
w=192
w=128
w=96
 0
 5
 10  15  20  25  30  35
Database size (Mbits)
Figure 4 (c)
w=256
w=192
w=128
w=96
)
s
(
e
m
i
i
t
g
n
s
s
e
c
o
r
p
t
n
e
i
l
C
)
s
(
e
m
i
i
t
g
n
s
s
e
c
o
r
p
r
e
v
r
e
S
 0.35
 0.3
 0.25
 0.2
 0.15
 0.1
 0.05
 0
 0.4
 0.35
 0.3
 0.25
 0.2
 0.15
 0.1
 0.05
 0
)
2
2
s
(
e
m
i
i
t
g
n
s
s
e
c
o
r
p
t
n
e
i
l
C
)
s
(
e
m
i
i
t
g
n
s
s
e
c
o
r
p
t
n
e
i
l
C
w=256
w=192
w=128
w=96
 0
 5
 10  15  20  25  30  35
Database size (Mbits)
Figure 4 (d)
k=20
k=10
k=6
k=4
 0.12
 0.1
 0.08
 0.06
 0.04
 0.02
 0
 0.45
 0.4
 0.35
 0.3
 0.25
 0.2
 0.15
 0.1
 0.05
 0
 0
 5
 10  15  20  25  30  35
 0  2  4  6  8  10  12  14  16  18  20
Database size (Mbits)
Privacy level, t
Figure 4. Performance measurements for the protocol of Figure 2.
from Section 5) is, as expected, quite cheap. In Figure 5
we plot timings of the t-private τ -independent version of
In each graph, we ﬁx w = 128, k = 20,
the protocol.
and n = 225, and vary t and τ such that 0 < t < t +
τ < k. In Figure 5(a) we see that the server’s processing
time is independent of both t and τ . We divide the client’s
processing time into two parts: Figure 5(b) shows the time
it takes the client to prepare its query (the steps labelled
“P” in Figure 2), and Figure 5(c) shows the time it takes the
client to reconstruct the data block (the steps labelled “C”
in Figure 2). The graphs clearly show that the preparation
time is linearly dependent on t, but independent of τ , and
the reconstruction time is linearly dependent on t + τ , as
would be expected from the algorithm. The careful reader
will note that the sum of the times in Figures 5(b) and 5(c)
is slightly less than the corresponding times in Figure 4(d);
this is because the αi are ﬁxed in the τ -independent version,
and are in fact chosen to be the very simple αi = i.
7. Conclusion
We have improved the robustness of protocols for private
information retrieval in a number of ways. Compared to the
previous scheme in [2], our basic protocol allows for more
servers to collude without compromising the user’s privacy.
Moreover, maintaining the same privacy level as in [2], we
enable the reconstruction of the correct data block when
more servers return faulty responses. We extended this pro-
tocol to add hybrid privacy protection; that is, information-
theoretic protection if up to t servers collude (for some
t < k ≤ ℓ), but still computational protection if up to all
ℓ collude. Finally, we presented another extension which
added τ -independence to the protocol while increasing nei-
ther the number of servers, nor the communication cost.
We implemented and measured these protocols and
found the performance to agree well with theory. With the
exception of the hybrid privacy protection, our implementa-
tion gives practical speeds for moderately sized databases.
On the other hand, adding ℓ-computational privacy (the
modiﬁcation from Section 4) is quite expensive. The server
needs to perform one modular exponentiation for each w-
bit word in the database. The plots have the same shape as
those of Figure 4, but the scale is different: for w = 1024,
k = 5, and t = 4, we ﬁnd the client’s processing time is
15√n milliseconds, and the server’s processing time is 30n
microseconds. For values of n in the hundreds of millions
of bits or more, these times are substantial.
8. Acknowledgements
We would like to thank Len Sassaman for motivating
the problem, and David Molnar, Len Sassaman and Bryce
Wilcox-O’Hearn for their helpful discussions and com-
ments. We would also like to thank Katrina Hanna, Bram
Cohen, Urs Hengartner, Joel Reardon, J¨orn M¨uller-Quade
and the anonymous referees for improving the quality of
the paper.
)
s
(
e
m
i
i
t