𝑢′
.
becomes 𝑤′ = 𝑤 + 𝑢′.
(2) Modifications to Protocol 2. The verification algorithm for
the linear constraint 𝐴𝑥 = 𝑏 samples a random vector 𝑟,
obtains 𝑟𝐴𝑥 and compares it with 𝑟𝑏. Protocol 2 Step 6 will
test𝑖∈[𝑛] 𝑞(𝜁 𝑖) = 0. The individual evaluation of 𝑞(·) will
that encodes a message (𝜎1, ..., 𝜎ℓ) such thatℓ
ensureℓ
reveal random linear combination about the input.
Polynomial 𝑞(·) is essentially a random linear combination
of rows of 𝑈 . We can mask it by adding a random row 𝑢′
𝑖=1 𝜎𝑖 = 0,
and modify 𝐴 such that it adds an additional constraint to
(3) Modifications to Protocol 3. We modify Protocol 3 in the
same way as for Protocol 1, however, matrix 𝑈 is a virtual
matrix composed by 𝑈𝑥, 𝑈𝑦, 𝑈𝑧. Instead of adding a row to
𝑈 , we add 3 random rows 𝑢𝑥′, 𝑢𝑦′, 𝑢𝑧′ to 𝑈𝑥, 𝑈𝑦, 𝑈𝑧, where
𝑢𝑥′, 𝑢𝑦′, 𝑢𝑧′ encode 3 random message 𝑥′, 𝑦′, 𝑧′ such that it
holds that 𝑥′ ⊙ 𝑦′ − 𝑧′ = 0.
𝑖=1 𝜎𝑖 = 0.
To obtain the final zero-knowledge version, we can replace
the three modules of Protocol 5 with their corresponding zero-
knowledge versions. We present these modified modules in Proto-
col 6, Protocol 7, Protocol 8 and highlight the differences compared
with the non-ZK versions using a purple font.
3.6 From ZKIOP to ZK
Transforming ZKIOP into ZK can be done using the standard tech-
nique based on Merkle hash tree. In this approach, the prover com-
mits to each element in the oracle using a statistically hiding com-
mitment scheme and then compresses the commitment using a
Merkle hash tree. Both of these commitments can be instantiated
by any family of collision-resistant hash functions. Note that we
cannot commit column wise as in Ligero, since the IPA protocol
requires opening a small subset of elements within a column.
3.7 Optimizations
In Section 3.5, we discussed the leakage concerns in our IOP proto-
col and how to convert it into a zero-knowledge protocol. Taking
interleaved test in Protocol 1 as an example, we discussed how the
second check (Step 5) leaks information about the columns of the
encoded witness. This is tackled by increasing the degree of the RS
code 𝐿 by 𝑡, such that opening any 𝑡 points of the codeword does
not leak any information of the message. Alternatively, we can use
a zero-knowledge version of the IPA protocol (zk-IPA). This en-
sures no information is revealed about the columns and in turn the
witness. This enables us to reduce the rate of codeword in Ligero
framework to 2 (as we need the codeword to be at least as big as
the polynomial degree in quadratic test which is has the highest
degree among the three tests). This approach allows us to run the
IPA protocol on all columns . As we are opening all the columns,
each test (Interleaved test, linear test and quadratic test) would
have a soundness error of 1/|F| + 𝛿 reducing the overall soundness
error to 3/|F| + 3𝛿. This gives the flexibility of better proof sizes in
case that the number of columns is less than 𝑡 (where 𝑡 is linear to
security parameter). As our number of columns is (polylog𝐶), most
of the benchmark circuits will have optimum column size that is
less than 𝑡, enabling us to reduce the proof size.
4 IMPLEMENTATION AND EVALUATIONS
We fully implement our new zero knowledge proof scheme, Ligero++,
and present the experimental results of the system in this section.
Software and hardware. The system is implemented in C++.
There are around 1, 600 lines of code for the main protocol, in-
cluding the protocols for interleaved tests, linear tests, quadratic
tests, Merkle Trees and the inner product arguments. We use the
implementation of the inner product argument in [55]. We use the
compiler of libsnark [1] to write the statements of zero-knowledge
proofs. The statements are actually represented as the Rank-1-
Constraint-System (R1CS). The number of constraints in R1CS
maps to the number of multiplication gates in arithmetic circuits.
Our protocols support both representations and in this section, we
state the size of the statements in the number of R1CS constraints.
We ran all experiments on an AMD Ryzen™ 3800X processor
with 64GM RAM. The experiments were not parallelized and only
utilized a single CPU core. We report the average running time over
10 executions.
Choice of parameters. The rate of the RS code for the inner prod-
uct argument is set to 8, and the repetition parameter of the low
degree test is set to 43. These parameters provide a security level
of 100+ bits based on Theorem 1.2 and Conjecture 1.5 in [12], and
Conjecture 7.3 in [15], which is consistent with Virgo [55] and
Aurora[20]. Without the conjectures, based on the proven theorem
in [15, Theorem 7.2], we would need to repeat the inner product
argument protocol twice to achieve the same security level of 100+
bits. This would increase the prover time, proof size and the veri-
fication time of the whole Ligero++ protocol by less than 2×, and
the scheme still yields good trade-off on the prover time and the
proof size compared to Ligero and Aurora. For our main protocol,
we set the repetition parameter 𝑡 = 300 and the rate of the RS code
as 4. Our field is the same as the one used in Virgo[55], which is
F𝑝2 where 𝑝 = 261 − 1.
Session 6E: Zero Knowledge CCS '20, November 9–13, 2020, Virtual Event, USA2033Protocol 6 (Zero knowledge interleaved linear code test). F is a prime field and 𝐿 ⊂ F𝑛 is a [𝑛, 𝑘, 𝑑] RS code. Let 𝑈 ∈ F𝑚×𝑛 be the matrix to test.
• pp ← KeyGen(1𝜆)
• Interleaved testing:
(1) P Appends a random codeword 𝑈𝑢′ to 𝑈 .
(2) P computes 𝑤 = 𝑟𝑇 𝑈 ∈ F𝑛 and sends it to V.
(3) V checks that 𝑤 ∈ 𝐿.
(4) V generates a random set 𝑄 ⊆ [𝑛] and |𝑄 | = 𝑡 and sends it to P.
(5) V checks the consistency of 𝑤. In particular, for 𝑗 ∈ 𝑄, P and V invoke an IPA protocol on 𝑈 [ 𝑗] and 𝑟. V accepts if all the checks pass, and rejects
otherwise.
Protocol 7 (Zero knowledge testing linear constraints over Interleaved RS Codes). Let 𝜆 be the security parameter, F be a prime field. 𝐿[𝑛, 𝑘, 𝑑] be
the intended codeword space. 𝑈 encodes the message 𝑥. 𝑡 be the repeat parameter depend on 𝜆. 𝑚 defined in Definition 2.2, and 𝐴, 𝑏 satisfies 𝐴𝑥 = 𝑏. The testing
will return 1 if 𝑈 correctly encodes 𝑥 such that 𝐴𝑥 = 𝑏.
• pp ← IPA.KeyGen(1𝜆)
• Interleaved testing:
(1) P generates a random message 𝑢′ ∈ Fℓ such thatℓ
(2) Both sides modify the matrix 𝐴, adding the constraintℓ
(5) P computes polynomials 𝑝𝑖 (·) such that 𝑝𝑖 (𝜂 𝑗) = 𝑈𝑖 𝑗 for 𝑖 ∈ [𝑚 + 1], 𝑗 ∈ [𝑛]. P constructs polynomial 𝑞(𝑥) =𝑚+1
(6) V checks that𝑗∈[ℓ] 𝑞(𝜁 𝑗) = 0.
(3) V picks a random value 𝑟 ∈ F𝑚ℓ and sends 𝑟 to P.
(4) Both P and V computes 𝑎 ← 𝑟 × 𝐴 and calculates polynomials 𝑎𝑖 (·) such that 𝑎𝑖 (𝜁 𝑗) = 𝑎𝑖ℓ+𝑗−1 for all 𝑖 ∈ [𝑚 + 1], 𝑗 ∈ [ℓ].
𝑖=1 𝑢′[ℓ] = 0, encodes into codeword 𝑈𝑢′ and appends it to 𝑈 .
(7) V generates a random set 𝑄 ⊆ [𝑛] and |𝑄 | = 𝑡 and sends it to P.
(8) Let 𝑏 𝑗 denote the vector (𝑎0(𝜂 𝑗), . . . , 𝑎𝑚(𝜂 𝑗)). V checks the consistency for 𝑞(·). In particular, for 𝑗 ∈ 𝑄, P and V invoke an IPA protocol on 𝑈 [ 𝑗] and
𝑖=1 𝑎𝑖 (𝑥) · 𝑝𝑖 (𝑥) and sends it to V.
𝑖=1 𝑢′[ℓ] = 0.
𝑏 𝑗 . V accepts if all the checks pass, and rejects otherwise.
𝑖 (·) similarly.
𝑖 , and we define 𝑝 𝑦
Protocol 8 (Zero knowledge testing qadratic constraints). Let 𝜆 be the security parameter, F be a prime field. 𝐿[𝑛, 𝑘, 𝑑] be the intended codeword
space. 𝑈 𝑥 ∈ 𝐿𝑚 encodes the message 𝑥, 𝑈 𝑦 ∈ 𝐿𝑚 encodes the message 𝑦, 𝑈𝑧 ∈ 𝐿𝑚 encodes the message 𝑧. 𝑡 be the repeat parameter depend on 𝜆. 𝑥, 𝑦 and
𝑧 satisfies 𝑥 ⊙ 𝑦 − 𝑧 = 0. The testing will accept if 𝑈 𝑥 , 𝑈 𝑦, 𝑈 𝑧 correctly encodes 𝑥, 𝑦, 𝑧, let 𝜂 be a root of unity of order 𝑛. Let 𝑝𝑥
𝑖 (·) be the corresponding
polynomial of 𝑈 𝑥
• pp ← IPA.KeyGen(1𝜆):
• Interleaved testing:
(1) P randomly samples vectors 𝑥′, 𝑦′, 𝑧′ ∈ Fℓ such that 𝑥′ ⊙ 𝑦′ − 𝑧′ = 0, and then encodes them and appends to 𝑈𝑥 , 𝑈𝑦, 𝑈𝑧.
(2) V picks a random value 𝑟 ∈ F𝑚 and sends 𝑟 to P.
(4) V checks that ∀𝑖 ∈ [ℓ], 𝑞(𝜁 𝑗) = 0.
(5) V generates a random set 𝑄 ⊆ [𝑛] and |𝑄 | = 𝑡 and sends it to P.
(6) V checks the consistency for 𝑞(·). In particular, for 𝑗 ∈ 𝑄, P and V invoke an IPA protocol on 𝑈 [ 𝑗] and 𝑟 where 𝑈 [ 𝑗] = 𝑈 𝑥 [ 𝑗] ∗ 𝑈 𝑦 [ 𝑗] − 𝑈 𝑧 [ 𝑗]. V
(3) P construct polynomial 𝑞(·) defined by 𝑞(·) =𝑚+1
𝑖 (·) send the polynomial 𝑞 to the verifier.
𝑖=1 𝑟𝑖 · 𝑝𝑖 (·), where 𝑝𝑖 (·) = 𝑝𝑥
𝑖 (·) − 𝑝𝑧
𝑖 (·), 𝑝𝑧
𝑖 (·)𝑝 𝑦
accepts if all the checks pass, and rejects otherwise.
(a) P time
(b) V time
(c) Proof size
Figure 1: Comparisons of prover time, proof size and verification time.
Ligero++LigeroAuroralibSTARKSession 6E: Zero Knowledge CCS '20, November 9–13, 2020, Virtual Event, USA20344.1 Performance of Ligero++
We first present the performance of Ligero++, and compare it with
other IOP-based general-purpose zero knowledge proof systems,
including Ligero [5], Aurora [20], Stark [14] and Virgo [55].
Benchmark. Our benchmark in this section is the path validations
of a Merkle tree. The prover proves to the verifier that she knows a
leaf and its validation path in a Merkle tree. This function is widely
used in practice to prove memberships in zero knowledge (e.g., in
the protocol of Zcash [17]). We use SHA-256 for the hash function
and each hash takes around 27, 000 constraints to implement in
the R1CS. The R1CS are generated by the compiler provided by
libsnark [23]. We increase the length of the path from 8 to 128 to
show the scalability of the systems. In our largest instance, there
are around 3, 600, 000 ≃ 221.7 constraints.
Methodology. As Ligero is not open-source, we implement the
scheme ourselves with same parameters specified above. We use
the open-source implementation of Aurora in libiop [2]. We report
the performance of the system on R1CS with the same number of
constraints for each data point. We run the Aurora on 8-64 hashes
on our 64GiB RAM machine, and interpolate the 128 hashes case,
the interpolation may be larger than actual data since Aurora’s
implementation take advantage of large memory. For Stark, we
obtain numbers for proving the same number of hashes from the
authors. The experiments are executed on a server with 512GB of
DDR3 RAM (1.6GHz) and 16 cores (2 threads per core) at speed of
3.2GHz. We obtained the implementation of Virgo from the authors.
The performance of Ligero++and the comparisons to existing
zero knowledge proof systems are presented in Figure 1. As shown
in the figure, the prover time of our system Ligero++is one of the
fastest among all IOP-based ZKP schemes. It only takes 82s to
generate the proof for a Merkle tree path with 128 hashes. The
prover time of Ligero++is 11 − 12× faster than Aurora, and 2 − 3×
faster than Stark on all data points we tested. Our prover time is
only 2× slower than Ligero, as we need to perform additional inner
product arguments in our protocols.
The proof size of our scheme is the smallest among all schemes.
In particular, the proof size for a Merkle path with 128 hashes is
184KB. This is slightly smaller than the 276KB in Aurora. This is
because our protocol uses the inner product argument on a smaller
instance, and the inner product argument is based on the same
underlying techniques as Aurora (low degree test and univariate
sumcheck). Meanwhile, the proof size of Ligero is 6MB, significantly
larger than ours. Therefore, the experiments demonstrate that our
new scheme provides a good trade-off between the proof size and
the prover time. The proof size is a little smaller than Aurora, while
the prover time is close to that of Ligero, achieving the best of both
schemes.
Finally, the verifier time of Ligero++, Ligero and Aurora all scales
linearly with the size of the circuit. It takes 18s in Ligero++for 128
hashes, which is the same as Aurora and 3× slower than Ligero.
Stark operates on a different computational model and the verifica-
tion time is sublinear to the size of the computation. Therefore, the
verification time of Stark is only tens of milliseconds.
Comparing to Virgo. Virgo operates on a different representation
of layered arithmetic circuits. Following the framework of [52, 54,
56, 57], it combines the doubly efficient interactive proof by [33]
Size of
Polynomial
212
216
220
222
Prover Verfication
Time
0.04s
0.02s
0.64s
0.31s
11.7s
5.5s
39.66s
23.0s
Time
0.006s
0.0012s
0.007s