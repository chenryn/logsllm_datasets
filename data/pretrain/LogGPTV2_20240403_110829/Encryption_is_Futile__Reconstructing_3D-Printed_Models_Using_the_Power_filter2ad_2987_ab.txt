Figure 2: A Lulzbot Taz 6 printer, instrumented by Picoscope
5444D oscilloscopes. The probes are Picoscope’s 60A Induc-
tive Current probes. Each motor has two clamps attached,
one for each phase. The fan controller is also instrumented
by a standard voltage probe. The data captured here is trans-
mitted to a host PC running the PicoScope application.
the positive and negative peaks of the current on either phase cause
the motor to advance or reverse depending on the firing sequence.
The peaks of the current directly cause the motor to move, and
the mechanical construction of the motor ensures that positional
error does not accumulate [29]. A single peak on one phase will
predictably move the motor from one step position to another. The
direction of movement is determined by the sequence in which the
two phases are fired. The speed of movement is determined by the
speed of the firing sequence.
The toolpath, a sequence of movement and printing commands,
is issued in the G-code format, a legacy format commonly used in
desktop 3D printers. The toolpath is interpreted by the printer and
translated into a series of motor movements. The motor controller
generates current in the correct pattern to achieve these move-
ments. The particular properties of this current and recognizing
the patterns necessary for executing G-code commands present
several challenges to the reconstruction process, described in the
remainder of this section.
We adapt our instrumentation strategy from the work of Gatlin
et al. on power side-channel signatures [18], using inductive current
clamps to monitor motor phases2. While that work instrumented a
single phase of each motor, we instrument both to capture the full
motor behavior. Our implementation of the sensor suite is obvious
and constructed from laboratory-grade equipment, but the technical
requirements (sampling in the 2 KHz range on 8 channels) can be
easily achieved with a more surreptitious and smaller setup based
around a microcontroller and less precise current probes. Such an
2While in-line ammeters or pullup resistors can also capture this data, they have
notable downsides compared to inductive clamps: they can interfere with actuation
signals, are difficult to remove for in-person inspections, and might be detectable by
anti-tamper impedance testing.
137RAID ’21, October 6–8, 2021, San Sebastian, Spain
Gatlin et al.
Figure 3: Constant-speed motor trace, after applying a low-
pass filter. This plot is generated in code from our processed
data.
Figure 4: Beginning of motor movement after inactivity. The
DC offset of the phases start at nearly 2A, then converges
over time.
implementation could be hidden within the enclosure of even a
desktop 3D printer.
3.1 Unidirectional Movement
The simplest section of oscilloscope trace to interpret is unidirec-
tional movement at a constant speed. This will occur in the middle
of any linear movement command. Observing the current at this
point will produce a trace as shown in Figure 3. In this figure, and
in all other trace figures, we plot a positive and negative version
of the current on each phase, producing a total of four. The firing
sequence of the phases can then be seen just by looking at positive
peaks; this representation is also convenient when processing the
data in Section 4.
Peaks have two independent characteristics by which they can
be recognized: height and prominence. Height is the absolute value
of the peak at its highest point. In Figure 3, the peaks have a consis-
tent height of approximately 1.5 A; in other situations, the height
can vary dramatically. The prominence of the peak can be simply
described as the height of the peak over the adjacent minima. This
corresponds to the amplitude of a signal in electrical terms. The
prominence of the peaks in Figure 3 is consistently around 3 A. In
other situations, the prominence of a given peak can be significantly
less. Interpreting each peak as a single step, we can precisely track
position. From there we can use the known property of step size, or
distance per motor step, to determine both printhead and filament
position at any time, and the linear speed of movements.
The phases are all operating at the same constant frequency
(corresponding to a constant movement speed) and firing in the
same order. It must be noted that, at the beginning and end of a
linear movement, the motor controller ramps up and ramps down
the frequency, respectively. This produces acceleration and deceler-
ation in the movement, and the artifacts from it in the trace should
be accounted for in reconstruction.
3.2 Start, Stop, and Dwell
The trace exhibits specific behavior at the beginning and end of
movements. This behavior includes apparent changes in frequency
and absolute value. This occurs at the beginning and end of every
print, as shown in Figure 4. This also occurs during Dwell com-
mands, which halt movement on every axis for a set period, as
shown in Figure 5.
Both figures illustrate a challenge associated with these transi-
tional periods: changing DC offsets. The height of the first peak
after a period of inactivity is visibly lower, and the second peak is
visibly higher, than their normal range. Over time, they gradually
stabilize at the same level, as in the linear movement of Figure 3.
In electrical terms, this difference in the absolute height of an AC
signal is referred to as its Direct Current (DC) offset. Notably, the
prominence of the peaks does not vary dramatically. A change in
DC offset over time means that height cannot be relied upon to
distinguish peaks.
For reconstruction, it is helpful to identify periods of inactivity,
as opposed to normal inter-peak periods. On the Z- and E-axis
motors, there are long periods of inactivity while the print head
repositions along X and Y. Identifying these inactive periods helps
filter out false positive peaks.
Figure 5: Dwell shown in the trace. Note the much lower
height of the first peak at 310.25s. A change in speed is visi-
ble from the first section of activity to the second.
To aid in this filtering, we can observe the change of inter-peak
intervals while transitioning into and out of inactivity. Before a
period of inactivity, there is a stable inter-peak interval correspond-
ing to constant motion. There will then be a single larger interval
between the last peak before and the first peak after the inactive
section. After that, the next movement command begins and, after
a short period of time, shows stable inter-peak intervals once more.
3.3 Reversal of Direction
When a sequence of G-code commands reverses the direction of
movement along an axis, we observe the behavior seen in Figure 6.
The characteristic feature of a reversal is that it changes the firing
order of the phases. They can be detected by testing for this change,
but several artifacts of the trace can complicate the process. In
the figures showing reversals, we mark the first peak in the new
direction with a vertical blue line.
7.57.67.77.87.9Time (s)110011Current (A)37.6037.6237.6437.6637.68Time (s)220022Current (A)309.9310.0310.1310.2310.3310.4Time (s)220022Current (A)138Encryption is Futile
RAID ’21, October 6–8, 2021, San Sebastian, Spain
Figure 6: Valid reversal shown in the trace. After the central
green peak, 130.4s, the direction of travel is reversed. The
blue line marks the first peak after the reversal. This rever-
sal presents no additional problems for reconstruction.
Figure 7: Reversal with multiple issues complicating recon-
struction. Peaks from 258.25s to 258.4s are low-prominence,
of varying width, and represent two reversals in rapid suc-
cession.
The DC offset of the trace can change during reversals to the
point that it impacts peak recognition. In Figure 7, peaks in the
vicinity of the reversals have both a low absolute value and a low
prominence, but are still valid peaks (i.e., shift the motor position).
This can occur not only to the reversal peak, but also to any peak
before or after. Each potential missing peak represents a uniquely
malformed firing order, when in reality only well-behaved reversals
actually occur.
3.4 High Frequency Noise
A consistent property of the raw trace is the presence of high-
frequency noise. In most cases, the signal-to-noise ratio is high,
and trace properties measured across longer periods of time are
unaffected. More precise properties, such as locating a peak, are
affected. To locate peaks better and more consistently, we pre-
process the raw trace with a low-pass filter3, a common technique
in signal processing. All trace figures are presented after filtering.
Applying a low-pass filter to these current traces creates a prob-
lem of its own. The frequency of the current and the speed of the
motor are directly proportional, and the valid range of speeds over-
laps in part with the frequencies of noise. Thus, we must restrict
the cutoff frequency of our low-pass filter to above this range, and
compensate for the remaining noise in other ways.
3.5 Trace Synchronization
The full printer system is composed of multiple motors acting
together, and it is necessary to maintain synchronization when
capturing their current traces. Done poorly, this can cause issues
with misordered motor movements across different axes. These
misalignments can distort the reconstructed shape significantly.
While it is possible to synchronize the beginning of multiple
traces captured individually, the duration of several commands is
not always fixed, which leads to desynchronization. These include
motion commands such as Home (G28), and thermal commands
that use a feedback loop to reach a specific target temperature.
To provide reliable synchronization throughout the duration of a
print, we capture all motor signals simultaneously in a single print
run. With our selected equipment, this requires multiple oscillo-
scopes. We chose to synchronize to a consistent movement pattern
in the preamble, a printer-specific block of G-code that occurs be-
fore each print, to begin oscilloscope capture. The captures could
also be synchronized with a manual signal to each oscilloscope, by
chaining the oscilloscope triggers, or using a single oscilloscope
with more channels.
4 RECONSTRUCTION APPROACH
At a high level, the reconstruction process consists of several stages.
First, we preprocess the traces to filter noise. Then, we identify
basic features of the trace such as peaks and periods of inactivity.
Next, we attempt to map the features onto motor behavior, such
as reversals. Because of the difficulties explained in Section 3.3,
this stage generates a number of errors. The next stage applies
a heuristic approach to correct these errors. Once a corrected se-
quence of features is finalized, they are used to track the position
of the print head over time. During this process we distinguish
between extruding and non-extruding moves to produce a point
cloud corresponding to the printed figure.
We implemented our reconstruction approach in Python 3.2;
we summarize the essential operation of the algorithm in pseu-
docode. Where our code relies on an external library for non-trivial
functionality, we provide specific reference to the library and call.
4.1 Loading Oscilloscope Data
Our reconstruction algorithm operates on the synchronized traces
of the current delivered to each phase of each motor on the printer.
We refer to the individual motor traces as the X, Y, Z, and E traces.
Our oscilloscopes capture the full waveforms corresponding to each
axis; upon print completion, these readings are exported as a CSV
file.
Our algorithm receives CSV files of measured current values
and corresponding timestamps, with the structure in Figure 8. The
negative timestamps correspond to the values captured by the
oscilloscopes before the trigger signal, at time 0s.
Time ( s ) | Channel A(A ) | Channel B | Channel C | Channel D
− 2 . 0 0 0 5 0 0 0 6 , 0 . 0 1 5 3 7 8 9 4 , 0 . 0 3 6 4 4 8 0 8 , 0 . 0 2 3 8 3 7 3 5 , 0 . 0 2 7 5 2 8 3 0
− 2 . 0 0 0 0 0 0 0 6 , 0 . 0 1 9 6 8 5 0 4 , 0 . 0 3 8 7 5 4 9 2 , 0 . 0 2 5 5 2 9 0 3 , 0 . 0 2 9 2 1 9 9 8
− 1 . 9 9 9 5 0 0 0 6 , 0 . 0 2 3 9 9 1 1 4 , 0 . 0 3 8 7 5 4 9 2 , 0 . 0 2 6 1 4 4 1 9 , 0 . 0 2 5 5 2 9 0 3
. . .
3 A low-pass filter is a signal processing filtering technique that dampens the power
of a signal above a cutoff frequency. There are multiple ways to apply low-pass filters;
in this work, we use an 8th-order Butterworth filter.
Figure 8: Trace Capture in CSV Format (Excerpt).
130.35130.40130.45Time (s)110011Current (A)258.25258.30258.35258.40258.45Time (s)220022Current (A)139RAID ’21, October 6–8, 2021, San Sebastian, Spain
Gatlin et al.
Entries from the CSV files are read into TraceEntry data struc-
tures. The timestamp from the CSV file is read directly into the
time field. The sample values of each motor’s two phases are saved
in phase0 and phase2; the inverted values (negated) are saved in
phase1 and phase3, respectively. This duplication simplifies the peak
recognition process in a later stage.
In addition to the timestamp and values, each entry is associated
with an axis marker and a set of flags corresponding to motor behav-
iors. These flags are initially cleared; later stages of the algorithm
will set them as appropriate. Descriptions of the flags are provided
in the relevant sections.
The individual traceEntry elements are stored in sequential data
structures, one for each axis. As the sizes of the datasets range from
hundreds of thousands to hundreds of millions of these entries,
we use the NumPy library’s Array structure rather than standard
Python datatypes.
4.2 Peak Detection
Later stages of our algorithm operate primarily on peaks and their
timestamps, so we must first recognize the peaks from the trace.
The raw data has significant high-frequency noise. We first apply
a low-pass filter to remove this noise, using the SciPy butter filter.
The filter is applied with cutoff frequencies of 300 Hertz for the X-, Y-
, and Z-axes, and 275Hz for the E-axis. Our process for determining
these values is discussed in greater detail in Section 7.
After applying the filter we use the find_peaks function from
the SciPy Signals package [36] to identify the peaks, marking them
by setting the isPeak flag in the corresponding traceEntry. The
parameters of this function, height and prominence, are applied
differently per axis:
X : h e i g h t = 0 . 4 prominence = 0 . 3
Y : h e i g h t = 0 . 4 prominence = 0 . 3
Z : h e i g h t = 0 . 1 prominence =0 . 12 5
E : h e i g h t = 0 . 1 prominence = 0 . 2
The selection criteria for these are also discussed in Section 7.
There are several errors that we observed in flagging peaks that
must be handled before further processing. While peaks should not
occur simultaneously, noise and level-shifting behavior means that
there are sometimes simultaneous peaks on both phases of an axis.
Even peaks that are only in very close proximity can cause issues.
The first case is handled while applying peak flags from find_peaks
to the trace; if two phases attempt to flag the same timestamp as a
peak, the phase with a higher peak is preserved. The proximity case
is handled after all peaks have been flagged. If a peak occurs on a
phase that is lower than another phase at the time, the algorithm
checks if it is within a time threshold of the nearest peak- either
within half of the average period between nearby peaks or a fixed
threshold of 0.025s. If both hold true, then the low peak is removed.