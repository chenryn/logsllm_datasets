输入。expliot的核心是淹没返回地址，劫持进程的控制权，之后跳转去执行shellcode。与shellcode
具有一定的通用性不同，exploit往往是针对特定漏润而言的。
其实，漏洞利用的过程就好像一枚导弹飞向目标的过程。导弹的设计者关注的是怎样计算
飞行路线，锁定目标，最终把弹头精确地运载到自的地并引爆，而并不关心所承载的弹头到底
---
## Page 97
0
day
安
样淹没返回地址，获得进程控制权，把EIP传递给shellcode让其得到执行并发挥作用，而不关
全
心shellcode到底是弹出一个消息框的恶作剧，还是用于格式化对方硬盘的穷凶极恶的代码，如
：
图3.1.1所示。
软
件
目标
漏
导弹
（有漏润的主机或程序）
洞
(exploit)
分
析
技
术
脑准系统、导航系统等
弹头
（第
有效载荷
（返回地址、跳转指令等）
(shellcode)
2
版
图3.1.1缓冲区溢出过程中的功能模块划分
随着现代化软件开发技术的发展，模块化、封装、代码重用等思想在漏洞利用技术中也得
以体现。试想如果仿照武器的设计思想，分开设计导弹和弹头，将各自的技术细节封装起来，
洞测试平台Metasploit就是利用了这种观点。Metasploit通过规范化exploit和shellcode之间的
接口把漏洞利用的过程封装成易用的模块，大大减少了expliot开发过程中的重复工作，深刻体
现了代码重用和模块化、结构化的思想。在这个平台中：
（1）所有的exploit都使用漏洞名称来命名，里边包含有这个漏洞的函数返回地址，所使用
的跳转指令地址等关键信息。
（2）将常用的shellcode（例如，用于绑定端口反向连接、执行任意命令等）封装成一个个
通用的模块，可以轻易地与任意漏洞的exploit进行组合。
题外话：与导弹的比喻不谋而合，在Metasploit中存在漏洞的受害主机会被当作一个
叫“target”的选项进行配置，而shellcode同样也有一个更加形象的名字：payload。
不知道在Metasploit以后的版本中会不会把exploit配直改成missile
3.1.2shellcode需要解决的问题
2.4节中的代码植入过程是一个简化到了极点的实验。其实，这个实验中还有一些问题需
要进一步完善。
在2.4节的代码植入实验中，我们直接用OllyDbg查出了栈中shellcode的起始地址。而在
实际调试漏洞时，尤其是在调试正中的漏洞时，我们经常会发现有缺陷的函数位于某个动态
链接库中，且在程序运行过程中被动态装载。这时的栈中情况将会是动态变化着的，也就是说，
这次从调试器中直接抄出来的shellcode起始地址下次就变了。所以，要编写出比较通用的
72
---
## Page 98
第
shellcode就必须找到一种途径让程序能够自动定位到shellcode的起始地址。有关利用跳转指令
3
定位shellcode的讨论将在3.2节中进行。
章
缓冲区中包括shellcode、函数返回地址，还有一些用于填充的数据。3.3节中将介绍怎样
开
组织缓冲区内的这些内容。
发
不同的机器、不同的操作系统中同一个API函数的入口地址往往会有差异。还记得2.4节
shellcode:
地址的shellcode很可能在调试通过后换一台计算机就会因为函数地址不同而出错。为此，我们
必须让shellcode自己在运行时动态地获得当前系统的API地址。3.4节会带领您综合跳转地址、
shellcode的分布、自动获得API等技术，把2.4节中那段简陋的shellcode改造成比较通用的版
的
本。在这节的实验中还将穿插介绍shellcode的调试方法，怎样从汇编代码中提取机器代码等实
艺
术
际操作中将遇到的问题。
3.5节中将春重介绍如何通过使用对shellcode编码解码的方法，绕过软件对缓冲区的限制
及IDS等的检查。
3.6节重点介绍了在整个缓冲区空间有限的情况下，怎样使代码更加精简干练，从而尽量
缩短shellcode的尺寸，开发出短小精悍的shellcode。这节中的实验部分最终只用了191个字节
的机器码就实现了一个把命令行窗口绑定到特定端口的bindshell。
当然，如果您对shellcode开发技术本身很感兴趣，并且有丰富的汇编语言编程经验，相信3.6
节中讨论的编程技术对您开发更高级的shellcode一定会有所帮助。
3.2定位shellcode
3.2.1栈帧移位与jmpesp
回忆2.4节中的代码植入实验，当我们可以用越界的字符完全控制返回地址后，需要将返
回地址改写成shellcode在内存中的起始地址。在实际的漏洞利用过程中，由于动态链接库的装
入和卸载等原因，Windows进程的函数栈顿很有可能会产生“移位”，即shellcode在内存中的
地址是会动态变化的，因此像2.4节中那样将返回地址简单地覆盖成一个定值的做法往往不能
让exploit奏效，如图3.2.1所示。
要想使exploit不至于10次中只有2次能成功地运行shellcode，我们必须想出一种方法能
够在程序运行时动态定位栈中的shellcode。
回顾2.4节代码植入实验中在verify_password函数返回后栈中的情况，如图3.2.2所示。
（1）实线体现了代码植入的流程：将返回地址淹没为我们手工查出的shellcode起始地址
0x0012FAF0，函数返回时，这个地址被弹入EIP寄存器，处理器按照EIP寄存器中的地址取指
令，最后栈中的数据被处理器当成指令得以执行。
（2）虚线则点出了这样一个细节：在函数返回的时候，ESP恰好指向栈帧中返回地址的后
一个位置！
73
---
## Page 99
day安全：
0
调试通过时的栈状态
PE被重新装载
下次运行时的栈状态
软件漏洞分析技术
0:O012PAEB
stackdata
C012RAESh
stactdeta
DO01ZRNFO:
0:0012H05
0012AP8:
0x0012FAP0:
0001
D10012R461
RNPO:
steck dnkel
0012F80
X0012FB08
00012FB08
nor
hckdnte
X0012F:0E
QX0012FB08:
0012E:10
0x0012FB10:
00126814:
0x0012FB14:光为sh11c0d
0x0012FB18:克为she1lc0de
（第2版）
10012RB
Dx0012FB18填充为he11code
:001
0x0012FA20：填充为hecod
010012
RA24:
stack data
0x0012FA24城充ahelcode
Btack dae
0x0012FA283E8P（被模）
0x0012FA28：返国地址（0x0012FAP8）
020012A3nc:da
*normal stack data.*.
..*normal stack data...
调试exploit时用OllyDbg直接获得
程序重新被装入运行时，栈帧发生
shellcode的起始地址并用其覆盖函数
“移位”，先前查出的返回地址此时
返回地址，shellcode得以执行
指向无效指令！静态的shellcode地址
不能适应动态的内存变化。
图3.2.1
栈帧移位示意图
Txoun
XOR EEX,EBX
KBE NSIT
ERK,1.SP
53
图3.2.2
溢出发生时栈、寄存器与代码之间的关系
一般情况下，ESP寄存器中的地址总是指向系统栈中且不会被溢出的数据破坏。函数返回
---
## Page 100
第3
时，ESP所指的位置恰好是我们所淹没的返回地址的下一个位置，如图3.2.3所示。
章
提示：函数返回时，ESP所指位置还与函数调用约定、返回指令等有关。例如，retn3
与retn4在返回后，ESP所指的位置都会有所差异。
开发 shelcode的艺术
使用静态地址定位
shellcode，当栈帧
用进程代码空间里一条jpep指令的地址覆盖
“移位”时无法准确
函数返回地址。函数返回后，先去执行跳转指
令：
之后才回到找区。重新布置shellcode的摆
定位
放位置后，可以准确地定位shellcode，适应栈
区动志变化的要求
进和的代时空
stack data**
..stack data**
其能指令
stack data-
stack data
ESP
"stack data**
*stack data**
**stack dats***
**stack dnta***
*stack data**
*stack data**
函数返回后
函数返回后
ESP的位置
ESP的位置
图3.2.3使用“跳板”的溢出利用流程
由于ESP寄存器在函数返回后不被溢出数据干扰，且始终指向返回地址之后的位置，我们
可以使用图3.2.3所示的这种定位shellcode的方法来进行动态定位。
（1）用内存中任意一个jmpesp指令的地址覆盖函数返回地址，而不是原来用手工查出的
shellcode起始地址直接覆盖。
（2）函数返回后被重定向去执行内存中的这条jmpesp指令，而不是直接开始执行shellcode。
（3）由于esp在函数返回时仍指向栈区（函数返回地址之后），jmpesp指令被执行后，处
理器会到栈区函数返回地址之后的地方取指令执行。
（4）重新布置shellcode。在淹没函数返回地址后，继续淹没一片栈空间。将缓冲区前边一
段地方用任意数据填充，把shellcode恰好摆放在函数返回地址之后。这样，jmpeSp指令执行
过后会恰好跳进shellcode。
75
---
## Page 101
0
day
安
“移位”，都能够精确地跳回栈区，从而适应程序运行中shellcode内存地址的动态变化。
全：
本节实验将把4.4节代码植入实验中的password.txt文件改造成上述思路的exploit，并加
入安全退出的代码避免点击消息框后程序的崩溃。
软
件漏
题外话：1998年，黑客组织“CultoftheDeadCow的Dildog在Bugtrq邮件列表中以
MicrosoftNetmeeting为例首次提出了利用jmpcap完成对shellcode的动态定位，从而解
洞
分
决了Windows下栈帧移位问题给开发稳定的exploit带来的重重困难。毫不夸张地讲，
析
跳板技术应该算得上是Windows栈溢出利用技术的一个里程碑。
技
术
3.2.2获取“跳板”的地址
（第
2
件和Win_32平台下进程4GB的虚拟内存空间的学习，我们应当明白除了PE文件的代码被读
版
入内存空间，一些经常被用到的动态链接库也将会一同被映射到内存。其中，诸如kemel.32.dll、
user32.dll之类的动态链接库会被几乎所有的进程加载，且加载基址始终相同。
2.4节实验中的有漏洞的密码验证程序已经加载了user32.dll，所以我们准备使用user32.dll
中的jmpesp作为跳板。获得user32.dl内跳转指令地址最直观的方法就是编程序搜索内存。
#include 
#include 
#define DLL_NAME"user32.d11*
main()
BYTE*ptr;
int position,address;
HINSTANCE handle:
BOOLdone_flag=FALSE;
handle=LoadLibrary(DLL_NAME);
if(!handle)
printf(load dll erro!);
exit(o);
ptr=（BYTE*)handle;
for(position=0;!done_flag;position++)
f
try
if（ptr[position]==0xFF&& ptr[position+l]==0xE4）
1/0xFFE4istheopcodeofjmpesp
76
---
## Page 102
第
intaddress=(int)ptr+position;
3章
printf(oPcoDE found at Ox&x\n*,address);
开发shellcode的艺术
catch(...)
intaddress=（int）ptr+position;
printf（END OF Oxex\n,address）;
done_flag=true;
jmpesp对应的机器码是0xFFE4，上述程序的作用就是从user32.dll在内存中的基地址开
始向后搜索0xFFE4，如果找到就返回其内存地址（指针值）。
如果您想使用别的动态链接库中的地址（如“kermel32.dll”、“mfc42.dll”等），或者使
用其他类型的跳转地址（如callesp、jmpebp等），也可以通过对上述程序稍加修改而轻易
获得。
除此以外，还可以通过OllyDbg的插件轻易地获得整个进程空间中的各类跳转地址。您
可以到看雪论坛的相关版面下载到这个插件（OllyUni.dl1），并把它放在OllyDbg目录下的
Plugins文件夹内，重新启动OllyDbg进行调试，在代码框内单击右键，就可以使用这个插件
了，如图3.2.4所示。
搜索结束后
点击这里查
看日志文件
Drlec
Drlt
MPICALLEO
图3.2.4用OllyDbg的插件搜索“跳板”的地址
77
---
## Page 103
day
搜索结束后，单击OllyDbg中的“L”按钮，就可以在日志窗口中查看搜索结果了。
安全
3.2.3使用“跳板”定位的exploit
软
仍然使用2.4节中的代码作为攻击目标，实验环境如表3-2-1所示
件
表3-2-1实验环境
漏
洞
推荐使用的环境
备注
分
操作系统
Windows XP SP2
其他Win32操作系统也可进行本实验
析
编详器
Visual C++ 6.0
如使用其他编译器，需重新调试，且注意关闭GS等选项
技
编译选项
默认编译选项
VS2003和VS2005中的GS编详选项会使栈溢出实验失败
术
build版木
debug版木
如使用release版本，则需要重新调试
（第
说明：函数调用地址和跳转地址依赖于系统补丁，需要在实验时重新确定。确定的方法在实验指导中有详细说明。
2
运行我们自己编写程序搜索跳转地址得到的结果和OllyDbg插件搜到的结果基本相同，如
版
图3.2.5所示。
Lugdota
X口口
D：ny_boklclapter_5kade52sarcb.x
AddraoeMes
5527d=118
2Y1613
题外话：跳转指令的地址将直接关系到exploit的通用性。事实上，kermel32.dll与
user32.dll在不同的操作系统版本和补丁版本中也是有所差异的。最佳的跳转地址位于
那些“千年不变”且被几乎所有选程都加载的模块中。
这里不妨采用位于内存Ox77DC14CC处的跳转地址jmpesp作为定位shellcode的“跳板"。
在制作exploit的时候，还应当修复2.4节中shellcode无法正常退出的缺陷。为此，我们在
调用MessageBox之后，通过调用exit函数让程序干净利落地退出。
这里仍然用dependencywalker获得这个函数的入口地址。如图3.2.6所示，ExitProcess是
kermel32.dll的导出函数，故首先查出kermel32.dl1的加载基址0x7C800000，然后加上函数的偏