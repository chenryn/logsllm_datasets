# Embedded System Design: From Electronics to Microkernel Development

**Author:** Rodrigo Maximiano Antunes de Almeida  
**Affiliation:** Universidade Federal de Itajubá  
**Contact:** [rmaalmeida@unifei.edu.br](mailto:rmaalmeida@unifei.edu.br)  
**Website:** Portal embarcados

**License:** This work is licensed under the Creative Commons 3.0 – Attribution – Non-Commercial – Share Alike (CC BY-NC-SA 3.0). Additional permissions can be requested by contacting the author directly via email.

## Workshop Schedule

### Hardware
1. **Electronics Introduction**
   - Schematics
   - Datasheets
   - Protoboard/Breadboard
   - LED
   - Potentiometer
   - LCD
   - Microcontroller
2. **System Design**
   - Basic Steps

### Firmware
1. **Embedded Programming**
   - Peripheral Access
2. **Kernel**
   - Timing Requirements
   - Device Drivers

## Hardware Concepts

### Electronics Introduction
- **Schematics**: A way to represent components and their connections. Each component has its own symbol, and crossing wires are only connected if joined with a dot.
- **Datasheets**: The primary source of information for electronics, providing electrical characteristics, simplified schematics, use examples, opcodes, and APIs.
- **Protoboard/Breadboard**: Used for prototyping circuits.
- **LED**: Light Emitting Diode.
- **Potentiometer**: Linear or logarithmic, used as a voltage divider, requiring an analog input. Can also act as a filter.
- **LCD Display**: A complete interface solution including screen, video card, protocol, and data cable. Commonly uses the HD44780 standard, which supports 4/8-bit communication and 3 control bits. Key features include backlight, data connection, current consumption, and power-on time/routine.
- **Microcontroller**: A system-on-a-chip that includes a processor, memory, I/O peripherals, communication interfaces, and safety components. Important considerations include crystal (Xtal) configuration, reset pin, DC needs, and shared pins for multiple peripherals.

### System Design
- **Steps in Electronic System Design**:
  1. Define the objectives.
  2. Choose the main components needed to achieve the objectives.
  3. Get use examples and recommendations from component datasheets.
  4. Build the schematics.
  5. Simulate hardware elements.
  6. Layout the board.
- **Free CAD Tools for Electronics**:
  - Fritzing (fritzing.org)
  - KiCad
  - LTSpice
  - CircuitLab (https://www.circuitlab.com/)
- **Ultra-Fast Workshop**:
  - Develop a power source.
  - Online circuit simulation and Fritzing for layout.
  - Go from concept to ready-to-manufacture in 10 minutes.
- **Minimum Circuit Components**:
  - Microcontroller
  - Voltage source
  - Input/Output as needed
  - Clock source
  - Programmer connection

## Firmware Development

### Firmware Tools
- **Programmer**: PICkit3, which supports ICSP and can program many Microchip products. Also functions as a debugger equivalent to JTAG.
- **IDE**: MPLAB X, based on NetBeans.
- **Compiler**: SDCC, based on GCC, and GPUtils.

### Embedded Programming Concepts
- **Memory Segmentation**: Memory is divided into segments for different purposes.
- **Hardware Configuration**: Certain options must be set before the program starts, often using special instructions. Refer to the compiler datasheet for details.
- **Example Configuration**:
  ```c
  #pragma config MCLRE=ON            // Master Clear disabled
  #pragma config FOSC=INTOSC_XT      // Oscillator with external high-speed crystal
  #pragma config WDT=OFF             // Watchdog controlled by software
  #pragma config LVP=OFF             // No low-voltage programming
  #pragma config DEBUG=OFF           // Debugging disabled
  #pragma config XINST=OFF
  ```
- **Pointer to Specific Memory Address**:
  ```c
  void main(void) {
      char *ptr;
      ptr = 0xF83;  // Pointing to port D
      *ptr = 0xFF;  // Changing all outputs to high
  }
  ```
- **Header with Definitions**:
  ```c
  #define PORTD (*(volatile __near unsigned char*)0xF83)
  #define TRISC (*(volatile __near unsigned char*)0xF94)

  while(PORTD == PORTD);  // This is not an infinite loop!
  ```

### Bitwise Operations
- **Example**:
  ```c
  char mask;
  mask = 1 << 0;  // Set the least significant bit
  mask |= 1 << 1; // Set the second least significant bit
  mask &= ~(1 << 2); // Clear the third least significant bit
  ```

## Kernel Development

### Timing Requirements
- **Device Drivers**: Implementations for specific hardware components.

## LCD Communication

- **Custom Characters**: The LCD can hold up to 8 custom characters, each defined by a 5x8 matrix, providing a 40x64 b/w drawing area.
- **Initialization and Commands**:
  ```c
  void lcdCommand(int value) {
      pushByte(value, 0);
      delayMicroseconds(40);
  }

  void lcdChar(int value) {
      pushByte(value, 1);
      delayMicroseconds(2);
  }

  void lcdInit() {
      BitClr(TRISC, EN);
      BitClr(TRISC, RS);
      TRISD = 0x0f;
      delayMicroseconds(50);
      commandWriteNibble(0x03);
      delayMicroseconds(5);
      commandWriteNibble(0x03);
      delayMicroseconds(100);
      commandWriteNibble(0x03);
      delayMicroseconds(5);
      commandWriteNibble(0x02);
      delayMicroseconds(10);
      lcdCommand(0x28); // 4-bit, 2 lines, 5x8 font
      lcdCommand(0x06); // Incremental mode
      lcdCommand(0x0c); // Display on, cursor and blink off
      lcdCommand(0x03); // Clean internal variables
      lcdCommand(0x80); // Initial position
      lcdCommand(0x01); // Clear display
      delayMicroseconds(2);
  }
  ```

- **Custom Character Example**:
  ```c
  void lcdDefconLogo(void) {
      int i;
      unsigned char defcon[] = {
          0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x04,
          0x0e, 0x1f, 0x04, 0x04, 0x1f, 0x0e, 0x11, 0x1f,
          0x00, 0x10, 0x18, 0x18, 0x18, 0x18, 0x10, 0x04,
          0x0c, 0x03, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x04,
          0x00, 0x00, 0x1b, 0x04, 0x1b, 0x00, 0x00, 0x00,
          0x06, 0x18, 0x00, 0x00, 0x00, 0x18, 0x06, 0x02
      };
      lcdCommand(0x40);
      for (i = 0; i < sizeof(defcon); i++) {
          lcdChar(defcon[i]);
      }
  }
  ```

## Circular Buffers

- **Concepts**:
  - "Endless" memory spaces.
  - Use FIFO (First-In, First-Out) approach.
  - Store temporary data.
  - Can be implemented using vectors or linked lists.
- **Vector Implementation**:
  - Uses less space.
  - Requires special caution when cycling.
  - Differentiating full from empty can be a challenge.
  ```c
  #define CB_SIZE 10
  int circular_buffer[CB_SIZE];
  int index = 0;

  for (;;) {
      // Do anything with the buffer
      circular_buffer[index] = index;
      // Increment the index
      index = (index + 1) % CB_SIZE;
  }
  ```

This document provides a structured and professional overview of embedded system design, covering hardware, firmware, and kernel development.