Embedded System Design:
From Electronics
to Microkernel Development
Rodrigo Maximiano Antunes de Almeida
PI:EMAIL
@rmaalmeida
Universidade Federal de Itajubá
Portal embarcados
The work ”Embedded System Design: From Electronics to Microkernel 
Development” of Rodrigo Maximiano Antunes de Almeida was licensed 
with Creative Commons 3.0 – Attribution – Non Commercial – Share Alike 
license.
Additional permission can be given by the author through direct contact 
using the e-mail: PI:EMAIL
Creative Commons License
Workshop schedule
• Hardware
 Electronics introduction
 Board development
• Firmware
 Embedded programming
 Peripheral access
• Kernel
 Timing requirements
 Device drivers
Hardware
Hardware concepts
• Electronics introduction
 Schematics
 Datasheets
 Protoboard/breadboard
 LED
 Potentiometer
 LCD
 Microcontroller
• System design
 Basic steps
Electronics introduction
• http://xkcd.com/730/
Schematics
• Way to represent the 
components and its 
connections
• Each component has 
its own symbol
• Crossing wires only 
are connected if 
joined with a dot
Datasheets
• The main source of information concerning 
electronics
• Presents
 Electrical characteristics
 Simplified schematics
 Use example
 Opcodes/API
Protoboard/Breadboard
LED
LED
Potentiometer
• Linear/Log
• Used as voltage 
divisor
• Need an analog input
• Filter
Potentiometer
LCD Display
LCD Display
• Complete interface solution
 Screen + Video card + Protocol + Data cable
• “Standard” HD44780
 4/8 bits communication
 3 control bits
LCD Display
• Backlight
• Data connection
• Current consumption
• Power on time/routine
Microcontroller
• System-on-a-chip
 Processor
 Memory
 Input/Output
peripherals
 Communication
 Safety components
Microcontroller
• Xtal configuration
• Reset pin
• DC needs
• Many peripherals on 
the same pin
System desing
System design 
• Steps on a generic electronic system design
 Define the objective(s)
 Choose the main components needed to achieve the 
objective
 Get the use example and recommendations from 
component datasheet
 Build the schematics
 Simulation of HW elements
 Board layout
System design
• Free CAD tools for electronics
 Fritzing (fritzing.org)
 Kicad
 LTSpice
 https://www.circuitlab.com/
System design
• Ultra fast workshop
 Power source development
• Online circuit simulation + fritzing for layout
 From concept to ready to manufacture in 10 min
System design
• Minimum circuit 
components
 Microcontroller
 Voltage source
 Input/Output as 
needed
 Clock source
 Programmer 
connection
Firmware 
development
Firmware development
• Programmer
• IDE
• Basic concepts
 CPU Architecture
 HW configuration
 Memory access
• First program (Led blinking)
• Second program (ADC read)
• Third program (LCD access)
Firmware tools
• Programmer
 PICkit3
 Can use ICSP
 Can program a lot of 
Microchip products
 Also a debugger
 Jtag equivalent
Firmware tools
Firmware tools
• IDE
 MPLABX
• Based on Netbeans
• Compiler
 SDCC
• Based on GCC
 GPUtils
Embedded 
programming 
concepts
Becouse while(a==a); is not an infinite loop!
Embedded programming concepts
Embedded programming concepts
• Memory segmentation
Embedded programming concepts
• HW configuration
 Some options must be set before the program start
 This can only be accomplished by special instructions
 Compiler datasheet
Embedded programming concepts
Embedded programming concepts
#pragma config MCLRE=ON            
// Master Clear desabilitado
#pragma config FOSC=INTOSC_XT      
// Oscilador c/ cristal externo HS
#pragma config WDT=OFF             
// Watchdog controlado por 
software
#pragma config LVP=OFF             
// Sem programação em baixa tensão
#pragma config DEBUG=OFF           
// Desabilita debug
#pragma config XINST=OFF
Embedded programming concepts
Embedded programming concepts
• Build a pointer to a specific memory address:
void main (void){
char *ptr;
//pointing to the port D
ptr = 0xF83;
//changing all outputs to high
*ptr = 0xFF;
}
Embedded programming concepts
• Building a header with all definitions
 __near = sfr region
 volatile = can change without program acknowledge
#define PORTD   (*(volatile __near unsigned char*)0xF83)
#define TRISC   (*(volatile __near unsigned char*)0xF94)
//this is not an infinite loop!
while( PORTD == PORTD);
Embedded programming concepts
• Bitwise operations
char mask;
mask = 1  0; ms--) {
for (i = 0; i > 4;
pushNibble(val_upper, rs);
pushNibble(val_lower, rs);
}
LCD communication 
void lcdCommand(int value) {
pushByte(value, 0);
delayMicroseconds(40);
}
void lcdChar(int value) {
pushByte(value, 1);
delayMicroseconds(2);
}
void lcdInit() {
BitClr(TRISC, EN);
BitClr(TRISC, RS);
TRISD = 0x0f;
delayMicroseconds(50);
commandWriteNibble(0x03);
delayMicroseconds(5);
commandWriteNibble(0x03);
delayMicroseconds(100);
commandWriteNibble(0x03);
delayMicroseconds(5);
commandWriteNibble(0x02);
delayMicroseconds(10);
//display config
lcdCommand(0x28); //4bits, 2 linhas, 5x8
lcdCommand(0x06); //incremental mode
lcdCommand(0x0c); //display on,  cursor and blink off
lcdCommand(0x03); //clean internal variables
lcdCommand(0x80); //initial position
lcdCommand(0x01); //clear display
delayMicroseconds(2);
}
LCD communication 
LCD communication 
• The LCD can hold up 
to 8 custom characters
• Each character is a 5*8 
matrix
• Translating: 40*64 b/w 
drawing area
Source: http://www.8051projects.net/lcd-interfacing/lcd-custom-character.php
LCD communication 
LCD communication 
void lcdDefconLogo(void) {
int i;
unsigned char defcon[] = {
0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x04,
0x0e, 0x1f, 0x04, 0x04, 0x1f, 0x0e, 0x11, 0x1f,
0x00, 0x10, 0x18, 0x18, 0x18, 0x18, 0x10, 0x04,
0x0c, 0x03, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x04,
0x00, 0x00, 0x1b, 0x04, 0x1b, 0x00, 0x00, 0x00,
0x06, 0x18, 0x00, 0x00, 0x00, 0x18, 0x06, 0x02
};
lcdCommand(0x40);
for (i = 0; i age);
printf("Name:   %s\n", myself->name);
printf("Weight: %f\n", myself->weight);
return 0;
}
concepts(2);
concepts(2);
circular_buffers(2.3);
concepts(2);
• Circular Buffers
 “Endless” memory spaces
 Use FIFO aproach
 Store temporary data
 Can implemented using vectors or linked-lists
concepts(2);
• Vector implementation
 Uses less space
 Need special caution when cycling
 Problem to differentiate full from empty
#define CB_SIZE 10
int circular_buffer[CB_SIZE];
int index=0;
for(;;){
//do anything with the buffer
circular_buffer[index] = index;
//increment the index
index = (index+1)%CB_SIZE;
}