title:NeXUS: Practical and Secure Access Control on Untrusted Storage Platforms
using Client-Side SGX
author:Judicael Briand Djoko and
Jack Lange and
Adam J. Lee
NEXUS: Practical and Secure Access Control on
Untrusted Storage Platforms using Client-side SGX
Judicael B. Djoko
University of Pittsburgh
PI:EMAIL
Jack Lange
University of Pittsburgh
PI:EMAIL
Adam J. Lee
University of Pittsburgh
PI:EMAIL
Abstract—With the rising popularity of ﬁle-sharing services
such as Google Drive and Dropbox in the workﬂows of individuals
and corporations alike, the protection of client-outsourced data
from unauthorized access or tampering remains a major secu-
rity concern. Existing cryptographic solutions to this problem
typically require server-side support,
involve non-trivial key
management on the part of users, and suffer from severe re-
encryption penalties upon access revocations. This combination
of performance overheads and management burdens makes this
class of solutions undesirable in situations where performant,
platform-agnostic, dynamic sharing of user content is required.
We present NEXUS, a stackable ﬁlesystem that leverages
trusted hardware to provide conﬁdentiality and integrity for user
ﬁles stored on untrusted platforms. NEXUS is explicitly designed
to balance security, portability, and performance: it supports
dynamic sharing of protected volumes on any platform exposing
a ﬁle access API without requiring server-side support, enables
the use of ﬁne-grained access control policies to allow for selective
sharing, and avoids the key revocation and ﬁle re-encryption
overheads associated with other cryptographic approaches to
access control. This combination of features is made possible
by the use of a client-side Intel SGX enclave that is used to
protect and share NEXUS volumes, ensuring that cryptographic
keys never leave enclave memory and obviating the need to re-
encrypt ﬁles upon revocation of access rights. We implemented
a NEXUS prototype that runs on top of the AFS ﬁlesystem and
show that it incurs ×2 overhead for a variety of common ﬁle
and database operations.
I. INTRODUCTION
Cloud-based data storage and sharing services are among the
most widely used platforms on the Internet [1, 2]. By relying
on centralized, cloud-based infrastructures, users gain access
to vast storage capacities, seamless multi-device access to ﬁles,
and point-and-click data sharing at very low cost. However,
this ﬂexibility brings with it risks to the conﬁdentiality and
integrity of users’ data. These services suffer from frequent data
breaches [3, 4, 5], and oftentimes their Terms of Service grant
providers full licensing rights, allowing them to store, modify,
and distribute user data as they choose [6, 7, 8]. As more users
leverage these types of services to manage sensitive information,
addressing these types of security issues is crucial [9].
To this end, our objective is to provide a practical solution
for securing user ﬁles on unmodiﬁed, distributed ﬁle-sharing
services that: (1) allows users to maintain complete control over
how their data can be accessed, modiﬁed, and disseminated by
others users and the storage platform itself; (2) does not alter
the user’s typical ﬁle access workﬂow; and (3) is performant
enough to satisfy the demands of the user’s typical ﬁle access
workloads. Our goal is to ensure the conﬁdentiality and integrity
of user data in the face of untrusted administrators, data
breaches, and other unauthorized disclosures without requiring
server-side support.
Several schemes have been proposed to provide rich access
control semantics for untrusted storage platforms using cryp-
tography. Unfortunately, when implemented in a distributed
setting [10, 11, 12, 13, 14], purely cryptographic approaches
incur very high overheads on user revocation. This results
from the observation that when decrypting ﬁles on a client
machine, the encryption key is inevitably exposed to the client
application and can be cached by the user. Therefore, revoking
a user’s access to a ﬁle requires re-encrypting the ﬁle under a
new key. As shown by Garrison et al. [15], even under modest
policy updates, the resulting overhead can be signiﬁcant as
the incurred cryptographic and network costs are proportional
to both the total size of the affected ﬁles and the degree to
which they are shared. Alternative approaches make use of
trusted hardware to provide strong security features like access
pattern obliviousness (via ORAM) and policy-based access
control [16, 17, 18]. However, these approaches require server-
side hardware support, which limits their availability for users
of personal cloud storage services.
To address this need, we present NEXUS, a privacy
preserving ﬁle system that provides cryptographically secure
data storage and sharing on top of existing network-based
storage services. NEXUS is novel in that it leverages the
Intel SGX [19] extensions to provide efﬁcient access control
and policy management, in a manner that is not possible
using a software-based cryptographic approach. NEXUS allows
users to add strong access controls to existing unmodiﬁed and
untrusted distributed data storage services to protect the conﬁ-
dentiality and integrity of their data from both unauthorized
users and the storage service itself, while enabling sharing
with authorized users. Data is protected through client-side
cryptographic operations implemented inside an SGX enclave.
NEXUS embeds user-speciﬁed access control policies into
ﬁles’ cryptographically protected metadata, which are enforced
by the enclave at access time. Therefore, unlike existing purely
cryptographic approaches to access control, revocations are
efﬁcient and do not require the bulk re-encryption of ﬁle
contents. Instead, the policies embedded in the smaller attached
metadata are simply updated and re-uploaded to the server.
NEXUS is user-centric, transparent and requires no server-
side changes.
It is implemented as a protection layer between
users/applications and an underlying ﬁle system, and leverages
hardware security features (SGX) in order to securely intercept
and transform ﬁle system operations. Its two primary compo-
nents are (1) a secure enclave that provides cryptographic and
policy protections, and (2) a ﬁle system interface layer that
maps the generic ﬁle system API exported by the enclave to
the actual underlying storage platform. This approach allows
NEXUS to present a standard hierarchical ﬁle system view
while supporting a broad range of underlying storage services
such as remote ﬁle systems and distributed object stores.
In this paper, we make the following contributions:
(1) We propose a novel client-side architecture that allows
mutually-trusting users to securely share ﬁles hosted on
untrusted cloud infrastructure. This architecture allows for
efﬁcient volume sharing and access control policy changes.
By performing all access controls and cryptographic
operations inside the enclave, NEXUS allows for seamless
and secure key distribution, minimal user key management,
and efﬁcient user revocation.
(2) NEXUS instantiates a distributed access control platform
using trusted hardware. An SGX enclave serves as a trusted
reference monitor that executes independently on each
client machine rather than centrally on the (untrusted)
server. This enables efﬁcient cryptographic access control
without requiring server-side support for deployment.
(3) We propose a cryptographic protocol that uses SGX remote
attestation to enable secure ﬁle sharing between users.
Communication is completely in-band as it uses ﬁles on
the underlying shared ﬁlesystem to exchange data, and
does not require both users to be online simultaneously.
(4) We implemented a NEXUS prototype that runs on top of
OpenAFS [20]. The prototype runs as a userspace daemon,
and allows unmodiﬁed user applications to access ﬁles in
a protected folder. whilst cryptographically enforcing user-
speciﬁed Access Control Lists (ACLs). Our performance
evaluation shows that, compared to OpenAFS, NEXUS
incurs modest overheads on metadata-intensive operations.
The paper is organized as follows: Section II provides
an account of our protection model. Section III describes
the assumptions and threats of our system. In Section IV,
we describe the NEXUS system and Section V provides
a prototype implementation. Respectively, Sections VI and
VII describe the security and performance evaluations of
the NEXUS AFS prototype. We review related work in
Section VIII, and Section IX concludes the paper.
II. BACKGROUND AND PROTECTION MODEL
A. Intel Software Guard Extensions (SGX)
Intel SGX is a set of processor extensions that provide secure
execution environments, called enclaves, on modern x86 based
platforms. These extensions enable clients to both measure and
verify the code running within an enclave, while also providing
very strong isolation guarantees. When activated, enclaves
execute in user space and are protected from inspection or
modiﬁcation by other processes, as well as the underlying
OS. At the system level, enclaves exist as a special CPU
hardware context that ensures data privacy by encrypting the
contents of enclave-managed memory as it leaves the CPU.
Secure execution is achieved by placing both the code and data
contents needed for a given computation inside the protected
memory region, thus ensuring both conﬁdentiality as well as
integrity of the execution.
1) Isolated Execution: An enclave is set to be an isolated
region within a userspace application. When creating the
enclave, the CPU performs a secure hash measurement of its
contents as they are copied into a protected region of physical
memory called the Enclave Page Cache (EPC). The EPC is
inaccessible from untrusted code, including privileged software
and hardware devices. To run the enclave, the application
invokes a special SGX instruction (EENTER) to jump inside a
predeﬁned entrypoint of the enclave code. While executing, the
enclave code performs arbitrary computations, and can read and
write to untrusted memory. This allows an enclave to efﬁciently
exchange data with the host application. To prevent potential
leakage of sensitive data, the enclave code is not allowed to
call untrusted functions. Enclave memory is only accessible
from the enclave code, and is deﬁned as a linear range in the
host application’s address space. The OS is responsible for
translating enclave virtual addresses into their corresponding
EPC page. On enclave destruction, the CPU clears its EPC
pages and in so, prevents the recovery of sensitive information.
2) Sealed Storage: To persist sensitive data across execu-
tions, SGX allows enclaves to derive a sealing key that can be
used to encrypt and seal data before copying it to untrusted
memory. The sealing key is only accessible within enclave
memory, and is unique to the enclave and the particular CPU
within which the enclave is executing. In NEXUS, we leverage
SGX sealing facilities to protect long-term encryption keys.
3) Remote Attestation: Remote attestation allows a chal-
lenger to validate the identity of a remote enclave, and its
underlying platform. In SGX, this process relies on an Intel-
provisioned Quoting Enclave, which uses a unique asymmetric
key embedded in the CPU to generate quotes [21]. A quote is a
signature of the target enclave’s identity along with additional
data generated inside the enclave. This allows the challenger
to verify the quote using an Intel-provided public certiﬁcate.
To support ﬁle sharing, we use remote attestation for securely
transferring encryption keys across valid NEXUS enclaves.
B. SGX Design Space
With its strong security primitives, SGX presents a wide
range of options on how to deploy enclaves within a cloud
setting. Depending upon the security needs of the distributed ap-
plication, different considerations have to be taken into account.
Thus, we deﬁne the design space of enclave deployment along
the following dimensions: (1) Enclave provenance — whether
the enclave is owned by the client or the service provider and;
(2) Enclave location — whether the enclave is running on the
client or the server.
(a) service-enclave-on-server
(b) service-enclave-on-client
(c) client-enclave-on-server
(d) client-enclave-on-client
Fig. 1: Different architectures for enabling SGX security in a client-server environment. Each architecture shows a different
combination of enclave location and enclave provenance.
Figure 1 shows all the combinations in this design space.
The service-enclave-on-server (e.g., PESOS [18]) and service-
enclave-on-client (e.g., EndBox [22]) collectively describe
Digital Rights Management (DRM) scenarios: access to data
is controlled by the service provider’s enclave. On the other
hand, the client-enclave-on-server (e.g., Troxy [23]) denotes a
scenario in which the client provisions enclaves on the server
to achieve secure remote computation. However, running the
client enclave on the server has drawbacks. First, the server
must be equipped with SGX hardware which, at the time of
this writing was only offered by one major cloud provider
(Microsoft Azure [24]). Second, a substantial amount of server-
side software may need to be retroﬁtted for SGX support.
Depending upon the system’s complexity, this may not be an
easy task as changes could range from modifying the client –
server communication protocol, to including untrusted software
components inside the enclave [16, 25, 26, 18, 27].
C. Our Approach
NEXUS combines the client-side encryption model used
by existing cryptographic ﬁlesystems with SGX security
guarantees. Shown in Figure 1d, NEXUS adopts the client-
enclave-on-client architecture to encrypt data on the local
machine before uploading the resulting ciphertext onto the
server. The idea is to have every client run NEXUS locally
and then leverage the aforementioned SGX features to form
a secure key distribution system. On the local machine, all
cryptographic data protection is performed within an enclave
(Isolated Execution), and keys are persisted to disk using SGX
sealing facilities. Then, before sharing keys with authorized
users, we use the remote attestation feature to ensure the
exchange occurs between valid NEXUS enclaves running on
genuine SGX processors. As a result, encryption keys are
never leaked to untrusted memory, and as such, kept under the
complete control of the NEXUS enclave.
In this paper, we explore a deployment model that targets
applications generating sensitive data exclusively at the client,
but rely on a remote server as a storage provider. In the case
of distributed ﬁlesystems, the user’s ﬁle contents are opaque to
server, which we assume can access, modify, and disseminate
any ﬁle that it stores [6, 7, 8]. To protect each ﬁle, we encrypt
its contents, and attach cryptographically-protected metadata
containing access control policy along with key material that
can only be accessed using a valid NEXUS enclave. The
beneﬁts are two-fold: (1) our solution can be easily deployed
without any out-of-band setup, as key distribution is implicitly
provided by the ﬁle synchronization service, and (2) users
maintain control over their data and decide on who is authorized
to access its contents. As SGX-enabled machines come to reach
more end-users, we expect this client-side approach to user-
centric access control to become increasingly mainstream.
III. PROBLEM DESCRIPTION
We consider a typical cloud storage service, in which the
service’s users download and run a client-side program to
access the remote storage platform. Data is stored on remote
cloud based systems that are under the control of the service
provider. In addition to ensuring the persistence and availability
of data, the cloud service typically provides authentication and
access control, but in a way that requires the user to trust the