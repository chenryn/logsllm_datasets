---
author: wxy
category: 软件开发
comments_data:
- date: '2015-08-06 00:31:23'
  message: impressive!
  postip: 114.252.161.44
  username: 来自北京的 Chrome 44.0|Fedora 用户
- date: '2015-08-06 04:49:30'
  message: 再一次证明猿比人智商高！
  postip: 223.104.25.177
  username: 来自重庆的 Sina Weibo 5.4|Android 5.0 用户
- date: '2015-08-06 09:45:14'
  message: 想问问有没有lua的
  postip: 61.50.220.106
  username: 来自北京的 Firefox 39.0|Windows 7 用户
- date: '2015-08-10 10:26:45'
  message: 首先要向Perl/Ruby致敬，那段看起来很像乱码的东西帮我的心魔战胜了我自己。
  postip: 202.105.138.162
  username: Pucmax [Chrome 43.0|Windows 7]
- date: '2015-08-11 19:54:57'
  message: 叹为观止
  postip: 58.212.193.16
  username: 旷野里young [Chrome 38.0|Windows 7]
- date: '2017-02-23 14:13:28'
  message: Perl / Ruby这个真是有点吓人呀！
  postip: 222.128.174.68
  username: lghah [Chrome 56.0|Windows 10]
- date: '2019-09-21 10:14:00'
  message: "Perl / Ruby&nbsp;&nbsp;的正则表达式，\r\n\r\n结尾比起&nbsp;&nbsp;原版，少了个&nbsp;&nbsp;【*)】\r\n\r\n这需要注意一下哦~"
  postip: 119.123.240.6
  username: 来自广东深圳的 Chrome 76.0|Windows 10 用户
count:
  commentnum: 7
  favtimes: 5
  likes: 0
  sharetimes: 0
  viewnum: 15769
date: '2015-08-05 15:56:00'
editorchoice: false
excerpt: 用正则表达式验证邮件地址似乎是一件简单的事情，但是如果要完美的验证一个合规的邮件地址，其实也许很复杂。  邮件地址的规范来自于 RFC 5322。有一个网站
  emailregex.com专门列出各种编程语言下的验证邮件地址的正则表达式，其中很多正则表达式都是我听说过而从未见过的复杂我想说，做这个网站的程序员是被邮件验证这件事伤害了多深啊！
  其实，在产品环境中，一般来说并不需要这么复杂的正则表达式来做到99.99%正确。一般来说，从执行效率和测试覆盖率来说，只需要一个简单的版本即可： /^+@+\.{2,4}$/i
  那么下面我们来看看这些更严谨、
fromurl: ''
id: 5963
islctt: false
largepic: /data/attachment/album/201508/05/155648gil3ndk3885gn331.jpg
permalink: /article-5963-1.html
pic: /data/attachment/album/201508/05/155648gil3ndk3885gn331.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 用正则表达式验证邮件地址似乎是一件简单的事情，但是如果要完美的验证一个合规的邮件地址，其实也许很复杂。  邮件地址的规范来自于 RFC 5322。有一个网站
  emailregex.com专门列出各种编程语言下的验证邮件地址的正则表达式，其中很多正则表达式都是我听说过而从未见过的复杂我想说，做这个网站的程序员是被邮件验证这件事伤害了多深啊！
  其实，在产品环境中，一般来说并不需要这么复杂的正则表达式来做到99.99%正确。一般来说，从执行效率和测试覆盖率来说，只需要一个简单的版本即可： /^+@+\.{2,4}$/i
  那么下面我们来看看这些更严谨、
tags:
- 正则表达式
- 邮件地址
thumb: false
title: 史上最复杂的验证邮件地址的正则表达式
titlepic: false
translator: ''
updated: '2015-08-05 15:56:00'
---
用正则表达式验证邮件地址似乎是一件简单的事情，但是如果要完美的验证一个合规的邮件地址，其实也许很复杂。
![](/data/attachment/album/201508/05/155648gil3ndk3885gn331.jpg)
邮件地址的规范来自于 [RFC 5322](http://www.ietf.org/rfc/rfc5322.txt) 。有一个网站 [emailregex.com](http://emailregex.com) 专门列出各种编程语言下的验证邮件地址的正则表达式，其中很多正则表达式都是我听说过而从未见过的复杂——我想说，做这个网站的程序员是被邮件验证这件事伤害了多深啊！
其实，在产品环境中，一般来说并不需要这么复杂的正则表达式来做到99.99%正确。一般来说，从执行效率和测试覆盖率来说，只需要一个简单的版本即可：
```
/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i
```
那么下面我们来看看这些更严谨、更复杂的正则表达式吧：
### 验证邮件地址的通用正则表达式（符合 RFC 5322 标准）
```
(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
```
由于各种语言对正则表达式的支持不同、语法差异和覆盖率不同，所以，不同语言里面的正则表达式也不同：
### Python
这个是个简单的版本：
```
r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)"
```
### Javascript
这个有点复杂了：
```
/^[-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+)*\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?$/i
```
### Swift
```
[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}
```
### PHP
PHP 的这个版本就更复杂了，覆盖率就更大一些：
```
/^(?!(?:(?:\x22?\x5C[\x00-\x7E]\x22?)|(?:\x22?[^\x5C\x22]\x22?)){255,})(?!(?:(?:\x22?\x5C[\x00-\x7E]\x22?)|(?:\x22?[^\x5C\x22]\x22?)){65,}@)(?:(?:[\x21\x23-\x27\x2A\x2B\x2D\x2F-\x39\x3D\x3F\x5E-\x7E]+)|(?:\x22(?:[\x01-\x08\x0B\x0C\x0E-\x1F\x21\x23-\x5B\x5D-\x7F]|(?:\x5C[\x00-\x7F]))*\x22))(?:\.(?:(?:[\x21\x23-\x27\x2A\x2B\x2D\x2F-\x39\x3D\x3F\x5E-\x7E]+)|(?:\x22(?:[\x01-\x08\x0B\x0C\x0E-\x1F\x21\x23-\x5B\x5D-\x7F]|(?:\x5C[\x00-\x7F]))*\x22)))*@(?:(?:(?!.*[^.]{64,})(?:(?:(?:xn--)?[a-z0-9]+(?:-[a-z0-9]+)*\.){1,126}){1,}(?:(?:[a-z][a-z0-9]*)|(?:(?:xn--)[a-z0-9]+))(?:-[a-z0-9]+)*)|(?:\[(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9][:\]]){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?)))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))\]))$/iD
```
### Perl / Ruby
对与 PHP 的版本，Perl 和 Ruby 表示不服，可以更严谨：