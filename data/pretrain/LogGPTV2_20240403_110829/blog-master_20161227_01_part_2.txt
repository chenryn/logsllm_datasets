  for v_rfid, v_chepai in select rfid,chepai from chepai_rfid where chepai = any(cv_chepai)   
  loop   
    raise notice '%,%', v_rfid, v_chepai;
    if v_loc is null then   
      select loc into v_loc from rfid_cv order by loc  NEW.loc limit 1;  
      raise notice '%', v_loc;
    end if;   
    if cv_rfid is null then   
      select array_agg(t.unnest) into cv_rfid from (select unnest(t1.rfid) from rfid_cv t1 where t1.loc::text=v_loc::text and t1.sid between NEW.sid-interval '1 min' and NEW.sid+interval '1 min') t;  
      if cv_rfid is null then
        -- 该时间段内RFID没有上报信息，可能是RFID故障，也可能是套牌车造成
	raise notice '% 是套牌车', NEW.chepai;  
        -- 告警，异步通知，可能发现套牌车   
        -- 本例使用插入审计代替异步调用
        insert into tbl_taopaiche(sid, chepai, loc) values (now(), v_chepai, NEW.loc);  
	continue;
      end if;
      raise notice '%', cv_rfid;
    end if;  
    if (not cv_rfid && array[v_rfid]) then   
      raise notice '% 是套牌车', NEW.chepai;  
      -- 告警，异步通知，可能发现套牌车   
      -- 本例使用插入审计代替异步调用
      insert into tbl_taopaiche(sid, chepai, loc) values (now(), v_chepai, NEW.loc);  
    end if;  
  end loop;  
  RETURN NEW;  
end;  
$$ language plpgsql strict;  
CREATE CONTINUOUS TRANSFORM ct AS  
  SELECT sid::timestamp, loc::point, chepai::text[] FROM tbl_chepai  
  THEN EXECUTE PROCEDURE tg1();    
```  
数据测试  
```  
insert into chepai_rfid values('浙A00001', '123');  
insert into chepai_rfid values('浙A00002', '234');  
insert into tbl_rfid (sid, loc, rfid) values (now(), '(1,2)', array['123']);  
insert into tbl_chepai (sid, loc, chepai) values (now()-interval '30 s', '(1,2)', array['浙A00002', '浙A00001']);  
车牌 '浙A00002' 可能被套牌  
```  
关于流计算的其他案例和部署方法，请参考  
[《流计算风云再起 - PostgreSQL携PipelineDB力挺IoT》](./20161220_01.md)  
## 数据风险与安全解法  
1\. 在识别RFID时，需要确保无线传输的数据不被窃取，比如使用加密的手段进行通信  
2\. 数据采集后，传输给后台（比如数据库）的过程中也需要加密  
3\. 由于RFID与车牌绑定，所以RFID的数据安全非常的重要，一旦RFID值被泄露，就有可能被不法分子拿去伪造携带一样信息的RFID。从而继续制造克隆车。 数据库的安全（SQL注入、密码复杂度等。。。）也是需要注意的。  
关于数据库的安全，可以参考如下    
[《DBA专供 冈本003系列 - 数据库安全第一,过个好年》](./20161224_01.md)  
## 小结
随着物联网的发展，数据正发生爆炸式的增长，流式的数据处理也会成为将来的热门需求。  
### pipelineDB的优势
这是个拼爹的年代，pipelinedb有个很牛逼的爸爸PostgreSQL，出身伯克利大学，有扎实的理论基础，历经了43年的进化，在功能、性能、扩展能力、理论基础等方面无需质疑一直处于领先的位置。    
搞流式计算，计算是灵魂，算法和支持的功能排在很重要的位置。    
![pic](20161220_01_pic_005.png)    
PostgreSQL的强大之处在于统计维度极其丰富，数据类型也极其丰富。    
build-in 数据类型参考    
https://www.postgresql.org/docs/9.6/static/datatype.html     
build-in 聚合，窗口，数学函数请参考    
https://www.postgresql.org/docs/9.6/static/functions.html      
同时还支持扩展，常见的例如   
[MADLib](http://madlib.incubator.apache.org/docs/latest/index.html)   
[PostGIS](http://postgis.net/)    
[路径规划](http://pgrouting.org/)     
[wavelet](../201611/20161126_01.md)    
[基因](../201606/20160621_01.md)    
[化学](http://www.rdkit.org/)    
还有好多好多(为什么这么多？原因是PostgreSQL的BSD-Like许可，致使了PG的生态圈真的很大很大，深入各行各业)。       
你能想到的和想不到的几乎都可以在pipelinedb 中进行流式处理，大大提高开发效率。    
## 参考  
[《DBA专供 冈本003系列 - 数据库安全第一,过个好年》](./20161224_01.md)  
[《流计算风云再起 - PostgreSQL携PipelineDB力挺IoT》](./20161220_01.md)  
[《金融风控、公安刑侦、社会关系、人脉分析等需求分析与数据库实现 - PostgreSQL图数据库场景应用》](./20161213_01.md)  
[《一场IT民工 与 人贩子 之间的战争 - 只要人人都献出一点爱》](./20161222_01.md)  
[《PostgreSQL 在视频、图片去重，图像搜索业务中的应用》](../201611/20161126_01.md)  
[《如何建立GIS测试环境 - 将openstreetmap的样本数据导入PostgreSQL PostGIS库》](../201609/20160906_01.md)  
[《PostgreSQL 百亿地理位置数据 近邻查询性能》](../201601/20160119_01.md)   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")