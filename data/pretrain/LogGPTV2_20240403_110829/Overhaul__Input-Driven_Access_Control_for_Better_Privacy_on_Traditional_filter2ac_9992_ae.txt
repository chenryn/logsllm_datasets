our experiment environment, with relevant keywords (e.g.,
webcam, microphone, screenshot, capture, record), and added
the hits to the pool. After eliminating the packages that do not
work (e.g., due to missing dependencies) we ended up with
58 applications consisting of video conferencing tools (e.g.,
Skype, Jitsi), audio/video editors (e.g., Audacity, Kwave), au-
dio/video recorders (Cheese, ZArt), screenshot utilities (Shut-
ter, GNOME Screenshot), and screencasting tools (e.g., Istan-
bul, recordMyDesktop). The pool also included popular web
browsers (e.g., Firefox, Chrome); in those cases we tested them
with various web-based video chat applications. Note that the
application pool contained both GUI and console programs.
We manually experimented with each application to verify that
they work as expected, observed whether OVERHAUL alerts
were displayed correctly, and whether there were false alarms.
In our experiments, we encountered a single application
that produced what could be considered a spurious alert.
Speciﬁcally, we observed that Skype attempted to access the
camera as soon as the program was launched, before the
user logs into the application. When Skype was conﬁgured
to automatically start on boot, this situation led to a camera
access without user interaction, and consequently, OVERHAUL
blocked the access and produced an alert. This did not cause
subsequent video calls to fail, and we argue that blocking such
unanticipated device accesses is the desired behavior in order
to achieve OVERHAUL’s security properties.
While we did not encounter any malfunctioning appli-
this experiment also revealed a peculiar limitation
cation,
of OVERHAUL. Speciﬁcally, some of the screenshot
tools
we tested included an option to delay the shot by a user-
speciﬁed time. By design, OVERHAUL does not support this
functionality since the interaction notiﬁcations associated with
the application expire before the screen could be captured.
452
For testing OVERHAUL’s clipboard protection mechanism
we used an additional set of 50 applications including popular
ofﬁce programs, text and media editors, web browsers, email
clients, and terminal emulators. Since OVERHAUL does not
display alerts for clipboard accesses due to usability reasons,
we instead veriﬁed correct functionality by inspecting the logs
produced by our system. In these tests we did not encounter
any false positives or incorrect program behavior.
We note that OVERHAUL does not support running sched-
uled tasks, or persistent non-interactive programs that access
the protected devices (e.g., a cron job that periodically takes
screenshots). While we did not encounter such applications in
our tests, this remains a fundamental limitation of our system.
D. Empirical Experiments
Due to ethical concerns, and the necessity of installing a
custom kernel and malware samples on users’ machines, it
is a difﬁcult task to design a large-scale user study to test
the long-term security and usability properties of OVERHAUL.
Therefore, one of the authors instead volunteered to experiment
with OVERHAUL on their personal home and work computers.
For this experiment, we implemented a sample malware
that runs in the background during the computer’s normal
operation and spies on the user. In particular, it periodically re-
trieves clipboard contents, takes screenshots, and records sound
samples from the microphone. For privacy reasons, our sample
did not record camera images. Since the test was performed
on actual, personal machines used on a daily basis, we only
stored the captured information on disk, while real malware
would exﬁltrate it to a remote site. We stress that our malware
sample was created to mimic the behavior of real information-
stealing malware [2], [3], [18], [7], exploiting the standard
interfaces to the sensitive resources exposed by the OS. No
functionality was artiﬁcially added or removed that would
ease its detection. We installed this malware on two different
computers belonging to one of the authors, who was made
aware of the collected information, and volunteered for the
task. We enabled OVERHAUL on one of the machines, while
the other was left running unmodiﬁed, without protection. We
left the malware running for 21 days. Both computers were
actively used everyday for work and personal use.
At
the end of the experiment we conﬁrmed that
the
malware running on the OVERHAUL-protected system could
not collect any information, as expected. We checked OVER-
HAUL’s logs and veriﬁed that attempts to access the protected
resources were detected and blocked. The malware on the
vulnerable computer, on the other hand, was able to success-
fully spy on the user. We manually investigated the collected
data and found sensitive information including screenshots
of bank account information displayed on an e-banking site,
and email exchanges. The data sampled from the clipboard
included passwords copied from the password manager, phone
numbers, and excerpts from emails. The malware was also able
to collect voice recordings from the headset microphone. We
also investigated OVERHAUL’s logs to see which applications
were granted access to the protected resources. The camera and
microphone were used by two video conferencing applications.
Screen was captured by the system’s default screenshot tool,
and by a desktop recording application. Clipboard accesses
were logged for a large number of applications. During the
testing period of 21 days, we did not encounter any cases of
legitimate applications being incorrectly blocked.
These observations show that spying malware can be
severely damaging, and that OVERHAUL is effective at improv-
ing user privacy in the face of attacks. Conducting a similar
long-term study at a larger scale, in a more scientiﬁc frame-
work, is a difﬁcult yet promising future research direction.
VI. RELATED WORK
Previous work has studied capturing user intent to imple-
ment user-driven access control. Roesner et al. [27] present
an approach in which permission granting is built into user
interactions with permission-granting GUI elements called
access control gadgets (ACG). The authors extend ServiceOS
to provide this capability to application developers, and require
that applications be modiﬁed to use ACGs. This work captures
user intent at a ﬁne granularity and provides stronger security
guarantees than OVERHAUL as each action is precisely mapped
to a permission. However, our goal is to propose an architecture
that can be retroﬁtted into traditional OSes transparently. In our
work, we encountered a different set of challenges stemming
from the fact that we are dealing with traditional systems (i.e.,
Linux) that do not provide the features that ServiceOS does.
Gyrus [21] is a virtualization-based system that displays
editable UI ﬁeld entries in text-based networked applications
back to the user through a trusted output channel, and guar-
antees that
this is the information sent over the network.
BLADE [22] infers the authenticity of browser-based ﬁle
downloads based on user behavior. While sharing similar goals
with OVERHAUL, these address different security problems.
Systems that use timing information to capture user intent
include BINDER [13] and Not-a-Bot [19]. BINDER associates
outbound network connections with input events to build a
host-based IDS. However,
its design does not address the
challenges of IPC, making it unsuitable for use with certain
applications that OVERHAUL targets. Not-a-Bot uses TPM-
backed attestations to tag user-generated network trafﬁc on the
host, and a veriﬁer on the server that checks them to implement
DDoS, spam and clickjacking mitigation measures. These
systems target network-based attacks, whereas OVERHAUL
aims to control access to privacy-sensitive devices.
Some systems that advocate user-authentic gestures for
secure copy & paste between domains are the EROS Window
System (EWS) [31], Qubes OS [6], and Tahoma [12]. Simi-
larly, in this work, we also address the problem of secure copy
& paste so that malicious applications cannot intercept these
requests. There has also been much work in the domain of
trusted computing. For example, Terra [17], Overshadow [10],
and vTPM [9] use virtual machine technology for enabling
trusted computing. In contrast to the above, OVERHAUL does
not require use of virtualization, or explicit user cooperation.
Several operating systems and applications employ popup
prompts to defer privacy policy decisions to users [5], [4],
[8]. However, this approach to user-driven access control has
been shown to suffer from usability issues; for instance, Motiee
et al. [24] demonstrate that Windows users often ﬁnd User
Account Control prompts distracting, dismiss them without due
453
diligence, or disable them completely. OVERHAUL sidesteps
these concerns by taking a transparent, unintrusive approach.
Flash Player employs a mechanism that only allows clipboard
operations initiated by user input [23]. OVERHAUL generalizes
this application-speciﬁc defense to the entire system and
other sensitive resources, and provides the additional security
property that user input cannot be generated synthetically.
Quire [14] is an extension to Android that enables appli-
cations to propagate call chain context to downstream callees.
Hence, applications can verify the sources of user interactions,
and make policy decisions accordingly. There has also been
much work that aims to enforce install time application permis-
sions within Android (e.g., Kirin [16], Saint [26], Apex [25]).
These approaches enable the user to deﬁne policies for pro-
tecting themselves against malicious applications. OVERHAUL
is orthogonal to the smartphone platform security work.
VII. CONCLUSIONS
This paper has shown that an input-driven access control
model based on enforcing the temporal proximity of user in-
teractions to an application’s sensitive-resource access requests
can be retroﬁtted into traditional operating systems. We have
presented an abstract design independent of the underlying OS,
and described our implementation for Linux and X Window
System. Our approach fulﬁlls the design goals enumerated in
Section II. OVERHAUL provides a trusted input path between
the user and kernel, a display manager that authenticates
hardware-generated input events and interposes on display
resources, and a kernel permission monitor that mediates
access to sensitive hardware (S1), (S2). The display manager
also enforces appropriate visibility requirements on application
windows to prevent hijacking of authentic user interaction (S3),
and ensures that resource accesses are communicated to the
user via visual alerts (S4). OVERHAUL requires no modiﬁca-
tions to existing software, and is transparent to users (D1),
(D3). The performance evaluation and empirical tests of our
prototype show that it remains efﬁcient and practical, while
increasing the security of traditional operating systems (D2).
In future work, we plan to investigate gray-box approaches
to input-driven access control that close the gap between white-
box approaches [27] that require applications to be written
with user-driven access control and the black-box approach
adopted here. One promising direction is to leverage static
and dynamic program analyses to more precisely link user
intent, user input, and device accesses, all without requiring
modiﬁcations to existing programs.
Acknowledgments. This work was supported by the National Science
Foundation (NSF) under grant CNS-1409738, and Secure Business Austria.
REFERENCES
[1]
[2]
[3]
[4]
[5]
“Bonnie++,” http://www.coker.com.au/bonnie++/.
“CERT Polska - Slave, Banatrix and Ransomware,” http://www.cert.pl/
news/10358.
“Dell SonicWALL Security Center - Malware switches users Bank
Account Number with that of the attacker,” https://www.mysonicwall.
com/sonicalert/searchresults.aspx?ev=article&id=614.
“Flash Player Help - Privacy settings,” http://www.macromedia.com/
support/documentation/en/ﬂashplayer/help/help09.html.
“OS X Mountain Lion: Prompted for access to contacts when opening
an application,” http://support.apple.com/en-us/HT202531.
[6]
[7]
[8]
“The Qubes OS Project,” http://www.qubes-os.org/trac.
“Trojan-Spy:W32/Zbot,” http://www.f-secure.com/v-descs/trojan-spy
w32 zbot.shtml.
“Windows Help - What is User Account Control?” http://windows.
microsoft.com/en-us/windows/what-is-user-account-control.
[9] S. Berger, R. Caceres, K. A. Goldman, R. Perez, R. Sailer, and L. Doorn,
“vTPM: Virtualizing the Trusted Platform Module,” in USENIX Secu-
rity, 2006.
[10] X. Chen, T. Garﬁnkel, E. C. Lewis, P. Subrahmanyam, C. A. Wald-
spurger, D. Boneh, J. Dwoskin, and D. R. Ports, “Overshadow: A
Virtualization-based Approach to Retroﬁtting Protection in Commodity
Operating Systems,” SIGOPS OSR, vol. 42, no. 2, Mar. 2008.
J. Corbet, “MIT-SHM (The MIT Shared Memory Extension),” http:
//www.x.org/releases/X11R7.7/doc/xextproto/shm.html.
[11]
[12] R. S. Cox, S. D. Gribble, H. M. Levy, and J. G. Hansen, “A Safety-
Oriented Platform for Web Applications,” in IEEE S&P, 2006.
[13] W. Cui, R. H. Katz, and W. Tan, “Design and Implementation of an
Extrusion-based Break-In Detector for Personal Computers,” in ACSAC,
2005.
[14] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach,
“Quire: Lightweight Provenance for Smart Phone Operating Systems,”
in USENIX Security, 2011.
[15] K. Drake, “XTEST Extension Protocol,” http://www.x.org/releases/
X11R7.7/doc/xextproto/xtest.html.
[16] W. Enck, M. Ongtang, and P. McDaniel, “On Lightweight Mobile Phone
Application Certiﬁcation,” in ACM CCS, Nov. 2009.
[17] T. Garﬁnkel, J. C. B. Pfaff, M. Rosenblum, and D. Boneh, “Terra:
A Virtual Machine-based Platform for Trusted Computing,” in ACM
SOSP, Oct. 2003.
[18] A. Gostev, “The Flame: Questions and Answers,” http://securelist.com/
blog/incidents/34344/the-ﬂame-questions-and-answers-51/.
[19] R. Gummadi, H. Balakrishnan, P. Maniatis, and S. Ratnasamy, “Not-a-
Bot: Improving Service Availability in the Face of Botnet Attacks,” in
USENIX NSDI, 2009.
[20] L. Huang, A. Moshchuk, H. J. Wang, S. Schechter, and C. Jackson,
“Clickjacking: Attacks and defenses,” in USENIX Security, 2012.
[21] Y. Jang, S. P. Chung, B. D. Payne, and W. Lee, “Gyrus: A Framework
for User-Intent Monitoring of Text-Based Networked Applications,” in
NDSS, 2014.
[22] L. Lu, V. Yegneswaran, P. Porras, and W. Lee, “BLADE: An Attack-
agnostic Approach for Preventing Drive-by Malware Infections,” in
ACM CCS, 2010.
I. Melven, “User-initiated action requirements
10,”
requirements.html.
in Flash Player
http://www.adobe.com/devnet/ﬂashplayer/articles/fplayer10 uia
[23]
[24] S. Motiee, K. Hawkey, and K. Beznosov, “Do Windows Users Follow
the Principle of Least Privilege?: Investigating User Account Control
Practices,” in SOUPS, 2010.
[25] M. Nauman, S. Khan, and X. Zhang, “Apex: Extending Android Permis-
sion Model and Enforcement with User-deﬁned Runtime Constraints,”
in ASIACCS, 2010.
[26] M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel, “Semantically
Rich Application-centric Security in Android,” in ACSAC, Dec. 2009.
[27] F. Roesner, T. Kohno, A. Moshchuk, B. Parno, H. J. Wang, and
C. Cowan, “User-Driven Access Control: Rethinking Permission Grant-
ing in Modern Operating Systems,” in IEEE S&P, May 2012.
[28] D. Rosenthal, “Inter-Client Communication Conventions Manual,” http:
[29]
//www.x.org/releases/X11R7.7/doc/xorg-docs/icccm/icccm.html.
J. Salim, H. Khosravi, A. Kleen, and A. Kuznetsov, “Linux Netlink
as an IP Services Protocol,” http://www.ietf.org/rfc/rfc3549.txt, Internet
Engineering Task Force, Jul. 2003.
[30] R. W. Scheiﬂer, “X Window System Protocol,” http://www.x.org/
releases/X11R7.7/doc/xproto/x11protocol.html.
J. S. Shapiro, J. Vanderburgh, E. Northup, and D. Chizmadia, “Design
of the EROS Trusted Window System,” in USENIX Security, 2004.
[31]
[32] C. Wright, C. Cowan, J. Morris, S. Smalley, and G. Kroah-Hartman,
“Linux Security Modules: General Security Support for the Linux
Kernel,” in USENIX Security, 2002.
454