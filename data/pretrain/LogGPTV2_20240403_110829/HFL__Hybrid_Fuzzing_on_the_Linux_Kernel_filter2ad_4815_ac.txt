As shown in Table I, DIFUZE [16] is capable of identifying
complex syscall arguments. With regards to a nested form of
argument structure, its strategy is to statically keep track and
infer the type of pointer fields in the structure which determines
the inner structure type. Unfortunately, such a static approach
is limited in understanding the nested structure because in the
example above, the type of the inner buffer is not statically
determined (i.e., unsigned char *), and the size of it is
resolved at runtime (i.e., ctrl.len).
IV. DESIGN
This section describes the design of HFL. At a high level,
HFL takes a hybrid fuzzing approach, combining traditional
fuzzing and concolic execution techniques (§IV-A). Moreover,
in order to address the kernel-specific challenges in performing
hybrid fuzzing, HFL designs three different features: 1)
converting indirect control-flows to direct ones (§IV-B); 2)
consistent system state via calling sequence inference (§IV-C);
and 3) retrieving nested syscall arguments (§IV-D).
A. Generic Hybrid Fuzzing Design
Overall, the design of HFL follows previous user-level
hybrid fuzzing techniques, which combine traditional fuzzing
and symbolic execution, as shown in Figure 5. HFL’s general
fuzzing features can be characterized with the following three
features: 1) kernel syscall fuzzing, 2) coverage-guided fuzzing,
and 3) symbolic analysis.
6
1. struct usbdev_ctrl{2.    void __user *data;   // unknown type3.    unsigned len;4. } 5. int proc_control(…, void __user *arg) {6.    struct usbdev_ctrlctrl; 7.    unsigned char *tbuf;    // unknown type8.     …9.    if (copy_from_user(&ctrl, arg, sizeof(ctrl))10.     …11.   if (copy_from_user(tbuf, ctrl.data, ctrl.len))12.     …13.   /* main usbcontrol communication */14.     …15. }unknown at static timedatalenctrl:tbuf:ctrl.lenmemory view1stlevel buffer2ndlevelbuffercallingordersFuzzerSymbolicAnalyzeroriginalkernel translatedkernel argumentretrievalcandidatedependency pairsstatic analysistranslationhard-to-take branch inputsolved branch input(§IV-B)(§IV-C)(§IV-D)(§IV-A)hybrid-fuzzingKernel Syscall Fuzzing. HFL identifies kernel bugs that are
triggered by a user program. As such, HFL’s fuzzing scheme
focuses on generating or mutating a user program, which is a
sequence of syscalls, similar to how Syzkaller [46] works. In
order to respect the rules in invoking syscalls, HFL constructs
(or mutates) syscalls based on pre-defined syscall templates.
This pre-defined syscall template dictates how the syscall has
to be constructed. The template includes a list of available
syscalls and its format. For each syscall, the template instructs
the type of syscall parameters, a range of constant values of
syscall parameters, dependency between syscalls (i.e., a return
value of some syscalls should be used as a parameter of other
syscalls).
We note that Linux does not provide a formally defined rule
for syscall invocation, thus this pre-defined syscall template
is not only manually defined but also incomplete, as we
evaluated in §VI-C1. This in fact motivated HFL to design
fully automated kernel-specific features, described throughout
this section.
Coverage Guided Fuzzing. HFL follows a generic coverage
guided fuzzing scheme, as most other fuzzers do (including
AFL [52] and Syzkaller [46]), which prioritizes its fuzzing input
mutation strategy towards extending the execution coverage.
HFL instruments all code blocks in the kernel, and collect
execution coverage information when executing a user program.
Based on such execution coverage information, HFL can
determine whether a new input (i.e., a newly generated
or mutated user program) assists to augment the execution
coverage. To achieve so, HFL keeps track of all code blocks
that are covered before during fuzzing, and checks if the new
input executes any uncovered block. If so, HFL pushes the
new input into a corpus (i.e., a set of inputs, each of which
will be mutated later).
Symbolic Analyzer. Fuzzer’s well-known limitation is that it
cannot drive an execution passing through a hard constraint
imposed in some branch conditions. Thus, fuzzer’s execution
coverage does not
improve once reaching branches with
those hard constraints. This in fact motivates the adoption of
hybrid fuzzing techniques, which typically combines symbolic
execution to solve such hard constraints.
More specifically, during the fuzz testing, HFL’s fuzzer
identifies a hard-branch in the kernel, which was always
evaluated into true (or false) throughout a number of user
program executions, and thus the code reachable with the
other evaluation result was never explored. To detect such
hard-branches, HFL maintains a frequency table during the
fuzz testing, counting the number of true/false evaluations
per branch; thus it is able to filter out uninteresting branches
whose underlying blocks are already seen. Once identified,
one of the corresponding user program triggering the hard
branch is passed over to the symbolic analyzer. Then the
symbolic analyzer symbolizes all the syscall parameters in the
given user program, and then starts performing typical concolic
execution until it reaches the hard branch. After reaching, the
symbolic analyzer queries the solver if it can find a symbolic
assignment flipping hard-branch’s evaluation results. If so, based
on the solved symbolic assignment, the symbolic analyzer
reconstructs the user program which flips the evaluation of the
hard-branch, providing a new user program to the fuzzer. It is
7
1 // before translation
2 ret = ucma_table[hdr.cmd](...);
3
4 // after translation
5 if (hdr.cmd == RDMA_CREATE_ID)
6
7 else if (hdr.cmd == RDMA_DESTROY_ID)
8
9 ...
ret = ucma_destroy_id (...);
ret = ucma_create_id (...);
Fig. 6: Conversion to direct control-flow.
worth noting that, since path exploration is offloaded to HFL’s
fuzzer, the symbolic analyzer is limited to following along
a single execution path (path explosion-free) and on-demand
constraint solving.
B. Converting Control-Flow from Indirect to Direct
As described before in §III-B, heavy use of a function
pointer table in the kernel makes hybrid-fuzzing ineffective,
mainly because it introduces indirect control-flows that are
unfriendly to traditional analysis techniques.
To this end, HFL designs an offline translator, operating
based on the source code of the kernel, which transforms
indirect control-flows to direct control-flows. The translator
unfolds an indirect control-flow to a direct one while main-
taining the semantics of conditional branches, such that all
underlying code blocks are reachable through direct control-
flows. Specifically, the translator iterates over each instruction
at compile-time. When facing the indirect control-flow, the
following procedure is performed: 1) The translator ensures
that an index variable of the function pointer table originates
from syscall parameters. This is because we are not interested in
control transfer patterns, which are not controllable by syscall
parameter mutation. Thus, HFL keeps track of how syscall
parameters are propagated by performing inter-procedural data-
flow analysis. Considering speed/accuracy trade-off, our data-
flow analysis is context-, and flow-insensitive but field-sensitive.
2) Given the function table and its feasible index values, HFL
performs branch transformation (similar to loop unrolling) —
for each index value, HFL inserts a conditional branch jumping
to a corresponding function pointer. Figure 6 summarizes the
simplified result of the code transformation.
C. Consistent System State via Syscall Sequence Inference
Random testing in charge of executing a sequence of system
calls often fails to explore much of kernel code but returns
an error early (e.g., return with -EINVAL;). This is because
if syscall execution sequences are not following its intended
semantics, the kernel’s internal states are not accordingly setup
to perform syscalls (§III-C).
In order to address this issue, HFL infers a proper order of
syscalls and syscall dependency. To this end, HFL first obtains
potential dependency pairs, as a result of static analysis on the
kernel, then validates the collected dependencies to distinguish
true dependency pairs. Further, it detects parameter value
dependencies by keeping track of dependency value propagation
connected with symbolized syscall arguments. Once a valid
order of syscall sequences are retrieved, HFL provides feedback
for fuzzer such that it can be immediately applied for future
mutation. In the following, we describe each step in detail.
1) Static Analysis to Find Candidate Dependency Pairs. As
a first step, HFL performs static analysis to capture candidate
dependency pairs. In particular, HFL performs inter-procedural
points-to analysis on the target kernel, collecting a pair of
read/write operations, i.e., one instruction performs the read
instruction and the other performs the write, where both
instructions are reading from and writing to the same memory
location. We call these read/write operation pairs as candidate
dependency pairs. Note that this analysis is performed offline
before performing hybrid fuzzing, and the next phase, which is
part of hybrid fuzzing, takes such candidate dependency pairs
as input.
2) Runtime Validation to Identify True Dependencies.
Given a set of candidate dependency pairs, HFL now starts
concolically executing the kernel. In order to filter out false
dependencies due to the inherent false positive issues of the
points-to analysis, HFL performs basic validation in this
phase. More specifically, when HFL symbolically executes both
instructions of any candidate dependency pair, HFL checks if
these access the same address. If so, it indicates that instructions
in this dependency pair truly depend on each other, yielding a
true dependency pair. It is worth noting that once identifying
this true dependency, HFL is able to infer syscall invocation
order — i.e., the syscall performing the write operation has to
be invoked before the syscall performing the read, because the
write operation may initialize the value that the read operation
relies on. If the write is not performed beforehand, the syscall
including the read may simply return an error.
3) Symbolic Checking to Detect Parameter Dependency.
Besides determining the order of syscalls, a dependency pair
also determines multiple parameters across syscalls (shown
in §III-C). To learn this, HFL makes use of symbolic con-
straint information, coming from symbolized syscall arguments.
Specifically, HFL keeps track of the flow of the value caused
by dependency objects, and figure out the out/inbound points
of its read/write operation, respectively. Also, this allows to
identify relevant memory location (offsets) and the size of it,
out of symbolized argument memory in syscall.
Since HFL’s fuzzer constantly interacts with the symbolic
analyzer, HFL immediately feeds the output of the ordering
set produced by concolic execution to the fuzzer, and reflects
the up-to-date syscall-order information in the later mutation.
In this manner, HFL keeps identifying new syscall relations
and updating the result until its termination.
Example: Inferring Syscall Dependency to Reconstruct
System State. Figure 7 depicts a workflow of our syscall
sequence inference using the example in Figure 3. Given a user
program along with (candidate) instruction dependencies, HFL
starts executing the program concolically (➊). Meanwhile, the
instructions belonging to the pairs are placed under observation.
Once HFL hits the two instructions in a given pair (in any order)
(➋), it examines the pair for runtime validation. Particularly,
HFL takes two objects (i.e., operands) in the dependency
relationship from the both instructions, then see if their memory
addresses are equal (➌). If satisfied, this pair turns out to be a
true dependency (➍).
Since the argument memory chunk in syscalls is symbolized
at the initial phase (§IV-A), access to symbolized memory
region propagated allows to locate an offset of dependency on
the symbolic memory (➎). Once the execution is finished, it
consolidates the true dependency all together (➏), HFL setups
and establishes new syscall invocation rules (➐). As the last
step, such a new set of invocation orders is fed back and will
be used for mutating new input programs (➑).
D. Nested Syscall Argument Retrieval
Aside from syscall invocation sequences, system call fuzzing
has to determine argument values. As shown in Figure 4,
it is often required to understand complex nested argument
structures, which are unknown in the syscall definitions,
rendering fuzzer fail to keep exploring the kernel code.
Therefore, HFL understands and retrieves nested syscall
arguments through a combination of concolic execution and
kernel domain knowledge on data transfer functions. The reason
why HFL focuses on the data transfer functions (e.g., copy_-
from_user) is that those are responsible for delivering data
between user and kernel space, constituting the key mechanism
in constructing the nested syscall arguments.
We observe that the following two pieces of information
are the key to re-construct the nested syscall arguments: 1)
memory location connecting to nested input structures; and 2)
the length of memory buffer arguments.
To this end, we keep monitoring invocations of the transfer
functions during concolic execution. Once invoked, we check
if its source buffer is symbolically tainted. This allows concolic
executor to focus on certain transfer functions that come from
the syscall of interest. Thus we ensure the source buffer stems
from the upper-level buffer originating from the parameter
values. Similar to §IV-C, using its symbolic state, we keep
track of a distance value (offset) to the location, where a
pointer field (pointing inner buffer) will reside. Meanwhile, we
can obtain the length of buffers by tracking parameter values
of the transfer functions. This allows to learn nested buffers
and the size of it as well.
Example: Retrieving Nested Syscall Argument. Figure 8
steps through the argument retrieval
in detail. A syscall
invocation reaches the internal kernel function proc_control,
along with its argument values (➊). At the first invocation of
the transfer function at line 4 (➋), we place the arg buffer
under the control and obtain the buffer size (0x14) from its
third parameter value (➌). Next, in the subsequent invocation
at line 6 (➍), we make sure ctrl.data is symbolically tainted
and both buffers are nested relation (➎). Using symbolic state
of the buffer, we learn a corresponding offset value, where a
pointer variable will later reside in the upper buffer. After the
execution is terminated, we define a new argument rules for
the invoked system call (➏-➐), then pass it over to fuzzer (➑).
V.
IMPLEMENTATION
HFL is implemented on top of the existing fuzzing tech-
nique Syzkaller [46], and symbolic execution engine S2E [15].
We basically leverage the core features of both tools for basic
fuzzing and symbolic execution features, and make significant
adjustments to them to realize the design of HFL. For instance,
HFL makes use of input generation algorithm equipped in
Syzkaller as well as symbolic engine (e.g., constraint solver)
from S2E. With respect to syscall argument symbolization, we
8
Fig. 7: Workflow of syscall sequence inference.
VI. EVALUATION
In this section, we evaluate the effectiveness and efficiency
of HFL. In particular, our evaluation examines both overall
(§VI-B) and feature-specific (§VI-C) aspects of HFL. We aim
to answer the following research questions:
§VI-B4)
fuzzers? (§VI-B2)
• Q1: How effective is HFL in finding kernel bugs? (§VI-B1,
• Q2: What is the overall coverage enhancement that HFL
• Q3: How efficiently can HFL find bugs compared to other
• Q4: What is the contribution of each feature in HFL to
brings over existing approaches? (§VI-B3)
the overall performance? (§VI-C1, §VI-C2)
Fig. 8: Workflow of nested syscall argument retrieval.
leverage a function s2e_make_symbolic from S2E API, and
adjust it to instrument the target kernel in many locations. To
handle indirect control-flow, we augment gcc [3] (in particular,
GIMPLE representation), to equip the translation functionality
toward direct control-flow. To perform inter-procedural static
analysis on the Linux kernel source code, we employ SVF static
analyzer [45]. Since its analysis is carried out on LLVM IR, we
translate the kernel source code to appropriate LLVM bitcode
beforehand, using llvmlinux [18]. Table X summarizes our
efforts of modifying the tools used in HFL. We open-sourced
our reference implementation such that security analysts and
researchers can benefit [1].
9
A. Experimental Setup
All experiments are performed on a machine with an Intel
Xeon E5-4655 2.50 GHz CPU and 512GB RAM running
Ubuntu 14.04 LTS. For both fuzzer and symbolic analyzer,
we make full use of 32 CPU cores4 i.e., 16 dedicated
virtual machines each (one core per VM). We use a 10
second timeout to prevent an unexpectedly time-consuming
constraint solving from delaying the entire symbolic execution.
For all experiments, obvious syscall invocation orders (e.g.,
open-write), which are simply retrieved by syscall definitions,
are given by default, such that our evaluation can focus on
testing the complex syscall sequences exclusively. We note
that our evaluation follows a recent fuzzing evaluation work
[29] although slightly different due to the unique features of
OS-specific fuzzing.
Subsystem Classification. A kernel has a large codebase
that many subsystems share together. Based on the functional
characteristics of subsystems, relevance to different system
call interfaces, and the likelihood of vulnerability [16, 33],
4 For a fair comparison, all of baselines used in the subsequent experiments
exercise 32 CPU cores as well.
W : ioctl, DRM_ALLOC,  offset(0x8),size(0x4)R :  ioctl, DRM_BIND,     offset(0x0),size(0x4)20. int drm_bind(void *arg2) {21.    ...22.if( idr->id== arg2->ID)23.    ...24. }10. int drm_alloc(void *arg1) {11.    …12. idr->id= val;13.     ...14.    arg1->ID = idr->id;15. }WRtrue dependencystruct _1 {u64 x; u32 ID;u64 y; }ID{struct d_bind} arg2{struct d_alloc} arg1ID0x8prio1: ioctl(fd,DRM_ALLOC, {*_1})prio2: ioctl(fd, DRM_BIND, {*_2})❼inferred syscallsequence❷hit❷hit=❺symbolicargument❸address❸addressW : 12: idr->idR :  22: idr->id❹yes❺symbolicargument❻extract offset❻extract offsetmemory viewstruct _2 { u32 ID, u64 x; }1. fd= open (“/dev/dev1”, …)2. ioctl(fd, DRM_ALLOC, {struct d_alloc})3. ioctl(fd, DRM_BIND, {struct d_bind})❶syscallioctlinvocationsuserkernelpost processing❽feedbackmemory view●: Runtime Validation: Symbolic Checking●1. int proc_control(…, void *arg) {2.    struct usbdev_ctrlctrl; unsigned char *tbuf;3.     …4.    copy_from_user(&ctrl, arg, sizeof(ctrl));5.    …6.    copy_from_user(tbuf, ctrl.data, ctrl.len));7.    …8. }❼inferredsyscallinterfacectrl:tbuf:ioctl(fd, USB_CTR, {*_1})struct _1{ u64 x; {*_2}y; u64 z; }❹hit❷hit❸❺❻final memory view0x140x10upperbufferlowerbuffer0x80x10lower bufferdata0x14upper buffer0x8struct _2 { u64 x; u64 y; }❶syscallioctl(fd,  USB_CTR, {Unknown??})❽feedbackuser kernel post processingCategory
# Internal-type
Syscalls used
Device drivers
Network
File system
32
20
6
open, ioctl, write, read
socket, accept, bind, listen, ioctl, getsockopt,
setsockopt, sendto, recvfrom, sendmsg, recvmsg
open, read, ioctl, write, lseek
TABLE II: Classification of subsystem for the experiment.
we classify the subsystems into three categories: network, file
system and device drivers. Within each category, we examine
a variety of implementations that handle important kernel
features, chosen based on their availability and sustainability
through different kernel versions. In order to find the system call
interfaces used by the subsystems, we leverage the registered
virtual file operations in the implementation code and identify
the related system calls. Table II summarizes the result of the
classification.
B. Overall Effectiveness
1) Vulnerabilities: Upon our implementation and test envi-
ronment, we apply HFL to test several Linux kernels which
were the latest at
the time of the experiment. To detect
vulnerabilities, we leverage known kernel-specific sanitizers5.
Once configured, we run HFL and detect crashes being
triggered. Table III shows the result of crash detection. In
total, HFL found 51 vulnerabilities. We manually analyzed and
figured out the root causes, distinguishing new vulnerabilities.
In summary, 24 vulnerabilities turned out to be previously
unknown. We reported all the newly found vulnerabilities —
out of them, 17 were confirmed (four of them are already
patched by the respected kernel developers).
As shown in the table, of the unique crashes, many were
triggered while fuzzing on, in particular, the kernel drivers.
This is because, as we will describe in §VI-B3, the most
coverage improvement lies in the device driver code, hence there
exist more opportunities to discover crashes in this category.
According to the crash type, most of them were caused by both
integer overflow and memory access violation, followed by
uninitialized variable access, etc. These reported crashes have
security impacts, which can be abused to launch either Denial-
of-Service(DoS) or arbitrary code execution attacks, negatively
impacting the security of an entire operating system. Note that
roughly half of the crashes were detected even in the stable
version of the Linux kernels, rather than (unstable) release
candidate (rc). Further, some of the crashes were discovered in
the core part of the Linux kernel, such as memory allocation
and timer system, impacting the entire kernel operations. It is
worth noting that Linux kernel has become more mature over