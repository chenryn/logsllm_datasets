# Title: Presence Attestation: The Missing Link in Dynamic Trust Bootstrapping

## Authors
- Zhangkai Zhang, Beihang University and Singapore Management University
- Xuhua Ding, Singapore Management University
- Gene Tsudik, University of California, Irvine
- Jinhua Cui, Singapore Management University
- Zhoujun Li, Beihang University

## Abstract
Modern processors often include a hardware security feature known as DRTM (Dynamic Root of Trust for Measurement), which helps establish trust and resist software attacks. However, the human user, a critical component in this process, is often overlooked. This paper introduces the concept of "presence attestation," which involves minimal but mandatory user participation. We present three presence attestation schemes—sight-based, location-based, and scene-based—each with varying security and usability features. After analyzing their security, we evaluate their usability and performance through prototype implementations.

## Keywords
trusted computing, attestation, dynamic root of trust, human-in-the-loop, device I/O

## 1. Introduction
Many contemporary x86 and ARM processors are equipped with a hardware feature called Dynamic Root of Trust for Measurement (DRTM), such as Intel TXT, AMD SVM, and ARM TrustZone. DRTM is designed to withstand software attacks, even from the operating system level. When activated, it securely measures and launches software, forming a trust chain that allows a remote entity (verifier) to establish trust in the system by checking the integrity of the software stack.

The popularity of DRTM has driven new research directions in system security. Several designs have been proposed to use DRTM to ensure the security of the Trusted Computing Base (TCB). However, most prior efforts have overlooked the role of the human user. As noted by Parno et al., it is challenging for a user to "bootstrap trust" in DRTM, as they cannot be assured that the trust chain is rooted in their DRTM. Malware can impersonate the user's DRTM using a "cuckoo attack."

Two mitigation approaches were proposed: a hardware-based secure channel and a cryptographically secured communication channel. The former, while offering stronger security and better usability, requires specialized hardware not commonly available. The latter approach, though less demanding, still imposes a burden on the user to manage the DRTM’s public key identifier.

In this paper, we address the challenge of bootstrapping user trust in their device without imposing significant burdens on manufacturers and users. Our approach involves two steps:
1. The user checks whether a genuine DRTM has launched the trust anchor and is currently interacting with them.
2. The user verifies whether the trust anchor launched in the first step actually resides on their device.

We design and implement three presence attestation schemes based on different physical properties: sight, scene, and location. These schemes leverage the security assurance of hardware DRTM and the software capabilities of the trust anchor, allowing a user to establish trust in their device after confirming that both DRTM and the trust anchor are active.

## 2. Synopsis
This section sets the stage by describing the system model, adversary model, and the notion of presence attestation.

### 2.1 System Model & Problem Definition
We consider a system where a human user (Alice) controls a computing device (Dev) equipped with a hardware DRTM (ROTD). At runtime, ROTD loads a trust anchor (TA), which could be a bare-metal micro-hypervisor. Figure 1 illustrates the chain of actions leading to application-level security, with trust bootstrapped from ROTD, followed by TA, and then the secured application.

The problem is how to help Alice verify whether ROTD is currently active on Dev. Since she physically controls Dev, Alice is certain that ROTD is installed but cannot determine its status at runtime due to the lack of an authentic and secure channel between her and her DRTM. Current DRTM manufacturers do not provide a way for Alice to identify DRTM on her device, and she may not know anything about ROTD’s public key certificate.

**Assumptions:**
- Each DRTM is secure against software attacks.
- A public key infrastructure (PKI) exists, with each DRTM assigned a unique public/private key-pair and a credential.
- The trust anchor launched by the DRTM is secure against kernel-level attacks.
- Alice does not have prior knowledge of ROTD’s public key.

### 2.2 Adversary Model
The adversary is represented by malware running on Dev with kernel privileges, controlling all software and hardware resources except the TCBs. We parameterize the adversary with two aspects: collusion with external entities and the capability of using analog devices.

- **Local vs. Collusive:**
  - **Local:** Stand-alone malware with no runtime collusion.
  - **Collusive:** Malware on Dev and a remote accomplice on another device (M) with its own DRTM (ROTM).

- **Software-only vs. Analog:**
  - **Software-only:** Attacks performed entirely by malware.
  - **Analog:** Exploits the physical environment using additional equipment.

**Caveat:** We do not consider physical attacks that modify hardware behavior or extract secrets from a DRTM.

### 2.3 Overview of Presence Attestation
To bootstrap Alice’s trust in her device, we propose an attestation scheme to verify the presence of an active ROTD on Dev. We assume Alice is assisted by a trusted computer (Verifier) during attestation. Verifier engages Dev over a digital or analog channel to verify ROTD’s presence.

**Strawman Approach:**
Before detailing our proposed scheme, we consider a simple strawman approach and show why it fails, highlighting the subtlety of the problem.

## 3. Sight-Based Attestation Scheme
[Detailed description of the sight-based attestation scheme]

## 4. Location-Based and Scene-Based Attestation Schemes
[Detailed descriptions of the location-based and scene-based attestation schemes]

## 5. Implementation Details
[Details of the implementation of the three attestation schemes]

## 6. Experimental Results
[Results of the security and performance evaluations]

## 7. Related Work
[Discussion of related work]

## 8. Conclusion
[Conclusion and future work]