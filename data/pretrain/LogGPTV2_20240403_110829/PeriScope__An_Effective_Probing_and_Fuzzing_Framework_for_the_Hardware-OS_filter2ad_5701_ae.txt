ministic, precise monitoring of device-driver interactions, by
trapping every single access to a set of monitored mappings. In
fact, this design allowed us to temporally distinguish accesses
to the same memory locations, which was essential to ﬁnd the
double-fetch bugs. The drivers still function correctly, albeit
more slowly, when executed under our system, making it
possible to examine device-driver interactions dynamically and
enabling PERIFUZZ to fuzz it.
2) Fuzzing: PERIFUZZ builds on PERISCOPE and has ad-
ditional components that interact with each other, which incur
additional costs. The primary contributors to this additional
cost are: (i) waiting for the peripheral to signal the driver, (ii)
waiting for a software interrupt to be scheduled by the Linux
scheduling subsystem, (iii) interactions with the user-space
fuzzer, which involve at least two user-kernel mode switches
(i.e., one for delivering fuzzer inputs and the other for polling
and retrieving feedback), and (iv) other system activities.
Peak Throughput: We measured the overall fuzzing
throughput to quantify the overhead incorporating all interac-
tions between the PERIFUZZ components. We only report the
peak throughput in Table IX, since crashes and device driver
lockups heavily impact the average fuzzing throughput (see
Section VII-A). The inverse of the peak fuzzing throughput
is a conservative lower bound for the execution time required
to process a single fuzzer-generated input. Although we did
not optimize PERIFUZZ for throughput, we believe that these
numbers are still in a range that makes PERIFUZZ practical
for dynamic analysis.
Driver
qcacld-3.0
bcmdhd4358
Alloc.
Context
QC1
QC2
QC3
QC4
BC1
BC2
BC3
BC4
Peak Throughput
(# of test inputs/sec)
23.67
15.64
18.77
7.63
9.90
14.28
10.49
15.92
Waiting for fuzzer input
Waiting for interrupts
Fuzzing at page faults
30
20
(a) The execution time of three phases
40
50
60
70
80
90
100
Fuzzed+Missed
Fuzzed
10
140
120
100
80
60
40
20
300
275
250
225
200
175
150
125
100
75
50
25
n
o
i
t
a
r
e
t
I
/
)
s
m
(
e
m
T
i
n
o
i
t
a
r
e
t
I
/
s
t
l
u
a
f
e
g
a
p
f
o
#
20
10
80
(b) The number of fuzzed and missed page faults
30
40
50
60
70
90
100
Fig. 5. Fuzzing overhead breakdown
Overhead Breakdown: To illustrate how the fuzzing
throughput can be optimized, we present a breakdown of the
fuzzing overhead. We divide each iteration of the fuzzing loop
into three phases: (i) waiting for fuzzer input to be made
available to our kernel module, (ii) waiting for the device
to raise an interrupt and for the driver to start processing it,
and (iii) fuzzing the data read from monitored I/O mappings
upon page faults. Once the driver has ﬁnished processing the
interrupt, the next iteration begins. We measured the execution
time of each phase in each iteration. To evaluate the impact of
page faults on the fuzzing performance, we also counted the
number of page faults triggered during each iteration.
We performed the experiment while fuzzing the buffer
having the highest peak throughput (QC1). Figure 5a shows
our measurements of per-phase execution time in a stacked
manner, over 100 consecutive iterations of the fuzzing loop.
60% of the total execution time is spent on waiting for the next
fuzzer input to be available. This delay is primarily caused by
a large number of missed page faults, as hinted by Figure 5b.
11
The current implementation of PERIFUZZ can miss page faults,
when they are triggered while PERIFUZZ is preparing for the
next input. This delay can be reduced by disabling page faults
until the next input is ready. The delay caused by waiting
for relevant interrupts, which accounts for 24.2% of the total
execution time, can be reduced by forcing hardware to raise
relevant interrupts more frequently.
The actual fuzzing at each page fault still takes 15.8% of
the total execution time. One way to reduce this overhead is to
trigger page faults only at ﬁrst access to a monitored mapping
within each iteration. At ﬁrst access, the underlying page can
be overwritten with the fuzzer input and then made present, so
that subsequent accesses to the page within the same iteration
do not trigger extra page faults. This would come, however,
at the cost of precision, because it loses precise access tracing
capability, effectively disabling overlapping fetch fuzzing as
well as detection of potential double-fetch bugs.
B. Augmenting the Fuzzing Engine
Although we used mutational, feedback-guided fuzzing to
mutate the data stream on the device-driver interaction path,
our fuzzing framework can also beneﬁt from other fuzzing
techniques. Like DIFUZE [35], static analysis can be intro-
duced to infer the type of an I/O buffer, which can save fuzzing
cycles by respecting the target type when mutating a value. The
dependencies between device-driver interaction messages can
also be inferred using static and trace analysis techniques [41],
[58], which can help fuzzing stateful device-driver interaction
protocols. Alternatively, developers can specify the format of
an I/O buffer and/or interaction protocol in a domain-speciﬁc
language [10], [75]. In addition to improving the mutation
of the data stream, we could use system call fuzzers such
as Syzkaller that generate different user-space programs [75].
These generated programs could actively send requests to the
driver and potentially to the device, which in turn can increase
reachable interrupt code paths. We believe that our modular
framework allows for easy integration of these techniques.
VII. DISCUSSION
C. Combining with Dynamic Analysis
A. Limitations
We discuss problems that limit both the effectiveness and
efﬁciency of PERIFUZZ. These are well-known problems that
also affect other kernel fuzzers, such as system call fuzzers.
1) System Crashes: The OS typically terminates user-space
programs when they crash, and they can be restarted without
much delay. Crashing a user-space program therefore has little
impact on the throughput of fuzzing user-space programs.
Crashes in kernel space, by contrast, cause a system reboot,
which signiﬁcantly lowers the throughput of any kernel fuzzer.
This is particularly problematic if the fuzzer repeatedly hits
shallow bugs, thereby choking the system without making
meaningful progress. We circumvented this problem by dis-
abling certain code paths that contain previously discovered
shallow bugs. This does, however, somewhat reduce the effec-
tiveness of our fuzzer as it cannot traverse the subpaths rooted
at these blacklisted bugs. Note that this problem also affects
other kernel fuzzers, e.g., DIFUZE and Syzkaller [35], [75].
2) Driver Internal States: Due to the signiﬁcant latency
involved in system restarts, whole-system fuzzers typically
fuzz the system without restarting it between fuzzing iterations.
This can limit the effectiveness of such fuzzers, because the
internal states of the target system persist across iterations.
Changing internal states can also lead to instability in the
coverage-guidance, as the same input can exercise different
code paths depending on the system state. This means that
coverage-guidance may not be fully effective. Worse, when
changes to the persisting states accumulate, the device driver
may eventually lock itself up. For example, we encountered
a problem where, after feeding a certain number of invalid
inputs to a driver, the driver decided to disconnect from the
network, reaching an error state from which the driver could
not recover without a device reboot. Existing device driver
checkpointing and recovery mechanisms could be adapted
to alleviate the problem [46], [70], because they provide
mechanisms to roll drivers back to an earlier state. Such a roll
back takes signiﬁcantly less time than a full system reboot.
Our framework runs in a concrete execution environment;
thus, existing dynamic analysis tools can be used to uncover
silent bugs. For example, kernel sanitizers such as address
sanitizer and undeﬁned behavior sanitizer can complement our
fuzzer [48], [63]. Memory safety bugs often silently corrupt
memory without crashing the kernel. Our fuzzer, by itself,
would not be able to reveal such bugs. When combined with
these bugs would be detected. Other
a sanitizer, however,
dynamic analysis techniques such as dynamic taint tracking
can also be adapted to detect security-critical semantic bugs
such as passing security-sensitive values (e.g., kernel virtual
addresses) to untrusted peripherals.
VIII. RELATED WORK
A. Protection against Peripheral Attacks
An IOMMU isolates peripherals from the main processor
by limiting access to physical memory to regions conﬁgured
by the OS. Markuze et al. proposed mechanisms that can
achieve strong IOMMU protection at an affordable perfor-
mance cost [52], [53]. Several other work proposed mech-
anisms that can limit functionalities exposed to potentially
malicious devices [15], [72], [73]. Cinch encapsulates devices
as network endpoints [15], and USBFILTER hooks USB
APIs [73],
to enable user-conﬁgurable, ﬁne-grained access
control. However, neither IOMMU protection nor ﬁne-grained
access control prevents exploitation of vulnerabilities found in
code paths that are still reachable from the device.
The effects of vulnerabilities on these valid code paths can
be mitigated by isolating device drivers from the kernel [27],
[34], [38], [50]. Android, for example, switched from the
kernel-space Bluetooth protocol stack [12] to a user-space
Bluetooth stack [13]. The OS kernel merely acts as a data path
by forwarding incoming packets to the user-space Bluetooth
daemon process. This approach can mitigate vulnerabilities in
the device driver because the driver cannot access kernel mem-
ory and cannot execute privileged instructions. The daemon
process still runs at a higher privilege level than standard user-
space processes, however, and therefore remains an attractive
12
target for adversaries looking to access sensitive data [11].
Additionally, this approach is currently not viable for certain
types of device drivers. High-bandwidth communication de-
vices such as Wi-Fi chips, for example, cannot afford the mode
and context switching overhead incurred by user-space drivers.
B. Kernel Fuzzing
Most kernel fuzzing tools focus on the system call bound-
ary [9], [14], [19], [35], [41], [43], [58], [59], [65], [75].
DIFUZE uses static analysis and performs type-aware fuzzing
of the IOCTL interface, which can expose a substantial
amount of driver functionality to user space [35]. Syzkaller,
a coverage-guided fuzzer, fuzzes a broader set of system
calls, based on system call description written in a domain-
speciﬁc language [75].
IMF infers value-dependence and
order-dependence between system call arguments by analyzing
system call traces [41]. kAFL uses Intel Processor Trace as a
feedback mechanism, to enable OS-independent fuzzing [65].
Digtool uses virtualization to capture and analyze the dynamic
behavior of kernel execution [59].
PERIFUZZ can be augmented with techniques that facilitate
type-aware fuzzing [35], [41], [58], [75], as discussed in
Section VII-B. Tools based on certain hardware features can
fuzz closed-source OSes [59], [65], but smartphones often do
not contain or expose the necessary hardware features to the
end user. For example, most smartphone OSes block access to
the bootloader and to hypervisor mode, thus preventing end
users from running code at the highest privilege level [61].
None of these fuzzers target DMA/MMIO-based interactions
between drivers and devices, nor do they cover code paths that
are not reachable from system calls (e.g., interrupt handlers).
C. Kernel Tracing
There are many general-purpose tools to monitor events in
the Linux kernel. Static kernel instrumentation mechanisms
such as Tracepoint allow the developer to insert so-called
probes [5]. Ftrace and Kprobe are dynamic mechanisms that
can be used to probe functions or individual instructions [6],
[7]. eBPF, the extended version of the Berkeley Packet Filter
mechanism, can attach itself to existing Kprobe and Tracepoint
probes for further processing [40]. LTTng, SystemTap, Ktap
and Dprobe are higher level primitives that build on the
aforementioned tools [2]–[4], [55].
These tools, however, are not well suited to monitoring
device-driver interactions, because they require developers to
identify and instrument each device-driver interaction. These
manual efforts can be alleviated by using page fault based
monitoring, which Mmiotrace uses to trace MMIO-based in-
teractions in x86 and x86-64 [8]. However, Mmiotrace does not
support the DMA interface, i.e., DMA coherent and streaming
buffers, and it lacks the ability to manipulate device-driver
interactions. In contrast, PERISCOPE can trace both MMIO and
DMA interfaces, and can be used to manipulate device-driver
interactions by plugging in PERIFUZZ, enabling adversarial
analysis of device drivers.
D. Kernel Static Analysis
Static analysis tools can detect various types of kernel and
driver vulnerabilities [18], [39], [51], [76], [79]. Dr. Checker
runs pointer and taint analyses speciﬁcally tailored to device
drivers, and feeds the analysis results to various vulnerability
detectors [51]. K-Miner uses an inter-procedural, context-
sensitive pointer analysis to ﬁnd memory corruption vulner-
abilities reachable from system calls [39]. Symbolic execution
can complement these static analyses to work around precision
issues. Deadline [79], for example, uses static analysis to ﬁnd
multi-reads in the kernel, and symbolically checks whether
each multi-read satisﬁes the constraints to be a double-fetch