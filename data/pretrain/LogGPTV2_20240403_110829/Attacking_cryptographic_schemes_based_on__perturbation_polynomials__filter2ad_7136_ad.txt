αu; and the user secret key for phase v is tv(·) = F (·, v)+βv,
where αu, βv are scalars that are chosen uniformly at random
in [0, r]. The encryption key for node u in phase v is taken
to be the high-order bits of su(v), which are essentially equal
to the high-order bits of tv(u). (The exact mechanism by
which a key is derived are not important for our attack.)
Subramanian et al. suggest to use p ≈ 264, r = 216, and a
master polynomial of degree 15 in each variable.
This simple scheme does not address the forward-secrecy
concern, but it is supposed to provide better resilience than
the noise-free scheme from the previous section. Unfortu-
nately, this is not the case. Similar to the attack described in
Section 3.1, compromising dx +1 nodes allows an attacker to
reconstruct the coeﬃcients of the master polynomial F (x, y)
corresponding to all the terms xiyj with j > 0, and learning
user keys for dy + 1 diﬀerent phases allows an attacker to re-
construct the coeﬃcients of the master polynomial F (x, y)
corresponding to all the terms xiyj with i > 0. We now
exhibit two diﬀerent attacks based on this:
Attack 1: A simple attack, similar to the one from Sec-
tion 3.2, requires learning one user key and compromis-
ing dx + 1 nodes. Partition the master polynomial F (x, y)
into the part that depends on the phase-variable y and the
part that does not; i.e., write F (x, y) = F 1(x, y) + F 2(x).
As noted above, an attacker that compromises dx + 1 nodes
can fully recover F 1(x, y). Given a user key for one phase v
(namely, the polynomial tv(·) = F (·, v) + βv), the attacker
can then compute the univariate polynomial
„
Δ(x) def= tv(x) − F 1(x, v)
= F (x, v) + βv − F 1(x, v) = F 2(x) + βv
«
.
«
This allows the attacker to derive a user key for any other
phase v
as
(cid:3)
„
˜tv(cid:2) (x) = F 1(x, v
(cid:3)
) + Δ(x)
= F (x, v
) + βv
.
(cid:3)
As in the attack from Section 3.2, we observe that ˜tv(cid:2) (x) is a
valid user key for phase v
and can thus be used to compute
the encryption keys of all the nodes in this phase.
(cid:3)
Attack 2: In this attack the attacker compromises n + 1
nodes for some n > dx, but does not need to learn any
user keys. Denote the IDs of the compromised nodes by
u0, u1, . . . , un. As before, the attacker uses the polynomials
sui (·) to recover the bivariate polynomial F 1(x, y) where
F (x, y) = F 1(x, y) + F 2(x). Then, choosing some arbitrary
value v
, the attacker can compute for every ui a value
∗
yi = sui (v
∗
) − F 1(ui, v
∗
) = F 2(ui) + αui .
(4)
Next, the attacker can try to recover F 2 using the fact that
all the αui ’s are small (i.e., in [0, r]). Consider the lattice
deﬁned by integer linear combinations of the rows of the
72
666666666666664
3
777777777777775
0
0
1
1
Λ =
udx
1
yn − yn−1
un − un−1
n − u2
n−1
u2
...
n − udx
n−1
y2 − y1
u2 − u1
2 − u2
u2
...
− udx
0
p
...
0
following matrix:
y1 − y0
u1 − u0
1 − u2
u2
...
− udx
p
0
...
0
Pdx
i=0 fi · xi then there exist integers k1, . . . , kn
(We also let Λ refer to the lattice itself.) Note that if we
write F 2 =
such that (−1, f1, f2, . . . , fdx , k1, k2, . . . , kn) · Λ =
·· ·
·· ·
·· ·
. . .
·· · udx
·· ·
·· ·
. . .
·· ·
0
0
...
p
udx
2
.
(5)
(αu1 − αu0 , αu2 − αu1 ,
. . . , αun − αun−1 ),
which is a “short” vector in the lattice. The attacker can thus
use lattice-reduction tools to ﬁnd the coeﬃcients of F 2 (ex-
cept for the free term). A heuristic argument similar to the
one in Appendix A.1 suggests that when n is large enough
so that p(dx+1) · (4r/p)n  (dx + 1) log(p)/(log(p) − log(4r)) =
(16· 64)/(64− 18) ≈ 22. We veriﬁed experimentally that the
attack works for those parameters even for n = 22.
Once the attacker recovers the coeﬃcients f1, . . . , fdx of
F 2, it can approximate the free term of F 2 as in Section 3.1.
This gives it a good enough approximation to the master
polynomial F .
4.2 Breaking the Scheme
The actual scheme from [5] has many additional compo-
nents on top of the simple scheme from the previous section,
but these components have no real impact on the attacks we
have described. Below we list these additional components
and show how the attacks can be modiﬁed to accommodate
them.
Many copies of the scheme. As described in [5], each
node stores several univariate node-polynomials, correspond-
ing to several copies of the scheme. At any time, one scheme
is “active” (i.e., used to encrypt data) while others are “dor-
mant”. Every so often, the central key-distribution center
broadcasts some message that causes all the nodes to ac-
tivate the next copy of the scheme, and then erase all the
keying material from the previously active copy. (Of course,
user keys for the current phase always correspond to the
appropriate phase of the currently active copy.)
This has very little eﬀect on the attacks: an attacker that
compromises some nodes learns the relevant information for
all the copies that are stored on these nodes at the time of
compromise. By compromising suﬃciently many nodes, it
learns the node-key material corresponding to the currently
active scheme, as well as to all the schemes that are still
dormant. The only thing that the attacker cannot do is
attack copies of the scheme that were already erased. Also,
to mount Attack 1 from the previous section against some
copy of the scheme, the attacker must wait until that scheme
becomes active (since that attack requires the attacker to
learn one user-key that belongs to the copy under attack).
Forward secrecy between phases. As pointed out above,
the simple scheme from Section 4.1 does not address forward
secrecy. Subramanian et al. use the following simple trick to
obtain forward secrecy: when a copy of the scheme is acti-
vated, the center announces the interval of phases (denoted
[vs, ve]) to be used with that copy. Each node u then derives
the keys for all these phases, setting Ku,v as the high-order
bits of su(v) for all v ∈ [vs, ve]; then the node u erases the
polynomial su corresponding to this copy of the scheme and
stores only the keys Ku,v. Thereafter, the key Ku,v is used
during phase v and is erased when that phase is over.
The attacks from Section 4.1 can still be applied to all the
dormant copies, since for these copies the nodes must still
store the polynomial su(·). As for the active copy of the
scheme, depending on the size of the interval [vs, ve] it may
be possible to recover the polynomial su(·) from the Ku,v’s
by using techniques similar to Attack 2 above. Namely, after
corrupting some node u we have Ku,v = su(v) + ρv where
su has degree dy and the ρv’s are all small (i.e., in [0, r]).
As long as we have suﬃciently many of these v’s, we can
use the same lattice reduction techniques as in Attack 2 to
recover su.
Forward-secrecy within a phase. Instead of using the
same key Ku,v to encrypt all the information during phase v,
Subramanian suggested using the hashed key H i(Ku,v) to
encrypt the i’th piece of information. The only eﬀect of this
on our attacks is that the key Ku,v is erased earlier from the
memory of node u.
Polynomial one-time pad. Another component of the
scheme in [5] that is diﬀerent from the simple scheme de-
scribed earlier is that the nodes do not store the node-
polynomial su(·) explicitly. Essentially, a node u stores
for each copy of the scheme a “pad polynomial” pu(·) de-
rived from a “master pad polynomial” p(u, v) by setting
pu(·) = p(u,·) − αu for a random αu ∈ [0, r]. To activate
the next copy of the scheme, the center chooses at random
the master polynomial F (x, y) for the scheme and broad-
casts to all the nodes the bivariate polynomial s(x, y) =
p(x, y) + F (x, y); node u then computes its node-polynomial
as su(·) = s(u,·) − pu(·).
It is clear that this has no real eﬀect on our attacks. Upon
compromising a node, the attacker learns the pad polynomi-
als used by that node. The attacker can apply Attack 2 di-
rectly, thus recovering the “master pad polynomial” p(x, y).
The attacker then waits until the center broadcasts s(x, y)
and recovers F (x, y) = s(x, y) − p(x, y). Alternatively, the
attacker can wait until that copy is activated, compute all
the su(·)’s just as the nodes do, and recover F (x, y) directly
using Attack 1 or Attack 2.
Miscellaneous. In the actual scheme described in [5], the
handling of the pad polynomials is slightly obfuscated as
follows:
∗
• The “master pad polynomials” for the diﬀerent copies
of the scheme are not necessarily independent. Rather,
they are all derived from the same tri-variate polyno-
mial p
(x, y, z), where the master pad for the k’th copy
(·, ·, k). We did not
of the scheme is set as p(·,·) = p
ﬁnd in [5] a speciﬁcation of the copy-degree of p
(i.e.,
the degree of the copy variable z). Hence, we assume
that it is taken as large as the number of copies, so that
the copies are truly independent. (This has no eﬀect
on any of the eﬃciency parameters that are discussed
in [5].) If the copy-degree is smaller, then it is likely
∗
∗
8that one can ﬁnd more attacks, where compromising
some copies of the scheme allows the attacker to break
also other copies.
• The noise in the free term is added in several steps
rather than all at once (and is not quite independent
between the diﬀerent copies of the scheme). Speciﬁ-
cally, the pad polynomials are computed by ﬁrst set-
(u, y, z) − α
(cid:3)
ting ˜pu(y, z) = p
u, and then the pad for
the k’th copy is set as ¯pu,k(y) = ˜pu(y, k) − α
(cid:3)(cid:3)
u,k with
(cid:3)(cid:3)
(cid:3)
u,k all chosen uniformly in [0, r/4].3
α
u, α
∗
• When activating the k’th copy, the center chooses a
random master polynomial Fk(x, y) for this copy and
broadcasts a noisy bivariate polynomial
sk(x, y) = p
∗
(x, y, k) + Fk(x, y) + γ,
where γ is uniform in [0, r/2]. Each node u computes
its node-polynomial for this copy as su,k(·) = sk(u,·)−
¯pu,k(·).
Obviously, these details have no bearing on our attacks.
5. CONCLUSION
We have shown attacks on the schemes from [7, 5, 6],
which are all based on “perturbation polynomials”. Our at-
tacks show that the modiﬁed schemes are no better — and
may, in fact, be worse — than the information-theoretically
secure schemes they are based on. Our results cast doubt
on the viability of the “perturbation polynomials” technique
as an approach for designing secure cryptographic schemes.
Note: The views and conclusions contained in this document are
those of the authors and should not be interpreted as representing
the oﬃcial policies, either expressed or implied, of the US Army
Research Laboratory, the US Government, the UK Ministry of
Defense, or the UK Government. The US and UK Governments
are authorized to reproduce and distribute reprints for Govern-
ment purposes, notwithstanding any copyright notation herein.
6. REFERENCES
[1] S. Ar, R. Lipton, R. Rubinfeld, and M. Sudan.
Reconstructing Algebraic Functions from Mixed Data.
SIAM J. Computing 28(2): 487–510, 1998.
[2] R. Blom. An Optimal Class of Symmetric Key
Generation Systems. Eurocrypt ’84.
[3] C. Blundo, A. De Santis, A. Herzberg, S. Kutten, U.
Vaccaro, and Moti Yung. Perfectly Secure Key
Distribution for Dynamic Conferences. Information
and Computation 146(1): 1–23, 1998.
[4] W.A. Stein et al. Sage Mathematics Software
(Version 3.3). The Sage Development Team, 2009,
http://www.sagemath.org.
[5] N.V. Subramanian, C. Yang, and W. Zhang. Securing
Distributed Data Storage and Retrieval in Sensor
Networks. 5th IEEE Intl. Conference on Pervasive
Computing and Communications (PerCom), 2007.
3Thus the pad polynomials ¯pu,k(y) introduce somewhat
smaller noise of up to only r/2 in the free term, which makes
our Attack 2 from Section 4.1 marginally easier.
[6] W. Zhang, N. Subramanian, and G. Wang.
Lightweight and Compromise-Resilient Message
Authentication in Sensor Networks. 27th IEEE
Conference on Computer Communications
(INFOCOM), 2008.
[7] W. Zhang, M. Tran, S. Zhu, and G. Cao. A Random
Perturbation-based Scheme for Pairwise Key
Establishment in Sensor Networks. 8th ACM
International Symposium on Mobile Ad Hoc
Networking and Computing (MobiHoc), 2007.
APPENDIX
A. TECHNICAL DETAILS
A.1 The Shortest Vectors in the Lattice from
Eq. (2)
Here we justify the claims made in Section 2.7. Recall
the setting: we have an integer lattice Λ deﬁned by tak-
ing integer linear combinations of the rows of the following
matrix:
2
66666664
g(x0)
g(x1)
h(x0) h(x1)
p
0
...
0
0
p
...
0
···
g(xn(cid:2)−1)
··· h(xn(cid:2)−1)
···
···
. . .
···
0
0
...
p
3
77777775 .
(6)
(cid:3)
(cid:3)
∗
; since v, v
∗
(resp., h
(We have substituted g, h in place of v, v
and
g, h span the same space, the lattice is unchanged.) Recall
that g
) denotes the ﬁrst (resp., second) row of
r · √
the lattice above, and that the length of g
is at most
n(cid:3). Let (cid:7)1, (cid:7)2 denote the two shortest (independent and
non-zero) vectors in Λ. We provide a heuristic argument
that (cid:7)1, (cid:7)2 ∈ {g
)} with high probability over
the initial choice of g
,±(g
∗ − h
∗
∗
∗
, h
.
∗
, h
∗
, h
∗
∗
The polynomials g and h are chosen during system set-
up as random polynomials of degree t, and the xi are cho-