title:Source Address Validation in Software Defined Networks
author:Bingyang Liu and
Jun Bi and
Yu Zhou
Source Address Validation in Software Deﬁned
Networks
Bingyang Liu †‡§
Jun Bi †‡ Yu Zhou †‡
† Institute for Network Sciences and Cyberspace (INSC), Tsinghua University
‡ Tsinghua National Laboratory for Information Science and Technology (TNList)
PI:EMAIL, PI:EMAIL, PI:EMAIL
§ Huawei Technologies Co. Ltd.
1.
INTRODUCTION
IETF source address validation improvement (SAVI) work
group develops methods to prevent nodes attached to the
same IP link from spooﬁng each other’s IP addresses. R-
FCs are developed for various circumstances with different
address assignment mechanisms (AAM), or the mix of them.
To support SAVI, network device vendors need to imple-
ment the set of RFCs for various network environments in
their switches. However, the new network paradigm, soft-
ware deﬁned networks (SDN), provides the opportunity to
deploy SAVI without implementing extra features in SDN
switches. In this paper, we present the preliminary design
and implementation of SDN-SAVI, a module/ application
on SDN controllers to enable SAVI functionalities in SDN
networks. In this proposal, all the functionalities are imple-
mented on the controller without modifying SDN switches.
To enforce SAVI on packets in the data plane, the controller
installs binding tables in switches using existing SDN tech-
niques, such as OpenFlow. With SDN-SAVI, a network ad-
ministrator can now enforce SAVI in her network by merely
integrating a module on the controller, rather than purchas-
ing SAVI-capable switches and replacing legacy ones.
Our contribution is the design and implementation of an
SDN-based SAVI solution. We have overcome three chal-
lenges in the design. First, to avoid redundant AAM snoop-
ing and address binding on all switches, we classify switch
ports into three categories and deﬁne different behaviors on
them, so as to make snooping and binding effective and ef-
ﬁcient (Section 2.1). Second, to prevent the controller and
This work was supported by the National Science Founda-
tion of China (No.61502267 and No.61472213).
Jun Bi is the corresponding author.
Permission to make digital or hard copies of all or part of this work for person-
al or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is per-
mitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
SIGCOMM ’16, August 22-26, 2016, Florianopolis , Brazil
c(cid:13) 2016 ACM. ISBN 978-1-4503-4193-6/16/08. . . $15.00
DOI: http://dx.doi.org/10.1145/2934872.2960425
Figure 1: Overview of SDN SAVI
switches from resource exhaustion attacks, we rate-limit AAM
packets in the data plane and ofﬂoad the controller’s veriﬁca-
tion job to switches (Section 2.3). Third, to solve the ﬂow ta-
ble explosion problem caused by the coexistence of the rules
generated by multiple applications, we utilize the “multiple
tables” feature of OpenFlow and make the ﬂow table com-
pact and concise (Section 2.4).
2. DESIGN
We present the design of SAVI-DHCP and SAVI-FCFS
for IPv6 (IPv4 is similar). We use OpenFlow as the SDN
technique. The overview is illustrated in Figure 1. Initially,
the controller installs several rules in an OpenFlow switch to
snoop AAM packets. Then the switch will send each AAM
packet to the controller as an OpenFlow packet-in. Next,
the controller updates the binding tables according to the ad-
dress assignment state indicated by the snooped AAM pack-
ets. Finally, if the binding table is updated, the controller
modiﬁes the ﬂow table of the switch to install or remove a
ﬁltering entry with respect to the IP address.
2.1 AAM Snooping
To snoop AAM packets, the controller installs several rules
into switches in advance. For SAVI-FCFS, the controller s-
noops duplicated address detection (DAD) packets, so the
rules match neighbor solicit (NS) and neighbor advertise
(NA) ﬁelds. For DHCPv6, the controller snoops DHCPv6
client (DC) messages and DHCPv6 server (DS) messages,
so the rules match UDP port 546 and 547. The actions asso-
ciated with the rules are “output packets to the controller”.
We classify switch ports into three categories, i.e., Switch
Ports, Host Ports, and Trust Ports, which connect with switch-
595
es, ordinary hosts, and trust servers (e.g., DHCP servers), re-
spectively. For example, in Figure 1, p1 and p2 are Switch
Ports, p3 is a Trust Port, and p4 is a Host Port. Snooping is
performed on Host Ports and Trust Ports, and veriﬁcation is
only performed on Host Ports.
The controller maintains a state machine for each AAM
(e.g., RFC 7513 for DHCP [1]). Each IP address has a s-
tate, whose transition is triggered by AAM packets. When
the state changes to BIND, a binding entry is set for this
IP address in the binding table; when the state changes to
NO_BIND, the IP address is removed from the table.
2.2 Binding Table
A binding entry binds an IP source address to a switch
port, in the format of , i.e., the
entry point of the packet with IP source Address should be
P ort of Switch; otherwise it is a spoofed packet.
2.3 Security Consideration
The SDN-SAVI module snoops AAM packets and main-
tains state machines and timers on the controller. This may
become a new vulnerability for DoS attack, where attacker-
s can send AAM packets to overwhelm the controller. To
solve this, we use the meter element of OpenFlow switch-
es to rate-limit AAM packets. This is feasible since AAM
trafﬁc is low-rate under normal circumstances.
The simplest way to enforce validation is to do it on the
controller. The controller veriﬁes the ﬁrst packet of each
new ﬂow. There are two ways to deal with a spoofed pack-
et. First, ignore it. The main drawback is that an attacker
can repeatedly send the same packet to overwhelm the con-
troller’s computation resources. Second, passively install in
the switch a drop rule matching the new ﬂow. However, both
the computation resources on the controller and the ﬂow ta-
ble resources on the switch can be exhausted when an attack-
er ﬂoods packets with random source addresses.
To protect these resources, SDN-SAVI explicitly install-
s rules in switches to block unbound IP source addresses.
Thus, spoofed packets are veriﬁed and dropped in the data
plane without consuming ﬂow table resources or computa-
tion resources on the controller.
2.4 Enforcement
SDN-SAVI binding entries are enforced with ﬂow rules
in switches. The challenge is how these rules coexist with
the ﬂow rules generated by other applications such as for-
warding. One way is to block unbound IP source addresses,
leaving the unmatched (legitimate) packets to be processed
by the rules of other applications. However, in practice, the
number of unbound addresses may exceed the ﬂow table
size. Another way is to combine the rules of SDN-SAVI with
other applications, e.g., for each bound IP source address,
generate N “two-dimension” rules, where N is the number
of forwarding rules which matches IP destination addresses.
However, this method causes ﬂow table explosion.
We solve the ﬂow table explosion problem using the “mul-
tiple tables” feature of OpenFlow. SDN-SAVI only uses the
ﬁrst ﬂow table. Packets matching bound rules are directed
596
Figure 2: The ﬁrst ﬂow table of a switch
to latter tables for further processing by other application-
s, while spoofed ones are dropped by the ﬁrst table. This
method does not only eliminate ﬂow table explosion, but al-
so makes SDN-SAVI rules separate and independent.
3.
IMPLEMENTATION & EVALUATION
We implement SDN-SAVI on Floodlight controller. Source
code is at https://github.com/netarchlab-savi/savi-ﬂoodlight.
Figure 2 show the 6 rule blocks of the SDN-SAVI ﬂow ta-
ble. 1st block lets pass all the IPv6 packets arriving on the m
Switch Ports. Then for Host Ports and Trust Ports, received
AAM packets are sent to the controller, including DAD (2nd
block) and DHCP packets (3rd block). These two blocks are
rate-limited with meters. For non-AAM packets, we let pass
all the packets on the n Trust Ports (4th block), and verify
all the packets on Host Ports (5th block). Finally, 6th block
drops all the spoofed IPv6 packets received on Host Ports.
Non-IPv6 blocks are placed thereafter.
Figure 3: CPU Usage Comparison under Spooﬁng Attack
We also implemented the strawman controllers described
in Section 2.3, namely Passively-Ignore and Passively-Install.
We performed spooﬁng attacks with random source address-
es to measure the CPU usage of these controllers running
on Intel E5-2637. Figure 3 demonstrates the results un-
der different attacking rates. The CPU usage of Passively-
Install increases fast with attacking rate because the con-
troller needs to deal with packet-ins, packet-outs and ﬂow-
mods. The slop of Passively-Ignore’s curve is much small-
er because it only needs to deal with packet-ins. The CPU
usage of SDN-SAVI is low and constant since all spoofed
packets are dropped in the data plane.
4. REFERENCES
[1] J. Bi, J. Wu, G. Yao, and F. Baker. Source address validation
improvement (savi) solution for dhcp. RFC 7513, 2015.