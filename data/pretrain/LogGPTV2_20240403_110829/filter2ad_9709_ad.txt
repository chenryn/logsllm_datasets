            }
            int offset = 8;
            int targetHexLength=8; //on linux,change it to 12.
            for (int j = 0; j  0 || targetHex.length() != targetHexLength) {
                        continue;
                    }
                    if (targetHex.startsWith("a") || targetHex.startsWith("b") || targetHex.startsWith("c") || targetHex.startsWith("d") || targetHex.startsWith("e") || targetHex.startsWith("f") || targetHex.endsWith("00000")) {
                        continue;
                    }
                    System.out.println("[-]start get " + Long.toHexString(allocateMemory + j * x * offset) + ",at:" + Long.toHexString(target) + ",j is:" + j);
                    for (Map patternMap : patternList) {
                        targetHex = Long.toHexString(target);
                        if (targetHex.endsWith(patternMap.get("offset"))) {
                            String targetValueHex = Long.toHexString(unsafe.getAddress(target));
                            System.out.println("[!]bingo.");
                            if (targetValueHex.endsWith(patternMap.get("value"))) {
                                System.out.println("[ok]i found agent env:start get " + Long.toHexString(target) + ",at  :" + Long.toHexString(unsafe.getAddress(target)) + ",j is:" + j);
                                System.out.println("[ok]jvm base is " + Long.toHexString(target - Integer.parseInt(patternMap.get("delta"), 16)));
                                System.out.println("[ok]jvmti object addr is " + Long.toHexString(target - Integer.parseInt(patternMap.get("delta"), 16) + jvmtiOffset));
                                //long jvmenvAddress=target-Integer.parseInt(patternMap.get("delta"),16)+0x776d30;
                                long jvmtiAddress = target - Integer.parseInt(patternMap.get("delta"), 16) + jvmtiOffset;
                                long agentAddress = getAgent(jvmtiAddress);
                                System.out.println("agentAddress:" + Long.toHexString(agentAddress));
                                Bird bird = new Bird();
                                bird.sayHello();
                                doAgent(agentAddress);
                                //doAgent(Long.parseLong(address));
                                bird.sayHello();
                                return;
                            }
                        }
                    }
                }
            }
        }
        private static long getAgent(long jvmtiAddress) {
            Unsafe unsafe = getUnsafe();
            long agentAddr = unsafe.allocateMemory(0x200);
            long jvmtiStackAddr = unsafe.allocateMemory(0x200);
            unsafe.putLong(jvmtiStackAddr, jvmtiAddress);
            unsafe.putLong(jvmtiStackAddr + 8, 0x30010100000071eel);
            unsafe.putLong(jvmtiStackAddr + 0x168, 0x9090909000000200l);
            System.out.println("long:" + Long.toHexString(jvmtiStackAddr + 0x168));
            unsafe.putLong(agentAddr, jvmtiAddress - 0x234f0);
            unsafe.putLong(agentAddr + 0x8, jvmtiStackAddr);
            unsafe.putLong(agentAddr + 0x10, agentAddr);
            unsafe.putLong(agentAddr + 0x18, 0x00730065006c0000l);
            //make retransform env
            unsafe.putLong(agentAddr + 0x20, jvmtiStackAddr);
            unsafe.putLong(agentAddr + 0x28, agentAddr);
            unsafe.putLong(agentAddr + 0x30, 0x0038002e00310001l);
            unsafe.putLong(agentAddr + 0x38, 0);
            unsafe.putLong(agentAddr + 0x40, 0);
            unsafe.putLong(agentAddr + 0x48, 0);
            unsafe.putLong(agentAddr + 0x50, 0);
            unsafe.putLong(agentAddr + 0x58, 0x0072007400010001l);
            unsafe.putLong(agentAddr + 0x60, agentAddr + 0x68);
            unsafe.putLong(agentAddr + 0x68, 0x0041414141414141l);
            return agentAddr;
        }
        private static void doAgent(long address) throws Exception {
            Class cls = Class.forName("sun.instrument.InstrumentationImpl");
            for (int i = 0; i < cls.getDeclaredConstructors().length; i++) {
                Constructor constructor = cls.getDeclaredConstructors()[i];
                constructor.setAccessible(true);
                Object obj = constructor.newInstance(address, true, true);
                for (Field f : cls.getDeclaredFields()) {
                    f.setAccessible(true);
                    if (f.getName().equals("mEnvironmentSupportsRedefineClasses")) {
                        //System.out.println("mEnvironmentSupportsRedefineClasses:" + f.get(obj));
                    }
                }
                for (Method m : cls.getMethods()) {
                    if (m.getName().equals("redefineClasses")) {
                        //System.out.println("redefineClasses:" + m);
                        String newBirdClassStr = "yv66vgAAADIAHwoABgARCQASABMIABQKABUAFgcAFwcAGAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQATTG5ldC9yZWJleW9uZC9CaXJkOwEACHNheUhlbGxvAQAKU291cmNlRmlsZQEACUJpcmQuamF2YQwABwAIBwAZDAAaABsBAAhjaGFuZ2VkIQcAHAwAHQAeAQARbmV0L3JlYmV5b25kL0JpcmQBABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAACAAEABwAIAAEACQAAAC8AAQABAAAABSq3AAGxAAAAAgAKAAAABgABAAAAAwALAAAADAABAAAABQAMAA0AAAABAA4ACAABAAkAAAA3AAIAAQAAAAmyAAISA7YABLEAAAACAAoAAAAKAAIAAAAGAAgABwALAAAADAABAAAACQAMAA0AAAABAA8AAAACABA=";
                        Bird bird = new Bird();
                        ClassDefinition classDefinition = new ClassDefinition(
                                bird.getClass(),
                                Base64.getDecoder().decode(newBirdClassStr));
                        ClassDefinition[] classDefinitions = new ClassDefinition[]{classDefinition};
                        try {
                            //Thread.sleep(5000);
                            m.invoke(obj, new Object[]{classDefinitions});
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
                //System.out.println("instrument obj:" + obj);
                //System.out.println("constr:" + cls.getDeclaredConstructors()[i]);
            }
        }
        private static Unsafe getUnsafe() {
            Unsafe unsafe = null;
            try {
                Field field = Unsafe.class.getDeclaredField("theUnsafe");
                field.setAccessible(true);
                unsafe = (Unsafe) field.get(null);
            } catch (Exception e) {
                throw new AssertionError(e);
            }
            return unsafe;
        }
    }
Bird.java
    package net.rebeyond;
    public class Bird {
        public void sayHello()
        {
            System.out.println("hello!");
        }
    }