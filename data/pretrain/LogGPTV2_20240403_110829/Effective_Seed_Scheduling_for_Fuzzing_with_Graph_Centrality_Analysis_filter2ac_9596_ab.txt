explain our approach. The sample program (shown on the left)
returns different values based on user input stored in variables
a and b. Intuitively, we want to pick the seed node that can
reach as many unvisited CFG edges as possible. In this case,
this corresponds to seed node (a = 15, b = 30). To do this,
our approach K-Scheduler takes two steps.
Edge Horizon Graph. First, we modify the CFG to build the
edge horizon graph. We classify nodes in the program’s CFG
as visited or unvisited based on the coverage of a fuzzer’s
current corpus. Figure 2a shows a classiﬁcation of program’s
CFG nodes, where nodes in gray are visited and nodes in
white are unvisited. We next identify horizon nodes, which
border the visited and unvisited CFG. In Figure 2a, the horizon
nodes are nodes A and B since they are unvisited nodes with
a visited parent node. We then insert seed nodes into the
CFG and connect them to any horizon node whose parent
is visited along the seed’s execution path. For example, seed
(a = 5, b = 30) takes both F alse sides of the branch and
hence its horizon node is node A. We connect this seed node
to horizon node A. Finally, we delete all visited nodes in the
CFG. Figure 2b shows the resulting edge horizon graph.
Katz centrality. Second, we compute Katz centrality over the
edge horizon graph. We use the β parameter in the centrality
computation to estimate the hardness to reach a node by
mutations. For this example, we assume that out of 100
mutations, 70 reached the parent of horizon node A, so its
β = 1− 70
100 = 0.3 and 30 reached the parent of horizon node
B, so its β = 1− 30
100 = 0.7. This shows that horizon node A is
harder to reach by mutations because a fuzzer failed to reach
it with 70% of its mutations. The remaining nodes default to
β = 1 as described in Section IV. Katz centrality also decays
the contribution from further away nodes when computing a
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:01:25 UTC from IEEE Xplore.  Restrictions apply. 
32196
InfluenceAnalysisOptimalSeedVisitedNodesMutate &Run ProgramUpdateSeedCorpusSeedCorpusSeedCorpusCFGEdge HorizonGraphNew Seeds1 a, b=read_input();
2 if(a > 20){
return 1;
3
4 }
5 else if(a > 10){
6
if (b > 20)
return 2;
else if (b > 10)
return 3;
else
return 4;
7
8
9
10
11
12 }
13 else
14
return 5;
(a) Program CFG.
(b) Edge horizon graph
(c) Computing Katz Centrality
Fig. 2: This ﬁgure shows how K-Scheduler is used for seed scheduling on a small program. Given the code example on the left,
Figure 2a shows the corresponding CFG, colored as gray if a node is visited and white if unvisited based on the fuzzer corpus. Figure
2b shows the edge horizon graph. Figure 2c displays node Katz centrality scores computed by iterative power method illustrated
in Table I. A fuzzer will prioritize seed (a = 15, b = 30) because it has the highest centrality score.
TABLE I: Katz centrality computation by the iterative power
method for the edge horizon graph in Figure 2c. Each row
corresponds to a node’s centrality value and each column
indicates the current iteration. The power method converges in
3 steps on this simple graph. Assume α = 0.5 and β = c(0).
t=0
0.3
0.7
1
1
1
1
t=1
0.3
1.7
1
1
1.15
1.5
t=2
0.3
1.7
1
1
1.15
2
t=3
0.3
1.7
1
1
1.15
2
ca
cb
cc
cd
cs1
cs2
node’s centrality with an α parameter. For this example, we
assume α = 0.5.
Detailed Katz centrality computation. To see how Katz
centrality is computed by the power method from Section
II, we show c(t = 0), c(t = 1), ... until it converges when
t = 3 in Table I, where the rows indicate the centrality
score for a node and the columns indicate time. To explain
the intuition behind Katz centrality, we walk through the
iteration for a single seed node s2 to explain the computation.
Initially, cs2(0) = 1. Using Equation 4 from Section II,
cs2(1) = α(ca(0) + cb(0)) + βs2 = 0.5∗ (0.3 + 0.7) + 1 = 1.5.
Then, the next iteration is cs2(2) = α(ca(1) + cb(1)) + βs2 =
0.5 ∗ (0.3 + 1.7) + 1 = 2 and cs2(3) = cs2(2) due to
convergence. This computation illustrates how Katz centrality
decays contributions from further away nodes. The number of
edges reachable from s2 is 4 but its Katz centrality score is
2 due to this decay. Moreover, the computation reﬂects that
Katz centrality increases if there are more edges reachable
from a node. Compared to s2, s1 can only reach 1 edge and
hence its centrality of 1.15 is lower. Based on the results of
Katz centrality, a fuzzer will prioritize seed (a = 15, b = 30)
because it has the highest centrality score among seed nodes.
Fig. 3: A target program’s CFG with visited nodes colored in
gray and unvisited nodes colored white. The dashed-brown line
shows the boundary between the visited and unvisited regions of
the CFG. Horizon nodes B1 and B2 sit at the border and are
deﬁned as unvisited nodes with a visited parent node.
IV. METHODOLOGY
In this section, we detail our approach to seed selection
with inﬂuence analysis. We ﬁrst describe how we build an
edge horizon graph from a program’s CFG and then how we
compute Katz centrality on the edge horizon graph. Lastly, we
describe how our approach can be integrated into a coverage-
guided fuzzer.
A. Edge Horizon Graph Construction
We construct the target program’s directed inter-procedural
control-ﬂow graph CF G = (N, E), where N is the set of
nodes representing the basic blocks and E is the set of edges
capturing control-ﬂow transitions through branches, jumps,
etc. In the rest of the paper, for clarity, we use CFG to refer
to the inter-procedural CFG unless otherwise noted. Directly
computing centrality over the original CFG is not useful
for seed selection because the graph lacks any reference to
seed nodes. Hence, we modify the CFG to construct an edge
horizon graph that contains seed nodes. We can then compute a
seed’s centrality for seed selection. At a high level, we classify
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:01:25 UTC from IEEE Xplore.  Restrictions apply. 
42197
if (a > 20)if (a > 10)if (b > 20)if (b > 10)ret 1ret 5ret 2ret 3ret 4ABseed corpus: (a=5, b=30), (a=15, b=30)TFTTTFFFif (b > 10)ret 1ret 3ret 4(a=5, b=30)(a=15, b=30)ABif (b > 10)ret 1ret 3ret 4(a=5, b=30)(a=15, b=30)ABc=0.3c=1.7c=1c=1c=1.15c=2CDS1S2VisitedUnvisitedB1B2Algorithm 1 Edge Horizon Graph Construction.
Input: G ← Inter-procedural CFG
S ← Seed corpus
P ← Program
for p ∈ u.parents do
if p ∈ V then
H = H ∪ u
visited nodes = GetCoverage(P, s)
V = V ∪ visited nodes
1: /* Classify Nodes as Visited/Unvisited */
2: V, U = {}, {}
3: for s ∈ S do
4:
5:
6: U = G.nodes \ V
7:
8: /* Identify Horizon Nodes */
9: H = {}
10: for u ∈ U do
11:
12:
13:
14:
15: /* Insert Seed Nodes */
16: for s ∈ S do
17:
18:
19:
20:
21:
22:
23:
24: for v ∈ V do
25:
26: G.RemoveLoops()
seed node = G.AddNode(s)
visited nodes = GetCoverage(P, s)
for v ∈ visited nodes do
for n ∈ v.children do
if n ∈ H then
G.AddEdge(seed node, n)
G.RemoveNode(v)
(cid:46) Remove visited nodes
(cid:46) Convert G to directed acyclic graph
original CFG nodes as visited or unvisited and connect newly-
inserted seed nodes to their corresponding horizon nodes,
which are unvisited nodes with a visited parent node. Such
connections ensure that a seed’s centrality measures its ability
to discover new edge coverage. We also delete visited nodes
from the CFG to avoid their contributions increasing a seed’s
centrality score. Lastly, we convert the CFG to a directed
acyclic graph to mitigate the undesirable effects of loops on
centrality. We present the algorithm for constructing the edge
horizon graph in Algorithm 1 and discuss each step in more
detail below.
Classifying Nodes as Visited or Unvisited. We ﬁrst classify
all CFG nodes as visited or unvisited based on the coverage
of a fuzzer’s current corpus. A CFG node is visited if it is
reached by the execution path of any seed in the corpus, or
elsewise unvisited. We denote the set of visited nodes as V
and the set of unvisited nodes as U. More formally,
V = {n|n ∈ N, visited(n) = 1}
U = {n|n ∈ N, visited(n) = 0}
(5)
(6)
Lines 1 to 6 in Algorithm 1 detail the classiﬁcation process.
Figure 3 colors visited nodes in gray and unvisited nodes in
white based on the fuzzer’s current corpus.
Identifying Horizon Nodes. We deﬁne a horizon node in
terms of the prior graph partition of V and U, the visited
and unvisited nodes as shown below.
H = {u|(v, u) ∈ E, v ∈ V, u ∈ U}
(7)
In other words, a horizon node is an unvisited node with a
visited parent node. Conceptually, horizon nodes border the
(cid:46) Union visited nodes with V
(cid:46) Compute the complement set of V
(a) Original CFG
(b) Transformed CFG
Fig. 4: Figure 4a shows that node B1 has the same centrality
as node B2 as an artifact of the loop. However, B1 should have
higher centrality than B2 because it can reach more edges. To
resolve this, we remove loops from the CFG and Figure 4b shows
the graph after this transformation.
(cid:46) Union u with H
unvisited and visited region between V and U. Figure 3 shows
how horizon nodes B1 and B2 border the unvisited and visited
regions of the CFG. Algorithm 1 computes this set of horizon
nodes in lines 8-13. Horizon nodes are crucial for fuzzing
because a fuzzer must ﬁrst reach a horizon node to increase
edge coverage. This property can be seen in Figure 3 where a
fuzzer must ﬁrst reach horizon node B1 or B2 to discover
new edge coverage. Therefore, a horizon node’s centrality
measures the number of edges that can potentially be reached
by mutations after visiting a horizon node.
Not all horizon nodes, however, have equal centrality. Some
horizon nodes can increase edge coverage more than others.
As shown in Figure 3, horizon node B2 reaches more edges
in U than horizon node B1. Hence, a fuzzer should prioritize
seeds close to horizon node B2 because B2 can reach more
edges in the unvisited CFG.
Inserting Seed Nodes. For each seed, we insert one node
into the edge horizon graph and connect this seed node to
a horizon node if the horizon node’s parent is visited along
the seed’s execution path. Lines 15 to 22 from Algorithm 1
specify how seed nodes are connected to horizon nodes and
Figure 2b visualizes the connection between seed nodes and
horizon nodes. Connecting seed nodes to their corresponding
horizon nodes ensures that a seed node’s centrality is the sum
of its horizon nodes centrality (i.e., Equation 1). Therefore,
a seed’s centrality measures its ability to discover new edge
coverage through mutations.
Deleting Visited Nodes. We delete visited nodes from the
edge horizon graph because we do not want a seed’s centrality
score to include contributions from already visited nodes. Note
that we preserve the connectivity of the CFG when deleting
visited nodes. For example, given a graph A → B → C, if
B was visited, we preserve the connectivity by adding an
edge producing A → C . Although this deletion changes the
distance between nodes (i.e., A → C now has distance 1), it
does preserve the connectivity, which is the most critical when
measuring centrality.
Mitigating the effect of loops on centrality. Loops in a
CFG can hurt the utility of a seed’s centrality score for seed
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:01:25 UTC from IEEE Xplore.  Restrictions apply. 
52198
invisiablec=5c=5c=5c=1c=1c=1.7B1B2c=3.5c=1.3c=1c=1c=1c=1.7B1B2invisiableselection. Figure 4a shows a level loop where node B1 and
its child node B2 are assigned equal scores by a centrality
analysis. However, nodes that initiate a loop should have more
centrality than nodes in the loop body. In this case, the node
that initiates the loop B1 should have higher centrality because
it can reach more edges. To solve this problem, we convert
the CFG to a directed acyclic graph by removing loops in
the CFG. Such loops originate in program constructs such as
while or for statements as well as connections between
caller and callee nodes (i.e., caller to callee edge and callee
to caller backedge can form a loop).
B. Inﬂuence Analysis
To compute a seed’s centrality, we could count the number
of potentially reachable edges from a seed node in the edge
horizon graph. However, this count assumes that all edges in-
dependent of distance are equally reachable and feasible which
does not hold true for most real-world programs [61, 40].
Ideally, we want to count all feasible and reachable edges from
a seed through mutations, but this is impractical to compute
as it requires computing feasibility along all edges. Instead we
use Katz centrality to approximate this count. Katz centrality
provides three properties that make it a natural ﬁt to approxi-
mate this count. First, it increases its approximation additively
if more edges can be reached from a seed node independent
of the order as described in Section II. Second, Katz centrality
decreases its approximation if mutation frequency information
suggests an edge is hard to reach or if edges are far away.
Third, Katz centrality is efﬁcient to compute with the power
method as discussed in Section II.
Below, we explain how we set the mutation frequency infor-
mation mechanism in Katz centrality and why Katz centrality
multiplicatively decays contributions from further-away edges.
Using historical mutation data as a bias. We observe that
β is a generic way of biasing a node’s centrality based on
external information. We therefore use β to lower a node’s
centrality if a node appears harder to reach by mutations. We
set each element of β to range from 0 to 1, where values
closer to 0 mean the node is harder to reach through mutations.
To measure this hardness, we use historical mutation data.
We initialize β = 1 if there are no mutations and iteratively
reﬁne it as a fuzzer generates mutations. We use the following
equation for node i,
βi = 1 − Ri
T
(8)
where Ri measures the number of mutations that reach node
i’s parents and T measures the total number of mutations for
all seeds.
Lastly, to set α, which ranges from 0 to 1, from Equation
9, we observe that setting α = 0 means all nodes in the edge
horizon graph will have the same centrality. This would not
be useful for seed selection because we could not distinguish
which seed node was more likely to discover new edge
coverage with its centrality score. In contrast, setting α = 1
treats closer and further-away edges with equal contribution,
which fails to reﬂect program behavior. In practice, we set
α = 0.5 based on our experiments as described in Section VI.
Decaying contributions from longer paths. Katz centrality
multiplicatively decays the contribution from further away
edges when computing a node’s centrality . This decay corre-
sponds to a well-known program behavior where further away
edges are harder to reach by mutations [40]. We also verify
this behavior with our own experiments in Appendix B. To see
how Katz centrality reduces the contribution from further-away
edges toward a node’s centrality, consider Equation 9 which
shows the 2nd iteration of the power method from Section II.
c(2) = ((α)0I + (α)1A + (α)2A2)β
(9)
Notice how the parameter α, which ranges between 0 and 1,
multiplicatively decays the contribution from higher matrix
powers. As discussed in Section II, higher matrix powers
consider edges farther away. Thus, this equation shows Katz
centrality reduces the contribution from further away edges
with multiplicative decay.
C. Seed Scheduling
Algorithm 2 shows how to integrate K-Scheduler into a
coverage-guided fuzzer. K-Scheduler ﬁrst builds the edge
horizon graph as shown in Algorithm 1 and computes the Katz
centrality over it to measure each seed’s centrality. A fuzzer
then uses these scores for seed scheduling which consists
of selecting a seed and allocating a corresponding mutation
budget. Because popular fuzzers such as AFL and LibFuzzer
differ greatly in these two components, we abstract them out
in lines 10 and 11 and specify how to integrate our generic
technique into them in Section V. Finally, K-Scheduler re-
computes the edge horizon graph and its Katz centrality when
the fuzzer discovers new edge coverage or a ﬁxed time has
elapsed. Periodically updating centrality (i.e. via β) ensures
that K-Scheduler provides useful guidance even when a
fuzzer fails to ﬁnd new edge coverage.
Algorithm 2 Fuzzer integration with K-Scheduler.
Input: G ← Inter-procedural CFG
(cid:46) Store mutation statistics
(cid:46) Indicate new edge coverage
(cid:46) Build horizon graph every k seconds
if has new = T rue or stats = ∅ or t.timeout() then
S ← Seed corpus
P ← Program
1: stats = {}
2: has new = F alse
3: t = CreateTimer(k)
4: while fuzzer is running do
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
H = GetHorizonNodes(G, S, P )
Beta = ComputeBeta(H, stats)
Ghorizon = GetHorizonGraph(G, S, P )
Ckatz = KatzCentrality(Ghorizon, Beta)
t.reset()
seed = ChooseSeed(S, Ckatz)
energy = ComputeEnergy(seed, Ckatz)
has new = Mutate(seed, energy)
stats.update()
(cid:46) Reset timer t
(cid:46) Fuzz seed with energy
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:01:25 UTC from IEEE Xplore.  Restrictions apply. 
62199